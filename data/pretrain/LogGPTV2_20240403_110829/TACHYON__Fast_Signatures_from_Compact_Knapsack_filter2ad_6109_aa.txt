title:TACHYON: Fast Signatures from Compact Knapsack
author:Rouzbeh Behnia and
Muslum Ozgur Ozmen and
Attila A. Yavuz and
Mike Rosulek
TACHYON: Fast Signatures from Compact Knapsack
Rouzbeh Behnia
Oregon State University
Corvallis, Oregon
PI:EMAIL
Muslum Ozgur Ozmen
Oregon State University
Corvallis, Oregon
PI:EMAIL
Attila A. Yavuz∗
University of South Florida
Tampa, Florida
PI:EMAIL
Mike Rosulek
Oregon State University
Corvallis, Oregon
PI:EMAIL
ABSTRACT
We introduce a simple, yet efficient digital signature scheme which
offers post-quantum security promise. Our scheme, named TACHYON,
is based on a novel approach for extending one-time hash-based
signatures to (polynomially bounded) many-time signatures, using
the additively homomorphic properties of generalized compact
knapsack functions. Our design permits TACHYON to achieve several
key properties. First, its signing and verification algorithms are the
fastest among its current counterparts with a higher level of security.
This allows TACHYON to achieve the lowest end-to-end delay among
its counterparts, while also making it suitable for resource-limited
signers. Second, its private keys can be as small as κ bits, where κ
is the desired security level. Third, unlike most of its lattice-based
counterparts, TACHYON does not require any Gaussian sampling
during signing, and therefore, is free from side-channel attacks
targeting this process. We also explore various speed and storage
trade-offs for TACHYON, thanks to its highly tunable parameters.
Some of these trade-offs can speed up TACHYON signing in exchange
for larger keys, thereby permitting TACHYON to further improve its
end-to-end delay.
KEYWORDS
Digital signatures; post-quantum security; authentication
1 INTRODUCTION
Ever since Shor [53] published polynomial-time quantum algo-
rithms for factoring and discrete logarithm, the threat of quantum
computation has loomed ominously over public-key cryptography.
Since traditional public-key cryptography is broken by quantum
attacks, alternative schemes with post-quantum (PQ) security must
be identified before quantum computers become practical.
Recently, the NSA has announced an advisory on the possibility
of transitioning to PQ-secure cryptography in the near future [46].
To avoid a hasty transition from current conventional cryptosys-
tems to PQ-secure systems, NIST has already initiated the first
round of standardizations for PQ cryptography1.
∗Work done in part while Attila A. Yavuz was at Oregon State University, Corvallis,
OR.
1https://csrc.nist.gov/Projects/Post-Quantum-Cryptography
1.1 The State of the Art and Limitations
Lamport [35] proposed the first PQ-secure one-time signature
scheme based on the idea of committing to secret keys via one-
way functions. Later, Bos and Chaum [13] and Reyzin and Reyzin
[51] proposed different variants of Lamport’s signature with the
aim of minimizing the public key and signature size, respectively.
Today, digital signatures based on lattices, hash functions, codes,
multivariates and symmetric primitives are the leading practical
candidates with PQ security.
• Lattice-based Signatures: There are two main categories of lattice-
based signature schemes. One is focusing on hardness of worst-
case to average-case problems with standard lattices (e.g., [39, 49]).
While they provide a strong security, they suffer from very large
parameter sizes (in the orders of a few MBs). Another direction,
with more focus on efficiency, is based on ring analogs of standard
lattice problems (e.g., [1, 19, 20]). Most of these efficient schemes,
however, suffer from costly sampling operations with high precision
over some normal distribution (e.g., Gaussian sampling) during the
signing. Relaxation of this requirement, by only sampling over
integers, permitted more efficient constructions like BLISS [19],
which is based on the Fiat-Shamir transform [23].
Gaussian sampling not only incurs a performance penalty, but its
implementation is also prone to side-channel attacks. For instance,
BLISS [19] has been targeted with a number of side-channel attacks
[22, 26]. At the moment, avoiding such side channels in implemen-
tation is considered to be highly challenging and error-prone [20].
The first efficient construction of lattice-based signatures via
the "Fiat-Shamir with Aborts" was proposed in [38] based on the
hardness of the Ring-SIS problem. A more efficient variation based
on the combination of the Ring-SIS and Ring-LWE problems was
later proposed in [39]. The schemes proposed in [5, 27] mainly
improved the signature sizes of these schemes. Recently, a more im-
proved and efficient version of these schemes called Dilithium was
proposed [20]. Dilithium avoids Gaussian sampling during signing
and its security is based on the learning with errors (LWE) and
short integer solution (SIS) problems in ideal lattices. We provide
a discussion in the similarities between our construction and this
line of work in Subsection 3.3.
qTESLA [12] is another lattice-based signature scheme proposed
to the first round of NIST standardization for PQ cryptography.
qTESLA is based on the decisional ring learning with errors (R-
LWE) problem. While similar to Dilithium [20] , qTESLA avoids
using Gaussian Sampling during signature generation, but it suffers
from a higher end-to-end delay.
pqNTRUSign [29] is an instantiation of modular lattice signa-
ture (over the NTRU lattice). Signatures can be generated using a
(bimodal) Gaussian or a uniform sampler. Similar to Dilithium [20],
pqNTRUSign employs rejection sampling to avoid the leakage of
the private key components. However, with the current suggested
parameters, the scheme suffers from a high signing time that is due
to the high rejection rate.
While other lattice-based primitives, such as key-exchange pro-
tocols, have undergone some real-world testing and evaluations
(e.g., [14]), the current precarious state of lattice-based approaches
has hindered the development of PQ-secure signatures.
• Hash-Based Signatures: Hash-based signatures can be proven se-
cure in the standard model under the very well-studied properties
of hash functions such as pre-image resistance. The combination of
Merkle trees [43] with early one-time hash-based signatures (e.g.,
Lamport [35]) results in very efficient stateful schemes which are se-
cure for a number of signatures. Traditional hash-based schemes are
stateful, to ensure that the signer does not reuse some of the private
key materials. Recently, stateless signatures (e.g., SPHINCS [11])
have been proposed. SPHINCS has a tight security reduction to the
security of its building blocks such as hash functions and PRNGs.
Unfortunately, these schemes have large signatures (≈ 41 KB) and
very costly signature generation, especially on low-end devices [31].
• Code-Based Signatures: Code-based cryptography has been largely
affected by the Syndrome Decoding Problem [10]. Since McEliece
cryptosystem [42], which is based on binary Goppa codes, there
have been a lot of efforts in balancing security and efficiency of
such systems. The most well-studied and provably secure approach
to obtain signature schemes is applying the Fiat-Shamir transform
[23] on the identification scheme proposed by Véron [56] and Stern
[54]. pqsigRM [36] is a new code-based signature scheme based
on punctured Reed-Muller (RM) submitted to the first NIST post-
quantum standardization conference. pqsigRM can be considered
as a highly improved version of the scheme in [18], where most of
the improvements are due to the replacement of Goppa Codes in
[18] with punctured RM codes. While pqsigRM has significantly
improved the overall parameters sizes in [18], the key sizes are still
larger than its lattice-based and hash-based counterparts.
• Multivariate-Based Signatures : There are a number of multivariate-
based signatures submitted to the NIST standardization of PQ cryp-
tography. For instance, GeMSS [15] can be considered as an im-
provement of its predecessor QUARTZ [47], that is based on the
Hidden Field Equations cryptosystems. GeMSS enjoys from an effi-
cient verification algorithm and very compact signatures, however,
the signing algorithm is significantly slower than its hash-based
counterparts (e.g., SPHINCS+ [30]).
• Symmetric Key Based Signatures: PICNIC [16] is another novel
construction which is based on the problems related to symmetric
key cryptography. PICNIC is obtained by applying the Fiat-Shamir
transform on an efficient zero-knowledge proof which results in
very short public key and private key sizes. However, the scheme
suffers from large signature sizes with relatively slow (as compared
to lattice-based schemes) signing and verification algorithms.
1.2 Our Contribution
We propose a simple and efficient PQ-secure signature scheme,
TACHYON, based on well-studied primitives. We outline a compari-
son between TACHYON and some of its other PQ-secure counterparts
in Table 2 (see Section 5), and further elaborate on its desirable prop-
erties below:
• New Algorithmic Design: TACHYON can be viewed as a novel modi-
fication of the HORS construction [51], which is based on one-way
functions. We harness the HORS approach with the generalized
compact knapsack (GCK) of Micciancio [44]. The additively ho-
momorphic property of GCK provides two benefits: It allows us to
compress the signature size as compared to one-time signatures,
and more importantly, it leads to a totally new paradigm for extend-
ing few-time hash-based signatures to stateless schemes supporting
polynomially-bounded number of signatures.
The security of our scheme is based on the one-wayness of GCK
function family. These properties reduce to the worst-case hardness
of problems in cyclic lattices [40, 44].
• Improved Side-Channel Resiliency: It has been shown that Gaussian
sampling is prone to side-channel attacks (e.g., [26, 50]). Since side
channels are a property of an algorithm’s implementation, they can
be somewhat mitigated with suitable implementation techniques.
However, the process of eliminating side channels in Gaussian sam-
pling algorithms (e.g., in BLISS [19]) is known to be arduous and
error-prone [20]. TACHYON does not require any variants of Gauss-
ian sampling. Instead, it uses uniform sampling over a bounded
domain, and rejection sampling to check for an outputted signature
to be in a safe range.
• Fast Verification: The verification algorithm of TACHYON is very
efficient, involving only two hash function calls, a GCK one-way
function call, and vector additions. This makes TACHYON the most
verifier computationally efficient alternative among its counterparts.
For example, using TACHYON with 256-bit security, it is possible to
verify 35,714 messages per second on commodity hardware (e.g.,
Intel 6th generation i7 processor), which is up to 3.7× faster than
Dilithium [20], one of its fastest alternatives.
• Fast Signing: Signature generation of TACHYON does not require
any costly operations (e.g., Gaussian sampling) but only a GCK
function call (which is demonstrated to be fast [41]), along with a
small constant number of pseudorandom function (PRF) calls and a
small number of vector additions. This makes the signature genera-
tion of TACHYON the fastest as compared to its counterparts.
• Small Private Key: The private keys in TACHYON are as small as
κ-bit, which is the smallest among existing PQ-secure schemes.
Furthermore, unlike some other schemes (e.g., [19]), the signer does
not need to store a pre-computed table to be used in the sampling
2
process. Along with the signer computational efficiency, this prop-
erty makes TACHYON a feasible alternative for low-end devices.
• Tunable Parameters: Our new algorithmic design allows us to
offer various speed and storage trade-offs based on the parameter
choices. For instance, one can pre-compute and store some inter-
mediate values at the signer’s side in exchange for a faster signing,
reduce the public key and/or signature size but with an increase in
the end-to-end delay, or increase the signature size to offer lower
rejection sampling rates for a faster signing. Some of these possible
trade-offs are further elaborated in Subsection 5.2.
Limitations: All of these desirable properties of TACHYON come
at the cost of a larger public key. For instance, the public key in
TACHYON-256 is as large as 2976 KB, whereas it is only 1760 bytes
in Dilithium[20]. Yet, we believe there are many use-cases where
storing a larger public key is tolerable. For instance, a resourceful
command center that verifies a large number of signatures from
sensors can store such a public key. However, if the verifier is strictly
memory-limited and cannot afford to store large public keys, then
schemes with a smaller public key, such as Dilithium, should be
considered.
2 PRELIMINARIES
Notation. We work over a ring R = Zq[x]/(f ) (in this paper f (x) =
(x N + 1)), where N is a power of two, and q is a prime such that
1 ≡ q mod 2N . We denote vectors as bold letters (i.e., v), while
$← S denotes that
scalars are denoted as non-bold letters (i.e., u). x
x is being randomly selected from set S. |x| denotes the bit length
of a number x, i.e., |x| = log2 x. AO1 ...On(·) denotes algorithm
A is provided with access to oracles O1 . . . On. For a vector w =
(w1, . . . , wN ) we define ∥w∥∞ = max{|wi| : i = 1, . . . , N }.
2.1 Digital Signatures
algorithms SGN = (Kg,Sig,Ver) defined as follows.
outputs a private/public key pair (sk, PK).
sk, it outputs a signature σ.
pair (M, σ), and PK, it outputs b ∈ {0, 1}.
Definition 2.1. A digital signature scheme is a tuple of three
– (sk, PK) ← SGN.Kg(1κ): Given the security parameter κ, it
– σ ← SGN.Sig(M, sk): Given a message M and private key
– {0, 1} ← SGN.Ver(M, σ , PK): Given a message-signature
We say that SGN is correct if for all (sk, PK) ← SGN.Kg(1κ),
SGN.Ver(M, SGN.Sig(M, sk), PK) = 1 holds.
We define security using the code-based games methodology
of Bellare & Rogaway [9]. A game G is a collection of stateful
oracles/functions. Given an adversary A, the interaction GA refers
to the following: (1) the Initialize function of the game is run,
and its output given as input to A. (2) A may invoke any of the
functions of G. (3) When A terminates, its output is given to the
Finalize function of G. The output of Finalize is the output of the
interaction GA.
Algorithm 1 EU-CMA game G[SGN] for a signature scheme SGN, in
the random oracle model. Algorithms of SGN are allowed to query
oracle H.
1: function Initialize
(sk, PK) ← SGN.Kg(1κ)
2:
return PK
3:
4: function H(q)
if L[q] is not defined then
5:
$← {0, 1}κ
6:
a
L[q] ← a
7:
return L[q]
8:
9: function Sig(M)
add M to set M
10:
return SGN.Sig(M, sk)
11:
12: function Finalize(M∗, σ∗)
return [M∗ (cid:60) M] ∧ [SGN.Ver(M∗, σ∗, PK) = 1]
13:
terms of the game G[SGN] in Algorithm 1. The EU-CMA advantage
of A is defined as
AdvEU-CMA
SGN,A = Pr[G[SGN]A = 1]
We say that A (tA, qS , qH , ϵA)-breaks the EU-CMA of SGN if it
makes at most qS and qH signature and hash queries (respectively)
SGN,A ≥ ϵA, and we say that
and runs in time at most tA where AdvEU-CMA
SGN is (tA, qS , qH , ϵA)-secure if no algorithm A (tA, qS , qH , ϵA)-
breaks it.
2.2 Forking Lemma
The security model of TACHYON is in Random Oracle Model (ROM) [8],
and also it relies on Generalized Forking Lemma (GFL) [7]. GFL is
a commonly used technique in the security proof of various well-
studied digital signature schemes (e.g., Schnorr [52]). Intuitively,
GFL states that if an adversary can successfully generate a forgery,
then it is possible to rewind the adversary, choose new random
oracle responses after a certain point, and the adversary will still
be able to generate a forgery with polynomially-related probability.
Lemma 2.1. (General Forking Lemma [7]) Fix an integer qF ≥
1 and a set H of size hF ≥ 2. Let A be a randomized algorithm
that returns a pair (J , σ) where J ∈ {0, . . . , hqF } and σ is the side
output, on the input of (x, h1, . . . , hqF ) . For IG as a randomized