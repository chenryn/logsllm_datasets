如需更多信息，请参阅[使用 LLVM
Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1/html/using_llvm_12.0.1_toolset/index){.link}。
(BZ#1927937)
[]{#New-features.html#BZ-1957947}
::: title
**CMake rebase 到版本 3.20.2**
:::
CMake 从 3.18.2 改为 3.20.2。要在需要 3.20.2 或更少版本的项目上使用
CMake，请使用命令 cmake_minimum_required（版本 3.20.2）。
主要变更包括：
::: itemizedlist
-   C++23 编译器模式现在可以使用目标属性
    `CXX_STANDARD`{.literal}、`CUDA_STANDARD`{.literal}、`OBJCXX_STANDARD`{.literal}
    或使用编译功能中的 `cxx_std_23`{.literal} 元功能来指定。
-   CUDA 语言支持现在允许 NVIDIA CUDA 编译器成为符号链接。
-   现在，Intel 1API NextGen LLVM 编译器被 `IntelLLVM`{.literal} 编译器
    ID 支持。
-   CMake 现在通过与 Android NDK 的工具链文件合并，促进 Android
    的交叉编译。
-   当运行 `cmake(1)`{.literal}
    以生成项目构建系统时，未知的命令行参数以连字符开头现在将被拒绝。
:::
有关新功能和已弃用功能的更多信息，请参阅 [CMake
发行注记](https://cmake.org/cmake/help/latest/release/3.20.html){.link}。
(BZ#1957947)
[]{#New-features.html#BZ-1953094}
::: title
**新的 GCC 工具集 11**
:::
GCC 工具集 11 是提供开发工具最新版本的编译器工具集。它以
`AppStream`{.literal} 存储库中的 Software Collection 的形式作为
Application Stream 提供。
从 GCC Toolset 10 开始，以下组件被 rebase:
::: itemizedlist
-   GCC 到版本 11.2
-   GDB 到版本 10.2
-   Valgrind 到版本 3.17.0
-   SystemTap 到版本 4.5
-   Binutils 到 2.36 版本
-   elfutils 到版本 0.185
-   dwz 到版本 0.14
-   annobin 到版本 9.85
:::
有关组件的完整列表，请参阅 [GCC Toolset
11](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/additional-toolsets-for-development_developing-applications#gcc-toolset-11_assembly_additional-toolsets-for-development){.link}。
要安装 GCC Toolset 11，以 root 用户身份运行以下命令：
``` literallayout
# yum install gcc-toolset-11
```
要从 GCC Toolset 11 运行工具：
``` literallayout
$ scl enable gcc-toolset-11 tool
```
要运行 shell 会话，GCC Toolset 11 的工具版本会覆盖这些工具的系统版本：
``` literallayout
$ scl enable gcc-toolset-11 bash
```
如需更多信息，请参阅 [使用 GCC
Toolset](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/additional-toolsets-for-development_developing-applications#gcc-toolset_assembly_additional-toolsets-for-development){.link}。
GCC Toolset 11 组件也可以在两个容器镜像中找到：
::: itemizedlist
-   `rhel8/gcc-toolset-11-toolchain`{.literal}，其中包括 GCC 编译器、GDB
    调试器和 `make`{.literal} 自动化工具。
-   `rhel8/gcc-toolset-11-perftools`{.literal}，其中包括性能监控工具，如
    SystemTap 和 Valgrind。
:::
要拉取容器镜像，以 root 身份运行以下命令：
``` screen
# podman pull registry.redhat.io/
```
请注意，现在只支持 GCC Toolset 11 容器镜像。之前 GCC Toolset
版本的容器镜像已弃用。
(BZ#1953094)
[]{#New-features.html#BZ-2022794}
::: title
**.NET 更新至 6.0 版本**
:::
Red Hat Enterprise Linux 8.5 带有 [**.NET**]{.strong} 版本
6.0。主要改进包括：
::: itemizedlist
-   支持 64 位 Arm(aarch64)
-   支持 IBM Z 和 LinuxONE(s390x)
:::
如需更多信息，请参阅 [.NET 6.0 RPM
软件包](https://access.redhat.com/documentation/en-us/net/6.0/html/release_notes_for_.net_6.0_rpm_packages/index){.link}
的发行说明和 [.NET 6.0
容器](https://access.redhat.com/documentation/en-us/net/6.0/html/release_notes_for_.net_6.0_containers/index){.link}
的发行注记。
([BZ#2022794](https://bugzilla.redhat.com/show_bug.cgi?id=2022794){.link})
[]{#New-features.html#BZ-1946782}
::: title
**GCC Toolset 11:GCC rebase 到版本 11.2**
:::
在 GCC Toolset 11 中，GCC 软件包已更新至版本
11.2。重要的程序错误修复和增强包括：
[**常规改进**]{.strong}
::: itemizedlist
-   GCC 现在默认为 DWARF Version 5 调试格式。
-   诊断中显示的列号默认代表实际列号，并遵循多列字符。
-   直线代码向量化时会考虑整个函数。
-   如果匹配同一变量的系列条件表达式各自包含比较表达式，则可以转换为
    switch 语句。
-   流程优化改进：
    ::: itemizedlist
    -   新的 IPA-modref 直通由 `-fipa-modref`{.literal}
        选项控制，可跟踪函数调用的副作用，并提高点分析的准确性。
    -   相同的代码折叠通过由 `-fipa-icf`{.literal}
        选项控制，极大改进，以增加统一功能的数量并减少编译时间内存使用。
    :::
-   链接时间优化改进：
    ::: itemizedlist
    -   改进了链接期间的内存分配，以减少峰值内存使用。
    :::
-   通过使用 IDE 中的新 `GCC_EXTRA_DIAGNOSTIC_OUTPUT`{.literal}
    环境变量，您可以在不调整构建标志的情况下请求机器可读的\"fix-it
    hints\"。
-   静态分析器通过 `-fanalyzer`{.literal}
    选项运行，提供的很多程序错误修复和增强功能得到了显著改进。
:::
[**特定于语言的改进**]{.strong}
[**c 系列**]{.strong}
::: itemizedlist
-   C 和 C++ 编译器支持 OpenMP 结构中的非循环嵌套以及 OpenMP 5.0
    规范的分配器例程。
-   属性：
    ::: itemizedlist
    -   新的 `no_stack_protector`{.literal}
        属性标记不应通过堆栈保护来检测的功能(`-fstack-protector`{.literal})。
    -   改进后的 `malloc`{.literal} 属性可用于识别分配器和经销商 API
        对。
    :::
-   新警告：
    ::: itemizedlist
    -   `-Wsizeof-array-div`{.literal} 由 `-Wall`{.literal}
        选项启用，当第一个
        `运算符应用到数组时，会警告对两个大小`{.literal}
        运算符的划分，并且 devisor 不等于数组元素的大小。
    -   `-Wstringop-overread`{.literal}
        （默认启用）会警告对字符串函数的调用，这些函数试图读过作为参数传递给它们的阵列的末尾。
    :::
-   增强的警告：
    ::: itemizedlist
    -   `-Wfree-nonheap-object`{.literal}
        使用从动态内存分配功能返回的指针检测更多调用功能实例。
    -   `-Wmaybe-uninitialized`{.literal}
        将指针的传递和引用未初始化内存的传递诊断为采用
        `const`{.literal}-qualified 参数的功能。
    -   `-Wuninitialized`{.literal}
        检测来自未初始化动态分配的内存的读取。
    :::
:::
[**C**]{.strong}
::: itemizedlist
-   通过 -std=c2x 和 `-std=c2x 和 -std=gnu2x`{.literal}
    选项支持即将推出的 ISO C2``{=html} X
    标准中的几个新功能。例如：
    ::: itemizedlist
    -   ``{.literal} 标准属性被支持。
    -   支持 `__has_c_attribute`{.literal} 预处理器运算符。
    -   标签可能会在声明之前和复合语句的末尾出现。
    :::
:::
[**C++**]{.strong}
::: itemizedlist
-   默认模式更改为 `-std=gnu++17`{.literal}。
-   C++ 库 `libstdc++`{.literal} 现在改进了 C++17 支持。
-   实施了几个新的 C++20 功能。请注意，C++20 支持是实验性的。
    有关功能的更多信息，请参阅 [C++20
    语言功能](https://gcc.gnu.org/projects/cxx-status.html#cxx20){.link}。
-   C++ 前端对即将到来的 C++23 草案功能具有实验性支持。
-   新警告：
    ::: itemizedlist
    -   `-Wctad-maybe-unsupported`{.literal},
        默认禁用，警告在类型上执行类模板参数，且无滥用指南。
    -   当基于范围的 for 循环创建不必要的和资源低效副本时，由
        `-Wall`{.literal} 启用的 - `Wrange-loop-construct`{.literal}
        将发出警告。
    -   `-Wmismatched-new-delete`{.literal} 由 `-Wall`{.literal}
        启用，警告有关使用从不匹配运算符的新形式的返回或从其他不匹配分配功能返回的调用
        operator 删除的指针。
    -   `-Wvexing-parse`{.literal} 默认启用，警告大多数 vexing
        解析规则：当声明看起来类似于变量定义时，但 C++
        语言要求将它解释为函数声明。
    :::
:::
[**特定于架构的改进**]{.strong}
[**64 位 ARM 架构**]{.strong}
::: itemizedlist
-   Armv8-R 架构通过 `-march=armv8-r 选项受到支持`{.literal}。
-   GCC 可在复杂数字上自动执行添加、减法、乘法和累积变量和减去变体。
:::
[**AMD 和 Intel 64 位构架**]{.strong}
::: itemizedlist
-   支持以下 Intel CPU：sapphire 快速、Alder Lake 和 Rocket Lake.
-   添加了 Intel AVX-VNNI 的新 ISA 扩展支持。`-mavxvnni`{.literal}
    编译器交换机控制 AVX-VNNI 内部。
-   新的 `-march=znver3 选项支持基于 znver3`{.literal} 核心的 AMD CPU。
-   [x86-64 psABI 补充](https://gitlab.com/x86-psABIs/x86-64-ABI){.link}
    中定义的三个微架构级别受全新 `-march=x86-64-v2、-`{.literal}
    `march=x86-64-v3`{.literal} 和 `-march=x86-64-v4`{.literal}
    选项的支持。
:::
(BZ#1946782)
[]{#New-features.html#BZ-1948709}
::: title
**GCC Toolset 11: `dwz`{.literal} 现在支持 DWARF 5**
:::
在 GCC Toolset 11 中，`sdwz`{.literal} 工具现在支持 DWARF 版本 5
调试格式。
(BZ#1948709)
[]{#New-features.html#BZ-1927516}
::: title
**GCC Toolset 11:GCC 现在支持 AIA 用户中断**
:::
在 GCC Toolset 11 中，GCC 现在支持加速器交互架构(AIA)用户中断。
(BZ#1927516)
[]{#New-features.html#BZ-1979715}
::: title
**GCC Toolset 11:改进了通用 SVE 调整默认值**
:::
在 GCC Toolset 11 中，在 64 位 ARM 架构中改进了通用 SVE 调优默认值。
(BZ#1979715)
[]{#New-features.html#BZ-1933889}
::: title
**SystemTap rebase 到版本 4.5**
:::
SystemTap 软件包已更新至版本 4.5。重要的程序错误修复和增强包括：
::: itemizedlist
-   32 位浮点变量自动转换为双变量，因此可作为 `$context`{.literal}
    变量直接访问。
-   `数值`{.literal} 可以作为 `$context`{.literal} 变量访问。
-   BPF uconversions tapset 已扩展，包含更多 tapset
    功能来访问用户空间中的值，如 `user_long_error(`{.literal} )。
-   并发控制得到了显著改进，以在大型服务器上提供稳定的操作。
:::
如需更多信息，请参阅上游 [SystemTap 4.5
发行注记](https://sourceware.org/pipermail/systemtap/2021q2/027225.html){.link}。