\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   opengroup's single unix specification
.\"	http://www.unix-systems.org/online.html
.\"
.\" 2000-06-30 correction by yuichi sato 
.\" 2000-11-15 aeb, fixed prototype
.\"
.th iconv 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
iconv \- perform character set conversion
.sh synopsis
.nf
.b #include 
.pp
.bi "size_t iconv(iconv_t " cd ,
.bi "             char **restrict " inbuf ", size_t *restrict " inbytesleft ,
.bi "             char **restrict " outbuf ", size_t *restrict " outbytesleft );
.fi
.sh description
the
.br iconv ()
function converts a sequence of characters in one character encoding
to a sequence of characters in another character encoding.
the
.i cd
argument is a conversion descriptor,
previously created by a call to
.br iconv_open (3);
the conversion descriptor defines the character encodings that
.br iconv ()
uses for the conversion.
the
.i inbuf
argument is the address of a variable that points to
the first character of the input sequence;
.i inbytesleft
indicates the number of bytes in that buffer.
the
.i outbuf
argument is the address of a variable that points to
the first byte available in the output buffer;
.i outbytesleft
indicates the number of bytes available in the output buffer.
.pp
the main case is when \fiinbuf\fp is not null and \fi*inbuf\fp is not null.
in this case, the
.br iconv ()
function converts the multibyte sequence
starting at \fi*inbuf\fp to a multibyte sequence starting at \fi*outbuf\fp.
at most \fi*inbytesleft\fp bytes, starting at \fi*inbuf\fp, will be read.
at most \fi*outbytesleft\fp bytes, starting at \fi*outbuf\fp, will be written.
.pp
the
.br iconv ()
function converts one multibyte character at a time, and for
each character conversion it increments \fi*inbuf\fp and decrements
\fi*inbytesleft\fp by the number of converted input bytes, it increments
\fi*outbuf\fp and decrements \fi*outbytesleft\fp by the number of converted
output bytes, and it updates the conversion state contained in \ficd\fp.
if the character encoding of the input is stateful, the
.br iconv ()
function can also convert a sequence of input bytes
to an update to the conversion state without producing any output bytes;
such input is called a \fishift sequence\fp.
the conversion can stop for four reasons:
.ip 1. 3
an invalid multibyte sequence is encountered in the input.
in this case,
it sets \fierrno\fp to \fbeilseq\fp and returns
.ir (size_t)\ \-1 .
\fi*inbuf\fp
is left pointing to the beginning of the invalid multibyte sequence.
.ip 2.
the input byte sequence has been entirely converted,
that is, \fi*inbytesleft\fp has gone down to 0.
in this case,
.br iconv ()
returns the number of
nonreversible conversions performed during this call.
.ip 3.
an incomplete multibyte sequence is encountered in the input, and the
input byte sequence terminates after it.
in this case, it sets \fierrno\fp to
\fbeinval\fp and returns
.ir (size_t)\ \-1 .
\fi*inbuf\fp is left pointing to the
beginning of the incomplete multibyte sequence.
.ip 4.
the output buffer has no more room for the next converted character.
in this case, it sets \fierrno\fp to \fbe2big\fp and returns
.ir (size_t)\ \-1 .
.pp
a different case is when \fiinbuf\fp is null or \fi*inbuf\fp is null, but
\fioutbuf\fp is not null and \fi*outbuf\fp is not null.
in this case, the
.br iconv ()
function attempts to set \ficd\fp's conversion state to the
initial state and store a corresponding shift sequence at \fi*outbuf\fp.
at most \fi*outbytesleft\fp bytes, starting at \fi*outbuf\fp, will be written.
if the output buffer has no more room for this reset sequence, it sets
\fierrno\fp to \fbe2big\fp and returns
.ir (size_t)\ \-1 .
otherwise, it increments
\fi*outbuf\fp and decrements \fi*outbytesleft\fp by the number of bytes
written.
.pp
a third case is when \fiinbuf\fp is null or \fi*inbuf\fp is null, and
\fioutbuf\fp is null or \fi*outbuf\fp is null.
in this case, the
.br iconv ()
function sets \ficd\fp's conversion state to the initial state.
.sh return value
the
.br iconv ()
function returns the number of characters converted in a
nonreversible way during this call; reversible conversions are not counted.
in case of error,
.br iconv ()
returns
.ir (size_t)\ \-1
and sets
.i errno
to indicate the error.
.sh errors
the following errors can occur, among others:
.tp
.b e2big
there is not sufficient room at \fi*outbuf\fp.
.tp
.b eilseq
an invalid multibyte sequence has been encountered in the input.
.tp
.b einval
an incomplete multibyte sequence has been encountered in the input.
.sh versions
this function is available in glibc since version 2.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br iconv ()
t}	thread safety	mt-safe race:cd
.te
.hy
.ad
.sp 1
.pp
the
.br iconv ()
function is mt-safe, as long as callers arrange for
mutual exclusion on the
.i cd
argument.
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
in each series of calls to
.br iconv (),
the last should be one with \fiinbuf\fp or \fi*inbuf\fp equal to null,
in order to flush out any partially converted input.
.pp
although
.i inbuf
and
.i outbuf
are typed as
.ir "char\ **" ,
this does not mean that the objects they point can be interpreted
as c strings or as arrays of characters:
the interpretation of character byte sequences is
handled internally by the conversion functions.
in some encodings, a zero byte may be a valid part of a multibyte character.
.pp
the caller of
.br iconv ()
must ensure that the pointers passed to the function are suitable
for accessing characters in the appropriate character set.
this includes ensuring correct alignment on platforms that have
tight restrictions on alignment.
.sh see also
.br iconv_close (3),
.br iconv_open (3),
.br iconvconfig (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/readv.2
.so man2/posix_fadvise.2
.so man3/rpc.3
.\" copyright (c) 2006, 2014, michael kerrisk
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th fexecve 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
fexecve \- execute program specified via file descriptor
.sh synopsis
.nf
.b #include 
.pp
.bi "int fexecve(int " fd ", char *const " argv "[], char *const " envp []);
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br fexecve ():
.nf
    since glibc 2.10:
        _posix_c_source >= 200809l
    before glibc 2.10:
        _gnu_source
.fi
.sh description
.br fexecve ()
performs the same task as
.br execve (2),
with the difference that the file to be executed
is specified via a file descriptor,
.ir fd ,
rather than via a pathname.
the file descriptor
.i fd
must be opened read-only
.rb ( o_rdonly )
or with the
.b o_path
flag
and the caller must have permission to execute the file that it refers to.
.sh return value
a successful call to
.br fexecve ()
never returns.
on error, the function does return, with a result value of \-1, and
.i errno
is set to indicate the error.
.sh errors
errors are as for
.br execve (2),
with the following additions:
.tp
.b einval
.i fd
is not a valid file descriptor, or
.i argv
is null, or
.i envp
is null.
.tp
.b enoent
the close-on-exec flag is set on
.ir fd ,
and
.i fd
refers to a script.
see bugs.
.tp
.b enosys
the kernel does not provide the
.br execveat (2)
system call, and the
.i /proc
filesystem could not be accessed.
.sh versions
.br fexecve ()
is implemented since glibc 2.3.2.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br fexecve ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2008.
this function is not specified in posix.1-2001,
and is not widely available on other systems.
it is specified in posix.1-2008.
.sh notes
on linux with glibc versions 2.26 and earlier,
.br fexecve ()
is implemented using the
.br proc (5)
filesystem, so
.i /proc
needs to be mounted and available at the time of the call.
since glibc 2.27,
.\" glibc commit 43ffc53a352a67672210c9dd4959f6c6b7407e60
if the underlying kernel supports the
.br execveat (2)
system call, then
.br fexecve ()
is implemented using that system call, with the benefit that
.ir /proc
does not need to be mounted.
.pp
the idea behind
.br fexecve ()
is to allow the caller to verify (checksum) the contents of
an executable before executing it.
simply opening the file, checksumming the contents, and then doing an
.br execve (2)
would not suffice, since, between the two steps, the filename,
or a directory prefix of the pathname, could have been exchanged
(by, for example, modifying the target of a symbolic link).
.br fexecve ()
does not mitigate the problem that the
.i contents
of a file could be changed between the checksumming and the call to
.br fexecve ();
for that, the solution is to ensure that the permissions on the file
prevent it from being modified by malicious users.
.pp
the natural idiom when using
.br fexecve ()
is to set the close-on-exec flag on
.ir fd ,
so that the file descriptor does not leak through to the program
that is executed.
this approach is natural for two reasons.
first, it prevents file descriptors being consumed unnecessarily.
(the executed program normally has no need of a file descriptor
that refers to the program itself.)
second, if
.br fexecve ()
is used recursively,
employing the close-on-exec flag prevents the file descriptor exhaustion
that would result from the fact that each step in the recursion would
cause one more file descriptor to be passed to the new program.
(but see bugs.)
.sh bugs
if
.i fd
refers to a script (i.e., it is an executable text file that names
a script interpreter with a first line that begins with the characters
.ir #! )
and the close-on-exec flag has been set for
.ir fd ,
then
.br fexecve ()
fails with the error
.br enoent .
this error occurs because,
by the time the script interpreter is executed,
.i fd
has already been closed because of the close-on-exec flag.
thus, the close-on-exec flag can't be set on
.i fd
if it refers to a script, leading to the problems described in notes.
.sh see also
.br execve (2),
.br execveat (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/cexp.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 18:49:59 1993 by rik faith (PI:EMAIL)
.th memmove 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
memmove \- copy memory area
.sh synopsis
.nf
.b #include 
.pp
.bi "void *memmove(void *" dest ", const void *" src ", size_t " n );
.fi
.sh description
the
.br memmove ()
function copies
.i n
bytes from memory area
.i src
to memory area
.ir dest .
the memory areas may overlap: copying takes place as though
the bytes in
.i src
are first copied into a temporary array that does not overlap
.i src
or
.ir dest ,
and the bytes are then copied from the temporary array to
.ir dest .
.sh return value
the
.br memmove ()
function returns a pointer to
.ir dest .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br memmove ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c89, c99, svr4, 4.3bsd.
.sh see also
.br bcopy (3),
.br bstring (3),
.br memccpy (3),
.br memcpy (3),
.br strcpy (3),
.br strncpy (3),
.br wmemmove (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1997 andries brouwer (PI:EMAIL)
.\" and copyright (c) 2007, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified, 2003-05-26, michael kerrisk, 
.\"
.th getresuid 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
getresuid, getresgid \- get real, effective, and saved user/group ids
.sh synopsis
.nf