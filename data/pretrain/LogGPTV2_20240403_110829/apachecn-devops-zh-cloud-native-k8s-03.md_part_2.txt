  containers:
  - name: my-app-container
    image: busybox
```
一般来说，使用`annotations`添加数据或扩展功能时，最好使用`labels`来添加 Kubernetes 特有的功能和选择器——这只是一个约定。
### 投机
`spec`是包含资源特定配置的顶级键。在这种情况下，由于我们的`kind`值是`Pod`，我们将添加一些特定于我们的 Pod 的配置。所有进一步的键将缩进在这个`spec`键下，并将代表我们的 Pod 配置。
### 容器
`containers`键需要一个将在 Pod 中运行的一个或多个容器的列表。每个容器规范将公开它自己的配置值，这些值缩进到您的资源 YAML 中的容器列表项下。我们将在这里回顾其中的一些配置，但是要获得完整的列表，请查看 Kubernetes 文档([https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/))。
### 名字
在容器规范中，`name`与容器在 Pod 中的名称相关。容器名称可以用来使用`kubectl logs`命令专门访问特定容器的日志，但我们稍后会谈到这一点。现在，确保您为 Pod 中的每个容器选择一个明确的名称，以便调试时更容易。
### 映像
对于每个容器，`image`用于指定应在 Pod 中启动的 Docker(或其他运行时)映像的名称。映像将从已配置的存储库中提取，默认情况下，该存储库是公共的 Docker Hub，但也可以是私有存储库。
就这样——这就是你需要指定一个 Pod 并在 Kubernetes 中运行它的全部内容。从这一点开始，`Pod`部分的所有内容都属于*附加配置*的保护伞。
### Pod 资源规格
Pods 可以配置为分配特定数量的内存和计算。这可以防止特别饥饿的应用影响集群性能，也有助于防止内存泄漏。可以指定两种可能的资源–`cpu`和`memory`。对于其中的每一个，都有两种不同类型的规范，`Requests`和`Limits`，总共有四个可能的资源规范键。
内存请求和限制可以用任何典型的内存号后缀或其二的幂来配置，例如 50 兆字节、50 兆字节或 1 吉字节。
中央处理器请求和限制可以通过使用对应于 1 毫中央处理器的`m`来配置，也可以仅使用十进制数来配置。所以`200m`相当于`0.2`，相当于一个逻辑 CPU 的 20%或者五分之一。无论内核数量多少，该数量都将是相同的计算能力。1 个 CPU 相当于 AWS 中的一个虚拟内核或 GCP 的一个内核。让我们看看这些资源请求和限制在我们的 YAML 文件中是什么样子的:
资源受限的 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app-container
    image: mydockername
    resources:
      requests:
        memory: "50Mi"
        cpu: "100m"
      limits:
        memory: "200Mi"
        cpu: "500m"
```
在这个`Pod`中，我们有一个运行 Docker 映像的容器，它在`cpu`和`memory`上指定了请求和限制。在本例中，我们的容器映像名称`mydockername`是一个占位符，但是如果您想测试本例中的 Pod 资源限制，您可以使用 busybox 映像。
### 容器启动命令
当容器在 Kubernetes Pod 中启动时，它会运行该容器的默认启动脚本，例如 Docker 容器规范中指定的脚本。为了用不同的命令或附加参数覆盖该功能，可以提供`command`和`args`键。让我们看看一个配置有`start`命令和一些参数的容器:
带启动命令的 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app-container
    image: mydockername
    command: ["run"]
    args: ["--flag", "T", "--run-type", "static"]
```
如您所见，我们指定了一个命令和一个参数列表作为字符串数组，在空格处用逗号分隔。
### 初始化容器
`init`容器是 Pod 内的特殊容器，在正常 Pod 容器启动前启动、运行和关闭。
`init`容器可以用于许多不同的用例，例如在应用启动之前初始化文件，或者在启动 Pod 之前确保其他应用或服务正在运行。
如果指定了多个`init`容器，它们将按顺序运行，直到所有`init`容器都关闭。出于这个原因，`init`容器必须运行一个完成的脚本，并且有一个端点。如果您的`init`容器脚本或应用继续运行，您的 Pod 中的正常容器将不会启动。
在下面的 Pod 中，`init`容器正在运行一个循环，通过`nslookup`检查我们的`config-service`是否存在。一旦看到`config-service`启动，脚本结束，这将触发我们的`my-app`应用容器启动:
带有初始化容器的 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
  initContainers:
  - name: init-before
    image: busybox
    command: ['sh', '-c', 'until nslookup config-service; do echo config-service not up; sleep 2; done;']
```
重要说明
当一个`init`容器出现故障时，Kubernetes 将自动重启 Pod，类似于通常的 Pod 启动功能。可以通过在 Pod 级别更改`restartPolicy`来更改该功能。
下图显示了 Kubernetes 中典型的 Pod 启动流程:
![Figure 3.2 – Init container flowchart](img/B14790_03_002.jpg)
图 3.2–初始化容器流程图
如果一个 Pod 有多个`initContainer`，它们将被依次调用。这对于使用必须按顺序执行的模块化步骤设置`initContainers`的时候很有价值。下面的 YAML 展示了这一点:
带有多个初始化容器的 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
  initContainers:
  - name: init-step-1
    image: step1-image
    command: ['start-command']
  - name: init-step-2
    image: step2-image
    command: ['start-command']
```
以为例，在这个`Pod` YAML 文件中，`step-1 init`容器需要在`init-step-2`被调用之前成功，并且两者都需要在`my-app`容器被启动之前显示成功。
### 在 Kubernetes 中引入不同类型的探针
为了知道一个容器(因此一个 PODS)何时出现故障，Kubernetes 需要知道如何测试容器是否正常工作。我们通过定义`probes`来做到这一点，其中 Kubernetes 可以以指定的时间间隔运行，以确定容器是否在工作。
Kubernetes 让我们配置了三种类型的探测器——就绪、活跃和启动。
### 就绪探测器
首先，就绪探测器可以用来确定容器是否准备好执行功能，例如通过 HTTP 接受流量。这些探测在一个运行的应用的开始阶段是有帮助的，例如，它可能还在获取配置，还没有准备好接受连接。
让我们看看配置了就绪探测器的 Pod 是什么样子的。接下来是附有就绪探测器的 PodSpec:
准备就绪探测舱
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
    ports:
    - containerPort: 8080
    readinessProbe:
      exec:
        command:
        - cat
        - /tmp/thisfileshouldexist.txt
      initialDelaySeconds: 5
      periodSeconds: 5
```
首先，正如你看到的，探针是按容器定义的，而不是按 Pod 定义的。Kubernetes 将运行每个容器的所有探测器，并使用这些探测器来确定 Pod 的总体运行状况。
### 活性探针