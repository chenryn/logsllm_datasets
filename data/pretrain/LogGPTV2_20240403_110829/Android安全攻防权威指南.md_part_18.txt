程内存的防护机制被错误地移除了。
---
## Page 77
3.6历史上的一些已知攻击61
Jay Freeman（saurik）基于之前由JasonA.Donenfeld（zx2c4）开发的Linux 操作系统利用程
序Mempodipper，编写了对Android系统的mempodroid利用程序。mempodroid利用程序使用了
这一安全漏洞，直接将代码写人run-as程序的代码片段中。而这个程序，是用来以特定应用UID
身份来执行命令的，在官方Android 系统中是以 set-uid root运行的。因为 run-as 在Android上是
静态链接的，所以利用程序需要知道setresuid调用和exit函数的准确地址，然后攻击载荷
就可以被放置到正确的位置上。mempodroid利用程序的源代码可以从https/github.com/saurk/
mempodroid获取到。
3
该安全漏洞的案例分析详见第8章。
3.6.11文件权限和符号链接相关的攻击
许多设备中存在大量与文件权限和符号链接相关的攻击。其中大多数是由OEM厂商的特定
修改引入的，并不存在于Android官方版本中。DanRosenberg发现了许多这类漏洞，并在他的博
客（http:/vulnfactory.org/blog/）中提供了对大量设备的创新性root方法。
Android4.0的最初版本在do_chmod、mkdir 和do_chown 的初始化函数中曾经有一个 bug，
即使它们目标路径的最后一个元素是一个符号链接，它们也可以应用特定的属主和文件权限。某
些Android设备的 initrc脚本中有以下一行代码。
mkdir /data/local/tap 0771 she11 she11
你可能想到，如果/data/local目录对于用户或用户组的shell是可写的，那么你就可以利用这
个漏洞来使得/data目录可写，只需要将/data/local/tmp替换成一个指向/data的符号链接，然后重启
设备。在重启之后，你就可以创建或修改/data/local.prop文件，并将ro.kernel.gemu的属性值
设为1
利用这一安全漏洞的指令如下：
adb she11 1n -s /data/ /data/loca1/tmp
adb shel1*echo'ro.kernel.qemu=1. >/data/local.prop
adb reboot
adb reboot
这个安全漏洞的另外一个流行利用程序变种是将/data/local/tmp链接到系统分区，然后使用
debugfs来写人su二进制程序，并让它成为 set-uidroot程序。举个例子，运行Android4.0.3的华
硕TransformerPrime平板电脑可以被这一利用攻击。
Android4.2版本的init脚本中应用了o_NOFOLLOww语义，以防止这类符号链接攻击。
3.6.12adb恢复过程竞争条件漏洞
Android4.0引l人了通过adbbackup命令进行设备完全备份的能力，这个命令将所有数据
和应用备份到一个backup.ab文件（这是个预先设计好头部结构的TAR压缩文件）。面adb
restore命令是用来恢复数据的。
---
## Page 78
62第3章rootAndroid设备
在恢复过程的初始实现中存在两个安全漏洞（Android4.1.1中已经修复）。第一个安全漏洞
是创建的文件与目录可由其他应用访问。第二个安全漏润是允许从以特殊UID（如system身份）
运行的软件包恢复文件集，而缺少一个特殊的备份代理来处理恢复过程。
为了利用这两个安全漏洞，Andreas Makris（Bin4ry）创建了一个特制的备份文件，该文件
有一个全局可读、可写、可执行的目录，其中包含100个文件，每个文件的内容都是ro.kernel，
qemu=1和ro.secure=0。当这个文件的内容被写到/data/local.prop文件中，它将使得adbd在启
动时以root 权限运行。原始的利用程序可以从http:/forum.xda-developers.com/ showthread.php?t
1886460 卜载
如果在adb恢复命令运行时执行的话，下面这行代码会导致备份管理服务的恢复进程与shell
用户的while循环构成一个竞争条件：
adb she11 *while1 1n -s /data/1ocal.prop\
/data/data/com.android.setting/a/file99; do 1j done*
如果while循环在恢复进程恢复file99文件之前创建了符号链接，那么恢复进程将随着这个
符号链接将只读的系统属性写人/data/localprop文件，这让adbd在下一次重启后以root身份运行。
3.6.13 Exynos4:exynos-abuse
这个安全漏润存在于三星的内核驱动中，影响使用Exynos4处理器的设备。基本上，任何
应用都可以访问/dev/exynosmemm设备文件，这允许以读写权限映射所有的物理内存。
该漏洞是alephzain发现的，他编写了exynos-abuse利用程序来进行演示，并公布在
XDA-developers 论坛上。原帖地址为http:/forum.xda-developers.com/showthread.php?t2048511。
首先，这个利用程序映射内核内存，然后对处理/proc/kal1syms函数的格式化字符串进
行修改，以绕过kptr_restrict 内存缓解机制。然后它解析/proc/kallsyms，找到sys_setresuid
系统调用处理程序的地址，找到之后，它会对函数进行修补，以移除权限检查，并在用户空间执
行setresuid系统调用以成为root最后，它撤销对内核内存进行的修改，并执行一个rootshell。
后来，alephzain创建了一个名为Framaroot的一键root应用。Framaroot嵌入了原始漏洞的3
个利用变种，每个利用都允许没有特权的用户映射任意物理内存。这个一键root应用对基于
Exynos4芯片组和基于TIOMAP3芯片组的设备都适用。最值得一提的是，alephzain发现，三星
没有正确地修补这个Exynos4漏洞，于是他在Framaroot中嵌入了一个新的利用程序，利用在三
星修补代码中存在的整数溢出漏洞。这允许绕过额外验证并再次覆盖内核内存。这些新的漏洞利
用被alephzain悄情地包含进Farmaroot 中，后来被Dan Roscnberg发现并公布于htp:/blog
azimuthsecurity.com/2013/02/re-visiting-exynos-memory-mapping-bug.html,
3.6.14Diag:lit/diaggetroot
这个安全漏洞是由giantpune发现的，被编号为CVE-2012-4220：
---
## Page 79
3.7小结63
Android2.3至4.2版本中高通创新中心（QuIC）的诊断（即DIAG）内核模式驱动
的 diagchar_core.c，允许攻击者通过一个在本地diagchar_ioct1调用中使用特殊构参
数的应用，执行任意代码或者造成拒绝服务（不正确的指针引用）。
it利用程序使用这一安全漏洞，使内核执行用户空间内存中的原始代码。通过从
/sys/class/leds/lcd-backlight/reg文件读取，可以使内核处理用户空间内存中的数据结构。在这一处
理流程中，它调用了其中一个数据结构中的函数指针，从面导致了权限提升。
3
针对HTCJButterly设备的diaggetroot利用程序也使用了这个安全漏洞，然而，在这个设备
上，存在漏洞字符的设备只允许radio用户或用户组访问。为了打破这一限制，研究者使用了一
个ContentProvider来获取设备的打开文件描述符。利用这种方法获取root权限只在组合使用这
两种技术时才是可行的。可以从https://docs.google.com/ile/d/0B8LDObFOpzZqQzducmxjRExXNn
M/edir?pli-1下载到这个利用程序。
3.7小结
对Android设备进行root，可以让你获得Android设备的完全控制。然而，如果你不采取任
何预防措施来修补获得root访问权限的开放通道，那么系统安全可以轻易地被攻击者损害。
本章介绍了理解root过程的关键概念，包括通过合法的引导加载程序解锁的方法，如在那些
引导加载程序未加锁设备上的方法，以及允许在一个引导加载程序已加锁设备上获取和持久化
root访间的其他方法。最后，你看到了在过去几年里用来root许多Android设备的知名root提权
利用程序。
下一章将深人探讨Android应用的安全性，将介绍影响Android应用的普通安全问题，并演
示如何使用免费、公开的工具来进行应用安全评估。
---
## Page 80
第4章
应用安全性评估
应用安全甚至在Android出现之前就已经是一个热点领域。在Web应用火爆的时代，开发者
争先恐后地快速开发应用面忽视基本的安全实践，或者使用没有足够的安全控制的框架。在移动
应用时代，历史仍然在重演。本章将首先讨论Android应用中的一些普遍性安全问题，然后将演
示使用通用工具挖掘和利用应用安全漏洞。
4.1普遍性安全问题
与传统应用安全领域类似，移动应用中也有几类安全间题频繁出现在安全评估和漏洞测试报
告中。这些安全问题从敏感信息泄露，到最严重的代码或指令执行漏润。Android应用并不对这
些安全漏洞免疫，只是到达这些漏洞的攻击面与传统应用有些差别。
本节将涵盖在Android应用安全测试和公开研究中经常发现的几类安全问题，但肯定不是个
完整列表。随着应用安全开发实践的日益普及，以及Android自身应用编程接口（API）的改进，
很可能会出现新的安全漏洞，甚至是新的安全漏洞类型。
4.1.1应用权限问题
在现有Android权限模型的粒度下，开发者有可能会申请比应用实际所需更多的权限，导
致这一结果的部分原因可能是权限执行与文档中的不一致。尽管开发者参考文档中描述了给定
类与方法的绝大多数权限要求，但是它们并不是100%完整或100%准确的。研究团队已经尝试
用各种办法识别其中的不一致性。例如，2012年，研究人员AndrewReiter和ZachLanier尝试
映射出Android开源项目（AOSP）中可用AndroidAPI的权限要求，结果却得出了关于不一致
性的一些有趣结论。
他们发现，WiFiManager类的一些方法的文档与实现存在着不一致性。例如，开发者文
档没有对startScan方法提到权限要求。图4-1显示了Android开发者文档中这一方法的屏
幕截图。
---
## Page 81
4.1普遍性安全问题65
public boolean startScan0
SnteAPiLevel)
means of an asynchronous event sent on completion of the scan.
Retuns
true if the operation succeeded,i.e, the scan was initiated
图 4-1startScan 函数的文档
面这与该方法（在Android4.2版本中）的实际源代码存在差异，源代码显示会调用
enforceCallingOrSelfPermission 函数,而该函数会通过enforceChangePermission 函
数，检查调用者是否具有ACCESS_WIFI_STATE权限。
4
public void startScan(boolean forcehctive)(
enforceChangePermission() :
nHifiStateMachine.startScan (forceActive)1
noteScanStart (1 :
private void enforceChangePermission()(
mContext,enforceCal1ingOrSelfPermission (android.Manifest .
permission. CHANGB_WIPI_STATE,
HifiService*);
还有个例子是TelephonyManager类的 getNeighboringCel1Info 方法，文档中指出
需要ACCESS_COARSB_UPDATES权限，图4-2中显示了Android开发者文档中这一方法的屏幕截
图。
public ListxNeighboringCellnfogetNeighboringCellnfe O
Returns the neighboring cellinformation of the device.
Returns
List of NeighboringCellnfo or nulif info unavailable.
图4-2get3eighboringCe11Info 函数的文档
然而，仔细查看实现了Telephony 接口的PhoneInterfaceManager 类源码（Android4.2
版本中），你会看到getNeighboringCel1Info方法实际上检查了ACCESS_FINE_LOCATION
或ACCESS_COARSE_LOCATION权限是否存在，面文档中指出的不是这两个权限，反而是一个根
本不存在的权限。
public List getNeighboringCellInfo()(
try(
nApp.enforceCallingOrSelfPermission (
android ,Mani fest .permiesion,ACCESs_PINE_LOCATION,
)catch (SecurityException e)(
nu11) ;
---
## Page 82
66第4章云计算的安全风险
//如果我们有ACCESS_PINE_LOCATION权限，请息鸣时ACCBSS_COARSE_LOCATION的检查
//错误会从ACCESS_COARSE_LOCATION抛出安全异零，国为这是较弱的先决条件
mApp,enforceCa11ingOrSelfPerm1ssion (
android.Manifest -permission.ACCESS_COARSE_LOCATION, nul1) :
这种类型的疏忽，尽管可能看起来无伤大雅，但经常会给开发者带来不佳的实践，也就是权
限申请不足，或者会造成更坏后果的权限中请过度。在权限申请不足的情况下，经常会导致可靠
性或功能性的问题，如果对安全异常未进行处理，就会导致应用前溃。而对于权限申请过度，更
多的是安全性问题，想象一个充满漏洞并过度申请权限的应用被一个恶意应用所攻击，经常导致
权限提升的情形。
关于权限映射研究的更多信息，请参考http://www.slideshare.net/quineslideshare/mapping-
and-evolution-of-android-permissions:
在分析Android应用是否存在过度申请权限的情况时，比较应用申请的权限与应用的功能意
图是非常关键的。一些特定的权限，如CAMERA和SEND_SMS等，对于第三方应用往往是不必要
的。想要得到这些权限对应的功能，完全可以通过调用照相机或短信息应用来实现，让它们来处
理任务，这有助于增加用户交互的安全性。4.2节将展示在应用的各种组件中，这些权限的实际
应用位置。
4.1.2敏感数据的不安全传输
由于受到经常性的关注与审查，确保传输安全性的通用方法（如使用SSL、TLS协议等）基
本得到了广泛的认知。然而遗撼的是，这些方法在移动应用中并没有得到全面的应用，这或许是
由于开发者对于如何正确实现SSL/TLS还缺少了解，或者只是开发者持有不正确的观念：“如果
通过运营商的网络进行通信，那就是安全的。”移动应用开发者有时并没有对传输中的敏感数据
进行安全保护。
这类安全问题通常以如下的一种或多种方式出现：
口弱加密或没有加密；