        /// 需要自定义的指令ID
        unsigned int id;
        /// 自定义的助记符
        const char *mnemonic;
    } cs_opt_mnem;
#### cs_opt_type
反编译的运行时选项
    enum cs_opt_type {
        CS_OPT_INVALID = 0, /// 用法：API cs_option(csh handle, cs_opt_type type, size_t value);中第二个参数
#### cs_opt_value
运行时选项值(与cs_opt_type关联)
    enum cs_opt_value {
        CS_OPT_OFF = 0,  /// 用法：API cs_option(csh handle, cs_opt_type type, size_t value);中第三个参数
#### cs_op_type
通用指令操作数类型，在所有架构中保持一致
    enum cs_op_type {
        CS_OP_INVALID = 0,  /// 目前开放的API中未调用
#### cs_ac_type
通用指令操作数访问类型，在所有架构中保持一致  
可以组合访问类型，例如:CS_AC_READ | CS_AC_WRITE
    enum cs_ac_type {
        CS_AC_INVALID = 0,        /// 目前开放的API中未调用
#### cs_group_type
公共指令组，在所有架构中保持一致
    cs_group_type {
        CS_GRP_INVALID = 0,  /// 目前开放的API中未调用
#### cs_opt_skipdata
用户自定义设置SKIPDATA选项
    struct cs_opt_skipdata {
        /// Capstone认为要跳过的数据是特殊的“指令”
        /// 用户可以在这里指定该指令的“助记符”字符串
        /// 默认情况下(@mnemonic为NULL)， Capstone使用“.byte”
        const char *mnemonic;
        /// 用户定义的回调函数，当Capstone命中数据时调用
        /// 如果这个回调返回的值是正数(>0)，Capstone将跳过这个字节数并继续。如果回调返回0,Capstone将停止反汇编并立即从cs_disasm()返回
        /// 注意:如果这个回调指针为空，Capstone会根据架构跳过一些字节，如下所示:
        /// Arm:     2 bytes (Thumb mode) or 4 bytes.
        /// Arm64:   4 bytes.
        /// Mips:    4 bytes.
        /// M680x:   1 byte.
        /// PowerPC: 4 bytes.
        /// Sparc:   4 bytes.
        /// SystemZ: 2 bytes.
        /// X86:     1 bytes.
        /// XCore:   2 bytes.
        /// EVM:     1 bytes.
        cs_skipdata_cb_t callback;  // 默认值为 NULL
        /// 用户自定义数据将被传递给@callback函数指针
        void *user_data;
    } cs_opt_skipdata;
> 目前开放的API中未调用
>
> #### cs_detail
>
> 注意:只有当CS_OPT_DETAIL = CS_OPT_ON时，cs_detail中的所有信息才可用
在arch/ARCH/ARCHDisassembler.c的ARCH_getInstruction中初始化为memset(., 0,
offsetof(cs_detail, ARCH)+sizeof(cs_ARCH))
如果cs_detail发生了变化，特别是在union之后添加了字段，那么相应地更新arch/ arch/ archdisassembly .c
    struct cs_detail {
        uint16_t regs_read[12]; ///< 这个参数读取隐式寄存器列表
        uint8_t regs_read_count; ///< 这个参数读取隐式寄存器计数
        uint16_t regs_write[20]; ///< 这个参数修改隐式寄存器列表
        uint8_t regs_write_count; ///< 这个参数修改隐式寄存器计数
        uint8_t groups[8]; ///< 此指令所属的指令组的列表
        uint8_t groups_count; ///< 此指令所属的组的数
        /// 特定于体系结构的信息
        union {
            cs_x86 x86;     ///< X86 架构, 包括 16-bit, 32-bit & 64-bit 模式
            cs_arm64 arm64; ///< ARM64 架构 (aka AArch64)
            cs_arm arm;     ///< ARM 架构 (包括 Thumb/Thumb2)
            cs_m68k m68k;   ///< M68K 架构
            cs_mips mips;   ///< MIPS 架构
            cs_ppc ppc;     ///< PowerPC 架构
            cs_sparc sparc; ///< Sparc 架构
            cs_sysz sysz;   ///< SystemZ 架构
            cs_xcore xcore; ///< XCore 架构
            cs_tms320c64x tms320c64x;  ///< TMS320C64x 架构
            cs_m680x m680x; ///< M680X 架构
            cs_evm evm;     ///< Ethereum 架构
        };
    } cs_detail;
#### cs_insn
指令的详细信息
    struct cs_insn {
        /// 指令ID(基本上是一个用于指令助记符的数字ID)
        /// 应在相应架构的头文件中查找'[ARCH]_insn' enum中的指令id，如ARM.h中的'arm_insn'代表ARM, X86.h中的'x86_insn'代表X86等…
        /// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息
        /// 注意:在Skipdata模式下，这个id字段的“data”指令为0
        unsigned int id;
        /// 指令地址 (EIP)
        /// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息
        uint64_t address;
        /// 指令长度
        /// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息
        uint16_t size;
        /// 此指令的机器码，其字节数由上面的@size表示
        /// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息
        uint8_t bytes[16];
        /// 指令的Ascii文本助记符
        /// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息
        char mnemonic[CS_MNEMONIC_SIZE];
        /// 指令操作数的Ascii文本
        /// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息
        char op_str[160];
        /// cs_detail指针
        /// 注意:只有同时满足以下两个要求时，detail指针才有效:
        /// (1) CS_OP_DETAIL = CS_OPT_ON
        /// (2) 引擎未处于Skipdata模式(CS_OP_SKIPDATA选项设置为CS_OPT_ON)
        ///
        /// 注意2:当处于Skipdata模式或detail模式关闭时，即使这个指针不是NULL，它的内容仍然是不相关的。
        cs_detail *detail;
    } cs_insn;
#### cs_err
Capstone API遇到的各类型的错误时cs_errno()的返回值
    typedef enum cs_err {
        CS_ERR_OK = 0,   ///< 无错误
        CS_ERR_MEM,      ///< 内存不足: cs_open(), cs_disasm(), cs_disasm_iter()
        CS_ERR_ARCH,     ///< 不支持的架构: cs_open()
        CS_ERR_HANDLE,   ///<句柄不可用: cs_op_count(), cs_op_index()
        CS_ERR_CSH,      ///< csh参数不可用: cs_close(), cs_errno(), cs_option()
        CS_ERR_MODE,     ///< 无效的或不支持的模式: cs_open()
        CS_ERR_OPTION,   ///< 无效的或不支持的选项: cs_option()
        CS_ERR_DETAIL,   ///< 信息不可用，因为detail选项是关闭的
        CS_ERR_MEMSETUP, ///< 动态内存管理未初始化(见 CS_OPT_MEM)
        CS_ERR_VERSION,  ///< 不支持版本 (bindings)
        CS_ERR_DIET,     ///< 在“diet”引擎中访问不相关的数据
        CS_ERR_SKIPDATA, ///< 在SKIPDATA模式下访问与“数据”指令无关的数据
        CS_ERR_X86_ATT,  ///< X86 AT&T 语法不支持(在编译时退出)
        CS_ERR_X86_INTEL, ///< X86 Intel 语法不支持(在编译时退出)
        CS_ERR_X86_MASM, ///< X86 Intel 语法不支持(在编译时退出)
    } cs_err;
本文下一部分将分析Capstone API，敬请期待