### Client and Proxy Interaction with Fake Cells

The client initiates communication by sending fake cells before transmitting real cells. The proxy, upon detecting the client's fake cells, discards them and reciprocates by sending its own fake cells before any real cells. During a fake burst, both the client and the proxy use special "fake burst end" cells to signal the termination of each fake burst.

A significant challenge in our implementation was ensuring that the Tor client could pause cell delivery during fake bursts. If not, the fake burst would differ from real bursts, compromising the deception. To address this, we introduced a queue for each Tor circuit. Cells generated between fake bursts are queued and sent as the next burst after the fake burst ends (indicated by the fake burst end cell). Our implementation is agnostic to Tor-specific mechanics and can be adapted to other proxy technologies.

Our implementation assumes that the client can either collect burst sequences or receive them from an external source. (For security analysis, we assume the attacker has access to these sequences.) An alternative construction of Walkie-Talkie, where the client has no information about real burst sequences, is detailed in Appendix A.

### Security Analysis

We analyze the security of Walkie-Talkie against an attacker attempting to determine if a client has visited a sensitive page \( s \). The client visits \( s \) with probability \( p \) and uses \( s \) as a decoy page with probability \( p' \). The attacker’s precision cannot exceed \( \frac{p}{p + (1 - p)p'} \), as distinguishing between real and decoy visits is impossible.

To achieve maximum precision, the attacker must correctly identify the two subsequences that make up any given cell sequence in Walkie-Talkie. Our evaluation (Section 5.2) shows that no real attack can do this effectively. Even a theoretically perfect classifier fails; Section 5.4.2 demonstrates that there are often hundreds, if not thousands, of possible realistic subsequences for any given cell sequence in Walkie-Talkie.

We extend our analysis to include scenarios where the client may not have chosen \( s \) as a decoy page. Consider two types of clients: those who visit \( s \) with probability \( p \) from distribution \( X \), and those who use \( s \) as a decoy with probability \( p' \) from distribution \( X' \). Distinguishing between these types is impractical for the attacker due to several factors: the attacker cannot directly measure \( X \), which changes unpredictably over time, many page visits include \( s \) as a subsequence, and the estimation of \( X' \) is significantly affected by observation errors, especially if decoy pages are rotated regularly. Therefore, the attacker cannot determine if a client has ever truly visited \( s \) or merely used it as a decoy.

### Evaluation

#### Setup and Data Collection

We evaluated Walkie-Talkie using data collected from Tor Browser 6.0 (based on Firefox 38.7.1) with Tor 0.2.8.1. To collect burst sequences, we modified the Tor Browser to enable half-duplex communication, as described in Section 4.1.2.

Data was collected from Alexa’s top pages, using long-standing pages for reproducibility and comparability. We selected 100 top pages as the non-sensitive set (after removing duplicates due to different localizations or URLs of the same page) and collected 100 instances of each. The next 10,000 pages were used as the sensitive set. In the closed-world scenario, only the non-sensitive set was used, with the top 100 pages considered sensitive. Instances with fewer than 50 cells (25 kB) were discarded to exclude failed page loads.

We added the capability to generate fake cells on Tor clients and relays but did not use the latter for burst molding in this section. Instead, we simulated burst molding after collecting data in half-duplex mode to present results for various parameter choices without re-collecting data. Our simulation does not account for network instability events like packet loss and proxy dropping, as these are rare and unlikely to be linked to the server.

#### Walkie-Talkie versus Attacks

We implemented nine known website fingerprinting (WF) attacks and tested each against Walkie-Talkie. Each attack was state-of-the-art at the time of its publication. For consistent comparison, all attacks were tested in the closed-world scenario. We used 100 instances of each of the 100 closed-world pages for training and testing with 10-fold cross-validation. Since the closed-world scenario is easier to attack than the open-world scenario, our results provide a conservative estimate of Walkie-Talkie's effectiveness.

Table 1 shows the results under two columns: the original accuracy on a Tor dataset without our defense (Undefended) and the new accuracy with our defense (Defended).

Jaccard and MNBayes are highly inaccurate even in the Undefended case because they rely on unique packet lengths, but all our cells have the same length (see Section 3.1). SVM by Panchenko et al. [23] appears to suffer least from Walkie-Talkie, performing slightly better than kNN [31]. Previous authors [5,8] noted the resilience of this attack against random noise, possibly due to its use of a “kernel trick” transforming distances between cell sequences, allowing greater flexibility in ignoring dummy cells.

In the more realistic open-world scenario, Walkie-Talkie excels. We focused on three successful WF attacks in the open-world scenario: SVM, kNN, and CUMUL, presenting their True Positive Rate (TPR) and False Positive Rate (FPR) in Table 2. The FPR for each attack increases significantly with the application of Walkie-Talkie. kNN adopts an aggressive strategy, achieving a high TPR but suffering a high FPR, whereas CUMUL and SVM both suffer a low TPR with a low FPR.

The base rate fallacy indicates that since the TPR and FPR are similar for all three attacks, they are highly imprecise if the base rate of sensitive page access is low. For example, if the rate of sensitive page access is 5%, kNN would have a precision of only 5.5%, making most of its sensitive classifications incorrect. Despite a decent recall rate, kNN is ineffective against Walkie-Talkie as the attacker cannot act on its sensitive classifications.

To delve deeper into Walkie-Talkie's success against known WF attacks, we examined how it affects individual features. Using the feature categories defined by kNN [31], we measured the classification accuracy of each category before and after applying Walkie-Talkie. Table 3 shows the six feature categories and their results. Each useful feature category in the Undefended case is covered by Walkie-Talkie. Although Walkie-Talkie does not explicitly target intercell times, the addition of fake cells disrupts this feature. Comparing Table 3 and the kNN entry in Table 1, the accuracy of kNN under Walkie-Talkie would be almost unchanged if only the sizes of the cell bursts were used, reflecting that Walkie-Talkie reduces the available information to just the burst sequences.

#### Walkie-Talkie versus Defenses

We compared Walkie-Talkie with known website fingerprinting defenses in terms of bandwidth overhead (BWOH), time overhead (TOH), and the accuracy of the kNN attack by Wang et al. [31]. Table 4 summarizes these comparisons. Walkie-Talkie has a markedly smaller BWOH and TOH than many previous defenses while still defeating kNN. Across our dataset, the BWOH of Walkie-Talkie is 31% ± 16%, and the TOH is 34% ± 5%. Different cell sequences vary significantly in BWOH but not in TOH. BuFLO, Supersequence, and Tamaraw further decrease kNN accuracy (0.05 to 0.08) compared to Walkie-Talkie (0.28), but at a higher overhead cost. kNN's higher accuracy against Walkie-Talkie is not practically meaningful due to the base rate fallacy. Under Walkie-Talkie, any cell sequence always looks as if it could have come from at least two different web pages, limiting WF attack accuracy to below 0.5.

Tamaraw, Supersequence, and Walkie-Talkie are tunable, allowing each defense to adjust its overhead and effectiveness. We focus on Tamaraw, which has a lower overhead than Supersequence. We investigated the trade-off between TOH and BWOH by fixing the effectiveness of Tamaraw and Walkie-Talkie against attacks. For Tamaraw, the trade-off is achieved by varying fixed intercell times. For Walkie-Talkie, the trade-off is achieved by selecting cell sequences in burst molding. We can prefer cell sequences that minimize BWOH at the cost of TOH.