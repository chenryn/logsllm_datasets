### 7.2.4 Evaluation of Wireshark

An attacker who gains control over memory can write to any file that the current user has access to, effectively achieving the same level of power as arbitrary code execution. For example, an attacker could overwrite the authorized keys file. This is possible because Wireshark can save trace files, and an attacker with memory control can easily overwrite the filename being written with one of their choosing.

If the attacker waits for the user to click "Save" and then overwrites the file argument, this would be classified as a data-only attack under our definitions. It is also possible to use control-flow bending to invoke the file save function directly by returning into the GTK library and overwriting a code pointer with the file save method, which is within the Control Flow Graph (CFG).

### 7.2.5 Evaluation of xpdf

Similar to Wireshark, an attacker can use xpdf to write to arbitrary files using `memcpy()` as a dispatcher gadget when there is no shadow stack. When a shadow stack is present, the attacker is limited to a printf-oriented programming attack and can only write files with specific extensions, which does not immediately provide the ability to run arbitrary code.

### 7.2.6 Evaluation of MySQL

When no shadow stack is present, attacks are relatively straightforward. A dispatcher gadget allows the attacker to return into functions like `do_system()`, `do_exec()`, or `do_perl()` from within the MySQL client. (For this attack, we assume a vulnerable client connects to a malicious server controlled by the attacker.) When a shadow stack is present, the attacker's capabilities are more limited, but they can still use printf-oriented programming to achieve arbitrary computation on memory. However, obtaining arbitrary code execution with a shadow stack in place is not possible.

### 7.3 Combining Attacks

As these six case studies indicate, control-flow bending is a realistic and potent attack technique. In the five cases where CFI does not immediately prevent the exploit (as it does for Apache), an attacker can use the vulnerability to achieve arbitrary writes in memory. From there, traditional data-only attacks (e.g., modifying configuration data structures) can be mounted. We have shown that using control-flow bending techniques, more powerful attacks are possible. We believe this attack technique is general and can be applied to other applications and vulnerabilities.

### 8 Related Work

#### Control-Flow Integrity
Control-Flow Integrity (CFI) was originally proposed by Abadi et al. [1, 15] a decade ago. Classical CFI instruments indirect branch target locations with equivalence-class numbers (encoded as labels in side-effect-free instructions) that are checked at branch locations before taking the branch. Many other CFI schemes have been proposed since then.

The most coarse-grained policies (e.g., Native Client [40] or PittSFIeld [20]) align valid targets to the beginning of chunks. At branches, these CFI schemes ensure that control flow is not transferred to unaligned addresses. Fine-grained approaches use static analysis of source code to construct more accurate CFGs (e.g., WIT [2] and HyperSafe [39]). Recent work by Niu et al. [27] added support for separate compilation and dynamic loading. Binary-only CFI implementations are generally more coarse-grained: MoCFI [13] and BinCFI [44] use static binary rewriting to instrument indirect branches with additional CFI checks.

#### CFI Evaluation Metrics
Others have attempted to create methods to evaluate practical CFI implementations. The Average Indirect Target Reduction (AIR) [44] metric was proposed to measure how much, on average, the set of indirect valid targets is reduced for a program under CFI. We argue that this metric has limited utility, as even high AIR values of 99% can be insecure, allowing an attacker to perform arbitrary computation and issue arbitrary system calls. The gadget reduction metric is another way to evaluate CFI effectiveness [27], by measuring how much the set of reachable gadgets is reduced overall. Gadget finder tools like ROPgadget [34] or ropper [33] can be used to estimate this metric.

#### CFI Security Evaluations
There has recently been significant effort to analyze the security of specific CFI schemes, both static and dynamic. Göktaş et al. [16] analyzed the security of static coarse-grained CFI schemes and found that the specific policy of requiring returns to call-preceded locations is insufficient. Following this work, prevent-the-exploit-style coarse-grained CFI schemes with dynamic components that rely on runtime heuristics were defeated [5, 14]. The attacks relied on the fact that the attacks could hide themselves from the dynamic heuristics, reducing down to attacks on coarse-grained CFI. Our evaluation of minimal programs builds on these results by showing that coarse-grained CFI schemes with an AIR value of 99% are still vulnerable to attacks on trivially small programs.

#### Non-Control Data Attacks
Attacks that target only sensitive data structures were categorized as pure data attacks by Pincus and Baker [32]. Typically, these attacks would overwrite application-specific sensitive variables (such as the "is authenticated" boolean). This was expanded by Chen et al. [8], who demonstrated that non-control data attacks are practical on real programs. Our work generalizes these attacks to allow modifications of control-flow data, but only in a way that follows the CFI policy.

#### Data-Flow Integrity
Data-Flow Integrity (DFI) provides guarantees for the integrity of the data within a program [6]. Although the original scheme used static analysis to compute an approximate data-flow graph (a coarse-grained approach), more refined DFI may be able to protect against our attacks. We believe security evaluation of prevent-the-corruption style defenses such as DFI is an important future direction of research.

#### Type- and Memory-Safety
Other defenses have tried to bring type-safety and memory-safety to unsafe languages like C and C++. SoftBound [22] is a compile-time defense that enforces spatial safety in C, but at a 67% performance overhead. CETS [23] extends this work with a compile-time defense that enforces temporal safety in C by protecting against memory management errors. CCured [24] adds type-safe guarantees to C by attempting to statically determine when errors cannot occur and dynamically adding checks when nothing can be proven statically. Cyclone [17] takes a more radical approach and re-designs C to be type- and memory-safe. Code-Pointer Integrity (CPI) [18] reduces the overhead of SoftBound by only protecting code pointers. While CPI protects the integrity of all indirect control-flow transfers, limited control-flow bending attacks using conditional jumps may be possible by using non-control-data attacks. Evaluating control-flow bending attacks on CPI would be an interesting direction for future work.

### 9 Conclusion

Control-Flow Integrity (CFI) has historically been considered a strong defense against control-flow hijacking and Return-Oriented Programming (ROP) attacks, if implemented to its fullest extent. Our results indicate that this is not entirely the case, and that control-flow bending allows attackers to perform meaningful attacks even against systems protected by fully-precise static CFI. When no shadow stack is in place, dispatcher functions enable powerful attacks. Consequently, CFI without return instruction integrity is not secure.

However, CFI with a shadow stack does still provide value as a defense, if implemented correctly. It can significantly raise the bar for writing exploits by forcing attackers to tailor their attacks to a particular application; it limits an attacker to issue only system calls available to the application; and it can make specific vulnerabilities unexploitable under some circumstances.

Our work has several implications for the design and deployment of CFI schemes. First, shadow stacks appear to be essential for the security of CFI. We also call for adversarial analysis of new CFI schemes before they are deployed, as our work indicates that many published CFI schemes have significant security weaknesses. Finally, to make control-flow bending attacks harder, deployed systems that use CFI should consider combining CFI with other defenses, such as data integrity protection to ensure that data passed to powerful functions cannot be corrupted in the presence of a memory safety violation.

More broadly, our work raises the question: just how much security can prevent-the-exploit defenses (which allow the vulnerability to be triggered and then try to prevent exploitation) provide? In the case of CFI, we argue that the answer is that it still provides some, but not complete, security. Evaluating other prevent-the-exploit schemes is an important area of future research. We hope that the analyses in this paper help establish a basis for better CFI security evaluations and defenses.

### 10 Acknowledgments

We would like to thank Jay Patel and Michael Theodorides for assisting us with three of the case studies. We would also like to thank Scott A. Carr, Per Larsen, and the anonymous reviewers for countless discussions, feedback, and suggestions on improving the paper. This work was supported by NSF grant CNS-1513783, by the AFOSR under MURI award FA9550-12-1-0040, and by Intel through the ISTC for Secure Computing.

### References

[1] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. Control-Flow Integrity. In CCS’05 (2005).
[2] AKRITIDIS, P., CADAR, C., RAICIU, C., COSTA, M., AND CASTRO, M. Preventing Memory Error Exploits with WIT. In IEEE S&P’08 (2008).
[3] BLETSCH, T., JIANG, X., AND FREEH, V. Mitigating Code-Reuse Attacks with Control-Flow Locking. In ACSAC’11 (2011).
[4] BLETSCH, T., JIANG, X., FREEH, V. W., AND LIANG, Z. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In ASIACCS’11 (2011).
[5] CARLINI, N., AND WAGNER, D. ROP Is Still Dangerous: Breaking Modern Defenses. In USENIX Security’14 (2014).
[6] CASTRO, M., COSTA, M., AND HARRIS, T. Securing Software by Enforcing Data-Flow Integrity. In OSDI ’06 (2006).
[7] CHECKOWAY, S., DAVI, L., DMITRIENKO, A., SADEGHI, A.-R., SHACHAM, H., AND WINANDY, M. Return-Oriented Programming Without Returns. In CCS’10 (2010), pp. 559–572.
[8] CHEN, S., XU, J., SEZER, E. C., GAURIAR, P., AND IYER, R. K. Non-Control-Data Attacks Are Realistic Threats. In USENIX Security’05 (2005).
[9] CHENG, Y., ZHOU, Z., YU, M., DING, X., AND DENG, R. H. ROPecker: A Generic and Practical Approach for Defending Against ROP Attacks. In NDSS’14 (2014).
[10] COWAN, C., PU, C., MAIER, D., HINTONY, H., WALPOLE, J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND ZHANG, Q. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In USENIX Security’98 (1998).
[11] COX, M. CVE-2006-3747: Apache Web Server Off-By-One Buffer Overflow Vulnerability. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3747, 2006.
[12] CRISWELL, J., DAUTENHAHN, N., AND ADVE, V. KCoFI: Complete Control-Flow Integrity for Commodity Operating System Kernels. In IEEE S&P’14 (2014).
[13] DAVI, L., DMITRIENKO, R., EGELE, M., FISCHER, T., HOLZ, T., HUND, R., NUERNBERGER, S., AND SADEGHI, A. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In NDSS’12 (2012).
[14] DAVI, L., SADEGHI, A.-R., LEHMANN, D., AND MONROSE, F. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In USENIX Security’14 (2014).
[15] ERLINGSSON, ´U., ABADI, M., VRABLE, M., BUDIU, M., AND NECULA, G. C. XFI: Software Guards for System Address Spaces. In OSDI’06 (2006).
[16] GÖKTAS, E., ATHANASOPOULOS, E., BOS, H., AND PORTOKALIDIS, G. Out of Control: Overcoming Control-Flow Integrity. In IEEE S&P’14 (2014).
[18] KUZNETSOV, V., PAYER, M., SZEKERES, L., CANDEA, G., SEKAR, R., AND SONG, D. Code-Pointer Integrity. In OSDI’14 (2014).
[19] MACMANUS, G. CVE-2013-2028: Nginx HTTP Server Chunked Encoding Buffer Overflow. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2028, 2013.
[20] MCCAMANT, S., AND MORRISETT, G. Evaluating SFI for a CISC Architecture. In USENIX Security’06 (2006).
[21] MEHTA, N., RIKU, ANTTI, AND MATTI. The Heartbleed Bug. http://heartbleed.com/, 2014.
[22] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND ZDANCEWIC, S. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In PLDI’09 (2009).
[23] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND ZDANCEWIC, S. CETS: Compiler Enforced Temporal Safety for C. In ISMM’10 (2010).
[24] NECULA, G., CONDIT, J., HARREN, M., MCPEAK, S., AND WEIMER, W. CCured: Type-Safe Retrofitting of Legacy Software. ACM Transactions on Programming Languages and Systems (TOPLAS) 27, 3 (2005), 477–526.
[25] NERGAL. The Advanced Return-Into-Lib(c) Exploits. Phrack 11, 58 (Nov. 2007), http://phrack.com/issues.html?issue=67&id=8.
[26] NISSL, R. CVE-2009-1886: Format String Vulnerability in smbclient.