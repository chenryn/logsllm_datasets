2013 Trend Micro 
25th Anniversary
--Fuzzing with context enlightenment and exploit 
OSX IOKit vulnerabilities for fun and profit
(P)FACE into the Apple core 
and exploit to root
2013 Trend Micro 
25th Anniversary
Agenda
• Who we are
• Passive fuzzing framework
• Context enlightenment
• Exploit to root
2013 Trend Micro 
25th Anniversary
Who are we
• Jack Tang:
• 10 years of anti-malware solution development
• Familiar with Windows/Mac kernel technology, browser and document 
exploit.
• Current focusing on research about Mac vulnerability and exploit  
• Moony Li:
• 7 years of security production development
• RD Leader of  Sandcastle core engine of DD(Deep Discovery)  
production for Gateway 0day exploit detection.
• Current focusing on research about Mac/Windows kernel vulnerability 
and exploit
2013 Trend Micro 
25th Anniversary
And so what?
• Here below is the CVE and ZDI list until now(NOT including 
submitted but pending):
• CVE-2015-3787, CVE-2015-5867, CVE-2015-7021,CVE-2015-7020, 
CVE-2016-1716,ZDI-CAN-3536,ZDI-CAN-3558, ZDI-CAN-3598,ZDI-
CAN-3596,ZDI-CAN-3603,CVE-2015-7067, CVE-2015-7076,CVE-
2015-7106,CVE-2015-7109,CVE-2016-1718,CVE-2016-1747,CVE-
2016-1749,CVE-2016-1753,  ZDI-CAN-3693, ZDI-CAN-3694, CVE-
2016-1795, CVE-2016-1808, CVE-2016-1810, CVE-2016-1817, 
CVE-2016-1820, CVE-2016-1798,  CVE-2016-1799, CVE-2016-1812, 
CVE-2016-1814, CVE-2016-1818, CVE-2016-1816
2013 Trend Micro 
25th Anniversary
Phase x: Fuzzing framework
2013 Trend Micro 
25th Anniversary
Agenda
• Passive fuzzing framework
– Previous work
– Approach & consideration
– Implementation
– Best Practice
2013 Trend Micro 
25th Anniversary
Previous work 1/2
• Traditional fuzzing by IOKit interface
Usually open the IOKit service name which they want to test, and pour fuzzing 
data into by the IOKit usermode API (e.g. IOConnectCallMethod)
–Call sequence dependency
• AppleCamIn (OpenDevice, PowerOnCamera…)
–Input data dependency
• AppleHDAEngineInput(input as user mode buffer pointer)
–Timing dependency
• IOHDIXHDDriveOutKernel( mount dmg)
2013 Trend Micro 
25th Anniversary
Previous work 2/2
• Code review of target kernel extension
This costs much effort to reverse engineering binary 
code and in the face of so many IOKit services and 
userclient.
-Un-scalable
-Cost effort RE (upgrade)
2013 Trend Micro 
25th Anniversary
Approach & Re-thinking 
http://www.chinapoesy.com/gongxiangaebf830f-
e011-4375-9312-af80aa2f184a.html
2013 Trend Micro 
25th Anniversary
Approach & Re-thinking 
• http://s1.sinaimg.cn/large/48f6d2f7gd04bcc333b70&690
2013 Trend Micro 
25th Anniversary
Passive & Context
• “Passive” 
– means we don’t generate data to pour to interface from user 
mode. Whereas, we only trace at some key point in the kernel 
processing IOKit input data from user mode and tamper the data 
at proper time and location with restricted condition.
•“Context”
– means a pattern in which scenario suspicious vulnerability is 
more likely to be existing.
2013 Trend Micro 
25th Anniversary
Architecture overview
Origianl function
Hooker
IOAcceleratorFamily2.kext
Targeted application from apple store
Suspicious 
module/function 
manifest
IOThunderboltFamily.kext
IOUSBFamily.kext
AppleGraphicsPowerManagement.kext
AppleHDA.kext
… … 
I.
 is_io_connect_method
II.
is_io_connect_async_method
III.
iokit_user_client_trap
IV.
IOMemoryDescriptor::createMappingInTask
V.
ipc_kmsg_get
VI.
ipc_kmsg_send
VII.
Copyio
…...
Conditon Checker
Ring3
Ring0
Target 
drivers
XNU/
IOKit
Tamper
StackFrame,
Process,
UserClient,
MsgID,
…...
Context Matcher
2013 Trend Micro 
25th Anniversary
Pseudo
TargetAPI(params):
//Call Original_TargetAPI(params)
if (!ConditionChecker(params))  goto _exit();
if (ContextMatcher(params))
report alert;
if (random())    tamper(params);
Call Original_TargetAPI(params);
2013 Trend Micro 
25th Anniversary
Hooker & Tamper
• The hooker  
– Direct taint-able from user
– Hook one for many processes
• Inline hook in kernel mode. 
• Tamper 
– Only fuzzing the buffer content touchable by user
• Inband_input, scalar_input, ool_input
• NOT size
2013 Trend Micro 
25th Anniversary
Layered Hook
2013 Trend Micro 
25th Anniversary
Snappet
(lldb) showcurrentstacks
Backtrace:
kernel_stack = 0xffffff8876790000
stacktop = 0xffffff8876793430
0xffffff8876793430 0xffffff801679e37e Debugger((const char *) message = <>, ) 
0xffffff88767934b0 0xffffff80166838c7 panic((const char *) str = <>, ) 
0xffffff8876793690 0xffffff8016798fd9 panic_trap [inlined]((x86_saved_state64_t *) regs = <>, , (uint32_t) pl = <>, ) 
0xffffff8876793690 0xffffff8016798daf kernel_trap((x86_saved_state_t *) state = <>, , (uintptr_t *) lo_spp = <>, ) 
0xffffff88767936b0 0xffffff80167b7d83 kernel.development`trap_from_kernel + 0x26 
0xffffff88767937f0 0xffffff801650e05b kernel.development`memcpy + 0xb 
0xffffff88767937f0 0xffffff7f0000000f None + 0xffffff7f0000000f 
0xffffff8876793830 0xffffff7f96ed7d4d com.vmware.kext.VMwareGfx + 0x6d4d 
0xffffff88767938d0 0xffffff8016cb9657 ::shim_io_connect_method_scalarI_scalarO(IOExternalMethod *, IOService *, const io_user_scalar_t *, 
mach_msg_type_number_t, io_user_scalar_t *, mach_msg_type_number_t *)((IOExternalMethod *) method = <>, , (IOService *) object = <>, , (const
io_user_scalar_t *) input = <>, , (mach_msg_type_number_t) inputCount = <>, , (io_user_scalar_t *) output = <>, , (mach_msg_type_number_t *) outputCount = 
<>, ) 
0xffffff8876793930 0xffffff8016cbbe28 IOUserClient::externalMethod(unsigned int, IOExternalMethodArguments*, IOExternalMethodDispatch*, OSObject*, 
void*)((IOUserClient *) this = <>, , (uint32_t) selector = <>, , (IOExternalMethodArguments *) args = <>, , (IOExternalMethodDispatch *) dispatch = <>, , 
(OSObject *) target = <>, , (void *) reference = <>, ) 
0xffffff8876793a70 0xffffff8016cb8f67 ::is_io_connect_method(io_connect_t, uint32_t, io_user_scalar_t *, mach_msg_type_number_t, char *, 
mach_msg_type_number_t, mach_vm_address_t, mach_vm_size_t, char *, mach_msg_type_number_t *, io_user_scalar_t *, mach_msg_type_number_t *, 
mach_vm_address_t, mach_vm_size_t *)((io_connect_t) connection = 0xffffff88767939b0, (uint32_t) selector = 10, (io_user_scalar_t *) scalar_input = <>, , 
(mach_msg_type_number_t) scalar_inputCnt = <>, , (char *) inband_input = <>, , (mach_msg_type_number_t) inband_inputCnt = 0, (mach_vm_address_t) 
ool_input = <>, , (mach_vm_size_t) ool_input_size = , , (char *) inband_output = , , (mach_msg_type_number_t *) inband_outputCnt = , , (io_user_scalar_t *) scalar_output
= <>, , (mach_msg_type_number_t *) scalar_outputCnt = , , (mach_vm_address_t) ool_output = <>, , 
(mach_vm_size_t *) ool_output_size = <>, ) 
0xffffff8876793c40 0xffffff7f986a8f74 trampline_is_io_connect_method((io_connect_t) connection = 0xffffff801fbc0600, (uint32_t) selector = 10, 
(io_user_scalar_t *) scalar_input = 0xffffff801eeb9910, (mach_msg_type_number_t) scalar_inputCnt = 2, (char *) inband_input = 0xffffff801eeb9924 "", 
(mach_msg_type_number_t) inband_inputCnt = 0, (mach_vm_address_t) ool_input = 0, (mach_vm_size_t) ool_input_size = 0, (char *) inband_output = 
0xffffff801d6ac600 "", (mach_msg_type_number_t *) inband_outputCnt = 0xffffff801d6ac5fc, (io_user_scalar_t *) scalar_output = 0xffffff8876793ca0, 
(mach_msg_type_number_t *) scalar_outputCnt = 0xffffff8876793c9c, (mach_vm_address_t) ool_output = 0, (mach_vm_size_t *) ool_output_size = 
0xffffff801eeb9944) 
0xffffff8876793d50 0xffffff801675c050 _Xio_connect_method((mach_msg_header_t *) InHeadP = <>, , (mach_msg_header_t *) OutHeadP = 
0xffffff801d6ac5d0) 
0xffffff8876793d80 0xffffff8016687f73 ipc_kobject_server((ipc_kmsg_t) request = 0xffffff801eeb9880) 
0xffffff8876793dc0 0xffffff8016663ea3 ipc_kmsg_send((ipc_kmsg_t) kmsg = <>, , (mach_msg_option_t) option = <>, , (mach_msg_timeout_t) send_timeout =
0) 
0xffffff8876793e50 0xffffff7f9869f6dd trampline_ipc_kmsg_send((ipc_kmsg_t) kmsg = 0xffffff801eeb9880, (mach_msg_option_t) option = 3, 
(mach_msg_timeout_t) send_timeout = 0) 
0xffffff8876793ec0 0xffffff801667a4c5 mach_msg_overwrite_trap((mach_msg_overwrite_trap_args *) args = <>, ) 
0xffffff8876793f10 0xffffff7f986a345c trampline_mach_msg_overwrite_trap((mach_msg_overwrite_trap_args *) args = 0xffffff8876793f28) 
0xffffff8876793fb0 0xffffff80167828e0 mach_call_munger64((x86_saved_state_t *) state = 0xffffff801de4bca0) 
0x0000000000000000 0xffffff80167b85a6 kernel.development`hndl_mach_scall64 + 0x16 
stackbottom = 0xffffff8876793fb0
2013 Trend Micro 
25th Anniversary
Hook Summary
• (Driver interface)is_io_connect_method
• (Driver interface)is_io_connect_async_method
• (Kernel)iokit_user_client_trap
• (Kernel)IOMemoryDescriptor::createMappingInTask
• (Mach Msg)ipc_kmsg_get
• (Mach Msg)ipc_kmsg_send
• (General IO)Copyio
• …
2013 Trend Micro 
25th Anniversary
Why condition checker
1. Keep fuzzing stable
-
Get rid of noise (busy call, reproduced crashes)
2. Hunt vulnerability according to context
2013 Trend Micro 
25th Anniversary
Dimension of condition 1/3
• &&,  ||, *(wild match), white(black)
• Process
– User id (root/Non-root)
– Process Name (e.g. Safari, RCE, sandbox-evasion)
• Module
– Module Name
• Function
– Symbol Name/Address
– Offset range
2013 Trend Micro 
25th Anniversary
Dimension of condition 2/3
• Data
– is_address_RWX
– Copy direction(in/out)
– Kernel or User space (SMAP noise)
• Call-Stack
– Function ret
– Stack Level (from bottom to top)
– Level range[,]
2013 Trend Micro 
25th Anniversary
Dimension of condition 3/3
• Misc
– Mach_msg
• msg subsystem id…
– Userclient
• serviceName,ClassName,selector…
2013 Trend Micro 
25th Anniversary
Stack Frame Condition Sample
stack_match_item_t stack_matcher_for_copyio[]={
//If any item in list match, then match
//{routineName, cache}, routineAddress, offSetFrom, offsetTo, levelLow, levelHigh
{{"_shim_io_connect_method_scalarI_scalarO",STACK_ANY_INTEGER},STACK_ANY_INTEGER,0, 
0xC120-0xB8B0, STACK_ALL_LEVEL_RANGE},
{{"_shim_io_connect_method_scalarI_structureO",STACK_ANY_INTEGER},STACK_ANY_INTEGER,