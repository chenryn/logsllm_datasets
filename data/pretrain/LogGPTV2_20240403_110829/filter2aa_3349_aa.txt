### 2013 Trend Micro 25th Anniversary

#### Fuzzing with Context Enlightenment and Exploiting OSX IOKit Vulnerabilities for Fun and Profit
- **(P)FACE into the Apple Core and Exploit to Root**

---

### Agenda
- Who We Are
- Passive Fuzzing Framework
- Context Enlightenment
- Exploit to Root

---

### Who We Are
- **Jack Tang:**
  - 10 years of experience in anti-malware solution development.
  - Expertise in Windows and Mac kernel technologies, browser, and document exploits.
  - Currently focused on researching Mac vulnerabilities and exploits.

- **Moony Li:**
  - 7 years of experience in security product development.
  - RD Leader for the Sandcastle core engine in the Deep Discovery (DD) product, specializing in Gateway 0-day exploit detection.
  - Currently focused on researching Mac and Windows kernel vulnerabilities and exploits.

---

### Accomplishments
- Here is a list of CVEs and ZDIs identified up to now (excluding submitted but pending):
  - CVE-2015-3787, CVE-2015-5867, CVE-2015-7021, CVE-2015-7020, CVE-2016-1716, ZDI-CAN-3536, ZDI-CAN-3558, ZDI-CAN-3598, ZDI-CAN-3596, ZDI-CAN-3603, CVE-2015-7067, CVE-2015-7076, CVE-2015-7106, CVE-2015-7109, CVE-2016-1718, CVE-2016-1747, CVE-2016-1749, CVE-2016-1753, ZDI-CAN-3693, ZDI-CAN-3694, CVE-2016-1795, CVE-2016-1808, CVE-2016-1810, CVE-2016-1817, CVE-2016-1820, CVE-2016-1798, CVE-2016-1799, CVE-2016-1812, CVE-2016-1814, CVE-2016-1818, CVE-2016-1816

---

### Phase 1: Fuzzing Framework

#### Agenda
- Passive Fuzzing Framework
  - Previous Work
  - Approach & Considerations
  - Implementation
  - Best Practices

---

### Previous Work
- **Traditional Fuzzing by IOKit Interface:**
  - Typically, this involves opening the IOKit service name to be tested and injecting fuzzing data via the IOKit user-mode API (e.g., `IOConnectCallMethod`).
  - **Call Sequence Dependency:**
    - Example: `AppleCamIn` (OpenDevice, PowerOnCamera, etc.)
  - **Input Data Dependency:**
    - Example: `AppleHDAEngineInput` (input as user-mode buffer pointer)
  - **Timing Dependency:**
    - Example: `IOHDIXHDDriveOutKernel` (mount dmg)

- **Code Review of Target Kernel Extension:**
  - This approach requires significant effort to reverse-engineer binary code, especially given the large number of IOKit services and user clients.
  - **Challenges:**
    - Unscalable
    - High cost in terms of reverse engineering (RE) and upgrades

---

### Approach & Re-thinking
- [Link to Reference 1](http://www.chinapoesy.com/gongxiangaebf830f-e011-4375-9312-af80aa2f184a.html)
- [Link to Reference 2](http://s1.sinaimg.cn/large/48f6d2f7gd04bcc333b70&690)

---

### Passive & Context
- **Passive:**
  - Refers to not generating data to inject into the interface from user mode. Instead, we trace key points in the kernel's processing of IOKit input data from user mode and tamper with the data at appropriate times and locations under restricted conditions.
- **Context:**
  - Refers to a pattern where suspicious vulnerabilities are more likely to exist.

---

### Architecture Overview
- **Original Function:**
  - Hooked functions in various kernel extensions (e.g., `IOAcceleratorFamily2.kext`, `IOThunderboltFamily.kext`, `IOUSBFamily.kext`, `AppleGraphicsPowerManagement.kext`, `AppleHDA.kext`).

- **Condition Checker:**
  - Ensures that the fuzzing process remains stable and filters out noise (e.g., busy calls, reproduced crashes).

- **Context Matcher:**
  - Identifies scenarios where vulnerabilities are more likely to occur.

- **Tamper:**
  - Modifies the buffer content that is accessible by the user, including in-band input, scalar input, and out-of-line (OOL) input, but not the size.

- **Layered Hook:**
  - Implements inline hooks in kernel mode to taint and modify data.

---

### Pseudo Code
```c
TargetAPI(params):
// Call Original_TargetAPI(params)
if (!ConditionChecker(params)) goto _exit();
if (ContextMatcher(params))
    report alert;
if (random()) 
    tamper(params);
Call Original_TargetAPI(params);
```

---

### Hook Summary
- **Driver Interface:**
  - `is_io_connect_method`
  - `is_io_connect_async_method`
- **Kernel:**
  - `iokit_user_client_trap`
  - `IOMemoryDescriptor::createMappingInTask`
- **Mach Message:**
  - `ipc_kmsg_get`
  - `ipc_kmsg_send`
- **General IO:**
  - `Copyio`
- **Others:**
  - Additional hooks as needed

---

### Why Condition Checker?
1. **Stability:**
   - Ensures the fuzzing process remains stable by filtering out noise (e.g., busy calls, repeated crashes).
2. **Vulnerability Hunting:**
   - Targets vulnerabilities based on specific contexts.

---

### Dimensions of Conditions
- **Logical Operators:**
  - `&&`, `||`, `*` (wildcard), white/black lists
- **Process:**
  - User ID (root/non-root)
  - Process Name (e.g., Safari, RCE, sandbox evasion)
- **Module:**
  - Module Name
- **Function:**
  - Symbol Name/Address
  - Offset range
- **Data:**
  - Read/Write/Execute (RWX) address
  - Copy direction (in/out)
  - Kernel or User space (SMAP noise)
- **Call-Stack:**
  - Function return
  - Stack level (from bottom to top)
  - Level range
- **Miscellaneous:**
  - Mach message (e.g., subsystem ID)
  - User client (e.g., serviceName, className, selector)

---

### Stack Frame Condition Sample
```c
stack_match_item_t stack_matcher_for_copyio[] = {
    // If any item in the list matches, then match
    // {routineName, cache}, routineAddress, offsetFrom, offsetTo, levelLow, levelHigh
    {{ "_shim_io_connect_method_scalarI_scalarO", STACK_ANY_INTEGER }, STACK_ANY_INTEGER, 0, 0xC120 - 0xB8B0, STACK_ALL_LEVEL_RANGE },
    {{ "_shim_io_connect_method_scalarI_structureO", STACK_ANY_INTEGER }, STACK_ANY_INTEGER, ...
};
```

---

This optimized version aims to make the content more structured, clear, and professional, ensuring it is easy to follow and understand.