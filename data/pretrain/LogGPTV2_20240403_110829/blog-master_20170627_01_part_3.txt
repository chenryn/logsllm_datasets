postgres=# select to_tsvector('hello i digoal') @@ to_tsquery('english', 'hello  digoal');  
 ?column?   
----------  
 t  
(1 row)  
```  
### 应用场景    
[《PostgreSQL 全文检索加速 快到没有朋友 - RUM索引接口(潘多拉魔盒)》](../201610/20161019_01.md)      
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)      
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 3 rum, smlar应用场景分析》](../201701/20170116_04.md)      
### 例子    
```    
postgres=# create table rum_test(c1 tsvector);    
CREATE TABLE    
postgres=# CREATE INDEX rumidx ON rum_test USING rum (c1 rum_tsvector_ops);    
CREATE INDEX    
$ vi test.sql    
insert into rum_test select to_tsvector(string_agg(c1::text,',')) from  (select (100000*random())::int from generate_series(1,100)) t(c1);    
$ pgbench -M prepared -n -r -P 1 -f ./test.sql -c 50 -j 50 -t 200000    
postgres=# explain analyze select * from rum_test where c1 @@ to_tsquery('english','1 | 2') order by c1  to_tsquery('english','1 | 2') offset 19000 limit 100;    
                                                               QUERY PLAN                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=18988.45..19088.30 rows=100 width=1391) (actual time=58.912..59.165 rows=100 loops=1)    
   ->  Index Scan using rumidx on rum_test  (cost=16.00..99620.35 rows=99749 width=1391) (actual time=16.426..57.892 rows=19100 loops=1)    
         Index Cond: (c1 @@ '''1'' | ''2'''::tsquery)    
         Order By: (c1  '''1'' | ''2'''::tsquery)    
 Planning time: 0.133 ms    
 Execution time: 59.220 ms    
(6 rows)    
postgres=# create table test15(c1 tsvector);    
CREATE TABLE    
postgres=# insert into test15 values (to_tsvector('jiebacfg', 'hello china, i''m digoal')), (to_tsvector('jiebacfg', 'hello world, i''m postgresql')), (to_tsvector('jiebacfg', 'how are you, i''m digoal'));    
INSERT 0 3    
postgres=# select * from test15;    
                         c1                              
-----------------------------------------------------    
 ' ':2,5,9 'china':3 'digoal':10 'hello':1 'm':8    
 ' ':2,5,9 'hello':1 'm':8 'postgresql':10 'world':3    
 ' ':2,4,7,11 'digoal':12 'm':10    
(3 rows)    
postgres=# create index idx_test15 on test15 using rum(c1 rum_tsvector_ops);    
CREATE INDEX    
postgres=# select *,c1  to_tsquery('hello') from test15;    
                         c1                          | ?column?     
-----------------------------------------------------+----------    
 ' ':2,5,9 'china':3 'digoal':10 'hello':1 'm':8     |  16.4493    
 ' ':2,5,9 'hello':1 'm':8 'postgresql':10 'world':3 |  16.4493    
 ' ':2,4,7,11 'digoal':12 'm':10                     | Infinity    
(3 rows)    
postgres=# explain select *,c1  to_tsquery('postgresql') from test15 order by c1  to_tsquery('postgresql');    
                                   QUERY PLAN                                       
--------------------------------------------------------------------------------    
 Index Scan using idx_test15 on test15  (cost=3600.25..3609.06 rows=3 width=36)    
   Order By: (c1  to_tsquery('postgresql'::text))    
(2 rows)    
```    
GIN VS RUM    
GIN    
```  
postgres=# create table t_gin_1 (id int, ts tsvector);  
CREATE TABLE  
postgres=# insert into t_gin_1 values (1, to_tsvector('hello digoal')),(2, to_tsvector('hello i digoal')),(3, to_tsvector('hello i am digoal'));  
INSERT 0 3  
postgres=# create index idx_t_gin_1_1 on t_gin_1 using gin (ts);  
CREATE INDEX  
postgres=# explain select * from t_gin_1 where ts @@ to_tsquery('english', 'hello  digoal');  
                       QUERY PLAN                         
--------------------------------------------------------  
 Seq Scan on t_gin_1  (cost=0.00..1.04 rows=1 width=36)  
   Filter: (ts @@ '''hello''  ''digoal'''::tsquery)  
(2 rows)  
postgres=# set enable_seqscan=off;  
SET  
postgres=# explain select * from t_gin_1 where ts @@ to_tsquery('english', 'hello  digoal');  
                                 QUERY PLAN                                   
----------------------------------------------------------------------------  
 Bitmap Heap Scan on t_gin_1  (cost=4.50..6.01 rows=1 width=36)  
   Recheck Cond: (ts @@ '''hello''  ''digoal'''::tsquery)  
   ->  Bitmap Index Scan on idx_t_gin_1_1  (cost=0.00..4.50 rows=1 width=0)  
         Index Cond: (ts @@ '''hello''  ''digoal'''::tsquery)  
(4 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gin_1 where ts @@ to_tsquery('english', 'hello  digoal');  
                                                      QUERY PLAN                                                        
----------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.t_gin_1  (cost=4.50..6.01 rows=1 width=36) (actual time=0.029..0.030 rows=1 loops=1)  
   Output: id, ts  
   Recheck Cond: (t_gin_1.ts @@ '''hello''  ''digoal'''::tsquery)  
   Rows Removed by Index Recheck: 2  
   Heap Blocks: exact=1  
   Buffers: shared hit=4  
   ->  Bitmap Index Scan on idx_t_gin_1_1  (cost=0.00..4.50 rows=1 width=0) (actual time=0.018..0.018 rows=3 loops=1)  
         Index Cond: (t_gin_1.ts @@ '''hello''  ''digoal'''::tsquery)  
         Buffers: shared hit=3  
 Planning time: 0.106 ms  
 Execution time: 0.061 ms  
(11 rows)  
```  
RUM    
```  
postgres=# create table t_gin_1 (id int, ts tsvector);  
CREATE TABLE  
postgres=# insert into t_gin_1 values (1, to_tsvector('hello digoal')),(2, to_tsvector('hello i digoal')),(3, to_tsvector('hello i am digoal'));  
INSERT 0 3  
postgres=#  create index idx_t_gin_1_1 on t_gin_1 using rum (ts rum_tsvector_ops);  
CREATE INDEX  
postgres=# explain select * from t_gin_1 where ts @@ to_tsquery('english', 'hello  digoal');  
                       QUERY PLAN                         
--------------------------------------------------------  
 Seq Scan on t_gin_1  (cost=0.00..1.04 rows=1 width=36)  
   Filter: (ts @@ '''hello''  ''digoal'''::tsquery)  
(2 rows)  
postgres=# set enable_seqscan =off;  
SET  
postgres=# explain select * from t_gin_1 where ts @@ to_tsquery('english', 'hello  digoal');  
                                  QUERY PLAN                                    
------------------------------------------------------------------------------  
 Index Scan using idx_t_gin_1_1 on t_gin_1  (cost=2.00..4.01 rows=1 width=36)  
   Index Cond: (ts @@ '''hello''  ''digoal'''::tsquery)  
(2 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gin_1 where ts @@ to_tsquery('english', 'hello  digoal');  
                                                          QUERY PLAN                                                             
-------------------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_t_gin_1_1 on public.t_gin_1  (cost=2.00..4.01 rows=1 width=36) (actual time=0.049..0.049 rows=1 loops=1)  
   Output: id, ts  
   Index Cond: (t_gin_1.ts @@ '''hello''  ''digoal'''::tsquery)  
   Buffers: shared hit=3  
 Planning time: 0.288 ms  
 Execution time: 0.102 ms  
(6 rows)  
```  
## 八、bloom    
### 原理    
bloom索引接口是PostgreSQL基于bloom filter构造的一个索引接口，属于lossy索引，可以收敛结果集(排除绝对不满足条件的结果，剩余的结果里再挑选满足条件的结果)，因此需要二次check，bloom支持任意列组合的等值查询。    
bloom存储的是签名，签名越大，耗费的空间越多，但是排除更加精准。有利有弊。        
```  
CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)  
       WITH (length=80, col1=2, col2=2, col3=4);  
签名长度 80 bit, 最大允许4096 bits  
col1 - col32，分别指定每列的bits，默认长度2，最大允许4095 bits.  
```  
bloom provides an index access method based on Bloom filters.    
A Bloom filter is a space-efficient data structure that is used to test whether an element is a member of a set. In the case of an index access method, it allows fast exclusion of non-matching tuples via signatures whose size is determined at index creation.    
This type of index is most useful when a table has many attributes and queries test arbitrary combinations of them.     
### 应用场景    
bloom索引适合多列任意组合查询。    
[《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)     
### 例子    
```    
=# CREATE TABLE tbloom AS    
   SELECT    
     (random() * 1000000)::int as i1,    
     (random() * 1000000)::int as i2,    
     (random() * 1000000)::int as i3,    
     (random() * 1000000)::int as i4,    
     (random() * 1000000)::int as i5,    
     (random() * 1000000)::int as i6    
   FROM    
  generate_series(1,10000000);    
SELECT 10000000    
=# CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);    
CREATE INDEX    
=# SELECT pg_size_pretty(pg_relation_size('bloomidx'));    
 pg_size_pretty    
----------------    
 153 MB    
(1 row)    
=# CREATE index btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);    
CREATE INDEX    
=# SELECT pg_size_pretty(pg_relation_size('btreeidx'));    
 pg_size_pretty    
----------------    
 387 MB    
(1 row)    
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;    
                                                        QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbloom  (cost=178435.39..178439.41 rows=1 width=24) (actual time=76.698..76.698 rows=0 loops=1)    
   Recheck Cond: ((i2 = 898732) AND (i5 = 123451))    
   Rows Removed by Index Recheck: 2439    
   Heap Blocks: exact=2408    
   ->  Bitmap Index Scan on bloomidx  (cost=0.00..178435.39 rows=1 width=0) (actual time=72.455..72.455 rows=2439 loops=1)    
         Index Cond: ((i2 = 898732) AND (i5 = 123451))    
 Planning time: 0.475 ms    
 Execution time: 76.778 ms    
(8 rows)    
```    
## 九、zombodb    
### 原理    
zombodb是PostgreSQL与ElasticSearch结合的一个索引接口，可以直接读写ES。    
https://github.com/zombodb/zombodb    
### 应用场景    
与ES结合，实现SQL接口的搜索引擎，实现数据的透明搜索。    
### 例子    
```    
-- Install the extension:    
CREATE EXTENSION zombodb;    
-- Create a table:    
CREATE TABLE products (    
    id SERIAL8 NOT NULL PRIMARY KEY,    
    name text NOT NULL,    
    keywords varchar(64)[],    
    short_summary phrase,    
    long_description fulltext,     
    price bigint,    
    inventory_count integer,    
    discontinued boolean default false,    
    availability_date date    
);    
-- insert some data    
-- Index it:    
CREATE INDEX idx_zdb_products     
          ON products     
       USING zombodb(zdb('products', products.ctid), zdb(products))    
        WITH (url='http://localhost:9200/', shards=5, replicas=1);    
-- Query it:    
SELECT *     
  FROM products     
 WHERE zdb('products', ctid) ==> 'keywords:(sports,box) or long_description:(wooden w/5 away) and price < 100000';    
```    
## 十、bitmap Index   
### 原理    
bitmap索引是Greenplum的索引接口，类似GIN倒排，只是bitmap的KEY是列的值，VALUE是BIT（每个BIT对应一行），而不是行号list或tree。    
[《Greenplum 最佳实践 - 什么时候选择bitmap索引》](../201705/20170512_01.md)      
### 应用场景    
当某个字段的唯一值个数在100到10万之间(超出这个范围，不建议使用bitmap)时，如果表的记录数特别多，而且变更不频繁（或者是AO表），那么很适合BITMAP索引，bitmap索引可以实现快速的多个或单个VALUE的搜索。因为只需要对行号的BITMAP进行BIT与或运算，得到最终的BITMAP，从最终的BITMAP映射到行进行提取。    
bitmap与btree一样，都支持 等于，大于，小于，大于等于，小于等于的查询。    
### 例子    
```    
postgres=# create table t_bitmap(id int, info text, c1 int);  
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.  
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.  
CREATE TABLE  
postgres=# insert into t_bitmap select generate_series(1,1000000), 'test', random()*1000;  
INSERT 0 1000000  
postgres=# create index idx_t_bitmap_1 on t_bitmap using bitmap(c1);  
CREATE INDEX  
postgres=# explain analyze select * from t_bitmap where c1=1;  
                                       QUERY PLAN                                         
----------------------------------------------------------------------------------------  
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..200.27 rows=1 width=13)  