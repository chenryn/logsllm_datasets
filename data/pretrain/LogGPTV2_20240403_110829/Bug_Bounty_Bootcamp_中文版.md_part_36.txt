这是被包裹在 HTML 的 \ 标签之间的 JavaScript
代码。它将浏览器的位置设置为
https://example.com，强制浏览器进行重定向到该网址。你可以将这个数据 URL
插入到重定向参数中，以绕过阻止列表。
    https://example.com/login?redir=data:text/html;base64,
    PHNjcmlwdD5sb2NhdGlvbj0iaHR0cHM6Ly9leGFtcGxlLmNvbSI8L3NjcmlwdD4=
### Exploiting URL Decoding {#c07.xhtml#h2-501546c07-0008}
URLs sent over the internet can contain only *ASCII* *characters* ,
which include a set of characters commonly used in the English language
and a few special characters. But since URLs often need to contain
special characters or characters from other languages, people encode
characters by using URL encoding. URL encoding converts a character into
a percentage sign, followed by two hex digits; for example,
`      %2f     ` . This is the URL-encoded version of the slash
character ( `      /     ` ).
通过互联网发送的URL只能包含ASCII字符，其中包括英语中常用的一组字符和一些特殊字符。但是由于URL通常需要包含特殊字符或其他语言的字符，人们通过使用URL编码来对字符进行编码。URL编码将字符转换为百分号，后跟两个十六进制数字；例如，%
2f。这是斜杠字符（/）的URL编码版本。
When validators validate URLs, or when browsers redirect users, they
have to first find out what is contained in the URL by decoding any
characters that are URL encoded. If there is any inconsistency between
how the validator and browsers decode URLs, you could exploit that to
your advantage.
当验证程序验证URL或浏览器重定向用户时，它们必须首先解码URL编码的任何字符以了解URL中包含的内容。如果验证程序和浏览器如何解码URL存在任何不一致之处，您可以利用这一点为自己谋取利益。
#### [ ]{#c07.xhtml#Page_139 .pagebreak title="139"} Double Encoding {#c07.xhtml#h3-501546c07-0001}
First, try to double- or triple-URL-encode certain special characters in
your payload. For example, you could URL-encode the slash character in
*https://example.com/@attacker.com* . Here is the URL with a URL-encoded
slash:
首先，尝试将负载中的某些特殊字符进行双倍或三倍 URL 编码。例如，您可以对
https://example.com/@attacker.com 中的斜杠字符进行 URL 编码。这是具有
URL 编码斜杠的 URL：
    https://example.com%PI:EMAIL
And here is the URL with a double-URL-encoded slash:
这是一个使用双URL编码斜杠的URL地址：
    https://example.com%PI:EMAIL
Finally, here is the URL with a triple-URL-encoded slash:
最后，这是一个经过三次URL编码的斜线的URL：
    https://example.com%PI:EMAIL
Whenever a mismatch exists between how the validator and the browser
decode these special characters, you can exploit the mismatch to induce
an open redirect. For example, some validators might decode these URLs
completely, then assume the URL redirects to *example.com* , since
*\@attacker.com* is in the path portion of the URL. However, the
browsers might decode the URL incompletely, and instead treat
*example.com%25252f* as the username portion of the URL.
每当验证器和浏览器在解码这些特殊字符方面存在不匹配时，您就可以利用不匹配来引导一个开放重定向。例如，某些验证器可能会完全解码这些
URL，然后假定该 URL 重定向到 example.com，因为 \@attacker.com 在 URL
的路径部分。但是，浏览器可能会不完全解码 URL，而是将 example.com%25252f
作为 URL 的用户名部分处理。
On the other hand, if the validator doesn't double-decode URLs, but the
browser does, you can use a payload like this one:
另一方面，如果验证器不会双重解码URL，但浏览器会，您可以使用像这样的有效载荷：
    https://attacker.com%PI:EMAIL
The validator would see *example.com* as the hostname. But the browser
would redirect to *attacker.com* , because *\@example.com* becomes the
path portion of the URL, like this:
验证器会将example.com视为主机名。但是浏览器会重定向到attacker.com，因为@example.com变成了URL的路径部分，就像这样：
    https://attacker.com/@example.com
#### Non-ASCII Characters {#c07.xhtml#h3-501546c07-0002}
You can sometimes exploit inconsistencies in the way the validator and
browsers decode non-ASCII characters. For example, let's say that this
URL has passed URL validation:
有时候，你可以利用验证器和浏览器解码非ASCII字符时出现的不一致性。例如，假设这个URL通过了URL验证：
    https://attacker.com%ff.example.com
`      %ff     ` is the character [ ÿ ]{.NSSymbol} , which is a
non-ASCII character. The validator has determined that *example.com* is
the domain name, and *attacker.comÿ* is the subdomain name. Several
scenarios could happen. Sometimes browsers decode non-ASCII characters
into question marks. In this case, *example.com* would become part of
the URL query, not the hostname, and the browser would navigate to
*attacker.com* instead:
%ff是字符ÿ，它是一个非ASCII字符。验证器已确定example.com是域名，attacker.comÿ是子域名。可能会发生几种情况。有时浏览器会将非ASCII字符解码为问号。在这种情况下，example.com将成为URL查询的一部分，而不是主机名，浏览器将导航到attacker.com。
    https://attacker.com?.example.com
[ ]{#c07.xhtml#Page_140 .pagebreak title="140"} Another common scenario
is that browsers will attempt to find a "most alike" character. For
example, if the character [ ╱ ]{.NSSymbol} ( `      %E2%95%B1     ` )
appears in a URL like this, the validator might determine that the
hostname is *example.com* :
另一个常见的情景是浏览器会尝试找到"最相似"的字符。例如，如果像这样的字符╱(%E2%95%B1)出现在URL中，验证器可能会确定主机名为example.com。
    https://attacker.com╱.example.com
But the browser converts the slash look-alike character into an actual
slash, making *attacker.com* the hostname instead:
但是，浏览器将类似斜杠的字符转换为实际的斜杠，使攻击者.com 成为主机名。
    https://attacker.com/.example.com
Browsers normalize URLs this way often in an attempt to be
user-friendly. In addition to similar symbols, you can use character
sets in other languages to bypass filters. The *Unicode* standard is a
set of codes developed to represent all of the world's languages on the
computer. You can find a list of Unicode characters at
[http://www.unicode.org/charts/](http://www.unicode.org/charts/){.LinkURL}
. Use the Unicode chart to find look-alike characters and insert them in
URLs to bypass filters. The *Cyrillic* character set is especially
useful since it contains many characters similar to ASCII characters.
浏览器经常以这种方式规范化URL，试图使其更加用户友好。除了类似的符号外，您还可以使用其他语言的字符集来绕过过滤器。
Unicode标准是一组代码，旨在在计算机上表示世界上所有的语言。您可以在http://www.unicode.org/charts/上找到Unicode字符的列表。使用Unicode图表查找类似的字符并将它们插入URL以绕过过滤器。
Cyrillic字符集特别有用，因为它包含许多与ASCII字符相似的字符。
### Combining Exploit Techniques {#c07.xhtml#h2-501546c07-0009}
To defeat more-sophisticated URL validators, combine multiple strategies
to bypass layered defenses. I've found the following payload to be
useful:
为了击败更复杂的URL验证器，结合多种策略绕过分层防御。我发现以下有效负载非常有用：
    https://example.com%PI:EMAIL/example.com
This URL bypasses protection that checks only that a URL contains,
starts with, or ends with an allowlisted hostname by making the URL both
start and end with *example.com* . Most browsers will interpret
*example.com%252f* as the username portion of the URL. But if the
validator over-decodes the URL, it will confuse *example.com* as the
hostname portion:
该URL绕过保护，只检查URL是包含、以、或以白名单主机名结尾，方法是使URL同时以example.com开头和结尾。大多数浏览器将解释example.com%252f作为URL的用户名部分。但如果验证器过度解码URL，则会将example.com混淆为主机名部分：
    https://example.com/@attacker.com/example.com
You can use many more methods to defeat URL validators. In this section,
I've provided an overview of the most common ones. Try each of them to
check for weaknesses in the validator you are testing. If you have time,
experiment with URLs to invent new ways of bypassing URL validators. For
example, try inserting random non-ASCII characters into a URL, or
intentionally messing up its different components, and see how browsers
interpret it.
你可以使用更多方法来打败 URL
验证器。在本节中，我提供了最常见的综述。尝试每种方法以检查您正在测试的验证器中的弱点。如果您有时间，请尝试使用
URL 来发明绕过 URL 验证器的新方法。例如，尝试在 URL 中插入随机的非 ASCII
字符，或故意弄乱其不同的组件， 看看浏览器如何解析它。
## Escalating the Attack {#c07.xhtml#h1-501546c07-0005}
Attackers could use open redirects by themselves to make their phishing
attacks more credible. For example, they could send this URL in an email
to a user:
*https://example.com/login?next=https://attacker.com/fake_login.html.*
攻击者可以利用开放重定向来使其网络钓鱼攻击更加可信。例如，他们可以通过电子邮件向用户发送以下URL：https://example.com/login?next=https://attacker.com/fake_login.html。
Though this URL would first lead users to the legitimate website, it
would redirect them to the attacker's site after login. The attacker
could host a fake [ ]{#c07.xhtml#Page_141 .pagebreak title="141"} login
page on a malicious site that mirrors the legitimate site's login page,
and prompt the user to log in again with a message like this one:
尽管此URL在首次将用户重定向至合法网站，但在登录后会将其重定向至攻击者的网站。攻击者可以在恶意站点上托管一个模拟合法站点登录页面的假登录页面，并提示用户再次登录，如此消息：
> Sorry! The password you provided was incorrect. Please enter your
> username and password again.
>
> 抱歉！您提供的密码不正确。请重新输入您的用户名和密码。
Believing they've entered an incorrect password, the user would provide
their credentials to the attacker's site. At this point, the attacker's
site could even redirect the user back to the legitimate site to keep
the victim from realizing that their credentials were stolen.
用户认为他们输入了错误的密码，然后就会将他们的凭据提供给攻击者的网站。此时，攻击者的网站甚至可以将用户重定向回合法网站，以避免受害者意识到他们的凭据已经被窃取。
Since organizations can't prevent phishing completely (because those
attacks depend on human judgment), security teams will often dismiss
open redirects as trivial bugs if reported on their own. But open
redirects can often serve as a part of a bug chain to achieve a bigger
impact. For example, an open redirect can help you bypass URL blocklists
and allowlists. Take this URL, for example:
由于组织无法完全防止钓鱼攻击（因为这些攻击取决于人类判断），因此安全团队通常会认为单独报告的开放重定向漏洞是微不足道的。但是，开放重定向经常可以作为一个漏洞链的一部分，以实现更大的影响。例如，开放重定向可以帮助您绕过URL阻止列表和白名单。请参考以下URL：
    https://example.com/?next=https://attacker.com/
This URL will pass even well-implemented URL validators, because the URL
is technically still on the legitimate website. Open redirects can,
therefore, help you maximize the impact of vulnerabilities like
server-side request forgery (SSRF), which I'll discuss in [ Chapter 13
]{.xref itemid="xref_target_Chapter 13"} . If a site utilizes an
allowlist to prevent SSRFs and allows requests to only a list of
predefined URLs, an attacker can utilize an open redirect within those
allowlisted pages to redirect the request anywhere.
这个URL会通过即使是良好实现的URL验证器，因为该URL在技术上仍然在合法网站上。因此，开放性重定向可以帮助您最大限度地提高服务器端请求伪造（SSRF）等漏洞的影响，这将在第13章中讨论。如果一个网站使用白名单来防止SSRF，并允许请求仅限于一系列预定义的URL，攻击者可以在这些白名单页面中利用开放式重定向将请求重定向到任何地方。
You could also use open redirects to steal credentials and OAuth tokens.
Often, when a page redirects to another site, browsers will include the
originating URL as a referer HTTP request header. When the originating
URL contains sensitive information, like authentication tokens,
attackers can induce an open redirect to steal the tokens via the
referer header. (Even when there is no open redirect on the sensitive
endpoint, there are ways to smuggle tokens offsite by using open
redirect chains. I'll go into detail about how these attacks work in [
Chapter 20 ]{.xref itemid="xref_target_Chapter 20"} .)
您也可以使用开放式重定向来窃取凭据和OAuth令牌。通常，当一个页面重定向到另一个站点时，浏览器将包括原始URL作为引用HTTP请求头。当原始URL包含敏感信息，比如身份验证令牌时，攻击者可以通过引用头诱导一个开放式重定向来窃取令牌。即使敏感端点上没有开放式重定向，攻击者仍可以使用开放式重定向链将令牌走私离开站点。这些攻击在第20章中详细介绍。
## Finding Your First Open Redirect! {#c07.xhtml#h1-501546c07-0006}
You're ready to find your first open redirect. Follow the steps covered
in this chapter to test your target applications:
你已经准备好找出第一个开放重定向。按照本章所涵盖的步骤测试目标应用程序：
1.  Search for redirect URL parameters. These might be vulnerable to
    parameter-based open redirect.
2.  Search for pages that perform referer-based redirects. These are
    candidates for a referer-based open redirect.
3.  Test the pages and parameters you've found for open redirects.
4.  If the server blocks the open redirect, try the protection bypass
    techniques mentioned in this chapter.
5.  Brainstorm ways of using the open redirect in your other bug chains!
:::
[]{#c08.xhtml}
::: section
# [ [ ]{#c08.xhtml#Page_143 .pagebreak title="143"} 8 ]{.ChapterNumber} [ Clickjacking ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*Clickjacking* , or user-interface redressing, is an attack that tricks
users into clicking a malicious button that has been made to look
legitimate. Attackers achieve this by using HTML page-overlay techniques
to hide one web page within another. Let's discuss this fun-to-exploit
vulnerability, why it's a problem, and how you can find instances of it.