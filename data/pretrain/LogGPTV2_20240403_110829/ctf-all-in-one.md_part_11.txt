25: 83 c4 10 add $0x10,%esp
28: 90 nop
29: 8b 5d fc mov -0x4(%ebp),%ebx
2c: c9 leave
2d: c3 ret
0000002e :
118
1.5.3 Linux ELF
2e: 8d 4c 24 04 lea 0x4(%esp),%ecx
32: 83 e4 f0 and $0xfffffff0,%esp
35: ff 71 fc pushl -0x4(%ecx)
38: 55 push %ebp
39: 89 e5 mov %esp,%ebp
3b: 51 push %ecx
3c: 83 ec 14 sub $0x14,%esp
3f: e8 fc ff ff ff call 40 
40: R_386_PC32 __x86.get_pc_thunk.ax
44: 05 01 00 00 00 add $0x1,%eax
45: R_386_GOTPC _GLOBAL_OFFSET_TABLE_
49: c7 45 f4 1e 00 00 00 movl $0x1e,-0xc(%ebp)
50: 8b 88 00 00 00 00 mov 0x0(%eax),%ecx
52: R_386_GOTOFF global_init_var
56: 8b 55 f4 mov -0xc(%ebp),%edx
59: 01 ca add %ecx,%edx
5b: 8b 80 04 00 00 00 mov 0x4(%eax),%eax
5d: R_386_GOTOFF .data
61: 01 d0 add %edx,%eax
63: 83 ec 0c sub $0xc,%esp
66: 50 push %eax
67: e8 fc ff ff ff call 68 
68: R_386_PC32 func
6c: 83 c4 10 add $0x10,%esp
6f: 90 nop
70: 8b 4d fc mov -0x4(%ebp),%ecx
73: c9 leave
74: 8d 61 fc lea -0x4(%ecx),%esp
77: c3 ret
Contents of section .text 是 .text 的数据的十六进制形式，总共 0x78
个字节，最左边一列是偏移量，中间 4 列是内容，最右边一列是 ASCII 码形式。下
面的 Disassembly of section .text 是反汇编结果。
数据段和只读数据段
119
1.5.3 Linux ELF
......
Sections:
Idx Name Size VMA LMA File off Algn
2 .data 00000008 00000000 00000000 000000b4 2**2
CONTENTS, ALLOC, LOAD, DATA
4 .rodata 00000004 00000000 00000000 000000bc 2**0
CONTENTS, ALLOC, LOAD, READONLY, DATA
......
Contents of section .data:
0000 0a000000 14000000 ........
Contents of section .rodata:
0000 25640a00 %d..
.......
.data 段保存已经初始化了的全局变量和局部静态变量。 elfDemo.c 中共有两
个这样的变量， global_init_var 和 local_static_init_var ，每个变量 4
个字节，一共 8 个字节。由于小端序的原因， 0a000000 表示
global_init_var 值（ 10 ）的十六进制 0x0a ， 14000000 表示
local_static_init_var 值（ 20 ）的十六进制 0x14 。
.rodata 段保存只读数据，包括只读变量和字符串常量。 elfDemo.c 中调用
printf 的时候，用到了一个字符串变量 %d\n ，它是一种只读数据，保存在
.rodata 段中，可以从输出结果看到字符串常量的 ASCII 形式，以 \0 结尾。
BSS段
Sections:
Idx Name Size VMA LMA File off Algn
3 .bss 00000004 00000000 00000000 000000bc 2**2
ALLOC
.bss 段保存未初始化的全局变量和局部静态变量。
ELF 文件结构
120
1.5.3 Linux ELF
对象文件参与程序链接（构建程序）和程序执行（运行程序）。ELF 结构几相关信
息在 /usr/include/elf.h 文件中。
ELF 文件头（ELF Header） 在目标文件格式的最前面，包含了描述整个文件
的基本属性。
程序头表（Program Header Table） 是可选的，它告诉系统怎样创建一个进
程映像。可执行文件必须有程序头表，而重定位文件不需要。
段（Section） 包含了链接视图中大量的目标文件信息。
段表（Section Header Table） 包含了描述文件中所有段的信息。
32位数据类型
名称 长度 对其 描述 原始类型
Elf32_Addr 4 4 无符号程序地址 uint32_t
Elf32_Half 2 2 无符号短整型 uint16_t
Elf32_Off 4 4 无符号偏移地址 uint32_t
Elf32_Sword 4 4 有符号整型 int32_t
Elf32_Word 4 4 无符号整型 uint32_t
121
1.5.3 Linux ELF
文件头
ELF 文件头必然存在于 ELF 文件的开头，表明这是一个 ELF 文件。定义如下：
typedef struct
{
unsigned char e_ident[EI_NIDENT]; /* Magic number and other in
fo */
Elf32_Half e_type; /* Object file type */
Elf32_Half e_machine; /* Architecture */
Elf32_Word e_version; /* Object file version */
Elf32_Addr e_entry; /* Entry point virtual address */
Elf32_Off e_phoff; /* Program header table file offset
*/
Elf32_Off e_shoff; /* Section header table file offset
*/
Elf32_Word e_flags; /* Processor-specific flags */
Elf32_Half e_ehsize; /* ELF header size in bytes */
Elf32_Half e_phentsize; /* Program header table entr
y size */
Elf32_Half e_phnum; /* Program header table entry co
unt */
Elf32_Half e_shentsize; /* Section header table entr
y size */
Elf32_Half e_shnum; /* Section header table entry co
unt */
Elf32_Half e_shstrndx; /* Section header string table i
ndex */
} Elf32_Ehdr;
typedef struct
{
unsigned char e_ident[EI_NIDENT]; /* Magic number and other in
fo */
Elf64_Half e_type; /* Object file type */
Elf64_Half e_machine; /* Architecture */
Elf64_Word e_version; /* Object file version */
Elf64_Addr e_entry; /* Entry point virtual address */
122
1.5.3 Linux ELF
Elf64_Off e_phoff; /* Program header table file offset
*/
Elf64_Off e_shoff; /* Section header table file offset
*/
Elf64_Word e_flags; /* Processor-specific flags */
Elf64_Half e_ehsize; /* ELF header size in bytes */
Elf64_Half e_phentsize; /* Program header table entr
y size */
Elf64_Half e_phnum; /* Program header table entry co
unt */
Elf64_Half e_shentsize; /* Section header table entr
y size */
Elf64_Half e_shnum; /* Section header table entry co
unt */
Elf64_Half e_shstrndx; /* Section header string table i
ndex */
} Elf64_Ehdr;
e_ident 保存着 ELF 的幻数和其他信息，最前面四个字节是幻数，用字符串表
示为 \177ELF ，其后的字节如果是 32 位则是 ELFCLASS32 (1)，如果是 64 位
则是 ELFCLASS64 (2)，再其后的字节表示端序，小端序为 ELFDATA2LSB (1)，
大端序为 ELFDATA2LSB (2)。最后一个字节则表示 ELF 的版本。
现在我们使用 readelf 命令来查看 elfDome.out 的文件头：
123
1.5.3 Linux ELF
$ readelf -h elfDemo.out
ELF Header:
Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class: ELF32
Data: 2's complement, little endi
an
Version: 1 (current)
OS/ABI: UNIX - System V
ABI Version: 0
Type: DYN (Shared object file)
Machine: Intel 80386
Version: 0x1
Entry point address: 0x3e0
Start of program headers: 52 (bytes into file)
Start of section headers: 6288 (bytes into file)
Flags: 0x0
Size of this header: 52 (bytes)
Size of program headers: 32 (bytes)
Number of program headers: 9
Size of section headers: 40 (bytes)
Number of section headers: 30
Section header string table index: 29
程序头
程序头表是由 ELF 头的 e_phoff 指定的偏移量和 e_phentsize 、 e_phnum
共同确定大小的表格组成。 e_phentsize 表示表格中程序头的大小， e_phnum
表示表格中程序头的数量。
程序头的定义如下：
124
1.5.3 Linux ELF
typedef struct
{
Elf32_Word p_type; /* Segment type */
Elf32_Off p_offset; /* Segment file offset */
Elf32_Addr p_vaddr; /* Segment virtual address */
Elf32_Addr p_paddr; /* Segment physical address */
Elf32_Word p_filesz; /* Segment size in file */
Elf32_Word p_memsz; /* Segment size in memory */
Elf32_Word p_flags; /* Segment flags */
Elf32_Word p_align; /* Segment alignment */
} Elf32_Phdr;
typedef struct
{
Elf64_Word p_type; /* Segment type */
Elf64_Word p_flags; /* Segment flags */
Elf64_Off p_offset; /* Segment file offset */
Elf64_Addr p_vaddr; /* Segment virtual address */
Elf64_Addr p_paddr; /* Segment physical address */
Elf64_Xword p_filesz; /* Segment size in file */
Elf64_Xword p_memsz; /* Segment size in memory */
Elf64_Xword p_align; /* Segment alignment */
} Elf64_Phdr;
使用 readelf 来查看程序头：
$ readelf -l elfDemo.out
Elf file type is DYN (Shared object file)
Entry point 0x3e0
There are 9 program headers, starting at offset 52
Program Headers:
Type Offset VirtAddr PhysAddr FileSiz MemSiz
Flg Align
PHDR 0x000034 0x00000034 0x00000034 0x00120 0x00120
R E 0x4
INTERP 0x000154 0x00000154 0x00000154 0x00013 0x00013
R 0x1
125
1.5.3 Linux ELF
[Requesting program interpreter: /lib/ld-linux.so.2]
LOAD 0x000000 0x00000000 0x00000000 0x00780 0x00780
R E 0x1000
LOAD 0x000ef4 0x00001ef4 0x00001ef4 0x00130 0x0013c
RW 0x1000
DYNAMIC 0x000efc 0x00001efc 0x00001efc 0x000f0 0x000f0
RW 0x4
NOTE 0x000168 0x00000168 0x00000168 0x00044 0x00044
R 0x4
GNU_EH_FRAME 0x000624 0x00000624 0x00000624 0x00044 0x00044
R 0x4
GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000
RW 0x10
GNU_RELRO 0x000ef4 0x00001ef4 0x00001ef4 0x0010c 0x0010c
R 0x1
Section to Segment mapping:
Segment Sections...
00
01 .interp
02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dy
nsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init
.plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame
03 .init_array .fini_array .dynamic .got .got.plt .data .
bss
04 .dynamic
05 .note.ABI-tag .note.gnu.build-id
06 .eh_frame_hdr
07
08 .init_array .fini_array .dynamic .got
段
段表（Section Header Table）是一个以 Elf32_Shdr 结构体为元素的数组，每
个结构体对应一个段，它描述了各个段的信息。ELF 文件头的 e_shoff 成员给
出了段表在 ELF 中的偏移， e_shnum 成员给出了段描述符的数
量， e_shentsize 给出了每个段描述符的大小。
126
1.5.3 Linux ELF
typedef struct
{
Elf32_Word sh_name; /* Section name (string tbl inde
x) */
Elf32_Word sh_type; /* Section type */
Elf32_Word sh_flags; /* Section flags */
Elf32_Addr sh_addr; /* Section virtual addr at execu
tion */
Elf32_Off sh_offset; /* Section file offset */
Elf32_Word sh_size; /* Section size in bytes */
Elf32_Word sh_link; /* Link to another section */
Elf32_Word sh_info; /* Additional section informatio
n */
Elf32_Word sh_addralign; /* Section alignment */
Elf32_Word sh_entsize; /* Entry size if section holds t
able */
} Elf32_Shdr;
typedef struct
{
Elf64_Word sh_name; /* Section name (string tbl inde
x) */
Elf64_Word sh_type; /* Section type */
Elf64_Xword sh_flags; /* Section flags */
Elf64_Addr sh_addr; /* Section virtual addr at execu
tion */
Elf64_Off sh_offset; /* Section file offset */
Elf64_Xword sh_size; /* Section size in bytes */
Elf64_Word sh_link; /* Link to another section */
Elf64_Word sh_info; /* Additional section informatio
n */
Elf64_Xword sh_addralign; /* Section alignment */
Elf64_Xword sh_entsize; /* Entry size if section holds t
able */
} Elf64_Shdr;
使用 readelf 命令查看目标文件中完整的段：
$ readelf -S elfDemo.o
127
1.5.3 Linux ELF
There are 15 section headers, starting at offset 0x41c: