case Add Question Category if a new category must be added to 
the database. But, only the Senior Staff actor can perform the use 
case Add Survey Header to include a new survey header entry and 
the  use  case  Add  Special  Question  to  include  special  sensitive 
questions  in  a  survey.  Figure  2  illustrates  the  sequence  diagram 
for the use case Add Survey Header with only the main flow of 
events  shown.  To  create  a  new  survey  header  “Internet  Usage”, 
the  senior  staff  person  enters  data  and  then  enables  the  submit 
button  in  the  Survey_Header_Add_Page,  which  will  search  for 
the  survey  title  in  the  Survey_Repository  object  (of  class 
Survey_List) and then send new header data to Survey_Repository 
via  the  Add_Survey_Header  message.  The  Survey_Repository 
object, in turn, creates a new survey header object Internet_Usage 
of class Survey_Header, and then updates itself as a new item in 
the list of survey.♦ 
Figure 1. Use case Diagram for New Survey Entry. 
Figure 2. Sequence diagram for “Add Survey Header”. 
3.  SECURE SOFTWARE DESIGN  
The  integration  of  security  into  the  software  design  process 
cannot occur in a vacuum, but must be an indistinguishable part 
of the process, and is impacted by both software design concepts 
and security methods. In this section, we propose an approach to 
incorporate security into object-oriented (OO) software design.  In 
Section 3.1, we propose three software/security design principles 
intended  to  associate  software  and  security  design  concepts.  In 
Section  3.2,  we  discuss  our  proposed  security  access  control 
model for MAC and its application to the OO paradigm. 
3.1  Software/Security Design Principles 
The  first  principle  addresses  the  question  of  how  to  integrate 
security and software design.  
Principle 1: The software design has multiple iterative phases and 
the security features should be incorporated and adjusted during 
each of and among those phases. 
identifying  application  objects  and 
In  UML,  the  use  case  diagrams  (with  use  cases  and  actors)  are 
usually  designed  first  after  an  analysis  of  a  customer’s 
requirements  to  describe  the  behaviors  of  the  application.  Next, 
the classes (at a high level with only attributes/method signatures) 
are  specified  by 
their 
relationships as required by the customer. The addition of classes 
requires  the  designer  to  return  to  the  use  cases  diagrams  and 
associate which classes are needed by which use cases, and may 
result in the design of new classes between actors and use cases. 
As  the  design  matures,  use  cases  and  associated  classes  are 
combined  into  sequence  diagrams  with  the  messages  (methods 
without  code)  between  objects  specified.  As  the  design  process 
progresses, other UML diagrams (e.g., collaboration, object, state, 
activity, etc.) may be supplied (note these are not considered for 
this paper). To achieve the first principle, we must integrate MAC 
into  the  process  of  designing/revising  UML  elements/diagrams.  
In the process, we augment the UML/software design process by 
providing security assurance rules (SARs) for these new security 
capabilities, which can be enforced during all phases of design.  
The  second  principle  addresses  the  question  of  how  to  assess 
security that is attained in the design. 
Principle 2: Security assurance is relative to the phase of software 
design and the chosen SARs. 
This principle stipulates that the security assurance be evaluated 
against the respective software design phase (e.g., use case, class, 
or sequence diagrams) to constantly enforce the SARs against the 
evolving design. As a design changes context from one diagram 
to  the  next  in  UML,  different  SARs  are  utilized  to  enforce  the 
security features for that phase of design. The SARs at each level 
may be stricter or more tolerant depending on the security policy 
that is available in the secure software design environment, e.g., 
in  the  closed  meta-policy  one  cannot  do  anything  except  the 
allowed  actions,  in  the  open  meta-policy  one  can  do  anything 
except the prohibited actions, and in the least privilege principle, 
one  should  be  granted  the  permissions  needed  for  his  required 
jobs  and  no  more.  The  granularity  level  of  SAR  checks  will  be 
dependent on the level of detail in the software design phase.   
The  third  principle  addresses  the  question  of  the  impact  of 
security design on software design. 
Principle  3:  The  security  incorporating  process  should  neither 
counter the intuition nor decrease the productivity of the software 
designer. 
This principle is often overlooked when security is discussed and 
implemented  in  practice.  The  MAC  model concerns the flow of 
information among subjects and “objects” via some “operations” 
(quoted for a MAC context), where an “object” is an information 
atom and an “operation” is an atomic action. This contrasts with 
the  OO  paradigm  where  object  means  an  instance  of  a  class 
containing  a  set  of  attributes  (with  possibly  different  security 
sensitive  levels)  and  operation  indicates  a  custom-definable 
action  for  a  specific  behavior  of  the  class.  Further,  each  OO 
attribute of an instance may refer to other attributes or instances 
of other classes, and each operation may perform atomic actions 
or call other operations (on itself or other objects). OO software 
designers emphasize encapsulation “who can use which methods 
(as the implementation of operations) of classes” as their security 
concern, not “who can read or write certain attributes”. Typically, 
only public methods of the class are accessible to outside entities 
which indirectly access private attributes (a good practice of class 
design).    Moreover,  during  initial  UML  design  for  class  and 
sequence  diagrams,  the  concern  is  with  the  intention  of  the 
operations  (i.e.,  the  behaviors  of  the  class)  as  captured  via  a 
method's  signature  (i.e.,  there  is  no  code).  Thus,  in  UML,  the 
security  consideration  is:  “who  can  exercise  which  behaviors  of 
the application (use cases) and class behaviors (methods),” which 
can be answered by drawing connections in UML diagrams (e.g., 
actor  to  use  case  in  use  case  diagrams,  or  message  passing  in 
sequence  diagrams).  If  we can incorporate security via SARs in 
these connections, it will naturally provide security checks during 
the  normal  activity  of  designers.  To  summarize,  to  adhere  to 
Principle 3, we must reinterpret MAC principles so that they can 
be more aptly applied to UML. 
3.2  Applying the MAC Model to OO Design 
In MAC, the access control is based on the relationship (s, op, o) 
which indicates that the subject s can perform the “operation” op 
(e.g., read, write, append, execute, etc.) on the “object” o (a piece 
of  atomic 
information  with  only  one  assigned  security 
classification).  While  this  approach  is  appropriate  for  relational 
database content, there are a number of reasons why this triple (s, 
op,  o) is inappropriate for OO design. First, an OO  object is an 
instance with many attributes, which may be simple or reference 
another object, each with possibly different security classification 
levels, and as such, this does not correlate to the single object o in 
the  MAC  triple.  Second,  the  MAC  operation  op  typically 
represents a set of standard operations (e.g., read, write, etc.) on 
the  object  o,  while  the  methods  (operations)  of  an  OO  class 
(instance) contain complex sets of operations of all types that are 
not  easily  applied  to  MAC  standard  operations.  Third,  the 
underlying basis of any OO design/application is the set of public 
methods  that  represent  its  behavior.  These  methods  may  be 
custom, part of standard libraries (e.g., string or math operations), 
or  conceptualized  in  abstract  classes.  Simplifying  this  method-
based approach in order to map it to the MAC triple would likely 
be an impossible task. 
As an alternative to literally applying the triple (s, op, o) of the 
MAC model to the OO paradigm, we propose using the constraint 
(ei, ej.behaviorjk) which specifies whether element ei can employ 
some  behavior  behaviorjk  of  element  ej.  Our  approach  is 
distinguished from others (e.g. [20, 25]) by conceptualizing (s, op, 
o)  in  a  manner  that  is  more  consistent  with  the  precepts  and 
principles  of 
the  OO  paradigm.  For  example,  use  case 
Add_Survey_Header  represents  one  behavior  of  the  “Survey 
Management” application (Figure 1). During use case design, it is 
possible  to  perceive  whether  actor  Senior_Staff  can  invoke  this 
behavior  depending  on  a  security  constraint  defined  on 
(Senior_Staff,  Add_Survey_Header)  which  can  be  verified  via  a 
specific SAR. Later, when the sequence diagram is being defined, 
the  OO  designer  can  explore  security  questions  such  as  “can 
Senior_Staff  employ  the  Survey_Title_Search  behavior  of  the 
class  Survey_List  by  invoking  the  behavior  On_Submit  of  the 
class Survey_Header_Add_Page.” 
4.  SECURITY ASSURANCE FOR UML 
In  this  section,  we  propose  security  assurance  rules,  SARs,  to 
enforce  MAC  for  UML.  The  SARs  are  assertions  based  on  the 
domination  of  security  levels  (clearance  dominates  clearance  or 
clearance  dominates  classification)  of  UML  modeling  elements, 
with 
the 
the  direction  of 
the  domination 
influenced  by 
connections  (relationships)  between  the  different  elements.  As 
given  in  Section  2,  each  relationship  (i.e.,  generalize,  include, 
extend, actor-use case connections, message passing, etc.) dictates 
the  direction  of  domination  of  security  levels.  As  a  designer  is 
defining and modifying UML diagrams, the SARs are constantly 
enabled  so  that  any  new  connections  between  existing  elements 
always satisfy domination.  When security violations are detected, 
the  designer  must  adjust  the  design.  To  organize  the  SARs,  we 
define three different security/software design tiers for the UML: 
Tier 1 in Section 4.1 focuses on the use case diagram; Tier 2 in 
Section 4.2 emphasizes the associations between the classes that 
are utilized by each use case; and, Tier 3 in Section 4.3 represents 
the creation of a UML sequence diagram with actor/method and 
method/method interactions. In the tiers, we focus on constraints 
such as (ei, ej.behaviorjk) which specifies whether element ei can 
employ  some  behavior  behaviorjk  of  element  ej  (see  Section  3.2 
again).  Lastly,  in  Section  4.4,  we  unify  the  SARs  into  two 
algorithms  for  security  assurance  that  traverses  the  connections 
between elements across use case, class, and sequence diagrams. 
To serve as a formal basis for the SARs, we introduce notation.  
First, we only consider basic UML element sets: use case set UC 
= {uc1, uc2, ...}, actor set AC = {ac1, ac2, ...}, class set Cl = {c1, 
c2, ...},  and method set M = {m1, m2, ...}. Each UML element is 
assigned  a  clearance  (CLR)  or  classification  (CLS)  from  the 
partially  ordered  set  Σ  =  {⊥=σ1,  σ2,  …,  σS}  where  the  order 
relation  σi  <  σj  (i  <  j)  means  the  security  level  σj  has  a  higher 
security concern than that of σi. Conventionally, we denote sli ≤ 
slj  (less than or equal) for sli  < slj  ∨ sli = slj and slj  ≥ sli (also 
called the “dominate” relation) for sli ≤ slj. In examples, we use Σ 
= {U, C, S, TS} with ⊥ = U < C < S < TS. We denote ac.CLR, 
uc.CLS, c.CLSmin, c.CLSmax and m.CLS as the CLR of actor ac, the 
CLS of use case uc, the min and max CLS of class c, and the CLS 
of method m, respectively. The value of ac.CLR is chosen by the 
designer  based  on  the  security  policy  to  reflect  the  CLR  of  the 
user that needs to employ some behaviors of the application (i.e., 
some  use  cases  connected  to  actor  ac)  when  taking  the  role  of 
actor ac. uc.CLS indicates the degree of security sensitivity of the 
behavior of the application represented by use case uc. The values 
of  c.CLSmin,  and  c.CLSmax  describe  the  range  of  the  security 
sensitivities for class c. And finally, m.CLS specifies the security 
sensitivity of the behavior of a class implemented in method m. 
4.1  Tier 1 MAC Security Assurance Rules  
This  section  considers  the  SARs  for  the  creation  of  use  case 
diagrams with actors, use cases, actor-use case associations, actor 
and  use  case  inheritance,  and  use  case  inclusion  and  extension 
relationships, which represents Tier 1. Actor-use case associations 
are  a  critical  link  between  actors  and  the  use  cases  that  they 
employ. For every actor acm that is associated with the use case 
uci  (as  a  behavior  of  the  application),  the  CLR  of  the  actor acm 
must dominate the CLS of the use case uci: 
SAR  AUC  (Actor  with Use case):  ∀actor acm and use case uci, 
acm  is  securely  (MAC)  associated  with  uci  ⇔  acm.CLR  ≥ 
uci.CLS. 
Example: In “Create New Survey” (Figure 1), the actor Staff is 
securely  associated  with  use  case  Add  Question.  Since 
Staff.CLR  =  C  ≥  Add_Question.CLS  =  C,  actor  Staff  can 
(securely)  perform  use  case  Add  Question.  However,  actor 
Staff  cannot  perform  Add  Survey  Header  and  Add  Special 
Question  since  Staff.CLR  =  C  <  Add_Survey_Header.CLS  = 
Add_Special_Question.CLS  =  S.  Only  actor  Senior  Staff  can 
perform Add Survey Header and Add Special Question, i.e., its 
CLR equals the CLS of the use cases (S).♦ 
The  SAR  AUC  is  very  important  to  verify  domination  among 
actors, methods, and use cases (see Section 4.3 – Tier 3), and for 
the algorithms in Section 4.4 for use case and sequence diagrams. 
The  next  SAR  is  used  whenever  two  actors  are  connected  with 
one  another  via  inheritance  with  the  intent  to  alert  the  software 
engineer  when  CLRs  are  in  conflict.  As  stated  in  [18,  p.2-136] 
(“An instance of a child can always be used where an instance of 
the  parent  is  expected”),  the  actor  inheritance  relationship  is 
defined  via  the  substitution  principle.  Hence,  we  focus  only  on 
actor  inheritance  for  specialization  (satisfying  the  substitution 
principle).  Namely,  for  two  actors acm  and  acn  connected by an 
inheritance  for  specialization  (the  arrow  from  acn  to  acm),  the 
CLR  of  the  child  actor  acn  must  dominate  the  CLR  the  parent 
actor acm: 
SAR AIS (Actor Inheritance for Specialization): ∀ actors acm and 
acn,  acn  securely  (MAC)  inherits  acm  (the  generalization 
arrow from acn to acm) ⇔ acn.CLR ≥ acm.CLR. 
Example: Actor Senior Staff securely inherits actor Staff in the 
use  case  diagram  “Create  New  Survey”  (Figure  1)  as 
Senior_Staff.CLR ≥ Staff.CLR.♦ 
In  MAC,  a  user  can  open  a  working  session  with  the  option  of 
choosing  any  CLR  (currently  active  CLR)  which is less than or 
equal  to  his  maximum  assigned  CLR.  When  the  user  takes  the 
role of the child actor acn, by inheritance, the role of the parent 
actor  acm  is  acquired,  which  we  suppose  is  directly  associated 
with uci. If there is no direct association from acn (child) to uci, 
then to employ uci, the user should be viewed from uci as having 
the CLR of acm.CLR (parent) instead of acn.CLS (child). Thus, if 
the  SAR  AUC  holds  for  (acm,  uci),  then  the  SAR  AIS  for  (acm, 
acn) guarantees the user with the role of the child acn can employ 
uci from the parent via an implicit (indirect) association. 
The next three SARs, UCIS, UCI, and UCE, are used whenever 