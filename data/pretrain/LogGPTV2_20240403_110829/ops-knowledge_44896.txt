User: Suppose I have a python twisted app with the standard Factory and Protocol subclasses. My Protocol subclass connectionMade() method launches a loopingCall that runs (say) every 5 minutes. I have two questions:

Suppose the connection gets lost. Yes I know that this will result in the connectionLost() method being called. But what happens the protocol object itself? When does that stop existing? Does it get garbage collected right away?
What happens to the loopingCall in that protocol? If I don't explicitly cancel it, does that mean it keeps running forever and prevents the protocol from getting garbage collected?
Assistant: Things get garbage collected when there are no more references to them, so I can't say when objects in your program will be collected.
However, I can tell you about the references kept from Twisted.
A Protocol connected to a Transport will have a reference that goes globals→reactor→transport→protocol.  When the transport is closed, the reference from the reactor to the transport is broken.  The reactor only references the transport to deliver events to it, and since a disconnected transport has no events to deliver, the reactor can drop it.  The protocol therefore no longer is referenced by the reactor.  At that point, if no other globals or active stack variables reference it, it will be collected.
A LoopingCall is referenced by globals→reactor→DelayedCall (the object returned by callLater)→LoopingCall.__call__ bound method→LoopingCall.  If the LoopingCall's f attribute (the callable it's calling) still references your Protocol, then yes, your Protocol object will continue to live in memory.  But, since it no longer has a useful transport, there's not that much you can do with it.