> int rc2_cc_set_key(
>       RC2_Schedule *cx,
>       const void *rawKey,
>       size_t keyLength)
> {
>       rc2_keyschedule(cx, rawKey, keyLength, keyLength*8);
>       return 0;
> }
>
> void rc2_cc_encrypt(RC2_Schedule *cx, const void *blockIn, void *blockOut)
> {
>       rc2_encrypt(cx, (const unsigned char *)blockIn, (unsigned char *)blockOut);
> }
>
> void rc2_cc_decrypt(RC2_Schedule *cx, const void *blockIn, void *blockOut)
> {
>       rc2_decrypt(cx, (unsigned char *)blockOut, (const unsigned char *)blockIn);
> }
>
root@kali:/media/sf_CTFs/checkpoint/Stateful_Keen# diff keen-master/id_us_a.asm stateful-keen/Source/id_us_a.asm
34a35
> rndindex2     dw      ?
99a101,110
> PROC    CP_InitRndT seed:word
>       uses    si,di
>       public  CP_InitRndT
>
>       mov     ax,[seed]
>       and     ax,0ffh
>       mov     [rndindex2],ax
>
>       ret
> ENDP
117a129,141
>       ret
>
> ENDP
> PROC  CP_RndT
>       public  CP_RndT
>
>       mov     bx,[rndindex2]
>       mov     al,[rndtable+BX]
>       inc     bx
>       and     bx,0ffh
>       mov     [rndindex2],bx
>       xor     ah,ah
>
root@kali:/media/sf_CTFs/checkpoint/Stateful_Keen# diff keen-master/kd_def.h stateful-keen/Source/kd_def.h
27c27
 #define CREDITS 0
37,38d36
   int         chosenshapenum;
102a102,104
>       unsigned char  key[16];
>       int key_index;
>       unsigned char second_flag[24];
366c368
 void MoveGfxDst(short x, short y);
root@kali:/media/sf_CTFs/checkpoint/Stateful_Keen# diff keen-master/kd_demo.c stateful-keen/Source/kd_demo.c
68a69,70
>       unsigned char arr2[24] = {0x61, 0x71, 0xf9, 0x53, 0xa6, 0x63, 0x65, 0x2, 0xc7, 0x15, 0xf0, 0x70, 0xf1, 0x95,
>               0x66, 0x1, 0x6, 0x50, 0x17, 0x35, 0x1c, 0x12, 0xc0, 0xfb};
75a78,79
>
>       memcpy(gamestate.second_flag,arr2,24);
119c123
       US_CenterWindow (40,3);
121c125
       US_PrintCentered("Game Over! No flag for you!");
146,147c150,151
       US_CenterWindow(40,7);
>       US_CPrint("Status Window - the flag isn't here (;");
522c526
                               US_DisplayHighScores(-1,NULL);
root@kali:/media/sf_CTFs/checkpoint/Stateful_Keen# diff keen-master/kd_keen.c stateful-keen/Source/kd_keen.c
1658a1659,1669
>       switch(gamestate.mapon){
>       case 4:
>               ob->state->chosenshapenum = s_keendie3.rightshapenum;
>               gamestate.key_index = gamestate.mapon;
>               break;
>       case 14:
>               ob->state->chosenshapenum = s_keendie3.leftshapenum;
>               gamestate.key_index = 6;
>               break;
>       }
>
1754a1766,1783
>       if (ob->state == &s_keenwalk1) {
>               ob->state->chosenshapenum = s_keenwalk1.rightshapenum;
>               gamestate.key_index = 8;
>       }
>       else if (ob->state == &s_keenwalk2) {
>               ob->state->chosenshapenum = s_keenwalk2.rightshapenum;
>               gamestate.key_index = 10;
>       }
>       else if (ob->state == &s_keenwalk3) {
>               ob->state->chosenshapenum = s_keenwalk3.rightshapenum;
>               gamestate.key_index = 12;
>       }
>       else if (ob->state == &s_keenwalk4) {
>               ob->state->chosenshapenum = s_keenwalk4.rightshapenum;
>               gamestate.key_index = 14;
>       }
>
>
1815a1845,1856
>               if (ob->state  == &s_keenjumpup1) {
>                       switch(gamestate.mapon){
>                       case 1:
>                               ob->state->chosenshapenum = s_keenjumpup1.rightshapenum;
>                               gamestate.key_index = gamestate.mapon-1;
>                               break;
>                       case 2:
>                               ob->state->chosenshapenum = s_keenjumpup1.leftshapenum;
>                               gamestate.key_index = gamestate.mapon;
>                               break;
>                       }
>               }
root@kali:/media/sf_CTFs/checkpoint/Stateful_Keen# diff keen-master/kd_play.c stateful-keen/Source/kd_play.c
78,83c78,83
 "The Land of CSA",
> "CSA HINT: I",
> "CSA HINT: o",
> "CSA HINT: A",
> "CSA HINT: 8",
> "CSA HINT: e",
85c85
 "CSA HINT: 7",
87,88c87,88
 "CSA HINT: h",
> "CSA HINT: R",
90c90
 "CSA HINT: c",
92,94c92,94
 "CSA HINT: !",
> "CSA HINT: L",
> "CSA HINT: _",
1298c1298
       ob->state->chosenshapenum=-1;
1375c1375,1381
state == state)
---
>               if (ob->state == state) {
>                       if (ob==player && ob->state->chosenshapenum>0 && gamestate.key_index                               CP_InitRndT((word)ob->state->chosenshapenum);
>                               gamestate.key[gamestate.key_index] = CP_RndT();
>                               gamestate.key_index++;
>                               gamestate.key[gamestate.key_index] = CP_RndT();
>                       }
1376a1383
>               }
1837a1845,1847
>       RC2_Schedule cx;
>       char res[64];
>
1920a1931,1937
>       memset(res,0,64);
>       rc2_cc_set_key(&cx,gamestate.key,16);
>       for (i=0;i               rc2_cc_decrypt(&cx, gamestate.second_flag+i, res+i);
>       }
>
>
1925c1942
       US_CheckHighScore (gamestate.score,cities,res);
```
In summary, the challenge creators have added some kind of decryption logic to the game.
When the gave is over, the flag should be displayed in the high score screen:
```c
void GameLoop (void)
{
	//...
	RC2_Schedule cx;
	char res[64];
	// ...
	do
	{
startlevel:
		//...
	} while (gamestate.lives>-1 && playstate!=victorious);
	GameOver ();
done:
	memset(res,0,64);
	rc2_cc_set_key(&cx,gamestate.key,16);
	for (i=0;istate->chosenshapenum = s_keendie3.rightshapenum;
		gamestate.key_index = gamestate.mapon;
		break;
	case 14:
		ob->state->chosenshapenum = s_keendie3.leftshapenum;				
		gamestate.key_index = 6;
		break;
	}
	ob++;			// shut up compiler
	playstate = died;
}
void KeenWalkThink (objtype *ob)
{
	int move;
	if (ob->state == &s_keenwalk1) {
		ob->state->chosenshapenum = s_keenwalk1.rightshapenum;
		gamestate.key_index = 8;
	}
	else if (ob->state == &s_keenwalk2) {
		ob->state->chosenshapenum = s_keenwalk2.rightshapenum;
		gamestate.key_index = 10;
	}
	else if (ob->state == &s_keenwalk3) {
		ob->state->chosenshapenum = s_keenwalk3.rightshapenum;
		gamestate.key_index = 12;
	}
	else if (ob->state == &s_keenwalk4) {
		ob->state->chosenshapenum = s_keenwalk4.rightshapenum;
		gamestate.key_index = 14;
	}
  //...
}
void	KeenAirThink		(objtype *ob)
{
	if (jumptime)
	{
		if (ob->state  == &s_keenjumpup1) {
			switch(gamestate.mapon){
			case 1:
				ob->state->chosenshapenum = s_keenjumpup1.rightshapenum;
				gamestate.key_index = gamestate.mapon-1;
				break;
			case 2:
				ob->state->chosenshapenum = s_keenjumpup1.leftshapenum;				
				gamestate.key_index = gamestate.mapon;
				break;
			}
		}
    //...
  }
  //...
}
```
And in `DoActor()`, the `key_index` is used in order to initialize `key`:
```c
if (ob->state == state) {
			if (ob==player && ob->state->chosenshapenum>0 && gamestate.key_indexstate->chosenshapenum);
				gamestate.key[gamestate.key_index] = CP_RndT(); 				
				gamestate.key_index++;
				gamestate.key[gamestate.key_index] = CP_RndT();
			}
			ob->state = state->nextstate;	// go to next state
		}
```
Eventually, `key` is used to decrypt `second_flag` into `res`, and `res` is passed to the function which displays the high score:
```c
memset(res,0,64);
rc2_cc_set_key(&cx,gamestate.key,16);
for (i=0;i<24;i=i+8) {