non-trivial term to compute is 𝐶 that involves three signed compar-
isons over Z. We emulate these comparisons using calls to F int,𝛿
DReLU
where 𝛿 is large enough to ensure that there are no overflows or
underflows. It is not too hard to see that −2𝑑 + 2 ≤ 𝐴 ≤ 2𝑑 − 2
and hence, −3𝑑 + 2 ≤ 𝐴 − 𝑑, 𝐴, 𝐴 + 𝑑 ≤ 3𝑑 − 2. Hence, we set
𝛿 = ⌈log 6𝑑⌉. Now, with this value of 𝛿, the term 𝐶 can we re-written
as (DReLU(𝐴 − 𝑑) ⊕ 1) + (DReLU(𝐴) ⊕ 1) + (DReLU(𝐴 + 𝑑) ⊕ 1),
which can be computed using three calls to F int,𝛿
DReLU (Step 19) and
F 𝑛
B2A (Step 20) each. Finally, note that to compute 𝐶 we need arith-
metic shares of 𝐴 over the ring ZΔ, Δ = 2𝛿. And this requires shares
of corr over the same ring. Hence, we compute shares of corr over
both Z𝑛 and ZΔ (Step 15). Due to space constraints, we describe
the protocol formally in Appendix D along with its communication
complexity. Also, Table 3 provides theoretical and concrete com-
munication numbers for division in both Z𝐿 and Z𝑛, as well as a
comparison with garbled circuits.
4.2.3 Truncation in rings with special structure. It is easy to
see that truncation by 𝑠 in general rings can be done by performing
a division by 𝑑 = 2𝑠. However, we can omit a call to F int,𝛿
DReLU and
F 𝑛
B2A when the underlying ring and 𝑑 satisfy a relation. Specifically,
if we have 2 · 𝑛0 ≤ 𝑑 = 2𝑠, then 𝐴 is always greater than equal
to −𝑑, where 𝑛0, 𝐴 ∈ Z are as defined in Theorem 4.1. Thus, the
third comparison (𝐴  0 and 𝑧 = 𝑦, if 𝑤 ≤ 0.
Define 𝑧1 = 𝑎1 and 𝑧𝑖 = gt(𝑎𝑖, 𝑧𝑖−1), recursively for all 2 ≤ 𝑖 ≤ 𝑑.
Now, Maxpool𝑑(𝑎1, · · · , 𝑎𝑑) = 𝑧𝑑.
We now describe a protocol such that parties begin with arith-
metic shares (over Z𝐿) of 𝑎𝑖, for all 𝑖 ∈ [𝑑] and end the protocol with
arithmetic shares (over Z𝐿) of Maxpool𝑑(𝑎1, · · · , 𝑎𝑑). For simplic-
ity, we describe how 𝑃0 and 𝑃1 can compute shares of 𝑧 = gt(𝑥, 𝑦)
(beginning with the shares of 𝑥 and 𝑦). It is easy to see then how
on inputs ⟨𝑤⟩𝐿
𝑖=1⟨𝑎𝑖⟩𝐿
DIV
DIV
𝑏 . Finally, parties output ⟨𝑧⟩𝐿
𝑏 = ⟨𝑥⟩𝐿
DReLU with input ⟨𝑤⟩𝐿
MUX with input ⟨𝑤⟩𝐿
𝑏 = ⟨𝑦⟩𝐿
they can compute Maxpool𝑑. First, parties locally compute shares
𝑏 − ⟨𝑦⟩𝐿
𝑏 , for 𝑏 ∈ {0, 1}).
of 𝑤 = 𝑥 − 𝑦 (i.e., 𝑃𝑏 computes ⟨𝑤⟩𝐿
𝑏 to learn output ⟨𝑣⟩𝐵
Next, they invoke F int,ℓ
𝑏 .
𝑏 and ⟨𝑣⟩𝐵
Now, they invoke F 𝐿
𝑏 to learn output
⟨𝑡⟩𝐿
𝑏 + ⟨𝑡⟩𝐿
𝑏 . The correctness
and security of the protocol follows in a straightforward manner.
Computing Maxpool𝑑 is done using 𝑑 − 1 invocations of the above
sub-protocol in 𝑑 − 1 sequential steps.
Argmax𝑑(𝑎1, · · · , 𝑎𝑑) is defined similar to Maxpool𝑑(𝑎1, · · · , 𝑎𝑑),
except that its output is an index 𝑖∗ s.t. 𝑎𝑖∗ = Maxpool𝑑(𝑎1, · · · , 𝑎𝑑).
Argmax𝑑 can be computed securely similar to Maxpool𝑑(𝑎1, · · · , 𝑎𝑑).
6 IMPLEMENTATION
1
1
We implement our cryptographic protocols in a library and inte-
grate them into the CrypTFlow framework [1, 45] as a new crypto-
graphic backend. CrypTFlow compiles high-level TensorFlow [3]
inference code to secure computation protocols using its frontend
Athos, that are then executed by its cryptographic backends. We
modify the truncation behavior of Athos in support of faithful fixed-
point arithmetic. We start by describing the implementation of our
cryptographic library, followed by the modifications that we made
to Athos.
6.1 Cryptographic backend
To implement our protocols, we build upon the(cid:0)2
mentation from EMP [62] and extend it to(cid:0)𝑘
Oblivious Transfer. (cid:0)𝑘
(cid:1)-OTℓ imple-
(cid:1)-OTℓ using the proto-
(cid:1)-OTℓ requires a correlation robust func-
col from [44]. Our linear-layer implementation in SCIHE is based on
SEAL/Delphi [2, 58] and in SCIOT is based on EMP. All our protocol
implementations are multi-threaded.
(cid:1)-OT8).
(cid:1)-OTℓ (e.g.
tion to mask the sender’s messages in the OT extension protocol,
256 (re-keyed AES with 256-bit key)9 to instantiate
and we use AESRK
it as in [23, 25]. We incorporated the optimizations from [33, 34]
256 calls. This leads
for AES key expansion and pipelining these AESRK
to roughly 6× improvement in the performance of AESRK
256 calls,
considerably improving the overall execution time of(cid:0)𝑘
2.7× over LAN for(cid:0)16
the computational cost. Our protocol makes ℓ/𝑚 calls to(cid:0)𝑀
(cid:1)-OT2
techniques, generating an instance of(cid:0)𝑀
(cid:1)-OT2 requires 6 AESFK
Millionaires’ protocol. Recall that 𝑚 is a parameter in our proto-
col Πℓ,𝑚
MILL. While we discussed the dependence of communication
complexity on 𝑚 in Section 3.1.2, here we discuss its influence on
(after merging steps 9&10), where 𝑀 = 2𝑚. Using OT extension
256
and (𝑀+1) AESRK
256 evaluations. Thus, the computational cost grows
super-polynomially with 𝑚. We note that for ℓ = 32, even though
communication is minimized for 𝑚 = 7, empirically we observe
that 𝑚 = 4 gives us the best performance under both LAN and
WAN settings (communication in this case is about 30% more than
when 𝑚 = 7 but computation is ≈ 3× lower).
1
1
1
1
1
9There are two types of AES in MPC applications - fixed-key (FK) and re-keyed (RK) [10,
35]. While the former runs key schedule only once and is more efficient, the latter
generates a new key schedule for every invocation and is required in this application.
10
Implementing linear layers in SCIHE. To implement the linear
layers in SCIHE, we build upon the Delphi implementation [2, 49],