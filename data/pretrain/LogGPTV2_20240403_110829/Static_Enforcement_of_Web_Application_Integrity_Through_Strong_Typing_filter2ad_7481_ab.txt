the range of possible values that can be represented. For
instance, the MimeType, CharSet, and Language types
are examples of enumerations that strictly limit the set
of possible values the attribute can take to legal values.
Standard (X)HTML element attributes (e.g., id, class,
style) are represented with the NodeAttr type. Op-
tional attributes are represented using either the Maybe
type,3 or as an empty list if multiple elements are al-
lowed.
Note that it is possible for a Document to represent
an (X)HTML document that is not necessarily consistent
with the respective W3C grammars that specify the set of
well-formed documents. One example is that any Node
instantiation may appear as the child of any other Node
that can hold children, which violates the ofﬁcial gram-
mars in several instances. Strict conformance with the
W3C standards is not, however, our goal.4
Instead, the typing scheme presented here allows our
framework to specify a separation between the structure
and the content of the documents a web application gen-
erates. More precisely, the dynamic data that enters a
web application as part of an HTTP request (e.g., as a
GET or POST parameter) can indirectly inﬂuence the
structure of a document. For instance, a search request
to a web application may result in a variable number of
3Maybe allows for the absence of a value, as Haskell does not pos-
sess nullable types. For example, the type Maybe a can be either
Just "..." or Nothing.
4Indeed, standards-conforming documents have been shown to be
difﬁcult to represent in a functional language [12].
class Render a where
render :: a -> String
instance Render AttrValue where
render = quoteAttr
quoteAttr :: AttrValue -> String
quoteAttr a = foldl’ step [] (attrValue a)
step acc c | c == ’’ = acc ++ "&gt;"
| c == ’&’ = acc ++ "&amp;"
| c == ’"’ = acc ++ "&quot;"
| otherwise = acc ++ [c]
Figure 6: Render typeclass deﬁnition and (simpliﬁed)
instance example. Here, quoteAttr performs a left fold
over attribute values using foldl’, which applies the
step function to each character of the string and ac-
cumulates the result. The deﬁnition of step speciﬁes
a number of guards, where | c == ’
Now, suppose an attacker submitted the following
string as part of a request such that it was reﬂected to
another client as the value of the hidden input ﬁeld:
"/>
To prevent such an injection from occurring,
the
render function for the AttrValue class applies a sani-
tization function on the string wrapped by AttrValue.
Any occurrence of an unsafe character is replaced by
an equivalent HTML entity encoding that can safely ap-
pear as part of an attribute value.6 Similar render func-
tions are deﬁned for the set of types that can comprise a
Document.
Therefore, to prepare a Document as part of an HTTP
response to a client, the application server applies the
render function to the document, which recursively
converts the data structure into an (X)HTML document.
As part of this process, the content of the document is
sanitized by type-speciﬁc render functions, ensuring
that client-supplied input to the web application cannot
modify the document structure in such a way as to result
in a client-side code injection.
4 SQL query structure
Similarly to the case of documents, SQL queries are
given structure in our framework through the application
of strong typing rules that control how the structure of
the query can be combined with dynamic data. In this
section, we examine the structure of SQL queries and
discuss two mechanisms by which SQL query integrity
is enforced under the framework.
6In the real implementation, the sanitization function is somewhat
more complex, as there are multiple encodings by which an unsafe
character can be injected. The example function given here is sim-
pliﬁed for the purposes of presentation.
INSERT INTO users(login, passwd)
VALUES(?, ?)
SELECT * FROM users WHERE login=? AND passwd=?
UPDATE users SET passwd=? WHERE login=?
SELECT * FROM users
WHERE login=’admin’ AND passwd=’test’
Figure 8: Examples of prepared statements, where “?”
characters serve as placeholders for data substitution.
UPDATE users SET passwd=’$passwd’
WHERE login=’$login’
Figure 7: Examples of SQL queries.
4.1 Query speciﬁcation
SQL queries, as shown in Figure 7, are composed of
clauses, predicates, and expressions. For instance, a
clause might be SELECT * or UPDATE users. An exam-
ple of a predicate is login=’admin’, where ’admin’ is
an expression. Clauses, predicates, and expressions are
themselves composed of static tokens, such as keywords
(SELECT) and operators (=), and dynamic tokens, such as
table identiﬁers (users) or data values (’admin’).
Typically,
the structure of a SQL query is ﬁxed.7
Speciﬁcally, a query will have a static keyword denot-
ing the operation to perform, will reference a static set
of tables and ﬁelds, and specify a ﬁxed set of predicates.
Generally, the only components of a query that change
from one execution to the next are data values, and, even
then, their number and placement remain ﬁxed.
SQL injection attacks rely upon the ability of the at-
tacker to modify the structure of a query in order to per-
form a malicious action. When SQL queries are con-
structed using string operations without sufﬁcient saniti-
zation applied to user input, such attacks become trivial.
For instance, consider the UPDATE query shown in Fig-
ure 7. If an attacker were to supply the value “quux’ OR
login=’admin” for the $login variable, the following
query would result:
UPDATE users SET passwd=’foo’
WHERE login=’quux’ OR login=’admin’
Because the attacker was able to inject single quotes,
which serve as delimiters for data values, the structure of
the query was changed, resulting in a privilege escalation
attack.
4.2
Integrity enforcement with static query
structure
In contrast to the case of document integrity enforce-
ment, a well-known solution exists for specifying SQL
7This is not always the case, but the case of dynamic query structure
will be considered later in this section.
query structure: prepared statements. Prepared state-
ments are a form of database query consisting of a
parameterized query template containing placeholders
where dynamic data should be substituted. An example
is shown in Figure 8, where the placeholders are signiﬁed
by the “?” character.
A prepared statement is typically parsed and con-
structed prior to execution, and stored until needed.
When an actual query is to be issued, variables that may
contain client-supplied data are bound to the statement.
Since the query has already been parsed and the place-
holders speciﬁed, the structure of the query cannot be
modiﬁed by the traditional means of providing malicious
input designed be interpreted as part of the query.
In
the case of the injection attack described previously, the
result would be as the following (note that the injected
single quotes have been escaped):
UPDATE users SET passwd=’foo’
WHERE login=’quux’’ OR login=’’admin’
From our perspective, the query has been typed as a
composition of static and dynamic elements; it is ex-
actly this distinction between structure and content that
we wish to enforce. Haskell’s database library (HDBC),
as do most other languages, supports the use of prepared
statements. Therefore, the framework exports functions
that allow a web application to associate prepared state-
ments with a unique identiﬁer in the AppConfig type.
During request processing, a document generator can
then retrieve a prepared statement using the identiﬁer,
bind values to it, and execute queries that are not vul-
nerable to injection attacks.
One detail remains, however. The HDBC library also
provides functions allowing traditional ad hoc queries
that are assembled as concatenations of strings to be exe-
cuted. Without any other modiﬁcation to the framework,
a web application developer would be free to directly call
these functions and bypass the protections afforded by
the framework. Therefore, an additional component is
required to encapsulate the HDBC interface and prevent
execution of these unsafe functions. This component
takes the form of a monad transformer AppIO, which
simply wraps the IO monad and exposes only those func-
tions that are considered safe to execute. The structure
of this stack is shown in Figure 9. In this environment,
within which all web applications using the framework
operate, unsafe database execution functions are inacces-
sible, since they will fail to type-check. Thus, assuming
data Select = Select {
sFields :: [Expr],
sTables :: [Expr],
sCons :: Maybe Expr,
sGrpFields :: [Expr],
sGrpCons :: Maybe Expr,
sOrdFields :: [Expr],
sLimit :: Maybe Int,
sOffset :: Maybe Int,
sDistinct :: Bool
}
data Expr = EXPR TABLE Table
| EXPR FIELD Field
| EXPR DATA String
| EXPR NOT Expr
| EXPR OR Expr Expr
| EXPR AND Expr Expr
| ...
data Table = Table {
tName :: String,
tAlias :: Maybe String
}
data Field = Field {
fName :: String,
fAlias :: Maybe String
}
Figure 10: Deﬁnition for the Select type.
Figure 10 shows an example of the type representing a
SELECT query.
To populate instances of these types, the interface pro-
vides a set of combinators, or higher-order functions, that
can be chained together. These combinators, which as-
sume names similar to SQL keywords, implement an em-
bedded domain-speciﬁc language (DSL) that allows ap-
plication developers to naturally specify dynamic queries
within the framework. For instance, a query could be
constructed using the following sequence of function in-
vocations:
qSelect [qField "*"] >>=
qFrom [qTable "users"] >>=
qWhere (((qField "login") == (qData "admin")) &&
((qField "passwd") == (qData "test")))
Similar to the case of the Document type, queries con-
structed in this manner are transformed into raw SQL
statements solely by the framework.8 Therefore, the
types that represent queries also implement the Render
8Note that, as in the case of web documents, we do not attempt to
enforce the generation of correct SQL, but rather focus on preventing
attacks by preserving query structures speciﬁed by the developer.
Figure 9: Graphical representation of the monad stack
within which framework applications execute.
The
AppIO monad encapsulates applications, preventing
them from calling unsafe functions within the IO monad.
the correctness of the HDBC prepared statement inter-
face, web applications developed using the framework
are not vulnerable to SQL injection.
4.3
Integrity enforcement with dynamic
query structure
Though most SQL queries possess a ﬁxed structure, there
does exist a small class of SQL queries that exhibit dy-
namic structure. For instance, many SQL database im-
plementations provide a set membership operator, where
queries of the form
SELECT * FROM users WHERE
login IN (’admin’, ’developer’, ’tester’)
can be expressed. In this case, the size of the set of data
values can often change at runtime. Another example
is the case where the structure of queries is determined
by the user, for instance through a custom search form
where many different combinations of predicates can
be dynamically expressed. Unfortunately, since these
queries cannot be represented using prepared statements,
they cannot be protected using the monadic encapsula-
tion technique described previously.
Therefore, a second database interface is exposed by
the framework to the application developers. Instead of
relying upon prepared statements, this interface allows
developers to dynamically construct queries as a tree of
algebraic data types as in the case of web documents.
Context
Semantics
Document nodes
Document node attributes
Document text
URL components
SQL static value
SQL data value
Conversion to static string
Encoding of HTML entities
Encoding of HTML entities
Encoding of HTML entities, percent encoding
Removal of spaces, comments, quotes
Escaping of quotes
Table 1: Example contexts for which speciﬁc sanitization functions are applied, and the semantics of those sanitization
functions under various encodings.
typeclass. Consequently, sanitization functions must be
applied to each of the ﬁelds comprising the query types,
such that the intended structure of the query cannot be
modiﬁed. This can be accomplished by enforcing the
conditions that no data value may contain an unescaped
single quote, and that all remaining query components
may not contain spaces, single quotes, or character signi-
fying the beginning of a comment. Assuming that these
sanitization functions are correct, this construction ren-
ders applications developed under the framework invul-
nerable to SQL injection attacks while allowing for more
powerful query speciﬁcations.
5 Evaluation
To demonstrate that web applications developed using