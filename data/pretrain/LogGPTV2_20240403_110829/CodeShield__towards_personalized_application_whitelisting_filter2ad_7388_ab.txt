system attempts to load a program that is not on the whitelist, the
loading is blocked, and the user is notiﬁed about this event through
the notiﬁcation area on the task bar as shown in Figure 1. If the user
really wants to run the program, the user recognizes that a block has
occurred and can then switch the system into installation mode, and
repeats the action to run the program.
Entering installation mode should be achieved through a trusted
path mechanism to prevent malicious code from causing the sys-
tem to enter installation mode without user consent. We investigate
two approaches for entering the installation mode. The preferred
approach is to have the system reboot ﬁrst before it can enter in-
stallation mode. In the user study, we also evaluate a secondary
mechanism which will enter installation mode without a reboot.
Requiring a reboot has a number of signiﬁcant advantages. First,
when malicious code comes in through vulnerabilities in running
processes, our system can stop the future loading of any malicious
binary programs that have been written to disk, however the ma-
licious code is still in memory. A reboot clears out any malicious
code that might be in memory before the system enters installation
mode. Second, when a system reboots, the number of applications
that are running is typically smallest, hence the vulnerability sur-
face of the system is also minimized.
Last but not least, introducing new executables into a system is
one event that signiﬁcantly puts the system at risk. A reboot in-
tentionally makes this potentially dangerous event distinct from the
normal usage of the system. This hopefully is able to capture the
user’s attention and highlight the fact that this action introduces
signiﬁcant risk to the host. We believe that the action of entering
installation mode must have a certain degree of inconvenience, to
serve as a cost that the user has to pay for carrying out the ac-
tion of adding new software to the system. Allowing a system to
easily enter installation mode with little or no inconvenience will
cause users to enter installation mode casually, and sometimes un-
necessarily. Our user study shows that when given the option of
switching into installation mode without rebooting, users enter in-
stallation mode about 3 times as often as the users with only the
reboot option.
Our user interaction design represents a paradigm shift from the
standard approach. Instead of prompting the user to make a deci-
sion, the system makes the decision to block the execution. This
avoids prompting the users frequently and conditioning them to
allow all prompts just so they can continue their ﬂow.
Instead,
the system allows them to continue their ﬂow without interruption.
However, if the user really needs to carry out the action, the user
can. Users are not “put on the spot” to make the security decision
and can take time to make it. Furthermore, in this design, the more
dangerous option of entering installation mode requires an extra
step to occur. The “path of least resistance” is the safer option.
4. CODESHIELD
We propose CodeShield, an approach to implement PAW on
Windows hosts.
4.1 The Design
We now present our design of CodeShield. A summary of the
model, which can be presented to users as a high-level description
of the model, is as follows:
New programs cannot be executed in normal mode. In
order to install or execute a new program on the sys-
tem, enter installation mode.
The detailed workings of the model are summarized as follows.
• The operating system is in one of two modes: normal or in-
stallation. Switching the system from normal mode to in-
stallation mode can occur only through a trusted path mech-
anism.
• When the system is in normal mode, a few specially identi-
ﬁed trusted services are marked as trusted installers. These
typically include the operating system updater.
282
• The system maintains a list of public keys for trusted soft-
ware vendors. When a signed program is loaded during in-
stallation mode, the signature is added to the list of trusted
public keys.
• The system maintains a whitelist of allowed programs. All
programs on a system before CodeShield ﬁrst runs are con-
sidered to be on the whitelist. Any program created, updated,
or loaded by a trusted installer or during installation mode
is added to the whitelist. Any program that is signed by a
trusted public key is added to the whitelist.
• A program on the whitelist that is modiﬁed in normal mode
by a process that is not a trusted installer, is removed from
the whitelist.
• In normal mode, when a process that is not a trusted installer
attempts to load a program not on the whitelist, the loading
is stopped.
4.2 Trusted Certiﬁcates and Updates
Our design maintains a list of certiﬁcates for trusted vendors and
automatically allows programs signed by one of them to be added
to the whitelist. Without a mechanism like this, every update must
be treated as a new installation since updates will modify executa-
bles. We point out that maintaining a list of trusted certiﬁcates
alone, without the normal-and-installation mode design, is insufﬁ-
cient in today’s end-user environments. First, not all programs are
signed, and these unsigned programs need to be handled. Second,
even when all programs are signed, this only changes the problem
of whitelisting programs to that of whitelisting certiﬁcates, and the
challenges of helping users manage the whitelist remain.
Based on the results of our user study, we have found that most
popular applications which are performing updates do sign all their
binaries. Perhaps software vendors recognize that the update pro-
cess needs to be cryptographically protected to prevent malware
from exploiting it. Software packages that do not use digital sig-
natures tend to have an update process that is similar to software
installation, i.e., downloading a new package and having the user
manually execute it. The fact that signing software is becoming
more prevalent helps to allow CodeShield to handle updates for
software packages once trust has been established in a digital sig-
nature. Experiences with signatures will be discussed more in Sec-
tion 6.
4.3 Implementation
We have implemented CodeShield on Microsoft Windows op-
erating systems. Our implementation works under XP, Vista and
Windows 7, and controls the loading of binary programs (includ-
ing executables and libraries). Our goal with this implementation
is to evaluate whether our design is effective in preventing existing
attacks and to what degree it is usable.
is
Our implementation of CodeShield has two parts: a kernel-space
ﬁlesystem miniﬁlter driver and a user-space client. The miniﬁlter
driver is inserted in the stack of the Windows IO Manager, it gets
its name from the fact that it can ﬁlter IO Request Packets (IRPs)
which are used to handle data between the disk and the OS. It in-
tercepts all communications to the disk and takes action for certain
events. This is the same mechanism that disk encryption and an-
tivirus applications employ.
Blocking Execution CodeShield needs to get
into the de-
cision path of when to allow code to load. Microsoft’s
recommendation
to
that “Intercepting
block the loading of code modules,
IRP_ACQUIRE_FOR_SECTION_SYNCHRONIZATION
and
independent
software
vendors
for
returning STATUS_ACCESS_DENIED when sections are loaded
for PAGE_EXECUTE permission is an appropriate approach.” [5]
The IRP to synchronize a section from disk into memory with the
execute ﬂag set indicates that a ﬁle is being loaded for execution.
On versions of Windows with Data Execution Prevention (DEP)
turned on, this is a requirement for execution. CodeShield applies
the whitelisting policy when intercepting these events, and prevents
the synchronization from disk to memory if the ﬁle is not on the
whitelist.
Detecting modiﬁcations and maintaining the whitelist The
miniﬁlter intercepts ﬁle system events by catching a set of IRPs
that indicate that a write has occurred. Our implementation uses
the alternate data streams associated with ﬁles, which are part of
NTFS, to identify whether the ﬁles are on the whitelist or not. In
this way the whitelist information is attached to a ﬁle and follows
the ﬁle even if it moves. We can choose to mark each ﬁle that is
on the whitelist, or each ﬁle that is not. We chose the latter in our
implementation to avoid having to scan the hard drive to mark ev-
ery ﬁle when CodeShield ﬁrst installs. For each ﬁle that has been
written, CodeShield writes in the alternate data stream what pro-
cesses have contaminated that ﬁle. Any such contaminated ﬁles are
considered not on the whitelist. When a ﬁle is accessed in installa-
tion mode, by a trusted installer, or if the ﬁle is signed by a trusted
certiﬁcate, this contamination is removed. When the kernel is not
compromised, all requests to modify anything on disk pass through
the CodeShield miniﬁlter which can deny access to the alternate
data streams utilized by our system.
While CodeShield marks ﬁles that are not on the whitelist, it is
maintaining a logical whitelist. CodeShield marks a ﬁle not be-
cause the ﬁle is on some pre-deﬁned blacklist, but rather because
the ﬁle has been written to (i.e., either newly created or modiﬁed),
and hence should not be on the whitelist. Any ﬁle without con-
tamination is either already on the system before CodeShield is in-
stalled and has not been changed, or has been added to the whitelist
by CodeShield.
CodeShield currently only supports a system where we can write
to meta-data for ﬁles, this is only feasible for the local disk. Since
our target is normal end-users and a proof of concept, this is a rea-
sonable constraint. However for networked drives, CDs, and other
types of media, this may not be reasonable. One possibility is to
have CodeShield maintain an extended whitelist with hashes of
whitelisted ﬁles that are not local to the system or on drives that
don’t support our meta-data.
User Interaction CodeShield needs to interact with users. There
is a dedicated user space client which displays dialog boxes, task
bar notiﬁcations, and sends responses back to the kernel mode
miniﬁlter driver. The client displays a notiﬁcation from the task
bar whenever a load is blocked as seen in Figure 1. Through the
client, the user can initiate a reboot/switch into installation mode,
examine the list of trusted certiﬁcates, the list of events moni-
tored by CodeShield including blocked executions, ﬁles added to
the whitelist, and writes to certain ﬁles (i.e., removal from the
whitelist). Due to the availability of APIs, we chose to handle the
processing and veriﬁcation of all digital signatures in the user space
client, which reports information back to the miniﬁlter driver.
Installation Mode. Although our design calls for a Trusted Path
mechanism to enter installation mode, we cannot tap into Win-
dows’ Secure Desktop to do it. In our current implementation, the
“reboot into installation mode” mechanism utilizes a registry key
that is managed by the miniﬁlter driver to pass the intent to enter
installation mode through the reboot. This registry key is protected
in the same way that the alternate data streams are, by denying ac-
cess to write to the registry key, this time using a RegistryCallback
routine from the driver. In our user study, we also evaluate a version
that allows a user to switch directly into installation mode.
Whichever way a system enters installation mode, a user speci-
ﬁes a duration for how long they expected to be installing software.
When this time has expired, the system attempts to exit installation
mode, however, if the user is still installing they have the opportu-
nity to stay in installation mode by specifying how long they would
like to remain in installation mode. If they fail to respond to the
dialogue, then after a preset amount of time the system simply ex-
its installation mode. The amount of time ranges from 5 minutes
to 30 minutes. A user gains little by always responding to stay in
installation mode because they will be bothered again soon to exit,
and typically the next needed installation is likely days if not weeks
away.
5. SECURITY EVALUATION
In this section, we evaluate the security protection provided by
CodeShield. In Section 5.1 we discuss the attacks that CodeShield
can defend against and look at the current ways in which malware
enters a system. We evaluate CodeShield against real attacks in
Section 5.2. Finally, in Section 5.3 we look at how CodeShield
could be circumvented, in doing so we give the threat model we
are assuming in order for CodeShield to offer effective protection.
5.1 Attacks that CodeShield Stops
The security advantage of a whitelisting based defense against
malwares has been broadly recognized; however, so far whitelisting
has been limited to enterprise environments. Our main contribution
is a design to enable personalized whitelisting.
A PAW system such as CodeShield improves the defenses
against many of today’s most common attacks. As CodeShield
blocks all unintended execution of foreign binary programs, it stop
drive-by download attacks. More importantly, CodeShield provides
system-wide, rather than browser-speciﬁc protection for this type
of attack. No matter how a malicious program is dropped on to the
system, whether it comes in as an email attachment, via exploiting a
buggy document reader to drop ﬁles, or exploiting some vulnerable
services, CodeShield stops the execution of the malicious program.
CodeShield also signiﬁcantly raises the bar on social engineer-
ing attacks. Under CodeShield, installation of a new application is
an action distinct from others. If the social engineering attack at-
tempts to exploit the user’s confusion to install it, rather than con-
vincing the user to intentionally install it, such an attack will fail.
Furthermore, CodeShield’s design of using a reboot to enter instal-
lation mode has the potential of protecting users from themselves.
In situations where that a user impulsively, though still intention-
ally, downloads an apparently interesting program and wants to run
it, CodeShield forces the user to slow down, break the ﬂow of the
current activity, go through the highly distinctive and slightly cum-
bersome steps of entering installation mode, reﬂecting the danger
of such action. Hopefully, this will cause the user to reconsider
the impulsive decision to run the program and continue only if in-
stalling the new software is really needed.
We also conducted a more systematic analysis to identify to what
degree attacks involve new malicious executables. For this, we use
McAfee’s Threat Intelligence website1 to determine attack behav-
ior of different types of malware. We manually examined all mal-
ware entries on McAfee’s Threat Intelligence website over a period
of a month. There were approximately 44,000 entries, where each
1http://www.mcafee.com/us/mcafee-labs/threat-
intelligence.aspx
283
Total Write
Executable
1854 (93.6%)
1981
File is
Executable
105 (5.3%)
Unknown
22 (1.1%)
Table 1: Data Collected from McAfee’s Threat Intelligence
Website
entry is a different ﬁle. These entries are grouped by their detec-
tion names, which clusters ﬁles that exhibit the same behavior or
are part of a single attack. The were 1981 total detection names.
For each detection name, we analyze the description of how each
attack modiﬁes the system as reported by McAfee, the results are
presented in Table 1. In the ﬁrst type, threats write some executable
ﬁles to disk, e.g., a dll, exe or sys ﬁle, and this accounts for 93.6%
of attacks. We expect CodeShield to prevent these attacks. In the
second type, the malware sample itself was an executable, but it
did not write additional executables to disk. These attacks typically
make changes to the registry to cause themselves to be automat-
ically loaded when the system reboots. This type of threat was
identiﬁed either directly through McAfee’s website or by looking
up the ﬁle hash in VirusTotal2. This accounts for 5.3% of the de-
tected attacks. In 1.1% of the cases we could not come to a conclu-
sion based solely on the information collected.
Overall this points to the fact that nearly all malware samples
(98.9% in the dataset we analyze) are using executables at some
point in their life cycle, either in the initial attack, or to maintain and
expand their foothold in the system. So preventing the execution of
foreign code would diminish an attackers ability to achieve their
goals.
We also stress that a key strength of CodeShield is its ability to
protect against new malware that have not yet been detected. This is
difﬁcult for traditional A/V products to achieve with their signature
based detection mechanism.
5.2 Evaluating the Implementation
While we expect CodeShield to block execution of malware,
we also experimentally evaluated CodeShield to verify that this
is the case. Through actual usage of CodeShield, we know that
CodeShield blocks the execution of downloaded and modiﬁed bi-
nary programs. We also experimentally evaluated how CodeShield
behaves against actual malware samples.
For this evaluation, we use a collection of malware samples col-
lected from Contagio Malware Dump. Contagio collects malware
samples from a variety of sources as they occur, and helps the re-
search community understand, analyze and collaborate on those
threats. The samples that they collect represent many of the major
attacks that have occurred in the past few years including Operation
Aurora, Conﬁcker, Zeus and many others.
We tested these malware samples in a VM running Windows
XP and using whatever software appropriate to allow the exploit.
Microsoft Ofﬁce 2003 with certain versions of ﬂash, and Adobe
Reader 8 and 9 are generally sufﬁcient to allow most exploits to
succeed; newer versions of these products are also vulnerable to
most of the exploits we tested. The malware samples are in the
form of pdf, xls, doc, and ppt ﬁles. These samples are used by tar-
geted social engineering attacks, with a ﬁlename that would entice
the user to open the ﬁle. Once the document is opened, these docu-
ments drop their ﬁles to disk and attempt to execute them. We see
in the log ﬁles and CodeShield notiﬁcations that ﬁles are written,
and then followed immediately by an execution block.
2http://www.virustotal.com/
284
Date Found CVE
2010/03/31
2010/02/18
2010/02/20
2010/02/22
2010/03/24
2008/05/12
2010/01/12
2010/03/21
2010/04/23
2009/10/02
2006-0020
2006-2389
2006-2492
2006-6456
2007-5659
2008-0081
2008-0655
2008-2992
2008-4841