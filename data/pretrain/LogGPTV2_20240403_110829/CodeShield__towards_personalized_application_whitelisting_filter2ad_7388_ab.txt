### System Behavior and User Interaction

When the system attempts to load a program that is not on the whitelist, the loading process is blocked, and the user is notified of this event through the notification area on the taskbar, as shown in Figure 1. If the user wishes to run the program, they must recognize that a block has occurred and then switch the system into installation mode. Once in installation mode, the user can retry running the program.

### Entering Installation Mode

Entering installation mode should be achieved through a trusted path mechanism to prevent malicious code from causing the system to enter installation mode without user consent. We have investigated two approaches for entering installation mode:

1. **Preferred Approach:** The system reboots before entering installation mode.
2. **Secondary Mechanism:** The system enters installation mode without a reboot.

**Advantages of Requiring a Reboot:**

1. **Memory Clearing:** When malicious code exploits vulnerabilities in running processes, it may still reside in memory even if the system stops the future loading of any malicious binary programs written to disk. A reboot clears out any malicious code that might be in memory before the system enters installation mode.
2. **Minimized Vulnerability Surface:** After a reboot, the number of running applications is typically at its lowest, minimizing the system's vulnerability surface.
3. **User Attention:** Introducing new executables is a high-risk event. A reboot makes this action distinct from normal usage, capturing the user's attention and highlighting the significant risk involved. This inconvenience serves as a cost that the user must pay for adding new software to the system, discouraging casual or unnecessary entries into installation mode.

Our user study shows that when given the option to switch into installation mode without rebooting, users enter installation mode about three times as often as those with only the reboot option.

### Paradigm Shift in User Interaction Design

Our design represents a paradigm shift from the standard approach. Instead of prompting the user to make a decision, the system automatically blocks the execution. This avoids frequent prompts and the tendency for users to allow all prompts just to continue their workflow. The system allows users to continue their tasks without interruption. However, if the user needs to carry out the action, they can do so. Users are not "put on the spot" to make immediate security decisions and can take time to consider their options. In this design, the more dangerous option (entering installation mode) requires an extra step, making the safer option the path of least resistance.

### CodeShield: Implementing PAW on Windows Hosts

#### 4.1 The Design

We propose CodeShield, an approach to implement Personalized Application Whitelisting (PAW) on Windows hosts. The model can be summarized as follows:

- **Normal Mode:** New programs cannot be executed. To install or execute a new program, the system must be switched to installation mode.
- **Installation Mode:** The system can be switched to installation mode through a trusted path mechanism. Only a few specially identified trusted services, such as the operating system updater, are allowed to install or update programs in normal mode.
- **Whitelist Management:** The system maintains a list of public keys for trusted software vendors. Signed programs loaded during installation mode are added to the whitelist. All programs on the system before CodeShield runs are considered whitelisted. Any program created, updated, or loaded by a trusted installer or during installation mode is added to the whitelist. Programs signed by a trusted public key are also added to the whitelist.
- **Whitelist Maintenance:** A program on the whitelist that is modified in normal mode by a non-trusted installer is removed from the whitelist. In normal mode, if a non-trusted installer attempts to load a program not on the whitelist, the loading is stopped.

#### 4.2 Trusted Certificates and Updates

CodeShield maintains a list of certificates for trusted vendors and automatically adds programs signed by these certificates to the whitelist. Without this mechanism, every update would be treated as a new installation since updates modify executables. Our user study found that most popular applications sign their binaries during updates, recognizing the need for cryptographic protection. Software packages that do not use digital signatures often have an update process similar to software installation, requiring the user to manually execute a new package.

#### 4.3 Implementation

We have implemented CodeShield on Microsoft Windows operating systems, including XP, Vista, and Windows 7. The implementation consists of a kernel-space filesystem minifilter driver and a user-space client.

- **Kernel-Space Minifilter Driver:** The driver intercepts IO Request Packets (IRPs) to handle data between the disk and the OS, blocking the loading of code modules not on the whitelist.
- **User-Space Client:** The client displays notifications, dialog boxes, and sends responses back to the kernel-mode minifilter driver. It allows the user to initiate a reboot/switch into installation mode, examine the list of trusted certificates, and monitor events.

### Security Evaluation

#### 5.1 Attacks that CodeShield Stops

CodeShield provides a strong defense against many common attacks, including drive-by downloads and social engineering. By blocking the execution of foreign binary programs, CodeShield significantly raises the bar for attackers. Our analysis of malware samples from McAfeeâ€™s Threat Intelligence website shows that nearly all malware (98.9% in our dataset) uses executables at some point in their lifecycle. Preventing the execution of foreign code diminishes an attacker's ability to achieve their goals.

#### 5.2 Evaluating the Implementation

We experimentally evaluated CodeShield using a collection of malware samples from Contagio Malware Dump. The tests were conducted in a VM running Windows XP with appropriate software to allow the exploits. The results show that CodeShield effectively blocks the execution of downloaded and modified binary programs, confirming its effectiveness in preventing malware execution.

### Conclusion

CodeShield offers a robust and user-friendly approach to implementing PAW on Windows hosts. By requiring a reboot to enter installation mode and maintaining a strict whitelist, CodeShield significantly enhances the security of the system while minimizing user disruption.