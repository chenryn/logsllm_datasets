on an SGX-enabled host.
We sketch the design of an executable app for
PwdTheft. It does the following: (1) Ingests the pass-
word PW from P and (pkC, A) from the contract; (2)
Creates and authenticates (via HTTPS, to support source
authentication) a connection to the service on which A
is located; and logs into A using PW ; and (3) If steps
(1) and (2) are successful, sends to PwdTheft the val-
ues ct = encpkC [PW ], σ = Sigskapp [ct], and a quote α for
app. The functionality Claim in PwdTheft inputs these
values and veriﬁes σ and α, ensuring that PW is a valid
password for A. At this point, PwdTheft releases a re-
ward to P; we omit details for this step. Figure 7 depicts
the basic setup for this CSC.
After delivery of PW , P could cheat by changing PW ,
thus retaining access to A but depriving C of it. It is possi-
ble for app thus to include a step (2a) that changes PW to
a fresh, random password PW(cid:48) without revealing PW(cid:48) to
P. This is in effect a “proof of ignorance,” a capability of
trusted hardware explored in [50]. To ensure freshness,
app might also ingest a timestamp, e.g., the current block
header in the cryptocurrency.
Sale of 0-days: A zero-day exploit (“0-day”) is a piece
of code that exploits a target piece of software through
a vulnerability as yet unknown to the developers and
for which patches are thus unavailable. A substan-
tial market [36] exists for the sale of 0-days as cyber-
weaponry [60]. Demonstrating the validity of a “0-day”
without revealing it has been a persistent problem in 0-
day markets, which consequently rely heavily on reputa-
tions [58].
SGX could enable proofs of validity of a 0-days: app
• b ← V(crs, stmt,π): Takes in a crs, a statement
stmt, and a proof π, and outputs 0 or 1, denoting
accept or reject.
• ((cid:99)crs,τ, ek) ← (cid:98)K(1λ ,L): Generates a simulated
common reference string (cid:99)crs, trapdoor τ, and ex-
• π ← (cid:98)P((cid:99)crs,τ, stmt): Uses trapdoor τ to produce a
tract key ek
proof π without needing a witness
Perfect completeness. A NIZK system is said to be per-
fectly complete, if an honest prover with a valid witness
can always convince an honest veriﬁer. More formally,
for any (stmt,w) ∈ R, we have that
(cid:20) crs ← K(1λ ,L), π ← P(crs, stmt,w) :
(cid:21)
Pr
V(crs, stmt,π) = 1
= 1
(cid:105)
Pr
≈ Pr
Computational zero-knowlege.
Informally, a NIZK
system is computationally zero-knowledge, if the proof
does not reveal any information about the witness to any
polynomial-time adversary. More formally, a NIZK sys-
tem is said to computationally zero-knowledge, if for all
non-uniform polynomial-time adversary A, we have that
(cid:104)
(cid:104)
(cid:105)
((cid:99)crs,τ, ek) ← (cid:98)K(1λ ,L) : A(cid:98)P1((cid:99)crs,τ,·,·)((cid:99)crs) = 1
In the above, (cid:98)P1((cid:99)crs,τ, stmt,w) veriﬁes that (stmt,w) ∈
L, and if so, outputs (cid:98)P((cid:99)crs,τ, stmt) which simulates
crs ← K(1λ ,L) : AP(crs,·,·)(crs) = 1
a proof without knowing a witness. Otherwise,
(stmt,w) /∈ L, the experiment aborts.
Computational soundness. A NIZK scheme for the
language L is said to be computationally sound, if for
all polynomial-time adversaries A,
(cid:20) crs ← K(1λ ,L), (stmt,π) ← A(crs) :
(cid:21)
if
Pr
(V(crs, stmt,π) = 1)∧ (stmt /∈ L)
≈ 0
Simulation sound extractability.
Simulation sound
extractability says that even after seeing many simu-
lated proofs, whenever the adversary makes a new proof,
a simulator is able to extract a witness. Simulation
extractability implies simulation soundness and non-
malleability, since if the simulator can extract a valid
witness from an adversary’s proof, the statement must
belong to the language.
More formally, we say a NIZK for a language L is
(strongly) simulation sound extractable iff there exists an
extractor E such that for all polynomial-time adversary
 ((cid:99)crs,τ, ek) ← (cid:98)K(1λ )
A, the following holds:
(stmt,π) ← A(cid:98)P((cid:99)crs,τ,·)((cid:99)crs, ek)
w ← E((cid:99)crs, ek, stmt,π)
(stmt,π) /∈ Q and
V((cid:99)crs, stmt,π) = 1
(stmt,w) /∈ RL and
Pr
:
= negl(λ )
Figure 7: Diagram of execution of PwdTheft with appli-
cation app running on SGX-enabled platform. The steps
of operation are described in text.
would in this case simulate an execution environment
and attest to the state of a target piece of software af-
ter execution of the 0-day. An alternative, in principle,
is to construct a zk-SNARK, although, simulation of a
complete execution environment would carry potentially
impractical overhead.
Either technique would support the creation of a smart
contract for the sale of 0-day vulnerabilities, greatly sim-
plifying 0-day markets. Additionally, sales could be
masked using an idea like that of cover claims, namely by
formulating contracts EITHER to sell a 0-day vulnerabil-
ity for $X OR sell $X worth of cryptocurrency. “Cover”
or “decoy” contracts could then be injected into the mar-
ketplace.
C Preliminaries
Our CSCs rely on a cryptographic building block
called non-interactive zero-knowledge proofs (NIZK).
We adopt exactly the same for deﬁnitions for NIZKs as
in Kosba et al. [46]. For completeness, we restate their
deﬁnitions below.
In the remainder of the paper, f (λ ) ≈ g(λ )
Notation.
means that there exists a negligible function ν(λ ) such
that | f (λ )− g(λ )|  Tend:
Set ledger[C] := ledger[C] + $reward
Set state := ABORTED.
Figure 8: Ideal program for naive key theft. This version
of the ideal program defends against the rushing attack,
but does not protect against the revoke-and-claim attack.
D Formal Protocols for Key Theft Con-
tract
D.1
Ideal Program for the Naive Key Theft
The ideal program for the naive key theft contract is
given in Figure 8. We stress that here, this naive key
theft ideal program is different from the strawman exam-
ple in the main body (Figure 3). For ease of understand-
ing, Figure 3 in the main body is prone to a rushing at-
tack by a corrupted contractor. Here, our naive key theft
ideal program secures against the rushing attack – how-
ever, this naive key theft ideal program is still prone to
the revoke-and-claim attack (see Section 5.1). We will
ﬁx the revoke-and-claim attack later in Appendix D.4
Contract-NaiveKeyTheft
Prot-NaiveKeyTheft
Init: Set state := INIT. Let crs := KeyGennizk(1λ )
denote a hard-coded NIZK common reference
string generated during a trusted setup process.
Create: Upon receiving (“create”, $reward, pkV, Tend)
from some contractor C := (pkC, . . .):
Assert state = INIT.
Assert ledger[C] ≥ $reward.
ledger[C] := ledger[C]− $reward.
Set state := CREATED.
Intent: Upon receiving (“intent”, cm) from some pur-
ported perpetrator P:
Assert state = CREATED.
Assert that P did not send “intent” earlier.
Store cm,P.
Claim: Upon receiving (“claim”, ct, π, s) from P:
Assert state = CREATED.
Assert P sent (“intent”, cm) earlier such that
cm := comm(ct||π,s).
Assert that π is a valid NIZK proof (under crs)
for the following statement:
∃r, skV s.t. ct = Enc(pkC, (skV ,P),r)
and match(pkV , skV ) = true
ledger[P] := ledger[P] + $reward.
Send (“claim”, ct) to the contractor C.
Set state := CLAIMED.
Timer: If state = CREATED and current time T > Tend:
ledger[C] := ledger[C] + $reward
state := ABORTED
Figure 9: A na¨ıve, ﬂawed key theft contract (lacking
incentive compatibility). The notation pkC serves as a
short-hand for C.epk. This ﬁgure is a repeat of Figure 3
for the readers’ convenience.
Remarks. We make the following remarks about this
ideal functionality:
• All bank balances are visible to the public.
• Bank transfers are guaranteed to be correct.
18
Contractor C:
Create: Upon receiving input (“create”, $reward, pkV ,Tend,
C):
Send
$reward,
G(Contract-NaiveKeyTheft).
(“create”,
pkV ,Tend)
to
Claim: Upon receiving a message (“claim”, ct)
G(Contract-NaiveKeyTheft):
from
Decrypt and output m := Dec(skC, ct).
Perpetrator P:
Intent: Upon receiving input (“intent”, skV , P):
Assert match(pkV , skV ) = true
Compute ct := Enc(pkC, (skV ,P),s) where s is
randomly chosen.
Compute a NIZK proof π for the following state-
ment:
∃r, skV s.t. ct = Enc(pkC, (skV ,P),r)
and match(pkV , skV ) = true
Let cm := comm(ct||π,s) for some random s ∈
{0,1}λ .
Send
G(Contract-NaiveKeyTheft).
Claim: Upon receiving input (“claim”):
(“intent”,
cm)
to
Assert an “intent” message was sent earlier.
s)
Send
G(Contract-NaiveKeyTheft).
(“claim”,
ct,
π,
to
Figure 10: User-side programs for naive key theft. The
notation pkC serves as a short-hand for C.epk.
• The ideal functionality captures transaction non-
malleability, and precludes any front-running attack,
since our real-world execution model assumes a rush-
ing adversary.
D.2 Full Protocol for Naive Key Theft
The contract and full protocols for naive key theft are
given in Figures 9 and 10. Speciﬁcally, Figure 9 is a
repeat of Figure 3 for the readers’ convenience.
the
encryption
that
is perfectly
Theorem 1 Assume
scheme
correct and semantically