### Spatial and Temporal Vulnerabilities in IOMMU

Spatial vulnerabilities arise when the 4KiB page (or superpage) granularity of translations allows unintended access beyond the intended physical memory range, or when permissions are set more broadly than necessary. For instance, if only a sub-page-size region of memory is intended to be exposed for Direct Memory Access (DMA), broader permissions can lead to unauthorized access. Temporal vulnerabilities occur when IOMMU mappings remain active longer than necessary, allowing undesired accesses when memory may have been reused for other purposes. For example, if IOTLB (I/O Translation Lookaside Buffer) invalidations are performed asynchronously, it can enable DMA across memory reuse.

Previous research [37], [42], [53] hypothesized that IOMMUs suffer from such vulnerabilities but did not describe specific exploits.

### Methodology

This section outlines our threat model, including our objectives and the practical opportunities available to attackers. It also describes the features of our I/O-security research platform and our test environment. Our platform enables us to explore various scenarios where devices are used, and in subsequent sections, we use it to survey operating systems and then focus on them in detail.

#### A. Threat Model

We consider malicious peripherals, i.e., hardware devices that may be attached to a computer system with malicious intent, or existing peripherals that may be compromised (e.g., via a malicious firmware update).

Our focus is on peripherals that can read and write system memory directly or indirectly via PCIe, Thunderbolt, or on-chip interconnects. Message-passing peripherals such as USB or SATA devices are not covered by our work and have different threat models (e.g., [49], [57]). However, host controllers (i.e., the bridges from these protocols to memory transactions, usually PCIe) are within our scope. An attack from a USB-only peripheral (not via Type-C and Thunderbolt) would first require a host controller exploit, which may be feasible but is not explored in this work.

Attacks can be external, through the addition of a pluggable device, or internal, via compromised firmware of an existing device. Malicious peripherals can masquerade as any type of device by selecting their PCIe device ID, allowing them to choose a vulnerable device driver. Peripherals can be external or internal, hot-pluggable, modular, soldered-down, or on-chip. While the physical form factor has limited impact on the exploits a device can undertake, it significantly influences user expectations. The form factor can be used to mislead users, making a device look like one object but act like another. Users may not fully understand the extent of access they are granting to a device they plug in.

Our platform can take various physical forms to misdirect user expectations, such as a docking station, charger, or projector. These are items users might borrow or connect to without considering security implications. Additional scenarios include:

- **Compromised Dongle**: An existing Thunderbolt Ethernet or Wi-Fi dongle containing a standard PCIe chip has its firmware compromised (e.g., via [32] or [11]). The dongle remains fully functional but includes additional trojan functionality to exfiltrate data. The dongle can be left in a meeting or hotel room for an unsuspecting visitor.
- **Supply-Chain Attack**: The firmware of a PCIe network card is modified to include exfiltration functionality in the factory or supply chain before installation in a customer server. Alternatively, a bad firmware update is applied in the field.

While we primarily focus on PCI Express and popular laptop, desktop, and server operating systems, our work generalizes to any device where memory is exposed to peripherals. Our emphasis is on the use of the IOMMU for host protection. Hypervisors using the IOMMU to delegate peripherals to virtual machines and protect against breaking out of VMs using I/O devices present a related but distinct problem. The same IOMMU is used in a very different way, with divergent threat models. This also applies to operating systems like Qubes or Bromium, which launch a separate virtual machine for each task, using the IOMMU to delegate peripherals to a specific VM.

#### B. The Thunderclap I/O-Security Research Platform

To investigate deep interactions with peripherals, we required a more intricate research platform than previously published. The full peripheral stack is depicted in Figure 3, including standardized and device-specific layers. Because the device-specific layers interact most with software, we needed an implementation that extends substantially beyond the work of previous researchers, who implemented only the standardized layers. To achieve this, we built our research system using a complex software stack running on an FPGA, as shown in Figure 4.

For the hardware, we used the Arm Cortex A9 CPU on an Intel Arria 10 FPGA to run a software-defined device model extracted from the QEMU full-system emulator. Additionally, FPGA soft-logic allows it to generate arbitrary PCIe packets.

1. **Baseline to Reproduce the State of the Art**:
   The PCIe transport layer imposes memory semantics on top of the underlying layers that provide reliable end-to-end delivery of packets. These transport layer packets (TLPs) can be reads and writes classified as memory, configuration, legacy-I/O, or other messages (such as power control). The replies to read requests are completion packets, which contain either the requested data or an error code.

   Our PCIe hardware delivers raw PCIe TLPs to programs on the FPGA CPU through simple queues, enabling our adversarial application to send and receive arbitrary packets. This allowed us to build a baseline platform to test vulnerabilities to generic PCIe devices, similar to prior literature. The baseline software can perform DMA by generating arbitrary memory read and write packets and interpreting their results, including returned data and error indications.

2. **Implementing a Full Device Model**:
   To go further, we emulated a functional device that would cause the driver to be activated on the victim OS and expose data via the IOMMU. We used a software model of an Intel 82574L Gigabit Ethernet Controller from the QEMU full system emulator [8]. This device has drivers for each operating system we investigated. We extracted the QEMU e1000e device model and ran it on the FPGA CPU. A cut-down version of QEMU’s main loop was run to keep the simulated model operating. Incoming PCIe packets were translated into QEMU function calls in the device model. Similarly, QEMU’s simulated DMA was translated into real PCIe DMA transactions. This enabled our emulated device to generate the same memory reads, writes, and interrupts as a real device. QEMU’s internal network stack allowed our fake network interface card (NIC) to generate plausible traffic such as DNS and DHCP, functioning correctly as far as the operating system is concerned. The complex software dependencies required by QEMU mandated the full POSIX environment provided by Linux, in contrast with a real PCIe peripheral that usually runs a much more minimal embedded software stack.

   With a functional emulated device, we could then add a malicious payload. We added an adversarial component that was aware of the state of the emulated NIC and generated additional malicious DMA traffic and additional PCIe state.

3. **Platform Form Factors**:
   Thunderclap runs on FPGA evaluation boards, including the Arria 10 SoC Development Kit. Noting that user expectations are influenced by the physical shape a platform takes, we designed (although not fully engineered) several embodiments of the platform into form factors users might expect:
   - **Thunderbolt Docking Station**: The Arm drives the docking station I/O (ethernet, USB, etc.).
   - **USB-C Projector**: Contains an internal FPGA as well as a Thunderbolt bridge to extract video.
   - **USB-C Charger**: Charges a laptop and provides a malicious Thunderbolt FPGA.

#### C. Test Environment

We attached the FPGA to a variety of laptop, desktop, and server systems to test different exploit paths over a wide range of operating systems. Full details of the hardware/software combinations are shown in Table I.

We focus on the Intel and AMD IOMMUs in our study. In the mobile space, ARM’s System MMU (SMMU) applies broadly the same concepts, and a natural extension of our work would consider the use of the SMMU. However, our study already covers the kernels used in Android (Linux) and iOS (XNU, common with macOS). The most interesting attacks on these platforms (malicious firmware in radio basebands, cameras, or network devices) would require more reverse engineering to implement, as their software environment is proprietary. Additionally, these platforms do not offer PCIe or Thunderbolt to external devices as laptops do, so we could not reuse our existing research hardware.

#### D. Vulnerability Space

Our aim is to investigate the shared-memory vulnerability space. In doing so, we examine how it is exploited through increasingly complex interactions with the operating system and device drivers.

To illustrate this, we show how kernel and device-driver vulnerabilities allow us to extract private data (e.g., plaintext VPN network traffic), change kernel behavior (e.g., manipulate code pointers to construct malicious programs using Return Oriented Programming (ROP) techniques), and circumvent memory protections. We then review our vendor interactions, the effectiveness of available mitigations, and potential future directions.

### Operating-System Survey

To understand how the IOMMU is used in different OSs, we performed an analysis of documentation, source code, and (where necessary) IOMMU page tables of running machines. A summary is given in Table II, which lists the OS versions we used for subsequent experiments.

We found that many systems did not even turn the IOMMU on: either it was disabled in the firmware, or the operating system required obscure configuration to enable the IOMMU. MacOS was the only OS to enable the IOMMU by default. It is notable that even RedHat Enterprise Linux 7.1 (which is Common Criteria EAL4+ certified [55]) did not enable the IOMMU by default. On those systems without default enablement, we set the necessary configuration to enable the IOMMU for device protection.

When the IOMMU is enabled, there are two broad modes used: shared mappings, which use a single IOMMU page table for all devices, and per-device mappings, which implement a different page table for each PCIe device. We discuss the implications of these design choices in the following sections. Subsequently, Section IX considers why the IOMMU is used the way it is.

### Attacks Without OS Interaction

The most basic vulnerabilities can be explored with our baseline platform, which is capable of generating arbitrary PCIe packets from software. Generating independent memory transactions replicates prior work in that it has no interactions with the kernel or any device drivers; it naively explores what data it can access at a hardware level. In principle, any PCIe device with DMA capability could perform similar attacks, though a particular product (as [20]) may have its own limitations.

A simple approach is memory probing, looking for accessible memory regions. As an FPGA able to make PCIe memory transactions, it can systematically search for and access unprotected memory areas.

### Summary Table

| Operating System | Build/Kernel | Can Use IOMMU | Default Enabled | IOMMU Page Mappings | Shared | Per-Device | Data Leakage Vulnerability | Kernel Pointer Vulnerability | Shared Allocator Vulnerability |
|------------------|--------------|---------------|-----------------|---------------------|--------|------------|----------------------------|------------------------------|--------------------------------|
| Windows 7        | 9200         | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| Windows 8.1      | 16299        | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| Win 10 Home/Pro 1709 | 14393 | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| Win 10 Enterprise 1607 | 15063 | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| Win 10 Enterprise 1703 | 16299 | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| MacOS 10.10-10.13 | 4.8/10       | ✓             | ✓               |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| Ubuntu 16.04     | 4.8          | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| Fedora 25        | 4.8          | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| RHEL 7.1         | 3.10         | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| FreeBSD 11       | 11           | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |
| PC-BSD/TrueOS 10.3 | 10.3    | ✓             |                 |                     | ✓      |            | ✓                          | ✓                            | ✓                              |

Note: ✓ indicates the presence of the feature or vulnerability.