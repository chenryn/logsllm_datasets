We categorize ATRA into two types: Memory-bound
ATRA and Register-bound ATRA. Memory-bound ATRA
modiﬁes the data structures related to the page table, while
Register-bound ATRA achieves the translation redirection
by directly or indirectly compromising the values related to
the CPU registers such as CR3.
3.1 Memory-bound ATRA
Memory-bound ATRA targets the PGD and PTE in order
to change the address translation mapping. While the PGD
and PTE are essentially identical data structures, there is
an important diﬀerence: PGD exists for each process while
the kernel PTE is shared globally across processes. Due to
this diﬀerence, the detailed application of ATRA against
PGD (PGD-ATRA) requires more sophisticated method
than PTE (PTE-ATRA). We ﬁrst explain PTE-ATRA, then
PGD-ATRA.
Method for PTE-ATRA: PTE-ATRA can be accom-
plished by simply modifying an entry in PTE where each
PTE entry maps a page frame in physical memory (a 4KB
page in conventional x86 systems). Assume that the kernel
data structure (i.e., system call table) of the host kernel re-
sides in a page that corresponds to a virtual address range
from 0xC0001000 through 0xC0002000. An adversary has
a new page allocated using a function from the kernel mem-
ory allocation API such as kmalloc, then copies the content
of the page with original kernel data structure to the new
one (with kernel privilege, the attacker can also copy the
page properties as well). The adversary can modify this re-
located copy instead of the original one. Lastly, the attack is
completed by overwriting the PTE entry which corresponds
to 0xC0001000 with the physical address of the kernel data
structure copy created on the newly allocated page frame.
Since PTEs that correspond to the kernel virtual memory
space are shared among all processes, this modiﬁcation af-
fects the entire system. Figure 1 shows the three steps in
PTE-ATRA.
Method for PGD-ATRA: PTE-ATRA can be easily ap-
plied, however, the detection also can be easily applied by
monitoring the PTE. To avoid the detection against PTE
manipulation, PGD-ATRA can be performed in a similar
manner. However, unlike PTE-ATRA, PGD-ATRA needs
to be launched for each process to make a system-wide ef-
fect. This is because each process has its own copy of PGD
which maps the globally shared kernel PTEs [23]. In Linux,
a simple way of accessing the entire PGDs in the system
is traversing the linked list of task structs. Steps in PGD-
ATRA are depicted in Figure 1.
After PGD-ATRA comes into eﬀect, PTE-ATRA can be
launched without being detected. However, PGD-ATRA
can be detected by extending the PTE-ATRA detection
scheme. As long as the adversary employs memory mod-
iﬁcation as the technique to achieve ATRA, the arms race
of the attacker and the defender will be iterated as the level
of paging increases.
We have discussed ATRA that exploits in-memory pag-
ing data structures of address translation. However, the
mitigation methodology of Memory-bound ATRA that ma-
nipulates the in-memory component of the address trans-
lation seems to be evident; external monitor should check
the integrity of the in-memory paging data structures. For
instance, a simple write detection scheme on a single ker-
nel PTE which contains the mapping for the target kernel
data structure can be a mitigation method for PTE-ATRA.
In the case of PGD-ATRA, the detection scheme becomes
more complicated since the PGDs are dynamically allocated
as a new process is created. However, the basic strategy for
mitigation would be the same as PTE-ATRA.
3.2 Register-bound ATRA
The Register-bound ATRA exploits the fact that all exist-
ing hardware-based external monitors are incapable of mon-
itoring CPU states. A concept of this attack was brieﬂy
mentioned in previous work [7, 11, 18, 19]. They considered
this attack to be impractical or hypothetical. Our Register-
bound ATRA proves otherwise. Register-bound ATRA tar-
gets the base register (CR3 in case of x86) of virtual address
translation. As previously explained, the CR3 register is
used by the MMU as the root of page table walking. By
modifying the register, we can induce the MMU to walk our
malicious page table instead of the original. This means that
the virtual address space mapping of the process victimized
by ATRA can be arbitrarily manipulated by attacker.
Saved-CR3-ATRA: A straightforward way to achieve
CR3 modiﬁcation would be overwriting the saved-CR3 val-
ues from memory (i.e., task struct→mm→pgd in the case
of Linux). We mention this ATRA application method as
Figure 1: Overview of Address Translation Redirection Attack (ATRA): ATRA can exploit the multiple steps
in the virtual to physical address translation. PTE-ATRA modiﬁes the page table entry that points to the
original kernel object (KObj), so that the access is redirected to the copy (KObj’). PGD-ATRA manipulates
the page directory entry that points to the original PTE. Saved-CR3-ATRA modiﬁes the CR3 value saved
in memory so that the context switch restores the modiﬁed value into the CR3 register when the targeted
process is scheduled back. Finally, CR3-ATRA directly modiﬁes the content of CR3 register so that the
address translation starts with the manipulated PGD copy (PGD’). Note that CR3-ATRA directly updates
CR3 register in CPU, not modifying any known memory-component.
Saved-CR3-ATRA, which provides an easy way to manip-
ulate the entire CR3 of processes under context switching
environment as shown in Figure 1.
Although Saved-CR3-ATRA is straightforward and easy
to implement, it involves modiﬁcation of an in-memory com-
ponent since the saved-CR3 value resides in a memory re-
gion which the external monitor can be conﬁgured to ob-
serve. Figure 1 also shows ATRA attacks that achieve redi-
rection attack by modifying in-memory components. They
are PGD-ATRA, PTE-ATRA and Saved-CR3-ATRA. PGD
and PTE ATRA manipulate the paging data structures
on memory, and Saved-CR3-ATRA modiﬁes the saved-CR3
value (via task struct→mm→pgd ), which is also located in
a known memory region. Since these three ATRAs leave
traces in memory, the external monitors can check the in-
tegrity of the known memory components. However, the
next version that we will introduce does not manipulate any
previously known memory component.
CR3-ATRA via Inter-Context Register Modiﬁca-
tion: Modifying an arbitrary register value of another pro-
cess is not a straightforward task since the modiﬁcation must
not involve any change to the known memory regions which
the external monitor could protect. In order to change the
CR3 value of another process without modifying previously
known memory region, attacker must induce the target pro-
cess to update the CR3 register value from its running con-
text. To overcome this challenge, we sought to ﬁnd a regis-
ter based system-wide hooking point which the attacker can
inject his code into another running process across context
switching. Good examples of this hooking points are IDTR,
SYSENTER EIP MSR register.
We adopt the widely-known Interrupt Descriptor Table
(IDT) hooking [24] to induce the target process to execute
the code that modiﬁes the CR3 register. More speciﬁcally,
we force the victim process to invoke the attacker’s code be-
fore the victim process enters the interrupt handler. The
attacker’s code will load the physical address of the relo-
cated PGD into the CR3 register directly (Note that the
attacker’s code relocates entire chain of the paging data
structures starting with the PGD as well). We refer this
technique as Inter-Context Register Modiﬁcation. We also
describe the use of SYSENTER EIP MSR for enabling the
Inter-Context Register Modiﬁcation in Section 7.
The Inter-Context Register Modiﬁcation technique en-
ables the attacker to manipulate the CR3 register of an ar-
bitrary process by changing the control ﬂow (without mod-
ifying known in-memory component) before it accesses any
kernel object. Using this technique, CR3-ATRA is launched
every time a process enters kernel mode. This can be guaran-
teed because a process must raise an interrupt before enter-
ing the kernel address space (exceptional case will be further
discussed in Section 7). System calls are the most common
example of such interrupts; a non-privileged process raises
software interrupt (e.g., INT 0x80 ) to temporarily enter the
kernel space. Similarly, other cases such as page fault, signal
handling and hardware interrupt would require the interrupt
handling [23].
By hooking the IDTR, we avoid direct manipulation of the
IDT entries which the memory access could be monitored.
PageDirectory EntryPageDirectory EntryyPageDirectoryEntryPGDentryPageDirectory EntryPageDirectory EntrySaved CR3Saved CR3Page Directories(PGDs)for ProcessesPhysical MemorySaved Contextfor ProcessesModified Pointer TranslationMonitored Memory RegionPointer Redirection PreparationPTEentryPTEentryCopy ofPage Table(PTE’)for KernelCopies of PageDirectories(PGD’s)for ProcessesNormal Pointer TranslationPage Table(PTE)for KernelCR2CR0CR4schedule()Hardware Registers in CPUNon-monitored Memory RegionyPageDirectory EntryPGDentrySvedC3Saved CR3Saved-CR3Kernel Obejct(KObj)Kernel ObjectCopy (KObj’)Register-bound ATRAMemory-bound ATRACR3-ATRASaved-CR3-ATRAPTE-ATRAPGD-ATRACR3Note that the initial starting point of an interrupt handling
is the physical address value stored in a system-wide global
CPU register that points the IDT (IDTR). Unlike the CR3,
IDTR is not bounded to any process context. As a result,
we can easily relocate the IDT out of the monitor’s view
by overwriting the IDTR just one time. Consequently we
can manipulate any IDT entry which has the address of the
interrupt handler without alarming the external monitor.
To sum up, the Inter-Context Register Modiﬁcation can
be achieved by hooking one of the system global registers
(e.g., IDTR, SYSENTER EIP MSR) which cause other pro-
cesses to execute the attacker’s code when they run.
One may monitor the use of the IDTR updating instruc-
tion (LIDT ) after booting as an indicator of IDT hooking at-
tempt. However, existing hardware monitors cannot moni-
tor the instructions that are being executed inside host CPU,
thus they cannot determine whether LIDT is being executed
or not.
4. CHALLENGES IN MITIGATING ATRA
In this section, we will discuss the mitigation issue regard-
ing the two types of ATRA in detail.
4.1 Memory-bound ATRA Mitigation
To mitigate Memory-bound ATRA against an object, the
external monitor should guarantee the address translation
integrity of all virtual addresses that are related. Since the
external monitor is capable of monitoring an arbitrary mem-
ory region, mitigating this threat seems to be possible by
checking the integrity of related PGD entries and PTE en-
tries. However, we found that there are some challenges
regarding this mitigation methodology.
Race condition: In order to monitor PGDs and PTEs, ex-
ternal monitor must locate them from the physical memory.
Note that once the external monitor locates PGD, ﬁnding
physical memory location of PTE will be a trivial task since
the PGD contains the physical address of entire PTEs (not
vice versa).
Locating PGDs that are created for a newly forked process
is a non-trivial task, since it is a dynamically allocated data
structure which the memory location cannot be determined
in advance. In Linux kernel, dynamic objects typically form
a linked-list structure which can be traversed using pointers
from a ﬁxed entry point. Therefore, in order to locate them,
external monitor could traverse the pointers of such linked
list data structures inside the host memory at runtime. For
example, KI-Mon [9] achieved this capability by implement-
ing a technique so-called Address Translation Engine, which
translates the host virtual address into physical address in
order to traverse the linked list data structures inside the
host memory. With these capabilities of the recent external
monitors, we believe that locating the dynamic data struc-
ture such as PGD is not a challenge.
The challenging part is that locating these dynamic ob-
jects creates a race condition between the external monitor
and the adversary. Consider a situation where a new ker-
nel object that is of interest to both adversary and external
monitor has been created during runtime.
If the external
monitor catches this event and locates the newly created
object earlier than the adversary, the object will be suc-
cessfully monitored without any problem. However, if the
adversary’s manipulation attack precedes the adding of the
object to the monitored regions for the external monitoring,
the further integrity protection for the newly created object
might be rendered useless.
In case that the integrity of a dynamically created object
can be veriﬁed by comparing it to a known-good-value or
analyzing the semantic consistency invariant of the memory
contents, the race condition may not be a problem. Con-
sider a situation where an attacker hides a process by un-
linking the data structure (e.g., task struct) from its linked
list which is used for the process enumeration. An exter-
nal monitor can verify this attack by comparing the linked
list of task struct to the scheduler’s run-queue that contains
scheduled task struct. In this case, the timing of the pro-
cess hiding attack is not an issue for integrity veriﬁcation,
consequently race condition does not need to be considered.
However, if the external monitor must enforce that the ar-
bitrary initial value of the object not to be changed, the
integrity veriﬁcation can be unreliable due to the possibili-
ties of race conditions.
The Master Kernel Page Directory contains the untam-
pered original of the PGDs [23]. Thus the PGD contents
regarding the speciﬁc target object’s virtual address could
be previously deﬁned, which creates a semantic invariant.
However, to mitigate Memory-bound ATRA, the external
monitor should, in fact, check the integrity of additional
data structures that are subject to the race condition (we
will discuss this in the following paragraph). Therefore, we
argue that the race condition is a challenge for mitigating
Memory-bound ATRA.
Enumerating intermediate pointers: Another challenge
in mitigating Memory-bound ATRA is the large attack sur-
face where ATRA can be applied besides the PGD itself.
This is because the kernel scheduler references a list of in-
termediate pointer values to reach the PGD of the next
scheduled process. If the attacker is able to manipulate any
of these pointers or change the virtual to physical address
mapping of these pointer values, the kernel scheduler can be
redirected to reference the maliciously crafted copy of the
PGD located in a non-monitored region.
Before we discuss in more details, we should note some re-
lated facts regarding the PGD and kernel scheduler. When
the context switch occurs due to system events such as inter-
rupt and preemption, the scheduler selects next process to
be scheduled. This selection is determined by the schedul-
ing algorithm being used in the system (i.e., Completely Fair
Scheduling, O(1) Scheduling and so on). Once the scheduler
selects the next process, the scheduler references the PGD
of corresponding process from memory and loads the PGD’s
physical address into the CR3 register (switch mm()) [23].
As previously mentioned, there can be a signiﬁcant num-
ber of intermediate pointer paths that the kernel scheduler
can traverse to reach the PGD. For example, the value of the
saved-CR3 is always referenced via struct mm (mm→pgd)