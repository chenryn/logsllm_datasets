polynomials α(z), β(z), γ(z) and δ(z) such that
1. α(z)A(z) +β (z)B(z) = I(z).
2. γ(z)I(z) = A(z).
3. δ(z)I(z) = B(z).
Proof:
(⇒) If I = A ∩ B, it follows that (i) the great
common divisor of polynomials A(z) and B(z) is I(z),
therefore, by B´ezout’s identity, there exist polynomials
α(z) and β(z) such that (i) α(z)A(z) + β(z)B(z) =
I(z); (ii) I(z) divides A(z) and B(z), therefore there exist
polynomials γ(z) and δ(z) such that γ(z)I(z) =A (z)
and δ(z)I(z) = B(z).
(⇐) Let A, B and I be sets. Suppose there exist poly-
nomials α(z), β(z), γ(z) and δ(z) such that (1), (2) and
(3) are true. By replacing (2) and (3) into (1), we get that
α(z) and β(z) do not have any common factor, therefore
I(z) is the greatest common divisor of A(z) and B(z) and
therefore A ∩ B = I.
Corollary 1 (Union constraints) Let A, B and U be
three sets of elements in F. Then U = A ∪ B iff ∃ polyno-
mials i(z), α(z), β(z), γ(z) and δ(z) such that
1. α(z)A(z) +β (z)B(z) = i(z).
2. γ(z)i(z) = A(z).
3. δ(z)i(z) = B(z).
4. δ(z)A(z) = U(z).
USENIX Association  
23rd USENIX Security Symposium  771
A
B
I = A ∩ B
A(z)
B(z)
α(z)
β(z)
× ×
×
×
+
A
B
U = A U B
A(z)
α(z)
β(z)
B(z)
× ×
A
B
A(z)
α(z)
β(z)
B(z)
× ×
×
D = A − B
×
×
×
×
×
I
γ(z)
I(z)
(a)
δ(z)
U
γ(z)
+
i(z)
(b)
U(z)
δ(z)
D
γ(z)
δ(z)
D(z)
+
i(z)
(c)
Figure 3: Set circuits for intersection (a), union (b) and difference (c) expressed as polynomial circuits with loops using Lemma 2,
Corollary 1 and Corollary 2.
Corollary 2 (Difference constraints) Let A, B and D
be three sets of elements in F. Then D = A − B iff ∃
polynomials i(z), α(z), β(z), γ(z) and δ(z) such that
1. α(z)A(z) +β (z)B(z) = i(z).
2. D(z)i(z) = A(z).
3. δ(z)i(z) = B(z).
4.2 From Set to Polynomial Circuits
Polynomial circuits with loops. To compile a set circuit
into a circuit on polynomials, we need to check that the
constraints in Lemma 2 and Corollaries 1 and 2 simultane-
ously satisfy for all intersection, union, and set difference
gates respectively. Doing this in a straightforward manner
seems to require implementing a Boolean AND gate us-
ing polynomial algebra, which introduces an unnecessary
representation overhead.
We use a simple idea to avoid this issue, by introduc-
ing polynomial circuits with loops. This means that the
circuit’s wires, following the direction of evaluation, can
contain loops, as shown in Figure 3. When a circuit con-
tains loops, we require that there exist an assignment for
the wires such that every gate’s inputs and output are con-
sistent. It is not hard to see that we can build a QPP for a
polynomial circuit with loops.
From set circuits to polynomial circuits. Suppose we
have a set circuit C, as in Deﬁnition 1. We can compile C
into a polynomial circuit with loops F as follows:
1. Replace every intersection gate gI with the circuit
of Figure 3(a), which implements the constraints in
Lemma 2. Note that 6 additional wires per intersec-
tion gate are introduced during this compilation, 4
of which are free wires. Also, for each intersection
gate, 4 polynomial multiplication gates are added.
2. Replace every union gate gU of C with the circuit of
Figure 3(b), which implements the set of constraints
in Corollary 1. Note that 7 additional wires per
union gate are introduced during this compilation, 3
of which are free wires. Also, for each union gate, 5
polynomial multiplication gates are added.
3. Replace every difference gate gD of C with the cir-
cuit of Figure 3(c), which implements the set of
constraints in Corollary 2. Note that 7 additional
wires per union gate are introduced during this com-
pilation, 3 of which are free wires. Also, for each
difference gate, 5 polynomial multiplication gates
are added.
4.3 Asymptotic Complexity and Security
Let C be a set circuit with d gates (out of which d1 are
intersection gates and d2 are union and difference gates)
and N inputs and outputs. After compiling C into an
polynomial circuit with loops, we end up with a circuit F
with 4d1 + 5d2 multiplication gates since each intersec-
tion introduces 4 multiplication gates and each union or
difference introduces 5 multiplication gates.
Therefore, a SNARK for set circuits with d = d1 + d2
gates can be derived from a SNARK for polynomial cir-
cuits with 4d1 + 5d2 multiplication gates. Note that the
complexity of Prove for the SNARK for set circuits is
O(dν log2 ν log log ν) because the prover runs the ex-
tended Euclidean algorithm to compute the polynomials
on the free wires, which takes O(t log2 t log log t) time,
for t-degree polynomials as inputs.
Theorem 2 (Security of the SNARK for C) Let C be a
set circuit that has d total gates and N total inputs and
outputs. Let n be an upper bound on the cardinalities of
the sets on the wires of C and let q = 16d1 + 20d2 + 4,
where d1 is the number of intersection gates and d2 is
the number of union and difference gates (d = d1 + d2).
The construction above is a SNARK for the set circuit
C under the 2(n + 1)q-PKE, the (n + 1)q-PDH and the
2(n + 1)q-SDH assumptions.
We note here that there do exist known SNARK con-
structions for languages in NP that have excellent asymp-
totic behavior and are input-speciﬁc, e.g., the work of
Bitansky et al. [6], based on recursive proof composition.
772  23rd USENIX Security Symposium 
USENIX Association
Therefore, in theory, our SNARK asymptotics are the
same with the ones by Bitansky et al. [6] (when applied
to the case of set operations). However, the concrete over-
head of such techniques remains high; in fact, for most
functionalities it is hard to deduce the involved constants.
In comparison, with our approach, we can always deduce
an upper bound on the number of necessary operations
involved. We give a tight complexity analysis of our
approach in the full version of our paper [20].
4.4 Handling More Expressive Circuits
As discussed in the introduction, by moving from QAPs to
QPPs our scheme is not losing anything in expressiveness.
So far we explicitly discussed the design of efﬁcient set
circuits that only consist of set gates. Ideally, we want
to be able to efﬁciently accommodate “hybrid” circuits
that consist both of set and arithmetic operations in an
optimally tailored approach.
In this section we show how, by constructing a split
gate (and a merge gate) that upon input a set A outputs
its elements ai, we gain some “backwards compatibility”
with respect to QAPs. In particular, this allows us to com-
pute on the set elements themselves, e.g., performing MAX
or COUNT. Also, using techniques described by Parno et
al. [23], one can go one step below in the representation
hierarchy and represent ai’s in binary form which yields,
for example, more efﬁcient comparison operations.
Hence we produce a complete toolkit that a delegating
client can use for a general purpose computation, in a
way that allows it both to be more efﬁcient for the part
corresponding to set operations and at the same time per-
form arithmetic and bit operations optimally, choosing
different levels of abstraction for different parts of the
circuit.
Zero-degree assertion gate. Arithmetic values can be
naturally interpreted as zero-degree polynomials. Since
we want to securely accommodate both polynomials and
arithmetic values in our circuit, we need to construct
a gate that will constrain the values of some wires to
arithmetic values. For example, we need to assure that
the outputs of a split gate are indeed numbers (and not
higher degree polynomials).
Lemma 3 (Zero-degree constraints) Let p(z) be a uni-
variate polynomial in F[z]. The degree of p(z) is 0 iff ∃
polynomial q(z) in F[z] such that p(z)q(z) = 1.
Proof: (⇒) Every zero-degree polynomial q(z) ∈ F[z]
also belongs in F. Since every element in F has an inverse,
the claim follows. (⇐) Assume now that p(z)q(z) = 1.
Since polynomial 1 is of degree 0, p(z)q(z) must also
be of degree 0. By polynomial multiplication, we know
that p(z)q(z) has degree deg(p(z)) + deg(q(z)). Hence
deg(p(z)) = deg(q(z)) = 0.
A
SPLIT
A(z)
×
+
+
+
+
a
b
c d
a a-1
z
z
b b-1
×
×
c c-1
z
d d-1
×
×
z
1
Figure 4:
Implementation of a split gate for the set A =
{a, b, c, d}. The elements z and 1 on the wires are hard-coded
in the circuit during setup. All other polynomials on the wires
are computed by the prover.
This simple gate consists of a multiplication gate be-
tween polynomial p(z) and an auxiliary input q(z) com-
puted by the server and the output is set to the (hard-
coded) polynomial 1. If the input is indeed a zero-degree
polynomial, by the above Lemma, q(z) is easily com-
putable by the server (an inverse computation in F).
Split gate. A split gate, depicted in Figure 4, operates
as follows. On input a wire with value A(z), it outputs
n wires with the individual elements ai. First, each of
the wires carrying ai is connected to a degree-zero as-
sertion gate. This will make sure that these wires carry
arithmetic values. Second, each of these wires is used as
an input to an addition gate, with the other input being
the degree-one polynomial z. Then the outputs of all the
addition gates are multiplied together and the output of
the multiplication is connected to the wire carrying A(z).
Split gate with variable number of outputs.
In the
above we assumed that the split gate has a ﬁxed number
of outputs, n. However, the number of outputs can vary.
To accommodate this, we assume that n is an upper bound
on the number of outputs of a split gate. Now, for each
of the n output wires, we introduce an indicator variable
νi (picked by the prover) such that if νi = 1, this output
wire is occupied and carries an arithmetic value, other-
wise νi = 0. Then, in the split gate of Figure 4, instead of
(cid:31)n
i=1(z + ai) we compute(cid:31)n
i=1[νi(z + ai) + (1 − νi)].
Note here that an additional restriction we need to impose
is that νi ∈ {0, 1}. Fortunately this can be checked very
easily by adding one self-multiplication gate and a loop
wire for each value that enforces the condition νi · νi = νi
that clearly holds iff νi = 0 or 1.
Cardinality gate. One immediate side-effect of our con-
struction for split gates with variable number of outputs,
is that it indicates a way to construct another very impor-
tant type of gate, namely a cardinality gate. Imagine for
example a computation where the requested output is not
a set but only its cardinality (e.g., a COUNT SQL-query
or the Jaccard similarity index). A cardinality gate is im-
plemented exactly like a split gate, however it only has a
USENIX Association  
23rd USENIX Security Symposium  773
single output wire that is computed as(cid:31)i νi, using n − 1
addition gates over the νi wires.
Merge gate. Finally, the merge gate upon input n wires
carrying numerical values ai, outputs a single wire that
carries them as a set (i.e., its characteristic polynomial).
The construction is similar to that of the split gate, only
in reverse order. First input wires are tested to verify they
are of degree 0, with n zero-degree assertion gates. Then,
these wires are used as input for union gates, taken in
pairs, in an iterative manner (imagine a binary tree of
unions with n leaves and the output set at the root).
5 Evaluation
We now present the evaluation of TRUESET comparing
its performance with Pinocchio [23], which is the state-of-
the-art general VC scheme (already reducing computation
time by orders-of-magnitude when compared with pre-
vious implementations). We also considered alternative
candidates for comparison such as Pantry [9] which is
specialized for stateful computations. Pantry is theoret-
ically more efﬁcient than Pinocchio, as it can support a
RAM-based O(n)-time algorithm for computing set inter-
section (i.e., when the input sets are sorted), instead of the
circuit-based O(n log2 n) or O(n2) algorithms that Pinoc-
chio supports. However, evaluation showed that Pantry
requires considerable proof construction time, even for
simple memory-based operations (e.g., 92 seconds for a
single veriﬁable put operation in a memory of 8192 ad-
dresses), hence we chose to compare only with Pinocchio.
In our experiments, we analyze the performance of
TRUESET both for the case of a single set operation and
multiple set operations. We begin by presenting the details
of our implementation and the evaluation environment
and then we present the performance results.
Implementation
5.1
We built TRUESET by extending Pinocchio’s C++ imple-
mentation so that it can handle set circuits, with the special
set gates that we propose. However, since the original
implementation of Pinocchio used efﬁcient libraries for
pairing-based cryptography and ﬁeld manipulation that
are not available for public use (internal to Microsoft), the
ﬁrst step was to replace those libraries with available free
libraries that have similar characteristics. In particular, we
used the Number Theory Library (NTL) [27] along with
the GNU Multi-Precision (GMP) library [15] for polyno-
mial arithmetic, in addition to an efﬁcient free library for
ate-pairing over Barreto-Naehrig curves [4], in which the
underlying BN curve is y2 = x3 + 2 over a 254-bit prime
ﬁeld Fp that maintains a 126 bit-level of security. As in
Pinocchio, the size of the cryptographic proof produced
by our implementation is typically equal to 288 bytes in
all experiments regardless of the input or circuit sizes.
TRUESET’s executable receives an input ﬁle describing
a set circuit that contains one or more of the set gates
described earlier. The executable compiles the circuit
to a QPP in two stages. In the ﬁrst stage, the set gates
are transformed into their equivalent representation using
polynomial multiplication and addition gates, as in Fig-
ures 3 and 4, and then the QPP is formed directly in the
second stage by generating the roots, and calculating the
V , W and Y polynomials.
Optimizations. For a fair comparison, we employ the
same optimizations used for reducing the exponentiation
overhead in Pinocchio’s implementation. Concerning
polynomial arithmetic, Pinocchio’s implementation uses
an FFT approach to reduce the polynomial multiplication
costs. In our implementation, we use the NTL library,
which already provides an efﬁcient solution for polyno-
mial arithmetic based on FFT [28].
In addition to the above, the following optimizations
were found to be very useful when the number of set gates
is high, or when the set split gate is being used.
1) For key generation, we reduce the generated key size
by considering the maximum polynomial degree that can
appear on each wire, instead of assuming a global upper
bound on the polynomial degree for all wires (as described
in previous sections). This can be calculated by assuming
a maximum cardinality of the sets on the input wires, and
then iterating over the circuit wires to set the maximum
degree per wire in the worst case, e.g. the sum of the
worst case cardinalities of the input sets for the output of
a union gate, and the smaller for intersections.
2) The NTL library does not provide direct support for bi-
variate polynomial operations, needed to calculate h(x, z)
through division of p(x, z) by τ (x). Hence, instead of
doing a naive O(n2) polynomial division, we apply the
change-of-variable trick discussed in Section 3.3 to trans-
form bivariate polynomials into univariate ones that can
be handled efﬁciently with NTL FFT operations.
3) Finally, calculation of the coefﬁcients of the charac-
teristic polynomial corresponding to the output is done