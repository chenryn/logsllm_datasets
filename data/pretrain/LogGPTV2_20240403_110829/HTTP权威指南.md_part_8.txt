### 第1章

#### 1.10.1 HTTP相关资源

- **W3C 协议页面**  
  - [http://www.w3.org/Protocols/](http://www.w3.org/Protocols/)  
  该 W3C 网页提供了许多与 HTTP 协议相关的链接，是获取详细信息的宝贵资源。

- **HTTP/1.1 官方规范 (RFC2616)**  
  - [http://www.ietf.org/rfc/rfc2616.txt](http://www.ietf.org/rfc/rfc2616.txt)  
  RFC2616 是 HTTP/1.1 的官方标准文档。这是一份详尽且结构清晰的参考手册，适合对 HTTP 有深入了解需求的专业人士。但对于那些希望理解 HTTP 基础概念及其实际应用区别的读者来说，这份文档可能显得过于技术化。本书旨在补充这些基础概念，帮助读者更好地理解和使用 RFC2616。

- **HTTP/1.0 规范 (RFC1945)**  
  - [http://www.ietf.org/rfc/rfc1945.txt](http://www.ietf.org/rfc/rfc1945.txt)  
  RFC1945 描述了 HTTP/1.0 的现代基础，并详细记录了在编写此规范时已被广泛接受的最佳实践。尽管某些行为在 HTTP/1.1 中被弃用，但在一些老旧的应用程序中仍然普遍使用。

- **HTTP/0.9 介绍**  
  - [http://www.w3.org/Protocols/HTTP/AsImplemented.html](http://www.w3.org/Protocols/HTTP/AsImplemented.html)  
  该网页介绍了 1991 年发布的 HTTP/0.9 版本，仅支持 GET 请求且不包含内容类型信息。

#### 1.10.2 历史透视

- **HTTP 起源**  
  - [http://www.w3.org/Protocols/WhyHTTP.html](http://www.w3.org/Protocols/WhyHTTP.html)  
  从 1991 年开始，这篇简要的文章以 HTTP 作者的视角介绍了 HTTP 的起源和早期目标。

- **万维网简史**  
  - [http://www.w3.org/History.html](http://www.w3.org/History.html)  
  “A Little History of the World Wide Web” 对万维网和 HTTP 的早期目标及构建基础进行了简短而有趣的探讨。

- **Web 架构概览**  
  - [http://www.w3.org/DesignIssues/Architecture.html](http://www.w3.org/DesignIssues/Architecture.html)  
  “Web Architecture from 50,000 feet” 提供了一幅广阔的 Web 结构蓝图，并详细阐述了影响 HTTP 及相关 Web 技术的设计原则。

#### 1.10.3 其他万维网信息

- **W3C 主页**  
  - [http://www.w3.org](http://www.w3.org)  
  W3C 是推动 Web 技术发展的核心组织，致力于研究并推广互操作性技术（如规范、指南、软件和工具）。其网站是一个丰富的资源库，涵盖了广泛的 Web 技术简介和详细文档。

- **统一资源标识符 (URI) 通用语法 (RFC2396)**  
  - [http://www.ietf.org/rfc/rfc2396.txt](http://www.ietf.org/rfc/rfc2396.txt)  
  该文档详细定义了 URI 和 URL 的通用语法。

- **URN 语法 (RFC2141)**  
  - [http://www.ietf.org/rfc/rfc2141.txt](http://www.ietf.org/rfc/rfc2141.txt)  
  该规范于 1997 年发布，描述了 URN 的语法。

- **MIME 第二部分：媒体类型 (RFC2046)**  
  - [http://www.ietf.org/rfc/rfc2046.txt](http://www.ietf.org/rfc/rfc2046.txt)  
  作为多用途互联网邮件扩展 (MIME) 标准的一部分，该文档定义了多媒体内容管理所需的媒体类型。

- **因特网 Web 复制和缓存分类法草案**  
  - [http://www.ietf.org/Drafts/draft-ietf-wrec-taxonomy-06.txt](http://www.ietf.org/Drafts/draft-ietf-wrec-taxonomy-06.txt)  
  该草案解释了 Web 结构组件中的标准术语，有助于理解和标准化 Web 缓存和复制技术。

---

### 第2章

#### 2.1 浏览因特网资源

URL 是访问 Internet 上资源的标准命名方式。它不仅指明了资源的位置，还告诉用户如何与其交互。本章将讨论以下内容：

- URL 语法及其各个组成部分的作用；
- 许多 Web 客户端支持的 URL 快捷方式，例如相对 URL 和自动扩展 URL；
- URL 编码规则；
- 常见的 URL 方案及其在不同信息系统中的应用；
- URL 的未来发展，包括 URN——一种能够在对象迁移时保持稳定访问名称的框架。

##### 2.1.1 URL 的作用

URL 是浏览器查找信息时所需的关键位置信息。通过 URL，人类和应用程序可以找到、使用并共享 Internet 上的各种数据资源。URL 是 HTTP 和其他协议的主要入口点：当用户将浏览器指向某个 URL 时，浏览器会发送适当的协议报文来获取所需的资源。

##### 2.1.2 URI 与 URL

URI 是一个更通用的资源标识符概念，URL 是其子集之一。URI 包括两个主要子集：URL 和 URN。URL 通过描述资源的位置来标识资源，而 URN 则通过名称来标识资源，与其当前所在位置无关。虽然 HTTP 规范使用的是更通用的 URI 概念，但实际上大多数 HTTP 应用程序处理的都是 URL 子集。本书中有时会交替使用 URI 和 URL，但主要讨论的是 URL。

##### 2.1.3 URL 示例

例如，考虑 URL `http://www.joes-hardware.com/seasonal/index-fall.html`，它可以分为三个主要部分：

- **方案** (`http`)：指定使用的协议。
- **主机** (`www.joes-hardware.com`)：指出资源所在的服务器。
- **路径** (`/seasonal/index-fall.html`)：指定请求的具体资源。

图 2-1 展示了 URL 如何与浏览器、客户端、服务器以及文件系统中的位置关联。

```
http://www.joes-hardware.com/seasonal/index-fall.html
方案   主机      路径
(怎么做) (位于何处) (哪个资源)
```

##### 2.1.4 URL 的多样性

URL 不仅限于 HTTP，还可以指向各种其他类型的资源，例如电子邮件地址：

```
mailto:PI:EMAIL
```

或者通过 FTP 协议访问的文件：

```
ftp://ftp.lots-o-books.com/pub/complete-price-list.xls
```

甚至是从流媒体服务器下载视频：

```
rtsp://www.joes-hardware.com:554/interview/cto_video
```

URL 提供了一种统一的资源命名方式，使得无论谁都可以轻松找到并访问特定资源。

##### 2.1.5 URL 出现之前的挑战

在 Web 和 URL 出现之前，人们需要依赖多种不同的应用程序来访问网络中的数据。这种分散的方式导致了许多不便。例如，要与朋友共享 `complete-catalog.xls` 文件，需要给出详细的步骤说明：

“连接到 `ftp.joes-hardware.com`，使用匿名登录，输入用户名作为密码，切换到 `pub` 目录，转换为二进制模式，然后下载 `complete-catalog.xls` 文件。”

现在，像 Netscape Navigator 和 Microsoft Internet Explorer 这样的浏览器将这些功能整合在一起，通过 URL 提供了一个统一的接口。只需说“将浏览器指向 `ftp://ftp.lots-o-books.com/pub/complete-catalog.xls`”即可完成上述复杂的指令。

##### 2.2 URL 语法

URL 用于定位 Internet 上的任意资源，但由于这些资源可以通过多种不同的协议（如 HTTP、FTP、SMTP）访问，因此 URL 语法可能会有所不同。然而，大多数 URL 都遵循一个通用的格式，由九个部分组成：

```
://:@:/;?#
```

表 2-1 总结了这些组件及其默认值。

| 组件   | 描述                                                         | 默认值                |
|--------|--------------------------------------------------------------|----------------------|
| 方案   | 访问服务器时使用的协议                                       | 无                   |
| 用户   | 某些方案访问资源时需要的用户名                               | 匿名                 |
| 密码   | 用户名后可能包含的密码，中间用冒号分隔                       |                      |
| 主机   | 资源宿主服务器的主机名或 IP 地址                             | 无                   |
| 端口   | 服务器监听的端口号，每个方案都有默认端口号（HTTP 为 80）     | 每个方案特有         |
| 路径   | 服务器上资源的本地名称，由斜杠分隔                           | 无                   |
| 参数   | 某些方案用来指定输入参数，由名/值对组成                      | 无                   |
| 查询   | 传递给应用程序的参数，激活特定功能（如数据库查询）           | 无                   |
| 片段   | 资源的一部分，客户端内部使用，不会发送给服务器               | 无                   |

例如，URL `http://www.joes-hardware.com:80/index.html` 的各部分如下：
- **方案**：`http`
- **主机**：`www.joes-hardware.com`
- **端口**：`80`
- **路径**：`/index.html`

##### 2.2.1 方案——使用什么协议

方案是确定如何访问资源的主要标识符，告诉解析 URL 的应用程序应使用哪种协议。在简单的 HTTP URL 中，方案就是 `http`。方案必须以字母开头，并由第一个冒号分隔。方案名是大小写不敏感的，因此 `http://www.joes-hardware.com` 和 `HTTP://www.joes-hardware.com` 是等价的。

##### 2.2.2 主机与端口

要在 Internet 上找到资源，应用程序需要知道哪台机器装载了资源，以及在哪台机器上的哪个位置可以找到能够访问目标资源的服务器。URL 的主机和端口组件提供了这些信息。

- **主机**：标识了 Internet 上能够访问资源的宿主机器。可以用主机名（如 `www.joes-hardware.com`）或 IP 地址表示。例如，以下两个 URL 指向同一个资源：
  ```
  http://www.joes-hardware.com:80/index.html
  http://161.58.228.45:80/index.html
  ```

- **端口**：标识了服务器正在监听的网络端口。对于使用 TCP 的 HTTP，默认端口号为 80。

##### 2.2.3 用户名和密码

某些服务器要求用户提供用户名和密码才能访问数据。例如，FTP 服务器就是一个常见的例子。以下是几个示例：

```
ftp://ftp.prep.ai.mit.edu/pub/gnu
ftp://PI:EMAIL/pub/gnu
ftp://anonymous:PI:EMAIL/pub/gnu
http://joe:PI:EMAIL/sales_info.txt
```

- **第一个例子**：没有用户或密码组件，只有标准的方案、主机和路径。如果应用程序使用的 URL 方案要求输入用户名和密码，但用户没有提供，它通常会插入默认的用户名和密码。例如，如果向浏览器提供一个 FTP URL 但没有指定用户名和密码，它会插入 `anonymous` 作为用户名，并发送一个默认密码（Internet Explorer 发送 `IEUser`，Netscape Navigator 发送 `mozilla`）。

- **第二个例子**：显示了一个指定为 `anonymous` 的用户名。用户名与主机组件组合在一起，看起来像电子邮件地址。字符 `@` 将用户和密码组件与 URL 的其余部分分隔开来。

- **第三个例子**：指定了用户名 `anonymous` 和密码 `my_passwd`，两者之间用冒号分隔。