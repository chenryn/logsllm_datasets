22 ｜ 第1章
• http://www.w3.org/Protocols/
这个W3C的Web页面中包含了很多与HTTP协议有关的重要链接。
• http://www.ietf.org/rfc/rfc2616.txt
RFC2616“超文本传输协议——HTTP/1.1”是当前HTTP协议版本HTTP/1.1的官
方规范。这个规范是一本编写流畅、组织良好而且非常详细的HTTP参考手册，但
并不适于那些希望了解HTTP底层概念和动因，或者原理与实际应用之间区别的读
者阅读。希望本书能够对这些底层概念进行补充，以便读者更好地使用这个规范。
• http://www.ietf.org/rfc/rfc1945.txt
RFC1945“超文本传输协议——HTTP/1.0”是一个描述了HTTP现代基础的知识
性RFC。它对编写此规范时，已得到官方认可且具有“最佳实践”的Web应用
程序行为进行了详细描述，还讨论了一些虽被HTTP/1.1所摒弃，但在一些老旧
的应用程序中仍在广泛使用的行为。
• http://www.w3.org/Protocols/HTTP/AsImplemented.html
这个Web页面介绍了1991年的HTTP/0.9协议，这个协议只实现了GET请求，
而且不包含内容类型。 21
1.10.2 历史透视
• http://www.w3.org/Protocols/WhyHTTP.html
这个简要的Web页面从1991年开始，从HTTP作者的角度，介绍了HTTP的一
些起源以及初级目标。
• http://www.w3.org/History.html
“A Little History of the World Wide Web”（万维网的简要历史）对万维网和
HTTP的一些早期目标和构建基础进行了简短但有趣的剖析。
• http://www.w3.org/DesignIssues/Architecture.html
“Web Architecture from 50,000 feet”（高空俯瞰Web结构）绘制了一幅广阔、远
大的万维网蓝图，并详述了影响HTTP和相关Web技术的设计原则。
1.10.3 其他万维网信息
• http://www.w3.org
W3C是Web的科技驱动团队。W3C致力于促进Web演化的互操作性技术（规
范、准则、软件及工具）研究。W3C站点是一个包含了Web技术简介和详细文
档的宝库。
HTTP概述 ｜ 23
• http://www.ietf.org/rfc/rfc2396.txt
RFC 2396“Uniform Resource Identifiers（URI）：Generic Syntax”，（“统一资源
标识符（URI）：通用语法”）是URI和URL的详细参考。
• http://www.ieft.ofg/rfc/rfc2141.txt
RFC2141“URN Syntax”（“URN的语法”）是一个写于1997年的描述URN语
法的规范。
• http://www.ietf.org/rfc/rfc2046.txt
RFC2046“MIME Part 2：Media Types”（“MIME第II部分：媒体类型”）是为
进行多媒体内容管理而定义的多用途因特网邮件扩展标准的五部因特网规范中的
第二部。
• http://www.wrec.org/Drafts/draft-ietf-wrec-taxonomy-06.txt
这个因特网草案“Internet Web Replication and Caching Taxonomy”（“因特网
22 Web复制和缓存分类法”）解释了Web结构组件中的标准术语。
24 ｜ 第1章
第2章
与资源
URL
25
我们可以把因特网当作一个巨大的正在扩张的城市，里面充满了各种可看的东西，
可做的事情。你和其他居民，以及到这个正在蓬勃发展的社区旅游的游客都要为这
个城市大量的景点和服务使用标准命名规范。博物馆、饭店和家庭住址要使用街道
地址，消防局、老板的秘书，以及抱怨你太少打电话给她的母亲要使用电话号码。
所有的东西都有一个标准化的名字，以帮助人们寻找城市中的各种资源。书籍有
ISBN号，公交车有线路号，银行账户有账户编码，个人有社会保险号码。明天，
你要到机场的31号出口去接你的生意伙伴。每天早上你都要乘坐红线火车，并在
Kendall广场站出站。
所有人都对这些名字的标准达成了一致，所以才能方便地共享这座城市的宝藏。你
告诉出租车司机把你载到McAllister大街246号，他就知道你是什么意思了（即使
他走的是一条很远的路）。
URL就是因特网资源的标准化名称。URL指向一条电子信息片段，告诉你它们位于
何处，以及如何与之进行交互。
本章，我们将介绍以下内容：
• URL语法，以及各种URL组件的含义及其所做的工作；
• 很多Web客户端都支持的URL快捷方式，包括相对URL和自动扩展URL；
• URL编码和字符规则；
• 支持各种因特网信息系统的常见URL方案；
• URL的未来，包括URN——这种框架可以在对象从一处搬移到另一处时，保持
23 稳定的访问名称。
2.1 浏览因特网资源
URL是浏览器寻找信息时所需的资源位置。通过URL，人类和应用程序才能找到、
使用并共享因特网上大量的数据资源。URL是人们对HTTP和其他协议的常用访问
点：一个人将浏览器指向一个URL，浏览器就会在幕后发送适当的协议报文来获取
人们所期望的资源。
URI是一类更通用的资源标识符，URL实际上是它的一个子集。URI是一个通用的
概念，由两个主要的子集URL和URN构成，URL是通过描述资源的位置来标识资
源的，而URN（本章稍后会介绍）则是通过名字来识别资源的，与它们当前所处位
置无关。
HTTP规范将更通用的概念URI作为其资源标识符，但实际上，HTTP应用程序处
理的只是URI的URL子集。本书有时会不加区分地使用URI和URL，但我们讲的
基本上都是URL。
26 ｜ 第2章
比如说，你想要获取URL http://www.joes-hardware.com/seasonal/index-fall.html。
那么URL分以下三部分。
• URL的第一部分（http）是URL方案（scheme）。方案可以告知Web客户端怎
样访问资源。在这个例子中，URL说明要使用HTTP协议。
• URL的第二部分（www.joes-hardware.com）指的是服务器的位置。这部分告知
Web客户端资源位于何处。
• URL的第三部分（/seasonal/index-fall.html）是资源路径。路径说明了请求的是
服务器上哪个特定的本地资源。
对此的说明请参见图2-1。
http://www.joes-hardware.com/seasonal/index-fall.html
方案 主机 路径
（怎样做） （位于何处） （哪个资源）
Web页面
index-fall.html
客户端 服务器 磁盘
图2-1 URL是怎样与浏览器、客户端、服务器以及服务器文件系统中的位置进行关联的
URL可以通过HTTP之外的其他协议来访问资源。它们可以指向因特网上的任意资
源，或者个人的E-mail账户：
mailto:PI:EMAIL 24
或者通过其他协议（比如FTP协议）访问的各种文件：
ftp://ftp.lots-o-books.com/pub/complete-price-list.xls
或者从流视频服务器上下载电影：
rtsp://www.joes-hardware.com:554/interview/cto_video
URL提供了一种统一的资源命名方式。大多数URL都有同样的：“方案://服务器
位置/路径”结构。因此，对网络上的每个资源以及获取这些资源的每种方式来说，
命名资源的方法都只有一种，这样不管是谁都可以用名字来找到这个资源了。但是，
事情并不是一开始就是这样的。
URL与资源 ｜ 27
URL出现之前的黑暗岁月
在Web和URL出现之前，人们要靠分类杂乱的应用程序来访问分布在网络中的数
据。大多数人都不会幸运地拥有所有合适的应用程序，或者不能够理解，也没有足
够的耐心来使用这些程序。
在URL出现之前，要想和朋友共享complete-catalog.xls文件，就得说这样一些话：
“用FTP连接到ftp.joes-hardware.com上。用匿名登录，然后输入你的用户名作为密
码。变换到pub目录。转换为二进制模式。现在，可以将名为complete-catalog.xls
的文件下载到本地文件系统，并在那里浏览这个文件了。”
现在，像网景的Navigator和微软的Internet Explorer这样的浏览器都将很多这样
的功能捆绑成一个便捷包。通过URL，这些应用程序就可以通过一个接口，以统
一的方式去访问许多资源了。只要说“将浏览器指向ftp://ftp.lots-o-books.com/pub/
complete-catalog.xls”就可以取代上面那些复杂的指令了。
URL为应用程序提供了一种访问资源的手段。实际上，很多用户可能都不知道他们
的浏览器在获取所请求资源时所使用的协议和访问方法。
有了Web浏览器，就不再需要用新闻阅读器来阅读因特网新闻，或者用FTP客户
端来访问FTP服务器上的文件了，而且也无需用电子邮件程序来收发E-mail报文
了。URL告知浏览器如何对资源进行访问和处理，这有助于简化复杂的网络世界。1
应用程序可以使用URL来简化信息的访问过程。
URL为用户及他们的浏览器提供了找到信息所需的所有条件。URL定义了用户所需
25 的特定资源，它位于何处以及如何获取它。
2.2 URL的语法
URL提供了一种定位因特网上任意资源的手段，但这些资源是可以通过各种不同的
方案（比如HTTP、FTP、SMTP）来访问的，因此URL语法会随方案的不同而有
所不同。
这是不是意味着每种不同的URL方案都会有完全不同的语法呢？实际上，不是的。
大部分URL都遵循通用的URL语法，而且不同URL方案的风格和语法都有不少重叠。
注1： 浏览器通常会用其他应用程序来处理特殊的资源。比如，Internet Explorer就启动了一个E-mail应用
程序来处理那些表示E-mail资源的URL。
28 ｜ 第2章
大多数URL方案的URL语法都建立在这个由9部分构成的通用格式上：
://:@:/;?#
几乎没有哪个URL中包含了所有这些组件。URL最重要的3个部分是方案（scheme）、
主机（host）和路径（path）。表2-1对各种组件进行了总结。
表2-1 通用URL组件
组 件 描 述 默 认 值
方案 访问服务器以获取资源时要使用哪种协议 无
用户 某些方案访问资源时需要的用户名 匿名
密码 用户名后面可能要包含的密码，中间由冒号（:）分隔 
主机 资源宿主服务器的主机名或点分IP地址 无
端口 资源宿主服务器正在监听的端口号。很多方案都有默认端 每个方案特有
口号（HTTP的默认端口号为80）
路径 服务器上资源的本地名，由一个斜杠（/）将其与前面的 无
URL组件分隔开来。路径组件的语法是与服务器和方案有
关的（本章稍后会讲到URL路径可以分为若干个段，每
段都可以有其特有的组件。）
参数 某些方案会用这个组件来指定输入参数。参数为名/值对。 无
URL中可以包含多个参数字段，它们相互之间以及与路径
的其余部分之间用分号（;）分隔
查询 某些方案会用这个组件传递参数以激活应用程序（比如数 无
据库、公告板、搜索引擎以及其他因特网网关）。查询组
件的内容没有通用格式。用字符“?”将其与URL的其余
部分分隔开来
片段 一小片或一部分资源的名字。引用对象时，不会将frag字 无
段传送给服务器；这个字段是在客户端内部使用的。通过
字符“#”将其与URL的其余部分分隔开来
比如，我们来看看URL：http://www.joes-hardware.com:80/index.html，其方案是http，
主机为www.joes-hardware.com，端口是80，路径为/index.html。 26
2.2.1 方案——使用什么协议
方案实际上是规定如何访问指定资源的主要标识符，它会告诉负责解析URL的应用
程序应该使用什么协议。在我们这个简单的HTTP URL中所使用的方案就是http。
方案组件必须以一个字母符号开始，由第一个“:”符号将其与URL的其余部分分
隔开来。方案名是大小写无关的，因此URL“http://www.joes-hardware.com”和
“HTTP://www.joes-hardware.com”是等价的。
URL与资源 ｜ 29
2.2.2 主机与端口
要想在因特网上找到资源，应用程序要知道是哪台机器装载了资源，以及在那台机
器的什么地方可以找到能对目标资源进行访问的服务器。URL的主机和端口组件提
供了这两组信息。
主机组件标识了因特网上能够访问资源的宿主机器。可以用上述主机名（www.joes-
hardware.com），或者IP地址来表示主机名。比如，下面两个URL就指向同一个资
源——第一个URL是通过主机名，第二个是通过IP地址指向服务器的：
http://www.joes-hardware.com:80/index.html
http://161.58.228.45:80/index.html
端口组件标识了服务器正在监听的网络端口。对下层使用了TCP协议的HTTP来
说，默认端口号为80。
2.2.3 用户名和密码
更有趣的组件是用户和密码组件。很多服务器都要求输入用户名和密码才会允许用
户访问数据。FTP服务器就是这样一个常见的实例。这里有几个例子：
ftp://ftp.prep.ai.mit.edu/pub/gnu
ftp://PI:EMAIL/pub/gnu
ftp://anonymous:PI:EMAIL/pub/gnu
http://joe:PI:EMAIL/sales_info.txt
第一个例子没有用户或密码组件，只有标准的方案、主机和路径。如果某应用程
序使用的URL方案要求输入用户名和密码，比如FTP，但用户没有提供，它通常
会插入一个默认的用户名和密码。比如，如果向浏览器提供一个FTP URL，但没
27 有指定用户名和密码，它就会插入anonymous（匿名用户）作为你的用户名，并发
送一个默认的密码（Internet Explorer会发送IEUser，Netscape Navigator则会发送
mozilla）。
第二个例子显示了一个指定为anonymous的用户名。这个用户名与主机组件组合在
一起，看起来就像E-mail地址一样。字符“@”将用户和密码组件与URL的其余
部分分隔开来。
在第三个例子中，指定了用户名（anonymous）和密码（my_passwd），两者之间由