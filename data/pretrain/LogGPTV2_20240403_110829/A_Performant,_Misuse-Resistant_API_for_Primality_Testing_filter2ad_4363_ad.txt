# Optimized Text

## Table 3: Number of Rounds of MR Testing Needed to Identify Composite 1024-bit Numbers
The table below shows the number of rounds of Miller-Rabin (MR) testing required to identify composite 1024-bit numbers of the form \( n = (2x + 1)(4x + 1) \) with \( 2x + 1 \) and \( 4x + 1 \) being prime, from an initial set of 220 candidates. MRAC performs only 5 rounds of MR testing for this bit-size and failed to identify exactly 1000 candidates.

| Number of Rounds | Frequency |
|-----------------|-----------|
| 6               | 787054    |
| 7               | 786765    |
| 8               | 196110    |
| 9               | 196268    |
| 10              | 49305     |
| 11              | 12103     |
| 12              | 3129      |
| 13              | 776       |
| 14              | 169       |
| 15              | 44        |
| 16              | 13        |
| 17              | 4         |

## Experimental and Theoretical Performance of MRAC and MR64
Figures 5, 6, and 7 show the experimental and theoretical performance of MRAC and MR64 on random, odd inputs of 512, 2048, and 3072 bits, respectively, for varying amounts of trial division, \( r \).

### Figure 5: 512-bit Input
### Figure 6: 2048-bit Input
### Figure 7: 3072-bit Input

## Selecting a Primality Test
We select MR64 with the amount of trial division, \( r \), depending on the input size as our preferred primality test. Our reasons are as follows:

- **Security Guarantees**: MR64 provides strong security guarantees across all use cases, unlike MRAC and BPSW. These guarantees can be improved by switching to MR128, but we consider the guarantees of MR64 to be sufficient for most requirements.
- **Ease of Implementation**: MR64 is easy to implement, while tests like BPSW require significant additional code.
- **Performance**: MR64 with an input-size-dependent choice of \( r \) outperforms the current approach used in OpenSSL (MRAC with fixed \( r = 2047 \)) up to 1024 bits and remains competitive even for larger inputs.
- **Simple API**: MR64 permits a simple API with a single input (the number being tested) and a single output (whether the input is composite or probably prime), while still allowing input-size-dependent tuning of \( r \).

### Recommended Values of \( r \) for MR64
| Input Size (k)   | Recommended \( r \) |
|-----------------|---------------------|
| \( k \in [1, 512] \) | 64                  |
| \( k \in [513, 1024] \) | 128                |
| \( k \in [1025, 2048] \) | 384                |
| \( k \in [2049, 3072] \) | 768                |
| \( k \in [3073, \infty) \) | 1024              |

Further small improvements in performance could be obtained by more precise setting of \( r \) values and further partitioning the set of \( k \) values, but the gains would be marginal.

## Prime Generation
In this section, we assess the impact of our choice of primality test on a key use case: prime generation. We focus on the scenario where our primality test is used as a drop-in replacement for the existing primality test in OpenSSL, without modifying the prime generation code.

### Experimental Approach
To establish a benchmark, we first use OpenSSL’s prime number generating function `BN_generate_prime_ex` as it appears in the standard library. This involves sieving with \( s = 2047 \) primes and using the OpenSSL primality test that consumes \( t \) rounds of MR testing on a sequence of candidates \( n, n + 2, \ldots \), restarting the procedure whenever an MR test fails. Here, \( t \) is determined as in Table 1 (i.e., the test is what we call MRAC). OpenSSL exploits the rich API of its primality test to switch off trial division in the primality tests, as the trial division is already taken care of by the cheaper sieving step.

Next, we change the underlying primality test to use our selected test: MR64 with input-length-dependent trial division (as per Table 4), keeping all other aspects of OpenSSL’s prime generation procedure the same. All the trial division done in our underlying primality test is redundant because of the sieving step carried out in OpenSSL’s prime generation code. However, with our deliberately simplified API for primality testing, that extra work would be unavoidable. Similarly, our underlying primality test performs more rounds of MR testing (64 instead of the 3-5 used in MRAC) when a prime is finally encountered.

### Experimental Results
Table 5 shows the running time (in milliseconds) for primality generation using our proposed primality test (MR64 with input-length-dependent trial division) and the current OpenSSL primality test (MRAC with no trial division). Each timing is based on 220 trials.

| Input Size (k) | \( r \) Used | MR64 (ms) | MRAC (ms) | Overhead (%) |
|---------------|-------------|-----------|-----------|--------------|
| 512           | 64          | 12.37     | 8.859     | 40%          |
| 1024          | 128         | 60.83     | 45.20     | 35%          |
| 2048          | 384         | 385.2     | 268.5     | 43%          |
| 3072          | 768         | 1379      | 946.7     | 46%          |

The overhead of switching to our primality test in this use case ranges between 35% and 46%. This is a significant cost, but the gain is a primality test that has strong security guarantees across all use cases, along with a simple and developer-friendly API.

## Implementation and Integration in OpenSSL
We communicated our findings to the OpenSSL development team, specifically to Kurt Roeckx, one of the OpenSSL core developers. He conducted his own performance testing and concluded that our new API and primality test should be deployed in OpenSSL. These changes are slated for inclusion in OpenSSL 3.0, scheduled for release in Q4 2020.

### Changes Made
- **New API**: A new, external-facing function is included:
  ```c
  int BN_check_prime(const BIGNUM *p, BN_CTX *ctx, BN_GENCB *cb) {
      return bn_check_prime_int(p, 0, ctx, 1, cb);
  }
  ```
  This code wraps the existing "internal" primality testing function `bn_check_prime_int`. Note that the API has 3 parameters instead of our desired 1: OpenSSL still needs to pass pointers to context and callback objects for programmatic reasons.
- **Internal Primality Testing Function**: Updated to do a minimum of 64 rounds of MR testing (and 128 rounds for 2048+ bit inputs). This deviates slightly from our recommendation to always do 64 rounds of testing, but it is more conservative. The average case analysis of [DLP93] is no longer used to set the number of rounds of MR testing in the default case. A small table determines how many primes to use in trial division; the numbers are aligned with our recommendations in Table 4.
- **Rest of the OpenSSL Codebase**: Updated to use the new API, except for the prime generation code, which now uses a third internal function for its primality testing:
  ```c
  bn_is_prime_int(ret, checks, ctx, 0, cb);
  ```
  Here, `checks` determines the number of rounds of MR testing done, and is set to either 64 or 128 according to the input size. In the call, "0" indicates that trial division is no longer done. The number of MR rounds here could have been set based on average case performance, but the OpenSSL developers opted for simplicity over performance.
- **Deprecated APIs**: The old and complex external-facing APIs in the functions `BN_is_prime_ex` and `BN_is_prime_fasttest_ex` have been marked for deprecation in OpenSSL 3.0. They will only be included in a build of the library if the environmental variable `OPENSSL_NO_DEPRECATED_3_0` is set.

## Reference Implementation of Baillie-PSW
For completeness, a reference implementation of the Baillie-PSW test as it could be implemented in OpenSSL is provided in Appendix B. This also helps to provide an understanding of the increase in code complexity involved in using this test.

## Conclusions and Future Work
We have proposed a primality test that is both performant and misuse-resistant, presenting a simplest-possible interface for developers. The test balances code simplicity, performance, and security guarantees across all use cases. Our recommendations—both for the API and for the underlying primality test—have been adopted in full by OpenSSL and are scheduled for inclusion in OpenSSL 3.0, expected to be released in Q4 2020.

Future work could extend our study to consider the efficiency of safe-prime generation and the impact of the amount of sieving on the performance of prime generation at different input lengths. Additionally, a systematic study of prime generation code in different cryptographic libraries could be beneficial. Our work addresses a specific instance of the problem of designing simple, performant, and misuse-resistant APIs for cryptography, which may yield significant rewards for the security of cryptographic software.

### Acknowledgements
We thank Yehuda Lindell for posing the question that led to this research and Kurt Roeckx for valuable discussions. Massimo was supported by the EPSRC and the UK government as part of the Centre for Doctoral Training in Cyber Security at Royal Holloway, University of London (EP/K035584/1).

### References
[ABF+17] Yasemin Acar, Michael Backes, Sascha Fahl, Simson L. Garfinkel, Doowon Kim, Michelle L. Mazurek, and Christian Stransky. Comparing the usability of cryptographic APIs. In 2017 IEEE Symposium on Security and Privacy, pages 154–171. IEEE Computer Society Press, May 2017.

[AFM16] Yasemin Acar, Sascha Fahl, and Michelle L. Mazurek. You are not your developer, either: A research agenda for usable security and privacy research beyond end users. In IEEE Cybersecurity Development, SecDev 2016, Boston, MA, USA, November 3-4, 2016, pages 3–8. IEEE Computer Society, 2016.

[Arn97] François Arnault. The Rabin-Monier theorem for Lucas pseudoprimes. Mathematics of Computation of the American Mathematical Society, 66(218):869–881, 1997.

[AMPS18] Martin R. Albrecht, Jake Massimo, Kenneth G. Paterson, and Juraj Somorovsky. Prime and prejudice: Primality testing under adversarial conditions. In Lie et al. [LMBW18], pages 281–298.

[BD93] Jørgen Brandt and Ivan Damgård. On generation of probable primes by incremental search. In Ernest F. Brickell, editor, CRYPTO’92, volume 740 of LNCS, pages 358–370. Springer, Heidelberg, August 1993.

[BDF+14] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Alfredo Pironti, and Pierre-Yves Strub. Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS. In 2014 IEEE Symposium on Security and Privacy, pages 98–113. IEEE Computer Society Press, May 2014.

[Ber06] Daniel J. Bernstein. Curve25519: New Diffie-Hellman speed records. In Moti Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal Malkin, editors, PKC 2006, volume 3958 of LNCS, pages 207–228. Springer, Heidelberg, April 2006.

[Ble05] Daniel Bleichenbacher. Breaking a cryptographic protocol with pseudo-primes. In Serge Vaudenay, editor, PKC 2005, volume 3386 of LNCS, pages 9–15. Springer, Heidelberg, January 2005.

[BHMS16] Colin Boyd, Britta Hale, Stig Frode Mjølsnes, and Douglas Stebila. From stateless to stateful: Generic authentication and authenticated encryption constructions with application to TLS. In Kazue Sako, editor, CT-RSA 2016, volume 9610 of LNCS, pages 55–71. Springer, Heidelberg, February / March 2016.

[BLS12] Daniel J. Bernstein, Tanja Lange, and Peter Schwabe. The security impact of a new cryptographic library. In Alejandro Hevia and Gregory Neven, editors, LATINCRYPT 2012, volume 7533 of LNCS, pages 159–176. Springer, Heidelberg, October 2012.

[BW80] Robert Baillie and Samuel S Wagstaff. Lucas pseudoprimes. Mathematics of Computation, 35(152):1391–1417, 1980.

[BZD+16] Hanno Böck, Aaron Zauner, Sean Devlin, Juraj Somorovsky, and Philipp Jovanovic. Nonce-disrespecting adversaries: Practical forgery attacks on GCM in TLS. In Natalie Silvanovich and Patrick Traynor, editors, 10th USENIX Workshop on Offensive Technologies, WOOT 16, Austin, TX, USA, August 8-9, 2016. USENIX Association, 2016.