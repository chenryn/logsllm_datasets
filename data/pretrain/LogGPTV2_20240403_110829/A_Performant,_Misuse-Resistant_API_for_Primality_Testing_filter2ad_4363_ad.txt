6
7
8
9
10
787054 786765
196110 196268
49305
12103
3129
776
169
44
13
4
49167
12157
4088
–
–
–
–
–
Table 3. Number of rounds of MR testing needed to identify as composite 1024-bit
numbers of the form n = (2x + 1)(4x + 1) with 2x + 1, 4x + 1 prime from an initial set
of 220 candidates. MRAC only performs 5 rounds of MR testing for this bit-size and
failed to identify exactly 1000 candidates.
is quite small, and MRAC consistently comes out ahead of MR64 (but recall that
MRAC is unsafe for maliciously chosen inputs).
These experiments conﬁrm our earlier observation: the choice of r, the amount
of trial division, can have a signiﬁcant eﬀect on running time of primality tests,
and should be taken into account when selecting a test.
Fig. 5. Experimental and theoretical performance of MRAC and MR64 on random,
odd, 512-bit input for varying amounts of trial division, r.
3.7 Selecting a Primality Test
We select MR64 with the amount of trial division, r, depending on the input size
as our preferred primality test. Our reasons are as follows:
Fig. 6. Experimental and theoretical performance of MRAC and MR64 on random,
odd, 2048-bit input for varying amounts of trial division, r.
Fig. 7. Experimental and theoretical performance of MRAC and MR64 on random,
odd, 3072-bit input for varying amounts of trial division, r.
k
k ∈ [1, 512]
k ∈ [513, 1024]
k ∈ [1025, 2048]
k ∈ [2049, 3072]
k ∈ [3073,∞)
r
64
128
384
768
1024
Table 4. Recommended values of r for use with the MR64 primality test.
– MR64 has strong security guarantees across all use cases (unlike MRAC and
BPSW). These guarantees can be improved by switching to MR128, but we
consider the guarantees of MR64 to be suﬃcient for perhaps all but the most
stringent requirements.
– MR64 is easy to implement, while a test like BPSW requires signiﬁcant
additional code (see supplementary material).
– MR64 with an input-size-dependent choice of r outperforms the current
approach used in OpenSSL (MRAC with ﬁxed r = 2047) up to k = 1024 and
remains competitive with MRAC even for larger inputs. (Obviously OpenSSL
could also be made faster by tuning r, but this would not improve security
for malicious inputs).
– MR64 permits a very simple API, with a single input (the number being
tested) and a single output (whether the input was composite or probably
prime), whilst still allowing input-size-dependent tuning of r.
Table 4 shows our recommended values of r to use with MR64, based on the
experimental results obtained above. Further small improvements in performance
could be obtained by being more precise in setting r values and by further
partitioning the set of k values, but the gains would be marginal.
We further validate this selection of MR64 in the next section, where we
examine the performance of diﬀerent tests when used as part of prime generation
(as opposed to testing).
4 Prime Generation
In this section, we want to assess the impact of our choice of primality test on a
key use case, prime generation. We focus on the scenario where our primality
test is used as a drop-in replacement for the existing primality test in OpenSSL,
without making any modiﬁcations to the prime generation code. We are not
suggesting this should be done in practice, but merely evaluating the impact on
a strawman application when switching to our proposed test.
4.1 Experimental Approach
In order to establish a benchmark, we ﬁrst use OpenSSL’s prime number gener-
ating function BN generate prime ex as it appears in the standard library. As
k r used MR64 MRAC Overhead
512
1024
2048
3072
64
128
384
768
12.37
60.83
385.2
1379
8.859
45.20
268.5
946.7
40%
35%
43%
46%
Table 5. Running time (in ms) for primality generation using our proposed primality
test (MR64 with input-length-dependent trial division) and current OpenSSL primality
test (MRAC with no trial division). Each timing is based on 220 trials.
discussed in detail in Section 2.2, this involves sieving with s = 2047 primes
and using the OpenSSL primality test that consumes t rounds of MR testing
on a sequence of candidates n, n + 2, . . ., restarting the procedure from scratch
whenever an MR test fails. Here t is determined as in Table 1 (i.e. the test is what
we call MRAC). Importantly, OpenSSL exploits the rich API of its primality
test to switch oﬀ trial division in the primality tests, since that trial division is
already taken care of by the cheaper sieving step.
Next, we change the underlying primality test to use our selected test: MR64
with input-length-dependent trial division (as per Table 4), keeping all other
aspects of OpenSSL’s prime generation procedure the same. All the trial division
done in our underlying primality test is of course redundant, because of the
sieving step carried out in OpenSSL’s prime generation code. However, with
our deliberately simpliﬁed API for primality testing, that extra work would be
unavoidable. Similarly, our underlying primality test performs more rounds of MR
testing (64 instead of the 3-5 used in MRAC) when a prime is ﬁnally encountered.
It is the amount of this extra work that we seek to quantify here.
Our experimental results are shown in Table 5. It can be seen that the
overhead of switching to our primality test in this use case ranges between 35%
and 46%. This is a signiﬁcant cost for this use case, but recall that the gain is a
primality test that has strong security guarantees across all use cases, along with
a simple and developer-friendly API.
We can build simple cost models which illustrate the performance diﬀerences
we have observed; see also [Mau95] for a similar model. Details are deferred to
Appendix A
5
Implementation and Integration in OpenSSL
We communicated our ﬁndings to the OpenSSL development team, speciﬁcally to
Kurt Roeckx, one of the OpenSSL core developers. He did his own performance
testing, and concluded that our new API and primality test should be deployed
in OpenSSL. In personal communication with Roeckx, we were informed that
these changes are slated for inclusion in OpenSSL 3.0, which is scheduled for
release in Q4 of 2020.
In more detail, the following changes were made:
– Our proposed API is included via a new, external facing function (see
https://github.com/openssl/openssl/blob/master/crypto/bn/bn prime.c#L253):
int BN_check_prime(const BIGNUM *p, BN_CTX *ctx, BN_GENCB *cb)
{
return bn_check_prime_int(p, 0, ctx, 1, cb);
}
This code wraps the existing “internal” primality testing function
bn check prime int. Note that the API has 3 parameters, instead of our
desired 1: OpenSSL still needs to pass pointers to context and callback objects
for programmatic reasons.
– The “internal” primality testing function bn check prime int has been
updated to do a minimum of 64 rounds of MR testing (and 128 rounds
for 2048+ bit inputs). This deviates slightly from our recommendation to
always do 64 rounds of testing – it is more conservative. Note that the
average case analysis of [DLP93] is no longer used to set the number of
rounds of MR testing in the default case. This function also uses a small
table to determine how many primes to use in trial division; the numbers are
aligned with our recommendations in Table 4. Details are in the new function
calc trial divisions.10
– The rest of the OpenSSL codebase has been updated to use the new API,
except for the prime generation code. That code has also been updated (see
https://github.com/openssl/openssl/blob/master/crypto/bn/bn prime.c#L123).
It now uses yet a third internal function for its primality testing (see
bn prime.c#L170):
bn_is_prime_int(ret, checks, ctx, 0, cb);
Here, checks determines the number of rounds of MR testing done, and is
set to either 64 or 128 according to the input size. In the call, ”0” indicates
that trial division is no longer done. The number of MR rounds here could
have been set based on average case performance, as was formerly the case,
rather than worst case, but it seems the OpenSSL developers have opted for
simplicity over performance. Not doing trial division inside the primality test
is appropriate here because the inputs have already been sieved to remove
numbers with small prime factors by this point.
– The “old” and complex external-facing APIs in the functions BN is prime ex
and BN is prime fasttest ex have been marked for deprecation in OpenSSL
3.0: they will only be included in a build of the library in case the environ-
mental variable OPENSSL NO DEPRECATED 3 0 is set (see
https://www.openssl.org/docs/manmaster/man3/BN is prime fasttest ex.html
for details).
10 See https://github.com/openssl/openssl/blob/master/crypto/bn/bn prime.c#L74.
5.1 Reference Implementation of Baillie-PSW
For completeness, in Appendix B, we give a reference implementation of the
Baillie-PSW test as it could be implemented in OpenSSL. This also helps to
provide an understanding of the increase in code complexity involved in using
this test.
6 Conclusions and Future Work
We have proposed a primality test that is both performant and misuse-resistant,
in the sense of presenting a simplest-possible interface for developers. The test
balances code simplicity, performance, and security guarantees across all use
cases. We have not seen a detailed treatment of this fundamental problem in
the literature before, despite the by-now classical nature of primality testing
as a cryptographic task. Our recommendations – both for the API and for the
underlying primality test – have been adopted in full by OpenSSL and are
scheduled for inclusion in OpenSSL 3.0, which is expected to be released in Q4
2020.11
We have focussed in this work on regular prime generation. Our work could be
extended to consider eﬃciency of safe-prime generation. Special sieving procedures
can be used in this case: if one creates a table of values n mod pi, then one can
also test 2n + 1 for divisibility by each of the pi very cheaply; techniques like this
were used in [GMP19] in a slightly diﬀerent context. Further work is also needed
to fully assess the impact of the amount of sieving (s) on the performance of
prime generation at diﬀerent input lengths (k). Our work could also be extended
to make a systematic study of prime generation code in diﬀerent cryptographic
libraries. For example, we have already noted that the OpenSSL code aborts and
restarts whenever a Miller-Rabin test fails; this behaviour leads to sub-optimal
performance, and it would be interesting to see how much the code in OpenSSL
and in other leading libraries could be improved
One can view our work as addressing a speciﬁc instance of the problem of
how to design simple, performant, misuse-resistant APIs for cryptography. In our
discussion of related work, we highlighted other work where this problem has also
been considered, in symmetric encryption, key exchange, and secure channels. A
broader research eﬀort in this direction seems likely to yield signiﬁcant rewards
for the security of cryptographic software. As here, it may occasionally also yield
improved performance.
Acknowledgements
We thank Yehuda Lindell for posing the question that led to this research. We
also thank Kurt Roeckx for valuable discussions.
Massimo was supported by the EPSRC and the UK government as part of
the Centre for Doctoral Training in Cyber Security at Royal Holloway, University
of London (EP/K035584/1).
11 See https://www.openssl.org/blog/blog/2019/11/07/3.0-update/.
References
[ABF+17] Yasemin Acar, Michael Backes, Sascha Fahl, Simson L. Garﬁnkel, Doowon
Kim, Michelle L. Mazurek, and Christian Stransky. Comparing the usability
of cryptographic APIs. In 2017 IEEE Symposium on Security and Privacy,
pages 154–171. IEEE Computer Society Press, May 2017.
[AFM16] Yasemin Acar, Sascha Fahl, and Michelle L. Mazurek. You are not your
developer, either: A research agenda for usable security and privacy research
beyond end users.
In IEEE Cybersecurity Development, SecDev 2016,
Boston, MA, USA, November 3-4, 2016, pages 3–8. IEEE Computer Society,
2016.
[Arn97]
[AMPS18] Martin R. Albrecht, Jake Massimo, Kenneth G. Paterson, and Juraj So-
morovsky. Prime and prejudice: Primality testing under adversarial condi-
tions. In Lie et al. [LMBW18], pages 281–298.
Fran¸cois Arnault. The Rabin-Monier theorem for Lucas pseudoprimes. Math-
ematics of Computation of the American Mathematical Society, 66(218):869–
881, 1997.
Jørgen Brandt and Ivan Damg˚ard. On generation of probable primes by
incremental search. In Ernest F. Brickell, editor, CRYPTO’92, volume 740
of LNCS, pages 358–370. Springer, Heidelberg, August 1993.
[BD93]
[BDF+14] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, C´edric Fournet, Alfredo
Pironti, and Pierre-Yves Strub. Triple handshakes and cookie cutters:
Breaking and ﬁxing authentication over TLS. In 2014 IEEE Symposium on
Security and Privacy, pages 98–113. IEEE Computer Society Press, May
2014.
Daniel J. Bernstein. Curve25519: New Diﬃe-Hellman speed records. In Moti
Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal Malkin, editors, PKC 2006,
volume 3958 of LNCS, pages 207–228. Springer, Heidelberg, April 2006.
[Ber06]
[Ble05]
[BHMS16] Colin Boyd, Britta Hale, Stig Frode Mjølsnes, and Douglas Stebila. From
stateless to stateful: Generic authentication and authenticated encryption
constructions with application to TLS. In Kazue Sako, editor, CT-RSA 2016,
volume 9610 of LNCS, pages 55–71. Springer, Heidelberg, February / March
2016.
Daniel Bleichenbacher. Breaking a cryptographic protocol with pseudo-
primes. In Serge Vaudenay, editor, PKC 2005, volume 3386 of LNCS, pages
9–15. Springer, Heidelberg, January 2005.
Daniel J. Bernstein, Tanja Lange, and Peter Schwabe. The security impact
of a new cryptographic library. In Alejandro Hevia and Gregory Neven,
editors, LATINCRYPT 2012, volume 7533 of LNCS, pages 159–176. Springer,
Heidelberg, October 2012.
Robert Baillie and Samuel S Wagstaﬀ. Lucas pseudoprimes. Mathematics
of Computation, 35(152):1391–1417, 1980.
[BLS12]
[BW80]
[BZD+16] Hanno B¨ock, Aaron Zauner, Sean Devlin, Juraj Somorovsky, and Philipp
Jovanovic. Nonce-disrespecting adversaries: Practical forgery attacks on
GCM in TLS. In Natalie Silvanovich and Patrick Traynor, editors, 10th
USENIX Workshop on Oﬀensive Technologies, WOOT 16, Austin, TX,
USA, August 8-9, 2016. USENIX Association, 2016.