2、树状查询, 检查数据正确性:  
```  
postgres=# select * from tbl order by i desc limit 10;  
 i  |  uid   |  pid   |   ov   |   bv   |   ev     
----+--------+--------+--------+--------+--------  
 10 | 422022 | 211152 | 128001 | 256001 | 512000  
 10 | 319457 | 177504 | 128001 | 256001 | 512000  
 10 | 365158 | 225100 | 128001 | 256001 | 512000  
 10 | 305380 | 202854 | 128001 | 256001 | 512000  
 10 | 444266 | 134791 | 128001 | 256001 | 512000  
 10 | 429983 | 228843 | 128001 | 256001 | 512000  
 10 | 309812 | 229131 | 128001 | 256001 | 512000  
 10 | 344910 | 201146 | 128001 | 256001 | 512000  
 10 | 366060 | 243893 | 128001 | 256001 | 512000  
 10 | 346565 | 211760 | 128001 | 256001 | 512000  
(10 rows)  
```  
递归检查  
```  
with recursive tmp as (      
select uid,pid,i::text from tbl where uid=305380        
union all        
select tbl.uid,tbl.pid,tbl.i||'.'||tmp.i from tbl join tmp on (tmp.pid=tbl.uid)      
)        
select uid,pid,i from tmp;  
  uid   |  pid   |          i             
--------+--------+----------------------  
 305380 | 202854 | 10  
 202854 | 106128 | 9.10  
 106128 |  52115 | 8.9.10  
  52115 |  31205 | 7.8.9.10  
  31205 |  14833 | 6.7.8.9.10  
  14833 |   6296 | 5.6.7.8.9.10  
   6296 |   3902 | 4.5.6.7.8.9.10  
   3902 |   1662 | 3.4.5.6.7.8.9.10  
   1662 |    195 | 2.3.4.5.6.7.8.9.10  
    195 |        | 1.2.3.4.5.6.7.8.9.10  
(10 rows)  
```  
3、检查单层是否有多个node  
```  
postgres=# select pid,count(*) from tbl where pid is not null group by pid having count(*)>=5 order by count(*) desc limit 10;  
  pid   | count   
--------+-------  
  18848 |    11  
 207753 |    11  
 102258 |    11  
 205150 |    10  
  14483 |    10  
 133173 |    10  
 197297 |    10  
  57973 |    10  
   7813 |    10  
  52581 |    10  
(10 rows)  
postgres=# select * from tbl where pid=18848;    
i |  uid  |  pid  |  ov   |  bv   |  ev     
---+-------+-------+-------+-------+-------  
 7 | 41107 | 18848 | 16001 | 32001 | 64000  
 7 | 45752 | 18848 | 16001 | 32001 | 64000  
 7 | 47305 | 18848 | 16001 | 32001 | 64000  
 7 | 47726 | 18848 | 16001 | 32001 | 64000  
 7 | 48400 | 18848 | 16001 | 32001 | 64000  
 7 | 50447 | 18848 | 16001 | 32001 | 64000  
 7 | 56965 | 18848 | 16001 | 32001 | 64000  
 7 | 58790 | 18848 | 16001 | 32001 | 64000  
 7 | 60442 | 18848 | 16001 | 32001 | 64000  
 7 | 60730 | 18848 | 16001 | 32001 | 64000  
 7 | 63808 | 18848 | 16001 | 32001 | 64000  
(11 rows)  
```  
插入性能优化, 把loop改掉. 约50万记录, 90秒降到40秒.      
```  
do language plpgsql $$   
declare  
  js int8 := 1000;  -- 第一层取值空间 1000  
  n int8 := 2;   -- 每层取值空间是上一层的2倍   
  m int8 := 5;  -- 一颗树平均每层5个节点  
  c int8 := 10;   -- 构建10层数据  
  ov int8;    -- 上一层取值空间开始值(包含)  
  bv int8;    -- 当前层取值空间开始值(包含)  
  ev int8;    -- 当前层取值空间末尾值(包含)  
  rows int8;  -- 当前层总共插入多少行(循环多少次)  
  valu int8;  -- 根据当前层取值空间生成的uid  
  valp int8;  -- 根据当前层取值空间生成的pid  
begin  
  for i in 1..c loop  
    if i=1 then  
      insert into tbl select i, x , null, null, 1, js from generate_series(1,js) x;  
    else  
      if i=2 then  
        ov := 1;  
      else  
        ov := js*(n^(i-3))+1;  
      end if;  
      bv := js*(n^(i-2))+1;  
      ev := js*(n^(i-1));  
      rows := (js*(n^(i-2))+1)*m;  
-- 改成单条sql插入  
  insert into tbl   
  select t.* from   
    (  
    select   
    i,   
    bv + floor (random() * (ev-bv)) as valu,  
    ov + floor (random() * (bv-ov-1)) as valp,   
    ov,  
    bv,  
    ev  
    from generate_series(1,rows)  
    ) t   
    join tbl on (tbl.uid = t.valp)   
  on conflict do nothing;   
    end if;   
  end loop;  
end;  
$$;  
```  
性能优化方法2, 使用generate_series 步调和初始值的错开.  并行写入.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")