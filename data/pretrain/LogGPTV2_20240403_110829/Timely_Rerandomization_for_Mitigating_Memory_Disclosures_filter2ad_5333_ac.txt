deﬁned reference, residing at a known location in the GOT,
need be updated at each rerandomization.
Code references of subtypes 3(a) and 3(b) from category 3
can be identiﬁed at compilation time and pose a special
problem only in the context of unions. Global variables re-
side at permanent known locations, and items on the stack
exist in calculable locations.
In the case of unions, a sin-
gle data location may contain a function pointer or may
contain some other data type, and its contents are non-
deterministic at compilation time. Therefore, during the
compilation phase, we use the technique proposed by Rafkind,
et al. [36] to add code to create tagged unions wherever such
unions may contain a function pointer. This incorporates an
extra data ﬁeld to label the present type contained in the
union, and at each union assignment, the label is updated
to mark it as containing a function pointer, or some other
data type.
Finally, code references of subtype 3(c) from category 3
are non-determinable at compilation time. Therefore, a run-
time tracking component must be inserted into any program
that contains dynamically allocated function pointers. This
component is added automatically during compilation by in-
corporating the equivalent of a small library, through which
all dynamic allocations are routed.
Instructions are auto-
matically generated to record the dynamically allocated lo-
cations of function pointers in a table established at runtime.
Entries are added and subtracted as they are allocated and
deallocated.
This solution comes at a price. Dynamic allocations must
make use of the sizeof() operator in order for the compiler
to understand what types are present. The statement void
*mem = malloc(10 * sizeof(struct some_structure)) is
interpreted as an allocation of a block of memory containing
ten elements of that particular structure, from which the
locations of function pointers are calculated.
In contrast,
void *mem = malloc(800) has no such metadata present,
and nothing can be inferred about the location of poten-
tial function pointers within that block. Fortunately, in our
evaluation, we show that memory allocations without mak-
ing use of sizeof() are rare in practice for major programs
(none in the SPEC2006 suite; see Section 5), and are typi-
cally only used for char arrays, and can thus be assumed to
contain no function pointers in this context. If such alloca-
tions are discovered, the TASR compiler component issues a
visible warning and treats any such allocation as a character
array not containing function pointers.
options
that
GCC has
built-in
compiler
this problem:
The preceding code generation steps ensure that the pro-
gram can be rerandomized, so long as precise location in-
formation for non-dynamic code references is made avail-
able. Such tracking requires location information at every
single program instruction, including the exact memory ad-
dresses (calculable through an oﬀset) and hardware regis-
ters in which the reference resides. As previously discussed,
missing even a single pointer sets up a segmentation viola-
tion crash situation, and false identiﬁcations corrupt data.
begin
to address
the -fvar-tracking and
-fvar-tracking-assignments debugging options. These
options are intended to compute the locations at which vari-
ables are stored for each instruction, and that information
is carried through the compilation process and emitted as
debugging output at the end. The implementation of these
tracking options was not entirely complete in GCC 4.8.2,
which we used as a base. It did not properly track global
variables, variables that existed in multiple simultaneous
locations, certain transient locations where temporary vari-
ables were being used in a diﬀerent stage of the compilation
process, around transition points when passing parameters
into functions, in certain structure operations, with arrays
of structures, and in certain other miscellaneous corner
cases. We modiﬁed GCC to track all of these cases and
emit the appropriate debugging information.
In standard compilation, objects in the data segment are
usually referenced by relative addressing from the text seg-
ment. This would normally represent a problem for TASR,
which repeatedly moves the text segment while leaving be-
hind the data segment at its original load-time position, be-
cause all relative references between the two sections are
invalidated after the ﬁrst move. To handle this problem,
we modiﬁed GCC so that it treats all data segment object
references as if they were externally visible global references
residing in diﬀerent compilation units. We then rely upon
GCC’s normal handling of such references, which is to route
them through the GOT. This converts all relative references
to the data section into relative references to the GOT, and
because TASR moves the GOT relative to the text segment,
all relative references remain valid after each runtime re-
randomization. As per references to code residing in other
compilation units, only this one well-deﬁned reference need
be updated at each randomization. This results in an extra
level of indirection for all statically allocated variables; how-
ever, it contributed no signiﬁcant penalty to CPU overhead
or program memory usage in our tests.
The ﬁnal product of this process is a standard ELF ob-
ject ﬁle, including a debugging section in the DWARF for-
mat [15]. It also contains one extra program segment: the
“TASR GOT”. As previously mentioned, the Global Oﬀset
Table is a data section that contains references to code, and
is accessed via relative oﬀset from the code. This data sec-
tion is an exception to the code-only movement, and is itself
treated as if it were part of the code segment that references
273it.
It is safe to move this data segment, since user code
cannot normally gain direct reference to the GOT without
taking particularly convoluted actions, for which we have
been unable to identify any practical use, and nor have we
detected any instances of this happening in our testing. The
extra segment and name “TASR GOT” also serves a more
utilitarian purpose: it immediately identiﬁes an ELF ﬁle as
being TASR-enabled.
4.3 Invocation and Kernel Support
TASR modiﬁcations to the Linux kernel include support
for TASR process start-up, appropriate triggers for reran-
domization, selection of new movement locations within the
address space, and maintenance of certain kernel-stored code
references. To do this, the kernel keeps a small amount of
per-process TASR information (proportional to the number
of TASR-enabled modules in the program), monitors I/O
related system calls, and initializes userspace code to han-
dle the actual rerandomization. The kernel itself does not
perform the rerandomization according to the principle of
least privileges; the rerandomization functionality has no
need for elevated privilege and its actions are easily handled
in userspace without kernel involvement beyond the initial
setup.
In Linux, all communication that crosses the process ad-
dress space boundary must route through the kernel by
means of a system call. Such communication occurs through
ﬁle descriptors (for both standard ﬁlesystem ﬁles and “spe-
cial ﬁles” like named pipes) through system calls in the
read() and write() families. Therefore, tracking those sys-
tem calls allows us to appropriately time rerandomization.
The system calls used for I/O are listed in Table 1. In the
remainder of this text, references to read() and write() are
intended to represent the entire family of calls unless other-
wise noted. Also note the inclusion of fork() and vfork()
system calls in the “Input”column. Although not technically
“input” system calls, treating them as such ensures that two
correlated processes have diﬀerent memory layouts at the
time of their split.
Therefore, the rerandomization strategy is as follows: re-
randomize before any read() that follows one or more
write() calls. As previously discussed, this strategy is best
imposed by the kernel. Not only is the kernel involved in
each system call, but also it is in a position to correlate
read() and write() calls between processes in a process
group, without which multithreaded programs would go un-
randomized over multiple I/O cycles in split threads. The
rerandomization itself, also as previously discussed, takes
place in userspace. Although we initially considered kernel
space rerandomization, security best practices dictate that
we spend as little time as possible in kernel mode. There-
fore, we developed a method of code segment injection: re-
randomization code can be injected into the address space
and control ﬂow transferred to that code. This also allows
the use of userspace libraries without the necessity of port-
ing them to the kernel and the risk of introducing additional
vulnerabilities thereby.
The initialization of a TASR process is recognized in the
kernel by the presence of the “TASR GOT” program seg-
ment in the ELF ﬁle, as generated during compilation. The
process is loaded normally with a small amount of TASR
data also associated with the process. Execution commences
normally.
Input
# syscall
0
read()
17
pread64()
19
readv()
45
recvfrom()
47
recvfrom()
243
mq_timedreceive()
295
preadv()
299
recvmmsg()
Input-like
fork()
vfork()
57
58
Output
# syscall
1
write()
18
pwrite64()
20
writev()
44
sendto()
46
sendmsg()
242
mq_timedsend()
296
pwritev()
307
sendmmsg()
Table 1: System call numbers and names for input
and output on the x86 64 architecture.
Aside from startup and shutdown (including calls to
exec(), fork(), and the exit() family), kernel behavior
with regard to a TASR program diﬀers in only two regards.
First, any use of a write() family system call (see Table 1)
toggles a ﬂag in the process (or process group) to indicate
that output was produced. Second, any use of a read()
family system call checks that output ﬂag, triggers a reran-
domization if it is set, and then clears the ﬂag again.
Actual rerandomization works as follows. First, all vir-
tual memory areas are checked in order to determine if they
should be rerandomized. The addition of new areas is rel-
atively rare: standard linked libraries are examined at the
time of the ﬁrst rerandomization and the list subsequently
changes only when new libraries are dynamically added or
subtracted. For each TASR-enabled object, a new random
address in memory is generated. This addressing informa-
tion is then placed into a userspace memory segment of ap-
propriate size, along with a copy of the original register set
and the addresses used for dynamic runtime tracking of code
references.
The kernel then injects a component called the “pointer
updater” into the process. This component consists of the
virtual memory areas of what could normally be considered
a separate process, along with certain other information that
allows it to be injected, in toto, into any other address space.
Control is transferred to this injected component with the
address of the aforementioned userspace memory segment as
an initial parameter. Speciﬁcs of the pointer updater compo-
nent are discussed in subsection 4.4, and do not involve the
kernel between setup and withdrawal from userspace. When
the pointer updater component completes its task and ex-
its, the kernel withdraws it from userspace, tidies up any
memory areas that were not part of the original process,
updates the register set of the original process if required,
and performs the actual move of the memory segments in
question. This movement is eﬃciently made by updating
the process page tables rather than copying the contents of
memory from one location to another. Control is then re-
turned to the original program. The rerandomization is thus
seamless to the original process.
The kernel must also maintain the location of any set
signal handling functions, a task easily accomplished since
the kernel is the one to choose new addresses for all TASR-
enabled code. Should correlation between processes be re-
quired in the context of multi-threaded programs sharing
address space, it also tracks I/O calls across an entire pro-
cess group.
2744.4 Rerandomization Process
The pointer updater bears most hallmarks of a standalone
process, except that it runs in the address space of a TASR
process that is currently being rerandomized, rather than in
its own. It would ideally be a self-contained segment within
the kernel, but has been initially implemented in the pro-
totype as a standalone process for reasons of developmental
convenience. It is run once at startup for initialization pur-
poses, then withdrawn into the kernel.
Rerandomization requires that code references in the three
major categories enumerated in Section 4.2 be updated.
Code references most likely exist at speciﬁc addresses in
memory, but may also exist in the active register set if it
so happens that a code pointer is “in use” at the time of re-
randomization. The addresses to which code pointers must
be updated are calculable from the information provided by
the kernel. Each pointer location is examined in turn. When
the pointer contains a valid code address (it may not, if not
yet initialized), its new value is computed and updated.
The locations of dynamically allocated code pointers re-
side in a simple list, to which the pointer updater has a
reference by means of the kernel-passed parameter. Updat-
ing these pointers is merely a case of iterating through the
list and applying the transformation described above. Other
code references are more complicated.
As a result of changes discussed in subsection 4.2, the
DWARF debugging information contains a complete refer-
ence to all global and local variables. The data is assembled
into a data structure known as an “interval tree” which al-
lows fast variable lookup based on the program instruction
pointer. This data structure is used in conjunction with
stack unwinding to step back through each stack frame of
the process and determine what variables were in use during
each frame. For each stack frame, the instruction pointer is
used to query the interval tree and return a complete list of
code pointers in use, and the memory addresses (or regis-
ters) in which they are located at that time. Each pointer
is updated in turn. Global variables and other global refer-
ences, which reside at static locations, are also queried via
the DWARF interval tree but do not depend on the current
instruction pointer.
After all updates are made, the pointer updater returns
control to the kernel and shortly thereafter ceases to exist in
the address space of the program being rerandomized. No
state is maintained between runs of the pointer updater.
As a userspace component, we were able to make use of
a large body of existing code, most notably libunwind [30]
for the purpose of stack unwinding. This library is not par-
ticularly well-suited to this task, and required modiﬁcation
to enable desired functionality. We speculate that moderate
performance improvement would be possible with the use of
a more eﬃcient library. Similarly, we suspect that there are
opportunities for signiﬁcant performance improvements in
DWARF parsing and variable tracking. Our current imple-
mentation of the DWARF interval tree includes all variables
rather than only code pointers, and must be assembled anew
on each run of the pointer updater. Signiﬁcant performance
improvements could likely be achieved by optimization of
DWARF parsing and pre-generation of the needed interval
tree as a one-time compilation step. However, performance
results (see Section 5) are initially favorable even without
these optimizations, and we have instead concentrated our
eﬀorts on other areas.
)
s
(