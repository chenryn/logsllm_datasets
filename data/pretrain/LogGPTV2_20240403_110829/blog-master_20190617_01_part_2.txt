If no tuples were deleted from the heap, B-tree indexes are still scanned at the VACUUM cleanup stage when at least one of the following conditions is met: the index statistics are stale, or the index contains deleted pages that can be recycled during cleanup. Index statistics are considered to be stale if the number of newly inserted tuples exceeds the vacuum_cleanup_index_scale_factor fraction of the total number of heap tuples detected by the previous statistics collection. The total number of heap tuples is stored in the index meta-page. Note that the meta-page does not include this data until VACUUM finds no dead tuples, so B-tree index scan at the cleanup stage can only be skipped if the second and subsequent VACUUM cycles detect no dead tuples.      
The value can range from 0 to 10000000000. When vacuum_cleanup_index_scale_factor is set to 0, index scans are never skipped during VACUUM cleanup. The default value is 0.1.      
## 四、表级vacuum、freeze、analyze相关参数      
https://www.postgresql.org/docs/devel/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS      
自动垃圾回收时，通过表的如下参数，控制这个表的自动垃圾回收的行为。参数意义同上介绍一致。      
### autovacuum_enabled, toast.autovacuum_enabled (boolean)      
Enables or disables the autovacuum daemon for a particular table. If true, the autovacuum daemon will perform automatic VACUUM and/or ANALYZE operations on this table following the rules discussed in Section 24.1.6. If false, this table will not be autovacuumed, except to prevent transaction ID wraparound. See Section 24.1.5 for more about wraparound prevention. Note that the autovacuum daemon does not run at all (except to prevent transaction ID wraparound) if the autovacuum parameter is false; setting individual tables' storage parameters does not override that. Therefore there is seldom much point in explicitly setting this storage parameter to true, only to false.      
### vacuum_index_cleanup (boolean)      
Enables or disables index cleanup when VACUUM is run on this table. The default value is true. Disabling index cleanup can speed up VACUUM very significantly, but may also lead to severely bloated indexes if table modifications are frequent. The INDEX_CLEANUP parameter of VACUUM, if specified, overrides the value of this option.      
### vacuum_truncate, toast.vacuum_truncate (boolean)      
Enables or disables vacuum to try to truncate off any empty pages at the end of this table. The default value is true. If true, VACUUM and autovacuum do the truncation and the disk space for the truncated pages is returned to the operating system. Note that the truncation requires ACCESS EXCLUSIVE lock on the table. The TRUNCATE parameter of VACUUM, if specified, overrides the value of this option.      
### autovacuum_vacuum_threshold, toast.autovacuum_vacuum_threshold (integer)      
Per-table value for autovacuum_vacuum_threshold parameter.      
### autovacuum_vacuum_scale_factor, toast.autovacuum_vacuum_scale_factor (float4)      
Per-table value for autovacuum_vacuum_scale_factor parameter.      
### autovacuum_analyze_threshold (integer)      
Per-table value for autovacuum_analyze_threshold parameter.      
### autovacuum_analyze_scale_factor (float4)      
Per-table value for autovacuum_analyze_scale_factor parameter.      
### autovacuum_vacuum_cost_delay, toast.autovacuum_vacuum_cost_delay (floating point)      
Per-table value for autovacuum_vacuum_cost_delay parameter.      
### autovacuum_vacuum_cost_limit, toast.autovacuum_vacuum_cost_limit (integer)      
Per-table value for autovacuum_vacuum_cost_limit parameter.      
### autovacuum_freeze_min_age, toast.autovacuum_freeze_min_age (integer)      
Per-table value for vacuum_freeze_min_age parameter. Note that autovacuum will ignore per-table autovacuum_freeze_min_age parameters that are larger than half the system-wide autovacuum_freeze_max_age setting.      
### autovacuum_freeze_max_age, toast.autovacuum_freeze_max_age (integer)      
Per-table value for autovacuum_freeze_max_age parameter. Note that autovacuum will ignore per-table autovacuum_freeze_max_age parameters that are larger than the system-wide setting (it can only be set smaller).      
### autovacuum_freeze_table_age, toast.autovacuum_freeze_table_age (integer)      
Per-table value for vacuum_freeze_table_age parameter.      
### autovacuum_multixact_freeze_min_age, toast.autovacuum_multixact_freeze_min_age (integer)      
Per-table value for vacuum_multixact_freeze_min_age parameter. Note that autovacuum will ignore per-table autovacuum_multixact_freeze_min_age parameters that are larger than half the system-wide autovacuum_multixact_freeze_max_age setting.      
### autovacuum_multixact_freeze_max_age, toast.autovacuum_multixact_freeze_max_age (integer)      
Per-table value for autovacuum_multixact_freeze_max_age parameter. Note that autovacuum will ignore per-table autovacuum_multixact_freeze_max_age parameters that are larger than the system-wide setting (it can only be set smaller).      
### autovacuum_multixact_freeze_table_age, toast.autovacuum_multixact_freeze_table_age (integer)      
Per-table value for vacuum_multixact_freeze_table_age parameter.      
### log_autovacuum_min_duration, toast.log_autovacuum_min_duration (integer)      
Per-table value for log_autovacuum_min_duration parameter.      
## 例子      
### 1 年龄大于vacuum_freeze_table_age的表，任何时候对这种表通过SQL执行vacuum、或autovacuum触发的vacuum都自动转换为vacuum freeze    
将这两个参数设置为0，任何时候执行或自动触发vacuum，都会转换为FREEZE。    
```      
vacuum_freeze_min_age=0      
vacuum_freeze_table_age=0      
```      
```      
create table test1 (id int, info text);      
insert into test1 select generate_series(1,1000000);      
delete from test1 where id<1000000;      
select * from pg_stat_all_tables where relname ='test1';      
从pg_stat_all_tables.last_autovacuum字段看到这个表已经发生了autovacuum      
```      
剩余的这条记录的BLOCK ID如下4424。通过pageinspect插件的函数查看这个数据块内部的记录，掩码信息。    
```    
create extension pageinspect;    
```    
```      
postgres=# select ctid from test1;                                       
    ctid          
------------      
 (4424,176)      
(1 row)      
SELECT t_infomask2,t_infomask FROM heap_page_items(get_raw_page('test1', 4424));      
 t_infomask2 | t_infomask       
-------------+------------      
           2 |       2817      
```      
解析2817 t_infomask，包含了如下掩码(HEAP_XMIN_FROZEN)       
src/include/access/htup_details.h      
```      
/*      
 * information stored in t_infomask:      
 */      
#define HEAP_HASNULL                    0x0001  /* has null attribute(s) */      
#define HEAP_HASVARWIDTH                0x0002  /* has variable-width attribute(s) */      
#define HEAP_HASEXTERNAL                0x0004  /* has external stored attribute(s) */      
#define HEAP_HASOID_OLD                 0x0008  /* has an object-id field */      
#define HEAP_XMAX_KEYSHR_LOCK   0x0010  /* xmax is a key-shared locker */      
#define HEAP_COMBOCID                   0x0020  /* t_cid is a combo cid */      
#define HEAP_XMAX_EXCL_LOCK             0x0040  /* xmax is exclusive locker */      
#define HEAP_XMAX_LOCK_ONLY             0x0080  /* xmax, if valid, is only a locker */      
 /* xmax is a shared locker */      
#define HEAP_XMAX_SHR_LOCK      (HEAP_XMAX_EXCL_LOCK | HEAP_XMAX_KEYSHR_LOCK)      
#define HEAP_LOCK_MASK  (HEAP_XMAX_SHR_LOCK | HEAP_XMAX_EXCL_LOCK | \      
                                                 HEAP_XMAX_KEYSHR_LOCK)      
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */      
#define HEAP_XMIN_INVALID               0x0200  /* t_xmin invalid/aborted */      
#define HEAP_XMIN_FROZEN                (HEAP_XMIN_COMMITTED|HEAP_XMIN_INVALID)      
#define HEAP_XMAX_COMMITTED             0x0400  /* t_xmax committed */      
#define HEAP_XMAX_INVALID               0x0800  /* t_xmax invalid/aborted */      
#define HEAP_XMAX_IS_MULTI              0x1000  /* t_xmax is a MultiXactId */      
#define HEAP_UPDATED                    0x2000  /* this is UPDATEd version of row */      
#define HEAP_MOVED_OFF                  0x4000  /* moved to another place by pre-9.0      
                                                                                 * VACUUM FULL; kept for binary      
                                                                                 * upgrade support */      
#define HEAP_MOVED_IN                   0x8000  /* moved from another place by pre-9.0      
                                                                                 * VACUUM FULL; kept for binary      
                                                                                 * upgrade support */      
#define HEAP_MOVED (HEAP_MOVED_OFF | HEAP_MOVED_IN)      
#define HEAP_XACT_MASK                  0xFFF0  /* visibility-related bits */      
```      
### 2 当表的年龄大于vacuum_freeze_table_age时，手工执行或自动触发的vacuum会自动转换为vacuum freeze。      
vacuum freeze的动作：当TUPLE的年龄大于vacuum_freeze_min_age，设置TUPLE头信息，标记为frozen。      
把vacuum_freeze_table_age值设大，确保vacuum时，不会转换为freeze    
```      
vacuum_freeze_min_age=5000000      
vacuum_freeze_table_age=250000000      
```      
```      
create table test1 (id int, info text);      
insert into test1 select generate_series(1,1000000);      
delete from test1 where id<1000000;      
last_autovacuum字段看到已经发生了autovacuum      
```      
查看剩余记录的数据块位置。查看它的t_infomask掩码    
```      
postgres=# select ctid from test1;                                       
    ctid          
------------      
 (4424,176)      
(1 row)      
SELECT t_infomask2,t_infomask FROM heap_page_items(get_raw_page('test1', 4424));      
 t_infomask2 | t_infomask       
-------------+------------      
           2 |       2305      
```      
分析掩码，未包含HEAP_XMIN_FROZEN，也就是说，没有转换为FREEZE。      
## 哪些记录能被垃圾回收      
详见：      
[《PostgreSQL物理"备库"的哪些操作或配置，可能影响"主库"的性能、垃圾回收、IO波动》](../201704/20170410_03.md)        
[《PostgreSQL垃圾回收代码分析 - why postgresql cann't reclaim tuple is HEAPTUPLE_RECENTLY_DEAD》](../201505/20150503_01.md)        
当存在长事务，备库开启了feedback（并且有长事务）时，vacuum无法回收垃圾无法FREEZE，那么可能使得VACUUM做无用功，一直发起vacuum但是一直在扫描，耗费CPU判断TUPLE时候可以回收，发现不可以回收，所以扫完年龄和垃圾比例都没有下架，那么AUTOVACUUM LAUNCHER又会触发下一轮的vacuum，循环往复，知道长事务消失，可以回收之后才能解决。      
## 小结      
### autovacuum launcher      
autovacuum launcher是判断数据库是否需要执行VACUUM或ANALYZE的后台监测进程，频率为autovacuum_naptime：    
autovacuum launcher监测进程多久轮询完所有数据库，轮询的目的是了解数据库中有哪些对象需要vacuum、freeze、analyze。例如1分钟，PG实例中有10个数据库，表示每分钟要轮询完10个数据库。      