[Back to Contents](README.md)

### Security Checklist

#### Authentication Systems (Signup/Signin/2FA/Password Reset)
- [ ] Use HTTPS for all communications.
- [ ] Store password hashes using `Bcrypt` (which includes salting).
- [ ] Invalidate the session identifier after a user logs out.
- [ ] Invalidate all active sessions when a password is reset (or provide this option).
- [ ] Ensure the `state` parameter is included in OAuth2 flows.
- [ ] Avoid open redirects after successful logins or during any other intermediate redirects.
- [ ] Sanitize Signup and Login inputs to prevent JavaScript, data, and CRLF injection.
- [ ] Set secure, HTTP-only cookies.
- [ ] In mobile OTP-based verification, do not return the OTP in the response when generating or resending an OTP.
- [ ] Limit login, OTP verification, and OTP generation attempts for a particular user. Implement exponential backoff and/or CAPTCHA challenges.
- [ ] Verify the randomness of the reset password token in the emailed link or SMS.
- [ ] Set an expiration time for the reset password token.
- [ ] Invalidate the reset token after it has been successfully used.

#### User Data & Authorization
- [ ] Ensure that resource access (e.g., "my cart", "my history") checks the logged-in user's ownership using the session ID.
- [ ] Avoid using sequentially iterable resource IDs. Use `/me/orders` instead of `/user/37153/orders` to mitigate authorization bypasses.
- [ ] Require email verification when changing an account's email or phone number.
- [ ] Sanitize filenames provided by users for upload features. Additionally, use services like S3 for uploads and post-process using Lambda functions.
- [ ] Sanitize EXIF tags in profile photo uploads if they are not required.
- [ ] Use RFC-compliant UUIDs for user and other IDs instead of integers.
- [ ] Use JWTs for single-page applications and APIs if needed.

#### Android / iOS App
- [ ] Do not hardcode payment gateway salts.
- [ ] Do not hardcode secrets or auth tokens from third-party SDKs.
- [ ] Ensure API calls intended for server-to-server communication are not made from the app.
- [ ] Carefully evaluate and manage granted permissions in Android.
- [ ] On iOS, store sensitive information (e.g., authentication tokens, API keys) in the system keychain, not in user defaults.
- [ ] Implement certificate pinning to enhance security.

#### Security Headers & Configurations
- [ ] Add Content Security Policy (CSP) headers to mitigate XSS and data injection attacks.
- [ ] Add Cross-Site Request Forgery (CSRF) headers and set SameSite attributes on cookies.
- [ ] Add HTTP Strict Transport Security (HSTS) headers to prevent SSL stripping attacks.
- [ ] Add your domain to the HSTS Preload List.
- [ ] Add X-Frame-Options to protect against clickjacking.
- [ ] Add X-XSS-Protection headers to mitigate XSS attacks.
- [ ] Update DNS records to include SPF records to mitigate spam and phishing attacks.
- [ ] Implement subresource integrity checks for third-party CDNs. Use the `require-sri-for` CSP directive for added security.
- [ ] Use random CSRF tokens and ensure business logic APIs are exposed as HTTP POST requests.
- [ ] Avoid using critical data or tokens in GET request parameters to prevent exposure in server logs.

#### Input Sanitization
- [ ] Sanitize all user inputs and exposed parameters to prevent XSS attacks.
- [ ] Use parameterized queries to prevent SQL injection.
- [ ] Sanitize user input for functionalities like CSV imports.
- [ ] Sanitize user input for special cases, such as using usernames in URL patterns (e.g., `coolcorp.io/username`).
- [ ] Use language-defined libraries or frameworks to handle JSON, avoiding string concatenation.
- [ ] Sanitize inputs that take URLs to prevent Server-Side Request Forgery (SSRF).
- [ ] Sanitize outputs before displaying them to users.

#### Operations
- [ ] For small and inexperienced teams, consider using AWS Elastic Beanstalk or a PaaS to run your code.
- [ ] Use a robust provisioning script to create VMs in the cloud.
- [ ] Check for and close unwanted publicly open ports.
- [ ] Ensure databases, especially MongoDB and Redis, do not have default or no passwords.
- [ ] Use SSH for machine access with key-based authentication, avoiding password-based authentication.
- [ ] Apply updates promptly to address zero-day vulnerabilities like Heartbleed and Shellshock.
- [ ] Configure servers to use TLS 1.2 for HTTPS and disable other protocols.
- [ ] Turn off DEBUG mode in production to prevent access to full-fledged REPLs or shells and to avoid exposing critical data in error messages.
- [ ] Prepare for DDoS attacks by using a hosting service with DDoS mitigation.
- [ ] Set up monitoring and logging for your systems (e.g., using New Relic).
- [ ] Adhere to compliance requirements for enterprise customers. Consider using encryption features in AWS S3 and EC2.

#### People
- [ ] Set up a dedicated email and page for security researchers to report vulnerabilities.
- [ ] Limit access to user databases based on the nature of your application.
- [ ] Be courteous and responsive to bug reporters.
- [ ] Conduct code reviews with a focus on secure coding practices.
- [ ] In the event of a hack or data breach, review logs, notify affected users, and require password changes. Consider an external audit depending on your jurisdiction.
- [ ] Use tools like Netflix's Scumblr to monitor social media and search engines for mentions of your organization.