title:NoTamper: automatic blackbox detection of parameter tampering opportunities
in web applications
author:Prithvi Bisht and
Timothy L. Hinrichs and
Nazari Skrupsky and
Radoslaw Bobrowicz and
V. N. Venkatakrishnan
NoTamper: Automatic Blackbox Detection of Parameter
Tampering Opportunities in Web Applications
Prithvi Bisht
University of Illinois at Chicago
Chicago, Illinois, USA
PI:EMAIL
Timothy Hinrichs
University of Chicago
Chicago, Illinois, USA
PI:EMAIL
Nazari Skrupsky
University of Illinois at Chicago
Chicago, Illinois, USA
PI:EMAIL
Radoslaw Bobrowicz
University of Illinois at Chicago
Chicago, Illinois, USA
PI:EMAIL
V.N. Venkatakrishnan
University of Illinois at Chicago
Chicago, Illinois, USA
PI:EMAIL
ABSTRACT
Web applications rely heavily on client-side computation to exam-
ine and validate form inputs that are supplied by a user (e.g., “credit
card expiration date must be valid”). This is typically done for
two reasons: to reduce burden on the server and to avoid latencies
in communicating with the server. However, when a server fails
to replicate the validation performed on the client, it is potentially
vulnerable to attack. In this paper, we present a novel approach for
automatically detecting potential server-side vulnerabilities of this
kind in existing (legacy) web applications through blackbox anal-
ysis. We discuss the design and implementation of NOTAMPER, a
tool that realizes this approach. NOTAMPER has been employed to
discover several previously unknown vulnerabilities in a number of
open-source web applications and live web sites.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Veriﬁcation; K.4.4 [Electronic
Commerce]: Security; K.6.5 [Security and Protection]: Unau-
thorized access
General Terms
Languages, Security, Veriﬁcation
Keywords
Parameter Tampering, Exploit Construction, Constraint Solving,
Blackbox Testing, Symbolic Evaluation
1.
INTRODUCTION
Interactive form processing is pervasive in today’s web appli-
cations.
It is crucial for electronic commerce and banking sites,
which rely heavily on web forms for billing and account manage-
ment. Originally, typical form processing took place only on the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
server-side of a web application. Recently, however, with the facil-
ities offered by the use of JavaScript on web pages, form processing
is also being performed on the client-side of a web application. Pro-
cessing user-supplied inputs to a web form using client-side Java-
Script eliminates the latency of communicating with the server, and
therefore results in a more interactive and responsive experience for
the end user. Furthermore, client-side form processing reduces net-
work trafﬁc and server loads.
The form processing performed by the browser mostly involves
checking user-provided inputs for errors. For instance, an elec-
tronic commerce application accepting credit card payments re-
quires the credit card expiry date to be valid (e.g., be a date in future
and be a valid month / day combination). Once the input data has
been validated, it is sent to the server as part of an HTTP request,
with inputs appearing as parameters to the request.
A server accepting such a request may be vulnerable to attack if it
assumes that the supplied parameters are valid (e.g., the credit card
has not yet expired). This assumption is indeed enforced by the
browser-side JavaScript; however, malicious users can circumvent
client-side validation by disabling JavaScript, changing the code
itself, or simply crafting an HTTP request by hand with any param-
eter values of the user’s choice. Servers with parameter tampering
vulnerabilities are open to a variety of attacks (such as enabling
unauthorized access, SQL injection, Cross-site scripting).
While there has been extensive work to address speciﬁc server-
side input validation problems such as SQL injection and Cross-site
scripting, the parameter tampering problem itself has received little
attention in the research literature despite its prevalence. SWIFT [8]
and Ripley [24] focus on the broader issue of ensuring data integrity
in web application development frameworks. The goal of these ap-
proaches is to realize new web applications that are effectively im-
mune to parameter tampering attacks. In contrast, the focus of this
paper is solely on detecting parameter tampering vulnerabilities in
existing web applications (or legacy applications) that are already
in deployment.
Our goal is to develop an approach and a tool that can be used
by testing professionals, website administrators or web application
developers to identify parameter tampering opportunities. Specif-
ically we aim to determine in a blackbox fashion, if a given web
site (i.e., a deployed web application) is vulnerable to parameter
tampering attacks, and produce a report of potential vulnerabilities
and the associated HTTP parameters that triggered these vulnera-
bilities. We envision this report being used in a variety of ways:
professional testers using the inputs generated by our tool to de-
velop and demonstrate concrete exploits; web application develop-
607
function validateForm() {
var copies, copies2;
copies
copies2 = document.getElementById(’copies2’);
if(copies.value 
Figure 1: Running example of a shopping application
ers checking server code and developing patches as needed; and
ﬁnally, web site administrators using the report to estimate the like-
lihood that their site is vulnerable and alerting the concerned devel-
opers.
Figure 2:
JavaScript validation for running example.
validateForm() is called when the form is submitted, and
validateText() is called when the delivery instructions
change.
two products for purchase. The form asks the user for the quan-
tity of each product, the credit-card to be charged (displayed in a
drop-down list of previously-used cards), and any special delivery
instructions. Before this data is submitted to the server, the client-
side JavaScript code (Figure 2) ensures that the quantity for each
product is non-negative, and that the delivery instructions include
no special characters. The onsubmit event handler performs this
validation and submits the data to the server if it ﬁnds them valid,
or asks the user to re-enter with an appropriate error message. The
server, however, fails to replicate these validation checks, enabling
a number of attacks.
Summary of contributions.
• We develop the ﬁrst systematic approach for detecting pa-
rameter tampering opportunities in web applications. We im-
plement our approach in a tool that we call NOTAMPER. Our
approach makes the following technical advances.
– Client-side JavaScript code analysis techniques special-
ized to form validation code.
– Input-generation techniques that cope with the many
challenges of black-box vulnerability analysis.
– Novel heuristics to generate and prioritize inputs that
are likely to result in vulnerabilities.
• We empirically demonstrate NOTAMPER’s use by reporting
several parameter tampering opportunities from eight open
source applications and ﬁve online web sites. Furthermore,
starting from these opportunities, we develop concrete ex-
ploits for a majority of these applications / web sites. Our ex-
ploits demonstrate serious security problems: unauthorized
monetary transactions at a bank, unauthorized discounts added
to a shopping cart, and so on.
This paper is organized as follows.
In Section 2, we provide
motivation through a running example, formulate the problem pre-
cisely, and present a high-level overview of our approach. Section 3
describes the architecture of NOTAMPER and the main technical
challenges addressed by our approach. Section 4 describes the al-
gorithms used by NOTAMPER. Section 5 presents our evaluation
over several real world examples and web sites. Section 6 presents
the related work, and in Section 7 we conclude.
2. HIGH LEVEL OVERVIEW
Figure 1 illustrates the client-side of a small web application that
serves as the running example throughout this paper. This exam-
ple is based on real-world scenarios. It presents the checkout form
of a shopping cart application in which a user has already selected
Attack 1: Negative quantities. We discovered the follow-
ing attack on the website of an online computer equipment retailer.
By disabling JavaScript, a malicious user can bypass the valida-
tion check on the quantity of each product (parameters copies and
copies2) and submit a negative number for one or both products.
It is possible that submitting a negative number for both products
would result in the user’s account being credited; however, that at-
tack will likely be thwarted because of differences in credit card
transactions on the server involving debit and credit. However, if a
negative quantity is submitted for one product and a positive quan-
tity is submitted for the other product so that the resulting total is
positive, the negative quantity acts as a rebate on the total price. In
the ﬁgure, the quantities chosen were -4 and 1 respectively, result-
ing in a ‘discount’ of $1600.
Attack 2: Charging another user’s account. We discovered
a similar exploit at a ﬁnancial institution and were able to trans-
fer funds between arbitrary accounts. When the form is created,
a drop-down list is populated with the user’s credit card account
numbers (parameter payment). By submitting an account number
not in this list, a malicious user can purchase products and charge
someone else’s account.
Attack 3: Pattern validation bypass. This attack enabled us
to perform a Cross-site Scripting attack and escalate to admin priv-
ileges. The web form ensures that the delivery instructions (param-
608eter directions) contain only uppercase and lowercase letters.
In particular, special characters and punctuation are disallowed to
prevent command injection attacks on the server. By circumvent-
ing these checks, a malicious user can launch attacks such as XSS
or SQL injection.
2.1 Problem Description
In a form submission, the client side of a web application solic-
its n string inputs from the user and sends them to the server for
processing. Formally, each string input is a ﬁnite sequence of char-
acters from some alphabet Σ. We will denote an n-tuple of such
inputs as I, and the set of all such I as I.
I = Σ
∗ × Σ
∗ × ··· × Σ
∗
Conceptually, both the client and the server perform two tasks:
checking that user-supplied inputs satisfy certain constraints, and
either communicating errors to the user or processing those inputs.
For the problem at hand, we ignore the second task on both the
client and server and focus entirely on the constraint-checking task.
Formally, constraint-checking code can be formulated as a func-
tion I → {true, f alse}, where f alse indicates an error. We use
pclient to denote the constraint-checking function on the client and
pserver to denote the constraint-checking function on the server.
Problem formulation. Our approach is based on the observa-
tion that for many typical form processing web applications there
is a speciﬁc relationship between pserver and pclient: that pserver
is more restrictive than pclient. Because the server often has access
to more information than the client, pserver sometimes rejects in-
puts accepted by pclient. For example, when registering a new user
for a website, the server will guarantee that the user ID is unique,
but the client will not. In contrast, if pserver accepts an input, then
we expect pclient to accept it as well; otherwise, the client would
be hiding server-side functionality from legitimate users. Thus, we
expect that for all inputs I
pserver(I) = true ⇒ pclient(I) = true.
(1)
The server-side constraint checking is inadequate for those in-
puts I when the negation of this implication holds:
pserver(I) = true ∧ pclient(I) = f alse.
(2)
We call each input satisfying (2) a potential parameter tampering
attack vector.
In practice, parameter tampering attack vectors sometimes arise
because the developer simply fails to realize that the client checks
should be replicated on the server. But even if the developer at-
tempts to replicate the client checks on the server, the server and
client are usually written in different languages, requiring the client
and server checks to be implemented and maintained independently
of one another. Over a period of time, the validation checks in these
two code bases could become out of sync, opening the door for pa-
rameter tampering attacks.
2.2 Approach overview
Our goal is to automatically construct inputs that exercise pa-
rameter tampering vulnerabilities using a black-box analysis of the
server. The beneﬁt of black-box server analysis is that our approach
is agnostic about the server’s implementation (e.g., PHP, JSP, ASP)
and is therefore broadly applicable, even including antiquated and
proprietary server technology. The drawback of black-box server
analysis is that we may not have sufﬁcient information to eliminate
false positives and false negatives. In particular, we may not be able
to reasonably generate all of the inputs the server should be tested
on, and even for those inputs that we do generate, there is no reli-
able way to know if the server accepts them. Our goal is therefore
to identify opportunities for parameter tampering while requiring
as little manual guidance as possible.
In particular, we ask two
things of human developers / testers: to provide hints about vital
information not present on the client and to check whether or not
the parameter tampering opportunities we identify are true vulner-
abilities (perhaps by generating actual exploits).
Our high level approach is as follows: On the client, whose
source is in HTML and JavaScript, we extract fclient: a logical
representation of pclient using techniques from program analysis.
Subsequently, using logical tools, we generate inputs h1,. . . ,hn
such that fclient(hi) = f alse for each i. We call each such in-
put hostile because it is designed to illustrate a possible parameter
tampering attack. In addition, we also generate inputs b1,. . . ,bm
such that fclient(bj) = true for each j. We call each such input
benign because it is an input the server will process normally. In
our approach, we take hints from developers to conﬁrm that these
generated inputs were indeed processed normally.
The benign inputs help assess which hostile inputs represent ac-
tual opportunities. We submit each hostile and benign input to the
server, producing responses H1,. . . , Hn and B1,. . . , Bm, respec-
tively. We then compare each hostile response Hi to the benign
responses B1,. . . , Bm to produce a score that represents the like-
lihood that the server accepted hi. Intuitively, each of the benign
responses represent success messages from the server, and the more
similar a hostile response is to the benign responses, the more likely
the hostile input was successful and therefore a parameter tamper-
ing opportunity.
Finally, the hostile inputs and responses are presented to the hu-
man tester ranked by similarity to benign responses. The tester is
then free to verify hostile inputs as bona ﬁde parameter tamper-
ing vulnerabilities and explore the severity of each vulnerability by
sending modiﬁed hostile inputs to the server.
Discussion. While we believe observation (1) holds for many
interactive form processing applications, sometimes it does not,
e.g., when the server is a generic web service (such as Google
maps), and the client is an application using a portion of that ser-
vice (such as a map of Illinois). While this falls outside our in-
tended scope, NOTAMPER can be used in such settings by replac-
ing the automatic extraction of fclient from HTML/JavaScript with
a manually constructed fclient. The construction of benign/hostile
inputs and their evaluation then proceeds as described above. In
other words, NOTAMPER treats fclient, however it is generated, as
an approximate speciﬁcation for the intended behavior of the server
and then attempts to ﬁnd inputs that fail to satisfy that speciﬁcation.
NOTAMPER can therefore be viewed as a formal veriﬁcation tool