(cid:2)
e
i
Definition 3
(Zeros-based Aggregation). Given a
subset S = {e1,··· , em} ∈ U and a cyclic group G, an al-
gorithm is called Zeros-based Aggregation function if there
exists a polynomial-time algorithm ZerosAggr that outputs
GS = ZerosAggr(mpk,S) = gγ·(cid:2)
∈S (γ+xi)
ei
,
(2)
where, mpk = {gi = gγi}i∈[1,|U|] is the public parameter, g
is a generator in G, xi = hash(ei) and γ is a secret.
(cid:5)
Similarly, we here introduce a new construction, called
poles-based aggregation (in short, PolesAggr). Given a
subset R = {e
m} ⊆ U, we also make use of the hash
(cid:3)
values of elements in R as the negative poles of polynomial,
that is, we deﬁne a polynomial gR(x) of degree |R| = m as
1,··· , e
(cid:3)
gR(x) =
1
1)· ·· (x + x
(cid:3)
=
(cid:3)
m)
(x + x
1
∈R(x + x
(cid:2)
e
i
(cid:3)
i)
(mod p),
(cid:3)
i = hash(e
(cid:3)
i).
It is obvious that gR(x) is unique
where x
for the diﬀerent subset R. Next, we propose the formal
deﬁnition of poles-based aggregation based on gR(x) over a
cyclic group G and a generator h in it, as follows:
Definition 4
(Poles-based Aggregation). Given a
subset R = {e1,·· · , em} ∈ U and a cyclic group G, an al-
gorithm is called Poles-based Aggregation function if there
exists a polynomial-time algorithm P olesAggr that outputs
HR = PolesAggr(mpk,R) = h
(cid:2)
ei
1
∈R (γ+xi
) ,
(3)
1
where, mpk = {hi = h
is a generator in G, xi = hash(ei) and γ is a secret.
1fS (x) = x
γ+xi }ei∈U is the public parameter, h
∈S (x − (−x(cid:2)
∈S (x + x(cid:2)
i) (mod p).
i)) = x
(cid:2)
(cid:2)
(cid:2)
e
i
(cid:2)
e
i
193Setup(S): chooses two elements G R←− G1, H R←− G2, and two exponents γ,  R←− Z
∗
p. And then set R = e(G, H)
for k ∈ [1, m]. The master key is outputted as msk = (γ, , G, G) and the public key is
(cid:6)
and sets Gk = Gγk
mpk =
S, H, R,{Gk}k∈[1,m], pp = φ
(cid:7)
.
KeyGen(msk, IDk): Given an user’s identity IDk, deﬁnes xk = hash(IDk) and computers the k-th user’s secret key
where, ppk = (IDk, Hk) is appended to pp, i.e., pp = pp ∪ {ppk}.
skk = G
xk 
γ+xk ,
and
Hk = H

γ+xk ,
Encrypt(mpk,S, mode): picks a random s R←− Z
∗
p and executes the following process:
• Case mode := (u ∈ S): invokes PolesAggr(mpk,S) → HS = H 
(cid:2)
∈S
ei
1
γ+xi , then computes
• Case mode := (u (cid:5)∈ S): invokes ZerosAggr(mpk,S) → GS = Gγ·(cid:2)
ei
∈S (γ+xi)
, then computes
C1 = H s,
and
C2 = (HS)s.
Finally, the ciphertext is published as C = (S, mode, C1, C2). The corresponded session key is ek = Rs.
C1 = H s,
and
C2 = (GS)s
Decrypt(mpk, skk, C): chooses one action from two following cases according to the mode in C:
• Case mode := (u ∈ S): checks whether IDk is a member of S, that is, IDk ∈ S. If true, it sets S− = S \ {IDk} and
invokes ZerosAggr(mpk,S−) → GS− = G
ek
(cid:3)
γ·(cid:2)
ei
∈S− (γ+xi)
= e(skk, C1) · e(GS− , C2).
. Next it retrieves the session key
(4)
• Case mode := (u (cid:5)∈ S): checks whether IDk satisﬁes the relation IDk (cid:5)∈ S. If true, it sets S+ = S ∪ {IDk} and
invokes PolesAggr(mpk,S+) → HS+ = H
ek

(cid:3)
(cid:2)
1
ei
(γ+xi
∈S+
= e(skk, C1) · e(C2, HS+).
) . Next, it also retrieves the session key
(5)
Figure 2: The full construction of set-based broadcast encryption (SBE).
3.2 Our Construction
We now present our SBE scheme with three modes, such
as Select, All, and Cut. In this scheme, we assume that each
user has a unique identity ID (e.g., email address) and all
users in cryptosystem make up a full set U = {ID1, ··· , IDn},
where the size of U is not restricted. Given a subset of user-
s S in U, we now present the SBE construction providing
two basic access control mechanisms: positive membership
decision over u ∈ S and negative membership decision over
u (cid:5)∈ S, simultaneously.
Our SBE scheme is illustrated in Figure 4. In this scheme,
we choose the bilinear map system S = (p, G1, G2, GT , e(·,·))
of prime order p and two generators g and h in G1 and
G2, respectively [10, 11], where p is the order of group-
s. Additionally, the algorithm will employ a hash function
hash : {0, 1}∗ → Z
∗
p, mapping any identity ID described
as a binary string to a random element xi ∈ Z
∗
p, that is,
xi = hash(IDi). This scheme is described as follows:
• Setup: we redeﬁne two random elements G and H as the
generators in G1 and G2, respectively. We require G (cid:5)= g
and G is a secret. Let m be the maximum number of
aggregated users in the ZerosAggr algorithm. Usually, we
set m ≤ n/2 because the sender can use Select-mode when
the size of S is greater than n/2. In addition, the pub-
lic proﬁle pp is used to list all users in system and their
public tags, i.e., {(IDi, Hi)}. The initial status is deﬁned
as ∅. As a group-oriented cryptosystem, the parameter
pp is usually shared through public media, e.g., web, face-
book, where each user can search his friends proﬁles in a
convenient way. Note that, we must keep two values, G
and G, secret because of the following reasons:
– When the adversary knows the value G, the decryption
is executed by using
e(G, C1) = e(G, H s) = e(G, H)s = ek.
– When the adversary knows G and a sub-ciphertext C2 =
s
γ+xi , the decryption is implemented by
H
e(G1 · Gxi , C2) = e(Gγ+xi , H
s
γ+xi ) = e(G, H)s = ek.
• KeyGen: given a unique identity IDk, the user’s secret
key skk is only an element in G1. In addition, the new
user’s proﬁle ppk is also appended into pp. The scheme
allows adding new members into the system anytime, and
the total number of users is unlimited in the system.
• Encrypt: the sender may select one of Select and Cut
mechanisms to implement secure broadcast, where there
is no limit for the number of “cut-or-section” users. These
two mechanisms employ two Aggregate functions, ZerosAg-
gr for Cut-mode and PolesAggr for Select-mode, which
can aggregate all information of user’s identities in S in-
to two group elements GS and HS, respectively. We will
introduce this algorithm in detail in Section 3.4. And
then, the pair (H, GS ) or (H, HS) is used to generate the
ciphertext
(cid:8)
(C1, C2) =
(H s, (HS)s)
(H s, (GS )s)
for (u ∈ S)
for (u (cid:5)∈ S)
194Note that, a signiﬁcant feature of our scheme is short and
constant-size ciphertext.
• Decrypt: this process only needs two steps for a success-
ful decryption: ﬁrstly, the receiver invokes two Aggregate
functions, ZerosAggr for Select-mode and PolesAggr for
Cut-mode, taken as input S− or S+, respectively. Second-
ly, the above result will be used to decrypt the ciphertext
by using two bilinear maps.
We verify that the decryption works correctly as follows:
Case mode := (u ∈ S): when IDk ∈ S, we have S− = S \
{ek} and GS− = G
can be computed
from the ZerosAggr algorithm. Based on this value, we
check whether the triple (C1, C2) in ciphertext matches
the private key skk by using
e(skk, C1) · e(GS− , C2)
(cid:10)
· e
xk 
γ+xk , H s
∈S,ei
(cid:11)
(γ+xi)
(γ+xi)
= e
(cid:2)
∈S
(cid:2)
∈S
(cid:9)
(cid:4)=ek
γ+xk
, H
s·
G
G
ei
ei
ei
(cid:2)
γ
1
γ+xi
(cid:12)
1
(cid:2)
xks
= e(G, H)
γ+xk · e(G, H)
γs
γ+xk = e(G, H)s = Rs = ek.
Case mode := (u (cid:5)∈ S): when IDk (cid:5)∈ S, we have S+ = S ∪
{ek} and HS+ = H
) can be computed
from the P olesAggr algorithm. Based on this value, we
check whether the triple (C1, C2) in ciphertext matches
the private key skk by using
e(skk, C1) · e(C2, HS+)
(cid:10)
· e
xk 
γ+xk , H s
(cid:11)
(γ+xi)
(cid:2)
∈S
= e
(cid:2)
∈S
(cid:9)
(γ+xi
γ+xk
γ+xk
γ+xi
, H
∈S
G
G
ek
sγ
ei
ei
1
1

(cid:12)
= e(G, H)
xks
γ+xk · e(G, H)
γs
γ+xk = e(G, H)s = Rs = ek.
In summary, our scheme is easy-to-understand and the ci-
phertexts and decryption keys are constant size.
3.3 Construction for All-mode
We provide a solution for mode u ∈ All, that means that
all users can be authorized only if everyone of them holds
a valid key. This mode is usually realized based on Select-
mode with S = U, but it need to provide a complete list of
all users. A more eﬀective method is to consider All-mode as
a special case of Cut-mode with S = ∅, where ∅ denotes the
empty set. The reason is that u ∈ All is logically equivalent
to u (cid:5)∈ ∅. In this case, the work mode is deﬁned as u (cid:5)∈ ∅.
We provide this process as follows:
• Encrypt(mpk, ∅, u ∈ All): picks a random integer s ∈
Zp and computes the following cipertext C = (∅, u ∈
All, C1, C2), where
C1 = H s,
C2 = Gs
1.
The corresponded session key is ek = Rs.
• Decrypt(mpk, skk, C): When the mode u ∈ All in C
is found, it makes use of skk and the corresponding
public proﬁle Hk to recover ek
(cid:13)
ek = e(skk, C2) · e(C1, Hk)
(cid:13)
(cid:14)
(cid:14)
= e
G
xk
γ+xk , H s
· e
1
Gsγ , H
γ+xk
In contrast with Select-mode with S = U, our construction
does not require to invoke the aggregation function. More-
over, the broadcaster does not need to provide (or know)
a list of all users’ identities, such that the total number of
receivers is unlimited in one time broadcast.
3.4 Construction of Aggregation Functions
Given a subset S, the aggregate functions deﬁned in E-
quation (2) and (3) are used repeatedly in our constructions,
such that it is crucial to compute the output values (GS, HS)
from the public key mpk in an eﬃcient way. We provide a
fast recursive method to realize them as follows:
3.4.1 Implement of ZerosAggr function
To implement fast ZerosAggr, we ﬁrst extract the related
information {Gi = Gγi}i∈[1,m] from mpk, where γ is an un-
known secret. Let |S| = t and we require t < m. We provide
a fast recursive way to realize the ZerosAggr function: given
all {xi = hash(ei)}ei∈S, we deﬁne the polynomial of x as
(cid:4)
ei∈S(x + xi) =
(cid:15)t
k=0
(j)
and compute the coeﬃcient ak ∈ Zp for all k ∈ [0, t]. We
can use the recursive process to obtain these coeﬃcients. Let