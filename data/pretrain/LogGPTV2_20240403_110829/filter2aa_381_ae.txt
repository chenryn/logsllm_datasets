Things means that many more devices have Internet connec-
tivity and can be controlled from a mobile phone. Examples
are home and ofﬁce security systems, cars, classroom audio
video equipment, home appliances (thermostats, refrigerators,
televisions). It becomes very critical that the Web API end-
points of these devices are properly secured from hijacking
vulnerabilities.
A. Defense Guidelines
We attribute some of the observed problems to the shifting
app architecture in the modern era where web APIs are generic
service that can scale to support multiple client platforms,
including web and mobile apps. Additionally, due to the
enhanced capabilities of mobile devices, web service providers
sometimes opt to defer validation logic to the clients, ignoring
or oblivious to the subtle inconsistencies and vulnerabilities
that may arise as a result. Following are some guidelines based
on our ﬁndings in this work.
• Never trust the client. Do not defer validation to the client
side. The server must be at least as strict as the client for
input validation.
• The server must be prepared to handle and reject input
regardless of the client. No assumptions must be made
about the client.
• Authentication and Authorization logic must be carefully
implemented at the server side.
• Client-side validation must be thoroughly tested for con-
sistency with server-side validation logic. WARDroid can
help in identifying potential inconsistencies.
• Clients and Servers must sanitize inbound and outbound
data, especially where it can be used on either a mobile
or web client interchangeably.
While we have focused on the problems that can arise due to
inconsistent input validation logic, we believe that it will take
a concerted effort and paradigm shift to address mitigation of
this problem.
B. Limitations
Obfuscated code: Obfuscation is commonly observed in
popular real-world apps. A recent study has shown that 15%
of apps are obfuscated
[25]. We ﬁnd that many real-world
apps do not obfuscate their code. Many tools, including
Proguard [26], rename identiﬁers with semantically obscure
names to make reverse engineering more difﬁcult. WARDroid
does not handle obfuscated application code, but it is included
in future work.
WARDroid also does not handle native code and JNI code.
We consider these to be out of our scope.
State Changes: Another limitation of WARDroid is that
it cannot reason about state changes and values that may
originate from a previous request to the API. For example,
the app may request a token value from a remote server that
could be included in a subsequent request. Previous works
such as [21], [18] propose methodologies that can accomplish
this task. WARDroid can be retroﬁtted with this feature to
improve its accuracy.
WebViews: WARDroid’s analysis is focused on native mo-
bile code, and does not consider web API accesses facilitated
through WebView-loaded JavaScript code in hybrid mobile
apps. We use a subset of the apps from our recent work which
identiﬁes that over 90% of apps included at least one WebView
[19]. In that work, we provide an approach for uncovering
JavaScript Bridge functionality and semantics in hybrid mobile
apps.
Authentication: WARDroid also cannot evaluate requests
that require user authentication unless we hard-code test
credentials into the request template, such as a valid oAuth
tokens. An inherent challenge with most static analysis-based
systems, including WARDroid, is the inability to automatically
synthesize valid authentication sessions. Some level of human
intervention is necessary to overcome this limitation.
C. Convergence of Web and Mobile
In today’s Internet-connected mobile society, the web and
mobile platforms share some common ground in the effort to
provide security and privacy. Indeed, this work is inspired by
previous works on the web platform such as NoTamper [3] and
Waptec [7] that pursue similar goals in the context of browser-
based web applications. In this work, we directly tackle an
767
important issue that emerges from the amalgamation of the
web and mobile platforms.
The combination of mobile and web into new complex sys-
tems such as web service APIs, web-based operating system
environments, and hybrid applications presents a new frontier
in security and privacy research.
IX. RELATED WORK
We build on a number of previous works in the area of pro-
gram analysis on the Android framework. We especially make
use of Flowdroid [15] and Soot [11] program analysis tools.
Prior applications of these tools on Android include detection
of privacy leakage, malware detection, and other vulnerability
detection. In this work, we utilize program analysis techniques
to analyze a mobile application’s validation logic as a model
of it’s backend server validation logic.
Web Application Analysis. Our work is inspired by pre-
vious research into parameter tampering vulnerabilities on
web applications. Attacks that exploit these vulnerabilities
leverage the loose coupling of web services between the
client and server side. Waptec [7] and NoTamper [3] are
two prominent works that automatically identify parameter
tampering vulnerabilities in web applications and generate
exploits for those vulnerabilities. Similarly, WARDroid uses
concepts inspired by these works to analyze the inconsistencies
of the loose coupling between mobile apps and their backend
web API servers.
SIFON [27] analyzes web APIs to determine the extent
of oversharing of user information where the server sends
information to the app that is never used. Other related works
look at the issues that arise when webview components are
used to combine the web and mobile platforms into a seamless
experience. Luo et al. found several security issues that arose
due to this practice [28]. NoFrak [29] analyzed a similar issue
and proposed an approach to augment the security models to
allow ﬁner grained access control between mobile and web
interaction.
Static Analysis. This work utilizes various static analysis
techniques and tools. Static analysis is often scalable since it
does not have to execute the app, and can achieve higher code
coverage than dynamic analysis. Previous works that use static
analysis commonly reconstruct the inter-procedural control
ﬂow graph by modeling the Android app’s life-cycle. In this
work, we leverage FlowDroid [15] to similarly reconstruct and
extend the ICGF as an augmented program dependence graph,
but our goal is slightly different than detecting data ﬂow from
source to sink. Other similar works such as Extractocol [18]
and Smartgen [30] follow a similar approach and utilize
Flowdroid as the basis for static analysis of apps to uncover
the behavior of communications with web servers. WARDroid
similarly analyzes the network behavior, but with a different
goal of analyzing the validation inconsistency with the server.
Protocol Reverse Engineering. Our work shares some
similarities and goals with protocol reverse engineering [31],
[32]. However, rather than exhaustive protocol reconstruction,
our goal is more aligned with [33] with a focus on uncovering
particular server-side vulnerabilities.
Input Generation. Several previous works implement input
data generation or fuzzing on Android applications. Intel-
lidroid [34] is a hybrid dynamic-static analysis framework that
analyzed event chains and can precisely identify the order or
inputs to trigger a speciﬁc code path. We used several concepts
from Intellidroid, especially as it relates to symbolic execution
and solving constraints using Z3 libraries. We opted not to
directly use Intellidroid in our approach because it is more
suited to malware detection and requires Android framework
instrumentation and execution in an emulator.
Symbolic Execution. Symbolic execution has been widely
used in many security applications on mobile applications.
TriggerScope [35] uses symbolic execution and other program
analysis techniques to precisely identify logic bomb triggers
in Android apps. IntelliDroid is similar to our work and
extracts path constraints that are used to generate app inputs
that can trigger speciﬁc execution paths. We leverage many
of their techniques and motivation in implementing symbolic
execution to extract path constraints.
App Network Trafﬁc. Several previous works also analyze
app network trafﬁc, but not necessarily through analysis of
the apps. Instead, this area of research primarily focuses on
the network layer to ﬁngerprint apps through raw packet-level
network trafﬁc inspection. FLOWR [36] tries to distinguish
mobile app trafﬁc by extracting key-value pairs from HTTP
sessions at the network level. NetworkProﬁler [37] uses UI-
based fuzzing on Android apps to build a comprehensive
network trace for a given app.
X. CONCLUSION
Modern mobile applications rely on web services to en-
able their functionality through HTTP-based communication.
Unfortunately, the disparate nature of the mobile and web
platforms causes input validation inconsistencies that can
lead to serious security issues. We presented WARDroid, a
framework that utilizes static program analysis and symbolic
execution to model input validation logic between mobile apps
and their remote web API servers. WARDroid extracts and
validates web API logic implementation in mobile apps and
uncovers inconsistencies between the app and server logic.
The uncovered inconsistencies are shown to expose serious
vulnerabilities in web API servers that affect a diverse set
of mobile apps. Our analysis of 10,000 apps uncovered a
signiﬁcant portion of apps with web API hijacking opportuni-
ties that can violate user privacy and security for millions of
mobile app users. The inconsistency problem is not limited
to Android apps, but any client that utilizes the deployed
web API services, including iOS apps, Windows apps, and
web applications. This work sheds light on the existence and
pervasiveness of this important ongoing research problem, and
our hope is that it will motivate further research in this area.
ACKNOWLEDGMENT
This material is based upon work supported in part by the
National Science Foundation (NSF) under Grant no. 1314823
768
and 1700544. Any opinions, ﬁndings, and conclusions or
recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of NSF.
REFERENCES
[1] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach,
and T. Berners-Lee, “Hypertext transfer protocol–http/1.1,” Tech. Rep.,
1999.
[2] “OWASP Mobile Threats,” https://www.owasp.org/index.php/Projects/
OWASP Mobile Security Project - Top Ten Mobile Risks.
[3] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. Venkatakrish-
nan, “Notamper: automatic blackbox detection of parameter tampering
opportunities in web applications,” in Proceedings of the 17th ACM
conference on Computer and communications security.
ACM, 2010,
pp. 607–618.
[4] S. Stamm, B. Sterne, and G. Markham, “Reining in the web with content
security policy,” in Proceedings of the 19th international conference on
World wide web.
ACM, 2010, pp. 921–930.
[5] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee, “On the incoherencies
in web browser access control policies,” in 2010 IEEE Symposium on
Security and Privacy.
IEEE, 2010, pp. 463–478.
[6] A. Mendoza, K. Singh, and G. Gu, “What is wrecking your data
plan? a measurement study of mobile web overhead,” in Computer
Communications (INFOCOM), 2015 IEEE Conference on. IEEE, 2015,
pp. 2740–2748.
[7] P. Bisht, T. Hinrichs, N. Skrupsky, and V. Venkatakrishnan, “Waptec:
whitebox analysis of web applications for parameter tampering exploit
construction,” in Proceedings of the 18th ACM conference on Computer
and communications security.
ACM, 2011, pp. 575–586.
[8] A. Sudhodanan, A. Armando, R. Carbone, L. Compagna et al., “Attack
patterns for black-box security testing of multi-party web applications.”
in NDSS, 2016.
[9] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-
site request forgery,” in Proceedings of the 15th ACM conference on
Computer and communications security.
ACM, 2008, pp. 75–88.
[10] R. Vallee-Rai and L. J. Hendren, “Jimple: Simplifying java bytecode for
analyses and transformations,” 1998.
[11] R. Vall´ee-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan,
“Soot-a java bytecode optimization framework,” in Proceedings of the
1999 conference of the Centre for Advanced Studies on Collaborative
research.
IBM Press, 1999, p. 13.
[12] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox,
J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: an information-
ﬂow tracking system for realtime privacy monitoring on smartphones,”
ACM Transactions on Computer Systems (TOCS), vol. 32, no. 2, p. 5,
2014.
[13] L. De Moura and N. Bjørner, “Z3: An efﬁcient smt solver,” Tools and
Algorithms for the Construction and Analysis of Systems, pp. 337–340,
2008.
[14] S. Arzt, S. Rasthofer, and E. Bodden, “Susi: A tool for the fully
automated classiﬁcation and categorization of android sources and
sinks,” University of Darmstadt, Tech. Rep. TUDCS-2013-0114, 2013.
[15] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
apps,” Acm Sigplan Notices, vol. 49, no. 6, pp. 259–269, 2014.
[16] J. C. King, “Symbolic execution and program testing,” Communications
of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[17] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: A z3-based string solver for
web application analysis,” in Proceedings of the 2013 9th Joint Meeting
on Foundations of Software Engineering.
ACM, 2013, pp. 114–124.
[18] H. Choi, J. Kim, H. Hong, Y. Kim, J. Lee, and D. Han, “Extractocol: Au-
toatic extraction of application-level protocol behaviors for android ap-
plications,” ACM SIGCOMM Computer Communication Review, vol. 45,
no. 4, pp. 593–594, 2015.
[19] G. Yang, A. Mendoza, J. Zhang, and G. Gu, “Precisely and scalably
vetting javascript bridge in android hybrid apps,” in Proceedings of The
20th International Symposium on Research on Attacks, Intrusions and
Defenses (RAID’17), September 2017.
[20] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna,
and Y. Chen, “Edgeminer: Automatically detecting implicit control ﬂow
transitions through the android framework.” in NDSS, 2015.
[21] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden, “Harvesting run-
time values in android applications that feature anti-analysis techniques,”
2016.
[22] R. Wang, S. Chen, X. Wang, and S. Qadeer, “How to shop for free
online–security analysis of cashier-as-a-service based web stores,” in
Security and Privacy (SP), 2011 IEEE Symposium on. IEEE, 2011, pp.
465–480.
[23] K. Allix, T. F. Bissyand´e, J. Klein, and Y. Le Traon, “Androzoo:
Collecting millions of android apps for the research community,” in
Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working
Conference on.
IEEE, 2016, pp. 468–471.
[24] “Appbrain android statistics,” https://www.appbrain.com//.
[25] N. Viennot, E. Garcia, and J. Nieh, “A measurement study of google
play,” in ACM SIGMETRICS Performance Evaluation Review, vol. 42,
no. 1.
ACM, 2014, pp. 221–233.
[26] E. Lafortune et al., “Proguard,” h ttp://proguard. sourceforge. net, 2004.
[27] W. Koch, A. Chaabane, M. Egele, W. Robertson, and E. Kirda, “Semi-
automated discovery of server-based information oversharing vulnerabil-
ities in android applications,” in Proceedings of the 26th ACM SIGSOFT
International Symposium on Software Testing and Analysis.
ACM,
2017, pp. 147–157.
[28] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on webview
in the android system,” in Proceedings of the 27th Annual Computer
Security Applications Conference.
ACM, 2011, pp. 343–352.
[29] S. Pooryousef and M. Amini, “Fine-grained access control for hybrid
mobile applications in android using restricted paths,” in Information
Security and Cryptology (ISCISC), 2016 13th International Iranian
Society of Cryptology Conference on.
IEEE, 2016, pp. 85–90.
[30] C. Zuo and Z. Lin, “Smartgen: Exposing server urls of mobile apps with
selective symbolic execution,” in Proceedings of the 26th International
Conference on World Wide Web.
International World Wide Web
Conferences Steering Committee, 2017, pp. 867–876.
[31] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dispatcher:
Enabling active botnet inﬁltration using automatic protocol reverse-
engineering,” in Proceedings of the 16th ACM conference on Computer
and communications security.
ACM, 2009, pp. 621–634.
[32] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex:
Protocol speciﬁcation extraction,” in Security and Privacy, 2009 30th
IEEE Symposium on.
IEEE, 2009, pp. 110–125.
[33] G. Pellegrino and D. Balzarotti, “Toward black-box detection of logic
ﬂaws in web applications.” in NDSS, 2014.
[34] M. Y. Wong and D. Lie, “Intellidroid: A targeted input generator for the
dynamic analysis of android malware,” in Proceedings of the Annual
Symposium on Network and Distributed System Security (NDSS), 2016.
[35] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and
G. Vigna, “Triggerscope: Towards detecting logic bombs in android
applications,” in Security and Privacy (SP), 2016 IEEE Symposium on.
IEEE, 2016, pp. 377–396.
[36] Q. Xu, T. Andrews, Y. Liao, S. Miskovic, Z. M. Mao, M. Baldi, and
A. Nucci, “Flowr: a self-learning system for classifying mobileappli-
cation trafﬁc,” ACM SIGMETRICS Performance Evaluation Review,
vol. 42, no. 1, pp. 569–570, 2014.
[37] S. Dai, A. Tongaonkar, X. Wang, A. Nucci, and D. Song, “Networkpro-
ﬁler: Towards automatic ﬁngerprinting of android apps,” in INFOCOM,
2013 Proceedings IEEE.
IEEE, 2013, pp. 809–817.
769