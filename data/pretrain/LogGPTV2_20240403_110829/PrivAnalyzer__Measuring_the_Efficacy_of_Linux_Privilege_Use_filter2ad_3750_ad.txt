### Analysis of Instrumented Programs with ChronoPriv

Each instrumented program created by ChronoPriv was tested using the sample inputs described in Section VII-B. The number of LLVM instructions executed for each privilege set and corresponding IDs was recorded. These results are presented in the "Dynamic Instruction Count" column of Table III. The findings indicate that reducing available Linux privileges can mitigate vulnerabilities associated with binding to a privileged port (Attack 3). However, this approach often fails to address other types of attacks.

#### ping
The `ping` command is not vulnerable to any of the modeled attacks throughout its execution. It requires `CAP_NET_RAW` to create a raw socket using `socket` with `SOCK_RAW`, which it does only once at the beginning of the program. This allows `ping` to drop `CAP_NET_RAW` early. Additionally, `ping` needs `CAP_NET_ADMIN` to use the `SO_DEBUG` and `SO_MARK` options in `setsockopt` if the `-d` or `-m` flags are specified. This setup occurs early in the program, enabling `ping` to drop all its privileges very early.

#### thttpd
Similar to `ping`, `thttpd` uses its privileges early in its execution, such as binding to a privileged port and setting the serverâ€™s root directory. After the initial configuration, `thttpd` drops all its privileges.

#### sshd
`sshd` remains vulnerable to Attacks 1, 2, and 4 throughout its execution. It drops `CAP_NET_BIND_SERVICE` after binding to a privileged port but retains other privileges. The reasons for this are twofold:
1. Some of `sshd`'s signal handlers use privileges, and since signal handlers can be called at any time, these privileges remain active.
2. Implementation limitations within the AutoPriv compiler, which uses a conservatively correct call graph for inter-procedural privilege use propagation. When `sshd` creates a child process to handle a client connection, the child process enters a loop that continually reads and processes data from the client. Privileges remain active during this loop due to an indirect function call. Since AutoPriv creates an over-approximation of the targets of the indirect function call, it keeps these privileges alive. A more accurate call graph analysis could improve AutoPriv's ability to identify when privileges can be safely removed using `priv_remove()`.

### Code Refactoring and Security Improvements

The results in Table III show that simply dropping Linux privileges when no longer needed may not be sufficient. While `ping` and `thttpd` are largely invulnerable to the modeled attacks, `passwd`, `su`, and `sshd` remain vulnerable for most of their execution. PrivAnalyzer reveals that these programs retain powerful privileges until late in their execution. This led us to investigate whether code refactoring could improve their resistance to privilege escalation.

#### Refactored passwd
As shown in Table III, `CAP_SETUID` is available for 63% of `passwd`'s execution, and `CAP_OWNER`, `CAP_FOWNER`, and `CAP_DAC_OVERRIDE` are available for more than 99% of executed instructions. These privileges are extremely powerful. We aimed to reduce the number of instructions executed with these four privileges by making two changes:
1. Moving the `setuid()` call earlier in the execution, allowing `passwd` to drop `CAP_SETUID` sooner.
2. Creating a new special user named `etc` (UID 998) and setting the owner of the `/etc` directory and the shadow password file to `etc`. This allows `passwd` to change its effective UID to `etc` and eliminate the use of `CAP_OWNER`, `CAP_FOWNER`, and `CAP_DAC_OVERRIDE`.

After refactoring, PrivAnalyzer shows that `passwd` is invulnerable to all modeled attacks for 96% of its execution. Using `passwd_priv4` instead of `passwd_priv3` decreases vulnerability, particularly by dropping `CAP_SETUID`.

#### Refactored su
`su` is also vulnerable because `CAP_SETUID` is live for too long. We observed that the target user is determined early in the execution. Therefore, we modified `su` to:
1. Change the supplementary group ID list and use `CAP_SETUID` and `CAP_SETGID` to set the saved user ID and saved group ID to the target user ID and group ID, respectively.
2. Use `setresuid()` and `setresgid()` to change the effective user ID and group ID to the saved user ID and group ID without using privileges.
3. Change the owner of the `sulog` file to `etc` and set the effective group ID to `etc` when `CAP_SETGID` is available.
4. Eliminate `CAP_DAC_READ_SEARCH` by setting the effective user ID to the owner of `/etc/shadow` when `CAP_SETUID` is available.

These changes allow `su` to drop these privileges much earlier. The refactored `su` was then analyzed using PrivAnalyzer to measure its improved security.

### Conclusion
Highlighting these changes in privilege sets helps developers identify powerful privileges and guide them in refactoring their programs to reduce privilege use, thereby improving overall security.