# 33 \| 并发中的编译技术（一）：如何从语言层面支持线程？你好，我是宫文学。现代的编程语言，开始越来越多地采用并发计算的模式。这也对语言的设计和编译技术提出了要求，需要能够更方便地利用计算机的多核处理能力。并发计算需求的增长跟两个趋势有关：一是，CPU在制程上的挑战越来越大，逼近物理极限，主频提升也越来越慢，计算能力的提升主要靠核数的增加，比如现在的手机，核数越来越多，动不动就8 核、12 核，用于服务器的 CPU核数则更多；二是，现代应用对并发处理的需求越来越高，云计算、人工智能、大数据和5G 都会吃掉大量的计算量。因此，在现代语言中，友好的并发处理能力是一项重要特性，也就需要编译技术进行相应的配合。现代计算机语言采用了多种并发技术，包括线程、协程、Actor模式等。我会用三讲来带你了解它们，从而理解编译技术要如何与这些并发计算模式相配合。这一讲，我们重点探讨线程模式，它是现代计算机语言中支持并发的基础模式。它也是讨论协程和Actor 等其他话题的基础。不过在此之前，我们需要先了解一下并发计算的一点底层机制：并行与并发、进程和线程。并发的底层机制：并行与并发、进程与线程我们先来学习一下硬件层面对并行计算的支持。假设你的计算机有两颗 CPU，每颗 CPU有两个内核，那么在同一时间，至少可以有 4个程序同时运行。后来 CPU 厂商又发明了超线程（HyperThreading）技术，让一个内核可以同时执行两个线程，增加对 CPU内部功能单元的利用率，这有点像我们之前讲过的流水线技术。这样一来，在操作系统里就可以虚拟出8 个内核（或者叫做操作系统线程），在同一时间可以有 8个程序同时运行。这种真正的同时运行，我们叫做**并行**（parallelism）。![](Text)savepage-src="https://static001.geekbang.org/resource/image/48/77/487d4289970590947915689aeyy5a377.jpg"}图 1：虚拟内核与 CPU真实内核的对应关系slate-object="mark"}可是仅仅 8路并行，也不够用呀。如果你去查看一下自己电脑里的进程数，会发现运行着几十个进程，而线程数就更多了。所以，操作系统会用分时技术，让一个程序执行一段时间，停下来，再让另一个程序运行。由于时间片切得很短，对于每一个程序来说，感觉上似乎一直在运行。这种"同时"能处理多个任务，但实际上并不一定是真正同时执行的，就叫做**并发**（Concurrency）。实际上，哪怕我们的计算机只有一个内核，我们也可以实现多个任务的并发执行。这通常是由操作系统的一个调度程序（Scheduler）来实现的。但是有一点，操作系统在调度多个任务的时候，是有一定开销的：1.  一开始是以进程为单位来做调度，开销比较大。        2.  在切换        **进程**        的时候，要保存当前进程的上下文，加载下一个进程的上下文，也会有一定的开销。由于进程是一个比较大的单位，其上下文的信息也比较多，包括用户级上下文（程序代码、静态数据、用户堆栈等）、寄存器上下文（各种寄存器的值）和系统级上下文（操作系统中与该进程有关的信息，包括进程控制块、内存管理信息、内核栈等）。        相比于进程，**线程技术就要轻量级一些**。在一个进程内部，可以有多个线程，每个线程都共享进程的资源，包括内存资源（代码、静态数据、堆）、操作系统资源（如文件描述符、网络连接等）和安全属性（用户ID等），但拥有自己的栈和寄存器资源。这样一来，线程的上下文包含的信息比较少，所以切换起来开销就比较小，可以把宝贵的CPU 时间用于执行用户的任务。总结起来，线程是操作系统做并发调度的基本单位，并且可以跟同一个进程内的其他线程共享内存等资源。操作系统会让一个线程运行一段时间，然后把它停下来，把它所使用的寄存器保存起来，接着让另一个线程运行，这就是线程调度原理。你要在大脑里记下这个场景，这样对理解后面所探讨的所有并发技术都很有帮助。![](Images/3fa1ed70f17081e284c766423b4c74b2.png)savepage-src="https://static001.geekbang.org/resource/image/13/2c/13597dc8c5ea3124a1b85b040072242c.jpg"}图2：进程的共享资源和线程私有的资源slate-object="mark"}我们通常**把进程作为资源分配的基本单元，而把线程作为并发执行的基本单元**。不过，有的时候，用进程作为并发的单元也是比较好的，比如谷歌浏览器每打开一个Tab页，就新启动一个进程。这是因为，浏览器中多个进程之间不需要有互动。并且，由于各个进程所使用的资源是独立的，所以一个进程崩溃也不会影响到另一个。而如果采用线程模型的话，由于它比较轻量级，消耗的资源比较少，所以你可以在一个操作系统上启动几千个线程，这样就能执行更多的并发任务。所以，在一般的网络编程模型中，我们可以针对每个网络连接，都启动一条线程来处理该网络连接上的请求。在第二个模块中我们分析过的MySQL就是这样做的。你每次跟 MySQL建立连接，它就会启动一条线程来响应你的查询请求。采用线程模型的话，程序就可以在不同线程之间共享数据。比如，在数据库系统中，如果一个客户端提交了一条SQL，那么这个 SQL的编译结果可以被缓存起来。如果另一个用户恰好也执行了同一个SQL，那么就可以不用再编译一遍，因为两条线程可以访问共享的内存。但是共享内存也会带来一些问题。当多个线程访问同样的数据的时候，会出现数据处理的错误。如果使用并发程序会造成错误，那当然不是我们所希望的。所以，我们就要采用一定的技术去消除这些错误。Java语言内置的并发模型就是线程模型，并且在语法层面为线程模型提供了一些原生的支持。所以接下来，我们先借助Java语言去了解一下，如何用编译技术来配合线程模型。Java 的并发机制Java从语言层面上对并发编程提供了支持，简化了程序的开发。Java 对操作系统的线程进行了封装，程序员使用 Thread 类或者让一个类实现Runnable 接口，就可以作为一个线程运行。Thread类提供了一些方法，能够控制线程的运行，并能够在多个线程之间协作。从语法角度，与并发有关的关键字有 synchronized 和volatile。它们就是用于解决多个线程访问共享内存的难题。synchronized 关键字：保证操作的原子性我们通过一个例子，来看看多个线程访问共享数据的时候，为什么会导致数据错误。    public class TestThread {        public static void main(String[] args) {            Num num = new Num();            for (int i = 0; i   > I thought of objects being like biological cells and/or individual> computers on a network, only able to communicate with messages (so> messaging came at the very beginning -- it took a while to see how to> do messaging in a programming language efficiently enough to be> useful)> >>>  > ...> >>>  > OOP to me means only messaging, local retention and protection and> hiding of state-process, and extreme late-binding of all things. It> can be done in Smalltalk and in> LISP.> >总结起来，Alan对面向对象的理解，强调消息传递、封装和动态绑定，没有谈多态、继承等。对照这个理解，你会发现Actor模式比现有的流行的面向对象编程语言，更加接近面向对象的实现。无论如何，通过把 Actor 和你熟悉的面向对象做关联，我相信能够拉近你跟Actor之间的距离，甚至会引发你以新的视角来审视目前流行的面向对象范式。好了，到现在，你可以说是对 Actor模型比较熟悉了，也可以这么理解：Actor有点像面向对象程序里的对象，里面可以封装一些数据和算法；但你不能调用它的方法，只能给它发消息，它会异步地、并发地处理这些消息。但是，你可能会提出一个疑问：Actor模式不用锁的机制就能实现并发程序之间的协作，这一点很好，那么它有没有什么缺点呢？我们知道，任何设计方案都是一种取舍。一个方案有某方面的优势，可能就会有其他方面的劣势。**采用 Actor模式，会有两方面的问题**。第一，由于 Actor之间不共享任何数据，因此不仅增加了数据复制的时间，还增加了内存占用量。但这也不完全是缺点：一方面，你可以通过在编写程序时，尽量降低消息对象的大小，从而减少数据复制导致的开销；另一方面，消息传递的方式对于本机的Actor 和集群中的 Actor是一样的，这就使得编写分布式的云端应用更简单，从而在云计算时代可以获得更好的应用。第二，基于消息的并发机制，基本上是采用异步的编程模式，这就和通常程序的编程风格有很大的不同。你发出一个消息，并不会马上得到结果，而要等待另一个Actor发送消息回来。这对于习惯于编写同步代码的同学，可能是一个挑战。好了，我们已经讨论了 Actor机制的特点。接下来我们再看看，什么语言和框架实现了 Actor模式。 支持 Actor 模型的语言和框架支持 Actor 的最有名的语言是 Erlang。Erlang是爱立信公司发明的，它的正式版本是在 1987 年发布，其核心设计者是乔 ·阿姆斯特朗（JoeArmstrong），最早是用于开发电信领域的软件系统。在 Erlang 中，每个 Actor叫作一个进程（Process）。但这个"进程"其实不是操作系统意义上的进程，而是Erlang 运行时的并发调度单位。Erlang有两个显著的优点：首先，对并发的支持非常好，所以它也被叫做面向并发的编程语言（COP）。第二，用Erlang 可以编写高可靠性的软件，可以达到 9 个 9。这两个优点都与 Actor模式有关： 1.  Erlang 的软件由很多 Actor    构成；    2.  这些 Actor    可以分布在多台机器上，相互之间的通讯跟在同一台机器上没有区别；        3.  某个 Actor    甚至机器出现故障，都不影响整体系统，可以在其他机器上重新启动该    Actor；    4.  Actor    的代码可以在运行时更新。        所以，由 Actor 构成的系统真的像一个生命体，每个 Actor像一个细胞。细胞可以有新陈代谢，而生命体却一直存在。可以说，用 Erlang编写的基于 Actor模式的软件，非常好地体现了复杂系统的精髓。到这里，你是不是就能解释"Erlang语言厉害在哪里"这个问题了。鉴于 Actor 为 Erlang带来的并发能力和高可靠性，有一些比较流行的开源系统就是用 Erlang编写的。比如，消息队列系统 RabbitMQ、分布式的文档数据库系统CouchDB，都很好地体现了 Erlang的并发能力和健壮性。除了 Erlang 以外，Scala 语言也提供了对 Actor 的支持，它是通过 Akka库实现的，运行在 JVM 上。我还关注了微软的一个 Orleans 项目，它在.NET平台上支持 Actor模式，并进一步做了一些有趣的创新。那接下来我们继续探讨一下，这些语言和框架是如何实现 Actor机制的，以及需要编译器做什么配合。Actor 模型的实现在上一讲研究过协程的实现机制以后，我们现在再分析 Actor的实现机制时，其实就应该会把握要点了。比如说，我们会去看它的调度机制和内存管理机制等。鉴于Erlang 算是支持 Actor 的最有名、使用最多的语言，接下来我会以 Erlang的实现机制带你学习 Actor机制是如何实现的。首先，我们知道，肯定要有个调度器，把海量的 Actor在多个线程上调度。并发调度机制那我们需要细究一下：对于 Actor，该如何做调度呢？什么时候把一个 Actor停下，让另一个 Actor 运行呢？协程也好，Actor也好，都是在应用级做调度，而不是像线程那样，在应用完全不知道的情况下，就被操作系统调度了。对于协程，我们是通过一些像yield这样的特殊语句，触发调度机制。那，**Actor在什么时候调度比较好呢？**前面我们也讲过了，Actor的运行规律，是每次从邮箱取一条消息并进行处理。那么，我们自然会想到，一个可选的调度时机，就是让Actor 每处理完一条消息，就暂停一下，让别的 Actor有机会运行。当然，如果处理一条消息所花费的时间太短，比如有的消息是可以被忽略的，那么处理多条消息，累积到一定时间再去调度也行。了解了调度时机，我们再挑战第二个比较难的话题：如果处理一条消息就要花费很长时间怎么办呢？能否实现**抢占式的调度**呢，就像 Goroutine那样？ 当然可以，但这个时候就肯定需要编译器和运行时的配合了。Erlang的运行机制，是基于一个寄存器机解释执行。这使得调度器可以在合适的时机，去停下某个Actor 的运行，调度其他 Actor过来运行。 Erlang 做抢占式调度的机制是对 Reduction 做计数，Reduction可以看作是占时不长的一小块工作量。如果某个 Actor 运行了比较多的Reduction，那就可以对它做调度，从而提供了软实时的能力（具体可以参考这篇文章slate-object="inline"）。在比较新的版本中，Erlang也加入了编译成本地代码的特性，那么在生成的本地代码中，也需要编译器加入对Reduction 计数的代码，这就有点像 Goroutine了。 这也是 Erlang 和 Scala/Akka 的区别。Akka 没有得到编译器和 JVM在底层的支持，也就没办法实现抢占式的调度。这有可能让某些特别耗时的 Actor影响了其他Actor，使得系统的响应时间不稳定。最后一个涉及调度的话题，是 **I/O与调度的关系**。这个关系如果处理得不好，那么对系统整体的性能影响会很大。通常我们编写 I/O功能时，会采用同步编程模式来获取数据。这个时候，操作系统会阻塞当前的线程，直到成功获取了数据以后，才可以继续执行。    getSomeData();    //操作系统会阻塞住线程，直到获得了数据。    do something else //继续执行采用这种模式开发一个服务端程序，会导致大量线程被阻塞住，等待 I/O的结果。由于每个线程都需要不少的内存，并且线程切换的成本也比较高，因此就导致一台服务器能够服务的客户端数量大大降低。如果这时候，你在运行时查看服务程序的状态，就会发现大量线程在等待，CPU利用率也不高，而新的客户端又连接不上来，造成服务器资源的浪费。并且，如果采用协程等应用级的并发机制，一个线程被阻塞以后，排在这个线程上的其他协程也只能等待，从而导致服务响应时间变得不可靠，有时快，有时慢。我们在前一讲了解过Goroutine 的调度器。它在遇到这种情况的时候，就会把这条线程上的其他Goroutine挪到没被阻塞的线程上，从而尽快得到运行机会。由于阻塞式 I/O 的缺点，现在很多语言也提供了非阻塞 I/O的机制。在这种机制下，程序在做 I/O请求的时候并不能马上获得数据。当操作系统准备好数据以后，应用程序可以通过轮询或被回调的方式获取数据。Node.js就是采用这种 I/O模式的典型代表。上一讲提到的 C++ 协程库libco，也把非阻塞的网络通讯机制和协程机制做了一个很好的整合，大大增加了系统的整体性能。而 Erlang 在很早以前就解决了这个问题。在 Erlang 的最底层，所有的 I/O都是用事件驱动的方式来实现的。系统收到了一块数据，就调用应用来处理，整个过程都是非阻塞的。说完了并发调度机制，我们再来看看运行时的另一个重要特征，内存管理机制。内存管理机制内存管理机制要考虑栈、堆都怎么设计，以及垃圾收集机制等内容。![](Images/91ea364cd4c2ec96cb2a97436989ce6f.png)savepage-src="https://static001.geekbang.org/resource/image/a3/fe/a36035d18b24bcebb8a4d0a0b191a3fe.jpg"}图 3：Erlang 的内存模型slate-object="mark"}首先说栈。每个 Actor 也需要有自己的栈空间，在执行 Actor里面的逻辑的时候，用于保存本地变量。这跟上一节讲过的 Stateful的协程很像。再来看看堆。Erlang 的堆与其他语言有很大的区别，它的每个 Actor都有自己的堆空间，而不是像其他编程模型那样，不同的线程共享堆空间。这也很容易理解，因为Actor模型的特点，就是并发的程序之间没有共享的内存，所以当然也就不需要共享的堆了。再进一步，由于每个 Actor都有自己的堆，因此会给垃圾收集带来很大的便利：1.  因为整个程序划分成了很多个 Actor，每个 Actor    都有自己的堆，所以每个 Actor    的垃圾都比较少，不用一次回收整个应用的垃圾，所以回收速度会很快。        2.  由于没有共享内存，所以垃圾收集器不需要停下整个应用，而只需要停下被收集的    Actor。这就避免了"停下整个世界（STW）"问题，而这个问题是 Java、Go    等语言面临的重大技术挑战。        3.  如果一个 Actor    的生命周期结束，那么它占用的内存会被马上释放掉。这意味着，对于有些生命周期比较短的    Actor    来说，可能压根儿都不需要做垃圾收集。        好了，基于 Erlang，我们学习了 Actor的运行时机制的两个重要特征：一是并发调度机制，二是内存管理机制。那么，与此相配合，需要编译器做什么工作呢？编译器的配合工作我们说过，Erlang首先是解释执行的，是用一个寄存器机来运行字节码。那么，**编译器的任务，就是生成正确的字节码。**之前我们已经分别研究过 Graal、Python 和 V8 Ignition的字节码了。我们知道，字节码的设计很大程度上体现了语言的设计特点，体现了与运行时的交互过程。Erlang的字节码设计当然也是如此。比如，针对消息的发送和接收，它专门提供了 send 指令和 receive指令，这体现了 Erlang 的并发特征。再比如，Erlang还提供了与内存管理有关的指令，比如分配一个新的栈桢等，体现了 Erlang在内存管理上的特点。不过，我们知道，仅仅以字节码的方式解释执行，不能满足计算密集型的需求。所以，Erlang也正在努力提供编译成机器码运行的特性，这也需要编译器的支持。那你可以想象出，生成的机器码，一定也会跟运行时配合，来实现Erlang特有的并发机制和内存管理机制。课程小结今天这一讲，我们介绍了另一种并发模型：Actor 模型。Actor模型的特点，是避免在并发的程序之间共享任何信息，从而程序就不需要使用锁机制来保证数据的一致性。但是，采用Actor机制也会因为数据拷贝导致更大的开销，并且你需要习惯异步的编程风格。Erlang 是实现 Actor机制的典型代表。它被称为面向并发的编程语言，并且能够提供很高的可靠性。这都源于它善用了Actor 的特点：**由 Actor构成的系统更像一个生命体一般的复杂系统**。在实现 Actor模型的时候，你要在运行时里实现独特的调度机制和内存管理机制，这些也需要编译器的支持。本讲的思维导图我也放在了下面，供你参考：![](Images/93d371fbba2bb93b06657822e817e4a7.png)savepage-src="https://static001.geekbang.org/resource/image/c0/5d/c04c32c93280afbea3fdc112285a085d.jpg"}好了，今天这一讲加上第 33slate-object="inline"和34 讲slate-object="inline"，我们用了三讲，介绍了不同计算机语言是如何实现并发机制的。不难看出，并发机制确实是计算机语言设计中的一个重点。不同的并发机制，会非常深刻地影响计算机语言的运行时的实现，以及所采用的编译技术。一课一思你是否也曾经采用过消息传递的机制，来实现多个系统或者模块之间的调度？你从中获得了什么经验呢？欢迎你和我分享。参考资料1.       Carl Hewitt 关于 Actor    的       [论文            2.       微软    [Orleans    项目介绍            3.       介绍 Erlang 虚拟机原理的        [在线电子书            4.       介绍 Erlang 字节码的        [文章            