目前有两种不同的版本（我相信旧版本很快就会被移除）：
在 Empire，你可以使用模块：
usemodule situational_awareness/network/bloodhound
这仍然是查询非常慢的旧的 PowerShell 版本
最好的选择是 Sharphound，Sharphound 是最原始的 C# 版本 Bloodhound Ingester。这是个更快更稳定的
版本。可以用作独立二进制文件，也可以作为 PowerShell 脚本导入。Sharphound PowerShell 脚本将使用反
射和 assembly.load 加载已编译 BloodHound C# 版本的 ingestor 并将其捕获。
https://github.com/BloodHoundAD/BloodHound/tree/master/Ingestors
要运行 Bloodhound/Sharphound Ingestor，你可能需要指定多个集合方法：
Group - Collect group membership information
收集组成员身份信息
LocalGroup - Collect local admin information for computers
收集计算机的本地管理信息
Session - Collect session information for computers
收集计算机的会话信息
SessionLoop - Continuously collect session information until killed
持续收集会话信息直到结束
Trusts - Enumerate domain trust data
列举域内信任数据
ACL - Collect ACL (Access Control List) data
收集ACL（访问控制列表）数据
ComputerOnly - Collects Local Admin and Session data
收集本地管理和会话数据
GPOLocalGroup - Collects Local Admin information using GPO (Group Policy Objects)
使用GPO（组策略对象）收集本地管理信息
LoggedOn - Collects session information using privileged methods (needs admin!)
使用特权方法收集会话信息（需要管理员权限！）
ObjectProps - Collects node property information for users and computers
为用户和计算机收集节点属性信息
Default - Collects Group Membership， Local Admin， Sessions， and Domain Trusts
收集组成员、本地管理员、会话和域信任关系
在目标系统上运行 Blood/Sharphound:
运行 PowerShell，然后导入 Bloodhound.ps1 或者 SharpHound.ps1：
Invoke-Bloodhound -CollectionMethod Default
Invoke-Bloodhound -CollectionMethod ACL，ObjectProps，Default-CompressData -RemoveCSV -
NoSaveCache
运行可执行文件:
SharpHound.exe -c Default，ACL，Session，LoggedOn，Trusts，Group
一旦完成了 Bloundhound/Sharphound，这四个文件将被保存到受害者机器上。下载并处理这些文件，并将它们复
制到你的 kali 上。接下来，我们需要启动 Neo4j 服务器并导入这些数据来构建相关关系图。
打开 Bloodhound
1. apt-get install bloodhound
2. neo4j console
3. 打开浏览器访问 http://localhost:7474
1. 连接到 bolt://localhost:7687
2. 用户名: neo4j
3. 密码: neo4j
4. 修改密码
4. 在一个终端中运行 Bloodhound：
1. bloodhound
2. 数据库 URL: bolt://127.0.0.1:7687
3. 用户名: neo4j
4. 密码：新的密码
5. 加载数据
1. 在右侧，有一个 Upload Data  的按钮
2. 上传 acls.csv ， group_membership.csv ， local_admin.csv  和 sessions.csv
如果你没有一个域来测试这个，我已经在这里上传了四个 Bloodhound 文件：https://github.com/cyberspacekitte
ns/bloodhound ，这样你就可以重复这些练习了。一旦进入 Bloodhound 并导入了所有数据，我们就可以去查询“查
找到域管理员的最短路径”。我们还可以选择特定的用户，看看是否可以将路径映射到特定的用户或组。在我们的示
例中，我们攻陷的第一个用户机器是 PI:EMAIL。在搜索栏中，我们输入该
用户的用户名，单击 Pathfinding  按钮，然后键入“Domain Admin”（或任何其他用户），查看是否可以在这些对
象之间显示对应的路由路径。
你可以从 Neil 的机器上看到，我们可以一路顺利的到 CSK 实验组。在“实验”组中，有一个名为 Purri 的用户，他是
HelpDesk 组的成员。
如果我们能攻陷 HelpDesk 组，我们可以转到 Chris 的主机中，而且 Elon Muskkat 目前已登录此机器。如果我们能
转移到他的进程或窃取他的明文密码，我们就可以把权限提升到域管理员！
对于大型网络的扫描结果，我们注意到了 Bloodhound 查询的搜索功能有一些局限性。使用 Neo4j 的一个巨大好处
是，它允许通过自己本身的叫 Cypher 的语言进行原始查询。有关自定义查询的 Cypher 的深入研究，请访问：http
s://blog.cptjesus.com/posts/introtocypher 。
我们可以添加哪种自定义查询？来看吧，@porterhau5在扩展 Bloodhound 跟踪和可视化攻击方面取得了很大进
展。查看他们的文章：https://porterhau5.com/blog/extending-bloodhound-track-and-visualize-your-compromi
se/ 。
从高层次的角度来看，@porterhau5增加了标记被攻陷主机的想法，以帮助更好地在内网漫游。例如，在这个伪造
的场景中，我们通过仿冒用户 niel.pawstrong 来危害其他初始用户。使用 Bloodhound 上的 Cypher 语言和原始查
询功能，我们可以运行这些查询：
向被攻陷系统添加自有标签：
MATCH (n) WHERE n.name=“PI:EMAIL” SET
n.owned=“phish”， n.wave=1
运行查询以显示所有被仿冒的系统
MATCH (n) WHERE n.owned=“phish” RETURN n
现在，我们可以向 Bloodhound 添加一些自定义查询。在Bloodhound 的“查询”选项卡上，滚动到底部，单击“自定
义查询”旁边的“编辑”按钮。用以下内容替换所有文本：
https://github.com/porterhau5/BloodHound-Owned/blob/master/customqueries.json
保存之后，我们应该创建更多的查询。现在我们可以单击查找结果“查找从所属节点到域管理员的最短路径”。
如果你想更仔细地研究这个问题，请查看 @porterhau5的 fork 版 Bloodhound。它用标记使被攻陷机器更直观，并
允许更多的自定义功能：https://github.com/porterhau5/bloodhound-owned 。
到目前为止，在没有扫描的情况下，我们已经能够获得关于该组织的大量信息。这都是作为本地 AD 用户（域用户）
的权限能做到的的，而且在大多数情况下，没有任何网络流量看起来太可疑。正如你所看到的，我们能够做到这一
切，而无需成为本地管理员或对本地系统拥有任何管理权限。
Advanced ACL/ACE Bloodhound
当使用 Bloodhound 的收集方法访问控制列表（ACL）类型时，我们的脚本将查询 AD 以收集用户和对象的所有访问
控制权限。我们从访问控制项（ACEs)收集的信息描述了用户、组和计算机的允许和拒绝权限。寻找和利用 ACEs 本
身就是一个能写成完整的书的内容，但这里有一些很好的启动资源：
BloodHound 1.3–acl 攻击路径更新
https://wald0.com/?p=112
介绍对抗性恢复方法
http://bit.ly/2GYU7S7
在将 ACL 数据导入 Bloodhound 时，我们要寻找什么信息？Bloodhound 识别出 ACE 中可能存在弱点的地方。这将
包括谁有能力更改或重置密码、向组中添加成员、为其他用户更新脚本路径等对象、更新对象或在对象上写入新的
ACE 等等。
怎么使用这个东西呢？当攻陷到某个用户和获得额外的凭证后，我们可以通过目标路径找到一个有能力重置密码或修
改 ACE 权限的用户。这将导致会有新的方法来找到到域管理员或特权帐户的路径，甚至允许设置后门以供以后使
用。了解这些类型的利用方法的一个很好的资源是：Robbins-An-ACE-Up-The-Sleeve-DesigningActive-Directory-
DACL-Backdoors 演讲 。
横向漫游——移动
在一个拥有多个用户的机器上，通常的做法是创建一个新的用户凭证或者迁移不同用户的凭证。这种方法大量用于在
环境中横向移动，这并不是什么新鲜问题。通常，从 Bloodhound 输出或共享工作站，作为攻击者，我们需要能够
模仿被攻陷的受害者系统上的其他用户。
我们拥有的许多工具可以用不同的方法来实现这一点。比如 Metasploit，我们都应该非常熟悉使用 Post
Exploitation 隐蔽框架来窃取 token。
在 Empire 中，我们可以使用窃取 token 来模拟该系统上的用户。我注意到，有时候窃取 token 会让我们的 shell 下
线。为了避免这种情况，我们可以将一个新的 agent 注入到另一个用户拥有的正在运行的进程中。
在下面的图片中，我们使用钓鱼让一个员工运行了我们的恶意软件。。这使得我们可以在受害者用户的系统中运行我
们自己的程序（neil.pawstrong）。在那个用户的系统上，我们可以转到 BuzzClawdrin 的系统，并用
WMI（WindowsManagementInstrumentation）命令执行获得了一个新的 agent。这里的问题是，我们在最初攻击
受害者 Neil.Pawstrong 的过程中，因为我们使用缓存的凭证在 Buzz 的主机上生成了一个 shell。因此，我们不应该
窃取 token，而应该使用 Empire 的 psinject 功能。
psinject 描述“能够使用 ReﬂectivePick 将代理注入另一个进程，从而将通用.NET运行库时加载到进程中并执行特定
的 PowerShell 命令，而无需启动新的 PowerShell.exe 进程！”[ http://bit.ly/2HDxj6x ]，我们使用它来生成一个全
新的、以 buzz.clauldrin 的用户进程运行的 agent，这样我们现在就可以获得他的访问权限。
离开初始主机
现在你已经找到了将要移动到的潜在路径，那么获得这些系统的代码执行的选项是什么？最基本的方法是使用我们当
前的有 Active Directory 权限的用户以获得对另一个系统的控制权，举个例子，一个经理可以完全访问其下属的计算
机，一个拥有多个具有管理权限的会议/实验组计算机，他们的内部系统配置错误，或者发现有人手动将用户添加到
该计算机上的本地管理组。这都是普通用户可以拥有远程访问到网络上的其他工作站的可能的一些方式。一旦攻陷了
一台目标机器，我们既可以获取 Bloodhound 的结果，也可以重新扫描网络以查看我们在哪些机器上具有本地访问
权限：
Empire 模块:
situational_awareness/network/powerview/ﬁnd_localadmin_access
Metasploit 模块：http://bit.ly/2JJ7ILb
Empire 的 ﬁnd_localadmin_access 将查询 Active Directory 中的所有主机名并尝试连接到它们。这绝对是一个会造
成很大动静的工具，因为它需要连接到每个主机并且验证它是否是本地管理员。
我们可以看到，Empire 的 ﬁnd_localadmin_access 模块标明了用户访问我们的陷阱的是一个
buzz.cyberspacekittens.local 机器。这应该和我们的 Bloodhound 回显的是一样的。为了再次检查我们是否有访问
权限，我通常会执行一些非交互的远程命令，比如 dir [remote system]\C$ 并查看我们是否有对 C 盘的读/写权限。
在域内横向移动方面，有好几种做法。让我们先来看看 Empire 中最常见的（直接从 Empire 中提取的）：
inveigh_relay：Inveigh 的 SMB 中继功能。此模块可用于将传入的 HTTP/Proxy NTLMv1/NTLMv2身份验证请
求中继到 SMB 目标。如果成功地中继了身份验证，并且帐户具有较高的权限，则将在目标机器上利用 PSExec
执行指定的命令或 Empire 启动程序。