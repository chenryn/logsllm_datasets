routers respond to traceroute packets with a source IP
address belonging to a diﬀerent network [44]. Chen et
al. proposed a set of robust heuristics to distill missing
AS-level links from traceroute data [8], although they
did not attempt to attribute router ownership. The
primary motivation and focus of these eﬀorts has been
extending coverage of the AS-level graph by conserva-
tively supplementing BGP-based AS-level topology in-
formation.
In contrast, our work focuses on eﬃcient,
scalable, and automatable inference of router owner-
ship at network boundaries, although we must navigate
all the same pitfalls associated with IP- and AS-level
measurement data.
The closest prior works are two eﬀorts led by Mao
to build an accurate AS-level traceroute tool [29, 28], a
study by Huﬀaker et al. correlating AS- and router-level
connectivity [17], and a study by Chandrasekaran et
al. assessing the performance of paths between servers
operated by a large content distribution network [7].
Mao’s “AS traceroute” [29] correlated BGP and tracer-
oute views from the same VP, as well as DNS names
and WHOIS data to adjust IP-AS mappings so that the
traceroute-derived and BGP-observed AS paths were
383more congruent. In follow-on work, Mao et al. used a
dynamic programming technique to adjust IP-AS map-
pings at a /24 preﬁx granularity using co-located BGP
and traceroute views [28]. However, private intercon-
nection between networks usually uses /30 or /31 pre-
ﬁxes (rather than /24s) to use address space eﬃciently.
The source code for both systems is not publicly avail-
able. Huﬀaker et al. evaluated router ownership heuris-
tics based around router alias resolution, relationships,
and degree [17]. The best performing heuristic was val-
idated to be correct 71% of the time. Neither of these
works attempted to identify interdomain connectivity at
the router level. Our work does not require a correlated
BGP view or DNS data to correctly infer border routers.
Finally, Chandrasekaran et al. developed a method for
inferring ownership of interfaces observed in pair-wise
traceroutes between servers operated by a large content
distribution network [7]. Their heuristics are similar
to heuristics in this work. However, they acknowledge
that the collected IP-level paths are sparse and lack
ideal constraints; as a result, not all addresses had an
owner inferred. Further, there was no opportunity to
use alias resolution to infer a router-level graph as the
paths included historically collected data. Our method
deliberately collects paths towards every routed preﬁx
to obtain an ideal set of constraints, performs alias res-
olution to extract routers, and focuses on interdomain
links attached to the network hosting the VP.
Concurrent to our work, Marder et al. proposed the
MAP-IT algorithm to infer router ownership [30]. Sim-
ilar to Chandrasekaran et al. [7], their method works on
an interface-level graph, and infers the operator of all
addresses observed in the middle of a traceroute path,
using IP-AS mappings of adjacent addresses observed
before and after an address in a path. Half the inter-
domain links in our inferences are at the end of paths,
with no adjacent addresses in neighbor address space.
They validate their method against a published Inter-
net2 topology (100% correct) and using DNS strings on
interfaces from Level3’s address space (95.4% correct).
4. CHALLENGES
Inferring a router’s owner is surprisingly complicated
because the obvious inference – the origin AS of the
longest matching BGP preﬁx covering the IP address on
a router interface – may be incorrect for at least the fol-
lowing seven reasons, many of which are covered in [44,
24]. Yet, lack of a better method leaves researchers us-
ing simple but error-prone IP-AS mappings.
1. The router interface’s IP address may be
from a neighbor’s address space. When two ASes
interconnect with a point-to-point link, they typically
assign the link a subnet (usually a /30 or /31 in IPv4)
from address space held by one of the two networks. In
a customer-provider relationship, the provider usually
supplies the address space. When crossing a provider-
customer link, the customer’s router will usually use
Figure 1: Responses to traceroute probes de-
pend on the router software implementation and
placement in the network. A response from R2
may be naively interpreted as coming from a
router operated by AS A, B, or C.
an address from the provider’s space when responding
to a traceroute probe, so the ﬁrst hop in the customer’s
network in traceroute will usually use an address routed
by the provider. There is no convention who supplies
the address space in peer-peer relationships. Figure 1
illustrates this challenge: router R2 may respond with
address a3 originated by AS A, but be operated by B.
2. Border routers may use a third-party ad-
dress when responding to traceroute probes. A
third-party address is an IP address corresponding to
an AS that is not on the path toward a destination.
A third-party address arises from IETF advice to im-
plementers that a router use the source address of the
interface that transmits the response [4].
If a border
router’s best route to the VP is via a third-party AS,
and that AS provides the address space for the interdo-
main link, then the source address of response will map
to the third-party AS. In ﬁgure 1, c1 is a third-party
address on router R2 in a R1 − R2 − R3 path.
Sometimes R2 will respond using c1 regardless of the
interface it uses to transmit a response; for example, the
source address of an ICMP echo response is the destina-
tion address of the corresponding ICMP echo request.
We therefore avoid using the source address of an ICMP
response that matches the destination address probed,
as the position of that address on a router does not nec-
essarily correspond to the interface a traceroute probe
arrived at or departed from. For example, if we ob-
served an IP path segment a1−c1 in traceroute towards
c1, a naive IP-AS interpretation would incorrectly infer
an interdomain link between ASes A and C with border
routers R1 and R2.
3. Border routers may be conﬁgured to ﬁre-
wall traceroute probes. Due to security concerns,
operators of enterprise networks may conﬁgure their
border routers to discard packets that do not match
a permitted ﬂow at the edge of their network. In ﬁg-
ure 1, R5 will respond to traceroute probes with a TTL
expired message from address b5, but will not allow sub-
sequent probes into the network which will reveal IP
b1a1R1R2R3AS AAS BAS Ca2a3b2b3c1c2R4AS ER6AS DR5b4b5b6b?d?c3e?384addresses routed by D. Therefore, the only address ob-
served by traceroute on a router operated by D on a
path to D may be b5, originated by B. Similarly, R6 is
both conﬁgured to discard packets that do not match a
permitted ﬂow, and to not send ICMP messages, includ-
ing the TTL expired message. Therefore, we may not
have the ability to observe a border router in traceroute
for some neighbor networks.
4. Virtual routers may use a diﬀerent respond-
ing interface. Operators can use virtual router func-
tionality to isolate individual routing tables. Each vir-
tual router uses one IP address to form a BGP session
with a single neighbor. When the router responds to
a traceroute probe, it uses an address from the virtual
router that would have forwarded the packet had the
TTL not expired, even if that interface does not send
the response. In ﬁgure 1, if R3 has a virtual router con-
nected to AS D with address b4, and a virtual router
connected to AS E with b6, then the router will respond
to packets whose TTL has expired towards these ASes
with addresses b4 and b6 respectively. Therefore, we re-
quire the ability to infer that b4 and b6 belong to the
same router R3, although not all routers are responsive
to alias resolution probes.
5. Sibling AS behavior confuses attempts to
infer connectivity between organizations. Diﬀer-
ent ASes under the same administrative control (sib-
lings) may originate diﬀerent preﬁxes. WHOIS-based
inference of siblings [6, 18] suﬀers from limitations in
raw WHOIS data, which is not only inconsistently for-
matted across regions, but also becomes stale if not up-
dated as mergers occur. The only public sibling infer-
ences are derived at three-month intervals, with recog-
nized false and missing inferences [18].
6. IXP-owned addresses appear inconsistently
in paths. Most interconnection links are automatically
established between ASes at an IXP using the IXP’s
route server [14]. To promote public peering, IXP op-
erators provide a shared peering fabric and associated
IP subnet for participants to use. The IXP’s own AS
may or may not originate this subnet, and/or an IXP
member ASes may inadvertently announce it, mislead-
ing inferences based on IP-AS mapping.
7. Multiple ASes may originate a preﬁx into
BGP. Some preﬁxes are originated by multiple ASes,
which might be siblings or distinct organizations. The
more ASes originating a preﬁx, the more challenging it
is to interpret the appearance of a matching IP address
in a traceroute path, as the address could be on a router
operated by any of the originating ASes.
In prior work, we discussed how a subset of these
challenges impacted our ability to measure performance
of interdomain links at scale [24].
In this paper, we
build and validate a system for mapping the interdo-
main connectivity of a hosting network. This system
supports the CAIDA/MIT congestion project [9], mon-
itoring interdomain links for congestion using 40 VPs
in 28 networks as of May 2016.
Figure 2: The bdrmap system collects raw data
to build an interdomain router-level map for the
hosting network (§5.3), and applies heuristics to
infer its border routers (§5.4).
5. BORDER MAPPING METHOD
Figure 2 summarizes our approach to border map-
ping. Our approach begins with assembling routing and
addressing data used to inform data collection and anal-
ysis. Then, we deploy an eﬃcient variant of traceroute
to trace the path from each VP to every routed pre-
ﬁx observed in the global BGP routing system. We
apply alias resolution techniques to infer routers and
point-to-point links used for interdomain interconnec-
tion. We use this collected data to assemble constraints
that guide our execution of heuristics to infer router
ownership. §5.1 discusses our approach to developing
our system, and §5.2 outlines the input data the system
requires. §5.3 describes our preliminary construction
of a router-level map, and §5.4 explains how we apply
heuristics to the collected data to infer routers and their
owners. §5.5 presents some limitations of our algorithm,
§5.6 reports on our validation, and §5.7 compares our
inferences to the public BGP view. Finally, §5.8 dis-
cusses how we addressed systems challenges.
We developed a specialized measurement utility that
we call bdrmap to drive data collection (§5.3) and infer
border routers (§5.4). The goal of bdrmap is to obtain
as much information available about the links observed
from a given network toward every other network, in
order to constrain our subsequent border router infer-
ences. We implemented bdrmap as a driver to scam-
per [23], a parallelized measurement system that eﬃ-
ciently gathers raw traceroute and alias resolution data.
ASrelationshipsRIRdelegationsASpreﬁxesVPASesIXPpreﬁxesbdrmapscamper§5.3: Data CollectionRouter-level topologybdrmap§5.4: Infer interdomainlinksBorderrouters3855.1 Development Approach
The goal of our system is to correctly identify owners
of border routers, with minimal manual work, so that
our system will support applied research of network be-
havior. In §5.6, we report that the system produced in-
ferences for four networks that validated well – 96.3% to
98.9%, depending on the network. However, we empha-
size that we did not develop our algorithm with ground
truth. Anticipating diﬃculty obtaining ground truth,
we developed our data collection and heuristic methods
iteratively, over the course of a year, without validation
data. We used DNS-naming, where available, to infer
if our methods appeared to yield correct inferences, as
well as manual investigation of inferred routers and their
neighbors; e.g., border routers with high out-degree to
routers in a single neighbor AS usually implied an in-
correct inference. We could not perform automated val-
idation using DNS-based heuristics, as we found inter-
domain links labeled incorrectly as well as links labeled
with organization names, rather than AS numbers.
5.2 Input Data
We seed our measurements with four data sources:
public BGP data to obtain origin ASes for each routed
preﬁx as well as to infer AS relationships between net-
worked organizations; a list of known IXP preﬁxes; del-
egation ﬁles published by RIRs, and a list of sibling
ASes for the networks we measure.
Public BGP data: We obtained BGP data from
routing table snapshots collected by the Route Views
(RV) and RIPE’s Routing Information Service (RIS)
projects [35, 34]. For each IPv4 preﬁx of size at least /8
and no smaller than a /24, we recorded the origin ASes
we observed in BGP paths to those preﬁxes. We also
used the process described in [25] to infer AS relation-
ships for the same BGP data. This algorithm annotates
each AS-link observed in the BGP data with either a
peer-peer (p2p) or customer-provider (c2p) label.
RIR delegation ﬁles: Because some networks do
not advertise all preﬁxes used to number their inter-
faces, we use the public datasets supplied by the ﬁve
Regional Internet Registries (RIRs) that report address
blocks they have delegated to networks. Some RIRs
provide an opaque ID that allows researchers to group
preﬁxes that are delegated to a single organization, al-
though the ID cannot be directly tied to an AS.
List of IXP preﬁxes: We compiled a list of IXP
preﬁxes from database snapshots provided by the Peer-
ingDB and Packet Clearing House (PCH) projects [33,
32]. PeeringDB is a database that allows Internet ex-
change point operators (IXPs) to record information
such as the IP preﬁxes used to establish public peerings
at their IXP, and allows network operators to record the
IP addresses they have been assigned by IXP operators
to establish peering. PCH records IP subnets, as well
as pairs of IP addresses and ASNs used by BGP routers
to establish peering at PCH-operated route collectors.
Because not all PeeringDB records are correct (they
may be entered erroneously and may become stale) and
many IXPs are missing from the database, we combined
both PeeringDB and PCH data to produce lists of net-
work preﬁxes used by IXPs to establish peering. Where
available, we used IP addresses recorded by operators
to validate our ownership inferences (§5.6).
VP ASes: For each VP we probed from, we assem-
bled a list of sibling ASes the network hosting the VP
uses to organize its routing. We seeded our manual in-
ference with CAIDA’s public AS-to-organization map-
ping ﬁle [18] which is derived from information encoded
in WHOIS databases, manually added missing siblings,
and removed spurious siblings. Sibling inferences are
the only input data that requires manual oversight.
5.3 Construction of Router-level Topology
Our inference of the router-level topology of the host-
ing network builds on years of previous work in topology
measurement, and proceeds as follows.
Generate list of address blocks to probe: We
begin by assembling address space blocks that each AS
routes. If X originates 128.66.0.0/16, and Y originates
128.66.2.0/24 (a more speciﬁc subnet of the /16), we
associate the 128.66.0.0 – 128.66.1.255 and 128.66.3.0
– 128.66.255.255 blocks with X, and the 128.66.2.0 –
128.66.2.255 block with Y. As our goal is to infer in-
terdomain connectivity, bdrmap does not include any
blocks originated by the network hosting the VP.
Gather traceroutes: We use the Paris traceroute
method [2], sending ICMP echo packets toward each ad-
dress block in the list, probing each target AS one block
at a time to minimize the impact on target ASes. To re-
duce run-time, bdrmap probes multiple target ASes at a
time in parallel. For each traceroute, we record the ﬁrst
IP address originated by an external network, and then
supply these addresses (the stop set [10]) to other tracer-
outes involving the same target AS to prevent subse-
quent traceroutes toward that AS from probing beyond
the ﬁrst interdomain link in the path that has been seen