如果要为8086平台编译这段代码，有几种可选的办法:
条件预处理指示也常用于源代码的配置管理，例如：
我们在第 2.2节“头文件"中见过Header Guard的用法：
3.条件预处理指示 请点评
device support,
举一个具体的例子，
会自动转换成头文件include/linux/autoconf.h中的宏定义。
只需要改一个头文件就可以影响所有包含它的源文件。通常这个头文件由配置工具生成，
次要为68000平台编译就得把这些定义全部改成68000。
1、手动编辑代码,
MACHINE。
MACHINE这段代码，编译器遇到这个预处理指示就报错退出，错误信息就是UNKNOWN TARGET
之前，MACHINE被定义为68000，则包含intx;这段代码；否则如果MACHINE被定义为8086，则包
义x为long型，
假设这段程序是为多种平台编写的，
上一页
##
#endif
#else
#elif
#if MACHINE == 68000
#endif
#define HEADER
#ifndef HEADER_FILENAME
body
 #error UNKNOWN TARGET
int 
，对其它平台暂不提供支持，就可以用条件预处理指示来写。如果在预处理这段代码
of header */
，在内核配置菜单中用回车键和方向键进入Device Drivers·
，在前面添一行#define MACHINE 8086。
FILENAME
，在68000平台上需要定义x为int型，
MACHINE
全国嵌入式人才培训基地
3.条件预处理指示
第 21章预处理
，或者定义为其它值）
 这样做的缺点是难以管理，
包含#error UNKNOWN TARGET
，在8086平台上需要定
--> Network 
，如果这个项
比如
，这样
8
---
## Page 370
再比如drivers/isdn/i41/isdn_common.c:
include/linux/autoconf.h被另一个头文件include/linux/config.h所包含，通常内核代码包含后
CONFIG_DUMMY取消它的定义没有任何作用，也不算错。
类似于：
然后运行make命令编译内核，这时根据.config文件生成头文件include/linux/autoconf.h，其内容
上面的代码用#undef确保取消一些宏的定义，
一个头文件，
argp, sizeof(phone)))
connected
arg)
isdn_ioctl(struct inode *inode, struct file *file, uint cmd, ulong
#endif
#undef
#undef
#define CONFIG_NETDEVICES 1
CONFIG_NETDEVICES=Y 
* Network device support
￥
CONFIG_TUN iS nOt Set
CONFIG_BONDING iS nOt Set
例如net/core/sock.c:
 CONFIG_BONDING
DUMMY
case SO_BINDTODEVICE:
char
case IIOCNETGPN:
··.
，如果先前没有定义过coNFIG_DUMMY，用#undef 
.* isdn network interface */ 
 Get peer phone number of a
， int optname,
370
---
## Page 371
2.宏定义
最后通过下面的例子说一下#if后面的表达式:
第3种方法能不能做到“只写一次到处生效"呢？等以后学习了Makefle就有办法了。
第2种方法相比似乎也很麻烦，
D选项定义一个宏NDEBUG。对于上面的例子,
3、要定义一个宏不一定非得在代码中用#define定义，
像上面的代码中最后一行那样，
这样，
上一页
4．把得到的表达式。丨丨2〈3像C表达式一样求值，求值的结果是#if 1，因此条件成立。
3．把没有定义的宏替换成0，变成#if丨l2〈3,
2．然后把有定义的宏展开，变成#if丨2〈3。
是Y，
宏有定义，则把defined x替换为1，否则替换为O，因此变成#if丨丨vERsIoN〈3。
，在配置菜单中所做的配置通过条件预处理最终决定了哪些代码被编译到内核
宏定义。
#define VERSION.
#endif
#ifdef 
#endif
isdn_net_getpeer(&phone, argp);
，在这一步也还是替换成0，因为#if的表达式必须在编译时求值，其中包含的名字只能是
 CONFIG_NETDEVICES 
 Y丨丨 VERSION 括号，以保证包含的是我们自己写的assert.h而
在打印调试信息时除了文件名和行号之外还可以打印出当前函数名，C99引入
现在测试一下我们的assert实现，把assert.h和xassert.c和测试代码main.c放在同一个目录下。
出打印错误信息，abort异常终止当前进程，这些函数以后再详细讨论。
识符通常由编译器和C语言库使用，
如_STR,
注意，在头文件assert.h中自己定义的内部使用的标识符都以_线开头，例
文件中：
_func_
例21.4.特殊标识符_func_
Aborted
main.c:6 2>3 -- assertion failed
S
int main(void)
#include "assert.h"
void _Assert(char *mesg)
#include 
￥
 gcc main.c xassert.c
VAL，
./a.out
main.c */
xassert.c
int main(void)
void myfunc(void)
#include 
return 0;
assert(2>3);
Assert,
abort();
myfunc(）;
_Assert function */
因为我们在模拟C标准库的实现，
' assertion failed\n", stderr);
 print assertion message and abort */
stderr)
而不应该再依赖于别的头文件。
，在/usr/include下的头文件中你可以看到大量_线开头的标识
1
，在第3节“变量"讲过，
一个程序只要包 
一个特殊的标识
以_线开头的标
33
---
## Page 374
3.条件预处理指示
'S
S
./a.out 
gcc main.c
return 0;
全国嵌入式人才培训基地
_func_
起始页
第 22 章 Makefile基础
374
---
## Page 375
4.自动处理头文件的依赖关系
3.变量
4.其它预处理特性
2.隐含规则和模式规！
第 22 章 Makefile基础请点评
1.基本规则
目
三
全国嵌入式人才培训基地
第22章Makefile基础
全国嵌入式人才培训基地
部分Ⅱ. C语言本质
起始页
上一级
1.基本规则
375
---
## Page 376
由例12.3“用深度优先搜索解迷宫问题"改写而成：
件的处理步骤通常用Makefile来管理。Makefile起什么作用呢？我们先看一个例子，这个例子
除了Hello World这种极简单的程序之外，
1.基本规则 请点评
上一页
int main(void)
void visit(int row, int col, struct point pre)
struct point 
#include
#include
1*
 main.c */
while （!is_empty()） {
push(p);
struct point p = {0, 0 };
maze[row][col]
struct point visit_point = { row, col 
-1，
1
1
{T-
L
L
print_maze();
if
if
if
(p.row-1
(p.row+1
pop()
= 2
1
L
第22章Makefile基础
全国嵌入式人才培训基地
V
一般的程序都是由多个源文件编译链接而成的，
>=
 MAX_COL
MAX ROW
1.基本规则
1.
1
L
!.
-1
/*
==
up
 down
p);
 goal
0)
!!!!
*/
L
￥
*
----
1
25
这些源文
376
---
## Page 377
个头文件。
在main.h中定义了一个类型和两个常量，main.c、stack.c和maze.c都要用到这些定义，都要包含这
我们把堆栈和迷宫的代码分别转移到模块stack.c和maze.c中，main.c包含它们提供的头文
#endif 
extern int is_empty(void);
extern
#include "main.h" /* provides definition for item_t */ 
/* stack.h */
int is_empty(void)
item_t pop(void)
void push(item_t p)
#include 
/* stack.c */ 
#endif
#define M
#define MAX_ROW 5
typedef struct point { int row, col; } item_t;
#define MAIN_H
#ifndef
/* main.h */
item
 stack[top++] = p;
MAIN_H
STACK
return top == 0;
return stack[--top];
MAX_COL 5
return 0;
} else
"stack.h"
=0：
printf("No path!\n");
 printf(
p
%d)\n"
.row != -l） {
377
---
## Page 378
这样编译也许更好一些:
个源文件组成，全部编译一遍需要几个小时，只改一个源文件就要求全部重新编译肯定是不合理
使main.c、stack.c和那些头文件都没有修改也要跟着重新编译。
但这不是个好办法，
这些源文件可以这样编译：
要改变它的定义只需改变main.h中的一行代码。
值传递并且支持赋值操作就行。这也是一种避免硬编码的策略，
例12.3“用深度优先搜索解迷宫问题"中的堆栈规定死了只能放char型数据，
siSis
S
$ gcc main.c stack.c maze.c -o main
#endif 
extern int maze[MAX_ROW][MAX_COL];
#include "main.h" /* provides defintion for MAX_ROW and MAX_COL */
#define MAZE H
#ifndef MAzE_H
void print_maze(void)
int maze[MAX_ROW][MAX_COL] = {
#include
￥
gcc
gcc
gcc -c main.c
 maze.c */
maze.h
 main.o stack.o maze.o -o main
printf("*********\n");
 stack.c
，如果编译之后又对maze.c做了修改，
*/
O
putchar(\n');
for 
0
0
........
0
0
printf("%d
...........
MAX
COL;
maze[ij[jl);