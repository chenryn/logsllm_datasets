Foundations of Security Analysis and Design V, pages 1–50. Springer,
2009.
[38] Martin Feldhofer, Sandra Dominikus, and Johannes Wolkerstorfer.
Strong authentication for RFID systems using the AES algorithm.
In
CHES, volume 3156 of Lecture Notes in Computer Science, pages 357–
370. Springer, 2004.
[39] Lucca Hirschi, David Baelde, and Stéphanie Delaune. A method for
unbounded veriﬁcation of privacy-type properties. J. Comput. Secur.,
27(3):277–342, 2019.
[40] Ari Juels and Stephen A. Weis. Deﬁning strong privacy for RFID. ACM
Trans. Inf. Syst. Secur., 13(1):7:1–7:23, 2009.
[41] Adrien Koutsos. The 5G-AKA authentication protocol privacy.
In
EuroS&P, pages 464–479. IEEE, 2019.
[42] Adrien Koutsos. Decidability of a sound set of inference rules for
computational indistinguishability. In CSF, pages 48–61. IEEE, 2019.
[43] Benjamin Lipp, Bruno Blanchet, and Karthikeyan Bhargavan. A mech-
anised cryptographic proof of the wireguard virtual private network
protocol. In EuroS&P, pages 231–246. IEEE, 2019.
[44] Gavin Lowe. An attack on the Needham-Schroeder public-key authen-
tication protocol. Inf. Process. Lett., 56(3):131–133, 1995.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
550
[45] Simon Meier, Benedikt Schmidt, Cas Cremers, and David A. Basin. The
TAMARIN prover for the symbolic analysis of security protocols. In
CAV, volume 8044 of Lecture Notes in Computer Science, pages 696–
701. Springer, 2013.
[46] John C. Mitchell. Multiset rewriting and security protocol analysis. In
RTA, volume 2378 of Lecture Notes in Computer Science, pages 19–22.
Springer, 2002.
[47] David Molnar and David A. Wagner. Privacy and security in library
In CCS, pages 210–219.
RFID: issues, practices, and architectures.
ACM, 2004.
[48] John Alan Robinson and Andrei Voronkov, editors. Handbook of
Automated Reasoning (in 2 volumes). Elsevier and MIT Press, 2001.
[49] Guillaume Scerri and Ryan Stanley-Oakes. Analysis of key wrapping
APIs: Generic policies, computational security. In CSF, pages 281–295.
IEEE Computer Society, 2016.
[50] The Squirrel Prover
repository. https://github.com/squirrel-prover/
[51] Tatu Ylonen and Chris Lonvick. The Secure Shell (SSH) Transport
squirrel-prover/.
Layer Protocol.
APPENDIX A
SEMANTICS OF OUR META-LOGIC
Our translation from the meta-logic to the base logic, is
parametrized by the protocol P = (PA, <) that the meta-
logic is meant to describe, as well as the trace model T under
study. The general principle of this translation is presented
in Section IV-B and we give below the complete deﬁnition of
this translation. We start with the interpretation of meta-terms
of sort index and timestamp:
T
T
P = σT (τ )
(init)
P = init
(τ )
T
P = aσI (i1),...,σI (ip)
(a[i1, . . . , ip])
T
T
P = predT ((T )
(pred(T ))
P )
T
P = σI(i)
|
The interpretation of the macro terms minit and {ma[(cid:126)i ]
a[(cid:126)i ] ∈ PA} is already given in Fig. 2. Then, we give the
interpretation of meta-terms of sort message:
(i)
T
P = nσI (i1),...,σI (ip)
(n[i1, . . . , ip])
T
P = x
(x)
(f[i1, . . . , ip](t1, . . . , tn))
T
P =
(cid:0)(t1)
P(cid:1)
T
T
P , . . . , (tn)
fσI (i1),...,σI (ip)
T
if (T )
T{(cid:126)i(cid:55)→(cid:126)k} if (T )
T
T
= init
= a[(cid:126)k ] and a[(cid:126)i ] ∈ PA
(minit)
(ma[(cid:126)i ])
(m@T )
T
=
(if φ then t else t
(cid:48)
)
T
P then (t)
T
P else (t
(cid:48)
T
P
)
(ﬁnd (cid:126)i suchthat φ in t else t
then (t)
T{(cid:126)i(cid:55)→(cid:126)k1}
P
else
(cid:48)
T
P = if (φ)
T
P =
)
T{(cid:126)i(cid:55)→(cid:126)k1}
P
. . .
T{(cid:126)i(cid:55)→(cid:126)kp}
P
if (φ)
T{(cid:126)i(cid:55)→(cid:126)kp}
P
where (cid:126)k1, . . . , (cid:126)kn is a complete enumeration of D|(cid:126)i|
graphic order1.
then (t)
if (φ)
else (t
(cid:48)
T
P
)
I in lexico-
The interpretation of meta-formulas is quite straightforward.
For instance, we have that:
(φ ∧ φ(cid:48))
T
T
P = (φ)
P
.∧ (φ(cid:48))
T
P
1This is important to establish the soundness of some tactics, e.g. the one
used to remove useless indices of the try find command.
Other boolean connectives are translated similarly. We let:
false
(cid:26) true
(cid:26) true
(cid:26) true
false
(i = i(cid:48))
T
P =
(T = T (cid:48))
T
P =
(T ≤ T (cid:48))
T
P =
false
(t = t(cid:48))
P .= (t(cid:48))
T
T
P = (t)
T
P
if σI(i) = σI(i(cid:48))
otherwise
P = (T (cid:48))
T
if (T )
otherwise
P ≤ (T (cid:48))
T
if (T )
otherwise
T
P
T
P
Finally, as already explained, quantiﬁcations over indices
and timestamps are translated to ﬁnite boolean expressions:
(∀i. φ)
T
P =
(∃i. φ)
T
P =
T{i(cid:55)→k}
.∧k∈DI (φ)
P
T{i(cid:55)→k}
.∨k∈DI (φ)
P
T{τ(cid:55)→v}
.∧v∈DT (φ)
P
T{τ(cid:55)→v}
.∨v∈DT (φ)
P
(∀τ. φ)
T
P =
(∃τ. φ)
T
P =
Overall, this translation is well-deﬁned because our notion
of protocol imposes that the condition and output message
of an action α only refer to actions β < α, or to input@α
(which itself can only refer to actions β < α). For instance,
T is deﬁned as the translation
the translation of (output@T )
T) but
of a potentially large term (the output message at (T )
its translation can only rely on translations (m@T (cid:48))
T for
(T (cid:48))
T
T or m = input and (T (cid:48))
T
T.
= (T )
< (T )
APPENDIX B
REACHABILITY SEQUENT CALCULUS
We present
in this section the soundness proof for the
reachability rules of Fig. 3. More complex reachability rules
(e.g. INT-CTXT), along with the formal deﬁnition of ¯stP (_)
and their soundness proof, are provided in the long version [6].
Proposition 3. The rules of Fig. 3 are sound.
Proof. To prove the rules soundness, we only need to show
that, if the premises are valid, then the conclusion is valid.
We only show two rules here. The full soundness proof is in
the long version [6].
• For NAMEINDEP, this is because names of the meta-
logic with different head symbols are always translated as
different names of the base logic. We conclude by using
the base logic rule which states that EQ(n, m) ∼ false
whenever n and m are distinct names (this is the rule
EQINDEP of [28]).
• For NAMEEQ, if one of the equalities i1 = j1, ..., ik = jk
T
does not hold in T, then we know that (n[i1, . . . , ik])
T are distinct names of the base logic.
and (n[j1, . . . , jk])
Again, we conclude using the EQINDEP rule of [28].
APPENDIX C
EQUIVALENCE RULES
We present in this section the XOR-FRESH rule, and its
soundness proof along with the one for the FRESH rule. More
advanced rules (CCA1, DDH and ENC-KP) and their soundness
proofs are provided in the long version [6].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
551
Base logic rule:
∆ (cid:96) (cid:126)u ∼ (cid:126)v ,(cid:0)if len(t) = len(n) then n else t ⊕ n(cid:1)
∆ (cid:96) (cid:126)u ∼ (cid:126)v , t ⊕ n
where n (cid:54)∈ st((cid:126)v , t)
Meta-logic rule:
∆ (cid:96) (cid:126)u ∼ (cid:126)v ,(cid:0)if len(t) = len(n[(cid:126)i ]) ∧ Freshn[(cid:126)i ]P2
then n[(cid:126)i ] else t ⊕ n[(cid:126)i ](cid:1)
∆ (cid:96) (cid:126)u ∼ (cid:126)v , t ⊕ n[(cid:126)i ]
((cid:126)v , t)
Fig. 7. Rule XOR-FRESH (base and meta logic).
a) XOR equivalence rule: The Fig. 7 deﬁnes our
XOR-FRESH rule, which expresses the information hiding
capabilities of XOR. Together with the rules of Section V,
these are the only rules that we need to reason about protocols
involving XOR. In a nutshell, the rule expresses that t ⊕ n[(cid:126)i ]
and n[(cid:126)i ] are interpreted as the same probability distribution
provided that n[(cid:126)i ] is fresh (this guarantees the independence
of distributions) and that the distributions yield messages of
the same length. In details, we rely on a base logic rule that
differs from the one of [28]. We ﬁrst establish its soundness
(see Proposition 5), and then lift it using the same over-
approximation of the freshness condition as for FRESH.
b) Soundness: We now prove the soundness of our rules.
Proposition 4. Rule FRESH is sound.
Proof sketch. Consider an instance of the rule with a valid
premise, and conclusion φ. Let us show that, for any T
and M satisfying ∆, we also have T, M |= φ. Note that
(Freshn[(cid:126)i ]P1
is a boolean combination of constants true
and false, and similarly for the other freshness formula.
((cid:126)u))
T
P1
if len(t) = len(n) then n else t ⊕ n:
Adv(A)
= |Pr[A((cid:74)(cid:126)u(cid:75))] − Pr[A(cid:0)(cid:74)(cid:126)v, t ⊕ n(cid:75)(cid:1)]|
= |Pr[L] ×(cid:0)Pr[A((cid:74)(cid:126)u(cid:75)) | L] − Pr[A(cid:0)(cid:74)(cid:126)v, t ⊕ n(cid:75)(cid:1) | L](cid:1)+
Pr[¬L] ×(cid:0)Pr[A((cid:74)(cid:126)u(cid:75)) | ¬L] − Pr[A(cid:0)(cid:74)(cid:126)v, t ⊕ n(cid:75)(cid:1) | ¬L](cid:1)|
butions (cid:74)(cid:126)v , t ⊕ n(cid:75) and (cid:74)(cid:126)v , n(cid:75) are the same, provided that L
= |Pr[L] ×(cid:0)Pr[A((cid:74)(cid:126)u(cid:75)) | L] − Pr[A(cid:0)(cid:74)(cid:126)v, t(cid:48)(cid:75)(cid:1) | L](cid:1)+
Pr[¬L] ×(cid:0)Pr[A((cid:74)(cid:126)u(cid:75)) | ¬L] − Pr[A(cid:0)(cid:74)(cid:126)v, t(cid:48)(cid:75)(cid:1) | ¬L](cid:1)|
= |Pr[A((cid:74)(cid:126)u(cid:75))] − Pr[A(cid:0)(cid:74)(cid:126)v, t(cid:48)(cid:75)(cid:1)]|
The freshness condition n (cid:54)∈ st((cid:126)u , t) implies that the distri-
holds. Moreover, when ¬L, the terms t ⊕ n and t(cid:48) evaluate to
the same result. We can thus rewrite our advantage as follows: