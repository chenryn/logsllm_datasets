the node will move on to transmit the next chunk of blocks. Hence
successive collisions can be between different chunks from the same
senders.
Strider is actually invariant to both of these problems because of its
stripping decoder structure. Speciﬁcally, Strider attempts to decode
each block separately, while treating everything else as interference.
So lets say we are trying to decode the ﬁrst block of Alice from the
collisions. We collect all of the collisions, and can express the decod-
ing problem for Alice’s ﬁrst block as follows:
0
~y
i = ~R1xAl
1i + ~R2xAl
2i + : : : + ~RK xAl
Ki + ~I
(11)
where the term ~Ri is the M length i’th column vector of R, and
~I subsumes all the contributions from Bob’s packets or from some
other senders.
The above equation is collecting all the terms that have collided
with the i’th symbol of Alice’s ﬁrst block across the M transmissions,
and is just rearranging the terms in Eq. 10. To decode this block, we
use the same stripping decoder technique. If successful, we re-encode
it and subtract its contributions from all other symbols where it had a
contribution. Thus, it does not matter what the identity of the terms in
~I is, since we do not use that knowledge in decoding Alice’s blocks.
However, Strider does need to estimate the offsets where the colli-
sions begin, so it knows where which symbol is. To do so we leverage
the preamble and postamble trick used in prior work [33, 16, 9]. We
include a pseudorandom sequence in the preamble/postamble of each
packet, and the receiver correlates the received samples against this
known sequence. Since the pseudorandom sequence is uncorrelated
with any other sequence except itself, the correlation will spike ex-
actly when a packet starts, even if there is a collision. The location of
the spike gives us the offset where the collision begins.
3) Compensating for Frequency Offsets: Different senders will
have different carrier frequency offsets (CFO) w.r.t the receiver. When
we decode a block and subtract, we have to compute and compen-
sate for this frequency offset. Strider’s current implementation is
on top of a WiFi style OFDM PHY implemented with USRP2s and
GNURadio. Hence, we use the standard Schmidl-Cox algorithm [25]
for OFDM carrier synchronization and offset estimation. The algo-
rithm is based on exploiting a repeating preamble by computing the
cross correlation of a signal with a delayed version of itself, and com-
puting the phase offset across the correlation values at different de-
lays to compute the CFO. However, the algorithm needs to be mod-
iﬁed for collisions, since we wont have a clean copy of the repeat-
ing preamble for the packet that starts second. Like prior work [33],
we use the postamble to get a clean copy of the repeating preamble.
The Schmidl-Cox algorithm is run on the postamble for the second
packet. The algorithm also estimates the symbol timing and sub-
carrier spacing offsets apart from the CFO, which are then used in
OFDM demod. We refer the reader to [25] for a detailed description
of the standard Schmidl-Cox implementation.
4) Channel Estimation: The receiver needs to estimate the channels
at the receiver for decoding the collisions. We use the pilot tones in
the OFDM subcarriers (e.g. WiFi uses 4 pilot tones) to estimate the
channel using the Least Squares algorithm [32]. Strider uses 4 pilot
tones that are inserted in the packet header. Suppose p1; : : : ; p4 and
~y = y1; : : : ; y4 are the 4 pilot symbols sent and received respectively.
The LS channel estimate is given by:
~h = P
(cid:0)1~y
(12)
the 4 (cid:2) 4 diagonal matrix of the
where P is diag(p1; : : : ; p4), i.e.
8 known pilot symbols. To estimate the channel at the other 48 data
subcarriers we use linear interpolation at every subcarrier between
two pilot subcarriers.
5) Collisions between more than two transmissions: Strider in
principle can handle collisions between more than two packets. Specif-
ically, Strider depends on the header of the packet being correctly de-
coded to handle collisions. Hence, similar to prior work [12], Strider
appends the header to the end of the packet so that it can be recov-
ered even under a collision. However if more than 2 packets collide,
a receiver may not initially be able to decode all packet headers. But
as decoding proceeds, one of the batches will get decoded after suf-
ﬁcient transmissions, and the decoded symbols are then subtracted
from all collisions. After subtraction, a hidden header will be re-
vealed at which point Strider can recover it and incorporate the new
batch into the decoding process. We note however that in our ex-
periments collisions between more than two nodes were quite rare,
carrier sense works well enough that collisions happen only between
hidden terminals, and conﬁgurations that involved three hidden ter-
minals were very uncommon.
6. THEORETICAL ANALYSIS
Strider asymptotically achieves Shannon capacity for Gaussian chan-
nels. However, Strider’s practical performance depends on how efﬁ-
cient the static code is at its decoding threshold. For example, a 1=2
rate convolutional code with QPSK (used in the 12Mbps WiFi bitrate)
has a decoding threshold of around 6dB [11] and achieves a rate of
1b/s/Hz at that threshold. But the Shannon capacity at that SNR is
actually 2:3b/s/Hz. Hence convolutional codes are off from capacity,
but we use them because they can be efﬁciently implemented.
Strider is orthogonal to the choice of the static code, and provides
a technique for converting any static code into a rateless code that
works at any SNR. Hence, what we wish to prove is that Strider’s
rateless conversion happens without any loss in coding efﬁciency, i.e.,
we would not achieve a higher rate than Strider by using a correctly
picked conventional channel code and constellation at any SNR from
the same class of static codes (e.g. convolutional codes in WiFi).
Hence, we will assume that the rate R(T ) our static code achieves at
its decoding threshold T is equal to the Shannon capacity at T , and
intuitively show that after going through Strider’s conversion it can
achieve Shannon capacity across a larger SNR range.
When the sender uses Strider’s algorithm, he is in effect dividing
up the power among multiple blocks. Speciﬁcally, when he computes
the entries of matrix R, the magnitude of the column vectors corre-
sponds to the powers that are allocated to the blocks. Lets assume we
have K blocks and require M transmissions to decode. Hence, when
the receiver manages to decode, the following condition is asymptot-
ically true due to the way the matrix R is computed
P1P
P
K
i=2 Pi + N
= : : : =
Pj
K
i=j+1 Pi + N
= T
(13)
P
K
Here Pi is total power allocated to i’th block across the M transmis-
sions, and N is the unknown noise power. Thus the total power used
by the sender is P =
i=1 Pi and the actual SNR of the channel is
10 log(P=N )dB and is unknown to the sender. This equation is just
restating the condition we developed in Eq. 8 that ensured that the
minimum distance for each block is guaranteed to be greater than the
required threshold for each block to decode.
The Strider decoder is a stripping decoder, i.e. it decodes the ﬁrst
block treating the second as noise, strips it after decoding and then
decodes the second block. When the receiver decodes the K blocks,
So the effective rate achieved by Strider at this point is:
RStrider =
R(T ) =
log(1 + T )
KX
KX
i=1
i=1
KX
P
P
KY
P
P
j=1
log(1 +
=
j=1
= log
(14)
(15)
(16)
(17)
P
N
)
Pj
K
i=j+1 Pi + N
)
!
K
i=j Pj + N
K
i=j+1 Pi + N
K
i=1 Pi
N
= log(1 +
) = log(1 +
Thus the effective rate is the same as the Shannon capacity at power
P and noise N. In other words, Strider achieves the same throughput
as if the user had used the full power P to transmit with a capacity
achieving code at the unknown SNR.
For our practical implemented algorithm, we use a convolutional
code at a ﬁxed rate as the static code. Hence the practical perfor-
mance of our scheme will be dictated by how good the ﬁxed static
code is at its decoding threshold. However, we stress that Strider is
orthogonal to the choice of the static code. Hence, if in the future
efﬁcient codes (e.g. LDPC codes [8]) that achieve capacity at their
decoding SNR threshold become practically available in hardware,
we can immediately use Strider to convert them into a rateless capac-
ity achieving code that works at every SNR.
7.
IMPLEMENTATION
Strider is designed to work on top of a WiFi-style OFDM PHY,
with a 64 length FFT out of which 48 subcarriers are used for data, 4
for pilot tones and the rest are padding. In Strider the data stream is
ﬁrst divided into chunks of K = 33 parallel blocks of size 1500 bits
each. Each block is passed through the static code encoder, which
in our current implementation is a 1=5 rate channel code based on
convolutional codes and a QPSK constellation. Next, these K coded
blocks are linearly combined to create a single packet. The symbols
in this packet are striped across the 48 data OFDM bins, which are
then passed through an IFFT to obtain the time-domain signal. At the
receiver, the process is reversed.
Strider’s current implementation builds on top of a 802.11 style
OFDM PHY implementation in GNURadio from MIT [33]. How-
ever, our frontends are USRP2/RFX2400s whose interconnects can-
not support the full 20MHz width required in Wiﬁ, and are currently
conﬁgured to use 6:25MHz (interpolation and decimation rates of 16)
due to PC processing constraints. Hence the subcarrier width in our
current implementation is 97:6KHz.
Static Code: Strider’s current implementation uses a static code that
consists of a ﬁxed 1=5 rate channel code. However, implementing a
convolutional code with such a large constraint length is infeasible in
practice. Strider adopts a standard communication theory trick, con-
catenate a 1=2 and 1=3 rate code to together create a 1=2(cid:3)1=3 = 1=6
rate code, and then puncture it to make a rate 1=5 code. Both 1=2 and
1=3 rate codes are widely available and implemented in hardware.
We refer the reader to [20] for a description of this technique.
Packet Header: Similar to traditional WiFi, the Strider header has
a known preamble. After the preamble, the packet header includes
the following packet parameters: Sender MAC address, destination
MAC address, frame no, chunk no, the index of the row in R that is
used to create the linear combination and packet length. The header
is repeated at the end of the packet to protect it from collisions.
Complexity: The computational complexity of Strider is linear in the
number of input data symbols. Compared to traditional WiFi, Strider
employs a stripping decoder in addition to the decoder for the static
code. Since we use convolutional style coding for the static code (the
same as WiFi), the only extra complexity in Strider is from the initial
stripping decoder component. The stripping decoder algorithm re-
quires K (cid:2) L complex multiplications for every packet received. If a
block is decoded, it is subtracted from the received signal, which re-
quires another L complex subtractions. Thus the two extra operations
are both linear in the length of the data block. Strider’s current im-
plementation is bottlenecked by the decoding complexity of the static
code, the extra overhead of Strider’s stripping decoder is only around
20% in terms of wallclock time. However, the static codes we use are
widely implemented in conventional wireless hardware for very high
data rates, hence we believe Strider can be easily ported to a realtime
hardware implementation.
8. EVALUATION
We evaluate Strider on an indoor testbed of 15 USRP2s and trace
driven simulations. We compare Strider with the following:
(cid:15) Omniscient Scheme: This scheme has perfect advance knowl-
edge of the channel strength, and picks the maximum possible
bitrate that can be decoded error free. The bitrate choices are
from the 9 different bitrates available in the 802.11 standard,
listed in Table 1. We augment the above rates with a 16-QAM,
2/3 code rate that achieves a rate of 2:66b/s/Hz to give the om-
niscient scheme more ﬁdelity in picking the right bitrate. The
omniscient scheme also guarantees that concurrent transmis-
sions are scheduled in a collision-free manner.
(cid:15) SoftRate: This is a state of the art rate rate adaptation protocol
that uses soft information at the receiver to estimate the BER
of a packet. The BER information is sent back to the sender
Figure 3: Strider Indoor Testbed Layout
Table 1: WiFi Bitrates
Channel Code/Modulation
BitRate
6