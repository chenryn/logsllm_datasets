$1++
该表达式意味着：如果有必妥，就把$1强制转换成数值类型，而
$1=$1","$2
意味看：如果有必要，就把$1和$2的类型强制转换成字符串
如果无法根据上下文来判断变量的类型，比如，
if ($1 == $2) ..
---
## Page 197
附录AAWK总结
189
这时候就得根据输入数据来决定变量的类型，所有字段的类型都是字符事，但是，如果字段包含了一个机
器可识别的数，那么它也会被当作数值类型。
显式为空的字段具有字符事值”"，它们不是数值类型，该结论也适用于不存在的字段（也就是超出
NF 的部分)和空白行的S0.
对字段成立的结论，同样适用于由split创建的数组元素。
当在表达式中提到一个不存在的变量时，就会创建该变量，其初始值是0和""，因此，如果元素
arr[i]当前不存在，语句：
if (arr[i] == "") ...
就会导致元素arr[i]被创建，且物始值为""，这就使得if的条件判断结果为真.测试语句
if (i in arr) ...
判断元素arr[i]是否存在，但是不会带来创建新元素的副作用
---
## Page 198
附录B部分习题答案
861
Exercise3.1一个比较简单的，用来忽略空白行的方式是把sum3的第1行替换成
nfld == 0 && NF > 0 ( nfld = NF
Exercise 3.3如果缺了这个条件判断，非数值列的和仍然会被累加，但不会被打印出来，当累加到
某些无用的总和时，可能会出现一些错误（例如溢出），而该条件判断可以避免这这种情况出现，而且并不
会对程序的运行效率产生明显的影响.
Exercise 3.4使用关联数组的话，这道题就容易多了：
{total[$1] += $2 }
Exercise 3.5假定一行内至多只能有25个星号，把max设置为25，如果最长的行不会超过上限，
那么下面的程序就不会对数据进行更改，否则的话，就对每一行按照比例进行缩放，使得最长的行不会超
过25个星号.新数组y用来维护缩放后的长度，这样的话，数组x的元素仍然是有效的，
(x[int($1/10)]++ }
END { max = MAXSTARS = 25
for (i = 0; i  max)
max = x[i]
for (i = 0; i  0)
t=ts
return t
190
---
## Page 199
附录B部分习题答案
191
Exercise3.6需要对数据遍历两遍，其中一遍确定桶的范因，另一遍把条目分配到桶中
194
Exercise3.7追号在数字中如何放置一对于这个问题并没有一个明确的定义，如果不考虑款件工
程的标准，比较常见的情况是即使对问题不是非常清楚，但也必须加以解决，对这道题有两种可能的答
案.下面的程序对整数求和，而这些整数中的追号都处在传统的位置上：
/^[+- ]?[09 ][09]? [09]? (,[09 ][09 ][0-9】) *$ / {
(。*/*/)qnsb
sum += $0
next
{print "bad format:",$0 }
END
{print sum }
一般来说，退号不会出现在小数点之后，程序
/^[+- ]?[09 ][09]?[09]? (,[09][09 ][09】) *([- ][0-9]*)?$/ {
gsub(/,/, "")
sum += $0
next
）
{print "bad format:", $0}
END( print sum }
所求和的数值，其在小数点之前含有进号和至少一个数字。
Exereise 3.8函数daynum(y,m,d）返因某个日期自1901年1月1号以来经过的天数，日期的
格式是year month day，比如200141.闻年的二月有29天，国年的判断标准是年份可以被4整除，
但不能被100整除，或者能直接被400整除，于是1900年和2100年都不是闻年（它们能被100整除），
但2000年是间年（能直接被400整除）
function daynum(y, m, d,days,i,n) {# 1 == Jan 1， 1901
# 365 days a year, plus one for each leap year
n = (y-1901) * 365 + int((y-1901)/4)
if (y & 4 == 0) # leap year from 1901 to 2099
days [ 2 ]++
for (i = 1; i =0
1wid = max(lwid, RLENGTH)
if (!match($1, right))
RLENGTH = 0
rwid = max(rwid, RLENGTH)
wid = max(wid, lwid + rwid)
}else
wid = max(wid, length($1))
---
## Page 202
附录B部分习题答案
194
END(
for (r = 1; r y) ? x :y }
function numjust(s) (# position s
if (1match(s, right))
RLENGTH = 0
return S substr(blanks, 1, int(rwidRLENGTH+(wid-(lwid+rwid))/2))
如果某个数字没有使用到lwid的全部空间，邢么就要把它向左移位，所以在numjust中会有一个比较
复杂的计算
Exercise 4.5
awk '
BEGIN { FS = "\t"; pat = ARGV[1]; ARGV[1] = "-" }
$1-pat{
printf(*&s:\n", $1)
printf("\t&d million people\n", $3)
printf("\t&.3f million sq. mi.\n", $2/1000)
printf("\t&.1f people per sq. mi.\n", 1000*$3/$2)
"s1" [=）xo
然后在system的调用中使用x.如果x是doquery的局部变量，那么在每次调用doquery时，x都
可以被正确地初始化.
Exercise4.11这里显示的是部分答案：函数把qawk在一次执行中计算出的导出文件都记录下来，
这样就避免了重复计算：
function doquery(s,
i,j,x）(
for (i in qattr)#clean up for next query
delete qattr[i]
query = s
# put $names in query into qattr, without $
while (match(s, /\s[A=Za-z]+/)){
qattr[substr(s, RSTART+1, RLENGTH-1)] = 1
S = Substr (S, RSTART+RLENGTH+1)
{
for (i = 1; i  nrel)
# didn't find a table with all attributes
missing(qattr)
else{
# table i contains attributes in query
for (j in qattr) create awk program
gsub("\\$" j,"s" attr[i,j], query)
if (lexists[i] && ncmd[i] > 0) {
for (j = 1; j <= ncmd[i]; j++)
x = x cmd[i, j] "\n"
if (system(x) 1= 0)( # create table i
print "command failed, query skipped\n", x
return
exists[i]++
printf("query:$s\n"，awkcmd)# for debugging
system (awkcmd)
---
## Page 204
附录B部分习题答案
961
数组exists把已经计算过的导出文件记录下来，这个版本的doguery还包含了最后一个问题的答案.
Exercise4.12最简单的做法是把qawk的开头变成
198
=x
于是，在碰到空白行之前，所有的行都是一个查询的组成部分，如果不考虑实现机制，查询最终都要转化
成合法的awk程序.
Exereise5.1这些“随机”数其实都是确定了的：只要知道随机数种子和生成算法，就可以确定随机
数序列.然而，任意两个序列之间都会分享许多属性，完整的讨论可以在Knuth的TheArtofComputer
Programming（第2卷）中找到
Exereise5.2下面的程序可以生成从1到n的k个互不相网的整数，算法来白R.W.Floyd：
#print k distinct random integers between 1 and n
{random($1,$2)}
for (i = n-k+1; i <= n; i++)
((r = randint(i)) in A) ? A[i] : A[r]
for (i in A)
print i
Exercise 5.3问题是随机生成下面这种形式的桥牌：
NORTH
S: 1096 4
H: 8 7
D: J 10 6
C:10853
WEST
EAST
S: K 8 7 3
S: A J 5
H: K Q 4 3 2
H
D: 8 7
D: A K Q 9 2