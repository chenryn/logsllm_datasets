As described earlier, the adversary ﬁrst generates phishing
or malware websites with well-chosen URLs. Then, she needs
to make BITLY include her URLs in DABLOOMS. The most
obvious choice to achieve this is to ﬂood the web with her
malicious URLs and wait until it is spotted by BITLY. Another
option is to register her URLs directly to anti-phishing websites
such as PHISHTANK5 to get her URLs recognized as the ones
hosting malicious contents and to eventually get included in
DABLOOMS.
Fig. 8 describes the effect of pollution on DABLOOMS.
There are λ = 10 ﬁlters and each ﬁlter can include δ = 10000
items and we have chosen f0 = 0.01 and r = 0.9. We consider
two cases for pollution:
• All the ﬁlters are polluted (dashed curve).
• Only the last i ﬁlters are polluted. This number varies from
1 to 9 (dotted curves).
We observe from Fig. 8 that,
if only the last ﬁlter is
polluted, i.e., the ﬁrst 9 ﬁlters remain untouched, then the blue
curve and the dashed curve superimpose for most of the part.
Clearly, as more and more ﬁlters are polluted, the false positive
probability achieved by the attacker gets increased.
Deletion attacks on DABLOOMS are also feasible due to
the presence of counting Bloom ﬁlters. The forgery of the
5www.phishtank.com
No attack
Partial attacks
Full attack
F
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
2
3
4
5
7
# polluted ﬁlters
6
8
9
10
Fig. 8: Polluting DABLOOMS. The last curve in black from left
represents the false positive probability achieved when only the
last ﬁlter is polluted.
required URLs is straightforward since MurmurHash can be
inverted in constant time (see [7]). Furthermore, by exploiting
counter overﬂow, an adversary can force DABLOOMS to create
an empty ﬁlter, even after all the n items have been inserted.
Let us deﬁne a = nk mod 16 and b such that nk = a + 16b.
The goal of the adversary is to obtain after n insertions a ﬁlter
set to 0 everywhere except one counter set to the value a.
All the other insertions make overﬂow b other counters. The
insertion counter of the ﬁlter may say it is full while none of
the values inserted will be detected in the future. Such a ﬁlter is
a complete waste of memory. Empty ﬁlters make DABLOOMS
bigger and useless.
VII. YET ANOTHER ATTACK ON SQUID WEB PROXY
Web proxies are means to efﬁciently handle the daunt-
ing task of managing web trafﬁc and alleviating network
bottleneck. These proxies reduce the bandwidth consumption
by relying on caching and reusing frequently requested web
pages. Achieving the full beneﬁts of the proxy mechanism
requires them to co-operate and share their caches. SQUID [26]
is a notable example of a caching proxy leveraging cache
digest [27], a summary of the contents of the Internet Object
Caching Server. A SQUID server ﬁrst stores the fetched pages
in a hash table and then at regular intervals of 1 hour,
transforms it into space-efﬁcient cache digest which could
later be shared with the peers. When a request for a URL is
received from a client, a cache can use digests from its peers
to determine if any of them have previously fetched the URL.
The cache then requests the object from the closest peer.
Crosby and Wallach [2] have previously attacked the hash
table in version 2.5STABLE1. Our work extends their attack
to cache digests in version 3.4.6.
Attacking Cache Digests
Cache digests in SQUID are built as a Bloom ﬁlter. Al-
though the protocol design allows for a variable number of
108108
hash functions, in practice, SQUID employs 4 hash functions
for the “sake of efﬁciency” and dissuades developers from
using more. Furthermore, instead of computing 4 independent
hash functions over a URL, SQUID generates a 128-bit MD5
hash of the key (comprising of the URL and the HTTP retrieval
method) and then splits it to obtain the indexes of the ﬁlter.
For unexplained reasons, the ﬁlter parameters are not optimal.
In fact, to insert n items in the ﬁlter, the considered ﬁlter size
is 5n + 7, instead of the optimal size 6n. This choice leads to
a higher false positive probability. For instance, if n = 200,
the entailed false positive probability is 0.09 instead of the
optimal value 0.03, hence an increase by a factor of 3.
Attacking SQUID’s cache digest requires us to set up a
client, two SQUID proxies as siblings in a LAN and an HTTP
server responding to every GET request of the client received
via one of these proxies. When the proxies are conﬁgured
as siblings, they work together and exchange cache digests
to avoid unnecessary hits between them. Each unnecessary
hit between proxies costs bandwidth and adds latency to the
client’s request. We suppose that the proxies are honest, this
avoids the trivial attack where a proxy transmits a fake ﬁlter to
its peers. Our attack relies on a malicious client who generates
fake URLs and asks one of the proxies to fetch these pages.
These URLs pollute the cache digest of the concerned proxy.
Once the cache digest of the ﬁrst proxy is fully built, we
start querying the second proxy and count the cache digest
false positive (i.e., unnecessary hits to the ﬁrst proxy). Each
false positive adds at least one round-trip time (10 ms in our
setup) between the two caches to the response delay. With
100 URLs added to pollute a clean cache digest (51 URLs
are already present when the cache is totally clean), the ﬁlter
size is 762 bits. We observed that out of 100 queries, cache
pollution increases the false positives hits to 79% in contrast
to 40% when the cache is unpolluted.
VIII. COUNTERMEASURES
We explore different solutions to render Bloom ﬁlters
resistant to adversaries. A ﬁrst and obvious solution could be to
use an alternative data structure such as hardened hash table.
However, we lose the beneﬁt of Bloom ﬁlters: low memory
footprint. However, an alternative consists in recomputing all
the parameters of a Bloom ﬁlter from (7). It gives us the worst
case parameters. It increases the memory consumption but we
can keep using non-cryptographic hash functions. It defeats
chosen-inputs adversary but not the query-only one. Another
solution consists in using keyed hash functions. It defeats all
classes of adversaries but increases the query time.
A. Worst-case Parameters for Bloom Filters
While designing an application based on Bloom ﬁlter, the
developer has two constraints: m, the memory available and
n, the capacity of the ﬁlter. Based on these parameters, he
minimizes the false positive probability and obtains the optimal
number of hash functions to employ (2). The adversary on the
other hand tries to increase this false positive probability by
inserting specially crafted items (7).
An adaptive approach to the pollution attacks could be
to choose the parameters such that the adversary’s advantage
could be minimized. In other words, the developer would
ﬁx m and n as earlier, but now instead of ﬁnding k that
minimizes the false positive probability of the ﬁlter, he chooses
k that minimizes the false positive probability envisaged by the
adversary, i.e., f ADV =
. Differentiating with respect to
k gives:
(cid:10)k
(cid:3)
(cid:4)(cid:4)
(cid:3)
(cid:9)
nk
m
ADV
= f ADV ·
∂f
∂k
1 + ln
nk
m
The zero of the derivative is:
kADV
opt =
m
en
,
.
(9)
and the second derivative test conﬁrms that kADV
is the point
opt
of minimum of f ADV. The false positive probability achieved
by the adversary would then be:
opt = e−m/en .
f ADV
(10)
However, given n and m, and assuming that the optimal value
k = kADV
is used by the developer, the actual false positive
opt
probability of the ﬁlter in this worst case scenario is obtained
by using this k in (1):
(cid:7) m
ne
(cid:6)
1 − e−1/e
m
n
.
fworst =
ln (fworst) = −0.433
,
(11)
(12)
From (2), (3) and the obtained results, we highlight that:
kopt
kADV
opt
= e ln 2 = 1.88 and
fworst
fopt
= (1.05)
m
n
.
Consequently, the adaptive approach requires a consider-
ably lesser number of hash functions and hence, the associated
Bloom ﬁlter would be more time efﬁcient at the cost of a
slightly higher false positive probability.
Let us now consider a scenario where the developer for a
given m and n chooses kADV
to obtain the false positive prob-
opt
ability of the ﬁlter satisfying (12). However, if the developer
wishes to obtain the same false positive probability, while only
ﬁxing n and not the size of the ﬁlter, the new ﬁlter size m(cid:2)
can be obtained from (3). Comparing these two ﬁlter sizes for
the same false positive probability gives: m(cid:2)
m = 4.8 .
Hence, we observe that the ﬁlter size increases almost by a
factor of 5 in the latter case. With this solution, developers can
keep their fast non-cryptographic hash functions but at the cost
of a larger Bloom ﬁlter. It defeats chosen-insertion adversaries
but not the query-only ones.
B. Probabilistic Solutions
The ﬁrst countermeasure proposed to defeat algorithmic
complexity attacks was to use universal hash functions [28].
These have been empirically studied in case of hash ta-
bles in [2]. We propose to use Message Authentication
Code(MAC) [4], which has been considered as an overkill until
now.
We assume that the server running the Bloom ﬁlter works
with a MAC. The server chooses a key for the MAC at
the beginning and uses it to insert/check items submitted by
clients. The key is chosen from a large set, therefore it is
computationally infeasible for an adversary to either guess
109109
the key or compute pre-images for all the possible values.
Thus, the adversaries deﬁned in Section III can not make a
brute force search to satisfy (6) or (8) because the function
is no longer predictable. Hence, attacks against SCRAPY,
DABLOOM and SQUID can easily be mitigated since in all
these applications, the Bloom ﬁlter is stored on the server side.
The crucial question that remains is the impact of prob-
abilistic solutions on the processing time of a Bloom ﬁlter.
We focus on the benchmark of cryptographic hash functions
and MAC for Bloom ﬁlters. It is commonly admitted that
those functions are too slow compared to non-cryptographic
hash functions and hence are rarely employed. We decided to
make a fair comparison between the two classes of functions.
We observed that in several implementations of Bloom ﬁlters,
there are k calls to the hash function with different salts. This
in fact forces many bits of the digests to remain unused. One
could reuse these bits to reduce the number of calls to the
expensive hash function and obtain comparative results. As
all cryptographic hash functions pass the NIST test suite to
check their uniformity, we can assume that all the bits of the
digest can be used. The indexes of an item require to have
m(cid:13) + 1) bits of digests. Fig. 9 shows the domain of
k · ((cid:12)log2
application of the different cryptographic hash functions (and
thus their respective HMAC construction) for different false
positive probabilities. A single call to SHA-512 or HMAC-
SHA-512 is enough to build any Bloom ﬁlter with optimal
parameters for f ≤ 2
−15 and m smaller than one GB. For
f ≥ 2
−20, we need to make several calls to the hash function.
k · ((cid:12)log2
m(cid:13) + 1)
700
600
500
400
300
200
100
−20
f = 2
−15
f = 2
−10
f = 2
−5
f = 2
SHA-512
SHA-384
SHA-256
SHA-1
0
128 256 384 512 640 768 896 1,024
m in Mbytes
Fig. 9: Domain of application of hash functions.
Table II presents a comparative summary of the cost of
reusing bits of different cryptographic hash functions and
HMAC-SHA-1. Our implementations are in C and the cryp-
tographic primitives are taken from the OpenSSL (version
1.0.1) library. The ﬁlter has a false positive probability of
−10 and contains 1 million elements, creating a ﬁlter of
2
size 2.48MB. The items inserted in the ﬁlter are of 32 bytes
long (corresponding to SHA-256 preﬁxes). Clearly, recycling
of bits performs signiﬁcantly better than the naive k = 10
calls to the hash function. HMAC-SHA-1 is costlier due
to the 2 implicit calls to SHA-1. Compared to the popular
choice of MurmurHash, recycling is a better and more secure
alternative. SIPHASH [7], a non-cryptographic keyed hash
110110
function outperforms HMAC-SHA-1 by a factor 7 without
recycling. Our technique reduces the gap to only a factor 4
making MAC affordable for Bloom ﬁlters.
TABLE II: Time to query a ﬁlter.
Timing (μs)
Hash function
MurmurHash-32 [5]
MD5
SHA-1
SHA-256
SHA-384
SHA-512
HMAC-SHA-1
SIPHASH [7]
Naive
0.7
5.9
6
51