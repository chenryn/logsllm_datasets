执行下一行（以汇编代码为单位）
显示函数或行
说明
（之三）
吉冈弘隆
(续表)
40
---
## Page 58
于./.gdb_history.
这些命令（通过箭头键查找以前的命令），十分方便。默认命令历史文件位
可以将命令历史保存到文件中。保存命令历史后，就能在其他调试会话中重复利用
命令历史
可以随意定义变量。变量以$开头，由英文字母和数字组成。
变量
表2-6值历史的访问变量和说明
用 show value命令可以显示历史中的最后 10个值。
最后的值可以用$访问，值历史的访问变量和说明如表2-6所示。
$bpnum
expansion: History expansion on command input is off.
$_exitcode
$
变量
$3 = 1
$1 = (int *) 0xbf926e08
$3 = 1
$2 = 1 
(gdb) show history
$
(gdb) p $i
(gdb) set $i=0
(gdb) show value
(gdb) p $
Ⅱ
=1
www.TopSage.com
最后设置的断点编号
调试中的程序的返回代码
×命令显示过的最后的地址的值
x命令显示过的最后的地址
值历史的倒数第n个值
值历史的倒数第2个值
值历史的第 n 个值 
值历史的最后一个值
说明
---
## Page 59
?
?
?
之前将其作为命令文件运行。初始化文件和命令文件的运行顺序如下。
Linux 环境下的初始化文件为.gdbinit。如果存在.gdbinit文件，GDB 就会在启动
初始化文件（.gdbinit)
设置保存到命令历史中的命令数量。默认值为256。
格式：
启用命令历史保存到文件和恢复的功能。
格式：
可将命令历史保存到文件中。可以通过环境变量 GDBHISTFILE改变默认文件名。
格式：
可以使用 csh 风格的!字符。
格式：
 show history size
set history size 数字
 show history save
set history save
show history filename
set history filename 文件名
show history expansion
set history expansion
 size: The size of the command history is 256.
save: Saving of the history record on exit is on.
work/dbg/hyoshiok/chapterl/ .gdb_history".
  s n  o n     e
$HOME/.gdbinit.
通过-×选项给出的命令文件。
./.gdbinit.
运行命令行选项。
HACK#7 调试器（GDB）的基本使用方法（之三）I 41
www.TopSage.com
---
## Page 60
43
[运行例]
可以查看说明。
外，用document命令给li命令定义了说明（listmachineinstruction）。用helpli
下例中定义了名为li的命令。它能显示当前$pc所指的位置开始的10条指令。另
格式：
格式：
格式：
明。用“help命令名”可以查看定义的命令。
利用define命令可以自定义命令，还可以使用document命令给自定义命令添加说
命令定义
初始化文件的语法与命令文件的语法相同，都由 gb命令组成。C.com
42|第2章调试前的必知必会
help命令名
[Thread debuging usinglibthread_db enabled]
Startingprogram:/home/hyoshiok/work/ruby_trunk/ruby/ruby
Breakpoint 1at 0x805bd04:filemain.c,line28.
(gdb)start
end
documentli
defineli
end
document命令名
end
define命令名
listmachineinstruction
end
x/10i$pc
说明
命令
www.TopSage.com
---
## Page 61
数计算器。运行示例如下所示（引用文献①)。
有篇博客的文章就在 gdb 的命令文件中使用 libm.so 中定义的函数制作了简单的函
格式：
除了初始化文件，还可以把各种设置写在文件中，在运行调试器时读取这些文件。
source 文件名
(gdb) p $log2(1024.0)
$1 = 4 
(gdb) p $log10(10009.0)
main (argc=l, argv=0xbfa5cfb4) at main.c:28
[Switching to Thread 0xb7f486bo (LwP 9718)]
[Thread debugging using libthread_db enabled]
Starting program: /home/hyoshiok/work/ruby_trunk/ruby/ruby
Breakpoint 1 at 0x805bd04: file main.c, line 28.
(gdb) start
list machine instruction
gdb) source gdbcalc
(gdb) help li
0x805bd2d :
0x805bd2a
0x805bd27 :
x805bd22
x805bdlf ;
0x805bdlb :
0x805bd18 :
0x805bd13 :
0x805bd0c :
0x805bd04 :
(gdb)li
28
main (argc=l, argv=0xbfe23384) at main.c:28
New Thread 0xb7f486b0 (LwP 9718)1
[Switching to Thread 0xb800e6b0 (LWP 8116)]
[New Thread 0xb800e6b0 (LWP 8116)]
=10
setlocale(LC_CTYPE, "");
setlocale(LC_CTYPE, "");
call
OV
ea
7
B
2
movl
$0x8179826,0x4(%esp)
HACK#7 调试器(GDB) 的基本使用方法(之三)【 43
0x812f890 
%eax,(esp)
-xc(&ebp),&eax
0x80d4390 
&ebx, (%esp)
%eax, 0x4($esp)
0x4(%ebx),&eax
0x805b608 
$0x0,(%esp)
www.TopSage.com
---
## Page 62
46
引用文献
本 hack 介绍了 GDB 的使用技巧。
总结
gdbcalc文件如下所示。
44 1  第 2 章 调试前的必知必会
set $atanh = (double (*)(double)) atanh
set $fabs = (double (*)(double)) fabs
set $e = 2.7182818284590452354
# http://ww.keshi.org/blog/2006/03/gdb_hacks_gdbcalc.html
#源自以下博客
 ora -syu a 44y ea -syo aa
set
set
t
t
set
set
t
set
sets
#
$acosh = (double (*)(double)) acosh
$asinh = (double (*)(double)) asinh
$tanh = (double (*)(double)) tanh
$cosh = (double (*)(double)) cosh
$atan = (double (*)(double)) atan 
$acos = (double (*)(double)) acos
$asin = (double (*)(double)) asin
$log2 =(double (*)(double)) log2
$log = (double (*)(double)) log
: $exp10 = (double (*)(double)) exp10
$exp2 =(double (*)(double)) exp2
:$cbrt = (double (*)(double) cbrt
$sqrt = (double (*)(double)) sqrt
$sinh = (double (*)(double)) sinh
$atan2 = (double (*)(double, d
$tan = (double (*)(double)) tan
$cos = (double (*)(double)) cos
$sin = (double (*)(double)) sin 
$pow = (double (*)(double, double)) pow
$log10 = (double (*)(double)) log10
$exp = (double (*)(double)) exp 
$pi = 3.14159265358979323846
www.TopSage.com
double)) atan
---
## Page 63
#8
图 2-1Intel 系列 CPU 的构造
Intel系列CPU 的位序和字节顺序如图 2-1 所示。
字节序
作为调试的基本知识，这里简单介绍一下CPU 架构。
参考文献
http://www.keshi.org/blog/2006/03/gdb_hacks_gdbcalc.html
深追佳境の日
GDB: The GNU Project Debugger
htt://sources.redhat.com/gdb/current/onlinedocs/gdb_toc.html
31 ...24
http://sources.redhat.com/gdb/
字节3
！介绍CPU架构的基本知识。
Endian，为 SPARC、MIPS 架构采用。
Endian，这是Intel架构采用的方法。相反，将高位数据放在低地址的方式叫做Big
例如，0x12345678这个数据像图2-2那样，低位数据排在内存低地址，就叫做Little
所谓Endian，就是多字节数据在内存中的排列方式。
Intel 架构的基本知识
23...16
字节 2
www.TopSage.com
字节1
8
7
字节0
字节偏移量
4
8
比特偏移量
一吉冈弘隆
---
## Page 64
表 2-7主要寄存器的用途
操作数使用。通用寄存器的主要用途请参见表2-7。
某些命令使用特定的寄存器。例如，字符串命令将 ECX、ESI 和 EDI 寄存器作为
ESP 寄存器用于保存栈指针。
图2-332位环境中运行基本程序的寄存器
EBP、ESP，用于逻辑运算、数学运算、地址计算、内存指针等。
如图 2-3所示，通用寄存器有 8种，分别是EAX、EBX、ECX、EDX、ESI、EDI
32位环境中的寄存器
图 2-2 Little Endian 的例子
46 1 第 2 章 调试前的必知必会
EBP
ESP
EDI
B
EDX
ECX
EBX
EAX
寄存器
指向栈上数据的指针（SS段）
0x12
0003
栈指针（SS段）
中字符串的复制目的地（destination）
指向 ES 寄存器所指示的段中某个数据的指针，或者是字符串操作
中字符串的复制源（source）
指向 DS 寄存器所指示的段中某个数据的指针，或者是字符串操作
输入输出指针 
字符串操作或循环的计数器
指向 DS 段中数据的指针（主要段寄存器的用途见表 2-8)
操作数的运算、结果
用途
www.TopSage.com
32 位 EFLAGS 寄存器1个
0x34
0002
32 位EIP 寄存器1个
32位通用寄存器8个
0x56
0001
16位段寄存器6个
0x78
0000
0
---
## Page 65
图2-4通用系统
EFLAGS寄存器中包含状态标志（status flag）、控制标志（control flag）、系统标志
作为参考。寄存器的结构参见图2-4。
但是，通用寄存器的用途并不限于上面所述，也可以用于一般用途，所以上表只能
程序代码放在代码段中，数据放在数据段中，程序所用的栈放在堆栈段中（表2-8）。
表2-8主要段寄存器的用途
（systemflag）等（图2-5）。
GS
B
寄存器
S
品
31
用途
数据段
数据段
数据段