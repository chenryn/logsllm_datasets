                   || year_f_plus_1900 == 400 * (year_f_plus_1900 / 400));
        index = month_f++ + 12 * leap_year_;
        day_0_based = (day_0_based - month_lengths_common_year[index]);
        if ( month_f == 12 )
        {
          month_f = 0LL;
          ++year_f;
          ++year_f_plus_1900;
        }
      }
进行测试：
    day_0_based (__int64 months@, __int64 year@, __int64 domaint_output@, int days@, int domain_nr)
    {
      domain_out = domain_output;
      vars30 = &vars38;
      vars28 = a4;
      vars20 = a3;
      vars18 = a6;
      vars10 = a7;
      vars8 = a8;
      j = 0LL;
      domain = a5;
      v20 = year;
      random_numbers = 0;
      magic_number = 0xDAFE02C;
      days_since_1970_broken = days_since_epoch(months, year, days);
      consonants = *pConsonants;
      LOBYTE(v20) = v20 - 108;
      retaddr = v20;
      i = 0;
      v25 = &v72;
      seed_value = domain_nr / 3 + days_since_1970_broken;
      if ( !*pConsonants )
      {
        consonants = (ExAllocatePool)(&v72, domain, 23LL, 0LL);
        *pConsonants = consonants;
        if ( decrypt_consonants )
        {
          key = 0x3365841C;
          key_index = 0LL;
          addr_encrypted_consonants = &encrypted_consonants;
          do
          {
            key_index_1 = key_index;
            ++consonants;
            ++addr_encrypted_consonants;
            key_byte = *(&key + key_index);
            *(consonants - 1) = *(addr_encrypted_consonants - 1) ^ *(&key + key_index);
            key_index = (key_index + 1) & 0x80000003;
            *(&key + key_index_1) = 2 * key_byte ^ (key_byte >> 1);
            if ( key_index > 1);
            if ( key_index_2 > 1);
            if ( key_index_4 > domain_nr) * (domain_nr - 1)) * round_seed_to_nearset_10;
      LOBYTE(v39) = (v39 & 1) + 8;
      domain_length = v39;
      if ( v39 > 0 )
      {
        v41 = BYTE1(seed_value);
        addr_random_numbers = &the_random_numbers;
        do
        {
          ip1 = i++;
          v50 = (ip1 >> 31) & 3;
          v51 = v50 + ip1;
          v52 = (v51 >> 2);
          v53 = (v51 & 3) - v50;
          if ( v53 )
          {
            v54 = v53 - 1;
            if ( v54 )
            {
              v55 = v54 - 1;
              if ( v55 )
              {
                if ( v55 == 1 )
                {
                  ++random_numbers;
                  v56 = (round_seed_to_nearset_10 > v52);
                  v57 = v52;
                  counter_ = domain_nr;
                  addr_random_numbers = (addr_random_numbers + 1);
                  *(addr_random_numbers - 1) = v56 * (*(&magic_number + v57) & 0xF) * (domain_nr + 1);