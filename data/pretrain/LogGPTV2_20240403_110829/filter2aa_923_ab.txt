The  variables are:
HKLM/SAM, HKLM/SECURITY, HKLM/Software, HKLM/SYSTEM and 
HKEY_USER
Copyright Trustwave 2010
Confidential
Doing it my way
So.
Perl regtime.pl –m HKLM/SAM –r C:\Cases\registry\SAM >>fs_bodyfile
The double >> will append your new output to the end of the previous 
bodyfile. Using a single > will crush the data you already have in 
your bodyfile, I always make a copy of the fs-body first…just in 
case.
Repeat for each hive file and NTUSER.DAT you want to add…
Run mactime again.
Perl mactime.pl –d –b fs_bodyfile >super_timeline.csv
Copyright Trustwave 2010
Confidential
Doing it my way.
And there you have it. A human-readable timeline including registry keys 
in a sortable,  searchable CSV file (easily opened in Excel).
The .csv format is also searchable via the UNIX grep command as well as many 
other stackable commands.
C:\tools\strings super_timeline.csv |grep –i inetmgr.exe 
Sun Nov 16 2003 08:08:59,1301406,m..b,r/rrwxrwxrwx,0,0,47066-128-3,C:/WINDOWS/system32/inetmgr.exe
Mon Apr 23 2007 10:53:45,19456,m...,r/rrwxrwxrwx,0,0,37482-128-3,C:/WINDOWS/system32/inetsrv/inetmgr.exe
Mon Jun 11 2007 19:36:29,19456,...b,r/rrwxrwxrwx,0,0,37482-128-3,C:/WINDOWS/system32/inetsrv/inetmgr.exe
Tue Jun 12 2007 09:47:42,0,m...,0,0,0,0,HKLM/Software/Microsoft/Windows/CurrentVersion/App Paths/inetmgr.exe 
Wed Nov 03 2010 12:01:34,19456,.a..,r/rrwxrwxrwx,0,0,37482-128-3,C:/WINDOWS/system32/inetsrv/inetmgr.exe
Wed Nov 03 2010 12:13:37,19456,..c.,r/rrwxrwxrwx,0,0,37482-128-3,C:/WINDOWS/system32/inetsrv/inetmgr.exe
Fri Jan 07 2011 04:32:59,1301406,..c.,r/rrwxrwxrwx,0,0,47066-128-3,C:/WINDOWS/system32/inetmgr.exe
Fri Jan 14 2011 08:02:01,1301406,.a..,r/rrwxrwxrwx,0,0,47066-128-3,C:/WINDOWS/system32/inetmgr.exe
Copyright Trustwave 2010
Confidential
Timestamp Alteration (Timestomping)
There are a couple of interesting things to notice on the 
previous slide.
•
Inetmgr.exe has 2 separate locations on this server. The one in 
~/inetsrv/ is a valid location. %systemroot%Windows/System32/ is not.
− The binary in /System32 is malware.
•
The date on that binary does not fit the rest of our system timeline, this 
server wasn’t even put into production until 2007.
− Sun Nov 16 2003 08:08:59,1301406,m..b,r/rrwxrwxrwx,0,0,47066-128-
3,C:/WINDOWS/system32/inetmgr.exe
− How do we find out if this has been altered or if it is just an 
anomaly?
Copyright Trustwave 2010
Confidential
Timestamp Alteration (Timestomping)
Some strong words from Vincent Liu, the creator of 
Timestomp, in an interview with CIO magazine May of 
2007.
•
“…But forensic people don’t know how good or bad their tools are, and they’re 
going to court based on evidence gathered with those tools. You should test the 
validity of the tools you’re using before you go to court. That’s what we’ve done, 
and guess what? These tools can be fooled. We’ve proven that.
− I agree, tools can be fooled. Good investigators cannot.
•
“For any case that relies on digital forensic evidence, Liu says, It would be a 
cakewalk to come in and blow the case up. I can take any machine and make it 
look guilty, or not guilty. Whatever I want.”
− I beg to differ.
Copyright Trustwave 2010
Confidential
Defeating Timestamp Alteration
Proving Mr. Liu wrong.
Remember that second set of attributes in the $MFT? $FILE_NAME?
•
AS of the writing of this presentation there is nothing known that can 
change these attributes on a live system. 
•
How do we get at those attributes and make some sense out of the 
$MFT?
− Harlan Carvey to the rescue (again)!
•
Harlan has written a script called mft.pl that he recently made publicly 
available on www.regripper.net.  This script parses out the data related 
to the MAC(B) attributes and outputs it in a (mostly) human-readable 
format.
Copyright Trustwave 2010
Confidential
Defeating Timestamp Alteration
Ripping the $MFT
•
Perl mft.pl c:\cases\registry\$MFT >ripped_mft.txt
− Simply outputs a .txt file containing the MAC(B) attributes stored in both 
$STANDARD_INFO and $FILE_NAME
•
A little more grep-fu and we’ve got what we need.
− Strings ripped_mft.txt |grep –C 6 –i inetmgr.exe
• -C  6 show 6 lines of context surrounding the search hit
• -i ignore case 
Copyright Trustwave 2010
Confidential
Defeating Timestamp Alteration
--
M: Sun Nov 16 15:08:59 2003 Z  
Look familiar?
A: Fri Jan 14 15:02:01 2011 Z
C: Fri Jan  7 11:32:59 2011 Z
B: Sun Nov 16 15:08:59 2003 Z     
0x0030 112  0   0x0000
0x0000
FN: inetmgr.exe Parent Ref: 2783  Parent Seq: 1          $F_N
M: Wed Jul 21 17:40:21 2010 Z        
Unaltered MAC(B) 
A: Wed Jul 21 17:40:21 2010 Z
C: Wed Jul 21 17:40:21 2010 Z
B: Wed Jul 21 17:40:21 2010 Z                 Unaltered MAC(B) 
0x0080 72   1   0x0000
0x0000
Copyright Trustwave 2010
Confidential
Defeating Timestamp Alteration
Interpreting the output of our search.
The result of the 6 lines before and after the filename “inetmgr” are the 
MAC(b) times from $STANDARD_INFO showing the suspect Modifed and 
Birth times and the MAC(b) times from the $FILE_NAME attribute which 
shows the accurate birth date and time of the file.
•
Definitive evidence of time alteration!
•
The second set of timestamps blows away the use of timestomp.
•
Trustwave is encountering the use of this regularly in our investigations.
Copyright Trustwave 2010
Confidential
My way just got easier
The latest version of log2timeline has added functionality that 
automates virtually everything I just talked about.
c:\perl\log2timeline\log2timeline.pl -r  -z  -f 
 -w 
•
Version .60 runs on Windows as well as Linux
•
It will automatically parse the registry hives, event logs, the $MFT, 
IIS logs and just about anything else you can think of.
•
Nice work Kristinn, soon nobody will need me at all.
Copyright Trustwave 2010
Confidential
Demo Time
•
Create a super timeline from a postmortem image using fls, 
regtime and mactime.
•
Perform a string search for known malicious files in that 
timeline.
•
Verify timestamps of recovered files by comparing $SI and 
$FN from the $MFT
Copyright Trustwave 2010
Confidential
Tools
Tools used and credit to their creators:
Regtime.pl and mft.pl
Harlan Carvey. Author of  “Windows Forensic Analysis”, “Windows Registry 
Forensics” and the supporting “Windows Incident Response” blog.  
http://windowsir.blogspot.com
Fls and mactime.pl
Brian Carrier. Author of “Filesystem Forensic Analysis” and the creator of “The 
Sleuth Kit”
http://www.sleuthkit.org
Log2timeline
Kristinn Gudjonsson. Author GCFA Gold paper “Mastering the Super Timeline 
With log2timeline” and the forensics blog “IR and Forensic talk”
http://blog.kiddaland.net
Copyright Trustwave 2010
Confidential
Tools
More tools used and credit to their creators.
•
The original mac_daddy was written by Rob Lee and was absorbed 
into mactime by Brian Carrier.  It’s only fair to mention Rob since he 
is The original MAC(b) daddy.
•
Special thanks to Chris Pogue (@cpbeefcake) for teaching me his 
“Sniper Forensics” methodology and always having the time to 
mentor me, even when he doesn’t have the time to mentor me. 
Copyright Trustwave 2010
Confidential
Conclusion
Real world anti-forensics.
In the course of real world investigations we regularly encounter malware and 
attackers that are using anti-forensics techniques in an attempt to obfuscate 
their trail. As attackers start to use these tools more regularly, the 
investigators that work the cases need to be better armed and prepared to 
recognize and defeat their methods.
•
Everything leaves trace evidence somewhere, so know how your tools 
work and not just that they do. (Locard’s Exchange Principle)
•
Remember that the tools do not make the investigator, it’s the 
investigators use of the tools that make them effective.
•
Be aware that these tactics are in use.  
Questions??
Thank You!
PI:EMAIL
http://eyeonforensics.blogspot.com/
@handlefree