在我四处寻找漏洞的过程中，我已经发现在没有任何cookie验证的情况下可以直接访问testCredentials.do终端。所以，我认为深入探究这个模块的业务逻辑是很多必要的。  
TestCredentials类有俩个不同的可以公开访问的类方法。以下是最有趣的一个:
    public ActionForward testCredentialForConfMonitors(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      {
        Properties authResult = new Properties();
        String monType = null;
        try
        {
          monType = request.getParameter("montype");
          if ((monType == null) || (monType.equalsIgnoreCase("null"))) {
            monType = request.getParameter("type");
          }
          NewMonitorConf newMonConf = new NewMonitorConf();
          if ((newMonConf.preConfMap.containsKey(monType)) || (monType.equalsIgnoreCase("node")))
          {
            monType = newMonConf.getResourceTypeForPreConf(monType);
            authResult = newMonConf.getAuthResultAsPerResourceType(monType, request, true);
          }
          else
          {
            Properties props = NewMonitorConf.getClass(monType);
            ArrayList args = NewMonitorUtil.getArgsforConfMon(monType);
            String dcclass = props.getProperty("dcclass");
            CustomDCInf amdc = (CustomDCInf)Class.forName(dcclass).newInstance();
            Properties argsasprops = NewMonitorConf.getValuesforArgs(request, args);
            authResult = amdc.CheckAuthentication(argsasprops);
          }
          response.setContentType("text/html; charset=UTF-8");
          PrintWriter out = response.getWriter();
          if (authResult.getProperty("authentication").equalsIgnoreCase("passed"))
          {
            String passedMsg = NmsUtil.GetString("Passed");
            out.println("" + passedMsg + "");
            out.flush();
          }
          else
          {
            // ... OMITTED CODE SECTION ...
          }
        }
        catch (NoClassDefFoundError er)
        {
          er.printStackTrace();
          try
          {
            if ("WebsphereMQ".equals(monType))
            {
              // ... OMITTED CODE SECTION ...
            }
          }
          catch (Exception e)
          {
            e.printStackTrace();
          }
        }
        catch (Exception ex)
        {
          ex.printStackTrace();
        }
        return null;
      }
接下来我就开始考虑可能存在的攻击点。首先毕竟这个产品的名字叫做“Applications
Manager”（应用管理）。这也就意味着这个产品可以访问服务器，各种其他应用，数据库等等等。基于此，我决定先来看一看它所拥有的各项功能。  
下面这张截图显示了使用Application Manager你可以跟踪、管理的各项产品应用等。我知道如何从数据库或是linux系统中获取信息，但是如何从MS
Office SharePoint或是Microsoft
Lync中获取呢？我不会通过直接运行powershell命令或是vbs脚本的方式来实现，但并不表示大多数的开发者都会像我一样。  
如果我能理解NewMonitor类中在干些什么东西，我想我就可以找到更多可以实现的攻击点而不仅仅是猜想。  
在经过了很长时间的审计后，我找到了如下类:
    public Properties CheckAuthentication(Properties props)
      {
        Properties authresult = new Properties();
        String availmess = null;
        boolean authentication = false;
        String host = props.getProperty("HostName");
        String username = props.getProperty("UserName");
        String password = props.getProperty("Password");
        boolean isPowershellEnabled = Boolean.parseBoolean(props.getProperty("Powershell", "FALSE"));
        String authMode = (props.getProperty("CredSSP") != null) && (props.getProperty("CredSSP").equals("Yes")) ? "CredSSP" : "";
        if (!isPowershellEnabled)
        {
          WMIDataCollector wl = new WMIDataCollector();
          String wmiquery = "Select * from Win32_PerfRawData_PerfOS_Processor where Name='_Total'";
          Properties output = wl.getData(host, username, password, wmiquery, new Vector(), "wmiget.vbs");
          if (output.get("ErrorMsg") != null)
          {
            if (((String)output.get("ErrorMsg")).indexOf("The RPC server is unavailable") != -1) {
              availmess = FormatUtil.getString("am.webclient.sharepoint.rpcerror.text");
            } else if (((String)output.get("ErrorMsg")).indexOf("Access is denied") != -1) {
              availmess = FormatUtil.getString("am.webclient.sharepoint.accessdenied.text");
            } else {
              availmess = (String)output.get("ErrorMsg");
            }
          }
          else {
            authentication = true;
          }
        }
        else
        {
          List outputFromScript = null;
          boolean farmtype = props.getProperty("SPType", "SPServer").equalsIgnoreCase("Farm");
          String psFilePath = System.getProperty("user.dir") + File.separator + "conf" + File.separator + "application" + File.separator + "scripts" + File.separator + "powershell" + File.separator + "TestConnectivity.ps1";
          File psFile = new File(psFilePath);
          password = password.replaceAll("'", "''");
          String scriptToExecute = "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden "&{&'" + psFile.getAbsolutePath() + "' " + host + " " + username + " '" + password + "'}"";
          if (farmtype) {
            scriptToExecute = "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden "&{&'" + psFile.getAbsolutePath() + "' " + host + " " + username + " '" + password + "' " + "'FarmType' '" + authMode + "'}"";
          }
          AMLog.debug("SharePointServerDataCollector::resourcename: " + props.getProperty("resourcename") + " ,reourceid: " + props.getProperty("resourceid") + " ,hostname: " + props.getProperty("HostName") + ",powershell: " + props.getProperty("PowerShell") + " ::scriptToExecute:" + psFilePath);
          try
          {
            Process proc = Runtime.getRuntime().exec(scriptToExecute);
            RuntimeProcessStreamReader readerThread = new RuntimeProcessStreamReader(host, scriptToExecute, proc, 300, true, "inputstream", true);
正如你所看到的，主机名，用户名，以及密码没有经过任何限制地传入到了powershell命令中。当然这是我从输入开始一直跟踪到这一步得出的结论。  
下面是触发这个漏洞所必要的HTTP请求:
    POST /testCredential.do HTTP/1.1
    Host: 12.0.0.226:9090
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36
    Accept: */*
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    Content-Length: 595
    Connection: close
    &method=testCredentialForConfMonitors&cacheid=1520419442645&type=OfficeSharePointServer&serializedData=url=%2Fjsp%2FnewConfType.jsp&searchOptionValue=&query=&method=createMonitor&addtoha=null&resourceid=&montype=OfficeSharePointServer&isAgentEnabled=NO&resourcename=null&isAgentAssociated=false&hideFieldsForIT360=null&childNodesForWDM=%5B%5D&type=OfficeSharePointServer&displayname=asd&HostName=12.0.0.226&Version=2013&Services=False&Service=False&Powershell=True&CredSSP=False&SPType=SPServer&CredentialDetails=nocm&cmValue=-1&UserName=qwe&Password=qwe&allowEdit=true&pollinterval=5&groupname=
## 四、Metasploit模块
这是使用这个命令注入漏洞的metasploit模块。  
具体流程可以在[这里](https://github.com/rapid7/metasploit-framework/pull/9684)找到。