### Outlook Home Page

**Created:** 2019-11-07T20:09:56.536Z  
**Description:** Adversaries may abuse Microsoft Outlook's Home Page feature to achieve persistence on a compromised system. The Home Page feature is a legacy function used to customize the presentation of Outlook folders, allowing for an internal or external URL to be loaded and displayed whenever a folder is opened. A malicious HTML page can be crafted to execute code when loaded by the Outlook Home Page.

Once a malicious home page has been added to the userâ€™s mailbox, it will be loaded when Outlook starts. The malicious home page will execute when the corresponding Outlook folder is loaded or reloaded.

**Detection:**
- Microsoft has released a PowerShell script to gather mail forwarding rules and custom forms in your mail environment, along with steps to interpret the output. (Citation: Microsoft Detect Outlook Forms)
- SensePost, which developed the tool [Ruler](https://attack.mitre.org/software/S0358) for carrying out malicious rules, forms, and Home Page attacks, has also released a tool to detect Ruler usage. (Citation: SensePost NotRuler)
- Collect process execution information, including process IDs (PID) and parent process IDs (PPID), and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may indicate suspicious or malicious behavior.

**Platforms:**
- Windows
- Office 365

**Permissions Required:**
- Administrator
- User

---

### Asymmetric Cryptography

**Created:** 2020-03-16T15:48:33.882Z  
**Description:** Adversaries may use known asymmetric encryption algorithms to conceal command and control traffic rather than relying on the inherent protections provided by communication protocols. Asymmetric cryptography, or public key cryptography, uses a key pair per party: one public key that can be freely distributed and one private key. Data is encrypted with the recipient's public key and decrypted with their private key, ensuring only the intended recipient can read the data. Common public key encryption algorithms include RSA and ElGamal.

For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established but use asymmetric cryptography to establish or transmit a key. Therefore, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).

**Detection:**
- SSL/TLS inspection can help detect command and control traffic within some encrypted communication channels. (Citation: SANS Decrypting SSL)
- Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from a server.
- Processes using the network that do not normally have network communication or have never been seen before are suspicious.
- Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port being used. (Citation: University of Birmingham C2)

**Platforms:**
- Linux
- macOS
- Windows

---

### Exfiltration to Cloud Storage

**Created:** 2020-03-09T15:04:32.767Z  
**Description:** Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, editing, and retrieval of data from a remote cloud storage server over the Internet. Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these services can provide significant cover to the adversary if hosts within the network are already communicating with the service.

**Detection:**
- Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from a server, to known cloud storage services.
- Processes using the network that do not normally have network communication or have never been seen before are suspicious.
- User behavior monitoring may help detect abnormal patterns of activity.

**Platforms:**
- Linux
- macOS
- Windows

---

### Lateral Tool Transfer

**Created:** 2020-03-11T21:01:00.959Z  
**Description:** Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (e.g., via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as SMB/Windows Admin Shares or authenticated connections via Remote Desktop Protocol. (Citation: Unit42 LockerGoga 2019)

Files can also be transferred using native or otherwise present tools on the victim system, such as `scp`, `rsync`, `curl`, `sftp`, and `ftp`.

**Detection:**
- Monitor for file creation and files transferred within a network using protocols such as SMB or FTP.
- Unusual processes with internal network connections creating files on-system may be suspicious.
- Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files.
- Monitor for alike file hashes or characteristics (e.g., filename) that are created on multiple hosts.

**Platforms:**
- Linux
- macOS
- Windows

---

### Path Interception by Unquoted Path

**Created:** 2020-03-13T13:51:58.519Z  
**Description:** Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher-level directory within the path, so that Windows will choose the adversary's executable to launch.

Service paths and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks. An adversary can place an executable in a higher-level directory of the path, and Windows will resolve that executable instead of the intended executable.

This technique can be used for persistence if executables are called regularly, as well as for privilege escalation if intercepted executables are started by a higher-privileged process.

**Detection:**
- Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user-writable.
- Monitor the executing process for process executable paths that are named for partial directories.
- Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (e.g., `findstr`, `net`, and `python`).
- If this activity occurs outside of known administration activity, upgrades, installations, or patches, it may be suspicious.
- Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

**Platforms:**
- Windows

---

### Install Digital Certificate

**Created:** 2021-03-17T20:32:13.793Z  
**Description:** Adversaries may install SSL/TLS certificates to further their operations, such as encrypting C2 traffic (e.g., [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or lending credibility to a credential harvesting site. Certificates can be uploaded to a server, and the server can be configured to use the certificate to enable encrypted communication with it.

Adversaries can obtain digital certificates or create self-signed certificates. Digital certificates can then be installed on adversary-controlled infrastructure that may have been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).

**Detection:**
- Consider using services that may aid in tracking certificates in use on sites across the Internet. In some cases, it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. (Citation: Splunk Kovar Certificates 2017)
- Detection efforts may be focused on related behaviors, such as [Web Protocols](https://attack.mitre.org/techniques/T1071/001) or [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).

**Platforms:**
- PRE

---

### Local Job Scheduling

**Created:** 2017-12-14T16:46:06.044Z  
**Description:** On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: `cron`, `at`, and `launchd`. Unlike [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction with an established remote session, like secure shell (SSH).

**cron:**
- System-wide cron jobs are installed by modifying `/etc/crontab` file, `/etc/cron.d/` directory, or other locations supported by the Cron daemon. Per-user cron jobs are installed using `crontab` with specifically formatted crontab files.
- These methods allow commands or scripts to be executed at specific, periodic intervals in the background without user interaction. Adversaries may use job scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct execution as part of lateral movement, to gain root privileges, or to run a process under the context of a specific account.

**at:**
- The `at` program is another means on POSIX-based systems, including macOS and Linux, to schedule a program or script job for execution at a later date and/or time, which could also be used for the same purposes.

**launchd:**
- Each `launchd` job is described by a different configuration property list (plist) file similar to [Launch Daemon](https://attack.mitre.org/techniques/T1160) or [Launch Agent](https://attack.mitre.org/techniques/T1159), except there is an additional key called `StartCalendarInterval` with a dictionary of time values. This only works on macOS and OS X.

**Detection:**
- Legitimate scheduled jobs may be created during the installation of new software or through administration functions.
- Jobs scheduled with `launchd` and `cron` can be monitored from their respective utilities to list detailed information about the jobs.
- Monitor process execution resulting from `launchd` and `cron` tasks to look for unusual or unknown applications and behavior.

**Platforms:**
- Linux
- macOS

**Permissions Required:**
- Administrator
- User
- root

---

### Setuid and Setgid

**Created:** 2017-12-14T16:46:06.044Z  
**Description:** When the setuid or setgid bits are set on Linux or macOS for an application, the application will run with the privileges of the owning user or group, respectively. Normally, an application is run in the current userâ€™s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesnâ€™t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an "s" instead of an "x" when viewing a file's attributes via `ls -l`. The `chmod` program can set these bits with bitmasking, `chmod 4777 [file]`, or via shorthand naming, `chmod u+s [file]`.

An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setuid or setgid bits to get code running in a different userâ€™s context. Additionally, adversaries can use this mechanism on their own malware to ensure they can execute in elevated contexts in the future.

**Detection:**
- Monitor the file system for files that have the setuid or setgid bits set.
- Monitor for execution of utilities, like `chmod`, and their command-line arguments to look for setuid or setguid bits being set.

**Platforms:**
- Linux
- macOS

**Permissions Required:**
- User

**Effective Permissions:**
- Administrator
- root

---

### Startup Items

**Created:** 2020-01-15T18:00:33.603Z  
**Description:** Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)), and thus the appropriate folder, `/Library/StartupItems`, isnâ€™t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), `StartupParameters.plist`, reside in the top-level directory.

An adversary can create the appropriate folders/files in the `StartupItems` directory to register their own persistence mechanism. Since `StartupItems` run during the bootup phase of macOS, they will run as the elevated root user.

**Detection:**
- The `/Library/StartupItems` folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist.
- Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.

**Platforms:**
- macOS

**Permissions Required:**
- Administrator

---

### Web Shell

**Created:** 2017-05-31T21:31:13.061Z  
**Description:** A web shell is a web script placed on an openly accessible web server to allow an adversary to use the web server as a gateway into a network. A web shell may provide a set of functions to execute or a command-line interface on the system that hosts the web server. In addition to a server-side script, a web shell may have a client interface program used to talk to the web server (e.g., China Chopper Web shell client). (Citation: Lee 2013)

Web shells may serve as [Redundant Access](https://attack.mitre.org/techniques/T1108) or as a persistence mechanism in case an adversary's primary access methods are detected and removed.

**Detection:**
- Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the web shell that is on the server may be small and innocuous-looking.
- Process monitoring may be used to detect web servers that perform suspicious actions, such as running `cmd` or accessing files that are not in the web directory.
- File monitoring may be used to detect changes to files in the web directory of a web server that do not match updates to the web server's content and may indicate implantation of a web shell script.
- Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells)

**Platforms:**
- Linux
- Windows
- macOS

**System Requirements:**
- Adversary access to a web server with a vulnerability or an account to upload and serve the web shell file.

**Effective Permissions:**
- SYSTEM
- User

---

### Process DoppelgÃ¤nging

**Created:** 2018-01-16T16:13:52.465Z  
**Description:** Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process DoppelgÃ¤nging Dec 2017)

Adversaries may leverage TxF to perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055) called Process DoppelgÃ¤nging. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1093), Process DoppelgÃ¤nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process DoppelgÃ¤nging's use of TxF also avoids the use of highly-monitored API functions such as `NtUnmapViewOfSection`, `VirtualProtectEx`, and `SetThreadContext`.

Process DoppelgÃ¤nging is implemented in 4 steps:
1. **Transact:** Create a TxF transaction using a legitimate executable, then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
2. **Load:** Create a shared section of memory and load the malicious executable.
3. **Rollback:** Undo changes to the original executable, effectively removing malicious code from the file system.
4. **Animate:** Create a process from the tainted section of memory and initiate execution.

**Detection:**
- Monitor and analyze calls to `CreateTransaction`, `CreateFileTransacted`, `RollbackTransaction`, and other rarely used functions indicative of TxF activity.
- Process DoppelgÃ¤nging also invokes an outdated and undocumented implementation of the Windows process loader via calls to `NtCreateProcessEx` and `NtCreateThreadEx` as well as API calls used to modify memory within another process, such as `WriteProcessMemory`.
- Scan file objects reported during the `PsSetCreateProcessNotifyRoutine`, which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access.
- Also consider comparing file objects loaded in memory to the corresponding file on disk.
- Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

**Platforms:**
- Windows

**Permissions Required:**
- Administrator
- SYSTEM
- User

**Defense Bypassed:**
- Process whitelisting
- Anti-virus
- Whitelisting by file name or path
- Signature-based detection

---

### SSH Hijacking

**Created:** 2018-01-16T16:13:52.465Z  
**Description:** Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate, or the use of an asymmetric encryption key pair.

To move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. (Citation: Slideshare Abusing SSH) (Citation: SSHjack Blackhat) (Citation: Clockwork SSH Agent Hijacking) Compromising the SSH agent also provides access to intercept SSH credentials. (Citation: Welivesecurity Ebury SSH)

[SSH Hijacking](https://attack.mitre.org/techniques/T1184) differs from the use of [Remote Services](https://attack.mitre.org/techniques/T1021) because it injects into an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

**Detection:**
- Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH.
- Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.
- Also monitor user SSH-agent socket files being used by different users.

**Platforms:**
- Linux
- macOS

**Permissions Required:**
- User
- root

**System Requirements:**
- SSH service enabled, trust relationships configured, established connections

---

### System Language Discovery

**Created:** 2021-08-18T14:06:45.244Z  
**Description:** Adversaries may attempt to gather information about the system language of a victim to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.

There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.

For example, on a Windows system, adversaries may attempt to infer the language of a system by querying the registry key `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language` or parsing the outputs of Windows API functions `GetUserDefaultUILanguage`, `GetSystemDefaultUILanguage`, `GetKeyboardLayoutList`, and `GetUserDefaultLangID`.

On a macOS or Linux system, adversaries may query `locale` to retrieve the value of the `$LANG` environment variable.

**Detection:**
- System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained.
- Monitor processes and command-line arguments for actions that could be taken to gather system language information. This may include calls to various API functions and interaction with system configuration settings such as the Windows Registry.

**Platforms:**
- Windows
- Linux
- macOS

**Permissions Required:**
- User

**Data Sources:**
- Windows Registry: Windows Registry Key Access
- Process: OS API Execution
- Process: Process Creation
- Command: Command Execution