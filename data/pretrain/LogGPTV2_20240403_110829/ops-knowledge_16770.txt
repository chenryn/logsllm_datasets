User: 请根据以下应用程序设计要求，设计系统架构和实现方案。
要求开发一款多人在线游戏，支持至少10000个在线玩家，要求实时更新玩家状态和游戏进度。同时，要求游戏服务器具有很高的可伸缩性和容错能力，并支持自动部署和水平扩展。
Assistant: 系统架构设计：

1.采用微服务架构，将游戏服务器分为多个独立的服务，以降低服务间的耦合度，方便进行水平扩展。
2.使用负载均衡技术，将请求均匀分发到各个服务器上，以实现高可用。
3.使用消息队列技术，将玩家状态和游戏进度实时传递给各个服务器端，从而实现实时更新。

具体实现方案：

1.使用Spring Cloud框架搭建微服务架构，并采用Docker容器化技术进行部署，以方便实现自动部署和水平扩展。
2.采用Nginx作为负载均衡器，将请求分发到不同的服务节点上。
3.使用Kafka作为消息队列，将玩家状态和游戏进度实时传递给各个服务端。对于服务端节点，使用WebSocket协议实现双向通信，保证实时性。
4.为了保证服务的容错能力，使用Hystrix熔断机制和Spring Cloud Ribbon进行服务降级和自动重试，同时在数据库端使用分库分表技术以提高数据访问的性能和可靠性。