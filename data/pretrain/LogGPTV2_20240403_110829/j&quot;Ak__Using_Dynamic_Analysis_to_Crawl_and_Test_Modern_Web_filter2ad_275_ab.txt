### How Dynamic Traces Are Collected

#### Function Hooking
Function hooking is a set of techniques that allow the interception of function calls to inspect parameters or modify program behavior. In this section, we discuss two JavaScript features used for function hooking: function redefinition and set functions.

**Function Redefinition**
Function redefinition involves overwriting JavaScript functions and object methods. For example, in Listing 1.2, we log every call to the `alert` function by first assigning it a new name (Line 2) and then redefining it (Line 3). The redefined function retains the original behavior but adds a logging call (i.e., hooks the function).

```javascript
// Listing 1.2. Function hooking via function redefinition
alert("Hello world!"); // show a popup window
var orig_alert = alert;
function alert(s) {
    console.log("call to alert " + s); // hook
    return orig_alert(s);
}
alert("Hello world!"); // message is also shown in the console
```

**Set Functions**
Function redefinition cannot be used when functions are set as object properties, such as `obj.prop = function() {...}`. In these cases, we use set functions, which are bound to object properties and called whenever the property changes. For example, to hook the function `myHook` to the property `prop` of the object `obj`, you can use:

```javascript
Object.defineProperty(obj, "prop", {set: myHook});
```

#### Event Handlers Registration
We use function hooking to capture event handler registrations in three of the four registration models: `addEventListener`, event handler properties, and timing events. For the fourth model, event handler attributes, we visit the HTML DOM tree to capture them.

**Hooking `addEventListener`**
To capture the registration of a new event handler, we inject our own function when `addEventListener` is called. Listing 1.3 shows an example of the hooking code. The `installHook` function installs a hook before the execution of a function `f` of object `obj`.

```javascript
// Listing 1.3. Function Hooking for the addEventListener function
function installHook(obj, f, hook) {
    var orig = obj[f];
    obj[f] = function () {
        hook(this, arguments);
        return orig.apply(this, arguments);
    }
}
```

We can use `installHook` to install our hook `myHook` for every call to `addEventListener` of any HTML tag element:

```javascript
installHook(Element.prototype, "addEventListener", myHook);
```

**Hooking Event Handler Properties**
To capture event handlers registered via event properties, we install a hook function as a set function in the DOM elements. However, this approach requires careful handling:
1. Set function registrations may be overwritten by other set functions.
2. Set functions do not guarantee the hook will remain for the entire analysis.
3. Some JavaScript engines may prevent event firing if set functions are used.

To address these issues, we redefine the `defineProperty` function and monitor its use. If a set function is detected, we create a new set function that chains our set function with the one provided by the program.

**Hooking Timing Event Handlers**
To capture the registration of timing event handlers, we reuse the `installHook` function:

```javascript
installHook(window, "setTimeout", myHook);
installHook(window, "setInterval", myHook);
```

#### Network Communication APIs
We use function hooking to dynamically inspect the use of networking communication APIs. For example, we can hook the `XMLHttpRequest` API, which is used in three steps: instantiation, setting the HTTP request method and URL, and sending the request.

```javascript
installHook(XMLHttpRequest, "open", myHook);
installHook(XMLHttpRequest, "send", myHook);
```

For APIs that require the URL in the constructor, such as `WebSocket`, we modify the `installHook` function to return an instance of the object.

#### Run-Time DOM Analysis
The DOM tree represents the HTML document's elements and can be visited to inspect its current state. We use run-time DOM analysis for:
1. Extracting handler registrations as HTML attributes.
2. Identifying changes in the tree while firing events.
3. Discovering event handler registrations when the JavaScript engine does not allow hooking code as set functions.

#### Collection of Dynamic Traces
j¨Ak uses hook functions to collect information from the run-time environment at the point of their invocation. This information is sent to the crawler, which collects it in an execution trace.

**Event Handler Registration**
For event handler registration, the hook function depends on the type of event. For DOM events, the hook collects the event name and the position in the DOM tree. For timing events, the hook collects the timeout set by the caller. The collected information is sent to the crawler via a JavaScript object `trace`.

```javascript
// Listing 1.4. Hook Function for the addEventListener and setTimeout
function addEventListenerHook(elem, args) {
    path = getPath(elem);
    entry = {
        "evt_type": args[0], // 1st parameter of addEventListener
        "evt_source": path
    };
    trace.push(entry);
}

function timeoutHook(elem, args) {
    entry = {
        "evt_type": "timeout",
        "time": args[1] // 1st parameter of setTimeout
    };
    trace.push(entry);
}
```

**Network Communication APIs**
For network communication APIs, we define a hook for each API function and use the API object to store the current state of the API calls. For example, for `XMLHttpRequest`, we create new object properties for the HTTP request method and URL, and then collect the content of these properties and the body of the HTTP requests.

```javascript
// Listing 1.5. Hook Functions for XHR API
function xhrOpenHook(xhr, args) {
    xhr.method = args[0]; // 1st parameter of XMLHttpRequest.open
    xhr.url = args[1]; // 2nd parameter, the URL
}

function xhrSendHook(xhr, args) {
    entry = {
        "evt_type": "xhr",
        "url": xhr.url,
        "method": xhr.method,
        "body": args[0] // 1st parameter of XMLHttpRequest.send
    };
    trace.push(entry);
}
```

These hooks are thread-safe and work correctly even when JavaScript programs access the network communication API concurrently.

### Crawling
In the previous section, we presented the dynamic analysis technique. Now, we integrate this into our web crawler j¨Ak. The crawler is model-based, creating and maintaining a model of the web application to decide the next part to explore.

**Navigation Graph**
j¨Ak creates and maintains a navigation graph of the web application, modeling transitions within client-side programs and between web pages. The model is a directed graph where nodes represent clusters of pages and edges represent events and URLs. Each page is modeled as a tuple `p = (u, E, L, F)` where `u` is the web page URL, `E` is the JavaScript events, `L` is a set of URLs, and `F` is a set of HTML forms.

Pages are normalized by stripping out query string values and sorting query string parameters lexicographically. Two pages are in the same cluster if their URLs are identical and they are sufficiently similar, calculated as:

\[
s(p_1, p_2) = \frac{|E_1 \cap E_2| + |L_1 \cap L_2| + |F_1 \cap F_2|}{|E_1 \cup E_2| + |L_1 \cup L_2| + |F_1 \cup F_2|}
\]

A similarity threshold of 0.8 has been determined to generate the best results for our setting.

**Navigating**
The dynamic analysis generates a runtime trace containing event handler registrations and dynamically-generated URLs. This information is sorted into lists of events and URLs, which are used to decide the next action and termination conditions.