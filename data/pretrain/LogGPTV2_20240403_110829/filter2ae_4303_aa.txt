作者: **启明星辰ADLab**
### 一、背景
2017年5月12日晚间时候，一款名为“WanaCry”的勒索蠕虫病毒开始肆虐全球，波及上百个国家和成千上万个组织机构，影响深远，关于该蠕虫的详情请见启明星辰ADLab的分析报告《“WanaCry”事件分析与启示：警惕下一个“永恒之蓝”》。该款蠕虫基于“Shadow
Brokers”（影子经纪人）近期泄露的NSA旗下的黑客团队 “Equation
Group”（方程式组织）的漏洞利用工具之一“EternalBlue”（永恒之蓝），被“幸运”的选为蠕虫载体的原因可能是其打击范围涵盖了windows
xp到windows
2012（目前来看，是此次泄露的工具中覆盖最广的）。在上面提及的报告后半部分，我们提到勒索是目的，漏洞是先决条件，下一个能承载该目的的并非只有永恒之蓝。而这次我们的主角便是“Esteemaudit”。相较EternalBlue，Esteemaudit影响范围只包括windows
2003和windows
xp，但是一方面这两个系统目前的用户量仍不在少数，另一方面因为微软早已对2003和xp停止支持（除了5月13日针对此次永恒之蓝的紧急补丁），也就是说该工具利用的漏洞还是个0
day。
本文首先针对该0
day的细节做深入的分析，另外对于安全研究人员来说该批泄露工具中部分利用在使用上以及测试环境搭建上的问题造成了很多触发漏洞不成功的情况，针对Esteemaudit尤其如此，因此我们加入了该部分的详细说明并给出对比测试结论，排除研究该漏洞带来的干扰。
后续，我们会放出该漏洞的检测工具。
### 二、Esteemaudit涉及0day漏洞的分析
##### （1）漏洞描述
Windows
2000以后的版本都支持SmartCard认证机制，SmartCard中包含一个芯片存储用户登录信息，包括私钥和公钥，登录本地计算机时，需要将SmartCard插入本地计算机，并向WINLOGON输入PIN码；登录远程计算机时，在本地计算机插入Smartcard，输入PIN码，远程计算机Winlogon将会对PIN码进行验证，如下图所示。
基于SmartCard认证的RDP协议
其中，gpkcsp.dll模块中的MyCPAcquireContext函数存在漏洞，该模块由winlogon.exe调用。MyCPAcquireContext函数的功能是创建Prov
Context，通过接收SmartCard数据，对Prov Context结构体赋值。如果构造超长的SmartCard数据，在对Prov
Context进行赋值时可能覆盖其他字段，产生溢出。
##### （2）Smart Card协议
根据智能卡协议标准smartcard_standard_ISO7816，发送命令请求的数据包格式定义如下：
command APDU structure
其中，部分字段的意义如下：
  * INS：指令码，取值范围如下表： 
  * Lc：表示数据段的长度。
  * Le：表示期望接收命令应答的最大长度。
##### （3）利用工具分析
首先，Esteemaudit利用代码会初始化一些从xml文件和脚本输入中获得的配置信息。
在初始化信息之后，exploit开始构造漏洞利用数据包。
首先构造第一段数据(buffer1)，内容随机，长度为0xb2，并将GlobalBufAddr+4（0x080190dc）的地址赋值给buffer偏移0x8d的位置，将0x9000写入buffer偏移0x91的位置。其中这个GlobalBufAddr来自xml配置文件，是目标机上存在漏洞的模块gpkcsp.dll中一个全局变量的地址，该地址用来存储客户端中读取的data。由于被攻击目标（xp和2003）中不存在ASLR，所以xml可以根据不同的目标机版本硬编码这个地址。
这里漏洞利用代码并不是完美无缺，如果想要成功触发漏洞，这段数据中的第五个字节不能为0x30，否则RDP程序将会进入另一个分支，而作者是通过随机方式来填充第五个字节，也就是说该利用程序可能会有1/256的可能会失败。
第二段数据(buffer2)主要是从一个Exp参数结构体中取出从xml文件中获取的rop链地址。
第三段数据的内容是shellcode，其内容被固定的放在Esteemaudit的数据段中。
之后，Esteemaudit程序会模拟SmartCard和被攻击端进行通讯，通讯的过程中将构造的exploit数据通过数据包发送到被攻击端，和漏洞相关的部分通信代码逻辑如下：
##### （4）漏洞原理分析
被攻击端漏洞发生在gpkcsp.dll的MyCPAcquireContext函数中，要想明确漏洞触发的原因先要理解和漏洞有关的两个buffer，第一个buffer是存在于gpkcsp.dll中的全局变量数组，我们把其命名为_pbRecvBuffer（地址0x080190d8）；第二个buffer是程序分配的用于存放CSP
context的结构体,我们称之为_TAG_Prov_Context（大小为0xB8），其数据结构如下所示。在这该数据结构中比较重要的位置有两个（红色标注的位置），一个是位于偏移0x18处的char数组keyset_name，通过逆向判断其长度不能超过128字节；另一个位于偏移0xa0处的HCRYPTKEY，这个位置稍后会被覆盖并导致程序流程被劫持。
    typedef struct _TAG_Prov_Context
    {
        HProvider _0000;//+0000
        SCARDHANDLE hCard;//+0004
        DWORD dwCspFlags;//+0008
        int _000C;//+000C;//index?
        int _0010;
        int _0014;
        char keyset_name[128];//+0x18//"Gemplus GemSAFE Card CSP Default Container"
        char _0098[4];//
        HCRYPTKEY _009C;//+9C
        HCRYPTKEY _00A0;//+A0//g_buffer+4;//destrokey(_0xA0);
        int _00A4;
        int _00A8;
        int _00AC;
        int _00B0;
        int _00B4;
    }TAG_Prov_Context;//sizeof=0xB8
MyCPAcquireContext在一开始的时候会对HCRYPTKEY置0。
接着，程序读取Esteemaudit发送来的buffer1然后将buffer1的数据拷贝到全局变量_pbRecvBuffer中。
上图中红色的数据是这个全局变量的_pbRecvBuffer