and ∗ denotes other (implementation-dependent) information.
Crucially, txPour reveals only one currency value, the public
value vpub (which may be zero); it does not reveal the payment
addresses or values of the old or new coins.
2
1
2
2
Verifying transactions.
checks the validity of a transaction:
The algorithm VerifyTransaction
VerifyTransaction
• INPUTS:
– public parameters pp
– a (mint or pour) transaction tx
– the current ledger L
• OUTPUTS: bit b, equals 1 iff the transaction is valid
Both mint and pour transactions must be veriﬁed before being
considered well-formed. In practice, transactions can be veriﬁed
by the nodes in the distributed system maintaining the ledger,
as well as by users who rely on these transactions.
Receiving coins. The algorithm Receive scans the ledger and
retrieves unspent coins paid to a particular user address:
Receive
• INPUTS:
– recipient address key pair (addrpk, addrsk)
– the current ledger L
• OUTPUTS: set of (unspent) received coins
When a user with address key pair (addrpk, addrsk) wishes to
receive payments sent to addrpk, he uses the Receive algorithm
to scan the ledger. For each payment to addrpk appearing in the
ledger, Receive outputs the corresponding coins whose serial
numbers do not appear on the ledger L. Coins received in
this way may be spent, just like minted coins, using the Pour
algorithm. (We only require Receive to detect coins paid to
addrpk via the Pour algorithm and not also detect coins minted
by the user himself.)
Next, we describe completeness (Section III-C) and security
(Section III-D).
C. Completeness
Completeness of a DAP scheme requires that unspent coins
can be spent. More precisely, consider a ledger sampler S
outputting a ledger L. If c1 and c2 are two coins whose coin
commitments appear in (valid) transactions on L, but their
serial numbers do not appear in L, then c1 and c2 can be
spent using Pour. Namely, running Pour results in a pour
transaction txPour that VerifyTransaction accepts, and the new
coins can be received by the intended recipients (by using
Receive); moreover, txPour correctly records the intended vpub
and transaction string info. This property is formalized via an
incompleteness experiment INCOMP.
Deﬁnition III.1. A DAP scheme Π = (Setup, CreateAddress,
Mint, Pour, VerifyTransaction, Receive) is complete if no
polynomial-size ledger sampler S wins INCOMP with more
than negligible probability.
D. Security
Security of a DAP scheme is characterized by three prop-
erties, which we call ledger indistinguishability, transaction
non-malleability, and balance.
Deﬁnition III.2. A DAP scheme Π = (Setup, CreateAddress,
Mint, Pour, VerifyTransaction, Receive) is secure if it satisﬁes
ledger indistinguishability, transaction non-malleability, and
balance.
Below, we provide an informal overview of each property,
and defer formal deﬁnitions to the extended version of this
paper [26].
Each property is formalized as a game between an adversary
A and a challenger C. In each game, the behavior of honest
parties is realized via a DAP scheme oracle ODAP, which
maintains a ledger L and provides an interface for executing
CreateAddress, Mint, Pour and Receive algorithms for honest
parties. To elicit behavior from honest parties, A passes a query
to C, which (after sanity checks) proxies the query to ODAP.
For each query that requests an honest party to perform an
action, A speciﬁes identities of previous transactions and the
input values, and learns the resulting transaction, but not any of
the secrets or trapdoors involved in producing that transaction.
The oracle ODAP also provides an Insert query that allows A
to directly add aribtrary transactions to the ledger L.
466
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
1
0
1
Ledger indistinguishability.
This property captures the
requirement that the ledger reveals no new information to
the adversary beyond the publicly-revealed information (values
of minted coins, public values, information strings, total number
of transactions, etc.), even when the adversary can adaptively
induce honest parties to perform DAP operations of his choice.
That is, no bounded adversary A can distinguish between two
ledgers L0 and L1, constructed by A using queries to two
DAP scheme oracles, when the queries to the two oracles are
publicly consistent: they have matching type and are identical
in terms of publicly-revealed information and the information
related to addresses controlled by A.
0
and ODAP
Ledger indistinguishability is formalized by an experiment
L-IND that proceeds as follows. First, a challenger samples a
random bit b and initializes two DAP scheme oracles ODAP
and ODAP
, maintaining ledgers L0 and L1. Throughout, the
challenger allows A to issue queries to ODAP
, thus
controlling the behavior of honest parties on L0 and L1. The
challenger provides the adversary with the view of both ledgers,
but in randomized order: LLeft := Lb and LRight := L1−b. The
adversary’s goal is to distinguish whether the view he sees
corresponds to (LLeft, LRight) = (L0, L1), i.e. b = 0, or to
(LLeft, LRight) = (L1, L0), i.e. b = 1.
At each round of the experiment, the adversary issues queries
in pairs Q, Q(cid:48) of matching query type. If the query type is
CreateAddress, then the same address is generated at both
oracles. If it is to Mint, Pour or Receive, then Q is forwarded
to L0 and Q(cid:48) to L1; for Insert queries, query Q is forwarded
to LLeft and Q(cid:48) is forwarded to LRight. The adversary’s queries
are restricted in the sense that they must maintain the public
consistency of the two ledgers. For example, the public values
for Pour queries must be the same, as well as minted amounts
for Mint queries.
At the conclusion of the experiment, A outputs a guess b(cid:48),
and wins when b = b(cid:48). Ledger indistinguishability requires that
A wins L-IND with probability at most negligibly greater than
1/2.
Transaction non-malleability. This property requires that
no bounded adversary A can alter any of the data stored
within a (valid) pour transaction txPour. This transaction non-
malleability prevents malicious attackers from modifying others’
transactions before they are added to the ledger (e.g., by re-
targeting the Basecoin public output of a pour transaction).
Transaction non-malleability is formalized by an experiment
TR-NM, in which A adaptively interacts with a DAP scheme
oracle ODAP and then outputs a pour transaction tx∗. Letting
T denote the set of pour transactions returned by ODAP, and
L denote the ﬁnal ledger, A wins the game if there exists
tx ∈ T , such that (i) tx∗ (cid:54)= tx; (ii) tx∗ reveals a serial number
contained in tx; and (iii) both tx and tx∗ are valid with respect
to the ledger L(cid:48) containing all transactions preceding tx on L.
In other words, A wins the game if tx∗ manages to modify
some previous pour transaction to spend the same coin in a
different way.
Transaction non-malleability requires that A wins TR-NM
with only negligible probability. (Note that A can of course
produce valid pour transactions that are unrelated to those in T ;
the condition that tx∗ reveals a serial number of a previously-
spent coin captures non-malleability.)
Balance. This property requires that no bounded adversary
A can own more money than what he minted or received via
payments from others.
Balance is formalized by an experiment BAL, in which A
adaptively interacts with a DAP scheme oracle ODAP and then
outputs a set of coins Scoin. Letting Saddr be set of addresses
returned by CreateAddress queries (i.e., addresses of “honest”
users), A wins the game if the total value he can spend or
has spent (either as coins or Basecoin public outputs) is
greater than the value he has received or mined. That is, A
wins if vUnspent + vBasecoin + vA→ADDR > vMint + vADDR→A
where:
(i) vUnspent is the total value of unspent coins in Scoin;
(ii) vBasecoin is the total value of public outputs placed by A on
the ledger; (iii) vMint is the total value of A’s mint transactions;
(iv) vADDR→A is the total value of payments received by A
from addresses in Saddr; (v) vA→ADDR is the total value of
payments sent by A to addresses in Saddr.
Balance requires that A wins BAL with only negligible
probability.
IV. CONSTRUCTION OF A DECENTRALIZED ANONYMOUS
PAYMENT SCHEME
We show how to construct a DAP scheme (introduced
in Section III) using zk-SNARKs and other building blocks.
Later, in Section V, we give a concrete instantiation of this
construction.
A. Cryptographic building blocks
We ﬁrst introduce notation for the standard cryptographic
building blocks that we use. We assume familiarity with the
deﬁnitions of these building blocks; for more details, see, e.g.,
[27]. Throughout, λ denotes the security parameter.
Collision-resistant hashing. We use a collision-resistant hash
function CRH : {0, 1}∗ → {0, 1}O(λ).
Pseudorandom functions. We use a pseudorandom function
family PRF = {PRFx : {0, 1}∗ → {0, 1}O(λ)}x where x de-
notes the seed. From PRFx, we derive three “non-overlapping”
pseudorandom functions, chosen arbitrarily as PRFaddr
(z) :=
PRFx(00(cid:107)z) , PRFsn
x (z) := PRFx(01(cid:107)z) , PRFpk
x
x (z) :=
PRFx(10(cid:107)z). Furthermore, we assume that PRFsn is also
collision resistant, in the sense that it is infeasible to ﬁnd
(x, z) (cid:54)= (x(cid:48), z(cid:48)) such that PRFsn
Statistically-hiding commitments. We use a commitment
scheme COMM where the binding property holds computa-
tionally, while the hiding property holds statistically. It is
denoted {COMMx : {0, 1}∗ → {0, 1}O(λ)}x where x denotes
the commitment trapdoor. Namely, to reveal a commitment cm
to a value z, it sufﬁces to provide z and the trapdoor x; then
one can check that cm = COMMx(z).
One-time strongly-unforgeable digital signatures. We use a
digital signature scheme Sig = (Gsig,Ksig,Ssig,Vsig) that works
as follows.
x (z) = PRFsn
x(cid:48) (z(cid:48)).
467
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
• Gsig(1λ) → ppsig. Given a security parameter λ (presented
in unary), Gsig samples public parameters ppenc for the
encryption scheme.
• Ksig(ppsig) → (pksig, sksig). Given public parameters ppsig,
Ksig samples a public key and a secret key for a single user.
• Ssig(sksig, m) → σ. Given a secret key sksig and a message
m, Ssig signs m to obtain a signature σ.
• Vsig(pksig, m, σ) → b. Given a public key pksig, message m,
and signature σ, Vsig outputs b = 1 if the signature σ is valid
for message m; else it outputs b = 0.
The signature scheme Sig satisﬁes the security property of
one-time strong unforgeability against chosen-message attacks
(SUF-1CMA security).
Key-private public-key encryption. We use a public-key
encryption scheme Enc = (Genc,Kenc,Eenc,Denc) that works
as follows.
• Genc(1λ) → ppenc. Given a security parameter λ (presented
in unary), Genc samples public parameters ppenc for the
encryption scheme.
• Kenc(ppenc) → (pkenc, skenc). Given public parameters ppenc,
Kenc samples a public key and a secret key for a single user.
• Eenc(pkenc, m) → c. Given a public key pkenc and a message
m, Eenc encrypts m to obtain a ciphertext c.
• Denc(skenc, c) → m. Given a secret key skenc and a ciphertext
c, Denc decrypts c to produce a message m (or ⊥ if
decryption fails).
The encryption scheme Enc satisﬁes two security properties:
(i) ciphertext indistinguishability under chosen-ciphertext attack
(IND-CCA security); and (ii) key indistinguishability under
chosen-ciphertext attack (IK-CCA security). While the ﬁrst
property is standard, the second is less known; informally,
IK-CCA requires that ciphertexts cannot be linked to the public
key used to encrypt them, or to other ciphertexts encrypted
with the same public key. For deﬁnitions, we refer the reader
to [21].
B. zk-SNARKs for pouring coins
As outlined in Section I-B, our construction invokes a
zk-SNARK for a speciﬁc NP statement, POUR, which we now
deﬁne. We ﬁrst recall the context motivating POUR. When a
user u pours “old” coins cold
,
, cnew
1 , cold
2
a corresponding pour transaction
into new coins cnew
1
2
txPour = (rt, snold
1 , snold
2 , cmnew
1
, cmnew
2
, vpub, info,∗)
1 , cold
2
1 , snold
2
2 ; (iv) the revealed coin commitments cmnew
is generated. In our construction, we need to provide evidence in
“∗” that various conditions were respected by the pour operation.
Concretely, txPour should demonstrate that (i) u owns cold
2 ;
1 , cold
appear somewhere on the
(ii) coin commitments for cold
ledger; (iii) the revealed serial numbers snold
are of
cold
, cmnew
1 , cold
are of cnew
; (v) balance is preserved. Our construction
1
achieves this by including a zk-SNARK proof πPOUR for the
statement POUR which checks the above invariants (as well as
others needed for non-malleability).
The statement POUR. Concretely, the NP statement POUR
is deﬁned as follows.
, cnew
1
2
2
1 , snold
• Instances are of the form (cid:126)x = (rt, snold
, cmnew
,
vpub, hSig, h1, h2). Thus, an instance (cid:126)x speciﬁes a root rt for
a CRH-based Merkle tree (over the list of commitments so
far), the two serial numbers of the consumed coins, two coin
commitments for the two new coins, a public value, and
ﬁelds hSig, h1, h2 used for non-malleability.
2 , cmnew
• Witnesses are of the form (cid:126)a = (path1, path2, cold
1
2
, cnew
2
1
sk,2, cnew
i = (addrold
cold
i = (addrnew
cnew
i
pk,i, vold
pk,i, vnew
1 , cold
2 ,
) where, for each i ∈ {1, 2}:
, ρold
, ρnew
i ) ,
, cmnew
i
, rnew
, cmold
, rold
, sold
)
i
i
addrold
sk,1, addrold