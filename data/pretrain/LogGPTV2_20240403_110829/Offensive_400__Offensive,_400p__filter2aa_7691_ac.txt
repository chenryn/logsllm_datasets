    document.body.appendChild(iframe);
};
```
(To kod po deobfuskacji). Jak widać, po prostu tworzony jest iframe w który wstrzykiwane jest `depress-choose-opportunity-staircase.html`.
Co znajudje się pod tym adresem?
Mniej więcej taki kod:
```javascript
window['gWRqmBVp'] = '1';
function xWait(xT) {
    var date = new Date();
    var tmpDate = null;
    do {
        tmpDate = new Date();
    } while (tmpDate - date ';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '-->';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '';
    txt = txt + '-->';
    txt = txt + '';
    try {;
    } catch (e) {}
    document.getElementsByTagName("q")[2].innerHTML = txt;
}
xTrueA();
xWait(1200);
```
(To kod po deobfuskacji.  Jak widać, jest wstrzykiwany *kolejny* javascript. Znowu jakieś checki (które wyciąłem), a ostatecznie tworzony jest jakiś `` zawierający flasha.
Pobrałem więc tego flasha i zdekompilowałem. Najciekawszy fragment poniżej:
```actionscript
package tmctf {
    import flash.events.*;
    import flash.utils.*;
    import flash.display.*;
    public class Main extends Sprite {
        private var lIIl11l:Class;
        public function Main(){
            this.lIIl11l = Main_lIIl11l;
            super();
            if (stage){
                this.init();
            } else {
                addEventListener(Event.ADDED_TO_STAGE, this.init);
            };
        }
        private function init(_arg1:Event=null):void{
            var _local2:Object = LoaderInfo(this.root.loaderInfo).parameters.a;
            var _local3:Object = LoaderInfo(this.root.loaderInfo).parameters.b;
            var _local4:Object = LoaderInfo(this.root.loaderInfo).parameters.c;
            var _local5:Object = LoaderInfo(this.root.loaderInfo).parameters.d;
            var _local6:String = (((_local4.toString() + _local3.toString()) + _local5.toString()) + _local2.toString());
            var _local7:ByteArray = (new this.lIIl11l() as ByteArray);
            var _local8:ByteArray = lI11lI.l1l1lI(_local7, _local6);
            this.removeEventListener(Event.ADDED_TO_STAGE, this.init);
            var _local9 = "flash.display.Loader";
            var _local10:Class = (getDefinitionByName(_local9) as Class);
            var _local11:Loader = new (_local10)();
            _local11.loadBytes(_local8);
            addChild(_local11);
        }
    }
}//package tmctf 
package tmctf {
    import mx.core.*;
    public class Main_lIIl11l extends ByteArrayAsset {
    }
}//package tmctf 
package tmctf {
    import flash.utils.*;
    public class lI11lI {
        public static function l1I1lI(_arg1:int):String{
            var _local2 = "";
            if (_arg1 == 1){
                _local2 = "6l.6o3a3d63.B3.y6t263.e5s6";
            };
            if (_arg1 == 2){
                _local2 = "2a.7d6d6.C23h3i.34l6d6";
            };
            if (_arg1 == 3){
                _local2 = "2r4.e6m3.o4v63e3E4v6e3n5t3L6.i3s6t3.4e6n4e3r6";
            };
            if (_arg1 == 4){
                _local2 = "6w3.4r7..i4t6e4.B6y.3t43e5";
            };
            if (_arg1 == 5){
                _local2 = "6p6.3o6s4i6t4i6.o6n";
            };
            if (_arg1 == 8){
                _local2 = "6l2e6n6.g4t4.3h6";
            };
            if (_arg1 == 9){
                _local2 = "3c6h4a..36r34C6o6d34e6A.43t6";
            };
            return (_local2.replace(new RegExp("[(1)\\(2)\\(3)\\(4)\\(5)\\(6)\\(7)\\(8)\\(9)\\(0)\\.]", "g"), ""));
        }
        public static function l1l1lI(_arg1:ByteArray, _arg2:String):ByteArray{
            var _local9:int;
            var _local3:* = 0;
            var _local4:ByteArray = new ByteArray();
            var _local5:String = l1I1lI(4);
            var _local6:String = l1I1lI(5);
            var _local7:String = l1I1lI(8);
            var _local8:String = l1I1lI(9);
            _local3 = 0;
            while (_local3  (_arg2[_local7] - 1)){
                    _arg2 = (_arg2 + _arg2);
                };
                _local9 = (_arg1[_local3] ^ _arg2[_local8](_local3));
                var _local10 = _local4;
                _local10[_local5](_local9);
                _local3++;
            };
            _local4[_local6] = 0;
            return (_local4);
        }
    }
}//package tmctf
```
Tutaj obfuskacja poziom wyżej - np. stringi są obfuskowane (w prosty sposób - funkcja l1I1lI usuwa po prostu wszystkie cyfry ze stringa, czyli np. "6l.6o3a3d63.B3.y6t263.e5s6" zamienia się w "loadBytes"), oraz wywołania funkcji
i odwołania do atrybutów są obuskowane (np. xxx.length jest zamieniane na xxx['length'], a po połączeniu obu technik na xxx[l1I1lI("6l2e6n6.g4t4.3h6")].
Tak czy inaczej, ostatecznie główna pętla wykonuje xorowanie bloba wyciągniętego z resourców z kluczem (klucz jest równy getA() + getB() + getC() + getD() z poprzedniego stage).
Wykonałem to samo, i otrzymałem... kolejny swf. Zdekompilowałem i jego;
```actionscript
YOLO = function() {
    var vrsntk = "Akstoniskrov";
    var aeiVra = "saKrXVoiceda";
    var createTi = "wisTtentgaoemric";
    var mLtoonq = "qdnpokostELim";
    var getDate = "TettnagDotmeig";
    var getMonth = "ahsttnnogMotmeig";
    var toString = "BgknUimrPtXSloot";
    var length = "IhntAgenSeol";
    var fromCharCode = "teodSotCrrianhgCFmroormf";
    var eval = "Sloarvee";
    function Main()
    {
        var currDate = new Date();
        var someConst = 1862628783;
        var mnth = currDate[this.gs(getMonth)]();
        var dayy = currDate[this.gs(getDate)]();
        var modCurrMonth = 2;
        var modCurrDay = 30;
        var cheeeck = someConst[this.gs(toString)](2)[this.gs(length)] - 1;
        if(modCurrMonth * modCurrDay != cheeeck * 2)
        {
            console.log(modCurrMonth);
            console.log(modCurrDay);
            console.log(cheeeck * 2);
            console.log('nope');
            //return;
        }
        var arrWIthData = [122,109,126,44,104,109,120,109,49,46,66,93,98,(..........a lot of numbers.........),60,46,50,43,37,55];
        var resultxx = "";
        var getChrCode = this.gs(fromCharCode);
        var indexl = 0;
        while(indexl  0 / 2)
        {
        _loc2_ = _loc2_ + param1["charAt"](_loc3_ - 1);
        _loc3_ = _loc3_ - 2;
        }
        return _loc2_;
    }
    Main()
}
YOLO()
```
(Tutaj wszystko już po SPOREJ deobfuskacji - oryginalnie nie było żadnych czytelnych dla człowieka stringów, wszystkie były zaszyfrowane przy pomocy gs(). Dane były szyfrowane obecną datą, ale był na szczęście dodatkowy check - miesiąc * dzień był równy 60, co ograniczyło ilość dat do sprawdzenia do ledwo kilku. Dzięki temu mogłem ręcznie sprawdzić wszystkie, i otrzymałem kolejny stage.
```javasctipt
var data="NQn5pSETMmg6ysiZ7M7kImT1fb0cNrAV3cutq3Ht17idKv4......"
var key="nky";
var str=window.atob(data);
var s=[], j=0, x, res='';
for (var i=0; i');
```
![](flag.png)
(kod po minimalnej deobfuskacji). Miałem minimalny problem z uruchomieniem tego (pokazywało u mnie pustą stronę), ale na szcześćie kolega z drużyny wykonał ten kod i volia, otrzymaliśmy flagę.