cont_offset，那么这个代码就会发生整数的下溢，而num_rsp_handles在一定程度上我们可以控制，而且是可以控制它变成０，那么只要cont_offset不为０，这里就会发生整数下溢。发生下溢的结果给了rem_handles，而这个变量代表的是还需要发送的数据数。
在④中，如果rem_handles是发生了下溢的结果，由于它是uint16_t类型，那么它将变成一个很大的数，所以会走到 **pccb->cont_offset +=
cur_handles**;,cur_handles是一个固定的值，那么如果这个下溢的过程，发生很多次，pccb->cont_offset就会变得很大，那么在５处，就会有一个对rsp_handles数组的越界读的产生。
下面的操作可以让这个越界读发生：
１，发送一个不带cstate的包， 而且Maximu Attribute Byte字段设置的比较大。那么结果就是rem_handles =
num_rsp_handles，而由于max_replies比较大，所以 **num_rsp_handles**
会成为一个比较大的值。只要在④中保证rem_handles >
cur_handles，那么pccb->cont_offset就会成为一个非０值cur_handles。这一步是为了使得pccb->cont_offset成为一个非０值。
２，接收服务端的回应包，这个回应包里的cstate字段将会含有刚刚的pccb->cont_offset值，我们取得这个值。
３，发送一个带cstate的包，cont_offset指定为刚刚提取的值，而且设置Maximu Attribute
Byte字段为０。那么服务端收到这个包后，就会走到 **rem_handles = num_rsp_handles – cont_offset**
从而发生整数下溢，同时pccb->cont_offset又递增一个cur_handles大小。
４，重复２和３的过程，那么pccb->cont_offset将越来越大，从而在⑤出发生越界读，我们提取服务端返回的数据，就可以获得泄露的信息的内容。
**CVE-2017-0781**
现在我们到了BNEP服务。BNEP的协议格式，下面两张图可以说明的很清楚：
BlueDroid中BNEP服务对于接受到的数据包的处理也不复杂：
1,解析得到BNEP_TYPE，得到extension位。
2,检查连接状态，如果已经连接则后续可以处理非 **BNEP_FRAME_CONTROL**
的包，如果没有建立连接，则后续只处理BNEP_FRAME_CONTROL的包。
3,去BNEP_TYPE对应的处理函数进行处理。
4,对于BNEP_TYPE不是BNEP_FRAME_CONTROL而且有extension位的，还需要对extension的数据进行处理。
5,调用pan层的回调函数。
值得注意的是，BNEP连接真正建立起来，需要先处理一个合法的 **BNEP_FRAME_CONTROL** 数据包。
CVE-2017-0781正是连接还没建立起来，在处理 **BNEP_FRAME_CONTROL** 时所发生的问题：
    case BNEP_FRAME_CONTROL:
            ctrl_type = *p;
            p = bnep_process_control_packet (p_bcb, p, &rem_len, FALSE);
            if (ctrl_type == BNEP_SETUP_CONNECTION_REQUEST_MSG &&
                p_bcb->con_state != BNEP_STATE_CONNECTED &&
                extension_present && p && rem_len)
            {
                p_bcb->p_pending_data = (BT_HDR *)osi_malloc(rem_len);
                memcpy((UINT8 *)(p_bcb->p_pending_data + 1), p, rem_len);
                p_bcb->p_pending_data->len    = rem_len;
                p_bcb->p_pending_data->offset = 0;
            }
上述代码中，malloc了一个remlen的大小，这个是和收到的数据包的长度相关的。可是memcpy的时候，却是从 **pbcb->p_pending_data＋１**开始拷贝数据，那么这里会直接溢出一个 **sizeof(*(pbcb->p_pending_data))**大小的内容。这个大小是8.所以只要代码走到这，就会有一个8字节大小的堆溢出。而要走到这，只需要过那个if的判断条件，而这个if其实是对
**BNEP_SETUP_CONNECTION_REQUEST_MSG** 命令处理失败后的错误处理函数。那么只要发送一个错误的
**BNEP_SETUP_CONNECTION_REQUEST_MSG** 命令包，就可以进入到这段代码了触发堆溢出了。
所以我们得到poc的编写过程：
１，建立BNEP连接，这个和SDP类似，只是需要指定PSM为BNEP对应的0x000F。
２，发送一个BNEPTYPE为 **BNEP_FRAME_CONTROL** ，extension字段为１，ctrl_type为
**BNEP_SETUP_CONNECTION_REQUEST_MSG** 的错误的BNEP包：
**CVE-2017-0782**
这个也是由于BNEP协议引起的漏洞，首先它是个整数溢出，整数溢出导致的后果是堆溢出。 问题出在BNEP对extension字段的处理上：
    UINT8 *bnep_process_control_packet (tBNEP_CONN *p_bcb, UINT8 *p, UINT16 *rem_len, BOOLEAN is_ext)
    {
        UINT8       control_type;
        BOOLEAN     bad_pkt = FALSE;
        UINT16      len, ext_len = 0;
        if (is_ext)
        {
            ext_len = *p++; 【１】
            *rem_len = *rem_len - 1;
        }
        control_type = *p++;
        *rem_len = *rem_len - 1;
        switch (control_type)
        {
        ...
        default :
            bnep_send_command_not_understood (p_bcb, control_type);
            if (is_ext)
            {
                p += (ext_len - 1);
                *rem_len -= (ext_len - 1); 【２】
            }
            break;
        }
        if (bad_pkt)
        {
            BNEP_TRACE_ERROR ("BNEP - bad ctl pkt length: %d", *rem_len);
            *rem_len = 0;
            return NULL;
        }
        return p;
    }
上述代码中，【１】的ext_len从数据包中获得，没有长度的检查，可为任意值。而当control_type为一个非法值的时候，会走到【２】,那么这里就很有说法了，我们如果设置ext_len比较大，那么这里就会发生一个整数下溢。从而使得rem_len变成一个很大的uint16_t的值。这个值将会影响后续的处理：
        while (extension_present && p && rem_len)
        {
            ext_type = *p;
            extension_present = ext_type >> 7;
            ext_type &= 0x7F;
            ...
            p++;
            rem_len--;
            p = bnep_process_control_packet (p_bcb, p, &rem_len, TRUE); 【１】
        }
        p_buf->offset += p_buf->len - rem_len;  
        p_buf->len     = rem_len;  【２】
        ...
        if (bnep_cb.p_data_buf_cb)
        {
            (*bnep_cb.p_data_buf_cb)(p_bcb->handle, p_src_addr, p_dst_addr, protocol, p_buf,  fw_ext_present);  【３】
        }
      ...
            osi_free(p_buf);
        }
上面的代码中，【１】处将发生整数下溢出，使得rem_len成为一个很大的值（比如0xfffd），【２】处会将这个值赋值给p_buf->len。【３】处是回调函数处理这个p_buf，在BlueDroid中这个函数是
**pan_data_buf_ind_cb** ，这个函数会有一条路径调到 **bta_pan_data_buf_ind_cback** ，而在这个函数中：
    static void bta_pan_data_buf_ind_cback(UINT16 handle, BD_ADDR src, BD_ADDR dst, UINT16 protocol, BT_HDR *p_buf,
                                       BOOLEAN ext, BOOLEAN forward)
    {
        tBTA_PAN_SCB *p_scb;
        BT_HDR *p_new_buf;
        if (sizeof(tBTA_PAN_DATA_PARAMS) > p_buf->offset) {
            /* offset smaller than data structure in front of actual data */
            p_new_buf = (BT_HDR *)osi_malloc(PAN_BUF_SIZE);
            memcpy((UINT8 *)(p_new_buf + 1) + sizeof(tBTA_PAN_DATA_PARAMS),
                   (UINT8 *)(p_buf + 1) + p_buf->offset, p_buf->len);
            p_new_buf->len    = p_buf->len;
            p_new_buf->offset = sizeof(tBTA_PAN_DATA_PARAMS);
            osi_free(p_buf);
        } else {
        ...
    }
memcpy用到了我们传进来的pbuf，而 **pbuf- >len**是刚刚下溢之后的很大的值，所以主要保证
**tBTA_PAN_DATA_PARAMS** **> pbuf->offset**，这里就会发生一次很大字节的堆溢出。
代码首先要走到extension的处理，这个的前提是连接状态是BNEP_STATE_CONNECTED。而这个状态的建立，需要服务端先接收一个正确的
**BNEP_SETUP_CONNECTION_REQUEST_MSG**
请求包，同时要想pan_data_buf_ind_cb调用到bta_pan_data_buf_ind_cback产生堆溢出，需要在建立连接的时候指定UUID为
**UUID_SERV_CLASS_PANU** 可以阅读这两个函数来找到这样做的原因，这里就不再贴代码了。清楚这一点之后，我们就可以构造我们的poc了：
１，建立BNEP连接，这里只是建立起初步的连接，conn_state还不是 **BNEP_STATE_CONNECTED** ，这一步通过connect实现
２，发送一个正确的 **BNEP_SETUP_CONNECTION_REQUEST_MSG**
请求包，同时指定UUID为UUID_SERV_CLASS_PANU。这个包将是这样子：
3，发送一个extension字段可导致整数下溢的包，而且注意控制pbuf->offset变得比较小：
这样PoC就完成了。 **CVE-2017-0781** 和 **CVE-2017-0782** 导致了堆溢出，一般会使得
**com.android.bluetooth** 崩溃，但是这个进程崩溃系统不会有提醒，需要去logcat来找崩溃的日志。
**这是两个很有品质的堆溢出漏洞，结合前面的信息泄露漏洞，是完全可以转化为远程代码执行的。**
**0x03**
****
这篇分析到这里也就结束了，蓝牙出漏洞是个比较危险的事情，希望没有修补的能尽快修补，补丁链接如下：
[CVE-2017-1000250](https://git.kernel.org/pub/scm/bluetooth/bluez.git/commit/?id=9e009647b14e810e06626dde7f1bb9ea3c375d09)
[CVE-2017-1000251](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=e860d2c904d1a9f38a24eb44c9f34b8f915a6ea3)
[CVE-2017-0785](https://android.googlesource.com/platform/system/bt/+/226ea26684d4cd609a5b456d3d2cc762453c2d75)
[CVE-2017-0781](https://android.googlesource.com/platform/system/bt/+/c513a8ff5cfdcc62cc14da354beb1dd22e56be0e)
[CVE-2017-0782](https://android.googlesource.com/platform/system/bt/+/4e47f3db62bab524946c46efe04ed6a2b896b150)
确定自己是否有漏洞可以用我们提供的poc呀，关于蓝牙漏洞的研究，也希望能和各位多多交流。
**参考文档:**
****
1,
2,
3,
**0x04**
****
360Vulpecker Team: 隶属于360公司信息安全部，致力于保护公司所有Android
App及手机的安全，同时专注于移动安全研究，研究重点为安卓APP安全和安卓OEM手机安全。
团队定制了公司内部安卓产品安全开发规范，自主开发并维护了在线Android应用安全审计系统“360显危镜”，在大大提高工作效率的同时也为开发者提供了便捷的安全自测平台。同时研究发现了多个安卓系统上的通用型漏洞，如通用拒绝服务漏洞、“寄生兽”漏洞等，影响范围几乎包括市面上所有应用。
该团队高度活跃在谷歌、三星、华为等各大手机厂商的致谢名单中，挖掘的漏洞屡次获得CVE编号及致谢，在保证360产品安全的前提下，团队不断对外输出安全技术，为移动互联网安全贡献一份力量。