        /**
         * Examine 8 bits and check them against the mask to
         * see if any should be extracted
         * @param nextByte The byte to be examined
         * @param bitMask The bitmask to be applied
         */
        private void extract8Bits(int nextByte, int bitMask)
        {
            for(int i=0;i>>=1;
            }
        }
`addBit`方法,num是读取的像素值与相应bit的掩码相与后的结果，如果不为0，表示那个Bit为1，否则为0，extractBitPos相当于权值，如果为1，就加extractBitPos，然后extractBitPos右移一位，如果为0就不需要加，但每次extractBitPos都是需要右移一位的，如果extractBitPos还是大于1的，说明还没循环过8次，所以就return了，如果不大于1，说明8次了，那么重置extractBitPos为128，extractBytePos+1，新的字节extract[extractBytePos]的初始值为0。
        /**
         * Adds another bit to the extract
         * @param num Non-zero if adding a 1-bit
         */
        private void addBit(int num)
        {
            if(num!=0)
            {
               extract[extractBytePos]+=extractBitPos;
            }
            extractBitPos>>=1;
            if(extractBitPos>=1)
                return;
            extractBitPos=128;
            extractBytePos++;
            if(extractBytePos`按钮可以获取不同通道的图片，这里仅讨论Alpha7~0，Red7~0，Green7~0，Blue7~0，也就是每个通道。
在`StegSolve.java`中定位到按钮方法
        private void forwardButtonActionPerformed(ActionEvent evt) {
            if(bi == null) return;
            transform.forward();
            updateImage();
        }
        private void fileOpenActionPerformed(ActionEvent evt) {
            JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "jpeg", "gif", "bmp", "png");
            fileChooser.setFileFilter(filter);
            int rVal = fileChooser.showOpenDialog(this);
            System.setProperty("user.dir", fileChooser.getCurrentDirectory().getAbsolutePath());
            if(rVal == JFileChooser.APPROVE_OPTION)
            {
                sfile = fileChooser.getSelectedFile();
                try
                {
                    bi = ImageIO.read(sfile);
                    transform = new Transform(bi);
                    newImage();
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Failed to load file: " +e.toString());
                }
            }
        }
主要方法定位到了Transform类，打开文件时初始化，参数是图片的数据。
`Transform.java`
构造函数，originalImage记录原始图片数据，transform是转换后的数据，先初始化为原始图片数据，transNum的值对应不同的操作。
        /*
     * transforms
     * 0 - none
     * 1 - inversion
     * 2-9 - alpha planes
     * 10-17 - r planes
     * 18-25 - g planes
     * 26-33 - b planes
     * 34 full alpha
     * 35 full red
     * 36 full green
     * 37 full blue
     * 38 random color1
     * 39 random color2
     * 40 random color3
     * 41 gray bits
     */
        Transform(BufferedImage bi)
        {
            originalImage = bi;
            transform = originalImage;
            transNum=0;
        }
`forward`方法,，每次点击一次按钮，为加一次transNum,然后根据transNum的值去执行对应的操作。transNum值对应的操作除了注释中的说明，也可以从`getText`方法中获取，栗子：Alpha
plane 0对应的transNum值为9
        public void forward()
        {
            transNum++;
            if(transNum>MAXTRANS) transNum=0;
            calcTrans();
        }
        public String getText()
        {
            switch(transNum)
            {
                case 0:
                  return "Normal Image";
                case 1:
                  return "Colour Inversion (Xor)";
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                  return "Alpha plane " + (9 - transNum);
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                  return "Red plane " + (17 - transNum);
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                  return "Green plane " + (25 - transNum);
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                  return "Blue plane " + (33 - transNum);
                case 34:
                  return "Full alpha";
                case 35:
                  return "Full red";
                case 36:
                  return "Full green";
                case 37:
                  return "Full blue";
                case 38:
                  return "Random colour map 1";
                case 39:
                  return "Random colour map 2";
                case 40:
                  return "Random colour map 3";
                case 41:
                  return "Gray bits";
                default:
                  return "";
            }
        }
`calcTrans`方法，是一个switch方法，根据transNum的值调用方法，而我关心的不同通道获取的图片都是调用`transfrombit`方法，这里仅截取关心的
        private void calcTrans()
        {
            switch(transNum)
            {
                case 2:
                    transfrombit(31);
                    return;
                case 3:
                    transfrombit(30);
                    return;
                case 4:
                    transfrombit(29);
                    return;
                case 5:
                    transfrombit(28);
                    return;
                case 6:
                    transfrombit(27);
                    return;
                case 7:
                    transfrombit(26);
                    return;
                case 8:
                    transfrombit(25);
                    return;
                case 9:
                    transfrombit(24);
                    return;
                case 10:
                    transfrombit(23);
                    return;
                case 11:
                    transfrombit(22);
                    return;
                case 12:
                    transfrombit(21);
                    return;
                case 13:
                    transfrombit(20);
                    return;
                case 14:
                    transfrombit(19);
                    return;
                case 15:
                    transfrombit(18);
                    return;
                case 16:
                    transfrombit(17);
                    return;
                case 17:
                    transfrombit(16);
                    return;
                case 18:
                    transfrombit(15);
                    return;
                case 19:
                    transfrombit(14);
                    return;
                case 20:
                    transfrombit(13);
                    return;
                case 21:
                    transfrombit(12);
                    return;
                case 22:
                    transfrombit(11);
                    return;
                case 23:
                    transfrombit(10);
                    return;
                case 24:
                    transfrombit(9);
                    return;
                case 25:
                    transfrombit(8);
                    return;
                case 26:
                    transfrombit(7);
                    return;
                case 27:
                    transfrombit(6);
                    return;
                case 28:
                    transfrombit(5);
                    return;
                case 29:
                    transfrombit(4);
                    return;
                case 30:
                    transfrombit(3);
                    return;
                case 31:
                    transfrombit(2);
                    return;
                case 32:
                    transfrombit(1);
                    return;
                case 33:
                    transfrombit(0);
                    return;
                default: