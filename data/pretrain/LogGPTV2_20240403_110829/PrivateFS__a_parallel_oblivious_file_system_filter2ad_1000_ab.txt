experimentally; it is not obvious from the proofs what k is
necessary to obtain a given acceptable error rate on database
sized n. While the paper does prove that the probability of
failure is negligible in k, which is suﬃcient for a construction
existence proof, it is unclear what parameters can be chosen
for a practical implementation.
It has been observed elsewhere that this sort is signiﬁ-
cantly less eﬃcient than non-oblivious sorts. In particular,
[13] opts to use a standard sort on the client for those lev-
els that ﬁt in memory. PD-ORAM uses the asymptotically
equivalent merge sort, described in [20], that runs faster (re-
quiring log2 n sequential passes instead of 6k log2 n random
passes), but requires k
n ln n blocks of local client memory.
Further, recently it was shown [13] that without a careful
choice of Bloom ﬁlter parameters, the construction of [19] is
√
979other). This corresponds to the idea that it is unreasonable
to require clients to be aware and participate in every access
of each other. Moreover, this reﬂects the notion that the
adversary may have a complete view of the network.
The server is assumed throughout the bulk of this paper to
be honest but curious; however, Section 5.5 details inexpen-
sive adjustments that ensure “fork consistency” against even
an actively malicious adversary. Deﬁned in [9], fork con-
sistency acknowledges that a malicious server can present
diﬀerent versions of the database to diﬀerent clients, e.g.,
by not including updates from some of the other clients, but
guarantees that each “fork” view is self-consistent. More-
over, clients will detect this behavior if they ever communi-
cate with each other, or if the server ever attempts to rejoin
the views. The server is allowed to know which client issues
queries and when queries are issued. Implementations are
assumed to be free of timing vulnerabilities.
Communication between the ORAM Client and ORAM
Instance is assumed secured, e.g., with access controls on
IPC if they are on the same machine, or with SSL otherwise.
Communication between the ORAM Instance and Server is
also secured, e.g., with SSL.
Notation. c = number of parallel clients, i = a level within
a pyramid-based ORAM (for the smallest, “top” level, i = 0),
=c is
k = security parameter, n = database size, in blocks, ∼
equivalence modulo c.
4. PARALLEL QUERIES: A FIRST PASS
We now examine how to query existing ORAMs in par-
allel. The idea is to start with an ORAM on which it is
safe to run non-repeating unique queries (targeting diﬀerent
records in the underlying database) simultaneously, and to
build from this an ORAM which can also safely run colliding
queries (targeting the same underlying data record).
Consider the ORAM in [2]. We can augment it to handle
parallelism for sets of unique queries as follows.
• First, consider that as a client query searches across
the database for a particular item, its accesses are by
design indistinguishable from random.
• Second, by ORAM construction, diﬀerent unique queries
touch independent sets of database locations (because
their coin-ﬂips are independent).
• Now consider a set of multiple queries. Any of its re-
orderings results in accessing the same locations (pro-
vided each query gets the same coin ﬂips), albeit in a
diﬀerent order.
• Thus, intuitively, it is safe for clients to submit unique
the server sees an identical
queries simultaneously:
transcript independent of the queries.
The above privacy intuition only holds for non-repeating
unique sets of queries, of course. Clients simultaneously
querying the same item reveal this to the server, as their
accessed locations are substantially similar. This raises the
interesting question of how to guarantee query uniqueness
over arbitrary incoming client query patterns, without re-
vealing any inter-query collisions to the server.
Since the model requires the ORAM Instances to commu-
nicate only via the ORAM Server (capturing an adversary
with a complete view of the network), one idea is to have
Instances synchronize with each other via a server-hosted
Figure 1: Overview: ORAM Clients access data obliv-
iously through a simple ORAM Instance interface. The
stateless ORAM Instances use an (untrusted) ORAM
Server to store and retrieve the data obliviously.
susceptible to a leak via false positives in the Bloom ﬁlter
construction. Avoiding this leak requires a number of hash
functions proportional to the security parameter k. PD-
ORAM uses this construction, choosing k to bound the false
positive rate at 2
−64 per lookup.
3. MODEL
An ORAM setup consists of three types of parties: ORAM
Clients, who issue read and write queries, the limited-storage
ORAM Instances, who satisfy these queries for their client
while maintaining privacy, and the ORAM Server, who has
plentiful storage and is willing to help the ORAM Instances,
but is deemed untrustworthy (Figure 1).
The semantics used here correspond to existing ORAMs
(read and write of ﬁxed-size blocks is supported), with the
addition of concurrency and multiple “Instances”. Because
of the introduction of concurrency, it is also important to of-
fer an atomic record-level test-and-set instruction to ORAM
clients. Analogous to the CPU primitive, it updates a record
and returns its old value as a single atomic operation.
ORAM Client: a party who is authorized to issue reads
and writes to the ORAM Interface. Data is accessed in
“blocks”, a term used to denote a ﬁx sized record. “Block” is
used instead of “word” to convey target applications broader
than memory access (including ﬁle system and database out-
sourcing). Block IDs are arbitrary bit sequences. There are
multiple clients. Each ORAM client has access to the follow-
ing interface provided by a corresponding ORAM Instance:
read(id): val; write(id, val); test-and-set(id, val): val.
Accesses are serialized in the order the ORAM server re-
ceives them, which guarantees each client sees a serialized
view of its own requests. Among multiple clients, however,
the ordering is not guaranteed to correspond with the time-
ordering of incoming client requests.
ORAM Instance: a trusted party providing an ORAM
interface to ORAM Clients. Instances are stateless but have
access to the ORAM key (a secret shared among instances,
enabling access to the ORAM) and address of the server.
The Instance-to-Server protocol details are implementation-
speciﬁc (and typically optimized to the instance to minimize
network traﬃc and the number of round trips).
ORAM Server: the untrusted party providing the stor-
age backend, ﬁlling requests from the instance. The ORAM
Instances communicate only with the server (not with each
980data structure, in a way that prevents overlapping equiv-
alent queries while still guaranteeing indistinguishability of
all query patterns.
Strawman. The simplest approach to ensuring uniqueness
is for each new client to examine ongoing queries. Finding
an intersection, the client can then wait for ongoing queries
to complete before trying again. This is fundamentally inse-
cure, however, since the server learns when a query is being
repeated by a later client, since the later client waits for
the previous client. Further, correcting this by making all
clients wait for all previous queries to complete before initi-
ating their own query defeats the goal of parallelism.
Alphaman. To ﬁx these issues, the server will help clients
maintain an encrypted query log. Scanning this query log
allows an Instance to identify simultaneously ongoing re-
quests.
In the case of overlap, a random unique query is
executed instead. Once its query (real or random) is com-
pleted, the Instance reports its result back to the shared
cache/result log. It then searches in the log for the result of
the simultaneously ongoing overlapping query it had identi-
ﬁed (if any). This guarantees that in either case the Instance
gets to learn the result it seeks. We detail this below.
5. ABSTRACTIONS AND SOLUTIONS
We now outline the properties required of the underlying
ORAMs to allow parallelism and de-amortization, and then
provide constructions.
5.1 Parallelism Abstraction: “Period-based”
The main idea is to run queries simultaneously between
reshuﬄes. We are limited by the size of the top level: this
is the number of appends that can be performed before a
shuﬄe is required. Thus, we designate the maximum paral-
lelism and the size of the top level as c. Subsequent levels
will be sized c2i for this reason.
Definition 1. A period-based stateless ORAM In-
stance is an ORAM that performs a series of c queries be-
tween each shuﬄe. The transcripts of unique queries within
a period are independent of their order. Previously executed
queries are scanned from a server-stored cache sized c, trig-
gering a fake lookup instead.
Insight. The goal of this abstraction is to capture the
fact that the underlying ORAM already supports up to c
simultaneous unique queries. Speciﬁcally, the ORAM runs
in periods of queries over which the transcripts of unique
queries are independent (e.g., the original ORAM [2] satis-
ﬁes this). For a given period between reshuﬄing (which lasts
several queries, until the top level overﬂows), and choos-
ing the random number generator coin ﬂips for two unique
queries ahead of time, the transcript for each query is the
same regardless of the order they are run. The transcripts
of two identical queries, however, are inter-dependent, since
the ﬁrst-to-execute query necessarily searches farther down
in the database than the second query, as the item is moved
up to the top level once the ﬁrst query completes. The
second-to-execute query ﬁnds the item immediately at the
top, and thus the remainder of the search is random.
5.2 Parallelism Construction
The motivation behind this construction is to minimize
waiting, while guaranteeing serializability. The basic as-
ORAM Server
3
Append   j, read
Remote ID Log
Return ID and ID Log
4
6
ID-2
ID-1
ID
x1
x2
j
read
write
read
Append   j contents
Remote ID Log
(later)
Remote 
Results Log
x1 contents
Remote 
Results Log
(later)
ORAM Client
(cid:862)(cid:396)(cid:286)(cid:258)(cid:282)(cid:3)j(cid:863)
1
ORAM
Instance:
Query procedure
2
If j is already in 
the ID Log prior 
to ID, run a fake 
query instead.
queryORAM(): 
obtain result 
from ORAM
5
Scan for
result of j, in 
case it was 
obtained by an 
earlier client.
8
contents of block j
ORAM Client
Wait for results 
of queries 
through ID-1.
Return Results Log 
through ID-1
7
ID-2
ID-1
ID
x1
x2
j
read
write
read
x1 contents
j contents
encrypted values
Values we write
Figure 2: Parallel query protocol
sumption about the underlying ORAM is that its data struc-
ture supports simultaneous querying for unique blocks. Then,
the ultimate purpose of this protocol is to make sure all the
simultaneous queries request diﬀerent items. The challenge
is to juggle this uniqueness requirement (in the presence of
colliding queries from diﬀerent clients) with the requirement
that the server not learn any inter-query correlation.
One solution is to obliviously guarantee uniqueness of
queries using an append log in combination with a results
log. Clients will still need to wait for previous queries to
complete before outputting a result, but now there is no
requirement of blocking on other clients during query exe-
cution. This increases throughput signiﬁcantly (Figure 2):
1. The Client issues a query to its ORAM Instance.
2. The ORAM Instance generates the request, consisting
of the block ID, and a bit indicating whether this is
a read or a write/insert. Test-and-set operations are
identiﬁed as writes.
3. The request is encrypted and sent to the server.
4. The server appends this to the encrypted query log
(analogous to the top level), and returns a sequential
query ID, together with the query log, containing all
queries since the top level was last emptied.
5. The ORAM Instance interactively queries the under-
lying ORAM. If the query was already in the query log
(i.e., from another running client), the instance runs a
dummy query instead.
6. The ORAM Instance sends its result, encrypted, back
to the server, which appends it to the query result log.
7. The ORAM Instance reads the results log up to its
own entry (only interested in previous clients’ results),
in case the current query is accessing a block that was
previously read or written. This is the only step that
requires waiting for the earlier queries to complete.
9818. The ORAM Instance returns to the ORAM Client the
result (obtained from the database, or the result log).
ORAM Instances wait for the entire result log prior to that
query’s registered location to complete before returning to
the Client. However, in many cases the result will already be
obtained. If it is assumed that the adversary cannot observe
at what point the ORAM Instance returns to the client, then
it is safe for the ORAM Instance to return its value sooner.
Server network traﬃc over a period of c parallel client
queries is quadratic in c, since each Instance needs to be
aware of what each simultaneous Client is doing1. The num-
ber of parallel clients that optimizes total throughput is thus
a function of network bandwidth, latency, and database size.
On the one hand, for c clients, and a database of n blocks,
the sequence of log2(n) + 3 round trips per query imposes a
network-latency based maximum query throughput of
c
((log2 n) + 3)× latency
On the other hand, the cost of supporting multiple clients
(quadratic in c over c queries; linear in c per query), and the
online data transfer cost of log2 n blocks, impose a server
bandwidth based maximum throughput:
bandwidth
((c − 1)/2 + log2 n) × blocksize
online throughput limits vs latency and # clients; 100GB database; 100Mbps bandwidth
 60
0ms
10ms
25ms
50ms
75ms
c
e
s
/
s
e
i
r
e
u
Q
 50
 40
 30
 20
 10
 0
 10
 20
 30
 40
 50
 60
number of parallel clients
Figure 3: Upper bound on online query rate of a 100GB
database (blocksize = 104 and n = 107) and assuming a
100Mbit (12.5 MB/sec) network link. The plot is shown
for various network round trip times, from 0 ms through