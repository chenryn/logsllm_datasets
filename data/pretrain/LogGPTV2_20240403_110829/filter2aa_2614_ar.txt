犯罪，在法律合规、安全监管的高压态势下，保护API自身和API接口
数据的安全也是企业服务中必不可少的一项工作内容，如果因身份认证
技术这类的基础安全防护没有做好导致安全事件甚至社会事件的发生，
是任何一家企业或组织都不希望看到的。
7.1.2 身份认证技术包含的要素
身份认证技术作为安全领域一项基本的技术，提供用户身份的合法
性验证，主要通过以下几个要素来作为确认用户身份的方式。
1.What you know
What you know的含义即“你知道什么”，基于被认证方知道的特定
信息来验证身份，最常见的基于密码、暗语进行的身份认证即属于此
类，这也是最古老的身份认证方式。在影视作品《龙门飞甲》中有这样
的桥段：陈坤饰演的西厂督主雨化田为了让下属鉴别和自己长相相似的
大盗风里刀，给了一段密语作为接头暗号“龙门飞甲，便知真假”。殊不
知此暗号被李连杰饰演的赵怀安破解，反为所累，结果西厂内部自相残
杀。
这种身份认证方式最为古老也最为常见，通过上面的例子读者也能
看出其安全性很弱，很容易被破解。针对这种认证方式，采用密码字
典，使用自动化工具进行暴力破解是最为常见的，这也是很多互联网应
用中需要设置密码长度和密码复杂度等安全策略的原因，比如密码长度
不得低于8位，至少包含大小写、数字、特殊字符，连续尝试5次密码验
证失败锁定用户等。
2.What you have
What you have的含义是“你拥有什么”，基于被认证方所拥有的特定
物件来验证身份，最常见的利用数字证书、令牌卡进行身份认证就是属
于此类认证方式。在移动端应用还没有发展起来时，很多人如果去银行
办理电子银行业务都会拿到一个U盾，U盾又称为USBKey，其中存放着
用于用户身份识别的数字证书，它采用高强度信息加密，数字认证和数
字签名技术具有不可复制性，可以有效防范支付风险，确保客户网上支
付资金安全。后来随着移动互联网的兴起，考虑到使用的便捷性，U盾
逐渐被手机短信动态口令取代。
3.What you are
What you are的含义是“你是谁”，基于被认证方所拥有的生物特征
来验证身份，最常见的人脸识别、指纹解锁、语音打卡等业务场景就是
使用此类认证方式，这类认证方式的兴起源于人工智能技术的发展。理
论上来说，具备个人生物特征的身份认证标志具有不可仿冒性、唯一
性。比如人脸、虹膜、声纹，这些对每一个人体来说都是唯一的，同
时，生物特征识别在技术处理上有着它的复杂性，直到今天为止，想在
某个生物特征上做到1300% 的识别率仍然是很难的。生物特征的鉴别大
多是活体检测，要考虑不同的周边使用环境、人的情绪、检测距离的远
近等外部因素，这些因素都具有不确定性。
7.2 常见的身份认证技术
API技术的发展过程中，身份认证技术作为一项基础技术一直参与
其中，并且随着不同的API技术的发展，也产生了专门只在API领域使
用的身份认证技术。典型的如OpenID Connect、WS-Security、JWT等，
本书将在接下来的章节中详细为读者介绍各种不同的身份认证技术。
7.2.1 基于HTTP Basic基本认证
HTTP Basic基本认证是一种比较简单的API身份认证方式，是从动
态网页技术中迁移过来的，目前只有少量历史遗留应用仍在使用，这里
仅做简要介绍，让读者了解其认证基本工作原理。
HTTP Basic基本认证过程发生在客户端和服务器端之间，和普通的
Web应用通信过程不同，它不依赖于会话标识、Cookie，通常对于认证
凭据传输到服务器端有两种方式：URL字符串和HTTP 
Authorization标
头，下面分别来看看两个样例。
1.URL字符串形式的凭据传输
在这种形式的传输方式中，认证凭据（比如用户名和密码）拼接
到URL中，作为URL的一个组成部分发送到服务器端。使用此认证方式
的API中RESTful API居多。典型的格式如下所示：
此种形式下数据传输的认证凭据是明文，安全性较差，通常需要
依赖于HTTPS协议。
2.HTTP Authorization标头形式的凭据传输
客户端通过在请求报文中添加HTTP Authorization标头形式，向服
务器端发送认证凭据。HTTP Authorization标头的构建通常分为以下两
个步骤。
1）将“用户名:密码”的组合字符串进行Base编码。
2）将Authorization:Basic base64（用户名:密码）作为HTTP header
的一个字段发送给服务器端。
以用户名和密码的值分别为username、password为例，这种形式下
客户端请求报文格式如下：
在数据传输前，虽然针对认证凭据使用了Base64编码，但安全性仍
然较差，这是使用时需要注意的。如果传输的凭据是APPID和
APIKEY，则会和密码一样存在被泄露的风险。
7.2.2 基于API KEY签名认证
以API KEY签名认证作为身份认证技术的具体实现在API使用中出
现较早，通常被称为HMAC认证。到目前为止有很多互联网应用在使
用，这其中也包含国内头部互联网企业级应用。在API 
KEY签名认证
中，API的接口调用是融入API的生命周期中去管理，任何客户端想调
用API接口，都需要开发者先从API管理平台中申请接入密钥
AccessKey（简称AK）和加密密钥SecretKey（简称SK），然后在发起
客户端API请求时，将参数和AccessKey一起，使用SecretKey签名后发
送到服务器端。其工作原理如图7-1所示。
●图7-1 API KEY签名认证流程
1）API开发者首先提供注册资料，API管理者通过API管理平台申
请注册。
2）API管理者审核注册资料，如果审核通过，下发API调用所需要
的AccessKey和SecretKey。
3）API客户端在拿到AccessKey和SecretKey后，将请求参数与
AccessKey一起，使用SecretKey进行签名。
4）API客户端将请求参数和签名后的字符串一起发送API服务器
端，进行身份认证。
5）API服务器端接到请求后，解析请求参数，并采用与客户端相同
的签名算法生成新的签名，并将新的签名与接收到的客户端签名进行校
验。
6）API服务器端根据签名校验和AccessKey校验结果，返回身份认
证信息。
使用API KEY签名认证的好处是在API客户端和服务器端使用了相
同的签名算法，若传输过程中数据被篡改，则签名校验无法通过，有效
地解决了请求参数被篡改的安全隐患。在此基础上，API KEY签名认证
也产生了多个变种，比如添加时间戳和唯一随机数来防止重放攻击，将
请求参数和签名摘要一起加密再发送到服务器端。此类身份认证方式的
变种版本在技术上可以看作是OAuth协议的简化版，目前在很多企业级
的API开放平台中AK/SK认证方式被广泛使用，需要读者深入理解并掌
握。
7.2.3 基于SOAP消息头认证
使用消息头作为身份认证技术在以XML为数据传输格式的API接口
中较为常见，典型的如SOAP API中的Web Services服务安全规范WS-
Security。
在WS-Security安全规范中，详细地描述了如何将签名和加密头加入
SOAP消息，以及在消息中加入安全令牌、X.509认证证书或Kerberos票
据等，通过在应用层处理消息头信息，以保证端到端的API安全。其消
息语法格式如下所示：
WS-Security针对用户身份的验证方式主要有用户名/密码、通过
X.509证书、Kerberos。这里就用户名/密码身份认证方式向读者做简要
介绍，以说明消息头认证的基本工作原理。
以用户名/密码作为认证方式的SOAP消息比较简单，通常在
Security节点中添加认证凭据节点，UsernameToken节点内容如下代码
片段所示：
这种以明文节点进行数据传输的方式，其安全性较差，容易遭受攻
击，更安全的做法是添加一次性令牌、有效期，并对密码进行加密传
输。
与此方法类似的，在某些用户自定义的认证方式中，在通信协议的
业务节点中添加认证节点，来保证API接口身份认证的有效性。比如笔
者所经历的某业务支付详情查询，其SOAP 
API接口规范定义极为简
单，整个SOAP消息中请求和响应都只有一个参数，如下代码片段所
示：
因为此API平台需要对接不同的开发商或平台，所以只能在API规
范上进行统一的抽象定义，实际上每一个API调用中的“输入参数”和“响
应报文”都是XML格式，其中包含多个节点，由各个平台方去自由拓
展。这些自由拓展的节点中，自然也包含自定义的身份认证节点。如下
代码片段所示输入参数arg0的值：
其中password和一次性token的值均是使用SHA1加密后再使用
Base64编码的结果，这也是用户自定义API身份认证中常见的使用方
式。在WS-Security中，使用X.509证书作为认证方式也经常被使用，但
其与其他的认证方式并没有多大差异，仅仅是凭据传输的节点不同。比
如前文的用户名/密码作为认证方式中提及的UsernameToken节点，将被
BinarySecurityToken节点取代，其语法格式如下代码片段所示：
上段代码中加密部分内容即为X.509证书，在实际使用中，除了有
BinarySecurityToken节点外，还会有签名节点、加密算法节点等。
通过WS-Security中用户名/密码身份认证方式的介绍可以看出，基
于消息头的身份认证与基于HTTP Basic基本认证的区别在于HTTP Basic
基本认证是把凭据信息放在HTTP Header中传送到服务器端进行校验，
而基于消息头的身份认证是把凭据信息放在需要传送消息体的头部信息
中。两种身份认证方式的差异，更多的是凭据信息的位置不同，认证流
程基本类似。
7.2.4 基于Token系列认证
使用Token作为身份认证技术在API接口中最为常见，尤其是随着
API技术的兴起，涌现出一系列与Token相关的协议，其中以OAuth、
OpenID Connect、JWT（JSON Web Token）等技术为代表，并逐渐
成为潮流。在这些协议中，API身份认证以OpenID Connect为代表，下
面就为读者详细介绍OpenID Connect中涉及身份认证相关的技术。
1.OpenID Connect相关概念
OpenID Connect是基于OAuth 2.0规范拓展而来的身份认证协议，它
允许客户端使用简单的REST/JSON数据格式来实现流程交互，联合授权
服务器完成身份认证来确认最终用户身份。它允许所有的客户端类型，
包括基于浏览器的JavaScript、移动应用、IoT设备等，触发登录流程和
接收用户身份认证的结果。它在OAuth 
2.0规范的基础上拓展身份认证
层，既有利于技术系统的统一，又为API的基础安全防护提供了可操作
性。
为了兼容OAuth基础架构，OpenID Connect在OAuth的基础上添加
了两个关键组件，ID令牌（ID 
Token）和用户信息端点（UserInfo
Endpoint），来满足身份认证需求。为了更好地说明身份认证流程，
先通过OpenID Connect的核心文档来熟悉一下与流程相关的几个关键概
念。
（1）基本术语