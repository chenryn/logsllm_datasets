#### 说明
该系列文章主要是从ctf比赛入手，针对linux内核上的漏洞分析、挖掘与利用做讲解，本篇文章主要介绍内核漏洞利用所需的前置知识以及准备工作。
#### linux内核态与用户态的区别
以 **Intel CPU** 为例，按照权限级别划分，Intel把 `CPU指令集` 操作的权限由高到低划为4级：
  * **ring 0** （通常被称为内核态，cpu可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu也可以将自己从一个程序切换到另一个程序）
  * **ring 1** （保留）
  * **ring 2** （保留）
  * **ring 3** （通常被称为用户态，只能受限的访问内存，且不允许访问外围设备）
如下图所示：
越是内环则cpu的权限越高，并且内环可以随意访问外环的资源而外环则被禁止。
因此相比用户态的漏洞，内核态的漏洞具有更强的破坏力，拿到了内核的权限则基本上相当于控制了整个操作系统。
#### linux内核分析环境搭建
如果只是单纯的搭建内核的分析调试环境，一般来说需要自己手动下载对应版本的内核并进行编译，从[kernel官网](https://www.kernel.org/)下载即可，这里笔者下了4.19的内核版本，在编译安装过程中可能会遇到模块缺失的问题，在ubuntu上使用apt安装对应的模块即可，笔者本地手动安装的模块如下：
    sudo apt-get install libncurses5-dev 
    sudo apt-get install flex 
    sudo apt-get install bison
    sudo apt-get install libopenssl-dev
首先使用`make menuconfig`来生成默认的config文件，这是一个图形化的配置，可以在`kernel
hacking`选项中启用部分调试选项来更好的分析kernel上的漏洞。接着使用`make`命令来进行编译，当然这只是默认的编译选项，针对linux内核的编译非常多的选择，有兴趣的同学可以参考[Linux
Insides](https://xinqiu.gitbooks.io/linux-insides-cn/)这本书。
默认的编译会生成多个文件，包含了vmlinux、System.map、bzImage等文件，这里主要关注bzImage文件，因为它是可加载的内核镜像文件，x86架构的默认生成于`arch/x86/boot`目录。一般来说ctf题目都会给出对应的内核镜像文件、启动脚本、根文件系统等3个文件，通过这三个文件基本可以通过qemu加载起整个操作系统便于进行后续的分析、调试。
接下来需要编译文件系统了，这里使用busybox进行编译，下载好源码后，通过make menuconfig控制编译选项，在build
options选择static binary，接下来执行`make
install`可在当前目录生成一个_install目录，保存着编译后的文件，之后通过下面的脚本对系统运行时所需内容进行初始化，需在`_install`目录下进行
    #!/bin/sh
    mkdir -pv {bin,sbin,etc,proc,sys,usr/{bin,sbin}}
    echo """#!/bin/sh
    mount -t proc none /proc
    mount -t sysfs none /sys
    mount -t debugfs none /sys/kernel/debug
    mkdir /tmp
    mount -t tmpfs none /tmp
    mdev -s 
    exec /bin/sh""">>init
    chmod +x init
接着切换到`_install`目录并使用压缩指令`find . | cpio -o --format=newc >
../rootfs.cpio`对_install目录下的所有内容进行打包，这样就可以通过`bzImage`以及`rootfs.cpio`两个文件使用qemu将整个内核运行起来。运行命令如下：
    qemu-system-x86_64 -kernel ./bzImage -initrd ./rootfs.cpio -s -append "nokaslr"
这样一个简单的linux系统就运行起来了，通过-s 参数可以让gdb通过远程网络连接的方式对内核进行调试，break后gdb中断如下：
，此时已经可以对任意包含符号的函数下断点了，为了进行初步测试，这里在`new_sync_read`函数下断点，当有用户输入命令后则会触发，如下：
这样一个基础的内核调试分析环境就已经搭建起来了。
### 如何在内核环境中进行提权
#### 基本概念
**用户**  
对于支持多任务的 Linux 系统来说，用户就是获取资源的凭证，本质上是其所划分权限的归属。
**权限**  
权限用来控制用户对计算机资源(CPU、内存、文件等)的访问。
**进程**  
进程是任何支持多道程序设计的操作系统中的基本概念。通常把进程定义为程序执行时的一个实例。实际上，是进程在帮助我们完成各种任务。用户执行的操作其实是带有用户身份信息的进程执行的操作。
**进程权限**  
既然是进程在为用户执行具体的操作，那么当用户要访问系统的资源时就必须给进程赋予权限。也就是说进程必须携带发起这个进程的用户的身份信息才能够进行合法的操作。
#### 内核结构
内核涉及到进程和程序的所有算法都围绕一个名为`task_struct`的数据结构建立（4.19中该结构有600多行，有兴趣的读者自行参考），对于Linux内核把所有进程的进程描述符`task_struct`数据结构链成一个单链表，该数据结构定义在`include/sched.h`中，部分结构如下：（参考
这里只关注进程pid以及权限控制cred结构。
pid类型定义主要在`include/linux/pid.h`中，4.19中包含如下：
    enum pid_type
    {
        PIDTYPE_PID,
        PIDTYPE_TGID,
        PIDTYPE_PGID,
        PIDTYPE_SID,
        PIDTYPE_MAX,
    };
可使用如下命令查看：
    admins@admins-virtual-machine:~/kernel/linux-4.19$ ps -T -eo tid,pid,pgid,tgid,sid,comm
       TID    PID   PGID   TGID    SID COMMAND
         1      1      1      1      1 systemd
         2      2      0      2      0 kthreadd
         3      3      0      3      0 rcu_gp
         4      4      0      4      0 rcu_par_gp
         6      6      0      6      0 kworker/0:0H-kb
         8      8      0      8      0 mm_percpu_wq
         9      9      0      9      0 ksoftirqd/0
        10     10      0     10      0 rcu_sched
        11     11      0     11      0 rcu_bh
        12     12      0     12      0 migration/0
在利用gdb进行远程调试时，为了能够拿到当前进程的`task_struct`结构，我们需要获取当前进程的pid，同时获取`init_task`这个内核全局变量，它保存着内核启动的初始任务的`task_strcut`结构体地址，而`task_struct`结构体中保存着一个循环链表`tasks`用来追踪所有的进程`task_struct`结构，因此我们可以遍历所有的`task_struct`并通过对比`pid`的值来判断是否是我们自身的进程，可以使用如下脚本：
    # Helper function to find a task given a PID or the
    # address of a task_struct.
    # The result is set into $t
    define find_task
      if ((unsigned)$arg0 > (unsigned)&_end)
        set $t=(struct task_struct *)$arg0
      else
        set $t=&init_task
        if (init_task.pid != (unsigned)$arg0)
          find_next_task $t
          while (&init_task!=$t && $t->pid != (unsigned)$arg0)
            find_next_task $t
          end
          if ($t == &init_task)
            printf "Couldn't find task; using init_task\n"
          end
        end
      end
      p $t
      p *(struct task_struct*)$t
      p *(const struct cred*)$t->cred
    end
    define find_next_task
      # Given a task address, find the next task in the linked list
      set $t = (struct task_struct *)$arg0
      set $offset=( (char *)&$t->tasks - (char *)$t)
      set $t=(struct task_struct *)( (char *)$t->tasks.next- (char *)$offset)
    end
执行`find_task pid`后即可查看对应进程的`task_struct`结构体内容以及其中的`cred`内容，截取部分如下：
    $5 = {
      usage = {
        counter = 0x2
      }, 
      uid = {
        val = 0x0
      }, 
      gid = {
        val = 0x0
      }, 
      suid = {
        val = 0x0
      }, 
      sgid = {
        val = 0x0
      }, 
      euid = {
        val = 0x0
      }, 
      egid = {
        val = 0x0
      }, 
      fsuid = {
        val = 0x0
      }, 
      fsgid = {
        val = 0x0
      }, 
      securebits = 0x0, 
      cap_inheritable = {
        cap = {0x0, 0x0}
      }, 
      cap_permitted = {
        cap = {0xffffffff, 0x3f}
      }, 
      cap_effective = {
        cap = {0xffffffff, 0x3f}
      }, 
      cap_bset = {
        cap = {0xffffffff, 0x3f}
      }, 
      cap_ambient = {
        cap = {0x0, 0x0}
      }, 
      jit_keyring = 0x0, 
      session_keyring = 0x0 , 
      process_keyring = 0x0 , 
      thread_keyring = 0x0 , 
      request_key_auth = 0x0 , 
      security = 0xffff88000714b6a0, 
      user = 0xffffffff82653f40 , 
      user_ns = 0xffffffff82653fe0 , 
      group_info = 0xffffffff8265b3c8 , 
      rcu = {
        next = 0x0 , 
        func = 0x0 
      }
    }
    $6 = (struct task_struct *) 0xffff880006575700
当然调试时我们可以通过这个方式比较快速的获取对应进程的`task_struct`结构，在编写shellcode时一般通过寄存器的值或者直接调用相关函数来获取，这里可以参考这本书提到的两种方式，分别利用ESP或者GS寄存器来获取当前进程的`task_struct`结构。
    register unsigned long current_stack_pointer asm("esp")
    static inline struct thread_info *current_thread_info(void)
    {
    return (struct thread_info *)(current_stack_pointer & ~(THREAD_SIZE - 1)); 
    }
    static __always_inline struct task_struct * get_current(void)
    {
    return current_thread_info()->task;
    }
    struct thread_info {
    struct task_struct *task; /* main task structure */
    struct exec_domain *exec_domain; /* execution domain */
    unsigned long flags; /* low level flags */
    __u32 status; /* thread synchronousflags */
    … }