cascade when N is small. Assume that number Gk is represented
in b-radix system. Let (gk0
α=1 be a sequence with exponents
generated from (8). The number Nb ≈ N · b · ln c is determined
by probability that in the sequence of b· ln c random numbers there
would be no element giving modulo b a ﬁxed value. Easy calcula-
tions show that this probability is less than 1
c .
i,α )Nb
In order to encode Gk server i sorts elements gk0
As a result the next mix-server can take the sequence of onions
(5) and sort them according to the ﬁrst coordinate, then it might
read Gk.
In case of pairs of onions (1) the ﬁrst components in
a pair might by produced by two consecutive exponents from (8).
some of them so that the jth value gk0
ments has the property that gk0
digit of Gk.
i,α and chooses
i,α on the list of chosen ele-
i,α mod b is equal to the jth b-radix
Then a piece of Gk will be transmitted by the product of these
components. The product might be tuned by incrementing the ﬁrst
exponent.
4.3 Taking Advantage of the Permutation
First we refer to the PaV cascade. Without loss of generality
we assume in this subsection that the batch is composed of single
onions (5). Note that if the techniques described above are applied,
then server i + 1 can decode each Si,j from its ciphertext (5). In-
deed, server i + 1 knows the exponents used in (5). This provides
new perspectives for an attack.
The technique below is based on encoding a message of choice
in the ordering of the parts Si,j. Let µ denote the permutation-
message to be send. Accordingly, the message space is N ! (a de-
tailed method of coding numbers into permutations and vice versa
can be found in [15]). After opening all input onions Oi−1,j the
ith server performs operation (4) for consecutive Si−1,j and ran-
j=1. Then server i reorders
dom si,j obtaining a sequence (Si,j)N
the elements lexicographically: (Si,σ(j))N
j=1. The message µ will
be transferred by arranging the order of content of onions for which
the server i + 1 will consecutively ﬁnd exponents from generator
(8). Hence the consecutively opened onions by server i+1 will give
j=1. Comparing the sequence with lexico-
a sequence (Si,µ(σ(j)))N
j=1 the server will read the message.
graphically ordered (Si,σ(j))N
Therefore to accomplish the task server i applies the assignment
(9) of k0
i,j for exponents Ki−1,(µ◦σ)(j), j = 1, 2, . . . , N, instead
of for exponents Ki−1,j. Note that the transferred permutation µ
is independent of the permutation of the output onions.
In fact,
the output batch should be ordered lexicographically, otherwise the
output permutation treated as a permutation of the lexicographic
order may became a source of the next leakage.
Suppose now, that in the general purpose cascade the output
batch is ordered lexicographically, but assume that a kleptographic
channel relying on the freedom of choice of ki,j still exists. Let
permutation µ be applied to the input batch, and ki,j from (8),
for j = 1, 2, . . . , N, to consecutive results of that permutation
(similarly like in the PaV cascade). However, Mallet encounters
a slightly more difﬁcult task than the (i + 1)th server in PaV proto-
col, because for the ki,1 he must try all N input onions of the server
i (i.e. he must perform N multiplications by gki,1, and then some
incrementations of all exponents in modiﬁed ﬁrst coordinates, un-
til he ﬁnds the input onion for that exponent), for ki,2 he must try
N − 1 input onions, and so on (N · (N − 1)/2 in total). Never-
theless, we see that if some kleptographic channel exists, then it is
quite easy to mount another one.
4.4 Skipping the Proper Elements γj
Another technique is to take advantage of the fact that the choice
of N exponents for the Coupon Collector’s Problem does not have
to be unique. In particular, let the ith server choose not the ﬁrst
appropriate ki,j satisfying the condition (7), but skips some number
of such numbers. How many of them are skipped is an information
that will be available to the next server, and can therefore be the
next “digit” of a secret transmitted.
5. UNKNOWN NEIGHBORS
The attacks on the PaV protocol, which are discussed above, are
based on the assumption that each mix server in the cascade knows
its neighbors, i.e. knows the neighbors’ public keys. The assump-
tion is fulﬁlled when the cascade is deployed by the manufacturer
himself, or when the whole cascade is installed and supervised by
some dishonest entity.
61
Another, inevitable weakness of the above attacks on PaV is that
after retrieving the private key from server i− 1 we can reconstruct
all exponents from its input batch, thus we have an evidence that all
previous servers are contaminated. However, as long as we have no
access to the further servers, their input batches are well protected,
and we cannot be sure whether they are contaminated as well.
Both above remarks does not refer to a general purpose cascade,
where each server has a public key of the manufacturer.
In order to overcome the ﬁrst weakness, suppose that the manu-
facturer Mallet cannot predict the sequence into which the servers
will be arranged, or even he cannot predict what servers from some
set are to be taken to build a cascade. Thus we have a kind of
an ad-hoc network, in which messages, i.e. batches, goes into one
direction only. Moreover, according to the assumption that batches
are published after mixing, each sender receives no feedback dur-
ing the mixing whether the message was correctly decoded.
Below we adapt the solution from [14] designed for ad-hoc net-
works. Each server is equipped by the manufacturer with a master
key Z. Instead of zi,k for (8) the sender takes Z := Z(α), where
Z(α) stands for key Z with a ﬂipped bit on position α. For each
consecutive batch the bit position α is freshly chosen by the sender.
After producing all k0
i,j for j = 1, . . . , N the sender changes Z
again:
Z := F (Z)
(11)
for F being a ﬁxed, collision resistant hash function. Thus the
sender destroys the value of Z used in (8). The receiver, having the
previous Z, tries all possible α, and for one of them the right k0
i,1
is obtained, and then the other exponents k0
i,j. Having the right α
the receiver also changes Z according to (11).
As we see, each server would get a pair of evolving keys Z,
one key for input batches (as a receiver), and the other for output
batches (as a sender). Mallet would be a receiver for the last server.
Keys Z between different servers would evolve in different way,
and if one server would be opened after sending the ﬁrst batch,
keys in other pairs would not be compromised.
To propagate the changes even faster, each batch might be di-
vided into parts, and for each part the next step in the evolution of
Z would be performed.
Obviously, if the order of servers is changed for each new batch,
then only the ﬁrst one might be correctly encoded for Mallet. On
the other hand, changing the order during mixing is not a subroutine
of the versions of PaV known to the authors, and it seems to be
troublesome: less than λ batches could be present in the cascade at
the same time.
6. CONCLUSIONS
We have presented kleptographic attacks on versions of Prêt à
Voter scheme. However, most of the attacks might be generalized
to other cascades of probabilistic mix-servers.
Depicted techniques lead to important conclusion concerning de-
sign of distributed systems:
to minimize possibility of a klepto-
graphic attack on such a system, diversiﬁcation of software sources
is needed. Different manufacturers should provide appropriate soft-
ware for different servers. Although such a redundancy rises costs
and is less convenient to system installation and administration, it
radically decreases possibility of a (kleptographic) fraud.
Another, general countermeasure against kleptography is to use
deterministic procedures that are both veriﬁable and provide un-
predictable results for an external observer (cf. [2, Sect. V]. Such
features are delivered for instance by use of deterministic signature
schemes such as RSA.
In Prêt à Voter scheme the exponents ki,j used by the ith mix
server for re-encryption might be for example determined as
ki,j = R`H(sigαi
(h(Oi−1,j)))´
for sig being a deterministic signature scheme and αi being the
private signing key of the ith mix server. Moreover, the input and
output batch should be sorted. Then in the RPC phase half of the
(h(Oi−1,j)) would be revealed by the mix i, their
signatures sigαi
validity would be veriﬁed, as well as correctness of the exponents
ki,j. As we have already mentioned in the Introduction, the above
solution is more ﬂexible than the one from [5]. Moreover, in [5]
challenges for a mix server are taken from its output batch (cf.
paragraph “Non-interactive proof of tamper-evidence”), hence are
known in advance to the mix server, that is before the server pub-
lishes commitments W (k). Consequently, the server might cheat
and calculate the commitments in an advantageous way.
7. REFERENCES
[1] M. R. Best. Perfect codes hardly exist. IEEE Trans. Inform.
Theory, 29(3):349–351, 1983.
[2] P. Borze¸cki, J. Kabarowski, P. Kubiak, M. Kutyłowski, and
F. Zagórski. Kleptographic weaknesses in Benaloh-Tuinstra
protocol. In: Proceedings of the International Conference on
Systems and Networks Communications, pages 26–31. IEEE
Comp. Soc., Nov. 2006.
[3] Certicom Inc. The Certicom ECC challenge. [online].
Available from: http://www.certicom.com/
index.php?action=ecc,ecc_challenge.
[4] D. Chaum. Secret-ballot receipts: True voter-veriﬁable
elections. IEEE Security and Privacy Magazine, 2(1):38–47,
Jan./Feb. 2004.
[5] J. Y. Choi, P. Golle, and M. Jakobsson. Auditable privacy:
On tamper-evident mix networks. In: Financial
Cryptography, LNCS 4107, pages 126–141. Springer, 2006.
[6] W. Difﬁe and M. E. Hellman. New directions in
cryptography. IEEE Trans. Inform. Theory, 22(6):644–654,
Nov. 1976.
[7] W. M. Duckworth II. Codes, Designs, and Distance. PhD
thesis, University of North Carolina at Chapel Hill, 1998.
[8] I. Dumer, D. Micciancio, and M. Sudan. Hardness of
approximating the minimum distance of a linear code.
Electronic Colloquium on Computational Complexity
(ECCC), 6(29), 1999.
[9] M. Gogolewski, M. Klonowski, P. Kubiak, M. Kutyłowski,
A. Lauks, and F. Zagórski. Kleptographic attacks on e-voting
schemes. In: ETRICS, LNCS 3995, pages 494–508. Springer,
2006.
[10] P. Golle and M. Jakobsson. Reusable anonymous return
channels. In: WPES, pages 94–100. ACM, 2003.
[11] S. Har-Peled. Class notes for randomized algorithms, Dec.
2005.
[12] M. Jakobsson and A. Juels. Mix and match: Secure function
evaluation via ciphertexts. In: ASIACRYPT, LNCS 1976,
pages 162–177. Springer, 2000.
[13] M. Jakobsson, A. Juels, and R. L. Rivest. Making mix nets
robust for electronic voting by randomized partial checking.
In: USENIX Security Symposium, pages 339–353. USENIX,
2002.
[14] M. Klonowski, M. Kutyłowski, M. Ren, and K. Rybarczyk.
Forward-secure key evolution protocol in wireless sensor
networks. Nov. 2006. Manuscript.
62
[15] D. E. Knuth. The Art of Computer Programming:
Seminumerical Algorithms., volume 2. Addison-Wesley,
Reading, Massachusetts, 3rd edition, Nov. 1998.
[16] D. Lundin, H. Treharne, P. Y. Ryan, S. Schneider, and
J. Heather. Distributed creation of the ballot form in Prêt à
Voter using an element of visual encryption. IAVoSS
Workshop On Trustworthy Elections (WOTE 2006).
[17] S. McKinley. The Hamming codes and Delsarte’s linear
programming bound. Master’s thesis, Portland State
University, May 2003.
[18] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone.
Handbook of applied cryptography. CRC Press, Boca Raton,
Florida, 1996.
[19] B. Möller. A public-key encryption scheme with
pseudo-random ciphertexts. In: ESORICS, LNCS 3193,
pages 335–351. Springer, 2004.
[20] M. Navon and A. Samorodnitsky. On Delsarte’s linear
programming bounds for binary codes. In: FOCS, pages
327–338. IEEE Comp. Soc., 2005.
[21] C. Neff. Veriﬁable mixing (shufﬂing) of ElGamal pairs., Apr.
2004.
[22] P. Ryan. Socio-technical trade-offs in cryptographic voting
schemes. Workshop on Electronic Voting and e-Government
in the UK, 27th–28th Feb. 2006.
[23] P. Y. Ryan and T. Peacock. Prêt à Voter: a systems
perspective. Technical Report 929, University of Newcastle
upon Tyne, School of Computing Science, Sept. 2005.
[24] P. Y. A. Ryan and S. A. Schneider. Prêt à Voter with
re-encryption mixes. In: ESORICS, LNCS 4189, pages
313–326. Springer, 2006.
[25] P. Y. A. Ryan and S. A. Schneider. Prêt à Voter with
re-encryption mixes. Technical Report 956, University of
Newcastle upon Tyne, School of Computing Science, Apr.
2006.
[26] J. H. van Lint. Introduction to Coding Theory. Graduate
Texts in Mathematics. Springer-Verlag New York, Inc.,
Secaucus, NJ, USA, 3rd rev. and expanded edition, 1998.
[27] A. Vardy. The intractability of computing the minimum
distance of a code. IEEE Trans. Inform. Theory,
43(6):1757–1766, 1997.
[28] A. Young and M. Yung. The dark side of "black-box"
cryptography, or: Should we trust capstone? In: CRYPTO,
LNCS 1109, pages 89–103. Springer, 1996.
[29] A. Young and M. Yung. Kleptography: Using cryptography
against cryptography. In: EUROCRYPT, LNCS 1233, pages
62–74. Springer, 1997.
[30] A. Young and M. Yung. Bandwidth-optimal kleptographic
attacks. In: CHES, LNCS 2162, pages 235–250. Springer,
2001.
[31] A. Young and M. Yung. A subliminal channel in secret block
ciphers. In: Selected Areas in Cryptography, LNCS 3357,
pages 198–211. Springer, 2004.
[32] A. Young and M. Yung. Malicious cryptography:
Kleptographic aspects. In: CT-RSA, LNCS 3376, pages 7–18.
Springer, 2005.
[33] A. Young and M. Yung. A space efﬁcient backdoor in RSA
and its applications. In: Selected Areas in Cryptography,
LNCS 3897, pages 128–143. Springer, 2005.