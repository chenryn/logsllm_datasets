```
::: para
使用 `lvchange -an`{.command}
命令删除逻辑卷前，必须明确将其停用，但不会看到让您确定是否要删除某个活跃逻辑卷的提示。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_display}4.4.14. 显示逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426166294160
.indexterm}[]{#LVM_CLI.html#idm140426166292720 .indexterm}
::: para
有三个命令可用来显示 LVM
逻辑卷的属性：`lvs`{.command}、`lvdisplay`{.command} 和
`lvscan`{.command}。
:::
::: para
命令 `lvs`{.command}
以可配置格式提供逻辑卷信息，每行显示一个逻辑卷。`lvs`{.command}
命令提供大量格式控制，并在编写脚本时使用。有关使用 `lvs`{.command}
自定义您的输出结果的详情，请查看 [第 4.8 节 "LVM
的自定义报告"](#LVM_CLI.html#custom_report){.xref}。
:::
[]{#LVM_CLI.html#idm140426151678336 .indexterm}
::: para
`lvdisplay`{.command}
命令以固定格式显示逻辑卷属性（比如大小、布局及映射）。
:::
::: para
下面的命令显示 `vg00`{.filename} 中 `lvol2`{.filename}
的属性。如果已为这个原始逻辑卷创建快照逻辑卷，这个命令会显示所有快照逻辑卷及其状态（active
或者 inactive）列表。
:::
``` screen
# lvdisplay -v /dev/vg00/lvol2
```
[]{#LVM_CLI.html#idm140426114231824 .indexterm}
::: para
`lvscan`{.command} 命令扫描该系统中的所有逻辑卷，并将其列出，如下所示。
:::
``` screen
# lvscan
 ACTIVE                   '/dev/vg0/gfslv' [1.46 GB] inherit
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#lv_extend}4.4.15. 扩展逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426114226976
.indexterm}[]{#LVM_CLI.html#idm140426114225536
.indexterm}[]{#LVM_CLI.html#idm140426168616688 .indexterm}
::: para
使用 `lvextend`{.command} 命令增加逻辑卷的大小。
:::
::: para
扩展逻辑卷后，可指明该卷要扩展的大小，或者将其扩展后该卷应该有多大。
:::
::: para
下面的命令将逻辑卷 `/dev/myvg/homevol`{.filename} 扩展为 12GB。
:::
``` screen
# lvextend -L12G /dev/myvg/homevol 
lvextend -- extending logical volume "/dev/myvg/homevol" to 12 GB
lvextend -- doing automatic backup of volume group "myvg"
lvextend -- logical volume "/dev/myvg/homevol" successfully extended
```
::: para
下面的命令在 `/dev/myvg/homevol`{.filename} 逻辑卷中添加另一个 GB。
:::
``` screen
# lvextend -L+1G /dev/myvg/homevol
lvextend -- extending logical volume "/dev/myvg/homevol" to 13 GB
lvextend -- doing automatic backup of volume group "myvg"
lvextend -- logical volume "/dev/myvg/homevol" successfully extended
```
::: para
在 `lvcreate`{.command} 命令中，可使用 `lvextend`{.command} 命令的
`-l`{.option}
参数指定逻辑卷增加的扩展数。还可以使用这个参数指定卷组的百分比，或者卷组中剩余可用空间的百分比。下面的命令将名为
`testlv`{.filename} 的逻辑卷扩展为填满卷组 `myvg`{.filename}
中的未分配空间。
:::
``` screen
# lvextend -l +100%FREE /dev/myvg/testlv
  Extending logical volume testlv to 68.59 GB
  Logical volume testlv successfully resized
```
::: para
扩展逻辑卷后，需要增大文件系统大小以便与其匹配。
:::
::: para
默认情况下，大多数文件系统重新定义大小的工具会将该文件系统的大小增加到底层逻辑卷的大小，这样就不需要考虑为每两个命令指定同样的大小。
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#stripe_extend}4.4.15.1. 扩展条带卷 {.title}
:::
[]{#LVM_CLI.html#idm140426104158240
.indexterm}[]{#LVM_CLI.html#idm140426104156800 .indexterm}
::: para
要增大条带逻辑卷的大小，则必须在底层物理卷中有足够的剩余空间，以便组成卷组支持该条带。例如：如果有一个使用整个卷组的双向条带，在该卷组中添加单一物理卷不会让您有扩展该条带的能力，而必须在该卷组中添加至少两个物理卷方可有此能力。
:::
::: para
例如：可使用下面的 `vgs`{.command} 命令显示由两个底层物理卷组成的卷组
`vg`{.filename}。
:::
``` screen
# vgs
  VG   #PV #LV #SN Attr   VSize   VFree
  vg     2   0   0 wz--n- 271.31G 271.31G
```
::: para
使用该卷组中的整个空间数量创建条带。
:::
``` screen
# lvcreate -n stripe1 -L 271.31G -i 2 vg
  Using default stripesize 64.00 KB
  Rounding up size to full physical extent 271.31 GB
  Logical volume "stripe1" created
# lvs -a -o +devices
  LV      VG   Attr   LSize   Origin Snap%  Move Log Copy%  Devices
  stripe1 vg   -wi-a- 271.31G                               /dev/sda1(0),/dev/sdb1(0)
```
::: para
注：卷组目前没有剩余空间。
:::
``` screen
# vgs
  VG   #PV #LV #SN Attr   VSize   VFree
  vg     2   1   0 wz--n- 271.31G    0
```
::: para
下面的命令在卷组中添加另一个物理卷，之后该卷组就有 135G 附加空间。
:::
``` screen
# vgextend vg /dev/sdc1
  Volume group "vg" successfully extended
# vgs
  VG   #PV #LV #SN Attr   VSize   VFree
  vg     3   1   0 wz--n- 406.97G 135.66G
```
::: para
此时无法将该条带逻辑卷扩展到卷组的最大大小，因为需要有两个底层设备方可将数据条带化。
:::
``` screen
# lvextend vg/stripe1 -L 406G
  Using stripesize of last segment 64.00 KB
  Extending logical volume stripe1 to 406.00 GB
  Insufficient suitable allocatable extents for logical volume stripe1: 34480 
more required
```
::: para
要扩展条带逻辑卷，需要添加量一个物理卷，然后再扩展该逻辑卷。在这个示例中，在该卷组中添加两个物理卷，即可将该逻辑卷扩展到该卷组的最大大小。
:::
``` screen
# vgextend vg /dev/sdd1
  Volume group "vg" successfully extended
# vgs
  VG   #PV #LV #SN Attr   VSize   VFree
  vg     4   1   0 wz--n- 542.62G 271.31G
# lvextend vg/stripe1 -L 542G
  Using stripesize of last segment 64.00 KB
  Extending logical volume stripe1 to 542.00 GB
  Logical volume stripe1 successfully resized
```
::: para
如果没有足够的底层物理设备扩展该条带逻辑卷，且扩展不是条带化也没有关系，则也能够扩展该卷，结果是会得到不平衡的性能。在逻辑卷中添加空间时，默认操作是使用与现有逻辑卷最后片段相同的条带参数，但也可以覆盖那些参数。下面的示例扩展现有条带逻辑卷，使用启动
`lvextend`{.command} 命令失败后可用的剩余空间。
:::
``` screen
# lvextend vg/stripe1 -L 406G
  Using stripesize of last segment 64.00 KB
  Extending logical volume stripe1 to 406.00 GB
  Insufficient suitable allocatable extents for logical volume stripe1: 34480 
more required
# lvextend -i1 -l+100%FREE vg/stripe1
```
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_extend}4.4.15.2. 扩展 RAID 卷 {.title}
:::
[]{#LVM_CLI.html#idm140426115126352
.indexterm}[]{#LVM_CLI.html#idm140426115124912 .indexterm}
::: para
在不执行新 RAID 区域同步的情况下使用 `lvextend`{.command} 命令增大 RAID
逻辑卷。
:::
::: para
使用 `lvcreate`{.command} 命令创建 RAID 逻辑卷时，如果指定
`--nosync`{.option} 选项，则在创建该逻辑卷后不会同步 RAID
区域。如果稍后使用 `--nosync`{.option} 选项扩展已创建的 RAID
逻辑卷，此时也不会同步该 RAID 扩展。
:::
::: para
使用 `lvs`{.command} 命令的 `--nosync`{.option}
选项决定是否让已创建的现有逻辑卷显示该卷的属性。如果逻辑卷 attribute
字段第一个字符为"R"，则表示创建该 RAID
卷时没有启用初始同步；如果该字符为"r"，则表示创建时启动初始同步。
:::
::: para
下面的命令显示名为 `lv`{.literal} 的 RAID
逻辑卷的属性，创建该卷时没有启动同步，attribute 字段的第一个字符为
"R"。该字段的第七个字符为 "r"，代表 RAID 目标类型。有关 attribute
字段的含义，请查看 [表 4.4 "lvs
显示字段"](#LVM_CLI.html#tb-table-lvs-fields){.xref}。
:::
``` screen
# lvs vg
  LV   VG   Attr     LSize Pool Origin Snap%  Move Log Cpy%Sync  Convert
  lv   vg   Rwi-a-r- 5.00g                               100.00
```
::: para
如果使用 `lvextend`{.command} 命令增大这个逻辑卷，则不会重新同步 RAID
扩展。
:::
::: para
如果创建逻辑卷时没有指定 `lvcreate`{.command} 命令的 `--nosync`{.option}
选项，则可以使用 `lvextend`{.command} 命令的 `--nosync`{.option}
选项增大该逻辑卷，且无需重新同步该镜像。
:::
::: para
下面的示例扩展了 RAID 逻辑卷，创建该卷时没有使用 `--nosync`{.option}
选项，表示在创建时同步该 RAID
卷。但这个示例中指定在扩展该卷时不要同步。注：该卷有属性
\"r\"，但执行附带 `--nosync`{.option} 选项的 `lvextend`{.command}
命令后，该卷有一个属性 \"R\"。
:::
``` screen
# lvs vg
  LV   VG   Attr     LSize  Pool Origin Snap%  Move Log Cpy%Sync  Convert
  lv   vg   rwi-a-r- 20.00m                               100.00        
# lvextend -L +5G vg/lv --nosync
  Extending 2 mirror images.
  Extending logical volume lv to 5.02 GiB
  Logical volume lv successfully resized
# lvs vg
  LV   VG   Attr     LSize Pool Origin Snap%  Move Log     Cpy%Sync  Convert
  lv   vg   Rwi-a-r- 5.02g                                   100.00
```
::: para
如果 RAID 卷为不活跃状态，即使创建该卷时指定了 `--nosync`{.option}
选项，也则不会在扩展该卷时自动跳过同步。反之，会提示您是否要全面创新同步该逻辑卷的扩展部分。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
如果 RAID 卷要执行恢复，则在使用 `--nosync`{.option}
选项创建或扩展该卷时不能扩展该逻辑卷。但如果未指定 `--nosync`{.option}
选项，就可以在恢复时扩展该 RAID 卷。
:::
:::
:::
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#extend-lv-cling}4.4.15.3. 使用 `cling`{.literal} 分配策略扩展逻辑卷 {.title}
:::
::: para
可使用 `lvextend`{.command} 命令的 `--alloc cling`{.option} 选项指定
`cling`{.literal} 分配策略扩展 LVM
卷。这个策略会在与现有逻辑卷的最后片段所在的同一物理卷中选择空间。如果在该物理卷中没有足够的空间，并在
`lvm.conf`{.filename} 文件中定义了一组标签，则 LVM
会检查是否在该物理卷中附加任何标签，并在现有扩展和新扩展之间映射那些物理卷标签。
:::
::: para
例如：如果您有逻辑卷是某个单一卷组中两个网站间的镜像，就可以使用 \@site1
和 \@site2 标签，根据其所在位置标记该物理卷，并在 `lvm.conf`{.filename}
文件中指定以下行：
:::
``` screen
cling_tag_list = [ "@site1", "@site2" ]
```
::: para
有关物理卷标签的详情，请查看 [附录 C, *LVM
对象标签*](#lvm_tags.html){.xref}。
:::
::: para
在下面的示例中修改了 `lvm.conf`{.filename} 文件使其包含以下行：
:::
``` screen
cling_tag_list = [ "@A", "@B" ]
```
::: para
同样在此示例中，创建的卷组 `taft`{.literal} 由物理卷
`/dev/sdb1`{.literal}、`/dev/sdc1`{.literal}、`/dev/sdd1`{.literal}、`/dev/sde1`{.literal}、`/dev/sdf1`{.literal}、`/dev/sdg1`{.literal}
和 `/dev/sdh1`{.literal} 组成。该示例不使用 `C`{.literal}
标签，但这样会显示该 LVM 使用标签选择用于镜像分支的物理卷。
:::
``` screen
# pvs -a -o +pv_tags /dev/sd[bcdefgh]
  PV         VG   Fmt  Attr PSize  PFree  PV Tags
  /dev/sdb1  taft lvm2 a--  15.00g 15.00g A
  /dev/sdc1  taft lvm2 a--  15.00g 15.00g B
  /dev/sdd1  taft lvm2 a--  15.00g 15.00g B
  /dev/sde1  taft lvm2 a--  15.00g 15.00g C