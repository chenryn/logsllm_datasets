**作者：灵巧@蚂蚁安全实验室**  
**原文链接：**
在头条的分享中，蚂蚁天宸安全实验室的灵巧博士为大家介绍了BFT协议在区块链的应用，并取了有代表性的应用案例进行分析。
现在我们进入区块链协议安全系列——下集，分析BFT协议的威胁模型以及BFT协议被攻破后，对区块链安全会有哪些影响。
# 01 拜占庭协议威胁模型
拜占庭协议已经被越来越多的链应用到共识协议中，共识协议的安全性直接决定了链的安全性。分析拜占庭协议的威胁模型有助于分析链的安全性。
## 1.1 拜占庭协议的安全假设
协议的全流程涵盖设计，实现，运行三个阶段。运行又涉及节点，网络，运营商多个角色。任何协议设计都离不开安全假设。我们以 PBFT
为例分析协议的安全假设，其他由 PBFT 衍生出来的协议变种在安全假设方面大同小异，我们不一一展开。
1.协议在设计时假设实现过程不受语言限制，但是不能存在编码方面的漏洞。
2.协议在设计时假设运行过程不受外界制约，处于理想状态，具体表现为：
○超过 2/3 节点的软硬件操作系统无漏洞，节点自身的安全性可靠
○超过 2/3 节点的网络链接正常，网络延迟在协议可接受的范围内
○超过 2/3 节点的实际操作者诚实可信，不作恶
○超过 2/3 节点的网络运营商诚实可信，不作恶
○超过 2/3 节点的硬件基础设施可靠，如网线，硬盘等不损坏
协议设计在以上 2 个大的前提下展开。最开始的 PBFT 协议并非为区块链而设计，而 PBFT
的安全假设又被默认继承到区块链中，这就会产生理想与现实的差距。我们分别分析这两种情况下的威胁模型。
## 1.2 理想世界的威胁模型
理想世界具体是指满足所有的安全假设的世界。在理想世界中，可以只考虑协议的设计存在的威胁。通常，协议设计者都是极为专业的研究人员，设计缺陷出现的可能性很小。目前为止，笔者了解到的小有瑕疵的设计是
PBFT 的优化设计。
### 1.2.1 PBFT 本身的优化方法
根据上文所述的 PBFT 的协议过程可知，PBFT 在每一个阶段都需要验证消息发送者的签名。使用公钥签名的方式验证消息存在如下不足：
●类似于RSA这样的签名算法，签名速度比较慢；
●其他公钥密码系统，如椭圆曲线公钥密码系统，虽然签名更快，但是验签更慢。
PBFT算法实际上在正常流程中采用 MAC(Message Authentication Code，消息验证码)
认证消息，因为它具有如下优点，使得算法相对于之前的算法性能提升了一个数量级以上：
●MAC 计算速度快；
●通过适当优化，可以减少其长度；
●通过对authenticator（vector of MAC）的使用，可以使验证时间为常量，而生成时间只随着节点数量线性增长。
具体来说，PBFT算法中使用 MAC 和公钥签名的具体场景是：
●所有正常操作流程中使用 MAC 验证消息；
●视图变更中的消息：view-change, new-view，以及出现错误时，使用公钥签名。
这些场景的出现频率相对较低，从而对算法的性能影响较小。
### 1.2.2 优化导致的威胁模型
那是否采用 MAC 只有优点，没有缺点呢？这一优化导致 PBFT 极不稳定，如果 primary 是恶意的，会导致系统不可用。具体来说如下：
首先，MAC 是对称的，需要两两共享密钥，为防止假冒，两两之间密钥不同。也就是 primary 和 2，3，4 等共享等密钥都不相同。那么，如果
primary 和 2 出现了冲突，其他人，如 3，4，无法确认谁对谁错。其次，如果 primary 是恶意的，primary 可以控制 MAC
数组的收发，他可以任意操纵 MAC 值，让 replica2 认为 replica3 提供的内容是错的，replica2 无法确认到底是 primary
还是 replica 3 是错的。那么 replica2 和 replica3
无法相互说服对方，系统就不可用了。上述攻击可以在不同的阶段实施。如，在preprepare阶段，primary可以篡改用户发送的 MAC数组，部分
replica 接受用户请求，部分不请求。在prepare阶段，primary可以让部分mac数组为错误，从而部分接受 primary 的
propose，部分不接受。
未优化之前使用证书给消息签名就不涉及这个问题。证书携带身份信息，且证书是节点所公认的。replica2
发现签名错误，通过两两通信，要么大家都认为这个签名是错的，要么最终收到一个正确签名， 那么可以保证所有 replica 都是一致认可、或一致不认可这个值。
在 PBFT 应用到区块链时，如果链不采用 MAC 优化，也就不会面临协议本身的脆弱性问题。
## 1.3 现实世界的威胁模型
理想很丰满 ，现实很骨感。通常，一些安全假设在现实世界中都会面临挑战。
### 1.3.1 协议实现过程存在漏洞
任何一个设计完美的系统在实现的过程中都不能保证 100%
正确，实现过程中会引入不同的漏洞。这类问题更多的是代码安全问题，代码安全问题属于另外一个课题，我们不在这里展开讨论，仅简单分析一下。
● 编码不当
编码不当有多种，使用的编程语言不同也会有不同的漏洞类型，比如 C/C++
存在缓冲区溢出，整数溢出，解引用空指针，指针重释放，内存分配失败，内存泄漏等问题。Go
语言使用垃圾收集器自动管理内存，无需显示释放内存，所以不涉及指针重释放问题，但是也有其自身的问题，如Goroutine产生内存泄漏。其他语言的问题就不再一一列举。拜占庭协议的实现各有不同，实现中可能存在编码不当的问题，建议找专业的团队做代码审计。
● 逻辑不当
逻辑不当是常见的安全问题的类别。拜占庭协议复杂，更容易出现逻辑不当的问题，且因为协议复杂，通常性能会低，难以满足线上业务的需求，所以优化协议的实现是一个现实的问题。在优化过程中，如果没有严密论证优化方法，则可能让协议失效，如
MAC 地址的优化。实现过程中是否忠实的遵守协议设计是需要考量的一个因素。
● 权限不当
权限不当是另一类常见的安全问题。通常，BFT
协议运行在共识节点上，共识节点和普通节点的权限不同，需要在关键环节做鉴权。协议本身也分主节点和副节点，必要的环节也需要区别身份。如果权限不当，会导致协议安全性受挫。
### 1.3.2 操作系统存在漏洞
主流的操作系统有 windows，Linux，macOS，每一种操作系统都存在系统漏洞。如果没有及时为操作系统打补丁，攻击者就有可乘之机。
### 1.3.3 网络不可用
利用节点所在的网络特点攻击，让节点失去有效连接，是更贴近区块链范畴的攻击方法。BFT
协议不能脱离于网络连接而存在，区块链网络有一些独有的特点。有多种方法都可以让节点的网络不可用。
#### 1.3.3.1 日蚀攻击
日蚀攻击（Eclipse Attack）是针对