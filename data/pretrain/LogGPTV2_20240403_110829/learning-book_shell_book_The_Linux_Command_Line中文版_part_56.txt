---
## Page 465
S{parumeter:offset:length}
这些展开用来从parameter所包含的字符串中提取一部分字符。提取的字符始于第offset
个字符（从字符串开头算起）直到字符串的末尾，除非指定提取的长度。
[ne@linuxbox -]$ foo=*This string is long.*
[ne@linuxbox -]$ echo ${foo:5}
string is long.
[ne@linuxbox -]$ echo ${foo:5:6]
string
若offset的值为负数，则认为offset值是从字符串的末尾开始算起，而不是从开头。注意负
数前面必须有一个空格，为防止与${parameter:-word}展开形式混淆。length，若出现，则必
须不能小于零。
如果parameter是@，展开结果是length个位置参数，从第offset个位置参数开始。
[ne@linuxbox -]$ foo=*This string is long.*
{9- :oog]s oqoo s[- xoqxnutsou]
long-
g- oog]s oqo s[- xoqutou]
10
S{parameter#pattern}
S{parameter##pattern}
这些展开会从paramter所包含的字符串中清除开头一部分文本，这些字符要匹配定义的
pattern°pattern是通配符模式，就如那些用在路径名展开中的模式。这两种形式的差异之处
是该#形式清除最短的匹配结果，而该##模式清除最长的匹配结果。
[nedlinuxbox -]$ foowfile.txt.zip
[ne@linuxbox -]$ echo ${foo#*.}
txt.zip
[ne@linuxbox -]$ echo $(foo##*.}
zip
464
---
## Page 466
S{parameter%pattern,
S{paraeter%%pattern}
这些展开和上面的#和##展开一样，除了它们清除的文本从parameter所包含字符串的
末尾开始，而不是开头。
[nedlinuxbox -]$ foo=file.txt.zip
[ne@linuxbox -]$ echo $(foo%.*)
file.txt
[ne@linuxbox -]$echo$(foo%% +}
file
${parameter/pattern/string
${parameter//pattern/string}
S{parameter/#pattern/string}
S{parameter/%pattern/string
这种形式的展开对parameter的内容执行查找和替换操作。如果找到了匹配通配符pattern
的文本，则用string的内容替换它·在正常形式下，只有第一个匹配项会被替换掉。在该//
形式下，所有的匹配项都会被替换掉。该/#要求匹配项出现在字符事的开头，而/%要求匹
配项出现在字符串的末尾。/string可能会省略掉，这样会导致删除匹配的文本。
[ne@linuxbox-]$ foo=JPG.JPG
[ne@linuxbox -]$echo$(foo/JPG/jpg)
JPg.JPG
[neglinuxbox-]$ echo $(foo//JPG/jpg
JPg·JPg
[ne@linuxbox-]$echo$(foo/#JPG/jpg)
JPg.JPG
[ne@linuxbox-]$echo$(foo/%,JPG/jpg)
JPG.jPg
知道参数展开是件很好的事情。字符串操作展开可以用来替换其它常见命令比方说sed和
cut。通过减少使用外部程序，展开提高了脚本的效率。举例说明，我们将修改在之前章节中讨
论的longest-word 程序，用参数展开${#j}取代命令$（echo Sj|wc-c)及其subshell，像这样：
465
---
## Page 467
#!/bin/bash
# longest-vord3 : find longest string in a file
for i; do
if [[ -r $i ]]; then
nax_vord=
nax_len=
for j in $(strings $i) ; do
len=${#j}
if (( len > max_len )); then
max_len=$1en
max_vord=$j
fi
done
fi
shift
done
下一步，我们将使用time命令来比较这两个脚本版本的效率：
[ne@linuxbox -]$ tine longest=word2 dirlist-usr-bin.txt
dirlist-usr-bin.txt: *scrollkeeper-get-extended-content-1ist′(38
characters)
real 0m3.618s
user 0±1.544s
sys 0n1.768s
[ne@linuxbox -]$ tine longest-word3 dirlist-usr-bin.txt
dirlist-usr-bin.txt: *scrollkeeper-get-extended-content-1ist′(38
characters)
real 0±0.060s
user 0±0.056s
sys 0n0.008s
原来的脚本扫描整个文本文件需耗时3.168秒，而该新版本，使用参数展开。仅仅花费了
0.06秒—一个非常巨大的提高。
466
---
## Page 468
35.2.2大小写转换
最新的bash版本已经支持字符申的大小写转换了。bash有四个参数展开和declare命令的两
个选项来支持大小写转换。
那么大小写转换对什么有好处呢？除了明显的审美价值，它在编程领域还有一个重要的角
色。让我们考虑一个数据库查询的案例。假设一个用户已经敲写了一个字符申到数据输入框中，
小写或是两者的结合。我们当然不希望把每个可能的大小写拼写排列填充到我们的数据库中。
那怎么办？
解决这个问题的常见方法是规范化用户输入。也就是，在我们试图查询数据库之前，把用户
的输入转换成标准化。我们能做到这一点，通过把用户输入的字符全部转换成小写字母或大写
字母，并且确保数据库中的条目按同样的方式规范化。
这个declare命令可以用来把字符串规范成大写或小写字符。使用declare命令，我们能强
制一个变量总是包含所需的格式，无论如何赋值给它。
#!/bin/bash
# ul-declare: demonstrate case conversion via declare
declare -u upper
declare -1 1ower
if [[ $1 ]]: then
T$,=xoddn
lover="$1"
echo $upper
echo $lover
fi
在上面的脚本中，我们使用declare命令来创建两个变量，upper和lower。我们把第一个
命令行参数的值（位置参数1）赋给每一个变量，然后把变量值在屏幕上显示出来：
[ne@linuxbox -]$ ul-declare aBc
ABC
abc
正如我们所看到的，命令行参数（“aBc"）已经规范化了。
有四个参数展开，可以执行大小写转换操作：
467
---
## Page 469
格式
结果
\${parameter,}
把parameter的值全部展开成小写字母。
${parameter.)}
仅仅把parameter的第一个字符展开成小写字母。
\${parameter~~}
把parameter的值全部转换成大写字母。
\${parameter~}
仅仅把parameter的第一个字符转换成大写字母（首字母大
写）。
表35-1：大小写转换参数展开
这里是一个脚本，演示了这些展开格式：
#!/bin/bash
expansios
if [[ $1 ]]; then
echo ${1,,}
echo ${1,}
echo $(1**)
echo ${1~}
fi
这里是脚本运行后的结果：
abc
aBc
ABC
ABc
再次，我们处理了第一个命令行参数，输出了由参数展开支持的四种变体。尽管这个脚本使
用了第一个位置参数，但参数可以是任意字符串，变量，或字符申表达式。
35.3算术求值和展开
我们在第七章中已经接触过算术展开了。它被用来对整数执行各种算术运算。它的基本格式是：
468
---
## Page 470
$((expression))
这里的expression是一个有效的算术表达式。
这个与复合命令（（）有关，此命令用做算术求值（真测试），我们在第27章中遇到过。
在之前的章节中，我们看到过一些类型的表达式和运算符。这里，我们将看到一个更完整的
列表。
35.3.1数基
回到第9章，我们看过八进制（以8为底）和十六进制（以16为底）的数字。在算术表达式
中．shell支持任意进制的整型常量。
表示法
描远
number
默认情况下，没有任何表示法的数字被看做是十进制数（以
10为底）。
Onumber
在算术表达式中，以零开头的数字被认为是八进制数。
Oxnumber
十六进制表示法
base#number
number 以 base 为底
表35-2:指定不同的数基
一些例子：
[ne@linuxbox-]$ echo $((0xff))
255
[ne@linuxbox -]$ echo $((2#11111111))
255
在上面的示例中，我们打印出十六进制数开（最大的两位数）的值和最大的八位二进制数
（以2为底）。
35.3.2
一元运算符
有两个一元运算符，+和-，它们被分别用来表示一个数字是正数还是负数。例如，-5。
469
---
## Page 471
35.3.3简单算术
下表中列出了普通算术运算符：
运算符
描述
+
加
减
*
乘
整除
**
乘方
%
取模（余数）
表35-3:算术运算符
其中大部分运算符是不言自明的，但是整除和取模运算符需要进一步解释一下。
因为shell算术只操作整型，所以除法运算的结果总是整数：
[ne@linuxbox -]$ echo $(( 5 / 2 ))
2
这使得确定除法运算的余数更为重要：
[ne@linuxbox -]$echo $(( 5% 2 ))
1
通过使用除法和取模运算符，我们能够确定5除以2得数是2.余数是1。
在循环中计算余数是很有用处的。在循环执行期间，它允许某一个操作在指定的间隔内执
行。在下面的例子中，我们显示一行数字，并高亮显示5的倍数：
#!/bin/bash
# nodulo : demonstrate the modulo operator
for ((1 = 0; i 。 FuTzd
else
$。P%FuTzd
fi
done
printf "\n"
当脚本执行后，输出结果看起来像这样：
[ne@linuxbox -]$ modulc
 1 2 3 4  6 7 8 9  11 12 13 14  16 17 18 19 
35.3.4赋值运算符
经执行了许多次赋值运算。每次我们给变量一个值，我们就执行了一次赋值运算。我们也能在
算术表达式中执行赋值运算：
[ne@linuxbox -]$ foo=
[ne@linuxbox-]$echo$Sfoo
 1,nx sT 4 ooo uoa:(（9 = oo ）） xT s[-xoqxnuou]
It is true.
[ne@linuxbox -]$ echo $foo
在上面的例子中，首先我们给变量foo赋了一个空值，然后验证foo的确为空。下一步，我
们执行一个if复合命令（（foo=5））。这个过程完成两件有意思的事情：1）它把5赋值给变量
foo，2）它计算测试条件为真，因为foo的值非零。
注意：记住上面表达式中=符号的真正含义非常重要。单个=运算符执行赋值运算。foo
=5是说“使得foo等于5”，而==运算符计算等价性。foo==5是说“是否foo等于5？”。
这会让人感到非常迷惑，因为test命令接受单个=运算符来测试字符串等价性。这也是使用
（
471
---
## Page 473
除了=运算符，shell也提供了其它一些表示法，来执行一些非常有用的赋值运算：
表示法
描述
parameter = value
简单赋值。给parameter赋值。
parameter += value
加等价于 parameter = parameter + value °
parameter -= value