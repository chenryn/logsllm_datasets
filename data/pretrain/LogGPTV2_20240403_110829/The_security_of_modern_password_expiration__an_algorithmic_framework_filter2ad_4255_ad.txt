o
n
o
i
t
c
a
r
F
 30
 25
 20
 15
 10
 5
(
d
e
k
c
a
r
c
s
t
n
u
o
c
c
a
f
o
n
o
i
t
c
a
r
F
 20
 15
 10
 5
 0
(
d
e
k
c
a
r
c
s
t
n
u
o
c
c
a
f
o
n
o
i
t
c
a
r
F
 25
 20
 15
 10
 5
(cid:9)(cid:9)d=1
(cid:9)(cid:9)d=2
(cid:9)(cid:9)d=1
(cid:9)(cid:9)d=2
(cid:9)(cid:9)d=3
 1  10  20  30  40  50  60  70  80  90  100
 1  10  20  30  40  50  60  70  80  90  100
Number of password guesses
Number of password guesses
(a) TED
(b) TEDM
 35
)
%
 30
)
%
(cid:9)(cid:9)d=1
(cid:9)(cid:9)d=2
(cid:9)(cid:9)d=3
(cid:9)(cid:9)d=4
 1  10  20  30  40  50  60  70  80  90  100
 1  10  20  30  40  50  60  70  80  90  100
Number of password guesses
Number of password guesses
(c) TLI
(d) TLIP
Figure 7: Fraction of passwords πk found as function of viable
guesses ~t(σk) made in order of orderBemts . Average of 10 trials.
it might seem, cause the user to select passwords that are generally
weaker when viewed in isolation. To test this conjecture, we cat-
egorized the 7752 accounts in our data according to the average
estimated entropy of the passwords for that account that we were
able to crack. To perform this calculation, we estimated the entropy
of each password using the NIST methodology [6]. Among other
rules, this methodology prescribes adding six bits to the estimated
entropy of a password if the password survives a dictionary attack.
Due to the inclusion of nonalphabetic characters in our passwords,
none of these passwords would be present in a dictionary of words
consisting of only alphabetic characters, and so we awarded these
six bits of entropy to a password only if it survived the dictionary at-
tack after removing its nonalphabetic characters. The dictionary we
used was derived from the en_US dictionary in Hunspell (Kevin’s
Word List Page: http://wordlist.sourceforge.net/).
After converting all uppercase characters in the original dictionary
to lowercase (all alphabetic password characters were converted to
lowercase, as well) and deleting all purely numeric entries, the dic-
182T
d
n
P (πr ∈ T (σr))
TED
TEDM
TLI
TLIP
1
2
1
2
1
2
3
1
2
3
4
3412
4530
3729
4679
3417
4292
4532
2678
3406
3608
3721
0.52
0.61
0.50
0.61
0.50
0.60
0.63
0.39
0.48
0.52
0.55
130.61
284499.41
203.78
470390.25
67.08
16395.12
3321484.36
17.68
84.38
2661.70
96135.19
Accounts ﬁltered using Tpast = T
n randomly selected accounts
E(min{i : ~ti(σr) = πr} | πr ∈ T (σr))
E(min{i : ~ti(σr) = πr} | πr ∈ T (σr))
0.00,
0.00,
62.37,
28.02,
(skipped, failed, viable)
(
(
(
(
55.12,
(
2312.55,
(
( 3253944.90, 58255.08,
13.71,
(
29.02,
(
141.81,
(
(
1187.15,
102.59 )
33964.39, 113450.82, 137084.20 )
141.40 )
88885.91, 207050.44, 174453.89 )
11.96 )
338.96 )
9284.39 )
3.97 )
9.76 )
47.80 )
447.86 )
0.00,
45.59,
2472.10,
94500.19,
0.00,
13743.61,
193.62
331665.28
285.10
575157.53
76.58
18797.81
3353629.77
18.20
113.66
3243.70
114179.84
0.00,
0.00,
92.51,
41.37,
(skipped, failed, viable)
152.25 )
(
41485.51, 132077.65, 158102.12 )
(
(
192.59 )
( 121778.91, 245913.91, 207464.71 )
13.91 )
62.67,
(
2633.67,
(
385.06 )
9330.87 )
( 3285529.91, 58768.99,
0.00,
4.41 )
13.78,
(
11.56 )
32.88,
69.22,
(
54.51 )
163.51,
(
3025.68,
( 112205.57,
1427.06,
547.22 )
0.00,
15779.08,
Figure 9: Evaluation of accounts with history of transform use (§4.2) using algorithm Bemts. Averages over 10 trials.
focus his attention on retaining access to this account (in lieu of
others) across password changes, owing to the increased likelihood
of transform use again. We are also interested in learning the extent
to which past uses of certain transforms predicts future use of oth-
ers. For example, if a user previously transformed an old password
σ′
k to a subsequent password π′
k by replacing a “o” with “0”, then
perhaps this user substituted an “i” with “1” when generating his
current password πk from from his previous one σk.
k and π′
k ∈ Tpast(σ′
k such that π′
Our framework for evaluating the additional utility to the attacker
of past transform use works as follows. Consider a set Tpast of
primitive transforms, which yield a depth-d transform tree Tpast.
We restrict our attention to accounts k such that there exist cracked
passwords σ′
k); all other accounts
are ﬁltered out. Let the remaining accounts be renumbered 1..n,
where n now denotes the number of remaining accounts. We then
repeat the analysis of §4.1 identically using a set T of primitive
transforms, but using this ﬁltered set of data, and with the addi-
tional caveat that when selecting σ1..n and π1..n for a trial, πk must
occur temporally after some σ′
k).
Because we operate on a ﬁltered set of accounts depending on Tpast,
n is potentially different in each case.
k satisfying π′
k ∈ Tpast(σ′
k and π′
We begin by performing this analysis for Tpast = T , for trees
T deﬁned by the same transform sets T considered in §4.1 (i.e.,
T ∈ {TED, TEDM, TLI, TLIP}) and the same depths d considered
there. In this way, we measure the utility of the preceding use of
transforms in T in predicting their future use. The results of this
study are shown in Figure 9. It is evident from that these ﬁltered
accounts have a signiﬁcantly higher probability of being broken
by searching using T , as can be seen by comparing the columns la-
beled P (πr ∈ T (σr)) in Figures 5 and 9. Put another way, if an ac-
count contains passwords in which one (π′
r) is created from another
r) by applying some ~t ∈ Tpast, then future passwords for this ac-
(σ′
count (πr) are more likely to be created by applying transforms
again to some old password σr (i.e., P (πr ∈ T (σr)) is higher for
T = Tpast). In some cases the effect is so strong that well over
half of the accounts exhibit it; e.g., the case in which T = TLI and
d = 3 yields P (πr ∈ T (σr)) = .63.
Somewhat surprisingly, though, E(min{i : ~ti(σr) = πr} | πr ∈
T (σr)) does not show a consistent improvement in Figure 9 over
that in Figure 5. The reason is that ﬁltering the accounts using Tpast
reduces the number n of accounts to roughly half of the accounts
used in the analysis of Figure 5. The corresponding reduction in the
training data during the 5-fold cross validation tests causes a decay
in the quality of orderBemts output by Bemts. To demonstrate this
effect, we repeated our tests on n accounts selected uniformly at
random from the set used in the Figure 5 tests, and show the results
for such tests in Figure 9 under the heading “n randomly selected
accounts”. We now see that the n accounts chosen by ﬁltering using
Tpast are, in fact, less costly to attack than random samples of the
same number n of accounts from the data used in Figure 5.
The consequences of this analysis for ofﬂine and online attacks
are noteworthy. For an ofﬂine attack, where an attacker possesses
σk and can check guesses at πk unmitigated, it can break πk using
a transform-based search typically in a majority (e.g., 63% in the
case of T = TLI, d = 3) of accounts in which the user previously
used the same transforms to generate a new password π′
k from a
past password σ′
k. Moreover, the speed with which the attacker can
do so is comparable to, or faster than, that indicated in Figure 6. For
an online attack, where the attacker must submit guesses at πk to
a server, the success rates for the attacker on these accounts is also
enhanced, e.g., reaching 39% attack success in the ﬁrst 4 viable
password guesses in the case of T = TLIP and d = 1.
past ∪ T 2
past, where T 1
The preceding analysis indicates that those users who use trans-
forms in various classes (TED, TEDM, TLI, TLIP) tend to do so again.
It is tempting to assume that this is the case even for smaller (but
still natural) classes of transforms, such as the component sub-
classes of TLI, namely Tcap, Tdel, Tdup, Tsub, Tins, Tleet, Tmov, and
Tkey. To our surprise, however, we found this is not always the case.
Speciﬁcally, Figure 10(a) shows P (πr ∈ T (σr)) for experiments
using the same methodology as used in Figure 9 (i.e., ﬁltering using
Tpast), but with d = 3 and with Tpast set to one or the union of two
component subclasses of TLI. (In Figure 10, we deﬁne Tpast using
Tpast = T 1
past range over {Tcap, Tdel,
Tdup, Tsub, Tins, Tleet, Tmov, Tkey}.) Note that in Figure 10(a), where
T = Tpast, most values for P (πr ∈ T (σr)) are relatively small
in comparison to those in Figure 9. In fact, of the subclasses of
TLI, only the previous use of a transform from Tsub is a very strong
predictor for the future use of such a transform again. In contrast,
many other classes are good predictors for the future use of trans-
forms in TLI in general, as shown in Figure 10(b) where T = TLI.
As an interesting and extreme example, the previous use of a trans-
form in Tleet ∪ Tkey is not a good predictor for the future use of a
transform from that class (P (πr ∈ T (σr)) = .05 in Figure 10(a))
but is a very strong predictor for the future use of some transform
from TLI in general (P (πr ∈ T (σr)) = .75 in Figure 10(b)).
past and T 2
5. DISCUSSION
It is possible that some will view our study as motivation to em-
ploy transform-based proactive password checking for new pass-
words as they are chosen, and indeed our transform-based algo-
rithm could be used to implement such a proactive password checker.
We caution against this, however. It would not be straightforward
183T 2
past
.10
.12
.18
.20
.21
.62
.62
.62
.62
Tcap Tdel Tdup Tsub Tins Tleet Tmov Tkey
.12
.11
.11
.17
.61
.07
.05
.09
.13
.11
.13
.14
.61
.09
.10
.09
.05
.06
.13
.60
.04
.04
.08
.27
.07
.62
.05
(a) P (πr ∈ T (σr)), T = Tpast
T 2
past
.50
.60
.54
.63
.59
.71
.71
.70
.72
Tcap Tdel Tdup Tsub Tins Tleet Tmov Tkey
.50
.37
.61
.60
.72
.64