title:OPTWALL: A Hierarchical Traffic-Aware Firewall
author:Subrata Acharya and
Bryan N. Mills and
Mehmud Abliz and
Taieb Znati and
Jia Wang and
Zihui Ge and
Albert G. Greenberg
y;k
y
x
OPTWALL: A Hierarchical Trafﬁc-Aware Firewall
Subrata Acharya
, Taieb F. Znati
, Mehmud Abliz
Department of Computer Science,
, Bryan Mills
Telecommunications Program
University of Pittsburgh,
Pittsburgh, PA 15260
(sacharya, mehmud, bmills, znati)@cs.pitt.edu
Jia Wang
, Albert Greenberg
, Zihui Ge
AT&T Labs Research,
Florham Park, NJ 07932
y
y
k
x
x
y
x
(jiawang, gezihui, albert)@research.att.com
Abstract— The overall efﬁciency, reliability, and availability of a
ﬁrewall is crucial in enforcing and administrating security, especially
when the network is under attack. The continuous growth of the
Internet, coupled with the increasing sophistication of the attacks, is
placing stringent demands on ﬁrewall performance. These challenges
require new designs, architecture and algorithms to optimize ﬁrewalls.
In this paper, we propose OPTWALL, an adaptive hierarchical
ﬁrewall optimization framework aimed at reducing operational cost
of ﬁrewalls. The main features of the proposed approach are the
hierarchical design, splitting techniques, an online trafﬁc adaptation
mechanism, and a strong reactive scheme to counter malicious attacks
(e.g. Denial-of-Service (DoS) attacks). To the best of our knowledge,
this work is the ﬁrst of its kind to use trafﬁc characteristics in the
design of an adaptive hierarchical ﬁrewall optimization framework.
To study the performance of OPTWALL, a set of experiments are
conducted on Linux ipchains. The performance evaluation study uses
a large set of ﬁrewall policies and trafﬁc traces managed by a Tier-
1 ISP and provides security access for the ISP network from/to its
business partners. Results show the high potential of OPTWALL to
reduce the operational cost of ﬁrewalls. In particular, the results show
that a performance improvement of nearly 35% can been achieved
in a heavily loaded network environment.
I. Introduction
The constantly changing nature, scale and scope of information
technology environments, coupled with the increasing number
and complexity of security threats, is forcing Tier-1 ISPs to
resort to increasingly complex security policies and mecha-
nisms. Firewalls constitute the cornerstone of most network
defense systems and have proven to be an effective solution
to monitor and regulate trafﬁc. The efﬁciency of ﬁrewalls in
protecting the infrastructure, however, depends not only on
the integrity and coherence of the security policies they are
conﬁgured to implement, but equally importantly on the speed
at which these policies are enforced.
With the dynamic change in the network load, topology,
and bandwidth demand, ﬁrewalls are becoming a bottleneck.
All these factors create a demand for more efﬁcient, highly
available, and reliable ﬁrewalls. Optimizing ﬁrewalls, however,
remains a challenge for network designers and administrators.
A typical present day ﬁrewall enforces its security policies
via a set of multi-dimensional packet ﬁlters (rules). Optimiza-
tion of this multi-dimensional structure has been proven to be
a NP hard [1], [2] problem. This has motivated the research
community to focus on various approaches to provide reliable
and dependable ﬁrewall optimization methods. In-spite of a
strong focus towards an efﬁcient design, the techniques used
thus far are static, and fail to adapt to the dynamic trafﬁc
changes of the network. In particular, current techniques have
failed to include the trafﬁc characteristics in the design and op-
timization of ﬁrewalls. Current ﬁrewall designs do not support
adaptive mechanism to detect and counter attacks in a network
environment characterized by heavy trafﬁc ﬂuctuations. Hence,
they fail to operate efﬁciently under adverse conditions.
The main objective of this paper is to address the short-
comings of the current ﬁrewalls and increase their ability to
deal with dynamic changes in network load and topology,
particularly when the network is under attack. To achieve this
goal, the paper proposes a hierarchical framework for trafﬁc-
aware ﬁrewall optimization. The basic tenet of this framework
is that the design of next generation ﬁrewalls must leverage
their packet inspection capabilities with trafﬁc awareness in
order to optimize the operational cost they incur in defending
against intrusions and denial of service attacks.
Trafﬁc-aware ﬁrewall optimization is challenging as the
number of security policies a ﬁrewall has to enforce for
enterprise networks is large. This is further compounded by the
limited resources of ﬁrewalls relative to the increased ability
of the network to process and forward trafﬁc at extremely high
speed. In this paper, the focus is on optimizing the most widely
used ‘list based’ ﬁrewalls. To achieve this goal we propose a
hierarchical ﬁrewall optimization approach, to create a load-
balanced policy subset. The main challenge in the construction
of these subsets stems from the need to maintain semantic
integrity of the policy set at each level of the hierarchy.
(cid:15) The design of OPTWALL, an adaptive hierarchical ﬁre-
The major contributions of the paper are:
wall optimization framework. In this framework we pro-
pose an optimal solution to construct the hierarchy based
on rule-splitting, while maintaining the integrity of the
original ﬁrewall rule set.
(cid:15) A set of heuristics, based on a trade-off between optimal-
(cid:15) An adaptive, trafﬁc-aware protocol to detect and defend
(cid:15) An experimental study to assess the performance of the
ity, time complexity, and resource requirements to convert
the list based ﬁrewall rule sets into integrity preserving
hierarchical rule subsets.
against trafﬁc anomalies.
proposed solutions and measure the impact of dynami-
cally exploiting the trafﬁc characteristics on the perfor-
mance of ﬁrewalls.
The rest of the paper is organized as follows: Section II
describes the background on list based ﬁrewalls. The rule
cost metric is described in Section III and we introduce
the OPTWALL framework in Section IV. Section V depicts
the OPTWALL splitting design approaches. We present the
evaluation and results in Section VI. Section VII presents the
related work. Finally, we conclude the paper in Section VIII.
II. List Based Firewalls
A security rule is a multi-dimensional structure, where each
dimension is either a set of network ﬁelds or an action ﬁeld.
The rule set deﬁnes the security policies which must be
enforced by the ﬁrewall.
of a typical rule in an Internet environment can be of the
following structure:
In an Internet environment, a rule is deﬁned by a set
of source ip addresses, a set of destination ip addresses, a
set of service types and an action ﬁeld. The service type
typically includes both the underlying protocol type and a
port number. An action ﬁeld can be either accept, deny, or
forward. An accept action allows the packet access into the
protected domain. A deny action causes a packet, in violation
of the security policy, to be rejected. Finally, a forward action
leads to further inspection of the packet. Formally, a ruleR
can be represented as:R=[1;2;;k;℄, wherej
represents network ﬁelds and is an action ﬁeld. An instance
wherei represents a source IP address,di a destination IP
address, and(cid:27)i a service type.
<>:S;Df(cid:11)1kk(cid:11)2kdkg
(cid:12)kkkk;
where,(cid:11)1;(cid:11)2, and(cid:12) are weight parameters,S andD
which occur within the deﬁnition of the rule, andd are
respectively, is the number of services deﬁned within the
rule, and and are the bit representation of the protocol
the ﬁrewall. Formally, given a set of rules1;2;:::;k, the
cost of a given rule,i,
i, is deﬁned as follows:
i=hi
	i8k2ikkk
where,i is the set ofi’s predecessors in the list-based set
The second metric used in our experimentation is the cost
of operating on a given rule set. This cost depends on the
rule’s rank and size, and on how often the rule is invoked by
the bit representation of the source and destination preﬁxes,
are respectively the set of source and destination preﬁxes
and port identiﬁers, respectively.
of rules.
Using the above metrics, the aim of optimization is to reduce
the rule set size and consequently the processing time of the
rule set. This in turn reduces the overall ﬁrewall operational
cost. The resources that affect are the CPU utilization and the
memory usage of the ﬁrewall machine.1
IV. OPTWALL
Contrary to a list-based structure, a hierarchical design leads
to efﬁcient organization of rule sets, thereby increasing sig-
niﬁcantly the performance of the ﬁrewall. OPTWALL uses
a hierarchical approach to partition the original ruleset into
mutually exclusive subsets of rules to reduce the overhead of
packet ﬁltering.
In OPTWALL, the processing of a packet at a ﬁrewall starts
at the root of the hierarchical structure. The packet is subse-
quently forwarded to the remaining levels of the hierarchy for
further processing. Packet processing completes if a match
between the attributes of the packet, as deﬁned by the ﬁrewall
security policy, occurs. In this case, the action, deﬁned by
the corresponding ﬁrewall rule, is enforced. Alternatively, on
a non-match, a default action is invoked. The default action
can either be accept, in which case the packet is forwarded
to destination, or reject, in which case the packet is dropped.
In the following, a formal speciﬁcation of the objective and
basic operation of OPTWALL are discussed.
A. OPTWALL Design Goals
Given a large rule set,
the objective of OPTWALL is to
partition this set into ‘K’ mutually exclusive subsets. Each
subset is associated with a unique ﬁlter which represents a
superset of the associated policy subset.
The hierarchical approach of the OPTWALL architecture is
driven by three main design goals:
1) Reduce the cost of processing the ﬁrewall rule set,
deﬁned at the average processing time a packet incurs
before an action is enforced by the ﬁrewall,
2) Preserve the semantics of the original rule set, and
3) Maintain the optimality of the rule set as trafﬁc patterns
and rule sets change.
It is to be noted that in its general form the ‘K-partition’
problem is NP hard, as it can be reduced to the ‘Clustering’ [4]
or the ‘K-median’ problem [5]. Figure 1 depicts the process
of partitioning N rules into K subsets.
To address the complexity of the partitioning problem,
OPTWALL uses an iterative approach to partition the original
set of rules and produce a multi-level hierarchy of mutually
exclusive, cost-balanced rule subsets. Initially, the rule set is
divided into two subsets and ﬁlters, which covers the rules
contained in each subset, are developed. The resulting subsets,
along with their corresponding ﬁlters, form the ﬁrst level of the
hierarchy. This iterative process continues until further division
of the subsets at the current level of the hierarchy is no longer
cost effective. Note that this cost also includes the cost of
determining the ﬁlters. The OPTWALL partitioning process is
described in Figure 2.
In the following sections we will present the processes used
to achieve each of OPTWALL design goals. We ﬁrst describe
1The metric used in this paper follow the same guideline as in [3].
Rule 1 
Rule 2 
Rule 3 
. 
. 
. 
. 
. 
. 
Rule N 
Rule Subset1 
Rule Subset2 
Filter 2 
Filter 1 
                       .                                        . 
                       .                                        . 
                       .                                        .  
                       .                                        . 
                       .                                        . 
                  Filteri   ∩  Filterj  =  φ,  
Filter K 
Rule SubsetK 
N >>> K  
List Based Firewall Rule Set               K-Partition Rule Subsets  
                    (N Rules) 
Fig. 1: N rules into K partition problem
Rule 1 
Rule 2 
Rule 3 
. 
. 
. 
. 
. 
. 
Rule N 
Rule  
SubsetL1 
Rule  
SubsetL2 
F11 
F22 
FL1 
F21            
                                                 . . . . . . . . . 
                                                 . . . . . . . . . . 
                                                                            .                   . 
                                                                            . 
                                                 . . . . . . . . . .        .                   . 
                                                                            . 
                                                                            .                   . 
                                                                            . 
                                                 . . . . . . . . . 
FLK 
FL2 
F23 
F24 
F12 
Rule  
SubsetLK 
Fi   ∩  Fj  =  φ,  
List Based Firewall Rule Set    
(N Rules)    
N >>> K  (F = Filter) 
OPTWALL 
Hierarchical K-Partition Rule Subsets 
Fig. 2: Basic operation of OPTWALL
the multi-level data structure composed of rule subsets and
their corresponding ﬁlters. We then discuss the procedure used
to build the OPTWALL hierarchical structure and the actions
required to maintain this structure.
B. Data Structure
In order to process the rules, OPTWALL uses a hierarchical
data structure in which the deepest level of the hierarchy
contains the rule subsets and the intermediate levels contain
ﬁlters which cover the rules included in those subsets.
The design of the data structure must ensure that
the
operational cost is reduced. The design must also ensure that
the semantic integrity of the original rule set is preserved.
It is to be noted that the operational cost is determined by
the deepest rule subset. Balancing the hierarchical structure
in order to reduce the length of the deepest rule subset
is, therefore, vital if the desire is to achieve the maximum
reduction in processing cost. Furthermore, the data structure
must be designed in such a way that the re-balancing process,
in response to trafﬁc changes, can be achieved with minimal
overhead.