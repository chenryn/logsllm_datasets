# OPTWALL: A Hierarchical Traffic-Aware Firewall

**Authors:**
- Subrata Acharya
- Bryan N. Mills
- Mehmud Abliz
- Taieb Znati
- Jia Wang
- Zihui Ge
- Albert G. Greenberg

**Affiliations:**
- **University of Pittsburgh, Pittsburgh, PA 15260, USA**
  - Subrata Acharya, Mehmud Abliz, Bryan Mills, Taieb F. Znati
  - (sacharya, mehmud, bmills, znati)@cs.pitt.edu
- **AT&T Labs Research, Florham Park, NJ 07932, USA**
  - Jia Wang, Zihui Ge, Albert Greenberg
  - (jiawang, gezihui, albert)@research.att.com

## Abstract
The overall efficiency, reliability, and availability of a firewall are crucial for enforcing and administering security, especially during network attacks. The continuous growth of the Internet and the increasing sophistication of attacks place stringent demands on firewall performance. These challenges necessitate new designs, architectures, and algorithms to optimize firewalls.

In this paper, we propose OPTWALL, an adaptive hierarchical firewall optimization framework aimed at reducing the operational cost of firewalls. The key features of OPTWALL include a hierarchical design, rule-splitting techniques, an online traffic adaptation mechanism, and a robust reactive scheme to counter malicious attacks, such as Denial-of-Service (DoS) attacks. To our knowledge, this is the first work to incorporate traffic characteristics into the design of an adaptive hierarchical firewall optimization framework.

To evaluate the performance of OPTWALL, we conducted a series of experiments using Linux ipchains. The evaluation used a large set of firewall policies and traffic traces managed by a Tier-1 ISP, providing security access for the ISP network and its business partners. Results show that OPTWALL has high potential to reduce the operational cost of firewalls, achieving a performance improvement of nearly 35% in heavily loaded network environments.

## 1. Introduction
The constantly evolving nature, scale, and scope of information technology environments, coupled with the increasing number and complexity of security threats, are forcing Tier-1 ISPs to adopt increasingly complex security policies and mechanisms. Firewalls are a cornerstone of most network defense systems and have proven effective in monitoring and regulating traffic. However, the efficiency of firewalls in protecting infrastructure depends not only on the integrity and coherence of the security policies they enforce but also on the speed at which these policies are implemented.

With dynamic changes in network load, topology, and bandwidth demand, firewalls are becoming a bottleneck. This creates a need for more efficient, highly available, and reliable firewalls. Optimizing firewalls remains a challenge for network designers and administrators. A typical modern firewall enforces its security policies through a set of multi-dimensional packet filters (rules). Optimization of this multi-dimensional structure is known to be an NP-hard problem [1], [2]. This has motivated the research community to focus on various approaches to provide reliable and dependable firewall optimization methods. Despite a strong focus on efficient design, current techniques are static and fail to adapt to dynamic traffic changes. They do not consider traffic characteristics in their design and optimization, leading to inefficiencies under adverse conditions.

The primary objective of this paper is to address the shortcomings of current firewalls and enhance their ability to handle dynamic changes in network load and topology, particularly during attacks. We propose a hierarchical framework for traffic-aware firewall optimization. The fundamental principle of this framework is that next-generation firewalls must leverage their packet inspection capabilities with traffic awareness to optimize the operational cost of defending against intrusions and DoS attacks.

Traffic-aware firewall optimization is challenging due to the large number of security policies a firewall must enforce for enterprise networks and the limited resources of firewalls relative to the increased network capacity to process and forward traffic at high speeds. This paper focuses on optimizing the most widely used 'list-based' firewalls. We propose a hierarchical firewall optimization approach to create a load-balanced policy subset, while maintaining the semantic integrity of the policy set at each level of the hierarchy.

The major contributions of this paper are:
- The design of OPTWALL, an adaptive hierarchical firewall optimization framework. In this framework, we propose an optimal solution to construct the hierarchy based on rule-splitting, while preserving the integrity of the original firewall rule set.
- A set of heuristics based on a trade-off between optimality, time complexity, and resource requirements to convert list-based firewall rule sets into integrity-preserving hierarchical rule subsets.
- An adaptive, traffic-aware protocol to detect and defend against traffic anomalies.
- An experimental study to assess the performance of the proposed solutions and measure the impact of dynamically exploiting traffic characteristics on firewall performance.

The rest of the paper is organized as follows: Section 2 describes the background on list-based firewalls. The rule cost metric is described in Section 3, and the OPTWALL framework is introduced in Section 4. Section 5 details the OPTWALL splitting design approaches. We present the evaluation and results in Section 6. Section 7 discusses related work, and we conclude the paper in Section 8.

## 2. List-Based Firewalls
A security rule is a multi-dimensional structure where each dimension is either a set of network fields or an action field. The rule set defines the security policies that must be enforced by the firewall.

In an Internet environment, a rule is defined by a set of source IP addresses, a set of destination IP addresses, a set of service types, and an action field. The service type typically includes both the underlying protocol type and a port number. The action field can be either accept, deny, or forward. An accept action allows the packet access into the protected domain, a deny action rejects a packet in violation of the security policy, and a forward action leads to further inspection of the packet.

Formally, a rule \( R \) can be represented as \( R = [\beta_1, \beta_2, \ldots, \beta_k, \alpha] \), where \( \beta_j \) represents network fields and \( \alpha \) is an action field. An instance of a rule can be expressed as:
\[ R = \langle S, D, P, \alpha \rangle \]
where \( S \) is the set of source IP addresses, \( D \) is the set of destination IP addresses, and \( P \) is the set of service types.

The cost of a given rule \( R_i \) is defined as:
\[ \text{Cost}(R_i) = h_i \cdot \left( \sum_{j=1}^{k} \text{Size}(\beta_j) + \text{Size}(\alpha) \right) \]
where \( h_i \) is a weight parameter, and \( \text{Size}(\beta_j) \) and \( \text{Size}(\alpha) \) are the sizes of the network fields and the action field, respectively.

The second metric used in our experimentation is the cost of operating on a given rule set. This cost depends on the rule's rank and size, and how often the rule is invoked. Using these metrics, the aim of optimization is to reduce the rule set size and consequently the processing time, thereby reducing the overall firewall operational cost. The resources that affect this are the CPU utilization and memory usage of the firewall machine.

## 4. OPTWALL
Contrary to a list-based structure, a hierarchical design leads to efficient organization of rule sets, significantly improving the performance of the firewall. OPTWALL uses a hierarchical approach to partition the original rule set into mutually exclusive subsets of rules to reduce the overhead of packet filtering.

In OPTWALL, the processing of a packet at a firewall starts at the root of the hierarchical structure. The packet is subsequently forwarded to the remaining levels of the hierarchy for further processing. Packet processing completes if a match between the attributes of the packet, as defined by the firewall security policy, occurs. In this case, the action defined by the corresponding firewall rule is enforced. Alternatively, on a non-match, a default action is invoked. The default action can either be accept, in which case the packet is forwarded to the destination, or reject, in which case the packet is dropped.

### 4.1. OPTWALL Design Goals
Given a large rule set, the objective of OPTWALL is to partition this set into \( K \) mutually exclusive subsets. Each subset is associated with a unique filter that represents a superset of the associated policy subset.

The hierarchical approach of the OPTWALL architecture is driven by three main design goals:
1. **Reduce the cost of processing the firewall rule set**, defined as the average processing time a packet incurs before an action is enforced by the firewall.
2. **Preserve the semantics of the original rule set**.
3. **Maintain the optimality of the rule set as traffic patterns and rule sets change**.

It is noted that in its general form, the 'K-partition' problem is NP-hard, as it can be reduced to the 'Clustering' [4] or the 'K-median' problem [5]. Figure 1 depicts the process of partitioning \( N \) rules into \( K \) subsets.

To address the complexity of the partitioning problem, OPTWALL uses an iterative approach to partition the original set of rules and produce a multi-level hierarchy of mutually exclusive, cost-balanced rule subsets. Initially, the rule set is divided into two subsets, and filters covering the rules contained in each subset are developed. The resulting subsets, along with their corresponding filters, form the first level of the hierarchy. This iterative process continues until further division of the subsets at the current level of the hierarchy is no longer cost-effective. Note that this cost also includes the cost of determining the filters. The OPTWALL partitioning process is described in Figure 2.

In the following sections, we will present the processes used to achieve each of OPTWALL's design goals. We first describe the multi-level data structure composed of rule subsets and their corresponding filters. We then discuss the procedure used to build the OPTWALL hierarchical structure and the actions required to maintain this structure.

### 4.2. Data Structure
To process the rules, OPTWALL uses a hierarchical data structure in which the deepest level of the hierarchy contains the rule subsets, and the intermediate levels contain filters that cover the rules included in those subsets.

The design of the data structure must ensure that the operational cost is reduced while preserving the semantic integrity of the original rule set. The operational cost is determined by the deepest rule subset. Balancing the hierarchical structure to reduce the length of the deepest rule subset is vital to achieve the maximum reduction in processing cost. Furthermore, the data structure must be designed to allow re-balancing in response to traffic changes with minimal overhead.

---

**Figures:**

**Figure 1: N Rules into K Partition Problem**
```
Rule 1 
Rule 2 
Rule 3 
. 
. 
. 
. 
. 
. 
Rule N 
Rule Subset1 
Rule Subset2 
Filter 2 
Filter 1 
                       .                                        . 
                       .                                        . 
                       .                                        .  
                       .                                        . 
                       .                                        . 
                  Filteri   ∩  Filterj  =  φ,  
Filter K 
Rule SubsetK 
N >>> K  
List Based Firewall Rule Set               K-Partition Rule Subsets  
                    (N Rules) 
```

**Figure 2: Basic Operation of OPTWALL**
```
Rule 1 
Rule 2 
Rule 3 
. 
. 
. 
. 
. 
. 
Rule N 
Rule  
SubsetL1 
Rule  
SubsetL2 
F11 
F22 
FL1 
F21            
                                                 . . . . . . . . . 
                                                 . . . . . . . . . . 
                                                                            .                   . 
                                                                            . 
                                                 . . . . . . . . . .        .                   . 
                                                                            . 
                                                                            .                   . 
                                                                            . 
                                                 . . . . . . . . . 
FLK 
FL2 
F23 
F24 
F12 
Rule  
SubsetLK 
Fi   ∩  Fj  =  φ,  
List Based Firewall Rule Set    
(N Rules)    
N >>> K  (F = Filter) 
OPTWALL 
Hierarchical K-Partition Rule Subsets 
```