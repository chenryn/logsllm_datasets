memory.soft_limit_in_bytes
memory.pressure_level
tasks
notify_on_release
memory.usage_in_bytes
memory.swappiness
memory.stat
memory.numa_stat
---
## Page 243
所示。
系统中创建，并且这个可读写的层被添加到镜像中。如图18-3
系统并且挂载一个新的可读写的层给容器，容器会在这个文件
量地修改（不影响只读部分）。
有一个类似分层的概念，对只读权限的分支可以逻辑上进行增
读写（readwrite）和写出（whiteout-able）权限，同时AUFS里
支持为每一个成员目录（类似Git的分支）设定只读（readonly）
layered Unification File System）就是一种联合文件系统。AUFS
（增量部分）。这让Docker的镜像管理变得十分轻量级和快速。
者重新建立，只需要添加新层即可。用户分发镜像的时候，也只需要分发被改动的新层内容
升级程序到新的版本），则一个新的层（layer）会被创建。因此，用户不用替换整个原镜像或
镜像共享同一个基础镜像层，提高了存储效率。此外，当用户改变了一个Docker镜像（比如
当Docker利用镜像启动一个容器时，将利用镜像分配文件
用户基于基础镜像（没有父镜像的镜像被称为基础镜像）来制作各种不同的应用镜像。这些
修改信息作为一次提交，并层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。
18.4
联合文件系统是实现Docker镜像的技术基础。镜像可以通过分层来进行继承。例如，
Docker中使用的AUFS（AnotherUnionFile System，或v2版本往后的Advanced Multi
联合文件系统（UnionFS）是一种轻量级的高性能分层文件系统，它支持将文件系统中的
注意
在开发容器工具时，往往需要一些容器运行状态数据，这时就可以从这里得到更多的信息。
total_unevictable0
total_active_file0
total_inactive_file
total_active_anon 107384832
total_inactive_anon 12288
total_pgmajfault0
total_pgfault 115722
total_pgpgout 52634
total_pgpgin 74766
total_writeback0
total_mapped_file0
联合文件系统
参数来调整容器使用内存的大小。
shares[=O】参数来调整容器使用CPU的权重；使用-m|--memory[=MEMORY]
可以在创建或启动容器时候为每个容器指定资源的限制，例如使用-cI--cpu-
0
第18章Docker核心技术
witable Container
图18-3联合文件系统
喜
Contal
0.81
229
---
## Page 244
值bridge、host、container和none：
网络。
pair）。如图18-4所示。
口，并让它们彼此连通（这样的一对接口叫做veth
络技术。它在本地主机和容器内分别创建一个虚拟接
并无区别，只是它速度要快得多。
器内系统来看，虚拟接口跟一个正常的以太网卡相比
通过外部物理网络设备进行交换。对于本地系统和容
据包将被直接复制到接收接口的接收缓存中，而无需
接口之间的数据转发，即发送接口的发送缓存中的数
是因为Linux通过在内核中进行数据复制来实现虚拟
界相通，并可以收发数据包；此外，如果不同子网之间要进行通信，需要额外的路由机制。
veth pair）。熟悉这两部分的基本概念，可以有助于理解Docker网络的实现过程。
18.5
230
另外，可以在docker运行的时候通过--net 参数来指定容器的网络配置，有4个可选
Docker容器网络就很好地利用了Linux虚拟网
Docker中的网络接口默认都是虚拟的接口。虚拟接口的最大优势就是转发效率极高。这
完成这些之后，容器就可以使用它所能看到的etho虚拟网卡来连接其他容器和访问外部
2.网络创建过程
直观上看，要实现网络通信，机器需要至少一个网络接口（物理接口或虚拟接口）与外
Docker的网络实现其实就是利用了Linux上的网络命名空间和虚拟网络设备（特别是
口从网桥可用地址段中获取一个空闲地址分配给容器的eth0（例如172.17.0.2/16），并配
口本地主机一端的虚拟接口连接到默认的dockerO网桥或指定网桥上，并具有一个以
Docker创建一个容器的时候，会具体执行如下操作：
1.基本原理
Docker 目前支持的联合文件系统种类包括AUFS、btrfs、vfs 和 DeviceMapper 等。
器的命名空间可见。
口容器一端的虚拟接口将放到新创建的容器中，并修改名字作为eth0。这个接口只在容
口创建一对虚拟接口，分别放到本地主机和新容器的命名空间中。
veth开头的唯一名字，如veth1234。
第三部分高级话题
置默认路由网关为docker0网卡的内部接口docker0的IP地址（例如172.17.42.1/16）。
Docker网络实现
172702
图18-4
veth
veth
Docker的网络实现
网桥dockero
vet
192.168.100.100
物理主机
---
## Page 245
和默认网关：
网络的整个过程。通过这个过程，可以了解到Docker配置网络的更多细节。
将B接口放到容器的网络命名空间，命名为etho，启动它并配置一个可用IP（桥接网段）
$ sudo ip link add A type veth peer name B
创建一对“veth pair”接口A和B，绑定A接口到网桥dockero，并启用它：
inet172.17.42.1/16 scope global docker0
21:docker0:
$ip addrshowdocker0
检查桥接网卡的IP和子网掩码信息：
在本地主机查找容器的进程id，并为它创建网络命名空间：
root@63f36fc01b5f:/#
$sudo docker run -i-t--rm --net=none base /bin/bash
首先，启动一个/bin/bash容器，指定--net=none参数：
用户使用--net=none后，Docker将不对容器网络进行配置。下面，将手动完成配置
3.网络配置细节
口--net=none：让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置。之
口--net=container：让Docker将新建容器的进程放到一个已存在容器的网络栈中
口--net=host：告诉Docker不要将容器网络放到隔离的命名空间中，即不要容器化
口--net=bridge：默认值，在Docker 网桥上为容器创建新的网络栈。
sudobrctl addif docker0 A
sudo 1n -s/proc/$pid/ns/net/var/run/netns/Spid
sudomkdir-p/var/run/netns
pid=2778
778
sudo docker inspect-f'{(.State.Pid}}63f36fc01b5f
后，用户可以自己进行配置。
地址和端口等网络资源，两者进程可以直接通过lo环回接口通信。
新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP
容器甚至会被允许直接配置主机的网络堆栈。
使用这个选项的时候要非常小心。如果进一步的使用--privileged=true参数，
务比如D-bus，还可以让容器做一些影响整个主机系统的事情，比如重启主机。因此
限。容器进程可以跟主机其他root进程一样打开低范围的端口，可以访问本地网络服
容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权
第18章Docker核心技术231
---
## Page 246
调整系统配置来优化容器性能，这些都需要有丰富的Linux系统运维知识和实践经验。
Linux上成熟的容器技术支持是分不开的。在实际使用Docker容器的过程中，还将涉及如何
操作系统中的命名空间、控制组、联合文件系统、虚拟网络支持等。
18.6本章小结
令在指定网络命名空间中进行配置，从而影响容器内的网络。
A接口也被自动从docker0卸载并清除。
232第三部分高级话题
从本章的讲解中读者可以看到，Docker的优秀特性与Linux操作系统的强大、特别是与
此外，在删除/var/run/netns/下的内容之前，用户可以使用ipnetnsexec命
本章具体剖析了Docker实现的一些核心技术，包括它的基本架构，以及所依赖的Linux
当容器终止后，Docker会清空容器，
以上就是Docker配置网络的具体过程。
$sudoip
$sudo ip netns exec $pid ip
$sudo ip link set Bnetns Spid
netnsexec $pid ipaddr add 172.17.42.99/16deveth0
link
，容器内的网络接口会随网络命名空间一起被清除
set
dev B name eth0
---
## Page 247
公共端口或使用连接系统，容器可以相互通信了（用户可以根据配置来限制通信的策略）。
上做了相应的交换设置，容器可以像跟主机交互一样的和其他容器交互。启动容器时，指定
容器的套接字（sockets）或接口。当然，容器默认可以与本地主机网络连通，如果主机系统
上的进程和其他容器通过正常渠道发现和影响。
run启动一个容器时，Docker将在后台为容器创建一个独立的命名空间。
19.1命名空间隔离的安全
安全性时，主要考虑下面几个方面：
Docker的安全性在生产环境中是十分关键的衡量因素。
地系统中的进程，本质上并无区别，不合适的安全策略将可能给本地系统带来风险。因此，
例如，通过命名空间机制，每个容器都有自己独有的网络栈，意味着它们不能访问其他
命名空间提供了最基础也是最直接的隔离，在容器中运行的进程不会被运行在本地主机
Docker容器的安全性，很大程度上其实依赖于Linux系统自身，因此在评估Docker 的
Docker容器和LXC容器在实现上很相似，所提供的安全特性也基本一致。当用docker
口其他安全增强机制（包括AppArmor、SELinux等）对容器安全性的影响。
口Linux内核的能力机制所带来的操作权限安全。
OLinux控制组机制对容器资源的控制能力安全。
口Linux内核的命名空间机制提供的容器隔离安全。
Docker是在Linux操作系统层面上的虚拟化实现，运行在容器内的进程，跟运行在本
口Docker程序（特别是服务端）本身的抗攻击性。
Docker安全
第19章
Chiayptes19
---
## Page 248
root权限。那么它只需要被授权net_bind_service能力即可。此外，
以作用在进程上，也可以作用在文件上。
Linux内核自2.2版本起支持能力机制，它将权限划分为更加细粒度的操作能力，既可
root用户）两种。
传统的Unix系统对进程权限只有根权限（用户id为0，即为root用户）和非根权限（用户非
19.3
行而不受影响。
组十分重要。例如，当某些应用容器出现异常的时候，可以保证本地系统和其他容器正常运
击（DDoS）方面是必不可少的。尤其是在多用户的平台（比如公有或私有的PaaS）上，控制
机系统和其他容器。
IO等资源；当然，更重要的是，控制组确保了当发生在容器内的资源压力不会影响到本地主
dockerrun启动一个容器时，Docker将在后台为容器创建一个独立的控制组策略集合。
19.2
整性和正确性。
上，Docker自1.30版本起对镜像管理引人了签名系统，用户可以通过签名来验证镜像的完
的（这跟保证运行在系统中的软件是可信的一个道理），否则本地系统将可能受到威胁。实际
的应用可以直接访问系统内核和部分系统文件。因此，用户必须保证容器中应用是安全可信
OpenVZ项目早在2005年就已经正式发布，其设计和实现更加成熟。
化和改进，并应用于诸多大型生产系统中。
相互通信，就像物理机器通过物理交换机通信一样。
234
例如，一个Web服务进程只需要绑定一个低于1024的端口的权限，并不需要完整的
能力机制（Capability）是Linux内核一个强大的特性，可以提供细粒度的权限访问控制。
尽管控制组不负责隔离容器之间相互访问、处理数据和进程，但是它在防止拒绝服务攻
当然，与虚拟机方式相比，通过命名空间来实现的隔离并不是那么绝对。运行在容器中
实际上，命名空间的想法和设计提出的时间要更早，最初是OpenVZ项目的重要特性。
控制组机制始于2006年，Linux内核从2.6.24版本开始被引入。
控制组是Linux容器机制中的另外一个关键组件，它负责实现资源的审计和限制。当用
Linux内核从2.6.15版本（2008年7月发布）开始引入命名空间，至今经历了数年的演
那么，Linux内核中实现命名空间（特别是网络命名空间）的机制是否足够成熟呢？
从网络架构的角度来看，所有的容器实际上是通过本地主机的网桥接口（DockerO）进行
它提供了很多有用的特性；以及确保各个容器可以公平地分享主机的内存、CPU、磁盘
第三部分高级话题
内核能力机制
控制组资源控制的安全
，还有很多其他的类似能力
---
## Page 249
就可以对主机的文件系统进行任意修改了。事实上，几乎所有虚拟化系统都允许类似的资源
如，恶意用户启动容器的时候将主机的根目录／映射到容器的/host目录中，那么容器理论上
容器间共享文件夹，同时不需要限制容器的访问权限，这就容易让容器突破资源限制。例
持，因此服务端安全性十分关键。
19.4
用户也可以根据自身需求来为Docker容器启用额外的权限。
系统调用访问到本地系统的任意文件目录。
Docker版本曾经不恰当的继承CAP_DAC_READ_SEARCH能力，导致容器内进程可以通过
的破坏也有限。
要少数的能力即可。为了加强安全，容器可以禁用一些没必要的权限。
系统来进行管理。
络配置工具等等。容器跟这些进程是不同的，因为几乎所有的特权进程都由容器以外的支持
需要特权权限的进程，包括有ssh、cron、syslogd、硬件管理工具模块（例如负载模块）网
sys_chroot、mknod、setfcap、audit_write等。
chown、dac_override、fowner、kill、setgid、setuid、setpcap、net _bind_service、net _raw
默认情况下，Docker启动的容器被严格限制只允许使用内核的一部分能力，包括
来避免进程获取root权限。
默认情况下，Docker采用“白名单”机制，禁用“必需功能”之外的其他权限。当然，
使用能力机制对加强Docker容器的安全性有很多好处。通常，在服务器上会运行一堆
首先，必须确保只有可信的用户才可以访问到Docker服务。Docker允许用户在主机和
使用Docker容器的核心是Docker服务端。Docker服务的运行目前还需要root权限的支
不恰当地分配了内核能力，会导致容器内应用获取破坏本地系统的权限。例如，早期的
从上面的例子可以看出，大部分情况下，容器并不需要“真正的”root权限，容器只需
这样，就算攻击者在容器中取得了root权限，也不能获得本地主机的较高权限，能进行
日志系统可由Docker或第三方服务管理。
口ssh访问被宿主主机上的ssh服务来管理。
口禁止模块加载。
口禁止访问一些文件系统的操作，比如创建新的设备、修改文件属性等。
口禁止直接访问本地主机的套接字。
口完全禁止任何文件挂载操作。
口网络管理也都在主机上设置，除非特殊需求，容器不需要对网络进行配置。
口硬件管理无关紧要，容器中也就无需执行udevd以及类似服务。
口cron通常应该作为用户进程执行，权限交给使用它服务的应用来处理。
Docker服务端的防护
第19章Docker安全235
---
## Page 250
但无法对它们进行修改。
限于/proc/sys、/proc/irq、/proc/bus等等。这样，容器内应用进程可以获取所需要的系统信息
容器内的应用通过文件系统破坏外部环境，特别是一些系统运行状态相关的目录，包括但不
主机的安全，例如：
性，例如TOMOYO，AppArmor，SELinux，GRSEC等。
19.5其他安全特性
从根本上解决了容器和主机之间共享文件系统而引起的安全问题。
外，还可以使用HTTPS和证书来加强保护。坚求餐
或VPN网络，或证书保护机制（例如受保护的stunnel和ssl认证）下的访问可以进行。此
后者容易遭受跨站脚本攻击。现在用户使用Unix权限检查来加强套接字的访问安全。
0.5.2之后使用本地的Unix套接字机制替代了原先绑定在127.0.0.1上的TCP套接字，因为
Docker当前默认只启用了能力机制。用户可以选择启用更多的安全方案来加强Docker
器），要更加注意进行参数的安全检查，防止恶意的用户用特定参数来创建一些破坏性的容器。
这将会造成很严重的安全后果。因此，当提供容器创建服务时（例如通过一个web服务
共享，而没法阻止恶意用户共享主机根文件系统到虚拟机系统。
236第三部分高级话题
用户仍可以利用HTTP提供RESTAPI访问。建议使用安全机制，确保只有可信的网络
此外，在将文件系统挂载到容器内部时候，可以通过配置只读（read-only）模式来避免
口在内核中启用GRSEC和PAX，这将增加更多的编译和运行时的安全检查；并且通过
最近改进的Linux命名空间机制将可以实现使用非root用户来运行全功能的容器。这将
口使用一些有增强安全特性的容器模板，比如带AppArmor的模板和Redhat带SELinux
除了能力机制之外，还可以利用一些现有的安全软件或机制来增强使用Docker的安全
目前，Docker自身改进安全防护的目标是实现以下两个重要安全特性：
为了加强对服务端的保护，Docker的RESTAPI（客户端用来跟服务端通信的接口）在
口用户可以自定义更加严格的访问控制机制来定制安全策略。
口允许Docker服务端在非root权限下运行，利用安全可靠的子进程来代理执行需要特
口将容器的root用户映射到本地主机上的非root用户，减轻容器和主机之间因权限提
策略的模板。这些模板提供了额外的安全特性。
地址随机化机制来避免恶意探测等。启用该特性不需要Docker进行任何配置。山
升而引起的安全问题。
设定或文件系统管理、配置操作等。
权权限的操作。这些子进程将只允许在限定范围内进行操作，例如仅仅负责虚拟网络
---
## Page 251
程中，需要注意如下几方面：
Docker容器还是比较安全的，特别是在容器内不使用root权限来运行进程的话。
19.6本章小结
，但是任何技术层面实现的安全都需要用户合理的使用才能得到巩固，在使用Docker过
总体来看，基于Linux上成熟的安全机制以及Apparmor,SELinux,GRSEC等安全机制，
口随着容器大规模地使用和集成，甚至组成容器集群。需要考虑在容器网络上进行必备
口将运行Docker容器的机器划分为不同的组，
口采用专用的服务器来运行Docker服务端和相关的管理服务（例如管理服务比如ssh监
口在使用Docker容器运行应用的时候，
间进行安全隔离；同时进行定期的安全检查。
环境需要关注的重要问题。
的安全防护，避免诸如DDoS、ARP攻击、规则表攻击等网络安全威胁，这也是生产
控和进程监控、管理工具nrpe、collectd等），并对该服务器启用最高级别的安全机制。
手段，都应该进行合理地利用。
有那么完善，需要加强对容器内应用的安全审查。容器即应用，保障应用安全的各种
而把其他的业务服务都放到容器中去运行。
一定要牢记容器自身所提供的隔离性其实并没
互相信任的机器放到同一个组内；组之
第19章Docker安全237
TOS
---
## Page 252
20.1网络启动与配置参数
Chaprte20
主机和所有容器之间一个虚拟共享网络。如图20-1所示。
这种方式，主机可以跟容器通信，容器之间也可以相互通信。如此一来，Docker就创建了在
另一端在本地并被挂载到docker0网桥，名称以veth开头（例如vethAQI2QT）。通过
一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即eth0；
内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。
给docker0接口。比如典型的172.17.42.1，掩码为255.255.0.0。此后启动的容器
桥，可以理解为一个软件交换机。它会在挂载其上的接口之间进行转发。
来调整、补充、甚至替换Docker默认的网络配置。
使用配置、容器访问和端口映射的相关实现。
同时，Docker随机分配一个本地未占用的私有网段（在RFC1918中定义）中的一个地址
接下来，笔者将介绍在一些场景中，Docker所有的网络定制配置。以及通过Linux命令
本章将介绍Docker的一些关于网络的高级知识，包括网络的启动和配置参数、DNS的
Docker启动时会在主机上自动创建一个dockerO虚拟网桥，实际上是一个Linux网
1.基本过程
最后，将介绍关于Docker网络的一些工具和项目。
高级网络配置
第20章
8181
---
## Page 253