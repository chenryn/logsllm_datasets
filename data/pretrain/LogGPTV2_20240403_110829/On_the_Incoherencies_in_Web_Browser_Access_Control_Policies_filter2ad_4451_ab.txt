ACCESS CONTROL POLICY FOR A WINDOW’S LANDLORD AND TENANT (BEING A DIFFERENT PRINCIPAL FROM THE LANDLORD) ON GAZELLE, IE 8,
FIREFOX 3.5, AND CHROME. RW*: THE URL IS READABLE ONLY IF THE LANDLORD SETS IT. IF THE TENANT NAVIGATES TO ANOTHER PAGE, LANDLORD WILL NOT
SEE THE NEW URL. W*: THE LANDLORD CAN WRITE PIXELS WHEN THE TENANT IS TRANSPARENTLY OVERLAID ON THE LANDLORD.
Table III
policy. (We elaborate in Section II-C3 that the descendant
navigation policy is at conﬂict with DOM’s SOP.) Our tests
indicate that Firefox 3.5 and Chrome 2 currently support
the child policy, while IE 8 supports the descendant policy.
All major browsers allow any window to navigate the top-
level window, while Gazelle only allows top-level window
navigation from the top-level window’s tenant and the user.
XMLHttpRequest allows a web site principal to use scripts
to access its document origin’s remote data store by issuing
an asynchronous or synchronous HTTP request to the remote
server [14]. XMLHttpRequest2 [15] and XDomainRequest
have been recently proposed and implemented in major
browsers to allow cross-origin communications with remote
servers, where HTTP authentication data and cookies are not
sent by default. These networking capabilities are not shared
and strictly belongs to a web site principal labeled with a
SOP origin.
PostMessage is a recently proposed client-side cross-
origin communication mechanism that is now implemented
in all major browsers. This is also a web site principal’s
capability which is not shared with any other principals.
The last three resources in the non-shared resource table,
namely clipboard, browser history, and geolocation, all be-
long to the user principal, and web applications should not be
able to access them directly. However, they are all accessible
by scripts through the DOM API, causing problems that we
describe in Section II-E.
C. The interplay of the resources
From the enumeration of the resources and their respective
principal or owner deﬁnition in the above section, we derived
the following problematic pairs of resources, where the two
resources interplay and their principal or owner deﬁnitions
differ: DOM-cookie, cookie-XMLHttpRequest, and DOM-
display. We elaborate on these interplays below.
1) DOM and Cookies: DOM and cookies interplay be-
cause scripts are able to create or modify cookies by using
the document.cookie property in the DOM API.
With no protocol in cookie’s principal deﬁnition, cookies
are vulnerable to information leaks. A cookie intended for
a secure HTTPS principal can be passed over HTTP and
be exposed to network attackers. This can be prevented
Figure 1.
policies of DOM and cookies
Incoherency arises from the interplay between the access control
by setting the cookie with the “secure” ﬂag. However, a
”secure” cookie can still be set by an HTTP response
and be accessed by scripts belonging to an HTTP page as
long as their domains are the same. Additionally, different
services running on different ports of the same domain can
access each other’s cookies. Moreover, the path protection
of cookies becomes ineffective as a script from a different
path can access the cookie based on SOP.
The interplay between DOM and cookies also allows the
scripts to set the effective domain of a cookie to any sufﬁx
of the original domain by setting the domain attribute of
the cookie. This can lead to inconsistencies in the current
browsers. Figure 1 shows a scenario in which such inconsis-
tencies lead to an undeﬁned behavior in the browsers. In this
example, a cookie named “stockCookie” with value “buy”
is stored in the cookie store for the domain a.com. A script
injected into a compromised page belonging to x.a.com
can create another cookie with the same name but with a
different value “sell” while setting its domain attribute to
a.com.
While this leads to a compromised state in the current
browsers, different browsers deviate in their behavior cre-
ating further inconsistencies in the web applications sup-
porting multiple browsers. Firefox 3 sets this cookie with
a domain value of .a.com resulting in multiple cookies
with the same name in browser’s cookie store. The browser
attaches both cookies (genuine cookie with domain a.com
and evil cookie with domain .a.com) to any server requests
to a.com. The server only receives the cookie’s name-
value pair without any information about its corresponding
domain. This results in the server receiving two cookies with
the same name. Since server-side behavior is not deﬁned in
case of duplicate cookies [9], it leads to inconsistent state at
a.com’s server. In case of IE 8, the original cookie value
is overwritten and only the wrong cookie value is received
by the server.
2) Cookies and XMLHttpRequest: Cookies and XML-
HttpRequest
interplay because XMLHttpRequest can set
cookie values by manipulating HTTP headers through
scripts. XMLHttpRequest’s owner principal is labeled by the
SOP origin, while cookie has a different principal deﬁnition
(Section II-B).
should
not
be
If a server ﬂags a cookie as “HttpOnly”, the browser
prevents any script from accessing (both reading and writing)
the cookie using the document.cookie property. This
effectively prevents cookies being leaked to unintended
parties via cross-site scripting attacks [16].
The purpose of HttpOnly cookies
that
such
client-side
cookies
touched
created and
scripts. However, XMLHttpRequests
and certain
invoked by client-side
facilitate
methods
and
access
the
getAllResponseHeaders allow reading
“Set-cookie” header, and this header includes the value of
HttpOnly cookies. Another method, setRequestHeader,
enables modiﬁcation of this header to allow writing to
HttpOnly cookies.
the XMLHttpRequest
cookies:
getResponseHeader
are
code,
JavaScript
is
by
object
of
to
of
Some of the latest browsers have tried to resolve this issue
with varied success. IE 8 currently prevents both read and
write to cookies via “Set-cookie” header, but still allows
access via “Set-cookie2” header [17]. Firefox has also recog-
nized and ﬁxed the issue for cookie reads: their ﬁx prevents
XMLHttpRequest from accessing cookie headers of any
response, whether or not the HttpOnly ﬂag was set for those
cookies [18]. This is a bold step taken by Firefox, as our
results show that a considerable number of web pages still
read cookie headers from XMLHttpRequest (Section IV).
However, we have still observed the writing issue with
HttpOnly cookies using Firefox 3.5. A script can set a cookie
with the same name as the HttpOnly cookie and can have a
different value set using the setRequestHeader method.
This results in a duplicate cookie being sent to the server,
thus creating an inconsistent state on the server side.
3) DOM and Display: One incoherence takes place on
URL location of a window. The descendant navigation
policy (Section II-B) is at conﬂict with DOM’s SOP. De-
scendant navigation policy allows a landlord to navigate
a window, a resource created by its descendant through a
DOM API, even if the landlord and the descendant are
different principals. This gives a malicious landlord more
powerful ways to manipulate a nested, legitimate sites than
just overdrawing: with overdrawing, a malicious landlord
can imitate a tenant’s content, but the landlord cannot send
messages to the tenant’s backend in the name of the tenant.
As an example attack, imagine that an attacker site nests
a legitimate trading site as its tenant. The trading site
further nests an advisory site and uses a script to interact
with the advisory window to issue trades to the trading
site backend (e.g., making a particular trade based on the
advisory’s recommendation shown in the URL fragment).
With just one line of JavaScript, the attacker could navigate
the advisory window (which is a descendant) and create
unintended trades.
Another conﬂict lies in the access control on the pixels
of a window. DOM objects are ultimately rendered into
the pixels on the screen. SOP demands non-interference
between the DOM objects of different origins. However,
existing browsers allow intermingling the landlord’s and
tenant’s pixels by overlaying transparent tenant iframes on
the landlord, deviating from the non-interference goal of
SOP. This enables an easy form of clickjacking attacks [19].
In contrast, Gazelle advocates cross-principal pixel isolation
in accordance with SOP (Table III, row “pixels”).
D. Effective Principal ID
Browsers allow cross-principal sharing for “related” sites
by allowing sites to change their principal ID via the
document.domain property [4]. This property can be
set
to sufﬁxes of a page’s domain to allow sharing of
pages across frames. For example, a page in one frame
from x.a.com and a page from www.a.com initially
cannot communicate with each other due to SOP restrictions.
This is one of the few methods for cross-origin frames to
communicate before the advent of postMessage [20]. How-
ever, changing document.domain violates the principle
of least privilege: once a subdomain sets its domain to its
sufﬁx, there is no control over which other subdomains can
access it.
Furthermore, almost no existing access control policies
of today’s browsers take such “effective” principal IDs into
consideration. In the following subsections, we examine
how the disregard of effective principal IDs leads to dual
identities and incoherencies exploitable by attackers. In our
attack model, an attacker owns a subdomain (through third-
party content hosting as in iGoogle or by exploiting a site
vulnerability). As we will show in the following sections,
the attacker can leverage document.domain to penetrate
the base domain and its other subdomains.
1) Cookie:
using
document.domain only modiﬁes the effective principal
ID for DOM access and does not impact the domain for
change
origin
Any
of
Figure 2. Lack of effective principal ID consideration in cookie’s access
control policy
Figure 3.
quest’s access control policy
Lack of effective principal ID consideration in XMLHttpRe-
cookie access. Figure 2 shows an attack to exploit this
inconsistent behavior of browser policy design. In this
scenario, a page 1.html in domain x.a.com changes it
effective domain to a.com. As a result, it can access the
DOM properties of other pages belonging to a.com, but
it can no longer access the pages of its original domain
x.a.com. However, since the effective domain does not
change for cookie access, the page still maintains access
to the cookies belonging to its original domain. This
inconsistent dual identity possessed by the page acts as a
bridge to access cookies from both the original domain and
the effective domain.
In order to launch the attack, an attacker (after owning
a subdomain page) ﬁrst assumes the identity of a.com
and subsequently injects a script into the page 1.html.
This injected script can now read and write the cookies
belonging to x.a.com including any cookies created later.
Effectively, if the attacker can compromise a page in one
of the subdomains, he can access the cookies of any other
subdomains that change their effective origin to the base
domain.
2) XMLHttpRequest: Change of origin for scripts does
not change the effective principal ID for XMLHttpRequest
usage. This enables a (malicious) script in a (compromised)
subdomain to issue XMLHttpRequest to the servers be-
longing to the base domain and its other subdomains. The
attack scenario is illustrated in Figure 3. Page 1.html
has changed its effective domain value to a.com from the
original value of x.a.com. With no effect on XMLHttpRe-
quest usage, scripts in 1.html can still make requests
to the server belonging to x.a.com. This again gives a
script a dual identity – one for DOM access (a.com) and
another for XMLHttpRequest (x.a.com). Therefore, an
attacker compromising any subdomain can inject a script
into 1.html via DOM access, and this script can then
make XMLHttpRequest calls to the original domain of the
page. Since a well-crafted XMLHttpRequest can change the
server-side state for the web application, and this state might
be shared between other pages within the domain x.a.com,
such attack can possibly impact all pages belonging to
x.a.com.
3) postMessage: postMessage also ignores
any
document.domain changes: if x.a.com changes do-
main to a.com and sends a message to y.b.com,
y.b.com still sees the message’s origin as x.a.com. Also,
if y.b.com changes its domain to b.com, x.a.com still
has to address messages to y.b.com for them to be deliv-
ered. This gives the attacker (with a compromised subdo-
main) an opportunity to send messages while masquerading
under the identity of another subdomain (Figure 4).
4) Storage: Based on our tests, IE 8 does not take any
document.domain changes into consideration for both
local storage and session storage. Firefox 3.5 also ignores
effective principal ID for local storage. However, for session
storage, any domain changes via document.domain are
considered: the old session storage is lost for the original
domain and a new session storage is created for the effective
principal.
Inconsistency arises when document.domain changes
are ignored (for both session storage and local storage in IE;
for only local storage in Firefox). An attacker (being able to
inject a script into one of the pages of any subdomain, say
x.a.com) can change its origin to the base domain a.com
and can successfully inject a script into the DOM of the base
domain or any other origins (e.g., y.a.com) that change
identity to the base domain. Since access control checks
on storage rely on original domain (i.e., y.a.com), the
malicious script can now freely access the storage belonging
The window object has a history property with an
array of user-visited URLs. Browsers have been denying any
site’s access to this array to protect user privacy, but they
do allow a site to navigate the browser back and forward in
history through the back() and forward() methods [8].
Worse, our tests indicate that Firefox 3 and Google Chrome
2 allow any child window to navigate the top-level window
back or forward in history irrespective of the origin. In
many cases this is just a nuisance, but some properly-crafted
history navigation by a malicious application can lead to
more severe damage. For example, the user might be tricked
to make multiple purchases of the same product.
We have also investigated synthetic event creation. The
DOM API allows a site to generate synthetic mouse or key-
board events through the document.createEvent()
method (or document.createEventObject() in IE).
In IE, a programmer could directly invoke a click()
method on any HTML element to simulate user clicks. These
techniques are useful for debugging purposes. To our delight,
all major browsers are careful not to let a web site to manip-
ulate another site’s user experience with these synthetic user
events. Note that it is benign for a site to simulate the user’s
actions for itself, since loading and rendering site content
can by itself achieve any effects of simulating user actions
(e.g., simulating a mouse click is equivalent of calling the
onclick function on the corresponding element).
2) Browser UI: An important part of the browser UI
is the current tab window, or top-level window. In today’s
browsers, any web site loaded in any window is able to repo-
sition and resize a top-level window through the moveTo,
moveBy, resizeTo, and resizeBy properties of the
top-level window. Resizing the currently active top-level
window effectively resizes the browser window. Firefox 3
allows an application to resize a browser window even in the
presence of multiple tabs, while IE 8 and Chrome 2 do not
allow this. A site can also open and close a top-level window
using open and close methods. The use of open method
has been mitigated through built-in popup blockers. IE 8
allows any frame to close a top-level window irrespective of
the origin, while Firefox 3 and Chrome 2 prevent this from
happening. These capabilities allow an attacker site (even
when deeply nested in the DOM hierarchy, say a malicious
ad) to directly interfere with the user’s experience with the
browser UI.
Some of the other loopholes in browser UI have already
been ﬁxed. For example, the status bar can no longer be set
by a web site.
3) User-private state: Jackson et al. have shown that a
user’s browsing history can be exposed by inspecting the
color of a visited hyperlink [21], raising privacy concerns.
The hyperlink’s color is intended for the user, and it is not
necessary for web sites to be able to read it.
The clipboard data also belongs exclusively to the
IE since 5.0 support
user principal. All versions of
Figure 4. Lack of effective principal ID consideration in postMessage
to y.a.com.
E. The User Principal
In this paper, we introduce the concept of the user prin-
cipal in the browser setting. The user principal represents
the user of the browser. Unfortunately, it has often been
neglected in browser access control policies.
While a web application does manage the user’s data
and experience for that particular application (e.g., a user’s
banking data at a banking site), certain browser resources
or data belong to the user exclusively and should not be
accessible by any web site without user permissions. Such
resources include: user’s private data, such as clipboard
data and geolocation; user actions, such as clicking on
the forward and back button; devices, such as camera and
microphone; and browser UI,
tab
window (top-level window).
including the current
Unfortunately, in today’s browsers, some of these re-
sources are directly exposed to web applications through
the DOM API. This breaks the fundamental rule of pro-
tecting resources belonging to different principals from one
another, as the user principal’s resources can be accessed
and manipulated by site principals. This can result in pri-
vacy compromises, information leaks, and attacks that trick