u var md5hash = "77f62e3524cd583d698d51fa24fdff4f"
var sha256hash = 
"95a5e1547df73abdd4781b6c9e55f3377c15d08884b11738c2727dbd887d4ced"
func main() {
    f, err := os.Open("wordlist.txt")v
    if err != nil {
        log.Fatalln(err)
    }   
    defer f.Close()
    w scanner := bufio.NewScanner(f)
    for scanner.Scan() {
        password := scanner.Text()
        hash := fmt.Sprintf("%x", md5.Sum([]byte(password))x)
        y if hash == md5hash {
            fmt.Printf("[+] Password found (MD5): %s\n", password)
        }   
        hash = fmt.Sprintf("%x", sha256.Sum256([]byte(password))z)
        { if hash == sha256hash {
            fmt.Printf("[+] Password found (SHA-256): %s\n", password)
        }   
    }   
    if err := scanner.Err(); err != nil {
        log.Fatalln(err)
    }   
}
Listing 11-1: Cracking MD5 and SHA-256 hashes (/ch-11 /hashes/main.go)
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   237
You start by defining two variables u that hold the target hash values. 
One is an MD5 hash, and the other is a SHA-256. Imagine that you acquired 
these two hashes as part of post-exploitation and you’re trying to determine 
the inputs (the cleartext passwords) that produced them after being run 
through the hashing algorithm. You can often determine the algorithm by 
inspecting the length of the hash itself. When you find a hash that matches 
the target, you’ll know you have the correct input. 
The list of inputs you’ll try exists in a dictionary file you’ll have created 
earlier. Alternatively, a Google search can help you find dictionary files for 
commonly used passwords. To check the MD5 hash, you open the dictionary 
file v and read it, line by line, by creating a bufio.Scanner on the file descrip-
tor w. Each line consists of a single password value that you wish to check. 
You pass the current password value into a function named md5.Sum(input  
[]byte) x. This function produces the MD5 hash value as raw bytes, so you 
use the fmt.Sprintf() function with the format string %x to convert it to a 
hexadecimal string. After all, your md5hash variable consists of a hexadeci-
mal string representation of the target hash. Converting your value ensures 
that you can then compare the target and calculated hash values y. If these 
hashes match, the program displays a success message to stdout.
You perform a similar process to calculate and compare SHA-256 hashes. 
The implementation is fairly similar to the MD5 code. The only real differ-
ence is that the sha256 package contains additional functions to calculate 
various SHA hash lengths. Rather than calling sha256.Sum() (a function that 
doesn’t exist), you instead call sha256.Sum256(input []byte) z to force the 
hash to be calculated using the SHA-256 algorithm. Much as you did in the 
MD5 example, you convert your raw bytes to a hex string and compare the 
SHA-256 hashes to see whether you have a match {.
Implementing bcrypt
The next example shows how to use bcrypt to encrypt and authenticate 
passwords. Unlike SHA and MD5, bcrypt was designed for password hash-
ing, making it a better option for application designers than the SHA or 
MD5 families. It includes a salt by default, as well as a cost factor that makes 
running the algorithm more resource-intensive. This cost factor controls 
the number of iterations of the internal crypto functions, increasing the 
time and effort needed to crack a password hash. Although the password 
can still be cracked using a dictionary or brute-force attack, the cost (in 
time) increases significantly, discouraging cracking activities during time-
sensitive post-exploitation. It’s also possible to increase the cost over time 
to counter the advancement of computing power. This makes it adaptive to 
future cracking attacks. 
Listing 11-2 creates a bcrypt hash and then validates whether a cleartext 
password matches a given bcrypt hash.
import (
    "log"
    "os"
前沿信安资讯阵地  公众号：i nf osrc
238   Chapter 11
    u "golang.org/x/crypto/bcrypt"
)
v var storedHash = "$2a$10$Zs3ZwsjV/nF.KuvSUE.5WuwtDrK6UVXcBpQrH84V8q3Opg1yNdWLu"
func main() {
    var password string
    if len(os.Args) != 2 { 
        log.Fatalln("Usage: bcrypt password")
    }   
    password = os.Args[1]
    w hash, err := bcrypt.GenerateFromPassword(
        []byte(password),
        bcrypt.DefaultCost,
    )
    if err != nil {
        log.Fatalln(err)
    }   
    log.Printf("hash = %s\n", hash)
    x err = bcrypt.CompareHashAndPassword([]byte(storedHash), []byte(password))
    if err != nil {
        log.Println("[!] Authentication failed")
        return
    }   
    log.Println("[+] Authentication successful")
}
Listing 11-2: Comparing bcrypt hashes (/ch-11/bcrypt /main.go)
For most of the code samples in this book, we’ve omitted the package 
imports. We’ve included them in this example to explicitly show that you’re 
using the supplemental Go package, golang.org/x/crypto/bcrypt u, because 
Go’s built-in crypto package doesn’t contain the bcrypt functionality. You 
then initialize a variable, storedHash v, that holds a precomputed, encoded 
bcrypt hash. This is a contrived example; rather than wiring our sample 
code up to a database to get a value, we’ve opted to hardcode a value for 
demonstrative purposes. The variable could represent a value that you’ve 
found in a database row that stores user authentication information for a 
frontend web application, for instance. 
Next, you’ll produce a bcrypt-encoded hash from a cleartext password 
value. The main function reads a password value as a command line argu-
ment and proceeds to call two separate bcrypt functions. The first function, 
bcrypt.GenerateFromPassword() w, accepts two parameters: a byte slice repre-
senting the cleartext password and a cost value. In this example, you’ll pass 
the constant variable bcrypt.DefaultCost to use the package’s default cost, 
which is 10 at the time of this writing. The function returns the encoded 
hash value and any errors produced. 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   239
The second bcrypt function you call is bcrypt.CompareHashAndPassword() x, 
which does the hash comparison for you behind the scenes. It accepts a 
bcrypt-encoded hash and a cleartext password as byte slices. The function 
parses the encoded hash to determine the cost and salt. It then uses these 
values with the cleartext password value to generate a bcrypt hash. If this 
resulting hash matches the hash extracted from the encoded storedHash 
value, you know the provided password matches what was used to create 
the storedHash. 
This is the same method you used to perform your password cracking 
against SHA and MD5—run a given password through the hashing func-
tion and compare the result with the stored hash. Here, rather than explic-
itly comparing the resulting hashes as you did for SHA and MD5, you check 
whether bcrypt.CompareHashAndPassword() returns an error. If you see an error, 
you know the computed hashes, and therefore the passwords used to com-
pute them, do not match. 
The following are two sample program runs. The first shows the output 
for an incorrect password: 
$ go run main.go someWrongPassword
2020/08/25 08:44:01 hash = $2a$10$YSSanGl8ye/NC7GDyLBLUO5gE/ng51l9TnaB1zTChWq5g9i09v0AC
2020/08/25 08:44:01 [!] Authentication failed
The second shows the output for the correct password:
$ go run main.go someC0mpl3xP@ssw0rd
2020/08/25 08:39:29 hash = $2a$10$XfeUk.wKeEePNAfjQ1juXe8RaM/9EC1XZmqaJ8MoJB29hZRyuNxz.
2020/08/25 08:39:29 [+] Authentication successful
Those of you with a keen eye for detail may notice that the hash value 
displayed for your successful authentication does not match the value you 
hardcoded for your storedHash variable. Recall, if you will, that your code 
is calling two separate functions. The GenerateFromPassword() function pro-
duces the encoded hash by using a random salt value. Given different salts, 
the same password will produce different resulting hashes. Hence the dif-
ference. The CompareHashAndPassword() function performs the hashing algo-
rithm by using the same salt and cost as the stored hash, so the resulting 
hash is identical to the one in the storedHash variable.
Authenticating Messages
Let’s now turn our focus to message authentication. When exchanging 
messages, you need to validate both the integrity of data and the authen-
ticity of the remote service to make sure that the data is authentic and 
hasn’t been tampered with. Was the message altered during transmission  
by an unauthorized source? Was the message sent by an authorized sender  
or was it forged by another entity? 
前沿信安资讯阵地  公众号：i nf osrc
240   Chapter 11
You can address these questions by using Go’s crypto/hmac package, which 
implements the Keyed-Hash Message Authentication Code (HMAC) standard. 
HMAC is a cryptographic algorithm that allows us to check for message tam-
pering and verify the identity of the source. It uses a hashing function and 
consumes a shared secret key, which only the parties authorized to produce 
valid messages or data should possess. An attacker who does not possess this 
shared secret cannot reasonably forge a valid HMAC value.
Implementing HMAC in some programming languages can be a little 
tricky. For example, some languages force you to manually compare the 
received and calculated hash values byte by byte. Developers may inadver-
tently introduce timing discrepancies in this process if their byte-by-byte 
comparison is aborted prematurely; an attacker can deduce the expected 
HMAC by measuring message-processing times. Additionally, developers 
will occasionally think HMACs (which consume a message and key) are the 
same as a hash of a secret key prepended to a message. However, the inter-
nal functionality of HMACs differs from that of a pure hashing function. 
By not explicitly using an HMAC, the developer is exposing the applica-
tion to length-extension attacks, in which an attacker forges a message and 
valid MAC. 
Luckily for us Gophers, the crypto/hmac package makes it fairly easy 
to implement HMAC functionality in a secure fashion. Let’s look at an 
implementation. Note that the following program is much simpler than 
a typical use case, which would likely involve some type of network com-
munications and messaging. In most cases, you’d calculate the HMAC 
on HTTP request parameters or some other message transmitted over a 
network. In the example shown in Listing 11-3, we’re omitting the client-
server communications and focusing solely on the HMAC functionality. 
var key = []byte("some random key") u
func checkMAC(message, recvMAC []byte) bool { v
    mac := hmac.New(sha256.New, key) w
    mac.Write(message)
    calcMAC := mac.Sum(nil)
    return hmac.Equal(calcMAC, recvMAC)x
}
func main() {
    // In real implementations, we’d read the message and HMAC value from network source
    message := []byte("The red eagle flies at 10:00") y
    mac, _ := hex.DecodeString("69d2c7b6fbbfcaeb72a3172f4662601d1f16acfb46339639ac8c10c8da64631d") z
    if checkMAC(message, mac) { {
        fmt.Println("EQUAL")
    } else {
        fmt.Println("NOT EQUAL")
    }   
}
Listing 11-3: Using HMAC for message authentication (/ch-11/hmac /main.go)
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   241
The program begins by defining the key you’ll use for your HMAC 
cryptographic function u. You’re hardcoding the value here, but in a real 
implementation, this key would be adequately protected and random. It 
would also be shared between the endpoints, meaning both the message 
sender and receiver are using this same key value. Since you aren’t imple-
menting full client-server functionality here, you’ll use this variable as if it 
were adequately shared.
Next, you define a function, checkMAC() v, that accepts a message and 
the received HMAC as parameters. The message receiver would call this 
function to check whether the MAC value they received matches the value 
they calculated locally. First, you call hmac.New() w, passing to it sha256.New, 
which is a function that returns a hash.Hash instance, and the shared secret 
key. In this case, the hmac.New() function initializes your HMAC by using the 
SHA-256 algorithm and your secret key, and assigns the result to a variable 
named mac. You then use this variable to calculate the HMAC hash value, 
as you did in the earlier hashing examples. Here, you call mac.Write(message) 
and mac.Sum(nil), respectively. The result is your locally calculated HMAC, 
stored in a variable named calcMAC.
The next step is to evaluate whether your locally calculated HMAC value 
is equal to the HMAC value you received. To do this in a secure manner, you 
call hmac.Equal(calcMAC, recvMAC) x. A lot of developers would be inclined 
to compare the byte slices by calling bytes.Compare(calcMAC, recvMAC). The 
problem is, bytes.Compare() performs a lexicographical comparison, walking 
and comparing each element of the given slices until it finds a difference 
or reaches the end of a slice. The time it takes to complete this comparison 
will vary based on whether bytes.Compare() encounters a difference on the 
first element, the last, or somewhere in between. An attacker could measure 
this variation in time to determine the expected HMAC value and forge a 
request that’s processed legitimately. The hmac.Equal() function solves this 
problem by comparing the slices in a way that produces nearly constant 
measurable times. It doesn’t matter where the function finds a difference, 
because the processing times will vary insignificantly, producing no obvious 
or perceptible pattern. 
The main() function simulates the process of receiving a message from 
a client. If you were really receiving a message, you’d have to read and parse 
the HMAC and message values from the transmission. Since this is just a 
simulation, you instead hardcode the received message y and the received 
HMAC z, decoding the HMAC hex string so it’s represented as a []byte. 
You use an if statement to call your checkMAC() function {, passing it your 
received message and HMAC. As detailed previously, your checkMAC() func-
tion computes an HMAC by using the received message and the shared 
secret key and returns a bool value for whether the received HMAC and cal-
culated HMAC match.
Although the HMAC does provide both authenticity and integrity assur-
ance, it doesn’t ensure confidentiality. You can’t know for sure that the mes-
sage itself wasn’t seen by unauthorized resources. The next section addresses 
this concern by exploring and implementing various types of encryption.
前沿信安资讯阵地  公众号：i nf osrc
242   Chapter 11
Encrypting Data
Encryption is likely the most well-known cryptographic concept. After all, 
privacy and data protection have garnered significant news coverage due to 
high-profile data breaches, often resulting from organizations storing user 
passwords and other sensitive data in unencrypted formats. Even without 
the media attention, encryption should spark the interest of black hats and 
developers alike. After all, understanding the basic process and implementa-
tion can be the difference between a lucrative data breach and a frustrating 
disruption to an attack kill chain. The following section presents the varying 
forms of encryption, including useful applications and use cases for each. 
Symmetric-Key Encryption
Your journey into encryption will start with what is arguably its most 
straightforward form—symmetric-key encryption. In this form, both the 
encryption and decryption functions use the same secret key. Go makes 
symmetric cryptography pretty straightforward, because it supports most 
common algorithms in its default or extended packages. 
For the sake of brevity, we’ll limit our discussion of symmetric-key 
encryption to a single, practical example. Let’s imagine you’ve breached an 
organization. You’ve performed the necessary privilege escalation, lateral 
movement, and network recon to gain access to an e-commerce web server 
and the backend database. The database contains financial transactions; 
however, the credit card number used in those transactions is obviously 
encrypted. You inspect the application source code on the web server 
and determine that the organization is using the Advanced Encryption 
Standard (AES) encryption algorithm. AES supports multiple operating 
modes, each with slightly different considerations and implementation 
details. The modes are not interchangeable; the mode used for decryption 
must be identical to that used for encryption. 
In this scenario, let’s say you’ve determined that the application is using 
AES in Cipher Block Chaining (CBC) mode. So, let’s write a function that 
decrypts these credit cards (Listing 11-4). Assume that the symmetric key was 
hardcoded in the application or set statically in a configuration file. As you go 
through this example, keep in mind that you’ll need to tweak this implemen-
tation for other algorithms or ciphers, but it’s a good starting place.
func unpad(buf []byte) []byte { u
    // Assume valid length and padding. Should add checks
    padding := int(buf[len(buf)-1])
    return buf[:len(buf)-padding]
}
func decrypt(ciphertext, key []byte) ([]byte, error) { v
    var (
        plaintext []byte
        iv        []byte
        block     cipher.Block
        mode      cipher.BlockMode
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   243
        err       error
    )
    if len(ciphertext) < aes.BlockSize { w
        return nil, errors.New("Invalid ciphertext length: too short")
    }
    if len(ciphertext)%aes.BlockSize != 0 { x
        return nil, errors.New("Invalid ciphertext length: not a multiple of blocksize")
    }
    iv = ciphertext[:aes.BlockSize] y
    ciphertext = ciphertext[aes.BlockSize:]
    if block, err = aes.NewCipher(key); err != nil { z
        return nil, err
    }
    mode = cipher.NewCBCDecrypter(block, iv) {
    plaintext = make([]byte, len(ciphertext))
    mode.CryptBlocks(plaintext, ciphertext) |
    plaintext = unpad(plaintext) }
    return plaintext, nil
}
Listing 11-4: AES padding and decryption (/ch-11/aes/main.go)
The code defines two functions: unpad() and decrypt(). The unpad() func-