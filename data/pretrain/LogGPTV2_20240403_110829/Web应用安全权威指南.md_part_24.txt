由于某些特殊原因而不得不自制会话管理机制时，建议使用密码学级别的伪随机数生成器
[33]{.注释编号} 来生成足够多位数的会话 ID。
[33]{.注释编号下} 指理论上能够保证在足够长的时间内无法被预测的随机数。
-   **改善 PHP 的会话 ID 的随机性的方法**
    PHP 中默认生成会话 ID 的方法为将下列值组合后再经过 MD5
    散列函数处理。
    -   远程 IP 地址
    -   当前时间
    -   随机数（不是密码学级别的伪随机数）
    这也符合图 4-51 中常见的会话 ID 的生成方法。由于其生成会话 ID
    的算法相当复杂，目前还没有该会话 ID
    的破解方法，但是这样的设计在理论上并不能保证安全性。
    但我们可以编辑 php.ini 文件来改善会话 ID
    的生成规则，使其生成基于安全的随机数的会话 ID。这里我们将 php.ini
    设置如下。
    ``` 代码无行号
    [Session]
    ;; Windows 中不需要设置 entropy_file
    session.entropy_file = /dev/urandom
    session.entropy_length = 32
    ```
    /dev/urandom 是 Linux 等多数基于 Unix
    的操作系统中提供的随机数生成器，可作为设备文件使用。Linux 中的
    /dev/urandom
    经受了全世界专家的检验，并没有曝出重大问题，因此可以安心使用
    [34]{.注释编号} 。
    Windows 中没有类似于 /dev/urandom 的功能，但在 PHP5.3.3
    以后的版本中，通过将 session.entropy_length 设为 0
    以外的值，就能基于 Windows Random API 生成的值来生成会话 ID。
    由于此设置不会产生副作用，因此建议读者们在开发时将上述设置作为开发标准。
[34]{.注释编号下} /dev/urandom 的实现方法因 OS 而异，在 Linux
以外的操作系统中使用 /dev/urandom
时，请事先调查确认有无安全隐患的相关记录。
#### **参考：自制会话管理机制产生的其他隐患**
自制会话管理机制时，除了会话 ID
可预测漏洞外，还需警惕其他安全隐患。就笔者多年来诊断安全隐患的经验来看，以下安全隐患需要注意。
-   SQL 注入漏洞
-   目录遍历漏洞
具体来说，PHP 官方文档中会话管理机制的自定义 API
的示例脚本中就存在目录遍历漏洞 [35]{.注释编号} 。同样，由于自定义 PHP
的会话管理机制而混入 SQL 注入漏洞的案例也时有发生。
[35]{.注释编号下}
详情见笔者的博客：
。写作本书时已经确认在 PHP 的最新版本 5.3.5 中也存在此问题。
正因为存在这些案例，因此，在自制或自定义会话管理机制时，务必要进行慎重的设计和仔细的检查。除非迫不得已，还是推荐直接使用既有的会话管理机制。
### **4.6.3 会话 ID 嵌入 URL** {#text00000.html#nav_point_32}
#### **概要**
会话 ID 有时并不保存在 Cookie 中，而是被保存于 URL。PHP、Java 和 ASP.NET
等都提供了将会话 ID 嵌入 URL 的功能。由于一些手机的浏览器不支持
Cookie，因此手机版 Web 应用也广泛采用将会话 ID 嵌入 URL 的做法。而面向
PC 的网站偶尔也能看到 URL 中包含会话 ID。以下就是会话 ID 嵌入 URL
的示例。
``` 代码无行号
http://example.jp/mail/123?SESSID=2F3BE9A31F093C
```
会话 ID 嵌入 URL 有可能会导致会话 ID 经由 Referer
消息头外泄，从而造成伪装攻击。
而为了防范会话 ID 嵌入 URL 而导致伪装攻击，可以在程序中设置禁止将会话 ID
嵌入 URL。手机版的 Web 应用等有时不得不将会话 ID 嵌入
URL，此情况下的对策请参考 7.4 节。
**会话 ID 嵌入 URL 所导致的安全隐患总览**
![{%}](Image00095.jpg)
#### **攻击手段与影响**
下面我们就来看一下使 URL 中的会话 ID 通过 Referer 外泄的方法，以及会话
ID 外泄后造成的影响。
首先来看 PHP 的情况下是如何使会话 ID 嵌入到 URL 中的。
-   **会话 ID 嵌入 URL 所需的条件**
    前面已经提到过，PHP 可以通过设置将会话 ID 嵌入到 URL
    中。设置项目如表 4-14 所示。
    **表 4-14 php.ini 的会话 ID 设置项目**
      -------------------------- --------------------------- -------------
      项目                       解说                        默认值
      session.use_cookies        使用 Cookie 保存会话 ID     有效（On）
      session.use_only_cookies   仅将会话 ID 保存于 Cookie   有效（On）
      session.use_trans_sid      自动将会话 ID 嵌入 URL      无效（Off）
      -------------------------- --------------------------- -------------
    将上述设置进行组合后，会话 ID 的保存位置就可以被归纳为下表。
    **表 4-15 use_cookies 与 use_only_cookies 的组合**
      ---------------------------------------------------------------- ------------- ------------------
      会话 ID 的保存位置                                               use_cookies   use_only_cookies
      会话 ID 仅保存在 Cookie 中                                       On            On
      可以使用 Cookie 时保存在 Cookie 中，不能使用 Cookie 时嵌入 URL   On            Off
      无意义的组合                                                     Off           On
      始终将会话 ID 嵌入 URL                                           Off           Off
      ---------------------------------------------------------------- ------------- ------------------
    其中，session.use_trans_sid 选项设为 On 时会话 ID 会被自动嵌入
    URL，而设为 Off 的话则仅当应用中显示将会话 ID 嵌入 URL 时，会话 ID
    才会被嵌入 URL。
-   **范例脚本解说**
    以下为将会话 ID 设置为嵌入 URL（不使用
    Cookie）的范例脚本。为了不影响应用的全局设置，这里我们在 .htaccess
    文件内做如下设置。
    > **代码清单 /462/.htaccess**
    ``` 代码无行号
    php_flag session.use_cookies Off
    php_flag session.use_only_cookies Off
    php_flag session.use_trans_sid On
    ```
    示例脚本包含了 3 个 PHP 文件。
    -   起始页面
    -   包含外部链接的页面
    -   外部页面（假定为攻击者用来收集信息的网站）
    各自的脚本代码如下所示。
    > **代码清单 /462/46-001.php**
    ``` 代码无行号
         Next 
    ```
    > **代码清单 /462/46-002.php**
    ``` 代码无行号
           跳转到外部网站的连接 
    ```
    > **代码清单 /462/46-900.cgi【攻击者用来收集信息的网站】**
    ``` 代码无行号
        #!/usr/bin/perl
        use utf8;
        use strict;
        use CGI qw/-no_xhtml :standard/;
        use Encode qw/encode/;
        my $e_referer = escapeHTML(referer());
        print encode('UTF-8', 
        这是收集会话 ID 的网站。Referer 信息如下 
        $e_referer
        END_OF_HTML
    ```
    图 4-52 展示了页面的跳转过程。点击链接后跳转到外部网站时，URL
    中的会话 ID 遭到了泄漏。
    ![{%}](Image00096.jpg)
    **图 4-52 示例页面跳转**
-   **通过 Referer 泄漏会话 ID 所需的条件**
    网站满足以下两个条件时就有可能通过 Referer 泄漏会话 ID。
    -   能够使用被嵌入 URL 的会话 ID
    -   存在跳转至外部网站的链接。或用户能够自己发布链接
-   **攻击流程**
    Referer 造成的会话 ID
    泄漏可分为偶发事故和有意针对安全隐患实施的攻击这两种情况。其中，后者仅存在于应用的用户能够自己发布链接的网站。比如
    Web 邮箱、论坛、博客、社交网站等。
    接下来我们就以从 Web
    邮箱实施攻击为例进行说明。攻击者发送带有链接的邮件给攻击目标应用的用户。邮件中通过"请看我的个人主页"或者"史上最大让利折扣"等语句引诱用户点击链接跳转至攻击者的网站。
    ![{%}](Image00097.jpg)
    **图 4-53 从 Web 邮箱发动攻击**
    由于多数 Web 邮箱都会将 URL
    格式的字符串转换为链接形式，因此，用户一旦点击链接进入攻击者的网站，Web
    邮箱的 URL 中嵌入的会话 ID 就会通过 Referer
    泄漏到攻击者网站。攻击者利用得到的 Referer
    信息，就能够伪装成该用户。
    2000 年 12
    月，独立行政法人产业技术综合研究所的高木浩光等人组成的小组发表了题为"不用
    Cookie 而在 URL 中嵌入 ID
    的会话管理方式的安全隐患（1）------通过取得 REFERER
    信息劫持免费邮箱网站的问题"的文章 [36]{.注释编号}
    。文中列举了在当时的 7 个 Web 邮箱服务中，将会话 ID 嵌入 URL 后会话
    ID 通过 Referer
    泄漏的状况、原理以及解决方法。虽然距离文章发表已经过去了十几年，但此问题还是没有得到足够的重视。
-   **事故性的会话 ID 泄漏**
    如果网站不允许用户自己发布链接，攻击者就很难将用户诱导至自己的网站，然而，即使在这种情况下，只要网站中存在指向外部网站的链接，就仍然有可能将会话
    ID 泄漏至这些外部网站。万一外部网站的管理员心怀不轨，就能够从
    Referer 的日志中获取会话 ID 来伪装用户。
    此外，也有因用户自己将带有会话 ID 的 URL 发布到论坛等地方，使该 URL
    被搜索引擎收录而造成信息泄漏的事件。
-   **影响**
    嵌入 URL 的会话 ID 经由 Referer
    泄漏的影响，同前述的会话劫持的影响一样。
[36]{.注释编号下} 原文标题为：Cookie を使用せず URL に埋め込む ID
に赖ったセッション管理方式の脆弱性 (1)------REFERER
情报取得による脆弱フリーメールサイトの乘っ取り问题------。原始的文章页面已被删除，现在可以从已归档的页面中浏览该文章。
#### **安全隐患的产生原因**
会话 ID 嵌入 URL 的直接原因为设置不完善或者程序中存在问题。
将会话 ID 嵌入 URL 分为有意和无意两种情况。而之所以特意将会话 ID 嵌入
URL，可能是因为以下两点原因。
-   2000 年前后由于隐私方面的问题而兴起了"Cookie
    有害论"，造成了部分网站停止使用 Cookie。
-   NTT Docomo 的手机浏览器迟迟不支持 Cookie[37]{.注释编号}
    ，因此，在面向手机的应用中，将会话 ID 嵌入 URL 至今还是主流方法。