into account by the AC algorithm, e.g. is a duplicate alert. Then, a forward-
looking part determines whether the current alert must be followed by others,
and in which condition this linkage occurs, e.g. whether consequence alerts have
to be expected.
Duplicates. The detection of duplicates relies on the provision of common infor-
mation by diﬀerent intrusion-detection sensors, or the provision of mechanisms
to bridge the diﬀerent kinds of information. Provision of common information
means, for example, that two alerts generated by two network-based intrusion-
detection systems contain an identical quadruple (source address, source port,
target address, target port) and times that are close to each other. Provision of
mechanisms to bridge diﬀerent kinds of information means, for example, that
there are facts and rules to indicate that two kinds of information are the same
(for example port number 80 and port name www; two events, one generated
by a host-based probe as (source hostname, target hostname, service) and the
other by a network-based probe (source ip, source port, target ip, target port),
will be considered the same if the service can be related to the port target port,
and if the addresses and host names match).
In a conﬁguration ﬁle, it has to be speciﬁed which alerts are considered
duplicates. The duplicate deﬁnition consists of four associated terms:
Aggregation and Correlation of Intrusion-Detection Alerts
97
Initial alert class. The ﬁrst term is the class of the alert received ﬁrst.
Duplicate alert class. The second term is the class of the alert that is under
evaluation to be a duplicate of the ﬁrst one.
List of attributes. The third term is a list of alert attributes. These attributes
must be equal for the two events to be considered duplicates.
Severity level. The fourth term is a new severity level for the duplicate alert.
When a duplicate is found, the AC algorithm uses this severity level for
further processing instead of the original severity level.
When an alert is received, the AC algorithm searches for duplicate deﬁnitions
that have as their second term the class of the current alert. It then searches
the base of previously received alerts for one that matches the class of the ﬁrst
term and conforms to the attribute conditions. If this original alert is found, the
current one is linked to the original one and the severity level of the duplicate
deﬁnition is assigned to the duplicate and used for further processing.
Note that the duplicate notion implies an ordered sequence. If there is no
notion of order, then two duplicate deﬁnitions should be conﬁgured by reversing
the order of the classes.
Also, the severity level is a value that can be both positive (the situation is
more dangerous if the alerts happen one after another) or negative (the situation
is less dangerous). A speciﬁc processing has been applied to the null value. When
the severity level is 0, the duplicate is simply ignored.
Actually, the AC algorithm does more in this case: if the duplicate deﬁnition
triggers more than Y times (i.e. the counter on the original event reaches a given
threshold), then a new signature is generated (Event of class X repeated Y
times) and the contribution of the original event severity times Y is added
to the severity of the situation. This mechanism has been designed to handle
alert ﬂoods, such as repeated Ping of Death or Teardrop attacks. Such alerts
usually arrive in batches of 50 alerts or more. The Y threshold is actually a list
of thresholds (currently 10, 50, 100, 200 and 500), and such alerts will only be
processed when the count on the original alert reaches one of these values.
Consequences. A consequence chain is a set of alerts linked in a given order,
where the link must occur within a given time interval. If the link does not
occur, an internal alert is generated with the severity given by the consequence
deﬁnition.
As it holds for the duplicates, consequences have to be deﬁned in a conﬁgu-
ration ﬁle. The consequence deﬁnition consists of six associated terms:
Initial alert class. The ﬁrst term is the class of the original alert.
Initial probe token. The second term indicates the probe from which the alert
comes. This can be a variable (in which case it should be the same variable
as in the fourth term, to indicate that the only constraint is that the two
probes are one and the same) or a wildcard.
Consequence alert class. The third term is the class of the alert considered
a consequence of the ﬁrst one.
98
H. Debar and A. Wespi
Consequence probe token. The fourth term indicates the probe from which
the alert comes. This can be a variable (in which case it should be the same
variable as in the second term, to indicate that the only constraint is that
the two probes are one and the same) or a wildcard.
Severity level. The ﬁfth term is a severity level for the signature simulating
Wait period. The sixth term indicates the time to wait for the consequence
the missed alert.
alert.
When an event occurs, the consequence mechanism is triggered. As part
of this process, the consequence mechanism veriﬁes that the current alert is a
consequence of some previously received alert. If this is the case, the consequence
link is marked as having taken place. When the consequence timer expires on
the original event and all consequences have been satisﬁed, the processing of the
original event is terminated.
The consequence mechanism requires the events to occur in a ﬁxed sequence.
If the relationship is true regardless of the order, then two consequence deﬁni-
tions should be used. The consequence mechanism does not provide a way to
indicate that a consequence occurred after the ﬁxed time limit. Once the timer
has expired, all linkage is removed.
Example of Duplicates and Consequences. Let us look at the example of
a network-based probe able to detect attacks against Web servers in the network
packets and the Web IDS [1] probe that looks for signs of attacks in the Web
server log ﬁles. When the network-based probe recognizes a malicious CGI script
request, it does not know whether the request actually succeeded because it only
analyzes the request to the Web server but not the corresponding answer from
the Web server. Since alerts that are related to suspicious CGI scripts occur
quite frequently, the conﬁdence and severity of this type of alert are low. Web
IDS on the other hand knows whether the attack succeeded because the Web
server log entry shows the status code in addition to the URL.
When the Web IDS alert is received, it is used to upgrade the base event
and redo the analysis in that light, to lower the severity if the request was
unsuccessful, or to increase it if the request was successful.
An example of what the AC algorithm achieves with the detection of du-
plicates is shown in Figure 4, which presents an extract of log messages caused
by two PHF attacks against our Web server. The ﬁrst PHF attack retrieves the
/etc/group ﬁle, and the second one retrieves the /etc/passwd ﬁle. Both attacks
are successful in the sense that the Web server returned status code 200 (but
there is no way to tell whether the requested ﬁle was actually shipped).
Web IDS is quicker to report the two attacks, so the Web IDS messages are
packed together ﬁrst, and then the RealSecure messages arrive. The ﬁrst three
Web IDS messages indicate that the PHF script has been requested, that a
script has been found, and that a warning should be generated as a consequence
of these two actions. For the same URL, RealSecure gives only the ﬁrst warning,
the PHF request. Analysis is similar for the additional four Web IDS messages
and two RealSecure messages concerning the PHF request for /etc/passwd. If
Aggregation and Correlation of Intrusion-Detection Alerts
99
WebIDS: 934190025 pattern(cgi) phf 10.10.10.62
"GET /cgi-bin/phf?/etc/group HTTP/1.0" 200 442
WebIDS: 934190025 pattern(UrlSuccess) ˆ2 10.10.10.62
"GET /cgi-bin/phf?/etc/group HTTP/1.0" 200 442
WebIDS: 934190025 decision(followup) warnings 10.10.10.62
"GET /cgi-bin/phf?/etc/group HTTP/1.0" 200 442
WebIDS: 934190027 pattern(suspiciousCgi) passwd 10.10.10.62
"GET /cgi-bin/phf?/etc/passwd HTTP/1.0" 200 444
WebIDS: 934190027 pattern(cgi) phf 10.10.10.62
"GET /cgi-bin/phf?/etc/passwd HTTP/1.0" 200 444
WebIDS: 934190027 pattern(UrlSuccess) ˆ2 10.10.10.62
"GET /cgi-bin/phf?/etc/passwd HTTP/1.0" 200 444
WebIDS: 934190027 decision(followup) warnings 10.10.10.62
"GET /cgi-bin/phf?/etc/passwd HTTP/1.0" 200 444
RealSecure: 934190025 1 HTTP\_PHF 10.10.10.62:9285 10.10.10.61:80
URL="/cgi-bin/phf?/etc/group"
RealSecure: 934190027 1 HTTP\_PHF 10.10.10.62:9304 10.10.10.61:80
URL="/cgi-bin/phf?/etc/passwd"
RealSecure: 934190027 1 HTTP\_Unix\_Passwords 10.10.10.62:9304
10.10.10.61:80 URL="/cgi-bin/phf?/etc/passwd"
Fig. 4. Web IDS and RealSecure alerts.
we analyze in which ways these messages are duplicates, we ﬁnd that they have
the same source and destination, the same URL, and the same time stamp. In
addition, the RealSecure messages have the same port information. We conclude
that for the same probe it is quite easy to identify duplicate alerts, whereas
ﬁnding duplicates for diﬀerent probes is more diﬃcult, especially if we cannot
rely on time accuracy.
An additional principle to take into account is the localization of the detec-
tor, and the possibility to trace the path of an attack. In particular, placing
two network-based sensors on both interfaces of a ﬁrewall with network address
translation (NAT) is certainly interesting but requires much more work to actu-
ally relate the alerts to the same “logical” packet.
5.3 The Aggregation Relationship: Situations
In many cases, isolated events are not considered signiﬁcant. Therefore, intru-
sion-detection alerts are aggregated into so-called “situations”. A situation is a
set of alerts that have certain characteristics in common.
Each intrusion-detection event contains information that can act as an ag-
gregation axis. Our current prototype recognizes three aggregation axes, namely
the source, the target, and the class of the attack.
The situation deﬁnition consists of the following terms:
Alert class. The ﬁrst term is the class of the alert or a wildcard. A wildcard
indicates that the alert class is not used as an aggregation axis.
100
H. Debar and A. Wespi
Source token. The second term is the attack source or a wildcard.
Target token. The third term is the target of the attack or a wildcard.
Severity level. The fourth term is a threshold. If the aggregated severity of
the situation alerts exceeds this threshold, an alarm is generated.
Since wildcards are allowed, diﬀerent situation types are possible. By sys-
tematically evaluating all combinations of aggregation axes and leaving out the
case where a wildcard is given for source, target, and alert class, we end up with
seven diﬀerent situations as follows:
Situation 1. Alerts with the same source, the same target and belonging to the
same alert class are aggregated in Situation 1. This allows one to detect, for
example, an attacker who is launching a series of Web server attacks against
a single Web server.
Situation 2-1. Alerts with the same source and destination are aggregated.
This situation is intended to detect, for example, an attacker who runs a
series of attacks against the various services available on the target machine.
Situation 2-2. Alerts with the same target and belonging to the same alert
class are aggregated. This situation can be used to detect a distributed attack
against a single target.
Situation 2-3. Alerts with the same source and belonging to the same alert
class are aggregated. This situation allows one, for example, to ﬁnd an at-
tacker who is running a series of name server attacks against a set of name
servers.
Situation 3-1. Alerts with the same source are aggregated. The goal is to de-
tect a single attacker who runs various attacks against diﬀerent targets.
Situation 3-2. Alerts with the same target are aggregated. This allows one to
detect distributed attacks.
Situation 3-3. Alerts belonging to the same attack class are aggregated. This
situation is triggered if, for example, a large number of people are trying out
a new attack that was recently posted to a hacker mailing list.
More speciﬁc situation alarms have precedence over less speciﬁc situation
alarms. For example, if we assume that the thresholds for all situations are set
to the same value and situation 1 is triggered, only an alarm for situation 1 but
not for situations 2 and 3 is generated.
For situation 2, a list of the values speciﬁed in the wildcard ﬁeld is maintained.
We refer to it as an alert property list. For example, for situation 2-1 the alert
property list is the list of all attacked hosts. In the case of situation 3, two alert
property lists are maintained.
Determining Authorized Scans. Our ACC can detect authorized security
scans. The assumption made is that the authorized scan is always executed from
the same machine. The operator of the ACC knows the address of the source
machine and can conﬁgure the ACC accordingly.
When messages related to the preconﬁgured source address appear, within (or
without) a speciﬁc time interval, they are processed by a speciﬁc set of situations
Aggregation and Correlation of Intrusion-Detection Alerts
101
based on situation 3-1. However, in addition to accumulating scan data on that
particular class, a comparison of the signatures of the previous scan in terms of
hosts touched and signatures tried is performed to see whether target machines
or signatures have been added to or removed from the test. This helps pinpoint
scan anomalies and also measures the eﬀectiveness of the probes.
Changing Situations According to Sets of Events. A trigger can be asso-
ciated with situations. There are two types of triggers, one for situation reeval-
uation and one for multi-situation assessment.
Situation reevaluation addresses the case when the operator considers the
severity of the combination of several alerts not being appropriately reﬂected by
the sum of the severities of the individual alerts. For example, the operator may
believe that a single unsuccessful login request is a mistake and therefore has a
low severity. However, if somebody tries to unsuccessfully login to ten default
accounts, then the severity should be much higher than ten times the severity of
a single unsuccessful login request. The situation reevaluation operates on the
lists of aggregated alert properties to verify whether the list matches a given
criterion. For the moment, two criteria have been identiﬁed, the length of the
list, and the fact that the list contains a given sublist. This works for situations
2-1, 2-2 and 2-3. For situations 3-1, 3-2 and 3-3, the operator has to indicate
if the reevaluation applies to one property list only, to both of them jointly, or
to either one of them. The reevaluation takes the form of a modiﬁcation of the
severity value, either by a constant, or by a multiplication factor.
Multi-situation assessment is mostly of use for situation 1, and consists of
modifying the severity value if another, related situation exists. For example, if
a host has probed the primary DNS server and now also probes the secondary
DNS server, the severity of both situations should be increased.
6 Usage Example
We give a simple example to demonstrate what our intrusion-detection console
looks like and how it is intended to be used. The TEC allows one to deﬁne
diﬀerent views of the alerts that were sent to or generated by the TEC server. We
have introduced basically two new views, the IDS Alert view where all intrusion-
detection related alerts are accessible, and the IDS Alarm view which provides
an interface to those alerts the operator has to take care of. As a simple example,
Figure 5 shows part of the events the Web IDS probe has generated as a result
of a detected Web-scan attack.
In the IDS Alert window shown on the left, all the diﬀerent CGI attacks
that were executed show up. In the IDS Alarm window on the right, only one
message pops up, a situation 1 alarm that summarizes all the individual Web
attacks.
The idea is that the operator has only to look at the messages in the IDS
Alarm window. All the security-relevant alarms are displayed in a condensed
manner in this window. However, access to single alert messages is still possible
via the IDS Alert view.
102
H. Debar and A. Wespi
Fig. 5. IDS Alert and IDS Alarm views
7 Conclusions and Future Work
In this paper, we have shown the need for an aggregation and correlation com-
ponent (ACC) that can handle alerts generated by intrusion-detection probes.
We have discussed the requirements such an ACC has to fulﬁll and have derived
a system architecture to gather and process alerts in a central place.
The ACC comprises two main parts: a uniﬁed data model for intrusion-
detection alerts and a set of rules to process the alerts. The AC algorithm can
detect duplicates, i.e., alerts that are reported by diﬀerent probes but are related
to the same attack, as well as consequences, i.e., alerts that are related and should
occur together. We have introduced the concept of situations that allows us to
aggregate similar alerts and thus provide the operator with a more condensed
view of the security issues to be addressed. Alerts are aggregated into situations
based on any combination of the three attributes source, target and alert class.
Our ACC is built on the Tivoli Enterprise Console. The integration into an
existing event management framework had the advantage that we could con-
centrate on the correlation aspects of our work. Furthermore, the operator is
provided with a familiar user interface.
As for future work, we plan to enhance the generic rules of the AC algorithm
with more speciﬁc ones. To improve performance, we will investigate the possi-
bilities of doing the normalization of alerts as a front-end to the TEC. Currently,
the ACC does not control the probes but only processes the alerts they generate.
Therefore, a further enhancement will be to better integrate probes and ACCs.
Our framework will beneﬁt from having a wide variety of probes integrated
with it. Hence, we would like to collaborate with partners who are interested in
seeing their probes being integrated in our framework.
References
[1] Magnus Almgren, Herv´e Debar, and Marc Dacier. A lightweight tool for detecting
web server attacks. In Symposium on Network and Distributed Systems Security
(NDSS ’00), pages 157–170, San Diego, CA, February 2000. Internet Society.
Aggregation and Correlation of Intrusion-Detection Alerts
103
[2] Taurus Bey. Tec rules: Planning for eﬃciency. The Managed View, 3(2):5–20,
Spring 1999.
[3] Herv´e Debar, Marc Dacier, and Andreas Wespi. A revised taxonomy for intrusion-
detection systems. Annales des t´el´ecommunications, 55(7–8):361–378, July–August
2000.
[4] IBM International Technical Support Organization. Early Experiences with Tivoli
Enterprise Console 3.7, November 2000. IBM Redbook SG24-6015-00.
[5] IBM International Technical Support Organization. Tivoli SecureWay Risk Man-
IBM Redbook
ager: Correlating Enterprise Risk Management, November 2000.
SG24-6021-00.
[6] Tivoli Systems. Tivoli SecureWay Risk Manager, User’s Guide, Version 3.7, De-
cember 2000.
[7] Tivoli Systems. TME 10 Enterprise Console, User’s Guide, Version 3.7, November
2000.
[8] Wietse Venema. TCP WRAPPER: Network monitoring, access control and booby
traps. In UNIX Security III Symposium, pages 85–92, Baltmore, MD, September
1992. Usenix.