title:Enhancing State-of-the-art Classifiers with API Semantics to Detect
Evolved Android Malware
author:Xiaohan Zhang and
Yuan Zhang and
Ming Zhong and
Daizong Ding and
Yinzhi Cao and
Yukun Zhang and
Mi Zhang and
Min Yang
Enhancing State-of-the-art Classifiers with API Semantics to
Detect Evolved Android Malware
Xiaohan Zhang∗
Fudan University
PI:EMAIL
Daizong Ding
Fudan University
PI:EMAIL
Yuan Zhang∗
Fudan University
PI:EMAIL
Yinzhi Cao
Johns Hopkins University
PI:EMAIL
Ming Zhong
Fudan University
PI:EMAIL
Yukun Zhang
Fudan University
PI:EMAIL
Mi Zhang
Fudan University
PI:EMAIL
Min Yang
Fudan University
PI:EMAIL
ABSTRACT
Machine learning (ML) classifiers have been widely deployed to
detect Android malware, but at the same time the application of ML
classifiers also faces an emerging problem. The performance of such
classifiers degrades—or called ages—significantly over time given
the malware evolution. Prior works have proposed to use retraining
or active learning to reverse and improve aged models. However,
the underlying classifier itself is still blind, unaware of malware
evolution. Unsurprisingly, such evolution-insensitive retraining or
active learning comes at a price, i.e., the labeling of tens of thousands
of malware samples and the cost of significant human efforts.
In this paper, we propose the first framework, called API-
Graph, to enhance state-of-the-art malware classifiers with the
similarity information among evolved Android malware in terms
of semantically-equivalent or similar API usages, thus naturally
slowing down classifier aging. Our evaluation shows that because
of the slow-down of classifier aging, APIGraph saves significant
amounts of human efforts required by active learning in labeling
new malware samples.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation; Mobile
platform security.
KEYWORDS
Evolved Malware Detection, API Semantics, Model Aging
ACM Reference Format:
Xiaohan Zhang, Yuan Zhang, Ming Zhong, Daizong Ding, Yinzhi Cao, Yukun
Zhang, Mi Zhang, and Min Yang. 2020. Enhancing State-of-the-art Classifiers
∗co-first authors
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417291
with API Semantics to Detect Evolved Android Malware. In Proceedings of
the 2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3372297.3417291
1 INTRODUCTION
Machine learning (ML) classifiers are widely used in practice to
detect Android malware [1, 3, 12, 18, 19, 29, 32, 33, 37, 49, 50, 52]
and have achieved astonishing performance. Despite the success,
one emerging problem of applying ML in malware detection is
the evolution of malware to enhance functionalities and avoid
being detected, thus leading to significant performance degradation
of ML classification models over time. This problem is defined
as model aging or similar concepts like time decay [39], model
degradation [24], and deterioration [9] in the literature. Model
aging is severe: A white paper [23] from Kaspersky in 2019 shows
that the detection rate of a commercial, ML-based classifier drops
drastically from almost 100% to below 80%—or even 60% under
another configuration—in only three months.
Given the severeness of the aging problem, prior works have
proposed to detect model aging and improve malware classifier’s
performance. For example, DroidOL [37] and DroidEvolver [49]
keep introducing new malware samples via online learning. For
another example, Transcend [21] detects early signals of model
aging and retrains the model for improvement. Following Tran-
scend, Tesseract [39] introduces active learning to choose a small
set of representative evolved malware samples for improvement.
However, although prior works can reverse aging and improve
decayed models, the underlying model is still largely unaware
of malware evolution, especially the semantics among evolved
malware. Unsurprisingly, they need tens of thousands of new
malware samples with labels to let the underlying model pick up
the evolution, which involves a large amount of human work in
labeling.
In this paper, the research problem that we study is to understand
why malware evolution can degrade model performance and then
enhance existing classifiers with evolution semantics to slow down
aging. When aging is being slowed down, fewer new samples—and
thus less human efforts in labeling—are needed to improve the
Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA757classifier less frequently via either retraining, active learning, or
online learning. In the light of this problem, our key observation
is that malware samples, during evolution, often keep the same
semantics but switch to a different implementation so that the
evolved malware can avoid being detected by existing classifiers.
For example, the original malware may send one user identifier like
IMEI via HTTP requests, but the evolved one could send a different
identifier such as IMSI via sockets. Semantically, they are almost
the same, but the directly observed implementations are different.
Following our observation, we propose to capture the semantic
similarity during malware evolution and use the captured infor-
mation to slow down the aging of malware classifiers. Our insight
is that if two behaviors—e.g., the invocation of different Android
APIs—are semantically similar, such similarity will also be reflected
in the official Android document like API references for developers.
For example, the API documents of both an HTTP request and a
plain socket mention Internet access. Therefore, we can extract
such common, semantic knowledge among different Android APIs
and group them to be used in malware classifiers.
Specifically, we design a framework, called APIGraph, to con-
struct a so-called relation graph of Android APIs based on informa-
tion provided in and extracted from the official documents. Each
node in the graph represents a key entity, such as an API, an
exception or a permission; and each edge represents the relation
between two entities, such as one API throwing an exception or
requiring a permission. APIGraph then extracts API semantics
from the relation graph by converting each API entity into an
embedding and grouping similar APIs into clusters. The extracted
API semantics in the format of API clusters can be further used
in existing Android malware classifiers to detect evolved malware,
thus slowing down aging.
We apply APIGraph upon four prior Android malware classifiers,
namely MamaDroid [32], DroidEvolver [49], Drebin [3], and
Drebin-DL [18], and evaluate them using a dataset created by
ourselves following existing guidelines [39], which contains more
than 322K Android apps ranging from 2012 to 2018. Our evaluation
shows that APIGraph can significantly reduce the labeling efforts
of the aforementioned four malware classifiers—i.e., ranging from
33.07% to 96.30% depending on the classifier—when combined with
the active learning in Tesseract [39]. We also measure the Area
Under Time (AUT), a new metric proposed by Tesseract, and show
a significant slowdown of model aging with the help of APIGraph.
Contributions. This paper makes the following contributions.
• We show that although Android malware evolves over time,
many semantics are still the same or similar, leaving us an
opportunity to detect them after evolution.
• We propose to represent similarities of Android APIs in a
relation graph and design a system, called APIGraph, to build
API relation graphs and extract semantics from relation graphs.
• We build a large-scale evolved dataset spanning over seven
years—the dataset is almost three times of the one used in the
state-of-the-art work [39] in evaluating model aging.
• We apply the results of APIGraph, i.e., API clusters, to four
state-of-the-art Android malware detectors, and show that the
manual labeling efforts are significantly reduced and the aging
of these models is significantly slowed down.
Figure 1: A motivating example to illustrate semantic simi-
larities of different malware variations during evolution.
2 OVERVIEW
In this section, we start from a motivating example and then
give an overview of the system architecture.
2.1 A Motivating Example
We illustrate a real-world, motivating example to explain how
APIGraph captures the semantics across various malware versions
during evolution. The malware example, called XLoader, is a
spyware and banking trojan that steals personally identifiable
information (PII) and financial data according to TrendMicro [34,
35]. Although XLoader has evolved into six different variations
with large implementation changes from April 2018 until late 2019,
many semantics across these variations still remain the same.
For the purpose of clear descriptions, we reverse engineered and
simplified the implementation of XLoader into three representative
code snippets (called V1, V2, and V3) as shown in Figure 1. We
listed two types of semantics that are preserved across these three
versions but with different implementations: (i) PII collection, and
(ii) sending PII to malware server. First, the PII collection evolves
from a single source in V1 to two in V2 and then multiple in V3.
Specifically, V1 only collects the device ID, i.e., the IMEI, V2 adds
 1    // collect personally identifiable information 2    JSONObject data = new JSONObject();  3    data.put(getDeviceId()); 4    ... 5    // send collected data to server through HTTP 6    URL url = new URL(SERVER_ADDR);  7    HttpURLConnection conn = url.openConnection(); 8    conn.connect(); 9    out = new DataOutputStream(conn.getOutputStream());10   out.writeBytes(data.toBytes()); 11   ... 1    // collect personally identifiable information 2    JSONObject data = new JSONObjec();  3    data.put(getDeviceId()); 4    data.put(getMacAddress()); 5    ... 6    // send collected data to server through Socket 7    Socket socket = SocketFactory.createSocket(SERVER_ADDR); 8    out = new DataOutputStream(socket.getOutputStream()); 9    out.writeBytes(data.toBytes());10    ... 1    // collect personally identifiable information 2    JSONObject data = new JSONObject();  3    data.put(getDeviceId()); 4    data.put(getMacAddress()); 5    data.put(getSubscriberId()); 6    data.put(getSimSerialNumber()); 7    ... 8    // send collected data to server through SSLSocket 9    SSLSocket socket =   SSLSocketFactory.createSocket(SERVER_ADDR);10    out = new DataOutputStream(socket.getOutputStream());11    out.writeBytes(data.toBytes());12    ...Listing 1: pseudo-code of XLoader V1Listing 2: pseudo-code of XLoader V2Listing 3: pseudo-code of XLoader V3Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA758used to enhance existing classifiers so that they can capture the
semantic-equivalent evolution of Android malware using certain
API levels during detection, thus slowing down aging.
3 DESIGN
In this section, we first define the key concept, i.e., our API
relation graph, and then describe how to build and leverage this
API relation graph.
3.1 Definition of API Relation Graph
An API relation graph 𝐺 = ⟨𝐸, 𝑅⟩ is defined as a directed graph,
where 𝐸 is the set of all nodes (called entities), and 𝑅 is the set of
all edges (called relations) between two nodes. API relation graph
is heterogeneous, i.e., there are different entity and relation types
as discussed below.
Entity Types. There are four types of entities in API relation graph,
which are basic concepts in Android: method, class, package and
permission. The former three entity types are key code elements
to organize Java programs and the last one depicts the resources
that an Android API needs during its execution. The four entities
together provide enough capability in capturing the internal
relationships among APIs.
Relation Types. We define ten relation types following a relation
taxonomy provided by prior works [25, 30], which covers diverse
information about an API profile. These ten types of relations, as
shown in Table 1, are also summarized into five categories and
described below.
• Organization category describes the code layout relationships
between different entities. Considering the four entity types,
we define class_of relation to connect a class entity with its
belonging package entity, function_of relation to connect a
method entity with its belonging class entity, and inheritance
relation to connect a class entity with its inherited class entity.
• Prototype category describes the prototype of a method entity,
including three types of relations: uses_parameter, returns,
throws relations, which reflect one method entity may use a
class entity as its parameter, return value, or thrown exception
respectively.
• Usage category specifies how to use an API. We focus on
two types of such relation: conditional relation specifies the
usage of one method entity is on conditional of another method
entity, e.g., one API should be used only after another API is
called; alternative relation depicts that one method entity can
be replaced by another method entity.
• Reference category has a refers_to relation that describes a
general relationship between two entities. For example, the API
document may refer another method entity when describing
one method entity using a sentence like “see also ...”.
• Permission category contains the uses_permission relation to
describe the permission entity that a method entity may require.
To build the API relation graph, we need to extract entities and
relations of the above types. In the rest of this section, we first
introduce the organization of Android API reference documents.
Then we describe how to extract entities and relations of different
types from these documents.
Figure 2: An illustrative relation graph to demonstrate how
APIGraph captures the semantics across different versions
of XLoader in Figure 1.
the MAC address, and V3 IMSI and ICCID. Second, the malware
sends PII to the malware server via three different implementations,
which are an HTTP request (Lines 6–10 in V1), a plain socket
connection (Lines 7–9 in V2), and an SSL socket connection (Lines
9–11 in V3).
Next, we explain how APIGraph captures the semantic sim-
ilarity among three different versions of XLoader in terms of
sending PII and thus helps ML classifiers trained with V1 to
detect evolved V2 and V3. Figure 2 shows a small part of the
relation graph constructed by APIGraph, which captures the
interplays of Android APIs, permissions and exceptions. All three
APIs—i.e., openConnection, SocketFactory.createSocket, and
ssl.SSLSocketFactory.createSocket—throw IOException and
use INTERNET permission; and two of these three APIs share more
exceptions and permissions. That is, these three APIs are close
enough in terms of neighborhoods in the relation graph and can be
group together in a cluster. Therefore, an ML classifier, under the
help of the relation graph, can capture the similarity between V2/V3
and V1 and detect V2 and V3 as a malware after the evolution.
2.2 System Architecture
Figure 3 shows the overall architecture of APIGraph, which builds
on a central piece of a concept called API relation graph capturing
the semantic meaning and similarities of all the Android APIs. There
are two major phases of APIGraph: (i) building API relation graph,
and (ii) leveraging API relation graph. First, APIGraph builds an
API relation graph by collecting Android API documents related
to a certain API level and extracting entities—such as APIs and
permissions—and relations between those entities.
Second, APIGraph leverages the API relation graph to enhance
existing malware detectors. Specifically, APIGraph converts all the
entities in the relation graph into vectors using graph embedding
algorithms. The insight here is that the vector difference between
two entities in the embedding space reflects the semantic meaning
of the relation. Therefore, APIGraph generates all the entities
embeddings via solving an optimization problem so that the vector
of two entities with the same relation is similar. Then, APIGraph
clusters all the API entities in the embedding space to group
semantically similar APIs together. Those API clusters are further
javax.net.SocketFactory;createSocket()java.net.URL;openConnection()android.permission.INTERNETjava.io.IOExceptionjava.lang.SecurityExceptionjavax.net.ssl.SSLSocketFactory;createSocket()java.net.URLConnectionjava.net.Socketjava.lang.SecurityManager;checkConnect()throwsreturnsrefers_touses_permissionmethodclasspermissionSession 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA759Figure 3: The overall architecture of APIGraph.
Table 1: Relation types defined in APIGraph.
Perspective Relations
Organization
Prototype
Usage
Reference
Permission
Entities
class→ package
class_of
method→ class
function_of
class → class
inheritance
uses_parameter method→class
method→class
returns
method→class
throws
method→method
conditional
method→method
alternative
method→ method
refers_to
method→class
uses_permission method→permission
Examples
java.net.Socket is class_of java.net
BluetoothDevice.getAddress() is function_of android.bluetooth.BluetoothDevice
javax.net.ssl.SSLSocketFactory inheritance javax.net.SocketFactory
javax.net.SocketFactory.createSocket() uses_parameter java.net.INetAddress
java.net.Socket.getInputStream() returns java.io.InputStream
LocationManager.requestLocationUpdates() throws java.lang.SecurityException
“This method should be called after ...”, “... is called when ...”
“This method is deprecated, use ... instead”, “is replaced by ...”
“Please refer to ...”, “see also ...”
“requires INTERNET permission”
3.2 API Document Collection
APIGraph downloads API reference documents for all platform
APIs and support libraries from the official website1. Each Android
version has a corresponding API level, e.g. Android 10 has API level
29. APIGraph crawls the documents for API level 14 to 29, which
correspond to Android 4.0 to Android 10 and they are the major
active Android versions at present.
Android API reference documents are organized hierarchically.
From the top level to the bottom level, there are packages, classes,