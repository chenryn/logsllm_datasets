its value is an index
into the section header string table section, giving the location of
a null-terminated string.
.tp
.ir sh_type
this member categorizes the section's contents and semantics.
.rs
.tp
.br sht_null
this value marks the section header as inactive.
it does not
have an associated section.
other members of the section header
have undefined values.
.tp
.br sht_progbits
this section holds information defined by the program, whose
format and meaning are determined solely by the program.
.tp
.br sht_symtab
this section holds a symbol table.
typically,
.br sht_symtab
provides symbols for link editing, though it may also be used
for dynamic linking.
as a complete symbol table, it may contain
many symbols unnecessary for dynamic linking.
an object file can
also contain a
.br sht_dynsym
section.
.tp
.br sht_strtab
this section holds a string table.
an object file may have multiple
string table sections.
.tp
.br sht_rela
this section holds relocation entries with explicit addends, such
as type
.ir elf32_rela
for the 32-bit class of object files.
an object may have multiple
relocation sections.
.tp
.br sht_hash
this section holds a symbol hash table.
an object participating in
dynamic linking must contain a symbol hash table.
an object file may
have only one hash table.
.tp
.br sht_dynamic
this section holds information for dynamic linking.
an object file may
have only one dynamic section.
.tp
.br sht_note
this section holds notes (elfn_nhdr).
.tp
.br sht_nobits
a section of this type occupies no space in the file but otherwise
resembles
.br sht_progbits .
although this section contains no bytes, the
.ir sh_offset
member contains the conceptual file offset.
.tp
.br sht_rel
this section holds relocation offsets without explicit addends, such
as type
.ir elf32_rel
for the 32-bit class of object files.
an object file may have multiple
relocation sections.
.tp
.br sht_shlib
this section is reserved but has unspecified semantics.
.tp
.br sht_dynsym
this section holds a minimal set of dynamic linking symbols.
an
object file can also contain a
.br sht_symtab
section.
.tp
.br sht_loproc ", " sht_hiproc
values in the inclusive range
.rb [ sht_loproc ", " sht_hiproc ]
are reserved for processor-specific semantics.
.tp
.br sht_louser
this value specifies the lower bound of the range of indices reserved for
application programs.
.tp
.br sht_hiuser
this value specifies the upper bound of the range of indices reserved for
application programs.
section types between
.br sht_louser
and
.br sht_hiuser
may be used by the application, without conflicting with current or future
system-defined section types.
.re
.tp
.ir sh_flags
sections support one-bit flags that describe miscellaneous attributes.
if a flag bit is set in
.ir sh_flags ,
the attribute is
"on"
for the section.
otherwise, the attribute is
"off"
or does not apply.
undefined attributes are set to zero.
.rs
.tp
.br shf_write
this section contains data that should be writable during process
execution.
.tp
.br shf_alloc
this section occupies memory during process execution.
some control
sections do not reside in the memory image of an object file.
this
attribute is off for those sections.
.tp
.br shf_execinstr
this section contains executable machine instructions.
.tp
.br shf_maskproc
all bits included in this mask are reserved for processor-specific
semantics.
.re
.tp
.ir sh_addr
if this section appears in the memory image of a process, this member
holds the address at which the section's first byte should reside.
otherwise, the member contains zero.
.tp
.ir sh_offset
this member's value holds the byte offset from the beginning of the file
to the first byte in the section.
one section type,
.br sht_nobits ,
occupies no space in the file, and its
.ir sh_offset
member locates the conceptual placement in the file.
.tp
.ir sh_size
this member holds the section's size in bytes.
unless the section type
is
.br sht_nobits ,
the section occupies
.ir sh_size
bytes in the file.
a section of type
.br sht_nobits
may have a nonzero size, but it occupies no space in the file.
.tp
.ir sh_link
this member holds a section header table index link, whose interpretation
depends on the section type.
.tp
.ir sh_info
this member holds extra information, whose interpretation depends on the
section type.
.tp
.ir sh_addralign
some sections have address alignment constraints.
if a section holds a
doubleword, the system must ensure doubleword alignment for the entire
section.
that is, the value of
.ir sh_addr
must be congruent to zero, modulo the value of
.ir sh_addralign .
only zero and positive integral powers of two are allowed.
the value 0 or 1 means that the section has no alignment constraints.
.tp
.ir sh_entsize
some sections hold a table of fixed-sized entries, such as a symbol table.
for such a section, this member gives the size in bytes for each entry.
this member contains zero if the section does not hold a table of
fixed-size entries.
.pp
various sections hold program and control information:
.tp
.ir .bss
this section holds uninitialized data that contributes to the program's
memory image.
by definition, the system initializes the data with zeros
when the program begins to run.
this section is of type
.br sht_nobits .
the attribute types are
.br shf_alloc
and
.br shf_write .
.tp
.ir .comment
this section holds version control information.
this section is of type
.br sht_progbits .
no attribute types are used.
.tp
.ir .ctors
this section holds initialized pointers to the c++ constructor functions.
this section is of type
.br sht_progbits .
the attribute types are
.br shf_alloc
and
.br shf_write .
.tp
.ir .data
this section holds initialized data that contribute to the program's
memory image.
this section is of type
.br sht_progbits .
the attribute types are
.br shf_alloc
and
.br shf_write .
.tp
.ir .data1
this section holds initialized data that contribute to the program's
memory image.
this section is of type
.br sht_progbits .
the attribute types are
.br shf_alloc
and
.br shf_write .
.tp
.ir .debug
this section holds information for symbolic debugging.
the contents
are unspecified.
this section is of type
.br sht_progbits .
no attribute types are used.
.tp
.ir .dtors
this section holds initialized pointers to the c++ destructor functions.
this section is of type
.br sht_progbits .
the attribute types are
.br shf_alloc
and
.br shf_write .
.tp
.ir .dynamic
this section holds dynamic linking information.
the section's attributes
will include the
.br shf_alloc
bit.
whether the
.br shf_write
bit is set is processor-specific.
this section is of type
.br sht_dynamic .
see the attributes above.
.tp
.ir .dynstr
this section holds strings needed for dynamic linking, most commonly
the strings that represent the names associated with symbol table entries.
this section is of type
.br sht_strtab .
the attribute type used is
.br shf_alloc .
.tp
.ir .dynsym
this section holds the dynamic linking symbol table.
this section is of type
.br sht_dynsym .
the attribute used is
.br shf_alloc .
.tp
.ir .fini
this section holds executable instructions that contribute to the process
termination code.
when a program exits normally the system arranges to
execute the code in this section.
this section is of type
.br sht_progbits .
the attributes used are
.br shf_alloc
and
.br shf_execinstr .
.tp
.ir .gnu.version
this section holds the version symbol table, an array of
.i elfn_half
elements.
this section is of type
.br sht_gnu_versym .
the attribute type used is
.br shf_alloc .
.tp
.ir .gnu.version_d
this section holds the version symbol definitions, a table of
.i elfn_verdef
structures.
this section is of type
.br sht_gnu_verdef .
the attribute type used is
.br shf_alloc .
.tp
.ir .gnu.version_r
this section holds the version symbol needed elements, a table of
.i elfn_verneed
structures.
this section is of
type
.br sht_gnu_versym .
the attribute type used is
.br shf_alloc .
.tp
.ir .got
this section holds the global offset table.
this section is of type
.br sht_progbits .
the attributes are processor-specific.
.tp
.ir .hash
this section holds a symbol hash table.
this section is of type
.br sht_hash .
the attribute used is
.br shf_alloc .
.tp
.ir .init
this section holds executable instructions that contribute to the process
initialization code.
when a program starts to run the system arranges to execute
the code in this section before calling the main program entry point.
this section is of type
.br sht_progbits .
the attributes used are
.br shf_alloc
and
.br shf_execinstr .
.tp
.ir .interp
this section holds the pathname of a program interpreter.
if the file has
a loadable segment that includes the section, the section's attributes will
include the
.br shf_alloc
bit.
otherwise, that bit will be off.
this section is of type
.br sht_progbits .
.tp
.ir .line
this section holds line number information for symbolic debugging,
which describes the correspondence between the program source and
the machine code.
the contents are unspecified.
this section is of type
.br sht_progbits .
no attribute types are used.
.tp
.ir .note
this section holds various notes.
this section is of type
.br sht_note .
no attribute types are used.
.tp
.ir .note.abi\-tag
this section is used to declare the expected run-time abi of the elf image.
it may include the operating system name and its run-time versions.
this section is of type
.br sht_note .
the only attribute used is
.br shf_alloc .
.tp
.ir .note.gnu.build\-id
this section is used to hold an id that uniquely identifies
the contents of the elf image.
different files with the same build id should contain the same executable
content.
see the
.br \-\-build\-id
option to the gnu linker (\fbld\fr (1)) for more details.
this section is of type
.br sht_note .
the only attribute used is
.br shf_alloc .
.tp
.ir .note.gnu\-stack
this section is used in linux object files for declaring stack attributes.
this section is of type
.br sht_progbits .
the only attribute used is
.br shf_execinstr .
this indicates to the gnu linker that the object file requires an
executable stack.
.tp
.ir .note.openbsd.ident
openbsd native executables usually contain this section
to identify themselves so the kernel can bypass any compatibility
elf binary emulation tests when loading the file.
.tp
.ir .plt
this section holds the procedure linkage table.
this section is of type
.br sht_progbits .
the attributes are processor-specific.
.tp
.ir .relname
this section holds relocation information as described below.
if the file
has a loadable segment that includes relocation, the section's attributes
will include the
.br shf_alloc
bit.
otherwise, the bit will be off.
by convention,
"name"
is supplied by the section to which the relocations apply.
thus a relocation
section for
.br .text
normally would have the name
.br .rel.text .
this section is of type
.br sht_rel .
.tp
.ir .relaname
this section holds relocation information as described below.
if the file
has a loadable segment that includes relocation, the section's attributes
will include the
.br shf_alloc
bit.
otherwise, the bit will be off.
by convention,
"name"
is supplied by the section to which the relocations apply.
thus a relocation
section for
.br .text
normally would have the name
.br .rela.text .
this section is of type
.br sht_rela .
.tp
.ir .rodata
this section holds read-only data that typically contributes to a
nonwritable segment in the process image.
this section is of type
.br sht_progbits .
the attribute used is
.br shf_alloc .
.tp
.ir .rodata1
this section holds read-only data that typically contributes to a
nonwritable segment in the process image.
this section is of type
.br sht_progbits .
the attribute used is
.br shf_alloc .
.tp
.ir .shstrtab
this section holds section names.
this section is of type
.br sht_strtab .
no attribute types are used.
.tp
.ir .strtab
this section holds strings, most commonly the strings that represent the
names associated with symbol table entries.
if the file has a loadable
segment that includes the symbol string table, the section's attributes
will include the
.br shf_alloc
bit.
otherwise, the bit will be off.
this section is of type
.br sht_strtab .
.tp
.ir .symtab
this section holds a symbol table.
if the file has a loadable segment
that includes the symbol table, the section's attributes will include
the
.br shf_alloc
bit.
otherwise, the bit will be off.
this section is of type
.br sht_symtab .
.tp
.ir .text
this section holds the
"text",
or executable instructions, of a program.
this section is of type
.br sht_progbits .
the attributes used are
.br shf_alloc
and
.br shf_execinstr .
.\"
.ss string and symbol tables
string table sections hold null-terminated character sequences, commonly
called strings.
the object file uses these strings to represent symbol
and section names.
one references a string as an index into the string
table section.
the first byte, which is index zero, is defined to hold
a null byte (\(aq\e0\(aq).
similarly, a string table's last byte is defined to
hold a null byte, ensuring null termination for all strings.
.pp
an object file's symbol table holds information needed to locate and
relocate a program's symbolic definitions and references.
a symbol table
index is a subscript into this array.
.pp
.in +4n
.ex
typedef struct {
    uint32_t      st_name;
    elf32_addr    st_value;
    uint32_t      st_size;
    unsigned char st_info;
    unsigned char st_other;
    uint16_t      st_shndx;
} elf32_sym;
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    uint32_t      st_name;
    unsigned char st_info;
    unsigned char st_other;
    uint16_t      st_shndx;
    elf64_addr    st_value;
    uint64_t      st_size;
} elf64_sym;
.ee
.in
.pp
the 32-bit and 64-bit versions have the same members, just in a different
order.