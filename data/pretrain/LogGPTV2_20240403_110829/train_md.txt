### Section Header and Symbol Table Details

#### Section Header Index
- **sh_name**: This value is an index into the section header string table, pointing to a null-terminated string that represents the section name.

#### Section Types
- **sh_type**: This member categorizes the section's contents and semantics.
  - **SHT_NULL**: This value marks the section header as inactive. It does not have an associated section, and other members of the section header have undefined values.
  - **SHT_PROGBITS**: This section holds information defined by the program, with format and meaning determined solely by the program.
  - **SHT_SYMTAB**: This section holds a symbol table, typically used for link editing and dynamic linking. It may contain many symbols unnecessary for dynamic linking. An object file can also contain a `SHT_DYNSYM` section.
  - **SHT_STRTAB**: This section holds a string table. An object file may have multiple string table sections.
  - **SHT_RELA**: This section holds relocation entries with explicit addends, such as type `ELF32_RELA` for 32-bit object files. An object file may have multiple relocation sections.
  - **SHT_HASH**: This section holds a symbol hash table, which is required for dynamic linking. An object file may have only one hash table.
  - **SHT_DYNAMIC**: This section holds information for dynamic linking. An object file may have only one dynamic section.
  - **SHT_NOTE**: This section holds notes (e.g., `ELFNOTE`).
  - **SHT_NOBITS**: A section of this type occupies no space in the file but otherwise resembles `SHT_PROGBITS`. The `sh_offset` member contains the conceptual file offset.
  - **SHT_REL**: This section holds relocation offsets without explicit addends, such as type `ELF32_REL` for 32-bit object files. An object file may have multiple relocation sections.
  - **SHT_SHLIB**: This section is reserved but has unspecified semantics.
  - **SHT_DYNSYM**: This section holds a minimal set of dynamic linking symbols. An object file can also contain a `SHT_SYMTAB` section.
  - **SHT_LOPROC** and **SHT_HIPROC**: Values in the inclusive range `[SHT_LOPROC, SHT_HIPROC]` are reserved for processor-specific semantics.
  - **SHT_LOUSER** and **SHT_HIUSER**: These values specify the lower and upper bounds of the range of indices reserved for application programs. Section types between `SHT_LOUSER` and `SHT_HIUSER` may be used by the application without conflicting with current or future system-defined section types.

#### Section Flags
- **sh_flags**: Sections support one-bit flags that describe miscellaneous attributes. If a flag bit is set in `sh_flags`, the attribute is "on" for the section; otherwise, it is "off" or does not apply. Undefined attributes are set to zero.
  - **SHF_WRITE**: This section contains data that should be writable during process execution.
  - **SHF_ALLOC**: This section occupies memory during process execution. Some control sections do not reside in the memory image of an object file, and this attribute is off for those sections.
  - **SHF_EXECINSTR**: This section contains executable machine instructions.
  - **SHF_MASKPROC**: All bits included in this mask are reserved for processor-specific semantics.

#### Section Attributes
- **sh_addr**: If this section appears in the memory image of a process, this member holds the address at which the section's first byte should reside. Otherwise, the member contains zero.
- **sh_offset**: This member's value holds the byte offset from the beginning of the file to the first byte in the section. For `SHT_NOBITS` sections, which occupy no space in the file, the `sh_offset` member locates the conceptual placement in the file.
- **sh_size**: This member holds the section's size in bytes. Unless the section type is `SHT_NOBITS`, the section occupies `sh_size` bytes in the file. A `SHT_NOBITS` section may have a nonzero size but occupies no space in the file.
- **sh_link**: This member holds a section header table index link, whose interpretation depends on the section type.
- **sh_info**: This member holds extra information, whose interpretation depends on the section type.
- **sh_addralign**: Some sections have address alignment constraints. For example, if a section holds a doubleword, the system must ensure doubleword alignment for the entire section. The value of `sh_addr` must be congruent to zero, modulo the value of `sh_addralign`. Only zero and positive integral powers of two are allowed. The value 0 or 1 means that the section has no alignment constraints.
- **sh_entsize**: Some sections hold a table of fixed-sized entries, such as a symbol table. For such a section, this member gives the size in bytes for each entry. This member contains zero if the section does not hold a table of fixed-size entries.

### Common Sections and Their Attributes
- **.bss**: This section holds uninitialized data that contributes to the program's memory image. The system initializes the data with zeros when the program begins to run. This section is of type `SHT_NOBITS` and has the attributes `SHF_ALLOC` and `SHF_WRITE`.
- **.comment**: This section holds version control information. It is of type `SHT_PROGBITS` and has no attributes.
- **.ctors**: This section holds initialized pointers to C++ constructor functions. It is of type `SHT_PROGBITS` and has the attributes `SHF_ALLOC` and `SHF_WRITE`.
- **.data**: This section holds initialized data that contribute to the program's memory image. It is of type `SHT_PROGBITS` and has the attributes `SHF_ALLOC` and `SHF_WRITE`.
- **.data1**: Similar to `.data`, this section holds initialized data and is of type `SHT_PROGBITS` with the attributes `SHF_ALLOC` and `SHF_WRITE`.
- **.debug**: This section holds information for symbolic debugging. The contents are unspecified. It is of type `SHT_PROGBITS` and has no attributes.
- **.dtors**: This section holds initialized pointers to C++ destructor functions. It is of type `SHT_PROGBITS` and has the attributes `SHF_ALLOC` and `SHF_WRITE`.
- **.dynamic**: This section holds dynamic linking information. The section's attributes will include the `SHF_ALLOC` bit. Whether the `SHF_WRITE` bit is set is processor-specific. It is of type `SHT_DYNAMIC`.
- **.dynstr**: This section holds strings needed for dynamic linking, most commonly the strings that represent the names associated with symbol table entries. It is of type `SHT_STRTAB` and has the attribute `SHF_ALLOC`.
- **.dynsym**: This section holds the dynamic linking symbol table. It is of type `SHT_DYNSYM` and has the attribute `SHF_ALLOC`.
- **.fini**: This section holds executable instructions that contribute to the process termination code. When a program exits normally, the system arranges to execute the code in this section. It is of type `SHT_PROGBITS` and has the attributes `SHF_ALLOC` and `SHF_EXECINSTR`.
- **.gnu.version**: This section holds the version symbol table, an array of `ElfN_Half` elements. It is of type `SHT_GNU_VERSYM` and has the attribute `SHF_ALLOC`.
- **.gnu.version_d**: This section holds the version symbol definitions, a table of `ElfN_Verdef` structures. It is of type `SHT_GNU_VERDEF` and has the attribute `SHF_ALLOC`.
- **.gnu.version_r**: This section holds the version symbol needed elements, a table of `ElfN_Verneed` structures. It is of type `SHT_GNU_VERSYM` and has the attribute `SHF_ALLOC`.
- **.got**: This section holds the global offset table. It is of type `SHT_PROGBITS` and has processor-specific attributes.
- **.hash**: This section holds a symbol hash table. It is of type `SHT_HASH` and has the attribute `SHF_ALLOC`.
- **.init**: This section holds executable instructions that contribute to the process initialization code. When a program starts to run, the system arranges to execute the code in this section before calling the main program entry point. It is of type `SHT_PROGBITS` and has the attributes `SHF_ALLOC` and `SHF_EXECINSTR`.
- **.interp**: This section holds the pathname of a program interpreter. If the file has a loadable segment that includes the section, the section's attributes will include the `SHF_ALLOC` bit. Otherwise, that bit will be off. It is of type `SHT_PROGBITS`.
- **.line**: This section holds line number information for symbolic debugging, which describes the correspondence between the program source and the machine code. The contents are unspecified. It is of type `SHT_PROGBITS` and has no attributes.
- **.note**: This section holds various notes. It is of type `SHT_NOTE` and has no attributes.
- **.note.ABI-tag**: This section is used to declare the expected run-time ABI of the ELF image. It may include the operating system name and its run-time versions. It is of type `SHT_NOTE` and has the attribute `SHF_ALLOC`.
- **.note.gnu.build-id**: This section is used to hold an ID that uniquely identifies the contents of the ELF image. Different files with the same build ID should contain the same executable content. See the `--build-id` option to the GNU linker (`ld(1)`) for more details. It is of type `SHT_NOTE` and has the attribute `SHF_ALLOC`.
- **.note.GNU-stack**: This section is used in Linux object files for declaring stack attributes. It is of type `SHT_PROGBITS` and has the attribute `SHF_EXECINSTR`, indicating that the object file requires an executable stack.
- **.note.openbsd.ident**: OpenBSD native executables usually contain this section to identify themselves so the kernel can bypass any compatibility ELF binary emulation tests when loading the file.
- **.plt**: This section holds the procedure linkage table. It is of type `SHT_PROGBITS` and has processor-specific attributes.
- **.relname**: This section holds relocation information. If the file has a loadable segment that includes relocation, the section's attributes will include the `SHF_ALLOC` bit. Otherwise, the bit will be off. By convention, `name` is supplied by the section to which the relocations apply. Thus, a relocation section for `.text` normally would have the name `.rel.text`. It is of type `SHT_REL`.
- **.relaname**: This section holds relocation information. If the file has a loadable segment that includes relocation, the section's attributes will include the `SHF_ALLOC` bit. Otherwise, the bit will be off. By convention, `name` is supplied by the section to which the relocations apply. Thus, a relocation section for `.text` normally would have the name `.rela.text`. It is of type `SHT_RELA`.
- **.rodata**: This section holds read-only data that typically contributes to a nonwritable segment in the process image. It is of type `SHT_PROGBITS` and has the attribute `SHF_ALLOC`.
- **.rodata1**: Similar to `.rodata`, this section holds read-only data and is of type `SHT_PROGBITS` with the attribute `SHF_ALLOC`.
- **.shstrtab**: This section holds section names. It is of type `SHT_STRTAB` and has no attributes.
- **.strtab**: This section holds strings, most commonly the strings that represent the names associated with symbol table entries. If the file has a loadable segment that includes the symbol string table, the section's attributes will include the `SHF_ALLOC` bit. Otherwise, the bit will be off. It is of type `SHT_STRTAB`.
- **.symtab**: This section holds a symbol table. If the file has a loadable segment that includes the symbol table, the section's attributes will include the `SHF_ALLOC` bit. Otherwise, the bit will be off. It is of type `SHT_SYMTAB`.
- **.text**: This section holds the "text," or executable instructions, of a program. It is of type `SHT_PROGBITS` and has the attributes `SHF_ALLOC` and `SHF_EXECINSTR`.

### String and Symbol Tables
- **String Table Sections**: These sections hold null-terminated character sequences, commonly called strings. The object file uses these strings to represent symbol and section names. A string is referenced as an index into the string table section. The first byte, which is index zero, is defined to hold a null byte (`\0`). Similarly, a string table's last byte is defined to hold a null byte, ensuring null termination for all strings.
- **Symbol Table**: An object file's symbol table holds information needed to locate and relocate a program's symbolic definitions and references. A symbol table index is a subscript into this array.

#### Symbol Table Structures
- **32-bit Symbol Table Entry**:
  ```c
  typedef struct {
      uint32_t st_name;
      Elf32_Addr st_value;
      uint32_t st_size;
      unsigned char st_info;
      unsigned char st_other;
      uint16_t st_shndx;
  } Elf32_Sym;
  ```

- **64-bit Symbol Table Entry**:
  ```c
  typedef struct {
      uint32_t st_name;
      unsigned char st_info;
      unsigned char st_other;
      uint16_t st_shndx;
      Elf64_Addr st_value;
      uint64_t st_size;
  } Elf64_Sym;
  ```

The 32-bit and 64-bit versions have the same members, just in a different order.