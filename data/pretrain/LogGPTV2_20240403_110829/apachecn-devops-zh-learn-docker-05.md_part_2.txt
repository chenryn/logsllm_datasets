```
它应该会成功。退出此容器，然后执行以下命令:
```
$ docker container run -it --name reader \
 -v shared-data:/app/data:ro \
 ubuntu:17.04 /bin/bash
```
我们有一个名为`reader`的容器，其安装的体积与只读的 ( **ro** 相同。首先，确保您可以看到在第一个容器中创建的文件:
```
$ ls -l /app/data 
total 4
-rw-r--r-- 1 root root 20 Jan 28 22:55 sample.txt
```
然后尝试创建一个文件:
```
# / echo "Try to break read/only" > /app/data/data.txt
```
它将失败，并显示以下消息:
```
bash: /app/data/data.txt: Read-only file system
```
让我们通过在命令提示符下键入`exit`退出容器。回到主机上，让我们清理所有容器和卷:
```
$ docker container rm -f $(docker container ls -aq) 
$ docker volume rm $(docker volume ls -q) 
```
完成后，通过在命令提示符下输入`exit`退出`docker-machine`虚拟机。你应该回到你的苹果电脑或视窗系统上。使用`docker-machine`停止虚拟机:
```
$ docker-machine stop node-1 
```
# 使用主机卷
在某些情况下，例如当开发新的容器化应用时，或者当容器化应用需要使用某个文件夹中的数据时，例如由遗留应用生成的数据，使用装载特定主机文件夹的卷非常有用。让我们看看下面的例子:
```
$ docker container run --rm -it \
 -v $(pwd)/src:/app/src \
 alpine:latest /bin/sh
```
前面的表达式用一个 shell 交互式地启动一个`alpine`容器，并将当前目录的子文件夹`src`装载到位于`/app/src`的容器中。我们需要使用当前目录`$(pwd)`(或者说`'pwd'`，因为在处理卷时，我们总是需要使用绝对路径。
当开发人员处理在容器中运行的应用时，他们一直使用这些技术，并且希望确保容器始终包含他们对代码所做的最新更改，而不需要在每次更改后重建映像并重新运行容器。
让我们制作一个示例来演示这是如何工作的。假设我们想创建一个简单的静态网站，使用 Nginx 作为我们的网络服务器。首先，让我们在主机上创建一个新文件夹，我们将在其中放置我们的 web 资产，如 HTML、CSS 和 JavaScript 文件，并导航到它:
```
$ mkdir ~/my-web 
$ cd ~/my-web 
```
然后我们创建一个简单的网页，如下所示:
```
$ echo "Personal Website" > index.html 
```
现在，我们添加一个 Dockerfile，它将包含如何构建包含示例网站的映像的说明。将名为 Dockerfile 的文件添加到包含以下内容的文件夹中:
```
FROM nginx:alpine
COPY . /usr/share/nginx/html
```
Dockerfile 从 Nginx 的最新 Alpine 版本开始，然后将所有文件从当前主机目录复制到 containers 文件夹`/usr/share/nginx/html`。这是 Nginx 期望网络资产的位置。现在，让我们使用以下命令构建映像:
```
$ docker image build -t my-website:1.0 . 
```
最后，我们用这张图片运行一个容器。我们将以分离模式运行容器:
```
$ docker container run -d \
 -p 8080:80 --name my-site\
 my-website:1.0
```
注意`-p 8080:80`参数。我们还没有讨论这个问题，但是我们将在[第 7 章](07.html)、*单主机网络*中详细讨论。目前，只需知道这将 Nginx 监听传入请求的容器端口`80`映射到您的笔记本电脑的端口`8080`，然后您就可以访问该应用。现在，打开一个浏览器标签，导航到`http://localhost:8080/index.html`，你会看到你的网站，目前只有一个标题，`Personal Website`。
现在，在您最喜欢的编辑器中编辑文件`index.html`如下所示:
```
Personal Website 
This is some text 
```
省省吧。然后刷新浏览器。好吧，那没用。浏览器仍然显示仅由标题组成的`index.html`的先前版本。因此，让我们停止并移除当前容器，然后重建映像，并重新运行容器:
```
$ docker container rm -f my-site
$ docker image build -t my-website:1.0 .
$ docker container run -d \
 -p 8080:80 --name my-site\
 my-website:1.0
```
这一次，当您刷新浏览器时，应该会显示新内容。嗯，它起作用了，但是有太多的摩擦。想象一下，每当你在网站上做一个简单的改变时，你都必须这样做。这是不可持续的。
现在是使用主机装载卷的时候了。再次删除当前容器，并使用卷装载重新运行它:
```
$ docker container rm -f my-site
$ docker container run -d \
 -v $(pwd):/usr/share/nginx/html \
 -p 8080:80 --name my-site\
 my-website:1.0
```
现在，向`index.html`追加一些内容并保存。然后刷新浏览器。你应该看看变化。这正是我们想要实现的；我们也称之为编辑-继续体验。您可以在 web 文件中进行尽可能多的更改，并且总是可以在浏览器中立即看到结果，而无需重建映像和重新启动包含您的网站的容器。
需要注意的是，更新现在是双向传播的。如果您在主机上进行更改，它们将被传播到容器，反之亦然。同样重要的是，当您将当前文件夹装载到容器目标文件夹`/usr/share/nginx/html`中时，已经存在的内容将被主文件夹的内容替换。
# 定义映像中的体积
如果我们回顾一下我们在[第 3 章](03.html)、*中所学的关于容器的知识，那么我们就有了这个:当启动时，每个容器的文件系统由底层映像的不可变层加上一个特定于这个容器的可写容器层组成。容器内运行的进程对文件系统所做的所有更改都将保存在这个容器层中。一旦容器停止并从系统中移除，相应的容器层将从系统中删除，并且不可逆转地丢失。*
一些应用，例如在容器中运行的数据库，需要在容器的生命周期之外保存它们的数据。在这种情况下，他们可以使用卷。为了让事情更明确一点，让我们看一个具体的例子。MongoDB 是一个流行的开源文档数据库。许多开发人员将 MongoDB 用作其应用的存储服务。MongoDB 的维护者已经创建了一个映像，并将其发布在 Docker Hub 上，该映像可用于运行容器中的数据库实例。该数据库将产生需要长期保存的数据。但是 MongoDB 的维护者不知道谁使用了这个映像，也不知道它是如何使用的。因此，它们对数据库用户用来启动这个容器的`docker container run`命令没有影响。*他们现在如何定义卷？*
幸运的是，有一种方法可以在 Dockerfile 中定义卷。这样做的关键字是`VOLUME`，我们可以将绝对路径添加到单个文件夹中，也可以添加逗号分隔的路径列表。这些路径代表容器文件系统的文件夹。让我们看几个这样的体积定义的例子:
```
VOLUME /app/data 
VOLUME /app/data, /app/profiles, /app/config 
VOLUME ["/app/data", "/app/profiles", "/app/config"] 
```
第一行定义了要在`/app/data`安装的单个体积。第二行将三个卷定义为逗号分隔的列表，最后一行的定义与第二行相同，但这次该值被格式化为 JSON 数组。
当容器启动时，Docker 会自动创建一个卷，并为 Dockerfile 中定义的每个路径将其装载到容器的相应目标文件夹中。因为每个卷都是由 Docker 自动创建的，所以它会有一个 SHA-256 作为 ID。
在容器运行时，在 Dockerfile 中定义为卷的文件夹被排除在联合文件系统之外，因此这些文件夹中的任何更改都不会更改容器层，而是保留在相应的卷中。现在，运营工程师有责任确保正确备份卷的备份存储。
我们可以使用`docker image inspect`命令获取 Dockerfile 中定义的卷的信息。让我们看看 MongoDB 给了我们什么。首先，我们使用以下命令来拉取映像:
```
$ docker image pull mongo:3.7 
```
然后我们检查该映像，并使用`--format`参数从大量数据中仅提取基本部分:
```
 $ docker image inspect \
   --format='{{json .ContainerConfig.Volumes}}' \
    mongo:3.7 | jq 
```
这将返回以下结果:
```
{
"/data/configdb": {},
"/data/db": {}
}
```
显然，MongoDB 的 Dockerfile 在`/data/configdb`和`/data/db`定义了两个卷。
现在，让我们运行一个 MongoDB 实例，如下所示:
```
$ docker run --name my-mongo -d mongo:3.7
```
我们现在可以使用`docker container inspect`命令来获取已经创建的卷的信息。使用此命令仅获取卷信息:
```
$ docker inspect --format '{{json .Mounts}}' my-mongo | jq
```
表达式应该输出如下内容:
```
[
  {
    "Type": "volume",
    "Name": "b9ea0158b5...",
    "Source": "/var/lib/docker/volumes/b9ea0158b.../_data",
    "Destination": "/data/configdb",
    "Driver": "local",
    "Mode": "",
    "RW": true,
    "Propagation": ""
  },
  {
    "Type": "volume",
    "Name": "5becf84b1e...",
    "Source": "/var/lib/docker/volumes/5becf84b1.../_data",
    "Destination": "/data/db",
    "Driver": "local",
    "Mode": "",
    "RW": true,
    "Propagation": ""
  }
]
```
请注意，`Name`和`Source`字段的值已被修剪以提高可读性。`Source`字段为我们提供了存储容器中 MongoDB 产生的数据的主机目录的路径。
# 获取 Docker 系统信息
每当我们需要对系统进行故障排除时，本节中介绍的命令是必不可少的。它们为我们提供了许多关于安装在主机上的 Docker 引擎和主机操作系统的信息。我们先介绍一下`docker version`命令。它提供了您当前配置使用的 Docker 客户机和服务器的丰富信息。如果在 CLI 中输入该命令，您应该会看到类似如下的内容:
![](img/f1d02772-7521-428b-85ef-561279cd41ec.png)
Version Information about Docker
在我的例子中，我可以看到在客户端和服务器端，我都在使用 Docker 引擎的版本`18.04.0-ce-rc2`。我也可以看到我的指挥是 Swarm 等等。
现在，为了阐明什么是客户端，什么是服务器，让我们看一下下图:
![](img/a68fdc6a-896d-4cbc-b3da-e42fd26a642c.png)
CLI accessing different Docker Hosts
您可以看到，客户端是一个小 CLI，我们通过它向 Docker 主机的远程 API 发送 Docker 命令。Docker 主机是托管容器的容器运行时，可能与 CLI 运行在同一台机器上，也可能运行在远程服务器、本地或云中。我们可以使用命令行界面来管理不同的服务器。我们通过设置一系列环境变量来做到这一点，例如`DOCKER_HOST`、`DOCKER_TLS_VERIFY`和`DOCKER_CERT_PATH`。如果这些环境变量没有在您的工作机器上设置，并且您正在使用 Docker for Mac 或 Windows，那么这意味着您正在使用在您的机器上运行的 Docker 引擎。
下一个重要命令是`docker system info`命令。该命令提供了关于 Docker 引擎以什么模式运行(集群模式与否)、联合文件系统使用什么存储驱动程序、我们的主机上有什么版本的 Linux 内核等信息。运行命令时，请仔细查看系统生成的输出。分析显示什么样的信息: