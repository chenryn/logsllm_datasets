typedef unsigned char   undefined;
typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned int    dword;
float10
typedef long long    longlong;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef short    wchar_t;
typedef unsigned short    word;
typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion;
typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct {
    dword OffsetToDirectory;
    dword DataIsDirectory;
};
union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion {
    dword OffsetToData;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
};
typedef struct _s__RTTIBaseClassDescriptor _s__RTTIBaseClassDescriptor, *P_s__RTTIBaseClassDescriptor;
typedef struct TypeDescriptor TypeDescriptor, *PTypeDescriptor;
typedef struct PMD PMD, *PPMD;
typedef struct _s__RTTIClassHierarchyDescriptor _s__RTTIClassHierarchyDescriptor, *P_s__RTTIClassHierarchyDescriptor;
typedef struct _s__RTTIClassHierarchyDescriptor RTTIClassHierarchyDescriptor;
typedef int ptrdiff_t;
typedef struct _s__RTTIBaseClassDescriptor RTTIBaseClassDescriptor;
struct TypeDescriptor {
    void * pVFTable;
    void * spare;
    char[0] name;
};
struct PMD {
    ptrdiff_t mdisp;
    ptrdiff_t pdisp;
    ptrdiff_t vdisp;
};
struct _s__RTTIBaseClassDescriptor {
    struct TypeDescriptor * pTypeDescriptor; // ref to TypeDescriptor (RTTI 0) for class
    dword numContainedBases; // count of extended classes in BaseClassArray (RTTI 2)
    struct PMD where; // member displacement structure
    dword attributes; // bit flags
    RTTIClassHierarchyDescriptor * pClassHierarchyDescriptor; // ref to ClassHierarchyDescriptor (RTTI 3) for class
};
struct _s__RTTIClassHierarchyDescriptor {
    dword signature;
    dword attributes; // bit flags
    dword numBaseClasses; // number of base classes (i.e. rtti1Count)
    RTTIBaseClassDescriptor * * pBaseClassArray; // ref to BaseClassArray (RTTI 2)
};
typedef struct _s_UnwindMapEntry _s_UnwindMapEntry, *P_s_UnwindMapEntry;
typedef int __ehstate_t;
struct _s_UnwindMapEntry {
    __ehstate_t toState;
    void (* action)(void);
};
typedef struct  , *P;
struct  { // PlaceHolder Class Structure
};
typedef unsigned short    wchar16;
typedef struct _s_UnwindMapEntry UnwindMapEntry;
typedef struct _s_ESTypeList _s_ESTypeList, *P_s_ESTypeList;
typedef struct _s_ESTypeList ESTypeList;
typedef struct _s_HandlerType _s_HandlerType, *P_s_HandlerType;
typedef struct _s_HandlerType HandlerType;
struct _s_HandlerType {
    uint adjectives;
    struct TypeDescriptor * pType;
    ptrdiff_t dispCatchObj;
    void * addressOfHandler;
};
struct _s_ESTypeList {
    int nCount;
    HandlerType * pTypeArray;
};
typedef struct __crt_seh_guarded_call __crt_seh_guarded_call, *P__crt_seh_guarded_call;
struct __crt_seh_guarded_call { // PlaceHolder Class Structure
};
typedef struct __crt_seh_guarded_call __crt_seh_guarded_call, *P__crt_seh_guarded_call;
struct __crt_seh_guarded_call { // PlaceHolder Class Structure
};
typedef struct _s__RTTICompleteObjectLocator _s__RTTICompleteObjectLocator, *P_s__RTTICompleteObjectLocator;
typedef struct _s__RTTICompleteObjectLocator RTTICompleteObjectLocator;
struct _s__RTTICompleteObjectLocator {
    dword signature;
    dword offset; // offset of vbtable within class
    dword cdOffset; // constructor displacement offset
    struct TypeDescriptor * pTypeDescriptor; // ref to TypeDescriptor (RTTI 0) for class
    RTTIClassHierarchyDescriptor * pClassDescriptor; // ref to ClassHierarchyDescriptor (RTTI 3)
};
typedef struct _s_TryBlockMapEntry _s_TryBlockMapEntry, *P_s_TryBlockMapEntry;
typedef struct _s_TryBlockMapEntry TryBlockMapEntry;
struct _s_TryBlockMapEntry {
    __ehstate_t tryLow;
    __ehstate_t tryHigh;
    __ehstate_t catchHigh;
    int nCatches;
    HandlerType * pHandlerArray;
};
typedef struct _s_FuncInfo _s_FuncInfo, *P_s_FuncInfo;
struct _s_FuncInfo {
    uint magicNumber_and_bbtFlags;
    __ehstate_t maxState;
    UnwindMapEntry * pUnwindMap;
    uint nTryBlocks;
    TryBlockMapEntry * pTryBlockMap;
    uint nIPMapEntries;
    void * pIPToStateMap;
    ESTypeList * pESTypeList;
    int EHFlags;
};
typedef ulonglong __uint64;
typedef struct __crt_seh_guarded_call __crt_seh_guarded_call, *P__crt_seh_guarded_call;
struct __crt_seh_guarded_call { // PlaceHolder Class Structure
};
typedef struct _s_FuncInfo FuncInfo;
typedef struct _cpinfo _cpinfo, *P_cpinfo;
typedef uint UINT;
typedef uchar BYTE;
struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
};
typedef struct _cpinfo * LPCPINFO;
typedef struct _OVERLAPPED _OVERLAPPED, *P_OVERLAPPED;
typedef ulong ULONG_PTR;
typedef union _union_518 _union_518, *P_union_518;
typedef void * HANDLE;
typedef struct _struct_519 _struct_519, *P_struct_519;
typedef void * PVOID;
typedef ulong DWORD;
struct _struct_519 {
    DWORD Offset;
    DWORD OffsetHigh;
};
union _union_518 {
    struct _struct_519 s;
    PVOID Pointer;
};
struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union _union_518 u;
    HANDLE hEvent;
};
typedef struct _WIN32_FIND_DATAW _WIN32_FIND_DATAW, *P_WIN32_FIND_DATAW;
typedef struct _WIN32_FIND_DATAW * LPWIN32_FIND_DATAW;
typedef struct _FILETIME _FILETIME, *P_FILETIME;
typedef struct _FILETIME FILETIME;
typedef wchar_t WCHAR;
struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
};
struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
};
typedef struct _SECURITY_ATTRIBUTES _SECURITY_ATTRIBUTES, *P_SECURITY_ATTRIBUTES;
typedef struct _SECURITY_ATTRIBUTES * LPSECURITY_ATTRIBUTES;
typedef void * LPVOID;
typedef int BOOL;
struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
};
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoBasic=1,
    FindExInfoMaxInfoLevel=2,
    FindExInfoStandard=0
} _FINDEX_INFO_LEVELS;
typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard=0,
    GetFileExMaxInfoLevel=1
} _GET_FILEEX_INFO_LEVELS;
typedef enum _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
typedef struct _PROCESS_INFORMATION _PROCESS_INFORMATION, *P_PROCESS_INFORMATION;
typedef struct _PROCESS_INFORMATION * LPPROCESS_INFORMATION;
struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
};
typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchLimitToDevices=2,
    FindExSearchLimitToDirectories=1,
    FindExSearchMaxSearchOp=3,
    FindExSearchNameMatch=0
} _FINDEX_SEARCH_OPS;
typedef long LONG;
typedef struct _EXCEPTION_POINTERS _EXCEPTION_POINTERS, *P_EXCEPTION_POINTERS;
typedef LONG (* PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *);
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD, *P_EXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;
typedef EXCEPTION_RECORD * PEXCEPTION_RECORD;
typedef struct _CONTEXT _CONTEXT, *P_CONTEXT;
typedef struct _CONTEXT CONTEXT;
typedef CONTEXT * PCONTEXT;
typedef struct _FLOATING_SAVE_AREA _FLOATING_SAVE_AREA, *P_FLOATING_SAVE_AREA;
typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;
struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};
struct _CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};
struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD * ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};
struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};
typedef struct _STARTUPINFOW _STARTUPINFOW, *P_STARTUPINFOW;
typedef WCHAR * LPWSTR;
typedef ushort WORD;
typedef BYTE * LPBYTE;
struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};
typedef struct _STARTUPINFOW * LPSTARTUPINFOW;
typedef struct _OVERLAPPED * LPOVERLAPPED;
typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
typedef struct _RTL_CRITICAL_SECTION _RTL_CRITICAL_SECTION, *P_RTL_CRITICAL_SECTION;
typedef struct _RTL_CRITICAL_SECTION * PRTL_CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef struct _RTL_CRITICAL_SECTION_DEBUG _RTL_CRITICAL_SECTION_DEBUG, *P_RTL_CRITICAL_SECTION_DEBUG;
typedef struct _RTL_CRITICAL_SECTION_DEBUG * PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _LIST_ENTRY _LIST_ENTRY, *P_LIST_ENTRY;
typedef struct _LIST_ENTRY LIST_ENTRY;
struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
};
struct _LIST_ENTRY {
    struct _LIST_ENTRY * Flink;
    struct _LIST_ENTRY * Blink;
};