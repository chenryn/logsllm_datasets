a small part of the malicious activity, could evade our de-
tector if the attacker knows the feature values—which, is
challenging for a userland malware. Multiprocess malware
is partially mitigated by the combination of system-centric
models with the incremental, multi-tier strategy. Neverthe-
less, ransomware could perform encryption very slowly. This
however, is against the attackers’ goal, who wants to encrypt
all ﬁles before users can notice any change. Last, even if a
malicious process is not detected, thanks to our conservative
ﬁle-shadowing approach, a user noticing the encrypted ﬁles
can manually restore the original ﬁles from the copies.
Cryptography Primitives Detection Evasion. A pos-
sible cause of false negatives of our approach is the use
of dedicated ISA extensions of modern CPUs (e.g., Intel
AES-NI [4]) to perform the encryption oﬀ memory, using a
dedicated register ﬁle. However, in such case the malware
binary code would contain those speciﬁc instructions, not
to mention that the malware will work only if the victim
machine supports the Intel AES-NI extensions.
The current proof-of-concept implementation of ShieldFS
supports only the detection of AES. Supporting other ciphers
is an implementation eﬀort, as our approach is valid for the
majority of symmetric block ciphers.
Tampering with the Kernel. ShieldFS runs in a privi-
leged kernel mode. We implemented ShieldFS to be “non
unloadable” at runtime, even by administrator users. Further-
more, ShieldFS is able to deny any operation that attempts
Table 8: Inﬂuence of T on runtime and storage overhead.
Storage Space Overhead
T Runtime Overhead
[hrs] Avg [×]
0.263
1
0.262
2
0.261
3
4
0.260
Std.dev [×] Max [GB] Avg [GB] Max [%] Avg [%]
0.586
0.720
0.746
0.766
0.0404
0.0404
0.0403
0.0403
5.4838
5.8402
5.5768
5.5927
0.4040
0.4875
0.4994
0.5150
4.353
4.762
4.522
4.545
to delete or modify the driver binaries. An administrator-
privileged process, however, could try to prevent ShieldFS
service from starting at boot, by modifying the Windows
registry, and force a reboot. This limitation can be mitigated
by embedding our approach directly in the kernel without
the need for a service. Doing so, the only chance to bypass
our system is to compromise the OS kernel.
Preventing Denial of Service. A malware could attempt
to compromise ShieldFS itself by ﬁlling up the shadow drive.
First, in this scenario it is likely that ShieldFS detects and
stops the malicious process before it ﬁlls the entire space.
Second, ShieldFS makes the shadow drive read-only, denying
any modiﬁcation request coming from userland processes.
Last, ShieldFS could monitor the shadow drive and alert
the user when it is running out of space.
7 RELATED WORKS
Kharraz et al. [7] studied the behavior of scareware and
ransomware, observing its evolution during the last years,
in terms of encryption mechanisms, ﬁlesystem interactions,
and ﬁnancial incentives. They suggested some potential
defenses, but evaluating them was out of the scope of their
paper. Indeed, while [7] analyzed the ﬁlesystem activity of
ransomware, the authors (and any other work) did not focus
on analyzing the ﬁlesystem activity of benign applications,
which we found crucial to build a robust detector.
Concurrently and independently to our work, Kharraz
et al. [6] and Scaife et al. [14] published two ransomware
detection approaches, respectively UNVEIL and CryptoDrop.
Although they both look at the ﬁlesystem layer to spot
the typical ransomware activity, they do not provide any
recovery capability. Also, their approaches do not include
identiﬁcation of cryptographic primitives. Diﬀerently from
our work, UNVEIL includes text analysis techniques to detect
ransomware threatening notes and screen lockers, along the
line of [1], and CryptoDrop uses similarity-preserving hash
functions to measure the dissimilarity between the original
and the encrypted content of each ﬁle. These two techniques
are complementary to ours, and can be added to ShieldFS
as additional detection features.
Andronio et al. [1] studied the ransomware phenomenon
on Android devices, proposing an approach, HelDroid, to
identify malicious apps. Besides the diﬀerence in the target
platform, HelDroid looks at how ransomware behaves at the
application layer, whereas we focus on its low-level behavior.
Thus, their approach is complementary to ours, also because
it is based on static analysis.
Our data-collection and mining phase is somehow akin to
what Lanzi et al. [9] did to perform a large-scale collection of
system calls, with the purpose of studying malware behavior
by means of the system and API call proﬁles. We focus on
IRPs instead as they better capture ransomware behavior.
Lestringant et al. [10] applied graph isomorphism tech-
niques to data-ﬂow graphs in order to identify cryptographic
primitives in binary code. Although [10] works at binary
level, whereas ShieldFS identiﬁes usage of cryptographic
primitives at runtime, it is a valid alternative that can be
used to complement our CryptoFinder.
8 CONCLUSIONS
In this paper, we proposed an approach to make modern
operating systems more resilient to malicious encryption
attacks, by detecting ransomware-like behaviors and reverting
their eﬀects safeguarding the integrity of users’ data.
We foresee ShieldFS as a countermeasure that keeps an
always-fresh, automatic backup of the ﬁles modiﬁed in the
short term. We argue that, although older ﬁles can be
asynchronously backed up with on-premise systems (because
they have less strict time constraints), recent ﬁles may be
of immense value for a user (e.g., time-sensitive content);
even the loss of a small update to an important ﬁle may end
up in the decision to pay the ransom, because the existing
backup is simply too old. With traditional backup solutions
alone there exist a trade oﬀ between performance, space
and “freshness,” not to mention that a ransomware may
encrypt the backups as well! Generally, traditional solutions
work well for incremental backups, long-term archives with
no real-time constraints. Pushing such backup solutions
to tighter time constraints while keeping reasonable system
performance may result in side eﬀects. For instance, once a
ﬁle is encrypted by a ransomware, there exists a risk that it
may replace the plaintext backup. Instead, ShieldFS works
at a lower level. Thus, it is transparent to a ransomware that
works at the ﬁlesystem’s logical view. Therefore, it is best
suited for the protection of short-term ﬁle changes, leaving
traditional backups protecting from long-term ﬁle changes.
9 ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their valuable feed-
back. This work was supported in part by the MIUR FACE
Project No. RBFR13AJFT.
References
[1] Nicol´o Andronio, Stefano Zanero, and Federico Maggi.
“HelDroid: Dissecting and Detecting Mobile Ransomware.”
In: Research in Attacks, Intrusions, and Defenses. Springer,
2015, pp. 382–404.
[2] Liviu Arsene and Alexandra Gheorghe. Ransomware.
A Victim’s Perspective. Tech. rep. Bitdefender, 2016.
url: http://www.bitdefender.com/media/materials/
white-papers/en/Bitdefender Ransomware A Victim
Perspective.pdf.
[3] FBI. Criminals Continue to Defraud and Extort Funds
from Victims Using CryptoWall Ransomware Schemes.
2015. url: http://www.ic3.gov/media/2015/150623.
aspx.
[4] Shay Gueron. Intel Advanced Encryption Standard
(AES) New Instructions Set. Tech. rep. Intel, 2012.
url: https://software.intel.com/sites/default/ﬁles/
article/165683/aes-wp-2012-09-22-v01.pdf.
[5] Microsoft Inc. File System Miniﬁlter Drivers. 2014.
url: https : / / msdn . microsoft . com / en - us / library /
windows/hardware/ﬀ540402(v=vs.85).aspx.
[6] Amin Kharaz et al. “UNVEIL: A Large-Scale, Auto-
mated Approach to Detecting Ransomware.” In: 25th
USENIX Security Symposium (USENIX Security 16).
Austin, TX: USENIX Association, 2016, pp. 757–772.
isbn: 978-1-931971-32-4.
[7] Amin Kharraz et al. “Cutting the Gordian Knot: A
Look Under the Hood of Ransomware Attacks.” In:
Detection of Intrusions and Malware, and Vulnerabil-
ity Assessment: 12th International Conference, DIMVA
2015, Milan, Italy, July 9-10, 2015, Proceedings. Vol. 9148.
Springer. 2015, p. 3.
[8] Vadim Kotov and Mantej Singh Rajpal. Understanding
Crypto-Ransomware: In-Depth Analysis of the Most
Popular Malware Families. Tech. rep. Bromium, 2014.
[9] Andrea Lanzi et al. “AccessMiner: using system-centric
models for malware protection.” In: Proceedings of the
17th ACM conference on Computer and communica-
tions security. ACM. 2010, pp. 399–412.
[10] Pierre Lestringant, Fr´ed´eric Guih´ery, and Pierre-Alain
Fouque. “Automated Identiﬁcation of Cryptographic
Primitives in Binary Code with Data Flow Graph Iso-
morphism.” In: Proceedings of the 10th ACM Sympo-
sium on Information, Computer and Communications
Security. ACM. 2015, pp. 203–214.
[11] Trend Micro. Ransomware Bill Seeks to Curb the Ex-
tortion Malware Epidemic. 2016. url: http://www.
trendmicro.com/vinfo/us/security/news/cybercrime-
and-digital-threats/ransomware-bill-curb-the-extortion-
malware-epidemic.
[12] Christian Rossow et al. “Prudent practices for designing
malware experiments: Status quo and outlook.” In:
Security and Privacy (SP), 2012 IEEE Symposium on.
IEEE. 2012, pp. 65–79.
[13] Kevin Savage, Peter Coogan, and Hon Lau. The evolu-
tion of ransomware. Tech. rep. Symantec, 2015.
[14] Nolen Scaife et al. “CryptoLock (and Drop It): Stop-
ping Ransomware Attacks on User Data.” In: 2016
IEEE 36th International Conference on Distributed
Computing Systems (ICDCS). IEEE. 2016.
[15] Michele Spagnuolo, Federico Maggi, and Stefano Zanero.
“Financial Cryptography and Data Security: 18th In-
ternational Conference, FC 2014, Christ Church, Bar-
bados, March 3-7, 2014, Revised Selected Papers.” In:
ed. by Nicolas Christin and Reihaneh Safavi-Naini.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2014.
Chap. BitIodine: Extracting Intelligence from the Bit-
coin Network, pp. 457–468. isbn: 978-3-662-45472-5.
doi: 10.1007/978-3-662-45472-5 29.
[16] Unlock the key to repel ransomware. Tech. rep. Kasper-
sky Lab, 2015.
[17] Video demonstration of ShieldFS in action. url: https:
//www.youtube.com/watch?v=0UlgdnQQaLM.
[18] David Wagner and Paolo Soto. “Mimicry attacks on
host-based intrusion detection systems.” In: Proceed-
ings of the 9th ACM Conference on Computer and
Communications Security. ACM. 2002, pp. 255–264.
[19] Tobias W¨uchner, Mart´ın Ochoa, and Alexander Pretschner.
“Robust and Eﬀective Malware Detection Through
Quantitative Data Flow Graph Metrics.” In: Detection
of Intrusions and Malware, and Vulnerability Assess-
ment. Springer, 2015, pp. 98–118.
[20] Adam Young and Moti Yung. “Cryptovirology: Extortion-
based security threats and countermeasures.” In: Se-
curity and Privacy, 1996. Proceedings., 1996 IEEE
Symposium on. IEEE. 1996, pp. 129–140.
APPENDIX
A Real Example of IRP Log (Critroni sample)
Timestamp
13:09:47:452
13:09:47:512
13:09:47:522
13:09:47:522
13:09:47:522
13:09:47:522
13:09:47:522
13:09:47:522
13:09:47:522
13:09:47:522
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:464
13:09:48:504
13:09:48:504
13:09:48:504
13:09:48:504
13:09:48:504
13:09:48:504
13:09:48:504
13:09:48:514
13:09:48:514
13:09:48:514
13:09:48:514
13:09:48:514
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:574
13:09:48:584
13:09:48:584
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:644
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:714
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:774
13:09:48:844
PID
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284
3284