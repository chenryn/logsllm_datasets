### Malicious Activity Evasion and Mitigation

A small portion of malicious activity could potentially evade our detector if the attacker is aware of the feature values. This, however, is a significant challenge for userland malware. Multiprocess malware is partially mitigated by combining system-centric models with an incremental, multi-tier strategy. Ransomware, in an attempt to remain undetected, might perform encryption very slowly. This approach, however, contradicts the attackers' goal of encrypting all files before users notice any changes. Even if a malicious process evades detection, our conservative file-shadowing approach allows users to manually restore the original files from the copies.

### Cryptography Primitives Detection Evasion

A possible cause of false negatives in our approach is the use of dedicated ISA extensions in modern CPUs (e.g., Intel AES-NI [4]) to perform encryption off memory using a dedicated register file. In such cases, the malware binary code would contain specific instructions, and the malware will only function if the victim's machine supports the Intel AES-NI extensions.

The current proof-of-concept implementation of ShieldFS supports only the detection of AES. Supporting other ciphers is a matter of implementation effort, as our approach is valid for the majority of symmetric block ciphers.

### Tampering with the Kernel

ShieldFS operates in a privileged kernel mode. It is designed to be "non-unloadable" at runtime, even by administrator users. Furthermore, ShieldFS can deny any operation that attempts to delete or modify the driver binaries. An administrator-privileged process, however, could try to prevent the ShieldFS service from starting at boot by modifying the Windows registry and forcing a reboot. This limitation can be mitigated by embedding our approach directly into the kernel, eliminating the need for a service. In this setup, the only way to bypass our system is to compromise the OS kernel.

### Preventing Denial of Service

Malware could attempt to compromise ShieldFS by filling up the shadow drive. First, it is likely that ShieldFS will detect and stop the malicious process before it fills the entire space. Second, ShieldFS makes the shadow drive read-only, denying any modification requests from userland processes. Lastly, ShieldFS can monitor the shadow drive and alert the user when it is running out of space.

### Related Works

Kharraz et al. [7] studied the behavior of scareware and ransomware, observing its evolution over the years in terms of encryption mechanisms, filesystem interactions, and financial incentives. They suggested potential defenses but did not evaluate them. While [7] analyzed the filesystem activity of ransomware, they did not focus on analyzing the filesystem activity of benign applications, which we found crucial for building a robust detector.

Concurrently and independently, Kharraz et al. [6] and Scaife et al. [14] published two ransomware detection approaches: UNVEIL and CryptoDrop. Both look at the filesystem layer to spot typical ransomware activity but do not provide recovery capabilities. Unlike our work, UNVEIL includes text analysis techniques to detect ransomware threatening notes and screen lockers, and CryptoDrop uses similarity-preserving hash functions to measure the dissimilarity between the original and encrypted content of each file. These techniques are complementary to ours and can be added to ShieldFS as additional detection features.

Andronio et al. [1] studied the ransomware phenomenon on Android devices, proposing an approach called HelDroid to identify malicious apps. HelDroid focuses on how ransomware behaves at the application layer, whereas we focus on its low-level behavior. Their approach is complementary to ours, especially since it is based on static analysis.

Our data-collection and mining phase is similar to what Lanzi et al. [9] did to perform a large-scale collection of system calls, studying malware behavior through system and API call profiles. We focus on IRPs instead, as they better capture ransomware behavior.

Lestringant et al. [10] applied graph isomorphism techniques to data-flow graphs to identify cryptographic primitives in binary code. Although [10] works at the binary level, while ShieldFS identifies usage of cryptographic primitives at runtime, it is a valid alternative that can complement our CryptoFinder.

### Conclusions

In this paper, we proposed an approach to make modern operating systems more resilient to malicious encryption attacks by detecting ransomware-like behaviors and reverting their effects, thereby safeguarding the integrity of users' data. ShieldFS acts as a countermeasure, maintaining an always-fresh, automatic backup of recently modified files. While older files can be asynchronously backed up with on-premise systems, recent files may be of immense value to a user. Traditional backup solutions alone may not suffice, as they trade off performance, space, and "freshness," and ransomware may also encrypt the backups. ShieldFS works at a lower level, making it transparent to ransomware that operates at the filesystem's logical view. Therefore, it is best suited for protecting short-term file changes, leaving traditional backups to protect long-term file changes.

### Acknowledgements

We thank the anonymous reviewers for their valuable feedback. This work was supported in part by the MIUR FACE Project No. RBFR13AJFT.

### References

[1] Nicoló Andronio, Stefano Zanero, and Federico Maggi. “HelDroid: Dissecting and Detecting Mobile Ransomware.” In: Research in Attacks, Intrusions, and Defenses. Springer, 2015, pp. 382–404.

[2] Liviu Arsene and Alexandra Gheorghe. Ransomware: A Victim’s Perspective. Tech. rep. Bitdefender, 2016. url: http://www.bitdefender.com/media/materials/white-papers/en/Bitdefender Ransomware A Victim Perspective.pdf.

[3] FBI. Criminals Continue to Defraud and Extort Funds from Victims Using CryptoWall Ransomware Schemes. 2015. url: http://www.ic3.gov/media/2015/150623.aspx.

[4] Shay Gueron. Intel Advanced Encryption Standard (AES) New Instructions Set. Tech. rep. Intel, 2012. url: https://software.intel.com/sites/default/files/article/165683/aes-wp-2012-09-22-v01.pdf.

[5] Microsoft Inc. File System Minifilter Drivers. 2014. url: https://msdn.microsoft.com/en-us/library/windows/hardware/ff540402(v=vs.85).aspx.

[6] Amin Kharaz et al. “UNVEIL: A Large-Scale, Automated Approach to Detecting Ransomware.” In: 25th USENIX Security Symposium (USENIX Security 16). Austin, TX: USENIX Association, 2016, pp. 757–772. isbn: 978-1-931971-32-4.

[7] Amin Kharraz et al. “Cutting the Gordian Knot: A Look Under the Hood of Ransomware Attacks.” In: Detection of Intrusions and Malware, and Vulnerability Assessment: 12th International Conference, DIMVA 2015, Milan, Italy, July 9-10, 2015, Proceedings. Vol. 9148. Springer. 2015, p. 3.

[8] Vadim Kotov and Mantej Singh Rajpal. Understanding Crypto-Ransomware: In-Depth Analysis of the Most Popular Malware Families. Tech. rep. Bromium, 2014.

[9] Andrea Lanzi et al. “AccessMiner: Using System-Centric Models for Malware Protection.” In: Proceedings of the 17th ACM Conference on Computer and Communications Security. ACM. 2010, pp. 399–412.

[10] Pierre Lestringant, Frédéric Guihery, and Pierre-Alain Fouque. “Automated Identification of Cryptographic Primitives in Binary Code with Data Flow Graph Isomorphism.” In: Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security. ACM. 2015, pp. 203–214.

[11] Trend Micro. Ransomware Bill Seeks to Curb the Extortion Malware Epidemic. 2016. url: http://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/ransomware-bill-curb-the-extortion-malware-epidemic.

[12] Christian Rossow et al. “Prudent Practices for Designing Malware Experiments: Status Quo and Outlook.” In: Security and Privacy (SP), 2012 IEEE Symposium on. IEEE. 2012, pp. 65–79.

[13] Kevin Savage, Peter Coogan, and Hon Lau. The Evolution of Ransomware. Tech. rep. Symantec, 2015.

[14] Nolen Scaife et al. “CryptoLock (and Drop It): Stopping Ransomware Attacks on User Data.” In: 2016 IEEE 36th International Conference on Distributed Computing Systems (ICDCS). IEEE. 2016.

[15] Michele Spagnuolo, Federico Maggi, and Stefano Zanero. “Financial Cryptography and Data Security: 18th International Conference, FC 2014, Christ Church, Barbados, March 3-7, 2014, Revised Selected Papers.” In: ed. by Nicolas Christin and Reihaneh Safavi-Naini. Berlin, Heidelberg: Springer Berlin Heidelberg, 2014. Chap. BitIodine: Extracting Intelligence from the Bitcoin Network, pp. 457–468. isbn: 978-3-662-45472-5. doi: 10.1007/978-3-662-45472-5_29.

[16] Unlock the Key to Repel Ransomware. Tech. rep. Kaspersky Lab, 2015.

[17] Video Demonstration of ShieldFS in Action. url: https://www.youtube.com/watch?v=0UlgdnQQaLM.

[18] David Wagner and Paolo Soto. “Mimicry Attacks on Host-Based Intrusion Detection Systems.” In: Proceedings of the 9th ACM Conference on Computer and Communications Security. ACM. 2002, pp. 255–264.

[19] Tobias Wüchner, Martín Ochoa, and Alexander Pretschner. “Robust and Effective Malware Detection Through Quantitative Data Flow Graph Metrics.” In: Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2015, pp. 98–118.

[20] Adam Young and Moti Yung. “Cryptovirology: Extortion-Based Security Threats and Countermeasures.” In: Security and Privacy, 1996. Proceedings., 1996 IEEE Symposium on. IEEE. 1996, pp. 129–140.

### Appendix

#### Real Example of IRP Log (Critroni Sample)

| Timestamp | PID |
|-----------|-----|
| 13:09:47:452 | 3284 |
| 13:09:47:512 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:47:522 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:464 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:504 | 3284 |
| 13:09:48:514 | 3284 |
| 13:09:48:514 | 3284 |
| 13:09:48:514 | 3284 |
| 13:09:48:514 | 3284 |
| 13:09:48:514 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:574 | 3284 |
| 13:09:48:584 | 3284 |
| 13:09:48:584 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:644 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:714 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:774 | 3284 |
| 13:09:48:844 | 3284 |