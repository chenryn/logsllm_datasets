# Breaking Forensics Software: Weaknesses in Critical Evidence Collection

**Authors:**
- Tim Newsham
- Chris Palmer
- Alex Stamos
- iSEC Partners, Inc.
- 115 Sansome Street, Suite 1005, San Francisco, CA 94104
- [http://www.isecpartners.com](http://www.isecpartners.com)

**Date:** July 1, 2007

## Abstract
This article identifies and discusses specific vulnerabilities in common forensic tools that were previously unknown to the public. It outlines security analysis techniques for identifying vulnerabilities in forensic software and proposes additional security-specific acceptance criteria for users of these products and their forensic outputs. Traditional testing of forensic software has primarily focused on robustness against data hiding techniques and accurate reproduction of evidence. This article argues that more security-focused testing, similar to that conducted on security-sensitive commercial software, is essential for such critical products.

**Note:** Due to the submission deadline for Black Hat and ongoing discussions with Guidance Software, this paper does not include all the details of the defects found in EnCase. By the time you read this, a more up-to-date version of the paper, including the defect details, may be available at [https://www.isecpartners.com/blackhat](https://www.isecpartners.com/blackhat). Additionally, several tools created during our research can be found at the same link.

## 1. Introduction
This article reveals specific vulnerabilities in common forensic tools that were previously unknown to the public, discusses techniques for finding vulnerabilities in forensic software, and recommends additional security-specific acceptance criteria that buyers should apply. The primary contribution of this work is to take an adversarial approach to forensic software, applying fuzzing and vulnerability assessment techniques commonly used in the analysis of other products, such as operating systems or office suites.

Two popular forensic investigation software packages, Guidance EnCase and Brian Carrier’s The Sleuth Kit (TSK), are vulnerable to various attacks. The most common issues are "crashers," where damaged data files, storage volumes, and file systems cause the software to crash before the forensic analyst can interpret the evidence.

We performed random and targeted fault injection testing on both products and uncovered several bugs, including data hiding, crashes resulting in denial of service, and infinite loops causing the program to become unresponsive.

## 2. Prior Art
While blind fuzzing and targeted fault injection are not new techniques, there has been limited (public) research into the niche area of forensic software. For example, searching the Common Vulnerabilities and Exposures (CVE) database for "EnCase" returns only one result (as of June 28, 2007): [CVE-2005-1578](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1578). Searching for "sleuth" and "sleuthkit" in the CVE database returns no results.

## 3. Classes of Attacks Against Forensic Software
Forensic software must be highly secure yet robust against a wide range of attacks. It must acquire data from any type of device and format, parse and render numerous data formats, and do so with acceptable performance without sacrificing correctness or accuracy, even in the presence of malicious tampering or accidental faults in the evidence.

### 3.1 Data Hiding
The purpose of forensic software is to discover and analyze evidence stored on digital media. If the software fails to detect information for any reason, an attacker could exploit this weakness to hide evidence. For example, a data acquisition tool is vulnerable if it fails to acquire the host protected area of a hard disk. Note that we do not consider cryptography as a data hiding attack, as encrypted information is still visible, though uninterpretable.

Another type of data hiding attack is "attack by tedium," where an attacker can obfuscate data more easily than the forensic investigator can unobfuscate it. This method is relatively weak, as a determined investigator could defeat it by using multiple software kits or scripting the toolkit for automated evidence analysis.

### 3.2 Code Execution, Evidence Corruption
Code execution vulnerabilities arise from implementation flaws such as stack and heap overflows. Programming errors in native code may allow an attacker to overwrite control flow information, leading to the execution of arbitrary code in the context of the vulnerable process. If an attacker succeeds in executing arbitrary code on the forensic workstation, they can corrupt the forensic image, hiding or destroying evidence. A subtle attack would be to instruct the forensic toolkit to ignore incriminating evidence without altering the image, making detection difficult.

### 3.3 Denial of Service, Blocking Analysis
Denial of service (DoS) vulnerabilities, where the program crashes or hangs, can significantly impede forensic analysis. If an attacker hides incriminating evidence in a file that crashes the forensic software but not the attacker's own file viewer, the analyst must perform extra work to discover the evidence. If the analyst is diligent, the attack is a mere service downgrade; if the analyst is overworked, on a tight deadline, or lazy, they might miss important evidence. Until forensic toolkits become more robust, analysts may be unaware of such vulnerabilities.

## 4. Techniques Used to Find Vulnerabilities
Given that the most obvious attack surface in forensic software is the filesystem metadata parsing code and the rich data file parsing and rendering code, we focused our efforts on generating fuzzed filesystems and data files.

### 4.1 Fuzzing Data Formats
We used simple random fuzzing without sophisticated provisions for specific data formats. Our fuzzer uses a set of mutator functions to modify source data. These functions include:
- Replacing a random substring with a random string of the same size.
- Replacing a random number of single bytes with random bytes.
- Incrementing or decrementing a random number of single bytes.
- Replacing a randomly selected NUL byte or sequence of two NULs with a given value.
- Replacing the entire source with a random string of the same size.
- Overwriting 32-bit values with a given 32-bit value, advancing the replacement position on successive calls.
- Deleting or inserting a randomly selected substring.
- Combining two mutators to perform both mutations on the source.

When fuzzing disk and volume images, we avoided mutators that change the object size, as filesystems are based on fixed-size blocks. We fuzzed normal data files (JPEGs, PDFs, MS Word documents, etc.), volumes and partitions, and disk device images. Each target includes the previous targets, and we performed appropriate tasks with the forensic application, such as viewing and acquiring disks and volumes, viewing and searching files, etc.

### 4.2 Manual, Targeted Manipulation of Data Formats
We also performed targeted, manual mangling of data formats, such as creating directory loops in filesystems, creating loops in MBR partition tables, creating disk images with many partitions, and tweaking data objects in JPEG files that influence memory management.

#### MBR Partition Tables
We wrote code to identify all MBR records and performed fuzzing on only those blocks. This increased the number of mutations per test case without causing other issues that might mask findings.

#### Directory Loops
We manually edited ext2fs and NTFS filesystems to create directory loops and analyzed the resulting images.

#### Long File Names
We generated filesystems with very long file names, both inside a single directory and in a chain of deeply nested directories.

#### Large Directories
We generated filesystems with directories containing large numbers of files, with short, medium, and long filenames.

#### Deeply Nested Directories
We generated filesystems with deeply nested directories, using both very short and very long directory names.

## 5. Defects Found in The Sleuth Kit
Brian Carrier’s The Sleuth Kit (TSK) is a Unix-style forensic software suite that runs on Windows, Linux, Mac OS X, and other Unix variants. It consists of 23 single-purpose programs, each with a command-line interface, and is tied together by a web interface (Autopsy) implemented in Perl CGIs.

In contrast to EnCase, TSK relies heavily on third-party software for evidence display. We found vulnerabilities in a few of the programs:
- `fls`: Lists file and directory names in a given filesystem image, including deleted files.
- `fsstat`: Displays metadata for the filesystem, including inode numbers and mount times.
- `icat`: Copies files in the disk image by inode number (Unix filesystems) or MFT entry number (NTFS).
- `istat`: Displays metadata stored in an inode or MFT entry.

Simple fuzzing revealed several issues, and the programmability of Unix-type tools allowed us to isolate the problematic areas in damaged files. Generally, the implementation is careful about buffer writes, but it places too much trust in the data from the disk image when reading from buffers. Most issues involve out-of-bounds reads that can lead to incorrect data or crashes. There were also some issues that may lead to denial of service.

### 5.1 Data Dereferenced After Free
A crash can occur when processing a corrupted ext2fs image because the error processing code dereferences data after it frees it. In `ext2fs.c`:

```c
for (n = 0; length > 0 && n < direct_count; n++) {
    readb = ext2fs_file_walk_direct(fs, buf, length,
        inode->direct_addr[n], flags, action, ptr);
    if (readb == -1) {
        free(buf);
        databuf_free(buf[0]);
        return 1;
    }
}
```

If `readb` is -1, `buf` is freed before `buf[0]` is freed, leading to a crash on some systems.

#### Reproduction
```sh
$ patch.py NtfsPart.dsk Bad.dsk 7616332 \x01
$ icat Bad.dsk 56-128-3
```

### 5.2 Corrupted NTFS Image Causes `icat` to Run Indefinitely
`icat` runs indefinitely when run on some altered NTFS images. It appears that a 64-bit value was read off the disk and used as a byte count. We observed the following in gdb:

```gdb
#9 0x080892ef in ntfs_data_walk (ntfs=0x80ee0c0, inum=56, fsdata=0x80f0400, flags=0, action=0x80a45d0, ptr=0x0)
    at ntfs.c:1639
1639   retval = action(fs, addr, buf, bufsize, myflags, ptr);
(gdb) p/x fsize
$3 = 0xffffffffffff8ecd42
(gdb) p/x fsdata->size
$4 = 0x9342
(gdb) p/x fsdata->runlen
$5 = 0xfffffff0600009200
```

#### Reproduction
```sh
$ patch.py NtfsPart.dsk Bad.dsk 7616332 \x01
$ icat Bad.dsk 56-128-3
```

---

For the most recent version of this paper and the tools created during our research, please visit [https://www.isecpartners.com/blackhat](https://www.isecpartners.com/blackhat).