SemParser: A Semantic Parser for Log Analytics
Yintong Huo Yuxin Su∗
Computer Science & Engineering Dept. School of Software Engineering
The Chinese University of Hong Kong Sun Yat-sen University
Hong Kong, China Zhuhai, China
PI:EMAIL PI:EMAIL
Cheryl Lee Michael R. Lyu
Computer Science & Engineering Dept. Computer Science & Engineering Dept.
The Chinese University of Hong Kong The Chinese University of Hong Kong
Hong Kong, China Hong Kong, China
PI:EMAIL PI:EMAIL 3202
Abstract—Logs,beingrun-timeinformationautomaticallygen- developersandsomeauto-generatedvariablesduringsoftware beF
eratedbysoftware,recordsystemeventsandactivitieswiththeir execution. As most log analysis tools accept the structured
timestamps. Before obtaining more insights into the run-time
input, the fundamental step for automated log analysis is log
status of the software, a fundamental step of log analysis, called
parsing.Givenarawmessage,alogparserrecognizesasetof 5
log parsing, is employed to extract structured templates and
parametersfromthesemi-structuredrawlogmessages.However, fields (e.g., verbosity levels, date, time) and message content,
]ES.sc[
currentlogparsersareallsyntax-basedandregardeachmessage whilethelatterbeingrepresentedasstructuredeventtemplates
asacharacterstring,ignoringthesemanticinformationincluded (i.e.,constants)withcorrespondingparameters(i.e.,variables).
in parameters and templates.
For example, in Figure 1 (up), “Listing instance in cell ”
Thus,weproposethefirstsemantic-basedparserSemParserto
is the template describing the system event, and “949e1227”
unlock the critical bottleneck of mining semantics from log
correspondstotheparameterindicator“”inthetemplate.
messages. It contains two steps, an end-to-end semantics miner
and a joint parser. Specifically, the first step aims to identify Although automatic log parsing is full of challenges, 3v63621.2112:viXra
explicit semantics inside a single log, and the second step is researchers have made progress leveraging statistical and
responsibleforjointlyinferringimplicitsemanticsandcomputing history-based methods. For instance, SLCT [6] and LFA [7]
structural outputs according to the contextual knowledge base
constructedlogtemplatesbycountingthenumberofhistorical
of the logs. To analyze the effectiveness of our semantic parser,
frequently-appearing words while Logram [8] considered fre-
we first demonstrate that it can derive rich semantics from
log messages collected from six widely-applied systems with an quent n-gram patterns. LogSig [9] and SHISO [10] encoded
average F1 score of 0.985. Then, we conduct two representative the log by word pairs and words length, respectively, then
downstreamtasks,showingthatcurrentdownstreammodelsim- applied the clustering algorithm for partitioning. [11] adopted
prove their performance with appropriately extracted semantics
the idea of probabilistic graph for parsing. The most widely-
by 1.2%-11.7% and 8.65% on two anomaly detection datasets
used parser in industry, Drain [12], formed log templates by
andafailureidentificationdataset,respectively.Webelievethese
findings provide insights into semantically understanding log traversing leaf nodes in a tree. However, we argue that all
messages for the log analysis community. currentparsersaresyntax-based withsuperficialfeatures(e.g.,
word length, log length, frequency), and they have limited
I. INTRODUCTION
high-level semantic acquisition. In this paper, we classify the
The logging statements, which are put into the source limitations into a three-level hierarchy.
codebydevelopers,carryrun-timeinformationaboutsoftware The first is paying inadequate attention to individual infor-
systems. By reading these logs, software system operators mative tokens. Taking the first log in Figure 1 as an example,
and administrators can monitor software status [1], detect the parameter (i.e., 949e1227) and technical concepts (i.e., in-
anomalies [2], [3], localize software bugs [4], or troubleshoot stance, cell) are noteworthy, comparing with other preposition
problems [5] in the system. The overwhelming logs, however words (e.g., in). Syntax-based log parsers only distinguish
impede developers from reading every line of log files as parameters and templates but treat each log message as a
modern software systems get more complicated than before. sequence of characters without paying attention to special
Therefore, intelligent software engineering necessitates auto- technical concepts. A previous study [13] found that technical
mated log analysis. terms and topics in logs are informative by studying six large
Basically, a log message is a type of semi-structured lan- software systems. Therefore, both the parameters and domain
guage comprising a natural language written by software terms should be localized for log comprehension.
Secondly,thesemanticswithinamessageshouldbenoticed.
*Correspondingauthor. While humans seldomly use digits or character strings (e.g.,
Event Template Parameters
Listing instance in cell  949e1227
nta Px- ab ra es re d L Ro ec tuk r a  9 54 09 0e1227, nova.context.get_cell
S y … …
s
(1)Listing instance in cell 949e1227 g > u r
(2)Lock 949e1227 acquired by nova.context.get_cell
…
(10) Returning 500 to user Sem
Paa rn st eic r-based CELL: 949e1227 D Lo ow g n As nt are lya sm is
L Li os ct kin n ac ce qi un rc ee dll b
C i NC>
FUNC: nova.context.get_cell
…
Returning  to user
Status: 500
Fig. 1: Difference between syntax-based parsers and semantic-based SemParser. Logs are generated from OpenStack.
949e1227) in communication, parameters in the log message and misunderstanding of the erroneous status code “500” will
are important with specific meaning. Unfortunately, syntax- accumulate as the scale of the parsed logs increases, and
basedparsersregardeachparameterasameaninglesscharacter ultimately hinder the further anomaly detection task, making
string. Intuitively, a parameter in a log is used to specify it difficult to accomplish the goal of avoiding incidents and
another technical concept in the log. For example, from the ensuring system reliability.
firstloginFigure1,weunderstandthatthetoken“949e1227” To tackle the aforementioned complicated but critical limi-
refers to another token “cell”, so “949e1227” is a cell ID. In tations, we propose a novel semantic-based log parser, Sem-
this way, exploiting such intra-message semantics benefits the Parser, the first work to target parsing logs with respect to
understanding of parameters. theirsemanticmeaning.Wefirstdefinetwo-levelgranularities
Thirdly, the semantics between messages are missing. All of semantics in logs, message-level and instance-level seman-
previous parsers process each log message independently, tics. Message-level semantics refers to identifying technical
ignoring the inter-message relation between logs. However, concepts (e.g., cell) within log messages (underscored in
historical logs can provide domain knowledge of a parameter, Figure 1), while instance-level semantics means resolving
helping resolve the implicit semantics of the same parameter whattheinstance(i.e.,parameters)describes.Then,wedesign
in subsequent logs. In Figure 1, though the second log does an end-to-end semantics miner and a joint parser that can
notexplicitlydisclosethesemanticsofparameter“949e1227”, not only recognize the templates of given logs, but also
we know it refers to a cell based on the historical information extract explicit semantics inside a log and the implicit inter-
provided in the first log. As parameters rarely appear in daily log semantics. Specifically, the end-to-end semantics miner is
language,miningsemanticsfromlogmessagesisdistinctfrom devisedtorecognizethesemanticsofmessages(e.g.,concepts
understanding common language. like“instance”and“cell”),andexplicitsemanticsofinstances
Some studies notice the above limitations and attempt (e.g.,“949e1227”refersto“cell”).Inthisway,thenoteworthy
to mitigate them. LogRobust [14] assigned weights towards tokens and explicit semantics of parameters are obtained to
each token based on the TF-IDF value when encoding logs breakthefirstandsecondlimits,respectively.Thejointparser
to reveal informative tokens. This approach tends to assign then infers the implicit semantics of parameters with the
the rare word with a high attention weight, but common assistance of domain knowledge acquired from prior logs,
technicaltermscanalsobeilluminating.Forsemanticmining, mitigating the third limitation of missing inter-log relation.
Drain [12], LKE [15], MoLFI [16] and SHISO [10] used Figure 1 illustrates the major difference between the syntax-
regular expressions to recognize block ID, IP address, and based parsers and the proposed SemParser, where the explicit
number when parsing HDFS datasets. However, designing semantics is highlighted in yellow and implicit semantics is
human handcrafted rules requires tedious effort and suffers highlighted in green. Obviously, not only can SemParser play
from system migrations. It is impossible to exhaust all pos- the role of an accurate log-template extractor as syntax-based
sibilities, so the rules can only cover a fairly limited part of parsers, but also it can provide additional and structured
the logs. Besides, these regular expressions cannot distinguish semantics to promote downstream analysis.
polysemyofparameters.Forinstance,thevariable“200”refers We conduct an extensive study to investigate the perfor-
to the return code if the system makes REST API calls, manceofSemParseronsixsystemlogsfromtwoperspectives:
but it may also represent a thread identifier (TID) in Spark. (1) the effectiveness for semantic mining; (2) its effectiveness
Moreover, although text mining approaches [17], [18] try to on two typical log analysis downstream tasks. The exper-
minesemanticsfromhumanlanguage,theycannotunderstand imental results demonstrate that our approach can capture
thevariableswithspecificmeaninginlogmessages.Asshown semanticsmoreaccurately,whichachievesanaverageF1score
in the last log in Figure 1, the serious information omissions of 0.985 in semantic mining, and that it outperforms state-of-
the-art log parsers by the average of 1.2% and 11.7% on two
Log messages
anomaly detection datasets and 8.65% on a failure identifica- Listing instance in cell 949e1227
Lock949e1227acquiredbynova.context()
tion dataset. These powerful results reveal the superiority of
SemParser and emphasize the importance of semantics in log
1 Semantics Miner
analytics,especiallywhenthesoftwaresystemswehandleare
more complicated than ever before. CI pair
Explicit CI pairs Concepts Instances
in DK?
In summary, the contribution of this paper is threefold: [(“cell”, “949e1227”)] [“instance”, “cell”] [“949e1227”]
False [] [] [“949e1227”, “Nova.context()”]
• To our best knowledge, SemParser is the first semantic- Domain
based parser capable of actively capturing message-level Knowledge
2 Joint Parser
andinstance-levelsemanticsfromlogs,aswellasactively (“cell”, “949e1227”),
(“project”, “e5a6171e”)
…
collecting and leveraging domain knowledge for parsing.
• We evaluate SemParser with respect to its semantic Conceptualized template CI pairs Orphan concepts Orphan instances
mining accuracy on six system logs, demonstrating our Listing instance in cell  [(“cell”, “949e1227”)] [“instance”] []
Lock  aceuired by  [(“cell”, “949e1227”)] [] [“nova.context()”]
framework could effectively mine semantics from logs.
• We also employ SemParser on the failure identification
• Root cause analysis
and anomaly detection tasks, and the promising results Loganalytical tasks • Anomaly detection
reveal the importance of semantics in the log analytics • Others
field.
Fig. 2: The pipeline of SemParser.
II. PROBLEMSTATEMENT
This paper focuses on parsing logs with respect to se-
knowledge updated. Moreover, to uncover potential implicit
mantics, which could further be decoupled into message-
semantics from domain knowledge, instances in log messages
level semantics and instance-level semantics. Message-level
are kept. Hence, the challenge of missing inter-log relations
semantics are defined as a set of concepts (i.e., technical
are addressed.
terms) appearing in log messages, such as “cell”. We use the
Following that, the joint parser receives outputs from the
term instance * to denote variables in log messages, then the semanticsminer,takingchargeofimplicitsemanticsinference
instance-level semantics are represented by a set of Concept-
with the help of domain knowledge. The newfound implicit
Instance pairs (CI pairs), which describe the concept that
instance semantics, coupled with the explicit one, form the
the instance refers to, such as (cell, 949e1227). A Domain
instance-level semantics, denoted as CI pairs. The remaining
Knowledge database maintains a list of detected CI pairs
concepts and instances which cannot be paired with each
from historical logs. After obtaining instances, concepts and
other are stored as orphan concepts and orphan instances,