  2. 静态编译语言，能将简单的错误在编译前就发现。
  3. 具备良好的GC机制，占用系统资源少，开发成本低。
  4. 容器化的很多产品都是Golang编写，比如Kubernetes、Docker等。
  5. etcd项目也是Golang编写，类库、测试用例可以直接用，SDK支持快速。
  6. 良好的CSP并发模型支持，高效的协程调度机制。
###  产品架构大方向
HIDS产品研发完成后，部署的服务都运行着各种业务的服务器，业务的重要性排在第一，我们产品的功能排在后面。为此，确定了几个产品的大方向：
  * 高可用，数据一致，可横向扩展。
  * 容灾性好，能应对机房级的网络故障。
  * 兼容性好，只维护一个版本的Agent。
  * 依赖低，不依赖任何动态链接库。
  * 侵入性低，不做Hook，不做系统类库更改。
  * 熔断降级可靠，宁可自己挂掉，也不影响业务 。
## 产品实现
篇幅限制，仅讨论`框架设计`、`熔断限流`、`监控告警`、`自我恢复`以及产品实现上的`主进程`与`进程监控`。
###  框架设计
如上图，在框架的设计上，封装常用类库，抽象化定义`Interface`，剥离`etcd
Client`，全局化`Logger`，抽象化App的启动、退出方法。使得各`模块`（以下简称`App`）只需要实现自己的业务即可，可以方便快捷的进行逻辑编写，无需关心底层实现、配置来源、重试次数、熔断方案等等。
**沙箱隔离**
考虑到子进程不能无限的增长下去，那么必然有一个进程包含多个模块的功能，各`App`之间既能使用公用底层组件（`Logger`、`etcd
Client`等），又能让彼此之间互不影响，这里进行了`沙箱化`处理，各个属性对象仅在各`App`的`sandbox`里生效。同样能实现了`App`进程的`性能熔断`，停止所有的业务逻辑功能，但又能具有基本的`自我恢复`功能。
**IConfig**
对各App的配置抽象化处理，实现IConfig的共有方法接口，用于对配置的函数调用，比如`Check`的检测方法，检测配置合法性，检测配置的最大值、最小值范围，规避使用人员配置不在合理范围内的情况，从而避免带来的风险。
框架底层用`Reflect`来处理JSON配置，解析读取填写的配置项，跟Config对象对比，填充到对应`Struct`的属性上，允许JSON配置里只填写变化的配置，没填写的配置项，则使用`Config`对应`Struct`的默认配置。便于灵活处理配置信息。
    type IConfig interface {
        Check() error //检测配置合法性
    }
    func ConfigLoad(confByte []byte, config IConfig) (IConfig, error) {
    ...
    //反射生成临时的IConfig
        var confTmp IConfig
        confTmp = reflect.New(reflect.ValueOf(config).Elem().Type()).Interface().(IConfig)
    ...
        //反射 confTmp 的属性
        confTmpReflect := reflect.TypeOf(confTmp).Elem()
        confTmpReflectV := reflect.ValueOf(confTmp).Elem()
        //反射config IConfig
        configReflect := reflect.TypeOf(config).Elem()
        configReflectV := reflect.ValueOf(config).Elem()
    ...
        for i = 0; i  0 && retries >= maxRetries {
            c.logger.Debug("Abandoning %s after %d retries.", netRetry.String(), retries)
            return errors.New("超过最大重试次数")
        }
    ...
        if e := netRetry.Connect(); e != nil {
            delay = 1 << retries
            if delay == 0 {
                delay = 1
            }
            delay = delay * hashInterval
    ...
            c.logger.Emerg("Trying %s after %d seconds , retries:%d,error:%v", netRetry.String(), delay, retries, e)
            time.Sleep(time.Second * time.Duration(delay))
        }
    ...
    }