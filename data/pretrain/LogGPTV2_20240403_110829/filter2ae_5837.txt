### 优化后的文本

#### 引言
在上个月的圣诞与元旦期间，作者有幸参加了高质量的35C3比赛。每解决一道题都能学到新的知识，这种成就感让人感到非常满足。特别是这道Web类题目，在比赛期间差点与队友一起解出，赛后通过认真阅读writeup，详细分析了每一步的解题思路和原理。现在将这些经验分享给大家，期待明年的36C3！

### 题目描述
比赛结束后，尽管题目链接有所变化，但仍可访问。题目描述如下：
> Go make some [posts](http://35.207.83.242).
>
> Hint: flag is in db
>
> Hint2: the lovely XSS is part of the beautiful design and insignificant for the challenge
>
> Hint3: You probably want to get the source code, luckily for you it's rather hard to configure nginx correctly.

解决这道题需要七个步骤，后文将按顺序进行详细分析：
- **Nginx Misconfiguration**
- **Arbitrary Unserialize**
- **SoapClient SSRF**
- **SoapClient CRLF Injection**
- **miniProxy URL Scheme Bypass**
- **Connect to MSSQL via Gopher**
- **Get Flag**

### 一、Nginx Misconfiguration
首先，我们使用dirsearch对网站进行了目录爆破，结果如下：
- `uploads`目录的HTTP状态码是403，表明该目录可能存在但被限制访问。
- 通过Burp抓包分析发现服务器使用的是nginx。

考虑到之前读过的一篇关于[Nginx不安全配置可能导致的安全漏洞](https://www.freebuf.com/articles/web/149761.html)的文章，我们推测可以通过利用alias配置的不规范来绕过限制。具体来说，由于url没有加后缀`/`，而alias配置中有后缀`/`，导致可以利用`../`绕过限制访问目录。最终命令如下：
```bash
wget -m http://35.207.83.242/uploads../
```
下载下来的文件包括源码和一个nginx配置文件，查看关键部分确实发现了配置问题。

### 二、Arbitrary Unserialize + SoapClient SSRF
#### 1. 绕过正则表达式插入可以反序列化的数据
这部分的关键在于找到并触发反序列化点。通过审计代码，我们发现在DB类的方法中有一个反序列化操作。然而，插入内容时会检查是否符合特定正则表达式。为绕过此限制，我们利用MSSQL数据库的一个特性：全角字符会被转换为ASCII表示。例如，`$s℮rializedobject$`入库后会变成`$serializedobject$`，从而绕过正则检查。

#### 2. 反序列化利用思路和触发过程
接下来，我们需要构造一个可以利用的类。通过审计`post.php`代码，我们发现可以利用`SoapClient`类的`__call`魔术方法发送POST请求。完整的攻击链如下：
1. 提交包含Payload的`content`参数。
2. 在`default.php`页面加载所有帖子时，会反序列化`content`字段，得到一个`Attachment`对象。
3. 当遍历每个Post实例时，调用`__toString`方法，触发`Attachment`对象的`open`方法，进而触发`SoapClient`的`__call`方法，实现SSRF攻击。

### 三、SoapClient CRLF Injection
利用`SoapClient`进行SSRF后，我们需要进一步利用CRLF注入生成GET请求。通过修改`_user_agent`属性，我们可以注入`\n\n`，从而分割两个请求。最终构造的Payload如下（具体见官方exploit）。

### 四、miniProxy URL Scheme Bypass
miniProxy代码显示只能处理HTTP或HTTPS请求，但如果URL无效，会执行跳转。因此，可以利用非标准协议如`gopher`绕过限制，重定向客户端访问MSSQL端口。

### 五、Connect to MSSQL via Gopher + Get Flag
最后，我们需要构造MSSQL Payload，查询数据库中的flag。通过Wireshark抓取流量，构造gopher Payload，并注意处理自动添加的`\r\n`。最终语句如下：
```sql
INSERT INTO posts (userid, content, title, attachment) VALUES (123, (select flag from flag.flag), "foo", "bar");-- -
```

### 最终Payload
最终修改后的Payload如下（具体见截获到的Payload）。

### 心得
这次解题经历非常令人兴奋，不仅学到了很多新知识，还体验到了团队合作的乐趣。期待明年36C3的到来！