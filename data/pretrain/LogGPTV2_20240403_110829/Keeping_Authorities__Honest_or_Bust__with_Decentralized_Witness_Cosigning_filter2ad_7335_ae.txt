### Collective Signing and Witness Failure Handling

In Section III, we described the collective signing process, including the signing exception protocol for handling witness failures. Our evaluation of the cothority implementation utilized Schnorr signatures on the Ed25519 curve [14], though the implementation is also compatible with other curves, such as the NIST P-256 curve [5].

### A. Witness Cosigned Time and Timestamp Service

One application of witness cosigning is a digital timestamping service [2], [63], [121], which also serves as a coarse-grained secure time service. The primary timestamp server, acting as the CoSi leader, initiates a new signing round every 10 seconds to timestamp a batch of documents or nonces submitted by clients. Initiating a fresh witness cosigning round for each client request would be impractical for high transaction rates due to the global communication required in each CoSi signing round (see Section III-I).

#### 1) Timestamp Request Processing

A client wishing to timestamp a document connects to the timestamp server and submits a hash of the document. Multiple clients can have outstanding timestamp requests simultaneously, and a single client can submit multiple requests concurrently. The timestamp server enqueues these requests and processes them in the next signing round.

At the beginning of each signing round, the timestamp server constructs a Merkle tree [91] from all submitted hashes since the previous round. It then prepares a timestamp record containing the current time and the root of the Merkle tree. The timestamp server uses CoSi to distribute this record to all available witnesses, who collectively sign it.

Once the collective signature is obtained, the timestamp server responds to the client requests, providing each client with a copy of the timestamp record and a standalone inclusion proof linking the client's submitted hash to the Merkle tree root. To verify the timestamp, a verifier uses the document's hash, the timestamp server's certificate (including the public keys of all witnesses), the timestamp record, and the Merkle inclusion proof. This ensures that the document was indeed timestamped and that a threshold number of witnesses validated the timestamp record.

The timestamp server does not store or transmit the full Merkle tree, only individual inclusion proofs. Clients are responsible for retaining the timestamp records and cryptographic evidence. The primary security property is the collective signature, which attests that the witnesses verified the record at the indicated time.

#### 2) Coarse-grained Time Checking

Clients can submit a random nonce to timestamp a "challenge" and obtain a witness cosigned attestation of the current time. This prevents attackers from replaying old signed timestamp records, as clients can directly verify the freshness of the timestamp. This coarse-grained time-check can serve as a sanity check for the client's NTP sources [95], [96], protecting against compromised NTP servers and other time-related vulnerabilities [86]. While CoSi's time checking is not a substitute for fine-grained NTP-based clock synchronization, it complements NTP, enhancing security and ensuring that clients cannot be misled about the current time.

#### 3) Scalable Timestamping

To improve scalability, we enhanced the timestamp server prototype to allow witnesses, in addition to the leader, to handle client timestamp requests. During the Commitment phase, each witness collects all timestamp requests into a local Merkle timestamp tree, which is then aggregated up to the leader. The leader forms a global timestamp tree that includes all local trees. During the Challenge phase, the leader provides each witness with an inclusion proof relating the root timestamp record to the root of the witness's local tree. After the CoSi signing round, each witness can provide clients with complete inclusion proofs, linking their submitted hashes to the signed timestamp record.

### B. Witness Cosigned Certificate Logging Service

As another application, we integrated CoSi as a backward-compatible extension to Google's Certificate Transparency (CT) log server [76], [78]. The CT log server periodically constructs a Merkle tree of recently timestamped and logged certificates, creating a Signed Tree Head (STH) for each epoch. With our extension, the log server attaches a collective witness signature to each STH, alongside its existing individual signature. Legacy CT clients can ignore the collective signature, while new clients can verify it.

CT typically relies on a gossip protocol [104] for auditing log server behavior. Our extension enables proactive auditing, allowing witnesses to check the log server's behavior before signing the STH. This enhances protection for CT clients, especially if they support both the STH inclusion proof extension and our STH cosigning extension, providing proactive protection against attacks by powerful adversaries who might have compromised CA and log server keys.

### VI. Evaluation

Our primary goal is to evaluate the practicality and scalability of CoSi's witness cothority architecture, particularly with large numbers of witnesses. Secondary goals include assessing signing latencies and computation costs.

#### A. Experimental Setup

We evaluated the CoSi prototype on DeterLab [44], using up to 32 physical machines in a star-shaped virtual topology. To simulate larger numbers of participants, we ran up to 1,058 CoSi witness processes on each machine, performing experiments with up to 33,825 witnesses. CoSi client processes generated load by issuing regular timestamp requests.

To mimic a realistic wide-area environment, the virtual network imposed a 200-millisecond round-trip latency between any two witnesses. Witnesses aggregated timestamp statements from clients and requested batch signing every second. These delays are likely pessimistic; global deployments could achieve lower latencies using approximate shortest-path spanning trees.

#### B. Scalability to Large Witness Cothorities

Our first experiment evaluated the scalability of CoSi while performing simple collective signing rounds across up to 33,825 witnesses. We compared CoSi's performance against three baselines: a "Naive" scheme, an "NTree" scheme, and a "JVSS" scheme.

Figure 3 shows the results of the scalability experiment. CoSi's signing latency increases with the number of hosts, scaling gracefully up to around 8,192 witnesses. Per-round collective signing latencies averaged slightly over 2 seconds with 8,192 cosigning witnesses, with a maximum latency under 3 seconds. Given that many authority protocols operate at timescales of minutes or hours, these results suggest that witness cosigning is practical for enhancing the security of such authorities.

The Naive scheme is faster for small witness groups but becomes impractical beyond around 256 witnesses due to the costs of computing, transmitting, and verifying individual signatures. The NTree scheme performs even worse due to the increasing computational load on nodes higher in the communication tree.

In summary, CoSi demonstrates good scalability and practicality for large-scale witness cothorities, making it a viable solution for enhancing the security of various applications.