8e2..
992..
a53..
d91..
f e7..
Proof of MSCmail.a.com’s presence:
CERT_SEC: minimum security level of MSC’s standard certiﬁcates.
TLS_SEC: minimum security level of negotiated TLS parameters.
{MSCmail.a.com, RMSCmail.a.com , H5, H78, H1234}.
(2)
4. SCP update parameters
UP_CA_MIN: number of signatures required to update the policy.
UP_CA_TH: threshold number of signatures required to update policy if
not signed by the policy private key.
UP_COP_UNTRUSTED: cool-off period applied if the new policy is signed
by a CA outside CA_LIST.
UP_COP_UNLINKED: cool-off period applied if the new policy is not
signed by the policy private key.
5. Soft/hard failure conﬁgurations (0 for soft failure, 1 for hard failure)
FAIL_CERT_TH: if the MSC is invalid (CERT_TH not satisﬁed).
FAIL_TLS: if the TLS security level is too low.
FAIL_EXP: if the log proof has expired (older than LOG_TIMEOUT).
FAIL_POL: if the policy version number is not the most recent.
FAIL_LOG: if the log proof is invalid.
FAIL_*: all other failures.
6. Inheritance mask, describing which ﬁelds are inherited by subdomains.
The value of CERT_TH also determines the number of CAs re-
quired to revoke an MSC. If an MSC is signed by n CAs, then n −
CERT_TH + 1 revocations will invalidate the MSC. The CERT_SEC
parameter speciﬁes a minimum key length and strength of the cryp-
tographic primitives used by the domain and CA to create the given
certiﬁcate. The CERT_SEC and TLS_SEC parameters can have val-
ues of 0, 1, or 2, corresponding to low, medium, or high security.
The evaluation of security level can be realized using standards and
reports like [11, 17]. The values associated with these levels are set
by browser vendors and can be changed by browser updates.
The ability to update these security levels allows browser ven-
dors to protect users from cryptographic vulnerabilities as long as
users update their browsers. These security levels also protect users
and domains from dangerous misconﬁgurations. Each failure con-
ﬁguration has a value of 0 for a soft failure or 1 for a hard failure.
In the case of soft failure, the browser would display the reason for
the failure and give users the option to accept the certiﬁcate any-
way, while a hard failure does not allow users to continue. These
conﬁgurations allow the domain to take an active role in evaluating
and mitigating threats to the security of its connections.
5.3 Log Servers
Log servers are trusted and highly-available entities that monitor
issued certiﬁcates, revocations, and policies, which can be regis-
tered at log servers and maintained in the log’s database, stored as
MHTs. All logs maintain a certiﬁcate tree, which tracks certiﬁcates
(MSCs), and a policy tree, which tracks policies (SCPs), and these
trees are based on Merkle hash trees [25] as shown in Figure 1.
As explained in §3.1, the MHT structure allows the log server
to produce efﬁcient and cryptographically-secure proofs that a leaf
is present in or absent from the tree.
In the PoliCert infrastruc-
ture, these proofs demonstrate that a certiﬁcate is logged, not re-
voked, and compliant with all applicable subject certiﬁcate poli-
cies, as mentioned in §4.2. To avoid frequent updates to the trees
and thus to the proofs, objects are batch-added periodically (e.g.,
Figure 3: Example of a certiﬁcate tree with a presence proof.
The hash of MSCmail.a.com is assumed to begin with a53.
every hour). The update frequencies of log servers are public in-
formation, allowing clients to query them after each update or as
needed.
When an object is accepted for insertion into a tree, the log server
schedules it and returns a signed receipt with a future time at which
the object is guaranteed to be present in the log’s database. Log
servers are required to produce a proof for a speciﬁc entry (certiﬁ-
cate or policy) on request, which certify the current validity of that
entry. Log servers are also required to provide a proof of consis-
tency by showing that its database has been extended from a previ-
ous version of the database with valid transactions.
In certiﬁcate and policy trees, a leaf node Nx is deﬁned as a tuple
(Lx, Dx,Vx) where Lx is a label used to order the nodes in the tree,
Dx is a set of data associated with the node, and Vx is the node’s
value whose hash is the parent node’s value. A non-leaf node con-
sists only of a value and will have one or two child nodes; in the
ﬁrst case the node’s value will be the hash of its child’s value, and
in the second case the node’s value will be H(V1)kH(V2), where V1
and V2 are its children’s values.
In a certiﬁcate tree such as the one shown in Figure 3, each leaf
node NMSCA represents a multi-signature certiﬁcate MSCA for the
domain A in the form:
LMSCA = H(MSCA)
DMSCA = (MSCA, RMSCA )
VMSCA = MSCAkRMSCA
(3)
(4)
(5)
where RMSCA is a revocation message for MSCA or null if MSCA
is still valid. Note that if MSCA has not yet been revoked, then
VMSCA = MSCA.
In a policy tree such as the one in Figure 4, a node NA represents
a domain name A. There are three data ﬁelds associated with NA:
1. the SCP PA of A (null if A has no SCP), 2. the policy subtree SA
of A (see below), and 3. the root hash rA of SA. The policy subtree
is an MHT of all of A’s immediate subdomain nodes (e.g., all nodes
*.com for .com). A leaf node NA in a policy tree has the following
ﬁelds:
LA = A
DA = (PA, SA, rA)
VA = PAkrA
(6)
(7)
(8)
A policy tree’s structure provides several useful properties. The
hierarchical organization of the tree according to the DNS names-
pace hierarchy makes it straightforward to ﬁnd all policies pertain-
ing to a domain name. Furthermore, because each node’s value
includes its SCP, a proof for a node NA will contain all policies of
its higher-level domains, all of which may apply to A’s certiﬁcates.
This simpliﬁes policy enforcement and forces logs to show that all
applicable policies to a domain are logged and current.
rPT
root
HT LD,1234
HTLD,5678
H1234
H5678
HTLD,12
HT LD,34
HT LD,56
HT LD,78
H12
H34
H56
H78
HT LD,1
HT LD,2
HTLD,3
HT LD,4
HT LD,5
HT LD,6
HT LD,7
HT LD,8
H1
H2
H3
H4
H5
H6
H7
H8
ae
...
be
...
ca
...
com
rcom
de
...
f r
...
net
...
zw
...
Hcom,12
Hcom,34
Hcom,1
Hcom,2
Hcom,3
Hcom,4
163.com
a.com
fb.com
yahoo.com
...
ra.com
...
...
Ha.com,12
Ha.com,34
Ha.com,1
Ha.com,2
Ha.com,3
Ha.com,4
admin.a.com
mail.a.com
search.a.com
www.a.com
...
...
...
...
Proof of Pmail.a.com’s presence:
{Pmail.a.com, rmail.a.com, Ha.com,1, Ha.com,34, Pa.com,
Hcom,1, Hcom,34, Pcom, HTLD,4, HTLD,12, HTLD,5678}.
(9)
Figure 4: Example of Policy Tree, where bold nodes are used
for mail.a.com policy’s presence proof.
However, the structure of the policy tree also has a drawback: the
size of a log proof is not quite logarithmic in the number of nodes.
The size of a proof is instead O(m log2 n), where m is the number
of levels in the domain name (e.g., three for mail.a.com) and n
is the greatest number of entries at any level of the domain name
(112M names under .com [31] in this case). However, in almost
all cases m will be very small (less than 5) and n will likely never
exceed the number of .com domain names.
If a domain such as b.a.com does not have a SCP, then the log
sends one of three classes of proofs to show policy compliance:
1. if any subdomain of b.a.com has its own policy then log shows
that Pb.a.com is empty.
2. if no domain at the same domain level (e.g., x.a.com) has an
SCP, then the log shows that Sa.com is empty.
3. if there are SCPs at the same domain level, then the log sends a
proof starting with the two nearest domain names on either side
of b.a.com (e.g., a.a.com and c.a.com).
Both the certiﬁcate and the policy tree represent only the set of
currently valid certiﬁcates.
In order to prove the consistency of
a log’s database over time, the log maintains an append-only MHT
called a consistency tree. The consistency tree contains all SCP and
MSC registrations, updates, and revocations in chronological order.
Additionally, upon each update the log appends the concatenation
of the root hashes of the current certiﬁcate and policy trees to the
consistency tree. The log then provides a proof showing that the
root hashes are the most recent ones in the consistency tree, and
this proof is sent with the appropriate proofs from the certiﬁcate and
policy trees. The example of consistency tree is shown in Figure 5.
Pa.com
MSCa.com
Pmail.com
rPT krCT
Pb.net
MSCb.com
RMSCa.com
PT kr′
r′
CT
Figure 5: Example of a consistency tree. At every update roots
of policy and certiﬁcates tree are appended as the last value.
6. PROTOCOL DESCRIPTIONS
We now describe in detail the steps by which a certiﬁcate is cre-
ated, registered, and validated in the PoliCert architecture. This
process takes place through SCP registration, MSC registration,
and client validation. We then describe how certiﬁcates and poli-
cies can be updated or revoked.
6.1 Policy Registration
Before a domain can register a certiﬁcate, it must ﬁrst create and
register a subject certiﬁcate policy. A domain A at a.com creates
its own policy by specifying any parameters it wishes (described
in §5.2) and then obtaining CA signatures on the policy. Recall that
only the policy version is required in a valid SCP, so A can choose
to only specify a version number if it does not want to enforce any
policy on its certiﬁcates. A then obtains a number of CA signatures
on the policy to create a signed SCP.
Once A has a valid SCP, it can register the policy at one or more
logs by sending a registration request containing the SCP. Logs
must globally coordinate to ensure that two different SCPs for A
are not active simultaneously (to a given time tolerance).
If the
registration is successful, the logs send to the domain signed reg-
istration receipts containing the policy and a time after which the
SCP is guaranteed to be recorded in the log’s database. This receipt
serves as a temporary proof of presence for the SCP.
Because each domain must have an SCP (in order to be protected
by the PoliCert) and these policies can greatly impact a domain’s
certiﬁcate usage, policies can only be updated, not revoked, and
must meet several criteria to be accepted by the logs. In particular,
the new policy must be signed with the policy private key of the
old policy, as well as by a threshold number of CAs (UP_CA_MIN).
To handle the loss or compromise of the policy private key, we also
allow domains to create an unlinked policy not signed with their
policy private key. However, in this case, the domain may need to
obtain a larger number of CA signatures (UP_CA_TH) and a “cool-
off” period is enforced as in AKI [20]. During this cool-off period,
the new policy is visible but not active. The domain can query the
logs for any policies for its name in a cool-off period in order to
detect fraudulent update attempts. Therefore, even if an adversary
manages to get a fake version of the domain’s policy accepted by
the logs, the true domain will have time to contact its CAs and logs
to resolve the issue.
To update its policy, a domain A sends an update request con-
taining P′
A. The log receives this request, veriﬁes the signatures on
the new policy P′
A, and checks that its policy version number is one
more than that of PA. The log must then check whether its pol-
icy update meets the above criteria, such as being signed by at least
min(UP_CA_MIN,UP_CA_TH) CAs from CA_LIST (of the old SCP).
If not, the logs enforce the cool-off period as speciﬁed in the SCP.
After a successful update the log conﬁrms the presence of the
new policy by returning a proof of presence to the domain. The
domain must then update its own MSCs to signal the use of the
new policy. Since as shown in Equation 1 the policy binding in each
MSC contains the policy number and is signed by the policy private
key, the domain does not need to contact other CAs in order to
update its MSCs. After updating, it simply submits its new MSCs
to the appropriate logs.
6.2 Certiﬁcate Registration
To create a multi-signature certiﬁcate, a domain ﬁrst creates a
keypair with which it will establish TLS connections to clients. It
then obtains standard X.509 certiﬁcates from CAs, and combines
them along with a policy binding (signed by its policy private key
from the previous section) into an MSC. The domain then sends
a certiﬁcate registration request to its trusted logs. In contrast to
the SCP registration process, no global coordination of logs is re-
quired. Each log server receiving the registration request validates
the certiﬁcate and ensures that it is in the LOG_LIST ﬁeld of the
domain’s SCP. If so, the log returns a registration receipt, a signed
statement containing the certiﬁcate that was registered and a time
by which the certiﬁcate is guaranteed to be in the log.
As stated in §5.1, every MSC can be revoked by its owner, by a
threshold number of CAs, or by a parent domain (if the policy al-
lows). In order to revoke given MSC, one of the above three sends
to all logs on the domain’s LOG_LIST a revocation request, which
contains the certiﬁcate and the appropriate signatures. If a log re-
ceives a revocation request and does not have the corresponding
certiﬁcate, it adds the MSC along with the revocation request to
its certiﬁcate tree. The log must not discard the revocation request
without this step because otherwise an adversary could register the
revoked MSC at a log server that previously had not recorded the
certiﬁcate and use it as a valid MSC. Once the log has processed
the revocation request, it returns a signed revocation receipt with