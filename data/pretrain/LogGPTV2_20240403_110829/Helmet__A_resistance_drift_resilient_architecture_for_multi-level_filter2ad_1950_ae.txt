### Area Overhead and Error Correction Latency

Error correction can introduce additional latency during the decode stage. The reduced error rate achieved by our proposed techniques minimizes this latency. Additionally, a lower error rate allows for the use of fewer check bits, thereby reducing the die area overhead associated with Error-Correcting Codes (ECC).

### Temperature Profiling and Power Consumption

To obtain the runtime temperature profile, we utilized the temperature modeling tool Hotspot 4.0 [25] to dynamically calculate the temperature distribution across the Phase-Change Memory (PCM) layer. Hotspot takes the power consumption of each functional block as input and generates accurate temperature estimations for each block. The floorplan for both the core layer and the PCM layer is similar to the one shown in Figure 7. The power trace input to Hotspot was generated using Wattch and DRAMSim power models.

### OS Page Migration and Allocation

To implement the Operating System (OS) page migration and allocation scheme, we modified the custom memory manager in PTLSim. The associated performance and power overheads have been accounted for in our reported simulation results.

### MLC PCM Parameters

| Timing Parameters (in ns) | Read | Write | Power Parameters | Read Current | Read Voltage | RESET Voltage | SET Voltage |
|---------------------------|------|-------|------------------|--------------|--------------|---------------|-------------|
| Read                      | 48   | 40    | Read Current     | 40uA         | 1.6V         | 4000 [7]      | 1.6V        |
|                           |      |       |                  |              |              |               | 1.2V        |

#### Mean Resistance and RESET/SET Current for Each Margin

| Margin (uA) | 0uA | 0.5uA | 1.0uA | 1.5uA | 2.0uA |
|-------------|-----|-------|-------|-------|-------|
| 4K          | 4K  | 4K    | 4K    | 4K    | 4K    |
| 8K          | 8K  | 8K    | 8K    | 8K    | 8K    |
| 13K         | 13K | 13K   | 13K   | 13K   | 13K   |
| 33K         | 34K | 34K   | 34K   | 34K   | 34K   |
| 73K         | 73K | 74K   | 74K   | 74K   | 74K   |
| 112K        | 112K| 112K  | 113K  | 114K  | 114K  |
| 132K        | 137K| 141K  | 146K  | 148K  | 148K  |
| 287K        | 298K| 306K  | 317K  | 321K  | 321K  |
| 442K        | 460K| 471K  | 488K  | 499K  | 499K  |
| 463K        | 545K| 612K  | 731K  | 782K  | 782K  |
| 1006K       | 1185K| 1330K | 1589K | 1700K | 1700K |
| 1549K       | 1824K| 2048K | 2447K | 2618K | 2618K |
| 197uA       | 212uA| 232uA | 263uA | 300uA | 300uA |
| 138uA       | 148uA| 163uA | 185uA | 210uA | 210uA |

### Workloads

- **H1**: gzip, swim, lucas, sixtrack
- **H2**: bzip, equake, sixtrack, ammp
- **H3**: art, ammp, vortex, gzip
- **M1**: UA, applu, crafty, BT
- **M2**: mcf, mgrid, BT, facerece
- **M3**: gap, facerec, perlbmk, UA
- **L1**: EP, MG, LU, fma3d
- **L2**: mesa, vpr, fma3d, CG
- **L3**: FT, CG, galgel, EP

### Evaluation: Efficiency of Drifting Tolerance

Figure 8 illustrates the readout reliability benefit of the proposed drift-tolerant techniques. "InvRot" represents the MLC-PCM implementation that uses data inversion and rotation to tolerate drifting. "InvRot+Hyb" combines data inversion and rotation with the hybrid SLC/MLC design. "InvRot+Hyb+PageAlloc" applies all proposed techniques simultaneously.

As shown in Figure 8, the average absolute read error rate decreases significantly from 5.1% to less than 0.05% when the margin is increased from 0uA to 2.0uA. However, such wide margin designs improve readout reliability at the cost of a 2.3X power overhead and 100X endurance degradation (detailed in Section VI.B). For a 0uA margin size, the "None" design incurs an average absolute error rate of 11.3% across high-error-rate workloads (i.e., H1, H2, H3), which can be reduced by 3%, or 30%, through data inversion and rotation. This reduction is due to the decreased number of drift-sensitive states ("01" and "10") stored in memory cells.

Figure 9 shows the percentage of cells storing "01" or "10" during read references before and after applying data inversion and rotation. The number of "01" and "10" states is reduced by 32% and 3%, respectively, leading to a 20% overall decrease in drift-sensitive states. H3 has the largest reduction, a 62.6% relative decrease in the total number of drift-sensitive states, resulting in a 5.7% absolute, or 61% relative, decrease in the error rate for a 0uA margin size in Figure 8.

When the SLC/MLC hybrid design is employed, the "InvRot+Hyb" scheme further reduces the error rate by 1.4% absolutely, or 48.5% relatively, compared to the "InvRot" case. This is because pages with long read-to-write memory reference characteristics are switched from MLC mode to SLC mode, eliminating further readout errors after mode switching. Figure 10 shows the percentage of pages operating in SLC mode. An average of 4.1% of total pages performed a mode switch, leading to a 2.1% memory capacity overhead caused by the hybrid design.

By combining all proposed techniques, "InvRot+Hyb+PageAlloc" reduces the absolute error rate from 4.2% to 1.2%, a 69.3% relative decrease. Across all investigated margins, "InvRot+Hyb+PageAlloc" achieves an 87% average error rate reduction over the "None" case.