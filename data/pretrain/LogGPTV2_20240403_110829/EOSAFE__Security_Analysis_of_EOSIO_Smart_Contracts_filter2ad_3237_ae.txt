version in the main branch9 as it is still under development;
meanwhile, for KLEE, we choose the latest stable version
(KLEE:2.110) released within the ofﬁcial docker image. Ini-
tially, we set the exploration time as 5 minutes, the same with
EOSAFE. Unfortunately, as almost all the tasks could not be
completed due to the 5-minute timeout, we decided to give it
another trial and increase the exploration time to 30 minutes,
which shall lead to a better performance. Beyond that, we left
the remaining conﬁguration items unchanged and performed
subsequent experiments on the same server used by EOSAFE.
Research Questions. Our evaluation is driven by the follow-
ing three research questions (RQs).
RQ1 How accurate is EOSAFE in detecting vulnerabilities in
EOSIO smart contracts?
RQ2 Are these vulnerabilities prevalent in the ecosystem?
RQ3 How many smart contracts have been exploited by at-
tackers and what are the impacts of these attacks?
To answer RQ1, in the absence of established benchmarks
in the research community, we propose to collect real-world
attacks and manually examine the victim smart contracts to
craft a reliable benchmark. To answer RQ2, we collect all
the available smart contracts on EOSIO and their historical
versions. Then we apply EOSAFE to detect the presence
of security vulnerabilities, and characterize the evolution of
vulnerabilities. To answer RQ3, we further collect all the on-
chain transactions related to the ﬂagged vulnerable contracts,
and then propose heuristics to pinpoint possible attacks.
9The hash is be5e8bf8ec698f9ad3a1b6fbb412680995fe39bf.
10The sha256 digest is 33a568ccee52efc1fbcce4fb33bab476ce666be
f2fa3e628627881bdd70c9d0f8.
7 Experimental Results
7.1 RQ1: Accuracy of Vulnerability Detection
Creating the Benchmark. To evaluate EOSAFE, we ﬁrst
make efforts to craft a benchmark. EOSIO attacks were ob-
served and reported ad hoc from time to time. Thus, we resort
to the security reports released by well-known blockchain
security companies to collect all the related publicly veriﬁed
attacks [26, 27] as the ground-truth. We have collected 38 at-
tacks, targeting 34 unique vulnerable smart contracts in total.
Although these attacks were conﬁrmed by the ofﬁcial team of
the corresponding DApps, we found that some attacks are ir-
relevant to the smart contract itself but concern other external
factors, e.g., the server’s issues [38]. Thus, we further manu-
ally examined all the involved smart contracts. Speciﬁcally,
we found that 3 out of the 10 fake EOS attacks are related to
server issues (e.g., [38]). For rollback, 11 out of 21 attacks
are due to the wrong reveal strategy of the server (e.g., [39]).
Besides, 2 of them were variants of rollback, which are re-
lated to the conﬁguration of some nodes on EOS MainNet
(see [40]). At last, we excluded all the above contracts to
make sure all the attacks are resulted from the vulnerability
in smart contracts. The benchmark can be accessed at [23].
Overview of the Benchmark. The distribution of the
benchmark is shown in Table 2. Note that we also collected the
corresponding patched smart contracts (without vulnerabili-
ties) as comparison to evaluate the effectiveness of EOSAFE.
Additionally, only two vulnerable smart contracts related to
the missing permission check vulnerability were reported,
and neither of them has been patched yet. Thus, we further
manually created 4 pairs of smart contracts (with and without
such vulnerabilities) to complement our benchmark. At last,
we have included 52 smart contracts in our benchmark. As
the benchmark is small-scale, which may not be sufﬁcient
to comprehensively evaluate the effectiveness of EOSAFE,
we will further perform a manual investigation to verify the
detection results in the wild (see §7.2.1).
Results. Among the 52 smart contracts, EOSAFE ﬂagged
26 as vulnerable, with only one false negative case (belongs
to rollback) and no false positives, leading to precision and
recall of 100% and 96.30%, respectively. Table 2 shows the
detailed results. For the only false negative case of rollback,
i.e., fairdogegame/betdogewallt, as the number of suspi-
cious reveal functions is too high to build paths, it is difﬁcult
to symbolically execute each of them for a given timeout (5
minutes here). After manually locating the vulnerable func-
tion, i.e., func73, we can get a correct result. Therefore, the
false negative is introduced by the optimization strategies,
which is a trade-off between accuracy and scalability. It is
easy to tune our approach to cover it, e.g., by exploring more
paths and increasing the analyzing time. Nevertheless, the
exceptional case is rarely seen during experiments, as most
smart contracts are not too complicated to handle.
Comparison with KLEE. To enforce fair comparison, we
1282    30th USENIX Security Symposium
USENIX Association
Table 2: A Comparison of EOSAFE and KLEE on the benchmark. (TP – True Positive, FP – False Positive, TN – True Negative,
FN – False Negative, SR – Success Rate, P – Precision, R – Recall, F1 – F1 Measure)
Type
# Samples(Vul/Non-Vul)
Fake EOS
Fake Receipt
Rollback
Permission
Total
* 4 pairs of the missing permission check samples are manually crafted. ** Timeout or memory error caused path explosion will be regarded as failed cases.
SR**
100.00% 100.00% 100.00% 100.00% 5
100.00% 100.00% 100.00% 100.00% 0
94.44% 100.00% 88.89%
0
100.00% 100.00% 100.00% 100.00% 5
98.08% 100.00% 96.30% 98.11% 10
TP FP TN FN
0
7
0
5
8
1
0
6
26
1
TP FP TN FN
2
5
9
1
17
14 (7/7)
10 (5/5)
18 (9/9)
10 (6/4)*
52 (27/25)
SR**
50.00% 100.00% 71.43% 83.33%
0.00%
0.00%
90.00% 100.00% 83.33% 90.91%
30.77% 100.00% 37.04% 54.05%
7
5
9
4
25
7
5
9
4
25
EOSAFE
KLEE
94.12%
P
-
-
R
-
-
F1
-
-
0
0
0
0
0
P
R
F1
0
0
0
0
0
apply KLEE to the same benchmark to evaluate its overall
performance. The detailed results are shown in Table 2. Note
that we conservatively treat those contracts that are failed in
analysis but bug-free as true negatives (TN), which conse-
quently results in 100.00%, 37.04%, and 54.05% of precision,
recall and f1-measure, respectively. To be speciﬁc, for those
27 de facto vulnerable contracts and 25 non-vulnerable ones,
KLEE can only successfully identify 10 and 6 of them, re-
spectively. Interestingly, all these 16 cases are related to either
fake EOS vulnerability or missing permission check vulnera-
bility. For the other 36 cases (including all the contracts under
the categories of fake receipt and rollback vulnerabilities),
KLEE failed to analyze them. In other words, the results are
all timeout (under 30 minutes) or OOM. After an in-depth
investigation, we ascribed the failure to the massive number of
jump and call instructions. Entering from the dispatcher with-
out optimization makes it difﬁcult to complete the analysis
under the required time and limited memory.
7.2 RQ2: Prevalence of Vulnerabilities
Dataset. We consider all the 53,666 smart contracts (includ-
ing history versions) from June 9, 2018 (the very beginning
of EOS MainNet) to November 15, 2019. Note that differ-
ent from Ethereum smart contracts that cannot be modiﬁed
once deployed, EOSIO contracts could be updated and bind
with the same account as explained in §2.1. Thus, we use the
EOSIO account to label each unique smart contract, i.e., one
account may correspond to multiple contract versions. As a
result, we have 53,666 different versions of contracts, belong-
ing to 5,574 EOSIO accounts. As the rollback vulnerability
is only related to the gambling DApps, we can shrink our
candidate list here. We refer to DAppTotal [31] – a credible
multi-platform DApp browser, to label the gambling DApps
and use such contracts (17,394) for rollback vulnerability de-
tection. Moreover, for both the fake EOS and the fake receipt
vulnerabilities that only link to the transfer functions, we
identiﬁed the candidates, i.e., EOSIO smart contracts with
transfer functions. Speciﬁcally, 47,396 versions of con-
tracts and 4,678 unique ones are extracted. For the missing
permission check vulnerability, we apply the detector to all
the 53,666 contracts (see Table 3).
7.2.1 Overall results
Table 3 shows the overall results. Surprisingly, over 25% of
the 53,666 smart contracts are labeled vulnerable (see Column
Table 3: Vulnerability detection results in the wild.
# Unique
# Candidates
# Vulnerable (%*)
Type
Fake EOS
Fake Receipt
Rollback
84 (1.51%)
Permission
662 (11.88%)
2,759 (49.50%)
Total
*The percent is calculated based on all the EOSIO smart contracts with their versions.
1,457 (2.71%)
7,143 (13.31%)
1,149 (2.14%)
8,373 (15.60%)
13,752 (25.63%)
47,396
47,396
17,394
53,666
53,666
4,678
4,678
913
5,574
5,574
2,192 (39.33%)
272 (4.88%)
# Vulnerable (%*)
3). The missing permission check vulnerability is the most
prevalent, affecting over 15% of the smart contracts. The fake
receipt vulnerability is also quite common (13%). For the
rollback vulnerability, although we only analyzed 17K smart
contracts of gambling DApps, over 1,000 of them are labeled
vulnerable. The fake EOS vulnerability affects roughly 2.7%
of the smart contracts. It suggests that security vulnerabilities
are prevalent in EOSIO smart contracts, revealing the urgency
to identify and prevent such vulnerabilities.
Vulnerable Unique Smart Contracts. As one smart con-
tract may correspond to multiple versions, we further charac-
terize the distribution of vulnerabilities from the perspective
of unique contracts (accounts). As shown in Column 5 of
Table 3, for the 5,574 unique contracts, roughly half of them
have at least one vulnerable version. 10% of unique smart
contracts account for 61.24% of vulnerable versions, which
indicates most of vulnerable versions are imported by a small
portion of smart contracts. Besides, there are 1,793 unique
smart contracts, whose versions are all vulnerable (41% of
them have at least two versions). The contract eossanguoone,
which is a popular game DApp, has the most number of vul-
nerable versions (356 versions). By manual inspection, we
found that all its versions released before Sep. 4th, 2019 have
suffered from the fake receipt vulnerability, and then it was
patched by the developer. The missing permission check vul-
nerability has been found since Aug. 2019, which may be due
to the import of the new functions without authority check.
Manual Veriﬁcation To further verify the veracity of the
results, we manually sampled some contracts labeled by
EOSAFE. Speciﬁcally, we randomly sampled 10 labeled vul-
nerable contracts and 10 labeled bug-free contracts for each
type of vulnerabilities. For these collected 80 samples, we
manually reverse-engineered all of them to verify the labeling
results11. The results show that, there exists only one false
negative case which cannot be successfully detected as the
11The veriﬁcation is a time-consuming process, and it took the ﬁrst two
authors three whole days to analyze them. These samples are also attached
into the benchmark at [23].
USENIX Association
30th USENIX Security Symposium    1283
Table 4: The time to ﬁx the vulnerabilities.
272
2,192
84
662
2,759
# Unique (Vul)
# Latest with Vul (%)
Type
14.85d
Fake EOS
24.01d
Fake Receipt
4.24d
Rollback