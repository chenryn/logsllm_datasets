167
)
s
n
(
143
i
e
m
T
s
s
e
c
c
A
n
a
e
M
119
95
0
1
2
3
4
Allocation Order
5
6
Fig. 7: Evaluation of contiguous memory timing side channel.
Mean access time is equal to Ttotal/#accesses. Number of
accesses is dependent on the resolution of the available timer.
205
VIII. ROWHAMMER ATTACKS FROM THE GPU
We now have access to contiguous physical memory directly
in JavaScript using our GPU-based side-channel attack dis-
cussed in Section VII. We demonstrate how we can remotely
trigger Rowhammer bit ﬂips on this contiguous memory by
exploiting the texture fetching functionality from a WebGL
shader running on the GPU. After a brief introduction of the
Rowhammer bug, we discuss how we can trigger these bit ﬂips
from the GPU by efﬁciently evicting GPU caches. Finally,
we evaluate the results of our implementation and discuss its
implications.
A. The Rowhammer bug
In Section VII-A, we described the organization of a DRAM
chip explaining the concept of rows. These rows are composed
of cells where each cell stores the value of a bit
in a
capacitor. The charge of a capacitor is transient, and therefore,
DRAM needs to be recharged within a precise interval (usually
64 ms).
Rowhammer is a software-based fault injection attack that
can be considered a fallout of this DRAM property. By
frequently activating speciﬁc rows an attacker can inﬂuence the
charge in the capacitors of adjacent rows, making it possible
to induce bit ﬂips in a victim row without having access to its
data [27].
There are two main variants of Rowhammer: (1) single-
sided Rowhammer and (2) double-sided Rowhammer. (1)
Single-sided Rowhammer access a speciﬁc aggressor row n
triggering bit ﬂips on the two adjacent rows n − 1 and n + 1.
(2) Double-sided Rowhammer, instead, ampliﬁes the power of
single-sided Rowhammer by reversing the roles of these rows.
Therefore, the attacker quickly access rows n − 1 and n + 1
(i.e., aggressor rows) in order to impose higher pressure on
row n (i.e., victim row) capacitors triggering more bit ﬂips.
Double-sided Rowhammer, however, requires some knowledge
about physical memory in order to select aggressor rows.
This information is not available in JavaScript and cannot be
derived if the system does not support huge pages.
In many instances, double-sided Rowhammer is necessary
for triggering Rowhammer bit ﬂips. For example, in the Dedup
Est Machina attack [7], the authors report that they could not
trigger bit ﬂips with the default refresh rate with single-sided
Rowhammer given that Windows does not support huge pages.
The situation is quite similar with ARM-based devices that
often do not support huge pages. Fortunately, our novel GPU-
based side-channel attack discussed in Section VII, provides us
with information about contiguous physical memory regions in
JavaScript, allowing us to perform double-sided Rowhammer
on ARM devices in the browser.
B. Eviction-based Rowhammer on ARM
In order to trigger bit ﬂips we need to be able to access
the aggressor rows fast enough to inﬂuence the victim row.
Therefore, we need to build an access pattern that allows
us to optimize the access time to the aggressor rows. In
Section VII, we demonstrated an efﬁcient cache eviction
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Ability to trigger bit ﬂips natively (left) and
remotely (right). * implements eviction-based Rowhammer.
Drammer
Rowhammer.js∗
GPU∗
Nexus 5
HTC One M8
LG G2
(cid:2)/ -
(cid:2)/ -
(cid:2)/ -
- / -
- / -
- / -
(cid:2)/ (cid:2)
(cid:2)/ (cid:2)
(cid:2)/ (cid:2)
strategy to implement our contiguous memory detection side
channel. This efﬁcient technique gains even more relevance
when trying to trigger Rowhammer bit ﬂips. The FIFO replace-
ment policy requires us to perform DRAM accesses to evict
a cacheline. This is much slower compared to architectures
with the common LRU policy where the attacker can reuse
cached addresses for the eviction set. Nonetheless, we can
beneﬁt again from the limited cache size and deterministic
replacement policy in GPUs to build efﬁcient access patterns.
Since DRAM rows cover 8 KB areas (split among the
ranks) of the virtual address space and each UCHE set stores
addresses at 4 KB of stride we can map at most two addresses
from each row to a cache set. Having two aggressor rows
when performing double-sided Rowhammer we can load 4
cachelines from these rows. With 8 ways per UCHE set we
need to perform 5 more DRAM accesses in order to evict
the ﬁrst element from the cache set. We call these accesses
idle-accesses, and we choose their addresses from other banks
to keep the latency as low as possible. Our access pattern
interleaves hammering-accesses with idle-accesses in order
to obtain a pareto optimal situation between minimum and
maximum idle time. Since we have no knowledge about the
row alignment among the different allocations we need to
indiscriminately hammer every 4 KB offset.
C. Evaluation
Drammer [48] studies the correlation between median ac-
cess time per read and number of bit ﬂips. The authors
demonstrate that
the threshold time needed to trigger bit
ﬂips on ARM platforms is ∼260 ns for each memory access.
We computed the mean execution time over the 9 memory
accesses following our hammer-pattern. The distance between
two hammer-access is on average ∼180 ns, which means that
our GPU-based hammering is fast-enough for triggering bit
ﬂips. We tested our implementation on 3 vulnerable smart-
phones: Nexus 5, HTC One M8 and LG G2. All of them
including the Snapdragon 800/801 chipsets. We managed to
obtain bit ﬂips on all three platforms.
We compare our implementation against a native eviction-
based implementation running on the CPU adopting cache
eviction strategies proposed by in Rowhammer.js [20]. Even
on our most vulnerable platform (i.e., Nexus 5) and with
perfect knowledge of physical addresses for building optimal
eviction sets, we did not manage to trigger any bit ﬂips. The
reason for this turned out to be the slow eviction of CPU
caches on ARM: Each memory access, including the eviction
of CPU caches, takes 697 ns which is too slow to trigger
Rowhammer bit ﬂips. Table III summarizes our ﬁndings. Our
GPU-based Rowhammer attack is the only known technique
that can produce bit ﬂips remotely on mobile platforms.
Furthermore, we demonstrate the advantages of GPU-
accelerated microarchitectural attacks by measuring the time to
ﬁrst bit ﬂip and #f lips/min on the Nexus 5. We excluded the
other two platforms due to their limited number of vulnerable
cells. This includes the time required to detect contiguous
memory via our side-channel attack in Section VII).
D. Results
We run the experiment 15 times looking for 1-to-0 bit
ﬂips. After each experiment, we restart the browser. It took
us between 13 to 40 seconds to ﬁnd our ﬁrst bit ﬂip with an
average of 26 seconds in the case of 1-to-0. This difference in
the time that our attack takes to ﬁnd its ﬁrst bit ﬂip is due to
locating contiguous memory given that the browser physical
memory layout is different on each execution. Finding bit ﬂips
usually takes few seconds once we detect an allocation of order
≥ 4. Moreover, after identifying the ﬁrst bit ﬂip, on average,
we ﬁnd 23.7 f lips/min. We try the same experiment looking
for 0-to-1 bit ﬂips and obtained similar results. But after the
ﬁrst ﬂip, on average, we ﬁnd 5 f lips/min, making them less
frequent than 1-to-0 bit ﬂips.
IX. EXPLOITING THE GLITCH
In this section, we describe GLitch, our remote end-to-end
exploit that allows an attacker to escape the Firefox sandbox
on Android platforms. We start with bit ﬂips in textures from
the previous section and show how they can be abused.
A. Reusing Vulnerable Textures
After templating the memory by using page sized textures,
we need to release the textures containing the exploitable
bit ﬂips. To improve performance, WebGL uses a speciﬁc
memory pool for storing textures. This pool contains 2048
pages. Hence, to avoid our target texture to remain in this pool,
we ﬁrst need to release 2048 previously-allocated textures
before releasing the vulnerable texture(s). After releasing our
target texture, we can start allocating ArrayObjects which
will be containers for data that we will later corrupt. The
probability that our target
texture gets reused by one of
our ArrayObjects depends on the memory status of the
system. For example, our target texture gets reused by our
ArrayObjects 65% of the time when allocating 50 MB
of them and 100% of the times when allocating 300 MB
ArrayObjects. These results are taken when the system is
under normal memory conditions (i.e., Firefox together with
other applications running in background).
B. Arbitrary Read/Write
corrupt
elements of
We now discuss how we
an
ArrayObject to escape the Firefox sandbox. We rely on a
technique known as type ﬂipping [7] in order to leak pointers
(i.e., breaking ASLR) and create references to counterfeit
objects. Exploiting this technique we are able to gain an
arbitrary read/write primitive.
206
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
Type ﬂipping: Firefox employs a common technique known
as NaN-boxing [2], [7] to encode object pointers in IEEE-
754 doubles as NaN values. Every value stored in an
ArrayObject is of 64 bits. The ﬁrst 32 bits of this value are
the so-called tag which identiﬁes the type of the object. If the
tag value is below 0xffffff80 (i.e., JSVAL_TAG_CLEAR)
the whole 64-bit word is considered an IEEE-754 double,
otherwise the last 32 bits are considered as a pointer to an
object. This allows us to exploit every bit ﬂip within the ﬁrst
25 bits of the tag to turn any pointer into a double and vice
versa. Such property provides us with two powerful primitives
that we use in our exploit: 1) leaking any object pointer by
triggering a 1-to-0 bit ﬂip (breaking ASLR), and 2) the ability
of forging a pointer to any memory location.
start by storing the pointer
The exploit chain: The goal of the exploit is this of obtaining
an arbitrary read/write primitive which can eventually lead to
remote code execution [4]. ArrayBuffers are the best ﬁt to
gain such primitive since they provide the attacker with full
control over their content. As a consequence, we want to create
a reference to a fake ArrayBuffer whose data pointer we
control. The attack unfolds in 3 steps: 1(cid:2) we use a 1-to-0 bit
ﬂip to leak ASLR, and then we use a 0-to-1 bit ﬂip to gain
ﬁrst 2(cid:2) an arbitrary read, and ﬁnally 3(cid:2) arbitrary write.
1(cid:2) We
to an inlined
ArrayBuffer (i.e., header adjacent to data) in the 1-to-0
vulnerable location. Triggering a bit ﬂip turns this reference
2(cid:2) Af-
into a double that we can read, breaking ASLR.
terwards, we want to craft our fake ArrayBuffer. This
requires an arbitrary read to leak ﬁelds of its header yet
unknown to the attacker. We gain this by crafting a UTF-16
JSString which only requires a pointer to the string’s data.
JSStrings are immutable, hence the read-only primitive.
We build the fake string inside the leaked ArrayBuffer
pointing to its header. We can then craft a soon-to-be pointer
(i.e., double) to the JSString due to the inlined nature
of the leaked ArrayBuffer. By storing the double in the
0-to-1 vulnerable cell and triggering the bit ﬂip we are able
to reference the JSString to extract the content of the
3(cid:2) Finally, we can craft our fake
ArrayBuffer’s header.
ArrayBuffer. We simply store the fake header within the
leaked ArrayBuffer, and we proceed to crafting a reference
as we did for the JSString. This provides us with the
desired arbitrary read/write primitive.
C. Results
We run GLitch 17 times on the Nexus 5. Out of the 17
trials, GLitch successfully compromised the browser in 15
cases and in the remaining two cases, one of the bit ﬂips
did not
trigger (i.e., no crash). The results along with a
comparison of related attacks are summarized in Table IV.
The end-to-end exploitation time is varied and dominated by
ﬁnding exploitable bit ﬂips. We achieved the fastest end-to-end
compromise in only 47 seconds while the slowest compromise
took 586 seconds. On average, GLitch can break ASLR in
only 27 seconds and fully compromise the browser remotely in
116 s, making it the fastest known remote Rowhammer attack.
TABLE IV: End-to-end attack time for breaking ASLR and
compromising the system with GLitch and comparison with
related attacks. We use ‘-’ when the attack does not have that
target or ‘*’ when we did not ﬁnd the exploitation time.
Attack
GLitch
Dedup Est Machina [7]
Rowhammer.js [20]
AnC [18]
Compromise
Breaking ASLR
116 s
823 s
*
-
27 s
743 s
-
114 s
X. MITIGATIONS
In this section we discuss possible mitigations against
GPU-based attacks. We divide the discussion in two parts:
1) defending against side-channel attacks, and 2) possible
solutions against browser-based Rowhammer attacks.
A. Timing side channels
To protect the system against both GPU and CPU side-
channel attacks, currently the only practical solution in the
browser is disabling all possible timing sources. As we dis-
cussed earlier, we do not believe that breaking timers alone
represents a solid long-term solution to address side-channel
attacks. However, we do believe that eliminating known timers
makes it harder for attackers to leak information. Hence, we
now discuss how to harden the browser against the timers we
built in Section V.
First, we recommend disabling the explicit
timers pro-
vided by EXT_DISJOINT_TIMER_QUERY. As described
in Section V by combining clock-edging [29] with
TIMESTAMP_EXT we are able to discern CPU cached and
uncached accesses reviving recent attacks [18], [28], [38].
Furthermore, we suggest
impeding every type of explicit
synchronization between JavaScript and the GPU context
that can be used to build precise timers. This can be ac-
complished by redesigning the WebGLSync interfece. As a
ﬁrst change we suggest suggest to completely disable the
getSyncParameter() function since it explicitly pro-
vides information regarding the GPU status through its return
value (i.e., signaled vs. unsignaled). In order to mitigate the
timer introduced from the clientWaitSync() function we
propose a different design adopting callback functions that
execute in the JavaScript event loop only when the GPU has
concluded the operation. By doing so it would be impossible to
measure the execution time of an operation while also avoiding
the issue of possible JavaScript runtime stalls.
Another mitigation possibility is introducing extra memory
accesses as proposed by Schwarz et al. [44]. This, however,
does not protect against the attack we described in Section VII
since the attack runs from the GPU. The potential security
beneﬁts of implementing this solution on GPUs and its per-
formance implications require further investigation.
B. GPU-accelerated Rowhammer
Ideally, Rowhammer should be addressed directly in hard-
ware or vendors need to provide hardware facilities to address
207
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
Rowhammer in software. For example, Intel processors pro-
vide advanced PMU functionalities that allows efﬁcient detec-
tion of Rowhammer events as shown by previous work [5].