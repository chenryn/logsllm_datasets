#### Summary
The user code usually expects a specific type for the data returned from a
request. currently however that metadata is lost and when using AxiosResponse
and AxiosPromise we have to do casting.
Here is how you could allow setting the type while not breaking backward
compatibility:
redefine the types:
    export interface AxiosResponse {
      data: T;
      status: number;
      statusText: string;
      headers: any;
      config: AxiosRequestConfig;
    }
    export interface AxiosPromise extends Promise> {
    }
    export interface AxiosInstance {
    /// ...redacted code
      request(config: AxiosRequestConfig): AxiosPromise;
      get(url: string, config?: AxiosRequestConfig): AxiosPromise;
      delete(url: string, config?: AxiosRequestConfig): AxiosPromise;
      head(url: string, config?: AxiosRequestConfig): AxiosPromise;
      post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
      put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
      patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
    }
Now you can do this and get an error
    let promise = axios.request(config);
    promise.then(res=>{
        console.log('The user email is ' + res.data.eail); /// ERROR
    });
I can look at the actual code (not the d.ts files) and make a pull request if
you want.
#### Context
  * axios version: 1.6
  * typescript >= 2.3 (for the default generic type)