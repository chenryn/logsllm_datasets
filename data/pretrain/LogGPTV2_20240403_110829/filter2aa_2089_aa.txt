# Meddle: A Framework for Piggy-Back Fuzzing and Tool Development

## Geo McDonald
**Email:** PI:EMAIL  
**Presentation:** Unaffiliated  
**Date:** August 8, 2014  
**Event:** DEF CON 22

---

### Outline
1. **Background**
   - About Me
   - Fuzzing
     - Types of Fuzzing
     - Fuzzing Tools
     - Fuzzing Algorithms
2. **Meddle Framework**
   - Introduction
   - Goals
   - Structure
3. **XRDP Fuzzing**
4. **DeviceIoControl**
5. **Sandbox**
6. **Conclusion**

---

## 1. Background

### About Me
- **Location:** Vancouver, Canada
- **Experience:**
  - Game hacking (Ultima Online MMORPG)
  - Reverse-engineering tool developer
  - Previously at Symantec
  - Currently at Microsoft
- **Personal Website:** [http://www.split-code.com/](http://www.split-code.com/)

### Fuzzing
Fuzzing is a technique used to find vulnerabilities in software by providing it with unexpected or random input.

#### Types of Fuzzing
- **File Format Fuzzing:** Targets file formats like PDF, Microsoft Word, or TrueType fonts.
- **Protocol Fuzzing:** Targets network protocols such as RDP, VNC, SSL, or VoIP.
- **Application Fuzzing:** Targets specific components like COM objects, API calls, or inter-process communication.
- **Web Application Fuzzing:** Targets web applications like Joomla, WordPress, or any website.

#### Fuzzing Tools
- **SPIKE from Immunity [1]:** For network protocols and web applications.
- **Basic Fuzzing Framework (BFF) from CERT [2]:** For file format fuzzing.
- **SAGE from Microsoft [3]:** For input fuzzing.
- **AutoFuzz [4]:** For network protocols using Man-in-the-Middle (MITM).
- **COMRaider [5]:** For COM interface fuzzing.
- **IOCtrlFuzzer from eSage Lab [6]:** For NtDeviceIoControlFile driver input fuzzing.

#### Fuzzing Algorithms
- **Basic Algorithms:**
  - Naive protocol fuzzing (e.g., IOCtrlFuzzer [6])
  - Protocol-aware fuzzing (e.g., SPIKE [1])
- **Advanced Algorithms:**
  - Protocol-learning before fuzzing (e.g., AutoFuzz [4])
  - Feedback-driven fuzzing (e.g., SAGE [3])
  - Code coverage fuzzing (e.g., Google’s Flash fuzzing [7])

### File Format Fuzzing: TrueType
- Example: Fuzzing TrueType fonts to identify vulnerabilities.

### Protocol Fuzzing: RDP
- **Network MITM:** Intercept and modify RDP traffic.
- **Client Implementation:** Fuzz the RDP client.
- **File Fuzzing:** Use Luigi Auriemma’s CVE-2012-0002 POC to trigger use-after-free vulnerabilities in the RDP server.

### Application Fuzzing: API Fuzzing Example
- Example: Fuzzing `NtUserLoadKeyboardLayoutEx` to exploit related vulnerabilities.

---

## 2. Meddle Framework

### Introduction
- **Open Source:** Available at [https://github.com/glmcdona/meddle](https://github.com/glmcdona/meddle)
- **Project Status:** Relatively new
- **Platform:** Windows only
- **Interface:** Command-line based
- **Supports:** x86, WOW64, and x64 processes
- **Language:** C# for the framework, IronPython for the environment

### Goals
- Simplify the fuzzing process.
- Use Python for the fuzzing environment.
- Ensure extendibility and reproducibility.
- Piggy-back on existing applications for simplicity.

### Structure
- Equal time allocation for each event type.

### Target
- **Class Definition:**
  ```python
  class Target_Winsock_Send(TargetBase):
      def __init__(self, Engine, ProcessBase):
          # Set options and hook filters
          self.Engine = Engine
          self.ProcessBase = ProcessBase
          self.hook_exports = True
          self.hook_symbols = False
          self.libraries = ["ws2_32.dll"]
          self.functions = ["send"]
      
      def breakpoint_hit(self, event_name, address, context, th):
          parameters = [
              {"name": "socket", "size": self.ProcessBase.types.size_ptr(), "type": None, "fuzz": NOFUZZ},
              {"name": "buffer", "size": self.ProcessBase.types.size_ptr(), "type": self.ProcessBase.types.parse_BUFFER, "type_args": "size", "fuzz": NOFUZZ},
              {"name": "size", "size": self.ProcessBase.types.size_ptr(), "type": None, "fuzz": NOFUZZ},
              {"name": "flags", "size": self.ProcessBase.types.size_ptr(), "type": None, "fuzz": NOFUZZ}
          ]
          [reg_spec, stack_spec] = self.ProcessBase.types.pascal(parameters)
          arguments = self.Engine.ParseArguments(stack_spec, reg_spec, context)
          if self.ProcessBase.verbose:
              print(arguments.ToString())
          return [arguments.GetFuzzBlockDescriptions(), "Winsock Send Event"]
  ```

- **Parameter Structures:**
  ```python
  def parse_BUFFER(self, parent, address, extra_name, type_args):
      if isinstance(type_args, str):  # points to argument name
          size = parent.GetMemberSearchUp(type_args).ToInt()
      else:  # contains exact size
          size = type_args
      return [{"name": extra_name + "BUFFER", "size": size, "type": None, "fuzz": FUZZ}]
  ```

- **Example Output:**
  ```plaintext
  flags at r9: 00 00 00 00 00 00 00 00
  size at r8: 13 00 00 00 00 00 00 00
  buffer at rdx: E0 98 68 04 00 00 00 00
  buffer.BUFFER at 0x46898E0: 03 00 00 13 0E E0 00 00 ...
  socket at rcx: 58 07 00 00 00 00 00 00
  ```

- **Argument Parsing:**
  ```python
  arguments = self.Engine.ParseArguments(...)
  print("Sent size = %i" % arguments.size.ToInt())
  print(arguments.buffer.ToString())
  ```

- **Breakpoint Hit:**
  ```python
  arguments = self.Engine.ParseArguments(...)
  print("Sent size = %i" % arguments.size.ToInt())
  print(arguments.buffer.BUFFER.ToString())
  ```

### Process
- Description of the Meddle process and how it integrates with the target application.

---

## 3. XRDP Fuzzing
- **Target:** XRDP Server
- **Methods:** Various techniques to fuzz the XRDP protocol.

---

## 4. DeviceIoControl
- **Demo:** Demonstration of fuzzing the `DeviceIoControl` function.

---

## 5. Sandbox
- **Demo:** Demonstration of a malware sandbox.

---

## 6. Conclusion
- Summary of the Meddle framework and its capabilities.
- Future directions and potential improvements.

---

Geo McDonald  
**Email:** PI:EMAIL  
**Presentation:** Unaffiliated  
**Date:** August 8, 2014  
**Event:** DEF CON 22