    {NULL} /* Sentinel */
};
```
在方法表中，定义了 Python 方法 `addOne`，它指向相关的 C++ 函数 `MyClass_addOne`。它充当了一个包装器，它在 C++ 类中调用 `addOne()` 方法。
在成员表中，只有一个为演示目的而定义的成员。不幸的是，在 [PyMemberDef](https://docs.python.org/release/3.9.1/c-api/structures.html?highlight=pymemberdef#c.PyMemberDef) 中使用的 [offsetof](https://en.cppreference.com/w/cpp/types/offsetof) 不允许添加 C++ 类型到 `MyClassObject`。如果你试图放置一些 C++ 类型的容器（如 [std::optional](https://en.cppreference.com/w/cpp/utility/optional)），编译器会抱怨一些内存布局相关的警告。
### 初始化和析构
`MyClass_new` 方法只为 `MyClassObject` 提供一些初始值，并为其类型分配内存：
```
PyObject *MyClass_new(PyTypeObject *type, PyObject *args, PyObject *kwds){
    std::cout tp_alloc(type, 0);
    if(self != NULL){ // -> 分配成功
        // 赋初始值
        self->m_value   = 0;
        self->m_myclass = NULL; 
    }
    return (PyObject*) self;
}
```
实际的初始化发生在 `MyClass_init` 中，它对应于 Python 中的 [\_\_init\_\_()](https://docs.python.org/3/library/dataclasses.html?highlight=__init__) 方法：
```
int MyClass_init(PyObject *self, PyObject *args, PyObject *kwds){
    ((MyClassObject *)self)->m_value = 123;
    MyClassObject* m = (MyClassObject*)self;
    m->m_myclass = (MyClass*)PyObject_Malloc(sizeof(MyClass));
    if(!m->m_myclass){
        PyErr_SetString(PyExc_RuntimeError, "Memory allocation failed");
        return -1;
    }
    try {
        new (m->m_myclass) MyClass();
    } catch (const std::exception& ex) {
        PyObject_Free(m->m_myclass);
        m->m_myclass = NULL;
        m->m_value   = 0;
        PyErr_SetString(PyExc_RuntimeError, ex.what());
        return -1;
    } catch(...) {
        PyObject_Free(m->m_myclass);
        m->m_myclass = NULL;
        m->m_value   = 0;
        PyErr_SetString(PyExc_RuntimeError, "Initialization failed");
        return -1;
    }
    return 0;
}
```
如果你想在初始化过程中传递参数，必须在此时调用 [PyArg\_ParseTuple](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple)。简单起见，本例将忽略初始化过程中传递的所有参数。在函数的第一部分中，`PyObject` 指针（`self`）被强转为 `MyClassObject` 类型的指针，以便访问其他成员。此外，还分配了 C++ 类的内存，并执行了构造函数。
注意，为了防止内存泄漏，必须仔细执行异常处理和内存分配（还有释放）。当引用计数将为零时，`MyClass_dealloc` 函数负责释放所有相关的堆内存。在文档中有一个章节专门讲述关于 C 和 C++ 扩展的内存管理。
### 包装方法
从 Python 类中调用相关的 C++ 类方法很简单：
```
PyObject* MyClass_addOne(PyObject *self, PyObject *args){
    assert(self);
    MyClassObject* _self = reinterpret_cast(self);
    unsigned long val = _self->m_myclass->addOne();
    return PyLong_FromUnsignedLong(val);
}
```
同样，`PyObject` 参数（`self`）被强转为 `MyClassObject` 类型以便访问 `m_myclass`，它指向 C++ 对应类实例的指针。有了这些信息，调用 `addOne()` 类方法，并且结果以 [Python 整数对象](https://docs.python.org/3/c-api/long.html) 返回。
### 3 种方法调试
出于调试目的，在调试配置中编译 CPython 解释器是很有价值的。详细描述参阅 [官方文档](https://docs.python.org/3/c-api/intro.html#debugging-builds)。只要下载了预安装的解释器的其他调试符号，就可以按照下面的步骤进行操作。
#### GNU 调试器
当然，老式的 [GNU 调试器（GDB）](https://opensource.com/article/21/3/debug-code-gdb) 也可以派上用场。源码中包含了一个 [gdbinit](https://github.com/hANSIc99/PythonCppExtension/blob/main/gdbinit) 文件，定义了一些选项和断点，另外还有一个 [gdb.sh](https://github.com/hANSIc99/PythonCppExtension/blob/main/gdb.sh) 脚本，它会创建一个调试构建并启动一个 GDB 会话：
![Gnu 调试器（GDB）对于 Python C 和 C++ 扩展非常有用](/data/attachment/album/202301/02/173519zsbmmmlmfbksttbo.png)
GDB 使用脚本文件 [main.py](https://github.com/hANSIc99/PythonCppExtension/blob/main/main.py) 调用 CPython 解释器，它允许你轻松定义你想要使用 Python 扩展模块执行的所有操作。
#### C++ 应用
另一种方法是将 CPython 解释器嵌入到一个单独的 C++ 应用程序中。可以在仓库的 [pydbg.cpp](https://github.com/hANSIc99/PythonCppExtension/blob/main/pydbg.cpp) 文件中找到：
```
int main(int argc, char *argv[], char *envp[])
{
    Py_SetProgramName(L"DbgPythonCppExtension");
    Py_Initialize();
    PyObject *pmodule = PyImport_ImportModule("MyModule");
    if (!pmodule) {
        PyErr_Print();
        std::cerr 
作者：[Stephan Avenwedde](https://opensource.com/users/hansic99) 选题：[lkxed](https://github.com/lkxed) 译者：[MjSeven](https://github.com/MjSeven) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出