title:AUTOPROBE: Towards Automatic Active Malicious Server Probing Using
Dynamic Binary Analysis
author:Zhaoyan Xu and
Antonio Nappa and
Robert Baykov and
Guangliang Yang and
Juan Caballero and
Guofei Gu
AUTOPROBE: Towards Automatic Active Malicious Server
Probing Using Dynamic Binary Analysis
Zhaoyan Xu
SUCCESS LAB
Texas A&M University
College Station, TX, US
PI:EMAIL
Guangliang Yang
SUCCESS LAB
Texas A&M University
College Station, TX, US
PI:EMAIL
Antonio Nappa
IMDEA Software Institute &
Universidad Politécnica de
Madrid, Spain
PI:EMAIL
Juan Caballero
IMDEA Software Institute
Madrid, Spain
PI:EMAIL
Robert Baykov
SUCCESS LAB
Texas A&M University
College Station, TX, US
PI:EMAIL
Guofei Gu
SUCCESS LAB
Texas A&M University
College Station, TX, US
PI:EMAIL
ABSTRACT
Malware continues to be one of the major threats to Internet
security. In the battle against cybercriminals, accurately identifying
the underlying malicious server infrastructure (e.g., C&C servers
for botnet command and control) is of vital importance. Most
existing passive monitoring approaches cannot keep up with the
highly dynamic, ever-evolving malware server infrastructure. As
an effective complementary technique, active probing has recently
attracted attention due to its high accuracy, efﬁciency, and scalabil-
ity (even to the Internet level).
In this paper, we propose AUTOPROBE, a novel system to
automatically generate effective and efﬁcient ﬁngerprints of remote
malicious servers. AUTOPROBE addresses two fundamental limita-
tions of existing active probing approaches: it supports pull-based
C&C protocols, used by the majority of malware, and it generates
ﬁngerprints even in the common case when C&C servers are not
alive during ﬁngerprint generation.
Using real-world malware samples we show that AUTOPROBE
can successfully generate accurate C&C server ﬁngerprints through
novel applications of dynamic binary analysis techniques. By con-
ducting Internet-scale active probing, we show that AUTOPROBE
can successfully uncover hundreds of malicious servers on the
Internet, many of them unknown to existing blacklists. We believe
AUTOPROBE is a great complement to existing defenses, and can
play a unique role in the battle against cybercriminals.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection;
General Terms
Security;
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660352 .
Keywords
Active probing; Malware; Fingerprint generation; C&C servers
1.
INTRODUCTION
The Internet is an essential part of our life, but malware poses a
serious threat to its security. Millions of computers have been com-
promised by various malware families, and they are used to launch
all kinds of attacks and illicit activities such as spam, clickfraud,
DDoS attacks, and information theft. Such malicious activities are
normally initiated, managed, facilitated, and coordinated through
remotely accessible servers, such as exploit servers for malware’s
distribution through drive-by downloads, C&C servers for mal-
ware’s command and control, redirection servers for anonymity,
and payment servers for monetization. These malicious servers
act as the critical infrastructure for cybercrime operations and
are a core component of the malware underground economy.
Undoubtedly, identifying malware’s server infrastructure is of vital
importance to defeat cybercrime.
Traditional approaches for detecting malicious servers mostly
rely on passive monitoring of host and network behaviors in
home/enterprise/ISP networks. However, such passive approaches
are typically slow, incomplete and inefﬁcient because miscreants
use dynamic infrastructures and frequently move their servers (e.g.,
for evasion or as a reaction to takedowns). To solve this issue,
active probing techniques have been proposed to detect malicious
servers and compromised hosts in an active, fast, and efﬁcient
way [25, 41]. The basic idea is to use a network ﬁngerprinting
approach that sends specially crafted packets (i.e., probes) to
remote hosts and examines their responses to determine whether
they are malicious or not. Since probes are sent from a small set of
scanner hosts, active probing is cheap and easy to deploy, and it is
highly scalable, even for the entire Internet.
In this work we describe AUTOPROBE, which implements a
novel approach to the problem of automatically building network
ﬁngerprints that can be used for actively detecting malware servers
on the Internet. Our goal is similar to the recently proposed
CYBERPROBE [25], which demonstrated how active probing can
successfully detect malicious servers at Internet scale. However,
our approach to ﬁngerprint generation radically differs from the
one used by CYBERPROBE. While CYBERPROBE takes as input
network traces and leverages machine learning techniques on
network trafﬁc to generate the ﬁngerprints, AUTOPROBE assumes
the availability of a sample of the target malware family and applies
dynamic binary analysis on the malware executable. AUTOPROBE
addresses fundamental limitations in CYBERPROBE. First, CY-
BERPROBE is not able to generate ﬁngerprints for malware families
that contain replay protection. In addition, the lack of semantics
available in network trafﬁc and the noise in the input network traces
limit the quality of CYBERPROBE’s ﬁngerprints. Furthermore,
CYBERPROBE cannot generate ﬁngerprints when there is no known
live C&C server to experiment with (thus no network interactions
can be observed) or when the known C&C servers are only alive
for a very short time (thus not enough trafﬁc for building reliable
ﬁngerprints).
Dynamic binary analysis has been previously used by PEER-
PRESS to generate ﬁngerprints for P2P malware [41]. However,
PEERPRESS cannot be used to detect remote malicious servers.
It can only generate ﬁngerprints for malware that embeds some
server-side logic and listens on the network for incoming requests
such as P2P bots. Instead, the majority of malware families use
a pull-based C&C protocol, where bots contain only client-side
logic, send periodic requests for instructions to the remote C&C
servers, and close the communication after the response from the
C&C server is received. Pull-based C&C is the dominant choice
because it avoids incoming probes being blocked by NAT gateways
and ﬁrewalls. To build ﬁngerprints for remote servers PEERPRESS
would require the C&C server software, which is not available.
AUTOPROBE greatly complements PEERPRESS.
It enables
generating ﬁngerprints for identifying C&C servers for malware
that has only client-side logic, extending active probing beyond
P2P bots to also include C&C servers.
AUTOPROBE applies dynamic binary analysis to achieve pro-
found understanding on the packet semantics and deeper insight on
the malware’s logic for request generation (to remote servers) and
response handling (back from the servers) in the following ways.
First, in analyzing (outgoing) request generation logic, AUTO-
PROBE focuses on two tasks: (1) It tracks the generation of variant
bytes, whose value may change in a different environment, and
their semantics. Through re-generating variant bytes in realistic
environments, AUTOPROBE obtains a more accurate probe request.
(2) It analyzes the logic to uncover as many request generation
paths as possible. Thus, AUTOPROBE can generate more probing
requests than existing approaches.
Second, in analyzing (incoming) response handling logic, AU-
TOPROBE employs a novel scheme for detection,
i.e., AUTO-
PROBE identiﬁes speciﬁc response bytes that can affect client-
side malware’s execution as the evidence to detect malicious
servers. More speciﬁcally, AUTOPROBE applies dynamic symbolic
execution to ﬁnd a set of path constraints and generates light-weight
network-level symbolic-constraint-based ﬁngerprints for detection.
Furthermore, AUTOPROBE can generate ﬁngerprints even when a
remote server is not alive, thus no response can be received by the
malware client, an unsolved challenge for existing approaches.
Our paper makes the following contributions:
• We propose a novel approach for automatically generat-
ing active probing ﬁngerprints, which can detect remote
malicious servers. Compared with prior work [25, 41],
our approach leverages dynamic binary analysis,
is able
to generate ﬁngerprints for the large number of malware
families that use pull-based C&C protocols, and works even
when no live C&C server is available for training.
• We have implemented our approach into AUTOPROBE, a tool
that uses a novel combination of dynamic analysis techniques
including taint tracking, dynamic slicing, and symbolic ex-
ploration for producing accurate and high coverage probe
generation, port selection, and classiﬁcation functions.
• We conduct an extensive evaluation of AUTOPROBE with
real-world malware families. We show that AUTOPROBE can
successfully generate on average 2 ﬁngerprints per malware
family (regardless of whether the remote servers are alive
or not). Furthermore, AUTOPROBE has successfully and
quickly found hundreds of live malware servers on the
Internet, most unknown to existing blacklists.
2. PROBLEM STATEMENT AND OVERVIEW
Active probing (or network ﬁngerprinting) is a powerful ap-
proach for classifying hosts that
listen for incoming network
requests into a set of pre-deﬁned classes based on the networking
software they run. In a nutshell, active probing sends a probe to
each host in a set of targets, and applies a classiﬁcation function
on the responses from each of those target hosts, assigning a class
to each host. Given some target network software to detect, a
ﬁngerprint captures how to build the probe to be sent, how to
choose the destination port to send the probe to, and how to classify
the target host based on its response.
The problem of active probing comprises two steps: ﬁngerprint
generation and scanning. This paper focuses on the ﬁngerprint
generation step, proposing a novel approach to automatically build
ﬁngerprints for detecting malware servers. Our approach assumes
the availability of a malware sample and applies dynamic binary
analysis on the malware to build the ﬁngerprint.
2.1 Motivation
Our program analysis approach to ﬁngerprint generation ad-
dresses the following challenges that existing approaches suffer.
Produces valid C&C probes. In existing approaches, the candi-
date probes to be sent to the remote hosts are manually selected
using protocol domain knowledge [7], generated randomly [7],
or selected from prior messages the malware has been observed
to send [25]. However, these three approaches are problematic.
First, domain knowledge is not available for most C&C protocols.
Second, randomly generated probes are most likely invalid because
they do not satisfy the C&C protocol syntax and semantics. A
remote C&C server is likely to refuse responding to invalid probes
and the malware owners may be alerted by the invalid requests.
Third, previously observed malware requests may be invalid when
replayed at a different time and/or machine. For example, Figure 1
shows a Win32/Horst.Proxy malware request that includes the bot’s
IP address and an open port where it runs a Socks proxy. If the
values of these ﬁelds do not match with the sender’s, the C&C
server can detect such inconsistency and refuse to respond.
Figure 1: Request of Win32/Horst.Proxy
In another example, Win32/ZeroAccess [40] encodes the bot’s IP
address and OS information in an obfuscated URL (Figure 2). Iden-
tifying state-dependent ﬁelds, even when obfuscated, represents a
great challenge for existing network-based approaches [7, 25].
Explores the space of valid C&C probes. CYBERPROBE is
limited to using probes that have been previously observed being
sent by the malware. However, those requests are often only a
Figure 2: Request of Win32/ZeroAccess
small subset of all probes the malware can generate. For example,
Win32/Dirtjumper [1] uses a time-dependent algorithm to generate
the URL’s ﬁlename. Without extracting the request generation
logic from the malware, it is almost impossible for network-based
approaches to produce all possible valid requests.
Minimizes false positives. One goal of adversarial ﬁngerprint
generation is to minimize the amount of trafﬁc that needs to be
sent to remote C&C servers during ﬁngerprint generation [25].
As a consequence, few responses might be available to build a
signature on the response. When faced with insufﬁcient training
data, machine learning approaches can introduce false positives.
Instead, AUTOPROBE leverages the intuition that the malware
that produces the request knows how to check if the received
response is valid. By examining the malware’s response handling
logic, AUTOPROBE identiﬁes the checks the malware performs to
determine if the response is valid, which AUTOPROBE uses as a
signature that minimizes false positives.
Does not require a live C&C server. Network-based approaches
to ﬁngerprint generation [7, 25] assume that at least one request-
response interaction between malware and a C&C server has been
captured on a network trace. However, an analyst often only
has a malware sample that when executed no longer successfully
connects to a live C&C server. That does not mean the operation
to which the malware belongs no longer exists. Most often, the
malware sample is simply old and tries to connect to dead C&C
servers that have since been replaced with fresh ones. AUTOPROBE
is able to generate ﬁngerprints even when there is no known live
C&C server from the malware family of interest to experiment
with. The produced ﬁngerprints can be used to scan for fresh
servers that may have replaced the old ones.
2.2 Problem Deﬁnition
This paper addresses the problem of automatic ﬁngerprint gen-
eration. Given a malware sample P from a malware family F
the goal of automatic ﬁngerprint generation is to automatically
produce a ﬁngerprint φ that can be used to scan for malicious
servers belonging to family F located somewhere on the Internet.
We assume the server-side code is not available in any form. The
malware sample is provided in binary form with no source code or
debugging symbols. We assume the malware sample initiates a set
of requests S to contact its malicious servers.
A ﬁngerprint comprises three elements: a port selection function,
a probe generation function, and a classiﬁcation function. AUTO-
PROBE builds these 3 functions using dynamic binary analysis on
the malware sample.
The malware may select to which port to send a probe based
on its local environment and the C&C server to be contacted,
e.g., based on the time when the probe is sent and the C&C’s IP
address. Thus, the port selection function takes as input the local
environment of the scanner host where it is executed and the target
address to be probed. It returns the TCP or UDP port to which the
probe should be sent.
The probe generation function takes as input the local environ-
ment and the target address to be probed and outputs the payload
of the probe to be sent to the target address. Building the probe
Figure 3: Classiﬁcation function example.
generation function comprises two steps: (1) identify the variant
and invariant ﬁelds of each request r the malware sends, (2) for
each variant ﬁeld, generate a re-generation logic which determines
the value of the ﬁeld based on the local environment of the scanner
host and the target’s address.
The classiﬁcation function is a boolean function that takes as
input the response from a target server, the local environment, and
the target’s IP addresses. It outputs true if the received response
satisﬁes the checks that the malware performs on the response,
which means that the target server belongs to family F . If it outputs
false, the target server does not belong to family F . We verify that
the malware sample performs checks on the response to determine
that the response is valid. Otherwise, the probe is discarded as its
response does not allow to classify target servers with certainty and
would introduce false positives.
The classiﬁcation function is a conjunction of boolean expres-
sions corresponding to validation checks the malware performs on
a received response. It can be expressed on the raw byte string or
on the protocol ﬁelds if the C&C protocol is known, e.g., HTTP.
In the latter case it is used with a protocol parser. An example
classiﬁcation function is shown in Figure 3. The malware checks
that the response is successful (200 status code), that there is
an HTTP body, and that the HTTP body contains one of three
command strings.
2.3 Approach Overview
Figure 4 shows the architecture of AUTOPROBE. It comprises
4 phases: malware execution, probe generation, classiﬁcation
function construction, and probing.
Malware execution. AUTOPROBE ﬁrst runs the malware exe-
cutable inside an execution monitor that introspects the execution,
monitors the system and API calls the malware uses, and produces
an instruction-level trace of the execution. The execution monitor is
implemented at the hypervisor-level so that the malware executing
in the guest OS cannot interfere with it. The execution monitor
is located inside a contained network environment that proxies
communications to the Internet. The DNS proxy forwards DNS
1if(InternetOpenUrl(handle, url_str) == VALID) { 2  if(!HttpQueryInfo(handle, HTTP_QUERY_STATUS_CODE,      &status)) { 3      if (status != HTTP_STATUS_OK) 4        return ERROR; 5  } 6  if(!HttpQueryInfo(handle, HTTP_QUERY_CONTENT_LENGTH,           &length))  7      return ERROR; 8   while(length) { 9      InternetReadFile(handle, lpBuffer, &bytes); 10      sscanf(lpBuffer, “%d”, &command); 11      if (command  0) { 12          ... //  13      } 14      length -= bytes; 15   } 16 }  S1 = get_from_header(STATUS_CODE)S2 = get_from_header(LENGTH_CODE)S3 = get_payload()S1 == 200 &// Status code is 200S2 >= 0   &// Response has payload(SEARCH(S3, “1”) |SEARCH(S3, “2”) |SEARCH(S3, “3”) ) // Contains stringserver with the malware’s processing of a random (i.e., invalid)
response. If they are similar the collected response is likely invalid
and can be ignored as it most likely comes from a benign server.
Otherwise it is a valid C&C response and can be used to guide
the symbolic execution exploration. We detail the classiﬁcation
function construction in Section 4.
Probing. The probing phase takes as input the target IP ranges to
probe (e.g., the currently advertised BGP ranges) and the ﬁnger-
print. It uses the port selection and probe generation functions to
send the probe to a target, and applies the classiﬁcation function on
the response, determining if each target is a server of the malware
family, or not. We detail the probing phase in Section 5.
3. PROBE GENERATION
The probe generation phase comprises 2 main steps: control-
ﬂow-based exploration and trace analysis. The control-ﬂow-based
exploration component executes multiple paths in the malware’s
request generation logic to identify different requests the malware
may generate (Section 3.1). The trace analysis component identi-
ﬁes the variant parts of a request, identiﬁes their semantics, and
produces regeneration slices for them (Section 3.2). These two
steps output the port selection function and a classiﬁcation function
that captures the valid requests the malware may generate.
3.1 Control-Flow-Based Exploration
One limitation of dynamic analysis is that it only analyzes one
execution path in the malware’s request generation logic. The
analysis of a single execution typically captures a large number of
different requests that the malware can generate by modifying the
values of variants ﬁelds in a request. However, it cannot capture
different requests that the malware may generate depending on
control-ﬂow decisions on the running environment, i.e., on the
output of system calls.
Figure 5 illustrates this problem. The malware checks the
existence of a registry key using the RegOpenKeyEx function
(line 3).
If the call fails, the HTTP GET request sent by the
malware contains a URL formatted according to line 2. But, if the
call succeeds, the malware modiﬁes the URL format by appending
an additional parameter value to the end of the URL (lines 4-
6). To understand that the malware can produce two different
types of requests AUTOPROBE needs to explore the two execution
paths introduced by the branch at line 3. For this, AUTOPROBE
uses control-ﬂow-based exploration, a technique that modiﬁes the
output of system calls that inﬂuence the request generation logic.
Figure
Win32/LoadMoney.AF.
Network
5:
request
generation
logic
of
Control-ﬂow-based exploration performs a backwards analysis
on the execution trace starting at the function that sends the request,