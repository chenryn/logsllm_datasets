kr = task_info(task_list[i], TASK_EVENTS_INFO, (task_info_t)tinfo,
&task_info_count);
if (kr == KERN_SUCCESS) {
events_info = (task_events_info_t)tinfo;
Printf(INDENT_L2 "page faults = %u\n",
events_info->faults);
Printf(INDENT_L2 "actual pageins = %u\n",
events_info->pageins);
Printf(INDENT_L2 "copy-on-write faults = %u\n",
events_info->cow_faults);
Printf(INDENT_L2 "messages sent = %u\n",
events_info->messages_sent);
Printf(INDENT_L2 "messages received = %u\n",
events_info->messages_received);
Printf(INDENT_L2 "Mach system calls = %u\n",
events_info->syscalls_mach);
Printf(INDENT_L2 "Unix system calls = %u\n",
events_info->syscalls_unix);
Printf(INDENT_L2 "context switches = %u\n",
events_info->csw);
}
// task policy information
task_info_count = TASK_CATEGORY_POLICY_COUNT;
get_default = FALSE;
kr = task_policy_get(task_list[i], TASK_CATEGORY_POLICY,
(task_policy_t)&category_policy,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 41 of 107
&task_info_count, &get_default);
if (kr == KERN_SUCCESS) {
if (get_default == FALSE) {
if ((category_policy.role >= -1) &&
(category_policy.role  0)
stat_thread += thread_count;
if (!verbose) {
Printf(" %8d\n", thread_count);
continue;
}
Printf(INDENT_L1 "Threads in this task = %u\n", thread_count);
// check out threads
for (j = 0; j user_time.seconds,
basic_info_th->user_time.microseconds);
Printf(INDENT_L3 "system run time = %u s %u us\n",
basic_info_th->system_time.seconds,
basic_info_th->system_time.microseconds);
Printf(INDENT_L3 "scaled cpu usage percentage = %u\n",
basic_info_th->cpu_usage);
switch (basic_info_th->policy) {
case THREAD_EXTENDED_POLICY:
get_default = FALSE;
thread_info_count = THREAD_EXTENDED_POLICY_COUNT;
kr = thread_policy_get(thread_list[j], THREAD_EXTENDED_POLICY,
(thread_policy_t)&extended_policy,
&thread_info_count, &get_default);
if (kr != KERN_SUCCESS)
break;
Printf(INDENT_L3 "scheduling policy = %s\n",
(extended_policy.timeshare == TRUE) ? \
"STANDARD" : "EXTENDED");
break;
case THREAD_TIME_CONSTRAINT_POLICY:
get_default = FALSE;
thread_info_count = THREAD_TIME_CONSTRAINT_POLICY_COUNT;
kr = thread_policy_get(thread_list[j],
THREAD_TIME_CONSTRAINT_POLICY,
(thread_policy_t)&time_constraint_policy,
&thread_info_count, &get_default);
if (kr != KERN_SUCCESS)
break;
Printf(INDENT_L3 "scheduling policy = " \
"TIME_CONSTRAINT\n");
Printf(INDENT_L4 "period = %-4u\n",
time_constraint_policy.period);
Printf(INDENT_L4 "computation = %-4u\n",
time_constraint_policy.computation);
Printf(INDENT_L4 "constraint = %-4u\n",
time_constraint_policy.constraint);
Printf(INDENT_L4 "preemptible = %s\n",
(time_constraint_policy.preemptible == TRUE) ? \
"TRUE" : "FALSE");
break;
case THREAD_PRECEDENCE_POLICY:
get_default = FALSE;
thread_info_count = THREAD_PRECEDENCE_POLICY;
kr = thread_policy_get(thread_list[j], THREAD_PRECEDENCE_POLICY,
(thread_policy_t)&precedence_policy,
&thread_info_count, &get_default);
if (kr != KERN_SUCCESS)
break;
Printf(INDENT_L3 "scheduling policy = PRECEDENCE\n");
Printf(INDENT_L4 "importance = %-4u\n",
precedence_policy.importance);
break;
default:
Printf(INDENT_L3 "scheduling policy = UNKNOWN?\n");
break;
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 43 of 107
Printf(INDENT_L3
"run state = %-4u (%s)\n",
basic_info_th->run_state,
(basic_info_th->run_state >= THREAD_STATES_MAX) ? \
"?" : thread_states[basic_info_th->run_state]);
Printf(INDENT_L3
"flags = %-4x%s",
basic_info_th->flags,
(basic_info_th->flags & TH_FLAGS_IDLE) ? \
" (IDLE)\n" : "\n");
Printf(INDENT_L3 "suspend count = %u\n",
basic_info_th->suspend_count);
Printf(INDENT_L3 "sleeping for time = %u s\n",
basic_info_th->sleep_time);
} // for each thread
vm_deallocate(mytask, (vm_address_t)thread_list,
thread_count * sizeof(thread_act_t));
} // for each task
Printf("\n");
fprintf(stdout, "%4d Mach tasks\n%4d Mach threads\n"
"%4d BSD processes\n%4d CPM processes\n",
stat_task, stat_thread, stat_proc, stat_cpm);
vm_deallocate(mytask, (vm_address_t)task_list, task_count * sizeof(task_t));
exit(0);
}
$ gcc -Wall -o lstasks lstasks.c -framework Carbon
$ sudo ./lstasks
task# BSD pid program PSN (high) PSN (low) #threads
0 - - - - 49
1 1 launchd - - 3
2 26 dynamic_pager - - 1
3 30 kextd - - 2
...
93 12149 vim - - 1
94 Mach tasks
336 Mach threads
93 BSD processes
31 CPM processes
$ sudo ./lstasks -v -p $$
Task #49
BSD process id (pid) = 251 (zsh)
Carbon process name = /* not a Carbon process */
virtual size = 564368 KB
resident size = 13272 KB
default policy = 1 (STANDARD|EXTENDED)
Thread run times
user (terminated) = 0 s 0 us
system (terminated) = 0 s 0 us
user (live) = 19 s 501618 us
system (live) = 37 s 98274 us
Thread times (absolute)
user (total) = 649992326
system (total) = 1236491913
user (live) = 649992326
system (live) = 1236491913
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 44 of 107
page faults = 3303963
actual pageins = 9
copy-on-write faults = 41086
messages sent = 257
messages received = 251
Mach system calls = 279
Unix system calls = 107944
context switches = 67653
role = UNSPECIFIED
audit token = 0 1f5 1f5 1f5 1f5 fb 0 0
security token = 1f5 1f5
Threads in this task = 1
thread 0/0 (0x8003) in task 49 (0x113)
user run time = 19 s 501618 us
system run time = 37 s 98274 us
scaled cpu usage percentage = 34
scheduling policy = STANDARD
run state = 3 (WAITING)
flags = 1
suspend count = 0
sleeping for time = 0 s
...
As shown in Figure 721, lstasks also displays the number of Mach and Unix (BSD) system calls made
by the process. Let us write a test program that makes a specific number of Mach and Unix system calls
and use lstasks to verify the numbers. Figure 722 shows the program and its usage. Note that the usage
shown includes outputs of two command shells intermingled.
Figure 722. Counting the number of system calls made by a process
// syscalls_test.c
#include 
#include >
#include 
#include 
int
main()
{
int i, fd;
mach_port_t p;
kern_return_t kr;
setbuf(stdout, NULL);
printf("My pid is %d\n", getpid());
printf("Note the number of Mach and Unix system calls, and press ");
(void)getchar();
// At this point, we will have some base numbers of Mach and Unix
// system calls made so far, say, M and U, respectively
for (i = 0; i 
$ sudo ./lstasks -v -p 12344
...
Mach system calls = 71
Unix system calls = 47
...
Note the number of Mach and Unix system calls again...
Now sleeping for 60 seconds...
$ sudo ./lstasks -v -p 12344
...
Mach system calls = 273
Unix system calls = 248
...
7.3.2. BSD Processes
A BSD process is the representation of an application in execution on Mac OS Xall Mac OS X application
environments use BSD processes. Unless otherwise stated, we will use the term process to mean a BSD
process. As on a typical Unix system, the only way to create a process is through the fork() system call
(or through the vfork() variant). A Mach task is a byproduct of the fork() system call on Mac OS X.
Whereas the task encapsulates resources managed by Mach, such as address space and IPC space, a BSD
process manages Unix-specific resources and abstractions, such as file descriptors, credentials, and
signals. Figure 723 shows an excerpt from the proc structure.
Figure 723. The BSD proc structure
// bsd/sys/proc_internal.h
struct proc {