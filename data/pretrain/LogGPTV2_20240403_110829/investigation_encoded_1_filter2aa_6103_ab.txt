  0x28, 0xbb, 0xb8, 0xeb, 0x8b, 0xa8, 0xee, 0x3a, 0x3b, 0xb8,
  0xbb, 0xa3, 0xba, 0xe2, 0xe8, 0xa8, 0xe2, 0xb8, 0xab, 0x8b,
  0xb8, 0xea, 0xe3, 0xae, 0xe3, 0xba, 0x80
};
[0x000007c0]> bf obj.matrix 
[0x000007c0]> pcw @ obj.matrix 
#define _BUFFER_SIZE 54
const uint32_t buffer[_BUFFER_SIZE] = {
  0x00000008U, 0x00000000U, 0x0000000cU, 0x00000008U, 0x0000000eU,
  0x00000014U, 0x0000000aU, 0x00000022U, 0x00000004U, 0x0000002cU,
  0x0000000cU, 0x00000030U, 0x0000000cU, 0x0000003cU, 0x0000000aU,
  0x00000048U, 0x00000006U, 0x00000052U, 0x00000010U, 0x00000058U,
  0x0000000cU, 0x00000068U, 0x0000000cU, 0x00000074U, 0x0000000aU,
  0x00000080U, 0x00000008U, 0x0000008aU, 0x0000000eU, 0x00000092U,
  0x0000000eU, 0x000000a0U, 0x00000010U, 0x000000aeU, 0x0000000aU,
  0x000000beU, 0x00000008U, 0x000000c8U, 0x00000006U, 0x000000d0U,
  0x0000000aU, 0x000000d6U, 0x0000000cU, 0x000000e0U, 0x0000000cU,
  0x000000ecU, 0x0000000eU, 0x000000f8U, 0x00000010U, 0x00000106U,
  0x0000000eU, 0x00000116U, 0x00000004U, 0x00000124U
};
```
We'll run with an example of encoding `b` to understand the algorithm:
```c
    current_char = *(byte *)(*flag_index + flag);   // Let's assume it's 'b'
    is_valid = isValid(current_char);               // It's valid
    if ((char)is_valid != '\x01') break;
    uVar1 = lower(current_char);                    // Returns 'b'
    current_lower = (char)uVar1;                    // Assigns 'b'
    if (current_lower == ' ') {                     // Skipped
      current_lower = '{';
    }
    current_index = *(int *)(matrix + (long)((int)current_lower + -'a') * 8 + 4);
    // current_lower + -'a' = 'b' - 'a' = 1
    // 1 * 8 + 4 = 12
    // current_index = matrix[12] = 0x00000008 (treating matrix as an int array, although it's really a char array with casts)
    end = current_index + *(int *)(matrix + (long)((int)current_lower + -'a') * 8);
    // end = current_index + matrix[8] = current_index + 0x0000000c = 0x00000008 + 0x0000000c = 20
    while (current_index 
#include 
#include 
// Definitions from Ghidra
typedef unsigned char    byte;
typedef unsigned int     uint;
typedef unsigned long    ulong;
// r2: pc 216 @ obj.matrix
const uint8_t matrix[] = {
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x22, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x52, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x8a, 0x00,
  0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0xbe, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xc8, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0xec, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x04, 0x00,
  0x00, 0x00, 0x24, 0x01, 0x00, 0x00
};
// r2: pc 37 @ obj.secret
const uint8_t secret[] = {
  0xb8, 0xea, 0x8e, 0xba, 0x3a, 0x88, 0xae, 0x8e, 0xe8, 0xaa,
  0x28, 0xbb, 0xb8, 0xeb, 0x8b, 0xa8, 0xee, 0x3a, 0x3b, 0xb8,
  0xbb, 0xa3, 0xba, 0xe2, 0xe8, 0xa8, 0xe2, 0xb8, 0xab, 0x8b,
  0xb8, 0xea, 0xe3, 0xae, 0xe3, 0xba, 0x80
};
ulong getValue(int param_1)
{
  byte bVar1;
  int iVar2;
  iVar2 = param_1;
  if (param_1 > 0x37);
  return (ulong)((int)(uint)(byte)secret[iVar2 >> 3] >>
                 (7 - (((char)param_1 + (bVar1 >> 5) & 7) - (bVar1 >> 5)) & 0x1f) & 1);
}
void encode(char c)
{
    int end;
    ulong uVar1;
    int current_index;
    printf("%c: ", c);
    if (c == ' ')
    {
        c = '{';
    }
    current_index = *(int *)(matrix + (long)((int)c + -'a') * 8 + 4);
    end = current_index + *(int *)(matrix + (long)((int)c + -'a') * 8);
    while (current_index = width of type [-Wshift-count-overflow]
   bVar1 = (byte)(param_1 >> 0x37);
                          ^~
a: 10111000
b: 111010101000
c: 11101011101000
d: 1110101000
e: 1000
f: 101011101000
g: 111011101000
h: 1010101000
i: 101000
j: 1011101110111000
k: 111010111000
l: 101110101000
m: 1110111000
n: 11101000
o: 11101110111000
p: 10111011101000
q: 1110111010111000
r: 1011101000
s: 10101000
t: 111000
u: 1010111000
v: 101010111000
w: 101110111000
x: 11101010111000
y: 1110101110111000
z: 11101110101000
 : 0000
```
The remaining effort is reduced to a standard task of decoding a [Prefix Code](https://en.wikipedia.org/wiki/Prefix_code), for example via the following script:
```python
from pwn import *
p = process("./dict")
dict_output = p.recvall().rstrip()
encoding_dict = {}
for line in dict_output.split("\n"):
    line = line.rstrip()
    char, encoding = line.split(": ")
    encoding_dict[encoding] = char
with open("output", "rb") as f:
    data = f.read()
    bin_data = bits_str(data)
    log.info("Binary data:\n{}".format(bin_data))
    res = ""
    while bin_data:
        for k in encoding_dict:
            if bin_data.startswith(k):
                res += encoding_dict[k]
                bin_data = bin_data[len(k):]
    log.success("Output: {}".format(res))
```
Output:
```console
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# python decode.py
[+] Starting local process './dict': pid 4540
[+] Receiving all data: Done (404B)
[*] Process './dict' stopped with exit code 0 (pid 4540)
[*] Binary data:
    100011101000111010111010001110111011100011101010001000111010100011101011101110001011101110001010111000111010100011101011101110001110101110100010111011101110001010100010101010001110101010000000
[+] Output: encodedywudycjshb
```
The flag: `picoCTF{encodedywudycjshb}`.