### 速记属性的使用场景

速记属性在以下情况下会非常有用：
- 当一组属性自然组合在一起时。
- 当完全列出一组属性变得冗长时。
- 当由高级别属性表示的属性集可能会随时间或系统配置发生变化时。

### 示例说明

#### 属性描述
1. **STANDARD**
   - 用于监控实体集的属性集，不同于实体集的所有可能属性。例如，此属性集不包括每个可能的哈希算法，仅包括被认为足以满足功能需求的哈希算法。有关每个实体集的 "standard" 属性列表，请参阅各实体集的相关部分。

2. **CONTENTS**
   - 这是文件内容的哈希或哈希集速记，默认值为 SHA-1。

3. **onChange**
   - EntitySet 可以设置为实时监控更改。如果将 EntitySet 的 `onChange` 属性设置为 `true`（默认值），则返回的实体更改情况将受到实时监控。当检测到更改时，系统会立即根据实体基线进行对比，以找出变化。如果将 `onChange` 属性设置为 `false`，则仅在生成基线或通过预设任务触发基线时运行此实体集。

### 实时监控示例
以下示例展示了如何实时监控 MySQL 二进制文件：
```xml
<EntitySet onChange="true">
  <FileSet base="/path/to/mysql/bin" />
</EntitySet>
```

### 环境变量
- 环境变量可以包含在实体集中使用的基值中，这些变量括在 `${}` 内，变量名称前缀为 `env.`。例如：
  ```xml
  <FileSet base="${env.PROGRAMFILES}" />
  ```
- 注意：引用的环境变量的值由客户端在启动时读取并存储。如果环境变量的值发生更改，则必须重新启动客户端才能注册更改。如果未找到引用的环境变量，则不会扫描或监控引用此变量的实体集，但其余配置仍有效。客户端会使用事件“完整性监控规则编译问题”来报告无效的环境变量，并提供完整性监控规则的 ID 和环境变量名称作为参数。

### 注册表值
- 注册表值可以包含在实体集中使用的基值中，这些值括在 `${}` 内，路径前缀为 `reg.`。例如：
  ```xml
  <FileSet base="${reg.HKLM\Software\AsiaInfo Security\Deep SecurityAgent\InstallationFolder}" />
  ```
- 客户端会在收到新的或已更改的规则时读取引用的注册表值，并在启动时检查所有规则。如果任何引用的注册表值发生更改，客户端将针对受影响的规则重新生成基线。如果未找到引用的注册表值，则不会扫描/监控引用此注册表值的实体集，但其余配置仍有效。客户端会使用事件 8012 来报告无效的注册表值扩展，并提供完整性监控规则的 ID 和注册表值路径作为参数。

### 使用通配符和父目录引用
- 通配符只能在基本名称的最后一个层次结构组件中使用。例如，`base="HKLM\Software\ATI*"` 是有效的，但 `base="HKLM\*\Software\ATI*"` 是无效的。
- 在所有当前版本的客户端中，支持使用 `..` 来引用父目录。客户端将解析 `..` 引用并将 Windows 短名称转换为长名称。例如，在 Vista 上，`<FileSet base="C:\Users\..\Users">` 的基本目录将为 `C:\Users`。

### 最佳实践
- 编写规则时应仅包含有意义的对象和属性，以确保在对象的其他属性发生更改时不报告任何事件。例如，监控 `/bin` 中的文件权限和所有权，而不监控上次修改时间或哈希值。
- 监控服务、观察 NTFS 数据流的使用情况，并留意特殊位置（如 `/tmp` 或 `${env.windir}\temp`）中的可执行文件。
- 指定要在规则中包括的对象时，尽可能具体一点。包括的对象越少，创建基线以及扫描更改所花费的时间就越少。排除预料中会发生更改的对象，仅监控关心的属性。
- 避免从层次结构的顶级（如 `/`、`C:\` 或 `HKLM\Software`）使用 `**/...`，避免使用多个内容哈希类型（除非绝对必要），避免引用用户特定的位置（如 `HKEY_CURRENT_USER`、`${env.USERPROFILE}` 或 `${env.HOME}`）。

### DirectorySet 标记
- **DirectorySet** 标记介绍了一组目录。
- **标记属性**：
  - `base`：解析为语法有效的路径（并不要求路径存在）。注意：Windows 客户端允许使用 UNC 路径，但要求客户端计算机的 `LocalSystem` 帐户能够访问远程系统。
  - `onChange`：是否应当实时监控返回的目录，默认值为 `false`。
  - `followLinks`：是否遵循符号链接，默认值为 `false`。
- **实体集属性**：
  - `Created`：创建目录的时间戳。
  - `LastModified`：上次修改目录的时间戳。
  - `LastAccessed`：上次访问目录的时间戳（在 Windows 上，不会立即更新此值）。
  - `Permissions`：目录的安全描述符。
  - `Owner`：目录所有者的用户 ID。
  - `Group`：目录所有者的组 ID。
  - `Flags`：仅限 Windows，由 `GetFileAttributes()` Win32 API 返回的标志。
  - `SymLinkPath`：如果目录是符号链接，则链接的路径存储在此处。
  - `InodeNumber`（仅限 Linux）：磁盘的设备编号，此磁盘存储与目录关联的 inode。

### FileSet 标记
- **FileSet** 标记介绍了一组文件。
- **标记属性**：
  - `base`：解析为语法有效的路径（并不要求路径存在）。注意：Windows 客户端允许使用 UNC 路径，但要求客户端计算机的 `LocalSystem` 帐户能够访问远程系统。
  - `onChange`：是否应当实时监控返回的文件，默认值为 `false`。
  - `followLinks`：是否遵循符号链接，默认值为 `false`。
- **实体集属性**：
  - `Created`：创建文件的时间戳。
  - `LastModified`：上次修改文件的时间戳。
  - `LastAccessed`：上次访问文件的时间戳（在 Windows 上，不会立即更新此值）。
  - `Permissions`：文件的安全描述符。
  - `Owner`：文件所有者的用户 ID。
  - `Group`：文件所有者的组 ID。
  - `Size`：文件的大小。
  - `SHA-1`：SHA-1 哈希。
  - `SHA-256`：SHA-256 哈希。
  - `MD5`：MD5 哈希。
  - `Flags`：仅限 Windows，由 `GetFileAttributes()` Win32 API 返回的标志。
  - `SymLinkPath`（仅限 Unix）：如果文件是符号链接，则链接的路径存储在此处。
  - `InodeNumber`（仅限 Unix）：磁盘的设备编号，此磁盘存储与文件关联的 inode。
  - `BlocksAllocated`（仅限 Unix）：文件分配的块数。
  - `Growing`：如果文件的大小保持不变或在扫描之间增加，则包含值 `true`，否则包含值 `false`。
  - `Shrinking`：如果文件的大小保持不变或在扫描之间减少，则包含值 `true`，否则包含值 `false`。

### 速记属性
- **STANDARD**：映射到 `Created`、`LastModified`、`Permissions`、`Owner`、`Group`、`Flags`（仅限 Windows）、`SymLinkPath`。
- **CONTENTS**：解析为在策略/计算机编辑器 > 完整性监控 > 高级中设置的内容哈希算法。