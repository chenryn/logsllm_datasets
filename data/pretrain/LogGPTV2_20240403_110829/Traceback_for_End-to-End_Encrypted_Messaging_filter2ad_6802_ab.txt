before encryption, respectively). Detection is not straightforward,
particularly if one wants it to be robust to small changes in the
3 TRACING SCHEMES
In this section, we present the syntax and semantics we will use to
describe message tracing schemes.
We assume users U1, U2, . . . , Un each represented by a unique
identifier taken from some set U. For convenience later, we assume
a distinguished user identifier ⊥ that no real user can use. We make
minimal assumptions on user identities, assuming only that they
are unique and that the platform can authenticate them. In practice
one will use the identifiers already used in E2E messaging systems.
We use the term message to refer to the sending of some plaintext
from one user to another at some point in time. Multiple messages
may have the same plaintext (e.g., because someone forwards mes-
sage plaintext or sends the same message to multiple people). The
distinction between message and plaintext will be particularly crit-
ical in our discussion of tracing scheme accountability properties
(Section 5.2).
Our formalization of a message tracing scheme is decoupled from
the underlying end-to-end encryption. This leads to a modular and
flexible deployment path in that any message tracing scheme can
be used in conjunction with any (non-metadata-private) end-to-end
encryption algorithm.
A message tracing scheme MT = (NewMsg, TagGen, RecMsg,
Svr-Process, Svr-Trace) is a tuple of algorithms. The first three
algorithms are called by users when sending and receiving messages.
The last two algorithms are for the platform to trace messages given
the proper user-provided key material.
•
tmd ←$ NewMsg(U, p): The randomized message authorship
algorithm takes in a user, a message plaintext, and outputs
trace metadata to be associated with this particular authored
message instance.
(k, tts) ←$ TagGen(Us, Ur , p, tmd): The randomized tag gen-
eration algorithm takes in the sender Us and recipient Ur
identities, a message plaintext, and trace metadata. The algo-
rithm outputs a sender trace tag tts and tracing key k. The
tracing key is to be included with the plaintext in the end-to-
end encrypted ciphertext which is sent along with the sender
trace tag to the recipient over the platform.
tmd ← RecMsg(k, Us, Ur , p, ttr): The tag receive algorithm
takes in a key, the sender Us and recipient Ur identities, a
message plaintext, and a recipient trace tag, then outputs
trace metadata that cryptographically identifies the received
message. The algorithm may return an error symbol ⊥ (e.g.,
in the case ttr is malformed).
((mid, ttp), ttr) ←$ Svr-Process(stsvr, Us, Ur , tts): The server
processing algorithm takes in the server state, the sender and
receiver identities, and a sender trace tag. It outputs a recipi-
ent trace tag ttr to deliver to the recipient as well as a message
identifier mid and a platform trace tag ttp. In our schemes,
the server updates stsvr, which is a simple key-value store, to
include (mid, ttp).
tr ← Svr-Trace(stsvr, U, p, tmd): A user can report a received
message by sending the plaintext p and trace metadata for the
message to the platform. The server tracing algorithm takes
in the server state, the reporting user identity, the message
plaintext, and trace metadata. It then returns a trace tr of the
•
•
•
•
3
2
tts
p, k
Platform
ttr
4
mid, ttp
6
stsvr
p, tmd
5
U2
1
U1
1. Select message to send:
a. If authoring new message, tmd ←$ NewMsg(U1, p).
r).
b. If forwarding message, tmd ← RecMsg(k′, U0, U1, p, tt′
2. Generate trace tag: Us generates tracing key and sender trace tag.
The tracing key and plaintext are end-to-end encrypted and sent
along with the trace tag, (k, tts) ←$ TagGen(U1, U2, p, tmd).
3. Process trace tag: Platform logs a message identifier and
for U2,
tracing data ttp, and derives recipient trace tag ttr
((mid, ttp), ttr) ←$ Svr-Process(st, U1, U2, tts).
4. Receive trace tag: Recipient decrypts end-to-end ciphertext and
with received trace tag generates trace metadata for future forwards
and reports of message, tmd ← RecMsg(k, U1, U2, p, ttr).
5. Report message: Recipient sends message plaintext and trace meta-
data to platform, p, tmd.
6. Trace message: Platform learns trace of message associated with
reported trace metadata, tr ← Svr-Trace(stsvr, U2, p, tmd).
Figure 2: Usage of message tracing algorithms. Solid arrows repre-
sent values passed to and handled by the platform. The dotted arrow
represents the end-to-end encrypted channel between users.
reported message instance, the detailed structure of which
depends on the tracing goal. For path traceback it corresponds
to a path with nodes labeled by users and edges labeled by
message identifiers. For tree traceback, a similarly-labeled
tree is returned.
Usage. The algorithms for tracing described above are designed to
be decoupled from the end-to-end encryption algorithms used by
the messaging platform. A typical message is sent in the following
manner, depicted in Figure 2. First, the sender must specify the
message they wish to send, i.e., whether it is a new message or a
forward. In either case we want to associate some trace metadata
to the message. If the user authors their own message, this meta-
data is created using NewMsg. Otherwise, RecMsg generates trace
metadata for a previously received message that can be used when
forwarding. To send a message, the sender generates a tracing key
k and a sender trace tag tts using TagGen with the appropriate
trace metadata. The sender encrypts the tracing key and message
plaintext using the E2E encryption protocol, and sends the resulting
ciphertext along with tts to the platform.
The platform processes tts using Svr-Process, updating its inter-
nal state to log a message identifier mid and associated platform
trace tag ttp. Note that ttp does not necessarily equal tts. It also
derives a recipient trace tag ttr and sends the E2E ciphertext and
ttr to the recipient. The recipient decrypts the ciphertext to recover
the tracing key k and plaintext, and then uses RecMsg to both ver-
ify the received trace tag and generate the trace metadata that can
be used to forward the message in the future. The recipient may
report a message to the platform by sending the message plaintext
and associated trace metadata to the platform. The platform uses
Svr-Trace with its internal state to learn a trace of the reported
message instance.
Correctness. Informally, correctness dictates that trace tags cre-
ated with honest calls to NewMsg, TagGen, and RecMsg and pro-
cessed by an honest platform using Svr-Process should (1) not fail
well-formedness verification in RecMsg, and (2) provide the correct
trace with Svr-Trace when reported. Correctness is therefore con-
text dependent, and we will discuss it more in subsequent sections.
We just note that most of our schemes will not be perfectly correct,
but rather be correct with all but negligible probability.
Preliminaries. Our schemes will make use of a collision-resistant
pseudorandom function (CR-PRF), which we will denote as F. A
CR-PRF F : K × X → Y is defined over a key space K, input
space X, and output space Y. We will make use of two security
properties of CR-PRFs. Pseudorandomness ensures the CR-PRF acts
as a random function when its key remains secret, and collision
resistance means it is hard to find key, input pairs that evaluate to
the same output. The formalization of these security properties is
deferred to the appendix, given in Figures 12 and 15. In the body,
we will often drop the prefix and simply refer to F as a PRF.
4 PATH TRACEBACK
We start with path traceback. The goal is to allow reporting a
message with plaintext p, with the platform then able to identify
the sequence of forwarded messages back to the original author
of p. In this case, Svr-Process outputs a trace
tr = (tr1, mid1,2, tr2, mid2,3, tr3, . . . , midτ−1,τ , trτ )
where τ is called the trace length and each tri ∈ U identifies a user
and each midi, j is an identifier for a message. These message iden-
tifiers correspond to the ones output by the platform tag processing
algorithm (Svr-Process), allowing the platform to store, and later
recover during traceback, any desired metadata associated with
a sent message. This can be visualized as a directed graph where
nodes are associated to users and edges to messages. The trace can
then be denoted via
p : tr1
mid2,3−→ · · · midτ −1,τ−→ trτ
mid1,2−→ tr2
where p represents the plaintext traced and the arrow diagram the
path.
As discussed in Section 2, an adversarial user can always obfus-
cate the source from which they received a message by a partition
attack, in which case path traceback will result in identifying the
first misbehaving user (from the end) as the originator. For example,
if tr2 behaved maliciously, they can deviate from the proper client
implementation and prevent traceback from identifying tr1, and
instead tr2 would be considered the source of the message.
The linked tags scheme. Each message sent between two users
is associated with a message identifier, denoted by mid. The message
identifier is chosen by the sender, who samples a random tracing
key k and calculates the message identifier as the output of a PRF
on the plaintext, Fk(p). In this manner, the message identifier also
acts as a commitment to the plaintext, and the tracing key acts as
an opening key. Looking forward, our trace unforgeability property
will rely on the collision resistance of the PRF to bind message
identifiers to a plaintext and tracing key. To link the message as
a forward of a previous message, the sender also encrypts the
previous message’s tracing key with the tracing key for the new
message. If the message is not a forward, the sender samples and
encrypts a random value. This ciphertext acts as an encrypted
pointer to the previous message’s identifier. The current message
identifier and the encrypted pointer are sent to the platform and
are stored in a key-value table in server state, keyed by the message
identifier. The platform sends the message identifier to the recipient,
who verifies the commitment is well-formed with respect to the
tracing key and plaintext before accepting the message.
Traceback is then simply a matter of decrypting and following
the pointers between message identifiers in server state. Given a
report consisting of a tracing key kτ and plaintext p, the platform
will lookup midτ−1,τ = Fkτ (p) in server state and decrypt the
encrypted pointer to learn the tracing key kτ−1. Tracing key kτ−1
is in turn used to lookup midτ−2,τ−1 = Fkτ −1(p), the previous
message in the forwarding chain. The chain ends when a lookup
of k1 fails, i.e., the value mid = Fk1(p) is not found in the server
state. Pseudocode for the construction and a diagram of one step of
traceback is given in Figure 3.
Our scheme can be thought of as a sort of secret share between
the platform and the recipient. The recipient gets the tracing key
and the plaintext, while the platform gets the ciphertext containing
the previous message’s tracing key. User trace confidentiality is
preserved from the recipient’s share as it has no dependence on
the previous message. Platform trace confidentiality is preserved
from the platform’s share as the message identifier and ciphertext
appear as random bytes without knowledge of the tracing key. The
two shares combined allow for the previous message’s tracing key
to be decrypted and traceback to proceed.
The linked tags scheme provides path traceback cheaply. It does
require O(m) storage at the platform for m the total number of
messages sent by users. But storage is relatively cheap, and this
is a write-heavy workload, potentially allowing cheaper storage
options. Of course, the platform can expunge tracing tags after a
predefined time (e.g., one week or one month), allowing tracing in
the interim but not after. This may be preferable since it improves
confidentiality in the long term, but still allows platforms to respond
to pressing issues such as an ongoing misinformation campaign
targeting candidates within an election.
5 SECURITY OF PATH TRACEBACK
5.1 Confidentiality
We start by formalizing notions of security capturing our confi-
dentiality goals. Recall that our confidentiality goals include: (1)
trace confidentiality from the platform, meaning the platform learns
nothing about message contents or message history unless a report
NewMsg(U, p):
k ←$ {0, 1}n
return k
TagGen(Us, Ur, p, ki−1):
(cid:101)ki ← H(ki)
ki ←$ {0, 1}n
ct ← Enc(cid:101)ki
mid ← Fki (p)
(ki−1)
tts ← (mid, ct)
return (ki , tts)
RecMsg(ki , Us, Ur, p, ttr ):
mid ← ttr
if mid (cid:44) Fki (p) : return ⊥
return ki
Svr-Process(PT, Us, Ur, tts):
(mid, ct) ← tts
if mid ∈ PT : return ⊥
ttp ← (ct, Us, Ur)
ttr ← mid
return ((mid, ttp), ttr )
Svr-Trace(PT, U, p, k):
init list Tr; i ← 0
Tr[i] ← U
mid ← Fk(p)
while mid ∈ PT :
(ct, Us, Ur) ← PT[mid]
if Ur (cid:44) Tr[i] : break
Tr[i + 1] ← mid; Tr[i + 2] ← Us
mid ← Fk(p)
i ← i + 2
return Tr−1
(cid:101)k ← H(k); k ← Dec(cid:101)k
(ct)
U1
mid1,2
U2
mid2,3
U3
sent message
traceback
Fk2,3(p)
Fk1,2(p)
PT
mid2,3
...
mid1,2
Enc(cid:101)k2,3(k1,2)
Enc(cid:101)k1,2(k∅)
U2
U3
U1
U2
Figure 3: Linked tags construction for path traceback. The diagram
shows one step of traceback propagation. Solid arrows denote sent
messages, while dashed arrows denote the propagation of traceback
from blue to purple given the tracing key for blue, k2,3.
implicates that message, and (2) trace confidentiality from users,
meaning a user learns nothing about the history of messages they
receive. We therefore formalize two notions of confidentiality.
Our confidentiality definitions isolate what might leak from the
output of a specific honest node, even for adversarially chosen keys,
tracing information, and messages. This ensures confidentiality
goals even in more complicated attack settings, as well, for example
distinguishing between a sequence of forwards and a sequence of
new messages being sent.
Platform trace confidentiality. For platform trace confidential-
ity, we propose a real-or-random definition for the platform view,
i.e., the sender trace tag of a sent message. By using a real-or-
random style definition, we capture both goals of platform trace-
back, hiding message content and hiding message history, within a
single definition. In this game, given in Figure 4 (left), the adver-
sary A plays the role of the platform and is provided with a tag
generation challenge oracle that either returns the trace tag output
from TagGen or a random string. The task of the adversary is to
distinguish between the two where an adversary’s advantage is
defined as
(cid:12)(cid:12)(cid:12)Pr(cid:104) PTrCONFA,1
MT ⇒ 1(cid:105)
− Pr(cid:104) PTrCONFA,0
MT ⇒ 1(cid:105)(cid:12)(cid:12)(cid:12) .
Adv
p-tr-conf
MT
(A) =
The sender trace tag in our path traceback scheme is made up of
a message identifier, which is the output of a PRF, and a ciphertext.
Intuitively, since the platform does not learn the key used with the
PRF or with encryption scheme, our scheme satisfies the security