based on platform-speciﬁc rules preventing attacks that re-
play key-strokes via the USB bypassing the user-input.
In the meantime, we can protect the smart phone system
by performing a full backup. This is an easy solution and
feasible for most mobile devices. Indeed, the internal ROM
storage is relatively limited on smart phones, 512 MB in our
case. Using a program that runs on the phone, we can eas-
ily dump the entire ﬁlesystem using prior knowledge about
the partition information to a back-end desktop systems or
even external sdcard storage. Note that such backup is the
complete ﬁlesystem, which includes boot partition and ker-
nel binaries. If the backup is performed from a clean state,
a simple revert can defeat all persistent malware even rootk-
its. However, restoring the phone to a pristine state might
lead to loss of user personalization data and thus, it can only
act as an emergency measure and not a full-proof or even
user friendly solution.
5. RELATED WORK
Platform-speciﬁc attacks and defenses: The presen-
tation “Understanding Android’s Security Framework” [14]
presents a high-level overview of the mechanisms required
to develop secure applications within the Android develop-
ment framework. The tutorial contains the basics of building
an Android application. However, the described interfaces
must be carefully secured to defend against general malfea-
sance. They showed how Android’s security model aims to
provide mechanisms for requisite protection of applications
and critical smart phone functionality and present a num-
ber of ”best practices” for secure application development
within the environment. However, authors in [21] showed
that this is not enough and that new semantically rich and
application-centric policies have to be deﬁned and enforced
for Android. Moreover, in [19] the authors show how to
establish trust and measure the integrity of application on
mobile phone systems. At Black Hat 2009 [11] the authors
focus mainly focus on the application security on Android
platform. Unlike software, Android devices do not all come
from one place. The open nature of the platform allows for
proprietary extensions and changes. The proposed exten-
sions can help or could interfere with security. Shabtai et
al.
[23, 24] assess the security mechanisms incorporated
in Google’s new Android framework. The authors provide
a list of security mechanisms which can be incorporated to
harden the security of Android. They also make some rec-
ommendations on the eﬃcacy and priorities of various secu-
rity mechanisms. They’ve seen attacks and current threats
against mobile phones in the listed subsystems. Some of
the vulnerabilities exist already in the wild while some of
them are imminent to be wildly spread in the near future[3].
TaintDroid [13], is designed to expose how user-permitted
applications actually access and use private or sensitive data.
This includes location, phone numbers and even SIM card
identiﬁers, and to notify users in realtime. Their ﬁndings
suggest that Android, and other phone operating systems,
need to do more to monitor what third-party applications
are doing when running in smart phones.
Rookits on mobile devices : Cloaker [12] is a non-
persistent rootkit which does not alter any part of the host
operating system (OS) code or data, thereby achieving im-
munity to all existing rootkit detection techniques which
perform integrity, behavior and signature checks of the host
OS. Cloaker leverage the ARM architecture design to remain
hidden from currently deployed rootkit detection techniques,
so it’s architecture speciﬁc but OS independent.
[10] uses
three example rootkits to show that smart phones are just as
vulnerable to rootkits as desktop operating systems. How-
ever, the ubiquity of smart phones and the unique interfaces
that they expose, such as voice, GPS and battery, make the
social consequences of rootkits particularly devastating.
364
Power Drain Attacks: In [22, 16] the authors study
malware that aims to deplete the power resources on the
mobile devices. The provided solutions involve changes in
the GSM telephony infrastructure. Their work shows that
attacks were mainly carried out through the MMS/SMS in-
terfaces on the device. In addition, in [18] the authors show
that applications can simply overuse the WiFi, Bluetooth or
display of the device and eventually cause a denial of service
attack. VirusMeter [17] modeled the power consumption
and detect the malware based on power abnormality. How-
ever the use of linear regression model with static weights
for devices’ relative rate of battery consumption is a totally
non-scalable approach [20].
Stealthy Video & Audio Surveillance: Xu et al
[26]
describe a novel attack which stealthily captures video using
the on-board camera found on smart phones. Their algo-
rithm covertly records video according to the phone usage
and uses a compression algorithm to store the video on disk.
This ﬁle can later be transferred to the attacker. These at-
tacks are very realistic and go easily unnoticed to the user
of the device. However, they do not propose any solutions.
Text Messages Attacks: In addition to the research
mentioned in power drain attacks which exploits SMS/MMS
functionality [22], Traynor et al.
[15], show how specially
crafted message packets could compromise a city wide GSM
infrastructure, with mitigating mechanism proposed in [25].
Researchers at McAfee Avert Labs have observed exam-
ples of SMS (short message service) phishing (also known
as SMiShing), which seems to be on the rise [6]. One ex-
ample is malware that uses the text-messaging APIs to send
fake messages to people on the contact list.
Buﬀer overﬂows: Buﬀer overﬂows also plague mobile
devices. The presentation on hacking Windows Mobile [4]
at Xcon 2005 talked shell code development advice as well
as sample code. Recent emerging threats show that such ex-
ploitations are targeting web browsers and other potentially
exploitable software like adobe pdf view application in the
mobile OSes.
6. CONCLUSIONS
In this paper, we introduced several new types of attack
vectors that attempt to take advantage of the inherent trust
that users place on the physical USB connectivity between a
smart phone and their computer. Such attacks became fea-
sible because of the newly introduced hardware and software
capabilities of the third-generation smart phones. The use
of open source operating systems and programmable USB
ports empower a sophisticated adversary to exploit the un-
protected physical USB connection between devices. Indeed,
we describe how an adversary that has under his control one
of the connected devices can subvert the other. Moreover,
we show that by crafting a USB cable capable of putting a
subverted smart phone to host mode, we are able to exploit
other phone devices.
Although we performed our experiments and USB attacks
on Android platforms, which by itself includes devices from
many manufacturers, we explain how these attacks can be
generalized to other third-generation smart phone devices
including Apple’s iPhone. Finally, we discuss the underlying
reasons why USB attacks are a successful avenue of exploita-
tion and propagation of malware and we propose potential
defense mechanisms that would limit or even prevent such
attacks from taking place in the future.
7. ACKNOWLEDGEMENTS
We would like to thank Nelson Nazzica, Quan Jia, Meix-
ing Le and Jiang Wang from the Center for Secure Informa-
tion Systems at George Mason University for their comments
on our early draft. We also thank the anonymous ACSAC
reviewers for their constructive comments. This work was
supported in part by US National Science Foundation (NSF)
grant CNS-TC 0915291 and a research fund from Google Inc.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the NSF.
8. REFERENCES
[1] Android. http://developer.android.com/.
[2] Autoplay in windows xp: Automatically detect and
react to new devices on a system. http://msdn.
microsoft.com/en-us/magazine/cc301341.aspx.
[3] Dark side arises for phone apps.
http://online.wsj.com/article/
SB10001424052748703340904575284532175834088.
html?mod=WSJ_newsreel_technology.
[4] Hacking windows ce. http:
//www.phrack.org/issues.html?issue=63&id=6.
[5] Nexus one features and speciﬁcations.
http://www.google.com/phone/static/en_
US-nexusone_tech_specs.html.
[6] Sms phishing, records system and method.
http://www.f-secure.com/weblog/archives/
archive-042007.html.
[7] Usb 2.0 speciﬁcation. http://www.usb.org.
[8] Usb gadget api for linux.
http://www.kernel.org/doc/htmldocs/gadget.html.
[9] Usb on-the-go.
http://www.usb.org/developers/onthego/.
[10] Bickford, J., O’Hare, R., Baliga, A.,
Ganapathy, V., and Iftode, L. Rootkits on smart
phones: attacks, implications and opportunities. In
HotMobile ’10: Proceedings of the Eleventh Workshop
on Mobile Computing Systems &#38; Applications
(New York, NY, USA, 2010), ACM, pp. 49–54.
[11] Burns, J. Mobile application security on android. In
Black Hat ’09 (2009), Black Hat USA.
[12] David, F. M., Chan, E. M., Carlyle, J. C., and
Campbell, R. H. Cloaker: Hardware supported
rootkit concealment. In SP ’08: Proceedings of the
2008 IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2008), IEEE Computer
Society, pp. 296–310.
[13] Enck, W., Gilbert, P., gon Chun, B., Jung, L. P.
C. J., McDaniel, P., and Sheth, A. N. Taintdroid:
An information-ﬂow tracking system for realtime
privacy monitoring on smartphones. In OSDI ’10:
Proceedings of the 9th symposium on Operating
systems design and implementation (New York, NY,
USA, 2010), ACM, pp. 255–270.
[14] Enck, W., and McDaniel, P. Understanding
android’s security framework. In CCS ’08: Proceedings
of the 15th ACM conference on Computer and
communications security (New York, NY, USA, 2008),
ACM, pp. 552–561.
[15] Enck, W., Traynor, P., McDaniel, P., and
La Porta, T. Exploiting open functionality in
365
pp. 69–78.
sms-capable cellular networks. In CCS ’05:
Proceedings of the 12th ACM conference on Computer
and communications security (New York, NY, USA,
2005), ACM, pp. 393–404.
[16] Kim, H., Smith, J., and Shin, K. G. Detecting
energy-greedy anomalies and mobile malware variants.
In MobiSys ’08: Proceeding of the 6th international
conference on Mobile systems, applications, and
services (New York, NY, USA, 2008), ACM,
pp. 239–252.
[17] Liu, L., Yan, G., Zhang, X., and Chen, S.
Virusmeter: Preventing your cellphone from spies. In
RAID ’09: Proceedings of the 12th International
Symposium on Recent Advances in Intrusion Detection
(Berlin, Heidelberg, 2009), Springer-Verlag,
pp. 244–264.
[18] Moyers, B. R., Dunning, J. P., Marchany, R. C.,
and Tront, J. G. Eﬀects of wi-ﬁ and bluetooth
battery exhaustion attacks on mobile devices. In
HICSS ’10: Proceedings of the 2010 43rd Hawaii
International Conference on System Sciences
(Washington, DC, USA, 2010), IEEE Computer
Society, pp. 1–9.
[19] Muthukumaran, D., Sawani, A., Schiffman, J.,
Jung, B. M., and Jaeger, T. Measuring integrity
on mobile phone systems. In SACMAT ’08:
Proceedings of the 13th ACM symposium on Access
control models and technologies (New York, NY, USA,
2008), ACM, pp. 155–164.
[20] Nash, D. C., Martin, T. L., Ha, D. S., and Hsiao,
M. S. Towards an intrusion detection system for
battery exhaustion attacks on mobile computing
devices. In PERCOMW ’05: Proceedings of the Third
IEEE International Conference on Pervasive
Computing and Communications Workshops
(Washington, DC, USA, 2005), IEEE Computer
Society, pp. 141–145.
[21] Ongtang, M., Mclaughlin, S., Enck, W., and
Mcdaniel, P. Semantically rich application-centric
security in android. In In ACSAC ’09: Annual
Computer Security Applications Conference (2009).
[22] Radmilo Racic, D. M., and Chen, H. Exploiting
mms vulnerabilities to stealthily exhaust mobile
phoneˇSs battery. In In SecureComm 06 (2006),
SECURECOMM, pp. 1–10.
[23] Shabtai, A., Fledel, Y., Kanonov, U., Elovici,
Y., and Dolev, S. Google android: A state-of-the-art
review of security mechanisms. CoRR abs/0912.5101
(2009).
[24] Shabtai, A., Fledel, Y., Kanonov, U., Elovici,
Y., Dolev, S., and Glezer, C. Google android: A
comprehensive security assessment. IEEE Security and
Privacy 8 (2010), 35–44.
[25] Traynor, P., Enck, W., McDaniel, P., and
Porta, T. L. Mitigating attacks on open
functionality in sms-capable cellular networks.
IEEE/ACM Trans. Netw. 17, 1 (2009), 40–53.
[26] Xu, N., Zhang, F., Luo, Y., Jia, W., Xuan, D.,
and Teng, J. Stealthy video capturer: a new
video-based spyware in 3g smartphones. In WiSec ’09:
Proceedings of the second ACM conference on Wireless
network security (New York, NY, USA, 2009), ACM,
366