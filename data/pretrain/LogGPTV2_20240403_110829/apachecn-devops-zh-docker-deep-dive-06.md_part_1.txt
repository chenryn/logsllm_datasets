## 六、映像
在本章中，我们将深入探讨 Docker 映像。游戏的目的是让你对什么是 Docker 映像、如何执行基本操作以及它们如何在幕后工作有一个**坚实的理解**。
我们将在后面的章节中看到如何用我们自己的应用构建新的映像。
我们将把这一章分成通常的三个部分:
*   TLDR
*   深潜
*   命令
### 对接影像 tldr
Docker 映像是一个打包单元，包含应用运行所需的一切。这包括:应用代码、应用依赖关系和操作系统结构。如果您有一个应用的 Docker 映像，那么运行该应用唯一需要的其他东西就是运行 Docker 的计算机。
如果您以前是虚拟机管理员，您可以将 Docker 映像视为类似于虚拟机模板。虚拟机模板就像停止的虚拟机，Docker 映像就像停止的容器。如果你是一个开发人员，你可以把它们想象成类似于*类*。
您可以通过从映像注册表中拉出 Docker 映像来获得它们。最常见的注册地是[Docker 中心](https://hub.docker.com)，但也有其他注册地。*拉动*操作将映像下载到您的本地 Docker 主机，Docker 可以使用它启动一个或多个容器。
映像由多个*层*组成，这些层相互堆叠并表示为单个对象。映像内部是简化的操作系统(OS)以及运行应用所需的所有文件和依赖项。因为容器旨在快速和轻量级，所以映像往往很小(微软映像往往很大)。
恭喜你！你现在对什么是 Docker 的形象有了一半的了解:-现在是时候让你大吃一惊了！
### Docker 映像-深潜
我们已经提到过几次**映像**就像停止的容器(或者**类**如果你是一个开发人员)。事实上，您可以停止一个容器并从中创建一个新的映像。考虑到这一点，映像被认为是*构建时*构造，而容器是*运行时*构造。
![Figure 6.1](img/figure6-1.png)
Figure 6.1
#### 映像和容器
图 6.1 显示了映像和容器之间关系的高级视图。我们使用`docker container run`和`docker service create`命令从单个映像启动一个或多个容器。一旦从一个映像开始一个容器，这两个构造就变得相互依赖，并且在使用它的最后一个容器被停止和销毁之前，您不能删除该映像。试图删除映像而不停止并销毁使用它的所有容器将导致错误。
#### 映像通常很小
容器的全部目的是运行单个应用或服务。这意味着它只需要它正在运行的应用/服务的代码和依赖关系——它不需要任何其他东西。这将导致小映像中所有非必要的部分被去除。
例如，Docker 映像不会附带 6 种不同的外壳供您选择。事实上，许多应用映像没有外壳——如果应用不需要外壳来运行，它就不需要包含在映像中。像 busybox 和 Ubuntu 这样的通用映像都带有一个外壳，但是当您打包业务应用进行生产时，您可能会在没有外壳的情况下打包它们。
映像也不包含内核——在 Docker 主机上运行的所有容器共享对主机内核的访问。出于这些原因，我们有时会说映像包含*刚好足够的操作系统*(通常只是操作系统相关的文件和文件系统对象)。
> **注意:** Hyper-V 容器在专用的轻量级 VM 内部运行单个容器。该容器利用虚拟机内部运行的操作系统内核。
官方的 *Alpine Linux* Docker 映像大小约 5MB，是 Docker 映像可以有多小的一个极端例子。那不是错别字！真的是 5 兆左右！有些映像甚至更小，然而，一个更典型的例子可能是像官方的 Ubuntu Docker 映像，目前约为 40MB。这些显然被剥夺了大部分非必要的部分！
由于 Windows 操作系统的工作方式，基于 Windows 的映像往往比基于 Linux 的映像大得多。Windows 映像有几十亿字节并且需要很长时间才能取出，这并不罕见。
#### 拉图片
安装干净的 Docker 主机在其本地存储库中没有映像。
基于 Linux 的 Docker 主机上的本地映像存储库通常位于`/var/lib/docker/`。在基于 Windows 的 Docker 主机上，这是`C:\ProgramData\docker\windowsfilter`。如果你在你的苹果电脑或个人电脑上使用 Docker 桌面，一切都在虚拟机内部运行。
您可以使用以下命令检查 Docker 主机的本地存储库中是否有任何映像。
```
$ docker image ls
REPOSITORY  TAG      IMAGE ID       CREATED         SIZE 
```
 `将映像上传到 Docker 主机的过程称为*拉动*。所以，如果你想在你的 Docker 主机上获得最新的 Busybox 映像，你必须*拉*它。使用以下命令*拉出*一些映像，然后检查它们的大小。
> 如果您在 Linux 上继续操作，并且还没有将您的用户帐户添加到本地`docker` Unix 组中，您可能需要将`sudo`添加到以下所有命令的开头。
Linux 示例:
```
$ docker image pull redis:latest
latest: Pulling from library/ubuntu
latest: Pulling from library/redis
54fec2fa59d0: Already exists 
9c94e11103d9: Pull complete 
04ab1bfc453f: Pull complete 
5f71e6b94d83: Pull complete 
2729a8234dd5: Pull complete 
2683d7f17745: Pull complete 
Digest: sha256:157a9...ad7d28c0f9f
Status: Downloaded newer image for redis:latest
docker.io/library/redis:latest
$ docker image pull alpine:latest
latest: Pulling from library/alpine
cbdbe7a5bc2a: Pull complete 
Digest: sha256:9a839e63dad54c3a6d1834e29692c8492d93f90c59c978c1ed79109ea4fb9a54
Status: Downloaded newer image for alpine:latest
docker.io/library/alpine:latest
$ docker image ls
REPOSITORY   TAG     IMAGE ID        CREATED       SIZE
alpine       latest  f70734b6a266    40 hours ago  5.61MB
redis        latest  a4d3716dbb72    45 hours ago  98.3MB 
```
 `Windows 示例:
```
> docker image pull mcr.microsoft.com/powershell:latest
latest: Pulling from powershell
5b663e3b9104: Pull complete 
9018627900ee: Pull complete     
133ab280ee0f: Pull complete    
084853899645: Pull complete  
399a2a3857ed: Pull complete   
6c1c6d29a559: Pull complete  
d1495ba41b1c: Pull complete  
190bd9d6eb96: Pull complete  
7c239384fec8: Pull complete    
21aee845547a: Pull complete  
f951bda9026b: Pull complete  
Digest: sha256:fbc9555...123f3bd7
Status: Downloaded newer image for mcr.microsoft.com/powershell:latest
mcr.microsoft.com/powershell:latest
> docker image ls
REPOSITORY                      TAG      IMAGE ID       CREATED      SIZE
mcr.microsoft.com/powershell    latest   73175ce91dff   2 days ago   495MB
mcr.microsoft.com/.../iis       latest   6e5c6561c432   3 days ago   5.05GB 
```
 `如您所见，刚刚提取的映像现在出现在 Docker 主机的本地存储库中。您还可以看到，窗口映像要大得多，并且包含更多的层。
#### 映像命名
作为每个命令的一部分，我们必须指定要拉哪个映像。让我们花一分钟来看看映像命名。要做到这一点，我们需要一点关于映像存储方式的背景知识。
#### 映像注册表
我们将映像存储在名为*映像注册表*的集中位置。这使得共享和访问它们变得很容易。
最常见的注册表是 Docker Hub(https://Hub . Docker . com)。还存在其他注册管理机构，包括第三方注册管理机构和安全内部注册管理机构。但是，Docker 客户端固执己见，默认使用 Docker Hub。在本书的剩余部分，我们将使用 Docker Hub。
以下命令的输出被截取，但是您可以看到 Docker 被配置为在推拉映像时使用`https://index.docker.io/v1/`作为其默认注册表(这实际上重定向到了`v2`)。
```
$ docker info
Server:
 Containers: 22
 ...
 containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429
 runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd
 Docker Root Dir: /var/lib/docker
 ...
 Registry: https://index.docker.io/v1/
 ... 
```
 `映像注册表包含一个或多个*映像存储库*。反过来，映像存储库包含一个或多个映像。这可能有点令人困惑，所以图 6.2 显示了一个包含 3 个存储库的映像注册表，每个存储库有一个或多个映像。
![Figure 6.2](img/figure6-2.png)
Figure 6.2
##### 官方和非官方储存库
Docker Hub 有*官方存储库*和*非官方存储库*的概念。
顾名思义，*官方存储库*是已经过 Docker，Inc .审查和策划的映像的所在地。这意味着它们应该包含最新的、高质量的代码，这些代码是安全的、有据可查的，并且符合最佳实践。
*非官方存储库*可以像狂野西部一样——你不应该假设它们是安全的、有良好记录的或根据最佳实践构建的。这并不是说*非官方仓库*里的一切都不好。*非官方资料库*里有一些很棒的东西。在信任他们的代码之前，你只需要非常小心。老实说，当你信任来自互联网的软件时，你应该总是小心——甚至来自*官方资料库的映像。*
大多数流行的应用和基础操作系统在 Docker Hub 上都有自己的*官方存储库*。它们很容易被发现，因为它们位于 Docker Hub 命名空间的顶层。以下列表包含了一些*官方存储库*，并显示了它们在 Docker Hub 名称空间顶层的 URL:
*   **engine:t1】https://hub . docker . com/_/engine/**
*   **busybox:**https://hub . docker . com/_/busybox/
*   重定向:https://hub . docker . com/_/重定向/
*   **莽哥:**https://hub . docker . com/_/莽哥/
另一方面，我自己的个人形象生活在*非官方存储库*的狂野西部，应该**而不是**被信任。以下是我的存储库中的一些映像示例:
*   nigelpoulton/tu 演示-https://hub . docker . com/r/nigellpoulton/tu 演示/
*   nigelpoulton/pluralsight 停靠点-https://hub . docker . com/r/nigellpulton/pluralsight 停靠点-ci/
我的存储库中的映像不仅没有经过 T2 的审查，没有 T4 的更新，没有 T5 的安全，没有 T7 的良好记录，它们也不在 Docker Hub 命名空间的顶层。我的存储库都位于`nigelpoulton`二级命名空间内。
您可能会注意到，我们使用的微软映像并不存在于 Docker Hub 命名空间的顶层。在撰写本文时，它们存在于官方`mcr.microsoft.com`二级命名空间下。这是由于法律原因要求它们托管在 Docker Hub 之外。然而，它们被集成到 Docker Hub 命名空间中，以使拉它们的体验尽可能无缝。
在所有这些之后，我们终于可以看看如何在 Docker 命令行上处理映像了。
#### 映像命名和标记
对来自官方存储库的映像进行寻址就像提供由冒号(`:`)分隔的存储库名称和标签一样简单。当使用来自官方存储库的映像时，`docker image pull`的格式为:
`$ docker image pull :`
在前面的 Linux 示例中，我们使用以下两个命令绘制了一个 Alpine 和一个 Redis 映像:
`$ docker image pull alpine:latest`和`docker image pull redis:latest`
这两个命令从顶级的“alpine”和“redis”存储库中提取标记为“最新”的映像。
以下示例展示了如何从*官方存储库*中提取各种不同的映像:
```
$ docker image pull mongo:4.2.6
//This will pull the image tagged as `4.2.6` from the official `mongo` repository.
$ docker image pull busybox:latest
//This will pull the image tagged as `latest` from the official `busybox` repository.
$ docker image pull alpine
//This will pull the image tagged as `latest` from the official `alpine` repository. 
```
 `关于这些命令有几点。
首先，如果您**没有**在存储库名称后指定映像标签，Docker 将假设您指的是标记为`latest`的映像。如果存储库没有标记为`latest`的映像，该命令将失败。