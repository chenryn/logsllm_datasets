transformation from Section IV-D provably provides all properties at the cost of a slight increase in signature size (see Figure 6).
Round 3 scheme
n
i
a
m
CRYSTALS-Dilithium
FALCON
Rainbow Standard
Rainbow CZ & Compr.
e GeMSS
t
a
n
r
e
t
l
a
Picnic
SPHINCS+
malicious strong univ.
exclusive ownership
M-S-UEO (Def. III.1)
 Prop. V.1
Prop. V.5

Prop. V.9

•
Sec. V-C
Prop. V.10

 Prop. V.11
•
Sec. V-D3
message-bound
signatures
MBS (Def. III.2)
 Prop. V.1
 Prop. V.3
 Prop. V.7
 Prop. V.7
Prop. V.10

 Prop. V.11
 Prop. V.12
no re-signing
without message
NR (Def. IV.3)
 Prop. V.1
Prop. V.6

Prop. V.8

Prop. V.8

Prop. V.10

 Prop. V.11
•
Sec. V-D3
Conclusion






•
For a (ﬁnite) set S, we use the notation s ←$ S to denote that
the string s was sampled uniformly at random from S. We
also use this notation y ←$ A(x) to denote the random output
y of algorithm A for input x, where the probability is over
A’s internal randomness. We simply use the arrow ← for any
assignment statements.
Let P be any statement that can either be true or false, then
the Iverson bracket notation [P ] stands for 1 if the statement is
true and 0 otherwise. We often identify the Boolean variables
true and false with 1 and 0, respectively. A bold variable v
denotes a vector, a bold capital letter A denotes a matrix and
AT denotes the transposed matrix. The spectral norm of a
vector v is denoted by (cid:107)v(cid:107)2.
We use the notion of min-entropy to quantify the uncertainty
of the adversary about unknown data. Speciﬁcally, we follow
Dodis et al. [14] and deﬁne the average conditional min-
entropy of random variables X and Y as ˜H∞(X|Y ) =
− log Ey←Y (maxx Pr[X = x | Y = y ]). This describes the
min-entropy in X given Y , but averages over the sampling of Y .
For our applications it usually sufﬁces to use the computational
counterpart of this entropy, denoted as HILL entropy [15]. A
random variable X has average conditional HILL entropy
˜HHILL∞ (X|Y ) ≥ k conditioned on Y , if there is a random
variable X(cid:48) which is computationally indistinguishable from
X, and such that ˜H∞(X(cid:48)|Y ) ≥ k.
B. Digital Signature Schemes
We present the basic deﬁnition of a digital signature scheme.
Definition II.1. A digital signature scheme is a tuple of three
PPT algorithms Π = (KGen, Sig, Vf) with associated message
space M, deﬁned as follows:
• (sk, pk) ←$ KGen(1λ): On input the security parameter,
this randomized algorithm returns a key pair (sk, pk);
• σ ←$ Sig(sk, m): On input a signer secret key sk and a
message m ∈ M, this randomized algorithm returns a
signature σ;
• d ← Vf(pk, m, σ): On input a public veriﬁcation key pk, a
message m, and a candidate signature σ, this deterministic
algorithm returns a bit d ∈ {0, 1}. If d = 1 we say that
the signature is valid, otherwise not.
We say that a digital signature scheme Π is correct, if
there exists a negligible function µ : N → R such that, for
every security parameter λ ∈ N, every (sk, pk) ←$ KGen(1λ),
every m ∈ M, and random σ ←$ Sig(sk, m), it holds that
Pr[Vf(pk, m, σ) = 1] = 1 − µ(λ).
Security of a digital signature scheme is deﬁned in terms of
unforgeability which can be formalized in different ﬂavors. The
notion we consider is called existential unforgeability under
chosen-message attack. Intuitively, this covers that no efﬁcient
adversary who may query signatures for a few messages of its
choice can produce a valid signature for a new message. The
formal deﬁnition is given in Appendix A-A.
C. Hash Functions
In the following, we recall the deﬁnition of a (cryptographic)
hash function as well as its security properties. Informally, a
hash function compresses a string of arbitrary length to a string
of ﬁxed length.
Definition II.2. A hash function is a pair of PPT algorithms
H = (KGen, H) with associated input space M such that:
• hk ←$ KGen(1λ): On input the security parameter, this
• y ← H(hk, x): On input a key hk and an input x ∈ M,
randomized algorithm generates a key hk;
this deterministic algorithm outputs a (digest) y.
The provided deﬁnition is the more general notion of hash
functions as a family of keyed functions. The concrete hash
function can be considered by the key hk which basically
corresponds to an index choosing the appropriate function
from the family of functions. Note that we usually refer to the
family of hash functions as H and leave the key hk implicit.
Hash functions are usually required to meet certain security
properties. Among the three most prominent ones are collision
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
31698
ExpCRH,A(λ):
11 : hk ←$ KGen(1λ)
) ←$A(hk)
12 :
13 :
(x, x
return [H(hk, x) =
) ∧ x (cid:54)= x
H(hk, x
(cid:48)
(cid:48)
(cid:48)(cid:3)
(X , state) ←$Ad(hk)
ExpΦNMH,A (λ):
21 : hk ←$ KGen(1λ)
22 :
23 : x ←$X
24 : hx ←$ hint(hk, x)
25 : y ← H(hk, x)
26 :
27 :
(cid:48)
, φ) ←$Ay(y, hx, state)
(y
return [H(hk, φ(x)) =
(cid:48) ∧ φ(x) (cid:54)= x(cid:3)
y
Figure 1: Deﬁnition of the security properties for a hash
function. On the left: Deﬁnition of the experiment ExpCRH,A(λ)
from Deﬁnition II.3. On the right: Deﬁnition of the experi-
ment ExpΦNMH,A (λ) from Deﬁnition II.4.
resistance, second-preimage resistance, and preimage resistance.
In the following, it sufﬁces to consider simply the ﬁrst one.
Intuitively, collision resistance means that it is computationally
infeasible to ﬁnd any two distinct inputs to the hash function
which map to the same digest.
Definition II.3. Let H be a hash function. We say that H is
collision resistant if, for any PPT algorithm A, there exists
a negligible function µ : N → R such that, for every λ ∈ N,
it holds that Pr[ExpCRH,A(λ)] ≤ µ(λ), where ExpCRH,A(λ) is
deﬁned on the left-hand side in Figure 1.
Besides collision resistance, we require another property
called non-malleability, which has been introduced in the realm
of hash functions by Boldyreva et al. [16]. On a high-level,
non-malleability of a hash function covers that it should be
computationally infeasible to modify a digest y into another
digest y(cid:48) such that the preimages are related. Here we follow
the game-based approach called Φ-non-malleability as put
forward by Baecher et al. [17] where the adversary is tasked to
maul the digest and also to specify a transformation φ of the
preimage where the transformation is taken from the class Φ of
admissible transformations. For instance, Φ could be the class
of bit ﬂips and φ would then describe the concrete positions
of the ﬂips in the input.
Definition II.4. Let H be a hash function. We say that H
is Φ-non-malleable (with respect to a randomized function
hint) if, for any PPT algorithm A = (Ad,Ay), there exists
a negligible function µ : N → R such that, for every λ ∈ N,
it holds that Pr[ExpΦNMH,A (λ)] ≤ µ(λ), where ExpΦNMH,A (λ)
is deﬁned on the right-hand side in Figure 1 and φ ∈ Φ.
It is required that the algorithm Ad only outputs efﬁciently
sampleable distributions X such that the conditional min-
entropy ˜HHILL∞ (X|KGen, hint) ∈ ω(log λ).
Note that the adversary is modeled as a two-stage algorithm
where it is required that the algorithm Ad chooses a non-trivial
distribution X requiring it to be unpredictable by demanding
sufﬁcient min-entropy. The game uses a function hint that
models circumstantial knowledge about the preimage.
Baecher et al. [17] discuss some function classes Φ for
which the notion is achievable for constructions like Merkle–
Damgård hash functions like SHA-2 based on ideal round
functions. This class includes for example bit ﬂips, as we need
for our application (but not length extensions). We note that the
argument extends to SHA-3 and close derivatives thereof. We
discuss the assumption in light of the concrete hash functions
in the signature schemes when looking at speciﬁc schemes.
We note that if we model H as a random oracle then the
hash function satisﬁes the deﬁnition of Φ-non-malleability for
any class Φ where the functions φ preserve sufﬁcient entropy
in x, as will be the case for our results. The reason is that the
adversary can only output a related random oracle value y(cid:48) if
it has queried the random oracle about φ(x) before. But this
is infeasible if φ(x) still contains enough entropy.
III. BACKGROUND ON SECURITY NOTIONS BEYOND
UNFORGEABILITY
In this section, we revisit security properties of signature
schemes that go beyond unforgeability, namely exclusive
ownership, message-bound signatures, and non re-signability,
and provide their appropriate game-based formalizations. In
series of works it has been shown that the absence of these
properties can lead to real-world attacks such as [2], [3], [5],
[6], [18], [19]. In [3], Jackson et al. analyzed each property in
light of requirements for security protocols, and developed new
symbolic models capturing those behaviors and used these with
the Tamarin prover to ﬁnd new protocol attacks or prove their
absence. Those discussions were the starting point of this work
to re-visit these notions and hence introduce “updated” notions.
These security notions can also be used by protocol designers
to argue about their requirements for signature schemes.
A. Exclusive Ownership
In the following, we consider several notions of exclusive
ownership. All of the notions consider in different ﬂavours
whether a given signature can verify under a second public
key. Initially, Pornin and Stern introduced in [2] the notions of
conservative exclusive ownership (CEO), destructive exclusive
ownership (DEO) as well as the combined notion universal
exclusive ownership (UEO). The underlying ideas go back to
Blake-Wilson and Menezes’ Duplicate-Signature Key Selection
(DSKS) attacks [5] which were generalized by Menezes and
Smart who termed this notion key substitution attack [6].
Let us brieﬂy recall the intuition behind the initial formaliza-
tions of CEO and DEO. Both notions share that the attacker is
given a legitimate public key pk along with a signature σ and
a message m. In CEO, the attacker’s goal is to output a new
(cid:48) which veriﬁes the signature σ for message m.
public key pk
In contrast, DEO requires the same with the change that the
signature veriﬁes for a different message m(cid:48). Note that Pornin
and Stern formalized those notions as known-message attacks
where an attacker has to output a new public key along with a
corresponding secret key satisfying some correctness property.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
41699
ExpM-S-UEO
11 :
(λ):
Π,A
(m1, m2, σ,
pk1, pk2) ←$A()
12 : d1 ← Vf(pk1, m1, σ)
13 : d2 ← Vf(pk2, m2, σ)
14 :
return [d1 = 1
∧ d2 = 1 ∧ pk1 (cid:54)= pk2]
Π,A (λ):
(m1, m2, σ, pk) ←$A()
ExpMBS
21 :
22 : d1 ← Vf(pk, m1, σ)
23 : d2 ← Vf(pk, m2, σ)
24 :
return [d1 = 1
∧ d2 = 1 ∧ m1 (cid:54)= m2]
Figure 2: Deﬁnition of
and ExpMBS
(λ)
Π,A (λ) from Deﬁnitions III.1 and III.2, respectively.
the experiments ExpM-S-UEO
Π,A
Brendel et al. [4] introduced two strictly stronger variants of
universal exclusive ownership, preﬁxed strong and malicious-
strong. These stronger variants model a chosen-message attack,
where the attacker has to output a new public key without
a corresponding secret key. The attacker against the strong
property is given the ﬁrst public key, while the attacker against
the malicious-strong property may choose the ﬁrst public key
itself. In the following, we review the notion of malicious-
strong universal exclusive ownership as formalized in [4].
Malicious-strong universal exclusive ownership (M-S-UEO)
is the strongest variant of the exclusive ownership notions
presented in this paper. Here the attacker’s goal is to output
a tuple containing two (distinct) public keys pk1 and pk2,
two messages m1 and m2 along with a signature σ such
that this signature individually veriﬁes with both (pk1, m1) and
(pk2, m2). Note that this notion corresponds to a scenario where
a malicious signer may want to create ambiguity regarding the
used signing keys, or where it aims to reuse a signature in a
context that requires the veriﬁcation keys to be different.
Definition III.1. Let Π be a digital signature scheme. We say
that Π provides malicious-strong universal exclusive ownership
(M-S-UEO) if, for every PPT algorithm A, there exists a
negligible function µ : N → R such that, for every λ ∈ N,
Pr[ExpM-S-UEO
Π,A
(λ)] ≤ µ(λ),
where ExpM-S-UEO
Figure 2.
Π,A
(λ) is deﬁned on the left-hand side in
Note that this formalization allows the adversary to generate
both key pairs, and thus there is no need for a signing oracle.
B. Message-bound signatures
On an intuitive level, message-bound signatures capture
the adversary’s inability to generate a signature and a public
key under which several adversarially chosen messages verify.
If this were the case, an attacker could switch a message
after signing, i.e., claiming that it actually signed a different
message. Similar to exclusive ownership, this property is not
covered by EUF-CMA because it may involve a maliciously
generated public key. This property was initially discussed by
Stern et al. [20] with the name duplicate signature where they
provide a particular example for ECDSA, and later formally
speciﬁed by Jackson et al. [3] in the symbolic model as non-
colliding signatures. This symbolic deﬁnition does not require