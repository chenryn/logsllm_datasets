public foat getTemp()(
原则
return station.getTemperature();
应用此原则时，我们在气象站中加进一个
方法，用来向湿度计请求温度。这可以减
少我们所依赖的类的数目。
266
第7章
---
## Page 303
适配器模式
将方法调用保持在界限内·····
这是一个汽车类，展示调用方法的各种做法，同时还能够遵守最少知识原则：
这是类的一个组件，
我们能够调用它的方
public class Car {
法。
Engine engine;
//其他实例变量
在这里创建了一个新的对象，它
public Car(){
的方法可以被调用。
//初始化发动机
被当做参数传进来的对象，
public void start(Key key) (
K
其方法可以被调用。
Doors doors = new Doors（);
boolean authorized =key.turns()
可以调用对象组件的方法。
if (authorized）{
engine.start():
updateDashboardDisplay()
可以调用同一个对象内的本地方
doors.lock():
法（local method)。
可以调用你所创建或实例
化的对象的方法。
public void updateDashboardDisplay(){
//更新显示
问：
Dumb
Questions
还有另一个原则，叫做
问：
采用最少知识原则有什
得墨式耳法则（LawofDemeter），
所有的原则都应该在有帮助的时候
么缺点吗？
它和最少知识原则有什么关系？
才遵守。所有的设计都不免需要折表
（在抽象和速度之间取舍，在空间和
：是的、虽然这个原则减
答：
其实两个名词指的是同
时间之间平衡.）。虽然原则提供
少了对象之间的依赖，研究显示这会
一个原则。我们倾向于使用最少知
了方针，但在采用原则之前，必须全
减少软件的维护成本：但是采用这个
识原则来称呼它是因为以下两个原
盘考虑所有的因素。
原则也会导致更多的“包装”类被制
因：（1）这个名字更直接。（2）法则
造出来，以处理和其他组件的沟通，
（Law）给人的感党是强制的。事实
这可能会导致复杂度和开发时间的增
上，没有任何原则是法律（law），
加，并降低运行时的性能。
你现在的位置
267
---
## Page 304
违反最少知识原则
这些类有没有违反最少知识原则？请说明原因。
public House {
WeatherStation station;
//其他的方法和构造器
public float getTemp(){
return station.getThermometer () .getTemperature () ;
public House {
WeatherStation station;
//其他的方法和构造器
public float getTemp(){
Thermometer thermometer
station.getThermometer () ;
return getTempHelper (thermometer) ;
public float getTempHelper (Thermometer thermometer)
return thermometer.getTemperature();
施工区！
注意落物伤人
BRAIN
XPOWER
你能够想出在Java中，有哪些常用的地方违反了最少知识原则吗？
你应该注意吗？
回答：你认为System.out.printlnO如何？
268
第7章
---
## Page 305
适配器模式
外观和最少知识原则
这个客户只有一个朋应，也就
是HomeTheaterFacade。在OO编程
中：
“只有一个朋友”是件好事
情！
这个HomeTheaterFacade帮助客户等
理全部子系统组件，它的存在让
HomeTheaterFacade
客户变得简单又有弹性。
atchMovie()
endMovie()
listenToCd0
endCd0
listenToRadio()
endRadio()
我们可以在不影响客户的
情况下升级家庭影院的这
些组件。
我们试着让子系统也能遵守最少知
识原则。如果变得太复杂，有太多
朋友牵涉其中，那么我们可以增加
更多的外观，将此子系统分成几个
层次。
你现在的位置
269
---
## Page 306
你的设计工具箱
设计箱内的工具
要点
你的工具箱开始变重了。本章加入了几个模式，让
当需要使用一个现有的类而其
你可以改变接口，并降低客户和系统之间的耦合。
接口并不符合你的需要时，就
使用适配器。
当需要简化并统一一个很大的
00基础
接口或者一群复杂的接口时，
使用外观。
00原则
装
适配器改变接口以符合客户的
期望。
封装变化
态
外观将客户从一个复杂的子系
多用组合，少用继承
承
统中解耦。
针对接口编程，不针对实现端
程
实现一个适配器可能需要一番
为交互对象之间的松耦合设计
我们有一个新的技巧，用
功夫，也可能不费功夫，视目
而势力
来维护设计中的低层解耦
标接口的大小与复杂度而定。
类应该对扩展开放，对修改美
（略：不要告诉太多人，只告
周。
诉你的朋友）……….
■实现一个外观，需要将子系统
依赖抽象，不要依赖具体类。
组合进外观中，然后将工作委
还增加了两个新的模
托给子系统执行。
只和朋应文谈
式。它们都会改变接口.
■适配器模式有两种形式：对象
遥配器的意图是要转换接
适配器和类适配器。类适配器
口，而外观的意图是要统
00模式
需要用到多重继承。
一和筒化接口。
·你可以为一个子系统实现一个
确保一个类只有一个需
以上的外观。
单件模式一
将清求封装成对象，
用不同的请求、队
■适配器将一个对象包装起来以
求来参数化其他
改变其接口：装饰者将一个对
适配器模式—将一个类的接
象包装起来以增加新的行为和
口.转换成客户期望另一个接口。
外观模式—提供了一个统一
责任；而外观将一群对象“包
遥配器让原本不兼容的类可
的接口.用来访问子系统中的一
装”起来以简化其接口。
作无间。
群接口。外观定义了一个高层接
口.让子系统更容易使用。
270
第7章
---
## Page 307
适配器模式
是的，又是拼字时间了。这些字都是来自本章的英文词汇。
横排提示：
竖排提示：
1. True or false, Adapters can only wrap one
2.Decorator called Adapter this(3words)
object
3.One advantage of Facade
5.An Adapter
an interface
4.Principle that wasn't as easy as it sounded
6.Movie we watched (5 words)
(two words)
10. If in Europe you might need one of these
7.A
addsnewbehavior
(two words)
8. Masquerading as a Duck
11. Adapter with two roles (two words)
9.Example thatviolates thePrinciple of Least
14. Facade still
low level access
Knowledge: System.out.
15.Ducks do it better than Turkeys
12.No movie is complete without this
16. Disadvantage of the Principle of Least
13. Adapter client uses the
interface
Knowledge: too many
18.An Adapter and a Decorator can be said to
17. A
simplifies an interface
an object
19. New American dream (two words)
你现在的位置
271
---
## Page 308
习题解答
如果我们也需要一个将鸭子转换成火鸡的适配器，我们
称它为DuckAdapter。请写下这个类：
我们将临子道配到文略
所以实现了文鸡提口.
习题解答
Duck duck;
Random rand;
public DuckAdapter (Duck duck)(
this.duck = duck;
将我们使用到的略子记录下来。
rand = nev Random(); 
1
我们也创建一个随机数对象，
等一下在（）中金用到。
public void gobble()(
duck.quack () :
把略略叫定成或喊叫。
public void fy()(
if (rand.nextInt(5)
}（0=
duck.fly () ;
为略子比大鸡更含飞，所
以我们决定让赔于平均五次
只1-次。
这些类有没有违反最少知识原则？请说明原因。
public Bouse (
WeatherStation station;
//其他的方法和构造器
public float getTemp()(
return station.getTherm
teter () .getTemperature (1:
F
public Rouse (
速反最少知识愿则了，因为在
WeatherStation stationj
此课用的方法属于另一次调用
//其他的方法和构造器
的返国对象。
public foat getTenp() (
Thezmometer thermometer
station.getThermoneter():
return get7enpHelper(thermometer);
public float getTenpHelper (Thermometer thermometer) (
return thermometer.getTemperature ():
温有速反最少知识原则，但是，把程
序改成这样真的有象又喝？
272
第7章
---
## Page 309
适配器模式
习题解答
你已经知道如何实现一个适配器，将Enumcration适配成Iterator。现在请你实
现一个适配器，将Iterator适配成Enumeration。
public class IteratorEnumeration implements Enumeration {
Iterator iterator;
public IteratorEnumeration(Iterator iterator)(
this.iterator = iterator;
public boolean hasMoreElements()(
return iterator.hasNext();
}
public ObjectnextElement(){
return iterator.next();
找出每个模式的意图：
模式
意图
装饰者
将一个接口转成另
A
一个接
适配器
不改变接口，但加
入责任
外观
让接口更简单
你现在的位置
273
---
## Page 310
填字游戏解答
习题解答
N
G
E
HOMETHEATER
PDG
274
第7章
---
## Page 311
8模板方法模式
封装算法
MEN
WORKING
噢！在需要进入达个润之前他原本
是个好老板的，结累达“全部”
都
变成“我的”工作了。你懂我的意
思吧？他根本就不见人影！
Y
直到目前，我们的议题都绕着封装转；我们已经封装
了对象创建、方法调用、复杂接口、鸭子、比萨·.
接下来呢？我们将要深入封装算法块，好让子类可以在任何时候都可以
将自己挂接进运算里。我们甚至会在本章学到一个受到好莱坞影响而启发的
设计原则。
这是新的一章
275
---
## Page 312
咖啡和茶的冲泡法很相似
多来点咖啡因吧