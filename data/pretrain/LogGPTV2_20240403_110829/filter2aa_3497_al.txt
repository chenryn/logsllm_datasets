length. If no length is specified, the rest of the buffer is used.
Then we register the protocol dissector with Wireshark’s UDP dissector table. (Notice
that the function we defined at ➌ hasn’t actually executed yet; we’ve simply defined it.)
Finally, we get the UDP table and add our chat_proto object to the table with port 12345 ➏.
Now we’re ready to start the dissection.
The Lua Dissection
Start Wireshark using the script in Listing 5-15 (for example, using the –X parameter) and
then load a packet capture of the UDP traffic. You should see that the dissector has loaded
and dissected the packets, as shown in Figure 5-13.
At ➊, the Protocol column has changed to CHAT. This matches the first line of our
dissector function in Listing 5-15 and makes it easier to see that we’re dealing with the
correct protocol. At ➋, the resulting tree shows the different fields of the protocol with the
checksum printed in hex, as we specified. If you click the Data field in the tree, the
corresponding range of bytes should be highlighted in the raw packet display at the bottom
of the window ➌.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 5-13: Dissected SuperFunkyChat protocol traffic
Parsing a Message Packet
Let’s augment the dissector to parse a particular packet. We’ll use command 3 as our
example because we’ve determined that it marks the sending or receiving of a message.
Because a received message should show the ID of the sender as well as the message text,
this packet data should contain both components; this makes it a perfect example for our
purposes.
Listing 5-16 shows a snippet from Listing 5-10 when we dumped the traffic using our
Python script.
b'\x03bob\x0cHow are you?'
b"\x03bob\x16This is nice isn't it?"
Listing 5-16: Example message data
Listing 5-16 shows two examples of message packet data in a binary Python string
format. The \xXX characters are actually nonprintable bytes, so \x05 is really the byte 0x05
and \x16 is 0x16 (or 22 in decimal). Two printable strings are in each packet shown in the
listing: the first is a username (in this case bob), and the second is the message. Each string
is prefixed by a nonprintable character. Very simple analysis (counting characters, in this
case) indicates that the nonprintable character is the length of the string that follows the
character. For example, with the username string, the nonprintable character represents
0x03, and the string bob is three characters in length.
||||||||||||||||||||
||||||||||||||||||||
Let’s write a function to parse a single string from its binary representation. We’ll
update Listing 5-15 to add support for parsing the message command in Listing 5-17.
dissector_with
_commands.lua
   -- Declare our chat protocol for dissection
   chat_proto = Proto("chat","SuperFunkyChat Protocol")
   -- Specify protocol fields
   chat_proto.fields.chksum = ProtoField.uint32("chat.chksum", "Checksum",
                                                base.HEX)
   chat_proto.fields.command = ProtoField.uint8("chat.command", "Command")
   chat_proto.fields.data = ProtoField.bytes("chat.data", "Data")
   -- buffer: A TVB containing packet data
   -- start: The offset in the TVB to read the string from
   -- returns The string and the total length used
➊ function read_string(buffer, start)
       local len = buffer(start, 1):uint()
       local str = buffer(start + 1, len):string()
       return str, (1 + len)
   end
   -- Dissector function
   -- buffer: The UDP packet data as a "Testy Virtual Buffer"
   -- pinfo: Packet information
   -- tree: Root of the UI tree
   function chat_proto.dissector(buffer, pinfo, tree)
       -- Set the name in the protocol column in the UI
       pinfo.cols.protocol = "CHAT"
       -- Create sub tree which represents the entire buffer.
       local subtree = tree:add(chat_proto,
                                buffer(),
                                "SuperFunkyChat Protocol Data")
       subtree:add(chat_proto.fields.chksum, buffer(0, 4))
       subtree:add(chat_proto.fields.command, buffer(4, 1))
       -- Get a TVB for the data component of the packet.
    ➋ local data = buffer(5):tvb()
       local datatree = subtree:add(chat_proto.fields.data, data())
       local MESSAGE_CMD = 3
    ➌ local command = buffer(4, 1):uint()
       if command == MESSAGE_CMD then
           local curr_ofs = 0
           local str, len = read_string(data, curr_ofs)
        ➍ datatree:add(chat_proto, data(curr_ofs, len), "Username: " .. str)
           curr_ofs = curr_ofs + len
           str, len = read_string(data, curr_ofs)
           datatree:add(chat_proto, data(curr_ofs, len), "Message: " .. str)
       end
   end
   -- Get UDP dissector table and add for port 12345
   udp_table = DissectorTable.get("udp.port")
   udp_table:add(12345, chat_proto)
Listing 5-17: The updated dissector script used to parse the Message command
In Listing 5-17, the added read_string() function ➊ takes a TVB object (buffer) and a
starting offset (start), and it returns the length of the buffer and then the string.
Technet24
||||||||||||||||||||
||||||||||||||||||||
NOTE
What if the string is longer than the range of a byte value? Ah, that’s one of the challenges of
protocol analysis. Just because something looks simple doesn’t mean it actually is simple. We’ll
ignore issues such as the length because this is only meant as an example, and ignoring length
works for any examples we’ve captured.
With a function to parse the binary strings, we can now add the Message command to the
dissection tree. The code begins by adding the original data tree and creates a new TVB
object ➋ that only contains the packet’s data. It then extracts the command field as an
integer and checks whether it’s our Message command ➌. If it’s not, we leave the existing
data tree, but if the field matches, we proceed to parse the two strings and add them to the
data subtree ➍. However, instead of defining specific fields, we can add text nodes by
specifying only the proto object rather than a field object. If you now reload this file into
Wireshark, you should see that the username and message strings are parsed, as shown in
Figure 5-14.
Figure 5-14: A parsed Message command
Because the parsed data ends up as filterable values, we can select a Message command by
specifying chat.command == 3 as a display filter, as shown at ➊ in Figure 5-14. We can see that
the username and message strings have been parsed correctly in the tree, as shown at ➋.
||||||||||||||||||||
||||||||||||||||||||
That concludes our quick introduction to writing a Lua dissector for Wireshark.
Obviously, there is still plenty you can do with this script, including adding support for
more commands, but you have enough for prototyping.
NOTE
Be sure to visit the Wireshark website for more on how to write parsers, including how to
implement a TCP stream parser.
Using a Proxy to Actively Analyze Traffic
Using a tool such as Wireshark to passively capture network traffic for later analysis of
network protocols has a number of advantages over active capture (as discussed in Chapter
2). Passive capture doesn’t affect the network operation of the applications you’re trying to
analyze and requires no modifications of the applications. On the other hand, passive
capture doesn’t allow you to interact easily with live traffic, which means you can’t modify
traffic easily on the fly to see how applications will respond.
In contrast, active capture allows you to manipulate live traffic but requires more setup
than passive capture. It may require you to modify applications, or at the very least to
redirect application traffic through a proxy. Your choice of approach will depend on your
specific scenario, and you can certainly combine passive and active capture.
In Chapter 2, I included some example scripts to demonstrate capturing traffic. You can
combine these scripts with the Canape Core libraries to generate a number of proxies,
which you might want to use instead of passive capture.
Now that you have a better understanding of passive capture, I’ll spend the rest of this
chapter describing techniques for implementing a proxy for the SuperFunkyChat protocol
and focus on how best to use active network capture.
Setting Up the Proxy
To set up the proxy, we’ll begin by modifying one of the capture examples in Chapter 2,
specifically Listing 2-4, so we can use it for active network protocol analysis. To simplify
the development process and configuration of the SuperFunkyChat application, we’ll use a
port-forwarding proxy rather than something like SOCKS.
Copy Listing 5-18 into the file chapter5_proxy.csx and run it using Canape Core by
passing the script’s filename to the CANAPE.Cli executable.
chapter5
_proxy.csx
   using static System.Console;
   using static CANAPE.Cli.ConsoleUtils;
Technet24
||||||||||||||||||||
||||||||||||||||||||
   var template = new FixedProxyTemplate();
   // Local port of 4444, destination 127.0.0.1:12345
➊ template.LocalPort = 4444;
   template.Host = "127.0.0.1";
   template.Port = 12345;
   var service = template.Create();
   // Add an event handler to log a packet. Just print to console.
➋ service.LogPacketEvent += (s,e) => WritePacket(e.Packet);
   // Print to console when a connection is created or closed.
➌ service.NewConnectionEvent += (s,e) =>
            WriteLine("New Connection: {0}", e.Description);
   service.CloseConnectionEvent += (s,e) =>
            WriteLine("Closed Connection: {0}", e.Description);
   service.Start();
   WriteLine("Created {0}", service);
   WriteLine("Press Enter to exit...");
   ReadLine();
   service.Stop();
Listing 5-18: The active analysis proxy
At ➊, we tell the proxy to listen locally on port 4444 and make a proxy connection to
127.0.0.1 port 12345. This should be fine for testing the chat application, but if you want
to reuse the script for another application protocol, you’ll need to change the port and IP
address as appropriate.
At ➋, we make one of the major changes to the script in Chapter 2: we add an event
handler that is called whenever a packet needs to be logged, which allows us to print the
packet as soon it arrives. At ➌, we add some event handlers to print when a new
connection is created and then closed.
Next, we reconfigure the ChatClient application to communicate with local port 4444
instead of the original port 12345. In the case of ChatClient, we simply add the --port NUM
parameter to the command line as shown here:
ChatClient.exe --port 4444 user1 127.0.0.1
NOTE
Changing the destination in real-world applications may not be so simple. Review Chapters 2
and 4 for ideas on how to redirect an arbitrary application into your proxy.
The client should successfully connect to the server via the proxy, and the proxy’s
console should begin displaying packets, as shown in Listing 5-19.
   CANAPE.Cli (c) 2017 James Forshaw, 2014 Context Information Security.
   Created Listener (TCP 127.0.0.1:4444), Server (Fixed Proxy Server)
   Press Enter to exit...
➊ New Connection: 127.0.0.1:50844  127.0.0.1:12345
   Tag 'Out'➋ – Network '127.0.0.1:50844  127.0.0.1:12345'➌
           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF
||||||||||||||||||||
||||||||||||||||||||
   --------:-------------------------------------------------------------------
   00000000: 42 49 4E 58 00 00 00 0E 00 00 04 16 00 05 75 73 - BINX..........us
   00000010: 65 72 31 05 62 6F 72 61 78 00                   - er1.borax.
   Tag 'In'➍ - Network '127.0.0.1:50844  127.0.0.1:12345'
           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF
   --------:-------------------------------------------------------------------
   00000000: 00 00 00 02 00 00 00 01 01 00                   - ..........
   PM - Tag 'Out' - Network '127.0.0.1:50844  127.0.0.1:12345'
           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF
   --------:-------------------------------------------------------------------
➎ 00000000: 00 00 00 0D                                    - ....
   Tag 'Out' - Network '127.0.0.1:50844  127.0.0.1:12345'
           : 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F - 0123456789ABCDEF
   --------:-------------------------------------------------------------------
   00000000: 00 00 04 11 03 05 75 73 65 72 31 05 68 65 6C 6C - ......user1.hell
   00000010: 6F                                              - o
   --snip--
➏ Closed Connection: 127.0.0.1:50844  127.0.0.1:12345
Listing 5-19: Example output from proxy when a client connects
Output indicating that a new proxy connection has been made is shown at ➊. Each
packet is displayed with a header containing information about its direction (outbound or
inbound), using the descriptive tags Out ➋ and In ➍.
If your terminal supports 24-bit color, as do most Linux, macOS, and even Windows 10
terminals, you can enable color support in Canape Core using the --color parameter when
starting a proxy script. The colors assigned to inbound packets are similar to those in
Wireshark: pink for outbound and blue for inbound. The packet display also shows which
proxy connection it came from ➌, matching up with the output at ➊. Multiple connections
could occur at the same time, especially if you’re proxying a complex application.
Each packet is dumped in hex and ASCII format. As with capture in Wireshark, the
traffic might be split between packets as in ➎. However, unlike with Wireshark, when
using a proxy, we don’t need to deal with network effects such as retransmitted packets or
fragmentation: we simply access the raw TCP stream data after the operating system has
dealt with all the network effects for us.
At ➏, the proxy prints that the connection is closed.
Protocol Analysis Using a Proxy
With our proxy set up, we can begin the basic analysis of the protocol. The packets shown
in Listing 5-19 are simply the raw data, but we should ideally write code to parse the traffic
as we did with the Python script we wrote for Wireshark. To that end, we’ll write a Data
Parser class containing functions to read and write data to and from the network. Copy
Listing 5-20 into a new file in the same directory as you copied chapter5_proxy.csx in
Listing 5-18 and call it parser.csx.
parser.csx
Technet24
||||||||||||||||||||
||||||||||||||||||||
using CANAPE.Net.Layers;
using System.IO;
class Parser : DataParserNetworkLayer
{
    ➊ protected override bool NegotiateProtocol(
           Stream serverStream, Stream clientStream)
    {
     ➋ var client = new DataReader(clientStream);
        var server = new DataWriter(serverStream);
        // Read magic from client and write it to server.
     ➌ uint magic = client.ReadUInt32();
        Console.WriteLine("Magic: {0:X}", magic);
        server.WriteUInt32(magic);
        // Return true to signal negotiation was successful.
        return true;
    }
}
Listing 5-20: A basic parser code for proxy
The negotiation method ➊ is called before any other communication takes place and is
passed to two C# stream objects: one connected to the Chat Server and the other to the
Chat Client. We can use this negotiation method to handle the magic value the protocol
uses, but we could also use it for more complex tasks, such as enabling encryption if the
protocol supports it.
The first task for the negotiation method is to read the magic value from the client and
pass it to the server. To simply read and write the 4-byte magic value, we first wrap the
streams in DataReader and DataWriter classes ➋. We then read the magic value from the client,
print it to the console, and write it to the server ➌.
Add the line #load "parser.csx" to the very top of chapter5_proxy.csx. Now when the main
chapter5_proxy.csx script is parsed, the parser.csx file is automatically included and parsed
with the main script. Using this loading feature allows you to write each component of
your parser in a separate file to make the task of writing a complex proxy manageable.
Then add the line template.AddLayer(); just after template.Port = 12345; to add the parsing
layer to every new connection. This addition will instantiate a new instance of the Parser
class in Listing 5-20 with every connection so you can store any state you need as members
of the class. If you start the proxy script and connect a client through the proxy, only
important protocol data is logged; you’ll no longer see the magic value (other than in the
console output).
Adding Basic Protocol Parsing
Now we’ll reframe the network protocol to ensure that each packet contains only the data
for a single packet. We’ll do this by adding functions to read the length and checksum
fields from the network and leave only the data. At the same time, we’ll rewrite the length
and checksum when sending the data to the original recipient to keep the connection
||||||||||||||||||||
||||||||||||||||||||
open.
By implementing this basic parsing and proxying of a client connection, all nonessential
information, such as lengths and checksums, should be removed from the data. As an
added bonus, if you modify data inside the proxy, the sent packet will have the correct
checksum and length to match your modifications. Add Listing 5-21 to the Parser class to
implement these changes and restart the proxy.
➊ int CalcChecksum(byte[] data) {
       int chksum = 0;
       foreach(byte b in data) {
           chksum += b;
       }
       return chksum;
   }
➋ DataFrame ReadData(DataReader reader) {
       int length = reader.ReadInt32();
       int chksum = reader.ReadInt32();
       return reader.ReadBytes(length).ToDataFrame();
   }
➌ void WriteData(DataFrame frame, DataWriter writer) {
       byte[] data = frame.ToArray();
       writer.WriteInt32(data.Length);
       writer.WriteInt32(CalcChecksum(data));
       writer.WriteBytes(data);
   }
➍ protected override DataFrame ReadInbound(DataReader reader) {
       return ReadData(reader);
   }
   protected override void WriteOutbound(DataFrame frame, DataWriter writer) {
       WriteData(frame, writer);
   }
   protected override DataFrame ReadOutbound(DataReader reader) {
       return ReadData(reader);
   }
   protected override void WriteInbound(DataFrame frame, DataWriter writer) {
       WriteData(frame, writer);
   }
Listing 5-21: Parser code for SuperFunkyChat protocol
Although the code is a bit verbose (blame C# for that), it should be fairly simple to
understand. At ➊, we implement the checksum calculator. We could check packets we read
to verify their checksums, but we’ll only use this calculator to recalculate the checksum
when sending the packet onward.
The ReadData() function at ➋ reads a packet from the network connection. It first reads a