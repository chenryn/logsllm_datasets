### Flexibility in Tracing Functionality and Associated Risks

The flexibility in tracing functionality comes with the risk of more permissive revelation of plaintext content during the tracing process. Implementing such a policy would require defining actionable policies regarding which messages should be considered related—a complex topic that necessitates further research.

### Preventing Partition Attacks by Malicious Users

Assuming the existence of effective message-similarity detection software running on honest clients, one solution to prevent malicious users from bypassing these checks is the use of trusted hardware. This would require all clients to faithfully execute the detection software. In the absence of client-side trusted hardware, cryptographic methods, such as zero-knowledge proofs, can be used, albeit at a significantly higher cost. Such a solution would require the platform to maintain, for each user, a set of all ciphertext-tag pairs they have received. For each new message sent, the user would need to prove in zero-knowledge that their message is unique (or sufficiently dissimilar) with respect to the set or that it is constructed as a forward of an appropriate message in the set. However, this approach is unlikely to be practical. Both the trusted hardware and zero-knowledge solutions are susceptible to similarity-evasion attacks, where an adversary crafts a message that evades similarity detection but still carries malicious intent.

### Mitigating Abuse of Abuse Mitigations

Message tracing can be used to identify the source of malicious or harassing messages. However, the same techniques can be misused against whistleblowers or activists. Robust policies dictating when and how to perform tracing are necessary to protect users' privacy expectations. Our proposed schemes offer one such policy: a single report from a user who has received a message unlocks the ability for the platform to trace. Higher-level policies within the platform can dictate if a report is acted upon, but this raises the question of whether more expressive reporting and tracing policies can be integrated directly into the cryptographic tracing scheme.

### Path and Tree Traceback Timing

- **Figure 9**: Path traceback timing with respect to path length. (Left) Total time to complete the trace. (Right) Traceback rate of time per message in the trace.
- **Figure 10**: Tree traceback with varying tree structure. (Left) Varying tree depth with a constant branching factor of 3. (Right) Varying branching factor with a constant depth of 3. (Top) Total time to complete the trace. (Bottom) Traceback rate of time per message in the trace.

### Storage and Bandwidth Overhead

Our tracing schemes introduce extra tracing metadata that needs to be stored and transmitted by both the client and server. As shown in Figure 8, the absolute size of the stored trace metadata is small—consisting of a 256-bit PRF output and a few 128-bit block cipher outputs. For client storage and bandwidth, we expect the overhead induced by <100B of trace metadata per message to be negligible compared to the size of the message itself. Furthermore, when the message is deleted, the associated trace metadata can be deleted with it. For server storage, however, platforms like Signal and WhatsApp do not store message ciphertexts beyond a temporary staging period until they have been delivered. In this case, trace metadata incurs a new long-term storage cost, potentially representing a significant infrastructure change. To limit storage costs, if the goal of message tracing is to combat ongoing misinformation campaigns, it seems reasonable to store only a sliding window of trace metadata, say for the current month. If the platform sees one billion messages of traffic per day, the data store would be approximately 2TB for tree traceback and 600GB for path traceback. A data store of this size can be instantiated with an in-memory data store like Redis, as in our benchmarks, or more cheaply with a database, where the tradeoff would be slower traceback.

### Additional Approaches

1. **Anonymous Blacklisting Scheme**: One interesting approach is to couple a tracing mechanism with an anonymous blacklisting scheme. Cryptographic material bound to each message can be used to bar the author from further participation without linking messages together or identifying the author. This can be extended to tracing schemes, allowing the platform to ban the source or forwarders of a message without learning their identities. For this to be meaningful, the tracing scheme should not depend on metadata.

2. **Threshold Reporting for Tree Traceback**: Another approach for tree traceback is threshold reporting, where a message would need to be reported by many users before it can be traced. Once a certain threshold of reports is reached, some part or all of the trace tree could be revealed. Care must be taken to prevent one malicious client from hitting the reporting threshold by forwarding the message to colluding clients. The appropriate threshold and its variability with the size of the forwarding tree are also important considerations.

3. **Robustness of the Tracing Authority**: Various mechanisms can increase the robustness of the tracing authority. Multiple parties could be required to cooperate to recover a trace, or the tracing authority could be delegated to a separate party. Alternatively, the tracing authority could operate as part of a contractual anonymity system, where a verifiable third-party mediates between users and the authority, only giving the authority the ability to de-anonymize if a user breaks their contract policy.

### Related Work

- **Tracing Mechanisms**: To our knowledge, there are no works directly addressing the tracing of forwards in end-to-end (E2E) encrypted messaging. Some works, including [9, 15, 20], have considered the problem of tracing payments in electronic cash systems, which is conceptually related but not directly applicable.
- **IP Packet Traceback**: Another line of work [25, 29, 30] has considered IP packet traceback, but these approaches are probabilistic and cannot be used to reliably trace an individual message.
- **Privacy-Preserving Path Validation**: A recent work [28] supports privacy-preserving path validation for a single packet, but it requires the path to be known in advance, making it unsuitable for ad-hoc paths in social networks.
- **Secure Logging**: Several works, including [26], have considered secure logging mechanisms, which aim to record activity on a local machine that cannot be modified by an attacker and does not reveal anything without access to a decryption key.
- **Symmetric Searchable Encryption**: Symmetric searchable encryption (SSE) schemes use "encrypted pointers" to hide the structure of an index held on an untrusted server. Our tracing mechanism uses similar techniques to bind message plaintexts into the pointers and protect against maliciously generated pointers.
- **Traitor Tracing**: Traitor tracing mechanisms [7, 11] aim to identify who within a group leaked a particular piece of content or a key to an outside party. These schemes are not directly applicable to message tracing.
- **Signatures and Aggregate Signatures**: Aggregate signatures [8] allow the path of a message through a network to be authenticated by an aggregation of per-hop signatures and a list of the hops taken. Our scheme achieves its results without requiring the message to contain a linear list of its path-to-date and without disclosing that path to intermediaries.
- **Message Franking**: Message franking [13, 17] aims to prevent abuse in E2E encrypted messaging. While these protocols inspire our work, they cannot be used to report messages past one hop.
- **Automated Moderation Systems**: Various works have explored ad-hoc moderation or machine learning to detect abusive content. These works are promising but require the originators of messages to be identified if they are to be held accountable or prevented from sending further messages.

### Conclusion

We introduced tracing for E2E encrypted messaging, enabling a messaging platform to recover and cryptographically verify the path a message took as it was forwarded between users given a report by one of the recipients. We presented two schemes for tracing messages with different traceback targets: path to message source and entire message forwarding tree. Implementation benchmarks show both schemes are efficient and require the messaging platform to store less than 100 bytes of additional data per message sent.

### Acknowledgments

This work was supported in part by NSF awards DGE-1650441 and CNS-1704527.

### References

[References listed as provided, with proper formatting and citations.]

### Confidentiality Proof

First, we recall the standard security notions needed in our proof. The real-or-random chosen plaintext attack (RoR-CPA) extended for multiple keys is defined in Figure 11. The adversary's advantage is defined as:

\[
\text{Adv}_{\text{ror-cpa}}^{E,m}(A) = \left| \Pr[\text{RoR-CPA}_{A,1}^{E,m} \Rightarrow \text{true}] - \Pr[\text{RoR-CPA}_{A,0}^{E,m} \Rightarrow \text{true}] \right|
\]

The PRF security game extended for multiple keys is defined in Figure 12. The adversary's advantage is defined as:

\[
\text{Adv}_{\text{prf}}^{F,m}(A) = \left| \Pr[\text{PRF}_{A,1}^{F,m} \Rightarrow \text{true}] - \Pr[\text{PRF}_{A,0}^{F,m} \Rightarrow \text{true}] \right|
\]

### Platform Trace Confidentiality

**Theorem 1.** Let \( MT \) be the message tracing scheme for path traceback defined in Figure 3 using hash function \( H \). Then, if \( H \) is modeled as a random oracle, for any \( PTrCONF \) adversary \( A \) that makes at most \( q \) oracle queries, we give adversaries \( B \) and \( C \) such that:

\[
\text{Adv}_{PTrCONF}^{MT}(A) \leq \text{Adv}_{\text{prf}}^{H,q}(B) + \text{Adv}_{\text{ror-cpa}}^{E,q}(C)
\]