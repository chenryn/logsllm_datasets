code.
It also inlines a proﬁler, which collects information
about function invocations: their number and the types of
the arguments and return values. If a function is called of-
ten enough (implementation speciﬁc) and with stable types
(the types of arguments are the same across invocations),
the second-tier compiler is invoked. It generates optimized
code for a subset of the language and arguments of speciﬁc
types (this is called run-time type specialization [23]). Op-
2The term boxing comes from implementations of dynamic
and functional languages where boxed values are those that
contain additional meta-data.
3This is a simpliﬁed account that corresponds to state-of-
the art at the time of writing. JIT compilers are constantly
evolving and precise documentation regarding their architec-
ture is scarce and often outdated. Our experiments, how-
ever, have conﬁrmed the facts described here.
633timized code can be executed up to 20x faster [23] than the
unoptimized.
Inline caches [30] allow translating ﬁeld accesses to mem-
ory lookups using constant oﬀsets. This requires dynami-
cally inferring hidden classes, which are akin to structural
types for objects that account for the order of ﬁeld initializa-
tion. Note that hidden classes are distinct types for the pur-
poses of specialization. Enforcing the box invariant allows
the monitor core and API facades to be compiled into type-
specialized code very early in the execution, which we have
veriﬁed experimentally. It is also faster than sparse labeling.
Recall that sparse labeling mandates labels to be attached
to values if the former are non-bottom (e.g., not “public”
for the classic conﬁdentiality policy). But that means that
the monitor is going to operate on many diﬀerent types of
values: all the JS run-time types in addition to the hidden
class of boxes. This prevents monitoring code to be consid-
ered type-stable and prohibits optimization. Moreover, it
requires additional run-time overhead to determine whether
a given value is boxed or unboxed.
Functional monitor core. The monitor needs to perform
operations like comparing (leq) and joining (join,join2)
levels, tracking implicit ﬂows (enter, exit, update and push),
applying the NSU and structural restrictions (nsuCheck and
nsuxCheck). These operations are part of the monitor core.
They are invoked often, and we’d like them to be fast.
Type stability is a necessary, but not suﬃcient condition
for optimization: the code should be conﬁned to a single
function, with many compilers imposing restrictions on the
size of its body and requiring it to be declared in and ac-
cessed via a variable (as opposed to an object ﬁeld). We
design the monitor accordingly: as a collection of small
functions stored in variables. This is good software engi-
neering practice and it simpliﬁes static type checking and
testing too. More importantly, it helps the JIT generate op-
timized code: The functions assume arguments and return
values only of a limited number of types (mostly, boxes) and
avoid costly language features like with or exceptions that
invalidate optimizations. Small size and limited functional-
ity causes the functions to be used often in the instrumented
program and force early specialization, which we have veri-
ﬁed by investigating the tracing logs of JIT compilers.
Keeping the monitor operations as functions also simpli-
ﬁes inlining, e.g., helping preserve the order of expression
evaluation. To give a speciﬁc example, consider the expres-
sion e+x. The na¨ıve way to rewrite it, assuming the box
invariant (and ignoring t and m ﬁelds), would be as
{ l : e . l (cid:116) x .l , v : e . v + x . v }
However, what if e has side-eﬀects, e.g., it is y++? It
would be evaluated twice and will cause y to be incremented
twice, yielding an incorrect result. Passing expression argu-
ments to functions is an easy way to force evaluation of
sub-expressions: in this case, the sum would be rewritten as
opadd(e’,x), where e’ is the transformation of e.
Operation emulation. ECMAScript semantics is complex
and relies on internal algorithms that are not visible to the
user and cannot be altered or mediated. Yet, they involve
complex information ﬂows, which must be modeled. For
ﬁne-grained tracking the monitored program must emulate
parts of the semantics explicitly. The emulation models in-
function opadd (l , r ) {
’ use strict ’;
var pl = T o P r i m i t i v e B o x ( l ) ,
pr = T o P r i m i t i v e B o x ( r ) ;
return primbox ( pl . v + pr .v , pl . l . join ( pr . l ) )
}
Listing 1: opadd monitor operation
function T o P r i m i t i v e B o x (b , hint ) {
’ use strict ’;
if ( I s P r im B o x ( b ) ) return b ;
else return D e f a u l t V a l u e (b , hint ) ;
}
Listing 2: ToPrimitiveBox monitor operation
ternal behavior and state, allowing more precise reasoning
about control- and information ﬂows.
Using addition as an example, we note that, like many
other operations, it involves dynamic type coercion. If the
type of the ﬁrst argument is coercible to a string, the opera-
tion acts as concatenation. Otherwise, it works like ordinary
number addition. Now, consider addition of a string to an
object: ""+{}. It would cause the object to be converted to
a string, which is the result of calling a toString method of
the object, normally inherited from the Object prototype.
However, if the user redeﬁnes the method, that would be
called instead. There is an issue with this: the user-deﬁned
method is going to be transformed by the inliner and will
operate on boxes. The run-time, which doesn’t know any-
thing about boxes, is going to call the function, providing
an unboxed value for this and treating the return value as
unboxed (not boxed) string.
To address this we perform explicit type conversions of
boxed values and emulate certain aspects of JavaScript se-
mantics and library behavior. Addition is rewritten into a
call to the monitor operation opadd (listing 1), which takes
two boxed values and calls ToPrimitiveBox in order to cap-
ture the possible side eﬀects due to implicit type coercion.
ToPrimitiveBox (listing 2) checks whether the box stores a
primitive value (using the t ﬂag ﬁeld) and calls Default-
Value if its not.
Readers familiar with the ECMAScript speciﬁcation will
recognize DefaultValue as the name of an internal opera-
tion; this is modeled by its counterpart in the monitor RTS
(runtime system), including calling toString. We end up
reimplementing certain aspects semantics of ECMAScript,
similar to [28], but unlike them we avoid reimplementing ev-
erything and instead rely the underlying semantics as much
as possible. For instance, opadd does not reimplement the
addition operation in that it does not query and convert
argument types in case they are primitive: it defers to the
actual language run-time by using the native + operator.
This is safe because primitive value conversions are side-
eﬀect free.
A few additional examples of monitor operations are:
• primlow(x) takes a primitive value and boxes it with the
public label,
634• assignField(rhs,o,f) performs both NSU and structural
checks and provide support for the special semantics of
arrays.
• the three functions invokeFunction(f,...), invokeMethod
(o,f,...) and newObject(c,...) are used to perform calls;
they account for the implicit ﬂow and provide the correct
box to be bound to the special parameter this. The latter
is not possible with native function calls.
API facades. Like language semantics, APIs need to be
mediated too: They often involve complex control ﬂows and
information ﬂows, and they need to be instrumented to work
with boxes.
API’s are exposed as JS objects, functions and computed
ﬁelds. Their mediation in inlined access control monitor-
ing has been studied in [42, 37], but also see [35, 45, 22]
for investigation of code isolation. It was found that sim-
ply installing wrappers by redeﬁning object ﬁelds is prone
to attacks, like prototype poisoning: the attacker can re-
deﬁne a function that is often called implicitly, e.g., Ob-
ject.prototype.toString from our previous example, to
subvert the monitor. Another complication is the fact that
some API components cannot be redeﬁned (read-only ﬁelds),
or meaningfully wrapped (like the length ﬁeld of arrays).
Once again, we opt for either partial or complete emula-
tion of APIs which is implemented in API facades.4 They
are ordinary JS objects, functions and values that implement
box- and information-ﬂow-aware interfaces that mirror the
native ones. Some of the facades rely on the native APIs
for performance, simplicity or IO (e.g., the DOM API). The
common responsibilities of facades are to unbox arguments
for native APIs, box return values with levels that capture
information ﬂows, account for implicit ﬂows due to excep-
tions that might be thrown, apply restrictions to the observ-
able memory side eﬀects, and apply the security policy at
the IO endpoints. Facades never pass boxed values to native
code, which is unaware of box semantics. They unbox the
values in a limited manner: For objects, most API’s either
do not inspect the object graph (the only exception we have
found so far is window.postMessage) or coerce objects to
primitive values anyway. In the latter case we coerce object
boxes to primitives beforehand.
This approach also allows us to avoid dealing with the
diﬀerences in browser APIs, which can be signiﬁcant, and
to mask (for soundness) the APIs that we don’t support
yet. Facades are written in pure JS and rely on the monitor
core, property descriptors and box meta-data to maintain
transparency and enforce mediation.
Script consolidation. In web pages scripts can exist in
multiple places:  tags, event handlers and URL-
properties. This makes it impossible to wrap the whole
program in a closure, which we want to do for conﬁnement
(Sec. 3.4). To address this problem we have developed script
consolidation which extracts all the statically known pieces
of JS in the page and puts them in a single inline script, while
preserving the behavior of pages that follow the HTML 5
standard. All occurrences of scripts, including event-handler
properties (e.g., onclick) of HTML elements are subject to
4The term is chosen to avoid confusion with ECMAScript 6
proxies.
consolidation. Dynamic scripts, however, like those to which
eval is applied, are handled separately.
In a few edge cases that involve with deprecated HTML
features, consolidation is not transparent. These features
are deprecated because they enable execution of scripts to
aﬀect the state of the HTML parser. Consolidation is not
transparent for such eﬀects.
Script consolidation simpliﬁes handling of a few things,
such as event handlers. It allows to store the RTS in func-
tion statements instead of properties of the global objects,
which is nice for the JIT. However, it is not a hard require-
ment for making the monitor work. If consolidation was not
used, we could have stored the monitor core and state in
global variables. But those are in the global object and the
for..in statement allows enumerating its properties, which
would make them vulnerable to tampering. We could have
instrumented the statement to skip over our preﬁxed vari-
ables, or used property descriptors to make the properties
non-enumerable. Both solutions incur extra run-time over-
head; the latter because, at least in some JITs, access to
ﬁelds with non-default descriptors is not optimized.
3.3 Principles of implementation
Our goal is to minimize overhead for well-designed and op-
timized programs, while making it possible to run the rest
and maintaining transparency and soundness. Often these
goals are in conﬂict. The implementation follows a few gen-
eral guidelines to improve performance and aid mediation.
Leveraging fast operations. Type specializing compilers
support only a subset of JS, so leveraging them requires re-
stricting the vocabulary used when implementing the core
and facades. For example, 31-bit integers are known to be
stored unboxed in V8, so we use those as much as possible,
e.g., for the box type tag and the bit-vector label represen-
tation.
We also leverage native variable lookups and scope chains,
as well as native ﬁeld lookup and prototype chains. An al-
ternative is explicit emulation, which requires costly enu-
meration and recursion.
Laziness. Fast startup is deemed very important for web
applications and is one of the reasons for using dynamic op-
timizations. But it can be challenging for an inlined monitor
that supports a lot of API’s. To aid that, we initialize all
the API components lazily. For example, the Object fa-
cade constructor is not initialized until its ﬁrst use. And
even then, its prototype ﬁelds remain unevaluated. We use
ECMAScript accessors for that.
3.4 Structure of a monitored program
The logical structure of the monitor at run-time is shown
in ﬁgure 1. The arrows show ﬂows of control and infor-
mation. DOM API and ECMAScript standard library are
part of the browser (shaded). The instrumented program
is the only component that depends on the original. The
run-time representation of the security policy is generated
from a declarative speciﬁcation, introduced in section 2.
The syntactic structure of a monitored program is shown
in listing 3. It makes heavy use of anonymous function clo-
sures and local variables. We need to ensure access to the
monitor core and the facades from the instrumented pro-
gram while ensuring they are tamper-proof at a reasonable
635DOM API
Security policy
ECMAScript standard lib.
Facade DOM
Monitor core
Facade standard libr.
Instrumented program
Figure 1: Structure of a monitored program (data
ﬂows)
Finally, this approach allows separating the monitor from
the global scope, which simpliﬁes testing and benchmarking.
3.5 Inlining
The architecture of the inliner is presented in ﬁgure 2.
The original program is either a standalone JS program or
it is in a web page. If it is in a web page it ﬁrst needs to go
through script consolidation to produce a single JS program
equivalent to the multiple scripts (Sec. 3.2).
( function () {
function xxstop (...) {..}
/* monitor d e c l a r a t i o n s */ ;
var xxpolicy = /* ... */ ;
var xxglobal = new ( function () {
/* global facade c o n s t r u c t o r */
}) () ;
return ( function () {
var /* API lockout v a r i a b le s */ ;
with ( this . v ) { /* i n s t r u m e n t e d prog . */ };
}) . call ( xxglobal ) ;
}) () ;
Listing 3: Structure of a transformed program
(abbreviated)
cost. This is done by prepending a random preﬁx to the
name of every monitor variable; here and in the rest of the
text this preﬁx is xx. We make sure that the preﬁx does not
clash with the existing program variable names. Because we
mediate all the operations and expose our versions of APIs,
this leaves brute-force guessing as the only option for the at-
tacker. The only way to implement guessing variable names
at run-time is using eval. The preﬁx can be thought of as
a secret shared between the monitor core and the instru-
mentation. Guessing that secret gives the attacker nothing,
because the only way to refer to it is inside eval, and the
inlining procedure for dynamically evaluated code outlaws
any references to the monitor variable.
For transparency reasons we need to support aliasing of
the properties of the global object facade with global vari-
ables. We use the with construct for this. However, most
JITs don’t optimize function bodies that contain with. We