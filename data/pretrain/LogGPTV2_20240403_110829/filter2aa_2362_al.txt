### 2.7.4 Hardware Overflow Protection

Buffer overflows have been a significant challenge for software developers and a favorite exploit for hackers, leading to the development of both hardware and software protections. This section outlines two notable hardware/software solutions.

#### 2.7.4.1 Secure Bit

**Secure Bit** is an innovative hardware/software overflow protection technology currently under study at Michigan State University. It is a patent-pending solution designed to mitigate buffer overflow attacks on control data, such as return addresses and function pointers. **Secure Bit** requires modifications to both the processor and the kernel OS, but it remains transparent to user software and is compatible with legacy code.

The core mechanism of **Secure Bit** involves marking addresses passed between buffers as insecure, a process known as user input tainting. Once data is tainted, it cannot be unmarked. If control instructions attempt to use these tainted addresses, an exception is raised. The robustness and minimal run-time impact of **Secure Bit** are key advantages of this technology.

**Reference:**
- R. Enbody and K. Piromsopa, “Secure Bit: Transparent, Hardware Buffer-Overflow Protection,” *IEEE Transactions on Dependable and Secure Computing*, 3(4) (October 2006): 365–376. ISSN: 1545-5971

#### 2.7.4.2 Hardware DEP

**Data Execution Prevention (DEP)** is a Microsoft hardware/software solution that adds additional checks to prevent malicious exploits from executing in memory. In Windows Server 2003 with Service Pack 1, XP SP2, and Vista, DEP is enforced by both hardware and software.

**Hardware-enforced DEP** marks all non-code segments in a process as non-executable unless the location explicitly contains executable code. Attacks like buffer overflows often try to insert and execute code from non-executable memory locations, such as the stack or heap. DEP raises an exception when execution is attempted from such locations.

**Hardware-enforced DEP** relies on processor hardware to mark memory with an attribute indicating that code should not be executed from that memory. DEP operates on a per-virtual-memory-page basis, typically by changing a bit in the page table entry (PTE) to mark the memory page. The specific implementation varies by processor architecture, but processors supporting hardware-enforced DEP can raise an exception when code is executed from a page marked with the appropriate attribute.

Both Advanced Micro Devices (AMD) and Intel Corporation have defined and shipped Windows-compatible architectures that support DEP. For 32-bit versions of Windows Server 2003 with Service Pack 1, the no-execute page-protection (NX) feature from AMD or the Execute Disable bit (XD) feature from Intel is used, requiring the processor to run in Physical Address Extension (PAE) mode. The 64-bit versions of Windows use the NX or XD feature on 64-bit extension processors and certain values of the access rights PTE field on IPF processors.

**Reference:**
- [Microsoft Technet](http://technet2.microsoft.com/windowsserver/en/library/b0de1052-4101-44c3-a294-4da1bd1ef2271033.mspx?mfr=true)

### 2.7.5 Software Overflow Protection

This section discusses several software-based protections designed to mitigate the effects of buffer overflows. A "defense in depth" strategy is recommended, as no single protection is sufficient.

#### 2.7.5.1 GS (Buffer Security Check)

The **Buffer Security Check** (also known as the "/GS" compile flag in Microsoft Visual Studio C++) works by placing a "cookie" (or "canary") on the stack between the return address and local variables. This cookie is initialized to a new value each time the application runs. Before a function returns, the integrity of the cookie is checked. If a buffer overflow has occurred, the cookie will be altered, and the application will terminate with an error. Although guessing the cookie value is difficult, there have been efforts to defeat canary-based stack protection.

**References:**
- D. Litchfield, “Defeating the Stack Based Overflow Prevention Mechanism of Microsoft Windows 2003 Server,” Sept. 2003, [NGS Software](www.ngssoftware.com/papers/defeating-w2k3-stack-protection.pdf)
- Ollie Whitehouse, “Analysis of GS Protections in Microsoft® Windows Vista(tm),” Symantec Advanced Threat Research, [Symantec](www.symantec.com/avcenter/reference/GS_Protections_in_Vista.pdf)

#### 2.7.5.2 Software DEP

**Software-enforced DEP** is an additional set of security checks introduced in Windows Server 2003 with Service Pack 1. These checks are designed to mitigate exploits of exception handling mechanisms in Windows. **Software-enforced DEP** runs on any processor capable of running Windows Server 2003 with Service Pack 1. By default, it protects only limited system binaries, regardless of the hardware-enforced DEP capabilities of the processor.

**Software-enforced DEP** performs additional checks on exception handling mechanisms. If the program's image files are built with Safe Structured Exception Handling (SafeSEH), it ensures that before an exception is dispatched, the exception handler is registered in the function table within the image file. If the program’s image files are not built with SafeSEH, it ensures that the exception handler is located within a memory region marked as executable.

#### 2.7.5.3 SafeSEH and More

**SafeSEH** is a security enhancement that limits the success of Structured Exception Handler (SEH) overwrite attacks. In a stack overflow, even if a return address cannot be affected, overwriting an exception handler address can still lead to malicious execution control. **SafeSEH** works by ensuring that SEH pointers point to registered exception handlers rather than arbitrary values. However, if the attack returns to code in a .dll not protected by SafeSEH, the attack may still succeed.

#### 2.7.5.4 PAX and ExecShield

**PAX** from the GRSec family of kernel patches and **ExecShield** (originally from Red Hat) are methods used in Linux to mark data memory as non-executable and program memory as non-writable. This prevents the existence of memory pages that are both writable and executable, thereby protecting the system from injected code through vulnerabilities. Despite some debate and workarounds, these technologies provide a strong safeguard against most generic exploitation attempts.

#### 2.7.5.5 StackGuard

**StackGuard** is another protection mechanism for Linux, similar to the GS compiler flag from Microsoft. It uses a canary value that is checked after a function call. If the canary is destroyed, it indicates a stack overflow has occurred.

### 2.8 Summary

Fuzzing, once a secretive activity, has become more openly discussed and integrated into the software development process. This chapter aimed to introduce various types of bugs, defenses, and security career paths, providing a foundation for more in-depth discussions on fuzzing and available tools. Fuzzing is now a frequent topic at security conferences and a crucial part of vulnerability assessment.

### Chapter 3: Quality Assurance and Testing

#### 3.1 Quality Assurance and Security

Quality assurance (QA) is essential in preventing and catching software flaws, including design and programming errors that can lead to vulnerabilities. Traditional security assessments are often reactive, focusing on protecting against known attacks and identifying vulnerabilities in deployed systems. Fuzzing, on the other hand, is a proactive tool for finding previously undetected flaws. Integrating fuzzing into QA processes can significantly improve the quality and security of software.

#### 3.1.1 Security in Software Development

Security testing is often misunderstood, with many viewing it as a feature to be added during development. However, security is a critical property that needs to be considered throughout the development process. Common security features like encryption and authentication are important, but they do not cover all potential vulnerabilities. Developers must also be aware of implementation-level vulnerabilities such as buffer overflows and command injection.

#### 3.1.2 Security Defects

Implementation mistakes, such as simple programming errors, are a primary cause of security vulnerabilities. End users rely on QA professionals and security researchers to ensure the security of applications. While end users may be interested in features like encryption, the majority of security incidents result from flaws like buffer overflows and cross-site scripting. Using industry-proven libraries and avoiding custom implementations can help mitigate these risks.

#### 3.2 Measuring Quality

Defining and measuring quality is challenging, especially in complex software. Testers need to determine when a product is "good enough" and ready for release. Feature-oriented testing, where test cases are mapped to specific requirements, is a common approach. Exploratory testing, while valuable, relies heavily on the skills of individual testers.

#### 3.2.1 Quality Is About Validation of Features

Systematic testing requires knowing the test purpose beforehand. Functional, feature-oriented black-box testing often uses an input/output oracle to define correct responses. A 100% success rate in feature testing means all specified tests were passed. Fuzzing, which can involve millions of test cases, challenges this strict pass/fail criterion. For example, IETF's "torture tests" for SIP protocols have limited coverage compared to the extensive testing possible with fuzzing.

**Example:**
- **IETF RFC4475** defines a test for scalar header field values outside their legal range. An element receiving such a request should respond with a 400 Bad Request due to the CSeq error. If only the Max-Forwards field is in error, the element could process the request as if the field were absent. If only the expiry values are in error, the element could treat them as if they contained the default values for expiration (3600 in this case).

By integrating fuzzing into QA processes, organizations can better identify and mitigate security vulnerabilities, leading to more secure and reliable software.