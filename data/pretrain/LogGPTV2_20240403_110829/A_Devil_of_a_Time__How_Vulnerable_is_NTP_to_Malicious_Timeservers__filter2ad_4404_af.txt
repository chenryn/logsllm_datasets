from that in [41] in that: (a) [41] primarily targets non-security-
related questions, with security-related discussions limited to
sparsely populated regions of the pool (where control of a
timeserver trivially grants the attacker immense power); (b)
Our measurements are at somewhat ﬁner granularity (e.g.,
servers are queried more often in our experiments).
Recently, there have been several studies describing errors,
misconﬁgurations and attacks against NTP [5], [24]–[26], [43].
These studies demonstrate, for example, the ability of off-path
attackers to launch denial-of-service (DoS) attacks and also
to shift the local time at the client by exploiting weaknesses
in NTP’s implementation (e.g., via spoofed Kiss-o’-Death
packets) [24], [25]. Recently introduced patches to NTP’s im-
plementation eliminate/mitigate some of these vulnerabilities.
Many efforts to secure NTP focus on authentication and en-
cryption [3], [7]–[9], [11], [34], [36], [39], [40]. The Chronos
NTP client [6] reﬂects an orthogonal, client-side approach that
leverages approximate-agreement algorithms for secure time
synchronization. We believe that this constitutes a promising
4681012141618# Samples101101103105107Expected Attack Time (years)p=1/15p=1/10p=1/9p=1/7p=1/5p=1/3Figure 17: Time-offset computation (taken from [6])
approach for protecting NTP clients. However, our results
indicate that to attain meaningful security guarantees and to
avoid unacceptable load distributions on NTP timeservers, this
approach should be coupled with an appropriate scheme for
assigning timeservers to clients.
VIII. CONCLUSION
NTP is crucial for the correct and secure operation of many
Internet services. We showed that NTP is highly vulnerable to
attacks by malicious servers. We examined two such types of
attacks: (1) attacks where the server is in control, or gains
control, of existing timeservers in the NTP server pool, and
(2) attacks where the attacker introduces new timeservers into
the server pool. We also presented an agenda for enhancing
NTP’s security against malicious timeservers. Our proposed
scheme balances different goals, namely, preserving today’s
NTP time accuracy and precision, improving security, and not
overloading timeservers.
ACKNOWLEDGEMENTS
We thank Samuel Jero and the anonymous reviewers of
this publication for many valuable comments. We also thank
Danny Dolev, Tal Mizrahi, and the members of the IETF’s
NTP Working Group for helpful discussions. This research
was partly funded by an ERC Starting Grant and by the Israel
National Cyber Directorate (INCD).
REFERENCES
[1] Ntp version 4.2.8p9 code, November 2016.
[2] Current versions of ntp.
SoftwareDownloads, 2019.
http://support.ntp.org/bin/view/Main/
[3] ANDREEVA, O., GORDEYCHIK, S., GRITSAI, G., KOCHETOVA, O.,
POTSELUEVSKAYA, E., SIDOROV, S. I., AND TIMORIN, A. A. Indus-
trial control systems vulnerabilities statistics. Tech. rep., Kaspersky lab,
2016.
[4] BOVERMAN, A. Timejacking & bitcoin. Culubas blog, May 2011.
http://culubas.blogspot.com/2011/05/timejacking-bitcoin 802.html.
[5] CZYZ, J., KALLITSIS, M., GHARAIBEH, M., PAPADOPOULOS, C.,
BAILEY, M., AND KARIR, M. Taming the 800 pound gorilla: The rise
and decline of ntp ddos attacks. In Proceedings of the 2014 Conference
on Internet Measurement Conference (New York, NY, USA, 2014), IMC
’14, ACM, pp. 435–448.
[6] DEUTSCH, O., ROZEN-SCHIFF, N., DOLEV, D., AND SCHAPIRA, M.
Preventing (network) time travel with chronos. Proceedings of the 25th
Network and Distributed Systems Security Symposium (NDSS).
[7] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated
In 25th USENIX Security Symposium
network time synchronization.
(USENIX Security 16) (Austin, TX, 2016), USENIX Association,
pp. 823–840.
[8] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated
network time synchronization. In Proceedings of the 25th USENIX Con-
ference on Security Symposium (Berkeley, CA, USA, 2016), SEC’16,
USENIX Association, pp. 823–840.
[9] FRANKE, D. F., SIBOLD, D., TEICHEL, K., DANSARIE, M., AND
SUNDBLAD, R. Network Time Security for the Network Time Protocol.
Internet-Draft draft-ietf-ntp-using-nts-for-ntp-20, Internet Engineering
Task Force, July 2019. Work in Progress.
[10] GILAD, Y., HLAVACEK, T., HERZBERG, A., SCHAPIRA, M., AND
SHULMAN, H. Perfect is the enemy of good: Setting realistic goals
In Proceedings of the 17th ACM Workshop on Hot
for bgp security.
Topics in Networks (New York, NY, USA, 2018), HotNets ’18, ACM,
pp. 57–63.
[11] HABERMAN, B., AND MILLS, D. Rfc 5906: Network time protocol
version 4: Autokey speciﬁcation. internet engineering task force (ietf),
2010.
[12] HANSEN, A. B. Global — pool.ntp.org. https://www.pool.ntp.org/zone/
@, 2018.
[13] HANSEN, A. B. How do i join pool.ntp.org? https://www.ntppool.org/
en/join.html, 2018.
[14] HANSEN, A. B. How do i use pool.ntp.org? https://www.ntppool.org/
en/use.html, 2018.
[15] HANSEN, A. B. Europe — europe.pool.ntp.org, 2019.
[16] HANSEN, A. B.
deﬁnition
netspeed
-
and
explanation.
https://github.com/abh/ntppool/blob/master/docs/manage/tpl/manage/
servers help.html, 2019.
[17] HANSEN, A. B. North america — north-america.pool.ntp.org, 2019.
[18] HANSEN, A. B. The ntp pool for vendors. https://www.ntppool.org/en/
vendors.html, 2019.
[19] HANSEN, A. B. Ntp pool project - introduction. https://www.ntppool.
org/en/, 2019.
[20] HANSEN, A. B., AND GALLEGO, X. R. ntppool github project. https:
//github.com/abh/ntppool/blob/master/lib/NTPPool, July 2020.
[21] HOCH, D.
Integrating sun kerberos and microsoft active directory
kerberos, 2005.
[22] HODGES, J., AND JACKSON, C. Http strict transport security (hsts),
November 2012.
[23] LTD, N. M. Time traceability for the ﬁnance sector. Tech. rep., NPL
Management Ltd, United Kingdom, March 2016.
[24] MALHOTRA, A., COHEN, I. E., BRAKKE, E., AND GOLDBERG, S.
Attacking the network time protocol. IACR Cryptology ePrint Archive
2015 (2015), 1020.
[25] MALHOTRA, A., AND GOLDBERG, S. Attacking ntp’s authenticated
broadcast mode. SIGCOMM Comput. Commun. Rev. 46, 2 (May 2016),
12–17.
[26] MALHOTRA, A., GUNDY, M. V., VARIA, M., KENNEDY, H., GARD-
NER, J., AND GOLDBERG, S. The security of ntp’s datagram protocol.
In Financial Cryptography and Data Security - 21st International
Conference, FC 2017, Sliema, Malta, April 3-7, 2017, Revised Selected
Papers (2017), pp. 405–423.
[27] MALHOTRA, A., TOOROP, W., OVEREINDER, B., DOLMANS, R., AND
GOLDBERG, S. The impact of time on dns security. Cryptology ePrint
Archive, Report 2019/788, 2019. https://eprint.iacr.org/2019/788.
[28] MARZULLO, K., AND OWICKI, S. Maintaining the time in a distributed
In Proceedings of the Second Annual ACM Symposium on
system.
Principles of Distributed Computing (New York, NY, USA, 1983),
PODC ’83, ACM, pp. 295–305.
[29] MARZULLO, K. A. Maintaining the time in a distributed system. Tech.
rep., Xerox, 1984.
[30] MARZULLO, K. A. Maintaining the Time in a Distributed System:
An Example of a Loosely-coupled Distributed Service (Synchronization,
Fault-tolerance, Debugging). PhD thesis, Stanford, CA, USA, 1984.
AAI8506272.
[31] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W. Rfc 5905:
Network time protocol version 4: Protocol and algorithms speciﬁcation.
internet engineering task force (ietf), 2010.
[32] MILLS, D. L. How ntp works. https://www.eecis.udel.edu/∼mills/ntp/
html/warp.html, March 2014.
[33] MILLS, D. L., MAMAKOS, L., AND PETRY, M. Network Time Protocol
(NTP). RFC 958, sep 1985.
[34] MIZRAHI, T. Rfc 7384 (informational):security requirements of time
protocols in packet switched networks, October 2014.
16
Figure 18: NTPv4’s time-update computation (taken from [6])
[35] MURTA, C. D., TORRES JR., P. R., AND MOHAPATRA, P. Qrpp1-4:
Characterizing quality of time and topology in a time synchronization
network. In IEEE Globecom 2006 (Nov 2006), pp. 1–5.
[36] NIST. The NIST authenticated ntp service. http://www.nist.gov/pml/
div688/grp40/auth-ntp.cfm, 2010.
[37] NOVICK, A. N., AND LOMBARDI, M. A. Practical limitations of ntp
In 2015 Joint Conference of the IEEE International
time transfer.
Frequency Control Symposium the European Frequency and Time
Forum (April 2015), pp. 570–574.
[38] NTP-NETWORK-FOUNDATION. How does it work?, 2019.
[39] REILLY, D., STENN, H., AND SIBOLD, D. Network Time Protocol Best
Current Practices. RFC 8633, July 2019.
[40] ROTTGER, S. Analysis of the ntp autokey procedures. master’s thesis,
technische universitt braunschweig, 2012.
[41] RYTILAHTI, T., TATANG, D., K ¨OPPER, J., AND HOLZ, T. Masters
of time: An overview of the ntp ecosystem. In 2018 IEEE European
Symposium on Security and Privacy (EuroS P) (April 2018), pp. 122–
136.
[42] SCHIFF, N. R., DOLEV, D., MIZRAHI, T., AND SCHAPIRA, M. A
Secure Selection and Filtering Mechanism for the Network Time
Protocol Version 4.
Internet-Draft draft-ietf-ntp-chronos-01, Internet
Engineering Task Force, Sept. 2020. Work in Progress.
[43] SELVI, J. Bypassing http strict transport security. In Black Hat Europe
(2014).
[44] SELVI,
J.
Bypassing http strict
Hat Europe, 2014.
eu-14-Selvi-Bypassing-HTTP-Strict-Transport-Security-wp.pdf.
Black
https://www.blackhat.com/docs/eu-14/materials/
transport
security.
[45] STENN, H. ntp header ﬁle. https://github.com/ntp-project/ntp/blob/
master-no-authorname/include/ntp.h, 2016.
[46] STENN, H. ntp protocol code. https://github.com/ntp-project/ntp/blob/
master-no-authorname/ntpd/ntp proto.c, 2016.
APPENDIX
This appendix contains additional details about the NTPv4
and Chronos clients.
A. The NTPv4 Client
The time synchronization process between NTPv4 clients
and NTP timeservers consists of two steps: (1) the poll process,
in which the client exchanges messages with timeservers
to collect servers’ time samples, and (2) discarding outliers
and computing the new local time from the remaining time
samples. We next elaborate on each of these two steps [1],
[31], [32].
The poll process. An NTPv4 client periodically queries a
set of NTP timeservers to learn the clock readings at these
17
Algorithm 2 Pseudocode for Chronos’ Time Sampling Scheme
[6]
1: counter := 0
2: while counter < K do
3:
(cid:46) gather time samples from m
S := sample(m)
randomly chosen servers
values
T := bi-sided-trim(S,d)
(cid:46) trim d lowest and highest
if (max(T )− min(T ) <= 2ω) and (|avg(T )− tC| <
(cid:46) panic mode
(cid:46) trim bottom and top thirds
4:
5:
6:
7:
ERR + 2ω then
return avg(T)
counter++
8: S := sample(n)
3 )
9: T := bi-sided-trim(S, n
10: return avg(T)
servers. Through interaction with each server, the client obtains
4 distinct timestamps per query: (1) T1, the local time at the
client when the query is sent, (2) T2, the local time at the
server when the query is received, (3) T3, the local time at the
server when the response is sent, and (4) T4, the local time at
the client when the response is received.
These timestamps are then used to compute the offset θ =
2 ((T2 − T1) + (T3 − T4)) [24], [37], which is intended to
1
capture the difference between the local times at the client and
at the server. See Fig. 17 (taken from [6]) for an illustration.
The client queries each server several times to obtain several
offsets associated with that server.
Computing the local time at the client. After computing
these offsets, the client applies a 5-step algorithm to compute
a new time to update its local clock to, as described in Fig. 18
(taken from [6]). For each timeserver, the offset associated with
the lowest network delay measured with respect to that server
is identiﬁed. Marzullo’s algorithm [28]–[30] is applied to these
offsets to identify a “majority clique of truechimers” [1], [32],
i.e., a large cluster of servers with accurate clocks. This set of
time samples can be further pruned, with the aim of improving
accuracy, by removing all but some predetermined number of
time samples that are within the smallest distance of each other.
Lastly, a weighted average of the offsets of the remaining time
samples is computed. If this value is “far” from the current
local time (and so the current local time is viewed as “stale”),
the local time is updated to the computed time value.
B. The Chronos NTP Client
The Chronos [6] NTP client is a security-enhanced NTP
client. Chronos’ time synchronization process applies a prov-
ably secure approximate-agreement algorithm to a large set of
timeservers. Speciﬁcally, a Chronos NTP client periodically
obtain clock readings from m (say, 10 − 15 servers) out of
a large ﬁxed set of servers S (ideally, containing 100s of
servers). Then, the offsets with respect to these servers are
ordered from lowest to highest and the bottom d and top d
offsets according to this order are removed from consideration
(choosing d = m
3 ) is shown in [6] to yield good security
guarantees). If the surviving time samples are “not far” from
each other and are (on average) close to the client’s local
clock, the local time is updated to be the average of these time
samples. Otherwise, a new server set of size m to sync with is
re-sampled from S. In the event of reaching k consecutive re-
samplings, the Chronos client enters “panic mode” and queries
all timeservers in S, again eliminating the top and bottom
outliers and averaging over the rest, to determine its new local
time. Chronos’ pseudocode is presented in Algorithm 2.
18