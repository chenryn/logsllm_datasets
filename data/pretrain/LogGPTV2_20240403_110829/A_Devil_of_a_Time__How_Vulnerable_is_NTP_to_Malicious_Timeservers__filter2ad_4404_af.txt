### Comparison with [41]

In contrast to the work presented in [41], our study differs in two key aspects:
1. **Focus on Security-Related Issues**: While [41] primarily addresses non-security-related questions, with only limited discussion of security concerns in sparsely populated regions of the NTP pool (where control of a timeserver can grant an attacker significant power), our research is more focused on security vulnerabilities and attacks.
2. **Granularity of Measurements**: Our measurements are conducted at a finer granularity. For instance, we query servers more frequently in our experiments, providing a more detailed and dynamic view of the NTP ecosystem.

### Recent Studies on NTP Vulnerabilities

Recent studies have highlighted various errors, misconfigurations, and attacks against NTP [5], [24]–[26], [43]. These studies demonstrate that off-path attackers can launch denial-of-service (DoS) attacks and manipulate the local time at the client by exploiting weaknesses in NTP's implementation, such as through spoofed Kiss-o’-Death packets [24], [25]. Although recent patches to NTP's implementation have mitigated some of these vulnerabilities, many efforts to secure NTP focus on authentication and encryption [3], [7]–[9], [11], [34], [36], [39], [40].

### The Chronos NTP Client

The Chronos NTP client [6] represents a novel, client-side approach that leverages approximate-agreement algorithms for secure time synchronization. We believe this approach holds promise for protecting NTP clients. However, our results indicate that to achieve meaningful security guarantees and to avoid overloading NTP timeservers, this approach should be combined with an appropriate scheme for assigning timeservers to clients.

### Conclusion

NTP is essential for the correct and secure operation of many Internet services. Our research has shown that NTP is highly vulnerable to attacks by malicious servers. We examined two types of attacks:
1. **Control of Existing Timeservers**: Attacks where the server is in control or gains control of existing timeservers in the NTP server pool.
2. **Introduction of New Timeservers**: Attacks where the attacker introduces new, malicious timeservers into the server pool.

We also proposed an agenda for enhancing NTP's security against malicious timeservers. Our proposed scheme aims to balance different goals, including maintaining the current level of NTP time accuracy and precision, improving security, and avoiding overloading timeservers.

### Acknowledgements

We thank Samuel Jero and the anonymous reviewers of this publication for their valuable comments. We also extend our gratitude to Danny Dolev, Tal Mizrahi, and the members of the IETF’s NTP Working Group for their helpful discussions. This research was partly funded by an ERC Starting Grant and by the Israel National Cyber Directorate (INCD).

### References

[1] Ntp version 4.2.8p9 code, November 2016.
[2] Current versions of ntp. SoftwareDownloads, 2019. http://support.ntp.org/bin/view/Main/
[3] ANDREEVA, O., GORDEYCHIK, S., GRITSAI, G., KOCHETOVA, O., POTSELUEVSKAYA, E., SIDOROV, S. I., AND TIMORIN, A. A. Industrial control systems vulnerabilities statistics. Tech. rep., Kaspersky lab, 2016.
[4] BOVERMAN, A. Timejacking & bitcoin. Culubas blog, May 2011. http://culubas.blogspot.com/2011/05/timejacking-bitcoin 802.html.
[5] CZYZ, J., KALLITSIS, M., GHARAIBEH, M., PAPADOPOULOS, C., BAILEY, M., AND KARIR, M. Taming the 800 pound gorilla: The rise and decline of ntp ddos attacks. In Proceedings of the 2014 Conference on Internet Measurement Conference (New York, NY, USA, 2014), IMC ’14, ACM, pp. 435–448.
[6] DEUTSCH, O., ROZEN-SCHIFF, N., DOLEV, D., AND SCHAPIRA, M. Preventing (network) time travel with chronos. Proceedings of the 25th Network and Distributed Systems Security Symposium (NDSS).
[7] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated network time synchronization. In 25th USENIX Security Symposium (USENIX Security 16) (Austin, TX, 2016), USENIX Association, pp. 823–840.
[8] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated network time synchronization. In Proceedings of the 25th USENIX Conference on Security Symposium (Berkeley, CA, USA, 2016), SEC’16, USENIX Association, pp. 823–840.
[9] FRANKE, D. F., SIBOLD, D., TEICHEL, K., DANSARIE, M., AND SUNDBLAD, R. Network Time Security for the Network Time Protocol. Internet-Draft draft-ietf-ntp-using-nts-for-ntp-20, Internet Engineering Task Force, July 2019. Work in Progress.
[10] GILAD, Y., HLAVACEK, T., HERZBERG, A., SCHAPIRA, M., AND SHULMAN, H. Perfect is the enemy of good: Setting realistic goals for bgp security. In Proceedings of the 17th ACM Workshop on Hot Topics in Networks (New York, NY, USA, 2018), HotNets ’18, ACM, pp. 57–63.
[11] HABERMAN, B., AND MILLS, D. Rfc 5906: Network time protocol version 4: Autokey specification. internet engineering task force (ietf), 2010.
[12] HANSEN, A. B. Global — pool.ntp.org. https://www.pool.ntp.org/zone/@, 2018.
[13] HANSEN, A. B. How do I join pool.ntp.org? https://www.ntppool.org/en/join.html, 2018.
[14] HANSEN, A. B. How do I use pool.ntp.org? https://www.ntppool.org/en/use.html, 2018.
[15] HANSEN, A. B. Europe — europe.pool.ntp.org, 2019.
[16] HANSEN, A. B. Definition of netspeed and explanation. https://github.com/abh/ntppool/blob/master/docs/manage/tpl/manage/servers help.html, 2019.
[17] HANSEN, A. B. North america — north-america.pool.ntp.org, 2019.
[18] HANSEN, A. B. The ntp pool for vendors. https://www.ntppool.org/en/vendors.html, 2019.
[19] HANSEN, A. B. Ntp pool project - introduction. https://www.ntppool.org/en/, 2019.
[20] HANSEN, A. B., AND GALLEGO, X. R. ntppool github project. https://github.com/abh/ntppool/blob/master/lib/NTPPool, July 2020.
[21] HOCH, D. Integrating sun kerberos and microsoft active directory kerberos, 2005.
[22] HODGES, J., AND JACKSON, C. Http strict transport security (hsts), November 2012.
[23] LTD, N. M. Time traceability for the finance sector. Tech. rep., NPL Management Ltd, United Kingdom, March 2016.
[24] MALHOTRA, A., COHEN, I. E., BRAKKE, E., AND GOLDBERG, S. Attacking the network time protocol. IACR Cryptology ePrint Archive 2015 (2015), 1020.
[25] MALHOTRA, A., AND GOLDBERG, S. Attacking ntp’s authenticated broadcast mode. SIGCOMM Comput. Commun. Rev. 46, 2 (May 2016), 12–17.
[26] MALHOTRA, A., GUNDY, M. V., VARIA, M., KENNEDY, H., GARDNER, J., AND GOLDBERG, S. The security of ntp’s datagram protocol. In Financial Cryptography and Data Security - 21st International Conference, FC 2017, Sliema, Malta, April 3-7, 2017, Revised Selected Papers (2017), pp. 405–423.
[27] MALHOTRA, A., TOOROP, W., OVEREINDER, B., DOLMANS, R., AND GOLDBERG, S. The impact of time on dns security. Cryptology ePrint Archive, Report 2019/788, 2019. https://eprint.iacr.org/2019/788.
[28] MARZULLO, K., AND OWICKI, S. Maintaining the time in a distributed system. In Proceedings of the Second Annual ACM Symposium on Principles of Distributed Computing (New York, NY, USA, 1983), PODC ’83, ACM, pp. 295–305.
[29] MARZULLO, K. A. Maintaining the time in a distributed system. Tech. rep., Xerox, 1984.
[30] MARZULLO, K. A. Maintaining the Time in a Distributed System: An Example of a Loosely-coupled Distributed Service (Synchronization, Fault-tolerance, Debugging). PhD thesis, Stanford, CA, USA, 1984. AAI8506272.
[31] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W. Rfc 5905: Network time protocol version 4: Protocol and algorithms specification. internet engineering task force (ietf), 2010.
[32] MILLS, D. L. How ntp works. https://www.eecis.udel.edu/~mills/ntp/html/warp.html, March 2014.
[33] MILLS, D. L., MAMAKOS, L., AND PETRY, M. Network Time Protocol (NTP). RFC 958, sep 1985.
[34] MIZRAHI, T. Rfc 7384 (informational):security requirements of time protocols in packet switched networks, October 2014.
[35] MURTA, C. D., TORRES JR., P. R., AND MOHAPATRA, P. Qrpp1-4: Characterizing quality of time and topology in a time synchronization network. In IEEE Globecom 2006 (Nov 2006), pp. 1–5.
[36] NIST. The NIST authenticated ntp service. http://www.nist.gov/pml/div688/grp40/auth-ntp.cfm, 2010.
[37] NOVICK, A. N., AND LOMBARDI, M. A. Practical limitations of ntp time transfer. In 2015 Joint Conference of the IEEE International Frequency Control Symposium the European Frequency and Time Forum (April 2015), pp. 570–574.
[38] NTP-NETWORK-FOUNDATION. How does it work?, 2019.
[39] REILLY, D., STENN, H., AND SIBOLD, D. Network Time Protocol Best Current Practices. RFC 8633, July 2019.
[40] ROTTGER, S. Analysis of the ntp autokey procedures. master’s thesis, technische universitt braunschweig, 2012.
[41] RYTILAHTI, T., TATANG, D., K ¨OPPER, J., AND HOLZ, T. Masters of time: An overview of the ntp ecosystem. In 2018 IEEE European Symposium on Security and Privacy (EuroS P) (April 2018), pp. 122–136.
[42] SCHIFF, N. R., DOLEV, D., MIZRAHI, T., AND SCHAPIRA, M. A Secure Selection and Filtering Mechanism for the Network Time Protocol Version 4. Internet-Draft draft-ietf-ntp-chronos-01, Internet Engineering Task Force, Sept. 2020. Work in Progress.
[43] SELVI, J. Bypassing http strict transport security. In Black Hat Europe (2014).
[44] SELVI, J. Bypassing http strict transport security. Black Hat Europe, 2014. https://www.blackhat.com/docs/eu-14/materials/eu-14-Selvi-Bypassing-HTTP-Strict-Transport-Security-wp.pdf.
[45] STENN, H. ntp header file. https://github.com/ntp-project/ntp/blob/master-no-authorname/include/ntp.h, 2016.
[46] STENN, H. ntp protocol code. https://github.com/ntp-project/ntp/blob/master-no-authorname/ntpd/ntp proto.c, 2016.

### Appendix

#### A. The NTPv4 Client

The time synchronization process between NTPv4 clients and NTP timeservers involves two main steps:
1. **Poll Process**: The client periodically queries a set of NTP timeservers to collect time samples. For each server, the client obtains four distinct timestamps per query:
   - \( T1 \): Local time at the client when the query is sent.
   - \( T2 \): Local time at the server when the query is received.
   - \( T3 \): Local time at the server when the response is sent.
   - \( T4 \): Local time at the client when the response is received.

   These timestamps are used to compute the offset \(\theta = \frac{1}{2} ((T2 - T1) + (T3 - T4))\), which captures the difference between the local times at the client and the server. The client queries each server multiple times to obtain several offsets.

2. **Computing the Local Time at the Client**: After computing the offsets, the client applies a 5-step algorithm to determine a new time to update its local clock. This process includes:
   - Identifying the offset associated with the lowest network delay for each timeserver.
   - Applying Marzullo’s algorithm [28]–[30] to identify a "majority clique of truechimers," i.e., a large cluster of servers with accurate clocks.
   - Pruning the set of time samples to improve accuracy by removing all but a predetermined number of time samples that are within the smallest distance of each other.
   - Computing a weighted average of the offsets of the remaining time samples.
   - Updating the local time if the computed value is significantly different from the current local time.

#### B. The Chronos NTP Client

The Chronos NTP client [6] is a security-enhanced NTP client that uses a provably secure approximate-agreement algorithm. The time synchronization process in Chronos involves:
1. **Periodic Sampling**: The client periodically obtains clock readings from a subset of servers (e.g., 10-15 servers) out of a large fixed set of servers (ideally, containing hundreds of servers).
2. **Offset Ordering and Trimming**: The offsets with respect to these servers are ordered from lowest to highest, and the bottom and top outliers are removed (choosing \( d = \frac{m}{3} \) is shown to yield good security guarantees).
3. **Time Update**: If the surviving time samples are close to each other and close to the client’s local clock, the local time is updated to the average of these time samples. Otherwise, a new set of servers is resampled. If k consecutive resamplings occur, the client enters "panic mode" and queries all timeservers, again eliminating the top and bottom outliers and averaging over the rest to determine the new local time.

The pseudocode for Chronos' time sampling scheme is provided in Algorithm 2.

```python
Algorithm 2: Pseudocode for Chronos’ Time Sampling Scheme [6]
1: counter := 0
2: while counter < K do
3:     S := sample(m)  # gather time samples from m randomly chosen servers
4:     T := bi-sided-trim(S, d)  # trim d lowest and highest values
5:     if (max(T) - min(T) <= 2ω) and (|avg(T) - tC| < ERR + 2ω) then
6:         return avg(T)  # panic mode
7:     counter++
8: S := sample(n)
9: T := bi-sided-trim(S, n/3)  # trim bottom and top thirds
10: return avg(T)
```

This approach ensures that the client maintains a high level of security and accuracy in time synchronization.