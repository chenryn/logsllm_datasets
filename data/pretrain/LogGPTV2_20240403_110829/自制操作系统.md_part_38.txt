io_out8(PIC0_OCW2, 0x60); /* 把IRQ-00信号接收结束的信息通知给PIC */ 7
timerctl.count++;
if (timerctl.next > timerctl.count) {
return;
} 8
for (i = 0; i timeout > timerctl.count) { 9
break;
}
/* 超时*/
10
timerctl.timers[i]->flags = TIMER_FLAGS_ALLOC;
fifo8_put(timerctl.timers[i]->fifo, timerctl.timers[i]->data);
}
/* 正好有i个定时器超时了。其余的进行移位。 */ 11
timerctl.using -= i;
for (j = 0; j  0) {
timerctl.next = timerctl.timers[0]->timeout;
} else { 12
timerctl.next = 0xffffffff;
}
return;
14
}
这样，即使是在超时的情况下，也不用查找下一个next时刻，或者查找有没有别的定时器超 15
时了，真不错。如果有很多的定时器都处于正在执行的状态，我们会担心定时器因移位而变慢，
这放在以后再改进吧（从13.5节开始讨论）。
16
图灵社区会员 metorm 专享 尊重版权
238 …… 第12天：定时器（1）
■■■■■
由于timerctl中的变量名改变了，所以其他地方也要随之修改。
void init_pit(void)
{
int i;
io_out8(PIT_CTRL, 0x34);
io_out8(PIT_CNT0, 0x9c);
io_out8(PIT_CNT0, 0x2e);
timerctl.count = 0;
timerctl.next = 0xffffffff; /* 因为最初没有正在运行的定时器 */
timerctl.using = 0;
for (i = 0; i timeout = timeout + timerctl.count;
timer->flags = TIMER_FLAGS_USING;
e = io_load_eflags();
io_cli();
/* 搜索注册位置 */
for (i = 0; i timeout >= timer->timeout) {
break;
图灵社区会员 metorm 专享 尊重版权
7 加快中断处理（3）（harib09g） …… 239
}
1
}
/* i号之后全部后移一位 */
for (j = timerctl.using; j > i; j--) {
timerctl.timers[j] = timerctl.timers[j - 1]; 2
}
timerctl.using++;
/* 插入到空位上 */ 3
timerctl.timers[i] = timer;
timerctl.next = timerctl.timers[0]->timeout;
io_store_eflags(e);
return; 4
}
5
这样做看来不错。虽然中断处理程序速度已经提高了，但在设定定时器期间，我们关闭了中
断，这多少有些令人遗憾。不过就算对此不满意，也不要随便更改哦。
6
从某种程度上来讲，这也是无法避免的事。如果在设定时，多下点工夫整理一下，到达中断
时刻时就能轻松一些了。反之，如果在设定时偷点懒，那么到达中断时刻时就要吃点苦头了。总
之，要么提前做好准备，要么临时抱佛脚。究竟哪种做法好呢，要根据情况而定。如果是笔者的 7
话会选择提前准备。也没有什么特殊的理由，只是笔者喜欢这样吧（笑）。
8
■■■■■
现在我们执行“make run”看看吧。希望它能正常运行。会怎么样呢？貌似很顺利，太好了。
9
关于定时器我们还有想要修改的地方。不过大家肯定已经很困了，我们还是明天再继续吧。
再见！
10
11
12
12
14
15
16
图灵社区会员 metorm 专享 尊重版权
第 13 天
定时器（2）
 简化字符串显示（harib10a）
 重新调整FIFO缓冲区（1）（harib10b）
 测试性能（harib10c～charib10f）
 重新调整FIFO缓冲区（2）（harib10g）
 加快中断处理（4）（harib10h）
 使用“哨兵”简化程序（harib10i）
11 简化字符串显示（harib10a）
昨天我们学习了不少提高定时器处理速度的内容，只是还没有学完。但如果新一章一开始就
讲那么难的东西，反而会事倍功半，所以我们还是从简单的地方开始吧。
浏览一下harib09g的bootpack.c，大家会发现它居然有210行之长。这中间多次出现了如下内容：
boxfill8(buf_back, binfo->scrnx, COL8_008484, 0, 16, 15, 31);
putfonts8_asc(buf_back, binfo->scrnx, 0, 16, COL8_FFFFFF, s);
sheet_refresh(sht_back, 0, 16, 16, 32);
这段程序要完成的是：先涂上背景色，再在上面写字符，最后完成刷新。既然这部分重复出
现，我们就把它归纳到一个函数中，这样更方便使用。
void putfonts8_asc_sht(struct SHEET *sht, int x, int y, int c, int b, char *s, int l)
{
boxfill8(sht->buf, sht->bxsize, b, x, y, x + l * 8 - 1, y + 15);
putfonts8_asc(sht->buf, sht->bxsize, x, y, c, s);
sheet_refresh(sht, x, y, x + l * 8, y + 16);
return;
}
图灵社区会员 metorm 专享 尊重版权
2 重新调整FIFO缓冲区（1）（harib10b） …… 241
在此补充说明一下变量的名称。 1
x, y ...... 显示位置的坐标
c ...... 字符颜色（color） 18
b ...... 背景颜色（back color）
s ...... 字符串（string）
3
l ...... 字符串长度（length）
利用上面的函数，刚才的3行内容就可以简写成下面的1行了。
20
putfonts8_asc_sht(sht_back, 0, 16, COL8_FFFFFF, COL8_008484, s, 2);
21
太好了！那我们就赶紧改写bootpack.c吧！
22
■■■■■
如果把修改的内容都列出来，就太长了，意义也不大，所以这次我们省略了。可是一点都不
7
写的话，又有点说不过去，所以简单写个例子吧。
修改前
8
boxfill8(buf_back, binfo->scrnx, COL8_008484, 32, 16, 32 + 15 * 8 - 1, 31);
putfonts8_asc(buf_back, binfo->scrnx, 32, 16, COL8_FFFFFF, s);
sheet_refresh(sht_back, 32, 16, 32 + 15 * 8, 32); 9
修改后 10
putfonts8_asc_sht(sht_back, 32, 16, COL8_FFFFFF, COL8_008484, s, 15);
11
修改后的bootpack.c只有208行，太好了！缩短了2行。
（可不要说“只缩短了2行呀”之类的哦）。运行“make run”确认一下吧。嗯，运行正常！ 12
22 重新调整 FIFO 缓冲区（1）（harib10b） 13
把目光转向HariMain程序，我们能发现还有其他可以简化的内容。
13
改写前的HariMain节选
if (fifo8_status(&keyfifo) + fifo8_status(&mousefifo) + fifo8_status(&timerfifo) 15
+ fifo8_status(&timerfifo2) + fifo8_status(&timerfifo3) == 0) {
io_sti();
} else { 16
图灵社区会员 metorm 专享 尊重版权
242 …… 第13天：定时器（2）
这都是什么呀，整这么长一个if语句？使用3个定时器的情况下，就需要3个FIFO缓冲区吗?
要是100个定时器难道就需要创建100个FIFO缓冲区吗？嗯……
把定时器用的多个FIFO缓冲区都集中成1个不是更好吗？可能会有人担心：“如果集中成了1
个，会不会分辨不出是哪个定时器超时了？”其实只要在超时的情况下，我们往FIFO内写入不同
的数据，就可以正常地分辨出是哪个定时器超时了。
本次的HariMain节选
fifo8_init(&timerfifo, 8, timerbuf);
timer = timer_alloc();
timer_init(timer, &timerfifo, 10);
timer_settime(timer, 1000);
timer2 = timer_alloc();
timer_init(timer2, &timerfifo, 3);
timer_settime(timer2, 300);
timer3 = timer_alloc();
timer_init(timer3, &timerfifo, 1);
timer_settime(timer3, 50);
我们对if语句也进行相应的修改吧。
本次的HariMain节选
for (;;) {
sprintf(s, "%010d", timerctl.count);
putfonts8_asc_sht(sht_win, 40, 28, COL8_000000, COL8_C6C6C6, s, 10);
io_cli();
if (fifo8_status(&keyfifo) + fifo8_status(&mousefifo) + fifo8_status(&timerfifo) == 0) {
io_sti();
} else {
if (fifo8_status(&keyfifo) != 0) {
（中略）
} else if (fifo8_status(&mousefifo) != 0) {
（中略）
} else if (fifo8_status(&timerfifo) != 0) {
i = fifo8_get(&timerfifo); /*超时的是哪个呢？ */
io_sti();
if (i == 10) {
putfonts8_asc_sht(sht_back, 0, 64, COL8_FFFFFF, COL8_008484, "10[sec]", 7);
} else if (i == 3) {
putfonts8_asc_sht(sht_back, 0, 80, COL8_FFFFFF, COL8_008484, "3[sec]", 6);
} else {
/* 0还是1 */
if (i != 0) {
timer_init(timer3, &timerfifo, 0); /*下面是设定为0 */
boxfill8(buf_back, binfo->scrnx, COL8_FFFFFF, 8, 96, 15, 111);
} else {
timer_init(timer3, &timerfifo, 1); /*下面是设定为1*/
boxfill8(buf_back, binfo->scrnx, COL8_008484, 8, 96, 15, 111);
}
图灵社区会员 metorm 专享 尊重版权
3 测试性能（harib10c～harib10f） …… 243
timer_settime(timer3, 50);
1
sheet_refresh(sht_back, 8, 96, 16, 112);
}
}
} 18
}
哦，程序略有精简。bootpack.c变成204行，精简了4行。我们“make run”一下，当然是正常 3
运行了。
20
33 测试性能（harib10c～harib10f）
21
从昨天开始，我们就在不断地对定时器进行改善，而且以后还要继续改善，但我们不能总是
自我满足呀，我们要亲自感受一下到底改善到什么程度了。所以我们要测试性能。
22
我们之所以如此专注于定时器的改良，理由很简单，是因为在今后的开发中会经常使用定时
器。经常使用的东西当然要做好。同理，我们也努力地改进了图层控制程序。
7
测试性能的方法很简单：先对HariMain略加修改，恢复变量count，然后完全不显示计数，全
力执行“count++；”语句。当到了10秒后超时的时候，再显示这个count值。程序所做的只有这么
8
多。可是需要注意，必须在起动3秒后把count复位为0一次。为什么要这样做呢？我们在后面的
专栏里说明。
9