network 
Eve 
a)    Eve  sends  VoIP  requests  to 
occupy/release 
protocol 
buffer slots 
the 
Targeted phone 
  has a fixed-size 
protocol buffer to 
store protocol 
negotiation contexts  
Busy 
 Not busy 
Busy 
 Not busy 
 Alice 
 Bob 
Eve 
Close call 
setup time 
Close call 
termination 
time 
Time 
Close 
timing  of  call  setup 
and/or  call 
termination  => 
Alice  and  Bob  have  a  VoIP 
session 
Step 1: Busy-status detection 
Figure 3. Attack steps 
Step 2: Call correlation 
Figure 4. SIP call setup and termination 
Figure 5. A non-INVITE transaction at the server side  
SIP phones, which do not provide implementation documentation, 
a  fact  that  provides  further  testimony  for  the  practicality  of  this 
attack.  We  propose  countermeasures  against  this  type  of  attack, 
including  protocol-buffer  manipulation  to  reduce  call-detection 
probability, attack-discovery mechanisms, and firewalls. 
2.  THE ATTACK 
In  this  section,  we  provide  an  overview  of  SIP  with  an 
emphasis  on  the  mechanisms  related  to  SIP  resource  contention 
side-channels.  Then  we  show  how  busy-status  detection  is 
enabled  by  six  side-channels  that  we  found  by  testing  closed-
source commercial VoIP phones. (The reader who is familiar with 
the IETF SIP specification can skip Section 2.1 below.) 
2.1  Call Setup and Termination Overview 
SIP  is  an  HTTP-like  application-layer  protocol  designed  for 
VoIP  signaling  and  other  applications  that  require  devices  to 
setup/terminate sessions to exchange information [10]. SIP uses a 
transaction  as 
its  basic  message  exchange  component.  A 
is  composed  of  a  request  message,  optional 
transaction 
provisional  response  messages,  and  a  final  response  message.  In 
this  paper  we  use 
terms  ‘transaction’  and  ‘request’ 
the 
interchangeably  in  the  case  where  the  request  represents  the 
transaction  itself.  The  communication  initiated  by  the  caller  to  a 
callee’s  phone  can  be relayed  by  one or  more  SIP proxy  servers. 
Relaying, which is typically used for billing, redirection and many 
other telephony functions, generally does not affect our attacks.  
 In  Figure  4,  we  illustrate  a  call  setup  (Transaction  1)  and 
termination  (Transaction  2)  in  SIP.  In  Transaction  1,  the  caller 
first  sends  an  INVITE  request  to  the  callee.  A  SIP  request 
message  includes  three  parts.  The  first  part  contains  the  method 
name,  such  as  INVITE,  to  describe  the  main  purpose  of  this 
request.  The  second  part  contains  headers,  which  specify 
attributes (e.g. To: sip:PI:EMAIL). The third, and optional, part 
is the payload, which usually includes media parameters encoded 
by  the  Session  Description  Protocol  (SDP).  When  the  INVITE 
request  is  received,  the  callee’s  phone  rings,  and  immediately 
sends  a  provisional  response,  such  as  “180  RINGING,”  to  the 
caller.  (SIP  responses  are  identified  by  a  3-digit  number.) 
Responses  with  a  hundreds  digit  of  value  of  1  are  called  the 
“provisional  responses”  (denoted  1xx  in  SIP  specification)  and 
provide  status  information  to  the  caller  in  the  middle  of  the 
transaction. In Transaction 1, the callee also decides to answer this 
call  by  picking  up  the  handset,  so  the  callee’s  phone  sends  back 
“200 OK” in response to the original INVITE request. “200 OK” 
is among the “final responses”, which are specified by codes with 
digits  that  do  not  begin  with  a  1  (i.e.,  200-699  in  SIP 
specification). 
After 
the  caller  sends  an  ACK  request  (as 
the  final 
acknowledgement),  the  caller  and  the  callee  will  have  already 
reached an agreement on the media parameters  for establishing a 
voice  channel,  using  a  streaming  protocol  such  as  RTP.  
Eventually  one  of  the  two  parties  (in  this  case,  the  callee)  will 
terminate the call by initiating Transaction 2 with a BYE request. 
The  other  party  replies  using  a  “200  OK”,  which  terminates  the 
voice channel. 
SIP defines the roles of server and client. When a SIP protocol 
side  receives  SIP  requests  and  sends  SIP  responses,  it  acts  as  a 
server;  when  it  sends  SIP  requests  and  receives  SIP  responses,  it 
acts  as  a  client.  Four  state  machines  are  defined  to  describe  the 
general behavior of INVITE and non-INVITE transactions for SIP 
clients and server roles.  Method-specific behavior is based on the 
four state machines. In Figure 5, we illustrate one of the four state 
machines for a non-INVITE transaction on the server side.  When 
the  SIP  phone  (a  Transaction  User)  receives  a  non-INVITE 
transaction,  such  as  BYE or  OPTIONS,  it  enters  the  Trying  state 
and  creates  a  transaction  instance.  After  sending  the  provisional 
responses  (1xx),  it  enters  the  Proceeding  state.  If  the  SIP  phone 
(i.e., user) decides to send out a final response (200-699), it enters 
the Completed state. When Timer J signals a time-limit exceeded 
event or there is a transport layer error, the state machine ends up 
in  the  Terminated  state  and  the  transaction  expires.  By  default, 
Timer  J  is  set  to  32  seconds  for  UDP  and  0  seconds  for 
TCP/SCTP.4 Timer J also helps SIP to handle packets lost in UDP 
via retransmission.  
2.2  Busy-status Detection 
Side-Channel.  Like  other  stateful  protocols,  SIP  needs  a 
protocol  buffer  for  storing  the  protocol  negotiation  context  for 
each  transaction.  In  some  SIP  phones,  especially  for  those 
implemented  through  dedicated  hardware  (i.e.,  hardware  SIP 
phones),  the  protocol  buffer  is  implemented  as  a  fixed-size  array 
for  two  reasons.  First,  SIP  phones  generally  do  not  need  a  large 
protocol  buffer  since  they  are  not  expected  to  receive  dozens  of 
calls per second. Second, if the protocol buffer is a simple fixed-
size  array,  the  SIP  phone  can  recover  from  buffer  flooding 
automatically, after the flooding packets are gone.  In contrast, if 
the  protocol  buffer  is  allocated  on  demand,  recovery  is  more 
complex,  as  the  SIP  phone  may  enter  unrecoverable  states  (e.g., 
kernel  panic)  due 
to  unreleased,  used-up  memory.  The 
disadvantage  is  that  this  fixed-size  array  enables  an  adversary  to 
count the number of available slots in the protocol buffer and tell 
whether  a  VoIP  session  exists;  i.e.,  the  adversary  is  able  to  tell 
whether a buffer slot is used and the phone is busy.  The adversary 
exploits this side-channel to detect calls surreptitiously.  
Detection Algorithm. Let N be the size of the protocol buffer. 
To count the number of available buffer slots, the adversary sends 
N+1 SIP request (i.e., probes) to the targeted phone, sending one 
every  d  time  units.  d  is  chosen  to  be  small  enough  so  that  no 
request  could  expire  and  free  up  a  slot  before  the  last  request  is 
4 SIP standards require both UDP and TCP to be implemented, but 
UDP is generally more popular than the TCP because TCP has a 
longer call-setup time due to a three-way hand-shake [5]. 
(a) 
(a) 
(b) 
(b) 
Figure 6. Possible target-phone responses when the protocol 
buffer is full 
received. In some SIP implementations, when the buffer becomes 
full,  the  phone  ignores  the  next  request,  whereas  in  others  it 
returns  an  error. Suppose  the  protocol  buffer  size  has  h  available 
slots  before  the  adversary  begins  sending  requests.  If  the  phone 
ignores  the  request  arriving  after  the  protocol  buffer  is  full,  the 
adversary  will not receive the  response number  h+1, as shown in 
Figure 6 (a). In the other case, the adversary will receive an error 
response for the h+1st request, such as “486 Busy Here,” as shown 
in Figure 6 (b). In either case, the adversary discovers the value of 
h.  
Detection Side Effects. Note that if the SIP phone, or proxy in 
the transmission path, supports retransmission, the adversary will 
get  a  delayed  positive  response  to  the  h+1st  request  after  the 
protocol buffer slot becomes free.  However,  this delay is several 
seconds or less, and cannot affect busy-status detection. 
Another  side  effect  arises  because  whenever  the  protocol 
buffer  becomes  full,  the  phone  is  disabled  for  a  period  of  time, 
which we call the disabled period. For example, our experiments 
with  two  phones  show  that  the  disabled  period  is  close  to  30 
seconds  (with  parameters  d=80ms,  N=6  for  7940G,  N=32  for 
PAP2).  The  details  of  this  calculation  are  shown  in  Appendix  II.   
During the disabled period, the targeted phone does not answer a 
caller’s  setup  request.  Only  after  the  disabled  period  ends  is  the 
targeted  phone  able  to  receive  a  call  setup  request  issued  by  the 
retransmission  mechanism  of  the  caller  phone  or  proxy.  This 
disabled  period  causes  the  target-phone  user  to  perceive  a  small 
ring  delay.  However,  as  described  later,  it  is  possible  to  shorten 
the disabled period in some phones such that the target-phone user 
will experience almost no ring delay.  
Target-Undetectable  Probe  Requests.  Since  we  used  closed-
source  hardware  phones,  we  had  to  find  SIP  methods  and 
parameters that could be used as probes for busy-status detection, 
experimentally.    Suitable  SIP  requests  (i.e.,  probes)  must  fill  the 
protocol  buffer  and  yet  must  not  alert  the  targeted  user  (e.g.,  by 
phone  rings)  that  an  attack  is  in progress.  We  experimented  with 
all  SIP  methods  on  the  closed-source  phones  and  found  that 
OPTIONS,  INVITE,  NOTIFY,  and  UPDATE  methods  are 
suitable  for  implementing  adversary  probes.  In  describing  the 
suitable SIP requests, we use the naming convention “METHOD-
type,” such as “INVITE-require” or “OPTIONS-ordinary” below.  
These SIP requests are discussed below. Examples of actual SIP-
request messages are given in Appendix I. 
1)  INVITE-require  and  INVITE-SDP  requests.  As  described 
in Section 2.1, the INVITE transaction performs the call setup. By 
Figure 7. Responses of 7940G under INVITE-require attack 
Figure 8. Responses of PAP2 under INVITE-require attack 
(as a callee) 
(as a callee) 
default,  upon  receiving  an  ordinary  INVITE  request,  the  SIP 
phone  alerts  (rings)  the  user.  If  this  were  always  the  case,  the 
INVITE  transaction  could  not  be  used  to  perform  busy-status 
detection. However, an INVITE request that is invalid for making 
a  call  will  not  ring,  and  hence  could  be  used  for  busy-status 
detection.    We  found  two  types  of  INVITE  requests  with  this 
capacity,  namely INVITE-require and INVITE-SDP.  
Not Busy 
Not Busy 
We  use  an  INVITE-require  request  with  a  Require  header 
whose  functionality  is  not  supported  by  the  callee  [10].  For 
example,  the  header  “Require:  100rel”  in  an  INVITE  request 
requires  the  callee  to  support  an  extension  named  100rel.  If  the 
callee does not support the requested function, the callee responds 
immediately  without  alerting  the  user,  but  a  protocol-buffer  slot 
still  remains  allocated  in  the  callee’s  phone.  Hence,  an  INVITE 
request  with  a  header  “Require:xx”  is  suitable  for  busy-status 
detection.  Similarly,  the  INVITE-SDP  request  can  also  attach  an 
invalid  SDP  message 
(e.g.,  an 
incomplete/invalid IP address in SDP). The INVITE with SDP is 
a  commonly  used  request  since  a  call  setup  needs  to  exchange 
media  parameters  through  several  SDP  messages  attached  in  the 
call-setup messages [11].  
INVITE 
request 
in 
the 
Disabled-Period  Shortening.  For  busy-status  detection  using 
the INVITE method, there is a way to shorten the disabled period 
dramatically; i.e., to less than 2 seconds. To do this we use ACK 
requests, which terminate the INVITE transactions. Call setup is a 
three-way  handshake,  including  an  INVITE  request  (caller  to 
callee),  INVITE  response  (callee  to  caller),  and  ACK  request 
(caller to callee), as shown in Figure 4. Since an INVITE request 
occupies a protocol buffer slot, an ACK request would release that 
buffer  slot.  Hence,  as  soon  as  the  adversary  receives  all  INVITE 
responses  from  the  callee,  it  can  send  the  ACK  requests  to  force 
the freeing of the occupied protocol-buffer slots.  
2) OPTIONS-ordinary request. An ordinary (no special header 
needed) OPTIONS request can also serve as busy-status detection 
probe.  An  OPTIONS  request  is  used  to  query  the  protocol 
capability  of  a  SIP device,  and  can  be  used  as  a  trace  route  tool. 
The adversary sends the OPTIONS requests to the phone and they 
will occupy the protocol buffer slots. 
3)  NOTIFY-check-sync  and  NOTIFY-refer  requests.  SIP 
provides an asynchronous event-notification scheme for signaling 
events  (e.g.  voice  mail  is  available)  [12].  An  event  can  be 
subscribed  to  in  advance  and  then  will  be  delivered  to  a  SIP 
phone. (The Internet’s IANA organization maintains the database 
Busy 
Figure 9. Responses of BT-100 under INVITE-SDP attack 
(as a caller) 