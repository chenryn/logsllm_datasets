原文链接：[https://medium.com/@DanielC7/remote-code-execution-gaining-domain-admin-privileges-due-to-a-typo-dbf8773df767](https://medium.com/DanielC7/remote-code-execution-gaining-domain-admin-privileges-due-to-a-typo-dbf8773df767)
* * *
首先，很抱歉这次我做了回“标题党”。好在我已经克制住不去做个“钓鱼网站”来吸引你了。:)
不久前，我以红队的身份找到了一个RCE，该漏洞可以让我们快速获取客户内网的高访问权限。这事听上去平淡无奇，有趣的是这个漏洞源自两个字符错字，官方声明在[这里](https://support.ca.com/us/product-content/recommended-reading/security-notices/ca20180614-01--security-notice-for-ca-privileged-access-manager.html)。
**注意：** _我知道这篇博客加点截图会更好，但我不敢冒泄露客户信息的风险。_
## 暴力破解
在做过一些爆破后，我找到了一个属于目标组织的子域名，它自豪地响应道“Powered by Xceedium Xsuite”。谷歌一番后，我在exploit-db上偶然发现了一篇包含几个Xsuite漏洞的文章，其中有未验证命令注入、反射型XSS、任意文件读取和本地权限提升。很简单，不是吗？
## 任意文件读取
遗憾的是，由于目标做了配置。命令注入漏洞不起作用，权限提升需要事先登入设备，并且我被要求尽可能避免和用户交互（因此XSS也不行）。我们只剩下任意文件读取漏洞了：
    /opm/read_sessionlog.php?logFile=....//....//....//etc/passwd
当然，可以由外网访问到的只有80和443端口。尽管能够从`/etc/passwd`文件中读到各种哈希值，但它们对我来说毫无用处：
    sshtel:ssC/xRTT:300:99:sshtel:/tmp:/usr/bin/telnet
    sftpftp:$1$7vs1J:108:108:/home/sftpftp
此时，我想最好的方法是找到主机的`document_root`并下载源代码。然后，我就能审计代码来找到Xceedium
Xsuite的其他漏洞。在阅读了大量Apache配置文件后，我找到了`document_root`：
    /var/www/htdocs/uag/web/
目前为止，我们只知道两个页面的位置：
    /var/www/htdocs/uag/web/opm/read_sessionlog.php
    /var/www/htdocs/uag/web/login.php
使用任意文件读取漏洞，我下载了这两个文件的源代码。我重读了代码，来寻找它们对其他PHP文件或配置文件的引用，后来又下载了被引用文件。虽然这个过程可以用自动化脚本，但在我决定审计代码那一刻起，我就决定手动下载源码了（这样可以减少向目标主机发送请求的数量）。
我用了一天的时间手动下载和审计php文件。我感觉对应用程序的工作流程已有了足够的了解，并且找到了一些bug或者叫有趣的功能。除了之前所述的RCE外，还发现了其他漏洞，例如新的任意文件读取和各种SQL注入问题。因为我已经可以读取本地文件并且目标似乎没有配置数据库，所以这些新洞也没什么用。此时我唯一感兴趣的就是RCE。
## 代码执行之路
我要说的第一个有趣的功能是`linkDB()`，它逐行读取`/var/uag/config/failover.cfg`的内容并将其传递给`eval()`函数。这意味着如果我们找到将PHP代码写入`failover.cfg`的方法，我们就能调用`linkDB()`函数来在主机上执行远程代码。但目前我无法控制`failover.cfg`的内容。
    /var/www/htdocs/uag/functions/DB.php
    function linkDB($db, $dbtype='', $action = "die") {
        global $dbchoices, $sync_on, $members, $shared_key;
        if(!$dbchoices){
            $dbchoices = array("mysql", "", "");
        }
        //reads file into array & saves to $synccfg
        $synccfg = file("/var/uag/config/failover.cfg");
        //iterates through contents of array
        foreach ($synccfg as $line) {
            $line = trim($line);
            $keyval = explode("=", $line);
            //saves contents to $cmd variable
            $cmd ="\$param_".$keyval[0]."=\"".$keyval[1]."\";";
            //evaluates the contents of the $cmd variable
            eval($cmd);                     
        }
    …
    }
过了一会儿，我找到了生成`/var/uag/config/failover.cfg`的函数（这段代码稍作修改，已略微掉多行字符串解析语句！）。
    /var/www/htdocs/uag/functions/activeActiveCmd.php
    function putConfigs($post) {
        …
        $file = "/var/uag/config/failover.cfg";
        $post = unserialize(base64_decode($post)); <-- 忽略这句 ;)
        …
        $err = saveconfig($file, $post);
        …
    }
总结一下：现在知道`failover.cfg`的内容会被传递给`eval()`，这可能会导致代码执行。`putConfigs()`函数接受一个参数并将它传递给`base64_decode()`，其结果又被传递给`unserialize()`（再一次，请假装你没看到这个！）然后将它保存到`failover.cfg`。现在，我们来看看`putConfigs()`中使用的`$post`变量来自哪里，以及是否可被利用。
    /var/www/htdocs/uag/functions/activeActiveCmd.php
    function activeActiveCmdExec($get) {
    …
    // process the requested command
    switch ($get["cmdtype"]) {
    …
        case "CHECKLIST":
            confirmCONF($get);
            break;
        case "PUTCONFS" :
            putConfigs($get["post"]);
            break;
    …
    }
因此传递给`putConfigs()`的`$get`参数也是传递给`activeActiveCmdExec()`函数的参数。
    /var/www/htdocs/uag/functions/ajax_cmd.php
    /var/www/htdocs/uag/functions/ajax_cmd.php
    if ($_GET["cmd"] == "ACTACT") {
        if (!isset($_GET['post'])) {
            $matches = array();
            preg_match('/.*\&post\=(.*)\&?$/', $_SERVER['REQUEST_URI'], $matches);
            $_GET['post'] = $matches[1];
        }
        activeActiveCmdExec($_GET);
    }
所以`activeActiveCmdExec()` 直接采用用户的输入。也就是说我们可以控制`activeActiveCmdExec()`的输入,
当它依次传入`putConfigs()`、`base64_decode()`、`unserialize()`后，最终存储在
`/var/uag/config/failover.cfg`中。 现在我们可以构造一个序列化的base64编码过的请求，它会被保存入
`failover.cfg`文件,
然后我们调用`linkDB()`函数，它会包含我们的恶意代码并传给`eval()`执行，这样就得到了RCE......这就是我的思路。
如果我们直接利用，它就会覆盖一个配置文件，可能产生一个错误或者破坏设备，这会惹恼我的客户。即使没有弄坏设备，我们也只有一次写入配置文件的机会。为了谨慎起见，我提取了相关的代码段并在本地测试exp。几次尝试后，我收到了“BAD
SHARED KEY”消息。好吧，我在`activeActiveCmdExec()`函数的开头漏看了一些东西：
    /var/www/htdocs/uag/functions/activeActiveCmd.php
    function activeActiveCmdExec($get) {
        // check provided shared key
        $logres = checkSharedKey($get["shared_key"]);
        if (!$logres) {
            echo "BAD SHARED KEY";
            exit(0);
        }
    …
    }
函数检验了通过`$get`变量传递的共享秘钥是否正确。如果没有合法的密钥，我们就无法走到将代码写入`failover.cfg`文件这一步，也就无法调用`linkDB()`函数，最终无法在远程主机上执行代码......
此刻，我只好整理思路并寻找新的方法（利用传递给`unserialize()`的未经处理的用户输入这条线索？）。好在由于我能读取本地文件，而共享密钥可能被硬编码在了源码中，也可能保存在可读的配置文件中。找到秘钥就能在请求中包含它，并通过检查。那就看看`checkSharedKey()`函数，找找保存共享密钥的位置。
    /var/www/htdocs/uag/functions/activeActiveCmd.php
    function checkSharedKey($shared_key) {
        if (strlen($shared_key) != 32) {              //1
            return false;
        }
        if (trim($shared_key) == "") {                //2
            return flase;
        }
    if ($f = file("/var/uag/config/failover.cfg")) {
        foreach ($f as $row) {                        //3