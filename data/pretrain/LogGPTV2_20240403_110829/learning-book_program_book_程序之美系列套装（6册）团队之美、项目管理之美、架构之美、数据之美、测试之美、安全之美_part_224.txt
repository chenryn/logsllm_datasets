http://archive.eiffel.com/doc/oosc/找到。
Meyer,Bertrand.2004."The power of abstraction,reuse and simplicity:
An object-oriented library for event-driven design."From Object-
Orientation to Formal Methods:Essays in Memory of Ole-Johan
Dahl,eds.Olaf Owe,Stein Krogdahl,Tom Lyche,Lecture Notes in Computer
Science 2635，pp.236-271.New York,NY:Springer-Verlag.可以在
http://se.ethz.ch/~meyer/publications/lncs/events.pdf找到。
Meyer,Bertrand. 2008.Touch of Class: An Introduction to Programming
Wel1.New York,NY:Springer-Verlag.见http://touch.ethz.ch.
Peyton-Jones,Simon,Jean-MarcEber,and Julian Seward
2000."Composing contracts: An adventure in financial
engineering."Functional pearl,in ACM SIGPLAN International Conference
on Functional Programming（ICFP'oo），
Montreal,Canada,September00.ACM Press,pp.280-292.可以在
http://citeseer.ist.psu.edu/jones00composing.html找到。Peyton-
Jones,Simon,and Philip Wadler.1993."Imperative functional
programming."Twentieth Annual ACM SIGPLAN-SIGACT Symposium
on Principles of Programming Languages.Charleston,South
Carolina,pp.71-84.可以在
http://citeseer.ist.psu.edu/peytonjones93imperative.html找到。
Steingold,Sam.Online at http:/www.podval.org/ sds/ocaml-sucks.html.
Sun Microsystems.1997."About Microsoft's 'Delegates.""White paper by
the Java Language Team at JavaSoft.可以在
http://java.sun.com/docs/white/delegates.html找到。
Wadler,Philip.1995."Monads for functional programming."Advanced
Functional Programming,Lecture Notes in Computer Science
925.Eds.J.Jeuring and E.Meijer.New York,NY:Springer-Verlag.可以在
http:/homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdff找
到。
Walden,Kim,and Jean-Marc Nerson.1994.Seamless Object-Oriented
Software Architecture.Upper Saddle River,NJ:Prentice Hall.可以在
http://www.bon-method.com/index_normal.htm找到。
1263
---
## Page 1265
第14章重读经典PanagiotisLouridas
似乎在所有的科学领域中，都有一些著作和人名是不能不提的。目
前还活看的冠军可能是NormChomsky。根据1992年4月在MfTTech
Talk上的一篇文章，Chomsky是之前20年中出版的著作中引用最多的
人名。艺术和人文学科引用索引的前10名是Marx、Lenin、
Shakespeare、Aristotle、the Bible、Plato、Freud、Chomsky、Hegel和
Cicer0。在科学引用索引中，他在1972—1992年间，被引用了1619
次。
在软件工程方面，勋章可能要颁给《设计模式：可复用面向对象软
件的基础》（即"GangofFour"书[Gamma等1994]，[llL）。在Google
上精确查询该书的书名得到了173000条结果（在2008年春天）。如
果我们把注意力放在更为学术化的方面，查询ACMDigitalLibrary
得到了1527条结果。设计模式社区是过去20年中软件工程领域最有
活力的社区之一。
本章再次增加了这两项的引用计数。
人们可以把设计模式的普及归功于《设计模式》一书。它不仅可以
看作是设计模式运动的起始点，也可以看作是返回点：与设计模式
相关的内容非常多，但关于这个主题的大多数讨论都是围绕这本书
中列出的设计模式。我们并不是排除其他模式，但这本书中提到的
23个模式肯定可以称之为经典。
但是这本书中迷人的部分不是那些设计模式本身，而是第1章简
介，它提供了许多设计模式背后的理由，也提供了将它们串起来的
通用线索。从中我们可以发现可复用面向对象设计的原则。其中第
二个原则就是更倾向使用对象组合（“包含”关系），而不是类继承
（“是一种"关系）。（第一个原则是“针对接口编程，而不是针对实
现编程”，对于过去40年中看到过有关封装的建议的人来说，这一
点应该很清楚了。）
对于那些没有跟随面向对象编程在20世纪八九十年代来到中心舞台
的程序员来说，这条规则可能似乎没有那么重要。但如果你还能回
忆起那个年代，在面向对象编程中的一个决定性概念就是继承。以
Bjarne Stroustrup在《TheC++ProgrammingLanguage》（1985）中的
描述为例。我们发现有这样的内容：
1264
---
## Page 1266
C++是一种通用目的的编程语言，侧重于系统编程。它：
是更好的C语言。
·支持数据抽象。
支持面向对象编程。
支持泛型编程。
如果我们想弄清楚“支持面向对象编程”究竞指的是什么，我们发
现：
编程方式是：
确定你想要的那些类。
为每个类提供一组完整的操作。
通过继承来明确那些共性。
现在对比一下另一本经典著作，JoshuaBloch的《EffectiveJava》
（2008）。我们发现至少有三点劝诚是针对继承的：
倾向于组合而非继承。
设计继承并为之编写文档，否则不要用继承。
倾向于接口而非抽象类。
那么继承应该避免使用吗？这在学术上没有定论。在Microsof
Windows上编程可能会让人非常沮丧，即使是利用很舒服的书
（CharlesPetzold的《ProgrammingWindows》[1999]）中介绍的方
法。当第一批Windows编程框架推出时（源自Borland和
Microsof），它们就像是一股清新的空气。在那之前，创建一个简
单的窗口都极其复杂：程序员们满怀兴趣地得知，要在Microsoft
Windows中编程，他们必须面对所谓的window类，而这与C++类没
有任何关系。在新的框架中，你只需创建一个子类，继承框架提供
的类，事情就完成了。我们很高兴能够突然摆脱所有的苦工（或者
说几乎所有的苦工），也很高兴能够突然发现面向对象的这样一种
简洁应用方式。
1265
---
## Page 1267
在MicrosoftWindows上编程只是一个例子，对面向对象和继承的热
情无所不在。很奇怪，我们现在知道我们一直搞错了，但也许没有
错得那么离谱。继承在本质上可能并不坏。像所有技术一样，它可
以用得好，也可以用得不好，不好的继承已经在许多地方都有讨论
了（《设计模式》是一个不错的开始）。这里我们将介绍一个漂亮
软件系统的例子，它以继承作为基础。这个系统就是Smalltalk。
Smalltalk是一种纯面向对象语言，尽管它从未成为主流语言，但却
以多种方式影响了编程语言的发展。也许另一种对后来的计算机语
言产生了这么多影响的编程语言就是Algol60，它的影响也超过了它
的实际使用。
这不是对Smalltalk编程语言及其环境的介绍（这两方面实际上是在
一起的），而是介绍其中基本的架构思想，以及这些思想如何为我
们的编程工作提供指导。借用设计心理学的一个术语，这里讨论的
是基本设计原则和它们提供给程序员的“可操作暗示”
（affordance）。Donald NormanE《The Psychology of Everyday
Things》（1988）中透彻地（并且有趣地）解释了可操作暗示的概
念。简而言之，一个对象的出现允许我们（有时甚至是诱使我们）
做某些事情。悬挂的绳子诱使我们走过去拉一下，水平的把手诱使
我们推一下，门把手诱使我们走过去旋转它。同样，编程语言表现
出来的样子诱使程序员利用它做某些事情。打造得很漂亮的语言拥
有美丽的架构，这会在我们用它编写的程序中体现出来。
这种思想的另一个强烈表达方式是赛故二氏假说（shapir-whorf
Hypothesis,SWH），它声称语言决定思想。这一综合症已经让语言
学家和编程语言设计者们兴奋了好些年了。《TheC++Programming
Language》第1版的前言就是从SWH开始的，K.E.Iversion的1980年
图灵奖演讲谈的就是表示法对表达思想的重要性。SWH是有争议
的，毕竞，每个人都曾经遇到过找不到一些词来表达自己的思想的
情况，所以我们能思考的超过了我们能说的。但是在计算机代码
中，语言和程序的关系是清楚的。我们知道一些计算机语言是图灵
完备的，但我们也知道，对于某些事情来说，一些语言比另一些语
言更合适。但除了影响程序的架构之外，语言架构的本身也是很有
趣的。我们来看看Smalltalk自身的架构，即它的实现选择、设计概
念和模式。今天，我们会在最近的编程语言中看到其中的多个方
面，那些现在不再见到的方面则让我们能够停下来，反思一下它们
消失的原因。我们在这里并不假定你已具备Smalltalk的相关知识，
但到这章结束时，我们就已经介绍Smalltalk的主要部分。我们会突
1266
---
## Page 1268
出设计原则，并通过小代码片段来展现这些原则。强大的设计原则
有一个好处，就是要学的东西不多，而当你一旦掌握了这些原则，
整个基础架构就从这些原则中自然生成了。我们要参考的Smalltalk
系统是Squeak（http://www.squeak.org），它是一个开放源代码的实
现。某些代码示例在第一次阅读时可能难以理解，因为我们会引入
一些非常规的概念，但它们会在随后的示例中得到说明，所以最好
是努力读到最后，然后再回来读那些不太能理解的部分。同时，我
们没有低估读者的智商。研究Smalltalk将发现一些特征，这些特征
在你喜欢的语言里不一定有。这应该不是一个问题。在软件并发中
有一条经过时间检验的准则，即你要使用的某一项特征在你所使用
的语言中不一定直接支持，经过一些努力，你会在你所选择的语言
中找到一种优雅的替代方式。根据SteveMcConnell的《Code
Complete（2004）》，这被称为"编程为一种语言"：
理解“用一种语言编程”与“编程为一种语言”之间的差异是很重要
的......绝大多数重要的编程原则不取决于具体的语言，而是取决于
你使用它们的方式。如果你的语言缺少你想使用的结构，或者易于
出现其他类型的问题，请试着进行补偿。发明你自己的编码规范、
标准、类库和其他扩展。
实际上，与SWH相对的是对程序员创造性（或执着）的推崇。笔者
记得，当面向对象在20世纪90年代成为一种必需品时，本地技术书
店到了一本书，主题是面向对象的汇编语言。最近，RandallHide的
“HighLevelAssembler（HLA）"将汇编与类、继承和其他技术结合
在了一起。
我们对待一门编程语言的方法就像我们对待一本经典书籍一样。在
我们急切开始之前，让我们先来看看ItaloCalvino的文章"WhyRead
theClassics”（1986）中提出的一些定义：
经典作品是那些你经常听人家说“我正在重读....."而不是“我正在
读...."的书。
经典作品是这样一些书，它们对读过并喜爱它们的人构成一种宝贵
的经验；但是对那些保留这个机会，等到享受它们的最佳状态来临
时才阅读它们的人，它们也仍然是一种丰富的经验。经典作品是一
些产生某种特殊影响的书，它们要么自己以遗忘的方式给我们的想
象力打下印记，要么养装成个人或集体的无意识隐藏在深层记忆
中。
1267
---
## Page 1269
一部经典作品是一本每次重读都好像初读那样带来发现的书。
一部经典作品是一本从不会耗尽它要向读者说的一切东西的书。
经典作品是这样一些书，它们带着以前的解释的特殊气氛走向我
们，背后拖着它们经过文化或多种文化（或只是多种语言和风俗习
惯）时留下的足迹。
部经典作品中发现我们已知道或总以为我们已知道的东西，却没有
料到这个作者早就说了，或那个想法与那部经典作品有一种特殊联
系。这种发现同时也是非常令人满足的意外，例如当我们弄清楚一
个想法的来源，或它与某个文本的联系，或谁先说了，我们总会有
这种感觉。
经典作品是这样一些书，我们越是道听途说，以为我们懂了，当我