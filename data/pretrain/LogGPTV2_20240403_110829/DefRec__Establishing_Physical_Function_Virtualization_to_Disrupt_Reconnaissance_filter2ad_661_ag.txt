pi =
1 − i · p0
have Qi+1 = pi+1 ×(cid:81)i
Qi+1 = pi+1 × i(cid:89)
(1 − pj)
j=0
× pi × (1 − pi) × i−1(cid:89)
× (1 − pi) × pi × i−1(cid:89)
j=0
(1 − pj)
(1 − pj)
× (1 − pi) × Qi
j=0
(7)
=
=
=
pi+1
pi
pi+1
pi
pi+1
pi
Based on the inductive step, we can have the following
derivation by making Qi+1 = p0:
pi+1
p0
· (1 −
p0
1 − i · p0
) · p0 ⇒
p0 = Qi+1 =
pi+1 =
p0
(1 − i · p0)
1 − (i + 1) · p0
p0
Consequently, if pk =
Q0 = Q1 = ··· = Qδ.
1 − k · p0
(8)
, we always have p0 =
In Section IV, we propose a probabilistic dropping protocol
to reduce the effectiveness of adversaries’ probing activities,
making successful guessing about real devices difﬁcult. We
present the protocol in Figure 18. After an adversary accesses
an inaccessible virtual node (marked as device 0), we isolate
the adversary when she accesses a device k with the probability
pk (including device 0), regardless of whether device k is a
Based on Theorem 1, we can derive the probability that
an adversary successfully obtains measurements from all real
devices through proactive attacks. When the adversary accesses
k-th device, the probability of not being isolated is 1 − Qk or
1 − p0. We use m2 to represent the number of inaccessible
virtual nodes and n the number of real devices. Because there
are m2 − 1 remaining inaccessible virtual nodes (excluding
16
device 0 that
triggers the probabilistic dropping protocol),
the chance that the adversary is accessing a real device at
the k-th access is
(cid:1), if the previous k − 1 devices
(cid:1). If the adversary accesses all
are also real devices. Consequently, the probability that the
adversary has obtained measurements from δ real devices
is Sδ = pδ
0
remaining real devices under this protocol, the probability
that they can obtain all real measurements through proactive
probing will be at least Sall = S
δ
(cid:81)δ
(cid:100) n
δ (cid:101)
k=1
1
n−k+1
(cid:0)n+m2−1
(cid:0)n+m2−1
n−k+1
1
.
proactive probing. In this experiment, we set design parameters
as δ = 4 and p0 = 0.18. From the ﬁgure, we can see that the
chance to obtain all measurements through proactive probing
less than 10−30 for small- or medium-size power
is low,
systems. Because FN rates are lower than 10−200 for large
power systems, we did not include the rates in the ﬁgure.
B. Evaluation
In Section IV, we divide all virtual nodes in two groups.
One group is accessible by legitimate applications; we add
random communication to accessible virtual nodes such that
it is challenging for adversaries to identify real devices by
passively monitoring communication pattern. The other group
is inaccessible, and accessing them triggers the probabilistic
dropping protocol.
Effectiveness in RO1. In Figure 19, we show probabilities
that an adversary successfully guesses whether a device is
real based on randomized requests (see Section IV-A). In
our experiment, we issue requests to 95% randomly selected
real devices and to accessible virtual nodes, whose ratio to
real devices is increased from 1% to 10% (in x-axis). Even
with a small accessible-virtual-node to real-device ratio, the
probability is always lower than 0.001% (10−5), making it
challenging for adversaries to distinguish real devices from
virtual ones based on the randomized requests.
Fig. 21: False negative rate of the probabilistic dropping protocol
with δ = 4 and p0 = 0.18.
Because only accesses to inaccessible virtual nodes trigger
the probabilistic dropping protocol, there are no false positives
(FP) for legitimate applications, which already know iden-
tities of real devices. In rare cases, faulty devices (physical
devices used by power grids usually have the probability of
misconﬁguration between 30 × 10−6 to 600 × 10−6 [55]) or
devices unaware of DefRec can accidentally send requests
to inaccessible virtual nodes. Assuming that there are n real
devices and m2 inaccessible virtual nodes, the probability of
accessing one of the inaccessible virtual nodes is m2/(n+m2).
If we present m2 = r×n with 0 < r < 1, then this probability
becomes r/(1 + r), which is not related to the size of a power
grid. Based on the analysis in Figure 12, we can achieve RO2
with r ≤ 10%, which makes the probability of accidentally
accessing inaccessible virtual nodes 9.1% or less.
Fig. 19: Probabilities that an adversary identiﬁes real devices
based on randomized requests.
In Figure 20, we show the accuracy of state estimation
when we issue requests to 95% randomly selected real devices
and retrieve their physical data. We observed negligible differ-
ences, with less than 0.1%. In power grids, state estimation
often uses redundant data, e.g., 100% more than necessary
data, to ensure estimation accuracy. Even if we use 95% of
physical data, the accuracy of state estimation is not affected.
Fig. 20: The accuracy of state estimation when we randomly retrieve
95% physical data from real devices.
Effectiveness in RO2. In Figure 21, we show FN rates
of the probabilistic dropping protocol, the chances that an
adversary successfully obtains measurements of real devices by
17
Fig. 22: Normalized residual errors of state estimation when
adversaries use decoy data to prepare FDIAs (with 99% conﬁdence
interval).
Effectiveness in RO3. In Section VII-A3, we demonstrate
FP and FN rates of RO3. In Figure 22, we demonstrate the
normalized residual errors of state estimation when adversaries
use decoy data to prepare FDIAs. As discussed in Section V, if
adversaries obtain correct knowledge about power grids, they
can design active attacks on the FDIAs such that normalized
residual errors are smaller than 1. However, if adversaries
use decoy data crafted by DefRec, normalized residual errors
are ampliﬁed to at least 5,000. As we increase the ratio of
virtual nodes, adversaries will use more decoy data for attack
reconnaissance. Correspondingly, normalized residual errors
increase signiﬁcantly, reaching around 10,000 for all six power
grid cases.
Variations in Power Systems. Figure 11 and Figure 12
show that DefRec can delay adversaries for a long latency,
e.g., 100 years. In that span of time, operational environ-
ments of power grids can experience signiﬁcant changes. In
Figure 23, we show normal variations of real communication
networks or transmission networks in power systems from
1%2%3%4%5%6%7%8%9%10%Accessible-Virtual-Node to Real-Device Ratio10-6010-4010-20100Probability ofIdentifying Real Devices24-bus30-bus73-bus118-bus406-bus1153-bus24-bus30-bus73-bus118-bus406-bus1153-bus0%50%100%Accuracy (Normalized)1%2%3%4%5%6%7%8%9%10%Inaccessible-Virtual-Node to Real-Device Ratio10-20010-100100False Negative Rate24-bus30-bus73-bus118-bus406-bus1153-bus05%10%15%20%24%30%Virtual-Node to Real-Device Ratio104105106Normalized Residual Errorin State Estimation24-bus30-bus73-bus118-bus406-bus1153-busand/or (ii) achieving attack objectives requires modifying de-
coy data with signiﬁcant changes (indicated by a threshold
|ad| ≥ ). In other words, adversaries will prepare attack
strategies involving operations of virtual nodes that, when
executed, will easily expose the adversaries.
APPENDIX C
STORAGE OVERHEAD OF DEVICE PROFILE AND CACHING
In Table II, we show storage overhead of device proﬁles.
in [35], we assume that
By following meter deployment
there are two meters measuring the
for each power grid,
active and reactive power injected at each substation and four
meters measuring the active and reactive power ﬂows at the
receiving and sending ends of each transmission line. For each
meter, we used ten 32-bit numbers to record the range of the
measurements and their probability distribution. In Table II, we
can see that even for an 1153-bus power grid, we can record
a total of 367.8 KB in the machine implementing PFV.
TABLE II: Storage overhead of device proﬁle: classiﬁed based on
power systems and the ratio of virtual nodes to physical devices.
Power Grid
Base
IEEE 24-bus
IEEE 30-bus
RTS96 73-bus
IEEE 118-bus
Poland 406-bus
Poland 1153-bus
8.1KB
9.0KB
25.1KB
38.1KB
107.2KB
301.4KB
10%
8.9KB
9.9KB
27.6KB
41.2KB
117.9KB
331.5KB
Ratio of Virtual Nodes to
Physical Devices
20%
15%
9.7KB
9.3KB
10.8KB
10.4KB
28.9KB
30.1KB
45.7KB
43.8KB
128.6KB
123.3KB
346.6KB
361.7KB
25%
10.1KB
11.3KB
31.4KB
47.6KB
134.0KB
367.8KB
TABLE III: Storage overhead of caching network interactions.
Supported
Function Codes
SEL 751A
ION 7550
Devices
AB 1400
(4)
(2)
(2)
CONFIRM
READ
WRITE
SELECT
OPERATE
DIRECT OPERATE
COLD RESTART
WARM RESTART
ENABLE
UNSOLICITED
DISABLE
UNSOLICITED
Total
Storage Overhead
≤ 8KB
≤ 5KB
≤ 5KB
In Table III, we present storage overhead of caching
network interactions with three physical devices used in our
evaluations. We include all network interactions that are sup-
ported by those devices and a DNP3 master implemented
based on the openDNP3 library [49]. Even though the DNP3
protocol speciﬁes a large amount of data formats, a physical
device usually selects a single data format for each function
code (see the DNP3 protocol speciﬁcation for details [29]).
Consequently, we cache one request and the corresponding
response for each function code. One exception is the “READ”
operation, for which we have cached multiple pairs of requests
and responses (the amount is included in parentheses). To be
compatible with legacy devices, the size of a single DNP3
packet cannot be more than 292 bytes [29]. Consequently,
we estimate the total storage overhead for caching network
interactions with those three devices, usually occupying less
than 8 KB.
Fig. 23: Variations in communication networks or power systems:
the x-axis represents a time span speciﬁed in the legend during
which the data is recorded; the y-axis speciﬁes the number of nodes
normalized to the ﬁrst record in the dataset.
public datasets, including InternetZoo [34], Rocketfuel [66],
and MATPOWER [79]. We select six of these networks that
contain at least ﬁve records at different times.
Because different networks can have various sizes, Fig-
ure 23 normalizes the number of nodes in each network with
the number appearing in the ﬁrst record. We can observe signif-
icant changes in communication networks, such as Arpanet and
Cesnet. In transmission networks used by Polish and French
national power grids, we can also see around 10% increase of
physical devices in ten years. Variations in a long time interval
make it difﬁcult, if not impossible, for adversaries to achieve
reconnaissance objectives.
APPENDIX B
GENERALIZATION OF DECOY DATA CONSTRUCTION
In this section, we show how the decoy data construction
procedure designed for FDIAs is applied to other attacks.
Most power grid control operations are formulated as an
optimization problem. For example, FDIAs aim at minimizing
the errors of state estimation while optimal power ﬂow analysis
aims at minimizing operational costs [45].
Fig. 24: Formulating decoy data construction. Misleading adver-
saries into targeting virtual nodes.
In this work, we focus on intelligent adversaries causing
physical damage by disrupting control operations, usually
formulated in optimization problems. Compared to random
disruptions,
these attacks, determined based on theoretical
analysis of control operations, can introduce severe physical
damage without raising alerts [19], [61].
In Figure 24, we present a general format of those op-
timization problems with the objective speciﬁed by g(cid:48). In
FDIAs, adversaries’ objectives are to minimize estimation
errors, with compromised measurements leading to wrongly
estimated system state (i.e., z + a in the ﬁgure). In another at-
tack that disrupts optimal power ﬂow analysis, adversaries can
maximize the costs of power generation instead of minimizing
them, to reduce economical revenues [19], [61].
DefRec mixes decoy data with real one (speciﬁed by zd),
such that (i) no solutions exist to achieve attack objectives;
18
Records at Different Time Stamps02468# of nodes (normalized)Poland Power (1999-2008)France Power (2013)Arpanet (1969-1972)Belnet (2003-2010)Cesnet (1993-2010)Kentman (2005-2011)