                            if (Z_OBJ_HT_P(op2)->cast_object(op2, &tmp_free, ((Z_TYPE_P(op1) == IS_FALSE || Z_TYPE_P(op1) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op1))) == FAILURE) { // 如果OP1是布尔型，则将OP2转换为布尔型，否则转换失败
                                ZVAL_LONG(result, -1); // OP1  OP2，否则，OP1 == OP2
                            return SUCCESS;
                        } else if (Z_TYPE_P(op1) == IS_TRUE) { // 如果OP1是布尔型true
                            ZVAL_LONG(result, zval_is_true(op2) ? 0 : 1); // 如果OP2转换为布尔型是true，则OP1 == OP2，否则 OP1 > OP2
                            return SUCCESS;
                        } else if (Z_TYPE_P(op2) == IS_TRUE) { // 如果OP2是布尔型true
                            ZVAL_LONG(result, zval_is_true(op1) ? 0 : -1); // 如果OP1转换为布尔型是true，则OP1 == OP2，否则 OP1  OP2
                        return SUCCESS;
                    } else if (Z_TYPE_P(op2)==IS_ARRAY) { // 如果OP2的类型是数组
                        ZVAL_LONG(result, -1); // OP1  OP2
                        return SUCCESS;
                    } else if (Z_TYPE_P(op2)==IS_OBJECT) { // 如果OP2的类型是对象
                        ZVAL_LONG(result, -1); // OP1 op1.var); // 获取OP1
        op2 = EX_CONSTANT(opline->op2); // 获取OP2
        result = fast_is_identical_function(op1, op2);
        ZEND_VM_SMART_BRANCH(result, 1);
        ZVAL_BOOL(EX_VAR(opline->result.var), result);
        ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
    }
很明显，函数在获取`OP1`和`OP2`之后，进入了`fast_is_identical_function`函数，跟进一下。  
路径：`Zend/zend_operators.h:748`
    static zend_always_inline int fast_is_identical_function(zval *op1, zval *op2)
    {
        if (Z_TYPE_P(op1) != Z_TYPE_P(op2)) { // 如果OP1和OP2的类型不相同，返回0
            return 0;
        } else if (Z_TYPE_P(op1)  具有较少成员的数组较小，如果运算数 1 中的键不存在于运算数 2 中则数组无法比较，否则挨个值比较
在`zend_is_identical`中我们跟进`zend_hash_compare`，可以找到`zend_hash_compare_impl`。  
路径：`Zend/zend_hash.c:2313`
    static zend_always_inline int zend_hash_compare_impl(HashTable *ht1, HashTable *ht2, compare_func_t compar, zend_bool ordered) {
        uint32_t idx1, idx2;
        if (ht1->nNumOfElements != ht2->nNumOfElements) { // 当长度不相同时，较长的数组大于较短的数组
            return ht1->nNumOfElements > ht2->nNumOfElements ? 1 : -1;
        }
        for (idx1 = 0, idx2 = 0; idx1 nNumUsed; idx1++) { // 长度相同，遍历数组，挨个值进行比较。
            Bucket *p1 = ht1->arData + idx1, *p2;
            zval *pData1, *pData2;
            int result;
            if (Z_TYPE(p1->val) == IS_UNDEF) continue; // 如果类型未定义，直接继续
            if (ordered) {
                while (1) {
                    ZEND_ASSERT(idx2 != ht2->nNumUsed);
                    p2 = ht2->arData + idx2;
                    if (Z_TYPE(p2->val) != IS_UNDEF) break;
                    idx2++;
                }
                if (p1->key == NULL && p2->key == NULL) { /* 数字索引 */
                    if (p1->h != p2->h) {
                        return p1->h > p2->h ? 1 : -1;
                    }
                } else if (p1->key != NULL && p2->key != NULL) { /* 字符串索引 */
                    if (ZSTR_LEN(p1->key) != ZSTR_LEN(p2->key)) {
                        return ZSTR_LEN(p1->key) > ZSTR_LEN(p2->key) ? 1 : -1;
                    }
                    result = memcmp(ZSTR_VAL(p1->key), ZSTR_VAL(p2->key), ZSTR_LEN(p1->key));// 获取两个key对应的值来进行对比
                    if (result != 0) { // 当存在不相等的成员时，返回结果。
                        return result;
                    }
                } else {
                    /* Mixed key types: A string key is considered as larger */
                    return p1->key != NULL ? 1 : -1;
                }
                pData2 = &p2->val;
                idx2++;
            } else {
                if (p1->key == NULL) { /* 数字索引 */
                    pData2 = zend_hash_index_find(ht2, p1->h);
                    if (pData2 == NULL) {
                        return 1;
                    }
                } else { /* 字符串索引 */
                    pData2 = zend_hash_find(ht2, p1->key);
                    if (pData2 == NULL) {
                        return 1;
                    }
                }
            }
            pData1 = &p1->val;
            if (Z_TYPE_P(pData1) == IS_INDIRECT) { // 如果变量是间接zval
                pData1 = Z_INDIRECT_P(pData1); // pData1获取它所指向的zval
            }
            if (Z_TYPE_P(pData2) == IS_INDIRECT) { // 如果变量是间接zval
                pData2 = Z_INDIRECT_P(pData2);  // pData2获取它所指向的zval
            }
            if (Z_TYPE_P(pData1) == IS_UNDEF) { 
                if (Z_TYPE_P(pData2) != IS_UNDEF) { // 如果pData1是未定义的变量，而pData2不是未定义的变量，则pData1所在的数组  pData2所在的数组
                return 1;
            } else {
                result = compar(pData1, pData2); // 如果两者都是不是未定义的变量，则进入compar进行比较
                if (result != 0) {
                    return result;
                }
            }
        }
        return 0;
    }
以下是手册中，`===`在面对不同变量的时候运算结果表。  
## 参考
  * 
  * 
  * 书籍：《PHP 7底层设计与源码实现》