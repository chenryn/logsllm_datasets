1 (Πcmt,A, λ) = 1]| ≤ negl(λ)
B Formal Description of the Generic Construction of UACS
Construction 22. Let Πsig be a blind signature (Deﬁnition 1). We construct UACS:
Setup(pp) → cpp generates public parameters cpp consisting of pp and a zero-knowledge argument
common reference string. The attribute space A is the signature scheme’s message space Msig.
IssuerKeyGen(cpp, 1n) → (pk, sk) generates keys by running algorithm KeyGensig(pp, 1n) → (pk, sk).
The update function universe Ψ consists of all ψ : (Mnsig ∪ {⊥}) × {0, 1}∗ → Mnsig ∪ {⊥} that
are supported by the zero-knowledge arguments below.
26
Issue(cpp, pk, ψ, sk) ↔ Receive(cpp, pk, ψ, α) → cred
for ψ ∈ Ψ works as follows:
• The receiver computes ~A = ψ(⊥, α) and commits to ~A by computing c = Commitsig(pp,
pk, ~A, r) for random r and sends c to the issuer.
• Receiver proves ZKAK[(α, r); c = Commitsig(pp, pk, ψ(⊥, α), r)]
• If the proof accepts, issuer runs BlindSignsig(pp, pk, sk, c) and receiver runs BlindRcvsig(pp,
• The receiver checks if Vrfysig(pp, pk, ~A, σ) = 1. If so, it outputs cred = ( ~A, σ), otherwise
pk, ~A, r) → σ.
it outputs ⊥.
b ← Update(cpp, pk, ψ, sk) ↔ UpdRcv(cpp, pk, ψ, α, cred) → cred∗ works as follows:
• The receiver parses cred = ( ~A, σ) and computes ~A∗ = ψ( ~A, α).
• The receiver commits to ~A∗ by computing the commitment c = Commitsig(pp, pk, ~A∗, r)
for random r and sends c to the issuer.
• Then, the receiver proves ZKAK[( ~A, σ, α, r); Vrfysig(pp, pk, ~A, σ) = 1 ∧ c = Commitsig(pp,
pk, ψ( ~A, α), r)].
• If the proof rejects, the issuer outputs 0 and aborts.
• Otherwise, issuer runs BlindSignsig(pp, pk, sk, c) while receiver runs BlindRcvsig(pp, pk, ~A∗,
• The receiver checks if Vrfysig(pp, pk, ~A∗, σ∗) = 1.
If so, it outputs cred∗ = ( ~A∗, σ∗),
r) → σ∗.
otherwise it outputs ⊥. The issuer outputs 1.
ShowPrv(cpp, pk, φ, α, cred) ↔ ShowVrfy(cpp, pk, φ) → b works as follows: the prover parses cred =
( ~A, σ). If φ( ~A, α) = 0, the prover aborts and the veriﬁer outputs 0. Otherwise, the prover runs
the proof ZKAK[( ~A, α, σ); Vrfysig(pp, pk, ~A, σ) = 1 ∧ φ( ~A, α) = 1]. If the proof succeeds, the
veriﬁer outputs 1, otherwise 0.
C Security Proof for Updatable Credentials
In this section, we sketch the security proofs for Construction 7.
Theorem 8: Anonymity. We deﬁne the simulators as follows:
• SSetup(pp) runs the trapdoor generator of the ZKAK and outputs cpp (which contains pp and
the ZKAK common reference string from the trapdoor generator), and the simulation trapdoor
td.
• SReceive(td, pk, ψ) and SUpdRcv(td, pk, ψ) work very similarly to one another: they both commit
to ~0 as c = Commitsig(pp, pk,~0, r) with random r and send c to A. They then simulate the ZKAK
proof (in Receive or UpdRcv) using td. Finally, they both run BlindRcvsig(pp, pk,~0, r) → σ and
compute the bit b = Vrfysig(pp, pk,~0, σ). They send b to A.
• SShowPrv(td, pk, φ) simulates the ZKAK.
Given that Πsig has perfect message privacy by assumption, the commitment c and the bit b
computed by the simulator have the same distribution as in Receive or UpdRcv. Simulation of the
zero-knowledge arguments produces the correct view for A by assumption.
Theorem 9: Soundness. We deﬁne the algorithm E that is supposed to extract an explanation list L
as follows:
27
• On input (cpp, rA, rIssue, rUpdate), the extractor EA ﬁrst runs A with randomness rA and cpp
until A halts.
• For the ith query to Issue, Update, or ShowVrfy in this run, E does the following:
– if it is a query to Issue and the proof of knowledge within Issue is accepting, then E uses
the proof of knowledge extractor to obtain a witness (α, r). It stores αi := α on L. If the
proof of knowledge is not accepting, it stores some arbitrary αi ∈ {0, 1}∗ on L.
– if it is a query to Update and the proof of knowledge within Update is accepting, then E uses
the proof of knowledge extractor to obtain a witness ( ~A, σ, α, r). It stores ( ~Ai, αi) := ( ~A, α)
on L.
– if it is a query to ShowVrfy and the proof of knowledge within ShowVrfy is accepting, then
E uses the proof of knowledge extractor to obtain a witness ( ~A, σ). It stores ~Ai := ~A on
L.
• E outputs L.
Since the argument of knowledge extractor runs in expected polynomial time, E runs in expected
polynomial time, too (probability over rA and E’s random coins).
With this E, the soundness of our updatable credential construction can be reduced to unforgeability
of the underlying blind signature scheme sig (Deﬁnition 17). Let E be as above. Let A be an attacker
against Expsound. We construct B against Expblind-uf:
• B runs A with randomness rA
• B receives pp from the unforgeability experiment. B generates cpp from pp and hands cpp to
A. A responds with 1n for some n ∈ N. B hands 1n to its challenger, receiving pk. B hands
pk to A.
• Whenever A queries Issue with update function ψ, B checks the proof of knowledge. If it accepts,
B uses the proof of knowledge extractor to obtain a witness (α, r). B submits ~m := ψ(⊥, α), r,
and c := Commitsig(pp, pk, ~m, r) to its challenger, who starts running BlindSignsig(pp, pksk, c).
B relays the messages for BlindSignsig between its challenger and A.
• Whenever A queries Update with update function ψ, B checks the proof of knowledge. If it
accepts, B uses the proof of knowledge extractor to obtain a witness ( ~A, σ, α, r). If B has
not queried its challenger for ~A before, it outputs ~m := ~A and σ as a forgery. Otherwise, B
submits ~m := ψ( ~A, α), r, and c := Commitsig(pp, pk, ~m, r) to its challenger, who starts running
BlindSignsig(pp, pk, sk, c). B relays the messages for BlindSignsig between its challenger and A.
• Whenever A queries ShowVrfy with predicate φ, B checks the proof of knowledge. If it accepts,
B uses the proof of knowledge extractor to obtain a witness ( ~A, α, σ). If B has not queried its
challenger for ~A before, it outputs ~m := ~A and σ as a forgery.
• Eventually, A and halts. B runs EA(cpp, rA, rIssue, rUpdate) (using the same random coins for E
that B used for its extraction of proofs of knowledge, ensuring that the output of E will be
consistent with the values extracted by B before) to obtain L.
• Then B halts.
Analysis: Whenever B outputs a signature forgery, it is guaranteed that the signature is valid
(since they are valid witnesses in a proof of knowledge for a relation that requires signature validity).
If B outputs a forgery during an Update or ShowVrfy query, by construction it has never asked for
the message to be signed before.
28
It is easy to see that the simulation is perfect. If B does not halt before A halts, the output L
of E necessarily fulﬁlls argument consistency: Suppose for contradiction that L is not consistent,
i.e. there is some index i such that L is inconsistent for that index. Let Ei be as prescribed in the
soundness experiment given L. Note that before the ith query, B has only queried its oracle for
signatures on messages ~A ∈ Ei−1.
• Assume i belongs to an Issue query. By deﬁnition i cannot have caused the inconsistency.
• Assume i belongs to an Update query with update function ψi. Then the entry on L is some
( ~Ai, αi). Because i caused the inconsistency, Update has output 1 (implying that B runs the
proof of knowledge extractor and obtained the witness ( ~A, σ, α, r)) and (1) ψi( ~Ai, αi) =⊥ or (2)
~Ai /∈ Ei−1. (1) can be ruled out since ψi( ~Ai, αi) 6=⊥ is guaranteed by the proof of knowledge
statement and hence by its extractor. If (2) happens, then B halts and claims a forgery (as it
has not queried ~Ai to its oracle before), contradicting that B does not halt before A halts.
• Assume i belongs to a ShowVrfy query with predicate φi. This case is handled analogously to
Update.
So we know that if B does not halt before A halts, then E outputs a consistent L, implying that
Pr[Expblind-uf(Πsig,B, λ)] ≥ Pr[Expsound(Π,A,E, λ) = 1]. So if for E as deﬁned above, there exists
an adversary A with non-negligible success probability, then there exists B (as deﬁned above) with
non-negligible success probability against the blind signature scheme. By assumption, such a B does
not exist, hence the updatable credential system is sound. (Note that B runs in expected polynomial
time. This can be converted to polynomial time by trading oﬀ success probability using Markov’s
inequality.)
D Compact Description of the Incentive System Construction
We list the generic incentive system construction, as explained in Section 7, in a more compact and
formal manner.
Construction 23. Let Πuacs be an UACS, Πenc be a public-key encryption scheme, and let Πcmt
be an additively malleable commitment scheme. We deﬁne the incentive system Πinsy as follows:
Setup(pp) → ispp runs cpp ← Setupuacs(pp). pp ﬁxes an attribute space A and message space Menc
for the encryption scheme. We assume A = Zp for some super-poly p and set vmax = p − 1.
Setup chooses a commitment key pkcmt ← KeyGencmt(pp). It outputs ispp = (pp, cpp, pkcmt).
KeyGen(ispp) → (upk, usk) generates an encryption key uskenc ← KeyGenenc(pp) and upkenc =
ComputePKenc(pp, uskenc). It outputs upk = upkenc and usk = uskenc.
IssuerKeyGen(ispp) → (pk, sk) outputs a credential issuer key pair (pk, sk) ← IssuerKeyGenuacs(cpp,
1n) for n = 4.
Issue(ispp, pk, upk, sk) ↔ Join(ispp, pk, upk, usk) → (token, dsid)
the user picks dsidusr ← Zp and computes commitment and open value (Cusr, open) ←
Commitcmt(pp, pkcmt, dsidusr). The user sends Cusr to the provider. The provider replies with
dsidprvdr ← Zp. Both parties compute Cdsid = Addcmt(pp, pkcmt, Cusr, dsidprvdr). Then the user
sets dsid = dsidusr+dsidprvdr, chooses dsrnd ← Zp, and sets α = (usk, dsid, dsrnd, open). Then
the provider runs Issueuacs(cpp, pk, ψ, sk) and the user runs Receiveuacs(cpp, pk, ψ, α) → cred.
Here, the update function is set to ψ(⊥, (usk, dsid, dsrnd, open)) = (usk, dsid, dsrnd, 0), if
user public key upk = ComputePKenc(pp, usk) and it holds that Vrfycmt(pp, pkcmt, Cdsid, dsid,
open) = 1. Otherwise, set ψ(⊥, α) =⊥.
the user outputs token = (dsid,
dsrnd, v = 0, cred) and dsid. Otherwise, the user outputs ⊥.
If cred 6=⊥,
29
sends both to the user.
• Issuer and user each compute Cdsid
• The user prepares values dsid∗ = dsid∗
and sets α = (dsid∗, dsrnd∗, open∗).
∗ = Addcmt(pp, pkcmt, Cusr
∗, dsid∗
prvdr).
usr + dsid∗
prvdr and dsrnd∗ ← Zp for his next token
Credit(ispp, pk, k, sk) ↔ Earn(ispp, pk, k, usk, token) → token∗ the user parses token = (dsid, dsrnd,
v, cred) and checks that v + k ≤ vmax. The protocol then works as follows: The provider runs
Updateuacs(cpp, pk, ψ, sk), interacting with the user running UpdRcvuacs(cpp, pk, ψ, α, cred) →
cred∗ with α =⊥. Here, the update function is set to ψ((usk, dsid, dsrnd, v),·) = (usk, dsid,
dsrnd, v + k). If cred∗ 6=⊥, the user outputs token∗ = (dsid, dsrnd, v + k, cred∗).
(token∗, dsid∗) ← Spend(ispp, pk, k, dsid, usk, token) ↔ Deduct(
ispp, pk, k, dsid, sk) → (b, dstag) ﬁrst has the user parse token as token = (dsid, dsrnd, v, cred)
and check that v ≥ k. Then:
• The user chooses dsid∗
usr). He sends Cusr
usr ← Zp and generates
∗ to the provider.
∗, open∗) ← Commitcmt(pp, pkcmt,
dsid∗
(Cusr
• The provider chooses a random challenge γ ← Zp and a random dsid∗
prvdr ← Zp, and
• The user computes c = usk · γ + dsrnd.
• The user encrypts dsid∗ as ctrace ← Encryptenc(pp, upk, dsid∗).
• The user sends c, ctrace to the provider.
• The provider runs b ← Updateuacs(cpp, pk, ψ, sk) and the user runs algorithm cred∗ ←
UpdRcvuacs(cpp, pk, ψ, α, cred). Here, the update function is ψ((usk, dsid, dsrnd, v),
(dsid∗, dsrnd∗, open∗)) = (usk, dsid∗, dsrnd∗, v − k) if
– dsid is the same as in the Deduct input,
– v ≥ k,
– Vrfycmt(pp, pkcmt, Cdsid
– c = usk · γ + dsrnd, and
– Decryptenc(pp, usk, ctrace) = dsid∗.
Otherwise, ψ(. . . ) =⊥.
∗, dsid∗, open∗),
• If cred∗ 6=⊥, the user outputs (token∗ = (dsid∗, dsrnd∗, v − k, cred∗), dsid∗).
• The provider outputs b and, if b = 1, dstag = (c, γ, ctrace).
Link(ispp, dstag, dstag0) → (upk, dslink) with dstag = (c, γ, ctrace), dstag0 = (c0, γ0, ctrace0), outputs
dslink = (c − c0)/(γ − γ0) (the intent is that dslink = usk) and upk = ComputePK(pp, dslink).
Trace(ispp, dslink, dstag) → dsid∗ for dstag = (c, γ, ctrace) retrieves dsid∗ by decrypting ctrace, i.e.
dsid∗ = Decryptenc(pp, dslink, ctrace).
VrfyDs(ispp, dslink, upk) → b outputs 1 iﬀ ComputePK(pp, dslink) = upk.
E Concrete Construction from Pointcheval Sanders Blind
Signatures
We present a concrete construction based on Pointcheval Sanders blind signatures [PS16] for the
UACS and ElGamal encryption for the public-key encryption scheme and the additively malleable
commitment. For this, we follow the generic construction of UACS (Construction 7) and the
30
incentive system (Construction 23) closely with one change: We sign dsid ∈ Zp, but we encrypt
Dsid = wdsid ∈ G1. Hence, when tracing double-spent transactions, one only learns Dsid∗ = wdsid∗
instead of dsid∗. This is not a restriction since the output of Trace is only needed to quickly ﬁnd the
corresponding transaction to dsid∗. So in practice, the issuer would store Dsid instead of dsid for
every transaction that he observes, and then use Dsid to quickly ﬁnd the transaction pointed at