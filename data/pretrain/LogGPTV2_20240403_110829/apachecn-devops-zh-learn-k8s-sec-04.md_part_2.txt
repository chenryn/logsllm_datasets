角色绑定对象用于将角色与主题相关联。与集群角色类似，集群角色绑定可以跨名称空间向主体授予一组权限。让我们看几个例子:
1.  创建一个角色绑定对象，将`custom-clusterole`集群角色与默认名称空间中的`demo-sa`服务帐户相关联，如下所示:
    ```
    kubectl create rolebinding new-rolebinding-sa \
         --clusterrole=custom-clusterrole \
         --serviceaccount=default:demo-sa
    ```
2.  创建一个角色绑定对象，将一个`custom-clusterrole`集群角色关联到`group-1`组，如下所示:
    ```
    kubectl create rolebinding new-rolebinding-group \
         --clusterrole=custom-clusterrole \
         --group=group-1 \
         --namespace=namespace-1
    ```
角色绑定对象将角色链接到主题，并使角色可重用且易于管理。
## 非组合命名空间
命名空间是计算机科学中的一个常见概念，它为相关资源提供逻辑分组。名称空间用于避免名称冲突；同一命名空间内的资源应该具有唯一的名称，但是跨命名空间的资源可以共享名称。在 Linux 生态系统中，名称空间允许隔离系统资源。
在 Kubernetes 中，名称空间允许团队和项目之间逻辑地共享一个集群。对于 Kubernetes 命名空间，以下内容适用:
*   它们允许不同的应用、团队和用户在同一个集群中工作。
*   它们允许集群管理员为应用使用命名空间资源配额。
*   他们使用 RBAC 策略来控制对名称空间中特定资源的访问。角色绑定有助于集群管理员控制授予命名空间内用户的权限。
*   它们允许使用命名空间中定义的网络策略进行网络分段。默认情况下，所有 pods 都可以跨不同的名称空间相互通信。
默认情况下，Kubernetes 有三个不同的名称空间。运行以下命令查看它们:
```
$ kubectl get namespace
NAME          STATUS    AGE
default       Active    1d
kube-system   Active    1d
kube-public   Active    1d
```
这三个名称空间描述如下:
*   `default`:不属于任何其他命名空间的资源的命名空间。
*   `kube-system`:Kubernetes 创建的对象的命名空间，如`kube-apiserver`、`kube-scheduler`、`controller-manager`和`coredns`。
*   `kube-public`:这个命名空间内的资源是所有人都可以访问的。默认情况下，不会在此命名空间中创建任何内容。
让我们看看如何创建一个名称空间。
### 创建命名空间
使用以下命令可以在 Kubernetes 中创建新的命名空间:
```
$ kubectl create namespace test
```
一旦创建了新的命名空间，就可以使用`namespace`属性将对象分配给命名空间，如下所示:
```
$ kubectl apply --namespace=test -f pod.yaml
```
命名空间中的对象同样可以通过使用`namespace`属性来访问，如下所示:
```
$ kubectl get pods --namespace=test
```
在 Kubernetes 中，并不是所有的对象都有命名空间。像`Nodes`和`persistentVolumes`这样的低级对象跨越命名空间。
## 总结 Kubernetes 人最少的权限
到目前为止，您应该已经熟悉了集群角色/角色、集群角色绑定/角色绑定、服务帐户和名称空间的概念。为了实现 Kubernetes 主体的最低权限，在 Kubernetes 中创建角色或角色绑定对象之前，您可以问自己以下问题:
*   Does the subject need privileges for a namespace or across namespaces?
    这很重要，因为一旦主体拥有集群级别的权限，它就可以跨所有名称空间行使权限。
*   Should the privileges be granted to a user, group, or service account?
    当您将角色授予某个组时，这意味着该组中的所有用户都将自动获得新授予角色的权限。在将角色授予某个组之前，请确保您了解其影响。接下来，Kubernetes 中的一个用户用于人类，而服务帐户用于 pods 中的微服务。确保您知道 Kubernetes 用户的职责是什么，并相应地分配权限。此外，请注意，一些微服务根本不需要任何权限，因为它们不直接与`kube-apiserver`或任何 Kubernetes 对象交互。
*   What are the resources that the subjects need to access?
    创建角色时，如果不指定资源名称或在`resourceNames`字段中设置`*`，则意味着该资源类型的所有资源都被授予访问权限。如果你知道主题将要访问的资源名称，在创建角色时一定要指定资源名称。
Kubernetes 主体使用授予的权限与 Kubernetes 对象进行交互。了解 Kubernetes 臣民执行的实际任务将有助于你正确授予权限。
# 对 Kubernetes 工作负载的最低权限
通常，会有一个与 Kubernetes 工作负载相关联的服务帐户(默认)。因此，pod 内的进程可以使用服务帐户令牌与`kube-apiserver`通信。出于最低权限的目的，DevOps 应该谨慎地向服务帐户授予必要的权限。我们在上一节已经讨论过了。
除了访问`kube-apiserver`来操作 Kubernetes 对象之外，pod 中的进程还可以访问集群中的工作节点和其他 pod/微服务上的资源(在 [*第 2 章*](02.html#_idTextAnchor049)*Kubernetes Networking*中介绍)。在这一节中，我们将讨论访问系统资源、网络资源和应用资源的可能的最低权限实现。
## 访问系统资源的最低权限
回想一下，在容器或 pod 中运行的微服务只不过是工作节点上的一个进程，隔离在它自己的命名空间中。pod 或容器可以根据配置访问工作节点上不同类型的资源。这是由安全上下文控制的，可以在 pod 级别和容器级别进行配置。配置 pod/容器安全上下文应该在开发人员的任务列表中(在安全设计和审查的帮助下)，而 pod 安全策略——在集群级别限制 pod/容器访问系统资源的另一种方法——应该在 DevOps 的待办事项列表中。让我们来看看安全上下文、PodSecurityPolicy 和资源限制控制的概念。