quite far removed from the actual I/O operation. The only
constraint is that the attack code must be able to intercept
and modify possibly modify the I/O data that is relevant to
the attacker’s goals.
Step I.3. Cleanup
The last step of the initial exploit phase is to cleanup any
damage resulting from the exploit so that the victim applica-
tion will continue executing without making any anomalous
system calls. The technique for accomplishing this is dic-
tated by the nature of the underlying vulnerability:
4 Some compilers store vtables in read-only data section. To cope
with this, we can modify the vtable pointer in a single object so
that it points to a table constructed by the attack code. Typically,
a suitable object can be identiﬁed by scanning the stack.
• Heap overﬂow: Heap overﬂow exploits typically overwrite
a GOT-entry for a function that will normally be invoked
by a victim application immediately after the overﬂow
takes place. In this case, exploit code can resume normal
execution by simply transferring control to the beginning
of the original function called by the victim program. In
our experiments described in Section 4.1, we were able to
identify the location of the original function without any
problem5.
• Stack-smashing vulnerability: A typical stack smash re-
sults in the corruption of the return address in the stack
frame containing the vulnerable buﬀer, and possibly some
local variables of the caller’s frame. Since the attack code
gains control when the vulnerable function attempts to
return to its caller, we only need to ensure that the caller
continues normal execution. If the attacker can predict
the values of the caller’s corrupted local variables, then
the attack can easily restore them.
If some of the cor-
rupted values can’t be predicted, the attack code can re-
turn an error code to the caller, causing it to return early
without using the corrupted variables. The attacker can
evaluate these options on his system before settling on a
speciﬁc choice.
An alternative technique is to modify the exploit so that it
does not write beyond the return address targeted by the
attack. This may reduce the size of the payload, but still,
most stack-smashing vulnerabilities involve moderate to
large arrays, and hence can be expected to be suﬃcient
to hold the initial exploit.
• Format-string attacks: Format-string attacks may over-
write a return address or a function pointer, such as an
entry in the GOT. Typical format-string attacks cause a
small amount of collateral damage, especially to the stack
or the GOT. Possible techniques for recovering from such
damage were already discussed above.
As the above discussion shows, heap overﬂows are especially
suited for persistent interposition attack since the cleanup
phase is very easy.
In our implementation, we have also
demonstrated a successful cleanup after a stack-smashing at-
tack on Samba server.
3.2 Phase II: Bootstrapping Phase
Once the initial exploit phase is complete, the bootstrap-
ping code is invoked during normal operation of a victim
application. Typically, the bootstrapping code may be in-
voked on each read and write operation. After the bootstrap
code ﬁnishes execution, it uses a jump to transfer control to
read or write6. As pointed out earlier, it is important to use
a jump (rather than a call) instruction to eﬀect this control
transfer, so that a system call monitor will not see any trace
of the attack code on the stack. Speciﬁcally, all register val-
ues, including those of the stack pointer and base pointer,
5It is usually quite easy to identify the location of the original
function — the location of the function is usually identical be-
tween the attacker’s machine and the victim machine. Even if
there are diﬀerences, e.g., due to ASR, the relative distances be-
tween functions in the shared library will remain the same. As
such, the exploit code can compute the location of the overwritten
function from the location stored in the next GOT entry.
6Henceforth, when we refer to read and write, we are referring
to all input and output system calls respectively.
161
need to have the same values as at the invocation of the
attack code.
Since a jump is used, control does not return to the boot-
strap code after a read or write. In order to be able to read
the data returned by read, the bootstrapping code uses the
following strategy:
• Store the address of the buﬀer being used to read input
data
• Intercept the next interceptable function call, and read
and (optionally) modify the contents of the input buﬀer
Obvious choices for the subsequent interception are (a) the
next system call invoked by the victim, (b) a free call that
may be used by the victim to free a buﬀer used for read-
ing the data, or (c) utility functions such as strtok, strcpy
or memcpy that may be used to process the input data. In
our experiments, we could readily identify the appropriate
function call by examining the source code of the victim ap-
plication, or by dynamically tracing the function calls made
by it.
To upload additional code, the attacker sends specially
marked inputs to the victim. The exact format of these
inputs will need to be adapted to the victim application.
Conceptually, these inputs contain (a) a marker that iden-
tiﬁes a request from the attacker, (b) the code that is sent
as part of this input, and (c) an op-code that indicates what
the bootstrapping code should do with this code. When the
marker is recognized by the bootstrapping code, it will copy
the code into the memory region chosen in the previous step
(or another free area of memory). Note that the marker
could be implicit, e.g., the bootstrapping code may include
logic that treats inputs from certain IP addresses as coming
from the attacker. Alternatively, it could be a byte sequence
that is explicitly included in the input. In this case, the at-
tacker will aim to minimize the likelihood that other inputs
accidentally contain the marker, but such accidents can be
tolerated if they are rare: they would simply cause the cur-
rent bootstrapping phase to fail, and require the attacker to
retry the attack.
Note that the attack code contained in the input could be
encoded in some way to reduce the likelihood that it would
be identiﬁed by a content-based IDS. For instance, binary
code may be encoded into ASCII data, and converted back
by the boot-strapper.
The bootstrapping code should recognize two op-codes:
one that indicates a copy operation, and another that in-
dicates the bootstrap code should transfer control to the
beginning of the code uploaded during the bootstrap phase.
The bootstrapping phase ends when the second op-code is
processed.
3.3 Phase III: Operational Phase
The operational code uploaded during the bootstrapping
phase performs the real work of the attack. Note that it is
possible for this code to interpose on a diﬀerent set of func-
tions (as compared to the bootstrapping phase) by appro-
priately modifying function pointers in the process memory.
From now on, the operational code gets to see and modify
all outgoing messages. It uses the same strategy as the boot-
strapping code to examine input messages. The operational
code can accomplish several attacker objectives using these
two capabilities:
• Extract client secrets. An attacker can use a persistent
interposition attack to obtain client credit card numbers
or other personal data from an e-commerce web server.
• Redirect clients. The adversary can redirect clients to
attacker-controlled hosts by modifying the responses to
name-lookup queries, or even by modifying the target ad-
dress of links in web pages served to them. Once clients
have been redirected, the adversary can attack them us-
ing his server.
Even if the redirection involves a cryptographically pro-
tected service such as HTTP over SSL, the attacker may
be able to combine redirection with stealing of server’s
private key to carry out a successful attack.
• Corrupt clients. An attacker can use a subverted ﬁle-
server to corrupt clients by giving them modiﬁed exe-
cutable binaries. Alternatively, servers may compromise
vulnerable clients by sending them malicious data, such
as image or multimedia ﬁles that can exploit buﬀer over-
ﬂows or other vulnerabilities in clients.
• Drop messages. A system call monitor may prevent the
attack code from dropping an incoming message com-
pletely, but the attack can still alter the output actions
that result from this input. For example, an attack on an
email server could allow it to save a diﬀerent email mes-
sage in the ﬁle system from the one that was received.
• Extract system secrets. Many servers read in the system
password ﬁle, /etc/shadow, to authenticate users. The
attack code could embed the contents of this ﬁle in re-
sponses to the attacker, enabling her to perform an oﬀ-
line dictionary attack.
• Extract server secrets. Servers that support the SSL pro-
tocol have a private key that is used to authenticate the
server during connection negotiation. Since the key is
used during every connection, most servers keep it in
memory all the time. The attack code can look up the
server key and embed it in the responses to the attacker’s
subsequent messages.
• Extract arbitrary memory.
In general, the attack code
could monitor incoming messages for commands of the
form (a, n), and return the contents of n memory loca-
tions starting with the address a.
Standard root-shell attacks could accomplish these goals as
well, but they would be detected by an I/O data oblivious
IDS. Persistent interposition attacks show how to accomplish
these goals while remaining stealthy.
4.
Implementation and Evaluation
In order to focus the exposition on aspects that are cen-
tral to establishing practicality of persistent interposition
attacks, we organize this section into three parts.
In Sec-
tion 4.1, we present a complete persistent interposition at-
tack on the Apache web server. Section 4.2 considers the
attack phases described in the previous section and evalu-
ates the feasibility of diﬀerent alternatives suggested for im-
plementing them. In Section 4.3, we provide a theoretical
rather than an empirical analysis of how persistent inter-
position attacks can be implemented on a few more server
programs.
162
4.1 Apache OpenSSL Vulnerability
OpenSSL versions before 0.9.6d contained a buﬀer over-
ﬂow in the handling of client-provided keys, known as the
KEY ARG overﬂow. Solar Eclipse [6] developed a code-
injection exploit against this overﬂow. This exploit over-
writes the GOT entry for free with the address of the in-
jected code. When the server subsequently calls free, it ends
up executing the injected code that spawns a shell. We mod-
iﬁed this exploit as described below to construct a persistent
interposition attack.
4.1.1 Initial exploit phase
In our implementation, the initial exploit code was about
100 bytes, small enough to be accommodated in the payload
of typical code-injection exploits.
To decide where to store the exploit code, we performed
a dump of Apache’s global memory, and noticed that there
were three large and mostly unused buﬀers: ap_server_root,
ap_server_confname, and ap_coredump_dir. These character
arrays are 8KB each, but the path names stored in them are
typically only a few tens of bytes. We chose to copy our code
to an oﬀset of 100 bytes from the base of ap_server_root.
Apache includes an extensive plug-in architecture that en-
ables dynamically loaded modules to override built-in func-
tionality. The SSL extension to Apache overrides the basic
input and output functions by registering two of its func-
tions, ssl_io_hook_read and ssl_io_hook_write, as the read
and write hooks. Our attack targets the ssl_io_hook_write
function pointer for interposition. It saves the current value
of this pointer and then overwrites it with a pointer to the
attack code.
There are beneﬁts to interposing on the above functions.
First, it enables the attack code to access messages in plain-
text rather than ciphertext. Second, the attack will continue
to work even if GOT were made read-only.
It turned out that we did not need to interpose on calls
to ssl_io_hook_read at all, since the data returned by a read
operation is made available by Apache in a client request
argument to ssl_io_hook_write. We relied on this fact to
implement the attack entirely by interposing just a single
function call, namely, ssl_io_hook_write.
The initial exploit overwrites the GOT entry correspond-
ing to free. Thus, the cleanup phase in our attack consisted
simply of restoring this GOT entry to point to the location
of free function in glibc. Since the shared libraries were
loaded at the same address on the victim and the attacker’s
machine, it was easy to predict the value needed for restora-
tion.
4.1.2 Bootstrapping Phase
The bootstrapping code installed by the initial exploit
phase now intercepts calls to ssl_io_hook_write and can in-
spect and change its arguments. As mentioned previously, an
argument passed to this function also contains the data read
from the client. The interposed code checks the input buﬀer
for a special op-code indicating that a message contains the
operational attack code. In this case, it copies the incoming
operational attack code into the ap_server_root, while being
careful to avoid overwriting itself. If the op-code indicates
the end of operational code, then the bootstrap code updates
the write hook to point to the operational code.
4.1.3 Operational phase.
The operational code uploaded by the attacker during the
bootstrap phase could be very large in principle, and could
perform the attacks described in Section 3. However, since
the focus of our evaluation was on the initial exploit and
bootstrap phases, we could do with a code size of about 200
bytes for a proof-of-concept operational phase. Our opera-
tional code simply monitored the number of requests han-
dled by the compromised server. The attacker can query
this number by sending specially crafted requests with an
op-code recognized by the operational code.
Apache forks oﬀ several child processes to handle incom-
ing requests, which poses some challenges to the operational
phase of our attack. A successful completion of this attack
compromises only one of these children. If subsequent at-
tacker command packets are processed by a diﬀerent child
process, then our attack code will not see them. This prob-
lem is overcome either by repeating the attack to compro-
mise multiple children, or by resending command messages
until they reach the compromised child. A related problem
is that Apache dynamically adjusts the number of running
servers based on the number of incoming requests. If server
load drops for a long period, Apache may kill some children
processes.
If all the compromised children are killed as a
result, then the attacker needs to repeat the attack in order
to compromise another one of the child processes that are
still alive.
In summary, we successfully implemented a persistent in-
terposition attack on the Apache server and were able to