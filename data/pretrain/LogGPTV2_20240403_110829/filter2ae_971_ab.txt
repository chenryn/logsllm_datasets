（3）扫描优先级
由于扫描平台需要为测试环境，线上环境等进行测试服务，并且业务量本身就很大，导致扫描集群一直都是满负荷在运行，但是平时实际过程中，经常会有应急响应需求，需要进行应急扫描，此时如何保证紧急的任务能够第一时间执行呢？
以前只能等待扫描任务完成（可能需要等待很长时间，这是所不能接受的），才能执行本次紧急任务；为了不耽误紧急任务的执行，甚至平时只能搭建一个空闲集群，专门用于紧急任务执行，但是资源严重浪费；那是否可以考虑通过单一集群即可解决优先级的问题呢？
当然可以，通过优先级机制即可解决，优先任务优先分配、优先调度、优先扫描，通过三级优先队列来解决紧急扫描问题；同时在任务分配时候，以“单poc+单url”作为最小粒度，考虑poc发包量基础上，按照可用扫描节点进行平等拆分，这样即使集群没有空闲节点，一旦有紧急任务需要扫描，那么任务所需等待的时间最理想情况下将只需要等待“单个poc+单个url”所需要的扫描时间（资源足够情况下，这种理想情况其实很大概率会发生），这种不用浪费资源即可满足优先扫描难题。
（4）热备上线
安全扫描poc在方案调研及实现过程中，由于调研的不全面或者考虑的不严谨，肯定会出现误报或者漏报问题，这时候就需要通过更新poc予以解决，现在的难点是：扫描集群时刻都有任务在运行，为了更新任务只能热备上线，不然只能将未跑完的任务全部kill掉，这样既浪费扫描资源，又严重影响扫描及时度；通过内置升级更新模块，做到不干扰当前运行任务情况下，更新节点扫描镜像，做到热备上线。
##### 数据中心建设
接下来简单说下数据中心这部分，数据中心主要负责纯净url的收集入库，解析程序每天解析T级别的日志，如果不去重的话将得到亿级别的url，为了保证扫描的及时度，需要对url进行去重去脏，主要通过hash机制进行：
[https://www.baidu.com/test.php?a=1&b=2&c=3](https://www.baidu.com/test.php?a=1&b=2&c=3)
[https://www.baidu.com/test.php?c=10&a=20&b=30](https://www.baidu.com/test.php?c=10&a=20&b=30)
针对每条URL，去掉参数值并根据key进行排序，计算hash
=md5("https://www.baidu.com/test.php?a&b&c")，相同的认为两条URL是相似的，只保留一条URL即可（ps：当然这里存在后端代码逻辑覆盖不全的问题，因为有些后端逻辑是根据参数值进行判断的，覆盖这部分逻辑会导致待扫描的URL量急剧增加，被迫做了取舍，无奈的表情）。同时计算hash的时候还需要考虑几种特殊case：
path中含有随机字符串，比如：  
/a/99c5e07b4d5de9d18c350cdf64c5aa3d  
替换后：/a/U
/a/289dff07669d7a23de0ef88d2f7129e7  
替换后：/a/U  
计算hash之前替换随机字符串为特定的字符U，则上面两者可认为是相似的；同样path中包含有数字的（/a/123456789及/a/345678901）、中文编码的（/a/%E5%AE及/a/%E5%8F）也需要进行类似处理（严谨情况下用等同长度的U进行替换然后再计算hash，主要是扫描及时度和扫描的覆盖率之间的取舍）。
除了这些具有明显特征的case外，其实还存在很多无规则的case；本质我们其实是需要一种方法去判别path中伪静态的部分（path中根据"/"进行分割），针对伪静态的部分用相同长度的字符U进行替换即可；考虑用机器学习方法以分割部分的字符数量作为feature去判别，大部分的case其实都可以很好的识别出来，但不能很好区分纯小写字符的case，比如/api/yehdhee这种，最终通过引入Markov
Chain来进行区分，基本可以解决。
除了去重去脏外，还需要定期对库中已存在的url进行存活判断、404判断等，针对这部分url需要定期进行删除处理；不过url存活判断务必放在扫描脏数据净化之后（特指带有扫描攻击payloads的url），不然你可能会不幸成为攻击者攻击自身业务的帮手（偷笑）
#### 4 总结
扫描服务累计在线上运行好几年了，到目前为止已经非常成熟，基本做到了无需人为干预（存在重大bug时其实还是需要人为干预，偷笑），存在异常时自动监测报警并自动排查恢复，POC更新时自动热备更新、高优任务第一时间优先执行而不影响之前正常运行的扫描任务，扫描出来的漏洞准确率达到98%以上基本可以做到无需人工check，输入源URL存在的情况下漏报率更是控制在0.5%以下，每天例行的任务控制在2小时内结束，漏洞发现及时度大幅提升，高危漏洞滞后于外界白帽子的case少之又少（输入源url不缺失情况下），基本实现了我们之前的预期及目标。同时也深深领悟了一句话"扫描技术虽已成熟，但只有精心耕耘方能知晓其精髓，而刚触及其精髓才知挑战依旧"，分享给大家。
本文只是简单概述了整个扫描体系，如果对扫描集群、扫描框架、扫描POC、扫描策略等详细做法感兴趣的小伙伴可以继续关注后续"分布式Web漏洞扫描服务建设实践"系列技术文章。
* * *