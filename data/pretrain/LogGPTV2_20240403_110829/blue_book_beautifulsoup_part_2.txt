# u'Elsie'
```
### Going up
Continuing the “family tree” analogy, every tag and every string has a parent:
the tag that contains it.
#### `.parent`
You can access an element’s parent with the `.parent` attribute.
```python
title_tag = soup.title
title_tag
# The Dormouse's story
title_tag.parent
# The Dormouse's story
```
#### `.parents`
You can iterate over all of an element’s parents with `.parents`.
### Going sideways
When a document is pretty-printed, siblings show up at the same indentation
level. You can also use this relationship in the code you write.
#### `.next_sibling` and `.previous_sibling`
You can use `.next_sibling` and `.previous_sibling` to navigate between page
elements that are on the same level of the parse tree:.
```python
sibling_soup.b.next_sibling
# text2
sibling_soup.c.previous_sibling
# text1
```
The `` tag has a `.next_sibling`, but no `.previous_sibling`, because there’s
nothing before the `` tag on the same level of the tree. For the same reason,
the `` tag has a `.previous_sibling` but no `.next_sibling`:
```python
print(sibling_soup.b.previous_sibling)
# None
print(sibling_soup.c.next_sibling)
# None
```
In real documents, the `.next_sibling` or `.previous_sibling` of a tag will
usually be a string containing whitespace.
```html
Elsie
Lacie
Tillie
```
You might think that the .next_sibling of the first `` tag would be the second
`` tag. But actually, it’s a string: the comma and newline that separate the
first `` tag from the second:
```python
link = soup.a
link
# Elsie
link.next_sibling
# u',\n'
```
The second `` tag is actually the `.next_sibling` of the comma:
```python
link.next_sibling.next_sibling
# Lacie
```
#### `.next_siblings` and `.previous_siblings`
You can iterate over a tag’s siblings with `.next_siblings` or
`.previous_siblings`:
```python
for sibling in soup.a.next_siblings:
    print(repr(sibling))
# u',\n'
# Lacie
# u' and\n'
# Tillie
# u'; and they lived at the bottom of a well.'
# None
for sibling in soup.find(id="link3").previous_siblings:
    print(repr(sibling))
# ' and\n'
# Lacie
# u',\n'
# Elsie
# u'Once upon a time there were three little sisters; and their names were\n'
# None
```
## [Searching the tree](https://beautiful-soup-4.readthedocs.io/en/latest/#searching-the-tree)
By passing in a filter to an argument like `find_all()`, you can zoom in on the parts of the document you’re interested in.
### Kinds of filters
#### A string
The simplest filter is a string. Pass a string to a search method and Beautiful
Soup will perform a match against that exact string. This code finds all the
`` tags in the document:
```python
soup.find_all('b')
# [The Dormouse's story]
```
#### A regular expression
If you pass in a regular expression object, Beautiful Soup will filter against
that regular expression using its `search()` method. This code finds all the
tags whose names start with the letter `b`; in this case, the `` tag and
the `` tag:
```python
import re
for tag in soup.find_all(re.compile("^b")):
    print(tag.name)
# body
# b
```
#### A list
If you pass in a list, Beautiful Soup will allow a string match against any item
in that list. This code finds all the `` tags and all the `` tags:
```python
soup.find_all(["a", "b"])
# [The Dormouse's story,
#  Elsie,
#  Lacie,
#  Tillie]
```
#### A function
If none of the other matches work for you, define a function that takes an
element as its only argument. The function should return `True` if the argument
matches, and `False` otherwise.
Here’s a function that returns `True` if a tag defines the `class` attribute but doesn’t define the `id` attribute:
```python
def has_class_but_no_id(tag):
    return tag.has_attr('class') and not tag.has_attr('id')
```
Pass this function into `find_all()` and you’ll pick up all the `` tags:
```python
soup.find_all(has_class_but_no_id)
# [The Dormouse's story,
#  Once upon a time there were...,
#  ...]
```
### find_all()
The `find_all()` method looks through a tag’s descendants and retrieves all
descendants that match your filters.
```python
soup.find_all("title")
# [The Dormouse's story]
soup.find_all("p", "title")
# [The Dormouse's story]
soup.find_all("a")
# [Elsie,
#  Lacie,
#  Tillie]
soup.find_all(id="link2")
# [Lacie]
import re
soup.find(string=re.compile("sisters"))
# u'Once upon a time there were three little sisters; and their names were\n'
```
#### The `name` argument
Pass in a value for `name` and you’ll tell Beautiful Soup to only consider tags
with certain names. Text strings will be ignored, as will tags whose names that
don’t match.
This is the simplest usage:
```python
soup.find_all("title")
# [The Dormouse's story]
```
#### The `keyword` arguments
Any argument that’s not recognized will be turned into a filter on one of
a tag’s attributes. If you pass in a value for an argument called `id`, Beautiful
Soup will filter against each tag’s `id` attribute:
```python
soup.find_all(id='link2')
# [Lacie]
```
You can filter an attribute based on a string, a regular expression, a list, a function, or the value True.
You can filter multiple attributes at once by passing in more than one keyword argument:
```python
soup.find_all(href=re.compile("elsie"), id='link1')
# [three]
```
##### Searching by CSS class
It’s very useful to search for a tag that has a certain CSS class, but the name
of the CSS attribute, `class`, is a reserved word in Python. Using class as
a keyword argument will give you a syntax error. As of Beautiful Soup 4.1.2, you
can search by CSS class using the keyword argument `class_`:
```python
soup.find_all("a", class_="sister")
# [Elsie,
#  Lacie,
#  Tillie]
```
#### The string argument
With `string` you can search for strings instead of tags.
```python
soup.find_all(string="Elsie")
# [u'Elsie']
soup.find_all(string=["Tillie", "Elsie", "Lacie"])
# [u'Elsie', u'Lacie', u'Tillie']
soup.find_all(string=re.compile("Dormouse"))
[u"The Dormouse's story", u"The Dormouse's story"]
def is_the_only_string_within_a_tag(s):
    """Return True if this string is the only child of its parent tag."""
    return (s == s.parent.string)
soup.find_all(string=is_the_only_string_within_a_tag)
# [u"The Dormouse's story", u"The Dormouse's story", u'Elsie', u'Lacie', u'Tillie', u'...']
```
Although string is for finding strings, you can combine it with arguments that
find tags: Beautiful Soup will find all tags whose `.string` matches your value for string.
```python
soup.find_all("a", string="Elsie")
# [Elsie]
```
#### [Searching by attribute and value](https://stackoverflow.com/questions/8933863/how-to-find-tags-with-only-certain-attributes-beautifulsoup)
```python
soup = BeautifulSoup(html)
results = soup.findAll("td", {"valign" : "top"})
```
#### The limit argument
`find_all()` returns all the tags and strings that match your filters. This can
take a while if the document is large. If you don’t need all the results, you
can pass in a number for `limit`.
#### The recursive argument
If you call `mytag.find_all()`, Beautiful Soup will examine all the descendants
of `mytag`. If you only want Beautiful Soup to consider direct children, you can
pass in `recursive=False`.
#### Calling a tag is like calling find_all()
Because `find_all()` is the most popular method in the Beautiful Soup search
API, you can use a shortcut for it. If you treat the BeautifulSoup object or
a Tag object as though it were a function, then it’s the same as calling
`find_all()` on that object. These two lines of code are equivalent:
```python
soup.find_all("a")
soup("a")
```
### `find()`
`find()` is like `find_all()` but returning just one result.
### `find_parent()` and `find_parents()`
These methods work their way up the tree, looking at a tag’s (or a string’s) parents.
### `find_next_siblings()` and `find_next_sibling()`
These methods use `.next_siblings` to iterate over the rest of an element’s
siblings in the tree. The `find_next_siblings()` method returns all the siblings
that match, and `find_next_sibling()` only returns the first one:
```python
first_link = soup.a
first_link
# Elsie
first_link.find_next_siblings("a")
# [Lacie,
#  Tillie]
```
To go in the other direction you can use `find_previous_siblings()` and
`find_previous_sibling()`
## [Modifying the tree](https://beautiful-soup-4.readthedocs.io/en/latest/#modifying-the-tree)
### [`replace_with`](https://beautiful-soup-4.readthedocs.io/en/latest/#replace-with)
`PageElement.replace_with()` removes a tag or string from the tree, and replaces
it with the tag or string of your choice:
```python
markup = 'I linked to example.com'
soup = BeautifulSoup(markup)
a_tag = soup.a
new_tag = soup.new_tag("b")
new_tag.string = "example.net"
a_tag.i.replace_with(new_tag)
a_tag
# I linked to example.net
```
Sometimes it doesn't work. If it doesn't use:
```python
a_tag.clear()
a_tag.append(new_tag)
```
# Tips
## Show content beautified / prettified
Use `print(soup.prettify())`.
## [Cleaning escaped HTML code](https://stackoverflow.com/questions/54496863/python-parse-html-with-escape-characters)
```python
soup = BeautifulSoup(s.replace(r"\"", '"').replace(r"\/", "/"), "html.parser")
```
# References
* [Docs](https://beautiful-soup-4.readthedocs.io/en/latest/)