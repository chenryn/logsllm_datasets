t
TS→s
t
Figure 3. Router state for trafﬁc summaries.
The trafﬁc summary recorded by a node s should reﬂect
both the packet contents and the arrival/departure time seen
at node s to enable the detection of malicious packet
corruption and delay. For the sake of scalability, the trafﬁc
summary can not simply be an entire copy of all the original
packets (or their hashes using a cryptographic hash function
such as SHA-1 which provides one-wayness and collusion
resistance) and their timing information. Instead, we use
a ﬁngerprinting function F to reﬂect the aggregates of
packet contents to reduce both router state and bandwidth
consumption for reporting the trafﬁc summaries to the AC.
We denote the ﬁngerprint for a packet stream Srs generated
), as Figure 3 depicts. In addition, as Figure 3
by r as F(S→s
shows, for a packet stream Srs (or Ssr), the trafﬁc summary
(or
of node r also contains the average departure time t→s
(or
) and the total number of packetsn →s
arrival time t←s
) in Srs (or Ssr) seen in the current epoch to enable the
n←s
detection of packet delay attacks.
Reporting. At the end of each epoch, each node s sends its
local trafﬁc summaries to the AC.
r
r
r
r
r
!
!
!
!
!
Detection. After receiving the trafﬁc summaries at the end
of an epoch, the AC runs a consistency check over the trafﬁc
summaries in each neighborhood. A large inconsistency
of the trafﬁc summaries in a certain neighborhood N(s)
indicates that N(s) is suspicious.
B. The Fingerprinting Function F
) = F(S) ∪F (S
Before we present the instantiation of F, we ﬁrst describe
the general properties that F should satisfy. To enable the
AC to detect suspicious neighborhoods, F should generate
trafﬁc summaries with the following two properties:
!,
Property 1: Given any two packet streams S and S
) can give an
the “difference” between F(S) and F(S
!, denoted by:
estimation of the difference between S and S
) ! ∆(S, S
).
∆(F(S), F(S)
Deﬁning the “difference” between F(S) and F(S
) is F-
speciﬁc, as we show shortly.
!,
Property 2: Given any two packet streams S and S
).
F(S ∪ S
The ∪ operator on the left-hand side denotes a union
!. The∪ operator
operation of the two packet streams S and S
on the right-hand side denotes a “combination” of F(S) and
F(S
These two properties enable the conversion from checking
packet stream conservation to checking the conservation of
trafﬁc summaries in a neighborhood. In other words, these
two properties enable nodes to simply store the compact
packet ﬁngerprints instead of the original packet streams
while still enabling the AC to detect the number of pack-
ets dropped, modiﬁed, and fabricated between two packet
streams from their corresponding ﬁngerprints.
the AC only
Speciﬁcally, during the detection phase,
needs to compare the difference between (i) the combined
trafﬁc summaries for packets sent to node s in N(s), i.e.,
), and (ii) the combined trafﬁc summaries for
∪i∈N(s) F(S→s
).
packets received from node s in N(s), i.e., ∪i∈N(s) F(S←s
By Properties 1 and 2:
), ∪
∆( ∪
), which isF -speciﬁc and deﬁned shortly.
F(S→s
F(S←s
))
i
i
!
!
i
i
i
i
, ∪i∈N(s) S←s
(1)
) reﬂects the discrep-
Note that ∆(∪i∈N(s) S→s
ancy between packets sent to and received from node s, and
a large discrepancy indicates packet dropping, modiﬁcation,
and fabrication attacks in N(s).
Sketch for F. The pthmoment estimation sketch [5], [17],
[33]
for path-based
FL) serves as a good candidate for F. More speciﬁcally,
pthmoment estimation schemes use a random linear map
to transform a packet stream into a short vector, called the
sketch, as the trafﬁc summary. In benign cases, packets, if
(as used by Goldberg et al.
[19]
i∈N(s)
=∆( F( ∪
i∈N(s)
i∈N(s)
), F( ∪
S→s
i
! ∆( ∪
i∈N(s)
S→s
i
, ∪
i∈N(s)
S←s
i
)) based on Property 2
based on Property 1
i∈N(s)
S←s
)
i
320
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
viewed as 1.5KB (the Maximum Transmission Unit) bit-
vectors, are “randomly” drawn from {0, 1}1536×8. Hence,
different packet streams will result in different sketches with
a very high probability (w.h.p.). Goldberg et al. [19] also
extensively studied how to estimate the number of packets
dropped, injected, or modiﬁed between two packet streams
from the “difference” of two corresponding sketch vec-
tors, thus satisfying Property 1. Speciﬁcally, the difference
) (used in Property 1) between two sketch
∆(F(S), F(S)
vectors is deﬁned as:
!
!
) = ||F(S) −F (S)
(2)
∆(F(S), F(S)
where ||x||p
p denotes the pthmoment of the vector x. We
can further prove that the sketch satisﬁes Property 2 and
! used in Property 2 is
the combination of F(S) and F(S)
deﬁned as:
||p
p
!
!
!
F(S) ∪F (S)
= F(S) + F(S)
(3)
where + denotes the addition of two vectors. The proof is
as follows.
Proof: A sketch function F over a set of elements S =
{p1, p2, . . . , pn} can be implemented in a “streaming” mode
using a hash function h [19], where:
h(pi) → $vi
(4)
and $vi denotes a vector. More speciﬁcally:
F(S) = F({p1, p2, . . . , pn}) = h(p1) +h( p2) +. . . + h(pn)
(5)
Hence, given two packet streams S = {p1, p2, . . . , pn}
and S
!
= {p
!
!
1, p
2, . . . , p
!
F(S ∪ S
) =F ({p1, . . . , pn, p
!
n!}, we have:
1, . . . , p
!
!
n!})
!
= h(p1) + . . . + h(pn) +h( p
1) + . . . + h(p
!
n!)
(6)
and:
F(S) +F (S
!
) =F ({p1, . . . , pn}) + F({p
!
!
1, . . . , p
n!})
!
= h(p1) + . . . + h(pn) + h(p
1) + . . . + h(p
(7)
From Equations 6 and 7 we can see that: when F(S) ∪
) =
) is deﬁned as F(S) +F (S
), we have F(S ∪ S
!
!
!
), thus proving Property 2 for Sketch.
F(S
F(S) ∪F (S
!
!
n!)
C. Challenges in a Neighborhood-based FL
From Property 1, we can further derive the following
conditions on the ﬁngerprinting function F. Given any two
packet streams Sr and St seen at nodes r and t, respectively,
a ﬁngerprinting function computed by r and t should satisfy:
(8)
(9)
if Sr = St, F(Sr) = F(St)
if Sr $= St, F(Sr) $= F(St) w.h.p.
321
F(S→s
r
) →
0001
!
Find a S
F(S
t such that
t) →
0001
!
!
F(S
t) →
0001
r
Srs
s
!
t (!= Srs)
S
t
F(S→s
r
) = F(S
!
t), no faults detected!
Figure 4. An example of stealthy packet modiﬁcation attacks when nodes
do not use different secret keys for computing F. For simplicity, the sketch
vector is represented as a ‘0-1’ bit vector. The malicious node s modiﬁes
t still
the packet stream in such a way that the modiﬁed packet stream S
results in the same sketch vector as Srs at node t.
!
The ﬁrst condition ensures the consistency of trafﬁc sum-
maries (more precisely, sketches in the trafﬁc summaries) in
the benign case when the packet streams are not corrupted
between nodes r and t. The second condition ensures
that if packet corruption happens between nodes r and t,
inconsistency of the trafﬁc summaries will be observed,
which will then enable the estimation of packet difference
in the corresponding packet streams (Property 1). However,
these two conditions tend to be contradicting and lead to the
following dilemma.
F without different secrets. If the random linear map in
F (which can be implemented as a hash function [14]), is
not computed with different secret keys by different nodes,
a malicious node can predict the F output of any other node
for any packet. Since F maps a set of packets (or their 160-
bit cryptographic hashes) to a much smaller sketch, hash
collisions will exist where two different packets produce the
same F output (since sketch is not proven to perserve the
collision resistance property of the cryptographic hash func-
tion). Hence, a malicious node can leverage such collisions
to modify packets such that the modiﬁed/fabricated packets
will produce the same F output at other nodes, violating the
condition in (9). Figure 4 depicts such an example.
F with different secrets. If nodes compute F with different
secret keys to satisfy the condition in (9), it is hard for
the AC to perform a consistency check among the resulting
sketches. For example, even the same packet stream would
result in different sketches at different nodes, thus violating
the condition in (8). Figure 5 depicts such an example. Since
the sketch is only a compact and approximate representation
of the original packet stream, the AC cannot revert the
received sketches to the original packet streams to check
packet stream conservation.
Scalability vs. sampling. Even with F for packet ﬁnger-
printing, a trafﬁc summary over a huge number of packets
can become too bandwidth-consuming to be sent frequently
to the AC (e.g., every 20 milliseconds). For example, the
number of packets for an OC-192 link (10Gbps) can be
on the order of 107 per second in the worst case, which
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
replacements
F(S→s
r
) →
0001
F(S←s
t
) →
1001
r
Srs
s
Sst(= Srs)
t
F(S→s
r
) != F(S←s
t
), suspicious!
Figure 5.
Illustration of the difﬁculty in using different secret keys when
computing F. The sketch vector is represented as a ‘0-1’ bit vector for
simplicity. In this example, nodes r, s and t use different secret keys when
computing the Sketch to generate their trafﬁc summaries.
swells the size of a sketch to hundreds of bytes to bound
the false positive rate below 0.001 [19] and may require
several KB/s bandwidth for the reporting by each node.
Packet sampling represents a popular approach to reducing
bandwidth consumption, where each node only samples a
subset of packets to feed into F for generating the trafﬁc
summaries. To enable a consistency check of the trafﬁc
summaries in a neighborhood, all nodes in a neighborhood
should sample the same subset of packets, and the challenge
is how to efﬁciently decide which subset of packets all
nodes should agree to sample. For security, the sampling
scheme must ensure that a malicious node cannot predict
whether a packet to be forwarded will be sampled or not.
Otherwise, the malicious node can drop any non-sampled
packets without being detected.
The problem is further complicated by the presence of
collusion attacks in our strong adversary model as well as
our path obliviousness requirement. Several existing sam-
pling schemes are broken when applied to our setting. For
example, in Symmetric Secure Sampling (SSS) [19], the
packet sender and receiver use a shared Pseudo-Random
Function (PRF) P to coordinate their sampling. Imported
to our setting, e.g., using the neighborhood example in
Figure 5, nodes r and t share a secret key Krt and a PRF P,
compute P with Krt for each packet, and sample the packet
if the PRF output is within a certain range. In this way, node
s itself cannot know whether a packet is sampled or not.
However, this approach fails in our setting. We consider the
topology in Figure 5 for example:
• If s and r collude, r can inform s of which packets are
sampled, so that s can safely drop non-sampled packets
and not be detected.
• Due to the dynamic trafﬁc pattern, an ingress node r of
a neighborhood N(s) does not know which egress node
a packet will traverse in N(s) (if s has more neighbors
besides r and t, there exist multiple possible egress
nodes than t). Hence, r does not know which PRF
or secret key to use for packet sampling, given that
r shares a different secret key with each node in N(s).
D. DynaFL Key Ideas
s and K e
In DynaFL, nodes temporarily store the cryptographic
hashes (which are collision-resistant) for all packets re-
ceived/sent per neighbor in an epoch. At the end of each
epoch e, nodes use epoch sampling to decide if packets in the
epoch are to be ﬁngerprinted; if so, nodes generate the trafﬁc
summaries and report them to the AC. This reduces both the
communication overhead for sending the trafﬁc summaries
to the AC and the computational overhead for generating
and checking the trafﬁc summaries. Speciﬁcally, nodes ﬁrst
use the network-wide identical per-epoch sampling key K e
(described shortly) for computing a PRF P to determine if
the current epoch is “selected”; if and only if the current
epoch is selected, nodes will use F with the network-
wide identical per-epoch ﬁngerprinting key K e
f (described
shortly) to map packets into per-neighbor trafﬁc summaries.
f enables consistency checking
Using the same K e
over the trafﬁc summaries from different nodes.