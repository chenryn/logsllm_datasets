### AODV Routing and Inner-Circle Approach

#### AODV Routing
In AODV (Ad hoc On-Demand Distance Vector), a source node \( S \) requests a route to a destination node \( D \) by flooding a Route Request (RREQ) message throughout the network. When the RREQ reaches \( D \), node \( D \) constructs a Route Reply (RREP) message, which is unicast back to \( S \) using the reverse route through which the RREQ was received. Forwarding nodes update their routing tables to create a route from \( S \) to \( D \).

#### Inner-Circle Approach
The inner-circle approach enhances AODV by maintaining a mapping \( fw \) in each node. This mapping associates a pair \((D, dseqno)\)—where \( D \) is the destination node and \( dseqno \) is the destination sequence number—with the set of nodes that can forward messages addressed to node \( D \) when the active route to \( D \) has the destination sequence number \( dseqno \). The operation is as follows:

1. **AODV Service at Node \( c \)**:
   - Node \( c \) (initially node \( D \)) sends a RREP message \(\langle \text{RREP}, \text{route dst}, \text{dseqno}, \text{next hop} \rangle\), where:
     - \(\text{route dst}\) is the destination \( D \).
     - \(\text{dseqno}\) is the associated destination sequence number.
     - \(\text{next hop}\) is \( c \)'s designated next node in the process of unicasting the RREP message back to node \( S \).

2. **Inner-Circle Interceptor**:
   - Node \( c \)'s Inner-circle Interceptor intercepts the RREP message and passes it to \( c \)'s Inner-circle Voting Service (see Fig. 1).
   - A deterministic voting algorithm is executed (see Fig. 3(a)), where node \( c \) sends a propose message to its inner-circle nodes. The propose message includes the intercepted RREP message.

3. **Validation by Inner-Circle Nodes**:
   - On receiving the propose message, an inner-circle node \( p \) verifies that \( c \)'s proposed RREP is valid (method `check` of Inner-circle Callbacks).
   - The check succeeds only if \( c \) is the destination of the sought route (\( c = \text{route dst} \)) or \( p \) considers \( c \) as a valid forwarding node to the route destination (\( c \in \text{fw}(\text{route dst}, \text{dseqno}) \)).

4. **Agreement and Update**:
   - If \( L \) inner-circle nodes acknowledge \( c \)'s proposed RREP, then \( c \) assembles an agreed message.
   - On receiving the agreed message, an inner-circle node \( p \) updates the local mapping \( fw \) to include both nodes \( c \) and \(\text{next hop}\) (method `onAgreed`).
   - If \( p \) is \( c \)'s designated next hop, then \( p \) passes the RREP message encapsulated in the agreed message to its local AODV service.

5. **Continuation of Operation**:
   - The operation continues with node \( p \)'s AODV service sending an RREP message heading back to \( S \).
   - Node \( p \) also sends the agreed message to all its inner-circle nodes (including \( c \)'s designated next hop).

### Neutralizing Black Hole Attacks
Some work has attempted to cope with black hole attacks in AODV networks. These techniques require changes to AODV, have limited coverage, and unbounded detection latency because they are based on network-wide mechanisms. They cannot handle attack variations such as gray hole attacks, where a malicious node behaves most of the time as a good node but occasionally acts as a black hole node [4, 5, 23].

In our approach, each wireless node embeds the inner-circle framework, which intercepts incoming/outgoing RREP messages and runs a deterministic voting service (see § 4.2) to check the validity of those messages. The execution of the deterministic voting protocol is adapted by instantiating Inner-circle Callbacks (see § 4) that implement AODV-specific actions to prevent black hole attacks.

**Example Execution**:
- Figure 6(a)–(d) illustrates an execution example with a dependability level \( L = 1 \).
- In Figure 6(e), a malicious node \( M \) sends an invalid RREP message that never gets approved by \( M \)'s inner-circle nodes, thus preventing it from propagating in the network.

**Effectiveness**:
- It can be shown [16] that if the dependability level \( L \) is chosen to guarantee at least one non-Byzantine inner-circle node other than the center node (i.e., \( T = 1 \), see § 4.2), then the mechanism ensures that only valid routes are established. A malicious node \( M \) cannot diffuse a malicious RREP message for a destination \( D \) if \( M \) is not on a path to destination \( D \).

**Simulation Results**:
- We used the ns-2 network simulator [3] to study the effectiveness of the inner-circle approach in neutralizing black hole attacks.
- Simulation parameters and results are reported in Figure 7.
- Figure 7(a) shows the overall network throughput. A single malicious node can cause up to 1000% throughput degradation (from 98% to 9% throughput) in a network of 50 nodes. This degradation increases to 3000% (3.5% throughput) for 10 malicious nodes.
- The inner-circle approach incurs a 10% throughput degradation in the absence of attacks (due to underlying STS and IVS communication) but significantly reduces the effect of malicious nodes to only 22% throughput degradation.
- Figure 7(b) shows a node's average energy consumption. The overhead brought by the inner-circle approach ranges from 7% in the absence of attacks to less than 50% in the presence of attacks.

### Reliable and Secure Sensor Networks: Faulty Sensors Case Study
This section demonstrates the application of the inner-circle consistency approach to improve sensor data accuracy despite sensor errors. The scenario involves a wireless sensor network deployed in a remote region \( R \) to detect and localize events of interest. A target event at location \( u \) emits an energy signal \( S_i(u) \) that can be measured by a sensor node \( i \) at location \( s_i \). The strength of the emitted signal decays polynomially with distance, as modeled below [19]:

\[ S_i(u) = \frac{K \cdot T}{(d/d_0)^k} \quad \text{if} \; d > 1 \]

**Sensor Fault Models**:
- **Calibration Error**: A faulty sensor \( i \)'s readings are affected by a multiplicative error: \( E_i = \alpha_{\text{clbr}} \cdot (S_i + N_i^2) \).
- **Signal Interference**: A faulty sensor \( i \) reports readings affected by strong environmental disturbances: \( E_i = S_i + \alpha_{\text{intf}} \cdot N_i^2 \).
- **Positioning Error**: A faulty sensor \( i \) has an incorrect estimate of its own position \( s_i \): \( s_i \sim \text{Uniform}(R) \).

**Solutions**:
- **Centralized Solution**: The base station collects raw target notifications \(\langle t_i, E_i, u_i \rangle\) as they are generated by the sensor nodes.
- **Inner-Circle Solution**: Each wireless sensor node embeds the inner-circle framework, which intercepts incoming/outgoing directed diffusion messages carrying target notifications \(\langle t_i, E_i, u_i \rangle\) and runs the statistical voting service. The execution of the statistical voting protocol is adapted by instantiating Inner-circle Callbacks (see § 4) that implement sensor-specific actions to prevent both faulty and redundant data propagation.

**Reliable and Secure In-Network Processing**:
- The inner-circle solution uses statistical voting to improve the fidelity of each field of a target notification \(\langle t_i, E_i, u_i \rangle\). The fault-tolerant cluster algorithm (see § 4.3) is used as the fault-tolerant fusion function.
- A target's position is estimated locally by:
  1. Computing the distance \( d_i \) of each inner-circle sensor \( i \) from the target (using Eqn. 4).
  2. Using a trilateration algorithm on each triple of pairs \((u_i, d_i)\) to obtain \( L \) target location estimates \( p_i \).
  3. Filtering the obtained estimates \( p_i \) with the fault-tolerant cluster algorithm.

**Simulation Results**:
- We used the ns-2 network simulator [3] to study the effectiveness of the inner-circle approach in coping with sensor errors.
- Simulation parameters and results are reported in Figure 8.
- Figure 8(a) shows the probability of missing a valid target, which is zero for all configurations considered.
- Figure 8(b) shows the probability of a spurious target detection. In the centralized case (marked as "No IC" on all graphs), this probability can be as high as 19% (under the signal interference fault model), while the inner-circle solution can reduce it to zero by exploiting target information shared by neighboring nodes.
- Figures 8(c) and 8(d) show a node's average energy consumption both when there is a target and when there is no target. The figures indicate an over 50% reduction in energy consumption, which can double the overall network lifetime.
- Figures 8(e) and 8(f) show the target detection latency and the target localization accuracy, respectively.