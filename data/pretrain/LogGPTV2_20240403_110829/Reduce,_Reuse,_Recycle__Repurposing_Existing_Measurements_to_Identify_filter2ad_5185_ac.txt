. The ta out-
i
lier does not coincide with an outlier for U ′k,d
, therefore we
i
infer a potential IP-level border path change for τd at ta. In
contrast, during tb both time series exhibit outliers, which
indicates that a potential change happened outside the over-
lapping subpath between the BGP and traceroute paths.
and U ′k,d
i
and U ′k,d
i
When the set of VPs Vj,d
have updates in window wi that
are detected as outliers, we check the corresponding series U ′k,d
i
for any and all ASes ak (cid:60) τd traversed by the VPs in Vj,d
. If
at least one VP did not traverse any other AS ak experiencing
contemporaneous updates, then we generate a staleness prediction
signal for the traceroute. Figure 4 shows an example of how we
correlate the U j,d
time series to infer IP-level border
changes.
i
i
i
It is possible that U j,d
i may experience update bursts
in the same time interval for different root causes. However, since
usually at least some VPs in Vj,d0
do not share the same “extra” AS
ak and hence observe AS aj independent from ak, the technique
can usually differentiate such contemporaneous but independent
update bursts from bursts originating only from ak. More sophisti-
cated root cause detection techniques have been proposed in the
past [10, 27, 41], but these works focus on (the simpler case of)
bursts of BGP updates that include AS path changes.
4.2 Detecting Changes from Public Traceroutes
To identify changes that do not manifest in the visible BGP dynam-
ics, we passively consume the massive, publicly-available traceroute
datasets issued by monitoring platforms such as RIPE Atlas and
Ark [12, 67, 68]. For instance, as of April 2020, RIPE Atlas consists of
almost 11K active vantage points that collectively issue more than
10K measurements per second that are made publicly available [67].
While public datasets have lots of measurements overall, they
have two key limitations due to limited probing budgets. First, most
vantage points have recent traceroutes to only a small fraction of
destinations, and so the IP-level overlap between the public dataset
and the monitored corpus may be small. Second, many paths in
public traceroutes are refreshed infrequently, so we cannot rely
on directly observing a path change, unlike with BGP monitoring,
where essentially every path change comes with an update.
To improve the overlap between public datasets and the mon-
itored corpus to identify which corpus traceroutes have become
out of date, our techniques loosen the definition of overlap. First,
because the set of public traceroutes is large overall but contains
IMC ’20, October 27–29, 2020, Virtual Event, USA
Vasileios Giotsas et al.
relatively infrequent traceroutes to most individual destinations, we
maintain a sliding window of recent public traceroutes and consider
those that overlap a subpath of a corpus traceroute τ regardless of
their destination, loosening the destination-based monitoring of
Section 4.1. The window size (duration) can be configured based
on the use case, the size of the traceroute corpus being maintained
relative to the budget (if any) available to refresh it, and the relative
impact of removing a traceroute that is still valid versus waiting
too long to prune a stale traceroute. Generally, a shorter window
size allows for more timely staleness detection, while a longer win-
dow size enables staleness detection for more paths. Second, to
further increase coverage without compromising accuracy, we use
two techniques that offer different tradeoffs between the degree
of overlap they require and the granularity of changes they can
detect. One technique requires IP-level hop-by-hop overlap along a
subpath and can detect IP-level border changes (§4.2.1). The other
technique loosens the subpath overlap required, looking for pub-
lic traceroutes that go from ⟨AS1, city1⟩ to ⟨AS2, city2⟩ via border
router r (possibly with other hops in between), but can only detect
router-level border changes (§4.2.2).
Given that our techniques “ignore” that BGP routing is destination-
based when deciding which public traceroutes overlap a corpus
traceroute, we use two approaches to avoid compromising accuracy.
First, we restrict ourselves to subpaths that cross AS boundaries.
Interdomain policies are more stable and provide a more reliable
signal than intradomain routes, where traffic engineering can intro-
duce dynamic and unpredictable routing reconfigurations. Second,
rather than relying on an individual public traceroute as a signal,
we look for significant shifts in the relative frequency at which
public traceroutes uncover different routes between two points
on a corpus traceroute. An individual public traceroute may differ
from a corpus traceroute for reasons including load balancing or
destination-based routing, whereas shifts in the frequency at which
a subpath is observed across many traceroutes suggests meaningful
routing changes.
Section 4.2.1 presents the concrete details of the technique for
IP-level subpaths, and Section 4.2.2 describes how we adapt it for
border-level paths between two cities. Additionally, Section 4.2.3
describes our approach to capture changes in IXP membership.
Capturing IXP membership changes allows us to infer concurrent
path changes that affect multiple sources and destinations.
match
i,m,n
be those that traverse τ⟨m,n⟩ andT
Inference of IP-level subpath changes. For each corpus trace-
4.2.1
route τd = ⟨ι0, . . . , d⟩, we process every subpath τ⟨m,n⟩ = ⟨ιm, . . . ,
ιn⟩, 0 ≤ m < n ≤ d that traverses at least one inter-AS boundary
as follows:
(1) Among recent public traceroutes (those within the sliding
intersect
window), letT
i,m,n
be those that go through ιm on the way to ιn (but may follow
a subpath other than τ⟨m,n⟩).
|, the fraction of traceroutes
intersect
(2) Let T
i,m,n
within a sliding window wi between ιm and ιn that match
τd.
and generate a stale-
ness prediction signal when we detect an outlier in the time-
series using the modified z-score introduced in [37]. We use
the modified z-score instead of the Bitmap algorithm we
(3) We construct the time series of T
i,m,n |÷|T
match
ratio
i,m,n
ratio
i,m,n
= |T
1
0
Figure 5: Example of monitoring a path in our traceroute cor-
0 (from s1
pus for router-level border changes. Traceroute τ
⟨cm,cn ⟩ = {1, . . . 2, . . . 3}
to d1, green) traverses the subpath τ
between cities cm and cn, with hop 2 being on the border
1 (from
router r between two ASes ASm and ASn. Traceroute τ
s2 to d2, blue) traverses the same city-level hops through a
⟨cm,cn ⟩ = {4, . . . 5, . . . 6}, with hop 5 on
different subpath τ
0 and τ
1
the same border router r as hop 2. As such, both τ
match(r)
i,cm,cn ⊆ T
2 (from
are contained in T
. Traceroute τ
s3 to d3, orange) also traverses the city-level hops cm and
⟨cm,cn ⟩ = {7, . . . 8, . . . 9}, which
2
cn but through a subpath τ
crosses a different border router r′. Therefore, τ
match(r)
,
i,cm,cn
3 (from s4 to d4,
but τ
intersect
pink) traverses hops 10, 11, and 12, and is not part of T
i,cm,cn
since it does not intersect any IP in city cn.
still. Finally, traceroute τ
intersect
i,cm,cn
intersect
i,cm,cn
2 ∈ T
2 (cid:60) T
used for outlier detection in time series derived from BGP
data (§4.1.2), because we found it to be more robust for the
noisier traceroute data.
Configuration of signal parameters. For each monitored subpath
τ⟨m,n⟩ we require that we have at least 20 consecutive windows,
which is widely considered as the minimum recommended number
of observations for robust outlier detection [53]. Accordingly, for
each τ⟨m,n⟩ we select the minimum window size that would allow
us to collect 20 consecutive windows with data points. We use a
minimum window duration of 15 minutes, the window size used in
our BGP signals, and a maximum window size of 24 hours, to limit
the amount of public traceroutes that we need to accumulate and
process to 20 days to avoid resource-scaling and performance issues.
If for a given τ⟨m,n⟩ we have less than 20 consecutive windows
with data points, we do not consider this subpath for staleness
inferences.
Inference of router-level border changes. If public traceroutes
4.2.2
do not reveal a stable distribution as to how frequently we see dif-
ferent paths between ιm and ιn, it is difficult to determine whether
shifts indicate changes in which paths are in use or unrelated noise
(i.e., the time series T
is not amenable to outlier detection).
However, if public traceroutes indicate that two ASes ASm and
ASn consistently use a specific border router r to exchange traffic
between certain geographical locations (regardless of variations in
the IP-level), then later indicate that the same ASes consistently
use a different border router r′ to transit traffic between the same
ratio
i,m,n
s113s2d1d246ASnASmCity cmCity cnBorder Router r25Border Router r'12City ckτ1τ2τ3s37s4108119d3d4τ0Repurposing Existing Measurements to Identify Stale Traceroutes
IMC ’20, October 27–29, 2020, Virtual Event, USA
locations, it is likely that the ASes changed routing policy, as rout-
ing decisions such as early exit will generally be consistent across
a PoP or city [70].
intersect
i,cm,cn
intersect
i,cm,cn
match(r)
i,cm,cn ⊆ T
We adapt the approach in Section 4.2.1 as follows. LetT
be
the set of recent public traceroutes that traverse (any) ιm located in
city cm and ASm, and (any) ιn located in city cn and ASn, with cm (cid:44)
cn. Let T
be the public traceroutes that traverse
the border router r between ⟨ASm, cm⟩ and ⟨ASn, cn⟩. Figure 5
match(r)
i,cm,cn | ÷
illustrates these sets. We compute the T
i,cm,cn |, for each time window wi. The size of the time window
|T
intersect
ratio(r)
is selected as in §4.2.1. When we detect outlier values in the T
i,cm,cn
time series, we generate a staleness prediction signal indicating a
border-level change between ASm and ASn.
ratio(r)
i,cm,cn
= |T
Inference of IXP membership changes. We calculate an initial
4.2.3
snapshot of IXP membership at the start of the staleness detection
period based on PeeringDB, which we augment with the ASes
that appear adjacent to IXP interfaces in traceroutes to account
for missing PeeringDB information. We then continue to monitor
the ASes that appear as near-end (left-adjacent) neighbors of IXP
interfaces in our public traceroute feed. We ignore ASes that appear
as far-end neighbors (right-adjacent) of IXPs, since most routers
reply with the ingress interface to traceroute probes, which means
that the next hop of an IXP interface may not correspond to the AS
to which the IXP interface is assigned.
When we detect ASi as a new IXPx member, we search for
(previously-collected) traceroutes that include ASi and another ASj
that is already a member of IXPx in our corpus, since the path may
have changed to go directly from ASi to ASj via IXPx . For each such
traceroute, we check the relationship between ASi and the next-hop
ASk used to reach ASj using CAIDA’s AS relationship database [49].
If ASk is a provider of ASi, then we generate a staleness prediction
signal, as ASi may prefer to send traffic to ASj directly using the
new, cheaper IXP interconnection. If ASk is a public peer of ASi
(i.e., peering over a different IXP), we also generate a signal, since
we assume shortest AS path routing when two neighbors have the
same peering relationship (and BGP Local Preference). If ASk is a
private peer (i.e., the peering is not over an IXP interface) we do not
generate a signal, since private peers are often assigned higher BGP