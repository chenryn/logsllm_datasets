### Observation and Protocol Design

Observations indicate that the assumption "less than a third of the processes can crash" (i.e., \( f < \frac{n}{3} \)) is not overly restrictive. This section demonstrates that this stronger assumption enables the design of a more efficient protocol, specifically, a second phase consisting of a single communication step.

#### Assumption and Protocol Efficiency

The assumption \( f < \frac{n}{3} \) allows for the design of a second (commit) phase with a single communication step. The resulting protocol is illustrated in Figure 5, where `reci` is now a bag (or multiset) of values. A bag is a collection of elements where an element may occur any finite number of times, e.g., {a, a, b} is a bag containing two 'a' elements and one 'b' element.

Given that \( (n - f) > \frac{n}{2} \), we observe that during a round \( r \), no two processes can decide on different values at lines 4-5. If a process \( p_i \) decides on a value \( v \) at line 5, at most \( f \) PHASE2 messages can carry a value different from \( v \). Since any process \( p_j \) executing the second phase receives at least \( (n - f) \) PHASE2 messages, it follows that at least \( (n - f) - f = n - 2f \) of these messages carry the value \( v \).

Furthermore, since \( (n - 2f) > f \) (from the assumption \( n > 3f \)), even if the \( f \) PHASE2 messages that carry a different value all carry the same value \( v' \), this value \( v' \) is carried by fewer than \( n - 2f \) messages. Therefore, \( p_j \) adopts \( v \) as its estimate at line 6. Consequently, once a process decides on \( v \), all estimates are set to \( v \), ensuring agreement is not violated. The proof of the termination property remains the same as before.

#### Communication Steps per Round

Table 1 summarizes the number of phases (communication steps) per round when the function `comp_est(r)` is implemented using the RO (Random Oracle) or LO/COND (Leader Oracle/Condition) modules for each value of \( r \). Notably, the general protocol described in Figure 1 includes existing protocols. For instance, if \( \forall r: \text{comp\_est}(r) = \text{RO} \), it corresponds to Ben-Or’s protocol [3]. If \( \forall r: \text{comp\_est}(r) = \text{LO} \), it matches the protocol in [17].

| Module | \( f < \frac{n}{2} \) | \( f < \frac{n}{3} \) |
|--------|----------------------|----------------------|
| RO     | 2                    | 1                    |
| LO     | 3                    | 2                    |
| COND   | 3                    | 2                    |

### Failure Detector Oracles

The class of failure detectors denoted as \( \Diamond S \) is one of the classes introduced by Chandra and Toueg in [5], which shows that \( f < \frac{n}{2} \) is necessary to solve consensus with such failure detectors. Several \( \Diamond S \)-based consensus protocols have been proposed, and a general framework for defining such protocols is presented in [9].

A failure detector of the \( \Diamond S \) class provides each process \( p_i \) with a set `suspectedi` containing processes suspected to have crashed. If \( p_j \in \text{suspectedi} \), then \( p_i \) suspects \( p_j \). A failure detector belongs to the \( \Diamond S \) class if it satisfies:

- **Strong Completeness**: Eventually, every crashed process is permanently suspected by every correct process.
- **Eventual Weak Accuracy**: There is a time after which some correct process is never suspected by the correct processes.

If the system is equipped with a \( \Diamond S \) failure detector, an additional module can be added to the protocol, as shown in Figure 6. Each round selects a predetermined process \( p_c \) to impose its estimate on all processes. Due to the completeness property, no process can deadlock in the module FD_ES. Moreover, due to the eventual weak accuracy property, the first phase will eventually ensure all estimates are equal.

### Rotating Coordinator Paradigm

Let FD_ES' be the same module as FD_ES, but with line 405 modified to: `if PHASE1_FDO(ri, v) received then esti ← v else esti ← ⊥ endif`.

When the generic protocol (Figure 1) is instantiated with \( \forall r: \text{I(comp\_est(r))} = \text{FD\_ES'} \), the first phase of the second phase (lines 5-8 in Figure 1) becomes unnecessary. The resulting protocol requires only two steps per round, which is the \( \Diamond S \)-based protocol defined in [16].

This improvement is possible because a \( \Diamond S \) failure detector allows for a rotating coordinator-based protocol. The coordinator process \( p_c \) is determined by \( c = (r \mod n) + 1 \). During round \( r \), the coordinator feeds the other processes with its current estimate \( v \). This ensures that at the end of the first phase, any process \( p_i \) considers either \( v \) or \( \bot \) as its estimate, eliminating the need for a filtering phase.

### Conclusion

This paper explores a modular and versatile approach to solving the consensus problem in asynchronous distributed systems where up to \( f \) processes may crash (\( f < \frac{n}{2} \)), but equipped with appropriate oracles. It presents a generic protocol that proceeds through consecutive asynchronous rounds, each following a two-phase pattern. The first phase is a selection phase, while the second phase ensures termination and agreement. The behavior of the first phase is governed by the system's oracles, and the second phase depends on \( f \). The protocol can be instantiated in various ways based on the oracles and the value of \( f \).

### References

[1] Aguilera M.K. and Toueg S., Failure Detection and Randomization: a Hybrid Approach to Solve Consensus. SIAM Journal of Computing, 28(3):890-903, 1998.
[2] Attiya H. and Welch J., Distributed Computing: Fundamentals, Simulations and Advanced Topics, McGraw–Hill, 451 pages, 1998.
[3] Ben-Or M., Another Advantage of Free Choice: Completely Asynchronous Agreement Protocols. Proc. 2nd ACM Symposium on Principles of Distributed Computing, ACM Press, pp. 27-30, Montréal, 1983.
[4] Chandra T., Hadzilacos V. and Toueg S., The Weakest Failure Detector for Solving Consensus. Journal of the ACM, 43(4):685–722, July 1996.
[5] Chandra T. and Toueg S., Unreliable Failure Detectors for Reliable Distributed Systems. Journal of the ACM, 43(2):225-267, 1996.
[6] Dwork C., Lynch N.A. and Stockmeyer L., Consensus in the Presence of Partial Synchrony. Journal of the ACM, 35(2):288–323, 1988.
[7] Fischer M.J., Lynch N.A. and Paterson M.S., Impossibility of Distributed Consensus with One Faulty Process. Journal of the ACM, 32(2):374-382, 1985.
[8] Hadzilacos V. and Toueg S., Reliable Broadcast and Related Problems. In Distributed Systems, ACM Press (S. Mullender Ed.), New-York, pp. 97-145, 1993.
[9] Hurfin M., Mostefaoui A. and Raynal M., A Versatile Family of Consensus Protocols Based on Chandra-Toueg’s Unreliable Failure Detectors. IEEE Transactions on Computers, 51(4), April 2002.
[10] Keidar I. and Rajsbaum S., On the Cost of Fault-Tolerant Consensus When There Are No Faults - A Tutorial. SIGACT News (Dist Comp Column), 32(2):45-63, 2001.
[11] Lamport L., The Part-Time Parliament. ACM Transactions on Computer Systems, 16(2):133-169, 1998.
[12] Lynch N.A., Distributed Algorithms. Morgan Kaufmann Pub., San Francisco (CA), 872 pages, 1996.
[13] Mostefaoui A., Rajsbaum S. and Raynal M., Conditions on Input Vectors for Consensus Solvability in Asynchronous Distributed Systems. Proc. 33rd ACM Symposium on Theory of Computing, pp. 153-162, July 2001.
[14] Mostefaoui A., Rajsbaum S., Raynal M. and Roy M., A Hierarchy of Conditions for Consensus Solvability. Proc. 20th ACM Symposium on Principles of Distributed Computing, pp. 151-160, Newport (RI), 2001.
[15] Mostefaoui A., Rajsbaum S., Raynal M. and Roy M., Efficient Condition-Based Consensus. 8th Int. Colloquium on Structural Information and Communication Complexity (SIROCCO’01), Carleton Univ. Press, pp. 275-293, Val de Nuria, Catalonia (Spain), June 2001.
[16] Mostefaoui A. and Raynal M., Solving Consensus Using Chandra-Toueg’s Unreliable Failure Detectors: a General Quorum-Based Approach. 13th Symp. on DIStributed Computing, LNCS #1693, pp. 49-63, 1999.
[17] Mostefaoui A. and Raynal M., Leader-Based Consensus. Parallel Processing Letters, 11(1):95-107, 2001.
[18] Mostefaoui A., Raynal M. and Tronel F., From Binary Consensus to Multivalued Consensus in Asynchronous Message-Passing Systems. IPL, 73:207-213, 2000.
[19] Mostefaoui A., Raynal M. and Tronel F., The Best of Both Worlds: a Hybrid Approach to Solve Consensus. Proc. D-SN’00, pp. 513-522, June 2000.
[20] Rodrigues L. and Veríssimo P., Topology-Aware Algorithms for Large Scale Communication. Advances in Dist. Systems, LNCS #1752, pp.1217-1256, 2000.