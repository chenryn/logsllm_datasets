(⟨⟨·⟩⟩), which is the same for all proofs, homomorphically translates
target heaps, functions, statements etc. into source ones.
We depict our proof approach in Figure 2. There, circles and
contoured statements represent source and target states. A black
dotted connection between source and target states indicates that
they are related; dashed target states are not related to any source
state. In our setup, execution happens either on the attacker side or
on the component side, coloured connections between same-colour
states represent reductions.
⟨⟨A⟩⟩ / A
executes
δ σ
1
δ σ
1
ifz
(cid:74)ifz(cid:75)s
α?σ
α ?σ
or(cid:74)P(cid:75)s
either A
executes
P /(cid:74)P(cid:75)s executes
⟨⟨A⟩⟩ / A
executes
δ σ
2
δ σ
2
α!σ
α !σ
rlb
w=0
λσ
Figure 2: Diagram depicting the proof that(cid:74)·(cid:75)s is RSSC-.
To prove that source and target traces are related, we set up a
cross-language relation between source and target states and prove
that reductions both preserve this relation and generate related
traces. The state relation we use is strong: a source state is related
to a target one if the latter is a singleton stack and all the sub-part of
the state are identical, i.e., heaps bind the same locations to the same
values and bindings bind the same variables to the same values. To
reason about attacker reductions, we use a lock-step simulation: we
show that starting from related states, if A does a step, then ⟨⟨A⟩⟩
does the same step and ends up in related states (yellow areas). To
reason about component reductions, we adapt a reasoning from
compiler correctness results [12, 39]. That is, if s steps and emits
a trace, then(cid:74)s(cid:75)s does one or more steps and emits a trace such
that both ending states and traces are related (green areas, related
traces are connected by black-dotted lines). This proof is straight-
forward except for the compilation of ifz e then s else s′ since it
triggers speculation in T (grey area). After(cid:74)ifz e then s else s′(cid:75)s is
executed, speculation starts and the cross-language state relation
is temporarily broken (the stack of target states is not a singleton,
so the cross-language state relation cannot hold). Speculative exe-
cution continues for w steps in both attacker and compiled code
and generating a trace λσ . We then prove that λσ is related to the
empty source trace because all actions in λσ are tainted S, and so
they do not leak. This fact follows from proving that while speculat-
ing, bindings always contain S values and therefore any generated
action is S. In turn, this follows from proving that pr correctly cap-
tures if speculation is ongoing or not and that the mask is S. As
mentioned, both of these hold for(cid:74)·(cid:75)s and(cid:74)·(cid:75)ss, so they are secure.
The compiler(cid:74)·(cid:75)f can be proved secure in a simpler way since
speculative reductions immediately trigger an lfence, which rolls
the speculation back (the speculation window w is 0) reinstating
the cross-language state relation right away.
lfence(MSVC), SLH-no-interp
5.5 Summary
Our security analysis is the first rigorous characterization of the
security guarantees provided by Spectre v1 compiler countermea-
sures, and it complements existing results that focus on selected
code snippets [27, 36]. The table below depicts the results of our
analysis in terms of the security properties satisfied by compiled
programs. There,• denotes that all compiled programs satisfy the
criterion and◦ denotes that some compiled programs violates it.
lfence(ICC)/(cid:74)·(cid:75)f , SSLH/(cid:74)·(cid:75)ss
SLH(Clang)/(cid:74)·(cid:75)s, NISLH/(cid:74)·(cid:75)s
RSNI (T) RSNI (T-)
◦
•
◦
The main findings of our security analysis are summarized below:
• The lfence countermeasure implemented in MSVC, denoted
lfence(MSVC), is insecure. It violates RSNIP- and produces pro-
grams that are not speculatively non-interference, i.e., that violate
both RSNI (T) and RSNI (T-). Hence, compiled programs still contain
speculative leaks and might be vulnerable to Spectre attacks.
• The lfence countermeasure implemented in ICC, denoted
RSSP+ (Theorem 5.1) and, as a result, produces only compiled pro-
grams that satisfy speculative non-interference, that is, RSNI(T).
Hence, compiled programs are free of speculative leaks.
lfence(ICC) and modelled by(cid:74)·(cid:75)f , is secure. The model satisfies
◦
•
•
n
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea455in Clang, denoted SLH(Clang) and modelled by(cid:74)·(cid:75)ss is secure for
• The speculative load hardening countermeasure implemented
L--T-. The model satisfies RSSP- (Theorem 5.2) and, as a result, pro-
duces only compiled programs that satisfy weak speculative non-
interference, that is, RSNI(T-). Hence, compiled programs are free of
speculatively leaks that involve speculatively-accessed data. While
this is sufficient for preventing Spectre-style attacks, compiled pro-
grams may still speculatively leak data retrieved non-speculatively,
which might result in breaking properties like constant-time (see [28]).
• The strong variant of SLH, denoted SSLH and modelled by(cid:74)·(cid:75)ss
is secure for L-T. The model satisfies RSSP+ (Theorem 5.3) and pro-
duces compiled programs that satisfy speculative non-interference,
that is, RSNI(T). Thus, compiled programs have no speculative leaks.
• Non-interprocedural SLH, denoted SLH-no-interp, is inse-
cure. It violates RSNIP- and produces programs that violate both
RSNI (T) and RSNI (T-). Hence, compiled programs might still be
vulnerable to Spectre attacks.
• Non-interprocedural SLH can be made secure as we show in
n, is
secure for L--T- and it produces programs that are free of specula-
tively leaks involving speculatively-accessed data.
Section 5.3.4. This variant, denoted NISLH and modelled by(cid:74)·(cid:75)s
Additional security guarantees. In addition to RSNIP, the secure
compilers(cid:74)·(cid:75)f ,(cid:74)·(cid:75)s,(cid:74)·(cid:75)ss, and(cid:74)·(cid:75)s
n also preserve the non-speculative
behavior of source programs. That is, if two source programs W and
W′ produce the same traces, then their compiled counterparts pro-
duce traces with the same non-speculative projection. This directly
follows from the compilers only modifying the speculative behavior
of programs, either through lfences or conditional masking.
By combining RSNIP with the preservation of non-speculative
behaviors, we can derive an additional security guarantee for our
compilers: preservation of non-interference. For simplicity, we only
focus on whole programs and we use(cid:74)·(cid:75)f as an example; the same
argument applies to(cid:74)·(cid:75)s,(cid:74)·(cid:75)ss, and(cid:74)·(cid:75)s
n. We say that a program W is
non-interferent (NI) if all programs W ′ that differ from W only in the
private heap (i.e., they are low-equivalent) produce the same traces
as W. Given a source program W ∈ L that is NI, we obtain that
(cid:74)W(cid:75)f is NI if we restrict ourselves to the non-speculative projection
of traces since(cid:74)W(cid:75)f preserves the non-speculative behavior of W.
Since(cid:74)W(cid:75)f is RSNI(T), the full traces do not leak more than their
non-speculative projections and thus(cid:74)W(cid:75)f is also non-interferent.
The security guarantees of NI depend on the underlying lan-
guage. For strong languages L-T, NI ensures that programs are
constant-time with respect to the private heap (in L, we have classi-
cal constant-time [8, 44] while in T we have speculative constant-
time [17]). Indeed, information from the private heap cannot influ-
ence the traces where read(n), write(n), and if(v) actions corre-
spond to the standard constant-time observer. For the weak lan-
guages L--T-, NI ensures a form of sandboxing where programs (1)
cannot access information from the private heap non-speculatively
(because reading values from the private heap violates NI through
actions read(n (cid:55)→ v)), and (2) cannot speculatively leak informa-
tion about the private heap. We leave exploring these additional
security results as future work.
6 SCOPE AND LIMITATIONS OF THE MODEL
Lifting our analysis to real CPUs is only valid to the extent that our
attacker model and speculative semantics capture the target system.
Our attacker observes the location of memory accesses and the
outcome of control-flow statements. This attacker model offers a
good trade-off between precision and simplicity [8, 44], and it has
proven to capture interesting microarchitectural leaks, like those
resulting from caches and port contention. Other classes of microar-
chitectural leaks, like those resulting from internal buffers [63] or
hardware prefetchers [26], might not be captured by our model.
We also assume that attackers cannot access the private heap
since there can be no protection against same-process attackers.
This can be achieved by running attacker and component in sepa-
rate processes and leveraging OS-level memory protection.
Finally, the semantics of our target languages are adequate to rea-
son only about Spectre v1-style attacks. These semantics ignore the
effects of out-of-order execution. As a result, they cannot be used to
reason about countermeasures that rely only on data dependencies
to restrict speculatively executed instructions [46]. For a similar
reason, our analysis of SLH might be too pessimistic in that the data
dependencies resulting from the injected masking operations might
effectively limit the scope of speculative execution. Our semantics
also ignore other sources of speculation (e.g., indirect jumps) that
are exploited by other Spectre variants, as we discuss next.
Beyond Spectre v1. Spectre v1 (also called Spectre-PHT) is just
one of the (many) Spectre variants, we recount other variants below
and discuss how to extend this work to reason about them.
• Spectre BTB [37] exploits speculation over indirect jump in-
structions. The retpoline compiler countermeasure [32] replaces
indirect jumps with a return-based trampoline that leads to code
that perform busy waiting. As a result, the speculated jump executes
no code and thus cannot leak anything.
• Spectre-RSB [41], in contrast, exploits speculation over return
addresses (through ret instructions). To prevent it, Intel deployed a
microcode update [32] that renders retpoline a valid countermeasure
also against Spectre-RSB [15].
• Spectre-STL [30] exploits speculation over data dependencies
between in-flight store and load operations. To mitigate it, ARM
introduced a dedicated SSBB speculation barrier to prevent store
bypasses that could be injected by compilers.
To reason about these Spectre variants, we need to extend the
speculative semantics of T to capture the new kinds of specula-
tive execution; this is analogous to other semantics [9, 17, 43, 64].
Crucially, the traces must capture events that are meaningful for
the related variant (e.g., reads and writes for Spectre-STL, returns
for Spectre-RSB). These actions are already present in traces of T,
so the new semantics can reuse the trace model presented here.
This, in turn, ensures that we can use the secure compilation cri-
teria and trace relation from Section 4 to reason about whether
compiler-inserted countermeasures for these variants are secure or
not. Any proof that countermeasures for these variants are RSSP
should follow the overview in Section 5.4. Specifically, proofs for
retpoline would follow the approach of Figure 2 since speculative
execution gets diverted to code that does not produce observations
(we provide an in-depth discussion on retpoline in the companion
report [52]). In contrast, reasoning about SSBB would be similar
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea456to reasoning about(cid:74)·(cid:75)f since SSBBs instructions act as speculation
barriers. We leave investigating these topics in detail for future
work.
7 RELATED WORK
Speculative execution attacks. Many attacks analogous to Spec-
tre [35, 37] exist; they differ in the exploited speculation sources [30,
38, 41], the covert channels [57, 59, 62], or the target platforms [19].
We refer the reader to [15] for a survey of existing attacks.
Speculative semantics These semantics model the effects of specu-
latively-executed instructions. Several semantics [9, 17, 28, 43, 64]
explicitly model microarchitectural details like multiple pipeline
stages, reorder buffers, caches, and predictors. These semantics are
significantly more complex than ours (which is inspired by [27]),
and they would lead to much harder proofs.
Security definition against Spectre attacks SNI [27] has been used as
security definition against speculative leaks also by [9, 28]. Cheang
et al. [18] propose trace property-dependent observational determin-
ism, a property similar to SNI. Cauligi et al. [17] present specula-
tive constant-time (SCT), i.e., constant-time w.r.t. the speculative
semantics. Differently from SNI, SCT captures leaks under the non-
speculative and the speculative semantics, and it is inadequate for
reasoning about countermeasures that only modify a program’s
speculative behaviour. More generally, Guarnieri et al. [28] presents
a secure programming framework that subsumes both SNI and SCT.
Compiler countermeasures for Spectre v1 Apart from the insertion of
speculation barriers [5, 31] and SLH [16, 46], few countermeasures
for Spectre v1 exist. Replacing branch instructions with branchless
computations (using cmov and bit masking) is effective [53] but not
generally applicable. oo7 [65] is a tool that automatically patches
speculative leaks by injecting speculation barriers. However, oo7
misses some speculative leaks [27] and violates RSNIP-.
Blade [64] is a compiler countermeasure that aims at optimising
compiled code performance. It finds the minimal set of variables
that need to be masked in order to eliminate paths between sources
(i.e., speculative memory reads) and sinks (i.e., operations result-
ing in microarchitectural side-effects). Similarly to our framework,