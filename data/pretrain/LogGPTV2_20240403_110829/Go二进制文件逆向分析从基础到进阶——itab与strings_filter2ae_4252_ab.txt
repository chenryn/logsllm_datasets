    mov     ebx, offset unk_8608FD5 # Get string
    mov     [esp+8], ebx
    mov     dword ptr [esp+0Ch], 0Eh # String length
    mov     ebx, offset unk_86006E6 # Get string
    mov     [esp+10h], ebx
    mov     dword ptr [esp+14h], 5 # String length
    mov     ebx, 861143Ch
    mov     dword ptr [esp+0F0h+var_E8+4], ebx
    mov     [esp+0F0h+var_E0], 19h
    # Found in newer versions of golang binaries
    lea     rax, unk_8FC736 ; str bytes addr
    mov     [rsp+38h+var_18], rax
    mov     [rsp+38h+var_10], 1Dh ;str len
    lea     rdx, unk_8F6E82 ; str bytes addr
    mov     [rsp+40h+var_38], rdx
    mov     [rsp+40h+var_30], 13h ; str len
    lea     eax, unk_82410F0 ; str bytes addr
    mov     [esp+94h+var_8C], eax
    mov     [esp+94h+var_88], 2 ; str len
如此一来，就看一参考如上代码片段的 Pattern，暴力搜索所有代码中符合以上 Pattern 的代码片段，并尝试解析字符串信息。
**[go_parser](https://github.com/0xjiayu/go_parser)** 的 string 解析模块，大部分代码从
**[golang_loader_assist](https://github.com/strazzere/golang_loader_assist)**
移植而来，目前只支持 x86 架构的二进制文件。如果有师傅有兴趣实现一下 ARM/MIPS/PPC 等架构二进制文件的字符串解析功能，欢迎提 PR。
###  10.3 字符串指针
Go 二进制文件中的字符串指针则是另一种形式，在 IDAPro 中看，主要有 3 点特征：
  1. 汇编代码中引用字符串时，不会直接引用字符序列的地址，而是会引用存放字符串地址的地址（字符串指针）；
  2. 汇编代码中可能会用到字符串的长度，但不会把字符串的长度作为汇编指令的立即数，而是把字符串长度的数值存到一个位置，汇编代码只引用存放字符串长度的地址；
  3. 字符串长度的地址，紧挨着字符串指针后面存放。
下面是 **[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的一个字符串指针的用法：
上面那种形式，可以用 IDAPython 在 IDAPro 中暴力搜索并解析如下 Pattern 的汇编指令片段来解析：
    mov     rcx, cs:qword_BC2908 ; str len
    mov     rdx, cs:off_BC2900 ; str pointer
    mov     [rsp+0A8h+var_90], rdx
    mov     [rsp+0A8h+var_88], rcx
    call    func
而还有一种方式，Pattern 不明显，不便自动化解析。举个例子，如下是 `package bufio` 中 Reader 的 `fill()` 方法：
可以发现 `runtime_gopanic()` 函数调用字符串的时候传入了一个 **string**
类型，和字符序列的地址，并未指定字符串的长度。对应的[源码实现](https://golang.org/src/bufio/bufio.go?s=2408:2431#L96)如下，可以对比着看一下
：
对于这种形式的字符串指针，只好另寻他法。好在 Go 二进制文件中的字符串指针也是集中存放在一个固定区域中的。如下，是这一块区域的开头部分：
我们可以手动在 IDAPro 中找到这一块区域的起始地址、终止地址，然后手动执行以下 IDAPython 脚本，即可批量把所有字符串指针解析出来。如果是用
IDAPro v7.2 及以上版本，那么 IDAPro 会自动为这些字符串指针引用的指令加上 Data Reference。IDAPython 脚本如下：
    #!/usr/bin/env python
    # -*- coding: UTF-8 -*-    '''
    go_parser.py:
    IDA Plugin for Golang Executable file parsing.
    '''
    __author__ = "JiaYu"
    __license__ = "MIT"
    __version__ = "1.0"
    __email__ = ["PI:EMAIL"]
    import idc, idaapi
    idaapi.require("common") # common module in go_parser
    START_EA = 0x98C710
    END_EA = 0x990F58
    curr_addr = START_EA
    while curr_addr  0 and curr_str_addr != idc.BADADDR and curr_str_len > 1:
            if idc.MakeStr(curr_str_addr, curr_str_addr + curr_str_len):
                idaapi.autoWait()
                curr_str = str(idc.GetManyBytes(curr_str_addr, curr_str_len))
                print("@ 0x%x: %s" % (curr_str_addr, curr_str))
        curr_addr += 2 * common.ADDR_SZ
> **Note:**
>
> 上面这段代码已同步到 **go_parser** 的 Github Repo:  
> 
另外一个可以考虑的思路，是遍历上面提到的 `string` 类型定义的交叉引用，然后看看有没有如上的汇编指令片段的 Pattern。如果一段汇编代码中拿
`string`
类型定义去解析一个字符串，那么就可以顺藤摸瓜找到字符串指针，字符串指针的地址后面紧挨着就是字符串的长度，这样也可以把字符串解析出来。感兴趣的师傅可以验证一下。
###  10.4 字符串数组
字符串数组，在 Go 二进制文件里的展示方式，比上面的情况要再多“跳转”一步：整个数组用 **元素起始地址** 和 **数组长度**
两个元素来表示，而元素的起始地址处则依次存放了每一个字符串的地址和长度。语言描述不易理解，且看实例。以 `package mime` 中的
`initMimeUnix()`
函数为例，[源代码](https://golang.org/src/mime/type_unix.go?s=910:929#L41)如下：
    var typeFiles = []string{
        "/etc/mime.types",
        "/etc/apache2/mime.types",
        "/etc/apache/mime.types",
    }
    func initMimeUnix() {
        for _, filename := range typeFiles {
            loadMimeFile(filename)
        }
    }
而在 IDAPro 中来看，就是如下的样子：
Go
语言二进制文件中，所有的数组，无论数组中元素是什么类型，都是集中存放的，很难从这些存放数组元素的数据块中区分出哪些书字符串数组，哪些是别的类型的数组（比如
int 类型的数组）。而汇编代码中引用字符串数组的代码片段又没有很强的 Pattern，所以难以自动化地把这些字符串数组都解析好并在 IDAPro
中友好地展示出来。
可以考虑上面 **半自动化** 解析 **字符串指针** 的做法，在 IDAPro 中手动定位到一批字符串数组的位置，然后写几行 IDAPython
脚本将这些字符串数组批量解析。有兴趣的师傅不妨动手试一试。
至此，我们就可以把 Go 二进制文件中的字符串，在 IDAPro
中部分自动化的解析、部分半自动化地解析出来。之后再去看汇编代码，涉及字符串的操作就会一目了然。
## 参考资料：
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 