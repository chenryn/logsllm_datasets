  2. 利用Factoring with high bits known 分解出p，q
  3. 计算私钥 prikey = inverse(e , (p+1) * (q+1))
  4. 计算系数
  5. 利用重复倍加算法做一个乘法计算 mt = d * ct
exp
    e,N=(,)
    c = continued_fraction(e/N)
    for i in range(len(c)):
        y=c.numerator(i)
        x=c.denominator(i)
        if y == 0:
            continue
        T = e*x//y-N-1
        if 1023 = PolynomialRing(Zmod(n))
    f = x + p
    x0 = f.small_roots(X=2^kbits, beta=0.4)[0]
    p = p+x0
    print("p: ", p)
    assert n % p == 0
    q = n/int(p)
    print("q: ", q)
    x,y=(,)
    #-d*x*^2 +y^2 = 1+d*x^2*y^2
    d = (1-y^2)*inverse_mod(-x^2*y^2-x^2,N)%N                    #计算系数d
    e_inv = inverse_mod(int(e),int((int(p)+1)*(int(q)+1)))        #计算私钥prikey
    def add(ct,pt):                                                #重复倍加算法的实现
        ct = ( int((ct[0] * pt[1] + ct[1] * pt[0]) * inverse_mod(1 + d * ct[0] * pt[0] * ct[1] * pt[1], N) % N), int((ct[1] * pt[1] + d * ct[0] * pt[0]) * inverse_mod(1 - d * ct[0] * pt[0] * ct[1] * pt[1], N) % N) )
        return ct
    def mul_by_double_adding(ct,n):
        pt = (0, 1)
        while n > 0:
            if n % 2 == 1:
                pt = add(ct, pt)
            ct = add(ct, ct)
            n = n>>1
        return pt                                                
    (x,y)=mul_by_double_adding((x,y),e_inv)                        #获取mt，得到flag
    from Crypto.Util.number import long_to_bytes
    print(long_to_bytes(x)+long_to_bytes(y))
###  imposter
Toy_AE.py
    import os
    from Crypto.Cipher import AES
    from Crypto.Util.strxor import strxor
    from Crypto.Util.number import long_to_bytes, bytes_to_long
    class Toy_AE():
        def __init__(self):
            self.block_size = 16
            self.n_size = self.block_size
            self.delta = b'\x00' * self.block_size
            self.init_cipher()
        def init_cipher(self):
            key = os.urandom(16)
            self.cipher = AES.new(key = key, mode = AES.MODE_ECB)
        def pad(self, m, block_size):
            return m if len(m) == block_size else (m + b'\x80' + (b'\x00' * (block_size - 1 - len(m))))
        def GF2_mul(self, a, b, n_size):
            s = 0
            for bit in bin(a)[2:]:
                s = s << 1
                if bit == '1':
                    s ^= b
            upper = bytes_to_long(long_to_bytes(s)[:-n_size])
            lower = bytes_to_long(long_to_bytes(s)[-n_size:])
            return upper ^ lower
        def encrypt(self, msg):
            return self.A_EF(msg)
        def decrypt(self, ct, _te):
            msg, te = self.A_DF(ct)
            return msg if _te == te else None
        def A_EF(self, msg):
            self.Sigma = b'\x00' * self.n_size
            self.L = self.cipher.encrypt(b'ConvenienceFixed')
            self.delta = b'DeltaConvenience'
            m = len(msg) // self.n_size
            m += 1 if (len(msg) % self.n_size) else 0
            M_list = [msg[i * self.n_size : (i + 1) * self.n_size] for i in range(m)]
            C_list = []
            for i in range(0, (m-1)//2):
                C1, C2 = self.feistel_enc_2r(M_list[2*i], M_list[2*i +1])
                C_list.append(C1)
                C_list.append(C2)
                self.Sigma = strxor(M_list[2*i +1], self.Sigma)
                self.L = long_to_bytes(self.GF2_mul(2, bytes_to_long(self.L), self.n_size))
            if m & 1 == 0:
                Z = self.cipher.encrypt(strxor(self.L, M_list[-2]))
                Cm  =  strxor(Z[:len(M_list[-1])], M_list[-1])
                Cm_1 = strxor(self.cipher.encrypt(strxor(strxor(self.L, self.delta), self.pad(Cm, self.block_size))), M_list[-2])
                self.Sigma = strxor(self.Sigma, strxor(Z, self.pad(Cm, self.block_size)))
                self.L = strxor(self.L, self.delta)
                C_list.append(Cm_1)
                C_list.append(Cm)
            else:
                Cm = strxor(self.cipher.encrypt(self.L)[:len(M_list[-1])], M_list[-1])
                self.Sigma = strxor(self.Sigma, self.pad(M_list[-1], self.n_size))
                C_list.append(Cm)
            if len(M_list[-1]) == self.n_size:
                multer = strxor(long_to_bytes(self.GF2_mul(3, bytes_to_long(self.L), self.n_size)), self.delta)
            else:
                multer = long_to_bytes(self.GF2_mul(3, bytes_to_long(self.L), self.n_size))
            TE = self.cipher.encrypt(strxor(self.Sigma, multer))
            return b''.join(C_list), TE
        def A_DF(self, ct):
            self.Sigma = b'\x00' * self.n_size
            self.L = self.cipher.encrypt(b'ConvenienceFixed')
            self.delta = b'DeltaConvenience'
            m = len(ct) // self.n_size
            m += 1 if (len(ct) % self.n_size) else 0
            C_list = [ct[i * self.n_size : (i + 1) * self.n_size] for i in range(m)]
            M_list = []
            for i in range(0, (m-1) // 2):
                M1, M2 = self.feistel_dec_2r(C_list[2*i], C_list[2*i +1])
                self.Sigma = strxor(M2 ,self.Sigma)
                self.L = long_to_bytes(self.GF2_mul(2, bytes_to_long(self.L), self.n_size))
                M_list.append(M1)
                M_list.append(M2)
            if m & 1 == 0:
                Mm_1 = strxor(self.cipher.encrypt(strxor(strxor(self.L, self.delta), self.pad(C_list[-1], self.block_size))), C_list[-2])
                Z = self.cipher.encrypt(strxor(self.L, Mm_1))
                Mm = strxor(Z[:len(C_list[-1])], C_list[-1])
                self.Sigma = strxor(self.Sigma, strxor(Z, self.pad(C_list[-1], self.block_size)))
                self.L = strxor(self.L, self.delta)
                M_list.append(Mm_1)
                M_list.append(Mm)
            else:
                Mm = strxor(self.cipher.encrypt(self.L)[:len(C_list[-1])], C_list[-1])
                self.Sigma = strxor(self.Sigma, self.pad(Mm, self.block_size))
                M_list.append(Mm)
            if len(C_list[-1]) == self.n_size:
                multer = strxor(long_to_bytes(self.GF2_mul(3, bytes_to_long(self.L), self.n_size)), self.delta)
            else:
                multer = long_to_bytes(self.GF2_mul(3, bytes_to_long(self.L), self.n_size))
            TE = self.cipher.encrypt(strxor(self.Sigma, multer))
            return b''.join(M_list), TE
        def feistel_enc_2r(self, M1, M2):
            C1 = strxor(self.cipher.encrypt(strxor(M1, self.L)), M2)
            C2 = strxor(self.cipher.encrypt(strxor(C1, strxor(self.L, self.delta))), M1)
            return C1, C2
        def feistel_dec_2r(self, C1, C2):
            M1 = strxor(self.cipher.encrypt(strxor(C1, strxor(self.L, self.delta))), C2)
            M2 = strxor(self.cipher.encrypt(strxor(M1, self.L)), C1)
            return M1, M2
task.py
    #!/usr/bin/env python3
    import os
    import random
    import string
    from hashlib import sha256
    from Toy_AE import Toy_AE
    from secret import FLAG
    def proof_of_work():
        random.seed(os.urandom(8))
        proof = b''.join([random.choice(string.ascii_letters + string.digits).encode() for _ in range(20)])
        digest = sha256(proof).hexdigest().encode()
        print("sha256(XXXX+%s) == %s" % (proof[4:],digest))
        print("Give me XXXX:")
        x = input().encode()
        return False if len(x) != 4 or sha256(x + proof[4:]).hexdigest().encode() != digest else True
    def pack(uid, uname, token, cmd, appendix):
        r = b''
        r += b'Uid=%d\xff' % uid
        r += b'UserName=%s\xff' % uname
        r += b'T=%s\xff' % token
        r += b'Cmd=%s\xff' % cmd
        r += appendix
        return r
    def unpack(r):
        data = r.split(b"\xff")
        uid, uname, token, cmd, appendix = int(data[0][4:]), data[1][9:], data[2][2:], data[3][4:], data[4]
        return (uid, uname, token, cmd, appendix)
    def apply_ticket():
        uid = int(input("Set up your user id:")[:5])
        uname = input("Your username:").encode("ascii")[:16]
        if uname == b"Administrator":
            print("Sorry, preserved username.")
            return
        token = sha256(uname).hexdigest()[:max(8, uid % 16)].encode("ascii")
        cmd = input("Your command:").encode("ascii")[:16]
        if cmd == b"Give_Me_Flag":
            print("Not allowed!")
            return
        appendix = input("Any Appendix?").encode("ascii")[:16]
        msg = pack(uid, uname, token, cmd, appendix)
        ct, te = ae.encrypt(msg)