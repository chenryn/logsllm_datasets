Pr [G4 : r∗ ∈ dom(LG) ∨ r∗ ∈ dom(L′
Pr [G5 : r∗ ∈ dom(LG) ∨ ∃c ∈ dom(LD). ciepk(c, c∗) 6= ⊥]
G)] ≤
We can ﬁnally write an inverter I against the one-wayness
of the underlying trapdoor permutation that uses the map
LD in the previous game to perfectly simulate the decryption
oracle for the IND-CCA adversary A. However, the inverter
I only succeeds if r∗ ∈ dom(LG):
Pr [G5 : r∗ ∈ dom(LG) ∨ ∃c ∈ dom(LD). ciepk(c, c∗) 6= ⊥] ≤
Pr [OW : fpk(x, y) = fpk(z)] + Pr [OW : c∗ ∈ dom(LD)]
We bound the second term on the right-hand side of the
above inequality by qD/2n using a short sequence of games
that we omit. Putting all the above results together, we
conclude:
Pr(cid:2)CCA : b = b′(cid:3) −
(cid:12)(cid:12)(cid:12)(cid:12)
1
2(cid:12)(cid:12)(cid:12)(cid:12)
≤ Pr [OW : fpk(x, y) = fpk(z)] +
qD
2n
The execution time of tI can be bound by inspecting the
formulation of the inverter I in game OW:
• Each simulated query to G requires at most qD evalu-
ations of algorithm sie;
• Each simulated query to D requires at most qG evalu-
ations of algorithm sie and at most qD evaluations of
algorithm cie;
• When the simulation ﬁnishes, the inverter I requires
at most qG evaluations of algorithm sie and at most
qD + 1 evaluations of algorithm cie to ﬁnd the inverse
of its challenge.
Thus
tI ≤ tA + 2qGqD tsie + q2
D tcie + qG tsie + (qD + 1) tcie
The last two terms are negligible w.r.t. the rest and can be
safely ignored.
5.
INSTANTIATIONS
In this section, we show that both the Rabin function
and RSA with small exponent satisfy the properties required
for the security reduction of ZAEP. Moreover, we provide a
practical evaluation of both instantiations of ZAEP and a
comparison to 3-round OAEP. Our proofs are inspired by [19]
and rely on Coppersmith algorithm to ﬁnd small integer
roots of polynomials [21]:
RSA[N, e] : x 7→ xe mod N
is a well-known trapdoor one-way permutation on Z∗
N for
any exponent e coprime to ϕ(N ). For any non-negative
ℓ ≤ n, an element x ∈ Z∗
N can be uniquely represented as
r × 2ℓ + s, where s ∈ {0, 1}ℓ and r ∈ {0, 1}n−ℓ. We can thus
express the RSA function as a function of two arguments:
RSA[N, e] : (r, s) 7→ (r × 2ℓ + s)e mod N
We denote by RSA-ZAEP the encryption scheme resulting
from instantiating ZAEP with this function.
Second-Input Extractability. Given an output
c of
RSA[N, e] and a tentative value r, the Second-Input Extrac-
tion problem boils down to solving p(X) = 0 mod N for
p(X) = c − (r × 2ℓ + X)e mod N with the additional con-
straint |X| < 2ℓ. The Coppersmith method ﬁnds the root
s (the second input to the function when r is the correct
ﬁrst input) when 2ℓ < N 1/e, or equivalently, when ℓ < n/e.
We thus have an eﬃcient sie algorithm that executes within
time tsie ≤ tC(N,e).
Common-Input Extractability. Given two diﬀerent out-
puts c1 and c2 of RSA[N, e], the Common-Input Extraction
problem for RSA[N, e] consists in ﬁnding r, s1 and s2 such
that c1 = (r×2ℓ+s1)e mod N and c2 = (r×2ℓ+s2)e mod N ,
if they exist. Let us consider the two polynomials
p1(X, ∆) = c1 − X e mod N
p2(X, ∆) = c2 − (X + ∆)e mod N
These polynomials should be equal to zero for the correct
values x = r × 2ℓ + s1 mod N for X and δ = s2 − s1 mod N
for ∆. Therefore, the resultant polynomial R(∆) of p1 and
p2 in X, which is the determinant of the 2e × 2e Sylvester
Matrix associated to the polynomials p1 and p2 in the vari-
able X, and thus with coeﬃcients that are polynomials in
∆ (of degree 0 for the coeﬃcients of p1, but of degree up to
e for the coeﬃcients of p2), is a polynomial with δ = s2 − s1
as a root. Due to the speciﬁc form of the matrix, R(∆)
is of degree at most e2 modulo N , and the Coppersmith
method ﬁnds the root δ provided 2ℓ < N 1/e2
or equiva-
lently, when ℓ < n/e2. Once this root is known, we can
focus on the monic polynomials p1(X) = c1 − X e mod N
and p2(X) = c2 − (X + δ)e mod N , for which x is a common
(and unique) root. These two polynomials are distinct, but
are both divisible by X − x, which can be found by com-
puting their GCD. We thus have an eﬃcient cie algorithm
that executes within time tcie bounded by the running time
of Coppersmith method for ﬁnding δ, tC(N,e2), plus the time
needed to compute the GCD of two polynomials of degree
e, which we denote tGCD(e).
7315.2 Rabin Function
The Rabin function is unfortunately not a permutation.
However, for particular moduli we can limit its domain and
co-domain to convert it into a bijection. More precisely, if
p and q are Blum integers, then −1 a non-quadratic residue
modulo p and q, and hence is a false square modulo N =
pq. Put otherwise, JN (−1) = +1 where JN (·) denotes the
Jacobi symbol modulo N . In addition, any square x in Z∗
N
admits four square roots in Z∗
N , derived from the two pairs of
square roots of x in Z∗
p and Z∗
q using the Chinese Remainder
Theorem. As a consequence, one and only one is also a
quadratic residue modulo N , which we denote α. Then, α
and −α are the two square roots of x with Jacobi symbol
+1. We will ignore the other two square roots of x that
have Jacobi symbol −1. Let JN denote the subgroup of the
multiplicative subgroup of ZN whose elements have Jacobi
symbol +1 (membership can be eﬃciently decided). We
additionally restrict JN to the elements smaller than N/2,
and we denote this subset J <
N . We now consider the function
SQ[N ] : J <
SQ[N ] : (x, b) 7→ (−1)bx2 mod N
N × {0, 1} → JN
The inverse function takes an element y ∈ JN , which may
be a true quadratic residue or a false one. In the former case,
one extracts the unique square root α that is also a quadratic
residue and sets x to be the smallest value in {α, N − α}
that is less than N/2; the inverse of y is (x, 0). In the latter
case, one does as before to compute x, but from −y, which
is a true quadratic residue; the inverse of y is (x, 1). The
function SQ[N ] thus deﬁned is a bijection from J <
N × {0, 1}
onto JN .
N \JN (instead of J <
One-wayness. Let us assume that an algorithm A can in-
vert SQ[N ] with non-negligible probability. Then one can
ﬁrst choose a random z ∈ Z∗
N ) and a
random bit b, and submit y = (−1)b × z2 mod N to A. This
element y is uniformly distributed in JN , and thus with non-
negligible probability A outputs (x, b′) ∈ J <
N × {0, 1} such
that y = (−1)b′
×x2 = (−1)b ×z2 mod N . Since −1 is a false
quadratic residue, necessarily b′ = b and x2 = z2 mod N ,
with x ∈ JN and z 6∈ JN . The GCD of x − z and N is
either p or q, from which N can be factored. This function
is thus one-way under the integer factoring problem.
As above, in order to be used with ZAEP, we have to
consider the function SQ[N ] as a function of two bitstrings.
Given an input (x, b) ∈ J <
N ×{0, 1}, for any 0 ≤ ℓ ≤ n−1 we
N as x = r × 2ℓ + s, with s ∈ {0, 1}ℓ
can uniquely write x ∈ Z∗
and r ∈ {0, 1}n−1−ℓ. We consider thus the function:
SQ[N ] : {0, 1}n−ℓ × {0, 1}ℓ → {0, 1}n
SQ[N ] : (bkr, s) 7→ (−1)b × (r × 2ℓ + s)2 mod N
Second-Input Extractability. Given an output c of SQ[N ]
and a pair of values b, r, the Second-Input Extraction prob-
lem consists in solving the equation p(X) = 0 mod N for
p(X) = c − (−1)b × (r × 2ℓ + X)2 mod N with the additional
constraint |X| < 2ℓ. The above Coppersmith method ﬁnds
the root s (the second input to SQ[N ] used to compute c if
bkr is the correct ﬁrst input) provided 2ℓ < N 1/2, or equiva-
lently when ℓ < n/2. We thus have an eﬃcient sie algorithm
that runs within time tsie ≤ tC(N,2).
Common-Input Extractability. The Common-Input Ex-
traction problem can be solved as in the case of RSA, pro-
vided ℓ < n/4. We thus have an eﬃcient cie algorithm whose
running time tcie is bounded by tC(N,4) + tGCD(2).
We denote by Rabin-ZAEP the encryption scheme result-
ing from instantiating ZAEP with the function SQ[N ]. Since
this function operates only on elements in J <
N , the encryp-
tion algorithm may have to iterate:
Key Generation The algorithm KG generates two Blum
integers p and q of length n/2, and outputs (pk, sk),
where pk = N = pq and sk = (p, q);
Encryption Given a public key N and a message m ∈
{0, 1}ℓ, the encryption algorithm iteratively samples
a random value r ∈ {0, 1}k−1 and a bit b and sets
s = m ⊕ G(bkr), stopping when x = r × 2ℓ + s ∈ J <
N .
This requires on average one iteration only. The ci-
phertext c is computed as
SQ[N ](bkr, s) = (−1)b × (r × 2ℓ + s)2 mod N ;
Decryption Given a secret key (p, q) and a ciphertext c, D
ﬁrst inverts SQ[N ] using the prime factors (p, q) of N
and gets (x, b). It then parses x as r × 2ℓ + s mod N
and outputs m = s ⊕ G(bkr).
5.3 Practical Considerations
For RSA-ZAEP, all the required properties to achieve IND-
CCA-security hold as long as e < pn/ℓ. For a practical
message size ℓ, e has to be small (e.g. e = 3). But for a
small exponent e, both sie and cie algorithms are eﬃcient
operations on small polynomials, and thus the reduction is
eﬃcient: from an adversary that achieves an IND-CCA ad-
vantage ε within time t, one can invert RSA with small expo-
nent with success probability essentially ε, within time close
to t. As a consequence, one can use classical RSA moduli:
for e = 3, a 1024-bit modulus allows to encrypt 112-bit mes-
sages, whereas a 1536-bit modulus allows to securely encrypt
messages of up to 170-bits.
For Rabin-ZAEP, encryption is reasonably eﬃcient (an
evaluation of J (·) on average plus one modular square). The
IND-CCA-security of the scheme can be reduced to the inte-
ger factoring problem in the random oracle model, with an
eﬃcient reduction (even better than for RSA exponent 3).
As a consequence, for n = 1024, one can securely encrypt
messages of up to 256-bits. This suﬃces, for instance, to
encrypt AES keys of all standard sizes.
5.4 Other Redundancy-Free Schemes
We compare our security result of Theorem 1 to the secu-
rity results for 3-round OAEP (see Fig. 1(b)) and the 4-round
scheme of Abe et al. [2], the only other two redundancy-free
schemes based on the integer factoring assumption.
The original result about the IND-CCA security of 3-round
RSA-OAEP [37] relies on an intermediate reduction to the
partial-domain one-wayness of RSA. Phan and Pointcheval
[38] improved on this result by showing a direct reduction
to the (full-domain) one-wayness of RSA, which avoids the
additional cost of reducing partial-domain one-wayness to
one-wayness. They show that given an adversary A against
the IND-CCA-security of 3-round OAEP that executes within
time tA and makes at most qG queries to its 3 hash oracles
and qD queries to its decryption oracle, it is possible to con-
struct an inverter I for RSA that executes within time tI,
732such that
tI ≤ tA + tRSA × ((qD + 1)q2
OW
Succ
f
(I) ≥ Adv
CCA
OAEP3R(A) −
G + q2
D)
5qDqG + q2
D + qD + qG
2k
The probability loss in the above reduction can be made
negligibly small with an appropriate choice of k, the length
of the random value used during encryption. However, even
while tRSA is small, the qDq2
G factor in the time bound makes
the reduction for 3-round OAEP ineﬃcient, because qG ≫ qD
can be large. This quadratic contribution in the number of
hash queries also appears in the OAEP security bound and
is the major reason for requiring larger moduli.
The 4-round scheme of Abe et al. [2] improves on the ef-
ﬁciency of 3-round OAEP at the cost of one extra Feistel
round. Given an adversary A against the IND-CCA-security
of the scheme that executes within time tA and makes at
most qG hash oracle queries and qD decryption queries, it is
possible to construct an inverter I for the underlying per-
mutation, say RSA, that executes within time tI , such that
tI ≤ tA + tRSA × q2
G
Succ
OW
f
(I) ≥ Adv
CCA
OAEP4R(A) −
4qG
2k −
2q2
D
22k −
2qG(qD + 1)
23k
In contrast to 3-round OAEP, the leading term in the proba-
bility loss is O((qG+qD)/2k) because qG, qD must be bounded
by 2k to achieve semantic security. This allows to use smaller
moduli and to get an optimal ciphertext overhead for suﬃ-
ciently large messages.
In comparison to the above schemes, we show the following
bounds for ZAEP in Theorem 1:
SuccOW
f
tI ≤ tA + 2qGqD tsie + q2
qD
(I) ≥ AdvCCA
2n
ZAEP(A) −
D tcie
The probability loss in our reduction is negligible and the
leading term in the time bound is linear in qG, allowing the
use of standard RSA moduli.
6. RELATED WORK
Plaintext-awareness and Non-Redundancy. Plaintext
awareness is an intuitive concept, that has proved diﬃ-
cult to formalize. The concept was introduced by Bellare
and Rogaway for proving security of OAEP [11]. How-
ever, their work only dealt with a weak notion of plaintext-
awareness that provides a weaker, non-adaptive, notion of
chosen-ciphertext security [34] rather than the adaptive no-
tion of IND-CCA security considered in this paper. Subse-
quently, Bellare et al. [8] enhanced the plaintext-awareness
notion to guarantee IND-CCA security. In an eﬀort to ac-
commodate it to the standard model, the deﬁnition was
further reﬁned by Herzog, Liskov and Micali [31], Bellare
and Palacio [9], Dent [24], and Birket and Dent [14]. As
noted in the introduction, plaintext-awareness is an appeal-
ing concept:
it is satisﬁed by most IND-CCA encryption
schemes, and the common way to transform an IND-CPA
scheme into an IND-CCA scheme is to introduce redundancy
that ensures plaintext-awareness.
In fact, it has been ob-
served that existing schemes, such as OAEP, cease to guaran-
tee IND-CCA security—but still retain IND-CPA security—