---
## Page 86
第4章Python与系统安全65
ports为字符串类型，表示扫描的端口，可以用“22,53,110,143-4564”来表示；参数
arguments为字符串类型，表示nmap命令行参数，格式为“-sU-sX-sC"，例如：
m = nnap. PortScanner ()
nm.scan(*192.168.1.21-22', *22, 80*)
command_line(self)方法，返回的扫描方法映射到具体nmap命令行，如：
u*nmap -oX - -p 22,80 -sV 192.168.1.2122*
>>> nm,conmand_1ine ()
 scaninfo（self) 方法，返回 nmap 扫描信息，格式为字典类型，如：
>> nm.8caninfo ()
u*tcp*: (*services′: u*22,80′, *method′: u*syn*))
all_hosts(self)方法，返回nmap 扫描的主机清单，格式为列表类型，如：
[u*192.168.1.21′, u′192.168.1.22′]
以下介绍PortScannerHostDictO类的一些常用方法。
hostnamc(self) 方法，返回扫描对象的主机名，如：
>>> nm[*192 .168.1 .22*] -hostname ()
u*SN201308-022*
state(self)方法，返回扫描对象的状态，包括 4种状态（up、down、unknown、
skipped),如：
>>> nm[*192.168.1.22'] -state ()
, dn, n
all_protocols（selfl) 方法，返回扫描的协议，如；
>>> nm(*192.168 .1.22*1 -a11_protoco1s ()
[,do1,n]
all_tcpO（self)方法，返回 TCP 协议扫描的端口，如：
>>> nm[*192.168,1.22*] .a11_tcp ()
[00'22]
 tcp(self,port) 方法，返回扫描 TCP 协议port（端口）的信息，如：
>> ns[*192.168 .1.22*] .tcp (22)
[*state′: u′open*, *reason′: u*syn-ack′, *name′: u′ssh*)
---
## Page 87
66第一部分基础篇
4.2.2实践：实现高效的端口扫描
本次实践通过python-nmap实现一个高效的端口扫描工具，与定时作业crontab及
邮件告警结合，可以很好地帮助我们及时发现异常开放的高危端口。当然，该工具也可
以作为业务服务端口的可用性探测，例如扫描192.168.1.20-25网段Web服务端口80是
否处于open状态。实践所采用的 scanO方法的 arguments参数指定为“-v-PE-p‘+端
口”、-v表示启用细节模式，可以返回非up状态主机清单；-PE表示采用TCP同步扫描
（TCPSYN）方式；-p指定扫描端口范围。程序输出部分采用了三个for循环体，第一层
遍历扫描主机，第二层为遍历协议，第三层为遍历端口，最后输出主机状态。具体实现
代码如下：
 /home/test/python-nmap/simple1.py 1
1/usz/bin/env python
 -*- coding: utf-8 =*
import sys
import nmap
scan_row=[1
input_data = raw_input (*Please input hosts and port: *)
1f len (scan_row) =2:
scan_row = input_data.split (* *)
print *Input errors,exanple 1*192.168.1.0/24 80, 443, 22\**
[0]xoxueoe=sso
sy8.exit(0)
接收用户输入的主机
port=scan_rov[1]
接收用户输入的端口
try:
nm = nmap -PortScanner ()
创建墙口扫提对象
except nmap.FortScannerError:
print (*Nmap not found′, sys,exc_info () [01)
sys.exit (0)
except:
print (*Unexpected error:*, sys.exc_info () [0])
sys.exit(0)
try:
·调用扫强方法，多数指定扫提主机host.s。nmap 护握命令行参数 arguments
(4zod+, d- gg- 4- ,=squaumbae *sqsou=sqsou) ueos*uu
except Exception, e:
print "Scan erro:*+str (e)
for host in nm.all_hosts ():
遍历扫猫主机
print (*Most : ts (ts) * $ (host, nn[host] hostname()))
(、 =
输出主机状态，如up、dowm
输出主机及主机名
print (*State : %s* ↓ nm[host] -state ())
---
## Page 88
第4章Python与系统安全67
for proto in nm[host].all_protocols () :
遗历担模协试。如 tcp、udp
print(*Protoco1 : s*$ proto)
输入协议书
1port = nm [host] (proto] -keys ()
获取协议的所有扫操确口
lport.aort ()
准口列表抢序
for port in lport:
遍历墙口及输出墙口与状态
print (*port : ls\tstate : ts* $ (port, nm[host] [proto] (port] [*state*]))
其中主机输入支持所有表达方式，如www.qq.com、192.168.1.*、192.168.1.1-20、
192.168.1.0/24等，端口输入格式也非常灵活，如80,443,22、80,22-443。代码运行结果如
图4-3所示。
18.168.110
8.1.11O
图4-3指定IP段与端口的扫描结果
nmap/。示例源码参考官方源码包中的 example.py。
---
## Page 90
第二部分7
■第5章系统批量运维管理器pexpect详解
■第6章系统批量运维管理器paramiko详解
·第7章系统批量运维管理器Fabric详解
第8章从“零”开发一个轻量级WebServer
■第9章集中化管理平台Ansible详解
·第10章集中化管理平台Saltstack详解
·第11章统一网络控制器Fune详解
■第12章Python大数据应用详解
---
## Page 91
Cy第5章
系统批量运维管理器pexpect详解
pexpect可以理解成Linux下的expect 的Python封装，通过 pexpect我们可以实现对
ssh、ftp、passwd、telnet 等命令行进行自动交互，而无需人工干涉来达到自动化的目的。比
如我们可以模拟一个FTP登录时的所有交互，包括输人主机地址、用户名、密码、上传
文件等，待出现异常我们还可以进行尝试自动处理。pexpect的官网地址：htp:/pexpect
readthedocs.org/en/latest/，目前最高版本为3.0。
5.1pexpect的安装
pexpect 作为 Python的一个普通模块，支持pip、casy_install或源码安装方式，具体安装
命令如下（根据用户环境，自行选择pip或easy_install）：
pip instal1 pexpect
关于源码安装，笔者采用了GitHub平台的项目托管源，安装步骤如下：
#vget https1//g1thub.com/pexpect/pexpect/releases/download/3,0/pexpect=3.0,tar,
#tar -zxvf pexpect-3.o.tar.gz
gz -0 pexpect-3.0.tar,gz
cd pexpect-3.0
#python setup-py insta11
校验安装结果，导入模块没有提示异常则说明安装成功：
---
## Page 92
第5章系统批量运维管理器pexpect详解71
Python 2,6.6 (r266:84292, Ju1 10 2013, 22:48:45)
 python
[GCC 4.4.7 20120313 (Red Bat 4.4.73)] on 11nux2
Type *help*, "copyright*, “credits* or *license* for more Lnformation.
>>> inport pexpect
>>>
一个简单实现SSH自动登录的示例如下：
Inport pexpect
 dos g uweds(,*:uoo*duexagxasn oog dos,)uxeds*oedxed -ptu
ch11d.expect（*Password:*）expect 方法等待子程序产生的输出，判断是否匹配定义的字特串
+'Password: *
chi1d,sendline (mypassword)  匹配后则发述害每串进行国应
5.2pexpect的核心组件
下面介绍pexpect的儿个核心组件包括spawn类、run函数及派生类pxssh等的定义及使
用方法。
5.2.1spawn类
spawn是pexpect的主要类接口，功能是启动和控制子应用程序，以下是它的构造函数
定义：
class pexpect.spaun(comnand, args=[], tineout=30, naxread=2000,
searchxindovsize=None, 1ogfile=None, cvd=None, env=None, Lgnore_sighup=True)
其中command参数可以是任意已知的系统命令，比如：
chi1d = pexpect,spawn(*/usr/bin/ftp*) 追 ftp 客户瑞母令
chi1d = pexpect,spawn (*/usr/bin/ssh usereexanple,com*) +8幼 ssh 选程连接命令
* du/ sT  （,du/ 1-s1uesodxad -po
当子程序需要参数时，还可以使用Python列表来代替参数项，如：
chi1d = pexpect.spavn (*/usr/bin/ssh*, [*userlexample,com*↓)
child = pexpect.spavn (*/usr/bin/ftp*, [1)
chi1d = pexpectispavn (*1s*, [*-1atr*, */tnp*}}
参数timeout为等待结果的超时时间；参数maxread为pexpect从终端控制台一次读取的
最大字节数，searchwindowsize参数为匹配缓冲区字符串的位置，默认是从开始位置匹配。
需要注意的是，pexpect不会解析shell命令当中的元字符，包括重定向“>”、管道“
---
## Page 93
72第二部分高级篇
或通配符“*”，当然，我们可以通过一个技巧来解决这个问题，将存在这三个特殊元字符的
命令作为/bin/bash的参数进行调用，例如：
(xa*sbo[ c S0T daxb 1 I- sT。 0- qseq/uTa/.)uxeds*oadxad = PTTuo
chi1d,expect (pexpect ,EOF)
我们可以通过将命令的参数以Python列表的形式进行替换，从面使我们的语法变成更
加清晰，下面的代码等价于上面的。
she11_cmd = *1s -1 1 grep L0G > 1ogs.txt*
ch11d = pexpect spaun (*/bin/bash*, [*=c*, she11_cnd))
chi1d,expect (pexpect ,EOF)
有时候调试代码时，希望获取pexpect 的输人与输出信息，以便了解匹配的情况。
pexpect提供了两种途径，一种为写到日志文件，另一种为输出到标准输出。写到日志文件的
实现方法如下：
chi1d = pexpect spawn (*some_command′)
fout = file (*mylog.txt', *v*)
child.logfle = fout
输出到标准输出的方法如下：
chilld.1ogtile = sys.stdout
chi1d = pexpect spawn (*some_command′)
下面为一个完整的示例，实现远程SSH登录，登录成功后显示/home目录文件清单，
并通过日志文件记录所有的输入与输出。
import pexpect
sAe 110dur
chi1d = pexpect.spawm (*ssh PI:EMAIL*)
fout = tile(*mylog.txt′, *v′)
child.1ogfile = fout
#chi1d.1ogfile - sys.stdout
child.expect (“passvord:*)
ch11d. send11ne (*03497DT32t*)
child.expect (*#′)
chi1d. sendline (*1s /home*)
(+.)oedx*pTo
以下为mylog.txt日志内容，可以看到pexpect产生的全部输入与输出信息。
 cat mylog.txt
---
## Page 94
第5章系统批量运维管理器pexpect详解73
root8192.168.1.21*s password: U3497Dr32t
Last login: Tue Jan
7 23:05:30 2014 from 192.168.1.20
[rootesN201308-021 ~] 1s /home
1s /hone
default,tar.gz
ce-py
poster-0,8.1
tarfile.tar-gzzipfile.zip
poster-0,8.1,tar gz
test.sh
dev
pypa=8etuptoo1s=c508be8585ab
zipfilel,zip
（1）expect 方法
expect定义了一个子程序输出的匹配规则。
方法定义：expect(pattem, timeout=1, searchwindowsize=—1)
其中，参数patterm表示字符申、pexpect.EOF（指向缓冲区尾部，无匹配项）、pexpect
TIMEOUT（匹配等待超时）、正则表达式或者前面四种类型组成的列表（List），当pattem为
一个列表时，且不止一个表列元素被匹配，则返回的结果是子程序输出最先出现的那个元
素，或者是列表最左边的元素（最小索引ID），如：
inport pexpect
(,reqooj, oqoa_)uaeds'oadxad = ptrqo
print child.expect ((*bar′, *foo*,*foobar*})
输出：1.即foo被否配
参数timeout指定等待匹配结果的超时时间，单位为秒。当超时被触发时，expect将匹
配到pexpect.TIMEOUT；参数scarchwindowsize 为匹配缓冲区字符串的位置，默认是从开始
位置匹配。
当pexpect.EOF、pexpect.TIMEOUT作为expect 的列表参数时，匹配时将返回所处列表
中的索引ID，例如：
index = p,expect([′good′, *bad’, pexpect,EOF, pexpect,TIMEoUT])
if index == 0:
do_something()
elif index == 1:
elif index *= 2:
elif index *= 3:
(1butusauoauosop
do_something_completely_different ()
以上代码等价于
try:
Lndex = p.expect ([*good′, *bad′))
Lf index = 01
---
## Page 95
74第二部分高级篇
elif index == 1:
do_sonething ()
do_something_else ()
1a03 1daoxa
do_some_other_thing ()
except TIMEOUT:
do_something_completely_different ()
cxpcct方法有两个非常棒的成员：before与after。before 成员保存了最近匹配成功之前
的内容，after成员保存了最近匹配成功之后的内容。例如：
import pexpect
import sys
chi1d = pexpect 8pawn (*ssh roote192.168.1.21′)
fout = file (*mylog.txt', *′)
chi1d.1ogfile = fout
([=paonssed,1)4oedxo*ptTuo
print *before:*+child.before
chi1d.sendline (*980405*)
print *after:"+child.after
运行结果如下：
before1roote192.168.1.21's
afteripassword:
（2）read相关方法
下面这些输人方法的作用都是向子程序发送响应命令，可以理解成代替了我们的标准输
人键盘。
send（self，s）发进命令，不国车
sendline（self，g=*)发选命令，四车
char）发进控制字特，如child.sendcontro1（*c*）等价子”ctr1+c”
sendeof () 发述 eof
5.2.2run函数
rumn是使用pexpect进行封装的调用外部命令的函数，类似于os.system或os.popen
方法，不同的是，使用runO可以同时获得命令的输出结果及命令的退出状态，函数定
义: pexpect.run(command, timeout—1, withexitstatus=False, events=None, extra_args=None,
logfile=None, cwd=None, env=None)。
参数command可以是系统已知的任意命令，如没有写绝对路径时将会尝试搜索命令的
---
## Page 96