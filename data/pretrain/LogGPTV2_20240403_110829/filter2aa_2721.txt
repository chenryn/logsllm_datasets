# Stumping the Mobile Chipset: New 0-Days from Down Under

## Presenter: Adam Donenfeld

### Agenda
- Overview of Android chipsets in the ecosystem
- Qualcomm chipset subsystems overview
- New kernel vulnerabilities
- Exploitation of a new kernel vulnerability
- Conclusions

### About Adam Donenfeld
- Extensive experience in security research (both PC and mobile)
- Specializes in vulnerability assessment and exploitation
- Senior security researcher at Check Point
- In his free time, he enjoys learning German

## How Android Gets to Your Device
1. **OEM**: Original Equipment Manufacturer
2. **Chipset Code**
3. **Android Project**
4. **Linux Kernel**
5. **Carrier**

## Qualcomm’s Chipset Subsystems
- [Protected] Non-confidential content
- **IPC Router**
- **GPU**
- **Thermal Management**
- **QSEECOM** (Qualcomm Secure Execution Environment)
- **Performance Management**
- **Audio Processing**

## The Rooting Zoo

### ASHmenian Devil (ashmem Vulnerability)
- **CVE-2016-5340**
  - Qualcomm expands ashmem for the GPU.
  - Map ashmem to the GPU.
  - Pass ashmem file descriptor (fd) to map.
  - Verify if the fd is an ashmem file descriptor.

#### Proof of Concept (PoC)
- **Filename on root path == "ashmem"**
- **/ is read-only**
- **/sdcard is a symlink**
- **Obb (Opaque Binary Blob)**

Steps:
1. Create an OBB with "ashmem" in its root directory.
2. Mount the OBB.
3. Map "ashmem" memory to the GPU.
4. Pass a fd to your fake ashmem file.

### Qualaroot (IPC Router Vulnerability)
- **CVE-2016-2059**
- Qualcomm’s IPC router uses a special socket family: `AF_MSM_IPC (27)`
- Unique features:
  - Whitelist for services permitted to communicate.
  - Each entity gets an address for communication.
  - Creation and destruction can be monitored by anyone.
  - No permissions required.

#### Socket Types
- **CLIENT_PORT**
- **SERVER_PORT**
- **IRSC_PORT**
- **CONTROL_PORT** (Converted via `IPC_ROUTER_IOCTL_BIND_CONTROL_PORT`)

#### The Vulnerability
- **control_ports list is modified without a lock!**
- **Deleting 2 objects from control_ports simultaneously!**
- **RACE CONDITION**

#### Implementation
- **control_ports list**
  - **A, B, C, POISON**
  - Entry = A, Next = B, Prev = control_ports
  - B->prev = control_ports
  - Entry = B, Next = C, Prev = control_ports
  - C->prev = control_ports
  - Entry = B, Next = C, Prev = control_ports
  - Control_ports->next = C
  - Entry is freed, next = prev = LIST_POISON
  - Control_ports points to a FREE data
  - LIST_POISON works, no longer mappable
  - Spraying af_unix_dgram works

#### Exploitation Flow
1. **Create UAF situation using the vulnerability**
2. **LIST_POISON, UAF**
3. **Spray af_unix_dgrams to catch the UAF**
4. **Trigger list iteration**
   - __wake_up_common
   - usb_read_done_work_fn
   - Any function
   - UAF->port_rx_wait_q->task_list
   - usb_read_work_done_fn
   - qdisc_list_del
   - control_ports is empty
   - usb_read_work_done_fn
   - enforcing_setup
   - SELinux is permissive
   - usb_read_work_done_fn
   - commit_creds
   - UID=0; cap = FULL_CAP_SET

### Syncockaroot (syncsource Vulnerability)
- **CVE-2016-2503**
- SyncSource objects synchronize activity between the GPU and the application.
- Created using IOCTLs to the GPU: `IOCTL_KGSL_SYNCSOURCE_CREATE`, `IOCTL_KGSL_SYNCSOURCE_DESTROY`
- Referenced further with the "idr" mechanism.

#### PoC
- **Create a syncsource object** with a predictable idr number.
- **Create 2 threads constantly destroying the same idr number**.
- **Ref-count will be reduced to -1**.
- **Use After Free (UAF)**

### KanGaroot (KGsl Vulnerability)
- **CVE-2016-2504**
- **GPU main module (kgsl-3d0)**
- **Map user memory to the GPU** using `IOCTL_KGSL_MAP_USER_MEM` and `IOCTL_KGSL_GPUMEM_FREE_ID`.
- **Referenced by a predictable ID** (IDR mechanism).
- **No locks!** Free can be called before map ends.

#### PoC
- **Map memory** and save the IDR.
- **Another thread frees the object with IDR** before the first thread returns from the IOCTL.
- **UAF in kgsl_mem_entry_attach_process** on 'entry' parameter.

## Suggestions/Special Thanks
- **commit_creds** for always being there.
- **Absence of kASLR** for not breaking the exploit.
- **SELinux** for being liberal and allowing access to mechanisms like Qualcomm’s IPC.

## Thank You!