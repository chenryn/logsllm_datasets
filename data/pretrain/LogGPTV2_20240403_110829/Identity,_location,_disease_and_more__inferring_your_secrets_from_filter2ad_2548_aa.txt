title:Identity, location, disease and more: inferring your secrets from
android public resources
author:Xiao-yong Zhou and
Soteris Demetriou and
Dongjing He and
Muhammad Naveed and
Xiaorui Pan and
XiaoFeng Wang and
Carl A. Gunter and
Klara Nahrstedt
Identity, Location, Disease and More: Inferring Your
Secrets from Android Public Resources
Xiaoyong Zhou1, Soteris Demetriou2, Dongjing He2, Muhammad Naveed2,
Xiaorui Pan1, XiaoFeng Wang1, Carl A. Gunter2, Klara Nahrstedt2
1School of Informatics and Computing, Indiana University, Bloomington, IN USA
2Department of Computer Science, University of Illinois, Urbana-Champaign, IL USA
{zhou, xiaopan, xw7}@indiana.edu,
{sdemetr2, dhe6, naveed2, cgunter, klara}@illinois.edu
ABSTRACT
The design of Android is based on a set of unprotected shared re-
sources, including those inherited from Linux (e.g., Linux public
directories). However, the dramatic development in Android ap-
plications (app for short) makes available a large amount of public
background information (e.g., social networks, public online ser-
vices), which can potentially turn such originally harmless resource
sharing into serious privacy breaches. In this paper, we report our
work on this important yet understudied problem. We discovered
three unexpected channels of information leaks on Android: per-app
data-usage statistics, ARP information, and speaker status (on or off).
By monitoring these channels, an app without any permission may
acquire sensitive information such as smartphone user’s identity, the
disease condition she is interested in, her geo-locations and her driv-
ing route, from top-of-the-line Android apps. Furthermore, we show
that using existing and new techniques, this zero-permission app can
both determine when its target (a particular application) is running
and send out collected data stealthily to a remote adversary. These
ﬁndings call into question the soundness of the design assumptions
on shared resources, and demand effective solutions. To this end,
we present a mitigation mechanism for achieving a delicate balance
between utility and privacy of such resources.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection—Se-
curity kernels; K.4.1 [COMPUTERS AND SOCIETY]: Public
Policy Issues—Privacy
Keywords
Mobile Security, Privacy, Information Leaks
1.
INTRODUCTION
Compared with the phenomenal progress in smartphone technolo-
gies, the ways smartphones are being used today are even more
stunning. Increasingly, they become primary devices not only for
the traditional phone calling, but for email checking, messaging,
mapping/navigation, entertainment, social networking and even for
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516661 .
activities as important as healthcare and investment management.
This abrupt development challenges the limits of smartphone de-
signers’ imagination, and naturally calls into question whether the
original security designs of smartphone systems, like Android, are
ready for those highly diverse, fast-evolving applications. Indeed,
recent years have seen waves of Android-based malware [3, 7] that
exploit different vulnerabilities within this new computing platform,
highlighting the security and privacy threats it is facing.
Android’s security protection has been under scrutiny for years. A
few weaknesses of the system, such as permission re-delegation [21]
and capability leaks [27], are revealed by researchers. Particularly,
a recent blog [16] from Leviathan Security Group describes the
malicious activities that could be performed by an app without any
permissions, including reading from SD card, accessing a list of
installed apps, getting some device and system information (GSM
and SIM vendor ID, the Android ID and kernel version) and pinging
through a Linux Shell. Most of the problems reported here are
either implementation weaknesses or design ambiguities that lead
developers to inadvertent exposures. Examples include SD card
read and unauthorized ping, which have all been ﬁxed. The rest turn
out to be less of a concern, as they are almost impossible to exploit
in practice (GSM/SIM/Android ID, which leads to nothing more
than mobile country code and mobile network code).
Actually, the design of Android takes security seriously. It is
built upon a sandbox and permission model, in which each app is
isolated from others by Linux user-based protection and required
to explicitly ask for permissions to access the resources outside its
sandbox before it can be installed on a phone. Compared with what
are provided by conventional desktop-oriented OSes, even Linux on
which Android is built, this security design looks pretty solid.
Information leaks from public resources. In our research, we are
asking a different question: assuming that Android’s security design
has been faithfully implemented and apps are well protected by their
developers, what can a malicious app still learn about the user’s
private information without any permissions at all? For such a zero-
permission app, all it can access are a set of seemingly harmless
resources shared across users (i.e. apps), which are made publicly
available by Android and its underlying Linux, for the purpose of
facilitating coordination among apps and simplifying access control.
However, the rapidly-evolving designs and functionalities of emerg-
ing apps, particularly their rich and diverse background information
(e.g., social network, public online services, etc.), begin to invalidate
such design assumptions, turning thought-to-be innocuous data into
serious information leaks.
For example, consider the list of apps installed on an Android
phone, which can be obtained by calling the pubic API Package-
Manager.getInstalledApplications() or looking at
1017User IDs (UID) within a Linux Shell. Such an app list is not
considered sensitive by Google and UIDs are never thought to be
conﬁdential on Linux. However, for some healthcare apps (e.g., dia-
betes app) and life-style apps (e.g., gay social network like Hornet),
simply knowing their names can lead to a grave infringement on
their users’ privacy. As another example, network data usage of an
app is deliberately published by Android through its Linux public
directory, aiming to help a smartphone user keep track of the app’s
mobile data consumption. However, we found in our research that
this piece of apparently harmless and also useful data can actually be
used to ﬁngerprint a user’s certain online activity, such as tweeting.
This knowledge, combined with the background information that
comes with the Twitter app (i.e., public tweets), can be used to infer
the user’s true identity, using an inference technique we developed
(Section 3.2).
Our study. An in-depth understanding of such information leaks
from Android public resources is critical, as it reveals the gap be-
tween the fundamental limitations of Android security design and
the diversity in the ways the system is utilized by app developers.
This understanding will be invaluable for the future development of
securer mobile OSes that support the evolving utility. However, a
study on the problem has never been done before. In this paper, we
report our ﬁrst step on this crucial yet understudied direction.
Our study inspects public resources disclosed at both the Android
and its Linux layers and analyzes the impact such exposures can
have on the private information maintained by a set of popular
apps, in the presence of the rich background information they bring
in. This research leads to a series of stunning discoveries on what
can actually be inferred from those public resources by leveraging
such auxiliary information. Speciﬁcally, by monitoring the network-
data usage statistics of high-proﬁle Android apps, such as Twitter,
WebMD (app by a leading healthcare information provider [1]) and
Yahoo! Finance (one of the most widely-used stock apps), one can
ﬁnd out a smartphone user’s true identity, disease conditions and
stocks one is interested in, without any permissions at all. Looking at
the public trace of Address Resolution Protocol (ARP) stored under
a public Linux directory, a zero-permission adversary can locate the
user with good accuracy. Even the status of a smartphone’s speaker
(on or off), which can be conveniently identiﬁed through a public
Android API, AudioManager.isMusicActive, turns out to
be a serious information leak. We show that when a GPS navigator
is being used, from the audio-on/off status, an inference technique
we built can ﬁgure out the place the smartphone user goes and her
driving route. A video demo of these attacks is posted online [12].
All such information leaks are found to be strongly related to
the fallacies of design assumptions instead of mere implementation
bugs. Every piece of information here is actually meant to be dis-
closed by Android and most of such data has been extensively used
by legitimate Android apps: for example, hundreds of data usage
monitors are already out there [5], relying on the usage statistics to
keep track of a user’s mobile data consumption. Therefore, ﬁxing
these information leaks must be done carefully to avoid undermining
the basic functions of these existing apps and to strike a balance
between system utility and data protection. To this end, we have
designed a preliminary mitigation approach that controls the way
data usage information is released, which helps to better understand
how to achieve such a delicate trade-off.
Contributions. We summarize the contributions of the paper as
follows:
• Understanding of information leaks from Android public resources.
Different from prior research that mainly focuses on implementation
ﬂaws within Android, our study contributes to a better understanding
of an understudied yet fundamental weakness in Android design: the
information leaks from the resources that are not originally consid-
ered to be conﬁdential and therefore made available for improving
system usability. This has been achieved through a suite of new
inference techniques designed to demonstrate that highly-sensitive
user data can be recovered from the public resources, in the presence
of rich background information provided by popular apps and online
resources.
• First step toward mitigating this new threat. We have developed
a new mitigation approach, aiming to preserve the utility of such
public data to the legitimate parties while controlling the way that
an adversary can use it to derive user secrets.
Roadmap. The rest of the paper is organized as follows: Section 2
analyzes the privacy risks of Android public resources and the ad-
versary model; Section 3, 4 and 5 elaborate the new side channels
we discovered and the techniques we use to infer conﬁdential in-
formation from them; Section 6 describes our mitigation approach;
Section 7 compares our work with prior related research and Sec-
tion 8 concludes the paper.
2. THREATS TO PUBLIC RESOURCES
2.1 Leaks from Public Resources
Android is an operating system built on top of Linux. Its security
model is based upon Linux’s kernel level protection (process sepa-
ration, ﬁle system access control). Speciﬁcally, each Android app
is assigned with a unique user ID and runs as that user. Sensitive
resources are usually mapped to special Linux groups such as inet,
gps, etc. This approach, called application sandboxing, enables the
Linux kernel to separate an app from other running apps. Within
a sandbox, an app can invoke Android APIs to access system re-
sources. The APIs that operate on sensitive resources, including
camera, location, network, etc., are protected by permissions. An
app needs to explicitly request (using AndroidManifest.xml) from
the device’s user such permissions during its installation so as to
get assigned to the Linux groups of the resources under protection,
before it can utilize such resources.
Public resources on Android. Like any operating system, Android
provides a set of shared resources that underprivileged users (apps
without any permission) can access. This is necessary for making the
system easy to use for both app developers and end users. Following
is a rough classiﬁcation of the resources available to those zero-
permission apps:
• Linux layer: public directories. Linux historically makes available
a large amount of resources considered harmless to normal users,
to help them coordinate their activities. A prominent example is
the process information displayed by the ps command (invoked
through Runtime.getRuntime.exec), which includes each
running process’s user ID, Process ID (PID), memory and CPU
consumption and other statistics.
Most of such resources are provided through two virtual ﬁlesys-
tems, the proc ﬁlesystem (procfs) and the sys ﬁlesystem (sysfs).
The procfs contains public statistics about a process’s use of mem-
ory, CPU, network resources and other data. Under the sysfs
directories, one can ﬁnd device/driver information, network en-
vironment data (/sys/class/net/) and more. Android in-
herits such public resources from Linux and enhances the sys-
tem with new ones (e.g. /proc/uid_stat). For example,
the network trafﬁc statistics (/proc/uid_stat/tcp_snd and
/proc/uid_stat/tcp_rcv) are extensively utilized [5] to
keep track of individual apps’ mobile data consumption.
1018• Android layer: Android public APIs. In addition to the public
resources provided by Linux, Android further offers public APIs
to enable apps to get access to public data and interact with each
other. An example is AudioManager.requestAudioFocus,
which coordinates apps’ use of the audio resource (e.g, muting the
music when a phone call comes in).
Privacy risks. All such public resources are considered to be harm-
less and their releases are part of the design which is important
to the system’s normal operations. Examples include the coor-
dinations among users through ps and among the apps using au-
dio resources through AudioManager.requestAudioFocus.
However, those old design assumptions on the public resources are
becoming increasingly irrelevant in front of the fast-evolving ways
to use smartphones. We found that the following design/use gaps
are swiftly widening:
• Gap between Linux design and smartphone use. Linux comes
with the legacy of its original designs for workstations and servers.
Some of its information disclosure, which could be harmless in
these stationary environments, could become a critical issue for
mobile phones. For example, Linux makes the MAC address of
the wireless access points (WAP) available under its procfs. This
does not seem to be a big issue for a workstation or even a laptop
back a few years ago. For a smartphone, however, knowledge about
such information will lead to disclosure of a phone user’s location,
particularly with the recent development that databases have been
built for ﬁngerprinting geo-locations with WAPs’ MAC addresses
(called Basic Service Set Identiﬁcation, or BSSID).
• Gap between the assumptions on Android public resources and
evolving app design, functionalities and background information.
Even more challenging is the dramatic evolution of Android apps.
For example, an app is often dedicated to a speciﬁc website. There-
fore, the adversary no longer needs to infer the website a user visits,
as it can be easily found out by looking at which app is running
(through ps for example). Most importantly, today’s apps often
come with a plethora of background information like tweets, public
posts and public web services such as Google Maps. As a result,
even very thin information about the app’s behavior (e.g., posting
a message), as exposed by the public resources, could be linked to
such public knowledge to recover sensitive user data.
Information leaks. In our research, we carefully analyzed the ways
that public resources are utilized by the OS and popular apps on
Android, together with the public online information related to their
operations. Our study discovered three conﬁrmed new sources of
information leaks:
• App network-data usage (Section 3). We found that the data usage
statistics disclosed by the procfs can be used to precisely ﬁngerprint
an app’s behavior and even infer its input data, by leveraging online
resources such as tweets published by Twitter. To demonstrate the
seriousness of the information leakage from those usage data, we
develop a suite of inference techniques that can reveal a phone
user’s identity from the network-data consumption of Twitter app,
the disease conditions she is interested in from that of WebMD app
and the stock she is looking at from Yahoo! Finance app.
• Public ARP information (Section 4). We discovered that the public
ARP data released by Android (under its Linux public directory)
contains the BSSID of the WAP a phone is connected to, and demon-
strate how to practically utilize such information to locate a phone
user through BSSID databases.
• Audio status API (Section 5). We show that the public audio status
information (speaker on/off) collected from a GPS navigator can be
used to ﬁngerprint a driving route. We further present an inference
technique that uses Google Maps and the status information to
practically identify her driving route on the map.
We built a zero-permission app that stealthily collects information
for these attacks. A video demo is posted online [12].
2.2 Zero-Permission Adversary
Adversary model. The adversary considered in our research runs a
zero-permission app on the victim’s smartphone. Such an app needs
to operate in a stealthy way to visually conceal its presence from the