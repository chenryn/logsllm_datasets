# Identity, Location, Disease and More: Inferring Your Secrets from Android Public Resources

**Authors:**
- Xiaoyong Zhou¹
- Soteris Demetriou²
- Dongjing He²
- Muhammad Naveed²
- Xiaorui Pan¹
- XiaoFeng Wang¹
- Carl A. Gunter²
- Klara Nahrstedt²

¹School of Informatics and Computing, Indiana University, Bloomington, IN, USA  
²Department of Computer Science, University of Illinois, Urbana-Champaign, IL, USA

**Contact:**
- {zhou, xiaopan, xw7}@indiana.edu
- {sdemetr2, dhe6, naveed2, cgunter, klara}@illinois.edu

## Abstract
Android's design relies on a set of unprotected shared resources, including those inherited from Linux (e.g., public directories). However, the rapid development of Android applications (apps) has made a large amount of public background information available, which can potentially turn these harmless resource-sharing mechanisms into serious privacy breaches. In this paper, we report our findings on three unexpected channels of information leaks on Android: per-app data-usage statistics, ARP information, and speaker status (on or off). By monitoring these channels, an app without any permissions can acquire sensitive information such as a user's identity, disease conditions, geo-locations, and driving routes. Furthermore, we demonstrate that using existing and new techniques, a zero-permission app can determine when its target is running and stealthily send collected data to a remote adversary. These findings challenge the assumptions about the security of shared resources and demand effective solutions. We present a mitigation mechanism to achieve a balance between utility and privacy.

## Categories and Subject Descriptors
- D.4.6 [Operating Systems]: Security and Protection—Security kernels
- K.4.1 [Computers and Society]: Public Policy Issues—Privacy

## Keywords
- Mobile Security, Privacy, Information Leaks

## 1. Introduction
The rapid advancement in smartphone technologies has led to their widespread use for various purposes, including phone calls, email, messaging, navigation, entertainment, social networking, healthcare, and investment management. This evolution challenges the original security designs of smartphone systems like Android. Recent years have seen numerous instances of Android-based malware exploiting vulnerabilities, highlighting the security and privacy threats faced by users.

While Android's security model, built on a sandbox and permission system, appears robust, it is based on certain design assumptions. Our research investigates what a malicious app can learn about a user's private information without any permissions. We discovered that seemingly harmless public resources, such as app lists, network data usage, and audio status, can be exploited to infer sensitive information. For example, knowing the names of installed apps can reveal a user's health conditions or social preferences. Network data usage can be used to fingerprint online activities, and audio status can be used to track driving routes.

Our study provides a deeper understanding of these information leaks and proposes a preliminary mitigation approach to balance utility and privacy.

## 2. Threats to Public Resources

### 2.1 Leaks from Public Resources
Android, built on top of Linux, employs a security model based on process separation and file system access control. Each app runs with a unique user ID, and sensitive resources are protected by permissions. However, some resources are publicly accessible to facilitate system usability. These include:

- **Linux Layer:** Public directories such as `procfs` and `sysfs` provide information about processes, memory, CPU, and network usage.
- **Android Layer:** Public APIs, such as `AudioManager.requestAudioFocus`, allow apps to coordinate and interact.

These public resources, while essential for system operations, can be exploited to infer sensitive information. For instance, the MAC address of wireless access points (WAPs) can be used to locate a user, and app-specific data usage can reveal user activities.

### 2.2 Zero-Permission Adversary
We consider an adversary running a zero-permission app on the victim's smartphone. Such an app operates stealthily to avoid detection and can exploit the following information leaks:

- **App Network-Data Usage:** Data usage statistics can be used to fingerprint app behavior and infer input data.
- **Public ARP Information:** ARP data can be used to locate a user through BSSID databases.
- **Audio Status API:** Audio status (speaker on/off) can be used to track driving routes.

We developed a zero-permission app to demonstrate these attacks and posted a video demo online [12].

## 3. Understanding of Information Leaks
Our study contributes to a better understanding of fundamental weaknesses in Android's design, specifically the information leaks from resources not originally considered confidential. We designed new inference techniques to show how highly sensitive user data can be recovered from public resources, leveraging rich background information provided by popular apps and online services.

## 4. Mitigation Approach
To address these threats, we propose a mitigation approach that controls the way data usage information is released, preserving utility for legitimate parties while preventing adversaries from inferring user secrets.

## 5. Contributions
- **Understanding of Information Leaks:** We provide a comprehensive analysis of information leaks from Android public resources.
- **Mitigation Approach:** We develop a new method to balance utility and privacy, controlling the release of public data.

## 6. Roadmap
- **Section 2:** Analyzes the privacy risks and adversary model.
- **Sections 3, 4, and 5:** Elaborate on the new side channels and inference techniques.
- **Section 6:** Describes our mitigation approach.
- **Section 7:** Compares our work with prior related research.
- **Section 8:** Concludes the paper.

This structured and detailed approach aims to provide a clear and professional presentation of our research and findings.