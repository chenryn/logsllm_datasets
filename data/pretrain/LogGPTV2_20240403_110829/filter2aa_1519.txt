Offensive Golang 
Bonanza
Writing Golang Malware 
Ben Kurtz       @symbolcrash1     PI:EMAIL
Introductions
First Defcon talk 16 years ago 
Host of the Hack the Planet podcast 
All kinds of random projects 
Enough about me, we’ve gotta hustle 
What We’re Doing
Easy Mode: Listen along and you’ll get a 
sense of the available Golang malware 
components 
Expert Mode: Follow the links to code 
samples, interviews, and all kinds of 
other stuff; learn how to make/detect 
Golang malware
Agenda
Binject Origin & Why Golang is cool 
Malware Core Components 
Exploitation Tools 
EDR & NIDS Evasion Tools 
Post-exploitation Tools 
Complete C2 Frameworks
Long, long ago…
I got interested in anti-censorship 
around an Iranian election, took a look 
at Tor’s obfsproxy2 and thought I could 
do better 
Started the Ratnet project*, decided to 
use that as an excuse to learn Golang 
*this comes up later
Golang is Magic
Everything you need comes in the stdlib 
Crypto, Networking, FFI, Serialization, VFS 
Or is built into the compiler||runtime 
Cross-compiler, Tests, Asm, Threads, GC 
3rd Party library support is unparalleled 
Rust is years away, but what we did is a guide
Golang is Magic
Main Reason I love Go: 
It’s the fastest way to be done 
Fastest way to learn Go: 
golang.org/doc/effective_go
Go Facts
Not interpreted, statically compiled 
~800k Runtime compiled in 
Embedded assembly language based on Plan9’s 
assembler, lets you do arbitrary low-level 
stuff without having to use CGO or set up 
external toolchains. 
Go Assembly Write-up: 
https://www.symbolcrash.com/2021/03/02/go-
assembly-on-the-arm64/ 
So Stuxnet Happened
Everyone gets hot on environmental 
keying 
Josh Pitts does Ebowla in Golang 
All the EDRs write sigs for Ebowla 
*cough* the Golang runtime (shared by 
all Golang progs) 
And then this happens…
Docker
Terraform
py2exe/jar2exe returns
EDRs can’t figure out how to sig Go very 
well since it’s statically compiled, and 
can’t sig the runtime… 
And we already have this sweet 
exfiltration thing (Ratnet)… 
Start meeting up with other security 
people interested in Go and things 
escalate quickly…
It’s Go Time!
#golang: the best 
place on the internet
Helpful, friendly people writing malware 
Binject: capnspacehook, vyrus001, ahhh, 
sblip 
Others: C-Sto, omnifocal, aus, ne0nd0g, 
audibleblink, magnus stubman, + ~500 
Donut: thewover, odzhan 
Sliver: lesnuages, moloch 
Sysop: jeffmcjunkin 
Thanks Everyone! 
You’re awesome
Offense and Defense
We’re all working security engineers and 
red-teamers 
The goal here is to communicate a deeper 
understanding of what is possible and 
how things really work 
Everything we’re about to talk about is 
open source, so it can be studied for 
defense as well 
Don’t be an OSTrich
Golang Reversing
Go reversing tools are still somewhat 
limited, likely a result of static 
compilation requiring manual work (~C) 
Gore/Redress: Extracts metadata from 
stripped Go binaries, some dependencies, 
compiler version 
IDAGolangHelper: IDA scripts for parsing 
Golang type information 
golang_loader_assist: related blog post
Agenda
Binject Origin & Why Golang is cool 
Malware Core Components 
Exploitation Tools 
EDR & NIDS Evasion Tools 
Post-exploitation Tools 
Complete C2 Frameworks
Binject/debug
Fork of stdlib parsers for PE/Elf/Mach-O 
binary formats 
We fixed a bunch of bugs and added: 
Read/Write from File or Memory 
Parse/Modify your own process! 
Make changes to executables in code and 
write them back out! 
This gets used by many of the other tools 
github.com/Binject/debug
Binject/debug
Parser entrypoints are always NewFile() 
or NewFileFromMemory() 
Generator entrypoints are always Bytes() 
Added code for relocs, IAT, adding 
sections, hooking entrypoints, changing 
signatures, etc. 
Look at the code coming up for examples!
cppgo
Go’s syscall lets you make calls to a 
single ABI, only on Windows 
cppgo lets you make calls to any ABI on 
any platform! stdcall, cdecl, thiscall 
We forked this from lsegal and added 
Apple M1 support! 
Best example of Go ASM ever   
github.com/awgh/cppgo
Agenda
Binject Origin & Why Golang is cool 
Malware Core Components 
Exploitation Tools 
EDR & NIDS Evasion Tools 
Post-exploitation Tools 
Complete C2 Frameworks
binjection
Tool to insert shellcode into binaries 
of any format. 
Variety of injection algorithms 
implemented. 
Extensible. 
Uses Binject/debug for parsing and 
writing, contains just the injection 
code itself. 
github.com/Binject/binjection
binjection 
Injection Methods: 
PE -> Add new section 
ELF ->  
Silvio Cesare’s padding 
infection method (updated for 
PIE),  
sblip’s PT_NOTE method, and  
shared lib .ctors hooking 
Mach-O -> One True Code Cave
backdoorfactory
MitM tool that infects downloaded 
binaries with shellcode 
Josh Pitts's thebackdoorfactory stopped 
working sometime in 2016-17, but we 
loved it… (he’s updating it again) 
Let’s make a new one with a modular 
design using these components and 
replacing ettercap with bettercap…  
bettercap Caplets 
download-autopwn comes with bettercap, 
already intercepts web downloads and 
replaces them with shellcode 
Only ReadFile/WriteFile are exposed in 
caplet script language 
So… we just point those at named pipes 
and redirect them to binjection!
backdoorfactory
Starts up a pipe server, spits out a 
modified caplet and bettercap config 
Tells you what bettercap command to run 
Requires configuration of the User-Agent 
regexes and file extensions to inject 
Put your shellcodes in a directory 
structure with .bin extensions  
github.com/Binject/backdoorfactory
backdoorfactory
Adds support for unpacking archives 
(TGZ,ZIP,etc), injecting all binaries 
inside them, and repacking them 
Easy to add support for re-signing with 
stolen/purchased/generated key 
We also ported this to Wifi Pineapple 
packages, since Golang supports mips32! 
Run it on a malicious AP or on-path 
router! (bettercap, backdoorfactory)
Signing from Golang
Once you’ve injected, maybe you want to 
re-sign the binary (or just for EDR) 
Limelighter - signs EXE/DLL with real 
cert or makes one up! 
Relic - signs everything! 
RPM,DEB,JAR,XAP,PS1,APK,Mach-o,DMG 
Authenticode EXE,MSI,CAB,appx,CAT
goWMIExec & go-smb
C-Sto’s goWMIExec brings WMI remote 
execution to Go 
go-smb2 has full support for SMB copy 
operations 
Combined, you can do impacket’s 
“smbexec” functionality: 
Upload or share file with go-smb2 
Execute it with goWMIExec 
For complete example of smbexec in Go,  
see the Source code for the Defcon 29 Workshop:  
Writing Golang Malware
Misc Exploitation
gophish - Phishing toolkit 
gobuster - Brute-forcer for URIs, 
subdomains, open S3 buckets, vhosts 
madns - DNS server for pentesters, 
useful for XXE exploitation and Android 
reversing 
modlishka - Phishing reverse proxy/2FA 
bypass   
Agenda
Binject Origin & Why Golang is cool 
Malware Core Components 
Exploitation Tools 
EDR & NIDS Evasion Tools 
Post-exploitation Tools 
Complete C2 Frameworks
garble
Replaces the broken gobfuscate 
Strips almost all Go metadata 
Replaces string literals with lambdas 
Works fast & easy w./ Go modules 
The only Golang obfuscator you should be 
using! 
Try it with redress!
github.com/burrowers/garble
Ratnet
Designed to help smuggle data through 
hostile networks (custom wire protocol 
for NIDS evasion) 
Uses pluggable transports:  
  UDP, TLS, HTTPS, DNS, S3 
Store and forward + e2e encryption 
Also works offline/mesh 
Handheld hardware coming out next year! 
github.com/awgh/ratnet
Ratnet
Use Case: Pivot out of an isolated 
machine with mDNS/multicast 
Implants act as routers for other 
implants. They find each other, only 
one needs a way out 
Demo also in the Workshop Source code 
Use Case: Pivot out of an egress-proxied 
datacenter using DNS or S3 
Misc Tunnels & Proxies
Chashell - Reverse shell over DNS 
Chisel - TCP/UDP tunnel over HTTP 
(These two made the news recently…) 
Gost - HTTP/Socks5 tunnel 
Holeysocks - Reverse Socks via SSH 
Wireguard - Distributed VPN
pandorasbox
Encrypted in-memory virtual filesystem 
Transparent integration with Golang file 
abstraction 
Encryption and ~secure enclave provided 
by MemGuard
github.com/capnspacehook/pandorasbox
Universal Loader
●
Reflective DLL Loading in Golang on all Platforms 
(including the Apple M1!) 
●
Replicates the behavior of the system loader when 
loading a shared library into a process 
●
Load a shared library into the current process 
and call functions in it, with the same app 
interface on all platforms! 
●
Library can be loaded from memory, without ever 
touching disk!
github.com/Binject/universal
Universal Loader
●
Windows Method avoids system loader 
●
Walks PEB (Go ASM), import_address_table 
branch does IAT fixups 
●
OSX Method uses dyld (thanks MalwareUnicorn!) 
●
Linux Method avoids system loader and does 
not use memfd! 
●
Heavy use of Binject/debug to parse current 
process and library + cppgo to make the calls
Universal Loader
No system loader means other libraries will 
not be loaded automatically for you! 
Window IAT branch: 
syscall.MustLoadDLL(“kernel32.dll") 
everything you need ahead of time, 
dependencies will be resolved by PEB + 
Binject/debug 
For Linux, statically compile the libs you 
need to load this way and avoid library 
dependencies altogether!
Donut
Donut payload creation framework: 
A utility that converts EXE, DLL, .NET 
assembly, or JScript/VBS to an 
encrypted injectable shellcode 
An asm loader that decrypts and loads a 
donut payload into a process 
Supports remote loads, local/remote 
processes, and a ton of other stuff!
github.com/TheWover/donut
go-donut
Ported the donut utility to Go using 
Binject/debug, re-used the loader 
This lets your Golang-based c2’s 
generate donut payloads from code and 
from Linux/OSX. 
Can also use it in your implants…
github.com/Binject/go-donut
Universal vs Donut
For an implant module system that never 
touches disk, you may be better off using 
Donut and injecting into new/separate 
processes (or yourself) rather than 
Universal 
Especially if you want to run complex 
modules like mimikatz (COM host must be on 
main thread) or other Go programs.  
Scarecrow
Another payload creation framework: 
Signs payloads using limelighter 
Disables ETW by unhooking itself 
AES encryption 
Many other stealth features!
github.com/optiv/ScareCrow
bananaphone
Implements Hell’s Gate for Golang, using 
the exact same interface as the built-in 
syscall library 
Modified version of mkwinsyscall 
generates Go stubs from headers 
Uses Go ASM and Binject/debug 
Code using syscall can be easily 
converted! There is no reason not to use 
this, it’s amazing and easy
github.com/C-Sto/BananaPhone
bananaphone
Bananaphone also has a unique 
improvement over traditional Hell’s 
Gate: 
The “auto mode” will detect when NTDLL 
has been hooked by EDR and automatically 
switch to loading NTDLL from disk 
instead of the hooked in-memory version!
gopherheaven
Implements Heaven’s Gate for Golang 
Allows calling 64-bit code from 32-bit 
as a method of EDR evasion 
Also uses Binject/debug :) 
Some sweet i386 Go ASM
github.com/aus/gopherheaven
Agenda
Binject Origin & Why Golang is cool 
Malware Core Components 
Exploitation Tools 
EDR & NIDS Evasion Tools 
Post-exploitation Tools 
Complete C2 Frameworks
go-mimikatz
Combines go-donut and bananaphone 
… which both use Binject/debug 
Downloads mimikatz to RAM, makes it into 
a donut payload, and injects it into 
itself with bananaphoned system calls! 
Lets you just run mimikatz on a 
surprising number of systems… 
Whole program is <150 lines of code!
github.com/vyrus001/go-mimikatz
Demo go-mimikatz
From Linux, go-mimikatz dir: 
GOOS=windows GOARCH=amd64 go build 
Copied to a SMB share with name “gm.exe” 
Did not even use garble… 
This is current mimikatz, Win10 Edge, 
Defender enabled, running from SMB…
msflib
Make your implants work with Metasploit! 
Uses bananaphone 
Run a payload in the implant process 
Inject a payload into a remote process
github.com/vyrus001/msflib
taskmaster
Windows Task Scheduler library for Go 
For persistence, it’s easier to schedule 
a task than to create a Windows service 
If you really want a Windows service, 
here’s an example
github.com/capnspacehook/taskmaster
gscript
Scripting language for droppers in all 
three OSes, using embedded JS 
Can disable AV, EDR, firewalls, reg 
changes, persistence, allll kinds of 
stuff (ahhh’s gscript repo) 
There’s a whole Defcon26 talk on it! 
github.com/gen0cide/gscript
gosecretsdump
Dumps hashes from NTDS.dit files much 
faster than impacket 
Minutes vs Hours (Go vs Python) 
Requires SYSTEM privs to run locally 
Also works on backups
github.com/C-Sto/gosecretsdump
goLazagne
Go port of lazagne 
Grabs all browser, mail, admin tool 
passwords 
Requires CGO just because of sqlite 
requirement, but… there are purego 
alternatives now…
github.com/kerbyj/goLazagne
Misc Post-Exploitation
rclone - dumps data from S3, Dropbox, 
GCloud, and other cloud drives 
sudophisher - logs the sudo password by 
replacing ASKPASS
Agenda
Binject Origin & Why Golang is cool 
Malware Core Components 
Exploitation Tools 
EDR & NIDS Evasion Tools 
Post-exploitation Tools 
Complete C2 Frameworks
sliver
Open-source 
alternative to 
Cobalt Strike 
Implant build/
config/obfuscate 
Multiple 
exfiltration 
methods 
Actively 
Developed
github.com/BishopFox/sliver
merlin
Single operator 
Many unique features! 
Multiple injection methods including 
QueueUserAPC 
Donut & sRDI integration 
QUIC support! (Also many others)
github.com/Ne0nd0g/merlin
Ben Kurtz (PI:EMAIL) 
@symbolcrash1 
https://symbolcrash.com/podcast 
Thanks! 
Relevant Hack the Planet episodes: 
    Josh Pitts Interview            (YouTube) 
    C-Sto & capnspacehook Interview (YouTube)