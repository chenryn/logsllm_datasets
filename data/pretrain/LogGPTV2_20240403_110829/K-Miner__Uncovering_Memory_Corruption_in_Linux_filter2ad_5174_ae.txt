Bugs such as dangling pointers, use-after-free, double
free, or double-lock errors are introduced through human
error during routine programming. Since the code bases of
modern kernels are also highly complex, many vulnerabilities
are typically hard to ﬁnd using simple text-based analysis
tools. Additionally, ﬁnding deeply nested vulnerabilities using
dynamic analyses, such as fuzzing, is usually difﬁcult, as every
nested layer of call indirection decreases the chances of the
fuzzer to randomly trigger the required path. Furthermore,
dynamic testing does not offer any guarantees in the case of
negative results.
In this paper we present K-Miner, as the ﬁrst data-ﬂow
analysis framework targeting operating systems. We enable
scalable, precise, and expressive static analysis for commodity
kernels, and demonstrate high practicality by identifying crit-
ical vulnerabilities. K-Miner tackles a number of challenges
with respect
to the huge and highly complex code bases
of modern kernels, and provides several analysis passes for
ﬁnding memory-corruption vulenrabilities such as dangling
pointers, use-after-free, double free, and double-lock errors.
Our extensive evaluation shows that K-Miner is able to ana-
lyze recent versions of Linux in different conﬁgurations and
uncover real-world vulnerabilities.
ACKNOWLEDGEMENT
The authors would like to thank Ferdinand Brasser and
Mathias Payer for interesting discussions and comments, as
well as the anonymous reviewers for their valuable feedback.
This work was supported in part by the German Sci-
ence Foundation (project S2, CRC 1119 CROSSING), the
European Union’s Seventh Framework Programme (609611,
PRACTICE), and the German Federal Ministry of Education
and Research within CRISP.
12
APPENDIX A: WEB INTERFACE OF K-MINER
Figure 7: Web interface overview.
Figure 8: Web interface details.
13
REFERENCES
[1]
I. Abal, C. Brabrand, and A. Wasowski. Effective bug ﬁnding in c
In International Con-
programs with shape and effect abstractions.
ference on Veriﬁcation, Model Checking, and Abstract Interpretation,
pages 34–54. Springer, 2017.
[2] T. Anton. usb: phy: Fix double lock in otg fsm. https://github.com/
torvalds/linux/commit/16da4b1, 2013.
[3] Apple.
Kernel extensions.
https : / / developer . apple . com /
library/content/documentation/Security/Conceptual/System Integrity
Protection Guide/KernelExtensions/KernelExtensions.html, 2014.
[4] ArchitectureReviewBoards. Openmp. http://www.openmp.org/, 2017.
[5] A. Azab, K. Swidowski, R. Bhutkar, J. Ma, W. Shen, R. Wang, and
P. Ning. Skee: A lightweight secure kernel-level execution environment
In 23rd Annual Network and Distributed System Security
for arm.
Symposium, NDSS, 2016.
[6] C. Baumann and T. Bormer. Verifying the pikeos microkernel: First
In Doctoral Symposium
results in the verisoft xt avionics project.
on Systems Software Veriﬁcation (DS SSV’09) Real Software, Real
Problems, Real Solutions, page 20, 2009.
[7] F. Brasser, L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi.
Can’t touch this: Practical and generic software-only defenses against
rowhammer attacks. arXiv preprint arXiv:1611.08396, 2016.
[8] C. Cadar, D. Dunbar, D. R. Engler, et al. Klee: Unassisted and automatic
In
generation of high-coverage tests for complex systems programs.
OSDI, volume 8, pages 209–224, 2008.
[9] D. Carpenter. Smatch - the source matcher. http://smatch.sourceforge.
net, 2009.
[10] H. Chen, Y. Mao, X. Wang, D. Zhou, N. Zeldovich, and M. F.
Kaashoek. Linux kernel vulnerabilities: State-of-the-art defenses and
In Proceedings of the Second Asia-Paciﬁc Workshop
open problems.
on Systems, page 5. ACM, 2011.
[11] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-
data attacks are realistic threats. In 14th USENIX Security Symposium,
USENIX Sec, 2005.
[12] S. Christey and R. A. Martin. Vulnerability type distributions in cve.
Mitre report, May, 2007.
[13] H. Christopher. hfsplus: ﬁx double lock typo in ioctl. https://github.
com/torvalds/linux/commit/e50fb58, 2010.
J. Corbet and G. Kroah-Hartman. Linux kernel development report
2016. http://go.linuxfoundation.org/linux-kernel-development-report-
2016, 2016.
[14]
[15] P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Min´e, D. Monniaux,
In European Symposium on
and X. Rival. The astr´ee analyzer.
Programming, pages 21–30. Springer, 2005.
J. Criswell, N. Dautenhahn, and V. Adve. Kcoﬁ: Complete control-
ﬂow integrity for commodity operating system kernels. In 35th IEEE
Symposium on Security and Privacy, S&P, 2014.
[16]
[17] R. Cytron, J. Ferrante, B. Rosen, M. Wegman, and K. Zadeck. An
efﬁcient method of computing static single assignment form. In Pro-
ceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles
of programming languages, pages 25–35. ACM, 1989.
[18] C. Dan. drm/prime: double lock typo.
linux/commit/0adb237, 2013.
https://github.com/torvalds/
[19] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and V. Adve.
Nested kernel: An operating system architecture for intra-kernel privi-
lege separation. ACM SIGPLAN Notices, 50(4):191–206, 2015.
[20] L. Davi, D. Gens, C. Liebchen, and S. Ahmad-Reza. PT-Rand: Practical
In 24th Annual
mitigation of data-only attacks against page tables.
Network and Distributed System Security Symposium, NDSS, 2017.
[21] L. De Moura and N. Bjørner. Z3: An efﬁcient smt solver. Tools and
Algorithms for the Construction and Analysis of Systems, pages 337–
340, 2008.
[22] D. Drysdale. Coverage-guided kernel fuzzing with syzkaller.
//lwn.net/Articles/677764/, 2016.
https:
[24] D. Gens, S. Schmitt, L. Davi, and A. Sadeghi. K-Miner source code.
https://github.com/ssl-tud/k-miner, 2017.
[25] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced operating
system security through efﬁcient and ﬁne-grained address space ran-
domization. In 21st USENIX Security Symposium, USENIX Sec, 2012.
[26] Google, 2016.
[27]
I. Haller, Y. Jeon, H. Peng, M. Payer, C. Giuffrida, H. Bos, and
E. van der Kouwe. Typesan: Practical type confusion detection.
In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, pages 517–528. ACM, 2016.
[28] B. Hardekopf and C. Lin. Flow-sensitive pointer analysis for millions
of lines of code. In Code Generation and Optimization (CGO), 2011
9th Annual IEEE/ACM International Symposium on, pages 289–298.
IEEE, 2011.
[29] M. Hind.
Pointer analysis: Haven’t we solved this problem yet?
In Proceedings of the 2001 ACM SIGPLAN-SIGSOFT workshop on
Program analysis for software tools and engineering, pages 54–61.
ACM, 2001.
[30] G. Hotz. towelroot by geohot. https://towelroot.com, 2015.
[31] L. Huang, A. D. Joseph, B. Nelson, B. I. Rubinstein, and J. Tygar.
Adversarial machine learning. In Proceedings of the 4th ACM workshop
on Security and artiﬁcial intelligence, pages 43–58. ACM, 2011.
[32] R. Hund, T. Holz, and F. C. Freiling.
Return-oriented rootkits:
In USENIX
Bypassing kernel code integrity protection mechanisms.
Security Symposium, pages 383–398, 2009.
IEEE Computer Society - Austin Joint Working Group. 1003.1-2008 -
IEEE Standard for Information Technology - Portable Operating System
Interface (POSIX(R)). http://standards.ieee.org/ﬁndstds/standard/1003.
1-2008.html, 2008.
[33]
[34] D. Jones. Trinity: A system call fuzzer.
Ottawa Linux Symposium, pages, 2011.
In Proceedings of the 13th
[35] M. Jurczyk and G. Coldwind.
Identifying and exploiting windows
[36]
kernel race conditions via memory access patterns. 2013.
J. B. Kam and J. D. Ullman. Monotone data ﬂow analysis frameworks.
Acta Informatica, 7(3):305–317, 1977.
[37] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis.
ret2dir:
Rethinking kernel isolation. In USENIX Security, pages 957–972, 2014.
[38] A. Kenner, C. K¨astner, S. Haase, and T. Leich. Typechef: toward type
checking# ifdef variability in c. In Proceedings of the 2nd International
Workshop on Feature-Oriented Software Development, pages 25–32.
ACM, 2010.
[39] T. kernel development community. The kernel address sanitizer (kasan).
https://www.kernel.org/doc/html/latest/dev-tools/kasan.html, 2014.
[40] T. kernel development community. The undeﬁned behavior sanitizer
(ubsan). https://www.kernel.org/doc/html/latest/dev-tools/ubsan.html,
2014.
[41] U. Khedker, A. Sanyal, and B. Sathe. Data ﬂow analysis: theory and
practice. CRC Press, 2009.
[42] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu. Flipping bits in memory without accessing them:
An experimental study of dram disturbance errors. In ACM SIGARCH
Computer Architecture News, volume 42, pages 361–372. IEEE Press,
2014.
[43] G. Klein. Operating system veriﬁcation — an overview. S¯adhan¯a,
34:27–69, feb 2009.
[44] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
sel4:
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, et al.
the ACM
Formal veriﬁcation of an os kernel.
SIGOPS 22nd symposium on Operating systems principles, pages 207–
220. ACM, 2009.
In Proceedings of
[45] G. Kroah-Hartman. Signed kernel modules. http://www.linuxjournal.
com/article/7130, 2004.
[46] C. Lattner and V. S. Adve. LLVM: A compilation framework for
lifelong program analysis & transformation. In IEEE/ACM International
Symposium on Code Generation and Optimization, CGO, 2004.
[23] X. Ge, N. Talele, M. Payer, and T. Jaeger. Fine-grained control-ﬂow
In 1st IEEE European Symposium on
integrity for kernel software.
Security and Privacy, Euro S&P, 2016.
[47] K. Lu, M.-T. Walter, D. Pfaff, S. N¨urnberger, W. Lee, and M. Backes.
Unleashing use-before-initialization vulnerabilities in the linux kernel
using targeted stack spraying. NDSS, 2017.
14
linux kernel. In Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages 414–425. ACM, 2015.
[73] F. Yamaguchi. Pattern-based vulnerability discovery. 2015.
[74]
I. Yun, C. Min, X. Si, Y. Jang, T. Kim, and M. Naik. Apisan:
Sanitizing api usages through semantic cross-checking. In 25th USENIX
Security Symposium (USENIX Security 16), pages 363–378. USENIX
Association.
[48] Microsof. Kernel-mode code signing walkthrough.
https://msdn.
microsoft.com/en- us/library/windows/hardware/dn653569(v=vs.85)
.aspx, 2007.
[49] Microsoft.
us/library/Dn919635.aspx, 2015.
Control ﬂow guard.
http://msdn.microsoft.com/en-
[50] MITRE. CVE-2014-3153.
http://cve.mitre.org/cgi-bin/cvename.cgi?
name=CVE-2014-3153, 2014.
[51] F. Nielson, H. R. Nielson, and C. Hankin. Principles of program
analysis. Springer, 1999.
[52] Y. Padioleau, J. Lawall, R. R. Hansen, and G. Muller. Documenting and
automating collateral evolutions in linux device drivers. In Acm sigops
operating systems review, volume 42, pages 247–260. ACM, 2008.
[53] Z. Peter. printk: avoid double lock acquire. https://github.com/torvalds/
linux/commit/09dc3cf, 2011.
[54] T. Reps, S. Horwitz, and M. Sagiv. Precise interprocedural dataﬂow
In Proceedings of the 22nd ACM
analysis via graph reachability.
SIGPLAN-SIGACT symposium on Principles of programming lan-
guages, pages 49–61. ACM, 1995.
[55] M. Seaborn and T. Dullien. Exploiting the dram rowhammer bug to
gain kernel privileges. Black Hat, 2015.
[56] B. Shastry, F. Yamaguchi, K. Rieck, and J.-P. Seifert.
Towards
vulnerability discovery using staged program analysis. In Detection of
Intrusions and Malware, and Vulnerability Assessment, pages 78–97.
Springer, 2016.
[57] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee. Enforcing
In 23rd Annual
kernel security invariants with data ﬂow integrity.
Network and Distributed System Security Symposium, NDSS, 2016.
[58] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Driller: Augmenting
In NDSS, volume 16,
fuzzing through selective symbolic execution.
pages 1–16, 2016.
[59] Y. Sui and J. Xue. Svf: interprocedural static value-ﬂow analysis in
llvm. In Proceedings of the 25th International Conference on Compiler
Construction, pages 265–266. ACM, 2016.
[60] L. Szekeres, M. Payer, T. Wei, and D. Song. SoK: Eternal war in
memory. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.
[61] A. S. Tanenbaum and A. S. Woodhull. Operating systems: design and
implementation, volume 2. Prentice-Hall Englewood Cliffs, NJ, 1987.
https://wikileaks.org/
[62] H. Team. Hacking team futex exploit.
hackingteam/emails/emailid/312357, 2014.
[63] P. Team. RAP: RIP ROP, 2015.
[64] M. Tiwari, J. K. Oberg, X. Li, J. Valamehr, T. Levin, B. Hardekopf,
R. Kastner, F. T. Chong, and T. Sherwood. Crafting a usable microker-
nel, processor, and i/o system with strict and provable information ﬂow
security. In ACM SIGARCH Computer Architecture News, volume 39,
pages 189–200. ACM, 2011.
[65] T. B. Tok, S. Z. Guyer, and C. Lin. Efﬁcient ﬂow-sensitive interpro-
cedural data-ﬂow analysis in the presence of pointers. In International
Conference on Compiler Construction, pages 17–31. Springer, 2006.
[66] L. Torvalds. Sparse - a semantic parser for C.
kernel.org/index.php/Main Page, 2006.
https://sparse.wiki.
[67] W. Trevor. How the linux kernel initcall mechanism works.
http:
//www.compsoc.man.ac.uk/∼moz/kernelnewbies/documents/initcall/
kernel.html, 2003.
[68] R. Vall´ee-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundare-
san. Soot-a java bytecode optimization framework. In Proceedings of
the 1999 conference of the Centre for Advanced Studies on Collabora-
tive research, page 13. IBM Press, 1999.
[69] B. Webster. LLVMLinux. http://llvm.linuxfoundation.org, 2014.
[70]
J. Xiao, H. Huang, and H. Wang. Kernel data attack is a realistic
security threat. In International Conference on Security and Privacy in
Communication Systems, pages 135–154. Springer, 2015.
J. Xu, D. Mu, P. Chen, X. Xing, P. Wang, and P. Liu. Credal: Towards
locating a memory corruption vulnerability with your core dump.
In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, pages 529–540. ACM, 2016.
[71]
[72] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu. From
collision to exploitation: Unleashing use-after-free vulnerabilities in
15