随着代码库越来越庞大，您应该考虑编写函数库以重用代码。我们可以将所有常用的函数存储在一个名为scan.lib的单独文件中。这样，我们就可以根据未来的勘察任务需要随时调用这些函数。
    #!/bin/bash
    nmap_scan()
    {
      nmap $DOMAIN > $DIRECTORY/nmap
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    }
    dirsearch_scan()
    {
      $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
      echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    }
    crt_scan()
    {
      curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
      echo "The results of cert parsing is stored in $DIRECTORY/crt."
    }
In another file, we can source the library file in order to use all of
its functions and variables. We source a script via the
`      source     ` command, followed by the path to the script:
在另一个文件中，我们可以通过调用库文件来使用它的所有函数和变量。我们可以通过source命令，后面跟着脚本的路径，来调用脚本文件。
    #!/bin/bash
    source ./scan.lib
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    getopts "m:" OPTION
    MODE=$OPTARG
    for i in "${@:$OPTIND:$#}"
    do
      DOMAIN=$i
      DIRECTORY=${DOMAIN}_recon
      echo "Creating directory $DIRECTORY."
      mkdir $DIRECTORY
      case $MODE in
        nmap-only)
          nmap_scan
          ;;
        dirsearch-only)
          dirsearch_scan
          ;; 
        crt-only) 
          crt_scan
          ;;
        *)       
          nmap_scan
          dirsearch_scan
          crt_scan
          ;; 
      esac
      echo "Generating recon report for $DOMAIN..."
      TODAY=$(date)
      echo "This scan was created on $TODAY" > $DIRECTORY/report
      if [ -f $DIRECTORY/nmap ];then
        echo "Results for Nmap:" >> $DIRECTORY/report
        grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report
      fi
      if [ -f $DIRECTORY/dirsearch ];then
        echo "Results for Dirsearch:" >> $DIRECTORY/report
        cat $DIRECTORY/dirsearch >> $DIRECTORY/report
      fi
      if [ -f $DIRECTORY/crt ];then
        echo "Results for crt.sh:" >> $DIRECTORY/report
        jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report
      fi
    done
Using a library can be super useful when you're building multiple tools
that require the same functionalities. For example, you might build
multiple networking tools that all require DNS resolution. In this case,
you can simply write the functionality once and use it in all of your
tools.
使用库可以在构建多个需要相同功能的工具时非常有用。例如，您可能会构建多个网络工具，它们都需要DNS解析。在这种情况下，您只需编写一次功能，然后在所有工具中使用它。
### Building Interactive Programs {#c05.xhtml#h2-501546c05-0019}
What if you want to build an interactive program that takes user input
during execution? Let's say that if users enter the command line option,
`      -i     ` , you want the program to enter an interactive mode that
allows you to specify domains to scan as you go:
如果您想建立一个交互式程序，在执行期间接受用户输入怎么办？假设用户输入命令行选项
-i，则希望该程序进入交互模式，允许您按需指定要扫描的域：
    ./recon.sh -i -m nmap-only
For that, you can use `      read     ` . This command reads user input
and stores the input string into a variable:
为此，您可以使用read命令。该命令读取用户输入并将输入字符串存储到变量中：
    echo "Please enter a domain!"
    read $DOMAIN
[ ]{#c05.xhtml#Page_98 .pagebreak title="98"} These commands will prompt
the user to enter a domain, then store the input inside a variable named
`      $DOMAIN     ` .
这些命令会提示用户输入域名，并将输入存储在名为\$DOMAIN的变量中。
To prompt a user repeatedly, we need to use a `      while     ` loop,
which will keep printing the prompt asking for an input domain until the
user exits the program. Here's the syntax of a `      while     ` loop.
As long as the `      CONDITION     `{.variable} is true, the
`      while     ` loop will execute the code between `      do     `
and `      done     ` repeatedly:
要重复提示用户，我们需要使用while循环，它将不断打印提示以要求输入域，直到用户退出程序。以下是while循环的语法。只要条件为真，则while循环将在do和done之间重复执行代码。
    while CONDITION
    do
      DO SOMETHING
    done
We can use a `      while     ` loop to repeatedly prompt the user for
domains until the user enters `      quit     ` :
我们可以使用while循环来重复提示用户输入域名，直到用户输入quit为止。
    while [ $INPUT != "quit" ];do
      echo "Please enter a domain!"
      read INPUT 
      if [ $INPUT != "quit" ];then
        scan_domain $INPUT
        report_domain $INPUT
      fi
    done
We also need a way for users to actually invoke the `      -i     `
*option, and our* `      getopts     ` *command isn't currently doing
that. We can use a* `      while     ` *loop to parse options by using*
`      getopts     ` *repeatedly:*
我们还需要一种让用户实际调用"-i"选项的方法，而目前我们的getopts命令还没有实现这一点。我们可以使用while循环，通过重复使用getopts来解析选项。
    while getopts "m:i" OPTION; do
      case $OPTION in
        m)  
            MODE=$OPTARG
            ;; 
        i)  
            INTERACTIVE=true
            ;;
      esac
    done
*Here, we specify a* `      while     ` *loop that gets command line
options repeatedly. If the option flag is* `      -m     ` *, we set
the* `      MODE     ` *variable to the scan mode that the user has
specified. If the option flag is* `      -i     ` *, we set the*
`      $INTERACTIVE     ` *variable to* `      true     ` . Then, later
in the script, we can decide whether to invoke the interactive mode by
checking the value of the `      $INTERACTIVE     ` *variable. Putting
it all together, we get our final script:*
在这里，我们指定一个while循环，重复获取命令行选项。如果选项标志是"-m"，我们将MODE变量设置为用户指定的扫描模式。如果选项标志是"-i"，我们将\$INTERACTIVE变量设置为true。然后，在脚本的后面，我们可以通过检查\$INTERACTIVE变量的值来决定是否调用交互模式。把它全部结合起来，我们得到了最终的脚本：
    #!/bin/bash
    source ./scan.lib
    while getopts "m:i" OPTION; do
      case $OPTION in
        m)  
          MODE=$OPTARG
          ;; 
        i)  
          INTERACTIVE=true
          ;;
      esac
    done
    scan_domain(){
      DOMAIN=$1
      DIRECTORY=${DOMAIN}_recon
      echo "Creating directory $DIRECTORY."
      mkdir $DIRECTORY
      case $MODE in
        nmap-only)
          nmap_scan
          ;;
        dirsearch-only)
          dirsearch_scan
          ;;
        crt-only)
          crt_scan
          ;;
        *)       
          nmap_scan
          dirsearch_scan
          crt_scan
          ;;     
      esac
    }
    report_domain(){
      DOMAIN=$1
      DIRECTORY=${DOMAIN}_recon
      echo "Generating recon report for $DOMAIN..."
     TODAY=$(date)
      echo "This scan was created on $TODAY" > $DIRECTORY/report
      if [ -f $DIRECTORY/nmap ];then
       echo "Results for Nmap:" >> $DIRECTORY/report
        grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report
      fi
      if [ -f $DIRECTORY/dirsearch ];then
        echo "Results for Dirsearch:" >> $DIRECTORY/report
        cat $DIRECTORY/dirsearch >> $DIRECTORY/report
      fi
      if [ -f $DIRECTORY/crt ];then
        echo "Results for crt.sh:" >> $DIRECTORY/report
        jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report
      fi
    }
    if [ $INTERACTIVE ];then 1
      INPUT="BLANK"
      while [ $INPUT != "quit" ];do 2
        echo "Please enter a domain!"
        read INPUT 
        if [ $INPUT != "quit" ];then 3
          scan_domain $INPUT
          report_domain $INPUT
        fi
      done
    else
      for i in "${@:$OPTIND:$#}";do
        scan_domain $i
        report_domain $i
      done
    fi
In this program, we first check if the user has selected the interactive
mode by specifying the `      -i     ` *option* [ 1 ]{.CodeAnnotation
aria-label="annotation1"} *. We then repeatedly prompt the user for a
domain by using a* `      while     ` *loop* [ 2 ]{.CodeAnnotation
aria-label="annotation2"} *. If the user input is not the keyword*
`      quit     ` *, we assume that they entered a target domain, so we
scan and produce a report for that domain. The* `      while     ` *loop
will continue to run and ask the user for domains until the user enters*
`      quit     ` *, which will cause the* `      while     ` *loop to
exit and the program to terminate* [ 3 ]{.CodeAnnotation
aria-label="annotation3"} *.*
在此程序中，我们首先检查用户是否通过指定 -i
选项选择交互模式。接着，我们使用 while
循环重复提示用户输入域名。如果用户输入不是 quit
关键字，则假定他们输入了目标域名，因此我们会扫描并为该域名生成报告。while
循环将继续运行并要求用户输入域名，直到用户输入 quit，这将导致 while
循环退出并终止程序。
Interactive tools can help your workflow operate more smoothly. For
example, you can build testing tools that will let you choose how to
proceed based on preliminary results.
交互工具可以帮助你的工作流程更加顺畅。例如，你可以构建测试工具，根据初步结果选择如何继续操作。
### Using Special Variables and Characters {#c05.xhtml#h2-501546c05-0020}
You're now equipped with enough bash knowledge to build many versatile
tools. This section offers more tips that concern the particularities of
shell scripts.
你现在掌握了足够的 Bash 知识，可以构建许多多功能工具。本节提供更多有关
shell 脚本的特殊提示。