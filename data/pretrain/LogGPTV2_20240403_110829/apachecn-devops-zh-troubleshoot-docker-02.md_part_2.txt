检查 Docker 版本，确保它是最新的:
```
$ docker --version
Docker version 1.11.0, build 4dc5990
```
## 检查安装参数
让我们运行 Docker 信息来查看默认安装参数:
```
$ sudo docker info
```
这里给出了输出列表；注意`Storage Driver`是`devicemapper`:
```
Containers: 0 
 Running: 0 
 Paused: 0 
 Stopped: 0 
Images: 0 
Server Version: 1.11.0 
Storage Driver: devicemapper 
 Pool Name: docker-202:2-33659684-pool 
 Pool Blocksize: 65.54 kB 
 Base Device Size: 10.74 GB 
 Backing Filesystem: xfs 
 Data file: /dev/loop0 
 Metadata file: /dev/loop1 
... 
Cgroup Driver: cgroupfs 
Plugins:  
 Volume: local 
 Network: null host bridge 
Kernel Version: 3.10.0-327.el7.x86_64 
Operating System: Red Hat Enterprise Linux Server 7.2 (Maipo) 
OSType: linux 
Architecture: x86_64 
CPUs: 1 
Total Memory: 991.7 MiB 
Name: ip-172-30-0-16.ap-northeast-1.compute.internal 
ID: VW2U:FFSB:A2VP:DL5I:QEUF:JY6D:4SSC:LG75:IPKU:HTOK:63HD:7X5H 
Docker Root Dir: /var/lib/docker 
Debug mode (client): false 
Debug mode (server): false 
Registry: https://index.docker.io/v1/
```
## 故障排除提示
确保您使用的是红帽 Linux 的最新版本，以便能够部署 Docker 1.11。另一件需要记住的重要事情是内核版本必须是 3.10 或更高版本。安装的其余部分相当平淡无奇。
# 在 AWS 上部署 CentOS 虚拟机，运行 Docker 容器
我们使用 AWS 作为一个环境，从方便的角度展示 Docker 安装。如果一个操作系统需要测试其 Docker 版本的支持，AWS 是部署和测试它最简单快捷的方法。
如果您没有使用 AWS 作为环境，可以跳过在 AWS 上旋转虚拟机的步骤。
在本节中，我们将了解如何在 AWS 上部署 CentOS 虚拟机，以快速启动和运行环境，并部署 Docker 容器。CentOS 类似于红帽的发行版，使用了和 YUM 一样的打包工具。我们将使用 CentOS 7.x，Docker 正式支持该版本:
首先，让我们在 AWS 上启动一个基于 CentOS 的虚拟机:
![Deploy CentOS VM on AWS to run Docker containers](img/image_02_003.jpg)
我们将使用**1-点击启动**和预先存在的密钥空气启动。默认情况下，SSH 处于启用状态:
![Deploy CentOS VM on AWS to run Docker containers](img/image_02_004.jpg)
实例启动后，从 AWS EC2 控制台获取公共 IP 地址。
SSH 进入实例，并按照以下步骤进行安装:
```
$ ssh -i "ubuntu-1404-1.pem" PI:EMAIL
```
![Deploy CentOS VM on AWS to run Docker containers](img/image_02_005.jpg)
## 检查内核版本
可以使用以下命令检查 Linux 操作系统的内核版本:
```
$ uname -r
```
在我们的例子中，输出是内核版本 3.10.x，它将正常工作:
```
3.10.0-327.10.1.el7.x86_64
```
注意它与红帽内核版本 3.10.0-327.el7.x86_64 有多相似。
## 更新百胜包
YUM 包和存储库可以更新，如下所示:
```
$ sudo yum update 
Output listing is given, make sure it shows complete at the end 
Loaded plugins: fastestmirror 
base                                                     | 3.6 kB     00:00      
extras                                                   | 3.4 kB     00:00      
updates                                                  | 3.4 kB     00:00      
(1/4): base/7/x86_64/group_gz                            | 155 kB   00:00      
(2/4): extras/7/x86_64/primary_db                        | 117 kB   00:00      
(3/4): updates/7/x86_64/primary_db                       | 4.1 MB   00:00      
(4/4): base/7/x86_64/primary_db                          | 5.3 MB   00:00      
Determining fastest mirrors 
 * base: ftp.riken.jp 
 * extras: ftp.riken.jp 
 * updates: ftp.riken.jp 
Resolving Dependencies 
--> Running transaction check 
---> Package bind-libs-lite.x86_64 32:9.9.4-29.el7_2.2 will be updated 
---> Package bind-libs-lite.x86_64 32:9.9.4-29.el7_2.3 will be an update 
---> Package bind-license.noarch 32:9.9.4-29.el7_2.2 will be updated 
---> Package bind-license.noarch 32:9.9.4-29.el7_2.3 will be an update 
.... 
  teamd.x86_64 0:1.17-6.el7_2                                                    
  tuned.noarch 0:2.5.1-4.el7_2.3                                                 
  tzdata.noarch 0:2016c-1.el7                                                    
  util-linux.x86_64 0:2.23.2-26.el7_2.2                                          
Complete!
```
## 添加 YUM 存储库
让我们将 Docker 存储库添加到 YUM 存储库中:
```
$ sudo tee /etc/yum.repos.d/docker.repo ", 
      "Type": "String" 
    }, 
    "AdvertisedIPAddress": { 
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.", 
      "Default": "private", 
      "AllowedValues": [ 
        "private", 
        "public" 
      ], 
      "Type": "String" 
    }, 
    "AllowSSHFrom": { 
      "Description": "The net block (CIDR) that SSH is available to.", 
      "Default": "0.0.0.0/0", 
      "Type": "String" 
    }, 
    "KeyPair": { 
      "Description": "The name of an EC2 Key Pair to allow SSH access to the instance.", 
      "Type": "String" 
    } 
  } 
} 
```
以下步骤将在截图的帮助下提供在 AWS 上安装 CoreOS 的完整步骤:
1.  Select the S3 template to launch:
    ![Installation channels of CoreOS](img/image_02_007.jpg)
2.  Specify the **Stack name**, **KeyPair**, and cluster 3:
    ![Installation channels of CoreOS](img/image_02_008.jpg)
## 故障排除
以下是一些故障排除提示和指南，在之前的安装过程中应遵循这些提示和指南:
*   **栈名**不能重复
*   **集群大小**不能小于 3，最大值应为 12
*   **实例类型**推荐为`m3.medium`
*   **KeyPair** 应该存在；如果没有，集群将不会启动
SSH 进入实例并检查 Docker 版本:
```
core@ip-10-184-155-153 ~ $ docker --version 
Docker version 1.9.1, build 9894698
```
# 在 Fedora 上安装 Docker
Fedora 版本 22 和 23 支持 Docker。以下是在 Fedora 23 上安装 Docker 需要执行的步骤。它可以部署在裸机上或作为虚拟机。
## 检查 Linux 内核版本
Docker 需要 64 位安装，与 Fedora 版本无关。此外，内核版本至少应该是 3.10。使用以下命令继续安装之前，请检查内核版本: