### 5.1 Data Structures and Metadata

When invalid pages are retained, they are moved to new free blocks. For valid pages, their corresponding mapping entries in the address mapping table (AMT) are updated to point to the new physical page addresses (PPAs). The structure of the out-of-band (OOB) metadata for each physical page is shown in Figure 4. This metadata includes:
- The logical page address (LPA) mapped to this physical page.
- The previous physical page address (P-PPA) mapped to the current LPA.
- The timestamp when the page was written.
- The retained invalid page (RIP) bit, indicating whether the page should be retained if it becomes invalid.

The Retained Page Table (RPT) organizes entries similarly to the Page Validity Table (PVT), with each entry in the RPT being a read bitmap indexed by a block address. Using the same optimization techniques as in PVT, the RPT enables RFTL to access and update the bitmap efficiently. A buffer (4 KB in RFTL) is used to cache frequently accessed RPT entries, introducing only a small storage overhead in SRAM.

### 5.2 Read and Write Operations in RFTL

#### Read Operation
When a read request for page X is received, RFTL first checks the AMT in the cache. If the entry is not found (cache miss), it searches the corresponding translation page in the Global Mapping Directory (GMD) to locate the mapping entry for X. During this process, the RFTL also places the mapping entry in the least recently used (LRU) cache for the AMT. If the entry is found in the cache (cache hit), the read operation is issued directly. After locating the PPA of page X, the RFTL updates the read bitmap in the RPT and sets the corresponding bit to 1, indicating that the physical page has been read.

#### Write Operation
For a write request, RFTL follows the same address lookup procedure as for read in the cached AMT. If the mapping entry exists in the LRU cache, the data is written to a new free page, and the address mapping entry is updated with the new PPA. If the entry does not exist, a new mapping entry is created. The updated or newly created mapping entries are propagated to the translation pages and GMD when they are evicted from the cached AMT.

To enable reverse mapping from the physical page in SSDs to the logical page in file systems for data recovery, RFTL stores metadata information in the OOB metadata. Commodity SSDs typically reserve 16-64 bytes of OOB metadata for each physical page. FlashGuard uses this space to store the metadata information about a page, as shown in Figure 4.

### 5.3 Garbage Collection in RFTL

#### Algorithm 1: Garbage Collection in RFTL
**Input:**
- ReserveTime: Time threshold for retaining invalid pages.
- Reserved: Bit flag indicating a page is invalid but retained.

1. **Select the candidate block for GC:**
   - Choose the block with the least number of valid and retained invalid pages.
   - Check the RIP bit of each page.
     - If RIP == Reserved, copy the page to a new free page and update the address mapping entry.
     - Check the RTT to see if the page has been read.
       - If the page is valid, discard and reclaim the page.
       - If the page is invalid, check the timestamp in the OOB metadata.
         - If the current time minus the page timestamp is less than ReserveTime, clear the read bit in the RTT, copy the page and its OOB metadata to a new free page, and set the new page's read bit in the RTT to 1.
         - Otherwise, clear the read bit in the RTT, set the metadata (timestamp = current_time, RIP = Reserved), and copy the page and its OOB metadata to a new free page.
         - Set the new page's read bit in the RTT to 1.

However, these blocks will not be frequently garbage collected due to the throttling and swapping mechanisms in existing GC designs. Cold data (not frequently accessed) is migrated to old blocks, which experience more wear. Blocks with many retained invalid pages are accessed less frequently, reducing the likelihood of immediate collection. If all pages in a GC candidate block are invalid and will be retained, RFTL does not perform garbage collection on them.

#### Impact on SSD Lifetime
SSD lifetime is determined by wear-leveling and write traffic. Existing FTLs use a greedy policy for GC, selecting the block with the least number of valid pages. This maximizes GC efficiency and minimizes page migration. Throttling and swapping mechanisms balance wear between blocks. RFTL employs these techniques and recent research suggests that relaxed wear-leveling can still provide guaranteed SSD lifetime. Experiments with real-world workloads demonstrate that RFTL has minimal impact on SSD lifetime.

### 5.4 Data Recovery

To restore invalid pages retained in an SSD, users can remove the SSD and plug it into a clean, isolated computer for data recovery. FlashGuard first checks the RTT to locate recently read pages, which are candidates for containing stale data. The RTT is cached in firmware RAM, making this process fast. For each candidate page, FlashGuard checks the RIP bit in the OOB metadata. If the RIP bit is set, the page is read from flash. Otherwise, RFTL checks the AMT to determine if the page is valid. If it is invalid, the page is also read from flash.

FlashGuard leverages the internal parallelism of SSDs to accelerate the reading of retained invalid pages. Multiple chips can be read simultaneously, reducing recovery time. Once the retained invalid pages are read, the LPAs, P-PPAs, and timestamps in the OOB metadata are used to reconstruct user files. FlashGuard uses the P-PPA to reverse invalid pages to their previous versions, as shown in Figure 6. The recovery tool sorts the retained invalid pages by LBA and timestamp to reconstruct the original file. Users can verify the content of any older version.

### 5.5 Metadata Recovery

All data structures (e.g., AMT, RTT) are cached in firmware RAM. In case of a power failure, FlashGuard maintains durability using metadata recovery and checkpointing techniques. RFTL identifies recently written flash blocks by checking the OOB metadata (including the timestamp) and recovers the cached entries. For the RTT, RFTL recovers it to the latest checkpointed state. For blocks written after the checkpoint, RFTL identifies their older versions (using P-PPA in OOB metadata) and marks them as 'read' in the RTT. An alternative solution is to use a battery or large capacitor to preserve cached entries before power loss, simplifying the metadata recovery process.

### 5.6 FlashGuard Implementation

FlashGuard is implemented on a programmable SSD with a state-of-the-art page-level FTL. The SSD size is 1 TB, with each block containing 64 pages, each 4 KB with 16 bytes of OOB metadata. The programmable SSD provides basic I/O control commands for read, write, and erase operations. RFTL for FlashGuard is implemented based on the page-level FTL, with 5,718 lines of C code. The SSD is over-provisioned with 15% of its full capacity, and GC runs in the background. Once the firmware is flushed into the device controller, modifications are no longer allowed, ensuring the integrity of FlashGuard.

A recovery tool is also implemented to read all retained invalid pages from the flash device and organize them as discussed in Section 5.4. The recovered data is written back to the SSD after user verification.

### 6. Evaluation

#### 6.1 Experimental Setup

To evaluate FlashGuard's effectiveness against encryption ransomware, we use 1,477 ransomware samples from 13 families, as shown in Table 1. These samples are executed with the same experimental setup as described in ยง 2.1. Once a ransom screen appears, the recovery tool is run to recover encrypted data.

To evaluate the impact of FlashGuard on storage performance and SSD lifetime, we use five sets of I/O traces collected from various real-world applications (see Table 3):
- Storage traces from enterprise servers running different applications (e.g., media server, research project management systems, and print server) at Microsoft Research, Cambridge, over six days.
- Traces from machines running in a department at various universities and institutions.

### Table 3: Real-World Application Workloads for Evaluating FlashGuard

| Workload        | Description                                                                 |
|-----------------|-----------------------------------------------------------------------------|
| online-course   | Course management system using Moodle                                       |
| webmail         | Web interface to the mail server                                             |
| home            | Research group activities: development, testing, experiments, etc.           |
| mailserver      | Department mail server traces                                                |
| web-research    | Research projects management using Apache web server                         |
| web-users       | Web server hosting faculty, staff, and graduate student web sites             |
| hm              | Hardware monitoring                                                         |
| mds             | Media server                                                                |
| prn             | Print server                                                                |
| prxy            | Firewall/web proxy                                                          |
| rsrch           | Research projects                                                           |
| src             | Source control                                                              |
| stg             | Web staging                                                                 |
| ts              | Terminal server                                                             |
| usr             | User home directories                                                       |
| wdev            | Test web server                                                             |
| web             | Web/SQL server                                                              |
| postmark        | Filesystem benchmark                                                        |
| IOZone          | Filesystem benchmark                                                        |
| TPC-C           | OLTP benchmark                                                              |
| TPC-E           | OLTP benchmark                                                              |

This evaluation demonstrates FlashGuard's efficiency in recovering data locked by various types of encryption ransomware and shows that FlashGuard introduces negligible overhead to storage operations and has minimal impact on SSD lifetime.