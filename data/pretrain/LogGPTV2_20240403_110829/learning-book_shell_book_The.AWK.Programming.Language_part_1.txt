# OCR Output
## Page 1
The
AWK
Programming
Language
PolyAWK"
Software
TheToolbox Language
MS-DOS
POLYTRON
ALFREDV.AHO
BRIAN W. KERNIGHAN
PETER J. WEINBERGER
---
## Page 2
The
AWK
Programming
Language
ALFRED V. AHO
BRIANW.KERNIGHAN
PETERJ.WEINBERGER
AT&TBell Laboratories
Murray Hill,New Jersey
ADDISON-WESLEY PUBLISHING COMPANY
Don Mills, Ontario • Wokingham, England • Amsterdam • Bonn
Reading. Massachusetts • Menlo Park, California • New York
Sydney • Singapore • Tokyo • Madrid • Bogoti
Santiago • San Juan
---
## Page 3
This book is in the Addison-Wesley Series in Computer Science
Michael A. Harrison
Consulting Editor
Library of Congress Cataloging-in-Publication Data
Aho, Alfred V.
The AWK programming language.
1. AWK (Computer program language)1. Kernighan,
Includes index.
QA76.73.A95A351988
ISBN 0-201-07981-X
005.13′3
87-17566
This book was typeset in Times Roman and Courier by the authors,using an Autologic
APS-5 phototypesetter and a DEC VAX 8550 running the 9th Edition of the UNIXe
operating system.
AT&T
Copyright  1988 by Bell Telephone Laboratories, Incorporated.
All rights reserved. No part of this publication may be reproduced, stored in a retrieval
system,or transmitted,in any form or by any means,electronic,mechanical,photocopy
ing. recording, or otherwise, without the prior written permission of the publisher.
Printed in the United States of America. Published simultaneously in Canada.
UNIX is a registered trademark of AT&T.
DEFGHU-AL-898
---
## Page 4
PREFACE
Computer users spend a lot of time doing simple, mechanical data manipula-
tion - changing the format of data, checking its validity, finding items with
some property, adding up numbers, printing reports, and the like. All of these
jobs ought to be mechanized, but it's a real nuisance to have to write a special-
purpose program in a standard language like C or Pascal cach time such a task
comes up.
Awk is a programming language that makes it possible to handle such tasks
with very short programs, often only one or two lines long. An awk program is
a sequence of patterns and actions that tell what to look for in the input data
and what to do when it's found. Awk searches a set of files for lines matched
by any of the patterns; when a matching line is found, the corresponding action
and comparison operations on strings, numbers, fields, variables, and array ele-
ments. Actions may perform arbitrary processing on selected lines; the action
are built-in data types.
language looks like C but there are no declarations, and strings and numbers
Awk scans the input files and splits each input line into fields automatically.
 eos s pi n n re s u os ssng
ment, initialization  awk programs are usually much smaller than they would
be in a more conventional language. Thus one common use of awk is for the
kind of data manipulation suggested above. Programs, a line or two long, are
composed at the keyboard, run onc, then discarded. In effect, awk is a
general-purpose programmable tool that can replace a host of specialized tools
or programs.
valuable for prototyping larger programs. One starts with a few lines, then
The same brevity of expression and convenience of operations make awk
refines the program until it does the desired job, experimenting with designs by
trying alternatives quickly. Since programs are short, it's easy to get started,
and easy to start over when experience suggests a different direction. And it's
straightforward to translate an awk program into another language once the
design is right.
iii
---
## Page 5
iv
THEAWK PROGRAMMINGLANGUAGE
PREFACE
Organization of the Book
The first goal of this book is to teach you what awk is and how to use it
effectively.Chapter 1 is a tutorial on the bare minimum necessary to get
started; after reading even a few pages, you should have enough information to
begin writing useful programs. The examples in this chapter are very short and
simple, typical of the interactive use of awk.
Chapter 2 covers the entire language in a systematic order. Although there
are plenty of examples in this chapter, like most manuals it's long and a bit dry,
Spu is e uo 1 ws on um iqd m no os
The rest of the book contains a wide variety of examples, chosen to show the
breadth of applicability of awk and how to make good use of its facilities. Some
of the programs are in regular use in our environment; others show ideas but are
not intended for production use; a few are included just because they are fun.
The emphasis in Chapter 3 is on retrieval, transformation, reduction and
validation of data  the tasks that awk was originally designed for. There is
also a discussion of how to handle data like address lists that naturally comes in
multiline chunks.
Awk is a good language for managing small, personal databases. Chapter 4
discusses the generation of reports from databases, and builds a simple rela-
Awk handles text with much the same convenience that most languages han-
dle numbers,so it often finds application in text processing.Chapter 5
describes programs for generating text, and some that help with document
preparation. One of the cxamples is an indexing program based on the one we
used for this book.
focus on a narrow domain. Awk is convenient for writing small translators
because its basic operations support many of the lexical and table-management
tasks encountered in translation. The chapter includes an assembler, a graphics
language, and several calculators.
Awk is a good language for expressing certain kinds of algorithms. Because
there are no declarations and because storage management is easy, an awk pro-
 s uo sod e inq pnsd jo sape si jo u seu 
which is not true of pseudo-code. The focus in Chapter 7 is on experimentation
with algorithms, including testing and performance evaluation. It shows several
sorting algorithms, and culminates in a version of the Unix make program.
Chapter 8 describes some of the historical reasons why awk is as it is, and
offers some suggestions on what to do when it is too slow or too confining.
Appendix A is a summary of the language; Appendix B contains answers to
selected exercises.
You should begin by reading Chapter 1, and trying some small examples of
your own. Go through Chapter 2 quickly, concentrating on the summaries and
tables; don’t get bogged down in the details. Then read as far into each of the
---
## Page 6
THE AWK PROGRAMMING LANGUAGE
PREFACEV
subsequent chapters as your interest takes you.The chapters are nearly
independent of cach other, so the order doesn’t matter much.
The Examples
There are several themes in the examples. The primary one, of course, is to
show how to use awk well. We have tried to include a wide variety of useful
constructions, and we have stressed particular aspects like associative arrays and
regular expressions that typify awk programming.
A second theme is to show awk's versatility. Awk programs have been used
from databases to circuit design, from numerical analysis to graphics, from com-
pilers to system administration, from a first language for nonprogrammers to
the implementation language for software engincering courses.We hope that
the diversity of applications illustrated in the book will suggest new possibilities
to you as well.
A third theme is to show how common computing operations are done.The
book contains a relational database system, an assembler and interpreter for a
subset, a file-update program based on make, and many other examples. In
each case, a short awk program conveys the essence of how something works in
a form that you can understand and play with.
We have also tried to illustrate a spectrum of ways to attack programming
problems. Rapid prototyping is an approach that awk supports well. A less
         s
ponents, each concentrating on one aspect of the problem. Another is writing
programs that create other programs. Little languages define a good user inter-
face and often suggest a sound implementation. Although these ideas are
presented here in the context of awk, they are much more generally applicable,
and ought to be part of every programmer's repertoire.
The examples have all been tested directly from the text,which is in
machine-readable form.We have tried to make the programs error-free, but we
have not added features nor made them proof against all possible invalid inputs,
preferring to concentrate on conveying the essentials.
Evolution of the AwK Language
part as an experiment to see how the Unix tols grep and sed could be gen-
Awk was originally designed and implemented by the authors in 1977, in
eralized to deal with numbers as well as text. It was based on our interests in
regular expressions and programmable editors. Although it was meant for writ-
ing very short programs, its combination of facilities soon attracted users who
wrote significantly larger programs. These larger programs needed features that
had not been part of the original implementation, so awk was enhanced in a new
version made available in 1985.
The major new feature is the ability for users to define their own functions.
---
## Page 7
ViTHE AWKPROGRAMMING LANGUAGE
PREFACE
Other enhancements include dynamic regular expressions, with text substitution
and pattern-matching functions; additional built-in functions and variables;
some new operators and statements; input from multiple files; and access to
command-line arguments. Error messages have also been improved. The exam-
ples in Chapter 1 use only facilities of the original version; many examples in
later chapters take advantage of new features.
This version of awk is part of Unix System V Release 3.1. Source code for
this version is also available through AT&T's Unix System Toolchest software
distribution system; call 1-201-522-6900 and log in as guest.In Europe,con-
tact AT&T Unix Europe in London (44-1-567-7711); in the Far East, contact
AT&T Unix Pacific in Tokyo (81-3-431-3670).
Since awk was developed under Unix, some of its features reflect capabilities
usually found only there; these features are used in some of our examples.
Furthermore, we have assumed the existence of some Unix utilities, particularly
sort, for which exact equivalents may not exist elsewhere. Aside from these
limitations, however, awk should be useful in any environment; in particular, it
runs on MS-DOS. Further information is available from Addison-Wesley.
Awk is certainly not perfect; it has its share of irregularities, omissions, and
just plain bad ideas, and it's sometimes painfully slow. But it's also a rich and
versatile language, useful in a remarkable number of cases. We hope you'll find
it as valuable as we do.
Acknowledgmonts
We are deeply indebted to friends who made comments and suggestions on
drafts of this book.We are particularly grateful to Jon Bentley, whose
 se u pno  s s  ue q seu ss
programs derived from his experience using and teaching awk; he also read
several drafts with great care. Doug Mcllroy also deserves special recognition;
his peerless talent as a reader greatly improved the structure and content of the
whole book.Others who made helpful comments on the manuscript include
Susan Aho, Jaap Akkerhuis, Lorinda Cherry, Chris Fraser, Eric Grosse, Ric-
cardo Gusela,Bob Herbst, Mark Kernighan,John Linderman, Bob Martin,
Howard Moscovitz, Gerard Schmitt, Don Swartwout, Howard Trickey, Peter
van Eijk, Chris Van Wyk, and Mihalis Yannakakis. We thank them all.
Alfred V. Aho
Peter J. Weinberger
Brian W. Kernighan
---
## Page 8
CONTENTS
PREFACE
CHAPTER 1: AN AWK TUTORIAL
1.1 Getting Started
The Structure of an AWK Program
Running an AWK Program
Errors
3
4
1.2 Simple Output
Printing Every Line
Printing Certain Fields
NF, the Number of Fields
Computing and Printing
6
Printing Line Numbers
6
Putting Text in the Output
6
7
1.3 Fancier Output
7
Lining Up Fields
Sorting the Output
8
1.4Selection
Selection by Comparison
6
Selection by Computation
9
6
Selection by Text Content
Combinations of Patterns
9
10
Data Validation
01
BEGIN and END
11
1.5 Computing with AWK
11
Computing Sums and Averages
Counting
11
Handling Text .
12
String Concatenation
12
13
Printing the Last Input Line
13
Built-in Functions
13
Counting Lines, Words, and Characters
14
vii
---
## Page 9
i
THE AWK PROGRAMMING LANGUAGE
CONTENTS
1.6 Control-Flow Statements
If-Else Statement
14
While Statement
14
15
For Statement
16
1.7 Arrays
16
1.8 A Handful of Useful “One-liners"
17
1.9 What Next?
19
CHAPTER 2: THE AWK LANGUAGE
21
The Input File countries
21
Program Format
22
2.1 Patterns
23
BEGIN and END
23
Expressions as Patterns
24
String-Matching Patterns
26
Regular Expressions
Compound Patterns
28
Range Patterns
31
Summary of Patterns
32
33
2.2 Actions
34
Expressions
Control-Flow Statements
34
Empty Statement
50
L
Arrays
50
2.3 User-Defined Functions
53
o
54
The print Statement
55
Output Separators
56
The printf Statement
56
Output into Files
56
Output into Pipes
Closing Files and Pipes
59
2.5 Input
59
Input Separators
60
Multiline Records
60
The getline Function
Command-Line Variable Assignments
6/
Command-Line Arguments
63
63
2.6 Interaction with Other Programs
64
The system Function
64
65
2.7 Summary
66
---
## Page 10
THE AWK PROGRAMMING LANGUAGE
CONTENTS
CHAPTER3: DATA PROCESSING
67
3.1 Data Transformation and Reduction
67
Summing Columns
67
Computing Percentages and Quantiles
Numbers with Commas
69
Fixed-Field Input
71
72
Program Cross-Reference Checking
73
Formatted Output
74
3.2 Data Validation
76
Balanced Delimiters ..
77
Password-File Checking
78
Generating Data-Validation Programs
Which Version of AWK?
79
79
3.3 Bundle and Unbundle
81
3.4 Multiline Records
82
Records Separated by Blank Lines
82
Processing Multiline Records
Records with Headers and Trailers
84
Name-Value Data
85
86
3.5 Summary 
88
CHAPTER 4: REPORTS AND DATABASES
89
4.1 Generating Reports
89
A Simple Report
A More Complex Report
89
92
4.2 Packaged Queries and Reports
99
Form Letters
100
4.3 A Relational Database System
102
The relfile 
Natural Joins
103
106
q, an awk-like query language
107
qawk, a q-to-awk translator
108
4.4 Summary
110
CHAPTER5:PROCESSING WORDS
111
5.1 Random Text Generation
Random Choices
111
111
Cliche Generation
112
Random Sentences
113
5.2 Interactive Text-Manipulation
116
Skills Testing: Arithmetic
116
Skills Testing: Quiz