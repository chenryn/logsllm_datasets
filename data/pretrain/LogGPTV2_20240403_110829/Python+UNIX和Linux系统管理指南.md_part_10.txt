/home/jmjones/local/tmp
/home/jmjones
/tmp
/home/jmjones/local/Projects
/home/jmjones/local/Pictures
第2章
[/home/jmjones/local/Projects]
jmjones/local/Pictures]
txt
I-
www.TopSage.com
-10[/tmp]
08
07
06
[/home/jmjones/local/tmp]
[/tmp]
[/home/jmjones/local/tmp]
DG
---
## Page 67
越边界，将两者进行合并。也就是说，从Python取得一个值，然后把值传递给shell。
到目前为止，我们几乎一直保持着shell是shell，Python是Python。但是现在，我们要跨
个特征会让高级用户感到非常高兴。其中，第一个是可变扩展（Variable Expansion）。
前面介绍了八个IPython的特征，它们是非常有用的，也是必需的。接下来将要介绍的三
可变扩展
录。下面是一个示例：
在目录操作中，
后一个目录的下一个目录。
注意，结束边界是非包含的，
输入如下命令：
第二个选项允许指定一个目录范围。例如，要查看第3个到第6个之间的所有目录，可以
pwd
下内容：
一个数字来定义显示多少个目录。例如，只想查看最近访问过的5个目录，可以输入如
dhist命令有两个选项，可以让使用该命令比cd-更为灵活。第一个选项允许提供
In [1]: for i in range(10):
:du4/. :[z]ano
In [2]:pwd
/tmp
In [1]: cd /tmp
6：
In[3]:dhist 3 7
10:/tmp
9:/home/jmjones/local/tmp
7：
In[2]:dhist 5
...：
/home/jmjones/local/tmp
/home/jmjones/local/Projects
 /home/jmjones
!date>${i}.txt
一个简单但几乎是必须的函数就是pwd，pwd能够告诉你当前所在的目
，因此必须在设置结束位置时，将其指定为你想要查看的最
www.TopSage.com
IPython |53
---
## Page 68
查看是否在输出中存在一些可以匹配lighttpd的行，可以输入下面的内容：
jmjones所有的进程这个任务一小会儿。第一个十分有趣的方法是指grep（）方法。这是
的各种方法。因此，如果有一个函数或是方法的输入是一个列表，你可将这些结果对象
psaux的执行结果是一种类列表的结构，保存在变量ps中，其数据项是从系统shell调
理相同的任务。首先，提取非过滤命令psaux的输出结果：
该命令十分紧凑、简练，而且可读性也很强。接下来，让我们看看如何使用IPython来处
能。如果想查看属于用户jmjones的所有进程的PID值，可以通过输入以下命令实现：
IPython另一个强有力的特征是提供了采用字符串方式处理系统shell命令执行结果的功
字符串处理
将其放到Python中，然后再使用！将其传递给系统shell。
据库或是一个数据文件、一个XMLRPC服务，或者从文本文件中提取出的数据，可以先
可以将在Python中取得的任何值，传递到系统shell中。如果数值来自通过计算产生的数
{currentlistitem}.xr中。在创建之后，我们使用1s命令列出了所有的文件，并且使用cat
义了一个shell变量i，然后调用它。因此，date被调用，并且输出结果被重定向到文件
循环中，使用shell字符！来执行date命令。注意，这里调用date的语法，等同于已经定
一个基本的、非常简单的过滤器，可以决定输出中保留哪些行，删除哪些行。例如，要
方法和方便使用的属性。为了能说明都有哪些有趣的方法，我们将偏离要找到全部属于
传递给它。另外，除了能够对标准的列表方法提供支持外，ps也支持一些非常有趣的
用返回的结果。这里所说的类列表结构继承了内建的列表类型，所以能够支持这种类型
命令显示输出了其中一个文件。从文件的内容可以看到，这是一个日期。
们通过重复调用range（）函数来创建一个列表，并且保存当前的项到变量i中。在每一次
每个文本文件都包含日期。但这个示例却显示了如何将Python代码与shell代码结合。我
这个示例可能并不那么实用，因为很难有这样的需要：一下子创建10个文本文件，而且
In[2]:ps.grep('lighttpd')
In[2]:
In[1]:ps=!psaux
In[3]:lcat0.txt
0.txt1.txt2.txt3.txt 4.txt5.txt6.txt7.txt 8.txt9.txt
第2章
ls
www.TopSage.com
---
## Page 69
os.path.isfile()进行过滤检测，就可以分辨出哪些是文件：
目录列表显示了四个文件。我们无法分辨列表中哪些是文件哪些是目录。但是如果使用
中。例如，要创建一个目录列表，过滤掉文件或是目录：
将函数传递给正在工作的列表项记录。如果函数返回值为真，则该项记录包括在过滤集
调用返回的结果也可以用于grep()。这表示grep()可以将函数作为一个参数来调用。它
的，输出结果中没有匹配Mar07的记录。
有包含Maro7的记录项，传递了另一个参数给grep()，这个关键参数是：prune=True。
（3月7日）开始运行的，因此我们决定查看所有不是在Mar07创建的进程。为了排除所
在将正则表达式“Maro7”传递给grep()方法后，可以看到大多数系统进程都是从Maro7
式“lightpd”有一个正向匹配。我们可以像下面这样查看除匹配特定正则表达式外的
所有记录：
我们调用了grep()方法，并向其传递了一个正则表达式lighttpd。记住，传递给grep()
Out[4]: SList (.p, .n, .l, .S, ·grep(), .fields() available). Value:
In [4]: file_list.grep(os.path.isfile)
0:ch01.xml
3: ipython.xml
2: ipython.pdf
Out[3]: SList (.p, .n, .l, .s, ·grep(), .fields() available). value:
In [3]: file_list
In [2]: file_list = !ls
In [1]: import os
0:ch01.xml
In [3]: ps.grep('Maro7', prune=True)
Out[2]: SList (.p, .n, ·1, .S, ·grep(),
*.
：
4：
jmjones
imjones
imjones
jmjones
23375
23374
23373
23025
23024
21340
19301
0.0
0.0
0.0
0.0
0.0
0.1
0.0
0.4
202484
21364
15024
81160
81480
3908
www.TopSage.com
11196
11600
10184
1056 pts/0
4272
532
pts/0
pts/0
pts/4
pts/4
pts/3
pts/2
.fields() available).
.fields() available). Value:
S+
Sl+
Ss+
STAT START
09:20
09:20
09:20
08:59
08:58
07:00
03:58
0:00 ps aux
Value:
0:00/bin/sh-c
0:00 /home/jmjo
0:00 [sh]
8:5444
0:00
/bin/sh
.n，.1，
www.TopSage.com
S
Ssl
Apr11
Apr15
Apr15
IPython
157
---
## Page 72
sh profile
这样，就实现了与awk过滤器相同的目标。
如下操作：
尽管这准确匹配了想要的行，但却输出了每行所有的列。为了取得指定PID值，应该作
现在添加:/appended到当前PATH变量的后面：
目录而且rehash你的PATH，这样就可以与在Bash中一样，立刻访问所有的可执行程序。
使用系统调用时更为友好。sh profile有两个配置项与标准IPython不同，sh不但显示当前
sh profile或者是shell profile是IPython内建的配置文件之一。sh profile可以使IPython在
profile中各种各样的环境变量，而无须升级.bash_profile或.bashrc。
持久性（envpersist）扩展。环境持久性扩展可以帮助你简单、持续地修改IPython sh
除了设置一些配置值，sh profile也可以启动一些有助于shell的扩展。例如，启用环境
profile文件。
方式运行。要激活一个特定的profile配置文件，需要使用-p命令行选项并指定所使用的
被加载。你可以自定义一些profil配置文件，让IPython可以根据会话的需要按不同的
一个我们没有讲到的概念是profile。一个profile是一个简单的配置集，在启动IPython时
以下是PATH的内容：
In [3]: ps.grep('jmjones', field=o).fields(1)
54:32429
53: 32425
0:5361
Out[3]: SList (.p, .n, .l, .s, ·grep(), .fields() available). Value:
1:5364
/sbin:/bin:/usr/games:/appended
PATH after append
[~/tmp]14>envPATH+=:/appended
IPython 0.8.3.bzr.r96[on Py 2.5.1]
第2章
/usr/local/sbin:/usr/local/bin:/usr/sbin:
l/sbin:/usr/local/bin:/usr/sbin:/usr/bin:
/home/jmjones/local/python/psa/bin:
/home
e/jmjones/local/python/psa/bin:
www.TopSage.com
---