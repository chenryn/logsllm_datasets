    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
5.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，使用 `virsh`{.literal}
    命令定义的存储池不会被设置为在每次 libvirtd 启动时自动启动。使用
    `virsh pool-autostart`{.literal} 命令将存储池配置为 autostart。
    ``` literallayout
    # virsh pool-autostart guest_images_fs
      Pool guest_images_fs marked as autostarted
    ```
:::
::: orderedlist
**验证**
1.  使用 `virsh pool-info`{.literal} 命令来验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_fs
      Name:           guest_images_fs
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
2.  验证文件系统的目标路径中存在 `lost+found`{.literal}
    目录，这表示挂载该设备。
    ``` literallayout
    # mount | grep /guest_images
      /dev/sdc1 on /guest_images type ext4 (rw)
    # ls -la /guest_images
      total 24
      drwxr-xr-x.  3 root root  4096 May 31 19:47 .
      dr-xr-xr-x. 25 root root  4096 May 31 19:38 ..
      drwx------.  2 root root 16384 May 31 14:18 lost+found
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-iscsi-based-storage-pools-using-the-cli_assembly_managing-virtual-machine-storage-pools-using-the-cli}使用 CLI 创建基于 iSCSI 的存储池 {.title}
:::
互联网小型计算机系统接口(iSCSI)是一种基于 IP
的存储网络标准，用于连接数据存储设施。如果要在 iSCSI
服务器上具有存储池，您可以使用 `virsh`{.literal} 实用程序创建基于 iSCSI
的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 iSCSI 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'iscsi' supported='yes'"
    ```
    如果该命令显示任何输出结果，则代表支持基于 iSCSI 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal} 命令定义并创建 iSCSI
    类型的存储池。例如，要创建一个名为 `guest_images_iscsi`{.literal}
    的存储池，它使用
    `iqn.2010-05.com.example.server1:iscsirhel7guest`{.literal} IQN 到
    `server1.example.com`{.literal} 上的 `/dev/disk/by-path`{.literal}
    路径：
    ``` literallayout
    # virsh pool-define-as --name guest_images_iscsi --type iscsi --source-host server1.example.com --source-dev iqn.2010-05.com.example.server1:iscsirhel7guest --target /dev/disk/by-path
    Pool guest_images_iscsi defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["基于 iSCSI
    的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#iscsi-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于 iSCSI 的存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令验证池是否已创建。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_iscsi   inactive   no
    ```
3.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_iscsi
      Pool guest_images_iscsi started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
4.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，使用 `virsh`{.literal}
    命令定义的存储池不会被设置为在每次 libvirtd 启动时自动启动。使用
    `virsh pool-autostart`{.literal} 命令将存储池配置为 autostart。
    ``` literallayout
    # virsh pool-autostart guest_images_iscsi
      Pool guest_images_iscsi marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令来验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_iscsi
      Name:           guest_images_iscsi
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-lvm-based-storage-pools-using-the-cli_assembly_managing-virtual-machine-storage-pools-using-the-cli}使用 CLI 创建基于 LVM 的存储池 {.title}
:::
如果要有一个作为 LVM 卷组一部分的存储池，您可以使用 `virsh`{.literal}
实用程序创建基于 LVM 的存储池。
::: title
**建议**
:::
在创建基于 LVM 的存储池前请注意以下几点：
::: itemizedlist
-   基于 LVM 的存储池不能为 LVM 提供完整的灵活性。
-   `libvirt`{.literal} 支持精简逻辑卷，但不提供精简存储池的功能。
-   基于 LVM 的存储池是卷组。您可以使用 `virsh`{.literal}
    实用程序创建卷组，但是这样，您可以在创建的卷组中只有一个设备。要创建带有多个设备的卷组，请使用
    LVM 工具，请参阅 [如何使用 LVM 在 Linux
    中创建卷组](https://www.redhat.com/sysadmin/create-volume-group){.link}。
    有关卷组的详情，请参考 [*Red Hat Enterprise Linux Logical Volume
    Manager Administration Guide*]{.emphasis}。
-   基于 LVM 的存储池需要一个完整磁盘分区。如果您使用 `virsh`{.literal}
    命令激活新分区或设备，分区将被格式化并擦除所有数据。如果您使用主机的现有卷组，如这些步骤中一样，则不会删除任何内容。
:::
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 LVM 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'logical' supported='yes'"
    ```
    如果命令显示任何输出结果，则支持基于 LVM 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal} 命令定义并创建 LVM
    类型的存储池。例如，以下命令会创建一个名为
    `guest_images_lvm`{.literal} 的存储池，它使用 `lvm_vg`{.literal}
    卷组，并挂载到 `/dev/lvm_vg`{.literal} 目录中：
    ``` literallayout
    # virsh pool-define-as guest_images_lvm logical --source-name lvm_vg --target /dev/lvm_vg
    Pool guest_images_lvm defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["基于 LVM
    的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#lvm-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于 LVM 的存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令验证池是否已创建。
    ``` literallayout
    # virsh pool-list --all
      Name                   State      Autostart
      -------------------------------------------
      default                active     yes
      guest_images_lvm       inactive   no
    ```
3.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_lvm
      Pool guest_images_lvm started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
4.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，使用 `virsh`{.literal}
    命令定义的存储池不会被设置为在每次 libvirtd 启动时自动启动。使用
    `virsh pool-autostart`{.literal} 命令将存储池配置为 autostart。
    ``` literallayout
    # virsh pool-autostart guest_images_lvm
      Pool guest_images_lvm marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令来验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_lvm
      Name:           guest_images_lvm
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-nfs-based-storage-pools-using-the-cli_assembly_managing-virtual-machine-storage-pools-using-the-cli}使用 CLI 创建基于 NFS 的存储池 {.title}
:::
如果要在网络文件系统(NFS)服务器上拥有存储池，您可以使用
`virsh`{.literal} 实用程序创建基于 NFS 的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 NFS 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "nfs"
    ```
    如果该命令显示任何输出结果，则代表支持基于 NFS 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 virsh `pool-define-as`{.literal} 命令定义并创建 NFS
    类型的存储池。例如，要创建一个名为 `guest_images_netfs`{.literal}
    的存储池，它使用使用目标目录 ` /var/lib/`{.literal}
    libvirt/images/nfspool``{=html} 的带有 IP
    `111.222.111.222`{.literal} 的 NFS 服务器：
    ``` literallayout
    # virsh pool-define-as --name guest_images_netfs --type netfs --source-host='111.222.111.222' source-path='/home/net_mount' --source-format='nfs' --target='/var/lib/libvirt/images/nfspool'
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["基于 NFS
    的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#nfs-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于 NFS 的存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令验证池是否已创建。
    ``` literallayout