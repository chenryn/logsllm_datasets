the target binary.
is obvious that (4) is readily
available if the symbol table is included in the target
binary (e.g., true in most Linux-based kernel images).
However, in the more general case we do not make this
assumption, neither do the state-of-the-art binary-only
bug search work [13, 31, 26].
these
similarity-based approaches solve this very problem by
identifying functions in the target binary that
look
similar to a reference one, thus the symbol table of the
target binary can actually be inferred — in addition to
research studies [13, 31], BinDiff [2] also has a built-in
functionality serving this purpose. We leave the
integration of such functionality into FIBER as future
work, since all kernel images as test subjects in our
evaluation have embedded symbol tables.
Fortunately,
It
rather,
This shows that the similarity-based bug search and
the more precise patch presence test are in fact not
competing solutions;
they complement each
other. The former is fast/scalable but less accurate; the
latter is slower but more accurate. In a way, bug search
acts as a coarse-grained ﬁlter and outputs a ranked list
of candidate functions which can be used as input (4) of
FIBER for further processing. Since the search space of
FIBER is now constrained to only a few candidate
functions (one if with symbol table), it opens up the
more expensive analysis.
With the inputs in mind, we now describe the three
major components in FIBER:
(1) Change site analyzer.
A single patch may
introduce more than one change site in different
functions and one change site can also span over
multiple lines in source code. Change site analyzer
intends to pick out those most representative, unique
and
carefully
analyzing each change site and the corresponding
reference function(s), mimicking what a real analyst
would do. Besides, during this process, we can also
obtain useful source-level insight regarding the change
easy-to-match
changes
source
by
4 We use AArch64 assembly instructions in this example, if not
explicitly stated, the same assembly instructions will also be used in all
other examples across the paper.
+
- 
+
+
Source 
Patches
Ref. function 
(src)
Compile
Ref. function
(bin)
FIBER
Change Site Analyzer
Unique Src
Changes
a=b
If(a)
...
Signature Generator
Symol Table
Locate in
tgt. binary Similarity Test
Binary 
Signatures
Tgt. function
(bin)
Matching Engine
Figure 2: Workﬂow of FIBER
sites (e.g.,
involved), which can guide
generation and matching process.
the types of statements and the variables
signature
later
the
This component
(2) Signature generator.
is
responsible for translating source-level change sites into
binary-level signatures. Essentially this step requires an
analysis to ensure that we can map binary instructions to
source-level statements, which is challenging because of
the information loss during the compilation process.
The key building block we leverage is binary symbolic
execution for this purpose.
(3) Matching engine. The matching engine’s task is
to search a given signature in the target binary. To do
that, we ﬁrst need to locate the affected function(s) in the
target binary with the help of the symbol table. Then the
search is done by ﬁrst matching the syntax represented
by the topology of a localized CFG related to the patch (a
much quicker process), and then the semantic formulas
(slower because of the symbolic execution). This process
is similar to the one described in the motivating example.
is worth noting that as long as a signature is
generated for a particular security patch, it can then be
saved and reused for multiple target binaries, thus we
only need to run the analyzer and generator once for
each patch.
It
Scope. (1) FIBER naturally supports analyzing binaries
of different architecture and compiled with different
compiler options. This is because of the availability of
source code, which allows us to compile the source code
into any supported architecture with any compiler
options. More details will be discussed in §5 and §6.
(2) FIBER is inherently not
tied to any source
language although currently it works on C code. We do
require debug information to be generated (for our
reference binary) by compilers that can map the binary
instructions back to source level statements as will be
discussed in §4.3. All modern C compilers can do this
for example.
890    27th USENIX Security Symposium
USENIX Association
Potential users and usage scenarios. We envision
third-party auditors/developers will be FIBER’s primary
users, such as independent security researchers, security
companies, software integration companies that rely on
code/binaries supplied from others. Even for ﬁrst-party
developers, checking security patches at the binary level
offers an extra layer of safety. As will be shown in §6.4,
some
critical
vulnerabilities even though they have source access (i.e.,
human errors), while systems like FIBER could have
caught it.
vendors
indeed
forgot
to
patch
4 System Design
In this section, we describe FIBER’s design in depth by
walking through the requirement of signatures and the
design of each component.
4.1 Signature
The signature is what represents a patch. In general, we
have two criterion for an “ideal” signature:
(1) Unique. The signature should not be found in
places other than the patch itself. Otherwise, it is not
unique to the patch. Speciﬁcally, it should not exist in
both the patched and un-patched versions. This means
that the signature should not be overly simple, which
may cause it to appear in places unrelated to the patch.
(2) Stable. The signature should be robust to benign
evolution of the code base, e.g., the target function may
look different
than as the reference due to version
differences. This means that the signature should not be
overly complex (related to too many source lines),
which is more likely to encounter benign changes in the
target, creating false matches of the signature.
As we can see, the above two seemingly conﬂicting
requirements ask for a delicate balance in signature
generation, which we will elaborate in this section.
Fundamentally, we need to pick a unique source change
from a patch for which we believe a corresponding
binary signature can be generated that well represents it.
What works in our favor is that the reference and target
function
variable-level
semantics. Assuming both versions are patched, things
like “how a variable is derived and dereferenced” and
“how a condition is derived” should be the very much
the same. The binary signature simply need to carry this
necessary information to recover the semantics present
in the source.
signiﬁcant
should
share
Informally, we deﬁne a binary signature to be a group
of instructions, that not only structurally correspond to
the source-level signature, but also are annotated with
sufﬁcient information (e.g., variable-level semantics) so
that they can be unambiguously mapped to the original
source-level change site. We will elaborate the
translation process in §4.3.
4.2 Change Site Analyzer
The input of the change site analyzer is a source patch
and the reference code base. It serves two purposes. (1)
Since a patch may introduce multiple change sites within
or across different functions, the analyzer aims to pick a
suitable signature according to the criterion mentioned
in §4.1. (2) Another goal is to gain insights of the patch
change sites, from which the binary signature generator
will beneﬁt. We divide this process into two phases and
detail them as below.
4.2.1 Unique Source Change Discovery
A patch can either add or delete some lines, thus we can
either changes based on either the absence of patch (i.e.,
existence of deleted lines) or presence of patch (i.e.,
existence of added lines). For the purpose of discussion,
we assume that our signature generation is based on the
presence of patch and focused on the added lines; the
opposite can be done similarly. The general strategy is
to start from a single statement and gradually expand if
necessary. For each added statement in the patch, the
following steps will be performed:
(1) Uniqueness test. Basically, a statement has to
exist in only the added lines of the patch and nowhere
else (e.g., un-patched code bases)”. For this, we can
apply a simple token-based sequence matching using a
lexer [16]. We wish to point out that this uniqueness test
captures not only token-based information but also
semantic-related information. For instance, the example
source signature in Fig 1 at line 11 encodes the fact that
the ﬁrst function parameter is compared against a ﬁeld
of the last parameter, and this semantic relationship is
unique (which we need to preserve in binary signatures).
(2) (optional) Context addition. If no single statement
is unique, we consider all its adjacent statements as
potential
is
bi-directional and on the control ﬂow level (e.g., the “if”
statement has two successors and both of which can be
considered the context),
thus there can be multiple
context statements. We gradually expand the context
statements, e.g., if one context statement is not enough,
we try two.
“adjacent”
choices.
context
The
(3) Fine-grained change detection. By convention,
patches are distributed in the form of source line
changes. Even when a line is partially modiﬁed, the
corresponding patch will still show one deleted and one
added line. We detect such ﬁne-grained changes within
a single statement / source line, by comparing it with its
neighbouring deleted/added lines. This is to ensure that
USENIX Association
27th USENIX Security Symposium    891
we do not include unnecessary part of the statement
which will bloat the signature. For example, if only one
argument of a function call statement is changed, we
can ignore all other arguments in the matching process
to reduce potential noise, improving the “stability” of
the signature.
(4) Type insight. The types of variables involved in
source statements are also important since it will guide
the later binary signature generation and matching.
Theoretically, we can label the type of every variable in
the reference binary (registers or memory locations in
the binary) and make sure the types inferred in the target
match (more details in §4.3.1). However, sometimes
type match is not good enough to uniquely match a
signature. A special case is a const string which is
stored statically at a hardcoded memory address. If the
only change in a patch is related to the content of the
string,
then both binary signature generation and
matching should dereference the char* pointer and
obtain the actual string content; otherwise, the signature
will simply contain a const memory pointer whose value
can vary across different binaries. Even if the pointer
type matches as char* in the target,
is still
it
inconclusive if it is a patched or un-patched version (we
give some real examples in §6 as case studies).
After the above procedure, we now have some unique
and small (thus more stable) source changes.
4.2.2 Source Change Selection
In practice,
Previous step may generate multiple candidate unique
source changes for a single patch.
the
presence of one of them may already indicate the patch
presence.
In addition, some source changes are more
suitable for binary signature generation than others. In
FIBER, we will ﬁrst rank all candidate changes and pick
the top N for further translation. The ranking is based
on three factors (from least important to most):
(1) Distance to function entrance.
Short distance
between statements in the source-level signature and the
function
signature
generation process because of its design which we will
detail in §4.3.
entrance will
accelerate
the
(2) Function size.
If the source code signature is
located in a smaller function, the matching engine will
beneﬁt since the search space will be reduced and it is
less likely to encounter “noise”.
the
matching speed will be faster. Note that this is more
important
than (1) because the signature generation
process is only a one-time effort while matching may be
repeated for different target binaries.
(3) Change type. The kinds of statements involved in
a change matters. As shown previously in §3, if the
change involves some structural/control-ﬂow changes
In addition,
(e.g., “if” statement), we can quickly narrow down the
search range to structurally-similar candidates in the
target binary, affecting the matching speed. More
importantly, it can also affect the stability of the binary
signature. Unlike statements such as a function call,
which may get
inlined depending on the compiler
options, structural changes in general are much more
robust.
We categorize the source changes into several general
types:
(1) function invocations (new function call or
argument change to an existing call), (2) condition
related (new conditional statement or condition change
in an existing statement), (3) assignments (which may
involve arithmetic operations). Actual source changes
can have multiple types, e.g., a function invocation can
have an argument derived from an assignment or follow
a conditional statement. Generally, we rank “new
function call” (if FIBER determines that it is not inlined
in the reference binary5 ) the highest because one can
simply decide the patch presence by the presence of the
function invocation, which is straightforward with the
symbol
table. We also rank “condition” related
“if” statement) high because it
signatures
introduces both structural
and semantic
changes. On the other hand, a simple assignment
statement, including assignment derived from arithmetic
operations (e.g., a=b+c;), will not affect the structure in
general, so it is less preferred. Besides, pure control
ﬂow transfer (e.g., addition of a “goto”) is not preferred
as well since we may need to include extra context
statements that are unrelated to the change site, which is
less stable.Note that
there are certain source-level
changes are simply not visible at the binary level (e.g.,
source code comments) or difﬁcult to locate (variable
declaration).
changes
(e.g.,
4.3 Signature Generator
We ﬁrst need to compile the reference source into the
reference binary, from which the binary signatures will
be generated according to the selected unique source
change. As discussed in §4.2, we will still assume that
the signature is based on the patched version. Also,
during the compilation process, we will retain all the
compiler-generated debug information for future use.
4.3.1 Binary Signature Generation
Identify and organize instructions related to the
source change. Given the reference binary, the ﬁrst
thing is to locate the corresponding binary instructions
related to the source change. This can be done with the
5 It looks the presence of the corresponding binary instruction that
calls to the exact function.
892    27th USENIX Security Symposium
USENIX Association
the
identiﬁed
instructions, which
help of debug information since it provides a mapping
from source code lines to binary instructions. We will
then construct a local CFG that includes all the nodes
containing
is
straightforward if these nodes are connected to each
other, otherwise, we need to add some padding nodes to
make a connected local CFG, which by nature is a
steiner tree problem [15]. For this purpose we use the
approximation steiner tree algorithm implemented in the
NetworkX package [5]. The topology of such a local
CFG reﬂects the structure of the original source change.
Compared to full-function CFG,
local CFG
structure is more robust to different compiler options
and architectures since it excludes unrelated code. That
being said, compilation conﬁgurations may still affect
the signature. Therefore, ideally we should use the same
compilation conﬁguration of the reference kernel as the
target. As will be described in §6.1, we follow a
procedure
compilation
conﬁguration of the target kernel.
actively
this
to
probe
the
additional
compiler may insert
Identify root instructions. Theoretically all these
instructions identiﬁed in the local CFG above will be
part of the binary signature. However, this is not a good
idea in practice as only a subset of instructions actually
summarizes the key behavior (data ﬂow semantic); we
refer to such instructions as “root instructions”. The
more instructions we include in a binary signature, the
more speciﬁc and less “stable” it becomes. For instance,
a