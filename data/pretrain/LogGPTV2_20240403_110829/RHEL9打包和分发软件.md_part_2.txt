`cello.c`{.literal}
``` literallayout
#include 
int main(void) {
    printf("Hello World\n");
    return 0;
}
```
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#manual-building_preparing-software-for-rpm-packaging}手动构建 {.title}
:::
如果要手动构建 `cello.c`{.literal} 程序，请使用此流程：
::: orderedlist
**步骤**
1.  从 [GNU Compiler Collection](https://gcc.gnu.org/){.link} 调用 C
    编译器，将源代码编译到二进制中：
    ``` literallayout
    gcc -g -o cello cello.c
    ```
2.  执行生成的输出二进制 `cello`{.literal} ：
    ``` literallayout
    $ ./cello
    Hello World
    ```
:::
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#_automated_building}自动化构建 {.title}
:::
大规模软件通常使用自动化构建，方法是创建 `Makefile`{.literal}
文件，然后运行 [GNU
`make`{.literal}](http://www.gnu.org/software/make/){.link} 实用程序。
如果要使用自动构建来构建 `cello.c`{.literal} 程序，请使用以下步骤：
::: orderedlist
**步骤**
1.  要设置自动化构建，请在与 `cello.c`{.literal}
    相同的目录中使用以下内容创建 `Makefile`{.literal} 文件。
    `Makefile`{.literal}
    ``` literallayout
    cello:
    	gcc -g -o cello cello.c
    clean:
    	rm cello
    ```
    请注意，`cello:`{.literal} 和 `clean:`{.literal} 下的行必须以一个
    tab 空间开头。
2.  要构建软件，请运行 `make`{.literal} 命令：
    ``` literallayout
    $ make
    make: 'cello' is up to date.
    ```
3.  因为已有可用的构建，请运行 `make clean`{.literal} 命令，然后再次运行
    `make`{.literal} 命令：
    ``` literallayout
    $ make clean
    rm cello
    $ make
    gcc -g -o cello cello.c
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在另一个构建之后尝试构建程序无效。
    ``` literallayout
    $ make
    make: 'cello' is up to date.
    ```
    :::
4.  执行程序：
    ``` literallayout
    $ ./cello
    Hello World
    ```
:::
您现在已手动编译程序并使用构建工具。
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#interpreting-code_preparing-software-for-rpm-packaging}解释代码 {.title}
:::
本节演示了如何对 [Python](https://www.python.org/){.link}
编写的程序进行字节编译，以及使用
[bash](https://www.gnu.org/software/bash/){.link} 编写的程序的原始解析。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在下面的两个示例中，文件顶部的 `#!`{.literal} 行称为
[**shebang**]{.strong}，不是编程语言源代码的一部分。
[**shebang**]{.strong}
启用文本文件作为可执行文件：系统程序加载程序解析包含
[**shebang**]{.strong}
的行以获取二进制可执行文件的路径，然后用作编程语言解释器。功能要求将文本文件标记为可执行文件。
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiling-code}字节编译代码 {.title}
:::
本节演示了如何将 Python 编写的 `pello.py`{.literal}
程序编译成字节代码，然后由 Python 语言虚拟机执行。
Python 源代码也可以是原始解释器，但编译的版本速度更快。因此，RPM
Packagers 更喜欢将字节版本打包为最终用户发布。
`pello.py`{.literal}
``` literallayout
#!/usr/bin/python3
print("Hello World")
```
字节程序的流程因以下因素而异：
::: itemizedlist
-   编程语言
-   语言虚拟机
-   与该语言一起使用的工具和流程
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
[Python](https://www.python.org/){.link}
通常进行字节编译，但不采用这里描述的方式。以下过程的目的并不是满足社区标准，而是为了简单过程。有关实际工作环境中的
Python
指南，请参阅[打包和发布](https://docs.python.org/2/library/distribution.html){.link}。
:::
使用这个步骤将 `pello.py`{.literal} 编译成字节代码：
::: orderedlist
**步骤**
1.  字节编译 `pello.py`{.literal} 文件：
    ``` literallayout
    $ python -m compileall pello.py
    $ file pello.pyc
    pello.pyc: python 2.7 byte-compiled
    ```
2.  在 `pello.pyc`{.literal} 中执行字节代码：
    ``` literallayout
    $ python pello.pyc
    Hello World
    ```
:::
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreting}原始解析代码 {.title}
:::
本节介绍如何使用 [bash](https://www.gnu.org/software/bash/){.link} shell
内置语言编写的 `bello`{.literal} 程序。
`bello`{.literal}
``` literallayout
#!/bin/bash
printf "Hello World\n"
```
使用 shell 脚本语言（如 [*bash*]{.emphasis} ）编写的程序是原始的解释。
::: itemizedlist
**步骤**
-   使含有源代码的文件可执行并运行它：
    ``` literallayout
    $ chmod +x bello
    $ ./bello
    Hello World
    ```
:::
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#patching-software_preparing-software-for-rpm-packaging}修复软件 {.title}
:::
在 RPM 打包中，而不是修改原始源代码，我们保留它，并在上面使用补丁。
补丁（patch）是用于更新其他源代码的源代码。它被格式化为
[*diff*]{.emphasis}，因为它代表文本的两个版本之间的区别。使用
[*diff*]{.emphasis} 实用程序创建 `diff`{.literal}，然后使用
[patch](http://savannah.gnu.org/projects/patch/){.link}
实用程序应用到源代码。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
软件开发人员通常使用版本控制系统（如 [git](https://git-scm.com/){.link}
）来管理其代码库。这些工具提供自己创建 diffs 或 patching 软件的方法。
:::
本节介绍如何修补软件。
以下示例演示了如何使用 `diff`{.literal}
从原始源代码创建补丁，以及如何使用 `patch`{.literal} 应用补丁。创建 RPM
时，将在后面的章节中使用补丁。
此流程演示了如何从原始源代码为 `cello.c`{.literal} 创建补丁。
::: orderedlist
**步骤**
1.  保留原始源代码：
    ``` literallayout
    $ cp -p cello.c cello.c.orig
    ```
    `-p`{.literal} 选项用于保留模式、所有权和时间戳。
2.  根据需要修改 `cello.c`{.literal} ：
    ``` literallayout
    #include 
    int main(void) {
        printf("Hello World from my very first patch!\n");
        return 0;
    }
    ```
3.  使用 `diff`{.literal} 实用程序生成补丁：
    ``` literallayout
    $ diff -Naur cello.c.orig cello.c
    --- cello.c.orig        2016-05-26 17:21:30.478523360 -0500
    + cello.c     2016-05-27 14:53:20.668588245 -0500
    @@ -1,6 +1,6 @@
     #include
     int main(void){
    -    printf("Hello World!\n");
    +    printf("Hello World from my very first patch!\n");
         return 0;
     }
    \ No newline at end of file
    ```
    以 `-`{.literal} 开头的行将从原始源代码中删除，并替换为以
    `+`{.literal} 开头的行。
    建议将 `Naur`{.literal} 选项与 `diff`{.literal}
    命令一起使用，因为它符合大多数常见用例。然而，在这种情况下，只需要
    `-u`{.literal} 选项。具体选项可确保：
    ::: itemizedlist
    -   `-N`{.literal} （或 `--new-file`{.literal}）-
        处理缺少的文件，就像它们是空文件一样。
    -   `-a`{.literal} （或 `--text`{.literal}）-
        将所有文件作为文本文件。因此，被 `diff`{.literal}
        认为是二进制的文件不会被忽略。
    -   `-u`{.literal} (or `-U NUM`{.literal} 或
        `--unified[=NUM]`{.literal}) - 以统一上下文的输出 NUM（默认为
        3）行返回输出。这是一个易于阅读的格式，允许在将补丁应用到更改的源树时进行模糊匹配。
    -   `-r`{.literal} (or `--recursive`{.literal}) -
        递归比较任何找到的子目录。
        有关 `diff`{.literal} 实用程序通用参数的更多信息，请参阅
        `diff`{.literal} 手册页。
    :::
4.  将补丁保存到文件中：
    ``` literallayout
    $ diff -Naur cello.c.orig cello.c > cello-output-first-patch.patch
    ```
5.  恢复原始 `cello.c`{.literal} ：
    ``` literallayout
    $ cp cello.c.orig cello.c
    ```
    必须保留原始 `cello.c`{.literal}，因为当构建 RPM
    时，将使用原始文件，而不是修改的原始文件。如需更多信息，请参阅[使用
    SPEC
    文件](#packaging-software_packaging-and-distributing-software.html#con_working-with-spec-files_packaging-software "使用 SPEC 文件"){.link}。
:::
以下步骤演示了如何使用 `cello-output-first-patch.patch`{.literal} 对
`cello.c`{.literal} 进行补丁，构建补丁的程序并运行它。
::: orderedlist
**步骤**
1.  将补丁文件重定向到 `patch`{.literal} 命令：
    ``` literallayout
    $ patch 
    int main(void){
        printf("Hello World from my very first patch!\n");
        return 1;
    }
    ```
3.  构建并运行补丁的 `cello.c`{.literal} ：
    ``` literallayout