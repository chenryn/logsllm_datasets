could be able to mount a denial-of-service attack.
Writes to the device’s storage. When considering un-
locking vulnerabilities, we only use as sinks any write
operation to the device’s storage. This encodes the no-
tion that an unlocking mechanism that stores its secu-
rity state on the device’s storage may be controllable by
an attacker. To identify such sinks, we adopt the same
keyword-based approach that we employed to identify
the seeds of taint (i.e., by using relevant keywords in er-
ror logging messages).
Figure 3: Taint propagation example.
6.4 Taint Tracking
While we cannot execute the bootloaders concretely, as
we discussed above, we can execute them symbolically.
Our interest is in the path the data takes in moving from
a seed to a sink, and path-based symbolic execution lets
us reason about this, while implicitly handling taint-
propagation. Given a bootloader, along with the seeds
and sinks identiﬁed in the previous stages, the analysis
proceeds as follows:
• Locate a set of entry points, deﬁned as any function
that directly calls one of the identiﬁed seeds.
• Begin symbolic execution at the beginning of each
entry point. Note that, before starting to symboli-
cally execute an entry point, BOOTSTOMP tries to
infer, looking for known header as ELF, where the
global data is located. If it does ﬁnd it, it uncon-
strains each and every byte in it, so to break any as-
sumptions about the memory content before starting
to analyze the entry point.
• When a path encounters a function, either step over
it, or step into it, considering the code traversal rules
below.
• When a path reaches a seed, the appropriate taint is
applied, per the taint policy described below.
• Taint is propagated implicitly, due to the nature of
symbolic execution. This includes the return values
of functions handling tainted data.
• If a path reaches a sink affected by tainted data, an
alert is raised.
Code traversal. To avoid state explosion, we constrain
the functions that a path will traverse, using an adaptive
inter-function level. Normally, the inter-function level
speciﬁes how many functions deep a path would traverse.
However, the handling of tainted data in our analysis
means that we implicitly care more about those func-
tions which consume tainted data. Therefore, we only
step into functions that consume tainted data, up to the
inter-function level. For our experiments, we ﬁxed the
inter-function level at 1. More in detail, our analysis tra-
verses the code according to the following rules:
790    26th USENIX Security Symposium
USENIX Association
Tainted Page tyseed_func(ty);x = ty[5];CodeMemorySymbolic expressionsty = TAINT_tyx = deref(TAINT_ty_loc_5) xnot tainted.
• When no data is tainted, functions are not followed,
such as at the beginning of an entry point, before
the seed has been reached. Particularly, this path
selection criteria allows us to have a fast yet accu-
rate taint analysis, at the expense of possible false
negative results, as some tainted paths might not be
discovered due to some missed data aliases.
• Functions are not followed if their arguments are
• Analysis terminates when all the possible paths be-
tween the entry point and its end are analyzed, or a
timeout is triggered. Note that we set a timeout of
ten minutes for each entry point. As we will show
in Section 7.2 our results indicate that this is a very
reasonable time limit.
• Unless any of the above conditions are met, we fol-
low functions with an inter-function level of 1. In
other words, the analysis will explore at least one
function away from the entry point.
• We explore the body of a loop (unroll the loop) ex-
actly once, and then assume the path exits the loop.
(Under-Constrained) Symbolic Execution. Our ap-
proach requires, by design, to start the analysis from arbi-
trary functions, and not necessarily from the bootloader’s
entrypoint, which we may not even be able to determine.
This implies that the initial state may contain fewer con-
straints than it should have at that particular code point.
For this reason, we use under-constrained symbolic ex-
ecution, ﬁrst proposed by Ramos et al. [23], which has
been proven to reach good precision in this context.
Multi-tag taint analysis. To reach a greater preci-
sion, our system implements a multi-tag tainting ap-
proach [18]. This means that, instead of having one con-
cept of taint, each taint seed generates tainted data that
can be uniquely traced to where it was generated from.
Furthermore, we create unique taint tags for each invoca-
tion of a seed in the program. This means, for example,
that if a taint seed is repeatedly called, it will produce
many different taint tags. This improves precision when
reasoning about taint ﬂow.
Taint propagation and taint removal. Taint is implic-
itly propagated using symbolic execution, as no con-
straint is ever dropped. This means that if a variable x
depends on a tainted variable ty, the latter will appear
in the symbolic expression of the former. As an exam-
ple consider Figure 3. Suppose that a location of an ar-
ray pointed by ty is dereferenced and assigned to x, such
as x = ty[5]. Assuming now that ty is tainted because
pointing to data read from an untrusted storage, the mem-
ory page it points to will be tainted, meaning that every
memory location within that page will contain a sym-
bolic variable in the form TAINT ty loc i. After the in-
struction x = ty[5], the symbolic variable x will be in the
form dere f (TAINT ty loc 5).
On the other hand, taint is removed in two cases. Im-
plicitly when a non-tainted variable or value is written
in a tainted memory location, or when a tainted variable
is constrained within non tainted values. As an exam-
ple and by referring to the above tainted variable x, if a
check such as i f (x < N), where N is non-tainted value,
is present, x would get untainted.
Concretization strategy. When dealing with memory
writes in symbolic locations, target address needs to be
concretized. Unlike existing work [5], our analysis opts
to concretize values with a bias toward smaller values in
the possible range (instead of being biased toward higher
values). This means that, when a symbolic variable could
be concretized to more than one value, lower values are
preferred. In previous work, higher values were chosen
to help ﬁnd cases where memory accesses off the end
of an allocated memory region would result in vulner-
abilities. However, these values may not satisfy condi-
tional statements in the program that expect the value to
be “reasonable,” (such as in the case of values used to
index items in a vector) and concretizing to lower values
allows paths to proceed deeper into the program. In other
words, we opt for this strategy to maximize the number
of paths explored. Also, when BOOTSTOMP has to con-
cretize some expressions, it tries to concretize different
unconstrained variables to different (low) values. This
strategy aims to keep the false positive rate as low as pos-
sible. For a deeper discussion about how false negatives
and positive might arise, please refer to Section 7.4.
Finally, our analysis heavily relies on angr [28] (taint
engine) and IDA Pro [11] (sink and seed ﬁnding).
7 Evaluation
This section discusses the evaluation of BOOTSTOMP on
bootloaders from commercial mobile devices. In partic-
ular, for each of them, we run the analysis tool to locate
the two classes of vulnerabilities discussed in Section 6.
As a ﬁrst experiment, we use the tool to automatically
discover potential paths from attacker-controllable data
(i.e., the ﬂash memory) to points in the code that could
cause memory corruption vulnerabilities. As a second
experiment, we use the tool to discover potential vul-
nerabilities in how the lock/unlock mechanism is imple-
mented. We ran all of our experiments on a 12-Core Intel
machine with 126GB RAM and running Ubuntu Linux
16.04.
We ﬁrst discuss the dataset of bootloaders we used,
an analysis of the results, and an in-depth discussion of
several use cases.
USENIX Association
26th USENIX Security Symposium    791
7.1 Dataset
For this work, we considered ﬁve different bootloaders.
These devices represent three different chipset families:
Huawei P8 ALE-L23 (Huawei / HiSilicon chipset), Sony
Xperia XA (MediaTek chipset), and Nexus 9 (NVIDIA
Tegra chipset). We also considered two versions of the
LK-based bootloader, developed by Qualcomm. In par-
ticular, we considered an old version of the Qualcomm’s
LK bootloader (which is known to contain a security vul-
nerability, CVE-2014-9798 [19]) and its latest available
version (according to the ofﬁcial git repository [22]).
7.2 Finding Memory Corruption
We used BOOTSTOMP to analyze the ﬁve bootloaders in
our dataset to discover memory corruption vulnerabili-
ties. These vulnerabilities could result in arbitrary code
execution or denial-of-service attacks. Table 2 summa-
rizes our ﬁndings. In particular, the table shows the num-
ber of seeds, sinks, and entry points identiﬁed in each
bootloader. The table also shows the number of alerts
raised for each bootloader. Out of a total of 36, for
12 of them, the tool identiﬁed a potential path from a
source to memcpy-like sink, leading to the potential of a
buffer overﬂow. The tool raised 5 alerts about the pos-
sibility of a tainted variable being dereferenced, which
could in turn constitute a memory corruption bug. Fi-
nally, for 19, the tool identiﬁed that tainted data could
reach the conditional for a loop, potentially leading to
denial-of-service attacks. We then manually investigated
all the alerts to determine whether the tool uncovered se-
curity vulnerabilities. Our manual investigation revealed
a total of seven security vulnerabilities, six of which
previously-unknown (ﬁve are already conﬁrmed by the
respective vendors), while the remaining one being the
previously-known CVE-2014-9798 affecting an old ver-
sion of Qualcomm’s LK-based bootloader. Note that, as
BOOTSTOMP provides the set of basic blocks composing
the tainted trace together with the involved seed of taint
and sink, manual inspection becomes easy and fast even
for not-so-experienced analysts. We also note that, due to
bugs in angr related to the analysis of ARM’s THUMB-
mode instructions, the MediaTek bootloader was unable
to be processed correctly.
These results illustrate some interesting points about
the scalability and feasibility of BOOTSTOMP. First, we
note that each entry point’s run elapsed on average less
than ﬁve minutes (Duration per EP column), discovering
a total of seven bugs. We ran the same set of experiments
using a time limit of 40 minutes. Nonetheless, we no-
ticed that no additional alerts were generated. These two
results led us to believe that a timeout of ten minutes (i.e.,
twice as the average analysis run) was reasonable. Sec-
ond, we noted a peak in the memory consumption while
testing our tool against LK bootloaders. After investi-
gating, we found out that LK was the only bootloader
in the dataset having a well known header (ELF), which
allowed us to unconstrain all the bytes belonging to the
.data and .bss segments, as stated in Section 6. Third, we
note that the overall number of alerts raised is very low,
in the range that a human analyst, even operating without
debugging symbols or other useful reverse-engineering
information, could reasonably analyze them. Finally, as
we show in the table, more than one alert triggered due
to the same underlying vulnerability; the occurrence of
multiple alerts for the same functionality was a strong in-
dicator to the analyst of a problem. This can occur when
more than one seed fall within the same path generating
a unique bug, for instance, when more than one tainted
argument is present in a memcpy-like function call.
With this in mind, and by looking at the table, one
can see that around 38.3% of the tainted paths represent
indeed real vulnerabilities. Note also that in the context
of tainted paths, none of the reported alerts were false
positives (i.e., not tainted paths), though false positives
are theoretically possible, as explained in Section 7.4.
Our tool uncovered ﬁve new vulnerabilities in the
Huawei Android bootloader. First, an arbitrary memory
write or denial of service can occur when parsing Linux
Kernel’s device tree (DTB) stored in the boot partition.
Second, a heap buffer overﬂow can occur when reading
the root-writable oem info partition, due to not check-
ing the num records ﬁeld. Additionally, a user with root
privileges can write to the nve and oem info partitions,
from which both conﬁguration data and memory access
permissions governing the phone’s peripherals (e.g., mo-
dem) are read. The remaining two vulnerabilities will be
described in detail below.
Unfortunately, due to the architecture of the Huawei
bootloader, as detailed in Section 3.1, the impact of these
vulnerabilities on the security of the entire device is quite
severe. Because this bootloader runs at EL3, and is
responsible for the initialization of virtually all device
components, including the modem’s baseband ﬁrmware
and Trusted OS, this vulnerability would not only allow
one to break the chain of trust, but it would also consti-
tute a means to establish persistence within the device
that is not easily detectable by the user, or available to
any other kind of attack. Huawei conﬁrmed these vul-
nerabilities.
BOOTSTOMP also discovered a vulnerability in
NVIDIA’s hboot. hboot operates at EL1, meaning that
it has equivalent privilege on the hardware as the Linux
kernel, although it exists earlier in the Chain of Trust, and
therefore its compromise can lead to an attacker gain-
ing persistence. We have reported the vulnerability to
NVIDIA, and we are working with them on a ﬁx.
792    26th USENIX Security Symposium
USENIX Association
Bootloader Seeds Sinks Entry
Points
3
5
12
27
2
49
Qualcomm (Latest)
Qualcomm (Old)
NVIDIA
HiSilicon
MediaTek
Total
2
3
6
20
2
33
1
1
1
4
2
9
Total Alerts
Bug-Related Alerts
loop deref memcpy loops deref memcpy
1
3
7
8
-
19
1
0
0
4
-
5
2
5
0
5
-
12
0
0
1
8
-
9
0
0
0
4
-
4