## Steps to Reproduce
  * Android Video Plays correctly in either portrait or landscape video modes
  * iOS Video is warped on portrait and landscape looks normal.
  * It is not accounting for orientation.  
when you record a video in landscape with the volume buttons facing up on
iPhone and go to the video controller to play the video, it is upside down. If
you take a video in landscape with the lock button facing up the video looks
normal.
dependencies in `pubspec.yaml`
    dependencies:
      flutter:
        sdk: flutter
      async: "^2.0.6"
      cupertino_icons: ^0.1.0
      url_launcher: "^3.0.0"
      intl: 0.15.4
      local_auth: "^0.2.0"
      shared_preferences: "^0.4.0"
      firebase_core: "^0.2.3"
      firebase_analytics: "^0.3.3"
      material_search: "^0.2.3"
      flutter_webview_plugin: "^0.1.5"
      device_info: "^0.2.0"
      path_provider: "^0.4.0"
      path: "^1.5.1"
      video_player: "0.5.2"
      dio: "^0.0.12"
      get_version:
        git:
          url: git://github.com/AppleEducate/get_version
      media_picker:
        git:
          url: git://github.com/AppleEducate/media_picker
### Usage
    import 'dart:async';
    import 'package:async/async.dart';
    import 'dart:io';
    import 'package:path/path.dart';
    import 'dart:convert';
    import 'package:http/http.dart' as http;
    import 'package:flutter/material.dart';
    import 'package:media_picker/media_picker.dart';
    import 'package:video_player/video_player.dart';
    import 'package:Unify_Mobile/globals.dart' as globals;
    import 'package:Unify_Mobile/menu/videodetails.dart';
    import 'package:dio/dio.dart';
    class CameraPage extends StatefulWidget {
      @override
      _CameraPageState createState() => new _CameraPageState();
    }
    // State for managing fetching name data over HTTP
    class _CameraPageState extends State {
      final GlobalKey _scaffoldKey = new GlobalKey();
      Future _mediaFile;
      File _uploadFile;
      bool isVideo = false;
      VideoPlayerController _controller;
      VoidCallback listener;
      bool isPlaying = false;
      void _onImageButtonPressed(ImageSource source) {
        setState(() {
          if (_controller != null) {
            _controller.setVolume(0.0);
            _controller.removeListener(listener);
          }
          _mediaFile = MediaPicker.pickVideo(source: source).then((File _file) {
            _controller = VideoPlayerController.file(_file)
              ..addListener(listener)
              ..setVolume(1.0)
              ..initialize()
              ..setLooping(true)
              ..play();
            setState(() {
              isPlaying = true;
              _uploadFile = _file;
            });
          });
        });
      }
      @override
      void deactivate() {
        if (_controller != null) {
          _controller.setVolume(0.0);
          _controller.removeListener(listener);
        }
        super.deactivate();
      }
      @override
      void dispose() {
        if (_controller != null) {
          _controller.dispose();
        }
        super.dispose();
      }
      @override
      void initState() {
        super.initState();
        listener = () {
          setState(() {});
        };
      }
      Widget _previewVideo(VideoPlayerController controller) {
        if (controller == null) {
          isPlaying = false;
          return const Text('Please Select or Record a Video.');
        } else if (controller.value.initialized) {
          return InkWell(
              child: Padding(
                padding: const EdgeInsets.all(10.0),
                child: AspectRatio(
                  aspectRatio:
                      controller.value.size.width / controller.value.size.height,
                  child: VideoPlayer(
                    controller,
                  ),
                ),
              ),
              onTap: () {
                if (isPlaying) {
                  _controller.pause();
                  isPlaying = false;
                } else {
                  _controller.play();
                  isPlaying = true;
                }
              });
        } else {
          isPlaying = false;
          return const Text('Error Loading Video');
        }
      }
      Future uploadVideo(BuildContext context, File _uploadFile, String name,
          String description) async {
        final _name = name;
        final _description = description;
        if (_controller == null) {
          globals.Utility
              .showAlertPopup(context, "Info", "Video Required for Upload!");
        } else {
          final _ks = await globals.Utility.getKalturaSession();
          //  Add Video
          String _token = "";
          await http
              .get(
                  'https://www.kaltura.com/api_v3/service/uploadtoken/action/add?ks=$_ks&format=1')
              .then((response) {
            Map _json = json.decode(response.body);
            _token = _json['id'].toString();
            print('"Token: $_token');
          });
          //  Upload Video
          String _url =
              "https://www.kaltura.com/api_v3/service/uploadtoken/action/upload?ks=$_ks&format=1&uploadTokenId=$_token&resume=false&finalChunk=true&resumeAt=-1";
          print("Path: " + _uploadFile.uri.toString());
          await uploadFile(_url, _uploadFile, 'fileData');
          //  Update Video Info (Name, Desctiption, Tags)
          var _formName = Uri.encodeQueryComponent(r'mediaEntry[name]');
          var _formDesription =
              Uri.encodeQueryComponent(r'mediaEntry[description]');
          var _formTags = Uri.encodeQueryComponent(r'mediaEntry[tags]');
          var _formCatagory = Uri.encodeQueryComponent(r'mediaEntry[categories]');
          var _formType = Uri.encodeQueryComponent(r'mediaEntry[mediaType]');
          String _request =
              'https://www.kaltura.com/api_v3/service/media/action/addFromUploadedFile?ks=$_ks&format=1&$_formTags=${globals.userCompanyID}&$_formName=$_name&$_formDesription=$_description&uploadTokenId=$_token&$_formCatagory=Unapproved&$_formType=1';
          print(_request);
          await http.get(_request).then((response) {
            print('Updated Info...\n' + response.body.toString());
            Map _json = json.decode(response.body);
            //  Verify Upload
             _scaffoldKey.currentState.hideCurrentSnackBar();
            globals.videoID = "" + _json["id"].toString();
            Navigator.pop(context);
          });
        }
      }
      Future uploadFile(String url, File file, String name) async {
          var stream =
              new http.ByteStream(DelegatingStream.typed(file.openRead()));
          var length = await file.length();
          var uri = Uri.parse(url);
          var request = new http.MultipartRequest("POST", uri);
          var multipartFile = new http.MultipartFile(name, stream, length,
              filename: basename(file.path));
          request.files.add(multipartFile);
          var response = await request.send();
          print(response.statusCode);
          response.stream.transform(utf8.decoder).listen((value) {
            print(value);
          });
      }
      void _uploadVideo(BuildContext context) async {
        final snackbar = new SnackBar(
          duration: new Duration(seconds: 20),
          content: new Row(
            children: [
              new CircularProgressIndicator(),
              new Text("  Uploading...")
            ],
          ),
        );
        _scaffoldKey.currentState.showSnackBar(snackbar);
        await uploadVideo(context, _uploadFile, _nameController.text.toString(),
            _descController.text.toString());