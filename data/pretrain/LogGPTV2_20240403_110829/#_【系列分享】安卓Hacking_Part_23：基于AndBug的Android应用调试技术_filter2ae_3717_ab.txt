您可能已经注意到了，我们正在使用“ugbug”这个词来寻找类。其中，这里有两个加载的类与这个查询相匹配。除此之外，您也可以使用完整的软件包名称进行搜索。
现在，让我们来识别com.androidpentesting.andbug.MainActivity类中已加载的方法。实际上，这项任务可以通过下列命令来完成。
    > > methods com.androidpentesting.andbug.MainActivity
    ## Methods Lcom/androidpentesting/andbug/MainActivity;
    — com.androidpentesting.andbug.MainActivity.()V
    — com.androidpentesting.andbug.MainActivity.access$000(Lcom/androidpentesting/andbug/MainActivity;Ljava/lang/String;Ljava/lang/String;)V
    — com.androidpentesting.andbug.MainActivity.encryptandSave(Ljava/lang/String;Ljava/lang/String;)V
    — com.androidpentesting.andbug.MainActivity.onCreate(Landroid/os/Bundle;)V
    >>
正如你在上面所看到的那样，encryptandSave（）是这个类中让我们感兴趣的一个方法。
重要的是，我们可以使用method-trace命令“钩住”这些方法，并在应用程序运行时监视它们的行为。如果想分析类中的所有方法的话，只要运行ct命令即可，它是class-trace的缩写。
此外，我们还可以对com.androidpentesting.andbug.MainActivity类运行ct命令，具体如下图所示。
    >> ct com.androidpentesting.andbug.MainActivity
    ## Setting Hooks
    — Hooked com.androidpentesting.andbug.MainActivity
    >>
正如你在上面看到的那样，指定的类已被“钩住”了。 现在，让我们回到应用程序并输入一个数字，然后点击“Encrypt and Store”按钮。
单击这个按钮时，应用程序将接收用户输入，并使用AES 256对输入内容进行加密，然后将加密的字符串存储在SharedPreferences中，如下图所示。
    $ adb shell
    root@generic:/ # cd data/data/com.androidpentesting.andbug
    root@generic:/data/data/com.androidpentesting.andbug # ls
    cache
    lib
    shared_prefs
    root@generic:/data/data/com.androidpentesting.andbug # cd shared_prefs
    root@generic:/data/data/com.androidpentesting.andbug/shared_prefs # ls
    bankdetails.xml
    ankdetails.xml 
    789W4Kw6WOtAmY6fKasj3g==
    root@generic:/data/data/com.androidpentesting.andbug/shared_prefs #
正如你在上面看到的那样，这个字符串已经被加密和存储了。
但是，让我们再来看看AndBug shell中发生了什么。
    >> ct com.androidpentesting.andbug.MainActivity
    ## Setting Hooks
    — Hooked com.androidpentesting.andbug.MainActivity
    >> ## trace thread  main (running suspended)
    — com.androidpentesting.andbug.MainActivity.access$000
    (Lcom/androidpentesting/andbug/MainActivity;Ljava/lang/String;Ljava/lang/String;)V:0
    — com.androidpentesting.andbug.MainActivity$1.onClick(Landroid/view/View;)V:25
    — this=Lcom/androidpentesting/andbug/MainActivity$1; 
    — accountnumber=12345
    — v=Landroid/widget/Button; 
    — android.view.View.performClick()Z:18
    — this=Landroid/widget/Button; 
    — li=Landroid/view/View$ListenerInfo; 
    — android.view.View$PerformClick.run()V:2
    — this=Landroid/view/View$PerformClick; 
    com.androidpentesting.andbug.MainActivity.access$000
    (Lcom/androidpentesting/andbug/MainActivity;Ljava/lang/String;Ljava/lang/String;)V:6
    — x2=superstrongsecretkey
    — x0=Lcom/androidpentesting/andbug/MainActivity; 
    — x1=12345
    — com.androidpentesting.andbug.MainActivity$1.onClick(Landroid/view/View;)V:25
    — this=Lcom/androidpentesting/andbug/MainActivity$1; 
    — accountnumber=12345
    — v=Landroid/widget/Button; 
    — android.view.View.performClick()Z:18
    — this=Landroid/widget/Button; 
    — li=Landroid/view/View$ListenerInfo; 
太有趣啦！我们竟然可以看到用于生成加密密钥的密码。这是因为当调用特定方法时，AndBug能够显示其参数，如上所示。这在渗透测试期间的各种场景中是非常方便的。
在上述情况下，输出被截获，同时AndBug会显示指定类的所有方法和参数。 如前所述，您可以使用method-trace或mt命令挂接到特定方法上面。
AndBug工具不仅有趣，而且非常有用，我们建议您不妨将其收入到Android应用程序黑箱评估的工具箱中。我敢保证，只要您使用一次，肯定会喜欢上这个工具的。
传送门
[](http://bobao.360.cn/learning/detail/122.html)
* * *
[安卓 Hacking Part 1：应用组件攻防（连载）](http://bobao.360.cn/learning/detail/122.html)
[安卓 Hacking Part 2：Content
Provider攻防（连载）](http://bobao.360.cn/learning/detail/127.html)
[安卓 Hacking Part 3：Broadcast
Receivers攻防（连载）](http://bobao.360.cn/learning/detail/126.html)
[安卓 Hacking Part
4：非预期的信息泄露（边信道信息泄露）](http://bobao.360.cn/learning/detail/133.html)
[安卓 Hacking Part
5：使用JDB调试Java应用](http://bobao.360.cn/learning/detail/138.html)
[安卓 Hacking Part 6：调试Android应用](http://bobao.360.cn/learning/detail/140.html)
[安卓 Hacking Part 7：攻击WebView](http://bobao.360.cn/learning/detail/142.html)
[安卓 Hacking Part 8：Root的检测和绕过](http://bobao.360.cn/learning/detail/144.html)
[安卓 Hacking Part 9：不安全的本地存储：Shared
Preferences](http://bobao.360.cn/learning/detail/150.html)
[安卓 Hacking Part 10：不安全的本地存储](http://bobao.360.cn/learning/detail/152.html)
[安卓 Hacking Part
11：使用Introspy进行黑盒测试](http://bobao.360.cn/learning/detail/154.html)
[安卓 Hacking Part 12：使用第三方库加固Shared
Preferences](http://bobao.360.cn/learning/detail/156.html)
[安卓 Hacking Part
13：使用Drozer进行安全测试](http://bobao.360.cn/learning/detail/158.html)
[安卓 Hacking Part
14：在没有root的设备上检测并导出app特定的数据](http://bobao.360.cn/learning/detail/161.html)
[安卓 Hacking Part
15：使用备份技术黑掉安卓应用](http://bobao.360.cn/learning/detail/169.html)
[安卓 Hacking Part 16：脆弱的加密](http://bobao.360.cn/learning/detail/174.html)
[安卓 Hacking Part 17：破解Android应用](http://bobao.360.cn/learning/detail/179.html)
[安卓 Hacking Part 18：逆向工程入门篇](http://bobao.360.cn/learning/detail/3648.html)
[**安卓 Hacking Part
19：NoSQL数据库不安全的数据存储**](http://bobao.360.cn/learning/detail/3653.html)
[**安卓Hacking Part 20：使用GDB在Android模拟器上调试应用程序**
****](http://bobao.360.cn/learning/detail/3677.html)
[**安卓Hacking Part 22：基于Cydia Substrate扩展的Android应用的钩子和补丁技术**
****](http://bobao.360.cn/learning/detail/3679.html)