您可能已经注意到，我们正在使用“ugbug”一词来查找类。目前有两个已加载的类与该查询相匹配。此外，您还可以通过完整的软件包名称进行搜索。

接下来，我们将识别 `com.androidpentesting.andbug.MainActivity` 类中已加载的方法。此任务可以通过执行以下命令完成：
```
> methods com.androidpentesting.andbug.MainActivity
## Methods Lcom/androidpentesting/andbug/MainActivity;
- com.androidpentesting.andbug.MainActivity.()V
- com.androidpentesting.andbug.MainActivity.access$000(Lcom/androidpentesting/andbug/MainActivity;Ljava/lang/String;Ljava/lang/String;)V
- com.androidpentesting.andbug.MainActivity.encryptandSave(Ljava/lang/String;Ljava/lang/String;)V
- com.androidpentesting.andbug.MainActivity.onCreate(Landroid/os/Bundle;)V
>>
```
如上所示，`encryptandSave()` 方法是我们关注的重点之一。

重要的是，我们可以使用 `method-trace` 命令（简称 `mt`）对这些方法进行“钩住”，以便在应用程序运行时监控它们的行为。如果您想分析某个类中的所有方法，可以使用 `class-trace` 命令（简写为 `ct`）。例如，对于 `com.androidpentesting.andbug.MainActivity` 类，操作如下：
```
>> ct com.androidpentesting.andbug.MainActivity
## Setting Hooks
- Hooked com.androidpentesting.andbug.MainActivity
>>
```
现在让我们回到应用本身，输入一个数字并点击 "Encrypt and Store" 按钮。当点击按钮时，应用将接收用户输入，利用 AES 256 对其加密，并将加密后的字符串存储于 SharedPreferences 中。这可以通过 adb shell 进行验证：
```
$ adb shell
root@generic:/ # cd data/data/com.androidpentesting.andbug
root@generic:/data/data/com.androidpentesting.andbug # ls
cache
lib
shared_prefs
root@generic:/data/data/com.androidpentesting.andbug # cd shared_prefs
root@generic:/data/data/com.androidpentesting.andbug/shared_prefs # ls
bankdetails.xml
ankdetails.xml 
789W4Kw6WOtAmY6fKasj3g==
root@generic:/data/data/com.androidpentesting.andbug/shared_prefs #
```
可以看到，字符串已被成功加密并存储。

再次查看 AndBug shell 输出，以了解更多信息：
```
>> ct com.androidpentesting.andbug.MainActivity
## Setting Hooks
- Hooked com.androidpentesting.andbug.MainActivity
>> ## trace thread  main (running suspended)
- com.androidpentesting.andbug.MainActivity.access$000
  (Lcom/androidpentesting/andbug/MainActivity;Ljava/lang/String;Ljava/lang/String;)V:0
- com.androidpentesting.andbug.MainActivity$1.onClick(Landroid/view/View;)V:25
- this=Lcom/androidpentesting/andbug/MainActivity$1; 
- accountnumber=12345
- v=Landroid/widget/Button; 
- android.view.View.performClick()Z:18
- this=Landroid/widget/Button; 
- li=Landroid/view/View$ListenerInfo; 
- android.view.View$PerformClick.run()V:2
- this=Landroid/view/View$PerformClick; 
com.androidpentesting.andbug.MainActivity.access$000
  (Lcom/androidpentesting/andbug/MainActivity;Ljava/lang/String;Ljava/lang/String;)V:6
- x2=superstrongsecretkey
- x0=Lcom/androidpentesting/andbug/MainActivity; 
- x1=12345
- com.androidpentesting.andbug.MainActivity$1.onClick(Landroid/view/View;)V:25
- this=Lcom/androidpentesting/andbug/MainActivity$1; 
- accountnumber=12345
- v=Landroid/widget/Button; 
- android.view.View.performClick()Z:18
- this=Landroid/widget/Button; 
- li=Landroid/view/View$ListenerInfo; 
```
非常有趣的是，AndBug 能够展示调用特定方法时传递给它的参数，比如这里用于生成加密密钥的密码。这对于渗透测试过程中多种场景都非常有用。

上述情况表明，AndBug 可以捕获输出并显示指定类的所有方法及其参数。正如之前提到的，您可以使用 `method-trace` 或 `mt` 命令挂接到具体方法上。

AndBug 工具不仅功能强大而且极具实用性，建议将其纳入您的 Android 应用黑盒评估工具箱中。一旦开始使用，您一定会爱上这款工具！

更多相关文章，请参考以下链接：
- [安卓 Hacking Part 1：应用组件攻防](http://bobao.360.cn/learning/detail/122.html)
- [安卓 Hacking Part 2：Content Provider 攻防](http://bobao.360.cn/learning/detail/127.html)
- [安卓 Hacking Part 3：Broadcast Receivers 攻防](http://bobao.360.cn/learning/detail/126.html)
- [安卓 Hacking Part 4：非预期的信息泄露（边信道信息泄露）](http://bobao.360.cn/learning/detail/133.html)
- [安卓 Hacking Part 5：使用 JDB 调试 Java 应用](http://bobao.360.cn/learning/detail/138.html)
- [安卓 Hacking Part 6：调试 Android 应用](http://bobao.360.cn/learning/detail/140.html)
- [安卓 Hacking Part 7：攻击 WebView](http://bobao.360.cn/learning/detail/142.html)
- [安卓 Hacking Part 8：Root 的检测和绕过](http://bobao.360.cn/learning/detail/144.html)
- [安卓 Hacking Part 9：不安全的本地存储：Shared Preferences](http://bobao.360.cn/learning/detail/150.html)
- [安卓 Hacking Part 10：不安全的本地存储](http://bobao.360.cn/learning/detail/152.html)
- [安卓 Hacking Part 11：使用 Introspy 进行黑盒测试](http://bobao.360.cn/learning/detail/154.html)
- [安卓 Hacking Part 12：使用第三方库加固 Shared Preferences](http://bobao.360.cn/learning/detail/156.html)
- [安卓 Hacking Part 13：使用 Drozer 进行安全测试](http://bobao.360.cn/learning/detail/158.html)
- [安卓 Hacking Part 14：在没有 root 的设备上检测并导出 app 特定的数据](http://bobao.360.cn/learning/detail/161.html)
- [安卓 Hacking Part 15：使用备份技术黑掉安卓应用](http://bobao.360.cn/learning/detail/169.html)
- [安卓 Hacking Part 16：脆弱的加密](http://bobao.360.cn/learning/detail/174.html)
- [安卓 Hacking Part 17：破解 Android 应用](http://bobao.360.cn/learning/detail/179.html)
- [安卓 Hacking Part 18：逆向工程入门篇](http://bobao.360.cn/learning/detail/3648.html)
- [安卓 Hacking Part 19：NoSQL 数据库不安全的数据存储](http://bobao.360.cn/learning/detail/3653.html)
- [安卓 Hacking Part 20：使用 GDB 在 Android 模拟器上调试应用程序](http://bobao.360.cn/learning/detail/3677.html)
- [安卓 Hacking Part 22：基于 Cydia Substrate 扩展的 Android 应用的钩子和补丁技术](http://bobao.360.cn/learning/detail/3679.html)