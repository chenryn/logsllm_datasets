(cid:63)
(cid:63)
1]
0 = Z
1 ∈ {Z1,⊥}
(cid:63)
(cid:21)
Therefore, validity game outputs 1 with all but negligible probability. Since the above analysis
holds for any PPT adversary, DP is a valid DPRF.
We now turn to arguing the indistinguishability of AUTH and AUTH-U. The forgery step
of AUTH is now diﬀerent from the previous case. We ﬁrst write it down in detail here:
1. A outputs ((j1, S1, c1), (j2, S2, c2), . . ., (jk+1, Sk+1, ck+1)) s.t. j(cid:96) ∈ S \ C, |S(cid:96)| ≥ t for
(cid:96) ∈ [k + 1] and cu (cid:54)= cv for any u (cid:54)= v ∈ [k + 1]. Let c(cid:96) := (j(cid:96), α(cid:96), e(cid:96)) for (cid:96) ∈ [k + 1].
2. For (cid:96) ∈ [k + 1],
− for i ∈ S(cid:96) ∩ C, send j(cid:96)(cid:107)α(cid:96) to A and get back z(cid:63)
(cid:96),i;
− for i ∈ S(cid:96) \ C, compute z(cid:96),i ← DP.Eval(ski, j(cid:96)(cid:107)α(cid:96), pp).
47
3. Compute w(cid:96) := Combine({(i, z(cid:63)
(cid:96),i)}i∈S(cid:96)∩C ∪{(i, z(cid:96),i}i∈S(cid:96)\C, pp) for (cid:96) ∈ [k + 1]. Output 0 if
any w(cid:96) = ⊥. Else, compute m(cid:96)(cid:107)ρ(cid:96) := PRG(w(cid:96))⊕e(cid:96) and check if α(cid:96) = Com(m(cid:96), ppcom; ρ(cid:96)).
Output 0 if the check fails for any (cid:96). Else, output 1.
Note that corrupt parties can now provide arbitrary shares of DPRF values during the de-
cryption of forged ciphertexts (step 2).
AUTH-U is diﬀerent from AUTH in the same way as before. Speciﬁcally, the diﬀerence is
in the ﬁrst step of forgery:
− A outputs ((j1, S1, c1), (j2, S2, c2), . . ., (jk+1, Sk+1, ck+1)) s.t. j(cid:96) ∈ S \ C, |S(cid:96)| ≥ t for
(cid:96) ∈ [k + 1] and cu (cid:54)= cv for any u (cid:54)= v ∈ [k + 1]. Let c(cid:96) := (j(cid:96), α(cid:96), e(cid:96)) for (cid:96) ∈ [k + 1].
Output 0 if for any u (cid:54)= v, ju = jv and αu = αv.
0 and z(cid:63)
u,i)}i∈Su∩C,{(i, z(cid:63)
Let E denote the event that among the ciphertexts output by the adversary, there exists
u (cid:54)= v such that ju = jv and αu = αv. Clearly, the probability that E happens is the same in
AUTH and AUTH-U.
Fix any PPT adversary A. We now informally describe an adversary B(cid:48) who simulates
AUTH for A with the help of the challenger, say Chal(cid:48), of the validity game. B(cid:48) will be
able to handle all the encryption and decryption queries of A by making evaluation queries
to Chal(cid:48). When A outputs k + 1 forgeries, B(cid:48) will check if the event E occurs or not.
If
not, then it aborts. Otherwise, B(cid:48) will pick any u (cid:54)= v s.t. ju = jv and αu = αv. For all
(cid:96) ∈ [k + 1] \ {u, v}, B(cid:48) will evaluate w(cid:96) by making evaluation queries. Then, it will send
(Su, Sv, ju(cid:107)αu,{(i, z(cid:63)
v,i)}i∈Sv∩C) to Chal(cid:48). Assume, for simplicity, that Chal(cid:48)
1 to B(cid:48), which we refer to as wu and wv, respectively. Now, given w1, . . . , wk+1,
returns z(cid:63)
B(cid:48) outputs the ﬁnal bit in the same way as AUTH.
To show that AUTH and AUTH-U are indistinguishable, all we need to do is argue that
when E occurs, AUTH also outputs 0 with high probability. When E occurs, B(cid:48) is a valid
adversary for the validity game. Hence, wu = ⊥, wv = ⊥ or wu = wv with all but negligible
probability. In the ﬁrst two cases, B(cid:48) clearly outputs 0. Further, in the last case, by the same
argument as in the previous proof, B(cid:48) outputs 0 with high probability.
Finally, when using an advantage in AUTH-U to break the pseudorandomness of DP
like in the previous proof, the construction of B needs to change slightly. Since corrupt
parties are involved in the ﬁnal decryption, they will provide partial shares of DPRF too.
Therefore, instead of sending (Challenge, j(cid:96)(cid:63)(cid:107)α(cid:96)(cid:63), S(cid:96)(cid:63),∅) to Chal in the forgery step, B will
(cid:96)(cid:63),i)i∈S(cid:96)∩C}) instead, where for (cid:96) ∈ [τ ] and i ∈ S(cid:96) ∩ C, z(cid:63)
send (Challenge, j(cid:96)(cid:63)(cid:107)α(cid:96)(cid:63), S(cid:96)(cid:63),{(i, z(cid:63)
is returned by A when j(cid:96)(cid:107)α(cid:96) is sent to it. This change does not aﬀect the argument that if
AUTH-U outputs 1 with probability ε then B will be able to get a similar advantage in the
pseudorandomness game.
(cid:96),i
C.4 Proof of Theorem 8.1
Recall that a secure DPRF protocol is supposed to provide consistency and pseudo-randomness
guarantees but not necessarily correctness. First, it is straightforward to see that ΠDDH-DP is
consistent due to the properties of Shamir’s secret sharing.
Pseudorandomness. We show that if the DDH assumption holds in group G, then ΠDDH-DP
satisﬁes the pseudorandomness property in the random oracle model. We will go through
several hybrids to establish this. For any PPT adversary A, let us ﬁrst consider the real game
PseudoRandΠDDH-DP,A(1κ, b). For simplicity, let us denote the game just by PseudoRandA(b).
48
PseudoRandA(b) :
1. Give the public parameters pp := (p, g, G) (G is a cyclic group of order p and g is a
generator of G) to A.
2. Program the random oracle H as follows: Initialize LH := ∅. For random oracle call
with input x:
1. If there exists a tuple (x, r, h) ∈ LH , output h.
2. Otherwise, choose r ←$ Zp and set h := gr. Update LH := LH∪ (x, r, h) and output
h.
Give random oracle access to A.
3. Choose a (t− 1)-degree random polynomial f . Deﬁne si := f (i) for i ∈ [n]∪{0}. Get the
set of corrupt parties C from A. Without loss of generality assume that C = {1, . . . (cid:96)}.
Then send the corresponding secret keys {s1, . . . , s(cid:96)} to A.
4. On an evaluation query (Eval, x, i) for an honest i, return H(x)si.
5. On the challenge query (Challenge, x(cid:63), S, g(cid:63)
assume that S ∩ C = [u]):
1. If A has already made at least t − |C| queries of the form (Eval, x(cid:63),∗), then output
1, . . . , g(cid:63)
u) for u ≤ (cid:96) (without loss of generality
0 and stop.
2. Otherwise do as follows:
i := H(x(cid:63))si for i ∈ S \ C.
1. Set g(cid:63)
2. Depending on b do as follows:
1. If b = 0 then compute z :=(cid:81)
2. Else, choose a random z ←$ G.
i∈S g(cid:63)
i
λ0,i,S .
3. Send z to A.
6. Continue answering evaluation queries as before, but if A makes a query of the form
(Eval, x(cid:63), i) for some i ∈ [n] \ C and i is the g-th party it contacted, then output 0 and
stop.
7. Receive a guess b(cid:48) from A; output b(cid:48).
For any adversary A that asks evaluation queries on qE distinct x, we now deﬁne hybrid
games Hyb(k)A (b) for k ∈ [qE] and b ∈ {0, 1}. The only diﬀerence between Hybk−1A (b) and
HybkA(b) is the way the evaluation queries for the k-th distinct x are answered. Speciﬁcally, in
the k-th hybrid these queries are answered using a randomly chosen (t− 1)-degree polynomial
f (k), where evaluations of exactly (cid:96) points match with that of “real polynomial” f , and f (k) is
only used to reply to such queries. On the other hand, in the (k− 1)-th hybrid the queries on
k-th distinct x are answered according to f itself. However, in both the games the evaluation
queries for the ﬁrst k − 1 distinct x are answered using randomly chosen polynomials and all
the subsequent queries (for the (k + 1)-th distinct x onwards) are answered using f .
We will formally specify hybrid HybkA(b) now. Diﬀerences with the game PseudoRand are
highlighted in red.
49
Hyb(k)A (b) :
1. Give the public parameters pp := (p, g, G) to A.
2. Program the random oracle H as follows: Initialize LH := ∅. For random oracle call
with input x:
1. If there exists a tuple (x, r, h) ∈ LH, output h.
2. Otherwise, choose r ←$ Zp and set h := gr. Update LH := LH∪ (x, r, h) and output
h.
Give random oracle access to A.
3. Choose a (t− 1)-degree random polynomial f . Deﬁne si := f (i) for i ∈ [n]∪{0}. Get the
set of corrupt parties C from A. Without loss of generality assume that C = {1, . . . (cid:96)}.
Then send the corresponding secret keys {s1, . . . , s(cid:96)} to A.
4. Choose k (t − 1)-degree random polynomials f (1), . . . , f (k) with the constraint that for
all i ∈ [(cid:96)] and all j ∈ [k], f (j)(i) = si. Deﬁne ˜s(j)
i = f (j)(i) for i ∈ [n], j ∈ [k].
5. Deﬁne a function pc as follows:
pc(x, j, i) :=
for i ∈ [n].
(cid:40) H(x)˜s(j)
i
if j ≤ k
H(x)si otherwise,
6. On an evaluation query (Eval, x, i) for an honest i, if x is the j-th distinct value, then
return pc(x, j, i). 11
7. On the challenge query (Challenge, x(cid:63), S, g(cid:63)
1, . . . , g(cid:63)
u):
1. If x(cid:63) was queried in the evaluation phase and it was the j-th distinct value, then let
j(cid:63) := j. Else, let j(cid:63) := qE + 1.
2. If A has already made at least t − |C| queries of the form (Eval, x(cid:63),∗), then output
0 and stop.
3. Otherwise do as follows:
i := pc(x(cid:63), j(cid:63), i) for i ∈ S \ C.
1. Set g(cid:63)
2. Depending on b do as follows:
1. If b = 0 then compute z :=(cid:81)
2. Else, choose a random z ←$ G.
4. Send z to A.
i∈S g(cid:63)
i
λ0,i,S .
8. Continue answering evaluation queries as before, but if A makes a query of the form
(Eval, x(cid:63), i) for some i ∈ [n] \ C and i is the g-th party it contacted, then output 0 and
stop.
11To clarify a bit more, suppose A makes three evaluation queries:
(Eval, x1, i1), (Eval, x2, i2) and
(Eval, x1, i3) such that x1 (cid:54)= x2. For both the ﬁrst and third queries, j will be 1, and for the second, it
will be 2.
50
9. Receive a guess b(cid:48) from A; output b(cid:48).
It is easy to check that the view of A in Hyb(0)A (b) is identical to that in PseudoRandA(b).
We now prove the following lemma.
(b) and
Lemma C.1 For any b ∈ {0, 1} and k ∈ [qE], the outputs of hybrids Hyb(k−1)A
Hyb(k)A (b) are computationally indistinguishable.
Proof. We show that if there exists a PPT adversary A that can distinguish between the
hybrids Hybk−1A (b) and HybkA(b) with non-negligible probability then we can construct a PPT
adversary A(cid:48) that can break an extended version of the DDH assumption with non-negligible
probability using A as a sub-routine.
A DDH-tuple over a cyclic group G is given by (g, gα, gβ, y) where α, β ←$ Zp and y is
equal to gαβ or a random element in G. The extended version of DDH we consider here is
given by (g, gα0, gα1, gαw , gβ, y0, y1, . . . , yw) where yi = gαiβ or random for all i ∈ {0, . . . , w}.
One can easily show that this extended version of DDH follows from DDH itself (with some
polynomial security loss) as long as w is a polynomial.
We now construct A(cid:48) as follows:
1. Forward the public parameters pp := (p, g, G) from the DDH challenger to A. Receive a
DDH-tuple (gα, gβ, y) from the DDH challenger.
2. Program the random oracle H as follows: Initialize LH := ∅. Let qH be the total number
of random oracle queries asked in this game. Guess an index η(cid:63) ←$ [qH] randomly. For
random oracle call with input x,
1. If there exists a tuple (x, r, h) ∈ LH , output h.
2. Otherwise,
tuple;
1. if this is the η(cid:63)-th call, set r := ⊥ and h := gβ, where gβ is from the DDH
2. else, choose r ←$ Zp and set h := gr.
Update LH := LH ∪ (x, r, h) and output h.
Give random oracle access to A.
3. Get the set of corrupt parties C from A. Without loss of generality assume that C =
{1, . . . (cid:96)}. Then proceed as follows:
1. Choose random si ←$ Zp and deﬁne ˆgi := gsi for i ∈ [(cid:96)].
2. Then let ˆg0 := gα0 and ˆgi := gαi for i ∈ [(cid:96) + 1, t − 1], where gα0, gα(cid:96)+1, . . . , gαt−1
comes from the DDH-tuple. The values α0, s1, . . . , s(cid:96), α(cid:96)+1, . . . , αt−1 deﬁne a (t− 1)-
for all
i ∈ {t, . . . , n}.
degree polynomial f . Setting T := {0} ∪ [t − 1], compute ˆgi :=(cid:81)
j∈T ˆgλi,j,T
j
3. Send {s1 . . . , s(cid:96)} to A.
4. Choose k−1 (t−1)-degree random polynomials, f (1), . . . , f (k−1) with the constraint that
:= f (j)(i) for i ∈ [n], j ∈ [k − 1].
for all i ∈ [(cid:96)] and all j ∈ [k − 1], f (j)(i) = si. Deﬁne ˜s(j)
i
51
where y0, y(cid:96)+1, . . . , yt−1 are from the DDH-tuple. Then compute ¯gi :=(cid:81)
5. Compute ¯gi := (gβ)si for all i ∈ [(cid:96)]. Set ¯g0 := y0 and ¯gi := yi for i ∈ [(cid:96) + 1, t − 1],
for
j∈T ¯gλi,j,T
j
all i ∈ {t, . . . , n}.
6. Deﬁne a function pc as follows. On input (x, i, j) for i ∈ [n], pc ﬁrst invokes RO on
x. This associates a tuple (x, r, h) with x in LH if there wasn’t one already. Now, pc
returns
− H(x)˜s(j)
− ¯gi if j = k,
− ˆgr
i if j > k (if r = ⊥, return ⊥).
if j < k,
i
7. On an evaluation query (Eval, x, i) for an honest i, if x is the j-th distinct value, then
return pc(x, j, i).
8. On the challenge query (Challenge, x(cid:63), S, g(cid:63)
1, . . . , g(cid:63)
u):
1. If x(cid:63) was queried in the evaluation phase and it was the j-th distinct value, then let
j(cid:63) := j. Else, let j(cid:63) := qE + 1.
2. If A has already made at least t − |C| queries of the form (Eval, x(cid:63),∗), then output
0 and stop.
3. Otherwise do as follows:
i := pc(x(cid:63), j(cid:63), i) for i ∈ S \ C.
1. Set g(cid:63)
2. Depending on b do as follows:
1. If b = 0 then compute z :=(cid:81)
2. Else, choose a random z ←$ G.
i∈S g(cid:63)
i
λ0,i,S
4. Send z to A.
9. Continue answering evaluation queries as before, but if A makes a query of the form
(Eval, x(cid:63), i) for some i ∈ [n] \ C and i is the g-th party it contacted, then output 0 and
stop.
10. Receive a guess b(cid:48) from A; output b(cid:48).