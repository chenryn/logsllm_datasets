our work we refer to the level as the degree of the arithmetic
circuits. So, for example, a linearly-homomorphic encryp-
tion is a level-1 HE.
Definition 6
(Level-d Homomorphic Encryption).
For a positive integer d ∈ Z+, HE (d) is a level-d homomor-
phic encryption scheme if HE (d) compactly evaluates circuits
of degree at most d and the running time of HE (d)’s algo-
rithms is polynomial in the security parameter λ, the degree
d, and (only in the case of Eval(d)) the circuit size.
Now, for leveled homomorphic encryption schemes it is
possible to consider a weaker version of circuit privacy which,
roughly speaking, says that ciphertexts “at the same level”
look indistinguishable. In other words, this means that cir-
cuit privacy holds with respect to a diﬀerent distribution for
each level. More formally:
Definition 7
(Leveled Circuit Privacy). We say that
a leveled homomorphic encryption HE (d) satisﬁes leveled cir-
cuit privacy for a family of circuits F if there exists a PPT
simulator Sim and a negligible function (λ) such that the
following holds. For any λ ∈ N, any pair of keys (pk, sk) $←
KeyGen(1λ), any circuit f ∈ F of multiplicative depth d(cid:48) ≤
d, any tuple of messages m1, . . . , mt ∈ M and ciphertexts
C1, . . . , Ct such that ∀i ∈ [t]: Ci
SD[Eval(pk, f, C1, . . . , Ct), Sim(1λ, pk, d
$← Enc(pk, mi), it holds
(cid:48)
, f (m1, . . . , mt))] ≤ (λ)
3. Public-Space HOMOMORPHIC ENCRYP-
TION
In this section we deﬁne the property that a homomorphic
encryption scheme needs to satisfy in order to be used in
our transformation presented in Section 4. We call such
a scheme a public-space homomorphic encryption, and we
formalize this notion below.
Definition 8. A homomorphic encryption scheme ˆHE =
ˆKeyGen, ˆEnc, ˆEval, ˆDec) with message space M is said to be
(
public-space if: (1) M is a (publicly known) ﬁnite and com-
mutative ring with a unity, and (2) it is possible to eﬃciently
sample uniformly distributed elements m ∈ M.
We stress that the above is a very mild requirement, and
we point out that virtually all known number-theoretic ho-
momorphic encryption schemes (e.g., [20, 10, 30, 33, 13, 6,
25]) are public-space, or can be easily adapted to be so (as
we show in Appendix A for the case of [11, 32, 2, 3]). In
essence, given the current state of the art we have public-
space linearly-homomorphic encryption schemes based on a
variety of number-theoretic assumptions, such as p-subgroup
[32], Quadratic Residuosity and its extensions [20, 30, 25],
Composite Residuosity [33, 13], DDH [11, 8], DLin [2, 16],
subgroup decision [3]. Finally, we note that also the more
recent lattice-based homomorphic encryption schemes (e.g.,
[5, 4]) satisfy our notion of public-space.
4. OUR TRANSFORMATION
In this section we present our main construction, that is a
methodology to convert a public-space linearly-homomorphic
encryption scheme into a scheme supporting one multiplica-
tion. Precisely, the resulting scheme can compactly evalu-
ate arithmetic circuits in which the number of additions of
degree-2 terms is bounded by some constant (yet the num-
ber of additions of degree 1 is unbounded). At the same
time, the scheme satisﬁes leveled circuit-privacy.
Let ˆHE = (
ˆKeyGen, ˆEnc, ˆEval, ˆDec) be a public-space linearly-
homomorphic encryption scheme as per Deﬁnition 3. To
ease the presentation, in our description we denote by ˆC the
ciphertext space of ˆHE, we use Greek letters to denote ele-
ments of ˆC and Roman letters for elements of M. Without
loss of generality we assume ˆEval consists of two subroutines:
one to perform (homomorphic) addition and one for per-
forming (homomorphic) multiplication by known constants.
We compactly denote these operations with (cid:1) and ·, respec-
1522f ( (cid:126)m) is a polynomial of form P ( (cid:126)m) +(cid:80)L
tively.8 Namely, given two cihertexts β1, β2 ∈ ˆC, β = β1 (cid:1)β2
denotes their homomorphic addition, and β = c · β1 denotes
a multiplication by a constant c ∈ M. Addition and multi-
plication over M are denoted by + and ·, respectively.
In what follows, we propose a scheme HE = (KeyGen,
Enc, Eval, Dec) capable of evaluating arithmetic circuits of
degree 2 over M, in which the number of additions of degree-
2 terms is bounded by some constant L. Precisely, let Fd
be the class of (multi-variate) polynomials of total degree
d over the ring M. Then our scheme HE can compactly
evaluate polynomials in the class F (cid:63)
2 = {f ( (cid:126)m)} ⊂ F2, where
i=1 Qi( (cid:126)m) · Ri( (cid:126)m)
where P ( (cid:126)m), {Qi( (cid:126)m), Ri( (cid:126)m)} are all polynomials in F1.
KeyGen(1λ): On input 1λ, where λ ∈ N is a security pa-
ˆKeyGen(1λ) to get (pk, sk), and outputs
rameter, it runs
(pk, sk). We assume that pk implicitly contains a descrip-
tion of ˆHE’s message space M and ciphertext space ˆC. The
message space of the scheme HE will be the same M.
Enc(pk, m): Given a message m ∈ M, the algorithm simply
outputs ˆC = ˆEnc(pk, m).
Eval(pk, f, C1, . . . , Ct): We describe this algorithm in terms
of four diﬀerent procedures: (Add1, Mult, Add2, cMult) that
implement the basic homomorphic operations: additions,
multiplications and multiplications by known constants.
Informally, Add1 and Mult operate over pairs ciphertexts
that encode either ”fresh” messages or messages obtained
as linear combinations of fresh messages, whereas Add2
operates over pairs of ciphertexts containing “multiplied”
messages. Similarly, cMult allows to perform multiplica-
tions by constant on ciphertexts. Therefore, homomorphi-
cally evaluating a circuit f consists of evaluating the corre-
sponding homomorphic operations. Furthermore, in order
to achieve circuit privacy, the ciphertext output by Eval
must be re-randomized by using the procedures described
later.
Add1 : On input two ciphertexts C1, C2 ∈ ˆC where, for
i = 1, 2, Ci = βi, this algorithm produces a ciphertext
C = β ∈ ˆC computed as β = β1 (cid:1) β2.
2 ∈ ˆC the algorithm
Mult : On input two ciphertexts C(cid:48)
1, C(cid:48)
proceeds in two steps: a ciphertext modiﬁcation step and
the actual multiplication step. In the ﬁrst step the algo-
rithm chooses (at random) a1, a2 ∈ M. Next, it com-
(cid:48)(cid:48)
2 = ˆEnc(−a2) and sets
putes C
βi = Add1(C(cid:48)
In the multiplication step, letting C1, C2 ∈ M× ˆC where,
for i = 1, 2, Ci = (ai, βi), the algorithm computes a
ciphertext C = (α, β) ∈ ˆC × ˆC2 as follows:
(cid:48)(cid:48)
1 = ˆEnc(−a1) and C
(cid:48)(cid:48)
i ) for i = 1, 2.
i, C
α = ˆEnc(pk, a1 · a2) (cid:1) a1 · β2 (cid:1) a2 · β1
β = (β1, β2)
(cid:62)
For correctness, one can see that if ai = (mi − bi) and
βi ∈ ˆEnc(pk, bi) for some bi ∈ M, then
α ∈ ˆEnc (pk, (m1m2 − b1m2 − b2m1 + b1b2) + (b2m1 − b1b2)
+(b1m2 − b1b2)) = ˆEnc(pk, m1m2 − b1b2)
and β ∈ ( ˆEnc(pk, b1), ˆEnc(pk, b2))(cid:62).
Intuitively, the ciphertext modiﬁcation step above can
be seen as a 2-out-of-2 asymmetric secret sharing of the
8Here we slightly abuse notation as the symbol · is also used
to denote multiplication in the ring M.
message, as, in order to be able to decrypt correctly, one
would need both the components of the ciphertext.
Add2 : On input two ciphertexts C1, C2, where ∀i = 1, 2,
Ci = (ai, βi) ∈ ˆC × ˆC2×(cid:96)i such that
)(cid:62)], this algorithm re-
βi = [(β(i)
, β(i)
2,(cid:96)i
turns a ciphertext C = (α, β) ∈ ˆC × ˆC2×((cid:96)1+(cid:96)2) computed
as follows:
2,1)(cid:62), . . . , (β(i)
1,1, β(i)
1,(cid:96)i
α = α1 (cid:1) α2,
β = [β1, β2]
k=1 b(i)
1,k · b(i)
j,k ∈ ˆEnc(pk, b(i)
j,k))j,k such that(cid:80)(cid:96)i
that(cid:80)(cid:96)1+(cid:96)2
For correctness, if αi ∈ ˆEnc(pk, mi−bi) and βi is a matrix
of (β(i)
2,k = bi,
then it is not hard to see that α ∈ ˆEnc(pk, (m1 + m2) −
(b1 + b2)) and β is a matrix of βj,k ∈ ˆEnc(pk, bj,k) such
cMult : On input a constant c ∈ M and a ciphertext C,
the algorithm works as follows. If C = β ∈ ˆC, it returns
a ciphertext C(cid:48) = c · β ∈ ˆC. The correctness of this
operation is straightforward.
If C = (α, β) ∈ ˆC × ˆC2×(cid:96) such that β = [(β1,1, β2,1)(cid:62), . . . ,
(β1,(cid:96), β2,(cid:96))(cid:62)], the algorithm returns a ciphertext C(cid:48) =
(α(cid:48), β(cid:48)) ∈ ˆC × ˆC2×(cid:96) computed as follows:
b1,k · b2,k = b1 + b2.
k=1
(cid:48)
(cid:48)
α
β
= c · α,
= [(c · β1,1, β2,1)
(cid:62)
, . . . , (c · β1,(cid:96), β2,(cid:96))
(cid:62)
]
To see the correctness of ciphertexts obtained through
cMult2, if α ∈ ˆEnc(pk, m− b) and β is a matrix of (βj,k ∈
k=1 b1,k · b2,k = b, then it is
not hard to see that α(cid:48) ∈ ˆEnc(pk, cm − cb) and β(cid:48) is a
matrix of β(cid:48)
2,k =
ˆEnc(pk, bj,k))j,k such that(cid:80)(cid:96)
β2,k ∈ ˆEnc(pk, b2,k). Hence,(cid:80)(cid:96)
1,k ∈ ˆEnc(pk, cb1,k) and β(cid:48)
k=1 c · b1,k · b2,k = c · b.
j,k such that β(cid:48)
Dec(sk, C): If C = β ∈ ˆC, the algorithm simply outputs
m ← ˆDec(sk, β). On the other hand, if C = (α, β) ∈
ˆC × ˆC2×(cid:96), the algorithm outputs
(cid:33)
(cid:32) (cid:96)(cid:88)
i=1
m ← ˆDec(α) +
ˆDec(sk, β1,i) · ˆDec(sk, β2,i)
.
Before concluding the description of the scheme, we de-
scribe how to perform ciphertext re-randomization. Namely,
we give a procedure ReRand that takes as input a ciphertext
C ∈ ˆC × ˆC2×(cid:96) encrypting some message m, using random
pad b, and outputs a new encryption of m padded with a
fresh random b(cid:48). We stress that such re-randomization is
crucial to achieve circuit privacy which would not be pos-
sible by using only the re-randomization of the underlying
linearly-homomorphic scheme.
ReRand(pk, C): On input a ciphertext C, if C = β ∈ ˆC
simply run the re-randomization procedure of HE. Else
if C = (α, β) ∈ ˆC × ˆC2×(cid:96) the algorithm chooses random
˜b $← M2×(cid:96) and outputs C(cid:48) = (α(cid:48), β(cid:48)) computed as follows
1. For i = 1 to (cid:96), compute
(cid:17) (cid:1) (−˜b2,i) · β1,i (cid:1) (−˜b1,i) · β2,i
(cid:16)
pk,−(˜b1,i · ˜b2,i)
i=1 γi ∈ ˆC
γi = ˆEnc
2. Set α(cid:48) ← α +(cid:80)(cid:96)
with b =(cid:80)(cid:96)
j,i ← βj,i(cid:1) ˆEnc(pk, ˜bj,i).
3. For i = 1 to (cid:96) and j = 1, 2, set β(cid:48)
To see correctness, ﬁrst assume that α ∈ ˆEnc(pk, m − b)
i=1 b1,i · b2,i and βj,i ∈ ˆEnc(pk, bj,i).
1523(cid:16)
(cid:17)
Then we have γi ∈ ˆEnc
j,i ∈ ˆEnc(pk, b(cid:48)
β(cid:48)
j,i) with b(cid:48)
α(cid:48) ∈ ˆEnc(pk, m − b(cid:48)) where
pk,−(˜b1,i˜b2,i + ˜b1,ib2,i + b1,i˜b2,i)
,
j,i = bj,i +˜bj,i. Thus we can write
(cid:48)
b
= b +
˜b1,i · ˜b2,i + ˜b1,i · b2,i + b1,i · ˜b2,i
(cid:96)(cid:88)
i=1
(cid:96)(cid:88)
(cid:96)(cid:88)
i=1
=
=
b1,i · b2,i + ˜b1,i · ˜b2,i + ˜b1,i · b2,i + b1,i · ˜b2,i
(cid:96)(cid:88)
(b1,i + ˜b1,i) · (b2,i + ˜b2,i) =
1,i · b
(cid:48)
(cid:48)
2,i
b
i=1
i=1
j,i) ∈ M2×(cid:96).
Therefore, α is a valid encryption of m under a completely
fresh pad (b(cid:48)
Note that we are assuming the underlying scheme ˆHE to
be circuit private. This, informally, means that all homo-
morphic operations involving ˆHE ciphertexts (e.g., additions
(cid:1) and multiplication by constants) hide the function.
The correctness of the scheme HE follows from the cor-
rectness of ˆHE, the fact that its message space M is a ﬁnite
ring, and by following the observations made along our de-