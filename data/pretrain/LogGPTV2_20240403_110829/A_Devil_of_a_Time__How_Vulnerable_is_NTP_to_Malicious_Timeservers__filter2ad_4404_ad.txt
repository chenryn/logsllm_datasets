number of timeservers an attacker needs to inject at a certain
region so that the aggregated weight of its injected timeservers
be more than half the total weight of timeservers in that
region. This would imply that (in expectation) the set of
servers assigned to a client by the pool is dominated by the
attacker. The results are shown in Fig 11. Note the diversity
across different regions, which reﬂects the different netspeed
distributions in different regions. Observe also that by injecting
10s of (properly conﬁgured) timeservers in regions such as
Canada and UK, an attacker can guarantee that (in expectation)
most of the timeservers assigned to a client by the pool be the
attacker’s.
VI. TOWARDS BETTER SECURITY
After highlighting NTP’s high vulnerability to malicious
servers, we now turn our attention to identifying possible ways
forward. To this end, we ﬁrst outline the requirements from
any security solution and explain why previously considered
approaches fall short of achieving these. We then discuss
an alternative, more secure, methodology, which we view as
a promising ﬁrst step. Our proposed approach is based on
coupling recent proposals for security-enhanced NTP clients,
namely,
the Chronos NTP client [6], with a more secure
scheme for assigning timeservers to clients, and is compatible
with current efforts for standardizing Chronos by the IETF.
A. Requirements from Any Solution
Any solution for NTP’s alarming vulnerability to malicious
servers must satisfy three basic requirements: (1) preserve
the time accuracy and precision of today’s NTP, (2) respect
today’s load distribution over timeservers, and (3) enhance
NTP’s security against malicious servers.
Preserve NTP’s time accuracy and precision. Time accuracy
of an NTP client refers to the proximity of the local time
at a client to the Coordinated Universal Time (UTC). Time
precision of a client refers to the consistency of clock readings
over time. For instance, a clock whose local
time jitters
uniformly at random around the UTC might be accurate (if
realized times are sufﬁciently close to the UTC) but not
precise. In contrast, a clock whose time progresses linearly,
might be precise, but not accurate (for instance, if the clock’s
local time progresses twice as fast as the actual time; increasing
local time by 2δt in every δt time interval). Both accuracy and
precision are important for the correct and secure operation of
different applications. Naturally, a solution for NTP’s security
problems will ideally not come at the expense of interfering
with NTP’s primary objective—providing accurate and precise
times.
Figure 11: Required number of injected servers to constitute
over 50% of the total weight of all timeservers in the region.
to discard timeservers with “unreasonable” strata (higher than
16 [45], [46]). The difference in numbers across regions can be
explained by the differences in the total number of timeservers
per client across regions.
The netspeed parameter. The speciﬁed “netspeed” of a
timeserver in the NTP pool is correlated with the volume
of NTP clients directed to the timeserver by the timeserver
pool, with higher netspeed yielding higher probability that the
timeserver be assigned to a client by the pool. Speciﬁcally,
suppose that the timeserver pool for a certain region, say, the
US, consists of n timeservers, and each timeserver i’s speciﬁed
netspeed is wi. When contacted by an NTP client in the US,
the NTP pool will select r timeservers to assign to the client as
follows: the ﬁrst timeserver to assign to the client is selected by
sampling a single timeserver from the n timeservers according
to the probability distribution in which each timeserver j’s
probability of being selected equals its proportional weight
wj
; the next timeserver is then similarly selected from the
remaining n − 1 timeservers according to the proportional
weights after the removal of the ﬁrst timeserver, and so on
until r timeservers are selected. See [16]. Our experiments
with different values of netspeed validate the above.
Σiwi
Conﬁguring the netspeed to be high is highly effective. As
evident from the above discussion, by conﬁguring the netspeed
parameter to be high, a timeserver can drastically increase the
number of clients directed to it by the timeserver pool. To
illustrate this point, we contrast the results in Fig. 8 with the
results of the same experiments with the netspeed set to be the
default value. Fig. 9 plots the averaged results for each region
across 24 hours of measurements. The difference in the number
of requests from clients between the two ﬁgures demonstrates
the huge beneﬁts for the attacker from conﬁguring its netspeed
to be high.
We next explore the probability that a timeserver intro-
duced by us into the NTP timeserver pool be assigned to
a client
in its region. To this end, we launched an NTP
timeserver on Amazon AWS in different regions, as in the
above experiments, set its netspeed to 1000x the default value
(i.e., to the maximum permissible value), and queried the NTP
10
As our results in Sections IV and V show, simply relying on a
large number of servers that the client can potentially sync with
is not enough. First, inter-dependencies between timeservers
could imply that even an attacker in direct control of a fairly
small fraction of the timeservers can impact time at a huge
fraction of the servers. Second, by injecting sufﬁciently many
servers into the pool, the attacker can easily dominate the set
of timeservers available to the client.
Suboptimal time precision. Even if all
timeservers with
which the Chronos client communicates are honest, the pe-
riodic transition between different subsets of servers will
inevitably cause local time jitters due to variations in local time
readings across different servers, as well as different network
latencies between the client and the different servers queried.
(This should be contrasted with today’s NTPv4-clients, which
stick with the timeservers with which they synchronize for
long stretches of time to avoid bad time precision).
Overloading timeservers. We show that, if deployed at scale,
the above discussed simple heuristic for assigning servers to
clients, runs into the risk of inducing signiﬁcant deviations
from today’s load distribution, in which a large fraction of the
timeservers experiences over 200x increase in load. Intuitively,
this is because today’s practice of assigning timeservers to NTP
clients with probability that is proportional to their netspeed
values (see Section III-B) is at odds with Chronos’ uniform
distribution of load across large sets of servers, irrespective
of their netspeed values (which is needed for establishing its
security guarantees [6]). Consequently, if the sets of servers
with which Chronos clients synchronize, and the frequency
of synchronization, are not chosen with care, low-netspeed
servers will experience a huge surge in load.
Estimating what the exact implications of high rise in load
on a substantial fraction of the server pool is hard as we do not
have visibility into NTP servers’ hardware and external (non-
NTP-related) load. That said, we point out that: (1) Beyond
the risk of NTP servers crashing, drastic rise in load can also
harm time accuracy due to the local computational burden
at servers. As the volume of NTP trafﬁc keeps rising over
time, these risks might be further aggravated. (2) The netspeed
parameter enables those volunteering timeservers to the NTP
pool to control the (relative) number of NTP queries they will
support, thus keeping the entry bar low for new volunteers and
preventing the over-centralization of the system. Eliminating
this control might prove detrimental in this respect.
To establish that using the simple heuristic proposed in [6]
to assign timeserver sets to Chronos clients is problematic, we
ﬁrst empirically infer today’s distribution of netspeed values
across timeservers. To this end, we repeatedly issued DNS
queries to the NTP timeserver pool (every two minutes over
the course of two weeks) to obtain timeservers in Europe (via
europe.pool.ntp.org) and in the US (via us.pool.ntp.org). The
ratio between the number of responses in which a timeserver
appears and the total number of responses approximates the
timeserver’s proportional weight. The distributions of netspeed
values of timeservers in Europe and the US are presented in
Fig. 12. Netspeed value of 1 in our ﬁgures stands for the
default netspeed value whereas 1000 represents 1000x the
default value (the maximum permitted). As can be seen in these
Figure 12: Distribution of timeservers’ netspeeds.
Respect today’s load distribution across timeservers. The
netspeed parameter, discussed in Section V, is used by the NTP
timeserver pool to load balance across timeservers, yielding
load distributions in which some timeservers’ probability of
being assigned to clients (and so the expected number of
clients that sync with these servers) is higher by three orders of
magnitude than others. This accounts for differences in hard-
ware/capacity across timeservers, and also reﬂects timeserver
contributors’ willingness to support different volumes of NTP
queries. Deviating from the current load distribution by “too
much” could lead to NTP servers being overloaded, resulting
in inaccurate times (due to local burden) or even server crashes.
Improve security. Naturally, any solution should address the
attack vectors presented in the previous sections.
B. A Failed Simple Server-Assignment Scheme
The Chronos NTP client [6] improves over NTPv4’s al-
gorithm for computing local
time by applying a provably
secure approximate-agreement algorithm (see Appendix B) to
(randomly sampled) clock readings from a large timeserver set.
In [6], a simple heuristic for generating such a server set for
a Chronos client is presented. Speciﬁcally, the Chronos client
repeatedly issues DNS queries to the NTP pool for servers
to sync with, aggregating the IP addresses of servers received
in response until the number of distinct addresses exceeds a
desired threshold (say, several 100s of timeservers).
As we argue below, however, this heuristic for selecting
servers to sync with for Chronos clients leaves such clients
unprotected from the attack vectors discussed earlier and will
increase the load on a non-negligible fraction of NTP servers
by orders of magnitude. In addition, Chronos’ synchronization
process, which is optimized for accuracy, can potentially
lead to suboptimal precision. We next discuss why this is.
We then (in Section VI-C) explain how Chronos’ client-side
synchronization process can be coupled with an appropriate
server assignment scheme in a manner that meets our three
goals for NTP security (as described in Section VI-A).)
Security vulnerabilities. Chronos’ security guarantees are
conditioned on the attacker not controlling “too big” a fraction
of the server set the client can sync with. The simple heuristic
for assigning servers to Chronos clients proposed in [6], while
yielding a large server set for a client, is oblivious to the
dependencies between these servers and to their reputation.
11
too far apart, which is indicative of an attack, the watchdog
takes over and updates the local time (until such a time when
the two computed times are close again).
We next discuss a few important details concerning this
scheme.
Why Ananke? Which timeservers should Ananke contain?
Since the local time at stratum 1 timeservers in the pool is not
dependent (by deﬁnition) on other NTP timeservers in the pool,
syncing with the timeservers in Ananke circumvents the inter-
server-dependency-induced security vulnerabilities discussed
in Section IV. That is, an attacker in control of a subset of
Ananke cannot impact time at any of the other servers in
Ananke. This, however, does not prevent timeserver-injection
attacks of the form discussed in Section V.
Ananke should not automatically consist of all stratum
1 timeservers in the pool. We argue that
the addition of
timeservers into Ananke should be performed much more
cautiously than the addition of timeservers to other pool zones
(which can remain unaltered), and should involve some manual
auditing process (e.g., incorporating timeservers demonstrated
to belong to reputable organizations). This will signiﬁcantly
raise the bar for an attacker while not impacting the pool’s
ability to continue expanding (as non-Ananke timeservers can
still be easily registered to the pool). In addition, servers in
Ananke should have acceptable compute power and capacity.
As a ﬁrst step, we envision this manual auditing as being
done by the NTP pool project itself to offer a “secure mode”
of operation to interested parties. In the long run, global
authorities (such as IANA) could take responsibility for this
(as with other roots-of-trust for core Internet protocols).
How to avoid overloading the timeservers in Ananke?
Observe that today’s load distribution over timeservers not in
Ananke is trivially preserved since these are only relevant for
the primary synchronization processes (which are exactly as
in today’s NTPv4 time synchronization). To avoid overloading
the timeservers in Ananke, syncing with these timeservers in
our scheme occurs much less frequently than in the primary
synchronization process. We will discuss how this is achieved
while attaining good security guarantees in Section VI-F.
Today’s NTP time accuracy and precision are preserved.
Observe that the time accuracy and precision of today’s NTP
clients are trivially preserved by our scheme (since the primary
processes are identical to NTPv4 synchronization).
Remark: Simply applying Chronos to the NTP pool’s
stratum 1 servers is not good enough. Our solution should
be contrasted with simply applying Chronos to all stratum 1
servers (without imposing two synchronization processes that
operate at different time scales and are applied to different
sets of timeservers). Such a scheme, while simpler, suffers
from two signiﬁcant drawbacks: (1) Our empirical results
show that the distribution of netspeeds within a region is
fairly constant across strata in both the North America and
Europe, as shown in Fig. 14. In addition, stratum 1 servers
constitute around 11% and 13% of all servers in Europe and
the North America, respectively. Thus, if Chronos clients were
Figure 13: The expected overload experienced by timeservers
with (normalized) netspeed 1 under uniform sampling.
ﬁgures, a large fraction of all NTP timeservers have netspeeds
≤ 3 (almost 25% in Europe and 20% in the US) and over 50%
of the timeservers in both regions have netspeeds no higher
than 50.
Chronos’ uniform sampling of servers to sync with effec-
tively equalizes load across the timeserver set assigned to a
Chronos client. We next quantify the effects of wide adoption
of this scheme on load balancing if timeserver sets are assigned
using the simple heuristic considered in [6]. Fig. 13 presents
the multiplicative factor by which the load on a timeserver
with default netspeed in various regions (in which hundreds
of timeservers are available) would increase had timeservers
been sampled uniformly at random from all timeservers in the
region. Observe that in all considered regions, the timeservers
whose netspeed is 1, which constitute a large fraction of all
timeservers in the region, will suffer an increase of 200−300x.
Observe also that this is not easily addressed by adding more
timeservers to a certain region (that is, to the appropriate NTP
pool zone), as the current number of servers in that region
would have to be increased by two orders of magnitude for
today’s low-netspeed servers to not experience an increase in
load.
C. Overview of Our Approach
Our objective, as discussed in Section VI-A, is to enhance
NTP’s security against malicious servers while not adversely
impacting its time accuracy and precision, nor the distribution
of load across timeservers. Another important design goal is
preserving the ability of the pool to continue scaling through