### Number of Injected Timeservers Required for Attack

An attacker needs to inject a certain number of timeservers into a specific region to ensure that the aggregated weight of these injected timeservers exceeds half the total weight of all timeservers in that region. This would mean that, on average, the set of servers assigned to a client by the NTP pool would be dominated by the attacker. The results are presented in Figure 11, which highlights the diversity across different regions, reflecting the varying net speed distributions. For example, by injecting a few dozen properly configured timeservers in regions such as Canada and the UK, an attacker can ensure that most of the timeservers assigned to a client by the pool are controlled by the attacker.

### Towards Better Security

After highlighting the high vulnerability of NTP to malicious servers, we now focus on identifying potential solutions. We first outline the requirements for any security solution and explain why previously considered approaches fall short. We then discuss a more secure methodology, which we believe is a promising first step. Our proposed approach combines recent proposals for security-enhanced NTP clients, specifically the Chronos NTP client [6], with a more secure scheme for assigning timeservers to clients. This approach is compatible with current efforts to standardize Chronos by the IETF.

#### Requirements from Any Solution

Any solution to NTP's vulnerability to malicious servers must meet three basic requirements:
1. **Preserve Time Accuracy and Precision**: Ensure that the local time at the client remains close to Coordinated Universal Time (UTC) and that clock readings are consistent over time.
2. **Respect Load Distribution**: Maintain the current load distribution over timeservers.
3. **Enhance Security**: Improve NTP's security against malicious servers.

**Time Accuracy and Precision**: 
- **Accuracy** refers to the proximity of the local time to UTC.
- **Precision** refers to the consistency of clock readings over time.
- Both accuracy and precision are crucial for the correct and secure operation of various applications. A security solution should not compromise NTP's primary objective of providing accurate and precise time.

**Figure 11**: 
- Shows the required number of injected servers to constitute over 50% of the total weight of all timeservers in the region.
- Differences in numbers across regions can be attributed to the varying total number of timeservers per client in each region.

**Netspeed Parameter**:
- The specified "netspeed" of a timeserver in the NTP pool is correlated with the volume of NTP clients directed to the timeserver. Higher netspeed values increase the probability of a timeserver being assigned to a client.
- For a region like the US, if the pool consists of \( n \) timeservers, each with a specified netspeed \( w_i \), the NTP pool selects \( r \) timeservers for a client by sampling according to the proportional weights \( w_j \). This process continues until \( r \) timeservers are selected.
- Setting a high netspeed value significantly increases the number of clients directed to a timeserver, as shown in Figures 8 and 9.

**Consequences of High Netspeed**:
- Configuring a high netspeed value allows a timeserver to drastically increase the number of clients it serves, as demonstrated by our experiments.
- The difference in the number of requests from clients between high and default netspeed settings highlights the benefits for an attacker.

**Assigning Timeservers to Clients**:
- We explored the probability of a newly introduced timeserver being assigned to a client in its region by launching an NTP timeserver on Amazon AWS with a maximum permissible netspeed value and querying the NTP pool.
- Simply relying on a large number of servers is insufficient due to inter-dependencies between timeservers and the potential for an attacker to dominate the set of available timeservers.

**Suboptimal Time Precision**:
- Even if all timeservers are honest, periodic transitions between different subsets of servers can cause local time jitters, leading to suboptimal time precision.
- This contrasts with NTPv4-clients, which maintain long-term synchronization with a fixed set of timeservers to avoid such issues.

**Overloading Timeservers**:
- If deployed at scale, the simple heuristic for assigning servers to clients can lead to significant deviations from the current load distribution, causing some timeservers to experience over 200x increase in load.
- This is because today's practice of assigning timeservers based on their netspeed values is at odds with Chronos' uniform distribution of load, which is necessary for its security guarantees.
- High loads can harm time accuracy and potentially crash NTP servers, and eliminating the control provided by the netspeed parameter could be detrimental.

**Empirical Analysis**:
- We empirically inferred the current distribution of netspeed values across timeservers by issuing DNS queries to the NTP timeserver pool over two weeks.
- The distributions of netspeed values in Europe and the US are presented in Figure 12, showing a wide range of netspeed values.

**Respecting Todayâ€™s Load Distribution**:
- The netspeed parameter is used to balance the load across timeservers, with some servers having a much higher probability of being assigned to clients.
- Deviating too much from this distribution could lead to server overloads, resulting in inaccurate times or server crashes.

**Improving Security**:
- Any solution should address the attack vectors discussed in previous sections.

### A Failed Simple Server-Assignment Scheme

The Chronos NTP client [6] improves NTPv4's algorithm for computing local time by applying a provably secure approximate-agreement algorithm to randomly sampled clock readings from a large set of timeservers. However, the simple heuristic for generating such a server set leaves clients vulnerable to attacks and can significantly increase the load on a non-negligible fraction of NTP servers.

**Security Vulnerabilities**:
- Chronos' security guarantees depend on the attacker not controlling a large fraction of the server set. The simple heuristic is oblivious to server dependencies and reputations.

**Ananke Proposal**:
- Ananke is a set of trusted stratum 1 timeservers that clients can sync with to mitigate inter-server dependency-induced vulnerabilities.
- Adding timeservers to Ananke should involve a manual auditing process to ensure they belong to reputable organizations.
- Servers in Ananke should have adequate compute power and capacity.
- Syncing with Ananke timeservers occurs less frequently to avoid overloading them.

**Conclusion**:
- Our approach aims to enhance NTP's security while preserving time accuracy and precision and maintaining the current load distribution.
- This approach also preserves the ability of the NTP pool to continue scaling through the addition of new volunteers.