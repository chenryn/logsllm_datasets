监控
Sentinel节点3
每一个Sentinel节点会监控每
个Redis节点（3*3=9条链路）
Redis集群
主从
Master节点
丰从
复制
复制
Slave节点1
Slave节点2
Redis集群是一个标准的主从同步集群
春风阁讲堂出品
123
---
## Page 124
8.2.Sentinel工作原理
Sentinel中节点状态
主观下线
客观下线
选举新
原Master
Master
短暂的中断
1.每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他Sentinel实例发送一个PING命令
2.如果一个实例（instance)距离最后一次有效回复PING命令的时间超过down-after-milliseconds所指定的值，则这个实例会被Sentinel标记
为主观下线
3.如果一个Master被标记为主观下线，则正在监视这个Master的所有Sentinel要以每秒一次的频率确认Master是否进入了主观下线状态
4.若Master重新向Sentinel的PING命令返回有效回复，Master的主观下线状态就会被移除
5.当有足够数量的Sentinel（大于等于配置值）在指定的时间范围内确认Master的确进入了主观下线状态，则Master会被标记为客观下线
6.若没有足够数量的Sentinel同意Master已经下线，Master的客观下线状态就会被移除
7.Master客观下线后，会在Master所在的Slave 中进行重新选取Master
注意：哨兵本身作用于集群状态的高可用，作用于master节点挂掉后的主备切换，不能解决redis本身数据不一致的问题
春风阁讲堂出品
124
---
## Page 125
8.3.Sentinel环境搭建
8.3.1.环境需求简介
序号
端口号
说明
1
6378
2
6379
主从环境Redis(1主2从)
3
6380
4
26378
5
26379
Sentinel集群（3节点）
6
26380
通常sentinel部署的节点个数为奇数，至少3个起步
春风阁讲堂出品
125
---
## Page 126
8.3.2.主从集群搭建
搭建三节点集都跟，参考主从集群环境搭建方式，这里不再细说，6379（主)--6378（从)--6380（从）
8.3.3.Sentinel集群
1.Sentinel 单节点配置 sentinel_.conf
port 26378
daemonize yes
pidfile/home/xiangsl/redis/run/sentinel_26378.pid
logfile /home/xiangsl/redis/log/sentinel_26378.1log
dir /home/xiangsl/redis/data/
#如果实例设置了密码
 1onst ssd-qne pouuss
#客观下线的判断节点数
sentinel monitor mymaster 192.168.128.167 6379 2
#主观下线的等待时间
sentinel down-after-milliseconds mymaster 30000
#限制从服务器向新主发起复制的并发数
sentinel parallel-syncs mymaster 1
#故障转移超时时间
sentinel failover-timeout mymaster 180000
春风阁讲堂出品
126
---
## Page 127
2.Sentinel集群节点配置
红色部分按照端口规则修改
port 26378
daemonize yes
pidfile /home/xiangsl/redis/run/sentinel_26378.pid
logfile /home/xiangs/redis/log/sentinel_26378.1og
dir /home/xiangsl/redis/data/
#如果实例设置了密码
 stu ssd-qne qouus
#客观下线的判断节点数
sentinel monitor mymaster 192.168.128.167 6379 2
#主观下线的等待时间
sentinel down-after-milliseconds mymaster 30000
#限制从服务器向新主发起复制的并发数
sentinel parallel-syncs mymaster 1
#故障转移超时时间
sentinel failover-timeout mymaster 180000
春风阁讲堂出品
127
---
## Page 128
8.3.4.集群启动
将三个sentinel进程分别启动（注意在不同的目录下启动，conf文件的目录路径不一样）
redis-sentinel conf/sentinel_26378.conf
redis-sentinel conf/sentinel_26379.conf
redis-sentinel conf/sentinel_26380.conf
等价以下命令
redis-server conf/sentinel_26378.conf --sentinel
redis-server conf/sentinel_26379.conf --sentinel
redis-server conf/sentinel_26380.conf --sentinel
春风阁讲堂出品
128
---
## Page 129
8.4.集群健康检查
8.4.1.进程检查
A.sentinel进程
[xiangsl@crm167
redis]$ps-ef|grep sentinel
xiangsl
15754
1
019:25？
00:00:00 redis-sentinel*:26378
[sentinel]
xiangsl
15798
1
019:25？
00:00:00 redis-sentinel*:26379
[sentinel]
xiangsl
15809
019:25
？
00:00:00 redis-sentinel *:26380 [sentinel]
xiangsl
16587
6906
019:28 pts/0
00:00:00grep--color=autosentinel
[xiangsl@crm167
redis]$
B.redis进程
[xiangsl@crm167
~]$ps-ef|grep
redis-server
xiangsl
7770
1
05月10
？
00:21:29redis-server 0.0.0.0:6378
xiangsl
21155
20861
023:10
pts/2
00:00:00grep
--color=autoredis-server
xiangsl
29847
1
05月10
？
00:20:02redis-server0.0.0.0:6379
xiangsl
29860
05月10？
00:20:44redis-server0.0.0.0:6380
[xiangsl@crm167
~]$
[xiangsl@crm167~]$
春风阁讲堂出品
129
---
## Page 130
8.4.2.配置检查
sentinel_xxx.conf配置在启动后会生成一段信息
#GeneratedbyCONFIGREWRITE
每次启动会重新生成
protected-modeno
user defaulton nopass sanitize-payload~*&*+@all
sentinelmyid0d017a3e98eed8a8ccb51234b4009b73896f8249
sentinel config-epoch mymaster 0
sentinelleader-epoch mymaster0
sentinelcurrent-epoch0
sentinel known-replica mymaster 192.168.128.167 6380
sentinelknown-replicamymaster192.168.128.1676378
春风阁讲堂出品
130
---
## Page 131
8.4.3.命令检查
A.inforeplication查看主从关系
redis-cli -p 6379 info Replication
[xiangsl@crml67redis]$redis-cli-p 6379infoReplication
#Replication
role:master
connected_slaves:2
slave0:ip=192.168.128.167,p0rt=6380,state=0nline,offset=113990765,lag=0
slave1:ip=192.168.128.167,port=6378,state=0nline,offset=113990475,lag=1
master_failover_state:no-failover
master_replid:fdadb6aed27ddd9fb5c5090f94fc2ff50151ddc0
master_replid2:bee5f0497f2608c0a4fecbc27dd310c0d2aa6916
B.sentinel master查看主信息
SENTINEL master mymaster
redis-cli -p 26379 sentinel master mymaster
[xiangsl@crml67redis]$redis-cli-p 26379 sentinel master mymaster
1）"name"
2)
"mymaster"
3)
"ip"
4)
"192.168.128.167"
5)
"port"
6)
6379"
7)
"runid"
8)
"2889de8f0dd6beb8abc3443ac3817a12ddd9b704"
9)
"flags"
10)
"master"
春风阁讲堂出品
131
---
## Page 132
C.sentinelreplicas查看从信息
SENTINEL replicas mymaster
redis-cli -p 26379 sentinel replicas mymaster
[xiangsl@crm167 redis]$ redis-cli -p 26379 sentinel replicas mymaster
1)
1)
"name"
2)
"192.168.128.167:6378"
3)
"ip"
4)
"192.168.128.167"
5)
"port"
6)
"6378"
7
"runid"
8)
"033862464c1f07348378e0e95f05a41d0202db3f"
9)
"flags"
10)
"slave"
2)
1)
"name"
2)
"192.168.128.167:6380"
3)
"ip"
4)
"192.168.128.167"
5）
"port"
6)
"6380"
7)
"runid"
8)
"82b49b95b5c9d1def8063b43071c8e5d51b0f6b3
9)
"flags"
10)
"slave"
11)
"link-pending-commands"
12)
0
13)"link-refcount"
春风阁讲堂出品
132
---
## Page 133
8.5.集群高可用验证
8.5.1.从节点故障
序号
端口号
动作
说明
1
6378(从)
kill进程
2
6379(主)
主从环境Redis(1主2从）
3
)089
kill进程
4
26378
5
26379
Sentinel集群(3节点)
6
26380
1.
验证前先检查redis-server节点和sentinel节点，确保集群是正常运行
2.
kill 掉 6380 的 redis-server 节点
在主节点写入数据seta63801
检查主节点和剩下的从节点是否正常
继续kill掉6378的redis-server 节点
6.
在主节点写入数据 set a63781
检查主节点是否正常
8.恢复所有从节点，验证数据是否正常
春风阁讲堂出品
133
---
## Page 134
8.5.2.主节点故障
序号
端口号
动作
说明
1
6378(从)
2
6379(主)
先kill，再恢复
主从环境Redis（1主2从）
3
(089
4
26378
5
26379
Sentinel集群（3节点）
6
26380
验证前先检查redis-server节点和 sentinel节点，确保集群是正常运行
2.
kill掉6379 的 redis-server 节点
3.
检查集群的主节点是否会发生故障转移
恢复 6379 的 redis-server
再检查集群主从节点状态
主节点故障转移时，哪些配置会修改？
1.redis_.conf中的replicaof 主机端口会生发改变
2.sentinel_.conf中的节点信息会发生改变
春风阁讲堂出品
134
---
## Page 135
8.6.集群常见管理
8.6.1.启停管理
A.启动时：
先启redis进程，再启sentinel进程（按顺序可防止主从切换）
redis-server redis-{port).conf
redis-sentinelconf/sentinel_port}.conf
B.停止时：
先停sentinel进程，再停redis进程（按顺序可防止主从切换）
redis-cli -p 26378 shutdown
redis-cli -p 6378 shutdown
或者
kill 进程号
和复制丢失数据的情况
8.6.2.主从关系
参考集群健康检查中的命令
春风阁讲堂出品
135
---
## Page 136
8.6.3.在线扩容
redis在线扩容分为以下几种场景：
场景
场景
场景说明
扩容步骤