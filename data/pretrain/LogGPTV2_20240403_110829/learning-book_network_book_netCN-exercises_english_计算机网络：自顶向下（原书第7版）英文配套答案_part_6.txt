two data messages (to get things going). A timeline trace for the sender and receiver
recovering from a lost packet is shown below:
rdtr
rrupt(rcvpkt)
sender
142
waitfo
(rdt_re(revpkt)战notcorupt(reypkt)
Odd
ACK
trev（revpkt)
I (rdt_row(rovpkt) && comupt(rcvpkt)
waitfor
pair of
ACKs
rdtrcv(revpk)
pupt(ropt)
&: has_ack(seqnu
vaitfor
corrupt(revpkt)
d(sndpkt, seqnum)
upb(rovpkt)
receiver
dt_rev(revpkt)&&c
rupt(rcvpkt)
vaitfo
odd
(rdt_rev(rovpkt) && corrupt(revpkt)
data
dtro(ropkt)
upttrcvpkt
udt_send(ACK, seqnum)
Gidaouaap
rrupt(rcvpkt)
(rdt_rcv(revpkt) && n
corTupt(rcvpkt)
85x1=sem
dt_snd(AcK,seqnum
end(ACK, seqnum+1)
waitfor
Jdt_send(ACK,x)
data
even
kt) && notcorrupt(rcvpkt)
rcv(rcvpkt)&&corrupt(rcvpkt)
nd(ACK.sec
Figure 2: Sender and receiver for Problem (3.18)
Sender
Receiver
make pair (0,1)
send packet 0
---
## Page 51
Packet 0 drops
send packet 1
receive packet 1
buffer packet 1
send ACK 1
receive ACK 1
(timeout)
resend packet 0
receive packet0
deliver pair (0,1)
send ACK 0
receive ACK 0
Problem 19
This problem is a variation on the simple stop and wait protocol (rdt3.0). Because the
channel may lose messages and because the sender may resend a message that one of the
receivers has already received (either because of a premature timeout or because the other
receiver has yet to receive the data correctly), sequence numbers are needed. As in
rdt3.0, a O-bit sequence number will suffice here.
The sender and receiver FSM are shown in Figure 3. In this problem, the sender state
indicates whether the sender has received an ACK from B (only), from C (only) or from
neither C nor B. The receiver state indicates which sequence number the receiver is
waiting for.
---
## Page 52
sender
start_time
nd
timeout
(rdt_rcv(rcvpkt) && corrupt(revpkt)
ACK
rcv(rcvpkt）&&notcorrupt(rcpkt)
rcv(rcvpkt)
&Is_ack（seqnum,B)
waitfor
B or C
ACK
rdtrer(epkt)
mB)
rrupt(rcvpkt)
I(rde(rcpkt）&&oorupt(rcpkt)
tim
start_tir
wait for
ACK
otcorrupt(revpkt)
m
receiverB
(rdt_rcv(rcvpkt) && corrupt(revpkt)
rdtrev(revpk)
waitfor
udt_send（ACK,sec
data
m,B)
(rdt_rev(revpkt)
seqnumy
cvpkt)
udt_send(ACK, x,B)
Figure 3. Sender and receiver for Problem 3.19(Problem 19)
---
## Page 53
Problem 20
rdt_rcv(rcvpkt)&&from_B(rcvpkt)
rdt_rev(revpkt)&&from_A(rcvpkt)
A
A
rdt_rcv(rcvpkt)&&(corrupt(rcvpkt)
Wait
[has_seq1(revpkt)&&from_B(rcvpkt)
for 0
Wait
rdt_rev(revpkt)&&(corrupt(revpkt)
for 0
[has_seq1(rcvpkt))&&from_A(rcvpkt)
from A
from B
sndpkt=make_pkt(ACK, 1, checksum)
udt_send(B,sndpkt)
sndpkt=make_pkt(ACK, 1, checksum)
udt_send(A,sndpkt)
rdt_rcv(rcvpkt)&&not_corupt(rcvpkt)&&
has_seq0(rcvpkt)&&from_A(rcvpkt)
rdt_rev(revpkt)&&not_corrupt(revpkt)&&
extract(revpkt,data)
has_seq0(revpkt)&&from_B(rcvpkt)
(eep)eeponp
sndpkt=make_pkt(ACK, 0, checks
(eepaydsoax
udt_send(A,sndpkt)
deliver_data(data)
sndpktmake_pkt(ACK,0,checksum)
udt_send(B,sndpkt)
rdt_rev(revpkt)&&not_corrupt(revpkt)
&&has_seql(rcvpkt)&&from_B(rcvpkt)
extract(revpkt,data)
rdt_rcv(revpkt)&&not_corrupt(revpkt)&&ha
s_seql(revpkt)&from_A(rcvpkt)
deliver_data(data)
sndpkt=make_pkt(ACK,1,checksum)
extract(rcvpkt,data)
udt_send(B,sndpkt)
deliver_data(data)
rdt_rcv(rcvpkt)&&from_B(rcvpkt)
sndpkt=make_pkt(ACK,1,checksum)
udt_send(A,sndpkt)
A
Wait for
rdt_rev(revpkt)&&(corrupt(revpkt)
1 from
B
Wait
[has_seq0(rcvpkt))&&from_B(rcvpkt)
for 1
from A
sndpkt=make_pkt(ACK, 0, checksum)
udt_send(B,sndpkt)
rdt_rev(revpkt)&&from_A(rcvpkt)
A
rdt_rev(rcvpkt)&&(corrupt(rcvpkt)
[has_seq0(rcvpkt))&&from_A(rcvpkt)
sndpkt=make_pkt(ACK, 0, checksum)
udt_send(A,sndpkt)
Figure 4: Receiver side FSM for 3.18
---
## Page 54
Sender
The sender side FSM is exactly same as given in Figure 3.15 in text
Problem21
Because the A-to-B channel can lose request messages, A will need to timeout and
retransmit its request messages (to be able to recover from loss). Because the channel
delays are variable and unknown, it is possible that A will send duplicate requests (i.e.,
resend a request message that has already been received by B). To be able to detect
duplicate request messages, the protocol will use sequence numbers. A 1-bit sequence
number will suffice for a stop-and-wait type of request/response protocol.
A (the requestor) has 4 states:
●"Wait for Request 0 from above.” Here the requestor is waiting for a call from
above to request a unit of data. When it receives a request from above, it sends a
request message, R0, to B, starts a timer and makes a transition to the *Wait for
anything it receives from B.
·“Wait for Do". Here the requestor is waiting for a Do data message from B. A
message, restarts the timer and remains in this state. If a D0 message is received
from B, A stops the time and transits to the “Wait for Request 1 from above*
state. If A receives a D1 data message while in this state, it is ignored.
·“Wait for Request 1 from above." Here the requestor is again waiting for a call
from above to request a unit of data. When it receives a request from above, it
sends a request message, R1, to B, starts a timer and makes a transition to the
ignores anything it receives from B.
·“Wait for D1". Here the requestor is waiting for a D1 data message from B. A
timer is always running in this state. If the timer expires, A sends another R1
message, restarts the timer and remains in this state. If a D1 message is received
from B, A stops the timer and transits to the "Wait for Request 0 from above*
state. If A receives a D0 data message while in this state, it is ignored.
The data supplier (B) has only two states:
·“Send Do." In this state, B continues to respond to received R0 messages by
sending D0, and then remaining in this state. If B receives a R1 message, then it
knows its D0 message has been received correctly. It thus discards this D0 data
(since it has been received at the other side) and then transits to the “Send D1"
state, where it will use D1 to send the next requested piece of data.
---
## Page 55
·“Send D1." In this state, B continues to respond to received R1 messages by
sending D1, and then remaining in this state. If B receives a R1 message, then it
knows its D1 message has been received correctly and thus transits to the “Send
D1" state.
Problem22
a)Here we have a window size of N=3. Suppose the receiver has received packet k-1,
and has ACKed that and all other preceding packets. If all of these ACK's have been
received by sender, then sender's window is [k, k+N-1]. Suppose next that none of
the ACKs have been received at the sender. In this second case, the sender's window
contains k-1 and the N packets up to and including k-1. The sender's window is thus
somewhere in the range [k-N,k].
b) If the receiver is waiting for packet k, then it has received (and ACKed) packet k-1
and the N-1 packets before that. If none of those N ACKs have been yet received by
the sender, then ACK messages with values of [k-N,k-1] may still be propagating
back.Because the sender has sent packets [k-N, k-1], it must be the case that the
sender has already received an ACK for k-N-1. Once the receiver has sent an ACK
for k-N-1 it will never send an ACK that is less that k-N-1. Thus the range of in-
flight ACK values can range from k-N-1 to k-1.
Problem23
In order to avoid the scenario of Figure 3.27, we want to avoid having the leading edge of
the receiver's window (i.e., the one with the “"highest" sequence number) wrap around in
the sequence number space and overlap with the trailing edge (the one with the "lowest"
large enough to fit the entire receiver window and the entire sender window without this
overlap condition. So - we need to determine how large a range of sequence numbers can
be covered at any given time by the receiver and sender windows.
Suppose that the lowest-sequence number that the receiver is waiting for is packet m. In
this case, it's window is [m,m+w-1] and it has received (and ACKed) packet m-1 and the
w-1 packets before that, where w is the size of the window. If none of those w ACKs
have been yet received by the sender, then ACK messages with values of [m-w,m-1] may
still be propagating back. If no ACKs with these ACK numbers have been received by
the sender, then the sender's window would be [m-w,m-1].
Thus, the lower edge of the sender's window is m-w, and the leading edge of the
receivers window is m+w-1. In order for the leading edge of the receiver's window to not
overlap with the trailing edge of the sender's window, the sequence number space must
---
## Page 56
thus be big enough to accommodate 2w sequence numbers. That is, the sequence number
space must be at least twice as large as the window size, k ≥ 2w.
Problem24
a)True. Suppose the sender has a window size of 3 and sends packets 1, 2, 3 at r0. At
r1 (/l > r0) the receiver ACKS 1, 2, 3. At r2 (r2 > rl) the sender times out and
resends 1, 2, 3. At r3 the receiver receives the duplicates and re-acknowledges 1, 2,
3. At 4 the sender receives the ACKs that the receiver sent at rl and advances its
window to 4, 5, 6. At 15 the sender receives the ACKs 1, 2, 3 the receiver sent at 2 .
These ACKs are outside its window.
b)True. By essentially the same scenario as in (a).
c)True.
d) True. Note that with a window size of 1, SR, GBN, and the alternating bit protocol
are functionally equivalent. The window size of 1 precludes the possibility of out-of-
this situation, since it can only refer to the single packet within the window.
Problem25
a) Consider sending an application message over a transport protocol. With TCP, the
application writes data to the connection send buffer and TCP will grab bytes without
necessarily putting a single message in the TCP segment; TCP may put more or less
than a single message in a segment. UDP, on the other hand, encapsulates in a
segment whatever the application gives it; so that, if the application gives UDP an
application message, this message will be the payload of the UDP segment. Thus,
with UDP, an application has more control of what data is sent in a segment.
b) With TCP, due to flow control and congestion control, there may be significant delay
from the time when an application writes data to its send buffer until when the data is
given to the network layer. UDP does not have delays due to flow control and
congestion control.
Problem26
There are 23 = 4,294,967,296 possible sequence numbers.
a)The sequence number does not increment by one with each segment. Rather, it
increments by the number of bytes of data sent. So the size of the MSS is irrelevant -
the maximum size file that can be sent from A to B is simply the number of bytes
---
## Page 57
536
8,012,999
b)The number of segments is
 66 bytes of header get added to each
segment giving a total of 528,857,934 bytes of header. The total number of bytes
bytes.
Thus it would take 249 seconds to transmit the file over a 155~Mbps link.
Problem 27
a) In the second segment from Host A to B, the sequence number is 207, source port
number is 302 and destination port number is 80.
b) If the first segment arrives before the second, in the acknowledgement of the first
arriving segment, the acknowledgement number is 207, the source port number is 80
and the destination port number is 302.
c)If the second segment arrives before the first segment, in the acknowledgement of the
first arriving segment, the acknowledgement number is 127, indicating that it is still
waiting for bytes 127 and onwards.
(p
Host A
Host B
Seq = 127, 80 bytes
Timeout
Seq = 207,40-bytes
=
interval
Ack = 247
Seq = 127, 80 bytes
Timeout
ACk247
interval
Problem28
Since the link capacity is only 100 Mbps, so host A's sending rate can be at most
100Mbps. Still, host A sends data into the receive buffer faster than Host B can remove
data from the buffer. The receive buffer fills up at a rate of roughly 40Mbps. When the
buffer is full, Host B signals to Host A to stop sending data by setting RcvWindow = 0.
Host A then stops sending until it receives a TCP segment with Rcv Window > 0. Host A
will thus repeatedly stop and start sending as a function of the RcvWindow values it
---
## Page 58
receives from Host B. On average, the long-term rate at which Host A sends data to Host
B as part of this connection is no more than 60Mbps.
Problem29
a)The server uses special initial sequence number (that is obtained from the hash of
source and destination IPs and ports) in order to defend itself against SYN FLOOD
attack.
b) No, the attacker cannot create half-open or fully open connections by simply sending
and ACK packet to the target. Half-open connections are not possible since a server
using SYN cookies does not maintain connection variables and buffers for any
connection before full connections are established. For establishing fully open
connections, an attacker should know the special initial sequence number
corresponding to the (spoofed) source IP address from the attacker. This sequence
number requires the "secret" number that each server uses. Since the attacker does not
know this secret number, she cannot guess the initial sequence number.
s    s   pes  s  (
numbers and choose a time to live value for those sequence numbers, and discard
expired initial sequence numbers even if the attacker replay them.
Problem30
a) If timeout values are fixed, then the senders may timeout prematurely. Thus, some
packets are re-transmitted even they are not lost.
b)If timeout values are estimated (like what TCP does), then increasing the buffer size
certainly helps to increase the throughput of that router. But there might be one
potential problem. Queuing delay might be very large, similar to what is shown in
Scenario 1.
Problem31
DevRTT = (1- beta) * DevRTT + beta * | SampleRTT - EstimatedRTT I
EstimatedRTT = (1-alpha) * EstimatedRTT + alpha * SampleRTT
TimeoutInterval = EstimatedRTT + 4 * DevRTT
After obtaining first SampleRTT 106ms:
DevRTT = 0.75*5 + 0.25 * | 106 - 100 | = 5.25ms
EstimatedRTT = 0.875 * 100 + 0.125 * 106 = 100.75 ms
TimeoutInterval = 100.75+4*5.25 = 121.75 ms
After obtaining 120ms:
DevRTT = 0.75*5.25 + 0.25 * | 120  100.75 I = 8.75 ms
EstimatedRTT = 0.875 * 100.75 + 0.125 * 120 = 103.16 ms
---
## Page 59
TimeoutInterval = 103.16+4*8.75 = 138.16 ms
After obtaining 140ms:
DevRTT = 0.75*8.75 + 0.25 * | 140  103.16 | = 15.77 ms
EstimatedRTT = 0.875 * 103.16 + 0.125 * 140 = 107.76 ms
TimeoutInterval = 107.76+4*15.77 = 170.84 ms
After obtaining 90ms:
DevRTT = 0.75*15.77 + 0.25 * |90  107.76 | = 16.27 ms
EstimatedRTT = 0.875 * 107.76 + 0.125 * 90 = 105.54 ms
TimeoutInterval  105.54+4*16.27 =170.62 ms
After obtaining 115ms:
DevRTT = 0.75*16.27 + 0.25 * |115  105.54 | = 14.57 ms
EstimatedRTT = 0.875 * 105.54 + 0.125 * 115 = 106.72 ms
TimeoutInterval  106.72+4*14.57 =165 ms
Problem32
a)
Denote EstimatedR7T(*) for the estimate after the nth sample.
EstimatedRTT(4) = xSampleRTT, +
(1 x)[xSampleRTT, +
(1  x)[xSampleRTT, +(1 x)SampleRTT]]
= xSampleRTT, +(1  x)xSampleRTT,