the table structure (DDL) is not stored in the database. When a session ends, the temporary table is dropped.
● Session-specific - In PostgreSQL, every session is required to create its own Temporary Tables. Each
session can create its own “private” Temporary Tables, using identical table names.
● / syntax - PostgreSQL temporary tables do not support cross-session data access.
LOCAL GLOBAL
PostgreSQL does not distinguish between “ ” and “ ” temporary tables. The use of these
GLOBAL LOCAL
keywords is permitted in PostgreSQL, but they have no effect because PostgreSQL creates Temporary
Tables as local and session-isolated tables.
Note: use of the keyword is deprecated.
GLOBAL
● In the Oracle Database, the default behavior when the clause is omitted is
ON COMMIT ON COMMIT
. In PostgreSQL, the default is
DELETE ROWS ON COMMIT PRESERVE ROWS.
PostgreSQL Temporary Tables clause:
ON COMMIT
● ON COMMIT
The clause specifies the state of the data as it persists for the duration of a transaction or a session.
- PRESERVE ROWS
The PostgreSQL default. When a session ends, all data is truncated but persists beyond the end
of the transaction.
- DELETE ROWS
The data is truncated after each commit.
124
Examples
1. Create a use a Temporary Table, with :
ON DELTE PRESERVE ROWS
demo=> CREATE GLOBAL TEMPORARY TABLE EMP_TEMP (
EMP_ID NUMERIC PRIMARY KEY,
EMP_FULL_NAME VARCHAR(60) NOT NULL,
AVG_SALARY NUMERIC NOT NULL)
ON COMMIT PRESERVE ROWS;
demo=> CREATE INDEX IDX_EMP_TEMP_FN ON EMP_TEMP(EMP_FULL_NAME);
demo=> INSERT INTO EMP_TEMP VALUES(1, 'John Smith', '5000');
demo=> COMMIT;
demo=> SELECT * FROM SCT.EMP_TEMP;
emp_id | emp_full_name | avg_salary
--------+---------------+------------
1 | John Smith | 5000
demo=> DROP TABLE EMP_TEMP;
DROP TABLE
2. Create and use a Temporary Table, with :
ON COMMIT DELETE ROWS
demo=> CREATE GLOBAL TEMPORARY TABLE EMP_TEMP (
EMP_ID NUMERIC PRIMARY KEY,
EMP_FULL_NAME VARCHAR(60) NOT NULL,
AVG_SALARY NUMERIC NOT NULL)
ON COMMIT DELETE ROWS;
demo=> INSERT INTO EMP_TEMP VALUES(1, 'John Smith', '5000');
demo=> COMMIT;
demo= > SELECT * FROM SCT.EMP_TEMP;
emp_id | emp_full_name | avg_salary
--------+---------------+------------
(0 ro ws)
demo=> DROP TABLE EMP_TEMP;
DROP TABLE
125
Oracle Global Temporary Tables vs. PostgreSQL Temporary Tables:
Oracle Temporary Tables PostgreSQL Temporary Tables
Semantic Global Temporary Table Temporary Table / Temp Table
CREATE GLOBAL
TEMPORARY…
Create table
CREATE GLOBAL TEMPORARY…
CREATE TEMPORARY…
CREATE TEMP…
Accessible from multiple sessions Yes No
Temp table DDL persist after No (dropped at the end of the
Yes
session end / database restart session)
Create index support Yes Yes
Foreign key support Yes Yes
ON COMMIT PRESERVE
ON COMMIT default
COMMIT DELETE ROWS
ROWS
ON COMMIT PRESERVE ROWS Yes Yes
ON COMMIT DELETE ROWS Yes Yes
Alter table support Yes Yes
Gather statistics dbms_stats.gather_table_st ANALYZE
ats
Oracle 12c
dbms_stats.set_table_prefs ANALYZE
GLOBAL_TEMP_TABLE_STATS
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createtable.html
126
Migrating from: Oracle Unused Columns
[Back to TOC]
Overview
Oracle provides a method to mark columns as “unused”. Unused columns are not physically dropped, but are
treated as if they were dropped. Unused columns cannot be restored. Select statements do not retrieve data
from columns marked as unused and are not displayed when executing a table command.
DESCRIBE
The main advantage of setting a column to is to reduce possible high database load when dropping a
UNUSED
column from a large table. To overcome this issue, a column can be marked as unused and then be physically
dropped later.
To set a column as unused, use the clause.
SET UNUSED
Example
SQL> ALTER TABLE EMPLOYEES SET UNUSED (COMMISSION_PCT);
SQL> ALTER TABLE EMPLOYEES SET UNUSED (JOB_ID, COMMISSION_PCT);
Display unused columns:
SQL> SELECT * FROM USER_UNUSED_COL_TABS;
TABLE_NAME COUNT
------------------------------ ----------
EMPLOYEES 3
Drop the Column Permanently (physically drop the column):
SQL> ALTER TABLE EMPLOYEES DROP UNUSED COLUMNS;
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_3001.htm
http://docs.oracle.com/database/121/SQLRF/statements_3001.htm
127
Migration to: PostgreSQL Alter Table
[Back to TOC]
Overview
PostgreSQL does not support marking table columns as “unused”. However, when executing the
ALTER
command, the drop column statement does not physically remove the column; it
TABLE… DROP COLUMN
only makes it invisible to SQL operations. As such, dropping a column is a “fast” action, but does not reduce
the on-disk size of your table immediately because the space occupied by the dropped column is not
reclaimed.
The unused space is reclaimed by new DML actions, as they use the space that once was occupied by the
dropped column. To force an immediate reclamation of storage space, the command should
VACUUM FULL
be used. Alternatively, execute an statement to forces a rewrite.
ALTER TABLE
Example
1. PostgreSQL “crop column” statement:
demo=> ALTER TABLE EMPLOYEES DROP COLUMN COMMISSION_PCT;
2. Verify the operation:
demo=> SELECT TABLE_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'emps1' AND COLUMN_NAME=LOWER('COMMISSION_PCT');
table_name | column_name
------------+-------------
(0 rows)
3. Use the command to reclaim unused space from storage:
VACUUM FULL
demo=> VACUUM FULL EMPLOYEES;
4. Run the statement with the option to display an activity report of the vacuum
VACUUM FULL VERBOSE
process that includes the tables vacuumed and the time taken to perform the vacuum operation:
demo=> VACUUM FULL VERBOSE EMPLOYEES;
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-altertable.html
https://www.postgresql.org/docs/9.6/static/sql-vacuum.html
128
Migrating from: Oracle Virtual Columns
[Back to TOC]
Overview
Oracle Virtual Columns appear as normal columns but their values are calculated instead of being stored in the
database. Virtual Columns cannot be created based on other Virtual Columns and can only reference columns
from the same table. When creating a Virtual Column, you can explicitly specify the datatype or let the
database choose the datatype based on the expression.
Notes
• Virtual Columns can be used with Constraints, Indexes, Table Partitioning, and Foreign Keys.
• Functions in expressions must be deterministic at the time of table creation.
• Virtual Columns cannot be manipulated by DML operations.
• Virtual Columns can be used in a clause and as part of DML commands.
WHERE
• When creating an index on a virtual column, a Function Based Index is created.
• Virtual columns do not support Index-Organized Tables, external, objects, Clusters, or Temporary
Tables.
• The output of a Virtual Column expression must be a Scalar value.
• The Virtual Column keyword and are not mandatory and
GENERATED ALWAYS AS VIRTUAL
provided for clarity only.
COLUMN_NAME [datatype] [GENERATED ALWAYS] AS (expression) [VIRTUAL]
• The keyword after the column name can indicate the column is created as a Virtual Column.
AS
• A Virtual Column does not need to be specified in an statement.
INSERT
Example
1. Create a table that includes two Virtual Columns:
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
USER_NAME VARCHAR2(25),
EMAIL AS (LOWER(USER_NAME) || '@aws.com'),
HIRE_DATE DATE,
BASE_SALARY NUMBER,
SALES_COUNT NUMBER,
FINEL_SALAR Y NUMBER GENERATED ALWAYS AS
(CASE WHEN SALES_COUNT >= 10 THEN BASE_SALARY + (BASE_SALARY *
(SALES_COUNT * 0.05)) END) VIRTUAL);
129
2. Insert a new record into the table without specifying values for the Virtual Column:
SQL> INSERT INTO EMPLOYEES
(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, USER_NAME, HIRE_DATE,
BASE_SALARY, SALES_COUNT)
VALUES(1, 'John', 'Smith', 'jsmith', '17-JUN-2003', 5000, 21);
3. Select the Virtual Column from the table:
email
SQL> SELECT email FROM EMPLOYEES;
EMAIL FINEL_SALARY
-------------------- ------------
PI:EMAIL 10250
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_7002.htm#SQLRF01402
https://docs.oracle.com/database/121/SQLRF/statements_7002.htm#SQLRF01402
130
Migration to: PostgreSQL Virtual Columns
[Back to TOC]
Overview
PostgreSQL does not provide a feature that is directly equivalent to a Virtual Column in Oracle. However, there
are workarounds to emulate similar functionality.
Alternatives for Virtual Columns:
• Views
Create a View using the function for the “Virtual Column” as part of the View syntax.
• Function as a column
Create a function that receives column values from table records (as parameters) and returns a
modified value according to a specific expression. The function serves as a Virtual Column equivalent.
You can create a PostgreSQL Expression Index (equivalent to Oracle’s Function Based index) that is
based on the function.
Example
The email address for a user is calculated based on the column that is a physical property of the
USER_NAME
table.
1. Create a table that includes a column but does not include an email address column:
USER_NAME
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
USER_NAME VARCHAR(25));
2. Create a PL/pgSQL function which receives the value and return the full email address:
USER_NAME
demo=> CREATE OR REPLACE FUNCTION USER_EMAIL(EMPLOYEES)
RETURNS text AS $$
SELECT (LOWER($1.USER_NAME) || '@aws.com')
$$ STABLE LANGUAGE SQL;
3. Insert data to the table, including a value for . During insert, no reference to the
USER_NAME
function is made:
USER_EMAIL
demo=> INSERT INTO EMPLOYEES
(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, USER_NAME)
VALUES(1, 'John', 'Smith', 'jsmith'),
(2, 'Steven', 'King', 'sking');
131
4. Use the function as part of a statement:
USER_EMAIL SELECT
demo=> SELECT EMPLOYEE_ID,
FIRST_NAME,
LAST_NAME,
USER_NAME,
USER_EMAIL(EMPLOYEES)
FROM EMPLOYEES;
employee_id | first_name | last_name | user_name | user_email
-------------+------------+-----------+-----------+----------------
1 | John | Smith | jsmith | PI:EMAIL
2 | Steven | King | sking | PI:EMAIL
5. Create a view that incorporates the function:
USER_EMAIL
demo=> CREATE VIEW employees_function AS
SELECT EMPLOYEE_ID,
FIRST_NAME,
LAST_NAME,
USER_NAME,
USER_EMAIL(EMPLOYEES)
FROM EMPLOYEES;
6. Create an Expression Based Index on the column for improved performance:
USER_EMAIL
demo=> CREATE INDEX IDX_USER_EMAIL ON
EMPLOYEES(USER_EMAIL(EMPLOYEES));
7. Verify the Expression Based Index with :
EXPLAIN
demo=> SET enable_seqscan = OFF;
demo=> EXPLAIN
SELECT * FROM EMPLOYEES
WHERE USER_EMAIL(EMPLOYEES) = 'PI:EMAIL';
QUERY PLAN
---------------------------------------------------------------------------
Index Scan using idx_user_email on employees (cost=0.13..8.14 rows=1
width=294)
Index Cond: ((lower ((user_name)::text) || '@aws.com'::text) =
'PI:EMAIL'::text)
132
DML Support
Using triggers, you can populate column values automatically as “Virtual Columns”. For this approach, create
two PostgreSQL objects:
• Create a function containing the data modification logic based on table column data.
• Create a trigger to use the function and execute it as part of the DML.
Example
In the following example, the column s automatically populated by the values using data from
FULL_NAME
the and columns.
FIRST_NAME LAST_NAME
1. Create the table:
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
FULL_NAME VARCHAR(25));
2. Create a function to concatenate the and columns:
FIRST_NAME LAST_NAME
demo=> CREATE OR REPLACE FUNCTION FUNC_USER_FULL_NAME ()
RETURNS trigger as '
BEGIN
NEW.FULL_NAME = NEW.FIRST_NAME || '' '' || NEW.LAST_NAME;
RETURN NEW;
END;
' LANGUAGE plpgsql;
3. Create a trigger that uses the function created in the previous step. The function will execute before an
insert:
demo=> CREATE TRIGGER TRG_USER_FULL_NAME BEFORE INSERT OR UPDATE
ON EMPLOYEES FOR EACH ROW
EXECUTE PROCEDURE FUNC_USER_FULL_NAME();
4. Verify the functionality of the trigger:
demo=> INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME)
VALUES(1, 'John', 'Smith'),(2, 'Steven', 'King');
demo=> SELECT * FROM EMPLOYEES;
employee_id | first_name | last_name | full_name
-------------+------------+-----------+-------------
1 | John | Smith | John Smith
2 | Steven | King | Steven King
133
5. Create an Index based on the “virtual” column:
FULL_NAME
demo= > CREATE INDEX IDX_USER_FULL_NAME
ON EMPLOYEES(FULL_NAME);
6. Verify the Expression Based Index with :
EXPLAIN
demo=> SET enable_seqscan = OFF;
demo=> EXPLAIN
SELECT * FROM EMPLOYEES
WHERE FULL_NAME = 'John Smith';
QUERY PLAN
---------------------------------------------------------------------------
Index Scan using idx_user_full_name on employees (cost=0.13..8.14 rows=1
width=226)
Index Cond: ((full_name)::text = 'John Smith'::text)
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createtrigger.html
134
Migrating from: Oracle User Defined Types
[Back to TOC]
Overview
Oracle refers to User Defined Types (UDTs) as OBJECT TYPES. They are managed using PL/SQL.
User Defined Types enable you to create application-dedicated, complex data types that are based on, and
extend, the built-in Oracle data types.
The statement supports creating:
CREATE TYPE
• Objects Types
• Varying Array (varray) types
• Nested Table types
• Incomplete Types
• Additional types such as an SQLJ object type (Java class mapped to SLQ user defined type)
Examples
1. Create an Oracle Object Type to store an employee phone number:
SQL> CREATE OR REPLACE TYPE EMP_PHONE_NUM AS OBJECT (
PHONE_NUM VARCHAR2(11));
SQL> CREATE TABLE EMPLOYEES (
EMP_ID NUMBER PRIMARY KEY,
EMP_PHONE EMP_PHONE_NUM NOT NULL);
SQL> INSERT INTO EMPLOYEES VALUES(1, EMP_PHONE_NUM('111-222-333'));
SQL> SELECT a.EMP_ID, a.EMP_PHONE.PHONE_NUM FROM EMPLOYEES a;
EMP_ID EMP_PHONE.P
---------- -----------
1 111-222-333
135
2. Create an Oracle Object Type as a “collection of attributes” for the employees table:
SQL> CREATE OR REPLACE TYPE EMP_ADDRESS AS OBJECT (
STATE VARCHAR2(2),
CITY VARCHAR2(20),
STREET VARCHAR2(20),
ZIP_CODE NUMBER);
SQL> CREATE TABLE EMPLOYEES (
EMP_ID NUMBER PRIMARY KEY,
EMP_NAME VARCHAR2(10) NOT NULL,
EMP_ADDRESS EMP_ADDRESS NOT NULL);
SQL> INSERT INTO EMPLOYEES
VALUES(1, 'John Smith',
EMP_ADDRESS('AL', 'Gulf Shores', '3033 Joyce Street', '36542'));
SQL> S ELECT a.EMP_ID,
a.EMP_NAME,
a.EMP_ADDRESS.STATE,
a.EMP_ADDRESS.CITY,
a.EMP_ADDRESS.STREET,
a.EMP_ADDRESS.ZIP_CODE
F ROM EMPLOYEES a;
EMP_ID EMP_NAME STATE CITY STREET ZIP_CODE
------ ----------- ------ ------------ ------------------ ------
1 John Smith AL Gulf Shores 3033 Joyce Street 36542
For additional details:
http://docs.oracle.com/cloud/latest/db112/SQLRF/statements_8001.htm#SQLRF01506
http://docs.oracle.com/cloud/latest/db112/LNPLS/create_type.htm#LNPLS01375
136
Migration to: PostgreSQL User Defined Types
[Back to TOC]
Overview
Similar to Oracle, PostgreSQL enables creation of User Defined Types using the statement.
CREATE TYPE
A User Defined Type is owned by the user who creates it. If a schema name is specified, the type is created
under the specified schema.
PostgreSQL supports the creation of several different User Defined Types:
• Composite Types
Stores a single named attribute that is attached to a data type or multiple attributes as an attribute
collection. In PostgreSQL, you can also use the statement standalone with an
CREATE TYPE
association to a table.
• Enumerated Types ( )
enum
Stores a static ordered set of values. For example, product categories:
demo=> CREATE TYPE PRODUCT_CATEGORT AS ENUM
('Hardware', 'Software', 'Document');
• Range Types
Stores a range of values, for example, a range of timestamps used to represent the ranges of time of
when a course is scheduled.