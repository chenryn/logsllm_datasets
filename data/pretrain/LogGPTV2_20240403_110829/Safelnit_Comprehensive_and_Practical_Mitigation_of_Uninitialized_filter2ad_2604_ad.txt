### Optimized Text

In the final post-optimization bitcode, initializations are still represented as `memset`, both with and without our custom optimizations. It is important to note that these may be converted into store operations during code generation. Although the optimizer often fails to eliminate initializations entirely, it can still provide performance benefits by transforming, moving, or shortening them. The table also includes the (stripped) binary size; in many cases, the impact of initialization on the final binary size is negligible, and in the worst case, it is minimal.

When our optimizer is enabled without hardening, only a minimal performance improvement of around 0.3% is observed, as shown in Figure 15. The highest overhead is for `h264ref`, which can also be seen in Figure 12. We do not believe the regressions observed here are fundamental, but in any case, our other overhead figures include the effect of any small regressions. If necessary, problematic individual optimizations can be adjusted or disabled when compiling without hardening.

The mean overhead when using our optimizer as the baseline is 3.8%. The primary contributors to this difference are small performance regressions in `perlbench` and `xalancbmk`, and a reduced performance improvement for `omnetpp`. Despite this, `omnetpp` still shows a >1.5% performance improvement against both baselines, thanks to the combination of our optimizations and improved cache behavior.

Figure 13 presents the performance overhead of our frame initialization pass, combined with our hardened allocator. For example, zero is propagated from heap allocation sites rather than being undefined.

### SPEC CPU2006

We built all C/C++ benchmarks in SPEC CPU2006 using LTO and `-O3`, except for the `specrand` test benchmark. Overhead figures are presented for the median of three runs, using the reference dataset. The runtime overhead of applying SafeInit to CINT2006 is shown in Figure 12.

SafeInit incurs a low performance cost for many benchmarks, even without our optimizer. These benchmarks are generally CPU-bound and/or make their allocations only at startup. For example, `mcf` already uses `calloc` for heap memory allocation and does not make significant use of the stack. However, other benchmarks experience significant runtime overhead. The geometric mean of the runtime overhead is 8% when applied without our optimizer.

Applying our optimizer significantly reduces the overhead for the remaining benchmarks, resulting in an average overhead for CINT2006 of 3.5% compared to the baseline.

### Table I: SPEC CINT2006 Details

| Benchmark   | #allocas | #inits (naive) | #inits (opt) | Size (baseline) | Size (naive) | Size (optimizer) |
|-------------|----------|----------------|--------------|-----------------|--------------|------------------|
| astar       | 790      | 7              | 4            | 43736           | 43736 (0%)   | 43736 (0%)       |
| bzip2       | 679      | 23             | 20           | 80488           | 84584 (5.1%) | 84584 (5.1%)     |
| gcc         | 31551    | 650            | 596          | 4108712         | 4133288 (0.6%) | 4120992 (0.3%)   |
| gobmk       | 17039    | 325            | 300          | 3554640         | 3566928 (0.3%) | 3566928 (0.3%)   |
| h264ref     | 4229     | 122            | 122          | 630664          | 638856 (1.3%) | 638856 (1.3%)    |
| hmmer       | 3333     | 19             | 18           | 189592          | 189592 (0%)   | 189592 (0%)      |
| libquantum  | 567      | 3              | 2            | 31336           | 31336 (0%)   | 31336 (0%)       |
| mcf         | 184      | 1              | 1            | 19040           | 19040 (0%)   | 19040 (0%)       |
| omnetpp     | 7638     | 110            | 110          | 806712          | 810808 (0.5%) | 814904 (1%)      |
| perlbench   | 12327    | 175            | 167          | 1272584         | 1284872 (1%) | 1280792 (1%)     |
| sjeng       | 770      | 61             | 48           | 133976          | 133976 (0%)   | 133976 (0%)      |
| xalancbmk   | 92396    | 1701           | 1302         | 3871528         | 3908392 (1%) | 3892008 (0.5%)   |

### Servers

We evaluated the overhead of SafeInit on two modern, high-performance web servers: nginx (1.10.1) and lighttpd (1.4.41). The servers were built using LTO and `-O3`. Since they are I/O bound on our 1 Gbps network interface, we benchmarked them using the loopback interface, which represents an extreme scenario. In practice, the overhead of SafeInit is insignificant for these servers.

We used `apachebench` to repeatedly download 4Kb, 64Kb, and 1MB files for 30 seconds. We enabled pipelining, used 8 concurrent workers, and used CPU affinity to reserve a CPU core for `apachebench`. We measured the overhead for the median number of requests per second across 10 runs, with no significant variance observed.

#### lighttpd

We configured lighttpd to optimize throughput, allowing 100 requests per pipelined connection, and evaluated both the `sendfile` (default) and `writev` network backends. The results are shown in Figure 16. The average overhead is minimal when sending large (1MB) files. In the extreme case of small 4Kb files, where almost 70,000 requests per second are processed, the overhead is still less than 3%. Most of the execution time is spent parsing incoming requests and maintaining internal structures. Much of lighttpd’s overhead for these tiny requests is due to small heap allocations for strings in the chunk queue, where only the first byte is initialized by the caller, but our hardened allocator clears the entire allocation for safety. The remaining overhead is due to lighttpd’s `writev` code, which uses a fixed-size stack buffer. Our current optimizer fails to optimize away the unused portion of the buffer, but improved optimizations or minor code changes could reduce the overhead further.

#### nginx

We tested nginx with both a default configuration (similar to the one used for lighttpd) and with `sendfile` enabled (which significantly increases performance for serving 64Kb and 1MB files). All logging was disabled; the overhead is slightly reduced when logs are enabled. The results are shown in Figure 17. The overhead of full SafeInit, including our optimizer, is noticeably higher with 64Kb files, but remains below 5% in all circumstances.

nginx uses a custom pool-based memory allocator, making it difficult for our optimizer to analyze the code. However, we manually verified that memory is not left uninitialized.

### PHP 7.0.9 Micro-Benchmark Results (in seconds)

| Benchmark   | Baseline | New Optimizer | Naive SafeInit | SafeInit |
|-------------|----------|---------------|----------------|----------|
| bench.php   | 1.029    | 1.007 (-2.1%) | 1.004 (-2.5%)  | 0.999 (-3%) |
| micro_bench.php | 3.983 | 3.879 (-2.6%) | 3.994 (0.3%)   | 3.897 (-2.8%) |

### LMBENCH Results (Time in microseconds, plus % overhead above baseline)

| Sub-benchmark | Baseline | w/Optimizer |
|----------------|----------|-------------|
| syscall null   | 0.0402   | 0.0402 (0%)  |
| syscall stat   | 0.2519   | 0.2369 (-5.9%) |
| syscall fstat  | 0.0739   | 0.0739 (0%)  |
| syscall open   | 0.7049   | 0.7049 (0%)  |
| syscall read   | 0.0817   | 0.0817 (0%)  |
| syscall write  | 0.0981   | 0.0981 (0%)  |
| select tcp     | 4.5882   | 4.5882 (0%)  |
| sig install    | 0.0964   | 0.0964 (0%)  |
| sig catch      | 0.6534   | 0.6534 (0%)  |
| sig prot       | 0.2220   | 0.2220 (0%)  |
| proc fork      | 65.5904  | 65.5904 (0%) |
| proc exec      | 208.8846 | 208.8846 (0%)|
| pipe          | 3.3500   | 3.3500 (0%)  |
| tcp           | 6.7489   | 6.7489 (0%)  |
| bw pipe (MB/s) | 4988.09  | 4988.09 (0%) |
| bw tcp (MB/s)  | 8269.34  | 8269.34 (0%) |