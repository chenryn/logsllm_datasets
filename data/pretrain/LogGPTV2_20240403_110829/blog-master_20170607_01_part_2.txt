```
postgres=# \d tbl
            Unlogged table "public.tbl"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 id     | integer |           |          | 
postgres=# select count(*) from tbl;
   count    
------------
 1000000000
(1 row)
postgres=# \dt+ tbl
                   List of relations
 Schema | Name | Type  |  Owner   | Size  | Description 
--------+------+-------+----------+-------+-------------
 public | tbl  | table | postgres | 34 GB | 
(1 row)
```
查询每一行的平均长度，以及总共占用多少数据块
```
postgres=# select floor(current_setting('block_size')::int8*relpages/reltuples), relpages from pg_class where relname='tbl';
 floor | relpages 
-------+----------
    36 |  1100111
(1 row)
```
## hash vs ctid 并行扫描
### 单行较小的大表
1、使用ctid扫描
```
postgres=# select count(*) from tbl where ctid = any(gen_tids(1100111, 20, 0, 36)); 
  count   
----------
 50000454
(1 row)
Time: 234985.944 ms (03:54.986)
```
2、使用hash扫描
```
postgres=# select count(*) from tbl where mod(id,20)=0;
  count   
----------
 50000000
(1 row)
Time: 79916.058 ms (01:19.916)
```
3、使用分区扫描
```
postgres=# create table tbl2 as  select * from tbl where mod(id,20)=0;
SELECT 50000000
postgres=# \dt+ tbl2
                    List of relations
 Schema | Name | Type  |  Owner   |  Size   | Description 
--------+------+-------+----------+---------+-------------
 public | tbl2 | table | postgres | 1719 MB | 
(1 row)
postgres=# \timing
Timing is on.
postgres=# select count(*) from tbl2;
  count   
----------
 50000000
(1 row)
Time: 593.304 ms
```
很显然，直接扫描分区的效果是最好的。  
1、9.6以上的版本，就不需要纠结这么多了，因为已经内置了并行扫描的功能。
2、如果前端能做到写分区，建议还是前端分区，以达到最好的写入性能（即直接写入分区表）。
3、分区表的性能损耗。如果有海量数据写入，前端分区与数据库分区的性能损耗是不一样的。对于基于rule, trigger, 以及PG 10内置分区的分区方法，性能损耗较大。
pg_pathman是目前性能损耗最小的分区方法。推荐使用。
[《PostgreSQL 9.5+ 高效分区表实现 - pg_pathman》](../201610/20161024_01.md)  
将来PostgreSQL 内置分区肯定是会优化的，长远来看，还是建议使用内置的分区功能。
[《PostgreSQL 10.0 preview 功能增强 - 内置分区表》](../201612/20161215_01.md)  
4、风险
gen_tids函数里面用的是平均行长度，计算得到的ctid，所以当某些块中的记录小于平均长度时，也许能存下更多的行，而实际上产生的ctids也许没有包含那么多行，所以在查询时，可能会导致漏记录。
5、ctid 并行，适合行很大的场景。
## 小结
如果内核内置更优雅的写法，ctid扫描性能肯定更好。例如基于BLOCK这个级别的扫描，返回所有属于这些BLOCK的数据。  
```
select * from tbl where blkid = any (array[blocks]);
```
## 参考  
https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/  
https://www.postgresql.org/message-id/flat/be64327d326568a3be7fde1891ed34ff.squirrel%40sq.gransy.com#PI:EMAIL  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")