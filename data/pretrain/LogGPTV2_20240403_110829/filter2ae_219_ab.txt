            str = str.replaceAll("\r|\n", "");
            return xssClean(str);
          }
          private String xssClean(String value) {
            //ClassLoaderUtils.getResourceAsStream("classpath:antisamy-slashdot.xml", XssHttpServletRequestWrapper.class)
            if (value != null) {
                // NOTE: It's highly recommended to use the ESAPI library and
                // uncomment the following line to
                // avoid encoded attacks.
                // value = encoder.canonicalize(value);
                value = value.replaceAll("\0", "");
                // Avoid anything between script tags
                Pattern scriptPattern = Pattern.compile("",
                        Pattern.CASE_INSENSITIVE);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid anything in a src='...' type of expression
                scriptPattern = Pattern.compile("src[\r\n]*=[\r\n]*\\\'(.*?)\\\'",
                        Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
                                | Pattern.DOTALL);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid anything in a href='...' type of expression
                scriptPattern = Pattern.compile("href[\r\n]*=[\r\n]*\\\"(.*?)\\\"",
                                    Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
                                            | Pattern.DOTALL);
                value = scriptPattern.matcher(value).replaceAll("");
                // Remove any lonesome  tag
                scriptPattern = Pattern.compile("",
                        Pattern.CASE_INSENSITIVE);
                value = scriptPattern.matcher(value).replaceAll("");
                // Remove any lonesome  tag
                scriptPattern = Pattern.compile("",
                        Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
                                | Pattern.DOTALL);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid eval(...) expressions
                scriptPattern = Pattern.compile("eval\\((.*?)\\)",
                        Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
                                | Pattern.DOTALL);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid expression(...) expressions
                scriptPattern = Pattern.compile("expression\\((.*?)\\)",
                        Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
                                | Pattern.DOTALL);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid javascript:... expressions
                scriptPattern = Pattern.compile("javascript:",
                        Pattern.CASE_INSENSITIVE);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid vbscript:... expressions
                scriptPattern = Pattern.compile("vbscript:",
                        Pattern.CASE_INSENSITIVE);
                value = scriptPattern.matcher(value).replaceAll("");
                // Avoid onload= expressions
                scriptPattern = Pattern.compile("onload(.*?)=",
                        Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
                                | Pattern.DOTALL);
                value = scriptPattern.matcher(value).replaceAll("");
            }  
              return value; 
              }
    }
### 2、使用工具类xssProtect
这是谷歌提供的一个用于过滤来自用户输入字段的XSS攻击的Java库
项目中需要引入 `xssProtect-0.1.jar`、`antlr-3.0.1.jar`、`antlr-runtime-3.0.1.jar`等3个
jar 包
简单用法如下：
    protectedAgainstXSS（String html）{StringReader reader = new StringReader（html）; StringWriter writer = new StringWriter（）;
      try {
          // 从“ html”变量解析传入的字符串
          HTMLParser.process( reader, writer, new XSSFilter(), true );
          // 返回经过解析和处理的字符串
          return writer.toString();
      } catch (HandlingException e) {
      }
    }
具体的使用方式可以参考：
下载地址：
### 3、commons.lang包
在这个包中有个StringUtils
类，该类主要提供对字符串的操作，对null是安全的，主要提供了字符串查找、替换、分割、去空白、去掉非法字符等等操作。存在三个函数可以供我们过滤使用。
  * StringEscapeUtils.escapeHtml(string)  
使用HTML实体，转义字符串中的字符。
如：
会把
`"bread" & "butter"`
变成：
`&quot;bread&quot; &amp; &quot;butter&quot;`
  * StringEscapeUtils.escapeJavaScript(string)
使用JavaScript字符串规则转义字符串中的字符。
如：
会把
`input string: He didn't say, "Stop!"`
变成：  
`output string: He didn\'t say, \"Stop!\"`
更多的方法和效果可以参考：
## 0x04 实际案例（CVE-2018-19178）分析
### 1、案例介绍
CVE 地址：
JEESNS是一款基于JAVA企业级平台研发的社交管理系统，在JEESNS
1.3中，`com/lxinet/jeesns/core/utils/XssHttpServletRequestWrapper.java`允许通过html
中的 标签插入XSS攻击代码。
### 2、案例搭建
去官网下载 v1.3版本的 OFCMS，打开 idea，点击`import project`，选择`import project from external
model`中的`Maven`，然后一路默认即可（具体过程在系列 文章 02 中有说明，可以查看）。
导入后软件会自动下载需要的 jar 包：
等待几分钟后即可下载完毕。然后在本地创建数据库：
`create database jeesns charset utf8mb4;`
选择数据库后导入SQL 文件：
    source /Users/panda/Downloads/jeesns-master_v1.3/jeesns-web/database/jeesns.sql
然后在`jeesns-web/src/main/resources/jeesns.propertis`文件中修改数据库的账号密码
需要注意的是，由于每个人的数据库版本不同，因此需要修改对应的 msyql connet jar包，否则会出现类似于下面的错误:
    Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!
需要在`jeesns-web/pom.xml`文件添加以下内容：
                mysql
                mysql-connector-java
                8.0.15
**PS：注意这段代码添加的位置、自己机器上的数据库版本**
如下图所示：
修改好保存后，配置 tomcat 服务，点击 run-->edit configurations，配置如下：
server 选项默认即可：
Deployment 选项中，导入 war 包，点击+号，选择Artifact...，然后选择第一个 war：
点击 OK 后可以修改路径：
点击应用后，即可运行本项目，如下图所示：
站点地址：
后台地址：
管理员账号：admin
管理员密码：jeesns
### 3、案例漏洞分析
该漏洞存在的文件位置为：`jeesns-core/src/main/java/com.lxinet.jeesns/core/utils/XssHttpServletRequestWrapper.java`
关键内容如下：
    /**
     * XSS攻击处理
     * Created by zchuanzhao on 2017/3/23.
     */
     public String getParameter(String parameter) {
            String value = super.getParameter(parameter);
            if (value == null) {
                return null;
            }
            return cleanXSS(value);
        }
        ......
        private String cleanXSS(String value) {
            //first checkpoint
            //(?i)忽略大小写
            value = value.replaceAll("(?i)", "&lt;&#47;style&gt;");
            value = value.replaceAll("(?i)", "&lt;&#47;script&gt;");
            value = value.replaceAll("(?i) Integer.parseInt((String) request.getServletContext().getAttribute(ConfigUtil.WEIBO_POST_MAXCONTENT.toUpperCase()))){
                throw new ParamException("内容不能超过"+request.getServletContext().getAttribute(ConfigUtil.WEIBO_POST_MAXCONTENT.toUpperCase())+"字");
            }
           ....
            Weibo weibo = new Weibo();
            weibo.setMemberId(loginMember.getId());
            weibo.setContent(content);
            weibo.setStatus(1);
             ....
            return result == 1;
        }
通过request获取到 content 的值后，调用 save 函数保存，而request
使用了`XssHttpServletRequestWrapper`过滤器，通过`cleanXSS`去过滤传入进来的参数，综上，其实最关键的地方就在`XssHttpServletRequestWrapper.java`文件，如果绕过了
`cleanxss`函数，那么就可以进行 XSS 攻击。
下面来仔细看看这个函数。
首先对传入的参数进行相关的字符处理，然后采用标签黑名单的方式过滤关键字，可以看到过滤了我们经常使用的`alert`、`onerror`等函数。这种方式不是绝对安全的方式，很容易绕过，比如：
还比如：
### 4、修复方案
官网更新到了v1.4的版本，但是取消了开源。因此没法看官网怎么修复的，这里给出自己的修复意见。
1、对于黑名单过滤的方式，从长远的角度来看，是不可取的，因为标签太多，可能利用的标签也很多，一旦过滤不全，就导致功夫白费
2、使用上文中提到的修复方式，包括全局过滤器、xssProtect以及相关的 commons.lang包中的过滤函数等。
## 0x05 总结
本文主要讨论了 Java 中的 XSS 漏洞，包括其原理、简单的 Java 代码示例、修复方案以及 CVE 实例，希望对初入Java代码审计的朋友有所帮助。
## 0x06 参考