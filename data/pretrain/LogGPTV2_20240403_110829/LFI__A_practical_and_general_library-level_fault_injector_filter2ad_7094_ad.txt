updatedlibraryanditsdependenciesinordertoupdatethelibraryfaultproﬁle.Proﬁlingtimeismainlyinﬂuencedbycodesize(i.e.,numberofmachineinstructions).Thenumberofhopsinthepropagationofreturncodestotheeax(orequivalent)registeralsohasanimpact,butwehavefoundthisnumbertobealways3orless,duetocompileroptimizationslikeconstantpropagationandconstantfolding,soitseffectisnegligible.6.3.AccuracyAccuracyoftheproﬁlercanbeexpressedasTP/(TP+FN+FP),i.e.,theratiooftruepositivestothesumoftruepositives,falsenegatives,andfalsepositives.Atruepositiveisanerrorreturncodethatwascorrectlyfound;afalsenegativeisareturnableerrorthatwasnotfound;afalsepositiveisareportederrorcodethatcannotactuallybereturned.Afactorthatcaninﬂuenceaccuracyisthenumberofindirectbranchesandindirectcalls,because,asexplainedin§3.1,indirectionposesachallengetothestaticanalyzer.Accuracyisalsoinﬂuencedbylibrarydesign:thenumberoffalsepositivesincreasesasfunctionsmaintainmorestatefromonecalltoanother,basedonwhichtheydecidetheappropriatereturnvalue.Forevaluationpurposes,the“groundtruth”fordecidingwhatisafalsevs.truepositiveornegativecannotbeeasilydetermined,becausewrittendocumentationisnotreliable;ifwewantedprecisenumbers,labor-intensivemanualcodeinspectionwouldberequired.Weperformedsuchananal-ysisonasmalllibrary(libpcre,with20exportedfunctions)andfoundtheaccuracytobe84%(52truepositives,10falsenegatives,0falsepositives).Toscaletheevaluation,weconsidered18additionalli-brarieson3platforms,butthistimeweconsideredthegroundtruthtobethedocumentation.Wewrotedocumen-tationparsersforeachofthemeasuredlibraries.Whilethisevaluationisinexact,itistheonlypracticalmethodofcom-parison.InTable2weshowtheresultsofrunningtheLFIproﬁlerontherespectivebinaries.Withnoaccesstodocumentation,sourcecode,orhu-manassistance,theLFIproﬁlerachievesontheorderof80%-90%accuracy.Falsenegativesresultinmissedfaultscenarios,whilefalsepositivesresultintimewastedbythedeveloperverifyingthattheinjectedfaultconditioncannotactuallyoccurinpractice.Shouldstructureddocumenta-tionexistandadocumentationparserbeavailable,itcanbecombinedwithLFI’sstaticanalysistoyieldhigheraccu-racy.LibraryPlat-AccuracyTPsFNsFPsformlibsslWindows87%164186libxml2Solaris81%100313888libpanelSolaris100%2300libpctxSolaris83%1002libldapLinux85%3684521libxml2Linux80%989152102libXssLinux92%1210libgtkspellLinux100%700libpanelLinux91%2120libdmxLinux76%2680libaoLinux80%1230libhesiodLinux100%1000libnetﬁlterqLinux92%2420libcdtLinux100%1500libdaemonLinux91%3030libdnssdLinux89%5042libgimpthumbLinux84%3133libvorbisﬁleLinux75%133439Table2.Proﬁleraccuracywithnohumanassistance,nodocumentation,andnosourcecode,onLinux/x86,Solaris/SPARC,andWindows/x86.Weshowtruepositive(TPs),falsenegatives(FNs),andfalsepos-itives(FPs)relativetolibrarydocumentation.6.4.PerformanceOverheadTheﬁnalquestionwewishtoaddressiswhetherthepro-cessofinjectinglibrary-levelfaultsslowsdownthesystemtothepointthatitsbehaviorisnolongerrepresentative.Ifthiswasthecase,thevalueoftestingwouldbedecreased.WemeasuredtheoverheadintroducedbytheLFIcon-trollerintheAB[2]benchmarkontheApachehttpdserver,whileLFIwassimultaneouslyperformingfaultinjectiononthecallstoGNUlibc,libapr,andlibaprutil.GNUlibcisalargelibrary,with1535exportedfunctions,whilethetwolibrariescomprisingtheApachePortableRuntime(APR)aremedium-sized,totalingalittleover1,000functions.WeallowedLFItoproducearandomfaultinjectionplanwith10triggersonthetop-10-most-calledfunctionsinApachehttpd,100triggersonthetop-100,500triggersonthetop-300,and1,000triggersonthetop-300,respec-tively(inthelasttwocases,thereweremultipletriggersforthesamefunction,correspondingtodifferenterrorreturns).Intheseexperiments,LFIalwayspassesthecallthroughtotheoriginallibraryafterevaluatingthetrigger,inordertoallowApachetoproperlycompletethebenchmark.Ineachtestweran1,000requestswithAB.Table3summarizestwosetsofresults,obtainedwithtwodifferentworkloads:staticHTMLandPHP.Thelatterismoredynamicandperformsmanymorelibrarycallsthan978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
387
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 
theformer,whichimpliesthatthetriggershavetobeeval-uatedconsiderablymoretimes.Ascanbeseen,theover-headsintroducedbytriggerevaluationarenegligible.StaticHTMLPHPBaseline(noLFI)0.151sec1.51sec10triggers0.156sec1.53sec100triggers0.156sec1.53sec500triggers0.158sec1.57sec1,000triggers0.159sec1.60secTable3.RuntimeoverheadofusingLFIintheApachehttpdserverwiththreesimultaneouslibraries(GNUlibc,libapr,andlibaprutil).Wereportcompletiontimeof1,000ABrequests.ThebaselinerepresentsApachehttpdwithoutanyinterferencefromLFI.WealsorantheSysBench[23]OnlineTransactionPro-cessing(OLTP)benchmarkontheMySQLRDBMSwithLFIappliedtoGNUlibc;wevariedthenumberoftriggersfrom10to1,000.Table4showstheresultsfortwodifferentworkloads:read-onlyandread-writequeries.Read-onlyRead/WriteBaseline(noLFI)465.28txns/sec112.62txns/sec10triggers464.48txns/sec112.08txns/sec100triggers463.19txns/sec111.53txns/sec500triggers460.80txns/sec110.88txns/sec1000triggers459.39txns/sec110.10txns/secTable4.RuntimeoverheadwhileapplyingLFItotheMySQLdatabaseserver.Wereportnumberoftrans-actionspersecond,asreportedbySysBenchOLTP.AsintheApachecase,theruntimeoverheadduringtest-ingisnegligible,evenforalargenumberoftriggers.Itisapparentthatoverheadisinﬂuencedbothbyhowintenselytheprogramusestheproﬁledlibraryandhowmanytriggersarepresentinthefaultinjectionplan.7.RelatedWorkPerformingfaultinjectionatthesoftwarelevelisattrac-tive,becauseitdoesnotrequireexpensivehardwaremecha-nisms,anditcanbeusedtotargetvariouslayersinthesoft-warestack.Softwarefaultinjectorscaneitherbeinserteddirectlyintoapplications,orcanbeshimmedbetweenex-istinglayersofthesoftwarestack.Softwarefaultinjectionhasseenvariedusesintheliter-ature,rangingfromuseasamethodfortestingtherobust-nessofdevicedrivers[1]totestinggeneral-purposeoperat-ingsystems[9,13,11,12,10,3]tomission-criticalsystemsandreal-timesystems[18,19].NFTAPE[20]isanexampleofafaultinjectionframe-workthatcaninjectvariouslow-levelfaultswiththemainpurposeofassessingdependabilityofdistributedsystems.Inourexperience,establishingthemappingbetweenlow-levelfaultsandhigher-levelapplicationeventsacrosssev-erallayersofthesoftwarestackisnoteasy,makingdiagno-sisanddebuggingtedious.Ourworkisfocusedonlibrary-levelfaultinjection,be-causeweviewthisasanideallayerfordoingrealistictest-ing:itistheinterfacethatismostlikelytoexposeapplica-tionstofailuresthatoccurintheirenvironment.WorkrelatedtothisideaincludesBallista[14],anearlysystemfortestingtherobustnessofalibraryoroperatingsystemAPIbypassingboundaryvaluesasarguments.Itre-liesondomain-speciﬁcknowledgetoselectargumentsthatwillstressthetestedcomponentandalsoneedsaccesstothecorrespondingfunctionprototypes.Similarly,HEAL-ERS[7]searchesforargumentsthatcancausealibraryfunctiontocrash;itthengenerateswrappersthatprotectthevulnerablefunctionsfromthepathogenicarguments.Ourworkoperatesintheoppositedirection:wetesttheapplicationbygivingiterrorreturnvaluesfromthelibrary.Thisway,weverifythattheprogramreactsproperlytotheexposederrorconditions,e.g.,checkhowithandlessitua-tionswhenmallocisunabletoallocatememory.Researchinterestinthistypeoflibrary-levelfaultinjec-tionisrelativelyrecentand,toourknowledge,debutedwithFIG[5],atoolusedtoverifytherecoverymechanismsofapplicationsthatusetheGNUlibc(glibc)library.FIGin-jectsfaultssolelyincallstoglibcandrequiresthatthein-jectableglibcerrorsbehardcoded.Incontrast,LFIcanbeusedwithanylibraryandautomaticallygeneratesstubsthatperformcompletefaultinjection,includingsideeffects.WealsooffercontrolovertheinjectionprocessviaanXML-basedfaultdescriptionlanguagetoﬂexiblyspecifyinjectionscenarios.S¨ußkraut&Fetzer[21]introducedasystemthatﬁndsap-plicationproblemsvialibrary-levelfaultinjectionandthenpatchestheapplicationstoprotectagainstthesefaults.Thesystemislimitedtolibcandreliesonmanpagestodeter-minepossibleerrorreturnvalues.Asshownin§3.1and§3.3,manpagescansometimesbeincorrect,soinLFIweextendthemanpageparsingapproachwithstaticanalysisofthelibrarybinaries,toautomaticallyextracterrorreturncodes.[21]alsorequiresinformationonthefunctionproto-typesintheformofheaderﬁlestogeneratecorrespondingwrappersandusessystematicerrorinjection.LFIelimi-natestheneedforheaderﬁlesanddecouplesthespeciﬁca-tionoffaultscenariosfromthefaultinjectionmechanism,thusallowingformoreﬂexibletestscenarios(systematic,random,custom,etc.).S¨ußkraut&Fetzer[22]furtherintroducedatechniqueforlearninglibrary-levelerrorreturnvaluesbyinjecting978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
388
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 
systemcallerrors(i.e.,faultsattheboundarybetweentheoperatingsystemandthelibrary)andobservingtheirprop-agationtothelibcinterface.TheLFIproﬁlerusesstaticanalysisofbinaries,becausethesystemcallinjectionap-proachislimitedtolibc(theonlylibrarythatdirectlyac-cessesthesystemcallinterface),anditrequiresrecompil-ingthekernel,inordertoexportthesystemcalltable.WebelievethatdirectanalysisofthebinariesmakesLFImorewidelyapplicable.8.ConclusionWepresentedLFI,atoolformakingfaultinjection-basedtestingmoreefﬁcientandaccessibletodevelopersandtesters.LFIinjectsfaultsattheboundarybetweensharedlibrariesandtargetprograms,inordertoverifywhethertheprogramscorrectlyhandlefailuresexposedbythelibraries.LFIautomaticallyextractsinformationfromthebinarylibrariesregardingpossibleerrorreturncodesandtheirsideeffects.Basedonthisfaultproﬁle,LFIgen-eratesvariousfaultinjectionscenarios,whichcanbeuseddirectlyormodiﬁedasdesiredbytesters.Basedonthefaultproﬁleandscenario,LFIsynthesizesashimlibrarythatin-jectsthedesiredfaultsandrecordsthebehaviorofthetargetprogram.LFIgeneralizestothesharedlibrariesfoundoncom-monLinux,Windows,andSolarissystems,andproﬁlingtakesontheorderofsecondsforeachlibrary—thismakesitpracticalforuseinrealdevelopment.WehaveshownthatLFIisusefulevenwhenrunwithouthumanassistanceandnoaccesstodocumentationorsourcecode—itwasabletoincreasetestcoverageevenontheextensiveMySQLtestsuite,byexercisingrecoverycodepathsthatarenottouchedbyregulartesting.Theperformanceoverheadincurreddur-ingfaultinjectionisnegligible,whichmeansthatprogrambehaviorremainsrealisticduringtesting.9.AcknowledgmentsWethankAnkitSinglaforhisearlycontributionstoLFI.WearegratefultotheanonymousreviewersandMingYuandLiviuCiorteafortheirhelpinimprovingthispaper.References[1]A.Albinet,J.Arlat,andJ.-C.Fabre.Characterizationoftheimpactoffaultydriversontherobustnessofthelinuxkernel.InIntl.Conf.onDependableSystemsandNetworks,2004.[2]ApacheBenchmark(AB).http://httpd.apache.org/docs/2.0/programs/ab.html.[3]J.Arlat,J.-C.Fabre,M.Rodr´ıguez,andF.Salles.Depend-abilityofCOTSmicrokernel-basedsystems.IEEETrans.Comput.,51(2),2002.[4]C.Babcock.SunlocksupMySQL,lookstofutureWebdevelopment.InformationWeek.Retrievedon2008-02-27.http://informationweek.com/news/showArticle.jhtml?article-ID=206900327.[5]P.A.Broadwell,N.Sastry,andJ.Traupman.FIG:Apro-totypetoolforonlineveriﬁcationofrecoverymechanisms.InWorkshoponSelf-Healing,AdaptiveandSelf-ManagedSystems,NewYork,NY,2002.[6]ELSA.http://www.eecs.berkeley.edu/smc-peak/elkhound/sources/elsa/.Accessedon15-Mar-2009.[7]C.FetzerandZ.Xiao.HEALERS:Atoolkitforenhancingtherobustnessandsecurityofexistingapplications.InIntl.Conf.onDependableSystemsandNetworks,2003.[8]http://ftp.gnu.org/gnu/glibc/.Accessedon15-Mar-2009.[9]T.Jarboui,J.Arlat,Y.Crouzet,andK.Kanoun.Experimen-talanalysisoftheerrorsinducedintolinuxbythreefaultinjectiontechniques.InIntl.Conf.onDependableSystemsandNetworks,2002.[10]D.JoaoandM.Henrique.Multidimensionalcharacteriza-tionoftheimpactoffaultydriversontheoperatingsystemsbehavior.IEICETrans.Info.andSys.,86(12),2003.[11]A.Johansson,N.Suri,andB.Murphy.Ontheimpactofin-jectiontriggersforOSrobustnessevaluation.InIntl.Symp.onSoftwareReliabilityEngineering,2007.[12]A.Johansson,N.Suri,andB.Murphy.Ontheselectionoferrormodel(s)forOSrobustnessevaluation.InIntl.Conf.onDependableSystemsandNetworks,2007.[13]K.Kanoun,Y.Crouzet,A.Kalakech,A.-E.Rugina,andP.Rumeau.Benchmarkingthedependabilityofwindowsandlinuxusingpostmarkworkloads.InIntl.Symp.onSoft-wareReliabilityEngineering,2005.[14]P.Koopman,J.Sung,C.Dingman,D.Siewiorek,andT.Marz.Comparingoperatingsystemsusingrobustnessbenchmarks.InIntl.Symp.onSoftwareReliabilityEngi-neering,1997.[15]Pidgin.http://www.pidgin.im.[16]Pidgin-ticket8672.http://developer.pidgin.im/ticket/8672.[17]M.PrasadandT.Chiueh.Abinaryrewritingdefenseagainststack-basedbufferoverﬂowattacks.InUSENIXAnnualTechnicalConference,2003.[18]M.Rodriguez,J.Arlat,andJ.-C.Fabre.BuildingSWIFItoolsfromtemporallogicspeciﬁcations.InIntl.Conf.onDependableSystemsandNetworks,2003.[19]V.Sieh,O.Tschache,andF.Balbach.VERIFY:Evalua-tionofreliabilityusingVHDL-modelswithembeddedfaultdescriptions.InIntl.Symp.onFault-TolerantComputing,1997.[20]D.T.Stott,B.Floering,Z.Kalbarczyk,andR.K.Iyer.Aframeworkforassessingdependabilityindistributedsys-temswithlightweightfaultinjectors.InIntl.ComputerPer-formanceandDependabilitySymp.,2000.[21]M.S¨ußkrautandC.Fetzer.Automaticallyﬁndingandpatch-ingbaderrorhandling.InEuropeanDependableComputingConference,2006.[22]M.S¨ußkrautandC.Fetzer.Learninglibrary-levelerrorre-turnvaluesfromsyscallerrorinjection.InEuropeanDe-pendableComputingConference,2006.[23]Sysbench.http://sysbench.sourceforge.net,2008.