No.
1-7,
9-11
8 6
TPM
Ver.
1.2,
2.0
1.2
PCR
No.
4
9
4
9
PCR values 5
PCR values
PCR values
of the ORIGINAL system
of the COMPROMISED system
after the SRTM attack
1C2549F2...
7767E9EB...
849162AD...
7767E9EB...
DF5AD048...
DA28F689...
9966FE5A...
DA28F689...
1C2549F2...
7767E9EB...
849162AD...
7767E9EB...
Table 5: Forged PCR values after the SRTM attack
loader and kernel are extended. Interestingly, the Lenovo
m93p machine (PC #8) has a different value for PCR #4,
even though it uses the same bootloader. After looking
into the event logs, the m93p machine uses a hash of
0xFFFFFFFF as the event separator (EV SEPARATOR)
while all the other devices use a hash of 0x00000000.
It seems 0xFFFFFFFF is used when the ﬁrmware is
BIOS [32] and 0x00000000 is used for UEFI [35], as
long as the TPM version is 1.1 or 1.2. In case of TPM
2.0, the speciﬁcation [39] allows both of the values to be
used. The m93p machine is supposed to use 0x00000000
because it uses TPM 1.2 and a UEFI ﬁrmware. This non-
conformity does not immediately wreck the security, but
it may increase the complexity of resource management,
especially in an enterprise where an administrator needs
to attest or track down installed software inside the ad-
ministrative domain.
Table 4 also shows whether the reset and replay attack
are possible when each device is booted with the cus-
tomized bootloader and kernel. All devices with TPM
2.0 are vulnerable to the attack; nevertheless, they are
from different manufacturers such as Intel, Dell, GIGA-
BYTE, and ASUS. It seems that all of the manufacturers
considered in this study failed to deal with the excep-
tion mentioned in Section 4.2 because of the incomplete
speciﬁcation.
On the contrary, all TPM 1.2 devices, except for the
Dell Optiplex 7040 mini PC (PC #9), appropriately han-
dle the exception by entering failure mode, in which re-
2The EV S CRTM VERSION event is not extended to PCR #0 and
the EV EFI PLATFORM FIRMWARE BLOB event is not extended
to PCR #2, which are wrong probably because the software does not
comply with the TCG Speciﬁcation
3 Entering failure mode
4The static PCR values are kept
5Only the ﬁrst eight hexadigits are shown here for the brevity
6PC #8 has a different value in PCR #4, which seems incorrect
1240    27th USENIX Security Symposium
USENIX Association
PC
No.
1
3
8, 9
TPM
Ver.
2.0
2.0
1.2
PCR
No.
17
17
18
19
Before the intrusion
After the intrusion
After the DRTM attack
821701E9...
257B1024...
2E3DC497...
F443F487...
FC8AD796...
E90F27EC...
3DC85583...
E4C61D2A...
821701E9...
257B1024...
2E3DC497...
F443F487...
Table 6: Forged PCR values after the DRTM attack
/* E V _ S R T M _ V E R S I O N event is not e x t e n d e d to
PCR #0 */
[1] PCR 0 , Event Type 0 x8 , Digest
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[2] PCR 0 , Event Type 0 x1 , Digest
3 E B B 5 D 9 1 D A 1 B C 7 8 C B 0 F 2 0 6 B 3 9 8 A D 2 8 5 2 0 8 8 5 F E B 3
/* E V _ E F I _ P L A T F O R M _ F I R M W A R E _ B L O B event is
not e x t e n d e d to PCR #2 */
[3] PCR 2 , Event Type 0 x80000008 , Digest
0000 F F 7 F B 8 B 6 0 0 0 0 0 0 0 0 1 6 9 C 0 9 B 3 0 0 0 0 0 0 0 0 0 0 7 0
[4] PCR 0 , Event Type 0 x4 , Digest
9069 C A 7 8 E 7 4 5 0 A 2 8 5 1 7 3 4 3 1 B 3 E 5 2 C 5 C 2 5 2 9 9 E 4 7 3
[5] PCR 2 , Event Type 0 x4 , Digest
9069 C A 7 8 E 7 4 5 0 A 2 8 5 1 7 3 4 3 1 B 3 E 5 2 C 5 C 2 5 2 9 9 E 4 7 3
... o m i t t e d ...
Figure 14: Event log summary relate to PCR #0 and PCR
#2 in the GIGABYTE Q170-MK
setting and replaying are not possible. We note that the
machine (PC #9) maintains the static PCRs even after
entering into and exiting from the sleeping states with-
out saving the TPM state. It seems the machine neither
cuts the power to the TPM chip off nor restores the TPM
state.
It is interesting that the Dell Optiplex 7040 machine
with TPM 2.0 (PC #3) is exploitable while the same
machine with TPM 1.2 is not, even when the same
BIOS/UEFI ﬁrmware is used throughout the experi-
ments. This implies that different branches of the same
binary are executed depending on the TPM version. The
ﬁrmware logic may need to be divided according to the
TPM versions.
In the case of the GIGABYTE Q170-MK desktop PC
(PC #4), the TPM state was successfully reset, but the
exploit ended up failing to replay the measurements.
The event logs show that the replayed values of PCR
#0 and PCR #2 do not match the normal values. Fig-
ure 14 shows the series of events that occurred dur-
ing the boot. Based on the logs, PCR #0 is supposed
to be extended with the digests of the event types of
0x8, 0x1, and 0x4. However, it turned out that the
SRTM of the PC does not extend the digest of type 0x8
(EV S CRTM VERSION), which does not comply with
the TCG standard [39]. Similarly, the SRTM of the
Q170-MK (PC #4) omits the digest of type 0x80000008
(EV EFI PLATFORM FIRMWARE BLOB). This sort
of non-conformity may cause a misinterpretation of the
device status when a remote attestor expects a particular
value according to the standard.
4.4.2 DRTM Attack: Lost Pointer Vulnerability
The normal states of the dynamic PCRs after booting the
devices listed in Table 4 are shown in the fourth column
of Table 6. The values of the dynamic PCRs are from the
measurements of SINIT ACM, tboot, the kernel ﬁle, and
initial RAM disk ﬁle. The states after the DRTM attack
are listed in the ﬁfth column of Table 6. The changed val-
ues are affected by the customized bootloader and kernel.
As explained at the beginning of Section 4.3.3, PCR #18
and PCR #19 differ when the legacy PCR mappings are
used, while only PCR #17 is different when the detail-
s/authorities PCR mappings are used. The sixth column
of Table 6 lists the states to which measurements could
be re-extended. Because the vulnerability is due to the
software stack, all the devices are exposed to the attack
regardless of the TPM version.
5 Discussion and Solutions
5.1 Discussion
Kauer [17] listed the conditions that are required to make
a chain of measurements trustworthy.
• Condition 1: The CRTM must be trustworthy. In
the case of S-CRTM, the code is stored in ROM.
According to the TCG speciﬁcation [39], S-CRTM
only starts when the system is reset and initializes
the chain of measurements. For the D-CRTM, the
measurement environment is initialized and started
only by special hardware instructions, for example,
SKINIT of AMD and GETSEC[SENTER] of Intel.
• Condition 2: The PCRs should be resettable only by
trusted code.
USENIX Association
27th USENIX Security Symposium    1241
• Condition 3: The chain has to be contiguous.
Device Reset 
Initialization for Startup 
Wait for Command 
Return 
TPM_RC_INITIALIZE 
TPM2_Startup()? 
N 
(1) 
Y 
Was Previous 
Shutdown(STATE)? 
(2) 
Y 
N 
Restore Saved State 
Is Command 
Startup(STATE)? 
N 
Y 
Is Command 
Startup(CLEAR)? 
Y 
N 
Return 
TPM_RC_VALUE 
Y 
Was Restore 
Successful? 
SET Initialized and 
Return TPM_RC_SUCCESS 
Operational 
N 
Failure 
Mode 
Figure 15: Part of the TPM startup sequences [37]
Our SRTM attack falsiﬁes Condition 2: we are able to
reset the TPM without rebooting the system. The attack
enabled by the TPM 2.0 speciﬁcation [37]. Figure 15
shows a part of the “TPM Startup Sequences” diagram
taken from the speciﬁcation document. The vulnerabil-
ity is due to the absence of a saved state, and it occurs
when TPM2 Startup(STATE) is called with no preced-
ing TPM2 Shutdown(STATE) command. As Figure 15
shows, the sequence of transitions (1) ends up with the
command-waiting state, which means the TPM is ready
to work as usual. As a result, the attacker can reset
the PCRs by sending TPM2 Startup(CLEAR) command.
The speciﬁcation expects the CRTM to take “corrective
action” in such cases, but does not clearly specify what
to do.
The DRTM attack that we discovered does not tech-
nically falsify Condition 1.
Instead, the attack raises
the question whether we can naively assume the cor-
rectness of the software in the trust chain.
It is difﬁ-
cult to make software free of vulnerabilities. Some stud-
ies [17, 20, 21] have proposed designing secure systems
using the DRTM supports in order to decrease the size
of TCB and remove vulnerable BIOS, OptionROMs, and
bootloaders from the trust chain. Unfortunately, even if
this issue is addressed, there still is room to ﬁnd software
bugs, as we discovered.
After resetting the TPM, we completed our attack by
re-extending the PCRs with good measurements that we
obtained from the event logs. According to the TCG
speciﬁcations [35, 36, 33], prior to passing the control
over to the operating system, the BIOS/UEFI ﬁrmware
and DCE/DLME leave event logs and record measure-
ments. Considering that the operating system can obtain
the event logs and the extend operation is provided by the
kernel, the speciﬁcation must address how to protect or
remove good measurements recorded in the event logs,
in order to prevent the replay attack.
5.2 Solutions
For the SRTM vulnerability, a brutal and desperate rem-
edy is to prohibit the platform from entering the S3 sleep-
ing state, since this power state transition is a vital part of
the attacks. Some BIOS/UEFI ﬁrmware provides a menu
option to disuse the S3 sleeping state.
A better way to address this vulnerability starts with
revising the speciﬁcation. The TPM 2.0 speciﬁcation
should mandate the TPM enter failure mode if there is no
state to restore. This approach makes the TPM 2.0 spec-
iﬁcation consistent with the TPM 1.2 speciﬁcation. Note
that the TPM 1.2 devices in Table 4 were not affected by
the attack because they were not resettable when in fail-
ure mode. A remote attester can also identify devices in
failure mode. The TPM 2.0 devices are already speciﬁed
to go to failure mode if they cannot successfully start,
as shown in Figure 15, path (2). Note that updating the
speciﬁcation has to be followed by updating the TPM
ﬁrmware.
We have contacted and reported our ﬁndings to In-
tel [16], Dell [7], GIGABYTE [8], and ASUS [1], which
are the vendors of the devices we have tested and con-
ﬁrmed to be vulnerable. Intel and Dell are in the process
of patching their ﬁrmware to take corrective action. We
requested a CVE ID regarding the grey area vulnerabil-
ity, and this ID has been obtained (CVE-2018-6622).
For the speciﬁc DRTM vulnerability, we have already
sent a patch to the tboot project, which also can be found
in the tboot repository [9]. The patch removes the func-
tion pointers exposed in the mutable data memory and
1242    27th USENIX Security Symposium
USENIX Association
protects the APIs inside the measured environment from
unauthorized accesses. The CVE ID regarding the lost
pointer vulnerability has also been obtained (CVE-2017-
16837).
The DRTM vulnerability is due to the exposed func-
tion pointers from the virtual function table. To facilitate
runtime polymorphism, virtual function tables are often
used to dispatch a collection of functions that deﬁne the
dynamic behavior of an object. These tables need to be
included in a section to be measured (e.g., the .text sec-
tion) or in a read-only data section (.rodata). Otherwise,
these tables could be exploited by an attacker who wants
to corrupt the pointer and manipulate the behavior of the
program. To prevent such attacks, all RTM code must
be developed under secure coding standards and audited
carefully [27]. Potential ﬂaws could be searched for by
source code analysis tools.
6 Related Work
6.1 SRTM Attacks
Kursawe et al. [18] tapped into the Low Pin Count bus
signal, which is used for communication between the
TPM chip and the CPU. Concealed information such as
keys can then be acquired using simple wiretapping at-
tack.
Kauer [17] demonstrated an attack that resets a ver-
sion 1.1 TPM chip by physically connecting a reset pin
to ground. However, this TPM reset attack requires phys-
ical access, whilst our discovered attack can be done
by software remotely. The author also patched a BIOS
TPM driver and ﬂashed the modiﬁed BIOS for the pur-
pose of disabling the SRTM. The author implemented a
bootloader that uses AMD’s DRTM supporting instruc-
tion and proposed this bootloader as an alternative to the
existing weak SRTM implementations.
Sparks [30] pointed out several vulnerabilities and
limitations of the TPM. First, a TPM chip cannot pro-
tect programs after it has been loaded because measure-
ments are taken before execution. Second, physical re-
set is possible. Third, stored keys can be guessed by
a side channel attack that measures time differences of
RSA calculation. Sparks also summarized the counter-
measures against those threats: loaded programs can be
protected by hypervisors, the Low Pin Count bus can
be protected from attacks by employing tamper-resistant
circuits, and the timing attack on the RSA calculation
can be prevented by employing the techniques that better
hide the statistics of the calculation.
Butterworth et al. [2] exploited a vulnerable BIOS up-
date process to re-ﬂash a BIOS chip with an arbitrary
ﬁrmware that contains rootkits. After the adversary takes
control of the BIOS/UEFI ﬁrmware and SMM, IMA [26]
and BitLocker [22] cannot protect the TPM. As a mitiga-
tion of those attacks, the authors proposed a time-based
remote attestation that does not rely on the TPM.
6.2 DRTM Attacks
Wojtczuk and Rutkowska demonstrated an attack against
Intel TXT by compromising SMM code [44]. SMM is
an operating mode in which code is executed in the most
privileged execute mode, which is privileged than a hard-
ware hypervisor. The authors found that SMM code is
not measured and were able to infect the system’s SMM
handler. The authors also found that an arbitrary code
can be executed in the SINIT ACM by exploiting an im-
plementation bug within it [45]. The attack even loads
an arbitrary MLE and forges the PCR values bypassing
protections provided by Intel TXT.
Wojtczuk et al. introduced an attack that exploits a bug
in the SINIT ACM [46]. With this attack, they can com-
promise a hypervisor even when Intel TXT is present.
In the attack, they demonstrated that the SINIT ACM
cannot protect the Direct Memory Access Remapping
ACPI Table, which holds information about the conﬁg-
uration for VT-d (Intel’s Virtualization Technology for
Direct I/O). VT-d technology [15] is a hardware support
for isolating device access and is considered to be a coun-
termeasure against direct memory access attacks, which
can bypass the memory protection of a CPU and access
system memory.
Sharkey introduced a hypervisor rootkit that emulates
the SENTER instruction and TPM using a thin hyper-
visor [28]. The rogue hypervisor rootkit runs underneath
the kernel, compromises Intel TXT, traps access to it, and
tricks the system by providing forged PCRs.
7 Conclusion
The TPM is a hardware component found in many mod-
ern computers and is intended to provide the root of trust.
TPM is speciﬁed by TCG and implemented as a tamper-
resistant integrated circuit that provides cryptographic
primitives and secure storage to hold secret information
and reports about the platform state.