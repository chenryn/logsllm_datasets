title:StochFuzz: Sound and Cost-effective Fuzzing of Stripped Binaries by
Incremental and Stochastic Rewriting
author:Zhuo Zhang and
Wei You and
Guanhong Tao and
Yousra Aafer and
Xuwei Liu and
Xiangyu Zhang
9
0
1
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
STOCHFUZZ: Sound and Cost-effective Fuzzing of
Stripped Binaries by Incremental and Stochastic
Rewriting
Zhuo Zhang§, Wei You†∗, Guanhong Tao§, Yousra Aafer‡, Xuwei Liu§, Xiangyu Zhang§
{zhan3299, taog, liu2598, xyzhang}@purdue.edu, PI:EMAIL, PI:EMAIL
§Purdue University, †Renmin University of China, ‡University of Waterloo
Abstract—Fuzzing stripped binaries poses many hard chal-
lenges as fuzzers require instrumenting binaries to collect
runtime feedback for guiding input mutation. However, due
to the lack of symbol information, correct instrumentation is
difﬁcult on stripped binaries. Existing techniques either rely on
hardware and expensive dynamic binary translation engines such
as QEMU, or make impractical assumptions such as binaries
do not have inlined data. We observe that fuzzing is a highly
repetitive procedure providing a large number of trial-and-error
opportunities. As such, we propose a novel
incremental and
stochastic rewriting technique STOCHFUZZ that piggy-backs on
the fuzzing procedure. It generates many different versions of
rewritten binaries whose validity can be approved/disapproved by
numerous fuzzing runs. Probabilistic analysis is used to aggregate
evidence collected through the sample runs and improve rewrit-
ing. The process eventually converges on a correctly rewritten
binary. We evaluate STOCHFUZZ on two sets of real-world
programs and compare with ﬁve other baselines. The results
show that STOCHFUZZ outperforms state-of-the-art binary-only
fuzzers (e.g., e9patch, ddisasm, and RetroWrite) in terms of sound-
ness and cost-effectiveness and achieves performance comparable
to source-based fuzzers. STOCHFUZZ is publicly available [1].
I. INTRODUCTION
Grey-box fuzzing [2]–[5] is a widely used security testing
technique that generates inputs for a target program to ex-
pose vulnerabilities. Starting from some seed inputs, a fuzzer
repetitively executes the program while mutating the inputs.
The mutation is usually guided by coverage information. For
instance, a popular strategy is that input mutations leading to
coverage improvement are considered important and subject
to further mutations. As such, existing fuzzing engines rely
on instrumentation to track code coverage. Typically, they
leverage compilers to conduct instrumentation before fuzzing
when source code is available. However in many cases, only
binary executables are available. Various techniques have been
developed to support fuzzing applications without source code.
We call them binary-only fuzzing techniques.
Existing binary-only solutions fall
into three categories:
(1) leveraging hardware support, (2) leveraging on-the-ﬂy dy-
namic binary rewriting, and (3) relying on ofﬂine static binary
rewriting. The ﬁrst category makes use of advanced hardware
support such as Intel PT [6] to collect runtime traces that can
be post-processed to acquire coverage information. Such traces
record individual executed basic blocks, which are generated
∗Corresponding author
at a very high rate, and hence require substantial efforts to
process. In addition, it is difﬁcult to collect runtime infor-
mation other than control-ﬂow traces. The second kind uses
dynamic rewriting engines such as QEMU [7] and PIN [8],
which instrument a subject binary during its execution. They
trap execution of each new basic block and rewrite it on the
ﬂy. The rewritten basic block is then executed. The method
is sound but expensive due to the heavyweight machinery (4-
5 times slower than source based fuzzing according to our
experiment in Section VI). The third kind instruments the
binary just once before the whole fuzzing process. However,
sound static binary rewriting is an undecidable problem [9]
due to the lack of symbol information. It entails addressing
a number of hard challenges such as separating code and
data, especially inlined data [10], [11], and identifying indirect
jump and call targets [12], [13]. Existing solutions are either
based on heuristics and hence unsound [12], [14], or based on
restricted assumptions such as no inlined data is allowed [15]
and relocation information must be available [16]. However,
these assumptions are often not satisﬁed in practice. According
to our experiment in Section VI, a number of state-of-the-art
solutions, such as e9patch [15] and ddisasm [12] fail on real-
world binaries.
We observe that fuzzing is a highly repetitive process in
which a program is executed for many times. As such, it
provides a large number of chances for trial-and-error, allow-
ing rewriting to be incremental and progress with increasing
accuracy over time. We hence propose a novel incremental and
stochastic rewriter that piggy-backs on the fuzzing procedure.
It uses probabilities to model the uncertainty in solving the
aforementioned challenges such as separating data and code.
In other words, it does not require the binary analysis to
acquire sound results to begin with. Instead, it performs initial
rewriting based on the uncertain results. The rewritten binary is
very likely problematic. However, through a number of fuzzing
runs, the technique automatically identiﬁes the problematic
places and repairs them. The process is stochastic. It does
not use a uniform rewritten binary. Instead, it may rewrite the
binary differently for each fuzzing run by drawing samples
from the computed probabilities. It randomly determines if
bytes at some addresses ought to be rewritten based on the
likelihood that the addresses denote an instruction. As such,
the problematic rewritings are distributed and diluted among
© 2021, Zhuo Zhang. Under license to IEEE.
DOI 10.1109/SP40001.2021.00109
659
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:54 UTC from IEEE Xplore.  Restrictions apply. 
many versions, allowing easy fault localization / repair and
ensuring fuzzing progress. Note that if a binary contains too
many rewriting problems, the fuzzer may not even make rea-
sonable progress, signiﬁcantly slowing down the convergence
to precise rewriting. In contrast, during stochastic rewriting,
while some versions fail at a particular place, many other
versions can get through the place (e.g., as they do not rewrite
the place), which in turn provides strong hints to ﬁx the prob-
lem. The probabilities are updated continuously across fuzzing
runs as our technique sees more code coverage and ﬁxes more
rewriting problems, affecting the randomly rewritten versions.
At the end, the uncertainty is excluded when enough samples
have been seen, and the process converges on a stable and
precisely rewritten binary.
Our contributions are summarized as follows.
• We propose a novel incremental and stochastic rewriting
technique that
is particularly suitable for binary-only
fuzzing. It piggy-backs on fuzzing and leverages the
numerous fuzzing runs to perform trial-and-error until
achieving precise rewriting.
• The technique is facilitated by a lightweight approach that
determines the likelihood of each address denoting a data
byte. We formally deﬁne the challenge as a probabilistic
inference problem. However, standard inference algo-
rithms are too heavyweight and not sufﬁciently scalable
in our context, which requires recomputing probabilities
and drawing samples during fuzzing. We hence develop
a lightweight approximate algorithm.
• We develop a number of additional primitives to support
the process, which include techniques to automatically
locate and repair rewriting problems.
• We develop a prototype STOCHFUZZ and evaluate it
on the Google Fuzzer Test Suite [17], the benchmarks
from RetroWrite [16], and a few commercial binaries.
We compare it with state-of-the-art binary-only fuzzers
e9patch [15], ptfuzzer [18], ddisam [12], aﬂ-qemu [19]
and RetroWrite [16] and also with source based fuzzers
aﬂ-gcc [3] and aﬂ-clang-fast [20]. Our results show that
STOCHFUZZ outperforms these binary-only fuzzers in
terms of soundness and efﬁciency, and has comparable
performance to source based fuzzers. For example, it is
7 times faster than aﬂ-qemu, and successfully handles
all the test programs while other static binary rewriting
fuzzers fail on 12.5− 37.5% of the programs. Our fuzzer
also identiﬁes zero-days in commercial binaries without
any symbol information. We have conducted a case study
in which we port a very recent source based fuzzing
technique IJON [21] that tracks state feedback in addition
to coverage feedback, to support binary-only fuzzing.
It demonstrates the applicability of STOCHFUZZ. Our
system and benchmark corpora are publicly available [1].
II. MOTIVATION
In this section, we use an example to illustrate the limita-
tions of existing binary-only fuzzing techniques and motivate
ours. Fig. 1 presents a piece of assembly code for illustration
Fig. 1: Motivation example
purpose (its functionality is irrelevant). The right side of the
ﬁgure depicts its execution trace - where the executed instruc-
tions, destination registers, and evaluation results are listed in
the ﬁrst three columns, respectively. The last column presents
the related section(s) if the evaluated result is address relevant.
For example, the value 25 generated by the instruction at
address 10 denotes an address in the .DATA section while the
value 29 generated by the instruction at address 20 denotes an
address in .CODE1.
As shown, the snippet consists of three code sections (i.e.,
.CODE0, .CODE1, and .CODE2) and an interleaved data
section .DATA. The ﬁrst two instructions (at addresses 0 and
7) in .CODE0 load a constant 13 to rbx, and then store
it in a memory location denoted by [rax]. The constant
13 denotes the offset between the .CODE2 section and the
.DATA section,
i.e., 38-25=13, and will be used later in
addressing. The three instructions at addresses 10, 17, and 20
calculate the address of label .CODE1. Speciﬁcally, r8 is ﬁrst
set to the address of .DATA via a PC-related lea instruction.
At address 17, an integer 4 representing the offset between
labels .CODE1 and .DATA is loaded from the memory
address denoted by [r8] (i.e., address 25) to edx, which
consequently updates rdx. Next, r8 is added to rdx. The
resulting rdx denotes the address of .CODE1. The subsequent
instruction at 23 triggers an indirect jump to label .CODE1.
The next two instructions at addresses 29 and 32 determine
the target of the indirect jump at address 35 (i.e., .CODE2) by
loading the offset 13 from [rax] and adding it to the address
of .DATA stored in r8. A syscall is invoked subsequently
once the indirect jump is triggered. Observe that the code
snippet has inlined data, indirect jumps, and complex address
computation, which pose substantial challenges to existing
binary-only fuzzers.
A. Limitations of Existing Technique
Recall that fuzzers need to collect runtime feedback such
as code coverage to guide input mutation. For binary-only
fuzzers, such feedback can be captured by a technique in
one of the following three categories: (1) hardware-assisted
tracing, (2) dynamic binary instrumentation, and (3) static
binary rewriting. In Table I, we summarize the characteristics
of existing techniques. Column 1 lists these techniques, with
the ﬁrst two being source-based AFL fuzzers using gcc and
clang compilers, ptfuzzer using hardware-assisted tracing, aﬂ-
qemu using dynamic instrumentation, and the others including
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:54 UTC from IEEE Xplore.  Restrictions apply. 
2660
.CODE0:0 :movrbx, 137 :  mov[rax], rbx10:  lear8, [rip+8]17:  movedx, [r8]20:  addrdx, r823:  jmprdx.DATA:25:  .int4.CODE1: 29:  movr9, [rax]32:  addr8, r935:  jmpr8.CODE2:38:  movrax, 6045:  syscallInstVarValNote0 : movrbx, 13rbx13.CODE2-.DATA7 : mov[rax], rbx[rax]13.CODE2-.DATA10: lear8, [rip+8]r825.DATA17: movedx, [r8]rdx4.CODE1-.DATA20: addrdx, r8rdx29.CODE123: jmprdxjmp.CODE1-29: movr9, [rax]r913.CODE2-.DATA32: addr8, r9r838.CODE235: jmpr8jmp.CODE2-38:movrax, 60rax60-45: syscall---TABLE I: Summary of different binary-only fuzzing instru-
mentation techniques, along with compiler instrumentation
(aﬂ-gcc and aﬂ-clang-fast). A1 denotes that the binary has