E2(s6)
syscall w. ret
[U1,C1]
E2(ua)
syscall w. arg
[U1,C1/C2]
E2(s5)
syscall w. arg
[U1,C1/C2]
E2(s6)
syscall w. arg
[U1,C1/C2]
E2(sr)
syscall w. arg
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
dst-port(7000), data-len
dst-port, src-port, srcIP,
dstIP
dst-port(X), srcIP, dstIP
dst-port(7000), data
src-port(X), data
src-port(X), data
process name(tcpdump),
execve()
process name(tcpdump),
getuid() (or getgid(),
geteuid(), getegid())
process name(tcpdump),
setresuid()
(or setregid())
process name(tcpdump),
personality()
process name(tcpdump),
access()
process name(tcpdump,
sh,xterm), execve(), ...
process name(tcpdump,sh),
pid,
getuid() with return value
process name(tcpdump),
recvfrom(...,arg2,...)
process name(tcpdump,sh),
pid, execve(arg1,...)
process name(tcpdump,sh),
pid, execve(arg1,...)
process name(tcpdump,sh),
pid,read(...,arg2,...)
port 7000. The third indicator checks that an X session is
opened. The fourth indicator is used to check if the con-
tent of packets to the 7000 port contains buffer overﬂow
code. Number ﬁve is used to reveal that an xterm window
is opened remotely, and number six reveals the root prompt
the user gets. There are a great deal of system calls appear-
ing in the sh and xterm processes that do not normally ap-
pear in the tcpdump log. These “unique” calls can be used
one and one, or there are several sequences of other calls
can be used.
4.3 Neptune analysis
The Neptune attack generates a great deal of interesting
entries in the network trafﬁc log, while both syslog and the
syscall logs contain very few and not very useful entries
from the attack. This may not be very strange since it is an
network protocol attack. The attack does not activate any
new processes and the only process that reveals any pres-
ence of the attack is the tcpdump process doing logging.
The only thing that can be seen in syslog are a few entries
from the preparatory events when the user connects to cer-
tain services. Table 6 shows the events and attack manifes-
tations for the Neptune attack. Table 7 shows the classiﬁed
indicators and the log elements they require.
The ﬁrst indicator is used for studying incoming packet
to the same port with the SYN and maybe ENC ﬂags set,
also source IP is useful to see if they come from the same
Table 6. Attack events for the Neptune attack
Attack events
Meta-Event 1: [P1,N2,V2,M3]
User action: Connect to port to test if it is open
System reaction: -
System response: Answer from service on port.
Meta-Event 1(v2): [P1,N2,V2,M2]
User action: Portscan
System reaction: -
System response: Answer from service on port.
Meta-Event 2: [P2,N1,V1,M1]
User action: Send 1000 attack packets
System reaction 1: receive packets
System reaction 2: conn. ﬁll memory buffer
System response: no response
Meta-Event 3: [P3,N2,V2,M2]
User action: Test port
System reaction 1: receive SYN packet
System reaction 2: full buffer prevents answer
System response: no response
Presence of attack
manifestations
Syslog
Tcp
Syscall
strong
-
no
weak
-
weak
no
no
no
no
no
no
no
no
strong
-
strong
strong
-
strong
strong
no
no
strong
strong
no
no
strong
strong
-
strong
weak
-
strong
no
weak
no
no
no
weak
no
no
Table 7. Summary of indicators and useful log data
for Neptune attack
Event
Log
Log elements
Indica-
tor class
[U1,C2]
[U2,C2]
#
1
2
3
E2(ua)
E2(sr)
tcpdump header
tcpdump header
[U2,C2]
E2(ua)
syscall seq.
dst-port, TCP-ﬂags, srcIP
dst-port, src-port, TCP-ﬂags,
srcIP, dstIP
process name(tcpdump),
recvfrom() or process name
(all other), a selected
collection of calls
computer. The second indicator can be used to check if a lot
of SYN packets are coming in to the same port, and does not
generate answers. The third indicator is used for checking if
there are very many packets received by tcpdump, but few
other processes are activated by these packets.
5 Discussion of attack analysis
The analysis of the tree attacks and the three types of log
sources done in this paper shows that the methodology is
feasible to use for different types of attacks and log sources.
However, automation of the manifestation extraction would
be useful, since this is rather time consuming.
5.1 Answering questions about the attacks
Some of the questions posed in Section 2 can be con-
nected to speciﬁc events of the attacks. Also, there seems
to be a relation between the questions and speciﬁc log el-
ements. The questions when did it happen?, who did it?
and from where was it done? can be answered in any at-
tack phase and by any of the events. These questions can
for example be connected to the syslog log elements date
and time, host or IP, and user name. Did someone attempt
to do something malicious? can be connected to the user
action part of the meta-events in phase one and two (prepa-
ration and execution). Did the malicious activity succeed?
is related to the system response and to some extent to the
system reactions in attack phase two. What effect did the
9
attack have on the system? is related to system response in
attack phase two and three. The last question; What did the
attacker change in the system? is related to the events in
attack phase three.
In the system call logs, it seems that for example the calls
open(), read() and recvfrom() has a connection to the ques-
tion did someone attempt to do something malicious? The
calls setresuid(), getuid() and execve() seems to often be in-
volved in answering the questions of did the malicious ac-
tivity succeed? and what effect did the attack have on the
system?
In network trafﬁc, source IP is the main tool for answer-
ing from where was it done?. The data part is necessary to
ﬁnd out more about who did it? Destination port and data
part may be useful for answering did someone attempt to do
something malicious? Not surprisingly, it is difﬁcult to see
the system reaction in network trafﬁc, which means that it
may be difﬁcult to answer what effect did the attack have on
the system?
5.2 Discussion of log sources
The usefulness of the information in the different log
sources vary substantially. As we can see, Syslog is not very
useful for any of the three attacks, Tcpdump and the System
call logs are ineffective for one attack each.
Syslog is not really useful for detecting any of the studied
attacks. Though, syslog can be of use for providing addi-
tional information through correlation, e.g. by providing
user and host name for sessions to system call analysis.
A simple addition to syslog, would be information about
the users effective user ID from the login process, which
probably would make it useful for detection the OpenSSH
attack. For the Tcpdump and Neptune attacks, we would
need messages from the operating system kernel that are
not easy to get.
Tcpdump is not possible to use for the OpenSSH attack,
but it is very useful for the Neptune and Tcpdump attacks.
For the Neptune attack, the packet header is the interest-
ing part, while in the Tcpdump attack the data part is the
most interesting. The log elements used in the three stud-
ied attacks are IP source and destination address, TTL, TCP
source and destination port, TCP ﬂags, data length, and the
data part.
System call logs. For the Neptune attack, the system calls
are not very informative, but for OpenSSH this is the only
log revealing the attack, and it is also very useful for the
Tcpdump attack. For both OpenSSH and Tcpdump it is pos-
sible to ﬁnd single system calls that can be used for detec-
tion, even if the system call arguments reveal more of what
is actually going on, and may be more useful for identifying
the attack. The log elements of the system calls, process
ID, process name, system call name, argument and return
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
value, are all useful in different indicators. The speciﬁc
system calls that are part of the indicators for the studied
attacks are execve(), open(), read(), write(), setresuid(), ge-
tuid(), geteuid(), chdir(), fstat64(), old mmap(), mprotect(),
recvfrom(), access(), and personality().
We have used both Strace and Syscalltracker in all our
logging experiments. Both have some advantages and dis-
advantages, even though they mainly do the same job.
Strace has the advantage of logging all system calls without
exceptions, for a single process. It is also easy to follow the
execution trace of a program and the processes it spawns,
since no other processes interfere with it. Strace also shows
the signals received by the process, Syscalltracker logs (al-
most) all system calls from all processes on the system. This
is an advantage since it is not always obvious which pro-
cesses that are affected by an attack. Syscalltracker logs
provide both the process name and process ID and are very
good for analysing which processes that are involved in an
attack. A major disadvantage of syscalltracker is it’s bad
impact on the performance of the host machine.
Addition of user identity information for processes in the
logs would probably improve the ability to detect some at-
tacks.
In our case, it would make it easier to detect the
OpenSSH attack. The real and effective user ID may be
added, and is already available in the Sun BSM system call
logging tool [Sun00]. User commands are complicated to
extract from the system call logs, because one letter is sent
in each system calls with other calls in between. These
would be easier to extract from a specialised user command
log.
6 Conclusions
This paper presents a framework for determining the log
data requirements for attack detection. We have suggested
methods for extracting the log entries that differ between an
attack event and the corresponding normal event and which
can be used for attack detection. We have also shown ex-
amples of how indicators can be created from these attack
manifestations, and how useful log elements can be deﬁned
from the indicators. The three attacks studied in this pa-
per differ in their demands on log data. One is not possi-
ble to detect with network trafﬁc logs, and one can not be
detected with system call logs. None of them can be de-
tected with only the information from syslog. This work
presents a good starting point in the search of a new infor-
mation source for attack detection and may be of help in the
construction of intrusion detection signatures. Automation
of the attack analysis is part of our ongoing work. Also,
further attacks should be studied to ﬁnd classes of attacks
with different demands on log data and further log sources
should be studied to ﬁnd the information that is most conve-
nient to log at the same time as it reveals as much as possible
of the attack.
7 Acknowledgements
Thanks to Magnus Almgren and Ulf Larsson for valu-
able discussions and suggestions in the construction of this
paper.
References
[ADD00] M. Almgren, H. Debar, and M. Dacier. Lightweight
tool for detecting web server attacks. In Proceedings
of the Network and Distributed System Security Sym-
posium, 2000.
[ALGJ98] Stefan Axelsson, Ulf Lindqvist, Ulf Gustafson, and
Erland Jonsson. An approach to UNIX security log-
ging.
In Proceedings of the 21st National Infor-
mation Systems Security Conference, Arlington, Vir-
ginia, USA, 1998.
[ATS+03] Christina Abad, Jed Taylor, Cigdem Sengul, William
Yurcik, Yuanyuan Zhou, and Ken Rowe. Log cor-
relation for intrusion detection: A proof of concept.
In Proceedings of the 19th Annual Computer Security
Applications Conference, Las Vegas, NV, USA, 2003.
Stephen E. Hansen and E. Todd Atkins. Automated
system monitoring and notiﬁcation with Swatch. In
Proceedings of the Seventh Systems Administration
Conference (LISA ’93), Monterey, CA, 1993.
[HA93]
[Kum95]
[KMT04] Kevin S. Killourhy, Roy A. Maxion, and Kymie M. C.
Tan. A defence-centric taxonomy based on attack
manifestations.
In Proceedings of the International
Conference on Dependable Systems and Networks
(DSN 2004), Florence, Italy, June 2004.
Sandeep Kumar. Classiﬁcation and Detection of
Computer Intrusions. PhD thesis, Purdue University,
West Lafayette, IN, USA, August 1995.
Ulf Lindqvist and Phillip A Porras.
eXpert-BSM:
A host-based intrusion detection solution for Sun
Solaris.
In Proceedings of the 17th Annual Com-
puter Security Applications Conference, New Or-
leans, Louisiana, USA, 2001.
Roy A Maxion. Masquerade detection using enriched
command lines. In International Conference on De-
pendable Systems & Networks (DSN-03), San Fran-
cisco, California, 2003.
[LP01]
[Max03]
[Roe99] Martin Roesch. SNORT - lightweight intrusion detec-
tion for networks. In Proceedings of the 13th Systems
Administration Conference - LISA ’99, Seattle, Wash-
ington, USA, 1999. USENIX.
Sun Microsystems, Inc., 901 San Antonio Road, Palo
Alto, CA, USA. SunSHIELD Basic Security Module
Guide, February 2000. http://docs.sun.com/
db/doc/806-1789.
[Sun00]
[VRKK03] G. Vigna, W. Robertson, V. Kher, and R.A. Kem-
merer. A stateful intrusion detection system for
world-wide web servers.
the
Annual Computer Security Applications Conference,
Las Vegas, Nevada, USA, 2003.
In Proceedings of
10
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE