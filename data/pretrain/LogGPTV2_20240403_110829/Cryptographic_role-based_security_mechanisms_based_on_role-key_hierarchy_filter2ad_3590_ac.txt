2. Non-degeneracy: e(G, H) 6= 1 unless G or H = 1.
(cid:39)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:78)(cid:72)(cid:92)(cid:11)(cid:71)(cid:78)(cid:12)
(cid:44)(cid:81)(cid:71)(cid:76)(cid:89)(cid:76)(cid:71)(cid:88)(cid:68)(cid:79)
(cid:47)(cid:82)(cid:74)(cid:76)(cid:81)
(cid:56)(cid:86)(cid:72)(cid:85)(cid:16)(cid:46)(cid:72)(cid:92)(cid:3)(cid:36)(cid:86)(cid:86)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:56)(cid:86)(cid:72)(cid:85)
(cid:36)(cid:86)(cid:86)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:51)(cid:72)(cid:72)(cid:85)(cid:80)(cid:76)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:16)(cid:46)(cid:72)(cid:92)(cid:3)
(cid:36)(cid:86)(cid:86)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:53)(cid:82)(cid:79)(cid:72)(cid:16)(cid:46)(cid:72)(cid:92)(cid:3)(cid:36)(cid:86)(cid:86)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:51)(cid:72)(cid:85)(cid:80)(cid:76)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:36)(cid:86)(cid:86)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:53)(cid:43)(cid:3)
(cid:53)(cid:82)(cid:79)(cid:72)(cid:3)(cid:43)(cid:76)(cid:72)(cid:85)(cid:68)(cid:85)(cid:70)(cid:75)(cid:92)
3. Computability: e(G, H) is eﬃciently computable.
Where, [a]P denotes the multiplication of a point P in ellip-
tic curve by a scalar a ∈ Zp. A bilinear map group system S
is a tuple S = hp, G1, G2, GT , ei composed of the objects as
described above. S may also include group generators in its
description.
5.2 Role-based Cryptosystem Scheme
Let H = {U, K, R, (cid:22)} is a role-key hierarchy with partial-
order (cid:22). Without loss of generality, we assume that the
total number of roles is m in H, i.e., R = {r1, r2, · · · , rm}.
We construct a RBC scheme as follows:
• Setup(s, Ψ): Let S = (p, G1, G2, GT , e) be a bilinear
map group system with randomly selected generators
G ∈ G1 and H ∈ G2, where G1 and G2 be bilinear
group of prime order p. This algorithm ﬁrst picks a
random integer τi ∈ Z∗
p for each role ri in role-key
hierarchy graph.2 We deﬁne
(cid:26) Ui = [τi]G ∈ G1 ∀ri ∈ R,
V = e(G, H)
∈ GT .
(4)
Each τi is called as the secret of a role and Ui is the
identity of a role. Further, it deﬁnes U0 = [τ0]G by
using a random τ0 ∈ Z∗
p. Thus, public parameter is
params = hH, V, U0, U1, · · · , Uci
(5)
and we keep mk = hG, τ0, τ1, · · · , τmi secret.
• GenRKey(params, ri): This is an assignment algo-
rithm for role encryption key from the setup parame-
ter pp. For a role ri, the role key pki can be computed
as follows:
(cid:26) pki = hH, V, Wi, {Uk}rk∈↑ri i
Wi =
(6)
U0 +Pri6(cid:22)rk
Uk,
1We require that no eﬃcient isomorphism G2 → G1 or G1 →
G2 is known, or G2 → G1 is known but its inverted G1 → G2
is unknown.
2Since the total number of roles is far less than the size of
space of keys, we can use an eﬃcient method to avoid the
collision of value of role keys, e.g., the fast sort algorithm
can be use to search the collision.
Figure 4: Role-based encryption ﬁle system.
Figure 4 illustrates a role-based encryption ﬁle system
constructed based on role-key hierarchy, where each role ri
is assigned to an encryption key pki and each user has a few
decryption keys {ski,j}. An administrator only needs to
keep the manager key mk, but the pki could be saved in the
public directory of the system. When a user ui,j in ri wants
to create an encrypted ﬁle, the RBAC systems encrypt the
ﬁle with a session key ek, then encrypt ek by using the user’s
pki. The result is placed in the ﬁle header Hdr after the user
gets the permissions from the RBAC systems. The user can
also allow an arbitrary subset of the authorized users to de-
crypt the ﬁle by performing proper assignments or making
the access control policy into S if necessary. When a user
ui,j wants to access an encrypted ﬁle, the session key ek is
recovered by ski,j, and the RBAC systems check whether
ui,j ∈ S or the access control policy in S is valid. The ﬁle
is decrypted by ek after the user gets the permissions from
the RBAC systems.
This scheme can provide following security features for ﬁle
systems:
1. Protection against data leakage on the physical de-
vice, possibly caused by an untrusted administrator, a
stolen laptop or a compromised server;
2. Detection and prevention of unauthorized data modiﬁ-
cations using a syncretic security mechanism based on
policy-based access control and dynamic cryptographic
technology;
3. Changing users’ access privileges by dynamically con-
verging the information of users’ decryption keys to
generate one-time role-based encryption keys; and
4. Enabling better scalability because all users are orga-
nized into a uniformed role-based cryptographic frame-
work. Most of cryptographic operations are performed
at role level rather than at user level.
6
where, {Uk}rk ∈↑ri is the set of all roles in ↑ ri, which
denotes the control domain for the role ri. It is clear
that Wi =hτ0 +Pri6(cid:22)rk
let ζi = τ0 +Pri6(cid:22)rk
τki G. For sake of simplicity,
τk, so that we have Wi = [ζi]G.
• AddU ser(mk, ID, ui,j): Given mk = hG, {τi}m
i=0i and
a user index ui,j in the role ri, the manager gener-
ates a unique decryption key by randomly selecting a
fresh xi,j = Hash(ID, ui,j) ∈ Z∗
p and deﬁning dki,j =
hAi,j, Bi,ji where
labi,j =
xi,j
∈ Z∗
p
Ai,j = h xi,j
Bi,j = h
ζi+xi,ji G ∈ G1,
ζi+xi,ji H ∈ G2.
1
Note that, the total number of users is unlimited in
each role.
(7)
Finally, the above process outputs the set of role keys
{pki} and the set of user keys {ski,j}. More importantly,
the security of user keys is not compromised even though
role keys are available in public.
Let us now turn to the problem of validity. We know
that two arbitrary roles have one of three relations: ri (cid:22) rj ,
rj (cid:22) ri, and ri||rj , so that partial order relation in role keys
can be deﬁned as
Xri6(cid:22)rk
Uk = Xrk∈Ind(ri)
Uk + Xrk∈Succ(ri)
Uk,
(8)
where, Ind(ri) and Succ(ri) denote the set of incomparable
roles and successors for ri, respectively. This is illustrated
in Figure 5 (the top is senior-most roles and the bottom is
junior-most roles), with the key representation of Wi on the
left of the node and Ui on the right. We ﬁrst prove that this
assignment works as required:
U U U U



0
5
2
6
3
7
U U U U




4
8
(cid:85)(cid:20)
U
1
U U U U




4
0
5
1
6
3
7
U U U U



(cid:85)(cid:21)
8
U
2
5
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
8
(cid:85)(cid:22)
U
3
U U U


0
6
3
7
U U U



5
8
(cid:85)(cid:23)
U
4
U U U U



0
2
4

U U U


6
7
U U U


0
6
2
7
U U U



4
8
(cid:85)(cid:24)
U
5
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
U U U U



0
5
7
(cid:85)(cid:25)
8
U
6
U U U


0
3
5
(cid:85)(cid:26)
U
7
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
U
0
(cid:85)(cid:27)
U
8
(cid:20)
(cid:21)
(cid:22)
(cid:23)

U U

6
8
(cid:20)
(cid:21)
(cid:22)
(cid:23)
Figure 5: Example of role-key relationship on RBC.
Theorem 1. Under the above assignment, ∪rj 6(cid:22)rk {τk} ⊂
∪ri 6(cid:22)rk {τk} if and only if rj ≺ ri.
Proof. The proof is immediate. First if rj ≺ ri, then we
have ri ∈ ∪rj (cid:22)rk {rk}, so that ∪ri (cid:22)rk {rk} ⊂ ∪rj (cid:22)rk {rk}. It
is easy to see that ∪rj 6(cid:22)rk {rk} ⊂ ∪ri 6(cid:22)rk {rk} still holds. In
terms of the corresponding relation between ri and τi, we