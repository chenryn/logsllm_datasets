vertices natively. The same state management implemented
on CLARION (See Section 4.1.2) to track pivot_root and
chroot calls and path traversal analogous to what was de-
scribed above for (1) will need to be implemented within
CamFlow.
2.4 Threat Model
We consider the OS kernel and audit subsystem, i.e., Linux
Audit, to be part of the trust computing base (TCB). We as-
sume that the OS kernel is well protected by existing kernel-
protection techniques [13, 38]. The integrity of Linux Audit
assures the ability to observe all system calls associated with
malicious activity in user space. If the attackers succeed in
compromising the kernel, they can disrupt the normal oper-
ation of Linux Audit and the kernel module used by CLAR-
ION. To address such attacks, the security of the TCB can
be bolstered using TPM-based approaches as used by prior
provenance-tracking systems [22, 35].
We further assume adversaries can only have limited or no a
priori privileges. Thus, we only consider a threat model where
attacks are launched from user space. This threat model is
based on what was used in prior provenance tracking systems,
and it is reasonable because the container virtualization does
not mitigate the effort required for attackers to compromise
the kernel. Implementing provenance tracking for containers
and addressing namespace virtualization problems shown in
Section 3 do not require additional information beyond what
is provided in the kernel, as described in Section 4. Finally,
the system may be subject to resource exhaustion attacks,
leading to missed events. We believe that the defense against
such attacks is outside the scope of this paper.
Figure 5: Mount Namespace: Failure and Success
3 Container Provenance Challenges
We elaborate on the soundness and clarity challenges intro-
duced by mishandling the effect of container virtualization in
each namespace. Through the analysis in this section, we also
ensure that the technique we propose in Section 4 covers all
the needed namespace interactions.
3.1 Soundness: Namespace Virtualization
As illustrated in the motivating example, fragmentation and
ambiguity are soundness issues caused by namespace virtu-
alization in provenance tracking. However, not every names-
pace triggers either or both issues. In Table 2, we provide a
deeper analysis about how each namespace impacts prove-
nance tracking and what events will be affected. In addition,
we use audit records from Linux Audit to demonstrate the
problem and show how the soundness challenge can extend
to other monitoring techniques such as Sysdig and LTTng.
3.1.1 PID Namespace
Figure 2 shows a problematic audit record. It is created by a
runC container runtime process inside a container and trying
to ﬁnish the initialization. Syscall value 56 means that it is
a clone system call, and its return value is the PID of the
cloned child process. Here, we can see that exit value is 2,
but the process 2 is usually a kernel-related process generated
when the system is booted. It suggests process 2 cannot be
the cloned child process of this runC runtime process, which
is conﬁrmed by our further investigation. So 2 cannot be the
global PID for the cloned child process. It can only be a
virtualized PID.
Figure 3 illustrates the subgraph exposing the fragmenta-
tion caused by PID namespace virtualization in the motivating
3992    30th USENIX Security Symposium
USENIX Association
type=SYSCALL msg=audit(1567029444.851:431219): arch=c000003e syscall=56success=yes exit=2 a0=3d0f00 a1=7f81aa8f8fb0 a2=7f81aa8f99d0a3=7f81aa8f99d0 items=0 ppid=5880 pid=5903 auid=4294967295 uid=0 gid=0euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295comm="runc:[2:INIT]" exe="/" key=(null)Host 1Container 1bashpid=2976forkbashpid=10catpid=3030execvecatpid=3030Host 1bashpid=2976ctr_pid=1forkcatpid=3030ctr_pid=10bashpid=3030ctr_pid=10execve(a) PID namespace failure(b) PID namespace successtype=SYSCALL msg=audit(1573775822.523:18757): arch=c000003e syscall=257success=yes exit=3 a0=ffffff9c a1=7fff09576970 a2=0 a3=0 items=1 ppid=22352pid=22422 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0fsgid=0 tty=pts0 ses=4294967295 comm="cat" exe="/bin/cat" key=(null)type=CWD msg=audit(1573775822.523:18757): cwd="/"type=PATH msg=audit(1573775822.523:18757): item=0 name="/etc/passwd"inode=67535 dev=00:2e mode=0100644 ouid=0 ogid=0 rdev=00:00nametype=NORMAL cap_fp=0000000000000000 cap_fi=0000000000000000cap_fe=0 cap_fver=0readcatpid=3030subtype:ﬁlepath:/etc/passwdcatpid=4146(a)Mount namespace failureHost 1catpid=3030ctr_pid=10subtype:ﬁlepath: /var/lib/docker/overlay2/container_hash/merged/etc/passwdctr_path: /etc/passwdreadcatpid=4146ctr_pid=4146(b)Mount namespace successContainer 1Host 1subtype:ﬁlepath: /etc/passwdctr_path:/etc/passwdreadreadMount
Network
IPC
User
Audit records related to process manipulation system calls (e.g.,
clone, fork) will be affected. In those records, the argument ﬁelds
and return value ﬁeld with PID semantics are virtualized but the PID
ﬁelds themselves are virtualized. This leads to a semantic inconsis-
tency.
Audit records related to ﬁle operation system calls, e.g., open, close
and read, will be affected. Just like the PID namespace, argument
ﬁelds with ﬁle path semantics will be virtualized. In addition, the ﬁle
path in CWD and PATH records will also be virtualized.
Audit records containing local IP addresses and local ports of a socket
will be affected. Examples include the bind system call, which is the
only system call directly providing local IP and local ports of a socket
in its arguments, and other system calls like the listen system call
providing socket ﬁle descriptors where local IP addresses and ports
can be indirectly extracted.
Audit records related to system calls handling SYSV IPC objects, i.e.,
message queue, semaphore and shared memory segmentation, and
the POSIX message queue will be affected, e.g., msgget, mq_open,
shm_open. The effect is that argument ﬁelds with the semantics of
the ID/name of a SYSV IPC object or a POSIX message queue are
virtualized.
The only affected data elements are UIDs and GIDs. They do not
lead to fragmentation in the provenance graph. As for ambiguity,
Linux Audit records can report the host view of UID and GID in the
corresponding ﬁelds of every audit record so that ambiguity will also
be resolved.
How each namespace impacts provenance tracking?
The aforementioned inconsistency leads to fragmentation in the prove-
nance graph when process creation happens, so the provenance track-
ing system fails to produce sound provenance information.
Two different ﬁles, accessed within two different containers, may
have the same name which leads to ambiguity. Thus the provenance
tracking system fails to produce sound provenance information.
Two sockets in two containers can have the same local IP address
and local port leading to ambiguity. Furthermore, sockets inside the
container are connected to a host port through port-mapping rules.
Without explicit understanding of this mapping information, the prove-
nance system fails to connect the incoming connection to the correct
sockets, leading to fragmentation.
Two IPC objects of the same type can have the same ID/name, and
this will lead to ambiguity in the provenance graph.
Since there is no impact, user namespace auditing is unchanged. Fur-
thermore, most container engines do not use the user namespace
in their default container initialization because it breaks access per-
mission to critical libraries on the host and storage features like bind
mount may be automatically disabled if the user namespace is enabled
in the container.
N/A
Namespace What events will be affected?
PID
Table 2: Namespace Virtualization: What / How Provenance?
Time, UTS
and Cgroup
These namespaces do not affect dataﬂow in practice and thus do not
directly impact provenance.
example. The bash process 2976 expects that it created child
process 10 which is actually process 3030.
3.1.2 Mount Namespace
Figure 4 shows a problematic audit record. A system call
openat (inferred by syscall=257) is invoked by a process
trying to read /etc/passwd in the container. As we can
see, the CWD is / and the PATH is /etc/passwd. In
fact, all ﬁles inside the container are stored under some
directory speciﬁc to this container. This speciﬁc directory
may vary due to different container engine choices. Taking
Docker as an example, the speciﬁc directory is usually
/var/lib/docker/overlay2/container_hash/merged/
where container_hash is a hash string related to this
container. So to get the global paths of the CWD / and the
PATH /etc/passwd, the path of the speciﬁc directory needs
to be added to them as the preﬁx.
Figure 5 illustrates the subgraph exposing the mount names-
pace virtualization problem described in the motivation ex-
ample. Two cat processes (with PIDs 3030 and 4146), are
attempting to read the /etc/passwd ﬁle, and the two ﬁles are
confused with each other without mount-namespace aware-
ness. CLARION’s host-container mapping enables us to
easily distinguish between them.
3.1.3 Network Namespace
Figure 6 illustrates the subgraph exposing the network names-
pace virtualization problem in the motivation example. Two
nc processes (PID 3043 and 4149) are listening on socket
(0.0.0.0/4000) within their respective containers, and one of
them accepts a connection from (10.0.2.15/3884). Since the
local IP addresses/ports are virtualized and remote IP ad-
dresses/ports are the same, the two sockets can be confused
with each other without network-namespace awareness. With-
out establishing the host-container mapping of sockets inside
the container, we are unable to attribute the connection to a
socket inside the container, as illustrated in Figure 6.
3.1.4 Soundness Challenge on Other Audit Subsystems
We further investigated the impact of container virtualiza-
tion on two alternative Linux audit subsystems, speciﬁcally
Sysdig [21] and LTTng [16], to assess whether soundness
challenge impacts other systems besides Linux Audit. We
summarize our ﬁndings in Table 3. We ﬁnd that Sysdig suf-
fers from the same soundness challenges confronted by Linux
Audit. LTTng provides host-container ID mappings using
more low-level events3 but the soundness challenge in mount
namespace still persists. Our investigation shows that sound-
ness challenge is not speciﬁc to Linux Audit.
3.1.5 Soundness Challenge on Rootless Containers
Rootless containers refer to the containers that can be cre-
ated, run, and managed by unprivileged users. They differ
from traditional containers in which they have a new unprivi-
3For example, the sched_process_fork event.
USENIX Association
30th USENIX Security Symposium    3993
Namespace
PID
Mount
Network
IPC
User
Time, UTS
and Cgroup
Sysdig
Soundness challenge persists because the return values and the ar-
guments providing PID semantics will be virtualized in the audit
records corresponding to process manipulation system calls, e.g.,
clone, fork.
Soundness challenge persists because the data ﬁelds providing ﬁle
path semantics, e.g., name and filename, will be virtualized in the
audit records corresponding to ﬁle operation system calls, e.g., open,
close, and read.
Soundness challenge persists. The data ﬁelds having local IP ad-
dresses/ports will be virtualized. Examples include the argument
(addr) of a bind system call and the translation of the argument (fd)
being the socket ﬁle descriptor of a listen system call.
Soundness challenge persists. Names/IDs of a SYSV IPC object or a
POSIX message queue will be virtuailzed.
The return values and arguments of UID-manipulation system calls
will be virtualized but soundness is not affected.
These do not affect dataﬂow in practice and thus do not directly
impact provenance.
Table 3: Provenance Soundness on Sysdig and LTTng
LTTng
Soundness challenge persists if only system call events are used
in provenance tracking system because the return values and the
arguments providing PID semantics will be virtualized. However,
LTTng can provide the host-container PID mapping which eliminates
the PID namespace soundness challenge.
Soundness challenge persists because the data ﬁelds providing ﬁle
path semantics, e.g., filename, will be virtualized.
Local IP addresses and ports are still affected. However, since LT-
Tng does not explicitly transform the addr argument in the bind
system call to a socket address, the soundness challenge in network
namespace is less severe.
Soundness challenge persists. Names/IDs of a SYSV IPC object
or a POSIX message queue virtualized by IPC namespace will be
virtuailzed.
Soundness is not affected. Furthermore, clarity can be achieved since
the UID/GID host-container mapping is provided.
These do not affect dataﬂow in practice and thus do not directly
impact provenance.
have the privileges to do so.
As summarized in Table 2, the user namespace does not
affect the soundness of provenance analysis. Further, although
rootless containers have slightly different implementations
for ﬁlesystem and networking (mentioned above), to support
unprivileged root users, they do not affect provenance. Thus,
we claim that rootless containers share the same soundness
challenges faced by traditional containers.
3.1.6 Soundness Challenge on Other OS Platforms
We also investigated two alternative resource isolation tech-
niques, speciﬁcally FreeBSD Jails and Solaris Zones, to see
whether soundness challenge can also occur in other platforms.
We summarize our ﬁndings in Table 4. Our key ﬁnding is that
if semantics inconsistency exists in the low-level audit events
related to virtualized system resources (e.g., PIDs, ﬁle paths,
network addresses/ports), the resource-isolation technology
will suffer from the soundness challenge. We assume this
ﬁnding also extends to other OS platforms like Windows and
MacOS. Semantic inconsistencies are at the core of the sound-
ness challenge so the key to make CLARION feasible on
those platforms is to systematically address such inconsisten-
cies.
3.2 Clarity: Essential Container Semantics
We describe the challenges involved in automating the com-
prehension of essential container semantics. This is a feature
that is unique to our provenance tracking system, and we
believe it can greatly simplify the understanding and analy-
sis of dataﬂow provenance in container-based microservice
environments.
An important aspect of forensic analysis is accurately know-
ing what subgraphs correspond to which container so that we
tunnel between namespaces in container networks.
Figure 6: Network Namespace: Failure and Success
leged user namespace. In this user namespace, all UIDs and
GIDs are mapped from the global user namespace, including
a pseudo-root user. This core difference causes further effects
in ﬁlesystem and networking in the rootless container. For
ﬁlesystem, many Linux distributions do not allow mounting
overlay ﬁlesystems in user namespaces. This limitation makes
rootless containers inefﬁcient. For networking, virtual Ether-
net (veth) devices4 cannot be created as only real root users
4Veth devices are a special type of Linux interface used in virtual net-
working. They are always created in pairs and usually serve as local Ethernet
3994    30th USENIX Security Symposium
USENIX Association
(a)Network namespace failureHost 1 (10.0.2.5)ncpid=3043ctr_pid=11Container 1acceptncpid=4149ctr_pid=4149Host 2 (10.0.2.15)connectconnectncpid=3212ctr_pid=3212ctr_laddr: 0.0.0.0ctr_lport: 4000host_laddr:10.0.2.5host_lport:8000raddr: 10.0.2.15rport: 3884ctr_laddr:10.0.2.15ctr_lport: 3884host_laddr:10.0.2.15host_lport: 3884raddr: 10.0.2.5rport: 4000ctr_laddr:10.0.2.15ctr_lport: 3884host_laddr:10.0.2.15host_lport: 3884raddr: 10.0.2.5rport: 8000acceptHost 1 (10.0.2.5)ncpid=3043ncpid=4149acceptHost 2 (10.0.2.15)ncpid=3212connectconnectladdr: 0.0.0.0lport: 4000raddr: 10.0.2.15report: 3884acceptladdr:10.0.2.15lport:3884raddr:10.0.2.5rport:4000Connectedladdr:10.0.2.15lport: 3884raddr: 10.0.2.5rport: 8000(b)Network namespace successctr_laddr: 0.0.0.0ctr_lport: 4000host_laddr: 10.0.2.5host_lport: 4000raddr: 10.0.2.15rport: 3884ConnectedConnectedResource
Process
Filesystem
Network
IPC
User
Time, UTS
and Cgroup
BSD Jail
BSD Jails use JID (Jail ID) to mark the processes inside a jail. Thus no
virtualized PID is used and no soundness challenge will be introduced.
Ambiguity exists because ﬁlesystem isolation is also achieved by
chroot-like operation and ﬁle path will be virtualized while the root
directory path is speciﬁed by jail system call.
This depends on what network isolation method is applied. If bind-
ﬁltering is applied, sockets are actually created under host network
stack so that no soundness challenge would occur. Otherwise, if
epair of VNET is used for network isolation, each jail would have a
completely separate network stack just like what happens in Linux
network namespace. Then both fragmentation and ambiguity can
exist.
Ambiguity exists. POSIX IPC objects are naturally isolated and Sys-
tem V IPC objects can be isolated with speciﬁc parameters so two
IPC objects can have the same ID/name.
The same provenance effect as that in Table 2 will occur for jails.
These do not affect dataﬂow in practice and thus do not directly
impact provenance.
Table 4: Provenance Soundness in BSD Jails and Solaris Zones
Solaris Zone
Zone ID is used to isolate the processes. Thus no virtualized PID is
used and no soundness challenge will be introduced.
Ambiguity exists because a Zone needs a new root directory to be
speciﬁed.