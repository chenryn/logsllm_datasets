\+­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­+
\| information schema \|
\| mysql \|
\| creditcardnumbers \|
\| performance_schema \|
\+­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­+
4 rows in set (0.26 sec)
啊哈！我们找到了一个值得探索的名字为**creditcardnumbers**的数据库。让我们尝试连接到它。
在MySQL中，与其他数据库管理系统（DBMS）一样，我们可以通过输入**use
databasename** 连接到我们感兴趣的数据库。
mysql \>use creditcardnumbers;
Database changed
数据库更改的响应表明我们现在已连接到**creditcardnumbers**数据库。
当然，不言而喻，数据库管理员不太可能如此容易地将数据库命名为信用卡号，因此您可能需要进行一些探索以找到感兴趣的数据库。
#### *数据库表*
我们现在已连接到**creditcardnumbers**数据库，可以进行一些探索以查看它可能包含的信息。数据库中的数据被组织成表格，每个表格可能包含一组不同的相关数据。我们可以通过输入以下命令找出此数据库中的表：
mysql \>show tables;
\+­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­+
\| Tables_in_creditcardnumbers \|
\+­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­+
\| cardnumbers \|
\+­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­+
1 row in set (0.14 sec)
在这里，我们可以看到该数据库中只有一个表，称为**cardnumbers**。通常，数据库中会有很多表，因此您可能需要进行更多的监听。在这个示例数据库中，我们很幸运能够将注意力集中在这个单独的表格中，以提取黑客的金羊毛！
既然我们想要检查一个表，我们需要了解该表的结构。一旦我们知道如何设置表，我们就可以提取相关信息。
您可以使用**describe**语句查看数据库的表的结构，如下所示：
mysql \>describe cardnumbers;
\+­­­­­­­­­­­­­­­+­­­­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­+
\| Field \| Type \| Null \| Key \| Default \| Extra \|
\+­­­­­­­­­­­­­­­+­­­­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­+
\| customers \| varchar(15) \| YES \| \| NULL \| \|
\| address \| varchar(15) \| YES \| \| NULL \| \|
\| city \| varchar(15) \| YES \| \| NULL \| \|
\| state \| varchar(15) \| YES \| \| NULL \| \|
\| cc \| int(12) \| NO \| \| 0 \| \|
\+­­­­­­­­­­­­­­­+­­­­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­+
MySQL使用我们感兴趣的表结构的关键信息进行响应。我们可以看到每个字段的名称以及它所拥有的数据类型（通常是文本类型varchar或整数类型int）。我们还可以看到它是否会接受NULL值，密钥（如果存在）（密钥链接表），字段可能具有的任何默认值，以及最后的任何额外信息，例如注释。
#### *查看数据*
要实际查看表中的数据，我们使用**SELECT**命令。
**SELECT**命令要求您知道以下信息：
-   包含要查看的数据的表
-   该表中包含要查看的数据的列
我们按以下格式列出：
SELECT columns FROM table
作为查看所有列数据的便捷快捷方式，我们可以使用星号作为通配符，而不是键入我们想要查看的每个列名。因此，要查看**cardnumbers**表中所有数据的转储，我们输入以下内容：
mysql \>SELECT \* FROM cardnumbers;
\+­­­­­­­­­­­+­­­­­­­­­­­­­­­+­­­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­­­­­­+
\| customers \| address \| city \| state \| cc \|
\+­­­­­­­­­­­+­­­­­­­­­­­­­­­+­­­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­­­­­­+
\| Jones \| 1 Wall St \| NY \| NY \| 12345678 \|
\| Sawyer \| 12 Piccadilly \| London \| UK \| 234567890 \|
\| Doe \| 25 Front St \| Los Angeles \| CA \| 4567898877 \|
\+­­­­­­­­­­­+­­­­­­­­­­­­­­­+­­­­­­­­­­­­­+­­­­­­­­­+­­­­­­­­­­­­­­+
如您所见，MySQL已将**cardnumbers**表中的所有信息显示在屏幕上。
我们找到了黑客的金羊毛！
#### *PostgreSQL与Metasploit*
**PostgreSQL**，或**Postgres**，是另一个开源关系数据库，由于其能够轻松扩展并处理繁重的工作负载，因此常用于非常大的互联网应用程序。它于1996年7月首次发布，由一大批名为PostgreSQL全球开发组的开发人员维护。
默认情况下，PostgreSQL也安装在Kali中，但是如果您使用的是另一个Linux发行版，它可能会在您的存储库中，您可以通过输入以下命令来安装它：
kali \>apt-get postgres install
作为一名黑客，你会发现PostgreSQL特别重要，因为它是最广泛使用的渗透测试和攻击框架Metasploit的默认数据库。Metasploit使用PostgreSQL存储其模块，以及扫描和利用的结果，以便于在渗透测试或黑客攻击中使用。出于这个原因，我们将在Metasploit的上下文中使用PostgreSQL。
与Linux中的几乎所有服务一样，我们可以通过输入服务来启动PostgreSQL应用程序启动，如下：
kali \>service postgresql start
随着PostgreSQL的启动和运行，让我们启动**Metasploit**：
kali \>msfconsole
请注意，当Metasploit完成启动时，您将看到msf\>提示符。
教您如何使用Metasploit进行黑客攻击和开发目的超出了本书的范围，但在这里我们将建立Metasploit将其信息存储在其中的数据库。
在Metasploit运行的情况下，我们可以使用以下命令设置PostgreSQL，以便它存储来自系统上任何Metasploit活动的数据：
msf \>msfdb init
[\*] exec :msfdb init
Creating database use 'msf'
Enter password for new role
Enter it again:
Creating databases 'msf' and 'msf_test'
Creating configuration file /usr/share/metasploit­framework/config/database.yml
Creating initial database schema
接下来，我们需要以root身份登录**Postgres**。在这里，我们在命令前加上**su**，即“switch
user”命令，以获取root权限：
msf \>su postgres
[\*] su postgres
postgres\@kali:/root\$
登录Postgres时，您会看到提示已更改为**postgres\@kali:/root\$**，表示应用程序，主机名和用户。
在下一步中，我们需要创建用户和密码，如下所示：
postgres\@kali:/root\$ createuser msf_user -P
Enter Password for new role:
Enter it again:
我们使用带有**createuser**命令的**-P**选项创建用户名msf_user。
然后输入所需的密码两次。接下来，您需要创建数据库并为msf_user授予权限。将数据库命名为hackers_arise_db，如下所示：
postgres\@kali:/root\$ createdb - owner=msf_user hackers_arise_db
postgres\@kali:/root\$ exit
当您使用exit命令退出Postgres时，终端将回退到msf\>提示符。
接下来，我们必须通过定义以下内容将我们的Metasploit控制台msfconsole连接到PostgreSQL数据库：
-   **user**
-   **password**
-   **host**
-   **database name**
在我们的例子中，我们可以使用以下命令将msfconsole连接到我们的数据库：
msf \>db_connect msf_user:password\@127.0.0.1/hackers_arise_db
当然，您需要提供之前使用的密码。IP地址是本地系统（localhost）的IP地址，因此除非在远程系统上构建此数据库，否则可以使用127.0.0.1。
最后，我们可以检查PostgreSQL数据库的状态以确保它已连接：
msf \>db_status
[\*] postgresql connected to msf
如您所见，Metasploit响应返回PostgreSQL数据库已连接并可以使用。现在，当我们使用Metasploit进行系统扫描或运行漏洞时，结果将存储在PostgreSQL数据库中。此外，Metasploit现在将其模块存储在Postgres数据库中，使得搜索正确的模块变得更加容易和快捷！
### 总结
Linux有许多服务在后台运行，直到用户需要它们 Apache Web
Server是使用最广泛的，但是黑客也应该熟悉MySQL，SSH和PostgreSQL来完成各种任务。在本章中，我们介绍了开始使用这些服务的绝对基础知识。一旦您对Linux系统感到满意，我建议您进一步探索这些服务。
13
--
安全和匿名
----------
BECOMING SECURE AND ANONYMOUS
![](media/451fdbee142e8cd4684d71b24707d050.jpg)
今天，几乎我们在互联网上做的一切都被跟踪。无论是谷歌跟踪我们的在线搜索、网站访问和电子邮件，还是美国国家安全局(NSA)对我们的所有活动进行编目，无论谁在跟踪我们，我们的每一次在线活动都会被记录、编入索引，然后被挖掘出来，以造福他人。普通个人，尤其是黑客，需要了解如何限制这种跟踪，并在网上保持相对匿名，以限制这种无处不在的监视。
在本章中，我们将介绍如何使用以下四种方法匿名(或尽可能接近)浏览互联网：
-   The Onion Network
-   洋葱网络
-   代理服务器
-   虚拟专用网络
-   私有加密的电子邮件
没有一种方法能保证你的活动不被窥探，如果有足够的时间和资源，任何事情都能被追踪。然而，这些方法可能会使跟踪器的工作更加困难。
### 互联网是如何出卖我们的
首先，让我们从更高的层次来讨论我们在互联网上的活动是如何被跟踪的。我们不会讨论所有的跟踪方法，也不会过多地讨论任何一种方法的细节，因为这超出了本书的范围。事实上，这样的讨论可能会占用一整本书的篇幅。
首先，您的IP地址标识您在互联网上的身份。从您的机器发送的数据通常会被标记为您的IP地址，从而使您的活动易于跟踪。其次，谷歌和其他电子邮件服务将“阅读”您的电子邮件，寻找关键词，以更有效地为您服务广告。让我们先来看看IP地址是如何在互联网上泄露信息的。
当您通过互联网发送数据包时，它包含数据的源和目标的IP地址。通过这种方式，数据包知道它要去哪里以及在哪里返回响应。每个数据包通过多个互联网路由器跳转，直到找到它的目的地，然后跳转回发送方。对于一般的互联网冲浪，每一跳都是数据包通过路由器到达目的地。发送方和目的地之间可以有多达20-30跳，但通常任何数据包在不到15跳的时间内就能找到到达目的地的路径。