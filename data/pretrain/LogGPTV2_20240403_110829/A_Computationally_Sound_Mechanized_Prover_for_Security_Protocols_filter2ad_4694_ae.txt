new r(cid:2) : T (cid:2)
r; enc(x, kgen(r), r(cid:2))
≈ !i(cid:2)≤n(cid:2)
new r : Tr; !i≤n(x : bitstring) →
new r(cid:2) : T (cid:2)
r; enc
(cid:2)(Z(x), kgen
(cid:2)(r), r(cid:2))
(enceq)
(cid:2) are function symbols with the same
where enc(cid:2) and kgen
types as enc and kgen respectively, and Z : bitstring →
bitstring is the function that returns a bitstring of the same
length as its argument, consisting only of zeroes. Using
equations such as ∀x : T, Z(T2b(x)) = ZT , we can prove
that Z(T2b(x)) does not depend on x when x is of a ﬁxed-
length type and T2b : T → bitstring is the natural injec-
tion. The representation of other primitives can be found
in [17].
We use such equivalences L ≈ R in order to trans-
form a process Q0 observationally equivalent to C[[[L]]]
into a process Q(cid:2)
0 observationally equivalent to C[[[R]]],
for some evaluation context C.
In order to check that
Q0 ≈ C[[[L]]], the prover uses sufﬁcient conditions, which
essentially guarantee that all uses of certain secret variables
of Q0, in a set S, can be implemented by calling functions
of L. Let M be a set of occurrences of terms, correspond-
ing to uses of variables of S. Informally, the prover shows
the following properties. The variables of S occur only in
terms of M. For each M ∈ M, there exist a term NM ,
result of a function of L, and a substitution σM such that
M = σM NM . (Precisely, σM applies to the abbreviated
form of NM in which we write x instead of x[(cid:2)i].) Let(cid:2)i and
(cid:2)i(cid:2) be the sequences of current replication indexes at NM
in L and at M in Q0, respectively. There exists a func-
tion mapIdx M that maps the array indexes at M in Q0 to
the array indexes at NM in L: the evaluation of M when
(cid:2)i(cid:2) = (cid:2)a will correspond in C[[[L]]] to the evaluation of NM
when (cid:2)i = mapIdx M ((cid:2)a). Thus, σM and mapIdx M induce
a correspondence between Q0 and L: for all M ∈ M, for
all x[(cid:2)i(cid:2)(cid:2)] that occur in NM , (σM x){(cid:2)a/(cid:2)i(cid:2)} corresponds to
x[(cid:2)i(cid:2)(cid:2)]{mapIdx M ((cid:2)a)/(cid:2)i}, that is, (σM x){(cid:2)a/(cid:2)i(cid:2)} in a trace of
Q0 has the same value as x[(cid:2)i(cid:2)(cid:2)]{mapIdx M ((cid:2)a)/(cid:2)i} in the cor-
responding trace of C[[[L]]] ((cid:2)i(cid:2)(cid:2) is a preﬁx of(cid:2)i).
= NM2
r, x(cid:2)(cid:2)
1, kgen(xr), x(cid:2)
For example, consider a process Q0 that contains M1 =
enc(M (cid:2)
r[i1]) and M2 = enc(M (cid:2)
2, kgen(xr),
r, x(cid:2)(cid:2)
x(cid:2)(cid:2)
r [i2]) with i1 ≤ n1, i2 ≤ n2, and xr, x(cid:2)
r bound
by restrictions. Let S = {xr, x(cid:2)
r }, M = {M1, M2},
= enc(x[i(cid:2), i], kgen(r[i(cid:2)]), r(cid:2)[i(cid:2), i]).
and NM1
The functions mapIdx M1 and mapIdx M2 are deﬁned by
(a1) = (1, a1) for a1 ∈ [1, Iη(n1)] and
mapIdx M1
(a2) = (1, a2 + Iη(n1)) for a2 ∈ [1, Iη(n2)].
mapIdx M2
Then M (cid:2)
r[a1]
to r(cid:2)[1, a1], M (cid:2)
r [a2]
1{a1/i1} corresponds to x[1, a1], xr to r[1], x(cid:2)
2{a2/i2} to x[1, a2 + Iη(n1)], and x(cid:2)(cid:2)
to r(cid:2)[1, a2 + Iη(n1)].
The functions mapIdx M1 and
mapIdx M2 are such that xr(cid:2)[a1] and xr(cid:2)(cid:2) [a2] never corre-
spond to the same cell of r(cid:2); indeed, xr(cid:2)[a1] and xr(cid:2)(cid:2)[a2]
are independent random numbers in Q0, so their images in
C[[[L]]] must also be independent random numbers.
The above correspondence must satisfy the following
soundness conditions: when x is a function argument in L,
the term that corresponds to x[(cid:2)a(cid:2)] must have the same type
as x[(cid:2)a(cid:2)], and when two terms correspond to the same x[(cid:2)a(cid:2)],
they must evaluate to the same value; when x is bound by
new x : T in L, the term that corresponds to x[(cid:2)a(cid:2)] must be
evaluate to z[(cid:4)a(cid:2)(cid:2)] where z ∈ S and z is bound by new z : T
in Q0, and the relation that associates z[(cid:4)a(cid:2)(cid:2)] to x[(cid:2)a(cid:2)] is an
injective function. (It is easy to check that, in the previous
example, these conditions are satisﬁed.)
The transformation of Q0 into Q(cid:2)
0 consists in two steps.
First, we replace the restrictions that deﬁne variables of S
with restrictions that deﬁne fresh variables corresponding
to variables bound by new in R. The correspondence be-
tween variables of Q0 and variables C[[[L]]] is extended to
include these fresh variables. Second, we reorganize Q0
so that each evaluation of a term M ∈ M ﬁrst stores
the values of the arguments x1, . . . , xm of the function
(x1 : T1, . . . , xm : Tm) → NM in fresh variables, then
computes NM and stores its result in a fresh variable, and
uses this variable instead of M; then we simply replace the
computation of NM with the corresponding functional pro-
cess of R, taking into account the correspondence of vari-
ables.
The full formal description of this transformation is
given in [17]. The following proposition shows the sound-
ness of the transformation.
Proposition 3 Let Q0 be a process that satisﬁes Invari-
ants 1, 2, and 3, and Q(cid:2)
0 the process obtained from Q0
by the above transformation. Then Q(cid:2)
0 satisﬁes Invari-
ants 1, 2, and 3, and if [[L]] ≈ [[R]] for all polynomials
maxlenη(cj0,...,jl
) and Iη(n) where n is any replication
bound of L or R, then Q0 ≈V Q(cid:2)
0.
Example 3 In order to treat Example 1,
the prover is
given as input the indication that Tmr, Tr, T (cid:2)
r, and Tk are
ﬁxed-length types; the type declarations for the functions
(cid:2) : Tmr → Tmk, mac, mac(cid:2) : bitstring ×
mkgen, mkgen
(cid:2) : bitstring × Tmk × Tms →
Tmk → Tms, check , check
(cid:2) : Tr → Tk, enc, enc(cid:2) : bitstring × Tk ×
bool, kgen, kgen
T (cid:2)
r → Te, dec : Te × Tk → bitstring ⊥, k2b : Tk →
bitstring, i⊥ : bitstring → bitstring ⊥, Z : bitstring →
bitstring, and the constant Zk
the equa-
tions (mac), (mac(cid:2)), (enc), and ∀x : Tk, Z(k2b(x)) = Zk
(which expresses that all keys have the same length); the in-
dication that k2b and i⊥ are poly-injective (which generates
the equations (k2b) and similar equations for i⊥); equiva-
: bitstring;
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
lences L ≈ R for mac (maceq) and encryption (enceq); and
the process Q0 of Example 1.
r}, M1 = mac(xm[i], mkgen(x(cid:2)
The prover ﬁrst applies RemoveAssign(xmk) to the
process Q0 of Example 1, as described in Example 2. The
process can then be transformed using the security of the
mac. We take S = {x(cid:2)
r)),
r), xma[i(cid:2)]), and M =
M2 = check (x(cid:2)
= mac(x[i(cid:2)(cid:2), i], mkgen(r[i(cid:2)(cid:2)])),
{M1, M2}. We have NM1
check (m[i(cid:2)(cid:2), i(cid:2)], mkgen(r[i(cid:2)(cid:2)]), ma[i(cid:2)(cid:2), i(cid:2)]),
=
NM2
(a2) = (1, a2),
(a1) = (1, a1), and mapIdx M2
mapIdx M1
so xm[a1] corresponds to x[1, a1], x(cid:2)
m[a2] to
m[1, a2], and xma[a2] to ma[1, a2].
m[i(cid:2)], mkgen(x(cid:2)
r to r[1], x(cid:2)
After transformation, we get the following process Q(cid:2)
0:
Q(cid:2)
Q(cid:2)
Q(cid:2)
B)
A | Q(cid:2)
k : Tk; new x(cid:2)(cid:2)
0 = start(); new xr : Tr; let xk : Tk = kgen(xr) in
new x(cid:2)
r : Tmr; c(cid:5)(cid:6); (Q(cid:2)
A = !i≤ncA[i](); new x(cid:2)
let xm : bitstring = enc(k2b(x(cid:2)
(cid:2)(x(cid:2)
cA[i](cid:5)xm, mac
B = !i(cid:2)≤ncB[i(cid:2)](x(cid:2)
ﬁnd u ≤ n suchthat deﬁned (xm[u]) ∧ x(cid:2)
r), xma) then
r : T (cid:2)
r;
k), xk, x(cid:2)(cid:2)
r ) in
r))(cid:6)
(cid:2)(xm, mkgen
m, xma);
(cid:2)(x(cid:2)
check
m, mkgen
(if 1 then let i⊥(k2b(x(cid:2)(cid:2)
(cid:2)(x(cid:2)
k)) = dec(x(cid:2)
m = xm[u] ∧
m, xk) in cB[i(cid:2)](cid:5)(cid:6))
else
(if 0 then let i⊥(k2b(x(cid:2)(cid:2)
k)) = dec(x(cid:2)
m, xk) in cB[i(cid:2)](cid:5)(cid:6))
(cid:2)(x(cid:2)
(cid:2)(x(cid:2)
m, mkgen(x(cid:2)
r)) is replaced with mac(cid:2)(xm, mkgen
m = xm[u] ∧ check
r), xma) then 1 else 0 which yields Q(cid:2)
The initial deﬁnition of x(cid:2)
r is removed and replaced with a
new deﬁnition, which we still call x(cid:2)
r. The term mac(xm,
mkgen(x(cid:2)
r)). The
term check (x(cid:2)
r), xma) becomes ﬁnd u ≤ n
suchthat deﬁned (xm[u]) ∧ x(cid:2)
m,
B after
mkgen
transformation of functional processes into processes. The
process looks up the message x(cid:2)
m in the array xm, which
contains the messages whose mac has been computed with
key mkgen(x(cid:2)
m has never been com-
puted, the check always fails (it returns 0) by the deﬁni-
tion of security of the mac. Otherwise, it returns 1 when
check
If the mac of x(cid:2)
(cid:2)(x(cid:2)
(cid:2)(x(cid:2)
(cid:2)(x(cid:2)
r).
m, mkgen
r), xma).
After applying Simplify, Q(cid:2)
A is unchanged and Q(cid:2)
B be-
comes
Q(cid:2)
m, xma);
B = !i(cid:2)≤ncB[i(cid:2)](x(cid:2)
ﬁnd u ≤ n suchthat deﬁned (xm[u], x(cid:2)
(cid:2)(x(cid:2)
(cid:2)(x(cid:2)
m, mkgen
x(cid:2)
m = xm[u] ∧ check
k : Tk = x(cid:2)
let x(cid:2)(cid:2)
k[u] in cB[i(cid:2)](cid:5)(cid:6)
k[u]) ∧
r), xma) then
First, the tests if 1 then . . . and if 0 then . . . are simpliﬁed.
The term dec(x(cid:2)
m = xm[u]
by the ﬁnd condition, xm[u] = enc(k2b(x(cid:2)
r [u])
m, xk) is simpliﬁed knowing x(cid:2)
k[u]), xk, x(cid:2)(cid:2)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
by the assignment that deﬁnes xm, xk = kgen(xr) by the