subsequently, in the actual context, the malicious content is
executed.
Coercing content to be interpreted as a diﬀerent type can
be accommodated in the context of the web. If the content
is loaded using an img tag it will be interpreted as an im-
age, if a script tag is used it will be interpreted as a script.
Certain tags, e.g., the object tag and embed tag, even let the
developer decide which type to interpret the content as. To
prevent abuse, the browsers employ content-type sniﬃng for
certain content-types, a practice which has historically led
to security issues, as illustrated below.
Barth et al. [3] deﬁne chameleon documents as a benign
ﬁle type crossbred with malicious HTML content. The at-
tack targets the content-sniﬃng algorithm used in the browser
and the document is crafted in such a way that the browser
will detect the content type as HTML. The paper proceeds
to describe how an attacker can create a chameleon doc-
ument, that is valid PostScript, but will be identiﬁed as
HTML. This issue allows exploitation when there is a mis-
match between a web site’s content validation ﬁlter and the
browser’s content-sniﬃng algorithm.
In literature we ﬁnd, apart from chameleons, other names
for similar, related concepts. Brandis [4] refer to GIFAR
attacks, based on one of the early instances of attacks based
on GIF images that are also valid JAR ﬁles. Sundareswaran
et al. [14, 13] discuss GIFAR-related attacks as a form of
content repurposing attack. In this paper the term content
smuggling is used as it best represents how a polyglot can
inﬁltrate an origin.
While these articles document known instances of poly-
glot attacks, the attack method has not been generalized
until this paper. Under our generalization, previous work
corresponds to instances. For example, we show that GIFAR
attacks describe a form of content smuggling, Section 2.3.2,
and cross-origin CSS attacks [7] describe a form of syntax
injection attacks, Section 2.3.1. The added value of our pa-
per is a generalized view on polyglot attacks and focus on
new instances of polyglots that involve the PDF format.
Two attacker-centric components require special atten-
tion; the inﬁltration of an origin, i.e. the attack vector, and
the exploitation of an inﬁltrated origin, i.e. the payload.
2.3 Attack vectors
The general pattern of a polyglot attack is described in
the following scenario, illustrated in Figure 1. The target of
the attack is the web site vulnerable.com. It has been inﬁl-
trated by an attacker to serve a malicious polyglot within its
sensitive origin (1). The content is served by vulnerable.com
as the benign format, e.g., an image, harmless to users of the
web site. The victim in this scenario is an authenticated user
of vulnerable.com. At some point, while still authenticated
to vulnerable.com, the unsuspecting victim visits the attack-
ers web site attacker.com (2). Upon visiting attacker.com,
the web site uses a plug-in to embed the polyglot from vul-
nerable.com as the malicious format (3). This is achieved
by setting the type attribute to the MIME-type of the cor-
responding plug-in, which will override the MIME-type sup-
plied by vulnerable.com. When loaded in the plug-in the
malicious polyglot is executed in the vulnerable.com origin
(4), as described in Section 2.1. The impact depends on the
payload and the capabilities of the malicious format.
This paper describes two vectors for inﬁltrating an origin,
either via syntax injection, or content smuggling. In the case
of syntax injection, existing content is manipulated to be-
come a polyglot, whereas with content smuggling, a polyglot
is used to evade content ﬁlters. The vectors are described
below with more detailed scenarios.
Syntax injection
2.3.1
In a cross-site scripting attack user input is used to com-
pose an HTML document. Fragments of HTML syntax in
755Figure 1: Overview of the scenario
Figure 2: Syntax injection scenario
the input alters the semantic of the document to execute at-
tacker supplied script code. Similarly, in a syntax injection
attack the vulnerable target will compose an HTML docu-
ment from attacker controlled input containing syntax of a
foreign format. The resulting document is a polyglot which
is benign when viewed as the HTML, but malicious when
viewed as the injected format. While the web site serves the
content as HTML, it is in the hands of the attacker to decide
how it is interpreted when embedded in the attackers web
page. Examples of such services include social networks,
search engines, i.e., nearly any dynamic web site driven by
user interaction. The targeted service is assumed to employ
server-side cross-site scripting sanitization. For the attack to
be successful, the input must bypass this sanitization. The
sanitization ﬁlter will remove or encode problematic char-
acters in the input related to HTML-syntax. The injected
format will pose as a new context, unknown to the ﬁlter.
Chances are that the injected format will pass the ﬁlter un-
noticed.
Previous work documents an instance of a polyglot at-
tack based on syntax injection, though not phrased in those
terms. Huang et al. [7] describe a cross-origin cascading
style-sheet (CSS) attack. This attack injects fragments of
CSS syntax in a HTML document, thereby making it a
HTML/CSS polyglot. The error-tolerant parsing of style
sheets allow the polyglot to parsed as valid CSS. The ca-
pabilities of CSS provide trivial cross-origin leakage. The
paper proposes a defense technique which has been adopted
by all major browsers, which implies that the attacks out-
lined in their paper are now ineﬀective. Instead, Section 3
will show practical attacks based on other formats.
Scenario.
The scenario, illustrated in Figure 2, describes how the at-
tack proceeds from the inﬁltration of the origin to the com-
promise of the victim. Again, the victim is an authenticated
user of vulnerable.com that unsuspectingly visits the attack-
ers malicious web site, attacker.com (1). The attacker.com
web site uses a plug-in to embed a web page with vulnerable
input parameters from vulnerable.com (2). In the parame-
ters of the request the attacker injects the syntax of the
malicious format (3). The response from vulnerable.com is
a polyglot served as the benign content type (4), but the at-
tacker’s page coerces the content to be interpreted as the ma-
licious content type by the plug-in. The malicious payload is
executed in the origin of vulnerable.com and can leverage the
credentials of the victim to further exploit the vulnerability.
2.3.2 Content smuggling
The vulnerable target of a content smuggling attack, lets
users upload ﬁles that are subsequently served under the
origin of the service. Examples of such potentially vulnera-
ble services are cloud storage services, image databases, so-
cial networks, conference management systems or job broker
services. Such a service accepts a limited set of benign ﬁle-
formats, and the ﬁles are run through a ﬁlter to verify that
they belong to this set, e.g.
images or documents, before
being served to the end user. The ﬁlter will verify the ﬁle
under the assumption that it conforms strictly to one for-
mat. By submitting a polyglot to such a service, an attacker
can evade the ﬁlter as the polyglot does conform to the be-
nign format. If the polyglot is publicly accessible, it can be
embedded in the attackers page. Since the attacker is in
control over which format the polyglot is interpreted as, it
is embedded as the malicious format and thereby the service
is vulnerable to a content smuggling attack.
The GIFAR attack is a polyglot attack based on content
smuggling. In this attack a benign GIF-image and a mali-
cious JAR-ﬁle is combined to create a GIF/JAR polyglot.
By submitting the combined GIFAR to a service, the at-
tacker can execute a Java applet under the origin of the
targeted service. The Java runtime has been updated to
prevent this kind of abuse.
Instead, Section 3 will show
practical attacks based on other formats.
Scenario.
The content smuggling scenario proceeds as illustrated in
Figure 3. Similarly to the previous scenarios, the victim
is an authenticated user of a targeted vulnerable web site,
vulnerable.com. To give more context to the scenario, vul-
nerable.com can be a cloud storage service. The target is
inﬁltrated by the attacker (1), who uploads a polyglot to
the web site. The polyglot is veriﬁed to be benign under the
assumption that it belongs an allowed ﬁle type. While still
authenticated to vulnerable.com, the victim visits the attack-
ers web site, attacker.com (2). The attacker.com site embeds
the polyglot from vulnerable.com (3), which is served as the
benign type, but coerced to be interpreted as the malicious
content type by the plug-in (4). The malicious format of the
756Listing 1: Sample PDF ﬁle
%PDF−1.4
1 0 o b j
>
endobj
2 0 o b j
>
endobj
3 0 o b j
>
endobj
4 0 o b j
>
>>
endobj
5 0 o b j >
stream
. . . Page−marking o p e r a t o r s . . .
endstream
endobj
6 0 o b j
[ /PDF]
endobj
x r e f
0 7
0000000000 65535 f
0000000009 00000 n
0000000074 00000 n
0000000120 00000 n
0000000179 00000 n
0000000300 00000 n
0000000384 00000 n
t r a i l e r
>
s t a r t x r e f
408
%%EOF
3.1 Portable Document Format
The Portable Document Format (PDF) is a widely used
document format capable of displaying text, rendering graph-
ics, scripting, animation and other dynamic content. It is
a container format in the sense that it allows embedding of
ﬁles and resources.
According to the PDF speciﬁcation [8] a PDF ﬁle is com-
posed of a header, several objects, a cross-reference section
and a trailer. Listing 1 shows a sample of how a PDF ﬁle is
structured and its elements. Supposedly, it is also a minimal
PDF ﬁle according to the speciﬁcation.
Figure 3: Content smuggling scenario
embedded polyglot is activated and a possible payload is to
extract all the ﬁles stored in the victims account.
2.4 Payloads
The consequences of exploiting an inﬁltrated origin de-
pend on the capabilities of the format used. These con-
sequences span from abusing the credentials of the victim
to forge requests to the vulnerable web site, to extracting
sensitive information about the victim that is stored on the
vulnerable web site.
Cross-site request forgery.
If the format has the capability of issuing requests, in
particular POST requests within the boundaries of the SOP,
that includes the victims credentials,then the attacker can
mount a cross-site request forgery (CSRF) attack. Web sites
protect against these attacks by generating a token with each
response that has to be included in the subsequent request.
However, if the format also have the capability of reading
the response of the issued request, it can extract the token
and thereby circumvent the CSRF protection.
Cross-origin information leakage.
Additionally, if the format allows communication with the
origin of the attacker, then the attacker can extract sensitive
user information and leak it across origins. If the format is
not restricted by the SOP, it can communicate directly with
the attackers server. Otherwise, if the format can interact
with the document that embeds the polyglot, the communi-
cation could be tunneled through this channel.
3. VULNERABILITIES AND ATTACKS
In this section we give concrete examples of the attacks de-
scribed in Section 2, using the PDF format as the running
example. We begin by detailing how the design decision
made in the PDF-standard make it highly suitable for cre-
ating malicious polyglots. Throughout this section Adobe
Reader is the assumed target. A comparison between read-
ers can be found in Section 4.
The reader is invited to visit the test page [1] for prac-
tical demonstration of the attacks from this section. These
attacks show that the vulnerabilities we focus on are ex-
ploitable in practice.
7573.1.1 Header
The header consists of the string ”%PDF-” followed by
a version number. The version is denoted by a major and
a minor version number of the form ”M.m”. Because the
version can be speciﬁed elsewhere, the version number is
not required to be part of the header.
3.1.2 Objects
Objects can be direct or indirect, the diﬀerence being that
an indirect object has labels which are used for referring to
the object from another object. Object labels are numbered
and begin with the string ”N n obj”, where ”N” is the object
number and ”n” is the revision number. Similarly object
references are of the form ”N n R”. The label is optionally
ended with the keyword ”endobj”.
There are eight basic types of basic objects; booleans,
integers, strings, names, arrays, dictionaries, streams and
the null object. For the intents and purposes of this article,