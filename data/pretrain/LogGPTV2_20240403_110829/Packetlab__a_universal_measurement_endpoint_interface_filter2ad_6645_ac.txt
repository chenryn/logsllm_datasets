the delegation certificate so that a rendezvous server will accept
experiments signed using that delegation certificate. Delegation can
be extended several levels by forming a certificate chain. Figure 1
shows these authorization relationships.
Rendezvous Publish/Subscribe Channels. Recall that ren-
dezvous servers provide a publish-subscribe system for experiment
dissemination. Endpoints subscribe to a set of channels and receive
all experiment descriptors published to those channels. The identi-
fier used to describe a channel is simply the hash of a public key
used to sign certificates. When a measurement endpoint connects
to a rendezvous server, it subscribes to the set of channels corre-
sponding to each of the public keys it trusts to sign experiment
certificates. When an experimenter publishes an experiment to a
rendezvous server, the experimenter includes the full certificate
chain and corresponding public keys. This allows the rendezvous
server to verify the certificate chain and broadcast the experiment
to all endpoints that accept experiments signed by at least one of
the keys in the certificate chain.
Rendezvousserver operatorOutside experimenterEndpoint operatorRendezvousserverMeasurement endpoint!"#$%&'(IMC ’17, November 1–3, 2017, London, United Kingdom
Levchenko et al.
Memory. In addition to the information necessary to make an ac-
cess control or packet filtering decision (e.g., packet data), a monitor
program has access to auxiliary information about the endpoint
and the state of the experiment via a structured memory block
described earlier (Section 3.1). The monitor program sees this as a
block of memory in its virtual address space. (Note that the address
space seen by the monitor program and accessed by the controller
using mread and mwrite is distinct from the virtual address of the
host environment.) In addition, each monitor also has a block of
private memory that persists for the duration of the experiment
that is not accessible to the controller via the mread command.
High-level language for monitor programs. Writing a monitor
in a (virtual) machine language is cumbersome. To make this task
easier, we propose a simple C-like language we call Cpf that would
be compiled to the representation interpreted by the endpoints.
Cpf uses C syntax and semantics, but omits features like function
pointers that are not necessary for creating monitor programs. We
chose C because it is a familiar language to our target developer au-
dience (network measurement experimenters), and, as such, would
present no impediments to adoption. Furthermore, it allows us to
directly use existing constant and structure definitions written in
the C language.
A full discussion of Cpf is outside the scope of this article. How-
ever, Figure 2 shows how an endpoint operator might express a
monitor for a traceroute experiment (we assume common header
files such as netinet/in.h have been included, and that union
packet is a union of structures containing common protocol head-
ers). The endpoint operator would compile and attach this monitor
to the experiment certificate it issues to an experimenter. The send
entry point (invoked by the endpoint when the controller tries to
send a packet) allows ICMP echo requests to any host. The program
saves the destination in the ping_dst global variable. The recv
function (invoked by the endpoint to determine whether a packet
can be captured and passed on to the controller) allows echo replies
from the destination and time exceeded packets from any host.
For the latter, the monitor ensures the source and destination of
the returned IP header fragment match the original packet.
3.5 Limitations
Because PacketLab moves all experiment logic to the controller,
any data to be sent by an endpoint during an experiment must first
come from the controller. This means that there is necessarily a
delay between when a controller commands the endpoint to send a
packet and when the endpoint can actually send it. Experiments
that require fast endpoint response times will be at a disadvantage,
because the time between when an endpoint receives a packet and
when it can generate a response that depends on the received packet
will include the round-trip time between endpoint and controller.
We note, however, that a round trip is only necessary if a sent
packet depends on a received packet. If it does not, the controller
can schedule the packet to be sent ahead of time. Timing measure-
ments such as ping and traceroute are not affected by this, because
what they need are precise timestamps (which PacketLab provides),
rather than fast endpoint response times.
Another limitation of PacketLab is practical rather than technical.
Most measurement platforms today follow the PlanetLab [3] model,
where experiments run on the endpoint rather than on a separate
controller. Developers will need to adjust to the PacketLab model,
where, rather than sending packet directly, the programmer tells a
remote endpoint to send a packet and may need to schedule packets
in advance. We plan to develop libraries and VPN-style drivers to
allow developers to code experiments to the old model but run
them on PacketLab nodes.
4 PRELIMINARY RESULTS
We are in the early stages of prototyping PacketLab in order to
validate the ideas presented in the paper. In the near future, we
hope to provide the community with an open source endpoint ref-
erence implementation for evaluation. Our prototype supports a
subset of operations shown in Table 1, namely commands to: open
a TCP, UDP, or raw IP socket; send packets at a specified time; and
capture and forward packets to the controller. Our endpoint does
not yet support the rendezvous mechanism, certificates, or exper-
iment monitors. Using our prototype endpoint, we implemented
two experiments, described below.
Bandwidth measurement. To measure an endpoint’s uplink
bandwidth, we make it send a sequence of UDP packets to our
server as quickly as possible, and then record the rate and which
they arrive at the server. The controller first reads the current time
t0 on the endpoint (using the mread command). It then opens a UDP
socket on the endpoint (using nopen) and schedules a block of UDP
datagrams to be sent from the endpoint to the controller at time
t0 + 5 (using nsend). The controller then waits for the UDP packets
from the endpoint, records their arrival times, and calculates the
uplink bandwidth.
Traceroute. To reproduce the traceroute tool, an experiment con-
troller creates a series of ICMP echo reqest packets with incre-
menting TTL values starting from 1 and the payload set to contain
a two-byte sequence number. The controller first obtains the end-
point’s current time t0 as above, and then schedules the ICMP
packets for transmission at some time tsnd > t0. After scheduling
the ICMP packets, the controller begins polling the endpoint for
incoming packets, forwarding each to the controller with its receive
timestamp (trcv). The sequence number is extracted from the packet
and used to match the original ICMP’s tsnd to calculate the round
trip time as trcv − tsnd. Note that both timestamps are relative to
the endpoint’s clock. The controller sends packets to the endpoint
until either an ICMP reply is received from the target destination
or the next TTL value is greater then 40.
5 CONCLUSION
The aim of this work is to argue for a universal network measure-
ment interface by presenting a particular design we call PacketLab.
PacketLab gives endpoint operators a way to provide researchers
access to measurement endpoints in a controlled manner. End-
point operators can precisely enforce the kinds of experiments
researchers can run on their endpoints using a mechanism based
on packet filters. For experimenters, PacketLab is a uniform in-
terface to all measurement endpoints supporting the PacketLab
interface. Once an experimenter obtains a certificate (from an end-
point operator) granting her access to a set of endpoints, running
the experiment does not require endpoint operator involvement,
streamlining experiments and lowering support costs borne by
operators of today’s platforms.
PacketLab: A Universal Measurement Endpoint Interface
IMC ’17, November 1–3, 2017, London, United Kingdom
in_addr_t ping_dst = 0; // destination of traceroute
uint32_t send(const union packet * pkt, uint32_t len) {
if (pkt->ip.ver == 4 && pkt->ip.ihl == 5 &&
pkt->ip.proto == IPPROTO_ICMP &&
pkt->ip.src == info->addr.ip &&
pkt->ip.icmp.type == ICMP_ECHO_REQUEST)
{
return len; // allow
ping_dst = pkt->ip.dst;
} else
return 0;
// deny
}
uint32_t recv(const union packet * pkt, uint32_t len) {
if (pkt->ip.ver == 4 && pkt->ip.ihl == 5 &&
pkt->ip.proto == IPPROTO_ICMP && (
(pkt->ip.icmp.type == ICMP_ECHO_REPLY &&
pkt->ip.src == ping_dst) ||
(pkt->ip.icmp.type == ICMP_TIME_EXCEEDED &&
pkt->ip.icmp.orig.ip.src == info->addr.ip &&
pkt->ip.icmp.orig.ip.dst == ping_dst)))
return len; // allow
return 0;
// deny
else
}
Figure 2: Fragment of a monitor program for a traceroute exper-
iment. The send entry point in the monitor is called by the end-
point to determine if a packet can be sent. The monitor first checks
that the packet is an ICMP echo reqest packet and then stores
the destination address in the global ping_dst. The recv entry
point is called by the endpoint to determine whether the controller
is allowed to capture the packet. It checks that the packet is an
ICMP echo reply packet from the destination or a time exceeded
packet generated in response to the original echo reqest. Note
that recv uses the global variable ping_dst to ensure that only pack-
ets corresponding to the original echo reqest are returned to the
controller.
ACKNOWLEDGMENTS
The authors would like to acknowledge the participants of the 2017
AIMS workshop [13] for their insightful feedback on PacketLab.
This work was supported by NSF grants CNS-1518918 and CNS-
1513283, and by DHS S&T contract HHSP 233201600012C.
REFERENCES
[1] Internet Censorship Lab. http://www.internetcensorshiplab.com.
[2] Measuring Broadband America.
https://www.fcc.gov/general/measuring-broadband-america.
[3] PlanetLab: An Open Platform for Developing, Deploying, and Accessing
Planetary-scale Services. https://www.planet-lab.org.
[4] RIPE Atlas. https://atlas.ripe.net.
[5] V. Bajpai, A. W. Berger, P. Eardley, J. Ott, and J. Schönwälder. Global
Measurements: Practice and Experience (Report on Dagstuhl Seminar #16012).
SIGCOMM Comput. Commun. Rev., 46(2):32–39, May 2016.
[6] V. Bajpai and J. Schonwalder. A Survey on Internet Performance Measurement
Platforms and Related Standardization Efforts. IEEE Communications Surveys
and Tutorials, 17(3):1313–1341, Apr 2015.
[7] A. Begel, S. McCanne, and S. L. Graham. BPF+: Exploiting Global Data-flow
Optimization in a Generalized Packet Filter Architecture. In Proceedings of the
Conference on Applications, Technologies, Architectures, and Protocols for
Computer Communication, 1999.
Fast Packet Filters. In Proceedings of the USENIX Symposium on Operating
Systems Design and Implementation, pages 24–24, 2004.
[8] H. Bos, W. De Bruijn, M.-L. Cristea, T. Nguyen, and G. Portokalidis. FFPF: Fairly
[9] T. Bourgeau, J. Augé, and T. Friedman. TopHat: Supporting Experiments
through Measurement Infrastructure Federation. In in: Proceedings of the
International Conference on Testbeds and Research Infrastructures for the
Development of Networks and Communities (TridentCom, 2010.
[10] R. T. Braden. A Pseudo-machine for Packet Monitoring and Statistics. In
Symposium Proceedings on Communications Architectures and Protocols, pages
200–209, 1988.
[11] CAIDA. AIMS 2015: Workshop on Active Internet Measurements.
https://www.caida.org/workshops/aims/1503.
[12] CAIDA. AIMS 2016: Workshop on Active Internet Measurements.
https://www.caida.org/workshops/aims/1602.
[13] CAIDA. AIMS 2017: Workshop on Active Internet Measurements.
https://www.caida.org/workshops/aims/1703.
[14] k. claffy, Y. Hyun, K. Keys, M. Fomenkov, and D. Krioukov. Internet Mapping:
from Art to Science. In IEEE DHS Cybersecurity Applications and Technologies
Conference for Homeland Security (CATCH), pages 205–211, Watham, MA, Mar
2009.
[15] D. R. Engler and M. F. Kaashoek. DPF: Fast, Flexible Message Demultiplexing
Using Dynamic Code Generation. In Proceedings of the Conference on
Applications, Technologies, Architectures, and Protocols for Computer
Communication, pages 53–59, 1996.
[16] V. Giotsas, A. Dhamdhere, and k. claffy. Periscope: Unifying Looking Glass
Querying. In Passive and Active Network Measurement Workshop (PAM), Mar
2016.
[17] U. Goel, A. Miyyapuram, M. Wittie, and Q. Yang. MITATE: Mobile Internet
Testbed for Application Traffic Experimentation. In Mobile and Ubiquitous
Systems: Computing, Networking, and Services. 10th International Conference,
MOBIQUITOUS 2013, Tokyo, Japan, Revised Selected Papers, 2014.
[18] S. Ioannidis, K. G. Anagnostakis, J. Ioannidis, and A. D. Keromytis. xPF: Packet
Filtering for Low-Cost Network Monitoring. In Proceedings of the Workshop on
High Performance Switching and Routing, pages 116–120, 2002.
[19] C. Kreibich, N. Weaver, B. Nechaev, and V. Paxson. Netalyzr: Illuminating the
Edge Network. In Proceedings of the ACM Conference on Internet Measurement,
pages 246–259, 2010.
[20] M. Luckie, A. Dhamdhere, D. Clark, B. Huffaker, and K. Claffy. Challenges in
Measuring Internet Interdomain Congestion. In Proceedings of the ACM
SIGCOMM Internet Measurement Conference (IMC), 2014.
[21] S. McCanne and V. Jacobson. The BSD Packet Filter: A New Architecture for
User-level Packet Capture. In Proceedings of the USENIX Conference, 1993.
[22] D. L. Mills. Improved Algorithms for Synchronizing Computer Network Clocks.
IEEE/ACM Transactions on Networking, 3(3):245–254, 1995.
[23] J. Mogul, R. Rashid, and M. Accetta. The Packer Filter: An Efficient Mechanism
for User-level Network Code. In Proceedings of the Eleventh ACM Symposium on
Operating Systems Principles, pages 39–51, 1987.
[24] D. Moore, C. Shannon, G. M. Voelker, and S. Savage. Network Telescopes.
Technical Report 2004-04, Department of Computer Science and Engineering,
University of California, San Diego, 2004.
[25] OONI. Open Observatory of Network Interference. https://ooni.torproject.org.
[26] M. A. Sánchez, J. S. Otto, Z. S. Bischof, D. R. Choffnes, F. E. Bustamante,
B. Krishnamurthy, and W. Willinger. Dasu: Pushing Experiments to the
Internet’s Edge. In Proceedings of the 10th USENIX Conference on Networked
Systems Design and Implementation, nsdi’13, pages 487–500, Berkeley, CA, USA,
2013. USENIX Association.
[27] B. Schlinker, K. Zarifis, I. Cunha, N. Feamster, and E. Katz-Bassett. PEERING: An
AS for Us. In Proceedings of the 13th ACM Workshop on Hot Topics in Networks,
2014.
[28] J. Schulist, D. Borkmann, and A. Starovoitov. Linux Socket Filtering aka
Berkeley Packet Filter (BPF).
https://www.kernel.org/doc/Documentation/networking/filter.txt.
[29] N. Spring, D. Wetherall, and T. Anderson. Scriptroute: A Public Internet
Measurement Facility. In Proceedings of the 4th Conference on USENIX
Symposium on Internet Technologies and Systems - Volume 4, USITS’03, pages
17–17, Berkeley, CA, USA, 2003. USENIX Association.
[30] S. Sundaresan, S. Burnett, N. Feamster, and W. De Donato. BISmark: A Testbed
for Deploying Measurements and Applications in Broadband Access Networks.
In 2014 USENIX Conference on USENIX Annual Technical Conference (USENI X
ATC 14), pages 383–394, 2014.
[31] The Mplane Consortium. MPlane: Building an Intelligent Measuremet Plane for
the Internet. http://www.ict-mplane.eu.
[32] Z. Wu, M. Xie, and H. Wang. Swift: A Fast Dynamic Packet Filter. In Proceedings
of the USENIX Symposium on Networked Systems Design and Implementation,
pages 279–292, 2008.
[33] M. Yuhara, B. N. Bershad, C. Maeda, and J. E. B. Moss. Efficient Packet
Demultiplexing for Multiple Endpoints and Large Messages. In USENIX Winter
Technical Conference Proceedings, Jan. 1994.