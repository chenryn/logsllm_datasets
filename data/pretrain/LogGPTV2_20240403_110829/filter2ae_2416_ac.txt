        } else {//进入这个分支
            $tableName = $this->parseSqlTable($tableName);//调用到parseSqlTable方法，
            //这个方法的作用是把表名转成小写，不在详细分析
        }
        // 修正子查询作为表名的问题
        if (strpos($tableName, ')')) {//同样 tablename中也没有)，跳过
            return [];
        }
        list($guid) = explode(' ', $tableName);//跟进空格，拆分成数组赋值给guid
        $db         = $this->getConfig('database');//获取数据库名
        if (!isset(self::$info[$db . '.' . $guid])) {//  判断有没有设置info[tpdemo.users]
            if (!strpos($guid, '.')) {//如果guid这个变量中，没有点“.”  就把库名和表名，通过"." 连接起来
                $schema = $db . '.' . $guid;
            } else {
                $schema = $guid;
            }
            // 读取缓存
            if (!App::$debug && is_file(RUNTIME_PATH . 'schema/' . $schema . '.php')) {//没有设置缓存，跳过
                $info = include RUNTIME_PATH . 'schema/' . $schema . '.php';
            } else {
                $info = $this->connection->getFields($guid);//获取表中的字段信息，
            }
跟进getFields方法
    /**
     * 取得数据表的字段信息
     * @access public
     * @param string $tableName
     * @return array
     */
    public function getFields($tableName)
    {
        list($tableName) = explode(' ', $tableName);//把表名根据空字符串拆成数组，
        if (false === strpos($tableName, '`')) {//如果tablename中没有反引号“`”，在tablename两端加上反引号
            if (strpos($tableName, '.')) {
                $tableName = str_replace('.', '`.`', $tableName);
            }
            $tableName = '`' . $tableName . '`';
        }
        $sql    = 'SHOW COLUMNS FROM ' . $tableName;// 执行一次查询，拿到当前表名的列信息
        $pdo    = $this->query($sql, [], false, true);
        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);
简单的看一下query方法，他是利用了PDO来查询
    if (empty($this->PDOStatement)) {
        $this->PDOStatement = $this->linkID->prepare($sql);
    }
这是我在数据库，执行一次，拿到的结果
    mysql> show columns from users;
    +----------+-------------+------+-----+---------+----------------+
    | Field    | Type        | Null | Key | Default | Extra          |
    +----------+-------------+------+-----+---------+----------------+
    | id       | int(11)     | NO   | PRI | NULL    | auto_increment |
    | username | varchar(50) | NO   |     | NULL    |                |
    +----------+-------------+------+-----+---------+----------------+
    2 rows in set (0.00 sec)
接着看getFields方法
现在的result数组
    $info   = [];
        if ($result) {
            foreach ($result as $key => $val) {//变量result数组
                $val                 = array_change_key_case($val);//把数组的键名都变成小写,val也是一个数组
                $info[$val['field']] = [//执行完这一段之后，就把val中的信息，传给了 info
                    'name'    => $val['field'],//字段名
                    'type'    => $val['type'],//字段的类型
                    'notnull' => (bool) ('' === $val['null']), // not null is empty, null is yes
                    'default' => $val['default'],
                    'primary' => (strtolower($val['key']) == 'pri'),
                    'autoinc' => (strtolower($val['extra']) == 'auto_increment'),
                ];
            }
        }
        return $this->fieldCase($info);//这个方法是把字段进行一个大小写的转换
    }
看下返回的内容
回到getTableInfo方法
    $fields = array_keys($info);
            $bind   = $type   = [];
            foreach ($info as $key => $val) {
                // 记录字段类型
                $type[$key] = $val['type'];
                $bind[$key] = $this->getFieldBindType($val['type']);
跟进getFieldBindType方法
    /**
     * 获取字段绑定类型
     * @access public
     * @param string $type 字段类型
     * @return integer
     */
    protected function getFieldBindType($type)
    {
        if (0 === strpos($type, 'set') || 0 === strpos($type, 'enum')) {
            $bind = PDO::PARAM_STR;
        } elseif (preg_match('/(int|double|float|decimal|real|numeric|serial|bit)/is', $type)) {
        //因为数据库里设置id字段的类型是int ，所以会进入这个分支，
        //PDO::PARAM_INT (integer)
        //表示 SQL 中的整型。
            $bind = PDO::PARAM_INT;
        } elseif (preg_match('/bool/is', $type)) {
            $bind = PDO::PARAM_BOOL;
        } else {//username字段是字符串类型，会进入最后一个分支
            $bind = PDO::PARAM_STR;
        }
        return $bind;//把bind返回，
    }
回到getTableInfo方法
    if (!empty($val['primary'])) {//这一块是一个设置主机的过程，不详细分析了
                    $pk[] = $key;
                }
            }
            if (isset($pk)) {
                // 设置主键
                $pk = count($pk) > 1 ? $pk : $pk[0];
            } else {
                $pk = null;
            }
            self::$info[$db . '.' . $guid] = ['fields' => $fields, 'type' => $type, 'bind' => $bind, 'pk' => $pk];
            //对self::$info进行赋值，把users表的字段信息，都返回
        }
        return $fetch ? self::$info[$db . '.' . $guid][$fetch] : self::$info[$db . '.' . $guid];
    }
把self::$info返回，内容在这里
回到getFieldsBind方法
    $bind  = [];
        if ($types) {
            foreach ($types as $key => $type) {
                $bind[$key] = $this->getFieldBindType($type);//同样绑定类型
            }
        }
        return $bind;
    }
看下bind
直接返回到了parseData，
回到parseData方法
    if ('*' == $options['field']) {
            $fields = array_keys($bind);//把键名变成小写,id username赋值给了fields
        } else {
            $fields = $options['field'];
        }
        $result = [];
        foreach ($data as $key => $val) {//现在变成data了，遍历请求中的参数
            $item = $this->parseKey($key, $options);//进入
parseKey方法
    /**
     * 字段和表名处理
     * @access protected
     * @param string $key
     * @param array  $options
     * @return string
     */
    protected function parseKey($key, $options = [])//key是username  option是配置数组
    {
        $key = trim($key);
        if (strpos($key, '$.') && false === strpos($key, '(')) {//检测是否是json字段，
            // JSON字段支持
            list($field, $name) = explode('$.', $key);
            $key                = 'json_extract(' . $field . ', \'$.' . $name . '\')';
        } elseif (strpos($key, '.') && !preg_match('/[,\'\"\(\)`\s]/', $key)) {//key中，没有.  跳过
            list($table, $key) = explode('.', $key, 2);
            if ('__TABLE__' == $table) {
                $table = $this->query->getTable();
            }
            if (isset($options['alias'][$table])) {
                $table = $options['alias'][$table];
            }
        }
        if (!preg_match('/[,\'\"\*\(\)`.\s]/', $key)) {//正则不匹配，在加上!  进入
            $key = '`' . $key . '`';//key两端加上反引号``
        }
        if (isset($table)) {
            if (strpos($table, '.')) {
                $table = str_replace('.', '`.`', $table);
            }
            $key = '`' . $table . '`.' . $key;
        }
        return $key;//最后把加上反引号的key返回，`key`
    }
回到parseData方法
    if (is_object($val) && method_exists($val, '__toString')) {//val是请求参数的值，很明显不是对象
                // 对象数据写入
                $val = $val->__toString();//这里有个string魔术方法，如果有可以写文件的类说不定，还可以利用
            }
            if (false === strpos($key, '.') && !in_array($key, $fields, true)) {//key中没有点"."  直接跳过，
            //这个if分支应该是用来判断前端传过来的参数是否有对应的数据库字段
                if ($options['strict']) {
                    throw new Exception('fields not exists:[' . $key . ']');
                }
            } elseif (is_null($val)) {
                $result[$item] = 'NULL';
            } elseif (is_array($val) && !empty($val)) {//判断请求中传过来的参数值，并且进行了一个拼接，
            //需要控制第一个参数是inc或者dec，所以说payload中有一个inc，改成dec也可以
                switch ($val[0]) {
                    case 'exp':
                        $result[$item] = $val[1];
                        break;
                    case 'inc':
                        $result[$item] = $this->parseKey($val[1]) . '+' . floatval($val[2]);
                        break;
                    case 'dec':
                        $result[$item] = $this->parseKey($val[1]) . '-' . floatval($val[2]);
                        break;
                }
            } elseif (is_scalar($val)) {//因为val是一个数组，不是标量，直接跳过
                // 过滤非标量数据
                if (0 === strpos($val, ':') && $this->query->isBind(substr($val, 1))) {
                    $result[$item] = $val;
                } else {
                    $key = str_replace('.', '_', $key);
                    $this->query->bind('data__' . $key, $val, isset($bind[$key]) ? $bind[$key] : PDO::PARAM_STR);
                    $result[$item] = ':data__' . $key;
                }
            }
        }
        return $result;//把拼接之后的sql语句返回
    }
看一下现在的result数组
回到Builder类的insert方法
    if (empty($data)) {
            return 0;
        }
        $fields = array_keys($data);//字段名`username`
        $values = array_values($data);//要插入的东西 updatexml(1,concat(0x7e,user(),0x7e),1)+1
        $sql = str_replace(//这里会对模板sql语句进行一个替换
            ['%INSERT%', '%TABLE%', '%FIELD%', '%DATA%', '%COMMENT%'],
            [
                $replace ? 'REPLACE' : 'INSERT',
                $this->parseTable($options['table'], $options),
                implode(' , ', $fields),//根据逗号, 把字符串连接成数组
                implode(' , ', $values),
                $this->parseComment($options['comment']),
            ], $this->insertSql);
        return $sql;
    }
大致是这样
模板sql语句是这样的
回到insert方法  
看一下现在的sql语句  
已经把payload 拼接上了
    // 获取参数绑定
        $bind = $this->getBind();
        if ($options['fetch_sql']) {//fetch_sql没有设置，所以跳过
            // 获取实际执行的SQL语句
            return $this->connection->getRealSql($sql, $bind);
            //
        }
        // 执行操作
        $result = 0 === $sql ? 0 : $this->execute($sql, $bind);//这里就把sql给执行了
跟一下execute方法
这里同样是用的PDO预处理
后面这里执行
## 总结
漏洞的产生点，主要有两个  
1、获取参数时，开启了数组的获取方式  
2、当参数中有inc dec时，进行了参数的拼接，把payload带入到了sql语句中
参考链接  