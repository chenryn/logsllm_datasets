invocations are used (i.e., whether γ ≥ 2 or γ = 1). This
is expected: Using multiple pipelined invocations implies that
each invocation gets only a portion of the available bandwidth
and hence can only broadcast smaller-sized objects. These two
factors, multiple invocations and smaller objects, cancel out.
This is also consistent with the intuition that one cannot boost
throughput, simply by using pipelined invocations.
To summarize, our analysis in this section shows that
regardless of the attack strategy of the adversary, the total
throughput of all the OVERLAYBB invocations in BCUBE is
T ≈ B
w ), under the approximation of Y ≈ wl
B
s .
2w = Θ(
APPENDIX III: NUMBER OF AGGREGATE SIGNATURE
SIGNING/VALIDATION OPERATIONS AND SECURE HASH
COMPUTATIONS
Via a careful calculation, this section shows that under
all settings in Section VIII, regardless of the strategy of the
adversary and regardless of what messages the malicious
nodes may send to the honest nodes, in every second an honest
BCUBE node only needs to do:
• Adding a signer to a aggregate signature: at most 55 times
• Aggregate signature veriﬁcation (where the signature
passes veriﬁcation): at most 55 times
• Aggregate signature veriﬁcation (where the signature fails
veriﬁcation): at most 42 times
• Merkle proof veriﬁcation (where the proof passes veriﬁ-
• Merkle proof veriﬁcation (where the proof fails veriﬁca-
cation): at most 19 times
tion): at most 42 times
Under all settings in Section VIII, each Merkle proof veriﬁ-
cation takes no more than 10 secure hashes. Hence in every
second, each honest BCUBE node only needs to do at most
55 + 55 + 42 = 152 aggregate signature signing/validation
operations, and at most (19 + 42) × 10 = 610 secure hash
computations for Merkle proof veriﬁcation. Note that all these
numbers are worst-case numbers: The actual numbers can be
even smaller, for example, when there is no active attack on
BCUBE.
The following calculates the worst-case number of var-
ious operations. In any given round of OVERLAYBB, by
the pseudo-code in Section V, a node adds a signer to an
aggregate signature at most 3 times. Under all settings in
Section VIII, we have no more than 217 pipelined invocations
of OVERLAYBB at any given point of time. Since each round
has 12 seconds, this translates to at most 3 × 217/12 < 55
times/second.
For verifying aggregate signatures, we use lazy veriﬁcation:
A node only veriﬁes the signature on an item when it is about
to use that item, instead of immediately upon receiving that
item from its neighbors. For example in each round, a node
may receive many Merkle roots from all its neighbors, but
only picks the top two Merkle roots with the largest number
of weighted signers, and processes those. The node will then
simply verify the signatures (including the number of signers)
on those two Merkle roots. If the signature does not pass
veriﬁcation, the node will pick again, until it gets two Merkle
roots with valid signatures. One can then conﬁrm, based on
the pseudo-code in Section V, that in each round, a node does
at most 3 aggregate signature veriﬁcations where the signature
passes veriﬁcation. Hence the rate of such veriﬁcation is
again at most 55 times/second. By similar reasoning, one
can conﬁrm, based on the pseudo-code, that a node does at
most 19 Merkle proof veriﬁcations (where the proof passes
veriﬁcation) per second.
Finally, whenever an aggregate signature or Merkle proof
does not pass veriﬁcation, the neighbor who sent the corre-
sponding item must be malicious. Hence a node blacklists such
a neighbor, and discards all previous/future messages from
that neighbor. With this simple trick, since each node has at
most 42 neighbors in all our experiments, a node does at most
42 aggregate signature veriﬁcations where the signature fails
veriﬁcation, and at most 42 Merkle proof veriﬁcations where
the proof fails veriﬁcation.
APPENDIX IV: SANITY CHECK ON THE BANDWIDTH
CONSUMPTION OF BCUBE NODE
This section provides a sanity check on the bandwidth
consumption of a BCUBE node in our experiments. Our goal is
to verify that each BCUBE node indeed never uses more than
20Mbps bandwidth. Note that this does not directly follow
from the 10Gbps aggregate available bandwidth across the
500 BCUBE nodes on one physical machine, since the 10Gbps
may not be shared evenly. To do this sanity check, we pick an
arbitrary node with the maximum degree of 42 (larger degree
leads to more bandwidth consumption), and allocate a PC to
run only that node. We then directly measure the total network
trafﬁc on the Ethernet interface of that PCs in every second,
using the linux bandwidth monitoring tool bmon.
Figure 6(a)-(c) plot such measured bandwidth consumption
under f = 0.7, as a fraction of 20Mbps. Results under other f
values are similar. As expected, this fraction never exceeds 1.0,
conﬁrming that the node indeed never uses more than 20Mbps
bandwidth. The zig-zag pattern in Figure 6(c) is also expected:
Recall that each OVERLAYBB invocation has 2dm+s = 1760
rounds. When there is no active attack, a node only needs to
send messages in the ﬁrst 800 rounds. Also recall that in these
experiments, at any point of time, a node has many pipelined
OVERLAYBB invocations. Based on such parameters, Figure 7
plots the computed number of invocations that need to send
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
161278
to agree on the Merkle root. Appendix V-B eventually gives
Theorem 12, which captures the agreement property of the
second phase (for the fragments). Finally, Appendix V-C
proves Theorem 1, by using Theorem 8 and 12.
A. Agreement on the Merkle Root
The proofs of all the lemmas/theorem in this section are
deferred to [15]. Lemma 5 next roughly says that if an honest
committee member A accepts a certain Merkle root r0, then
all other honest nodes must also accept r0 within some rounds
after that, assuming the algorithm has not already terminated
by then. But there will be an exception — an honest node may
accept two different roots r1 and r2, without accepting r0.
Lemma 5. Consider any honest committee member A and
any honest node D, and let g ∈ [0, d] be the honest distance
between A and D. If A accepts r0 in round i and if i + g ≤
2dm + s − 1, then by round i + g, node D must satisfy either
one or both of the following properties:
• D accepts r0.
• D accepts two different roots.
Lemma 6 and 7 next intend to eventually show that if an
honest non-committee member A accepts a certain Merkle root
r0, then all honest committee members must also accept r0
within some rounds after that. Same as in Lemma 5, there will
be an exception — namely, accepting two different roots r1
and r2 instead of r0.
Lemma 6. Consider any honest node A and any honest
committee member D, and let g ∈ [0, d] be the honest
distance between A and D. If at Line 44 of round i, node
A makes a push with a score of at least g, then we must have
i + g ≤ 2dm + s − 1, and furthermore node D must satisfy
either one or both of the following properties in round i + g:
• D accepts r0, where r0 is the root contained in A’s push.
• D accepts two different roots.
Lemma 7. Consider any honest non-committee member A
and any honest committee member D, and let g ∈ [1, d] be
the honest distance between A and D. If A accepts r0 in round
i, then we must have i+g ≤ 2dm+s−1, and furthermore node
D must satisfy either one or both of the following properties
in round i + g:
• D accepts r0.
• D accepts two different roots.
Intuitively, Theorem 8 next implies that exactly one of the
following cases must happen at Line 28:
• All honest nodes have the same singleton set as the value
• |root accepted| (cid:54)= 1 on all honest nodes. (In this case,
for root accepted; or
all honest nodes will eventually output ⊥.)
Theorem 8 (Agreement on Merkle Root). Consider any
execution of Algorithm 1, where at least one honest node has
|root accepted| = 1 at Line 28. Then in this execution, all
(a) bandwidth consumption in every second
(b) zoomed in from above
(c) zoomed in from above
Fig. 6: Bandwidth consumption of an BCUBE node as a
fraction of 20Mbps. As expected, this fraction never exceeds
1.0. Figure 6(a) is plotted using points, but those dense points
appear to be several curves. To make it clearer, we zoom
into smaller time windows, using points in Figure 6(b) and
linespoints in Figure 6(c).
Fig. 7: Computed number of invocations that send messages.
messages, in every 1-second window. Figure 7 shows a similar
zig-zag pattern as in Figure 6(c), which explains such a pattern.
APPENDIX V: PROOF FOR THEOREM 1
This section proves Theorem 1. All line numbers in this
section refer to lines in Algorithm 1 through 3. We say that
a node accepts a Merkle root r if the node adds r to its
root accepted at either Line 37 or Line 41. A node may
accept the same r multiple times. In the overlay network, we
call a path as an honest path if it (including the starting and
ending node) contains only honest nodes and good edges. The
honest distance between two honest nodes A and B is the
length of the shortest honest path between A and B. The
proofs will use superscript to indicate variables on a give node
— for example, top rootC refers to the top root in the
algorithm running on node C.
Roadmap. The following is a roadmap for the proofs. Ap-
pendix V-A presents several lemmas and then Theorem 8,
which shows that the ﬁrst phase enables the honest nodes
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
171279
 0 0.2 0.4 0.6 0.8 1 1.2 0 1000 2000 3000 4000 5000 6000 7000bw consumptionsecond 0 0.2 0.4 0.6 0.8 1 1.2 3600 3700 3800 3900 0 0.2 0.4 0.6 0.8 1 1.2 3600 3650 3700 0 5 10 15 20 25 3600 3650 3700number of invocationssecondhonest nodes must have the same root accepted value at
Line 28.
• All honest nodes must return the same object.
• If the broadcaster is honest, then all honest nodes must
return the object broadcast by the broadcaster.
the committee, Algorithm 1 always
Finally, regardless of
returns within 2dm + s rounds.
Proof. We ﬁrst prove that all honest nodes must return the
same object. If all honest nodes output ⊥, we are done.
Otherwise some honest node must satisfy Line 28 with
|root accepted| = {r0} and frag accpeted = true, for
some r0. Let A be any honest node. Then by Theorem 8 and
Theorem 12, node A must also have root acceptedA =
{r0} and frag acceptedA = true. Next, it sufﬁces to prove
that all fragA contains all s fragments corresponding to r0.
Let t0 be the round during which A ﬁrst set frag acceptedA
to be true. In round t0, since Line 60 or Line 64 must be
(cid:54)= ∞. This
satisﬁed on A, we must have tA
root has already been assigned some value in or
means that tA
before round t0. Since tA
root is never assigned a value larger
root ≤ t0. Then by
than the current round, we must have tA
Lemma 9, in round t0 the most promising push chosen by A at
Line 50 must contain r0. Since A later sets frag acceptedA
to be true in that round, by Line 58, all the s fragments
corresponding to r0 must already be in all fragA.
frag (cid:54)= ∞ and tA
root
We next prove that if an honest broadcaster A broadcasts
an object O, then all honest nodes must return O. Given we
have already proved that all honest nodes must return the same
object, it sufﬁces to show that A will return O. Let the Merkle
root for O be r0. By Line 20, no other Merkle roots will ever
be processed by any honest node, since they do not have a
signature from A. In round 0, node A must reach and satisfy
Line 35. Then A will add r0 to root accepted and set troot
to be 0. Since no other root will ever be processed by A, A
must have |root accepted| = 1 at Line 28. Next, one can
trivially follow the steps in Algorithm 3 and verify that during
round s − 1, node A must have troot = 0 and tfrag = s − 1 at
Line 60. Hence node A must later set frag accepted to be
true. Finally, one can trivially verify that at Line 28, node A
must have all s fragments corresponding to r0 in all frag.
Putting everything together, A must return O.
Finally, it is obvious from the pseudo-code that the algo-
rithm always returns within 2dm + s rounds, regardless of
whether the committee has any honest member.
B. Agreement on Fragments
The proofs of all the lemmas/theorem in this section are
deferred to [15]. Recall from Section IV-C that in the second
phase, a node B uses the Merkle root contained in its most
promising push done so far in the ﬁrst phase, as B’s current
guess for the ﬁnal accepted Merkle root. Lemma 9 below says
that under certain conditions, after an honest node A accepts
a Merkle root, within a certain number of rounds, the guesses
made by other honest nodes will become correct.
Lemma 9. Consider any given execution of Algorithm 1,
where |root accepted| = 1 at Line 28 on some honest node
A. Let round i be when A ﬁrst accepts the sole element r0
in root acceptedA. Let B be any honest node (B can be
A itself), and let g ∈ [0, d] be the honest distance between A
and B. Then in round i + g and all later rounds, the push p
(i.e., the most promising push) chosen by node B at Line 50
must contain r0, if either of the following two conditions is
satisﬁed:
• A is a committee member.
• A is a non-committee member and there exists some
honest committee member D such that the honest distance
between B and D is no more than d − g.
Lemma 10 and 11 next reason about the agreement proper-
ties for the fragments, under certain conditions.
Lemma 10. Consider any given execution of Algorithm 1,
where at least one honest node has |root accepted| = 1 at
Line 28. If there exists some honest committee member having
frag accepted = true at Line 28, then all honest nodes
must have frag accepted being true at Line 28.
Lemma 11. Consider any given execution of Algorithm 1,
where at least one honest node has |root accepted| = 1 at
Line 28. If there exists some honest non-committee member
having frag accepted = true at Line 28, then all honest
committee members must have frag accepted being true at
Line 28.
Building upon Lemma 10 and 11, Theorem 12 next shows
that all honest nodes must agree on whether they accept the
fragements:
Theorem 12 (Agreement on Fragments). Consider any ex-
ecution of Algorithm 1, where at least one honest node has
|root accepted| = 1 at Line 28. Then in this execution, all
honest nodes must have the same frag accepted value at
Line 28.
C. Proving Theorem 1
Theorem 1 (Restated). [guarantees of OVERLAYBB] In
Algorithm 1, if the committee has at least one honest member,
then
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
181280