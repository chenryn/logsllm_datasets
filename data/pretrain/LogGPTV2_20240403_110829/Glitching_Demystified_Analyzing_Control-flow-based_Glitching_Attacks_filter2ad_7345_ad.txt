architecture, speciﬁcally the STM32 microcontroller, due to
its proliferation in embedded systems, its development support,
and the supporting glitching frameworks [55]. However, our
defenses work, without modiﬁcation, on any architecture that
is supported by LLVM (e.g., MIPS, PowerPC, and RISC-V)
In general, software-based glitching defenses can be cate-
gorized into three broad categories: constant diversiﬁcation,
redundancy, and random timing.
A. Constant Diversiﬁcation
Ideally, GLITCHRESISTOR would ensure that the set of
enumerations (ENUMs) and return values would have a
maximum, minimum pairwise Hamming distance (i.e., the
minimum Hamming distance between all of the values would
be maximized) to minimize the chance of bit ﬂips modifying
a value into a different valid value. However, this is unfor-
tunately an open coding theory problem in the general case,
i.e., A(n, d) [47]. Thus, GLITCHRESISTOR instead leverages
Reed-Solomon codes to generate values with large pairwise
Hamming distances. In theory, this implementation can gener-
ate codes such that the minimum pairwise Hamming distance
is b − (cid:100)log2(c)(cid:101) where b is the size of the value in bits
and c is the number of values being generated. However, we
used a more general purpose open-source implementation [46],
which provides a ﬂexible, fast computation of Reed-Solomon
error codes. Our current implementation is conﬁgured with a
message size of two bytes (i.e., up to 216 unique values in a set)
and an ECC length equal to the size of values being generated
(e.g., 4 bytes for a typical ENUM). GLITCHRESISTOR then
generates a message for each number [1, count], where count
is the number of ENUMs in a particular deﬁnition, and uses the
generated ECC as the new value in the program code ensuring
a minimum pairwise Hamming distance of 8.
a) ENUM Rewriter: The ENUM Rewriter is the only
defense implemented as a clang source code rewriter tool.
This is because in the LLVM intermediate representation
(IR), used by a compiler pass, ENUMs will be replaced by
corresponding constant values, and it is hard to detect which
constant is the result of an ENUM expansion. Consequently,
it is hard to replace ENUMs using a compiler pass in a sound
manner. GLITCHRESISTOR ﬁrst parses the abstract syntax
tree (AST) of all
the source and header ﬁles to identify
ENUM declarations that have all of their values uninitialized.
Then, for each of the uninitialized ENUM declarations, a
set of Reed-Solomon codes is generated, and used as the
declarations. GLITCHRESISTOR does not modify partially or
fully initialized ENUM declarations, as they could represent
certain expected values, and changing the values might affect
the functionality of the ﬁrmware. Even for fully uninitialized
enumerators, there could be cases where a programmer might
assume default values for ENUMs (i.e., starting with 0), as
deﬁned by the C standard [26]. In such cases, without using a
sound interval analysis [48], ENUM Rewriter might break the
program’s functionality. To handle this, we provide an option
in our implementation that will disable ENUM Rewriter.
Developers could use this option if they made any assumptions
about the default values for ENUMs in the target codebase.
b) Non-trivial Return Codes: GLITCHRESISTOR ﬁnds
all of the functions that only return constant values using the
LLVM ModulePass. For such functions, GLITCHRESISTOR
examines how its callers use the return values. When they
are exclusively used directly in branches (i.e., compared to
a constant) GLITCHRESISTOR replaces the return value and
the constant that it is compared to with the hard-to-glitch
values from our Reed-Solomon implementation. Our decision
to only instrument functions that return constants reﬂects
the fundamental difﬁculty in calculating all of the possible
computed return values. Instrumentation that deals with such
corner cases would be signiﬁcantly more intrusive, and likely
unsound. Our decision to only instrument return values that
are used directly in branches could be relaxed, though only
to a certain extent. If the instrumented constant is stored in
an aliased memory location, signiﬁcantly more heavyweight
instrumentation would be required to dynamically track the
value and update all of the references appropriately. Despite
these minor limitations, our return code protection instruments
a reasonable number of functions in practice (i.e., 24 out of
312 total functions in our evaluated ﬁrmware).
B. Redundancy
GLITCHRESISTOR’s redundancy defenses are implemented
as an LLVM compiler pass that replicates existing code to
ensure that no single-glitch attack will be capable of corrupting
the execution. We ensure that code added for redundancy
is not optimized out by other compiler passes by marking
the inserted load and store instructions as volatile. These
checks are capable of detecting glitches, as the injected check
will never be false under normal operating conditions. Others
have proposed and tested simple instruction duplication [19],
concluding that instruction duplication alone is likely not a
cure-all solution; hence the multi-pronged approach.
a) Data Integrity: GLITCHRESISTOR’s data integrity
protection is implemented by performing a ModulePass, which
locates any global variables that were marked as sensitive by
the developer (e.g., by listing them in a conﬁguration ﬁle).
Once identiﬁed, these sensitive variables are replicated, and a
second variable, which is used for veriﬁcation, is allocated in
a separate region of memory to ensure that it is not physically
co-located with the initial variable. When a sensitive variable
is written to memory, it is inverted (i.e., xored with ¬0 of
the appropriate size), and this integrity value is stored in the
complementary integrity variable. Then, when the value is later
read from memory, both the original variable and the integrity
value are read from memory and the operation will continue
if and only if var ⊕ varIntegrity == ¬0, otherwise a glitch
detection function will be called.
b) Branches and Loops: GLITCHRESISTOR implements
two FunctionPass transformations to replicate conditional
branch conditions. The ﬁrst replicates the true condition for
every conditional branch in the control-ﬂow graph (CFG).
When replicating the branch condition, GLITCHRESISTOR
also replicates any instructions that are needed to calculate the
comparison (e.g., loading a value from memory, mutating it,
and comparing it to an immediate). However, not every instruc-
tion can be replicated. For example, volatile variables, function
calls, and LLVM PHINodes cannot be replicated because
they may have adverse side-effects, or are likely to change
between checks. This redundant comparison is computed to be
the opposite of the initial branch condition (e.g., if (a ==
5) would become if (¬a == ¬5)), which ensures that the
same bit ﬂips repeated twice would not be able to bypass both
checks. This defense assumes that security-critical operations
are typically guarded by a conditional branch and that the
default, false, branch is not as important to protect, as it will
be taken most of the time. However, this assumption does not
hold with loops. Thus, GLITCHRESISTOR performs a second
pass to add the same redundant instrumentation to the false
branch of loop guards.
c) Detection Reaction: GLITCHRESISTOR does not dic-
tate an action to be taken when a glitch is detected, but
instead provides a function that is trivially implemented by the
developer. In fact, the speciﬁc reaction to a detected glitching
attempt is necessarily application speciﬁc. For example, on
a gaming system, it may be sufﬁcient to simply report the
attempt or disable updates, whereas a critical military system
may want to react more assertively by completely destroying
the data or device.
1) Random Timing: GLITCHRESISTOR currently injects
randomness in the execution by injecting a random busy loop
at the end of each basic block. The current implementation is
a simple linear congruential generator (LCG) with the input
parameters used by glibc, and each invocation executes
between 0 and 10 no-operation (NOP) instructions. To ensure
that any observable trigger is necessarily before the random
function, the delay function is injected at the end of every basic
block that ends in a SwitchInst or BranchInst (i.e.,
right before a branch). This code injection was implemented
as an LLVM FunctionPass. Functions can be easily omitted
when the module is conﬁgured in opt-out mode or included
when it is conﬁgured in opt-in mode. Our seed is incremented,
and written to ﬂash, during the ﬁrst invocation of the function
(on our STM32 board, this was implemented in 10 lines of
portable C code). GLITCHRESISTOR modiﬁes the state of
the random function immediately after the board boots (even
before the board initializes) and writes the new seed to non-
volatile memory to thwart repeated attempts against the same
seed. This initialization code is also instrumented by the other
defenses, which are capable of detecting glitching attempts.
VII. EVALUATION OF DEFENSES
GLITCHRESISTOR was both developed and evaluated on
real hardware, using the STM32 suite of embedded devices.
Two research questions arise with respect to defenses:
RQ6 How much overhead, both size and run-time, is incurred
when using each GLITCHRESISTOR defense?
RQ7 How effective are the various GLITCHRESISTOR de-
fenses at both mitigating and detecting glitching attacks?
A. Overhead
To evaluate the overhead imposed by GLITCHRESIS-
TOR we ﬁrst built a simple, indicative ﬁrmware using the
STM32CubeMX code generator. This ﬁrmware initializes the
board, and then loops forever, reading the number of ticks
(i.e., milliseconds) since the board was booted and printing out
performance information after every loop iteration using the
universal asynchronous receiver-transmitter (UART) interface.
The variable that is used to store the tick counter was marked
as a sensitive variable, and two functions that use ENUMs and
constant return values are used to check the tick value. The
ﬁrmware will call a success function if the tick value is ever
equal to 0, which was designed to be impossible.
The speciﬁc board that we used in this experiment was an
STM Nulceo 64 with an ARM Cortex-M4 (STM32F303RE)2.
The default project, conﬁgured to be built with a Makefile
was easily augmented to be built with LLVM and the ap-
propriate GLITCHRESISTOR modules using a patching script
that is provided with GLITCHRESISTOR. To ensure that there
was no bias in the evaluation, we only measure the boot time
of the system, as this code was provided by the CubeMX
suite, and is used in numerous real systems. Moreover, the
most security-critical code on embedded systems (i.e., when
GLITCHRESISTOR would provide the most value) is typically
the bootloader. Each ﬁrmware was built using the default -Og
optimization, which provides a worst case size. Eventually, we
want to use existing static analysis techniques [41], [40] to
further reduce the regions of code that need to be instrumented.
1) Run-time: To evaluate the boot process in a chip-
agnostic way, we use the number of CPU cycles as our metric
for comparison. This was done by enabling the data watchpoint
and trace unit (DWT) on the board, and then reading the CPU
once when the board is reset, and again after the hardware
abstraction layer (HAL) and board had completely initialized.
2This is different from our glitching examples, because this board is more
readily available and requires no special hardware to test with.
TABLE IV: Time overhead imposed by each defense on the
boot time of a standard STM32 ﬁrmware image (clock cycles)
Defense Clock Cycles (Avg.) % Increase Constant % Adjusted
None
10521.45% 177849
0.00%
11.35%
0.06%
0.06%
0.17%
19.93%
0
0
0
0
0
0
10542.93% 177993
Branches
Delay
Integrity
Loops
Returns
All\Delay
All
1736
1933
184388
1737
1737
1739
2082
184761
0.00%
11.35%
276.69%
0.06%
0.06%
0.17%
19.93%
289.88%
Since our board is doing relatively simple operations, it only
takes 1,736 clock cycles to boot in the un-instrumented case.
We evaluated each defense independently, as they can be used
`a la carte. The results are shown in Table IV.
Injecting delays incurs a substantial constant overhead, as
it must both read and write from ﬂash memory the ﬁrst
time that it is called to update the seed to ensure that the
pseudo-random number generator (PRNG) is unpredictable at
every boot. When this constant overhead is accounted for,
instrumenting every basic block in the boot process incurs a
277% overhead. However, in practice, a developer may want
to use this particular feature in an “opt-in” way, such that it
will only be applied to optionally annotated functions. Without
the delay defenses enabled on every basic block, the run-time
overhead incurred, in terms of clock cycles, is less than 20%.
Nevertheless, both of these overheads are likely acceptable
in practice to protect the critical code regions in a deployed
embedded system.
2) Size: Since most embedded systems have strict con-
straints on their size, weight, and power (SWaP), we also enu-
merate how much additional code is inserted by GLITCHRE-
SISTOR. Table V depicts the various code segments that
are affected by each defense in GLITCHRESISTOR. Again,
injecting a delay into every basic block incurs the largest
overhead (13%). Meanwhile, the other defenses only combine
for a 15% increase in size, most of which is in the .text
segment. While modifying constant values (i.e., returns and
ENUMs) should, in theory, be “free,” we actually see that they
increase the size of the binary slightly because the transformed
values are all necessarily four bytes, while smaller values can
be encoded as a single byte. While these overheads may seem
large after an initial glance, it is a small price to pay for the
protection provided.
TABLE V: Size overhead imposed by each individual defense
on a standard STM32 ﬁrmware built using CubeMX (bytes)
Defense
text text (%) data data (%) bss bss (%) total total (%)
None
120
6456
Branches 6956 7.74% 120
7512 16.36% 128
Delay
6840 5.95% 124
Integrity
Loops
6840 5.95% 124
Returns
6460 0.06% 120
All\Delay 7700 19.27% 124
All
6.02%
13.29%
4.72%
4.72%
0.05%
15.08%
9144 41.64% 132 10.00% 1768 2.31% 11044 33.00%
1728
8304
0.00% 1728 0.00% 8804
6.67% 1768 2.31% 9408
3.33% 1732 0.23% 8696
3.33% 1732 0.23% 8696
0.00% 1728 0.00% 8308
3.33% 1732 0.23% 9556
B. Effectiveness of Defenses
When testing these defenses against real glitches, we created
both a worst case and best case scenario. In both cases
we marked our variables as volatile, which hinders the
effectiveness of the defenses (i.e., they should perform better
in practice). This is because the volatile variable cannot