23.40
20.26
2.67
2.70
2.43
2.45
Table 6. Detected intervals for varying values
of q (λ = 4.1pps, 1000 runs).
q
5
2.5
1.6
1.25
Watermarked
Mean Range Mean
1.71
29.16
1.69
29.44
1.82
29.61
29.78
1.77
Non-watermarked
Range
0–7
0–6
0–8
0–7
21–32
23–32
22–32
23–32
Figure 12. The ROC curves for the EN and
CCE tests.
termarked by an interval-based watermarking scheme, us-
ing the same watermark key, and aggregate these ﬂows to
extract watermarking parameters and the watermark key.
More speciﬁcally, the MFA attacker evaluates the aggre-
gate histogram of a number of watermarked ﬂows in order
to ﬁnd the watermark patterns, e.g., empty intervals, that are
similar for all of the watermarked ﬂows. The MFA attack
has been shown to be highly effective in compromising pre-
vious interval-based watermarking schemes [15,19,24]. We
analyze the resilience of SWIRL to multi-ﬂow attacks.
The ﬂow-dependent approach taken by SWIRL is de-
signed to resist multi-ﬂow attacks. In particular, since dif-
ferent ﬂows have different watermarks, an aggregated his-
togram should not exhibit any repeated patterns. However,
if the distribution of quantized values s is not uniform, an
MFA attack may be able to identify the watermark. For
example, if all watermarked ﬂows use the same value of s
for some interval, this will have a pronounced effect on the
histogram.
The parameter q helps smooth out the distribution.
In
Figure 13, we plot the histogram of 10 non-watermarked
ﬂows, and 10 watermarked ﬂows, using different choices
for q. With q = 5, the variance of the watermarked
ﬂows is similar to the unwatermarked case. However, with
q = 1.25, the histogram exhibits a clear pattern, since the
number of quantiﬁcation steps is too small and thus the dis-
tribution of s is heavily skewed.
In this scenario, we watermarked all ﬂows using the
same offset. By choosing randomized offset, we can de-
stroy the synchronization between ﬂows: any shift of at
least T /(mr) will result in completely unaligned ﬂows. As
discussed by Kiyavash et al. [10], an adversary could still
examine different potential alignments; however, when pa-
rameters from Table 3 are used, it would be necessary to
examine 640k alignments to ﬁnd the correct alignment of
k ﬂows; this is both computationally expensive and is also
deleterious to the false-positive detection rate for an MFA
attack.
Note that, although increasing the q parameter improves
resilience to the multi-ﬂow attack, it also increases the false-
negative rate. We demonstrate this in Table 6 by plotting the
number of intervals counted as detected among a sample
of both watermarked and non-watermarked ﬂows. We note
that the true detection rate falls with increasing q, whereas
the false positives remain unaffected (for a given threshold
η); this is consistent with the analysis in Section 4, where
q factors into the false-negative but not the false-positive
calculations.
Based on these results and the effect seen in Figure 13,
we pick q = 2.5 to balance detection performance and sus-
ceptibility to the MFA attack.
00.20.40.60.8100.10.20.30.40.50.60.70.80.91False PositiveTrue Positive  CCEEN(a) Non-watermarked histogram
(b) Watermarked histogram (q = 5)
(c) Watermarked histogram (q = 1.25)
Figure 13. Cumulative histogram of 10 ﬂows, non-watermarked and watermarked with different values
of q.
6.4 Active attacks
An adversary may use a more active approach to detect-
ing and removing watermarks; e.g., by sending packets with
embedded timestamps [13] to detect extra delays, or by in-
troducing extra delays at the stepping stone. It is easy to see
that, in the limit, the attacker can defeat any trafﬁc analysis
scheme by generating an independent packet schedule for
a relayed ﬂow, using dummy packets and introducing po-
tentially large delays [3]. Previous work on stepping stone
detection has considered limiting an attacker by a maximum
tolerable delay [6]; however, we expect that a normal user
would be less tolerant of added delays than a determined
attacker, and a blind watermarking scheme that introduces
delays that are much shorter than those it tolerates remains
elusive and is an apt area for future research. We note
that SWIRL will work well at detecting stepping stones and
other relays over which the attacker does not have full con-
trol, as is the case in the application described in Section 7.
7 Tor congestion attack
Watermarks have been traditionally seen as privacy-
invasive tools, since they can be used to link relayed ﬂows
and thus compromise anonymity systems such as Tor [5].
We show that SWIRL enables a new, privacy-enhancing use
of watermarks in order to prevent a certain type of attack
against Tor.
Evans et al. [7] demonstrated an attack on Tor that uses
active probing to detect which Tor routers are used to for-
ward a particular tunnel, thus breaking anonymity. Unlike
watermarks or passive trafﬁc analysis, their attack works
even when the routers being used are not under the con-
trol or observation by the adversary. The basis of the attack
comes from an earlier congestion attack, explored by Mur-
doch and Danezis [11]. However, a key feature of the new
attack is the use of bandwidth ampliﬁcation to create sufﬁ-
cient congestion as to make this attack practical on today’s
Tor network.
The bandwidth ampliﬁcation exploits the fact that paths
in Tor can be constructed to have an arbitrary length. This,
coupled with the fact that each hop on a path knows only
the previous and the next hop, makes it easy to construct a
path that loops through a set of routers many times. This, in
turn, ensures that a single packet sent by a user will result
in k packet transmissions at each of the routers in the loop,
for near-arbitrary values of k.
A potential defense described by Evans et al. is to mod-
ify the Tor protocol to restrict the number of circuit exten-
sions it allows, and thus the maximum path length. How-
ever, they point out that this is not sufﬁcient to completely
prevent such congestion attacks, as loops can still be cre-
ated by going outside the Tor network and then returning.
In particular, a client can create a Tor tunnel, which for-
wards its trafﬁc over Tor to TCP connection from an exit
node to some destination on the Internet. This TCP con-
nection can then be used to connect back to Tor as a client,
and repeat the circuit again. Iterating this process yields the
same functionality as the long-path attack. Although a naive
approach may be foiled by exit and entrance policies in Tor,
the attacker can instead use proxies, other anonymizers, or
hidden Tor entry and exit points. Evans et al. leave defense
to such external routing loops as an open problem.
We propose to use SWIRL as a solution. The basic strat-
egy is to conﬁgure Tor exit nodes to insert a SWIRL wa-
termark on all outgoing TCP trafﬁc. Note that this labels
the trafﬁc as coming from Tor, but given that the list of exit
nodes is published in the Tor directory, this does not sig-
niﬁcantly degrade privacy. Each entry guard, correspond-
ingly, tries to detect the SWIRL watermark on an incoming
TCP connection and rejects the stream if the watermark is
found. This way, the congestion attack is restricted to in-
2.62.622.642.662.682.72.722.742.762.782.8x 1040123456789102.62.622.642.662.682.72.722.742.762.782.8x 1040123456789102.62.622.642.662.682.72.722.742.762.782.8x 104012345678910ternal paths only, which can be solved using the solution
described above.
Note that this application can tolerate a signiﬁcant rate
of false positives (say, 10−3 or even higher). This is be-
cause a false positive will simply cause a legitimate user to
retry a connection; given that the current Tor network does
not provide very reliable service, an occasional extra failed
connection is unlikely to signiﬁcantly affect usability. This
means that SWIRL parameters can be tuned to be able to
mark shorter ﬂows as compared with other setting. Addi-
tionally, full invisibility is not needed, as the open proxies
are unlikely to be adversarial (if they were, they could sim-
ply generate the trafﬁc themselves). Thus, the q parameter
can be reduced to decrease false-negative errors.
It is important to realize that, although in principle any
trafﬁc analysis technique could be used, the properties of
SWIRL make it particularly suitable for this task. Pas-
sive trafﬁc analysis techniques (and non-blind watermarks)
would require each exit node to communicate timing pat-
terns of each exiting ﬂow to each entry node. In addition to
being very expensive, such an approach would completely
defeat the protection provided by the Tor network, as each
entry node would be able to detect which exit node each of
its ﬂows was using! A watermark, on the other hand, marks
only the exiting ﬂow and cannot be linked to the entry node.
(Each exit node could, in fact, use the same watermark.)
Additionally, other watermarking schemes introduce large
delays, affecting the usability of the Tor network. The de-
lays used by SWIRL, on the other hand, are signiﬁcantly
smaller than the typical latency of a Tor tunnel [22] and are
unlikely to be noticed.
To study this attack, we simulated SWIRL being applied
to Tor trafﬁc ﬂows. We used a set of ﬂow timings observed
by a Tor middle node4 in our tests. We used a total of 14
ﬂows that were long enough for our watermark. We then
ran tests using both watermarked and non-watermarked ver-
sions of the ﬂows to compute the number of true and false
intervals detected. The results are shown in Table 7. The
rates of the ﬂows had a natural separation into two classes
and we present the results for each class separately. Note
that our tests are most representative for a direct connection
from an exit to an entry node; any proxies or other relays
may introduce extra delays that affect parameter choices.
(However, the large and highly variable delays in the ac-
tual Tor network do not matter here, since the watermark
is being transmitted over a channel external Tor.) Prior to
implementation, it would be necessary to do a survey of
proxy mechanisms available for congestion attacks and tune
the parameter choices appropriately; we leave this to future
work.
4This data set was provided to us by Steven Murdoch.
Table 7. Watermark detection results for Tor
ﬂows.
True intervals
mean
27.51
28.76
range mean
5.89
17–32
21–32
6.88
False intervals
range
2–11
3–14
Flow rate
(pps)
3.25–3.57
11.58-14.33
8 Conclusion
We proposed SWIRL, a novel ﬂow-dependent water-
SWIRL uses an
marking scheme for network ﬂows.
interval-based structure in order to provide robustness to
network perturbations, while evading multi-ﬂow attacks
by making the watermark dependent on the containing
ﬂow. SWIRL performs blind watermarking, reducing the
communication overhead and computation overhead com-
pared to passive trafﬁc analysis or non-blind watermarking
schemes. We show through analysis, simulation, and exper-
iments that SWIRL is able to link related ﬂows using ﬂow
lengths as short as 2 minutes, while providing error rates
on the order of 10−6 or less. SWIRL introduces short de-
lays on average and it is undetectable using existing covert
channel detection tools. Finally, we show that SWIRL can
be used to address a congestion attack on the Tor network.
Acknowledgments
We would like to thank anonymous reviewers for their
comments on earlier drafts of this paper. We are also grate-
ful to Nabil Schear for his help in processing the CAIDA
data set and to Steven Murdoch for providing trafﬁc data
from the Tor network. This research was supported in part
by National Science Foundation grant CNS 08–31488 and
by the Boeing Trusted Software Center at the Information
Trust Institute, University of Illinois.
References
[1] A. Back, U. M¨oller, and A. Stiglic. Trafﬁc analysis at-
tacks and trade-offs in anonymity providing systems.
In
I. S. Moskowitz, editor, Information Hiding, volume 2137
of Lecture Notes in Computer Science, pages 245–247.
Springer, Apr. 2001.
[2] A. Bavier, M. Bowman, B. Chun, D. Culler, S. Karlin,
S. Muir, L. Peterson, T. Roscoe, T. Spalink, and M. Wawrzo-
niak. Operating systems support for planetary-scale network
services. In R. Morris and S. Savage, editors, Symposium on
Networked Systems Design and Implementation, pages 253–
266. USENIX, Mar. 2004.
[3] A. Blum, D. X. Song, and S. Venkataraman. Detection
of interactive stepping stones: Algorithms and conﬁdence
nologies, volume 2009 of Lecture Notes on Computer Sci-
ence, pages 10–29. Springer, July 2000.
[17] S. Staniford-Chen and L. T. Heberlein. Holding intruders
accountable on the Internet. In C. Meadows and J. McHugh,
editors, IEEE Symposium on Security and Privacy, pages
39–49. IEEE Computer Society Press, May 1995.
[18] C. Walsworth, E. Aben, kc claffy, and D. Andersen. The
traces—January.
CAIDA anonymized
http://www.caida.org/data/passive/
passive_2009_dataset.xml, Mar. 2009.
Internet
2009
[19] X. Wang, S. Chen, and S. Jajodia. Network ﬂow watermark-
ing attack on low-latency anonymous communication sys-
tems. In Pﬁtzmann and McDaniel [14], pages 116–130.
[20] X. Wang, D. Reeves, and S. F. Wu. Inter-packet delay based
correlation for tracing encrypted connections through step-
ping stones. In D. Gollmann, G. Karjoth, and M. Waidner,
editors, European Symposium on Research in Computer Se-
curity, volume 2502 of Lecture Notes in Computer Science,
pages 244–263. Springer, Oct. 2002.
[21] X. Wang and D. S. Reeves. Robust correlation of encrypted
attack trafﬁc through stepping stones by manipulation of
In V. Atluri, editor, ACM Conference
interpacket delays.
on Computer and Communications Security, pages 20–29.
ACM, 2003.
[22] R. Wendolsky, D. Herrmann, and H. Federrath. Performance
comparison of low-latency anonymisation services from a
user perspective. In N. Borisov and P. Golle, editors, Privacy
Enhancing Technologies Symposium, volume 4776 of Lec-
ture Notes in Computer Science, pages 233–253. Springer,
June 2007.
[23] K. Yoda and H. Etoh. Finding a connection chain for tracing
intruders.
In F. Cuppens, Y. Deswarte, D. Gollmann, and
M. Waidner, editors, European Symposium on Research in
Computer Security, volume 1895 of Lecture Notes in Com-
puter Science, pages 191–205. Springer, Oct. 2000.
[24] W. Yu, X. Fu, S. Graham, D.Xuan, and W. Zhao. DSSS-
In
based ﬂow marking technique for invisible traceback.
Pﬁtzmann and McDaniel [14], pages 18–32.
[25] Y. Zhang and V. Paxson. Detecting stepping stones.
In
S. Bellovin and G. Rose, editors, USENIX Security Sympo-
sium, pages 171–184. USENIX, Aug. 2000.
bounds. In E. Jonsson, A. Valdes, and M. Almgren, editors,
International Symposium on Recent Advances in Intrusion
Detection, volume 3224 of Lecture Notes in Computer Sci-
ence, pages 258–277. Springer, Sept. 2004.
[4] G. Danezis. The trafﬁc analysis of continuous-time mixes.
In D. Martin and A. Serjantov, editors, Workshop on Privacy
Enhancing Technologies, volume 3424 of Lecture Notes in
Computer Science, pages 35–50. Springer, May 2004.
[5] R. Dingledine, N. Mathewson, and P. F. Syverson. Tor:
In M. Blaze, editor,
The second-generation onion router.
USENIX Security Symposium, pages 303–320, Aug. 2004.
[6] D. Donoho, A. Flesia, U. Shankar, V. Paxson, J. Coit, and
S. Staniford. Multiscale stepping-stone detection: detecting
pairs of jittered interactive streams by exploiting maximum
tolerable delay. In A. Wespi, G. Vigna, and L. Deri, editors,
International Symposium on Recent Advances in Intrusion
Detection, volume 2516 of Lecture Notes in Computer Sci-
ence, pages 17–35. Springer, Oct. 2002.
[7] N. Evans, R. Dingledine, and C. Grothoff. A practical con-
gestion attack on Tor using long paths. In F. Monrose, editor,
USENIX Security Symposium, pages 33–50. USENIX, Aug.
2009.
[8] S. Gianvecchio and H. Wang. Detecting covert timing chan-
In P. Ning, S. D. C.
nels: an entropy-based approach.
di Vimercati, and P. F. Syverson, editors, ACM Conference
on Computer and Communications Security, pages 307–
316. ACM, Oct. 2007.
[9] A. Houmansadr, N. Kiyavash, and N. Borisov. RAINBOW:
A robust and invisible non-blind watermark for network
ﬂows. In G. Vigna, editor, Network and Distributed System
Security Symposium. Internet Society, Feb. 2009.
[10] N. Kiyavash, A. Houmansadr, and N. Borisov. Multi-
ﬂow attacks against network ﬂow watermarking schemes.
In P. van Oorschot, editor, USENIX Security Symposium.
USENIX, July 2008.
[11] S. Murdoch and G. Danezis. Low-cost trafﬁc analysis of tor.
In V. Paxson and M. Waidner, editors, IEEE Symposium on
Security and Privacy. IEEE Computer Society, May 2005.
[12] S. Murdoch and R. Watson. Metrics for security and perfor-
mance in low-latency anonymity systems. In N. Borisov and
I. Goldberg, editors, Privacy Enhancing Technologies Sym-
posium, volume 5134 of Lecture Notes in Computer Science,
pages 115–132. Springer, July 2008.
[13] P. Peng, P. Ning, and D. S. Reeves. On the secrecy of timing-
based active watermarking trace-back techniques. In V. Pax-
son and B. Pﬁtzmann, editors, IEEE Symposium on Security
and Privacy, pages 334–349. IEEE Computer Society Press,
May 2006.
[14] B. Pﬁtzmann and P. McDaniel, editors. IEEE Symposium on
Security and Privacy. IEEE Computer Society, May 2007.
[15] Y. Pyun, Y. Park, X. Wang, D. S. Reeves, and P. Ning.
Tracing trafﬁc through intermediate hosts that repacketize
ﬂows.
In G. Kesidis, E. Modiano, and R. Srikant, edi-
tors, IEEE Conference on Computer Communications (IN-
FOCOM), pages 634–642. IEEE Communications Society,
May 2007.
[16] J.-F. Raymond. Trafﬁc analysis: protocols, attacks, design
In H. Federrath, editor, Inter-
issues, and open problems.
national Workshop on Designing Privacy Enhancing Tech-