There are two typical PEP deployment options - integrated
or distributed [21]. In integrated PEPs, a PEP appliance oper-
ates on a single endpoint - typically the ISP satellite gateway
between the satellite network and the internet. In distributed
PEPs, a PEP appliance operates on multiple endpoints -
typically the customer satellite modem and the ISP gateway.
In either deployment, the PEP intercepts TCP trafﬁc and
applies optimizations in order to compensate for satellite
performance issues. Typically, PEPs do this in a manner which
is invisible to conversation endpoints so that no modiﬁcations
are required on consumer hardware. This is referred to as a
“transparent” PEP [20]. However, the concept of transparency
is somewhat misleading as, in many cases, PEP modiﬁcations
are still detectable (e.g. altered TCP sequence numbers).
Beyond this, PEPs vary quite broadly. Modiﬁcations made
to TCP packets are often proprietary and implementation-
speciﬁc. One common approach is to “split” incoming TCP
connections prior to transmission across the satellite link and
issue local ACK messages immediately for received TCP
packets [20]. This allows three-way handshakes and congestion
control to be negotiated locally before the satellite hop but
requires the PEP developer to handle errors across the split.
In distributed PEPs, this splitting approach is extended
3
to create a tunnel between the individual PEP installations
(see Figure 2). A TCP packet arriving at the client-side PEP
(e.g. on the home satellite modem), is terminated locally as a
TCP connection, and the payload is then forwarded through
GEO using a modiﬁed TCP protocol (e.g. TCP-Hybla) or an
alternative [13]. At the ISP gateway, a second PEP receives this
modiﬁed packet, converts it back to normal trafﬁc, and sends
it along a locally-managed TCP connection to the internet.
Other PEP strategies can range from modifying TCP con-
gestion control to bundling related packets into single trans-
missions. Commercial implementations often offer higher-level
features such as inspecting HTTP payloads and combining
requests for web-pages with their associated content [22]. A
substantial body of existing work on PEPs covers these opti-
mizations in detail not only for satellites, but also other latency
sensitive environments (e.g. cellular networks) [14]–[16].
3) Security Consequences: PEPs have become a vital com-
ponent of satellite broadband and customers have come to
expect the performance characteristics of PEP-accelerated net-
works. This has created unintended tension between broadband
performance and security.
As noted in RFC 3135, PEPs break the end-to-end seman-
tics of IP connections [20]. Speciﬁcally, they require that the
PEP appliance transparently modify packets - essentially acting
as a benevolent man-in-the-middle on all TCP connections.
This creates inherent compatibility issues with most commonly
used VPNs as the PEP is unable to “snoop” into the VPN
trafﬁc ﬂow and identify ACK messages. Even VPNs which
leverage TCP for the transport layer are not correctly accel-
erated as ACK messages within the encapsulated connection
are indistinguishable from other trafﬁc. While most VPNs
will function over PEPs, and in the case of TCP VPNs,
observe modest improvements in initializing VPN sessions,
functional browsing performance is roughly the same as if
no PEP was deployed. The type of VPN employed may have
marginal performance effects (e.g. UDP tunnels may receive
better prioritization from the satellite ISP) but from a PEP-
compatibility perspective, any VPN which does not leak the
full TCP headers of a customer’s connection faces the same
issues. As a result, end consumers are faced with a choice
between the security of VPNs and the performance of PEPs.
C. Existing Security Approaches
In this section, we will brieﬂy consider some of the more
consequential approaches proposed in academia and industry
to enable satellite broadband encryption at each layer of the
TCP/IP protocol stack. This analysis better characterizes how,
despite a long history of research, PEP-compatible security
remains unsolved in practice.
1) Physical and Link-Layer Approaches: Many techniques
for over-the-air encryption focus on the lower layers of the
networking stack - before TCP/IP becomes relevant. For ex-
ample, physical-layer techniques such as frequency hopping
patterns derived from cryptographic keys or direct sequence
spread spectrum (DSSS) have been suggested as a mechanism
for securing the entire satellite link [23]. Likewise the injection
of artiﬁcial noise as an alternative to key-based encryption has
been proposed [24]. These schemes tend to focus on military
systems as they often necessitate expensive modiﬁcations to
hardware that would be commercially unpalatable.
At the link layer, proposals still incur hardware costs but
costs are often more manageable and restricted to hardware-
based decapsulation. For example, the Consultative Committee
for Space Data Systems (CCSDS) has proposed Space Data
Link Security (SDLS), a protocol with built-in encryption for
telemetry commands to scientiﬁc space missions [25]. Like-
wise, the proprietary Common Scrambling Algorithm (CSA)
has long been used to restrict broadcast access to paying
satellite television subscribers using smart-cards, albeit with
notable security weaknesses [26].
One challenge for link and physical
layer encryption
systems like these is the multi-user environment. As it is
rarely economically feasible to allocate each customer a unique
satellite channel, customers with the same ISP will generally
have a key which allows them to receive trafﬁc from other
broadcast subscribers. In such systems, the customer modem
will determine which packets are relevant on the basis of
header information and drop other trafﬁc from the multiplex
streams. An additional challenge with these systems it the
process of key distribution and revocation over the broadcast
medium.
2) Network and Transport-Layer Approaches: To provide
over-the-air encryption with per-customer keys, a number of
network-layer techniques have been proposed. In contrast with
lower level approaches,
interactions with TCP PEPs must
now be considered directly. Many replicate traditional VPN
software with bespoke modiﬁcations - for example by creating
a modiﬁed IPSec with special encapsulating headers visible
to PEP appliances [27], [28]. Proprietary “satellite VPNs”
also exist which, while public information on their design
is limited, are likely similar in design [29], [30]. Beyond
concerns arising from proprietary encryption schemes, these
non-standard layers can increase operator costs by limiting
compatibility with existing networking equipment.
It makes intuitive sense to incorporate encryption within
PEP appliances themselves - straddling the network and trans-
port layers. This may be achieved by, for example, implement-
ing an encrypted protocol over the satellite hop in a distributed
PEP system. The transmitting PEP would ﬁrst modify the
TCP packets, then encrypt them. The receiving PEP would
subsequently decrypt the received packets and forward them
along the internet as normal. Many real-world PEP encryption
products appear to employ this approach [31]–[33].
Most, if not all, encrypted PEPs are proprietary and not sold
direct-to-consumer, making security claims difﬁcult to verify.
However, purported leaked manufacturer documents allude to
built-in law-enforcement/intelligence back-doors in prominent
examples [34]. Our own analysis of one satellite router with
a pre-installed proprietary PEP found numerous cryptographic
shortcomings, such as Difﬁe-Hellman implementations which
are susceptible to man-in-the-middle attacks and key/IV reuse
that permits replay attacks. Similar vulnerabilities have been
alluded to in prior research [35]. Generally,
the costs of
adopting an encrypted PEP are undertaken by ISPs who may
not perceive such purchases as value-for-money.
3) Application-Layer Approaches: An alternative approach
would be the use of protocols which operate over the PEP-
4
Simpliﬁed Overview of QPEP Architecture. A traditional “splitting” TCP PEP is combined with a tailored over-the-air QUIC tunnel which offers
Fig. 3.
encryption and further performance beneﬁts compared to TCP. This architecture can be employed by either individual customers in the form of software on
their computers and enterprise routers or by ISPs in the form of ground-station and modem software.
accelerated TCP connection. The widespread use of TLS en-
cryption for websites, for example, has the effect of encrypting
customer data over-the-air. However, this still leaks potentially
sensitive data (such as the IPs a customer visits) over the
massive radio-eavesdropping footprint of a satellite signal.
Moreover, real-world observations of modern satellite trafﬁc
(see III-A) have found that, while customers could, in theory,
use TLS, many do not. While this decision is the customer’s,
satellite ISPs may nevertheless have a duty of care.
Another application-layer approach is tunneling trafﬁc into
an encrypted TCP stream and issuing local ACK messages
before the data egresses from the client’s computer. This differs
from most SSL-VPNs which do not spoof the connection
endpoint. Some commercial products appear to implement this
approach [36]. However, the requirement of software installed
on the client’s computer limits compatibility with embedded
devices and creates friction.
IV. QPEP DESIGN CONSIDERATIONS
To address some of these shortcomings we have developed
QPEP, an open-source and non-proprietary tool which can
be used by both individuals and ISPs to both encrypt and
accelerate satellite TCP trafﬁc1. At its core, QPEP follows
a distributed “snooping” PEP model similar to the methods
described in Section III-C2. The QPEP client tunnels TCP
trafﬁc over the satellite link inside a stream that leverages
the encrypted QUIC transport protocol. Tunneled trafﬁc is
decapsulated by a receiving QPEP server which then routes
the decapsulated trafﬁc over the internet as if it were the client.
A high level overview of this architecture appears in Figure 3.
A. QPEP Design Objectives
QPEP’s principal objective is to protect against forward
link eavesdropping attacks without suffering the same perfor-
mance reductions are traditional VPN software. Much like end-
to-end VPN encryption, QPEP expands the threat model to
1Source code and documentation for both our QPEP implementation and our
OpenSAND-based testbed environment are available publicly (https://github.
com/ssloxford/qpep). Example python scripts used to run all of the simulation
scenarios presented in this paper are provided.
include both wireless eavesdroppers and the ISP, seeking to
avoiding leaking meta-data and routing information to service
providers. These objectives, and their contrast with status-quo
techniques, are summarized in Table I.
The fundamental security design of QPEP is deliberately
straightforward. For example, we use QUIC - a proven and
popular standard - instead of designing our own scheme for
authentication, key exchange, and session management over
the satellite link. As mentioned in Section II, our goal with
this research is to adequately resolve an urgent issue affecting
real-world networks. If a suitable combination of existing
and trusted methods can meet this need, arbitrarily complex
variations serve little purpose beyond academic diversion.
While simplicity and novelty often feel mutually exclusive,
that is not the case here. QPEP arises from the interaction of
two seemingly unrelated design factors which have not been
considered together in prior work. The ﬁrst is the recognition
that PEP applications are the traditional prerogative of satellite
ISPs for cultural and commercial, rather than technical, rea-
sons; there is no underlying reason that customers could not
choose to “bring their own PEP” other than its redundancy
with the service their ISP already offers. The second is that
the TCP-tampering phase of a PEP’s operation represents an
ideal opportunity for modifying not just the performance of a
connection, but also its security properties.
Together, these factors give rise to QPEP’s unique hybrid
between customer-oriented tunneling VPNs and ISP-oriented
PEPs. This is a signiﬁcant deviation from status quo ap-
proaches which treat the application archetypes as distinct.
This paper focuses on the design and evaluation of a
speciﬁc implementation of this hybrid approach. However, the
core system architecture is a contribution which is agnostic
to the encryption schemes and transport protocols employed.
Indeed, the open-source code for both QPEP and its simulation
testbed is designed to facilitate the swapping out of individual
engineering components by researchers.
5
CustomerWorkstationQPEPClientSatelliteTerminalGEOSatelliteISPGroundstationInternetQPEPServerInternetDestinationServer}{TCPSessionsMultiplexedandEncryptedQUICSessionTCPSessions(orfurtherVPN)TABLE I.
QPEP COMPARISON TO STATUS-QUO PEP AND SECURITY OPTIONS
Accelerated TCP
Connections
Private From
Wireless Eavesdropper
Private From
Satellite Service Provider
Intended For
Customer Deployment
Intended For
Service Provider Deployment
No
Yes
No
Yes
Yes
No
No
Yes
Partially
(IP Headers Leaked)
Yes
No
No
Yes
No
Yes
Yes (Default)
Yes (Default)
No
Yes
No
Yes
Yes
No
Yes
Yes
Open Source
Implementations
Yes (Default)
Yes
(Rare/Unmaintained)
Yes
No
Yes
Plain
Connection
Traditional PEP
(e.g. [37])
(e.g. [39])
QPEP
(this paper)
Traditional VPN
(e.g. [38])
Secure PEP Product
B. Use of the QUIC Protocol
The principal strategy employed by QPEP to support over-
the-air security is the use of the QUIC protocol for tunneling
trafﬁc over the satellite link. While the QUIC standard is
still evolving, it has already seen wide adoption in terrestrial
networks due to its performance and security advantages
over TCP. Several of these beneﬁts make QUIC intuitively
promising for secure PEPs.
1) QUIC Security Beneﬁts: QUIC is an encrypted-by-
default transport protocol. Unlike TCP, the session initializa-
tion process for QUIC incorporates a modiﬁed version of the
TLS 1.3 handshake (see Figure 4). This means QPEP’s QUIC
tunnel can readily provide both encryption for encapsulated
payloads and built-in end-point authentication. The addition
of encryption mitigates many of the basic security concerns