# Title: EasyApp: A Cross-Platform Mobile Application Development Environment Based on OSGi

## Authors
- Zhaoning Wang
- Bo Cheng (corresponding author)
- Zhongyi Zhai
- Ying Jin
- Yimeng Feng
- Junliang Chen

## Affiliation
State Key Laboratory of Networking and Switching Technology  
Beijing University of Posts and Telecommunications, Beijing, China  
Email: [PI:EMAIL], [PI:EMAIL]

## Abstract
The rapid growth of mobile internet has attracted many end-users to create their own mobile applications. Traditional development processes, however, often fail to meet their needs. We present EasyApp, a cross-platform mobile application development environment based on the OSGi framework. EasyApp provides a highly integrated, user-friendly, and easy-to-use environment. Applications are developed using web technologies, allowing users to create mobile applications with draggable widgets. Native APIs of mobile devices can be invoked through a variety of plugins. After designing, users can package and download applications for multiple platforms.

## CCS Concepts
- **Human-centered computing** → Mobile computing
- **Networks** → Programmable networks

## Keywords
Mobile application, end-user development, widget communication, OSGi

## 1. Introduction
The recent trend in mobile internet has inspired both professional and amateur developers to create diverse mobile applications. Millions of applications are available on platforms like the App Store and Google Play. While professional developers have been enthusiastic, many amateur developers, including ordinary users and UI designers, also show a strong interest in creating their own applications. Traditionally, developing an application is a complex and structured process that requires the expertise of software engineers and technical directors. This process can take several weeks or even months to produce a beta version, involving knowledge from multiple domains, which is often beyond the capabilities of end-users. Clearly, the traditional approach does not meet the needs of end-users, who require a highly integrated, user-friendly, and easy-to-operate platform.

Several products aimed at non-technical users have been released, such as MIT App Inventor. MIT App Inventor provides an online visual design environment with draggable components for Android applications and a logic editor to design service logic. While it is a powerful tool, it still has some limitations:
- Only native components of the Android SDK can be used, and no extension interface is provided, limiting customization.
- It only supports the Android platform, excluding other popular platforms.
- The development process is still not simple enough for beginners, requiring time to understand the operating procedures.

Given these challenges, we designed and implemented EasyApp, a cross-platform mobile application development environment.

## 2. Architecture

### 2.1 Overview
Figure 1(a) shows the architecture of EasyApp, which follows the basic B/S model. Web technologies are used to develop mobile applications. The server-side is implemented using the Equinox framework's APIs. Each functional module is encapsulated in an individual bundle. The server core bundle is responsible for constructing the server-side services, while the client core bundle manages the essential resources of the front-end. The UI widgets used to create applications are managed and loaded by this bundle.

### 2.2 UI Widgets and Libraries
UI widgets are draggable elements used to build mobile applications. A typical component belongs to a widget library, which includes several widgets. Each library corresponds to a bundle that contains all the necessary resources and information. As shown in Figure 1(c), the standard widget library consists of two parts: library resources and metadata. Library resources provide the basic support, with each widget corresponding to a JavaScript module. Metadata maintains the basic information about the widgets and the library. `package.json` describes the required resources and the relative path of the widget library, while `widgets.json` provides an index list of all the widgets in the library. Each widget requires an OAM (OpenAjax Metadata) file, which describes the source libraries, required files, rendering content, and other essential metadata.

### 2.3 Widgets Communication Model
There is a multi-level communication model among the widgets. As shown in Figure 1(b), the bottom level is the environment level, where library bundles register their ID and path to the Equinox registry through the extension point mechanism. Above this is the server level, where the `LibraryManager` of the Server Core bundle manages all widget libraries. When the server-side is loaded, the `LibraryManager` activates the library bundles through the Equinox registry, making the libraries accessible. The widgets in the libraries are loaded according to the index lists and OAM files. At the widget level, widgets invoke each other using `require` APIs, potentially requiring other widget modules and web sources.

### 2.4 Cross-Platform Mobile Apps Creation
To simplify the packaging process, we transfer the complex configuration and compilation tasks to the server-side, making the process transparent to users. The server-side monitors packaging requests from the front-end. Once a request is received, the packaging script is executed, and the package is downloaded when it is created. Users can get the installation package with a one-click button. PhoneGap is used as a middleware to provide JavaScript interfaces for native APIs.

## 3. Implementation
Figure 2 shows the comprehensive GUI of the EasyApp development environment, which consists of four major parts:
1. A palette of widget libraries providing draggable widgets.
2. A tree structure of the file system, including all folders and resources.
3. A visual editor and code editor.
4. A configuration panel for styling and attributing widgets and binding plugins to the UI.

## 4. Case Study
We demonstrate the process of designing and developing an application called "Smart Parking Lot." This process illustrates the basic operations, including dragging widgets, configuring attributes, and one-click packaging. (See the video demonstration: <https://youtu.be/LO91IWQRo9g>)

## 5. Acknowledgments
This work was supported by the National Natural Science Foundation of China (61132001 and U1536111), the National High-tech R&D Program of China (2013AA102301), and the Guangxi Key Laboratory of Trusted Software (kx201415).

## 6. References
1. Phonegap.com. <http://phonegap.com/>, 2016.
2. S. C. Pokress and J. J. D. Veiga. MIT App Inventor: Enabling Personal Mobile Computing. arXiv preprint arXiv:1310.2830, 2013.