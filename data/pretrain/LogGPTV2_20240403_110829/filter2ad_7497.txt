title:EasyApp: A Cross-platform Mobile Applications Development Environment
Based on OSGi
author:Zhaoning Wang and
Bo Cheng and
Zhongyi Zhai and
Ying Jin and
Yimeng Feng and
Junliang Chen
EasyApp: A Cross-platform Mobile Applications
Development Environment Based on OSGi
∗
Zhaoning Wang, Bo Cheng
, Zhongyi Zhai, Yimeng Feng, Ying Jin, Junliang Chen
State Key Laboratory of Networking and Switching Technology
Beijing University of Posts and Telecommunications, Beijing, China
PI:EMAIL, PI:EMAIL
ABSTRACT
The rapid development of mobile internet attracts many
end-users to creating mobile applications. Traditional
development process cannot meet their needs. We present
a cross-platform mobile development environment based
on OSGi framework, EasyApp.
It provides a highly-
integrated, UI-friendly and easily-operating environment.
Applications are developed with web techniques. Users
could create mobile applications with draggable wid-
gets. Native APIs of mobile phone can be invoked with
abundant plugins. After designing, users could package
and download applications of multiple platforms.
CCS Concepts
•Human-centered computing → Mobile comput-
ing; •Networks → Programmable networks;
Keywords
Mobile application; end-user development; widgets com-
munication; OSGi
1.
INTRODUCTION
the recent trend of mobile internet has been inspired
developers to create diverse mobile applications. Mil-
lions of applications are available in App Store and
Google Play. However, not only are the professional
developers’ passion inspired, plenty of amateur devel-
opers, such as ordinary users and UI designers show
their intentions of creation. Traditionally, development
∗Bo Cheng is the correspongding author.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM’16 August 22-26, 2016, FlorianÃ¸spolis, BraziL
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959074
of an application is a complicated and structural pro-
cess which is executed by professional software engi-
neers and technical directors. It will last several weeks
even months until a beta version is produced. Knowl-
edge of multiple subjects are involved, which is impos-
sible for end-users to handle it. Obviously, the tradi-
tional way cannot satisfy the requirements of end-users.
They need a highly-integrated, UI-friendly and easily-
operating platform.
Currently, a few products aiming at no-trained per-
sons have been released. MIT App Inventor[2] is a typ-
ical one of them. It provides users an online visual de-
signing environment with draggable components of An-
droid applications and a logic editor to design the ser-
vice logic. It is a powerful tools but some existing prob-
lems still remain to solve. Firstly, only native compo-
nents of Android SDK can be used in the visual designer
and no components extending interface is provided, so
there is not much customization for usesr. Secondly,
only Android platform is supported while other popu-
lar platform is not available. Thirdly, the development
process is still not simple enough. Time is needed for
beginners to understand the operating process. Given
these facts, we designed and implemented this cross-
platform mobile applications development environment,
called EasyApp in this paper.
2. ARCHITECTURE
Figure 1 (a) shows the architecture of EasyApp. It
follows the basic B/S model. Web techniques are used
to develop mobile applications. The server-side is im-
plemented with the APIs of Equinox framework. Every
function module is encapsulated in an individual bun-
dle. Server core bundle is responsible for constructing
the server-side service. Client core bundle is responsible
to managing the essential resources of front-end. The
UI widgets used to create applications are managed and
loaded by this bundle.
2.1 UI Widgets and Libraries
UI widgets are draggable widgets consisting of mo-
bile applications. A typical component belongs to wid-
get library. A library includes several widgets. Every
615
Figure 1: Architecture and Communication Model of EasyApp
library corresponds to a bundle which saves all the es-
sential resources and information. As shown in Figure
1 (c), the standard widget library includes two parts,
library resources and metadata. Library resources pro-
vide the basic support. Every widget corresponds to a
Javascript module. Metadata maintains the basic infor-
mation of widgets and library. Package.json describes
requiring resources and relative path of the widget li-
brary. Widgets.json provides an index list of all the
widgets of this library. For each widget, an OAM (Ope-
nAjax Metadata) ﬁle is required.
It describes source
libraries, requiring ﬁles, rendering content and other es-
sential metadata of a widget.
2.2 Widgets Communication Model
Among the widgets there exists a multi-level commu-
nication model. As shown in Figure 1 (b), the bottom
level is environment level. Library bundles register the
ID and path to Equinox registry through the extension
point mechanism. Over it is the server level. Library-
Manager of Server Core bundle manages all widget li-
braries. When server-side is loaded, LibraryManager
activates the library bundles through the Equinox reg-
istry and the libraries could be accessed. The widgets
of libraries are loaded according to the index lists and
OAM ﬁles. The next level is widget level. For all wid-
gets, they invoke each other with require APIs. Other
widget module and web source might be required.
2.3 Cross-platform Mobile Apps Creation
To simplify the operations of packaging applications,
we transfer the complicated conﬁguration and compil-
ing process to the server-side. This whole process is
transparent to users. Server-side monitors the packag-
ing request from front-end. As soon as it comes, the
packaging script will be executed. The Package will
be downloaded when it is created. Users could get in-
stalling package with one-click button. Phonegap[1] is
imported as a middleware to provide Javascript inter-
faces of native APIs.
3.
IMPLEMENTATION
Figure 2 shows the comprehensive GUI of EasyApp
Figure 2: the GUI of Development Environment
development environment. It consists of 4 major parts.
Especially, the one-click package button group is marked
in red circle. Part 1 is a palette of widget libraries pro-
viding draggable widgets. Part 2 shows the tree struc-
ture of ﬁle system including all folders and resources.
Part 3 contains visual editor and code editor. Part 4 is
conﬁguration panel which can be used to conﬁgure style
and attribute of the widgets and bind plugin to UI.
4. CASE STUDY
We demonstrate the process of designing and devel-
oping an application, Smart Parking Lot. This process
shows the basic operation, dragging widget, conﬁgur-
ing attributes and one-click packaging.(https://youtu.
be/LO91IWQRo9g)
5. ACKNOWLEDGMENTS
This work was supported by National Natural Science
Foundation of China(61132001 and U1536111), National
High-tech R&D Program of China(2013AA102301) and
Guangxi Key Laboratory of Trusted Software(kx201415).
6. REFERENCES
[1] Phonegap.com. http://phonegap.com/, 2016.
[2] S. C. Pokress and J. J. D. Veiga. Mit app inventor:
Enabling personal mobile computing. arXiv
preprint arXiv:1310.2830, 2013.
616