# Dynamic Searchable Encryption with Small Client Storage

## Authors
Ioannis Demertzis<sup>∗</sup>, Javad Ghareh Chamani<sup>†‡</sup>, Dimitrios Papadopoulos<sup>†</sup>, and Charalampos Papamanthou<sup>∗</sup>

- <sup>∗</sup>University of Maryland
- <sup>†</sup>Hong Kong University of Science and Technology
- <sup>‡</sup>Sharif University of Technology

## Abstract
We investigate the problem of dynamic searchable encryption (DSE) with forward-and-backward privacy. While many DSE schemes have been proposed, the most efficient ones require maintaining an operation counter for each unique keyword, either locally at the client or encrypted at the server with oblivious access. We introduce three new schemes that overcome this limitation, achieving constant permanent client storage with improved performance, both asymptotically and experimentally, compared to state-of-the-art works. Our first two schemes use a "static-to-dynamic" transformation, eliminating the need for oblivious accesses during searches. These are the first practical schemes with minimal client storage and non-interactive search. Our third scheme is the first quasi-optimal forward-and-backward DSE scheme with only a logarithmic overhead for retrieving query results, independent of previous deletions. Although it requires an oblivious access during search to keep client storage minimal, its practical performance is up to four orders of magnitude better than the best existing quasi-optimal search scheme.

## 1. Introduction

With the rise of data outsourcing and increasing awareness of user data privacy, the ability to compute on encrypted data stored on remote, untrusted servers has become essential. A fundamental task in this area is searching in encrypted datasets. For example, given a collection of encrypted documents, a query might return all identifiers of documents containing a specific keyword \( w \), without decrypting the documents. This is known as searchable encryption (SE) and has applications such as encrypted email [42] and encrypted image storage in the cloud [2] with search capabilities. Since its introduction by Song et al. [51], SE has been extensively studied to improve efficiency and support advanced functionalities, including boolean queries [13, 34], sub-string, wild-card, and phrase queries [26], and various database queries like point [23, 24], range [22, 21, 26], and more general SQL queries [35] (e.g., join and group-by queries).

### 1.1 Leakage in Searchable Encryption

To achieve good practical performance, it is common for SE schemes to allow some information leakage to the server. This leakage can occur during initialization (e.g., dataset size) or during query execution (e.g., access and search patterns, document identifiers, and when the search was performed).

### 1.2 Dynamic Searchable Encryption (DSE)

Recent research has focused on DSE schemes that efficiently support modifications in the encrypted dataset without reinitialization. From a security perspective, developing secure DSE schemes is challenging due to the additional information that may be revealed through updates. Two relevant security notions for DSE are forward and backward privacy.

- **Forward Privacy** [15, 52]: Ensures that a new update cannot be linked to previous operations (until the related keyword is searched). This is crucial for building encrypted datasets "on-the-fly" and mitigating leakage-abuse attacks.
- **Backward Privacy**: Ensures that if a document containing keyword \( w \) is deleted before a search for \( w \), the search result does not reveal anything about the deleted document. Backward privacy was first proposed by Stefanov et al. [52] and formally defined by Bost et al. [10].

### 1.3 Challenges in DSE

#### Challenge 1: DSE with Small Client Storage
Most practical DSE constructions require the client to store a table that holds a counter \( a_w \) for each keyword, counting the number of updates. This approach is efficient but increases client storage. For example, for the Enron email dataset, the client must store a table of 77K unique keywords, reducing local storage by 33×. For relational databases, the improvement in local storage can be negligible. Storing counters per word is problematic, especially for multi-device access, which requires synchronization and state transfer.

#### Challenge 2: DSE with (Quasi-)Optimal Search
For plaintext datasets, the \( n_w \) document identifiers of files currently containing \( w \) can be retrieved optimally with \( n_w \) operations. This performance can be achieved for insertion-only DSE schemes. With deletion-supporting DSE, \( n_w \) can be much smaller than the total number of updates. The only backward-private schemes that come close to optimal performance are from [29], but they have poor practical performance due to high communication costs.

### 1.4 Our Results

In this work, we present novel schemes that address these challenges:

1. **SDa Scheme**: A black-box reduction from any result-hiding static SE to a backward-and-forward private DSE. It has \( O(a_w + \log N) \) search cost and \( O(\log N) \) amortized update cost. SDa is the first DSE with \( O(1) \) permanent client storage without using oblivious primitives, significantly outperforming existing schemes for searches.

2. **De-amortized Version of SDa**: To avoid large temporary client storage during amortized updates, we present a de-amortized version.

3. **QOS Scheme**: The first quasi-optimal forward-and-backward DSE scheme with only a logarithmic overhead for retrieving query results, independent of previous deletions. Although it requires an oblivious access during search to keep client storage minimal, its practical performance is up to four orders of magnitude better than the best existing quasi-optimal search scheme.

These contributions advance the state of the art in DSE, providing practical and efficient solutions for small client storage and (quasi-)optimal search.