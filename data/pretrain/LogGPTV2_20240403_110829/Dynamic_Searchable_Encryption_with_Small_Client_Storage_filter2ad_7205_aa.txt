title:Dynamic Searchable Encryption with Small Client Storage
author:Ioannis Demertzis and
Javad Ghareh Chamani and
Dimitrios Papadopoulos and
Charalampos Papamanthou
Dynamic Searchable Encryption with
Small Client Storage
Ioannis Demertzis∗, Javad Ghareh Chamani†‡, Dimitrios Papadopoulos† and Charalampos Papamanthou∗
∗University of Maryland
†Hong Kong University of Science and Technology
‡Sharif University of Technology
Abstract—We study the problem of dynamic searchable en-
cryption (DSE) with forward-and-backward privacy. Many DSE
schemes have been proposed recently but the most efﬁcient ones
have one limitation: they require maintaining one operation
counter for each unique keyword, either stored locally at the
client or stored encrypted at the server and accessed obliviously
(e.g., with an oblivious map) during every operation. We propose
three new schemes that overcome the above limitation and achieve
constant permanent client storage with improved performance,
both asymptotically and experimentally, compared to prior state-
of-the-art works. In particular, our ﬁrst two schemes adopt a
“static-to-dynamic” transformation which eliminates the need for
oblivious accesses during searches. Due to this, they are the ﬁrst
practical schemes with minimal client storage and non-interactive
search. Our third scheme is the ﬁrst quasi-optimal forward-and-
backward DSE scheme with only a logarithmic overhead for
retrieving the query result (independently of previous deletions).
While it does require an oblivious access during search in order to
keep permanent client storage minimal, its practical performance
is up to four orders of magnitude better than the best existing
scheme with quasi-optimal search.
I.
INTRODUCTION
With the advent of data outsourcing and the increasing
awareness for user data privacy, the ability to compute on
encrypted data stored on a remote untrusted server has emerged
as a necessary tool. A fundamental task in this area is searching
in encrypted datasets. E.g., assuming a collection of encrypted
documents, a query may be to return all the identiﬁers of the
documents containing the keyword w, without ﬁrst decrypting
the documents. In the literature, this is known as searchable
encryption (SE) and it has found applications such as building
encrypted email [42] and encrypted image storage in the
cloud [2] with search capabilities. Since its ﬁrst introduction
by Song et al. [51], almost twenty years ago, SE has been a
topic of signiﬁcant study, e.g., in order to improve its efﬁciency
aspects, or to accommodate more advanced functionalities,
such as boolean queries [13], [34], sub-string, wild-card and
phrase queries [26], and a variety of database queries, such as
point [23], [24], range [22], [21], [26] and more general SQL
queries [35] (e.g., join and group-by queries).
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24423
www.ndss-symposium.org
In order to achieve good practical performance,
it has
become commonplace in the literature to allow SE schemes
to reveal some information about the dataset to the server,
referred to as leakage. This leakage can occur at an initializa-
tion phase (e.g., the dataset size) or during the execution of
a query (e.g., access and search pattern, the identiﬁers of the
documents containing w and when this search was performed
previously, respectively).
Dynamic SE. Recent research has focused on dynamic search-
able encryption (DSE) schemes that can efﬁciently support
modiﬁcations in the encrypted dataset, without the need to re-
initialize the protocol. From a security perspective, developing
secure DSE schemes is challenging due to the additional
information that may be revealed to the server because of
updates. Two relevant security notions have been proposed
for dynamic SE schemes—forward and backward privacy.
Forward privacy [15], [52] ensures that a new update cannot
be related to previous operations (until the related keyword
is searched). Besides the obvious beneﬁt of allowing the
encrypted dataset to be built “on-the-ﬂy” (crucial for certain
applications, e.g., encrypted e-mail storage starting from a
new mailbox), forward privacy is essential for mitigating
certain leakage-abuse attacks that depend on adversarial ﬁle
injection [56].
On the other hand, backward privacy ensures that if a
document containing keyword w is deleted before a search for
w, the result of this search does not reveal anything about this
document. Backward privacy is much less studied than forward
privacy. It was ﬁrst proposed in NDSS 2014 by Stefanov et
al. [52] and formally deﬁned recently in CCS 2017 by Bost et
al. [10] who proposed three types of backward-privacy. During
a search, BP-I reveals only the identiﬁers of ﬁles currently
containing w and when they were stored, BP-II additionally
reveals the timestamps and types (insertion/deletion) of all
prior updates for w, and BP-III additionally reveals for each
prior deletion which insertion it canceled.
Challenge 1: DSE with small client storage. The majority
of practical DSE constructions from the literature (e.g., [9],
[10], [29], [25]) require the client to locally store a table
that holds for every keyword in the dataset a counter aw that
counts the number of updates for w (some schemes store an
additional counter for searches). This allows for very efﬁcient
schemes in practice, e.g., insertion of the entry (w, id, add)
after aw updates can be done by encrypting (w, id) and
placing the ciphertext in a hash map (stored at the server)
at position F (k, (w, aw + 1)), where F is a pseudorandom
TABLE I: Comparison of existing forward-and-backward-private DSE with small client storage. N is an upper bound for total
insertions, |W| = #distinct keywords. For keyword w: aw = #updates, iw = #insertions, dw = #deletions, nw = #ﬁles
containing w. RT is #roundtrips for retrieving DB(w). BP stands for backward privacy type (the smaller, the better) and am.
for amortized efﬁciency. The ˜O notation hides polylogarithmic factors. WO stands for storing search/insertion counters for each
w at an oblivious map. To minimize client storage, oblivious map stashes are stored at the server and downloaded every time.
Scheme
Computation
Search
MONETA [10]
WO+MITRA [29]
SDa
SDd
ORION [29]
HORUS [29]
QOS
˜O(aw log N + log3 N )
O(aw + log2 |W|)
O(aw + log N )
O(aw + log N )
O(nw log2 N )
O(nw log dw log N + log2 |W|)
O(nw log iw + log2 |W|)
Update
˜O(log2 N )
O(log2 |W|)
O(log N )(am.)
O(log3 N )
O(log2 N )
O(log2 N )
O(log3 N )
Search
Communication
Update
˜O(aw log N + log3 N )
O(aw + log2 |W|)
O(aw + log N )
O(aw + log N )
O(nw log2 N )
O(nw log dw log N + log2 |W|)
O(nw log iw + log2 |W|)
˜O(log3 N )
O(log2 |W|)
O(log N )(am.)
O(log3 N )
O(log2 N )
O(log2 N )
O(log3 N )
Search RT
2
O(log |W|)
1
1
O(log N )
O(log N )
O(log |W|)
Client Storage
BP
O(1)
O(1)
O(1)
O(1)
O(1)
O(1)
O(1)
I
II
II
II
I
III
III
function (updates also can contain deletes which are handled
by inserting cancelation tuples). Later, to search for w the
client simply looks up the value of aw and queries the map at
locations F (k, (w, 1)), . . . , F (k, (w, aw).
to design a practical backward-and-forward-private DSE with
small client storage (e.g., polylog(|DB|) or, ideally, constant)
and non-interactive search, which is the main motivation of
our SDa and SDd schemes (see Table I).
it has an obvious drawback:
With some variations, this is the basic blueprint of many
existing schemes. This local word counter gives very efﬁcient
increased client
schemes but
storage. Compared to storing an inverted index for DB locally,
the client needs to store a table W of unique keywords which,
depending on the dataset, may be rather large. E.g., for the
Enron e-mail dataset, |DB| ≈ 2.6M and |W| ≈ 77K, i.e.,
the client has to go through the trouble of deploying a DSE
(and leaking information) just to reduce its local storage by
33×. When using SE to store relational database records
(e.g., [35], [24], [23]) the savings can be signiﬁcantly smaller,
i.e.,
in the case of a real dataset with crime incidents in
Chicago [1] (used in [24], [23]) with |DB| ≈ 6M tuples,
22 attributes, and |W| ≈ 17M, the reduction in local storage
for supporting point queries for these attributes will be 5×
at best (similar results are observed in TPC-H benchmark
[3]). In general, for relational database search many attributes
may contain unique values, (e.g., every record may contain
a different value) and in these cases the improvement
in
local storage will be negligible. The aforementioned examples
clearly illustrate that in many cases storing locally a counter
per word is problematic. Moreover, if we would like to support
the capability to access the encrypted database from multiple
devices, this approach would be especially cumbersome as it
entails synchronization and state transfer among them.
Using oblivious primitives. To avoid this, previous works
(e.g., [12], [25], [9], [10]) have proposed to store W at the
server encrypted. This would trivially violate forward privacy,
unless one uses an oblivious map (OMAP) [55] that hides
from the server which word entry is accessed every time.
One downside of this is that the construction of [55] and
subsequent improvements [48] require a logarithmic number of
rounds of interaction. The only existing DSE that avoids this
is the forward-private scheme of [27] (later made backward
private in [10]). However, it uses the recursive Path-ORAM
construction of [53] and it relies on heavy garbled circuit
computation to make it non-interactive. Therefore, its potential
for adoption in practice is quite limited and it serves mostly
as a feasibility result.1 Hence, we ask whether it is possible
1Alternatively, this can be achieved with the use of trusted hardware [5].
Challenge 2: DSE with (quasi-)optimal search.2 With a
plaintext dataset, the nw document identiﬁers of ﬁles currently
containing w can be optimally retrieved with nw operations.
The same performance can be achieved for DSE (e.g., [9],
[25]), albeit for insertion-only schemes (where nw = aw, the
total number of updates for w). With deletion-supporting DSE
nw can be arbitrarily smaller than aw. The only two backward-
private schemes that come close to achieving this optimal
performance are from [29]. At a high-level, they replace the
nw accesses necessary for retrieving the result with oblivious
accesses and achieve a polylogarithmic overhead over the
optimal cost (see Table I for more details). According to
Deﬁnition 4, these schemes achieve quasi-optimal search time.
However, their “black-box” use of oblivious primitives results
in schemes with rather poor performance, especially due to
communication cost (e.g., [29] reports ~1MB communication
for returning just nw = 100 identiﬁers). Therefore, we aim
to develop a DSE with quasi-optimal search and much better
practical performance—our QOS scheme (see Table I).
A. Our results
In this work, we present novel schemes that address the
above challenges as follows:
(i) We present a black-box reduction from any result-
hiding static SE to a backward-and-forward private
DSE. We instantiate it with [12] and call the resulting
scheme SDa. It has O(aw+log N ) search cost, where
aw denotes the total number of updates for keyword
w, and O(log N ) amortized update cost. Most im-
portantly, SDa is the ﬁrst DSE with O(1) perma-
nent client storage without using oblivious primitives,
hence it greatly outperforms all existing schemes for
searches.
During amortized updates the temporary client stor-
age of SDa may grow arbitrarily large (up to O(N )).
To avoid this, we present a version with de-amortized
(ii)
2As per Deﬁnition 4, a DSE scheme has optimal search time,
if the
asymptotic complexity of search is O(nw) and quasi-optimal if search time
is O(nwpolylog(N )).
2
(iii)