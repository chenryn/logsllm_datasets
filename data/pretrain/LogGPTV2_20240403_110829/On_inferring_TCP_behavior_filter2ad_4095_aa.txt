title:On inferring TCP behavior
author:Jitendra Padhye and
Sally Floyd
On Inferring TCP Behavior
Jitendra Padhye and Sally Floyd
AT&T Center for Internet Research at ICSI (ACIRI)
PI:EMAIL, ﬂPI:EMAIL
ABSTRACT
Most of the trafﬁc in today’s Internet is controlled by the Transmis-
sion Control Protocol (TCP). Hence, the performance of TCP has a
signiﬁcant impact on the performance of the overall Internet. TCP
is a complex protocol with many user-conﬁgurable parameters and
a range of different implementations.
In addition, research con-
tinues to produce new developments in congestion control mech-
anisms and TCP options, and it is useful to trace the deployment
of these new mechanisms in the Internet. As a ﬁnal concern, the
stability and fairness of the current Internet relies on the voluntary
use of congestion control mechanisms by end hosts. Therefore it
is important to test TCP implementations for conformant end-to-
end congestion control. Since web trafﬁc forms the majority of
the TCP trafﬁc, TCP implementations in today’s web servers are
of particular interest. We have developed a tool called TCP Be-
havior Inference Tool (TBIT) to characterize the TCP behavior of
a remote web server. In this paper, we describe TBIT, and present
results about the TCP behaviors of major web servers, obtained us-
ing this tool. We also describe the use of TBIT to detect bugs and
non-compliance in TCP implementations deployed in public web
servers.
1.
INTRODUCTION
Most of the trafﬁc currently carried on the Internet is controlled
by the Transmission Control Protocol (TCP) [8]. Thus, TCP perfor-
mance has a signiﬁcant impact on the performance of the overall In-
ternet. Understanding TCP behavior can be important for Internet-
related research, ISPs, OS Vendors and application developers. We
have designed a tool called TCP Behavior Inference Tool (TBIT)
to characterize the TCP behavior of remote web servers.
There are two reasons for using web servers to test TCP behavior,
one expedient and the other more fundamental. First, web servers
are easy to test, since web servers will respond to a request for
information without requiring any special privileges on those web
servers. One could imagine extending this approach to test other
information servers, such as SMTP and NNTP servers. However,
it would be difﬁcult to extend this approach to test the TCP be-
havior of arbitrary Internet hosts. Second, and more importantly,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’01, August 27-31, 2001, San Diego, California, USA..
Copyright 2001 ACM 1-58113-411-8/01/0008 ...$5.00.
the overall congestion control behavior of the Internet is heavily
inﬂuenced by the TCP implementations in web servers, since a sig-
niﬁcant fraction of the trafﬁc in the Internet consists of TCP trafﬁc
from web servers to browsers [8].
TCP is a complex protocol with a range of user-conﬁgurable
parameters. A host of variations on the basic TCP protocol [27]
have been proposed and deployed. Variants on the basic conges-
tion control mechanism continue to be developed along with new
TCP options such as Selective Acknowledgment (SACK) and Ex-
plicit Congestion Notiﬁcation (ECN). To obtain a comprehensive
picture of TCP performance, analysis and simulations must be ac-
companied by a look at the Internet itself. Several factors motivated
us to develop TBIT.
One motivation for TBIT is to answer questions such as “Is it ap-
propriate to base Internet simulation and analysis on Reno TCP?”
As Section 4.2 explains in some detail, Reno TCP is a older vari-
ant of TCP congestion control from 1990 that performs particularly
badly when multiple packets are dropped from a window of data.
TBIT shows that newer TCP variants such as NewReno and SACK
are widely deployed in the Internet, and this fact should be taken
into account for simulation and analysis studies. We believe that
this is the ﬁrst time quantitative data to answer such questions is
being reported. In other words, TBIT helps to document the migra-
tion of new TCP mechanisms to the public Internet.
A second motivation for TBIT is to answer questions such as
“What are the initial windows used in TCP connections in the In-
ternet?”. As is explained in Section 4.1, TCP’s initial window
determines the amount of data that can be transmitted in the ﬁrst
round-trip time after a TCP connection has been established. The
initial window is a user-conﬁgurable parameter in some systems,
and so the TCP initial window used at a web server can not neces-
sarily be inferred simply by knowing the operating system used at
that server. Knowing the distribution of conﬁgured values of initial
windows can be useful not only in simulations and modeling, but
also in standards-body decisions to advance documents specifying
larger values for initial windows [4].
A third motivation for TBIT is to have the ability to easily verify
that end-to-end congestion control is in fact deployed at end hosts
in the Internet (Section 4.3). The stability and fairness of the overall
Internet currently depend on this voluntary use of congestion con-
trol mechanisms by TCP stacks running on end hosts. We believe
that the ability to publically identify end hosts not conforming to
end-to-end congestion control can help signiﬁcantly in reinforcing
the use of end-to-end congestion control in the Internet.
A fourth motivation of TBIT is to aid in the identiﬁcation and
correction of bugs detected in TCP implementations. Using TBIT,
we have detected bugs in Microsoft, Cisco, SUN and IBM prod-
ucts, and have helped the vendors ﬁx those bugs. As an example,
as Explicit Congestion Notiﬁcation (ECN) begins to be deployed in
the Internet (Section 4.6), reports are surfacing of web servers un-
able to communicate with newly-deployed clients. TBIT has been
used to help identify these failure modes and the extent of their de-
ployment in the Internet, to identify the responsible vendors, and
to track the progress (or lack of progress) in having these ﬁxes
deployed. Information such as this is critical when new protocol
mechanisms such as ECN are standardized and actually deployed
in the Internet. Furthermore, as we shall see in Sections 4.2 and 4.4,
subtle bugs can cause a TCP implementation to behave quite differ-
ently from claims in vendor literature. From a user’s perspective, a
tool like TBIT is essential for detecting such bugs.
A ﬁfth motivation that arose after the initial development of TBIT
was that of testing not just the TCP behavior of web servers, but
also testing the TCP behavior determined by equipment on the
path to the server. In particular, the tests of ECN behavior in Sec-
tion 4.6 are in part testing for the presence of ﬁrewalls and load-
balancers that block access to servers from hosts attempting to ne-
gotiate ECN. Because we are interested in understanding the con-
gestion control behavior in the Internet, and not just the congestion
control of the web server boxes themselves, this sometimes requires
taking into account the behavior of the various middleboxes along
the path.
The rest of the paper is organized as follows. In Section 2, we
describe the design of TBIT. In Section 3, we compare and contrast
TBIT with related work. In Section 4, we present the results we
obtained by using the TBIT tool to survey the TCP deployment at
some popular web servers. Section 5 provides a discussion of these
results. Section 6 concludes the paper.
2. TBIT ARCHITECTURE
The goal of the TBIT project is to develop a tool to characterize
the TCP behavior of major web servers. The ﬁrst requirement for
the design of TBIT is that TBIT should have the ability to test any
web server, at any time. A second requirement is that the trafﬁc
generated by TBIT should not be hostile or even appear hostile or
out-of-the-ordinary to the remote web server being probed. To sat-
isfy the ﬁrst requirement, testing a web server using TBIT can not
require any services or privileges from that web server that are not
available to the general public. In addition, no assumptions can be
made about the hardware or software running on the remote web
server. The second requirement of ordinary and non-hostile traf-
ﬁc is in contrast with programs like NMAP [13], which exploit the
response of remote TCPs to extraordinary packet sequences, like
sending FINs to a port without having opened a TCP connection.
Signatures of these tactics are usually easy to recognize, and many
web servers deploy ﬁrewalls to detect and block unusual packet se-
quences.
In order to ensure the ability to test any web server at
any time, most of the TBIT tests only generate conformant TCP
trafﬁc designed not be ﬂagged as hostile or out-of-the-ordinary by
ﬁrewalls. The ECN tests are an exception to this, as they are specif-
ically investigating the presence of ﬁrewalls blocking trafﬁc from
ECN-capable hosts.
TBIT provides several tests, each designed to examine a speciﬁc
aspect of TCP behavior of the remote web server. We describe the
design of TBIT in two stages.
In the following, we describe in
detail the Initial Window test, illustrating several salient features of
the TBIT architecture. Several other tests implemented in TBIT are
described in Section 4.
The TBIT process establishes and maintains a TCP connection
with the remote host entirely at the user level. The TBIT process
fabricates TCP packets and uses raw IP sockets to send them to a
remote host. It also sets up a host ﬁrewall to prevent packets from
the remote host from reaching the kernel of the local machine. At
the same time, a BSD Packet Filter (BPF) [20] device is used to
deliver these packets to the TBIT process. This user-level TCP
connection can then be manipulated to extract information about
the remote TCP. This functionality is derived from the TCP-based
network measurement tool Sting [30].
To illustrate, let’s consider the problem of measuring the ini-
tial value of the congestion window (ICW) used by web servers.
This value is the number of bytes a TCP sender can send to a TCP
receiver, immediately after establishing the connection, before re-
ceiving any ACKs from the receiver. The TCP standard [5] speci-
ﬁes that for a given Maximum Segment Size (MSS) ICW be set to
at most 2*MSS bytes, and an experimental standard [4] allows that
ICW can be set to:
min( (cid:3) M SS; max( (cid:3) M SS;  )) bytes
As the majority of the web pages are under 10KB in size [6, 8, 24],
the ICW value can have a signiﬁcant impact on the performance of
a web server [18]. The TBIT test to measure the ICW value used by
a web server works as follows. Let us assume that TBIT is running
on host A, and the remote web server is running on host B.
(cid:15) TBIT opens a raw IP socket.
(cid:15) TBIT opens a BPF device and sets the ﬁlter to capture all
packets going to and coming from host B.
(cid:15) TBIT sets up a host ﬁrewall on A to prevent any packets com-
ing from host B from reaching the kernel of host A.
(cid:15) TBIT sends a TCP SYN packet, with the destination address
of host B and a destination port of 80. The packet advertises
a very large receiver window, and the desired MSS.
(cid:15) The TCP stack running on host B will see this packet and
respond with a SYN/ACK.
(cid:15) The SYN/ACK arrives at host A. The host ﬁrewall blocks the
kernel from seeing this packet, while the BPF device delivers
this packet to the TBIT process.
(cid:15) TBIT creates a packet that contains the HTTP 1.0 GET re-
quest for the base page (“/”), along with the appropriate ACK
ﬁeld acknowledging the SYN/ACK. This packet is sent to
host B.
(cid:15) After receiving the GET request, host B will start sending
data packets for the base web page to host A.
(cid:15) TBIT does not acknowledge any further packets sent by host
B. The TCP stack running on host B will only be able to
send packets that ﬁt within its ICW, and will then time out,
eventually retransmitting the ﬁrst packet.
(cid:15) Once TBIT sees this retransmitted packet, it sends a packet
with the RST ﬂag set to host B. This closes the TCP connec-
tion.
The ICW value used by the TCP stack running on host B is given
by the number of unique data bytes sent by host B by the end of the
test.
Three salient features of the TBIT architecture are illustrated by
this test. First, this test can be run against any web server, and does
not require any special privileges on the web server being tested.
Second, note the ability of TBIT to fabricate its own TCP packets.
This allows us to infer the ICW value for any MSS, by setting ap-
propriate options in the SYN packet. This ability is important for
several other tests implemented in TBIT. Finally, the trafﬁc gener-
ated during the ICW test will appear as conformant TCP trafﬁc to
any monitoring entity.
The test incorporates several measures to increase robustness
and ensure the accuracy of test results. Robustness against errors
caused by packet losses is an important requirement. The loss of
the SYN, SYN/ACK, or the packet carrying the HTTP request is
dealt with in a manner similar to TCP, i.e. using retransmissions
triggered by timeouts. The loss of data packets sent by host B is
harder to deal with. Some losses are detectable by observing a gap
in the sequence numbers of arriving data bytes. If TBIT detects
such a gap in the sequence numbers, it terminates the test, without
returning a result. However, TBIT may not always be able to de-
tect lost packets if consecutive packets at the end of the congestion
window are lost. In such cases, the TBIT result may be incorrect.
Some robustness against this error can be achieved by running the
test multiple times. Another possibility is that the base web page
might not be large enough to ﬁll the initial window for a given MSS.
If this happens, then the remote web server will usually transmit a
FIN either in the last data packet or immediately following last data
packet. TBIT can detect this. For additional robustness, the user
can conduct the test with a different MSS, or specify the URL of a
larger object on the web server, if such a URL is known.
We have implemented several tests in TBIT to verify various
aspects of TCP behavior of the remote web server. We have de-
scribed the ICW test above. Later in the paper, we consider ﬁve
others: a test to determine the version of congestion control algo-
rithm (Tahoe, Reno, NewReno etc.), running on the remote web
server, a test to determine if the remote web server reduces its con-
gestion window in half in response to a packet drop, a test to de-
termine if the remote web server supports SACK, and uses SACK
information correctly, a test to measure the duration of the time-
wait period on the remote web server and ﬁnally a test to determine
if the remote web supports ECN. We selected these tests to best
illustrate the versatility of TBIT, as well as to report on interesting
TCP behaviors that we have observed.
3. RELATED WORK
There are several ways to elicit information about the TCP be-
havior of a remote server. In the previous section, we described the
TBIT architecture. We now compare TBIT with related work that
has been reported in the literature.
One possible approach to actively eliciting and identifying TCP
behavior would have been to use a standard TCP at the web client to
request a web page from the server, and to use a tool in the network
along the lines of Dummynet [29] to drop speciﬁc packets from
the TCP connection (e.g. as we dropped ACKs for the ICW test).
A more complex alternative would have been to use a simulator
such as NS [10] in emulation mode to drop speciﬁc packets from
the TCP connection. However, both these approaches lack certain
ﬂexibilities that we felt were desirable. As we shall describe in Sec-
tion 4.2, for some of the tests we needed to ensure that we would
receive a signiﬁcant number of packets (20 to 25) in a single trans-
fer. Rather than search for large objects at each web site, the easiest
way to do this is to control the TCP sender’s packet size in bytes,
by specifying a small MSS (Maximum Segment Size) at the TCP
receiver. This would not have been easy to accomplish with either
the Dummynet or the NS emulator. Without the ability to specify a
small MSS, we may not have been able to test many web servers of
our choice.
An extensive study of the TCP behavior of Internet hosts is pre-
sented in [25]. The study was conducted using a ﬁxed set of In-
ternet hosts on which the author had obtained special privileges,
such as the ability to login and to run tcpdump [20]. Large ﬁle
transfers were carried out between pairs of hosts belonging to this
set, and packet traces of these transfers captured using tcpdump
at both hosts. The traces were analyzed off-line, to determine the
TCP behavior of the hosts involved. The paper reported on the
TCP performance of eight major TCP implementations. The paper
also discussed the failure to develop a fully-general tool for auto-
matically analyzing a TCP implementation’s behavior from packet
traces.
We would note that the methodology used in [25] would not be
well-suited for our own purposes of testing for speciﬁc TCP behav-
iors in public web servers. First, the restriction to Internet hosts on
which the required privileges could be obtained would not allow
the widespread tests of web servers. Second, certain TCP behav-
iors of end-nodes can only be identiﬁed if the right patterns of loss
and delay occur during the TCP data transfer.
In [14], the authors examine TCP/IP implementations in three
major operating systems, namely, FreeBSD 4.0, Windows 2000 and
Linux (Slackware 7.0), using simulated ﬁle transfers in a controlled
laboratory setting. Speciﬁc loss/delay patterns are introduced using
Dummynet [29]. The authors report several ﬂaws in the TCP/IP
implementations in the operating systems they examined. Since
the methodology requires complete control over both end-hosts, as
well as the routers between them (to introduce loss and delay), it
can not be used to answer questions about TCP deployment in the
global Internet.
NMAP [13] is a tool for identifying operating systems (OS) run-
ning on remote hosts in the Internet. NMAP probes remote ma-
chines with a variety of ordinary and out-of-ordinary TCP/IP packet
sequences. The response of the remote machine to these probes
constitutes the ﬁngerprint of the TCP/IP stack of the remote OS.
By comparing the ﬁngerprint to a database of known ﬁngerprints,
NMAP is able to make a guess about the OS running on the re-
mote host. TBIT differs from NMAP in many respects. The goal
of NMAP is to detect the operating system running on the remote
host, and not to characterize the TCP behavior of the remote host.
Thus, NMAP probing is not limited to TCP packets alone. Be-
yond ﬁngerprinting, NMAP collects no information about the TCP
behavior of the remote hosts. So, information such as the range
of ICW values observed in the Internet can not be obtained using
NMAP. Also, as mentioned in Section 2, NMAP uses out-of-the-
ordinary TCP/IP packet sequences for several of its ﬁngerprinting
probes, while TBIT uses only normal TCP data transfer operations
to elicit information.
One might argue that to characterize the TCP behavior of a re-
mote host, it is sufﬁcient to detect the OS running on the host using
a tool like NMAP. The TCP behavior can be analyzed by studying
the OS itself, using the source code (when available), information
provided by the vendor (e.g. Microsoft web site offers information
about the TCP/IP stack in the Windows operating system), and lab-
oratory experiments [14]. We ﬁrst argue that identifying the OS of
the remote host is not sufﬁcient, because the TCP standard deﬁnes
a number of user-conﬁgurable parameters. These are set differ-
ently by different users, and data about these parameters cannot be
obtained by merely identifying the OS or by analyzing the source
code. Second, regardless of the claims made by the vendor, the
TCP code might contain subtle bugs [26], and hence, the observed
behavior can be signiﬁcantly different from claims in vendor liter-
ature. Thus, direct experimentation is required, either in laboratory