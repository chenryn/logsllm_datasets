    **例 5.5. 将命名空间配置为文件系统 DAX**
    ::: example-contents
    要将 `namespace0.0`{.literal} 用于支持 DAX
    的文件系统，请使用以下命令：
    ``` screen
    # ndctl create-namespace \
            --force \
            --mode=fsdax \
            --reconfig=namespace0.0
    {
      "dev":"namespace0.0",
      "mode":"fsdax",
      "size":"32.00 GiB (34.36 GB)",
      "uuid":"ab91cc8f-4c3e-482e-a86f-78d177ac655d",
      "blockdev":"pmem0",
      "numa_node":0
    }
    ```
    :::
    :::
3.  命名空间现在包括在 `/dev/pmemN`{.literal} 路径中。
:::
::: itemizedlist
**其它资源**
-   `ndctl-create-namespace(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-new-nvdimm-namespace-in-file-system-dax-mode_creating-a-file-system-dax-namespace-on-an-nvdimm}在文件系统 DAX 模式下创建新 NVDIMM 命名空间 {.title}
:::
此流程在 NVDIMM 设备上创建新文件系统 DAX
命名空间，可让您在命名空间中存储文件。
::: itemizedlist
**先决条件**
-   已安装 `ndctl`{.literal} 工具。请参阅 ["安装
    ndctl"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-file-system-dax-namespace-on-an-nvdimm "安装 ndctl"){.xref}。
-   NVDIMM 设备支持标签。
:::
::: orderedlist
**流程**
1.  列出系统中有可用空间的 `pmem`{.literal} 区域。在以下示例中，空间位于
    `region5`{.literal} 和 `region4`{.literal} 区域：
    ``` screen
    # ndctl list --regions
    [
      {
        "dev":"region5",
        "size":270582939648,
        "available_size":270582939648,
        "type":"pmem",
        "iset_id":-7337419320239190016
      },
      {
        "dev":"region4",
        "size":270582939648,
        "available_size":270582939648,
        "type":"pmem",
        "iset_id":-137289417188962304
      }
    ]
    ```
2.  在任何可用区域中，分配一个或多个命名空间：
    ``` screen
    # ndctl create-namespace \
            --mode=fsdax \
            --region=regionN \
            --size=namespace-size
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531490335824}
    **例 5.6. 在区域上创建命名空间**
    ::: example-contents
    以下命令在 `region4`{.literal} 中创建 36-GiB 文件系统 DAX 命名空间：
    ``` screen
    # ndctl create-namespace \
            --mode=fsdax \
            --region=region4 \
            --size=36G
    {
      "dev":"namespace4.0",
      "mode":"fsdax",
      "size":"35.44 GiB (38.05 GB)",
      "uuid":"9c5330b5-dc90-4f7a-bccd-5b558fa881fe",
      "blockdev":"pmem4",
      "numa_node":0
    }
    ```
    :::
    :::
3.  命名空间现在包括在 `/dev/pmemN`{.literal} 路径中。
:::
::: itemizedlist
**其它资源**
-   `ndctl-create-namespace(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-file-system-on-a-file-system-dax-device_creating-a-file-system-dax-namespace-on-an-nvdimm}在文件系统 DAX 设备中创建文件系统 {.title}
:::
这个过程在文件系统 DAX 设备中创建文件系统，并挂载文件系统。
::: orderedlist
**流程**
1.  另外，还可在文件系统 DAX 设备中创建分区。请参阅
    ["创建分区"一节](#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_creating-a-partition_assembly_getting-started-with-partitions "创建分区"){.xref}。
    默认情况下，`parted`{.literal} 工具在 1 MiB
    边界对齐分区。对于第一个分区，指定 2 MiB
    作为分区的起点。如果分区的大小是 2 MiB
    的倍数，则所有其他分区也都一致。
2.  在分区或者 NVDIMM 设备中创建 XFS 或者 ext4 文件系统。
    对于 XFS，禁用共享 copy-on-write 数据扩展，因为它们与 dax
    挂载选项不兼容。另外，为了增加大页面映射的可能性，请设置条带单元和分条宽度。
    ``` screen
    # mkfs.xfs -m reflink=0 -d su=2m,sw=1 fsdax-partition-or-device
    ```
3.  使用 `-o dax`{.literal} 挂载选项挂载文件系统：
    ``` screen
    # mount -o dax fsdax-partition-or-device mount-point
    ```
4.  [*[应用程序现在可以使用持久内存并在挂载点目录中创建]{.replaceable}文件*]{.emphasis}，打开文件，并使用
    `mmap`{.literal} 操作映射文件以进行直接访问。
:::
::: itemizedlist
**其它资源**
-   `mkfs.xfs(8)`{.literal} man page
:::
:::
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#troubleshooting-nvdimm-persistent-memory_using-nvdimm-persistent-memory-storage}NVDIMM 持久内存故障排除 {.title}
:::
您可以在 NVDIMM 设备中检测并修复不同类型的错误。
::: itemizedlist
**先决条件**
-   NVDIMM 设备已连接到您的系统并进行了配置。
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_troubleshooting-nvdimm-persistent-memory}安装 ndctl {.title}
:::
此流程安装 `ndctl`{.literal} 工具，用于配置和监控 NVDIMM 设备。
::: itemizedlist
**流程**
-   要安装 `ndctl`{.literal} 工具程序，请使用以下命令：
    ``` screen
    # yum install ndctl
    ```
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#monitoring-nvdimm-health-using-s-m-a-r-t-_troubleshooting-nvdimm-persistent-memory}使用 S.M.A.R.T 监控 NVDIMM 健康状况。 {.title}
:::
有些 NVDIMM
设备支持自助服务、分析和报告技术(S.M.A.R.T.)界面来获取健康信息。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
定期监控 NVDIMM 健康状况以防止数据丢失。如果 S.M.A.R.T. 报告 NVDIMM
设备的健康状况出现问题，则替换它，如 ["检测和替换断开问题的 NVDIMM
设备"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#detecting-and-replacing-a-broken-nvdimm-device_troubleshooting-nvdimm-persistent-memory "检测和替换断开问题的 NVDIMM 设备"){.xref}
所述。
:::
::: itemizedlist
**先决条件**
-   在有些系统中，必须载入 `acpi_ipmi`{.literal}
    驱动程序才能检索健康信息：
    ``` screen
    # modprobe acpi_ipmi
    ```
:::
::: itemizedlist
**流程**
-   要访问健康信息，请使用以下命令：
    ``` screen
    # ndctl list --dimms --health
    ...
        {
          "dev":"nmem0",
          "id":"802c-01-1513-b3009166",
          "handle":1,
          "phys_id":22,
          "health":
          {
            "health_state":"ok",
            "temperature_celsius":25.000000,
            "spares_percentage":99,
            "alarm_temperature":false,
            "alarm_spares":false,
            "temperature_threshold":50.000000,
            "spares_threshold":20,
            "life_used_percentage":1,
            "shutdown_state":"clean"
          }
         }
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   `ndctl-list(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#detecting-and-replacing-a-broken-nvdimm-device_troubleshooting-nvdimm-persistent-memory}检测和替换断开问题的 NVDIMM 设备 {.title}
:::
如果您在系统日志或者 S.M.A.R.T. 中发现与 NVDIMM
相关的错误消息，这可能意味着 NVDIMM 设备失败。在这种情况下，需要：
::: orderedlist
1.  检测哪个 NVDIMM 设备失败
2.  备份保存的数据
3.  物理替换该设备
:::
::: orderedlist
**流程**
1.  要检测出问题的设备，请使用以下命令：
    ``` screen
    # ndctl list --dimms --regions --health --media-errors --human
    ```
    `badblocks`{.literal} 字段显示哪些 NVDIMM 有问题。在 `dev`{.literal}
    字段中记录它的名称。
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531490274896}
    **例 5.7. NVDIMM 设备的健康状态**
    ::: example-contents
    在以下示例中，名为 `nmem0`{.literal} 的 NVDIMM 有问题：
    ``` screen
    # ndctl list --dimms --regions --health --media-errors --human
    ...
      "regions":[
        {
          "dev":"region0",
          "size":"250.00 GiB (268.44 GB)",
          "available_size":0,
          "type":"pmem",
          "numa_node":0,
          "iset_id":"0xXXXXXXXXXXXXXXXX",
          "mappings":[
            {
              "dimm":"nmem1",
              "offset":"0x10000000",
              "length":"0x1f40000000",
              "position":1
            },
            {
              "dimm":"nmem0",
              "offset":"0x10000000",
              "length":"0x1f40000000",
              "position":0
            }
          ],
          "badblock_count":1,
          "badblocks":[
            {
              "offset":65536,
              "length":1,
              "dimms":[
                "nmem0"
              ]
            }
          ],
          "persistence_domain":"memory_controller"
        }
      ]
    }
    ```
    :::
    :::
2.  使用以下命令查找有问题的 NVDIMM 的 `phys_id`{.literal} 属性：
    ``` screen
    # ndctl list --dimms --human
    ```
    在前面的例子中，您知道 `nmem0`{.literal} 是有问题的
    NVDIMM。因此，找到 `nmem0`{.literal} 的 `phys_id`{.literal} 属性。
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531490267440}
    **例 5.8. NVDIMM 的 phys_id 属性**
    ::: example-contents
    在以下示例中，`phys_id`{.literal} 是 `0x10`{.literal}:
    ``` screen
    # ndctl list --dimms --human
    [
      {
        "dev":"nmem1",
        "id":"XXXX-XX-XXXX-XXXXXXXX",
        "handle":"0x120",
        "phys_id":"0x1c"
      },
      {
        "dev":"nmem0",
        "id":"XXXX-XX-XXXX-XXXXXXXX",
        "handle":"0x20",
        "phys_id":"0x10",
        "flag_failed_flush":true,
        "flag_smart_event":true
      }
    ]
    ```
    :::
    :::
3.  使用以下命令查找有问题的 NVDIMM 的内存插槽：