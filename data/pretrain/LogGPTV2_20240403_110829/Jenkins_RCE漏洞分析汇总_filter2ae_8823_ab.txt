        text/html=UTF-8
        diagnosticThreadName
        false
      true
跟进`org.kohsuke.stapler.Stapler`这个类中，简单缩减一下代码，如下所示：
    protected @Override void service(HttpServletRequest req, HttpServletResponse rsp) throws ServletException, IOException {
            Thread t = Thread.currentThread();
            final String oldName = t.getName();
    ...
                if (servletPath.startsWith(BoundObjectTable.PREFIX)) {
                    // serving exported objects
                    invoke( req, rsp, webApp.boundObjectTable, servletPath.substring(BoundObjectTable.PREFIX.length()));
                    return;
                }
    ...
                Object root = webApp.getApp();
                if(root==null)
                    throw new ServletException("there's no \"app\" attribute in the application context.");
                // consider reusing this ArrayList.
                invoke( req, rsp, root, servletPath);
            } finally {
                t.setName(oldName);
            }
        }
其中 **PREFIX** 的值是`/$stapler/bound/`。
    public static final String PREFIX = "/$stapler/bound/";
也就是说在这里Jenkins会根据用户传入的URL不同，来调用不同的 **webapp** ，这里的invoke方法中有4个参数，它们分别是：
  * req：请求对象
  * rsp：响应对象
  * root：webapp节点
  * servletPath：经过路由解析后的对象
如果url以`/$stapler/bound/`开开头，那么它对应的root节点对象是：`webApp.boundObjectTable(org.kohsuke.stapler.bind.BoundObjectTable)`，而这个root对象实际上如果不是动态调试静态看代码我是看不出来，所以我在这里下个断点，我可以看到这个root节点对象对应的类是
**hudson.model.Hudson** ，而这个类正是继承了 **jenkins.model.Jenkins** 。
继续向下跟进，跟进我们刚刚invoke方法，这个方法位置在 **org.kohsuke.stapler.Stapler#invoke** 。这个方法又调用了
**invoke** 来处理。
继续跟进，我们可以看到这里调用了 **org.kohsuke.stapler.Stapler#tryInvoke** 来进行处理。
详细跟进一下 **org.kohsuke.stapler.Stapler#tryInvoke** 这个方法，我截取部分代码如下：
    boolean tryInvoke(RequestImpl req, ResponseImpl rsp, Object node ) throws IOException, ServletException {
            if(traceable())
                traceEval(req,rsp,node);
            if(node instanceof StaplerProxy) {
            ...
            }
            if (node instanceof StaplerOverridable) {
            ...
            }
            if(node instanceof StaplerFallback) {
            ...
            }
这里有三个根据不同的node节点进行相应操作`instanceof`，从代码中来看顺序应该是从上到下分别是：
  * StaplerProxy
  * StaplerOverridable
  * StaplerFallback
而Jenkins这部分[Routing Requests](https://jenkins.io/doc/developer/handling-requests/routing/)其实在文档中也写了：
所以说文档中的描述和代码中看到的是一致的，所以 **tryInvoke**
这个方法实际上做哦那个就是完成路由的分发，路由的绑定操作等。我们可以看看当我们传入`/aa/bb/cc`的时候，路由是如何选择。
当我们传入`/aa/bb/cc`的时候，对应的root根对象是`hudson.model.Hudson`，所以这里向根据这个node获取一个
**metaClass** 对象，然后轮询 **MetaClass** 中的 **metaClass.dispatchers** 。
但是这里具体如何操作还是有点懵逼，这里还是慢慢的跟一下，用 **@orange**
文章的白名单路由来做个文章，后面也会详细分析，路由为`/securityRealm/user/test/`
，跟进`org.kohsuke.stapler.WebApp#getMetaClass`。
    public MetaClass getMetaClass(Object o) {
            return getMetaClass(getKlass(o));
        }
在这里面又调用了 **getKlass** 和 **getMetaClass** ，先看看 **getKlass**
，这里最后的return操作实例化相关类对象，这里对应的自然是我们前面路由分析的时候，如果url不是以`/$stapler/bound/`开头，对应的对象自然是
__ hudson.model.Hudson** 。
    public Klass getKlass(Object o) {
    ...
            return Klass.java(o.getClass());
        }
我们再看看 **getMetaClass** ，在 **getMetaClass** 中首先获取传入的类对象，然后实例化 **MetaClass**
针对传入的对象进行处理。
跟进 **MetaClass** ，来详细看看，我们可以看到这就是通过我们刚刚实例化的Klass类，然后根据这个类获取相应信息，最后使用
**buildDispatchers**
    /*package*/ MetaClass(WebApp webApp, Klass klass) {
            this.clazz = klass.toJavaClass();
            this.klass = klass;
            this.webApp = webApp;
            this.baseClass = webApp.getMetaClass(klass.getSuperClass());
            this.classLoader = MetaClassLoader.get(clazz.getClassLoader());
            buildDispatchers();
        }
跟进 **org.kohsuke.stapler.MetaClass.buildDispatchers** ，其实从注释里面就知道这个方法干啥的了。
简单翻译一下这个是处理路由调度的核心，他通过反射使用相关的类，并且确认由谁处理这个URL，这部分代码很长，而且也能看得出来Jenkins给了用户足够多的自由度，但有时候其实就是给你的自由过了火导致的问题，从代中把这些全部梳理了出来：
    .do(...) and other WebMethods：do(...)或者@WebMethods标注
    .doIndex(...)：doIndex(...)
    js:js(...)
    method with @JavaScriptMethod:@JavaScriptMethod标注
    NODE.TOKEN
    NODE.getTOKEN():get()
    NODE.getTOKEN(StaplerRequest)：get(StaplerRequest)
    .get(String):get(String)
    .get(int):get(int)
    .get(long):get(long)
    .getDynamic(,...):ggetDynamic(...)
    .doDynamic(...):doDynamic(...)
随便找个例子，在处理node时候会先实例化 **NameBasedDispatcher** ，然后把这个加到 **dispatchers** 中，然后使用
**doDispatch** 处理传过来的请求，最后通过invoke反射的方式调用相关类。
所以我们回忆一下`/securityRealm/user/test/`的解析过程，在 **org.kohsuke.stapler.Stapler**
中这里的 **d.dispatch** 会处理传入的请求。
    try {
                for( Dispatcher d : metaClass.dispatchers ) {
                    if(d.dispatch(req,rsp,node)) {
这里的 **dispathch** 是一个抽象类，他的实现方法有下图中那么多，我们看到 **NameBasedDispatcher** 是不是有点眼熟。
跟进 **org.kohsuke.stapler.NameBasedDispatcher#dispathch** 这里有个 **doDispatch**
，实际上这个也是个抽象类，主要实现还是在 **MetaClass** 中的 **buildDispatchers** ，前面我们也了解过了
**buildDispatchers** 这个方法会根据node节点的不同选择不同的方法去实现。
这里简单画个代码流程图吧。
所以可以看到最后在 **org.kohsuke.stapler.MetaClass** 已经成功解析了我们传入的第一个node节点
**securityRealm**
紧接着解析第二个node节点时候，首先跟进这个getStapler返回的是当前stapler对象。
    public Stapler getStapler() {
            return stapler;
        }
这里的ff是一个`org.kohsuke.stapler.Function`对象，它保存了当前根节点中方法的各种信息。
ff.invoke处理之后会返回`Hudson.security.HudsonPrivateSecurityRealm`，然后又会把这个东西带入到tryInvoke中进行第二次解析，就是这样循环下去。
现在再回头过看，我们之前用到一个payload：`/securityRealm/user/test/`，这个payload中的
**securityRealm** 是Jenkins的一个路由白名单，白名单是个什么情况呢，我们来看看。
首先前面提到过 **tryInvoke** 的时候，会进行三个优先级不同操作：
  * StaplerProxy
  * StaplerOverridable
  * StaplerFallback
根据优先级，首先进行的是 **StaplerProxy** ，我们详细看看这个，这个做了一个try的操作，跟进一下 **getTarget()** 方法。
而getTarget()的实现主要在这几个地方出现过。
在Jenkins中，入口是`jenkins.model.Jenkins`，所以跟进看看
**jenkins.model.Jenkins#getTarget**
首先checkPermission会进行权限进行检查，检查是否有读的权限，如果没有会抛出异常，而在异常里有一个`isSubjectToMandatoryReadPermissionCheck`对路径进行二次检测，如果这个检测没通过就退出，否则正常返回。继续跟进
**jenkins.model.Jenkins#isSubjectToMandatoryReadPermissionCheck**
，这里有个常量的白名单判断。
看看这个白名单的值，所以很明显了，如果请求的路径在这个白名单里面，那么就可以绕过权限校验。
    ALWAYS_READABLE_PATHS = ImmutableSet.of("/login", "/logout", "/accessDenied", "/adjuncts/", "/error", "/oops", new String[]{"/signup", "/tcpSlaveAgentListener", "/federatedLoginService/", "/securityRealm", "/instance-identity"});
##### 跨物件操作导致白名单绕过
**@orange** 博客里面提到了这个，首先提到了几个事情：
> 1.在 Java 中, 所有的物件皆继承
> [java.lang.Object](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)
> 这个类别, 因此所有在 Java 中的物件皆存在著 `getClass()` 这个方法。
>