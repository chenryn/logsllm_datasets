▪ Defenders can use this for least privilege 
enforcement, identifying misconfigured ACLs, 
and detecting non-stealthy ACL-enabled 
backdoors
▪ Attackers can use this to identify 
ACL-enabled escalation paths, select targets 
for highly stealthy backdoors, and understand 
privilege relationships in the target domain
BloodHound Analysis
● Left: Principals 
with direct control 
over the “Domain 
Admins” group
● Several Exchange 
security groups 
have “GenericAll” 
rights over the 
“Domain Admins” 
group
BloodHound Analysis
BloodHound Analysis
Designing Active 
Directory DACL 
Backdoors
Primitives for Pwnage
5.
Objective
▪ We want to implement an Active Directory 
DACL-based backdoor that:
□
Facilitates the regaining of elevated control in the 
AD environment
□
Blends in with normal ACL configurations (“hiding in 
plain sight”), or is otherwise hidden from easy 
enumeration by defenders
▪ Let’s see what we can come up with!
Stealth Primitive:
Hiding the DACL
▪ Effectively hiding DACLs from defenders 
requires two steps
▪ Change the object owner from “Domain 
Admins” to another principal you control.
▪ Add a new explicit ACE, denying the “Everyone” 
principal the “Read Permissions” privilege.
Stealth Primitive:
Hiding the DACL
▪ Hiding a principal from defenders requires 
three steps:
a.
Change the principal owner to itself, or another 
controlled principal.
b.
Grant explicit control of the principal to either 
itself, or another controlled principal.
c.
On the OU containing your hidden principal, 
deny the “List Contents” privilege to “Everyone”
Stealth Primitive:
Hiding the Principal
Stealth Primitive:
Hiding the Principal
Primitives: Summary
▪ We know which ACEs result in object takeover
▪ We can control who can enumerate the DACL
▪ We can hide principals/trustees that are 
present in a specific ACE
Backdoor Case Studies
“If you can dream it…”
6.
A Hidden DCSync 
Backdoor
▪ Backdoor:
□
Add DS-Replication-Get-Changes and 
DS-Replication-Get-Changes-All on the domain 
object itself where the principal is a user/computer 
account the attacker controls
□
The user/computer doesn’t have to be in any special 
groups or have any other special privileges!
▪ Execution:
□
DCSync whoever you want!
Exploitation
AdminSDHolder
▪ Backdoor:
□
Attacker grants themselves the 
User-Force-Change-Password right on 
CN=AdminSDHolder,CN=System
□
Every 60 minutes, this permission is cloned to every 
sensitive/protected AD object through SDProp
□
Attacker “hides” their account using methods 
described
▪ Execution:
□
Attacker force resets the password for any 
adminCount=1 account
Exploitation
LAPS
▪ Microsoft’s “Local Administrator Password 
Solution”
▪ Randomizes the a machine’s local admin 
password every 30 days.  Password stored in 
the confidential ms-Mcs-AdmPwd attribute 
on computer objects
https://technet.microsoft.com/en-us/mt227395.aspx 
Who can read AdmPwd?
▪
DS_CONTROL_ACCESSS where the ACE
□
applies to AdmPwd and all descendant computers
□
applies to AdmPwd and all descendant objects
□
applies to any object and all descendant objects
□
applies to any object and all descendant computers
▪
Above checks are necessary for GENERIC_ALL
▪
Object control == Ability to grant the above rights
□
You are the owner
□
You can become the owner:
□
WriteDACL, WriteOwner
□
DS-Set-Owner Extended Right
Shortcomings of 
Find-AdmPwdExtendedRights
▪
DS_CONTROL_ACCESSS where the ACE
□
applies to AdmPwd and all descendant computers
□
applies to AdmPwd and all descendant objects*
□
applies to any object and all descendant objects
□
applies to any object and all descendant computers
▪
Above checks are necessary for GENERIC_ALL
▪
Object control == Ability to grant the above rights
□
You are the owner
□
You can become the owner
□
WriteDACL, WriteOwner
□
DS-Set-Owner Extended Right
Exploitation
▪ Backdoor:
□
Add an ACE to OU or Computer that applies to the 
AdmPwd property and any descendant object
$RawObject = Get-DomainOU -Raw Servers
$TargetObject = $RawObject.GetDirectoryEntry()
$AdmPwdGuid = (Get-DomainGUIDMap).GetEnumerator() | `
    ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name 
$ACE = New-ADObjectAccessControlEntry -InheritanceType Descendents `
    -AccessControlType Allow -PrincipalIdentity "Domain Users" `
    -Right ExtendedRight -ObjectType $AdmPwdGuid
$TargetObject.PsBase.ObjectSecurity.AddAccessRule($ACE)
$TargetObject.PsBase.CommitChanges()
Normal user can’t access 
ms-mcs-AdmPwd
Privileged attacker adds 
backdoor to Servers OU
Domain user can access 
AdmPwd! LAPS cmdlet 
doesn’t detect it! 
Exchange Strikes Back
▪ Exchange Server introduces several schema 
changes, new nested security groups, and 
MANY control relationships to Active Directory, 
making it a perfect spot to blend in amongst 
the noise.
▪ Pre Exchange Server 2007 SP1, this included 
the “WriteDACL” privilege against the domain 
object itself, which was distributed down to 
ALL securable objects!
Exchange Strikes Back
▪ Backdoor:
□
Identify a non-protected security group with 
local admin rights on one or more Exchange 
servers
□
Grant “Authenticated Users” full control over 
this security group
□
Change the owner of the group to an 
Exchange server
□
Deny “Read Permissions” on this group to the 
“Everyone” principal
▪ Execution:
□
Regain access to the Active Directory domain 
as any user
□
Add your current user to the back-doored 
security group
□
Use your new local admin rights on an 
Exchange server to execute commands as the 
SYSTEM user on that computer.
□
Exchange Trusted Subsystem often has full 
control of the domain, so this may include 
DCSync!
Exchange Strikes Back
Exploitation
Abusing GPOs
▪ Backdoor:
□
Attacker grants herself GenericAll to any user object 
with the attacker as the trustee
□
Grant that “patsy” user WriteDacl to the default 
domain controllers GPO
▪ Execution:
□
Force resets the “patsy” account password
□
Adds a DACL to the GPO that allows write access for 
the patsy to GPC-File-Sys-Path of the GPO
□
Grants the patsy user SeEnableDelegationPrivilege 
rights in GptTmpl.inf
□
Executes a constrained delegation attack using the 
patsy account’s credentials
Exploitation
Defenses
All is (Probably) Not Lost ;)
6.
Event Logs
▪ Proper event log tuning and monitoring is 
pretty much your only hope for performing 
real “forensics” on these actions
□
But if you weren’t collecting event logs when the 
backdoor was implemented, you might not ever 
know who the perpetrator was :(
▪ For example:
□
Event log 4738 (“A user account was changed”), 
filtered by the property modified
Replication Metadata
▪ Metadata remnants from domain controller 
replication can grant a few clues
□
Specifically, when a given attribute was modified, 
and from what domain controller the modification 
event occurred on
▪ This points you in the right direction, but needs 
to be used with event logs to get the full 
picture
□
More information in a post soon on 
http://blog.harmj0y.net 
SACLs
▪ SACLs contain ACEs that, “specify the types of 
access attempts that generate audit records in 
the security event log of a domain controller”
▪ You don’t have to SACL every success/failure 
action on every object type and property:
□
A great start- build SACLs for all of the attack 
primitives we’ve talked about on the specific target 
objects we’ve outlined
□
More information: http://bit.ly/2tOAGn7 
Sidenote:
Future Work
▪ We were not able to utilize NULL DACLs or 
otherwise manipulate the header control bits 
(i.e. SE_DACL_PRESENT)
□
Any attempts to set ntSecurityDescriptor on an 
object remotely ignores any header bits, however 
this warrants another look
▪ Research additional control relationships
□
Particularly any relationship that allows for 
computer object takeover
Credits
Special thanks to all the people who helped us 
with this research and slide deck:
▪ Lee Christensen (@tifkin_)
▪ And everyone else at SpecterOps!
Questions?
Contact us at:
▪
@_wald0 (robbins.andy [at] gmail.com)
▪
@harmj0y (will [at] harmj0y.net)