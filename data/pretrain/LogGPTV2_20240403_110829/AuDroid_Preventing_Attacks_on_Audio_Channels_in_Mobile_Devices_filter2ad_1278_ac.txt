t
n
o
C
s
s
e
l
h
c
u
o
T
1
e
p
y
T
1
o
i
r
a
n
e
c
S





(cid:52)

2
o
i
r
a
n
e
c
S
1
e
p
y
T
r
e
g
g
o
l
y
e
K
l
o
r
t
n
o
C
e
c
i
v
e
D
2
e
p
y
T
3
o
i
r
a
n
e
c
S
t
u
O
k
a
e
p
S
2
e
p
y
T
4
o
i
r
a
n
e
c
S





(cid:52)















s
d
n
a
m
m
o
C
e
c
i
o
V
3
e
p
y
T
5
o
i
r
a
n
e
c
S
3
e
p
y
T
6
o
i
r
a
n
e
c
S
g
n
i
d
r
o
c
e
R
y
h
t
l
a
e
t
S














Touchless Control (Table 2 column 1) refers to the at-
tack where a malicious app makes use of an audio channel of
Type 1 to exploit a system service receiving voice commands
to perform security-sensitive operations [3, 4]. This type of
attack is prevented by Simple Isolation, because two pro-
cesses cannot access - at the same time - the microphone
and speaker. Similarly, AuDroid detects an unsafe ﬂow from
a low-integrity process (malicious app) to a high-integrity
process (system service). Rows 4-7 show that other defense
mechanisms can prevent this attack. In particular, the (cid:52)
symbol (in row 6) highlights that, a permission mechanism
used to authorize the use of System Services could prevent
the attack, if the user does not grant the permissions to use
the Media Server for a malicious app.
Keylogger (Table 2 column 2) refers to an attack where
a malicious app uses an audio channel of Type 1 to eaves-
drop the password typed by the device owner and spoken out
by the TalkBack accessibility service [3]. Simple Isolation
prevents the attack because two processes cannot access the
microphone an speaker at the same time. AuDroid prevents
the attack because a unsafe ﬂow from a high-secrecy pro-
cess (accessibility service) to a low-secrecy process (mali-
cious app) is detected. Furthermore, the (cid:52) symbol (in row
6) highlights the fact that a permission mechanism, used to
authorize the use of System Services, could prevent the at-
tack if the user does not grant the malicious app permission
to use the Media Server.
Device Control (Table 2 column 3) is an attack per-
formed by using a malicious app running on a device as a
source of malicious voice commands (such as those reported
in Table 1) to attack another nearby device. The attack
is performed by using an audio channel of Type 2. Sim-
ple Isolation does not prevent the attack because it does
not consider audio channels involving external parties. On
the other hand, AuDroid detects the unsafe ﬂow from a low-
integrity process to a high-integrity external party.
Speak Out (Table 2 column 4) refers to a malicious
app eavesdropping voice and sound through the device’s mi-
crophone to collect security-sensitive information, such as
private conversations, successively leaked to an adversary
through the device’s speaker as soon as the device owner,
victim of the attack, is away from the device. The adver-
sary makes use of an audio channel of Type 2 to bypass any
lock screen protection mechanism. Simple Isolation does
not prevent the attack because it does not consider audio
channels involving external parties. On the other hand, Au-
Droid detects the unsafe ﬂow from a low-integrity process
to a high-integrity external party. Furthermore, AuDroid
prevents a malicious app from eavesdropping on the device
owner because the user approval is required before a low-
secrecy process can access the microphone.
formed by an adversary directly interacting with the target
device via malicious voice commands. In this attack, the ad-
versary uses an audio channel of Type 3. Simple Isolation
does not prevent the attack because it does not consider au-
dio channels involving external parties. On the other hand,
AuDroid prevents a malicious user, diﬀerent from the device
owner, from delivering voice commands to a system service,
by identifying the external party (user) as low-integrity and
the system service as high-integrity. As shown in row 7,
Voiceprint Recognition can prevent the attack, unless the
adversary replays recorded device owner voice commands.
Stealthy Recording (Table 2 column 6) refers to an at-
tack where a malicious app uses an audio channel of Type 3
to stealthily record audio through the device’s microphone
in order to eavesdrop the device owner and the surrounding
environment. AuDroid prevents a malicious app from eaves-
dropping the device owner voice because the user approval is
required before a low-secrecy process can access the device’s
microphone.
6.2 System Functionality
We next evaluate the impact of AuDroid on the ability of
apps and services to operate normally. The results of our
analysis are reported in Table 3. We evaluate AuDroid for 10
market apps and 7 system apps distributed with the Android
OS from Google. We select market apps that are among
the most popular apps available on Google Play. We also
choose market and system apps that use either the speaker
or microphone or both, as indicated by the last four rows in
Table 3.
Row 1 in Table 3 shows that, by enforcing Simple Isola-
tion, all the system and market apps would work ﬁne al-
though interaction among apps is not allowed. For example,
the user cannot use the Voice Recorder app to tape the music
produced by the Music app. Therefore, although the system
functionality is preserved, there is an indirect impact on how
apps can interact.
We then analyze the impact of using AuDroid when MLS
is applied to enforce Biba and Bell-LaPadula. From row 2
in Table 3, we observe that two security violations are re-
ported for the Phone and Hangouts system apps, which are
due to the fact that these apps produce a sound on incoming
calls or message receptions, even when the external party is
identiﬁed as low-secrecy (i.e. device screen locked). This is
seen by AuDroid as a ﬂow from a high-secrecy party (system
app) to a low-secrecy party (user diﬀerent from the device
owner). Furthermore, from row 2, we observe two integrity
violations in correspondence of Pandora and Spotify. This
is due to the fact that these apps access the speaker to pro-
duce music and sounds, therefore AuDroid sees a ﬂow from
a low-integrity party to a external high-integrity party. Fi-
nally, row 2 reports secrecy and integrity violations for the
remaining market apps from Viber to Call Recorder. The
integrity violations are due to the same reason explained
for Pandora and Spotify, whereas the secrecy violations are
due to the fact that AuDroid sees a ﬂow from an external
high-secrecy party (i.e. device owner) to a low-secrecy party
(market app).
Row 3 shows how AuDroid resolves the secrecy violations
relative to the market apps by using the user approval mech-
anism. In particular, whenever a market app uses the mi-
crophone, the device owner is notiﬁed and can approve or
deny the access.
Voice Commands (Table 2 column 5) is an attack per-
Row 4 shows the eﬀect of using a resolver (Resolver 1)
Table 3: System Functionality Analysis
System Apps
Market Apps
p
p
A
s
t
a
h
W

r
e
b
i
V

t
a
h
c
p
a
n
S

k
o
o
b
e
c
a
F

e
p
y
k
S

r
e
d
r
o
c
e
R
e
c
i
o
V

r
e
d
r
o
c
e
R
l
l
a
C

s
o
m
e
M
e
c
i
o
V

Legend:
App Runs
IV Integrity Violation
SV Secrecy Violation
SIV Secrecy and Integrity
Violation
r
e
l
a
i
D
e
c
i