-   ::: para
    可在命令行中指定 `-f`{.option} 选项跳过提示且不替换任何失败的设备。
    :::
-   ::: para
    可指定 `--use-policies`{.literal} 参数使用由 `lvm.conf`{.filename}
    文件中指定的 `mirror_log_fault_policy`{.literal} 和
    `mirror_device_fault_policy`{.literal}
    参数指定的替换策略，以便跳过提示，并仍然为镜像映象及镜像日志指定不同的替换策略。
    :::
:::
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_reconfigure}4.4.4.4. 更改镜像卷配置 {.title}
:::
[]{#LVM_CLI.html#idm140426151605968
.indexterm}[]{#LVM_CLI.html#idm140426151604528
.indexterm}[]{#LVM_CLI.html#idm140426151603088
.indexterm}[]{#LVM_CLI.html#idm140426151601648 .indexterm}
::: para
可使用 `lvconvert`{.command}
命令增加或减少逻辑卷包含的镜像数。这样可让您将逻辑卷从镜像卷转换为线性卷，或将其从线性卷转换为镜像卷。还可以使用这个命令重新配置现有逻辑卷的其他镜像参数，比如
`corelog`{.filename}。
:::
::: para
将线性卷转换为镜像卷时，基本上均可为现有卷创建镜像分支。这就是说您的卷组必须包含用于该镜像分支及镜像日志的设备和空间。
:::
::: para
如果丢失镜像分支，则 LVM
会将该卷转换为线性卷，以便您可以在没有镜像冗余的情况下访问该卷。替换该分支后，可使用
`lvconvert`{.command} 命令恢复该镜像，如 [第 6.3 节 "恢复 LVM
镜像错误"](#troubleshooting.html#mirrorrecover){.xref} 所述。
:::
::: para
下面的命令将线性逻辑卷 `vg00/lvol1`{.filename} 转换为镜像逻辑卷。
:::
``` screen
# lvconvert -m1 vg00/lvol1
```
::: para
下面的命令将镜像逻辑卷 `vg00/lvol1`{.filename}
转换为线性逻辑卷，并删除该镜像分支。
:::
``` screen
# lvconvert -m0 vg00/lvol1
```
::: para
下面的示例在现有逻辑卷 `vg00/lvol1`{.filename}
中添加附加镜像分支。这个示例显示使用 `lvconvert`{.command}
命令将该卷改为有两个镜像分支的卷钱、后的卷配置。
:::
``` screen
# lvs -a -o name,copy_percent,devices vg00
  LV                  Copy%  Devices
  lvol1               100.00 lvol1_mimage_0(0),lvol1_mimage_1(0)
  [lvol1_mimage_0]        /dev/sda1(0)
  [lvol1_mimage_1]        /dev/sdb1(0)
  [lvol1_mlog]            /dev/sdd1(0)
# lvconvert -m 2 vg00/lvol1
  vg00/lvol1: Converted: 13.0%
  vg00/lvol1: Converted: 100.0%
  Logical volume lvol1 converted.
# lvs -a -o name,copy_percent,devices vg00
  LV                  Copy%  Devices
  lvol1               100.00 lvol1_mimage_0(0),lvol1_mimage_1(0),lvol1_mimage_2(0)
  [lvol1_mimage_0]        /dev/sda1(0)
  [lvol1_mimage_1]        /dev/sdb1(0)
  [lvol1_mimage_2]        /dev/sdc1(0)
  [lvol1_mlog]            /dev/sdd1(0)
```
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#thinly_provisioned_volume_creation}4.4.5. 创建精简配置逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426106351616
.indexterm}[]{#LVM_CLI.html#idm140426106350176
.indexterm}[]{#LVM_CLI.html#idm140426154763648 .indexterm}
::: para
可对逻辑卷进行精简配置。这样就可以让您创建比可用扩展大的逻辑卷。可使用精简配置管理剩余空间的存储池，也称精简池，应用程序可使用该池根据需要分配随机数量的设备。然后可以创建绑定到精简池的设备，以便稍后应用程序实际写入该逻辑卷时分配。该精简池可在需要时动态扩展，以便进行符合成本效益的存储空间分配。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
本小节提供用来创建并增大精简配置逻辑卷的基本命令概述。有关 LVM
精简配置详情及使用 LVM 命令和利用精简配置逻辑卷的详情，请查看
`lvmthin`{.command}(7) man page。
:::
:::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在集群的节点间不支持精简卷。该精简池及其所有精简卷必须只在一个集群节点中激活。
:::
:::
:::
::: para
请执行以下任务创建精简卷：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    使用 `vgcreate`{.command} 命令创建卷组。
    :::
2.  ::: para
    使用 `lvcreate`{.command} 命令创建精简池。
    :::
3.  ::: para
    使用 `lvcreate`{.command} 命令在精简池中创建精简卷。
    :::
:::
::: para
可使用 `lvcreate`{.command} 命令的 `-T`{.option}（或者
`--thin`{.option}）选项创建精简池或精简卷。还可以使用
`lvcreate`{.command} 命令的 `-T`{.option}
选项使用单一命令同时在该池中创建精简池和精简卷。
:::
::: para
下面的命令使用 `lvcreate`{.command} 命令的 `-T`{.option}
选项创建位于卷组 `vg001`{.literal}，名为 `mythinpool`{.literal}
的精简池中，大小为
100M。注：因为要创建占用物理空间的池，所以必须指定该池的大小。`lvcreate`{.command}
命令的 `-T`{.option}
选项不会使用参数，它会推理出该命令指定的其他选项所创建的设备类型。
:::
``` screen
# lvcreate -L 100M -T vg001/mythinpool
  Rounding up size to full physical extent 4.00 MiB
  Logical volume "mythinpool" created
# lvs
  LV            VG     Attr     LSize   Pool Origin Data%  Move Log Copy% Convert
  my mythinpool vg001  twi-a-tz 100.00m               0.00
```
::: para
下面的命令使用 `lvcreate`{.command} 命令的 `-T`{.option} 选项在精简池
`vg001/mythinpool`{.literal} 中创建名为 `thinvolume`{.literal}
的精简卷。注：在这个示例中要指定虚拟卷大小，且为该卷指定的虚拟卷大小要比其所在池要大。
:::
``` screen
# lvcreate -V 1G -T vg001/mythinpool -n thinvolume
  Logical volume "thinvolume" created
# lvs
  LV          VG       Attr     LSize   Pool       Origin Data%  Move Log Copy%  Convert
  mythinpool  vg001    twi-a-tz 100.00m                     0.00                        
  thinvolume  vg001    Vwi-a-tz   1.00g mythinpool          0.00
```
::: para
下面的命令使用 `lvcreate`{.command} 命令的 `-T`{.option}
选项在该池中创建一个精简池和一个精简卷，方法是同时指定
`lvcreate`{.command} 的大小和虚拟卷大小参数。这个命令在卷组
`vg001`{.literal} 中创建名为 `mythinpool`{.literal}
的精简池，还会在该池中创建名为 `thinvolume`{.literal} 的精简卷。
:::
``` screen
# lvcreate -L 100M -T vg001/mythinpool -V 1G -n thinvolume
  Rounding up size to full physical extent 4.00 MiB
  Logical volume "thinvolume" created
# lvs
  LV           VG       Attr     LSize   Pool     Origin Data%  Move Log Copy%  Convert
  mythinpool   vg001    twi-a-tz 100.00m                   0.00                        
  thinvolume   vg001    Vwi-a-tz   1.00g mythinpool        0.00
```
::: para
还可使用 `lvcreate`{.command} 命令的 `--thinpool`{.literal}
参数创建精简池。与 `-T`{.option} 选项不同，`--thinpool`{.literal}
参数需要给出一个参数，即所要创建精简池逻辑卷的名称。下面的示例指定
`lvcreate`{.command} 命令的 `--thinpool`{.literal} 选项创建位于卷组
`vg001`{.literal}，大小为 100M，名为 `mythinpool`{.literal} 的精简池。
:::
``` screen
# lvcreate -L 100M --thinpool mythinpool vg001
  Rounding up size to full physical extent 4.00 MiB
  Logical volume "mythinpool" created
# lvs
  LV          VG     Attr     LSize   Pool Origin Data%  Move Log Copy% Convert
  mythinpool  vg001  twi-a-tz 100.00m               0.00
```
::: para
创建池时支持条带。下面的命令在有两个 64kB 条带及一个 256kB 区块的卷组
`vg001`{.literal} 中创建名为 `pool`{.literal}，大小为 100M
的精简池。它还会创建一个 1T 精简卷 `vg00/thin_lv`{.literal}。
:::
``` screen
# lvcreate -i 2 -I 64 -c 256 -L 100M -T vg00/pool -V 1T --name thin_lv
```
::: para
可使用 `lvextend`{.command} 命令扩展精简卷的大小。但不能将其减小。
:::
::: para
下面的命令可为现有精简池扩充 100M 以重新定义其大小。
:::
``` screen
# lvextend -L+100M vg001/mythinpool
  Extending logical volume mythinpool to 200.00 MiB
  Logical volume mythinpool successfully resized
# lvs
  LV           VG       Attr     LSize   Pool     Origin Data%  Move Log Copy%  Convert
  mythinpool   vg001    twi-a-tz 200.00m                   0.00                        
  thinvolume   vg001    Vwi-a-tz   1.00g mythinpool          0.00
```
::: para
与其他逻辑卷类型一样，可使用 `lvrename`{.command} 命令重命名该安，使用
`lvremove`{.command} 删除该卷，同时可使用 `lvs`{.command} 和
`lvdisplay`{.command} 命令显示该卷的信息。
:::
::: para
默认情况下，`lvcreate`{.command} 根据方程式（Pool_LV_size /
Pool_LV_chunk_size \*
64）设定精简池元数据逻辑卷的大小。但如果要稍后大幅度增加精简池大小，则应该使用
`lvcreate`{.command} 命令的 `--poolmetadatasize`{.option}
参数增大这个值。精简池的元数据逻辑卷的支持值在 2MiB 到 16GiB 之间。
:::
::: para
可使用 `lvconvert`{.command} 命令的 `--thinpool`{.option}
参数将现有逻辑卷转换为精简卷。将现有逻辑卷转换为精简池卷时，必须配合使用
`lvconvert`{.command} 命令的 `--thinpool`{.option}
参数将现有逻辑卷转换为精简池卷的元数据卷。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
将逻辑卷转换为精简池卷或精简池元数据卷会破坏该逻辑卷的内容，因为在这个实例中，`lvconvert`{.command}
不会保留设备的内容，而是会覆盖这些内容。
:::
:::
:::
::: para
下面的命令将卷组 `vg001`{.literal} 中的现有逻辑卷 `lv1`{.literal}
转换为精简池卷，并将卷组 `vg001`{.literal} 中的现有逻辑卷
`lv2`{.literal} 转换为那个精简池卷的元数据卷。
:::
``` screen
# lvconvert --thinpool vg001/lv1 --poolmetadata vg001/lv2
  Converted vg001/lv1 to thin pool.
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#snapshot_command}4.4.6. 创建快照卷 {.title}
:::
[]{#LVM_CLI.html#idm140426159684768
.indexterm}[]{#LVM_CLI.html#idm140426176225840 .indexterm}
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
LVM 支持精简配置快照。有关创建精简配置快照卷的详情，请查看 [第 4.4.7 节
"创建精简配置快照卷"](#LVM_CLI.html#thinly_provisioned_snapshot_creation){.xref}。
:::
:::
:::
::: para
使用 `lvcreate`{.command} 命令的 `-s`{.option}
参数创建快照卷。快照卷是可以写入的。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
不支持跨集群节点的 LVM
快照。不能在集群的卷组中创建快照卷。但如果需要在集群的逻辑卷中创建一致的数据备份，则可以独占方式激活该卷，然后创建快照。有关以独占方式在某个节点中激活逻辑卷的详情，请查看
[第 4.7 节
"在集群的独立节点中激活逻辑卷"](#LVM_CLI.html#cluster_activation){.xref}。
:::
:::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
镜像逻辑卷支持 LVM 快照。
:::
::: para
RAID 逻辑卷支持快照。有关创建 RAID 逻辑卷的详情，请查看 [第 4.4.3 节
"RAID 逻辑卷"](#LVM_CLI.html#raid_volume_create){.xref}。
:::
:::
:::
::: para
LVM
不允许创建超过原始卷与该卷所需元数据大小之和的快照卷。如果指定的快照卷大小超过此数值，则系统会创建原始卷所需大小的快照卷。
:::
::: para
默认情况下，正常激活命令会跳过快照卷。有关控制快照卷激活的详情，请查看
[第 4.4.17 节 "控制逻辑卷激活"](#LVM_CLI.html#LV_activate){.xref}。
:::
::: para
下面的命令创建大小为 100MB，名为 `/dev/vg00/snap`{.filename}
的快照逻辑卷。这样会创建名为 `/dev/vg00/lvol1`{.filename}
的原始卷的快照。如果原始逻辑卷中包含一个文件系统，则可以在任意目录中挂载该快照逻辑卷，以便访问该文件系统，让原始文件系统继续获得更新的同时运行备份。
:::
``` screen
# lvcreate --size 100M --snapshot --name snap /dev/vg00/lvol1
```
::: para
创建快照逻辑卷后，在 `lvdisplay`{.command}
命令中指定原始卷可生成包括所有快照逻辑卷机器状态（活跃或不活跃）的输出结果。
:::
::: para
下面的示例显示逻辑卷 `/dev/new_vg/lvol0`{.filename}
的状态，已为其创建快照卷 `/dev/new_vg/newvgsnap`{.filename}。
:::
``` screen
# lvdisplay /dev/new_vg/lvol0