Exploring Layer 2 Network Security in
Virtualized Environments
Ronny L. Bull, Jeanna N. Matthews
Wallace H. Coulter School of Engineering
Clarkson University
Potsdam, NY 13699
Email: {bullrl, jnm}@clarkson.edu
Abstract—Cloud service providers offer their customers the
ability to deploy virtual machines in a multi-tenant environment.
These virtual machines are typically connected to the physical
network via a virtualized network conﬁguration. This could be
as simple as a bridged interface to each virtual machine or as
complicated as a virtual switch providing more robust networking
features such as VLANs, QoS, and monitoring. In this paper, we
explore whether Layer 2 network attacks that work on physical
switches apply to their virtualized counterparts by performing
a systematic study across four major hypervisor environments
- Open vSwitch, Citrix XenServer, Microsoft Hyper-V Server
and VMware vSphere - in seven different virtual networking
conﬁgurations. First, we use a malicious virtual machine to run
a MAC ﬂooding attack and evaluate the impact on co-resident
VMs. We ﬁnd that network performance is degraded on all
platforms and that it is possible to eavesdrop on other client
trafﬁc passing over the same virtual network for Open vSwitch
and Citrix XenServer. Second, we use a malicious virtual machine
to run a rogue DHCP server and then run multiple DHCP
attack scenarios. On all four platforms, co-resident VMs can
be manipulated by providing them with incorrect or malicious
network information.
Keywords—Virtualization, Networking, Network Security, Cloud
Security, Layer 2 Attacks.
I.
INTRODUCTION
With the growing popularity of Internet-based cloud service
providers, many businesses are turning to these services to host
their mission critical data and applications. Cloud customers
often deploy virtual machines to shared, remote, physical com-
puting resources. Virtual machines running in cloud capacity
are connected to the physical network via a virtualized network
within the host environment. Typically, virtualized hosting
environments will utilize either a bridged network interface
or a virtualized switch such as Open vSwitch[1], [2] for Xen
and KVM based environments, or the Cisco Nexus 1000V
Series virtual switch for VMware vSphere environments[3].
These virtual switches are designed to emulate their physical
counterparts. It is important for users of multi-tenant cloud
services to understand how secure their network trafﬁc is from
other users of the same cloud services, especially given that
VMs from many customers share the same physical resources.
If another tenant can launch a Layer 2 network attack and
capture all the network trafﬁc ﬂowing from and to their
virtual machines, this poses a substantial security risk. By
understanding which virtual switches are vulnerable to which
attacks, users can evaluate the workloads they run in the cloud,
consider additional security mechanisms such as increased
encryption and/or increased monitoring and detection of Layer
2 attacks.
In this paper, we present the results of a systematic
study to evaluate the effects of MAC ﬂooding and DHCP
attacks across four major hypervisor environments with seven
different virtual network conﬁgurations. First, we provide some
background information on the general network conﬁguration
options available to virtualized environments. We then intro-
duce the test environment, and present our attack methodology
using Media Access Control (MAC) and Dynamic Host Con-
ﬁguration Protocol (DHCP) attack scenarios. We conclude the
paper by discussing related work and summarizing our results.
II.
NETWORK CONFIGURATION OPTIONS
There are two types of networking conﬁgurations that
are typically used in virtualized environments; bridging and
switching. In this section we describe both options and discuss
how each one is applied within a virtualized network.
A. Bridging
Bridged mode is the simplest of conﬁgurations providing
an interface dedicated to virtual machine use. A bridge con-
nects two or more network segments at Layer 2 in order to
extend a broadcast domain and separate each of the segments
into their own individual collision domains[4]. A forwarding
table[4], [5] is used to list the MAC addresses associated
with devices located on each network segment connected to
the bridge (Figure 1). Requests are forwarded based upon
contents of this table and the destination MAC address located
in the Ethernet frame. A frame is forwarded across the bridge
only if the MAC address in the destination block of the
frame is reachable from a different segment attached to the
bridge. Otherwise, the frame is directed to a destination address
located on the same segment as the transmitting device or
dropped.
In virtualized environments, guest machines utilize user-
space virtual network interfaces that simulate a Layer 2 net-
work device in order to connect to a virtual bridge. Typically,
the virtual bridge is conﬁgured and bound to a physical
interface on the host machine that is dedicated solely to virtual
machine trafﬁc.
Fig. 1.
A basic bridge using a forwarding table to pass requests between
two network segments.
B. Switching
Physical switches have the capability of operating at Layer
2 or higher of the OSI model. Switches can be thought of as
multi-port bridges[4] where each port of the switch is con-
sidered as its own isolated collision domain. Instead of a for-
warding table, switches employ a CAM (content addressable
memory) table[4] . Content addressable memory is specialized
memory hardware located within a switch that allows for the
retention of a dynamic table or buffer that is used to map MAC
addresses of devices to the ports they are connected to (Figure
2). This allows a switch to intelligently send trafﬁc directly
to any connected device without broadcasting frames to every
port on the switch. The switch reads the frame header for
the destination MAC address of the target device, matches the
address against its CAM table, then forwards the frame to the
correct device. The use of a CAM table and the separation of
collision domains are key factors in preventing eavesdropping
of network trafﬁc between devices connected to the switch.
However, a physical switch is an embedded device and has
a ﬁnite amount of memory available to its CAM table, once
it is used up the switch can no longer dynamically add to
its buffer. If a MAC address is not found in the CAM table, a
packet destined for it will be sent to all interfaces. The majority
of physical switches in use today employ CAM chips that are
capable of holding up to 32,000 addresses[4] which can easily
be saturated by a single MAC ﬂooding attack in a very short
amount of time.
Virtual switches emulate their physical counterparts and are
capable of providing features such as VLAN trafﬁc separation,
performance and trafﬁc monitoring, as well as quality of
service (QoS) solutions. Virtual machines are connected to
a virtual switch by the way of virtual network interfaces
(VIF) that are similar to the Layer 2 network devices used
in conjunction with virtual bridges.
III.
TEST ENVIRONMENT
In this section, we provide details about the test envi-
ronment that was created which consisted of seven server
class systems all located on a test network isolated from local
production networks to avoid impacting them. We deployed
an optimized installation of Gentoo Linux and the Xen 4.3
hypervisor to three Dell PowerEdge 860 servers each equipped
Fig. 2.
A switch and its CAM table.
with a dual core Intel Xeon 3050 2.13GHz processor, 4 GB of
memory, and a 500 GB hard drive. Each system contained dual
Broadcom NetXtreme BCM5721 Gigabit Ethernet PCI Ex-
press network interface cards integrated into the motherboard.
The ﬁrst network interface was dedicated to the privileged
control domain on each server for administrative functions,
and the second conﬁgured to be utilized by guest virtual
machines. Each sever’s 500 GB hard disk was divided into
four partitions; a 100MB ext3 /boot, a 10GB ext3 /, a 2GB
swap, with the remainder allocated to LVM storage for virtual
machine deployment.
Four additional servers were conﬁgured with enterprise
level hypervisor solutions; Citrix XenServer 6.2, Microsoft
Windows Server 2008 R2 with the Hyper-V hypervisor, Mi-
crosoft Hyper-V 2008 (free edition), and VMware vSphere
(ESXi) 5.5 (free edition). The hardware utilized for the Citrix
XenServer 6.2 system was identical to the three Gentoo
systems, however the Microsoft Hyper-V and the VMware
vSphere hypervisors were conﬁgured on systems with different
hardware conﬁgurations due to a lack of additional Dell Pow-
erEdge 860 systems. Both Microsoft Windows Server 2008 R2
along with the Hyper-V hypervisor as well as the free version
of Hyper-V 2008 were installed to identical Dell PowerEdge
2950 server systems containing dual quad core Intel Xeon 5140
processors at 2.33GHz, 32GB of memory, and a 145GB SATA
hard drive. VMware vSphere (ESXi) 5.5 (free edition) was
deployed to a custom built server using a Supermicro X9SCL
server motherboard, a quad core Intel Xeon E3-1240 processor
at 3.30GHz, 24GB of memory, and a 500GB SATA hard drive.
The Hyper-V and vShpere systems were each outﬁtted with
two network adapters in order to provide separate dedicated
interfaces for administrative purposes and virtual machine use.
Though there are notably some variations in the hardware
conﬁgurations summarized in Table I, it is important to note
that these differences had no impact on the results of the
experiments that were performed.
For the MAC ﬂooding scenario, two virtual machines were
deployed to each virtualization platform, one of which was
setup as a malicious client attempting to eavesdrop on the
trafﬁc of other tenant virtual machines (Figure 3). The Kali
Linux security distribution[6] was selected due to the plethora
TABLE I.
SUMMARY OF TEST ENVIRONMENT HARDWARE.
Hardware Specs
CPU
Memory
Hard
NICs
Platform
Type
Size
Disk
OS Xen w/ Linux Bridging
Xeon 3040
4 GB
500 GB
2
OS Xen w/ Open vSwitch 1.11.0
Xeon 3040
4 GB
500 GB
2
OS Xen w/ Open vSwitch 2.0.0
Xeon 3040
4 GB
500 GB
2
Citrix XenServer 6.2
Xeon 3040
4 GB
500 GB
2
MS Server 2008 R2 w/Hyper-V
Xeon 5140
32 GB
145 GB
2
MS Hyper-V 2008 Free
Xeon 5140
32 GB
145 GB
2
VMware vSphere (ESXi) 5.5
Xeon E3-1240
24 GB
500 GB
2
of network security auditing tools that come pre-installed and
conﬁgured. Two complete installations of Kali were installed
to each server on 20GB LVM partitions as HVM guests. The
systems were then allocated static IP addresses that positioned
them on the same isolated subnet as the servers and were
completely updated.
Fig. 3. A malicious virtual machine located on a multi-tenant virtual network.
The DHCP attack testing required a more elaborate setup.
It was necessary to create four new virtual machines within
each hypervisor platform in order to setup scenarios to conduct
the experiments. Each new machine was created based upon
a minimal installation of CentOS 6.5[7], and conﬁgured for a
speciﬁc purpose (Table II).
TABLE II.
NEW VIRTUAL MACHINES ADDED TO EACH HYPERVISOR
PLATFORM FOR LAYER 2 DHCP ATTACK TESTING.
Operating
Completely
System
Virtual
System
Updated
Purpose
Interfaces
CentOS 6.5
Yes
DHCP/DNS Server
1
CentOS 6.5
Yes
Simple Router
2
CentOS 6.5
Yes
HTTP Server
1
CentOS 6.5
No
Left Vulnerable to ShellShock
1
A virtual machine acting as a rogue DHCP server was setup
and conﬁgured using DNSMasq[8] a lightweight DHCP and
DNS server. It was also necessary to create a simple router
using iptables[9] on a separate virtual machine in order to
forward trafﬁc between two broadcast domains using NAT and
two network interfaces. A basic Apache[10] web server was
setup on a third virtual machine to act as a malicious web
server, and the ﬁnal machine was conﬁgured as a minimal
client that was left unpatched and vulnerable to shellshock[11].
IV.
ATTACKS PERFORMED
Two Layer 2 networking attack categories were explored
and thoroughly tested across all platforms; MAC ﬂooding
and DHCP attacks. Each attack simulation was performed
identically on all platforms in order to analyze the differences
between the environments when subjected to the different
attack scenarios.
A. MAC Flooding
The most common Layer 2 Media Access Control attack is
a MAC ﬂooding attack in which the attacker generates many
packets with random MAC addresses in an attempt to overﬂow
the (CAM) buffer within a switch and thus force the switch into
a mode in which it broadcasts packets on all interfaces. This
happens because the legitimate MAC addresses are evicted
from the CAM table in favor of the many random MAC
addresses generated by the attacker. This is referred to as hub
mode and when a switch is operating in hub mode, the inherent
separation of collision domains is broken and all frames
passing through the switch are forwarded to all connected
devices. This allows for passive eavesdropping of all trafﬁc
passing through the device. MAC ﬂooding can be mitigated by
enforcing port security on physical switches which imposes a
limit on the amount of MAC addresses that can send trafﬁc
to a speciﬁc port[12]. This feature is not implemented within
the majority of the virtual switches available today rendering
them vulnerable to MAC ﬂooding attacks.
The program macof from the dsniff package[13] was used
on a Kali virtual machine to perform a MAC ﬂooding attack on
the virtual network within each test environment. This type of
attack when performed on a physical switch typically causes
the CAM table on the switch to ﬁll up forcing the device
to go into a fail safe or hub mode which in turn causes all
packets on the network to be broadcast to every node connected
to the switch. Wireshark was used to determine if the attack
was successful by monitoring the network for HTTP trafﬁc
which should not be intercept-able by other hosts on the virtual
network.
All tests were conducted in the same manner. Each server
had two Kali Linux virtual machines deployed on them. For
testing purposes both virtual machines were brought online. On
the ﬁrst virtual machine (Kali1) macof was started up using
the command:
macof -i eth0
and left to run. Then Wireshark was started on the same virtual
machine and an HTTP ﬁlter was applied to only display sniffed
HTTP trafﬁc. The second Kali virtual machine (Kali2) was
then used to surf the web. If the attack proved to be successful
then the HTTP trafﬁc from Kali2 should be viewable in
Wireshark on Kali1.
1) Bridged Interface:
Running the attack within the
bridged virtual network test environment resulted in a signif-
icant performance degradation that impacted the usability of
the tenant virtual machines, essentially creating a denial of
service (DoS) type of attack. This effect was observed as a
large increase in latency when attempting to interact with any
of the virtual machines on the system either through SSH or
VNC. While the MAC ﬂooding attack was occurring remote
connections to the virtual machines became unstable due to
the saturation of the virtual network with spoofed frames. This
effect was quantiﬁed by using the ping utility on the second
virtual machine to measure the transmission latency to a server
located on the physical network while the attack was occurring
(Figure 4). The attack however did not result in the ability to
sniff other virtual machine trafﬁc passing over the interface.
This most likely comes from the fact that the standard bridge
interface is missing the CAM table that typically is found on
switches mapping known MAC addresses to switch ports, an
essential element of the attack.
Fig. 4.
Latency measured using the ping utility on a bridged virtual network
during a MAC ﬂooding attack. The attack was launched at ICMP request 61
and terminated at ICMP request 241.
2) Open vSwitch 1.11.0 Interface: When running the attack
on the Open vSwitch 1.11.0 virtual network test environ-
ment not only was the same level of network performance
degradation observed, but the attacking machine could also
successfully sniff trafﬁc from another tenant machine. Figure
5 depicts the results of the successful attack and provides
substance to the claim that virtual switches are vulnerable to
some of the same Layer 2 attacks as physical switches.
Fig. 5.
A malicious virtual machine running macof on an Open vSwitch
virtual network and successfully snifﬁng HTTP trafﬁc with Wireshark from
another tenant virtual machine.
3) Open vSwitch 2.0.0 Interface: Running the attack on
the latest version of Open vSwitch available at the time of this
research revealed that the vulnerability still existed and had
not been addressed. The system responded in the same way as
the previous two attempts and the other tenant’s HTTP trafﬁc
was view-able in Wireshark.
4) Citrix XenServer 6.2: Citrix XenServer 6.2 utilizes an
older version of Open vSwitch (version 1.4.6) to provide vir-
tual switching services to its client machines. When the MAC
ﬂooding test was attempted in the XenServer environment,
it was also discovered that the ﬂooding was able to escape
the virtual environment which caused all upstream physical
switches to go into hub mode as well. Not only did this
allow the malicious virtual machine running Wireshark to sniff
trafﬁc from other tenant virtual machines, it also was able to
eavesdrop on trafﬁc from physical machines located within the
same broadcast domain to which the physical Ethernet adapter
was connected.
5) Microsoft Hyper-V Server 2008 R2: Testing under the
Microsoft Hyper-V environment was performed both with and
without the Windows Firewall service enabled to identify if
there was any affect on the results. Both scenarios proved to
be unsuccessful due to the fact that Microsoft Windows Server
2008 R2 provides some minimal protection for virtualized
network trafﬁc, this includes protection against MAC address
spooﬁng[14].
Further testing was performed on the free version of
Microsoft Hyper-V to see if the protection offered by Server
2008 R2 is also built into the bare metal product. As with
the previous environment testing was performed both with
and without the Windows Firewall service enabled. It was