   Output: (count(*))  
   SQLite query: SELECT count(*) FROM v_tbl  
(3 rows)  
Time: 7.842 ms  
```  
5、创建查询duckdb parquet的压测函数. 压测方法与前面的类似, 若干个字符串字段, 若干个整型字段.  
```  
create or replace function get_uid2(int, int) returns setof int8 as $$  
declare  
  sql text := '';  
begin  
  for i in 1..$1 loop  
    sql := sql || 'c' || ceil(random()*500)::int || ' = ''' || round((random()*100)::numeric, 2)::text || ''' and ';  
  end loop;  
  for i in 1..$2 loop  
    sql := sql || 'c' || 500 + ceil(random()*500)::int || ' = ' || (random()*100)::int || ' and ';  
  end loop;  
  sql := 'select id from duckdb.v_tbl where ' || rtrim(sql, 'and ');  
  -- raise notice '%', sql;  
  return query execute sql;  
end;  
$$ language plpgsql strict;  
```  
```  
-- 组合查询5个字符串字段条件, 10个int字段条件.  
select * from get_uid2(5, 10);  
postgres=# select * from get_uid2(5, 10);  
NOTICE:  select id from duckdb.v_tbl where c386 = '92.82' and c370 = '3.55' and c110 = '33.45' and c60 = '10.28' and c184 = '39.87' and c520 = 5 and c662 = 71 and c586 = 14 and c777 = 68 and c617 = 25 and c843 = 95 and c611 = 79 and c775 = 48 and c598 = 92 and c899 = 74  
 get_uid2   
----------  
(0 rows)  
Time: 47.058 ms  
postgres=# select * from get_uid2(5, 10);  
NOTICE:  select id from duckdb.v_tbl where c100 = '93.50' and c62 = '91.11' and c441 = '72.54' and c6 = '50.63' and c349 = '65.93' and c925 = 29 and c959 = 44 and c518 = 79 and c781 = 78 and c649 = 46 and c961 = 16 and c857 = 17 and c664 = 73 and c950 = 56 and c811 = 4  
 get_uid2   
----------  
(0 rows)  
Time: 47.597 ms  
```  
6、查询性能压测  
```  
vi t4.sql  
select * from get_uid2(5, 10);  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t4.sql -c 1 -j 1 -T 120  
transaction type: ./t4.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 120 s  
number of transactions actually processed: 9003  
latency average = 13.329 ms  
latency stddev = 1.255 ms  
initial connection time = 8.840 ms  
tps = 75.021592 (without initial connection time)  
statement latencies in milliseconds:  
        13.329  select * from get_uid2(5, 10);  
```  
7、表和空间占用情况  
```  
postgres@abaf67f643b7:~$ ll /var/lib/postgresql/db1.parquet  
-rw-r--r-- 1 postgres postgres 262M Sep  8 09:07 /var/lib/postgresql/db1.parquet  
```  
#### 对照  
10万数据量, 1000字段, 任意组合搜索.   
方法 | 单次15个组合条件请求响应速度 (毫秒) | 处理吞吐 tps | 表占有空间 | 索引占有空间  
---|---|---|---|---  
传统方法1000字段 + 1000 btree索引 | 12.235 | 817 | 782 MB | 812 MB  
PolarDB\|PG bloom 索引 | 258.315 | 39 | 782 MB | 52 MB  
PolarDB\|PG 数组 + gin索引 | 0.390 | 25661 | 795 MB | 564 MB  
PolarDB\|PG + duckdb parquet 列存储 + 无索引 | 13.329 | 75 | 262 MB | 0   
## 知识点      
1 hashvalue   
2 bloom index  
3 array  
4 gin index  
5 向量特征, 向量距离, 向量索引?   
6 bitmap index scan  
## 思考    
1 本实验提到的都是等值或不等于的查询要求, 如果有范围查询怎么办? 阶梯化? 转化为有限空间内的值? 最终还是模拟等值查询!!!   
2 向量特征?  
4 列存储?   
5 为什么会选择多个索引使用bitmap index方法?  
6 and查询用数组怎么表达? `@>`  
```  
postgres=# \do+ @>  
                                                List of operators  
   Schema   | Name | Left arg type | Right arg type | Result type |            Function            | Description   
------------+------+---------------+----------------+-------------+--------------------------------+-------------  
 pg_catalog | @>   | anyarray      | anyarray       | boolean     | arraycontains                  | contains  
```  
7 or查询在数组中如何表达? `&&`  
```  
postgres=# \do+ &&  
                                                          List of operators  
   Schema   | Name | Left arg type | Right arg type | Result type |            Function            |           Description              
------------+------+---------------+----------------+-------------+--------------------------------+----------------------------------  
 pg_catalog | &&   | anyarray      | anyarray       | boolean     | arrayoverlap                   | overlaps  
```  
8 如果原始字段内容特别长, 可以用hashvalue表示原始值, 从而降低存储空间.  
9 duckdb_fdw 的duckdb server只能打开1次, 不能多个连接同时打开, 未来可能有改进空间. 否则每次初始化duckdb非常麻烦. 留个作业, 有兴趣的同学可以改进duckdb_fdw, 例如以RO模式同时打开, 或者支持更方便的克隆功能?  
- https://github.com/alitrack/duckdb_fdw  
## 参考      
##### 202212/20221222_05.md   [《使用 PolarDB 开源版 bloom filter index 实现任意字段组合条件过滤》](../202212/20221222_05.md)    
##### 202106/20210605_07.md   [《重新发现PostgreSQL之美 - 14 bloom 布隆过滤器索引》](../202106/20210605_07.md)    
##### 202105/20210510_01.md   [《PostgreSQL 应用开发解决方案最佳实践系列课程 - 7. 标签搜索和圈选、相似搜索和圈选、任意字段组合搜索和圈选系统》](../202105/20210510_01.md)    
##### 202103/20210326_02.md   [《PostgreSQL 14 preview - BRIN (典型IoT 时序场景) 块级索引支持 bloom filter - 随机,大量distinct value, 等值查询》](../202103/20210326_02.md)    
##### 202011/20201128_04.md   [《PostgreSQL bloom 索引原理》](../202011/20201128_04.md)    
##### 202005/20200520_02.md   [《PostgreSQL 任意字段组合搜索 - rum 或 多字段 bitmapscan 对比》](../202005/20200520_02.md)    
##### 202001/20200114_01.md   [《PostgreSQL+MySQL 联合解决方案 - 第10课视频 - 任意字段、维度组合搜索（含GIS、数组、全文检索等属性）》](../202001/20200114_01.md)    
##### 201911/20191130_01.md   [《UID编码优化 - 用户画像前置规则 (bloom, 固定算法等)》](../201911/20191130_01.md)    
##### 201903/20190320_02.md   [《PostgreSQL 任意字段组合查询 - 含128字段，1亿记录，任意组合查询，性能》](../201903/20190320_02.md)    
##### 201810/20181003_02.md   [《PostgreSQL bloom filter index 扩展 for bigint》](../201810/20181003_02.md)    
##### 201809/20180905_03.md   [《PostgreSQL 任意字段数组合 AND\OR 条件，指定返回结果条数，构造测试数据算法举例》](../201809/20180905_03.md)    
##### 201808/20180803_01.md   [《PostgreSQL 设计优化case - 大宽表任意字段组合查询索引如何选择(btree, gin, rum) - (含单个索引列数超过32列的方法)》](../201808/20180803_01.md)    
##### 201805/20180518_02.md   [《PostgreSQL ADHoc(任意字段组合)查询(rums索引加速) - 非字典化，普通、数组等组合字段生成新数组》](../201805/20180518_02.md)    
##### 201804/20180424_04.md   [《PostgreSQL 实践 - 实时广告位推荐 2 (任意字段组合、任意维度组合搜索、输出TOP-K)》](../201804/20180424_04.md)    
##### 201804/20180420_03.md   [《PostgreSQL 实践 - 实时广告位推荐 1 (任意字段组合、任意维度组合搜索、输出TOP-K)》](../201804/20180420_03.md)    
##### 201804/20180409_01.md   [《PostgreSQL 11 preview - bloom filter 误报率评估测试及如何降低误报 - 暨bloom filter应用于HEAP与INDEX的一致性检测》](../201804/20180409_01.md)    
##### 201803/20180323_05.md   [《PostgreSQL 11 preview - BRIN索引接口功能扩展(BLOOM FILTER、min max分段)》](../201803/20180323_05.md)    
##### 201802/20180228_01.md   [《PostgreSQL ADHoc(任意字段组合)查询 与 字典化 (rum索引加速) - 实践与方案1 - 菜鸟 某仿真系统》](../201802/20180228_01.md)    
##### 201607/20160725_05.md   [《PostgreSQL 如何高效解决 按任意字段分词检索的问题 - case 1》](../201607/20160725_05.md)    
##### 201605/20160523_01.md   [《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)    
##### 202303/20230308_01.md   [《PolarDB-PG | PostgreSQL + duckdb_fdw + 阿里云OSS 实现高效低价的海量数据冷热存储分离》](../202303/20230308_01.md)    
##### 202212/20221209_02.md   [《PolarDB 开源版通过 duckdb_fdw 支持 parquet 列存数据文件以及高效OLAP》](../202212/20221209_02.md)    
##### 202209/20220924_01.md   [《用duckdb_fdw加速PostgreSQL分析计算, 提速40倍, 真香.》](../202209/20220924_01.md)    
##### 202010/20201022_01.md   [《PostgreSQL 牛逼的分析型功能 - 列存储、向量计算 FDW - DuckDB_fdw - 无数据库服务式本地lib库+本地存储》](../202010/20201022_01.md)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")