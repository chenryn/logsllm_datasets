User: 如何使用Python编写一个脚本，自动化执行系统管理任务，例如备份、监控、配置等？
Assistant: Python可以实现系统管理任务的自动化，常用的模块包括os、sys、subprocess、shutil等。下面介绍如何使用Python编写一个脚本，实现备份、监控和配置自动化操作。

1. 备份

使用shutil模块可以实现文件和目录的备份。可以编写一个函数，接受两个参数：源目录和备份目录。函数实现将源目录下的所有文件和目录复制到备份目录下。代码如下：

```
import shutil

def backup(src_dir, backup_dir):
    shutil.copytree(src_dir, backup_dir)
```

2. 监控

使用subprocess模块可以调用系统命令。可以编写一个函数，接受一个命令字符串作为参数，实现执行该命令并获取输出信息。代码如下：

```
import subprocess

def exec_cmd(cmd_str):
    p = subprocess.Popen(cmd_str, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    return out.decode('utf-8'), err.decode('utf-8')
```

可以使用该函数监控系统的负载情况，例如查询CPU和内存使用率。可以编写一个函数，实现获取系统CPU和内存使用率信息。代码如下：

```
def get_load_info():
    cmd_str = "top -n 1 | grep Cpu && free"
    out, err = exec_cmd(cmd_str)
    cpu_info = out.split('\n')[0]
    mem_info = out.split('\n')[1]
    return cpu_info, mem_info
```

3. 配置

使用os模块可以实现对系统配置文件的读写操作。可以编写一个函数，接受一个文件路径和一个字典作为参数，实现将字典中的键值对写入到文件中。代码如下：

```
import os

def write_config_file(file_path, config_dict):
    with open(file_path, 'w') as f:
        for k, v in config_dict.items():
            f.write("{}={}\n".format(k, v))
```

可以使用该函数修改系统配置文件，例如修改网络配置文件。可以编写一个函数，实现将IP地址写入到网络配置文件中。代码如下：

```
def set_network_ip(ip_addr):
    config_dict = {'IPADDR': ip_addr}
    write_config_file('/etc/sysconfig/network-scripts/ifcfg-eth0', config_dict)
```

通过编写上述函数，可以实现备份、监控和配置自动化操作。可以编写一个脚本，调用上述函数，实现定时执行系统管理任务。例如，使用cron定时执行脚本，每天备份一次、每小时监控一次、每周修改一次网络IP地址。可参考以下代码：

```
import time

# 备份
backup('/home/user', '/mnt/backup')

# 监控
while True:
    cpu_info, mem_info = get_load_info()
    print('CPU info:', cpu_info)
    print('Mem info:', mem_info)
    time.sleep(3600)  # 每小时监控一次

# 配置
set_network_ip('192.168.1.123')  # 每周修改一次
```