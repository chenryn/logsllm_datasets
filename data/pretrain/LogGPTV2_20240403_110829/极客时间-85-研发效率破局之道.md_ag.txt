## 小结Facebook 在 CI/CD上做到了极致，对每一个代码提交都高效地运行大量的测试、验证，并采用测试分层、定时运行等方式尽量降低资源消耗。正因为如此，他们能够让几千名开发人员共同使用一个大代码仓，并使用主干开发，产生高质量的产品，从而实现了超大研发团队协同下的高效能。在前面几篇文章中，我们多次提到"持续"。这个词，近些年在软件研发中比较流行，比如我今天与你分享的持续集成、持续交付、持续部署，加上持续开发，一共有4 个了。实际上，在 CI/CD流水线中，**做为流水线的一部分，测试一直在运行并最快地给开发者提供反馈**。这正是另一个"持续"，也就是"持续测试"的定义。"持续"如此重要的原因是，软件开发是一个流程，只有让这个流程持续运转才能高效。这里我把这5 个持续都列举出来，方便你复习、参考。![](Images/85a14d05b332bcfae2b115c228494c68.png){savepage-src="https://static001.geekbang.org/resource/image/7d/06/7df32f45bdf6890cfc1198184b2f3b06.jpg"}```{=html}```图 2 5 个"持续"方法定义与关键点对比]{.reference}```{=html}```
## 思考题1.  在几千名开发人员共同使用一个大代码仓的工作方式下，做好 CI    有很大的挑战性。你觉得挑战在哪里，容易出现什么样的问题，又应该怎么解决呢？2.  今天我提到了持续开发在 CI    中的作用，请你结合上一篇文章，思考一下持续开发和 CI/CD    是怎样互相促进的。感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！![](Images/6476358e731920fbc927e278bae473aa.png){savepage-src="https://static001.geekbang.org/resource/image/ec/d8/ece1747e3a8f96aa76a8e57c94de94d8.jpg"}
# 07 \| 分支管理：Facebook的策略，适合我的团队吗？你好，我是葛俊。今天，我来跟你聊聊研发过程中的 Git代码分支管理和发布策略。在前面两篇文章中，我们讨论了持续开发、持续集成和持续部署的整个上线流程。这条流水线针对的是分支，因此代码的分支管理便是基础。能否找到适合自己团队的分支管理策略，就是决定代码质量，以及发布顺畅的一个重要因素。Facebook有几千名开发人员同时工作在一个大代码仓，每天会有一两千个代码提交入仓，但仍能顺利地进行开发，并发布高质量的产品。平心而论，Facebook的工程水平的确很高，与他们的分支管理息息相关。所以在今天这篇文章中，我会先与你详细介绍 Facebook的分支管理策略，以及背后的原因；然后，与你介绍其他的常见分支管理策略；最后，向你推荐如何选择适合自己的分支策略。
## Facebook 的分支管理和发布策略Facebook 的分支管理策略，是一种基于主干的开发方式，也叫作Trunk-based。在这种方式中，用于开发的长期分支只有一个，而用于发布的分支可以有多个。首先，我们先看看这个长期存在的开发分支。
### 开发分支这个长期存在的开发分支，一般被叫作 trunk 或者master。为方便讨论，我们统一称它为 master。也就是说，所有的开发人员基于master 分支进行开发，提交也直接 push 到这个分支上。``{=html}在主干开发方式下，根据是否允许存在短期的功能分支（FeatureBranch)，又分为两个子类别：主干开发有功能分支和主干开发无功能分支。Facebook做得比较纯粹，在主代码仓中，基本上禁止功能分支。另外，在代码合并回 master 的时候，又有 rebase 和 merge两种选择。Facebook 选择的是rebase（关于这样选择的原因，我会在后面与你详细介绍）。所以，Facebook的整个开发模式非常简单，步骤大概如下。第一步，获取最新代码。    git checkout mastergit fetchgit rebase origin/master第二步，本地开发，然后执行    git add git commit产生本地提交。第三步，推送到主代码仓的 master 分支。    git fetchgit rebase origin/mastergit push在 rebase 的时候，如果有冲突就先解决冲突，然后使用    git addgit commit更新自己的提交，最后重复步骤 3，也就是重新尝试推送代码到主代码仓。看到这里，你可能对这种简单的分支方式有以下两个问题。**问题 1**：如果功能比较大，一个代码提交不合适，怎么办？解决办法：这种情况下，第二步本地开发的时候可以产生多个提交，最后在第三步一次性推送到主仓的master 分支。**问题 2**：如果需要多人协同一个较大的功能，怎么办？解决办法：这种情况下，Facebook 采用的是使用代码原子性、功能开关、API版本等方法，让开发人员把功能拆小尽快合并到 master 分支。比如，一个后端开发者和一个前端开发者合作一个功能，他们的互动涉及 10 个API 接口，其中两个是在已有接口上做改动，另外 8 个是新增接口。这两名开发者的合作方式是：-   第一，后端开发者把这 10 个接口的编码工作，以至少 10    个单独的提交来完成。强调"至少"，是因为有些接口的编码工作可能比较大，需要不止一个提交来完成。-   第二，对已有 API 的改动，如果只涉及增加 API    参数，情况就比较简单，只需要在现有 API    上进行。但如果牵涉到删除或者修改 API 参数，就要给这个 API    添加一个新版本，避免被旧版本阻塞入库。-   第三，在实现功能的过程中，如果某个功能暂时还不能暴露给用户，就用功能开关把它关闭。这就保证了，在不使用功能分支的情况下，这两个开发者可以直接在 master分支上合作，并能够不被阻塞地尽快提交代码。当然了，这种合作方式，可以扩展到更多的开发者。以上就是开发分支的情况。接下来，我再与你讲述发布分支和策略。
### 发布分支基于主干开发模式中，在需要发布的时候会从 master拉出一条发布分支，进行测试、稳定。在发布分支发现问题后，先在 master上修复，然后 cherry-pick到发布分支上。分支上线之后，如果需要长期存在，比如产品线性质的产品，就保留。如果不需要长期存在，比如SaaS 产品，就直接删除。Facebook 采用的方式是后者。具体来说，部署包括 3种：有每周一次的全量代码部署、每天两次的日部署，以及每天不定次数的热修复部署。日部署和热修复部署类似，我们下面详细介绍周部署和热修复部署。每次**周部署**代码的时候，流程如下所示。第一步，从 master 上拉出一个发布分支。    git checkout -b release-date-* origin/master第二步，在发布分支进行各种验证。第三步，如果验证发现问题，开发者提交代码到 master，然后用 cherry-pick命令把修复合并到发布分支上：    git cherry-pick  
# fix-sha1 是修复提交的 commit ID接着继续回到第二步验证。验证通过就发布当前分支。这个发布分支就成为当前生产线上运行版本对应的分支，我们称之为当前生产分支，同时将上一次发布时使用的生产分支存档或者删除。在进行**热修复部署**时，从当前生产分支中拉出一个热修复分支，进行验证和修复。具体步骤为：第一步，拉出一个热修复分支。    git checkout -b hotfix-date-* release-date-*第二步，开发人员提交热修复到 master，然后 cherry-pick修复提交到热修复分支上。    git cherry-pick 第三步，进行各种验证。第四步，验证中发现问题，回到第二步重新修复验证。验证通过就发布当前热修复分支，同时将这个热修复分支设置为当前的生产分支，后面如果有新的热修复，就从这个分支拉取。这里有一张图片，描述了每周五拉取周部署分支，以及从周部署分支上拉取分支进行热修复部署的流程。![](Images/3975d6def71dce670ef7bb312df09e18.png){savepage-src="https://static001.geekbang.org/resource/image/0c/58/0c79327f4a163fd800984346a7e76258.jpg"}```{=html}```图 1 Facebook 的代码分支管理和部署流程]{.reference}```{=html}```以上就是 Facebook 的代码分支管理和部署流程。**需要注意的是**，这里描述的部署流程是 Facebook转到持续部署之前采用的。但考虑到非常多的公司还没有达到持续部署的成熟度，所以这种持续交付的方式，对我们更有参考价值。
## Facebook 分支管理策略的背后原因Facebook采用主干分支模式，最大的好处是可以把持续集成、持续交付做到极致，从而尽量提高master 分支的代码质量。解释这一好处之前，我想请你先看看下面这 3 个措施有什么共同效果：-   几千名开发者同时工作在同一条主干；-   不使用功能分支，直接在 master 上开发；-   必须要使用 rebase 才能入库，不能使用 merge。其实，它们的共同效果就是：必须尽早将代码合入 master分支，否则就需要花费相当长的时间去解决合并冲突。所以每个开发人员，都会尽量把代码进行原子性拆分，写好一部分就赶快合并入库。我曾经有过一个有趣的经历。一天下午，我和旁边的同事在改动同一个 API接口，实现两个不同的功能。我们关系很好，也都清楚对方在做什么，于是一边开玩笑一边像在比赛一样，看谁先写好代码完成自测入主库。结果是我赢了，他后来花了十分钟很小心地去解决冲突。Facebook 使用主干分支模式的好处，主要可以总结为以下两点：-   能够**促进开发人员把代码频繁入主仓进行集成检验**。而这，正是持续集成的精髓。与之相对应的是，很多    20    名开发者的小团队，采用的也是共主干开发方式，但使用了功能分支，让大家在功能分支上进行开发，之后再    merge    回主仓。结果是，大家常常拖到产品上线前才把功能分支合并回主干，导致最后关头出现大量问题。-   能够**确保线性的代码提交历史**，给流程自动化提供最大方便。不要小看"线性"，它对自动化定位问题意义非凡，使得我们可以从当前有问题的提交回溯，找到历史上第一个有问题的提交。更棒的是，我们还可以使用折半查找（也叫作二分查找）的办法，用    O(LogN) 的时间找到那个有问题的提交。比如，在一个代码仓中，有 C000 \~ C120的线性提交历史。我们知道一个测试在提交 C100 处都是通过的，但是在 C120出了问题。我们可以依次 checkout C101、C102，直到 C120，每次 checkout之后运行测试，总能找到第一个让测试失败的提交。或者更进一步，我们可以先尝试 C100 和 C120 中间的提交C110。如果测试在那里通过了，证明问题提交在 C111 和 C120 之间，继续检查C115；否则就证明问题提交在 C101 和 C110 之间，继续检查C105。这就大大减少了检查次数。而这，正是软件算法中经典的折半查找。事实上，Git 本身就提供了一个命令 git bisect支持折半查找。比如，在刚才的例子中，如果运行测试的命令行是runtest.sh。那么，我们可以使用下面的命令来自动化这个定位流程：    > git checkout master 
# 使用最新提交的代码 > git bisect start> git bisect bad HEAD 