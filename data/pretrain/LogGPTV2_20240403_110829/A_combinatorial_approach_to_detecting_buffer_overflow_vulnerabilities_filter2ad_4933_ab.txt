space  to  hold  S.  Thus,  L  may  be  vulnerable  to  buffer 
overflow. In case that L is vulnerable, a test case T can detect 
this vulnerability if T satisfies the following two conditions 
C1 and C2:  
•  C1: L must be executed during the execution of test T. In 
other words, when T is executed, the control flow must 
be able to reach the point where L is located.  
•  C2:  When  L  is  executed,  B  must  be  overrun.  This 
typically happens when S is a string that is unexpectedly 
long, or B is a buffer that is unexpectedly small, or both. 
(Section  II.D  discusses  a  more  subtle  case  in  which  B 
may be overrun. The case is not discussed here to avoid 
distraction from the main idea of our approach.) In other 
words, either S, or B, or both, have to take an extreme 
value.  
Note that extreme values are often syntactically legal but 
not semantically meaningful. As a result, extreme values are 
often  unexpected  and  not  tested  during  normal  functional 
testing.  
Our approach is centered on how to generate tests such 
that  conditions  C1  and  C2  are  likely  to  be  satisfied  for 
potentially  vulnerable  statements  like  L.  Our  approach 
hypothesizes  that  an  internal  variable  like  S  or  B  in  our 
example derives its extreme value from the value of a single 
external parameter. 
Hypothesis  H1:  It  is  often  the  case  that  a  buffer  is 
overrun by an extreme value (of an internal variable) that is 
derived  from  a  single  extreme  value  taken  by  an  external 
parameter.  
As  an  effort  to  validate  this  hypothesis,  we  inspected 
buffer  overflow  vulnerability  reports 
three  public 
databases.  The  results  of  our  inspection,  as  presented  in 
Section IV, provide  strong evidence  for  the  validity  of this 
hypothesis in practice. Hypothesis H1 is consistent with the 
typical  exploit  attempt  described  in  Section  I,  where  the 
attacker identifies a single external parameter to carry attack 
data. As discussed later, Hypothesis H1 allows us to generate 
tests such that each test only needs to contain a single attack-
payload parameter.  
The  main  idea  of  our  approach  can  be  described  as 
follows.  First,  we  identify  a  group  of  “potential”  attack-
payload parameters and a set of extreme values for each of 
these  parameters.  These  parameters  are  “potential”  attack-
payload  parameters  in  the  sense  that  only  one  of  these 
parameters is used as an attack-payload parameter each time 
a test is constructed. In the remainder of this paper, we will 
refer to a “potential” attack-payload parameter as an attack-
payload  parameter  unless  otherwise  specified.  An  external 
parameter p is identified to be an attack-payload parameter, 
if p taking an extreme value may cause variables like S or B 
to take an extreme value.  
in 
Second, for each attack-payload parameter, we identify a 
set of attack-control parameters, and a set of values for each 
of  these  attack-control  parameters.  Let  p  be  an  attack-
payload  parameter.  Intuitively,  an  external  parameter  p’  is 
identified to be an attack-control parameter of p if the value 
of p’ may affect how the value of p is processed. The values 
of  an  attack-control  parameter,  which  we  will  refer  to  as 
control values, are identified such that they could potentially 
lead to different application scenarios.  
In  our  approach,  the  attack-payload  and  attack-control 
parameters and their values are identified manually based on 
specification  and  domain  knowledge.  We  provide  general 
guidelines on how to perform this identification in the next 
section.  
After  we  identify  the  attack-payload  and  attack-control 
parameters and their values, we are ready to generate actual 
security tests. Consider the example again. If we knew that L 
was  a  vulnerable  statement,  ideally  we  would  want  to 
generate  a  single 
to  satisfy  both  C1  and  C2. 
Unfortunately, vulnerable statements like L are not known a 
priori. Our approach takes a different perspective. Instead of 
trying to generate a single ideal test for a specific vulnerable 
statement,  we  try  to  generate  a  group  of  tests  for  each 
extreme value (of each attack-payload parameter) such that 
each extreme value can reach as many vulnerable statements 
as possible.  
Specifically,  for  each  extreme  value  v  of  each  attack-
payload parameter p, we generate a combinatorial test set T 
such  that  (1)  p  takes  value  v  in  each  test  in  T;  and  (2)  T 
covers  all  the  t-way  combinations  of  all  the  attack-control 
parameters  of  p,  where  t  is  a  small  integer  number  that  is 
test 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:42 UTC from IEEE Xplore.  Restrictions apply. 
271expected to be no greater than 6 in practice [20]. Hypothesis 
H1  allows  us  to include only  one extreme  value (i.e.,  v)  in 
each test. The reason we achieve t-way coverage for all the 
attack-control  parameters  of  p  is  to  exploit  the  correlation 
between combinatorial and code coverage such that, if there 
is  a  vulnerable  statement  like  L  where  v  could  cause  a 
variable like S or B to take an extreme value, then one of the 
tests in T will be likely to reach this statement. 
C.  Algorithm BOVTest 
takes  as 
Fig.  2  presents  an  algorithm  called  BOVTest  (short  for 
Buffer  Overflow  Vulnerability  Test)  that  implements  our 
approach.  This  algorithm 
input  a  program 
specification M and an integer t. M is used as the basis for 
identifying external parameters and values, and t is used as 
the strength for combinatorial test generation. The output of 
algorithm  BOVTest  is  a  test  set  T  for  detecting  buffer 
overflow vulnerabilities in an implementation of M.  
identification  and  security 
The  algorithm  can  be  largely  divided  into  two  parts, 
parameter 
test  generation. 
Parameter  identification  includes  identification  of  the  set  P 
(line  1)  of  all  the  external  parameters  and  three  particular 
subsets  of  P,  i.e.,  Px  (line  2),  Pc  (line  5),  and  Pd  (line  6). 
Note  that  Pc  and  Pd  are  identified  for  each  attack-payload 
parameter in Px (line 4). Security test generation generates a 
group of security tests for each extreme value (lines 7 to 13). 
In the following, we explain each part in detail. 
Identification of the set P of all the external parameters 
(line  1):  Generally  speaking,  an  external  parameter  is  any 
factor  of  interest  that  could  potentially  affect  the  program 
behavior.  This  includes  not  only  the  input  parameters,  but 
also  configuration  options  and  environment  variables  and 
other  factors  that  could  potentially  affect  the  program 
behavior.  
Identification of the set Px of attack-payload parameters 
and  their  values  (line  2):  To  identify  attack-payload 
parameters  and  extreme  values,  we  observe  that  attack-
payload parameters often  have  variable  lengths, or  indicate 
the sizes of some other parameters (and thus are likely to be 
used  as  the  capacity  of  a  buffer).  In  the  former  case,  an 
extreme value is often a string value of an excessive length; 
in  the  latter  case,  an  extreme  value  is  often  an  excessively 
small value. In both cases, the specific values of an attack-
payload parameter are  often not  significant  for  the  purpose 
of  testing,  i.e.,  in  terms  of  triggering  a  buffer  overflow 
(instead  of  acquiring  specific  control  to  do  any  real  harm). 
This is because buffer overflow vulnerabilities are in essence 
a  mishandling  of  certain  length  or  size  requirements.  This 
observation  can  also  be  used  to  exclude  certain  parameters 
from Px. For example, string parameters of fixed length are 
typically not attack-payload parameters. 
For example, in a network protocol, user payload is likely 
to  be  an  attack-payload  parameter,  as  it  is  of  a  variable 
length. Furthermore, we can identify a payload that is longer 
than  typically  expected  as  one  of  its  extreme  values.  Note 
that the specific data in the payload is not important for our 
purpose. 
Identification of the set Pc of attack-control parameters 
and  their  values  (for  each  attack-payload  parameter  in  Px) 
(line  5):  An  external  parameter  p’  is  an  attack-control 
parameter of attack-payload parameter p if application logic 
suggests that the value of p’ could affect how the value of p 
is  processed.  The  term  “application  logic”,  instead  of 
“program  logic”,  is  used  to  indicate  this  identification  is 
based on specification and/or domain knowledge, i.e., not the 
source code. For each parameter in Pc, we identify a set of 
control  values.  Control  values  can  be  identified  using 
traditional 
techniques  such  as  domain  analysis  and 
equivalence  partitioning  [25].  Oftentimes,  different  control 
values  signal  different  application  scenarios,  leading  to 
different branches in a program. We point out that security 
testing  is  often  performed  after  normal  functional  testing. 
Therefore,  it  is  often  possible  for  us  to  take  advantage  of 
knowledge  and  experience  accumulated  during  functional 
testing. In particular, we expect that most control values have 
been identified and tested during functional testing.  
Again,  consider  a  network  protocol.  Assume  that  we 
have identified user payload as an attack-payload parameter. 
Then,  message  type  is  likely  to  be  a  parameter  that  could 
affect how user payload is processed in the implementation. 
This  is  because  the  payload  often  needs  to  be  interpreted 
differently depending on the type of a message. The control 
values of this message type parameter would be the different 
types  that  are  specified  in  the  protocol  specification.  It  is 
often  the  case  that  the  different  types  have  already  been 
identified during functional testing. 
Identification  of 
the  set  Pd  of  non-attack-control 
parameters  and  their  values  (for  each  attack-payload 
parameter in Px) (line 6): Pd is the complement set of Pc. In 
other  words, Pd consists  of  all the  external parameters  that 
are  not  attack-control  parameters  of  attack-payload 
parameter p. For each parameter in Pd, we simply identify a 
single  default  value,  which  can  be  any  valid  value  in  the 
domain of the parameter. (A value is valid if it is allowed by 
the  specification.  Otherwise,  it  is  invalid.)  These  default 
values  do  not  directly  contribute  to  the  detection  of  buffer 
overflow  vulnerabilities  in  our  approach.  Instead,  these 
values  are  only  needed 
thus 
executable, tests.  
to  construct  complete, 
The  fewer  the  parameters  in  Pc  (and  the  more  the 
parameters  in  Pd),  the  fewer  the  tests  generated  for  each 
extreme value of attack-payload parameter p. An imperfect 
identification of Pc and Pd may increase the number of tests 
and/or  miss  some  vulnerabilities,  but  it  does  not  invalidate 
our  test  results.  That  is,  any  vulnerability  detected  by  our 
approach  is  a  real  vulnerability.  More  discussion  on  this  is 
provided in Section II.D.  
Security  test  generation  (lines  7  -  13):  The  actual 
generation of a security test set for each extreme value v of 
each  attack-payload  parameter  in  Px  proceeds  as  follows. 
We first generate a t-way test set T’ for all the parameters in 
Pc, using their control values (line 8). Each test in T’ is then 
used as a base test to create a complete test by (1) adding v as 
the  value  of  Px,  and  (2)  adding  the  default  value  of  each 
parameter in Pd (and thus not in Pc). 
Consider  the  example  shown  in  Fig.  3.  Assume  that  a 
system has five parameters, P1, P2, P3, P4, and P5. Assume 
that P4 is an attack-payload parameter, and has an extreme 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:42 UTC from IEEE Xplore.  Restrictions apply. 
272value LS, indicating a very long string. Also assume that P1, 
P2, and P3, with control values 0 and 1, are in Pc, and P5 is 
in Pd, with a default value 0. To generate a pairwise test set 
for  extreme  value  LS  of  attack-payload  parameter  P4,  we 
first generate a pairwise test set for P1, P2, and P3, which is 
the test set T shown in Fig. 1. Next, we add into each test of 
T value LS as the value of P4, and 0 the value of P5. Thus, 
we obtain the complete test set as shown in Fig. 3. 
Algorithm BOVTest 
Input:  A program specification M, and an integer t
Output:  A test set T for detecting buffer overflow 
vulnerabilities in an implementation of M 
1. let P be the set of all the external parameters of M 
2. identify a set Px ⊆ P of attack-payload parameters and a  
       set of extreme values for each parameter p in Px 
3. initialize T to be an empty test set 
4. for each attack-payload parameter px in Px { 
5.    identify a set Pc ⊆ P of attack-control parameters for  
           px and a set of control values for each parameter p      
           in Pc 
6.    let Pd = P – Pc, and identify a default value d(p) for  
           each parameter p in Pd 
7.    for each extreme value v of px { 
8.        build a t-way test set T′ for parameters in Pc using  
               their control values 
9.        for each test τ′ in T′ { 
10.          create a complete test τ such that for each  
                   parameter p, τ(p) = v if p = px, τ(p) = τ′(p) if p  
                   ∈ Pc, and τ(p) = d(p) otherwise, where τ(p) (or  
                   τ′(p)) is the value of parameter p in test τ (or τ′) 
11.              T = T ∪ τ 
12.          } 
13.    } 
14. } 
15. return T 
Figure 2.   Algorithm BOVTest 
p1     p2     p3     p4     p5 
0       0       0      LS      0  
0       1       1      LS      0 
1       0       1      LS      0 
1       1       0      LS      0 
Figure 3.   An example security test set 
Assume that the IPOG algorithm is used to generate a t-way 
test  set  (line  8).  Let  dc  be  the  maximal  number  of  control 
values an attack-control parameter can take. The size of T′ 
[24].  Let  dx  be  the  maximal  number 
is 
of extreme values an attack-payload parameter can take. Let 
d  be  the  maximum  of  dc  and  dx.  The  number  of  tests 
dO
(
log
P
×
|)
|
t