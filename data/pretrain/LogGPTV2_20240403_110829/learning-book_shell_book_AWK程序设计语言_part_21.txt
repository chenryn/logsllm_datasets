control-flow statements
4 8
[FS]  variable
35 36 52
[if]-[else] statement
4 7
numeric comparison
string comparison
4 4
下一个程序ix.rotate为索引字生成旋转，例如根据“stringcomparison”生成“comparison，
string”.旋转操作与KWIC索引制作过程中出现的旋转大致相网，虽然我们用了不同的方法来编写.
注意for循环中的赋值表达式.
# ix.rotate - generate rotations of index terms
input:  string tab num num ...
#
output: rotations of string tab num num ...
BEGIN { FS = OFS = "\t" }
print $1, $2
# unrotated form
}（0<（（（+Ts）xqns）xpu=[）=）xog
i += j
# find each blank, rotate around it
printf("s, $s\ts\n",
substr($1, i+1), substr($1, 1, i-1), $2)
）
ix.rotate的部分输出内容是
arithmetic operators
3644
operators, arithmetic
3644
coercion rules
4 4
rules, coercion
4 4
coercion~to number
45
number, coercion~to 45
coercion-to string 45
string, coercion~to 45
control-flow statements
48
statements, control-flow
48
* + +
---
## Page 131
第五章文本处理
123
下一个步骤是对旋转后的索引字排序，如果直接对它们进行排序，由于文本内仍然嵌入有格式化
命令（比如[.1)，这些命令会对排序结果造成干扰，我们的解决办法是为每一行加上一个前缀（排序
键)，这个前照确保排序结果是正确的，在后面的步骤中会把这些前缀移除，程序ix.genkey通过移除
troff的字号与字体设置命令来构造前组，troff的字号与字体设置命令类似于\s+n，\s-n，\fx，或
f（xx.ix.genkey还会把排序键中的波浪号替换成空格，移除任意非字母数字字符（除了空格）.①
128
# ix.genkey - generate sort key to force ordering
#
input:  string tab num num ...
#
output: sort key tab string tab num num ...
BEGIN { FS = OFS = "\t" }
gsub(/-/，"",$1)
# tildes now become blanks
key = $1
# remove troff size and font change commands from key
gsub(/\\f.|\\f\(.·|\\s[-+][09]/, "", key)
#keep blanks, letters, digits only
（x。*/+[6-0z-z-1/)qnsb
if (key ~/^[^a-zA-z]/)# force nonalpha to sort first
key = " " key
# by prefixing a blank
print key, $1, $2
）
输出是
arithmetic operators
arithmetic operators
36 4 4
operators arithmetic
operators, arithmetic
364 4
coercion rules
coercion rules 44
rules coercion
rules, coercion 44
coercion to number coercion to number
45
number coercion to number, coercion to
45
coercion to string coercion to string
45
string coercion to string, coercion to
45
controlflow statements
control-flow statements 48
前面几行应该能够闻明排序键与实际数据之间的区别
第二个排序命令对输入按照字母顺序排序，同之前的一样，选项-f表示合并大小写字母，-d表示
按照字共序排序
# ix.sort2 - sort by sort key
input/output: sort-key tab string tab num num ...
°从前西的输出中可以看到，对于现代aort命今来说,这个多湿是多余的一译考运
*  交, 为 The first few linee sbould clarify the distinction between the sort key and the actual data.
---
## Page 132
第五章文本处理
124
sort -f -d
程序的输出是索引最终的排列顺序：
arithmetic operators
arithmetic operators
364 4
coercion rules
coercion rules 44
coercion to number
coercion to number
45
coercion to string
coercion to string
45
comparison numeric
comparison, numeric
44
comparison string
comparison, string
44
controlflow statements
control-flow statements 48
FS variable [FS] variable
35 36 52
ifelse statement
[if]-[else] statement
4 7
number coercion to number, coercion to
45
...
129
最后一步是用程序ix.format移除排序键，把[...]扩展成troff的字体设置命令，并在每个
术语之前加上一个格式化命令，XX，格式化程序可以利用这个命令控制文本的大小，位置等.（实际产生
的命令只对troff有意义，读者大可忽略这些细节）
# ix.format - remove key, restore size and font commands
input: sort key tab string tab num num ...
output: troff format, ready to print
BEGIN { FS = "\t" }
4
（∈s‘//）qnsb
 commas between page numbers
gsub(/\[/，"\\f(cw"，$2)
 set constant-width font
gsub(/\]/，"\\fP"，$2)
restore previous font
print ".xx"
 user-definable command
printf("s
s\n",$2，$3) # actual index entry
输出的部分内容是
. XX
arithmetic operators
36,44
.XX
coercion rules
4 4
. XX
coercion to number
概括起来，索引构造过程由六个命令的流水线组成
---
## Page 133
第五章文本处理
125
sh ix.sort1 1
awk -f ix.collapse |
awk -f ix.rotate
awk -f ix.genkey
sh ix.sort2
awk -f ix.format
如果把本节开头所展示的索引字-页码对集合作为输入数据，再对输出进行格式化，则最终的排版结果
是
arithmetic operators 36, 44
coercion rules 44
coercion to number 45
coercion to string 45
comparison, numeric 44
comparison, string 44
control-flow statements 48
FS variable 35, 36, 52
if-else statement 47
number, coercion to 45
numeric comparison 44
130
可以对这些程序进行一些增强或变形，针对这点，习题给出了几点比较有用的建议，不过最重要的
是，把一个大型任务分解成若干个小任务可以使整个工作完成起来更加简单容易，也更容易适应需求的
变化.
Exercise 5.22修改或增强索引程序的功能：它可以提供分层的索引（See与Seealso）与罗马数字形式
的页码.
Exercise5.23允许索引字中出现字面意义上的[，］，一与8
Exercise5.24构造一个准备单词与短语列表的工具程序，利用该程序来自动创建索引.在促成索引字
与主题方面，wordfreg所生成的单词频率列表表现如何？
5.4小结
Awk处理文本就像C或Pascal处理数字那样轻松—自动管理存储，内建运算符与内建函数提供
了许多必需的功能，结果是aWk擅长于原型构造，有时候即使是对产品化的使用来说，原型也已足够2.
索引程序就是一个很好的例子—我们使用该程序的另一个版本为本书制作索引。
° Attatek the problem of creating an index automatially by building tools that prepare lists of wonds, phrases, etc. How well does the
list of word frequencies produoed by vordfreq suggest index terms or topics?
& 文,为刃 As a result, awk is asually good for prototyping, and sometimes it is quite adequate foer production use.
---
## Page 134
第五章文本处理
126
参考资料
我们的测试程序以Unix的测试程序为原型构造而来，后者最初由Doug McIlroy开发而成.应
话生成器这个主意来自于RonHardin.Parnas 的一篇关于KWIC索引的论文“On the criteria to
be used in decomposing systems into modules” 载于 Communications of the ACM, 1972 年 12 月.
JonBentley提供了KWIC索引程序的早期版本，详细内容在ProgrammingPearls,Communications
of theACM，1985年6月.维护交叉引用的程序基于Aho与Sethi的工作，“MaintainingCros8-
Reference in Manuscripts", CSTR 129, AT&T Bell Laboratories, Murray Hill, NJ (1986). 造 
引的程序源自 Bentley 与 Kernighan 的工作,“Tools for Printing Indexes”, CSTR 130, AT&T Bell
Laboratories, Murray Hill, NJ (1986).
---
## Page 135
第六章小型语言
131
人们经常使用awk开发“小型语言”的翻译器（"小型语言”指的特定于某些应用领域的专用编程语
言）开发翻译器的原因主要有三点，首先，它可以帮助你了解语言处理程序的工作流程，本章的第一个例
子是一个汇编程序，虽然只有20来行，但已经包含了汇编过程的核心要素，为了执行汇编程序，我们还
要开发一个解释程序，汇编程序与解释程序反映了早期阶段汇编语言与机器架构的关系，其他例子还包
括一个后照计算器，和awk子集的递归下降分析器.
第二个原因是在实际工作中，为了实现一个专用的编程语言，通常需要投入大量的精力与财力，不过
在这之前，我们有必要测试一下新语言的语法和语义，作为示例，本章讨论了一个画图语言和一个参数设
置语言，后者用于设置排序命令的参数。
最后一点是希望编程语言能够在实际的工作发挥作用，就比如说本章所开发的计算器，
语言处理程序围绕下面这个模型构造而成：
source
analyzer
synthesizer
target
program
e.load
symbol table
分析器（analyzer）系语言处理程序的前端，它负责读取源程序（source program）并将其切分成一
个个词法单元，词法单元包括运算符，操作数等，分析器对源程序进行语法检查，如果源程序含有语法错
误，它就会打印一条错误消息.最后，分析器把源程序转换成某种中间形式，并传逼给后端（合成器），合成
器(synthesizer)再根据中间形式生成目标程序（target program）.合成器在生成目标程序的过程中需
要和符号表（symbol table)通信，而符号表中的内容由分析器收集而来，虽然我们把语言的处理过程描
述成多个界限分明的不同步骤，但实际上，这些界限通常很模糊，而且有些步骤有可能被合并成一个.
132
利用awk为实验性语言构造处理程序非常方便，这是因为它支持许多和语言翻译相关的操作，对源
程序的分析可以通过字段分割与正则表达式来完成，用关联数组管理符号表，用printf生成目标代码。
关于上面提到的几点，我们将通过开发几个翻译器来进一步说明.在保证足够说明问题的前提下，将
尽量保持程序的简短，而把润色与优化留到习题中.
127
---
## Page 136
第六章小型语言
128
6.1
汇编程序与解释程序
我们的第一个例子是虚拟计算机的汇编程序，虚拟计算机这个概念经常出现在计算机体系结构或系
统编程的基础课程中，虚拟计算机有一个累加器，十条指令，按字编址且大小为1000字的内存，我们假
设内存的一个“字”可以保存5个十进制数位，如果某个字存放的是一条指令，那么前两个数位表示操作
码，最后三个数位表示内存地址，所有的汇编语言指令在表6.1中列出.
表6.1：汇编语宫指令集
操作码指令
意义
01
get
从输入读取一个数，并存放到累加器中
02
put
把累加器的值写到输出
03
N PT
把地址为M的内存单元的值读取到累加器中
04
st M
把累加器的值存放到地址为M的内存单元中
05
add M
把地址为M的内存单元的值与累加器的值相加，再把结果存放到累加器中
06
sub M
把地址为M的内存单元的值与累加器的值相减，再把结果存放到累加器中
07
jpos M
如果累加器的值为正，则跳转到内存地址M
08
jz M
如果累加器的值为零，则跳转到内存地址M
09
jM
跳转到内存地址M
10
halt
停止执行
const C