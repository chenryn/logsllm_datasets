an inspection rate of once per 482 cycles), our classifier correctly
identified 57.35% of the characters with a precision of 89.94% and
100% of the characters with a precision of 69.90% (see Table 4).
Particularly, all space characters were correctly identified with no
false positives. 72.14% of the words were correctly recovered by
running a dictionary spelling check. Compared with the page-fault
attack, which captured 100% of the words, T-SPM is less accurate
but much more efficient: it incurred an overhead of 16%, while our
re-implemented page-fault attack caused the program to slow down
by a factor of 252×.
HT-SPM on Hunspell. As an example, we ran HT-SPM on Hun-
spell, in a scenario when a set of words were queried on the dictio-
nary. We conducted the experiments on the Intel Skylake i7-6700
processor, which is characterized by multi-level TLBs (see Table 1).
The experiments show that the dTLB and L2 TLB are fully shared
across logical cores. Our attack process includes 6 threads: 2 cleaners
operating on the same physical core as the Hunspell process in the
enclave for evicting its TLB entries and 4 collectors for inspecting
the accessed flags of memory pages. The cleaners probed all 64 and
1536 entries of the dTLB and L2 TLB every 4978 cycles and the col-
lectors inspected the PTEs once every 128 cycles. In the experiment,
we let Hunspell check 100 words inside the enclave, with the attack
process running outside. The collectors, once seeing the fingerprint
of the spell function, continuously gathered traces for data-page
visits, from which we successfully recovered the exact page visit
set for 88 words. The attack incurred a slowdown of 39.1% and did
not fire a single TLB shootdown.
4.3 Silent Attacks on EdDSA
To understand the stealthiness of different attacks, in terms of their
AEX frequency (which are used by the prior research to detect page
side-channel attacks [15, 38]), we ran the page-fault attack, B-SPM
and T-SPM against the latest version of Libgcrypt (v1.7.6) to recover
the EdDSA session keys2. Edwards-curve Digital Signature Algo-
rithm (EdDSA) [13] is a high-speed high-security digital signature
scheme over twisted Edwards curves. The security of EdDSA is
based on the difficulty of the well-known elliptic curve discrete log-
arithm problem: given points P and Q on a curve to find an integer
a, if it exists, such that Q = aP. Provided the security parameters b
and a cryptographic hash function H producing 2b-bit output, an
EdDSA secret is a b-bit string k, and a = H(k) is also private. The
corresponding public key is A = sB, with B the base point and s
the least significant b bits of a. Let r be the private session key, the
signature of a message M under k is a 2b-bit string (R, S), where
R = rB and S = (r + H(R, A, M)a) mod l. It can be seen that if r
2The attacks only involve code pages, while HT-SPM is designed to reduce AEXs for
data pages. As such, HT-SPM is not presented in the comparison.
1 void
2 _gcry_mpi_ec_mul_point ( mpi_point_t result ,
3
4
5
6
7
8
9
|| ( ctx -> model == MPI_EC_WEIERSTRASS
if ( ctx -> model == MPI_EC_EDWARDS
if ( mpi_is_secure ( scalar )) {
&& mpi_is_secure ( scalar ))) {
gcry_mpi_t scalar , mpi_point_t point ,
mpi_ec_t ctx ) {
/* If SCALAR is in secure memory we assume that it is the
secret key we use constant time operation .
*/
...
}
else {
for (j= nbits -1; j >= 0; j - -) {
_gcry_mpi_ec_dup_point ( result , result , ctx );
if ( mpi_test_bit ( scalar , j))
_gcry_mpi_ec_add_points ( result , result , point , ctx );
}
}
return ;
}
10
11
12
13
14
15
16
17
18
19
20
21 }
Figure 4: Scalar point multiplication for ECC.
Table 5: Attack summary on EdDSA (Libgcrypt 1.7.5). A nor-
mal execution of EdDSA signature without attack also in-
curs over 1500 AEXs.
Page fault attack
B-SPM attack
T-SPM attack
Monitored pages
000E7000, 000E8000
000F0000, 000F1000
000EF000 (trigger page)
000E9000, 000F0000
000F0000 (trigger page)
000F1000 (trigger page)
Number of AEXs
71,000
33,000
1,300
is disclosed, assuming H(R, A, M) mod l (cid:44) 0, the long-term secret
key a can be directly obtained as a = (S − r)/H(R, A, M) mod l.
Figure 4 presents the main function for ECC scalar point multi-
plication. Although Libgcrypt provides side-channel protection by
tagging the long-term private key as “secure memory”, we found
that it does not protect the secret session key. As a result, the non-
hardened branch of line 13-17 is always taken while generating
the message signature. Then the secret-dependent i f -branch can
leak out session key information. We present our evaluation results
using page fault attack, B-SPM and T-SPM respectively, as follows:
Page-fault attacks. During an offline analysis, we generated the
sub-function call traces for both _gcry_mpi_ec_dup_point (Line
14 of Figure 4) and _gcry_mpi_ec_add_points (Line 16, a neces-
sary condition for bit 1), from which we identified 4 code pages to
be monitored, including _gcry_mpi_ec_mul_point on one page,
_gcry_mpi_ec_add_points and _gcry_mpi_ec_dup_point on an-
other page, their related functions on the third page and _gcry_
mpi_test_bit on the last page, whose execution indicates the end
of the processing on the current bit. During the attack, we inter-
cepted the page fault handler in our kernel module and restricted
accesses to these monitored pages by clearing their present bits.
Once a page fault on a monitored page occurred we reset its present
bit and recorded the current count of page faults. We found that for
key bit 1 and 0, there are 89 and 48 subsequent page visits respec-
tively. In total around 71,000 page faults were triggered to correctly
recover all the session key bits.
8
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2428B-SPM attacks. We found that the aforementioned code page set is
visited for both key bit 1 and 0, if we do not flush the TLB. Therefore,
the spying thread needs to interrupt the target enclave thread and
clean up the current TLB to get more detailed information about
page visits to differentiate the key bit with different values. To re-
duce the frequency of the interrupts needed, instead of sending IPIs
with fixed time interval, the spying thread runs simultaneously with
the target thread and monitors a trigger page containing ec_pow2
and ec_mul2. Whenever the trigger page is accessed, the spying
thread interrupts the target thread to shoot down the TLB, and
then identifies whether two other pages in the page set (000E9000
and 000F0000 in Table 5) are visited between two interrupts. We
observed a clear difference in the page traces for key bit 1 and 0
and can recover all key bits during the post-processing phase. In
total around 33,000 interrupts were triggered to correctly recover
all the session key bits.
T-SPM attacks. To further reduce the AEX frequency, we moni-
tor the 2 pages containing _gcry_mpi_ec_mul_point and _gcry_
mpi_ec_dup_point/_gcry_mpi_ec_add_points respectively and
utilize the time between the visits to both pages to find out the value
of the current key bit. Specifically, once both of them are found to be
accessed, our attack process starts the timer (using rdtsc) but waits
for 2000 nanoseconds to ensure that the execution of the target pro-
cess leaves both pages, before shooting down the TLB and resetting
the accessed flags of both pages. The timer stops when both pages
are observed again. In this way, only about 2 interrupts are needed
for collecting information for each key bit. The recorded timings
turn out to be differentiating enough to determine whether_gcry_
mpi_ec_dup_point or _gcry_mpi_ec_add_points has been exe-
cuted, around 19,700 cpu cycles for the former and 27,900 cpu cycles
for the latter. After all the call traces are gathered, we can figure
out that the current key bit is 1 when _gcry_mpi_ec_add_points
is observed right after _gcry_mpi_ec_dup_point, and 0 if only
_gcry_mpi_ec_dup_point is seen. In total around 1,300 interrupts
were triggered to correctly recover all the session key bits.
In summary, we found that these three attacks all are able to re-
cover the full EdDSA session key reliably. Page fault attack triggers
a page fault for every page observation and produces about 71,000
AEXs. The B-SPM attack can observe the page visit set between two
consecutive inspections. However it still needs to aggressively send
IPIs to clear TLB entries to gain timely observation of the pages vis-
ited, which produces about 33,000 AEXs. T-SPM attack only issues a
TLB shootdown for every invocation of _gcry_mpi_ec_dup_point
or _gcry_mpi_ec_add_points and differentiates between the two
functions using timing information. As such, it generates a min-
imum number of AEXs. We noticed that a normal execution of
the EdDSA program also incurs at least 1,500 AEXs. The OS at-
tacker could reduce the number of additional AEXs (e.g., only 1300
AEXs for T-SPM in the demonstrated example) caused by normal
page faults and interrupts, and therefore make the T-SPM attack
unobservable.
5 IMPROVING SPATIAL GRANULARITY
WITH CACHE-DRAM ATTACKS
Page-fault side-channel attacks (and also the sneaky page monitor-
ing attacks described in the previous section) only allow attackers
9
to learn the enclave program’s memory access patterns at a page
granularity. Therefore, mechanisms that mix sensitive code and
data into the same pages have been proposed to defeat such at-
tacks [39]. Intel also recommends “aligning specific code and data
blocks to exist entirely within a single page.” [7]. However, the
effectiveness of this defense method is heavily conditioned on the
fact that page granularity is the best spatial granularity achievable
by the adversary. However, our study suggests it is not the case.
In this section, we demonstrate three attack methods to show
that a powerful adversary is able to improve spatial granularity
significantly. Particularly, we will demonstrate a cross-enclave
Prime+Probe cache attack, a cross-enclave DRAMA attack, and
a cache-DRAM attack. Because SGX do not allow memory shar-
ing between enclaves, the Flush+Reload cache attacks that can
achieve cache-line granularity cannot be conducted against secure
enclaves. However, we show that the cache-DRAM attack is capable
of achieving the same level of spatial granularity against enclaves.
5.1 Cross-enclave Prime+Probe (Vector 7)
Our exploration starts with a validation of cross-enclave cache
Prime+Probe attack. SGX is not designed to deal with cache side-
channel attacks. Therefore, it is expected that known cache attacks
also work against SGX enclaves. To confirm this, we ported GnuPG
1.4.13 to Graphene-SGX. The algorithm repeatedly decrypted a
ciphertext which was encrypted with a 3,072-bit ElGamal public
key, just as the prior work (i.e., [30]) did. GnuPG uses Wiener’s
table to decide subgroup sizes matching field sizes and adds a a
50% margin to the security parameters, consequently a private key
of 403 bits is used. In the experiment an attack process monitored
when the victim enclave was loaded and determined the physical
address of Square-and-Multiply exponentiation. With knowledge of
cache slicing and cache set mapping [24], the attacker constructed
eviction sets mapped to the same cache sets as the target addresses.
In our experiment, with the observation of only one ElGamal de-
cryption, we could recover all 403 bits of the private key through a
Prime+Probe cache attack with an error rate of 2.3%.
This experiment suggest that Prime+Probe cache attacks can be
performed in a cross-enclave scenario, similar to the traditional
settings. We note that Prime+Probe attacks achieves a spatial gran-
ularity of a cache set, which is 16KB on a processor with a 8196-set
LLC (see Table 1 and Table 7).
5.2 Cross-enclave DRAMA (Vector 8)
The DRAMA attack exploits shared DRAM rows to extract sensi-
tive information [36]. In such an attack, in order to learn whether
the victim process has accessed a virtual address d, the adversary
allocates two memory blocks that map to the same DRAM bank,
with one sharing the same DRAM row with the physical memory
of d, which we call p, and the other mapped to a different row on
the same bank, which we call p′. The attack is conducted using the
following steps:
• Access the memory block p′.
• Wait for some victim operations.
• Measure the access time of memory block p.
A faster memory access to memory block p suggests the vic-
tim process has probably touched memory address d during its
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2429Table 6: Row ranges for different PRM size.
PRM size
32MB
64MB
128MB
PRM range
0x88000000∼0x89FFFFFF
0x88000000∼0x8BFFFFFF
0x80000000∼0x87FFFFFF
DRAM row range
0x1100∼0x113F
0x1100∼0x117F
0x1000∼0x10FF
accesses of d will reach the DRAM. The concept of cache-DRAM
attack is shown in Figure 5. However, to implement cache-DRAM
attacks against SGX enclaves, one needs to address the following
challenges:
First, share the DRAM Bank and Row with d. The EPC memory
exclusively used by enclaves is already isolated from the rest of
the physical memory in DRAMs. To understand this artifact, we
explain the mechanism of the DRAM-level isolation using our own
testbed (Table 1) as an example. With the assumption of row bits
being the most significant bits in a physical address [36, 42], any
bit beyond bit 19 is a row bit that determines the corresponding
DRAM row of the physical address. With a 128MB PRM (physical
memory range 0x80000000 to 0x87FFFFFF), no non-PRM memory
will occupy row number 0x1000 to 0x10FF, as shown in Table 6. As
such, the PRM range (exclusively taken by enclaves) spans every
DRAM bank and occupies specific sets of rows in each bank; these
rows are not shared with non-PRM memory regions.
To overcome this barrier, we leverage the processor’s support for
running multiple enclave programs concurrently to carry out the
DRAMA attacks from another enclave program controlled by the
adversary. Since both programs operate inside enclaves, they share
the EPC memory range. The adversary can manage to co-locate the
memory page with the target enclave memory on the same banks