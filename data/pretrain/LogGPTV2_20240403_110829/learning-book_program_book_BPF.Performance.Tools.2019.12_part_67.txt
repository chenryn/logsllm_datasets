added later.
8. (Advanced) Develop a tool to show TCP round-trip time by host. This could show either
an average RTT by host, or a RTT histogram by host. The tool could time sent packets by
sequence number and associate the timestamp on the ACK, or make use of struct
tcp_sock->rtt_min, or another approach. If the first approach is used, the TCP header can
be read, given a struct sk_buff * in Sskb as (using bpftrace):
(xepeeuxodsuex a\n°, comm, str (args->oldnane) 
 : ( (aueuneu totally_safe_path-stashed
22 :03: 47
synlink_svap RENAME_EXCHANGE totally_safe_path  totally_safe_path-stashed
22 : 03 : 47
synlink_svap RENAME_ExCHANGE totally_safe_path  totally_safe_path-stashed
[...]
This one-liner normally emits no output, but in this case, a flood of output occurred as the vulner
ability proof-of-concept code was running as a test. The output includes timestamps, the process
name, and the filename arguments to renameat2(2). A different approach would be to trace the
docker cp process as it operates on symlinks, from either syscalls or kernel function calls.
I can imagine a future where a vulnerability disclosure is accompanied by a bpftrace one-liner or
tool for detecting its use in the wild. An intrusion detection system could be built to execute these
tools across a company's infrastructure. This would not be disimilar to how some network intru-
sion detection systems work, such as Snort [116], which shares rules for the detection of new worms.
Security Monitoring
BPF tracing programs can be used for security monitoring and intrusion detection. Current
monitoring solutions often use loadable kernel modules to provide visibility of kernel and packet
events. However, such modules introduce their own risk of kernel bugs and vulnerabilities. BPF
programs are passed through a verifier and use existing kernel technologies, making them safer
and more secure.
---
## Page 529
492
2Chapter 11Security
BPF tracing has also been optimized for efficiency In a 2016 internal study, I compared the overhead
of auditd logging to that of a similar BPF program; BPF introduced six times less overhead [117]
An important behavior of BPF monitoring is what happens under extreme load. BPF output
buffers and maps have limits that can be exceeded, causing events to not be recorded. This may be
exploited by an attacker as an attempt to evade proper logging or policy enforcement, by inundat
ing the system with events. BPF is aware of when these limits are exceeded, and can report this to
user space for appropriate action. Any security solution built using BPF tracing needs to record
these overflow or dropped events, to satisfy non-repudliation requirements.
ndano μad au au squasa jueuodu sunoo o deu d-ad e ppe o s yoeoudde aqouy
bufer or maps involving keys, once BPF has created a per-CPU map of fixed counters, there is no
risk of losing events. This could be used in conjunction with perf event output to provide more
detail: the more detail may be lost, but the count of events will not be.
Policy Enforcement
A number of policy enforcement technologies already use BPE While this topic is outside of the
scope of this book, they are important developments in BPF and worth summarizing. They are:
■ seccomp: The secure computing (seccomp) facility can execute BPF programs (currently
classic BPF) to make policy decisions about allowing syscalls [118]. seccomp's programmable
actions include killing the calling process (SECCOMP_RET_KILL_PROCESS) and returning an
error (SECCOMP_RET_ERRNO). Complex decisions can also be offloaded by a BPF program to
user-space programs (SECCOMP_RET_USER_NOTIF); this blocks the process while a user-space
helper program is notified via a file descriptor. That program can read and process the event
and then write a struct seccomp_notif_resp in response to the same file descriptor [119].
 Cilium: Cilium provides and transparently secures network connectivity and load
balancing for workloads such as application containers or processes. It makes use of a
combination of BPF programs at various layers such as XDP, cgroup and tc (traffic control)
 soa adexaog ae  a u ed eep uu eu  so paseg
premo °a[ueu o rapuo u gdqspo u8no ue8oad adg e um padno sspb pesouos
or drop packets [24] [120] [121].
au ddg m emag saqed a Supedan 1og dauogo-good e s rydq agdq 
To help with a transition from iptables, an iptables ruleset sent to the kernel can be
redirected to a user-mode helper that converts it to BPF [122] [123].
• Landlock: Landlock is a BPF-based security module that provides fine-grained access
control to kernel resources using BPF [124]. One example use case is to restrict access to
subsets of a file system based on a BPF inode map, which can be updated from user space.
 KRSI: Kernel Runtime Security Instrumentation is a new LSM from Google for extensible
auditing and enforcement. It uses a new BPF program type, BPF_PROG_TYPE_KRSI [186].
A new BPF helper, bpf_send_signal(), should be included in the upcoming Linux 5.3 release [125].
This will allow a new type of enforcement program that can send SIGKILL and other signals to
eana snotaad a ue duooas upau snotm auoe sueond d wo sassaoud
nq Xrpqesauna e saap 6quo pou geg urestord aoengdq e aungeun 'agung agdurexa uooap
immediately kills the process using it. For example:
---
## Page 530
11.1 Background
493
}/Z == sbetg /proc/sys/kernel/unprivileged_bpf_disabled
This is a one-time shot: setting this tunable back to zero will be rejected. The following sysctls can
also be set using similar commands.
net.core.bpf_jit_enable enables the just-in-time BPF compiler. This improves both performance
and security. As a mitigation for the Spectre v2 vulnerability, a CONFIG_BPF_JIT_ALWAYS_ON
option was added to the kernel to permanently enable the JIT compiler, and to compile-out the
BPF interpreter. Possible settings (in Linux 5.2) [127]:
 0: Disable JIT (default)
* 1: Enable JIT
 2: Enable JIT and write compiler debug traces to the kernel log (this setting should be used
for debugging only, not in production)
This has been enabled by default at companies including Neflix and Facebook. Note that the JIT
is processor-architecture dependent. The Linux kernel comes with BPF JIT compilers for the vast
majority of supported architectures, including x86_64, arm64, ppc64, s390x, sparc64, and even
mips64 and riscv. While the x86_64 and arm64 compilers are feature-complete and battle tested
in production, others might not be as yet.
net.core.bpf_jit_harden can be set to one to enable addlitional protections, including mitigation
against JIT spraying attacks, at the cost of performance [129]. Possible settings (in Linux 5.2) [127]:
·0: Disable JIT hardening (default)
• 1: Enable JIT hardening for unprivileged users only
• 2: Enable JIT hardening for all users
pad so sse/od ea ste 1f a pdo au sasodxa sseudqaooa
users, providing symbols to aid debugging [130]. If bpf_jit_harden is enabled, this is dlisabled.
---
## Page 532
11.2 BPF Tools
495
net.core.bpf_jit_limit sets a limit in bytes for module memory that can be consumed. Once
the limit is reached, unprivileged user requests are blocked and redirected to the interpreter,
if compiled in.
For more on BPF hardening, see the Cilium BPF reference guide section on hardening, written by
BPF maintainer Daniel Borkmann [131].
11.1.4 Strategy
Here is a suggested strategy for the security analysis of system activity not already covered by
other BPF tools:
1. Check whether there are tracepoints or USDT probes available to instrument the activity.
2. Check whether ISM kernel hooks can be traced: these begin with security_"
3. Use kprobes/uprobes as appropriate to instrument the raw code.
11.2
BPF Tools
Appications
helinn
petoids
System Call Interface
VFS
Sockets
File Systems
TCPUDP
Scheduler
Volume Manager
IP
Virtual
Block Device
Ethermet
Device Drivers
Figure 11-2 BPF tools for security analysis
These tools are either from the BCC and bpftrace repositories covered in Chapters 4 and 5, or were
Created for this book. Table 11-1 lists the origins of these tools (BT is short for bpftrace).
---
## Page 533
496
Chapter 11 Security
Table 11-1
Security-Related Tools
Tool
Source
Description
execsnoop
BCC/BT
Syscalls
List new process execution
elfsnoop
Book
Kernel
Show ELF fle loads
modsnoop
Book
Kernel
Show kemel module loads
bashread1ine
BCC/BT
bash
List entered bash shell commands
she11snoop
Book
shells
Mirror shell output
ttysnoop
BCC/book
TTY
Mirror tty output
doousuedo
BCC/BT
Syscalls
List files opened
eperm
Book
Syscalls
Count failed EPERM and EACCES syscalls
tcpconnect
BCC/BT
TCP
Trace outbound TCP connections (active)
tcpaccept
BCC/BT
TCP
Trace inbound TCP connections (passive)
tcpreset
Book
TCP
Show TCP send resets: port scan detection
capab1e
BCC/BT
Secufty
Trace kernel security capability checks
se tuids
Book
Syscalls
Trace the setuid syscalls: privilege escalation
For the tools from BCC and bpftrace, see their repositories for full and updated lists of tool options and
capabilities. Some of the following tools were introduced in earlier chapters and are recapped here.
Also refer to other chapters for more observability into any subsystem, especially network connec-
tions in Chapter 10, file usage in Chapter 8, and software execution in Chapter 6.
11.2.1
execsnoop