## 快速入门PostgreSQL应用开发与管理 - 3 访问数据  
##### [TAG 31](../class/31.md)
### 作者                                                             
digoal                                                     
### 日期                                                                                                                         
2017-04-11                                                   
### 标签                                                      
PostgreSQL , Linux    
----                                                                                                                      
## 背景     
在线SQL平台  
http://www.sqlfiddle.com/  
## 本章大纲
### 1. 使用PSQL  
### 2. 使用Select语句  
### 3. 使用游标  
### 4. 行表达式  
### 5. with和递归查询  
### 6. 执行DML\DDL\DCL  
### 7. 选择行  
### 8. 使用序列  
### 9. 使用默认值  
### 10. 生成数据  
### 11. 检查空值（NULL）  
### 12. 时间和日期  
### 13. 多个表协同工作
## 第一章 : 访问数据  
### 1. 使用PSQL  
psql 是PostgreSQL软件包中的命令行工具，可以连接数据库，执行SQL。  
psql 详细用法参考  
```  
psql --help  
or  
man psql  
```  
psql的选项  
```  
psql --help  
psql is the PostgreSQL interactive terminal.  
Usage:  
  psql [OPTION]... [DBNAME [USERNAME]]  
General options:  
  -c, --command=COMMAND    run only single command (SQL or internal) and exit  
  -d, --dbname=DBNAME      database name to connect to (default: "postgres")  
  -f, --file=FILENAME      execute commands from file, then exit  
  -l, --list               list available databases, then exit  
  -v, --set=, --variable=NAME=VALUE  
                           set psql variable NAME to VALUE  
                           (e.g., -v ON_ERROR_STOP=1)  
  -V, --version            output version information, then exit  
  -X, --no-psqlrc          do not read startup file (~/.psqlrc)  
  -1 ("one"), --single-transaction  
                           execute as a single transaction (if non-interactive)  
  -?, --help[=options]     show this help, then exit  
      --help=commands      list backslash commands, then exit  
      --help=variables     list special variables, then exit  
Input and output options:  
  -a, --echo-all           echo all input from script  
  -b, --echo-errors        echo failed commands  
  -e, --echo-queries       echo commands sent to server  
  -E, --echo-hidden        display queries that internal commands generate  
  -L, --log-file=FILENAME  send session log to file  
  -n, --no-readline        disable enhanced command line editing (readline)  
  -o, --output=FILENAME    send query results to file (or |pipe)  
  -q, --quiet              run quietly (no messages, only query output)  
  -s, --single-step        single-step mode (confirm each query)  
  -S, --single-line        single-line mode (end of line terminates SQL command)  
Output format options:  
  -A, --no-align           unaligned table output mode  
  -F, --field-separator=STRING  
                           field separator for unaligned output (default: "|")  
  -H, --html               HTML table output mode  
  -P, --pset=VAR[=ARG]     set printing option VAR to ARG (see \pset command)  
  -R, --record-separator=STRING  
                           record separator for unaligned output (default: newline)  
  -t, --tuples-only        print rows only  
  -T, --table-attr=TEXT    set HTML table tag attributes (e.g., width, border)  
  -x, --expanded           turn on expanded table output  
  -z, --field-separator-zero  
                           set field separator for unaligned output to zero byte  
  -0, --record-separator-zero  
                           set record separator for unaligned output to zero byte  
Connection options:  
  -h, --host=HOSTNAME      database server host or socket directory (default: "127.0.0.1")  
  -p, --port=PORT          database server port (default: "1921")  
  -U, --username=USERNAME  database user name (default: "postgres")  
  -w, --no-password        never prompt for password  
  -W, --password           force password prompt (should happen automatically)  
For more information, type "\?" (for internal commands) or "\help" (for SQL  
commands) from within psql, or consult the psql section in the PostgreSQL  
documentation.  
Report bugs to .  
```  
使用psql连接数据库例子  
```  
psql -h 127.0.0.1 -p 1921 -U postgres -d postgres  
psql (9.6.1)  
Type "help" for help.  
postgres=#   
```  
### 2. 使用Select语句  
psql 支持输出帮助文档，例如select 子句的语法  
```  
postgres=# \h select  
Command:     SELECT  
Description: retrieve rows from a table or view  
Syntax:  
[ WITH [ RECURSIVE ] with_query [, ...] ]  
SELECT [ ALL | DISTINCT [ ON ( expression [, ...] ) ] ]  
    [ * | expression [ [ AS ] output_name ] [, ...] ]  
    [ FROM from_item [, ...] ]  
    [ WHERE condition ]  
    [ GROUP BY grouping_element [, ...] ]  
    [ HAVING condition [, ...] ]  
    [ WINDOW window_name AS ( window_definition ) [, ...] ]  
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]  
    [ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]  
    [ LIMIT { count | ALL } ]  
    [ OFFSET start [ ROW | ROWS ] ]  
    [ FETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY ]  
    [ FOR { UPDATE | NO KEY UPDATE | SHARE | KEY SHARE } [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ] [...] ]  
where from_item can be one of:  
    [ ONLY ] table_name [ * ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
                [ TABLESAMPLE sampling_method ( argument [, ...] ) [ REPEATABLE ( seed ) ] ]  
    [ LATERAL ] ( select ) [ AS ] alias [ ( column_alias [, ...] ) ]  
    with_query_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
    [ LATERAL ] function_name ( [ argument [, ...] ] )  
                [ WITH ORDINALITY ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
    [ LATERAL ] function_name ( [ argument [, ...] ] ) [ AS ] alias ( column_definition [, ...] )  
    [ LATERAL ] function_name ( [ argument [, ...] ] ) AS ( column_definition [, ...] )  
    [ LATERAL ] ROWS FROM( function_name ( [ argument [, ...] ] ) [ AS ( column_definition [, ...] ) ] [, ...] )  
                [ WITH ORDINALITY ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
    from_item [ NATURAL ] join_type from_item [ ON join_condition | USING ( join_column [, ...] ) ]  
and grouping_element can be one of:  
    ( )  
    expression  
    ( expression [, ...] )  
    ROLLUP ( { expression | ( expression [, ...] ) } [, ...] )  
    CUBE ( { expression | ( expression [, ...] ) } [, ...] )  
    GROUPING SETS ( grouping_element [, ...] )  
and with_query is:  
    with_query_name [ ( column_name [, ...] ) ] AS ( select | values | insert | update | delete )  
TABLE [ ONLY ] table_name [ * ]  
```  
目标、源 别名  
```  
postgres=# select 'nihao' as col_alias -- 列别名  
           from pg_class as t 源别名  
           limit 1;  
 col_alias   
-----------  
 nihao  
(1 row)  
```  
select 目标  
字段、函数、表达式、子查询  
```  
postgres=# select relname, -- 列名  
                  now(), -- 函数  
                  upper(relname)||'__digoal',   -- 表达式  
                  (select 1+2+3)  -- 子查询  
                  from pg_class limit 2;   
     relname     |              now              |        ?column?         | ?column?   
-----------------+-------------------------------+-------------------------+----------  
 pg_type         | 2017-04-11 15:09:45.440779+08 | PG_TYPE__digoal         |        6  
 pg_toast_187550 | 2017-04-11 15:09:45.440779+08 | PG_TOAST_187550__digoal |        6  
(2 rows)  
```  
select 源  
表、视图、物化视图、函数、表达式、子查询  
```  
select * from pg_class;  
select * from 视图;  
select * from 物化视图;  
select * from 函数(参数);  -- 如果函数返回的是record，需要格式化  
select * from 函数(参数) as t(列1 类型1, ... ,列n 类型n);  -- 如果函数返回的是record，需要格式化  
select 函数(参数);  
select 函数(参数) as t(列1 类型1, ... ,列n 类型n);  
select 表达式;  
select (子查询) as t;  
```  
select where条件  
```  
postgres=# select relname,reltuples from pg_class where relname='pg_class';  
 relname  | reltuples   
----------+-----------  
 pg_class |       360  
(1 row)  
```  
select 排序  
```  
postgres=# select oid,relname from pg_class order by oid limit 1;  
 oid |              relname                
-----+-----------------------------------  
 112 | pg_foreign_data_wrapper_oid_index  
(1 row)  
```  
select 随机排序  
```  
postgres=# select oid,relname from pg_class order by random() limit 1;  
  oid  |  relname    
-------+-----------  
 13124 | sql_parts  
(1 row)  
```  
select 分组  
```  
postgres=# select relkind,count(*) from pg_class group by relkind;  
 relkind | count   
---------+-------  
 f       |     1  
 c       |     2  
 t       |    28  
 S       |     3  
 i       |   149  
 r       |    80  
 v       |   115  
(7 rows)  
```  
select 限制输出条数  
```  
postgres=# select relkind,count(*) from pg_class group by relkind limit 1;  
 relkind | count   
---------+-------  
 f       |     1  
(1 row)  
```  
select 位移  
```  
postgres=# select relkind,count(*) from pg_class group by relkind order by relkind offset 1 limit 1;  
 relkind | count   
---------+-------  
 c       |     2  
(1 row)  
```  
select 当前表以及所有继承表  
```  
postgres=# create table p(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# create table c1(id int, info text, crt_time timestamp) inherits(p);  
NOTICE:  merging column "id" with inherited definition  
NOTICE:  merging column "info" with inherited definition  
NOTICE:  merging column "crt_time" with inherited definition  
CREATE TABLE  
postgres=# create table c2(id int, info text, crt_time timestamp) inherits(p);  
NOTICE:  merging column "id" with inherited definition  
NOTICE:  merging column "info" with inherited definition  
NOTICE:  merging column "crt_time" with inherited definition  
CREATE TABLE  
postgres=# create table cc1(id int, info text, crt_time timestamp) inherits(c1);  
NOTICE:  merging column "id" with inherited definition  
NOTICE:  merging column "info" with inherited definition  
NOTICE:  merging column "crt_time" with inherited definition  
CREATE TABLE  
postgres=# insert into p values (1,'p',now());  
INSERT 0 1  
postgres=# insert into c1 values (1,'c1',now());  
INSERT 0 1  
postgres=# insert into c2 values (1,'c2',now());  
INSERT 0 1  
postgres=# insert into cc1 values (1,'cc1',now());  
INSERT 0 1  
postgres=# select * from p;  
 id | info |          crt_time            
----+------+----------------------------  
  1 | p    | 2017-04-11 15:37:01.157824  
  1 | c1   | 2017-04-11 15:37:05.635794  
  1 | c2   | 2017-04-11 15:37:11.271823  
  1 | cc1  | 2017-04-11 15:37:16.177828  
(4 rows)  
postgres=# select tableoid::regclass,* from p;  
 tableoid | id | info |          crt_time            
----------+----+------+----------------------------  
 p        |  1 | p    | 2017-04-11 15:37:01.157824  
 c1       |  1 | c1   | 2017-04-11 15:37:05.635794  
 c2       |  1 | c2   | 2017-04-11 15:37:11.271823  
 cc1      |  1 | cc1  | 2017-04-11 15:37:16.177828  
(4 rows)  
```  
select 当前表  
```  
postgres=# select tableoid::regclass,* from  only p;  
 tableoid | id | info |          crt_time            
----------+----+------+----------------------------  
 p        |  1 | p    | 2017-04-11 15:37:01.157824  
(1 row)  
postgres=# select tableoid::regclass,* from  only c1;  
 tableoid | id | info |          crt_time            
----------+----+------+----------------------------  
 c1       |  1 | c1   | 2017-04-11 15:37:05.635794  
(1 row)  
```  
### 3. 使用游标  
创建游标  
```  
postgres=# begin;  
BEGIN  
postgres=# \h declare  
Command:     DECLARE  
Description: define a cursor  
Syntax:  
DECLARE name [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ]  
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR query  
postgres=# declare cur1 cursor for select oid,relname,relkind from pg_class;  
DECLARE CURSOR  
```  
fetch 游标  
```  
postgres=# \h fetch  
Command:     FETCH  
Description: retrieve rows from a query using a cursor  
Syntax:  
FETCH [ direction [ FROM | IN ] ] cursor_name  
where direction can be empty or one of:  
    NEXT  
    PRIOR  
    FIRST  
    LAST  
    ABSOLUTE count  
    RELATIVE count  
    count  
    ALL  
    FORWARD  
    FORWARD count  
    FORWARD ALL  
    BACKWARD  
    BACKWARD count  
    BACKWARD ALL  
postgres=# fetch 2 from cur1;  
  oid   |     relname     | relkind   
--------+-----------------+---------  
   1247 | pg_type         | r  
 187553 | pg_toast_187550 | t  
(2 rows)  
```  
关闭游标  
```  
postgres=# \h close  
Command:     CLOSE  
Description: close a cursor  
Syntax:  
CLOSE { name | ALL }  
postgres=# close cur1;  
CLOSE CURSOR  
```  
### 4. 行表达式  
行表达式  
```  
postgres=# select * from (values(1,'test1'),(2,'test2'),(3,'test3')) as t(id, info);  
 id | info    
----+-------  
  1 | test1  
  2 | test2  
  3 | test3  
(3 rows)  
```  
### 5. with和递归查询  
with语句  
```  
postgres=# with   
a as (select * from (values(1,'test1'),(2,'test2'),(3,'test3')) as t(id, info)),  
b as (select oid,relname,relkind from pg_class)   
select a.*,b.* from a,b where a.id=mod(b.oid::int,3)+1;  
 id | info  |  oid   |                    relname                    | relkind   
----+-------+--------+-----------------------------------------------+---------  
  3 | test3 |   1247 | pg_type                                       | r  
  3 | test3 | 187553 | pg_toast_187550                               | t  
  3 | test3 | 186725 | new_type                                      | c  
  2 | test2 | 187555 | pg_toast_187550_index                         | i  
  3 | test3 | 187550 | test                                          | r  
  3 | test3 | 187559 | pg_toast_187556                               | t  
  2 | test2 | 187561 | pg_toast_187556_index                         | i  
```  
递归语句  
![pic](20170411_03_pic_002.jpg)   
![pic](20170411_03_pic_003.jpg)  
例子  
![pic](20170411_03_pic_001.jpg)  
```  
postgres=# with recursive a as (select * from (values (1,2),(2,3),(3,4),(4,100),(2,101),(101,104),(3,102),(4,103),(103,105)) as t(id1,id2)),   
tmp as (  
select * from a where id2=105  
union all  
select a.* from a join tmp on (a.id2=tmp.id1)  
)  
select * from tmp;  
 id1 | id2   
-----+-----  
 103 | 105  
   4 | 103  
   3 |   4  
   2 |   3  
   1 |   2  
(5 rows)  
```  
### 6. 执行DML\DDL\DCL  
插入  