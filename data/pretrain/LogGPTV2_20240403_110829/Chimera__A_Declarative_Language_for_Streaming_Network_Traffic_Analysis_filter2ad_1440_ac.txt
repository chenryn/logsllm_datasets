The ﬁnal
type of function available in Chimera is
an apply function. An apply function is a method
on a structured object that takes another function as
a ﬁrst-class object and applies it
to items in the
structured object. How the argument is applied de-
pends on the particular function. Apply functions
can take normal arguments in parentheses, but use a
curly bracket syntax for their function argument (e.g.,
[list].apply(){}) to clearly dif-
ferentiate them from other function types. Arguments
can be passed to inner functions using the symbols
$, $2, $3, etc.
(“1" omitted from ﬁrst argument for
brevity). This lets user-deﬁned apply functions pass an
arbitrary number of arguments.
It also allows the in-
ner functions to be methods, static functions, or aggre-
gate functions (e.g., [list].apply{$.strlen()} or
[list].apply{count($)}). This syntax is slightly
different from other languages like Javascript, but we felt
it to be more concise and easy to read in this context.
Chimera does support multiple levels of apply func-
tions. When there are multiple levels, however, inner
functions cannot directly reference parent arguments.
First-class functions in Chimera are not full closures.
Apply functions can be deﬁned by the user, but a
few examples are provided here to illustrate the concept.
Note that when iterating over a map instead of a list, each
key-value pair is represented as two-item [key, value] list.
• foreach – Apply the function to each item in the
list and update it with the output value. Example:
[list].foreach{$.substr(3)}
• foridx(index) – Apply the
function to the
item in the list at
the given index and up-
date it with the output value.
Example:
[map].foreach{$.foridx(0){$.substr(3)}}
• iter – Iteratively apply the function to each item in
the list and return the ﬁrst value that is not NULL.
Example: [list].iter{$.match(’as.*df’)}
• iterall – Apply the function to all items in the
list and return the last output value. Example:
[list].iterall{count($)}
• ﬁlter – Apply the
the
list
evaluates
in
it
[map].filter{$.first().strlen() > 3}
function to each item
for which
or NULL. Example:
• ﬁnd – Apply the function to each item in
the list and return the ﬁrst
item for which it
does not evaluate to false or NULL. Example:
[map].find{$.first() == ’A’}
and
to
discard
items
false
In section 2, we introduced several attack scenar-
ios that require advanced analysis capabilities to detect.
Now that we have presented the Chimera language, we
show here how it can be used to implement analytics
for these scenarios. While these scenarios demonstrate
many of Chimera’s features and capabilities, they are by
no means a complete exposition of its power. The goal
here is to provide examples of how the language can be
used in practice that serve as a starting point for future
work.
4.1 Sidejacking
As you may recall, sidejacking involves searching for
multiple clients that are using the same session identiﬁer
for a web service. For simplicity, clients can be repre-
sented as an IP address and User-Agent pair. Now that
we have an understanding of Chimera’s query model, we
can break down the analysis task into some key facts:
ID as the GROUP BY key.
• This query requires aggregation using the session
• The session ID is inside of a key-value list in the
“Cookie" header and will need to be broken out of
the list.
• Detection requires counting more than one distinct
client. This will be the UNTIL trigger condition.
This leads us to the following query, which cleanly im-
plements sidejacking detection and is much more shorter
than the previous Bro implementation [26] (though the
Bro implementation contains a few more additional fea-
tures not included here):
SELECT
list_agg(distinct(concat(
[packets].[srcip], ’:’,
[headers].[User-Agent])))
AS clientlist
[headers].[Cookie].split(’;’).
foreach{$.split(’=’)}.
find{$.first() == ’SID’}.last()
AS sessionid
FROM http
WHERE [sessionid] != NULL
GROUP BY [sessionid]
UNTIL [clientlist].size() > 1
The ﬁrst expression in the SELECT statement extracts
the source IP address from the ﬁrst packet in the con-
nection (HTTP messages are comprised of one or more
packets), ﬁnds the value of the “User-Agent" header (or
NULL if it is missing), and concatenates the two together
to form a client identiﬁer string. Because [packets] is a
list of map objects, the bracket operator that follows in-
cludes an implicit iteration, thus extracting [srcip] from
the ﬁrst packet in the list. The query then passes this
string to the aggregate function distinct, which will
check each incoming value to see if it has occurred be-
fore. If not, it will pass through the value, otherwise it
will output NULL. The distinct function can be imple-
mented with a Bloom ﬁlter, or with a hash table if more
accuracy is desired. Our implementation of distinct in
the Bro language currently uses a hash table. Finally, the
list_agg aggregate function will take each non-NULL
input item and append it to a list.
The next expression in the SELECT statement pulls
out the session ID from the “Cookie" header.
If there
is more than one “Cookie" header, then the implicit call
to get() made by the square brackets will just grab the
ﬁrst one. The expression then splits the the cookie header
value up into a list of strings separated by the ’;’ charac-
ter. Next, it iterates over this list with foreach, further
splitting each string using the ’=’ character into a key-
value list. Finally, the find function extracts the ﬁrst
pair in the list where its ﬁrst item is the string ’SID’, and
last pulls out the corresponding value. If at any point
during this chain of functions there is a NULL value, then
processing will stop and the result will be NULL.
The remainder of the query is pretty straightforward.
The WHERE clause ﬁlters out only HTTP messages that
have Cookie headers and session IDs. GROUP BY ag-
gregates based on the session ID, and UNTIL will trigger
an output whenever it sees more than one client using the
same session ID.
4.2 Malicious Domains
There were several DNS features presented earlier in sec-
tion 2.2. These features each perform some aggregate
computation on DNS responses.
In the Chimera lan-
guage, lists of objects can be split into one tuple for each
item using the SPLIT command. DNS responses contain
lists of answer records in a single DNS packet, which
can be split up into individual answer records. How-
ever, Chimera also includes a schema for individual re-
source records (essentially pre-split) that corresponds to
resource record events in the Bro language. The queries
below use the DNS resource record schema out of con-
venience, but could use the DNS schema and SPLIT as
well. Here are queries for each of the listed features:
4.2.1 Number of distinct IP addresses per domain
SELECT count_distinct([aip]), [name]
FROM dns_rr
WHERE [aip] != NULL
GROUP BY [name]
UNTIL GLOBAL
nextwindow([packets].[time], 86400)
of distinct items can be done more efﬁciently than by
keeping a list and computing its size. This query also
uses an aggregate function nextwindow to compute
when the packet timestamp has transitioned into the next
86400-second (one day) time window.
It essentially
performs integer division and change detection. When
this occurs,
the entire table will be ﬂushed and the
computation will restart.
4.2.2 Number of domains that share the same IP
SELECT [name], [ip], [count]
FROM (
SELECT
[aip] AS ip
list_agg(distinct([name])) AS names
count_distinct([name]) AS count
FROM dns_rr
WHERE [aip] != NULL
GROUP BY [aip]
UNTIL GLOBAL
nextwindow([packets].[time], 86400)
) SPLIT names AS name, nameidx
This query will keep a list of domains for each IP ad-
dress, maintain a count of its size, and then output each
domain along with an IP address and count every day.
As you may have noticed, this query does not precisely
quantify the "number of domains that share the same IP
address" because a domain name can have multiple IPs,
and the original EXPOSURE paper was not clear about
whether all the domains on all the IPs should be counted
[5]. This query will actually output multiple counts for
each domain name, one for each IP address that it uses.
This is an example where having a common query lan-
guage would make explicit analytic descriptions much
easier, allowing researchers to more precisely describe
their techniques.
4.2.3 Average TTL value
SELECT avg([ttl]), [name]
FROM dns_rr
WHERE [ttl] != NULL
GROUP BY [name]
UNTIL GLOBAL
nextwindow([packets].[time], 86400)
This query is very similar to the ﬁrst, except that it
employs the avg (average) aggregate function instead of
count_distinct. Another point of ambiguity in EX-
POSURE is whether the TTL values should be counted
for all types of resource records (as is done above), or
just for A records.
4.2.4 Number of TTL value changes
One
count_distinct function.
thing to note
about
this query is
the
Counting the number
SELECT count(), [name]
FROM (
SELECT [name]
FROM dns_rr
WHERE [ttl] != NULL
GROUP BY [name]
UNTIL
last([ttl]) != last([ttl], 2, true) &&
last([ttl], 2, true) != NULL
)
GROUP BY [name]
UNTIL GLOBAL
nextwindow([packets].[time], 86400)
This query uses a nested statement with two instances
of the aggregate function last. In its ﬁrst form, last
just outputs the current tuple value. The second call to
last([ttl], 2, true) actually outputs the second-
to-last value (2 parameter) and persists across windows
(true parameter). For the sequence {A, B, A}, the UN-
TIL statement will become true and ﬂush the result after
B arrives. Because the second call to last persists, it
will hold on to the B value and output another change
when the next A arrives. This is an example of aggregate
functions that maintain state across windows.
4.3 DNS Tunnels
The DNS tunnel detection algorithm described in sec-
tion 2.3 works by identifying responses that never have
follow-up connections. Here are some key facts about
this analytic:
• DNS responses may contain several A records, but
only the ﬁrst one will be likely to receive a con-
nection. It is thus better to use the whole-message
DNS schema rather the individual resource record
schema.
• We only want to count responses that do not have
matching packets, so we need to use an EXCLU-
SIVE LEFT SINGLE JOIN.
• Because individual false positives may occur, we
should apply a per-client threshold to unmatched re-
sponses, which will require a GROUP BY using the
client as the key.
Here is a query that implements DNS tunnel detection:
SELECT
[dns].[packets].[dstip] AS client,
last([dns].[packets].[time]) AS start,
first([dns].[packets].[time]) AS end
FROM dns EXCLUSIVE LEFT SINGLE JOIN ip_packet
ON [answers].[aip] EQUALS [dstip]
WINDOW [new].[packets].[time] -
[old].[packets].[time]  100
HAVING [end] - [start] < 3600
This query counts the number of DNS answers with
an A-record IP address that have no matching packets
within a ﬁve-minute time window. It then groups those
unmatched responses by their destination IP (the client
who made the request) and applies a threshold of 100 re-
sponses. Note that the threshold is applied in an UNTIL
clause. This makes it so that detection happens imme-
diately when the threshold is reached, instead of having
to wait for the end of a time window. The timestamps
of the ﬁrst and last responses can then be checked in the
HAVING clause to make sure they occurred within some
reasonable amount of time (one hour in this case). This
query demonstrates the latency beneﬁt from using UN-
TIL instead of a time- or count-based window like in ex-
isting streaming databases.
4.4 Phishing/Spam Detection
Section 2.4 describes a method for detecting spam and
phishing e-mails based on ﬁltering SMTP messages with
“new" mail transfer agents (MTAs) and then counting the
number of recipients to which the new MTAs send e-
mail in the ﬁrst 24 hours. Here is a Chimera query that
implements this analytic:
CREATE VIEW mtasmtp AS
SELECT *
FROM smtp SPLIT [headers].
filter{$.first() == ’Received’}.
foreach{$.second().regex_extract
(’.*by ([^ ]*)’)} AS mta, midx;
SELECT
merge([b].[headers].[To].split(’,’),
[b].[headers].[Cc].split(’,’),
[b].[headers].[Bcc].split(’,’)).
iterall{count_distinct($.strip())}
AS recipient_count,
[a].[mta] AS mta
FROM (
SELECT *
FROM mtasmtp