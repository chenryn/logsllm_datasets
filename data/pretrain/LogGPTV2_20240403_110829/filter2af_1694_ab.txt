设置当前线程正确的script context
    CHAKRA_API JsSetCurrentContext(_In_ JsContextRef newContext)
    {
        VALIDATE_ENTER_CURRENT_THREAD(); //检查当前输入的线程，xia
        return GlobalAPIWrapper([&] (TTDRecorder& _actionEntryPopper) -> JsErrorCode {
            JsrtContext *currentContext = JsrtContext::GetCurrent();  //获取当前JsrtContext
            Recycler* recycler = currentContext != nullptr ? currentContext->GetScriptContext()->GetRecycler() : nullptr;   //返回allocators的类型
    #if ENABLE_TTD
            Js::ScriptContext* newScriptContext = newContext != nullptr ? static_cast(newContext)->GetScriptContext() : nullptr;
            Js::ScriptContext* oldScriptContext = currentContext != nullptr ? static_cast(currentContext)->GetScriptContext() : nullptr;
            if(newScriptContext == nullptr)
            {
                if(oldScriptContext == nullptr)
                {
                    ; //如果新的ScriptContext、旧的ScriptContext都为空则不需要操作
                }
                else
                {
                    if(oldScriptContext->IsTTDRecordModeEnabled()) //检查TTD系统是否启动
                    {
                        //already know newScriptContext != oldScriptContext so don't check again
                        if(oldScriptContext->ShouldPerformRecordAction())  //用来检查此代码是否在记录中，并且此代码是否是用户的应用程序执行的
                        {
                            oldScriptContext->GetThreadContext()->TTDLog->RecordJsRTSetCurrentContext(_actionEntryPopper, nullptr);
                        }
                        oldScriptContext->GetThreadContext()->TTDContext->SetActiveScriptContext(nullptr);
                    }
                }
            }
            else
            {
                if(newScriptContext->IsTTDRecordModeEnabled())
                {
                    if(newScriptContext != oldScriptContext && newScriptContext->ShouldPerformRecordAction())
                    {
                        newScriptContext->GetThreadContext()->TTDLog->RecordJsRTSetCurrentContext(_actionEntryPopper, newScriptContext->GetGlobalObject());
                    }
                    newScriptContext->GetThreadContext()->TTDContext->SetActiveScriptContext(newScriptContext);    //如果通过了各种调试设置、并且newScriptContext为空的时候，将newScriptContext设置为活跃状态
                }
            }
    #endif
            //各种检测报错抛出异常
            if (currentContext && recycler->IsHeapEnumInProgress())
            {  //A heap enumeration is currently underway in the script context.
                return JsErrorHeapEnumInProgress;
            }
            else if (currentContext && currentContext->GetRuntime()->GetThreadContext()->IsInThreadServiceCallback())
            {  //目前正在进行线程服务回调。
                return JsErrorInThreadServiceCallback;
            }
            if (!JsrtContext::TrySetCurrent((JsrtContext *)newContext))
            {  //在错误的线程上调用了Host API。
                return JsErrorWrongThread;
            }
            return JsNoError;
        });
    }
## 执行语句
目录：\lib\Jsrt\Jsrt.cpp
**JsRunScript** :
执行一个Script
    CHAKRA_API JsRunScript(_In_z_ const WCHAR * script, _In_ JsSourceContext sourceContext,
        _In_z_ const WCHAR *sourceUrl, _Out_ JsValueRef * result)
    {
        return RunScriptCore(script, sourceContext, sourceUrl, false,
            JsParseScriptAttributeNone, false /*isModule*/, result);
    }
参数：
  * **script**
需要执行的script
  * **sourceContext**
标识脚本的cookie
  * **sourceUrl**
script的位置
  * **result**
存储script的结果，可以为NULL
实际上执行真正的 **RunScriptCore** ()还要经过一层：
    JsErrorCode RunScriptCore(const char *script, JsSourceContext sourceContext,
        const char *sourceUrl, bool parseOnly, JsParseScriptAttributes parseAttributes,
        bool isSourceModule, JsValueRef *result)     //parseOnly == true;
    {
        utf8::NarrowToWide url((LPCSTR)sourceUrl); //字符长度检查
        if (!url)
        {
            return JsErrorOutOfMemory;
        }
        return RunScriptCore(nullptr, reinterpret_cast(script), strlen(script),
            LoadScriptFlag_Utf8Source, sourceContext, url, parseOnly, parseAttributes,
            isSourceModule, result);
    }
    JsErrorCode RunScriptCore(const WCHAR *script, JsSourceContext sourceContext,
        const WCHAR *sourceUrl, bool parseOnly, JsParseScriptAttributes parseAttributes,
        bool isSourceModule, JsValueRef *result)
    {  //NULL
        return RunScriptCore(nullptr, reinterpret_cast(script),
            wcslen(script) * sizeof(WCHAR),
            LoadScriptFlag_None, sourceContext, sourceUrl, parseOnly,
            parseAttributes, isSourceModule, result);
    }
接下来是真正执行内容的 **RunScriptCore** :
    JsErrorCode RunScriptCore(JsValueRef scriptSource, const byte *script, size_t cb,
        LoadScriptFlag loadScriptFlag, JsSourceContext sourceContext,
        const WCHAR *sourceUrl, bool parseOnly, JsParseScriptAttributes parseAttributes,
        bool isSourceModule, JsValueRef *result)
    {
        Js::JavascriptFunction *scriptFunction;
        CompileScriptException se;
        JsErrorCode errorCode = ContextAPINoScriptWrapper([&](Js::ScriptContext * scriptContext, TTDRecorder& _actionEntryPopper) -> JsErrorCode {
            PARAM_NOT_NULL(script);
            PARAM_NOT_NULL(sourceUrl);
            SourceContextInfo * sourceContextInfo = scriptContext->GetSourceContextInfo(sourceContext, nullptr);
            if (sourceContextInfo == nullptr)
            {
                sourceContextInfo = scriptContext->CreateSourceContextInfo(sourceContext, sourceUrl, wcslen(sourceUrl), nullptr);
            }
            const int chsize = (loadScriptFlag & LoadScriptFlag_Utf8Source) ?
                                sizeof(utf8char_t) : sizeof(WCHAR);
            //create for every source buffer passed by host
            SRCINFO si = {  
                /* sourceContextInfo   */ sourceContextInfo,
                /* dlnHost             */ 0,
                /* ulColumnHost        */ 0,
                /* lnMinHost           */ 0,
                /* ichMinHost          */ 0,
                /* ichLimHost          */ static_cast(cb / chsize), // OK to truncate since this is used to limit sourceText in debugDocument/compilation errors.
                /* ulCharOffset        */ 0,
                /* mod                 */ kmodGlobal,
                /* grfsi               */ 0
            };
            Js::Utf8SourceInfo* utf8SourceInfo = nullptr;
            if (result != nullptr)
            {
                loadScriptFlag = (LoadScriptFlag)(loadScriptFlag | LoadScriptFlag_Expression);
            }
            bool isLibraryCode = (parseAttributes & JsParseScriptAttributeLibraryCode) == JsParseScriptAttributeLibraryCode;
            if (isLibraryCode)
            {
                loadScriptFlag = (LoadScriptFlag)(loadScriptFlag | LoadScriptFlag_LibraryCode);
            }
            if (isSourceModule)
            {
                loadScriptFlag = (LoadScriptFlag)(loadScriptFlag | LoadScriptFlag_Module);
            }
    #if ENABLE_TTD
                                          ...
    #endif
           //loadScript函数中又经过一系列安全检查之后，进入LoadScriptInternal函数，里面开始进行ParseTree操作
            scriptFunction = scriptContext->LoadScript(script, cb,
                &si, &se, &utf8SourceInfo,
                Js::Constants::GlobalCode, loadScriptFlag, scriptSource);
    #if ENABLE_TTD
                                             ...
    #endif
                                             ...
    //定义某种调试选项
    #ifdef ENABLE_DEBUG_CONFIG_OPTIONS   
                                              ...
    #endif
    #if ENABLE_TTD
                                              ...
    #endif
                 //执行
                Js::Var varResult = scriptFunction->CallRootFunction(args, scriptContext, true);
                if (result != nullptr)
                {
                    *result = varResult;
                }
    #if ENABLE_TTD
                                             ...
    #endif
            }
            return JsNoError;
        });
    }
**JsConvertValueToString** ：
使用标准JavaScript语义将值转换为字符串。
    CHAKRA_API JsConvertValueToString(_In_ JsValueRef value, _Out_ JsValueRef *result)
    {
        PARAM_NOT_NULL(result);
        *result = nullptr;
        if (value != nullptr && Js::JavascriptString::Is(value))
        {
            return ContextAPINoScriptWrapper([&](Js::ScriptContext *scriptContext, TTDRecorder& _actionEntryPopper) -> JsErrorCode {
                PERFORM_JSRT_TTD_RECORD_ACTION(scriptContext, RecordJsRTVarToStringConversion, (Js::Var)value);
                VALIDATE_INCOMING_REFERENCE(value, scriptContext);
                *result = value;
                PERFORM_JSRT_TTD_RECORD_ACTION_RESULT(scriptContext, result);
                return JsNoError;
            });
        }
                                              ...
    }
## 将脚本返回为C++
**JsStringToPointer** ：
检索字符串值的字符串指针。
    CHAKRA_API JsStringToPointer(_In_ JsValueRef stringValue, _Outptr_result_buffer_(*stringLength) const WCHAR **stringPtr, _Out_ size_t *stringLength)
    {
        VALIDATE_JSREF(stringValue);
        PARAM_NOT_NULL(stringPtr);
        *stringPtr = nullptr;
        PARAM_NOT_NULL(stringLength);
        *stringLength = 0;
        if (!Js::JavascriptString::Is(stringValue))
        {
            return JsErrorInvalidArgument;
        }
        return GlobalAPIWrapper_NoRecord([&]() -> JsErrorCode {
            Js::JavascriptString *jsString = Js::JavascriptString::FromVar(stringValue);
            *stringPtr = jsString->GetSz();
            *stringLength = jsString->GetLength();
            return JsNoError;
        });
    }
## 处理runtime
**JsDisposeRuntime** :
    CHAKRA_API JsDisposeRuntime(_In_ JsRuntimeHandle runtimeHandle)
    {
        return GlobalAPIWrapper_NoRecord([&] () -> JsErrorCode {
            VALIDATE_INCOMING_RUNTIME_HANDLE(runtimeHandle);
            JsrtRuntime * runtime = JsrtRuntime::FromHandle(runtimeHandle);
            ThreadContext * threadContext = runtime->GetThreadContext();
            ThreadContextScope scope(threadContext);
            // We should not dispose if the runtime is being used.   
            if (!scope.IsValid() ||
                scope.WasInUse() ||
                (threadContext->GetRecycler() && threadContext->GetRecycler()->IsHeapEnumInProgress()))
            {
                return JsErrorRuntimeInUse;
            }
            else if (threadContext->IsInThreadServiceCallback())
            {
                return JsErrorInThreadServiceCallback;
            }
            // Invoke and clear the callbacks while the contexts and runtime are still available
            {
                Recycler* recycler = threadContext->GetRecycler();
                if (recycler != nullptr)
                {
                    recycler->ClearObjectBeforeCollectCallbacks();
                }
            }
    #ifdef ENABLE_SCRIPT_DEBUGGING
                                             ...
    #endif
            Js::ScriptContext *scriptContext;
            for (scriptContext = threadContext->GetScriptContextList(); scriptContext; scriptContext = scriptContext->next)
            {
    #ifdef ENABLE_SCRIPT_DEBUGGING
                                            ...
    #endif
                scriptContext->MarkForClose();
            }
            // Close any open Contexts.
            // We need to do this before recycler shutdown, because ScriptEngine->Close won't work then.
            runtime->CloseContexts();
    #ifdef ENABLE_SCRIPT_DEBUGGING
                                           ...
    #endif
    #if defined(CHECK_MEMORY_LEAK) || defined(LEAK_REPORT)
            bool doFinalGC = false;
    #if defined(LEAK_REPORT)
            if (Js::Configuration::Global.flags.IsEnabled(Js::LeakReportFlag))
            {
                doFinalGC = true;
            }
    #endif
    #if defined(CHECK_MEMORY_LEAK)
            if (Js::Configuration::Global.flags.CheckMemoryLeak)
            {
                doFinalGC = true;
            }
    #endif
            if (doFinalGC)
            {
                Recycler *recycler = threadContext->GetRecycler();
                if (recycler)
                {
                    recycler->EnsureNotCollecting();
                    recycler->CollectNow();
                    Assert(!recycler->CollectionInProgress());
                }
            }
    #endif
            //释放堆栈等free操作
            runtime->SetBeforeCollectCallback(nullptr, nullptr);
            threadContext->CloseForJSRT();
            HeapDelete(threadContext);     
            HeapDelete(runtime);
            scope.Invalidate();
            return JsNoError;
        });
    }
参考链接：
  * 
  * 
  * 
## 结语
对源码的简单分析和阅读，有些解释直接就丢在代码里了，不对之处望大佬们指出。