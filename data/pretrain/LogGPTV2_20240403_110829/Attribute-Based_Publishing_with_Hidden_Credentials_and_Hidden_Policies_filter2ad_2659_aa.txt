title:Attribute-Based Publishing with Hidden Credentials and Hidden Policies
author:Apu Kapadia and
Patrick P. Tsang and
Sean W. Smith
Attribute-Based Publishing with Hidden Credentials and Hidden Policies∗
Apu Kapadia†‡, Patrick P. Tsang†, Sean W. Smith†
†Department of Computer Science
Dartmouth College
Hanover, NH, USA
‡Institute for Security Technology Studies
Dartmouth College
Hanover, NH, USA
{akapadia, patrick, sws}@cs.dartmouth.edu
Abstract
With Hidden Credentials Alice can send policy-
encrypted data to Bob in such a way that he can decrypt the
data only with the right combination of credentials. Alice
gains no knowledge of Bob’s credentials in the process, and
hence the name “Hidden Credentials.” Research on Hidden
Credential systems has focused on messages sent to single
recipients, where the sender needs to know the recipient’s
pseudonym beforehand, and on Hidden Policies, where Bob
learns as little information as possible about Alice’s pol-
icy for decrypting the message. Current schemes provide
weak policy privacy — with non-interactive schemes, the
recipient can learn parts of the policy, and with interac-
tive schemes based on secure multiparty computation, a
user can try different sets of credentials as input to gain
knowledge of the policy after repeated decryption attempts.
Furthermore, existing schemes do not support policies with
negations efﬁciently. For example, a policy stating “Bob
is not a student” is hard to enforce since Bob can simply
withhold, or not use, his student credential.
We propose a system called PEAPOD (Privacy-
Enhanced Attribute-based Publishing Of Data) that pro-
vides the following properties: (1) Users can securely pub-
lish data protected by attribute-based policies to multiple
possible recipients without requiring interaction between
senders and receivers. This is achieved by using a semi-
trusted server.
(2) The plaintext message and the policy
are completely hidden from the server. (3) Any recipient,
intended or not, learns no other information about a mes-
sage’s policy beyond the number of clauses in policy that
were satisﬁed. Furthermore the recipient is forced to use
all of his or her issued credentials for decryption, and there-
fore cannot mount inference attacks by trying to decrypt the
∗This research was supported in part by the NSF, under grant CNS-
0524695, and the Bureau of Justice Assistance, under grant 2005-DD-BX-
1091. The views and conclusions do not necessarily reﬂect the views of
the sponsors.
(4) Lastly,
message with different subsets of credentials.
since recipients are forced to use all their credentials for
decryption, PEAPOD efﬁciently supports non-monotonic
boolean policies by allowing senders to include negations
in their policies.
1. Introduction
Hidden Credentials [20, 9] were ﬁrst proposed to facil-
itate trustworthy interaction between strangers in open en-
vironments. Using these schemes, Alice encrypts data to a
speciﬁc individual Bob using an attribute-based policy such
as “Bob is a Student or Professor.” Bob can
then decrypt this data if and only if he has the correct com-
bination of credentials to satisfy Alice’s policy. Since Bob
decrypts the message without revealing the result to Alice,
Alice gains no knowledge of Bob’s credentials (hence the
name “Hidden Credentials”). Hidden Credentials preserve
Bob’s privacy since he may consider many of his attributes
to be sensitive information and would like to hide them
from Alice. Current schemes [9, 15] also try to limit what
Bob can learn about Alice’s policy. There could be sev-
eral reasons for this — Alice may want to prevent users
from “gaming” the system, i.e., changing their behavior to
gain access to a message, or inferring which messages are
important based on their policies. For example, attackers
might focus their energy on trying to decrypt messages for
CIA agents if the policy is public knowledge. In some situ-
ations Alice’s policy may reveal private information about
herself, in which case she would like to protect her pri-
vacy against both intended and non-intended recipients of
the message. Ideally, even if Bob is able to decrypt the mes-
sage (i.e., he is an “intended recipient”), he should not learn
anything about the structure of the policy or which of his
credentials were necessary for decryption. Providing pol-
icy privacy against intended recipients, however, has proven
to be difﬁcult. Current non-interactive schemes [20, 9]
achieve partial policy privacy since Bob can learn informa-
tion about sub-expressions of the policy that he satisﬁes.
Bob is able to learn all the “satisfying sets” (where each
satisfying set is a set of credentials that satisﬁes the policy)
that are subsets of his credentials. To close this gap, Frikken
et al. [15] propose an interactive scheme where each party
learns only whether Bob satisﬁed the policy, and whatever
can be inferred from that. If Bob decrypts a message by try-
ing different combinations of credentials, however, he can
still infer which credentials were necessary for decryption
over several repeated decryption attempts. Similarly, other
approaches in trust negotiation [37, 35, 38, 36, 39] such as
oblivious attribute certiﬁcates (OACerts) [24] suffer from
the same drawbacks. Ideally, a system with Hidden Poli-
cies should prevent Bob from inferring information about
the policy over repeated decryption attempts.
Another drawback of previous approaches is that the
sender Alice needs to know the identity (or pseudonym) of
the recipient before sending the message, i.e., each message
has a single intended recipient. In this paper, we propose
a new problem in Hidden Credential systems — securely
publishing policy-encrypted data to multiple possible re-
cipients using Hidden Credentials and Hidden Policies, i.e.,
Alice should be able to securely publish messages that can
be decrypted by anybody with the correct set of attributes.
Consider the following motivating example in the context
of a bulletin-board service.
Matchmaking example: Alice maintains a public pro-
ﬁle on the bulletin-board service. She also maintains a pro-
tected proﬁle containing more personal information such as
her photograph, birth date, etc. She would like to share this
information only with people who satisfy her criteria for a
perfect partner and therefore encrypts it with her criteria as
the policy. Alice, however, would like to keep her criteria
secret. There are a couple of good reasons for this. The
criteria may be embarrassing to Alice, e.g., she might be
looking for a partner that also has a particular disease or dis-
order, or maybe she simply does not want suitors to game
the system by looking at her preferences and pretending to
ﬁt the description. If Bob is interested in Alice based on
her public proﬁle, he can attempt to decrypt her protected
proﬁle. Bob is able to view this information if only if he
satisﬁes her policy, and in the process does not learn Al-
ice’s criteria (i.e., her policy remains hidden) beyond what
he can infer from the fact that he satisﬁes her policy. Al-
ice, on the other hand, does not learn whether Bob tried to
access her proﬁle or not, let alone whether the decryption
was successful. Bob’s credentials, therefore, remain hidden
from Alice.1
1If Bob chooses to inform Alice that he was able to view her protected
proﬁle, then Alice can infer that he possesses credentials that satisfy her
policy. Such attacks are outside the scope of this paper, and have been
addressed in the context of trust negotiation [20].
It is not obvious how current Hidden Credential sys-
tems can be modiﬁed to support multiple possible recipi-
ents. For example, previous research [20, 9, 15] has fo-
cused on single recipients by relying on Identity-Based En-
cryption (IBE) [8]. A trusted Private Key Generator (PKG)
can issue a private key (credential) to Bob that corresponds
to the public key (attribute) “Bob is a student.” If
Alice encrypts data to Bob using this public key, then Bob
will be able to decrypt it if and only if he is a student. If
Alice would like the data to be decryptable by any student,
more sophisticated group-key management is needed. For
example, an IBE-based scheme could require Alice to use
the public key “Student” for encryption, and a shared
private key among all students. This is undesirable be-
cause the compromise of a shared group key requires a
new private key to be deployed to all students.2 Other re-
lated approaches include “Key-Policy Attribute-Based En-
cryption (KP-ABE)” [17, 31], where attributes are asso-
ciated with ciphertexts and keys encode decryption poli-
cies based on the data’s attributes. For example, Alice
can supply Bob with a key to decrypt only her data with
the attributes “music video AND Metallica.” Following
the terminology in [17], we focus on “Ciphertext-Policy
Attribute-Based Encryption (CP-ABE),” where attributes
are associated with users, and policies are encoded in the
ciphertexts based on users’ attributes. Since KP-ABE and
CP-ABE address different problems, we do not discuss KP-
ABE in the remainder of the paper.
We provide a non-interactive solution that avoids
shared private keys and call our system Privacy-Enhanced
Attribute-based Publishing Of Data (PEAPOD). As a
building-block, PEAPOD uses a modiﬁed version of Khu-
rana et al.’s Secure E-mail List Service (SELS) [23], which
is a proxy encryption scheme [6] for encrypting messages
to the subscribers of an email list. Brieﬂy, when a mes-
sage is sent to the list, SELS allows the “list server” to re-
encrypt messages to the list’s subscribers without access to
the plaintext. Re-encryption ensures that each recipient can
use his or her unique decryption key, thereby eliminating
the need for shared keys. We show how Alice can encrypt
data with attribute-based policies to multiple possible re-
cipients by building a system on top of SELS, where the
possession of a particular attribute corresponds to the user’s
membership in a SELS list for that attribute. Each attribute
is associated with a public encryption key, and users possess
unique decryption keys (“credentials”) for their correspond-
2Furthermore, in an IBE-based scheme a compromised key would
require rekeying all attribute keys since all private keys are generated
from a unique secret. This is because the public-key for “Student”
remains unchanged, and generating a new private key for “Student”
amounts to changing the unique secret. A less drastic alternative would
be to append version numbers to attributes (e.g., “Student.v1” and
“Student.v2”). However, this would require a mechanism for users
to acquire the current version numbers of attributes, which could be cum-
bersome.
ing attributes.
While such an approach solves the problem of encrypt-
ing messages to multiple possible recipients without the
need for shared private keys, it is not clear how the pri-
vacy of the policies can be maintained against the proxy
encryption server and the recipients. PEAPOD makes use
of homomorphic encryption [30] to contribute several in-
teresting properties that are absent from previous schemes.
Our system provides “clausal policy privacy” against all re-
cipients, intended or not. That is, assuming a disjunctive
normal form policy (a disjunction of conjunctive clauses),
Bob learns no information other than the number of clauses
in Alice’s policy that he satisﬁes.3 Even for the clauses
that he does satisfy, he gains no knowledge of which of his
attributes were used to satisfy those clauses. This is possi-
ble because our system forces the recipient Bob to use all
his credentials for decrypting a message. We contrast this
with the best known non-interactive scheme [9], where Bob
learns the entire set of attributes for a clause that he satisﬁes.
Furthermore, in PEAPOD, Bob cannot try to decrypt the
message with different subsets of his credentials. We con-
trast this with the best known interactive scheme [15] where
Bob can still mount inference attacks with subsets of his
credentials by making repeated attempts. Finally, unlike ex-
isting hidden credential and trust negotiation schemes, our
system efﬁciently supports non-monotonic boolean poli-
cies, i.e., negations of attributes can be included in policies,
and policies can check for the absence of an issued cre-
dential. Bob, therefore, cannot withhold a credential that
he has been issued. Existing approaches suggest that users
can be issued explicit attributes such as not a student,
thereby supporting negations in policies. This approach,
however, comes at the cost of doubling the number of at-
tributes in the system. Furthermore, users in the system
must now be issued “negative credentials” for all the at-
tributes that they do not possess, leading to a much higher
computational burden for issuing and revoking attributes.
For example, in a university setting, if a new attribute is
a provost is added to the system, the negative creden-
tial is not a provost will have to be issued to many
thousands of users. In contrast, our scheme does not require
any extra attributes, and users maintain credentials for only
the attributes that they possess.
Contributions We motivate the need for a system that
supports attribute-based encryption of messages to multi-
ple possible recipients using Hidden Credentials and Hid-
den Policies. We present our system PEAPOD that makes
the following speciﬁc contributions:
1. Ofﬂine publishing to multiple recipients: PEAPOD
decouples the sending and receiving phases, and pub-
lishers do not need to interact with recipients or know
3and whatever can be inferred from that fact
their pseudonyms beforehand. Users are able to pub-
lish information to multiple recipients and shared de-
cryption keys are not used, which simpliﬁes key man-
agement. Unlike other Hidden Credential systems,
PEAPOD makes use of a semi-trusted server as an
intermediary to achieve this property.
and
policy
2. Message
conﬁdentiality
privacy:
PEAPOD provides message conﬁdentiality based on
the sender’s policy, and clausal policy privacy against
recipients. Furthermore, the plaintext and the policy
are completely hidden from the server, even though
the server performs essential transformations on the
ciphertext for each recipient.
3. Non-monotonic boolean policies: Unlike other ap-
proaches, PEAPOD supports policies based on nega-
tions of attributes without the need for creating ex-
plicit attributes to represent negations. Our approach
leverages the server to ensure that users must use all
of their credentials for decryption, thereby preventing
users from withholding credentials.
2. Privacy-Enhanced Attribute-based Publish-
ing of Data
Departing from previous IBE-based approaches for Hid-
den Credential systems, PEAPOD uses proxy encryption
and splits the trusted duties of key-management between
a Server and a Certiﬁcation Authority (CA). Messages
are “proxy-encrypted” under attribute-based policies using
public attribute-keys that are set up by these entities, and
are then deposited at the Server for later retrieval. We now
provide a brief overview of the cryptographic tools used in
PEAPOD, and formalize various notions of security that
our system must satisfy.
2.1. Preliminaries
Proxy encryption As mentioned earlier, we use
SELS [23] as a building block for our system. In SELS,
the sender encrypts an email message and sends it to the
list server. The list server plays the role of the proxy and
re-encrypts the encrypted email (without access to the
plaintext) for every subscriber in the list so that each sub-
scriber can decrypt the message with his or her own unique
private decryption key. Conventional proxy encryption
allows only single recipients because the decryption key is
known only to a single party.4 SELS gets around this limi-
tation by requiring the sum K of the proxy’s re-encryption
secret-key su for a subscriber u and that subscriber’s
4Of course, one could share that decryption key to allow group decryp-
tion. However, the difﬁculty of key management makes this approach very
unfavorable.
Figure 1. A block diagram illustrating the basic operations of SELS [23] that we use in our protocol