title:Memsherlock: an automated debugger for unknown memory corruption vulnerabilities
author:Emre Can Sezer and
Peng Ning and
Chongkyung Kil and
Jun Xu
MemSherlock: An Automated Debugger for Unknown
Memory Corruption Vulnerabilities∗
Emre C. Sezer, Peng Ning,
North Carolina State University, Raleigh, NC
ecsezer,pning,PI:EMAIL
Chongkyung Kil
Dept. of Computer Science
Jun Xu
Google, Inc.
Mountain View, CA
PI:EMAIL
ABSTRACT
Software vulnerabilities have been the main contributing
factor to the Internet security problems such as fast spread-
ing worms. Among these software vulnerabilities, memory
corruption vulnerabilities such as buﬀer overﬂow and for-
mat string bugs have been the most common ones exploited
by network-based attacks. Many security countermeasures
(e.g., patching, automatic signature generation for intrusion
detection systems) require vulnerability information to func-
tion correctly. However, despite many years of research,
automatically identifying unknown software vulnerabilities
still remains an open problem.
In this paper, we present the development of a security de-
bugging tool named MemSherlock, which can automatically
identify unknown memory corruption vulnerabilities upon
the detection of malicious payloads that exploit such vulner-
abilities. MemSherlock provides critical information for un-
known memory corruption vulnerabilities, including (1) the
corruption point in the source code (i.e., the statement that
allows the exploitation of memory corruption vulnerability),
(2) the slice of source code that helps the malicious input to
reach the corruption point, and (3) the description of how
the malicious input exploits the unknown vulnerability. We
evaluate MemSherlock with a set of 11 real-world applica-
tions that have buﬀer overﬂow, heap overﬂow, and format
string vulnerabilities. The evaluation results indicate that
MemSherlock is a useful tool to facilitate the automatic vul-
nerability analysis process.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security
and Protection; D.4.6 [Operating Systems]: Security and
Protection—invasive software
∗
The authors would like to thank Prachi Gauriar and Keith
Irwin for their valuable discussions and James Newsome and
Dawn Song for sharing TaintCheck. This work is supported
by the U.S. Army Research Oﬃce under the Cyber-TA Re-
search Grant No. W911NF-06-1-0316.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’ 07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright  2007  ACM  978-1-59593-703-2/07/0010  . . .$5. 00.
General Terms
Security, Experimentation
Keywords
Vulnerability analysis, Debugging, Memory corruption
1.
INTRODUCTION
Software vulnerabilities have been the main contributing
factor to the Internet security problems such as fast spread-
ing worms. Among the software vulnerabilities, memory
corruption vulnerabilities such as buﬀer overﬂow and for-
mat string have been most commonly exploited by network-
based attacks.
There have been attempts to retroﬁt legacy code to pre-
vent memory corruption and guarantee memory safety, as
represented by CCured [17, 18]. However, these approaches
require porting, and are not automated fully. Furthermore,
due to the conservative memory protection, the additional
instrumentation imposes permanent non-negligible perfor-
mance overhead. For example, CCured requires annotation
of program with pointer qualiﬁers, and introduces in the
worst case 87% performance overhead in its evaluation [17].
Thus, identifying and removing software vulnerabilities is
still an attractive option to provide software security.
Many security countermeasures have been proposed to re-
move software vulnerabilities once they are identiﬁed. Patch-
ing has been adopted by almost all mainstream operating
systems and applications, such as Microsoft Windows, Linux,
Mac OS, and Microsoft Oﬃce, to remove newly discovered
vulnerabilities. Moreover, Shield [27] was developed to pro-
vide temporary protection of vulnerable systems after the
vulnerabilities are identiﬁed but before patches are properly
applied. Recently, a ﬁltering technique was developed to
defend against (polymorphic) exploits of known vulnerabili-
ties [9], and automatic generation of vulnerability-based sig-
natures (for known vulnerabilities) was also investigated [1].
All these approaches require speciﬁc vulnerability informa-
tion in order to function correctly.
There have been many years of research eﬀorts to iden-
tify software vulnerabilities automatically. Static analysis
techniques have been applied to ﬁnd potential software vul-
nerabilities (e.g., [2, 3, 8, 14]). However, most static analysis
techniques tend to generate a large number of false positives
without guaranteeing the detection of all vulnerabilities.
Dynamic approaches have also been investigated. In par-
ticular, several dynamic approaches have been proposed re-
cently to detect exploits of (unknown) vulnerabilities (e.g.,
562address space randomization [10, 21], TaintCheck [20], Mi-
nos [6]), analyze such exploits (e.g., DACODA [7], COV-
ERS [15]), and sometimes recover from such attacks (e.g.,
DIRA [25], STEM [23], [29]). However, despite the detection
of potentially unknown attacks, most of such approaches
cannot give precise information of the exploited vulnerabil-
ities. One exception is [29], which identiﬁes the corruption
points used by exploits of unknown memory corruption vul-
nerabilities through back tracing from the program crash
point [29]. However, as indicated in [29], this method can
handle special cases only, and does not guarantee the identi-
ﬁcation of the corruption point in general. Moreover, it does
not give speciﬁc information about the exploit of unknown
memory corruption vulnerabilities either. As a result, it may
still take hours or days of manual eﬀort to understand and
patch the unknown vulnerabilities being exploited.
In this paper, we present the development of a security de-
bugging tool named MemSherlock, which is aimed at auto-
matically identifying unknown memory corruption vulnera-
bilities upon the detection of malicious payloads that exploit
such vulnerabilities. MemSherlock provides three pieces of
information for unknown memory corruption vulnerabilities:
(1) the corruption point in the source code (i.e., the state-
ment that allows the exploit of memory corruption vulnera-
bility), (2) the slice of source code that helps the malicious
input to reach the corruption point, and (3) the description
of how the malicious input exploits the vulnerability.
Unlike previously proposed methods (e.g., [6,7,15,20,29]),
MemSherlock detects memory corruption of not only con-
trol ﬂow data (e.g., return addresses), but also non-control
data (e.g., local variables). This feature is critical in detect-
ing non-control-ﬂow attacks, such as those identiﬁed in [4].
Moreover, MemSherlock automatically analyzes the vulner-
ability that leads to the memory corruption, and outputs
the vulnerability information at the programming language
level, with variable names and line numbers involved in the
vulnerability in source code as well as the connection be-
tween them. Such information is presented in an intuitive
way to the programmer to facilitate the understanding and
patching of the vulnerability. Finally, MemSherlock keeps a
mapping for the entire virtual memory, providing monitor-
ing at multiple levels of granularity.
We evaluate the security debugging tool with a set of 11
real-world applications with known vulnerabilities, includ-
ing stack overﬂow, heap overﬂow, and format string vulner-
abilities. MemSherlock is able to identify all but one of the
vulnerabilities with very few false positives. It is important
to note that the false negative and false positives are due to
the limitation of the proof-of-concept implementation, not
the proposed method.
The contribution of this paper is three-fold. First, we
develop a suite of source code rewriting, static analysis,
and dynamic monitoring techniques to provide automated
debugging of unknown memory corruption vulnerabilities.
Second, we implement the proposed techniques as a secu-
rity debugging tool, MemSherlock, which allows automated
and eﬃcient identiﬁcation of unknown memory corruption
vulnerabilities in real-world applications. Third, we perform
substantial experimental evaluation of MemSherlock using a
set of real-world applications, demonstrating the feasibility
of this approach.
The rest of the paper is organized as follows. The next sec-
tion gives an overview of the proposed approach. Section 3
Malicious 
input
Program 
executable
0101
1010
0101
Compiler
CC
Debugging 
Agent
Original 
source files
CC
Source 
Code 
Rewriting
Library 
specification
Static 
Analyzer
Pre-debugging phase
Vulnerability
information
proc
var
addr
Debugging 
information
Figure 1: Overview of MemSherlock
discusses pre-debugging phase preparation for MemSherlock.
Section 4 describes the debugging process aimed at iden-
tifying the memory corruption vulnerabilities. Section 5
presents the implementation of MemSherlock. Section 6
gives the experimental evaluation of MemSherlock using a
set of real-world applications. Section 7 discusses related
work. Section 8 concludes this paper and identiﬁes several
future research directions.
2. OVERVIEW OF MEMSHERLOCK
The goal of MemSherlock is to assist programmers in un-
derstanding and patching unknown memory corruption vul-
nerabilities by automatically detecting and providing infor-
mation about such vulnerabilities. We concentrate on mem-
ory corruption vulnerabilities in network service programs
(e.g., httpd, ftpd) in this paper, since they are the primary
targets of network-based attacks (e.g., worms).
To identify memory corruption, we take advantage of an
observation made in [30]. That is, in most programs, a given
variable typically is accessed by only a few instructions (or
the corresponding statements in the source code). This ob-
servation can be further extended in the context of memory
corruption attacks: in order for a memory corruption attack
to succeed, an attacker needs to use an instruction (in the
victim program) to modify a memory region onto which the
instruction should not write. To exploit this observation,
we keep track of memory operations during the debugging
process, and verify whether an instruction writes to a mem-
ory location that it is not supposed to modify. Speciﬁcally,
we determine the memory regions and associate with each
of them a set of instructions that can modify it. For a given
memory region m, the set of instructions that can modify
m is called the write set of m, denoted WS(m).
Figure 1 illustrates the procedure for using MemSherlock.
MemSherlock requires a pre-debugging phase to collect the
information needed for security debugging. In particular, it
needs to collect the write set of each critical memory region.
It is non-trivial to obtain such write sets and track the write
operations during debugging, particularly due to the compli-
cations caused by pointers and complex program constructs.
As illustrated in Figure 1, during the pre-debugging phase,
MemSherlock ﬁrst performs source code rewriting to handle
pointers and complex program constructs, then uses static
analysis of source code to collect information necessary for
debugging (e.g., write set information), and ﬁnally invokes
static analysis of binary code to associate the collected in-
formation with memory locations.
Once invoked for debugging, MemSherlock takes as in-
put the instrumented version of the program, the auxiliary
debugging information (e.g., the variables in the program
along with their sizes and their write sets) generated dur-
ing the pre-debugging phase, and malicious network pay-
loads. During the debugging process, MemSherlock veriﬁes
the modiﬁcations to memory regions with the write set in-
formation, and identiﬁes an illegal write when the updating
instruction is not in the write set. Thus, MemSherlock can
capture memory corruption at the time of the modiﬁcation,
pinpointing the exact instruction or statement in source code
that is responsible for the corruption.
In addition to the above veriﬁcation, MemSherlock also
keeps track of the propagation of input data as well as the
program instructions involved in the propagation. As a re-
sult, upon the detection of memory corruption, MemSher-
lock can identify precisely parts of the program involved in
the propagation of the malicious input and determine how
the malicious input lead to the memory corruption. By fur-
ther integrating the auxiliary information collected during
the pre-debugging phase, MemSherlock presents all the vul-
nerability information at source code level to facilitate the
understanding and patching of the vulnerabilities.
One critical input to MemSherlock is malicious network
payloads that exploit memory corruption vulnerabilities. We
assume the method used in [16, 29] to capture such data.
For example, we may run network service applications us-
ing address space randomization (e.g., PaX ASLR [21]), and
log the messages to the service programs in a message log.
(Note that the logged messages can be discarded upon the
completion of a non-crash session.) When a memory corrup-
tion attack (e.g., a new worm) attempts to exploit an un-
known vulnerability in such a service program, it typically
causes the corresponding process to crash [10,21], which trig-
gers the automated debugging of the vulnerability. We then
run the instrumented version of the service program under
MemSherlock, with the logged network messages replayed to
replicate the error and obtain the vulnerability information.
Though based on the same observation as AccMon [30],
MemSherlock diﬀers from AccMon in several ways. AccMon
relies on a training phase to collect the access instructions
for the monitored objects, and oﬀers no guarantee of collect-
ing all access instructions. Indeed, missing instructions will
result in false alarms during access monitoring. In contrast,
MemSherlock uses static analysis combined with dynamic
monitoring to get precise write set information, not suﬀer-
ing from the same problems. Moreover, AccMon requires
hardware architectural supports, such as iWatcher [31] and
Check Look-aside Buﬀer (CLB) [30], which are not available
in current computer systems. AccMon uses Bloom ﬁlter to
implement the CLB, and may introduce false positives in
recognizing normal instructions, which imply false negatives
in detecting memory related bugs. This gives a malicious
attacker an opportunity to bypass detection.
In contrast,
MemSherlock assumes existing hardware and software sup-
ports in modern computer systems, and does not suﬀer from
the same false negative problem.
3. GENERATING WRITE SETS
The primary objective of the pre-debugging phase is to
generate the write sets of memory regions used by appli-
cations.
In this phase, we need to determine all program
variables and extract their write sets. Moreover, we need to
provide information for the debugging agent so that during
the debugging phase, it can link memory regions to pro-
gram variables and their write sets. A particular challenge
in this phase is handling pointers and certain dereferences
(e.g., chained dereferences and struct).
3.1 Extracting Write Sets from Source Code
We perform source code analysis to determine all the pro-
gram variables and extract their write sets. The write set
of a variable v includes statements that assign v or library
function calls where v is passed as a modiﬁable argument
(e.g., memcpy(v, src)). To facilitate this process, we pro-
vide the static analyzer with not only the source code, but
also a speciﬁcation ﬁle for every shared library linked to
the program. The speciﬁcation ﬁle includes the names of
library functions that modify their arguments and identiﬁes
the modiﬁed arguments. An entry in the write set is a pair
consisting of a ﬁle name and a line number. We believe that
using line numbers is a reasonable approximation to using
instructions. As an immediate beneﬁt, this method provides
information directly at the source code level. The static an-
alyzer also determines the size of the variables, and for local
variables, the function they appear in. Such information will
be used by MemSherlock during the debugging phase.
3.1.1 Handling Pointers
Pointers require some special attention, since given a pointer
variable, the statements that modify the pointer variable
and those that modify the pointer’s referent object mod-
ify two diﬀerent memory regions. To address this issue, we
keep two separate write sets for every pointer variable p:
One for the pointer variable itself (WS(p)), and the other
for the referent object ref(p) (WS(ref(p))). Note that a
pointer may point to diﬀerent objects during the course of
execution. During the debugging process, when the refer-
ent object ref(p) is determined, the debugging agent adds
WS(ref(p)) to the referent object’s write set.
Note that WS(ref(p)) represents the write set of p’s refer-
ent object possibly updated through pointer p. Thus, when
p is updated, for example, to point to a diﬀerent object,
WS(ref(p)) should be removed from the write set of the ref-
erent object to which p previously pointed, since it is no
longer possible to update this object through pointer p.
1  int i = 0;
2  int *p = &i;
3  *p = 1;
4  p = NULL;
WS(i) = {1}
WS(p) = {2,4}
WS(ref(p)) = {3}
Line
1
2
3
4
ref(p)
N/A
i
i
NULL
WS(i)
{1}
{1,3}
{1,3}
{1}
(a) Code example
(b) Write sets after static 
analysis
(c) ref(p) and WS(i) during monitoring