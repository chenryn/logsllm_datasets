title:Avoiding The Man on the Wire: Improving Tor's Security with Trust-Aware
Path Selection
author:Aaron Johnson and
Rob Jansen and
Aaron D. Jaggard and
Joan Feigenbaum and
Paul Syverson
Avoiding The Man on the Wire: Improving Tor’s
Security with Trust-Aware Path Selection
Aaron Johnson∗, Rob Jansen∗, Aaron D. Jaggard∗, Joan Feigenbaum† and Paul Syverson∗
∗U.S. Naval Research Laboratory, {aaron.m.johnson, rob.g.jansen, aaron.jaggard, paul.syverson}@nrl.navy.mil
†Yale University, PI:EMAIL
Abstract—Tor users are vulnerable to deanonymization by
an adversary that can observe some Tor relays or some parts
of the network. We demonstrate that previous network-aware
path-selection algorithms that propose to solve this problem are
vulnerable to attacks across multiple Tor connections. We suggest
that users use trust to choose the paths through Tor that are
less likely to be observed, where trust is ﬂexibly modeled as a
probability distribution on the location of the user’s adversaries,
and we present the Trust-Aware Path Selection algorithm for Tor
that helps users avoid trafﬁc-analysis attacks while still choosing
paths that could have been selected by many other users. We
evaluate this algorithm in two settings using a high-level map of
Internet routing: (i) users try to avoid a single global adversary
that has an independent chance to control each Autonomous
System organization, Internet Exchange Point organization, and
Tor relay family, and (ii) users try to avoid deanonymization by
any single country. We also examine the performance of Trust-
Aware Path selection using the Shadow network simulator.
I.
INTRODUCTION
Tor is a popular tool for low-latency anonymous commu-
nication, with over an estimated 1.5 million daily users. In
order to use Tor to communicate with others, clients choose a
three-hop path from the set of over 7000 relays volunteering
bandwidth to the network. In order to balance load among
the relays, and in particular to optimize the allocation of
Tor’s limited bandwidth, the default path selection algorithm
is bandwidth-weighted so that a client will select a relay with
a probability equivalent to the ratio of that relay’s available
bandwidth to the total network bandwidth capacity. Clients
communicate with arbitrary Internet hosts via a cryptographic
circuit with a layer of encryption for each of the three relays on
its path, which are termed the entry guard, middle, and exit,
according to their position on the path. Because this circuit
is built using a telescoping process, it provides unlinkability
against a passive, non-global adversary that cannot observe
both ends of the circuit.
Unfortunately for many Tor users, a global adversary that
can observe both ends has become a very real and signiﬁcant
threat. An adversary in such a position can perform a “ﬁrst-
last” trafﬁc-correlation attack for any of the circuit’s streams
(i.e., TCP connections to destinations multiplexed over cir-
This paper is authored by an employee(s) of the United States Government and 
is  in  the  public  domain.  Non-exclusive  copying  or  redistribution  is  allowed, 
provided that the article citation is given and the authors and agency are clearly 
identiﬁed  as  its  source.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23307
cuits) by using similarities in the volume and timing of the
trafﬁc at both ends to match them with each other, thereby
deanonymizing the user. These techniques are efﬁcient and
effective [27]. In order to carry out trafﬁc-correlation attacks,
an adversary must be in a position to (i) observe Tor trafﬁc
on an Internet path between a client and its chosen entry
guard or control that entry guard, and (ii) observe an Internet
path between the selected exit relay and the destination or
control the exit or destination. Due to Tor’s volunteer-relay
model and its bandwidth-weighted path-selection algorithm,
an adversary may get in a position to observe a large amount
of trafﬁc simply by running a fast relay, and it can otherwise
observe trafﬁc by controlling or coercing entities on the paths
to and from relays including Internet Service Providers (ISPs),
Autonomous Systems (ASes), and Internet Exchange Points
(IXPs).
Previous approaches to improving resilience against trafﬁc
observation and correlation attacks have been limited in nature
and only consider speciﬁc threats. One main approach focuses
on defeating an adversary that observes an AS or IXP [6], [8],
[12], [14], [23], [28], [29] and suggests creating Tor circuits
such that the set of ASes and IXPs that appear on the Internet
paths between the client and guard is disjoint from the set
of ASes and IXPs between the exit and destination. However,
this solution ignores the critical effects of multiple connections
over Tor, which under this approach leak increasing amounts of
information that can allow the adversary to determine a client’s
location. We present attacks of this nature on Astoria [29], a
recent proposal of this sort, with our results showing that even
a moderately-resourced adversary can identify the client’s AS
within seconds. These attacks have similar implications for all
path-selection proposals using this approach.
The other main approach focuses on an adversary that
can observe some Tor relays [20], [21] and suggests that,
for the most sensitive circuit positions, users choose a small
number of relays from among those the user trusts the most.
However, this approach leaks information to an adversary that
can eventually identify the trusted relays (e.g., via a congestion
attack [13], [15]) and uses a restrictive trust model. No existing
solution to trafﬁc correlation attacks provides protection from
the variety of attacker resources and tactics that recent research
and experience suggests is realistic [22].
In contrast, this paper develops defenses against trafﬁc
correlation that are based on a general probabilistic model
of network adversaries. Using this model we can consider
adversaries with diverse resources, such as those that observe
network trafﬁc at any combination of network providers, ex-
change points, physical cables (undersea or elsewhere), and Tor
relays. The model allows us to incorporate uncertainty about
and randomness in an adversary’s actions. It also enables us
to express common factors underlying the adversaries’ ability
to compromise different network locations, such as shared
legal jurisdiction or corporate ownership. A user expresses a
trust belief about her adversaries by specifying a probability
distribution over their presence at a set of network locations,
and she turns this belief into a trust policy by including
a weight for each adversary indicating her relative level of
concern about that adversary.
Using these trust policies, we design Trust-Aware Path
Selection (TAPS), a novel path-selection algorithm that uses
trust in network elements to inform a user’s decision about how
to select relays for its Tor path. Using TAPS, clients select
paths so as to minimize the probability that an adversary is
in a position to observe both ends of their Tor circuit while
at the same time ensuring that their path selection behavior
does not harm their security by making them stand out from
other clients. In addition to defending against a much broader
class of adversaries, TAPS addresses the other deﬁciencies
of prior proposals. In particular, it provides security against
an adversary that can monitor and link user activity across
multiple connections, inﬂuence how users make connections,
and identify the relays used repeatedly by a client.
In order to facilitate the adoption of TAPS, we describe
both a long-term and a short-term deployment strategy. In
the long-term strategy, all Tor users participate and use the
TrustAll version of TAPS to replace Tor’s existing bandwidth-
weighted algorithm. In the short-term strategy, TAPS provides
the option for security-conscious users to use trust to defend
against trafﬁc-correlation attacks while most users continue to
use “vanilla” Tor (i.e., bandwidth-weighted path selection). We
design the TrustOne TAPS version for this case, in which users
must both avoid trafﬁc correlation and choose paths that blend
in with the vanilla Tor users.
We evaluate the security of TAPS via simulation with
modiﬁed versions of the Tor Path Simulator (TorPS) [22]. This
evaluation is done with respect to two plausible and illustrative
trust policies: (i) The Man policy, in which a single adversary
has an independent probability of compromising each AS
organization (i.e., group of ASes run by the same entity), IXP
organization, and self-declared relay family (i.e., set of relays
run by the same entity) in Tor; and (ii) the Countries policy,
in which each country is considered a potential adversary and
observes all ASes, IXPs, and relays located inside of it. Our
analysis of The Man policy for a popular Tor client location
shows a reduction in the probability of a successful ﬁrst-last
attack from about 0.7 to about 0.4 in TrustAll with typical web-
browsing activity over the ﬁrst week in December 2013, and
from about 0.68 to as little as 0.1 in TrustOne with repeated
connections over the same week to a single IRC server popular
with Tor developers. Our analysis of the Countries policy over
that week shows a reduction in the median number of countries
that “unnecessarily” compromise a stream (i.e., compromise a
stream when they don’t contain both the client and destination)
from 5 to 2 in TrustAll with typical user behavior.
Our algorithms are designed not only to improve security,
but also to allow security to be traded off for performance.
They achieve this by allowing clients to conﬁgure the fraction
of bandwidth weight that their trusted sets of candidate guards
and exits should exceed before making a bandwidth-weighted
choice from them. This mechanism results in a client selecting
from among the most secure relays while still making use of
much of the network and doing so in a bandwidth-weighted
manner. We explore these trade-offs using the Shadow simula-
tor [2], [18] and ﬁnd that there exist parameters that result in
only a slight decrease in performance, and only for less than
5 percent of users.
The full version of this paper [19] contains additional
results and details.
II. ATTACKS ON NETWORK-AWARE PATH SELECTION
There have been several proposals to improve Tor security
by considering the network entities (e.g., AS or IXP) that
can observe a circuit [6], [8], [12], [14], [23], [29]. However,
none of these works considers anonymity across multiple
Tor connections. Any realistic use of Tor involves multiple
connections from the same user, though, and these connections
are linkable by the adversary in many important cases, which
means that it doesn’t sufﬁce to consider the security of an
individual connection. Indeed, we present two speciﬁc attacks
that can deanonymize users by identifying and analyzing
multiple connections from the same user.
While there have been several proposals for network-
aware path selection, we focus on just one for concreteness:
Astoria [29]. It
is among the most recent and complete
proposals, and it provides a valuable example as many of
the others suffer the same weaknesses. Astoria is designed to
prevent deanonymization by an AS (or group of sibling ASes
controlled by the same organization). To choose a circuit for
a given destination, a client determines the ASes between the
client and its guards and between the exits and the destination.
It
then makes a bandwidth-weighted random choice from
among the guard-exit pairs such that no AS appears on both
the client side and the destination side. If no such pair exists,
a linear program is used to determine the selection distribution
over guard-exit pairs that minimizes the maximum probability
that some AS appears on both sides. Circuits are reused for
destinations within the same AS.
A. Multiple-Connection Attacks
Chosen-Destination Attack: Consider an adversary that runs
a number of web servers in different locations and runs some
Tor relays. If a Tor user visits one of the malicious web servers,
the adversary can force the browser to visit the other malicious
servers and request resources that are linkable to the original
request (e.g., images with unique names). The adversary will
then observe the pattern of exits chosen by the client to visit
the servers in different locations, and it will also observe
some of the client’s guards if the malicious relays are ever
selected in the middle position. This attack strategy applies
more generally to any situation in which the adversary can
choose the destinations that the client visits and is able to link
those connections as originating at the same client.
Under this attack, path-selection algorithms that choose re-
lays based on the client’s location can leak increasing amounts
of information about that location with each additional desti-
nation visited. This is the case for Astoria, and we demonstrate
that this attack is effective on that system.
To demonstrate the attack, we construct an AS-level In-
ternet map using traceroute-based topology data and inferred
AS relationships from CAIDA [10], and BGP routing tables
supplied by Route Views [33]. We use the data from these
sources for October 2015. Routes between AS locations on
our map are inferred using the algorithm proposed by Qiu and
Gao [32], which takes AS paths observed in BGP tables and
2
extends them to other locations using shortest “valley-free”
paths. Conversion of IPs to ASes is performed using routing
preﬁx tables from Route Views.
We also use data from Tor Metrics [4] to evaluate the
attack’s effectiveness as if it were run on the Tor network
in the recent past. We use the archived network consensuses
and server descriptors to determine such facts as which relays
existed, what families they were grouped in, what their relative
bandwidth capacities were, and what their “exit policies” were.
We use the ﬁrst network consensus from October 2015 and
its listed descriptors. We also use data from Juen [23] that
identiﬁes 414 Tor client ASes as ever being observed making
a Tor connection and shows their relative popularity. 389 of
these appear in our AS map and are used in our analysis.
The ﬁve most popular client ASes identiﬁed by Juen, in order
from most popular, are 6128 (Cable Vision Systems, US),
25019 (SaudiNet, SA), 8972 (PlusServer AG, DE), 6893 (Saitis
Network, CH), and 15467 (Enternet Libercom, HU).
We simulate Astoria’s path selections for 1000 destinations
in ASes selected uniformly at random from those 44626 ASes
in a maximal fully-connected component in our map that also
advertise preﬁxes. For each destination AS, an IP is chosen
arbitrarily from an advertised preﬁx, and a connection to port
443 is simulated. We repeat the simulation 100 times. We
suppose that the adversary runs the 4 relays with the largest
probabilities of being selected as a middle, which have a
total advertised bandwidth of 1.01 Gbps and a cumulative
probability of 3.3% of being selected as a middle.
Table I shows how often the adversary observes some or all
of the client’s guards when the client uses 3 guards. It shows
that with 100 destinations the adversary observes all guards
with 30% probability, and with 300 destinations it observes
all guards with 94% probability. It sometimes observes guards
even with no destinations due to being selected as a guard.
TABLE I: Probability of observing the client’s guards
0 destinations
100 destinations
200 destinations
300 destinations
Pr. 0 guards
observed
0.96
0.04
0
0
Pr. 1 guard
observed
0.04
0.14
0.01
0
Pr. 2 guards
observed
0
0.52
0.25
0.06
Pr. 3 guards
observed
0
0.30
0.74
0.94
We then consider how well the adversary can guess the
client’s AS after the attack in the case that he observes all of
the client’s guards. We again simulate Astoria’s path selections
for 1000 random destination ASes and repeat the simulation
100 times. We follow Nithyanand et al. [29] in using 3
guards (1 and 2 guards yield similar results). We suppose
that the adversary uses a uniform prior distribution on the
389 client ASes. We then compute the adversary’s conditional
distribution on the client ASes given the observed guard set
and the sequence of exits. The average entropy of the resulting
distributions as we increase the number of attack destinations
is shown for the top 5 client ASes in Figure 1. It shows an
expected steady decrease in entropy for all client locations
as the attacker uses more destinations. By 300 destinations,
all locations result in less than 4 bits of entropy on average,
and by 1000 destinations, the average entropy is less than 2.5
bits for all locations. Identifying the client AS could be very
dangerous for a Tor user, as it can identify the country of that
user as well as the ISP whose network logs could be used
to completely identify the user. Note that this attack could
3
be completed within the time needed to construct circuits and
open streams on them in parallel, which is on the order of
seconds.
Fig. 1: Avg. entropy of posterior client-AS distribution after chosen-
destination attack on Astoria