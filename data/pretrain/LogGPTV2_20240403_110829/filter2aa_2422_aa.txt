Assembly Language Is 
Too High Level
...or the drinking game replaces 'cyber' with 'assembly is too high level'
DEF CON 25
XlogicX
Shoutz
●         KRT_c0c4!n3 (art)
●         Fat Cat Fab Lab (where I hack)
●         NYC2600 (who I friend)
●         DC201 (Because DEF CON)
- My girlfriend KRT_c0c4!n3 (art director) did a good 
portion of the art of these slides
- I worked on most of my code and all of these slides 
from Fat Cat Fab Lab. It's my favorite hackerspace in 
the NYC area (West Village)
- NYC2600 is my local 2600 community and where 
I've made most of the friends I have in NYC
-DC201, because it's the closest active DEF CON 
group in my area
Even as a kid I wanted to do low level 
programming. I had no access or 
knowledge of compilers or even major 
programming languages. I deep down 
felt like I should be able to type the right 
binary data into a notepad (or 
something like it) and run it, but all I had 
was just some Windows 3.11 and 
ignorance
I eventually did end up typing hex into debug (comes 
with Windows 3.11+) and executed my program live 
at CactusCon 2016
Deck at http://xlogicx.net/?p=515
I eventually try to teach myself Z80 assembly. This is 
because I already had a TI-82 and already tried 
some sweet games programmed in assembly.
The first program I made was an example program 
that clears the screen. My first attempt to make my 
own program cleared the memory. This was 
unintended...
I then formally learn Assembly for the M68HC11 
microcontroller in school. I don't even remember if 
we had a textbook, but we did have the Motorola 
manual. This manual listed all of the instructions with 
the machine code next to the instruction.
I had a lot of fun with this architecture. Inspired by 
Godel Escher Bach, I attempted to create a program 
that replicated itself into the next area of memory and 
executed itself. I learned the importance of needing 
to understand the abstraction layer of machine code 
in order to pull this off. Also, the assembly language 
and machine code for this architecture was relatively 
one to one.
Propeller Assembly
After using various micro-controllers, I start to crave 
more capabilities and want to find a way to do 
floating point math in a sane way. LoST eventually 
convinces me to try this new Propeller micro (well it 
was new back then in 2006). I ended up not using it 
for what I had planned, but made an audio driver 
instead. The performance of this project required the 
use of Propeller Assembly (instead of the 
recommended high level language: SPIN). This 
architecture was pure beauty, and the relationship 
between the machine-code and assembly language 
was practically one to one for all intents and 
purposes. I'm still waiting on Chip Gracey to finish 
Duke Nukem Forever (...I mean the Propeller II)
X86 Assembly
Then, a matter of years ago, the company I was 
working with before voluntold me to take GREM 
training (GIAC Reverse Engineering Malware). This 
is the context in which I eventually learned the x86 
architecture for assembly language. I learned that 
the language was the most terrible assembly 
language I've ever seen up to this point; which made 
it all that more beautiful.
And those manuals in the screenshot, I’ve read them 
all, cover to cover.
Introducing:
InfoSec Bro
This is just how I picture most infosec bros; a Kenny 
Powers like character.
● "Assembly refers to the use of instruction 
mnemonics that have a direct one-to-one mapping 
with the processors instruction set"  
● "However, everything in the end is assembly, and 
that is just fixed sequences of ones and zeros 
being sent to the processor"
● "...that is to say, there are no more layers of 
abstraction between your code and the processor"
This book had all of the above quotes. This book is 
also apparently all around terrible in many other 
ways. But don't just take my word for it...(next slide)
Best Review Ever
This review was from one of the authors of this book!
Kitteh Demo
Running the demo kitteh program to show what it 
does
Quickly running through the source to show the 
vulnerabilities
Exploiting the program to get a 'shell'
Showing the important line of assembly being 
exploited, and how the actual machine code cannot 
be produced by nasm_shell
The screenshot in this slide is for the PDF version, it 
is only a hint at what will be demonstrated
Tools Used in Talk
● m2elf.pl – Converts machine code to ELF 
executable
● Irasm – Like nasmshell.rb (but does the stuff 
that this talk explains
● It’s also not a shell, it’s an assembler written in 
Ruby
I will likely be flying in and out of these tools during 
this talk. Not as legitimate full demos, just a few 
seconds here and there to illustrate the points.
M2elf is a tool that I created that takes hex or binary 
(1's and 0's) in an input file and converts it into a fully 
ELF executable. For the purposes of this 
presentation, I will be running it in 'interactive' mode; 
it takes machine code input and immediately displays 
the instruction it represents (instruction by 
instruction)
Irasm is like nasmshell.rb, only irasm is not a shell, 
it's an assembler. Instead of just displaying official 
machine code, it outputs a bunch of redundant 
machine code as well (as discussed in this talk)
Assembly  Machine Code
↔
● ADD AL, imm8
● Adding an 8-bit value to the 8-bit AL 
register
● 0x04 is opcode for 'ADD AL' followed by 
byte to add
Let's talk about what people are thinking 
about when they erroneously say that 
assembly language and machine code have 
a one to one relationship.
We can say that if we add the byte of 0x42 
to the AL register (ADD AL,0x42). The 
machine code will be 0x0442 (0x04 for ADD 
and 0x42 is the byte).
This means that if we wanted to add 0x33 to 
the AL register, the machine code would be 
0x0433
You see the correlation right?
Assembly  Machine Code
↔
● INC, 32-bit Register
● Increments a 32 bit register
● These registers come in the following 
order:
● EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI
This one is a little more complicated 
but not that bad. All of this increment 
(INC) instructions start with a 0x4 
nibble, and the next nibble 
corresponds to the register you want 
to increment. Since EAX is first, INC 
EAX is just 0x40.
This is unless we are using a 64 bit 
processor, then the 0x40 is a prefix 
byte, different story all together 
though.
Assembly  Machine Code
↔
● MOV r8, imm8
● Move a byte into an 8-bit register
● These registers come in the following order:
● AL, CL, DL, BL, AH, CH, DH, BH
Similar to the last two instructions. This is a group of 
MOV instructions where 0xB is the first nibble 
representing MOV, and the next nibble represents 
the register. Finally, the byte that follows is the byte 
to be moved to said register.
But wait, there's a 0xC6 format that allows us to add 
a byte to a more complex data structure that includes 
memory pointers AND also registers (and because 
this structure supports registers, we find a 
redundancy here)
Knowing all of this, if you did: mov al, 0x44
Your assembler (and nasmshell) would output: 
0xB042
It wouldn't output 0xC6C042
But the irasm tool will
AAD (ASCII Adjust AX 
Before Division)
●The assembly for this is too high 
level
●The machine code is also too high 
level
●Even the mathematical concept is 
too high level!
●Or, how to do base1 and base0 math
●Supposed to do Base10 conversion
I love the AAD instruction. It says it does a thing. But 
the thing it actually does to do the thing it says it 
does is far more interesting. The next several slides 
go into depth of these things.
AAD – What it Does
This instruction takes the value of AX (two bytes).
It breaks them out and considers them to be two 
decimal numbers (base10).
Regardless of the misleading '+' symbol in the slide, 
it combines the two digits as if the zeros weren't 
there.
The result is considered a base10 value. It's 
hexadecimal representation is stored back into AX. 
This really means that it is stored into AL and AH 
gets wiped. Because even the largest decimal value 
of 99 would still fit into AL as hexadecimal.
This style of slides are animated; they will look a little 
weird in the PDF version.
AAD – Assumptions
● The entire value is 16 bits
● The two halves make up 8 bits (07 and 09)
● Being that the values are converting from 
base 1
● The two halves need to be from 00-09
● Even though 0A-FF are valid 8 bit values
To think like a hacker for a second, think of the 
context of what goes wrong when you don't do input 
validation and the things that could go wrong.
In AX, you're supposed to have a decimal (0-9) value 
in AH and AL. However, each of these registers could 
actually be in the range of 0x00-0xFF
AAD – Debugged
● 0709 moved into the 16 bit register (ax)
● AAD performed
● The ‘A’ (al/ah/ax/eax) register now contains 
004f
● The AAD mnemonic is interpreted by all 
assemblers to mean adjust ASCII (base 
10) values. To adjust values in another 
number base, the instruction must be hand 
coded in machine code (D5 imm8)
The interesting thing here is that the real machine 
code for the opcode of AAD is just 0xD5, the next 
byte is actually not part of the opcode; it's an 
operand. It just defaults to 0x0A (or 10 in decimal). In 
assembly, you can only type 'aad'; you can't give it 
the base you want to use because base10 is 
assumed.
However, if you write this instruction in directly in 
machine code though, you can actually choose a 
different base and the high level mathematical 
concept works out.
Assembly, it's too high level
AAD – Base 6
This is us working through an example of choosing 
our own arbitrary base of 6.
Our character set for base6 is from 0-5.
Cramming 3 and 5 together gives us 35.
This instruction needs to convert 35 (base6) to a 
hexadecimal (base16) value.
35 in base10 is actually 23 = ((3 * 6) + (5 * 1))
23 in hexadecimal is 0x17
It's amazing, it all works out!
AAD – Base 2
Let's do base2
We cram 1 and 1 together and get 11
11 in binary is 3 in decimal which is 0x03 in 
hexadecimal
So this works too.
Let’s Hack: Invalid Input
● Remember base 10, we were limited to 00-09?
● What happens when we use the values in the 0A-FF 
range?
● Do you know what base 1 or even base 0 means?
● Neither do I, so what happens?
This is an introduction slide for us to try some real 
ignorant things and to attempt to make some 
meaning out of it
AAD – Base 10, Input Beyond Range
This is us going far above base10 values in AX 
(AH/AL), but then specifying base10 for the aad 
instruction.
It's hard to visualize cramming 5 and 6F together, but 
the slide does it's best to make something of it.
By the process of magic (whatever AAD is actually 
doing), we get the result of 0xA1.
0xA1 is then stored back into AX
AAD – Base 1, I guess that’s a thing…
What about base 1?
Well, our only valid character is zero, so:
Cram 0 with 0 to get 0 to convert to 0 and store 0 
back into our register that already had 0.
Pointless, but at least it makes sense and we know 
whats going on here I guess.
AAD – Base 0, That can’t be a thing
Then there's base0. There is really no valid character 
for this, so I just made AX 0xBEEF.
We cram it together, and by the magical process of 
AAD we get a result of 0xEF and store it back into 
AX.
It really is fine though, because microcode
Machine Code:
Too High Level
● What’s actually happening under the Hood?
● Microcode
● Intel’s PseudoCode for AAD:
This screenshot from the Intel manual shows what is 
actually happening under the hood.
It's not literally a base conversion, just some 
mathematical operations (an 'algorithm') that happen 
to perform the conversion when you don't feed it 
garbage.
This is fucking profound. Mathematics is not reality, 
it's just a model for it sometimes. Don't take math too 
seriously, math is stupid.
A More Simple Formula
● AL = AL + (AH * base)
● Where:
● AL is the last 2 bytes of input
● AH is the first 2 bytes of input
● Base defaults to 10 (but we can machine
hack that)
This is a better representation of what the Intel 
pseudo-code is doing. It's actually pretty elegant 
looking. It's also pretty cool that something so simple 
can 'convert' 'bases' so easily
A New Understanding
● AL = AL + (AH * base)
● 0709 (base10): 09 + (07 * 10) = 4F (79 decimal)
● 0305 (base6): 05 + (03 * 6) = 17 (23 decimal)
● 0101 (base2): 01 + (01 * 2) = 3 (3 decimal)
● 056F (base10): 6F + (05 * 10) = A1 (161 decimal)
● 0000 (base1): 00 + (00 * 1) = 0 (0 decimal)
● BEEF (base0): EF + (BE * 0) = EF (239 decimal)
For fun, we use this simple formula to crunch through 
all of the examples in the previous slides to see that 
the formula does crunch out the answers that we 
expect them to.
How is this Useful
● We have a new certain way to clear AH
● Old way number 1: mov ah, 0
● Efficient Compiler way: xor ah, ah
● Our new stupid way: db 0xd5, 0x00
● Or AAD base 0
All kidding aside about clearing the AH 
register, it's cool to know that we can do 
conversions in obscure bases with one 
instruction. It's even cooler that the way 
to implement it is even more obscure: 
you have to do it in machine code
...because assembly is too high level
MODR/M + SIB
• Allows you to do various encodings with registers
and memory
• Memory encodings is where it gets interesting
(complicated)
• Already complicated enough, even without the
redunds
This can be some rough terrain right here. Not 
having to manually do this encoding should make 
people appreciate assembly language as a super 
high level language that makes things easier for the 
programmer. We will be treading this terrain in the 
next 30ish something slides!
This encoding is used to allow the programmer to 
use registers and memory pointers as operands
Memory Pointer Format
● Things you can use in a pointer:
● Register (base register)
● Register multiplied by 1, 2, 4, and 8 (scaled)
● A 8bit or 32 bit offset (displacement)
● All of these are optional
● Examples:
● [eax + ebx * 2]
● [ebx + 0x33]
● [ecx * 8 + 0x11223344]
● [0x33]