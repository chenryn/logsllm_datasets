        |          | (e.g. not for chess problems). Also, remembering "board" is efficient+    
        |          | and simpler.                                                         +    
        |          |                                                                      +    
        |          | The first 64 characters of "board" represent the chessgame locations;+    
        |          | the next four characters encode castling information, and the last   +    
        |          | character is the piece captured in the last move (if any).    
 public | location |     
 public | move     |     
(3 rows)    
```    
玩法参考    
http://api.pgxn.org/src/pgchess/pgchess-0.1.7/doc/pgchess-QUICKSTART.md    
游戏在以下目录    
```    
pgchess-0.1.7/test/sql/play    
-rw-r--r-- 1 digoal users 160 Oct 19  2012 Human_v_PG.sql    
-rw-r--r-- 1 digoal users 148 Oct 19  2012 new-game.sql    
-rw-r--r-- 1 digoal users 160 Oct 19  2012 PG_v_Human.sql    
-rw-r--r-- 1 digoal users 160 Oct 19  2012 PG_v_PG.sql    
-rw-r--r-- 1 digoal users 242 Oct 19  2012 reset-stats.sql    
-rw-r--r-- 1 digoal users 933 Oct 19  2012 _.sql    
-rw-r--r-- 1 digoal users 854 Oct 19  2012 view-stats.sql    
```    
玩法如下      
Step 1    
```    
------    
Load a default game in the chessboard:    
    \i /home/digoal/pgchess-0.1.7/test/sql/play/new-game.sql    
```    
Step 2    
```    
------    
View the game in FEN notation    
    gianni=# select %% game from status;    
                             ?column?                             
    ----------------------------------------------------------    
     rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1    
    (1 row)    
```    
Step 2a (optional)    
```    
------------------    
If you are using a VT100-compatible terminal, you can use an enhanced    
graphical display.    
First make sure that the background is lighter than the foreground (e.g.    
black on white); then issue    
    gianni=# \pset format unaligned    
    Output format is unaligned.    
and check that it is working by displaying the current game:    
gianni=# select # game from status;    
```    
![pic](20170106_01_pic_001.png)      
Step 3    
```    
------    
Now you can start a CPU v CPU game:    
    \i play/PG_v_PG.sql    
you can interrupt the game with CTRL-C.     
Since each half-move is executed in a separate transaction, the game will be left in the state corresponding to the last completed move.    
```    
由于我的终端问题，无法正确的显示图标       
![pic](20170106_01_pic_002.png)      
请使用9.4来把玩，9.5以后这个接口有变，需要修改以上两个游戏模块的代码。    
```    
extern ArrayIterator array_create_iterator(ArrayType *arr, int slice_ndim);    
```    
一个小小的下棋插件，主要体现的是PostgreSQL的开放性，不要把它当成单纯的数据库，它是一个真正的面向对象数据库。    
可以实现很多有趣的特性，能帮助业务解决很多的问题，比如本文末尾有很有很实用的例子，已经帮到了很多用户。       
## Greenplum与PostgreSQL 的机器学习库MADlib    
### 数据库中的人工神经网络体现    
http://www.infoq.com/cn/articles/in-database-analytics-sdg-arithmetic    
PS:  这篇文档中有一些描述的点并不正确（比如UDFA实际上是支持并行的）。    
把机器学习库内置到database中（通过database的UDF）有许多优点，执行机器学习算法时只需要编写相应的SQL语句就可以了，同时database本身作为分析的数据源，使用非常方便，大大降低了机器学习的应用门槛。  
在数据库中，如何编写聚合，在Greenplum如何编写两阶段聚合：  
[《hll插件在Greenplum中的使用 以及 分布式聚合函数优化思路》](../201608/20160825_02.md)    
[《performance tuning about multi-rows query aggregated to single-row query》](../201212/20121217_01.md)    
[《PostgreSQL aggregate function customize》](../201212/20121218_02.md)    
实际上MADlib库中包含了大量的机器学习算法，可以通过已有的数据集合进行训练（比如前面提到的苹果、香蕉等水果的照片）。（类似前面提到的生物神经网络的学习过程）    
那么madlib是什么样的呢？    
### 一张图读懂madlib    
http://blog.163.com/digoal@126/blog/static/163877040201510119148173    
![pic](20170106_01_pic_014.png)  
回归分析，决策树，随机森林，贝叶斯分类，向量机，风险模型，KMEAN聚集，文本挖掘，。。。等。  
一个线性回归的例子，对应上图  
supervised learning -> generalized linear models -> linear regression  
![pic](20170106_01_pic_015.png)  
如果你是R的数据科学家，并且不习惯使用SQL的话，使用pivotalR的R包就可以了，左边是R的写法。右边对应的是SQL。  
![pic](20170106_01_pic_016.png)  
话说如果要预测每个时间点的11.11销售额，可以用到它了。  
PostgreSQL用户来搞数据挖掘有天然优势。  
![pic](20170106_01_pic_017.png)  
madlib的使用手册：  
http://doc.madlib.net/latest/index.html  
http://madlib.incubator.apache.org/docs/latest/group__grp__tsa.html    
pivotalR使用手册  
https://cran.r-project.org/web/packages/PivotalR/PivotalR.pdf  
### IoT、大数据与人工智能的结合    
人工智能的基础是数据、学习算法。  
1\. 人的数据来自哪里？  
五官  
2\. 人工智能的数据来自哪里？  
IoT，万物产生的数字化数据  
3\. 人的数据存哪里？如何处理？  
大脑？  
4\. 人工智能的数据存哪里？如何处理？  
为了提高数据传输的速度，数据和计算单元越近越好，否则不仅需要传输，还需要在计算端暂存，耗时耗力。   
所以数据库本身具备计算能力是最好的，否则一次运算需要的数据在网络上传输花的时间可能是无法想象的。   
有了菜谱，那么就开始找食材吧：  
Greenplum, PostgreSQL, MADLib, R, pivotalR 是不错的食材，可以烧出什么样的菜呢？  
![pic](20170106_01_pic_018.png)      
![pic](20170106_01_pic_019.png)      
阿里云已提供PostgreSQL(支持R, pivotalR, MADlib), HybridDB(base on GPDB, 支持R, pivotalR, MADlib), 用户只需要安心做好开发即可，不需要操心基础设施本身的维护问题了。   