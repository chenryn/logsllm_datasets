A.B.U技术漫谈笔记
pdf版没有索引图，这里我贴上，更直观点。 ABU东西很多，远不止此，期待其他师傅们的分享。同时
师傅们如果有挖掘LOLbins的思路麻烦分享下。
一.介绍
参考: RedCore A.B.U视频教程
# A.B.U 意义：  A.B 活下来，U 活下去（反监控，反溯源，反日志，反取证）  活多久的问题
# A.B.U 目的：  反查杀
二.分类
1. 范式A.B.U
1.1静态A.B.U
1.1.1 文件A.B.U 磁盘文件
（1）加密解密项目推荐 C/C++
WjCryptLib库            MD4，AES等  一个.c文件对应一个.h文件
https://github.com/WaterJuice/WjCryptLib
Cipher
https://github.com/mygityf/cipher
Donut                        强烈推荐 读懂源码=受益匪浅
https://github.com/TheWover/donut  
（2）加密解密项目推荐 C#
NETCore.Encrypt
https://github.com/myloveCc/NETCore.Encrypt
Bing.Encryption
https://github.com/bing-framework/Bing.Encryption
EasyNet
https://github.com/TheWover/EasyNet
StreamCryptor
# A  Anti  
##############
# Anti 反，对抗。    （主动式对抗）  挑衅,对挑衅的对象造成"伤害"  unhook
#
##############
# B  Bypass  
##############
# Bypass            （被动式绕过）  加解密，编码，混淆
#
##############
# U  UnDetection  
##############
# UnDetection       （伪装自己）    掩人耳目，隐匿行踪
#
##############
# 通用方式，对大部分AV,EDR都有一定效果，但是针对某几个AV,EDR效果差
1. source code  修改源码特征等 (c/c++, c#  ros 动态语法分析 自动化打乱)
2. binary 强加密方式 A.B.U
   随机密钥: windows自带的   CryptAPI
https://github.com/bitbeans/StreamCryptor
1.1.2 内存A.B.U 内存映像
(1) Native Dll/Exe Native PE文件 （内存特征码扫描）
(2) 自解密技术
# 静态内存A.B.U  文件始终要运行的，解密还原之后就原形必露了。
1. 加花（junk code） 混淆 obfascation  
   C/C++ assembly 能力
   jmp  @F         // jmp跳转指令
   db  junkcode    // junk code 花指令更绚烂
   @@
2. obfascation 混淆
    一般针对AV，还有一种针对反汇编，逆向而存在的
    一旦你的样本落到了样本分析人员基本就game over.
    关键位置混淆  
1.病毒的自解密
2.内存页的属性要求 RWX  高风险
3.CPU空闲多，某个进程内存操作时会扫描一下刚才拷贝内存的数据
  关键API函数
  VirtualAlloc
  VirtualProtect
  CopyMemmory
(3) 项目推荐
pescrambler
https://github.com/CoolOppo/pescrambler
nullsecuritynet/tools
https://github.com/nullsecuritynet/tools
hyperion
https://github.com/hyperion-project/hyperion
@@@ 汇编器  Tasm  Masm  Nasm  Fasm   
@@@Nasm shellcode生成
@@@ windows系统推荐 Masm 
(4) .Net assembly /PE 中间语言IL Code===》CLR 运行环境
  MSIL  可进行强混淆 强加密(去除特征效果很好)
特性   .dll    /.exe  
混淆本身不是为了静态免杀，而是为了反调试 逆向
(5) 项目推荐 (强混淆 强加密(去除特征效果很好))
ConfuserEx   (该项目已封存，衍生开发也不错)
https://github.com/yck1509/ConfuserEx
ConfuserEx2  mkaring
https://github.com/mkaring/ConfuserEx/releases
obfuscar
https://github.com/obfuscar/obfuscar
koivm 
https://github.com/Loksie/KoiVM-Virtualization
.NET-Obfuscator  (列表)
https://github.com/NotPrab/.NET-Obfuscator
1.1.3 网络A.B.U 网络传输
（1）混淆解密
1. 添加一个Section段
  VC   添加段操作   段名，属性         #execute,shared
  #pragma 操控编译器
  #pragma section("notmalicious",read,write)
 __declspec(allocate("notmalicious")) char shellcode[]=“”;
4. Section Hijacking
   自实现 PE Loader  段加载，加解密
5. shellcode  
   C2 纯shellcode  分段加密，混淆  N个段 jmp结合花指令对shellcode免杀
   PE2 shellcode 在内存中是PE文件,寻址问题
（2）通讯包的定制 Malleable C2 profile
（3）项目推荐
HTTP(S) 强加密强混淆  
Malleable C2 profile
https://github.com/search?q=Malleable+C2+profile
RSA-Library
https://github.com/andrewkiluk/RSA-Library
RSAEuro
https://github.com/mort666/RSAEuro
RSA-Csharp           
https://github.com/xiangyuecn/RSA-csharp
RSAExtensions
https://github.com/stulzq/RSAExtensions
RSAUtil   signature 签名防篡改
https://github.com/stulzq/RSAUtil
1.2动态A.B.U
# Exildata   C2 牵扯到网络
# C2 通讯协议： HTTP(S)   DNS  ICMP  UDP
# HTTPS 网络静态A.B.U
核心数据（对称和非对称加密）
对称：AES   3DES    （密钥交换） 密钥被拿走了，就容易被破解
非对称：RSA
C  (Beacon)   --  S      private key 
一对RSA public key
传输  私钥在S端，这个解密就非常困难了
通讯包的定制  （CS 里面的  Malleable C2 Profile）   静态A.B.U
对边界的防火墙，入侵检测效果很好
C2 良好的涉及
C2（生存能力优秀） ===》 实时更换Profile的能力
foothold  initial access  ==> 第一次选择profile  公共的 套用profile
                              公司内网 web  profile
假设可以回来，然后横向 ==>  web server  假设proxy， 重新编写新的profile,由pc 先经过web 
server
【Redteam Infrastructure】
多个profile  与  多个 TS 之间动态随机转换
每一次下发任务，随机选择profile
【实时更新 profile pool】
【一次task  使用不同的profile （涉及到更复杂的算法）】
# 东西很多，加载说起
'''
加载 执行 开始
1. windows的红队研发  怎么触发
LOLBins  (Living off the land) 就地取材
lolbas  github
(1) PE Loader项目推荐
MemoryModule
https://github.com/fancycode/MemoryModule
mmLoader
https://github.com/tishion/mmLoader
MemoryModulePP   Support exception
https://github.com/strivexjun/MemoryModulePP
(2) RDI项目推荐
reflectivedllinjection
https://github.com/stephenfewer/ReflectiveDLLInjection
Improvedreflectivedllinjection
https://github.com/dismantl/ImprovedReflectiveDLLInjection
ReflectiveLdr
https://github.com/rokups/ReflectiveLdr
(3) .Net Assembly
1. Assembly Load    过AMSI的扫描
2. CLR Hosing（C/C++写的--> CLR Hosing--> .Net Assembly) CS 里面的 execute-assembly
https://github.com/LOLBAS-Project/LOLBAS 强烈建议
https://lolbas-project.github.io/   网页版
win ten  (让我们头疼)  新增了很多防护机制
amsi, Device Guard, ETW(Event 日志), WhiteLising, Applocker
 1.LOLBins 天然的 可以绕过这些安全机制
 2. AV -signature
 3. EDR  ETW  防止被日志记录 也就是 Undetection
接下来就是获取凭据，传文件过去。 
In-memory Loading
1. Native PE
  (1) PE Loader  内存加载技术
  (2) RDI    Reflective Dll Injection
     RDI 太火了，被针对，特征：dll
                bootstrap 引导图---> 导出函数--> func 容易被flag
     hunting  RDI Dll 
    bootstrap remove掉
    PEB加载链   
'''
(4) CLR 项目推荐
CppHostCLR
https://github.com/AzRunRCE/CppHostCLR
Donut (强烈推荐)
go-clr
rust-clr
(5) System Call Directly
'''
C 端   core   使用Native   Native dll 核心功能就是跟 TS通讯，判断目标.Net环境，没有CLR； 
Controller可以采用静默安装，Native Dll也可以提供基本功能cmd,文件浏览等
C 端  load  CLR;   CLR Hosting 加载 .Net Assembly   core dll
.Net Framework 1.0 接口  ICorRuntimeHost
               2.0       ICLRuntimeHost
               4.0       ICLRmetaHost    CLRCreateInstance
               Donut判断  4.0 不需要初始化COM组件
 每一个执行接口对应的API都不一样
 CoInitializeEx 
'''
'''
直接系统调用
https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-
calls-and-srdi-to-bypass-av-edr/
https://www.cnblogs.com/macanpsc/p/11670257.html    翻译文章
https://outflank.nl/blog/2019/10/20/red-team-tactics-active-directory-recon-
using-adsi-and-reflective-dlls/
'''
system calls 系统调用
user mode / kernel mode 
内核态所有驱动共享一块内存区域，内核态编程需谨慎。
virtual address space  虚拟空间  逻辑上被隔离
【IDA】 web浏览器解决小问题
2. 定向A.B.U
2.1静态A.B.U
2.2动态A.B.U
# InterlockedXorRelease  XOR异或API， 通常异或运算符是危险行为 （请忽略）
https://defuse.ca/online-x86-assembler.htm
http://shell-storm.org/online/Online-Assembler-and-Disassembler/
# syscalls 系统调用
https://j00ru.vexillium.org/syscalls/nt/64/
https://github.com/j00ru/windows-syscalls    
# syscall C# 实现
https://jhalon.github.io/utilizing-syscalls-in-csharp-1/
https://jhalon.github.io/utilizing-syscalls-in-csharp-2/
推荐几个优秀网站:
https://outflank.nl/
https://jhalon.github.io/
http://pinvoke.net/
在线编写代码；
https://ideone.com/
https://tio.run/#     多种语言
# 针对某个或者某几个AV,EDR，涉及到此产品的细节原理，需要逆向