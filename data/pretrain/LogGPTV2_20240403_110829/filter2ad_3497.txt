title:Accurate Queue Length Estimation in Wireless Networks
author:Wenyu Jiang
Accurate Queue Length Estimation in Wireless
Networks
Wenyu Jiang
Dolby Laboratories
100 Potrero Ave, San Francisco, CA 94103
PI:EMAIL
Abstract. We describe a method of estimating the instantaneous queue
length of a router or packet forwarding device in the last hop of a wireless
network. Our method is more general and more accurate than QFind,
and utilizes protocol knowledge of wireless networks such as 802.11 to
achieve higher accuracy under both more general traﬃc conditions and
less-than-ideal signal reception conditions during measurements.
1 Introduction
A router’s queue length is an important indicator of network congestion, or lack
thereof. A router’s queue capacity, inﬂuences the quality of network services.
In [1], Claypool et al. describe QFind, a method of estimating the queue
capacity of a last-hop router in an access network. It initiates a bulk download
from a remote server to the measuring client, then it uses the product of delay
increase in probe packets (Dq, the diﬀerence between maximum probe packet
delay Dt and baseline probe packet delay Dl) and bulk download throughput T
as an estimate of the queue capacity in bytes. Then the queue capacity in packets
is qp = Dq × T /s, where s is the packet size of those traﬃc used to “overﬂow”
the router’s queue during a measurement. QFind has some limitations. First,
it assumes that only a single application, initiated by the measuring node, is
tieing up the router’s queue. This is not always true, especially in cable modem
type of access networks. Second, T is an average. This limits the accuracy of
measurements, and does not allow estimation of the instantaneous queue length.
We present a method that solves these problems. In the remainder of this
paper, we will describe and evaluate our method, and compare it with QFind.
2 Description of Queue Length Estimation Method
2.1 Estimation Procedure
Our method derives its estimate based on the deﬁnition of queue length. As
illustrated in Figure 1(a), when packet P arrives at the wireless AP and enters
the queue, there are L packets preceding it, i.e., the queue length is L. When
packet P eventually makes its way to the head of this queue and exits the wireless
S. Uhlig, K. Papagiannaki, and O. Bonaventure (Eds.): PAM 2007, LNCS 4427, pp. 245–249, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
246
W. Jiang
(a) Packet P enters AP at time ts
(b) Packet P exits AP at time tr
Fig. 1. Status of wireless AP queue
AP, exactly L packets would have exited the AP on the same (wireless) network
interface, as evidenced in Figure 1(b).
This is basically how our queue length estimation method works. All we need
is a server that sends a probe packet P to the wireless measuring node, embedded
with a sending timestamp that allows the measuring node to know when to start
counting the packets that exited the AP, and stop counting at the time packet
P is received, the resulting packet count will be exactly the instantaneous queue
length when packet P arrives at the router. To measure the queue capacity, all
one needs to do is initiate a bulk UDP ﬂow that is guaranteed to saturate the
link, and measure the resulting queue length. However, to ensure an accurate
packet count, the following steps must be taken:
1. Filter the packets to only count packets emitted by the respective router/AP.
2. Deal with potential bit errors in observed packets, especially for important
headers involved in the packet ﬁlter of step 1.
3. The clocks on both the sender and receiver (measuring node) must be syn-
chronized to calculate a precise time window for counting packets.
2.2 Packet Filtering
For 802.11[2], all MAC packets or frames have a 2-bit “Direction” ﬂag in their
headers, consisting of a “FromDS” and a “ToDS” bit, where “DS” means an AP
or router. The MAC addresses in a MAC frame, combined with this ﬂag, reveal
the sender and receiver. Below are the packet ﬁlters for counting packets emitted
by an AP, or by a device other than the router/AP, respectively:
(1) FromDS==1 && ToDS==0 && Address2==MAC_AP_in_question
(2) FromDS==0 && ToDS==1 && Address1==MAC_AP_of_device_in_question
&& Address2==MAC_device_in_question
2.3 Dealing with Bit Errors
If the Direction ﬂag is corrupted, we would have counted packets when they
shouldn’t be included and vice versa. Other important headers such as SEQCTL
(sequence control) number, used to uniquely identify packets, are also vulnerable
to bit errors when counting packets. In [3], we describe our zero-redundancy bit
Accurate Queue Length Estimation in Wireless Networks
247
error correction method, by using implicit data redundancy in 802.11 MAC
frames. For example, a MAC address with 1 bit error is easy to correct if no
other valid MAC addresses exist in the network with a Hamming distance ≤ 1.
This allows a more robust result in packet counting and similar procedures.
2.4 Queue Idleness Detection Method and Clock Synchronization
QFind uses the lowest one-way or round-trip delay to establish as a baseline
delay for synchronization. However, QFind cannot verify if the queue is indeed
idle when the lowest delay is measured. We have developed a method that detects
whether a router/AP’s queue is really idle, by reasoning with 802.11 CSMA/CA
protocol interactions. In brief, our method says, if the channel has been idle for
at least DIF S + (CWmin + 1) × timeslot802.11 prior to the ﬁrst transmission of
a certain packet, then the queue of the device that transmitted this packet must
have been empty before this packet arrived in its queue.
Fig. 2. Proof of AP/router queue idleness by contradiction
Figure 2 shows how to prove our method by contradiction. Basically, if packet
P had experienced some queuing delay d > 0, packet P would have been received
earlier than it is actually received. The details of the proof is omitted for brevity.
3 Performance Evaluation
We implemented our queue length estimation method for 802.11 by modifying
the madwiﬁ device driver on the Linux platform in an 802.11 testbed.
Our ﬁrst test is to verify our method, and determine whether a router/AP’s
queue is byte-bounded or packet-bounded. We do this by sending a UDP cross
traﬃc ﬂow, with 3 diﬀerent packet sizes, each lasting 5 seconds and enough to
saturate the AP’s queue. We tested it on a Netgear 802.11g AP. The result is
in Figure 3(a) below, which clearly shows that this router’s queue is packet-
bounded, because when the byte size of cross traﬃc packets changes, only the
queue length reported in number of packets remains nearly constant.
Next we used an AP with a lower transmission power to more easily test the
eﬀect of low SNR within a physically small testbed. We performed a test with 2
competing ﬂows. A 30-second UDP ﬂow and a 10-second TCP bulk download
248
W. Jiang
 0.2
 0.18
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 50
pkt delay (sec)
qlen (Kpkts)
qlen (MB)
qlen (Kpkts)
qlen (Kpts) QFind/TCP
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 55
 60
time (sec)
 65
 70
 25
 30
 35
 40
 45
 50
 55
 60
 65
time (sec)
(a) Eﬀect of cross traﬃc packet size (512,
1024 and 1400 bytes, respectively)
(b) Eﬀect of multiple cross traﬃc ﬂows, our
method vs. QFind
Fig. 3. Eﬀect of various factors on queue length estimation
ﬂow. The average TCP throughput is then used in conjunction with the probe
packet delay to emulate QFind [1]. The results are shown in Figure 3(b). QFind’s
result is clearly much lower than the actual queue length (since it does not
examine packets from other ﬂows), which our method approximates well.
Thirdly, in Figure 4(a), the bottom/lowest curve shows what happens when
we only use MAC frames with a good CRC, the middle curve is when we we
simply ignore the CRC, but take a MAC frame as is (prone to miscounting
packets if some important MAC headers are corrupted), and the top curve using
our zero-redundancy error correction method. It is clear that our method gets
the best result, and closely follows the queue capacity threshold. Finally, in
Figure 4(b), we show that a SNR quality assessment algorithm (bottom curve)
we designed based on 802.11 SEQCTL number consecutiveness (higher value
indicates good SNR), can correlate well with actual SNR (top curve) and queue
length measurements (middle curve). This allows us to easily determine whether
our SNR is good enough to perform queue length or similar measurements that
require packet counting.
 0.2
 0.15
 0.1
 0.05
 0
qlen (Kpkts)
qlen_as_is (Kpkts)
qlen_good_crc (Kpkts)
 0.25
 0.2
 0.15
 0.1
 0.05
 0
-0.05
-0.1
qlen (Kpkts)
SNR (x100dB)
SNR status
 25
 30
 35
 40
 45
 50
 55
 60
 15
 20
 25
 30
 35
 40
 45
 50
 55
time (sec)
time (sec)
(a) Eﬀect of 0-redundancy error correction (b) Eﬀect of SNR
Fig. 4. Eﬀect of SNR and error correction on queue length estimation
Accurate Queue Length Estimation in Wireless Networks
249
4 Conclusions
We present a method for accurately estimating queue lengths of devices with
FIFO queues on a wireless or broadcast medium network. Through analysis and
performance testing, we have shown that our method is more general and more
accurate than QFind, and works much more reliably in less-than-ideal signal
reception conditions. It can be used to enable cross-layer based Explicit Conges-
tion Notiﬁcation (ECN) mechanism in a last-hop network. It can be extended
also to handle multiple FIFO queues, such as in the case of 802.11e, the QoS
enhancement to 802.11, by adding the Traﬃc ID (TID) priority values as the
matching criterion to our packet ﬁlter in Section 2.2.
References
1. Claypool, M., Kinicki, R., Li, M., Nichols, J., Wu, H.: Inferring Queue Sizes in Access
Networks by Active Measurement. In: Passive & Active Measurement Workshop
(PAM). (2004)
2. IEEE 802.11 Working Group: IEEE Std 802.11, Part 11: Wireless LAN Medium
Access Control (MAC) and Physical Layer (PHY) Speciﬁcations. Technical report,
IEEE (1999)
3. Jiang, W.: Bit Error Correction without Redundant Data: a MAC Layer Tech-
nique for 802.11 Networks. In: 2nd International Workshop on Wireless Network
Measurement. (2006)