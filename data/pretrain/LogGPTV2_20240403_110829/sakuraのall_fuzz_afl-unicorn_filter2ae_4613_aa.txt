# sakuraのall fuzz:afl-unicorn
我一直以来都work在语法类fuzz上，产出了很多高质量的漏洞，但事实上我对其他fuzz所知甚少，这个系列权做对各类fuzz的思考和学习记录。
## unicorn学习
主要是[unicorn-engine-tutorial](http://eternal.red/2018/unicorn-engine-tutorial/)这篇文章的学习和一些思考。
### task1
hxp CTF 2017 Fibonacci  
因为想折腾新玩意，所以顺便安装了一个ghrida，[教程](https://zhuanlan.zhihu.com/p/59637690)在这
这个程序整体来看就是输出打印flag，不过打印的非常非常慢。
    sakura@sakuradeMacBook-Pro:~/unicorn$ ./fibonacci
    The flag is: hxp{F
我们的目的是将这个程序用unicorn engine跑起来，那么就开始吧。
    from unicorn import *
    from unicorn.x86_const import *
    import struct
    def read(name):
        with open(name,'rb') as f:
            return f.read()
    def u32(data):
        return struct.unpack("I", data)[0]
    def p32(num):
        return struct.pack("I", num)
    # 初始化unicorn class
    # 第一个参数是指定架构，第二个参数代表64位
    mu = Uc(UC_ARCH_X86, UC_MODE_64)
首先需要自己手动去初始化虚拟内存。  
PS.说到这里我觉得很多对操作系统没什么概念或者学的很差的同学应该就不知道为什么了，这里给出两个资料，把相关部分都看完就理解了。  
[程序的表示、转换与链接](https://www.bilibili.com/video/av69563153?p=77) 关于可执行程序的装载和链接  
[程序的执行和存储访问](https://www.bilibili.com/video/av13398035?p=48) 关于虚拟内存  
[异常、中断和输入输出](https://www.bilibili.com/video/av74071598?p=6)
贴张图，感兴趣的自己去看csapp。  
找到程序载入到虚拟内存的基地址，0x00400000，然后我们在0x0地址处分配一个栈。
    BASE = 0x400000
    STACK_ADDR = 0x0
    STACK_SIZE = 1024*1024
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
将程序load到基地址处，然后设置rsp指向stack。
    mu.mem_write(BASE, read("./fibonacci"))
    mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - 1)
现在我们已经像真正加载可执行程序一样，将其加载到了内存中，现在我们就可以开始运行我们的仿真了。  
现在确定一下想要仿真执行的起始地址和终止地址。  
还是很好找的，0x004004e0-0x00400582
    mu.emu_start(0x00000000004004E0, 0x0000000000400582)
unicorn在模拟执行程序的时候提供hook功能。  
下面这个函数让我们在模拟执行每条指令之前打印出该指令的地址，指令大小。
    def hook_code(mu, address, size, user_data):  
        print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size)) 
    mu.hook_add(UC_HOOK_CODE, hook_code)
最终组合就是下面这个脚本。
    import struct
    def read(name):
        with open(name,'rb') as f:
            return f.read()
    def u32(data):
        return struct.unpack("I", data)[0]
    def p32(num):
        return struct.pack("I", num)
    mu = Uc(UC_ARCH_X86, UC_MODE_64)
    BASE = 0x400000
    STACK_ADDR = 0x0
    STACK_SIZE = 1024*1024
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
    mu.mem_write(BASE, read("./fibonacci"))
    mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - 1)
    def hook_code(mu, address, size, user_data):
        print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
    mu.hook_add(UC_HOOK_CODE, hook_code)
    mu.emu_start(0x00000000004004E0, 0x0000000000400582)
运行遇到如下问题，看一下0x4004ef这条指令为什么会访问到不可访问的地址。
    sakura@ubuntu:~/unicorn$ python3 fibonacci.py
    >>> Tracing instruction at 0x4004e0, instruction size = 0x1
    >>> Tracing instruction at 0x4004e1, instruction size = 0x1
    >>> Tracing instruction at 0x4004e2, instruction size = 0x2
    >>> Tracing instruction at 0x4004e4, instruction size = 0x5
    >>> Tracing instruction at 0x4004e9, instruction size = 0x2
    >>> Tracing instruction at 0x4004eb, instruction size = 0x4
    >>> Tracing instruction at 0x4004ef, instruction size = 0x7
    Traceback (most recent call last):
      File "fibonacci.py", line 31, in 
        mu.emu_start(0x00000000004004E0, 0x0000000000400582)
      File "/home/sakura/.local/lib/python3.6/site-packages/unicorn/unicorn.py", line 288, in emu_start
        raise UcError(status)
    unicorn.unicorn.UcError: Invalid memory read (UC_ERR_READ_UNMAPPED)
BSS段属于静态内存分配。通常是指用来存放程序中未初始化的全局变量和未初始化的局部静态变量。未初始化的全局变量和未初始化的局部静态变量默认值是0，本来这些变量也可以放到data段的，但是因为它们都是0，所以它们在data段分配空间并且存放数据0是没有必要的。  
在程序运行时，才会给BSS段里面的变量分配内存空间。  
在目标文件(*.o)和可执行文件中，BSS段只是为未初始化的全局变量和未初始化的局部静态变量预留位置而已，它并没有内容，所以它不占据空间。
虽然我并不熟知unicorn的运作原理，这只是我第一次使用它，但我们是通过read的方式直接把可执行文件读进基地址的，想也知道bss段的内存肯定是没有被分配的。
所以这里的解决方案是直接在执行这些有问题的指令前，将其rip指向下一条指令，从而跳过这些地址。  
此外因为我们没有把glibc加载到虚拟地址里，所以我们也不能调用glibc函数。
    instructions_skip_list = [0x00000000004004EF, 0x00000000004004F6, 0x0000000000400502, 0x000000000040054F]
    def hook_code(mu, address, size, user_data):  
        print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
        if address in instructions_skip_list:
            mu.reg_write(UC_X86_REG_RIP, address+size)
改一下hook函数就可以了。  
然后因为我们需要打印出flag，而原本flag是通过如下函数打印的。
    _IO_putc((int)(char)uVar3,(_IO_FILE *)stdout)
而此时_IO_putc是没有加载到内存中的，所以我们并不能调用这个函数。  
但是可以看到要打印的flag作为第一个参数传递给该函数，而第一个参数是保存在rdi中的，所以只需要在执行这条指令之前读取rdi的值，然后把这个值打印出来即可。
    def hook_code(mu, address, size, user_data):  
    ...
        elif address == 0x400560:
            c = mu.reg_read(UC_X86_REG_RDI)
            print(chr(c))
            mu.reg_write(UC_X86_REG_RIP, address+size)
其实对我来说能把程序用unicorn跑起来就算是完成任务了。  
算法优化我并不感兴趣，所以看一下下一个task。
### task2
分析如下shellcode
    shellcode = "\xe8\xff\xff\xff\xff\xc0\x5d\x6a\x05\x5b\x29\xdd\x83\xc5\x4e\x89\xe9\x6a\x02\x03\x0c\x24\x5b\x31\xd2\x66\xba\x12\x00\x8b\x39\xc1\xe7\x10\xc1\xef\x10\x81\xe9\xfe\xff\xff\xff\x8b\x45\x00\xc1\xe0\x10\xc1\xe8\x10\x89\xc3\x09\xfb\x21\xf8\xf7\xd0\x21\xd8\x66\x89\x45\x00\x83\xc5\x02\x4a\x85\xd2\x0f\x85\xcf\xff\xff\xff\xec\x37\x75\x5d\x7a\x05\x28\xed\x24\xed\x24\xed\x0b\x88\x7f\xeb\x50\x98\x38\xf9\x5c\x96\x2b\x96\x70\xfe\xc6\xff\xc6\xff\x9f\x32\x1f\x58\x1e\x00\xd3\x80"
先直接反汇编看一眼，嗯，看不懂。  
作者提示了这个shellcode所用的架构是x86-32，且明确说明了是使用了系统调用。  
那基本思路就是hook一下int 80，然后把使用的系统调用号从eax里取出来，然后参数依序从ebx,ecx,edx里取出来。  
    from unicorn import *
    from unicorn.x86_const import *
    mu = Uc(UC_ARCH_X86, UC_MODE_32)
    BASE = 0x400000
    STACK_ADDR = 0x0
    STACK_SIZE = 1024*1024
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
    shellcode = b"\xe8\xff\xff\xff\xff\xc0\x5d\x6a\x05\x5b\x29\xdd\x83\xc5\x4e\x89\xe9\x6a\x02\x03\x0c\x24\x5b\x31\xd2\x66\xba\x12\x00\x8b\x39\xc1\xe7\x10\xc1\xef\x10\x81\xe9\xfe\xff\xff\xff\x8b\x45\x00\xc1\xe0\x10\xc1\xe8\x10\x89\xc3\x09\xfb\x21\xf8\xf7\xd0\x21\xd8\x66\x89\x45\x00\x83\xc5\x02\x4a\x85\xd2\x0f\x85\xcf\xff\xff\xff\xec\x37\x75\x5d\x7a\x05\x28\xed\x24\xed\x24\xed\x0b\x88\x7f\xeb\x50\x98\x38\xf9\x5c\x96\x2b\x96\x70\xfe\xc6\xff\xc6\xff\x9f\x32\x1f\x58\x1e\x00\xd3\x80"
    mu.mem_write(BASE, shellcode)
    mu.reg_write(UC_X86_REG_ESP, STACK_ADDR + STACK_SIZE-1)
    def hook_code(mu, address, size, user_data):
        # print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
        code = mu.mem_read(address,size)
        # print(code)
        if code == b"\xcd\x80":
            print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
            eax = mu.reg_read(UC_X86_REG_EAX)
            ebx = mu.reg_read(UC_X86_REG_EBX)
            ecx = mu.reg_read(UC_X86_REG_ECX)
            edx = mu.reg_read(UC_X86_REG_EDX)
            print("{}: {} {} {}".format(eax,ebx,ecx,edx))
            if(eax == 15):
                file_name = bytes(mu.mem_read(ebx,32)).split(b'\x00')[0]
                print("file_name is {}".format(file_name))
            mu.reg_write(UC_X86_REG_EIP, address+size)
    mu.hook_add(UC_HOOK_CODE, hook_code)
    mu.emu_start(BASE,BASE+len(shellcode))
    sakura@ubuntu:~/unicorn$ python3 sc.py
    >>> Tracing instruction at 0x40006b, instruction size = 0x2
    15: 4194392 438 0
    >>> Tracing instruction at 0x400070, instruction size = 0x2
    1: 4194392 438 0
打开系统调用的解释网站对照看一下。  
查了一下chmod命令可以使用八进制数来指定权限。所以438就是666，代表读写权限。
hex(4194392)->'0x400058',是一个指针，指向的是文件名的字符串，把这个字符串取出来就知道到底读的是什么文件了。  
这里吐个槽python3的mu.mem_read(ebx,32)返回一个bytearray，需要先bytes(xx)转成bytes，浪费了我半小时，另外bytes
split要用b'xxx'
    >>> Tracing instruction at 0x40006b, instruction size = 0x2
    15: 4194392 438 0
    file_name is b'/etc/shadow'
    >>> Tracing instruction at 0x400070, instruction size = 0x2
    1: 4194392 438 0
这样我们就知道这个shellcode其实是将/etc/shadow设置成可读可写。
### task3
gcc function.c -m32 -o function.  
调用super_function，返回的方式1。
    int strcmp(char *a, char *b)
    {
        //get length
        int len = 0;
        char *ptr = a;
        while(*ptr)
        {
            ptr++;
            len++;
        }
        //comparestrings
        for(int i=0; i<=len; i++)
        {
            if (a[i]!=b[i])
                return 1;
        }
        return 0;
    }
    __attribute__((stdcall))
    int  super_function(int a, char *b)
    {
        if (a==5 && !strcmp(b, "batman"))
        {
            return 1;
        }
        return 0;
    }
    int main()
    {
        super_function(1, "spiderman");
    }
从前面的学习，我们已经学会了如何把程序加载进内存用unicorn仿真跑起来，和怎么用hook的方式去改变代码的执行流。  
感觉解法很多...  
分析一下题意，应该是指只调用super_function函数，而不执行代码的其他部分。  
假设基地址是0x08048000,那么要执行的就是0x08048000+0x57b-0x08048000+0x5b1
然后考虑32位传参，先看一下栈帧结构。  
图来自CSAPP第二版。  
    if (a==5 && !strcmp(b, "batman"))