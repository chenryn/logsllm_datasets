3The function clock() need not measure actual time. It can
be replaced by any global strategy for choosing a unique in-
teger s in the range [1, T ], where T is some ﬁxed polynomial
in the security parameter. This is the same as the Gentry-
Ramzan aggregate signatures [16] except that they allow T
to be exponentially large.
477and veriﬁes the signature by checking that
Proof. As in [18], we consider two types of adversaries,
e(γ1, g) = V · e(γ2, w⌈lg(s)⌉zsh).
using either to solve CDH.
Eﬃciency Discussion. Our signatures require two ele-
ments in G plus a (small) integer, which may already be
included in the payload (i.e.,“x is my sensor reading at time
s”.) Unlike the sequential-aggregate signatures of Lu et
al. [23] which are based on Waters signatures, we are able
to move the ui values to the public parameters and thereby
have public keys of only one element in G (whereas theirs
require O(λ) elements). Security degrades linearly in k but
exponentially in ℓ, so the sizes of the message chunks can-
not be too big. In practice, one could ﬁrst apply a collision-
resistant hash function to obtain a 160-bit message, then
set k = 5 and ℓ = 32, which breaks up the message into ﬁve
32-bit message chunks [25]. This would keep the size of the
public parameters to a reasonable 10 elements in G; it would
also allow anyone to verify an aggregate of n signatures using
only 8 pairings and no hashes into G.
Using Asymmetric Groups. Our above construction can
be set in an asymmetric bilinear group, where e : G1 × G2 →
GT . We will not require homomorphisms between G1 and
G2 (in either direction) nor will we require the ability to
hash into either group. This may allow a wider class of
curve choices [15]. Let G1, G2, GT be groups of prime order
p, g1 generate G1 and g2 generate G2. Then to set the public
parameters one would choose random u′
k, w′, z′, h′ ∈
Zp and output
0, . . . , u′
1
2
i
i
,
2 ) ∈ Gk+4
1 ) ∈ Gk+4
1 , h1 = gh′
2 , h2 = gh′
1 , z1 = gz′
2 , z2 = gz′
pp = (ℓ, k, p, G1, G2, g1, g2,
({ui,1 = gu′
1 }i∈[0,k], w1 = gw′
({ui,2 = gu′
2 }i∈[0,k], w2 = gw′
The public key would be pk = ga
1 ∈ G1 with secret key
sk = a. Both signature elements σ1, σ2 would be in G1.
Instantiating our construction using the appropriate choice
of pairing-friendly elliptic curves [14], we obtain very short
signatures (approximately 320 bits plus a short integer for
the time period for an 80 bit security level). The subsequent
security proofs would follow in the same manner based on
the hardness of the co-Computational Diﬃe-Hellman prob-
lem, deﬁned as follows. An algorithm A solves the co-CDH
problem in (G1, G2) with advantage ǫ if
).
Pr[g1 ← G1; g2 ← G2; a, b, ← Zp;
z ← A(g1, ga
1 , gb
1, g2, ga
2 , gb
2) : z = gab
1 ] ≥ ǫ.
4.1 Security Analysis
We refer the reader to Section 1 for intuition on our con-
struction and its proof strategy.
Theorem 4.1. Suppose the (t′, ǫ′)-CDH assumption holds
in group G of prime order p. Then the aggregate signature
scheme above is (t, q, N, ǫ)-secure against existential forgery
under an adaptive chosen message attack provided that
ǫ ≥ 2ǫ′ · max(λ, 2ℓ+1 · q · k) ,
t ≤ t′ − Θ(T (N + q + k))
where q is the number of signing queries, Z = ℓ · k ∈ O(λ)
is the message length, 2λ < p, and T is the maximum time
for an exponentiation in G or GT .
Type I The adversary forges for a message with period s
greater than 2⌈lg(q)⌉.
Type II The adversary forges for a message with period s
less than or equal to 2⌈lg(q)⌉.
Suppose that an adversary A breaks this signature with
total probability ǫ, probability ǫ1 when acting as a type I
forger, and probability ǫ2 when acting as a type II forger.
Let P1 (resp., P2) be the probability that A chooses to be a
type I (resp., type II) forger. Then ǫ = P1 · ǫ1 + P2 · ǫ2.
In Lemma 4.2, we show that if A breaks this scheme as
a type I forger with probability ǫ1, then the simulator can
break CDH with probability ǫ1/λ. In Lemma 4.3, we show
that if A breaks this scheme as a type II forger with proba-
bility ǫ2, then the simulator can break CDH with probability
ǫ2/(2ℓ+1 · q · k). The simulator chooses her setup parameters
diﬀerently depending on which type of adversary she is in-
teracting with. At the start of this game, let the simulator
randomly choose which type of adversary she will interact
with. She will guess correctly with probability exactly one
half and abort otherwise. Both type I and type II simula-
tions will be indistinguishable from the view of the adver-
sary. Thus, the probability of solving the CDH problem is
ǫ′ ≥
„P1 · ǫ1 ·
1
2
1
λ
+ P2 · ǫ2 ·
1
2ℓ+1 · q · k
«
≥
=
P1 · ǫ1 + P2 · ǫ2
2 · max(λ, 2ℓ+1 · q · k)
ǫ
2 · max(λ, 2ℓ+1 · q · k)
.
4.1.1 Type I Adversary
Lemma 4.2. Suppose the (t′, ǫ′)-CDH assumption holds
in G of prime order p. Then the aggregate signature scheme
above is (t, q, N, ǫ)-secure against type I existential forgery
under an adaptive chosen message attack provided that
ǫ ≥ ǫ′ · λ ,
t ≤ t′ − Θ(T (N + q + k))
where q is the number of signing queries, Z = ℓ · k ∈ O(λ)
is the message length, 2λ < p, and T is the maximum time
for an exponentiation in G or GT .
Proof. Given a CDH challenge (g, ga, gb), proceed as:
Setup.
The simulator begins by guessing a value α∗ in the range 1
to λ. This represents a guess that the adversary will forge on
some period s such that α∗ = ⌈lg(s)⌉. For type I adversaries,
recall that if the adversary forges using a time period that
maps to α∗, it will not ask enough signing queries to see an
original signature with a time period that maps to α∗. The
veriﬁcation algorithm rejects on all indexes greater than or
equal to 2λ.
Next, choose random y1, . . . , yk ∈ Zp and set u1 = gy1 , . . . ,
uk = gyk . Then set u0 = gb, w = gbgxw , z = gxz and
h = g−bα∗
gxh , for random xw, xz, xh ∈ Zp.
The simulator outputs the public parameters as (g, u0, . . . ,
uk, w, z, h). For the challenge keys, it sets the public key
478as pk 1 = ga,
implicitly sets the secret key as sk 1 = a,
and sets the internal time record as sprev = 1. For all
other keys i = 2 to N , it chooses a random ai ∈ Zp, sets
pk i = gai and sk i = ai. It outputs the key information as
(pk 1, (pk 2, sk 2), . . . , (pk N , sk N )).
Queries.
When the adversary asks for a signature on message M =
M1M2 . . . Mk ∈ {0, 1}Z , the simulator ﬁrst checks the clock
as s = clock(). If s ≤ sprev or s ≥ 2λ, it outputs ⊥. Other-
wise, it updates its time period recorder sprev := s.
If α∗ = ⌈lg(s)⌉, the simulator’s guess was incorrect and
it aborts. Otherwise, it computes the signature by choosing
random t′ ∈ Zp, computing α = ⌈lg(s)⌉ and
σ2 = gt′
σ1 = (ga)Pk
/(ga)1/(α−α∗ ) = gt′−a/(α−α∗ )
i=1 yiMi · σxw α+xz s+xh
2
· (gb)t′ (α−α∗ )
and outputting (σ1, σ2, s).
Let us implicitly set the randomness t = t′ − a/(α − α∗)
(here t′ gives t the proper distribution) and we have
σ1 = (
k
Y
i=1
uMi
i
)a · (gxw αzsgxh )t · gbt′ (α−α∗ )
, σ2 = gt
, s.
above equation that
˜γ1 =
N
Y
i=1
(u0
k
Y
j=1
u
Mi,j
j
)ai (w⌈lg(˜s)⌉z ˜sh)t.
Let ˜α = ⌈lg(˜s)⌉.
correctly and, since a1 = a, we have that:
If α∗ = ˜α, then the simulator guessed
˜γ1 =
=
N
Y
i=1
N
Y
i=1
(gb
(gb
k
Y
j=1
k
Y
j=1
gyj Mi,j )ai · ((gb+xw ) ˜α(gxz )˜s(g−bα∗+xh ))t
gyj Mi,j )ai · (gt)xw ˜α+xz ˜s+xh
= gab · (gb)PN
i=2 ai · (ga)Pk
j=1 yj M1,j
N
k
·
Y
Y
i=2
j=1
gyj Mi,j ai · (gt)xw ˜α+xz ˜s+xh
= gab · (gb)PN
i=2 ai · (ga)Pk
(ai (Pk
j=1 yj M1,j
· gPN
i=2
j=1 Mi,j yj )) · (gt)xw ˜α+xz ˜s+xh
The simulator computes
j=1 yj M1,j
A = (ga)Pk
B = (gb)PN
i=2 ai
To verify correctness, notice that we can rewrite σ1 as fol-
lows:
outputs gab computed as
˜γ1
σ1 = (
k
Y
i=1
uMi
i
)a · gab · (gxw αzsgxh )t · gbt′ (α−α∗ )
· g−ab(α−α∗ )/(α−α∗ )
k
= (gb
Y
uMi
i
)a(gxw αzsgxh )t · gbα(t′−a/(α−α∗ ))
i=1
· g−bα∗ (t′−a/(α−α∗ ))
= (u0
= (u0
= (u0
k
Y
i=1
k
Y
i=1
k
Y
i=1
uMi
i
)a · (gxw αzsgxh )t · gbαt · g−bα∗t
uMi
i
)a · ((gbgxw )αzs(g−bα∗
gxh ))t
uMi
i
)a · (wαzsh)t
Output.
Eventually, the type I adversary outputs a valid aggre-
gate signature ˜σ = ( ˜γ1, ˜γ2, ˜s) on some message sequence
(M1, . . . , MN ) ∈ {0, 1}Z×N under public keys (pk 1, . . . , pk N )
such that 2⌈lg(q)⌉ < ˜s < 2λ. We parse each Mi in chunks as
Mi,1 . . . Mi,k, where each chunk is ℓ bits. From the veriﬁca-
tion equation, we see that
e( ˜γ1, g) =
N
e(
Y
i=1
gai , u0) · e( ˜γ2, w⌈lg(˜s)⌉z ˜sh) ·
k
N
Y
e(
Y
j=1
i=1
gaiMi,j , uj).
Interpreting ˜γ2 as gt, for some t ∈ Zp, it follows from the
A · B · gPN
i=2
(ai (Pk
j=1 Mi,j yj )) · (gt)xw ˜α+xz ˜s+xh
If α∗ (= ˜α, the simulator aborts. α∗ = ˜α with probability
1/λ. Therefore, if a type I adversary can break this scheme
with probability of ǫ, then the simulator can solve the CDH
problem with probability of at least ǫ/λ.
4.1.2 Type II Adversary
Proof of Lemma 4.2 appears just above. It covers the case
where the adversary forges with a time period that is “too
high” and thus is similar to [18]. Our proof of the following
lemma is more interesting, as we no longer have a chameleon
hash function to help answer the adversary’s signing queries
and thus must ﬁnd a new strategy. We break the message
into ℓ-bit chunks (instead of chameleon hashing it). This
allows us to keep all portions of the signed message “out
from under” any fresh randomness in the signature, which
enable aggregation. In the proof, the simulator makes three
guesses: s∗ ∈ [1, 2⌈lg(q)⌉], M ′ ∈ [0, 2ℓ − 1] and β∗ ∈ [1, k].
These individual guesses represent a single guess that the
β∗th chunk of the forgery message will diﬀer from the value
M ′ which will be the β∗th chunk of the message that the
adversary asks to sign at time period s∗. We can then use
techniques by Boneh and Boyen [10] to simulate.
Lemma 4.3. Suppose the (t′, ǫ′)-CDH assumption holds
in G of prime order p. Then the aggregate signature scheme
above is (t, q, N, ǫ)-secure against type II existential forgery
under an adaptive chosen message attack provided that
ǫ ≥ ǫ′ · (2ℓ+1 · q · k) ,
t ≤ t′ − Θ(T (N + q + k))
where q is the number of signing queries, Z = ℓ · k ∈ O(λ)
is the message length, 2λ < p, and T is the maximum time
for an exponentiation in G or GT .
Proof. Given a CDH challenge (g, ga, gb), proceed as:
479Setup.