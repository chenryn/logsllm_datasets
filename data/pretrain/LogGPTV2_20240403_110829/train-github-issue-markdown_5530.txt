Hi,
The things i've been playing the most with three.js are the shaderMaterial and
the json exporter.
My goal was to export the tangent space from 3ds max, and write a synced
shader to unpack them.
A crude example can be seen here:  
http://dusanbosnjak.com/test/webGL/new/poredjenjeNM/poredjenjeNormala_01.html  
The crude json format that im using currently looks like this:
http://dusanbosnjak.com/test/webGL/new/poredjenjeNM/meshes/tocak_guma.js
I have some issues with these indecis, and UV channels along with
normals/bitangent are scrambled, these can all probably be sorted during the
export.  
I am a bit confused as to how this data gets mapped on the gpu.
This particular mesh has 660 triangles, 360 vertices, 429 uv/norm/bitan.
During the import I assign all of these values to each face, selecting them
using the exported indecis from the json. I wanted to add a bitangent
attribute, but there isn't a 'slot' so to speak.
I could not figure out how to add this through the material attribute. Some
examples i've seen iterate through this based on geometry.vertices but there
are duplicates/splits - vertices that share two or more normals or uvs.
The way i was able to hack this was by first extending face3 to hold another
group of values for the bitang, and then copying the tangent buffer during the
renderer setup. When the importer imports this mesh, it sets up a flag on it,
and this additional attribute is created the same way it is for the tangents
or normals. But now im stuck on using this particular build.
I wonder if this makes any sense. What would be the best way of importing this
additional attribute, and making sure that each and every value goes exactly
where it needs to go.