 2
 0
1% Mistake Rate
5% Mistake Rate
10% Mistake Rate
15% Mistake Rate
 2
 4
 6
 8
 10
 12
 14
 16
SINR (dB)
Figure 3: Decision boundary for different mistake rates as a function of
SINR. At high SINR (> 12dB), all PHY symbols with Hamming distance
less than 16 (the maximum possible in the Zigbee physical layer), will
satisfy the mistake rate threshold. But at intermediate SINRs (5-12 dB),
the PHY symbols have to be picked carefully depending on the mistake
rate threshold.
When forwarding data, the node creates random linear combina-
tions of the clean symbols in the packets it has heard from the same
batch, as explained in §6, and broadcasts the resulting coded packet.
It also decides how much each neighbor should forward to balance
load and maximize throughput, as described in §7.
Any MAC protocol may be used in MIXIT, but the scheme de-
scribed in §8.1 achieves higher concurrency than standard CSMA
because it takes advantage of MIXIT’s ability to cope with much
higher error rates than previous routing protocols.
4.3 The Destination
MIXIT provides a rateless network code. Hence, the destination sim-
ply collects all the packets it can hear until it has enough information
to decode the original data as described in §9. Furthermore, MIXIT
provides ﬂexible reliability semantics. Depending on application
requirements, the destination can decide how much information is
enough. For example, if the application requires full reliability the
destination waits until it can decode 100% of the original symbols,
whereas if the application requires 90% reliability, the destination
can be done once it decodes 90% of the original symbols. Once the
destination decodes the required original symbols, it sends a batch-
ack to the source. The ack is sent using reliable single path routing,
and causes the source to move to the next batch. For the rest of the
paper, we will assume that the destination wants 100% reliability.
5 Classifying Received Symbols
MIXIT operates over symbols, which are groups of PHY symbols. A
symbol is classiﬁed as clean if none of the constituent PHY symbols
are erroneous with a probability higher than γ. It is classiﬁed dirty
otherwise. We call the threshold γ, the mistake rate, and it is a
conﬁgurable parameter of the system. To satisfy the mistake rate
threshold, MIXIT’s network layer picks a decision boundary on the
soft values [8] of the PHY symbols. If all constituent PHY symbols
in our symbol have soft values below this decision boundary, then the
symbol is classiﬁed as clean, else it is dirty. The decision boundary
depends on the mistake rate as well as the channel SINR [29, 25].
Fig. 3 supports this argument. The ﬁgure is generated using a GNU
software radio implementation of the Zigbee protocol (see §10). The
ﬁgure plots the decision boundary on soft values of PHY symbols for
varying SINR at different mistake rates of 1%, 5%, 10% and 15%.
Clearly the boundary depends both on the mistake rate as well as the
SINR. The SINR measures the channel noise and interference, and
hence reﬂects how much we should trust the channel to preserve the
correlation between transmitted and received signals [29]. Factoring
in the speciﬁed mistake rate, we can use the above map to pick the
right decision boundary to classify symbols.
MIXIT uses the SoftPHY interface proposed in [8], which anno-
tates the decoded PHY symbols with conﬁdence values and sends
them to higher layers. We also augment the interface to expose the
SINR. The SINR can be estimated using standard methods like that
in [10]. The map in Fig. 3 can be computed ofﬂine, since the rela-
tionship between SINR, the conﬁdence estimate, and the decision
boundary is usually static [17]. The MIXIT network layer uses the
PHY information to classify symbols as clean and dirty, and then
performs symbol-level network coding over the clean symbols as
described in the next section.
6 The MIXIT Network Code
When the MAC permits, the node may forward a coded packet. The
symbols in a coded packet are linear combinations of the clean sym-
bols received in packets from the same batch. To see how the coding
works let us look at an example.
6.1 MIXIT in Action
Consider the scenario in Fig. 4, where the source S wants to deliver
two packets, Pa and Pb, to the destination. Let the bit error rate
(BER) be relatively high such that when the source S broadcasts Pa
and Pb, the nodes in the network receive some symbols in errors. The
network layer at each node classiﬁes the symbols as either clean or
dirty using the SoftPHY hints as described in §5. Fig. 4 illustrates the
dirty symbols using shaded cells.
The objective of our symbol-level codes is to minimize the over-
head required to funnel the clean symbols to their destination. Specif-
ically, most symbols are received correctly by both R1 and R2. Hence,
without additional measures, the routers will transmit the same sym-
bols to the destination, wasting wireless capacity. To avoid such
waste, MIXIT makes the routers forward random linear combinations
of the clean symbols they received. Assuming ai and bi are the ith
symbols in Pa and Pb respectively, router R1 picks two random num-
bers α and β , and creates a coded packet Pc, where the ith symbol, ci
is computed as follows:
αai + β bi
αai
β bi
if ai and bi are clean symbols
if ai is clean and bi is dirty
if ai is dirty and bi is clean.
ci =
If both ai and bi are dirty, no symbol is sent. Similarly, R2 generates
a coded packet Pd by picking two random values α ′ and β ′ and
applying the same logic in the above equation. Since R1 and R2 use
random coefﬁcients to produce the coded symbols, it is unlikely that
they generate duplicate symbols [5].
When R1 and R2 broadcast their respective packets, Pc and Pd,
the destination receives corrupted versions where some symbols are
incorrect, as shown in Fig. 4. Thus the destination has four partially
corrupted receptions: Pa and Pb, directly overheard from the source,
contain many erroneous symbols; and Pc and Pd, which contain a few
erroneous symbols. For each symbol position i, the destination needs
to decode two original symbols ai and bi. As long as the destination
receives two uncorrupted independent symbols in location i, it will
be able to properly decode [5]. For example, consider the symbol
position i = 2, the destination has received:
c2 = αa2 + β b2
d2 = α ′a2.
1a
1b
2a
2b
na
nb
S
S
1a
1b
2a
2b
na
nb
α
β
R1
1c
2c
nc
c =
1 βb
αa
c
=
2
1
2
+
βb
2
c =
n αa
n
d
=
1
d =
2
aα'
1
aα'
2
+
bβ'
1
d =
n
bα'
n
2d1d
nd
R2
na
nb
α'
β'
1a
1b
2a
2b
1a
1b
1c
1d
2a
2b
2c
2d
D
D
na
nb
nc
nd
c
2
=
d =
2
αa
2
aα'
+
βb
2
2
Solve linear 
equations
(a
)b,
2
2
Figure 4: Example showing how MIXIT works: The source broadcasts
Pa and Pb. The destination and the routers, R1 and R2, receive cor-
rupted versions of the packets. A shaded cell represents a dirty symbol.
If R1 and R2 forward the clean symbols without coding, they generate
redundant data and waste capacity. With symbol-level network coding,
the routers transmit linear combinations of clean symbols, ensuring that
they forward useful information to the destination.
Given that the header of a coded packet contains the multipliers
(e.g., α and β ), the destination has two linear equations with two
unknowns, a2 and b2, which are easily solvable (the details of the
decoder are explained in §9). Once the destination has decoded all
symbols correctly, it broadcasts an ACK, causing the routers to stop
forwarding packets.
6.2 Efﬁcient Symbol-Level Codes
The difﬁculty in creating a network code over symbols is not the
coding operation, but in how we express the code efﬁciently. The
length of a symbol is small, one or a few bytes. The MIXIT header in
the forwarded packet has to specify how each symbol is derived from
the native symbols so that the destination can decode. If all symbols
in a packet are multiplied by the same number, then effectively we
have a packet-level code, which can be easily expressed by putting
the multiplier in the header. However, in MIXIT we want to code
clean symbols and ignore dirty ones; i.e., only clean symbols are
multiplied by a non-zero number.
Consider a simple example where the batch size is K = 2 with the
two packets; Pa and Pb. Say that our forwarder has received two
coded packets Pc = αPa + β Pb and Pd = α ′Pa + β ′Pb. Now our
forwarder picks two random numbers v1 and v2 and creates a linear
combination of the two packets it received.
P = v1Pc + v2Pd = (v1α + v2α ′)Pa + (v1β + v2β ′)Pb
Thus, the newly generated packet has a code vector ~v = (v1α +
v2α ′, v1β + v2β ′). This vector would be sufﬁcient to describe the
whole packet if the forwarder received only clean symbols. Specif-
ically, the clean symbol in the jth position in packet P, called sj, is
coded as follows:
sj = v1cj + v2dj,
where ci and dj are clean
= (v1α + v2α ′)aj + (v1β + v2β ′)bj
But because some received symbols are dirty, we need a more detailed
description of how individual symbols in the packet P are derived
from the native symbols. Depending on whether the forwarder has
cleanly received the jth symbols in Pc and Pd, called cj and dj respec-
tively, the generated symbol sj might take one of four possible values,
with respect to the native symbols.
sj =
(v1α + v2α ′)aj + (v1β + v2β ′)bj
v1αaj + v1β bj
v2α ′aj + v2β ′bj
0 × aj + 0 × bj
cj and dj are clean
only cj is clean
only dj is clean
cj and dj are dirty
(1)
Input Packets with clean
and dirty symbols
r
1v
r
2v
r
3v
1R
2R 3R 4R
5R
6R
7R
Naive Coded Packet
Header describing
runs and code vectors
r
(1),v[(γ 3
r
v[(α
),vβ
1
r
+
2
:
1000)]
(1001
:
1500)]
r
3vγ
r
vα
1
r
vβ
2
+
First Outgoing Coded Packet
r
vβ'
2
r
vα'
1
r
vβ'
2
r
vα'
1
r
vγ'
3
r
vγ'
3
+
+
+
Second Outgoing Coded Packet
Figure 5: Creating coded packets with longer runs: The forwarder re-
ceived 3 packets with code vectors v1, v2 and v3. All packets contain
dirty symbols represented as shaded areas. Naively coding over all clean
received symbols results in a coded packet with 7 different runs. How-
ever, by ignoring some of the clean symbols, the node can generate coded
packets with much fewer runs.
Each different value of the symbol is associated with a different code
vector, the header has to specify for each symbol in a transmitted
packet what is the symbol’s code vector.
We address this issue using the following two mechanisms.
(1) Run-length encoding: Because wireless errors are bursty [18,
28], a sequence of consecutive symbols will have the same code
vector. We can therefore use run-length encoding to describe the
encoding of the transmitted symbols in an efﬁcient manner. The
header speciﬁes a sequence of runs, each of which is described as
[(Code Vector of run), (Runstart : Runend)]. For exam-
ple, in Fig. 5, the header of the ﬁrst outgoing coded packet will specify
two runs, [(γ~v3), (1, 1000)] and [(α~v1 + β~v2), (1001, 1500)].
(2) Pick codes that give longer runs: We force the overhead to stay
small by intentionally discarding clean symbols that fragment our run-
length-encoding. Said differently, a forwarder can decide to ignore
some clean symbols to ensure the header has longer runs of symbols
with the same code vector, and thus can be encoded efﬁciently.
Consider the example in Fig. 5, where the forwarder has received 3
packets, each with some dirty symbols. Naively, applying the symbol-
level network code along with the run-length encoding described
above, we get a coded packet that has seven different runs. But,
we can create fewer runs of longer lengths by ignoring some clean
symbols in the coding procedure. For example, in the ﬁrst ﬁve runs
in the naive coded packet, we can ignore clean symbols from the ﬁrst
and second received packets. As a result, the ﬁve runs would coalesce
to a single longer run with the code vector γ~v3, where γ is a random
multiplier and ~v3 is the code vector of the third received packet.
Similarly for the last two runs, if we ignore clean symbols from the
third received packet, we are left with a single longer run with the
code vector α~v1 + β~v2, where α and β are random multipliers and~v1
and~v2 are the code vectors of the ﬁrst and second received packets.
The resulting coded packet shown in Fig. 5 has only two runs with
two code vectors, and requires less overhead to express.
But, what if the forwarder has to transmit a second coded packet?
One option is to ignore the same set of clean symbols as above, but use
different random multipliers, α ′, β ′, γ ′. We would get a coded packet
with two runs and their code vectors being γ ′~v3 and α ′~v1 + β ′~v2.
But this transmission will be wasteful, since the symbols in the ﬁrst
run are not innovative w.r.t the ﬁrst coded packet the node already
transmitted (γ ′~v3 is not linearly independent of γ ′~v3). The solution
is to split the ﬁrst long run into two smaller runs by including clean
symbols from the ﬁrst and second packets, which we had previously
ignored. The second coded packet, shown in Fig. 5 has 3 runs with
3 different code vectors β ′~v2 + γ ′~v3, α ′~v1 + γ ′~v3 and α ′~v1 + β ′~v2 .