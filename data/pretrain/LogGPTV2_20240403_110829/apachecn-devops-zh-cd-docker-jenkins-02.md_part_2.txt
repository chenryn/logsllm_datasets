$ docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
78445dd45222: Pull complete
Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
Status: Downloaded newer image for hello-world:latest
Hello from Docker!
This message shows that your installation appears to be working correctly.
...
```
恭喜，您刚刚运行了第一个 Docker 容器。希望你已经感受到 Docker 有多简单。让我们一步一步地看看引擎盖下发生了什么:
1.  您使用`run`命令运行了 Docker 客户端。
2.  Docker 客户端联系了 Docker 守护进程，请求从名为`hello-world`的映像创建一个容器。
3.  Docker 守护程序检查它是否包含本地的`hello-world`映像，并且由于它不包含，所以从远程 Docker Hub 注册表请求`hello-world`映像。
4.  Docker Hub 注册表包含`hello-world`映像，因此它被拉入 Docker 守护程序。
5.  Docker 守护程序从`hello-world`映像创建了一个新的容器，该容器启动了产生输出的可执行文件。
6.  Docker 守护程序将此输出流式传输到 Docker 客户端。
7.  Docker 客户端将其发送到您的终端。
预计流量如下图所示:
![](img/991a6408-e39f-4455-80eb-b42d883c3a49.png)
让我们看看本节中说明的每个 Docker 组件。
# Docker 组件
官方 Docker 页面这样写道:
"Docker Engine is a client-server application that creates and manages Docker objects, such as images and containers."
让我们弄清楚这意味着什么。
# Docker 客户端和服务器
让我们看一个展示 Docker 引擎架构的图表:
![](img/22168b81-9283-421d-8295-d0af9d675db3.png)
Docker 引擎由三个组件组成:
*   **后台运行的 Docker 守护进程**(服务器)
*   **Docker 客户端**作为命令工具运行
*   **REST API**
安装 Docker 引擎意味着安装所有组件，以便 Docker 守护程序始终作为服务在我们的计算机上运行。在`hello-world`示例中，我们使用 Docker 客户端与 Docker 守护程序进行交互；然而，我们可以使用 REST API 做完全相同的事情。同样，在 hello-world 示例中，我们连接到本地 Docker 守护程序；但是，我们可以使用同一个客户端与运行在远程机器上的 Docker 守护程序进行交互。
To run the Docker container on a remote machine, you can use the `-H` option:  `docker -H :2375 run hello-world`
# Docker 映像和容器
映像是 Docker 世界中的无状态构建块。您可以将映像想象成运行应用所需的所有文件的集合，以及如何运行它的方法。映像是无状态的，因此您可以通过网络发送它，将它存储在注册表中，命名它，对它进行版本化，并将其保存为文件。映像是分层的，这意味着您可以在另一个映像的基础上构建一个映像。
容器是映像的运行实例。如果我们想拥有同一个应用的许多实例，我们可以从同一个映像创建许多容器。因为容器是有状态的，所以我们可以与它们交互，并更改它们的状态。
让我们看看容器和映像层结构的例子:
![](img/0099e866-f813-47d3-a4b7-b34fb88f722b.png)
在底部，总是有基本映像。在大多数情况下，它代表一个操作系统，我们在现有基础映像的基础上构建映像。从技术上来说，创建自己的基本映像是可能的，但是这是很少需要的。
在我们的示例中，`ubuntu`基础映像提供了 Ubuntu 操作系统的所有功能。`add git`图片增加了 Git 工具包。然后，有一个添加了 JDK 环境的映像。最后，在顶部，有一个由`add JDK`映像创建的容器。例如，这样的容器能够从 GitHub 存储库中下载一个 Java 项目，并将其编译成一个 JAR 文件。因此，我们可以使用这个容器来编译和运行 Java 项目，而无需在我们的操作系统上安装任何工具。
需要注意的是，分层是节省带宽和存储的非常聪明的机制。假设我们有一个同样基于`ubuntu`的应用:
![](img/26c3a1aa-7f15-49e9-9c27-e5a2ed80fbdb.png)
这次我们将使用 Python 解释器。安装`add python`镜像的时候，Docker 守护程序会注意到`ubuntu`镜像已经安装好了，只需要添加`python`层就可以了，非常小。所以`ubuntu`映像是一个被重用的依赖。如果我们希望在网络中部署我们的映像，也是如此。当我们部署 Git 和 JDK 应用时，我们需要发送整个`ubuntu`映像。然而，在随后部署`python`应用时，我们只需要发送小的`add python`层。
# Docker 申请
许多应用都是以 Docker 映像的形式提供的，可以从互联网上下载。如果我们知道映像的名称，那么用我们在 hello world 示例中使用的相同方式运行它就足够了。我们如何在 Docker Hub 上找到所需的应用映像？
让我们以 MongoDB 为例。如果我们想在 Docker Hub 上找到它，我们有两个选择:
*   搜索 Docker 集线器浏览页面(https://hub . docker . com/explore/)
*   使用`docker search`命令
在第二种情况下，我们可以执行以下操作:
```
$ docker search mongo
NAME DESCRIPTION STARS OFFICIAL AUTOMATED
mongo MongoDB document databases provide high av... 2821 [OK] 
mongo-express Web-based MongoDB admin interface, written... 106 [OK] 
mvertes/alpine-mongo light MongoDB container 39 [OK]
mongoclient/mongoclient Official docker image for Mongoclient, fea... 19 [OK]
...
```
有很多有趣的选择。我们如何选择最好的形象？通常，最吸引人的是没有任何前缀的那个，因为这意味着它是一个正式的 Docker Hub 映像，因此应该是稳定和维护的。带有前缀的图片是非官方的，通常作为开源项目维护。在我们的例子中，最好的选择似乎是`mongo`，所以为了运行 MongoDB 服务器，我们可以运行以下命令:
```
$ docker run mongo
Unable to find image 'mongo:latest' locally
latest: Pulling from library/mongo
5040bd298390: Pull complete
ef697e8d464e: Pull complete
67d7bf010c40: Pull complete
bb0b4f23ca2d: Pull complete
8efff42d23e5: Pull complete
11dec5aa0089: Pull complete
e76feb0ad656: Pull complete
5e1dcc6263a9: Pull complete
2855a823db09: Pull complete
Digest: sha256:aff0c497cff4f116583b99b21775a8844a17bcf5c69f7f3f6028013bf0d6c00c
Status: Downloaded newer image for mongo:latest
2017-01-28T14:33:59.383+0000 I CONTROL [initandlisten] MongoDB starting : pid=1 port=27017 dbpath=/data/db 64-bit host=0f05d9df0dc2
...
```
仅此而已，MongoDB 已经开始了。将应用作为 Docker 容器运行就这么简单，因为我们不需要考虑任何依赖关系；它们都与映像一起交付。
On the Docker Hub service, you can find a lot of applications; they store more than 100,000 different images.
# 建筑映像
Docker 可以被视为运行应用的有用工具；然而，真正的力量在于构建自己的 Docker 映像，将程序与环境包装在一起。在本节中，我们将看到如何使用两种不同的方法来实现这一点，Docker `commit`命令和 Dockerfile 自动构建。
# Docker 提交
让我们从一个例子开始，用 Git 和 JDK 工具包准备一个映像。我们将使用 Ubuntu 16.04 作为基础映像。没有必要去创造它；Docker Hub 注册表中提供了大多数基本映像:
1.  从`ubuntu:16.04`运行一个容器，并将其连接到其命令行:
```
 $ docker run -i -t ubuntu:16.04 /bin/bash
```
我们已经提取了`ubuntu:16.04`映像并将其作为一个容器运行，然后以交互方式调用`/bin/bash`命令(`-i`标志)。你应该看看容器的 Docker。由于容器是有状态的和可写的，我们可以在它的终端做任何我们想做的事情。
2.  安装 Git 工具包:
```
 root@dee2cb192c6c:/# apt-get update
 root@dee2cb192c6c:/# apt-get install -y git
```
3.  检查是否安装了 Git 工具包:
```
 root@dee2cb192c6c:/# which git
 /usr/bin/git
```
4.  退出容器:
```
 root@dee2cb192c6c:/# exit
```
5.  通过与`ubuntu`映像进行比较，检查容器中发生了什么变化:
```
 $ docker diff dee2cb192c6c
```
该命令应该打印容器中所有已更改文件的列表。
6.  将容器提交给映像:
```
 $ docker commit dee2cb192c6c ubuntu_with_git
```
我们刚刚创建了第一个 Docker 映像。让我们列出 Docker 主机的所有映像，看看映像是否存在:
```
$ docker images
REPOSITORY       TAG      IMAGE ID      CREATED            SIZE
ubuntu_with_git  latest   f3d674114fe2  About a minute ago 259.7 MB
ubuntu           16.04    f49eec89601e  7 days ago         129.5 MB
mongo            latest   0dffc7177b06  10 days ago        402 MB
hello-world      latest   48b5124b2768  2 weeks ago        1.84 kB
```
不出所料，我们看到了`hello-world`、`mongo`(之前安装过)、`ubuntu`(从 Docker Hub 中提取的基础映像)和新构建的`ubuntu_with_git`。顺便说一下，我们可以观察每个映像的大小，它对应于我们在映像上安装的内容。
现在，如果我们从该映像创建一个容器，它将安装 Git 工具:
```
$ docker run -i -t ubuntu_with_git /bin/bash
root@3b0d1ff457d4:/# which git
/usr/bin/git
root@3b0d1ff457d4:/# exit
```
使用完全相同的方法，我们可以在`ubuntu_with_git`映像上构建`ubuntu_with_git_and_jdk`:
```
$ docker run -i -t ubuntu_with_git /bin/bash
root@6ee6401ed8b8:/# apt-get install -y openjdk-8-jdk
root@6ee6401ed8b8:/# exit
$ docker commit 6ee6401ed8b8 ubuntu_with_git_and_jdk
```
# Dockerfile
使用提交命令手动创建每个 Docker 映像可能会很费力，尤其是在构建自动化和持续交付过程的情况下。幸运的是，有一种内置语言来指定构建 Docker 映像应该执行的所有指令。