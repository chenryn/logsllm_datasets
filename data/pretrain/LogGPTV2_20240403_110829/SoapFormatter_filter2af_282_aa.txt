# SoapFormatter
SoapFormatter类似XmlSerializer，用于生成基于xml的soap数据流，命名空间位于System.Runtime.Serialization.Formatters.Soap。
# demo
    using System;
    using System.IO;
    using System.Runtime.Serialization.Formatters.Soap;
    using System.Text;
    namespace SoapDeserialization
    {
        [Serializable]
        class Person
        {
            private int age;
            private string name;
            public int Age { get => age; set => age = value; }
            public string Name { get => name; set => name = value; }
            public void SayHello()
            {
                Console.WriteLine("hello from SayHello");
            }
        }
        class Program
        {
            static void Main(string[] args)
            {
                SoapFormatter soapFormatter = new SoapFormatter();
                Person person = new Person();
                person.Age = 10;
                person.Name = "jack";
                using (MemoryStream stream = new MemoryStream())
                {
                    soapFormatter.Serialize(stream,person);
                    string soap = Encoding.UTF8.GetString(stream.ToArray());
                    Console.WriteLine(soap);
                    stream.Position = 0;
                    Person p = (Person)soapFormatter.Deserialize(stream);
                    Console.WriteLine(p.Name);
                    p.SayHello();
                }
                Console.ReadKey();
            }
        }
    }
输出
    10
    jack
    jack
    hello from SayHello
soap使用xmlns标间来限定命名空间，体现在a1标签。
同样实现两个接口 IRemotingFormatter, IFormatter，具有多个序列化反序列化方法重载，具有代理选择器。
# 攻击链
在ysoserial.net中，SoapFormatter同样有很多的攻击链。本章节介绍ActivitySurrogateSelector、ActivitySurrogateSelectorFromFile、ActivitySurrogateDisableTypeCheck。
## ActivitySurrogateSelector
在《dotnet serialize
101》中我们已经介绍了代理选择器的使用方法，这里不再赘述。而代理选择器的用法在于是原本不能被序列化的类可以用来序列化和反序列化。看一个demo
    using System;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Soap;
    namespace SoapDeserialization
    {
        class Person
        {
            public string Name { get; set; }
            public Person(string name)
            {
                Name = name;
            }
            public override string ToString()
            {
                return Name;
            }
        }
        sealed class PersonSerializeSurrogate : ISerializationSurrogate
        {
            public void GetObjectData(Object obj, SerializationInfo info, StreamingContext context)
            {
                var p = (Person)obj;
                info.AddValue("Name", p.Name);
            }
            public Object SetObjectData(Object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
            {
                var p = (Person)obj;
                p.Name = info.GetString("Name");
                return p;
            }
        }
        class Program