User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
通达信数据，编写查询语句实现如下分析场景系统信息详情。

## SPL 语句
(appname:tdx  NOT 连接信息) 系统信息 | eval time=formatdate(timestamp,"MM-dd HH:mm:ss") | table time,TDX.REQUEST_TYPE,TDX.message | where !empty(TDX.message)

## 具体解释

Assistant: ### 分析需求

根据提供的需求描述，目标是编写一个SPL（Search Processing Language）查询语句，用于查询和分析通达信数据系统中的“系统信息详情”。这个需求的核心在于从大量的日志数据中提取出有用的信息，特别是与系统信息相关的部分。

### SPL 语句分析

1. **(appname:tdx NOT 连接信息)**

这一部分是一个过滤条件，它筛选出应用名为`tdx`且不包含“连接信息”的日志事件。`appname:tdx`用于指定应用范围，而`NOT 连接信息`则是一个否定条件，用于排除包含“连接信息”的日志。
2. **系统信息**

这个部分是搜索词，它会匹配所有包含“系统信息”字样的日志事件。
3. **| eval time=formatdate(timestamp,"MM-dd HH:mm:ss")**

这是一个表达式，用于创建一个新的字段`time`。`eval`是SPL中的评估命令，用于计算和创建新的字段。`formatdate`函数用于格式化`timestamp`字段，将其转换为“MM-dd HH:mm:ss”的格式，即月份-日期 小时:分钟:秒钟的格式。这个新字段将用于后续的排序和展示。
4. **| table time,TDX.REQUEST_TYPE,TDX.message**

这一部分用于创建一个表格视图，展示`time`、`TDX.REQUEST_TYPE`和`TDX.message`这三个字段的信息。这样可以让用户更直观地查看相关数据。
5. **| where !empty(TDX.message)**

这是一个过滤条件，用于排除`TDX.message`字段为空的记录。`!empty()`是一个条件函数，当`TDX.message`字段非空时返回`true`，从而筛选出包含有效消息的记录。

### 总结

综合以上分析，这个SPL查询语句的目的是从`tdx`应用中筛选出与“系统信息”相关的日志事件，并排除包含“连接信息”的记录。然后，它创建一个新的时间字段，并以表格的形式展示时间、请求类型和消息内容，同时确保表格中只包含消息字段非空的记录。这样的查询语句能够帮助用户快速定位和分析系统信息相关的日志详情。