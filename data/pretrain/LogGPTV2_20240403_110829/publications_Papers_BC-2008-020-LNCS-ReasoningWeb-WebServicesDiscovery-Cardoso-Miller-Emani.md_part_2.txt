### 2.3.1 WSDL and Semantics

Although the primary purpose of WSDL (Web Services Description Language) is to define the syntax of a Web service interface, some level of semantics or meaning is essential for the interface and its operations to be usable. The key issue is not whether WSDL descriptions inherently possess semantics, but rather how complete and precise these semantics are, and whether they can be effectively and automatically processed.

### 2.3.2 SAWSDL

WSDL is most useful when standards (such as naming conventions and predefined interfaces) are consistently applied. This allows for automation if exact matching is used and all parties strictly adhere to the standard. Automation tools for discovery and composition can then blindly find and connect components. However, this approach has only been successful in narrow domains or controlled organizations and is unlikely to scale to the broader Web.

**Table 1: Allowable SAWSDL Annotations**

| Model | Lifting | Lowering |
|-------|---------|----------|
| Reference | Yes | No | No |
| SchemaMapping | Yes | No | No |
| Reference | Yes | Yes | Yes |
| SchemaMapping | Yes | Yes | Yes |
| Reference | Yes | Yes | Yes |
| SchemaMapping | Yes | No | No |
| Reference | Yes | No | No |

One could adopt a more comprehensive and formalized description of Web services, such as OWL-S [14], but a simpler augmentation of WSDL may suffice. This is the idea behind WSDL-S [16] and the even simpler Semantic Annotations for WSDL (SAWSDL). As of August 2007, SAWSDL has been accepted as a W3C recommendation for augmenting WSDL and associated XML Schema documents with semantic annotations. Although designed for WSDL 2.0 (accepted as a W3C recommendation in July 2007), SAWSDL also works with WSDL 1.1, which is currently more widely used. SAWSDL focuses on the Interface portion of WSDL 2.0 (or PortType in WSDL 1.1) and its sub-elements, attaching semantics to principal elements by annotating them with concepts from a semantic model (e.g., classes within an OWL ontology). These annotations can be easily filtered out, leaving the original WSDL intact.

SAWSDL provides three types of annotations:
- **Model References:** Indicate what an element means in the ontological world.
- **Lifting Schema Mappings:** Transform data up to the ontological world.
- **Lowering Schema Mappings:** Transform data back down to the ontological world.

These mappings are essentially descriptions that do not need to be directly applied at runtime. For example, when one service needs to invoke another, a semantic discovery and composition tool can use these mappings to determine compatibility. In composition, the mappings can provide transformations from one XSD to another without going up to the ontological world. Table 1 cross-references SAWSDL annotations with the elements they annotate.

### 2.3.3 Using Radiant to Add Semantics to WSDL

Radiant [19] is a tool for marking up Web service descriptions with ontologies. Part of the METEOR-S project at the LSDIS lab, University of Georgia, Radiant supports WSDL-S and SAWSDL, allowing users to add semantics to Web services using WSDL's extensibility. Radiant provides an intuitive UI for annotating WSDL files with ontologies, supporting all WSDL-S/SAWSDL specifications. The framework includes algorithms to match and annotate WSDL files with relevant ontologies, categorizing Web services into domains. A key feature is achieving annotation with maximum automation while maintaining quality (see [19] for details on automation).

**Steps to Annotate Web Services Using Radiant:**
1. Start the Eclipse Workbench1.
2. Open the “Help” menu.
3. Select “Software Updates.”
4. Choose “Find and Install.”
5. Select “Search for new features to install” and click next.
6. Click “New Remote Site.”
7. Enter “http://lsdis.cs.uga.edu/Radiant/UpdateSite” in the URL box.
8. Enter “Radiant” for the name field.
9. Check the box next to Radiant and click next.
10. Click Finish.
11. In the new dialog box, check Radiant and click next.
12. Accept the license agreement and follow any onscreen dialogs to install the plug-in.
13. Open the Radiant perspective from the window drop-down menu.
14. Create a new project and open an existing WSDL document.
15. Load the ontology in the Ontology Navigator.
16. Select the annotation type from the drop-down menu.
17. Click on the outline to get the tree view of the WSDL document and select the concept for annotation.
18. Drag the element to the appropriate section of the WSDL tree to add annotations.

### 3. Matching Algorithm for Semantic Web Services

This section introduces the SM-T (Semantic Matching Web services using Tversky’s model) algorithm for matching semantic Web services. The algorithm computes the degree of match between output, input, and functionality concepts of a service request and advertisement, represented by an ontology. Given a service request and multiple advertisements, the algorithm can identify the most suitable Web services. Web services can be annotated using Radiant [20], and MWSDI [7] and Lumina [21] can use the SM-T algorithm for discovery.

The algorithm leverages the fact that input, output, and functionality concepts may have properties (e.g., attributes) and considers the level of generality or specificity within the ontology and their relationships with other concepts. Unlike syntactic-based matching, semantic-based matching can utilize this information.

**Formal Definition of a Semantic Web Service:**

A Web service operation's functionality can be specified through preconditions, postconditions, and effects. These specifications are usually detailed and precise enough for runtime but may be cumbersome for discovery. For discovery, it is advantageous to use description logic (e.g., OWL). A functionality concept is given meaning based on its position in a hierarchy and its sub-functions. A concise, high-level description facilitates comparison between services. A functional concept must specialize its parent concept and generalize all child concepts, including component functional concepts (children) that carry out the steps required for the overall functional concept. Programmatic details should be excluded to avoid complexity.