11
 slots[1]
10
12
 11 
slots[1]  ~ slots[2047]
3
31415
12
16381
***
slots[2047]
16382
16382
Q
第17章
16383
16383
群 
·253
---
## Page 258
254◆第三部分多机数据库的实现
7002三个节点的集群来说：
节点自己目前负责处理哪些槽。
通过消息发送给集群中的其他节点，以此来告知其他
图17-12
numslots属性之外，它还会将自己的 slots 数组
17.2.2
17-10 所示的slots 数组来说，节点处理的槽数量为6。
二进制位的数量。
派给节点负责，这两个动作的复杂度都是 O(1)。
一个给定节点的 slots 数组来说，程序检查节点是否负责处理某个槽，又或者将某个槽指
举个例子，对于前面展示的包含7000、7001.
111111
比如说，对于图 17-9 所示的 slots 数组来说，
至于 numslots 属性则记录节点负责处理的槽的数量，也即是 slots 数组中值为1的
7000
口
口节点7000会通过消息向节点7001和节点
一个节点除了会将自己负责处理的槽记录在clusterNode 结构的 slots 属性和
因为取出和设置 s1ots 数组中的任意一个二进制位的值的复杂度仅为 O(1)，所以对于
0
我负责处理
知这两个节点，自己负责处理槽10001至槽16383，如图17-13 所示。
节点7002会通过消息向节点7000和节点7001发送自己的s1ots数组，以此来告
7002发送自己的 s1ots 数组，以此来告知这两个节点，自己负责处理槽 5001至槽
10000，如图 17-12 所示。
图 17-11 所示。
两个节点，
7002 发送自己的 slots 数组，以此来告知这
7001告知 7000和 7002 自己负责
传播节点的槽指派信息
7001
处理的槽
集群
自己负责处理槽0至槽5000，如
一
7002
一
我负资处理
图 17-137002告知 7000和 7001 自己负责
槽10001至槽16383
-1
7000
节点处理的槽数量为8，而对于图
图 17-11 
我负责处理
7000
一
7002
17000告知7001和7002自己负
处理的槽
责处理的槽
我负责处理
我负责处理
7001
槽10001至槽163831
我负责处理
7002
7001
---
## Page 259
法高效地解决的问题，而clusterState.slots 数组的存在解决了这些问题：
slots数组将会是图17-14所示的样子：
17.2.3记录集群所有槽的指派信息
因此，集群中的每个节点都会知道数据库中的16384个槽分别被指派给了集群中的哪些节点。
并且每个接收到slots数组的节点都会将数组保存到相应节点的clusterNode结构里面，
slots 数组进行保存或者更新。
clusterState.nodes字典中查找节点B对应的clusterNode结构，并对结构中的
因为集群中的每个节点都会将自已的 slots 数组通过消息发送给集群中的其他节点
口如果节点只使用clusterNode.slots 数组来记录槽的指派信息，那么为
如果只将槽指派信息保存在各个节点的clusterNode.slots 数组里，会出现一些无
口数组项slots[10001]至slots[16383]的指针都指向代表节点7002的
数组项slots[5001]至slots[10000］的指针都指向代表节点7001的
 数组项slots[0］至slots [5000］的指针都指向代表节点 7000的clusterNode
举个例子，对于7000、7001、7002三个节点来说，它们的clusterState 结构的
如果 slots[i”指针指向一个 clusterNode 结构，那么表示槽i 已经指派给了
 如果 slots“i］指针指向 NULL，那么表示槽i尚未指派给任何节点。
slots 数组包含16384个项，每个数组项都是一个指向 clusterNode 结构的指针:
clusterState 结构中的 slots 数组记录了集群中所有16384个槽的指派信息：
typedef struct clusterState ↑
当节点A通过消息从节点B那里接收到节点B的 slots 数组时，节点A会在自己的
clusterNode 结构，表示槽 5001至 10000 都指派给了节点 7001。
结构，表示槽0至5000都指派给了节点7000。
) clusterState;
clusterNode 结构，表示槽10001至16383都指派给了节点 7002。
clusterNode 结构所代表的节点。
N为 clusterState.nodes 字典保存的 clusterNode 结构的数量。
slots 数组，直到找到负责处理槽i的节点为止，这个过程的复杂度为 O(M)，其中
clusterState.nodes字典中的所有clusterNode结构，检查这些结构的
了知道槽i是否已经被指派，或者槽i被指派给了哪个节点，程序需要遍历
clusterNode *slots[16384];
第17章  集  
群·255
---
## Page 260
了节点7002，如图17-15所示。
给了哪个节点，那么只要访问数组项slots［10002］，就可以马上知道槽10002被指派给
第三部分多机数据库的实现
举个例子，对于图 17-14 所示的 s1ots 数组来说，如果程序需要知道槽10002 被指派
口 而通过将所有槽的指派信息保存在clusterState.slots 数组里面，程序要检查槽
slots[i］的值即可，这个操作的复杂度仅为 O(1)。
i 是否已经被指派，又或者取得负责处理槽i的节点，只需要访问 clusterState.
访问 slots[10002]的值→
clusterState
clusterState
slots
slots
图 17-14
图17-15 访问 slots[10002] 的值
clusterNode*[16384]
clusterState 结构的 slots数组
16383
10002
10001
10000
5002
5001
5000
16383
10002
10001
++
 clusterNode
clusterNode
"127.0.0.1#
 clusterNode
clusterNode
ip
---
## Page 261
位的值都是0，这说明当前节点没有被指派任何槽，并且集群中的所有槽都是未指派的。
slots 数组中的所有指针都指向 NULL，并且clusterNode.slots 数组中的所有二进制
该命令的节点负责：
17.2.4
组的关键区别所在。
slots 数组只记录了clusterNode 结构所代表的节点的槽指派信息，这是两个 slots 数
但使用clusterNode 结构的 slots 数组来记录单个节点的槽指派信息仍然是有必要的：
举个例子，图17-16展示了一个节点的clusterState结构，clusterState。
CLUSTERADDSLOTS 命令接受一个或多个槽作为参数，并将所有输人的槽指派给接收
CLUSTER ADDSLOTS  [slot ...]
clusterState.slots 数组记录了集群中所有槽的指派信息，
口因为当程序需要将某个节点的槽指派信息通过消息发送给其他节点时，程序只需要
def CLUSTER_ADDSLOTS (*all_input_slots) :
CLUSTERADDSLOTS命令的实现可以用以下伪代码来表示：
另一方面，如果Redis不使用clusterNode.slots 数组，
要说明的一点是，虽然clusterState.slots 数组记录了集群中所有槽的指派信息，
slots 数组要麻烦和低效得多。
clusterState.slots 数组的话，那么每次要将节点A的槽指派信息传播给其
处理哪些槽，然后才能发送节点A的槽指派信息，这比直接发送clusterNode.
他节点时，程序必须先遍历整个 clusterState.slots 数组，记录节点A负责
将相应节点的clusterNode.slots 数组整个发送出去就可以了。
for i in all_input_slots:
for i in all_input_slots:
#遍历所有输入槽，检查它们是否都是未指派槽
 CLUSTER ADDSLOTS 命令的实现
那么再次遍历所有输入槽，将这些槽指派给当前节点
如果所有输入槽都是未指派槽
setSlotBit(clusterState.myself.slots, i)
clusterState.slots[i] = clusterState.myself
#设置clusterState 结构的 slots 数组
if clusterState.slots[i] != NULL:
#如果有哪怕一个槽已经被指派给了某个节点
访问代表当前节点的 clusterNode 结构的 slots 数组
将slots[i］的指针指向代表当前节点的clusterNode结构
那么向客户端返回错误，
return
reply_error()
并终止命令执行
，而 clusterNode.
第17章
而单独使用
·257
---
## Page 262
258·第三部分多机数据库的实现
可以向集群中的节点发送数据命令了。
17.3
其他节点，自己目前正在负责处理哪些槽。
的样子：
在对数据库中的16384个槽都进行了指派之后，集群就会进人上线状态，这时客户端就
最后，在CLUSTER ADDSLOTS 命令执行完毕之后，节点会通过发送消息告知集群中的
 并且 clusterNode.slots 数组在索引1 和索引 2上的位被设置成了 1。
 将槽1 和槽 2 指派给节点之后，节点的 clusterState 结构将被更新成图 17-17 所示
slots
myself
clusterState.slots 数组在索引l1和索引 2上的指针指向了代表当前节点的
CLUSTER ADDSLOTS 1 2
当客户端对17-16所示的节点执行命令：
clusterNode 结构。
在集群中执行命令
图 17-17 执行 CLUSTER ADDSLOTS 命令之后的 clusterState 结构
myself
slots
16383
clusterNode*[16384]
图17-16节点的 clusterState 结构
clusterNode
16383
slots
→NULL
clusterNode
NULL
slots
NULL
索引01
值
23
→
0
NULL
NULL
NULL
NULL
***
**
16383
16383
0
---
## Page 263
节点7000负责处理：
客户端连上节点7000，并发送以下命令，那么命令会直接被节点7000执行：
数据库键属于哪个槽，并检查这个槽是否指派给了自己：
本节接下来的内容将介绍计算键所属槽的方法，节点判断某个槽是否由自己负责的方
这是因为键 msg 所在的槽6257是由节点7001负责处理的，而不是由最初接收命令的
举个例子，如果我们在之前提到的，由7000、7001、7002三个节点组成的集群中，用
口当客户端第一次向节点7000 发送SET命令的时候，节点7000会向客户端返回
但是，如果我们执行以下命令，那么客户端会先被转向至节点7001，然后再执行命令：
因为键date所在的槽2022正是由节点7000负责处理的。
127.0.0.1:7000> SET date "2013-12-31"
图17-18 展示了这两种情况的判断流程。
口如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个MOVED 错
口如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令。
当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的
127.0.0.1:7001> GET msg
OK
OK
会被节点7001成功执行。
MOVED错误，指引客户端转向至节点7001。
误，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。
当客户端转向到节点7001之后，客户端重新向节点7001发送SET命令，这个命令
节点执行命令
负责处理键所在槽的节点？
图17-18判断客户端是否需要转向的流程
当前节点就是
节点计算键属于哪个槽
节点向客户端返回一个
客户端向节点发送数据库键命令
客户端根据MOVED错误提供的信息
MOVED 错误
不是
转向至正确的节点
重试
第17章 集 
群·259
---
## Page 264
260◆第三部分多机数据库的实现
i 的节点。
结构所记录的节点IP和端口号，向客户端返回 MOVED 错误，指引客户端转向至正在处理槽
i 并非由当前节点负责，节点会根据clusterState.slots［i”指向的clusterNode
由当前节点负责，节点可以执行客户端发送的命令。
中的项i，判断键所在的槽是否由自己负责：
17.3.2判断槽是否由当前节点负责处理
的伪代码实现：
计算出一个介于0至16383之间的整数作为键key的槽号。
17.3.1计算键属于哪个槽
对数据的相同和不同之处。
法，以及 MOVED 错误的实现方法，最后，本节还会介绍节点和单机 Redis 服务器保存键值
2）如果clusterState.slots[i］ 不等于 clusterState.myself，那么说明槽
当节点计算出键所属的槽i 之后，节点就会检查自己在clusterState.slots 数组
举个例子，假设图 17-19 为节点 7000的 clusterState 结构:
def CLUSTER_KEYSLOT(key):
CLUSTERKEYSLOT命令就是通过调用上面给出的槽分配算法来实现的，以下是该命令
使用CLUSTERKEYSLOT命令可以查看一个给定键属于哪个槽：
其中 CRC16（key）语句用于计算键key的CRC-16 校验和，而&16383语句则用于
def slot_number(key) :
节点使用以下算法来计算给定键 key属于哪个槽:
(integer) 14943
127.0.0.1:7000> CLUSTER KEYSLOT "fruits"
(integer) 5798
127.0.0.1:7000> CLUSTER KEYSLOT "name"
(integer) 6257
127.0.0.1:7000> CLUSTER KEYSLOT "mSg"