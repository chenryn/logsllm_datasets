(Accessed on 05/26/2020).
[38] Rafael Pass, Lior Seeman, and Abhi Shelat. 2017. Analysis of the Blockchain
Protocol in Asynchronous Networks. In Advances in Cryptology - EUROCRYPT
2017 - 36th Annual International Conference on the Theory and Applications of
Cryptographic Techniques, Paris, France, April 30 - May 4, 2017, Proceedings, Part
II (Lecture Notes in Computer Science), Vol. 10211. 643‚Äì673.
[39] R3. 2017. R3‚Äôs Corda Partner Network Grows to Over 60 Companies Including
Hewlett Packard Enterprise, Intel and Microsoft. https://www.r3.com/press-
media/r3s-corda-partner-network-grows-to-over-60-companies-including-
hewlett-packard-enterprise-intel-and-microsoft/. (Accessed on 06/02/2020).
[40] R3. 2020. Corda Source Code. https://github.com/corda/corda.
(Accessed on
04/24/2020).
[41] R3. 2020. R3 Corda Master documentation. https://docs.corda.net/docs/corda-
os/4.4.html. (Accessed on 04/24/2020).
[42] Reuters. 2015. Nine of world‚Äôs biggest banks join to form blockchain partnership.
https://www.reuters.com/article/us-banks-blockchain/nine-of-worlds-biggest-
banks-join-to-form-blockchain-partnership-idUSKCN0RF24M20150915.
(Accessed on 05/26/2020).
[43] Shifeng Sun, Man Ho Au, Joseph K. Liu, and Tsz Hon Yuen. 2017. RingCT 2.0: A
Compact Accumulator-Based (Linkable Ring Signature) Protocol for Blockchain
Cryptocurrency Monero. In Computer Security - ESORICS 2017 - 22nd European
Symposium on Research in Computer Security, Oslo, Norway, September 11-15,
2017, Proceedings, Part II (Lecture Notes in Computer Science), Vol. 10493. Springer,
456‚Äì474.
[44] Digital Asset Canton Team. 2019. Canton: A Private, Scalable, and Compos-
able Smart Contract Platform. https://www.canton.io/publications/canton-
whitepaper.pdf. (Accessed on 11/27/2019).
[45] Gavin Wood. 2014. Ethereum: A secure decentralised generalised transaction
ledger. https://gavwood.com/paper.pdf. (Accessed on 01/18/2019).
[46] Tsz Hon Yuen, Shifeng Sun, Joseph K. Liu, Man Ho Au, Muhammed F. Esgin,
Qingzhao Zhang, and Dawu Gu. 2020. RingCT 3.0 for Blockchain Confidential
Transaction: Shorter Size and Stronger Security. In Financial Cryptography and
Data Security - 24th International Conference, FC 2020, Kota Kinabalu, Malaysia,
February 10-14, 2020 Revised Selected Papers (Lecture Notes in Computer Science),
Vol. 12059. Springer, 464‚Äì483.
[47] Mahdi Zamani, Mahnush Movahedi, and Mariana Raykova. 2018. RapidChain:
Scaling Blockchain via Full Sharding. In Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security, CCS 2018, Toronto, ON,
Canada, October 15-19, 2018. ACM, 931‚Äì948.
APPENDIX:
A A BRIEF INTRO TO THE IUC FRAMEWORK
This section provides a brief introduction to the iUC framework,
which underlies all results in this paper. The iUC framework [11]
is a highly expressive and user friendly model for universal com-
posability. It allows for the modular analysis of different types of
protocols in various security settings.
The iUC framework uses interactive Turing machines as its un-
derlying computational model. Such interactive Turing machines
can be connected to each other to be able to exchange messages.
A set of machines Q = {M1, . . ., Mùëò} is called a system. In a run
of Q, there can be one or more instances (copies) of each machine
in Q. One instance can send messages to another instance. At any
point in a run, only a single instance is active, namely, the one to
receive the last message; all other instances wait for input. The
active instance becomes inactive once it has sent a message; then
the instance that receives the message becomes active instead and
can perform arbitrary computations. The first machine to run is
the so-called master. The master is also triggered if the last active
machine did not output a message. In iUC, the environment (see
next) takes the role of the master. In the iUC framework a special
user-specified CheckID algorithm is used to determine which in-
stance of a protocol machine receives a message and whether a new
instance is to be created (see below).
To define the universal composability security experiment (cf.
Camenisch et al. [11]), one distinguishes between three types of
systems: protocols, environments, and adversaries. As is standard
in universal composability models, all of these types of systems
have to meet a polynomial runtime notion . Intuitively, the secu-
rity experiment in any universal composability model compares a
protocol P with another protocol F , where F is typically an ideal
specification of some task, called ideal protocol or ideal functionality.
The idea is that if one cannot distinguish P from F , then P must
be ‚Äúas good as‚Äù F . More specifically, the protocol P is considered
secure (written P ‚â§ F ) if for all adversaries A controlling the
network of P there exists an (ideal) adversary S, called simulator,
controlling the network of F such that {A, P} and {S, F } are in-
distinguishable for all environments E. Indistinguishability means
that the probability of the environment outputting 1 in runs of the
system {E, A, P} is negligibly close to the probability of outputting
1 in runs of the system {E,S, F } (written {E, A, P} ‚â° {E,S, F }).
The environment can also subsume the role of the network attacker
A, which yields an equivalent definition in the iUC framework. We
usually show this equivalent but simpler statement in our proofs,
i.e., that there exists a simulator S such that {E, P} ‚â° {E,S, F }
for all environments.
A protocol P in the iUC framework is specified via a system of
machines {ùëÄ1, . . ., ùëÄùëô}; the framework offers a convenient template
for the specification of such systems. Each machine ùëÄùëñ implements
one or more roles of the protocol, where a role describes a piece of
code that performs a specific task. For example, a (real) protocol
Psig for digital signatures might contain a signer role for signing
messages and a verifier role for verifying signatures. In a run
of a protocol, there can be several instances of every machine,
interacting with each other (and the environment) via I/O interfaces
and interacting with the adversary (and possibly the environment
subsuming a network attacker) via network interfaces. An instance
of a machine ùëÄùëñ manages one or more so-called entities. An entity
is identified by a tuple (pid, sid, role) and describes a specific party
with party ID (PID) pid running in a session with session ID (SID)
sid and executing some code defined by the role role where this role
has to be (one of) the role(s) of ùëÄùëñ according to the specification of
ùëÄùëñ. Entities can send messages to and receive messages from other
entities and the adversary using the I/O and network interfaces
of their respective machine instances. More specifically, the I/O
interfaces of both machines need to be connected to each other
(because one machine specifies the other as a subroutine) to enable
communication between entities of those machines.
Roles of a protocol can be either public or private. The I/O in-
terfaces of private roles are only accessible by other (entities be-
longing to) roles of the same protocol, whereas I/O interfaces of
public roles can also be accessed by other (potentially unknown)
protocols/the environment. Hence, a private role models some
internal subroutine that is protected from access outside of the
protocol, whereas a public role models some publicly accessible
operation that can be used by other protocols. One uses the syn-
tax ‚Äú(pubrole1, . . . , pubrolen | privrole1, . . . , privrolen)‚Äù to
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1057uniquely determine public and private roles of a protocol. Two
protocols P and Q can be combined to form a new more complex
protocol as long as their I/O interfaces connect only via their public
roles. In the context of the new combined protocol, previously pri-
vate roles remain private while previously public roles may either
remain public or be considered private, as determined by the proto-
col designer. The set of all possible combinations of P and Q, which
differ only in the set of public roles, is denoted by Comb(Q, P).
An entity in a protocol might become corrupted by the adver-
sary, in which case it acts as a pure message forwarder between
the adversary and any connected higher-level protocols as well as
subroutines. In addition, an entity might also consider itself (implic-
itly) corrupted while still following its own protocol because, e.g.,
a subroutine has been corrupted. Corruption of entities in the iUC
framework is highly customizable; one can, for example, prevent
corruption of certain entities during a protected setup phase.
The iUC framework supports the modular analysis of protocols
via a so-called composition theorem:
Corollary A.1 (Concurrent composition in iUC; informal).
Let P and F be two protocols such that P ‚â§ F . Let Q be another
protocol such that Q and F can be connected. Let R ‚àà Comb(Q, P)
and let I ‚àà Comb(Q, F) such that R and I agree on their public
roles. Then R ‚â§ I.
By this theorem, one can first analyze and prove the security
of a subroutine P independently of how it is used later on in the
context of a more complex protocol. Once we have shown that
P ‚â§ F (for some other, typically ideal protocol F ), we can then
analyze the security of a higher-level protocol Q based on F . Note
that this is simpler than analyzing Q based on P directly as ideal
protocols provide absolute security guarantees while typically also
being less complex, reducing the potential for errors in proofs.
Once we have shown that the combined protocol, say, (Q | F)
realizes some other protocol, say, F ‚Ä≤, the composition theorem and
transitivity of the ‚â§ relation then directly implies that this also
holds true if we run Q with an implementation P of F . That is,
(Q | P) is also a secure realization of F ‚Ä≤. Please note that the
composition theorem does not impose any restrictions on how the
protocols P, F , and Q look like internally. For example, they might
have disjoint sessions, but they could also freely share some state
between sessions, or they might be a mixture of both. They can
also freely share some of their subroutines with the environment,
modeling so-called globally available state. This is unlike most other
models for universal composability, such as the UC model, which
impose several conditions on the structure of protocols for their
composition theorem.
Notation in Pseudo Code. ITMs in our paper are specified in
pseudo code. Most of our pseudo code notation follows the notation
of the iUC framework as introduced by Camenisch et al. [11]. To
ease readably of our figures, we provide a brief overview over the
used notation here.
The description in the main part of the ITMs consists of blocks of
the form Recv ‚ü®msg‚ü© from ‚ü®sender‚ü© to ‚ü®receiver‚ü©, s.t. ‚ü®condition‚ü©:
‚ü®code‚ü© where ‚ü®msg‚ü© is an input pattern, ‚ü®sender‚ü© is the receiving
interface (I/O or NET), ‚ü®receiver‚ü© is the dedicated receiver of the
message and ‚ü®condition‚ü© is a condition on the input. ‚ü®code‚ü© is the
(pseudo) code of this block. The block is executed if an incoming
message matches the pattern and the condition is satisfied. More
specifically, ‚ü®msg‚ü© defines the format of the message ùëö that invokes
this code block. Messages contain local variables, state variables,
strings, and maybe special characters. To compare a message ùëö to
a message pattern msg, the values of all global and local variables
(if defined) are inserted into the pattern. The resulting pattern ùëù
is then compared to ùëö, where uninitialized local variables match
with arbitrary parts of the message. If the message matches the
pattern ùëù and meets ‚ü®condition‚ü© of that block, then uninitialized
local variables are initialized with the part of the message that they
matched to and ‚ü®code‚ü© is executed in the context of ‚ü®receiver‚ü©; no
other blocks are executed in this case. If ùëö does not match ùëù or
‚ü®condition‚ü© is not met, then ùëö is compared with the next block.
Usually a recv from block ends with a send to clause of form
send ‚ü®msg‚ü© to ‚ü®sender‚ü© where msg is a message that is send via
output interface sender.
If an ITM invokes another ITM, e.g., as a subroutine, ITMs may
expect an immediate response. In this case, in a recv from block,
a send to statement is directly followed by a wait for statement.
We write wait for ‚ü®msg‚ü© from ‚ü®sender‚ü©, s.t. ‚ü®condition‚ü© to denote
that the ITM stays in its current state and discards all incoming
messages until it receives a message ùëö matching the pattern msg
and fulfilling the wait for condition. Then the ITM continues the
run where it left of, including all values of local variables.
To clarify the presentation and distinguish different types of
variables, constants, strings, etc. we follow the naming conventions
of Camenisch et al. [11]:
1. (Internal) state variables are denoted by sans-serif fonts, e.g., a.
2. Local (i.e., ephemeral) variables are denoted in italic font.
3. Keywords are written in bold font (e.g., for operations such as
sending or receiving).
4. Commands, procedure, function names, strings and constants
element/string from the list/tuple/set/string ùêæ.
are written in teletype.
Additional Notation. To increase readability, we use the fol-
lowing non-standard notation during the specifications of machines
in the iUC template:
‚Ä¢ For a set of tuples ùêæ, ùêæ .add(_) adds the tuple to ùêæ.
‚Ä¢ For a string ùëÜ, ùëÜ.add(_) concatenates the given string to ùëÜ.
‚Ä¢ ùêæ .remove(_) removes always the first appearance of the given
‚Ä¢ ùêæ .contains(_) checks whether the requested element/string is
contained in the list/tuple/set/string ùêæ and returns either true
oder false.
‚Ä¢ We further assume that each element as a tuple in a list or set
can be addressed by each element in that tuple if it is a unique
key.
‚Ä¢ Elements in a tuple are ordered can be addressed by index,
starting from 0. We write [ùëõ] = {1, . . . , ùëõ}.
‚Ä¢ For tuples, lists, etc. we start index counting at 0.
B THE IDEAL LEDGER FUNCTIONALITY
In this section, we present the full specification of the ideal ledger
functionality Fledger in Figure 5.
in the figures:
In what follows, we first briefly explain the iUC notation used
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1058‚Ä¢ The CheckID algorithm is used to determine which machine
instance is responsible for and hence manages which entities.
Whenever a new message is sent to some entity ùëí whose role
is implemented by a machine ùëÄ, the CheckID algorithm is run
with input ùëí by each instance of ùëÄ (in order of their creation) to
determine whether ùëí is managed by the current instance. The
first instance that accepts ùëí then gets to process the incoming
message. By default, CheckID accepts entities of a single party
in a single session, which captures a traditional formulation of
a real protocol. Other common definitions include accepting
all entities from the same session, which captures a traditional
formulation of an ideal functionality.
‚Ä¢ The special variable (pidcur, sidcur, rolecur) refers to the cur-
rently active entity of the current machine instance (that was
previously accepted by CheckID). If the current activation is
due to a message received from another entity, then (pidcall,
sidcall, rolecall) refers to that entity.
‚Ä¢ The special macro corr(pidùë†ùë¢ùëè, sidùë†ùë¢ùëè, roleùë†ùë¢ùëè) can be used to
obtain the current corruption status (i.e., whether this entity
is still honest or considers itself to be implicitly/explicitly cor-
rupted) of an entity belonging to a subroutine.
‚Ä¢ Each machine instance in iUC includes the variable CorruptionSet.
The set contains all corrupted entities (pid, sid, role) in this in-
stance.
‚Ä¢ The iUC framework supports so-called responsive environ-
ments and responsive adversaries [10]. Such environments and
adversaries can be forced to respond to certain messages on
the network, called restricting messages, immediately and with-
out first activating the protocol in any other way. This is a
useful mechanism for modeling purposes, e.g., to leak some
information to the attacker or to let the attacker decide upon
the corruption status of a new entity but without disrupting the
intended execution of the protocol. Such network messages are
marked by writing send responsively to instead of just send
to.