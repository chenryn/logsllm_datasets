gerous function, which is only detectable by a ﬂow-
sensitive analysis. Second,
the integer overﬂow oc-
curs because of a speciﬁc ﬁeld in the user-provided
struct, not
Thus, any analysis
that is not ﬁeld sensitive would over-approximate this
and incorrectly identify flow p as the culprit.
Fi-
nally, the memory corruption in a different function (i.e.,
adjust traffic flow by pkg), which means that that
the analysis must be able to handle inter-procedural calls
in a context-sensitive way to precisely report the origin of
the tainted data. Thus, this bug is likely only possible to
detect and report concisely with an analysis that is ﬂow-,
context-, and ﬁeld-sensitive. Moreover, the fact that this
bug exists in the driver of a popular mobile device, shows
that it evaded both expert analysts and possibly existing
bug-ﬁnding tools.
3 Analysis Design
DR. CHECKER uses a modular interface for its analyses.
This is done by performing a general analysis pass over
the code, and invoking analysis clients at speciﬁc points
throughout the analysis. These analysis clients all share
the same global state, and beneﬁt from each other’s re-
sults. Once the analysis clients have run and updated the
global state of the analysis, we then employ numerous
vulnerability detectors, which identify speciﬁc properties
of known bugs and raise warnings (e.g., a tainted pointer
was used as input to a dangerous function). The general
architecture of DR. CHECKER is depicted in Figure 1,
and the details of our analysis and vulnerability detec-
tors are outlined in the following sections.
Below we brieﬂy outline a few of our core assump-
tions that contribute to our soundy analysis design:
Assumption 1. We assume that all of the code in the
mainline Linux core is implemented perfectly, and we do
not perform any inter-procedural analysis on any kernel
application program interface (API) calls.
Assumption 2. We only perform the number of traver-
sals required for a reach-def analysis in loops, which
could result in our points-to analysis being unsound.
Assumption 3. Each call instruction will be traversed
only once, even in the case of loops. This is to avoid cre-
ating additional contexts and limit false positives, which
may result in our analysis being unsound.
USENIX Association
26th USENIX Security Symposium    1009
Figure 1: Pluggable static analysis architecture implemented by DR. CHECKER.
3.1 Terminology and Deﬁnitions
In this section we deﬁne the various terms and concepts
that we use in the description of our analysis.
Deﬁnition 3.1. A control ﬂow graph (CFG) of a func-
tion is a directed graph where each node represents a ba-
sic block (i.e., a contiguous sequence of non-branch in-
structions) and the edges of the graph represent possible
control ﬂow between the basic blocks.
Deﬁnition 3.2. A strongly connected component (SCC)
of a graph is a sub-graph, where there exists a bi-
directional path between any pair of nodes (e.g., a loop).
Deﬁnition 3.3. Topological sort or ordering of nodes in
a directed graph is an ordering of nodes such that, for ev-
ery edge from node v to u, v is traversed before u. While
this is well-deﬁned for acyclic graphs, it is less straight-
forward for cyclic graphs (e.g., a CFG with loops). Thus,
when performing a topological sort on a CFG, we em-
ploy Tarjan’s algorithm [50], which instead topologically
sorts the SCCs.
Deﬁnition 3.4. An entry function, ε, is a function that
is called with at least one of its arguments containing
tainted data (e.g., an ioctl call).
Deﬁnition 3.5. The context, ∆, of a function in our anal-
ysis is an ordered list of call sites (e.g., function calls on
the stack) starting from an entry function. This list in-
dicates the sequence of function calls and their locations
in the code that are required to reach the given function.
More precisely, ∆ = {ε,c1,c2, ...} where c1 is call made
from within the entry function (ε) and for all i > 1, ci
is a call instruction in the function associated with the
previous call instruction (ci−1).
Deﬁnition 3.6. The global taint trace map, τ, contains
the information about our tainted values in the analysis.
It maps a speciﬁc value to the sequence of instructions (I)
whose execution resulted in the value becoming tainted.
(cid:40)
τ :
v → {I1,I2,I3, ...}
v → /0
if TAINTED
otherwise
Deﬁnition 3.7. An alias object, ˆa = {ρ,t}, is a tuple that
consists of a map (ρ) between offsets into that object, n,
and the other corresponding alias objects that those off-
sets can point to, as well as a local taint map (t) for each
offset. For example, this can be used to represent a struc-
ture stored in a static location, representing an alias ob-
ject, which contains pointers at given offsets (i.e., offsets
into that object) to other locations on the stack (i.e., their
alias objects). More precisely, ρ : n → { ˆa1, ˆa2, ˆa3, ...}
and t : n → {I1,I2,I3, ...}. We use both ˆa(n) and ρ(n) in-
terchangeably, to indicate that we are fetching all of the
alias objects that could be pointed to by a ﬁeld at offset
n. We use ˆat to refer to the taint map of location ˆa, and
similarly ˆat (n) to refer to taint at a speciﬁc offset. These
maps allow us to differentiate between different ﬁelds of
a structure to provide ﬁeld-sensitivity in our analysis.
The following types of locations are traced by our
analysis:
1. Function local variables (or stack locations): We
maintain an alias object for each local variable.
2. Dynamically allocated variables (or heap loca-
tions): These are the locations that are dynamically
allocated on the program heap (e.g., as retrieved by
malloc or get page). We similarly create one alias
object for each allocation site.
3. Global variables: Each global variable is assigned a
unique alias object.
Stack and heap locations are both context-sensitive
(i.e., multiple invocations of a function with different
contexts will have different alias objects). Furthermore,
because of our context propagation, heap locations are
call-site sensitive (i.e., for a given context, one object will
be created for each call site of an allocation function).
Deﬁnition 3.8. Our points-to map, φ, is the map between
a value and all of the possible locations that it can point
to, represented as a set of tuples containing alias objects
and offsets into those objects.
φ : v → {(n1, ˆa1), (n1, ˆa2), (n2, ˆa3), ...}
1010    26th USENIX Security Symposium
USENIX Association
Analysis ClientsSDTraversalGlobal StateVulnerability DetectorsPoints-to Taintwarnings123Driver Codeconsider
For example,
the instruction val1 =
&info->dirmap, where info represents a structure on
the stack and member dirmap is at offset 8. This in-
struction would result in the value (val1) pointing to
the offset 8 within the alias object info (i.e., φ (val1) =
{(8, info)}).
Deﬁnition 3.9. The Global State, S, of our analysis con-
tains all of the information computed for every function,
at every context. We deﬁne it as
S = {φc,τc},
where φc : ∆ → φ is the map between a context and the
corresponding points-to map, and τc : ∆ → τ is the map
between a context and corresponding taint trace map.
3.2 Soundy Driver Traversal (SDT)
While most of the existing static analysis techniques [13,
28] run their abstract analysis until it reaches a ﬁxed-
point before performing bug detection, this can be prob-
lematic when running multiple analyses, as the different
analyses may not have the same precision. Thus, by per-
forming analysis on the post-completion results, these
tools are fundamentally limiting the precision of all of
their analyses to the precision of the least precise analy-
sis. To avoid this, and ensure the highest precision for all
of our analysis modules, we perform a ﬂow-sensitive and
context-sensitive traversal of the driver starting from an
entry point. Our speciﬁc analysis modules (i.e., taint and
points-to) are implemented as clients in this framework,
and are invoked with the corresponding context and cur-
rent global state as the code is being traversed. This also
allows all of the analyses, or clients, to consume each
other’s results whenever the results are needed, and with-
out loss of precision. Moreover, this allows us to perform
a single traversal of the program for all of the underlying
clients.
It is important to note that some of the client analy-
ses may actually need more traversals through the CFG
than others to reach a ﬁxed point. For example, a points-
to analysis might need more traversals through a loop
to reach a ﬁxed point than a taint analysis. However,
our code exploration is analysis-agnostic, which means
we must ensure that we always perform the maximum
number of traversals required by all of our analyses. To
ensure this property, we use reach-def analysis [38] as
a baseline (i.e., we traverse the basic blocks such that
a reaching deﬁnition analysis will reach a ﬁxed point).
This ensures that all of the writes that can reach an in-
struction directly will be reached. This means that our
points-to analysis may not converge, as it would likely
require far more iterations. However, in the worst case,
points-to analysis could potentially grow unconstrained,
Algorithm 1: Soundy driver traversal analysis
function SDTraversal((S, ∆, F))
sccs ← topo sort(CFG(F))
forall the scc ∈ sccs do
if is loop(scc) then
HANDLELOOP(S, ∆, scc)
VISITSCC(S, ∆, scc)
else
end
end
function VisitSCC((S, ∆, scc))
forall the bb ∈ scc do
forall the I ∈ bb do
if is call(I) then
HANDLECALL(S, ∆, I)
else
if is ret(I) then
S ← S∪{φ∆(ret val),τ∆(ret val)}
DISPATCHCLIENTS(S, ∆, I)
else
end
end
end
end
function HandleLoop((S, ∆, scc))
num runs ← LongestUseDe fChain(scc)
while num runs (cid:54)= 0 do
VISITSCC(S, ∆, scc)
num runs ← num runs− 1
end
function HandleCall((S, ∆, I))
if ¬is visited(S,∆,I) then
targets ← resolve call(I)
forall the f ∈ targets do
∆new ← ∆||I
φnew ← (∆new → (φc(∆)(args),φc(∆)(globals)))
τnew ← (∆new → (τc(∆)(args),τc(∆)(globals)))
Snew ← {φnew,τnew}
SDTRAVERSAL(Snew, ∆new, f )
end
mark visited(S,∆,I)
end
resulting in everything pointing to everything. Thus, we
make this necessary sacriﬁce to soundness to ensure con-
vergence and a practical implementation.
Loops. When handling loops, we must ensure that we
iterate over the loop enough times to ensure that every
possible assignment of every variable has been exercised.
Thus, we must compute the number of iterations needed
USENIX Association
26th USENIX Security Symposium    1011
for a reach-def analysis to reach a ﬁx-point on the loop
and then perform the corresponding number of iterations
on all the basic blocks in the loop. Note that, the num-
ber of iterations to converge on a loop for a standard
reach-def analysis is upper-bounded by the longest use-
def chain in the loop (i.e., the longest number of instruc-
tions between the assignment and usage of a variable).
The intuition behind this is that, in the worst case, every
instruction could potentially depend on the variable in
the use-def chain, such that their potential values could
update in each loop. However, this can only happen as
many times as their are instructions, since an assignment
can only happen once per instruction.
Function calls.
If a function call is a direct invoca-
tion and the target function is within the code that we
are analyzing (i.e., it is part of the driver), it will be
traversed with a new context (∆new), and the state will
be both updated with a new points-to map (ρnew) and
a new taint trace map (τnew), which contains informa-
tion about both the function arguments and the global
variables. For indirect function calls (i.e., functions
that are invoked via a pointer), we use type-based tar-
get resolution. That is, given a function pointer of type
a = (rettype)(arg1Type, arg2Type,..), we ﬁnd
all of the matching functions in the same driver that are
referenced in a non-call instruction (e.g., void *ptr =
&fn). This is implemented as the function resolve call
in Algorithm 1. Each call site or call instruction will be
analyzed only once per context. We do not employ any
special handlers for recursive functions, as recursion is
rarely used in kernel drivers.
The complete algorithm, SDTraversal, is depicted in
Algorithm 1. We start by topologically sorting the CFG
of the function to get an ordered list of SCCs. Then, each
SCC is handled differently, depending on whether it is a
loop or not. Every SCC is traversed at the basic-block
level, where every instruction in the basic block is pro-
vided to all of the possible clients (i.e., taint and points-
to), along with the context and global state. The client
analyses can collect and maintain any required informa-
tion in the global state, making the information immedi-
ately available to each other.
To analyze a driver entry point ε, we ﬁrst create an
initial state: Sstart = {φstart , /0}, where φstart contains the
points-to map for all of the global variables. We then
traverse all of the .init functions of the driver (i.e.,
the functions responsible for driver initialization [44]),
which is where drivers will initialize most of their global
objects. The resulting initialized state (Sinit) is then ap-
pended with the taint map for any tainted arguments
(Sinit = Sinit ∪ τinit). We describe how we determine
these tainted arguments in Section 5.3. Finally, we in-
voke our traversal on this function, SDTraversal(Sinit ,
∆init , ε), where the context ∆init = {e}.
We use the low-level virtual machine (LLVM) inter-
mediate representation (IR), Bitcode [30], as our IR for
analysis. Bitcode is a typed, static single assignment
(SSA) IR, and well-suited for low-level languages like
C. The analysis clients interact with our soundy driver
traversal (SDT) analysis by implementing visitors, or
transfer functions, for speciﬁc LLVM IR instructions,
which enables them to both use and update the informa-
tion in the global state of the analysis. The instructions
that we deﬁne transfer functions for in the IR are:
1. Alloca (v = alloca typename) allocates a stack
variable with the size of the type typename and as-
signs the location to v (e.g., %1 = alloca i32).
SDT uses the instruction location to reference the
newly allocated instruction. Since SDT is context-
sensitive, the instruction location is a combination
of the current context and the instruction offset
within the function bitcode.
2. BinOp ( v = op op1, op2) applies op to op1 and
op2 and assigns the result to v (e.g., %1 = add
val, 4). We also consider, the ﬂow-merging in-
struction in SSA, usually called phi [21], to be the
same as a binary operation. Since SDT is not path-
sensitive, this does not affect the soundness.
3. Load (v = load typename op) is the standard
load instruction, which loads the contents of type
typename from the address represented by the
operand op into the variable v (e.g., %tmp1 = load
i32* %tmp).
4. Store (store typename v, op) is the standard
store instruction, which stores the contents of