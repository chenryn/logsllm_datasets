# 优化后的文本

## MySQL 表结构和数据查询
```sql
mysql> DESC history_log;
+----------+--------------+------+-----+---------+-------+
| Field    | Type         | Null | Key | Default | Extra |
+----------+--------------+------+-----+---------+-------+
| id       | int(11)      | NO   | PRI | NULL    |       |
| mid      | int(11)      | YES  | MUL | NULL    |       |
| clock    | int(11)      | YES  |     | NULL    |       |
| timestamp| int(11)      | YES  |     | NULL    |       |
| source   | varchar(64)  | YES  |     | NULL    |       |
| value    | varchar(255) | YES  |     | NULL    |       |
| logeventid| int(11)     | YES  |     | NULL    |       |
+----------+--------------+------+-----+---------+-------+
```

### 数据示例
```sql
mysql> SELECT * FROM history_log LIMIT 10;
+----+-----+------------+-----------+-----------------------------+----------------------------------+-----------+
| id | mid | clock      | timestamp | source                      | value                            | logeventid|
+----+-----+------------+-----------+-----------------------------+----------------------------------+-----------+
|  1 |  1  | 1642837200 | 1642837200| zabbix sshd[22622: pamunix] | session opened for user root by  |           |
|  2 |  1  | 1642837200 | 1642837200| zabbix sshd[22622: pamunix] | session closed for user root by  |           |
+----+-----+------------+-----------+-----------------------------+----------------------------------+-----------+
```
图5-29展示了日志监控在数据库中的存储。

## 日志监控注意事项
日志监控必须为主动模式，使用 `zabbix_get` 提示不支持。只有当日志发生改变且符合过滤条件时，才会发送给 Zabbix Server 并记录到数据库。符合触发器条件的日志将触发告警。利用日志监控功能可以对部分日志进行集中分析和管理，但不能替代专业的日志分析工具来解决日志集中管理工作。

## 监控项计算（Calculated Items）
Calculated items 可以对多个监控项进行计算，例如求总的磁盘容量、网络流量等。计算表达式主要依赖于 Zabbix Server，与 Zabbix Agent 或 Proxy 无关。计算结果会存放在数据库中，包括历史数据和趋势数据。Calculated items 可用于触发器配置，并可以被宏引用。

### 配置示例
- **Key**: 在每个主机中必须唯一。
- **Formula**: 计算表达式，写法如下：
  ```plaintext
  func(/key1, /key2, ...)
  ```
  其中：
  - `func`: 支持的函数如 `last`, `min`, `max`, `avg`, `count` 等。
  - `key`: 引用的监控项键值，建议用双引号包裹以避免解析错误。

### 注意事项
- 所有被引用的监控项必须存在且能收集数据。
- 函数、主机名、键值支持的字符为：小写字母（a-z）、大写字母（A-Z）、数字（0-9）和下划线（_）。
- 不支持的计算情况包括：引用的监控项不支持、没有可用数据、除以零、语法错误等。

### 示例
1. **剩余磁盘百分比**:
   ```plaintext
   100 * last("vfs.fs.size[/,free]",0) / last("vfs.fs.size[/,total]",0)
   ```

2. **10分钟内Zabbix values的可用大小**:
   ```plaintext
   avg("Zabbix server:zabbix[wcache,values]",600)
   ```

3. **统计eth0的进出流量总和**:
   ```plaintext
   last("net.if.in[eth0,bytes]",0) + last("net.if.out[eth0,bytes]",0)
   ```

4. **进流量占网卡总流量的百分比**:
   ```plaintext
   100 * last("net.if.in[eth0,bytes]",0) / (last("net.if.in[eth0,bytes]",0) + last("net.if.out[eth0,bytes]",0))
   ```

5. **聚合监控项**:
   ```plaintext
   grpsum["kvm-Host","vfs.fs.size[/,free]",last,0]
   ```

## 聚合检测（Aggregate Items）
聚合检测从数据库中获取已有的参数进行检测，不需要从任何Agent获取监控数据。监控项配置的Key类型语法如下：
```plaintext
groupfunc["Host group", "Item key", itemfunc, timeperiod]
```

### 参数说明
- **groupfunc**: 组函数，如 `grpavg`, `grpmax`, `grpmin`, `grpsum`。
- **itemfunc**: 项目函数，如 `last`, `avg`, `min`, `max`, `sum`。
- **timeperiod**: 最近获取数值的时间段，单位支持秒、分、小时、天。

### 示例
1. **对MySQL Servers组的system.cpu.load[,avg1]求平均值**:
   ```plaintext
   grpavg["MySQL Servers", "system.cpu.load[,avg1]", last, 0]
   ```

2. **对Servers A、B、C三个主机组的system.cpu.load求平均值**:
   ```plaintext
   grpavg[["Servers A", "Servers B", "Servers C"], "system.cpu.load", last, 0]
   ```

通过上述配置，可以在Zabbix中实现复杂的监控项计算和聚合检测，从而更好地管理和分析系统数据。