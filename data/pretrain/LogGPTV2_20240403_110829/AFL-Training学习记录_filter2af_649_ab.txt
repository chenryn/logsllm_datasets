    #include 
    #include 
    #include 
    #ifndef CERT_PATH
    # define CERT_PATH
    #endif
    SSL_CTX *Init() {
      SSL_library_init();
      SSL_load_error_strings();
      ERR_load_BIO_strings();
      OpenSSL_add_all_algorithms();
      SSL_CTX *sctx;
      assert (sctx = SSL_CTX_new(TLSv1_method()));
      /* These two file were created with this command:
          openssl req -x509 -newkey rsa:512 -keyout server.key \
         -out server.pem -days 9999 -nodes -subj /CN=a/
      */
      assert(SSL_CTX_use_certificate_file(sctx, "server.pem",
                                          SSL_FILETYPE_PEM));
      assert(SSL_CTX_use_PrivateKey_file(sctx, "server.key",
                                         SSL_FILETYPE_PEM));
      return sctx;
    }
    int main() {
      static SSL_CTX *sctx = Init();
      SSL *server = SSL_new(sctx);
      BIO *sinbio = BIO_new(BIO_s_mem());
      BIO *soutbio = BIO_new(BIO_s_mem());
      SSL_set_bio(server, sinbio, soutbio);
      SSL_set_accept_state(server);
      /* TODO: To spoof one end of the handshake, we need to write data to sinbio
       * here */
      #ifdef __AFL_HAVE_MANUAL_CONTROL
       __AFL_INIT();
      #endif
      uint8_t data[100] = {0};
      size_t size = read(STDIN_FILENO,data,100);
      if (size == -1){
        printf("Failed to read from stdin \n");
        return (-1);
      }
      BIO_write(sinbio, data, size);
      SSL_do_handshake(server);
      SSL_free(server);
      return 0;
    }
写好harness后，编译。
    AFL_USE_ASAN=1 afl-clang-fast++ -g handshake.cc openssl/libssl.a openssl/libcrypto.a -o handshake -I openssl/include -ldl
然后开始fuzz，这次采用的是stdin输入，所以就没有使用占位符@@了。
    /home/fuzzer/workshop/AFLplusplus/utils/asan_cgroups/limit_memory.sh -u fuzzer afl-fuzz -i in -o out ./handshake
如果出现swapoff -a的提醒，需要在宿主机上使用命令swapoff -a暂时关闭交换分区。
大概跑10min以内会出现一个crash，我挂在那里跑了三个小时，也只有三个crash。
用生成的crash运行下源程序，会发现ASAN打印出了心脏滴血漏洞的相关信息。
## ntpq
ntpq是向服务器查询信息，返回给用户的程序。这个challenge主要是看能不能找到CVE-2009-0159（[https://xorl.wordpress.com/2009/04/13/cve-2009-0159-ntp-remote-stack-overflow/）](https://xorl.wordpress.com/2009/04/13/cve-2009-0159-ntp-remote-stack-overflow/%EF%BC%89) 这个漏洞，以及如何用AFL测试这种网络服务类的应用程序。
在测试前，先写下test harness，将这个harness复制倒nptq的main函数里去。
    #ifdef __AFL_HAVE_MANUAL_CONTROL
            __AFL_INIT();
    #endif
            int datatype=0;
            int status=0;
            char data[1024*16] = {0};
            int length=0;
    #ifdef __AFL_HAVE_MANUAL_CONTROL
            while (__AFL_LOOP(1000)) {
    #endif
                    datatype=0;
                    status=0;
                    memset(data,0,1024*16);
                    read(0, &datatype, 1);
                    read(0, &status, 1);
                    length = read(0, data, 1024 * 16);
                    cookedprint(datatype, length, data, status, stdout);
    #ifdef __AFL_HAVE_MANUAL_CONTROL
            }
    #endif
            return 0;
编译ntpq，注意是在ntpq4.2.2那个文件夹。另外一个4.2.8p10是修补过漏洞的。
    CC=afl-clang-fast ./configure && AFL_HARDEN=1 make -C ntpq
然后进行fuzz，初始输入随便放点简单的字符串，我放了一个hello进去。
    afl-fuzz -i in -o out -x ntpq.dict ntp-4.2.2/ntpq/ntpq
可以发现，才跑一会就冒出一大堆crash。
由于修补过的ntpq的cookedprint函数是6个参数了，所以之前的harness没法直接用了。直接使用修补过的ntpq的main函数进行fuzz，一时半会并没有跑出多少crash。
这次的challeng还附带了如何查询覆盖率的教程。
首先，加上覆盖率的选项对ntpq进行编译。
    CC=clang CFLAGS="--coverage -g -O0" ./configure && make -C ntpq
然后运行插桩后的ntpq，输入为queue里的所有文件。这些文件对应着触发新路径的输入。
     for F in out/default/queue/id* ; do ./ntp-4.2.8p10/ntpq/ntpq  /dev/null ; done
然后编译覆盖率信息为gcov的report。
    cd ./ntp-4.2.8p10/ntpq/ && llvm-cov gcov ntpq.c
查看覆盖率的报告。
    ./ntp-4.2.8p10/ntpq/ntpq.c.gcov
可以发现行号前面多了数字，井号和减号。井号表示没有执行该行。减号表示这行没有代码。
## sendmail
这次的challenge主要是研究初始输入seed对于fuzzer的影响。复现的CVE是：CVE-1999-0206,
由于这次的testharness已经写好了，我们只要输入以下命令，编译sendmail程序，设置初始输入seed为a，然后开始fuzz。
    make clean
    CC=afl-clang-fast make
    mkdir in
    echo a > in/1
    afl-fuzz -i in -o out ./m1-bad @@
大约过了20s，afl发现了crash。
现在让我们修改一下seed，再跑一下看看。
    echo -e "a=\nb=" > in/multiline
直到过了1分钟才发现crash。emm这和作者说的不一样啊。看起来AFL有很大的玄学成分。
然后可以尝试把生成的crash，用afl-tmin处理一下，得到精简的测试样例。
    afl-tmin -i id:000000,sig:06,src:000047,time:11346,op:havoc,rep:8 -o shrinked ../../../m1-bad @@
我试了6个crash的测试样例，分别得到如下精简后的测试样例。发现这几个都还挺像的，但是又不完全一样。
    #1 
    0000000000000000000000000000000000000000000=
    000000000000000000000000000=
    #2
    0000000000000000000=
    0000000000000000000000000000000=
    00000000000000000000=
    #3
    0000000000000000000000000000000000000=
    000000000000000000000000000000000=
    #4
    000000000000000000000000000000000000=
    0000000000000000000000000000000000=
    #5
    00000000000000000000000000000000000000000000=
    00000000000000000000000000=
    #6
    00000000000000000000000000=
    00000000000000000000000000000000000000000000=
官方的answer.md给出的结论是：没得到相同的结果是afl-tmin并不能在不触发crash的情况下精简输入，所以他们是不同的。（暂时没理解为啥）
1305文件夹里是CVE-2003-0161（[https://samate.nist.gov/SRD/view_testcase.php?tID=1305）](https://samate.nist.gov/SRD/view_testcase.php?tID=1305%EF%BC%89)
。Fuzz的流程和前面一样，写harness，编译，设置初始输入，调用afl-fuzz进行fuzz：
    cp prescan-overflow-bad-fuzz.c prescan-overflow-bad.c # 直接用作者写好的harness
    CC=afl-clang-fast AFL_USE_ASAN=1 make #编译
    echo -n "PI:EMAIL" > in/seed #设置初始输入为邮箱地址
    afl-fuzz -i in -o out ./prescan-bad
这个漏洞需要AFL多花些时间才能找到。等生成crash的测试样例后，会发现输入有一堆反斜杠。同时，还会有很多0xFF字符。然而需要触发漏洞的话，需要的是一连串的对。通过对测试样例突变，afl最终会找到触发漏洞的样例。AFL在某个时候触发漏洞，但是我们并不知道afl啥时候会找到。所以这是个很好的例子去判断什么时候停止fuzzing。AFL会快速的跑完好多周期，但没有新增的路径。由于这些周期时间比较短，就导致代码覆盖率工具很有可能会显示覆盖率达到了100%。
可以采用Deferred initialization的方式来提高AFL的性能，大概提高1.5x，最合适的地方是放在read函数前。也就是下面这几行代码。
    #ifdef __AFL_HAVE_MANUAL_CONTROL
      __AFL_INIT();
    #endif
另外，就是持久化模式可以提高4x的性能。因为这个测试程序很小，大概只要扫描五十个字符串，所以fork占用了很大部分的时间。但这样做安全吗？在第一个循环后的测试还有代表性吗？所以需要确认全局变量保留的状态不会影响后续调用parseaddr函数的过程。如果发现这样做不安全，为了性能考虑，可以考虑将harness修改成无状态的。
## date
本次的challenge是去复现CVE-2017-7476，一个由环境变量引起的漏洞。
编译date
    cd coreutils
    ./bootstrap #可能会有一些带po后缀文件的错误，但可以忽视
    patch --follow-symlinks -p1  in/london
    #使用ASAN的fuzz
    /home/fuzzer/AFLplusplus/utils/asan_cgroups/limit_memory.sh -u root afl-fuzz -i in -o out -- src/date --date "2017-03-14T15:00-UTC"
挖了三分钟就有三个crash了，让我们来看看挖到的crash是不是前面的PoC。
运行crash
    ./src/date --date "2017-03-14T15:00-UTC" 
[2] AFL的LLVM 模式官方文档,
[3] CVE-2003-0161, 
[4] CVE-1999-0206, 
[5] CVE-2009-0159：
[6] Fuzzing with workshop : 
（这个链接里还有很多优质的参考资料）
[7] Advanced Fuzzing workshop：