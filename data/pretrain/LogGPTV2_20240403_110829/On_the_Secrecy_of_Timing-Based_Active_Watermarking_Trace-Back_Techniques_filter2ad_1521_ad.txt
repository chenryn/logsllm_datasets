ﬂow can be identiﬁed. A detection rate is only meaningful
when considered under certain amount of timing perturba-
tion. Second, the false positive rate Fp speciﬁes how likely
an arbitrary ﬂow may be wrongly identiﬁed as the stepping
stone ﬂow. In this paper, we name the detection rate and the
false positive rate of a watermark as its capability, which is
determined by the watermark parameters. Given a required
capability, we can derive the set of parameters satisfying
the capability. We are especially interested in the value of
M × L, since this is the number of packets that have to be
delayed.
Since each watermark bit has a 50% chance to be de-
coded from an arbitrary ﬂow, the false positive rate is Fp =
(cid:2)
( 1
2)L, where h is the threshold of hamming dis-
tance. Given a false positive rate, we can derive the relation
between L and h. In Figure 8(a), we give out the maximum
values of h that fulﬁll Fp ≤ 1% for different values of L.
Now we consider the detection rate. Assuming the tim-
ing perturbation, which comes from attackers and normal
network delays, is distributed with mean 0 and variance
σ2
p, the probability that a single watermark bit can be cor-
√
) − 1, where Φ() is the
rectly decoded is pd ≈ 2Φ( S
√
2
cumulative distribution function of the normal distribution.
For an L-bit watermark, the detection rate is the probabil-
ity that no more than h bits are incorrectly decoded, i.e.,
Dt =
(1 − pd)i. Note that attackers do not
know the value of S at this stage. However, since S can-
not be too large (otherwise attackers will notice the abnor-
mal amount of delays in the stepping stone connections),
attackers can assume a maximum S, e.g. 1 second. Having
the maximum S, the timing perturbation, and the required
detection rate, we can derive the relation between M and
L. The maximum value of h obtained for the required false
positive rate is also used here. For each L, we compute the
minimum value of M that satisﬁes the required detection
rate. For example, under the requirement that Dt ≥ 95%,
√
the timing perturbation is uniformly distributed in [0, 2] sec-
onds (i.e., σp = 2000/
12 ms), and S = 1000ms, Figure
8(b) shows the minimum values of M under different values
of L. The value M × L, which is also shown in the ﬁgure, is
the minimum number of packets that have to be embedded
with extra watermark delays. There always exists a mini-
mum value of M × L for any desired watermark capability.
Therefore we can compute the lower bound on M × L for
any desired watermark capability under reasonable assump-
tions about timing perturbation and the maximum value of
S. Figure 8(c) lists the minimum M × L for different false
positive rates and detection rates when S = 1000ms and
uniform timing perturbation in [0, 2s].
pL−i
(cid:2)
h
i=0
L
i
(cid:5)
(cid:6)
M
2σp
d
Having the minimum number of embedding packets to
be delayed, if the total packet number in the watermarked
ﬂow is also known, then the ratio θ of the watermark de-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
9
8
7
6
5
4
3
2
1
)
h
(
e
c
n
a
t
s
d
i
i
g
n
m
m
a
h
f
o
l
d
o
h
s
e
r
h
t
e
h
T
0
 7
10
25
25
20
20
15
15
10
10
)
)
M
M
(
(
r
r
e
e
b
b
m
m
u
u
n
n
t
t
s
s
u
u
b
b
o
o
r
r
e
e
h
h
T
T
10
10
10
5
5
0
0
7
7
7
180
160
140
120
100
80
60
L
*
M
f
o
l
e
u
a
v
m
u
m
u
n
M
i
15
20
25
The number of watermark bits (L)
(a) Computing threshold h
M * L
M
15
15
15
20
20
20
25
25
25
The number of watermark bits (L)
The number of watermark bits (L)
(b) Computing M and M × L
30
250
200
150
100
50
0
L
*
M
30
30
30
Dt=0.91
Dt=0.93
Dt=0.95
Dt=0.97
Dt=0.99
40
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
(c) The minimum M × L for different capabilities
False positive rate Fp
Figure 8. The watermark capability for differ-
ent watermark parameters
layed packets among all packets is determined. In the next
subsection, we demonstrate how this ratio can be used to
detect the watermark. Since the stepping stone ﬂows are
controlled by attackers, they can always decide how many
packets their ﬂows can have. On the other hand, a water-
mark encoder cannot predict the total number of packets in
a ﬂow. In order to guarantee the watermark can be fully
embedded, the safe way will be trying to squeeze the water-
mark into the beginning of the ﬂow. However, this makes
the ratio θ very high at least for the beginning part of the
ﬂow, thus greatly facilitates watermark detection. An alter-
native way is to choose packets independently of the possi-
ble number of packets, e.g., randomly select the embedding
packets from N packets and hope there will be at least N
packets in the ﬂow. This way enables the watermark en-
coder to reduce the ratio θ. However, if the ﬂow is short and
the watermark cannot be fully embedded, the capability of
the watermark will decrease and the attackers still have bet-
ter chances of not being caught.
5.2. Detecting Watermark through Sequen-
tial Probability Ratio Test
In above, we discover that for a watermark to be useful
(i.e., to have a desired capability), there is a lower bound
on M × L, which the number of packets that have to be
delayed. However, this number cannot be directly used for
watermark detection because the embedding packets can be
selected from all packets in the stepping stone ﬂow.
In-
stead, we utilize the ratio θ of the watermark delayed pack-
ets, which is shown in equation 2.
In the following, we
ﬁrst focus on the selection method that chooses embedding
packets randomly from N packets. In the end, we show that
our algorithm works for any selection methods.
Intuitively, we can choose a threshold θ(cid:2)
We convert the watermark detection problem to hypoth-
esis testing the value of θ. When θ is big enough, sufﬁ-
cient packets show the characteristic of watermark delays
and we can decide a watermark is embedded. We ﬁnd out
that our problem ﬁts naturally into the sequential hypothesis
test [10] concept. Each time an observation (i.e., a packet
delay) is obtained, we make one of the 3 decisions about
the hypothesis on θ: (1) to accept the hypothesis, (2) to re-
ject the hypothesis, or (3) to continue the experiment for an
additional observation. Since it is also required that a water-
mark is detected as early as possible, we adopt the Sequen-
tial Probability Ratio Test (SPRT) algorithm [26], which
minimizes the expected number of observations needed to
make the decision.
and test two al-
ternatives θ < θ(cid:2)
. However, such an inequality
deﬁnes composite hypotheses, for which it is difﬁcult to de-
rive the SPRT solution for our problem. Following [26], we
choose two thresholds θ0 < θ(cid:2) < θ1, and test for hypotheses
θ ≤ θ0 and θ ≥ θ1. These two hypotheses are further con-
verted into simple hypotheses θ = θ0 and θ = θ1, because
the SPRT solution for the simple hypotheses can provide a
satisfactory result for the original hypotheses. Having the
SPRT algorithm on the simple hypotheses, we decide that a
watermark is detected when hypothesis θ = θ1 is accepted.
The selection of θ0 and θ1 is a critical issue, and prior
knowledge has to be used. We choose θ0 based on how
well the network delays ﬁt into normal distribution. In our
experiment, only 1-2% of the packets do not ﬁt well. The
selection of θ1 is based on attackers’ assumptions on the
required watermark capability, thus the minimum number
of packets had to be delayed. Then attackers can decide the
and θ ≥ θ(cid:2)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
Table 2. SPRT simulation result
θ
output(avg)
packet #
0
0
30
0.05
0
56
0.1
0.8
438
0.15
1
68
0.2
1
26
0.25
1
17
0.3
1
13
total number of packets in their ﬂows and compute θ1.
The SPRT algorithm works as follows. Each time a
packet pj is received, we derive its delay dj and compute
rj = log
f(d1, θ1)··· f(dj, θ1)
f(d1, θ0)··· f(dj, θ0)
,
(6)
S
Table 3. GEM estimation of S
mean of S(cid:2)
std dev of S(cid:2)
400
389.1
18.44
600
587.8
17.67
800
782.9
24.86
Table 4. GEM estimation of θ
θ
0.1578
0.1573
0.0021
0.2366
0.2367
0.0023
0.4723
0.4694
0.0041
mean of θ(cid:2)
std dev of θ(cid:2)
where f is speciﬁed in equation 2. Then rj is compared
with two parameters A and B (B < A). If rj ≤ B, we
terminate the testing and accept θ = θ0. If rj ≥ A, we
terminate and accept θ = θ1. If B < rj < A, we wait