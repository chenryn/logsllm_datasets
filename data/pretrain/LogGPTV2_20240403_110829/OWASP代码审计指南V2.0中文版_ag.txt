名字，或者基于两者进行查询。在这种情况下，可以使用上面的安全字符串连接，但是从维
护的角度来看，这可能会让未来的程序员误解安全连接和不安全版本(直接使用输入字符串
值)之间的区别。 
灵活的参数化语句的一个选项是使用“if”语句根据提供的输入值选择正确的查询，例
如: 
72 
PHP SQL 注入 
SQL注入攻击包括通过web应用程序中的客户端接口向后端数据库系统注入SQL查询
部分。成功利用 SQL 注入的后果各不相同，从仅仅读取数据到修改数据或执行系统命令。
PHP 中的 SQL 注入仍然是头号攻击方法，也是数据泄露的头号原因，如示例 7.5 所示。 
在 PHP 中防止 SQL Injection 最常见的方法是使用诸如 addslashes()和 mysql_ 
real_escape_string()之类的函数，但是在某些情况下，这些函数也是会导致 SQL Injection。 
73 
添加斜线 
只有在用引号将查询字符串括起来的情况下，才可以避免使用 addslashes()进行 Sql
注入。下面的例子仍然是脆弱的。 
mysql_real_escape_string() 
mysql_real_escape_string()比 addslashes()稍微强大一点，因为它调用 mysql 的库
函数 mysql_real_escape_string，该库函数在下列字符前添加反斜杠:\x00，\n，\r，'，'
和\x1a。 
与 addslashes()一样，mysql_real_escape_string()只有在查询字符串用引号括起来时
才有效。像下面这样的字符串仍然容易受到 SQL 注入攻击:（作者遗漏了） 
当 web 应用程序的输入在执行到后端数据库之前没有得到控制或清理时，就会发生
SQL 注入。 
攻击者试图通过在其输入中传递 SQL 命令来利用此漏洞，因此会从数据库中创建不希
望的响应，例如提供绕过网络应用程序中编程的授权和身份验证的信息。示例 7.7 中显示了
一个易受攻击的 java 代码示例。 
74 
易受攻击的 java 代码示例 
输入参数“name”被传递给字符串查询，而没有任何适当的验证或确认。“SELECT* 
FROM users where name”等于字符串“name”的查询很容易被误用，以绕过不同于
“name”的内容。例如，攻击者可以尝试通过这种方式处理所有用户记录，而不仅仅是授
权给特定用户的记录： 
“ OR 1=1. 
.NET Sql 注入 
框架 1.0 和 2.0 可能比. NET 的更高版本更容易受到 SQL 注入的攻击。由于设计模式的
正确实现和使用已经嵌入在 ASP.NET，如 MVC(也取决于版本)，可以创建没有 SQL 注入的
应用程序。但是，有时开发人员可能更喜欢直接在代码中使用 SQL 代码。 
例子： 
开发人员创建了一个包含 3 个字段和提交按钮的网页，在“姓名”、“姓氏”和“身
份证”字段中搜索员工，开发人员在代码中实现一个字符串连接的 SQL 语句或存储过程，
如示例 7.8。 
这段代码相当于下例中执行的 SQL 语句。 
75 
黑客然后可以通过网络界面“123’;DROP TABLE pubs --”插入以下标识: 
SELECT name, lastname FROM authors WHERE ei_id = ‘123’; DROP TABLE pubs --’ 
分号“；”为 sql 提供一个信号，表明它已经到达 SQL 语句的末尾，但是，黑客用这
种恶意的 SQL 代码继续语句:DROP TABLE pubs. 
代码审计者操作 
代码审计者需要确保 HQL 查询中使用的任何数据都使用 HQL 参数化查询，以便将其
用作数据而不是代码。他们还可以使用 https://docs.jboss.org/hibernate/的标准应用编
程接口。 
参数集合 
参数集合(如 SqlParameterCollection)提供类型审计和长度验证。如果使用参数集合，
输入将被视为文字值，而 SQL Server 不会将其视为可执行代码，因此无法注入有效负载。 
使用参数集合可以强制执行类型和长度审计。超出该范围的值会触发例外。请确保您正
确处理了异常。SQL 参数集合示例:Hibernate 查询语言(HQL) 
1 using (SqlConnection conn = new SqlConnection(connectionString)) { 
2 DataSet dataObj = new DataSet(); 
3 SqlDataAdapter sqlAdapter = new SqlDataAdapter( “StoredProc”, conn); sqlAdapter.SelectCommand. 
CommandType = 
4 CommandType.StoredProcedure; 
5 sqlAdapter.SelectCommand.Parameters.Add(“@usrId”, SqlDbType.VarChar, 15); 
6 sqlAdapter.SelectCommand.Parameters[“@usrId “].Value = UID.Text; 
76 
Hibernate 通过对象/关系映射(ORM)方便了 Java 域对象的存储和检索。 
一个非常普遍的误解是 ORM 解决方案，像 hibernate 一样，是 SQL 注入证明。
Hibernate 允许使用“原生 SQL”，并定义了一种专有的查询语言，叫做 HQL(Hibernate 
Query Language)；前者倾向于 SQL 注入，后者倾向于 HQL 注入。 
复习 
⚫ 
始终通过测试类型、长度、格式和范围来验证用户输入。 
⚫ 
测试输入的大小和数据类型，并实施适当的限制。 
⚫ 
测试字符串变量的内容，只接受期望值。拒绝包含二进制数据、转义序列和注释字符的
条目。 
⚫ 
当您使用可扩展标记语言文档时，请在输入时根据其模式验证所有数据。 
⚫ 
切勿直接从用户输入中构建 SQL 语句。 
⚫ 
使用存储过程来验证用户输入，当不使用存储过程时，使用平台提供的应用编程接口。
即，参数化语句。 
⚫ 
实施多层验证。 
⚫ 
切勿连接未经验证的用户输入。字符串连接是脚本注入的主要入口点。 
⚫ 
您应该审计所有调用 EXECUTE、EXEC 的代码，以及任何可以调用外部资源或命令行
的 SQL 调用。 
77 
OWASP 参考 
⚫ 
https://www . OWASP . org/index . PHP/SQL _ Injection _ Prevention _ Sketch _ 
Sheet OWASP SQL Injection Prevention Sketch Sheet 
⚫ 
https://www . owasp . org/index . PHP/Query _ parametering _备忘单 OWASP 查
询参数化备忘单 
⚫ 
https://www.owasp.org/index.php/Command_Injection·命令注射篇 
⚫ 
https://www.owasp.org/index.php/XXE OWASP 可扩展标记语言外部实体(XXE)参
考文章 
⚫ 
https://www.owasp.org/index.php/ASVS·ASVS:输出编码/转义要求(V6) 
⚫ 
https://www.OWASP.org/index.PHP/Testing_for_SQL_Injection_(OWASP-DV-00
5)OWASP 测试指南:关于 SQL 注入测试的章节 
外部参考 
⚫ 
命令注入的 http://cwe.mitre.org/data/definitions/77.html·CWE 77 号入口 
⚫ 
SQL 注入的 http://cwe.mitre.org/data/definitions/89.html·CWE 条目 89 
⚫ 
关于 Hibernate 注射的 http://cwe.mitre.org/data/definitions/564.html·CWE 条目
564 
⚫ 
Livshits 和 Lam，2005 年“通过静态分析发现 Java 应用程序中的安全漏洞”，见
78 
https://www.usenix.org/legacy/event/sec05/tech/full_papers/livshits/livshits_h
tml/#sec:sqlinjexample 
⚫ 
http://www.php.net/manual/en/book.pdo.php·PDO 
⚫ 
https://TechNet . Microsoft . com/en-us/library/ms 161953(v = SQL . 105)。 
3.1.3 JSON (JavaScript 对象符号) 
JSON 是一种开放的标准格式，使用易于阅读的文本在服务器和网络应用程序之间传输
数据。JSON 数据可以被大量的编程语言使用，并且正在成为替代 XML 的标准。 
JSON 的主要安全问题是动态嵌入在 JavaScript 中的 JSON 文本，因为这种注入是一
个经常出现的漏洞。程序中的漏洞可能会无意中运行恶意脚本或将恶意脚本存储到数据库中。
在处理从互联网上检索的数据时，这是一种非常有可能出现的场景。 
代码审计者需要确保 JSON 没有用Javascript eval处理，而是用JSON.parse(…)处理。 
Var parsed_object = eval(“(“ + Jason_text + “)”); // Red flag for the code reviewer. 
JSON.parse(text[, reviver]); .. // Much better then using javascript eval function 
审计人员应该审计确保开发人员没有使用文本/字符串中使用已知的不安全模式，例如，
使用正则表达或者其它错误的处理，这样让测试非常困难。需要输入以白名单方式的字符或
者经过仔细验证的数字。 
不允许 JSON 数据构造动态 HTML。总是我们安全的 DOM 功能，如 innerText or 
79 
CreateTextNode(…)[下面部分重复了，已经更新到了上面] 
对象/关系映射 
对象/关系映射(ORM)通过 HQL (Hibernate 查询语言)或.NET 实体框架实现。 
一个非常常见的误解是，像 hibernate 这样的 ORM 解决方案是 SQL 注入的解决方法。
不是的，ORM 允许使用“原生 SQL”。通过专有的查询语言，HQL 倾向于 SQL 注入，后
者倾向于 HQL(或 ORM)注入。Linq 不是 SQL，因此不容易出现 SQL 注入。然而，通过 linq
使用 excutequery 或 excutecommand 会导致程序不使用 linq 的保护机制，导致出现 SQL
注入。 
此部分重复。 
代码审计者操作 
代码审计者需要确保 HQL 查询中使用的任何数据都使用 HQL 参数化查询，以便将其
用作数据而不是代码。他们还可以使用 https://docs.jboss.org/hibernate/的标准应用编
程接口 
3.1.4 内容安全策略 
CSP 是 W3C 规范，提供了指示客户端浏览器允许从哪个位置和哪种类型的资源加载的
要求。为了定义加载行为，CSP 规范使用“指令”，其中指令为目标资源类型定义加载行
为。CSP 有助于检测和减轻某些类型的攻击，包括跨站点脚本(XSS)和数据注入攻击。这些
攻击被用于数据盗窃，网站篡改或恶意软件传播等攻击。 
指令可以使用超文本传输协议响应头(服务器可以用给定的资源表示发送一个以上的超
文本传输协议报头字段，服务器可以用相同资源或不同资源的不同表示发送不同的超文本传
80 
输协议报头字段值)或超文本传输协议元标记来指定，下面的超文本传输协议报头由规范定
义: 
⚫ 
Content-Security-Policy:由 W3C 规范定义为标准头，由 Chrome 版本 25 和更高版
本、Firefox 版本 23 和更高版本、Opera 版本 19 和更高版本使用。 
⚫ 
X-Content-Security-Policy:在版本 23 之前由 Firefox 使用，在版本 10(部分实施内容
安全策略)之前由互联网浏览器使用。 
⚫ 
X-WebKit-CSP:版本 25 之前的 Chrome 支持 
风险 
CSP 的风险有两个主要来源: 
⚫ 
政策配置不当， 
⚫ 
过于宽松的政策。 
审计什么 
代码审计人员需要了解应用程序设计需要什么内容安全策略，以及如何测试这些策略以
确保它们被应用程序使用。 
有用的安全相关的 HTTP 头 
81 
在大多数架构中，这些头可以在 web 服务器配置中设置，而无需更改实际应用程序的
代码。这为至少缓解现有问题提供了更快、更简单的方法，也可以为新应用提供了额外的防
御。 
http 安全头部属性汇总表 
Header 名称 
描述 
示例 
Strict-Transport-Sec
urity 
[https://tools.ietf.or
g/html/rfc6797] 
HTTP 严格传输安全性（HSTS）强制
与服务器建立安全的连接（基于 SSL / TLS
的 HTTP）。 这样可以减少 Web 应用程序
中的错误通过 cookie 和外部链接泄漏会话
数据的影响，并防御中间人攻击。HSTS 还
禁用了用户忽略 SSL.协商警告的功能。 
Strict-Tr
ansport-Sec
urity:max-ge
=16070400; 
includeS
ubDomains 
X-Frame-Options 
[https://tools.ietf.or
g/ 
html/draft-ietf-webs
ec-xframe-options-01] 
Frame-Options 