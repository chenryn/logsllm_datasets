生活和工作的大致地点，控制你移动设备上的app，甚至可能会控制你的整部手机一
一如果该设备是可以root的或者已经root了的话。在一些非常流行的app 中，就已
经出现过不少这类能通过中间人攻击加以利用的漏洞的真实案例了。你可以在“拓
展阅读”一节中看到其中一部分案例的链接。
这个实验展示了如何对一个Android设备进行中间人攻击和一个可以在中间人
攻击过程中使用的简单的利用方法—也就是DNS污染（DNS poisoning）。
一个小小的注意事项：用来进行中间人攻击的工具—Ettercap，并未提供任何
官方的 for Windows 的版本，如果你没有安装Ubuntu或Debian Linux系统的机器，
你可以自己装一个，指定下载Ubuntu 的 CD/DVD安装光盘镜像，然后在Oracle 的
Virtualbox虚拟机上运行它即可，或者Vmware亦可胜任这一任务。要了解如何安装
装Santoku”这个实验。如果你实在是想在你的 Windows 机器上使用 Ettercap，你可
以在“拓展阅读”一节中找到非官方的Windows二进制可执行文件的下载链接。
准备工作
为了大幅简化整个过程，我将向你展示怎么去下载一个极好的工具，这将使中
139
---
## Page 158
Android安全攻防实战
间人攻击变得非常容易。你可以用下面这条命令下载Ettercap。
sudo aptitude install ettercap-graphical
图4.26中显示的就是上面这条命令的输出。
图 4.26
等它下载完毕，并安装成功之后，你就可以开始进行中间人攻击了。
怎么做
我们从下面这几步着手开始攻击。
1.在我们开始中间人攻击之前，你需要安装Entercap的DNS Spoof插件，你要
做的唯一的一件事就是往 Ettercap 的 DNS 配置脚本中加入一些有用的地
址，如图4.27所示，这个DNS配置脚本保存在Linux 计算机里的
/usr/share/ettercap/etter.dns 这个文件中。
1a/aes/sn/vy opns
图 4.27
140
---
## Page 159
第4章利用app中的漏润
这个etter.dns文件看上去应该是像图4.28这样的。
1,1
[8 4.28
在编辑了这个文件之后，它看上去应该是如图4.29这个样子的。
198.182.196.56
w.alar.orgA 127.8.0.1
47,30
图 4.29
由于你是打算用你自已的计算机冒充DNS服务器，所以应该把
192.168.10.102这个地址改成你本机的IP地址。这基本上就是说你的计算机
将会扮演DNS服务器的角色。
2.DNS插件被正确安装完毕之后，你可以在你的终端或命令行提示符下运行下
141
---
## Page 160
Android安全攻防实战
面这条命令来启动中间人攻击。
target]/[address of gatevay]/
在上面这条命令里，[interface]是你用来连入网络的网卡，它可以是一块以太
网卡，也可以是块无线网卡。[address oftarget]是你Android设备的IP地址，
在Android 手机里，你可以一次点击设置Wi-Fij网络名IP地址来找到它。
[addressofgateway]是本网络的默认网关的IP地址。这个攻击将通过滥用地
址解析协议（Address ResolutionProtocol，ARP）中无需进行认证这个缺陷，
欺骗你的手机，使它认为你发动攻击的计算机才是真实的网关。
3.例如，假设你的网关地址是192.168.10.1，你的 Android 设备的 IP地址是
192.168.10.106，你进行中间人攻击的命令就该是下面这样的：
/192.168 .10.1/ /192.168.10 .106/
你可以交换最后的这两个地址，只要把它俩都填上，它们的出现次序是无关
紧要的。在执行了这条命令之后，你应该在你的终端上看到如图4.30这样的
结果。
41 1o
图 4.30
4.稍等一会儿，你将会看到类似如图4.31这张截图的内容，这是Ettercap记录
下来的网络流量。
142
---
## Page 161
第4章利用app中的漏洞
0912162.10.1626135
197.60.128.40:4431
017411.462013
192.169.10.106:466451A
tost: w
ten/xh/tx/,+xen1,4ppl
ertattans1 CRvtygt1hee3agtetsido2ygt 1eL.h3agtstsid
图 4.31
5.如果你在这个“中招了”的网络中使用一些app，你将会看到一些奇怪的事
发生在你的攻击计算机上。例如，你将会看到由你的Android app 发送出来
的DNS 请求包，图4.32这张截图中显示的就是由Flipboard这个app发送的
DNS请求包。
日
图 4.32
该输出是由Wireshark生成的。
143
---
## Page 162
Android安全攻防实战
设备提供一些伪装成其他网站（比如linkedln和谷歌）的网页的内容。图4.33
就是一些演示这一思想的截图。
中民-
3420:14
www:inkedin.com
c
It works!
图 4.33
下面是另一个例子。在图4.34这张截图中，访间 www.google.com网站的请求已
经被拦截下来了。
中国际
2014
google.com
It works!
图 4.34
显然，LinkedIn和谷歌的网页并没有被访问，事实上，这里返回来的网页是来自
本地网络中某台计算机的。这可能只是一个很不起眼的演示，尽管它包含了这次攻
击中最困难的部分—它构成了中间人攻击的基本架构，攻击者能够以此控制 app
提交到网上的请求的响应结果。
一旦你架构好了你的中间人攻击的基本架构，你可以从此出发，使用诸如
144
---
## Page 163
第4章利用app中的漏洞
Metasploit 及其browser_autopwn 模块去利用手机中浏览器的漏洞，或者使用工具
（Social Engineering Toolkit 就是个很棒的工具）镜像某些站点进行一些社会工程攻
击。请参阅“拓展阅读”一节中关于这些极好的工具的相关信息的链接。
除了普通的中间人攻击之外，还有一类专门针对Android的中间人攻击，或者说
针对那些使用了不安全的addJavaSeriptInterface Web工具包以及相关API调用的目标
app 的。这类漏洞的进一步信息，详见"拓展阅读"一节中的 rhe Advennurnes wirh Android
WebViews 和 the Artacks on WebView in theAndroid System 这两篇文章的链接。
拓展阅读
*The Attacks on WebView in the Android System paper by Tongbo Luo, Hao Hao,
Wenliang Yifei Wang, and Heng Yin (http:/www.cis.syr.edu/~wedu/Research/
paper/webview_acsac2011.pdf).
● The WebView addJavaScriptinterface Remote Code Execution paper at MWR
InfoSecurity (https:/labs.mwrinfosecurity.com/system/assets/563/original/mwri_
webview-addjavascriptinterface-codeexccution_2013-09-23.pdf).
● The Adventures with Android WebViews article at MWR labs (https://labs.
mwrinfosecurity.com/blog/2012/04/23/adventures-with-androidwebviews/).
Ettcrcap
Windows Binarics
(http://sourceforge.net/projccts/ettercap/files/
unofficial%20binaries/windows/).
 The Ettercap homepage (http://ettercap.github.io/ettercap/index.html).
The Metasploit Browser Autopwn article at Penetration Testing Lab
(http://pentestlab.wordpress.com/2012/04/23/mctasploit-browserautopwn/).
●The Cain and Abel homepage (http://www.oxid.it/cain.html).
An Ethernet Address Resolution Protocol, Intermet Standard STD 37
(http://tools.ietf.org/html/rfc826).
145
---
## Page 164
第5章保护app
在这一章里，我们将做这些实验：
·保护app 的组件；
·通过定制权限保护组件：
·保护 content provider 的路径：
·防御SQL注入攻击：
·验证app的签名（防募改）：
·通过检测安装程序，模拟器，调试标志位反逆向工程：
·用ProGuad删除所有日志消息：
·用GexGuard进行高级代码混淆。
5.1简介
到目前为止，我们已经看到了如何安装和定制一个去发现和利用Androidapp中
漏洞的环境了。在这一章里，我们将讨论一些给逆向工程师和攻击者增加工作难度
的保护技术。
在开发app 时，最常见的错误之一就是：在无意间暴露出app组件。我们将着重
讨论如何防止组件被暴露出来，或能被其他app访问到。我们也将介绍，如果必须要
共享一些数据的话，如何通过定制权限，限制对这些共享数据的访问。
入侵或代码纂改检测是所有良好的防御系统的基石，面且出于这一目的，我们
将试图去检测程序代码是不是被修改过了，以及程序是不是运行在一个恶意的环境
下。
在这一章的最后，我们将进行两个增加逆向工程难度的实验。我们将会看到，
---
## Page 165
第5章保护app
如何使用代码混淆器，通过定制ProGuard的配置，从app中删掉所有日志消息，以
及隐藏调用敏感AP1的代码。
保护通过网络传输的数据这一主题将在第7章《网络安全》中介绍。而如何使
用加密技术静态地保护数据的安全性，则将在第9章《加密与开发设备管理策略》
中讨论。
5.2保护app的组件
保护 app 组件的途径有两条，其一是正确地使用AndroidManifesL.xml文件，其
二是在代码级别上强制进行权限检查。aPP安全中的两个因素使权限框架相当的灵
活，并使你能以一种粒度相当小的方式，限制能访问你的组件的app的数量。
锁定你的组件，不使其被访问的方式有好多种，但是在你动手之前，先请确保
你理解了你的组件的用途、为什么必须保护它，以及当一个恶意app向你的app发送
intent、访问它的数据时，你的用户将会面临什么样的风险。这被称为基于风险的安
全途径，它建议在配置你的 AndroidManifesLxml文件，或在你的 app 中加入权限检
查代码之前，先得老老实实地回答上述问题
在这个实验中，我将详细介绍一些能用来保护通用组件（包括activity，broadcast
receiver，content provider 或 service）的措施。
怎么做·
一开始，我们需要检查一下你的 android app 中的 AndroidManifest.xml 文件，看
看其中的 android:exported 属性的定义，看它是否允许组件被其他app 调用。如果你
的app中的某个组件不需要被其他 app 调用，或者它需要明确地与 android 系统其他
部分的组件（不包括你的app的内部组件）的交互隔离开来的话，你应该在该组件的
XML元素中加入下面这个属性。
其中的[组件名]可以是 activity, provider, service 或者 receiver。
工作原理..
通过AndroidManifest.xml进行权限检查对于不同类型的 app 组件，其作用是不
同的。因为它们是通过不同的进程间通信（inter-process communications，IPC）机制
147
---
## Page 166
Android安全攻防实战
进行交互的。对于各种不同的app组件，android:permission的作用是不同的。
·Activity：使外部app 中的组件，不能成功使用startActivity 或
startActivityForResult 运行相应的 activity。
·Service：使外部app中的组件，不能绑定（通过调用bindServiceO）或启动
（通过调用 startServiceO）相应的 service。
·Receiver：限制能向该rcciver 发送广播 intent 的外部app 组件的数量。
·Provider：对能通过该content provider访问的数据进行访问限制。
各个组件的XML元素中的android:permission 属性会覆盖元素中
android:permission属性，也就是说，如果你没有为你的组件指定所需的权限，同时
在元素中已经指定了一个的话，该权限会被应用到它所包含的所有组件
上去。尽管通过元素指定权限并不是开发者经常会做的事，因为这影响
了组件面向Android系统本身的友好性，如果你使用元素覆盖了某一个
activity的必要权限，启动器（Launcher）将会无法启动你的activity。话虽如此，但
只要你有足够的理由坚持，你的app或它的组件也不需要进行任何未经授权的交互，
你确实可以使用标签中的 android:permission属性。
厂
如果你在组件中定义了一个元素，除非你明确写下
了cxported=false”，否则它将会被自动导出。不过这个问题好像
知道的人并不是很多，因为许多开发者都在无意间把他们的
content provider开放给了其他app。作为对这个问题的回应，谷
歌在Android4.2中修改了默认的行为。如果你把
android:minSdkVersion 或者 android:targetSdkVersion 设为 17, 那
么中的 exported 属性默认就是 false。
拓展阅读
The  tag in the Android Developers Reference guide at https:/developer.
android.com/guide/topics/manifest/serviceelement.html。
▪ The  tag in the Android Developers Reference guide at https:/
①原文如此。显然这里作者笔误了。应为“android:exported”，—译者注
②原文如此。不过按谷歌官方文档的说法，“If “false”， the only messages the broadcast receiver can
receive are those sent by components of the same application or applications with the same user ID."
只有同一个app，或者同一个用户 ID签名的 app 中的组件发送的消息才会被这个 broadcast
receiver接收。—译者注
148
---
## Page 167
第5章保护app
developer.android.com/guide/topics/manifest/receiverelement.html。
The  tag in the Android Developers Reference guide at https:/developer.
android.com/guide/topics/manifest/activity-element.html.
https:/developer.android.com/guide/topics/manifest/application-clement.html.