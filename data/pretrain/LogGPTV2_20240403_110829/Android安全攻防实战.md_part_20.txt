### 生活和工作的大致地点，控制你移动设备上的App，甚至可能会控制你的整部手机——如果该设备是可以root的或者已经root了的话。在一些非常流行的App中，已经出现过不少这类能通过中间人攻击加以利用的漏洞的真实案例。你可以在“拓展阅读”一节中找到其中一部分案例的链接。

本实验展示了如何对一个Android设备进行中间人攻击，并演示了一个简单的利用方法——DNS污染（DNS poisoning）。

**注意事项：**
- 用于进行中间人攻击的工具Ettercap没有官方的Windows版本。如果你没有安装Ubuntu或Debian Linux系统的机器，可以下载Ubuntu的CD/DVD安装光盘镜像，并在Oracle的VirtualBox虚拟机上运行它，或者使用VMware。
- 如果你希望在Windows机器上使用Ettercap，可以在“拓展阅读”一节中找到非官方的Windows二进制可执行文件的下载链接。

### 准备工作
为了简化整个过程，我们将向你展示如何下载并安装Ettercap。你可以使用以下命令：

```bash
sudo aptitude install ettercap-graphical
```

图4.26显示了上述命令的输出。

等待下载和安装完成后，即可开始进行中间人攻击。

### 操作步骤
1. **安装DNS Spoof插件**：
   - 在开始中间人攻击之前，你需要安装Ettercap的DNS Spoof插件。唯一需要做的就是在Ettercap的DNS配置脚本中添加一些有用的地址。这个DNS配置脚本保存在Linux计算机中的`/usr/share/ettercap/etter.dns`文件中。
   - 编辑`etter.dns`文件，使其看起来如图4.28所示。
   - 修改后的文件应如图4.29所示。将`192.168.10.102`替换为你自己的IP地址，这样你的计算机将扮演DNS服务器的角色。

2. **启动中间人攻击**：
   - 安装好DNS插件后，你可以在终端或命令行提示符下运行以下命令来启动中间人攻击：
     ```bash
     sudo ettercap -Tq -i [interface] -M ARP:remote /[address of target]/[address of gateway]/
     ```
   - 其中，`[interface]`是你用来连入网络的网卡（以太网卡或无线网卡），`[address of target]`是你的Android设备的IP地址，`[address of gateway]`是本网络的默认网关的IP地址。
   - 例如，假设你的网关地址是`192.168.10.1`，你的Android设备的IP地址是`192.168.10.106`，那么命令应该是：
     ```bash
     sudo ettercap -Tq -i eth0 -M ARP:remote /192.168.10.106/ /192.168.10.1/
     ```

3. **观察结果**：
   - 执行命令后，你应该在终端上看到如图4.30所示的结果。
   - 稍等一会儿，你将会看到类似图4.31所示的内容，这是Ettercap记录下来的网络流量。

4. **验证攻击效果**：
   - 如果你在受攻击的网络中使用一些App，你会看到一些奇怪的事情发生在你的攻击计算机上。例如，你会看到由你的Android App发送的DNS请求包，如图4.32所示。
   - 图4.33和图4.34展示了访问LinkedIn和Google网站时被拦截的情况。实际上，返回的网页来自本地网络中某台计算机。

### 进一步探索
一旦你搭建好了中间人攻击的基本架构，你可以进一步使用诸如Metasploit及其`browser_autopwn`模块去利用手机中浏览器的漏洞，或者使用Social Engineering Toolkit进行社会工程攻击。请参阅“拓展阅读”一节中关于这些工具的相关信息的链接。

除了普通的中间人攻击之外，还有一类专门针对Android的中间人攻击，特别是那些使用了不安全的`addJavaScriptInterface` Web工具包及相关API调用的目标App。更多详细信息，请参阅“拓展阅读”一节中的相关文章。

### 拓展阅读
- 《The Attacks on WebView in the Android System》 by Tongbo Luo, Hao Hao, Wenliang Yifei Wang, and Heng Yin (http://www.cis.syr.edu/~wedu/Research/paper/webview_acsac2011.pdf)
- 《The WebView addJavaScriptInterface Remote Code Execution》 at MWR InfoSecurity (https://labs.mwrinfosecurity.com/system/assets/563/original/mwri_webview-addjavascriptinterface-codeexccution_2013-09-23.pdf)
- 《The Adventures with Android WebViews》 at MWR labs (https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-androidwebviews/)
- Ettercap Windows Binaries (http://sourceforge.net/projects/ettercap/files/unofficial%20binaries/windows/)
- The Ettercap homepage (http://ettercap.github.io/ettercap/index.html)
- 《The Metasploit Browser Autopwn》 article at Penetration Testing Lab (http://pentestlab.wordpress.com/2012/04/23/metasploit-browserautopwn/)
- The Cain and Abel homepage (http://www.oxid.it/cain.html)
- An Ethernet Address Resolution Protocol, Internet Standard STD 37 (http://tools.ietf.org/html/rfc826)

---

### 第5章 保护App

在这一章中，我们将进行以下实验：
- 保护App的组件
- 通过自定义权限保护组件
- 保护Content Provider的路径
- 防御SQL注入攻击
- 验证App的签名（防篡改）
- 通过检测安装程序、模拟器和调试标志位反逆向工程
- 用ProGuard删除所有日志消息
- 用GexGuard进行高级代码混淆

#### 5.1 简介
到目前为止，我们已经了解了如何安装和定制一个环境来发现和利用Android App中的漏洞。在这一章中，我们将讨论一些增加逆向工程师和攻击者难度的保护技术。

在开发App时，最常见的错误之一是在无意间暴露出App组件。我们将着重讨论如何防止组件被暴露出来，或被其他App访问。如果必须共享数据，我们将介绍如何通过自定义权限限制对这些共享数据的访问。

入侵或代码篡改检测是所有良好防御系统的基石。出于这一目的，我们将试图检测程序代码是否被修改以及程序是否运行在一个恶意环境下。

在这一章的最后，我们将进行两个增加逆向工程难度的实验。我们将看到如何使用代码混淆器，通过自定义ProGuard的配置从App中删除所有日志消息，以及隐藏调用敏感API的代码。

有关保护通过网络传输的数据的主题将在第7章《网络安全》中介绍。如何使用加密技术静态地保护数据的安全性将在第9章《加密与开发设备管理策略》中讨论。

#### 5.2 保护App的组件
保护App组件的方法有两种：正确使用`AndroidManifest.xml`文件和在代码级别强制进行权限检查。App安全中的两个因素使权限框架相当灵活，并允许你以粒度很小的方式限制能够访问你的组件的App数量。

锁定你的组件不被访问有多种方式，但在动手之前，请确保你理解了你的组件的用途、为什么必须保护它，以及当一个恶意App向你的App发送Intent或访问其数据时，你的用户将面临什么风险。这被称为基于风险的安全途径，建议在配置`AndroidManifest.xml`文件或在App中加入权限检查代码之前，先回答这些问题。

在这个实验中，我将详细介绍一些用于保护通用组件（包括Activity、Broadcast Receiver、Content Provider或Service）的措施。

#### 如何操作
1. **检查`AndroidManifest.xml`文件**：
   - 检查你的Android App中的`AndroidManifest.xml`文件，查看`android:exported`属性的定义，看它是否允许组件被其他App调用。
   - 如果你的App中的某个组件不需要被其他App调用，或者需要明确地与Android系统其他部分的组件隔离开来，你应该在该组件的XML元素中加入以下属性：
     ```xml
     <组件名 android:exported="false" />
     ```
   - 其中的`<组件名>`可以是`activity`、`provider`、`service`或`receiver`。

2. **工作原理**：
   - 通过`AndroidManifest.xml`进行权限检查对于不同类型的App组件有不同的作用，因为它们通过不同的进程间通信（IPC）机制进行交互。
   - **Activity**：阻止外部App中的组件成功使用`startActivity`或`startActivityForResult`运行相应的Activity。
   - **Service**：阻止外部App中的组件绑定（通过调用`bindService`）或启动（通过调用`startService`）相应的Service。
   - **Receiver**：限制能向该Receiver发送广播Intent的外部App组件的数量。
   - **Provider**：限制对能通过该Content Provider访问的数据的访问。

   各个组件的XML元素中的`android:permission`属性会覆盖`<application>`元素中的`android:permission`属性。也就是说，如果你没有为你的组件指定所需的权限，同时在`<application>`元素中已经指定了一个权限，该权限会被应用到它所包含的所有组件上去。尽管通过`<application>`元素指定权限并不是开发者经常会做的事，因为它影响了组件面向Android系统的友好性，但如果你有足够的理由坚持，你的App或它的组件也不需要进行任何未经授权的交互，你确实可以使用`<application>`标签中的`android:permission`属性。

   如果你在组件中定义了一个`<intent-filter>`元素，除非你明确写下了`android:exported="false"`，否则它将会被自动导出。不过这个问题知道的人并不多，许多开发者都在无意间把他们的Content Provider开放给了其他App。作为回应，谷歌在Android 4.2中修改了默认行为。如果你将`android:minSdkVersion`或`android:targetSdkVersion`设为17，则`<provider>`中的`exported`属性默认为`false`。

#### 拓展阅读
- `<service>`标签在Android开发者参考指南中的说明：https://developer.android.com/guide/topics/manifest/service-element.html
- `<receiver>`标签在Android开发者参考指南中的说明：https://developer.android.com/guide/topics/manifest/receiver-element.html
- `<activity>`标签在Android开发者参考指南中的说明：https://developer.android.com/guide/topics/manifest/activity-element.html
- `<application>`标签在Android开发者参考指南中的说明：https://developer.android.com/guide/topics/manifest/application-element.html