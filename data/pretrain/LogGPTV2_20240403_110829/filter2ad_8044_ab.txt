# Hazelcast对称加密
漏洞规则： HAZELCAST_SYMMETRIC_ENCRYPTION  
配置Hazelcast让网络通信使用对称加密（可能是DES或者其他的）  
密码本身不能提供完整性和身份验证。使用非对称加密会更好一些
引用：  
[WASC-04: Insufficient Transport Layer
Protection](http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection)  
[Hazelcast Documentation:
Encryption](http://docs.hazelcast.org/docs/3.5/manual/html/encryption.html)  
[CWE-326: Inadequate Encryption
Strength](http://cwe.mitre.org/data/definitions/326.html)
# 不安全的空密码
漏洞特征： NULL_CIPHER  
空密码很少被使用在生产环境中。它通过返回与明文相同的密文来实现Cipher接口。在极少的环境中，比如测试环境，才可能会出现空密码  
有漏洞的代码：
    Cipher doNothingCihper = new NullCipher();
    [...]
    //The ciphertext produced will be identical to the plaintext.
    byte[] cipherText = c.doFinal(plainText);
解决方案  
避免使用空密码，意外的使用会导致严重的安全风险。  
引用：  
[CWE-327: Use of a Broken or Risky Cryptographic
Algorithm](http://cwe.mitre.org/data/definitions/327.html)
未加密的socket  
漏洞特征：UNENCRYPTED_SOCKET  
如果网络通信不加密的话，那么传输的数据就会被攻击者拦截并读取里面的内容。  
有漏洞的代码：  
明文socket（透明传输）
    Socket soc = new Socket("www.google.com",80);
解决方案：  
ssl socket（加密传输）
    Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);
使用sslsocket，你需要确保你使用的SSLSocketFactory能验证所提供的证书是否有效，这样你就不会遭受中间人攻击。请阅读owasp中关于传输层协议的那一章，以了解更多正确的做法。
引用：  
[OWASP: Top 10 2010-A9-Insufficient Transport Layer
Protection](https://www.owasp.org/index.php/Top_10_2010-A9)  
[OWASP: Top 10 2013-A6-Sensitive Data
Exposure](https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure)  
[OWASP: Transport Layer Protection Cheat
Sheet](https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet)  
[WASC-04: Insufficient Transport Layer
Protection](http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection)  
[CWE-319: Cleartext Transmission of Sensitive
Information](http://cwe.mitre.org/data/definitions/319.html)
# 未加密的服务器socket
漏洞特征：UNENCRYPTED_SERVER_SOCKET
如果网络通信不加密的话，那么传输的数据就会被攻击者拦截并读取里面的内容。  
有漏洞的代码：  
明文socket（透明传输）
    ServerSocket soc = new ServerSocket(1234);
解决方案：  
ssl socket（加密传输）
    ServerSocket soc = SSLServerSocketFactory.getDefault().createServerSocket(1234);
使用sslsocket，你需要确保你使用的SSLSocketFactory能验证所提供的证书是否有效，这样你就不会遭受中间人攻击。请阅读owasp中关于传输层协议的那一章，以了解更多正确的做法。
引用：  
[OWASP: Top 10 2010-A9-Insufficient Transport Layer
Protection](https://www.owasp.org/index.php/Top_10_2010-A9)  
[OWASP: Top 10 2013-A6-Sensitive Data
Exposure](https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure)  
[OWASP: Transport Layer Protection Cheat
Sheet](https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet)  
[WASC-04: Insufficient Transport Layer
Protection](http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection)  
[CWE-319: Cleartext Transmission of Sensitive
Information](http://cwe.mitre.org/data/definitions/319.html)
# DES是不安全的
漏洞特征：DES_USAGE
DES被认为是现代加密系统中比较强壮的加密方式，当前，NIST建议使用AES block ciphers来替代DES  
有漏洞的代码：
    Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
解决方案示例代码：
    Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
引用：  
[NIST Withdraws Outdated Data Encryption
Standard](http://www.nist.gov/itl/fips/060205_des.cfm)  
[CWE-326: Inadequate Encryption
Strength](http://cwe.mitre.org/data/definitions/326.html)
# DESede是不安全的
漏洞特征:TDES_USAGE
三次DES（也被称为3DES 或者 DESede）被认为是现代加密系统中比较强壮的加密方式，当前，NIST建议使用AES block
ciphers来替代DES  
有漏洞的代码：
    Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
解决方案示例代码：
    Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
引用：  
[NIST Withdraws Outdated Data Encryption
Standard](http://www.nist.gov/itl/fips/060205_des.cfm)  
[CWE-326: Inadequate Encryption
Strength](http://cwe.mitre.org/data/definitions/326.html)
# 不用padding的RSA是不安全的
漏洞特征：RSA_NO_PADDING
软件使用RSA加密算法但是没有使用非对称加密填充(OAEP), 这种加密可能会是比较脆弱的  
有漏洞的代码：
    Cipher.getInstance("RSA/NONE/NoPadding")
解决方案：  
应该用下面的代码来替换
    Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding")
引用:  
[CWE-780: Use of RSA Algorithm without
OAEP](http://cwe.mitre.org/data/definitions/780.html)  
[Root Labs: Why RSA encryption padding is
critical](http://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/)
# 硬编码密码
漏洞特征：HARD_CODE_PASSWORD  
密码不应该留在源码里面，在企业里面源码会被广泛的分享，有些部分甚至会被开源出来，为了更安全的管理，密码和密钥应该被单独的存储在配置文件中，或者keystores中（硬编码密钥会有一个单独的特征：Hard
Coded Key pattern)  
有漏洞的代码
    private String SECRET_PASSWORD = "letMeIn!";
    Properties props = new Properties();
    props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");
引用：  
[CWE-259: Use of Hard-coded
Password](http://cwe.mitre.org/data/definitions/259.html)
# 硬编码密钥
漏洞特征： HARD_CODE_KEY  
加密密钥不应该留在源码里面，在企业里面源码会被广泛的分享，有些部分甚至会被开源出来，为了更安全的管理，密码和密钥应该被单独的存储在配置文件中，或者keystores中（硬编码密码会有一个单独的特征：Hard
Coded Password pattern)  
有漏洞的代码
    byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
    SecretKeySpec spec = new SecretKeySpec(key, "AES");
    Cipher aes = Cipher.getInstance("AES");
    aes.init(Cipher.ENCRYPT_MODE, spec);
    return aesCipher.doFinal(secretData);
引用：  
[CWE-321: Use of Hard-coded Cryptographic
Key](http://cwe.mitre.org/data/definitions/321.html)
# 不安全的hash比较
漏洞特征：UNSAFE_HASH_EQUALS  
攻击者可能会通过密钥的比较时间来发现密钥的hash值，当Arrays.equals() 或者
String.equals()被调用的时候，如果有一些字节被匹配到的话，它们会推出的更早一些  
有漏洞的代码：
    String actualHash = ...
    if(userInput.equals(actualHash)) {
        ...
    }
解决方案：
    String actualHash = ...
    if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
        ...
    }
引用：  
[CWE-203: Information Exposure Through
DiscrepancyKey](https://cwe.mitre.org/data/definitions/203.html)
# 来自Struts Form的输入没有被验证
漏洞特征： STRUTS_FORM_VALIDATION  
来自Form的输入应该被简单的验证一下，预防性的验证能够抵御更进一步的攻击。  
validate这个函数引入了验证的实现
    public class RegistrationForm extends ValidatorForm {
        private String name;
        private String email;
        [...]
        public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
            //Validation code for name and email parameters passed in via the HttpRequest goes here
        }
    }
引用：  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)  
[CWE-106: Struts: Plug-in Framework not in
Use](http://cwe.mitre.org/data/definitions/106.html)
# XSSRequestWrapper的xss防护是脆弱的
漏洞特征：XSS_REQUEST_WRAPPER  
在各种公开的博客里面，博主通过实现HttpServletRequestWrapper调用XSSRequestWrapper  
这个过滤函数的脆弱点在于以下的几个方面：
  * 它仅仅覆盖参数，而没有覆盖到http头或者侧信道输入 。 
  * 简单替换的方式很容易会被绕过（见下面的例子） 
  * 黑名单的方式太脆弱（不如用白名单的方式来验证好的输入） 
绕过示例：
    alert(1)
上面的输入会被转换为：``
。移除了vbscript:"之后就变成了`""`
为了更强的保护，请在view (template, jsp, ...) 中选择自动编码字符串的解决方案，解决方案里面的规则被定义在OWASP XSS
Prevention 备忘录中。  
引用：  
[WASC-8: Cross Site
Scripting](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)  
[OWASP: XSS Prevention Cheat
Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)  
[OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)
](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)  
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](http://cwe.mitre.org/data/definitions/79.html)
# Blowfish 使用过短的密钥
漏洞特征：BLOWFISH_KEY_SIZE  
Blowfish的密钥支持32 bits 到 448
bits的长度。如果密钥太短，会导致加密内容被黑客暴力破解。如果使用Blowfish的话，密钥至少应该选择128 bits 。  
如果算法被改变，那么应该AES分组密码
有漏洞的代码：
    KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");
    keyGen.init(64);
解决方案：
    KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");