and the decryption equations as: 
forO<j<16 
...  (5.3) 
forO<j< 16 
...  (5.4) 
68  CRYPTOGRAPHY 
and where Xo  is  the initial plaintext and Yo is the ciphertext to be decrypted. The 
output from  the decryption process is  given by equation (5.4)  and iterating back 
to the first round of decryption we obtain a set of nested functions of the form: 
Now we know that the final term from the encryption process, i.e. the cipher(cid:173)
text, is the input to the decryption process so that: 
...  (5.5) 
The central term in equation (5.5) can now be written as: 
which from the reversibility conditions (5.1) become: 
... (5.6) 
... (5.7) 
... (5.8) 
but, from equation (5.3) and the reversibility conditions (5.2), this can be written 
in the form: 
By similarly iterating through the entire  structure and using  the  reversibility 
conditions (5.1) and (5.2), we eventually arrive at the expression: 
...  (5.9) 
...  (5.10) 
which is just the plaintext. There is nothing magical about the number 16 as far as 
the  basic  structure  is  concerned,  although  for  DES  this  number  of rounds  was 
chosen for  a very  specific reason.  There is  a kind of cryptanalytic attack known 
as  differential  cryptanalysis  [3]  which  analyses  slight  differences  in  known 
plaintext-ciphertext  pairs  and  garners  information  from  how  they  propagate 
through the cipher. It turns out that 16 rounds is the minimum number of rounds, 
for  DES,  to  ensure  that  exhaustive  key  search  is  quicker  than  differential 
cryptanalysis.  In general  terms  the  number  of rounds  should be  such  that  good 
global diffusion is obtained and that attacks such as differential cryptanalysis are 
rendered less effective than exhaustive key search. 
The basic  structure of Fig.  5.2  is  only  one of a range of structures  that give 
effective reversibility, that is decryption. It is  not difficult to conceive of a com(cid:173)
plicated  series  of mathematical  operations  that  would  give  good  diffusion  and 
confusion. The trick in  designing a cipher system is to ensure that decryption  is 
BASIC CRYPTOGRAPHY  69 
also  easily  achieved.  The  only  requirement  for  successful  reversibility  of the 
entire cipher of Fig.  5.2  is  that the  structure  is  symmetric  about  the  mid-point, 
which in the case of DES is the involutary permutation P in round 8. 
Let  us  examine  each round  now  in  more  detail.  Each  round  consists  of an 
involution cipher and an involutary permutation. The involution cipher is a com(cid:173)
mon structure in cipher systems and is known as  a Feistel cipher. The involutary 
permutation  consists  of simply  swapping  the  halves  of the  data.  One  round  of 
DES is shown in Fig. 5.3. 
32 
32 
Fig. 5.3  A single round of DES. An input of 64 bits is split into two 32-bit blocks and fed into the 
Feistel structure. The appropriate key is fed into the nonlinear function/from the key  schedule algo(cid:173)
rithm. After the Feistel cipher the output halves of the data are simply swapped ready for the next 
round. The operator Ell  is the binary addition operator. 
It is obvious that the procedure of swapping halves is  an involutary pennuta(cid:173)
tion and is its own inverse. It is not so clear, however, that the Feistel cipher guar(cid:173)
antees reversibility whatever the details of the function f. To see  this we denote 
the  inputs  and  outputs  from  the  Feistel  cipher as  (Li , R) and  (Lf.  Rj),  respec(cid:173)
tively.  Feeding this output back into the Feistel structure we  obtain  (L"j' R") for 
the outputs of this operation as: 
but we have that: 
...  (5.11) 
'"  (5.12) 
so that using these two equations we find that the final output equals the input: 
70  CRYPTOGRAPHY 
... (5.13) 
Most of what we have examined in DES  so far has,  in some  sense,  almost a 
peripheral  cryptographic  significance.  It is  the  nonlinear  function f  that  is  the 
cryptographic heart of DES.  A poor choice of this function leads to a very weak 
system. A good choice off will lead to  very good local confusion and diffusion. 
Further diffusion occurs throughout the rounds because of the swapping of halves 
and the binary addition operator ED  in the Feistel cipher. 
The nonlinear function f takes as its inputs  32 bits from  the right half of the 
64-bit input data block and 56 bits of secret key from the key-schedule algorithm. 
The  last byte of the  key  is  deleted  and the  32-bit data block undergoes  a linear 
expansion to  become a block of 48  bits.  The  48-bit key  and this  data block are 
added together modulo 2 and the result of this is fed into the eight substitution, or 
S-boxes of DES. Each S-box takes as its input 6 bits and gives 4 bits as its output. 
This  output is  then  subject to  a further  linear permutation.  The  resultant  32-bit 
data block, the output from  the function,  is the half word to be  added to the left 
half word in the Feistel cipher of Fig.  5.3. The basic structure of this function  is 
depicted in Fig.  5.4 and the  operation  of an  S-box is  shown  in  Fig.  5.5.  The  S(cid:173)
boxes contain all  the  nonlinearity of DES.  Their design  is critical to  the  overall 
strength of the algorithm. Even slight changes to the permutations they perform 
can seriously weaken DES. 
delete last byte 
48 
48-bit input 
32-bit output 
linear 
permutation 
32-bit word to be 
added to  Lj_1 
Fig. 5.4  The nonlinear function of DES. The eight S-boxes contain the 
nonlinear transfonnations and are the cryptographic heart of DES. Each S(cid:173)
box can itself be considered to be a block cipher. 
BASIC CRYPTOGRAPHY  71 
substitution  box 
Sj 
Fig. 5.5 
The basic structure of the  input and outputs to an S-box. 
Bits number  1 and 6 of the  input to  an  S-box  are  control  bits  and a different 
permutation is  performed depending on which of the four possible combinations 
of control bits is received. The look-up table for the first  S-box of DES  is  shown 
in  Table 5.1.  We can see that if the  input bits are  011001  the  control  bits  are  01 
and  the  half-byte  value  of the  remainder,  that  is  1100  ==  12.  so  that  the  output 
value is  simply 9 ==  1001. 
Table 5.1 
The look-up table for the first S-box of DES. 
Half-byte  value a/the input hits 
0 
14 
0 
4 
15 
I 
4 
15 
I 
12 
2 
13 
7 
14 
8 
3 
I 
4 
8 
2 
4 
2 
14 
13 
4 
5 
15 
2 
6 
9 
6 
II 
13 
2 
I 
7 
8 
1 
II 
7 
8 
3 
10 
15 
5 
9 
10 
6 
12 
II 
10 
6 
12 
9 
1 
II 
I.l 
II 
0 
14 
12 
5 
9 
3 
10 
1.1 
q 
5 
10 
() 
14 
0 
3 
5 
6 
15 
7 
X 
0 
13 
Control 
bits 
Left  Right 
0 
0 
I 
I 
0 
I 
0 
I 
The  full  details  of all  the  other  S-boxes,  the  linear  expansion  function  and 
permutation can be found  in any good textbook of cryptography  [1.  4-61  and are 
not relevant to our discussion here.  The S-boxes are the least understood compo(cid:173)
nent of DES and there are perennial fears  that they contain a trapdoor. Trapdoors 
are  often  inserted  into  algorithms  to  weaken  them  sufficiently  for  export.  The 
fears  over whether DES  has a trapdoor stem from  concern over the  involvement 
of the NSA in the design of DES and the fact that the design principles  for the S(cid:173)
boxes have never been revealed. However, DES is probably the  most extensively 
studied  cryptosystem  and  despite  this  intensive  effort  over the  last  20  years  to 
find weaknesses or trapdoors none has ever been found. 
We  now  have  an  almost complete  picture of DES.  The  basic  structure  con(cid:173)
sists of the repeated application of smaller ciphers. The fundamental  components 
of DES  are  the S-boxes  which  provide  local  confusion and  diffusion.  This  local 
72  CRYPTOGRAPHY 
effect is  'amplified'  by  repeated application of the  Feistel cipher and  the  swap(cid:173)
ping of halves permutation. There is one critical component of DES about which 
we have said very little. This is the key. DES keys are 64 bits long although 8 bits 
of this are discarded so that the effective key length for DES is just 56 bits. The 
key is fed into a key-schedule algorithm. This algorithm provides the  16 sub-keys 
required for the f function in the Feistel cipher in each round.  It would be inap(cid:173)
propriate to  go into detail but this  key  expansion algorithm produces a different 
56-bit key  for  each  round.  The  exact details  of the  algorithm  can  be  found  in 
good cryptography texts [l, 4-6]  or the standard itself [2].  It is important to note 
that the  key  expansion  algorithm  does  not  increase  the  security  of DES  in  the 
sense that an  exhaustive key  search still requires  a search  of a key  space  of 256 
bits. 
DES is an enormously important cryptosystem and is  still in widespread use. 
Many  ATM  transactions  are  protected  by  DES.  However,  for  large  sums  of 
money  DES  is  no  longer  thought  to  provide  adequate  protection.  This  is  not 
because  of any  supposed  weakness  in  DES  itself but  that  the  key  is  no  longer 
thought to  be  large  enough  to  withstand  a  concerted  attack.  It  would require  a 
great deal of resources to be able to crack a 56-bit DES system but the benefit of 