using the packet counter feedback, we found that it takes
only about 4–5 seconds to complete the inference when
RTT is at around 200ms.
C. On-site TCP hijacking
We next describe more details on the most critical part
of each hijacking attack. We also analyze the bandwidth
requirement when necessary (e.g., to reset the server) and
present the experimental results in Table II measured using
the Android 2.3.4 OS where we hijack m.facebook.com
with a Planetlab server acting as the attack server.
1) Reset-the-server: In this attack, the most critical part
is to successfully reset the server. As described before,
we leverage requirement C4 which tells the attacker that
the victim connection’s ISN is at most 16,777,216 away
(either smaller or larger) from the ISN of the attacker-
initiated connection. Since RST packets with any sequence
number that falls in the receive window can terminate
the max number of required RST
the connection [33],
16777216×2
server rwnd where server rwnd
can be calculated as
represents the server’s TCP receive window size. Further,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
given that the RST happens right after the server send-
ing out SYN-ACK, server rwnd is in fact
the initial
TCP receive window size denoted as server init rwnd.
Typically, server init rwnd is about three to four full
TCP packets long as per TCP slow start. For instance, m.
facebook.com uses 4380, twitter.com uses 5840, and the
corresponding number of required RST packets is 7661
and 5746 respectively. However, different websites can have
very different values. We found chase.com uses 32805
which is almost a magnitude larger. In general, the larger
the server init rwnd, the fewer packets required.
RT T
server init rwnd
16777216×2
Moreover, to successfully reset the server in time, all
RST packets have to be delivered between time 3 and 5 as
shown in Figure 4. If they arrive after time 5, the server may
already respond to the client’s request. Thus, the valid time
window for reset is basically a round trip time between
the client and the server. The bandwidth requirement is
× 40bytes× 8bits. In our
then computed as
experiment in cellular networks where RT T = 200ms, it
will be 327Kbps − 12M bps (as shown in Table II), de-
pending on the server init rwnd values mentioned above.
When RTT is smaller (as on the Internet), the bandwidth
requirement will increase proportionally. This is another
reason why cellular devices are particularly vulnerable and
easy to attack. Although the bandwidth requirement may
seem high, it is important to note that bandwidth resource
is becoming more abundant and cheaper. For instance, the
uplink bandwidth of a standard home Comcast network can
be up to 4.2Mbps (tested in our home). The bandwidth
requirement can even be distributed across a number of
bots. Moreover, the bandwidth requirement is not a hard
requirement and the attack can be attempted multiple times.
For instance, it will be good enough to use TCP hijacking
to steal a user’s password just once. In our experiment,
we use a Planetlab server acting as the attack server to
reset m.facebook.com. We are not certain about the exact
bandwidth, but the reset success rate is quite good according
to our experiment.
As shown in Table II, the success rate of reset-the-server
hijacking is 65% after 20 experiments with 7 failures in
total. 5 of them are caused by the RST race condition
failure. Other 2 are due to sequence number inference
failures (e.g., packet loss). As we can see, the success rate is
high enough to cause real damage. It takes 4 to 5 seconds to
complete the inference when measured with packet count
feedback. It takes only 2 seconds using intermediate hop
feedback as the probing does not go through the cellular
link. The downside is that the latter may not always be
available. Nevertheless, since we observe that it takes more
than 10 seconds to tear down a connection after several
rounds of retransmission, the inference time is deﬁnitely
short enough.
2) Preemptive-SYN: During implementation, we found
one interesting detail about the intermediate hop feedback
where its TTL-expired message can inadvertently terminate
Table II: TCP hijacking bandwidth requirements and results
BW required
BW factor
Success rate
Inference time
server init rwnd, RTT
65%
4–5s
Reset-the-server
0.3 – 12Mbps
Preemptive-SYN Hit-and-run
6.6 – 26Mbps
None
None
65%
6–7s
WIN, RTT
85%
8–9s
the client-side connection. It happens only when a TTL-
expired message embedding a TCP header with a sequence
number matching the original SYN’s sequence number
(similar to the hit-and-run hijacking case). Our optimization
on the sequence number inference should already alleviate
the problem since we stop inference much earlier so that it
is unlikely a spoofed packet has the same sequence number
as in the original SYN.
Note that there is no bandwidth requirement for this
attack as long as requirement S2 is satisﬁed. Interestingly,
according to Table II, the success rate is still measured
to be 65% after 20 experiments. However, out of the 7
failed cases, 6 are due to the sequence number inference
(likely caused by the noise in IPID side-channel). 1 of them
seems to be due to a load balancing change that causes the
connection to the attack server to go through a different
intermediate hop. However, we observe that this happens
very rarely. In terms of the inference time, it takes about
6 to 7 seconds, slightly longer than the Reset-the-server
attack, due to the need to send more packets per window
to overcome the noise in the IPID side-channel.
4G
3) Hit-and-run: The critical part of this attack is to
shift the window in time at the very beginning to prevent
legitimate server’s packets from going through the ﬁrewall.
The number of packets required is computed as
W IN−1
since one packet is sent per W IN − 1. Depending on the
window scaling factor, W IN is 256K and 1M respectively
for the two Android OSes. The bandwidth requirement is
RT T ×40bytes×8bits or 26Mbps and 6.6Mbps
basically
if we plug in the two WIN values (as shown in Table II).
One thing to note is that the window scaling factor is
incremented every time a new Android version is pushed
out, presumably to take advantage of the increasing cellular
network bandwidth. This indicates that future attacks will
have even lower bandwidth requirement.
W IN−1
4G
As shown in Table II, the success rate is 85% with only
3 failed cases caused by the inference failure. No failure
is observed for the initial window shifting likely due to
the lower bandwidth requirement with the window scaling
factor of 4. Note that we need to shift the window back and
forth in each iteration, which means more packets are sent
and packet loss is thus more likely. For the same reason,
the inference time is a little longer.
D. Off-site TCP injection
We were not able to implement the URL phishing attack
on the nation-wide network, which is the only attack we did
not implement. The reason is that when NAT is deployed,
the attack requires knowing the client’s private IP in order
to conduct the sequence number inference from the client’s
357
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
network (same as preemptive-SYN). However, without on-
site malware, it is difﬁcult to obtain the device IP (i.e.,
private IP) through mobile browsers. The only way to get
device IP seems to be through Java applet which is not
supported on mobile browsers. We have conﬁrmed neither
Javascript nor Flash can do so. Note that this attack is
feasible for cellular carriers using public IP addresses for
their mobile devices (there are in fact many such carriers
according to a recent study [32]).
We did implement the long-lived connection inference
using a single ICMP packet and run a small-scale exper-
iment on the nation-wide carrier to measure the number
of cellular IPs actively using Android’s push notiﬁcation
service. We pick a particular push server IP 74.125.65.188
and port 5228 (push service port), and choose an entire /16
cellular IPs to probe. For each IP, we enumerate every port
within the default local port range for Android: 32768 –
61000. To avoid probing too aggressively, our experiments
conservatively rate limit the probing to 6 seconds per IP.
Interestingly, using the single-ICMP-packet probing, we
found that about 7.8% of the IPs have a connection with the
server. That means it is fairly easy to ﬁnd popular services
to attack. Even through the connections are encrypted, it is
still possible to carry out connection reset attacks. In fact,
this approach is much more efﬁcient than the traditional
reset attack where combinations of client port number and
sequence number need to be enumerated.
E. Establish spoofed connections
We implement the attack mostly as described in §IV-B3.
The only difference is that instead of spooﬁng a single
IP, we spoof as many IPs (for different connections) to a
controlled target server as possible. Speciﬁcally, we try to
spoof all IPs inside a /16 IP range in the nation-wide carrier.
For each IP that we want to spoof, we need to ﬁrst test
if the IP is responsive. To do so, we ﬁrst send a SYN
packet with a spoofed IP from the attack phone inside the
cellular network to our attack server which responds with a
legitimate SYN-ACK back. If the spoofed IP is responsive,
a RST will be generated. Otherwise, we consider the IP to
be unresponsive. For any unresponsive IP, we send a second
spoofed SYN, this time, destined to the victim server (i.e.,
a controlled lab server). The rest of the work is to simply
conduct the sequence number inference from the attack
server using the intermediate hop feedback so that we can
spoof a correct ACK packet to complete the connection.
Ideally an attacker can simultaneously spoof many IPs.
there is only a single shared
However, we found that
responsive intermediate hop where all
the TTL-expired
messages essentially share a single IPID counter. If we
parallelize the process, different experiments probing to
the same intermediate hop can interfere with each other.
Consequently, we can only pipeline the process as much as
possible to make sure there is always one sequence number
inference procedure probing to the intermediate hop.
Through our experiments, we found that there are 80%
of IPs are unresponsive, which means that there are plenty
of IPs an attacker can make use of to establish spoofed
connections. We found that we can make about 0.6 success-
ful connection per second on average with more than 90%
success rate (the failed cases are mostly due to sequence
number inference error).
VI. VULNERABLE NETWORKS
To understand the susceptibility of the existing networks
to the described attacks, in this section, we report the mea-
surement results of ﬁrewall implementations and availability
of responsive intermediate hop, through a deployed mobile
application (referred to as MobileApp) on the Android mar-
ket (the malware described earlier was not on the market).
The MobileApp measures the network performance and
policy and reports the results to users so that they have
incentives to run our app. The data are collected between
Apr 25th, 2011 and Oct 17th, 2011 over 149 carriers
uniquely identiﬁed by their Mobile Country Code (MCC)
and Mobile Network Code (MNC).
A. Firewall implementation types
Methodology. We focus on the three ﬁrewall implemen-
tation properties described in §III-A. The three properties
are selected based on experiences with the ﬁrewalls encoun-
tered in real carrier networks as well as a number of trial-
and-errors on the earlier deployment of our MobileApp.
To infer the window size, we try the following WIN
values in order: 2G, 128M, 16M, 1M, 512K, 256K, 64K.
Note that
testing exhaustively all possible window size
values is too time-consuming as a long timeout (i.e., 4
seconds) is needed for each probing packet to account for
long cellular RTTs. Speciﬁcally, for each WIN value, our
MobileApp server test sequence numbers X-WIN+2 and
X+WIN-2 to check if they can trigger any response. X is the
next expected server-side sequence number. The adjustment
by 2 is to accommodate a slightly smaller window imple-
mentation from the common values. The reverse ordering
by window size is to ﬁnish the test more quickly if there is
no sequence number checking (i.e., WIN=2G).
To test the left-only/right-only window behavior, we
always try the left window and then the right one (to be
consistent). If the left window probing packet is allowed
but not the right one, we conclude it is left-only window.
Similarly, we can discover right-only window ﬁrewalls.
Additionally, we have to eliminate the window-shifting case
where the left-window packet can shift
the window to
the left so that the right window packet may be falsely
considered as “out-of-window”. Such cases can be detected
by the test described next.
To test if the ﬁrewall has window-shifting behavior, the
basic procedure is as follows: once a left-window packet
with sequence number X-WIN+2 is allowed by the ﬁrewall,
we try to shift it further left by (WIN-1) twice. If both
attempts of shifting succeed, we try the sequence number
358
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
Table III: Sequence-number-checking ﬁrewall types
Window Size
64K
ﬁxed>128M
window scaling
window scaling
window scaling
-2G
Left/Right
left-only
left&right
left&right
left&right
left-only
left-only
Window Moving
window-advancing
window-advancing
window-advancing
window-shifting
window-advancing
unknown
# of Carriers
6
5
7
17
10
2
X-WIN+2 again. If the window is indeed shiftable, its center
is already shifted left by 2(WIN-1), making X-WIN+2 out-
of-window (and the packet will be dropped). There are two
corner cases that need to be considered to ensure the validity
of the results. The ﬁrst one is that since we do not cover
all possible window sizes, the inferred window size WIN
may be an under-estimate of the actual window size. We
address this explicitly by shifting the window far enough
beyond an over-estimate of the actual window size. The
second one has to do with resetting the window position to
its original value after left window test is done before the
right window test.
Results. Overall, out of the 149 carriers, we found
47 carriers that deploy sequence-number-checking ﬁrewalls
with at least two completed supporting experiments. 10
other carriers were found to be suspicious but with only one
experiment, thus are excluded due to possible errors caused
by packet loss. If we consider only the 47 carriers, 31.5%
of the carriers are subject to the sequence number inference
attack. The nation-wide network we tested is excluded from
this analysis because it is somewhat a special case with two
different ﬁrewalls deployed. We did not look for a similar
two-ﬁrewall setup in the measurement and thus cannot
conclude the number of other carriers with such two-ﬁrewall
setup. In essence, our experiments test the combined effects
of all sequence-number-checking ﬁrewalls.
A detailed breakdown of the measured ﬁrewall imple-
mentations is shown in Table III.
Window size. We can observe three main window sizes:
1). 64K — some legacy ﬁrewalls only support this value