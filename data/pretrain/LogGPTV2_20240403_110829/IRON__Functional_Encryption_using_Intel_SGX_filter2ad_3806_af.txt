tion about the plaintext data. For some multi-input functionalities,
private key MIFE is necessary to achieve meaningful security. For
example, consider the order function ord (x, y) = 1 iff x > y. In the
public key setting, given an encryption cx of x and a functional
key for ord the decryptor can produce valid ciphertexts for any
arbitrary integer y in order to learn ord (x, y), and can recover x
by binary search. Iron supports private key MIFE. In this mode,
the Authority appends a signature on the appropriate index to the
public encryption key, i.e. eki = siдi||pkpke where siдi is a signa-
ture on the integer i using sksign. To encrypt a message m with
eki, the encryptor uses pkpke to produce a public key encryption
ci,m of siдi||m. When an enclave on the decryption node receives
ci,m as the ith input to a function, it uses skpke to decrypt ci,m and
validates the signature appended to the message using vksign. If
this is not a valid signature on the index i then the enclave aborts
the operation, and otherwise it proceeds with m.
Function Private FE. Currently, Iron supports a version of FE
where the function to be evaluated is not hidden from the decryptor,
and moreover, it is not hidden from the decryption node. Function
private FE [12] could be supported by running a single enclave on
the decryption node that receives encrypted and signed function
code, decrypts the function code, checks the signature, and executes
the decrypted code either through an interpreter or by writing
the code to pre-allocated WX enabled pages. However, doing this
securely would require the capability of full program obfuscation in
SGX. It has not yet been demonstrated that this is possible to achieve
practically for generic programs given the current side-channel
attacks on SGX, though some effort in this direction was made in
[49] and demonstrated on SGX-like special purpose hardware in
[46].
Multi-Authority FE. In multi-authority FE [17], the trust is dis-
tributed among multiple authorities instead of having a single au-
thority manage all the credentials. Clients must obtain secret keys
from all (or a suitably large subset) of the authorities in order to
be able to decrypt ciphertexts. Since the secret keys in Iron are
simply signatures, it would be easy to augment Iron to support
this feature by using threshold-signatures and multiple KMEs.
Application-specific implementations. In addition to the above
general purpose extensions, we envision that future work can build
more application-specific FE systems on top of Iron. This could
involve supporting more complex functionalities (and measuring
their performance) as well as more expressive authorization policies,
such as utilizing SGX’s trusted time and monotonic counters as
discussed earlier.
ACKNOWLEDGMENTS
This work was funded by NSF, DARPA, a grant from ONR, and the
Simons Foundation. Opinions, findings and conclusions or recom-
mendations expressed in this material are those of the authors and
do not necessarily reflect the views of DARPA.
A HW CORRECTNESS AND SECURITY
DEFINITIONS
Correctness. A HW scheme is correct if the following things hold
(using the syntax from Definition 5.1): For all aux, Q ∈ 𝒬, all in in
the input domain of Q and all handles hdl′ ∈ ℋ,
• Correctness of Run: out = Q (in) if Q is deterministic. More
generally, ∃ random coins r (sampled in run time and used
by Q) such that out = Q (in).
• Correctness of Report and ReportVerify:
(cid:20)
(cid:21)
Pr
• Correctness of Quote and QuoteVerify:
HW.ReportVerifyskreport (hdl′
(cid:20)
(cid:21)
, report) = 0
= negl(λ)
Pr
HW.QuoteVerify(params, quote) = 0
= negl(λ)
A.1 Local attestation unforgeability
The local attestation unforgeability (LocAttUnf) security is defined
similarly to the unforgeability security of a MAC scheme. Infor-
mally, it says that no adversary can produce a report =
hdl,
that verifies correctly for any hdl′ ∈ ℋ and
tagQ , in, out, mac
out = Q (in), without querying the inputs (hdl, in).
md′
(cid:16)
(cid:17)
This is formally defined by the following security game.
Definition A.1. (LocAttUnf-HW). Consider the following game
between a challenger 𝒞 and an adversary 𝒜.
(1) 𝒜 provides an aux.
(2) 𝒞 runs the HW.Setup(1λ, aux) algorithm to obtain the pub-
lic parameters params, secret keys (skHW, skreport) and an
initialization string state. It gives params to 𝒜, and keeps
(skHW, skreport) and state secret in the secure hardware.
(3) 𝒞 initializes a list query = {}.
(4) 𝒜 can run HW.Load on any input (params, Q ) of its choice
(5) 𝒜 can run HW.Run&Report on input (hdl, in) of its choice
. For every run,
(6) 𝒜 can also run HW.ReportVerify on input (hdl′, report) of
and get report :=
𝒞 adds the tuple (mdhdl, tagQ , in, out) to the list query.
its choice and gets back the result.
mdhdl, tagQ , in, out, mac
and get back hdl.
(cid:16)
(cid:17)
We say the adversary wins the above experiment if:
(1) HW.ReportVerify(hdl′∗, report∗) = 1, where report∗ = (md∗
hdl,
tag∗
(2) (md∗
Q , in∗, out∗, mac∗) was not added to query be-
fore 𝒜 queried HW.ReportVerify on (hdl′∗, report∗).
Q , in∗, out∗, mac∗) and
hdl, tag∗
The HW scheme is LocAttUnf-HW secure if no adversary can
win the above game with non-negligible probability.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA777A.2 Remote attestation unforgeability
The remote attestation unforgeability (RemAttUnf) security is de-
fined similarly to the unforgeability security of a signature scheme.
Informally, it says that no adversary can produce a quote =
hdl,
that verifies correctly and out = Q (in), without
tagQ , in, out, π
querying the inputs (hdl, in).
(cid:17)
(cid:16)
This is formally defined by the following security game.
Definition A.2. (RemAttUnf-HW). Consider the following game
between a challenger 𝒞 and an adversary 𝒜.
(1) 𝒜 provides an aux.
(2) 𝒞 runs the HW.Setup(1λ, aux) algorithm to obtain the pub-
lic parameters params, secret keys (skHW, skreport) and an
initialization string state. It gives params to 𝒜, and keeps
(skHW, skreport) and state secret in the secure hardware.
(3) 𝒞 initializes a list query = {}.
(4) 𝒜 can run HW.Load on any input (params, Q ) of its choice
(cid:17)
(cid:16)
(5) Also, 𝒜 can run HW.Run&Quote on input (hdl, in) of its
. For every
choice and get quote :=
run, 𝒞 adds the tuple (mdhdl, tagQ , in, out) to the list query.
hdl, tag∗
Q , in∗,
out∗, π∗).
mdhdl, tagQ , in, out, π
(6) Finally, the adversary outputs quote∗ = (md∗
and get back hdl.
We say the adversary wins the above experiment if:
(1) HW.QuoteVerify(params, quote∗) = 1,
(2) (md∗
The HW scheme is RemAttUnf-HW secure if no adversary can
Q , in∗, out∗) (cid:60) query
hdl, tag∗
win the above game with non-negligible probability.
Note that the scheme is secure even if 𝒜 can produce a quote∗
different from the query outputs for some (md∗
Q , in∗, out∗) ∈
query. But quote∗ cannot be a proof for a different program or input
or output. This definition resembles the existential unforgeability
like notions.
hdl, tag∗
hardware that we impose in our model.
We also point out some other important properties of the secure
• Any user only has black box access to these algorithms and
hence hidden from the internal secret key skHW, initial state
state or intermediary states of the programs running inside
secure containers.
• The output of the HW.Run&Quote algorithm is succinct: it
does not include the full program description, for instance.
• We also require the params and the handles hdl to be inde-
pendent of aux. In particular, for all aux, aux′,
(params, skHW, skreport, state) ← HW.Setup(1λ, aux)
(params′
) ← HW.Setup(1λ, aux′
and for hdl ← HW.Loadstate(params, Q ) and hdl′ ←
HW.Loadstate′ (params′, Q ), the tuples (params, hdl) and (params′,
hdl′) are identically distributed.
report, state′
HW, sk′
, sk′
)
B CRYPTO PRIMITIVE DEFINITIONS
Secret key encryption. A secret key encryption scheme E support-
ing a message domain ℳ consists of a probabilistic polynomial
time key generation algorithm E.KeyGen(1λ ) that takes in a se-
curity parameter and outputs a key sk from the key space 𝒦, a
probabilistic polynomial time encryption algorithm E.Enc(sk, msg)
that takes in a key sk and a message msg ∈ ℳ and outputs the
ciphertext ct, and a deterministic polynomial time decryption algo-
rithm E.Dec(sk, ct) that takes in a key sk and a ciphertext ct and
outputs the decryption msg.
msg ∈ ℳ,
A secret key encryption scheme E is correct if for all λ and all
(cid:20)
(cid:18)
Pr
E.Dec
sk, E.Enc(sk, msg)
(cid:12)(cid:12)(cid:12)(cid:12)
(cid:19)
sk ← E.KeyGen(1λ )
(cid:44) msg
(cid:103)
(2)
where the probability is taken over the random coins of the proba-
bilistic algorithms E.KeyGen, E.Enc.
= negl(λ)
A secret key encryption scheme E is said to have indistinguisha-
bility security under chosen plaintext attack (IND-CPA) if there is no
polynomial time adversary 𝒜 which can win the following game
with probability non-negligible in λ:
Definition B.1. (IND-CPA security of E). We define the following
game between a challenger 𝒞 and an adversary 𝒜.
sk from the key space 𝒦.
(1) The challenger run the E.KeyGen algorithm to obtain a key
(2) The challenger also chooses a random bit b ∈ {0, 1}.
(3) Whenever the adversary provides a pair of messages (msg0,
msg1) of its choice, the challenger replies with E.Enc(sk,
msgb ).
(4) The adversary finally outputs its guess b′.
The advantage of adversary in the above game is
′ = b] − 1
2
Advenc(𝒜) := Pr[b
A signature scheme. A digital signature scheme S supporting a
message domain ℳ consists of a probabilistic polynomial time
algorithm S.KeyGen(1λ ) that takes in a security parameter and
outputs the signing key sk and a verification key vk, a probabilistic
polynomial time signing algorithm S.Sign(sk, msg) that takes in a
signing key sk and a message msg ∈ ℳ and outputs the signature
σ, and a deterministic verification algorithm S.Verify(vk, σ , msg)
that takes in a verification key vk, a signature σ and a message msg
and outputs 0 or 1.
A signature scheme S is correct if for all msg ∈ ℳ,
Pr
vk, S.Sign(sk, msg), msg
S.Verify
= 0
(cid:18)
(cid:19)
(cid:20)
(sk, vk) ← S.KeyGen(1λ )
(3)
where the probability is taken over the random coins of the proba-
bilistic algorithms S.KeyGen, S.Sign.
= negl(λ)
(cid:12)(cid:12)(cid:12)(cid:12)
(cid:103)
A signature scheme S is said to be existentially unforgeable under
chosen message attack (EUF-CMA) if there is no polynomial time
adversary which can win the following game with probability non-
negligible in λ.
Definition B.2. (EUF-CMA security of 𝒮). We define the following
game between a challenger 𝒞 and an adversary 𝒜.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA778(cid:102)
(1) The challenger runs the S.KeyGen algorithm to obtain the
key pair (sk, vk), and provides the verification key vk to the
adversary.
(2) Initialize query = {}.
(3) Now, whenever the adversary provides a query with a mes-
sage msg, the challenger replies with S.Sign(sk, msg). Also,
query = query ∪ msg.
(4) Finally, the adversary outputs a forged signature σ∗ corre-
sponding to a message msg∗.
(cid:103)
The advantage of 𝒜 in the above security game is
Advsign (𝒜) := Pr
Public key encryption. A public key encryption (PKE) scheme
supporting a message domain ℳ consists of a probabilistic poly-
nomial time algorithm PKE.KeyGen(1λ ) that takes in a security
parameter and outputs a key pair (pk, sk), a probabilistic encryption
algorithm PKE.Enc(pk, msg) that takes in a public key pk and a
message msg ∈ ℳ and outputs a ciphertext ct, and a deterministic
decryption algorithm PKE.Dec(sk, ct) that takes in a secret key sk