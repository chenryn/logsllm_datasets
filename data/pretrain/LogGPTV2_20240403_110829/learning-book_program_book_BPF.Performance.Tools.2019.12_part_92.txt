latency range
It is possible to use a scatter plot for visualizing time and latency; however, with thousands or
millions of I/O, the number of points drawn bleed into each other and details are lost. The heat
map solves this by scaling its color range as needed.
In Vector, heat maps are generally available for the relevant BCC tools. At the time of writing
this includes biolatency(8) for block I/O latency, runqlat(8) for CPU run queue latency, and the
ext4-, xfs-, and zfs-dist tools for monitoring file system latency. By configuring the BCC PMDA
(explained in Section 17.1.5) and launching an appropriate BCC chart in Vecto, you can see the
outputs represented visually over time. Figure 17-3 shows block I/O latency collected on a host
with two-second samples running some simple fio(1) jobs
---
## Page 749
71.2
Chapter 17 Other BPF Performance Tools
ECC/BPF:Blelalenc
900.66.98.191:7402
536-13107
073-26214
12768-65535
6384-3276
1192-16382
4095-019:
U7
12-
56-51
28-25
4-122
256-511:
32-6
6-3
905
2-3
0-1
11:26:20
11:26:40
11:27:00
11:27:20
11:27:40
11:28:00
Figure 17-3 Vector latency heat map showing BCC/BPF biolatency(8)
You can see that the most common block latencies are in the 256- to 511-microsecond range, and
at the cursor point a tooltip shows there were S05 samples in that bucket.
For comparison, the following is the result from the command line biolatency(8) capturing a
similar time period:
+biolatency
Tracing block device I/0... Hit Ctrl-C to end.
C
s292n
: count
 -> 1
: 0
2 > 3
: 0
4 -> 7
: 0
 -> 15
: 0
16 -> 31
: 5
32 -> 63
: 19
64 -> 127
: 1
128 > 255
: 2758
|*+******
f
256 -> 511
: 12989
512 -> 1023
:11425
1024 > 2047
: 2406
|*******
2048 -> 4095
: 1034
|***
4096 -> 8191
: 374
| *
8192 > 16383
: 189
16384 > 32767
565S59  131071
: 0
131072 > 262143
: 42
---
## Page 750
17.1 Vector and Performance Co-Pilot (PCP)
713
The same latencies are visible in the aggregate; however, it is much easier to see the variation over
time with the heat map. It is also much more apparent that the I/O in the 128- to 256-millisecond
range is consistent over time and not the result of a short burst.
un1 sazs aq.q osje nq Aouaqel jo sn| sou 'suesgosu qons aonpoad seq spoot dIdg sueu are auat1
queue lengths, and other metrics: these can all be visualized using Vector heat maps.
17.1.3 Visualization: Tabular Data
In addition to visualizing the data, it can be helpful to see the raw data in a table. This can be
especially useful for some of the BCC tools as tables can provide additional context, or help to
make sense as a list of values.
For example, you can monitor execsnoop(8) output to show a list of processes that were recently
started. Shown in Figure 17-4, a Tomcat (catalina) process is starting on the monitored host.
A table suits visualizing these event details.
DCC/OPF:eecnsep
100.64.96.191:7402
COMM
PD
FPD
RITARCS
fimare
19709
19882
ctainsh
1182
4680
0
stegd
ASI0
lkosfiured
19706197070
$-garBjpp/u/
Figure 1.7-4  Vector displaying per-event output from BCC/BPF execsnoop(8)
Or, for example, you can monitor TCP sockets with tcplife(8), showing host address and port
details, transferred bytes, and session dluration. This is shown in Figure 17-5. (tcplife(8) was
introxduced in Chapter 10.)
BCC/BFF:Ixplile
100.66.96.191:7402
RD
HNC3
LADDR
LFOFRT
DADOR
DPORT
TX,KE
BX,KI
M5
2745
100.66.98.111
2F104
52942053
443
20017
1736
aget
300.6698.191
3424
128.11218.21
2050072
41595
2745
100.66.98.111
25778
529421018
443
20025
3745
300.66.99.191
450H0
52:119164.17)
443
75016
Figure 1.7-5  Vector listing TCP sessions via BCC/BPF tcplife(8)
---
## Page 751
714
Chapter 17 Other BPF Performance Tools
In this case, you can see amazon-ssm-agent, which appears to be long-polling for 20 seconds, and
a wget(1) command was executed that received two Gbytes of data in 41.595 seconds.
17.1.4 BCC Provided Metrics
The majority of the tools available in the bcc-tools package are currently available with the
PCP PMDA.
Vector has pre-configured charts for the following BCC tools:
biolatency(8) and biotop(8)
■ext4dist(8), xfsdist(8), and zfsdist(8)
tcplife(8), tcptop(8), and tcpretrans(8)
• runqlat(8)
 execsnoop(8)
Many of these tools support configuration options that can be provided on the host. Additional
BCC tools can also be added to Vector, with custom charts, tables, or heat maps to visualize
the data.
Vector also supports adding custom event metrics for tracepoints, uprobe, and USDT events.
17.1.5 Internals
Vector itself is a web application that runs completely inside the user’s browser. It was built
with React and leverages D3.js for charting. The metrics are collected and made available from
the Performance Co-Pilot [175], a toolkit for collecting, archiving, and processing performance
metrics from multiple operating systems. A typical Linux PCP installation offers more than
1000 metrics by default and is in turn extensible with its own plugins, or PMDAs.
To understand how Vector visualizes BPF metrics, it is important to understand how PCP collects
these metrics (see Figure 17-6):
PMDA:procts
PMDA:Linux
Vector
pmwebd
pmcd
PMDA:XIs
Web UI
REST Gateway
Metrics Collector
PMDA:BCC/BPF
PMDA: kemel
Figure 1.7-6  Vector metric source internals
---
## Page 752
17.1 Vector and Performance Co-Pilot (PCP)
715
• PMCD (performance metrics collector daemon) is the central component of PCP It
typically runs on the target host and coordinates collection of metrics from numerous
agents.
 PMDA (performance metrics domain agent) is the term given to an agent hosted by PCP
Many PMDAs are available and can each expose different metrics. For example, there are
agents to collect kernel data, agents for different filesystems, agents for NVIDIA GPUs, and
many more. To use BCC metrics with PCP the BCC PMDA must be installed.
Vector is a single-page web app that can be deployed to a server or executed locally and
allows connection to a target pmwebd instance.
* pmwebd acts as a REST gateway to the pmcd instance on the target host. Vector connects to
the exposed REST port and uses this to interact with pmcd.
PCP's stateless moxdel makes it lightweight and robust. Its overhead on hosts is negligible, as
metrics are not aggregated across hosts or persisted outside of the user’s browser session, keeping
Xeuoppy uoenduo pue ‘age Sundues ‘aess go xen Sudaay o aggrsuosa ane suap
the framework light.
17.1.6 Installing PCP and Vector
To try out PCP and Vector, you can run them both on a single host for local monitoring. In a real
production deployment, you likely would run Vector on a diferent host than the PCP agent and
PMDAs. Refer to the latest project documentation for details.
The steps to install Vector are documented and updated online [176][177]. They currently involve
installing pcp and pcp-webapi packages and running the Vector UI from a Docker container.
Follow these additional instructions to ensure that the BCC PMDA is enabled:
S ed /vaz/1ib/pcp/pedas/bce/
$./Insta11
[Ked Apz  3 20:54:06] pmdabcc (1es42) Info: In1tializ1ng, curzently 1n *notready
state 
setnpow petqeug ogu (Zb6st) oogepul [90#si0z E xdy po%]
[ed Apr  3 20:54:06]pmdabcc (18942) Info: [*biolatency′, *sysfork*, *tcpperpid′,
[ebumx,
W'hen Vector and PCP are running on the system with a configured BCC PMDA, you can connect
and view system metrics.
17.1.7
Connecting and Viewing Data
Browse to http:/localhost/ (if testing on your local machine) or the appropriate adress where
Vector is installed. Enter the hostname of the target system in the dialog shown in Figure 17-7.
---
## Page 753
716
Chapter 17 Other BPF Performance Tools
Add connection
44323
AI
Add
Figure 17-7 Vector target system selection
The connection area will show a new connection. As shown in Figure 17-8, the icon should
 asn [m alduexa s aqeeae auoooq mm suonq are[ a pue (1) uaaug mous 6ots
specific chart instead of a prepared dashboard, so flip across to the Custom tab (2), and choose
runqlat (3). Any modules not available on the server will be dimmed and not available. Click on
the enabled module and click the Dashboard ^ (4) arrow to close the dashboard.
Window
2min
5min
10n
100.66.69.22:7402
Simple
Custon
?
localhost
Charts
BCC/BPF
AddConnection
biolatency
?
runqlat
3
cxt4dist
xfsdist
Efsdist
teplife
?
Figure 17-8 Vector selection of BCC/BPF tool
---
## Page 754
17.1 Vector and Performance Co-Pilot (PCP)
717
In the connection dialog, by switching to the Custom tab and looking at the BCC/BPF options,
you can see the available BCC/BPF metrics. In this case, many of these BPF programs appear
grayed out as they are not enabled in the PMDA. When you select runqlat and close the
Dashboard panel, a run queue latency heat map is shown that is updated live each second, as
shown in Figure 17-9. This sources the runqlat(8) BCC tool.
CC/BPT
Figure 1.7-9  Vector run queue latency heat map
Be sure to explore the configuration widget for other available BCC metrics
17.1.8 Configuring the BCC PMDA
As noted previously, much of the BCC PMDA functionality is not available unless it is specifically
configured. The BCC PMDA man page (pmdabcc(1)) describes the configuration file format in
detail. The following show steps for configuring the tcpretrans BCC module to make it available
in Vectot, so that you can see TCP session statistics.
$ cd /vax/1ib/pcp/pedas/bce
$ sado vi bce,conf
[pnda]
 List of enabled nodules
egttdo *ebumx *pd.xeddo *xogs/s*ouegeoTg =satnpou
In the full file you will see additional configuration options for the tcplife module and many
others. This file is important for configuration of the BCC PMDA.
 This module summarizes TCP sessions
 Configuration options1
Name
CyPe
default
# process
monitor
---
## Page 755
718
3 Chapter 17 Other BPF Performance Tools
+ dport
-int
- unset : list of renote ports to monitor
 1poxt
-int
- unset : 1lst of local poxts to nonitor
unoo"uoTesa 
-int
-20
: nunber of closed TCP sessions to keep in cache
 buffer_page_count - int
-64
: nunber of pages for the perf ring buffer,
0XqF0 39A0d
[tcp11fe]
nodule = tcplife
cluster = 3
process = java
1pozt = 8443
+dport = 80,443
Any time the PMDA configuration changes, you should recompile and restart the PMDA:
$ ed /var/lib/pcp/pedas/boc
Trepsu/. opns 5
You can now refresh your browser and select the tcpretrans chart.
17.1.9 Future Work
More work is still required between Vector and PCP to improve integration with the full suite of
BCC tols. Vector has served Netflix well for many years as a detailed on-host metrics solution.
Netflix is currently investigating whether Grafana can also provide this capability, which would
allow more development focus to be on the host and metrics. Grafana is covered in Section 17.2.
17.1.10 Further Reading
For more information on Vector and PCP, see:
 https:/getvector.io/
/ordod//:sdnq *
17.2Grafana andPerformance Co-Pilot(PcP)
Grafana is a popular open source charting and visualization tool with support for connecting to
and displaying data stored in many back-end data sources. By using Performance Co-Pilot (PCP)
as a data source, you can visualize any of the metrics exposed in PCP. PCP is covered in more
detail in Section 17.1.
There are two approaches for configuring PCP to support the presentation of metrics in Grafana.
It is possible to present historic data, and it is possible to present live metric data. Each has a
slightly different use case and configuration.
---
## Page 756
17.2 Grafana and Performance Co-Pilot (PCP)
719
17.2.1 Installation and Configuration
The two options for presenting PCP data in Grafana are:
• Grafana PCP live data source: For this you use the grafana-pcp-live plugin. This plugin
polls a PCP instance for the latest metric data and keeps a short history (a few minutes
worth) of results in the browser. There is no long-term persistence of the data. The
advantage is that there is no load on the system being monitored while you are not
 uo sa ago aue apm e jo umaa a dap rog ert  sa  ue
host.
• Grafana PCP archived data source: For this you use the grafana-pcp-redis plugin. This
plugin fetches data from the source using the PCP pmseries data storage and collates the
data into a Redis instance. This relies on a configured pmseries instance and means PCP will 
poll and store the data. This makes it more suitable for collecting larger time series data that
will be looked at across multiple hosts.
It is assumed that you have performed the PCP configuration steps previously described in
Section 17.1.
For both options, the projects are undergoing changes, so the best approach for installation is to
see the links in Section 17.2.4 and look at the installation instructions for each plugin.
17.2.2Connectingand Viewing Data
The grafana-pcp-live plugin is under heavy development. At the time of writing, the approach to
connecting to a back end relies on the setup of variables required for the PCP client. Since it does
not have any storage, this allows the dashboard to be dlynamically reconfigured to connect to
multiple different hosts. These variables are _proto,_host, and _port.
Create a new dashboard, enter the dashboard settings, create variables for the dashboard, and set
them up with the required configuration settings. You can see the result in Figure 17-10 (where
you fill in the host field with an appropriate host):
VarlableDefinition
$.proto
s.port
7402
Figure 1.7-10 Setting up dashboard variables in grafana-pcp-live