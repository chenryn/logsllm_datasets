The above deﬁnition naturally imposes the following con-
straint on λ in the RBAC=
ST model.
Constraint 4. If e = (v, v′) ∈ E, then λ(v) ∩ λ(v′) 6= ∅.
We now introduce a running example, which will be used
to motivate the additional models that we deﬁne. Figure 1
illustrates six directed graphs for diﬀerent user-role assign-
ments and role hierarchies: vertices u and v represent users,
and vertices r, r′ and r′′ represent roles.
Let us assume that we want to express the following
spatio-temporal constraints:
• any user assigned explicitly to role r can only activate
this role in spatio-temporal domain D ⊆ D;
• any user assigned explicitly to role r′ can activate role
r from any point d ∈ D;
• any user may activate role r′′ from any point d ∈ D.
For concreteness, r might be a clerical role and users oc-
cupying this role may only activate this role if they are in
some particular part of the oﬃce building. In contrast, r′
is a managerial role and a user occupying this role may ac-
tivate the clerical role when she is sitting in her own oﬃce
(or anywhere else); r′′ is a general employee role and can be
activated from anywhere in the oﬃce.
It is obvious that we can specify these requirements us-
ing RBAC=
ST for the conﬁgurations shown in Figures 1(a)
and 1(b).
In particular, for Figure 1(a), we could deﬁne
λ(u) = D or λ(r) = D or λ(u) = λ(r) = D. However, for
Figure 1(b), we must deﬁne λ(u) = D, as user v, assigned
to role r′, is allowed to activate role r at any d ∈ D.
3In Section 6 we elaborate on possible representations of
D. For the purposes of the discussion in this section, it is
suﬃcient to assume the existence of some abstract spatio-
temporal domain.
Now consider the conﬁguration in Figure 1(c), in which u
is also assigned to role r′′. Since u is allowed to activate r′′
at any d ∈ D, we can not deﬁne λ(u) = D; nor can we set
λ(r) = D, as v is allowed to activate r at any d ∈ D. Hence,
we require a spatio-temporal constraint on edge (u, r). In
other words, RBAC=
ST is not suﬃciently expressive for cer-
tain RBAC96 conﬁgurations and spatio-temporal require-
ments. For this reason, we now introduce a second model.
3.2 The strong model
The strong spatio-temporal RBAC model (RBAC+
ST ) aug-
ments the RBAC=
ST model with a function µ : E → 2D. For
e = (v, v′) ∈ E, µ(v, v′) denotes the set of points in space-
time at which the association between v and v′ is enabled.
In particular,
• if (u, r) ∈ UA, µ(u, r) denotes the set of points in
space-time at which u is assigned to r;
• if (r, r′) ∈ RH , µ(r′, r) denotes the set of points in
space-time at which r′ is senior to r;
• if (p, r) ∈ PA, µ(r, p) denotes the set of points in space-
time at which p is assigned to r.
a
in
the
path
Given
labeled
v1, . . . , vn
graph
G = (V, E, λ, µ), we write bµ(v1, . . . , vn)
to denote
Tn−1
i=1 µ(vi, vi+1). Note that the semantics of RBAC=
ST
imply that an edge can only be enabled if both end points
are enabled. Hence, bµ(v, . . . , v′) is the set of points at which
the context is clear, we will write bµ(v1, vn) for bµ(v1, . . . , vn).
Constraint 5. If (v, v′) ∈ E, then ∅ ⊂ µ(v, v′) ⊆ λ(v) ∩
every node and every edge in the path is enabled. When
We deﬁne the following constraint on µ.
λ(v′).
Definition 6. An entity v ∈ U ∪ R is RBAC+
ST -
authorized for v′ ∈ R ∪ P at point d if and only if there
exists an au-path v = v1, v2, . . . , vn = v′ and d ∈ bµ(v, v′).
Note that RBAC=
ST is a special case of RBAC+
ST in which
In other words, we can express
µ(v, v′) = λ(v) ∩ λ(v′).
ST using RBAC+
RBAC=
ST .
Consider Figures 1(c) and 1(d). We can deﬁne µ(u, r) = D
to express our spatio-temporal requirements in RBAC+
However, RBAC+
ST and RBAC=
ST cannot be used to ex-
press these requirements given the conﬁguration in Fig-
In particular, we cannot deﬁne λ(r) = D in
ure 1(e).
RBAC=
ST because this will only
allow u to activate r′′ at points d ∈ D. We now introduce a
third model with weaker restrictions on valid authorization
paths.
ST or µ(u, r) = D in RBAC+
ST .
3.3 The weak model
Like RBAC=
ST , the weak spatio-temporal RBAC model (or
ST ) augments the standard RBAC96 model with a
ST , the authorization se-
RBAC−
function λ : V → 2D.
mantics are diﬀerent from those in RBAC=
In RBAC−
ST .
Definition 7. An entity v ∈ U ∪ R is RBAC−
ST -
authorized for v′ ∈ R∪P at point d if and only if there exists
an au-path v = v1, v2, . . . , vn = v′ and d ∈ λ(v) ∩ λ(v′).
In other words, an entity v is RBAC−
ST -authorized for an-
other entity v′ if v is RBAC96-authorized for v′, and both
entities v and v′ are enabled. There is no requirement that
intermediate nodes on the path are enabled. These seman-
tics appear to be closest to those deﬁned in GTRBAC and
the model of Ray and Toahchoodee. However, we would ar-
gue that RBAC−
ST has the least intuitive semantics: why is
it appropriate to ignore the enabling conditions on interme-
diate roles? There may be occasions when it is convenient
to do so, as in Figure 1(e), but ignoring the intermediate
roles is unlikely to be appropriate in many situations, and is
inconsistent with the usual interpretation of inheritance in a
role hierarchy. We would argue that the standard or strong
models, in which enabling conditions are inherited up the
hierarchy, are more closely aligned with standard RBAC se-
mantics.
Consider Figure 1(e). Using the weak model, we can de-
ﬁne λ(r) = D to express our spatio-temporal requirements.
However, we cannot express our spatio-temporal require-
ments for the conﬁguration shown in Figure 1(f) using any
of the models we have deﬁned. If we use RBAC−
ST , then we
require that λ(r) = D in order to restrict u’s activation of
r. This, in turn means that v is unable to activate r from
any point d 6∈ D. However, if we use RBAC=
ST ,
we must deﬁne λ(u) = D or µ(u, r) = D, which means that
u is unable to activate r′′ from any point d 6∈ D.
ST or RBAC+
3.4 Trusted entities
We introduce the idea of trusted entities, which may be a
user or a role; we write T ⊆ U ∪R to denote the set of trusted
entities. For an entity t ∈ T , the enabling constraints on
nodes/edges in the authorization path from t are ignored.4
Definition 8. An entity v ∈ U ∪ R is RBAC=
ST -
authorized for v′ ∈ R ∪ P at point d ∈ D if and only if
there exists an au-path v = v1, . . . , vj , . . . , vn = v′ such
that vj ∈ T and d ∈ bλ(v, vj ), or there exists an au-path
v = v1, v2, . . . , vn = v′ and d ∈ bλ(v, v′).
Definition 9. An entity v ∈ U ∪ R is RBAC+
ST -
authorized for v′ ∈ R ∪ P at point d if and only if there
exists an au-path v = v1, . . . , vj, . . . , vn = v′ such that
vj ∈ T and d ∈ bµ(v, vj ), or there exists an au−path
v = v1, v2, . . . , vn = v′ and d ∈ bµ(v, v′).
Definition 10. An entity v ∈ U ∪ R is RBAC−
ST -
authorized for v′ ∈ R ∪ P at point d ∈ D if and only if
there exists an au-path v = v1, . . . , vj, . . . , vn = v′ such that
vj ∈ T and d ∈ λ(v) ∩ λ(vj ), or there exists an au-path
v = v1, v2, . . . , vn = v′ and d ∈ λ(v) ∩ λ(v′).
Consider Figure 1(f).
In order to express our spatio-
temporal requirements, we use RBAC−
ST and deﬁne r′ (or
v) to be a trusted entity and λ(r) = D. Clearly, user v can
activate roles r and r′′ from any point because there exists
a au-path v, r′, r (and the fact that λ(r) = D is ignored).
4The interpretation of a privileged entity is similar to that of
a privileged method in the Java runtime environment (JRE).
The stackwalking algorithm, which is used to perform access
control in the JRE, normally examines the permissions of
every method on the stack. Access is only granted if every
method on the stack has the requested permission. How-
ever, the stackwalk terminates prematurely if a privileged
method is encountered on the stack (thereby ignoring any
methods lower down the stack that may not have the re-
quested permission).
tu
?
tr
tv
?
tr
′
?
tr
Q
tu
Q
Q
Q
QQs
tv
?
tr
′
?
tr
Q
tu
Q
?
tr
′′
Q
Q
QQs
(a) λ(u) = D or λ(r) = D
(b) λ(u) = D
(c) µ(u, r) = D
tu
tv
 
 
 
 
 
?
 	
tr
?
tr
′
tu
?
tr
?
tr
′′
tu
@
@
@R
tv
?
tr
′
?
tr
?
tr
′′
(d) µ(u, r) = D
(e) λ(r) = D
(f) Trusted entity r′
Figure 1: Conﬁgurations of RBAC96 model
3.5 A note on RBAC96-style syntax
We currently use the functions λ and µ to deﬁne the
syntax of our spatio-temporal RBAC models, and a graph-
based formalism to deﬁne the semantics of these models. In
this section, we brieﬂy note that we can use RBAC96-style
syntax to encode RBAC+
ST and
RBAC=
ST syntax can also be adjusted in the same way.)
ST . (It follows that RBAC−
The familiar sets and relations from the RBAC96 model
– U , R, P , UA, RH and PA – are adjusted to include an
extra entry, corresponding to the set of points for which the
entity or entity relationship is enabled. The set of users U ,
for example, is replaced by UST ⊆ U × 2D; (u, D) ∈ UST
means that u is enabled for all points d ∈ D. The set of user-
role assignments UA, for example, is replaced by UAST ⊆
U × R × 2D; (u, r, D) ∈ UAST means that the assignment of
user u to role r is enabled for all points d ∈ D. In RBAC=
ST ,
for example, a user u may activate a role r at point d if there
exist roles r′ = r1, r2, . . . , rn = r, such that (ri+1, ri) ∈ RH ,
(u, r′) ∈ UA, (u, Du) ∈ UST , (ri, Di) ∈ RST , i = 1, . . . , n,
and d ∈ Du ∩ D1 ∩ · · · ∩ Dn.
3.6 Integration with ANSI-RBAC
The core and hierarchical components of ANSI-RBAC
standard are deﬁned by a set of basic element sets U , S,
R and P , a set of relations UA, RH and PA, and a set of
mapping functions, shown in the top part of Table 1.
The table demonstrates that it is easy to re-deﬁne the
ANSI-RBAC functions in the context of RBAC=
ST and
RBAC+
ST .5 The function session users, also deﬁned by the
ANSI-RBAC standard, returns the user associated with a
session, and is the same for all three models. Each function,
when deﬁned for RBAC=
ST , includes a param-
ST and RBAC+
5For brevity, we omit RBAC−
this discussion.
ST and trusted entities from
eter d ∈ D. For simplicity we use our original syntax, rather
than the RBAC96-style syntax.
The
deﬁnes
standard
ANSI-RBAC
functions
avail session perms and session roles,
shown in the
ﬁrst section of Table 1. These function only apply to
the core component; no analogous function is deﬁned for
the hierarchical component, which is a curious omission.