的行的。
图灵社区会员非洲铜(PI:EMAIL）专享尊重版权
---
## Page 62
13 三值逻辑和NULL —
49 
--1.在子查询里和ULL进行比较运算
SELBCT *
FROM Class_A A
MHERE NOT EXISTS I SELECT *
KHERE A.age = NULL
AND B.city ='东京1
--2.对wULL使用“后，结果为umknoMm
SELECT *
MHERE NOT EXISTS1SELECT *
AND B.city-东京1
--3，如果ND运算里包含uKOW，结果不会是七工U巴
SELBCT *
FROM Class_A A
MHERE NOT EXISTS I SELECT *
WHERE false 或 umknoMn) /
--4，子查询设有返回结果，因此相反地，NOTEXISTS为trte
SELECT *
是，还要把与年龄不是NULL的齐藤及田尻进行比较后的处理结果通过
AND连接，才能得出最终结果）。产生这样的结果，是因为EXISTS谓词永
远不会返回unknown。EXISTs 只会返回 true 或者false。因此就有了
相替换的混乱现象。虽然写代码的时候很难做到绝对不依赖直觉，但作为
数据库工程师来说，还是需要好好理解一下这种现象。
4.限定谓词和NULL
SQL里有ALL和ANY两个限定谓词。因为 ANY与IN是等价的，所以
我们不经常使用ANY。在这里，我们主要看一下更常用的ALL的一些注意
事项。
---
## Page 63
50
第1章神奇的 SQL
ALL可以和比较谓词一起使用，用来表达“与所有的×X都相等”，
或“比所有的XX都大”的意思。接下来，我们给B班表里为NULL的
列添上具体的值。然后，使用这张新表来思考一下用于查询“比B班住在
东京的所有学生年龄都小的A班学生”的SQL语句。
Class_A
名字
00（年龄）
city（住址
布朗
22
东京
19
垮玉
伯杰
21
千叶
Class_B
mame |名字)age |年龄|
city（住址）
齐藤
22
东京
田民
23
东京
山田
20
东京
和泉
18
千叶
武田
20
千叶
石川
19
神奈川
使用ALL谓词时，SQL语句可以像下面这样写。
-查询比B班住在东京的所有学生年龄都小的A班学生
SSLSCT *
HHERE age  0e 2H
--2.对NULL 使用“<后结果为umkLN
SSLSCT *
FEOM Class_A
---
## Page 66
13三值逐辑和NULL—53
比较对象原本就不存在时，根据业务需求有时需要返回所有行，有时
需要返回空集。需要返回所有行时（感觉这类似于“不战而胜"），需要使
用ALL谓词，或者使用 COALBSCE 函数将极值函数返回的 NULL 处理成合
适的值。
6.聚合函数和NULL
实际上，当输入为空表时返回NULL的不只是极值函数，COUNT以外
的聚合函数也是如此。所以下面这条看似普通的SQL语句也会带来意想
不到的结果。
--查询比住在东京的学生的平均年龄还要小的a班学生的SQL语句？
SELECT *
FROM Cla8s_A
MHERE age < I SEL&CT AVG (age)
WHER eity -东京·11
PROM Clas8_B
没有住在东京的学生时，AVG 函数返回 NULL。因此，外侧的 WHERE
子句永远是unknown，也就查询不到行。使用suM也是一样。这种情况的
解决方法只有两种：要么把NULL改写成具体值，要么闭上眼睛接受
NULL。但是如果某列有NOT NULL约束，而我们需要往其中插入平均值或
汇总值，那么就只能选择将NULL改写成具体值了。
聚合函数和极值函数的这个陷阱是由函数自身带来的，所以仅靠为具
体列加上NOT NULL约束是无法从根本上消除的。因此我们在编写 SQL
代码的时候需要特别注意。
本节小结
本节，我们针对编写SQL时NULL和三值逻辑带来的诸多间题，从理
论和实践两方面分别进行了探讨。因为这个话题有些复杂，所以之前从未
了解过SQL三值逻辑的人可能会觉得非常混乱。最后这里，我们再次整
理一下本节要点。
1.NULL不是值。
2.因为NULL不是值，所以不能对其使用谓词。
---
## Page 67
54
—第1章神奇的SOL
3.对NULL使用谓词后的结果是unknown。
4.unknown参与到逻辑运算时，SQL的运行会和预想的不一样。
5.按步骤追踪SQL的执行过程能有效应对4中的情况。
最后说明一下，要想解决NULL带来的各种问题，最佳方法应该是往
表里漆加 NOT NULL药束来尽力排除NULL。这样就可以回到美妙的二值逻
辑世界（虽然并不能完全回到）。具体方法将在本书2-9节里介绍。
此外，如果大家对这个虽然麻烦但是越看趣有兴趣的话题想更进一步
研究，可以参考下面的资料。再结合本书2-8节中将要介绍的三值逻辑在
逻辑学中的意义，应该会发现比较有意思的内容。
1.JoeCelko，《SQL权威指南（第4版》（人民邮电出版社，2013年）
强烈推荐阅读第13章“NULL：SQL中的缺失数据”、21.3节“NULI
和 INO 谓词”和 22.1节“EXISTS 和 NULL”
2.C.J.Date，《深度探索关系数据库：实践者的关系理论》（电子工业出
版社，2007年）
CJ.Date在书中明确地说明了他反对NULL 和三值逻辑的主张。与Joc
Celko的书相比，这本书更注重理论方面的内容。本节开头的CJ.Date
的话也出自这本书。
注0
3.户田山和久，《逻辑学的创立》（名古屋大学出版会，2000年）
原书名为“脑埋学<] 类
无中文版。——泽者注
作为逻辑学的入门书，该书难得地稍微介绍了三值逻辑的内容。但是需
要注意，书中的三值逻辑与SQL中采用的逻辑体系还是有一些不同的
作为谓词逻辑的入门书来说，该书值得推荐。
4.初级C语言Q&A（3）【0和NULL】
(http://www.st.rim.or.jp/phinloda/cqa/cqa3.html)
Q：我曾经见到过使用。代替空指针的代码，为什么可以这样用呢？
A：原本该出现指针的地方如果出现了0，编译器会把它当成空指针来
理解。比如像if{p！-D）这样写时，如果p是指针类型，编译器会认
为右边也是指针，所以就把。当成空指针来处理了。
---
## Page 68
14HAVING子句的力量
55
HAVING子句的力量
出彩的配角
BAVING子句是SQL里一个非常重要的功能，但其价值并没有被人们深刻地认识到。另外，它还是
理解SQL面向集合这一本质的关键，应用范围非常广泛。本节，我们将学习HAVING子句的用法，进而
理解面向集合语言的第二个特性一一以集合为单位进行操作。
写在前面
SQL与通需的语言不一样，这种感觉的强烈程度可能因人而异，但是
对于一开始就从面向过程语言学起的正统的程序员或系统工程师来说，可
能感觉会比较强烈。
邮
电
SQL给人感觉与众不同的原因有几个。第一个原因是，它是一种基于
“面向集合”思想设计的语言，同样具备这种设计思想的语言很少：第二
个原因的影响力不亚于第一个，即最开始学习过了某种理念的语言后，心
注0
理上会形成思维定式，从而妨碍我们理解另一种理念的语言·
关于从面向过程思单向面向集合
思维终损的方法，本书26节有
本节，我们将学习一下HAVING子句的各种使用方法，同时也比较一
评期介期。
下面向过程语言和SQL在思考方式上的区别。通过比较，我们会察觉到
自己在学习面向过程语言时下意识形成的思维定式，进而更好地适应面向
集合的思想。
在1-2节，我们了解了一些SQL作为面向集合语言的特征，本节将
特征。前面几节并非学习本节的前提，但是因为本节会用到CASE表达
式和自连接等内容，所以如果读过1-1节和1-2节，理解起来可能会更
深刻。
---
## Page 69
56
—第1章神奇的SOL
寻找缺失的编号
那么，我们赶快通过例题往下学习吧。假设现有一张带有“连续编号”