c
Arrays.equals(provided, computed)
d
Objects.equals(provided, computed)
e
MessageDigest.isEqual(provided, computed)
6
Which API design pattern can be useful to reduce the impact of SQL injection
attacks?
a
Microservices
b
Model View Controller (MVC)
c
Uniform Resource Identifiers (URIs)
d
Command Query Responsibility Segregation (CQRS)
e
Hypertext as the Engine of Application State (HATEOAS)
The answers are at the end of the chapter.
180
CHAPTER 5
Modern token-based authentication
Answers to pop quiz questions
1
e. The Access-Control-Allow-Credentials header is required on both the
preflight response and on the actual response; otherwise, the browser will reject
the cookie or strip it from subsequent requests.
2
c. Use a SecureRandom or other cryptographically-secure random number gen-
erator. Remember that while the output of a hash function may look random,
it’s only as unpredictable as the input that is fed into it.
3
d. The Bearer auth scheme is used for tokens.
4
b. Store keys in a keystore or other secure storage (see part 4 of this book for
other options). Keys should not be stored in the same database as the data they
are protecting and should never be hard-coded. A password is not a suitable key
for HMAC.
5
e. Always use MessageDigest.equals or another constant-time equality test to
compare HMAC tags.
6
d. CQRS allows you to use different database users for queries versus database
updates with only the minimum privileges needed for each task. As described in
section 5.3.2, this can reduce the damage that an SQL injection attack can cause.
Summary
 Cross-origin API calls can be enabled for web clients using CORS. Enabling
cookies on cross-origin calls is error-prone and becoming more difficult over
time. HTML 5 Web Storage provides an alternative to cookies for storing
cookies directly.
 Web Storage prevents CSRF attacks but can be more vulnerable to token exfil-
tration via XSS. You should ensure that you prevent XSS attacks before moving
to this token storage model.
 The standard Bearer authentication scheme for HTTP can be used to transmit
a token to an API, and to prompt for one if not supplied. While originally
designed for OAuth2, the scheme is now widely used for other forms of tokens.
 Authentication tokens should be hashed when stored in a database to prevent
them being used if the database is compromised. Message authentication codes
(MACs) can be used to protect tokens against tampering and forgery. Hash-
based MAC (HMAC) is a standard secure algorithm for constructing a MAC
from a secure hash algorithm such as SHA-256.
 Database access controls and row-level security policies can be used to further
harden a database against attacks, limiting the damage that can be done. Data-
base encryption can be used to protect sensitive attributes but is a complex
topic with many failure cases.
181
Self-contained
tokens and JWTs
You’ve shifted the Natter API over to using the database token store with tokens
stored in Web Storage. The good news is that Natter is really taking off. Your user
base has grown to millions of regular users. The bad news is that the token database
is struggling to cope with this level of traffic. You’ve evaluated different database
backends, but you’ve heard about stateless tokens that would allow you to get rid of
the database entirely. Without a database slowing you down, Natter will be able to
scale up as the user base continues to grow. In this chapter, you’ll implement self-
contained tokens securely, and examine some of the security trade-offs compared
to database-backed tokens. You’ll also learn about the JSON Web Token (JWT) stan-
dard that is the most widely used token format today.
This chapter covers
 Scaling token-based authentication with 
encrypted client-side storage
 Protecting tokens with MACs and authenticated 
encryption
 Generating standard JSON Web Tokens
 Handling token revocation when all the state is 
on the client
182
CHAPTER 6
Self-contained tokens and JWTs
DEFINITION
JSON Web Tokens (JWTs, pronounced “jots”) are a standard for-
mat for self-contained security tokens. A JWT consists of a set of claims about
a user represented as a JSON object, together with a header describing the
format of the token. JWTs are cryptographically protected against tampering
and can also be encrypted.
6.1
Storing token state on the client
The idea behind stateless tokens is simple. Rather than store the token state in the
database, you can instead encode that state directly into the token ID and send it to
the client. For example, you could serialize the token fields into a JSON object, which
you then Base64url-encode to create a string that you can use as the token ID. When
the token is presented back to the API, you then simply decode the token and parse
the JSON to recover the attributes of the session. 
 Listing 6.1 shows a JSON token store that does exactly that. It uses short keys for
attributes, such as sub for the subject (username), and exp for the expiry time, to save
space. These are standard JWT attributes, as you’ll learn in section 6.2.1. Leave the
revoke method blank for now, you will come back to that shortly in section 6.5. Navi-
gate to the src/main/java/com/manning/apisecurityinaction/token folder and cre-
ate a new file JsonTokenStore.java in your editor. Type in the contents of listing 6.1
and save the new file.
WARNING
This code is not secure on its own because pure JSON tokens can
be altered and forged. You’ll add support for token authentication in sec-
tion 6.1.1.
package com.manning.apisecurityinaction.token;
import org.json.*;
import spark.Request;
import java.time.Instant;
import java.util.*;
import static java.nio.charset.StandardCharsets.UTF_8;
public class JsonTokenStore implements TokenStore {
    @Override
    public String create(Request request, Token token) {
        var json = new JSONObject();
        json.put("sub", token.username);                  
        json.put("exp", token.expiry.getEpochSecond());   
        json.put("attrs", token.attributes);              
        var jsonBytes = json.toString().getBytes(UTF_8);   
        return Base64url.encode(jsonBytes);                
    }
    @Override
    public Optional read(Request request, String tokenId) {
Listing 6.1
The JSON token store
Convert the token 
attributes into a 
JSON object.
Encode the JSON 
object with URL-safe 
Base64-encoding.
183
Storing token state on the client
        try {
            var decoded = Base64url.decode(tokenId);                
            var json = new JSONObject(new String(decoded, UTF_8));  
            var expiry = Instant.ofEpochSecond(json.getInt("exp")); 
            var username = json.getString("sub");                   
            var attrs = json.getJSONObject("attrs");                
            var token = new Token(expiry, username);                
            for (var key : attrs.keySet()) {                        
                token.attributes.put(key, attrs.getString(key));    
            }
            return Optional.of(token);
        } catch (JSONException e) {
            return Optional.empty();
        }
    }
    @Override
    public void revoke(Request request, String tokenId) {
        // TODO     
    }
}
6.1.1
Protecting JSON tokens with HMAC
Of course, as it stands, this code is completely insecure. Anybody can log in to the API
and then edit the encoded token in their browser to change their username or other
security attributes! In fact, they can just create a brand-new token themselves without
ever logging in. You can fix that by reusing the HmacTokenStore that you created in
chapter 5, as shown in figure 6.1. By appending an authentication tag computed with
a secret key known only to the API server, an attacker is prevented from either creat-
ing a fake token or altering an existing one.
 To enable HMAC-protected tokens, open Main.java in your editor and change the
code that constructs the DatabaseTokenStore to instead create a JsonTokenStore:
    TokenStore tokenStore = new JsonTokenStore();    
    tokenStore = new HmacTokenStore(tokenStore, macKey);    
    var tokenController = new TokenController(tokenStore);
You can try it out to see your first stateless token in action:
$ curl -H 'Content-Type: application/json' -u test:password \
  -X POST https://localhost:4567/sessions
{"token":"eyJzdWIiOiJ0ZXN0IiwiZXhwIjoxNTU5NTgyMTI5LCJhdHRycyI6e319.
➥ INFgLC3cAhJ8DjzPgQfHBHvU_uItnFjt568mQ43V7YI"}
To read the token,
decode it and
parse the JSON
to recover the
attributes.
Leave the revoke 
method blank for now.
Construct the JsonTokenStore.
Wrap it in a 
HmacTokenStore to 
ensure authenticity.
184
CHAPTER 6
Self-contained tokens and JWTs
Pop quiz
1
Which of the STRIDE threats does the HmacTokenStore protect against? (There
may be more than one correct answer.)
a
Spoofing
b
Tampering
c
Repudiation
d
Information disclosure
e
Denial of service
f
Elevation of privilege
The answer is at the end of the chapter.
{"sub":"test","exp":12345,...}
URL-safe Base64
eyJzdWIiOiJ0ZXN0IiwiZXhwIjoxMjM0NSwuLi59
HMAC-SHA256
URL-safe Base64
eyJzdWIiOiJ0ZXN0IiwiZXhwIjoxMjM0NSwuLi59.dnYUdylHgTGpNcv39ol...
f9d9d851dca5...
JSON claims are encoded into
URL-safe Base64 encoding.
The encoded token is
authenticated with HMAC.
The HMAC tag is
encoded and appended
to the token.
Key
Figure 6.1
An HMAC tag is computed over the encoded JSON claims using a secret key. 
The HMAC tag is then itself encoded into URL-safe Base64 format and appended to the 
token, using a period as a separator. As a period is not a valid character in Base64 
encoding, you can use this to find the tag later.
185
JSON Web Tokens
6.2
JSON Web Tokens
Authenticated client-side tokens have become very popular in recent years, thanks in
part to the standardization of JSON Web Tokens in 2015. JWTs are very similar to the
JSON tokens you have just produced, but have many more features:
 A standard header format that contains metadata about the JWT, such as which
MAC or encryption algorithm was used.
 A set of standard claims that can be used in the JSON content of the JWT, with
defined meanings, such as exp to indicate the expiry time and sub for the sub-
ject, just as you have been using.
 A wide range of algorithms for authentication and encryption, as well as digital
signatures and public key encryption that are covered later in this book. 
Because JWTs are standardized, they can be used with lots of existing tools, libraries,
and services. JWT libraries exist for most programming languages now, and many
API frameworks include built-in support for JWTs, making them an attractive format
to use. The OpenID Connect (OIDC) authentication protocol that’s discussed in
chapter 7 uses JWTs as a standard format to convey identity claims about users
between systems.
A basic authenticated JWT is almost exactly like the HMAC-authenticated JSON
tokens that you produced in section 6.1.1, but with an additional JSON header that
indicates the algorithm and other details of how the JWT was produced, as shown in
figure 6.2. The Base64url-encoded format used for JWTs is known as the JWS Compact
Serialization. JWS also defines another format, but the compact serialization is the most
widely used for API tokens.
The JWT standards zoo
While JWT itself is just one specification (https://tools.ietf.org/html/rfc7519), it
builds on a collection of standards collectively known as JSON Object Signing and
Encryption (JOSE). JOSE itself consists of several related standards:
 JSON Web Signing (JWS, https://tools.ietf.org/html/rfc7515) defines how
JSON objects can be authenticated with HMAC and digital signatures.
 JSON Web Encryption (JWE, https://tools.ietf.org/html/rfc7516) defines how
to encrypt JSON objects.
 JSON Web Key (JWK, https://tools.ietf.org/html/rfc7517) describes a stan-
dard format for cryptographic keys and related metadata in JSON.
 JSON Web Algorithms (JWA, https://tools.ietf.org/html/rfc7518) then speci-
fies signing and encryption algorithms to be used.
JOSE has been extended over the years by new specifications to add new algorithms
and options. It is common to use JWT to refer to the whole collection of specifica-
tions, although there are uses of JOSE beyond JWTs.
186
CHAPTER 6
Self-contained tokens and JWTs
The flexibility of JWT is also its biggest weakness, as several attacks have been found
in the past that exploit this flexibility. JOSE is a kit-of-parts design, allowing develop-
ers to pick and choose from a wide variety of algorithms, and not all combinations
of features are secure. For example, in 2015 the security researcher Tim McClean
discovered vulnerabilities in many JWT libraries (http://mng.bz/awKz) in which an
attacker could change the algorithm header in a JWT to influence how the recipient
validated the token. It was even possible to change it to the value none, which
instructed the JWT library to not validate the signature at all! These kinds of security
flaws have led some people to argue that JWTs are inherently insecure due to the
ease with which they can be misused, and the poor security of some of the standard
algorithms.
I’ll let you come to your own conclusions about whether to use JWTs. In this chapter
you’ll see how to implement some of the features of JWTs from scratch, so you can
decide if the extra complexity is worth it. There are many cases in which JWTs cannot
be avoided, so I’ll point out security best practices and gotchas so that you can use
them safely.
PASETO: An alternative to JOSE
The error-prone nature of the standards has led to the development of alternative for-
mats intended to be used for many of the same purposes as JOSE but with fewer
tricky implementation details and opportunities for misuse. One example is PASETO
(https://paseto.io), which provides either symmetric authenticated encryption or pub-
lic key signed JSON objects, covering many of the same use-cases as the JOSE and
JWT standards. The main difference from JOSE is that PASETO only allows a devel-
oper to specify a format version. Each version uses a fixed set of cryptographic algo-
rithms rather than allowing a wide choice of algorithms: version 1 requires widely
implemented algorithms such as AES and RSA, while version 2 requires more modern
but less widely implemented algorithms such as Ed25519. This gives an attacker
much less scope to confuse the implementation and the chosen algorithms have few
known weaknesses.
eyJ0eXAiOiJKV1Qi.eyJzdWIiOiJ0.QlZiSNH2tt5sFTmfn
Header
Claims
HMAC tag
Figure 6.2
The JWS Compact Serialization 
consists of three URL-safe Base64-encoded 
parts, separated by periods. First comes 
the header, then the payload or claims, and 
finally the authentication tag or signature. 
The values in this diagram have been 
shortened for display purposes.
187
JSON Web Tokens
6.2.1
The standard JWT claims
One of the most useful parts of the JWT specification is the standard set of JSON
object properties defined to hold claims about a subject, known as a claims set. You’ve
already seen two standard JWT claims, because you used them in the implementation
of the JsonTokenStore:
 The exp claim indicates the expiry time of a JWT in UNIX time, which is the
number of seconds since midnight on January 1, 1970 in UTC.
 The sub claim identifies the subject of the token: the user. Other claims in the
token are generally making claims about this subject.
JWT defines a handful of other claims too, which are listed in table 6.1. To save space,
each claim is represented with a three-letter JSON object property.
Of these claims, only the issuer, issued-at, and subject claims express a positive state-
ment. The remaining fields all describe constraints on how the token can be used
rather than making a claim. These constraints are intended to prevent certain kinds
of attacks against security tokens, such as replay attacks in which a token sent by a genu-
ine party to a service to gain access is captured by an attacker and later replayed so
that the attacker can gain access. Setting a short expiry time can reduce the window of
opportunity for such attacks, but not eliminate them. The JWT ID can be used to add
a unique value to a JWT, which the recipient can then remember until the token
expires to prevent the same token being replayed. Replay attacks are largely pre-
vented by the use of TLS but can be important if you have to send a token over an
insecure channel or as part of an authentication protocol.
Table 6.1
Standard JWT claims
Claim
Name
Purpose
iss
Issuer
Indicates who created the JWT. This is a single string and often the URI of the 
authentication service.
aud
Audience
Indicates who the JWT is for. An array of strings identifying the intended recip-
ients of the JWT. If there is only a single value, then it can be a simple string 
value rather than an array. The recipient of a JWT must check that its identi-
fier appears in the audience; otherwise, it should reject the JWT. Typically, this 
is a set of URIs for APIs where the token can be used.
iat
Issued-At
The UNIX time at which the JWT was created.
nbf
Not-Before
The JWT should be rejected if used before this time.
exp
Expiry
The UNIX time at which the JWT expires and should be rejected by recipients.
sub
Subject
The identity of the subject of the JWT. A string. Usually a username or other 
unique identifier.
jti
JWT ID
A unique ID for the JWT, which can be used to detect replay.
188
CHAPTER 6
Self-contained tokens and JWTs
DEFINITION
A replay attack occurs when an attacker captures a token sent by a
legitimate party and later replays it on their own request.
The issuer and audience claims can be used to prevent a different form of replay
attack, in which the captured token is replayed against a different API than the origi-
nally intended recipient. If the attacker replays the token back to the original issuer,
this is known as a reflection attack, and can be used to defeat some kinds of authentica-
tion protocols if the recipient can be tricked into accepting their own authentication
messages. By verifying that your API server is in the audience list, and that the token
was issued by a trusted party, these attacks can be defeated.
6.2.2