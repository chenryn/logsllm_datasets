### Directory and Volume Naming in HFS+ Volumes

In the directory, a volume can appear by its actual name or a modified version of it. Such modifications may be necessary for two primary reasons:

1. **Character Translation**:
   - If an HFS+ volume's name contains a `/` character, `diskarbitrationd` translates it to a `:` character. This is because, while `/` is a valid character in HFS+ pathnames, it can only serve as a path separator in BSD pathnames.
   - Note that regardless of which subdirectory under `/Volumes` a volume is mounted on, the volume name and its icon displayed on the Desktop remain unchanged.

2. **Volume Name Conflicts**:
   - It is possible for multiple volumes to have the same name. For example, if four volumes named `HFSDisk` are mounted, their Desktop icons will all display the label `HFSDisk`. However, under `/Volumes`, they will be automatically assigned suffixes (e.g., `HFSDisk`, `HFSDisk 1`, `HFSDisk 2`, and `HFSDisk 3`).

### Private Metadata Folder

The third folder is an invisible private metadata folder used internally by the file system and created during volume creation. This private folder is discussed further in the section on hard links (Section 12.8.6).

### Special Directories and Files

- The `.` (current directory) and `..` (parent directory) entries do not physically reside on the disk in an HFS+ volume; they are simulated by the HFS+ implementation.
- To verify the number and names of the folders on a volume, you can use the `hfsdebug` tool to print the folder thread records in the volume's Catalog B-Tree.

```sh
% hfsdebug -b catalog -l folderthread -d /dev/rdisk10s2
# Folder Thread Record
parentID = 1
nodeName = HFSJ
# Folder Thread Record
parentID = 2
nodeName = %00%00%00%00HFS+ Private Data
# Folder Thread Record
parentID = 2
nodeName = .Trashes
# Folder Thread Record
parentID = 17
nodeName = 501
```

### Invisible Journal Files and `.DS_Store`

- Two of the three files on this volume are the invisible journal files: `/.journal` and `/.journal_info_block`.
- The third file is `/.DS_Store`, which is used by the Finder to cache information about a directory's contents. This file will not exist if the volume is manually mounted after creation.

```sh
$ hfsdebug -b catalog -l filethread -d /dev/rdisk10s2
# File Thread Record
parentID = 2
nodeName = .journal
# File Thread Record
parentID = 2
nodeName = .journal_info_block
# File Thread Record
parentID = 2
nodeName = .DS_Store
```

### Finder Information in the Volume Header

The volume header includes an array (`finderInfo`) containing eight 32-bit values, each with specific meanings as listed in Table 121.

#### Table 121: Contents of the `finderInfo` Array in the HFS+ Volume Header

| Index | Description |
|-------|-------------|
| 0     | If the volume contains a bootable system, this entry contains its directory ID; otherwise, it is 0. |
| 1     | If the volume is bootable, this entry contains the parent directory ID of the startup application (e.g., the Finder); ignored on the PowerPC version of Mac OS X. |
| 2     | This entry may contain the ID of a directory that should be opened in the Finder when the volume is mounted. |
| 3     | If the volume contains a bootable Mac OS 9 (or 8) system folder, this entry contains its directory ID; otherwise, it is 0. |
| 4     | Reserved. |
| 5     | If the volume contains a bootable Mac OS X system, this entry contains the directory ID of the "system" folder (default: the folder containing the bootloader, e.g., BootX or boot.efi); otherwise, it is 0. |
| 6     | This is the upper half of a unique 64-bit volume identifier. |
| 7     | This is the lower half of the volume identifier. |

### Example: Finder Information on a Boot Volume

When no volume or device is explicitly specified, `hfsdebug` operates on the root volume, which is typically also the boot volume.

```sh
$ sudo hfsdebug -v
...
# Finder Info
# Bootable system blessed folder ID
finderInfo[0] = 0xcf5 (Macintosh HD:/System/Library/CoreServices)
# Parent folder ID of the startup application
finderInfo[1] = 0
# Open folder ID
finderInfo[2] = 0
# Mac OS 9 blessed folder ID
finderInfo[3] = 0xd6533 (Macintosh HD:/System Folder)
# Reserved
finderInfo[4] = 0
# Mac OS X blessed folder ID
finderInfo[5] = 0xcf5 (Macintosh HD:/System/Library/CoreServices)
# VSDB volume identifier (64-bit)
finderInfo[6] = 0x79a955b7
finderInfo[7] = 0xe0610f64
# File System Boot UUID
UUID = B229E7FA-E0BA-345A-891C-80321D53EE4B
...
```

### Creating an Image with a Designated "Auto-Open" Folder

To create an image with a designated "auto-open" folder, you can use the following commands:

```sh
$ mkdir /tmp/auto-open
$ mkdir /tmp/auto-open/directory
$ echo Hello > /tmp/auto-open/directory/ReadMe.txt
$ hdiutil makehybrid -hfs -hfs-openfolder /tmp/auto-open/directory -o /tmp/auto-open.dmg /tmp/auto-open
Creating hybrid image...
...
$ hdiutil mount /tmp/auto-open.dmg
...
/dev/disk10s2 Apple_HFS /Volumes/auto-open
```

As the volume is mounted, a Finder window should open, displaying the `directory` folder on the volume. Additionally, `finderInfo[2]` should be equal to the catalog node ID of the `directory`.

```sh
$ hfsdebug -V /Volumes/auto-open -v
...
# Open folder ID
finderInfo[2] = 0x10 (auto-open:/directory)
...
$ ls -di /Volumes/auto-open/directory
16 /Volumes/auto-open/directory
```

### Viewing a Volume Control Block

When an HFS+ volume is mounted, an in-kernel block of memory called a volume control block (VCB) holds most of the volume header's information, along with other dynamic information about the volume. The VCB is represented by the `hfsmount` structure in the kernel. `hfsdebug` can retrieve the contents of the `hfsmount` structure from kernel memory.

```sh
$ sudo hfsdebug -m
Volume name = Macintosh HD (volfs_id = 234881028)
block device number = { major=14, minor=4 }
HFS+ flags = 00000000000000000000000010001100
+ HFS_WRITEABLE_MEDIA
+ HFS_CLEANED_ORPHANS
+ HFS_METADATA_ZONE
default owner = { uid=99, gid=99 }
...
free allocation blocks = 0x86fe4f
start block for next allocation search = 0x2065a66
next unused catalog node ID = 3251700
file system write count = 61643383
free block reserve = 64000
blocks on loan for delayed allocations = 0
...
```

### HFS Wrapper

An HFS+ volume may be embedded in an HFS wrapper to ensure compatibility with systems lacking HFS+ support in ROM. The HFS+ volume header does not reside at a 1024-byte offset from the beginning of the volume; instead, the HFS master directory block (MDB) does. The MDB contains enough information to compute the location of the HFS+ volume header.

To create an embedded HFS+ volume and examine its contents, follow these steps:

```sh
% hdiutil create -size 16m -layout NONE /tmp/hfswrapper.dmg
...
created: /tmp/hfswrapper.dmg
% hdiutil attach -nomount /tmp/hfswrapper.dmg
...
/dev/disk10
% newfs_hfs -w -v HFSWrapper /dev/rdisk10
Initialized /dev/rdisk10 as a 16 MB HFS Plus Volume
% mkdir /tmp/mnt
% mount_hfs -w /dev/disk10 /tmp/mnt
% ls -l /tmp/mnt
total 64
-rwxr-xr-x 1 amit wheel 4096 17 Apr 17:40 Desktop DB
-rwxr-xr-x 1 amit wheel 0 17 Apr 17:40 Desktop DF
-rwxr-xr-x 1 amit wheel 0 17 Apr 17:40 Finder
-rwxr-xr-x 1 amit wheel 1781 17 Apr 17:40 ReadMe
-rwxr-xr-x 1 amit wheel 0 17 Apr 17:40 System
```

### Layout of an HFS Wrapper Volume

Figure 129 shows the layout of an HFS wrapper volume containing an embedded HFS+ volume.

### Unmounting and Mounting the Embedded HFS+ Volume

To unmount the wrapper volume and mount the embedded HFS+ volume, use the following commands:

```sh
$ umount /tmp/mnt
$ hdiutil detach disk10
"disk10" unmounted.
"disk10" ejected.
$ open /tmp/hfswrapper.dmg
$ mount
...
/dev/disk10 on /Volumes/HFSWrapper (local, nodev, suid, mounted by amit)
```

### Master Directory Block (MDB)

When used to display the volume header of an embedded HFS+ volume, `hfsdebug` also displays the contents of the MDB.

```sh
$ sudo hfsdebug -d /dev/rdisk10 -v
HFS Plus Volume with HFS Wrapper
Embedded offset = 88 bytes
Wrapper volume size = 16376.00 KB/15.99 MB/0.02 GB
Embedded volume size = 16336.00 KB/15.95 MB/0.02 GB
# HFS Wrapper Master Directory Block
drSigWord = $4244 (BD)
drCrDate = Sun Oct 9 18:17:08 2005
drLsMod = Sun Oct 9 18:17:08 2005
drAtrb = 1000001100000000
. kHFSVolumeUnmounted (volume was successfully unmounted)
. kHFSVolumeSparedBlocks (volume has bad blocks spared)
. kHFSVolumeSoftwareLock (volume is locked by software)
drNmFls = 5
drVBMSt = 0x3 (3)
drAllocPtr = 0 (0)
drNmAlBlks = 4094
drAlBlkSiz = 4096 bytes
drClpSiz = 4096
drAlBlSt = 0x8 (8)
drNxtCNID = 21
drFreeBks = 0
drVN = HFSWrapper (10 characters)
drVolBkUp = Fri Jan 1 00:00:00 1904
drVSeqNum = 0
drWrCnt = 3
drXTClpSiz = 4096
drNmRtDirs = 0
drFilCnt = 5
drDirCnt = 0
EmbedSigWord = $482B (H+)
# Finder Info
drFndrInfo [0] = 0x2
drFndrInfo [1] = 0
drFndrInfo [2] = 0
drFndrInfo [3] = 0
drFndrInfo [4] = 0x656e6300
drFndrInfo [5] = 0
drFndrInfo [6] = 0x8a0d0159
drFndrInfo [7] = 0xf39492fd
drEmbedExtent = start count
0x000a 0x0ff4
drXTFlSize = 4096 blocks
drXTExtRec = start count
0x0000 0x0001
0x0000 0x0000
0x0000 0x0000
drCTFlSize = 4096 blocks
drCTExtRec = start count
0x0001 0x0001
0x0000 0x0000
0x0000 0x0000
# HFS Plus Volume Header
...
fileCount = 1
folderCount = 3 /* not including the root folder */
blockSize = 4096
totalBlocks = 4084
freeBlocks = 4017
...
```

### Special Files

The HFS+ volume header contains a fork-data structure (`HFSPlusForkData`) for each of the five special files: three B-Trees, a bitmap, and an optional Startup file. These files are not user-visible and do not contribute to the file count maintained in the volume header.

### The Allocation File

The Allocation file tracks whether an allocation block is in use. It is a bitmap, with each byte tracking eight allocation blocks. The Allocation file itself consumes an integral number of allocation blocks and can be grown or shrunk, allowing flexibility in managing the volume's space. Unused bits in the last allocation block must be set to zero by the HFS+ implementation.

### Reserved Areas and Volume Headers

- An HFS+ volume has two reserved areas: the first 1024 bytes and the last 512 bytes.
- The 512-byte volume header and the 512-byte alternate volume header are adjacent to these reserved areas.
- The allocation blocks encompassing the reserved areas and the two volume headers must be marked as used in the Allocation file.
- If the volume size is not an integral multiple of the allocation block size, the last allocation block may have unused bits, which must be set to zero.