appears in this directory by either its actual name or a modification of its name. Such
modification may be required for two reasons. First, if an HFS+ volume's name contains a /
character, diskarbitrationd TRanslates it to a : character, since /, although a valid HFS+
pathname character, can be only a path separator in BSD pathnames. Note that regardless of
which /Volumes subdirectory a volume is mounted on, the volume name that appears on the
Desktop, along with the volume's icon, is unchanged.
Secondly, it is possible for two or more volumes to have the same name. Suppose you mount four
volumes, each named HFSDisk. Even though their Desktop icons will all have the label HFSDisk,
they will appear under /Volumes with automatically assigned suffixesfor example, as HFSDisk,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 19 of 81
HFSDisk 1, HFSDisk 2, and HFSDisk 3.
The third folder is the invisible private metadata folder, which is used internally by the file system and is
created during volume creation. We discuss this private folder when we discuss hard links (Section 12.8.6).
Note that the . (current directory) and .. (parent directory) directory entries do not reside physically on disk
on an HFS+ volumethey are simulated by the HFS+ implementation.
We can verify the number and names of the folders on this volume by using hfsdebug to print the folder
thread records in the volume's Catalog B-Tree.
% hfsdebug -b catalog -l folderthread -d /dev/rdisk10s2
# Folder Thread Record
parentID = 1
nodeName = HFSJ
# Folder Thread Record
parentID = 2
nodeName = %00%00%00%00HFS+ Private Data
# Folder Thread Record
parentID = 2
nodeName = .Trashes
# Folder Thread Record
parentID = 17
nodeName = 501
Two of the three files on this volume are the invisible journal files: /.journal and /.journal_info_block.
The third file is /.DS_Store,[14] which, again, will not exist if you manually mount the newly created volume
in our example. We can verify the names of these files by using hfsdebug to print the file thread records in the
Catalog B-Tree.
[14] This is a file used by the Finder for caching information about a directory's contents.
$ hfsdebug -b catalog -l filethread -d /dev/rdisk10s2
# File Thread Record
parentID = 2
nodeName = .journal
# File Thread Record
parentID = 2
nodeName = .journal_info_block
# File Thread Record
parentID = 2
nodeName = .DS_Store
We will discuss file and folder thread records in greater detail in Section 12.7.2.
The volume header also includes an array (the finderInfo field) containing eight 32-bit values, whose
meanings are listed in Table 121.
Table 121. Contents of the finderInfo Array in the HFS+ Volume Header
Element at
Index Description
0 If the volume contains a bootable system (typically the one specified
by finderInfo[3] or finderInfo[5]), this entry contains its
directory ID, and 0 otherwise.
1 If the volume is bootable, this entry contains the parent directory ID
of the startup application (such as the Finder); ignored on the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 20 of 81
PowerPC version of Mac OS X.
2 This entry may contain the ID of a directory that should be opened in
the Finder as the volume is mounted.
3 If the volume contains a bootable Mac OS 9 (or 8) system folder, this
entry contains its directory ID, and 0 otherwise.
4 This entry is reserved.
5 If the volume contains a bootable Mac OS X system, this entry
contains the directory ID of the "system" folder (by default, the folder
containing the bootloaderthat is, the BootX or boot.efi files), and 0
otherwise.
6 This is the upper half of a unique 64-bit volume identifier.
7 This is the lower half of the volume identifier.
Since several elements of the volume header's finderInfo array are related to booting, it would be more
interesting to look at the volume header on a boot volume. When no volume or device is explicitly specified,
hfsdebug operates on the root volume (Figure 128), which normally is also the boot volume.
Figure 128. Finder information contained in the volume header of a boot volume
$ sudo hfsdebug -v
...
# Finder Info
# Bootable system blessed folder ID
finderInfo[0] = 0xcf5 (Macintosh HD:/System/Library/CoreServices)
# Parent folder ID of the startup application
finderInfo[1] = 0
# Open folder ID
finderInfo[2] = 0
# Mac OS 9 blessed folder ID
finderInfo[3] = 0xd6533 (Macintosh HD:/System Folder)
# Reserved
finderInfo[4] = 0
# Mac OS X blessed folder ID
finderInfo[5] = 0xcf5 (Macintosh HD:/System/Library/CoreServices)
# VSDB volume identifier (64-bit)
finderInfo[6] = 0x79a955b7
finderInfo[7] = 0xe0610f64
# File System Boot UUID
UUID = B229E7FA-E0BA-345A-891C-80321D53EE4B
...
As Figure 128 shows, the volume contains both a bootable Mac OS X system and a bootable Mac OS 9
system, with finderInfo[5] and finderInfo[3] containing the respective system folder IDs. In the case of
Mac OS X, the "system" folder is the one containing BootXthat is, /System/Library/CoreServices. The
Boot UUID string shown is not part of finderInfoit is constructed by hfsdebug (and by BootX during
bootstrapping)from the 64-bit volume identifier contained in the last two elements of finderInfo.
As listed in Table 121, if finderInfo[2] contains a folder ID, the Finder will open a window displaying that
directory when the volume is mounted. Let us verify this. We can use hdiutil to create an image with a
designated "auto-open" folder.
$ mkdir /tmp/auto-open
$ mkdir /tmp/auto-open/directory
$ echo Hello > /tmp/auto-open/directory/ReadMe.txt
$ hdiutil makehybrid -hfs -hfs-openfolder /tmp/auto-open/directory \
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 21 of 81
-o /tmp/auto-open.dmg /tmp/auto-open
Creating hybrid image...
...
$ hdiutil mount /tmp/auto-open.dmg
...
/dev/disk10s2 Apple_HFS /Volumes/auto-open
As the volume is mounted, a Finder window should open displaying the folder named directory on the
volume. Moreover, finderInfo[2] should be equal to the catalog node ID of directory.
$ hfsdebug -V /Volumes/auto-open -v
...
# Open folder ID
finderInfo[2] = 0x10 (auto-open:/directory)
...
$ ls -di /Volumes/auto-open/directory
16 /Volumes/auto-open/directory
12.5.2. Viewing a Volume Control Block
When an HFS+ volume is mounted, an in-kernel block of memory called a volume control block (VCB) holds
most of the volume header's information, along with other, dynamic information about the volume. The VCB
is represented by the hfsmount structure in the kernel. Given a mounted HFS+ volume, hfsdebug can retrieve
the corresponding hfsmount structure's contents from kernel memory.
$ sudo hfsdebug -m
Volume name = Macintosh HD (volfs_id = 234881028)
block device number = { major=14, minor=4 }
HFS+ flags = 00000000000000000000000010001100
+ HFS_WRITEABLE_MEDIA
+ HFS_CLEANED_ORPHANS
+ HFS_METADATA_ZONE
default owner = { uid=99, gid=99 }
...
free allocation blocks = 0x86fe4f
start block for next allocation search = 0x2065a66
next unused catalog node ID = 3251700
file system write count = 61643383
free block reserve = 64000
blocks on loan for delayed allocations = 0
...
We will revisit the hfsmount structure later in this chapter.
12.6. The HFS Wrapper
An HFS+ volume may be embedded in an HFS wrapper. After the introduction of HFS+ with Mac OS 8.1,
Apple had to ensure that computers with no HFS+ support in ROM were able to boot Mac OS 8.1 and newer
systems from an HFS+ volume. The solution Apple used was to wrap the HFS+ volume so that it appeared as
an HFS volume to the ROM. The System file residing on the HFS volume would only contain code to find the
offset of the embedded HFS+ volume, mount it, and perform the actual boot using the System file on the
HFS+ volume.
In HFS-embedded HFS+ volumes, the HFS+ volume header does not reside at a 1024-byte offset from the
beginning of the volumethe HFS master directory block (MDB) does. The MDB is the HFS analog of the
volume header. It contains enough information so that the HFS+ volume header's location can be computed.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 22 of 81
There is also an alternate MDB that is analogous to the alternate volume header.
Let us create an embedded HFS+ volume and examine its contents.
% hdiutil create -size 16m -layout NONE /tmp/hfswrapper.dmg
...
created: /tmp/hfswrapper.dmg
% hdiutil attach -nomount /tmp/hfswrapper.dmg
...
/dev/disk10
Note the device node path (/dev/disk10 in this example) printed by hdiutil. Make sure you use the correct
device path; otherwise, you may destroy existing data on a volume.
The -w option to newfs_hfs adds an HFS wrapper around the HFS+ file system that newfs_hfs creates.
Similarly, the -w option to mount_hfs causes the wrapper volume to be mounted instead of the embedded
HFS+ volume.
% newfs_hfs -w -v HFSWrapper /dev/rdisk10
Initialized /dev/rdisk10 as a 16 MB HFS Plus Volume
% mkdir /tmp/mnt
% mount_hfs -w /dev/disk10 /tmp/mnt
% ls -l /tmp/mnt
total 64
-rwxr-xr-x 1 amit wheel 4096 17 Apr 17:40 Desktop DB
-rwxr-xr-x 1 amit wheel 0 17 Apr 17:40 Desktop DF
-rwxr-xr-x 1 amit wheel 0 17 Apr 17:40 Finder
-rwxr-xr-x 1 amit wheel 1781 17 Apr 17:40 ReadMe
-rwxr-xr-x 1 amit wheel 0 17 Apr 17:40 System
The wrapper volume is created with five files in its root directory. The System file's data fork is empty, but its
resource fork contains boot code. The Finder file has both forks empty. All files are marked invisible except
ReadMe. When such a volume is used on a system with no HFS+ support (e.g., a system earlier than Mac OS
8.1), the user would see a volume with only the ReadMe file on it. The file explains why the user cannot see
any files on the volume and the steps needed to access them.
Figure 129 shows the layout of an HFS wrapper volume containing an embedded HFS+ volume.
Figure 129. An HFS wrapper volume containing an embedded HFS+ volume
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 23 of 81
Let us unmount the wrapper volume and mount the HFS+ volume within it. Unless explicitly instructed to
mount the wrapper volume, Mac OS X will mount the embedded HFS+ volume.
$ umount /tmp/mnt
$ hdiutil detach disk10
"disk10" unmounted.
"disk10" ejected.
$ open /tmp/hfswrapper.dmg
$ mount
...
/dev/disk10 on /Volumes/HFSWrapper (local, nodev, suid, mounted by amit)
When used to display the volume header of an embedded HFS+ volume, hfsdebug also displays the contents
of the MDB (Figure 1210).
Figure 1210. The contents of a master directory block
$ sudo hfsdebug -d /dev/rdisk10 -v
HFS Plus Volume with HFS Wrapper
Embedded offset = 88 bytes
Wrapper volume size = 16376.00 KB/15.99 MB/0.02 GB
Embedded volume size = 16336.00 KB/15.95 MB/0.02 GB
# HFS Wrapper Master Directory Block
drSigWord = $4244 (BD)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 24 of 81
drCrDate = Sun Oct 9 18:17:08 2005
drLsMod = Sun Oct 9 18:17:08 2005
drAtrb = 1000001100000000
. kHFSVolumeUnmounted (volume was successfully unmounted)
. kHFSVolumeSparedBlocks (volume has bad blocks spared)
. kHFSVolumeSoftwareLock (volume is locked by software)
drNmFls = 5
drVBMSt = 0x3 (3)
drAllocPtr = 0 (0)
drNmAlBlks = 4094
drAlBlkSiz = 4096 bytes
drClpSiz = 4096
drAlBlSt = 0x8 (8)
drNxtCNID = 21
drFreeBks = 0
drVN = HFSWrapper (10 characters)
drVolBkUp = Fri Jan 1 00:00:00 1904
drVSeqNum = 0
drWrCnt = 3
drXTClpSiz = 4096
drNmRtDirs = 0
drFilCnt = 5
drDirCnt = 0
EmbedSigWord = $482B (H+)
# Finder Info
drFndrInfo [0] = 0x2
drFndrInfo [1] = 0
drFndrInfo [2] = 0
drFndrInfo [3] = 0
drFndrInfo [4] = 0x656e6300
drFndrInfo [5] = 0
drFndrInfo [6] = 0x8a0d0159
drFndrInfo [7] = 0xf39492fd
drEmbedExtent = start count
0x000a 0x0ff4
drXTFlSize = 4096 blocks
drXTExtRec = start count
0x0000 0x0001
0x0000 0x0000
0x0000 0x0000
drCTFlSize = 4096 blocks
drCTExtRec = start count
0x0001 0x0001
0x0000 0x0000
0x0000 0x0000
# HFS Plus Volume Header
...
fileCount = 1
folderCount = 3 /* not including the root folder */
blockSize = 4096
totalBlocks = 4084
freeBlocks = 4017
...
Figure 1210 shows that the embedded signature field (EmbedSigWord) contains H+ to indicate the presence of
an embedded volume. Note that the wrapper volume has no free blocks, as is indicated by the MDB's
drFreeBks field. This is because from the HFS volume's standpoint, all space is already allocatedit is used by
the embedded volume. Moreover, the embedded volume's space is actually marked as "bad" in the HFS
volume, as indicated by the kHFSVolumeSparedBlocks bit being set in the MDB's drAtrb field. This prevents
the embedded volume's space from being recovered or otherwise used in any way. The MDB's drNmFls field
is 5, indicating that the wrapper volume contains 5 files.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 25 of 81
12.7. Special Files
The HFS+ volume header contains a fork-data structure (HFSPlusForkData) for each of the five special files
tagged as "special" in Figure 126three B-Trees, a bitmap, and an optional Startup file. Since a fork-data
structure contains the fork's total size and the initial set of the file's extents, these files can all be accessed
starting from the volume header. An HFS+ implementation reads the volume header and the appropriate
special files to provide access to the user data (i.e., files, folders, and attributes) contained on a volume.
The special files are not user-visible. They also do not contribute to the file count maintained in the volume
header.
An important point to note about the special files is that besides being free to reside at any available locations
on the volume, they need not be contiguous. Moreover, all special files, except the Extents Overflow file, can
grow beyond eight extents, in which case the "overflowing" extents will be stored in the Extents Overflow file.
12.7.1. The Allocation File
The Allocation file tracks whether an allocation block is in use. It is simply a bitmap, containing a bit for each
allocation block on the volume. If a given block is either holding user data or assigned to a file system data
structure, the corresponding bit is set in the Allocation file. Thus, each byte in this file tracks eight allocation
blocks.
Note that being a file, the Allocation file itself consumes an integral number of allocation blocks. One of its
nice properties is that it can be grown or shrunk, allowing flexibility in manipulation of a volume's space. This
also means that the last allocation block assigned to the Allocation file may have unused bitssuch bits must be
explicitly set to zero by the HFS+ implementation.
We saw in Section 12.4 that an HFS+ volume has two reserved areas: the first 1024 bytes and the last 512
bytes. The 512-byte volume header and the 512-byte alternate volume header are adjacentafter and before,
respectivelyto these two areas. The allocation blocks that encompass the reserved areas and the two volume
headers must be marked as used in the Allocation file. Moreover, if the volume size is not an integral multiple