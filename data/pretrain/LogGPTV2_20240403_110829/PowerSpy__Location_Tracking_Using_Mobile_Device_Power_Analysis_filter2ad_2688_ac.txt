upper bound on the number of segments that the tracked
device can traverse. Note however that a route may ex-
haust the examined power proﬁle before the last iteration
(namely, the end time of that route reached tmax). In such
a case we do not update the route in all subsequent itera-
tions (this case is not described in Algorithm 2 to facili-
tate ﬂuency of exposition).
Before calculating the DTW distance of a pair of
power proﬁles the proﬁles are preprocessed to remove
as much noise as possible. We ﬁrst normalize the power
proﬁle by subtracting its mean and dividing by the stan-
dard deviation of all values included in that proﬁle. Then,
we zero out all power values below a threshold per-
centile. This last step allows us to focus only on the peaks
in power consumption where the radio’s power consump-
tion is dominant while ignoring the lower power values
for which the radio’s power has a lesser effect. The per-
centile threshold we use in this paper is 90%.
Upon its completion, the particle ﬁlter outputs a set
of N routes of various lengths. To select the best esti-
mate route the simple approach is to choose the route
that appears the most number of times in the output set
as it has the highest probability to occur. Nonetheless,
since a route is composed of multiple segments chosen
at separate steps, at each step the weight of a route is de-
termined solely based on the last segment added to the
route. Therefore, the output route set is biased in favor
of routes ending with segments that were given higher
weights, while the weights of the initial segments have
a diminishing effect on the route distribution with every
new iteration. To counter this bias, we choose another es-
timate route using a procedure we call iterative majority
vote, described is Appendix B.
7 Experiments
7.1 Data collection
Our experiments required collecting real power con-
sumption data from smartphone devices along different
routes. We developed the PowerSpy android applica-
tion5 that collects various measurements including signal
strength, voltage, current, GPS coordinates, temperature,
state of discharge (battery level) and cell identiﬁer. The
recordings were performed using Nexus 4, Nexus 5 and
HTC mobile devices.
7.2 Assumptions and limitations
Exploring the limits of our attack, i.e. establishing the
minimal necessary conditions for it to work, is beyond
our resources. For this reason, we state the assumptions
on which we rely in our methods.
We assume there is enough variability in power con-
sumption along a route to exhibit unique features. Lack
of variability may be due to high density of cellular an-
tennas that ﬂatten the signal strength proﬁle. We also
assume that enough communication is occurring for the
signal strength to have an effect on power consumption.
This is a reasonable assumption, since background syn-
chronization of data happens frequently in smartphone
devices. Moreover, the driver might be using navigation
software or streaming music. However, at this stage, it
is difﬁcult to determine how inconsistent phone usage
across different rides will affect our attacks.
Identifying which route the user took involves under-
standing which power measurements collected from her
mobile device occurred during driving activity. Here
we simply assume that we can identify driving activity.
Other works (e.g., [22]) address this question by using
data from other sensors that require no permissions, such
as gyroscopes and accelerometers.
Some events that occur while driving, such as an in-
coming phone call, can have a signiﬁcant effect on power
4Note that the resampling of the new routes can have repetitions.
Namely, the same route can be chosen more than one time
5Source code can be obtained from
https://bitbucket.org/ymcrcat/powerspy.
USENIX Association  
24th USENIX Security Symposium  791
7
2.8
2.6
2.4
2.2
2
1.8
1.6
1.4
]
t
t
a
W
[
r
e
w
o
P
50
100
150
200
Time [sec]
Figure 4: Power proﬁle with a phone call occurring be-
tween 50-90 seconds. Proﬁle region during phone call is
marked in red.
consumption. Figure 4 shows the power proﬁle of a
device at rest when a phone call takes place (the part
marked in red). The peak immediately after the phone
call is caused by using the phone to terminate the phone
call and turn off the display. We can see that this event
appears prominently in the power proﬁle and can cope
with such transient effects by identifying and truncating
peaks that stand out in the proﬁle. In addition, smooth-
ing the proﬁle by a moving average should mitigate these
transient effects.
7.3 Route distinguishability
To evaluate the algorithm for distinguishing routes (sec-
tion 4) we recorded reference proﬁles for multiple differ-
ent routes. The proﬁles include measurements from both
Nexus 4 and Nexus 5 models. In total we had a dataset
of 294 proﬁles, representing 36 unique routes. Driving
in different directions along the same roads (from point
A to B vs. from point B to A) is considered two differ-
ent routes. We perform cross validation using multiple
iterations (100 iterations), each time using a random por-
tion of the proﬁles as a training set, and requiring equal
number of samples for each possible class. The sizes of
the training and test sets depend on how many reference
routes per proﬁle we require each time. Naturally, the
more reference proﬁles we have, the higher the identiﬁ-
cation rate.
One evaluation round included 29 unique routes, with
only 1 reference proﬁle per route in the training set, and
211 test routes. It resulted in correct identiﬁcation rate
of 40%. That is compared to the random guess prob-
ability of only 3%. Another round included 25 unique
routes, with 2 reference proﬁles per route in the training
set and 182 routes in the test set, and resulted in cor-
rect identiﬁcation rate of 53% (compared to the random
guess probability of only 4%). Having 5 reference pro-
ﬁles per route (for 17 unique routes) raises the identiﬁ-
cation rate to 71%, compared to the random guess prob-
ability of 5.8%. And ﬁnally, for 8 reference proﬁles per
route we get 85% correct identiﬁcation. The results are
summarized in table 1.
We can see that an attacker can have a signiﬁcant ad-
vantage in guessing the route taken by a user.
7.4 Real-time mobile device tracking
We evaluate the algorithm for real-time mobile device
tracking (section 5) using a set of 10 training proﬁles
and an additional test proﬁle. The evaluation simulates
the conditions of real-time tracking by serially feeding
samples to the algorithm as if they are received from an
application installed on the device. We calculate the esti-
mation error, i.e. the distance between the estimated co-
ordinates and the true location of the mobile device at
each step of the simulation. We are interested in the con-
vergence time, i.e. the number of samples it takes until
the location estimate is close enough to the true loca-
tion, as well as in the distribution of the estimation errors
given by a histogram of the absolute values of the dis-
tances.
Figure 5 illustrates the performance of our tracking al-
gorithm for one of the routes, which was about 19 kilo-
meters long. At the beginning, when there are very few
power samples, the location estimation is extremely inac-
curate, but after two minutes we lock on the true location.
We obtained a precise estimate from 2 minutes up until
20 minutes on the route, where our estimate slightly di-
verges, due to increased velocity on a freeway segment.
Around 26 minutes (in ﬁgure 5a) we have a large esti-
mation error, but as we mentioned earlier, these kind of
errors are easy to prevent by imposing a simple motion
model (section 5.2). Most of the errors are small com-
pared to the length of the route: 80% of the estimation
errors are less than 1 km.
We also tested the improved tracking algorithm ex-
plained in section 5.2. Figure 5b presents the estimation
error over time, and we can see that the big errors towards
the end of the route that appeared in 5a are not present in
ﬁg. 5b. Moreover, now almost 90% of the estimation er-
rors are below 1 km (ﬁg. 6).
We provide animations visualizing our results for real-
time tracking at the following links. The animations,
generated using our estimations of the target’s location,
depict a moving target along the route and our estimation
of its location. The ﬁrst one corresponds to the method
described in 5.1, and the second to the one described in
5.2 that uses the motion model based correction:
crypto.stanford.edu/powerspy/tracking1.mov
crypto.stanford.edu/powerspy/tracking2.mov
792  24th USENIX Security Symposium 
USENIX Association
8
# Test Routes Correct Identiﬁcation % Random Guess %
# Unique Routes
8
17
17
21
25
29
# Ref. Proﬁles/Route
10
5
4
3
2
1
55
119
136
157
182
211
85
71
68
61
53
40
13
6
6
5
4
3
Table 1: Route distinguishability evaluation results. First column indicates the number of unique routes in the training
set. Second column indicates the number of training samples per route at the attacker’s disposal. Number of test routes
indicates the number of power proﬁles the attacker is trying to classify. Correct identiﬁcation percentage indicates the
percentage of correctly identiﬁed routes as a fraction of the third column (test set size), which could be then compared
to the expected success of random guessing in the last column.
(a) Convergence to true location.
(b) Location estimation error for improved tracking
algorithm.
Figure 5: Location estimation error for online tracking.
(a) Errors histogram. Almost 90% of the errors are
less than 1 km.
(b) Error cumulative distribution.
Figure 6: Estimation errors distribution for motion-model tracking.
USENIX Association  
24th USENIX Security Symposium  793
9
Figure 7: Comparison of DTW and OSB for real-time
tracking.
7.4.1 OSB vs. DTW
We compare the performance of Dynamic Time Warping
to that of Optimal Subsequence Bijection (section 5.3).
Figure 7 present such a comparison for the same route,
using two different recordings. The tracking was per-
formed without compensating for errors using a motion
model, to evaluate the performance of the subsequence
matching algorithms as they are. We can see that, in both
cases, Optimal Subsequence Bijection outperforms the
standard Subsequence-DTW most of the time. There-
fore, we suggest that further experimentation with OSB
could potentially be beneﬁcial for this task.
Inference of new routes
7.5
7.5.1 Setup
For the evaluation of the particle ﬁlter presented in Sec-
tion 6 we considered an area depicted in Figure 8. The
area has 13 intersections having 35 road segments6. The
average length of a road segment is about 400 meters.
The average travel time over the segments is around 70
seconds. The area is located in the center of Haifa, a city
located in northern Israel, having a population density
comparable to Philadelphia or Miami. Trafﬁc conges-
tion in this area varies across segments and time of day.
For each power recording, the track traversed at least one
6Three of the segments are one way streets.
Figure 8: Map of area and intersections for route infer-
ence.
congested segment. Most of the 13 intersections have
trafﬁc lights, and about a quarter of the road segments
pass through them.
We had three pre-recording sessions which in total
covered all segments. Each road segment was entered
from every possible direction to account for the hystere-
sis effects. The pre-recording sessions were done using
the same Nexus 4 phone.
We set the following parameters of the HMM (as they
are deﬁned in Appendix A):
1. A – This set deﬁnes the transition probabil-
ities between the road segments.
We set
these probabilities to be uniformly distributed
over all possible transitions.
Namely, axyz =
(cid:31)1/|Iy| |Iy = {w|(y,w) ∈ R,w (cid:28)= x}(cid:30).
2. B – This set deﬁnes the distribution of power pro-
ﬁle observations over each state. These probabili-
ties depend on the road segments and their location
relative to the nearby based stations. We do not need
an explicit formulation of these probabilities to em-
ploy the particle ﬁlter. The likelihood of a a power
proﬁle to be associated with a road segment is esti-
mated by the DTW distance of the power proﬁle to
prerecorded power proﬁles of that segment.
3. Π – This set deﬁnes the initial state distribution.
We assume that
the starting intersection of the
tracked device is known. This applies to scenar-
ios where the tracking begins from well-known lo-
cations, such as the user’s home, ofﬁce, or another
location the attacker knows in advance.
For testing, we used 4 phones: two Nexus 4 (differ-
ent from the one used for the pre-recordings), a Nexus 5
794  24th USENIX Security Symposium 
USENIX Association
10
Phone
Nexus 4 #1
Nexus 4 #2
Nexus 5
HTC Desire
Track
8-5-6-7-1-2-3-4-5-6-4-3-2-1-7-8
7-1-2-3-4-5-8-7-6-5-4-2-1-7-8
3-2-4-9-10-12-11-9-4-5-6-4-3-2-1-7-6-5-8-7
10-12-11-9-4-2-1-7-6-5-8
Nexus 4 #1
Nexus 4 #2
Nexus 5
HTC Desire
random frequent Alg. 3
48%
56%
32%
41%
33%
31%
20%
22%
65%
48%
33%
40%
combined
80%
72%