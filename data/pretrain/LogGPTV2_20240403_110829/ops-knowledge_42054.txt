User: How to deploy a containerized Java web application using Kubernetes?
Assistant: To deploy a containerized Java web application on Kubernetes, follow these steps: 1. Write a Dockerfile, specify the Java environment, and package the web application into a Docker image. Example: ``` FROM openjdk:8-jdk-alpine COPY my-web-app.war /app/my-web-app.war CMD ["java", "-jar", "/app/my-web- app.war"] ``` 2. Execute the `docker build` command in the directory where the Dockerfile is located to generate a Docker image. 3. Upload the Docker image to the Docker image warehouse, such as Docker Hub. 4. Write a Kubernetes deployment YAML file to specify parameters such as image, port, liveness probe, and readiness probe of the containerized Java web application. Example: ``` apiVersion: apps/v1 kind: Deployment metadata: name: my-web-app spec: replicas: 3 selector: matchLabels: app: my-web-app template: metadata: labels: app: my-web- app spec: containers: - name: my-web-app image: your-docker-hub-user-name/my-web-app:latest ports: - containerPort: 8080 readinessProbe: httpGet: path: / port: 8080 initialDelaySeconds: 60 periodSeconds: 10 livenessProbe: httpGet: path: / port: 8080 initialDelaySeconds: 120 periodSeconds: 30 ``` 5. Use the `kubectl apply` command to apply the above deployment YAML file to create a Kubernetes deployment. 6. Resources such as Kubernetes service and ingress can be used to expose application services. For example, create NodePort service to expose application services to the Internet: ``` apiVersion: v1 kind: Service metadata: name: my-web-app spec: type: NodePort selector: app: my-web-app ports: - port : 8080 targetPort: 8080 nodePort: 30001 ``` 7. Visit http://NodeIP:30001 to access the application. Among them, NodeIP is the IP address of the Kubernetes Node node.