    ```
7.  Run the image from the command line:
    ```
    docker run scratchtest
    ```
    您将看到在本练习前面创建和编译的测试 C 文件的输出:
    ```
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    ```
8.  Run the `docker images` command for your new image:
    ```
    docker images scratchtest
    ```
    这将向您展示一些令人印象深刻的结果，因为您的映像大小仅为`913 kB`:
    ```
    REPOSITORY   TAG     IMAGE ID         CREATED          SIZE
    scratch      latest  221adbe23c26     20 minutes ago   913kB
    ```
9.  View the layers of the image using the `docker history` command:
    ```
    docker history scratchtest
    ```
    您将看到一个类似于下面的输出，它只有两层，从零开始的原始层和我们`ADD`测试 C 程序的层:
    ```
    IMAGE        CREATED        CREATED BY                        SIZE
    221adbe23c26 23 minutes ago /bin/sh -c #(nop)  CMD ["/test"]  0B
    09b61a3a1043 23 minutes ago /bin/sh -c #(nop) ADD file:80933… 913kB
    ```
我们在本练习中创建的草稿映像在一定程度上有助于创建一个既实用又最小的映像，并且还表明，如果您稍微考虑一下您想要实现的目标，就可以很容易地加快构建速度并缩小映像的大小。
我们现在将从构建映像的工作中休息一下，仔细看看如何命名和标记我们的 Docker 映像。
# Docker 映像命名和标记
我们已经谈到了标签，但是随着我们与 Docker 映像的合作越来越密切，现在可能是更深入地研究映像标签的好时机。简单来说，标签是 Docker 映像上的标签，应该为映像的用户提供一些关于他们正在使用的映像或映像版本的有用信息。
到目前为止，我们一直像单独开发人员一样处理我们的映像，但是当我们开始与更大的开发团队合作时，需要更仔细地考虑我们将如何命名和标记我们的映像。这一章的下一部分将添加到您之前的工作中，并允许您开始为您的项目和工作制定命名和标记策略。
命名和标记 Docker 映像有两种主要方法。您可以使用`docker tag`命令，或者当您从`Dockerfile`构建映像时，您可以使用`-t`选项。要使用`docker tag`命令，请指定要用作基础的源存储库名称以及要创建的目标名称和标签:
```
docker tag : :tag
```
当您使用`docker build`命令命名您的映像时，使用的`Dockerfile`将创建您的源，然后使用`-t`选项命名和标记您的映像，如下所示:
```
docker build -t :tag Dockerfile
```
存储库名称有时可以以主机名作为前缀，但这是可选的，将用于让 Docker 知道存储库的位置。我们将在本章稍后创建自己的 Docker 注册表时演示这一点。如果要将映像推送到 Docker Hub，还需要在存储库名称前加上 Docker Hub 用户名，如下所示:
```
docker build -t /:tag Dockerfile
```
仅在本地映像注册表中支持在映像名称中使用两个以上的前缀，并且通常不使用。下一个练习将指导您完成标记 Docker 映像的过程。
## 练习 3.05:标记 Docker 映像
在下面的练习中，您将使用不同的映像，使用轻量级`busybox`映像来演示标记过程，并开始在项目中实现标记。BusyBox 用于将许多常见 UNIX 实用程序的小版本组合成一个小的可执行文件:
1.  运行`docker rmi`命令，清除系统中当前存在的映像，这样就不会与周围的大量映像混淆:
    ```
    docker rmi -f $(docker images -a -q)
    ```
2.  在命令行上，运行`docker pull`命令下载最新的`busybox`容器:
    ```
    docker pull busybox
    ```
3.  Run the `docker images` command:
    ```
    docker images
    ```
    这将为我们提供开始组合一些标记命令所需的信息:
    ```
    REPOSITORY    TAG       IMAGE ID        CREATED      SIZE
    Busybox       latest    19485c79a9bb    2 weeks ago  1.22MB
    ```
4.  使用`tag`命令命名并标记映像。您可以使用映像标识或存储库名称来标记映像。首先使用映像标识，但请注意，在您的系统上，您将有一个不同的映像标识。命名仓库`new_busybox`并包含标签`ver_1` :
    ```
    docker tag 19485c79a9bb new_busybox:ver_1
    ```
5.  Use the repository name and image tag. Create a new repository using your name and tag with a new version of `ver_1.1` as follows:
    ```
    docker tag new_busybox:ver_1 vince/busybox:ver_1.1
    ```
    注意
    我们在这个例子中使用了作者的名字(`vince`)。
6.  Run the `docker images` command:
    ```
    docker images
    ```
    您应该会看到与下面类似的输出。当然，您的映像标识会有所不同，但是存储库名称和标签应该相似:
    ```
    REPOSITORY     TAG      ID             CREATED        SIZE
    Busybox        latest   19485c79a9bb   2 weeks ago    1.22MB
    new_busybox    ver_1    19485c79a9bb   2 weeks ago    1.22MB
    vince/busybox  ver_1.1  19485c79a9bb   2 weeks ago    1.22MB
    ```
7.  使用`docker build`命令的`Dockerfile`和`-t`选项来命名和标记映像，创建一个基本映像。在本章中，您已经这样做了几次，因此从命令行运行以下命令，使用您之前命名的`new_busybox`映像创建一个基本的`Dockerfile`。也包括映像名称的标签，因为 Docker 将尝试使用`latest`标签，并且，由于这不存在，它将失败:
    ```
    echo "FROM new_busybox:ver_1" > Dockerfile
    ```
8.  运行`docker build`命令创建映像，同时命名和标记映像:
    ```
    docker build -t built_image:ver_1.1.1 .
    ```
9.  Run the `docker images` command:
    ```
    docker images
    ```
    现在，您的系统上应该有四个可用的映像。所有容器都具有相同的容器标识，但存储库名称和标记版本不同:
    ```
    REPOSITORY     TAG        ID            CREATED      SIZE
    built_image    ver_1.1.1  19485c79a9bb  2 weeks ago  1.22MB
    Busybox        latest     19485c79a9bb  2 weeks ago  1.22MB
    new_busybox    ver_1      19485c79a9bb  2 weeks ago  1.22MB
    vince/busybox  ver_1.1    19485c79a9bb  2 weeks ago  1.22MB
    ```
用与您的组织或团队相关的正确版本标记映像不会花费太多时间，尤其是稍加练习。本章的这一部分向您展示了如何标记您的映像，以便它们不再用`latest`的默认标记进行标记。在下一节中，您将看到使用`latest`标签并希望它能够正常工作实际上会给您带来一些额外的问题。
# 在 Docker 中使用最新的标签
由于我们一直在使用我们的标签，我们已经几次提到不要使用`latest`标签，它是由 Docker 作为默认标签提供的。正如您将很快看到的，使用`latest`标签可能会导致很多问题，尤其是在将映像部署到生产环境中的情况下。
我们首先需要意识到的是`latest`只是一个标签，就像我们在前面的例子中使用`ver_1`一样。这肯定也不意味着我们代码的最新版本。这仅仅意味着我们的映像的最新构建，它不包括标签。
使用`latest`还会在大型团队中引起很多问题，一天多次部署到环境中。这也意味着你将没有历史，这使得回滚糟糕的更改变得困难。因此，请记住，每次您构建或拉取映像时，如果您没有指定标签，Docker 将使用`latest`标签，并且不会做任何事情来确保映像是最新版本。在下一个练习中，我们将检查使用`latest`标签时会导致哪些问题。
## 练习 3.06:使用最新版本时的问题
您可能还不熟悉使用 Docker 和标签，因此您可能还没有遇到过使用`latest`标签的问题。本练习将为您提供一些清晰的想法，说明使用`latest`标签会给您的开发过程带来什么问题，并为您提供为什么应该避免它的原因。在前面的练习中，您使用`new_busybox:ver_1`映像创建了一个简单的`Dockerfile`。在本练习中，您将进一步扩展该文件:
1.  打开`Dockerfile`将文件修改为现在的样子，如下文件。这是一个简单的脚本，它将用简单的代码创建`version.sh`脚本，以输出我们服务的最新版本。新文件将被称为`Dockerfile_ver1`。
    ```
    1 FROM new_busybox:ver_1
    2
    3 RUN echo "#!/bin/sh\n" > /version.sh
    4 RUN echo "echo \"This is Version 1 of our service\""   >> /version.sh
    5
    6 ENTRYPOINT ["sh", "/version.sh"]
    ```
2.  Build the image and name it with your name and show the image is just a test:
    ```
    docker build -t vince/test .
    ```
    注意
    我们这里用了`vince`作为名字，但是你可以用任何想要的名字。
3.  Run the image using the `docker run` command:
    ```
    docker run vince/test
    ```
    您现在应该看到`versions.sh`脚本的输出:
    ```
    This is Version 1 of our service
    ```
4.  使用`docker tag`命令将此映像标记为`version1` :
    ```
    docker tag vince/test vince/test:version1
    ```
5.  打开`Dockerfile`，对*4 号线*进行如下变更:
    ```
    1 FROM new_busybox:ver_1
    2
    3 RUN echo "#!/bin/sh\n" > /version.sh
    4 RUN echo "echo \"This is Version 2 of our service\""   >> /version.sh
    5
    6 ENTRYPOINT ["sh", "/version.sh"]
    ```
6.  构建您的修正版`Dockerfile`并用`version2` :
    ```
    docker build -t vince/test:version2 .
    ```
    标记
7.  Run the amended image using the `docker run` command:
    ```
    docker run vince/test
    ```
    您还应该看到最新的代码更改:
    ```
    This is Version 1 of our service
    ```
    这不是我们要找的版本，是吗？不使用正确的标签，Docker 将运行用`latest`标记的映像的最新版本。该映像是在*步骤 3* 中创建的。
8.  Now, run both images with the `latest` and `version2` tags:
    ```
    docker run vince/test:latest
    This is Version 1 of our service
    ```