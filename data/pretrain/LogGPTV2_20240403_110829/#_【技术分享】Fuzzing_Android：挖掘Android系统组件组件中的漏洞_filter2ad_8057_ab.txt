### 优化后的文本

#### 使用Stagefright命令行解析畸形文件
通过Stagefright命令行工具来解析畸形文件，并利用定制的Crash分类机制识别独特的崩溃。

#### 音频和视频作为攻击向量
无论在传统PC还是移动平台上，音频和视频文件都是常见的攻击向量。这一现象的原因包括：
1. **复杂的数据结构**：多媒体文件格式通常较为复杂，包含大量数据结构。这增加了程序在解析过程中出错的可能性。此外，许多解析器为了提高效率使用C语言编写，容易导致内存崩溃。
2. **多样的解析器**：市面上存在多种多媒体文件解析器（播放器），它们对不同格式的解析方式各异，从而扩大了攻击面。
3. **用户信任度高**：用户普遍认为音频或视频文件不会造成实质性威胁，因此会下载和播放未知来源的文件。
4. **自动解析**：媒体文件可以在未经用户明确同意的情况下播放，例如在网页中自动播放或通过MMS发送时系统自动解析。

#### Stagefright框架
Stagefright是Android中的一个框架，负责处理各种多媒体文件的解析逻辑。其架构如下图所示：

- **AwesomePlayer**：Stagefright框架的一个客户端，实现将视频、音频和字幕源与相应的连接同步的功能。
- **MediaExtractor**：根据媒体文件类型调用适当的数据解析器。
- **OMXCodec**：用于设置每个数据源的解码器，以便准备播放。

#### 开始Fuzzing
在测试过程中，使用Stagefright命令行接口在Android设备上解析每个恶意媒体文件。此接口可以从Android源代码树中定制，主要功能包括解码/编码媒体文件、强制使用软件或硬件编解码器以及回放音频文件。具体步骤如下：
1. 在连接到测试设备的本地机器上生成畸形文件数据。
2. 使用Basic Fuzzing Framework、zzuf或Fuzzbox等开源工具进行模糊测试。
3. 将畸形文件发送到Android设备，并使用Stagefright命令行接口进行解析。
4. 在fuzzing过程中，按照指定格式生成日志。

#### Fuzzing Android应用安装过程
在这个项目中，fuzzing被用来修改APK的不同组件，并检查其对Android安装过程的影响。主要目标是`classes.dex`和`AndroidManifest.xml`文件。由于`installd`进程以较高系统特权运行，任何发现的问题都可能对系统安全产生重大影响。

#### Android应用安装过程概述
- **PackageInstaller**：默认的应用程序安装器，调用`InstallAppProgress`活动接收用户指令。
- **PackageManager Service**：以system权限运行，调用`installd`守护进程安装APK。
- **run_dexopt (KitKat)** 和 **run_dex2oat (Lollipop)**：分别使用`dexopt`和`dex2oat`命令行工具进行优化。

#### 开始Fuzzing
针对不同的Android版本（KitKat和Lollipop）进行了fuzzing。

##### Fuzzing KitKat
1. 解压种子APK文件中的`classes.dex`文件。
2. 对解压出的`classes.dex`文件进行变异。
3. 移除原始APK中的`classes.dex`文件。
4. 使用变异后的`classes.dex`文件重新打包APK。
5. 生成签名文件。
6. 移除APK中的`META-INF`目录。
7. 使用生成的签名文件对APK签名。

##### Fuzzing Lollipop
1. 获取初始的`classes.dex`文件集。
2. 对这些文件进行变异。
3. 使用`dex2oat`命令行接口解析变异后的文件。
4. 如果检测到崩溃，将变异后的`classes.dex`文件重新打包到APK中，并通过安装流程再次测试确认崩溃。

#### 使用AFL进行Fuzzing
AFL是一款流行的fuzz工具，经过Adrian Denkiewicz的修改后可以在Android上使用。以下是使用AFL进行Stagefright fuzzing的大体思路：
- **自动化挑战**：在Android上完全自动化整个fuzzing过程。
- **架构设计**：为实现更好的自动化效果，设计了特定的架构。

#### 总结
Fuzz安卓系统组件与其他位于PC上的程序本质上没有区别，但在提交测试数据和监控程序崩溃日志方面需要更多的工作。