### Project Overview

The project aims to develop a prototype system that integrates intrusion detection, attack-blocking responses, failover mechanisms for compromised elements, and learning capabilities to create rules for preventing future attacks. Additionally, the system will generalize these rules to counter even significant attack variants.

### 1.1 Background

Commercial organizations, governments, and military entities have reduced costs and arguably improved reliability by increasingly using Commercial Off-The-Shelf (COTS) software and hardware, even for critical applications. However, this has also increased their vulnerability to well-resourced adversaries who aim to cause serious damage to critical infrastructure, steal information, and disrupt services. Most researchers agree that it is practically impossible to build large-scale software without faults, and it is certainly impossible to prove such software is fault-free [1], [2], [3]. Recent high-profile attacks, such as Code Red 1 and Code Red 2, which exploited a known buffer overflow vulnerability in Microsoft’s Internet Information Server, have demonstrated that faults are often exploited long after patches are available.

While improving software security is essential, it is equally important to explore alternative security approaches. In 2000, the U.S. Defense Advanced Research Projects Agency (DARPA) initiated a program to apply fault tolerance techniques to building intrusion-tolerant systems. As part of this effort, several organizations, including Teknowledge Corporation and the University of California (Davis), are developing intrusion-tolerant clusters.

### Specific Project Goals

The Hierarchical Adaptive Control of Quality of Service for Intrusion Tolerance (HACQIT) project aims to provide continuous COTS or Government Off-The-Shelf (GOTS)-based application services in the face of aggressive cyber-attacks by a well-resourced adversary. Given that we do not have access to the source code of these applications, protections must be added around or to the binaries. We recognize that our defense cannot be perfect, so our goals include:

1. Significantly increasing the adversary's work factor for successful attacks.
2. Increasing the ratio of the attacker’s work factor to generate successful attacks compared to the defender’s work factor for responding to them.

We acknowledge that our system is resource-intensive, so we have modularized the components to allow for varying levels of protection based on need and budget.

### 1.2 Organization

The HACQIT project, its architecture, and the basic intrusion-tolerant design approach have been described in other articles [4, 5, 6]. The next section will provide sufficient context to understand the current state of learning and generalization. Subsequent sections will summarize the problem, the learning and generalization approach, its implementation, test results, and conclusions/next steps.

### 2. The HACQIT Context

#### 2.1 General Problem and System Model

To specify the research problem, we have made formal assumptions about the environment and attack scenarios. These assumptions focus on developing dependability in the face of network-based cyber-attacks, rather than dealing with denial-of-service (DoS) attacks, insider threats, Trojans, and other lifecycle attacks. Key assumptions include:

- Users and attackers interact with services via their computers and the Local Area Network (LAN). No hidden interactions exist.
- The LAN is reliable and cannot be flooded. DoS attacks against LAN bandwidth and critical users or firewalls are beyond the scope of the research.
- Critical users and system administrators for the cluster are trusted. No hosts on the external LAN are trusted.
- The protected cluster hardware and software are free of Trojans and trapdoors at startup and have been patched against known vulnerabilities. Attackers do not have physical access to the cluster.
- Other unknown vulnerabilities may exist throughout the system.

Figure 1 illustrates the "formal" system model, which aims to protect critical applications so that critical users can continue to access them during an attack.

#### 2.2 HACQIT System Model

HACQIT is not designed to be a general-purpose server connected to the internet. All connections to the system are through authenticated Virtual Private Networks (VPNs). We assume the system is correctly configured, including patching all known vulnerabilities. An attacker can be any agent other than the trusted users or HACQIT system administrators, and they do not have physical access to the HACQIT cluster. An attacker may take over a trusted user’s machine and launch attacks against HACQIT.

A failure occurs when observed behavior deviates from specified behavior. For HACQIT, we are concerned with software failures, which can be either repeatable or non-repeatable. Repeatable failures are caused by attacks exploiting a vulnerability, while non-repeatable failures may be due to intermittent or transient faults. We treat all inputs causing repeated failures the same, but we allow retries for intermittent failures.

To meet these requirements, most designers would make the cluster highly intrusion-resistant, implement specification-based monitoring, and use fault-tolerant mechanisms such as redundancy and failover. Our design includes these approaches and additional ones.

Figure 2 summarizes our design. The HACQIT cluster consists of at least four computers: a gateway computer with a commercial firewall and additional infrastructure for failover and attack blocking; two or more servers for critical applications (one primary, one backup, and one or more online spares); and an Out-Of-Band (OOB) machine running overall monitoring, control, and fault diagnosis software. The machines are connected by two separate LANs.

#### 2.3 HACQIT Software Architecture

The simplified software architecture (Figure 3) implements a specification-based approach to monitoring and control for intrusion detection and defense in depth. It uses software wrappers, application and host monitors, and response monitors to ensure component behavior does not deviate from allowed. The system operates in a protect-detect-respond cycle, combining strong protections and isolation with host and application-based fault, error, and failure detection mechanisms. Deviations from specified behavior trigger failover, integrity testing, and other responses.