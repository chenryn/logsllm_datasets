to be protected may belie the use of diversity.
This project is the first attempt to build a prototype system that combines intrusion
detection,  responses  that  block  attacks,  failover  to  remove  compromised  elements,
learning to create rules for blocking future occurrences of attack and generalization to
block even significant variants.
1.1   Background
Commercial organizations, the Government and even the military have reduced their
cost  and,  arguably,  improved  their  reliability  through  the  increased  use  of  COTS
software  and  hardware,  even  for  critical  applications.  Unfortunately,  they  have  also
increased  their  vulnerability  to  well  resourced  adversaries  who  want  to  do  serious
damage  to  critical  infrastructure,  steal  information,  and  disrupt  services.  Most
researchers  are  saying  that  it  is  essentially  impossible  to  build  large  scale  software
without faults and it is certainly impossible to prove such software contains no faults
[1], [2], and [3]. Moreover, as two damaging recent  attacks  (Code  Red 1  and  Code
Red  2,  which  exploited  a  known  buffer  overflow  vulnerability  in  Microsoft’s  web
server,  Internet  Information  Server)  have  amply  demonstrated,  faults  are  being
exploited long after patches are available to fix the problems. This is not to say that
software  security  cannot  be  improved  but  it  is  important  to  begin  examining  other
approaches to security. 
The US Defense Advanced Research Project Agency (DARPA) began a program
in 2000 to apply fault tolerance techniques to building intrusion tolerance systems. As
part of this effort, a number of organizations, including Teknowledge Corporation and
University of California (Davis), are developing intrusion tolerant clusters. 
The  specific  goal  of  our  project  (Hierarchical  Adaptive  Control  of  QoS  for
Intrusion  Tolerance  or  HACQIT)  is  to  provide  continued  COTS  or  GOTS-based
application  services  in  the  face  of  multiple  hours  of  aggressive  cyber-attacks  by  a
well-resourced adversary. This focus on COTS/GOTS applications means we do not
have access to source code so the protections must be added around or to the binaries.
We  recognize  that  our  defense  cannot  be  perfect  so  two  implied  goals  include  (1)
significantly  increasing  the  adversary  work  factor  for  successful  attacks  and  (2)
significantly increasing the ratio of the attacker’s work factor to generate successful
attacks  to  the  defender’s  work  factor  for  responding  to  successful  attacks.  We  also
recognize  that  our  system  is  expensive  in  terms  of  processing  and  overhead  so  we
160
J.E. Just et al.
have  modularized  the  components  so  that  the  amount  of  protection  can  be  varied
according to the need and budgets available.
1.2   Organization 
The  HACQIT  project,  its  architecture,  and  basic  intrusion  tolerant  design  approach
have been described in other articles [4, 5, 6]. The next section will provide enough
information  on  HACQIT  to  enable  the  reader  to  understand  the  context,  uses,  and
limitations  of  the  learning  and  generalization  as  it  exists  today.  The  remaining
sections  will  summarize  the  problem,  the  learning  and  generalization  approach,  its
current implementation, test results, and conclusions / next steps.
2   The HACQIT Context
2.1   The General Problem and System Model
Formal environment and attack assumptions have been made to specify the research
problem as developing dependability in the face of network-based cyber attacks rather
than  dealing  with  denial  of  service  attacks,  insiders,  Trojans  and  other  lifecycle
attacks. These assumptions include:
·  Users and attackers interact with services via their computers and the LAN. There
are no other hidden interactions.
·  The LAN is reliable and cannot be flooded, i.e., denials of service (DoS) attacks
against LAN bandwidth are beyond the scope of the research. The LAN is the only
communication medium between users and services. DoS attacks directly against
critical users or firewalls are also beyond the scope of the research.
·  Critical users and the system administrators for the cluster are trusted. No hosts on
the external LAN are trusted.
·  The protected cluster hardware and software are free of Trojans and trapdoors  at
startup and have been patched against known vulnerabilities. Attackers do not have
and have not had physical access to the cluster hardware or software. This prevents
planting Trojan software/hardware and trapdoors through lifecycle attacks. 
·  Other unknown vulnerabilities exist throughout the system. 
Figure  1  describes  the  “formal”  system  model  of  the  problem  and  design
environment  that  is  being  addressed  by  intrusion  tolerant  systems.  The  goal  is  to
protect critical application(s) so that critical users can continue to access them while
under attack. 
2.2   HACQIT System Model
HACQIT  is  not  designed  to  be  a  general-purpose  server  connected  to  the  Internet.
Anonymous  users  are  not  allowed.  All  connections  to  the  system  are  through
authenticated  Virtual  Private  Networks.  We  assume  that  the  configuration  of  the
system has been done correctly, which includes patching of all known vulnerabilities. 
Learning Unknown Attacks – A Start
161
An  attacker  can  be  any  agent  other  than  the  trusted  users  or  HACQIT  system
administrators. Attackers do not have physical access to HACQIT cluster. An attacker
may take over a trusted user’s machine and launch attacks against HACQIT.
Requirements 
Imposed on Critical 
User Portion of 
System Environment
User N
User  
A
= Attacker
= Attacker
= Attacker
Key
Key
User
User
= Critical User
= Critical User
q
LAN
User K
o
Server r
System Environment
User
User
User
= Non-Critical User
= Non-Critical User
= Non-Critical User
Protected cluster 
= Critical Service
= Critical Service
Server
Server = Critical Service
Server
Server
Server
Server
=  Non-Critical 
=  Non-Critical 
=  Non-Critical 
Service
Service
Service
running applications 
that provide critical 
services
Intrusion Tolerant 
System
Fig. 1.  Intrusion Tolerant System Environment
A  failure  occurs  when  observed  behavior  deviates  from  specified  behavior.  For
HACQIT,  we  are  concerned  with  software  failures.  Software  failures  are  either
repeatable or not. The causes of repeatable failures would include attacks (maliciously
devised  inputs)  that  exploit  the  some  vulnerability  (bug)  in  one  of  our  software
components. Non-repeatable failures may be caused by intermittent or transient faults.
We cannot divine intent, so all inputs that cause repeated failures are treated the same.
On the other hand, we recognize that the system may fail intermittently from certain
inputs, in which case we allow retry.
To  develop  a  system  that  meets  these  requirements,  most  designers  would  make
the  cluster  very  intrusion  resistant,  implement  some  type  of  specification-based
monitoring  of  server  and  application  behavior  and  use  some  set  of  fault  tolerant
mechanisms (e.g., redundancy and failover, process pairs, triple modular redundancy,
n-version  programming)  for  the  servers  to  enable  rapid  failover  and  recovery.  Our
design employs these approaches and a few additional ones.
Our  design  is  summarized  in  Figure  2.  The  HACQIT  cluster  consists  of  at  least
four  computers:  a  gateway  computer  running  a  commercial  firewall  and  additional
infrastructure  for  failover  and  attack  blocking;  two  or  more  servers  of  critical
applications (one primary, one backup, and one of more on-line spares); and an Out-
Of-Band  (OOB)  machine  running  the  overall  monitoring  and  control  and  fault
diagnosis software. The machines in the cluster are connected by two separate LANs. 
162
J.E. Just et al.
Intrusion resistant architecture 
Intrusion resistant architecture 
with strong separation boundaries
with strong separation boundaries
Process pair (hot spare) redundancy and failover
Multiple response types
– Failover
– Randomly rejuvenate
– Block attacker
– Filter out bad requests (e.g., known attacks)
Behavior 
specification 
approach to 
recognizing errors 
and intrusions –
defend in depth
Identify, learn and 
block new attacks
Generalize new 
attack blocking 
filters
Fig. 2.  Cluster design with learning components
HACQIT uses primary and backup servers running as a process pair, but they are
unlike ordinary primary and  backup  servers  for  fault  tolerance.  Only  the  primary  is
connected  to  users.  The  virtual  private  network  (VPN),  firewall,  gateway,  and  IP
switch  together  ensure  that  users  only  talk  to  the  critical  application  through  the
specified port on the primary server and vice versa. The primary and backup servers
are not on the same LAN; they are isolated by the OOB computer, so no propagation
of  faults,  for  example  by  a  automated  worm  or  remote  attacker,  directly  from  the
primary to the backup, is possible. 
The  potential  for  propagation  from  the  primary  to  the  Controller  is  limited  by
sharply  constraining  and  monitoring  the  services  and  protocols  by  which  the
Controller communicates with the primary. When a failure is detected on the primary
or backup server (possibly caused by an attack), it is taken off line. Continued service
to the end user is provided by the remaining server of the process pair. A new process
pair  is  formed  with  the  on-line  spare  (if  available),  and  both  attack  diagnosis  and
recovery  of  the  failed  server  begins.  Depending  on  policy,  the  Controller  can  also
block future requests from the machine suspected of launching the attack.
The current critical application is a web-enabled message board that is duplicated
on both the Microsoft IIS web server and the Apache web server machines. It contains
dynamic  data  so  HACQIT  must  maintain  consistent  state  across  the  hosts  and
resynchronize  data  (checkpoint  and  restore)  when  failover  and  new  process  pair
formation occurs. The  spare  server  does  not  have  current  state  when  it  is  promoted
into the process pair so a restore process is necessary to synchronize it.
Learning Unknown Attacks – A Start
163
2.3   HACQIT Software Architecture
The simplified software architecture is shown in Figure 3. The software implements a
specification-based approach [7, 8] to monitoring and control for intrusion detection
as  well  as  defense  in  depth.  It  uses  software  wrappers  [9],  application  and  host
monitors, response monitors, etc. to ensure that component behavior does not deviate
from allowed. It does this in a protect-detect-respond cycle. Strong protections (and
isolation)  are  melded  with  host  and  application-based  fault,  error,  and  failure
detection mechanisms in a defense in depth design. Deviation from specified behavior
may  be  indicative  of  an  attack  and  thus,  when  such  an  alert  is  received,  it  triggers
failover, integrity testing and other responses. 
Primary      
Primary      
Tripwire
Tripwire
Enclave 
LAN & 
WAN
Connection 
Connection 
Connection 
Manager
Manager
Manager
Protection 
Protection 
Protection 
Wrapper
Wrapper
Wrapper
IIS
IIS
IIS
SNORT
SNORT
Host
Host
Firewall
Firewall
IP Switch
IP Switch
FW Co ntroller
FW Co ntroller
Backup    
Backup    
Tripwire
Tripwire
Connection 
Connection 
Connection 
Manager
Manager
Manager
Protection 
Protection 
Protection 
Wrapper
Wrapper
Wrapper
Apache
Apache
Apache
SNORT
SNORT
Host
Host
Application
Application
Monitor
Monitor
Application
Application
Monitor
Monitor
Monitor
Monitor
Monitor
Monitor
Policy
Policy
Server
Server
Policy
Policy
Editor
Editor
MAC
MAC
Operator
Operator
Display
Display
Buffer &
Buffer &
Log
Log
Out-of-Band Controller
Out-of-Band Controller