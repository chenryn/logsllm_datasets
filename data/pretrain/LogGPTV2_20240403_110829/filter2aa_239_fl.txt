    private async void OnQuerySubmitted(AutoSuggestBox sender,
      AutoSuggestBoxQuerySubmittedEventArgs args)
    {
      string message = $"query: {args.QueryText
}";
      if (args.ChosenSuggestion
 ! = null)
      {
        message += $" suggestion: {args.ChosenSuggestion}";
      }
      var dlg = new MessageDialog(message);
      await dlg.ShowAsync();
    }
32.6.3 Inking
使用笔和墨水很容易通过UWP应用程序与新InkCanvas控件获得支持。这个控件支持
使用钢笔、触摸屏和鼠标进行绘图，它还支持检索所有创建的笔触，允许保存这些信息。
为了支持绘图，只需要添加一个InkCanvas控件（代码文件
ControlsSamples/Views/InkSample. xaml）：
默认情况下，InkCanvas控件配置为支持钢笔。还可以定义它，通过设置InkPresenter
的InputDevicesType属性来支持鼠标和触摸屏（代码文件ControlsSamples 
/ 
Views 
/
InkSample.xaml.cs）：
    public InkSample()
    {
      this.InitializeComponent();
      inkCanvas.InkPresenter.InputDeviceTypes = CoreInputDeviceTypes.Mouse |
        CoreInputDeviceTypes.Touch | CoreInputDeviceTypes.Pen;
      ColorSelection = new ColorSelection(inkCanvas);
    }
    public ColorSelection ColorSelection { get; }
有了InkCanvas，就可以使用输入设备，用黑笔创建相同的图。本章前面定义命令
时，把几个AppBarToggleButton控件添加到CommandBar中。现在这些按钮用来控制墨水
的颜色。ColorSelection类是一个辅助类，绑定了AppBarToggleButton控件的选项。Red、
Green和Blue属性由AppBarToggleButton控件的IsChecked属性绑定。ColorSelection的构造
函数接收InkCanvas的实例。这样，InkCanvas控件就可以用来修改绘图特性（代码文件
ControlsSamples/Utilities/ColorSelection.cs）：
      public class ColorSelection : BindableBase
      {
        public ColorSelection(InkCanvas inkCanvas)
        {
          _inkCanvas = inkCanvas;
          Red = false;
          Green = false;
          Blue = false;
        }
        private InkCanvas _inkCanvas;
        private bool? _red;
        public bool? Red
        {
          get { return _red; }
          set { SetColor(ref _red, value); }
        }
        private bool? _green;
        public bool? Green
        {
          get { return _green; }
          set { SetColor(ref _green, value); }
        }
        private bool? _blue;
        public bool? Blue
        {
          get { return _blue; }
          set { SetColor(ref _blue, value); }
        }
        // etc.
      }
墨水颜色的变化以及笔的形式和大小在SetColor方法中处理。InkCanvas的现有绘图特
性可以使用CopyDefaultDrawingAttributes和InkPresenter检索。
UpdateDefaultDrawingAttributes方法设置InkCanvas的绘图特性。ColorSelection类的Red、
Green和Blue属性用来创建颜色（代码文件ControlsSamples 
/ 
Utilities 
/
ColorSelection.cs）：
        public class ColorSelection : BindableBase
        {
          // etc.
          public void SetColor(ref bool? item, bool? value)
          {
            SetProperty(ref item, value);
            InkDrawingAttributes defaultAttributes =
            _inkCanvas.InkPresenter.CopyDefaultDrawingAttributes();
            defaultAttributes.PenTip = PenTipShape.Rectangle;
            defaultAttributes.Size = new Size(3, 3);
            defaultAttributes.Color = new Windows.UI.Color()
            {
            A = 255,
            R = Red == true ? (byte)0xff : (byte)0,
            G = Green == true ? (byte)0xff : (byte)0,
            B = Blue == true ? (byte)0xff : (byte)0
            };
            _inkCanvas.InkPresenter.UpdateDefaultDrawingAttributes(
            defaultAttributes);
          }
        }
运行应用程序时，如图32-29所示，很容易使用钢笔创建一个图形。如果没有笔，也
可以在触摸设备上使用手指或使用鼠标，因为已经相应地配置了InputDeviceTypes属性。
图32-29
32.6.4 读写笔触的选择器
如前所述，InkCanvas控件还支持访问创建好的笔触。这些笔触在下面的示例中使
用，并存储在一个文件中。使用FileSavePicker选中文件。单击之前创建的Save
AppBarButton时，调用方法OnSave。FileSavePicker是SaveFileDialog的UWP变体。在
Windows 8中，这个选择器是满屏显示，但现在在UWP中，它可以包含在小窗口中，这个
选择器也发生了变化。
首先，配置FileSavePicker，给它指定开始位置、文件类型扩展名和文件名。至少需
要添加一个文件类型选项，以允许用户选择文件类型。调用方法PickSaveFileAsync，要求
用户选择一个文件。这个文件通过调用OpenTransactedWriteAsync方法打开来写入事务。
InkCanvas的笔触存储在InkPresenter的StrokeContainer中。使用SaveAsync方法，笔触可直
接保存到流中（代码文件ControlsSamples / Views / InkSample.xaml.cs）：
    private const string FileTypeExtension = ".strokes";
    public async void OnSave()
    {
      var picker = new FileSavePicker
      {
        SuggestedStartLocation = PickerLocationId.PicturesLibrary,
        DefaultFileExtension = FileTypeExtension,
        SuggestedFileName = "sample"
      };
      picker.FileTypeChoices.Add("Stroke File", new List()
      { FileTypeExtension });
      StorageFile file = await picker.PickSaveFileAsync();
      if (file ! = null)
      {
        using (StorageStreamTransaction tx = await file.OpenTransactedWriteAsync(
))
        {
        await inkCanvas.InkPresenter.StrokeContainer.SaveAsync
(tx.Stream);
        await tx.CommitAsync();
        }
      }
    }
  注意： 使用FileOpenPicker和FileSavePicker读写流，参见第23章。
运行应用程序时，可以打开FileSavePicker，如图32-30所示。
图32-30
为了加载文件，要使用FileOpenPicker、StrokeContainer和LoadAsync方法：
    public async void OnLoad()
    {
      var picker = new FileOpenPicker
      {
        SuggestedStartLocation = PickerLocationId.PicturesLibrary
      };
      picker.FileTypeFilter.Add(FileTypeExtension);
      StorageFile file = await picker.PickSingleFileAsync();
      if (file ! = null)
      {
        using (var stream = await file.OpenReadAsync())
        {
          await inkCanvas.InkPresenter.StrokeContainer.LoadAsync
(stream);
        }
      }
    }
  注意： 下一章讨论了更多的控件，阐述了协定和传感器。Map控件最适合用
于全球定位系统（GPS），这个控件参见第33章。
32.7 小结
本章介绍了编写UWP应用程序的许多不同方面。XAML非常类似于编写WPF应用程
序，如前一章所述。
本章讨论了如何处理不同的屏幕尺寸。探讨了汉堡按钮如何与SplitView一起，提供
更大或更小的导航菜单，RelativePanel如何与自适应触发器一起工作。还简述了XAML视
图。
我们了解了如何使用延迟加载和已编译的绑定来改进性能。也介绍了新的控件，比如
AutoSuggest控件和InkCanvas控件。
第33章提供了Windows应用程序的更多信息，包括协定和传感器，更多的控件（如
Map控件）和后台服务。
第33章
高级Windows应用程序
本章要点
● 应用程序生命周期
● 共享数据
● 使用应用程序服务
● 创建一个后台任务
● 使用相机
● 获取地理位置信息
● 使用MapControl
● 使用传感器
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章的代码只包含一个大示例，它展示了本章的各个方面：
● 应用程序生命周期示例（AppLifetime Sample）
● 共享示例（Sharing Samples）
● 应用程序服务（AppServices）
● 相机示例（Camera Sample）
● 地图示例（Map Sample）
● 传感器示例（Sensor Sample）
● 旋转的钢珠（Rolling Marble）
33.1 概述
前一章介绍了Universal Windows Platform（UWP）应用程序的用户界面（UI）元素。
本章继续讨论UWP应用程序特定的几个方面，UWP应用程序的生命周期管理不同于桌面
应用程序，用共享协定创建共享源和目标应用程序，在应用程序之间共享数据。使用许多
不同的设备和传感器，例如用相机拍照、录制视频、获得用户的位置信息、使用几个传感
器（例如加速计和倾斜计）获得用户如何移动设备的信息。
下面先讨论Windows应用程序的生命周期，它非常不同于桌面应用程序的生命周期。
33.2 应用程序的生命周期
Windows 8为应用程序引入了一个新的生命周期，完全不同于桌面应用程序的生命周
期。在Windows 8.1中有些变化，在Windows 10中又有一些变化。如果使用Windows10和
平板电脑模式，应用程序的生命周期与桌面模式是不同的。在平板电脑模式中，应用程序
通常全屏显示。分离键盘（对于平板电脑设备，如Microsoft Surface），或在Action Center
中使用Tablet 
Mode按钮，可以自动切换到平板模式。在平板模式下运行应用程序时，如
果应用程序进入后台（用户切换到另一个应用程序），就会暂停，它不会得到任何更多的
CPU利用率。这样，应用程序不消耗任何电力。应用程序在后台时，只使用内存，一旦用
户切换到这个应用程序，应用程序就再次激活。
当内存资源短缺时，Windows可以终止暂停应用程序的进程，从而终止该应用程序。
应用程序不会收到任何消息，所以不能对此事件做出反应。因此，应用程序应该在进入暂
停模式前做一些处理工作，保存其状态。等到应用程序终止时进行处理就晚了。
当收到暂停事件时，应用程序应该将其状态存储在磁盘上。如果再次启动应用程序，
应用程序可以显示给用户，好像它从未终止。只需要把页面堆栈的信息存储到用户退出的
页面上，恢复页面堆栈，并把字段初始化为用户输入的数据，就允许用户返回。
本节的示例应用程序ApplicationLifetimeSample就完成这个任务。在这个程序中，允
许在多个页面之间的导航，可以输入状态。应用程序暂停时，存储页面堆栈和状态，在启
动应用程序时恢复它们。
33.3 应用程序的执行状态
应用程序的状态使用ApplicationExecutionState枚举定义。该枚举定义了NotRunning、
Running、Suspended、Terminated和ClosedByUser状态。应用程序需要知道并存储自己的
状态，因为用户在返回应用程序时希望继续原来的操作。
在App类的OnLaunched方法中，可以使用LauchActivatedEventArgs参数的
PreviousExecutionState属性获取应用程序的前一个执行状态。如果应用程序是在安装后第
一次启动，在重启计算机后启动，或者用户上一次在任务管理器中终止了其进程，那么该
应用程序的前一个状态是NotRunning。如果用户单击应用程序的图标时应用程序已经激
活，或者应用程序通过某个激活契约激活，则其前一个执行状态为Running。如果应用程
序被暂停，那么激活它时PreviousExecutionState属性会返回Suspended。一般来说，在这种
情况中不需要执行什么特殊操作。因为状态仍在内存中可用。在暂停状态下，应用程序不
使用CPU循环，也没有磁盘访问。
  注意： 应用程序可以实现一个或多个协定，然后用其中一个协定激活应用程
序。这类协定的一个例子是共享。使用这个协定，用户可以共享另一个应用程序中的
一些数据，并使用它作为共享目标，启动一个UWP应用程序。实现共享协定参见本章
的“共享数据”一节。
在页面之间导航
展示Windows应用程序生命周期的示例应用程序（ApplicationLifetimeSample）从
Blank App模板开始。创建项目后，添加页面Page1和Page2，实现页面之间的导航。
在MainPage中，添加两个按钮控件来导航Page2和Page1，再添加两个文本框控件，在
导航时传递数据（代码文件ApplicationLifetimeSample / MainPage.xaml）：
后台代码文件包含事件处理程序、Page1和Page2的导航代码，以及参数的属性（代码
文件ApplicationLifetimeSample / MainPage.xaml.cs）：
    public void GotoPage1()
    {
      Frame.Navigate(typeof(Page1), Parameter1);
    }
    public string Parameter1 { get; set; }
    public void GotoPage2()
    {
      Frame.Navigate(typeof(Page2), Parameter2);
    }
    public string Parameter2 { get; set; }
Page1的UI元素显示在导航到这个页面时接收到的数据，允许用户导航到Page2的按
钮，以及允许用户输入一些状态信息的一个文本框，应用程序终止时会保存这些状态信息
（代码文件Application LifetimeSample / Page1.xaml）：
类似于MainPage, Page1的导航代码为导航时传递的数据定义了一个自动实现的属性，
和实现导航到Page2的一个事件处理程序（代码文件ApplicationLifetimeSample 
/
Page1.xaml.cs）：
    public void GotoPage2()
    {
      Frame.Navigate(typeof(Page2), Parameter1);
    }
    public string Parameter1 { get; set; }
在后台代码文件中，导航参数在OnNavigatedTo方法的重写版本中接收。接收到的参
数分配给自动实现属性ReceivedContent（代码文件ApplicationLifetimeSample 
/
Page1.xaml.cs）：
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
      base.OnNavigatedTo(e);
      //...
      ReceivedContent = e.Parameter? .ToString() ? ? string.Empty;
      Bindings.Update();
    }
    public string ReceivedContent { get; private set; }
在导航的实现代码中，Page2非常类似于Page1，所以这里不重复它的实现。
使用第32章介绍的系统后退按钮，这里，后退按钮的可见性和处理程序在类