### 家庭网络与 Microsoft SQL Server

- **Microsoft\SqlServer**：SQL Server 数据库服务器。
- **MSAPPS11**：Office 程序。
- **Policy**：系统策略相关数据。
- **RSOP**：安全相关的管理信息。
- **WMI**：Windows Management Instrumentation，用于管理和监控 Windows 操作系统。
- **WDM 提供器**：设备驱动程序模型提供器。
- **\MS_XXX**：与语言（locale）相关的信息，例如 `MS_409` 代表英语相关信息。

### 连接命名空间

在连接对话框的编辑框中，可以输入要连接的命名空间，也可以通过点击下拉框旁边的按钮来浏览并选择命名空间（如图 31-4 所示）。

![图 31-4 浏览命名空间](image-url)

连接对话框的默认值是 `root\CIMV2`，这是 CIM 类所在的命名空间，包含了微软设计的从 CIM 类派生出的一些类（以 `Win32` 或 `MSFT` 为 Schema 名）。图 31-5 显示了 CIM Studio 的主界面。

![图 31-5 CIM Studio](image-url)

#### 主界面说明

- **左侧窗口区域**：称为类浏览器（Class Explorer），用于查找各个类。树控件很好地展示了各个类之间的继承关系。例如，选中的 `Win32_BIOS` 类是从以下类派生而来的：
  - `CIM_SoftwareElement`
  - `CIM_LogicalElement`
  - `CIM_ManagedSystemElement`

  可以通过快捷菜单或命名空间名称旁的按钮来查找或删除类。

- **右侧窗口区域**：称为类观察器（Class Viewer），用于显示左侧选中类的详细信息，包括属性、方法和关联。通过按钮区域的按钮（从左至右）可以创建类的实例、删除类实例、切换视图、保存编辑内容、显示类的所有实例、设置显示选项、执行 WQL 查询或显示当前类的描述信息。

  类观察器上方的三个按钮分别用于启动创建 MOF 向导、编译 MOF 向导和打开 CIM Studio 的帮助文件。

### 自定义类

尽管 CIM Schema 中已经定义了数百个类，但对于具体的管理任务，通常需要根据具体对象和问题定义自己的类和 Schema。下面通过一个简单的例子演示如何使用 MOF 语言设计新的类。

#### 示例：优盘（USB Disk）设备类

优盘是一种常见的移动存储设备。CIM 中定义了 `CIM_USBDevice` 类来描述 USB 设备，但没有专门的 USB Disk 类。因此，可以从 `CIM_USBDevice` 类派生出一个新的类来描述优盘设备。清单 31-2 展示了实现这一设想的 MOF 代码。

```mof
// AdvDbg_UsbDisk.MOF
// A sample used to demonstrate inheritance from CIM class.

#pragma classflags("forceupdate")
#pragma namespace ("\\\\.\\Root\\CIMV2")

class AdvDbg_UsbDisk : CIM_USBDevice {
    [write(true), Description("The OS this disk can boot to."): ToSubClass]
    string BootableOS;

    [read(true), Description("Capacity of this disk in bytes."): ToSubClass]
    uint32 Capacity;

    [read, key, MaxLen(256), Override("DeviceID"): ToSubClass]
    string DeviceID;

    [Description("Format the disk, all data will be lost.")]
    boolean Format([in] boolean quick);
};

instance of AdvDbg_UsbDisk {
    DeviceId = "USB_ADVDBG2006";
    Name = "USB Disk for AdvDbg";
    Caption = "USB Disk";
    BootableOS = "DOS70";
    Capacity = 1288888;
};
```

#### 代码解释

- **第 4 行**：`#pragma classflags("forceupdate")` 是编译器指令，表示即使存在冲突的子类，也要强制更新这个类的定义。
- **第 5 行**：指定命名空间 `\\\\.\\Root\\CIMV2`。
- **第 6 行**：声明了一个新的类 `AdvDbg_UsbDisk`，继承自 `CIM_USBDevice`。
- **第 7 到 16 行**：类定义，包含属性和方法。
  - **第 9 行**：`BootableOS` 属性，可写，描述该磁盘可以引导的操作系统。
  - **第 11 行**：`Capacity` 属性，只读，描述磁盘容量（字节）。
  - **第 13 行**：`DeviceID` 属性，键属性，最大长度为 256 个字符，覆盖基类中的 `DeviceID` 属性。
  - **第 15 行**：`Format` 方法，格式化磁盘，所有数据将丢失。
- **第 17 到 24 行**：定义了 `AdvDbg_UsbDisk` 类的一个实例，指定了属性值。

#### 编译 MOF 文件

使用 `mofcomp` 程序编译 MOF 文件。`mofcomp.exe` 是一个命令行程序，位于 `c:\system32\wbem` 目录中。打开命令行窗口，将该路径添加到 PATH 环境变量中，然后转到 MOF 文件所在的目录，输入 `mofcomp advdbg_usbdisk.mof` 即可。

成功后，再次打开 CIM Studio，连接到 `root\CimV2` 命名空间，就可以找到刚刚定义的 `AdvDbg_UsbDisk` 类，并查看其实例（如图 31-6 所示）。

![图 31-6 观察我们自己定义的 AdvDbg_UsbDisk 类和实例](image-url)

### WMI 架构和基础构件

WMI 是 WBEM 标准在 Windows 系统中的应用和实现，已成为操作系统的基本部件，为系统中的其他组件提供 WBEM 支持和服务。下面我们来看一下 WMI 的基本架构。

#### WMI 架构

WMI 系统由以下几个部分组成（参见图 31-7）：

- **受管对象（Managed Objects）**：即要管理的目标对象，使用 WMI 的目的就是获取这些对象的信息或配置它们的行为。
- **WMI 提供器（WMI Providers）**：按照 WMI 标准编写的软件组件，代表受管对象与 WMI 管理器交互，提供数据或执行操作。WMI 提供器隐藏了各种受管对象的差异，使 WMI 管理器可以统一查询和管理受管对象。
- **WMI 基础构件（WMI Infrastructure）**：包括存储对象信息的数据库和实现 WMI 核心功能的对象管理器。WMI 使用 CIM 标准来描述和管理受管对象，因此 WMI 的数据库和对象管理器被命名为 CIM 数据仓库（CIM Repository）和 CIM 对象管理器（CIM Object Manager，简称 CIMOM）。
- **WMI 编程接口（API）**：WMI 提供了几种形式的 API 接口，以方便不同类型的 WMI 应用使用 WMI 功能，例如 C/C++ 函数形式（DLL+Lib+头文件）、VB 和脚本语言使用的 ActiveX 控件形式，以及通过 ODBC 访问的数据库形式（ODBC Adaptor）。
- **WMI 应用程序（WMI Applications）**：通过 WMI API 使用 WMI 服务的各种工具和应用程序。例如 Windows 事件查看器程序和各种实用 WMI 的 Windows 脚本。因为从数据流向角度看，WMI 应用程序是消耗 WMI 提供器所提供的信息的，所以有时又被称为 WMI 消耗器（WMI Consumer）。

#### WMI 工作目录和文件

默认情况下，WMI 的工作目录位于 Windows 系统目录下的 `system32\wbem` 下（参见图 31-8）。WBEM 目录下保存了很多 WMI 的程序文件（EXE 和 DLL），还有 COM 类型库文件（TLB）和一部分 CIM 类定义文件（MOF 和 MFL）。

- **Logs 子目录**：用于存储 WMI 日志文件。
- **AutoRecovery 子目录**：保存了可以自动恢复的类的 MOF 文件的备份。
- **Repository 子目录**：存储 WMI 数据仓库文件的地方。

WMI 将类和对象等信息存储在 WMI 数据仓库中。实现 WMI 数据仓库的文件被保存在系统目录下的 `wbem\Repository\FS` 目录下（如图 31-8 所示）。

![图 31-8 组成 WMI 数据仓库的各个文件](image-url)

其中最重要的文件是 `Objects.DATA`，用于存放数据，其他几个是索引和映射文件。可以使用 `winmgmt` 程序对 WMI 数据仓库进行备份。例如，输入以下命令可以将 WMI 数据仓库的所有数据备份到一个文件中：

```sh
winmgmt /backup c:\windows\system32\wbem\aug_bakup.data
```

使用 `/restore` 开关可以恢复 WMI 数据仓库。键入 `winmgmt /?` 可以得到简单的帮助信息。

`system32\wbem` 目录下的 `repdrvfs.dll` 是管理和维护 WMI 数据仓库的主要模块，我们将在下面详细介绍。

#### WMI 程序文件

了解 WMI 的程序文件有助于从文件层次理解 WMI 的架构层次和模块组织。WMI 的大多数程序文件都位于 Windows 系统目录下的 `system32\wbem` 下。表 31-2 列出了大多数 WMI 程序文件的名称和主要功能。

| 文件名         | 简介                                                         |
| -------------- | ------------------------------------------------------------ |
| wbemcore.dll   | WMI 的核心模块，包括 CIM 对象管理器等重要基础设施。          |
| cimwin32.dll   | WMI 的 Win32 提供器，内部包含了很多重要的 Win32 类的实现。    |
| wmipiprt.dll   | IP 路由事件（IP Route Event）提供器。                        |
| wmipdskq.dll   | 磁盘配额（Disk Quota Volume）提供器。                       |
| wmipcima.dll   | WBEM Framework Instance Provider CIMA。                     |
| Wbemprox.dll   | WBEM 代理，供 WMI 应用程序连接 WMI 服务，包含了 IWbemLocator 接口的实现（Clocator 类）。 |
| Wbemperf.dll   | 性能计数器（NT5 Base Perf）提供器。                          |
| Wmipicmp.dll   | Ping 提供器，ICMP 是 Internet Control Message Protocol 的缩写。 |
| Stdprov.dll    | PerfMon 和注册表提供器。                                     |
| Wbemdisp.dll   | 包含了供脚本语言使用的各种 ActiveX 控件的实现。              |
| Wmiprov.dll    | WDM 提供器（实例、事件和 HiPerf）。                           |
| Wmiutils.dll   | 解析和执行 WQL 查询的 COM 组件。                             |
| Wbemads.dll    | ADSI 扩展。                                                  |

希望这些优化后的文本能够更清晰、连贯和专业地传达所需的信息。