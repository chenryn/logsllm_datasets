家庭网络 
Microsoft\SqlServer 
SQL Server 数据库服务器 
MSAPPS11 
Office 程序 
Policy 
系统策略有关的数据 
RSOP 
安全有关的管理信息 
WMI 
WDM 提供器 
\MS_XXX 
语言（locale）有关的信息，例如 MS_409 是英语有关的信息 
可以在连接对话框的编辑框中输入要连接到的命名空间，也可以点击下拉框旁边的按
钮浏览要连接的命名空间（图 31-4）。 
图 31-4  浏览命名空间 
连接对话框的默认值是 root\CIMV2，这是 CIM 类所在的命名空间，也包含了微软的
设计的从 CIM 类派生出的一些类（以 Win32 或 MSFT 为 Schema 名）。图 31-5 显示了 CIM 
Studio 的主界面。 
《软件调试》补编 
- 78 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
图 31-5  CIM Studio 
左侧窗口区域被称为类浏览器（Class Explorer），用来查找各个类，树控件很好的表
现了各个类之间的继承关系。比如图中选中的 Win32_BIOS 类是从一个各个类派生而来
的： 
CIM_SoftwareElement:CIM_LogicalElement:CIM_ManagedSystemElement 
可以通过快捷菜单或者命名空间名称旁的按钮来查找或者删除类。 
右侧窗口区域被称为类观察器（Class Viewer），用来显示左侧选中类的详细信息，包
括属性、方法、关联。通过按钮区域的按钮（从左至右）可以创建类的实例、删除类实例、
左右切换试图、保存编辑内容、显示类的所有实例、设置显示选项、执行 WQL（WMI Query 
Language，稍候介绍）查询、或者显示当前类的描述信息。 
类观察器上面的三个按钮可以分别用来启动创建 MOF 向导、编译 MOF 向导和 CIM 
Studio 的帮助文件。 
31.2.4  定义自己的类 
尽管 CIM Schema 中已经可以数百个类，但是对于某个具体的管理任务，大多时候还
是需要根据具体对象和问题定义自己的类和 Schema。下面便通过一个简单的例子来演示
如何使用 MOF 语言设计新的类。 
优盘（USB Disk）是近两三年流行起来的一种常见移动存储设备。在 CIM 中定义了
CIM_USBDevice 类来描述 USB 设备，但是没有设计 USB Disk 类。 于是我们很自然的想
到可以从 CIM_USBDevice 类派生出一个新的类来描述优盘设备。清单 31-2 所示的 MOF
代码实现了这一设想。 
清单 31-2  优盘（USB Disk）设备类 
1 
// AdvDbg_UsbDisk.MOF 
2 
// A sample used to demonstrate inheritance from CIM class. 
3 
4 
#pragma classflags("forceupdate") 
5 
#pragma namespace ("\\\\.\\Root\\CIMV2") 
6 
class AdvDbg_UsbDisk:CIM_USBDevice 
7 
{ 
8 
    [write (true), Description("The OS this disk can boot to."): ToSubClass] 
9 
    string BootableOS; 
10 
    [read(true), Description("Capacity of this disk in bytes."): ToSubClass ] 
11 
    uint32 Capacity; 
12 
    [read, key, MaxLen(256), Override("DeviceID"): ToSubClass] 
13 
    string DeviceID; 
14 
    [Description("Format the disk, all data will be lost.")] 
15 
    boolean Format([in] boolean quick); 
16 
}; 
17 
instance of AdvDbg_UsbDisk 
18 
{ 
19 
    DeviceId = "USB_ADVDBG2006";  
20 
    Name = "USB Disk for AdvDbg"; 
21 
    Caption = "USB Disk"; 
22 
    BootableOS = "DOS70"; 
23 
    Capacity = 1288888; 
24 
}; 
下面对上面代码中可能有些难以理解的地方作些说明。首先看第 4 行，与 C/C++程序
一 样 ， pragma 代 表 这 一 行 是 通 知 编 译 器 的 编 译 器 指 令 （ compiler directive ）。
classflags("forceupdate")的作用是如果强制更新这个类的定义，即使存在有冲突的子类。第
5 行是用来指定命名空间。 
第 6 行 声 明 了 一 个 新 的 类 AdvDbg_UsbDisk ，“ :CIM_USBDevice ” 表 示 继 承
《软件调试》补编 
- 79 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
CIM_USBDevice 类。7 到 16 行是类定义，9、11 和 13 行各定义了一个属性，15 行定义了
一个方法，8、10、12 和 14 行是修饰符（Property Qualifier）行。在 CIM 中，在定义类以
及类的属性和方法时都可以使用修饰符。修饰符以一对方括号包围起来，如果有多个，那
么以逗号相分隔。每个修饰符通常包括名称和取值两个部分，取值通常放在括号中，如果
没有括号则表示使用默认值（如 12 行中的 read）。以第 8 行为例，其中包含了两个修饰符： 
write(true)表示该属性可以被消耗器（consumer）所修改。 
Description("The OS this disk can boot to.") : ToSubClass 是更常见的一种修饰符，其值
是对属性的描述和说明，描述信息也会作为类定义的一部分编译并存储到 CIM 库
（CIM Repository）中。’: ToSubClass’被称为 Flavor，其含义是该修饰符会自动被应
用到子类，如果加上了 Restricted Flavor，那么该修饰符仅在当前类有效。除了
ToSubClass 和 Restricted，CIM 定义的 Flavor 还有 EnableOverride（允许该修饰符被子
类覆盖），DisableOverride（禁止该修饰符被子类覆盖）和 Translatable（该修饰符的值
是否可以用多种语言（locale）表示）。因为每个修饰符默认的 Flavor 中就包含
ToSubClass，所以这一行是否包含’: ToSubClass’是等价的。 
下面看一下第 12 行，其中包含了 4 个修饰符，key 的含义是将所修饰的属性作为键
（key）属性，这好比是数据表中的键字段。CIM 使用 Key 属性的值来判断实例的等价性。
Override("DeviceID")表示覆盖基类中的 DeviceID 属性，在基类中 DeviceID 不是键属性，
这是重新定义的原因。MaxLen(256)表示属性的最大长度是 256 个字符。 
第 15 行定义了一个方法，MOF 中区别方法和属性的唯一办法是看是否有小括号。 
第 17 到 24 行定义了 AdvDbg_UsbDisk 类的一个实例。“instance of”是关键字，后面
应该是一个非抽象类的名字。抽象类的表准是类的修饰符中包含了 abstract 修饰符。19 到
23 行为这个实例指定了属性值，值得注意的是 Name 和 Caption 都是基类中定义的属性。 
那么如何编译这个 MOF 文件呢？只要使用 mofcomp 程序就可以了。Mofcomp.exe 是
个命令行程序，位于 c:\\system32\wbem 目录中。打开一个命令行窗
口，将该路径加到 PATH 环境变量中后，转到 MOF 文件所在的目录，然后只要输入 mofcomp 
advdbg_usbdisk.mof 就可以了，在笔者的机器上，其输出如下： 
c:\dbg\author\code\chap31\mof>mofcomp advdbg_usbdisk.mof 
Microsoft (R) 32-bit MOF Compiler Version 5.1.2600.2180 
Copyright (c) Microsoft Corp. 1997-2001. All rights reserved. 
Parsing MOF file: advdbg_usbdisk.mof 
MOF file has been successfully parsed 
Storing data in the repository... 
Done! 
说是编译器，其实 mofcomp 不仅对 mof文件进行解析和检查，如果没有错误，mofcomp
还会将该类定义加到 CIM 库中，上面最后两行的提示就是 mofcomp 在向 CIM 库存储数据。 
以上操作成功后，再次打开 CIM Studio，连接到 root\CimV2 命名空间，就可以查找
到刚刚定义的 AdvDbg_UsbDisk 类了，点击右侧的显示类实例按钮还可以看到我们定义对
象实例（图 31-6）。 
《软件调试》补编 
- 80 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
图 31-6 观察我们自己定义的 AdvDbg_UsbDisk 类和实例 
31.3  WMI 的架构和基础构件 
WMI 是 WBEM 标准在 Windows 系统中的应用和实现。对于今天的 Windows 系统，
它已经成为作为操作系统的一个基本部件，为系统中的其它部件提供 WBEM 支持和服务。
下面我们先来看一下 WMI 的基本架构。 
31.3.1  WMI 的架构 
从架构角度来看，整个 WMI 系统由以下几个部分组成（参见图 31-1）： 
图 31-7  WMI 架构 
受管对象（Managed Objects）：即要管理的目标对象,使用 WMI 的目的就是获得这些
对象的信息或者配置它们的行为。 
WMI 提供器(WMI Providers)：按照 WMI 标准编写的软件组件，它代表受管对象与
WMI 管理器交互，向其提供数据或者执行其下达的操作。WMI 提供器隐藏了各种受
管对象的差异，使 WMI 管理器可以以统一的方式查询和管理受管对象。 
WMI 基础构件（WMI Infrastructure）：包括存储对象信息的数据库和实现 WMI 核心
功能的对象管理器。因为 WMI 使用 CIM（Common Information Model）标准来描述
和管理受管对象。因此，WMI 的数据库和对象管理器被命名为 CIM 数据仓库（CIM 
Repository）和 CIM 对象管理器（CIM Object Manager，简称 CIMOM）。 
WMI 编程接口（API）：WMI 提供了几种形式的 API 接口，以方便不同类型的 WMI
应用使用 WMI 功能，比如供 C/C++程序调用的函数形式（DLL+Lib+头文件），供 VB
和脚本语言调用 ActiveX 控件形式，和通过 ODBC 访问的数据库形式（ODBC 
Adaptor）。 
WMI 应用程序（WMI Applications）：即通过 WMI API 使用 WMI 服务的各种工具和
《软件调试》补编 
- 81 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
应用程序。比如 Windows 中的事件查看器程序，以及各种实用 WMI 的 Windows 脚本。
因为从数据流向角度看，WMI 应用程序是消耗 WMI 提供器所提供的信息的，所以有
时又被称为 WMI 消耗器（WMI Consumer）。 
从上面的架构图可以看出，WMI 是个由 WMI 提供器、WMI 消耗器和 WMI 基础构件
组成的一个复杂系统。用户是使用 WMI 应用程序（消耗器）来管理他们所关心的各种目
标对象（受管对象），WMI 基础构件好似一个枢纽为消耗器和提供器的信息交流提供通道。
换句话来讲，是 WMI 基础构件搭建了一个平台，使 WMI 应用程序可以利用这个平台找
到它要找的信息。下面我们就分别介绍一下支撑起这个平台的各个 WMI 基础构件。 
31.3.2  WMI 的工作目录和文件 
默认情况下，WMI 的工作目录位于 Windows 系统目录下的 system32\wbem 下（参见
图 31-8）。WBEM 目录下保存了很多 WMI 的程序文件（EXE 和 DLL），还有 COM 类型
库文件（TLB）和一部分 CIM 类定义文件（MOF 和 MFL）。 
WBEM 目录下还包含了几个子目录，Logs 子目录是用来存储 WMI 日志文件的，
AutoRecovery 子目录保存了可以自动恢复的类的 MOF 文件的备份。另一个重要的子目录
就是 Repository，它是存储 WMI 数据仓库文件的地方。 
WMI 数据仓库文件
数据仓库文件
数据仓库文件
数据仓库文件 
WMI 将类和对象等信息存储在 WMI 数据仓库中。实现 WMI 数据仓库的文件被保存
在系统目录下的 wbem\Repository\FS 目录下，如图 31-8 所示。 
图 31-8  组成 WMI 数据仓库的各个文件 
其中最重要的文件是 Objects.DATA，用于存放数据，其它几个是索引和映射文件。可
以使用 winmgmt 程序对 WMI 数据仓库进行备份。比如输入如下命令，便可以将 WMI 数
据仓库的所有数据备份到一个文件中。 
winmgmt /backup c:\windows\system32\wbem\aug_bakup.data 
使用/restore 开关可以恢复 WMI 数据仓库。键入 winmgmt /？可以得到简单的帮助信
息。 
system32\wbem 目录下的 repdrvfs.dll 是管理和维护 WMI 数据仓库的主要模块，我们
将在下面详细介绍。 
WMI 程序文件
程序文件
程序文件
程序文件 
了解 WMI 的程序文件有助于从文件层次理解 WMI 的架构层次和模块组织。WMI 的
大多数程序文件都位于 Windows 系统目录下的 system32\wbem 下。表 31-2 列出了大多数
WMI 程序文件的名称和主要功能。 
《软件调试》补编 
- 82 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
表 31-2  WMI 的程序文件 
文件名 
简介 
wbemcore.dll 
WMI 的核心模块，包括 CIM 对象管理器等重要基础设施。 
cimwin32.dll 
WMI 的 Win32 提供器，内部包含了很多重要 Win32 类的实现。 
wmipiprt.dll 
IP 路由事件（IP Route Event）提供器。 
wmipdskq.dll 
磁盘配额（Disk Quota Volume）提供器。 
wmipcima.dll 
WBEM Framework Instance Provider CIMA 
Wbemprox.dll 
WBEM 代理，供 WMI 应用程序连接 WMI 服务，包含了 IWbemLocator
接口的实现（Clocator 类）。 
Wbemperf.dll 
性能计数器（NT5 Base Perf）提供器。 
Wmipicmp.dll 
Ping 提供器，ICMP 是 Internet Control Message Protocol 的缩写。 
Stdprov.dll 
PerfMon 和注册表提供器。 
Wbemdisp.dll 
包含了供脚本语言使用的各种 ActiveX 控件的实现。 
Wmiprov.dll 
WDM 提供器（实例、事件和 HiPerf）。 
Wmiutils.dll 
解析和执行 WQL 查询的 COM 组件。 
Wbemads.dll 
ADSI 扩展。 