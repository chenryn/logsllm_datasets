/* count C keywords; pointer version */ main()
{
char word[MAXWORD]; struct key *p;
while (getword(word, MAXWORD) != EOF) if (isalpha(word[0]))
if ((p=binsearch(word, keytab, NKEYS)) != NULL) p•>count++;
for (p = keytab; p count > 0)
printf("%4d %s\n", p•>count, p•>word); return 0;
}
/* binsearch: find word in tab[0]...tab[n•1] */
struct key *binsearch(char *word, struck key *tab, int n)
{
int cond;
struct key *low = &tab[0]; struct key *high = &tab[n]; struct key *mid;
while (low word))  0) low = mid + 1;
else
return mid;
}
return NULL;
}
这里需要注意几点。首先，binsearch 函数在声明中必须表明:它返回的值类型是一个 指向 struct key 类型的指针，而非整型，这在函数原型及 binsearch 函数中都要声明。 如果 binsearch 找到与输入单词匹配的数组元素，它将返回一个指向该元素的指针，否则返 回 NULL。
其次，keytab 的元素在这里是通过指针访问的。这就需要对 binsearch 做较大的修改。 在这里，low 和 high 的初值分别是指向表头元素的指针和指向表尾元素后面的一个元素
的指针。
这样，我们就无法简单地通过下列表达式计算中间元素的位置:
mid = (low+high) / 2              /* WRONG */
这是因为，两个指针之间的加法运算是非法的。但是，指针的减法运算却是合法的，high•low 的值就是数组元素的个数，因此，可以用下列表达式:
mid = low + (high•low) / 2
将 mid 设置为指向位于 high 和 low 之间的中间元素的指针。 对算法的最重要修改在于，要确保不会生成非法的指针，或者是试图访问数组范围之外
的元素。问题在于，&tab[•1]和&tab[n]都超出了数组 tab 的范围。前者是绝对非法的，
而对后者的间接引用也是非法的。但是，C   语言的定义保证数组末尾之后的第一个元素(即
&tab[n])的指针算术运算可以正确执行。
主程序 main 中有下列语句:
for (p = keytab; p 
#include 
#include 
#define MAXWORD 100
struct tnode *addtree(struct tnode *, char *); void treeprint(struct tnode *);
int getword(char *, int);
/* word frequency count */ main()
{
struct tnode *root; char word[MAXWORD];
root = NULL;
while (getword(word, MAXWORD) != EOF) if (isalpha(word[0]))
root = addtree(root, word); treeprint(root);
return 0;
}
函数 addtree 是递归的。主函数 main 以参数的方式传递给该函数的一个单词将作为树 的最顶层(即树的根)。在每一步中，新单词与节点中存储的单词进行比较，随后，通过递归 调用 addtree 而转向左子树或右子树。该单词最终将与树中的某节点匹配(这种情况下计数 值加 1)，或遇到一个空指针(表明必须创建一个节点并加入到树中)。若生成了新节点，则 addtree 返回一个指向新节点的指针，该指针保存在父节点中。
struct tnode *talloc(void); char *strdup(char *);
/* addtree:              add a node with w, at or below p */ struct treenode *addtree(struct tnode *p, char *w)
{
int cond;
if (p == NULL) {              /* a new word has arrived */ p = talloc();              /* make a new node */ p•>word = strdup(w);
p•>count = 1;
p•>left = p•>right = NULL;
} else if ((cond = strcmp(w, p•>word)) == 0) p•>count++;              /* repeated word */
else if (cond left = addtree(p•>left, w);
else              /* greater than into right subtree */ p•>right = addtree(p•>right, w);
return p;
}
新节点的存储空间由子程序 talloc 获得。talloc 函数返回一个指针，指向能容纳一个 树节点的空闲空间。函数 strdup 将新单词复制到某个隐藏位置(稍后将讨论这些子程序)。 计数值将被初始化，两个子树被置为空(NULL)。增加新节点时，这部分代码只在树叶部分执 行。该程序忽略了对 strdup 和 talloc 返回值的出错检查(这显然是不完善的)。
treeprint 函数按顺序打印树。在每个节点，它先打印左子树(小于该单词的所有单词)， 然后是该单词本身，最后是右子树(大于该单词的所有单词)。如果你对递归操作有些疑惑的 话，不妨在上面的树中模拟 treeprint 的执行过程。
/* treeprint:              in•order print of tree p */ void treeprint(struct tnode *p)
{
if (p != NULL) {
treeprint(p•>left);
printf("%4d %s\n", p•>count, p•>word); treeprint(p•>right);
}
}
这里有一点值得注意:如果单词不是按照随机的顺序到达的，树将变得不平衡，这种情 况下，程序的运行时间将大大增加。最坏的情况下，若单词已经排好序，则程序模拟线性查 找的开销将非常大。某些广义二叉树不受这种最坏情况的影响，在此我们不讨论。
在结束该例子之前，我们简单讨论一下有关存储分配程序的问题。尽管存储分配程序需 要为不同的对象分配存储空间，但显然，程序中只会有一个存储分配程序。但是，假定用一 个分配程序来处理多种类型的请求，比如指向 char 类型的指针和指向 struct tnode 类型 的指针，则会出现两个问题。第一，它如何在大多数实际机器上满足各种类型对象的对齐要 求(例如，整型通常必须分配在偶数地址上)，第二，使用什么样的声明能处理分配程序必须 能返回不同类型的指针的问题?
对齐要求一般比较容易满足，只需要确保分配程序始终返回满足所有对齐限制要求的指 针就可以了，其代价是牺牲一些存储空间。第 5 章介绍的 alloc 函数不保证任何特定类型的 对齐，所以，我们使用标准库函数 malloc，它能够满足对齐要求。第 8 章将介绍实现 malloc 函数的一种方法。
对于任何执行严格类型检查的语言来说，像 malloc 这样的函数的类型声明总是很令人 头疼的问题。在 C 语言中，一种合适的方法是将 malloc 的返回值声明为一个指向 void 类 型的指针，然后再显式地将该指针强制转换为所需类型。malloc 及相关函数声明在标准头文 件中。因此，可以把 talloc 函数写成下列形式:
#include 
/* talloc:              make a tnode */ struct tnode *talloc(void)
{
return (struct tnode *) malloc(sizeof(struct tnode));
}
strdup 函数只是把通过其参数传入的字符串复制到某个安全的位置。它是通过调用
malloc 函数实现的:
char *strdup(char *s)              /* make a duplicate of s */
{
char *p;
p = (char *) malloc(strlen(s)+1); /* +1 for '\0' */ if (p != NULL)
strcpy(p, s); return p;
}
在没有可用空间时，malloc 函数返回 NULL，同时，strdup 函数也将返回 NULL，strdup
函数的调用者负责出错处理。
调用 malloc 函数得到的存储空间可以通过调用 free 函数释放以重用。详细信息请参 见第 7 章和第 8 章。
练习 6•2             编写一个程序，用以读入一个 C 语言程序，并按字母表顺序分组打印变量名， 要求每一组内各变量名的前 6 个字符相同，其余字符不同。字符串和注释中的单词不予考虑。