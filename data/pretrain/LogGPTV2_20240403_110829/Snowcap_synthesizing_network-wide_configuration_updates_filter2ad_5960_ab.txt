violates it, is c , which we call the problematic command.
Example. Consider the network in Fig. 4 which consists of seven
routers organized in a route reflection hierarchy with rr acting
3A route reflector distributes BGP routes to its clients, eliminating the need for estab-
lishing an iBGP full-mesh which scales poorly [4].
4We only consider a subset of the networks from §2.1 as not all networks contained
enough devices, see App. A for more details.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tibor Schneider, Rüdiger Birkner, and Laurent Vanbever
w
Link, with IGP
weight w
b1
p
b2
1
1
r1
1
r2
1
10
10
1
10
10
rr
p
t1
1
t2
b1
p
d
c
b2
p
(a) Initial configuration
p
p
a
b
r1
r2
eBGP session
(prefix p)
iBGP session
(route reflector)
Forwarding
loop
t1
b1
t1
b1
rr
p
r1
r2
rr
t2
b2
t2
b2
r1
r2
rr
t1
t2
(b) Final configuration
(c) Network at c
(d) Network at a b d
Figure 4: Running example with 7 routers, where routers b1, b2 and rr receive an advertisement for the same prefix p. During
the reconfiguration, three sessions must be removed ( a , b , and c ), and one added ( d ).
Input
Ci
Cf
initial & final config
ϕ
hard spec
f
soft spec
Live Network
Snowcap
Config “Differ”
a -
b -
c -
d +
1
valid
ordering
d c a b
Runtime
Controller
reconfigure
& monitor 8
Search Tactics §4
Exploration §4.1
Counter-example-guided Search §4.2
a b c d
a b c
3
Reduce
b c d
c d
d c
d c
2 7
c
Solve
4 6
c
d c
a b c
b c
c
5
Extend
ϕ?
a b c d
Simulator
a b c d
ϕ
ϕ
Figure 5: Snowcap finds a command ordering to safely transition from configuration Ci to Cf . The commands ( a , b , c , d )
correspond to the example in Figure 4.
as the root. Route reflection is used as an alternative to an iBGP
full-mesh topology, which scales poorly. Any router in the iBGP
topology only advertises routes to its route reflectors if they are
learned from an external peer, or a route reflector client. A route
reflector will always advertise its selected route to all of its clients [4,
22]. Three routers (b1, b2 and rr) receive the same external route
for a prefix p (Fig. 4a). The reconfiguration scenario modifies the
hierarchy by removing three iBGP sessions ( a , b , and c ) and
adding one ( d ) (Fig. 4b). Initially, both r1, r2 and t2 select the route
from b2 for prefix p (where r2 reaches b2 via r1), while t1 selects b1.
After the reconfiguration, all routers will select b1 to reach p.
For simplicity, we assume that the operator is only interested in
preserving reachability during the reconfiguration. Doing so is not
easy and requires to add and remove sessions following a precise
order. For example, applying c first (i.e., removing the session
between b2 and r1) results in a loop between r1 and r2 (Fig. 4c).
Indeed, removing the session causes r1 to select b1 instead of b2 to
reach p. Doing so it starts forwarding traffic to r2; A loop is created
as r2 still learns (and prefers) b2 to reach p and uses r1 as next hop.
Similarly, by applying d (i.e., adding the session between b1 and
r2) after a and b causes a forwarding loop between t1 and t2, as
t1 only learns the route via b2 from r1, and t2 only learns b1 from r2.
Hence, t1 will forward traffic to t2, which itself will loop the traffic
back to t1 (Fig. 4d). Snowcap automatically computes the ordering
d c a b which preserves reachability.
Inputs. Snowcap takes 4 inputs: the initial and final configuration,
Ci and Cf ; together with the hard and soft specification, ϕ and f .
The hard specification ϕ is an LTL formula that has to be satisfied
throughout the reconfiguration campaign. LTL allows operators to
precisely specify policy transitions, as required during reconfigu-
rations. For example, an operator can mandate traffic to first pass
through the old firewall and then switch to the new one. In our
running example, the reachability requirement is expressed with
r V(r ,p,∗), which globally (G) mandates a valid
path (V ) for traffic from any router r to reach a specific prefix p.
The soft specification is a function f that maps a sequence of
network states to a cost: f : Sn (cid:55)→ R, which Snowcap uses to guide
the formula ϕ = G
Synthesizing Network-Wide Configuration Updates
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
its search towards better orderings from an operational perspective.
As an example, to reduce the number of traffic shifts, the cost
function f should be chosen to sum up the number of paths that
change from every state to the next one (cf. §5.3).
Workflow (Fig. 5). Starting from the inputs, Snowcap reconfig-
ures the network in three consecutive steps:
(1) the Config “Differ” first computes the set of commands to
transition from Ci to Cf ( a , b , c , d in our example);
(2) the Search Tactics then find a valid ordering of these com-
mands satisfying the hard specification ϕ, while greedily opti-
mizing for the soft specification f . The tactics use a simulator
to compute the network state at each step;5
(3) the Runtime Controller finally applies the valid command
ordering (here, d c a b ) to the live network.
Search tactics (§4). The core of Snowcap is its search tactics
which leverage counter-examples to efficiently navigate and prune
the search space. At a high-level, our tactics explore different order-
ings until they hit a counter-example, i.e., an ordering violating the
hard specification ϕ. It then aims to learn why this ordering does
not work by finding dependencies among commands (e.g., c must
always be applied after d ) to iteratively prune the search space.
The strength of the search tactics lies in the interaction of two
phases, which allow Snowcap to adapt to the characteristics of
every reconfiguration scenario: Exploration ( 2 , 7 ) and Counter-
example-guided Search ( 3 — 6 ).
Phase 1: Exploration. The exploration phase quickly analyzes
different command orderings by traversing the search space in a
Depth First Search (DFS) manner, greedily following the direction
that minimizes f . Once Snowcap finds itself in a dead end, with no
commands satisfying ϕ, it switches to the second phase to resolve
the violations it found.
In our example, Snowcap first applies a , followed by b . In this
state however, neither command c nor d can be applied as both
induce a forwarding loop. Before backtracking, Snowcap attempts
to identify and resolve the hidden dependency.
Phase 2: Counter-example-guided search. In this phase, Snowcap
finds dependencies by examining the command orderings violating
the specification and resolving them. It works in three steps: (i)
Reduce; (ii) Solve; and (iii) Extend.
In Reduce, Snowcap looks for the minimal set of commands that
still violate the hard specification. In Solve, Snowcap then tries to
find a valid ordering of the reduced set of commands, using the
same approach as in the Exploration phase, and returns a valid
ordering of these commands (if it exists) as one group, which we
call a dependency group. If Solve does not find a solution, Snowcap
performs Extend, introducing yet unconsidered commands, which
might resolve the reduced problem. Once a dependency is found,
Snowcap remembers it and continues the exploration.
Coming back to our example, Snowcap 3 removes both com-
mand a and b when considering the input ordering a b c . This
is because applying c before d always results in a forwarding
loop between r1 and r2. Skipping the Solve phase 4 , Snowcap tries
5Snowcap could also use any other network analyzer such as ARC [16], Batfish [10],
Crystalnet [30], C-BGP [33], Minesweeper [5], or NV [18].
to extend 5 the current problem. In fact, Snowcap notices that
applying d before c preserves reachability. Treating c d as a
single command, Snowcap switches back to the exploration phase
7 and finds the valid reconfiguration ordering a b c d .
Runtime controller. Finally, the runtime controller performs the
reconfiguration by applying one command after the other according
to the synthesized ordering until the network transitioned from the
initial to the final configuration. After each command, the controller
monitors the network state and waits for it to converge. Only then,
it proceeds to apply the next command.
4 SEARCH TACTICS
We now explain how Snowcap’s search tactics find a safe reconfigu-
ration plan. First, we show how Snowcap explores the search space
with a simple, yet effective DFS traversal (§4.1). Then, we explain
how Snowcap speeds up the search by learning and resolving com-
mand dependencies, effectively pruning the space (§4.2). Finally,
we present how Snowcap finds an optimal, valid ordering (§4.3).
In this section, we assume that we are given an oracle that deter-
mines whether a specific ordering o of the commands satisfies the
hard specification: o |= ϕ. It identifies the problematic command
violating the specification, and the “reason” ϵϕ(o) for that, i.e., the
violated part of the specification.
4.1 Simple Exploration
In the following, we present how Snowcap navigates the search
space of all possible command orderings. We motivate Snowcap’s
DFS traversal based on an intuitive example.
The search space of all orderings is large and sparse, i.e., most or-
derings are invalid, rendering a random sampling approach useless.
However, we can improve on the random approach by analyzing
previous samples and adapting the search accordingly. If a certain
in our running example (Fig. 4),
sequence of commands, such as c
violates the specification, there is no point in trying orderings which
start with that invalid sequence (e.g., c a b d , c a d b , etc.).
Hence, we can approach the search for a valid ordering as a
traversal of a tree, in which nodes represent orderings (only leaves
are complete orderings), and traversing an edge means applying
one of the remaining commands. Snowcap traverses this tree in
a Depth First Search (DFS) manner, only exploring valid options
by backtracking whenever a command violates the specification.
Note, this exploration is complete, i.e., it finds a valid ordering, if
and only if such an ordering exists.
Intuitively, the exploration prunes orderings which start with a
known, invalid sequence. While this approach works well in many
cases, it does not yet understand the underlying problem of these
sequences. In fact, the exploration algorithm quickly reaches its
limits if applying one command early on leads to problems towards
the end of the reconfiguration. This means a command early in the
sequence depends on one that appears only several steps later. Such
dependencies have no immediate effect.
Dependencies without immediate effect. These dependencies are
groups of commands that need to be applied in a specific order. If
that order is not met, the specification is not violated immediately,
but at a later command (see App. B for a formal definition). The
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tibor Schneider, Rüdiger Birkner, and Laurent Vanbever
:Groups G, an ordering o of G and the spec. ϕ
Algorithm 1: Counter-example-guided Search
Input
1 R ← Set of groups not in o
2 or ← Reduce(G, o, ϕ) using Alg. 2
3 loop
os ← Solve(G, or , ϕ) using §4.1
4
if os (cid:44) ∅ then return os
5
or ← Extend(G, or , R, ϕ) using Alg. 3
6
if or = ∅ then return ∅
7
R ← R without all groups in or
8
exploration approach struggles with such situations as we show on
our running example (Fig. 4): The sequence a b is valid, but in this
state, both remaining options a b c and a b d violate the specifi-
cation as they result in a forwarding loop. Imagine that additional
commands { x1 , . . . , xn } exist, which are independent from the de-
pendency group (e.g., increasing the link weights to router rr). Our
simple exploration tries all possible permutations of x1 , . . . , xn ,
before finally backtracking to solve the actual problem.
4.2 Finding Dependencies
In the following, we explain how Snowcap overcomes the limitation
of the simple exploration by actively searching for dependencies
without immediate effect and learning how to resolve them. By
finding and resolving these dependencies in a divide-and-conquer
fashion, Snowcap prunes the search space even further. During
exploration, once Snowcap encounters a dependency without im-
mediate effect, it will perform a counter-example-guided search.
Counter-example-guided search. Snowcap’s second search tactic
is based on a divide-and-conquer approach; we split the problem of
finding a valid ordering into smaller sub-problems of finding valid
orderings within the dependency groups. Whenever the exploration
hits a dead end, Snowcap uses that counter-example to identify
the dependency groups and solve them individually, instead of
backtracking (cf. Alg. 1). This works in three main phases Reduce,
Solve, and Extend, which we explain in detail below.
In the following, we use the running example (Fig. 4) and assume
that the input to Alg. 1 is the ordering o = a b c , like in Fig. 5. All
three phases modify an incomplete ordering o of the commands,
which is valid up to its final command. We say that this final com-
mand is problematic ( c
in the example).
Reduction phase (Alg. 2). The reduction phase aims to find the
minimal set of commands that cause the problem, borrowing ideas
from Delta Debugging [46] and Test Case Reduction [35]. During
Reduce, we remove single commands (except the problematic one)
to check whether they change the outcome. If removing a single