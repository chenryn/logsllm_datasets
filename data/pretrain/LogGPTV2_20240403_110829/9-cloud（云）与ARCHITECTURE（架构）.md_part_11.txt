}
3）修改后测试
\[root@ansible ansible\]# vi hosts
\[other\]
cache ansible_ssh_user=\"root\" ansible_ssh_pass=\"a\"
\[root@ansible ansible\]# ansible other -m ping //测试成功，颜色为绿色
cache \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
4）不检测主机的sshkey，在第一次连接的时候不用输入yes
\[root@ansible ansible\]# vim ansible.cfg
61 host_key_checking = False
\[root@ansible ansible\]# vim hosts
\[web\]
web1
web2
\[web:vars\] //web组:变量(vars不改)，web组的多台机器共用一个用户名和密码
ansible_ssh_user=\"root\"
ansible_ssh_pass=\"a\"
\[root@ansible ansible\]# ansible web -m ping
web2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
web1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
步骤三：定义子组
\[root@ansible ansible\]# vi hosts
\[app:children\]
//指定子分组(app可改:children不改)，web，db是提前分好的组
web
db
\[app:vars\]
ansible_ssh_user=\"root\"
ansible_ssh_pass=\"a\"
\[root@ansible ansible\]# ansible app \--list-host //查看
hosts (4):
web1
web2
db1
db2
\[root@ansible ansible\]# ansible app -m ping //测试
web1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
web2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
步骤四：多路径练习
自定义的ansible文件只在当前路径生效
1）多路径
\[root@ansible \~\]# mkdir aaa
\[root@ansible \~\]# cd aaa/
\[root@ansible aaa\]# vim myhost
\[app1\]
web1
db1
\[app2\]
web2
db2
\[app:children\]
app1
app2
\[other\]
cache
\[app:vars\]
ansible_ssh_user=\"root\"
ansible_ssh_pass=\"a\"
\[root@ansible aaa\]# touch ansible.cfg
\[root@ansible aaa\]# grep -Ev \"\^#\|\^\$\" /etc/ansible/ansible.cfg
\[defaults\]
roles_path = /etc/ansible/roles:/usr/share/ansible/roles
host_key_checking = False
\[inventory\]
\[privilege_escalation\]
\[paramiko_connection\]
\[ssh_connection\]
\[persistent_connection\]
\[accelerate\]
\[selinux\]
\[colors\]
\[diff\]
\[root@ansible aaa\]# vim ansible.cfg
\[defaults\]
inventory = myhost
host_key_checking = False
2）测试结果
\[root@ansible aaa\]# ansible app1 -m ping
web1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
\[root@ansible aaa\]# ansible app -m ping
web1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
web2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
\[root@ansible aaa\]# ansible app \--list-host
hosts (4):
web1
db1
web2
db2
\[root@ansible aaa\]# cd
\[root@ansible \~\]# ansible app1 \--list-host
//切换到别的目录，测试失败
\[WARNING\]: Could not match supplied host pattern, ignoring: app1
\[WARNING\]: No hosts matched, nothing to do
hosts (0):
3 案例3：动态主机
3.1 问题
本案例要求：
脚本输出主机列表
3.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：脚本输出主机列表
\[root@ansible \~\]# cd aaa
\[root@ansible aaa\]# vim host.py
#!/usr/bin/python
import json
hostlist = {}
hostlist\[\"bb\"\] = \[\"192.168.1.52\", \"192.168.1.53\"\]
hostlist\[\"192.168.1.54\"\] = {
\"ansible_ssh_user\":\"root\",\"ansible_ssh_pass\":\"pwd\"
}
hostlist\[\"aa\"\] = {
\"hosts\" : \[\"192.168.1.55\", \"192.168.1.56\"\],
\"vars\" : {
\"ansible_ssh_user\":\"root\",\"ansible_ssh_pass\":\"pwd\"
}
}
print(json.dumps(hostlist))
\[root@ansible aaa\]# chmod 755 ./host.py
步骤二：脚本输出样例（这样写输出的结果有些乱）
\[root@ansible aaa\]# ./host.py
{\"aa\": {\"hosts\": \[\"192.168.1.55\", \"192.168.1.56\"\], \"vars\":
{\"ansible_ssh_user\": \"root\", \"ansible_ssh_pass\": \"a\"}},
\"192.168.1.54\": {\"ansible_ssh_user\": \"root\", \"ansible_ssh_pass\":
\"a\"}, \"bb\": \[\"192.168.1.52\", \"192.168.1.53\"\]}
步骤三：可以用shell脚本输出
\[root@ansible aaa\]# vim my.sh
#!/bin/bash
echo \'
{ \"aa\": {
\"hosts\":
\[\"192.168.1.55\", \"192.168.1.56\"\],
\"vars\": {
\"ansible_ssh_user\": \"root\",
\"ansible_ssh_pass\": \"a\"}
},
}\'
\[root@ansible aaa\]# chmod 755 my.sh
\[root@ansible aaa\]# ./my.sh
{ \"aa\": {
\"hosts\":
\[\"192.168.1.55\", \"192.168.1.56\"\],
\"vars\": {
\"ansible_ssh_user\": \"root\",
\"ansible_ssh_pass\": \"a\"}
},
}
\[root@ansible aaa\]# vim ansible.cfg
\[defaults\]
inventory = my.sh
host_key_checking = False
\[root@ansible aaa\]# ansible aa -m ping
192.168.1.55 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
192.168.1.56 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
步骤二：批量执行
1）查看负载
\[root@ansible aaa\]# ansible app -m command -a \'uptime\'
db1 \| SUCCESS \| rc=0 \>\>
11:35:52 up 1:59, 2 users, load average: 0.00, 0.01, 0.01
web1 \| SUCCESS \| rc=0 \>\>
11:35:52 up 2:00, 2 users, load average: 0.00, 0.01, 0.02
db2 \| SUCCESS \| rc=0 \>\>
11:35:53 up 1:59, 2 users, load average: 0.00, 0.01, 0.03
web2 \| SUCCESS \| rc=0 \>\>
11:35:52 up 1:59, 2 users, load average: 0.00, 0.01, 0.02
2）查看时间
\[root@ansible aaa\]# ansible app -m command -a \'date +%F\\ %T\'
db1 \| SUCCESS \| rc=0 \>\>
2018-09-06 11:42:18
web1 \| SUCCESS \| rc=0 \>\>
2018-09-06 11:42:18
web2 \| SUCCESS \| rc=0 \>\>
2018-09-06 11:42:18
db2 \| SUCCESS \| rc=0 \>\>
2018-09-06 11:42:19
4 案例4：批量部署证书文件
4.1 问题
本案例要求：
创建一对密钥
给所有主机部署密钥
4.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：批量部署证书文件，给所有主机部署密钥
1）创建密钥
\[root@ansible aaa\]# cd /root/.ssh/
\[root@ansible .ssh\]# vi /etc/ansible/hosts
\[web\]
web1
web2
\[db\]
db\[1:2\]
\[other\]
cache
\[root@ansible .ssh\]# ansible all -m ping //直接ping会报错
\[root@ansible .ssh\]# ssh-keygen -t rsa -b 2048 -N \'\' //创建密钥
2）给所有主机部署密钥
\[root@ansible .ssh\]# ansible all -m authorized_key -a \"user=root
exclusive=true manage_dir=true key=\'\$(\ {
\"changed\": false,
\"ping\": \"pong\"
}
db2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
web1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
cache \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
\[root@ansible .ssh\]# ssh web1 //不需要输入密码,可以直接登陆
Last login: Thu Sep 6 11:49:00 2018 from 192.168.1.51
\[root@web1 \~\]#
5 案例5：练习模块
5.1 问题
本案例要求：
练习使用command , shell , raw, script模块
5.2 步骤