running and turn to  Chapter 21.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Download from finelybook PI:EMAIL
696
Quick reference
To
Do this
Declare a
delegate type
Write the keyword delegate, followed by the return type,
followed by the name of the delegate type, followed by any
parameter types. For example:
delegate void myDelegate();
Create an
instance of a
delegate
initialized
with a single
specific
method
Use the same syntax you use for a class or structure: write
the keyword new, followed by the name of the type (the
name of the delegate), followed by the argument between
parentheses. The argument must be a method whose
signature exactly matches the signature of the delegate. For
example:
Click here to view code image
delegate void myDelegate();
private void myMethod() { ... }
...
myDelegate del = new myDelegate(this.myMethod);
Invoke a
delegate
Use the same syntax as a method call. For example:
Click here to view code image
myDelegate del;
...
del();
Declare an
event
Write the keyword event, followed by the name of the type
(the type must be a delegate type), followed by the name of
the event. For example:
Click here to view code image
class MyClass
{
    public delegate void MyDelegate();
    ...
    public event myDelegate MyEvent;
}
Subscribe to
an event
Create a delegate instance (of the same type as the event),
and attach the delegate instance to the event by using the +=
Download from finelybook PI:EMAIL
697
operator. For example:
Click here to view code image
class MyEventHandlingClass
{
    private MyClass myClass = new MyClass();
    ...
    public void Start()
    {
        myClass.MyEvent +=
            new myClass.MyDelegate
(this.eventHandlingMethod);
    }
    private void eventHandlingMethod()
    {
        ...
    }
}
You can also get the compiler to generate the new delegate
automatically simply by specifying the subscribing method:
Click here to view code image
public void Start()
{
    myClass.MyEvent +=
        this.eventHandlingMethod;
}
Unsubscribe
from an event
Create a delegate instance (of the same type as the event),
and detach the delegate instance from the event by using the
–= operator. For example:
Click here to view code image
class MyEventHandlingClass
{
    private MyClass myClass = new MyClass();
    ...
    public void Stop()
    {
        myClass.MyEvent -=
            new myClass.MyDelegate
(this.eventHandlingMethod);
     }
     ...
}
Download from finelybook PI:EMAIL
698
Or:
Click here to view code image
public void Stop()
{
    myClass.MyEvent -=
        this.eventHandlingMethod;
}
Raise an
event
Use the same syntax as a method call. You must supply
arguments to match the type of the parameters expected by
the delegate referenced by the event. Don’t forget to check
whether the event is null. For example:
Click here to view code image
class MyClass
{
    public event myDelegate MyEvent;
    ...
    private void RaiseEvent()
    {
        if (this.MyEvent != null)
        {
            this.MyEvent();
        }
    }
    ...
}
Download from finelybook PI:EMAIL
699
CHAPTER 21
Querying in-memory data by using
query expressions
After completing this chapter, you will be able to:
Define Language-Integrated Query (LINQ) queries to examine the
contents of enumerable collections.
Use LINQ extension methods and query operators.
Explain how LINQ defers evaluation of a query and how you can force
immediate execution and cache the results of a LINQ query.
You have now met most of the features of the C# language. However, so
far I have glossed over one important aspect of the language that is likely to
be used by many applications: the support that C# provides for querying data.
You have seen that you can define structures and classes for modeling data
and that you can use collections and arrays for temporarily storing data in
memory. However, how do you perform common tasks such as searching for
items in a collection that match a specific set of criteria? For example, if you
have a collection of Customer objects, how do you find all customers that are
located in London, or how can you find out which town has the most
customers who have procured your services? You can write your own code to
iterate through a collection and examine the fields in each object, but these
types of tasks occur so often that the designers of C# decided to include
features in the language to minimize the amount of code you need to write. In
this chapter, you will learn how to use these advanced C# language features
Download from finelybook PI:EMAIL
700
to query and manipulate data.
What is LINQ?
All but the most trivial of applications need to process data. Historically,
most applications provided their own logic for performing these operations.
However, this strategy can lead to the code in an application becoming very
tightly coupled with the structure of the data that it processes. If the data
structures change, you might need to make a significant number of changes to
the code that handles the data. The designers of the Microsoft .NET
Framework thought long and hard about these issues and decided to make the
life of an application developer easier by providing features that abstract the
mechanism that an application uses to query data from application code itself.
These features are called Language-Integrated Query, or LINQ.
The creators of LINQ took an unabashed look at the way in which
relational database management systems such as Microsoft SQL Server
separate the language used to query a database from the internal format of the
data in the database. Developers accessing a SQL Server database issue
Structured Query Language (SQL) statements to the database management
system. SQL provides a high-level description of the data that the developer
wants to retrieve but does not indicate exactly how the database management
system should retrieve this data. These details are controlled by the database
management system itself. Consequently, an application that invokes SQL
statements does not care how the database management system physically
stores or retrieves data. The format used by the database management system
can change (for example, if a new version is released) without the application
developer needing to modify the SQL statements used by the application.
LINQ provides syntax and semantics very reminiscent of SQL and with
many of the same advantages. You can change the underlying structure of the
data being queried without needing to change the code that actually performs
the queries. You should be aware that although LINQ looks similar to SQL, it
is far more flexible and can handle a wider variety of logical data structures.
For example, LINQ can handle data organized hierarchically, such as that
found in an XML document. However, this chapter concentrates on using
LINQ in a relational manner.
Download from finelybook PI:EMAIL
701
Using LINQ in a C# application
Perhaps the easiest way to explain how to use the C# features that support
LINQ is to work through some simple examples based on the following sets
of customer and address information:
CUSTOMER INFORMATION
CustomerID
FirstName
LastName
CompanyName
1
Kim
Abercrombie
Alpine Ski House
2
Jeff
Hay
Coho Winery
3
Charlie
Herb
Alpine Ski House
4
Chris
Preston
Trey Research
5
Dave
Barnett
Wingtip Toys
6
Ann
Beebe
Coho Winery
7
John
Kane
Wingtip Toys
8
David
Simpson
Trey Research
9
Greg
Chapman
Wingtip Toys
10
Tim
Litton
Wide World Importers
ADDRESS INFORMATION
CompanyName
City
Country
Alpine Ski House
Berne
Switzerland
Coho Winery
San Francisco
United States
Trey Research
New York
United States
Wingtip Toys
London
United Kingdom
Wide World Importers
Tetbury
United Kingdom
LINQ requires the data to be stored in a data structure that implements the
IEnumerable or IEnumerable interface, as described in Chapter 19,
”Enumerating collections.” It does not matter what structure you use (an
array, a HashSet, a Queue, or any of the other collection types, or
Download from finelybook PI:EMAIL
702
even one that you define yourself) as long as it is enumerable. However, to
keep things straightforward, the examples in this chapter assume that the
customer and address information is held in the customers and addresses
arrays shown in the following code example.
Note In a real-world application, you would populate these arrays by
reading the data from a file or a database.
Click here to view code image
var customers = new[] {
    new { CustomerID = 1, FirstName = "Kim", LastName =
"Abercrombie",
          CompanyName = "Alpine Ski House" },
    new { CustomerID = 2, FirstName = "Jeff", LastName = "Hay",
          CompanyName = "Coho Winery" },
    new { CustomerID = 3, FirstName = "Charlie", LastName = "Herb",
          CompanyName = "Alpine Ski House" },
    new { CustomerID = 4, FirstName = "Chris", LastName = "Preston",
          CompanyName = "Trey Research" },
    new { CustomerID = 5, FirstName = "Dave", LastName = "Barnett",
          CompanyName = "Wingtip Toys" },
    new { CustomerID = 6, FirstName = "Ann", LastName = "Beebe",
          CompanyName = "Coho Winery" },
    new { CustomerID = 7, FirstName = "John", LastName = "Kane",
          CompanyName = "Wingtip Toys" },
    new { CustomerID = 8, FirstName = "David", LastName = "Simpson",
          CompanyName = "Trey Research" },
    new { CustomerID = 9, FirstName = "Greg", LastName = "Chapman",
          CompanyName = "Wingtip Toys" },
    new { CustomerID = 10, FirstName = "Tim", LastName = "Litton",
          CompanyName = "Wide World Importers" }
};
var addresses = new[] {
    new { CompanyName = "Alpine Ski House", City = "Berne",
          Country = "Switzerland"},
    new { CompanyName = "Coho Winery", City = "San Francisco",
          Country = "United States"},
    new { CompanyName = "Trey Research", City = "New York",
          Country = "United States"},
    new { CompanyName = "Wingtip Toys", City = "London",
          Country = "United Kingdom"},
Download from finelybook PI:EMAIL
703
    new { CompanyName = "Wide World Importers", City = "Tetbury",
          Country = "United Kingdom"}
};
Note The sections “Selecting data,” “Filtering data,” “Ordering,
grouping, and aggregating data,” and “Joining data” that follow show
you the basic capabilities and syntax for querying data by using LINQ
methods. The syntax can become a little complex at times, and you will
see when you reach the section “Using query operators” that it is not
actually necessary to remember how all the syntax works. However, it
is useful for you to at least take a look at these sections so that you can
fully appreciate how the query operators provided with C# perform their
tasks.
Selecting data
Note The code for the examples shown in this section is available in the
LINQSamples solution, located in the \Microsoft Press\VCSBS\Chapter
21\LINQSamples folder in your Documents folder.
Suppose that you want to display a list consisting of the first name of each
customer in the customers array. You can achieve this task with the following
code:
Click here to view code image
IEnumerable customerFirstNames =
    customers.Select(cust => cust.FirstName);
foreach (string name in customerFirstNames)
{
    Console.WriteLine(name);
Download from finelybook PI:EMAIL
704
}
Although this block of code is quite short, it does a lot, and it requires a
degree of explanation, starting with the use of the Select method of the
customers array.
Using the Select method, you can retrieve specific data from the array—in
this case, just the value in the FirstName field of each item in the array. How
does it work? The parameter to the Select method is actually another method
that takes a row from the customers array and returns the selected data from
that row. You can define your own custom method to perform this task, but
the simplest mechanism is to use a lambda expression to define an
anonymous method, as shown in the preceding example. There are three
important things that you need to understand at this point:
The variable cust is the parameter passed into the method. You can
think of cust as an alias for each row in the customers array. The
compiler deduces this from the fact that you are calling the Select
method on the customers array. You can use any legal C# identifier in
place of cust.
The Select method does not actually retrieve the data at this time; it
simply returns an enumerable object that will fetch the data identified
by the Select method when you iterate over it later. We will return to
this aspect of LINQ in the section ”LINQ and deferred evaluation”
later in this chapter.
The Select method is not actually a method of the Array type. It is an
extension method of the Enumerable class. The Enumerable class is
located in the System.Linq namespace and provides a substantial set of
static methods for querying objects that implement the generic
IEnumerable interface.
The preceding example uses the Select method of the customers array to
generate an IEnumerable object named customerFirstNames. (It is
of type IEnumerable because the Select method returns an
enumerable collection of customer first names, which are strings.) The
foreach statement iterates through this collection of strings, printing out the
first name of each customer in the following sequence:
Click here to view code image
Download from finelybook PI:EMAIL
705
Kim
Jeff
Charlie
Chris
Dave
Ann
John
David
Greg
Tim
You can now display the first name of each customer. How do you fetch
the first and last name of each customer? This task is slightly trickier. If you
examine the definition of the Enumerable.Select method in the System.Linq
namespace in the documentation supplied with Microsoft Visual Studio 2017,
you will see that it looks like this:
Click here to view code image
public static IEnumerable Select (
         this IEnumerable source,
         Func selector
)
What this actually says is that Select is a generic method that takes two
type parameters named TSource and TResult as well as two ordinary
parameters named source and selector. TSource is the type of the collection
for which you are generating an enumerable set of results (customer objects
in this example), and TResult is the type of the data in the enumerable set of
results (string objects in this example). Remember that Select is an extension
method, so the source parameter is actually a reference to the type being
extended (a generic collection of customer objects that implements the
IEnumerable interface in the example). The selector parameter specifies a
generic method that identifies the fields to be retrieved. (Remember that Func
is the name of a generic delegate type in the .NET Framework that you can
use for encapsulating a generic method that returns a result.) The method
referred to by the selector parameter takes a TSource (in this case, customer)
parameter and yields a TResult (in this case, string) object. The value
returned by the Select method is an enumerable collection of TResult (again
string) objects.
Download from finelybook PI:EMAIL
706
Note Chapter 12, ”Working with inheritance,” explains how extension
methods work and the role of the first parameter to an extension
method.
The important point to understand from the preceding paragraph is that the
Select method returns an enumerable collection based on a single type. If you
want the enumerator to return multiple items of data, such as the first and last
name of each customer, you have at least two options:
You can concatenate the first and last names together into a single
string in the Select method, like this:
Click here to view code image
IEnumerable customerNames =
    customers.Select(cust => $"{cust.FirstName}
{cust.LastName}");
You can define a new type that wraps the first and last names and use
the Select method to construct instances of this type, like this:
Click here to view code image
class FullName
{
    public string FirstName{ get; set; }
    public string LastName{ get; set; }