的脚步。它可以持续将消息发布到同一个LAN下的戈利塔RabbitMQ上，并给予牛
油果爱好者们订单确认信息反馈。然后，Shovel可以将那些订单异步复制到卡平特
里亚，而不会让网站因为增加了网络延迟而有所觉察或者受到影响。这真是个完美
的方案，Pierre因为他的聪明才智享受了到蒙特雷的海滩度假。
因此，不管你需要在全国范围还是街道范围内，将消息在RabbitMQ服务器之
间进行复制，Shovel都是你值得信赖的解决方案。那么你如何安装Shovel并开启消
息复制的魔法呢？
---
## Page 167
7.3远距离通信和复制
145
牛油果订单
网站
完成
Shovel（轻松复制）
RabbiMQ
RabbitMQ
戈利塔
卡平特里亚
仓库
仓库
图7.6使用Shovel处理订单
7.3.2安装Shovel
Shovel的安装是非常简单的。从RabbitMQ2.7.0开始，rabbitmq-shove1和
amqp_client插件随Rabbit一起打包；你只需开启它们即可（在开启插件功能之
前确保/etc/rabbitmq／存在）。在RabbitMQ工作目录下运行以下命令：
$./sbin/rabbitmq-pluginsenableamqp_client
The followingplugins havebeenenabled:
amqp_client
Plugin configuration has changed. Restart RabbitMQ for
changes to take effect.
$./sbin/rabbitmq-pluginsenable rabbitmq_shovel
The following plugins have been enabled:
erlando
rabbitmq_shovel
Plugin configuration has changed.Restart RabbitMQ for
changes to take effect.
如果你运行的是RabbitMQ2.7.0以前的版本，则需要自行获取并安装插件。
首先从http://www.rabbitmq.com/plugins.html下载rabbitmq-shovel 和amqp_
client插件，并将它们安装在RabbitMQ安装目录下的./plugins／目录：
---
## Page 168
146
第7章warren和Shovel：故障转移和复制
$cd./plugins/
$ wget http://www.rabbitmq.com/.../v2.6.1/amqp_client-2.6.1.ez
Resolving www.rabbitmq.com...208.91.1.36
Connecting towww.rabbitmq.com|208.91.1.36|:80...connected.
HTTP request sent,awaiting response...2oo OK
Length: 154928 (151K) [application/andrew-inset]
Saving to:amqp_client-2.6.1.ez'
100[===============================>]154,928 120K/s in 1.3s
$wgethttp://www.rabbitmq.com/.../v2.6.1/rabbitmq-shovel-2.6.1.ez
Resolving www.rabbitmq.com...208.91.1.36
Connecting to www.rabbitmq.com|208.91.1.36l:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 42131 (41K) [application/andrew-inset]
Saving to:rabbitmg-shovel-2.6.1.ez'
100%[=============
=============>]42,131112K/sin0.4s
就是这么简单。其实，也不尽然。你仍然需要配置Shovel并启动你的RabbitMQ
代理服务器。
7.3.3配置并运行Shovel
所有 Shovel的配置信息，包括从复制关系到重连设置，都包含在rabbitmq·
config文件中。就像RabbitMQ配置文件中的其他部分一样，Shovel的配置格式
化名为rabbitmq_shovel的有效Erlang元组，并内嵌了配置指令。由于配置文件
看起来十分复杂，因此让我们看看下列清单，它向你展示了rabbitmq.config中
Shovel配置的面貌，然后我们再解读每个独立的部分。
清单7.2Shovel配置文件rabbitmq.config
{mnesia,[{dump_log_write_threshold,100}
]}，
{rabbit，[{vm_memory_high_watermark,0.4}
]),
{rabbitmq_shovel,
[{shovels,
[{avocado_order_shovel,
[{sources,[{broker,"amqp://guest:guest@localhost:5675/"},
(declarations,
[{'queue.declare',
[{queue,>},
durable]},
{'exchange.declare',
[{exchange,>},
{type，>},
durable]},
---
## Page 169
7.3远距离通信和复制
147
{'queue.bind',
[{exchange,>},
{queue,>},
{routing_key,>}]}
]}1},
{destinations,[{broker,"amqp://guest:guest@localhost:5676"},
{declarations,
[{'queue.declare',
[{queue,>},
durable]},
{'exchange.declare',
[{exchange,>},
{type，>},
durable]},
('queue.bind',
[{exchange,>},
{queue,>},
{routing_key,>}]}
11},
{queue,>},
[ack_mode,no_ack},
{publish_properties,[{delivery_mode,2}]},
{publish_fields,[{exchange,>},
{routing_key,>}l},
{reconnect_delay,5}
]}
1
就在rabbitmqshovel指令的下方，你看到的是shovels部分。这是一个
Shovel定义列表，其中每个Shovel定义了两台RabbitMQ服务器之间的复制关系。
在这个例子中，你只有一个avocado_order_shovel的定义。在该Shovel中，你
定义了消息复制的来源sources和消息发往的去处destinations。sources和
destinations两者都包含了同样类型的配置指令：
·broker或brokers一—URL，定义了用于Shovel两端的RabbitMQ服务器
地址、用户名、密码和vhost。如果sources或者destinations是RabbitMQ集
群的话，那么就使用brokers，并在其后用多个URL字符串且以口包裹起
来（举例来说，["amqp://serverl..."，"amqp://server2..."]）
这样的定义能够使Shovel在主节点故障时转移到另一个集群节点。
■declarations一AMQP命令列表，声明了队列、交换器和绑定用于
Shovel操作。
---
## Page 170
148
第7章warren和Shovel：故障转移和复制
declarations是最难以理解的部分。它们内嵌在一个列表（数组）之中，每
个成员都是一个定义了AMQP命令的Erlang元组，并伴随着另一个为该AMQP命
令提供参数的元组：
[declarations,
[H'queue.declare',
[{queue,>),
durable]},
{'exchange.declare',
[{exchange,>},
{type,>},
durablel},
('queue.bind',
[{exchange, >},
{queue,>);
{routing_key,>}])
]11,
举例来说，该声明部分指示Shovel声明了一个叫作backup_orders的队列和
一个叫作incomingorders的交换器（记住我们的规则，不要对通信结构是否就
绪做任何假设）。然后你告诉Shovel使用路由键warehouse将backup_orders绑
定到incoming_orders上。你可能注意到了那些指令中一些有意思的地方。首先，
所有字符串都不是简单地打上了引号；它们同时被双尖括号包围着：>。这里的尖括号告诉Erlang不要将信息视为字符串，而是把它们视为特
殊的数据类型binary。你不需要理解二进制是什么，只要知道如果你忘记添加尖括
号的话，Shovel一启动就会崩溃。另一个有趣的事是durable参数没有像其他参
数那样包裹在大括号内。这是因为durable不接收赋值。它要么存在，要么不存在。
只有在参数需要赋值的时候才需要加上大括号。此外，你应该对AMQP命令和其参
数很熟悉，而且你能指定自己所偏好的编程语言中拥有的任何参数。举个例子（虽
然你不想这样做），你可以把backup_orders队列定义为auto_delete。auto
delete像durable一样，不接受赋值，就这样把它添加在queue.declare参数
列表的durable之后（以逗号分隔）而不需要大括号。
在定义了sources和destinations之后，你也需要定义一些Shovel的通用
设置。所有这些设置接收赋值，所以它们需要包含在大括号内。你可以定义的设置
如下：
■queue一源服务器上的队列名称。Shovel会监听该队列以复制消息。
---
## Page 171
7.3远距离通信和复制
149
■ack_mode一在完成投递到目的服务器前，Shovel是否应该确认接收源服
务器的消息。
■prefetch_count—在任何时刻，Shovel会在内部缓冲的消息条数。该内
部缓冲区是一个源服务器和目的服务器之间的中途停留点。在Shovel发生
故障时，它不受保护。
■publish_properties—当消息发往目的地时需要特别设置的属性列表。
举例来说，{delivery_mode，2}将设置delivery_mode为可持久化的
（2）。默认情况下，除非在publishproperties中对属性进行了覆盖，
不然Shovel会在源消息发往目的地时复制源消息的属性。
■publish_fields—与publish_properties类似，定义了消息需要
发往的目的服务器上的交换器，以及标记在消息上的routing_key。如果
exchange或者routing_key没有定义的话，Shovel将会从原始消息上复
制这些被忽略的设置。
■reconnect_delay一一在连接断开之后，需要等待多少秒开始重连源服务
器或者目的地服务器。
那么在这个例子中，你想要让Shovel从源服务器上的backup_orders队列消
费消息，然后投递到目的服务器上的incoming_orders交换器，并设置消息的路
由键为warehouse。你不想对消息进行自动确认（举例来说，将ack_mode设置为
on_confirm 或者on_publish），而想让消息以持久化的方式发布出去（delivery
mode2）。最后，你希望Shovel在连接断开后等待5秒之后再进行重连。将所有这
些放在一块儿，那么配置文件看起来就像如下所示：
{queue, >},
{ack_mode,no_ack},
(publish_properties, [(delivery_mode, 2}]},
(publish_fields,[{exchange,>},
{routing_key,>}]},
{reconnect_delay, 5}
图7.7展示了Shovel定义的拓扑图。你从Rabbit服务器1ocalhost：5675上
的backup_orders接收订单，并将它们发送到Rabbit服务器1ocalhost：5676
上的incoming_orders交换器上。
---
## Page 172
150
第7章warren和Shovel：故障转移和复制
incoming_orders
交换器
Shovel
订单
warehouse_goleta
backup._orders
incoming_orders
队列
交换器
RabbitMQ
Goleta仓库
warehouse_carpinteria
RabbitMQ
Carpinteria仓库
图7.7Shovel订单处理拓扑
现在Shovel的配置算是完整了，是时候启动源服务器和目的服务器，看看其是
如何工作的了。为了进行测试，你在开发系统上启动两个独立运行的RabbitMQ节
点。由于源服务器和目的服务器都使用相同的rabbitmq.config文件，因此你最
终将运行两个完全相同的Shovel：一个在源服务器上，另一个在目的服务器上。通
常情况下，你只想要一个Shovel，但是既然你在本地运行两个节点，那么使用同一
份配置文件来做测试会更方便。如果你仍然运行着warren那一章节的rabbit_a和
rabbit_b那两台服务器的话，现在马上把它们停下来，因为你将在本例中重用它
们。一旦停止之后，进入RabbitMQ安装目录并运行RABBITMQ_NODE_PORT=5675
RABBITMQ_NODENAME=rabbit_a./sbin/rabbitmq-Server 来启动源节点（别
使用-detached选项，这样你可以在配置文件中观察错误信息）。由于第一个终端
已经被源服务器占用，因此开启一个新的终端并运行RABBITMQNODEPORT=5676
RABBITMQ_NODENAME=rabbit_b./sbin/rabbitmq-serVer来启动目的节点。
在这两台服务器运行之后，你需要一个消费者和生产者以便测试。对集群的消费者
和生产者稍加修改就可以处理牛油果订单了。首先，让我们看看消费者，如下列清
单所示。
---
## Page 173
7.3远距离通信和复制
151
清单7.3Shovel测试消费者
import sys，json,pika,time,traceback
def msg_rcvd(channel，method,header,body):
打印订单
并确认
message = json.loads(body)