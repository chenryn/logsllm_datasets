t
d
)
)
)
B
=
/()
ˆ
ttr
∇⋅
φ
(
θ
((
⋅
aB
In  our  experiments,  the  forecast  of  the  predictor 
ARIMA is computed by the Resource Prediction System 
. In this equation: B is 
[7], as 
the backward shift operator defined by B.rttt = rttt-1; ∇ is 
the backward difference operator defined by ∇.rttt = rttt
-  rttt-1 =  (1-B).rttt; at  is  the  noise  at  period  t; d  is  the 
non-stationary  order;  φ(B)  and  θ(B)  are 
the  B
polynomials  with  p  and  q  coefficients,  respectively, 
where p is the number of autoregressive terms and q is 
the number of moving average terms. As this predictor 
through 
forecasts  based  on  polynomial 
carries 
equations, to get a good forecast we periodically refit 
the polynomial structure and its parameters (p, d and q). 
In our experiments, after 120 new samples, the model is 
adjusted from the last 360 values of the rtt time series. 
The final decision to refit takes into account the square 
error of the prediction. 
3.3. Variable safety margins 
The  two  variable  safety  margins  specified  in  this 
section are: the prediction error-based margin (peb) and 
the  confidence  interval  based  margin  (cib).  Under 
different  strategies,  these  margins  exhibit  different 
behaviors.  Consider  that  the  network  traffic  (and 
consequently,  the  communication  delay)  presents  a 
significant variation. The peb margin will have its value 
adjusted to the capacity of the predictor to hit the next 
sample.  As  soon  as  the  prediction  error  changes,  the 
margin  will  be  quickly  recalculated  to  accommodate 
that  error.  On the  other  side, the cib margin  does  not 
change  with  the  variations  in  the  prediction  error.  It 
uses probability to guarantee that the next sample does 
not  extrapolate 
the 
distribution function of the estimator. Both margins are 
explained in the following.  
timeout  by  considering 
the 
Similarly to Jacobson’s estimation method [13], the 
margin  peb  adapts  its  value  each  time  the  failure 
detector receives a message and the network load has 
varied, i.e., according to the error of the last estimation. 
Then, under a new message reception, at time t, a new 
t
t
1
+
−
)
rtt
ˆ
ttr
peb
t
peb
t
=+
margin value is computed by (
α
−
.
peb
t
where  αis  the  smoothing  constant, 
trtt  is  the  last 
tttrˆ is the last estimation 
measured round-trip delay and 
of the round-trip delay. In this paper, we set α= 0.25 to 
obtain a fast reaction to error variation.  
Under  different  assumptions, 
the  margin  cib
assumes  that  the  predictor  appropriately  models  the 
round-trip communication delay, making the prediction 
error  to  be  considered  a  white  noise.  Further,  by 
considering that the estimator could behavior as a linear 
function, at time t, the margin cib is computed by  
)
2
rtt
−
)
2
rtt
cib
t
+
1
=
1ˆ58.2 σ
+
+
1
n
(
rtt
n
∑ =
(
1
i
−
t
rtt
i
where  the  constant  2.58  corresponds  to  the  99%  of 
confidence in the standard Normal distribution function, 
σˆ is the estimator of the standard deviation of the  rtt
and  n  is  the  number  of  samples  considered  in  its 
computation. 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
4. The evaluation of the Quality of Service 
five  QoS  metrics 
To  evaluate  the  effects  of  multiple  communication 
delay  predictors  associated  to  different  possibilities  of 
safety  margins  on  the  quality  of  service  of  the  failure 
detector,  we  used 
that  are 
implementation-independent  [5]:  one  measures  the 
impact of model on the speed of the failure detector and 
the other four measure the impact on its accuracy. From 
[5], considering two process p and q where q monitors p,
the quality of service of the failure detector at q (called 
fdq) can be determined from its transitions between the 
trust and suspect states with respect to p (see Figure 1).  
p
fdq
up
trust
suspect
TM
TMR 
down
TD
Figure 1. Quality of Service metrics 
The speed metric TD (Detection Time) measures the 
time that elapses from p’s crash to the time when q starts 
suspecting  p  permanently.  The  accuracy  metric  TMR
(Mistake Recurrence Time) measures the time between 
two consecutive mistakes, and the accuracy metric TM
(Mistake Duration) measures the delay needed by fd to 
correct  a  mistake.  Derived  from  TMR  and  TM,  the 
accuracy  metrics  λ  (Average  Mistake  Rate)  and  PA
(Query Accuracy Probability) correspond to the rate at 
which fd makes mistakes, and the probability that fd is 
correct at a random time, respectively.  
In  this  paper,  we  have  evaluated  the  effect  of 
predictors  and  safety  margins  over  the  QoS  of  the 
failure detector by using a simulator. The QoS metrics 
can by computed from the state transition history (here 
represented by Htransition) of a FD [5]. Thus, to evaluate 
the effect of different predictors, we computed Htransition
considering a set of collected traces seq of 
pairs.  In  each  pair,  the  mseq  is  the  timestamp  of  a 
received  message  m and  the  rtt  is  the round-trip  time 
measured  from  mmseq.  The  algorithm  presented  in 
Figure 2 specifies how we compute the state transition 
history from seq. Let nseq be the timestamp associated 
to  the  current  timeout  (started  when  mmseq+1  is  send), 
when  a  valid  message  is  received  (neither  duplicated 
nor an old message). If the arrival time of m (mseq . ti + 
rtt)  is  greater than  the  time  when the  current  timeout 
expires (nseq . ti + to) and is greater than the last trust 
transition  (Htransition[t-1]  at  time  t),  then  the  simulator 
generates  a  couple  of  transitions  on  history.  The 
received message allows the monitor process q to trust 
the monitorable process p.
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9) 
(10)
(11) 
(12)
(13)
(14)
(15)
(16)
(17) 
(18)
(19)
initialization:
       t ← 1;                                                                          { transition index }
       seq ← collected samples;
       Htransition[0] ← 0;  
       nseq ← 1;                                                             { message timestamp } 
       ti ← interrogation period;  
       to ← initial timeout; 
for all  ∈ seq do
       get next  from seq;
       if mseq ≥ nseq then
              if (mseq . ti + rtt) > (nseq . ti + to) > Htransition[t-1] then
                     Htransition[t] ← nseq . ti + to;                                    { a Stransition  }
                     Htransition[t+1] ← mseq . ti + rtt;                             { a Ttransition  }
                     t ← t + 2;
              end if 
              nseq ← mseq + 1; 
              compute a new to;         { different predictors compute different to }
       end if 
end for
Figure 2. Algorithm to compute the state transition history of the failure detector 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
From Htransition, the speed metric TD is computed by 
considering  that  q-p  one-way  communication  delay  is 
equal to p-q one-way communication delay. Thus, each 
possible failure instant tfailure can be computed as tfailure = 
nseq.ti  +  rttnseq/2,  and  the  speed  metric  TD  can  be 
computed by  
n
= ∑
=
1
k
(
t
i
+
t
k
o
−
(
rtt
k
nseq
)2/
) n
/
T
D
where  n  is  the  number  of  possible  detection  actions 
during the execution. 
The  accuracy  metrics  are  computed  by  considering 
failure  free  executions.  From  Htransition,  the  mistake 
duration metric can be computed from the equation 
T
M
n
= ∑
=
1
k
(
H
k
[
t
transition
−+
]1
H
k
transition
][
t
) n
/
for all t<2n | t=1,3,5,..., where n is the number of wrong 
suspicions,  Htransition[t+1]  is  a  trust  transition  and 
Htransition[t] is a suspicion transition. In a similar way, the 
mistake recurrence time metric is computed by 
T
MR
−
1
n
= ∑
=