●页 Options for Code Generation Conventions 位于 http://gcc.gnu.org/onlinedocs/
gcc/Code-Gen-Options.html.
°《Radamsa Fuzzing 技术和代码覆盖问题的若干思考》位于 http:/www. cs.tut.fi/
tapahtumat/testaus12/kalvot/Wieser_20120606radamsacoverage.Pdf。
273
---
## Page 292
第9章加密与在开发时使用设备
管理策略
在这一章里，我们将做这些实验：
·使用加密库；
·生成对称加密密钥：
保护 SharedPreferences数据：
·基于口令的加密；
·用SQLCipher加密数据库：
•AndroidKeyStore provider:
·在开发时使用设备管理策略。
9.1简介
本章的主要讨论的是如何正确使用加密技术，在设备上安全地存储数据。我们
首先要引入我们自己实现的加密算法库，使得较老的设备上也能实现较高强度的加
密算法，给后续的讨论提供一个稳固的基础。
需要解决的一个简单的任务就是生成对称加密密钥。不过，默认设置并不总是
更安全的。我们着眼于通过指定特定的参数，来确保使用最强的加密算法，同时还
会回顾一个会破坏所生成的密钥的安全性的常见错误和操作系统bug。
接下来，我们要了解几种安全地储存加密密钥的方法。这些方法包括使用第三
方库，或者使用一个在Android4.3中引入的，名为“AndroidKeyStore”的系统服务。
274
---
## Page 293
第9章加密与在开发时使用设备管理策略
在这之后，我们学习如何使用一个密钥推导函数，从用户的口令或pin码中推导出加
密密钥的方法，这使得我们不必非得要把密钥保存在设备里了。
我们还将讨论如何有效地整合SQLCipher，使你能加密你的app中的SQLite 数
据库，这将极大地提高你的app中数据的安全性。
最后，我们将介绍设备管理API，这是专门设计供企业级应用使用的，以强制执
行设备（管理）策略和和安全防护，以进一步保护设备的。我们还会实现两个虚拟
（却也实用的）的企业级策略，以确保该设备已启用加密存储和超时锁屏。
9.2使用加密库
对于Android来说，以Java为核心编程语言的优处之一在于：它包含了Java 加
密扩展（Java Cryptographic Extension，JCE）。JCE是一个设计良好，并经过严格测
试的安全API集。Android 使用 Bouncy Castle 作为这些API的开源实现.不过 Bouncy
Castle 的版本会因Android 版本不同而有所改变，且只有在较新的Android版本中才
有最新的补丁。同时，主要为了减少 Bouncy Castle 的大小，Android 定制了 Bouncy
Castle库，并删除了其中的一些服务和API。所以，如果你打算在Android4.0以下版
本上运行椭圆曲线加密（ECC）时，加密服务会提示错误。另外，虽然Bouncy Castle
支持AES-GCM算法（我们会在下一个实验中介绍它），但如果不专门在源码中include
一下相关的代码，你也不能在Android中使用它。
为了解决这个问题，我们可以在app的实现代码中引入一些加密库。这个实验将
告诉你如何在代码中引入Spongy Castle库，相对于Android中的 BouncyCastle 实现，
这个库更新些并且支持更多的加密选项。
你可能想知道“为什么是Spongy Castle，而不是使用 Bouncy Castle库呢”。因为，
Android已经自带了一个旧版本的BouncyCastle，所以我们要给这个库的包重新起个
名字，以避免“classloader”冲突。Spongy Castle 就是重新打包过的 Bouncy Castle。
事实上，你可以随意命名这个包，只要不是org.bouncycastle 就行了。
怎么做
我们将 Spongy Castle 添加到我们的 Android app 中。
1. 去 https:/github.com/rtyley/spongycastle/fdownloads 下载最新的 Spongy Castle
二进制文件。
请阅读MIT的X11许可（和 Bouncy Castle一样），以确保你是在合法地使用它。
275
---
## Page 294
Android安全攻防实战
2.解压，并把 Spongy Castle 中的jar文件复制到你 app 程序的/libs 目录里。
° sc-light-jdk15on:核心轻量级 API。
。scprov-jdk15on: JCE provider (需要 sc-light-jdk15on)。
3.把下面这个 static 代码块加到你的Android app 对象中。
Security. insertProviderAt (new org .spongycastle-Jce -provider
BouncyCastleProvider(), 1);
1
工作原理
我们用static代码块调用Security.insertProviderAtO方法，这是用来确保已经被据
绑在我们的 app 的/lib 文件夹里的 Spongy Castle provider 会被优先使用。通过将
position参数设为1，可以确保其优先于现有的安全provider。
把 Spongy Castle与JCE和在一起使用的妙处在于：不需要对现有的加密代码进
行任何修改。在本章中，我们将展示一个不论是在 Bouncy Castle上，还是在 Spongy
Castle上，都能正常使用的加密代码样例。
进一步说明
如前所述，代码可以到GitHub上下载。不过，你也可以建立自己的版本。Spongy
Castle 代码仓库的维护者RobertoTyley，已经在其中包含了一个名为
become-spongy.sh的bash脚本，用它可以把com.bouncycastle重命名为
com.spongycastle。因此，你可以用它，把自己新下载的，并更新了版本的 Bouncy Castle
库，重命名为org.spongycastle或其他同样又酷又好记的名字。
become-spongy.sh 这个 bash 脚本可在 https://gist.github.com/
scottyab/8003892找到。
拓展阅读
使用JCE API.
°Spongy Castle 在GitHub 中的代码位于 http://rtyley.github.io/spongycastle/
#downloads
●Bouncy Castle 主页位于 http:/www.bouncycastle.org/java.html
276
---
## Page 295
第9章加密与在开发时使用设备管理策略
●使用Java加密扩展OWASP社区页面位于https://www.owasp.org/index.
php/Using_the_Java_Cryptographic_Extensions。
9.3生成对称加密密钥
对称密钥就是一个同时用于加密和解密的密钥。通常，为了创建密码学意义上
安全的加密密钥，我们会使用安全的伪随机数发生器。这个实验会向我们示范如何
正确地初始化SecureRandom 类，以及如何用它来初始化一个AES（Advanced
Encryption Standard，高级加密标准）加密密匙。AES是继DES之后的新一代加密标
准，通常使用长度为128位和256位的密钥。
正如上一个实验中所注解的那样，不管使用的是BouncyCastle还
是Spongy Castle，代码是没有什么差异的。
怎么做
我们来创建一个安全的加密密钥。
1.编写下面这个函数，生成一个对称AES加密密钥。
public static SecretKey generateAESKey (int keysize)
throws NoSuchAlgorithmException (
final SecureRandon random = new SecureRandom();
final KeyGenerator generator - KeyGenerator.
getInstance(*AES") :
generator.init (keysize, random) :
return generator.generateKey () :
2.创建一个随机的32个字节的初始化向量（IV)，其长度应该与AES密钥的长
度（256位）相匹配。
private static IvParameterSpec iv;
public static IvParameterSpec getIV()(
if (iv = null) {
byte[] ivByteArray = nev byte [32];
// populate the array with random bytes
new SecureRandom () .nextBytes (LvByteArray) 
iv = nev IvParameterSpec (ivByteArray) 
277
---
## Page 296
Android安全攻防实战
fAT uxnqex
3.编写下面这个函数，加密一个任意字符串。
public static byte[] encrpyt (String plainText)
throws GeneralSecurityException, IOException (
final Cipher cipher = Cipher-getInstance (*AES/CBC/
PKCS5Padding*) ;
cipher. init (Cipher.ENCRYPT_MODE, getKey () , getIV ()) 
return cipher, doFinal (plainText , getBytes (*UTF-8")) 
public static SecretKey getKey() throws NoSuchAlgorithmException
1f (key == nu11)(
key = generateAESKey (256) :
1
return key
4.为了完整起见，上面的这段代码演示了如何解密。唯一不同的是，我们改
用常量Cipher.DECRYPT_MODE来调用Cipher.initO方法，
public static String decrpyt (byte[] cipherText)
throws GeneralSecurityException, I0Exception (
final Cipher cipher - Cipber,getInstance (*AES/CBC/
PKCS5Padd1ng*) ;
clpher ,InIt (Cipher,DECRYPT_MODE, getKey () , getIV()) /
return cipher,doFinal (cipberText) .toString ()
在这个例子中，我们将密钥和IV存为静态变量。在现实应用中，这一做法并不
明智。一个简单的办法是：把密钥存放在SharedPerferences 中（用Context
MODE_PRIVATE标志），这样，在app的各个会话里就都能使用同一个密钥了。下
一个实验中，将把这个想法进一步发展为使用加密版本的 SharedPerferences。
如何做
创建SecureRandom对象时，只要调用一下它的默认构造函数就行了。这个类还
有其他可以使用的构造函数，但是默认的构造函数使用的是最强的加密provider。我
们把一个SecureRandom类的实例和参数keysize一起传递给KeyGencrator类，同时
①原文如此，显然这里是“下面的”之误。—译者注
278
---
## Page 297
第9章加密与在开发时使用设备管理策略
系统，它被认为是密码学意义上安全的。
这里，我们引入了一个初始化向量（IV）—简单地说，这个初始化向量增加了
加密的强度。而且在加密超过一条消息/项目（item）时是必不可少的，这是因为：
如果能把用同一个密钥加密的多条消息放在一起分析的话，对于密文的破译是很有
帮助的。使用了一个弱IV 也是WEP（Wired Equivalent Privacy）协议被破解的原因
之一。所以，建议为每个消息生成一个薪的IV。并把它和密文存放在一起。比如你
可以把IV预先附加或将其与密文串联在一起。
在我们的示例代码中，我们使用Cipher对象的AES实例，再用ENCRYPT_MODE
和新生成的SecretKey初始化它。最后，我们调用cipher.doFinal把我们输入的明文加
密起来，并返回一个存有密文的字节数组。
在对Cipher对象申请使用AES加密模式时，一个常见的问题是：只是简单地使
用AES，面且这个问题也存在于Android文档中。由于它默认使用的是由
“AES/ECB/PKCS7Padding”参数指定的，最简单的和安全性较低的 ECB模式。因此，
我们应该明确地用“AES/CBC/PKCS5Padding”参数，要求使用更强的CBC模式，
如示例代码中所示的那样。
进一步说明.
这里我们还需认识一下如何使用一个名为AES-GCM的强大的加密模式，以及
一个常见的，会导致生成的密钥安全性降低的错误做法。
用AES-GCM强化对称加密
我们注意到，简单地使用AES时，默认并不是最强模式。如果我们引入了Spongy
Castle库，我们可以使用更为强大的AES-GCM。它不光含有认证功能，还可以检测
密文是否遭到了募改。要使用AES-GCM，定义算法/转换字符串时，使用AES/GCM
NoPadding就可以了。比如下面这行代码。
错误做法—设定种子
自从Android4.2开始，SecureRandom的默认伪随机数生成器（PRNG）的provider
就改为OpenSSL了。这禁用了刚才提到的，BouncyCastleprovider提供的，手工设定
SecureRandom对象种子的功能。这是个很棒的改变，因为它避免了开发者在设定种
子时的一种常见的错误做法。
279
---
## Page 298
Android安全攻防实战
byte []  myCustomSeed = new byte []  ( (byte)42 1;
secureRandom, setSeed (myCustomSeed) :
int notRandom = secureRandom,nextInt () :
在上面这段代码示例中，我们可以看到种子被手动设置为42，其结果是
notRandom变量将会总是等于相同的数字。虽然这在单元测试非常有用，但它使得用
SecureRandom生成密钥，以期增强安全性的努力全都白费了。
Android 的 PRNG bug
就像前面说过的那样，在Android4.2及后续版本中，默认的伪随机数发生器
（PRNG）provider已经改成了OpenSSL。不过2013年8月，这个随机数发生器还爆
出了一个严重的bug。好几款Android比特币钱包客户端app因此而被攻破。也使得
这一bug尤为引起关注。问题是出在安全随机数生成的种子上的。由于没有使用复
杂且独立的系统指纹，而是只用null初始化了它，这个bug的错误性质和之前我们
字生成出来的。受此漏洞影响的Android版本有4.1（Jelly Bean）、4.2和4.3等。
发表在Android博客上的一篇名为《关于SecureRandom 的一些思考》（Some
SecureRandomThoughts）的文章中给出了一种修复方法，并为开放手机联盟公司提
供了补丁。万一在运行你的app的设备上不能使用这个补丁的话，建议你在你的app
的onCreateO方法中调用这个补丁。
厂
为了方便你阅读，这里还给出了谷歌放在GitHub上的代码，你
拓展阅读
·在“保护SharedPreference数据”这个实验中，我们生成了一个AES密匙来
加密app 的 SharedPreferences。
·Androidapp中加密误用的实证研究，位于http:/cs.ucsb.edu/yanick/
publications/2013_ccs_cryptolint.pdf.
·Android 开发人员参考指南者中 SecureRandom类章节位于htps://developeL
android.com/reference/java/security/SecureRandom.html.
·Android开发人员参考指南者中KeyGenerator 类章节位于https://developer.
android.com/reference/javax/crypto/KeyGenerator.html。
·Android博客上的文章《关于SecureRandom的一些思考》位于http:/
androiddevelopers.blogspot.co.uk/2013/08/some-securerandom-thoughts.html.
---
## Page 299
第9章加密与在开发时使用设备管理策略
·开放手机联盟成员网站http://www.openhandsetalliance.com/oha_members
html.
9.4保护SharedPreferences数据
Android为app开发人员提供了一个简单的框架，使他们能够持久保存原始数据
类型的键-值对。本实验举例说明了伪随机生成的密钥的一个实际应用，并演示了如
何使用Secure-Preferences。Secure-Preference是一个开源库，它打包了默认用于加密
键-值对的Android SharedPreferences，保护其免受攻击。Secure-Preferences 兼容
Android2.1+系统，而且它使用的是Apache2.0用户许可，因而可以用于商业开发。
在这儿还必须再加一句，兄弟我是Secure-Preferences库的维护者，同时也是它
的创始人之一。另一个很棒的 Secure-Preferences 的替代品是名为 Cwac-prefs 的库，
它是由SQLCipher（之后的实验中将讨论）支持的。
准备工作
我们先引入Secure-Preferences库。
1.到GitHub 网站上去下载或 clone°Secure-Preferences。地址是 https:/github.
com/scottyab/secure-preferences。
Secure-Preferences代码仓库包含有一个Android库项目和一个样本项目。
2.将库正常链接到你的 Android项目。
怎么做..
开始吧。
1.只要使用Android的context 就可以初始化SecurePreferences 对象了。
SharedPreferences prefs = SecurePreferences (context) ;
Editor edit = prefs.edit () 