In  the  gate  replacement  fault  model,  a  gate  may  be 
replaced by another gate. For example, Figure 10 shows 
how an AND-gate can be replaced by an OR-gate. 
It  should  be  noted  that  all  of  the  FIUs,  which  are 
introduced  in  this  section  for  gate-level  fault  injection, 
are  synthesizable.  Therefore  they  can  be  used  to  inject 
faults  into  both  the  simulated  and  emulated  parts of the 
target system. 
4.3. Behavioral-level fault models 
FITSEC  can  be  used  to  inject  stuck-then  [5][26], 
stuck-else  [5][26]  and  micro-operation  [5][26]  fault 
models  to  behavioral  descriptions.  For  example,  Figure 
11 shows how FITSEC can inject a stuck-then fault into a 
VHDL  model.  FITSEC  inserts  the  FIUs  in  behavioral 
descriptions so that synthesizable descriptions retain their 
synthesizability. 
5. Simulation and emulation co-operation 
 After the addition of FIUs, the generated code, which 
contains  FIUs,  is  partitioned  into  two  parts.  One  part is 
simulated and the other is emulated. As shown in Figure 
12,  there  are  some  signals  with  one  endpoint  at  the 
simulator  and  the  other  at  the  emulator.  Therefore,  a 
communication mechanism is needed for transferring the 
signal  values  between  the  simulator  and  the  emulator. 
FITSEC  uses  Programming  Language  Interface  (PLI) 
[37] 
the 
the  communication  between 
to  establish 
b) The code after FUI addition 
and 
parts.  The  PLI-based 
emulated 
communication  between  a  simulator  and  an  emulator  is 
discussed in [6] and [8]. 
simulated 
Essentially PLI is a mechanism to invoke a C function 
from a Verilog code [37]. The C language can be used to 
develop the functions, which transfer data between a PC 
and an emulator board through the I/O ports. By the use 
of  PLI,  these  functions  can  be  called  within  Verilog 
codes.  
to 
the  emulator  by 
argument 
the  adder  are  sent 
As an illustration, Figure 13 shows how in FITSEC, a 
4-bit  adder  can  be  moved  from  the  simulator  to  the 
emulator.  Here,  the  4-bit  adder  is  only  an  illustrative 
example  and  real  emulated  components  can  be complex 
circuits whose simulation is time-consuming. The inputs 
of 
the 
$WriteToEmulator()  PLI  routine  (See  Figure  13b)  and 
the  outputs  of  the  emulated  adder  are  received from the 
emulator  by  the $ReadFromEmulator() PLI routine. The 
ID 
and 
of 
$ReadFromEmulator() 
the  emulated  adder 
among the emulated components. It should be noted that 
the  emulated  adder  operates  concurrently  with  the 
simulation of all the simulated modules. Also, when the 
adder is moved from the simulator to the emulator, there 
is  no  need  to  modify  the  rest  of  the  code  even  the 
modules,  which  have  instantiations  of  the  emulated 
adder. Moreover, the timing characteristic of the adder is 
not  changed  when  it  is  moved  to  the  emulator.  This  is 
because the results of the emulated adder are assigned to 
the simulator signals with the same delay. Therefore the 
whole system resembles a unique simulator in results.   
$WriteToEmulator() 
identifies 
It should be noted that in both the VHDL and Verilog 
languages 
timed  assignments  make  models  non-
synthesizable.  Although  the  4-bit  adder  described  in 
Figure  13a  contains  a 
timed  assignment,  FITSEC 
synthesizes  only  the  logic  of  the  component  into  the 
emulator (i.e. removes the timing characteristic from the 
assignment and then synthesizes it) and retains its timing 
in  the  simulator.  Therefore,  FITSEC  can  emulates  even 
non-synthesizable  models,  provided  that  they  can  be 
converted  to  synthesizable  models  by  removing  the 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:22 UTC from IEEE Xplore.  Restrictions apply. 
PLI Interface
Simulated 
components
Emulated 
components
module adder4(sum,c_o,a,b,c_in); 
 output [3:0]sum; 
 output c_o; 
 input [3:0]a,b; 
 input c_in; 
(a)
 assign #10 {c_o, sum} = a+b+c_in; 
endmodule
Figure 12. The communication between the 
simulator and the emulator. 
(b)
timing descriptions. In this paper, such non-synthesizable 
models are called functionally synthesizable models. 
module adder4(sum,c_o,a,b,c_in); 
 output [3:0]sum; 
 output c_o; 
 input [3:0]a,b; 
 input c_in; 
 wire [4:0]temp; 
 always @(a,b,c_in) 
 begin 
   $WriteToEmulator(ID,a,b,c_in); 
   $ReadFromEmulator(ID,temp); 
 end 
 assign #10 {c_o, sum} = temp;
endmodule
The  use  of  PLI  routines  is  one  of  the  features  of  the 
Verilog  language  and  it  can  not  be  used  in  VHDL 
models.  However, 
the 
simulation of mixed-Verilog-VHDL codes. By the use of 
such simulators, even a VHDL code can use PLI routines 
[6][8].
simulators 
some 
support 
6. Code partitioning 
Before  the  use  of  the  simulation  and  emulation  co-
operation,  the  target  system  should  be  partitioned  into 
two parts. This partitioning operation is highly based on 
the nature of the code as well as the interactions between 
the  user  and  FITSEC.  Some  of  the  important  issues, 
which should be considered in the partitioning operation, 
are: 
• Only  synthesizable  or  functionally  synthesizable 
components  can  be moved to the emulator and other 
non-synthesizable  components  should  be  retained  in 
the simulator. 
• The  components,  whose  signals  are  specified  by  the 
user  for  being  monitored,  should  be  retained  in  the 
simulator. 
• The  synthesizable  or 
functionally  synthesizable 
components,  whose  simulation  is  time-consuming, 
should  be  moved  to  the  emulator.  Presently,  user 
should  tell  FITSEC  which  components  impose  long 
simulation times and should be emulated. 
Based  on  these  criteria,  FITSEC  selects  some  of  the 
components  of  the  target  system and moves them to the 
emulator.  As  an  example,  Figure  13  shows  how  a 
component can be moved to the emulator. 
Figure 13: a) A Verilog model of a 4-bit 
adder, b) The code, which must substituted 
for the emulated 4-bit adder 
7. Fault activation and data analysis 
A simulator macro is used to assign values to the FISs. 
This  macro  controls even the FIUs, which are moved to 
the  emulator.  In  this  case,  the  FIS  is  a  signal  with  one 
endpoint  at  the  simulator  and the other at the emulator. 
So,  the  PLI-based  communication  mechanism  transfers 
the  values  of  the  FIS  to  the  emulator. The  macro  is 
automatically generated based on the user-specified fault 
characteristics.    By  the  use  of  this  macro,  FITSEC 
automatically  injects  the  faults  one  after  another  and 
saves  the  user-specified  signal  traces  for  each  fault 
injection  experiment.  Moreover,  FITSEC  runs  the  fault-
free  model  of  the  target  system  and  saves  the  signal 
traces.  The  final  step  is  to  extract  the  experimental 
results  from  the  saved  signal  traces.  The  data  analysis 
unit performs this information extraction automatically. 
the 
fault-free  model  and  extracts 
In  the  first  step,  the  data  analysis  unit  compares  the 
signal  traces  of  each faulty model with the signal traces 
of 
the  error 
manifestation latencies for the user-specified signals. An 
error manifests on a signal if its value in the faulty model 
differs  from  its  value  in  the  fault-free  model.  Error 
manifestation  latency  of  a  signal  is  defined  as  the  time 
from  the  injection  of  a  fault  to  the  manifestation  of  an 
error  on  the  signal.  After  the  extraction  of  the  error 
manifestation  latency  values,  the  data  analysis  unit 
computes  mean,  median,  standard  deviation,  maximum, 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:22 UTC from IEEE Xplore.  Restrictions apply. 
and  minimum  of  the  latency  values  for  each  user-
specified signal. 
In FITSEC, only the simulator saves the signal traces 
and  the  emulator  does  not  save  any  values. Therefore if 
one  wants  to  save  the  signal  values  of  an  emulated 
component, the signal values should be transferred to the 
simulator by the interface. If the number of the monitored 
signals  of  a  component  is  greater  than  a  user-defined 
threshold  value,  the  component  will  be  retained  in  the 
simulator. Such a component is not a good candidate for 
being emulated because it needs a high observability. 
8. FITSEC environment 
The  FITSEC  environment  consists  of  two  parts:  a 
PCI-based  PLDA  board  [22]  and  a  ModelSim  simulator 
(Version  5.5a)  [21].  The  simulator  is  run  on  a  Pentium 
IV system (1.4 GHz, RAM=256MB, OS=Windows Me). 
The PLDA board is connected to the computer via a PCI 
expansion slot. An FPGA chip, FLEX 10K200SFC484-1 
[22],  is  mounted  on  the  board.  This  FPGA  can  be 
configured 
the 
configuration,  the  FPGA  can  communicate  with  the 
computer through the PCI bus.  
the  PCI  bus.  Also,  after 
through 
FITSEC  does  not  use  the  special  features  of  the 
simulator  and  the  emulator.  Therefore,  other  simulators 
or  emulators  can  be  used  in  the  FITSEC  environment. 
However,  only 
the 
simulation of mixed-VHDL-Verilog models, can employ 
Verilog  PLI  in  VHDL  codes.  Thus,  if  one  wants  to  use 
FITSEC  to  evaluate  a  VHDL  model, a simulator should 
be used that supports mixed-VHDL-Verilog models. 
those  simulators,  which  allow 
9. A case study 
A  32-bit  processor  (DP32)  has  been  used  as  a 
benchmark  to  evaluate  FITSEC.  The  main  reason  for 
using  DP32  is  that  it  has  been  used  as  a  benchmark  to 
evaluate some of the HDL-based fault injection tools such 
as  MEFISTO[26]  and  VERIFY[39].  The  fault  injection 
experiments  were  carried  out  with  FITSEC  on  a 
structural  model  of  DP32,  which  was  developed  by  the 
VHDL 
the  structural 
architecture of the DP32 processor. 
language.  Figure  14  shows 
The  ALU  unit  of  the  DP32  processor supports 32-bit 
addition,  subtraction,  multiplication,  division,  and,  or, 
xor, and mask operations. A synthesizable VHDL model 
of  the  ALU  was  developed.  The  partitioning  of  the 
processor model was so that the ALU unit was emulated 
while the rest of the circuit was simulated. 
Table  2  lists  the  FIUs,  which  were  inserted  into  the 
target  system  model.  The  control  unit  of  the  processor 
was  described  using  a  behavioral  description.  So,  as 
Figure 14. Structural architecture of DP32
shown  in  Table  2,  stuck-then,  stuck-else,  and  micro-
operation fault models were used for this component. 78 
FIUs were inserted into the target system model. 32 FIUs 
were  inserted  into  the  ALU.  Therefore,  32  FIUs  were 
emulated  while  46  FIUs  were  simulated.  Table  3  shows 
the number of the FPGA logic cells, which were used by 
the ALU unit as well as the hardware overhead of the 32 
emulated FIUs. 
Table 2. The characteristic of the inserted FIUs 
# of FIUs 
Target points 
Fault model 
 output lines 
PC-input lines 
IR-input lines 
IR 
Controller 
Controller 
Reg. File input lines  Stuck-at 
ALU  
ALU 
CC 
 input lines 
Stuck-at 
Stuck-at 
Bridging 
Stuck-then & Stuck-else 
Micro-operation 
Gate replacement 
Stuck-at 
Stuck-at 
7 
7 
7 
7 
7 
8 
16 
16 
3 
Table 3. Available and consumed FPGA 
resources (FLEX 10k200SFC484-1) 
Total available LCs in the FPGA 
LCs used by the ALU without the FIUs  7081  70.92 
LCs used by the ALU and the FIUs 
7148  71.59 
% 
9984  100 
# 
Two  different  workloads  were  run  on  the  target 
system: 
• A Bubble-sort sorting program applied to a set of 100 
values. 
• An  inverse  matrix  computation  program  applied  to 
5×5 matrices. 
For both of the workloads the same set of FIUs was used. 
In each fault injection campaign, 3120 faults are injected 