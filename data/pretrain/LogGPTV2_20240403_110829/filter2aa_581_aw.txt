   "iat":1402115434
}
GENERATING A JWE TOKEN WITH RSA-OAEP AND AES WITH A NON-JSON PAYLOAD
the following Java code generates a Jwe token with rsa-Oaep and aes for a non- 
JsON payload. you can download the complete Java sample as a Maven project from 
https://github.com/apisecurity/samples/tree/master/ch08/sample02—
and it runs on Java 8+. First you need to invoke the method generateKeyPair() 
and pass the PublicKey(generateKeyPair().getPublicKey()) into the method 
buildEncryptedJWT():
// this method generates a key pair and the corresponding public key is used  
// to encrypt the message.
public static KeyPair generateKeyPair() throws NoSuchAlgorithmException, 
JOSEException {
    // instantiate KeyPairGenerate with RSA algorithm.
    KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance("RSA");
    // set the key size to 1024 bits.
    keyGenerator.initialize(1024);
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
207
    // generate and return private/public key pair.
    return keyGenerator.genKeyPair();
}
// this method is used to encrypt a non-JSON payload using the provided  
// public key.
public static String buildEncryptedJWT(PublicKey publicKey) throws 
JOSEException {
    // create JWE header with RSA-OAEP and AES/GCM.
    JWEHeader jweHeader = new JWEHeader(JWEAlgorithm.RSA_OAEP, 
EncryptionMethod.A128GCM);
    // create encrypter with the RSA public key.
    JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);
    // create a JWE object with a non-JSON payload
    JWEObject jweObject = new JWEObject(jweHeader, new Payload("Hello 
world!"));
    // encrypt the JWT.
    jweObject.encrypt(encrypter);
    // serialize into base64-encoded text.
    String jwtInText = jweObject.serialize();
    // print the value of the JWT.
    System.out.println(jwtInText);
    return jwtInText;
}
to build and run the program, execute the following Maven command from the ch08/
sample02 directory.
\> mvn test -Psample02
GENERATING A NESTED JWT
the following Java code generates a nested Jwt with rsa-Oaep and aes for encryption and 
hMaC-sha256 for signing. the nested Jwt is constructed by encrypting the signed Jwt. you 
can download the complete Java sample as a Maven project from https://github.com/
apisecurity/samples/tree/master/ch08/sample03—and it runs on Java 8+. First 
you need to invoke the method buildHmacSha256SignedJWT() with a shared secret and 
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON 
208
pass its output along with the generateKeyPair().getPublicKey() into the method 
buildNestedJwt():
// this method generates a key pair and the corresponding public key is used  
// to encrypt the message.
public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
    // instantiate KeyPairGenerate with RSA algorithm.
    KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance("RSA");
    // set the key size to 1024 bits.
    keyGenerator.initialize(1024);
    // generate and return private/public key pair.
    return keyGenerator.genKeyPair();
}
// this method is used to sign a JWT claims set using the provided shared  
// secret.
public static SignedJWT buildHmacSha256SignedJWT(String sharedSecretString) 
throws JOSEException {
    // build audience restriction list.
    List aud = new ArrayList();
    aud.add("https://app1.foo.com");
    aud.add("https://app2.foo.com");
    Date currentTime = new Date();
    // create a claims set.
    JWTClaimsSet jwtClaims = new JWTClaimsSet.Builder().
    // set the value of the issuer.
    issuer("https://apress.com").
    // set the subject value - JWT belongs to this subject.
    subject("john").
    // set values for audience restriction.
    audience(aud).
    // expiration time set to 10 minutes.
    expirationTime(new Date(new Date().getTime() + 1000 ∗ 60 ∗ 10)).
    // set the valid from time to current time.
    notBeforeTime(currentTime).
    // set issued time to current time.
    issueTime(currentTime).
    // set a generated UUID as the JWT identifier.
    jwtID(UUID.randomUUID().toString()).build();
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
209
    // create JWS header with HMAC-SHA256 algorithm.
    JWSHeader jswHeader = new JWSHeader(JWSAlgorithm.HS256);
    // create signer with the provider shared secret.
    JWSSigner signer = new MACSigner(sharedSecretString);
    // create the signed JWT with the JWS header and the JWT body.
    SignedJWT signedJWT = new SignedJWT(jswHeader, jwtClaims);
    // sign the JWT with HMAC-SHA256.
    signedJWT.sign(signer);
    // serialize into base64-encoded text.
    String jwtInText = signedJWT.serialize();
    // print the value of the JWT.
    System.out.println(jwtInText);
    return signedJWT;
}
// this method is used to encrypt the provided signed JWT or the JWS using  
// the provided public key.
public static String buildNestedJWT(PublicKey publicKey, SignedJWT signedJwt) 
throws JOSEException {
    // create JWE header with RSA-OAEP and AES/GCM.
     JWEHeader jweHeader = new JWEHeader(JWEAlgorithm.RSA_OAEP, 
EncryptionMethod.A128GCM);
    // create encrypter with the RSA public key.
    JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);
    // create a JWE object with the passed SignedJWT as the payload.
    JWEObject jweObject = new JWEObject(jweHeader, new Payload(signedJwt));
    // encrypt the JWT.
    jweObject.encrypt(encrypter);
    // serialize into base64-encoded text.
    String jwtInText = jweObject.serialize();
    // print the value of the JWT.
    System.out.println(jwtInText);
    return jwtInText;
}
to build and run the program, execute the following Maven command from the ch08/
sample03 directory.
\> mvn test -psample03
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
210
 Summary
• 
The JWE specification standardizes the way to represent encrypted 
content in a cryptographically safe manner.
• 
JWE defines two serialized forms to represent the encrypted payload: 
the JWE compact serialization and JWE JSON serialization.
• 
In the JWE compact serialization, a JWE token is built with five  
components, each separated by a period (.): JOSE header, JWE 
Encrypted Key, JWE Initialization Vector, JWE Ciphertext, and JWE 
Authentication Tag.
• 
The JWE JSON serialization can produce encrypted data targeting at 
multiple recipients over the same payload.
• 
In a Nested JWT, the payload must be a JWT itself. In other words,  
a JWT, which is enclosed in another JWS or JWE token, builds a 
Nested JWT.
• 
A Nested JWT is used to perform nested signing and encryption.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
211
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_9
CHAPTER 9
OAuth 2.0 Profiles
OAuth 2.0 is a framework for delegated authorization. It doesn’t address all specific 
enterprise API security use cases. The OAuth 2.0 profiles built on top of the core 
framework build a security ecosystem to make OAuth 2.0 ready for enterprise grade 
deployments. OAuth 2.0 introduced two extension points via grant types and token 
types. The profiles for OAuth 2.0 are built on top of this extensibility. This chapter talks 
about five key OAuth 2.0 profiles for token introspection, chained API invocation, 
dynamic client registration, and token revocation.
 Token Introspection
OAuth 2.0 doesn’t define a standard API for communication between the resource server 
and the authorization server. As a result, vendor-specific, proprietary APIs have crept 
in to couple the resource server to the authorization server. The Token Introspection 
profile1 for OAuth 2.0 fills this gap by proposing a standard API to be exposed by the 
authorization server (Figure 9-1), allowing the resource server to talk to it and retrieve 
token metadata.
1 https://tools.ietf.org/html/rfc7662
212
Any party in possession of the access token can generate a token introspection 
request. The introspection endpoint can be secured and the popular options are mutual 
Transport Layer Security (mTLS) and OAuth 2.0 client credentials.
POST /introspection HTTP/1.1
Accept: application/x-www-form-urlencoded
Host: authz.server.com
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
                     token=X3241Affw.423399JXJ&
                     token_type_hint=access_token&
Let’s examine the definition of each parameter:
• 
token: The value of the access_token or the refresh_token. This is 
the token where we need to get metadata about.
• 
token_type_hint: The type of the token (either the access_token or 
the refresh_token). This is optional and the value passed here could 
optimize the authorization server’s operations in generating the 
introspection response.
This request returns the following JSON response. The following response does not 
show all possible parameters that an introspection response could include:
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Figure 9-1. OAuth 2.0 Token Introspection
Chapter 9  Oauth 2.0 prOfiles
213
{
          "active": true,
          "client_id":"s6BhdRkqt3",
          "scope": "read write dolphin",
          "sub": "2309fj32kl",
          "aud": "http://my-resource/∗"
 }
Let’s examine the definition of the key parameters that you could expect in an 
introspection response:
• 
active: Indicates whether the token is active. To be active, the 
token should not be expired or revoked. The authorization server 
can define its own criteria for how to define active. This is the only 
required parameter the introspection response must include. All the 
others are optional.
• 
client_id: The identifier of the client to which the authorization 
server issued this token.
• 
scope: Approved scopes associated with the token. The resource 
server must validate that the scopes required to access the API are at 
least a subset of scopes attached to the token.
• 
sub: The subject identifier of the user who approved the 
authorization grant or in other words an identifier for the user 
who this token represents. This identifier is not necessarily a 
human-readable identifier, but it must carry a unique value all 
the time. The authorization server may produce a unique subject 
for each authorization server/resource server combination. This 
is implementation specific, and to support this, the authorization 
server must uniquely identify the resource server. In terms of privacy, 
it is essential that the authorization server maintains different subject 
identifiers by resource server, and this kind of an identifier is known 
as a persistence pseudonym. Since the authorization server issues 
different pseudonyms for different resource servers, for a given user, 
these resource servers together won’t be able to identify what other 
services this user accesses.
Chapter 9  Oauth 2.0 prOfiles
214
• 
username: Carries a human-readable identifier of the user who 
approved the authorization grant or in other words a human-
readable identifier for the user who this token represents. If you are 
to persist anything at the resource server end, with respect to the 
user, username is not the right identifier. The value of the username 
can change time to time, based on how it is implemented at the 
authorization server end.
• 
aud: The allowed audience for the token. Ideally, this should carry an 
identifier that represents the corresponding resource server. If it does 
not match with your identifier, the resource server must immediately 
reject the token. This aud element can carry more than one identifier, 
and in that case you need to see whether your resource server’s one 
is part of it. Also in some implementations, rather than doing one-to- 
one string match, you can also match against a regular expression. 
For example, http://∗.my-resource.com will find a match for 
both the resource servers carrying the identifiers http://foo.my- 
resource.com and http://bar.my-resource.com.
Note the audience (aud) parameter is defined in the Oauth 2.0: audience 
information internet draft available at http://tools.ietf.org/html/draft- 
tschofenig- oauth-audience-00. this is a new parameter introduced into the 
Oauth token request flow and is independent of the token type.
• 
exp: Defines in seconds from January 1, 1970, in UTC, the expiration 
time of the token. This looks like redundant, as the active parameter 
is already there in the response. But resource server can utilize 
this parameter to optimize how frequently it wants to talk to the 
introspection endpoint of the authorization server. Since the call 
to the introspection endpoint is remote, there can be performance 
issues, and also it can be down due to some reason. In that case, 
the resource server can have a cache to carry the introspection 
responses, and when it gets the same token again and again, it can 
check the cache, and if the token has not expired, it can accept the 
token as valid. Also there should be a valid cache expiration time; 
Chapter 9  Oauth 2.0 prOfiles
215
otherwise, even if the token is revoked at the authorization server, the 
resource server will not know about it.
• 
iat: Defines in seconds from January 1, 1970, in UTC, the issued time 
of the token.
• 
nbf: Defines in seconds from January 1, 1970, in UTC, the time before 
the token should not be used.
• 
token_type: Indicates the type of the token. It can be a bearer token, 
a MAC token (see Appendix G), or any other type.
• 
iss: Carries an identifier that represents the issuer of the token. 
A resource server can accept tokens from multiple issuers (or 
authorization servers). If you store the subject of the token at the 
resource server end, it becomes unique only with the issuer. So you 
need to store it along with the issuer. There can be a case where the 
resource server connects to a multitenanted authorization server. In 
that case, your introspection endpoint will be the same, but it will be 
different issuers who issue tokens under different tenants.
• 
jti: This is a unique identifier for the token, issued by the 
authorization server. The jti is mostly used when the access token 
the authorization server issues is a JWT or a self-contained access 
token. This is useful to avoid replaying access tokens.
While validating the response from the introspection endpoint, the resource server 
should first check whether the value of active is set to true. Then it should check whether 