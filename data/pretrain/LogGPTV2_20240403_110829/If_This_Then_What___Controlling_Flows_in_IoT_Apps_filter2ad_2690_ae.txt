### Introduction

To determine if an applet has been triggered, even a single bit of information, such as whether some children have arrived home, can be considered sensitive by some users. To address this, we extend the semantic model to support trigger-sensitive applets.

### Presence Projection Function

To differentiate between trigger-sensitive and trigger-insensitive applets, we introduce a presence projection function, denoted as \(\pi\). This function determines whether triggering an applet is sensitive or not. For an input \(i\) that triggers an applet, \(\pi(i) = L\) (or \(\pi(i) = H\)) indicates that the triggering can (or cannot) be observed by an attacker.

Based on this projection function, we define input equivalence. Two inputs \(i\) and \(j\) are equivalent (denoted as \(i \approx j\)) if either their presence is low, or if their presence is high, then they are equivalent to the empty event \(\varepsilon\).

- If \(\pi(i) = H\), then \(i \approx \varepsilon\).
- If \(\pi(j) = L\), then \(\pi(i) = L\) implies \(i \approx j\).

### Applets as Reactive Programs

A reactive program waits for an input, processes it, and returns to a passive state ready for another input. As a reactive program, an applet responds with output actions when an input triggers its execution. We model applets as event handlers that accept an input \(i\) to a trigger \(t(x)\), possibly run filter code \(c\) after replacing the parameter \(x\) with the input \(i\), and produce output messages in the form of actions \(o\) on sinks \(sink\).

#### Applet Semantics

We distinguish between trigger-sensitive and trigger-insensitive applets:

- **Trigger-Insensitive Applets**: We enforce information flow control via the rule `Applet-Low`. If the filter code skips certain actions, we ignore the outputs on those sinks.
- **Trigger-Sensitive Applets**: We execute the regular filter semantics without information flow restrictions but ensure no blacklisted URLs are present on the sinks (rule `Applet-High`). In this case, label propagation and information flow enforcement are not needed since an attacker cannot infer any observations about the applet's triggering.

### Termination

Trigger-sensitive applets can help prevent information leaks through the termination channel. For example, if the filter code times out based on the amount transferred using Stripe, the applet's execution is blocked, and no outputs are performed.

### Security Characterization

#### Projected Noninterference

We define a security characterization called projected noninterference, which extends the baseline condition of noninterference to account for URL-enriched markup.

- **String Equivalence**: Two strings \(s_1\) and \(s_2\) are equivalent (\(s_1 \sim_B s_2\)) if they contain the same list of blacklisted values.
- **Memory Equivalence**: Given a typing environment \(\Gamma\), two memories \(m_1\) and \(m_2\) are equivalent (\(m_1 \sim_\Gamma m_2\)) if they agree on all low variables in \(\Gamma\).

**Projected Noninterference Definition**: A command \(c\) satisfies projected noninterference if, for any two runs starting in memories that agree on the low part and producing final memories, the final memories are equivalent for the attacker on the sink.

### Implementation: FlowIT

We implement our monitor, FlowIT, as an extension of JSFlow, a dynamic information flow tracker for JavaScript. FlowIT evaluates the soundness and permissiveness on a collection of 60 IFTTT applets.

#### Implementation Details

- **Parameterization**: We parameterize the JSFlow monitor with a set \(B\) of blacklisted values and a set \(S\) of skip actions.
- **API Extensions**: We add APIs `skip/1` and `sink/3` for skipping actions and sending values on a sink, respectively.
- **Constructs**: We introduce constructs for creating HTML image markups and upload links, ensuring that only low-labeled constructs are used and no blacklisted URLs are included.

### Evaluation

We evaluate FlowIT on 60 applets, with 30 secure and 30 insecure versions. 10 applets were considered trigger-sensitive, and the rest were trigger-insensitive. The results show no false negatives and only one false positive, indicating the tool's effectiveness and permissiveness.

### Related Work

- **IFTTT**: Our work builds on previous studies of IFTTT recipes, focusing on actual information flows and proposing countermeasures.
- **URL Attacks**: We leverage general techniques of exfiltrating data via URL parameters, previously used in browser and mobile app contexts.
- **Observational Security**: Our framework draws on concepts like value-sensitive noninterference and partial indistinguishability to handle URL-enriched output.

### Conclusion

We have investigated the security of IoT apps, particularly on the IFTTT platform, and demonstrated potential URL-based attacks. We propose short-term and long-term countermeasures, including a formal framework for tracking information flow. Our goal is to provide automatic means to vet the security of applets before they are published.

### Ethical Considerations and Coordinated Disclosure

No real users were attacked in our experiments. We disclosed vulnerabilities to IFTTT, Zapier, and Microsoft, and are in contact regarding the deployment of countermeasures.

### Acknowledgements

This work was supported by the Wallenberg AI, Autonomous Systems and Software Program (WASP), the Swedish Foundation for Strategic Research (SSF), and the Swedish Research Council (VR).

### References

[1] - [17] (References listed as provided in the original text)