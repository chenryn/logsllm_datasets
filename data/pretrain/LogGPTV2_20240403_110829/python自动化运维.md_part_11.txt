do_something_completely_different（）
expect方法有两个非常棒的成员：before与after。before成员保存了最近匹配
成功之前的内容，after成员保存了最近匹配成功之后的内容。例如：
import pexpect
import sys
child = pexpect.spawn（'ssh PI:EMAIL'）
fout = file（'mylog.txt'，'w'）
child.logfile = fout
child.expect（["password："]）
child.sendline（"980405"）
print "before："+child.before
print "after："+child.after
运行结果如下：
before：PI:EMAIL's
after：password：
（2）read相关方法
下面这些输入方法的作用都是向子程序发送响应命令，可以理解成代替了我
们的标准输入键盘。
send（self， s） 发送命令，不回车
sendline（self， s=''） 发送命令，回车
sendcontrol（self， char） 发送控制字符，如child.sendcontrol（'c'）等价于”ctrl+c”
sendeof（） 发送eof
5.2.2 run函数
run是使用pexpect进行封装的调用外部命令的函数，类似于os.system或
os.popen方法，不同的是，使用run（）可以同时获得命令的输出结果及命令的
退出状态，函数定义：pexpect.run（command，timeout=–
1，withexitstatus=False，events=None，extra_args=None，logfile=None，cwd=None，env=None）。
参数command可以是系统已知的任意命令，如没有写绝对路径时将会尝试搜
索命令的路径，events是一个字典，定义了expect及sendline方法的对应关
系，spawn方式的例子如下：
from pexpect import *
child = spawn（'scp foo PI:EMAIL：.'）
child.expect（'（？i）password'）
child.sendline（mypassword）
使用run函数实现如下，是不是更加简洁、精炼了？
from pexpect import *
run（'scp foo PI:EMAIL：.'， events={'（？i）password'： mypassword}）
5.2.3 pxssh类
pxssh是pexpect的派生类，针对在ssh会话操作上再做一层封装，提供与基类
更加直接的操作方法。
pxssh类定义：
class pexpect.pxssh.pxssh（timeout=30， maxread=2000， searchwindowsize=None， logfile=None， cwd=None， env=None）
pxssh常用的三个方法如下：
·login（）建立ssh连接；
·logout（）断开连接；
·prompt（）等待系统提示符，用于等待命令执行结束。
下面使用pxssh类实现一个ssh连接远程主机并执行命令的示例。首先使用
login（）方法与远程主机建立连接，再通过sendline（）方法发送执行的命
令，prompt（）方法等待命令执行结束且出现系统提示符，最后使用logout（）
方法断开连接。
【/home/test/pexpect/simple1.py】
import pxssh
import getpass
try：
s = pxssh.pxssh（） #创建pxssh对象s
hostname = raw_input（'hostname： '）
username = raw_input（'username： '）
password = getpass.getpass（'please input password： '） #接收密码输入
s.login （hostname， username， password） #建立ssh连接
s.sendline （'uptime'） # 运行uptime命令
s.prompt（） # 匹配系统提示符
print s.before # 打印出现系统提示符前的命令输出
s.sendline （'ls -l'）
s.prompt（）
print s.before
s.sendline （'df'）
s.prompt（）
print s.before
s.logout（） #断开ssh连接
except pxssh.ExceptionPxssh， e：
print "pxssh failed on login."
print str（e）
5.3 pexpect应用示例
下面介绍两个通过pexpect实现自动化操作的示例，其中一个实现FTP协议的
自动交互，另一个为SSH协议自动化操作，这些都是日常运维中经常遇到的场
景。
5.3.1 实现一个自动化FTP操作
我们常用FTP协议实现自动化、集中式的文件备份，要求做到账号登录、文
件上传与下载、退出等实现自动化操作，本示例使用pexpect模块的spawnu（）
方法执行FTP命令，通过expect（）方法定义匹配的输出规则，sendline（）方法
执行相关FTP交互命令等，详细源码如下：
【/home/test/pexpect/simple2.py】
from __future__ import unicode_literals #使用unicode编码
import pexpect
import sys
child = pexpect.spawnu（'ftp ftp.openbsd.org'） #运行ftp命令
child.expect（'（？i）name .*： '） #（？i）表示后面的字符串正则匹配忽略大小写
child.sendline（'anonymous'） #输入ftp账号信息
child.expect（'（？i）password'） #匹配密码输入提示
child.sendline（'PI:EMAIL'） #输入ftp密码
child.expect（'ftp> '）
child.sendline（'bin'） #启用二进制传输模式
child.expect（'ftp> '）
child.sendline（'get robots.txt'） #下载robots.txt文件
child.expect（'ftp> '）
sys.stdout.write （child.before） #输出匹配“ftp> ”之前的输入与输出
print（"Escape character is '^]'.\n"）
sys.stdout.write （child.after）
sys.stdout.flush（）
#调用 interact（）让出控制权，用户可以继续当前的会话手工控制子程序，默认输入“^]”字符跳出
child.interact（）
child.sendline（'bye'）
child.close（）
运行结果如下：
get robots.txt
local： robots.txt remote： robots.txt
227 Entering Passive Mode （129，128，5，191，197，243）
150 Opening BINARY mode data connection for 'robots.txt' （26 bytes）.
226 Transfer complete.
26 bytes received in 3.29 secs （0.01 Kbytes/sec）
Escape character is '^]'.
ftp> #调用interact（）控制项让出，用户可以手工进行交互
5.3.2 远程文件自动打包并下载
在Linux系统集群运营当中，时常需要批量远程执行Linux命令，并且双向同
步文件的操作。本示例通过使用spawn（）方法执行ssh、scp命令的思路来实
现，具体实现源码如下：
【/home/test/pexpect/simple3.py】
import pexpect
import sys
ip="192.168.1.21" #定义目标主机
user="root" #目标主机用户
passwd="H6DSY#*$df32" #目标主机密码
target_file="/data/logs/nginx_access.log" #目标主机nginx日志文件
child = pexpect.spawn（'/usr/bin/ssh'， [user+'@'+ip]） #运行ssh命令
fout = file（'mylog.txt'，'w'） #输入、输出日志写入mylog.txt文件
child.logfile = fout
try：
child.expect（'（？i）password'） #匹配password字符串，（？i）表示不区别大小写
child.sendline（passwd）
child.expect（'#'）
child.sendline（'tar -czf /data/nginx_access.tar.gz '+target_file） #打包
nginx
#日志文
件
child.expect（'#'）
print child.before
child.sendline（'exit'）
fout.close（）
except EOF： #定义EOF异常处理
print "expect EOF"
except TIMEOUT： #定义TIMEOUT异常处理
print "expect TIMEOUT"
child = pexpect.spawn（'/usr/bin/scp'， [user+'@'+ip+'：/data/nginx_access.tar.gz'，'/home']） #
启动scp远程拷贝命令，实现将打包好的nginx日复制至本地/home目录
fout = file（'mylog.txt'，'a'）
child.logfile = fout
try：
child.expect（'（？i）password'）
child.sendline（passwd）
child.expect（pexpect.EOF） #匹配缓冲区EOF（结尾），保证文件复制正常完成
except EOF：
print "expect EOF"
except TIMEOUT：
print "expect TIMEOUT"
参考提示 5.2节和5.3节常用类说明与应用案例参考
http://pexpect.readthedocs.org/en/latest/。
第6章 系统批量运维管理器paramiko详解
paramiko是基于Python实现的SSH2远程安全连接，支持认证及密钥方式。可
以实现远程命令执行、文件传输、中间SSH代理等功能，相对于Pexpect，封装的
层次更高，更贴近SSH协议的功能，官网地址：http://www.paramiko.org，目前
最高版本为1.13。
6.1 paramiko的安装
paramiko支持pip、easy_install或源码安装方式，很方便解决包依赖的问题，
具体安装命令如下（根据用户环境，自行选择pip或easy_install）：
pip install paramiko
easy_install paramiko
paramiko依赖第三方的Crypto、Ecdsa包及Python开发包python-devel的支持，
源码安装步骤如下：
# yum -y install python-devel
# wget http：//ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.tar.gz
# tar -zxvf pycrypto-2.6.tar.gz
# cd pycrypto-2.6
# python setup.py install
# cd ..
# wget https：//pypi.python.org/packages/source/e/ecdsa/ecdsa-0.10.tar.gz --
no-check-certificate
# tar -zxvf ecdsa-0.10.tar.gz
# cd ecdsa-0.10
# python setup.py install
# cd ..
# wget https：//github.com/paramiko/paramiko/archive/v1.12.2.tar.gz
# tar -zxvf v1.12.2.tar.gz
# cd paramiko-1.12.2/
# python setup.py install
校验安装结果，导入模块没有提示异常则说明安装成功：
# python
Python 2.6.6 （r266：84292， Jul 10 2013， 22：48：45）
[GCC 4.4.7 20120313 （Red Hat 4.4.7-3）] on linux2
Type "help"， "copyright"， "credits" or "license" for more information.
>>> import paramiko
>>>
下面介绍一个简单实现远程SSH运行命令的示例。该示例使用密码认证方
式，通过exec_command（）方法执行命令，详细源码如下：
【/home/test/paramiko/simple1.py】
#！/usr/bin/env python
import paramiko
hostname='192.168.1.21'
username='root'
password='SKJh935yft#'
paramiko.util.log_to_file（'syslogin.log'） #发送paramiko日志到syslogin.log文件
ssh=paramiko.SSHClient（） #创建一个ssh客户端client对象
ssh.load_system_host_keys（） #获取客户端host_keys，默认~/.ssh/known_hosts，非默
认路
#径需指定
ssh.connect（hostname=hostname，username=username，password=password） #创建
ssh连接
stdin，stdout，stderr=ssh.exec_command（'free -m'） #调用远程执行命令方法
exec_command（）
print stdout.read（） #打印命令执行结果，得到Python列表形式，可以使用
stdout.readlines（）
ssh.close（） #关闭ssh连接
程序的运行结果截图如图6-1所示。
图6-1 程序运行结果
6.2 paramiko的核心组件
paramiko包含两个核心组件，一个为SSHClient类，另一个为SFTPClient类，
下面详细介绍。
6.2.1 SSHClient类
SSHClient类是SSH服务会话的高级表示，该类封装了传输（transport）、通
道（channel）及SFTPClient的校验、建立的方法，通常用于执行远程命令，下面
是一个简单的例子：
client = SSHClient（）
client.load_system_host_keys（）
client.connect（'ssh.example.com'）
stdin， stdout， stderr = client.exec_command（'ls -l'）
下面介绍SSHClient常用的几个方法。
1.connect方法
connect方法实现了远程SSH连接并校验。
方法定义：
connect（self， hostname， port=22， username=None， password=None， pkey=None， key_filename=None， timeout=None， allow_agent=True， look_for_keys=True， compress=False）
参数说明：
·hostname（str类型），连接的目标主机地址；
·port（int类型），连接目标主机的端口，默认为22；
·username（str类型），校验的用户名（默认为当前的本地用户名）；
·password（str类型），密码用于身份校验或解锁私钥；
·pkey（PKey类型），私钥方式用于身份验证；
·key_filename（str or list（str）类型），一个文件名或文件名的列表，用于
私钥的身份验证；
·timeout（float类型），一个可选的超时时间（以秒为单位）的TCP连接；
·allow_agent（bool类型），设置为False时用于禁用连接到SSH代理；
·look_for_keys（bool类型），设置为False时用来禁用在~/.ssh中搜索私钥文
件；
·compress（bool类型），设置为True时打开压缩。
2.exec_command方法
远程命令执行方法，该命令的输入与输出流为标准输入（stdin）、输出
（stdout）、错误（stderr）的Python文件对象，方法定义：
exec_command（self， command， bufsize=-1）
参数说明：