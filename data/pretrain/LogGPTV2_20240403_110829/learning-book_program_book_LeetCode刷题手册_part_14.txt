func (uf *unionFind) Init(n int) {
uf.count = n
uf.parent = make([]int, n)
uf.rank = make([]int, n)
for i := range uf.parent {
uf.parent[i] = i
// Find define
func (uf *unionFind) Find(p int) int {
root := p
for root != uf.parent[root]{
root = uf.parent[root]
// compress path
for p != uf.parent[p] {
tmp := uf.parent[p]
uf.parent[p] = root
p = tmp
return root
}
//union define
func （uf *unionFind) union(p，q int）{
proot := uf.Find(p)
qroot := uf.Find(q)
if proot == qroot {
return
if uf.rank[qroot]> uf.rank[proot]{
uf.parent[proot] = qroot
}else {
uf.parent[qroot] = proot
if uf.rank[proot] == uf.rank[qroot]{
---
## Page 68
uf.rank[proot]++
1
uf.count--
// Totalcount define
func （uf *unionFind) TotalcountO int {
return uf.count
// unionFindCount define
//计算每个集合中元素的个数+最大集合元素个数
type UnionFindCount struct{
parent, count []int
maxUnionCount int
// Init define
func (uf *unionFindCount) Init(n int) {
uf.parent = make([]int, n)
uf.count = make([]int, n)
for i := range uf.parent {
uf.parent[1] = i
uf.count[i] = 1
// Find define
func (uf *unionFindCount) Find(p int) int {
root := p
for root != uf.parent[root]{
root = uf.parent[root]
return root
//不进行秩压缩，时间复杂度爆炸，太高了
// func (uf *unionFindcount) union(p,q int) {
proot := uf.find(p)
qroot := uf.find(q)
//
if proot：
== qroot {
//
return
//
//
if proot l= qroot {
//
uf.parent[proot] = qroot
//
uf.count[qroot] += uf.count[proot]
//
//}
---
## Page 69
// union define
func (uf *unionFindCount) union(p, q int){
proot := uf.Find(p)
qroot := uf.Find(q)
if proot == qroot {
return
if proot == len(uf.parent)-1 {
//proot is root
} else if qroot == len(uf.parent)-1 {
// qroot is root， always attach to root
proot， qroot = qroot, proot
} else if uf.count[qroot]> uf.count[proot] {
proot， qroot = qroot,proot
//set relation[o] as parent
uf.maxUnionCount =
max(uf.maxUnionCount, (uf.count[proot] +
uf.count[qroot]))
uf.parent[qroot] = proot
uf.count[proot] += uf.count[qroot]
}
// Count define
func （uf *unionFindCount) CountO []int {
return uf.count
// MaxUnionCount define
func (uf *unionFindCount) MaxUnionCount() int {
return uf.maxUnionCount
func max(a int,b int) int {
if a > b {
return a
return b
第四章Leetcode题解
---
## Page 70
这一章就是LeetCode的题解了。笔者目前只刷到608题，题解这里有520题，都已经runtimebeats
100%了。相差的88题是还没有beats100%的，笔者还需要继续优化~
题解慢慢更新中，欢迎大家提出更好的解法。点击页面下方的edit，会跳转到github对应的页面
markdown中，可以提交你的最优解PR。
让我们在题解的太空邀游吧
1.TwoSum
题目
Given an array of integers, return indices of the two numbers such that they add up to a specific
target.
 You may assume that each input would have exactly one solution, and you may not use the same
element twice.
Example:
Given nums = [2, 7, 1l, 15], target = 9,
Because nums [0] + nums [1] = 2 + 7 = 9,
return [0, 1]
---
## Page 71
题目大意
在数组中找到2个数之和等于给定值的数字，结果返回2个数字在数组中的下标。
解题思路
这道题最优的做法时间复杂度是O（n）。
顺序扫描数组，对每一个元素，在map中找能组合给定值的另一半数字，如果找到了，直接返回2个
数字的下标即可。如果找不到，就把这个数字存入map中，等待扫到“另一半"数字的时候，再取出来返
回结果。
代码
package leetcode
func twoSum(nums []int, target int) []int {
m := make(map[int]int)
for i := 0; i  9 -> 9 -> 9 -> 9) + (1 -> )
I 0{
current.Next = &ListNode{val: carry % 10, Next: ni1}
return head.Next
3.LongestSubstringWithoutRepeating_Characters
题目
Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input:"abcabcbb"
output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:
Input: "bbbbb"
output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:
---
## Page 74
Input: "pwwkew"
Output: 3
Explanation: The answer is “wke", with the length of 3.
Note that the answer must be a substring, “pwke" is a subsequence
and not a substring.
题目大意
在一个字符串重寻找没有重复字母的最长子串。
解题思路
这一题和第438题，第3题，第76题，第567题类似，用的思想都是"滑动窗口”。
滑动窗口的右边界不断的右移，只要没有重复的字符，就持续向右扩大窗口边界。一旦出现了重复字
符，就需要缩小左边界，直到重复的字符移出了左边界，然后继续移动滑动窗口的右边界。以此类推，
每次移动需要计算当前长度，并判断是否需要更新最大长度，最终最大的值就是题目中的所求。
代码
package leetcode
//解法一位图
func lengthofLongestSubstring(s string) int {
if len(s) == 0 {
return 0
//扩展ASCII码的位图表示（BitSet），共有256位
var bitSet [256]uint8
result, left, right := 0,0,0
for left  b {
return a
3
return b
4.MedianofTwoSortedArrays
题目
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)-
You may assume nums1 and nums2 cannot be both empty.
Example 1:
numsl = [1, 3]
nums2 = [2]
The median is 2.0
Example 2:
---
## Page 76
nums1 = [1, 2]
nums2 = [3, 4]
The median is (2 + 3)/2 = 2.5
题目大意
给定两个大小为m和n的有序数组nums1和nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为O（log（m+n))。
你可以假设nums1和nums2不会同时为空。
解题思路
·给出两个有序数组，要求找出这两个数组合并以后的有序数组中的中位数。要求时间复杂度为
O(log (m+n))。
·这一题最容易想到的办法是把两个数组合并，然后取出中位数。但是合并有序数组的操作是
o（max（n，m））的，不符合题意。看到题目给的1og的时间复杂度，很容易联想到二分搜索。
·由于要找到最终合并以后数组的中位数，两个数组的总大小也知道，所以中间这个位置也是知道
的。只需要二分搜索一个数组中切分的位置，另一个数组中切分的位置也能得到。为了使得时间复
杂度最小，所以二分搜索两个数组中长度较小的那个数组。
·关键的问题是如何切分数组1和数组2。其实就是如何切分数组1。先随便二分产生一个
midA，切分的线何时算满足了中位数的条件呢？即，线左边的数都小于右边的数，即，
nums1[midA-1] ≤ nums2[midB] && nums2[midB-1] ≤ nums1[midA] 。如果这些条件都不满
足，切分线就需要调整。如果nums1[midA]nums2[midB]，说明midA这条线划分
出来左边的数大了，切分线应该左移。经过多次调整以后，切分线总能找到满足条件的解。
·假设现在找到了切分的两条线了，数组1在切分线两边的下标分别是midA-1和midA。数
组2在切分线两边的下标分别是midB-1和midB。最终合并成最终数组，如果数组长度是奇
数，那么中位数就是max（nums1[midA-1]，nums2[midB-1]）。如果数组长度是偶数，那么中间
位置的两个数依次是：max（nums1[midA-1]，nums2[midB-1]）和min（nums1[midA]，
nums2[midB])，那么中位数就是（max(nums1[midA-1]，nums2[midB-1]) +
min(nums1[midA]，nums2[midB])) / 2。图示见下图：
---
## Page 77
代码
package leetcode
func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
//假设nums1的长度小
if 1en(nums1) >len(nums2){
return findMedianSortedArrays (nums2, nums1)
1ow, high, k, numslmid, nums2mid := 0,len(nums1),
(1en(nums1)+1en(nums2)+1)>>1, 0, 0
for low >1//分界限右侧是mid，分界线左侧是mid-1
nums2Mid = k - nums1mid
if nums1mid>0&&nums1[nums1mid-1]>nums2[nums2mid]{// nums1中的分界线
划多了，要向左边移动
high = numslmid - 1
} else if nums1mid != 1en(nums1) && nums1[numslmid] < nums2[nums2mid-1] {
//nums1中的分界线划少了，要向右边移动
1ow = numslmid + 1
}else{
//找到合适的划分了，需要输出最终结果了
//分为奇数偶数2种情况
break
midLeft,midRight := 0, 0
if nums1mid == 0 {
midLeft = nums2[nums2mid1]
3 else if nums2mid == 0 {
---
## Page 78
midLeft = nums1[numsImid1]
}else{
midLeft = max(nums1[nums1mid1], nums2[nums2mid-1])
if (1en(nums1)+1en(nums2))&l == 1{
return float64 (midLeft)
if nums1mid == 1len(nums1) {
mi dRight = nums2[nums2Mid]
3 else if nums2mid == 1en(nums2) {
mi dRight = nums1[nums1mid]
}else{
midRight = min(nums1[nums1mid] , nums2[nums2mid])
return float64(midLeft+midRight) / 2
7.ReverseInteger
题目
Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
Input: 123
Output: 321
Example 2: