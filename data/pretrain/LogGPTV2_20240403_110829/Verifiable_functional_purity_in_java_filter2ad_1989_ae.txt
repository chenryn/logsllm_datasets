### Verification of Voting Machine Behavior

To ensure the integrity and predictability of the voting process, it is essential to verify that the voted ballot and the behavior of the voting machine are a deterministic function of the sequence of input events. This concept is also applied in Waterken’s implementation of deterministic server processes. Each event causes mutations in the internal state of a handler object dedicated to that event’s connection. Since these mutations are confined to the per-connection object, the behavior of each server process remains deterministic, even though individual calls to the event-processing method may not be verifiably pure.

### Related Work

#### Object-Capability Languages
Object-capability languages have a long history [18]. Many of these languages adopt a more functional style than the Joe-E subset of Java, making it easier to limit side effects. For instance, in the E language, the Functional auditor checks that every method on an object has no side effects and produces an immutable result based solely on its arguments [28]. This property is verified using runtime introspection on the object. In contrast, we perform static verification for individual methods.

In this paper, we build upon Joe-E [16], another object-capability language designed by some of the authors. We expect that many of our techniques can be applied to other object-capability languages as well.

#### Environment-Freeness
We were inspired by the concept of “environment-freeness” [24], which essentially aligns with the determinism aspect of our notion of purity. Environment-freeness was used to verify the determinism of decoding operations and for fail-stop enforcement of the inverse property.

#### Purity in Imperative Languages
Most previous work on purity in imperative languages has focused on side-effect freeness, with little attention to determinism. The definition of side-effect free has generally been weaker than ours, often excluding external state. For legacy code, Rountev [21] and Salcianu and Rinard [23] provide pointer-based analyses to identify side-effect-free methods. These approaches address only in-language side effects and do not consider native methods, which can cause external side effects. Analysis-based methods are directly applicable to legacy code, while language-based approaches provide more guidance for programmers in writing side-effect-free methods.

#### Immutability in Joe-E
In Joe-E, we use class immutability to enforce both determinism and side-effect freeness. Specific classes in the standard Java type system are considered immutable, ensuring that objects of such classes are never mutated after construction. An alternative approach is to use an extended type system that treats some references or instances as read-only while allowing others to be mutable. The C++ const qualifier is a well-known example of this. However, its use in preventing side effects is limited because the restrictions are not transitive. A transitive version, introduced by the KeyKOS operating system [10], is known as a “sensory key,” which prohibits writes and ensures that all keys retrieved through it are sensory. This concept is also found in some programming languages to improve reasoning about immutability and side effects.

#### Side-Effect Freeness in School
Ieurusalimschy and Rodriguez [12] use a qualified type to enforce side-effect freeness in the SmallTalk-like language School. Methods annotated as side-effect free are type-checked with all arguments and the instance pointer implicitly marked with an old qualifier, preventing writes to the fields of old objects. The type checker allows only invocations of side-effect-free methods on old objects and treats the return values from such invocations as old. This ensures that the only non-old (and thus mutable) objects used by the method are those it creates itself.

#### Javari and D Language
The Javari [26] type system provides similar qualifiers for Java, using explicit readonly qualifiers as a transitive, sound version of C++’s const. The D language [5] offers an instance-immutability qualifier invariant to achieve functional purity. Functions marked with the pure keyword must have only invariant arguments, can only read invariant global state, and can only call other pure methods. The D compiler restricts invariant variables in the global scope to constant values, ensuring determinism. While this approach avoids the need to eliminate mutable state and determinism from the global scope, it limits expressivity by preventing pure functions from using impure functions and methods.

#### Reference Immutability vs. Class Immutability
Reference immutability (const or readonly) is more convenient as it can be used with existing classes without modifying the type hierarchy. However, class or instance immutability is necessary to ensure determinism in concurrent programs, as otherwise, a mutable alias can be used to concurrently modify the object. For non-concurrent programs, reference immutability is adequate if the global scope can store only immutable references. As a general mechanism for defensive programming, reference immutability protects the originator of a reference from unwanted modifications, but the recipient of an immutable reference may still need to make a defensive copy.

#### Spec# and JML
Spec# [3] and JML [7, 15] are extensions to C# and Java that allow programmers to specify invariants on functions and classes. They support annotating methods with the pure attribute, but purity in JML includes only side-effect freeness and not determinism.

#### Functional Languages
In strictly functional languages like Haskell, nearly all functions are pure. Monads can be defined to allow writing in a more imperative style, where each operation takes an input state and returns a monad instance that wraps the result along with auxiliary information such as side effects [27]. The monad type defines an operator for sequencing such invocations to obtain a final result. Some monads provide a way to retrieve a sequence’s final result integrated with any auxiliary information, while others, like the I/O monad, do not. All functions that potentially expose nondeterminism or cause external side effects use the I/O monad, allowing them to be recognized as potentially nondeterministic. Functions whose return type does not mention the IO monad are functionally pure. While monads provide a means to use effects in Haskell, the language is primarily oriented towards a functional style. Our approach, in contrast, focuses on recognizing pure methods in an otherwise imperative language, reducing the changes needed to existing code and programming patterns.

#### Mixed Imperative and Functional Styles
Other systems, such as the Eiffel language [17], separate commands and queries. Commands may have side effects, while queries are supposed to be side-effect free, although this is only a convention and not enforced. Similarly, Euclid [14] and SPARK [2] define two distinct constructs for routines: procedures can have side effects, while functions are only able to compute a value, ensuring they are free of side effects. In Euclid, functions can only import variables read-only, preventing side effects and ensuring determinism if the imported variables (which may be modified elsewhere) are treated as additional arguments. In SPARK, annotations on procedures specify exactly which variables can be modified by the procedure and which variables their modifications are derived from. This and other information flow policies are verified by the SPARK Verifier.

#### Jif
Jif [19] extends Java with label-based information flow checking. Variable declarations are annotated with labels indicating an owning principal and a policy for data stored in the variable. These restrictions are enforced statically when possible and dynamically otherwise. As a special case, it is possible to specify data flow restrictions that ensure a particular method is pure. In contrast, while our approach does not allow for the rich policies expressible in Jif, obtaining purity in Joe-E does not require the explicit specification of principals or policies.

### Conclusions

Verifiable purity is useful for verifying many high-level security properties. A language with appropriate characteristics can greatly simplify the task of writing verifiably pure code. By combining determinism with object-capabilities, we describe a new class of languages that allow purity to be achieved in largely imperative programs. Joe-E, as such a language, allows programmers to flexibly leverage verifiable purity while still using imperative algorithms in a familiar language.

### Acknowledgments
We thank David Molnar, Karl Chen, Arel Cordero, Tyler Close, Toby Murray, Sandro Magi, Mike Samuel, our shepherd Sriram Rajamani, and our anonymous reviewers for their helpful comments on earlier drafts of this paper. This research was supported by National Science Foundation grants CNS-0716715, CNS-0524745, CNS-0430585, and CCF-0424422.

### References
[1] M. Backes, M. Dürmuth, and D. Unruh. Information flow in the peer-reviewing process (extended abstract). In IEEE Symposium on Security and Privacy, Proceedings of SSP’07, pages 187–191, May 2007.
[2] J. Barnes. High Integrity Software: The SPARK Approach to Safety and Security. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2003.
[3] M. Barnett, K. R. Leino, and W. Schulte. The Spec# programming system: An overview. In Proceedings of Construction and Analysis of Safe, Secure and Interoperable Smart Devices (CASSIS), 2004.
[4] D. J. Bernstein. Some thoughts on security after ten years of qmail 1.0. In CSAW ’07: Proceedings of the 2007 ACM workshop on Computer security architecture, pages 1–10, New York, NY, USA, 2007. ACM.
[5] W. Bright. D language 2.0. http://www.digitalmars.com/d/2.0/.
[6] L. Brown. AEScalc. http://www.unsw.adfa.edu.au/~lpb/src/AEScalc/AEScalc.jar.
[7] L. Burdy, Y. Cheon, D. Cok, M. Ernst, J. Kiniry, G. Leavens, K. R. Leino, and E. Poll. An overview of JML tools and applications. International Journal on Software Tools for Technology Transfer (STTT), 7(3):212–232, June 2005.
[8] Y. Cheon and G. Leavens. A runtime assertion checker for the Java Modeling Language, 2002.
[9] T. Close and S. Butler. Waterken server. http://waterken.sourceforge.net/.
[10] N. Hardy. Keykos architecture. SIGOPS Oper. Syst. Rev., 19(4):8–25, 1985.
[11] HTML4 Test Suite. http://www.w3.org/MarkUp/Test/HTML401/current/.
[12] R. Ierusalimschy and N. de La Rocque Rodriguez. Side-effect free functions in object-oriented languages. Comput. Lang., 21(3/4):129–146, 1995.
[13] M. F. Kaashoek, D. R. Engler, G. R. Ganger, n. Hector M. Brice R. Hunt, D. Mazières, T. Pinckney, R. Grimm, J. Jannotti, and K. Mackenzie. Application performance and flexibility on exokernel systems. In SOSP ’97: Proceedings of the sixteenth ACM symposium on Operating systems principles, pages 52–65, New York, NY, USA, 1997. ACM.
[14] B. W. Lampson, J. J. Horning, R. L. London, J. G. Mitchell, J. G. Mitchell, G. J. Popek, and G. J. Popek. Report on the programming language Euclid. SIGPLAN Not., 12(2):1–79, 1977.
[15] G. Leavens and Y. Cheon. Design by contract with JML, 2003.
[16] A. Mettler and D. Wagner. The Joe-E language specification, version 1.0. Technical Report UCB/EECS-2008-91, EECS Department, University of California, Berkeley, August 7, 2008.
[17] B. Meyer. Eiffel: The Language. Object-Oriented Series. Prentice Hall, Englewood Cliffs, NJ, USA, 1992.
[18] M. S. Miller. Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control. PhD thesis, Johns Hopkins University, Baltimore, Maryland, USA, May 2006.
[19] A. C. Myers and B. Liskov. A decentralized model for information flow control. In Symposium on Operating Systems Principles, pages 129–142, 1997.
[20] D. Oswald, S. Raha, I. Macfarlane, and D. Walters. HTMLParser 1.6. http://htmlparser.sourceforge.net/.
[21] A. Rountev. Precise identification of side-effect-free methods in Java. In ICSM ’04: Proceedings of the 20th IEEE International Conference on Software Maintenance, pages 82–91, Washington, DC, USA, 2004. IEEE Computer Society.
[22] A. Rudys and D. S. Wallach. Termination in language-based systems. ACM Transactions on Information and System Security, 5(2), May 2002.
[23] A. Salcianu and M. C. Rinard. Purity and side effect analysis for Java programs. In VMCAI, pages 199–215, 2005.
[24] N. K. Sastry. Verifying Security Properties in Electronic Voting Machines. PhD thesis, University of California at Berkeley, 2007.
[25] F. Sauer. Eclipse metrics plugin 1.3.6. http://metrics.sourceforge.net/.
[26] M. S. Tschantz and M. D. Ernst. Javari: Adding reference immutability to Java. In Object-Oriented Programming Systems, Languages, and Applications (OOPSLA 2005), pages 211–230, San Diego, CA, USA, October 18–20, 2005.
[27] P. Wadler. The essence of functional programming. In Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 1–14, Albequerque, New Mexico, 1992.
[28] K.-P. Yee and M. Miller. Auditors: An extensible, dynamic code verification mechanism, 2003. http://www.erights.org/elang/kernel/auditors/index.html.

### Appendix: Finally Clauses

Figure 7 illustrates how to return a nondeterministic value without explicitly catching an Error by using a finally clause. The `freemem()` method attempts to allocate increasingly larger arrays of doubles until an `OutOfMemoryError` is triggered. This causes the finally clause to execute, throwing an `IntException` that hides the pending Error. The `IntException` contains a nondeterministic state (how many arrays could be allocated before running out of memory), which is extracted from the exception and returned by `nondet()`.

Fortunately, Joe-E’s prohibition of the use of finally does not reduce expressivity: Joe-E code can explicitly catch `Exception`, allowing the catching and appropriate handling of any non-Error throwable in the Java library.