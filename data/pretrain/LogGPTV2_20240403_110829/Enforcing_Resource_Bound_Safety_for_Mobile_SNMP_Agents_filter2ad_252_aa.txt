# Title: Enforcing Resource Bound Safety for Mobile SNMP Agents

## Authors
Weijiang Yu and Aloysius K. Mok  
Department of Computer Sciences  
University of Texas at Austin  
Austin, Texas 78712, USA  
Email: fwjyu, PI:EMAIL

## Abstract
The integration of mobile agents with the Simple Network Management Protocol (SNMP) offers significant advantages for managing complex networks. However, security concerns associated with mobile agent technology limit its practical acceptance. A critical issue is safeguarding the hosting system from resource abuse by malicious or buggy mobile agents. This paper describes how the TINMAN architecture, a framework and suite of tools for enforcing resource safety of mobile code, can be applied to mobile SNMP agents. TINMAN uses a combination of compile-time and run-time tools, including a resource bound predictor, a usage certification generator, and a verifier, to ensure 100% coverage in enforcing resource consumption safety. Experimental results from the current TINMAN implementation are provided.

## 1. Introduction
The Simple Network Management Protocol (SNMP) is the most widely adopted framework for network and system management. Many network devices are equipped with SNMP agents that gather system information. However, the centralized management architecture of SNMP has notable drawbacks in terms of performance, flexibility, and scalability. Additionally, the lack of support for dynamic network management makes it challenging to manage increasingly heterogeneous networks.

Recent research has explored the integration of mobile agents with SNMP management to address these issues. The introduction of mobile agents has demonstrated their flexibility and effectiveness in SNMP management. For example, a mobile agent can act as a sub-agent of AgentX, a built-in SNMP protocol, to perform network management services. This decentralizes and automates SNMP management on desired network devices.

However, mobile agent-based SNMP cannot be confidently accepted by hardware manufacturers and system administrators unless external mobile agents can be trusted not to breach security policies. One major security concern is resource bound safety, which involves limiting the consumption of system resources such as CPU cycles, memory, and network bandwidth by mobile agents. Failure to properly delimit resource consumption by untrusted mobile agents can lead to Denial of Service (DoS) attacks, denying legitimate users access to system resources.

Most mobile agent frameworks use traditional techniques for authorization, authentication, and access control to local resources. These techniques, however, do not protect hosting systems from DoS attacks caused by the execution of mobile agents, such as buggy or malicious SNMP agents. Therefore, effective tools for checking, monitoring, and enforcing resource bound safety are essential for the acceptance of a mobile SNMP agent framework.

This paper introduces the TINMAN architecture, which provides a set of tools to efficiently and effectively perform resource bound checks on mobile agents. The goal is to demonstrate the effectiveness of TINMAN in achieving resource usage safety for a mobile agent-based SNMP framework.

The key idea is to endow a mobile agent with formally verifiable certificates describing its resource consumption behavior. The hosting system, or a code recipient, validates the certificate and, if it passes validation, grants resources to the code without further run-time checks. The challenge is that exact resource usage is often determined dynamically and cannot be derived by compile-time static analysis. Our approach combines off-line theorem proving and on-line monitoring to provide complete coverage and guarantee resource safety.

## 2. Architecture Overview of TINMAN
This section provides an overview of the TINMAN architecture. TINMAN ensures the resource safety of mobile codes by detecting potentially malicious mobile code that may consume excessive resources, leading to DoS attacks. There are two key aspects: resource safety policy and resource safety enforcement.

- **Resource Safety Policy**: Specifies resource usage constraints that mobile agents must observe to maintain permission to execute on a host. In TINMAN, this policy is established through a set of specifications, including resource usage for each service, resource limits for each active session, and a proof system with axioms and inference rules.
- **Resource Safety Enforcement**: Pertains to the authorization of resource usage and the limitation of actual resource usage by a program. It prevents mobile agents from violating resource safety policy through on-line monitoring and dynamic analysis.

TINMAN performs resource safety enforcement by combining language-level and run-time system-level mechanisms. At the language level, a mobile agent is analyzed and converted into a certified program with a certificate on resource bounds. The certificate, once validated, guarantees that the program will not violate a resource safety property.

### Key Steps in TINMAN:
1. **Resource Prediction**: Predicts the resource bounds of the code off-line, allowing the programmer to enter assertions that can only be established on-line.
2. **Resource Specification Generation**: Translates the resource skeleton into a specification consisting of predicates in a formal logic.
3. **Certificate Generation**: Secures the specification using a proof system, generating a resource usage certificate.
4. **Resource Skeleton Validation**: Validates the resource skeleton and checks for inconsistencies with the imported code and violations against the safety policy.
5. **Certificate Verification**: Verifies the resource usage certificate using a proof checker.
6. **Run-time Events Insertion**: Monitors assertions whose validity the off-line analyzer fails to provide a proof.

Architecturally, the first three steps are performed on the code producer site (off-line checker), and the last three steps are performed by the code recipient (on-line checker). The guiding principle is to do as much work off-line as possible and leave the hosting code recipient to do as little as possible while ensuring complete coverage.

## 3. TINMAN Application: Mobile SNMP Agents
The TINMAN architecture is a general framework for securing the resource usage bounds of mobile code and is applicable to various applications and platforms. This section describes how TINMAN tools are used to enforce resource bound safety for untrusted and potentially malicious mobile SNMP agents.

We use the open-source NET-SNMP toolkit as the framework for writing mobile SNMP agents. NET-SNMP supports all three SNMP protocols (v1, v2c, v3) and AgentX, which includes a master agent and libraries to develop sub-agents. In a NET-SNMP-based SNMP management framework that supports mobile agents, a mobile SNMP agent can act as an AgentX sub-agent, migrating between network nodes to acquire information or provide services.

### Example: A Mobile SNMP Agent for Single Scalar Registration
To illustrate, we use a simple agent from the NET-SNMP package called the "scalar agent." This agent creates scalar registrations at a local host, allowing simple variables to be accessed via SNMP. The source code is shown in Figure 2.

```c
int main(int argc, char **argv) {
    snmp_enable_stderrlog();
    ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 1);
    init_agent("scalar");
    init_scalar_int();
    init_snmp("scalar");
    keep_running = 1;
    signal(SIGTERM, stop_server);
    signal(SIGINT, stop_server);
    while(keep_running) {
        agent_check_and_process(1);
    }
    snmp_shutdown("scalar");
    exit(0);
}

RETSIGTYPE stop_server(int a) {
    keep_running = 0;
}

void init_scalar_int(void) {
    int example1 = 42;  /* default value */
    oid my_registration_oid[] = {1,3,6,1,4,1,8072,2,1,1,0};
    DEBUGMSGTL(("example_scalar_int", "Initializing example scalar int. Default value = %d\n", example1));
    netsnmp_register_int_instance("my example int variable", my_registration_oid, OID_LENGTH(my_registration_oid), &example1, NULL);
    DEBUGMSGTL(("example_scalar_int", "Done initializing scalar int\n"));
}
```

Figure 2. Source Code of Scalar SNMP Agent

In this example, the `main()` function establishes the connection between the local host and the agent, attaches itself to the master agent using the AgentX protocol, initializes the agent library and MIB code, and enters a loop to poll SNMP operations. The `init_scalar_int()` function registers a variable "example1" as accessible and writable. When the scalar agent arrives at a node, it performs requests for manipulation on the registered variable.

By applying TINMAN tools to this example, we can ensure that the mobile SNMP agent adheres to resource bound safety, preventing potential DoS attacks and ensuring the efficient and secure operation of the SNMP management framework.