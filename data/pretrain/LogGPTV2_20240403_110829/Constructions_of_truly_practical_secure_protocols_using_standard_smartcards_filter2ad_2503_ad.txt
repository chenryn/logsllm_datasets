to the x portion of an existing record. We stress that in
an update, the previous x value is not erased, but rather
the new value is concatenated to the old one. We deﬁne
the functionality in this way because it aﬀords greater eﬃ-
ciency. Recall that in our protocol, the client holds the entire
database in encrypted form. Furthermore, the old and new
x portions are encrypted with the same key. Thus, if the
client does not erase the old encrypted x value, it can de-
crypt it at the same time that it is able to decrypt the new
x value. Another subtlety that arises is that since inserts
are carried out over time, and the client receives encrypted
records when they are inserted, it is possible for the client
to know when a decrypted record was inserted. In order to
model this, we include unique identiﬁers to records; when
a record is inserted, the ideal functionality hands the client
the identiﬁer of the inserted record. Then, when a search
succeeds, the client receives the identiﬁer together with the
x portion. This allows the client in the ideal model to track
when a record was inserted (of course, without revealing
anything about its content). Finally, we remark that our
solution does not eﬃciently support delete commands (this
is for the same reason that updates are modeled as concate-
nations). We therefore include a reset command that deletes
all records. This requires the server to re-encrypt the entire
database from scratch and send it to the client. Thus, such
a command cannot be issued at too frequent intervals. See
Figure 2 for the full deﬁnition of FDB.
The Oblivious Database Functionality FDB
Functionality FDB works with a server P1 and client P2 as
follows (the variable init is initially set to 0):
Insert: Upon receiving a message (insert, p, x) from P1, func-
tionality FDB checks that there is no recorded tuple
(idi, pi, xi) for which p = pi. If there is such a tuple it
ignores the message. Otherwise, it assigns an identiﬁer
id to (p, x), sends (insert, id) to P2, and records the tuple
(id, p, x).
Update: Upon receiving a message (update, p, x) from P1,
functionality FDB checks that there is a recorded tuple
(idi, pi, xi) for which p = pi. If there is no such tuple it
ignores the message. Otherwise it updates the tuple, by
concatenating x to xi.
Retrieve: Upon receiving a query (retrieve, p) from the client
P2, functionality FDB sends retrieve to P1. If P1 replies
with allow then:
which p = pi, then FDB sends (idi, xi) to P2.
1. If there exists a recorded tuple (idi, pi, xi) for
2. If there does not exist such a tuple, then FDB
sends notFound to P2.
Reset: Upon receiving a message reset from P1, the function-
ality FDB sends reset to P2 and erases all entries.
Figure 2: A more comprehensive database function-
ality
5.2 A Protocol for Securely Computing (cid:0)(cid:0)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)
We ﬁrst present a protocol for securely computing the ba-
sic functionality FbasicDB. Let F be a (eﬃciently invertible)
pseudorandom permutation over {0, 1}n with keys that are
uniformly chosen from {0, 1}n. We deﬁne a keyed function
ˆF from {0, 1}n to {0, 1}(cid:3)n by
ˆFk(t) = (cid:10)Fk(t + 1), Fk(t + 2), . . . , Fk(t + (cid:4))(cid:11)
where addition is modulo 2n. We remark that ˆFk is a pseu-
dorandom function when the input t is uniformly distributed
(this actually follows directly from the proof of security in
counter mode for block ciphers). We assume that all records
in the database are exactly of length (cid:4)n (and that this is
known); if this is not the case, then padding can be used.
In our protocol, we use a challenge/response mechanism
in the smartcard to restrict use of cryptographic keys. For
the sake of concreteness, we assume that the response to a
challenge chall with key ktest is Fktest (chall) where F is a
pseudorandom permutation as above. This makes no diﬀer-
ence, and we deﬁne it this way for the sake of concreteness
only.
Protocol 4. (oblivious database search – basic function-
ality FbasicDB)
• Smartcard initialization: Party P1 chooses three keys
k1, k2, k3 ← {0, 1}n and imports them into a smartcard
SC for use for a pseudorandom permutation. In addi-
tion, P1 imports a key ktest as a test object that pro-
tects them all by challenge/response. Finally, P1 sets
the access-granted counter of k1 and k2 to 1 (and sets
no access-granted counter of k3). (See Section 2 for the
deﬁnition of an access-granted counter.)
P1 sends SC to P2 (this takes place before the protocol
below begins). Upon receiving SC, party P2 checks that
there exist three keys with the properties deﬁned above;
if not it outputs ⊥ and halts.3
• The protocol:
• Initialize: Upon input (init, (p1, x1), . . . , (pN , xN ))
for party P1, the parties work as follows:
1. P1 randomly permutes the pairs (pi, xi).
2. For every i, P1 computes ti = Fk1 (pi), ui =
Fk2 (ti) and ci = ˆFk3 (ti) ⊕ xi.
3. P1 sends (u1, c1), . . . , (uN , cN ) to P2 (these pairs
are an encrypted version of the database).
4. Upon receiving (u1, c1), . . . , (uN , cN ), party P2
stores the pairs and outputs (init, N ).
• Search: Upon input (retrieve, p) for party P2, the
parties work as follows:
1. P2 queries SC for a challenge, receiving chall.
P2 sends chall to P1.
2. Upon receiving chall, if party P1 allows the search
it computes resp = Fktest (chall) and sends resp to
P2. Otherwise, it sends disallow to P2.
3. Upon receiving resp, party P2 hands it to SC in
order to pass the test. Then:
(a) P2 uses SC to compute t = Fk1 (p) and u =
Fk2 (t).
(b) If there does not exist any i for which u = ui,
then P2 outputs notFound.
(c) If there exist an i for which u = ui, party P2
uses SC to compute r = ˆFk3 (t); this involves
(cid:4) calls to Fk3 in SC. Then, P2 sets x = r⊕ci
and outputs (retrieve, x).
Theorem 5. Assume that F is a strong pseudorandom
permutation over {0, 1}n and let ˆF be as deﬁned above. Then,
Protocol 4 securely computes FbasicDB.
Proof Sketch: We deal separately with the case that
P1 and P2 are corrupted, beginning with P1. Let A be an
adversary controlling P1; we construct a simulator S that
works as follows:
1. S obtains the keys k1, k2, k3 that P1 imports to the
smartcard, as well as the test key ktest. If P1 does not
conﬁgure the smartcard correctly, then S sends ⊥ to
FbasicDB.
3
Not all smartcards allow checking the properties of keys. If not, this
will be discovered the ﬁrst time a search is carried out and then P2
can just abort then.
2. Upon receiving (u1, c1), . . . , (uN , cN ) from P1, simula-
tor S computes ti = F −1
k1 (ti) and xi =
ˆFk3 (ti)⊕ci, for every i. Then, S sends (init, (p1, x1), . . . ,
(pN , xN )) to FbasicDB.
k2 (ui), pi = F −1
3. Upon receiving a message retrieve from FbasicDB, sim-
ulator S chooses a random challenge chall ∈R {0, 1}n
and hands it to A. Let resp be the response from A.
If resp = Fktest (chall) then S sends allow to FbasicDB;
otherwise, including the case that A does not respond
at all, S sends disallow.
This completes the simulation. The output distribution
from the simulation is identical to a real execution. This is
due to the fact that F is a pseudorandom permutation and
thus k1, k2, k3 together with a pair (ui, ci) deﬁne a unique
(pi, xi) that is sent to FbasicDB. In addition, P2 can carry
out a search if and only if resp is correctly computed; thus,
S sends allow to FbasicDB if and only if P2 can carry out a
search. Finally, we note that A’s view is identical in the sim-
ulation and a real execution because the only values it sees
in both cases are truly random challenges chall ∈R {0, 1}n.
We now proceed to the case that P2 is corrupted. For lack
of space in this abstract, we sketch this case only. Intuitively,
P2 can only learn by querying the smartcard in the speciﬁed
way. This is due to the fact that if P2 does not ﬁrst compute
t = Fk(p) for some keyword p, then the probability that it
queries the smartcard with a value t such that Fk2 (t) = ui
for some ui in the encrypted database is negligible. This fol-
lows from the pseudorandomness of the functions used in the
smartcard and in computing the encrypted database. Thus,
P2 can only learn information by querying the smartcard as
speciﬁed in the protocol. The complete proof, including a
simulator for this corruption case, appears in the full version
of this paper.
Composability. As in the protocol for set intersection, our
simulators do not rewind A at all. Therefore, our protocol
is secure under concurrent general composition.
5.3 A Protocol for Securely Computing (cid:0)(cid:6)(cid:7)
A protocol for securely computing the more sophisticated
functionality FDB can be derived directly from Protocol 4.
Speciﬁcally, instead of sending all the pairs (ui, ci) at the
onset, P1 sends a new pair every time an insert is carried
out. In addition, an update just involves P1 re-encrypting
the new xi value and sending the new ciphertext c(cid:5)
i. Finally,
a reset is carried out by choosing new keys k1, k2, k3 and
writing them to the smartcard (deleting the previous ones).
Then, any future inserts are computed using these new keys.
Of course, the new keys are written to the smartcard using
secure messaging, as we have described above.
6. OBLIVIOUS DOCUMENT SEARCH
In Section 5 we showed how a database can be searched
obliviously, where the search is based only on a key at-
tribute. Here, we show how to extend this to a less struc-
tured database, and in particular to a corpus of texts. In
this case, there are many keywords that are associated with
each document and the user wishes to gain access to all of
the documents that contain a speciﬁc keyword. A naive solu-
tion would be to deﬁne each record value so that it contains
all the documents which the keyword appears in. However,
this would be horriﬁcally expensive because the same doc-
ument would have to be repeated many times. We present
a solution where each document is stored (encrypted) only
once, as follows.
Our solution uses Protocol 4 as a subprotocol, and we
model this by constructing our protocol for oblivious doc-
ument search in a “hybrid” model where a trusted party
is used to compute the ideal functionality FbasicDB. (The
soundness of working in this way was proven in [5].) The ba-
sic idea is for the parties to use FbasicDB to store an index to
the corpus of texts as follows. The server chooses a random
value si for every document Di and then associates with a
keyword p the values si where p appears in the document
Di. Then, this index is sent to FbasicDB, enabling P2 to
search it obliviously. In addition, P1 encrypts document Di
using a smartcard and si in the same way that the xi values
are encrypted using ti in Protocol 4. Since P2 is only able to
decrypt a document if it has the appropriate si value, it can
only do this if it queried FbasicDB with a keyword p that is
in document Di. Observe that in this way, each document
is only encrypted once. We describe our solution in detail
in the full version of this paper.
7. CONCLUSIONS
We have shown that standard smartcards and standard
smartcard infrastructure can be used to construct secure
protocols that are orders of magnitude more eﬃcient than
all previously known solutions. In addition to being eﬃcient
enough to be used in practice, our protocols have full proofs
of security and achieve simulation according to the ideal/real
model paradigm. No cryptographic protocol for a realistic
model has achieved close to the level of eﬃciency of our
protocols. Finally, we note that since standard smartcards
are used, it is not diﬃcult to deploy our solutions in practice
(especially given the fact that smartcards are become more
and more ubiquitous today).
We believe that this model should be studied further with
the aim of bridging the theory and practice of secure proto-
cols. In addition to studying what can be achieved in the
preferred setting where only standard smartcards are used, it
is also of interest to construct highly eﬃcient protocols that
use special-purpose smartcards that can be implemented in
Java applets on Javacards.
8. REFERENCES
[1] G. Aggarwal, N. Mishra and B. Pinkas. Secure
Computation of the K’th-ranked Element. In
EUROCRYPT 2004, Springer-Verlag (LNCS 3027),
pages 40–55, 2004.
[2] Y. Aumann and Y. Lindell. Security Against Covert
Adversaries: Eﬃcient Protocols for Realistic
Adversaries. In 4th TCC, Springer-Verlag (LNCS
4392), pages 137-156, 2007.
[3] D. Beaver. Foundations of Secure Interactive
Computing. In CRYPTO’91, Springer-Verlag
(LNCS 576), pages 377–391, 1991.
[4] M. Ben-Or, S. Goldwasser and A. Wigderson.
Completeness Theorems for Non-Cryptographic
Fault-Tolerant Distributed Computation. In 20th
STOC, pages 1–10, 1988.
[5] R. Canetti. Security and Composition of Multiparty
Cryptographic Protocols. Journal of Cryptology,
13(1):143–202, 2000.
[6] R. Canetti, Y. Ishai, R. Kumar, M.K. Reiter,
R. Rubinfeld and R. Wright. Selective Private
Function Evaluation with Applications to Private
Statistics. In 20th PODC, pages 293–304, 2001.
[7] D. Chaum, C. Cr´epeau and I. Damgard.
Multi-party Unconditionally Secure Protocols. In
20th STOC, pages 11–19, 1988.
[8] B. Chor, N. Gilboa, and M. Naor. Private
Information Retrieval by Keywords. Technical
Report TR-CS0917, Department of Computer
Science, Technion, 1997.
[9] B. Chor, O. Goldreich, E. Kushilevitz and
M. Sudan. Private Information Retrieval. Journal
of the ACM, 45(6):965–981, 1998.
[10] M.J. Freedman, Y. Ishai, B. Pinkas, and
O. Reingold. Keyword Search and Oblivious
Pseudorandom Functions. In TCC 2005,
Springer-Verlag (LNCS 3378), pages 303–324, 2005.
[11] M.J. Freedman, K. Nissim and B. Pinkas. Eﬃcient
Private Matching and Set Intersection. In
EUROCRYPT 2004, Springer-Verlag (LNCS 3027),
pages 1–19, 2004.
[12] O. Goldreich. Foundations of Cryptography: Vol. 1
– Basic Tools. Cambridge University Press, 2001.
[13] O. Goldreich. Foundations of Cryptography:
Volume 2 – Basic Applications. Cambridge
University Press, 2004.
[14] O. Goldreich, S. Micali and A. Wigderson. How to
Play any Mental Game – A Completeness Theorem
for Protocols with Honest Majority. In 19th STOC,
pages 218–229, 1987.
[15] S. Goldwasser and L. Levin. Fair Computation of
General Functions in Presence of Immoral Majority.
In CRYPTO’90, Springer-Verlag (LNCS 537),
pages 77–93, 1990.
[16] C. Hazay and Y. Lindell. Eﬃcient Protocols for Set
Intersection and Pattern Matching with Security
Against Malicious and Covert Adversaries. In 5th
TCC, Springer-Verlag , pages 155–175, 2008.
[17] L. Kissner and D.X. Song. Privacy-Preserving Set
Operations. In CRYPTO 2005, Springer-Verlag
(LNCS 3621), pages 241–257, 2005.
[18] E. Kushilevitz, Y. Lindell and T. Rabin.
Information-Theoretically Secure Protocols and
Security Under Composition. In 38th STOC, pages
109–18, 2006.
[19] Y. Lindell and B. Pinkas. Privacy Preserving Data
Mining. Journal of Cryptology, 15(3):177–206, 2002.
An extended abstract appeared in CRYPTO 2000.
[20] S. Micali and P. Rogaway. Secure Computation.
Unpublished manuscript, 1992. Preliminary version
in CRYPTO’91, Springer-Verlag (LNCS 576), pages
392–404, 1991.
[21] M. Naor and B. Pinkas. Oblivious Transfer and
Polynomial Evaluation. In 31st STOC, pages
245–254, 1999.
[22] M. Witteman. Advances in Smartcard Security.
Information Security Bulletin, July 2002, pages
11–22, 2002.
[23] A. Yao. How to Generate and Exchange Secrets. In
27th FOCS, pages 162–167, 1986.