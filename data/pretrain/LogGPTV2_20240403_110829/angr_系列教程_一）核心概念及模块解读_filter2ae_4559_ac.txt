    >>> simgr = proj.factory.simgr()
    >>> simgr.explore(find=lambda s: b"Congrats" in s.posix.dumps(1))
    >>> s = simgr.found[0]  # 获取通过 explore 找到符合条件的状态
    >>> flag = s.posix.dumps(0) 
    >>> print(flag)
    g00dJ0B!
#### explore 技术
angr 提供了多种 `explore` 技术，即进行路径探索时所采用的策略，可以在 `angr.exploration_techniques`
条目下中找到。
每个策略都是 `ExplorationTechnique` 对象，根据策略不同，angr 对 `ExplorationTechnique` 中的
`setup、step` 等方法进行覆盖。
通过 `simgr.use_technique(tech)`设定不同的策略。
下面部分列出策略
名称 | 描述  
---|---  
DFS | Depth first search. Keeps only one state active at once, putting the
rest in the `deferred` stash until it deadends or errors.  
LengthLimiter | Puts a cap on the maximum length of the path a state goes
through.  
Tracer | An exploration technique that causes execution to follow a dynamic
trace recorded from some other source.  
Oppologist | if this technique is enabled and angr encounters an unsupported
instruction, it will concretize all the inputs to that instruction and emulate
the single instruction using the unicorn engine, allowing execution to
continue.  
Threading | Adds thread-level parallelism to the stepping process.  
Spiller | When there are too many states active, this technique can dump some
of them to disk in order to keep memory consumption low.  
关于使用信息请查看 [API文档](http://angr.io/api-doc/angr.html#angr.exploration_techniques.ExplorationTechnique)
## 求解引擎
通过 `state.solver` 访问求解引擎，angr 的求解引擎是 `claripy` 用于求解约束。
### 位向量(bitvector)
位向量是比特序列，既可以表示具体值，也可以是符号变量。
通过 `BVV(value,size)` 和 `BVS( name, size)` 接口创建位向量，也可以用 FPV 和 FPS 来创建浮点值和符号。
    >>> one = state.solver.BVV(1, 64)
    >>> one_hundred = state.solver.BVV(100, 64)
    >>> weird_nine = state.solver.BVV(9, 27)
    >>> one + one_hundred
    >>> one_hundred + 0x100
    >>> one_hundred - one*200
如果两个位向量的长度不同无法进行运算的，需要将其扩展。 angr 提供 `zero_extend` 和 `sign_extend` 两种方式对向量进行拓展。
    >>> weird_nine.zero_extend(64 - 27)
    >>> one + weird_nine.zero_extend(64 - 27)
创建符号变量：
    >>> x = state.solver.BVS("x", 64)
    >>> y = state.solver.BVS("y", 64)
对其进行算术操作会得到 AST (抽象语法树)，而不是具体的值，AST 可以转化成约束，使用 SMT 求解器求解。
    >>> x + one
    >>> (x + one) / 2
    >>> x - y
#### 符号约束
将两个相似的 AST 进行比较会得到一个 AST, 这是符号化的布尔类型，使用 `solver.is_true`和 `solver.is_false`
获得真假值。
    >>> x == 1
    >>> x == one
    >>> x > 2
     0x2>
    >>> x + y == one_hundred + 5
#### 约束求解
我们可以通过 `.add` 对 state 对象添加约束，并使用 `.eval` 接口求解，得到符号变量的可行解。
    >>> state.solver.add(x > y)
    >>> state.solver.add(y > 2)
    >>> state.solver.add(10 > x)
    >>> state.solver.eval(x)
因此，我们可以根据输出和限制得到输入值，举个例子：
    # get a fresh state without constraints
    >>> state = proj.factory.entry_state()
    >>> input = state.solver.BVS('input', 64)
    >>> operation = (((input + 4) * 3) >> 1) + input
    >>> output = 200
    >>> state.solver.add(operation == output)
    >>> state.solver.eval(input)
    0x3333333333333381
如果约束冲突，无法求解，则 state 为 `unsatisfiable` 状态，可以通过 `state.satisfiable()` 检查约束是否可解。
#### 更多求解方式
除了朴素的 eval ，angr 提供了多种解析方式 。
接口 | 描述  
---|---  
`solver.eval(expression)` | 将会解出一个可行解  
`solver.eval_one(expression)` | 将会给出一个表达式的可行解，若有多个可行解，则抛出异常  
`solver.eval_upto(expression, n)` | 将会给出最多n个可行解，如果不足n个就给出所有的可行解。  
`solver.eval_exact(expression, n)` | 将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。  
`solver.min(expression)` | 给出最小可行解  
`solver.max(expression)` | 给出最大可行解  
同时可以设置 `extra_constraints` 和 `cast_to`参数对结果进行限制或转换。
## 执行引擎
angr使用一系列引擎（SimEngine的子类）来模拟被执行代码对输入状态产生的影响。源码位于 angr/engines 目录下。
以下是默认的引擎列表
名称 | 描述  
---|---  
`failure engine` | kicks in when the previous step took us to some
uncontinuable state  
`syscall engine` | kicks in when the previous step ended in a syscall  
`hook engine` | kicks in when the current address is hooked  
`unicorn engine` | kicks in when the `UNICORN` state option is enabled and
there is no symbolic data in the state  
`VEX engine` | kicks in as the final fallback.  
## 分析
angr 内置了许多程序分析方法。可以在 `angr.analyses` 下查看。
通过 `project.analyses.name` 进行调用，如 `project.analyses.CFGFast()`
。同时我们也可以编写自己的分析方法，具体可以查看 [文档](https://docs.angr.io/extending-angr/analysis_writing) 。
以下表格列出一些常用的方法。
名字 | `描述`  
---|---  
`CFGFast` | 快速地获取程序控制流图(静态)  
`CFGEmulated` | 通过动态模拟获取程序控制流图  
`VFG` | 执行值集分析，生成值流图（Value Flow Graph）  
`DDG` | 数据依赖图  
`DFG` | 为每个在CFG中出现的基本块构建数据流图  
`BackwardSlice` | 后向切片  
`Identifier` | 库函数识别  
angr 文档仅对 `CFG、BackwardSlice、function Identifier` 这三种技术进行介绍，如果想使用其他技术，可以查看API
/ 源码或者向开发者提 issue 。
### CFG
CFGFast 使用静态分析获得 CFG, 速度较快，但是不太准确。 CFGEmulated 使用符号执行获得 CFG， 耗时长，相对准确。
如果不知道该选择哪一种，就先尝试 CFGFast 。
此外，angr 的 CFG 接口是 CFGFast 的简称，如果需要使用 CFGEmulated，请直接使用 CFGEmulated。
使用示例
    >>> import angr
    >>> p = angr.Project('/bin/true', load_options={'auto_load_libs': False})
    >>> cfg = p.analyses.CFGFast()
可以使用 [angr-utils](https://github.com/axt/angr-utils) 对 CFG, CG 图进行可视化。
### backward slicing
用于后向切片，为了构建一个 BackwardSlice，我们需要以下信息作为输入：
  * CFG（必须）： A control flow graph (CFG) of the program. This CFG must be an accurate CFG (CFGEmulated).
  * Target （必须）： Target, which is the final destination that your backward slice terminates at.
  * CDG （可选）：A control dependence graph (CDG) derived from the CFG.
angr has a built-in analysis `CDG` for that purpose.
  * DDG （可选） A data dependence graph (DDG) built on top of the CFG.
angr has a built-in analysis `DDG` for that purpose.
以下是文档的使用示例
    >>> import angr
    # Load the project
    >>> b = angr.Project("examples/fauxware/fauxware", load_options={"auto_load_libs": False})
    # Generate a CFG first. In order to generate data dependence graph afterwards, you’ll have to:
    # - keep all input states by specifying keep_state=True.
    # - store memory, register and temporary values accesses by adding the angr.options.refs option set.
    # Feel free to provide more parameters (for example, context_sensitivity_level) for CFG 
    # recovery based on your needs.
    >>> cfg = b.analyses.CFGEmulated(keep_state=True, 
    ...                              state_add_options=angr.sim_options.refs, 
    ...                              context_sensitivity_level=2)
    # 生成控制流依赖图
    >>> cdg = b.analyses.CDG(cfg)
    # 生成数据流依赖图
    >>> ddg = b.analyses.DDG(cfg)
    # See where we wanna go... let’s go to the exit() call, which is modeled as a 
    # SimProcedure.
    >>> target_func = cfg.kb.functions.function(name="exit")
    # We need the CFGNode instance
    >>> target_node = cfg.get_any_node(target_func.addr)
    # Let’s get a BackwardSlice out of them!
    # `targets` is a list of objects, where each one is either a CodeLocation 
    # object, or a tuple of CFGNode instance and a statement ID. Setting statement 
    # ID to -1 means the very beginning of that CFGNode. A SimProcedure does not 
    # have any statement, so you should always specify -1 for it.
    >>> bs = b.analyses.BackwardSlice(cfg, cdg=cdg, ddg=ddg, targets=[ (target_node, -1) ])
    # Here is our awesome program slice!
    >>> print(bs)
### function identifier
用于识别库函数，目前仅针对 CGC 文件。
    >>> import angr
    # get all the matches
    >>> p = angr.Project("../binaries/tests/i386/identifiable")
    >>> idfer = p.analyses.Identifier()
    # note that .run() yields results so make sure to iterate through them or call list() etc
    >>> for addr, symbol in idfer.run():
    ...     print(hex(addr), symbol)
    0x8048e60 memcmp
    0x8048ef0 memcpy
    0x8048f60 memmove
    0x8049030 memset
    0x8049320 fdprintf
    0x8049a70 sprintf
    0x8049f40 strcasecmp
    ....
## 更新说明
因为 angr 在不断更新，很多接口也在变化，网上有些教程有点过时，看不同版本的教程可能会有点乱，这里主要说一下在其他教程中经常出现但是已经发生变更的接口。
  * `SimuVEX` 已被移除
  * `Surveyors` 已被移除
  * 使用 Simulation Manager 代替 Path Group
  * 求解引擎的接口是 state.solver 而不是 state.se 
  * `CFGAccurate` 更名为 `CFGEmulated.`
更详细的可以看 [changelog](https://docs.angr.io/appendix/changelog)
## 总结
以上就是本教程的全部内容，通过介绍我们可以对 angr 的主要接口有整体的认识，实际上 angr 还有十分丰富的内容，但是文档不太完整，有问题可以先查下
API （API 文档有些地方没有及时更新可能会有坑），或者自己看源码。
最后推荐一下论文：(State of) The Art of War: Offensive Techniques in Binary Analysis 这是
angr 相关的论文，里面介绍了一些二进制分析的方法，可以了解一下 angr 背后的思想。
后续教程我会深入介绍 angr 的更多使用技巧和实现 =）
## 参考资料
  1. 
  2. 
  3. 
  4. 