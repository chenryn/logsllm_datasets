1.13
1.13
1.04
1.13
1.12
1.23
1.05
1.02
1.01
1.01
1.02
1.14
1.00
1.24
1.51
1.02
1.06
1.18
1.97
1.33
3.87
1.00
2.66
1.00
1.87
1.13
1.07
5.07
1.09
1.06
1.01
1.02
1.04
1.26
AVX512 (λ = 4)
1.13
1.19
1.49
1.29
1.13
1.13
1.04
1.13
1.12
1.23
1.05
1.02
1.01
1.01
1.02
1.14
1.00
1.24
1.51
1.02
1.06
1.18
1.97
1.33
3.45
1.00
2.66
1.00
1.87
1.13
1.07
5.07
1.09
1.06
1.01
1.01
1.04
1.26
AVX512 (λ = 64)
1.08
1.14
1.36
1.12
1.06
1.08
1.03
1.09
1.06
1.10
1.03
1.01
1.01
1.01
1.01
1.12
1.00
1.09
1.43
1.01
1.06
1.10
1.92
1.18
1.51
1.00
1.68
1.00
1.84
1.06
1.03
3.17
1.04
1.04
1.01
1.01
1.02
1.16
AVX2 (λ = 4)
1.22
1.36
1.86
1.55
1.25
1.13
1.06
1.23
1.01
1.38
1.09
1.03
1.01
1.03
1.03
1.21
1.00
1.27
1.48
1.02
1.05
1.21
2.45
1.30
2.83
1.00
4.39
1.00
1.50
1.33
1.08
10.58
1.16
1.08
1.01
1.02
1.07
1.34
AVX2 (λ = 64)
1.08
1.15
1.37
1.22
1.12
1.07
1.01
1.07
1.05
1.15
1.01
1.01
1.01
1.01
1.01
1.15
1.00
1.06
1.48
1.01
1.09
1.01
2.10
1.16
1.50
1.00
1.87
1.00
1.45
1.11
1.03
3.23
1.08
1.05
1.01
1.01
1.03
1.17
SC-Eliminator
1.11
1.09
1.12
1.06
1.06
1.05
1.05
1.30
1.06
1.17
1.01
1.05
1.08
1.01
1.03
1.04
1.03
1.08
1.97
1.08
1.03
1.15
1.41
-
-
-
-
-
-
-
-
-
-
-
-
-
-
1.12
Soares et al.
1.02
1.00
1.02
1.00
1.02
1.00
1.00
1.00
1.04
1.01
-
-
-
-
-
-
1.15
1.11
1.24
1.01
1.01
1.01
1.24
-
-
-
-
-
-
-
-
-
-
-
-
-
-
1.05
correctness For each part we assume that the other holds, so that
the initial claim can hold by construction.
For control flows, we need to show that along real paths the
transformed program performs all and only the computations that
the original one would make. First, we rule out divergences from
exceptional control flow since the original program is error-free
and CFL sanitizes sequences that may throw (e.g., division) when
in dummy execution. We then observe that by construction CFL
forces the program to explore both outcomes of every branch, and
the decision whether to treat each direction in dummy execution
depends on the taken predicate value. CFL builds this predicate as
the combination of the control-flow decisions that the (original)
program takes on the program state, and from the data flow argu-
ment decoy paths have no effects on such state. All the linearized
branch directions will be executed as many times and in the same
interleaving observable in the original program; as for the special
loop case, the amount of real and decoy iterations depends on the
original loop condition and the taken predicate, so its real iterations
closely match the original loop. This completes the argument.
For data flows, we need to show that values computed in dummy
execution cannot flow into real paths, and that decoy paths preserve
memory safety. The points-to metadata fed to DFL load and store
wrappers make the program access the same memory objects along
both real and decoy paths, and allocation metadata ensure that
those objects are valid: memory safety is guaranteed. Also, only
real paths can change memory contents during a store, hence only
values written by real paths can affect data loads. Thus, we only
need to reason about data flows from local variables assigned in
dummy execution. LLVM IR hosts such variables in SSA virtual reg-
isters, and at any program point only one variable instance can be
live [56]. For a top-level linearized branch, a ct_select statement
chooses the incoming value from the real path (§4.2.1). For a nested
branch (Figure 2) both directions may be part of dummy execution.
Regardless of which value the inner ct_select will choose, the
outer one eventually picks the value coming from the real path that
did not contain the branch. Extending the argument to three or
more nested branches is analogous: for a variable that outlives a
linearized region, whenever such variable is later accessed on a real
path, the value from a real path would assign to it (otherwise the
original program would be reading an undefined value or control-
flow correctness would be violated), while in decoy paths bogus
value can freely flow. We discussed correctness for loops in §4.2.4.
G COMPLETE RUN-TIME OVERHEAD DATA
Table 5 shows the complete set of our performance-oriented ex-
periments: we benchmarked Constantine with different λ values
(1, 4, 64) and SIMD capabilities (AVX2 and AVX512), and also ran
the artifacts from [80] and [62] on the same setup used for §6. For
the latter we did not try the Raccoon microbenchmarks, mostly due
to compatibility problems and limitations of the artifacts, while the
SCE suite was part of their original evaluation (Soares et al. leave
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea732the botan group out of the artifact evaluation harness). Both sys-
tems provide much weaker security properties than Constantine,
yet the average overhead numbers we observe are similar. Also, the
availability of AVX512 instructions brings benefits for the λ = 64
setting as they allow DFL to touch more cache lines at once over
large object portions (§C). Interesting, protection for the presently
unrealistic λ = 1 attack vector leads to overheads that are identical
to the λ = 4 configuration for MemJam-like attacks, with dijkstra
being the only exception (3.87x vs 3.45x).
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea733