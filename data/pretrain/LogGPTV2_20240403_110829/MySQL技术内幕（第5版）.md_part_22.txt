L
-个列，它的字符集为latin1，排序规则为latinl_swedish_ci。但是，你想按照西班牙语
排序规则的名字总是以字符集的名字作为开头。每种字符集都最少拥有一种排序规则，并
mySql> SHOW CHARACTER SET LIKElatin%;
这两条语句都支持LIKE子句，
如果想知道有哪些字符集和排序规则可供选用，可使用下面这些语句：
SELECT c FROM t ORDER BY c COLLATE latinl_Spanish_ci;
SHOW CHARACTER SET;
也可以通过使用COLLATE 运算符，按照特定的排序规则对字符串值进行排序。例如，c是
口如果想为某个表指定默认的字符集和排序规则，则可以在创建该表时使用表选项
1Collation
HOW COLLATION;
0
utf8_slovenian_ci
utf8_romanian_ci
utf8_icelandic_ci
utf8_unicode_ci
utf8_bin
latin7
latin5
Charset
对于表里的列，可以使用属性CHARACTER SET和COLLATION显式地为它指定字符集和
如果没有指定字符集和排序规则，那么这个表会使用数据库的默认设置。
如果没有指定字符集和排序规则，那么这个数据库会使用服务器的默认设置。
第2章使用SQL管理数据
latinl
确定可用字符集和当前设置
VARCHAR、TEXT、ENUM和 SET 等数据类型。
如果没有给定字符集和排序规则，那么列会使用表的默认设置。这些属性适用于CHAR、
C CHAR(10) CHARACTER SET charset COLLATE collation
排序规则。例如：
CREATE TABLE tbl_name（...） CHARACTER SET charset COLLATE collation;
CHARACTER SET和 COLLATION:
cp1252 West European
ISO 8859-13 Ba1tic
ISO 8859-2 Centra1 European
Description
ISO8859-9
ICharset|Id
utf8
utf8
utf8
utf8
utf8
Turkish
utf8
utf8
，它可以把查询结果的范围缩小到那些字符集或排序规则的
196
195
194
193
192
33
8
1Default|Compiled|Sortlen
Yes
latin7_general_ci
latin2_general_ci
latinl_swedish_ci
Default collation|Maxlen
latin5_turkish_ci
--+---
Yes
---
## Page 91
是低字节优先，而非高字节优先。
65 536个字符。它们都不支持BMP之外的那些补充字符。
式进行表示。
语，由于包含了非常多的字符，它们的每个字符都需要使用多个字节来表示。
符。latin1字符集很小，每个字符只使用一个字节来表示即可。但对于某些语言，如日语和汉
就有可能被用不同的数字表示。还有，不同的语言往往要求使用数目不同的字节去表示一个字
从而会导致好些问题。例如，如果某个给定字符存在于好几种语言里，它在不同的编码方案里
2.4.3
响。
MySQL5.6.1增加了对utf161e的支持。该字符集与utf16很像，主要差异在于它使用的
utf8与ucs2这两种类型的Unicode字符集，都只包括了BMP里定义的字符，即最多只有
Unicode的目标是提供一种统一的字符编码系统，让所有语言的字符集都能以一种统一的方
 utf8mb4 字符集包含了所有的 utf8字符（其中，每个字符占1到3个字节），另外也
口utf8字符集采用了一种长度可变的格式，使用1到3个字节来表示一个字符。它与
口ucs2字符集与Unicode的UCS-2编码方案相对应。它使用2个字节来表示1个字符，
之所以会有这么多种字符集，原因之一就是人们为不同的语言制定了不同的字符编码方案。
更多相关信息请参考3.1.2.2节。
其中有几个系统变量，会在客户端与服务器的连接建立好之后，对它们之间的通信产生影
口
mysql> SHOW VARIABLES LIKE'collation\_%';
IVariable_name
mysql> SHOW VARIABLES LIKE 'character\_set\_%1
如果想显示服务器当前的字符集和排序规则设置，则可以使用SHOWVARIABLES：
包含了补充字符，其中，每个字条占4个字节。
字符集 utf16 和 utf32 类似于ucs2，只是它们增加了对补充字符的支持。对于
MySQL 5.5.3版本开始，其他的Unicode字符集都包括了BMP之外的那些补充字符。
UTF-8编码方案相对应。UTF是统一编码转换格式（UnicodeTransformation Format）的
Set）的缩写。
Unicode 支持
collation_server
collation_database
collation_connection
Variable_name
utf32，所有字符都占4个字节。
character_set_system
character_
character_set_filesystem
character_set_database
缩写。
并且最高有效字节（most significant byte）优先。UCS 是通用字符集（Universal Character
character_set_connection
set_
server
utf8_general_ci
Value
latinl_swedish_ci
latinl_swedish_ci
IValue
ut8
latinl
utf8
binary
latinl
utf8
2.4字符集支持
L
---
## Page 92
是那个给定字符集的排序规则。关于字符集和排序规则的进一步讨论请参考2.4节。
名字的开头部分来确定的字符集。
显式设置数据库属性的方法是，使用CHARACTER SET子句和COLLATE子句。例如：
错误，并且只想在给定数据库尚不存在时才创建它，那么可以加上IF NOTEXISTS子句：
2.5.2
是说，当你再次连接上该服务器时，它并不会记得你上一次所选择的那个默认数据库。
与这些表相对应的那个库标识符来限定它们的名字。
能使用该库里的表。由于已有了一个默认数据库，因此如果想引用其他库里的表，则需要使用
USE语句，从而实现在两个数据库之间的任意切换。同时，选择了一个数据库也并不意味着！
president表里的内容，那么可以使用如下所示的查询语句：
名，就可以引用该库里的表。例如，你事先没有把sampdb选为默认数据库，但是想检索其中
2.5.1选择数据库
属性。
用于创建数据库；DROP DATABASE 用于删除数据库；ALTER DATABASE用于更改数据库的全局
2.5
乙
这个字符集必须是服务器支持的若干字符集中的一个，如latin1或 sjis。排序规则应该
如果只给出了CHARACTER SET，而没有提供COLLATE，则意味着使用这个给定字符集的默
在默认情况下，服务器的字符集和排序规则将成为新建数据库的默认字符集和排序规则。
CREATE DATABASE IF NOT EXISTS db_name;
CREATE DATABASE mydb CHARACTER SET utf8 COLLATE utf8_icelandic_ci;
在默认情况下，当你试图创建的一个已存在的数据库时，系统会报错。如果想要避免这类
当断开与服务器的连接时，针对该会话的那个服务器默认数据库概念也将不复存在。也就
CREATE DATABASE [IF NOT EXISTS] db_name
CREATEDATABASE语句有几个可选子句。完整语法如下：
先决条件：这个数据库不能是已存在的，并且必须要拥有CREATE 权限。
创建数据库的方法是，使用 CREATE DATABASE语句：
选择了一个数据库，并不意味着它就是此次会话期间的默认数据库。你可以根据需要调用
SELECT *FROM sampdb.president;
使用USE语句可以选择数据库，并把它指定为MySQL服务器连接的默认（当前）数据库：
在涉及DATABASE的所有语句里，
MySQL 提供了几条数据库级的语句：USE 用于选定一个默认数据库；CREATE DATABASE
CREATE DATABASEdb_name;
不是一定要显式地选择数据库。在你没有选择数据库的情况下，只要用数据库名来限定表
要想选择数据库，你必须要具备相应的访问权限；否则，会出现错误提示。
USEdb_name;
[CHARACTER SET charSet] [COLLATE collation];
创建数据库
数据库的选择、创建、
第2章使用SQL管理数据
SCHEMA关键字与DATABASE同义。
删除和更改
口
---
## Page 93
一组特定的属性或特性。表2-1简要描述几种存储引擎，稍后会对其中的几种（主要是InnoDB
2.6.1存储引擎的特性
表的那些存储引擎。
下面几节的内容将详细解释这些语句，但首先需要讨论一下 MySQL支持的用于管理不同类型
语句更改其结构。CREATEINDEX语句和DROPINDEX语句则可以用来为已有表增加或删除索引。
2.6
数据库的全局属性只包含默认字符集和排序规则：
2.5.4
然后再调用DROPDATABASE语句。
然会显示出来。想要真正删除那个数据库，就要手动删除该数据库子目录里残留文件和目录，
那个目录。这意味着，那个数据库目录依然存在，并且如果调用 SHOW DATABASES 语句，它仍
图和触发器。如果DROP DATABASE语句执行失败，那么通常是因为那个数据库的目录里还包含
(表、存储例程等)。此时，这个数据库也会永远消失，除非你定期对它做过备份，才有可能把
2.5.3
果
它恢复过来。
设置。
里没有指定其自己的默认字符集和排序规则，那么数据库的这些默认设置都会成为该表的默认
储一些属性，如数据库的字符集和排序规则。当以后在这个数据库里创建表时，如果表的定义
个新目录被称为数据库目录。服务器还会在这个目录下创建一个名为db.opt的文件，用于存
MySQL支持多种存储引擎（以前被称为“表处理器”"）。每一种存储引擎所实现的表都具有
MySQL允许使用CREATETABLE语句和DROP TABLE语句来创建、删除表，使用ALTERTABLE
如果省略了数据库名，那么ALTERDATABASE会应用到默认数据库。
并且要求至少给定它们当中的一个。
在前面对 CREATE DATABASE 的讨论里，讲述了 CHARACTER SET子句和 COLLATE子句的效
如果拥有 ALTER 权限，则可以使用 ALTER DATABASE语句来更改数据库的全局属性。目前，
一个数据库就是MySQL数据目录里的一个目录，这个目录主要用于存放对象，如表、
如果你有DROP权限，那么删除数据库会跟创建数据库一样简单：
Create Database: CREATE DATABASEmydb
mysql> SHOW CREATE DATABASE mydbIG
查看现有数据库定义的方法是，使用SHOWCREATEDATABASE语句：
在创建表时，MySQL服务器会在其数据目录下创建一个目录，其名与数据库名相同。这
请注意，千万不要随意使用DROP DATABASE语句。因为它会删掉数据库和其中的所有内容
DROPDATABASEdb_name;
表的创建、
更改数据库
删除数据库
Database:mydb
库
删除、
/*!40100DEFAULT CHARACTER SETutf8
索引和更改
2.6表的创建、删除、索引和更改
视
---
## Page 94
思是该存储引擎存在，但它已被关闭；DEFAULT表示它是服务器默认使用的存储引擎。标记
更多信息请参考12.5节。
在编译该服务器时所用的具体配置，以及启动该服务器时所使用的选项。关于存储引擎选择的
2.6.1.1查看有哪些存储引擎可用
许将第三方开发人员的存储引擎集成到服务器里。关于该接口的更多信息请参考12.4节。
件。这样，DBA可以把这些引擎当成是可选的，然后再根据需要进行加载。这个插件接口还允
用了一种“可插入”的架构，可以实现选择性的插件加载，并且许多存储引擎都被构建为了插
面两个名字仍能被识别，但已废弃了。
和 NDB 的同义词。存储引擎MEMORY和 InnoDB在早期分别称为 HEAP和 Innobase。虽然后
及太多。
需要更多扩展性的讨论，这超出了本书介绍的范畴。因此，在本书的后面部分对它们并不会谈
和MyISAM）进行详细讨论。其他未介绍到的引擎或者一般很少用到，或者像NDB 这样的，
其中，Support 栏的值为 YES 或NO，分别代表了该存储引擎是否可用；DISABLED 的意
查出服务器都知道哪些存储引擎的方法是，使用 SHOW ENGINES 语句：
给定一个服务器，它实际包含哪些可用的存储引擎，具体取决于：所用的MySQL 版本，
在一开始，MySQL服务器都是把所有这些存储引擎编译在内部，以供使用的。现在，它采
Transactions:
Transactions:
有几种存储引擎的名字还有同义词。例如，MRG_MyISAM和NDBCLUSTER分别是MERGE
Savepoints:
Savepoints:
第2章使用SQL管理数据
NDB
MyISAM
MERGE
MEMORY
InnoDB
FEDERATED
CSV
BLACKHOLE
Comment:
ARCHIVE
Support: