speciﬁcation will have assumptions on how the system and programs behave.
The speciﬁcations cannot be declared as complete before all assumptions of the
speciﬁcations are identiﬁed. In some cases, once the assumptions are declared
as required by the veriﬁcation approach, an IDS does not have to monitor the
properties asserted in these assumptions. There are two diﬀerent kinds of as-
sumptions in our veriﬁcation: general assumptions of the system and speciﬁc
assumptions of veriﬁcations.
Formal Reasoning About Intrusion Detection Systems
287
System assumptions are very important although they are not formalized
in our veriﬁcation. Some general assumptions of the system model are listed as
follows:
– System kernel is not vulnerable to attack
The security of system kernel is beyond the scope of this paper. We simply
assume that system kernel is not vulnerable to attack.
– DAC mechanism of the system is correctly implemented
Access control is a concern of our veriﬁcation. So correct implementation of the
DAC mechanism is an assumption for the security of the system. If the access
control mechanism is not well implemented and a user can access objects for
which he is not authorized, it is impossible to protect these objects by only
constraining behaviors of privileged programs.
– Completeness on log data
As a hypothesis of the IDS, audit logs should record the trace of attacks so that
analysis of the audit logs may detect such attacks. Therefore, log data should
include all important operations with their correct sequence. If an attacker can
successfully eliminate his traces before an IDS analyzes them, it is impossible to
detect this activity by an IDS.
The speciﬁc assumption of veriﬁcation will be discussed in section 4, in the
context of the veriﬁcations of speciﬁc IDS and security policies.
4 Speciﬁcation and Veriﬁcation of SHIM
We formalized the speciﬁcations of a speciﬁcation-based IDS, SHIM, and ana-
lyzed them according to diﬀerent security policies and attacks.
4.1 Introduction of SHIM
SHIM is a speciﬁcation-based IDS. Speciﬁcation-based IDSs are based on the
creation of speciﬁcations that describe desired functionality for security-critical
entities [7] [8] [20] [10] [23]. The security speciﬁcations in SHIM mainly focus
on the valid operations of a UNIX privileged program. Privileged programs are
analyzed because of their signiﬁcant impact on system security. The eﬀective
user of a privileged program has root privileges, and attacks against a privileged
program often exploit the privilege to access security-critical objects that are
not intended to be accessed by the victim program. For example, in a ftp buﬀer
overﬂow attack, an attack can invoke a shell with root privilege and use it to
access any ﬁles of the system [2]; that the attack is a buﬀer overﬂow is incidental
to the speciﬁcation.
During program operation, the system accesses associated with the operation
of a program are recorded in audit logs and matched against the speciﬁcations
by SHIM. Mismatches are reported and almost always indicate an attack. The-
oretically, SHIM is capable of detecting unknown attacks or variants of known
attacks, and a report is issued as soon as a speciﬁcation violation occurs. If the
program was compromised by an attack (e.g. buﬀer overﬂow) and attempted to
invoke any system calls that violated the speciﬁcations, an alert would be raised.
288
Tao Song et al.
4.2 Formalization of Speciﬁcations
In SHIM, a language, Parallel Environment Grammar (PE grammar), is devel-
oped to deﬁne speciﬁcations that describe all valid operations of a program. The
language permits the parameterization of the language syntax and environment
variables that aid in parsing eﬃciency. PE grammar can be used to specify the
valid execution traces of programs. The speciﬁcation of ftp daemon is listed to
show how the language works:
SE: 
 ->  *;
-> (OPEN_RD, WorldReadable($F.mode))
;the program can read a file that is world-readable
| (OPEN_RD, CreatedByProc($P.pid, &$F))
;the process can read a file that is created by itself
| (OPEN_RD, $F.ouid == $S.uid)
;the process can read a file whose owner is the current user
| (OPEN_WR, CreatedByProc($P.pid, &$F))
| (OPEN_WR, $F.path == "/var/log/wtmp")
;the process can write to a file a specific path
| (OPEN_WR, $F.path == "/var/log/xferlog")
| (OPEN_RW, $F.path == "/var/run/ftp.pids-all")
| (open, $F.path == "/dev/null")
| (unlink,
| (CHMOD,
| (CHOWN,
| (fork||vfork)
| (OPEN RD, InDir($F.path, getHomeDir($S.uid)))
CreatedByProc($P.pid, &$F))
CreatedByProc($P.pid, &$F))
CreatedByProc($P.pid, &$F))
;the process can read a file situated on a specific directory
| (OPEN WR, InDir($F.path, getHomeDir($S.uid)))
| (read,
IsSocket($F.mode) && $K.lport == 21)
;the process can get information from specific port
| (write, IsSocket($F.mode) && $K.lport == 21)
| (CREAT, InDir($F.path, getHomeDir($S.uid)))
| (EXEC, $path == "/bin/tar" || $path == "/bin/compress" ||
$path == "/bin/ls"
|| $path == "/bin/gzip") ;END;
In this speciﬁcation, valid operations are deﬁned with a term validop. Eighteen
valid operations are included in this speciﬁcation and each valid operation is a
function of system calls and environment variables. For example the operation
(OPEN RD, WorldReadable($F.mode)) means this programs can open a ﬁle in
read mode when the ﬁle is readable by all users. PE grammar is capable of
deﬁning a multi-state speciﬁcation, but in this speciﬁcation, only one state is
used, namely the state associated with the invocation of the program. This
speciﬁcation shows a balance between expressiveness and detection eﬃciency.
In our veriﬁcation, a function is deﬁned to check whether audit trails of a ftp
daemon process violates the speciﬁcation. The function accepts an audit trail
as a parameter. If any operation of the audit trail violates the speciﬁcation, the
function will return false otherwise true. All valid operations are deﬁned with
Formal Reasoning About Intrusion Detection Systems
289
two functions: operation and property restriction. The operation function deﬁnes
the operation on an object and the property restriction function deﬁnes the con-
dition in which the operation will be performed. For example, the valid opera-
tion (OPEN RD, WorldReadable($F.mode)) can be formalized as (and (operate
’openrd logrec) (WorldReadable (logrec-fobj logrec))). In the deﬁnition, the func-
tion operate gets the correct operation, and function WorldReadable determines
whether the permission of the ﬁle is world readable.
4.3 Veriﬁcations
Our veriﬁcation focuses on the eﬀectiveness of speciﬁcations of SHIM in satisfy-
ing security requirements, including attacks and security policies. We attempt to
address the issue whether, with speciﬁc detection rules, SHIM can detect speciﬁc
attacks or detect attacks that cause speciﬁc security policies to be validated.
Detection of Attacks. Attacks are modeled as sequences of operations. We
use two ways to describe attack scenarios: an audit trail that contains an attack
or a characterization of attacks. According to the characteristic of speciﬁcation-
based IDS, SHIM cannot detect any attacks that do not change the behavior of
victim programs. So here we introduce an assumption about attack:
Assumption: an attack cannot cause any damage without changing the behav-
ior of a victim program.
Then we can claim that SHIM is capable of detecting attacks before or at
least “as” they cause damage to the system.
For known attacks, we can always simulate their audit trails. Considering
the buﬀer overﬂow attack against wuftpd 2.4.2-beta-18. The program can be
compromised by overﬂowing a buﬀer in strcat(). We simulated an audit trail
which invoked a shell after penetration of strcat(). Then we used the speciﬁcation
of ftp daemon to check this audit trail. A violation is reported and this indicates
that the attack can be detected by SHIM. A further analysis shows that the
violation is revealed by the audit record that indicates invocation of the shell.
The call to the library function strcat() does not reveal aviolation. This result
proves that the speciﬁcation of SHIM can detect this buﬀer overﬂow attack if
the attacker tries to invoke a shell after penetration.
For unknown attacks, we can consider a group of similar attacks that invoke
shells after they successfully compromise an ftp daemon program. We indicate a
theorem which shows any audit trail with an operation invoking a shell will be
detected by the speciﬁcation of ftp daemon. The theorem is deﬁned as :
(defthm attack-ftp
(implies
(member ’exec "/bin/bash" log sys)
;any operation invoking a shell
(not(spec ftpd sys log nil))
;violate the specification of ftp program
))
290
Tao Song et al.
This theorem demonstrates an important feature of SHIM: detection of unknown
attacks. Any unknown attacks against the ftp daemon will be detected if an op-
eration of invoking shells is observed. The proof of the theorem is straightforward
because /bin/bash is not a valid path for the exec system call in the speciﬁcation.
Proving a Speciﬁcation Satisﬁes a Security Policy. In this section, we
carry out a veriﬁcation that indicates the trusted ﬁle access policy is satisﬁed
by speciﬁcations of SHIM with some assumptions.
We use the passwd ﬁle access policy as an example in this veriﬁcation. As
we deﬁned in section 3, the passwd ﬁle access policy deﬁnes how the passwd
ﬁle should be accessed. According to the DAC mechanism of UNIX systems,
any user without root privilege cannot modify the passwd ﬁle except through a
privileged program. If the DAC mechanism is well implemented, no user except
root can use unprivileged programs, like vi, to change the passwd ﬁle. So, we
only focus on the behavior of privileged programs in verifying that the system
satisﬁes the policy.
Given an audit trail of a speciﬁc privileged program, we try to prove that
any audit trail that passes the check of the speciﬁcation will satisfy the passwd
ﬁle access policy. We use ftp deamon as an example to show how it works.
The proof is deﬁned as a theorem which is indicated below. The formalization
of the abstract system model sys and audit data log are used in this theorem.
We may notice that some assumptions are added to complete the proof. Two
important veriﬁcation assumptions are made in this proof.
The ﬁrst assumption is about the access permissions of the passwd ﬁle. The
passwd ﬁle can only be protected when it has proper access permission. If the
passwd ﬁle is set world writeable, the integrity of the ﬁle cannot be protected
because any user has the privilege to change the passwd ﬁle.
The other assumption is concerned with the setting of the home directory of
the user who attempts to access the passwd ﬁle. A user can access the passwd
ﬁle if his home directory is set as /etc. The reason is that the speciﬁcation of the
ftp deamon allows the user to access the ﬁles under his home directory. In fact,
this assumption can be guaranteed by deploying some conﬁguration checking
tools such as KUANG [24]. But in SHIM, such a property of the system is not
monitored. With these assumptions, any audit data that passes the speciﬁcation
check of the ftp deamon will satisfy the passwd ﬁle access policy.
(defthm passwd-ftp
(implies
(and(not (member ’(/ etc passwd) created))
;passwd file was not created by the process
(consp log)(consp sys)(logp log)(consp created)(sys-p sys)
;format checking
(validuser sys log)
;assumption: no invalid user as determined by the audit data
(passwdsafe log)
Formal Reasoning About Intrusion Detection Systems
291
;assumption: passwd file has proper permissions
(homedirsafe sys)
;assumption: home diretory settings are correct
(spec ftpd sys log created))
;the specification is not violated by any operations