### Specification and Assumptions in System Verification

#### Introduction
Specifications for a system and its programs are based on certain assumptions about their behavior. These specifications cannot be considered complete until all underlying assumptions are identified. In some cases, once the assumptions are declared as required by the verification approach, an Intrusion Detection System (IDS) does not need to monitor the properties asserted in these assumptions. Our verification process involves two types of assumptions: general system assumptions and specific verification assumptions.

#### General System Assumptions
General system assumptions, though not formalized in our verification, are crucial. Here are some key system assumptions:

- **System Kernel Security**: We assume that the system kernel is not vulnerable to attacks. The security of the system kernel is beyond the scope of this paper.
- **Discretionary Access Control (DAC) Mechanism**: We assume that the DAC mechanism of the system is correctly implemented. This is essential for our verification because if access control is not well-implemented, unauthorized users could access objects, making it impossible to protect them solely by constraining the behaviors of privileged programs.
- **Completeness of Log Data**: Audit logs should record all important operations with their correct sequence. If an attacker can eliminate traces before the IDS analyzes them, it becomes impossible to detect such activities.

#### Specific Verification Assumptions
Specific assumptions related to the verification will be discussed in Section 4, in the context of verifying specific IDSs and security policies.

### Specification and Verification of SHIM

#### Introduction to SHIM
SHIM is a specification-based Intrusion Detection System (IDS). Such IDSs are based on creating specifications that describe the desired functionality for security-critical entities. In SHIM, the focus is on the valid operations of UNIX privileged programs due to their significant impact on system security. Privileged programs have root privileges, and attacks often exploit these privileges to access security-critical objects.

During program operation, system accesses associated with the program are recorded in audit logs and matched against the specifications by SHIM. Mismatches indicate potential attacks. Theoretically, SHIM can detect unknown attacks or variants of known attacks, and alerts are issued as soon as a specification violation occurs.

#### Formalization of Specifications
In SHIM, a language called Parallel Environment Grammar (PE grammar) is used to define specifications that describe all valid operations of a program. PE grammar allows parameterization of syntax and environment variables, enhancing parsing efficiency. Below is an example of the specification for the FTP daemon:

```plaintext
SE: 
 ->  *;
-> (OPEN_RD, WorldReadable($F.mode))
;the program can read a file that is world-readable
| (OPEN_RD, CreatedByProc($P.pid, &$F))
;the process can read a file that is created by itself
| (OPEN_RD, $F.ouid == $S.uid)
;the process can read a file whose owner is the current user
| (OPEN_WR, CreatedByProc($P.pid, &$F))
| (OPEN_WR, $F.path == "/var/log/wtmp")
;the process can write to a file at a specific path
| (OPEN_WR, $F.path == "/var/log/xferlog")
| (OPEN_RW, $F.path == "/var/run/ftp.pids-all")
| (open, $F.path == "/dev/null")
| (unlink,
| (CHMOD,
| (CHOWN,
| (fork||vfork)
| (OPEN RD, InDir($F.path, getHomeDir($S.uid)))
CreatedByProc($P.pid, &$F))
CreatedByProc($P.pid, &$F))
CreatedByProc($P.pid, &$F))
;the process can read a file situated on a specific directory
| (OPEN WR, InDir($F.path, getHomeDir($S.uid)))
| (read,
IsSocket($F.mode) && $K.lport == 21)
;the process can get information from a specific port
| (write, IsSocket($F.mode) && $K.lport == 21)
| (CREAT, InDir($F.path, getHomeDir($S.uid)))
| (EXEC, $path == "/bin/tar" || $path == "/bin/compress" ||
$path == "/bin/ls"
|| $path == "/bin/gzip") ;END;
```

This specification includes eighteen valid operations, each defined as a function of system calls and environment variables. For example, `(OPEN_RD, WorldReadable($F.mode))` means the program can open a file in read mode if the file is readable by all users.

#### Verifications

##### Detection of Attacks
Attacks are modeled as sequences of operations. We use two methods to describe attack scenarios: an audit trail containing an attack or a characterization of attacks. SHIM cannot detect attacks that do not change the behavior of victim programs. Thus, we make the following assumption:

- **Assumption**: An attack cannot cause any damage without changing the behavior of a victim program.

For known attacks, we simulate their audit trails. For instance, in a buffer overflow attack against wuftpd 2.4.2-beta-18, the program can be compromised by overflowing a buffer in `strcat()`. We simulated an audit trail that invoked a shell after penetration of `strcat()`, and checked it against the specification of the FTP daemon. A violation was reported, indicating that the attack can be detected by SHIM.

For unknown attacks, we consider a group of similar attacks that invoke shells after compromising an FTP daemon program. We define a theorem to show that any audit trail with an operation invoking a shell will be detected by the specification of the FTP daemon:

```lisp
(defthm attack-ftp
(implies
(member ’exec "/bin/bash" log sys)
;any operation invoking a shell
(not(spec ftpd sys log nil))
;violate the specification of FTP program
))
```

This theorem demonstrates SHIM's capability to detect unknown attacks.

##### Proving a Specification Satisfies a Security Policy
We verify that the trusted file access policy is satisfied by SHIM's specifications with some assumptions. Using the passwd file access policy as an example, we focus on the behavior of privileged programs. Given an audit trail of a specific privileged program, we prove that any audit trail passing the check of the specification will satisfy the passwd file access policy.

The proof is defined as a theorem, with formalized abstract system model `sys` and audit data `log`:

```lisp
(defthm passwd-ftp
(implies
(and (not (member ’(/ etc passwd) created))
;passwd file was not created by the process
(consp log)(consp sys)(logp log)(consp created)(sys-p sys)
;format checking
(validuser sys log)
;assumption: no invalid user as determined by the audit data
(passwdsafe log)
;assumption: passwd file has proper permissions
(homedirsafe sys)
;assumption: home directory settings are correct
(spec ftpd sys log created))
;the specification is not violated by any operations
))
```

With these assumptions, any audit data passing the specification check of the FTP daemon will satisfy the passwd file access policy.