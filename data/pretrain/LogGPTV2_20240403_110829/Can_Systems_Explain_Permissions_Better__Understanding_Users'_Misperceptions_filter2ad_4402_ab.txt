hension of the permissions (Permission Comprehension) and
the factors of their concern when making privacy decisions
(Decision Factors), respectively (see [10] for survey instru-
ments). Both surveys contain a background section including
demographics questions to screen and ﬁlter the responses.
Survey 1: Permission Comprehension.
Permission Group Comprehension. In the runtime permis-
sion model, permissions are managed in permission groups.
This survey aims to investigate if users can understand the
scope of each permission group (i.e., their protected resources
and permitted actions) based on the systems’ descriptions.
To achieve this, in each question of this section, we ﬁrst
presented a permission request dialog (Figure 1) to our re-
spondents and then asked them to choose what actions can
be performed by the app once the permission is granted. We
provided our respondents with the shufﬂed correct choices de-
scribing relevant actions controlled by the permission group
and two more incorrect choices describing irrelevant actions.
We also provided choices, “None of these” and “I don’t know”
in case our respondents ﬁnd no choices applicable in their
understanding or they were not sure about the answer. Our
questions in this section covered all the permission groups
shown in Table 1. To avoid overwhelming the respondents
with too many questions, only four questions for different
permission groups are randomly drawn for each respondent.
Permission Model Changes (Android Only). As discussed
in §2.2, the evolution of the permission model on Android
makes it possible for apps to get the permissions granted
from users unintentionally. In this section, we investigated
whether our Android respondents were aware of such permis-
sion model changes and their induced risks. The permission
notice for low-version apps in the app market is shown before
downloading apps, as shown in Figure 3. We then asked our
respondents three questions: (1) Will the app be able to access
754    30th USENIX Security Symposium
USENIX Association
Table 1: Table of permissions that require user consent in runtime
on the recent version of Android and iOS. Y means the app needs
prompt users to get this permission; X means the app has no way
to get this resource on this platform; - means the app does not need
to prompt users for this permission or does not need to have such
permission. We study all permissions marked with Y in this paper.
Permission(s)
Android 9.0
iOS 12
Calendar, Camera, Contacts, Microphone
Location
Body Sensor
Storage
Photos
SMS, Call Log, Phone
Bluetooth Sharing
Music & Media, Health
Y
Y
Y
Y
Y1
Y
-
-1
Y
Y1
Y1
X
Y
X
Y
Y
Figure 2: Android settings for
app permission groups. Users
need to infer the scope of the
group to manage permissions.
Figure 3: Google Play’s notice
for apps with low target SDK
version before installation. It
gives no clear warning to users.
the listed resources immediately after clicking accept? (2)
Can you change the permission settings again? (3) Will the
app ask for the permissions again after launching the app?
Survey 2: Decision Factors. This survey focuses on fac-
tors that can inﬂuence users’ decisions on permission requests
(decision factors for short). Speciﬁcally, we studied six deci-
sion factors: reviews, rating, brand reputation, background
access, data transmission and grant rate. The detailed deﬁni-
tions of each decision factor is presented in §6.1. Our study
compares how users’ permission decisions are impacted by
positive and negative messages of each decision factor. Our
study also surveys users’ opinions on how helpful they ﬁnd
different factors in making permission decisions.
1Location permission decisions on iOS are divided into 1) always allow,
2) allow only while using this app, 3) deny; Body sensor permission on iOS
is called Motion; Photos on Android is regarded as common external storage,
so it belongs to Storage permission; Music & media library are speciﬁc to
Apple services.
In our survey, each respondent is provided with three simu-
lated scenarios of permission request for three different per-
mission groups (Contact, Calendar, and Location). These
permission groups are selected as they are available on both
Andriod and iOS.The scenarios are as follows:
(1) Felp requests Contact permission. Felp can help you ﬁnd
good restaurants around you. In Felp, you can read the menu
and other users’ reviews for restaurants.
(2) RShare requests Calendar permission. RShare can help
you ﬁnd a ride and carpools. You can search for your destina-
tions and ﬁnd suitable rides in RShare.
(3) LCGE requests Location permission. LC Gas & En-
ergy (LCGE) is an app to help you pay your electronic bills
and utility fees. You can view your current energy usage and
fees, make payments or schedule a payment.
We used these descriptions to introduce app functionalities
to our respondents. In order to provide more runtime context,
we also provided screenshots of the apps before and after the
permission requests, with the triggering actions, as shown in
Figure 4. The images are adapted from screenshots of real
apps to simulate request context and help users understand
the scenarios. We decided to use action-triggered permission
requests to represent the runtime context, because most apps
will request the three permissions interactively via clicks [51].
The respondents need to decide to allow or deny the re-
quests for two times: (1) the ﬁrst time is as implemented in
the current smartphone systems without any additional mes-
sages and (2) the second time is with additional messages
regarding one of our six decision factors under study. We aim
to investigate whether the respondents can make different per-
mission decisions with and without these additional messages.
We provided each respondent with either positive or negative
messages regarding only one factor to avoid the inﬂuences of
different factors on their perception.
The messages for each factor are shown in Table 2. We
chose the messages for each factor based on the interview
study results and reﬁned based on our pilot study. We framed
the messages both from positive and negative side based on
the characteristics of each decision factor. For the factors pre-
sented with speciﬁc values (i.e., rating, review and grant rate),
we chose the values at extreme in order to clearly present the
positive or negative side of the factors. For brand reputation,
to have a uniﬁed standard to present the app’s reputation in
protecting users’ privacy (c.f. §6.1), we used whether the app
has been certiﬁed by two recognized standards (GDPR [3]
and ISO/IEC 27001 [5]). To help users understand these two
standards, we provided brief information about these certiﬁ-
cations and standards in the question text.
After answering the three simulated scenario questions,
respondents can better understand the studied factors. We then
asked the respondents to rate the helpfulness of the decision
factor in a ﬁve-point Likert scale. The full questionnaire with
all scenarios, factors and their related messages are in [10].
Permission comprehension. In order to study the correlation
USENIX Association
30th USENIX Security Symposium    755
Table 2: Factors and their messages displayed in the permission
dialogs. App is the simulated app name and Resource is the permis-
sion group name that an app requests. The text in the brackets will
be displayed for positive messages.
Factors
Messages
Background access Resource will [not] be accessed when you’re
Data
transmission
Rating
Review1
Grant rate
Brand reputation2
not using the app.
Resource will [not] be transmitted and [or] stored
by App.
The rating of App is 2.1 [4.8] rating in app store.
App has 13 [no] reviews related to Resource
in app store.
10% [90%] of App users granted Resource access.
App has [not] been GDPR certiﬁed and [or]
ISO/IEC 27001 certiﬁed.
Figure 4: The UI transition ﬁgure3 for simulated scenario
RShare in survey 2. The respondent was ﬁrst shown ﬁgures
without the message in the prompt dialog. The positive and
negative messages for all factors are in Table 2.
between users’ comprehension and their permission decisions,
we included the permission group comprehension questions
as described in survey 1, for permission groups used in the
scenarios (i.e., Contact, Calendar, and Location).
Background Section. Both surveys contain a background
section, including the OS version information and demo-
graphic questions. (1) OS Version. We required our respon-
dents to provide their OS versions, because the correct an-
swers to the questions in Permission Group Comprehension
1For the negative framing for review factor, we display example negative
reviews in the question descriptions. One example is “Why App needs my
Resource? Intrusive and unnecessary permission invasion of privacy!”.
2Since users may not be familiar with GDPR and ISO/IEC 27001, we
include the short descriptions in the question text. GDPR certiﬁcation means
the company is transparent and honest in collecting and protecting users’
personal data. Appropriate technical and organizational measures have been
taken to achieve data protection; ISO/IEC 27001 certiﬁcation means that
the company has deﬁned and put in place best-practice information security
processes to prevent security risks such as hacks, data leaks or theft.
3Some icons are from Freepik.
(a) Gender
(b) Age
(c) Education level
Figure 5: Key demographics for interview study (n=20), Survey 1
(n=359) and Survey 2 (n=1200).
may vary for different OS versions. Besides, respondents
whose Android phone’ OS versions are below Android 6.0
will exit the survey immediately. (2) Demographics. We col-
lect demographic data of respondents including their gender,
age, education level, experience in computer science or related
ﬁelds, privacy knowledge level and occupation.
3.3.2 Recruitment
We conducted our surveys on Amazon Mechanical Turk
(AMT) from April 2019 to May 2020. We required that AMT
workers must be at least 18 years old, have a 98%+ approval
rate in their task history. To avoid bias in recruitment, we
avoided using terms related to security and privacy in the
AMT task description. We required respondents to have a
smartphone when answering questions.
We received 359 valid responses for survey 1 (180 for
Android and 179 for iOS) and 1200 valid responses for survey
2 (600 for Android and iOS each). The average time spent
on survey 1 and survey 2 are 6.78 and 7.81 minutes. Each
respondent was compensated $1 for completing the survey.4
3.4 Demographics
The key demographics for interview study (n=20), survey 1
(n=359) and survey 2 (n=1200) are shown in Figure 5. In the
interview, survey 1 and survey 2, 16 (80%), 279 (77.7%) and
843 (58.0%) of respondents reported no experience (education
or job) in computer science, IT, or related ﬁeld respectively.
3.5 Ethical Considerations
Our PerChecker study was conducted under a collaboration
between a company and a university. The PerChecker app
was developed and released by researchers from the company.
We took various measures to ensure that users’ privacy is re-
spected. First, the researchers were trained with ethics for user
research before the study. Second, before collecting any data,
4We increased the compensation rate for survey 1 from $0.5 to $1 after
we found that the time spent on survey 1 was longer than that from expected.
The compensation change was approved by IRB.
756    30th USENIX Security Symposium
USENIX Association
PerChecker explicitly requests for users’ approval for data
collection and usages. Only after users approve the request,
PerChecker starts collecting data. Third, during the usage
of PerChecker, users can choose to delete all data collected
before and disallow future data collection. Fourth, all data
transmissions to our server are encrypted via AES256. Fifth,
no personal identiﬁable information (PII) is saved in the study.
To differentiate data from different devices, we save the hash
value of MAC and IP addresses but do not save the original
addresses. The researchers at the university conducted the
analysis based on the collected data. The university’s Institu-
tional Review Board (IRB) was contacted and concluded that
the study did not require IRB review.
The interview and Internet survey study was conducted in a
university. Before the study, we contacted the university’s IRB
and received an exempt for IRB review. Both studies record
no personal identiﬁable information and thus are anonymized.
3.6 Threats to Validity
Like other user studies, our study also has a risk that the
ﬁndings may be biased to the studied users and not repre-
sentative enough of the entire population. In this paper, we
use multiple data sources to cross-validate our ﬁndings. Our
data sources include (1) real users’ permission settings from
PerChecker (n=4636), (2) user study with both interviewees
(n=20) and online AMT workers (n=1559), each covering a
large number of real mobile users. We discuss the potential
limitations of each data sources below:
PerChecker. The demographics for PerChecker users were
not obtained. PerChecker is listed in the "Security Apps" cate-
gory in Google Play. Users ﬁnd our app either by searching or
recommendations. These users can be more security-sensitive
since they use security tools, or less tech-savvy because they
turn to tools for help to deal with permissions. Therefore,
we urge the readers to take the potentially unbalanced demo-
graphics in mind when interpreting the PerChecker’s statistics.
User study. A general limitation of user study is that re-
sults are self-reported and the behavior and perceptions from
participants may differ from real-life conditions [46]. The
participants may answer questions based on what they desire
to do, not what they actually did [45], even though the previ-
ous study also shows that the ﬁndings are still correlated with
real-life experiences strongly [55]. We took several measures
to mitigate the limitations: in the open-ended questions, we
reminded participants that there were no standard answers
and they were encouraged to discuss based on their past ex-
periences. We also mimicked the real screen interface and
described triggering actions to provide runtime context in
simulated scenarios in survey 1 and 2 [10].
4 Permission Model Change
Android starts to support requesting permission at runtime
since Android 6.0. For compatibility, the new version systems
still support early-developed apps adopting the install-time
permission model (i.e., targeting versions before Android
6.0, low-version apps for short). All permissions requested
by such low-version apps will be granted immediately af-
ter installation without asking for users’ consent at runtime,
even on new version systems. We investigate the signiﬁcance
of the problem by analyzing (1) the prevalence of installed
low-version apps among real Android users and (2) users’
comprehension of the system’s notice for low-version apps on
new Android versions with runtime permission capabilities.
Finding 1: Three years after the introduction of the run-
time permission model, low-version apps are still prevalent.
Among the 4,636 real Android users in our study, a large
percentage (61.8%) have at least one such app installed.
More than half (61.8%) of PerChecker users have at least
one low-version app installed (95%CI [60.4%,63.2%]). One-
in-ﬁfteen (6.7%) of PerChecker users have ﬁve or more low-
version apps installed (95%CI [6.1%,7.3%]). Some examples
of these low-version apps are shown in Table 4. We further
analyzed the top 40 most-used low-version apps, and made
the following observations.
The majority of these most-used low-version apps avail-
able on market are still actively updated without adding sup-
port for the runtime permission model. 70% of our analyzed
low-version apps are still actively updated within 3 months
when we conducted the study (September 2018). Only a small
percentage (5%) are actually “legacy” apps that did not pro-
vide updates for more than two years. The breakdown in
Table 3 shows that the app developers, even when the sys-
tems provide an option to better protect users’ security and
privacy, may not choose to update. The developers may either
(1) lack the motivation or incentive to update the app with a
secure higher API version, or (2) intentionally take advantage
of the design ﬂaws to collect users’ sensitive data without
users’ attention. The second reason may become more pos-
sible when the app still keeps updating after the permission
model change.
Table 3: Last update time on Google Play of top 40 common low-
version apps in PerChecker users as of September 2018.
Last update
# (%)
3 months
28 (70%)
6 months
34 (85%)
12 months
37 (92.5%)
24 months
38 (95%)
Table 4: Top 5 commonly-used low-version apps among PerChecker
app users. The app’s metadata information is retrieved from Google
Play on Sep. 20, 2018.
App Name
TextNow
ES File Explorer
Settings DB Editor
WiFiman
Advanced Tools
Category
# install Update date
Communication
Productivity
Tools
Tools
Tools
10M+
100M+
100K+
100K+
100K+
19/09/18
17/09/18
01/09/18
30/08/18
27/07/18
Low-version apps have large user bases. Table 5 lists the
number of downloads of each low-version app on Google
Play. Note that we only analyzed the downloads from the
USENIX Association
30th USENIX Security Symposium    757
Table 5: Download times on Google Play of top 40 commonly-used
low-version apps among PerChecker users.
Downloads
# (%)
100M+
5 (12.5%)
10M+
1M+
100K+
18 (45%)
25 (62.5%)
39 (97.5%)