MiMC is a comparatively simple block cipher design, where
the plaintexts, the ciphertexts and the secret key are ele-
ments of Fp and can be seen as a simpliﬁcation of the KN-
cipher[40]. Its design is aimed at achieving an eﬃcient im-
plementation over a ﬁeld Fp by minimizing computationally
expensive ﬁeld operations (e.g. multiplications or exponen-
tiations).
Let p a prime that satisﬁes the condition gcd(3, p−1) = 1.
For a message x ∈ Fp and a secret key k ∈ Fp, the encryption
process of MiMC is constructed by iterating a round function
r times. At round i (where 0 ≤ i < r), the round function
Fi : Fp → Fp is deﬁned as:
Fi(x) = (x + k + ci)3,
where ci are random constants in Fp (for simplicity c0 = cr =
0). The output of the ﬁnal round is added with the key k
to produce the ciphertext. Hence, the output of FMiMC(x, k)
is then given by
FMiMC(x, k) = (Fr−1 ◦ Fr−2 ◦ ... ◦ F0)(x) + k.
The condition on p ensures that the cubing function creates
a permutation.
The number of rounds for constructing the keyed permu-
tation is given by r = (cid:100)log3 p(cid:101) - for prime ﬁelds of size 128
bits the number of rounds is equal to r = 82. This number
of round r provides security against a variety of cryptana-
lytic techniques. In particular, due to the algebraic design
principle of MiMC, the most powerful key recovery meth-
ods are the algebraic cryptanalytic attacks, as the Interpo-
lation Attack and the GCD Attack. In the ﬁrst one intro-
duced by Jakobsen and Knudsen in [30], the attacker con-
structs a polynomial corresponding to the encryption func-
tion without any knowledge of the secret key.
In partic-
ular, the attacker guesses the key of the ﬁnal round, con-
structs the polynomial at round r− 1 and checks it with one
extra plaintext/ciphertext pair.
In the second one, given
two plaintext/ciphertext pairs (pj, cj) for j = 1, 2, the at-
tacker constructs the polynomials FMiMC(p1, K) − c1 and
FMiMC(p2, K) − c2 in the ﬁxed but unknown key K. Since
these two polynomials share (K − k) as a factor (where k
is the secret key), the attacker can ﬁnd the value of k by
computing the GCD of them.
If the attacker has access to a limited number of plain-
text/ciphertext pairs only (at most n < p), then the number
of round r can be reduced. In this case, the number of rounds
is given by r = max{(cid:100)log3 n(cid:101),(cid:100)log3 p − 2 log3(log3 p)(cid:101)} - for
prime ﬁeld of size 128 bits, the number of rounds is equal to
r = 73 if n ≤ 2115, while r = (cid:100)log3 n(cid:101) otherwise.
5.2 Computing FMiMC in MPC
We consider two diﬀerent approaches for computing FMiMC
in MPC, with a secret shared key and message. The ba-
sic approach is simplest, whilst the second variant has half
the number of rounds of communication, with slightly more
computation.
MiMCbasic: The naive way to evaluate FMiMC requires one
squaring and one multiplication for each of the r rounds.
Using SPDZ, the squaring costs one opening in one round of
communication, and the multiplication costs two openings
in one round, giving a total of 3r openings in 2r rounds of
communication.
MiMCcube: If for each round we ﬁrst compute a tuple ([r],
[r2], [r3]), where r R← Fp, then given a secret-shared value
[x], we can open y = x− r and obtain a sharing of x3 by the
computation
[x3] = 3y[r2] + 3y2[r] + y3 + [r3]
which is linear in the secret-shared values so does not require
interaction.
For a single MiMC encryption, we ﬁrst compute all of the
cube triples for each round, which takes just one round of
communication by taking a preprocessed random square pair
([r], [r2]) and performing one multiplication to obtain [r3].
Each round of the cipher then requires just one opening and
a small amount of interaction. The total communication
complexity is still 3r openings, but in only r rounds.
5.3 Performance
Using r = 73, we measured a latency of 12ms per evalua-
tion for the simple protocol MiMCbasic, which halves to 6ms
for the lower round variant, MiMCcube. MiMCbasic gives a very
high throughput of over 8500 blocks per second (around 20%
higher than MiMCcube), and the oﬄine cost is fairly low, at
34 blocks per second. In fact, apart from in latency, MiMC
outperforms all the other PRFs we studied.
6. PERFORMANCE EVALUATION
In this section, we evaluate the performance of the PRFs
using the SPDZ multi-party computation protocol [26, 25],
which provides active security against any number of cor-
rupted parties. We focus here on the two-party setting, al-
though the protocol easily scales to any number of parties
with roughly a linear cost.
The two main metrics we use to evaluate performance are
latency and throughput, both of which relate to the online
phase of the SPDZ protocol. Latency measures the waiting
time for a single PRF evaluation; the best possible latency
is recorded by simply timing a large number of sequential
executions of the PRF, and taking the average for one op-
eration. In contrast, throughput is maximized by running
many operations in parallel to reduce the number of rounds
of communication. Of course, this comes at the expense of
a higher latency, so a tradeoﬀ must always be made depend-
ing on the precise application. In addition to latency and
throughput, we present the cost of running the preprocess-
ing phase and computing the PRF on cleartext data, for
comparison.
Implementation Details: We implemented the protocols
using the architecture of Keller et al. [32], which runs the
online phase of SPDZ. This system automatically uses the
minimum number of rounds of communication for a given
program description, by merging together all independent
openings. We extended the software to use the Miracl library
for elliptic curve operations over the NIST P-256 curve, as
required for the Naor-Reingold protocol. Note that although
the SPDZ implementation supports multi-threading, all of
our online phase experiments are single-threaded to simplify
the comparison.
Data type
Triple/Sq.
Bit
Triple/Sq.
Bit
LAN
WAN
Fp (ms)
128-bit
256-bit
F
2128 (ms)
0.204
0.204
4.150
4.150
0.816
0.816
16.560
16.560
0.204
0.00014
4.150
0.00285
Table 2: Time estimates for generating preprocess-
ing data in various ﬁelds using oblivious transfer.
To estimate the cost of producing the preprocessing data
(multiplication triples, random bits etc.), we used ﬁgures
from the recent MASCOT protocol [31], which uses OT ex-
tensions to obtain what are currently the best reported triple
generation times with active security. Although in [31], ﬁg-
ures are only given for triple generation in a 128-bit ﬁeld,
we can also use these times for random square and random
bit generation, since each of these can be easily obtained
from one secret multiplication [21]. For the Naor-Reingold
PRF, we multiplied these times by a factor of 4 to obtain
estimates for a 256-bit ﬁeld (instead of 128), reﬂecting the
quadratic communication cost of the protocol. 4 The costs
for all of these preprocessing data types are summarized in
Table 2.
Note that LowMC only requires multiplication triples in
F2, for which the protocol of [29] could be much faster than
4The experiments in [31] showed that communication is the
main bottleneck of the protocol, so this should give an ac-
curate estimate.
using F
an implementation of this protocol, so use the F
for now.
2128 triples. However, we are not currently aware of
2128 times
Benchmarking Environment: In any application of MPC,
one of the most important factors aﬀecting performance is
the capability of the network. We ran benchmarks in a stan-
dard 1Gbps LAN setting, and also a simulated WAN setting,
which restricts bandwidth to 50Mbps and latency to 100ms,
using the Linux tc tool. This models a real-world envi-
ronment where the parties may be in diﬀerent countries or
continents. In both cases, the test machines used have Intel
i7-3770 CPUs running at 3.1GHz, with 32GB of RAM.
Results: The results of our experiments in the LAN and
WAN environments are shown in Tables 3 and 4, respec-
tively. All ﬁgures are the result of taking an average of 5
experiments, each of which ran at least 1000 PRF opera-
tions. We present timings for AES and LowMC purely as a
comparison metric; as explained in the introduction, these
are not suitable for many MPC applications as they do not
operate over a large characteristic ﬁnite ﬁeld.
LowMC obtains slightly better throughput and latency
than AES over a LAN, with both the vector and M4R meth-
ods achieving similar performance here. In the WAN setting,
LowMC gets a very high throughput of over 300 blocks per
second. This is due to the low online communication cost for
multiplications in F2 instead of F2n or Fp, and the fact that
local computation is less signiﬁcant in a WAN. The M4R
method gets half the latency of the vector method in this
scenario, since the number of rounds is halved. As discussed
earlier, the preprocessing for LowMC would likely be much
better than AES if implemented with the protocol of [29].
In both scenarios, the Legendre PRF gives the lowest la-
tency, even when outputing 128-bit ﬁeld elements rather
than bits, due to its low round complexity. The single-bit
output variant achieves by far the highest throughput of all
the PRFs, so would be ideally suited to an application based
on a short-output PRF, such as secure computation of the
(leaky) order-revealing encryption scheme in [18]. The Leg-
endre PRF with large outputs is useful in scenarios where
low latency is very important, although the preprocessing
costs are expensive compared to MiMC below. However,
the high cost of the Legendre PRF “in the clear” may not
make it suitable for applications in which one entity is en-
crypting data to/from the MPC engine
The Naor-Reingold PRF also achieves a low latency —
though not as good as the Legendre PRF — but it suﬀers
greatly when it comes to throughput. Notice that in the
LAN setting, the constant rounds protocol actually performs
worse than the logarithmic rounds variant in all measures,
showing that here the amount of computatation and com-
munication is more of a limiting factor than the number of
rounds. Proﬁling suggested that over 70% of the time was
spent performing EC scalar multiplications, so it seems that
computation rather than communication is the bottleneck
in these timings. The requirement for a 256-bit ﬁeld (for
128-bit security) will be a limiting factor in many applica-
tions, as will the need to bit decompose the input, if it was
previously a single ﬁeld element.
The MiMC cipher seems to provide a good compromise
amongst all the prime ﬁeld candidates, especially as it also
performs well when performed “in the clear”. The “cube”
PRF
AES
FLowMC(vector)
FLowMC(M4R)
FNR(128)(log)
FNR(128)(const)
FLeg(bit)
FLeg(1)
FMiMC(basic)
FMiMC(cube)
PRF
AES
FLowMC(vector)
FLowMC(M4R)
FNR(128)(log)
FNR(128)(const)
FLeg(bit)
FLeg(1)
FMiMC(basic)
FMiMC(cube)
Best latency
Best throughput
Prep. (ops/s)
Cleartext (ops/s)
(ms/op)
Batch size
7.713
4.302
4.148
4.375
4.549
0.349
1.218
12.007
5.889
2048
256
64
1024
256
2048
128
2048
1024
ops/s
530
591
475
370
281
202969
1535
8788
6388
5.097
2.562
2.565
4.787
2.384
1225
9.574
33.575
33.575
Table 3: Performance of the PRFs in a LAN setting
Best latency
(ms/op)
Best throughput