### Customer Inquiries on Software Assurance

Customers often inquire about software assurance, assuming that vendors, such as R, have the necessary expertise to ensure their products are secure.

### Questions and Future Work

This survey raises as many questions as it answers. How will vendors respond to the knowledge of "industry norms"? Will those performing below average be motivated to invest more and catch up? Will those at the midpoint continue their investments? Will those investing more than the average reduce their efforts, given the limited customer demand for superior assurance? Vendors might use "industry norms" as a defense against customer requests for better assurance. Paradoxically, this study, which was initiated to justify increased investment in software assurance, might reduce the motivation to exceed the average. In short, will this survey encourage vendors to raise the bar or simply maintain the status quo?

As noted in Section II.E, the study focused on shrink-wrapped software vendors. Future extensions could include surveys of:

- **Embedded Systems**: Such as medical instruments and automobile systems. As these systems become more software-based, they face increasing risks. For example, [7] demonstrated a potential vulnerability in heart pacemakers. An examination of the assurance methodologies used by medical instrument vendors would be helpful.
- **Financial Institutions**: These institutions, which are frequently under attack, must comply with regulations such as PCI [13] and OCC [11].
- **Online Merchants**: Companies like Amazon, which are subject to PCI [13] requirements and regularly targeted by attacks.
- **Software as a Service (SaaS) Vendors**: These vendors may need to meet requirements such as PCI [13] or HIPAA, depending on the type of information they manage.
- **Systems Integrators**: These entities face the challenge of integrating products from different vendors into cohesive systems.

### Analysis and Conclusion

Tables 1 and 2 summarize our key findings. In Table 2, "primary" and "secondary" indicate the driving forces, while "yes" means it was a consideration but not a primary driver.

**Table 1: Motivations for Investment**

| Vendor | M | W | F | H | B | S | K | R |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| Customer Expectations | Primary | Primary | Primary | Yes | Secondary | Yes | Primary | Primary |
| Fear of Publicity | Yes | Minor | Yes | Primary | Minor | Primary | Second | Minor |
| Explicit Requests | Minor | Govt Only | Occasional | Govt Only | Primary | Minor | Minor | Govt Only |

**Key Conclusions:**

- **Awareness and Motivation**: Software vendors are aware of the risks associated with insecure software and are generally motivated by the fear of negative publicity to minimize security vulnerabilities.
- **Customer Expectations**: Few non-government customers explicitly request software assurance, but vendors believe it is an unspoken expectation.
- **Centralized Security**: Most organizations have centralized security teams with expertise, providing outreach to product development teams. The head of software assurance typically reports directly to the head of product development and has significant influence to prevent the release of products with serious security flaws.
- **Assurance Techniques**: The methods used for software assurance vary among vendors, but most agree that developer training is one of the most valuable uses of limited resources. Penetration testing, despite its limitations, is still useful for assessing product security. Source code analysis is still in the early adoption phase due to high costs and complexity, while dynamic testing, including fuzzing, is considered more cost-effective.
- **Common Criteria**: Nearly all vendors mentioned Common Criteria, but most felt it was a paperwork exercise with little impact on product security.
- **Timeline**: Most organizations began focusing on software assurance several years ago, influenced by initiatives like the "Trustworthy Computing" memo [6], and it took several years to see results.

### Related Work

The idea of surveying companies to understand practices was also used in the development of the Build Security In Maturity Model (BSIMM) [2]. BSIMM synthesized processes from nine companies to determine "typical practices." This study and BSIMM used similar methodologies, but this study was limited to the software development industry, while BSIMM included financial and other sectors. BSIMM provides a broader overview across multiple sectors, whereas this paper offers a deeper analysis of the ISV market.

The Open Security Maturity Model (OpenSAMM) [12] was developed by assessing real organizations and building a hierarchy of recommendations based on the author's experiences as a security consultant. This study was conducted before the BSIMM and OpenSAMM efforts, and an earlier version was published as [5].

The SAFECode group, composed of major software companies, defines recommendations based on their survey of member companies' software development practices [14, 15]. Their recommendations in [14] are similar in scope to this study, while [15] focuses on detailed coding recommendations for C and C++.

### Acknowledgment

The author thanks his contacts in each of the vendors. Due to the non-attribution basis of the information provided, he regrets being unable to thank them by name. He also thanks the anonymous reviewers for their valuable suggestions. This work was performed when the author was employed by Software AG (www.softwareag.com).

### References

[1] 19 Deadly Sins of Software Security, Michael Howard, David LeBlanc, and John Viega, McGraw-Hill, 2005.
[2] Building Security In Maturity Model, http://www.bsi-mm.com/
[3] Common Criteria for Information Technology Security Evaluation, ISO/IEC 15408.
[4] J. Epstein, S. Matsumoto, and G. McGraw, “Software Security and SOA, Danger Will Robinson!”, IEEE Security & Privacy magazine, February 2006.
[5] J. Epstein, “What Measures do Vendors Use for Software Assurance?”, in Making the Business Case for Software Assurance Workshop, Carnegie Mellon University Software Engineering Institute, September 2008.
[6] Trustworthy Computing (memo), Bill Gates, Microsoft, January 15, 2002, http://www.microsoft.com/mscorp/execmail/2002/07-18twc.mspx
[7] D. Halperin et al, “Pacemakers and Implantable Cardiac Defibrillators: Software Radio Attacks and Zero-Power Defenses”, in Proceedings of the IEEE Symposium on Security and Privacy, Oakland CA, May 2008.
[8] The Security Development Lifecycle, Michael Howard and Steve Lipner, Microsoft Press, 2006.
[9] G. Jelen and J. Williams, “A Practical Approach to Measuring Assurance”, in Proceedings of the 14th Annual Computer Security Applications Conference, Phoenix AZ, December 1998.
[10] Software Security: Building Security In, Gary McGraw, Addison-Wesley, 2006.
[11] Application Security, OCC Bulletin 2008-16, May 2008, http://www.occ.treas.gov/ftp/bulletin/2008-16.html
[12] Software Assurance Maturity Model, www.opensamm.org
[13] Payment Card Industry Data Security Standards, version 1.1, September 2006, https://www.pcisecuritystandards.org/security_standards/pci_dss.shtm
[14] Software Assurance: An Overview of Current Industry Best Practices, February 2008, www.safecode.org
[15] Fundamental Practices for Secure Software Development: A Guide to the Most Effective Secure Development Practices in Use Today, October 2008, www.safecode.org
[16] The Complete Searchable 2007 Software 500 Database, Software Magazine, http://www.softwaremag.com/S_FocusAreas.cfm?Doc=The500
[17] Building Secure Software: How to Avoid Security Problems the Right Way, John Viega and Gary McGraw, Addison-Wesley, 2001.