# 零、前言
Docker 容器彻底改变了大小企业的软件供应链。一项新技术从未如此迅速地渗透到世界 500 强企业中。采用容器和容器化其传统任务关键型应用的公司报告称，在部署这些应用的新版本时，总维护成本至少节省了 50%，减少了 90%(或更多)。此外，通过使用容器而不是在容器外运行应用，他们受益于安全性的提高。
这本书从零开始，向你介绍 Docker 的基础知识，并建立一个与之合作的环境。然后，我们深入研究诸如 Docker 容器、Docker 映像和 Docker 合成等概念。我们还将介绍部署、流程编排、网络和安全性的概念。此外，我们解释了公共云上的 Docker 功能，例如 AWS。
本书结束时，您将拥有使用 Docker 容器和编排器(如 SwarmKit 和 Kubernetes)的实际操作经验。
# 这本书是给谁的
本书面向系统管理员、运营工程师、DevOps 工程师以及对从头开始使用 Docker 感兴趣的开发人员或利益相关者。不需要有 Docker 容器的经验。
# 这本书涵盖了什么
[第一章](01.html)、*什么是容器，为什么要用？*，关注软件供应链及其内部的摩擦。然后，它将容器作为一种手段来减少这种摩擦，并在此基础上增加企业级安全性。在本章中，我们还将研究容器及其周围的生态系统是如何组装的。我们特别指出了上游开放源码软件组件(莫比)之间的区别，这些组件构成了 Docker 和其他供应商下游产品的组成部分。
[第 2 章](02.html)、*设置工作环境*，详细讨论了如何为开发人员、DevOps 工程师和操作员设置一个理想的环境，以便在使用 Docker 容器时使用。
[第 3 章](03.html)、*使用容器*讲述了如何启动、停止和移除容器。本章还介绍了如何检查容器以检索附加元数据。此外，它还介绍了如何运行额外的进程，以及如何在已经运行的容器中附加到主进程。它还展示了如何从一个容器中检索日志信息，该容器是由运行在其中的进程产生的。
[第 4 章](04.html)、*创建和管理容器映像*，介绍了创建容器映像的不同方法，容器映像用作容器的模板。它介绍了映像的内部结构及其构建方式。
[第 5 章](05.html)、*数据卷和系统管理*介绍了在容器中运行的有状态组件可以使用的数据卷。本章还介绍了用于收集 Docker 和底层操作系统信息的系统级命令，以及用于清除系统孤立资源的命令。最后，介绍了 Docker 引擎生成的系统事件。
[第 6 章](06.html)、*分布式应用架构*，介绍了分布式应用架构的概念，并讨论了成功运行分布式应用所需的各种模式和最佳实践。最后，它讨论了在生产中运行这样的应用需要满足的附加要求。
[第 7 章](07.html)、*单主机组网*，以桥接网络的形式介绍了 Docker 容器组网模型及其单主机实现。本章介绍了软件定义网络(SDNs)的概念，以及如何使用它们来保护容器化应用的安全。最后，它介绍了容器港口如何向公众开放，从而如何使容器化的组件能够从外部世界进入。
[第 8 章](08.html)*Docker Compose*介绍了由多个服务组成的应用的概念，每个服务都在一个容器中运行，以及 Docker Compose 如何允许我们使用声明性方法轻松构建、运行和扩展这样的应用。
[第九章](09.html)、*编排器*，介绍了编排器的概念。它告诉我们为什么需要编排器，以及他们是如何工作的。本章还概述了最受欢迎的编排器，并探讨了它们的一些优缺点。
[第 10 章](10.html)*Docker Swarm 简介*，介绍 Docker 的原生管弦乐手，名为 SwarmKit。它详细阐述了 SwarmKit 用来在本地集群或云中部署和运行分布式、弹性、健壮和高可用性应用的所有概念和对象。本章还介绍了 SwarmKit 如何使用 sdn 来隔离容器和机密以保护敏感信息，从而确保应用的安全。
[第 11 章](11.html)、*零宕机部署和机密*，讲述了如何将服务或应用部署到具有零宕机和自动回滚功能的 Docker 群中。它还引入了机密作为保护敏感信息的手段。
[第 12 章](12.html)、*Kubernetes 斯介绍*，介绍目前最受欢迎的容器管弦乐手。它引入了核心的 Kubernetes 对象，这些对象用于定义和运行集群中的分布式、弹性、健壮和高可用性的应用。最后，它引入了 Minikube 作为本地部署 Kubernetes 应用的方法，以及 Kubernetes 与 Mac 的 Docker 和 Windows 的 Docker 的集成。
[第 13 章](13.html)、*使用 Kubernetes* 部署、更新和保护应用，讲述如何将应用部署、更新和扩展到 Kubernetes 集群中。它还解释了如何实现零宕机部署，以实现任务关键型应用的无中断更新和回滚。本章还介绍了 Kubernetes 机密，作为配置服务和保护敏感数据的一种手段。
[第 14 章](14.html)*在云中运行容器化应用*，概述了在云中运行容器化应用的一些最流行的方式。我们仔细看看最受欢迎的云供应商 AWS 在这方面提供了什么。我们包括自托管和托管解决方案，并讨论它们的优缺点。还简要讨论了其他供应商的产品，如微软 Azure 和谷歌云引擎。
# 充分利用这本书
理想情况下，您可以使用装有 Windows 10 专业版或最新版本 Mac OS X 的笔记本电脑或个人电脑。安装了任何流行的 Linux 操作系统的计算机也可以工作。如果你在苹果电脑上，你应该安装 Docker for Mac，如果你在 Windows 上，那就安装 Docker for Windows。你可以从这里下载:[https://www.docker.com/community-edition](https://www.docker.com/community-edition)
如果您使用的是旧版本的 Windows 或 Windows 10 家庭版，则应该安装 Docker 工具箱。你可以在这里找到 Docker 工具箱:[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)
在苹果电脑上，使用终端应用，在 Windows 上，使用 PowerShell 控制台尝试您将要学习的命令。您还需要一个浏览器的最新版本，如谷歌浏览器、Safari 或 Internet Explorer。当然，你将需要互联网接入来下载我们将在本书中使用和探索的工具和容器映像。
# 下载示例代码文件
你可以从你在[www.packtpub.com](http://www.packtpub.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[www.packtpub.com/support](http://www.packtpub.com/support)并注册将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  登录或注册[www.packtpub.com](http://www.packtpub.com/support)。
2.  选择“支持”选项卡。
3.  点击代码下载和勘误表。
4.  在搜索框中输入图书的名称，并按照屏幕指示进行操作。
下载文件后，请确保使用最新版本的解压缩文件夹:
*   视窗系统的 WinRAR/7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip/PeaZip
这本书的代码包也托管在 https://github.com/fundamentalsofdocker/labs 的 GitHub 上。如果代码有更新，它将在现有的 GitHub 存储库中更新。
我们还有来自丰富的图书和视频目录的其他代码包，可在**[【https://github.com/PacktPublishing/】](https://github.com/PacktPublishing/)**获得。看看他们！
# 下载彩色映像
我们还提供了一个 PDF 文件，其中包含本书中使用的截图/图表的彩色映像。你可以从[https://www . packtpub . com/sites/default/files/downloads/learndocklementsofdocker 18x _ color images . pdf](https://www.packtpub.com/sites/default/files/downloads/LearnDockerFundamentalsofDocker18x_ColorImages.pdf)下载。
# 使用的约定
本书通篇使用了许多文本约定。
`CodeInText`:表示文本中的码字、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟网址、用户输入和推特句柄。这里有一个例子:“每一层的内容都映射到主机系统上一个特殊的文件夹，通常是`/var/lib/docker/`的一个子文件夹。”
代码块设置如下:
```
COPY . /app
COPY ./web /app/web
COPY sample.txt /data/my-sample.txt
ADD sample.tar /app/bin/
ADD http://example.com/sample.txt /data/
```
当我们希望将您的注意力吸引到代码块的特定部分时，相关的行或项目以粗体显示:
```
FROM python:2.7
RUN mkdir -p /app
WORKDIR /app
COPY ./requirements.txt /app/
RUN pip install -r requirements.txt
CMD ["python", "main.py"]
```
任何命令行输入或输出都编写如下:
```
$ mkdir ~/FundamentalsOfDocker
$ cd ~/FundamentalsOfDocker
```
**粗体**:表示一个新的术语、一个重要的单词或者你在屏幕上看到的单词。例如，菜单或对话框中的单词像这样出现在文本中。下面是一个示例:“从管理面板中选择系统信息。”
Warnings or important notes appear like this. Tips and tricks appear like this.
# 取得联系
我们随时欢迎读者的反馈。
**综合反馈**:发邮件`PI:EMAIL`并在邮件主题中提及书名。如果您对本书的任何方面有疑问，请发电子邮件至`PI:EMAIL`。
**勘误表**:虽然我们已经尽了最大的努力来保证内容的准确性，但是错误还是会发生。如果你在这本书里发现了一个错误，如果你能向我们报告，我们将不胜感激。请访问[www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的图书，点击勘误表提交链接，并输入详细信息。
**盗版**:如果您在互联网上遇到任何形式的我们作品的非法拷贝，如果您能提供我们的位置地址或网站名称，我们将不胜感激。请通过`PI:EMAIL`联系我们，并提供材料链接。
**如果你有兴趣成为一名作者**:如果有一个你有专长的话题，你有兴趣写或者投稿一本书，请访问[authors.packtpub.com](http://authors.packtpub.com/)。
# 复习
请留下评论。一旦你阅读并使用了这本书，为什么不在你购买它的网站上留下评论呢？然后，潜在的读者可以看到并使用您不带偏见的意见来做出购买决定，我们在 Packt 可以了解您对我们产品的看法，我们的作者可以看到您对他们的书的反馈。谢谢大家！
更多关于 Packt 的信息，请访问[packtpub.com](https://www.packtpub.com/)。