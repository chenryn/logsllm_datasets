primitive than RBC as it does not require totality.
The framework is given in Figure 4. Let Π𝑏𝑎𝑠𝑒 be the underlying
base protocol parameterized by (𝛽′
𝑠). Similar to the RBC
protocol in Section 3.2, we use a quorum-based design with a quo-
rum size of 𝑛−𝛾′
𝑎 for consistent broadcast. Such a quorum
contains at least one honest replica in the presence of 𝛾′
𝑠 faults
or 𝛽′
𝑎 faults. Thus, when the sender is honest, no certificate can
be formed for any value other than the sender’s input. Therefore,
𝑠 > 𝛾′
𝑠 + 𝛽′
𝑎, 𝛾′
𝑎, 𝛽′
𝑠, 𝛾′
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1695validity and integrity hold. Consistency under synchrony is easily
achieved by a similar synchronous equivocation check mechanism.
As in Section 4, a quorum of ⟨commit, 𝐵𝑘⟩∗ messages serves as
proof for the log up to block 𝐵𝑘.
5.2 Correctness of the Framework
We prove the correctness of the our framework. Let Π𝑏𝑎𝑠𝑒 be the
given base protocol with threshold parameters of (𝛽′
𝑠, 𝛾′
𝑎, 𝛾′
𝑠).
We prove that the converted protocol achieves the optimal 𝛽𝑠 =
𝑛 − 𝛾′
𝑎, and 𝛾𝑠 = 𝛾′
𝑎, 𝛾𝑎 = 𝛾′
𝑠.
Note that the base protocol assumes either an asynchronous or a
partially synchronous network. We will use the asynchronous case
for convenience. The proof below directly applies to the partially
synchronous case.
𝑠 − 1 while tolerating the same 𝛽𝑎 = 𝛽′
𝑎, 𝛽′
Lemma 5.1 (Safety). If the network is asynchronous and there are
at most 𝛽′
𝑎 faults, then safety holds.
Proof. In order for the converted protocol to commit two con-
flicting blocks, they first need to be committed by the base protocol
Π𝑏𝑎𝑠𝑒, which will not happen under the said condition.
□
Lemma 5.2 (Safety). If the network is synchronous and there are
at most 𝑛 − 𝛾′
𝑠 − 1 faults, then safety holds.
𝑘
Proof. Suppose for the sake of contradiction that these two
distinct blocks 𝐵𝑘 and 𝐵′
are committed at the same height by the
converted protocol. There must be a quorum of 𝑛−𝛾′
𝑠 ⟨commit, 𝐵𝑘⟩∗
messages and one of them must be from an honest replica. For
the same reason, there must be a ⟨commit, 𝐵′
𝑘⟩∗ message from an
honest replica. Let 𝑡 be the time when the first honest replica 𝑟 sent
⟨commit, 𝐵𝑘⟩𝑟 , and 𝑡′ be the time when the first honest replica 𝑟′
sent ⟨commit, 𝐵′
𝑘⟩𝑟′. Without loss of generality, we assume 𝑡 ≤ 𝑡′.
Then, 𝑟 must have received and broadcast a certificate C(𝐵𝑘) at
𝑡−Δ. It will be received by 𝑟′ by time 𝑡 ≤ 𝑡′. It would have prevented
𝑟′ from sending ⟨commit, 𝐵′
□
Lemma 5.3 (Liveness). If the network is asynchronous and there
𝑘⟩𝑟′ at 𝑡′, a contradiction.
are at most 𝛾′
𝑎, then liveness holds.
Proof. Due to the liveness of Π𝑏𝑎𝑠𝑒 in the presence of 𝛾′
𝑎 faults,
all honest replicas keep committing new blocks in Π𝑏𝑎𝑠𝑒. Let 𝐵𝑘 be
a new block committed in Π𝑏𝑎𝑠𝑒. Then, all honest replicas broadcast
⟨vote, 𝐵𝑘⟩, and a certificate C(𝐵𝑘) is created. Due to the safety of
Π𝑏𝑎𝑠𝑒 in the presence of 𝛾′
𝑎 faults, no honest replica votes for a
conflicting block 𝐵′
𝑘) cannot be formed.
Therefore, all honest replicas broadcast ⟨commit, 𝐵𝑘⟩ and receive a
quorum of ⟨commit, 𝐵𝑘⟩∗. Thus, all honest replicas commit 𝐵𝑘. □
The proof of liveness of the protocol under synchrony is similar.
, and thus a certificate C(𝐵′
𝑎 ≤ 𝛽′
𝑘
5.3 Discussions
Overheads added by the framework. In terms of latency, the
framework adds two extra rounds plus a Δ waiting time. In terms
of communication complexity, the framework introduces 3𝑛2 addi-
tional messages; some messages are linear-sized certificates, which
can again be reduced to a constant size using threshold signatures.
Responsiveness. As seen above, our framework (and the protocol
in Sections 3 and 4) is non-responsive, i.e., the latency depends on
a pre-defined estimated bound Δ. We next show that the lack of
responsiveness is inherent if we want higher synchronous safety.
It is well known that any BFT protocol that is safe with 𝑡 faults
cannot commit responsively, i.e., faster than the delay bound Δ, in
the presence of 𝑛−𝑡
faults, even if designated sender or the leader
2
is honest [42, 43]. This bound can be easily generalized to MT-BFT:
no MT-BFT protocol can commit responsively in the presence of
𝑛−𝛽𝑠2
Theorem 5.4. There does not exists a MT-BFT RBC protocol that
is safe under 𝛽𝑠 Byzantine faults under synchrony, and responsive in
the presence of 𝑛−𝛽𝑠2 Byzantine faults.
faults. We prove the bound using RBC as an example.
Proof. Suppose for the sake of contradiction that there exists
an MT-BFT RBC protocol that is responsive in the presence of 𝑛−𝛽𝑠2
Byzantine faults. We consider a network with three partitions 𝑃,
𝑄 and 𝑅, with sizes |𝑃| = |𝑅| = 𝑛−𝛽𝑠2
and |𝑄| = 𝛽𝑠. The designated
sender 𝑟𝑠 is in 𝑄. Consider the three executions below.
In the first execution (W1), all messages are instantly delivered
and all replicas in 𝑃 crash. The sender 𝑟𝑠 has an input value 𝑏1.
Since the protocol is responsive in the presence of 𝑛−𝛽𝑠2 Byzantine
faults, all replicas in 𝑅 commit 𝑏1 within Δ time.
The second execution (W2) is symmetric to the first one. All
messages are instantly delivered and all replicas in 𝑅 crash. The
sender 𝑟𝑠 has an input value 𝑏2 ≠ 𝑏1. Since the protocol is responsive
in the presence of 𝑛−𝛽𝑠2 Byzantine faults, all replicas in 𝑃 commit
𝑏2 within Δ time.
In the third execution (W3), all replicas in 𝑄 are Byzantine. 𝑄
behave towards 𝑅 and 𝑃 as in W1 and W2, respectively. All messages
between 𝑃 and 𝑅 are delivered with delay Δ, but all other messages
are instantly delivered. Then, replicas in 𝑅 receive no messages from
𝑃 by time Δ and cannot distinguish W1 and W3 by time Δ. Thus,
they commit 𝑏1 before Δ as in W1. Similarly, replicas in 𝑃 cannot
distinguish W2 and W3 before Δ, and they commit 𝑏2 ≠ 𝑏1 before
Δ as in W2. This violates the supposition that the protocol achieves
consistency in the presence of |𝑄| = 𝛽𝑠 Byzantine faults.
□
Existing partially synchronous protocols such as PBFT, when
viewed as MT-BFT, tolerate 𝛽𝑎 = 𝛽𝑠  𝛽𝑎, it is inevitable
that the protocol (while live) cannot be responsive in the presence
of 𝑛/3 faults. Nonetheless, our protocols can still be made optimisti-
cally responsive [43], i.e., responsive when the number of actual
faults is less than 𝑛−𝛽𝑠2
, using techniques in the literature [39, 46].
Higher safety after GST. However, our upgrading framework
actually provides a stronger guarantee than the MT-BFT psync-
sync model defined in Section 2.2. In our definition in Section 2.2,
if the network is partially synchronous, a protocol does not need to
provide higher safety tolerance even after GST. In other words, a MT-
BFT protocol only needs to provide higher safety of 𝛽𝑠 only if the
network is synchronous at all time. In comparison, the upgrading
framework in this section provides safety in the presence of 𝛽𝑠 faults
after GST in a partially synchronous network. Let us briefly prove
this. Let 𝑡1 be the first time after GST 𝑇𝑔 that an honest replicas
commits a block 𝐵𝑘 of height 𝑘. Then all honest replicas receive
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1696Let Π𝑏𝑎𝑠𝑒 be the given base protocol parameterized by (𝛽′
protocol Π𝑏𝑎𝑠𝑒. A quorum is |C| = 𝑛 − 𝛾′
𝑠.
𝑎, 𝛾′
𝑎, 𝛽′
𝑠, 𝛾′
𝑠). A replica 𝑟 runs the following steps in addition to running the base
(1) Vote. Upon committing a block 𝐵𝑘 at height 𝑘 in Π𝑏𝑎𝑠𝑒, broadcast ⟨vote, 𝐵𝑘⟩𝑟 .
(2) Pre-commit. Upon receiving a quorum of ⟨vote, 𝐵𝑘⟩𝑟 denoted C(𝐵𝑘), broadcast it and wait for Δ. Then, broadcast ⟨commit, 𝐵𝑘⟩𝑟 .
(3) Commit. Upon receiving a quorum of ⟨commit, 𝐵𝑘⟩∗ and Π𝑏𝑎𝑠𝑒 has committed 𝐵𝑘, then commit 𝐵𝑘.
Upon receiving C(𝐵𝑘) and C(𝐵′
𝑘) for conflicting blocks 𝐵𝑘 and 𝐵′
𝑘
, stop all operations above for height 𝑘 immediately.
Figure 4: A framework to convert a MT-BFT SMR protocol with 𝛾′
optimal synchronous safety 𝛽𝑠 = 𝑛 − 𝛾′
𝑠 − 1.
𝑠 synchronous liveness into a MT-BFT SMR protoocl with
C(𝐵𝑘) by 𝑡1. Therefore, no honest replicas commit any other block
𝐵′
of height 𝑘 after that.
𝑘
6 RELATED WORKS
Byzantine fault-tolerance is a forty-year-old research field in dis-
tributed computing and cryptography. Starting from the celebrated
work of Lemport et al. [34, 44], it has been studied mostly in a
single timing model with one fault threshold. The synchronous
model has been mainly the target of theoretical research, assuming
perfectly synchronized rounds across all parties [1, 20, 23, 30]. Only
recently, following the introduction of Bitcoin, a.k.a., Nakamoto
Consensus [40], which is perhaps the first practical synchronous
protocol, a couple of works have presented synchronous BFT proto-
cols under the non-lockstep model towards practical use [2, 4, 46].
Yet, it seems there remains strong reluctance in the community
to rely on synchrony due to concerns for more severe network
failures. Classic studies of practical BFT have mainly focused on
the partially synchronous protocols favoring their ease of design
and asynchronous safety. Numerous works studied improvements
over PBFT [25, 31, 47]. Other works assume the fully asynchronous
model [3, 21, 26, 36, 38]. However, these protocols tolerate only
𝑓 < 𝑛/3 faults even when the network is under synchrony. Our pri-
mary motivation is to resolve this long-standing dilemma between
the timing assumption and fault tolerance.
Weakly synchronous model. Some recent works have consid-
ered an intermediate model between the synchronous and asyn-
chronous models. Guo et al. [27] introduced the weakly synchronous
model, where a majority of the participants are honest and syn-
chronous, but the remaining minority may be Byzantine or suffer
from a network failure. They presented a Byzantine agreement
protocol in this setting and some other works applying it to BFT
SMR protocols [2, 4, 15]. However, these works still break down if
a majority of the participants experience asynchrony. In contrast,
our protocols are safe against one-third faults even under complete
asynchrony.
Multiple fault thresholds. There have been previous works that
consider different thresholds for different correctness properties in
a single timing model. UpRight [18] is a BFT SMR protocol allowing
different thresholds for safety and liveness in the partially synchro-