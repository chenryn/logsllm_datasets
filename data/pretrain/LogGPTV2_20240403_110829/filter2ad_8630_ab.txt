                //alert(ext_name + "|");
                //判断上传文件类型是否允许上传
                if (allow_ext.indexOf(ext_name + "|") == -1) {
                    var errMsg = "该文件不允许上传，请上传" + allow_ext + "类型的文件,当前文件类型为：" +     ext_name;
                    alert(errMsg);
                    return false;
                }
            }
    文件上传漏洞演示脚本--JS验证实例
        请选择要上传的文件：
客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件
##### 绕过姿势
1.通过firefox的F12修改js代码绕过验证 2.使用burp抓包直接提交，绕过js验证
### 服务器端校验
#### 文件头content-type字段校验（服务端MIME类型检测）
##### MIME类型介绍
**MIME type** 的缩写为 **(Multipurpose Internet Mail Extensions)**
代表互联网媒体类型(Internet media
type)，MIME使用一个简单的字符串组成，最初是为了标识邮件Email附件的类型，在html文件中可以使用content-type属性表示，描述了文件类型的互联网标准。
Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。
Response对象通过设置ContentType使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。
###### MIME类型格式：
类别/子类别;参数 Content-Type: [type]/[subtype]; parameter
###### MIME主类别：
text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；
Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；
Application：用于传输应用程序数据或者二进制数据；
Message：用于包装一个E-mail消息；
Image：用于传输静态图片数据；
Audio：用于传输音频或者音声数据；
Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。
###### 常见MIME类型：
##### 验证代码
以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传
##### 绕过方式
使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell
#### 服务端文件扩展名检测
##### 测试代码
默认上传后的文件保存的名字是已获取到的名字
##### 绕过技巧
###### 配合Apache的.htaccess文件上传解析漏洞
>
> .htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。
有些服务器在上传认证时没有拦截.htaccess文件上传，就会造成恶意用户利用上传.htaccess文件解析漏洞，来绕过验证进行上传WEBShell，从而达到控制网站服务器的目的。
首先我们编写一个.htaccess文件。打开记事本，编写代码“AddType application/x-httpd-php
.jpg”，然后点击文件选中另存为，编写文件名为.htaccess，选择保存类型为所有文件。然后将其进行上传。因为.htaccess是apache服务器中的一个配置文件,不在上传的文件的黑名单之内,所以.htaccess文件是可以上传成功。
接下来我们制造一个一句话木马文件，如取名为yijuhua.php。因为之前上传成功到服务器的.htaccess文件里的代码可以让
.jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们把yijuhua.php文件的后缀名改为.jpg格式,让.htaccess文件解析yijuhua.jpg文件里的php代码，从而使木马上传成功并达到可执行的目的。
###### Apache站上的解析缺陷绕过上传漏洞
Apache的解析漏洞主要特性为Apache是从后面开始检查后缀，按最后一个合法后缀执行，整个漏洞的关键就是Apache的合法后缀到底是哪些，不是合法后缀的都可以被利用，所以将木马的后缀进行修改为允许上传的类型后，即可成功绕过验证，最终拿到权限。
例如新建完要上传的一句话木马文件后命名为yijuhua.php，然后我们在文件后缀处添加上7z，就有可能绕过验证上传成功。也可以修改后缀名为cab、zip、bmp等，只要是允许的上传类型都可能被上传成功。最后通过菜刀类工具访问即可。
###### IIS6.0站上的目录路径检测解析绕过上传漏洞
当我们使用的服务器都是Windows2003，并且使用的服务为IIS6.0时，就可能存在如本节所描述的漏洞。
以asp为例，先准备好一句话木马文件，然后通过burpsuite进行抓包：
查看数据包：
其中`Content-Disposition:form-data;name=”path”`下面的一行为服务保存文件的相对路径，我们把原本的
uploadimg/改为`uploadimg/1.asp/;`，`filename="yijuhua.asp"`修改为`filename="yijuhua.asp/1.jpg"`。如图：
本例的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为`“yijuhua.asp/1.jpg”`，也同样会被IIS当作ASP文件来解析并执行。
首先我们请求`/yijuhua.asp/1.jpg`，服务器会从头部查找查找"."号,获得.asp/1.jpg。然后查找"/",如果有则内存截断，所以`/yijuhua.asp/1.jpg`会当做`/yijuhua.asp`进行解析。
上传成功后，通过response我们可以查看到得到的文件名信息为“1.asp;14127900008.asp”，那么就可以在前面添加上uploadimg/，从而构造访问地址为：`“http://www.test.com/uploadimg/1.asp;14127900008.asp”`，并通过菜刀类的工具进行访问了。
###### IIS6.0站上的解析缺陷绕过上传漏洞
此类方法与上面讲的目录解析有点类似，不同点在于是利用文件解析来达到绕过上传的目的。
以php为例，同样是准备好一句话木马文件后通过burpsuite进行抓包。
查看数据包：
其中`Content-Disposition:form-data;name=”path”`下面的一行为服务保存文件的相对路径，我们把原本的
`uploadimg/` 改为 `uploadimg/1.php;`
，`filename="yijuhua.php"`修改为`filename="yijuhua.jpg"`。
本例中的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为`“1.php;yijuhua.jpg”`，也同样会被IIS当作PHP文件来解析并执行
首先我们请求`/1.php;yijuhua.jpg`，然后服务器会从头部查找查找"."号,获得`.php;yijuhua.jpg`。接着查找到";"，有则内存截断，所以`/1.php;yijuhua.jpg`会当做/1.php进行解析。
最后类似上一节那样，通过response我们可以查看到得到的文件名信息为`“1.php;14127900008.php”`，在前面添加上uploadimg/，从而构造访问地址为：`“http://www.test.com/uploadimg/1.php;14127900008.php”`，并通过菜刀类的工具进行访问。
1.使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP
2.使用黑名单外的脚本类型，如：php5,asa 和 cer等(IIS默认支持解析.asp,.cdx, .asa,.cer等)
能被解析的文件扩展名列表：
       jsp jspx jspf
       asp asa cer aspx
3.配合操作系统文件命令规则
（1）上传不符合windows文件命名规则的文件名
         test.asp.
         test.asp(空格)
         test.php:1.jpg
         test.php:: $DATA
会被windows系统自动去掉不符合规则符号后面的内容。
（2）linux下后缀名大小写
在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。
(3)借助系统特性突破扩展名验证，如：test.php_(在windows下,下划线是空格，保存文件时下划线被吃掉剩下test.php)
4.双扩展名之间使用00截断，绕过验证上传恶意代码
0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候
         test.php(0x00).jpg
         test.php%00.jpg
         路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg
5.超长文件名截断上传(windows 258byte | linux 4096byte)
#### 服务端检测文件内容
##### 配合文件包含漏洞
前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。
绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）
（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；
（2）然后再上传一个.php的文件，内容为
此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：
    #PHP    
    #ASP    
    #JSP    
    or  
详细参考：[文件包含漏洞(绕过姿势)](http://thief.one/2017/04/10/2/)
##### 利用PHP特性（使用数组绕过）
file_put_contents 这个函数的第二个参数 可以是数组
然后 如果代码里用正则匹配 bad word 的时候
对一个数组进行正则匹配没用
#### 服务端检测文件头
##### 文件头简介
不同的图片文件都有不同文件头，如：
PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A
JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)
GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61
PHP使用getimagesize函数验证图片文件头
##### 绕过方式
绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了
在木马内容基础上再加了一些文件信息，有点像下面的结构
    GIF89a
#### 上传到服务端后验证
##### 竞争上传
演示代码
    ";
    if($_FILES['file']['error']>0){
        unlink($newfile);
        die("Upload file error: ");