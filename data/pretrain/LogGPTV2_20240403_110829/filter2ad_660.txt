title:POSTER: OFX: Enabling OpenFlow Extensions for Switch-Level Security
Applications
author:John Sonchack and
Adam J. Aviv and
Eric Keller and
Jonathan M. Smith
Poster: OFX: Enabling OpenFlow Extensions for
Switch-Level Security Applications
John Sonchack
University of Pennsylvania
PI:EMAIL
Adam J. Aviv
PI:EMAIL
United States Naval Academy
University of Colorado,
Eric Keller
Boulder
PI:EMAIL
Jonathan M. Smith
University of Pennsylvania
PI:EMAIL
ABSTRACT
Network Security applications that run on Software Deﬁned Net-
works (SDNs) often need to analyze and process trafﬁc in advanced
ways. Existing approaches to adding such functionality to SDNs
suffer from either poor performance, or poor deployability. In this
paper, we propose and benchmark OFX: an OpenFlow extension
framework that provides a better tradeoff between performance and
deployability for SDN security applications by allowing them to
dynamically install software modules onto network switches.
1.
INTRODUCTION
SDNs are a promising deployment target for network security
applications [6, 7, 4]. However, network security applications of-
ten need to analyze and process trafﬁc in more advanced ways
than SDN data planes (i.e. switch forwarding logic) allow. Open-
Flow, the de-facto SDN standard, has many noted data plane limi-
tations [5, 9], for example.
One common approach to overcoming data plane limitations is
to add functionality as a library on the centralized network con-
troller, such as Fresco [8] has proposed (Figure 1 illustrates this
approach). However, the path between a switch’s forwarding logic
and its interface to the controller has bottlenecks, which add la-
tency and limits the bandwidth of trafﬁc that is processed with the
custom functionality. The alternate approach is to embed the new
functionality into the data plane of custom designed switches, as
illustrated in Figure 2. Avant- Guard [9] takes this custom switch
approach, which allows for new functionality to be applied to every
packet at high speeds, but presents a signiﬁcant deployment chal-
lenge requiring network operators to deploy new switches.
Many SDN security applications would be better served by an
approach that takes a middle ground between performance and de-
ployability, where their custom functionality was implemented as
software to provide easy deployability, but ran on network switches
and was tightly coupled to the data plane, to provide sufﬁcient
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the Owner/Author(s). Copyright is held by the
owner/author(s).
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
ACM 978-1-4503-3832-5/15/10.
DOI: http://dx.doi.org/10.1145/2810103.2810120 .
performance. Modern network switches have the general purpose
hardware necessary to perform local packet processing in software,
and even run operating systems with standard kernels, such as Open
Network Linux [2]. These resources are largely untapped for se-
curity applications; they are mostly used to provide simple, hard
coded functions such as generating ARP responses.
Ideally, a SDN security application would be able to dynamically
install software functions onto network switches, using a frame-
work that was integrated into the centralized control platform.With
this approach, a SDN security application could leverage the net-
work wide view that SDN control platforms provide to intelligently
select which packets to process with the software functionality it in-
stalled onto the switches. For example, a security application could
install a software module onto ingress switches that analyzes the
ﬁrst few packets of each new TCP connection to determine whether
or each TCP connection has completed its handshake. As we dis-
cuss in Sections 3 and 4, this functionality can protect other control
applications from SYN ﬂood denial-of-service attacks. Previously
systems that protected against this class of threats, such as Avant-
Guard [9], required custom switches and could not be deployed
onto existing OpenFlow hardware.
In this paper, we introduce OFX (for OpenFlow eXtensions), a
framework that meets these design goals. OFX, depicted in Fig-
ure 3, allows an OpenFlow control application to easily load stack-
independent data plane extension modules into OFX software agents
running on dedicated OpenFlow switches [3] that are already widely
deployed. We show how OFX extension modules can add security
functionality to the network, inspired by AvantGuard [9], but with-
out requiring customized data plane hardware. In experiments, our
OFX extension module allowed networks using OpenFlow switches
with standard hardware data planes to withstand over two orders of
magnitude more attack trafﬁc.
2. OFX ARCHITECTURE
The OFX framework has four main components (see Figure 3).
First the OFX extension modules specify the new data plane func-
tionality. The OFX library provides control applications with an
interface to the functionality deﬁned in a module and handles all
module related controller to switch communication, including load-
ing the module onto switches. When the controller sends a message
deﬁned in an OFX extension module to the switch, the OFX Switch
Agent receives it and calls the message handler from the appropriate
extension module. The OFX Switch Agent maintains connections
to the controller, the standard OpenFlow Management Agent that
1678Packet paths drawn in red.
Figure 1: Adding functionality
in the controller.
Figure 2: Adding functionality
in switch data planes.
Figure 3: Adding data plane functionality with OFX, which
loads extension modules onto agents that run on a switch’s
general purpose hardware.
runs on the switch, and the OFX Data Plane Agent. This compo-
nent of OFX maintains a lower layer socket based connection to
the data plane, and does any packet processing required by OFX
modules.
To develop an OFX module that can be used in an OpenFlow
security application, a developer needs to write:
Message Deﬁnitions both for controller to switch messages (i.e.
to invoke the new functionality), as well as switch to controller
messages (i.e. to provide replies to the controller).
Message Handlers that are triggered when a module message ar-
rives at the switch or controller.
Packet Processing Functions that contain logic that needs to run
efﬁciently in the data plane of the switches.
Redirection Rules that specify which trafﬁc ﬂows should be di-
rected to the packet processing functions, and what should happen
to packets after they are returned. A module can dynamically gen-
erate, install, and remove these rules.
An OpenFlow security application loads an OFX module onto
its network’s switches by calling a function in the OFX library that
sends the module to each OFX Switch Agent running in the net-
work. Once a switch agent recieves the OFX module, it registers all
of the module’s message handlers and loads the packet processing
functions into the OFX Data Plane Agent. When a module installs
an OpenFlow rule to redirect trafﬁc to a packet processing function,
OFX augments the rule with instructions to tag the packets with the
unique ID of the extension module that made the request. The Data
Plane Agent parses the tag to determine which packet processing
functions to apply. After processing, the OFX Data Plane Agent
sends the packet back to the standard OpenFlow data plane, where
another redirection rule determines what happens to it.
3. AN OFX SECURITY MODULE
We implemented an OFX security extension module that con-
tains security functions similar to AvantGuard [9]. Unlike Avant-
Guard, which deﬁned new switch and controller speciﬁcation, the
OFX security module does not require implementation changes to
any part of the OpenFlow stack and can be deployed on existing
OpenFlow switches.
Push-Based Alerts allow a switch to signal its controller when-
ever the packet- or byte-rate of a ﬂow exceedes a threshold.
In
contrast, OpenFlow requires a controller to poll all the switches on
its network for these statistics. After loading the module, the con-
trol application can send a switch an install alert message, which
speciﬁes the trafﬁc ﬂow that should be monitored, and the thresh-
old that the controller wants to be notiﬁed about. Upon reciev-
ing this message, the module component loaded in the OFX switch
agent installs a rule onto the switch’s OpenFlow data plane that
counts, but does not modify, trafﬁc matching the ﬂow speciﬁed by
the controller, and then spawns a thread to periodically query the
data plane for statistics about the installed rule. When the thread
detects that the threshold has been exceeded, it sends a message to
the controller.
TCP Handshake Validation protects an OpenFlow controller that
installs routes for each TCP ﬂow from Syn ﬂood attacks, by en-
suring that a TCP connection has completed its handshake before
informing the controller about it. When the controller enables TCP
handshake validation, the security module component on the switch
installs low priority rules into its OpenFlow data plane that redi-
rects TCP trafﬁc that would otherwise be sent to the controller
(i.e. packets that only match the default send to controller rule)
to the OFX Data Plane Agent instead. The module loads a function
into the data plane agent that checks packets against TCP connec-
tion records. If the packet belongs to an unestablished connection,
the function redirects the packet to its destination MAC address,
so the connection can complete.
If the packet belongs to an es-
tablished connection, the function redirects the packet to the con-
troller, which can then install a higher priority route for the new
TCP ﬂow that will bypass the OFX module’s low priority rule.
4. EVALUATION
We evaluated a prototype implementation of OFX and the OFX
security modules. We implemented the OFX library as a python
module that can be imported by the Ryu OpenFlow controller; the
OFX Switch Agent as a stand-alone Python process; and the OFX
Data Plane Agent as a stand alone C process. The Data Plane Agent
connects to its switch’s data plane using a memory mapped socket.
We tested OFX using the following machines: a Pica8 3290
OpenFlow switch with a harware data plane; a quad core Intel i7
controller with 4GB of ram; and two trafﬁc generation machines
with dual-core Intel Core-2-Duos and 2GB RAM. As a control ap-
1679Statistic
Min Latency
Avg Latency
Max latency
Max TCP
Throughput
UDP Drop %
@ 5MBPS
UDP Drop %
@ 50MBPS
UDP Drop %
@ 500MBPS
Control Path OFX Path
0.251 ms
0.31 ms
0.405 ms
584 Mbps
3.604 ms
4.039 ms
8.08 ms
1.2 Mbps
Data Path
0.169 ms
0.232 ms
0.292 ms
847 Mbps
72 %
-
-
0 %
0.13 %
3.6%
0%
0%
0%
Figure 4: Packet size vs packets per sec-
ond using different paths.
Figure 5: Attack packets per second vs
TCP connection rate.
Figure 6: Trafﬁc statistics for ﬂows travelling
through different paths on our testbed.
plication, we ran the reference OpenVswitch test controller (ver-
sion 2.3), in a hub mode that responded to every packet-in message
from a switch with an instruction to ﬂood the packet. The connec-
tions between all machines were with Gigabit ethernet.
ployability. As future work, we plan to continue development, port
OFX to other hardware switches and control platforms, investigate
higher performance data plane integration techniques, and use OFX
to develop more novel security applications.
OFX Throughput We ﬁrst measured the throughput of OFX for
packet processing with a null OFX module that loads each packet
into memory, but does no processing. Figure 4 displays results
which compares the maximum number of ping packets one traf-
ﬁc generation host can send to the other using the hping3 [1] tool.
Different paths through the network were measured and Table 6
summarizes the statistics as measured using iperf. For all measure-
ments, the OFX path performed several orders of magnitude better
than the control path. The main bottleneck for both the control path
and OFX path was the CPU usage of the switch, though OFX was
much more efﬁcient.
OFX Security Module The push-based alerts of our OFX Secu-
rity Module reduced control trafﬁc as expected and did not impact
the data plane performance. More interestingly, was the the perfor-
mance of the TCP Connection Validation.
We connected an attack host to our testbed that sent a ﬂood of
TCP syn packets to the controller, and then measured the likeli-
hood of the trafﬁc generation hosts establishing a TCP connection
during the ﬂood. 1 For this experiment, we replaced the reference
controller with a TCP learning control application running on Ryu
which installs a ﬂow on the switch whenever it receives a packet
from a previously unseen TCP stream.
Figure 5 shows the percentage of 20 TCP connection attempts
that succeeded, for trials in which the ﬂood rate varied. Without
the handshake validator, the attack packets quickly overloaded the
switch’s ability to send packets to the controller, preventing the le-
gitimate connections from being established. Running the OFX
module allowed the network to be resistant to attacks several or-
ders of magnitude larger. To our knowledge, this is the ﬁrst defense
against SYN ﬂood attacks that runs directly on an SDN built with
standard OpenFlow switches.
5. CONCLUSIONS AND FUTURE WORK
Software Deﬁned Networking has much to offer security appli-
cations. However, current SDN security applications must choose
between either deployability and performance. OFX is a frame-
work for extending the functionality of network switches with mod-
ules that run on their general purpose hardware, and provides a
better trade off: it allows SDN security applications to achieve suf-
ﬁcient performance for the their tasks without sacriﬁcing any de-
1The TCP timeout window was set to 6 seconds.
Acknowledgments This material is based upon work supported
by the National Science Foundation under Grant Nos. 1406177,
1406225, and 1406192. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of the au-
thor(s) and do not necessarily reﬂect the views of the National Sci-
ence Foundation.
6. REFERENCES
[1] Hping 3. http://www.hping.org/hping3.html, 2014.
[2] Open network linux. http://opennetlinux.org, 2014.
[3] White box switchs. http://www.whiteboxswitch.com, 2015.
[4] R. Braga, E. Mota, and A. Passito. Lightweight ddos ﬂooding
attack detection using nox/openﬂow. In Local Computer
Networks (LCN), 2010 IEEE 35th Conference on, pages
408–415. IEEE, 2010.
[5] A. R. Curtis, J. C. Mogul, J. Tourrilhes, P. Yalagandula,
P. Sharma, and S. Banerjee. DevoFlow: Scaling Flow
Management for High-performance Networks. In Proc.
SIGCOMM, 2011.
[6] J. H. Jafarian, E. Al-Shaer, and Q. Duan. Openﬂow random
host mutation: transparent moving target defense using
software deﬁned networking. In Proc. Workshop on Hot topics
in software deﬁned networks (HotSDN), 2012.
[7] S. A. Mehdi, J. Khalid, and S. A. Khayam. Revisiting trafﬁc
anomaly detection using software deﬁned networking. In
Recent Advances in Intrusion Detection, pages 161–180.
Springer, 2011.
[8] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and
M. Tyson. Fresco: Modular composable security services for
software-deﬁned networks. In Proc. Network and Distributed
System Security Symposium (NDSS), February 2013.
[9] S. Shin, V. Yegneswaran, P. Porras, and G. Gu.
AVANT-GUARD: Scalable and Vigilant Switch Flow
Management in Software-deﬁned Networks. In Proc. ACM
SIGSAC Conference on Computer and Communications
Security (CCS), 2013.
1680