is performed.
Approaches based on data sanitization are often highly effective, and in many
situations they can be relied on as a general solution to the problem of malicious
cc0022..iinndddd 2244 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 25
Chapter 2 n Core Defense Mechanisms 25
input. For example, the usual defense against cross-site scripting attacks is to
HTML-encode dangerous characters before these are embedded into pages of the
application (see Chapter 12). However, effective sanitization may be diffi cult to
achieve if several kinds of potentially malicious data need to be accommodated
within one item of input. In this situation, a boundary validation approach is
desirable, as described later.
Safe Data Handling
Many web application vulnerabilities arise because user-supplied data is pro-
cessed in unsafe ways. Vulnerabilities often can be avoided not by validating
the input itself but by ensuring that the processing that is performed on it is
inherently safe. In some situations, safe programming methods are available
that avoid common problems. For example, SQL injection attacks can be pre-
vented through the correct use of parameterized queries for database access
(see Chapter 9). In other situations, application functionality can be designed
in such a way that inherently unsafe practices, such as passing user input to an
operating system command interpreter, are avoided.
This approach cannot be applied to every kind of task that web applications
need to perform. But where it is available, it is an effective general approach to
handling potentially malicious input.
Semantic Checks
The defenses described so far all address the need to defend the application against
various kinds of malformed data whose content has been crafted to interfere
with the application’s processing. However, with some vulnerabilities the input
supplied by the attacker is identical to the input that an ordinary, nonmalicious
user may submit. What makes it malicious is the different circumstances under
which it is submitted. For example, an attacker might seek to gain access to
another user’s bank account by changing an account number transmitted in a
hidden form fi eld. No amount of syntactic validation will distinguish between
the user’s data and the attacker’s. To prevent unauthorized access, the applica-
tion needs to validate that the account number submitted belongs to the user
who has submitted it.
Boundary Validation
The idea of validating data across trust boundaries is a familiar one. The core
security problem with web applications arises because data received from users
is untrusted. Although input validation checks implemented on the client side
may improve performance and the user’s experience, they do not provide any
assurance about the data that actually reaches the server. The point at which
cc0022..iinndddd 2255 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 26
26 Chapter 2 n Core Defense Mechanisms
user data is fi rst received by the server-side application represents a huge trust
boundary. At this point the application needs to take measures to defend itself
against malicious input.
Given the nature of the core problem, it is tempting to think of the input
validation problem in terms of a frontier between the Internet, which is “bad”
and untrusted, and the server-side application, which is “good” and trusted. In
this picture, the role of input validation is to clean potentially malicious data on
arrival and then pass the clean data to the trusted application. From this point
onward, the data may be trusted and processed without any further checks or
concern about possible attacks.
As will become evident when we begin to examine some actual vulnerabili-
ties, this simple picture of input validation is inadequate for several reasons:
n Given the wide range of functionality that applications implement, and the
different technologies in use, a typical application needs to defend itself
against a huge variety of input-based attacks, each of which may employ
a diverse set of crafted data. It would be very diffi cult to devise a single
mechanism at the external boundary to defend against all these attacks.
n Many application functions involve chaining together a series of different
types of processing. A single piece of user-supplied input might result in
a number of operations in different components, with the output of each
being used as the input for the next. As the data is transformed, it might
come to bear no resemblance to the original input. A skilled attacker
may be able to manipulate the application to cause malicious input to be
generated at a key stage of the processing, attacking the component that
receives this data. It would be extremely diffi cult to implement a valida-
tion mechanism at the external boundary to foresee all the possible results
of processing each piece of user input.
n Defending against different categories of input-based attack may entail
performing different validation checks on user input that are incompat-
ible with one another. For example, preventing cross-site scripting attacks
may require the application to HTML-encode the > character as &gt;, and
preventing command injection attacks may require the application to
block input containing the & and ; characters. Attempting to prevent all
categories of attack simultaneously at the application’s external boundary
may sometimes be impossible.
A more effective model uses the concept of boundaryvalidation. Here, each
individual component or functional unit of the server-side application treats
its inputs as coming from a potentially malicious source. Data validation is
performed at each of these trust boundaries, in addition to the external frontier
between the client and server. This model provides a solution to the problems
just described. Each component can defend itself against the specifi c types of
crafted input to which it may be vulnerable. As data passes through different
cc0022..iinndddd 2266 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 27
Chapter 2 n Core Defense Mechanisms 27
components, validation checks can be performed against whatever value the data
has as a result of previous transformations. And because the various validation
checks are implemented at different stages of processing, they are unlikely to
come into confl ict with one another.
Figure 2-5 illustrates a typical situation where boundary validation is the
most effective approach to defending against malicious input. The user login
results in several steps of processing being performed on user-supplied input,
and suitable validation is performed at each step:
1. The application receives the user’s login details. The form handler vali-
dates that each item of input contains only permitted characters, is within
a specifi c length limit, and does not contain any known attack signatures.
2. The application performs a SQL query to verify the user’s credentials.
To prevent SQL injection attacks, any characters within the user input
that may be used to attack the database are escaped before the query is
constructed.
3. If the login succeeds, the application passes certain data from the user’s
profi le to a SOAP service to retrieve further information about her account.
To prevent SOAP injection attacks, any XML metacharacters within the
user’s profi le data are suitably encoded.
4. The application displays the user’s account information back to the user’s
browser. To prevent cross-site scripting attacks, the application HTML-
encodes any user-supplied data that is embedded into the returned page.
2. Clean SQL
1. General checks
SQL query
Login submission
Database
Display account details
User
Application
server
3. Encode XML
4. Sanitize output
metacharacters
SOAP
message
SOAP service
Figure 2-5: An application function using boundary validation at multiple stages of
processing
cc0022..iinndddd 2277 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 28
28 Chapter 2 n Core Defense Mechanisms
The specifi c vulnerabilities and defenses involved in this scenario will be
examined in detail in later chapters. If variations on this functionality involved
passing data to further application components, similar defenses would need
to be implemented at the relevant trust boundaries. For example, if a failed
login caused the application to send a warning e-mail to the user, any user
data incorporated into the e-mail may need to be checked for SMTP injection
attacks.
Multistep Validation and Canonicalization
A common problem encountered by input-handling mechanisms arises when
user-supplied input is manipulated across several steps as part of the valida-
tion logic. If this process is not handled carefully, an attacker may be able to
construct crafted input that succeeds in smuggling malicious data through the
validation mechanism. One version of this problem occurs when an application
attempts to sanitize user input by removing or encoding certain characters or
expressions. For example, an application may attempt to defend against some
cross-site scripting attacks by stripping the expression:
from any user-supplied data. However, an attacker may be able to bypass the
fi lter by supplying the following input:
ipt>
When the blocked expression is removed, the surrounding data contracts
to restore the malicious payload, because the filter is not being applied
recursively.
Similarly, if more than one validation step is performed on user input, an
attacker may be able to exploit the ordering of these steps to bypass the fi lter.
For example, if the application fi rst removes ../ recursively and then removes
..\ recursively, the following input can be used to defeat the validation:
....\/
A related problem arises in relation to data canonicalization. When input
is sent from the user’s browser, it may be encoded in various ways. These
encoding schemes exist so that unusual characters and binary data may be
transmitted safely over HTTP (see Chapter 3 for more details). Canonicalization
is the process of converting or decoding data into a common character set. If
any canonicalization is carried out after input fi lters have been applied, an
attacker may be able to use a suitable encoding scheme to bypass the valida-
tion mechanism.
For example, an application may attempt to defend against some SQL injec-
tion attacks by blocking input containing the apostrophe character. However, if
cc0022..iinndddd 2288 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 29
Chapter 2 n Core Defense Mechanisms 29
the input is subsequently canonicalized, an attacker may be able to use double
URL encoding to defeat the fi lter. For example:
%2527
When this input is received, the application server performs its normal URL
decode, so the input becomes:
%27
This does not contain an apostrophe, so it is permitted by the application’s fi lters.
But when the application performs a further URL decode, the input is converted
into an apostrophe, thereby bypassing the fi lter.
If the application strips the apostrophe instead of blocking it, and then per-
forms further canonicalization, the following bypass may be effective:
%%2727
It is worth noting that the multiple validation and canonicalization steps
in these cases need not all take place on the server side of the application. For
example, in the following input several characters have been HTML-encoded:
If the server-side application uses an input fi lter to block certain JavaScript
expressions and characters, the encoded input may succeed in bypassing the
fi lter. However, if the input is then copied into the application’s response, some
browsers perform an HTML decode of the src parameter value, and the embed-
ded JavaScript executes.
In addition to the standard encoding schemes that are intended for use in
web applications, canonicalization issues can arise in other situations where a
component employed by the application converts data from one character set
to another. For example, some technologies perform a “best fi t” mapping of
characters based on similarities in their printed glyphs. Here, the characters «
and » may be converted into , respectively, and Ÿ and Â are converted
into Y and A. This behavior can often be leveraged to smuggle blocked characters
or keywords past an application’s input fi lters.
Throughout this book, we will describe numerous attacks of this kind, which
are effective in defeating many applications’ defenses against common input-
based vulnerabilities.
Avoiding problems with multistep validation and canonicalization can some-
times be diffi cult, and there is no single solution to the problem. One approach is
to perform sanitization steps recursively, continuing until no further modifi cations
have been made on an item of input. However, where the desired sanitization
involves escaping a problematic character, this may result in an infi nite loop.
Often, the problem can be addressed only on a case-by-case basis, based on the
types of validation being performed. Where feasible, it may be preferable to avoid
attempting to clean some kinds of bad input, and simply reject it altogether.
cc0022..iinndddd 2299 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 30
30 Chapter 2 n Core Defense Mechanisms
Handling Attackers
Anyone designing an application for which security is remotely important must
assume that it will be directly targeted by dedicated and skilled attackers. A key
function of the application’s security mechanisms is being able to handle and
react to these attacks in a controlled way. These mechanisms often incorporate
a mix of defensive and offensive measures designed to frustrate an attacker as
much as possible and give the application’s owners appropriate notifi cation and
evidence of what has taken place. Measures implemented to handle attackers
typically include the following tasks:
n Handling errors
n Maintaining audit logs
n Alerting administrators
n Reacting to attacks
Handling Errors
However careful an application’s developers are when validating user input, it
is virtually inevitable that some unanticipated errors will occur. Errors resulting
from the actions of ordinary users are likely to be identifi ed during functional-
ity and user acceptance testing. Therefore, they are taken into account before
the application is deployed in a production context. However, it is diffi cult to
anticipate every possible way in which a malicious user may interact with the
application, so further errors should be expected when the application comes
under attack.
A key defense mechanism is for the application to handle unexpected errors
gracefully, and either recover from them or present a suitable error message
to the user. In a production context, the application should never return any
system-generated messages or other debug information in its responses. As
you will see throughout this book, overly verbose error messages can greatly
assist malicious users in furthering their attacks against the application. In some
situations, an attacker can leverage defective error handling to retrieve sensi-
tive information within the error messages themselves, providing a valuable
channel for stealing data from the application. Figure 2-6 shows an example of
an unhandled error resulting in a verbose error message.
Most web development languages provide good error-handling support
through try-catch blocks and checked exceptions. Application code should
make extensive use of these constructs to catch specifi c and general errors and
handle them appropriately. Furthermore, most application servers can be con-
fi gured to deal with unhandled application errors in customized ways, such as
cc0022..iinndddd 3300 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 31
Chapter 2 n Core Defense Mechanisms 31
by presenting an uninformative error message. See Chapter 15 for more details
on these measures.
Figure 2-6: An unhandled error
Effective error handling is often integrated with the application’s logging
mechanisms, which record as much debug information as possible about unan-
ticipated errors. Unexpected errors often point to defects within the application’s
defenses that can be addressed at the source if the application’s owner has the
required information.
Maintaining Audit Logs
Audit logs are valuable primarily when investigating intrusion attempts against
an application. Following such an incident, effective audit logs should enable
the application’s owners to understand exactly what has taken place, which
vulnerabilities (if any) were exploited, whether the attacker gained unauthorized
access to data or performed any unauthorized actions, and, as far as possible,
provide evidence of the intruder’s identity.
cc0022..iinndddd 3311 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 32
32 Chapter 2 n Core Defense Mechanisms
In any application for which security is important, key events should be logged
as a matter of course. At a minimum, these typically include the following:
n All events relating to the authentication functionality, such as successful
and failed login, and change of password
n Key transactions, such as credit card payments and funds transfers
n Access attempts that are blocked by the access control mechanisms
n Any requests containing known attack strings that indicate overtly mali-
cious intentions
In many security-critical applications, such as those used by online banks,
every client request is logged in full, providing a complete forensic record that
can be used to investigate any incidents.
Effective audit logs typically record the time of each event, the IP address
from which the request was received, and the user’s account (if authenticated).
Such logs need to be strongly protected against unauthorized read or write
access. An effective approach is to store audit logs on an autonomous system
that accepts only update messages from the main application. In some situa-
tions, logs may be fl ushed to write-once media to ensure their integrity in the
event of a successful attack.
In terms of attack surface, poorly protected audit logs can provide a gold mine
of information to an attacker, disclosing a host of sensitive information such as
session tokens and request parameters. This information may enable the attacker
to immediately compromise the entire application, as shown in Figure 2-7.