**Title: See No Evil: Phishing for Permissions with False Transparency**

**Authors:**
- Güliz Seray Tuncay, Google, University of Illinois at Urbana-Champaign
- Jingyu Qian, University of Illinois at Urbana-Champaign
- Carl A. Gunter, University of Illinois at Urbana-Champaign

**Publication:**
- Proceedings of the 29th USENIX Security Symposium
- August 12–14, 2020
- ISBN: 978-1-939133-17-5
- Open access sponsored by USENIX
- [Link to Paper](https://www.usenix.org/conference/usenixsecurity20/presentation/tuncay)

**Abstract:**
Android introduced runtime permissions to provide users with more contextual information and finer control over app permissions. However, the correct operation of this model relies on certain implicit assumptions that can be exploited by adversaries. We identify a new attack vector, termed "false transparency attacks," where background apps illegitimately obtain permissions by impersonating foreground apps. These attacks pose a significant security threat to the Android platform, as they undermine the security guarantees of both runtime and overall Android permissions.

We conducted a user study on Amazon Mechanical Turk to demonstrate that mobile users' understanding of runtime permissions makes them susceptible to these attacks. Our carefully designed attacks were validated through this study, and we further confirmed their feasibility in a realistic in-lab setting, where none of the participants detected the attacks. We also discuss why existing defenses against mobile phishing are ineffective in the context of false transparency attacks, including vulnerabilities in a key security mechanism introduced in Android 10. Finally, we propose a list of countermeasures to mitigate these attacks on the Android platform and app stores.

**1. Introduction**
"Be transparent. When you make a permissions request, be clear about what you’re accessing, and why, so users can make informed decisions." – App permissions best practices by Google [1]

Android's permission system is designed to enable access control based on user consent. To foster meaningful consent, Android 6.0 introduced runtime permissions, which provide users with contextual information to help them understand why an app needs a specific permission. The runtime permission model ensures two key security guarantees:
1. **Contextual Guarantee:** Users are provided with the necessary contextual information to make informed decisions, as apps must be in the foreground when requesting permissions.
2. **Identity Guarantee:** Users are clearly informed of the identity of the app making the permission request, as the app name is displayed in the permission dialog.

However, we have identified that these guarantees can be broken due to implicit assumptions made by the platform designers. Specifically, the model assumes that foreground apps will always present a legitimate context and that the app name in the permission dialog uniquely identifies the app. We show that these assumptions can be exploited by adversaries to launch false transparency attacks, where a background app (adversary) requests and obtains permissions while misleading the user into believing the request comes from a trusted foreground app (victim).

**2. Background**
**2.1 Android Permissions**
Before Android 6.0, permissions were granted at installation time. With the introduction of runtime permissions, high-risk resources (e.g., camera, contacts) are requested dynamically and can be revoked by the user at any time. This model aims to provide users with more context when making permission decisions. The `PackageManager` class can be queried to obtain permission information, including the permissions requested by apps and their current states.

**2.2 App Components and Task Organization**
Android apps can contain four main components: activities, services, broadcast receivers, and content providers. An activity presents a single-purpose user interface, while a fragment is a subcomponent of an activity. Services perform long-running tasks in the background, and broadcast receivers handle messages from other apps or the system. Content providers offer a relational database interface for data storage and sharing. Tasks, which are collections of activities, are managed in a stack, and the back button removes the top activity. The recents screen allows users to view recently accessed tasks, and tasks can be excluded from the recents screen using specific APIs.

**3. Runtime Permissions in the Wild**
Our attacks pose a significant threat to the security of runtime permissions. We studied the adoption of runtime permissions to assess the extent of our attacks. As of December 2018, 74.8% of Android devices supported runtime permissions (Android 6-11). In our dataset of 2,483 apps, 83% had a target API level of 23 or higher, indicating they use runtime permissions. Of these, 85% (71% of all apps) requested at least one dangerous permission, demonstrating that runtime permissions are widely adopted by developers and users.

**4. Attacking Runtime Permissions**
The runtime permission model provides essential security guarantees to deliver contextual information. We discuss how these guarantees can be broken to launch false transparency attacks. Our threat model assumes an adversary who can build and distribute apps on app markets like Google Play. The adversary's goal is to obtain dangerous permissions, which is difficult for non-reputable developers without a convincing reason for the permission.

**4.1 (Breaking) the Security Guarantees of Runtime Permissions**
The security guarantees of runtime permissions rely on certain implicit assumptions:
1. **Contextual Guarantee:** Apps must request permissions from the foreground, ensuring users have the necessary context. We show that this assumption can be broken by utilizing Android APIs and invisible graphical displays to move a background app to the foreground.
2. **Identity Guarantee:** The app name in the permission dialog should uniquely identify the app. We demonstrate that this assumption is flawed, as apps can spoof names to mislead users.

**Threat Model:**
- **Adversary:** Can build and distribute apps on app markets.
- **Goal:** Obtain dangerous permissions.
- **Method:** Exploit implicit assumptions in the runtime permission model to launch false transparency attacks.

**Conclusion:**
False transparency attacks exploit design shortcomings in Android's runtime permission model, allowing adversaries to illegitimately obtain permissions. We conducted user studies to validate the susceptibility of users to these attacks and proposed practical countermeasures to defend against them.