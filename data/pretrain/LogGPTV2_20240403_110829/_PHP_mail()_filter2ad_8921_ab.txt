使用的MTA版本（8.14.4，是Sendmail MTA）
发送消息的脚本名，继而揭露电子邮件发送库/框架的名（如X-PHP-Originating-Script: 0:class.phpmailer.php）
如果应用使用了电子邮件库（如PHPMailer、Zend-mail等）。可能会有版本头。如：
知道了使用的库，攻击者能调整他们的攻击的系统、MTA和PHP电子邮件库。
例如，PHPMailer库有版本有漏洞：PHPMailer Sender属性为-f字符串，以创建一个sendmail参数（信件发送者/MAIL
FROM）传递给mail()函数，作为5th参数。
$this->Sender属性的内部会通过调用PHPMailer类的setFrom()方法验证并设置。看起来如下：
理论上，setFrom()应该很少暴露给不受信的用户输入，即使是，也有验证函数验证邮件满足RFC822协议，因此这不是个问题。
[PHPMailer教程](https://github.com/PHPMailer/PHPMailer/wiki/Tutorial)显示了PHPMailer的基本用法：
与名字暗示的相反，这个setFrom()例子不是用来存储地址的。
不幸的是，由于函数名和代码片段的流行程度，很多脚本通过各种通讯录和反馈表单中的字段使用setFrom()来设置访问者的“From”地址。
不知道他们应该使用AddReplyTo()添加。（设置DATA/Reply-To头，而不是MAIL FROM/信件Sender地址）
使用setFrom()实现预期的通讯/反馈表单，即使不满足邮件最佳做法。
这也将造成严重缺陷，如果使用setFrom()设置的是不受信的邮件地址给mail()函数的5th参数，将绕过RFC验证。这使得注入任意参数给/usr/sbin/sendmail是可能的，并导致致命的远程代码执行缺陷。
正如所提到的，其他的PHP库有类似的缺陷，后来被命名为“PwnScriptum”。
这个漏洞的demo的[细节](https://legalhackers.com/videos/PHPMailer-Exploit-Remote-Code-Exec-Vuln-CVE-2016-10033-PoC.html)显示了如何通过通讯表单成功漏洞利用。受限利用在[这里](https://legalhackers.com/exploits/CVE-2016-10033/10045/10034/10074/PwnScriptum_RCE_exploit.py)分享。
**3\. 其他利用mail()漏洞的注入点/方式**
等到供应商修复了漏洞，剩余的实例将在下个版本的白皮书描述。
**0x08 绕过技术**
本节描述了一些绕过技术，可能用于类似的保护绕过。
下面两种被用于绕过PHP 电子邮件库提供的保护。
**1\. RFC3696和RFC822**
RFC3696和RFC822标准如下：https://tools.ietf.org/html/rfc3696
 。
邮件采用下面格式：
这些标准允许作者构建一个可靠的符合RFC的电子邮件地址，但是同时一个恶意的payload作为mail()的5th参数：
当传递给有漏洞的PHP邮件库，然后是mail()函数，它将导致sendmail执行下面的参数：
因此，攻击者打破了-f参数，且注入了额外的参数（arg no.4和arg no.5）。
**2\. 绕过mail()使用的escapeshellcmd()**
很直观的看到，通过mail()函数的5th参数传递的额外的参数应该被escapeshellcmd()函数转义。
不幸的是，它和mail()函数内部执行的命令逃逸冲突。
好的例子是CVE-2016-10033漏洞继而有CVE-2016-10045漏洞，因为这样的修复能被绕过，因为冲突：
将导致下面的参数传递给sendmail程序：
再次导致任意参数传递给/usr/sbin/sendmail。
**0x09 参考**
[0] 
[1] 
[2] 
[3] 
[4] 
[5] 
[6] 
[7]
[8] 