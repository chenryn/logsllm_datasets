### Framework for Logging System Events and Generating Stack Walk Traces

The Event Tracing for Windows (ETW) framework is a general-purpose tracing engine available in the latest Windows operating systems, first introduced in Windows 2000. It provides a mechanism to log events triggered across multiple system layers, from user applications to kernel components. ETW has been widely adopted by third-party management tools for performance diagnostics. The output of ETW is an Event Tracing Log (ETL) file, which serves as the raw input for LEAPS. ETW allows us to enable stack walking for various system events, such as system calls, process/thread creation, image load/unload, file operations, and registry tracing. We parse the raw ETL file to generate a stack-event correlated log. All ETW logging is performed on a machine with an Intel Core i7 3.40 GHz CPU, 12GB RAM, and Windows Server 2008 R2 64-bit operating system.

### Implementation Details

We implemented the Stack Partition Module, Data Preprocessing Module, and Control Flow Graph Inference Module using Python. In the Data Preprocessing Module, we use the hierarchical clustering implementation from the SciPy library, specifically the UPGMA (Unweighted Pair Group Method with Arithmetic Mean) method, to group the library and function sets. This method calculates the distance between any two clusters as the mean distance between all elements of each cluster.

The Supervised Statistical Learning Module is implemented under the LIBSVM framework, which is an integrated system for support vector classification, regression, and distribution estimation. The input to the Weighted SVM model is a combination of benign and mixed (with weights) training data. The output is a binary classification model used for attack detection in the testing data. We use 10-fold cross-validation to tune the model parameters λ and σ² on the training set.

### Evaluation

#### A. Dataset

1. **Data Source:**
   - We use 21 datasets (Table I) to evaluate our approach, each consisting of different combinations of applications, malicious payloads, and attack methods. Attack methods are categorized into offline infection (malicious payload embedded in a benign binary) and online injection (malicious payload injected into a benign process at runtime).
   - Each dataset includes three subsets: pure benign samples, mixed samples, and pure malicious samples.
   - Pure benign samples are obtained by exercising the benign application. Mixed samples are from profiling either trojaned applications (offline infection) or tampered processes (online injection), containing both benign and malicious events.
   - Pure malicious samples are manually extracted and recompiled as independent malware, used only as ground truth for testing.
   - After hierarchical clustering, each subset contains three features: Event_Type, Lib, and Func.

2. **Data Selection:**
   - Training data: Pure benign samples (positive training samples) and mixed samples (negative training samples).
   - Testing data: Pure benign samples (positive testing samples) and pure malicious samples (negative testing samples).
   - To avoid overlap, we divide the pure benign samples into two non-overlapping parts, 50% for training and 50% for testing.
   - We increase the dimensions from 3 to 30 by coalescing each 10 consecutive samples into one 30-dimension data point.
   - We randomly select 20% of the samples from each dataset to form the training and testing sets, ensuring reasonable running time and near-complete coverage of behavior.

#### B. Evaluation Procedure and Measurement of Effectiveness

- We compare our CFG-guided Weighted SVM approach (denoted WSVM) with two other classification approaches: system-level call graph (CGraph) and traditional SVM, on all 21 datasets.
- Model parameters λ and σ² are set using 10-fold cross-validation on the training set. Results are averaged over 10 runs to eliminate fluctuations caused by random selection.
- Performance is measured based on True Positives (TP), True Negatives (TN), False Positives (FP), and False Negatives (FN).
- Five measurements are used: Accuracy (ACC), Positive Predictive Value (PPV or Precision), True Positive Rate (TPR or Recall), True Negative Rate (TNR or Specificity), and Negative Predictive Value (NPV).

1. **Accuracy (ACC):**
   - ACC is the portion of true results (both TP and TN) in the total test samples.
   - Formula: \( \text{ACC} = \frac{\text{TP} + \text{TN}}{\text{TP} + \text{FP} + \text{FN} + \text{TN}} \)
   - Example: The ACC of winscp_reverse_https_online increases from 59.9% (CGraph) to 92.1% (WSVM).

2. **Positive Predictive Value (PPV):**
   - PPV measures the portion of actual benign samples in all predicted benign samples.
   - Formula: \( \text{PPV} = \frac{\text{TP}}{\text{FP} + \text{TP}} \)
   - Example: The PPVs of putty_reverse_tcp_online are 71.2% (CGraph), 79.6% (SVM), and 82.5% (WSVM).

3. **True Positive Rate (TPR):**
   - TPR measures the number of instances correctly classified as benign out of the total benign instances.
   - Formula: \( \text{TPR} = \frac{\text{TP}}{\text{TP} + \text{FN}} \)
   - Example: The TPR of putty_reverse_https_online increases from 41.7% (CGraph) to 56.4% (SVM) and reaches 73.8% (WSVM).

4. **True Negative Rate (TNR):**
   - TNR calculates the number of instances correctly classified as malicious out of the total malicious instances.
   - Formula: \( \text{TNR} = \frac{\text{TN}}{\text{FP} + \text{TN}} \)
   - Example: The TNR of vim_codeinject increases from 67.9% (CGraph) to 98.9% (WSVM).

5. **Negative Predictive Value (NPV):**
   - NPV measures the portion of actually malicious samples out of the total predicted malicious samples.
   - Formula: \( \text{NPV} = \frac{\text{TN}}{\text{TN} + \text{FN}} \)
   - Example: The NPV of putty_reverse_https_online increases from 69.9% (SVM) to 79.2% (WSVM).

#### C. Results and Discussion

- Figures 6 and 7 show the results for offline infection and online injection datasets, respectively.
- Table I presents detailed results for all datasets.
- The proposed CFG-guided Weighted SVM method achieves the best results on all measurements in all cases.
- We discuss three representative cases in detail in the following sections.

### Summary

- The ETW framework is used to log system events and generate stack walk traces.
- Our implementation uses Python and leverages hierarchical clustering and LIBSVM.
- Evaluation shows that the CFG-guided Weighted SVM method outperforms other approaches in terms of accuracy, precision, recall, specificity, and negative predictive value.