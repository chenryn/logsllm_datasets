title:2DFQ: Two-Dimensional Fair Queuing for Multi-Tenant Cloud Services
author:Jonathan Mace and
Peter Bod&apos;ık and
Madanlal Musuvathi and
Rodrigo Fonseca and
Krishnan Varadarajan
2DFQ: Two-Dimensional Fair Queueing for
Multi-Tenant Cloud Services
Jonathan Mace¸, Peter Bodikz, Madanlal Musuvathiz, Rodrigo Fonseca¸,
Krishnan Varadarajanz
¸Brown University, zMicrosoft
throughput for others. Systems in the past have su(cid:242)ered cas-
cading failures [¸(cid:146),z6], slowdown [¸(cid:13),z§,z6,z˙,hh], and even
cluster-wide outages [¸(cid:13),¸(cid:146),z6] due to aggressive tenants and
insuıcient resource isolation.
However, it is diıcult to provide isolation in these sys-
tems because multiple tenants execute within the same process.
Consider the HDFS NameNode process, which maintains
metadata related to locations of blocks in HDFS. Users invoke
various APIs on the NameNode to create, rename, or delete
ßles, create or list directories, or look up ßle block locations.
As in most shared systems, requests to the NameNode wait
in an admission queue and are processed in FIFO order by a
set of worker threads. In this setting tenant requests contend
for resources, such as CPU, disks, or even locks, from within
the shared process. As a result, traditional resource manage-
ment mechanisms in the operating system and hypervisor
are unsuitable for providing resource isolation because of a
mismatch in the management granularity.
ABSTRACT
In many important cloud services, di(cid:242)erent tenants execute
their requests in the thread pool of the same process, requiring
fair sharing of resources. However, using fair queue schedulers
to provide fairness in this context is diıcult because of high ex-
ecution concurrency, and because request costs are unknown
and have high variance. Using fair schedulers like WFQ and
WFzQ in such settings leads to bursty schedules, where large re-
quests block small ones for long periods of time. In this paper,
we propose Two-Dimensional Fair Queueing (zDFQ), which
spreads requests of di(cid:242)erent costs across di(cid:242)erent threads and
minimizes the impact of tenants with unpredictable requests.
In evaluation on production workloads from Azure Storage,
a large-scale cloud system at Microso(cid:22), we show that zDFQ
reduces the burstiness of service by ¸-z orders of magnitude.
On workloads where many large requests compete with small
ones, zDFQ improves (cid:146)(cid:146)th percentile latencies by up to z
orders of magnitude.
CCS Concepts
•Networks→ Cloud computing; Packet scheduling;
•Computer systems organization→ Availability;
INTRODUCTION
Keywords
Fair Request Scheduling; Multi-Tenant Systems
1.
Many important distributed systems and cloud services exe-
cute requests of multiple tenants simultaneously. _ese include
storage, conßguration management, database, queueing, and
co-ordination services, such as Azure Storage [(cid:146)], Amazon
Dynamo [¸@], HDFS [(cid:254)h], ZooKeeper [h@], and many more.
In this context, it is crucial to provide resource isolation to
ensure that a single tenant cannot get more than its fair share
of resources, to prevent aggressive tenants or unpredictable
workloads from causing starvation, high latencies, or reduced
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than the author(s) must be honored. Abstracting with credit is
permitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22 - 26, 2016, Florianopolis , Brazil
© 2016 Copyright held by the owner/author(s). Publication rights licensed to
ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/¸§.¸¸(cid:13)(cid:254)/z(cid:146)h(cid:13)˙6z.z(cid:146)h(cid:13)˙6˙
144
In many domains, resource isolation is implemented us-
ing a fair queue scheduler, which provides alternating ser-
vice to competing tenants and achieves a fair allocation of
resources over time. Fair schedulers such as Weighted Fair
Queueing [(cid:13)@], which were originally studied in the context
of packet scheduling, can be applied to shared processes since
the setting is similar: multiple tenants submit (cid:6)ows of short-
lived requests that are queued and eventually processed by a
server of limited capacity. However, in shared processes there
are three additional challenges that must be addressed:
● Resource concurrency: _read pools in shared processes
● Large cost variance: Request costs vary by at least (cid:13) orders
execute many requests concurrently, o(cid:22)en tens or even
hundreds, whereas packet schedulers are only designed for
sequential execution of requests (i.e. on a network link);
of magnitude across di(cid:242)erent tenants and API types, from
sub-millisecond to many seconds. By contrast, network
packets only vary in length by up to ¸.(cid:254) orders of mag-
nitude (between (cid:13)§ and ¸(cid:254)§§ bytes). Unlike CPU thread
schedulers, requests are not preemptible by the application;
● Unknown and unpredictable resource costs: _e execu-
tion time and resource requirements of a request are not
known at schedule time, are diıcult to estimate up front,
and vary substantially based on API type, arguments, and
transient system state (e.g., caches). By contrast, the length
of each network packet is known a priori and many packet
schedulers rely on this information.
_ese challenges a(cid:242)ect the quality of schedules produced
by algorithms such as Weighted Fair Queueing (WFQ) [(cid:13)@]
and Worst-Case Fair Weighted Fair Queueing (WFzQ) [@].
Figure ¸a shows an example of a bursty request schedule which
does occur in practice as we verify in our evaluation. In the
bursty schedule, the service rates allocated to tenants A and
B oscillate signißcantly because C and D have large requests.
Most fair packet schedulers produce the bursty schedule, de-
spite the existence of the better smooth schedule. _is occurs
in part because the schedulers only quantify and evaluate
fairness in terms of worst-case bounds, which the bursty and
smooth schedules both satisfy. For example, consider MSF
zQ [˙], a packet scheduler that extends WFzQ to multiple ag-
gregated network links (a setting analogous to request schedul-
ing in worker thread pools). MSFzQ bounds by how much
a tenant can fall behind its fair share to N⋅ Lmax where N is
of its fair share to N⋅ Li
the number of threads and Lmax is the cost of the largest re-
quest. It also bounds by how much a tenant i can get ahead
max is the cost of i’s largest
request. Worst-case bounds are suıcient to avoid unaccept-
able bursts in packet scheduling, but in our context they are
insuıcient due to large concurrency (large N) and large cost
variance (large Lmax). It might not be possible to improve worst
case bounds in theory, so instead we seek a scheduler that, in
practice, achieves smoother schedules on average.
max where Li
_e practical obstacle to smooth schedules is cost estima-
tion. In shared services, request costs are not known at sched-
ule time; instead the scheduler must estimate costs based on
past requests or some other model. However, request costs
are diıcult to predict and estimates could be o(cid:242) by orders
of magnitude. When a tenant sends many expensive requests
estimated to be very cheap, the scheduler can start them to-
gether, blocking many or all available threads for long periods
of time. _us incorrect costs lead to bursty schedules and high
latencies, particularly for tenants with small requests.
In this paper, we present Two-Dimensional Fair Queueing
(zDFQ)¸, a request scheduling algorithm that produces fair
and smooth schedules in systems that can process multiple
requests concurrently. Our solution builds on two insights to
address the challenges above. First, we take advantage of the
concurrency of the system and separate requests with di(cid:242)erent
costs across di(cid:242)erent worker threads. _is way, large requests
do not take over all the threads in the system and do not block
small requests for long periods of time. Second, when request
costs are unknown a priori, we use pessimistic cost estimation
to co-locate unpredictable requests with expensive requests,
keeping them away from tenants with small and predictable
requests for whom they would cause bursty schedules.
zDFQ produces smooth schedules like the schedule illus-
trated in Figure ¸b, even in the presence of expensive or un-
predictable tenants. zDFQ improves per-tenant service rates
compared to existing schedulers such as WFQ, WFzQ and
MSFzQ. While it keeps the same worst-case bounds as MSF
zQ, zDFQ produces better schedules in the average case by
avoiding bursty schedules where possible.
¸Two-dimensional because it schedules requests across both time
and the available threads.
145
(a) Bursty schedule
(b) Smooth schedule
Figure ¸: An illustration of request execution over time with four tenants
sharing two threads. Tenants A and B send requests with ¸ second duration
while tenants C and D with ¸§ second duration. In each schedule, rows rep-
resent the threads over time labeled by the currently executing tenant. Both
schedules are fair; over long time periods, all tenants receive their fair share.
Top: bursty schedule; small requests receive no service for ¸§ second periods.
Bottom: smooth schedule with only ¸ second gap between two requests of
tenant A and B. Schedulers such as WFQ, WFzQ, or MSFzQ generate the
bursty schedule; zDFQ is designed to generate the smooth schedule.
_e contributions of this paper are as follows:
scale system deployed across many Microso(cid:22) datacenters,
we demonstrate scheduling challenges arising from high
concurrency and variable, unpredictable request costs;
● Using production traces from Azure Storage [(cid:13),(cid:146)], a large-
● We improve upon existing fair schedulers with Two-Dimen-
● To handle unknown request costs we present zDFQE, which
● We evaluate zDFQ and zDFQE with extensive simulations
sional Fair Queueing (zDFQ), a request scheduler based
on WFzQ that avoids bursty schedules by biasing requests
of di(cid:242)erent sizes to di(cid:242)erent threads;
extends zDFQ’s cost-based partitioning with pessimistic
cost estimation to mitigate the impact of unpredictable
tenants that cause bursty schedules;
based on production workload traces from Azure Storage.
We ßnd that zDFQ has up to z orders of magnitude less
variation in service rates for small and medium requests
compared to WFQ and WFzQ. Across a suite of ¸(cid:254)§ experi-
ments, zDFQE dramatically reduces mean and tail latency,
by up to z orders of magnitude for predictable workloads
when they contend against large or unpredictable requests.
2. MOTIVATION
Need for Fine-Grained Resource Isolation. Many important
datacenter services such as storage, database, queueing, and co-
ordination services [(cid:146),h§,h@,(cid:254)h], are shared among multiple
tenants simultaneously, due to the clear advantages in terms of
cost, eıciency, and scalability. In most of these systems, mul-
tiple tenants contend with each other for resources within the
same shared processes. Examples include performing meta-
data operations on the HDFS NameNode and performing
data operations on HDFS DataNodes [(cid:254)h].
When tenants compete inside a process, traditional and
well-studied resource management techniques in the operat-
ing system and hypervisor are unsuitable for protecting ten-