### 《软件调试》补编

#### 2. 创建 `__Win32Provider` 类的实例
- `__Win32Provider` 是一个内部类，用于描述提供器对象。创建该类的一个实例相当于在 CIM 对象数据库中的 `__Win32Provider` 数据表中新增一行记录。每一行记录对应于提供器对象的属性值。

```mof
instance of __Win32Provider as "$Reg" 
{ 
    Name = "RegProv"; 
    CLSID = "{fe9af5c0-d3b6-11ce-a5b6-00aa00680c3f}"; 
    HostingModel = "NetworkServiceHost:LocalServiceHost"; 
};
```

- 上述语句会在提供器表中添加一条新记录，其中 `Name`、`CLSID` 和 `HostingModel` 列的值分别对应指定的值。
- `Name` 表示提供器的名称。
- `CLSID` 是该提供器的 COM 组件的全局唯一标识符（GUID），在 COM 注册时会被写入注册表。WMI 通过此 GUID 查找并加载相应的模块和创建提供器对象。
- `HostingModel` 指定提供器的宿主特性，即 WMI 应以何种环境加载和运行提供器，包括使用哪个账户以及将其加载到哪个进程中。目前 WMI 支持以下几种 `HostingModel`：
  - `SelfHost`: 提供器在其自身的本地 COM 服务器进程中运行。
  - `LocalSystemHost`, `LocalSystemHostOrSelfHost`, `NetworkServiceHost`, `LocalServiceHost`: 如果提供器作为进程内 COM 服务器实现，则运行在共享的提供器宿主进程（如 `wmiprvse.exe`）中；否则，它将运行在其自己的本地 COM 服务器进程中。这些选项的区别在于宿主进程是以哪个账户运行的。`LocalSystem` 权限最高，仅当提供器需要访问特权信息时才应使用。`NetworkService` 和 `LocalService` 的权限受限，如果提供器需要访问远程机器，建议使用 `NetworkService`；若所有操作均在本地完成，则推荐使用 `LocalService`。
  - `DecoupledCom`: 提供器运行在隔离的 WMI 客户进程中。
- 注意：`HostingModel` 设置仅适用于 Windows 2000 之后的操作系统版本。对于 Windows 2000，所有进程内提供器（DLL 形式的提供器）都运行在 `winmgmt` 进程内。

#### 3. 创建 `__ProviderRegistration` 类或其派生类的实例
- WMI 提供了六个 `__ProviderRegistration` 类及其派生类，分别用于注册六种类型的提供器：`__ClassProviderRegistration`、`__InstanceProviderRegistration`、`__EventProviderRegistration`、`__EventConsumerProviderRegistration`、`__MethodProviderRegistration` 和 `__PropertyProviderRegistration`。
- 如果一个提供器实现了多个角色，则需分别为每种角色创建对应的实例。例如，以下语句为 `StdRegProv` 提供器注册了实例提供器和方法提供器两种身份。

```mof
instance of __InstanceProviderRegistration 
{ 
    provider = "$Reg"; 
    SupportsDelete = FALSE; 
    SupportsEnumeration = TRUE; 
    SupportsGet = TRUE; 
    SupportsPut = TRUE; 
}; 

instance of __MethodProviderRegistration 
{ 
    provider = "$Reg"; 
};
```

#### 4. 将以上内容保存到 MOF 文件并执行
- 将上述内容保存到一个 MOF 文件，并将其放置在一个安全的位置。
- 使用 `mofcomp` 命令编译并执行该文件。如果一切顺利，提供器将成功注册。

#### 5. 验证提供器
- 使用 WMI CIM Studio 在第一步指定的命名空间中查找刚注册的提供器（类和实例），验证其是否正常工作。
- 如果遇到 `0x80041013` 错误（表示提供器加载失败），首先检查提供器的 COM 组件是否已成功注册，以及对应的模块文件是否存在。

### 31.4.3 WMI 提供器进程
- **WMI 提供器进程**是指承载 WMI 提供器的进程。少数 EXE 形式的提供器运行在其自身进程中，而 DLL 形式的提供器则通常由 `wmiprvse.exe` 进程加载和运行。
- **Windows 2000**: WMI 服务进程 (`winmgmt.exe`) 同时承担提供器进程的角色。这种设计的问题是，如果某个提供器中的代码发生错误，可能导致整个进程崩溃。
- **Windows XP**: 引入了 `wmiprvse.exe` 进程来加载和运行提供器模块。`wmiprvse.exe` 进程的数量根据需要动态调整，且与 WMI 服务进程之间通过 RPC 机制通信。这增加了系统的灵活性和稳定性，但也带来了额外的性能开销。

### 31.5 WMI 应用程序
- **WMI 应用程序**是指利用 WMI 服务提供各种管理功能的软件工具。从消耗和提供的角度来看，WMI 应用程序消耗 WMI 服务提供器提供的信息，属于消耗器。
- Windows 提供了以下四种方式供不同类型的应用程序使用 WMI 服务：
  1. **COM/DCOM 接口**：C/C++ 程序可以通过这些接口与 WMI 核心组件通信并调用所需的服务。
  2. **ActiveX 控件**：各种脚本程序可以通过进一步封装过的 ActiveX 控件来调用 WMI 服务。
  3. **ODBC 适配器**：通过该适配器，可以像访问数据库那样访问 WMI 中的信息。
  4. **.Net 框架中的 `System.Management` 类库**：.Net 程序可以通过该类库中的各个类使用 WMI 服务。

### 31.5.1 通过 COM/DCOM 接口使用 WMI 服务
- 使用 C/C++ 调用 WMI 服务是最复杂的一种方式，但灵活性高且执行速度快。过程如下：
  1. **初始化 COM 库**：使用 `CoInitializeEx` 或 `OleInitialize` 函数初始化 COM 库。
  2. **初始化进程安全属性**：调用 `CoInitializeSecurity` 设置当前进程的默认安全属性。
  3. **连接 WMI 服务**：使用 `IWbemLocator` 接口的 `ConnectServer` 方法与 WMI 服务所在的命名空间建立连接，获取 `IWbemServices` 接口实例。
  4. **设置 WMI 连接的安全等级**：通过 `CoSetProxyBlanket` API 设置合适的认证信息供代理进行 RPC 调用时使用。

```cpp
// 初始化 COM 库
CoInitializeEx(NULL, COINIT_MULTITHREADED);

// 初始化进程安全属性
CoInitializeSecurity(
    NULL, 
    -1, 
    NULL, 
    NULL, 
    RPC_C_AUTHN_LEVEL_DEFAULT, 
    RPC_C_IMP_LEVEL_IMPERSONATE, 
    NULL, 
    EOAC_NONE, 
    NULL
);

// 连接 WMI 服务
IWbemLocator *pIWbemLocator = NULL;
HRESULT hres = CoCreateInstance(CLSID_WbemLocator, 
                                NULL, 
                                CLSCTX_INPROC_SERVER, 
                                IID_IWbemLocator, 
                                (LPVOID *)&pIWbemLocator);
if (SUCCEEDED(hres))
{
    IWbemServices *pSvc = NULL;
    hres = pIWbemLocator->ConnectServer(
        _bstr_t(L"ROOT\\CIMV2"), 
        NULL, 
        NULL, 
        0L, 
        NULL, 
        NULL, 
        NULL, 
        &pSvc
    );
    if (SUCCEEDED(hres))
    {
        // 设置 WMI 连接的安全等级
        hres = CoSetProxyBlanket(
            pSvc, 
            RPC_C_AUTHN_WINNT, 
            RPC_C_AUTHZ_NONE, 
            NULL, 
            RPC_C_AUTHN_LEVEL_CALL, 
            RPC_C_IMP_LEVEL_IMPERSONATE, 
            NULL, 
            EOAC_NONE
        );
    }
}
```

通过这种方式，应用程序可以灵活地使用 WMI 服务，并确保安全性。