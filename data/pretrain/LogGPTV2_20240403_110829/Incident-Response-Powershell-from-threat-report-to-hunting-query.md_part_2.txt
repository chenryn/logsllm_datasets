the *DeviceProcessEvents* would have been your best choice. First, we
filter most of the events by only selecting filenames that end with
.key. This filter is made first because it will improve the speed of the
query. parse_path will longer, thus with the filtered result only a
subset of the rows needs to be parsed to collect the RootPath and
DirectoryPath. The rest of the query filters only on file creations in
the \*C:\* directory.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
DeviceFileEvents
| where FileName endswith ".key"
| extend FolderDetails = parse_json(parse_path(FolderPath))
| extend RootPath = tostring(FolderDetails.RootPath), 
    DirectoryPath = tostring(FolderDetails.DirectoryPath)
| where RootPath == @"C:\" and DirectoryPath == "C:"
| project-reorder Timestamp, FolderPath, PreviousFileName
```
:::
![\*.key activities in root directory](/svg/loading.min.svg){.lazyload
data-src="/images/threat-report-to-hunting-query/CryptoKeys.png"
data-srcset="/images/threat-report-to-hunting-query/CryptoKeys.png, /images/threat-report-to-hunting-query/CryptoKeys.png 1.5x, /images/threat-report-to-hunting-query/CryptoKeys.png 2x"
data-sizes="auto"}
## Process Based Behaviors
Next up are the process-based behaviours, which are the most valuable of
all the indicators mentioned in the threat reports. This is also in some
essence shown in the tables containing the IOCs, the fidelity column
classifies all the commands as *high*. As could already be derived from
the name of this behaviour we need to have logs that relate to processes
and their creation, this can come in many forms, such as
DeviceProcessEvents, SecurityEvents or Syslog. The deriviced commandline
executions are listed below.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
wevtutil.exe cl system
wevtutil.exe cl security
wevtutil.exe cl application
vssadmin.exe delete shadows /all /quiet
vssadmin.exe list shadows
wmic.exe SHADOWCOPY /nointeractive
wmic.exe shadowcopy delete
bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures
bcdedit.exe /set {default} recoveryenabled no
rundll32 C:\Users\Public\adobelib.dll
cmd.exe /q /c taskkill /f /im sqlwriter.exe /im winmysqladmin.exe /im w3sqlmgr.exe /im sqlwb.exe 
    /im sqltob.exe /im sqlservr.exe /im sqlserver.exe /im sqlscan.exe /im sqlbrowser.exe 
    /im sqlrep.exe /im sqlmangr.exe /im sqlexp3.exe /im sqlexp2.exe /im sqlex
cmd.exe /q /c cd \ 1> \\127.0.0.1\admin$\__1698618133.54 2>&1
```
:::
To show the workings I have taken a subset of the commands mentioned
above and put them in a dynamic list, but to improve the results I have
not put the whole command in this list, only the variables. The
separation between the variable and the file that initiates the command
is done because the command line logs can differ for example
*"wevtutil.exe" cl system* will not be matched if I had put all the full
commands in the dynamic list. The second list is all the files that
initiate the commands, they are logged in a separate field and can
thereby be used as a filter, resulting in the query below.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let Commands = dynamic(['cl system','cl security', 'cl application', @'delete shadows /all /quiet', 
    'list shadows', @'shadowcopy /nointeractive', @'shadowcopy delete']);
let IntiatingFiles = dynamic(['wevtutil.exe', 'vssadmin.exe', 'wmic.exe', 'bcdedit.exe', 'rundll32.exe']);
DeviceProcessEvents
| where ProcessCommandLine contains "wevtutil.exe"
| where FileName in~ (IntiatingFiles)
| extend ToLowerProcessCommandLine = tolower(ProcessCommandLine)
| project ProcessCommandLine, FileName, DeviceName
```
:::
The commands that have been executed are quite specific therefore only
focussing on the commandlines mentioned above is not enough. For
example, if the ransomware operator wakes up one day and decides to run
*wevtutil.exe clean-log system* instead of *wevtutil.exe cl system* the
query above will not show any results. Therefore it is important to
further dive into every technique/process that is executed. Let's
discuss how you can do this by looking at the *wevtutil.exe* and
*taskkill* events.
#### Wevtutil.exe {#wevtutilexe}
Wevtutil is in this specific case used to clear event logs, this
activity is also classified within MITRE ATT&CK as *Indicator Removal:
Clear Windows Event Logs*
[(T1070.001)](https://attack.mitre.org/techniques/T1070/001/){target="_blank"
rel="noopener noreffer"} within the tactic Defense Evasion. Of course,
there are more ways to clear the event logs but these threat actors have
chosen this approach. A threat hunt to this particular technique can be
very interesting ;)!
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
wevtutil.exe cl system
wevtutil.exe cl security
wevtutil.exe cl application
```
:::
The first step is understanding how this specific technique is executed
and how the program that initiates the action operates. The [wevtutil
documentation](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil){target="_blank"
rel="noopener noreffer"} contains the following syntax which is relevant
for this particular technique, removing indicators:
``` {tabindex="0"}
{cl | clear-log} 
```
This allows us to not only hunt the *cl* execution but more importantly
also include *clear-log*. This results in the query mentioned below
([Link for more
context](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/WevtutilClearLogs.md){target="_blank"
rel="noopener noreffer"}). This combines the information that is
mentioned in the documentation, a command line must have wevtutil.exe
and cl or clear-log.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
DeviceProcessEvents
| extend ProcessCommandLineToLower =  tolower(ProcessCommandLine)
| where ProcessCommandLineToLower has "wevtutil.exe" and ProcessCommandLineToLower has_any ("cl", "clear-log")
| project-reorder Timestamp, DeviceName, AccountSid, ProcessCommandLine, InitiatingProcessCommandLine 
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Alerts alerts alerts
:::
::: details-content
::: admonition-content
Even though it was not the goal of this blog to determine how well
Defender For Endpoint was able to detect these ransomware activities, it
is good to see that many alerts have been triggered. Only processes
mentioned in the two #StopRansomware have been executed and that
resulted in all these alerts.
![Defender For Endpoint alerts](/svg/loading.min.svg){.lazyload
data-src="/images/threat-report-to-hunting-query/alerts.png"
data-srcset="/images/threat-report-to-hunting-query/alerts.png, /images/threat-report-to-hunting-query/alerts.png 1.5x, /images/threat-report-to-hunting-query/alerts.png 2x"
data-sizes="auto"}
:::
:::
:::
#### Taskkill
The last investigation for this blog is related to the taskkill commands
that are mentioned in the report. This is a very specific list of
executables that are killed. Note that all the tasks are related to some
SQL service, this is something we can use while developing a query. But
keep in mind that adversaries only need to change one parameter or leave
one out and you will not detect anything if you try to detect the full
command execution. To know exactly what taskkill can do we again take a
look at the
[documentation](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/taskkill){target="_blank"
rel="noopener noreffer"} to analyse the executed command, */f* is a
force parameter and */im* specifies the name of the process to kill.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
cmd.exe /q /c taskkill /f /im sqlwriter.exe /im winmysqladmin.exe /im w3sqlmgr.exe /im sqlwb.exe 
    /im sqltob.exe /im sqlservr.exe /im sqlserver.exe /im sqlscan.exe /im sqlbrowser.exe 
    /im sqlrep.exe /im sqlmangr.exe /im sqlexp3.exe /im sqlexp2.exe /im sqlex
```
:::
To ensure that we will still detect this behaviour, even though an
adversary might have changed the approach we start by defining which
logs are needed. As already mentioned above process behaviours are
related to commandline logs, thus we pick the *DeviceProcessEvents*
table. Also note that in this case cmd.exe is used, but the same command
without that part can be executed in PowerShell, be smarter than the
adversary and be critical of what to include and what to exclude in your
hunting query.
The query relies on two different variables as input, the
TotalKilledThreshold variable determines how many different processes
need to be killed, the example above contains 14 different processes
that are killed, by altering this variable you can also detect subsets
of the executed commandline. The TotalParametersThreshold variable
determines how many parameters have to be used in the commandline.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let TotalKilledThreshold = 10;
let TotalParametersThreshold = 10;
DeviceProcessEvents
| where FileName == "taskkill.exe"
| extend CommandLineParameters = split(ProcessCommandLine, " ")
| extend TotalParameters = array_length(CommandLineParameters)
// Extract allSQL related processes in the CommandLineParameters
| mv-apply KilledProcess = CommandLineParameters on (
    where KilledProcess contains "sql"
    | project KilledProcess
)
| summarize arg_max(Timestamp, *), AllKilledProcess = make_set(KilledProcess) by ReportId
| extend TotalKilledProcesses = array_length(AllKilledProcess)
| project-reorder Timestamp, ProcessCommandLine, TotalParameters, TotalKilledProcesses
| where TotalKilledProcesses >= TotalKilledThreshold and TotalParameters >= TotalParametersThreshold
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Hunt yourself!
:::
::: details-content
::: admonition-content
-   [Wevutil Clear Windows Event
    Logs](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/WevtutilClearLogs.md){target="_blank"
    rel="noopener noreffer"}
-   [Ransomware Behaviour Kill SQL
    Processes](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Threat%20Hunting/Behaviour%20-%20KillSQLProcesses.md){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
# Detecting Ransomware Threats
To strengthen your detection and/or hunting capabilities the [KQL
Repository](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules){target="_blank"
rel="noopener noreffer"} contains queries that can help you develop
those capabilities. This section will discuss some of those queries and
what value they could bring to your environment.
  KQL Query                                                                                                                                                                                                      Description                                                                                                                                                                                                                                                                                                                                                                                                             MITRE Technique

  [ASR Ransomware Trigger](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/ASR%20Rules/AsrRansomware.md){target="_blank" rel="noopener noreffer"}               This query detects when the ASR rule *AsrRansomwareBlocked* or *AsrRansomwareAudited* is triggered. MDE uses client and cloud heuristics to determine if a file resembles ransomware. This file could for example be the script that is used to encrypt files. No alert is generated by default by Defender For Endpoint, therefore it is recommended to create a custom detection rule to alert on this ASR trigger.   [T1486](https://attack.mitre.org/techniques/T1486/){target="_blank" rel="noopener noreffer"}
  [Ransomware Note Search](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Threat%20Hunting/Ransomware%20-%20APTNotesSHA1IOC.md){target="_blank" rel="noopener noreffer"}                 This query ingests SHA1 hashes of ransomware notes and searches in your environment if a match is found.                                                                                                                                                                                                                                                                                                                
  [Shadow Copy Deletion](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/ShadowCopyDeletion.md){target="_blank" rel="noopener noreffer"}                        This query detects when a known ransomware command is used to delete shadow copies. A shadow copy is a backup or snapshot of a system, and often deleted by ransomware groups.                                                                                                                                                                                                                                          [T1490](https://attack.mitre.org/techniques/T1490/){target="_blank" rel="noopener noreffer"}
  [Anomalous amount of SMB sessions](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/AnomalousSMBSessionsCreated.md){target="_blank" rel="noopener noreffer"}   This query is aimed to detect a host that performs SMB discovery by alerting if a device creates more then 100 (configurable) unique SMB sessions within 15 minutes. That is one of the characteristics of discovery/reconnaissance tools. The SMB sessions can be used to identify remote systems, which is often done to map the network.                                                                             [T1018](https://attack.mitre.org/techniques/T1018){target="_blank" rel="noopener noreffer"}
Happy hunting! 🏹
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [Threat Hunting: Encoded
    PowerShell](https://kqlquery.com/posts/hunting-encoded-powershell/){target="_blank"
    rel="noopener noreffer"}
-   [KQL Functions For Security
    Operations](https://kqlquery.com/posts/kql-for-security-operations/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
> **Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2023-11-29
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/from-threat-report-to-hunting-query/"
data-title="From Threat Report to (KQL) Hunting Query"
via="BertJanCyber"
hashtags="KQL"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/from-threat-report-to-hunting-query/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/from-threat-report-to-hunting-query/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/from-threat-report-to-hunting-query/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[KQL Functions For Network
Operations](/posts/kql-for-network-operations/ "KQL Functions For Network Operations"){.prev
rel="prev"} [Prioritize Vulnerabilities Using The CISA Known Exploited
Vulnerabilities
Catalog](/posts/prioritize-vulnerabilities-cisa/ "Prioritize Vulnerabilities Using The CISA Known Exploited Vulnerabilities Catalog"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::