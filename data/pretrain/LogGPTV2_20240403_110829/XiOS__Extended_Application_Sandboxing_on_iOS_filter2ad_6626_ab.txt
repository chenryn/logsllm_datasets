Figure 2: Dynamically invoking private APIs
invoke load-library to dynamically open a private framework,
and subsequently issue load-address to retrieve the address
of a private API and call it.
However, Apple prohibits any third-party application from
using load-library and load-address, thereby preventing at-
tempts to invoke private APIs. In the vetting process, one
can simply check whether the application contains place-
holders for these functions in the data section. On the other
hand, public frameworks (developed by Apple) are allowed
to use these functions. This leads to a confused deputy prob-
lem [20]: since third-party applications are allowed to load
public frameworks, they can potentially misuse them to call
a private API.
Figure 2 shows the general workﬂow of these attacks in de-
tail. The malicious application legitimately links to a public
framework (that uses load-library and load-address) and in-
vokes a public API for benign reasons. Hence, the dynamic
iOS loading process will populate the address of the public
API into the data section of the malicious application. This
allows the adversary to read out the address of the public
API at runtime by de-referencing the designated placeholder
in the data section (step 1). Eﬀectively, this reveals the run-
time location of the public API in memory. Based on this
runtime address the adversary can determine the location
of the two placeholders where the runtime addresses of load-
library and load-address are stored (step 2). This is possible,
because the relative oﬀset (i.e., distance) between the start
of the public API function and the two placeholders is con-
stant, and can be pre-computed prior to execution. Once
the adversary knows the address of load-library and load-
address, he can call these functions to dynamically load a
private framework of his choice and execute a private API
(step 3).
In summary, existing attacks against iOS application sand-
boxing require (i) the availability of a public framework that
necessarily uses dynamic loader functions load-library and
load-address, and (ii) two address de-reference operations:
one for the public API and another one for the address of
either load-library or load-address.
3. DEVELOPING IMPROVED ATTACKS
Recent attacks require a public framework that either
invokes load- library or load-address (as described in Sec-
tion 2.2). Our investigation showed that out of 319 avail-
able public frameworks only 25 use load-library and 36 load-
App ACodeDataApp BCodeDataPrivate FrameworksPublic FrameworksObjective-C RuntimeTrustedBSDMAC Kernel Module-Sandboxing -Privacy SettingsiOS UserAppleFramework 1Public APIsPrivateAPIs……Framework 2Private APIsAPPLICATIONLayerOBJECTIVE-CFramework LayerKERNELLayerKernelComponentsFile SystemNetwork…Sandboxing Profile 1Sandboxing Profile NApplicationCODEDATAPointer to Public APIMaliciousCodePublic FrameworkCODEDATAPointer to load-libraryPublic APIPointer to load-addressDynamic LoaderCODEDATAload-libraryload-addressPrivate FrameworkCODEDATAPrivate API123static distanceaddress. Hence, one theoretical approach to defend against
this attack is to rewrite some of the public frameworks and
disable dynamic loading for them. However, by system-
atically analyzing and reverse-engineering the lazy binding
mechanism used in iOS, we were able to launch the same
attacks without requiring the application to link to any of
the public frameworks. This not only signiﬁcantly reduces
the complexity of the attacks but also allows more general
attacks, because the mechanisms we exploit in our attacks
are by default enabled in every iOS application.
Speciﬁcally, we developed a simple iOS application using
the standard settings in Xcode (which is the main IDE for
iOS app development). By default, our application deploys
lazy binding mechanisms. We traced back at assembler and
binary-level2 how lazy binding is performed in iOS, and were
able to recognize that the lazy binding implementation is
vulnerable to even simpler attacks.
In general, lazy binding dynamically (and transparently
to the application) resolves the runtime address of a sym-
bol (e.g., an external function or variable) the ﬁrst time
it is used [2].
In contrast, non-lazy binding resolves all
the addresses of symbols once at application load-time. To
support lazy binding, iOS maintains two data sections in
iOS applications, one for non-lazy symbols and one for lazy
symbols. One important symbol that is always deﬁned in
the section for non-lazy symbols is the external function
dyld_stub_binder. This particular function realizes lazy
binding: it resolves the runtime address of an external func-
tion that is deﬁned in the lazy symbol section when it is
accessed for the ﬁrst time. Remarkably, this function is part
of the dynamic loader library, the same library that contains
load-library and load-address. Hence, an adversary can di-
rectly infer the address of the dynamic loader functions by
de-referencing the address of dyld_stub_binder from the
data section of the malicious application. Our improved at-
tack completely removes the operations and attack require-
ments for Step 2 in Figure 2.
Note that the de-referencing of dyld_stub_binder makes
no use of the string "dyld_stub_binder", making the at-
tack vector stealthy to static analysis methods. Its location
oﬀset inside the executable is statically precomputed using
binary analysis. A potential attack would use the computed
oﬀset to retrieve the address of dyld_stub_binder from its
location and then compute the address of load-library or
load-address. This can be achieved oﬄine due to the fact
that all three functions are stored within the same library.
In contrast to previous work on bypassing iOS sandbox-
ing [19, 35], our new attack does not require any speciﬁc
public frameworks to be loaded. We also reduce the nec-
essary attack steps: we only require a single address read
from the data section of the application. Our attack has
important implications: it can be applied to any iOS appli-
cation since lazy binding is currently used for all iOS appli-
cations. Hence, given a benign application that contains a
vulnerability, we can arbitrarily invoke private APIs using
return-oriented programming.
In order to show the eﬀectiveness of our new attack, we
have developed an application for iOS 7 that dynamically
invokes private APIs at runtime. We added to the applica-
tion malicious code that can be used at runtime to derive
the address of the private createScreenIOSurface API from
2using the Xcode debugger and IDAPro as disassembler
Figure 3: General approach and workﬂow of XiOS
the UIWindow class. Similar to previous attacks, our attack
is triggered remotely, and continuously takes snapshots and
sends them to a remote server controlled by us. We obfus-
cated and submitted our application to the App Store, and
successfully passed the vetting process. Hence, our mali-
cious app can still invoke private APIs in a stealthy manner
without being detected by the vetting process using less de-
referencing actions than existing attacks. The application
was installed only on our testing device and then removed
from the App Store. Moreover, we also stopped the server
which remotely triggered the attack.
4. OUR DEFENSE SERVICE XiOS
Mitigation of attacks against iOS sandboxing and, in par-
ticular our new attacks, is a challenging task due to sev-
eral reasons: First, the attacks are based on exploiting lazy
binding which is enabled by default on iOS due to perfor-
mance reasons and cannot be simply disabled. Second, pub-
lic frameworks are tightly coupled to private frameworks.
Removing this interdependency would induce heavy design
changes. Third, iOS is closed-source preventing direct ex-
tensions of the operating system with a reference monitor
for private APIs.
In this section, we introduce the requirements on XiOS
describe its workﬂow and system model, its components,
and the corresponding security aspects. Finally, we discuss
real-world deployment scenarios for XiOS.
4.1 Requirements and Assumptions
Given the above mentioned challenges, a defense tool needs
to meet the following functional and security requirements:
R1: Preserve the beneﬁts and eﬃciency features. In partic-
ular, mechanisms such as lazy binding should further
be in place.
R2: Require no changes to the operating system and cur-
rent software stack architecture of iOS. In particular,
we need to ensure that private APIs are still accessible
from public frameworks.
R3: Require no application’s source code. Typically, the
source code of iOS applications is not available, even
XiOSApp Hardening ServiceDeveloperAppDeveloperPolicyoptionalApp*Implant Reference MonitorIntegrate Developer-Defined PoliciesEnd UserDevelop15Define2Compile3Submit for Review467Publish8Down-loadApple’s App Store only retrieves an application as a
binary bundle.
R4: Integrate seamlessly into the existing application de-
velopment and distribution process of iOS. In particu-
lar no jailbreak of the user’s device is needed.
S1: Prevent (previous) attacks on iOS sandboxing [19, 35],
and our novel attack (Section 3).
S2: The malicious application cannot bypass or disable our
reference monitor (see Section 4.4).
We build our defense on the following assumptions:
A1: We assume that the target system enforces the prin-
ciple of non-executable memory. Otherwise, an adver-
sary could revert our security checks and circumvent
our defense. As mentioned in Section 2.1, iOS deploys
a very strict version of non-executable memory.
A2: Since our defense operates at application-level (due to
R2), we obviously assume the underlying operating
system kernel to be benign and not compromised.
A3: An adversary is not able to statically pre-compute the
address of a private API or a critical function such as
load-library and load-address. This is ensured by iOS
since it applies ASLR to shared libraries.
4.2 System Model
As mentioned above (S1), the main goal of our solution is
to prohibit the invocation of any private API from a third-
party app to prevent attacks against app sandboxing. At
the same time, we need to ensure that public frameworks
can still access private APIs. Moreover, we generalize our
design to enable ﬁne-grained access control rules on pub-
lic APIs. Our new hardening service XiOS achieves both
(i) preventing invocations of private APIs, and (ii) enforcing
developer-deﬁned ﬁne-grained access control rules on public
APIs.
The workﬂow of XiOS is depicted in Figure 3. Our hard-
ening service seamlessly integrates into Apple’s application
development process: after the developer has ﬁnished pro-
gramming the app and compiling it (Step 1 and 2), the ap-
plication is submitted to our hardening service via a web
browser (Step 3). Next, the hardening process implants the
XiOS reference monitor and some additional startup code
into the application. The reference monitor and the startup
code will hide traces of external API addresses including the
address of dyld_stub_binder. Moreover, if the developer
appended a policy for public APIs, we also embed these poli-
cies into the application (Step 4). To accomplish these tasks,
XiOS makes use of binary instrumentation techniques (R3).
Finally, the app is submitted to the App Store and can be
later installed on users’ devices (Step 6 to 8).
Our service always implants the reference monitor to pre-
vent invocation of private APIs through the dynamic loader.
In addition, it allows the developer to optionally append a
custom policy for public APIs (Step 5). For instance, one
could deﬁne a policy that restricts a messenger app (e.g.,
WhatsApp) to only upload a subset of the address book
to the app server (due to privacy reasons). For this, we
support diﬀerent policy enforcement options: allow, deny,
log or modify. In particular, the modify option allows the
Figure 4: Instrumented XiOS App
replacement of the arguments passed to an external func-
tion and public API return values. Deﬁning such policies
is tightly coupled to the application purpose and its target
users. Enterprises can integrate XiOS within their mobile
device management (MDM) systems and harden all appli-
cations before they are deployed on employees’ (personal)
devices. Hence, enforcement of privacy-related policies can
protect a company from being legally held responsible for
information leakage [33].
It is also possible that an end-user submits an existing app
to our service along with policies she desires to be enforced
on that app. However, post-changes on existing apps would
change the hash value of the application. This would imply
re-submission to Apple’s App Store to retrieve an updated
Apple certiﬁcation. Hence, the main purpose of XiOS is
app hardening for both vulnerable benign and potentially
malicious apps before Apple signs and uploads the app on
the App Store.
4.3 Architecture
The high-level idea of XiOS app instrumentation is de-
picted in Figure 4. XiOS is directly implanted into the orig-
inal iOS application (R2 and R4) and mainly contains a ref-
erence monitor that mediates all access requests of an appli-
cation to an external library. The idea is here to completely
hide public API calls and the dyld_stub_binder address
from the app and redirect these requests to the reference
monitor which is the only component that knows and can
retrieve the runtime addresses of external functions.
There are three binary sections which are of particular
interest: (1) the main app code section, (2) the so-called
symbol stub code section, and (3) a data section where the
lazy and non-lazy symbol pointers are stored. These sections
correspond to the following iOS Mach-O binary sections:
__text for the main app code, __symbol_stub for the sym-
bol code section, __la_symbol_table and __nl_symbol_table
for the lazy and non-lazy symbol data section.
Typically, when an iOS application attempts to invoke an
external library function (i.e., a public API), the compiler
will insert a dedicated stub for the desired function in the
code stub section. Hence, the originating call to that exter-
nal function eﬀectively redirects the control-ﬂow to the stub
code section, e.g., a call to stub API1 or stub API2 in Fig-
ApplicationXiOSApp CodeStub Code (instrumented by XiOS)Shadow Table(Lazy and non-lazy symbols)Reference MonitorLazy and Non-Lazy SymbolsCALL stub_API1CALL stub_API2stub_API1:CALL XiOSstub_API2:CALL XiOSCHECK PolicyJUMP toAPIDeveloper(Optional)DeveloperPolicyure 4. The stub code reads out the runtime address of the
external function in either the lazy or non-lazy symbol data
section. When the runtime address of the external func-
tion is not yet known, the stub code will ask the dynamic
loader to resolve the runtime address and eventually invoke
the external function.
To prevent exploitation of the lazy binding process and the
leakage of important runtime addresses, we instrument the
stub code section and remove its connection to the lazy sym-
bol section. To this end, XiOS creates a duplicate of the lazy
and non-lazy symbol section in a dedicated memory area de-
noted as shadow table. It also overwrites the original section
with zeroes. In addition, we instrument each stub entry so
that it always invokes our XiOS reference monitor when an
external function is called. Thus, we ensure that all calls to
external functions are redirected to our reference monitor,
and simultaneously guarantee that a malicious application
cannot read runtime addresses from the lazy and non-lazy
symbol sections to launch attacks against app sandboxing.
Upon invocation, the reference monitor of XiOS performs
as follows: ﬁrst, it determines which external function the
application attempts to execute. This is achieved by looking
up the corresponding entry in the duplicate of the lazy and
non-lazy symbol section. Next, it performs a policy check.