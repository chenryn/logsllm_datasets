# 四、发布映像
在前一章中，您学习了如何构建 Docker 映像。下一个合乎逻辑的步骤是将这些映像发布到公共存储库中，供公众发现和使用。所以，这一章的重点是在 Docker Hub 上发布映像，以及如何充分利用 Docker Hub。我们将创建一个新的 Docker 映像，使用`commit`命令和一个`Dockerfile`，在其上构建，并将其推送到 Docker Hub。将讨论 Docker 可信存储库的概念。这个 Docker 受信任的存储库是从 GitHub 或 Bitbucket 创建的，然后它可以与 Docker Hub 集成，根据存储库中的更新自动构建映像。GitHub 上的这个存储库用来存储先前创建的`Dockerfile`。此外，我们将说明全球组织如何使他们的开发团队能够制作和贡献各种各样的 Docker 映像，并将其存放在 Docker Hub 中。Docker Hub REST APIs 可用于用户管理和以编程方式操作存储库。
本章涵盖以下主题:
*   了解 Docker 集线器
*   将映像推送到 Docker 集线器
*   映像的自动构建
*   Docker 集线器上的私有存储库
*   在 Docker 中心创建组织
*   Docker 集线器 REST API
## 了解 Docker 集线器
Docker Hub 是用于将 Docker 映像保存在公共或私有存储库中的中心位置。Docker Hub 提供了一些功能，例如 Docker 映像的存储库、用户身份验证、自动化映像构建、与 GitHub 或 Bitbucket 的集成以及管理组织和组。Docker Hub 的 Docker 注册表组件管理 Docker 映像的存储库。此外，您可以使用 Docker 安全扫描来保护您的存储库，该扫描目前是免费的。这个特性最初是在 IBM 容器存储库中启用的。
Docker 注册表是用于存储映像的存储系统。自动构建是 Docker Hub 的一个特性，在撰写本书时，它还不是开源的。下图显示了典型特征:
![](img/image_04_001.jpg)
为了使用 Docker Hub，您必须向 Docker Hub 注册，并使用[https://hub.docker.com/](https://hub.docker.com/)提供的链接创建一个帐户。您可以更新 Docker Hub ID、电子邮件地址和密码字段，如下图所示:
![](img/image_04_002.jpg)
完成注册过程后，您需要完成通过电子邮件收到的验证。电子邮件验证完成后，当您登录 Docker Hub 时，您将看到类似于以下屏幕截图的内容:
![](img/image_04_003.jpg)
在 Docker Hub 中创建账户已成功完成，现在您可以从[https://hub.docker.com/login/](https://hub.docker.com/login/)登录到您的 Docker Hub 账户，如下图截图所示:
![](img/image_04_004.jpg)
Docker Hub 还支持使用 Ubuntu 终端对 Docker Hub 进行命令行访问:
```
$ sudo docker login  
```
使用您的 Docker ID 登录，从 Docker Hub 推送和拉取映像。如果您没有 Docker 编号，请前往[https://hub.docker.com](https://hub.docker.com)创建一个。在终端中输入您的用户名和密码:
```
Username: vinoddandy
Password: 
```
成功登录后，输出如下:
```
Login Succeeded
```
您可以在[https://hub.docker.com/explore/](https://hub.docker.com/explore/)的 Docker Hub 中浏览可用映像，如下所示:
![](img/image_04_005.jpg)
此外，您可以查看您的设置，更新您的个人资料，并获得受支持社区的详细信息，如推特、栈溢出、#IRC、谷歌群组和 GitHub。
## 将映像推送到 Docker 集线器
这里，我们将在本地机器上创建一个 Docker 映像，并将此映像推送到 Docker Hub。您需要在本节中执行以下步骤:
1.  通过执行以下操作之一，在本地计算机上创建 Docker 映像:
*   使用`docker commit`子命令
*   使用带有`Dockerfile`的`docker commit`子命令
2.  将此创建的映像推送到 Docker Hub
3.  从 Docker 集线器中删除映像
我们将使用`ubuntu`基础映像，运行容器，添加一个新目录和一个新文件，然后创建一个新映像。在[第 3 章](03.html)、*建筑形象*中，我们看到了如何使用`Dockerfile`创建 Docker 形象。你可以参考那一章来查看`Dockerfile`语法的细节。
我们将从基础`ubuntu`映像运行名为`containerforhub`的容器，如下面的终端代码所示:
```
$ sudo docker run -i --name="containerforhub" -t ubuntu /bin/bash 
Unable to find image 'ubuntu:latest' locally 
latest: Pulling from library/ubuntu 
952132ac251a: Pull complete 
Digest: sha256:f4691c96e6bbaa99d99ebafd9af1b68ace2aa2128ae95a60369c506dd6e6f6ab 
Status: Downloaded newer image for ubuntu:latest 
root@1068a1fae7da:/#  
```
接下来，我们将在`containerforhub`容器中创建新的目录和文件。我们还将使用一些示例文本更新新文件，以便稍后测试:
```
root@1068a1fae7da:/# mkdir mynewdir 
root@1068a1fae7da:/# cd mynewdir 
root@1068a1fae7da:/mynewdir# echo 'this is my new container to make image and then push to hub' > mynewfile 
root@1068a1fae7da:/mynewdir# cat mynewfile 
this is my new container to make image and then push to hub 
root@1068a1fae7da:/mynewdir# 
```
让我们用刚刚创建的容器中的`docker commit`命令构建新的映像。
The `commit` command will be executed from the host machine, from where the container is running, and not from inside this container:
```
$ sudo docker commit -m="NewImage for second edition" containerforhub vinoddandy/imageforhub2 
sha256:619a25519578b0525b4c098e3d349288de35986c1f3510958b6246fa5d3a3f56 
```
您应该使用自己的 Docker Hub 用户名代替`vinoddandy`来创建映像。
现在，我们在本地机器上有了一个名为`vinoddandy/imageforhub2`的新 Docker 映像。此时，带有`mynewdir`和`mynewfile`的新映像在本地创建:
```
$ sudo docker images -a 
REPOSITORY TAG IMAGE ID CREATED SIZE 
vinoddandy/imageforhub2 latest 619a25519578 
2 minutes ago 126.6 MB 
```
我们将使用`sudo docker login`命令登录 Docker Hub，如本章前面所述。
让我们将此映像从主机推送到 Docker Hub:
```
$ sudo docker push vinoddandy/imageforhub2 
The push refers to a repository [docker.io/vinoddandy/imageforhub2] 
0ed7a0595d8a: Pushed 
0cad5e07ba33: Mounted from library/ubuntu 
48373480614b: Mounted from library/ubuntu 
latest: digest: sha256:cd5a86d1b26ad156b0c74b0b7de449ddb1eb51db7e8ae9274307d27f810280c9 size: 1564 
```
现在，我们将登录到 Docker Hub，并在存储库中验证该映像。
为了测试 Docker Hub 中的映像，让我们从本地机器中删除这个映像。要删除映像，首先我们需要停止容器，然后删除容器:
```
$ sudo docker stop containerforhub 
$ sudo docker rm containerforhub 
```
我们也将删除`vinoddandy/imageforhub2`映像:
```
$ sudo docker rmi vinoddandy/imageforhub2
Untagged: vinoddandy/imageforhub2:latest 
Untagged: vinoddandy/imageforhub2@sha256:cd5a86d1b26ad156b0c74b0b7de449ddb1eb51db7e8ae9274307d27f810280c9 
Deleted: sha256:619a25519578b0525b4c098e3d349288de35986c1f3510958b6246fa5d3a3f56 
```
我们将从 Docker Hub 中提取新创建的映像，并在本地机器上运行新的容器:
```
$ sudo docker run -i --name="newcontainerforhub" -t \ vinoddandy/imageforhub2 /bin/bash 
Unable to find image 'vinoddandy/imageforhub2:latest' locally 
latest: Pulling from vinoddandy/imageforhub2 
952132ac251a: Already exists 
82659f8f1b76: Already exists 
Digest: sha256:cd5a86d1b26ad156b0c74b0b7de449ddb1eb51db7e8ae9274307d27f810280c9 
Status: Downloaded newer image for vinoddandy/imageforhub2:latest 
root@9dc6df728ae9:/# cat /mynewdir/mynewfile 
this is my new container to make image and then push to hub 
root@9dc6df728ae9::/# 
```
因此，我们从 Docker Hub 中提取了最新的映像，并用新的`vinoddandy/imageforhub2`映像创建了容器。请注意，`Unable to find image 'vinoddandy/imageforhub2:latest' locally`消息确认映像是从 Docker Hub 的远程存储库中下载的。
`mynewfile`中的文字验证是之前创建的同一个映像。
最后，我们将在[https://hub.docker.com/r/vinoddandy/imageforhub2/](https://hub.docker.com/r/vinoddandy/imageforhub/)从 Docker Hub 删除映像，然后点击设置，然后删除，如下图截图所示:
![](img/image_04_006.jpg)
我们将再次创建这个映像，但是现在使用`Dockerfile`过程。因此，让我们使用[第 3 章](03.html)、*构建映像*中解释的`Dockerfile`概念来创建 Docker 映像，并将此映像推送到 Docker Hub。
本地机器上的`Dockerfile`如下:
```
########################################### 
# Dockerfile to build a new image 
########################################### 
# Base image is Ubuntu 
FROM ubuntu:16.04 
# Author: Dr. Peter 
MAINTAINER Dr. Peter  
# create 'mynewdir' and 'mynewfile' 
RUN mkdir mynewdir 
RUN touch /mynewdir/mynewfile 
# Write the message in file 
   RUN echo 'this is my new container to make image and then push to hub'  
 >/mynewdir/mynewfile 
```
现在，我们将使用以下命令在本地构建映像:
```
$ sudo docker build -t="vinoddandy/dockerfileimageforhub1" .
Sending build context to Docker daemon 16.74 MB
Step 1 : FROM ubuntu:16.04
16.04: Pulling from library/ubuntu
862a3e9af0ae: Pull complete 
7a1f7116d1e3: Pull complete 
Digest: sha256:5b5d48912298181c3c80086e7d3982029b288678fccabf2265899199c24d7f89
Status: Downloaded newer image for ubuntu:16.04
---> 4a725d3b3b1c
Step 2 : MAINTAINER Dr. Peter 
---> Running in 5be5edc9b970
---> 348692986c9b
Removing intermediate container 5be5edc9b970
Step 3 : RUN mkdir mynewdir
---> Running in ac2fc73d75f3
---> 21585ffffab5
Removing intermediate container ac2fc73d75f3
Step 4 : RUN touch /mynewdir/mynewfile
---> Running in c64c98954dd3
---> a6304b678ea0
Removing intermediate container c64c98954dd3
Step 5 : RUN echo 'this is my new container to make image and then push to hub' > /mynewdir/mynewfile
---> Running in 7f6d087e29fa
---> 061944a9ba54
Removing intermediate container 7f6d087e29fa
Successfully built 061944a9ba54  
```
我们将使用此映像运行容器，如下所示:
```
$ sudo docker run -i --name="dockerfilecontainerforhub" -t vinoddandy/dockerfileimageforhub1 /bin/bash 
root@236bfb39fd48:/# cat /mynewdir/mynewfile 
this is my new container to make image and then push to hub 