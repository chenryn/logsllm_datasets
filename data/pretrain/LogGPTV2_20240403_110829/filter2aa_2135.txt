# 滴滴出行：基于符号执行的反混淆方法研究
演讲人：糜波  
2019年

## 目录
- **PART 01** 混淆框架简介
- **PART 02** 混淆技术原理
- **PART 03** 反混淆技术原理
- **PART 04** 后续工作

---

### PART 01: 混淆框架简介
- **OLLVM开源项目**  
  OLLVM（Obfuscator-LLVM）是一个基于LLVM的开源代码混淆工具，该项目由瑞士西北应用科技大学于2010年6月发起。其主要目标是通过增加逆向工程的难度来保护软件代码的安全性。
- **LLVM编译器框架**  
  LLVM是一款开源的编译器基础设施，旨在提供一个可扩展且高效的编译环境，以替代传统上与系统紧密耦合的GCC编译器。LLVM架构分为三个主要部分：
  - 高级语言解析
  - 中间表示（IR）处理
  - 目标机器码生成
  
  其中，高级语言支持包括但不限于C/C++和Objective-C等；目标平台则覆盖了x86、ARM及MIPS等多种架构。在这些基础上，OLLVM实现了对中间表示层的扩展以实现代码混淆功能。

---

### PART 02: 混淆技术原理
- **OLLVM 4.0 主要混淆特性**
  1. **控制流平坦化**  
     将程序中的条件分支转换为一系列无条件跳转语句，并使用单一的块变量来决定实际执行路径。
  2. **虚假控制流**  
     通过插入不透明谓词（例如`y < 10 || x * (x + 1) % 2 == 0`）来创建看似合理但实际上不影响程序逻辑的新分支。
  3. **指令替换**  
     对基本算术运算符进行等价变换，如将加法操作`a = b + c`替换为`a = b - (-c)`或其他更复杂的表达式组合。

---

### PART 03: 反混淆技术原理
- **符号执行引擎概述**
  符号执行是一种静态分析方法，它利用符号而非具体数值作为输入来进行程序模拟，并通过约束求解器来验证或推导出满足特定条件的状态。
- **去流程平坦化策略**
  采用递归算法从序言块开始追踪所有可能的真实执行路径，直至找到所有的后继节点为止。对于复杂情况，则需要结合人工干预来指定关键分发器的位置。
- **寻找基本块的方法**
  根据不同的场景选择合适的搜索策略，比如直接识别主分发器或者手动标注重要位置等。
- **输出形式**
  可以选择生成补丁文件直接修改汇编代码，或者导出GDL格式供进一步可视化分析使用。

---

### PART 04: 后续工作展望
- 改进现有输出格式，使其更加便于阅读和引用；
- 开发适用于IDA Pro Hex-Rays插件的功能，以便直接修改反汇编后的C树结构；
- 探索更多高效稳定的指令修补方案，解决当前存在的技术难题；
- 最终目标是能够完全恢复被混淆过的原始源代码状态。

感谢您的关注！  
演讲人：糜波