password-hashing scheme like Scrypt to store user passwords.
 All significant operations on the system should be recorded in an audit log,
including details of who performed the action, when, and whether it was
successful.
 Enforce access control after authentication. ACLs are a simple approach to
enforcing permissions.
 Avoid privilege escalation attacks by considering carefully which users can grant
permissions to other users.
Part 2
Token-based authentication
Token-based authentication is the dominant approach to securing APIs,
with a wide variety of techniques and approaches. Each approach has different
trade-offs and are suitable in different scenarios. In this part of the book, you’ll
examine the most commonly used approaches.
 Chapter 4 covers traditional session cookies for first-party browser-based apps
and shows how to adapt traditional web application security techniques for use
in APIs.
 Chapter 5 looks at token-based authentication without cookies using the
standard Bearer authentication scheme. The focus in this chapter is on building
APIs that can be accessed from other sites and from mobile or desktop apps.
 Chapter 6 discusses self-contained token formats such as JSON Web Tokens.
You’ll see how to protect tokens from tampering using message authentication
codes and encryption, and how to handle logout.
101
Session cookie
authentication
So far, you have required API clients to submit a username and password on every
API request to enforce authentication. Although simple, this approach has several
downsides from both a security and usability point of view. In this chapter, you’ll
learn about those downsides and implement an alternative known as token-based
authentication, where the username and password are supplied once to a dedicated
login endpoint. A time-limited token is then issued to the client that can be used in
place of the user’s credentials for subsequent API calls. You will extend the Natter
API with a login endpoint and simple session cookies and learn how to protect
those against Cross-Site Request Forgery (CSRF) and other attacks. The focus of
this chapter is authentication of browser-based clients hosted on the same site as
the API. Chapter 5 covers techniques for clients on other domains and non-
browser clients such as mobile apps.
This chapter covers
 Building a simple web-based client and UI
 Implementing token-based authentication
 Using session cookies in an API
 Preventing cross-site request forgery attacks
102
CHAPTER 4
Session cookie authentication
DEFINITION
In token-based authentication, a user’s real credentials are pre-
sented once, and the client is then given a short-lived token. A token is typically
a short, random string that can be used to authenticate API calls until the
token expires.
4.1
Authentication in web browsers
In chapter 3, you learned about HTTP Basic authentication, in which the username and
password are encoded and sent in an HTTP Authorization header. An API on its own is
not very user friendly, so you’ll usually implement a user interface (UI) on top. Imagine
that you are creating a UI for Natter that will use the API under the hood but create a
compelling web-based user experience on top. In a web browser, you’d use web technol-
ogies such as HTML, CSS, and JavaScript. This isn’t a book about UI design, so you’re
not going to spend a lot of time creating a fancy UI, but an API that must serve web
browser clients cannot ignore UI issues entirely. In this first section, you’ll create a very
simple UI to talk to the Natter API to see how the browser interacts with HTTP Basic
authentication and some of the drawbacks of that approach. You’ll then develop a more
web-friendly alternative authentication mechanism later in the chapter. Figure 4.1 shows
the rendered HTML page in a browser. It’s not going to win any awards for style, but it
gets the job done. For a more in-depth treatment of the nuts and bolts of building UIs
in JavaScript, there are many good books available, such as Michael S. Mikowski and
Josh C. Powell’s excellent Single Page Web Applications (Manning, 2014).
4.1.1
Calling the Natter API from JavaScript
Because your API requires JSON requests, which aren’t supported by standard HTML
form controls, you need to make calls to the API with JavaScript code, using either the
older XMLHttpRequest object or the newer Fetch API in the browser. You’ll use the
Fetch interface in this example because it is much simpler and already widely sup-
ported by browsers. Listing 4.1 shows a simple JavaScript client for calling the Natter
API createSpace operation from within a browser. The createSpace function takes
the name of the space and the owner as arguments and calls the Natter REST API
using the browser Fetch API. The name and owner are combined into a JSON body,
and you should specify the correct Content-Type header so that the Natter API doesn’t
Figure 4.1
A simple web UI 
for creating a social space 
with the Natter API
103
Authentication in web browsers
reject the request. The fetch call sets the credentials attribute to include, to ensure
that HTTP Basic credentials are set on the request; otherwise, they would not be, and
the request would fail to authenticate.
 To access the API, create a new folder named public in the Natter project, under-
neath the src/main/resources folder. Inside that new folder, create a new file called
natter.js in your text editor and enter the code from listing 4.1 and save the file. The
new file should appear in the project under src/main/resources/public/natter.js.
const apiUrl = 'https://localhost:4567';
function createSpace(name, owner) {
    let data = {name: name, owner: owner};
    fetch(apiUrl + '/spaces', {    
        method: 'POST',
        credentials: 'include',
        body: JSON.stringify(data),              
        headers: {                               
            'Content-Type': 'application/json'   
        }
    })
    .then(response => {
        if (response.ok) {                      
            return response.json();             
        } else {                                
            throw Error(response.statusText);   
        }
    })
    .then(json => console.log('Created space: ', json.name, json.uri))
    .catch(error => console.error('Error: ', error));}
The Fetch API is designed to be asynchronous, so rather than returning the result of
the REST call directly it instead returns a Promise object, which can be used to regis-
ter functions to be called when the operation completes. You don’t need to worry
about the details of that for this example, but just be aware that everything within the
.then(response => . . . ) section is executed if the request completed successfully,
whereas everything in the .catch(error => . . . ) section is executed if a network
error occurs. If the request succeeds, then parse the response as JSON and log the
details to the JavaScript console. Otherwise, any error is also logged to the console.
The response.ok field indicates whether the HTTP status code was in the range 200–
299, because these indicate successful responses in HTTP.
 Create a new file called natter.html under src/main/resources/public, alongside
the natter.js file you just created. Copy in the HTML from listing 4.2, and click Save.
The HTML includes the natter.js script you just created and displays the simple
HTML form with fields for typing the space name and owner of the new space to be
created. You can style the form with CSS if you want to make it a bit less ugly. The CSS
Listing 4.1
Calling the Natter API from JavaScript
Use the Fetch API to call 
the Natter API endpoint.
Pass the request data as 
JSON with the correct 
Content-Type.
Parse the response 
JSON or throw an error 
if unsuccessful.
104
CHAPTER 4
Session cookie authentication
in the listing just ensures that each form field is on a new line by filling up all remain-
ing space with a large margin.
    Natter!
    Create Space
      Space name: 
      Owner: 
      Create
4.1.2
Intercepting form submission
Because web browsers do not know how to submit JSON to a REST API, you need to
instruct the browser to call your createSpace function when the form is submitted
instead of its default behavior. To do this, you can add more JavaScript to intercept
the submit event for the form and call the function. You also need to suppress the
default behavior to prevent the browser trying to directly submit the form to the server.
Listing 4.3 shows the code to implement this. Open the natter.js file you created ear-
lier in your text editor and copy the code from the listing into the file after the exist-
ing createSpace function. 
 The code in the listing first registers a handler for the load event on the window
object, which will be called after the document has finished loading. Inside that event
handler, it then finds the form element and registers a new handler to be called when
the form is submitted. The form submission handler first suppresses the browser
default behavior, by calling the .preventDefault() method on the event object, and
then calls your createSpace function with the values from the form. Finally, the func-
tion returns false to prevent the event being further processed.
window.addEventListener('load', function(e) {            
    document.getElementById('createSpace')               
        .addEventListener('submit', processFormSubmit);  
});
Listing 4.2
The Natter UI HTML
Listing 4.3
Intercepting the form submission
Include the 
natter.js script 
file.
Style the form as 
you wish using CSS.
The HTML form has an ID 
and some simple fields.
When the document 
loads, add an event 
listener to intercept 
the form submission.
105
Authentication in web browsers
function processFormSubmit(e) {
    e.preventDefault();      
    let spaceName = document.getElementById('spaceName').value;
    let owner = document.getElementById('owner').value;
    createSpace(spaceName, owner);    
    return false;
}
4.1.3
Serving the HTML from the same origin
If you try to load the HTML file directly in your web browser from the file system to try
it out, you’ll find that nothing happens when you click the submit button. If you open
the JavaScript Console in your browser (from the View menu in Chrome, select Devel-
oper and then JavaScript Console), you’ll see an error message like that shown in fig-
ure 4.2. The request to the Natter API was blocked because the file was loaded from a
URL that looks like file:/ / /Users/neil/natter-api/src/main/resources/public/natter
.api, but the API is being served from a server on https:/ /localhost:4567/. 
By default, browsers allow JavaScript to send HTTP requests only to a server on the
same origin that the script was loaded from. This is known as the same-origin policy
(SOP) and is an important cornerstone of web browser security. To the browser, a file
URL and an HTTPS URL are always on different origins, so it will block the request.
In chapter 5, you’ll see how to fix this with cross-origin resource sharing (CORS), but
for now let’s get Spark to serve the UI from the same origin as the Natter API.
DEFINITION
The origin of a URL is the combination of the protocol, host, and
port components of the URL. If no port is specified in the URL, then a
default port is used for the protocol. For HTTP the default port is 80, while
for HTTPS it is 443. For example, the origin of the URL https://www.google
.com/search has protocol = https, host = www.google.com, and port = 443.
Two URLs have the same origin if the protocol, host, and port all exactly
match each other.
Suppress the default 
form behavior.
Call our API function with 
values from the form.
Figure 4.2
An error message in the JavaScript console when loading the HTML page directly. The request was 
blocked because the local file is considered to be on a separate origin to the API, so browsers will block the 
request by default.
106
CHAPTER 4
Session cookie authentication
To instruct Spark to serve your HTML and JavaScript files, you add a staticFiles
directive to the main method where you have configured the API routes. Open
Main.java in your text editor and add the following line to the main method. It must
come before any other route definitions, so put it right at the start of the main
method as the very first line:
  Spark.staticFiles.location("/public");
The same-origin policy
The same-origin policy (SOP) is applied by web browsers to decide whether to allow
a page or script loaded from one origin to interact with other resources. It applies
when other resources are embedded within a page, such as by HTML  or
 tags, and when network requests are made through form submissions or
by JavaScript. Requests to the same origin are always allowed, but requests to a dif-
ferent origin, known as cross-origin requests, are often blocked based on the policy.
The SOP can be surprising and confusing at times, but it is a critical part of web secu-
rity so it’s worth getting familiar with as an API developer. Many browser APIs avail-
able to JavaScript are also restricted by origin, such as access to the HTML document
itself (via the document object model, or DOM), local data storage, and cookies. The
Mozilla Developer Network has an excellent article on the SOP at https://developer
.mozilla.org/en-US/docs/Web/Security/Same-origin_policy.
Broadly speaking, the SOP will allow many requests to be sent from one origin to
another, but it will stop the initiating origin from being able to read the response.
For example, if a JavaScript loaded from https:/ /www .alice.com makes a POST
request to http:/ /bob.net, then the request will be allowed (subject to the condi-
tions described below), but the script will not be able to read the response or even
see if it was successful. Embedding a resource using a HTML tag such as ,
, or  is generally allowed, and in some cases, this can reveal
some information about the cross-origin response to a script, such as whether the
resource exists or its size.
Only certain HTTP requests are permitted cross-origin by default, and other requests
will be blocked completely. Allowed requests must be either a GET, POST, or HEAD
request and can contain only a small number of allowed headers on the request, such
as Accept and Accept-Language headers for content and language negotiation. A
Content-Type header is allowed, but only three simple values are allowed:
 application/x-www-form-urlencoded
 multipart/form-data
 text/plain
These are the same three content types that can be produced by an HTML form ele-
ment. Any deviation from these rules will result in the request being blocked. Cross-
origin resource sharing (CORS) can be used to relax these restrictions, as you’ll learn
in chapter 5.
107
Authentication in web browsers
This instructs Spark to serve any files that it finds in the src/main/java/resources/
public folder. 
TIP
Static files are copied during the Maven compilation process, so you will
need to rebuild and restart the API using mvn clean compile exec:java to
pick up any changes to these files.
Once you have configured Spark and restarted the API server, you will be able to
access the UI from https:/ /localhost:4567/natter.html. Type in any value for the new
space name and owner and then click the Submit button. Depending on your browser,
you will be presented with a screen like that shown in figure 4.3 prompting you for a
username and password. 
So, where did this come from? Because your JavaScript client did not supply a user-
name and password on the REST API request, the API responded with a standard
HTTP 401 Unauthorized status and a WWW-Authenticate header prompting for
authentication using the Basic scheme. The browser understands the Basic authenti-
cation scheme, so it pops up a dialog box automatically to prompt the user for a user-
name and password. 
 Create a user with the same name as the space owner using curl at the command
line if you have not already created one, by running:
curl -H 'Content-Type: application/json' \
    -d '{"username":"test","password":"password"}'\
    https://localhost:4567/users
and then type in the name and password to the box, and click Sign In. If you check
the JavaScript Console you will see that the space has now been created. 
Figure 4.3
Chrome prompt for username and password produced automatically 
when the API asks for HTTP Basic authentication
108
CHAPTER 4
Session cookie authentication
 If you now create another space, you will see that the browser doesn’t prompt for the
password again but that the space is still created. Browsers remember HTTP Basic cre-
dentials and automatically send them on subsequent requests to the same URL path
and to other endpoints on the same host and port that are siblings of the original URL.
That is, if the password was originally sent to https:/ /api.example.com:4567/a/b/c,
then the browser will send the same credentials on requests to https:/ /api.example.com
:4567/a/b/d, but would not send them on a request to https:/ /api.example.com:4567/a
or other endpoints.
4.1.4
Drawbacks of HTTP authentication
Now that you’ve implemented a simple UI for the Natter API using HTTP Basic
authentication, it should be apparent that it has several drawbacks from both a user
experience and engineering point of view. Some of the drawbacks include the
following:
 The user’s password is sent on every API call, increasing the chance of it acci-
dentally being exposed by a bug in one of those operations. If you are imple-
menting a microservice architecture (covered in chapter 10), then every
microservice needs to securely handle those passwords.
 Verifying a password is an expensive operation, as you saw in chapter 3, and
performing this validation on every API call adds a lot of overhead. Modern
password-hashing algorithms are designed to take around 100ms for interac-
tive logins, which limits your API to handling 10 operations per CPU core per
second. You’re going to need a lot of CPU cores if you need to scale up with
this design!
 The dialog box presented by browsers for HTTP Basic authentication is pretty
ugly, with not much scope for customization. The user experience leaves a lot to
be desired.
 There is no obvious way for the user to ask the browser to forget the password.
Even closing the browser window may not work and it often requires configur-
ing advanced settings or completely restarting the browser. On a public termi-
nal, this is a serious security problem if the next user can visit pages using your
stored password just by clicking the Back button.
For these reasons, HTTP Basic authentication and other standard HTTP auth
schemes (see sidebar) are not often used for APIs that must be accessed from web
browser clients. On the other hand, HTTP Basic authentication is a simple solution
for APIs that are called from command-line utilities and scripts, such as system admin-
istrator APIs, and has a place in service-to-service API calls that are covered in part 4,
where no user is involved at all and passwords can be assumed to be strong.
109
Token-based authentication
4.2
Token-based authentication
Let’s suppose that your users are complaining about the drawbacks of HTTP Basic
authentication in your API and want a better authentication experience. The CPU
overhead of all this password hashing on every request is killing performance and
driving up energy costs too. What you want is a way for users to login once and then be
trusted for the next hour or so while they use the API. This is the purpose of token-
based authentication, and in the form of session cookies has been a backbone of web
development since very early on. When a user logs in by presenting their username
and password, the API will generate a random string (the token) and give it to the cli-
ent. The client then presents the token on each subsequent request, and the API can
look up the token in a database on the server to see which user is associated with that
HTTP Digest and other authentication schemes
HTTP Basic authentication is just one of several authentication schemes that are sup-
ported by HTTP. The most common alternative is HTTP Digest authentication, which
sends a salted hash of the password instead of sending the raw value. Although this
sounds like a security improvement, the hashing algorithm used by HTTP Digest,
MD5, is considered insecure by modern standards and the widespread adoption of
HTTPS has largely eliminated its advantages. Certain design choices in HTTP Digest
also prevent the server from storing the password more securely, because the weakly-
hashed value must be available. An attacker who compromises the database there-
fore has a much easier job than they would if a more secure algorithm had been used.
If that wasn’t enough, there are several incompatible variants of HTTP Digest in use.
You should avoid HTTP Digest authentication in new applications.
While there are a few other HTTP authentication schemes, most are not widely used.
The exception is the more recent HTTP Bearer authentication scheme introduced by
OAuth2 in RFC 6750 (https://tools.ietf.org/html/rfc6750). This is a flexible token-
based authentication scheme that is becoming widely used for API authentication.
HTTP Bearer authentication is discussed in detail in chapters 5, 6, and 7.
Pop quiz
1
Given a request to an API at https:/ /api.example.com:8443/test/1, which of
the following URIs would be running on the same origin according to the same-
origin policy?
a