Infiltrating Corporate Intranet 
Like NSA
Pre-auth RCE on Leading SSL VPNs
Orange Tsai (@orange_8361)
Meh Chang (@mehqq_)
USA 2019
Orange Tsai
• Principal security researcher at DEVCORE
• Captain of HITCON CTF team
• 0day researcher, focusing on 
Web/Application security
orange_8361
Meh Chang
mehqq_
• Security researcher at DEVCORE
• HITCON & 217 CTF team
• Focus on binary exploitation
Highlights today
• PreAuth root RCE exploit chain on Fortinet SSL VPN
• Hard-core binary exploitation
• Magic backdoor
• PreAuth root RCE exploit chain on Pulse Secure SSL VPN
• Out-of-box web exploitation
• Highest bug bounty from Twitter ever
• New attack surface to compromise back all your VPN clients
Agenda
• Introduction
• Jailbreak the SSL VPN
• Attack vectors
• Case studies & Demos
• Weaponize the SSL VPN
• Recommendations
SSL VPN
• Trusted by large corporations to protect their assets
• Work with any network environments and firewalls
• Clientless, a web browser can do everything!
SSL VPN
Browser
SSL/TLS
Intranet
What if your trusted SSL VPN
is insecure?
Why focusing on SSL VPN
1.
Important corporate assets but a blind-spot
2. Widely used by corporations of all sizes
3. Only few SSL VPN vendors dominate the market
4. Direct Intranet access and must be exposed to outside
Even NSA is hunting bugs on
SSL VPN
Think about Equation Group leaks
They are usually forgotten
A silent-fix case
• We accidentally found a preAuth RCE on Palo Alto SSL VPN 
during our Red Team assessment
• A silent fixed 1-day:
• No CVE
• No advisory
• No official announcement
Hacking Uber as showcase
Response from Palo Alto PSIRT
Palo Alto Networks does follow coordinated vulnerability disclosure for 
security vulnerabilities that are reported to us by external researchers. 
We do not CVE items found internally and fixed. This issue was previously 
fixed, but if you find something in a current version, please let us know.
Number of high severity CVEs
159
50
26
17
13
6
Cisco
F5
Palo Alto
Citrix
Fortinet
Pulse Secure
https://nvd.nist.gov
We focus on…
•
Pulse Secure SSL VPN
•
More than 50,000+ servers operating on the Internet
•
Trusted by large corporations, service providers and government 
entities
•
Fortigate SSL VPN
•
More than 480,000+ servers operating on the Internet
•
Prevalent among medium-sized enterprises
Let's start hacking
Difficulties for kick-starting
• SSL VPN is a black box and close source appliance
• All-in-one & Build their own architecture stacks from scratch
• Only restricted shell provided
• Jailbreak is the prerequisite for further researches
Jailbreak the SSL VPN
• We are not hardware guys :(
• So we look into the virtual image first
• Analyzing virtual images
1.
Typical virtual images
2. Encrypted virtual images 
Typical virtual images
• If there is no LILO or GRUB password protected, we can just enter 
the Single-User mode
• Mount the .VMDK on your Linux box and modify the filesystem
• /etc/crontab
• /etc/ld.so.conf
• /etc/passwd
• Many ways…
What if the disk has been 
encrypted?
Encrypted virtual images
BIOS/MBR
LILO/GRUB
• Stage 1
• Stage 2
vmlinuz kernel
• zImagea
• bzImage
/sbin/init
• vmlinuz kernel
• Level - Hard
• Reverse engineering for the win!
• /sbin/init
• Level - Easy
• Memory forensics for the win!
The booting process
BIOS
LILO
Kernel
/sbin/init
?????????????????
The booting process
BIOS
LILO
Kernel
/sbin/init
?????????????????
Find the vital point
BIOS
LILO
Kernel
/sbin/init
/home/bin/dsconfig.pl
Memory Forensics
In-memory patch
Memory Patch
BIOS
LILO
Kernel
/sbin/init
///////////////bin/sh
Once we press …
BIOS
LILO
Kernel
/sbin/init
///////////////bin/sh
Digging at a correct place
Attack vectors
• WebVPN
• Native script language extensions
• Multi-layered architecture problems
WebVPN
• A convenient proxy feature – Portable & Clientless
• Proxy all kinds of traffics through the web browser
• Supports various protocols
• HTTP, FTP, TELNET, SSH, SMB, RDP …
• Handles various web resources
• Websocket, JavaScript, Flash, Java Applet …
WebVPN implementation
• Build from scratch
• Protocols, web resources handling are prone to memory bugs
• Requires high security awareness
• Debug function
• Logging sensitive data
• Information exposed
WebVPN implementation
• Modify from an open source project
• Copy the code, copy the bugs
• Hard to maintain & update & patch
• Call existing libraries
• Neglect to update
• Libcurl (2008), Libxml (2009)
• Most SSL VPNs have their own native script
language extensions
• En/Decoding in C/C++
• Type confusion between
languages
Web Stack
F5 Networks
PHP / C (Apache extension)
Cisco
Lua / C (self-implemented server)
Pulse Secure
Perl / C++ (self-implemented server)
Fortigate
Nginx / C (Apache extension)
Palo Alto
PHP / C (AppWeb extension)
Citrix
PHP / C (self-implemented server)
Native script language 
extensions
En/Decoding in C/C++
• String operation is always difficult for C language
• Buffer size calculation
• Dangerous functions
• Misunderstood functions
ret = snprintf(buf, buf_size, format, …);
left_buf_size = buf_size – ret;
Type confusion
• Type seems the same but …
• Perl or C?
• Perl string or C string?
• What TYPE is it?
my ($var) = @_;
EXTENSION::C_function($var);
Multi-layered architecture 
problems
• Inconsistency between each architecture layer
• Failed patterns
• Reverse proxy + Java web = Fail
• Breaking Parser Logic by Orange Tsai from Black Hat USA 2018
• Customized(C/C++) web server + RESTful API backend
Failed Patterns
https://sslvpn/public/images/x/front_x/../../../../some.php
• ACL bypass on customized C webserver + RESTful backend
• Abuse Regular Expression greedy mode to bypass path check
^/public/images/.+/(front|background)_.+
• Dispatched to backend PHP engine and access privileged pages
Case studies
Pre-auth remote code execution on Fortigate SSL VPN
Pre-auth remote code execution on Pulse Secure SSL VPN
Disclaimer
All the CVEs mentioned below have been reported and patched
by Fortigate and Pulse Secure
Fortigate SSL VPN
• All programs and configurations compiled into /
• About 500 MB, stripped idb with 85k functions
• Plenty of function tables
• Customized web daemons
• Based on apache since 2002
• Self-implemented apache module
/bin/init
Fortigate web interface
Worth mentioning bugs
• Pre-auth RCE chain
• CVE-2018-13379: Pre-auth arbitrary file reading
• CVE-2018-13382: Post-auth heap overflow
• The magic backdoor
• CVE-2018-13383: Modify any user’s password with a magic key
Arbitrary file reading
• A function reading language json files for users
• Concatenate strings directly
• No ../ filter
• Limited file extension
snprintf(s, 0x40, "/migadmin/lang/%s.json", lang);
snprintf(s, 0x40, "/migadmin/lang/%s.json", lang);
Arbitrary file reading
• Utilize the feature of snprintf
• The snprintf() and vsnprintf() functions will write at most size-1 of 
the characters printed into the output string
• Appended file extension can be stripped!
lang=/../../../..//////////////////////////////bin/sh
/migadmin/lang//../../../..//////////////////////////////bin/sh.json
0x40
An SSL VPN mystery
Appears in many products …
Excessively detailed session file
•
• Session token
• IP address
• User name
• Plaintext password
/dev/cmdb/sslvpn_websession
WebVPN
WebVPN – HTTP/HTTPS
https://sslvpn:4433/proxy/72ebc8b8/https/devco.re/
WebVPN – HTTP/HTTPS
Heap overflow vulnerability
• HTTP proxy
• Perform URL rewriting
• JavaScript parsing
• memcpy to a 0x2000 heap buffer without length check
memcpy(buffer, js_url, js_url_len);
Exploitation obstacles
• Destabilizing factors of heap
• Multiple connection handling with epoll()
• Main process and libraries use the same heap – Jemalloc
• Regularly triggered internal operations unrelated to connection
• Apache additional memory management
• No free() unless connection ends
Jemalloc allocator limitation
• Centralize small objects
• Stores small regions in
corresponding runs
• Reduce interference between
small and large objects
• Limit target options
header
bitmap
reg 0
reg 1
reg 2
…
reg N
header
bitmap
reg 0
reg 1
…
reg N
run
(0x20)
run
(0x30)
Surprise!
Program received signal SIGSEGV, Segmentation fault.
0x00007fb908d12a77 in SSL_do_handshake () from /fortidev4-
x86_64/lib/libssl.so.1.1
2: /x $rax = 0x41414141
1: x/i $pc
=> 0x7fb908d12a77 : callq *0x60(%rax)
(gdb) 
SSL structure (OpenSSL)
• Stores information of each SSL connection
• Ideal target
Allocation triggered easily
Size close to JavaScript buffer
Nearby JavaScript buffer with regular offset (k + N pages)
Useful structure members
Useful structure members
typedef struct ssl_st SSL;
struct ssl_st {
int version;
const SSL_METHOD *method;
//func table
…
int (*handshake_func) (SSL *);
};