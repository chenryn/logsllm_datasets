recommendations by Klees et al. [23], we therefore let the
analysis continue for 24 hours, we repeated each experiment
30 times, and we evaluated the statistical signiﬁcance of the
results using the Mann-Whitney U test. Our targets are Open-
JPEG, which we tested in an old version with known vul-
192    29th USENIX Security Symposium
USENIX Association
)
s
(
e
m
T
i
60
50
40
30
20
10
0
SymCC
QSYM
OpenJPEG
libarchive
tcpdump
Figure 10: Time per symbolic execution (median and quar-
tiles, excluding executions that exhausted time or memory
resources). The difference between QSYM and SYMCC is
statistically signiﬁcant with p < 0.0001. Note the correlation
between higher speed here and increased coverage in Figure 9.
iterations
experiment·analysis system × 3 CPU cores
nerabilities, and the latest master versions of libarchive and
tcpdump. In total, we spent 3 experiments × 2 analysis sys-
tems × 30
iteration × 24 hours =
12960 CPU core hours ≈ 17.8 CPU core months. The hard-
ware used for these experiments was an Intel Xeon Platinum
8260 CPU with 2 GB of RAM available to each process (AFL,
QSYM or SYMCC).
While running the fuzzer and symbolic execution as speci-
ﬁed above, we measured the code coverage as seen by AFL9
(Figure 9) and the time spent on each symbolic execution of
the target program (Table 1 and Figure 10). We found that
SYMCC not only executes faster than QSYM (which is con-
sistent with the benchmarks of Section 5.1) but also reaches
signiﬁcantly higher coverage on all three test programs. In-
terestingly, the gain in coverage appears to be correlated with
the speed improvement, which conﬁrms our intuition that ac-
celerating symbolic execution leads to better program testing.
Since we used an old version of OpenJPEG known to con-
tain vulnerabilities, we were able to perform one more mea-
surement in this case: the number of crashes found by AFL.
Unfortunately, crash triage is known to be challenging, and
we are not aware of a generally accepted approach to deter-
mine uniqueness. We therefore just remark that there is no
signiﬁcant difference between the number of AFL “unique
crashes” found with QSYM and SYMCC on this version of
OpenJPEG.
In the course of our experiments with OpenJPEG, SYMCC
found two vulnerabilities that affected the latest master ver-
sion at the time of writing as well as previous released ver-
sions. Both vulnerabilities were writing heap buffer overﬂows
and therefore likely exploitable. They had not been detected
before, even though OpenJPEG is routinely fuzzed with state-
of-the-art fuzzers and considerable computing resources by
Google’s OSS-Fuzz project. We reported the vulnerabilities
to the project maintainers, who conﬁrmed and ﬁxed both. The
vulnerabilities were subsequently assigned CVE identiﬁers
2020-6851 and 2020-8112 and given high impact scores by
NIST (7.5 and 8.8, respectively). In both cases, the problems
arose from missing or incorrect bounds checks—symbolic
execution was able to identify the potential issue and solve
the corresponding constraints in order to generate crashing
inputs. In the same experiments, QSYM did not ﬁnd new
vulnerabilities.
In conclusion, our experiments show that SYMCC is not
only faster than state-of-the-art systems on benchmark tests—
we demonstrated that the increased speed of symbolic ex-
ecution also translates to better performance when testing
real-world software.
6 Discussion and future work
In this section, we discuss the results of our evaluation and
show some directions for future work.
6.1 Beneﬁts of compilation
We have seen in that our compilation-based approach provides
a much faster execution component for symbolic execution
than existing IR interpreters and IR-less systems. At the same
time, we retain the ﬂexibility that comes with building sym-
bolic execution on top of an intermediate representation (i.e.,
our implementation is not tied to a particular machine architec-
ture) and the robustness of IR-less systems (i.e., computations
that we cannot analyze are still performed correctly by the
CPU). We believe that compilation-based symbolic execution,
where applicable, has the potential of accelerating symbolic
execution to a level that is comparable with fuzzing, making it
signiﬁcantly more useful for bug discovery and rendering the
combination of symbolic execution and fuzzing even more
attractive.
6.2 Portability and language support
Our current prototype supports programs written in C and
C++. However, since we build on the LLVM framework, we
could support any program that is translatable to LLVM bit-
code. In particular, this means that we can integrate SYMCC
into any LLVM-based compiler, such as the default compilers
for Rust [41] and Swift [1], and the alternative Go compiler
gollvm [15]. Similarly, we can generate binaries for any ma-
chine architecture that LLVM supports, without any changes
in our code. More generally, the technique of compilation-
based symbolic execution applies to any compiled program-
ming language.
9AFL’s coverage map is known to be prone to collisions and therefore
does not reﬂect actual code coverage [14]. However, AFL bases its decisions
on the coverage map, so the map is what counts when evaluating the beneﬁt
of a symbolic execution system for the fuzzer.
6.3 Binary analysis
So far, we have only discussed compilation-based symbolic
execution in contexts where the source code of the program
USENIX Association
29th USENIX Security Symposium    193
Average execution time per analysis (s)
Average solver time per analysis (s)
Average total time per analysis (s)
Average share of execution (%)
Average share of SMT solving (%)
Speedup factor vs QSYM
OpenJPEG
libarchive
tcpdump
SYMCC QSYM SYMCC QSYM SYMCC QSYM
27.1
8.2
35.3
76.8
23.2
14.9
15.7
30.6
48.7
51.3
1.9
26.4
28.3
6.7
93.3
1.6
0.2
1.8
91.7
8.3
19.1
1.8
20.9
91.2
8.8
0.3
0.3
0.6
41.7
58.3
1.1
11.6
58.8
Table 1: Time split between execution and SMT solving. See Figure 10 for a visualization of the total analysis times. Note how
the speedup factor in the last row correlates with SYMCC’s improved coverage displayed in Figure 9.
under test is available. A common criticism of source-based
tools is that they fall short when the source for parts or all
of a program is not available. For example, developers may
be in control of their own source code but rely on a third-
party library that is available in binary form only. SYMCC
handles such situations by treating binary-only components
as black boxes returning concrete values. While this should be
sufﬁcient for simple cases like binary-only libraries or inline
assembly, there are situations where symbolic execution of
binary-only components is necessary, i.e., where one wants
to keep track of the computations inside the black boxes. We
see two promising avenues for addressing such use cases:
6.3.1 Lifting
SYMCC currently uses compiler frontends to create LLVM
bitcode from source code, but there is no fundamental reason
for creating the bitcode from the source: S2E [9] popularized
the idea of generating a high-level IR from binaries for the pur-
pose of symbolic execution. It generates LLVM bitcode from
the internal program representation of QEMU [2] and runs it
in KLEE [5]. A similar approach is used by angr [37], which
dynamically generates VEX IR for a symbolic interpreter
from binaries. Several other such lifters have been designed
for purposes outside the realm of symbolic analysis [21].
While the IR obtained from binaries is more verbose [32],
SYMCC could be used in combination with a lifter to compile
symbolic handling into existing binaries. Trail of Bits has
recently applied a similar lifting technique to KLEE, essen-
tially converting it from a source-based tool to a symbolic
execution engine that can work on binaries [43].
6.3.2 Hybrid with QSYM
It may be possible to combine our compilation-based ap-
proach with QSYM’s capabilities of working on binaries; ba-
sically, one would beneﬁt from SYMCC’s fast execution in the
parts of the program under test for which source code is avail-
able and fall back to QSYM’s slower observer-based approach
in binary-only parts. Considering that SYMCC can already
work with QSYM’s symbolic backend, symbolic expressions
could be passed back and forth between the two realms—the
main challenge then lies in handling the transitions between
source-based and binary-only program components.
We would like to remark, however, that even binary-based
symbolic execution is often evaluated on open-source soft-
ware, and many gray-box fuzzers like AFL [46] only reach
their full performance when the source code of the program
under test is available for instrumentation.
7 Related work
As a program analysis technique, symbolic execution exists
on a spectrum. On the one extreme of that spectrum, bounded
model checking inlines all functions, unrolls loops up to a
certain bound and translates the entire program into a set of
constraints [13, 33]. While this process is sometimes called
“symbolic compilation” [3], it is not to be confused with our
compilation-based symbolic execution: bounded veriﬁcation
reasons about all executions at once, thus allowing for very
sophisticated queries but pushing most of the load to the
SMT solver. Our approach, in contrast, follows the tradition
of symbolic execution by reasoning about the program per
execution path [5, 9, 37]. On the other end of the spectrum,
fuzz testing executes target programs with very light or no
instrumentation, heuristically mutating inputs (and possibly
using feedback from the instrumentation) in the hope of ﬁnd-
ing inputs that evoke a certain behavior, typically program
crashes [4, 8, 12, 27, 46].
While bounded veriﬁcation provides powerful reasoning
capabilities, fuzzing is extremely fast in comparison. Con-
ventional symbolic execution lies between the two [5, 9, 37],
with state-merging approaches [24, 42] leaning more towards
bounded veriﬁcation, and hybrids with fuzzing attempting
to produce fast but powerful practical systems [39, 45]. It is
this last category of systems that forms the basis for our ap-
proach: we aim at a combination of symbolic execution and
fuzzing similar to Driller [39] and QSYM [45]. By speeding
up symbolic execution, we aim to make its more sophisti-
cated reasoning available in situations where previously only
fuzzing was fast enough.
194    29th USENIX Security Symposium
USENIX Association
Current work in symbolic execution, as outlined above and
referenced throughout the paper, applies either interpreter- or
observer-based techniques. While early systems embedded
symbolic reasoning directly [6, 16, 35], they performed the
instrumentation at the level of C code, which severely restricts
the set of possible input programs and complicates the imple-
mentation signiﬁcantly [16]. The approach of instrumenting
the program under test directly was abandoned in KLEE [5],
and subsequent work in symbolic execution mostly followed
its lead. We are not aware of any performance comparison
between the direct embedding implemented in early work and
the interpreter approach to symbolic execution implemented
by KLEE and later systems; we assume that the switch hap-
pened because interpreters are more ﬂexible and easier to
implement correctly. With SYMCC, we demonstrate that di-
rectly embedding concolic execution into the target program
yields much higher performance than state-of-the-art systems;
at the same time, however, performing the embedding at the
level of the compiler’s intermediate representation allows us
to maintain the ﬂexibility that is common in modern imple-
mentations.
The most closely related project outside the ﬁeld of sym-
bolic execution is Rosette, a “solver-aided programming lan-
guage” [42]. It allows programmers to express symbolic con-
straints while writing a program, which it then executes in a
“Symbolic Virtual Machine”. In contrast to our approach, it
is not meant for the analysis of arbitrary programs but rather
aims to support the development of program-synthesis and
veriﬁcation tools. It requires the developer to use a domain-
speciﬁc language and design the program for symbolic analy-
sis from the start. Moreover, it does not compile the program
to machine code but rather executes it in a host environment,
similarly to how KLEE orchestrates multiple execution states
in a single process.
SMT Kit [19] is a project that performs a similar embed-
ding into C++, and there is (incomplete) support for automat-
ically transforming source code to use the library [18]. The
idea, if fully executed, may have led to a system similar to
SYMCC, but the project seems to have been abandoned years
ago without a publication, and we have been unable to con-
tact the author. We anticipate that a robust source-to-source
translation would have been much more difﬁcult to imple-
ment than our IR transformation due to the complexity of the
C++ language in comparison with LLVM bitcode. Moreover,
the system would have been inherently limited to a single
programming language, just like the early implementations
for C mentioned above, while SYMCC’s transformation at the
IR level allows it to support any source language for which
an LLVM-based compiler exists.
8 Conclusion
We have presented SYMCC, a symbolic execution system
that embeds symbolic processing capabilities in programs
under test via a compiler. The evaluation shows that the di-
rect embedding yields signiﬁcant improvements in the exe-
cution speed of the target programs, outperforming current
approaches by a large margin. Faster execution accelerates
the analysis at large and increases the chances of bug dis-
covery, leading us to ﬁnd two high-impact vulnerabilities in
a heavily tested library. By using a compiler to insert sym-
bolic handling into target programs, we combine the advan-
tages of IR-based and IR-less symbolic execution: SYMCC
is architecture-independent and can support various program-
ming languages with little implementation effort (like IR-