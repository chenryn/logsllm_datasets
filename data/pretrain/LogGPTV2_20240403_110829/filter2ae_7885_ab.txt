> **BiLE-suite  
>  工具描述：HTML解析，反向dns解析**  
>  aptitude install httrack  
>  git clone   
>  perl BiLE.pl target.com
>
> **Second Order  
>  工具描述：第二阶段域名扫描  
>  通过HTML提取子域名**  
>  go get xxx.com/mhmdiaa/second-order  
>  cp ~/go/src/xxx.com/mhmdiaa/second-order/config.json
> ~/go/src/xxx.com/mhmdiaa/second-order/config-subs-enum.json  
>  编辑修改LogCrawledURLs为True  
>  second-order -base  -config config.json -output
> target.com
>
> ### DNS解析
>
> **在线查询:**  
>  VirusTotal()  
>  ViewDNS()  
>  DNSdumpster()  
>  Threatcrowd()
>
> **BiLE-suite  
>  工具描述：HTML解析，反向dns解析**  
>  如上。
>
> **Massdns  
>  工具描述：dns解析**  
>  git clone   
>  cd massdns/  
>  make  
>  解析域名：/bin/massdns -r lists/resolvers.txt -t AAAA -w results.txt domains.txt
> -o S -w output.txt  
>  爆破域名：./scripts/subbrute.py wordlist.txt target.com | ./bin/massdns -r
> lists/resolvers.txt -t A -o S -w output.txt  
>  CT解析：./scripts/ct.py target.com | ./bin/massdns -r lists/resolvers.txt -t A
> -o S -w output.txt  
>  
### 区域传送
>
> 域传送是一种DNS事务，DNS服务器将其全部或部分域文件的副本传递给另一个DNS服务器。如果未安全地配置域传输送，则任何人都可以对指定名称的服务器启动域传送并获取域文件的副本。根据设计，域文件包含有关域和保存在域中的大量主机信息。
>
> **Windows：**
>
>   1. nslookup命令进入交互式shell
>   2. server命令 参数设定查询将要使用的DNS服务器
>   3. ls命令列出某个域中的所有域名
>
>
> **Linux：**  
>  **Dig  
>  工具描述：dns区域传送，dns反向解析，dns解析**  
>  dig +multi AXFR target.com  
>  dig +multi AXFR $ns_server target.com
>
> ### DNS aggregators（DNS聚合器）
>
> **Cloudflare_enum.py  
>  工具描述：从Cloudflare提取子域名  
>  dns聚合器**  
>  pip install censys  
>  git clone   
>  cloudflare_subdomain_enum.py PI:EMAIL target.com
### DNS Cache Snooping（域名缓存侦测）
> **域名缓存侦测（DNS Cache Snooping）技术**  
>
> 在企业网络中，通常都会配置DNS服务器，为网络内的主机提供域名解析服务。这些DNS不仅解析自己的私有域名，还会用递归方式，请求公网的DNS解析第三方域名，如baidu.com之类。为了提升性能，通常会使用缓存记录，记录解析过的域名，尤其是第三方域名。  
>  域名缓存侦测（DNS Cache
> Snooping）技术就是向这些服务器发送域名解析请求，但要求不使用递归模式。这样DNS只能解析私有域名和缓存中保存的域名。借助该项技术，渗透测试人员就知道哪些域名是否被过请求过。例如，测试人员可以提交某安全软件更新所使用的域名，如果有记录，说明该网络使用该种安全软件。
>
> ### Alterations & permutations（换置 & 排序）
>
> **AltDNS**  
>  **工具描述：通过换置 &排序技术发现子域名**  
>  git clone   
>  cd altdns  
>  pip install -r requirements.txt  
>  ./altdns.py -i subdomains.txt -o data_output -w words.txt -r -s
> results_output.txt  
>  
### DNSSEC(Domain Name System Security Extensions)，DNS安全扩展，DNSSEC区域漫步
>
> 由于DNSSEC处理不存在域名的方式，您可以"遍历"DNSSEC域并枚举该域中的所有域名。您可以从这里( your-DNSSEC-with-a-grain-of-salt>) 了解有关此技术的更多信息。
>
> **Ldns-walk  
>  工具描述：DNSSEC zone walking, 如果DNSSEC NSEC开启，可以获得全部域名。**  
>  aptitude install ldnsutils  
>  ldns-walk target.com  
>  ldns-walk @nsserver.com target.com  
>  如果DNSSEC NSEC开启，可以获得全部域名。  
>  
### CSP HTTP首部
> **Domains-from-csp  
>  工具描述：从CSP头提取子域名**  
>  git clone   
>  pip install click  
>  python csp_parser.py $URL  
>  python csp_parser.py $URL -r
>
> ### SPF记录
>
> SPF是通过域名的TXT记录来进行设置的，SPF记录列出了所有被授权代表域名发送电子邮件的主机
>
> **Assets-from-spf**  
>  **工具描述：SPF域名记录**  
>  git clone   
>  pip install click ipwhois  
>  python assets_from_spf.py target.com  
>  
>
> ### 虚拟主机爆破
>
> **vhost-brute  
>  工具描述：虚拟主机爆破**  
>  aptitude install php-curl  
>  git clone   
>  
>
> **Virtual-host-discovery  
>  工具描述：虚拟主机爆破**  
>  git clone   
>  ruby scan.rb --ip=1.1.1.1 --host=target.com --output output.txt
### ASN发现
> 通过域名查询到 ASN，再通过 ASN 查询到所属的所有 ip 范围
>
> ### 爬虫 Scraping（抓取）
>
> ## 泛解析问题
>
>
> 目前最好的解决方式是通过先获取一个绝对不存在域名的响应内容，再遍历获取每个字典对应的子域名的响应内容，通过和不存在域名的内容做相似度比对，来枚举子域名，但这样的实现是以牺牲速度为代价
>
>   * 
>   * 
>
## tools
### OneForAll
>   
>  工具也有很多厉害的，平时我一般使用 OneForALL + ESD + JSfinder 来进行搜集，（ESD 可以加载 layer 的字典，很好用）
>
> ### Sublist3r
>
>  \- 强大的快速子域枚举工具  
>  评分: