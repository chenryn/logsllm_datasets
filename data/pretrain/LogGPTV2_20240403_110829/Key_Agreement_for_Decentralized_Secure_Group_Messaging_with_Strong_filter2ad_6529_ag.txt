controlMsgs[ID, c] ← control
5 :
6 : directMsgs[ID, c] ← dmsgs
7 :
8 : addTarget[ID, c] ← ID′
9 : delivered[ID, c , ID] ← true
remove-user(ID, ID′)
1 :
2 :
3 :
4 :
if control = ε ∨ I = ε then win
5 :
controlMsgs[ID, c] ← control
6 :
7 : directMsgs[ID, c] ← dmsgs
8 :
9 : needsResponse[ID, c] ← true
10 : delivered[ID, c , ID] ← true
require valid-member(ID) ∧ ID (cid:44) ID′
c ← ++counter[ID]
(γ[ID], control, dmsgs, I) ←
remove(γ[ID], ID′)
I[ID, c] ← I
I[ID, c] ← I
I[ID, c] ← I
send-update(ID)
require valid-member(ID)
1 :
c ← ++counter[ID]
2 :
(γ[ID], control, dmsgs, I) ← update(γ[ID])
3 :
if control = ε ∨ I = ε then win
4 :
controlMsgs[ID, c] ← control
5 :
6 : directMsgs[ID, c] ← dmsgs
7 :
8 : needsResponse[ID, c] ← true
9 : delivered[ID, c , ID] ← true
deliver(ID, c , ID′)
1 :
2 :
3 :
4 :
5 :
6 :
7 :
8 :
9 :
10 :
11 :
require controlMsgs[ID, c] (cid:44) ε
require ¬in-history(ID, c , ID′)
require should-receive(ID, c , ID′)
require causally-ready(ID, c , ID′)∨
directMsgs[ID, c , ID′])
if should-decrypt(ID, c , ID′) then
if I (cid:44) I[ID, c] then win
else if I (cid:44) ε then win
12 : mustRespond ←(cid:0)needsResponse[ID, c] ∧
process(γ[ID′], ID, controlMsgs[ID, c],
(γ[ID′], control, dmsgs, I , I′) ←
should-decrypt(ID, c , ID′)(cid:1)∨
add-ready(ID, c , ID′)
if mustRespond ∧ (control = ε ∨ I′ = ε)
then win
adds-member(ID, c , ID′)
13 :
14 :
15 :
16 :
17 :
18 :
19 :
20 :
21 :
22 :
23 : delivered[ID, c , ID′] ← true
if control (cid:44) ε then
c′ ← ++counter[ID′]
controlMsgs[ID′
directMsgs[ID′
, c′] ← I′
I[ID′
delivered[ID′
, c′
, c′] ← control
, c′] ← dmsgs
, ID′] ← true
Figure 8: Oracles of security game for DCGKA(DGM)
and update secrets of their own when processing the create mes-
sage.
Adding, removing, and performing updates. The three oracles
add-user, remove-user, and send-update allow the adversary to
cause some user to call the corresponding algorithm. The predicate
valid-member (defined in Figure 9) ensures that the sender has
received a message before, which implies that they have been added
to the group at some point. In contrast to the CGKA security game,
we do not make any check that the requested group membership
operations are “reasonable”, e.g., the removed user is currently in
the group, besides the check ID (cid:44) ID′. This is because the DGM
scheme may assign some significance to seemingly redundant or
unreasonable operations.
Delivering control messages. The oracle deliver(ID, c, ID′) deliv-
ers controlMsgs[ID, c] and the direct message directMsgs[ID, c, ID′]
to user ID′. It first makes several ordering-related checks, which
formalize the precise delivery requirements for messages (discussed
briefly in Section 5.1):
• The predicate in-history is used to ensure that ID′ has not
already been delivered this message or a causally later one.
The latter case can occur if ID′ was already delivered a mes-
sage adding them to the group which is causally greater
than this message, hence should have informed ID′ of any
relevant metadata about this message.
• The predicate should-receive ensures that ID′ is eligible to
receive this message. We dictate that ID′ is eligible to receive
the message if they consider themselves group members after
receiving the message, taking into account all messages they
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2038valid-member(ID) := ∃(T ∈ controlMsgs) (delivered[T , ID])
in-history(ID, c, ID′) := ∃(T ∈ controlMsgs)(cid:0)controlMsgs[ID, c] ⪯ T ∧ delivered[T , ID′](cid:1)
should-decrypt(ID, c, ID′) := ID′ ∈ DGM(cid:0){T ∈ controlMsgs | T ⪯ controlMsgs[ID, c]}(cid:1)
should-receive(ID, c, ID′) := ID′ ∈ DGM(cid:0){T ∈ controlMsgs | T ⪯ controlMsgs[ID, c] ∨ in-history(T , ID′)}(cid:1)
causally-ready(ID, c, ID′) := ∀(T ∈ controlMsgs)(cid:0)T ≺ controlMsgs[ID, c] =⇒ in-history(T , ID′)(cid:1)
∀(T ∈ controlMsgs)(cid:0)(T ≺ controlMsgs[ID, c] ∧ should-decrypt(T , ID′)) =⇒ delivered[T , ID′](cid:1)
add-ready(ID, c, ID′) := (addTarget[ID, c] = ID′) ∧
adds-member(ID, c, ID′) :=(cid:0)let S = {T ∈ controlMsgs | in-history(T , ID′)} in
(DGM(S ∪ {controlMsgs[ID, c]}) \ DGM(S) (cid:44) ∅)(cid:1)
Figure 9: Predicates used in the security game. Here we use delivered[T , ID] as an abbreviation for delivered[ID′, c′, ID] when T =
controlMsgs[ID′, c′], and likewise for inputs to the predicates.
have received already. This rules out confusing situations
in which group members consider themselves not in the
group, but allows them to receive messages besides just the
ones they should be able to decrypt—in particular, messages
concurrent to their own addition. Allowing group members
to receive messages concurrent to their addition allows us
to simplify our DCGKA protocol, since then group members
can learn the metadata (but not update secrets) of group
membership changes and acknowledgments concurrent to
their addition, which are impossible to include in the message
adding them to the group.
• The predicate causally-ready ensures that ID′ processes mes-
sages in causal order, by requiring them to have received all
causally lesser messages.
The exception to this rule is encoded by add-ready: a group
member may receive a message adding them to the group
without receiving prior messages. In particular, the first mes-
sage a group member receives will always be the message
adding them to the group. However, this would get confus-
ing if a group member was added to the group, removed,
and then re-added later, and they were allowed to receive
the second add message before receiving all messages in
between the first add and remove, since they would later
have to go back and process old messages. To avoid this,
add-ready requires ID′ to first receive any causally prior
messages that they should-decrypt.
These restrictions on the adversary’s ability to deliver messages are
reasonable because they can easily be enforced by the Authenticated
Causal Broadcast layer, as discussed in Section 5.1.4
After checking these conditions, the oracle delivers the message
to ID′. To ensure correctness, we mandate that the output secret I
is correct (i.e., equal to the update secret returned when its sender
4The Causal Broadcast layer can enforce the restriction in add-ready by including,
along with each message adding ID′, a vector clock describing the causally maximal
prior messages T satisfying should-decrypt(T , ID′). The Causal Broadcast layer for
ID′ would then delay processing the add message until its own vector clock was at
least as large.
processed the message) if ID′ should be able to decrypt it. This
occurs precisely if they were an intended recipient of the message.
Finally, delivering the message may cause ID′ to return a re-
sponse control message, which is handled like any other gener-
ated message. The variable mustRespond mandates that this re-
sponse exists and has an associated update secret. A response is
required if needsResponse is true, i.e., the delivered message was
output by create, remove, or update, and ID′ should-decrypt the
processed message. A response is also required if the message adds
a group member, from the perspective of ID′, since the added group
member needs an update secret from ID′ in order to decrypt their
application messages; this is checked by adds-member. Note that
adds-member(ID, c, ID′) is not always equivalent to addTarget[ID, c]
(cid:44) ε, since an add message may have no effect due to previously re-
ceived messages (e.g., concurrent removes in a remove-wins DGM),
or a non-add message may cause a user to be re-added (e.g., a re-
move undoing a concurrent remove—this is possible in Matrix [21]).
If a response is not required, ID′ may choose to output a response
regardless, in which case we do not require their response to have
an associated update secret.
Challenges and compromises. Challenges and compromises are
handled as in the CGKA security game. In order to capture that
update secrets must look random, the adversary is allowed to issue
a challenge for any update secret, using challenge. The adversary
may instead directly reveal the update secret using reveal. To model
forward secrecy and post-compromise security, the adversary is
allowed to learn the current state of any user by calling the oracle
compromise. Note that because of our requirements about when
users output update secrets and response messages, we do not have
to worry about trivial protocols that give the adversary nothing to
challenge.
Avoiding trivial attacks. At the end of the game, a safety predi-
cate P (specified as a parameter to the security game) is evaluated
on the sequence of queries q1, . . . , qq made by the adversary. If
P(qq, . . . , qq) is false, the adversary loses. The safety predicate is
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2039safe(q1, . . . , qq) :=
∀(cid:0)(i, j) s.t. qi = challenge(ID, c) for some ID, c and
qj = compromise(ID′) for some ID′(cid:1)
(cid:16)(cid:0)delivered[ID, c, ID′] was true at the time of qj
(cid:1)
∃k(cid:0)qk = send-update(ID′) ∧ k > j ∧
message(qk) ⪯ controlMsgs[ID, c](cid:1)
¬should-decrypt[ID, c, ID′](cid:17)
Figure 10: Safety predicate safe and its helper predicate
compromises. Here message(qk) denotes the control message gen-
erated during the query qk.
meant to prevent trivial attacks, in which the adversary compro-
mises a group member’s state and then uses it directly to decrypt
an update secret. Changing P changes the precise PCS and FS guar-
antees required by the security game.
The particular safety predicate safe in Figure 10 describes optimal
PCS and FS. The predicate says that a compromise is allowed so long
as for each challenged update secret, one of the following holds,
where m denotes the message corresponding to the challenged
update secret:
Forward secrecy The compromised user had already received m
before being compromised.
PCS After being compromised, the compromised user sent a PCS
update message, and m’s author had received that message
before sending m (or the PCS update is m).
Group membership The compromised user was not an intended
recipient of m. That is, m’s sender did not consider them a
group member at the time they sent m. This implies that
the adversary may freely compromise removed users. Also,
this means that in spite of concurrent group membership
changes, a message’s sender always knows exactly which
users can decrypt that message, and they can always avoid
undesired recipients by sending remove messages immedi-
ately beforehand.
Note that the three clauses in the disjunction correspond to the
three allowed cases above.
Optimal PCS and FS in the decentralized setting includes optimal
PCS in the face of concurrent updates: after multiple compromises,
update secrets must be safe once all compromised group members
update, even if they all update concurrently. However, some proto-
cols only achieve weaker forms of PCS or FS, including our own (cf.
the last two columns in Table 1). Thus we instead prove security of
our DCGKA protocol with respect to the safety predicate dom-safe
defined in Appendix C, which allows slightly sub-optimal PCS in
the face of concurrent updates.
Advantage. In the following, a non-adaptive (t, q, n)-adversary is
an adversary A that runs in time at most t, makes at most q queries,
references at most n IDs, and must specify the sequence of queries
it plans to make in advance, before seeing the result of any queries.
The adversary wins the DCGKA security game if it correctly guesses
the random bit b in the end and the safety predicate P evaluates
to true on the queries made by the adversary. The advantage of
A against a DCGKA scheme DCGKA with respect to the safety
predicate P and DGM scheme DGM is defined by
(cid:12)(cid:12)(cid:12)(cid:12)Pr[A wins] − 1
2
(cid:12)(cid:12)(cid:12)(cid:12) .
AdvDCKGA,P,DGM
dcgka-na
(A) := 2
Definition 5. A DCGKA scheme DCGKA is non-adaptively (t, q, n,
P, DGM, ϵ)-secure if for all non-adaptive (t, q, n)-adversaries A,
AdvDCKGA,P,DGM
dcgka-na
(A) ≤ ϵ .
B SECURITY GAME FOR TWO-PARTY
SECURE MESSAGING (2SM)
In this section, we define the precise security notion we require
for the 2SM scheme used in our DCGKA protocol. The interface of
a 2SM scheme is defined in Section 5.3. Our definition formalizes
optimal 2-party forward secrecy and PCS, assuming authentic mes-
sage delivery. 2SM schemes meeting this definition are described
by Jost et al. [23] and Durak and Vaudenay [17]. In an extended
version of this paper [42], we formalize an optimized protocol that
is described informally in [23, §2.2], taking advantage of the fact
that we do not require post-impersonation security.
Our 2SM security game is essentially the two-party restriction of
our DCGKA security game, with every message counting as a PCS
update message, except that we use IND-CPA security instead of
secret indistinguishability. The oracles of our security game appear
in Figure 11.
The init oracle sets up the game and all the variables needed
to keep track of the execution. The random bit b is used for IND-
CPA challenges. By a slight abuse of notation, the states of the two
parties, A and B, are initialized using key pairs for some public-key
encryption scheme using a key generation function PKE-Gen(),
instead of using IDs. These key pairs stand in for those returned by
the 2SM scheme’s internal public-key infrastructure (PKI) on the
actual input IDs. Specifically, pkA is the public key for A returned
to B by the PKI, with matching secret key skA known to A, and
likewise for (pkB, skB). ciphertextsA[c] and plaintextsA[c] store the
ciphertext and plaintext, respectively, for the c-th message sent by
A, and likewise for B. The ciphertexts arrays are marked public,
indicating that they are readable by the adversary, and the parties’
public keys are also given to the adversary. nextSendA gives the
index of the next message A will send, and nextDeliveredA gives
the index of the next message to be delivered from A to B.
After calling init, the adversary is free to call the remaining ora-
cles to simulate message sending and receiving, compromise the
parties’ states, and issue IND-CPA challenges. Note that deliver-A
enforces authentic in-order delivery of messages from B (if the
require statement fails, the game aborts and the adversary loses).
However, messages can be arbitrarily delayed, and messages from