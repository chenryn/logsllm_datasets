Java Library Class 
Map to Apache 
Axis Class 
Returned value 
equals sent value 
No result returned 
Exception 
Generated 
No such operation 
FALSE 
FALSE 
None 
None 
4.4. Injecting Bad Data 
This  experiment  examines  two  xsd  types  when 
invalid  data  is  injected.  It  examines  whether  ASCII 
characters  which  invalidate  the  schema  for  the  xsd 
types are detected by the middleware and rejected. 
      some bad data 
Figure 5: Language message after injection 
The  first  type  is  an  xsd  language  type.  A  valid 
language type has strict rules about the data that can be 
encoded with in it. The encoding follows a schema that 
defines  the  types  and  positions  of  ASCII  characters 
that  can  be  included  in  this  element.  Figure  5  shows 
the message after the fault is injected. The new element 
contents are invalid since both the characters contained 
and the placement of the characters are invalid. 
The  unmarshaling  of  this  invalid  data  did  not 
generate  any  exceptions  (see  Table  3).  The  only 
consequence  of  this  injection  was  that  the  returned 
value  was  not  equal  to  the  original  value.    Since  this 
type  is  built  upon  a  string  type,  it  is  reasonable  to 
assume that the unmarshaling process assumes that the 
input data is valid and inserts it directly into the class 
instance  without  validating  it.  Conversely  a  check  of 
the  Apache  Axis  class  that  implements  this  type  in 
Java  shows  that  validation  is  done  when  the  normal 
constructors are used. 
The second xsd type assessed was PositiveInteger. 
When  bad  data  was  injected  into  this  message 
exchange a Number Format Exception was generated. 
Whilst this would appear to be a valid exception closer 
inspection of the code revealed that this exception was 
generated as part of the standard Java string to number 
parsing mechanism, not as part of an explicit validation 
mechanism. This exception can therefore be considered 
an interaction fault. 
Table 3: Invalid data Results 
Xsd:type 
Language 
PositiveInteger 
Returned value 
equals sent value 
FALSE 
No result returned 
Exception Generated 
None 
Number Format 
Exception 
4.5. Invalid by Omission Faults 
This  experiment  injected  syntactically  correct  data 
into the elements containing xsd types, but in one case 
the data invalidated the type’s schema by omission (it 
should have started with a minus sign). This test gave 
an  appropriate  exception  (see  Table  4)  but,  as  above, 
this was generated by the Java class parsing the value, 
rather than a direct validation against the schema. 
Table 4: Invalid by Omission Results 
xsd:type 
Returned value 
equals sent value 
NonNegativeInteger  FALSE 
NonPositiveInteger 
No result returned 
Exception 
Generated 
None 
Number Format 
Exception 
The  nonNegativeInteger  was  also  injected  as  a 
control and since the value 128 was a correct value for 
this  type  the  only  consequence  of  this  injection  was 
that the returned value did not match the originally sent 
value. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:26 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20075. Conclusion and Future Work 
This paper has detailed the application of our Grid-
FIT tool to the Apache Axis component of the Globus 
Toolkit  to  provide  dependability  assessment  with 
regards to its integrity. 
Our 
study  uncovered 
between 
a  number  of 
case 
discrepancies 
Apache 
Axis 
implementation  and  the  W3C  SOAP  specification. 
These fall into two categories: 1) misinterpretation/bad 
implementation  of  the  SOAP  specification;  and  2) 
failures due to lack of validation. 
the 
the 
The 
first 
includes 
category 
xsi:nil 
misinterpretation  of  the  specification.  Whilst  this 
would  appear  to  be  a  fairly  minor  fault,  it  could 
conceivably form the basis of a buffer overflow attack 
or denial of service attack since large quantities of data 
could be transferred in a message and Axis would not 
flag this as an error. 
The  second  category  of  discrepancies  allows 
unanticipated  control  pathways  to  be  exercised  that 
could  lead  to  interaction  faults  being  generated.  A 
closer  examination  of  this  would  be  required  on  a 
system-by-system basis to ensure that this could not be 
employed for compromising the integrity of a system. 
We  assume  that  the  potential  to  exploit  these 
particular  discrepancies  is  fairly  low  in  terms  of  a 
Globus  Grid,  since  it  will  be  working  with  known 
implementations  of  SOAP  stacks  and  systems  will  be 
secured, but the potential does exist to exploit them by 
using  modified  middleware  stacks  since  validation  is 
undertaken  by  guard  code  which  appears  to  be 
contained in the Java class implementations of the xsd 
types, not as a general message validation mechanism. 
Future  work  will  concentrate  on  enhancing  our 
fault  models  to  more  thoroughly  examine  the  Grid 
middleware, determine if Grid-FIT can be successfully 
applied  to  assess  other  dependability  attributes,  and 
apply our technique to more complex Globus systems 
and scenarios. 
6. Acknowledgments 
This work was funded as part of the EPSRC funded 
CoLab  project  (EPSRC  Reference:  EP/D077249/1). 
Thanks  are  due  to  Dr  Paul  Townend  for  his  help  and 
suggestions in the preparation of this paper. 
7. References 
I.  Foster,  "Globus  Toolkit  Version  4:  Software 
for  Service-Oriented  Systems," 
the 
International 
proceedings 
IFIP 
the 
of 
in 
[1] 
Conference 
Computing, China, 2005. 
on  Network 
and 
Parallel 
[3] 
[2]  A.  Avizienis,  J.-C.  Laprie,  B.  Randell,  and  C. 
Landwehr,  "Basic  Concepts  and  Taxonomy  of 
Dependable  and  Secure  Computing,"  IEEE 
Transactions  on  Dependable  and  Secure 
Computing, vol. 1, pp. 11-33, 2004. 
J.  Voas  and  G.  McGraw,  "Software  Fault 
Injection: 
Inoculating  Programs  Against 
Errors", John Wiley & Sons, 1998. 
E.  Marsden, 
J.  Arlat, 
and 
"Dependability  of  CORBA  Systems:  Service 
Characterization  by  Fault  Injection,"  in  the 
proceedings  of  the  21st  IEEE  Symposium  on 
Reliable Distributed Systems, Japan, 2002. 
J.  Fabre, 
[4] 
[5]  N.  Looker,  B.  Gwynne,  J.  Xu,  and  M.  Munro, 
"An Ontology-Based Approach for Determining 
the  Dependability 
Service-Oriented 
Architectures,"  in  the  proceedings  of  the  10th 
IEEE 
International  Workshop  on  Object-
oriented  Real-time  Dependable  Systems,  USA, 
2005. 
of 
[7] 
[6]  N.  Looker,  M.  Munro,  and  J.  Xu,  "A 
Comparison  of  Network  Level  Fault  Injection 
with Code Insertion," in the proceedings of the 
29th IEEE International Computer Software and 
Applications Conference, Scotland, 2005. 
E. Christensen, F. Curbera, G. Meredith, and S. 
Weerawarana, 
"Web  Services  Description 
Language (WSDL)," Version 1.1, W3C, 2001. 
T. Bray, J. Paoli, C. M. Sperberg-McQueen, and 
E.  Maler,  "Extensible  Markup  Language 
(XML)," Second Edition, W3C, 2000. 
J. Voas, "Fault Injection for the Masses," IEEE 
Computer, vol. 30, pp. 129-130, 1997. 
[8] 
[9] 
[10]  P.  Townend  and  J.  Xu,  "Dependability  in 
Grids,"  IEEE  Distributed  Systems  Online,  vol. 
6, 2005. 
[11]  N.  Looker,  M.  Munro,  and  J.  Xu,  "Simulating 
Errors in Web Services," International Journal 
of  Simulation  Systems,  Science  &  Technology, 
vol. 5, 2004. 
[12]  H. S. Thompson, D. Beech, M. Maloney, and N. 
Mendelsohn,  "XML  Schema  Part  1:  Structures 
Second Edition," W3C, 2004. 
[13]  N.  Looker  and 
J.  Xu,  "Assessing 
the 
Dependability  of  OGSA  Middleware  by  Fault 
Injection," in the proceedings of the 22nd IEEE 
Symposium  on  Reliable  Distributed  Systems, 
Italy, 2003. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:26 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007