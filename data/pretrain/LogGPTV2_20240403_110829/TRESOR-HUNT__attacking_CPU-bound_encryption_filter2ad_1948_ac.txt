correct location of the PML4 table.
As a result, while it is certainly possible to falsely iden-
tify an IDT or kernel paging structure, we conclude that
our heuristics are eﬀective in practice. We speculate that
this might be partially attributable to the fact that we per-
form our scan as a linear sweep from low to high physical
addresses. Since the data structures of interest tend to be
initialized early in the boot process, they also tend to reside
in low physical memory and are therefore discovered before
false positives might be encountered.
4.2 Performance
In this experiment, we validate that Tresor-Hunt is able
to eﬃcient and successfully extract disk encryption keys
from the CPU. Since Tresor is only available for Linux,
we performed this experiment solely for that OS, although
we speculate that the results of this experiment would not
diﬀer signiﬁcantly in other environments.
We performed 10 trials of the attack against a Linux
3.0.31 kernel patched with Tresor on machine with an In-
tel Core i7 CPU and 16 GB of memory. In each case, the
time to perform the attack was dominated by the time to
extract the initial physical memory dump, which was on the
order of several minutes. In comparison, the time required
to analyze the memory dump, construct the attack payload,
inject the payload, and extract the key was negligible.
As a result, we conclude that the attack is highly feasible
for the threat model described in Section 2, where an adver-
sary can gain unobserved physical access to a DMA-capable
bus on an unattended target machine.
5. DISCUSSION
We have demonstrated that CPU-bound encryption is in-
suﬃcient to securely encrypt a hard disk in the face of DMA
attacks. However, we will now discuss other techniques that
allow eﬃcient, realistic protection against such attacks.
Disabling DMA.
The most intuitive way to prevent DMA attacks is to
simply disable DMA. Microsoft suggests this, for example
to protect BitLocker full disk encryption [15]. Similarly,
the “old” Linux FireWire protocol stack ieee1394 (until
2010 [10]) oﬀered a command line parameter phys_dma=0
when loading the FireWire kernel module to completely dis-
able DMA [8].
While disabling DMA is an eﬀective protection of DMA
attacks, this solution is not acceptable in many scenarios
due to the implied performance penalty.
A more sophisticated way of disabling DMA for FireWire
is used in Mac OS X Lion with FileVault 2 [1]: FireWire is
only disabled is the host machine enters “sleep” mode, e.g.,
the lid of a laptop is closed. To re-enable DMA, the user
password has to be entered on wake-up of the machine. This
protection helps against DMA attacks, e.g., if a laptop is left
somewhere “unattended”, but does not oﬀer any defense in
case of desktop or server machines that are running most of
the time unattended.
Device Whitelisting.
The DMA attack we have demonstrated requires attach-
ing a malicious device to a target machine’s FireWire port.
The malicious device initiates DMA transfers to carry out
the attack. To do so, however, the target machine’s FireWire
controller has to generally enable DMA transfer for this de-
vice. By default, today’s operating systems enable DMA for
any device attached.
Consequently, one way to mitigate DMA attacks would
be to authenticate any DMA device to the kernel before al-
lowing to perform DMA transfer, i.e., enabling DMA at the
FireWire controller. Only valid, benign FireWire devices
trusted by the user will get permission to use DMA. How-
ever, the FireWire standard does not support device-host
authentication. Enabling strong cryptographic authentica-
tion would require deep changes in the FireWire ﬁrmware
on devices and host controllers.
Still, a weaker form of authentication, simple “identiﬁca-
tion” is possible even with standard FireWire devices and
ﬁrmwares. Each FireWire device comes with a 64 bit Glob-
ally Unique IDentiﬁer (GUID) readable by the kernel. As
soon as a new FireWire device is attached to the FireWire
bus, kernel and host controller reset and re-initialize the
FireWire bus. As part of the initialization, the host con-
troller can enable DMA for all attached devices.
For increased security, instead of simply enabling DMA by
default, the kernel can check in advance the GUID of the at-
tached FireWire device. If the GUID is part of a “whitelist”
of allowed FireWire devices, the kernel will allow DMA for
the host controller, otherwise the kernel will disable DMA.
The only requirement for this is a kernel accessible whitelist
where the user stores the GUID of his trusted FireWire de-
vices. Using the FireWire stack of current Linux kernels, this
whitelisting technique can be implemented in a straightfor-
ward manner by modifying the host controller initialization
code in init_ohci1394_dma.c and ohci.c.
The above identiﬁcation is clearly not authentication:
if
an attacker can spoof or guess the GUID of a trusted device,
an impersonation attack is possible. Still, if the user protects
access to his trusted FireWire devices, the GUID can provide
suﬃcient protection against DMA attacks.
Hardware Disk Encryption.
With hardware disk encryption techniques, the actual en-
cryption and decryption of data is performed by the hard
disk itself and not by the host machine. Only during an ini-
tial phase at, e.g., boot time the host exchanges an encryp-
tion key with the hard disk. DMA attacks are impossible
against hardware disk encryption. Many hard disk manufac-
turers oﬀer hard disk with hardware disk encryption [24, 9,
27]. Although using hardware disk encryption successfully
protects against DMA attacks, current solutions only ﬁll a
niche: they are (hardware) speciﬁc, only support the Win-
dows operating system, often require support for Trusted
Computing hardware on the host computer, and are expen-
sive compared to software-based solutions.
Consequently, by using an IOMMU, the kernel could ex-
plicitly protect certain memory regions against reading or
writing. The availability of an IOMMU would not only
protect against DMA-based attacks, but also render CPU-
bound encryption superﬂuous. As memory regions contain-
ing a cryptographic key can be protected using the IOMMU,
there would be no need to perform encryption outside RAM
anymore.
In practice, only recently Intel and AMD have introduced
IOMMUs (“VT-d” and “AMD-Vi”) for their latest chipsets.
Currently IOMMUs are used in hypervisors to allow safe
DMA transfers between attached devices and guest operat-
ing systems. As a matter of fact, today none of the popular
operating systems supports IOMMU, and enabling support
for IOMMUs requires signiﬁcant changes to the operating
system.
6. RELATED WORK
TreVisor [19] is a CPU-bound encryption system that
isolates the encryption process in a hypervisor (BitVisor)
on top of Linux. In addition, TreVisor uses Intel’s VT-d
IOMMU technology to restrict memory regions accessible by
DMA to protect the integrity of the hypervisor. While eﬀec-
tive, this approach has several drawbacks that render it im-
practical in the real world. First, the use of a hypervisor au-
tomatically disables virtualization software such VirtualBox
and VMware, as well as rendering debug registers inacces-
sible. Second, although the authors use Intel’s AES-NI [11]
technology to compute individual AES rounds in hardware,
performance decreases by up to 50% in this setup. Finally,
Intel’s recent VT-d IOMMU is not used by any major oper-
ating system today, and we do not conjecture its availability
in the near future since using an IOMMU requires major
changes to an operating system and its kernel.
Mac OS X’s FileVault 2 [1] has been reported to dis-
able FireWire and Thunderbolt DMA whenever the com-
puter goes into “sleep mode” (standby), for example as soon
as the user closes the lid of a laptop [14, 6].
If the user
wakes up the computer from sleep, an “unlock password”
has to be entered to resume normal operation and re-enable
DMA. While in theory this is an eﬀective countermeasure
against any DMA attack, it is not applicable to a running
system. Along the same lines, to protect BitLocker disk en-
cryption again DMA attacks, Microsoft suggests disabling
DMA transfer completely [15].
A related hardware attack against disk encryption sys-
tems is the cold boot attack [7]. A cold boot attack exploits
the fact that contents of DRAM memory usually survives
for some amount of time without power. An attacker can
physically remove memory modules from a target machine,
analyze them, and recover sensitive data. Contrary to DMA
attacks, cold boot attacks can be mitigated with CPU-bound
encryption.
IOMMU.
7. CONCLUSIONS
Similar to a traditional memory management unit (MMU),
an IOMMU is a piece of hardware that controls access to
physical memory for peripheral devices. Located between
DMA-capable devices and the physical memory, it trans-
lates virtual addresses as used by DMA devices into physi-
cal memory addresses. Moreover, an IOMMU controls which
device can read or write to which physical memory address.
CPU-bound encryption systems, such as LoopAmnesia
and Tresor, attempt to prevent the disclosure of disk en-
cryption keys from powerful adversaries that have full ring 3
privileges and physical access to the machine. In this paper,
we present Tresor-Hunt, a novel, realistic, and concrete
attack that bypasses the protection aﬀorded by one such
system.
77
Our attack relies on the insight that DMA-capable adver-
saries are not restricted to simply reading physical memory,
but can write arbitrary values to memory as well. Tresor-
Hunt leverages this insight to inject a ring 0 attack payload
that extracts disk encryption keys from the CPU into the
target system’s memory, from which it can be retrieved using
a normal DMA transfer.
Our implementation of this attack demonstrates that it
can be constructed in a reliable and OS-independent manner
that is applicable to any CPU-bound encryption technique,
IA32-based system, and DMA-capable peripheral bus. Fur-
thermore, it does not crash the target system or otherwise
signiﬁcantly compromise its integrity. Our evaluation sup-
ports the OS-independent nature of the attack, as well as its
feasibility in real-world scenarios. Finally, we discuss several
countermeasures that might be adopted to mitigate this at-
tack and render CPU-bound encryption systems viable.
8. REFERENCES
[1] Apple. FileVault 2.
http://support.apple.com/kb/HT4790, 2012.
[2] B. B¨ock. Firewire-based Physical Security Attacks on
Windows 7, EFS and BitLocker.
http://www.securityresearch.at/publications/
windows7_firewire_physical_attacks.pdf, 2009.
[3] A. Boileau. Hit by a Bus: Physical Access Attacks
with Firewire. Ruxcon,
http://www.security-assessment.com/files/
presentations/ab_firewire_rux2k6-final.pdf,
2006.
[4] dm-crypt developers. dm-crypt: a device-mapper
crypto target.
http://www.saout.de/misc/dm-crypt/, 2012.
[5] M. Dornseif. Owned by an iPod: Firewire/1394 Issues.
PacSec, http://md.hudora.de/presentations/
firewire/PacSec2004.pdf, 2004.
[6] T. Garrison. Firewire Attacks Against Mac OS Lion
FileVault 2 Encryption. http://www.frameloss.org/,
2011.
[7] J. Halderman, S. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. Calandrino, A. Feldman, J.Appelbaum,
and E. Felten. Lest We Remember: Cold Boot Attacks
on Encryption Keys. In Proceedings of USENIX
Security Symposium, pages 45–60, San Jose, CA USA,
2008. USENIX Association.
[8] U. Hermann. Physical memory attacks via
Firewire/DMA – Part 1: Overview and Mitigation
(Update) . http://www.hermann-
uwe.de/blog/physical-memory-attacks-via-
firewire-dma-part-1-overview-and-mitigation,
2008.
[9] Hitachi. Safeguarding Your Data with Hitachi Bulk
Data Encryption.
http://www.hgst.com/tech/techlib.nsf/techdocs/
74D8260832F2F75E862572D7004AE077, 2008.
[10] IEEE 1394 FireWire WiKi. JuJu Migration.
https://ieee1394.wiki.kernel.org/index.php/
Juju_Migration, 2012.
[11] Intel. Intel Advanced Encryption Standard
Instructions (AES-NI). http://www.intel.com/, 2010.
[12] N. P. Jr., T. Fraser, J. Molina, and W. Arbaugh.
Copilot – a Coprocessor-based Kernel Runtime
Integrity Monitor. In Proceedings of USENIX Security
Symposium, pages 179–194, San Diego, USA, 2004.
[13] C. Maartmann-Moe. Inception.
http://www.breaknenter.org/projects/inception/,
2011.
[14] C. Maartmann-Moe. Adventures with Daisy in
Thunderbolt-DMA-land: Hacking Macs through the
Thunderbolt interface.
http://www.breaknenter.org/, 2012.
[15] Microsoft. Blocking the SBP-2 driver to reduce 1394
DMA threats to BitLocker.
http://support.microsoft.com/kb/2516445, 2011.
[16] Microsoft. BitLocker Drive Encryption Overview.
http://technet.microsoft.com/en-
us/library/cc732774.aspx, 2012.
[17] T. M¨uller, A. Dewald, and F. Freiling. A Cold-Boot
Resistant Implementation of AES. In Proceedings of
European Workshop on System Security, Paris, FR,
2010.
[18] T. M¨uller, F. Freiling, and A. Dewald. TRESOR runs
encryption securely outside RAM. In Proceedings of
USENIX Security Symposium, San Francisco, CA
USA, 2011. USENIX Association.
[19] T. M¨uller, B. Taubmann, and F. Freiling. TreVisor –
OS-Independent Software-Based Full Disk Encryption
Secure Against Main Memory Attacks. In Proceedings
of the Conference on Applied Cryptography and
Network Security, Singapore, 2012. To appear.
[20] P. Panholzer. Physical Security Attacks on Windows
Vista. https://www.sec-
consult.com/files/Vista_Physical_Attacks.pdf,
2008.
[21] Passware. Passware Kit Forensic 11.7.
http://www.lostpassword.com/kit-forensic.htm,
2012.
[22] K. Poulsen. Kingpin: How One Hacker Took Over the
Billion-Dollar Cybercrime Underground. Crown, 2011.
[23] B. Schneier. Evil Maid Attacks on Encrypted Hard
Drives. http://www.schneier.com/blog/archives/
2009/10/evil_maid_attac.html, October 2009.
[24] Seagate. Momentus 5400 FDE.2.
http://www.seagate.com/docs/pdf/marketing/po_
momentus_5400_fde.pdf, 2008.
[25] P. Simmons. Security Through Amnesia: A
Software-Based Solution to the Cold Boot Attack on
Disk Encryption. In Proceedings of Annual Computer
Security Applications Conference, pages 73–82,
Orlando, FL USA, 2011.
[26] Symantec. PGP Whole Disk Encryption.
http://www.symantec.com/whole-disk-encryption,
2012.
[27] Toshiba. Toshiba Debuts Self-Encrypting Drive
Technology. http://www.prnewswire.com/news-
releases/toshiba-debuts-self-encrypting-drive-
technology-at-rsa-conference-2009-
61822062.html, 2009.
[28] TrueCrypt. Free Open-Source On-the-Fly Encryption.
http://www.truecrypt.org/, 2012.
78