nerabilities, then the exception policy for the shell process
will be reset to NULL and the attacker loses the ability to
read /etc/passwd. Furthermore, the attacker cannot write to
any system binary or install rootkits. Under this policy, an
administrator cannot directly upload ﬁles to replace system
binaries. However, the administrator can upload ﬁles to an-
other directory and login through a remote administration
channel (e.g., through sshd) and then replace system binary
ﬁles with the uploaded ﬁles.
When a high integrity process loads a program that has
an exception policy, the process has special privileges as
speciﬁed by the policy. Even when the process later re-
ceives network trafﬁc and drops integrity, the special privi-
leges remain for the process. However, when a low integrity
process loads a program that has an exception policy, the
process is denied the special privileges in the policy. The
rationale is as follows. Some network administration tools
(such as iptables) must perform network communications
and will thus drop its integrity, so they need to be given
capability exceptions for CAP NET ADMIN. However, we
would not want a low-integrity process to invoke them and
still have the special privileges. On the other hand, some
programs need to invoke other programs when its integrity
is low, and the invoked program needs special privilege. For
example, sendmail needs to invoke procmail when its in-
tegrity is low, and procmail needs to write to the spool direc-
tory which is write-protected. We resolve this by deﬁning
executing relationships between programs. If there is an ex-
ecuting relationship between the program X to the program
Y , then when a process running X executes Y , even if the
process is in the state of low-integrity, the process will have
the special permissions associated with Y after executing.
In the example, we deﬁne an executing relationship from
sendmail to procmail and give procmail the special permis-
sion to write to the spool directory.
3.4 Contamination through ﬁles
As an attacker may be able to control contents in ﬁles
that are not write-protected, a process’s integrity level needs
to drop after reading and executing ﬁles that are not write-
7
protected. However, even if a ﬁle is write-protected, it may
still be written by low-integrity processes, due to the exis-
tence of exception policies. We use one permission bit to
track whether a ﬁle has been written by a low-integrity pro-
cess. There are 12 permission bits for each ﬁle in a UNIX
ﬁle system: 9 of them indicate read/write/execute permis-
sions for user/group/world; the other three are setuid, set-
gid, and the sticky bit. The sticky bit is no longer used for
regular ﬁles (it is still useful for directories), and we use it
to track contamination for ﬁles. When a low-integrity pro-
cess writes to a ﬁle that is write-protected as allowed by an
exception, the ﬁle’s sticky bit is set. A ﬁle is considered to
be low-integrity (potentially contaminated) when either it is
not write-protected, or has the sticky bit set.
When a process reads a low-integrity ﬁle, the process’s
integrity level drops. We do not consider reading a directory
that was changed by a low-integrity process as contamina-
tion, as the directory is maintained by the ﬁle system, which
should handle directory contents properly. When a ﬁle’s
permission is changed from world-writable to not world-
writable, the sticky bit is set, as the ﬁle may have been con-
taminated while it was world-writable.
A low-integrity process is forbidden from changing the
sticky bit of a ﬁle. Only a high-integrity process can reset
the sticky bit by running a special utility program provided
by the protection system. The requirement of using a spe-
cial utility program avoids the problem that other programs
may accidentally reset the bit without the user intending to
do it. This way, when a user clears the sticky bit, it is clear
to the user that she is potentially raising the integrity of the
ﬁle. The special utility program cannot be changed by low-
integrity processes, so that its integrity level is always high.
Similar to the concept of RAP, we introduce ﬁle process-
ing programs (FPP). A process running an FPP maintains
its integrity level even after reading a low-integrity ﬁle. Pro-
grams that read a ﬁle’s content and display the ﬁle on a ter-
minal (e.g., vi, cat, etc.) need to be declared to be FPP.
We observe that our approach for handling ﬁle in-
tegrity is different from existing integrity models (such as
Biba [4]), in which an object has one integrity level.
The integrity level of an object can be used to indicate
two things: (1) the importance level of the object as a con-
tainer (i.e., whether the object is used in some critical ways),
and (2) the quality (i.e., trustworthiness, or, alternatively,
contamination level) of information currently in the object.
These two may not always be the same. When only one
integrity level is used, one can keep track of only one of
the two, which is problematic. Consider, for example, the
system log ﬁles and the mail ﬁles. They are considered to
be contaminated because they are written by processes who
have communicated with the network. However, it is incor-
rect not to protect them, as an attacker who broke into the
system through, say, httpd, would be able to change the log.
UMIP handles this by using a ﬁle’s DAC permission to
determine the importance level of the ﬁle, and using the
sticky bit to track the contamination level. Even if a ﬁle has
the sticky bit set (i.e., considered contaminated), as long as
the ﬁle’s DAC permission is not writable by the world, a
low-integrity process still cannot write to the ﬁle (unless a
policy exception exists). In other words, the set of write-
protected ﬁles and the set of contaminated ﬁles intersect.
This way, ﬁles such as system logs and mails are protected.
This is different from other integrity models such as Biba,
where once an object is contaminated, every subject can
write to it. UMIP’s design reduces the attack surface.
3.5 Files owned by non-system accounts
Not all sensitive ﬁles are owned by a system account. For
example, consider a user account that has been given privi-
leges to sudo (superuser do) all programs. The startup script
ﬁles for the account are sensitive. We follow the approach
of using DAC info in MAC. If a ﬁle is not writable by the
world, then it is write-protected. UMIP allows exceptions
to be speciﬁed for speciﬁc users. Different users may have
different exception policies. An account’s exception policy
may specify global exceptions that apply to all processes
with that user’s user-id. For example, a user may specify
that a directory can be written by any low-integrity process
and uses the directory to store all ﬁles from the network.
If the system administrator does not want to enable in-
tegrity protection for a user, so that the user can use the
system transparently (i.e., without knowing the existence of
UMIP), then the policy can specify a global exception for
the home directory of the user with recursion so that all
low-integrity processes with the user’s user-id can access
the user’s ﬁles. We point out that even with such a global
exception, UMIP still offers useful protection. First, the
exception will be activated only if the process’s effective
user id is that user. Recall that we disallow a low-integrity
process from using setuid to change its user id to another
user account. This way, if an attacker breaks in through one
daemon program owned by account A, the attacker cannot
write to ﬁles owned by account B, even if a global excep-
tion for B is in place. Second, if the user is attacked while
using a network client program, and the users’ ﬁles are con-
taminated. These ﬁles will be marked by the sticky bit, and
any process that later accesses them will drop its integrity
level; the overall system integrity is still protected.
3.6 Design principles in UMIP
We now brieﬂy examine how the design of UMIP illus-
trates the principles identiﬁed in Section 2. We follow prin-
ciple 1 and aim at providing good enough security with a
high level of usability. Following principles 2 and 3, we
8
use an existing mechanism (namely, LSM) and focus on
designing a policy model to achieve the security objective
laid out in the beginning of Section 3. A major part of the
work in developing the UMIP model is in designing the ex-
ception mechanisms (principle 4). Regarding principle 5,
our approach differs from strict least privilege in two im-
portant ways. First, no limitation is placed on high-integrity
processes, so they may operate with more privileges than
strictly necessary. Second, non-sensitive ﬁles are not pro-
tected. Both design choices were made because they do
not compromise our security objective and they increase the
simplicity (and hence usability) of our model. Finally, fol-
lowing principle 6, UMIP uses ﬁles and capabilities in pol-
icy speciﬁcations, rather than exposing kernel data struc-
tures in the policy speciﬁcation interface.
We believe that using DAC information is one key to the
usability of UMIP. This makes deployment and installation
of new software easy, as no labeling process is needed. This
also uses concepts that users are already familiar with.
3.7 Other integrity models
The UMIP model borrows concepts from classical work
on integrity models such as Biba [4] and LOMAC [10].
Here we discuss UMIP’s novel features.
The Biba [4] model has ﬁve mandatory integrity poli-
cies: (1) the strict integrity policy, in which subject and ob-
ject integrity labels never change; (2) the subject low-water
mark policy, in which a subject’s integrity level drops af-
ter reading a low-integrity object; (3) the object low-water
mark policy, in which an object’s integrity level drops af-
ter being written by a low-integrity subject; (4) the low-
water mark integrity audit policy, which combines the pre-
vious two and allow the integrity levels of both subjects and
objects to drop; (5) the ring policy, which allows subjects
to read low-integrity objects while maintaining its integrity
level. LOMAC [10] is an implementation of the subject
low-water mark policy for operating systems. Each object
is assigned an integrity level. Once assigned, an object’s
level never changes. It aims at protecting system integrity
and places emphasis on usability. Compared with Biba and
LOMAC, UMIP has the following novel features.
First, UMIP supports a number of ways to specify some
programs as partially trusted to allow them to violate the de-
fault contamination rule or the default restrictions on low-
integrity processes in some limited way. This enables one
to use existing applications and administration practices,
while limiting the attack surfaces exposed by such trust.
Second, in UMIP a ﬁle essentially has two integrity level
values: whether it is protected and whether it is contami-
nated. The former is determined by the DAC permission,
and does not change unless the ﬁle’s permission changes.
The latter is tracked using the sticky bit for protected ﬁles,
and may change dynamically. The advantages of our ap-
proach is explained in Section 3.4.
Third, UMIP’s integrity protection is compartmental-
ized by users. Even if one user has an exception policy
that allows all low-integrity processes to access certain ﬁles
owned by the user, another user’s low-integrity process is
forbidden from such access.
Fourth, UMIP allows low-integrity ﬁles to be upgraded
to high-integrity. (This feature also exists in LOMAC.) This
means that low-integrity information (such as ﬁles down-
loaded from the Internet) can ﬂow into high-integrity ob-
jects (such as system binaries); however, such upgrade must
occur explicitly, i.e., by invoking a special program in a
high-integrity channel to remove the sticky bit. Allowing
such channels is necessary for patching and system ungrade.
Fifth, UMIP offers some conﬁdentiality protection, in
addition to integrity protection. For example, low-integrity
processes are forbidden from reading ﬁles owned by a sys-
tem account and not readable by the world.
Finally, UMIP uses DAC information to determine in-
tegrity and conﬁdentiality labels for objects, whereas in LO-
MAC each installation requires manual speciﬁcation of a
mapping between existing ﬁles and integrity levels.
4 An Implementation under Linux
We have implemented the UMIP model in a prototype
protection system for Linux, using the Linux Security Mod-
ule (LSM) framework. We have been using evolving proto-
types of the system within our group for a few months.
4.1 Implementation
The basic design of our protection system is as follows.
Each process has a security label, which contains (among
other ﬁelds) a ﬁeld indicating whether the process’s in-
tegrity level is high or low. When a process issues a request,
it is authorized only when both the Linux DAC system and
our protection system authorize it. A high-integrity process
is not restricted by our protection system. A low-integrity
process by default cannot perform any sensitive operation.
Any exception to the above default policy must be speciﬁed
in a policy ﬁle, which is loaded when the module starts.
The Policy Speciﬁcation The policy ﬁle includes a list
of entries. Each entry contains four ﬁelds: (1) a path that
points to the program that the entry is associated with; (2)
the type of a program, which includes three bits indicat-
ing whether the program is a remote administration point
(RAP), a local service point (LSP), and a ﬁle processing
point (FPP); (3) a list of exceptions; and (4) a list of exe-
cuting relationships, which is a list of programs that can be
executed by the current program with the exception policies
9
Syntax
(f, read)
(f, full)
(d, read, R)
(d, full, R)
Meaning
f is a regular ﬁle or a directory Allowed to read f
f is a regular ﬁle or a directory Allowed to do anything to f
d is a directory
d is a directory.
Allowed to read any ﬁle in d recursively.
Allowed to do anything to any ﬁle in d recursively.
Figure 2. The four forms of ﬁle exceptions in UMIP.
enabled, even if the process is low integrity. If a program
does not have a corresponding entry, the default policy is
that the program is not an RAP, a LSP or an FPP, and the ex-
ception list and the executing relationship list are empty. An
exception list consists of two parts, the capability exception
list and the ﬁle exception list, corresponding to exceptions
to the two categories of security critical operations. A ﬁle
exception takes one of the four forms shown in the Figure 2.
The authorization provided by ﬁle exceptions includes
only two levels: read and full. We choose this design be-
cause of its simplicity. In this design, one cannot specify
that a program can write a ﬁle, but not read. We believe
that this is acceptable because system-related ﬁles that are
read-sensitive are also write-sensitive. In other words, if the
attacker can write to a ﬁle, then he can pose at least compa-
rable damage to the system as he can also read the ﬁle. A
policy of the form “(d, read, R)” is used in the situation that
a daemon or a client program needs to read the conﬁgura-
tion ﬁles in the directory d. A policy of the form “(d, full,
R)” is used to deﬁne the working directories for programs.
4.2 Evaluation
We evaluate our design of the UMIP model and the im-
plementation under Linux along the following dimensions:
usability, security, and performance.
Usability One usability measure is transparency, which
means not blocking legitimate accesses generated by nor-
mal system operations. Another measure is ﬂexibility,
which means that one can conﬁgure a system according to
the security needs. A third usability measure is ease of con-
ﬁguration. Several features of UMIP contribute to a high
level of usability: the use of existing DAC information, the
existence of RAP, LAP, and FPP, and the use of familiar
abstractions in the speciﬁcation of policies. To experimen-
tally evaluate the transparency and ﬂexibility aspects, we
established a server conﬁgured with Fedora Core 5 with ker-
nel version 2.6.15, and enabled our protection system as a
security module loaded during system boot. We installed
some commonly used server applications (e.g., httpd, ftpd,
samba, svn) and have been providing services to our re-
search group over the last few months. The system works
with a small and simple policy speciﬁcation as given in Fig-
ure 3. With this policy, we allow remote administration
through the SSH daemon by declaring sshd as RAP. In this
setting, one can also do remote administration through X
over SSH tunneling and VNC over SSH tunneling. If one
wants to allow remote administration through VNC without
SSH tunneling, then he can declare the VNC Server as a
RAP.
Security Most attack scenarios that exploit bugs in
network-facing daemon programs or client programs can be
readily prevented by our protection system. Successful ex-
ploitation of vulnerabilities in network-facing processes of-
ten results in a shell process spawned from the vulnerable
process. After gaining shell access, the attacker typically
tries downloading and installing attacking tools and rootk-
its. As these processes are low-integrity, the access to sensi-
tive operations is limited to those allowed by the exception.
Furthermore, if the attacker loads a shell or any other pro-
gram, the new process has no exception privileges.