Fig. 4. Empirical recv ts- orig ts
PMF
Fig. 5. Response error; note hourly
peaks
behind a middlebox, suggesting that some operating systems implement the
reﬂect behavior and that this is a less common middlebox modiﬁcation. The lazy
with MSB set (but non-ms counting) behavior, on the other hand, was inferred
to be behind a middlebox in 333 out of 500 random IP addresses, suggesting it is
most often middleboxes that are causing the lazy-MSB-set ﬁngerprint. Finally,
about half of the constant 0 IP addresses show middlebox tampering in tracebox
runs, suggesting that this behavior is both an operating system implementation
of timestamp replies as well as a middlebox modiﬁcation scheme.
5.4 Geolocation
Figure 5 displays the probability distribution of response error, e.g., recv ts −
orig ts, after correct replies have been removed from the set of standard request
type responses. While there is a level of uniform randomness, we note the peaks
at hour intervals. We surmise that these represent hosts that have correct time,
but return a timezone-relative response (in violation of the standard [21] where
responses should be relative to UTC). The origin of timezone-relative responses
may be a non-conformant implementation. Alternatively, these responses may
simply be an artifact of non-NTP synchronized machines where the adminis-
trator instead sets the localtime correctly, but incorrectly sets the timezone. In
this case, the machine’s notion of UTC is incorrect, but incorrect relative to the
set timezone. Nevertheless, these timezone-relative responses eﬀectively leak the
host’s timezone. We note the large spike in the +9 timezone, which covers Japan
and South Korea; despite the use of nmap’s OS-detection feature, and examining
web pages and TLS certiﬁcates where available, we could not deﬁnitively identify
a speciﬁc device manufacturer or policy underpinning this eﬀect.
To evaluate our ability to coarsely geolocate IP addresses reporting a
timezone-relative timestamp, we begin with ∼34,000 IP addresses in this cate-
gory obtained by sending a single probe to every hitlist IP from our Boston van-
tage. Using the reply timestamps, we compute the remote host’s local timezone
94
E. C. Rye and R. Beverly
oﬀset relative to UTC to infer the host’s timezone. We then compare our inferred
timezone with the timezone reported by the MaxMind GeoLite-2 database [17].
For each IP address, we compare the MaxMind timezone’s standard time
UTC-oﬀset and, if applicable, daylight saving time UTC oﬀset, to the timestamp-
inferred oﬀset. Of the 34,357 IP addresses tested, 32,085 (93%) correctly matched
either the standard timezone UTC oﬀset or daylight saving UTC oﬀset, if the
MaxMind-derived timezone observes daylight saving time. More speciﬁcally,
18,343 IP addresses had timestamp-inferred timezone oﬀsets that matched their
MaxMind-derived timezone, which did not observe daylight saving time. 11,188
IP addresses resolved to a MaxMind timezone, whose daylight saving time oﬀ-
set matched the oﬀset inferred from the timestamp. 2,554 IP addresses had
timestamp-inferred UTC oﬀsets that matched their MaxMind-derived standard
time oﬀset for timezones that do observe daylight saving time. Of the inferred
UTC-oﬀsets that were not correct, 1,641 did not match either the standard time
oﬀset derived from MaxMind, or the daylight saving time oﬀset, if it existed,
and 631 IP addresses did not resolve to a timezone in MaxMind’s free database.
6 Conclusions and Future Work
We observe a wide variety of implementation behavior of the ICMP timestamp
reply type, caused by timestamps’ lack of a modern use but continued require-
ment to be supported. In particular, we are able to uniquely ﬁngerprint the
behavior of several major operating systems and kernel versions, and geolocate
Internet hosts to timezone accuracy with >90% success.
As future work, we intend to exhaustively scan and classify the IPv4 Internet,
scan a subset with increased frequency over a sustained time period, and to do so
many vantage points. We further plan to integrate the OS-detection capabilities
we uncover in this work into nmap, and add tracebox functionality to sundial
in order to better detect middlebox tampering with ICMP timestamp messages.
Acknowledgments. We thank Garrett Wollman, Ram Durairajan, and Dan Ander-
sen for measurement infrastructure, our shepherd Rama Padmanabhan, and the anony-
mous reviewers for insightful feedback. Views and conclusions are those of the authors
and not necessarily those of the U.S. government.
Appendix A: Linux htons() Bug
While investigating the source code of open-source operating systems’ imple-
mentation of ICMP timestamps, we observed a ﬂaw that allows ﬁne-grained
ﬁngerprinting of the Linux kernel version 3.18. The speciﬁc bug that allows
this ﬁngerprinting was introduced in March 2016. An update to the Internet
timestamp generating method in af inet.c errantly truncated the 32-bit times-
tamp to a 16-bit short via a call to the C library function htons() rather than
htonl(). When this incorrect 16-bit value is placed into the 32-bit receive and
transmit timestamp ﬁelds of a timestamp reply, it causes the lower two bytes
Sundials in the Shade
95
to be zero and disables the responding machine’s ability to generate a correct
reply timestamp at any time other than midnight UTC. This presents a unique
signature of devices running the Linux kernel built during this time period. In
order to identify these devices on the Internet, we ﬁlter for ICMP timestamp
replies containing receive and transmit timestamp values with zeros in the lower
two bytes when viewed as a 32-bit big-endian integer. While devices that are
correctly implementing ICMP timestamp replies will naturally reply with times-
tamps containing zeros in the lower two bytes every 65,536 milliseconds, the
probability of multiple responses containing this signature drops rapidly as the
number of probes sent increases.
Being derived directly from the Linux kernel, the 3.18 version of the Android
kernel also includes the ﬂawed af inet.c implementation containing the same
htons() truncation, allowing for ICMP timestamp ﬁngerprinting of mobile
devices as well.
While Linux 3.18 reached its end of life [14] in 2017, we observe hosts on the
Internet whose signatures suggest this is the precise version of software they are
currently running. Unfortunately, this presents an adversary with the opportu-
nity to perform targeted attacks.
Appendix B: scans.io Ground Truth
We use Telnet and CWMP banners in public scans.io as a source of ground
truth. It is possible to override the default text of these protocol banners, and rec-
ognize that this is a potential source of error. However, we examine the manufac-
turer counts in aggregate under the assumption that most manufacturer strings
are legitimate. We believe it unlikely that users have modiﬁed their CWMP
conﬁguration on their customer premises equipment to return an incorrect man-
ufacturer.
Parsing the Telnet and CWMP scans for strings containing the names
of major network device manufacturers provided over two million unique IP
addresses. Table 5 summarizes the results; note that for some manufacturers
(e.g., Arris) approximately the same number of IPs were discovered through the
Telnet scan as the CWMP scan, for others (e.g., Cisco and Huawei) CWMP
provided an order of magnitude greater number of IPs, and still others (e.g.,
Mikrotik and Netgear) appeared in only one of the two protocol scans. Note
that these numbers are not the number of timestamp-responsive IP addresses
denoted by n in Figs. 2 and 3.
With the IP addresses we obtained for each manufacturer, we then run
sundial to each set in order to elicit timestamp reply ﬁngerprints and deter-
mine whether diﬀerent manufacturers tend to exhibit unique reply behaviors.
Figures 2 and 3 display the incidence of timestamp reply ﬁngerprints for a sub-
set of the manufacturers we probed, and provide some interesting results that
we examine here in greater detail.
No manufacturer exhibits only a singular behavior. We attribute this variety
within manufacturers to changes in their implementation of timestamp replies
96
E. C. Rye and R. Beverly
Table 5. Unique IP addresses per manufacturer for each scan
Manufacturer Telnet count CWMP count
Arris
Cisco
H3C
HP
Huawei
Mikrotik
Netgear
Sercomm
Ubiquiti
Zhone
ZTE
Zyxel
8,638
29,135
80,445
24,027
170,710
190,484
-
-
598
6,999
17,972
5,902
5,281
1,298,761
-
-
2,377,079
-
17,723
899,492
-
-
560,177
-
over time, diﬀerent implementations among diﬀerent development or product
groups working with diﬀerent code bases, and the incorporation of outside imple-
mentations inherited through acquisitions and mergers.
Second, we are able to distinguish broad outlines of diﬀerent manufacturers
based on the incidence of reply ﬁngerprints. In Fig. 2, we note that among the
top six manufacturers, only Huawei had a signiﬁcant number of associated IP
addresses (∼10%) that responded with the checksum-lazy behavior. More than
half of the Cisco IP addresses from the Telnet scan exhibited the lazy behav-
ior with the most signiﬁcant bit set while counting milliseconds, a far greater
proportion than any other manufacturer. Also noteworthy is that none of the
manufacturers represented in the Telnet scan exhibits large numbers of correct
replies. In our Telnet data, Mikrotik devices responded with a correct timestamp
reply roughly 25% of the time, a higher incidence than any other manufacturer.
This suggests that perhaps certain Mikrotik products have NTP enabled by
default, allowing these devices to obtain correct time more readily than those
that require administrator interaction. Our CWMP results in Fig. 3 demonstrate
the ability to distinguish manufacturer behavior in certain cases as well, we note
the >70% of Sercomm devices that exhibit only the lazy behavior, as well as
Sercomm exhibiting the only timezone-relative timekeeping behavior among the
CWMP manufacturers.
Finally, we note diﬀerences between the protocol scans among IP addresses
that belong to the same manufacturer. Cisco, Huawei, and ZTE appear in both
protocol results in appreciable numbers, and are represented in both ﬁgures in
Sect. 4.2. Although Cisco devices obtained from the Telnet scan infrequently
(∼10%) respond with correct timestamps, in the CWMP data the proportion
is nearly 40%. Huawei devices from the Telnet data are generally lazy respon-
ders that count in milliseconds, however, this same behavior occurs only half as
Sundials in the Shade
97
frequently in the CWMP data. Further, the ﬁngerprint consisting solely of the
lazy behavior represents nearly a quarter of the CWMP Huawei devices, while
it is insigniﬁcant in the Telnet Huawei data. While the diﬀerences between the
Telnet and CWMP data are less pronounced for ZTE, they exist as well in the
lack of appreciable numbers of ZTE devices setting the most signiﬁcant bit in
replies within the CWMP corpus.
Appendix C: Timezone-Relative Behavior
Figure 5 displays the probability mass function of the diﬀerences between the
receive and originate timestamps for a sundial scan conducted on 9 September
2018 from the Boston vantage after responses with correct timestamps have been
removed. Discernible peaks occur at many of the hourly intervals representing
timezone-relative responders, rising above a base level of randomness. The hourly
oﬀsets in Fig. 5 may need to be normalized to the range of UTC timezone oﬀsets,
however. For example, depending on the originate timestamp value, a responding
host’s receive timestamp at a UTC oﬀset of +9 may appear either nine hours
ahead of the originate timestamp, or 15 h behind, as −15 ≡ 9(mod 24). In Fig. 5
we see large spikes at both +9 and −15 h, but in reality these spikes represent
the same timezone.
Table 6. Inferred UTC-oﬀsets from timestamp replies
UTC oﬀset −12 −11 −10 −9 −8 −7 −6 −5
Count
73
7
1
3
386 476 666 1,763 2,660 2
−4
−3.5 −3
246
−2 −1
228 5
1
2
7,215 1,819
UTC oﬀset 3
3.5
Count
449
8
4
62
4.5 5
5.5
6
3
87
17
14
6.5
13
7
8
9
9.5
10
11
565
3,496 13,861 6
215 11
We identify timezone-relative responses systematically by computing the
local time in milliseconds for each of the UTC-oﬀsets detailed in Table 6, given
the originate timestamp contained in the timestamp response. We then compare
each candidate local timezone’s originate timestamp to the receive timestamp
in the reply. If the candidate originate timestamp is within the 200 ms correct-
ness bound established in Sect. 5.2, we classify the IP address as belonging to
the timezone that produced the correct originate timestamp. Table 6 details the
number of timezone-relative responders we identiﬁed during the 9 September
sundial scan.
References
1. Anagnostakis, K.G., Greenwald, M., Ryger, R.S.: cing: Measuring network-internal
delays using only existing infrastructure. In: Twenty-Second Annual Joint Confer-
ence of the IEEE Computer and Communications, vol. 3, pp. 2112–2121 (2003)
98
E. C. Rye and R. Beverly
2. Beverly, R., Berger, A.: Server siblings: identifying shared IPv4/IPv6 infrastruc-
ture via active ﬁngerprinting. In: Mirkovic, J., Liu, Y. (eds.) PAM 2015. LNCS,
vol. 8995, pp. 149–161. Springer, Cham (2015). https://doi.org/10.1007/978-3-319-
15509-8 12
3. Buchholz, F., Tjaden, B.: A brief study of time. Digit. Invest. 4, 31–42 (2007)
4. Cristea, M., Groza, B.: Fingerprinting smartphones remotely via ICMP times-
tamps. IEEE Commun. Lett. 17(6), 1081–1083 (2013)
5. Cymru, Team: IP to ASN mapping (2008). https://www.team-cymru.org/IP-ASN-
mapping.html
6. Desmond, L.C.C., Yuan, C.C., Pheng, T.C., Lee, R.S.: Identifying unique devices
through wireless ﬁngerprinting. In: Proceedings of the First ACM Conference on
Wireless Network Security, pp. 46–55 (2008)
7. Detal, G., Hesmans, B., Bonaventure, O., Vanaubel, Y., Donnet, B.: Revealing
middlebox interference with tracebox. In: ACM SIGCOMM Internet Measurement
Conference, pp. 1–8 (2013)
8. Durumeric, Z., Wustrow, E., Halderman, J.A.: ZMap: fast internet-wide scanning
and its security applications. In: USENIX Security, pp. 605–620 (2013)
9. Fan, X., Heidemann, J.: Selecting representative IP addresses for Internet topol-
ogy studies. In: ACM SIGCOMM Internet Measurement Conference, pp. 411–423
(2010)
10. FreeBSD: FreeBSD Kernel ICMP Code, SVN Head (2018). https://svnweb.freebsd.
org/base/head/sys/netinet/ip icmp.c?revision=336677
11. Internet Engineering Standards Group:
Internet Control Message Protocol
(ICMP) Parameters (2018). https://www.iana.org/assignments/icmp-parameters/
icmp-parameters.xhtml
12. Kohno, T., Broido, A., Claﬀy, K.C.: Remote physical device ﬁngerprinting. IEEE
Trans. Dependable Secure Comput. 2(2), 93–108 (2005)
13. Linux: Linux Kernel ICMP Code, Git Head (2018). https://github.com/torvalds/
linux/blob/master/net/ipv4/icmp.c
14. Linux: The Linux Kernel Archives (2018). https://www.kernel.org/
15. Lyon, G.: Nmap Security Scanner. https://nmap.org
16. Mahajan, R., Spring, N., Wetherall, D., Anderson, T.: User-level internet path
diagnosis. ACM SIGOPS Oper. Syst. Rev. 37(5), 106–119 (2003)
17. MaxMind: GeoLite2 IP Geolocation Databases (2018). https://dev.maxmind.com/
geoip/geoip2/geolite2/
18. Mills, D., Martin, J., Burbank, J., Kasch, W.: Network Time Protocol Version
4: Protocol and Algorithms Speciﬁcation. RFC 5905 (Proposed Standard), June
2010. http://www.ietf.org/rfc/rfc5905.txt
19. Mills, D.: DCNET Internet Clock Service. RFC 778 (Historic), April 1981. http://
www.ietf.org/rfc/rfc778.txt
20. MITRE: CVE-1999-0524. Available from MITRE, CVE-ID CVE-1999-0524,
August 1999. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0524
21. Postel, J.: Internet Control Message Protocol. RFC 792 (INTERNET STAN-
DARD), September 1981. http://www.ietf.org/rfc/rfc792.txt
22. Rye, E.C.: Sundial ICMP Timestamp Inference Tool (2019). https://www.cmand.
org/sundial
23. Scans.io: Internet-Wide Scan Data Repository. https://scans.io
24. Scheitle, Q., Gasser, O., Rouhi, M., Carle, G.: Large-scale classiﬁcation of IPv6-
IPv4 siblings with variable clock skew. In: 2017 Network Traﬃc Measurement and
Analysis Conference (TMA), pp. 1–9. IEEE (2017)