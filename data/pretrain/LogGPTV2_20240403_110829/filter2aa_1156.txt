# The Ether Wars: Exploits, Counter-Exploits, and Honeypots on Ethereum
**Date: August 11, 2019**

## About ConsenSys Diligence and MythX

- **ConsenSys Diligence**: We audit smart contracts and develop security tools for smart contract developers.
- **Contributors/Influencers**:
  - Joran Honig, Nikhil Parasaram, Nathan Peercy (Mythril Core Team)
  - Sam Sun (shared his bot research)
  - Many other researchers
  - The Ethereum security community

## Overview of the Talk

- Fast symbolic execution of EVM bytecode
- Exploit automation
- Exploiting script kiddies
- Exploiting those who try to exploit script kiddies

## What is Ethereum?

- **Distributed State Machine**: Ethereum is a distributed state machine that executes code on a decentralized network.

## EVM Smart Contracts

- **Small Programs**: Written in a simple, stack-based language.
- **Immutable**: Once deployed, they cannot be changed.
- **Gas Costs**: Executing instructions costs gas.
- **Block Gas Limit**: Computation in a single transaction is bounded by the block gas limit.
- **State Mutation**: State can be mutated over multiple transactions.

## Symbolic Execution (1)

- **Example**:
  ```plaintext
  grantSurvival == True
  grantSurvival == False
  JUMPI
  STOP
  SELFDESTRUCT
  CALLDATA
  LOAD
  ISZERO
  ISZERO
  CALLDATA
  LOAD
  ISZERO
  ISZERO
  JUMPI
  []
  [0x1]
  [0x0]
  [0x1]
  []
  []
  [0x0]
  [0x1]
  [0x0]
  []
  ```

## Symbolic Execution (2)

- **Symbolic Calldata**:
  ```plaintext
  JUMPI
  STOP
  SELFDESTRUCT
  CALLDATA
  LOAD
  ISZERO
  ISZERO
  []
  [sym_calldata]
  [bool(sym_calldata == 0)]
  [bool(sym_calldata == 0) == 0)]
  bool(sym_calldata == 0) == 0) == True
  bool(sym_calldata == 0) == 0) == False
  ```

## How to Kill the Cat?

- **Symbolic Calldata**:
  ```plaintext
  JUMPI
  STOP
  SELFDESTRUCT
  CALLDATA
  LOAD
  ISZERO
  ISZERO
  []
  [sym_calldata]
  [bool(sym_calldata == 0)]
  [bool(sym_calldata == 0) == 0)]
  bool(sym_calldata == 0) == 0) == True
  bool(sym_calldata == 0) == 0) == False
  grantSurvival = ((0 == 0) == 0) == True
  grantSurvival = (True == False) == True
  grantSurvival = False
  ```

## Further Reading

- **Introduction to Mythril and Symbolic Execution (Joran Honig)**:
  - [Link](https://medium.com/@joran.honig/introduction-to-mythril-classic-and-symbolic-execution-ef59339f259b)
- **Smashing Smart Contracts**:
  - [GitHub](https://github.com/b-mueller/smashing-smart-contracts)
- **teether: Gnawing at Ethereum to Automatically Exploit Smart Contracts (J. Krupp, C. Rossow)**:
  - [PDF](https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-krupp.pdf)

## Mythril Basic Usage

```bash
$ pip install mythril
$ myth analyze <contract_name>
$ myth analyze -a <address>
```

## Demo 1

- **Level 1 of the Ethernaut Challenge**:
  - Practice smart contract hacking with these resources:
    - [Ethernaut](https://ethernaut.openzeppelin.com)
    - [Capture the Ether](https://capturetheether.com)
    - [Blockchain CTF](https://blockchain-ctf.securityinnovation.com/)

## Mythril CLI Arguments

```bash
$ myth -v4 analyze -t4 --execution-timeout 3600
- Exhaustively execute 4 transactions
- Terminate after 1 hour and return results
- Verbose output
```

## Over-approximation vs. Concrete State Variables

- **State Space Explosion Problem**:
  - Discusses the challenges of managing large state spaces in symbolic execution.

## Mythril Pruning Algorithms

- **Prune Unreachable Paths**: Given a concrete initial state.
- **Prune Pure Functions**: If the STOP state is the same as the initial state.
- **Dynamic Pruning**: Execute a path only if:
  - It is newly discovered.
  - A state variable modified in the previous transaction is read somewhere along the path.
  - A state variable is written to that we know is being read elsewhere.
- **Similar Method**: teEther uses a similar method.
  - [Link](https://www.usenix.org/node/217465)

## Pruning Effectiveness

- **Fully Execute 63 Samples from the Smart Contract Weakness Registry**:
  - [Registry](https://smartcontractsecurity.github.io/SWC-registry/)
  - **Speedup**:
    - 1 TX: 297s
    - 2 TX: 2,346s → 1,919s → 1,152s (103.5% speedup)
    - 3 TX: 9,943s → 6,072s → 2,242s (343.49% speedup)
    - 4 TX: too long → 13,312s → 7,440s (> 400% speedup)

## Other Optimizations (WIP)

- **Parallelization**
- **State Merging**: Merge path constraints and world state by disjunction (c1 v c2).
- **Function Summaries**: Store constraints imposed on state when executing paths ("summary").
- **FastSMT**
- **(...)**

## Scrooge McEtherface

- **Transform Mythril Issues into Runnable Exploits**:
  - **Payload Wrapper**:
    - Hides the transactions from frontrunning bots.
    - Allows reverting everything if the attack fails.
  - **Demo**:
    - [GitHub](https://github.com/b-mueller/scrooge-mcetherface)

## Early Retirement Unlocked?

- **Security Engineer at ConsenSys Diligence**:
  - ~2 years in the blockchain space.
  - Developer with a hacker’s heart.
  - @CleanUnicorn
- **Daniel Luca**

## Main Points

- **Karl**:
  - Scanning the blockchain.
  - Finding vulnerable contracts.
  - Validating found exploits.
- **Theo**:
  - Transaction pool.
  - Frontrunning transactions.

## Karl

- **Scanning the Blockchain**:
  - Understand Ethereum.
  - Use Python and JSON RPC.
  - Requires lots of computational resources and time.

## Get Block By Number

- **Get Transaction Receipt**:
  - Details on how to retrieve and process blocks and transactions.

## Add Ether to a Contract

- **Requirements**:
  - Needs to have a payable method.
  - Self-destruct to it.
  - Mine as the coinbase.

## Theo

- **Mempool**:
  - Transaction ordering based on gas price.
  - Sorted descendingly by gasPrice.

## Frontrunning Demo

- **Does This Work in the Wild?**:
  - Discusses real-world scenarios and potential failures.

## When Does It Fail?

- **Proxy Contract**:
  - Miner adds the transaction without being in the mempool first.
  - Transactions are more specific (signing a key with my account).
  - Ethereum client decides to be unresponsive.

## Thank You!

- **Q&A Session**