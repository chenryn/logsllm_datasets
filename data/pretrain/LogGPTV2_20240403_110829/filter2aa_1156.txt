The Ether Wars: Exploits, 
counter-exploits and 
honeypots on Ethereum
AUGUST 11, 2019
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
2
About ConsenSys Diligence and MythX
• We audit smart contracts and build security tools for smart 
contract developers
• Other who contributed to / influenced this talk:
○ Joran Honig, Nikhil Parasaram, Nathan Peercy (Mythril Core Team)
○ Sam Sun (shared his bot research)
○ Many other researchers
○ The awesome Ethereum security community
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
In this Talk
•Fast symbolic execution of EVM bytecode
•Exploit automation
•Exploiting script kiddies
•Exploiting those who try to exploit script kiddies
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
• Distributed state machine
What is Ethereum?
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
5
• Small programs written in a simple, stack-based language
• Immutable: Once deployed they can’t be changed
• Executing instructions costs gas
• Computation in a single transaction is bounded by the block gas limit
• However, state can be mutated over multiple transactions
EVM Smart Contracts
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
6
Symbolic Execution (1)
grantSurvival == True
grantSurvival == False
JUMPI
STOP
SELFDEST
RUCT
CALLDATA
LOAD
ISZERO
ISZERO
CALLDATA
LOAD
ISZERO
ISZERO
JUMPI
[]
[0x1]
[0x0]
[0x1]
[]
[]
[0x0]
[0x1]
[0x0]
[]
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
7
Symbolic Execution (2)
Symbolic Calldata
JUMPI
STOP
SELFDEST
RUCT
CALLDATA
LOAD
ISZERO
ISZERO
[]
[sym_calldata]
[bool(sym_calldata == 0)]
[bool(sym_calldata == 0) == 0)]
bool(sym_calldata == 0) == 0) == True
bool(sym_calldata == 0) == 0) == False
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
8
How to Kill the Cat?
Symbolic Calldata
JUMPI
STOP
SELFDEST
RUCT
CALLDATA
LOAD
ISZERO
ISZERO
[]
[sym_calldata]
[bool(sym_calldata == 0)]
[bool(sym_calldata == 0) == 0)]
bool(sym_calldata == 0) == 0) == True
bool(sym_calldata == 0) == 0) == False
grantSurvival = ((0 == 0) == 0) == True
grantSurvival = (True == False) == True
grantSurvival = False
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
9
Further Reading
● Introduction to Mythril and Symbolic Execution (Joran Honig)
○ https://medium.com/@joran.honig/introduction-to-mythril-classic-a
nd-symbolic-execution-ef59339f259b
● Smashing Smart Contracts
○ https://github.com/b-mueller/smashing-smart-contracts
● teether: Gnawing at Ethereum to Automatically Exploit Smart Contracts 
(J. Krupp, C. Rossow)
○ https://www.usenix.org/system/ﬁles/conference/usenixsecurity18/s
ec18-krupp.pdf
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Mythril Basic Usage
$ pip install mythril
$ myth analyze [:contract_name]
$ myth analyze -a 
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
1
1
Demo 1
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
1
2
Demo 1
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Mythril CLI Args
$ myth -v4 analyze -t4 --execution-timeout 3600 
Exhaustively execute 4 
transactions
Terminate after 1 hour and 
return results
Verbose output
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Demo 2
• Level 1 of the Ethernaut Challenge
• To practice smart contract
hacking check out these awesome
pages:
https://ethernaut.openzeppelin.com
https://capturetheether.com
https://blockchain-ctf.securityinnovation.com/
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Demo 2
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Over-approximation vs. concrete 
state variables
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
State Space Explosion Problem
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Mythril Pruning Algorithms
• Prune unreachable paths given concrete initial state
• Prune pure functions (STOP state == initial state)
• Dynamic pruning. Execute a path only if:
○ It is newly discovered
○ A state variable that was modiﬁed in the previous transaction is read 
somewhere along the path
○ Somewhere along this path, a state variable is written to that we know 
is being read elsewhere
teEther uses a similar method: https://www.usenix.org/node/217465
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Pruning Effectiveness
Fully execute 63 samples from the smart contract weakness registry
https://smartcontractsecurity.github.io/SWC-registry/
Base
Prune Pure Funcs
Dynamic Pruning
Speedup
1 TX
297s
N/A
N/A
N/A
2 TX
2,346s
1,919s
1,152s
103.5%
3 TX
9,943s
6,072s
2,242s
343.49%
4 TX
too long
13,312s
7,440s
> 400%
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Other Optimizations (WIP)
• Parallelisation
• State merging
○ Merge path constraints and world state by disjunction (c1 v c2)
• Function summaries 
○ Store constraints imposed on state when executing paths (“summary”)
○ In subsequent runs, apply summary via conjunction instead of re-executing 
the same code
• FastSMT
• (...)
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Scrooge McEtherface (1)
• Transform Mythril issues into runnable exploits
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Scrooge McEtherface (2)
Payload wrapper
○ Hides the transactions from frontrunning bots
○ Allows to revert everything if the attack fails
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Scrooge McEtherface
DEMO!
https://github.com/b-mueller/scrooge-mcetherface
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
Early retirement unlocked?
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
2
7
• Security Engineer at ConsenSys Diligence
• ~2 years in the blockchain space
• Developer with a hacker’s heart
• @CleanUnicorn
Daniel Luca
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
2
8
• Karl
• Scanning the blockchain
• Finding vulnerable contracts
• Validate found exploits
• Theo
• Transaction pool
• Frontrunning transactions
Main Points
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
2
9
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
0
Karl
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
1
Scanning the Blockchain
• Understand Ethereum
• Python
• JSON RPC
• Lots of computational resources
• Lots of time
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
2
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
3
Get Block By Number
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
4
Get Transaction Receipt
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
5
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
6
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
7
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
8
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
3
9
#100
#101
#102
Contract
#101
#102
Real
Sandbox
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
0
• Needs to have a payable method
• Selfdestruct to it
• Mine as the coinbase
Add Ether to a Contract
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
1
Theo
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
2
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
3
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
4
Mempool
Mempool
Mempool
Mempool
Mempool
Mempool
Mempool
Transaction #1A2B
Transaction #1A2B
Transaction #1A2B
Transaction #1A2B
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
5
● gasPrice * gas = Transaction fee
● Sorted descendingly by gasPrice
Transaction Ordering
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
6
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
7
Frontrunning Demo
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
8
Does This Work in the Wild?
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
4
9
Does this work in the Wild? 
wild?
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
5
0
The Victim’s Transaction
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
5
1
Theo’s Transaction
ConsenSys Diligence | The Ether Wars: Exploits, counter-exploits and honeypots on Ethereum
5
2
• Proxy contract
• Miner adds the transaction without being in the mem pool ﬁrst
• Transactions are more speciﬁc (signing a key with my account)
• Ethereum client decides to be unresponsive
When does it fail?
Thank You!
Q&A