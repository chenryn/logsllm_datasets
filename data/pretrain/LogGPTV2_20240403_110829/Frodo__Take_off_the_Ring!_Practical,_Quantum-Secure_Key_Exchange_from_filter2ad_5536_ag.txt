### Performance Metrics and Experimental Setup

The following performance metrics were evaluated: connections per second, connection time in milliseconds, and handshake size in bytes. The 75th percentile of the connection time under load was reported based on 20 measurements. All measured values were within a factor of 2 of the reported values. The TLS ciphersuites used AES-256-GCM for authenticated encryption with SHA-384 in the MAC and KDF. It is important to note that different key exchange methods have varying security levels; see Table 4 for details.

#### Key Exchange Security
For key exchanges using NIST P-256 keys, it is noted that future quantum adversaries could retroactively decipher information protected by non-quantum-safe key exchanges but would not be able to impersonate parties authenticated with non-quantum-safe digital signatures. We omitted TLS-level benchmarks for Frodo-Paranoid and SIDH, as their microbenchmarks are similar to Frodo-Recommended and their performance is significantly lower, respectively.

### Server and Network Configuration
We used Apache httpd version 2.4.20, compiled against our customized OpenSSL library, and the prefork module for multi-threading. The client and server were connected over a standard data center network with a ping time of 0.62 ms ± 0.02 ms, which did not reach saturation during any of our experiments.

### Throughput and Latency
**Connections per Second (Throughput):**
Multiple client connections were generated using the `http_load` tool version 09Mar2016, a multi-threaded tool capable of generating multiple HTTP or HTTPS fetches in parallel. We found that running multiple `http_load` processes with fewer threads in each process sometimes achieved better performance. Figure V illustrates the typical trade-off between latency (connection time) and throughput (connections/sec). As we increase the load beyond the point at which we report throughput, there is little increase in connections/sec but a significant increase in mean connection time. At this point, the bottleneck in serving TLS requests shifts to Apache process scheduling and request buffer management rather than ciphersuite performance. Our client machine had sufficient power to ensure the server computer reached at least 90% CPU usage throughout the test. Results are the mean of five executions, each run for thirty seconds.

**Connection Time and Handshake Size:**
Wireshark was used to measure the time for the client to establish a TLS connection on an otherwise unloaded server, from when the client opens the TCP connection to when it starts receiving the first packet of application data, and the size in bytes of the TLS handshake. Connections were initiated using the `openssl s_client` command.

Two scenarios were considered:
1. **No Load:** Client-server connections were initiated when the server was under no load. The results reported under the "w/o load" column in Table 5 are the average of ten executions.
2. **Under Load:** Client-server connections were initiated when the server was under approximately 70% CPU load (due to concurrent TLS connections). Connection times naturally had a larger variance under load, and we report the 75th percentile results over twenty experiments under the "w/load" column in Table 5.

### Discussion
HTTPS loads stress many different parts of the system, so the slower compute time of LWE compared to R-LWE (NewHope) has a much lower impact on overall performance, especially in hybrid ciphersuites. Our results are not necessarily generalizable to all applications but provide a good indication of how TLS-based applications with various load profiles are affected.

Since establishing a TLS connection involves several round trips and other cryptographic operations, the connection times for all ciphersuites tested ranged between 12 ms and 21 ms, which are an order of magnitude smaller than the load times of typical web pages. Even under reasonable load, the increase in connection times for LWE follows similar increases across the different ciphersuites profiled.

Our key exchange does affect server throughput, but the gap between LWE and R-LWE is smaller and decreases as page size increases. For 1 KiB pages, LWE can support 1.6× fewer connections than R-LWE (NewHope), but this gap narrows to 1.2× fewer for 100 KiB pages and outperforms NTRU. When measuring server throughput with hybrid ciphersuites, the overhead of LWE is further reduced to about 15% for 100 KiB pages compared to NewHope.

While LWE does impact both TLS client and server performance and handshake size, the complex nature of TLS connections and various system bottlenecks when serving webpages mute the perceived gap seen between LWE and R-LWE in microbenchmarks. For many applications, such as web browsing and secure data transfers, the LWE latency and communication size are small compared to typical application profiles.

### Future Considerations
If we choose to deploy a post-quantum ciphersuite that combines LWE and ECDHE instead of a (non-post-quantum) ECDHE ciphersuite, the additional overhead in serving typical webpages between 10 KiB and 100 KiB will only decrease server throughput by less than a factor of two. This might be a small price to pay for long-term post-quantum security based on generic lattices without any ring structure, to avoid the possibility of attacks that this structure gives rise to.

### Acknowledgments
JB and LD were supported in part by the Commission of the European Communities through the Horizon 2020 program under project number 645622 (PQCRYPTO). DS was supported in part by the Australian Research Council (ARC) Discovery Project grant DP130104304 and a Natural Sciences and Engineering Research Council of Canada (NSERC) Discovery Grant. The authors would like to thank Adam Langley, Eric Grosse, and Úlfar Erlingsson for their inputs. A large part of this work was done when VN was an intern with the Google Security and Privacy Research team.

### References
[References listed as provided, with no changes needed.]

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and detail of the original text.