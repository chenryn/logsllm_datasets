classiﬁer is over 98 percent with a standard deviation of 0.01.
Table II shows the most important features as determined by
our analysis, i.e., the features that minimize the information
gain in every branch of the random forest. Not surprisingly,
cells associated with the circuit construction (create/created
type cells and relay type cells with extend/extended com-
mands) are often some of the top features for distinguishing
both purpose and position, and the total number of cells sent
and received are also useful for both classiﬁers.
Based on our results, we believe that our simple cell-based
counters serve as effective features for position and purpose
classiﬁcation. They are simple and easy to compute and may
potentially be useful in other contexts such as onion service
ﬁngerprinting when access to Tor cell meta-data is available.
VI. ONION SERVICE FINGERPRINTING
In this section, we explore the extent to which middle
relays can be effective at carrying out state-of-the art website
ﬁngerprinting techniques on onion sites. We describe how
we modify and use the Tor and tor-browser-crawler
software to gather data from a middle relay position, explain
the ﬁngerprinting techniques that we performed on these data,
and how we evaluated their efﬁcacy.
6
Fig. 4. Circuit establishment and data transfer involves various cell types and
commands, which in this example are labeled on the arrows and are readable
by the node to which the arrow points ({enc} denotes that the command is
unreadable). Cell meta-data leaks information to a relay about its position in
the circuit and the circuit type.
Fig. 5. A relay may send and receive a different number of cell types on
the inside and outside of a circuit.
the number of each possible (cell type, relay command) pair
that a relay handles. A relay may observe a cell on different
sides of a circuit (see Figure 5), so we also include counts of
the number of cells that a middle is sending and receiving on
both the inbound initiator side of the circuit (inside) and the
outbound extension side of the circuit (outside). Finally, we
include the total number of cells that the relay is sending and
receiving on either side of the circuit, and whether or not the
previous and next hops may serve as guard or exit relays.
Note that although it was recommended in previous
research [22], we do not include cell timing information in
order to be more robust to Tor relay congestion. Interestingly,
during the feature analysis we incorporated the circuit duration
and cell sequence features that Kwon et al. have shown to
be useful in distinguishing circuit purpose when classifying
circuits from the position of the guard-to-client
link [22].
However, we found that these features reduced the accuracy
of our classiﬁer, and therefore we ignore those features in the
remainder of our analysis.
C. Training
The goal of our classiﬁer is to predict when a relay is
serving on a rendezvous purpose circuit and in the ﬁrst middle
relay position (i.e., an R-C-M1 relay as shown in Figure 1).
Previous work by Kwon et al. [22] provides a decision-
tree driven classiﬁer to perform purpose ﬁltering but it was
designed for use by relays in the guard position or an eaves-
dropper on the client-to-guard path and not from middle relays.
We design a new random-forest driven classiﬁer that performs
TABLE I.
Accuracy
Precision
Recall
F-1
10-FOLD CROSS-VALIDATED CIRCUIT CLASSIFICATION
RESULTS
Purpose (rendezvous vs other)
Position (C-M1 vs other)
92.41 ± 0.07%
91.87 ± 0.11%
93.05 ± 0.09%
92.46 ± 0.07%
98.48 ± 0.01%
97.16 ± 0.03%
99.88 ± 0.01%
98.50 ± 0.01%
True Positives
False Positives
False Negatives
True Negatives
396,615 (91.77%)
821,478 (97.08%)
35,576 (8.23%)
30,056 (6.95%)
24,689 (2.92%)
984 (0.12%)
402,135 (96.05%)
845,183 (99.88%)
TABLE II.
MOST IMPORTANT CIRCUIT CLASSIFICATION FEATURES*
Purpose (rendezvous vs other)
13.73% # (relay,{enc}) cells
11.11% # (create2,n/a) cells
Position (C-M1 vs other)
23.22% next node is relay
11.23% # (relay,extended2) cells
09.10% # cells sent total
09.26% # (created2,n/a) cells
08.89% # cells received total
06.66% # cells sent total
08.31% # cells sent inside
07.78% next node is exit
06.61% # (create2,n/a) cells
06.12% # (relay early,extended2) cells
07.66% # (relay early,extended2) cells
05.75% # cells received outside
06.78% # cells received inside
05.83% # (relay early,{enc}) cells
04.26% # (created2,{enc}) cells
* Shown are the top 10 of 22 total features used (both classiﬁers used the same features).
05.25% previous node is guard
04.06% # (relay,{enc}) cells
05.32% # cells received total
A. Evaluating Website Fingerprinting
The website ﬁngerprinting techniques that we chose for
this evaluation are the most scalable and successful known so
far in the literature. These are:
1) Wang-kNN [29]: presented by Wang et al., it achieves
over 90% accuracy for 100 non-onion sites. Wang et al.’s
features were actually families of features deﬁned by a certain
parameter—for instance, the number of outgoing packets in the
ﬁrst N (parameter) packets. By varying these parameters they
generated more than 3,000 features. The underlying learning
model
they used was a k-Nearest Neighbors classiﬁer (k-
NN). k-NN classiﬁes an instance by averaging over the k
closest instances in the dataset according to a given distance
metric. In their case, they used a weighted euclidean distance
with a tuning mechanism that minimizes the distance among
trafﬁc samples that belong to the same site, a property that is
especially suited for k-NN.
2) CUMUL [26]: presented by Panchenko et al.,
is
based on an SVM with a Radial Basis Function (RBF) as
a kernel. Their evaluations show that CUMUL achieves 93%
accuracy for 100 non-onion sites. CUMUL’s main feature is
the cumulative sum of packet lengths. The cumulative sum of a
trafﬁc trace is represented as a vector with as many components
as the number of packets in the trace. Recursively, the ﬁrst
coordinate value is the length of the ﬁrst packet and the i-th
coordinate is calculated by adding the length of packet i and
the value of coordinate i − 1. Since SVM expects ﬁxed-size
feature vectors and the cumulative sums have varying sizes,
they interpolate 100 points for each cumulative sum.
3) k-Fingerprinting (k-FP) [14]: presented by Hayes and
Danezis, it is the most recent website ﬁngerprinting technique.
it
It is based on Random Forests (RF) and k-NN and achieves
similar accuracy to CUMUL. Their feature sets are formed by
175 features that, among others, include most of the features
that have already been proposed in the website ﬁngerprinting
literature to date. Their feature representation is novel: instead
of plugging the features directly into a classiﬁer, they instead
use the leaves in a trained RF as the representation for
classifying with a k-NN with Hamming distance.
All of these attacks have also been evaluated in an open
world of websites where they perform with high accuracy. The
open world is a more realistic setting where the adversary
cannot train on all sites that can be visited by the victim.
B. Methodology
We gather data that enables us to analyze the effectiveness
of onion service website ﬁngerprinting attacks from internal
circuit positions. We do this by running our modiﬁed Tor
software described in V-A1 and V-A2, crawling a set of known
onion sites, and tracing our client’s circuits from our own
middle relay.
We have automated our crawls using a web crawler that
visits a list of onion service URLs with the Tor Browser,
called tor-browser-crawler.5 We based our collection
methodology on previous studies on website ﬁngerprinting. As
Wang and Goldberg proposed [30], we divided the crawls into
batches. In each batch, we iterate over the whole list of URLs,
visiting each URL several times. The rationale behind batched
crawls is that visits to a page in different batches allows the
capture of features that are invariant over time; and combining
visits within a batch reduces the time-independent noise due to
sporadic errors or per-visit variations such as advertisements.
We also disable the UseEntryGuards Tor option so that
we select a different entry guard for each circuit. As a result,
we signiﬁcantly reduce the probability that our testing and
training instances are collected over a circuit with the same
entry guard, which would unrealistically improve the accuracy
of the attack [20].
To speed up the total crawling time, for every visit we
create a new identity using Tor Browser’s torbutton add-
on, and then signal the Tor controller to select a random entry
relay. This way we don’t restart Tor on every visit. In addition,
restarting the identity guarantees that we have a clean browser
state for the visit, as previous studies have pointed out that
keeping the browser state may create artiﬁcial dependencies
between consecutive visits [30].
The client logs TCP packet headers with tshark during
each visit to an onion page. We ignore the TCP payloads
because they are encrypted and thus not useful. By snifﬁng
network trafﬁc, we can reproduce previous WF evaluation
techniques that do not allow access to cell-level information.
Because we are interested in cell-level information in this
work, we also use OnionPerf6 to collect Tor cell traces at the
client. For debugging and error detection purposes, we take
a screenshot of the page as rendered by the Tor Browser,
intercept and dump HTTP requests and responses with a
browser add-on that the crawler install on Tor, and dump the
index.html source code. Recall that we apply these tech-
niques only on our own circuits and not those of regular users.
As we described in V-A1, the client pins one of our middles
as the R-C-M1 relay (see Figure 1). Our middle relay collects
5https://github.com/onionpop/tor-browser-crawler
6https://github.com/robgjansen/onionperf
7
the information from our custom signaling cells as described
in V-A2 using OnionPerf in monitor mode. OnionPerf will
produce a log ﬁle containing the data sent by the client as
well as other standard Tor events (e.g., bandwidth information).
Each circuit that is created by our own crawler will be labeled
as such in the OnionPerf log ﬁle. We later process these raw log
ﬁles as necessary to apply the website ﬁngerprinting technique.
In addition, our crawler also ﬂags the start of a visit and
sends a unique visit ID to the middle along with the ID of
the circuit used to carry the ﬁrst HTTP request. When we
parse the logs, we discard all other circuits built to fetch that
onion site. We need these IDs so that we can parse only the
cells that go through that ﬁrst circuit and discard cells to
other circuits. (Recall from Section II-C that our middle relay
would miss third party onion service circuits, whereas the entry
relay will be able to record all clients’ circuits.) In fact, due
to Tor’s stream isolation, the middle relay has the advantage
that trafﬁc to the ﬁrst-party onion service will not blend with
trafﬁc to other sites, eliminating the need to use special parsing
techniques [31]. Note that our custom signaling cells will be
present in the client tshark logs, however, we ﬁlter out these
artiﬁcially added cells before classiﬁer training.
The list of URLs that we crawl has been obtained from the
ahmia7 Tor onion service search engine maintainers. Before
starting the crawls, we used torsocks and curl to remove
from the list onion sites that were down. We have removed all
the screenshots after error detection to avoid keeping illegal
data on our hard drives. In total we ran four middle relays
to crawl 5,000 different onion websites in parallel. After
removing failed visits and thresholding so that all websites
had the same number of instances, the dataset ended up having
2,500 onion sites and 80 instances per site.
C. Ethics
1) Safety: We have tested our Tor source code modiﬁca-
tions using Shadow [18]. However, Shadow does not run the
Tor browser crawler that we require to crawl onion services
in the website ﬁngerprinting experiments. In order to capture
the complexities of the Tor Browser, and also to evaluate
our attacks under realistic background trafﬁc and network
congestion conditions, we conduct our experiments in the live
Tor network.
The signaling mechanism described in V-A1 ensures that
we only collect trafﬁc generated by our crawler. Using Onion-
Perf, we log only the events associated with the trafﬁc gener-
ated by our client. Thus, analysis and potential attacks will be
applied only on trafﬁc data generated by our own visits.
Following the principle of data minimization, our middle
relays only collect trafﬁc data attributes strictly necessary for
applying trafﬁc ﬁngerprinting attacks. We ignore the payload
of network packets captured at our client, as they are encrypted
and are not useful for ﬁngerprinting purposes. The HTML
sources and screenshots are also removed after the error
detection and outlier removal phases.
2) Beneﬁts and Risks: Since we are not collecting any data
of regular Tor users, there is no de-anonymization risk from our
trafﬁc datasets. There may be a small indirect risk of leaking
user personal data in the screenshots and HTML sources, but
they were deleted before publication, after being used for the
integrity checks of our trafﬁc dataset.
7https://ahmia.ﬁ/
8
TABLE III.
10-FOLD CROSS-VALIDATED ACCURACIES FOR THE THREE
STATE-OF-THE-ART ATTACKS ON OUR client-side TCP TRACES. THE
EVALUATIONS ARE CLOSED WORLDS OF 10, 50 AND 100 ONION SITES.
Num sites
10
50
100
k-NN
(%)
95% ± 0.03
75% ± 0.02
67% ± 0.01
k-FP
(%)
95% ± 0.06
85% ± 0.03
68% ± 0.03
CUMUL
(%)
92% ± 0.04
81% ± 0.02
64% ± 0.02
With respect to the impact of our experiments on Tor’s
performance, the volume of the trafﬁc generated by our crawls
is comparable to that from a regular user actively browsing the
Web for a few hours. We do not expect a signiﬁcant impact
on network performance.
Our methodology allows us to explore one of the main
research questions in this work: whether ﬁngerprinting is
effective in the middle position of our circuits. In addition, it
will help us compare the effectiveness of these techniques at
different layers of the network stack (i.e., the application layer
and the transport layer). Previous studies only applied WF on
TCP packets and used heuristics to ﬁlter cell types that are
not useful for ﬁngerprinting (e.g., SENDME cells). Our middle
relays have access to cell information and thus can directly
utilize or ﬁlter control cells that are not related to a website.
D. Results
1) Website Fingerprinting Effectiveness at the Middle:
Here we explore the following research question: how effective
is website ﬁngerprinting at the middle with respect to the
client? Speciﬁcally, we design an experiment to determine
whether the accuracy of onion service ﬁngerprinting is affected
by the position in the circuit (i.e., middle relay as compared
to the entry link).
We follow the methodology outlined in the previous section
to obtain two datasets: (i) TCP traces as collected between
the client and the entry guard and (ii) cell traces as collected
from the middle relay. Both sets of traces were collected at
the same time to avoid confounding variables like changes
of the website over time [20]. To evaluate the effectiveness of
website ﬁngerprinting at the middle, we apply the state-of-the-
art techniques on both datasets and compare the success rates.
Table III shows the accuracy scores for three classiﬁers on
the network trafﬁc data collected at the client. The accuracy
is deﬁned as the number of True Positives—test instances that
have been correctly classiﬁed—over the total, also known as