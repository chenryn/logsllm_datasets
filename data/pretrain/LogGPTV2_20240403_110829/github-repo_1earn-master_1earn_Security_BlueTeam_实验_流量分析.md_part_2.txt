    将所有带 "ECDHE" 和 "DHE" 的算法的十六进制表达连接成字符串赋给 "--cipher-suite-blacklist" 参数，在启动 Chrome 时添加这个参数。如：
    ```
    c:\Program Files (x86)\Google\chrome\Application\chrome.exe --cipher-suite-blacklist=0xc02b,0xc02f,0x009e,0xcc14,0xcc13,0xc00a,0xc014,0x0039,0xc009,0xc013,0x0033
    ```
    启动后，再次抓包可以看到 Chrome 发出的 Client Hello 包中已经不包含任何 Diffie-Hellman 加密算法了。
    ```
    Cipher Suites (4 suites)
        Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
        Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)
        Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
        Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a)
    ```
- 禁用 Firefox 的 Diffie-Hellman 加密算法
    打开 Firefox，地址栏输入 "about:config"，搜索 "dhe"，双击搜到的所有 Diffie-Hellman 算法将其 Value 值改为 false， 重启 Firefox 即可生效。
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/82.png)
---
### 使用 SSLKEYLOGFILE
在 wireshark 中可以通过浏览器保存的 TLS 会话中使用的对称密钥来进行数据解密。在浏览器接收到数据之后，会使用秘钥对数据进行解密，部分浏览器会在某个地方会存储这个密钥，我们只要获取浏览器中的会话密钥就能解密数据。
设置一个称为 SSLKEYLOGFILE 的环境变量，该变量指向可写文本文件。Chrome 和 Firefox 启动时会查找该变量。如果存在，浏览器会将用于生成 TLS 会话密钥的值写到该文件中。我们可以配置 Wireshark 读取此文件以解密 SSL / TLS 数据包。
以 windows 系统 + Chrome 浏览器为例，首先要导出浏览器存储的密钥，通过计算机属性——高级系统设置——环境变量，新建一个变量名 “SSLKEYLOGFILE” 的变量，变量值是导出的密钥具体文件地址，将其指向可写文本文件，启动 Chrome 或 Firefox 时可以自动生成文本文件。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/69.png)
设置后可以通过 Chrome 浏览器打开任意一个 HTTPS 网址，此时查看变量值对应路径，已经生成 sslkey.log。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/70.png)
在 Wireshark 中导入,菜单栏Edit——Preferences——Protocols——TLS(老的版本是选择 SSL)
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/71.png)
在 (Pre)-Master-Secretlog filename 中选择刚才设置的变量值。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/72.png)
配置完成，看下效果：
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/73.png)
和 HTTP 一样,可以追踪 TLS 流
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/74.png)
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/75.png)
- 优点 :
    - 支持 Diffie-Hellman 密码。
    - 无需访问服务器证书。
- 缺点 :
    - 只能从客户端使用。
    - 仅支持 Chrome 和 Firefox。
---
## Windows
### NTLM-工作组
192.168.141.1(WIN10)——>192.168.141.139(WIN2008)
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/10.png)
查看第一个数据包协商
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/11.png)
查看第二个数据包质询,获得 Challenge
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/12.png)
查看第三个数据包身份验证,其中可以获得客户端加密后的 Challenge
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/13.png)
- username（要访问服务器的用户名）：Administrator
- domain（访问者主机名或者 ip）：DESKTOP-QKM4NK7
- challenge（数据包 2 中服务器返回的 challenge 值）：18f77b6fe9f8d876
- HMAC-MD5（数据包 3 中的 NTProofStr）: 0ecfccd87d3bdb81713dc8c07e6705b6
- blob（blob 对应数据为 NTLMv2 Response 开头去掉 NTProofStr 的后半部分）：01010000000000002a470d3bc233d6017eb1f527b5e7bd4d0000000002001e00570049004e002d0041003500470050004400430050004a0037004f00540001001e00570049004e002d0041003500470050004400430050004a0037004f00540004001e00570049004e002d0041003500470050004400430050004a0037004f00540003001e00570049004e002d0041003500470050004400430050004a0037004f005400070008002a470d3bc233d601060004000200000008003000300000000000000001000000002000003737fbe7dbcbd2c8e5d7a030f44586c91423d9c5202f827f3f6cf26f69adbfe80a001000000000000000000000000000000000000900280063006900660073002f003100390032002e003100360038002e003100340031002e003100330039000000000000000000
所以构造，Net-NTLM v2 Hash 值为：
```
Administrator::DESKTOP-QKM4NK7:18f77b6fe9f8d876:0ecfccd87d3bdb81713dc8c07e6705b6:01010000000000002a470d3bc233d6017eb1f527b5e7bd4d0000000002001e00570049004e002d0041003500470050004400430050004a0037004f00540001001e00570049004e002d0041003500470050004400430050004a0037004f00540004001e00570049004e002d0041003500470050004400430050004a0037004f00540003001e00570049004e002d0041003500470050004400430050004a0037004f005400070008002a470d3bc233d601060004000200000008003000300000000000000001000000002000003737fbe7dbcbd2c8e5d7a030f44586c91423d9c5202f827f3f6cf26f69adbfe80a001000000000000000000000000000000000000900280063006900660073002f003100390032002e003100360038002e003100340031002e003100330039000000000000000000
```
---
### NTLM-域
192.168.141.140(WIN2008)——>192.168.141.135(WIN2008)
域控 : 192.168.141.139
FQDN : ffffffff0x.com
账号密码 : Administrator  Abcd1234
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/14.png)
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/15.png)
---
## ICS
**相关文章**
- [使用Wireshark分析工控协议](http://plcscan.org/blog/2015/11/using-the-wireshark-analysis-ics-protocol/)
### S7Comm
**s7comm_downloading_block_db1**
下载 [SampleCaptures/s7comm_downloading_block_db1.pcap](https://wiki.wireshark.org/SampleCaptures?action=AttachFile&do=get&target=s7comm_downloading_block_db1.pcap)
下载后双击用 wireshark 打开。
*COTP Connection Packet*
- COTP 连接请求包
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/16.png)
- COTP 请求确认包
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/17.png)
*COTP Fuction Packet*
- 数据传输包
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/18.png)
*S7Comm*
- S7Comm Header
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/19.png)
    其中最重要的字段就是 ROSCTR，它决定了后续参数的结构
    在响应数据包中，还有可能存在错误信息
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/20.png)
    可见图中的错误类型就是 No error
- Parameter
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/21.png)
- 建立通信（Setup communication [0xF0]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/22.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/23.png)
    其协商结果为：ACK 队列的大小为 1；最大 PDU 长度为 240。
- 请求下载（Request download [0x1A]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/28.png)
        如图所示，文件标识是 _ (Complete Module)，块类型为 0B，块的编号为 00001，目标块的文件系统是 P (Passive (copied, but not chained) module)，所以文件名为 _0A00001P。
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/29.png)
- 下载块（Download block [0x1B]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/30.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/31.png)
- 下载结束（Download ended [0x1C]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/32.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/33.png)
- 程序调用服务（PI service [0x28]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/34.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/35.png)
**snap7_s300_everything**
下载 [ICS-Security-Tools/pcaps/s7/snap7_s300_everything.pcapng](https://github.com/ITI/ICS-Security-Tools/blob/master/pcaps/s7/snap7_s300_everything.pcapng)
*S7Comm*
- 开始上传（Start upload [0x1D]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/50.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/51.png)
- 上传（Upload [0x1E]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/52.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/53.png)
- 上传结束（End upload [0x1F]）
    - 请求
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/54.png)
    - 响应
        ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/55.png)
**s7comm_varservice_libnodavedemo**