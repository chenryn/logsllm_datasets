that the verifier catches a cheating prover with probability at least
1/(cid:0)ùëõ
2(cid:1). From Lemma 2.3, either some party outputs false, in which
case the verifier rejects, or there exists a pair of inconsistent views
in the set of views committed by the malicious prover. The bound
follows from the honest verifier choosing a pair of views uniformly
at random after the commitment step.
Zero-knowledge. For the ZKproperty, we must construct a simu-
lator that deals with the fact that the malicious verifier may choose
the challenge arbitrarily after seeing the first pass of the protocol.
As mentioned above, we first prove that we can construct a good
simulator for the single-run ZK definition, where the simulator only
needs to work if it correctly guesses in advance the challenge that
the malicious verifier will output. The reduction to the standard
ZK property is proven in Section 3.4.
Our simulator therefore generates a challenge uniformly at ran-
dom and runs the MPC simulator to generate the two views that
will be opened to the malicious verifier. It fixes the remaining views
to an arbitrary value. Note that we can fix the outputs of corrupt
parties given to the MPC simulator to true, since this is the output of
the computation when the MPC protocol is executed by an honest
prover (indeed, for this proof, the MPC simulator only needs to
work for executions where the outputs of the computation accept
the pair (ùë•, ùë§)). Our single-run ZK simulator completes these views
by sampling two random shares that will pose as the secret inputs
for the corrupt MPC parties. Finally, it commits to all views to get
a simulated first round message for the MitH construction. When
computing the response, this strategy fails if the challenge guess
was wrong. Otherwise it returns the simulated views.
The proof that this is a good single-run simulator uses a sequence
of hops. In the first three hops, we replace the view of every party
different from ùëñ and ùëó, where (ùëñ, ùëó) is the initially sampled (guessed)
challenge, by an arbitrary value (we use the constant witness that
is defined for all types in EasyCrypt). For each such hop, we can
construct adversaries B11, B12, B13 that break the hiding property of
the commitment scheme whenever the distinguisher can detect the
modification to the game. These adversaries choose to be challenged
on either the real view or witness; they interpolate between the
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2593game in which a correct commitment is given to the verifier and the
modified game by running the rest of the experiment themselves,
providing the resulting view to the distinguisher, and outputting
the distinguisher‚Äôs guess. These three hops lead to a term in the
final statement that is bounded by the added advantages of B11, B12,
and B13, against the commitment scheme.
In the next step of the proof we replace the execution of the
MPC protocol by an execution of the MPC simulator. Since, by
assumption, the MPC protocol achieves 2-privacy, it is possible to
bound the difference between the two games as the advantage of
a distinguisher B2 against the privacy of the MPC protocol: any
change in the output distribution of the ZK experiment can be used
to construct a distinguisher against the MPC simulator.
Finally, in the last hop, we replace the secret inputs given to the
malicious MPC parties at the MPC simulator input with random
shares (rather than shares generated from the true witness ùë§). This
hop follows from the ùë°-privacy of the secret-sharing scheme, which
we again prove by providing an explicit reduction B3. The proof is
completed by showing that this final game is identical to the ideal
single-run ZK game when instantiated with our simulator.
The result proved in EasyCrypt is therefore of the form
lemma zero_knowledge w x D MV :
| Pr [ ZKGame(D,RP,Real(MV)).game(w,x) : res ] -
Pr [ ZKGame(D,RP,Ideal(MV,S(SMPC))).game(w,x) : res ] | ‚â§ e1 + e2 + e3
where e1 sums the advantages of attackers B11, B12, B13, against the
hiding property of the commitment scheme; e2 is the advantage of
distinguisher B2 against the MPC simulator, and e3 is the advantage
of attacker B3 against the privacy of the secret sharing scheme.
3.4 Meta Theorems
We have created a library of general results that are relevant, not
only for the MitH transformation, but also for MPC protocols and
ZK protocols in general. The first part of the library deals with
repetition arguments in ZK proofs. The second part of the library
formalizes general properties of MPC protocols that follow the next
message syntax. The lemmas we prove can be instantiated with the
concrete protocols we have developed, but we have not done so
for the ones focusing on ZK; there is no technical impossibility in
doing this, but it will imply a significant formalization and proof
effort of boiler-plate equivalence proofs that express the behavior
of concrete imperative algorithms in terms of functional operators.
Repetition in Zero-Knowledge. In this library we prove two gen-
eral results, which imply that our proof of the MitH transformation
as presented in the previous section actually implies the standard
level of security for a ZK protocol. For the ZK property, we show
that the single-run ZK proof implies the existence of a simulator
that works for any malicious verifier with overwhelming proba-
bility. Intuitively, the full simulator repeats the full single-run ZK
ideal evaluation until the single-run simulator succeeds. Since these
are independent executions of a probabilistic experiment, this is
essentially a rejection sampling of the simulated trace, which no
distinguisher will be able to tell apart from a real execution (ex-
cept if the single-run simulator always fails, which happens with
negligible probability in the number of attempts). For the sound-
ness property, we show that sequential composition of the protocol
can be used to reduce the soundness error to an arbitrarily small
value. In the future, the theory that contains these results will be
extended to include a proof that the zero-knowledge property is
also preserved by sequential composition. These are foundational
results in cryptography which, to the best of our knowledge have
not been formally specified and verified.
Our theory declares the types of provers and verifiers as follows.
type Prover_t = {
commit: pauxdata_t ‚Üí witness_t ‚Üí statement_t ‚Üí (commitment_t*pstate_t) distr;
response: pstate_t ‚Üí challenge_t ‚Üí response_t * pauxdata_t }.
type Verifier_t = {
challenge: vauxdata_t ‚Üí statement_t ‚Üí commitment_t ‚Üí (challenge_t*vstate_t)
check: vstate_t ‚Üí response_t ‚Üí bool * vauxdata_t }.
distr;
module IPS = {
(* prover/verifier auxiliary inputs *)
var paux: pauxdata_t
var vaux: vauxdata_t
var fullview: fullview_t
var view: view_t
(* a single execution of the protocol *)
proc exec(_P: Prover_t, _V: Verifier_t, _w: witness_t, _x: statement_t):bool={
(com, pst) <$ _P.commit paux _w _x;
(chlv, vst) <$ _V.challenge vaux _x com;
(resp, paux) ‚Üê _P.response pst chlv;
(b, vaux) ‚Üê _V.check vst resp;
view ‚Üê (com,chlv,vst,resp);
return b; }
(* N-sequential repetitions of the protocol *)
proc execN(_N:int,_P:Prover_t,_V:Verifier_t,_w:witness_t,_x:statement_t):bool={
fullview ‚Üê []; b ‚Üê true; i ‚Üê 0;
while (b && i < _N) { b <@ exec(_P,_V,_w,_x);
fullview ‚Üê view::fullview; i ‚Üê i + 1; }
return b; } }.
(* a concrete Interactive Proof-System (P,V) *)
op P: Prover_t.
op V: Verifier_t.
The IPS module defines the execution environments for single
execution (exec) and sequential composition (execN); both execu-
tion environments can be parameterized by honest or malicious
provers/verifiers, depending on the property we are capturing. All
algorithms are abstract operators in our proofs, but we fix an arbi-
trary zero-knowledge protocol by declaring global operators P and
V. (Note the inclusion of auxiliary data in the syntax of provers and
verifiers; this is not relevant when considering a single execution
of the protocol, but it is critical for proving security under compo-
sition.) Completeness and soundness of sequential composition are
then proved as the following EasyCrypt lemmas, where the stated
axioms capture the hypotheses that completeness and soundness
hold for a single execution of the protocol.
axiom completeness1 w x:
R w x ‚áí Pr [ IPS.exec(P,V,w,x) : res ] = 1.
lemma completenessN N w x:
0 < N ‚áí R w x ‚áí Pr [ IPS.execN(N,P,V,w,x) : res ] = 1.
op sound1_err : real.
axiom soundness1 w x P':
(‚àÄ w, R w x = false) ‚áí Pr [ IPS.exec(P',V,w,x) : res ] ‚â§ sound1_err.
lemma soundnessN N w x P': 0 < N ‚áí
(‚àÄ w, R w x = false) ‚áí Pr [ IPS.execN(N,P',V,w,x) : res ] ‚â§ sound1_err^N.
The proofs of these lemmas are very similar to each other, as
they use the while rule of EasyCrypt to derive the conclusion by
induction; note that the argument accumulates a probabilistic event,
so this is a very good illustrative example of the power of the
probabilistic Hoare logic offered by EasyCrypt.
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2594We now explain how we extend the single-run result we ob-
tained for the MitH simulator to a full proof of the ZK property of
the construction. This was one of the most challenging parts in our
development, as the original proof is non-trivial and we needed to
re-express it in terms that could be formalized in EasyCrypt. Recall
what we have proved: we have a partial simulator that guesses the
malicious verifier‚Äôs challenge and, if the guess is correct, can pro-
duce an indistinguishable view of the protocol execution. What we
set out to prove is that, given a concrete malicious verifier, we can
construct a full simulator by attempting the partial simulation until
eventually it succeeds, i.e., we perform up to ùëÅ independent simu-
lation attempts, and abort if none of them succeed. This simulator
will be good enough if we make ùëÅ sufficiently large.
We express our proof goal using the following module, which
can be parameterized with the number of simulation attempts.
module ZK (D: DRoI_t) = {
: view_t*vauxdata_t = {
proc simulator(_V: Verifier_t, _vaux: vauxdata_t, _x: statement_t)
i ‚Üê 0; bad ‚Üê true;
while (bad && i < Nsim) {
chl <$ rnd_challenge;
(com, sst) <$ scommit _x chl; (chlv, vst) <$ _V.challenge _vaux _x com;
bad ‚Üê !good_challenge chl chlv;
if (!bad) {
resp ‚Üê sresponse sst chlv;
(b, vaux') ‚Üê _V.check vst resp;
t ‚Üê (com,chlv,vst,resp); }
i ‚Üê i + 1; }
return (t,vaux'); } }.
We state as an assumption the single-run zero-knowledge result
we proved in the previous section, by assuming that no distin-
guisher in the single-run experiment can change its behavior by a
probability greater than some bound eps_sim. We also assume some
concrete probability guess_pr for guessing the verifier‚Äôs challenge
in the real-world by sampling it uniformly at random beforehand.
axiom single_run_zk (D<:Distinguisher_t{ComChg}) V' vaux paux w x i:
0 ‚â§ i < Nsim ‚áí
| Pr [ Distinguish(D).game(i,V',vaux,paux,w,x,false) : res ]
- Pr [ Distinguish(D).game(i,V',vaux,paux,w,x,true) : res ] | ‚â§ eps_sim.
Here, Distinguish is a re-statement of the single-run ZK game to
match the operator-based syntax we use for these meta-arguments,
and ùëñ is (fixed) auxiliary information that is provided to D in order
to allow generically using it in a hybrid argument (this will encode
the hybrid step at which we are using the assumption). The full
result we obtain for the ZK property is the following.
lemma zk D V' w x: R w x ‚áí
| Pr [ ZK(D).game(V',w,x,true) : res ] - Pr [ ZK(D).game(V',w,x,false) : res ] |
‚â§ (1-guess_pr)^Nsim + Nsim*(2*eps_sim).
Intuitively, our proof strategy is composing two hybrid argu-
ments: for a single run of the simulator we use a hybrid argument
over the party views, and for the meta-theorem we conduct a hybrid
argument over the multiple executions of the simulator. However,
the fact that each step in the outer hybrid can fail or succeed (and
the inner hybrid is only useful in the case of success) complicates
the proof significantly. We proceed in a sequence of hops, that first
modifies the real world by introducing a bad event that is hidden
from the adversary‚Äôs view and therefore easy to bound: at each
execution of the protocol we try to guess the verifier‚Äôs challenge
at random. Once the bad event is in the real game, we conduct a
hybrid that gradually changes the real executions to simulated ones.
Each step reduces to our single-run assumption, but the analysis
of the reduction is complex, as it must address the various cases
where the simulation was successful or failed. We believe that our
modular proof may be of independent interest.
MPC Protocols in Next-message Syntax. We formalize an abstract
theory that captures a next-message syntax for MPC protocols,
where all parties proceed by synchronous rounds as follows.
op local_protocol_round : party ‚Üí round ‚Üí public_input ‚Üí
local_input ‚Üí local_rand ‚Üí in_msgs ‚Üí pmsgs.
local_rand pmap) (ins:in_msgs pmap) : pmsgs pmap =
op protocol_round (round:round) (x:public_input) (ws:local_input pmap) (rs:
let xs = zip3 ws rs ins in imap (fun i (wi_ri_insi:_*_*_) ‚áí
local_protocol_round i round x wi_ri_insi.`1 wi_ri_insi.`2 wi_ri_insi.`3) xs.
op protocol (x:public_input) (ws:local_input pmap) (rs:local_rand pmap) : trace
* local_output pmap = (...)
This level of detail is sufficient to capture the notion of pair-
wise consistent views between a pair of parties and to state/prove
Lemma 2.3 given in Section 2.
op consistent_views (x:public_input) (i j:party) (vi vj:view) : bool =
valid_view x vi ‚àß valid_view x vj ‚àß
valid_rand x (get_view_rand i vi) ‚àß valid_rand x (get_view_rand j vj)
‚àß consistent_inputs x i j (get_view_inputs i vi) (get_view_inputs j vj)
‚àß get_view_in_msgs j vi = get_view_out_msgs j i x vj
‚àß get_view_in_msgs i vj = get_view_out_msgs i j x vi.