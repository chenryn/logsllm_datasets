In Python 3, the following code should correctly raise an `IndexError`:

```python
In [1]: s = pd.Series(range(5), index=list('aacde'))
In [2]: s[5]
```

However, a positional indexer that is within the range of the index should work. For example, `s[3]` should return the value at the fourth position.

Furthermore, this behavior must be observed with a monotonic increasing duplicated index to trigger the `IndexError`. For instance:

```python
In [8]: s = pd.Series(range(5), index=list('aabcd'))
In [9]: s[3]
IndexError: 3
```

But if the index is not monotonic, it will return the value:

```python
In [10]: s = pd.Series(range(5), index=list('aadcb'))
In [11]: s[3]
Out[11]: 3
```

The simple change needed here is to allow an integer index that is within the range of the index to return the corresponding value, even if the index is not unique. This could be implemented in the Cython code, specifically in `index.pyx/Index/_get_loc_duplicated`.

It's worth noting that there are currently no tests for this specific behavior.