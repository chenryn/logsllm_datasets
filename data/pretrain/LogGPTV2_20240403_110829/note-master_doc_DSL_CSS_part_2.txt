#### 原理
- 当遇到块级盒：排入块级格式化上下文（也就是会换行）
- 当遇到行内级盒或者文字：首先尝试排入行内级格式化上下文，如果排不下，那么创建一个行盒，先将行盒排版（行盒是块级，所以到第一种情况），行盒会创建一个行内级格式化上下文
- 遇到 float 盒：把盒的顶部跟当前行内级上下文上边缘对齐，然后根据 float 的方向把盒的对应边缘对到块级格式化上下文的边缘，之后重排当前行盒
#### 文字排版
![横向文字](/assets/20227516362.webp)
![纵向文字](/assets/202275163637.webp)
多数元素被当作长方形盒来排版，而只有 display 为 inline 的元素，是被拆成文本来排版的
#### 盒子模型
一个盒具有 margin、border、padding、width/height 等属性，它在主轴方向占据的空间是由对应方向的这几个属性之和决定的，而 vertical-align 属性决定了盒在交叉轴方向的位置，同时也会影响实际行高
![盒子模型](/assets/202339153612.gif)
##### 盒子边框（border）
```css
border : border-width || border-style || border-color
```
属性           |      作用
------------ | :----------:
border-width | 定义边框粗细，单位是px
border-style |    边框的样式
border-color |     边框颜色
边框写法总结：
上边框                  | 下边框                      | 左边框                   | 右边框
:------------------- | :----------------------- | :-------------------- | :---------------------
border-top-style:样式; | border-bottom-style:样式;  | border-left-style:样式; | border-right-style:样式;
border-top-width:宽度; | border- bottom-width:宽度; | border-left-width:宽度; | border-right-width:宽度;
border-top-color:颜色; | border- bottom-color:颜色; | border-left-color:颜色; | border-right-color:颜色;
border-top:宽度 样式 颜色; | border-bottom:宽度 样式 颜色;  | border-left:宽度 样式 颜色; | border-right:宽度 样式 颜色;
- 边框合并
```css
border-collapse:collapse;
```
##### 内边距（padding）
- padding属性用于设置内边距。 **是指 边框与内容之间的距离。**
属性             | 作用
-------------- | :---
padding-left   | 左内边距
padding-right  | 右内边距
padding-top    | 上内边距
padding-bottom | 下内边距
- 盒子会变大
简写：
值的个数 | 表达意思
---- | ------------------------------
1个值  | padding：上下左右内边距;
2个值  | padding: 上下内边距 左右内边距 ；
3个值  | padding：上内边距 左右内边距 下内边距；
4个值  | padding: 上内边距 右内边距 下内边距 左内边距 ；
内盒尺寸计算（元素实际大小）：
- 盒子的实际的大小 =  内容的宽度和高度 +  内边距   +  边框   
- Element Width = content width + padding + border 
- Element Height = content height + padding + border 
内边距产生的问题：
- 会撑大原来的盒子
  - 通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小
- 如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。
##### 外边距（margin）
- margin属性用于设置外边距。  margin就是控制**盒子和盒子之间的距离**
| 属性          | 作用     |
| ------------- | :------- |
| margin-left   | 左外边距 |
| margin-right  | 右外边距 |
| margin-top    | 上外边距 |
| margin-bottom | 下外边距 |
margin值的简写 （复合写法）代表意思  跟 padding 完全相同。
块级盒子水平居中：
- 盒子必须指定了宽度（width）
- 然后就给**左右的外边距都设置为auto**
```css
div {
          width:600px;
          height: 500px;
          background-color: skyblue;
          margin: 0 auto;
} 
```
文字居中和盒子居中区别：
```css
text-align: center; /*  文字 行内元素 行内块元素水平居中 */
margin: 10px auto;  /* 块级盒子水平居中  左右margin 改为 auto 就可以了 上下margin都可以 */
```
插入图片和背景图片区别：
1. 插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin
2. 背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position
清除元素的默认内外边距：
```css
* {
   padding:0;         /* 清除内边距 */
   margin:0;          /* 清除外边距 */
}
```
外边距合并：
- 使用margin定义块元素的**垂直外边距**时，可能会出现外边距的合并。
-  嵌套块元素垂直外边距的合并（塌陷）
   - 可以为父元素定义上边框。
   - 可以为父元素定义上内边距
   - 可以为父元素添加overflow:hidden。
子元素将父元素拉了下来：
当为子元素指定margin-top时，父元素也被带下来了
解决这个问题的方式可以为父元素指定`overflow:auto`
##### 盒子模型布局稳定性
使用优先级：width >  padding  >   margin   
##### 圆角边框(CSS3)
```css
border-radius:length;  
```
##### 盒子阴影(CSS3)
```css
box-shadow:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；
```
### 定位
将盒子**定**在某一个**位**置 自由的漂浮在其他盒子(包括标准流和浮动)的上面
> 定位 = 定位模式 + 边偏移
#### 边偏移
边偏移属性    | 示例             | 描述
-------- | :------------- | --------------------------------
`top`    | `top: 80px`    | **顶端**偏移量，定义元素相对于其父元素**上边线的距离**。
`bottom` | `bottom: 80px` | **底部**偏移量，定义元素相对于其父元素**下边线的距离**。
`left`   | `left: 80px`   | **左侧**偏移量，定义元素相对于其父元素**左边线的距离**。
`right`  | `right: 80px`  | **右侧**偏移量，定义元素相对于其父元素**右边线的距离**
#### 定位模式
```css
选择器 { position: 属性值; }
```
值          |    语义
---------- | :------:
`static`   | **静态**定位
`relative` | **相对**定位
`absolute` | **绝对**定位
`fixed`    | **固定**定位
- 静态定位(static)：元素的默认定位方式
- 相对定位(relative)：是元素**相对**于它原来在标准流中的位置来说的，原来**在标准流的区域继续占有**，后面的盒子仍然以标准流的方式对待它
- 绝对定位(absolute)
  - **绝对定位**是元素以带有定位的父级元素来移动位置
  - **完全脱标** ---- 完全不占位置
  - **父元素没有定位**，则元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位
> **子绝父相** ---- **子级**是**绝对**定位，**父级**要用**相对**定位。
- 固定定位(fixed)
  - **完全脱标** ---- 完全不占位置
  - 只认**浏览器的可视窗口** ---- `浏览器可视窗口 + 边偏移属性` 来设置元素的位置
  - 不随滚动条滚动
#### 居中
> **绝对定位/固定定位的盒子**不能通过设置 `margin: auto` 设置**水平居中**。
1. `left: 50%;`：让**盒子的左侧**移动到**父级元素的水平中心位置**；
2. `margin-left: -100px;`：让盒子**向左**移动**自身宽度的一半**。
#### 堆叠顺序（z-index）
加了定位的盒子，默认**后来者居上**， 后面的盒子会压住前面的盒子
```css
selector {
    z-index: value;
}
```
**属性值**：**正整数**、**负整数**或 **0**，默认值是 0，数值越大，盒子越靠上
`z-index` 只能应用于**相对定位**、**绝对定位**和**固定定位**的元素，其他**标准流**、**浮动**和**静态定位**无效
#### 定位改变display属性
一个行内的盒子，如果加了**浮动**、**固定定位**和**绝对定位**，不用转换，就可以给这个盒子直接设置宽度和高度等
给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题了
## 总结
定位模式         | 是否脱标占有位置   | 移动位置基准      | 模式转换（行内块） | 使用情况
------------ | ---------- | :---------- | --------- | ------------
静态static     | 不脱标，正常模式   | 正常模式        | 不能        | 几乎不用
相对定位relative | 不脱标，占有位置   | 相对自身位置移动    | 不能        | 基本单独使用
绝对定位absolute | 完全脱标，不占有位置 | 相对于定位父级移动位置 | 能         | 要和定位父级元素搭配使用
固定定位fixed    | 完全脱标，不占有位置 | 相对于浏览器移动位置  | 能         | 单独使用，不需要父级
### 浮动元素排版
对 float 的处理是先排入正常流，再移动到排版宽度的最左 / 最右（这里实际上是主轴的最前和最后）
元素的浮动是指**设置了浮动属性的元素**会
- 脱离标准普通流的控制
- 移动到指定位置
作用：
- **让多个盒子(div)水平排列成一行**，使得浮动成为布局的重要手段。
- 可以实现盒子的左右对齐等等..
- 浮动最早是用来**控制图片**，实现**文字环绕图片的效果**。
语法：
```css
选择器 { float: 属性值; }
```
属性值       | 描述
--------- | --------------
**none**  | 元素不浮动（**默认值**）
**left**  | 元素向**左**浮动
**right** | 元素向**右**浮动
特性：
`float` 属性会让盒子漂浮在标准流的上面,并且不占有原来位置
任何元素都可以浮动。浮动元素会生成一个块级框，生成的块级框和我们前面的行内块极其相似
使用浮动的核心目的----让多个块级盒子在同一行显示
特点 | 说明
-- | -------------------------------------------------
浮  | 加了浮动的盒子**是浮起来**的，漂浮在其他标准流盒子的上面。
漏  | 加了浮动的盒子**是不占位置的**，它原来的位置**漏给了标准流的盒子**。
特  | **特别注意**：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙
扩展：
- 子盒子的浮动参照父盒子对齐
- 不会与父盒子的边框重叠，也不会超过父盒子的内边距
- 浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流
清除浮动：
父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，导致排版出现问题
**清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了**
```css
选择器{clear:属性值;}
```
属性值   | 描述
----- | ---------------------
left  | 不允许左侧有浮动元素（清除左侧浮动的影响）
right | 不允许右侧有浮动元素（清除右侧浮动的影响）
both  | 同时清除左右两侧浮动的影响
- 额外标签法
```html
```
- 父级添加overflow
- after伪元素
```css
 .clearfix:after {  content: ""; display: block; height: 0; clear: both; visibility: hidden;  }   
 .clearfix {*zoom: 1;}   /* IE6、7 专有 */
```
- 双伪元素
```css
.clearfix:before,.clearfix:after { 
  content:"";
  display:table; 
}
.clearfix:after {
 clear:both;
}
.clearfix {
  *zoom:1;
}
```
| 清除浮动的方式       | 优点               | 缺点                               |
| -------------------- | :----------------- | :--------------------------------- |
| 额外标签法（隔墙法） | 通俗易懂，书写方便 | 添加许多无意义的标签，结构化较差。 |
| 父级overflow:hidden; | 书写简单           | 溢出隐藏                           |
| 父级after伪元素      | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |
| 父级双伪元素         | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |
## 颜色
- RGB，符合光谱三原色理论：红、绿、蓝三种颜色的光可以构成所有的颜色，使用三个整数来表示
- RGBA： 是代表 Red（红色）、Green（绿色）、Blue（蓝色）和 Alpha 的色彩空间
- CMYK：在印刷行业，使用的就是这样的三原色（品红、黄、青）来调配油墨，这种颜色的表示法叫做 CMYK，它用一个四元组来表示颜色，三原色调配黑色，经济上是不划算的，所以印刷时会单独指定黑色
- HSL：用一个值来表示人类认知中的颜色，我们用专业的术语叫做色相（H）。加上颜色的纯度（S）和明度（L），就构成了一种颜色的表示
### 渐变
```css
/* 线性渐变 */
linear-gradient(direction, color-stop1, color-stop2, ...);
/* 放射性渐变 */
radial-gradient(shape size at position, start-color, ..., last-color);
```
## 字体样式
### 单位
- 绝对长度
单位 | 描述
-- | ------------------------
cm | 厘米
mm | 毫米
in | 英寸 (1in = 96px = 2.54cm)
px | 像素 (1px = 1/96th of 1in)
pt | 点 (1pt = 1/72 of 1in)
pc | 派卡 (1pc = 12 pt)
- 相对长度
单位   | 描述
---- | ----------------------------------------
em   | 相对于元素的字体大小（font-size）（2em 表示当前字体大小的 2 倍）
ex   | 相对于当前字体的 x-height(极少使用)
ch   | 相对于 "0"（零）的宽度