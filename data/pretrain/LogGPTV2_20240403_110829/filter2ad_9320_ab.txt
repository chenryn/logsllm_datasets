MACH_PORT_RIGHT_PORT_SET-面向一组端口接收或发送消息  
MACH_PORT_RIGHT_DEAD_NAME-表示因为对应的端口被销毁或者已经发送了一次消息从而无效的SEND或者SEND_ONCE权限
  * Mach端口权限可以嵌入并通过Mach消息发送
  * 一个端口可以有多个发送权限，但只有一个接收权限。发送权限也可以克隆，而接收权限则不能
  * 发送的Mach消息在接收方收到之前将保留在内核的队列中。这种技术过去用于堆风水
  * iOS中最重要的二进制文件之一launchd充当引导服务器并允许进程相互通信。launchd可以帮助一个进程查找另一个进程，因为所有进程都通过launchd启动并在启动时注册。因此，launchd还可以实现节流(throttling)并在某些情况下允许或拒绝查找，从而充当安全控件。launchd非常重要，因此它是第一个启动的守护进程(PID 1)，launchd中的任何crash都将立即引发内核panic
  * 消息由进程内的线程发送和接收，充当进程内的执行单元。但是，端口权限保留在任务级别，并可在任务的ipc_space中找到(稍后讨论)
让我们看一下内核中与Mach
IPC相关的代码。来看一下xnu-4903.221.1/osfmk/mach/message.h。如前所述，消息本质上可以是简单或复杂的。在下图中，可以看到简单的Mach消息(mach_msg_base_t)的结构，其中包括头部(mach_msg_header_t)和主体(mach_msg_body_t)。但是简单的消息主体会被内核忽略。  
Mach消息头部结构体具有以下成员。
  * msgh_bits：这是一个包含消息的各种属性的位图，例如消息是简单还是复杂，要执行的操作(例如移动或复制端口权限)。完整的逻辑可以在osfmk/mach/message.h中找到
  * msgh_size：头部+主体的大小
  * msgh_remote_port：目标端口的发送权限
  * msgh_local_port：接收端口的接收权限
  * msgh_voucher_port：voucher用于通过键值对传递消息中的数据
  * msgh_id：任意32位值
在message.h中可以看到，将msgh_bits的复杂位设置为1来指定复杂消息。  
除头部外还包含某些描述符，并且在主体中指定了描述符的数量(msgh_descriptor_count)。  
mach_msg_type_descriptor_t成员指定它是什么类型的描述符，其他成员中含有相应的数据。存在以下类型的描述符：  
  * MACH_MSG_PORT_DESCRIPTOR：在消息中发送一个端口
  * MACH_MSG_OOL_DESCRIPTOR：在消息中发送OOL数据
  * MACH_MSG_OOL_PORTS_DESCRIPTOR：在消息中发送OOL端口数组
  * MACH_MSG_OOL_VOLATILE_DESCRIPTOR：在消息中发送易失性数据
OOL(Out-of-line)端口描述符已广泛用于用用户控制的数据来喷射堆。每当使用MACH_MSG_OOL_PORTS_DESCRIPTOR时，它将在内核堆中分配(kalloc)具有所有端口指针的数组。该技术已用于voucher_swap
EXP中，并将在本系列的第2部分中进行讨论。  
端口在用户态中用mach_port_t或mach_port_name_t表示，但在内核中并不是。mach_port_name_t表示本地命名空间标识，但未关联任何端口权限，并且在任务命名空间之外基本上没有任何意义。但是，只要进程从内核接收到mach_port_t，它就会将关联的端口权限映射到接收者，mach_port_name_t则不会。mach_port_t通常总是至少拥有一项权限，可以是RECEIVE，SEND或SEND_ONCE。这就是我们在EXP中引用内核任务端口的原因。我们使用mach_port_t是因为它确实将端口权限与对象相关联。获得mach_port_t的句柄会自动在调用者的命名空间中创建关联的发送权限。  
为了发送或接收消息，可以使用osfmk/mach/message.h中定义的mach_msg和mach_msg_overwrite
API。让我们看一些代码示例以更好的理解它。以下代码段使用mach_port_allocate API创建Mach端口并获得该端口的接收权限。  
可以使用mach_msg发送消息。  
然后可以使用mach_msg接收消息。  
如果你有一个端口的发送权限，你可以使用mach_port_insert_right将这个发送权限插入另一个任务，然后使用mach_msg发送消息。如前所述，mach_port_name_t在任务命名空间之外毫无意义，这就是为什么需要将任务(ipc_space_t)与mach_port_name_t一起指定的原因，以便内核可以将指定的名称(mach_port_name_t)放入该任务的命名空间。  
## MIG-Mach接口生成器
使用Mach
API编写的许多代码都包含相同的样板代码，多次重复可能会导致复杂性，甚至导致安全漏洞，因此MIG非常方便。它基于MIG规范文件(defs)实现桩函数。客户端可以像调用任何其他C函数一样调用此桩函数，并且桩函数可以处理进出mach消息的数据的编组和解编组，从而控制发生在底层的所有Mach
IPC实现。  
MIG规范文件具有扩展名defs，并且在编译内核时，这些文件由mig处理并生成额外的文件，这些文件包含自动生成的MIG封装器。例如，让我们看一下osfmk/mach/task.defs中的task.defs文件。如下所示，每个defs文件都有一个子系统名称，后跟一个任意数字，该数字在文件的开头声明。task.defs文件的子系统名称为task，数字为3400。桩函数还可以检查传递给它的参数的有效性。  
如果要生成MIG封装器，则可以在包含def文件的目录运行mig。  
在编译期间，mig工具根据子系统名称创建三个文件。例如对于task子系统，将创建以下文件：
  * taskUser.c-该文件包含代理函数的实现，该代理函数负责将数据编组为消息并发送。它还负责解组返回的数据并将其发送回客户端
  * task.c-代理函数的原型
  * taskServer.c-桩函数的实现包含在此文件中
在生成的文件中定义了许多基本上是函数的routine。让我们看一下自动生成的MIG代码中的Mach API routine
task_set_exception_port。  
审计这些函数中的代码也非常重要。在下一篇文章中，我们将讨论在构建内核后获得的自动生成的MIG代码中找到的漏洞。
## 任务端口
Mach端口的另一个有用的功能是它们充当对象的抽象，而该抽象是由Mach消息提供的，这些消息主要通过MIG进行转换。例如，主机Mach端口提供许多API，以获取有关主机的信息。host_kernel_version()函数将打印内核版本。这与uname
-r命令使用的API相同。查看osfmk/mach/mach_host.defs文件将显示主机端口API提供的所有routine。  
类似，任务端口用作任务的抽象。可以在osfmk/mach/task.def或者BUILD文件夹中的osfmk/mach/task.defs找到这些API。  
这些API十分强大，可以与目标进程进行完全交互。具有进程的任务端口的发送权限将完全控制该任务，包括在目标任务内存区域中读取，写入和分配内存。顺便说一句，我们提到的是进程(来自BSD)的任务(来自Mach)端口，这似乎有些奇怪，需要注意的是，它们内部是有联系的。每个BSD进程都有一个对应的Mach任务，反之亦然。可以在osfmk/kern/task.h下找到task结构体，其中的bsd_info指向bsd/sys/proc_internal.h中的proc结构体。同样，proc结构体中的task是指向该进程的task结构体的指针。  
使用Mach系统调用task_for_pid()，可以将与目标PID相对应的任务端口的发送权限发送给调用方。从bsd/vm/vm_unix.c中的以下注释可以看出，仅允许特权进程或具有相同用户ID的进程调用。除此之外，调用此API还需要某些权限(entitlement)：get-task-allow和task_for_pid-allow。  
你将在这里注意到的另一件事是对pid=0的检查。这样做是为了防止调用task_for_pid(0)获得到内核任务端口的发送权限(tfp0)。以前一旦能够任意读写内核内存，越狱程序就会patch该检查并调用task_for_pid(0)。但是随着KPP和AMCC/KTRR的出现，不再能patch内核，因此使用了其它技术。tfp0这个叫法仍然存在，用于表示读写内核内存。  
另一个非常常用的API是Mach系统调用pid_for_task()，用于查找与给定Mach任务相对应的进程的pid。它通常做的是查找task结构体，查找其中的bsd_info指向的内核中的proc结构体，并从proc结构体中读取p_pid。此技术已被广泛用于通过创建伪造的任务端口一次读取任意四个字节的内核内存(因为pid为32位)，本文稍后将对此进行讨论。  
## 内核任务端口
内核被分配了PID
0，相应的无进程任务被称为内核任务。拥有内核任务的发送权限可以完全控制内核内存，对内核内存进行读写，还可以通过分配内存来注入任意代码。这就是EXP所试图获得的。  
如前所述，调用task_for_pid(0)的较早方法之一是patch对pid=0的检查。macOS上不安全内核(#if defined
SECURE_KERNEL)也有一个processer_set_tasks() API会将内核任务端口作为第一个参数返回。  
获得内核任务端口后，以下五个MACH
API经常用于与内存进行交互。重要的是要注意，要成功执行此函数，调用者必须拥有目标任务的任务端口的发送权限。如果查看函数原型，则第一个参数是目标任务(vm_map_t
target_task)。可以将内核任务端口(mach_port_t tfp0)作为第一个参数传递给它。  
## hsp4 Patch
Apple为防止越狱者获得内核任务而实施的另一项技术是对kernel_task的指针检查。即使获得了内核任务的句柄也无法使用Mach
VM调用。检查从ipc_kmsg_trace_send函数开始，它会调用osfmk/kern/ipc_kobject.c中的convert_port_to_task_with_exec_token函数(第356行)。  
然后，convert_port_to_task_with_exec_token函数调用task_conversion_eval函数(第1543行)。  
这里就是检查的地方。caller是想要操作任务端口的任务，victim是被操作的任务。首先检查caller是否为内核，如果是则返回成功。然后检查caller是否与victim相同，因为任务应该能够对其自身执行操作。第三次检查就是关键的地方了，如果你想要操作kernel_task而自己不是kernel_task，则检查不会通过。不过这只是对kernel_task指针进行检查实现的。  
因此尽管能够得到内核任务，但是你将无法在其上调用Mach
API，因为这里会返回KERN_INVALID_SECURITY，从而之前的函数将返回TASK_NULL。顺便说一句，在嵌入式平台上，代码会检查代码签名中的TF_PLATFORM标志，它是platform-application
entitlement，这意味着没有此entitlement的caller无法对拥有这项entitlement的victim执行操作(只有Apple的文件才有这个entitlement)。我们将在本系列的第3部分中对此进行讨论。  
因此，较新的技术之一就是使用host_get_special_port()函数。来看看osfmk/mach/host_special_ports.h。  
它包含一些特殊端口，你可能已经从注释中猜到了这些端口用于特殊目的。从注释中可以看出前七个端口是为内核本身保留的。但是到目前为止，仅使用了其中的三个。HOST_PORT提供了主机的抽象，HOST_PRIV用于特权操作，而HOST_IO_MASTER_PORT用于与设备进行交互。每个特殊端口都有特定的编号，这非常重要。我们可以注意到没有使用编号4。  
另一件值得一提的事是为了获得发送到主机特殊端口的权限需要使用一个int参数调用host_get_special_port，该参数是分配给该特殊端口的编号。  