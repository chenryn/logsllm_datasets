## PostgreSQL垃圾回收代码分析 - why postgresql cann't reclaim tuple is HEAPTUPLE_RECENTLY_DEAD  
### 作者                                               
digoal                                                
### 日期                                              
2015-05-03                   
### 标签                                              
PostgreSQL , 垃圾回收 , 长事务 , HEAPTUPLE_RECENTLY_DEAD                                                              
----                                              
## 背景                      
PostgreSQL 9.6已支持snapshot too old   
前几天写过一篇文章关于如何防止PostgreSQL表膨胀。  
其中有一条是避免持有事务排他锁的长事务，因为这个事务开始到结束之间产生的垃圾无法被回收，容易导致膨胀。  
[《PostgreSQL 垃圾回收原理以及如何预防膨胀 - How to prevent object bloat in PostgreSQL》](../201504/20150429_02.md)  
具体是什么原因呢？  
首先看看PostgreSQL垃圾回收代码。  
回收垃圾的函数其中之一  
src/backend/commands/vacuumlazy.c  
在判断一条垃圾记录是否需要回收时，如果发现是HEAPTUPLE_RECENTLY_DEAD的，则不回收。  
```  
/*  
 *      lazy_scan_heap() -- scan an open heap relation  
 *  
 *              This routine prunes each page in the heap, which will among other  
 *              things truncate dead tuples to dead line pointers, defragment the  
 *              page, and set commit status bits (see heap_page_prune).  It also builds  
 *              lists of dead tuples and pages with free space, calculates statistics  
 *              on the number of live tuples in the heap, and marks pages as  
 *              all-visible if appropriate.  When done, or when we run low on space for  
 *              dead-tuple TIDs, invoke vacuuming of indexes and call lazy_vacuum_heap  
 *              to reclaim dead line pointers.  
 *  
 *              If there are no indexes then we can reclaim line pointers on the fly;  
 *              dead line pointers need only be retained until all index pointers that  
 *              reference them have been killed.  
 */  
static void  
lazy_scan_heap(Relation onerel, LVRelStats *vacrelstats,  
                           Relation *Irel, int nindexes, bool scan_all)  
{  
...  
        for (blkno = 0; blkno latestCompletedXid;  
        Assert(TransactionIdIsNormal(result));  
        TransactionIdAdvance(result);  
```  
src/include/access/transam.h  
```  
/* in transam/varsup.c */  
extern PGDLLIMPORT VariableCache ShmemVariableCache;  
/*  
 * VariableCache is a data structure in shared memory that is used to track  
 * OID and XID assignment state.  For largely historical reasons, there is  
 * just one struct with different fields that are protected by different  
 * LWLocks.  
 *  