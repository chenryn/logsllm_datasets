title:A Treasury System for Cryptocurrencies: Enabling Better Collaborative
Intelligence
author:Bingsheng Zhang and
Roman Oliynykov and
Hamed Balogun
A Treasury System for Cryptocurrencies:
Enabling Better Collaborative Intelligence
Bingsheng Zhang
Lancaster University, UK
PI:EMAIL
Roman Oliynykov
Input Output Hong Kong
PI:EMAIL
Hamed Balogun
Lancaster University, UK
PI:EMAIL
Abstract—A treasury system is a community-controlled and
decentralized collaborative decision-making mechanism for sus-
tainable funding of blockchain development and maintenance.
During each treasury period, project proposals are submitted,
discussed, and voted for; top-ranked projects are funded from the
treasury. The Dash governance system is a real-world example
of such kind of systems. In this work, we, for the ﬁrst time,
provide a rigorous study of the treasury system. We modelled,
designed, and implemented a provably secure treasury system
that is compatible with most existing blockchain infrastructures,
such as Bitcoin, Ethereum, etc. More speciﬁcally, the proposed
treasury system supports liquid democracy/delegative voting for
better collaborative intelligence. Namely, the stake holders can
either vote directly on the proposed projects or delegate their
votes to experts. Its core component is a distributed universally
composable secure end-to-end veriﬁable voting protocol. The
integrity of the treasury voting decisions is guaranteed even when
all the voting committee members are corrupted. To further
improve efﬁciency, we proposed the world’s ﬁrst honest veriﬁer
zero-knowledge proof for unit vector encryption with logarithmic
size communication. This partial result may be of independent
interest
to other cryptographic protocols. A pilot system is
implemented in Scala over the Scorex 2.0 framework, and its
benchmark results indicate that the proposed system can support
tens of thousands of treasury participants with high efﬁciency.
I.
INTRODUCTION
Following the success of Bitcoin, a great number of new
cryptocurrencies and blockchain platforms are emerging on al-
most daily basis. Blockchains have become largely ubiquitous
across various sectors, e.g., technology, academia, medicine,
economics and ﬁnance, etc. A key feature expected from
cryptocurrencies and blockchain systems is the absence of
a centralized control over the operation process. That
is,
blockchain solutions should neither rely on “trusted parties
or powerful minority” for their operations, nor introduce such
(centralisation) tendencies into blockchain systems. Decentral-
ization not only offers better security guarantees by avoiding
single point of failure, but may also enable enhanced user pri-
vacy techniques. On the other hand, real-world blockchain sys-
tems require steady funding for continuous development and
maintenance of the systems. Given that blockchain systems are
decentralized systems, their maintenance and developmental
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23024
www.ndss-symposium.org
funding should also be void of centralization risks. Therefore,
secure and “community-inclusive” long-term sustainability of
funding is critical for the health of blockchain platforms.
In the early years, the development of cryptocurrencies,
such as Bitcoin, mainly rely on patron organizations and
donations. Recently, an increasing number of cryptocurrencies
are funded through initial coin offering (ICO) – a popular
crowd-funding mechanism to raise money for the correspond-
ing startups or companies. A major drawback of donations
and ICOs is that they lack sustainable funding supply. Conse-
quently, they are not suitable as long-term funding sources for
cryptocurrency development due to the difﬁculty of predicting
the amount of funds needed (or that will be available) for
future development and maintenance. Alternatively, some cryp-
tocurrency companies, such as Zcash Electric Coin Company,
take certain percentage of hair-cut/tax (a.k.a. founders reward)
from the miners’ reward. This approach would provide the
companies a more sustainable funding source for long-term
planning of the cryptocurrency development.
Nevertheless, the aforementioned development funding ap-
proaches have risks of centralization in terms of decision-
making on the development steering. Only a few people (in the
organisation or company) participate in the decision-making
process on how the available funds will be used. However, the
decentralized architecture of blockchain technologies makes
it inappropriate to have a centralized control of the funding
for secure development processes. Sometimes disagreement
among the organisation members may lead to catastrophic
consequences. Examples include the splitting of Ethereum and
Ethereum Classic as well as Bitcoin and Bitcoin Cash.
Ideally, all cryptocurrency stake holders are entitled to par-
ticipate in the decision-making process on funding allocation.
This democratic type of community-inclusive decentralized
decision-making enables a better collaborative intelligence.
The concept of treasury system has been raised to address the
highlighted issue. A treasury system is a community controlled
and decentralized collaborative decision-making mechanism
for sustainable funding of the underlying blockchain devel-
opment and maintenance. The Dash governance system [17]
is a real-world example of such systems. A treasury system
consists of iterative treasury periods. During each treasury
period, project proposals are submitted, discussed, and voted
for; top-ranked projects are then funded. However, the Dash
governance system has a few potential theoretical drawbacks.
i) It does not offer ballot privacy to the voters (a.k.a. mastern-
odes) [28]. Therefore, the soundness of any funding decision
might be ill-affected. For instance, the masternodes may be
subject to coercion. ii) It fails to effectively utilize the knowl-
edge of community experts in the decision-making process.
This is because the system can only support very basic type
of voting schemes, and the voting power of experts are limited.
In this work, we propose to use a different approach –
liquid democracy – to achieve better collaborative intelligence.
Liquid democracy (also known as delegative democracy [19])
is an hybrid of direct democracy and representative democ-
racy. It provides the beneﬁts of both systems (whilst doing
away with their drawbacks) by enabling organisations to take
advantage of experts in a treasury voting process, as well
as giving the stakeholders the opportunity to vote. For each
project, a voter can either vote directly or delegate his/her
voting power to an expert who is knowledgeable and renowned
in the corresponding area.
Collaborative decision-making. The core component of a
treasury system is a decision-making system that allows
members of the community collectively reach some con-
clusions/decisions. During each treasury period, anyone can
submit a proposal for projects to be funded. Due to shortage
of available funds, only a few of them can be supported. There-
fore, a collaborative decision-making mechanism is required.
Note that in the literature, a few blockchain based e-voting
schemes have been proposed. However, our treasury decision-
making have a number of differences: (i) conventional e-voting
scheme requires real-world identity authentication, while our
treasury decision-making do not need to link voters to their
real identities; (ii) in a conventional e-voting scheme, typically,
each voter has one vote, while in our treasury decision-making,
the voting power is proportional to the corresponding stake;
(iii) our treasury decision-making supports liquid democracy
with privacy assurance, while no other known e-voting scheme
can support liquid democracy with provable security.
Proper selection of the voting scheme allows maximizing
the number of voters satisﬁed by the voting results as well
as minimizing voters’ effort. In practice, there are two com-
monly used voting schemes: i) preferential or ranked voting
and ii) approval voting. An extension of approval voting
is the “Yes-No-Abstain” voting, where the voters express
“Yes/No/Abstain” opinion for each proposal. Recent theoret-
ical analysis of this election rule with variable number of
winners, called Fuzzy threshold voting [27], shows advantages
of this voting scheme for treasury application. Therefore,
we will adopt
this voting scheme in our treasury system.
Nevertheless, we emphasize that a different voting scheme
can be deployed to our treasury system without signiﬁcantly
changing the underlying cryptographic protocols.
Our contributions. In this work, we aim to resolve the funding
sustainability issue for long-term cryptocurrency development
and maintenance by proposing a novel treasury system. The
proposed treasury system is compatible with most existing
off-the-shelf cryptocurrencies/blockchain platforms, such as
Bitcoin and Ethereum. We highlight the major contributions
of this work as follows.
•
For the ﬁrst
time, we provide a rigorous security
modeling for a blockchain-based treasury voting sys-
tem that supports liquid democracy/delegative voting.
More speciﬁcally, we model the voting system in the
2
VOTE
well-known Universally Composable (UC) framework
[13] via an ideal functionality F t,k,n,m
. The func-
tionality interacts with a set voters and experts as
well as k voting committee members. It allows the
voters to either delegate their voting power to some
experts or vote directly on the project. If at least
t out of k voting committee members are honest,
the functionality guarantees termination. Even in the
extreme case, when all the voting committee members
are corrupted, the integrity of the voting result is still
ensured; however, in that case we don’t guarantee
protocol termination.
• We propose an efﬁcient design of the treasury sys-
tem. The system collects funding via three potential
sources: (i) Minting new coins; (ii) Taxation from
miners’ reward; (iii) Donations or charity. In an it-
erative process, the treasury funds accumulate over
time, and the projects are funded periodically. Each
treasury period consists of pre-voting epoch, voting
epoch, and post-voting epoch, which can be deﬁned
in terms of number of blockchain blocks. In the pre-
voting epoch, project proposals are submitted, and the
voters/experts are registered. In the voting epoch, the
voting committee is selected; after that, they jointly
generate the voting key for the treasury period. The
voters and experts then cast their ballots. In the post-
voting epoch,
the voting committee computes and
signs the treasury decision. Winning proposals will
then be funded. Any stakeholder in the community
can participate in the treasury voting, and their voting
power is proportional to their possessed stake. In our
system, we distinguish coin ownership from stake
ownership. That is, the owner of a coin can be dif-
ferent from the owner of the coin’s stake. This allows
blockchain-level stake delegation without transferring
the ownership of the coin. It means that the user can
delegate his/her stake to someone else without risk of
losing the ultimate control of the coin(s). To achieve
this, we introduced stake ownership veriﬁcation mech-
anism using the payload of a coin. (Without loss of
generality, we assume a coin has certain storage ﬁeld
for non-transactional data.)
• We proposed the world’s ﬁrst honest veriﬁer zero-
knowledge proof/argument for unit vector encryption
with logarithmic size communication. Conventionally,
to show a vector of ElGamal ciphertexts element-wise
encrypt a unit vector, Chaum-Pedersen proofs [14] are
used to show each of the ciphertexts encrypts either 0
or 1 (via Sigma OR composition) and the product of
all the ciphertexts encrypts 1. Such kind of proof is
used in many well-known voting schemes, e.g., Helios.
However, the proof size is linear in the length of the
unit vector, and thus the communication overhead is
quite signiﬁcant when the unit vector length becomes
larger. In this work, we propose a novel special honest
veriﬁer ZK (SHVZK) proof/argument for unit vector
that allows the prover to convince the veriﬁer that
a vector of ciphertexts (C0, . . . , Cn−1) encrypts a
, i ∈ [0, n − 1] with O(log n) proof
unit vector e(n)
size. The proposed SHVZK protocol can also be Fiat-
i
Shamir transformed to a non-interactive ZK (NIZK)
proof in the random oracle model.
• We provide prototype implementation [2] of the pro-
posed treasury system for running and benchmarking
in the real world environment. Our implementation is
written in Scala programming language over Scorex
2.0 framework and uses TwinsChain consensus for
keeping the underlying blockchain. Main functionality
includes proposal submission, registration of voters,
experts, voting committee members and their corre-
sponding deposit lock, randomized selection of the
voting committee members among voters, distributed
key generation (6-round protocol), ballots casting,
joint decryption with recovery in case of faulty com-
mittee members (4-round protocol), randomness gen-
eration for the next treasury period (3-round protocol),
reward payments, deposit paybacks, and penalties for
faulty actors. All
implemented protocols are fully
decentralized and resilient up to 50% of malicious
participants. During veriﬁcation we launched a testnet
that consisted of 12 full nodes successfully operating
tens of treasury periods with different parameters.
II. PRELIMINARIES
Notations. Throughout this paper, we will use the following
notations. Let λ ∈ N be the security parameter. Denote the
set {a, a + 1, . . . , b} by [a, b], and let [b] denote [1, b]. We
abbreviate probabilistic polynomial time as PPT. By a((cid:96)), we
denote a length-(cid:96) vector (a1, . . . , a(cid:96)). When S is a set, s ← S
stands for sampling s uniformly at random from S. When A
is a randomised algorithm, y ← A(x) stands for running A on
input x with a fresh random coin r. When needed, we denote
y := A(x; r) as running A on input x with the explicit random
coin r. Let poly(·) and negl(·) be a polynomially-bounded
function and negligible function, respectively.
The blockchain abstraction. Without loss of generality, we
abstract the underlying blockchain platform encompasses the
following concepts.
◦ Coin. We assume the underlying blockchain platform
has the notion of Coins or its equivalent. Each coin can be
spent only once, and all the value of coin must be consumed.
As depicted in Fig. 1, each coin consists of the following 4
attributes:
•
•
•
Coin ID: It is an implicit attribute, and every coin has
a unique ID that can be used to identify the coin.
Value: It contains the value of the coin.
Cond: It contains the conditions under which the coin
can be spent.
•
Payload: It is used to store any non-transactional data.
◦ Address. We also generalize the concept of address.
Conventionally, an address is merely a public key, pk, or
hash of a public key, h(pk). To create coins associated with
the address, the spending condition of the coin should be
deﬁned as a valid signature under the corresponding public
key pk of the address. In this work, we deﬁne an address as
Fig. 1: Coin and transaction structure.
a generic representation of some spending condition. Using
the recipient’s address, a sender is able to create a new coin
whose spending condition is the one that the recipient intended;
therefore, the recipient may spend the coin later.
◦ Transaction. Each transaction takes one or more (un-
spent) coins, denoted as {Ini}i∈[n], as input, and it outputs one
or more (new) coins, denoted as {Outj}j∈[m]. Except special
transactions, the following condition holds:
n(cid:88)
Ini.Value ≥ m(cid:88)
Outj.Value
i=1
j=1
and the difference is interpreted as transaction fee. As shown
in Fig. 1, the transaction has a Veriﬁcation Data ﬁeld that
contains necessary veriﬁcation data to satisfy all the spending
conditions of the input coins {Ini}i∈[n]. In addition, each
transaction also has a Payload ﬁeld that can be used to
store any non-transactional data. We denote a transaction as
Tx(A; B; C), where A is the set of input coins, B is the set
of output coins, and C is the Payload ﬁeld. Note that the
veriﬁcation data is not explicitly described for simplicity.
Universal composability. We model our system security under
the standard Universal Composability (UC) framework. The
protocol is represented as interactive Turing machines (ITMs),
each of which represents the program to be run by a partici-
pant. Adversarial entities are also modeled as ITMs.
We distinguish between ITMs (which represent static ob-
jects, or programs) and instances of ITMs (ITIs), that represent
interacting processes in a running system. Speciﬁcally, an
ITI is an ITM along with an identiﬁer that distinguishes it
from other ITIs in the same system. The identiﬁer consists of
two parts: A session-identiﬁer (SID) which identiﬁes which