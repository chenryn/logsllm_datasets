的起止，不是字符串的一部分。
也可以用这个函数在屏幕上打印出空行，只要调用 print()就可以了，括号内没
有任何东西。
在写函数名时，末尾的左右括号表明它是一个函数的名字。这就是为什么在本
书中你会看到print()，而不是print。第2章更详细地探讨了函数。
1.6.3 input()函数
函数等待用户在键盘上输入一些文本，并按下回车键。
 m yName = input()
这个函数求值为一个字符串，即用户输入的文本。前面的代码行将这个字符串
第1章 Python基础
赋给变量myName。
你可以认为input()函数调用是一个表达式，它求值为用户输入的任何字符串。
如果用户输入'Al'，那么该表达式就求值为myName = 'Al'。
1.6.4 打印用户的名字
接下来的print()调用，在括号间包含表达式'It is good to meet you, ' + myName。
 p rint('It is good to meet you, ' + myName)
要记住，表达式总是可以求值为一个值。如果'Al'是上一行代码保存在myName
中的值，那么这个表达式就求值为'It is good to meet you, Al'。这个字符串传给print()，
它将输出到屏幕上。
1.6.5 len()函数
你可以向 len()函数传递一个字符串（或包含字符串的变量），然后该函数求值
为一个整型值，即字符串中字符的个数。
 print('The length of your name is:')
p rint(len(myName))
在交互式环境中输入以下内容试一试：
>>> len('hello')
5
>>> len('My very energetic monster just scarfed nachos.')
46
>>> len('')
0
就像这些例子，len(myName)求值为一个整数。然后它被传递给print()，在屏幕
上显示。请注意，print()允许传入一个整型值或字符串。但如果在交互式环境中输
入以下内容，就会报错：
>>> print('I am ' + 29 + ' years old.')
Traceback (most recent call last):
File "", line 1, in 
print('I am ' + 29 + ' years old.')
TypeError: Can't convert 'int' object to str implicitly
导致错误的原因不是 print()函数，而是你试图传递给 print()的表达式。如果在
交互式环境中单独输入这个表达式，也会得到同样的错误。
>>> 'I am ' + 29 + ' years old.'
Traceback (most recent call last):
File "", line 1, in 
'I am ' + 29 + ' years old.'
TypeError: Can't convert 'int' object to str implicitly
报错是因为，只能用+操作符加两个整数，或连接两个字符串。不能让一个整
Python编程快速上手——让繁琐工作自动化
数和一个字符串相加，因为这不符合Python的语法。可以使用字符串版本的整数，
修复这个错误。这在下一节中解释。
1.6.6 str()、int()和float()函数
如果想要连接一个整数（如29）和一个字符串，再传递给print()，就需要获得
值'29'。它是 29 的字符串形式。str()函数可以传入一个整型值，并求值为它的字符
串形式，像下面这样：
>>> str(29)
'29'
>>> print('I am ' + str(29) + ' years old.')
I am 29 years old.
因为str(29)求值为’29’，所以表达式'I am ' + str(29) + ' years old.'求值为'I am ' +
'29' + ' years old.'，它又求值为'I am 29 years old.'。这就是传递给print()函数的值。
str()、int()和float()函数将分别求值为传入值的字符串、整数和浮点数形式。请
尝试用这些函数在交互式环境中转换一些值，看看会发生什么。
>>> str(0)
'0'
>>> str(-3.14)
'-3.14'
>>> int('42')
42
>>> int('-99')
-99
>>> int(1.25)
1
>>> int(1.99)
1
>>> float('3.14')
3.14
>>> float(10)
10.0
前面的例子调用了str()、int()和float()函数，向它们传入其他数据类型的值，得
到了字符串、整型或浮点型的值。
如果想要将一个整数或浮点数与一个字符串连接，str()函数就很方便。如果你
有一些字符串值，希望将它们用于数学运算，int()函数也很有用。例如，input()函
数总是返回一个字符串，即便用户输入的是一个数字。在交互式环境中输入spam =
input()，在它等待文本时输入101。
>>> spam = input()
101
>>> spam
'101'
保存在spam中的值不是整数101，而是字符串'101'。如果想要用spam中的值进
行数学运算，那就用int()函数取得spam的整数形式，然后将这个新值存在spam中。
第1章 Python基础
>>> spam = int(spam)
>>> spam
101
现在你应该能将spam变量作为整数，而不是字符串使用。
>>> spam * 10 / 5
202.0
请注意，如果你将一个不能求值为整数的值传递给int()，Python将显示出错信息。
>>> int('99.99')
Traceback (most recent call last):
File "", line 1, in 
int('99.99')
ValueError: invalid literal for int() with base 10: '99.99'
>>> int('twelve')
Traceback (most recent call last):
File "", line 1, in 
int('twelve')
ValueError: invalid literal for int() with base 10: 'twelve'
如果需要对浮点数进行取整运算，也可以用int()函数。
>>> int(7.7)
7
>>> int(7.7) + 1
8
在你的程序中，最后3行使用了函数int()和str()，取得适当数据类型的值。
 print('What is your age?') # ask for their age
myAge = input()
p rint('You will be ' + str(int(myAge) + 1) + ' in a year.')
myAge变量包含了input()函数返回的值。因为input()函数总是返回一个字符串
（即使用户输入的是数字），所以你可以使用int(myAge)返回字符串的整型值。这个
整型值随后在表达式int(myAge) + 1中与1相加。
相加的结果传递给str()函数：str(int(myAge) + 1)。然后，返回的字符串与字符
串'You will be '和' in a year.'连接，求值为一个更长的字符串。这个更长的字符串最
终传递给print()，在屏幕上显示。
假定用户输入字符串'4'，保存在myAge中。字符串'4'被转换为一个整型，所以
你可以对它加1。结果是5。str()函数将这个结果转化为字符串，这样你就可以将它
与第二个字符串'in a year.'连接，创建最终的消息。这些求值步骤如图1-4所示。
文本和数字相等判断
虽然数字的字符串值被认为与整型值和浮点型值完全不同，但整型值可以与
浮点值相等。
>>> 42 == '42'
False
>>> 42 == 42.0
Python编程快速上手——让繁琐工作自动化
True
>>> 42.0 == 0042.000
True
Python进行这种区分，因为字符串是文本，而整型值和浮点型都是数字。
图1-4 如果4保存在myAge中，求值的步骤
1.7 小结
你可以用一个计算器来计算表达式，或在文本处理器中输入字符串连接。甚至
可以通过复制粘贴文本，很容易地实现字符串复制。但是表达式以及组成它们的值
（操作符、变量和函数调用），才是构成程序的基本构建块。一旦你知道如何处理这
些元素，就能够用Python操作大量的数据。
最好是记住本章中介绍的不同类型的操作符（+、-、*、/、//、%和**是数学操
作符，+和*是字符串操作符），以及3种数据类型（整型、浮点型和字符串）。
我们还介绍了几个不同的函数。print()和input()函数处理简单的文本输出（到屏幕）
和输入（通过键盘）。len()函数接受一个字符串，并求值为该字符串中字符的数目。
在下一章中，你将学习如何告诉Python根据它拥有的值，明智地决定什么代码
要运行，什么代码要跳过，什么代码要重复。这称为“控制流”，它让你编写程序
来做出明智的决定。
1.8 习题
1．下面哪些是操作符，哪些是值？
*
'hello'
-88.8
-
/
第1章 Python基础
+
5
2．下面哪个是变量，哪个是字符串？
spam
'spam'
3．说出3种数据类型。
4．表达式由什么构成？所有表达式都做什么事？
5．本章介绍了赋值语句，如spam = 10。表达式和语句有什么区别？
6．下列语句运行后，变量bacon的值是什么？
bacon = 20
bacon + 1
7．下面两个表达式求值的结果是什么？
'spam' + 'spamspam'
'spam' * 3
8．为什么eggs是有效的变量名，而100是无效的？
9．哪3个函数能分别取得一个值的整型、浮点型或字符串版本？
10．为什么这个表达式会导致错误？如何修复？
'I have eaten ' + 99 + ' burritos.'
附加题：在线查找len()函数的Python文档。它在一个标题为“Built-in Functions”
的网页上。扫一眼 Python 的其他函数的列表，查看 round()函数的功能，在交互式
环境中使用它。
Python编程快速上手——让繁琐工作自动化
2
第 章
控 制 流
2
你已经知道了单条指令的基本知识。程序就是一系列指
令。但编程真正的力量不仅在于运行（或“执行”）一条接一
条的指令，就像周末的任务清单那样。根据表达式求值的结果，
程序可以决定跳过指令，重复指令，或从几条指令中选择一条
运行。实际上，你几乎永远不希望程序从第一行代码开始，简
单地执行每行代码，直到最后一行。“控制流语句”可以决定
在什么条件下执行哪些Python语句。
这些控制流语句直接对应于流程图中的符号，所以在本章中，我将提供示例代
码的流程图。图 2-1展示了一张流程图，内容是如果下雨怎么办。按照箭头构成的
路径，从开始到结束。
在流程图中，通常有不止一种方法从开始走到结束。计算机程序中的代码行也
是这样。流程图用菱形表示这些分支节点，其他步骤用矩形表示。开始和结束步骤
用带圆角的矩形表示。
但在学习流程控制语句之前，首先要学习如何表示这些yes和no选项。同时你
也需要理解，如何将这些分支节点写成Python代码。要做到这一点，让我们先看看
布尔值、比较操作符和布尔操作符。
图2-1 一张流程图，告诉你如果下雨要做什么
2.1 布尔值
虽然整型、浮点型和字符串数据类型有无数种可能的值，但“布尔”数据类型
只有两种值：True 和 False。Boolean（布尔）的首字母大写，因为这个数据类型是
根据数学家George Boole命名的。在作为Python代码输入时，布尔值True和False
不像字符串，两边没有引号，它们总是以大写字母T或F开头，后面的字母小写。
在交互式环境中输入下面内容，其中有些指令是故意弄错的，它们将导致出错信息。
 >>> spam = True
>>> spam
True