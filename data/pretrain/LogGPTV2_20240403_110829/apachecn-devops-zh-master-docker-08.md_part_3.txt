既然我们已经了解了如何创建和管理 Docker Swarm 集群，那么我们应该了解如何运行任务，例如创建和扩展服务。
# Docker Swarm 服务和栈
到目前为止，我们已经了解了以下命令:
```
$ docker swarm 
$ docker node 
```
这两个命令允许我们从现有的 Docker 主机集合中引导和管理我们的 Docker Swarm 集群。我们接下来要看的两个命令如下:
```
$ docker service 
$ docker stack 
```
`service`和`stack`命令允许我们执行任务，进而启动、扩展和管理我们的 Swarm 集群中的容器。
# 服务
`service`命令是启动利用 Swarm 集群的容器的一种方式。让我们看看在我们的 Swarm 集群上启动一个真正基本的单容器服务。为此，请运行以下命令:
```
$ docker service create \
 --name cluster \
 --constraint "node.role == worker" \
 -p:80:80/tcp \
 russmckendrick/cluster
```
这将创建一个名为集群的服务，该服务由一个容器组成，端口`80`从容器映射到主机，并且它将只在具有工作者角色的节点上运行。
在我们考虑使用该服务做更多事情之前，我们可以检查它是否在我们的浏览器上工作。为此，我们需要两个工作节点的 IP 地址。首先，我们需要通过运行以下命令来仔细检查哪些是工作节点:
```
$ docker node ls
```
一旦我们知道哪个节点具有哪个角色，您就可以通过运行以下命令找到您的节点的 IP 地址:
```
$ docker-machine ls
```
查看以下终端输出:
![](img/ec92169f-f6c8-465b-a6fd-ed3c9a670640.png)
我的工作节点是`swarm-manager`和`swarm-worker02`，它们的 IP 地址分别是`192.168.99.100`和`192.168.99.102`。
转到您的工作节点的任一 IP 地址，如 [http://192.168.99.100/](http://192.168.99.100/) 或 [http://192.168.99.102/](http://192.168.99.102/) ，在浏览器中将显示`russmckendrick/cluster`应用的输出，这是 Docker Swarm 图形和提供页面的容器的主机名:
![](img/5c4522f7-b026-427a-afd9-9d91648800be.png)
现在我们的服务已经在我们的集群上运行，我们可以开始了解更多关于它的信息。首先，我们可以通过运行以下命令再次列出服务:
```
$ docker service ls
```
在我们的例子中，这应该返回我们启动的单一服务，称为集群:
![](img/110247ed-8f1f-42f6-8a30-3f9be2da0c99.png)
如您所见，这是一项`replicated`服务，`1/1`容器处于活动状态。接下来，您可以通过运行`inspect`命令来深入查看服务的更多信息:
```
$ docker service inspect cluster --pretty
```
这将返回服务的详细信息:
![](img/5289633f-34eb-4900-a7d7-7c6a647e141d.png)
您可能已经注意到，到目前为止，我们还不必关心服务当前运行在两个工作节点中的哪一个上。这是 Docker Swarm 的一个非常重要的特性，因为它完全消除了您对单个容器放置的担心。
在考虑扩展我们的服务之前，我们可以通过运行以下命令快速了解一下我们的单个容器在哪个主机上运行:
```
$ docker node ps
$ docker node ps swarm-manager
$ docker node ps swarm-worker02
```
这将列出我们每个主机上运行的容器。默认情况下，它会列出命令所针对的主机，在我的例子中是`swarm-worker01`:
![](img/ce578e7c-7393-4a2b-8e4b-64f5b33aa575.png)
让我们看看将我们的服务扩展到我们的应用容器的六个实例。运行以下命令来扩展和检查我们的服务:
```
$ docker service scale cluster=6
$ docker service ls
$ docker node ps swarm-manager
$ docker node ps swarm-worker02
```
我们只检查了两个节点，因为我们最初告诉我们的服务在工作节点上启动。从下面的终端输出可以看出，我们现在有三个容器在每个工作节点上运行:
![](img/8b4bd90c-fa5c-4073-a197-1b20ec53e0c3.png)
在我们继续查看栈之前，让我们删除我们的服务。为此，请运行以下命令:
```
$ docker service rm cluster
```
这将删除所有容器，同时将下载的映像留在主机上。
# 大量
使用 Swarm 和服务创建非常复杂、高度可用的多容器应用是完全可能的。在非 Swarm 集群中，为应用的一部分手动启动每组容器可能会变得有些费力，也很难共享。为此，Docker 创建了允许您在 Docker 撰写文件中定义服务的功能。
下面的 Docker Compose 文件应该命名为`docker-compose.yml`，它将创建与我们在上一节中启动的服务相同的服务:
```
version: "3"
services:
 cluster:
 image: russmckendrick/cluster
 ports:
 - "80:80"
 deploy:
 replicas: 6
 restart_policy:
 condition: on-failure
 placement:
 constraints:
 - node.role == worker
```
如您所见，栈可以由多个服务组成，每个服务都在 Docker Compose 文件的`services`部分下定义。
除了正常的 Docker Compose 命令，还可以添加一个`deploy`部分；这是您定义与栈的 Swarm 元素相关的所有内容的地方。
在前面的示例中，我们说我们想要六个副本，它们应该分布在我们的两个工作节点上。此外，我们更新了默认的重启策略，您可以在我们检查上一节中的服务时看到，它显示为暂停，因此，如果容器变得无响应，它总是会重启。
要启动我们的栈，请将前面的内容复制到名为`docker-compose.yml`的文件中，然后运行以下命令:
```
$ docker stack deploy --compose-file=docker-compose.yml cluster
```
Docker 将像使用 Docker Compose 启动容器一样，创建一个新的网络，然后在其上启动您的服务。
您可以通过运行以下命令来检查您的`stack`状态:
```
$ docker stack ls
```
这将显示已经创建了一个服务。通过运行以下命令，您可以获得由`stack`创建的服务的详细信息:
```
$ docker stack services cluster
```
最后，运行以下命令将显示`stack`内的容器运行的位置:
```
$ docker stack ps cluster
```
看看终端输出:
![](img/cb8a2a68-8757-47e4-85b2-96e4dc5dc737.png)
同样，您将能够使用节点的 IP 地址访问栈，并且您将被路由到一个正在运行的容器。要删除栈，只需运行以下命令:
```
$ docker stack rm cluster
```
这将删除栈启动时创建的所有服务和网络。
# 删除群群集
在继续之前，由于下一节不再需要它，您可以通过运行以下命令来删除您的 Swarm 集群:
```
$ docker-machine rm swarm-manager swarm-worker01 swarm-worker02
```
如果您因为任何原因需要重新启动 Swarm 集群，只需按照本章开头的说明重新创建集群。
# 负载平衡、覆盖和调度
在最后几节中，我们看了启动服务和栈。为了访问我们启动的应用，我们可以使用集群中的任何主机 IP 地址；这怎么可能？
# 入口负载平衡
Docker Swarm 内置了入口负载平衡器，可以轻松地将流量分配给面向公众的容器。
这意味着您可以将 Swarm 集群中的应用公开给服务，例如，Amazon Elastic Load Balancer 之类的外部负载平衡器，因为您知道无论当前哪个主机托管您的请求，您的请求都将被路由到正确的容器，如下图所示:
![](img/2fcef96f-1873-487a-9691-81816678fac5.png)
这意味着我们的应用可以扩大或缩小、失败或更新，而不需要重新配置外部负载平衡器。
# 网络覆盖
在我们的示例中，我们启动了一个运行单个应用的简单服务。假设我们想在应用中添加一个数据库层，它通常是网络中的一个固定点；我们怎么能这样做？
Docker Swarm 的网络覆盖层扩展了您在多个主机上启动容器的网络，这意味着每个服务或栈都可以在自己的独立网络中启动。这意味着我们运行 MongoDB 的数据库容器将可以被运行在端口`27017`上相同覆盖网络上的所有其他容器访问，无论这些容器运行在哪个主机上。
你可能在想自己*等一下。这是否意味着我必须将一个 IP 地址硬编码到我的应用配置中？*嗯，这不太适合 Docker Swarm 试图解决的问题，所以不，你不适合。
每个覆盖网络都有自己内置的域名系统服务，这意味着网络中启动的每个容器都能够将同一网络中另一个容器的主机名解析为其当前分配的 IP 地址。这意味着，当我们配置我们的应用连接到我们的数据库实例时，我们只需要告诉它连接到，比如说，`mongodb:27017`，它就会连接到我们的 MongoDB 容器。
这将使我们的图表如下所示:
![](img/1883cbd8-9542-4be9-a1c4-6477bba73ddc.png)
采用这种模式时，您还需要考虑其他一些因素，但我们将在[第 14 章](13.html)*【Docker workflow】*中介绍这些因素。
# 行程安排
在撰写本文时，Docker Swarm 中只有一种单一的调度策略，称为 Spread。这种策略的作用是安排任务在负载最小的节点上运行，该节点满足您在启动服务或栈时定义的任何约束。在大多数情况下，您不应该需要给服务添加太多约束。
Docker Swarm 目前不支持的一个特性是相似性和反相似性规则。虽然使用约束很容易绕过这一点，但我敦促您不要让事情过于复杂，因为如果您在定义服务时设置了太多约束，很容易导致主机过载或创建单点故障。
# 摘要
在这一章中，我们探索了 Docker Swarm。我们看了如何安装 Docker Swarm 和组成 Docker Swarm 的 Docker Swarm 组件。我们看了如何使用 Docker Swarm:加入、列出和管理 Swarm 管理器和工作者节点。我们回顾了服务和栈命令以及如何使用它们，并谈到了 Swarm 内置的入口负载平衡器、覆盖网络和调度器。
在下一章中，我们将看到 Docker Swarm 的另一个替代品，叫做 Kubernetes。Docker 以及其他提供商也支持这一点。
# 问题
1.  对还是错:您应该使用独立的 Docker Swarm 而不是内置的 Docker Swarm 模式来运行您的 Docker Swarm？
2.  启动 Docker Swarm 管理器以将您的员工添加到 Docker Swarm 集群后，您需要哪两件事？
3.  您会使用哪个命令来找出 Docker Swarm 集群中每个节点的状态？
4.  您会在 docker 节点检查 Swarm 管理器中添加哪个标志，以使其更具可读性？
5.  如何将一个节点提升为经理？
6.  您可以使用什么命令来扩展您的服务？
# 进一步阅读
关于 Raft 共识算法的详细解释，我建议通过名为*数据的机密生命*的精彩演示来了解，该演示可在[http://thesecretlivesofdata.com/raft](http://thesecretlivesofdata.com/raft)找到。它通过一个易于理解的动画解释了发生在管理器节点后台的所有过程。