### 4. Changelog Analysis and API Changes

- **Non-Fixable Issues**: 
  - 0 (0%)
  - 0 (0%)
  - 272 (16%)
  - 16 (0.88%)
  - 10 (0.14%)
  - 377 (39.9%)

- **API Changes**:
  - 743 (82.1%)
  - 594 (81.1%)
  - 9,643 (57.3%)

Changelogs often advertise new functionality rather than detailed bug fixes. The scarcity of security fix entries in changelogs highlights the current status quo. Library developers seem to prioritize new features, which, according to our survey, is only the third most important update criterion for users. A recent study [26] indicates that API changes in the Android SDK frequently trigger discussions on Stack Overflow. Active participation by library developers in these discussions could provide community support and guidelines for upgrading.

### 5. Semantic Versioning and Its Impact

Semantic Versioning (SemVer) is a simple yet effective way for library developers to express compatibility and for consumers to assess integration effort. Almost all libraries in our dataset use the X.Y.Z scheme, but API compatibility is not always the primary factor in versioning. It remains unclear how many developers are aware of SemVer and can interpret version changes correctly. Promoting SemVer compliance, such as adding a SemVer badge to code repositories, could raise awareness. The new Swift package manager enforces SemVer, which will likely increase its adoption among iOS developers.

### 5.2 Improving Library Updatability

Based on survey responses and follow-up analyses, there are several ways to improve library updatability in the app ecosystem. This section provides actionable advice based on first-hand information from app developers and results from analyses of libraries and apps on Google Play. Future work will focus on implementing, evaluating, and assessing developer adaptation to the proposed solutions.

#### Centralized Marketplace

A centralized marketplace like the Google Play Store can improve library adaption. Google's App Security Improvement program identifies and notifies developers about security issues, enforcing timely deployment of security fixes. However, this service has limitations: it only addresses known vulnerabilities and does not benefit developers outside the Play Store. A dedicated library store or package manager for Android, similar to those in other ecosystems (e.g., nuget, npm, Cargo, Cocoapods), could enforce quality standards and foster contributions. Our survey shows that 79% of developers would welcome such a solution.

#### Development Tools

The Android Gradle plugin, introduced in 2014, is a powerful dependency manager, but it has usability and performance issues. Despite its high acceptance, 20% of developers still manually integrate libraries, and 33% use a combination of methods. Google is addressing these concerns with a new Gradle version that improves build times. Manual integration increases the update effort, as new versions must be downloaded manually without notifications. Android Studio 2.2 now includes an opt-in feature to notify developers of available library updates.

Integrating library version compatibility detection into the IDE could help classify updates and inform developers about the expected code adaptation effort. We are currently evaluating the implementation of such a plugin for Android Studio, the preferred IDE for 61% of surveyed developers.

#### Automated Library Updates

Automated updates, such as those for the WebView component in Android 5.0, can push critical patches to millions of devices. Similarly, Google Play now automatically installs app updates if no new permissions are requested. However, updating libraries within the application bytecode is more challenging. While 85.6% of libraries could be automatically updated, and 48.2% to the latest version, there are obstacles to auto-updating minor and major releases. Limiting auto-updates to patch versions with critical bug fixes and security fixes could significantly improve the current situation.

Developers could specify a subset of libraries eligible for automatic updates, similar to how Google Chrome handles extension updates. According to the survey, 52% of developers would welcome such a mechanism, while only 25% disapprove. On-device deployment strategies, such as integrating new libraries during on-device compilation, could also facilitate updates. Decoupling library code from application code through dynamic linking, now allowed in iOS 8, simplifies library updates.

### 5.3 Threats to Validity

Determining the public API of software components, especially on Android, is complex due to obfuscation. We use a best-effort approach to distinguish obfuscated and non-obfuscated names, but corner cases remain undecidable. Proper documentation would provide a complete public interface, but this information is not always available. Our conservative filtering list reports a lower bound on updatability.

Our analysis is based on API compatibility, which is the main factor in determining whether a library can be updated without code adaptation. We do not include rare cases where public, static class fields are renamed, assuming they do not occur frequently. We also do not assess whether the intended functionality is preserved, as changing existing API semantics is strongly discouraged.

We consider dependencies on additional libraries, finding that 55% of libraries have at least one version with sub-dependencies. Most of these dependencies are optional, and the two utility libraries, Gson and okio, have high updatability rates, suggesting that sub-dependencies do not significantly affect overall updatability.

Finally, we investigated changes in the minimal required Android API level. Although this does not affect our library updatability results, it may require developers to increase the appâ€™s minimum API level, potentially reducing the user base. Our findings suggest that library developers are conservative in their choice of minimal SDK, minimizing the loss of potential users.

### 6. Related Work

Several studies have assessed the ripple effect of API changes in different software ecosystems. Dig et al. [16] found that 80% of API changes break client applications upon update. Kim et al. [22] linked API changes to an increase in bugs, particularly after refactoring. Bavota et al. [5] studied the evolution of dependencies in the Apache ecosystem, finding that client projects are more willing to upgrade libraries with many bug fixes but are discouraged by substantial API changes. Our work extends these findings by identifying root causes in the Android ecosystem and proposing solutions with high developer acceptance.

McDonnell et al. [29] studied Android API stability and adoption, finding that developers avoid new APIs to minimize instability and integration effort. Another study [25] showed that fast-changing and error-prone APIs negatively affect app ratings. Our work confirms these findings for third-party libraries, especially over-privileged ones, which often receive negative feedback and ratings.

Various studies [21, 30, 37] emphasize the importance of code reuse, highlighting the need for better practices and tools to manage library updates and ensure compatibility.