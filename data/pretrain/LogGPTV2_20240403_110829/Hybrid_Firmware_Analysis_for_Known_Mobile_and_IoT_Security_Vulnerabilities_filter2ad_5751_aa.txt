title:Hybrid Firmware Analysis for Known Mobile and IoT Security Vulnerabilities
author:Pengfei Sun and
Luis Garcia and
Gabriel Salles-Loustau and
Saman A. Zonouz
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Hybrid Firmware Analysis for Known
Mobile and IoT Security Vulnerabilities
Pengfei Sun†, Luis Garcia∗, Gabriel Salles-Loustau† and Saman Zonouz†
† Electrical and Computer Engineering, ∗Electrical and Computer Engineering
†Rutgers University, ∗University of California, Los Angeles
{pengfei.sun, gabriel.sallesloustau, saman.zonouz}@rutgers.edu, {garcialuis}@ucla.edu
Abstract—Mobile and IoT operating systems–and their ensuing
software updates–are usually distributed as binary ﬁles. Given
that these binary ﬁles are commonly closed source, users or
businesses who want to assess the security of the software need
to rely on reverse engineering. Further, verifying the correct
application of the latest software patches in a given binary is
an open problem. The regular application of software patches
is a central pillar for improving mobile and IoT device security.
This requires developers, integrators, and vendors to propagate
patches to all affected devices in a timely and coordinated fashion.
In practice, vendors follow different and sometimes improper
security update agendas for both mobile and IoT products. More-
over, previous studies revealed the existence of a hidden patch gap:
several vendors falsely reported that they patched vulnerabilities.
Therefore, techniques to verify whether vulnerabilities have been
patched or not in a given binary are essential. Deep learning
approaches have shown to be promising for static binary analyses
with respect to inferring binary similarity as well as vulnerability
detection. However, these approaches fail to capture the dynamic
behavior of these systems, and, as a result, they may inundate
the analysis with false positives when performing vulnerability
discovery in the wild. In particular, they cannot capture the
ﬁne-grained characteristics necessary to distinguish whether a
vulnerability has been patched or not.
In this paper, we present PATCHECKO, a vulnerability and
patch presence detection framework for executable binaries.
PATCHECKO relies on a hybrid, cross-platform binary code
similarity analysis that combines deep learning-based static
binary analysis with dynamic binary analysis. PATCHECKO does
not require access to the source code of the target binary
nor that of vulnerable functions. We evaluate PATCHECKO on
the most recent Google Pixel 2 smartphone and the Android
Things IoT ﬁrmware images, within which 25 known CVE
vulnerabilities have been previously reported and patched. Our
deep learning model shows a vulnerability detection accuracy of
over 93%. We further prune the candidates found by the deep
learning stage–which includes false positives–via dynamic binary
analysis. Consequently, PATCHECKO successfully identiﬁes the
correct matches among the candidate functions in the top 3
ranked outcomes 100% of the time. Furthermore, PATCHECKO’s
differential engine distinguishes between functions that are still
vulnerable and those that are patched with an accuracy of 96%.
I. INTRODUCTION
The number of discovered software vulnerabilities and the
rate at which we discover them increase steadily every year.
The number of new vulnerability reports submitted to the
Common Vulnerabilities and Exposures (CVE) database was
approximately 4, 600 in 2010, 6, 500 in 2016, and doubled in
2017 with over 14, 700 reports [30]. In parallel, the increasing
ubiquity of mobile and IoT devices (Gartner forecasts that 20.4
billion IoT devices will be in use worldwide by 2020 [40])
makes them a target of choice for vulnerability research and
exploitation. Further, it is common practice for both customers
and businesses to rely on commercial off-the-shelf binaries in
their products or for their activities. These external products
often require a vetting step, including security assertion of the
product’s software, e.g., blackbox penetration testing. When
not done properly, such use or integration of IoT devices can
lead to security issues [10]. Fortunately for the penetration
testers, mobile and IoT vendors often reuse open source code
and adapt them to their products. Common targets for pene-
tration testers are binary ﬁles such as cryptographic libraries,
media libraries, and parsers that are regularly updated upon
vulnerability discovery. Unfortunately,
the source code for
these libraries in mobile and IoT devices is not always easily
accessible, and ensuring that their software is up to date is an
open problem.
Generally, patch management for both IoT and mobile
devices is a challenge for heterogeneous ecosystems. A 2018
Federal Trade Commission report [11] mentioned that al-
though an ecosystem’s diversity provides extensive consumer
choice, it also contributes to security update complexity and
inconsistency. Software patches must go through many in-
termediaries from the software developers, to the software
integrators, and onto the vendors before getting pushed to the
end devices [1].
Two problems arise from this long patch chain. First, this
long list of intermediaries tends to delay the propagation of
patches to the end device. Duo labs found that only 25 percent
of mobile devices were operated on an up-to-date patch level
in 2016 [26]. Second, vendors do not always accurately report
whether a vulnerability has been patched or not (hidden
patch gaps), especially in the context of mobile and IoT
devices. A study showed that 80.4% of vendor-issued ﬁrmware
is released with multiple known vulnerabilities, and many
recently released ﬁrmware updates contain vulnerabilities in
third-party libraries that have been known for over eight
years [13]. Another study of Android phones [27] found that
some vendors regularly miss patches, leaving parts of the
ecosystem exposed to the underlying risks. Hidden patch gaps
not only leave a large set of devices vulnerable, but with
the pervasiveness of software code reuse, such vulnerabilities
can quickly propagate as developers may copy over existing
vulnerabilities [12].
Accordingly, identifying vulnerable binaries and patch sta-
tus is a critical challenge for end users. PATCHECKO solves
this problem via a two-step hybrid approach that combines
a lightweight whole ﬁrmware static analysis followed by
an accurate dynamic analysis that reﬁnes the static analysis
results.
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00053
373
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:28:40 UTC from IEEE Xplore.  Restrictions apply. 
Known vulnerability discovery via deep learning. Obtaining
the set–or at least a superset–of candidate vulnerabilities for
a given binary is an explored problem without a satisfactory
answer. Recently, researchers have started to tackle the cross-
platform binary similarity checking to detect known vulnera-
bilities [32], [17], [16], [41]. These efforts try to identify the
functions, if any, in the target ﬁrmware that “look like” one of
the functions in a previously populated database of functions
with known vulnerabilities. They propose to extract various
robust, platform-independent features directly from binary
code for each node in the control ﬂow graph that represents a
function. Other approaches have focused on binary similarity
detection where a graph matching algorithm is used to check
whether two functions’ control ﬂow graph representations are
similar [32], [17], [16]. Further, deep learning in the context of
Natural Language Processing (NLP) can also replace manually
selected features [43], [14].
Prior efforts have shown that deep learning approaches can
be used for binary analysis to detect vulnerabilities[38], [41],
[9]. The most recent approach [41] has a training performance
of 0.971 Area Under the Curve (AUC) and detection accuracy
of over 80%. However, despite this performance, assuming
the target binary has around 3000+ functions, there is still
a large number of candidate functions (600+) that need to
be explored manually for conﬁrmation after the analysis. It
has been shown the candidate functions can be pruned given
access to a binary’s symbol table [42]. However, for stripped
commercial-off-the-shelf (COTS) binaries, their solution can
only provide a very large set of candidate functions (mostly
false positives). Accordingly, further measures are necessary
to prune the candidate functions to identify and report only
the true positives (the functions with actual vulnerabilities).
PATCHECKO uses the target binary static analysis results
(static features) to conduct this ﬁrst stage.
Candidate
analysis.
PATCHECKO prunes the set of candidate functions from the
deep learning-based approach with dynamic analysis results
(dynamic features) to get rid of the false positives. The
static analysis removes the bulk of improbable candidates and
returns a small subset of functions, which enables PATCHECKO
to consider more resource-expensive dynamic analysis tech-
niques on a smaller set of target functions. Prior work [17],
[41] prioritized speed at the expense of accuracy due to scala-
bility concerns–focusing only on heuristic or static features of
basic blocks and functions. Compared to [15], PATCHECKO’s
hybrid approach not only speeds up the vulnerability func-
tion matching process, but also provides higher accuracy via
removing false positives.
function pruning
via dynamic
This initial framework allows us to develop a new training
model generation method that uses a default policy to pretrain
a task-independent graph embedding network. We then use this
method to generate a large-scale dataset using binary functions
compiled from the same source code but for different platforms
with different compiler optimization levels. We then built a
vulnerability database that includes 1,382 vulnerabilities for
mobile/IoT ﬁrmware.
However, the ultimate goal of our solution is not to only
ﬁnd similar vulnerability functions. The ﬁnal goal is to ensure
whether the vulnerability is still in the target ﬁrmware or if it
has been patched.
Missing patch detection. Prior work has already developed
precise patch presence tests [42]. However, this solution only
works with access to the source code for both the vulnerable
and patched function source code. Also, because this solution
relies on binary similarity-based approaches to locate target
functions, it suffers from the aforementioned high false posi-
tive rate for candidate functions. Our solution works directly
with stripped COTS binaries and does not require access to
the source code while signiﬁcantly pruning false positives.
Ultimately, this paper presents PATCHECKO: a framework
that
integrates deep-learning for binary similarity-checking
with dynamic analysis to discover known vulnerabilities as
well as to test for patch presence. Our evaluation demonstrates
that PATCHECKO signiﬁcantly outperforms the state-of-the-art
approaches with respect to both accuracy and efﬁciency.
Contributions. We summarize our contributions as follows:
• We propose an efﬁcient ﬁrmware vulnerability and patch
presence detection framework that leverages deep learn-
ing and dynamic binary analysis techniques to achieve
high accuracy and performance for known vulnerability
discoveries in stripped ﬁrmware binaries without source
code access.
• We propose a ﬁne-grained binary comparison algorithm
to distinguish accurately between patched and unpatched
versions of the same function’s binaries. Our solution cur-
rently works cross-platform–supporting ARM and X86
architectures. The selected relevant features for the com-
parison enable our solution to pinpoint the unpatched
functions with a very low false positive rate.
• We evaluate PATCHECKO on 25 CVE vulnerabilities for
100 different Android ﬁrmware libraries across 4 different
architectures. Our results are very promising for practical
deployment in real settings. With most of PATCHECKO’s
prototype being fully automated, its dynamic analysis
module correctly identiﬁed and pruned the false positives
from the deep learning classiﬁcation outcomes. The re-
sults were later processed, and the unpatched functions
were separated from the functions with already-patched
vulnerabilities.
II. OVERVIEW
We introduce the vulnerability function similarity problem
and challenges in II-A and then present our solution in II-B.
A. Threat Model and Challenges
In this paper, we consider the problem of searching for
known vulnerabilities in stripped COTS mobile/IoT binaries.
We assume that we do not have access to the source code.
We also assume that the binary is not packed or obfuscated
and that the binary is compiled from a high-level procedural
programming language, i.e., a language that has the notion of
functions. While handling packed code is important, it poses
unique challenges, which are out of scope for this paper.
Considering these assumptions, we identify the following
challenges that arise in the domain of mobile/IoT platforms.
Heterogeneous binary compilation. Mobile/IoT platforms
typically consist of heterogeneous distributions of hardware
that may share common software vulnerabilities. As such,
we explicitly consider cases where different cross-platform
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:28:40 UTC from IEEE Xplore.  Restrictions apply. 
374
(cid:20)(cid:38)(cid:30)(cid:32)(cid:25)(cid:35)(cid:21)(cid:22)(cid:30)(cid:25)(cid:1)(cid:4)(cid:33)(cid:24)(cid:25)(cid:1)(cid:5)(cid:3)
(cid:46)(cid:4)(cid:20)(cid:6)(cid:36)(cid:52)(cid:15)(cid:21)(cid:37)(cid:23)(cid:28)(cid:25)(cid:36)(cid:47)
(cid:3)(cid:29)(cid:32)(cid:21)(cid:35)(cid:29)(cid:25)(cid:36)
(cid:18)(cid:21)(cid:35)(cid:27)(cid:25)(cid:37)(cid:1)(cid:12)(cid:33)(cid:22)(cid:29)(cid:30)(cid:25)(cid:44)(cid:10)(cid:33)(cid:18)
(cid:3)(cid:29)(cid:32)(cid:21)(cid:35)(cid:42)
(cid:4)(cid:7)(cid:8)(cid:4)(cid:7)(cid:8)
(cid:7)(cid:38)(cid:32)(cid:23)(cid:49)
(cid:4)(cid:7)(cid:8)
(cid:4)(cid:7)(cid:8)(cid:4)(cid:7)(cid:8)(cid:4)(cid:7)(cid:8)
(cid:7)(cid:38)(cid:32)(cid:23)(cid:49)
(cid:4)(cid:7)(cid:8)
(cid:49) (cid:12)(cid:33)(cid:24)(cid:25)(cid:30)(cid:1)(cid:18)(cid:35)(cid:21)(cid:29)(cid:32)(cid:29)(cid:32)(cid:27)
(cid:18)(cid:35)(cid:21)(cid:29)(cid:32)(cid:29)(cid:32)(cid:27) (cid:5)(cid:21)(cid:37)(cid:21)
(cid:17)(cid:29)(cid:31)(cid:29)(cid:30)(cid:21)(cid:35)
(cid:4)(cid:20)(cid:6)(cid:36)
(cid:4)(cid:7)(cid:8)
(cid:7)(cid:38)(cid:32)(cid:23)(cid:13)
(cid:4)(cid:7)(cid:8)
(cid:29)
(cid:9)
(cid:24)
(cid:24)
(cid:25)
(cid:32)
(cid:1)
(cid:11)
(cid:21)
(cid:42)
(cid:25)
(cid:35)
(cid:36)
(cid:17)(cid:29)(cid:31)(cid:29)(cid:30)(cid:21)(cid:35)(cid:29)(cid:37)(cid:42)
(cid:17)(cid:23)(cid:33)(cid:35)(cid:25)
(cid:4)(cid:7)(cid:8)
(cid:7)(cid:38)(cid:32)(cid:23)(cid:13)
(cid:4)(cid:7)(cid:8)
(cid:5)(cid:42)(cid:32)(cid:21)(cid:31)(cid:29)(cid:23)
(cid:7)(cid:25)(cid:21)(cid:37)(cid:38)(cid:35)(cid:25)(cid:36)
(cid:15)(cid:21)(cid:37)(cid:23)(cid:28)(cid:25)(cid:24)(cid:1)(cid:33)(cid:35)(cid:1)
(cid:19)(cid:32)(cid:34)(cid:21)(cid:37)(cid:23)(cid:28)(cid:25)(cid:24)(cid:43)
(cid:4)(cid:7)(cid:8)
(cid:7)(cid:38)(cid:32)(cid:23)(cid:13)
(cid:4)(cid:7)(cid:8)
(cid:5)(cid:29)(cid:26)(cid:26)
(cid:18)(cid:21)(cid:35)(cid:27)(cid:25)(cid:37)(cid:1)(cid:3)(cid:29)(cid:32)(cid:21)(cid:35)(cid:42)
(cid:20)(cid:38)(cid:30)(cid:32)(cid:25)(cid:35)(cid:21)(cid:22)(cid:29)(cid:30)(cid:29)(cid:37)(cid:42)(cid:1)(cid:17)(cid:25)(cid:37)
(cid:4)(cid:7)(cid:8)(cid:1)
(cid:6)(cid:41)(cid:37)(cid:35)(cid:21)(cid:23)(cid:37)(cid:29)(cid:33)(cid:32)
(cid:7)(cid:25)(cid:21)(cid:37)(cid:38)(cid:35)(cid:25)(cid:1)(cid:20)(cid:25)(cid:23)(cid:37)(cid:33)(cid:35)
(cid:6)(cid:31)(cid:22)(cid:25)(cid:24)(cid:24)(cid:29)(cid:32)(cid:27)(cid:36)(cid:1)
(cid:15)(cid:25)(cid:35)(cid:1)(cid:7)(cid:38)(cid:32)(cid:23)(cid:37)(cid:29)(cid:33)(cid:32)
(cid:20)(cid:38)(cid:30)(cid:32)(cid:25)(cid:35)(cid:21)(cid:22)(cid:29)(cid:30)(cid:29)(cid:37)(cid:42)(cid:1)
(cid:4)(cid:30)(cid:21)(cid:36)(cid:36)(cid:29)(cid:26)(cid:29)(cid:23)(cid:21)(cid:37)(cid:29)(cid:33)(cid:32)(cid:1)(cid:12)(cid:33)(cid:24)(cid:25)(cid:30)
(cid:4)(cid:21)(cid:32)(cid:24)(cid:29)(cid:24)(cid:21)(cid:37)(cid:25)
(cid:7)(cid:38)(cid:32)(cid:23)(cid:37)(cid:29)(cid:33)(cid:32)(cid:36)
(cid:14)(cid:32)(cid:45)(cid:5)(cid:25)(cid:39)(cid:29)(cid:23)(cid:25)(cid:44)
(cid:6)(cid:31)(cid:38)(cid:30)(cid:21)(cid:37)(cid:33)(cid:35)
(cid:6)(cid:41)(cid:25)(cid:23)(cid:38)(cid:37)(cid:29)(cid:33)(cid:32)
(cid:50)
(cid:17)(cid:37)(cid:21)(cid:37)(cid:29)(cid:23)(cid:1)(cid:7)(cid:29)(cid:35)(cid:31)(cid:40)(cid:21)(cid:35)(cid:25)(cid:1)(cid:2)(cid:32)(cid:21)(cid:30)(cid:42)(cid:36)(cid:29)(cid:36)
(cid:51)
(cid:5)(cid:42)(cid:32)(cid:21)(cid:31)(cid:29)(cid:23)(cid:1)(cid:2)(cid:32)(cid:21)(cid:30)(cid:42)(cid:36)(cid:29)(cid:36)(cid:1)(cid:48)(cid:1)(cid:16)(cid:25)(cid:34)(cid:33)(cid:35)(cid:37)(cid:29)(cid:32)(cid:27)
Fig. 1: PATCHECKO vulnerability and patch search workﬂow.
compilations with different
levels of optimization produce
different binary programs from identical source code. This
way, we can generate one vulnerable function binary for
different hardware architectures (e.g., x86 and ARM) and
software platforms (e.g., Windows, Linux, and MacOS).
Copious amount of candidate vulnerable functions. To
illustrate the scale of the number of candidate vulnerable
functions, we analyzed the ﬁrmware of Android Things 1.0
and IOS 12.0.1. For Android Things 1.0, we found 379
different libraries that included 440,532 functions, while IOS
12.0.1 contained 198 different libraries with 93,714 functions.
Although prior work has shown that deep learning-based
methods can be used to identify a set of vulnerable candidate
functions with relatively high accuracy [41], these techniques
do not present an automated solution to prune/eliminate the
resulting false positives. Additionally,
the solution in [42]
relies on symbol tables that are not available on stripped
COTS binaries. As such, there remains a challenge to prune
vulnerable candidate functions for stripped COTS binaries.
Differentiating between patched or vulnerable code. Vul-
nerable functions may not be very distinguishable from their
patched versions as a patch may be as little as changing a
single line of code. Past work [42] can detect whether or not
vulnerable code has been patched. However, this solution relies
on access to the source code for both the vulnerable code as
well as the patched code. In practice, we often do not have
access to the source code of binary functions.
Given these motivating challenges, we now present an
overview of the PATCHECKO framework.
B. Approach
An overview of the PATCHECKO framework is presented
in Figure 1. Our solution is implemented in three steps: (1)
deep learning is used to train the vulnerability detector; (2) the
vulnerability detector is used to statically analyze the target
mobile/IoT ﬁrmware; (3) the identiﬁed vulnerable subroutines
are run for in-depth dynamic analysis and veriﬁcation of the
existence of a vulnerability. The analyses use the extracted
static and dynamic features of vulnerable and patched func-
tions to identify whether the candidate vulnerability function
has been patched.
PATCHECKO’s objective is to compare the functions within
ﬁrmware binaries to the set of known CVE vulnerabilities
as well as any associated patches. PATCHECKO outputs the
vulnerable points (functions) within the target ﬁrmware im-
age and the corresponding CVE numbers. To compare two
binary functions at runtime, PATCHECKO combines static and
dynamic programming language analysis techniques along
with deep learning methods from AI and machine learning.
PATCHECKO starts with lightweight static analysis to convert
each function within a binary to a machine learning feature
vector. PATCHECKO then leverages a previously trained deep
neural network model to determine if the two functions (one
from the ﬁrmware binary and the other one from the CVE
database) are similar, i.e., coming from the same source code
with possibly different compilation ﬂags. If the two functions
are detected to be similar, PATCHECKO performs a more in-
depth dynamic analysis to ensure the report by the static
analysis is not a false positive and indeed indicates a matching
function pair.
To perform dynamic analysis, PATCHECKO leverages run-
time DLL binary injection and remote debugging solutions
to run the CVE vulnerable function binary as well as the
target ﬁrmware function binary on identical input values (e.g.,
function arguments and/or global variables) within the corre-
sponding mobile/IoT embedded system platform. PATCHECKO
captures the execution traces of the two function binary
executions and extracts dynamic features such as number/type
of executed instructions, number/type of system calls and
library function calls, amount of stack/heap data read/writes,
etc. for each execution trace.
Using the extracted features, PATCHECKO calculates a sim-
ilarity measure between the two functions and determines