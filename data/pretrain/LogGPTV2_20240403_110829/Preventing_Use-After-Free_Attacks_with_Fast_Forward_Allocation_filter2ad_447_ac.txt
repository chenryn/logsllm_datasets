MADV_FREE flag to the madvise system call, the kernel will
only reclaim the pages during heavy memory pressure. We
provide both implementations to use madvise or munmap to
release freed pages. When madvise is used, FFmalloc will
completely unmap the pages once all allocations in a pool are
freed. In §6.4, we will evaluate the benefits and limitations
of each method by evaluating them on the SPEC CPU2006
benchmarks.
4.3 Reallocation under OTA
Function realloc allows an application to change the size of
an existing allocation. If the new size is smaller than the old
one, a memory allocator can just shrink the size and return
quickly. But if the new size is larger, the allocator must check
whether the memory after the current allocation has enough
space for the extra bytes. If so, the allocator will just increase
the size in its metadata and immediately return. In the worst
case, the allocator has to allocate a new, large-enough memory
chunk, copy the existing content into the new one, free the
old allocation, and return the new address.
FFmalloc has to take a different approach since we want to
avoid reusing any memory. As all allocations in a bin share
the same size, growing an allocation beyond the size always
requires a new allocation. For a continuous allocation, grow-
ing the allocation proceeds as the traditional method, except
that the following memory must have not been allocated. Due
to the no-reuse constraint, realloc in FFmalloc is more likely
to perform a reallocation than other allocators. If the program
has many invocations to realloc, we can expect FFmalloc to
impose noticeable overhead.
4.4 Supporting Multi-threaded Applications
To improve the allocation speed on multi-threaded applica-
tions, the binning allocator in FFmalloc borrows the thread
caching technique from tcmalloc [24] for lock-free allocation.
Thread caching creates a distinct cache for each thread of the
process. Each call to malloc is served by the corresponding
thread-specific cache. Since caches are not shared between
threads, there is no risk of contention and thus no need for
locks. As noted earlier, FFmalloc creates one pool at a time
for all binning allocators of all threads. Then, we split the pool
into same-sized pieces, and assign pieces when threads are
started or consume all previously assigned pages. In this way,
each thread has its own memory space for binning allocation.
Marking a small allocation as free is also lockless. To clear
the corresponding bit in the bitmap, FFmalloc uses an atomic
bitwise and operation to guarantee the operation safety. When
we see a particular number of free pages, FFmalloc frees
small allocations after requiring a lock. Allocations from the
continuous pool are not handled by the thread cache. Since
simultaneous allocations from multiple threads could attempt
to read and update the next allocation pointer at the same
time, a race condition is possible. Therefore, we protect these
allocations via locks. However, to reduce lock contention,
FFmalloc has a configurable option to have a continuous pool
per CPU core, turned on by default. The allocator will identify
the CPU core currently executing the thread, and allocate the
memory from the continuous pool of that core. This allows
multiple threads to execute in parallel with reduced risk of
contention at the cost of additional memory overhead.
5 Security Evaluation
We tested FFmalloc on real-world vulnerable programs to
demonstrate its ability to prevent use-after-free attacks (§5.1).
2458    30th USENIX Security Symposium
USENIX Association
Table 3: Preventing UAF attacks. We collected working exploits from six real-world UAF vulnerabilities and five CTF challenges. ✔ means
attackers can successfully launch the attack, while ✗ means FFmalloc prevents the exploit. FFmalloc successfully prevents all of them.
Program
babyheap
childheap
heapbabe
ghostparty
uaf
ID
CTF challenges
PHP 7.0.7
PHP 5.5.14
PHP 5.4.44
mruby 191ee25
libmimedir 0.5.1
python 2.7.10
CVE-2016-5773
CVE-2015-2787
CVE-2015-6835
Issue 3515
CVE-2015-3205
Issue 24613
Link Original Attack
[10] ✔ Arbitrary code execution
[10] ✔ Arbitrary code execution
✔ Arbitrary code execution
[1]
✔ Arbitrary code execution
[9]
[8]
✔ Arbitrary code execution
Bug Type
UAF −→ DF
UAF −→ DF
UAF −→ DF
UAF
UAF
[7]
UAF −→ DF
[6]
UAF
[5]
UAF
[23] ✔ Arbitrary memory write
UAF
[15] ✔ Arbitrary code execution
AF −→ UAF
UAF
[28] ✔ Restricted memory disclosure
UAF: Use-After-Free, DF: Double Free, AF: Arbitrary Free
✔ Arbitrary code execution
✔ Arbitrary code execution
✔ Arbitrary memory disclosure
With the Protection of FFmalloc
✗ Exception due to failed info-leak
✗ DF detected
✗ DF detected
✗ Exception due to failed info-leak
✗ Exploit prevented due to new realloc
✗ Exploit prevented & DF detected
✗ Assertion failure (uncontrollable)
✗ Exploit prevented & run well
✗ Exploit prevented & run well
✗ Exploit prevented & run well
✗ Exploit prevented & run well
We also performed a study to understand its design benefit
and implementation security (§5.2).
5.1 Preventing Use-After-Free Attacks
We broadly searched in public vulnerability databases, like
Exploit-DB [3] and HackerOne [4], and collected six exploits
for four real-world applications, including the PHP language
interpreter PHP, the Ruby language runtime mruby, the MIME
directory parser libmimedir and the Python language inter-
preter python. In addition, we also selected five vulnerable
challenges from popular capture-the-flag (CTF) games. We
fed each exploit to the original and the FFmalloc-protected
programs and analyzed the consequence.
Table 3 shows our protection result: FFmalloc successfully
prevents all 11 use-after-free attacks. The Type column shows
the type of bug, where → means the first bug leads to the
second one. For example, UAF→DF indicates that the orig-
inal use-after-free bug leads to a double-free vulnerability.
Originally, each exploit successfully launches a malicious ac-
tion, like arbitrary code execution, taking over the instruction
pointer, or arbitrary memory writing. With the protection of
FFmalloc, the execution either runs “normally” to the end, or
crashes in the middle. We manually inspected the final exe-
cution state running with FFmalloc to understand the reasons.
When the freed page had been unmapped, the after-free use
triggered an invalid access exception. Otherwise, the after-
free use succeeded and the execution continued. In that case,
since the retrieved value remained unmodified, the program
could run well to the end (five executions). However, since
the attackers made certain assumptions on the value type, like
a pointer, the executions also crashed due to failed pointer
dereferences (two executions), or by assertion failure (one exe-
cution). For the other three executions, FFmalloc detected the
double-free issues and proactively terminated the processes.
Case Study: PHP. CVE-2015-6835 is a use-after-free bug
in the unserialize feature of PHP [2]. With a crafted session
string, an attacker can keep a reference of a zval object even
after the memory is freed. A proof-of-concept (PoC) exploit
of this vulnerability is available online [5]. With the PoC, PHP
first frees the object, and then reallocates the freed memory
to hold the input data, which overwrites the object with the
malicious content. When the program uses the freed mem-
ory, function session_decode will return arbitrary memory
contents, like pointer values, where further attacks (e.g., code
execution) could be constructed accordingly. After we used
FFmalloc to replace the default memory allocator Zend, the
vulnerable PHP failed to retrieve any data and showed identical
behavior to the patched version.
Case Study: mruby. mruby is a lightweight runtime for the
Ruby language [32]. It has an exploitable use-after-free vul-
nerability in commit 191ee25 [23]. The original PoC exploit
from HackerOne causes execution to crash as it modifies a
pointer inside the freed object to an invalid address. We up-
dated the PoC to make it an arbitrary memory write primitive
such that the new PoC makes the proc object point to a fake
data segment controlled by attackers. From there mruby finally
jumps into the OP_MOVE opcode handler with our fake virtual
register values and writes the memory of our choice. We ran
mruby with FFmalloc and launched the attack. This time, the
runtime shut down gracefully as it could not parse the sup-
plied exploit code. We confirmed that the use-after-free bug
was triggered during the execution. However, since FFmalloc
does not reuse memory, the old content of the freed object
was used, and thus nothing critical happened.
CTF Challenges. We applied FFmalloc to five Capture-The-
Flag (CTF) challenges that have use-after-free bugs. Although
CTF problems are smaller than real-world programs, their
authors often add uncommon challenges to increase the diffi-
culty of the exploitation. We tested FFmalloc on CTF prob-
lems to cover edge cases that are missed in real-world pro-
grams. The original PoCs abused allocator-specific structures
to execute shell commands. We further developed three new
PoCs that purely utilized the program’s structure to achieve
arbitrary memory write and control-flow hijacking, which
were independent of characteristics of specific heap alloca-
USENIX Association
30th USENIX Security Symposium    2459
1 #include 
2 #include 
3 void* p[256];
4 int main() {
5
6
7
8
9
10
11 }
p[0] = malloc(842373);
p[1] = malloc(842389);
free(p[1]);
free(p[0]);
p[2] = malloc(842373);
return 0;
// allocate p[0]
// free p[0], but not nullify
// the same as p[0]
Figure 2: PoC of the bug in MarkUs. By design, MarkUs does not
release an object O if it can find any reference of O from stack or
global memory. In this PoC, although p[0] still points to the first
allocated object, MarkUs returns the same address at line 9.
tors. As shown in Table 3, FFmalloc successfully prevented
all exploits. Even with a deep understanding of each problem,
we could not find ways to bypass FFmalloc.
5.2 Secure for Deployment
FFmalloc provides robust security by the virtue of its straight-
forward design. Its security guarantee is based on a sim-
ple, easy to reason about proposition. Its implementation is
straightforward, avoiding the complicated logic of memory-
recycling code. By contrast, other defenses against use-after-
free bugs, such as pointer invalidation [27, 47] and garbage
collections [12, 29, 42], rely on the soundness and complete-
ness of their analyses for security. Unfortunately, it is very
challenging to correctly implement such sophisticated tech-
niques, and any mistakes in implementations can lead to se-
vere security flaws, some even breaking their guarantee.
To understand the security status of different secure al-
locators, we ran ArcHeap [50] on each implementation for
24 hours to find potential issues. ArcHeap can automatically
find heap exploitation techniques of an allocator, which can
be developed further into powerful primitives (e.g., arbitrary
writes). After the 24 hours of testing, ArcHeap did not discover
any security issue from FFmalloc, demonstrating FFmalloc’s
robustness on memory corruption vulnerabilities.
Other tools that rely on complex analyses are not as ro-
bust as FFmalloc in their security guarantee given certain
implementation issues. For example, we have discovered that
MarkUs [12], which uses garbage collection techniques to
prevent use-after-free vulnerabilities, fails to protect large-
size blocks. Figure 2 shows the proof-of-concept (PoC) to
trigger this bug. By design, MarkUs will not release an ob-
ject O if it can find any reference of O from the stack, global
memory, and registers. In the example code, p[0] holds the
pointer value of the first allocated object by line 5. Even if
this object is freed at line 8, the global array p still contains its
reference at the 0th element. In theory, MarkUs should hold
the memory and not allocate it to another request. However,
when we request the same-size memory at line 9, MarkUs
returns the same address as p[0], which means the memory
has been released and reused. In the case when the dangling
pointer p[0] is used after free, attackers can exploit the bug
to launch attacks.
Moreover, after additional manual analysis, we found that
MarkUs’s management for quarantined objects simplifies the
exploitation of use-after-free bugs. To manage the quaran-
tined objects, MarkUs writes an encoded pointer to the first
eight bytes to freed objects to track the next chunk in the
quarantine list. Unfortunately, the first eight bytes of a poly-
morphic object in C++ is the pointer to its virtual function
table (vftable). Thus, the freed object’s vftable will become
the encoded pointer by MarkUs. The encoded pointer has
predictable most significant bits because of its xor encoding
using a magic value (12345678910). Therefore, attackers do
not have to reclaim the freed object as in an ordinary exploita-
tion scenario. Instead, they just have to spray the memory
pointed by the encoded pointer with fake function pointers.
When the program uses freed memory, it will take the fake,
malicious function pointers for indirect calls, leading to an
arbitrary code execution attack. Figure 8 in the Appendix
shows a proof-of-concept code about the exploitation. We
have responsibly reported all these issues to their developers.
FFmalloc will not have this kind of critical failure as it does
not write any metadata to freed chunks.
6 Performance Evaluation
We evaluated FFmalloc on commonly used benchmarks
and real-world programs to understand its overhead on
single-threaded applications (§6.1), multi-threaded applica-
tions (§6.2) and large applications (§6.3). We also explored
different values for certain internal settings to find the optimal
configuration that makes FFmalloc achieve a balance between
performance and memory usage (§6.4).
Benchmarks. To measure the overhead of FFmalloc and
find the optimal settings, we selected four sets of bench-
marks: SPEC CPU2006 with 19 single-threaded C/C++ pro-
grams, PARSEC 3.0 with 15 multiple-threaded workloads the
JavaScript engine ChakraCore and the web server NGINX. We
excluded the raytrace workload from PARSEC 3.0, as the
compiled binary hangs on our system [11].
Setup. We performed our evaluations on a 64-core machine
running Ubuntu 18.04, with Intel CPU E7-4820 at 2.00GHz
and 256GB memory. We compiled all benchmarks with their
default configurations, except the x264 benchmark in PAR-
SEC 3.0. The default -O3 optimization lead to some crashes,
and we used -O2 instead to avoid the problem [22]. We set
the environment variable LD_PRELOAD to the OTA library so
that the same compiled binary was used with our hardened
memory manager and other allocators. We set FFmalloc to its
default setting, which releases at least eight consecutive free
pages to the system using the munmap system call. §6.4 evalu-
ates the different settings and discusses our choice. During the
execution, we used the utility time to get the execution time
2460    30th USENIX Security Symposium
USENIX Association
Figure 3: Overhead for SPEC CPU2006. 1x means no overhead. FFmalloc uses munmap to release memory to the system, 8 pages at a time.
For tools with *, we use the results reported in the literature. DangNull did not report overhead for perlbench, dealII, libquantum and omnetpp.
The gcc and soplex tests crash when running with FreeGuard. Placeholders for missing results are in white.
and the maximum resident set size (RSS), which describes
the maximum memory usage. If one program has multiple
inputs, we use the maximum one among all RSS values.
6.1 Single-threaded Benchmarks
We measured the overhead of FFmalloc on SPEC CPU2006
benchmarks and compared it with seven previous works:
MarkUs [12], FreeGuard [43], CRCount [42], pSweeper [29],
Oscar [18], DangSan [47] and DangNull [27]. We success-
fully reran MarkUs and FreeGuard on our machine. Although
DangSan is open-sourced, we could not get it to compile
on Ubuntu 18.04. Since other works have not released their
source code, we have elected to reuse the reported numbers
from the literature. We ran each benchmark three times and
averaged the results. Figure 3 shows the performance and
memory overhead of each tool on each SPEC C/C++ bench-
mark. A white bar means either the original paper did not
include the number, or the program crashed during the execu-
tion.
Performance Overhead. Considering the geometric mean,
FFmalloc introduces 2.3% overhead to SPEC benchmarks, the
lowest one among eight tools. On the same platform, MarkUs
imposes 14.8% overhead and the overhead of FreeGuard is
7.2%. However, FreeGuard causes two programs to crash,
specifically gcc and soplex. Since gcc usually shows very
high overhead, the overhead of FreeGuard could be higher.
pSweeper reported a similar slowdown as MarkUs, while
CRCount claimed 22.0% overhead. Both Oscar and DangSan