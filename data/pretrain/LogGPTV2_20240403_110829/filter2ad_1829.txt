# Dependable LQNS: A Performability Modeling Tool for Layered Systems

## Authors
Olivia Das and C. Murray Woodside  
Department of Systems and Computer Engineering, Carleton University, Ottawa, Canada  
Email: [PI:EMAIL], [PI:EMAIL]

## Abstract
Dependable LQNS is a software tool designed to model and evaluate the performability of fault-tolerant, layered distributed applications that employ a separate architecture for failure detection and reconfiguration. This tool incorporates the effects of both management and application software architectures, as well as the potential failures of their components, into its dependability calculations. The analysis process integrates minpath algorithms, AND-OR graphs, non-coherent fault trees, and Layered Queueing modeling.

## 1. Introduction
Dependable LQNS is specifically tailored for applications with a layered software architecture and a general fault management system, as discussed in [1]. The tool's analysis strategy involves the following steps:

1. **Identify Operational Configurations:** Determine the various operational configurations of the application.
2. **Compute Configuration Probabilities:** Use a non-coherent fault tree to calculate the probability of each operational configuration.
3. **Determine Reward Rates:** Utilize a Layered Queueing model to ascertain the reward rate for each operational configuration.
4. **Combine Probabilities and Rewards:** Integrate the probabilities and reward rates to derive the average performance measures.

### Architecture Evaluation Language
The tool supports an architecture evaluation language that enables users to:
- **Describe Components:** Define application and management components (e.g., processors, application software tasks, manager tasks, agents representing shared failure factors like power supplies, and pseudo-components specifying additional failure modes, such as those due to mechanical vibrations).
- **Specify Interactions:** Outline the interactions between components within the management architecture (e.g., monitoring, notification).
- **Define Functional Dependencies:** Establish functional dependencies among application components across layers, including fault-tolerant mechanisms.
- **Set Parameters:** Input performance and dependability parameters (e.g., execution demand of a task on its host, number of service requests between tasks across layers, failure and repair rates for components).

### Tool Workflow
The input to the tool is a plain-text file containing the above descriptions. The output includes the average performance measures of the pure client tasks. The flowchart of the tool is shown in Figure 1. The tool leverages Aralia [2] for non-coherent fault-tree computations and LQNS [3] for performance analysis. It is implemented in C++ for Windows.

## 2. References
[1] O. Das and C. M. Woodside, "Modeling the Coverage and Effectiveness of Fault-Management Architectures in Layered Distributed Systems," IEEE DSN 2002, Bethesda, Maryland, June 2002, pp. 745-754.

[2] Y. Dutuit and A. Rauzy, "Exact and Truncated Computations of Prime Implicants of Coherent and Non-Coherent Fault Trees within Aralia," Reliability Engineering and System Safety, 58, 1997, pp. 127-144.

[3] G. Franks, S. Majumdar, J. Neilson, D. Petriu, J. Rolia, and M. Woodside, "Performance Analysis of Distributed Server Systems," in the Sixth International Conference on Software Quality (6ICSQ), Ottawa, Ontario, 1996, pp. 15-26.

## Figure 1: Flow Chart of Dependable LQNS Tool
```
Model Description File
|
v
Model Description Compiler
|
v
Non-coherent Fault Trees (Aralia [2])
|
v
Configuration Probabilities
|
v
Layered Queueing Models (LQNS [3])
|
v
Configuration Rewards
|
v
Performability Calculator
|
v
Average Throughput of Pure Client Tasks
```

---

**Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSNâ€™03)**
**0-7695-1959-8/03 $17.00 (c) 2003 IEEE**
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 07:05:10 UTC from IEEE Xplore. Restrictions apply.**