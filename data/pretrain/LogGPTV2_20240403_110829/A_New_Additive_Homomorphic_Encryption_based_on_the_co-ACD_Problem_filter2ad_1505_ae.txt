λ
128
120
128
Table 1: Parameter Sizes, Implementation Results, and Comparison
η
log Q log A
PK Size
Setup
Enc
m
µ
γ
ρ
Dec
Add
1536
−
1536
−
−
−
−
−
−
−
−
−
3072
10
256
∞ 6144
20
61440
∞ 3072
1.5 kB
7.6 kB
0.8 kB
437.39 s
0.11 s
250.32 s
62.46 ms
164.00 ms
2.07 ms
40.38 ms
4.00 ms
903.36 ms
12.40 µs
≤ 1.00 ms
2.40 µs
128
142
256
Ours
0.40 µs
0.80 µs
0.80 µs
† We referred to the implementation results in [NLV11] and they were done on a 2.1 GHz Intel Core 2 Duo, with 3 MB L3 cache and
1 GB of memory.
1.3 MB
2.6 MB
3.9 MB
0.72 ms
1.07 ms
1.29 ms
4.00 µs
8.00 µs
8.80 µs
0.35 s
1.18 s
2.34 s
1536
2194
2706
1792
2450
2962
3328
4645
5669
1134
1536
2048
3072
4388
5412
6. THRESHOLD SCHEME
of the discrete logarithm of
In this subsection, we present a (t, t)-threshold version of
the proposed public key additive homomorphic encryption.
We follow Fouque et al.’s syntax and security deﬁnition of
the threshold scheme [21]. We use a homomorphic commit-
ment scheme Com(m), where m ∈ ZN .
Key Generation Algorithm. The dealer runs SetupAlg1
and obtains pk = {N = p1p2, Q,~b1,~b2, ~x1, . . ., ~xm}
and sk = {¯p1, ¯p2}. Each ¯pi is randomly divided into
random t pieces ¯pi1, . . . , ¯pit. The veriﬁcation keys vk
is the description of the commitment scheme Com(·)
secret key share ski is the openings of the committed
values of vki.
and for i = 1, . . . , t, vki =(cid:0)Com(¯p1i), Com(¯p2i)(cid:1). The
Encryption Algorithm. It is the same as Enc(·, ·) algo-
rithm of the non-threshold version.
Share Decryption Algorithm. Parse a ciphertext ~c as
(c1, c2). Each server Si chooses ei ← (−2max+λ, 2max+λ)
at random, where (−2max, 2max) is the bound of errors
in the ciphertext, possibly homomorphically evaluated
ciphertext. She computes her decryption share
di = c1 · ¯p1i + c2 · ¯p2i + ei · Q mod N,
(5)
where di = c1 · ¯p1i + c2 · ¯p2i + ei · Q − kiN for some
ki ∈ Z. To prove the validity of the share, she commits
ei and ki and then sends them along with a proof πi
that the openings ¯p1i, ¯p2i, ei and ki of the committed
values satisfy the equation (5) and ei is contained in
(−2max+λ, 2max+λ).
biner computes (Pt
Combining Algorithm. If one of πi’s is an invalid proof,
then the combiner outputs ‘f ail’. Otherwise, the com-
i=1 di mod N ) mod Q and outputs
the result.
For the commitment scheme Com, we can use the Fujisaki
and Okamoto commitment scheme [24]: Let n be a large
composite number whose factorization is unknown and g
and h be elements of large order in Z∗
n such that both the
discrete logarithm of h in base g and the discrete logarithm
of g in base h are unknown. In fact, the commitment to an
integer x is Com(x; r) = gxhr mod n, where r is chosen from
[−2λn + 1, 2λn− 1]∩ Z at random. Then, it is easy to check
that Com has the additive homomorphic property; that is,
Com(x1; r1)·Com(x2; r2) = Com(x1 +x2; r1 +r2) mod n. We
often omit the randomness part from the input of Com if it
is not important.
Using the Fujisaki and Okamoto commitment scheme as
Com, the proof for the validity of each decryption share can
be constructed by well-known technique for the knowledge of
the discrete logarithm and the range proof. More precisely,
for the former proof, it is suﬃcient to prove the knowledge
Com(¯p1i)c1 · Com(¯p2i)c2 · Com(ei)Q · Com(ki)N · g−di
= Com(c1 · ¯p1i + c2 · ¯p2i + ei · Q − kiN − di)
in base h, for example [6, 7], and for the latter proof, we can
use the range proof that ei ∈ (−2max, 2max), for example [4].
Note that the proofs we use in the threshold scheme satisfy
the perfect completeness, the computational soundness un-
der the strong RSA assumption [1, 24], and the statistical
zero-knowledge property in the random oracle model [4]. We
provide the security theorem below, and followed by sketch
of proof due to space constraint.
i=1 eiQ−Pt−1
Theorem 6. If the original scheme is semantically se-
cure, its threshold version is also secure scheme under the
strong RSA assumption in the random oracle model.
Sketch of Proof. We construct an attack algorithm B against
the original scheme using an attacker A against the thresh-
old scheme. Without loss of generality, we assume that A
controls servers S1, . . . ,St−1.
We ﬁrst describe B’s process. B starts with receiving pub-
lic parameters pk of the original scheme. B chooses random
integers ¯p1i and ¯p2i for i = 1, . . . , t − 1, from ZN , gener-
ates parameters for Com, and commits to ¯p1i’s and ¯p2i’s. B
sends pk, the parameters for Com, Com(¯p1i)’s, Com(¯p2i)’s,
and their openings for i = 1, . . . , t − 1 to A. Whenever
A queries decryption shares of the chosen message M , B
chooses ei ← (−2max+λ, 2max+λ) for i = 1, . . . , t and for
i = 1, . . . , t − 1 computes the decryption shares di and the
corresponding validity proofs πi using the secret ski nor-
mally. B computes dt = M +Pt
i=1 di mod N and
simulates πt using the zero-knowledge simulation property
by simulating the random oracles. Then, B returns t shares
di’s along with the validity proofs πi’s as the query result. In
the challenge phase, B relays between A and the challenger;
that is, B transfers A’s two messages and the challenge ci-
phertext given by the challenger. Finally, B receives A’s
output bit, and then B outputs the same bit as A’s.
Since the public key and the encryption algorithm in both
the original scheme and the threshold scheme are the same,
it is suﬃcient to show that the distribution of the ski, vki
and the result of queries for decryption shares is indistin-
guishable from the real transcript. Since we randomly di-
vide sk into t pieces ski modulus N , t − 1 pieces of se-
cret key shares looks perfectly random so that ski and vki
for i = 1, . . . , t − 1 are well distributed. Next, we argue
that the decryption shares di’s and the validity proofs πi’s
are statistically indistinguishable from the real transcript.
Let us consider the distribution of the case that the de-
cryption shares are normally generated with the real secret
key shares; we ﬁrst compute an encryption (c1, c2) of M
and then compute decryption share di = c1 ¯p1i + c2 ¯p2i +
eiQ mod N such that Pt
i=1 eiQ mod
N , where e ∈ (−2max, 2max) is determined by (c1, c2) and
i=1 di = M + eQ +Pt
295i=1 ei +e′
ei ∈ (−2max+λ, 2max+λ). Then, the joint distribution of
(d1, . . . , dt−1,Pt
i=1 di mod N ) is statistically indistinguish-
able from (d1, . . . , dt−1, M +(Pt−1
t)Q mod N ), where
e′
t is chosen from (−2max+λ, 2max+λ) at random, since ei is
chosen from suﬃciently larger range than e so that e + et
is statistically indistinguishable from e′
t; the statistical dis-
tance is less than 1
2λ . The remaining of the proof is straight-
forward. In B’s description, for i = 1, . . . , t−1, di and πi are
i=1 di
mod N ) is well distributed, πt is simulated using the power
of the random oracle. Therefore, we complete the sketch of
proof.
normally generated, dt is chosen so that (d1, . . . , dt−1,Pt
7. APPLICATIONS
In this section, we consider some basic applications of ad-
ditive homomorphic encryption. Then, we provide an alter-
native method of evaluating a multivariate symmetric poly-
nomial with only an additive homomorphic property. We
also brieﬂy look into another main application of (threshold
version of) additive homomorphic encryption, secure multi-
party computation, focusing on private set operation proto-
cols.
7.1 Basic Applications
Mean and Weighted Sum A weighted sum is deﬁned as
the inner product of a weight vector (α1,··· , αn) ∈ Qn and
an input vector (x1,··· , xn) ∈ Zn and a weighted mean is
obtained by dividing a weighted sum by the sum of weights
Pn
i=1 αi. These values are commonly used in statistics.
For given Enc(mi)’s, we ﬁrst compute the smallest inte-
ger α that makes ααi ∈ Z for all i. Then, we compute
i=1 ααiEnc(xi) =Pn
Pn
i=1 Enc(ααixi) and obtains a weight-
ed sum by decrypting this and dividing by α. A weighted
mean is obtained by dividing a weighted sum by Pn
i=1 αi.
Therefore, we can calculate a weighted sum and a weighted
mean using an additive homomorphic property ifPn
i=1 ααixi
< Q
2 for the size Q of the message space. Note that the mean
is the special case of the weighted mean for α1 = ··· = αn =
1
n . Our unoptimized implementation takes about 40 µs to
compute the mean of 1000 128-bit integers.
Polynomial Evaluation of Hidden Coeﬃcients We can
also consider applications to evaluate a multivariate polyno-
mial whose coeﬃcients are secret, such as in ranking sys-
tems. When coeﬃcients are encrypted, we can evaluate the
corresponding polynomial using scalar multiplication and
addition.
A polynomial evaluation of hidden coeﬃcients can be re-
garded as a matrix multiplication. In general, we can also
compute a matrix multiplication when one matrix is en-
crypted and the other is unencrypted. From our imple-
mentation, it takes about 1.04 ms to evaluate a degree-1000
polynomial when the bit size of the message space is 256.
7.2 Symmetric Polynomial Evaluation
We focus on the fundamental theorem of symmetric poly-
nomials, which states that every symmetric polynomial in n
variables with rational coeﬃcients can be generated by the
i=1 xj
i
for j = 1, . . . , n. In the following proposition, we show that
a low-degree symmetric polynomial of many variables can
also be represented only a small number of power-sum sym-
metric polynomials. Due to space limitations, we omit the
power-sum symmetric polynomials Pj (x1, . . . , xn) =Pn
proof of this proposition, but it is fairly straightforward us-
ing mathematical induction.
Proposition 1. Let f ∈ Q[x1, ··· , xn] be a symmetric
polynomial of degree d for a given d < n. Then, f =
d ∈ Q[x1, ··· , xn] for ~i = (i1,· ·· , id) ∈ Zd
1 ·· · P id
≥0
P a~iP i1
such that 0 ≤ i1 + ··· + id ≤ d.
To support the evaluation of symmetric polynomials using
the above proposition, we deﬁne a new encryption algorithm
as follows:
Ed(pk, M ) := (Enc(pk, M ), Enc(pk, M 2), . . . , Enc(pk, M d)),
where Enc is an additive homomorphic encryption. Then,
we can easily evaluate the power-sum symmetric polynomi-
als Enc(pk, Pj(x1,· ·· , xn)) for 1 ≤ j ≤ d with only an ad-
ditive homomorphic property, and evaluate symmetric poly-
nomials of degree d by decrypting Enc(pk, Pj (x1,··· , xn))’s
and multiplying and adding on the decrypted data.
In particular, this method is more eﬃcient when evalu-
ating low-degree symmetric polynomials in many variables.
For example, one can calculate the variance eﬃciently. Since