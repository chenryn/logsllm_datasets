int XNAME(2) = 20;  // 变成 int x2 = 20;
int x3 = 30;
1212
PRINT_XN(1);      // 变成 printf("x1 = %d\n", x1);
PRINT_XN(2);      // 变成 printf("x2 = %d\n", x2);
PRINT_XN(3);      // 变成 printf("x3 = %d\n", x3);
return 0;
}
该程序的输出如下：
x1 = 14
x2 = 20
x3 = 30
注意，PRINT_XN()宏用#运算符组合字符串，##运算符把记号组合为一
个新的标识符。
16.3.3 变参宏：...和_ _VA_ARGS_ _
一些函数（如 printf()）接受数量可变的参数。stdvar.h 头文件（本章后
面介绍）提供了工具，让用户自定义带可变参数的函数。C99/C11也对宏提
供了这样的工具。虽然标准中未使用“可变”（variadic）这个词，但是它已
成为描述这种工具的通用词（虽然，C标准的索引添加了字符串化
(stringizing)词条，但是，标准并未把固定参数的函数或宏称为固定函数和不
变宏）。
通过把宏参数列表中最后的参数写成省略号（即，3个点...）来实现这
一功能。这样，预定义宏
_ _VA_ARGS_ _可用在替换部分中，表明省略号代表什么。例如，下面
的定义：
1213
#define PR(...) printf(_ _VA_ARGS_ _)
假设稍后调用该宏：
PR("Howdy");
PR("weight = %d, shipping = $%.2f\n", wt, sp);
对于第1次调用，_ _VA_ARGS_ _展开为1个参数："Howdy"。
对于第2次调用，_ 
_VA_ARGS_ 
_展开为3个参数："weight 
= 
%d,
shipping = $%.2f\n"、wt、sp。
因此，展开后的代码是：
printf("Howdy");
printf("weight = %d, shipping = $%.2f\n", wt, sp);
程序清单16.5演示了一个示例，该程序使用了字符串的串联功能和#运
算符。
程序清单16.5 variadic.c程序
// variadic.c -- 变参宏
#include 
#include 
#define PR(X, ...) printf("Message " #X ": " __VA_ARGS__)
int main(void)
{
double x = 48;
1214
double y;
y = sqrt(x);
PR(1, "x = %g\n", x);
PR(2, "x = %.2f, y = %.4f\n", x, y);
return 0;
}
第1个宏调用，X的值是1，所以#X变成"1"。展开后成为：
print("Message " "1" ": " "x = %g\n", x);
然后，串联4个字符，把调用简化为：
print("Message 1: x = %g\n", x);
下面是该程序的输出：
Message 1: x = 48
Message 2: x = 48.00, y = 6.9282
记住，省略号只能代替最后的宏参数：
#define WRONG(X, ..., Y) #X #_ _VA_ARGS_ _ #y //不能这样做
1215
16.4 宏和函数的选择
有些编程任务既可以用带参数的宏完成，也可以用函数完成。应该使用
宏还是函数？这没有硬性规定，但是可以参考下面的情况。
使用宏比使用普通函数复杂一些，稍有不慎会产生奇怪的副作用。一些
编译器规定宏只能定义成一行。不过，即使编译器没有这个限制，也应该这
样做。
宏和函数的选择实际上是时间和空间的权衡。宏生成内联代码，即在程
序中生成语句。如果调用20次宏，即在程序中插入20行代码。如果调用函数
20次，程序中只有一份函数语句的副本，所以节省了空间。然而另一方面，
程序的控制必须跳转至函数内，随后再返回主调程序，这显然比内联代码花
费更多的时间。
宏的一个优点是，不用担心变量类型（这是因为宏处理的是字符串，而
不是实际的值）。因此，只要能用int或float类型都可以使用SQUARE(x)宏。
C99提供了第3种可替换的方法——内联函数。本章后面将介绍。
对于简单的函数，程序员通常使用宏，如下所示：
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
#define ABS(X) ((X)      ←文件名在尖括号中
#include "mystuff.h"   ←文件名在双引号中
在 UNIX 系统中，尖括号告诉预处理器在标准系统目录中查找该文件。
双引号告诉预处理器首先在当前目录中（或文件名中指定的其他目录）查找
该文件，如果未找到再查找标准系统目录：
#include      ←查找系统目录
#include "hot.h"      ←查找当前工作目录
#include "/usr/biff/p.h" ←查找/usr/biff目录
集成开发环境（IDE）也有标准路径或系统头文件的路径。许多集成开
发环境提供菜单选项，指定用尖括号时的查找路径。在 UNIX 中，使用双引
号意味着先查找本地目录，但是具体查找哪个目录取决于编译器的设定。有
些编译器会搜索源代码文件所在的目录，有些编译器则搜索当前的工作目
录，还有些搜索项目文件所在的目录。
ANSI 
C不为文件提供统一的目录模型，因为不同的计算机所用的系统
不同。一般而言，命名文件的方法因系统而异，但是尖括号和双引号的规则
与系统无关。
为什么要包含文件？因为编译器需要这些文件中的信息。例如，stdio.h
文件中通常包含EOF、NULL、getchar()和 
putchar()的定义。getchar()和
putchar()被定义为宏函数。此外，该文件中还包含C的其他I/O函数。
1218
C语言习惯用.h后缀表示头文件，这些文件包含需要放在程序顶部的信
息。头文件经常包含一些预处理器指令。有些头文件（如stdio.h）由系统提
供，当然你也可以创建自己的头文件。
包含一个大型头文件不一定显著增加程序的大小。在大部分情况下，头
文件的内容是编译器生成最终代码时所需的信息，而不是添加到最终代码中
的材料。
16.5.1 头文件示例
假设你开发了一个存放人名的结构，还编写了一些使用该结构的函数。
可以把不同的声明放在头文件中。程序清单16.6演示了一个这样的例子。
程序清单16.6 names_st.h头文件
// names_st.h -- names_st 结构的头文件
// 常量
#include 
#define SLEN 32
// 结构声明
struct names_st
{
char first[SLEN];
char last[SLEN];
};
// 类型定义
1219
typedef struct names_st names;
// 函数原型
void get_names(names *);
void show_names(const names *);
char * s_gets(char * st, int n);
该头文件包含了一些头文件中常见的内容：#define指令、结构声明、
typedef和函数原型。注意，这些内容是编译器在创建可执行代码时所需的信
息，而不是可执行代码。为简单起见，这个特殊的头文件过于简单。通常，
应该用#ifndef和#define防止多重包含头文件。我们稍后介绍这些内容。
可执行代码通常在源代码文件中，而不是在头文件中。例如，程序清单
16.7中有头文件中函数原型的定义。该程序包含了names_st.h头文件，所以
编译器知道names类型。
程序清单16.7 name_st.c源文件
// names_st.c -- 定义 names_st.h中的函数
#include 
#include "names_st.h"  // 包含头文件
// 函数定义
void get_names(names * pn)
{
printf("Please enter your first name: ");
s_gets(pn->first, SLEN);
1220
printf("Please enter your last name: ");
s_gets(pn->last, SLEN);
}
void show_names(const names * pn)
{
printf("%s %s", pn->first, pn->last);
}
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
1221
continue;   // 处理输入行中的剩余字符
}
return ret_val;
}
get_names()函数通过s_gets()函数调用了fgets()函数，避免了目标数组溢
出。程序清单16.8使用了程序清单16.6的头文件和程序清单16.7的源文件。
程序清单16.8 useheader.c程序
// useheader.c -- 使用 names_st 结构
#include 
#include "names_st.h"
// 记住要链接 names_st.c
int main(void)
{
names candidate;
get_names(&candidate);
printf("Let's welcome ");
show_names(&candidate);
printf(" to this program!\n");
return 0;
1222
}
下面是该程序的输出：
Please enter your first name: Ian
Please enter your last name: Smersh
Let's welcome Ian Smersh to this program!
该程序要注意下面几点。
两个源代码文件都使用names_st类型结构，所以它们都必须包含
names_st.h头文件。
必须编译和链接names_st.c和useheader.c源代码文件。
声明和指令放在nems_st.h头文件中，函数定义放在names_st.c源代码文
件中。
16.5.2 使用头文件
浏览任何一个标准头文件都可以了解头文件的基本信息。头文件中最常
用的形式如下。
明示常量——例如，stdio.h中定义的EOF、NULL和BUFSIZE（标准I/O
缓冲区大小）。
宏函数——例如，getc(stdin)通常用getchar()定义，而getc()经常用于定
义较复杂的宏，头文件ctype.h通常包含ctype系列函数的宏定义。
函数声明——例如，string.h头文件（一些旧的系统中是strings.h）包含
字符串函数系列的函数声明。在ANSI 
C和后面的标准中，函数声明都是函
数原型形式。
结构模版定义——标准I/O函数使用FILE结构，该结构中包含了文件和
1223
与文件缓冲区相关的信息。FILE结构在头文件stdio.h中。
类型定义——标准 I/O 函数使用指向 FILE 的指针作为参数。通常，
stdio.h 用#define 或typedef把FILE定义为指向结构的指针。类似地，size_t和
time_t类型也定义在头文件中。
许多程序员都在程序中使用自己开发的标准头文件。如果开发一系列相
关的函数或结构，那么这种方法特别有价值。
另外，还可以使用头文件声明外部变量供其他文件共享。例如，如果已
经开发了共享某个变量的一系列函数，该变量报告某种状况（如，错误情
况），这种方法就很有效。这种情况下，可以在包含这些函数声明的源代码
文件定义一个文件作用域的外部链接变量：
int status = 0;    // 该变量具有文件作用域，在源代码文件
然后，可以在与源代码文件相关联的头文件中进行引用式声明：
extern int status;   // 在头文件中
这行代码会出现在包含了该头文件的文件中，这样使用该系列函数的文
件都能使用这个变量。虽然源代码文件中包含该头文件后也包含了该声明，
但是只要声明的类型一致，在一个文件中同时使用定义式声明和引用式声明
没问题。