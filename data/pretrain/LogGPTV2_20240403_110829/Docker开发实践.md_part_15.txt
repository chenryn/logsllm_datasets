console.log('get: ' + req.originalUrl);
db.collection('msg_list').find().toArray(function(err, docs){ 8
if (err){
res.send('-1');
} else { 10
var str = docs.length + '';
for (var i = 0; i '; 10
}
res.send(str);
} 11
})
});
13
app.post('/node-web-api/msg/add', function(req, res){
console.log('post: '+ req.originalUrl );
if (!req.body || !req.body.item) { 14
res.send('2');
return ;
} 15
db.collection('msg_list').save({time: new Date().getTime(), data: req.body.item}, function(err,
result){
if (err) { 16
res.send('1');
} else {
res.send('0');
17
}
});
}); 18
db.open(function(err, db) {
88 第7章 综合案例2：DLNNM
if (!err) {
console.log('mongodb-server connected!');
app.listen(PORT);
console.log('node-web-server started! port: ' + PORT);
}
});
下面简要说明该源文件。应用首先连接到mongo主机在端口27017开启的MongoDB服务，连接
成功后将在8080端口监听web-api的调用。27017是MongoDB默认的监听端口，我们使用常量字符
串mongo作为MongoDB服务的主机名，这依赖于7.3.3节中讲到的--link参数设置。实际上，mongo
是指我们的代理容器。如果不使用--link参数，则可以直接使用域名或者IP，即源代码文件中通
过#号注释掉的两行。
本案例只实现了两个web-api接口，一个是向数据库中添加一条用户上传的内容：
POST http://host/node-web-api/msg/add
另一个是从MongoDB数据库中查询所有用户上传的内容：
GET http://host/node-web-api/msg/find
7.2.2 编写镜像Dockerfile
Dockerfile所依赖的项目文件准备就绪之后，接下来开始编写Dockerfile文件。以下是
Dockerfile文件的全部内容：
# 名称：容器化的node-web-api应用
# 用途：实现CRUD MongoDB的Web API
# 创建时间：2015.01.19
#指定基础镜像
FROM ubuntu:latest
#安装curl
RUN apt-get update
RUN apt-get install -y curl
#更新Node安装源
RUN curl -sL https://deb.nodesource.com/setup | sudo bash -
RUN apt-get update
#安装Node.js和NPM
RUN apt-get install -y nodejs
RUN apt-get install -y npm
#复制项目源文件到镜像
COPY ./src /src
#进入项目源文件目录，使用NPM安装项目依赖库
RUN cd /src; npm install;
#暴露项目所监听的端口
EXPOSE 8080
#定义项目执行入口
CMD ["nodejs", "/src/index.js"]
7.3 连接Node.js服务和MongoDB服务 89
7.2.3 构建和上传镜像
1
接下来，使用build命令设置镜像，并将其命名为xixihe/node-web-api:v1：
2
# docker build --tag xixihe/node-web-api:v1 .
...(略)
3
因为Dockerfile文件里牵涉到几个比较耗时的网络操作，读者需要耐心等待构建过程。
创建完毕后，通过docker images命令验证镜像： 4
# docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE 5
xixihe/node-web-api v1 17beb304695d 25 hours ago 379.5 MB
...(略)
6
和前面一样，我们将镜像提交到Docker Hub上：
# docker push xixihe/node-web-api:v1 7
...(略)
9
7.3 连接 Node.js 服务和 MongoDB 服务
8
我们已经在4.3.3节中介绍过跨主机使用代理容器来连接容器。本节中，我们将这种模式应用
到Node.js与MongoDB连接的案例中。
10
7.3.1 制作代理镜像mongo-abassador
10
我们的代理镜像基于busybox，不过不能直接使用busybox做基础镜像。因为还需要用到socat
等busybox没有的工具，所以首先要使用制作代理镜像的基础镜像docker-ut。制作docker-ut的脚 11
本文件mkimage-unittest.sh改自https://github.com/docker/docker/bl ob/master/contrib/mkimage-unitte
st.sh。修改后的源码如下： 13
#!/usr/bin/env bash
# Generate a very minimal filesystem based on busybox-static, 14
# and load it into the local docker under the name "docker-ut".
missing_pkg() {
echo "Sorry, I could not locate $1" 15
echo "Try 'apt-get install ${2:-$1}'?"
exit 1
} 16
BUSYBOX=$(which busybox)
[ "$BUSYBOX" ] || missing_pkg busybox busybox-static
SOCAT=$(which socat) 17
[ "$SOCAT" ] || missing_pkg socat
shopt -s extglob
set -ex 18
ROOTFS=`mktemp -d ${TMPDIR:-/var/tmp}/rootfs-busybox.XXXXXXXXXX`
90 第7章 综合案例2：DLNNM
trap "rm -rf $ROOTFS" INT QUIT TERM
cd $ROOTFS
mkdir bin etc dev dev/pts lib proc sys tmp
touch etc/resolv.conf
cp /etc/nsswitch.conf etc/nsswitch.conf
echo root:x:0:0:root:/:/bin/sh > etc/passwd
echo daemon:x:1:1:daemon:/usr/sbin:/bin/sh >> etc/passwd
echo root:x:0: > etc/group
echo daemon:x:1: >> etc/group
ln -s lib lib64
ln -s bin sbin
cp $BUSYBOX $SOCAT bin
for X in $(busybox --list)
do
ln -s busybox bin/$X
done
rm bin/init
ln bin/busybox bin/init
cp -P /lib/x86_64-linux-gnu/lib{pthread*,c*(-*),dl*(-*),nsl*(-*),nss_*,util*(-*),wrap,z}.so* lib
cp /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 lib
cp -P /lib/x86_64-linux-gnu/lib{crypto,ssl}.so* lib
cp -P /usr/lib/x86_64-linux-gnu/lib{crypto,ssl}.so* lib
for X in console null ptmx random stdin stdout stderr tty urandom zero
do
cp -a /dev/$X dev
done
chmod 0755 $ROOTFS # See #486
tar --numeric-owner -cf- . | docker import - docker-ut
docker run -i -u root docker-ut /bin/echo Success.
rm -rf $ROOTFS
接下来，使用chmod赋予mkimage-unittest.sh文件可执行权限，然后以root权限运行该脚本，此
时docker-ut就生成好了。操作如下：
$ chmod +x mkimage-unittest.sh
$ sudo ./mkimage-unittest.sh
...(略)
$ sudo docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
xixihe/ docker-ut v1 c3018ec164d8 34 minutes ago 7.23 MB
...(略)
如果运行mkimage-unittest.sh的过程中，提示类似下面的信息：
“Sorry, I could not locate socat，
Try 'apt-get install socat'?”
我们就要按照提示在主机上安装socat或其他缺失的组件，然后再重新运行mkimage-unittest.sh。
此外，运行mkimage-unittest.sh时可能还会出现如下错误：
...(略)
/lib/x86_64-linux-gnu/libwrap.so.0.7.6 /lib/x86_64-linux-gnu/libz.so.1
/lib/x86_64-linux-gnu/libz.so.1.2.8 lib
7.3 连接Node.js服务和MongoDB服务 91
+ cp /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 lib
1
+ cp -P '/usr/lib/x86_64-linux-gnu/libcrypto.so*' '/usr/lib/x86_64-linux-gnu/libssl.so*' lib
cp: cannot stat ‘/usr/lib/x86_64-linux-gnu/libcrypto.so*’: No such file or directory
cp: cannot stat ‘/usr/lib/x86_64-linux-gnu/libssl.so*’: No such file or directory
2
...(略)
对于上面的错误，我们需要安装libssl1.0.0和libssl-dev来解决：
3
$ sudo apt-get install libssl1.0.0
$ sudo apt-get install libssl-dev
4
通过docker images命令确保docker-ut创建成功后，接下来编写构建代理镜像的Dockerfile，
全部内容如下： 5
FROM docker-ut
MAINTAINER PI:EMAIL 6
CMD env | grep _TCP= | sed 's/.*_PORT_\([0-9]*\)_TCP=tcp:\/\/\(.*\):\(.*\)/socat
TCP4-LISTEN:\1,fork,reuseaddr TCP4:\2:\3 \&/' | sh && top
7
如同前两节，我们使用build命令构建镜像，构建成功后使用push命令将其上传至Docker Hub：
# docker build --tag xixihe/mongo-abassador:v1 . 9
...(略)
# docker push xixihe/mongo-abassador:v1
...(略) 8
7.3.2 启动MongoDB服务
10
本案例的MongoDB数据库服务由两个容器组成，一个是主容器MongoDB，另一个是对外提
10
供服务的代理容器。MongoDB服务将部署在主机1（192.168.56.101）上。接下来，我们按步骤启
动Mongo服务容器及对外服务的代理容器。
11
(1) 参照第1章，在主机1上安装Docker服务。如果已经安装，则略过此步骤。
(2) 从Docker Hub拉取7.1节中所创建的mongo-db:v1镜像及代理镜像mongo-abassador:v1。如 13
果镜像是在本机创建的，则可以略过这一步。
14
# docker pull xixihe/mongo-db:v1
...(略)
# docker pull xixihe/mongo-abassador:v1
15
...(略)
(3) 以守护进程模式启动Mongo服务，取名为mongo_imp：
16
# docker run -d --name mongo_imp xixihe/mongo-db:v1
(4) 运行代理容器，使用--link参数连接mongo，并指定对外服务的映射端口27017： 17
# docker run -d -p 27017:27017 --name mongo_outer --link mongo_imp:mongo
xixihe/mongo-abassador:v1 18
92 第7章 综合案例2：DLNNM
我们选择一台安装了mongo-client且能连接上主机1的机器来测试MongoDB服务是否工作正
常，如果显示如下，就表明工作正常：
# mongo 192.168.56.101
MongoDB shell version: 2.6.5
connecting to: 192.168.56.101/test
> show dbs
admin (empty)
local 0.078GB
>
现在，我们的主机1就已经具备了对外提供MongoDB数据库服务的功能了。需要注意的是，
本案例的MongoDB并没有加入账号管理功能。为了保证数据库的安全性，读者可以参照MongoDB
文档加入账号访问控制功能。
7.3.3 启动Node-Web-API服务
Node-Web-API服务将部署在主机2（192.168.56.102）上面，该服务也由两个容器组成，其中
一个是访问MongoDB服务的代理容器，另外一个是连接代理容器且提供web-api调用的Node.js容
器。接下来，逐步演示启动服务的过程。
(1) 参照第1章，在主机2上安装Docker服务。如果已经安装，则略过此步骤。
(2) 从Docker Hub上拉取7.2节创建的node-web-api:v1镜像和7.3.1节创建的镜像，如果镜像已
经存在本机，则略过此步骤：
# docker pull xixihe/node-mongo:v1
# docker pull xixihe/mongo-abassador:v1
(3) 启动连接数据库服务的代理容器，命名为mongo_ambassador：
#docker run -d --name mongo_ambassador --expose 27017 -e
MONGO_PORT_27017_TCP=tcp://192.168.56.101:27017 xixihe/mongo-abassador:v1
#
-e参数指定的环境变量MONGO_PORT_27017_TCP=tcp://192.168.56.101:27017中的IP地址是在
主机1的IP地址，端口是主机1上mongo_outer容器对外监听的端口。按照上面的方法创建的代理
容器会在内部根据这个环境变量建立与主机1上的mongo_outer代理关系，本主机的其他应用通过
mongo_ambassador容器就可以访问到主机1上mongo_imp容器所提供的数据服务。
(4) 启动Node-Web-API容器，命名为node_web_api：
# docker run -d --name node_web_api -p 8080:8080 --link mongo_ambassador:mongo
xixihe/node-web-api:v1
node-web-api应用会在8080端口监听Web API调用，我们使用-p 8080:8080直接将这个端口映
射到主机上。同时，我们使用--link参数将mongo_ambassador以别名mongo映射到容器内，这意
7.4 搭建前端Nginx 93
味着在node_web_api容器内能直接以主机名mongo来访问mongo_amb assador。
1
我们的node-web-api服务已经准备就绪了。现在使用curl来测试一下web-api命令：
2