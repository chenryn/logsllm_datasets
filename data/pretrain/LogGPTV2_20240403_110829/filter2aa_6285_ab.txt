| -   | -                                |
|-----|----------------------------------|
| `h` | Run Info tutorial                |
| `i` | Look up a subject in the indices |
| `s` | Search nodes for regexp          |
| `q` | Quit Info                        |
{.shortcuts}
### Minibuffer
The following keys are defined in the minibuffer.
| -     | -                                       |
|-------|-----------------------------------------|
| `TAB` | Complete as much as possible            |
| `SPC` | Complete up to one word                 |
| `RET` | Complete and execute                    |
| `?`   | Show possible completions               |
| `M-p` | Fetch previous minibuffer input         |
| `M-n` | Fetch later minibuffer input or default |
| `M-r` | Regexp search backward through history  |
| `M-s` | Regexp search forward through history   |
| `C-g` | Abort command                           |
{.shortcuts}
Type `C-x` `ESC` `ESC` to edit and repeat the last command that used the minibuffer. Type `F10` to activate menu bar items on text terminals.
### Tags
| -                        | -                                          |
|--------------------------|--------------------------------------------|
| `M-.`                    | Find a tag (a definition)                  |
| `C-u` `M-.`              | Find next occurrence of tag                |
| `M-x` visit-tags-table   | Specify a new tags file                    |
| `M-x` tags-search        | Regexp search on all files in tags table   |
| `M-x` tags-query-replace | Run query-replace on all the files         |
| `M-,`                    | Continue last tags search or query-replace |
{.shortcuts}
### Rectangles
| -             | -                                   |
|---------------|-------------------------------------|
| `C-x` `r` `r` | Copy rectangle to register          |
| `C-x` `r` `k` | Kill rectangle                      |
| `C-x` `r` `y` | Yank rectangle                      |
| `C-x` `r` `o` | Open rectangle, shifting text right |
| `C-x` `r` `c` | Blank out rectangle                 |
| `C-x` `r` `t` | Prefix each line with a string      |
{.shortcuts}
### Keyboard Macros
| -                         | -                                   |
|---------------------------|-------------------------------------|
| `C-x` `(`                 | Start defining a keyboard macro     |
| `C-x` `)`                 | End keyboard macro definition       |
| `C-x` `e`                 | Execute last-defined keyboard macro |
| `C-u` `C-x` `(`           | Append to last keyboard macro       |
| `M-x` name-last-kbd-macro | Name last keyboard macro            |
| `M-x` insert-kbd-macro    | Insert Lisp definition in buffer    |
{.shortcuts}
### Buffers
| -           | -                     |
|-------------|-----------------------|
| `C-x` `b`   | Select another buffer |
| `C-x` `C-b` | List all buffers      |
| `C-x` `k`   | Kill a buffer         |
{.shortcuts}
Emacs Search{.cols-3}
------
### Regex (common) {.row-span-2}
| -             | -                                            |
|---------------|----------------------------------------------|
| `.` `(dot)`   | Any single character except a newline        |
| `*`           | Zero or more repeats                         |
| `+`           | One or more repeats                          |
| `?`           | Zero or one repeat                           |
| `\`           | Quote special characters                     |
| `\c`          | Quote regular expression special character c |
| `\|`          | Alternative (“or”)                           |
| `\(...\)`     | Grouping                                     |
| `\(:?...\)`   | Shy grouping                                 |
| `\(:NUM...\)` | Explicit numbered grouping                   |
| `\n`          | Same text as nth group                       |
| `\b`          | At word break                                |
| `\B`          | Not at word break                            |
### Regex (entry)
| Start | End   | Entity |
|-------|-------|--------|
| `^`   | `$`   | Line   |
| `\`  | Word   |
| `\_` | Symbol |
| `\‘`  | `\’`  | Buffer |
{.show-header}
### Regex (conflict)
| These   | Others   | class                     |
|---------|----------|---------------------------|
| `[...]` | `[^...]` | Explicit set              |
| `\w`    | `\W`     | Word-syntax character     |
| `\sc`   | `\Sc`    | Character with syntax c   |
| `\cc`   | `\Cc`    | Character with category c |
{.show-header}
### Incremental Search
| -       | -                                 |
|---------|-----------------------------------|
| `C-s`   | Search forward                    |
| `C-r`   | Search backward                   |
| `C-M-s` | Regular expression search         |
| `C-M-r` | Reverse regular expression search |
| `M-p`   | Select previous search string     |
| `M-n`   | Select next later search string   |
| `RET`   | Exit incremental search           |
| `DEL`   | Undo effect of last character     |
| `C-g`   | Abort current search              |
{.shortcuts}
Use `C-s` or `C-r` again to repeat the search in either direction. If Emacs is still searching, `C-g` cancels only the part not matched.
### Query Replace
| -            | -                                    |
|--------------|--------------------------------------|
| `M-%`        | Interactively replace a text string  |
| `M-x` regexp | Using regular expressions            |
| `SPC` / `y`  | Replace this one, go on to next      |
| `,`          | Replace this one, don’t move         |
| `DEL` / `n`  | Skip to next without replacing       |
| `!`          | Replace all remaining matches        |
| `^`          | Back up to the previous match        |
| `RET`        | Exit query-replace                   |
| `C-r`        | Enter recursive edit (C-M-c to exit) |
{.shortcuts}
Misc
----
### Shells
| -           | -                                      |
|-------------|----------------------------------------|
| `M-!`       | Execute a shell command                |
| `M-&`       | Execute a shell command asynchronously |
| `M-`        | Run a shell command on the region      |
| `C-u` `M-`  | Filter region through a shell command  |
| `M-x` shell | Start a shell in window shell          |
{.shortcuts}
### International Character Sets {.col-span-2}
| -                          | -                                  |
|----------------------------|------------------------------------|
| `C-x` `RET` `l`            | specify principal language         |
| `M-x` list-input-methods   | show all input methods             |
| `C-\`                      | enable or disable input method     |
| `C-x` `RET` `c`            | set coding system for next command |
| `M-x` list-coding-systems  | show all coding systems            |
| `M-x` prefer-coding-system | choose preferred coding system     |
{.shortcuts}
### Registers
| -               | -                                    |
|-----------------|--------------------------------------|
| `C-x` `r` `s`   | Save region in register              |
| `C-x` `r` `i`   | Insert register contents into buffer |
| `C-x` `r` `SPC` | Save value of point in register      |
| `C-x` `r` `j`   | Jump to point saved in register      |
{.shortcuts}
### Miscellaneous
| -          | -                 |
|------------|-------------------|
| `C-u` num  | Numeric argument  |
| `M--`      | Negative argument |
| `C-q` char | Quoted insert     |
{.shortcuts}
### Commands Dealing with Emacs Lisp
| -                  | -                                  |
|--------------------|------------------------------------|
| `C-x` `C-e`        | Eval sexp before point             |
| `C-M-x`            | Eval current defun                 |
| `M-x` eval-region  | Eval region                        |
| `M-:`              | Read and eval minibuffer           |
| `M-x` load-library | Load a Lisp library from load-path |
{.shortcuts}
### Simple Customization
| -                 | -                             |
|-------------------|-------------------------------|
| `M-x` `customize` | customize variables and faces |
Making global key bindings in Emacs Lisp: 
``` {.wrap}
(global-set-key (kbd "C-c g") ’search-forward)
(global-set-key (kbd "M-#") ’query-replace-regexp)
```
### Abbrevs
| -                 | -                                        |
|-------------------|------------------------------------------|
| `C-x` `a` `g`     | Add global abbrev                        |
| `C-x` `a` `l`     | Add mode-local abbrev                    |
| `C-x` `a` `i` `g` | Add global expansion for this abbrev     |
| `C-x` `a` `i` `l` | Add mode-local expansion for this abbrev |
| `C-x` `a` `e`     | Explicitly expand abbrev                 |
| `M-/`             | Expand previous word dynamically         |
{.shortcuts}
### Spelling Check
| -                   | -                                     |
|---------------------|---------------------------------------|
| `M-$`               | Check spelling of current word        |
| `M-x` ispell-region | Check spelling of all words in region |
| `M-x` ispell-buffer | Check spelling of entire buffer       |
| `M-x` flyspell-mode | Toggle on-the-fly spell checking      |
{.shortcuts}
### Writing Commands {.col-span-2}
#### Syntax
```
(defun command-name (args)
"documentation" (interactive "template")
body)
```
#### Example
```
(defun this-line-to-top-of-window (line)
    "Reposition current line to top of window.
With prefix argument LINE, put point on LINE."
    (interactive "P")
    (recenter (if (null line)
                  0
              (prefix-numeric-value line))))
```
The interactive spec says how to read arguments interactively. Type `C-h` `f` interactive `RET` for more details.