the hardness of ECDLP on E(Fq) as used in Ed25519 carries
over from the respective hardness on curve25519 due to
their birational equivalence [6], [7].
L )2, where 
this result
to show
As mentioned before, we now lift
that an adversary cannot impersonate the prover, even when
given access to an oracle OTrans, that outputs valid accepting
conversations Trans [P (cid:5) V]. This is due to the fact, that the
underlying canonical identiﬁcation protocol CID is zk-HVZK,
i.e., there exists a simulator Sim which takes as input only the
public key pk outputs conversations (com, ch, rsp) which are
zk-indistinguishable from real conversations P(sk) (cid:2) V(pk).
The simulator Sim(pk) for CID is deﬁned in Fig. 6 and exploits
the fact that commitments can be recovered from the public
key, the challenge, and the response. The proofs can be found
in Appendix B-B and B-C, respectively.
Sim(A):
1 ch $←− {0, 1}2b
2 ˜s $←− {0, 1}2b
3 S ← ˜s mod L
4 R ← (SB − chA) mod L
5 return (R, ch, S)
Fig. 6. Simulator Sim for CID.
Lemma 1. Let CID = (KGen, P, V) be as deﬁned in Fig. 5.
Then CID is HVZK with zk = 0.
IMP-PA secure). Let CID =
Theorem 2 (CID is
(KGen, P, V) be the zk-HVZK and (t, )-IMP-KOA-secure
identiﬁcation protocol as deﬁned in Fig. 5. Then CID is
(cid:3)
, 
(t
, QT )-IMP-PA-secure with t ≈ t
(cid:3) ≤ .
and 
(cid:3)
(cid:3)
2) Applying the Fiat-Shamir transform: Now that we have
shown that the identiﬁcation protocol satisﬁes the prerequisites
for the Fiat-Shamir transform, we can apply the transform to
show that Ed25519 is existentially unforgeable. We state the
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)

, 
, 
(cid:3)
H
and
−b)
, QS, (Q
−α + Qκ2
theorem in terms of the most basic version Ed25519-Original.
For Ed25519-IETF and thus Ed25519-LibS the proof below
only needs to account for the difference in the veriﬁcation
algorithm.
is EUF-CMA secure). Let
Theorem 3 (Ed25519-Original
CID = (KGen, P, V) be the (t, , QT , (QH + Qκ + Qβ))-
IMP-PA-secure identiﬁcation protocol as deﬁned in Fig. 5 with
H : {0, 1}(cid:3) → {0, 1}2b modeled as a programmable random
oracle and α bits min-entropy. Then Ed25519-Original =
(cid:3)
FSkp
H + Qκ +
Qβ))-EUF-CMA secure, where
det[CID, H] as deﬁned in Fig. 4 is (t
· ( + QSQ
t ≈ t
(cid:3)
H2
(cid:3) ≤ Q
(cid:3)
for QS = QT and Q
H = QH + 1, where Qκ and Qβ refer to
random oracle queries of a certain format (details in proof.)
Proof. In the following we assume without loss of generality,
that the adversary A never queries the same message twice to
the oracle OSign, since Ed25519-Original is deterministic and
thus A does not gain any advantage in doing so.
(cid:3)
H + Qκ + Qβ))-
adversary A against the unforgeability of the signature scheme
Ed25519-Original. We show that this immediately implies a
successful (t, , QT , (QH + Qκ + Qβ)) adversary B against the
IMP-PA security of the underlying identiﬁcation scheme CID.
The reduction B receives as input a public key A. B then runs
A on input A as follows.
We note that the relevant random oracle queries of A can
take three distinct and distinguishable forms: the most relevant
to the reduction are those of the form (com, A, m), i.e., a b-bit
string followed by the encoding A, and some arbitrary-length
bit-string m. The second distinct case are those queries of
length exactly b bits. Any other query can be interpreted as
a query of the form (β, m) with β a b-bit string and m some
arbitrary-length bit-string.
Assume there exists a (t
, QS, (Q
Random oracle queries of the form κ: Let κ be a b-bit
string. Let Qκ be the maximum number of queries of the form
κ that A makes to H. The reduction B simply forwards these
queries to H and returns the answer to A.
Random oracle queries of the form (β, m): Let β be a
bit string of length b and let Qβ be the number of queries of
the form (β, m) that A makes to H. Again, B simply relays
these queries between H and A.
Random oracle queries of the form (com, A, m): Let
(cid:3)
H be the (maximal) number of queries of this form that
Q
A makes to the random oracle H. B guesses the query i ∈
} for which A will eventually output the signature
{1, 2, . . . , Q
(cid:3)
forgery, resulting in a loss of a factor Q
H. For every of the
} with j (cid:7)= i
(cid:3)
other QH = Q
to H, B simply relays the queries between A and H. When
H
), B
the adversary A asks the i-th query, say on (com
(cid:3)
(cid:3) as its commitment to its own challenger. The
forwards com
$←− {0, 1}2b to B,
challenger will then send a challenge ch(cid:3)
which B returns as response to A.
Signing queries: For every of the QS signing queries of A,
B runs its own OTrans oracle to obtain an accepting conversation
− 1 queries j ∈ {1, 2, . . . Q
(cid:3)
H
(cid:3)
, A, m
(cid:3)
H
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1668
(cid:3)
(cid:3)
(cid:3)
(cid:3)
H
(cid:11)
(cid:10)
= r
−2b
· 2
(cid:3)
H2
−α.
with R
(cid:13) 22b−1
L (cid:14) · 2
(R, ch, S). In order for (R, S) to be a valid signature on m, B
must ensure that ch = H(R, A, m), i.e., the reduction programs
the random oracle on these values to return ch.
Note that for each commitment value R that was output by
OTrans, the probability that the value H(R, A, m) had been set
by a previous query of A to the random oracle H, and thus that
A could detect the inconsistency in the patched random oracle,
−α, where α is the min-entropy of
is upper bounded by Q
the identiﬁcation scheme. The distribution of commitments has
α bits of min-entropy for α = − log2
due
to the bias introduced by sampling ﬁrst a uniformly random
2b-bit string and then reducing it modulo L. If this happens,
the reduction B aborts, the probability of which is thus upper
bounded by QSQ
Furthermore, note that this also implies that the value R
provided by the simulation via OTrans is with high probability
different from the deterministic value R
B that
would be generated in the real signing process of the message
m with secret key k belonging to the public key A. However,
A is not able to compute the deterministic commitment value
(cid:3)
by itself unless it can guess the correct value k to determine
R
h[b], ...h[2b − 1] of h ← H(k) and thus r
(cid:3), the probability of
which is bounded by Qκ2
Note that it does not help A in detecting the simulation to
guess the values h[b], ...h[2b− 1], as A has no way of checking
(cid:3) without
that these are the correct values leading to the “real” r
also guessing k.
Existential Forgery: At some point A terminates with a
(cid:3) and
forgery output (m(cid:3), σ(cid:3) = (R(cid:3), S(cid:3))) with R(cid:3) = com
(cid:3). If this is not the case, B aborts with probability
m(cid:3) = m
1
since it has wrongly guessed the index i for which the
Q(cid:2)
forgery will take place. Assuming this is a valid forgery in the
(cid:3) has not been queried to OSign.
EUF-CMA game, it holds that m
) has
In particular this means that the output of H(com
not been re-programmed in A’s view by B to a value other
than ch(cid:3). Furthermore, V2(A, com
, ch(cid:3), S(cid:3)) = 1 holds such
that when B forwards S(cid:3) to its own challenger as ﬁnal output
of its game, B will also be successful.
The running time t of B is that of A plus the time it takes
(cid:3)
H + Qκ + Qβ) times, the time
to query the random oracle H (Q
it takes to query its challenger, and to query OTrans QT = QS
times. As before, we write t ≈ t
(cid:3) since the running time of the
(cid:3) of A. If A outputs
reduction is dominated by the running time t
(cid:3), then B will be able to impersonate
a forgery with probability 
· 2
−α − Qκ2
the prover with probability (cid:2)
Q(cid:2)
B. Strong Unforgeability of Standardized Ed25519
− QSQ
(cid:3)
, A, m
−b.
−b.
(cid:3)
H
(cid:3)
H
(cid:3)
H
Our previous results conﬁrm that for a target public key,
the adversary is not able to forge a signature on a message
m for which it has not seen valid signatures beforehand. In
a real-world scenario, the security provided by existential
unforgeability may be insufﬁcient, as we have mentioned
before, e.g., regarding Bitcoin transaction security or SSH
multi-ciphersuite security. Another commonly named example
is that of blocking certain public-key certiﬁcates. This could
be achieved by storing the hash of the certiﬁcate in a list and
comparing incoming certiﬁcates with this list. Here, a certiﬁcate
can simply be viewed as a signature over a message, i.e., the
contents of the certiﬁcate. An adversary wanting to bypass
this blocking mechanism may create a new valid signature
on the certiﬁcate, thereby altering its hash value that made
the certiﬁcate efﬁciently recognizable by the ﬁlter. This is not
prevented by existential unforgeability.
The security notion that bars adversaries from forging new
signatures on known (message,signature)-pairs is that of strong
unforgeability, or SUF-CMA security, which is closely related
to the concept of malleability. Malleable signatures retain their
validity even if they are slightly changed, for example, by some
bits being ﬂipped. Obviously such signature schemes cannot
hope to achieve strong unforgeability.
As mentioned earlier, Ed25519-Original without the check
of S ∈ {0, . . . , L − 1} during signature veriﬁcation is not
(cid:3) ← S + mL with integer m also
strongly unforgeable as any S
satisﬁes the veriﬁcation equation.
For Ed25519-IETF and Ed25519-LibS, this is avoided by
additionally requiring that the decoded S already be reduced
(cid:3) ← S + mL
modulo L, leading to the rejection of values S
during signature veriﬁcation. The property that results from this
additional check on the CID level is that of (computationally)
unique responses of the identiﬁcation protocol. Recall that this
property guarantees that for a given commitment com and ch
in the interaction P (cid:2) V, there exists (at most) one response
rsp such that (com, ch, rsp) is an accepting conversation (or
a second response is only possible to ﬁnd with probability at
most cur).
For the identiﬁcation protocol underlying Ed25519-IETF, we
in fact even have cur = 0, i.e., for all (A, k) $←− CID.KGen,
(R = rB, s) ← P1(k; r) and ch $←− {0, 1}2b, there exists
only at (most) one valid response S. This conﬁrms the RFC’s
argumentation that “Ed25519 [. . . ] signatures are not malleable
due to the veriﬁcation check that decoded S is smaller than
L” [7]. On an Ed25519-IETF signature level this then means
that given a (message,signature)-pair (m, (R, S)) there exists
(cid:3) (cid:7)= S as we will show in
no second signature (R, S
the next theorem. Furthermore, we will argue that there also
(cid:3) (cid:7)= R
cannot exist a second valid signature (R
with S
Theorem 4 (Ed25519-IETF is SUF-CMA secure). Let
Ed25519-IETF be the (t, , QS, QH)-EUF-CMA secure signa-
ture scheme derived by applying the Fiat-Shamir transform to
the identiﬁcation protocol CID given in Fig. 5 with the check
(cid:3)
H)-SUF-CMA
in Line 17. Then Ed25519-IETF is (t
secure with t ≈ t
Proof. We recall that the games of EUF-CMA and SUF-CMA
only differ in the winning condition for the adversary A:
EUF-CMA forbids that the adversary has queried the signing
oracle OSign on the message m(cid:3) for which it outputs the
forgery, whereas SUF-CMA allows this and only requests that
the signature forgery σ(cid:3) differs from the signature σ that was
output by OSign(m(cid:3)).
We therefore focus on the case that the adversary A on input
different or equal to S.
) with R
(cid:3) ≤ .