18
GYROID =
§III-F covers the case when the device does not contain an
M-series coprocessor.
Summary. The basic approach illustrates the general idea
and procedure to generate the GYROID. Overall, the calcula-
tions are light-weight and are easy to implement. However, the
basic approach requires the device to be stationary or moving
slowly during measurement. To address this problem, we
propose an improved approach which takes device movement
into consideration.
(cid:6)ΔA may not be the
(cid:6)ΔA (cid:4)= ΔA). In the improved
2) Improved Approach: The drawback of the basic ap-
proach is that it may take a long time to generate the GYROID,
because the approach will keep trying until
the device is
almost stationary. In Equation 6, we use a bootstrap value
G0 = FG · I to estimate the value of ΔA. However, since
G0 is not equal to G, the rounded value
actual value ΔA. In general, the difference between ΔO and
G0 · ΔA will increase as elements in ΔO gets bigger, leading
to incorrect rounding (i.e.,
approach, we use the same processing steps as in §III-D1
except for Data Preprocessing, ADC Value Recovery, and Gain
Matrix Estimation. The general idea is that, instead of feeding
ΔO directly into the algorithm (which might result in incorrect
rounding), we update G iteratively using data with different
ranges. The general steps of the improved approach are also
illustrated in Fig. 3.
Data Preprocessing. In this step, we ﬁrst generate more
data from ΔO with small values because smaller values are
less likely to introduce rounding errors. To do so, we can sort
elements in ΔO and then take the difference between adjacent
elements; the resulting values are then likely to be small.
In more detail, suppose ΔO = [ΔO0, ΔO1, · · · , ΔOn−1],
where ΔOi = [ΔOix
is a 3-by-1 vector. We
ﬁrst sort ΔO based on the value of ΔOix into ascending order.
Here, we use [ΔO]x to denote the sorted array. Similarly, we
sort ΔO by the value of ΔOiy and ΔOiz , and denote the
results as [ΔO]y and [ΔO]z, respectively. Then, we calculate
ΔΔO as follows:
, ΔOiz ]T
, ΔOiy
ΔΔO = [diﬀ([ΔO]x) diﬀ([ΔO]y) diﬀ([ΔO]z)]
(9)
where the diﬀ function differences consecutive column vectors
in a matrix. For instance, diﬀ(ΔO) is calculated by:
diﬀ(ΔO) = [ΔO1 − ΔO0, · · · , ΔOn−1 − ΔOn−2]
By subtracting similar vectors, ΔΔO contains more data
with smaller values. From Equation 5 we have:
G−1diﬀ(ΔO) = diﬀ(ΔA)
where values in diﬀ(ΔA) are all integers. Combined with
Equation 9, it is clear that the result of G−1ΔΔO should only
contain integer values. Therefore, we can directly add ΔΔO
to the ΔO dataset and our basic algorithm still applies (i.e.,
ΔO ← [ΔO ΔΔO]). This expansion can be implemented
multiple times to generate more data with small values.
Then, we generate several batches of data from the ex-
(cid:7)G
panded dataset based on the value range and update
(cid:23)(cid:21)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
iteratively. In particular, each batch, ΔOi , is a subset of ΔO
where the absolute value of all its elements is lower than a
multiplication of the nominal gain. That is to say,
ΔO
i = {ΔOj ∈ ΔO | max(|ΔOj|) < (i + 0.5)FG}
where i is the threshold for batch i. We start i from 1 and
double its value for each batch (i.e., i+1 = 2i) until the batch
is the same as ΔO. Then, we progressively feed ΔOi to the
next step and update the value of G from the ﬁrst batch to
the last one.
ADC Value Recovery. In this step, instead of using G0
ΔA, we
to estimate ΔA and calculate the rounding error Er
instead use
Equation 6 and 7 should be updated to:
(cid:7)G whose initial value is G0. In other words,
(cid:6)ΔA
ΔAi = |(cid:6)ΔA
= round((cid:7)G−1ΔO
i − (cid:7)G−1ΔO
i )
r
E
i
i|
(cid:7)G from each
Gain Matrix Estimation. This step updates
batch of data, ΔOi . As seen in Fig. 3, one major difference
between the improved approach and the basic approach is
that the former may go back to the Data Preprocessing step
after the Gain Matrix Estimation. In particular, after each
update of
holds true. If true, it means we have processed all the output
data, and we will pass the estimated
process. Otherwise, the algorithm will go back to the Data
Preprocessing stage with an updated
data will be processed with i+1 = 2i.
(cid:7)G, the algorithm will check whether ΔOi = ΔO
(cid:7)G to the Validity Check
(cid:7)G, and a new batch of
Summary. The improved approach updates the estimation
of G iteratively from data within a small range to the whole
dataset. By using the iteratively updated G to estimate ADC
outputs, the improved approach reduces the error of each
estimation, and thus, it is able to generate a GYROID even
when the device is moving modestly. In general, the basic
approach is useful to illustrate the idea. The improved ap-
proach introduces few additional computations and is much
more reliable. Therefore, it is the preferred way to ﬁngerprint
devices in practical situations.
E. Fingerprinting from Mobile Websites
JavaScript also provides APIs for web developers to access
the fused gyroscope data. Fig. 4 (a) presents the data collected
from an iPad Air through mobile Safari. As shown in Fig. 4
(a), quantization in the fused data is still visible because
the gyroscope ADC outputs are integers. However, there is
a slowly varying continuous component added to the bias.
The bias correction is likely to be a Kalman ﬁlter. Fig. 4
(b) shows that
the bias part can be nearly eliminated by
subtracting consecutive samples. Therefore, we can apply the
same technique described in §III-D to recover the gain matrix.
F. Practical Calibration Fingerprinting Attacks
To launch a calibration ﬁngerprinting attack, an adversary
can collect gyroscope samples from any device using an app
written by the attacker or that visits any website under the
)
s
/
g
e
d
(
t
u
p
t
u
O
e
p
o
c
s
o
r
y
G
0.4
0.2
0.0
−0.2
−0.4
)
s
/
g
e
d
(
s
t
u
p
t
u
O
e
p
o
c
s
o
r
y
G
n
e
e
w
t
e
b
e
c
n
e
r
e
f
f
i
D
0.4
0.2
0.0
−0.2
−0.4
0
100 200 300 400 500
0
100 200 300 400 500
Sequence
Sequence
Axis
x
y
z
Axis
x
y
z
(a) Fused gyroscope data
(b) After differencing
Fig. 4: Gyroscope data collected via JavaScript (iPad Air)
attacker’s control. The attacker can then generate a device
ﬁngerprint (i.e., GYROID) from the samples and store it in
a database. Then, the adversary can query the database to
determine when a particular physical device uses a particular
app or visits a particular website. The details of the generation
and query of the GYROID in the database differ depending on
the collecting source (app or web) and device model.
There are two cases to consider if the GYROID is generated
from raw sensor data. First, if the device contains an M-series
motion coprocessor, the adversary can apply the approach
presented in §III-D2 to generate the GYROID; this GyroID
is exact and uniquely identiﬁes the device. Otherwise, if the
device does not have an M-series coprocessor (e.g., iPhone
4, iPhone 4S, and iPhone 5), adversaries have two options
to determine whether two GYROID entries in the database
represent the same physical device.
• Option 1 (Clustering): the adversary can directly use the
(cid:7)G as the GYROID and store it in a
(cid:7)G and compare the Euclidean
(cid:7)G and the ones in the databases. If
estimated gain matrix
database. For every new device with the same model, the
attacker can calculate its
distance between its
they are close, then they can know they came from the
same device.
• Option 2 (Rounding): For devices without an M-series
coprocessor, we ﬁnd that if we use Equation 8 to generate
the GYROID, this deviates from the true GYROID by at
most ±1 for each of the 9 values in the gain matrix.
By way of an example, the estimated gain matrix of
an iPhone 5 is given in Appendix B. Therefore, an
adversary can simply store the estimated gain matrix and
perform a fuzzy query (i.e. accept a ±1 ﬂuctuation for
each element). Note that this option provides less entropy
compared with Option 1.
The bias correction applied to the JavaScript API means that
(cid:23)(cid:21)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
)
T
μ
(
s
t
u
p
t
u
O
r
e
t
e
m
o
t
e
n
g
a
M
n
e
e
w
t
e
b
e
c
n
e
r
e
f
f
i
D
0.4
0.2
0.0
−0.2
−0.4
iPhone 5S
)
T
μ
(
s
t
u
p
t
u
O
r
e
t
e
m
o
t
e
n
g
a
M
n
e
e
w
t
e
b
e
c
n
e
r
e
f
f
i
0
500
1000 1500 2000
D
Sequence
iPhone 6S
0.1
0.0
−0.1
)
T
μ
(
s
t
u
p
t
u
O
r
e
t
e
m
o
t
e
n
g
a
M
n
e
e
w
t
e
b
e
c
n
e
r
e
f
f
i
0
500
1000 1500 2000
D
Sequence
iPhone 8
0.1
0.0
−0.1
iPhone XS Max
0.1
0.0
−0.1
)
T
μ
(
s
t
u
p
t
u
O
r
e
t