在达成第一个截止日期后，又定义了一系列新的截止日期，以通过
更高比例的ACVC测试。
其中一个截止日期是通过80%的非任务管理的ACVC测试。在达成
这个截止日期后，系统的第一个发行版就交给777团队的用户使用
了。此时有些小组还远远没有做好编码的准备，但是也有些小组准
备开始做一些原型了。Joel听到了Ada效率不高的传言，所以带领他
那个小组急不可耐地想试试。虽然在开始开发后，很多所谓效率不
高的问题都可以通过关闭默认的、由语言定义的运行环境检查选项
来解决，但是那个小组还是感到有些担心。在编译器的第一个版本
出来后，他们马上对产生的机器语言输出做了一次分析，得出的结
论是编译器的性能不够好。尽管我们已经告诉他们，这个发行版的
重点不在于性能，接下来的发行版会做很多优化，但他们还是去寻
找替代品了。因为霍尼韦尔已经表态要使用Ada，而Ada没有其他编
译器，所以他们实际上也没有多少可以选择的余地。他们决定对大
部分代码都使用Ada的机器码插入机制。等完成之后，用户基本上
262
---
## Page 264
是用汇编语言编写的，编译器仅仅是把程序汇编在一起。这样在技
术上就满足了必须用Ada编码的要求，而且能达到所需的性能。在
编译器发行到大约第4个版本之后，HADS团队重新检查了那个团队
最初写的那些代码，发现编译器生成的代码比那个"汇编的"版本效
率要高得多，代码也少得多。这并不奇怪，在很多公并发表的研究
报告中都证明了这个结论是正确的。一个高级语言编译器，特别是
Ada编译器，能够跟踪利用的知识比程序员脑海中保留的知识要全
面得多。对于可以使用的架构特性，一般来说，编译器的并发人员
掌握的知识也要多一些。HADS团队不得不继续“推销"这个产品。
这个项目有一个非常幸运的地方，是和AMD29050处理器有关的，
这种处理器上有一个非常好、非常全面的模拟器。这意味着，在实
际硬件还处于早期原型阶段的时候，我们的团队就已经能够并发和
测试了。后来发现，任何一段代码，只要能够在实际硬件上运行，
就能够在那个模拟器上运行。只有几个与分时相关的领域中，代码
可以在模拟器上运行但是在实际硬件上是不合法的。团队之所有能
赶得上进度，这个模拟器是一个很重要的因素。
虽然在完成各阶段的任务时离某些截正日期已经很近了，但是
HADS团队在生产编译器的过程中达成了所有的截止日期，100%地
通过了ACVC测试。在完成这个目标之后，工作还远远没有完成，
例如，Ada定义并允许很多与实现无关的特性。这些特性包括简洁
地描述诸如记录、数据等数据结构的布局等。适合于AMD29050和
777项目的特性也需要实现。另外还需要添加已经承诺的优化。由
于项目的UCC部分已经完成，Ada任务管理部分也已经可以使用
了，所以Ajit离开了项目，到777项目的一个团队去了。
处理用户问题
我们所要承担的一个主要任务是培训用户使用工具集并提供支持。
大多数人都不熟悉Ada编程语言，没有几个人了解处理器架构的细
节，那个工具集对所有用户都是新的。除了处理Ada的一些神秘之
处，HADS团队还必须尽力处理好777开发人员普遍缺乏Ada知识的
情况。Ada是一种强大的语言，其中的很多特性都让它成为安全关
键嵌入式系统上理想的语言。现在这种语言已经算不上难学的语言
了，但是当时，大家都认为那是一种很难学的语言。Ada中用来辅
助实现的很多软件工程概念对于大多数开发人员来说都很陌生。
HADS团队承担了使用Ada的非正式讲师的角色。例如，Ada的强类
型检查机制可能会让程序很难编写。这是在设计这种语言时有意设
263
---
## Page 265
置的，目的是尽早（在编译时）发现不一致性，不要等到运行时才
发现不一致的地方。但是苦苦挣扎的用户总是责怪工具。我们常常
被叫过去，帮助某些用户处理编译问题。我们HADS团队的大部分
成员都非常熟悉Ada，所以这些事情并不困难，但是很花时间，同
时也会造成一些紧张的冲突。
我记得有一次Frank在编译代码时遇到一些困难，让我过去帮忙。我
到了他的座位上，坐下来把他的代码看了一遍。他的数组下标和数
组元素存在一些类型不匹配的问题。我们费了很大力气才把类型问
题搞对。Frank对于强类型检查感到十分沮丧。我想他接受的那一派
观点是什么都可以编译，然后调试结果就可以了。最后代码总算可
以编译了，但代码似乎过于复杂了。我对他说：“有一种更好的方
法。"并告诉他一些Ada中让代码清晰、或许还能够让代码效率更高
的特性。Frank心烦意乱，觉得我是在批评他的代码，感觉像是受了
侮辱。他的举止让我很吃惊，因为在HADS项目中我们一直是这么
做的，大家都觉得这种做法有很大帮助。当然，HADS团队的成员
知道他们人都很好，并不认为自已受到了威胁。Frank花了很大力气
才让代码编译通过，但是马上又被告知有一种更好的方法。
通过了所有的测试套件并不能确保编译器没有缺陷。ACVC是为Ada
基本特性设计了一套严格的测试用例，但是可能无法对特性做组合
测试，套件中也没有考虑实现上的依赖关系。自然，HADS团队不
得不考虑发行版中的缺陷。我们做的一个比较好的地方是，尽可能
地用一个小测试把缺陷复制一份，添加到我们自己维护的、不属于
ACVC的回归测试套件中。编写这样一个测试用例可能会很困滩。
有一次Paul拿着一份缺陷报告找到团队，在看了那个报告后，我们
都认为这个缺陷似乎是一个代码生成问题。遗憾的是，Paul说他只
能在大型、复杂的系统上产生这个缺陷，每次试着简化程序时，这
个缺陷都消失了。很显然，他发现的是一些隐蔽的情况。幸好我们
是霍尼韦尔公司的一部分，没有费什么事就拿到了Paul的所有代
码。我们打开编译器内部工作的一些输出，能够看到编译器在做些
什么，能够把最初包含几千行代码的用例减少成为一个大约20行的
测试程序。有时候并不容易做到这一点，我们也许会花上几关时间
才能创建一个小的测试用例。因为在小程序中校正错误比在大程序
中校正错误要容易得多，所以，工作量的投入还是值得的。小程序
也提供了回归测试的基础。
264
---
## Page 266
我常常说软件工具处于食物链的末端。我的意思是，如果用户找不
到其他原因，就要责怪工具了。我们必须经常面对这个问题，因为
人们不仅仅要责怪工具，而且还因为那是一个“自己人开发的”工
具，所以更容易让人不信任。有一天，我收到Frances打来的寻求支
持的电话，抱怨一个编译器的缺陷。在向数组中写数据时，生成的
错误代码导致附近的一个变量被覆盖了。这种行为是可能发生的，
也许在使用类似C这样的语言时更有可能如此，因为C语言不检查数
组下标是否在合理范围内。Ada有编译器和运行时检查机制，这类
行为应当是能够捕获的。如果在编译时是静态已知的，那么当下标
超出边界时，在编译时会发出一个警告。在运行时，如果试图访问
一个下标越界的数组，在检查时就会抛出一个异常。这样的运行时
检查确实会生成额外的代码，可能导致效率不高，所以Ada编译器
允许关闭部分或所有运行时检查选项。Frances在构建时继承了一个
关闭运行时检查选项的构建脚本。稍微调查并调试了一下，我们就
发现在写好的源代码中，值超出了数组边界。编译器完全按照指令
生成代码。我们不得不继续培训用户，告诉他们如何使用命令行选
项、有什么作用。
很多缺陷报告最终发现是由用户错误造成的，我们不得不处理大量
这样的缺陷报告。我们非正式地把这些报告称为UIB（UserIs
Boz0，用户是笨蛋）错误。
我们通过了ACVC测试，发布的几个发行版中所包含的一些特性依
赖于具体实现方式，此后团队并始为HADS系统创建一个源代码级
别的调试环境。大约在那个时候，Cynthia调离团队去从事777的项
目了。团队的其余成员完成了调试器最初的工作。后来Tom、
Dave、Peter、Dan和Waleen又回去处理编译器的问题了，我完成了
调试器的第一个版本。Tom的工作重点是窥孔优化，Dave的工作重
点是有效地使用寄存器，Dan和Waleen的工作重点是为构建选择一
个通用的优化机器代码生成机制。
为了更有效地使用寄存器，Dave要做的一件事情是进行“生/死"分
析，确定寄存器何时容纳着变量，那个变量什么时候就再不使用
了。做这种分析产生的一个附带效应是，很容易判断是否在还没有
向寄存器写入内容时就已经读取其内容了。这意味着使用了未初始
化的变量。Dave生成的代码在使用未初始化变量时会发出警告信
息。在这个版本发布给用户后，他们开始得到警告信息，开始打支
持电话，让我们帮助他们找出未初始化的变量。Dave找到一个聪明
的方法，分析输入到寄存器中的内容的分配情况，这样可以输出未
265
---
## Page 267
初始化的变量的名称。他实现了这个功能，写了几个小测试用例，
证明功能可以正确使用。我们在接下来的版本中包含了这个特性。
但是几乎在瞬间我们就并始收到抱怨了，说编译器的速度慢了下
来，我们检查后发现是因为这个未初始化变量的分析所导致的。用
前一个版本不到5分钟可以编译完成的东西，在新版本上用了一天
半也没有完成，最后被强行中断了。自然，如果没有未初始化变
量，编译器一点几都不会慢，但是很显然，不值得投入这么长时间
来命名已经发现的未初始化变量。
用户提出了增加功能特性，增加有关未初始化变量的信息只是其中
一个例子。因为我们是自主并发的，而且很多用户慢慢都认识我们
了，所以他们常常私下里找到我们，希望向工具中增加一个特性。
这种做法很快就失控了，我们制定了一个政策，对这类要求“一律
说不”。我们让所有提出要求的人都去找项目负责人Tom，由Tom和
团队其他人一起决定是否要将这个请求加入到工作中，优先级是什
么。
我们还为每个人都设置了一个“十大任务”列表。每个人都有自己优
先级最高的10个任务。通过这种方式，他就可以知道现在应当做些
什么工作，接下来有什么工作。Tom每天都可以修改这些列表，但
是如果我们不同意设定的优先级，可以和他讨论。我们还有周例
会，在星期五下午的会议上讨论前一个星期的进展，设置下一个星
期的优先级。在这些会议上也可能讨论少量的技术问题。
我们在并发源代码级别的调试器时，很多东西都可以从先前的
DDC-I工作中拿过来，但是调试的很多领域都是与架构相关的。调
试信息的处理也与架构相关，对于完成类似于设置断点这样的工
作，每个目标都有特定的完成方式。因为模拟器对团队的作用非常
大，所以我们开发的调试器既能支持模拟器，又能支持实际使用的
目标语言。对于编译器，调试器的发布不是“大爆炸式”的，而是按
照计划进行一系列的发布，支持越来越多的特性。
在编译器发布之后，需要得到更多的用户支持。一个特别复杂的问
题是寄存器中的变量。从DDC-I基线中移植过来的代码很好地识别
了寄存器中变量的初始位置，在调用子程序的时候，如果在变量的
范围内，就能够识别出寄存器保存在哪里。但是在我们并始添加优
化功能以复用寄存器时，发现我们得不到信息，不知道变量是如何
从寄存器移到内存中的，不知道寄存器是如何供另外一个变量使用
的。到了变量死掉并复用寄存器的时候，用户会问变量的值是多
266
---
## Page 268
少。正确答案是代码中的变量此时已经不可使用了，但他们得到的
是一个不正确的、令人迷惑的值。设计一个系统来跟踪它，并且在
调试器和编译器的寄存器分配部分中实现它，这是一个非常重要的
任务。
很多用户都不熟悉源代码级别调试器的使用，大多是在使用打印语
句来得到程序的信息。教育用户如何使用调试器是一个持续不断的
任务。他们似乎都不去阅读手册。随着用户对调试器越来越熟悉，
他们常常会提出一些让调试更容易的特性。通常情况下，这些请求
是很容易“满足”的，因为这些功能已经包含在调试器中了，只是用
户没有去阅读使用手册而已。
即使有了源代码级别的调试器，如果能够让用户在机器代码级别检
查代码的低级别行为，也是很有用的。当然，如果在机器码级别调
试，最好能够了解一些有关机器架构及其汇编语言的知识。但是很
遗憾，很多用户同样不愿意阅读文档。有一天，Sam给我打电话说
道：“调试器出了问题，要不然就是模拟器出了问题。”于是我到他
的座位那里，看看是否能够发现并修复问题。他正在机器代码级别
进行调试，可以单步执行机器指令。他说道：“看，我在这里准备
执行一个调用语句，但是在单步执行机器码的时候，没有停在被调