title:A game of "Cut and Mouse": bypassing antivirus by simulating user
inputs
author:Ziya Alper Genç and
Gabriele Lenzini and
Daniele Sgandurra
A Game of “Cut and Mouse”: Bypassing
Antivirus by Simulating User Inputs
Ziya Alper Genç
University of Luxembourg
PI:EMAIL
Gabriele Lenzini
University of Luxembourg
PI:EMAIL
Daniele Sgandurra
Royal Holloway, University of London
PI:EMAIL
ABSTRACT
To protect their digital assets from malware attacks, most users
and companies rely on anti-virus (AV) software. But AVs’ protec-
tion is a full-time task and AVs are engaged in a cat-and-mouse
game where malware, e.g., through obfuscation and polymorphism,
denial of service attacks and malformed packets and parameters,
try to circumvent AV defences or make them crash. On the other
hand, AVs react by complementing signature-based with anomaly
or behavioral detection, and by using OS protection, standard code,
and binary protection techniques. Further, malware counter-act,
for instance by using adversarial inputs to avoid detection, et cetera.
This paper investigates two novel moves for the malware side.
The first one consists in simulating mouse events to control AVs,
namely to send them mouse “clicks” to deactivate their protection.
We prove that many AVs can be disabled in this way, and we call
this class of attacks Ghost Control. The second one consists in con-
trolling high-integrity white-listed applications, such as Notepad,
by sending them keyboard events (such as “copy-and-paste”) to
perform malicious operations on behalf of the malware. We prove
that the anti-ransomware protection feature of some AVs can be
bypassed if we use Notepad as a "puppet" to rewrite the content of
protected files as a ransomware would do. Playing with the words,
and recalling the cat-and-mouse game, we call this class of attacks
Cut-and-Mouse.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation.
KEYWORDS
Antivirus, Ransomware, Evasion, Vulnerability, Simulated Inputs
ACM Reference Format:
Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra. 2019. A Game of
“Cut and Mouse”: Bypassing Antivirus by Simulating User Inputs. In 2019
Annual Computer Security Applications Conference (ACSAC ’19), December
9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 10 pages. https:
//doi.org/10.1145/3359789.3359844
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359844
1 INTRODUCTION
To protect IT assets, distinct classes of basic security practices are
often provided to the end users depending on their usage scenario.
For instance, home users are instructed to always update their
operating system (OS) and applications; corporate administrators
are required to employ some form of user training to teach users,
e.g., how not to click on e-mails that look suspicious; organizations
are recommended to use firewalls to protect their networks from
remote attackers. However, it is often the case that the first security
recommendation given to all classes of users is to install an anti-
virus (AV) on their devices. In fact, AVs are believed to be one of
the best protection solutions, specifically against malware; AVs are
installed in most user computers and companies, and are implicitly
trusted by most users, and are part of the trusted computing base1.
It goes without saying that, while AVs do offer protection, they
cannot catch all malware. Not only there might be missing signa-
tures in their database [2], by over the years malware authors have
spent great effort in trying to evade AVs detection, e.g., through
obfuscation and polymorphism [35] or evasion [4], or by disabling
or crashing the AV [17, 33]. This is the classical cat-and-mouse game
between AVs and malware, in which the first class of attacks (e.g.,
polymorphism) is typically mitigated by some form of anomaly or
behavioral detection [8, 34, 34] while the second one (e.g., evasion)
is mitigated by making the AV more difficult to exploit, such as
through OS protection and standard binary integrity protection
techniques [1]. The battle continues on, as now malware can try
and bypass AV behavioral detection using, for instance, adversarial
inputs [7], and AVs will incorporate robust mechanisms to mitigate
the effects of these inputs [10, 14].
In relation to this cat-and-mouse game, we raise two questions.
(a) Can an attacker instrument a malware to send mouse and key-
board events to AVs to deactivate their functionalities? In particular,
we wonder whether off-the-shelf AVs can be disabled by a malicious
program’s mimicking user inputs (through synthesized keyboard
and mouse events) to turn off, or temporarily freeze, their opera-
tions, especially those aimed at protecting from malware attacks.
In theory, we would expect that, to protect from spoofed inputs,
AVs enforce some forms of integrity and authentication checks on
inter-process communications and user access control to verify the
legitimacy of the received inputs. Instead, in our experiments, we
found that most of the AVs can be easily disabled by a malware sim-
ulating mouse clicks, in particular, AVs are stoppable by spoofing
requests to their main graphical interface. (b) Can we extend this
class of attacks to control a trusted application like a “puppet” and
instruct it to perform malicious operations on behalf of a malware
itself ? To this end, we tested whether a ransomware can circumvent
1Most AVs require kernel-level privileges to perform some of their operations.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra
the Protected Folders feature of AVs by exploiting and controlling
Notepad, a trusted application, to bypass the restrictions in place
and encrypt files in the Protected Folders.
These two research questions are linked to a more fundamental
issue about human-to-process event authentication. In question (a), in
fact, the matter is whether AVs do authenticate inputs (supposedly
coming from hardware operated by a user) as really coming from
the user’s operating the hardware. In question (b), the matter is
less direct and concerns recognizing inputs as authentically coming
from the user events that are generated by a user application. Since
applications may have security clearance, source authentication
becomes necessary to recognize events that instead are generated
by a malicious software, not the user, controlling the application.
Both are hard problems and the vulnerabilities that we illustrate in
this paper show how critical are the attacks that root to a failure in
this authentication process.
Problem Statement: This paper claims that the following prob-
lems exist in current malware mitigation:
(P-i) Several AV programs contain a critical flaw that allows unau-
thorized agents to turn off their protection features. In detail,
the real-time scanning service of some AVs can be disabled
by malware. This will make victims exposed to several kinds
of cyber threats, especially those originated from malware.
(P-ii) The Protected Folders solution provided by AV vendors suffers
from design weaknesses. In fact, a small set of whitelisted ap-
plications is granted privileges to write to protected folders.
However, whitelisted applications are not protected from
being misused by other applications. This trust is therefore
unjustified, since a malware can perform operations on pro-
tected folders by using whitelisted applications as interme-
diaries. In particular, ransomware might be able to exploit
some of the whitelisted applications to change the contents
of files, thus to encrypt user data.
In this paper we discuss two classes of attacks that prove these
problems currently exist, the first one being Ghost Control, aimed
at crafting stealthy mouse events to disable AVs (P-i), while the
second one is Cut-and-Mouse, aimed at simulating keyboard events
to control trusted applications (P-ii).
1.1 Ethical Issues and Responsible Disclosure
This research may have ethical concerns of dual use. We there-
fore adhere to an ethical code of conduct and responsible disclo-
sure [19, 23]. We do not disclose the names of the AV companies,
nor publicly share any piece of software that can be used to exploit
the vulnerabilities reported in this paper. We have dutifully engaged
with the affected AV companies to inform them about our findings
by following responsible disclosure practices.
2 BACKGROUND
In this section, we recap the essential background information to
understand our attacks. We begin with explaining the ransomware
mitigation in current antivirus solutions. Next, we summarize exist-
ing measures provided by Windows OS to protect processes from
unauthorized modifications.
2.1 Ransomware Defense in AVs
In response to the rise of ransomware threat, AV vendors have
developed dedicated ransomware detection modules that are either
integrated into their products or as standalone tools. While internal
mechanisms of AVs are not publicly documented, the available
options in most of AV configuration interfaces suggest that these
anti-ransomware components are primarily based on whitelists.
Similar to the virus signature databases, these lists are maintained
by AV vendors by default, though, users can also add additional
applications that they trust.
The vendor of Windows OS, Microsoft, has also developed a
specific anti-ransomware solution, called Controlled Folder Access,
which has been included in Windows 10 Fall Creators Update (Ver-
sion 1709) and Windows Server 2019. Ransomware Protection, in-
tegrated into Windows Defender antivirus, controls which appli-
cations have access to protected folders, a list of directories that
includes system folders and default directories such as Documents
and Pictures. Users can also add further directories to the pro-
tected folder list in order to extend the coverage of protection. By
default, the decision of granting applications access to protected
folder is made by Windows, hence Microsoft, but users can also
allow specific applications to access the protected folders.
In this paper, we use the term trusted applications when referring
to the applications that has write access to protected folders, either
granted by AV vendor or added by the user.
2.2 Process Protection via Integrity Levels
Computer architecture we use today is designed to run multiple
processes concurrently, that is, all running processes share the same
execution environment. To protect processes from malicious alter-
ations by other processes, Windows OS employs access control
mechanisms. Mandatory Integrity Control (MIC) is one of these
security features, which enables the OS to assign an Integrity Level
(IL) to a process: this value indicates the privilege level of that
process. MIC defines four values for IL, with the increasing privi-
leges: Low, Medium, High, and System. When a process attempts to
interact with another process, MIC checks IL of the initiator and
prevents if the target has higher IL. For example, injecting code to
another process using CreateRemoteThread or write data to the
memory of another process via WriteProcessMemory will fail if
the caller does not possess at least the same IL as the target.
Closely related to MIC, User Interface Privilege Isolation (UIPI)
is another security feature of Windows, which complements MIC
to prevent unauthorized process interactions. UIPI also utilizes ILs
and blocks window messages flowing from a process with lower
IL. For example, calls to SendMessage Application Programming
Interface (API) would fail if the caller has a lower IL than the target.
Specifically, UIPI prevents the Shatter attack that we review in §8.
3 THREAT MODEL
In the description of our attacks, we assume the system is protected
using the latest generation of AVs with specific modules against
ransomware, and with built-in anti-ransomware feature of the OS.
We assume the attacker is able to get access to a Windows system
with user privilege levels by either tricking the user into clicking
on a file (e.g., attached or linked in an email) or by exploiting a
A Game of “Cut and Mouse”: Bypassing Antivirus by Simulating User Inputs
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
vulnerability in the victim’s system. Once the attacker has estab-
lished a foothold into the system, it will typically drop/download a
malware to perform malicious operations, however, the malware
will be blocked by an AV, or in the case of ransomware, encryption
of files in protected folders will be blocked by anti-ransomware
protected folder feature offered by Windows or some AVs. Hence-
forth, the focus of this paper is on how attackers can bypass AVs
and anti-ransomware protection modules, and in providing prac-
tical mitigation solutions, rather than in the problem of detecting
and protecting the system from remote attacks. This threat model
is sometimes referred as a 2nd stage attack, meaning an attacker
would need to have remote access to a victim’s computer, or have
installed a malicious application using one of the two previously
outlined alternatives (or through other means).
In this threat model, we will perform two attacks, which are
described in the next two sections: the first attack (Cut-and-Mouse)
is aimed at bypassing the protected folder feature to encrypt files
in protected folder, while the second one (Ghost Control) is aimed
at disabling AVs’ real time protection.
4 ENCRYPTING PROTECTED FOLDERS
In this section, we describe our attack, Cut-and-Mouse, which al-
lows ransomware to evade detection by anti-ransomware solutions,
which are based on protected folders, and to encrypt the victim’s
files. First, we investigate the root causes that leads to this attack.
Next, we give the attack details, and finally propose a practical
solution.
4.1 Disharmony Between UIPI and AVs
As explained in §2, anti-ransomware modules of commercial AV
software grant write access to trusted applications only. To ensure
this defense strategy cannot be easily bypassed, the trusted applica-
tions should be protected from any malicious modifications which
would be seen in a typical malware attack. For instance, as we report
the details in §6, current AVs detect when a malicious Dynamic-
Link Library (DLL) module is injected into a trusted application,
and suspend or kill its process. Similarly, UIPI, another protection
described in §2, protects processes that run with administrative
privileges from malware.
Nonetheless, we have discovered two entry points for an attack
which enables malware to bypass these defense systems, namely:
(E-i) UIPI is Unaware of Trusted Applications: UIPI filters simulated
inputs based on integrity levels, however, UIPI is agnostic of
the trust level assigned to applications, so it does not enforce
any policy in these cases: as shown in Fig. 1a, that means
that an attacker can send messages to trusted applications,
in particular to those that are allowed to read and write to
protected folders;
(E-ii) AVs Do Not Monitor Process Messages: AVs do not monitor syn-
thesized clicks or key press events flowing into the trusted
applications: as depicted in Fig. 1b, this means that a ran-
somware can bypass protected folder enforcement by send-
ing control messages to a trusted application.
These two entry points form a vulnerability that can enable
malware to perform practical attacks, such as that shown in Fig. 1c
where a ransomware can control a trusted application to perform
controlled write operations as to encrypt inaccessible protected
files. The attack is described in more detail in the next section.
(a) Ransomware’s messages to
high IL applications are blocked
by UIPI (top); but ransomware
can send messages to trusted ap-
plications (bottom).
(b) Ransomware’s write
at-
tempts to protected files are
blocked by AVs (top); however,
sending messages
to trusted
applications is allowed (bottom).
(c) Ransomware can control a trusted application to perform write
operations to protected files.