string resultString = null;
try(
)catch (ArgumentNullException ex)(
//Cannot pass null as the regular expression or subject string
}catch(ArgumentException ex)(
//Syntax error in the regular expression
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
+p)xaboymau=aoxabax xab
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex对象：
string resultString = null;
try(
Regex regexObj=new Regex(@"\d+");
try(
}catch (ArgumentNullException ex)(
//Cannot pass null as the subject string
}catch (ArgumentException ex){
//Syntax error in the regular expression
126
第3章
www.TopSage.com
---
## Page 143
VB.NET
如果只是做一次性的快速检查，你可以使用如下的静态调用：
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
Dim ResultString As String = Nothing
Try
Catch ex As ArgumentNullException
Catch ex As ArgumentException
'Syntax error in the regular expression
End Try
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("\d+")
Dim ResultString = RegexObj.Match(SubjectString).Value
如果该正则式是由最终用户提供的，那么就应当使用带有完整例外处理的Regex对象：
Dim ResultString As String = Nothing
Dim RegexObj As New Regex("\d+")
Try
ResultString = RegexObj.Match(SubjectString).Value
Catch ex As ArgumentNullException
'Cannot pass Nothing as the subject string
End Try
Catch ex As ArgumentException
'Syntax error in the regular expression
End Try
Java
创建一个Matcher来执行查找并保存结果：
String resultString = null;
Pattern regex =Pattern.compile("\\d+");
Matcher regexMatcher = regex.matcher(subjectString);
if （regexMatcher.find()){
resultString = regexMatcher.group();
如果该正则式是由最终用户提供的，那么你还应当使用完整的例外处理：
String resultString = null;
try{
使用正则表达式编程
127
www.TopSage.com
---
## Page 144
Pattern regex =Pattern.compile("\\d+");
Matcher regexMatcher = regex.matcher(subjectString);
if (regexMatcher.find())(
resultString = regexMatcher.group();
}catch （PatternSyntaxException ex){
//Syntax error in the regular expression
JavaScript
var result = subject.match(/\d+/);
if (result)(
result =
result[0];
}else{
result =
{
PHP
if (preg_match('/\d+/'，$subject，$groups)）{
$result = $groups[0];
}else{
$result ='*;
Perl
if ($subject=~ m/\d+/）{
$result = $&;
}else{
$result =
Python
如果只是做一次性的快速检查，你可以使用如下的全局函数：
matchobj = re.search("regex pattern",subject)
if matchobj:
result =matchobj.group()
else:
result = ""
要想重复使用同一个正则表达式，就需要使用一个编译过的对象：
reobj = re.compile("regex pattern")
matchobj = reobj.search(subject)
128
第3章
www.TopSage.com
---
## Page 145
if match:
result = matchobj.group()
else:
result = "#
Ruby
你可以使用=～操作符和它的变量$&：
if subject =~/regex pattern/
result = $&
else
result = ""
end
另外，你也可以使用一个Regexp对象来调用match方法：
matchobj =/regex pattern/.match(subject)
if matchobj
result = matchobj[0]
else
result = ""
end
讨论
正则表达式的另外一个主要工作是从一个较长的字符串中提取符合模式的子串。本书
中讨论的所有编程语言都会提供一种很容易的方式来获得字符串中的第一个正则表达
式匹配。这样一个函数会从学符事的开始来尝试匹配该正则表达式，并继续向后搜索
该事，直至找到正则表达式匹配为止。
.NET
.NET中的Regex类并不包含一个成员可以返回正则表达式匹配的字符串。但是它却包
含一个MatchO方法，可以返回Match类的一个实例。这个Match对象有一个属性名为
Value，其中保存的是由正则表达式匹配的文本。如果正则表达式匹配失败，那么它依
然会返回一个Match对象，但其Value属性中包含的是-一个空串。
当调用Match0方法的时候，总共有5种不同的重载方法可以使用。第一个参数永远都
是包含目标文本的一个字符串，正则表达式会在其中查找匹配。第一个参数不能是
null。否则，MatchO会产生一个ArgumentNullException例外。
如果你只想使用这个正则表达式几次，那么可以使用一个静态调用。此时，第二个参
数是你想要使用的正则表达式。你还可以把正则选项作为可选的第三个参数。如果你
的正则表达式中包含语法错误，就会产生一个ArgumentException例外。
如果你需要在许多字符串上使用同一个正则表达式，那么可以先通过构造一个Regex
使用正则表达式编程
129
www.TopSage.com
---
## Page 146
对象，然后用这个对象来调用MatchO函数，这样做更为高效。此时，第一个参数，
也就是目标字符串，是唯一必需的参数。你还可以使用一个可选的第二个参数来说
明正则表达式应当开始进行查找的目标字符串中的位置（字符索引)。实质上，你传
递给第二个参数的数值，也就是你想要正则表达式忽略的目标字符串开头字符的数
会用到这样的方式。如果指定了-个数量，那么它必须大于或等于0，而且要小于或
者等于目标字符串的长度。否则，IsMatchO会产生一个ArgumentOutOfRangeException
例外。
如集你使用了说明起始位置的第二个参数，那么还可以使用第三个参数来说明正则
表达式被允许搜索的子串的长度。这个数应该大于或等于0，但是一定不能超过目
标字符事的长度（第一个参数）减去起始偏移量（第二个参数）。例如，
regexObj.Match("123456"，3，2)会尝试在"45"中找到匹配。如果第三个参数比目标字符
串的长度要大，那么MatchO会产生-一个ArgumentOutOfRangeException例外。如果第
事的长度，那么还是会产生一个ArgumentOutOfRangeException例外。如果你允许用
户来指定起始和结束位置，那么就需要在调用MatchO之前进行检查，或者保证一定
会捕获这两个越界例外。
静态的重载函数不支持在参数中说明正则表达式可以搜索目标字符事中的哪个部分。
Java
要得到正则表达式匹配的字符串子串，你就需要创建一个Matcher，可以参考在实例3.3
中的讲解。然后使用你的匹配器来调用findO方法，不用提供任何参数。如果findO的
返回值是true，那么可以不使用任何参数来调用groupO，就能够获取你的正则表达式
匹配到的文本。如果findO的返回值是false，你就不能再调用groupO，否则会得到-个
IllegalStateException例外。
Matcher.findO会接受一个可选参数，用来说明在目标字符串中的起始位置。你可以使用
它来在字符串中的某个特定位置开始查找。如果想要从字符串开头查找，把该参数置
为0。如果把起始位置设为一个负数，或者是大于目标字符串长度的一个数，那么就会
产生一个IndexOutOfBoundsException例外。
如果不用这个参数，那么findO函数就会从上次找到匹配的位置之后的字符开始查找。
如果是在Patterm.matcherO或Matcher.resetO之后第-一次调用findO，那么findO就会从字
符串的开头进行查找。
JavaScript
string.matchO函数接受一个正则表达式作为它的唯一参数。在这个参数中，你可以使用
130第3章
www.TopSage.com
---
## Page 147
字面正则表达式、正则表达式对象或者一个字符串。如果你传递的参数是一个字符串，
那么string.matchO会创建一个临时的regexp对象。
当匹配尝试失败的时候，string.matchO会返回null。这样你就可以区分到底是一个正则
表达式没有找到匹配，还是找到了一个长度为0的匹配。它也意味着你不能显示结果，
因为可能会显示“null”，或者是一个空对象错误消息。
当匹配尝试成功时，string.matchO会返回一个包含匹配细节的数组。在数组中的第0个
元素是包含该正则表达式匹配文本的一个学符事。
一定要保证你在正则表达式中没有添加/g标志。因为如果添加了它，string.matchO就会
有不同的表现，这会在实例3.10中讲解。
PHP
在前面两个实例中讨论过的preg_matchO函数会接受一个可选的第三个参数，在其中会
保存该正则表达式匹配到的文本，以及它的捕获分组。当preg_matchO的返回值是1时，
该变量会包含一个学符事数组。在数组中的第0个元素中会包含整个的正则表达式匹
配。其他的元素会在实例3.9中进行讲解。
Perl
当模式匹配操作符m//找到-一个匹配的时候，它会设置几个特殊变量。其中一个变量
是$&，它会保存该正则表达式所匹配到的子串。其他的特殊变量会在稍后的实例中加
以讲解。
Python
在实例3.5中已经讲解了searchO函数。在这里，我们会把searchO返回的MatchObject
实例保存到一个变量中。要获得正则表达式匹配到的字符事子事，我们可以使用这个
匹配对象（matchobject）来调用groupO方法，不需要提供任何参数。
Ruby
在实例3.8中会解释变量$～与MatchData对象。在字符串的上下文中，这个对象的
取值是正则表达式匹配到的文本。在数组的上下文中，这个对象的取值是一个数组，
它的第0个元素包含整个的正则表达式匹配。
$&是一个特殊的只读变量。它是$～[0]的一个别名，其中包含的是正则表达式匹配
到的文本的一个字符事。
参见
实例3.5、3.8、3.9、3.10和3.11。
使用正则表达式编程131
www.TopSage.com
---
## Page 148
3.8决定匹配的位置和长度
问题描述
在上一个实例中，我们所做的是提取正则表达式匹配到的子串。这个实例要求你决定
该匹配的开始位置和长度。有了这些信息之后，就可以在你自己的代码中提取匹配的