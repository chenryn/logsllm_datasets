103,860
Time
0.35
0.39
0.46
0.55
0.51
0.66
0.83
Size
138
303
532
1,182
850
1,638
2,682
Figure 5: The running time (ms) and online communication
size (bytes) of the two PSI protocols when executed with κs-bit
strings and input sets of size B.
κs = κb = 40
Circuit
[23]
This
LAN
AES
SHA256
N
32
128
1024
32
128
1024
32
128
1,024
32
128
1,024
Online
1.7
1.5
1.3
10.0
8.8
8.4
190
191
189
194
192
191
Figure 6: Amortized running times per execution (reported in
ms) for [23] and our prototype. We used bucket size B = 6,5,4
for N = 32,128,1024.
Ofﬂine
197
114
74
459
275
206
1,126
919
760
3,638
3,426
2,992
Ofﬂine
45
16
5.1
136
78
48
282
71
34
777
399
443
Online
12
10
7
50
40
33
163
164
160
290
256
207
WAN
AES
SHA256
due to the extra data sent by the 2-round protocol. Specif-
ically, the asynchronous protocol sends O(B2κsκc) bytes
while the synchronous one sends O(Bκs + B2κc). In the
remaining comparisons, we always use the PSI protocol
with lowest latency, according to Figure 5.
9.2 Comparison to the LR protocol
We compare our prototype to that of [23] with 40-bit se-
curity. That is, we use κb = κs = 40; both protocols have
identical security and use the same bucket size. We use
identical AWS instances and a similar number of threads
to those reported in [23].
Figure 6 shows the results of the comparison in the
LAN setting. It can be seen that our online times are 5
to 7 times faster and our ofﬂine times are 4 to 15 times
faster. Indeed, for N = 1024 our total (online plus ofﬂine)
time is less than the online time of [23].
In the WAN setting with small circuits such as AES
where the input size is minimal we see [23] achieve faster
online times. Their protocol has one fewer round than
ours protocol, which contributes 38ms to the difference
in performance. However, for the larger SHA256 cir-
cuit our implementation outperforms that of [23] by 16
to 100ms per execution and we achieve a much more ef-
308  25th USENIX Security Symposium 
USENIX Association
12
Circuit
AES
SHA-256
2048
CBC-MAC
N
32
128
1,024
32
128
1,024
32
128
1,024
κb = κs = 80
Storage Ofﬂine Online
2.3
2.1
1.8
15.7
12.3
11.4
22.7
18.1
15.8
0.21
0.88
6.8
6.8
8.7
62.1
3.8
15.4
109.5
69
25
16
234
190
131
621
450
378
κb = κs = 40
Storage Ofﬂine Online
1.7
1.4
1.3
10.0
8.8
8.4
14.9
13.4
12.3
0.12
0.32
1.6
1.3
3.5
15.6
2.4
6.2
31.0
45
16
5.1
136
78
48
655
191
95
κb = 20; κs = 40
Storage Ofﬂine Online
1.1
1.1
1.0
7.6
6.4
6.3
11.1
10.6
10.6
0.06
0.38
0.76
0.68
4.4
8.8
1.2
7.9
15.6
40
16
2.4
65
95
24
247
246
71
Figure 7: Amortized running times per execution (reported in ms) and total ofﬂine storage (reported in GB) for our prototype in
the LAN conﬁguration. The peak ofﬂine storage occurs before the cut and choose, consisting of the circuits, commitments, and
OT messages. For κb = 80 we use parameters (N,B) ∈ {(32,12), (128,9), (1024,7)}. For κb = 40 we use parameters (N,B) ∈
{(32,6), (128,5), (1024,5)}. For κb = 20 we use parameters (N,B) ∈ {(32,3), (128,2), (1024,2)}.
ﬁcient ofﬂine phase ranging from 4 to 22 times faster for
both circuits.
As discussed in Section 2.3, our protocol has asymp-
totically lower online communication cost, especially for
computations with larger inputs. Since both protocols are
more-or-less I/O bound in these experiments, the differ-
ence in communication cost is signiﬁcant. Concretely,
when evaluating AES with N = 1024 and B = 4 our pro-
tocol sends 16,384 bytes of wire labels and just 564 bytes
of PSI data. The online phase of [23] reports to use
170,000 bytes with the same parameters. Even using our
asynchronous PSI sub-protocol, the total PSI cost is only
10,280 bytes.
9.3 Effect of security parameters
We show in Figure 7 how our prototype scales for differ-
ent settings of security parameters in the LAN setting. In
particular, the security properties of our protocol allow
us to consider smaller settings of parameters than are ad-
vised with traditional cut-and-choose protocols such as
[23]. As a representative example, we consider κb = 20
and κs = 40 which means that our protocol will leak a
single bit only with probability 1/220 but guarantee all
other security properties with probability 1− 1/240.
Our protocol scales very well both in terms of secu-
rity parameter and circuit size. Each doubling of κs only
incurs an approximate 25% to 50% increase in running
time. This is contrasted by [23] reporting a 200% to
300% increase in running time for larger security pa-
rameters. Our improvement is largely due to reducing
the number of cryptographic steps and no cheat-recovery
circuit which consume signiﬁcant online bandwidth.
We see a more signiﬁcant trend in the total storage re-
quirement of the ofﬂine phase. For example, when per-
forming N = 1024 AES evaluations for security parame-
ter κb = 20 the protocol utilizes a maximum of 0.76 GB
of storage while κb = 40 requires 1.6 GB of storage. This
further validates κb = 20 as a storage and bandwidth sav-
ing mechanism. [23] reports that 3.8 GB of ofﬂine com-
κs
40
80
B
2
3
4
6
5
7
9
LAN
Time Bandwidth
327
0.26
353
0.41
381
0.56
465
0.82
0.75
568
725
1.01
2.42
465
WAN
Time Bandwidth
144
0.63
206
0.72
213
1.01
293
1.32
1.39
300
366
2.02
3.41
331
Figure 8: Maximum amortized throughput (ms/execution) and
resulting bandwidth (Kbps) when performing many parallel
evaluations of AES with the given bucket size B and statisti-
cal security κs.
munication for N = 1024 and 40-bit security.
9.4 Throughput & Bandwidth
In addition to considering the setting when executions
are performed sequentially, we tested our prototype
when performing many executions in parallel to maxi-
mize throughput. Figure 8 shows the maximum aver-
age throughput for AES evaluations that we were able to
achieve, under different security parameters and bucket
sizes. The time reported is the average number of mil-