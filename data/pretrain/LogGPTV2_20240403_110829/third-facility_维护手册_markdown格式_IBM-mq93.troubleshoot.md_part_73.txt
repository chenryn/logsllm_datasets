Note:
For the IBM MQ .NETclient libraries built against .NET Framework, the order of precedence is as follows:
1.App.Config
2.Environment variable
3.mqclient.ini
For the IBM MQ .NET client libraries built against .NET Standard and .NET 6, the order of precedence is as
follows:
1.Environment variable
2.mqclient.ini
The active trace file has a name of the format xms_tracePID.log where PID represents the
process ID of the application. The size of the active trace file is by default limited to 20 MB. When
468 Troubleshooting and Support for IBM MQ
this limit is reached, the file is renamed and archived. Archived files have names of the format
xms_tracePID_YY.MM.DD_HH.MM.SS.log.
By default, the number of trace files that are retained is four, that is, one active file and three archived
files. These four files are used as a rolling buffer until the application stops, with the oldest file being
removed and replaced by the newest file. You can change the number of trace files by specifying a
different number in the application configuration file. However, there must be at least two files (one active
file and one archived file).
Two trace file formats are available:
• Basic format trace files are human readable, in a WebSphere Application Server format. This format is
the default trace file format. The basic format is not compatible with trace analyzer tools.
• Advanced format trace files are compatible with trace analyzer tools. You must specify that you want to
produce trace files in advanced format in the application configuration file.
Trace entries contain the following information:
• The date and time that the trace was logged
• The class name
• The trace type
• The trace message
The following example shows an extract from some trace:
[09/11/2005 14:33:46:914276] 00000004 IBM.XMS.Comms.IoRequest > Allocate Entry
[09/11/2005 14:33:46:914276] 00000004 IBM.XMS.Comms.IoRequest > Initialize Entry
[09/11/2005 14:33:46:914276] 00000004 IBM.XMS.Comms.IoRequest  for Entry
Table 33 on page 471 describes the parameter settings in more detail.
470 Troubleshooting and Support for IBM MQ
Table 33. Application configuration file trace parameter settings
Parameter Description
traceSpecification=ComponentName=type= ComponentName is the name of the class that you want
state to trace. You can use a * wildcard character in this name.
For example, *=all=enabled specifies that you want to
trace all classes, and IBM.XMS.impl.*=all=enabled
specifies that you require API trace only.
type can be any of the following trace types:
– all
– debug
– event
– EntryExit
state can be either enabled or disabled.
You can string multiple trace elements together by using
a ':' (colon) delimiter.
traceFilePath="filename" If you do not specify a traceFilePath, or if the
traceFilePath is present but contains an empty string, the
trace file is placed in the current directory. To store the
trace file in a named directory, specify the directory name
in the traceFilePath, for example:
traceFilePath="c:\somepath"
traceFileSize="size" The maximum allowed size of the trace file. When
a file reaches this size, it is archived and renamed.
The default maximum is 20 MB, which is specified as
traceFileSize="20000000".
traceFileNumber="number" The number of trace files that are to be retained. The
default is 4 (one active file and 3 archive files). The
minimum number allowed is 2.
traceFormat="format" The default trace format is basic. Trace files are produced
in this format if you specify traceFormat="basic", or
if you do not specify a traceFormat, or if the traceFormat
is present but contains an empty string.
If you require trace that is compatible with trace analyzer
tools, you must specify traceFormat="advanced".
The trace settings in the application configuration file are dynamic, and are reread every time the file is
saved or replaced. If errors are found in the file after it is edited, the trace file settings revert to their
default values.
Related tasks
Tracing XMS .NET applications using XMS environment variables
You can turn on trace using XMS environment variables such as XMS_TRACE_ON.
Tracing XMS .NET applications with mqclient.ini
IBM MQ troubleshooting and support 471
From IBM MQ 9.3.3, you can use the mqclient.ini file to enable traces for the XMS .NET client
libraries.
Tracing XMS .NET applications using XMS environment variables
You can turn on trace using XMS environment variables such as XMS_TRACE_ON.
About this task
If you are using IBM MQ classes for XMS .NET Framework, you can turn on trace using XMS environment
variables an alternative to using an application configuration file. The environment variables are only used
if there is no trace specification in the application configuration file.
If you are using IBM MQ classes for XMS .NET (.NET Standard and .NET 6 libraries), you must configure
trace from the XMS environment variables. Using an application configuration file is not supported for IBM
MQ classes for XMS .NET (.NET Standard and .NET 6 libraries).
Procedure
• To configure trace for an XMS .NET application, set the following environment variables before running
the application:
Table 34. Environment variable settings for .NET trace
Environment variables Default Settings Meaning
XMS_TRACE_ON Not applicable Not applicable: the value If XMS_TRACE_ON is set,
of this variable is ignored all trace is enabled by
default.
XMS_TRACE_FILE_PATH Current working directory /dirpath/ The directory path that
trace and FFDC records
are written to.
XMS creates FFDC and
trace files in the
current working directory,
unless you specify an
alternative location. You
can specify an alternative
location by setting the
environment variable
XMS_TRACE_FILE_PATH
to the fully qualified path
name of the directory
where you want XMS
to create the FFDC and
trace files. You must
set this environment
variable before you start
the application that you
want to trace. You must
make sure that the user
identifier under which
the application runs has
the authority to write to
the directory where XMS
creates the FFDC and
trace files.
472 Troubleshooting and Support for IBM MQ
Table 34. Environment variable settings for .NET trace (continued)
Environment variables Default Settings Meaning
XMS_TRACE_FORMAT BASIC BASIC, ADVANCED Specifies the required
trace format, which can
be either BASIC or
ADVANCED. The default
format is BASIC. The
ADVANCED format is
compatible with trace
analyzer tools.
XMS_TRACE_SPECIFICAT Not applicable See “Tracing XMS .NET Overrides the trace
ION applications using an specification, which
application configuration follows the format
file” on page 469 (IBM specified in “Tracing
MQ classes for XMS .NET XMS .NET applications
Framework only) using an application
configuration file” on page
469 (IBM MQ classes
for XMS .NET Framework
only).
Related tasks
Tracing XMS .NET applications using an application configuration file
If you are using IBM MQ classes for XMS .NET Framework, you can configure trace for XMS .NET
applications with an application configuration file. The trace section of this file includes parameters that
define what is to be traced, the trace file location and maximum allowed size, the number of trace files
used, and the trace file format.
Tracing XMS .NET applications with mqclient.ini
From IBM MQ 9.3.3, you can use the mqclient.ini file to enable traces for the XMS .NET client
libraries.
Tracing XMS .NET applications with mqclient.ini
From IBM MQ 9.3.3, you can use the mqclient.ini file to enable traces for the XMS .NET client
libraries.
About this task
From IBM MQ 9.3.3, the mqclient.ini file includes a Trace stanza. To enable trace, you must set the
appropriate properties of the Trace stanza. If a property is set to an invalid value, then the properties are
ignored.
You can also enable and disable tracing dynamically. When the application is running, if the
mqclient.ini file is modified, created, or deleted, the XMS .NET client reads the properties of the
trace section again and then enables or disables the trace, so that restart of the application is not needed.
Note: There are several different ways to enable trace.
For the IBM MQ .NETclient libraries built against .NET Framework, the order of precedence is as follows:
1.App.Config
2.Environment variable
3.mqclient.ini
For the IBM MQ .NET client libraries built against .NET Standard and .NET 6, the order of precedence is as
follows:
IBM MQ troubleshooting and support 473
1.Environment variable
2.mqclient.ini
Procedure
• To start trace, specify the following attributes of the Trace stanza:
a)Set XMSDotnetTraceLevel to the value corresponding to the level of tracing you want.
If you want to start tracing with an advanced format, set this attribute to 2. If you want to start
tracing with a basic format, set the attribute to 1.
b)Set XMSDotnetTraceFilePath to the file path of the folder where you want the trace files to be
created.
For example: XMSDotnetTraceFilePath="c:\somepath". The current directory of the
application is used if the path is left blank or if the XMSDotnetTraceFilePath attribute is not
defined.
c)Specify the trace elements that you want to include with XMSDotnetTraceSpecification.
You can string multiple trace elements together by using a ':' (colon) delimiter.
– ComponentName is the name of the class that you want to trace. You can use a * wildcard
character in this name. For example, *=all=enabled specifies that you want to trace all
classes, and IBM.XMS.impl.*=all=enabled specifies that you require API trace only.
– type can be any of the following trace types: all, debug, event, EntryExit.
– state can be either enabled or disabled.
d)Set the trace file size with XMSDotnetTraceFileSize.
The default maximum is 20 MB, which is specified as XMSDotnetTraceFileSize=20.
e)Set the number of trace files that are to be retained with XMSDotnetTraceFileNumber.
The default is 4 (one active file and three archive files). The minimum number allowed is 2.
• To stop trace, set XMSDotnetTraceLevel to 0.
This is the default value for this attribute.
Related concepts
Trace stanza of the client configuration file
Related tasks
Tracing XMS .NET applications using an application configuration file
If you are using IBM MQ classes for XMS .NET Framework, you can configure trace for XMS .NET
applications with an application configuration file. The trace section of this file includes parameters that
define what is to be traced, the trace file location and maximum allowed size, the number of trace files
used, and the trace file format.
Tracing XMS .NET applications using XMS environment variables
You can turn on trace using XMS environment variables such as XMS_TRACE_ON.
Enabling dynamic tracing of LDAP client library code
From IBM MQ 9.1.0 Fix Pack 4 and IBM MQ 9.1.4, it is possible to switch LDAP client trace on and off
without also stopping or starting the queue manager.
About this task
From IBM MQ 9.1.0 Fix Pack 4 and IBM MQ 9.1.4, you can switch LDAP client trace on with the strmqtrc
command and off with the endmqtrc command without needing to stop or start the queue manager. To
enable this behavior, it is also necessary to set an environment variable AMQ_LDAP_TRACE to a non-null
value.
When the AMQ_LDAP_TRACE is set to a non-null value, and the LDAP functionality is used, some queue
manager processes create zero length files under /var/mqm/trace. When the trace is then switched
474 Troubleshooting and Support for IBM MQ
on using the strmqtrc command, some trace information is written to these files. Later, when trace is
switched off with the endmqtrc command, trace information ceases to be written to the files, but handles
to the files remain open until the queue manager ends.
On UNIX platforms, filesystem space cannot be released completely simply by unlinking
these files with the rm command. This is a side-effect from the fact that the handles remain open.
Therefore, a queue manager end should be performed, whenever disk space in /var/mqm/trace needs
to be released.
Procedure
• Set the environment variable AMQ_LDAP_TRACE to a non-null value.
• Use the strmqtrc command to switch the trace on:
strmqtrc -m QMNAME -t servicedata
• Use the endmqtrc command to switch the trace off.
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302