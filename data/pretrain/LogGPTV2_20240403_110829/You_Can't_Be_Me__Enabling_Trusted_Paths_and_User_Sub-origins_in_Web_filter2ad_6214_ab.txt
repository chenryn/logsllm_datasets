√
√
WebWallet [29]
Secure UI Toolkit [16]
Clickjacking Defenses [32]
Cryptons [9]
DOMinator [33]
Origin Bound Certiﬁcates [22]
1
I
4
IV
√ √ √ √
1
Display Channel
2
Input Channel
3
Session Data Channel
4
Network Request Channel
2.3 Threat Model and Scope
We now brieﬂy discuss the in-scope threats of our work. We consider the attacker to be
a standard web attacker [35] that is able to exploit script injection vulnerabilities in a
web application and browser’s add-ons running as JavaScript (not binary plugins) [36].
All attacker payloads are client-side scripts, and we assume an uncompromised web
server and web browser, as well as the underlying OS. We assume that the user is be-
nign, i.e., we do not aim to prevent an attack where an authenticated user attacks the
web applications within its own user authority. An HTTP parameter tampering attack,
wherein Alice might attack Elgg for proﬁt (e.g., randomly add users to increase number
of friends), is such an example [37]. We also assume the security of user passwords,
i.e., the users do not disclose their passwords nor use the same password for different
websites. Lastly, although our approach is applicable to non-JavaScript-based attacks
in concept, our discussion here precludes malicious Flash scripts or Java Applets em-
bedded in web pages.
3 USERPATH Design and Security Properties
To protect user-owned resources in the web application from PISE attacks, we combine
various techniques to protect the channels exposed to attackers (Section 3.2). Our solu-
tion requires minor changes to today’s web browsers and web applications, and is easy
to use for end users.
156
E. Budianto et al.
3.1 Challenges and Key Ideas
Protection for sensitive user-owned resource should cover the entire life time of web
sessions, starting from user authentication to the teardown of the web session. We ex-
plain the challenges in doing so below.
(cid:36)(cid:79)(cid:76)(cid:70)(cid:72)
(cid:50)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:3)(cid:50)
(cid:58)(cid:72)(cid:69)(cid:3)(cid:51)(cid:68)(cid:74)(cid:72)(cid:3)(cid:44)(cid:81)(cid:86)(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)
(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)
(cid:54)(cid:40)(cid:38)(cid:56)(cid:53)(cid:40)
(cid:56)(cid:44)
(cid:11)(cid:22)(cid:12)
(cid:11)(cid:21)(cid:12)
(cid:11)(cid:21)(cid:12)
(cid:56)(cid:41)(cid:53)(cid:36)(cid:48)(cid:40)(cid:3)(cid:44)(cid:81)(cid:86)(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)
(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:82)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:3)(cid:50)(cid:16)(cid:36)(cid:79)(cid:76)(cid:70)(cid:72)
(cid:37)(cid:53)(cid:50)(cid:58)(cid:54)(cid:40)(cid:53)
(cid:51)(cid:36)(cid:46)(cid:40)
(cid:49)(cid:40)(cid:55)(cid:58)(cid:50)(cid:53)(cid:46)
(cid:11)(cid:20)(cid:12)
(cid:11)
(cid:37)(cid:53)(cid:50)(cid:58)(cid:54)(cid:40)(cid:53)(cid:3)(cid:46)(cid:40)(cid:53)(cid:49)(cid:40)(cid:47)
(cid:38)(cid:79)(cid:76)(cid:72)(cid:81)(cid:87)(cid:16)(cid:86)(cid:76)(cid:71)(cid:72)
(cid:37)(cid:68)(cid:70)(cid:78)(cid:72)(cid:81)(cid:71)(cid:3)(cid:86)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)(cid:3)
(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:82)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:3)(cid:50)
(cid:54)(cid:40)(cid:53)(cid:57)(cid:40)(cid:53)(cid:16)(cid:54)(cid:44)(cid:39)(cid:40)
(cid:51)(cid:36)(cid:46)(cid:40)(cid:3)(cid:48)(cid:50)(cid:39)(cid:56)(cid:47)(cid:40)
(cid:54)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)(cid:16)(cid:86)(cid:76)(cid:71)(cid:72)
Fig. 2. Overview of USERPATH. The unshaded boxes are the contributions of our paper. A
USERPATH-enabled platform has (1) server- and client-side PAKE modules to carry out PAKE
protocol, (2) a web primitive called UFrame, and (3) secure UI elements.
Protecting User Credentials. Malicious scripts can exploit display channels to launch
in-application phishing attacks and steal the user’s password. Note that browser’s secu-
rity indicators (e.g., SSL lock icon, URL bar) do not help users recognize such attacks.
Those security indicators operate under the assumption that a web session in an origin is
trusted. Such an assumption becomes invalid with our threat model, as the attacks take
place within the same session of the victim’s origin. To achieve a secure authentication,
our idea is to allow a web browser to render secure login elements on the web applica-
tions (Section 4). Such elements are special UI controls rendered by the browser, which
can be easily veriﬁed by the user and cannot be tampered with by untrusted JavaScript
code. Once users enter their credentials, leaking these credentials to an untrusted envi-
ronment (a script or server) is not desirable. To address this critical problem, we employ
a PAKE protocol (Figure 2 Step 1) that enables the web browser to authenticate a user
to a web origin without directly exchanging credential information with the origin O.
Establishing Notion of User. After the successful authentication, another challenge is
to securely establish a notion of user inside a web session. We term this step as secure
delegation (Section 4), in which the browser creates a user sub-authority in origin O.
This step constitutes a form of authority delegation on the web. To achieve this goal, the
key idea is to conceptually split the web session into two partitions, one web session
running under the authority of the web application origin O, the other one running
under a user sub-origin OAlice. USERPATH ties all sensitive resources belonging to user
Alice under the sub-origin OAlice, which represents the explicit notion of Alice’s sub-
authority3 (Figure 2 Step 2). Note that code running in OAlice represents the authority
of Alice in O, and is more privileged than the origin O’s code.
End-to-End Trusted Path. Fully protecting the four vulnerable channels is challenging
with any single mechanism. Instead, we safeguard each vulnerable channel by provid-
ing the corresponding secure channel: a secure channel between the UFrame and the
3 This secure delegation process is akin to executing an su - alice command in a UNIX-
like system.
Enabling Trusted Paths and User Sub-origins in Web Browsers
157
backend server, a secure channel between the UFrame and the browser kernel compo-
nents, a secure visual channel, and a secure input channel – the latter two channels are
established with the web application user (Figure 2 Step 3). This constitutes an end-to-
end trusted path between the user and the server, as further discussed in Section 3.2.
3.2 USERPATH Design
Protecting User Credentials. To initiate the authentication process, USERPATH lever-
ages the standard authentication mechanism using username and password, which can
also be extended for SSO-based authentication (see Section 3.4). The process starts with
a user Alice visiting a web page with the origin O. Alice interacts with the application
under the authority of its web origin O (Figure 5 Step A). The web application invokes
a DOM API to draw a special “credential box” (see Figure 3) for Alice to enter her
password. The origin O decides the placement and location of the credential box on the
web page and Alice needs nothing more than her usual password for this step. Unlike
prevailing password boxes where the input is directly accessible to the web page, the
data entered by Alice in the credential box will stay in the memory of the browser and
is not accessible by the application code. Therefore, it prevents attacker’s scripts from
stealing the password. The url property of the credential box element identiﬁes the
server-side script that handles user login.
Client
Initial
Setup
Server
Initial
Setup
Password P
Derive
Session Key
Ks
Derive
Session Key
Ks
Veriﬁer v
(cid:56)(cid:44)
(cid:11)(cid:21)(cid:12)
(cid:51)(cid:36)(cid:46)(cid:40)
Compute
Proof M
Verify
Proof M
Deny
(cid:11)(cid:22)(cid:12)
(cid:56)(cid:41)(cid:85)(cid:68)(cid:80)(cid:72)(cid:16)(cid:76)(cid:86)(cid:82)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:68)(cid:85)(cid:72)(cid:68)
(cid:51)(cid:36)(cid:46)(cid:40)
(cid:11)(cid:20)(cid:12)
Success,
use Ks
Fig. 3. A web browser displaying credential
boxes from example.com.
Fig. 4. The PAKE Protocol. A session
key S is derived and the server-side
PAKE veriﬁes the message M obtained
from the client.
After Alice entered her credential information, the browser then executes a PAKE
protocol between the browser and the backend server using Alice’s password as a se-
cret, without directly exchanging Alice’s password with the backend server (Figure 5
Step B). We illustrate the high-level overview of a PAKE protocol in Figure 4. In this
protocol, the server O is assumed to have gotten a verifer v which was derived from the
Alice’s predeﬁned password P . The veriﬁer v is not a password, and cannot be used
by Alice for authentication. After Alice enters password P , the client-side PAKE sends
Alice’s user information and, based on the user information, the server-side PAKE de-
termines the corresponding veriﬁer v. Client-side PAKE (based on user’ password) and
server-side PAKE (based on veriﬁer v) simultaneously derive a session key Ks, as well
as an evidence value M (for client-side PAKE) and M(cid:2)
(for server-side PAKE), accord-
ing to a set of computations deﬁned in [38]. The message M is later sent by the client to
E. Budianto et al.
158
and veriﬁed by the server-side PAKE, and vice versa for the message M(cid:2)
. In case of a
successful authentication, the common key Ks will be used as a session key for further
communications between both parties.
To allow users to distinguish the credential input element drawn by USERPATH from
any other similar-looking elements rendered by malicious application code, the browser
displays a rectangle of color M in its chrome area and updates the color M simultane-
ously around the credential box4. The user recognizes the authentic credential elements
by a visual check. Therefore, this approach defeats any phishing attempts from mali-
cious scripts.
Establishing Notion of User. After authentication is carried out using the PAKE proto-
col, USERPATH initiates the secure delegation to establish a user sub-authority OAlice.
USERPATH creates a UFrame to run Alice’s privileged code separated from the rest of
the application code within a web origin O. Unlike the temporary origin (e.g., sand-
boxed iframe [18]) which runs in a distinct privileged environment, the UFrame runs
within the user Alice’s authority with a higher privilege than any other parts in the web
page. As a privileged entity, the UFrame has one-way access to (1) the main page’s
DOM via special DOM APIs including access to secure UI elements; (2) a direct se-
cure callback channel to the browser; and (3) a dedicated XMLHttpRequest object
to make HTTP requests to the backend server. USERPATH privilege-separates user-
owned data from being accessed by the less-privileged application code running in O’s
authority, as well as separates all code that processes user events and the associated
user-owned data.
Fig. 5. Sequence of operations in a USERPATH-enabled session
So far, USERPATH ensures that the sensitive data in UFrame-protected code is not
accessible to the less-privileged code (e.g., malicious JS code). But, how to make sure
that the UFrame code itself is not initialized with the attacker’s payload when it is
fetched from the backend server? The UFrame code from the server can be hijacked
by malicious scripts using a variety of ways, such as DOM clobbering [39] or pro-
totype hijacking of XMLHttpRequest object [40]. This lets an attacker create fake
4 The browser dynamically decides a foreground text color in the credential input element that
has high contrast with the current background color M and randomizes it every t=5 seconds.
To quantitatively measure the entropy, we set M to be randomly chosen from a palette of RGB
code colors. This gives a total entropy of 24 bits.
Enabling Trusted Paths and User Sub-origins in Web Browsers
159
UFrames or tamper with the original content of a UFrame. In order to securely dele-
gate user-owned resource to the UFrame, the backend server signs the code with Ks
and passes the code for the UFrame to the browser at the initialization step. Once the
code is received by the browser, it checks the integrity and authenticity of the code
with respect to Ks. Subsequently, the browser bootstraps the UFrame and provides a
dedicated XMLHttpRequest channel to securely communicate back to the server’s
origin. At this point, USERPATH has established a secure UFrame ↔ Server channel.
Note that we consider the server to be uncompromised in our threat model. If a web
application developer wishes to isolate users’ data better on the server side, several pre-
vious solutions such as CLAMP [10] and DIESEL [11] can be used in conjunction with
USERPATH’s abstractions.
Once a UFrame is initialized and executed during the web session, user-owned re-
sources (i.e., JavaScript heap objects of the UFrame) are isolated from the less-privileged
code. These sensitive user-owned resources include credit card information, sensitive
images, secret key information derived from the authentication process, and other sen-
sitive data tied to a user. To ensure compatibility with the existing web application, the
users should be able to interact with (e.g., view or input into) these resources. For ex-
ample, bank account number is a sensitive user-owned resource and this needs to be
displayed or entered by Alice when she checks her transaction history. USERPATH in-
troduces a set of secure DOM APIs (Table 2) to create secure input elements (e.g.,
textboxes, textareas) and secure display elements (e.g., images and styled-texts). Secure
elements are akin to standard HTML input and display elements, except that these ele-
ments are not accessible to scripts outside the UFrame on the web origin O. For instance,
only event handlers (e.g., keyboard inputs and mouse clicks) inside the UFrame code can
access the secure display and input elements, and these handlers cannot be overridden by
code outside the UFrame. Therefore, USERPATH establishes a secure input and visual
channel to safeguard sensitive display and input elements.
End-to-End Trusted Path. Finally, a UFrame needs to communicate back to the server.
The main challenge is that the server needs to disambiguate HTTP requests generated
by the UFrame in response to the authentic user interaction, as opposed to fake requests
generated by malicious scripts via PISE attacks. USERPATH handles this issue by cre-
ating a dedicated network channel for the UFrame code. Inside the initialized UFrame
code, the server embeds a set of nonces S called user interaction token set (Figure 5
Step C) that can be used to generate resource access HTTP requests from client side.
These tokens can only be attached by the browser kernel as a custom HTTP header
X-UFRAME when the UFrame-dedicated XMLHttpRequest is invoked (Step D).
Teardown. As the user Alice logs out of O, the server invalidates the session key Ks,
and sets a custom HTTP header X-USERPATH:Session-destroy in HTTP re-
sponse for the log out request (Figure 5 Step E). After getting this response, the browser
destroys all user interaction tokens for the session and the session key Ks. To allow ses-
sion reconnection, similar to cookies, the browser caches the user interaction tokens and
Ks until the user logs out. The server then redirects the request to the login page if the
key and tokens expire.
160
E. Budianto et al.
Downcall API
Table 2. Secure DOM APIs for UFrame
Description
Upcall API
Description
createSecElement Create a secure UI element
storeSecretKey
Store the key Ks that is derived from
PAKE protocol
getSecElementById
Get the secure UI element’s
object by ID
updateUFrameCont Update the UFrame code or data content
setSecElmAttr
Set the property of an object
with the corresponding value
createContext
getSecElmAttrVal
deletePAKESesKey
Get the property’s value of an
object
Delete the session key Ks from
the browser kernel
removeSecretKey
removeUIToken
Create a UFrame context that runs with
user privilege. It lets the UFrame access
privileged APIs
Remove the secret key Ks during
teardown process
Remove the interaction token T during
teardown process
3.3 Security Properties: Putting It Together
USERPATH enforces the following security semantics, which ensures resilience against
PISE attacks.
– P0: Safe Mutual Authentication & Ks Establishment. Mutual authentication be-
tween user Alice and the server is required for web servers to securely delegate user
Alice’s authority OAlice to client-side code within its web origin’s authority O. This
delegation is bootstrapped by Alice’s user name and password. The secure delega-
tion process must ensure that credential information does not leak outside Alice’s
authority, such as to attacker-controlled domains. After successful authentication, a
session key Ks is derived. The key Ks must remain unforgeable, unguessable, and
unique during the sessions.
– P1: Secure Delegation. A UFrame code that is passed from the backend server
needs to be signed by Ks that is derived from mutual authentication between user
and web server. Once web browser receives the content of the UFrame, it has to
check the authenticity of the code with respect to Ks.