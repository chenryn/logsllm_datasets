### Bypass CSRF Referer Header Check {#c09.xhtml#h2-501546c09-0008}
What if your target site isn't using CSRF tokens but checking the
referer header instead? The server might verify that the referer header
sent with the state-changing request is a part of the website's
allowlisted domains. If it is, the site would execute the request.
Otherwise, it would deem the request to be fake and reject it. What can
you do to bypass this type of protection?
如果目标站点没有使用CSRF令牌而是检查引用头呢？服务器可能会验证随状态更改请求发送的引用头是否是网站允许列出的域的一部分。如果是，该站点将执行请求。否则，它将认为该请求是伪造的并拒绝它。你该怎么绕过这种保护？
First, you can try to remove the referer header. Like sending a blank
token, sometimes all you need to do to bypass a referer check is to not
send a referer at all. To remove the referer header, add a
`           ` tag to the page hosting your request form:
首先，你可以尝试移除Referer头。就像发送一个空令牌一样，有时你只需要不发送Referer就可以绕过Referer检查。要移除Referer头，将一个\标签添加到托管请求表单的页面即可：
This particular `           ` tag tells the browser to not include
a referer header in the resulting HTTP request.
这个特定的\标签告诉浏览器不要在生成的HTTP请求中包含引荐头。
The faulty application logic might look like this:
错误的应用逻辑可能是这样的：
    def validate_referer():
      if (request.referer in allowlisted_domains):
        pass
      else:
        throw_error("Referer incorrect. Request rejected.")
    [...]
    def process_state_changing_action():
      if request.referer:
        validate_referer()
      execute_action()
Since the application validates the referer header only if it exists,
you've successfully bypassed the website's CSRF protection just by
making the victim's browser omit the referer header!
由于该应用程序仅在存在 referer header
时进行验证，因此只需使受害者的浏览器省略 referer
header，您就成功地绕过了网站的 CSRF 保护！
You can also try to bypass the logic check used to validate the referer
URL. Let's say the application looks for the string
`      "example.com"     ` in the referer URL, and if the referer URL
contains that string, the application treats the request as legitimate.
Otherwise, it rejects the request:
您还可以尝试绕过用于验证引用URL的逻辑检查。假设应用程序在引用URL中查找字符串\"example.com\"，如果引用URL包含该字符串，则应用程序将请求视为合法。否则，它将拒绝该请求。
    def validate_referer():
      if request.referer:
        if ("example.com" in request.referer):
          pass
      else:
        throw_error("Referer incorrect. Request rejected.")
    [...]
    def process_state_changing_action():
      validate_referer()
      execute_action()
In this case, you can bypass the referer check by placing the victim
domain name in the referer URL as a subdomain. You can achieve this by
creating a subdomain named after the victim's domain, and then hosting
the malicious HTML on that subdomain. Your request would look like this:
在这种情况下，您可以通过将受害者的域名作为子域名放置在 referer URL
中来绕过 referer 检查。
您可以通过创建以受害者域名命名的子域名，然后在该子域名上托管恶意 HTML
来实现这一点。 您的请求将如下所示：
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    Referer: example.com.attacker.com
    (POST request body)
    new_password=abc123
You can also try placing the victim domain name in the referer URL as a
pathname. You can do so by creating a file with the name of the target's
domain and hosting your HTML page there:
你也可以将受害者的域名作为路径名放置在 referer URL
中。你可以通过创建一个以目标域名命名的文件，并在那里托管你的 HTML
页面来实现：
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    Referer: attacker.com/example.com
    (POST request body)
    new_password=abc123
After you've uploaded your HTML page at the correct location, load that
page and see if the state-changing action was executed.
上传正确位置的HTML页面之后，加载该页面并查看是否执行了状态更改操作。
### Bypass CSRF Protection by Using XSS {#c09.xhtml#h2-501546c09-0009}
In addition, as I mentioned in [ Chapter 6 ]{.xref
itemid="xref_target_Chapter 6"} , any XSS vulnerability will defeat CSRF
protections, because XSS will allow attackers to steal the legitimate
CSRF token and then craft forged requests by using
`      XMLHttpRequest     ` . Often, attackers will find XSS as the
starting point to launch CSRFs to take over admin accounts.
此外，如我在第六章中所提到的，任何XSS漏洞都将破坏CSRF保护，因为XSS将允许攻击者窃取合法的CSRF令牌，然后通过使用XMLHttpRequest构造伪造请求。经常，攻击者会将XSS作为启动CSRF攻击以接管管理员帐户的起点。
## Escalating the Attack {#c09.xhtml#h1-501546c09-0005}
After you've found a CSRF vulnerability, don't just report it right
away! Here are a few ways you can escalate CSRFs into severe security
issues to maximize the impact of your report. Often, you need to use a
combination of CSRF and other minor design flaws to discover these.
在找到 CSRF 漏洞后，不要立即报告！以下是一些方法，可以将 CSRF
升级为严重的安全问题，以最大化报告的影响。通常，您需要结合 CSRF
和其他轻微的设计缺陷才能发现这些问题。
### Leak User Information by Using CSRF {#c09.xhtml#h2-501546c09-0010}
CSRF can sometimes cause information leaks as a side effect.
Applications often send or disclose information according to user
preferences. If you can change these settings via CSRF, you can pave the
way for sensitive information disclosures.
CSRF有时会导致信息泄漏作为副作用。
应用程序通常根据用户偏好发送或披露信息。
如果您可以通过CSRF更改这些设置，您就可以为敏感信息披露铺平道路。
For example, let's say the *example.com* web application sends monthly
billing emails to a user-designated email address. These emails contain
the users' billing information, including street addresses, phone
numbers, and credit card information. The email address to which these
billing emails are sent can be changed via the following request:
例如，假设example.com
Web应用程序向用户指定的电子邮件地址发送每月账单电子邮件。这些电子邮件包含用户的账单信息，包括街道地址、电话号码和信用卡信息。通过以下请求可以更改发送这些账单电子邮件的电子邮件地址：
    POST /change_billing_email
    Host: example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    email=NEW_EMAIL&csrf_token=871caef0757a4ac9691aceb9aad8b65b
Unfortunately, the CSRF validation on this endpoint is broken, and the
server accepts a blank token. The request would succeed even if the
`      csrf_token     ` field is left empty:
不幸的是，此端点上的CSRF验证已损坏，服务器接受空令牌。即使csrf_token字段为空，请求也会成功：
    POST /change_billing_email
    Host: example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    email=NEW_EMAIL&csrf_token=
[ ]{#c09.xhtml#Page_171 .pagebreak title="171"} An attacker could make a
victim user send this request via CSRF to change the destination of
their billing emails:
攻击者可能会通过跨站请求伪造使受害用户发送该请求，从而更改其帐单电子邮件的目的地。
    POST /change_billing_email
    Host: example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    email=ATTACKER_EMAIL&csrf_token=
All future billing emails would then be sent to the attacker's email
address until the victim notices the unauthorized change. Once the
billing email is sent to the attacker's email address, the attacker can
collect sensitive information, such as street addresses, phone numbers,
and credit card information associated with the account.
未来的所有计费电子邮件将发送到攻击者的电子邮件地址，直到受害者注意到未经授权的更改。一旦计费电子邮件发送到攻击者的电子邮件地址，攻击者可以收集与账户相关的敏感信息，如街道地址、电话号码和信用卡信息。
### Create Stored Self-XSS by Using CSRF {#c09.xhtml#h2-501546c09-0011}
Remember from [ Chapter 6 ]{.xref itemid="xref_target_Chapter 6"} that
self-XSS is a kind of XSS attack that requires the victim to input the
XSS payload. These vulnerabilities are almost always considered a
nonissue because they're too difficult to exploit; doing so requires a
lot of action from the victim's part, and thus you're unlikely to
succeed. However, when you combine CSRF with self-XSS, you can often
turn the self-XSS into stored XSS.
请记得第6章中提到的自XSS是一种需要受害者输入XSS载荷的XSS攻击。这些漏洞几乎总被认为是一个无需担心的问题，因为它们太难利用了；要这样做需要受害者采取很多行动，因此你很少能够成功。然而，当你将CSRF与自XSS结合时，你经常可以将自XSS转化为存储XSS。
For example, let's say that *example.com* 's financial subdomain,
*finance.example.com* , gives users the ability to create nicknames for
each of their linked bank accounts. The account nickname field is
vulnerable to self-XSS: there is no sanitization, validation, or
escaping for user input on the field. However, only the user can edit
and see this field, so there is no way for an attacker to trigger the
XSS directly.
比如说，假设example.com的财务子域名finance.example.com让用户为他们链接的每个银行账户创建昵称。账户昵称字段容易受到自我XSS:该字段上没有对用户输入进行消毒、验证或转义。然而，只有用户能够编辑和查看这个字段，因此攻击者无法直接触发XSS。
However, the endpoint used to change the account nicknames is vulnerable
to CSRF. The application doesn't properly validate the existence of the
CSRF token, so simply omitting the token parameter in the request will
bypass CSRF protection. For example, this request would fail, because it
contains the wrong token:
然而，用于更改帐户昵称的端点易受 CSRF 攻击。该应用程序未正确验证 CSRF
令牌的存在，因此在请求中省略令牌参数将绕过 CSRF
保护。例如，此请求将失败，因为它包含错误的令牌：
    POST /change_account_nickname
    Host: finance.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    account=0
    &nickname=""
    &csrf_token=WRONG_TOKEN
But this request, with no token at all, would succeed:
但是没有任何令牌的这个请求仍然会成功。
    POST /change_account_nickname
    Host: finance.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE;
    (POST request body)
    account=0
    &nickname=""
This request will change the user's account nickname and store the XSS
payload there. The next time a user logs into the account and views
their dashboard, they'll trigger the XSS.
这个请求将更改用户帐户的昵称，并将XSS负载存储在那里。下次用户登录并查看其仪表板时，就会触发XSS。
### Take Over User Accounts by Using CSRF {#c09.xhtml#h2-501546c09-0012}
Sometimes CSRF can even lead to account takeover. These situations
aren't uncommon, either; account takeover issues occur when a CSRF