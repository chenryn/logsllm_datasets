title:IRQDebloat: Reducing Driver Attack Surface in Embedded Devices
author:Zhenghao Hu and
Brendan Dolan-Gavitt
5
9
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
IRQDebloat: Reducing Driver Attack Surface in Embedded Devices
Zhenghao Hu
New York University
PI:EMAIL
Brendan Dolan-Gavitt
New York University
PI:EMAIL
Abstract—Embedded and IoT devices often come with a wide
range of hardware functionality, but any particular end user
may only use some small subset of these features. However,
even unused hardware features are accompanied by potentially
buggy driver code, which increases the attack surface of the
device. In this paper, we introduce IRQDebloat, a system for dis-
abling unwanted hardware features through automated ﬁrmware
rewriting. Building on the insight that external inputs to the
system are typically delivered through interrupt requests (IRQs),
IRQDebloat systematically explores the interrupt handling code
in the target ﬁrmware, identiﬁes the handler function for each
peripheral, and ﬁnally rewrites target ﬁrmware to disable the
handlers that correspond to undesired hardware features. In
our experiments we demonstrate IRQDebloat’s effectiveness and
generality by identifying IRQ handlers across four different
operating systems (Linux, FreeBSD, VxWorks, and RiscOS)
and seven different embedded platforms, and disabling selected
peripherals on real-world hardware (a Raspberry Pi and a Valve
Steam Link). On the Steam Link, we survey the attack surface
and ﬁnd that disabling selected peripherals could block up to 44
CVEs found in the Linux kernel over the past ﬁve years.
I. INTRODUCTION
Many embedded and IoT devices offer a wide range of
functionality to support the needs of a diverse user population.
However,
this breadth of features comes at a price: each
feature requires additional software support, and creates more
opportunities for vulnerabilities. For hardware features, these
vulnerabilities often lurk in kernel-mode driver code, where
bugs can lead to complete compromise of the system.
For example, Cisco Meraki WiFi access points integrate
a Bluetooth Low Energy (BLE) beacon to provide services
such as indoor localization [1]. Although many customers
may not need or desire these features, the software needed
to support it is enabled in the ﬁrmware and remains a part of
the device’s exposed attack surface. Indeed, researchers from
Armis discovered multiple remote code execution vulnerabil-
ities (collectively dubbed “BleedingBit”) in the BLE stack of
these devices [42].
Examples like these demonstrate the need for debloating:
the automated removal of unwanted features in software.
Although debloating has been previously studied in the context
of desktop [38], server [31], mobile [47], [27], and web
applications [8],
less attention has been paid to disabling
potentially vulnerable hardware features in embedded devices.
In this paper, we demonstrate an approach to debloating
that allows users to selectively disable unwanted hardware
features by automatically rewriting their ﬁrmware. Our key
insight is that the the vulnerable attack surface from driver
code can, in most cases, only be reached when input from the
outside world enters the system via a hardware interrupt. Thus,
by enumerating the interrupt handlers on a system, matching
them to actual hardware functionality, and then rewriting the
ﬁrmware to disable code that handles interrupts from unneeded
devices, we can effectively close off the driver attack surface
from the outside world.
We envision that this capability will be most useful to tech-
nically sophisticated users who wish to deploy embedded de-
vices without such unwanted hardware functionality that may
render them less secure. A classic (though perhaps apocryphal)
example is the anecdote that some secure government facilities
may have ﬁlled the USB ports of their computers with epoxy
to prevent the use of USB [24]; blocking hardware features
through ﬁrmware rewriting is similar in spirit to this technique,
but requires less manual effort (and is more reversible). More
prosaically, a large company deploying a ﬂeet of wireless
routers such as the Meraki access points mentioned above
might wish to disable BLE functionality entirely. And ﬁnally,
hobbyist users may wish to keep their embedded devices
running past their end-of-life date by disabling peripherals
whose drivers have unﬁxed vulnerabilities.
To demonstrate this idea, we have built a prototype ﬁrmware
debloating system, IRQDebloat. Starting from a snapshot of
the CPU and memory state from a real embedded device,
IRQDebloat migrates this snapshot into a software emula-
tor and collects execution traces by systematically exploring
different paths through a top-level interrupt handler. Once
these traces are collected, we use differential slicing [29] to
precisely identify the handlers available for each peripheral in
the system. Finally, we instrument these handlers on the real
device and replace the interrupt handler for that peripheral
with one that simply ignores the interrupt and returns.
We evaluate our system on two CPU architectures (ARM
and MIPS), four different operating systems (Linux, FreeBSD,
VxWorks, and RiscOS) and across seven different embedded
system-on-chip (SoC) platforms and ﬁnd that it can success-
fully enumerate and identify all registered interrupt handlers.
We also demonstrate, in a case study, the use of IRQDebloat
to protect a real-world device, the Valve Steam Link, by auto-
matically reverse engineering its interrupt sources, locating the
interrupt used for WiFi and Bluetooth, and then disabling it.
We estimate that this would prevent 13 distinct CVEs found
in the Linux Kernel’s Bluetooth and WiFi drivers over the
past ﬁve years. IRQDebloat allows users to effectively reduce
their exposure to unknown vulnerabilities by automatically
removing unwanted hardware functionality.
© 2022, Zhenghao Hu. Under license to IEEE.
DOI 10.1109/SP46214.2022.00085
1608
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
ﬁnally acknowledges the interrupt. The details of this process
may differ depending on the speciﬁc model of interrupt
controller; for example, the interrupt controller used by the
BeagleBone stores the pending interrupt number as an 8-bit
value rather than a bit in a bitset.
To service interrupts, the embedded operating system must
maintain a mapping between hardware IRQ numbers and
the corresponding handlers. In the simplest case, these could
be hardcoded (e.g., using an array of function pointers to
the individual peripheral handlers), but more sophisticated
operating systems will typically support dynamic registration
of IRQ handlers. For example, in Linux, drivers can register a
handler by calling request_irq, and the mapping between
IRQ numbers and handlers is maintained in a radix tree.
Although the implementation details for interrupt handling
differ between embedded architectures, the core pattern of re-
ceiving a top-level interrupt and then dispatching to a speciﬁc
interrupt handler appears to be universal. We leverage this
pattern to build IRQDebloat, which enumerates the individual
peripheral handlers and allows the user to disable them, closing
off that peripheral’s driver attack surface from the outside
world.
B. Execution Indexing
Our trace analysis for ﬁnding interrupt handlers relies on
execution indexing [48], a technique for aligning pairs of
program traces that marks points where they diverge and
(importantly) reconverge. Because program traces may diverge
for trivial reasons (such as an extra iteration of a loop), it
is important
in practice that we have a technique for re-
identifying alignment after a divergence in order to focus only
on large divergences. We brieﬂy describe the core algorithm
here, and then discuss our modiﬁcations to execution indexing
to support whole-system traces on embedded ﬁrmware; we
refer readers to Xin et al. [48] for a full treatment of execution
indexing.
An execution index (EI) uniquely identiﬁes a point
in
an execution and allows it to be compared across different
execution traces. It uses a stack data structure that identiﬁes
the execution context of a basic block of code, e.g., how many
conditional branches were encountered before the basic block
was reached. Whenever a new code context is encountered,
such as a function call or conditional branch, EI pushes onto
the stack its address and the location of its immediate post-
dominator. Because the immediate post-dominator of a basic
block is, by deﬁnition, the earliest node through which every
path from that block to the exit must pass, it identiﬁes the end
of an execution context (Johnson et al. [29] provide the helpful
analogy that the closing curly bracket in C is an example
of an immediate post-dominator). When the immediate post-
dominator at the top of the stack is encountered in the trace,
the stack entry is popped.
To compare two traces, EI starts by assuming they are
initially aligned, with two empty EI stacks for both traces.
It then steps through the two traces in tandem, updating the
EI stacks at every step. Whenever the two EI stacks disagree,
Fig. 1. Typical ﬂow for interrupt handling in an embedded system.
II. BACKGROUND
A. Interrupts
In an embedded system, most
inputs from the outside
world are delivered via interrupts (sometimes called interrupt
requests or IRQs). Interrupts originate in a hardware peripheral
and cause an asynchronous control ﬂow transfer to an interrupt
handler, a function that services the interrupt. The interrupt
handler then communicates with the peripheral that raised the
interrupt, handles any pending I/O for the peripheral,1 and then
acknowledges the interrupt, marking it as ﬁnished.
In hardware, an embedded CPU typically has only a small
number of dedicated interrupt pins (e.g., on ARM, there are
only two top-level interrupt pins, one for standard interrupts
and another for low-latency “fast interrupts”, known as FIQs).
To support a larger number of interrupts, most systems come
with a dedicated interrupt controller (IC), which multiplexes
multiple interrupt pins into a single interrupt source. Interrupt
controllers can also be chained together to support an arbitrary
number of peripherals by tying the output pin of a secondary
interrupt controller to one of the input pins of the primary
interrupt controller.
the peripheral signals an interrupt;
A typical example of IRQ handling is depicted in Figure 1.
First,
this causes the
interrupt controller to store the interrupt number as a bit in
a bitset in a memory-mapped register and then signal the
main CPU. The CPU responds to the interrupt by jumping
to an architecture-deﬁned top-level
interrupt handler. This
handler then retrieves the interrupt number from the interrupt
controller, and uses it to dispatch to the handler for the speciﬁc
peripheral. This peripheral-speciﬁc handler then handles I/O
for the peripheral using memory-mapped I/O (MMIO), and
1In practice, interrupt handlers will often queue the I/O and handle it later
in a bottom half, in the interest of keeping interrupt latency low. However,
in this paper we are only concerned with identifying the initial per-peripheral
interrupt handlers, so this detail is not essential.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1609
CPUirq_pend = fetch_irq(ic_dev)mask = fetch_mask(ic_dev)irq_pend &= maskif (irq_pend) {  n = ffs(irq_pend)  handler = lookup(n)  handler()}InterruptControllerIRQ Pending RegisterUARTEthernetUSBI2CIRQ Mask RegisterGPIOalgorithm marks it as a control ﬂow divergence, logs the
divergence point, and enters the disalignment state. After that,
assuming the deviated trace has entered a nested context which
causes its EI stack to increase, the algorithm will try to realign
the traces by stepping through the trace with the larger EI stack
until the EI stacks agree once more, at which point the traces
are considered re-aligned.
a vendor but may have security requirements that preclude
the use of some functionality. Other possible users include
hobbyists wishing to secure their own devices, technical users
who wish to continue running devices past their end of life
dates, and even system integrators, who may have the ability
to create authorized ﬁrmware images but lack access to source
code or detailed speciﬁcations for individual components.
C. Assumptions and Usage Scenarios
We assume that (1) the analyst has access to a physical
the analyst can upload new,
device for analysis; (2) that
modiﬁed ﬁrmware to the device; and (3) that
the analyst
can capture a snapshot of the device’s CPU and memory at
runtime.
Assumptions (1) and (2) are needed in order to actu-
ally make the modiﬁcations to the ﬁrmware and to validate
the results. The third requirement
is needed because IRQ
handlers are typically dynamically registered during driver
initialization. As a result, static analysis of a ﬁrmware image
to uncover the handlers is unlikely to succeed, and so our
system uses dynamic analysis to explore interrupt handling
code. Dynamic analysis in embedded systems is generally
considered a difﬁcult and unsolved problem that requires either
rehosting [22] or hardware-in-the-loop emulation [49]. Our
system uses the CPU and memory state of the embedded
device to resume execution inside a software emulator and
systematically explore paths through the interrupt handling
code by fuzzing the memory-mapped registers of the emulated
interrupt controller.
Although this requirement may initially seem onerous, in
fact it does not require any additional capabilities aside from
those needed for software debloating: if one has the ability
to rewrite the ﬁrmware of an embedded device, one can
insert
instrumentation that captures the CPU and memory
snapshot as well. In our prototype, we collect memory and
CPU snapshots using JTAG, QEMU, and a custom kernel
module, depending on the target device.
Signed Firmware. Some devices now implement measures
to prevent any modiﬁcation of ﬁrmware by anyone aside from
the vendor, using, e.g., signed ﬁrmware and secure boot [5].
This poses an obstacle to systems such as IRQDebloat, which
aim to allow users to modify the ﬁrmware of their devices
to improve security. However, we note that this limitation
affects any system based on ﬁrmware modiﬁcation. And in
many cases these limitations need not be fatal: there is an
active hobbyist community around modifying embedded and
IoT devices to better suit their owners’ needs by “jailbreaking”
their devices and loading modiﬁed ﬁrmware [2].
Target Audience. We envision IRQDebloat as being use-
ful