my_cipher='\\x08\\xec\\x4a\\x98\\x65\\x34\\xd3\\xd7\\xd5\\xd9\\x7e\\x4d\\x01\\
xf5\\xbf\\x96'
my_c=0x96bff5014d7ed9d5d7d33465984aec08
print hex(my_simon.decrypt(my_c))
my_c=0x26e105e5d76131d55e4c492b496ab27d
print hex(my_simon.decrypt(my_c))
my_c=0x95e451362de3c4217a872de63fd57945
print hex(my_simon.decrypt(my_c))
my_c=0x52cc6ae7bb9ad14aa48feea18bf8b5b5
print hex(my_simon.decrypt(my_c))
my_c=0x1e4232ba92296dbb142e36f2c68cc63a
print hex(my_simon.decrypt(my_c))
my_c=0xee84f579132c4058beabc443a36d6733
print hex(my_simon.decrypt(my_c))
my_c=0x5b2a61edc0862b924f91b71eff091380
print hex(my_simon.decrypt(my_c))
my_c=0x34339a815b13b10dd6d6198c1bb251c3
print hex(my_simon.decrypt(my_c))
#cfinal='\\x08\\xec\\x4a\\x98\\x65\\x34\\xd3\\xd7\\xd5\\xd9\\x7e\\x4d\\x01\\xf
5\\xbf\\x96'
myflagflag
slime_war
f1=open('dump','rb')
f2=open('myflag','wb')
data=f1.read()
count=0
my_c=0
for i in range(1,len(data)/8):
  tmp=(ord(data[i*8+7])>(8))
      data2=plaint&0xff
      f2.write('%s'%(chr(data2)))
    count=0
    my_c=0
#0x50e*0x174+0x24e
#0x50e*0x266+0x1a5
data:0000000140010948 chanllenge dd ?
5
0x14001094 1
 1400108B0
HP1400108F8
140010900
challenge1 
0“”“”
challenge2 
999T
challenge3 
whosyourdaddy
challenge4 666
md5  -  == 666
challenge5 boss
Crypto
ecdsa
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import ecdsa
import hashlib
import binascii
import gmpy2
import random
import fuckpy3
m1 = '''bPzw{yS[VEYxU+"h0 4d;e9O-3$g&~I7Jak:oN6Dulim,B!f|
gXD./4n59{Tept@1H*)VhszM#'''.encode()
curve = ecdsa.curves.SECP256k1
G = curve.generator
n = curve.order
hexlify = binascii.hexlify
Crypto_System
def H(m):
    return int(binascii.hexlify(hashlib.sha1(m).digest()), 16)
z1 = H(m1)
z2 = H(m2)
k = random.randint(1, n - 1)
r = (G * k).x()
d = (((-(z1 + z2)) % n) * gmpy2.invert((2 * r) % n, n)) % n
sk = ecdsa.SigningKey.from_secret_exponent(d, curve, hashfunc=hashlib.sha1)
vk = sk.get_verifying_key()
assert (z1 + z2 + 2 * r * d) % n == 0
r0, s0 = ecdsa.util.sigdecode_string(sk.sign(m1, k=k), n)
r1, s1 = ecdsa.util.sigdecode_string(sk.sign(m2, k=k), n)
assert (-s1) % n == s0
pubkey = vk.to_string()
sig = sk.sign(m1, k=k)
print(pubkey.hex())
print(sig.hex())
from Crypto.Util.number import bytes_to_long, long_to_bytes, getStrongPrime, 
inverse
import hashlib
# These three are constants
p = 
120391024901285091259250190100000124235156172352191276491824701825701950182659
27223
g = 
107290725793070521848483023224513321924562296190441811050630117415165581102167
20725
# random generation
m1 = "test1"
m2 = "test233"
# r1 will be provided to player
def int2str(data, mode="big"):
    if mode == "little":
        return sum([ord(data[_]) * 2 ** (8 * _) for _ in range(len(data))])
    elif mode == "big":
        return sum([ord(data[::-1][_]) * 2 ** (8 * _) for _ in 
range(len(data))])
def get_parameter(m):
    x = int2str(m, 'little')
    y = pow(g, x, p)
    a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(128, 
"\0")).digest())
    b = pow(a, a, p - 1)
    h = pow(g, b, p)
    return y, h, b
def sign(m):
    y, h, b = get_parameter(m)
    r = getStrongPrime(512)
    s = (y * pow(h, r, p)) % p
    return str(r), str(s)
def verify(m, r, s):
    y, h, b = get_parameter(m)
    if s == ((y * pow(h, r, p)) % p):
        return True
    else:
        return False
r1 = 
120203554876321718027404205710675447238128575213169321443393886173909394550655
10866693345497002537883410218871674302094523356279584779467726123589346500363
m1 = long_to_bytes(
 0x504c2a762b563d706f6a66384a2f5c3b504921784d4a235b4433615a7d43525266712746724
a2d3779353c702228277a533a48474b5a22276f64277e7623252c)
m2 = long_to_bytes(
 0x7248216d77372c416f71782562366656253c603f4e6c236a703835353b7e5334795e203e796
867254c7b456e4a7c5c4d5a4f74403b6d7e342a4466503c444b6e)
x1 = int2str(m1, 'little')
y1 = pow(g, x1, p)
a1 = bytes_to_long(hashlib.sha256(long_to_bytes(y1).rjust(128, 
"\0")).digest())
easyrsa
b1 = pow(a1, a1, p - 1)
# print(x, b)
print(pow(g, x1+b1*r1, p))
x = int2str(m2, 'little')
y = pow(g, x, p)
a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(128, "\0")).digest())
b = pow(a, a, p - 1)
print(x, b)
t = (x1+b1*r1-x) % (p-1)
tt = (t*inverse(b, p-1)) % (p-1)
print(tt)
print(pow(g, x+tt*b, p))
y, h, b = get_parameter(m1)
s = (y * pow(h, r1, p)) % p
print(r1, s)
y, h, b = get_parameter(m2)
r = tt
s = (y * pow(h, r, p)) % p
print(r, s)
from Crypto.Util.number import *
# from gmpy2 import *
# from secret import *
# assert(flag.startwith('flag{')) and (flag.endwith('}'))
# assert(is_prime(beta) and len(bin(beta)[2:]) == 512)
# assert(len(bin(x)[2:]) == len(bin(y)[2:]))
# # This is tip!!!
# assert(tip == 2*x*y*beta + x + y)
# phiN = 4xybeta^2
# p = 2*x*beta + 1
# q = 2*y*beta + 1
# pq = 2xbeta+2ybeta + 4xybeta^2 + 1
# (n-1)/beta = x+y + 2xybeta
# assert(is_prime(p) and is_prime(q))
# n = p*q
# e = 65537
# m = bytes_to_long(flag)
# enc = powmod(m,e,n)
n = 
179860522415181241525796987270055050885736707632937621103758362473556120110545
697173386767817722241863555408331361056411187893910026840132374640068609531741
902787182947748745909368238470405568797233687457458634995213815012819615349657
190631858611017063338632568555536915783810343022171635361376971463708698521803
883857320501775053069821964937994209540229128602627104972345290087655823798239
285573070387827936498268793166178650124339738992663225339551875940702155977007
826821867059648429474355121838086513295544998976447330969338005704310365897759
74437965028894251544530715336418443795864241340792616415926241778326529055663
e = 65537
enc = 
107608074857182474668238933057670472505031973831432180268141417190937767814035
138810791145568905342238323521324464452375733892490108808624607384489450112649
282706483576525954320156464244274645234868562949985829491734597797648736646653
614374838612775087342087293669522213510495748738316207148896747551065452811747
973879067057654307643148458414904920388019266752667056064531638267556944825494
018432474821720267646357784846445477338770833685272551455727329542164613342179
631277836327029800644357187855560117958416510151435215123151483203344422359233
93757396733821710592667519724592789856065414299022191871582955584644441117223
beta = 
118643892770427612169966416046757174528435305740166715766841806620965060945875
45173005905433938758559675517932481818900399893444422743930613073261450555599
tip = (n-1) // beta // 2
for i in range(1000):
    phi = (tip-(tip % (2*beta))-i*2*beta)*2*beta
    d = inverse(e, phi)
    if (pow(pow(2, e, n), d, n) == 2):
        print(i)
        print(long_to_bytes(pow(enc, d, n)))