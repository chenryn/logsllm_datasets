title:XHOUND: Quantifying the Fingerprintability of Browser Extensions
author:Oleksii Starov and
Nick Nikiforakis
2017 IEEE Symposium on Security and Privacy
XHOUND: Quantifying the Fingerprintability of
Browser Extensions
Oleksii Starov
Stony Brook University
Nick Nikiforakis
Stony Brook University
PI:EMAIL
PI:EMAIL
Abstract—In recent years, researchers have shown that un-
wanted web tracking is on the rise, as advertisers are trying to
capitalize on users’ online activity, using increasingly intrusive
and sophisticated techniques. Among these, browser ﬁngerprint-
ing has received the most attention since it allows trackers to
uniquely identify users despite the clearing of cookies and the
use of a browser’s private mode.
In this paper, we investigate and quantify the ﬁngerprintability
of browser extensions, such as, AdBlock and Ghostery. We
show that an extension’s organic activity in a page’s DOM can
be used to infer its presence, and develop XHOUND, the ﬁrst
fully automated system for ﬁngerprinting browser extensions. By
applying XHOUND to the 10,000 most popular Google Chrome
extensions, we ﬁnd that a signiﬁcant fraction of popular browser
extensions are ﬁngerprintable and could thus be used to sup-
plement existing ﬁngerprinting methods. Moreover, by surveying
the installed extensions of 854 users, we discover that many users
tend to install different sets of ﬁngerprintable browser extensions
and could thus be uniquely, or near-uniquely identiﬁable by
extension-based ﬁngerprinting. We use XHOUND’s results to
build a proof-of-concept extension-ﬁngerprinting script and show
that trackers can ﬁngerprint tens of extensions in just a few
seconds. Finally, we describe why the ﬁngerprinting of extensions
is more intrusive than the ﬁngerprinting of other browser and
system properties, and sketch two different approaches towards
defending against extension-based ﬁngerprinting.
I. INTRODUCTION
Mayer in 2009 [38] and Eckersley in 2010 [19] showed that,
contrary to popular belief, web trackers could keep tracking
users without the need of any stateful identiﬁers, such as,
third-party HTTP and Flash cookies. The authors showed that
a tracker can create a sufﬁciently stable, per-user identiﬁer
(called a browser ﬁngerprint) by combining features that are
already present in the browsers of users, such as, their list
of installed plugins, the list of fonts, and the HTTP headers
of their browsers. Speciﬁcally, Eckersley discovered that fonts
and plugins were the two most discriminating features, allow-
ing him to uniquely identify 94.2% of the surveyed users.
Many researchers have conducted follow-up studies validating
and extending Eckersley’s ﬁndings [12], [14], [22], [36], mea-
suring the adoption of browser ﬁngerprinting in the wild [6],
[7], [37], [44], showing that smartphone components are ﬁn-
gerprintable [16], [17], [51], quantifying the ﬁngerprintability
of mobile browsers [27], [36], and proposing countermeasures
against browser ﬁngerprinting [11], [43], [49].
Laperdrix et al. [36],
in a recent study validating and
extending Eckersley’s ﬁndings, discovered that even though
browser plugins remain one of the most revealing features
of desktop and laptop browsers, the entropy that they offer
has considerably decreased since Eckersley’s study. This is
due to the increasing popularity of HTML5, providing pow-
erful functionality to developers, and the decreasing trust in
proprietary browser plugins which have, in the past, caused
many performance and security issues. For instance, Google
Chrome has stopped supporting plugins utilizing the NPAPI
architecture [3] and Mozilla Firefox announced a plan to do
the same [5], while already limiting the ability of scripts to
enumerate plugins [1]. As the popularity and ﬁngerprinting
power of plugins is decreasing, we argue that trackers will
look for new techniques to ﬁngerprint users. Predicting these
new techniques will allow the research community to start
developing countermeasures for these future threats.
in contrast with browser plugins,
In this paper, we show that browser extensions, such as,
AdBlock and Ghostery, installed via browser add-on markets
can serve as powerful discriminating features for ﬁngerprinting
and uniquely identifying the browsing environments of users.
Note that,
there are no
browser APIs that webpages can use to retrieve the list of
installed browser extensions. As such,
the only way that
browser extensions can be detected is through their side
effects on a page’s DOM, such as, the addition of new DOM
elements and the removal of existing ones. While researchers
are already aware that certain extensions are ﬁngerprintable,
previous work has always revolved around the manual analysis
of a handful of extensions [7], [41], [44] and the subsequent
reasoning about their ﬁngerprintable features.
To quantify the ﬁngerprintability of browser extensions at
a large scale, we present XHOUND (Extension Hound), the
ﬁrst fully automated system for ﬁngerprinting browser exten-
sions, based on a combination of static and dynamic analysis.
XHOUND ﬁngerprints the organic activity of extensions in a
page’s DOM, such as, the addition of new DOM elements
and the removal of existing ones, and is thus robust against
incremental patching of extensions. Using XHOUND, we are
able to answer, among others, the following four important
questions:
• How many popular extensions introduce on-page
changes and are thus ﬁngerprintable? We examine
the top 10,000 Chrome Store extensions, and show that
at least 9.2% of extensions introduce detectable changes
on any arbitrary URL, and more than 16.6% introduce
© 2017, Oleksii Starov. Under license to IEEE.
DOI 10.1109/SP.2017.18
941
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
detectable changes on popular domains. The numbers
increase to more than 13.2% and 23% respectively, if
we consider just the top 1,000 extensions. Moreover, we
ﬁnd that popular extensions remain ﬁngerprintable over
time, despite updates and rank changes.
• What kind of on-page changes do browser exten-
sions introduce? The possibility of extension-based ﬁn-
gerprinting relies on a tracker’s ability to distinguish
between introduced changes,
i.e., which change was
introduced by what extension. For instance, many ad-
blocking extensions will result in the same absence of
an ad on the page, while the additional UI elements of
password managers will tend to have unique HTML code
structures. Analyzing XHOUND’s results, we show that
among 1,656 ﬁngerprintable extensions almost 90% are
uniquely identiﬁed based on the on-page modiﬁcations
that they cause.
• How ﬁngerprintable are the extension proﬁles of
real users? Extension ﬁngerprinting will only work if
users have rather unique sets of detectable extensions. To
analyze extension proﬁles of everyday users, we deploy
an extension-survey, which anonymously collects the list
of installed extensions from a user’s browser. We ﬁnd
that, among 854 participants, 14.1% have distinct sets
of universally detectable extensions and can thus be
identiﬁed with 100% accuracy, while an additional 19.4%
of users share the same extension-based ﬁngerprint with
2-20 other users.
• How can a tracking script check for the presence
of browser extensions? As a ﬁnal part, we implement
a proof-of-concept script
tens of
popular browser extensions in just a few seconds, us-
ing the triggering conditions and on-page side effects
extracted by XHOUND. A video demo of our extension-
ﬁngerprinting script is available on this URL: https:
//vimeo.com/178330178 (password is SP2017).
that can ﬁngerprint
Our results highlight the danger of extension-based ﬁn-
gerprinting which, in conjunction with existing ﬁngerprint-
ing techniques, can greatly boost the accuracy of stateless,
user identiﬁcation. Moreover, our ﬁndings are likely to be
applicable to mobile platforms where most browsers have
poor or no support for plugins, yet popular browsers, such
as, Firefox Mobile and Dolphin Browser for Android, and
Chrome for iOS [32], support extensions. To address the
threat of extension-based ﬁngerprinting, we ﬁrst brieﬂy discuss
the difﬁculty of protecting against it, and then sketch two
possible countermeasures, based on isolating DOM changes
and constructively polluting the DOM namespace.
II. BACKGROUND
A. Plugins versus extensions
Even though many users tend to use the term “plugin” and
“extension” interchangeably [15], [23], [31], [39] in reality
plugins and extensions refer to very different technologies.
Plugins allow browsers to parse and display content that
is not traditional HTML. Webpages that depend on plugins,
directly invoke them through the use of appropriately set
 and  tags. Plugins became popular
because they enabled the delivery of non-traditional HTML
content, such as, video, and audio, at a time when browsers
could only support basic HTML. Plugins, such as, Adobe’s
Flash, and Sun’s Java, dominated the landscape of plugins
until they started falling out of favor, due to their performance
impact on mobile devices [29], the large number of security
vulnerabilities that were routinely used to compromise the ma-
chines of users [34], [45], and the general tendency of moving
away from proprietary libraries and towards open standards.
HTML5 delivers many technologies, such as, WebRTC [18],
Canvas [48], and native audio and video players, that are now
used to build games and applications that, in the past, could
only be built using proprietary plugins.
In contrast with plugins, browser extensions are meant to
extend or modify the default behavior of a browser and are
targeted towards end users, rather than application develop-
ers. Browser extensions are built using JavaScript, CSS, and
HTML, and make use of well-deﬁned APIs provided to them
by browsers. Using extensions, users can modify a browser’s
interface, add new features that are not, by default, supported,
and modify webpages according to their preferences. Users
utilize extensions to block ads, download videos, capture
screenshots, and manage their passwords. Since the target au-
dience of extensions are users, pages cannot ask for extensions
to “load” in the way that they could do with browser plugins.
Instead, browser extensions register hooks on various browser
events and are allowed to view and modify the DOM of all
the webpages whitelisted in their manifest ﬁles.
Plugins and extensions are also different from a ﬁnger-
printing standpoint. Since plugins are meant to be used by
developers, webpages can utilize JavaScript
to obtain the
list of plugins currently installed in the user’s browser (by
accessing the navigator.plugins object). Webpages that
ﬁngerprint their users abuse this functionality to retrieve all
plugins installed on a user’s browser and turn them into
features for differentiating users from one another. In contrast,
there is no API that webpages can use to retrieve the list of
installed extensions. The only generic method that a webpage
can use to detect an extension, is to identify a modiﬁed DOM
and attribute that modiﬁcation to an installed extension. In
fact, many webpages are currently using this method to detect
the presence of ad-blockers (expected ad-related elements are
not present in the DOM of a page) [8]–[10].
B. Threat models
In this section, we ﬁrst provide a brief comparison of
browser extensions and browser plugins and then list the threat
models that we will use throughout this paper.
For our purposes, an attacker is an entity that wishes to
ﬁngerprint the extensions of a user’s browser and use this
information to uniquely identify the user between browsing
942
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. LastPass extension as an example of content based on-page changes.
Listing 1 DOM changes introduced by LastPass.
Fig. 2.
changes.
SaveToPocket extension as an example of URL based on-page
Listing 2 DOM changes introduced by SaveToPocket.
<div class="ProfileTweet-action...
sessions, without relying on cookies or other stateful identiﬁers
that users can delete.
As mentioned in Section II-A, extensions are only allowed
to access the DOM of the webpages that are speciﬁed in
their manifest ﬁles. This means that some extensions which
add functionality to speciﬁc popular web applications, reveal
their presence only on speciﬁc websites and paths, and
consequently, only those websites have the ability to detect
them and ﬁngerprint them. For instance, a YouTube video
downloader will only reveal
its presence when a user is
browsing video pages on youtube.com. As a consequence,
websites that are routinely “selected” by these non-generic
extensions have more ﬁngerprinting power than the rest of
the web since they can detect and ﬁngerprint both website-
speciﬁc and generic extensions. Thus, when considering
the ﬁngerprintability of extensions, we can distinguish the
following two attack scenarios based on the vantage point of
the attacker.
Tracking script situated on an arbitrary domain
In this tracking scenario, any arbitrary webpage is able to
ﬁngerprint extensions that are installed and enabled in a
browser. Such tracking scripts can be loaded inside any
custom domain and craft a web page which will
trigger
extensions to reveal themselves. In this scenario, the tracker
will be able to detect only the extensions that
introduce
changes regardless of the URL of the page. In other words,
the detectable functionality of these ﬁngerprintable extensions
must be
instead of URL-dependent.
Figure 1 shows an example of content-dependent DOM
changes, introduced by the LastPass extension. This extension
is a password manager that adds an ellipsis button (...) to each
input ﬁeld allowing users to conveniently access their stored
credentials. These visible changes are triggered by speciﬁc
content (a login form) and will work on any domain or URL
that includes such a form. Listing 1 shows the corresponding
DOM changes. Thus, any tracker situated on any arbitrary
content-dependent
domain can create a password input ﬁeld and check whether
an ellipsis button appeared on it,
thereby inferring the
presence of the LastPass extension in the browser of the
current user. Similarly, universal extensions that highlight
phone numbers in text, provide additional controls to any
videos, or block any ads, can be easily detected in the same
fashion.
Tracking script situated on a popular domain
Many popular extensions in the market are targeted towards
speciﬁc popular websites like Facebook, Twitter, YouTube, and
Gmail. Therefore, the changes that these extensions introduce
on those websites can be called URL- or domain-speciﬁc.
Figure 2 shows an example of such DOM changes, introduced
by an extension called SaveToPocket. Its functionality includes
the ability to save web pages or parts of web pages for
later reading. In addition, for speciﬁc popular domains, the
extension introduces its own buttons on their pages to facilitate
users. The current example is based on Twitter, where each
tweet receives the additional “save to pocket” button. Listing 2
shows the corresponding DOM changes. Any script loaded
from Twitter’s domain has the ability to test the presence
of this button. This includes both ﬁrst-party scripts located
on Twitter servers, as well as third-party scripts loaded from
arbitrary remote domains. In practice, this means that hun-
dreds of third-party script providers, ranging from advertising
libraries, to content distribution networks, can capitalize on
their privileged position (being included on a popular domain)
to ﬁngerprint these URL-dependent extensions and their users.
In fact, Nikiforakis et al. [44] found that skype.com was
including a ﬁngerprinting script from a commercial ﬁnger-
printing vendor, and Acar et al. [6], [20] later discovered
that many popular websites, including whitehouse.gov
and youporn.com were including a tracking library from
addthis.com which was using canvas-ﬁngerprinting.
943
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
III. XHOUND ARCHITECTURE
A human analyst can straightforwardly reason about the
on-page changes made by any given extension (e.g. ad-
related iframes removed and new DOM elements added), craft
appropriately structured pages that would cause extensions
to reveal themselves, and write tests that are used to infer
the presence or absence of an extension in the browsers of
users. This manual approach, however, cannot scale to the
size of popular browser extension markets which are hosts
to tens of thousands of extensions. To address the challenge
of a large-scale, ﬁngerprintability analysis of extensions, we
designed and developed XHOUND (Extension Hound), an
extension-discovering framework that automatically extracts
the visible and invisible on-page side-effects of any given
browser extension. In this section, we report on the architecture
of XHOUND and our design choices.
XHOUND uses a two-step approach where in the ﬁrst step
our tool patches the JavaScript source code of extensions
in
in order to place hooks on functions of interest and,
the second step, uses dynamic analysis in an attempt
to
stimulate the DOM-changing code segments of each evaluated
extension. Similar two-step passes have been used to detect
malicious extensions that exﬁltrate private user data or in-
ject advertisements. Kapravelos et al. introduced Hulk [30],
a framework for automatically detecting malicious Chrome
extensions. The authors developed the concept of dynamic
“honey pages” which are empty pages that have JavaScript
code which can dynamically create appropriate DOM elements