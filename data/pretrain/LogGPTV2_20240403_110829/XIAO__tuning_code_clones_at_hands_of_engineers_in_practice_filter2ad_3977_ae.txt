of  the  online  clone-search  engine  were  running  to  serve  online 
queries.  We  randomly  selected  1000  code  snippets  from  the 
codebase as inputs. The size of these 1000 snippets ranges from 3 
to 100 and the number of snippets for each size is about the same. 
The  clone-similarity  threshold  is  set  to  be  0.6.  The  number  of 
found cloned snippets ranges from 1 to 1000 and the average time 
of each query is a number of seconds. 
Offline  clone  detection  and  analysis.  We  evaluated 
the 
performance of XIAO’s offline clone detection and analysis on a 
commercial codebase with 26 million lines of code using the same 
system setup as that in the online-search environment. Clones of 
functions with at least 20 lines of statements were found using the 
similarity  threshold  of  0.6. Preprocessing  was  conducted on  one 
computing node. The clone detection and analysis were performed 
in  parallel  on  the  4  computing  nodes.  It  took  3  hours  and  30 
minutes to finish the entire process. The time breakdown of each 
step  (in  the  unit  of  seconds)  is  preprocessing  (1,014),  coarse 
matching (9,803), fine matching (213), and clone analysis (1,462). 
The  average  amount  of  memory  used  by  each  instance  of  clone 
detection and analysis is about 120MB. 
6.  APPLICATION SCENARIOS IN 
PRACTICE  
We  have 
for  different 
development teams to use (with the first version released in April 
2009). There were more than 750 downloads of the tool as of the 
end of year 2010.  
Copy-Paste-Bug  Detection  and  Refactoring.  An  example 
application scenario of XIAO was already described in Section 1. 
In  this  scenario,  an  engineer  at  Microsoft  reviewed  69  clone 
groups for a total of 184 snippets taken from the results of code-
clone  detection  for  a  commercial  codebase.  All  reviewed  clones 
were near-miss code clones. He identified 7 (10%) clone groups 
as potential bugs and 23 (33%) clone groups as refactoring targets 
(including  the  7  with  potential  bugs).    The  motivating  example 
shown in Figure 1 is one of these seven cases. Function A on the 
left side is from a shared component, and function B on the right 
side is from an application. As confirmed by the code owner, B 
was copied from A for quick reuse quite some time ago. However, 
the engineer of B was not aware of the changes made to A after 
the copying. 
inside  Microsoft 
released  XIAO 
The  clone-related  bug  shown  in  Figure  7  is  another  example 
reported  by  the  same  engineer.  In  this  case,  the  two  functions 
originally  had  similar  functionalities.  Later  on  a  number  of 
statements were added to one function (with the gray background 
in Figure 7) to ensure the synchronization between Windows GDI 
objects;  nevertheless,  this  bug  fix  was  not  applied  to  the  other 
function. 
The two functions shown in Figure 8 have only slight differences. 
In fact, they are the same except for one similar-logic block (the 
second statement in the figure) and one different-logic block (the 
first statement). This case was analyzed by XIAO to have a high 
rank  in  both  bug  likelihood  and  refactoring  likelihood.  As 
confirmed  by  its  engineer,  the  differences  between  the  two 
functions  are  by-design,  and  the  clones  are  not  buggy.  In  the 
meantime, this case was confirmed to be refactorable. 
Figure  9  shows  a  clone  group  that  was  tagged  as  “Immune”. 
Although there do exist slight logic differences between the two 
functions,  the  differences  were  confirmed  to  be  intentional. 
Currently  it  is  difficult  for  XIAO  to  handle  false-positive  cases 
such as this one in clone analysis. 
Based on our observation, an engineer often tries to prioritize his 
refactoring  efforts,  i.e.,  starting  from  easy-to-refactor  clones 
(which  are  often  those  with  high  similarity).  Another  factor  for 
tuning parameters is that a higher value of the similarity threshold 
needs less running time to get clone-detection results. Therefore, 
the engineer could choose relatively high similarity threshold first 
(e.g., 100% the same), to get some easy-to-refactor clones within 
relatively  short  clone-detection  time.  If  there  is  a  need  to 
aggressively  identify  more  refactoring  opportunities,  a  relatively 
small  value  of  the  similarity  threshold  could  be  used.  In  some 
situations, a relatively high value of the similarity threshold would 
be used. For example, we observed that engineers dealing with a 
codebase with 20+ million LOC would like to identify  file-level 
clones with 99% similarity and set a relatively high value of the 
similarity threshold to accomplish this goal. 
Detection  of  Duplicated  Vulnerable  Code.  A  security-
engineering  team  at  Microsoft  has  been  using  XIAO’s  online 
clone-search  service  since  May  2009 
their 
investigation on security bugs. There were more than 590 million 
lines of code being indexed. During the second half of year 2010, 
there were a number of vulnerable code snippets searched against 
the  XIAO  service.  Among  these  searching  cases,  there  were 
to  help  with 
// 6 identical statements omitted here  
RectF rectImage(0.0f, 0.0f, (float)m_piISGU-
>GetItemWidthPx() - 1.0f, (float)m_piISGU->GetItemHeightPx() - 
1.0f); 
// 61 identical statements omitted here  
colorBorder.SetFromCOLORREF(GetBorderColor()); 
// 2 identical statements omitted here  
service  has  greatly 
18.3%  cases  with  good  hits,  i.e.,  for  these  cases,  the  security-
engineering  team  needs  to  do  further  investigation  to  confirm 
whether  there  are  duplicated  vulnerabilities.  Given  high  severity 
of security bugs, 18.3% good-hit cases are very good results. 
In  an  example  real  case,  a  reported  security  vulnerability  could 
cause  potential  heap  corruption  and  lead  to  remote  code 
execution.  After  investigation,  the  vulnerable  code  snippet  was 
found in codebase A: a buffer-overflow check was missing there. 
Using XIAO’s clone-search service, one security engineer on the 
security  engineering  team  found  three  clones  of  the  vulnerable 
code snippet – one is also in codebase A and the other two belong 
to codebase B. This security engineer contacted the code owners 
of these three cloned snippets and confirmed that one snippet in 
codebase  B  was  vulnerable.   After  the  contact,  the  development 
team owning the vulnerable cloned snippet in B had confirmed to 
fix  this  security  bug  while  the  security  bug  in  codebase  A  was 
fixed. 
XIAO’s  clone-search 
the 
productivity  of  the  security  engineers  and  it  enhanced  the 
reliability of the bug-investigation process as well. Based on the 
clone-search results, security engineers are able to obtain a better 
understanding  of  the  potential  impact  of  security  vulnerabilities 
and  communicate  more  effectively  with  development  teams  on 
vulnerability investigation and fixing. 
In  this  application  scenario  of  XIAO,  security  engineers  would 
like  to  have  high  recall  of  clone  detection  (i.e.,  little  chance  of 
missing  clones).  Therefore,  for  this  application  scenario,  XIAO 
has  the  default  value  of  0.6,  a  relatively  small  value  for  the 
similarity threshold. The value is tunable by security engineers to 
achieve even higher recall. 
Discussion.  For  the  two  types  of  application  scenarios,  we 
observed  that  the  second  scenario  on  detecting  duplicated 
vulnerable  code  (with  the  target users  as  security  engineers)  has 
occurred  much  more  often  than  the  first  scenario,  especially  on 
refactoring  (with  the  target  users  as  software  engineers).  Such 
observation could be explained with two factors. First, refactoring 
conducted by software engineers occurs much less frequently than 
investigation  of  security  bugs,  which  are  the  routine  work  of 
security  engineers.  Second,  the  severity  of  consequence  on 
missing  a  refactoring  opportunity  is  much  less  than  the  one  on 
missing a security bug.  
improved 
// 6 identical statements omitted here  
RectF 
rectImage(0.0f, 
(float)s_cyInkItem - 1.0f); 
0.0f, 
(float)s_cxInkItem 
- 
1.0f, 
// 61 identical statements omitted here  
colorBorder.SetFromCOLORREF(GetFrameColor()); 
// 2 statements identical omitted here  
Figure 8.   A confirmed example of code refactoring 
if (!pxdsi || !pxdsl) 
// 13 identical statements omitted here 
if (FAILED(pxdsi->HrDeleteNode(ppxslChildren[l])))  
// 10 statements identical omitted here 
if (!m_spxdsi || !m_spxdsl || !m_pDesc) 
// 13 identical statements omitted here 
if (!ParseProperty(ppxslChildren[l])) 
// 10 identical statements omitted here 
Figure 9.    A clone group tagged as “Immune” 
376
in 
their  approaches,  either 
7.  RELATED WORK  
Research  on  code-clone  detection  has  been  an  active  research 
topic  in  recent  years  [3][10][17][24][27].  Roy  et  al.  [27] 
conducted an extensive survey on this research topic. 
In contrast to other previous approaches on code-clone detection 
that  conduct  aggressive  code  parameterization  without  imposing 
any  constraint  on  characteristics  of  statements  (e.g.,  CCFinder 
[18],  CP-Miner  [21],  and  Deckard  [14]),  our  code-similarity 
metric enables users to control the degree of tolerating statement 
variations by parameter α, allowing XIAO to filter out many false-
positive  clones  that  other  approaches  would  report.  Our  code-
similarity  metric  also  enables  users  to  control  the  percentage  of 
inserted/deleted/modified  statements,  allowing  XIAO  to  detect 
near-miss code clones with any number of statement gaps. At the 
same time, the algorithm efficiency is still achieved since XIAO 
uses a coarse-to-fine mechanism. Token-based approaches either 
cannot  effectively  detect  near-miss  clones  (e.g.,  CCFinder)  or 
cannot  efficiently  detect  clones  with  over  three  gaps  (e.g.,  CP-
Miner). 
Clone-detection  approaches  based  on  parse  tree  (e.g.,  CloneDR 
[5][6] and Deckard) can detect near-miss clones with over three-
statement  gaps.  However, 
the 
percentage  of  shared  tokens  [5][6] or  the  feature-vector  distance 
[14] is used to approximate the tree-edit distance. Although such 
approximation  enables  efficient  detection  algorithms,  it  leads  to 
false  positives,  due  to  the loss  of  structural  similarity  caused  by 
the approximation. 
Our  code-similarity  metric  also  takes  into  account  disordered 
statements,  allowing  XIAO  to  detect  near-miss  clones  with 
disordered  statements.  Many  other 
token-based  detection 
approaches  such  as  CCFinder  or  CP-Miner  do  not  detect  clones 
with  disordered  statements;  parse-tree-based  approaches  can 
detect  clones  with  disordered  statements;  however,  they  suffer 
from false positives. 
Recently,  Gabel  et  al.  [11]  proposed  a  scalable  algorithm  for 
detecting  semantic  code  clones  based  on  dependency  graphs. 
They  defined  semantic  code  clones  as  isomorphic  sub-graphs  of 
the  code’s  dependency  graph.  Kim  et  al.  [19]  also  proposed  a 
memory-comparison-based  algorithm  for  code-clone  detection, 
called  MeCC.  Their  approach  can  detect  near-miss  code  clones, 