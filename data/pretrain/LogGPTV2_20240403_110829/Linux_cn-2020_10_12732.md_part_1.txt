---
author: Seth Kenlon
category: 软件开发
comments_data:
- date: '2020-11-18 01:18:34'
  message: 我一个小白都看得津津有味，赞一个！！！！！！！！！
  postip: 112.43.0.69
  username: 来自112.43.0.69的 Chrome 78.0|Windows 7 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7253
date: '2020-10-18 21:37:03'
editorchoice: false
excerpt: 我们将所有的 C 语言要素放置到一份易读的备忘录上。
fromurl: https://opensource.com/article/20/8/c-programming-cheat-sheet
id: 12732
islctt: true
largepic: /data/attachment/album/202010/18/213610t3do3u7oev2udoyn.png
permalink: /article-12732-1.html
pic: /data/attachment/album/202010/18/213610t3do3u7oev2udoyn.png.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 我们将所有的 C 语言要素放置到一份易读的备忘录上。
tags:
- C语言
thumb: false
title: C 语言简单编程速成
titlepic: true
translator: robsean
updated: '2020-10-18 21:37:03'
---
> 
> 我们将所有的 C 语言要素放置到一份易读的备忘录上。
> 
> 
> 
![](/data/attachment/album/202010/18/213610t3do3u7oev2udoyn.png)
1972 年， 丹尼斯·里奇   Dennis Ritchie 任职于 贝尔实验室   Bell Labs ，在几年前，他和他的团队成员发明了 Unix 。在创建了一个经久不衰的操作系统（至今仍在使用）之后，他需要一种好的方法来对这些 Unix 计算机编程，以便它们可用执行新的任务。在现在看来，这很奇怪，但在当时，编程语言相对较少，Fortran、Lisp、[Algol](https://opensource.com/article/20/6/algol68) 以及 B 语言都很流行，但是，对于贝尔实验室的研究员们想要做的事情来说，它们还是远远不够的。丹尼斯·里奇表现出一种后来被称为程序员的主要特征的特质：创造了他自己的解决方案。他称之为 C 语言，并且在近 50 年后，它仍在广泛的使用。
### 为什么你应该学习 C 语言
今天，有很多语言为程序员提供了比 C 语言更多的特性。最明显的是 C++ 语言，这是一种以相当露骨的方式命名的语言，它构建在 C 语言之上，创建了一种很好的面向对象语言。不过，许多其它语言的存在是有充分理由的。计算机擅长一致的重复，因此任何可预见的东西都可以构建在编程语言中，对程序员来说这意味着更少的工作量。为什么在 C++ 语言中用一行语句就可以将一个 `int` 转换为一个 `long` 时（`long x = long(n);`），还要在 C 语言用两行语句呢？
然而，C 语言在今天仍然有用。
首先，C 语言是一种相当简约和直接的语言。除了编程的基础知识之外，并没有很高级的概念，这很大程度上是因为 C 语言实际上就是现代编程语言的基础之一。例如，C 语言的特性之一是数组，但是它不提供字典（除非你自己写一个）。当你学习 C 语言时，你会学习编程的基础组成部分，它可以帮助你认识到如今的编程语言的改进及其的精心设计。
因为 C 语言是一种最小化的编程语言，你的应用程序很可能会获得性能上的提升，这在其它许多编程语言中是看不到的。当你考虑你的代码可以执行多快的时候，很容易陷入锱铢必较的境地，因此，重要的是要问清楚你是否*需要*为某一特定任务提供更多的速度。与 Python 或 Java 相比，使用 C 语言，你在每行代码中需要纠结的地方更少。C 语言程序运行很快。这是 Linux 内核使用 C 语言编写的一个很好的理由。
最后，C 语言很容易入门，特别是，如果你正在运行 Linux，就已经能运行 C 语言代码了，因为 Linux 系统包含 GNU C 库（`glibc`）。为了编写和构建 C 语言程序，你需要做的全部工作就是安装一个编译器，打开一个文本编辑器，开始编码。
### 开始学习 C 语言
如果你正在运行 Linux ，你可以使用你的软件包管理器安装一个 C 编译器。在 Fedora 或 RHEL 上：
```
$ sudo dnf install gcc
```
在 Debian 及其衍生系统上：
```
$ sudo apt install build-essential
```
在 macOS 上，你可以 [安装 Homebrew](https://opensource.com/article/20/6/homebrew-mac) ，并使用它来安装 [GCC](https://gcc.gnu.org/)：
```
$ brew install gcc
```
在 Windows 上, 你可以使用 [MinGW](https://opensource.com/article/20/8/gnu-windows-mingw) 安装一套最小的包含 GCC 的 GNU 实用程序集。
在 Linux 或 macOS 上验证你已经安装的 GCC：
```
$ gcc --version
gcc (GCC) x.y.z
Copyright (C) 20XX Free Software Foundation, Inc.
```
在 Windows 上，提供 EXE 文件的完整路径：
```
PS> C:\MinGW\bin\gcc.exe --version
gcc.exe (MinGW.org GCC Build-2) x.y.z
Copyright (C) 20XX Free Software Foundation, Inc.
```
### C 语法
C 语言不是一种脚本语言。它是一种编译型语言，这意味着它由 C 编译器处理来产生一个二进制可执行文件。这不同于脚本语言（如 [Bash](https://opensource.com/resources/what-bash)）或混合型语言（如 [Python](https://opensource.com/resources/python)）。
在 C 语言中，你可以创建*函数*来执行你希望做到的任务。默认情况下，执行的是一个名为 `main` 的函数。
这里是一个使用 C 语言写的简单的 “hello world” 程序：
```
#include 
int main() {
  printf("Hello world");
  return 0;
}
```
第一行包含一个被称为 `stdio.h`（标准输入和输出）的 *头文件*，它基本上是自由使用的、非常初级的 C 语言代码，你可以在你自己的程序中重复使用它。然后创建了一个由一条基本的输出语句构成的名为 `main` 的函数。保存这些文本到一个被称为 `hello.c` 的文件中，然后使用 GCC 编译它：
```
$ gcc hello.c --output hello
```
尝试运行你的 C 语言程序：
```
$ ./hello
Hello world$
```
#### 返回值
这是 Unix 哲学的一部分，一个函数在执行后“返回”一些东西：在成功时不返回任何东西，在失败时返回其它的一些东西（例如，一个错误信息）。这些返回的内容通常使用数字（确切地说是整数）表示：`0` 表示没有错误，任何大于 `0` 的数字都表示一些不成功的状态。
Unix 和 Linux 被设计成在运行成功时保持沉默是很明智的。这是为了让你在执行一系列命令时，假设没有任何错误或警告会妨碍你的工作，从而可以始终为成功执行做准备。类似地，在 C 语言中的函数在设计上也预期不出现错误。
你可以通过一个小的修改，让你的程序看起来是失败的，就可以看到这一点：
```
include 
int main() {
  printf("Hello world");
  return 1;
}