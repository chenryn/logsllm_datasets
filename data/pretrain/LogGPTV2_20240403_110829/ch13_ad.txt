佩德罗：我见过一种倾向，即试图拉伸人才的普适性：做每一件事，并成为一个千斤顶，可以在各个层次工作，从低级硬件问题，到中层协议问题，到 UI 编程。此模型在许多新兴小团队中很有用，并且是必需的，但在大规模下不能很好地工作。一个人不可能做那么多工作，并使自己能够随着时间的推移而持续，且不会陷入精疲力竭，所以我们更专注于将个人与技术相匹配。例如，在缓存团队中，需要了解有关网络协议和调试的知识，但了解整个系统的工作原理是最终目标。
当我们启动一个新的团队时，我们会寻找四个因素并提出以下问题：
在未来18至24个月内，是否有足够的工作供至少三人工作？我想出了三个，因为这个数字，对我来说，真正定义了一个团队。如果只有两个人，一个人生病或想休假，那么另一个人必须承担整个工作量。有了第三人时，至少可以对项目进行配对、定义共同责任等。这是简单的团队模型。该服务是否适合我们的优先级模型？我们需要了解服务如何解决业务需求，它将是真正实用的东西，而不仅仅是一个可能永远不会看到生产规模的原型。现在是确定这个团队优先于另一个团队的合适时机吗？这一个是棘手的问题，因为它更主观。
我们是否有经理可以与生产工程师合作，并建立一个更大的团队？经理是一个关键组成部分，确保工程师集中注意力，完成事情。重要的是，每个人都在不断成长和成长。我们需要确保团队为他们的工作获得适当的背景信息，并确保他们从其他人中学习。
是否有本地 SWE 团队来使用此服务？这主要是在我们不是构建软件的人的情况下。我们需要确保有一个 SWE 团队可以进行肩并肩的调试和面对面讨论有关体系结构和问题。
这四个考量必须一起考虑。这过滤掉了一批新生的项目，这些项目可能会占用有价值的人。尽管在每种类型的团队中都有生产工程师是不错的，但根据我们的优先级模型，这没有意义。为了从生产工程团队引入一个新的职位，上述四个要素需要存在，我们后来又补充了另一个约束。我们需要确保新职位有能力维持三个不同的团队，且至少有三人，为期 18 到 24 个月，在当地与 SWE 合作。这意味着我们建立 PE 团队到网站成熟。
大卫：确实如此，但是那些小事情呢？必须做，但又不会花这么长时间的事情？有全能团队吗？
佩德罗：不，没有一个全能的团队做那种工作。一般来说，软件工程团队有责任管理他们的技术和操作债务。他们尽可能长时间地这样做，但最终如果他们的服务需要优先排序，并且建立一个团队是有意义的，那么我们就这样做。通常，对某些工作有亲和力的 PE 可能会看到其他团队中没有 PE 带来的问题，并花费几周的时间来改进它，然后回到原来的团队。我们认为这是有价值的，因此只要可以负担，我们就会鼓励这么做，因为它可以帮助 SWE 团队获得一些快速的运维效率和知识。在基础设施中，我们通常专注于使诸如引导之类的操作消失。我们已经建立了许多服务，为工程师提供“更多的免费便利”。他们可以使用我们的容器化服务进行部署。他们将免费获得服务器常规健康监控。我们有一个集中式监控系统，具有内置的图形、异常检测和警报功能。所有服务可以通过 FBAR（最初由 SRO 构建，然后由 PE 显著增强）等机制免费获得基本修复。所有基础都为你部署好了，因此你可以更专注于更高级别的软件问题。这使得我们的软件工程师能够先进行快速原型设计，并首先处理小事情，并找出是否有值得进行构建的东西，而不必须专注于小东西。这种“更多的免费便利”让你很容易通过之前讨论的引导阶段，不需要太多的初始帮助，因为它都是自助服务。
大卫：我们讨论了 PE 如何参与团队和产品或服务。PE 如何离开团队？
佩德罗：移动性实际上是我们的核心宗旨。佩德罗：移动性实际上是我们的核心宗旨。
我们喜欢聘请通才。除了核心的实用和算法编程技能外，我们还寻找其他特征。我们期望我们雇佣或培训的 PE 了解网络协议以及如何调试它们。他们需要具备较低级别的系统知识，并了解软件如何与内核、硬件和网络层交互。如果他们在事业上走得更远，他们需要了解如何构建分布式系统。这些是我们在雇用 PE 时寻求的一般技能。当他们加入一个团队时，他们可能不是每个领域的专家，但随着时间的推移，他们将获得这些知识和经验，他们将成为更强大的工程师。这些知识使他们能够在 PE 中更轻松地转移到其他团队。他们还将学习如何使用 Facebook 构建的工具和服务。其中许多模仿 Facebook 以外的服务，如容器化的服务。如果服务使用我们的内部容器化系统（无论是缓存、消息、广告或新闻源，还是任何其他内容），它仍然是相同的容器化服务。他们所处理的系统的内部工作以及出现的问题（例如，并发性、一致性、灾难恢复）会因服务而异。这就是 PE 在加入团队时需要学习的内容，但在我们的环境中管理系统的一般技能，以及如何使用我们构建的工具是可移植的。PE 可以获取所有这些知识，并迁移到 Facebook 的任何团队，只要它们与 SWE 团队构建该服务共存。以这种方式进行协作比让运维团队和软件工程团队位于不同区域甚至不同时区要容易得多。
因此，为了回答原始问题，我们通过经理在 18 到 24 个月后询问 PE 在团队中的时间，问他们是否考虑过转会到另一个团队。一般来说，这个问题的答案是，“不，我喜欢我正在做的工作。我构建的服务还有待完善。我喜欢我的团队和工作。走开，以后再找我。”这并不坏，因为引入了可以转移的念头，让他们知道，可以考虑在某个时候移动，我们重视移动性。我们在 24 至 36 个月时再次讨论这个问题，我们开始寻找补充他们当前知识的东西。例如，如果存储团队中的 PE 工程师 Jane 已经在那里很长时间了，我们可能会问她是否考虑过加入内存缓存团队。谈话内容类似：“嘿，简，你已经在存储团队中工作一段时间了，我想确保你成为一个更全面的工程师。您是否考虑过迁移到缓存团队？他们需要像你这样的高级工程师，而且你拥有快速扩展系统的经验。当然，这是缓存，而不是存储，但您应该去与 Joan 讨论一下，看看发生了什么事情。”一般来说，她的回答是，"这听起来很有趣。让我去跟她谈谈。或者 Jane 会回来说，“你知道，我还有三四个月的工作，我想做。让我完成这个项目，然后我会考虑调到 Jone 的团队，或者每个月回来看看有啥可以露一手的。”当我们意识到，在我们所有的工程团队中，我们需要一个更好的方法来让人们有机会学习新的东西时，我们才意识到，每月的露一手就是黑客文化孕育出来的东西。每月的露一手有两个主要目的。其一：鼓励在同一项目工作超过一年的工程师离开团队一个月，从事完全不同的事情。许多人使用这个机会从他们正常的工作中暂时脱离。第二：找到一支新的团队，并看看自己是否想换个环境。在这两种情况下，团队都必须能够处理出人的问题，因此经理需要确保他们的人员配备处于良好水平，或者需要努力寻找其他人来接替他们的位置。
为了最好地评估这些想露一手的人，两个经理需要在这段时间内同步绩效。在某人学习新知识的情况下，通常有一个定义明确的项目，其结束状态可以客观地测量。在迁移到新团队的情况下，我们给人们进入新空间的机会，我们在绩效评估中考虑到这一点。在团队工作 36 个月后，我们更直接地与工程师讨论要迁移到另一个团队的问题。我们这样做是因为我相信，当人们陷入困境时，他们可以放慢团队的进步。当新的 PE（或 SWE）加入团队并提出新想法时，他们可能会被熟悉系统工作方式的工程师拒绝。成熟的工程师可能会拒绝这个新的想法，因为它改变了他们的思维定势，并改变了他们对系统的舒适感。这可能会扼杀创新。我们实际上已经经历过这种情况，因此，当工程师在同一团队中工作三年或更长时间时，我们对于将工程师转移到新团队方面更具规范性。随着我们向新的地区扩展，达到这三年成绩的工程师应该有足够的移动性，可以进入其他团队。
我们有不少高级工程师，他们一遍又一遍地换团队。他们背后有自己的想法，比如管理者如何影响他们，他们如何影响自己，他们如何相互交谈，是否容易转换团队，以及如果他们再次出现自我认知问题，他们如何面对自己的选择。我们鼓励这些工程师坦率地分享他们的故事，因为它让其他人从非管理者的角度深入了解这一过程。如果一个工程师遇到自我认知问题，但知道他们的经理非常支持他的决定，这使它更容易。如果围绕它们构建的组织提供此机制来尝试新事物，而不再过多地担心自己的表现，那么转换团队就变成了一个更流畅的过程。大卫： 成为成功的生产工程师需要什么？
佩德罗：我将尝试列出一些想到的关键特征：
专注于完成工作