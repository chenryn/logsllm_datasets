```
# kubectl config set-credentials mysa --token=${CI_ENV_K8S_SA_TOKEN}  
```
接下来，我们将上下文设置为与用户和名称空间绑定:
```
# kubectl config set-context myctxt --cluster=mycluster --user=mysa  
```
最后，我们将我们的上下文`myctxt`设置为默认上下文:
```
# kubectl config use-context myctxt  
```
当服务帐户发送请求时，令牌将由应用编程接口服务器验证，以检查请求者是否合格，以及它是否是它声称的那样。
# 用户帐户验证
用户帐户身份验证有几种实现方式。从客户端证书、承载令牌、静态文件到 OpenID 连接令牌。您可以选择多个作为身份验证链。在这里，我们将演示客户端证书如何工作。
在[第 7 章](07.html#4REBM0-6c8359cae3d4492eb9973d94ec3e4f1e)*连续配送*中，我们学习了如何导出服务账户的证书和代币。现在，让我们学习如何为用户做到这一点。假设我们仍然在`project1`命名空间内，我们想为我们的新 DevOps 成员 Linda 创建一个用户，她将帮助我们为我的应用进行部署。
首先，我们将通过 OpenSSL 生成一个私钥([https://www.openssl.org](https://www.openssl.org)):
```
// generate a private key for Linda
# openssl genrsa -out linda.key 2048  
```
接下来，我们将为 Linda 创建一个证书签名请求(`.csr`):
```
// making CN as your username
# openssl req -new -key linda.key -out linda.csr -subj "/CN=linda"  
```
现在，`linda.key`和`linda.csr`应该位于当前文件夹中。为了批准签名请求，我们需要找到 Kubernetes 集群的 CA。
In minikube, it's under `~/.minikube/`. For other self-hosted solutions, normally it's under `/etc/kubernetes/`. If you use kops to deploy the cluster, the location is under `/srv/kubernetes`, where you could find the path in `/etc/kubernetes/manifests/kube-apiserver.manifest` file.
假设我们在当前文件夹下有`ca.crt`和`ca.key`，我们可以通过我们的签名请求生成证书。使用`-days`参数，我们可以定义过期日期:
```
// generate the cert for Linda, this cert is only valid for 30 days.
# openssl x509 -req -in linda.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out linda.crt -days 30
Signature ok
subject=/CN=linda
Getting CA Private Key  
```
在我们的集群签署证书之后，我们可以在集群中设置一个用户。
```
# kubectl config set-credentials linda --client-certificate=linda.crt --client-key=linda.key
User "linda" set.  
```
记住上下文的概念:它是集群信息、用于身份验证的用户和名称空间的组合。现在，我们将在`kubeconfig`中设置一个上下文条目。请记住从以下示例中替换您的群集名称、命名空间和用户:
```
# kubectl config set-context devops-context --cluster=k8s-devops.net --namespace=project1 --user=linda
Context "devops-context" modified.  
```
琳达应该没有权限:
```
// test for getting a pod 
# kubectl --context=devops-context get pods
Error from server (Forbidden): User "linda" cannot list pods in the namespace "project1". (get pods)  
```
琳达现在通过了认证阶段，而 Kubernetes 知道她是琳达。但是，为了让 Linda 拥有部署权限，我们需要在授权模块中设置策略。
# 批准
Kubernetes 支持几个授权模块。在我们撰写本文时，它支持:
*   列线图
*   RBAC
*   节点授权
*   web 手册
*   自定义模块
**基于属性的访问控制** ( **ABAC** )是引入**基于角色的访问控制** ( **RBAC** )之前的主要授权模式。kubelet 使用节点授权向 API 服务器发出请求。Kubernetes 支持 webhook 授权模式，与外部 RESTful 服务建立 HTTP 回调。每当面临授权决定时，它都会进行开机自检。另一种常见的方式是，您可以通过遵循预定义的授权者界面来实现您的内部模块。更多实现信息，请参考[https://kubernetes . io/docs/admin/authorization/# custom-modules](https://kubernetes.io/docs/admin/authorization/#custom-modules)。在本节中，我们将描述 ABAC 和 RBAC 的更多细节。
# 基于属性的访问控制(ABAC)
ABAC 允许管理员在一个文件中定义一组用户授权策略，每行一个 JSON 格式。ABAC 模式的主要缺点是启动应用编程接口服务器时必须存在策略文件。文件中的任何更改都需要使用`--authorization-policy-file=`命令重新启动 API 服务器。自 Kubernetes 1.6 以来，RBAC 引入了另一种授权方法。这样更灵活，不需要重启 API 服务器。RBAC 现在已经成为最常见的授权模式。
以下是 ABAC 如何工作的一个例子。策略文件的格式是每行一个 JSON 对象。该策略的配置文件类似于我们的其他配置文件。只是规范中的语法不同。ABAC 有四大房产:
| **属性类型** | **支持值** |
| 主题匹配 | 用户、组 |
| 资源匹配 | `apiGroup`、名称空间和资源 |
| 非资源匹配 | 用于非资源类型请求，如`/version`、`/apis`、`/cluster` |
| 只读的 | 对还是错 |
以下是一些例子:
```
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user":"admin", "namespace": "*", "resource": "*", "apiGroup": "*"}} 
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user":"linda", "namespace": "project1", "resource": "deployments", "apiGroup": "*", "readonly": true}} 
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user":"linda", "namespace": "project1", "resource": "replicasets", "apiGroup": "*", "readonly": true}} 
```
在前面的例子中，我们有一个可以访问所有内容的用户管理员。另一个名为`linda`的用户只能读取命名空间`project1`中的部署和复制集。
# 基于角色的访问控制(RBAC)
RBAC 在 Kubernetes 1.6 测试版中，默认情况下是启用的。在 RBAC，管理员创建几个`Roles`或`ClusterRoles`，它们定义了细粒度的权限，指定了角色可以访问和操作的一组资源和动作(动词)。之后，管理员通过`RoleBinding`或`ClusterRoleBindings`向用户授予`Role`权限。
If you're running a minikube, add `--extra-config=apiserver.Authorization.Mode=RBAC` when doing `minikube start`. If you're running self-hosted cluster on AWS via kops, adding `--authorization=rbac` when launching the cluster. Kops launches API server as a pod; using `kops edit cluster` command could modify the spec of the containers.
# 角色和集群角色
Kubernetes 中的`Role`绑定在一个名称空间内，而`ClusterRole`则是集群范围的。下面是`Role`的一个例子，它可以完成所有的操作，包括`get`、`watch`、`list`、`create`、`update`、`delete`、`patch`到资源部署、复制集和 Pod 。
```
# cat 8-5-2_role.yml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
 namespace: project1
 name: devops-role
rules:
- apiGroups: ["", "extensions", "apps"]
 resources:
 - "deployments"
 - "replicasets"
 - "pods"
 verbs: ["*"]
```
我们写书的时候`apiVersion`还是`v1beta1`。如果碰巧 API 版本发生了变化，Kubernetes 会抛出错误并提醒您进行更改。在`apiGroups`中，空字符串表示核心应用编程接口组。API 组是 RESTful API 调用的一部分。核心表示原始的 API 调用路径，如`/api/v1`。较新的 REST 路径中有组名和 API 版本，如`/apis/$GROUP_NAME/$VERSION`；要查找您想要使用的应用编程接口组，请查看[https://kubernetes.io/docs/reference](https://kubernetes.io/docs/reference)的应用编程接口参考。在“资源”下，您可以添加要授予访问权限的资源，在“动词”下，列出此角色可以执行的一系列操作。让我们进入`ClusterRoles`的一个更高级的示例，我们在上一章中将其用作连续交付角色:
```
# cat cd-clusterrole.yml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
 name: cd-role
rules:
- apiGroups: ["extensions", "apps"]
 resources:
 - deployments
 - replicasets
 - ingresses
 verbs: ["*"]
 - apiGroups: [""]
 resources:
 - namespaces
 - events
 verbs: ["get", "list", "watch"]
 - apiGroups: [""]
 resources:
 - pods
 - services
 - secrets
 - replicationcontrollers
 - persistentvolumeclaims
 - jobs
 - cronjobs
 verbs: ["*"]
```
`ClusterRole`是集群范围。有些资源不属于任何名称空间，比如节点，只能由`ClusterRole`控制。它可以访问的名称空间取决于它关联的`ClusterRoleBinding`中的`namespaces`字段。我们可以看到，我们授予了该角色在扩展和应用组中读写部署、复制集和导入的权限。在核心 API 组中，我们只授予对名称空间和事件的访问权限，以及对其他资源(如 pods 和服务)的所有权限。
# 角色绑定和集群角色绑定
一个`RoleBinding`用于将一个`Role`或`ClusterRole`绑定到一个用户或服务账户列表。如果一个`ClusterRole`绑定了一个`RoleBinding`而不是一个`ClusterRoleBinding`，它将只被授予`RoleBinding`指定的名称空间内的权限。以下是`RoleBinding`规格的示例:
```
# cat 8-5-2_rolebinding_user.yml  
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
 name: devops-role-binding
 namespace: project1
subjects:
- kind: User
 name: linda
 apiGroup: [""]
roleRef:
 kind: Role
 name: devops-role
 apiGroup: [""]
```