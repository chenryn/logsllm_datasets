might be used for this.
Even though we argued against such methods for estab-
lishing communication, they could be useful for maintaining
an open session. We derive this from the fact that the num-
ber of potential parties that may contact a host will typically
be much larger than the number of sessions open at any one
time. Thus we see that Incomparable Public Keys can be
used for the initiation of a session when the number of pos-
sible initiators is large, after which we can switch to method
that is more eﬃcient for open sessions.
I
EKR(KA, KI), sx
R
EKI (KB), sy, HM ACK0(sx, sy)
K0 = H(KA, KB)
KS = H(sxy)
Figure 1: The SKEME protocol where only the respon-
der is authenticated. The parties use KS as their session
key that was derived from a Diﬃe-Hellman key exchange.
The exchange is authenticated using public key encryption
instead of signing.
4.3 Implementation
In this section, we describe a prototype implementation
that demonstrates how our method could be used in prac-
tice. We chose to implement the prototype by extending
an existing application in order to show that our method is
easily adapted to the needs of established applications.
We implemented our scheme by modifying the popular
Pretty Good Privacy (PGP) encryption software suite [3].
In particular, we modiﬁed GnuPG 1.2.0 [21], a free soft-
ware replacement for PGP. PGP already enjoys a large num-
ber of users, many of whom are interested in protecting
receiver anonymity. Some of these users direct senders to
send encrypted messages to anonymous newsgroups such as
alt.anonymous.messages. The receiver attempts to maintain
anonymity among all of the readers of the newsgroup. These
newsgroups can be viewed as multicast addresses.
Our prototype uses the ElGamal-based encryption scheme
of Section 3.4. Fortunately, the GnuPG software already
included an implementation of the standard ElGamal algo-
rithm, so we were able to reuse most of the existing code.
Our Incomparable Public Key scheme is presented to the
user as a separate algorithm, leaving the original signing
and encryption algorithms intact.
The most signiﬁcant modiﬁcations we made to the code
were in the public key export function. PGP’s public key
export function allows a user to take a public key from his
public key database and export it into a text ﬁle. Another
user may then add that public key to their database by “im-
porting” the public key from that ﬁle into their database.
/
/
o
o
We modiﬁed the key export function so that it wrote into
the ﬁle a newly generated public key that is incomparable
but equivalent to the one in the user’s database. The ef-
fect of this is that whenever a user passes a public key to
another user, the key that is passed will be a new, incompa-
rable one; so diﬀerent users’ databases will contain diﬀerent,
Incomparable Public Keys for the same receiver.
A few other code changes were required. For example, we
changed the code to use the same (suitably chosen) 1024-bit
prime as the modulus in all Incomparable Public Keys, so
as to avoid leaking information in the modulus. PGP also
attaches to each key an identifying user ID, consisting of
the key owner’s name and e-mail address. We eﬀectively re-
moved the user ID by modifying the code to attach the same
dummy user ID to all keys. A sender who has multiple keys
to manage can still refer to them by their key ﬁngerprints.
The encryption and decryption functions were kept un-
changed. PGP by default appends the ﬁngerprint of the
key used for encryption to an encrypted message. A user
can invoke an option to disable this feature and encrypt in
what PGP calls “anonymous receiver” mode. We enforce
the use of this option for all messages encrypted with an
Incomparable Public Key.
The code for our implementation is available at http:
//www.cs.princeton.edu/~bwaters/research.
5. SUMMARY
We have seen that the correct choice of an encryption
scheme is a crucial aspect to providing true receiver
anonymity. Current encryption techniques either allow keys
to be compared, which degrades anonymity, or require the
receiver to try a large number of keys for each decryption.
We solve this problem by introducing a new type of en-
cryption scheme, which we call an Incomparable Public Key
scheme. Using an Incomparable Public Key scheme a re-
ceiver can generate a large number of equivalent public keys.
Anonymity is maintained since public keys cannot be tested
for equivalence. The scheme is eﬃcient because only one
secret key needs to be used for decryption. We were able
to realize an Incomparable Public Key scheme by making
novel use of the ElGamal cryptosystem.
We then analyzed our scheme in a practical setting and
found that it oﬀered the best combination of eﬃciency and
true receiver anonymity for when there were many possible
senders. Finally, we implemented our Incomparable Public
Key scheme into the popular GnuPG software encryption
suite.
6. ACKNOWLEDGMENTS
We would like to thank Lujo Bauer, Dan Boneh, Carl
Kingsford, Ruoming Pang, and Iannis Tourlakis for helpful
suggestions over the course of this project. We are also
grateful for the advice of the anonymous reviewers.
7. REFERENCES
[1] Mihir Bellare, Alexandra Boldyreva, Anand Desai, and
D. Pointcheval. Key-privacy in public-key encryption.
Lecture Notes in Computer Science, 2248, 2001.
[2] Mihir Bellare and Chanathip Namprempre.
Authenticated Encryption: Relations among notions
and analysis of the generic composition paradigm.
Advances in Cryptology - Asiacrypt 2000 Proceedings,
Lecture Notes in Computer Science, 1976, 2000.
[3] Jon Callas, Lutz Donnerhacke, Hal Finney, and
Rodney Thayer. RFC 2440: OpenPGP message
format, November 1998. Status: PROPOSED
STANDARD.
[4] David Chaum. Untraceable electronic mail, return
addresses, and digital pseudonyms. Proceedings of
Communications of the ACM, 24(2):245–253, 1981.
[5] David Chaum. The dining cryptographers problem:
Unconditional sender and recipient untraceability.
Journal of Cryptology 1(1), pages 65–75, 1988.
[6] Wei Dai. Crypto++ 4.0 benchmarks.
http://www.eskimo.com/~weidai/benchmarks.html.
[7] George Danezis, Roger Dingledine, David Hopwood,
and Nick Mathewson. Mixminion: Design of a type III
anonymous remailer protocol, 2002.
http://mixminion.net.
[8] Tahir ElGamal. A public-key cryptosystem and a
signature scheme based on discrete logarithms.
Advances in Cryptology Proceedings of CRYPTO 84,
pages 10–18, 1985.
[9] David Goldschlag, Michael Reed, and Paul Syverson.
Onion routing for anonymous and private internet
connections. Communications of the ACM (USA),
42(2):39–41, 1999.
[10] Philippe Golle, Markus Jakobsson, Ari Juels, and Paul
Syverson. Universal Re-encryption for Mixnets, 2003.
http://crypto.stanford.edu/~pgolle/papers/
univrenc.html.
[11] Hugo Krawczyk. SKEME: A versatile secure key
exchange mechanism for the Internet. In Symposium
on Network and Distributed Systems Security, pages
114–127, 1996.
[12] David Mazi`eres and M. Frans Kaashoek. The design,
implementation and operation of an email pseudonym
server. Proceedings of the 5th ACM Conference on
Computer and Communications Security, pages 27–36,
1998.
[13] Moni Naor and Moti Yung. Public-key cryptosystems
provably secure against chosen ciphertext attacks. In
Proceedings of the 22nd Annual Symposium on Theory
of Computing, 1990.
[14] Andreas Pﬁtzmann and Michael Waidner. Networks
without user observability. Lecture Notes in Computer
Science, 219:245–253, 1986.
[15] Charles Rackoﬀ and Daniel Simon. Non-interactive
zeroknowledge proof of knowledge and chosen
ciphertext attack. Advances in Cryptlogy CRYPTO
’91, Lecture Notes in Computer Science, 576, 1991.
[16] Josyula R. Rao and Pankaj Rohatgi. Can
pseudonymity really guarantee privacy? In
Proceedings of the Ninth USENIX Security
Symposium, pages 85–96. USENIX, August 2000.
[17] Michael K. Reiter and Aviel D. Rubin. Crowds:
anonymity for Web transactions. ACM Transactions
on Information and System Security, 1(1):66–92, 1998.
[18] Rob Sherwood, Bobby Bhattacharjee, and Aravind
Srinivasan. P5: A protocol for scalable anonymous
communication. In IEEE Symposium on Security and
Privacy, 2002.
[19] Clay Shields and Brian Levine. A protocol for
anonymous communication over the internet. In
Proceedings of the 7th ACM Conference on Computer
and Communication Security, Athens, Greece, 2000.
[20] Paul Syverson, David Goldschlag, and Michael Reed.
Anonymous connections and onion routing. In IEEE
Symposium on Security and Privacy, pages 44–54,
Oakland, California, 4–7 1997.
[21] The GNU Privacy Guard. http://www.gnupg.org.
APPENDIX
A.
INCOMPARABLE PUBLIC KEY DEFI-
NITION
In this section we formally deﬁne the Generation of Public
Keys requirement and the Key-Privacy requirement given in
Section 3.
For the discussion we will use the following notation. G
will serve as a common key generator that given a security
parameter k will produce the common key I. I will serve
as a common global parameter for key generation. K is a
secret key generation algorithm that given I will randomly
generate a secret key. L is an algorithm that given a private
key will randomly generate a corresponding Incomparable
Public Key.
A.1 Generation of Public Keys
We deﬁne the following two experiments. We derive I R←
G(k) as the global parameter shared by both experiments.
Experiment1(I, K, L)
R← K(I)
R← L(sk0)
R← L(sk0)
sk0
pk0
pk1
output(pk0, pk1)
Experiment2(I, K, L)
R← K(I)
R← K(I)
R← L(sk0)
R← L(sk1)
sk0
sk1
pk0
pk1
output(pk0, pk1)
The Generation of Public Keys requirement is then sat-
isﬁed if no (computationally bounded in poly-time(k)) ad-
versary A can gain more than a negligible advantage when
attempting to distinguish the output from the two experi-
ments. We give the adversary a decryption oracle, O and
denote the adversary as A
O.
In Experiment1 the two equivalent public keys were de-
rived from the same private key, whereas in Experiment2
two non-equivalent public keys were generated from two dif-
ferent private keys that were generated to the same set of
global parameters.
A.2 Key-Privacy
We require that an Incomparable Public Key scheme meets
Bellare et al.’s Key-Privacy requirement [1]. Speciﬁcally, we
require the indistinguishability of keys under chosen plain-
text attack. Suppose an adversary is given two public keys
and a ciphertext message that was encrypted with one of
the public keys. The Key-Privacy requirement states that
an adversary will have at most a negligible advantage in de-
termining which key was used for encrypting the message.
In Bellare et al.’s deﬁnition the authors deﬁne an exper-
iment where the two public keys are both generated ran-
domly and independently. We also want the Key-Privacy
property to hold for the case when two public keys are cho-
sen randomly, but derived from the same private key (i.e.,
the keys are equivalent). We deﬁne two experiments to de-
ﬁne Key-Privacy as it pertains to Incomparable Public Keys.
The ﬁrst one is the same as Bellare et al.’s and the second
one is adjusted slightly to account for equivalent public keys.
Let A be any (computationally bounded in poly-time(k))
adversary, x be a message chosen by the adversary to be en-
crypted, s be state information that the adversary uses, and
E be the encryption algorithm. I R← G(k) is the common
global parameter.
Experimentnon−equivkeys(b, I, K, L)
R← K(I)
sk0
R← K(I)
sk1
R← L(sk0)
pk0
R← L(sk1)
pk1
(x, s) R← A(“ﬁnd x”, pk0, pk1)
y R← Epkb(x)
d R← A(“guess b”, y, s)
output(d)
A scheme is secure if all adversaries have at most a negligible
advantage in guessing b.
The second deﬁnition is as follows.
Experimentequivkeys(b, I, K, L)
R← K(I)
sk0
R← L(sk0)
pk0
R← L(sk0)
pk1
(x, s) R← A(“ﬁnd x”, pk0, pk1)
y R← Epkb(x)
d R← A(“guess b”, y, s)
output(d)
Both public keys are derived from the same private key.
Again a scheme is secure if all adversaries have at most a
negligible advantage in guessing b.
Bellare et al. show that the ﬁrst deﬁnition of Key-Privacy
holds for the ElGamal cryptosystem if the cryptosystem is
secure. The second deﬁnition of Key-Privacy will hold un-
conditionally for two equivalent ElGamal keys since any par-
ticular encryption of a message is equally likely to have come
from either one of two equivalent keys.
B. PROOF FOR ELGAMAL IMPLEMEN-
TATION
We re-examine the experiment deﬁned in Appendix A.1
with the ElGamal implementation substituted in. We as-
sume the global parameter I = p (the prime component of
a key) has already been generated.
Experiment1(I, K, L)
R← K(I)
(cid:2)
a = sk0
(g, ga) = pk0
(cid:2)a) = pk1
(g
output(pk0, pk1)
R← L(sk0)
R← L(sk0)
, g
Experiment2(I, K, L)
R← K(I)
R← K(I)
a = sk0
(cid:2) = sk1
a
(g, ga) = pk0
(cid:1)
(g
output(pk0, pk1)
) = pk1
, g
(cid:2)a
(cid:2)
R← L(sk0)
R← L(sk1)
In each distribution a decryption oracle, O, is provided.
The oracle is instantiated with private keys and with one
or more valid public keys for each private key. The oracle,
when give a ciphertext, will output a list of valid decryptions
of that ciphertext given for the keys it has.
We prove that there cannot exist a (poly-time) distin-
O, between the two experiments. We prove this
guisher, A
by contradiction. Suppose there is a distinguisher between
the two experiments. We can take advantage of it in the fol-