will not repeat this mistake. Similarly, we assume that address ﬁl-
ters prevent communication with only a relatively small number
of IP addresses. Unlike systems such as Telex and Cirripede [38],
however, StegoTorus can potentially work even if the only protocol
allowed to cross the perimeter is unencrypted HTTP.
It is diﬃcult for two parties to communicate securely if they
have never communicated securely in the past. Tor users must ﬁrst
obtain the Tor client and learn the address of at least one relay, via
some extra-Tor method. Similarly, StegoTorus users must obtain the
StegoTorus client (as well as the Tor client) and learn the address
and public key of at least one StegoTorus server. We assume that
all necessary software and an initial server contact can be smuggled
over the perimeter, via “sneakernet” if necessary.
Since we anticipate that StegoTorus servers will be aggressively
blocked with address ﬁlters, we are developing a “rendezvous”
mechanism for distributing server address updates to StegoTorus
users [45]. In this paper we assume that the user knows contact
information for server(s) that have not yet been blocked.
3. CHOPPING AND REASSEMBLY
As we described brieﬂy in Section 2, chopping converts the traﬃc
on a Tor link into a more malleable format: a sequence of variable-
size blocks, independently padded and deliverable out of order.
Every byte of each block is computationally indistinguishable from
randomness, as deﬁned in [62]; this is a baseline requirement for the
hiddentext in theoretically secure steganographic schemes. [37, 66]
The module that performs this job (and its inverse) is, naturally,
called the chopper.
The block format is shown in Figure 2a. The bulk of each block
is encrypted using AES in GCM mode [25], which provides both
conﬁdentiality and message integrity [7]. The block header consists
of a 32-bit sequence number; two length ﬁelds, d and p, indicating
respectively how much data and padding the block carries; an op-
code ﬁeld, F, discussed below; and a 56-bit check ﬁeld, which must
be zero. The minimum block length is 32 bytes (128-bit header,
128-bit MAC) and the maximum is 217 + 32 bytes. Block length is
controlled by the steganography modules; the chopper will fabricate
blocks exactly as long as requested, using data if possible, padding
if there is not enough. Padding consists of binary zeroes. Blocks
containing only padding (d = 0) are generated when there is no data
available but the cover protocol requires transmission.
The sequence number permits the receiver to sort incoming blocks
into their original order.
It serves the same function as a TCP
sequence number, but it always starts at zero, counts blocks rather
than bytes, and may not wrap around (see Section 3.3). It also serves
to ensure that the same header is never transmitted twice. This is
important because the header must also be encrypted to render it
indistinguishable from randomness, and needs integrity protection
to preclude chosen-ciphertext attacks [2, 9], but we can’t include it
in the data authenticated by GCM because we have to decrypt d and
p in order to know where the authentication tag begins.
Instead, we protect the header with a custom short-message au-
thenticated encryption mode that relies only on the basic AES pseu-
dorandom permutation. The check ﬁeld brings the header up to
exactly the AES block size, and we encrypt it as a standalone block
with a diﬀerent key from that used for the payload. Before the
receiver acts on a decrypted header, it veriﬁes that every bit of the
check ﬁeld is zero, and that the sequence number is within a 256-
block-wide receive window. An active attacker who modiﬁes the
ciphertext of the header has less than one chance in 280 of passing
this veriﬁcation. We recycle the ciphertext of the header as the GCM
nonce for the payload.
3.1 Function Codes
The F ﬁeld of the block header controls how the receiver will
process the block. All presently-deﬁned codes are listed in Table 1.
Some codes are only valid in handshakes; see below.
No. Name
Semantics
0
1
2
3
data
fin
rst
rc
nc
ns
4
5
6
7
8–127
128–255
rki
rkr
Application data to be relayed.
Last block of application data to be relayed.
Protocol error; close the link immediately.
Reconnect: associate this new connection with
an existing link.
New link, client side. See section 3.2 for details.
New link, server side.
Initiate rekeying; see Section 3.3 for details.
Respond to rekeying.
Reserved for future deﬁnition.
Reserved for steganography modules.
Table 1: Codes for the F ﬁeld
3.2 Handshake Messages
The ﬁrst few bytes of data sent on each new connection are a
handshake message (henceforth just “handshake”), which informs
1110
1
2
3
4
seq no
6
5
d
7
p
8
9
10
11
12
13
14
15
16
temporary key material
p
a
d
F
check = 0
0
d ≥ 32
p
nc
0
p
a
d
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
data and padding
authentication tag
ECDH message 1
optional access token
authentication tag
(a) Blocks consist of a header, up to 215 − 1 bytes each of data and padding,
and an authentication tag. d: data length; p: padding length; F: function
code. d + p is not required to be a multiple of 16.
(b) A new-link request consists of a Möller key encapsulation, followed by
a block encrypted with the temporary key material. Four padding bits are
copied into the “check” ﬁeld to make them non-malleable.
0
1
2
0
3
4
5
6
d = 40
7
p
8
9
10
11
12
13
14
15
16
ns
0
ECDH message 2
new link ID
authentication tag
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
temporary key material
p
a
d
link ID , 0
0
0
rc
0
p
a
d
(c) A new-link response is a normal block, encrypted with the temporary
key material.
(d) A reconnection request is just a key encapsulation and a modiﬁed header.
The link ID replaces the sequence number, d and p must be zero, and there
is no authentication tag.
Figure 2: Message formats before steganography. Background shading indicates encryption mode. (cid:4): header encryption; (cid:4): GCM encryption; (cid:4): GCM
authentication tag; (cid:3): Möller key encapsulation. There are 16 bytes per row of each diagram.
the server whether this connection belongs to an existing link or to a
new one. If the connection belongs to a new link, the server replies
with a handshake of its own, and both peers derive new session
keys for the link from the data in the handshakes. There are three
handshake formats, shown in ﬁgures 2b, 2d, and 2c. Handshakes
have similar overall structure to blocks, but vary in details.
Most asymmetric cryptosystems’ ciphertexts are easily distin-
guished from randomness. We use Möller’s elliptic-curve key en-
capsulation mechanism [52], which is designed to produce random
ciphertexts. It can only be used to establish a weak shared secret,
which we refer to as “temporary key material.” It has the unfortunate
property of producing 164-bit messages, which must be padded to
a whole number of bytes. The padding bits could be ﬂipped by an
adversary without any visible eﬀect. To prevent this information
leak, the check ﬁeld of the header that immediately follows a key
encapsulation contains a copy of the padding. Also, the server must
maintain a replay cache of all key encapsulations it has seen recently,
and discard any handshake with a replayed encapsulation, even if
the data that follows is diﬀerent.
Each link has a nonzero, 32-bit link ID. The server chooses this ID
during link setup, making sure that it is unique among all active or
recently-active connections to the same server. It is never transmitted
in cleartext, so it need not be random.
Key derivation, whether from the temporary key material or from
Diﬃe-Hellman exchanges, is done with HKDF-SHA256 [42], salted
with the server’s public key, and produces four 128-bit AES keys:
server-to-client payload key, server-to-client header key, client-to-
server payload key, and client-to-server header key, in that order.
by a special block encrypted with the temporary key material. This
block has sequence number 0, and its F code is rc. Its ﬁrst 32
bytes are an ECDH message on the NIST standard curve P-256 [54],
derived from a source of strong randomness. Only the x-coordinate
of the public point is transmitted. If the client has an access token,
it follows immediately after the ECDH message.
If the server can decrypt this handshake and ﬁnds the access token
(if any) acceptable, it replies with its own handshake, shown in
ﬁgure 2c. This is a normal block, also encrypted with the temporary
key material provided by the client. It also has sequence number 0,
its F code is rs, and its contents are another ECDH message and
the link ID for the new link. Once the client receives this message,
both sides can complete the Diﬃe-Hellman exchange and derive
long-lived keys for the link. Subsequent blocks are encrypted with
those keys. The handshakes count as sequence number 0 in each
direction.
3.2.2 Reconnection Handshake
For new connections to established links, the client’s handshake
needs to be as short as possible. It is shown in ﬁgure 2d. As with a
new-link handshake, it begins with a randomly chosen Möller key
encapsulation, but instead of a block, only a modiﬁed header follows.
This header has p = 0, d = 0, and F = rc, and it carries the desired
link ID in place of the sequence number. Unlike normal blocks
with p = 0 and d = 0, the GCM authentication tag is omitted. The
client may transmit blocks, encrypted with the appropriate link keys,
immediately after this handshake (that is, in the same cover-protocol
message).
3.2.1 New Link Handshake
3.3 Rekeying
Link setup is loosely based on the STS protocol [18] and provides
forward secrecy. Initially, the client knows the server’s public key.
It has no asymmetric keypair of its own, but it may have an “access
token” which will identify it to the server. This token is opaque to
the client, and its contents are outside the scope of this paper.