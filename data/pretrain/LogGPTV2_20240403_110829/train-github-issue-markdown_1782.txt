Our current API strategy is to add annotations for new features. These
annotations are expected to overlay on top of the existing API fields, and
alter system behavior in other components. Our primary reason for annotations
today:
  1. They are unstructured and can be preserved in etcd even after the feature is graduated from alpha.
  2. They can contain arbitrarily complex values (like init containers) or simple fields (like hostname for pods)
Annotations come with a set of issues:
  1. Alpha annotations are not discoverable and do not show up in our docs - users don't know how to use the features, and we get no automatic benefits from swagger or other tools
    1. No way to communicate lifecycle via `kubectl explain` to end users
  2. Developers who implement those annotations must merge the value in to the internal or external types at various points in the lifecycle - conversion, validation, in client libraries, and in nested utilities.
    1. Client utilities that receive a partial struct (like `api.PodSpec`) must also receive a list of annotations that alter that pod spec (for things like init containers) and potentially merge those
    2. When an alpha feature is graduated, we typically change the implementation of that feature significantly as well (moving from annotation to field) which causes extra churn in the implementation, and the potential for new bugs
  3. Some alpha features may be missed by a developer unfamiliar with the annotation - without any of the normal tools to introspect code (code completion, reflective tests on structs) it is more likely that the impact of an annotation is missed when adding new code.
  4. The security implications of an annotation are harder to convey than a field, and code that allows annotation mutation but _not_ field annotation can be exposed to malicious authors accidentally (bind, status, and a few other sub resources that protect spec can be abused to mutate init containers, for example).
  5. A malicious user can introduce an annotation for an upcoming alpha feature on a cluster before the feature is introduced, which means that prior to enabling an alpha feature a cluster admin has to sweep all possible objects to ensure no dangerous annotations are set.
This occurred for init containers - podsecuritypolicy is applied at creation
time, but because init containers are represented as annotations a malicious
user can set an init container annotation before Kube 1.3 is rolled out, and
as soon as the cluster is upgraded that container would be executed. This
means that admins have to run a pre-upgrade migration to purge any dangerous /
out of policy annotations.
For these reasons, I believe we should not be using annotations for alpha
level fields internally, and probably not externally.
## Alternative
Instead, I believe we should represent alpha level fields in our Go structs
and clearly denote them as alpha (perhaps with an named prefix). Once the
feature is out of alpha, we would leave the alpha level field in the external
struct for at least 1 major version to allow upgraders to use that field. We
would then drop the alpha field, which would clean the database of that value.
Internal code would simply rename the field, and ignore the external field.
Alpha level fields would be denoted by struct tags that allowed them to show
up in swagger. Once we dropped support for the field, swagger would no longer
show them. We would have to have a "drop by default" rule in place for swagger
validations on fields that are no longer recognized for old alpha fields that
aren't supported, but that's what we want for alpha.
E.g.:
Kube 1.2:
    pod:
      spec:
        alphaInitContainers:  # silently dropped by the storage layer
        - name: init-1
Kube 1.3:
    pod:
      spec:
        alphaInitContainers: # visible in swagger
        - name: init-1
           ...
    $ kubectl explain pod.spec.alphaInitContainers
    This field allows you to provide specify "init containers" - run before other containers.
    ...
    Feature is alpha and may change without notice.
Kube 1.4:
    pod:
      spec:
        alphaInitContainers: # ignored, but visible in swagger.  kubectl validate could flag this as unsupported
        - name: init-1
        initContainers:
        - name: init-1
    $ kubectl explain pod.spec.alphaInitContainers
    This field has been removed - use pod.spec.initContainers
Kube 1.5
    pod:
      spec:
        alphaInitContainers: # fails kubectl validate - alpha is no longer supported
                             # silently dropped from storage whenever a pod is updated
        initContainers:
        - name: init-1
    $ kubectl explain pod.spec.alphaInitContainers
    This field has been removed - use pod.spec.initContainers