---
## Page 150
本文档使用 书栈(BookStack.CN) 构建
Docker
Docker
---
## Page 151
本文档使用 书栈(BookStack.CN) 构建
Kubernetes
Kuberr
---
## Page 152
本文档使用 书栈(BookStack.CN) 构建
Swarm
Swarm
---
## Page 153
本文档使用书栈(BookStack.CN)构建
Prometheus常见服务监控
Prometheus常见服务监控
---
## Page 154
Nginx
本文档使用 书栈(BookStack.CN) 构建
Nginx
---
## Page 155
本文档使用 书栈(BookStack.CN) 构建
Memcached
Mem
---
## Page 156
本文档使用 书栈(BookStack.CN) 构建
MongoDB
MongoDB
---
## Page 157
本文档使用 书栈(BookStack.CN) 构建
MySQL
MySQL
---
## Page 158
本文档使用 书栈(BookStack.CN) 构建
Redis
Redis
---
## Page 159
Prometheus 与 DevOps
本文档使用书栈(BookStack.CN)构建
Prometheus 与 DevOps
---
## Page 160
从0开发一个exporter
本文档使用书栈(BookStack.CN)构建
从0开发一
exporter
---
## Page 161
本文档使用书栈(BookStack.CN)构建
使用Webhooks 开发一个 alert receiver
使用Webhooks开发一
---
## Page 162
本文档使用书栈(BookStack.CN)构建
Prometheus监控告警系统的高可用主要分为两部分：
下面我们就针对这两个方面展开讨论。
高可用
高可用方案探讨
高可用方案探讨
·Prometheus Server 的高可用，无单点风险。
·高可用
·Alertmanager 的高可用，避免告警消息丢失和重复。
---
## Page 163
本文档使用书栈(BookStack.CN)构建
从 Prometheus1.8开始，增加了一个叫做 remote_read 的配
remote_read 简介
集群方案，
思路：使用remote_read来实现 Prometheus 数据的读写分离的
PrometheusServer 的高可靠方案
Prometheus Server 的高可靠
Prometheus Server 的高可靠
15.
3
2
LO
S
3
，详细信息如下：
·Prometheus Server 的高可靠方案
 # Sets the ^Authorization` header on every remote read request with
basic_auth:
# configured username and password.
# Timeout for requests to the remote read endpoint.
 url: 
 # The URL of the endpoint to query from.
[ bearer_token: 
# the configured bearer token. It is mutually exclusive with 
the
[ remote_timeout:  | default = 30s ] 
bearer_token_file`.
oremote_read 简介
[ password: 
[username: 
如何配置
部署架构
从而达到其高可用的目的，
下面我将具体讲解。
163-
---
## Page 164
本文档使用书栈(BookStack.CN)构建
部署架构
做到：
接口，
当然作为数据源被读取需要支持它的remotestoragereader的
Prometheus Server 的高可靠
remote_read
25.
4
Z
18.
17.
16.
·Prometheus 的读写可以在更多的存储引擎中进行，即你完可以
·Prometheus 的读写可以在不同的 Prometheus Server 进
使用InfluxDB作为数据库来存储数据。
行，即一个 Prometheus 读取其它 Prometheus 的数据。
，这么设计的目的是为了在新一代的存储架构里实现解耦，很方便
[ proxy_url: 
 # Optional proxy URL.
tls_config:
# read from the configured file. It is mutually exclusive with
# Sets the‘Authorization`
[ bearer_token_file:
`bearer_token`.
the bearer token 
[
参数用于远程读取数据，采用http协议。
/path/to/bearer/token/file ]
header on every remote read request with
---
## Page 165
本文档使用书栈(BookStack.CN) 构建
软件版本：
Prometheus 之间数据的读取过程。
下面我将通过本地实验向大家演示使用
如何配置
也更容易实现高可用。
通过这样的架构，
意，它只做实时的查询以及内存运算，不做数据存储。
数据查询的 Prometheus 会从收集到数据的节点中读取数据，请注
（例如B）和用于数据查询（例如A）。
不难发现，
架构说明：
Prometheus Server 的高可靠
·数据流统一采用拉取的方式。
Jobs1/Exporterst
Prometheus 版本：
 Server 
（B，C同理）。
ServerB
 架构中的 Prometheus 主要分为两类,
ReadOnly
PrometheusServerA
A'
我们就很容易将整个监控的数据收集查询分离开了，
表示 Server A 的镜像，
Jobs2/Exporters2
ServerB'
 prometheus-1.8.2.darwin-amd64
Read-Only
Prometheus ServerA'
Jobs3/Exporters3
remote_read
ServerC
具有相同的功能和数据
Read Only
用于数据收集
实现
ServerC'
Jobs4/Exporter4
- 165 -
---
## Page 166
本文档使用 书栈(BookStack.CN)构建
行验证。
完成配置，
配置信息如下：
数据。
node_exporter 数据,
本地运行三个！
实验内容：
Prometheus Server 的高可靠
2
2
S
3
2
·NodeExporter 版本: node_exporter-0.12.0.darwin-
amd64
#数据收集9092 的配置
# 数据收集9091 的配置
remote_read:
#数据读取的9099的配置
- job_name: 'node'
- job_name: 'node'
static_configs:
 static_configs:
- url: 'http://localhost:9091/api/v1/read;
 targets: ["localhost:9100"]
 targets: ["localhost:910o"]
 url: 'http://localhost:9092/api/v1/read
remote_timeout: 8s
remote_timeout: 8s
9092
 并成功启动此三个实例后，
 Prometheus Server,
端口。
其中
0606
9091
用来读取
，我们可以在它们自带的界面中进
和
它们分别运行在
9092
9091/
主要用来收集
9092
9090
收集的
166
---
## Page 167
本文档使用书栈(BookStack.CN)构建
支持聚合运算查询：
Prometheus Server 的高可靠
Prometheus Alerts
hode_load1
Prometheus
node_load1
Graph
loa
load1
Console
insert metricat cursor-
localhost:9090/
insertmetricatcursor-
nsert
Alerts
Alerts
tmetricatcursor
Graph
Graph
Graph
Help
口
☆
☆
今日阅读
口
---
## Page 168
本文档使用书栈(BookStack.CN)构建
署架构是完全是可行的。
同的 Prometheus Server 读取数据，
好了，到目前为止我们已经成功实现通过
Prometheus Server 的高可靠
Prometheus
Graph
Execute
avg(node_load1)
Graph
sum(node_load1)
Console
Console
insertmetricat cursor-
-insertmetric at cursor-
Alerts
Graph
Help
，这意味着我们先前讨论的部
remote_read 
配置实现从不
Gra
Grap
---
## Page 169
本文档使用书栈(BookStack.CN)构建
AlertManager的高可靠
AlertManager的高可靠
---
## Page 170
本文档使用 书栈(BookStack.CN) 构建
v2.x迁移注意
v2.x迁移注意
---
## Page 171
本文档使用 书栈(BookStack.CN) 构建
新功能
新功能
---
## Page 172
本文档使用 书栈(BookStack.CN) 构建
新存储架构
新存储架构
---
## Page 173
本文档使用 书栈(BookStack.CN) 构建
Rule新配置
Rule 新配置
---
## Page 174
本文档使用书栈(BookStack.CN)构建
常见问题收录
常见问题收录
---
## Page 175
本文档使用书栈(BookStack.CN)构建
提示：
如果因为配置信息填写不正确导致更新失败，将看到类似信息：
log 中看到如下信息：
当你采用以上任一方式执行 reload 成功的时候，将在 promtheus 
1.
热更新加载方法有两种：
供的热更新方法实现在不停服务的情况下实现配置文件的重新加载。
当 Prometheus 有配置文件修改，我们可以采用 Prometheus 提
如何热加载更新配置？
为什么重启Prometheus 过后，数据无法查询
为什么重启 Prometheus 过后，数据无法查询
·如何热加载更新配置？
我个人更倾向于采用curl-× POST 的方式，因为每次
 curl 
 kill -HUP pid
程号。
reload 过后，
job_nae  source=main.go:146
ERRo[0161] Error reloading config: couldn't load configuration （-
 -X POST http://IP/-/reload
ion file prometheus.yml
md64$
pid会改变，使用kill 方式需要找到当前进
eb.go:233
:g0:353
- 175
---
## Page 176
本文档使用书栈(BookStack.CN) 构建
2.
1．首先Prometheus 在 web（web/web.go）模块中注册了一个
第二种：通过web模块的
代码类似：
reloadconfig 函数。
统调用监听，如果收到
首先 Prometheus 在
第一种：通过kill 命令的 HUP（hangup）
下面我们再来探讨下这两种方式内部实现原理。
为什么重启 Prometheus 过后，数据无法查询
11
6
8
在Prometheus的
从 2.θ 开始，hotreload 功能是默认关闭的，如需开启，
POST 的 http 请求［/-/reload,
参数。
要在启动 Prometheus的时候，添加
web.reload 
()
!=nil { 
go func(）{
signal.Notify(hup, SyScall.SIGHUP)
hup := make(chan os.Signal)
for {
case <-hup:
select { 
 error 
 if err := reloadconfig(cfg.configFile, reloadables...); err
log.Errorf("Error reloading config: %s", err)
函数，
SySCall.SIGHUP 信号,
该函数主要向 
 cmd/promethteus/main.go 
 cmd/promethteus/main.go
/-/reload 
web.reloadch
它的 handler是
请求实现：
 --web.enable-lifecycle
）参数实现：
将执行
中有个单独的
中实现了对进程系
chan
里面发送
176-
---
## Page 177
本文档使用书栈(BookStack.CN)构建
Exporter 
置文件的修改和重新加载，在 Prometheus 生态中，很多
Prometheus 内部提供了成熟的 hot reload 方案，这大大方便配
代码类似：
为什么重启 Prometheus 过后，数据无法查询
15
切
2
6
8
9
S
3
：}（）
reloadconfig 函数。
err != nil { 
go func(）{
hupReady := make(chan bool)
for {
<-hupReady
也采用类似约定的实现方式。
case rc := <-webHandler.Reload(): 
select
 if err := reloadconfig(cfg.configFile, 
}else { 
 rc <-nil
 rc <- err
log.Errorf("Error reloading config: %s", err)
，当接受到新值的时候会执行
. reloadables...);
---
## Page 178
如何删除Pushgateway的数据
本文档使用书栈(BookStack.CN)构建
如何删除Pushgateway 的数据
---
## Page 179
本文档使用 书栈(BookStack.CN) 构建
为什么内存使用这么高
为什么内存使用这么高
---
## Page 180
本文档使用书栈(BookStack.CN)构建
为什么有数据丢失
为什么有数据丢失
---
## Page 181
本文档使用书栈(BookStack.CN)构建
Prometheus 如何通过认证后拉取数据
Prometheus 如何通过认证后拉取数据
---
## Page 182
本文档使用 书栈(BookStack.CN) 构建
监控JVM
监控JVM
---
## Page 183
本文档使用书栈(BookStack.CN)构建
监控 Ruby On Rails应用
监控 Ruby On Rails应用
---