as illustrated in the last line of Figure 3. In general,
regular expressions are fraught with danger when used for
sanitization [13].
Sanitization modules: To our surprise, none of the
modules uses a third-party sanitization module to prevent
Fig. 2: Prevalence of uses of
modules.
injection APIs in npm
all modules depend directly or indirectly on at least one
injection API.
Estimating the potential eﬀect of protecting vulnerable
modules shows that ﬁxing calls to the injection APIs in
the most popular 5% of all injection modules will protect
almost 90% of all directly dependent modules. While this
result is encouraging, it is important to note that 5% of
all modules still corresponds to around 780 modules, i.e.,
many more than would be reasonable to ﬁx manually.
Moreover, manually ﬁxing these modules now would be
a point-in-time solution that does not ensure the safety of
future versions of modules and of new modules.
B. RQ2: Usage
To understand why developers use injection APIs, we
identify recurring usage patterns and check whether the
usages could be replaced with less vulnerable alternatives.
We manually inspect a random sample of 50 uses of exec
and 100 uses of eval and identify the following patterns.
Patterns of exec usage: The majority of calls (57%)
trigger a single operating system command and pass a
sequence of arguments to it. For these calls, the developers
could easily switch to spawn, which is a safer API to use,
equivalent to the well-known execv functions in C. The
second-most common usage pattern (20%) involves multi-
ple operating system commands combined using Unix-style
pipes. For this pattern, we are not aware of a simple way
to avoid the vulnerable exec call. The above-mentioned
spawn accepts only one command, i.e., a developer would
have to call it multiple times and emulate the shell’s piping
mechanism. Another interesting pattern is the execution
of scripts using relative paths, which accounts for 10%
of the analyzed cases. This pattern is frequently used as
an ad-hoc parallelization mechanisms, by starting another
instance of Node.js, and to interoperate with code written
in other programming languages.
Patterns of eval usage: Our results of the usage of
eval mostly match those reported in a study of client-side
JavaScript code [32], showing that their ﬁndings extend
4
 0 5 10 15 20execevalexec-level-1eval-level-1exec-level-2eval-level-2total-level-2Percentage of npm modulesto be well maintained. We checked this hypothesis by mea-
suring the number of downloads between January 1 and
February 17, 2016 for three sets of modules: (i) modules
with vulnerabilities reported either by us or by others
via the Node Security Platform, (ii) all modules that call
an injection API, (iii) all modules in the npm repository.
Figure 4 summarizes our results on a logarithmic scale.
The boxes are drawn between the lower quartile (25%)
and the upper one (75%) and the horizontal line marks
the median. The results invalidate the hypothesis that
vulnerable modules are unpopular. On the contrary, we
observe that various vulnerable modules and injection
modules are highly popular, exposing millions of users to
the risk of injections.
E. Case Study: The growl Module
To better understand whether developers are aware
of possible injection vulnerabilities in modules that they
use, we manually analyzed 100 modules that depend on
growl. The growl module displays notiﬁcations to users by
invoking a particular command via exec, which is one of
the vulnerabilities we reported as part of RQ4. We found
that modules depending on growl pass various kinds of
data to growl, including error messages and data extracted
from web pages. As anticipated in RQ1, vulnerabilities
propagate along module dependences. For example, the
loggy module exposes the command injection vulnerability
in growl to 15 other modules that depend on loggy by
sending inputs directly to growl without any check or
sanitization.
We found only four modules that sanitize the data
before sending it to the vulnerable module: autolint, mqtt-
growl, bungle, and chook-growl-reporter. We report these san-
itizers in Figure 5. Sadly, we ﬁnd that all these methods
are insuﬃcient: one can easily bypass them, as illustrated
by the example input at the end of Figure 5. The input
again exploits the command substitution syntax, which is
not considered by any of the sanitizers.
Impact of our study: After we published a preliminary
version of this paper [39], several providers of Node.js
vulnerability databases included ﬁndings of the study as
vulnerability reports.5
IV. Overview
The previous section shows that the risk of injection
vulnerabilities is widespread, and that a practical tech-
nique to mitigate them must support module maintainers
who are not particularly responsive. Motivated by these
ﬁndings, this section presents Synode, a novel mitigation
approach that combines static analysis and runtime en-
forcement into a fully automatic approach to prevent injec-
tion attacks. To the best of our knowledge, our approach is
the ﬁrst to address the problem of injection vulnerabilities
in Node.js JavaScript code.
The overall idea of the mitigation technique is to pre-
vent injections at the call sites of injection APIs. Figure 6
5https://snyk.io/vuln/page/2?type=npm, CWE-94,
validator:20160408 and https://nodesecurity.io/advisories.
npm:nd-
Fig. 4: Comparison of the popularity of all the modules,
modules with calls to injection APIs, and modules with
reported vulnerabilities. The boxes indicate the lower quar-
tile (25%) and the upper quartile (75%); the horizontal line
marks the median; the dots are outliers.
injections. To validate whether any such modules exists,
we searched the npm repository and found six modules in-
tended to protect calls to exec against command injections:
shell-escape, escapeshellarg, command-join, shell-quote, bash,
and any-shell-escape. In total, 198 other modules depend on
one of these sanitization modules, i.e., only a small fraction
of the 19,669 modules that directly or indirectly use exec.
For eval, there is no standard solution for sanitization and
the unanimous expert advice is to either not use it at all in
combination with untrustworthy input, or to rely on well
tested ﬁlters that allow only a restricted class of inputs,
such as string literals or JSON data.
We conclude from these results that a large percentage
of the 15,604 modules that use injection APIs are poten-
tially vulnerable, and that standard sanitization techniques
are rarely used. Developers are either unaware of the
problem in the ﬁrst place, unwilling to address it, or unable
to properly apply existing solutions.
D. RQ4: Maintenance
To understand whether module developers are will-
ing to prevent vulnerabilities, we reported 20 previously
unknown command injection vulnerabilities to the devel-
opers of the modules that call the injection APIs. For
each vulnerability, we describe the problem and provide
an example attack. Most of the developers acknowledge
the problem. However, in the course of several months,
only three of the 20 vulnerabilities have been completely
ﬁxed, conﬁrming earlier observations about the diﬃculty
of eﬀectively notifying developers [8], [9], [41].
One may hypothesize that these vulnerabilities are
characteristic to unpopular modules that are not expected
5
 1 10 100 1000 10000 100000 1e+06 1e+07 1e+08 1e+09all modulesinjection modulesvulnerable modulesNumber of downloadsreturn text . replace ( ’$ ’, ’\\ $ ’);
/[\ u001b \ u009b ][[ ()#;? ]*
(? :[0 -9 ]{1 ,4} (? :;[0 -9 ]{0 ,4} )*)?
[0 -9A-ORZcf-nqry =><]/g;
1 // sanitization in autolint
2 function escape ( text ) {
3
4 }
5
6 // sanitization in mqtt-growl
7 message = message . replace (/"/g , " \\\" " );
8
9 // sanitization in bungle
10 const ansiRx =
11
12
13
14 Growl ( message . replace ( ansiRx , ’’));
15
16 // sanitization in chook-growl-reporter
17 function escapeForGrowl ( text ) {
18
19
20
21
22 }
23
24 // input that bypasses all the sanitizations :
25 // "tst ‘ rm -rf *‘";
var escaped = text . replace (/ \( /g , ’\\( ’);
escaped = escaped . replace (/ \) /g , ’\\) ’);
escaped = escaped . replace (/ \"" /g , ’\\"" ’);
return escaped ;
Fig. 5: Broken sanitization in growl’s clients.
Vulnerable
program
Static analysis
Templates for
strings passed to
injection APIs
Synthesis of
policy and
program rewriting
Program with
statically safe use
of injection APIs
Program with
runtime checks
Static
Dynamic
Runtime
inputs
Dynamic policy
enforcement
Safe runtime
behavior
Fig. 6: Architectural diagram of Synode.
shows an overview of the approach. Given a potentially
vulnerable JavaScript module, a static analysis summa-
rizes the values that may ﬂow into injection APIs in the
form of string templates, or short templates. A template is
a sequence consisting of string constants and holes to be
ﬁlled with untrusted runtime data. For call sites where the
analysis can statically show that no untrusted data may
ﬂow into the injection API, no further action is required
to ensure safe runtime behavior. Similar approaches for
identifying statically safe call sites are adopted in practice
for other languages, e.g., Java6 and Python7.
For the remaining call sites, the approach synthesizes
a runtime check and statically rewrites the source code
to perform this check before untrusted data reaches the
injection API. When executing the module, the rewritten
code enforces a security policy that checks the runtime
values to be ﬁlled into the holes of the template against
"ls -l"
(a) Constant string.
+
+
"messages.backup_" ALT
$cmd
" -l"
(b) Concatenation of vari-
able and constant.
"pics"
"other"
(c) Argument of eval in Figure 1.
join
push
" "
push
"~/.localBackup"
push
+
empty array
"cp"
$name
"."
$ext
(d) Argument of exec in Figure 1.
Fig. 7: Examples of template trees.
the statically extracted template. If this check fails, the
program is terminated to prevent an injection attack.
The Synode approach is conservative in the sense
that it prevents potential vulnerabilities without certain
knowledge of whether a vulnerability gets exploited by an
attacker. The reason for this design decision is twofold.
First, most Node.js modules are used in combination with
other modules, i.e., we cannot reason about the entire pro-
gram. Second, there is no trust model that speciﬁes which
module should sanitize untrusted inputs or even which
inputs are untrusted. Our assumption is that user inputs
and inputs from other modules are potentially attacker-
controlled, an assumption shared by the vulnerabilities
published at the Node Security Platform. Given these
constraints and assumptions, Synode protects users of
potentially vulnerable modules in an automatic way.
V. Static Analysis
We present a static analysis of values passed to injection
APIs. For each call site of such an API, the analysis
summarizes all values that may be passed to the called
function into a tree representation (Section V-A). Then,
the analysis statically evaluates the tree to obtain a set
of templates, which represent the statically known and
unknown parts of the possible string values passed to the
function (Section V-B). Finally, based on the templates,
the analysis decides for each call site of an injection API
whether it is statically safe or whether to insert a runtime
check that prevents malicious strings from reaching the
API (Section V-C).
A. Extracting Template Trees
6https://www.youtube.com/watch?v=ccfEu-Jj0as
7https://github.com/dropbox/python-invariant
The analysis is a ﬂow-sensitive, path-insensitive, intra-
procedural, backward data ﬂow analysis. Starting from a
6
Example
Templates
(a)
(b)
(c)
(d)
ta1 = ["ls -l"]
tb1 = [$cmd, " -l"]
tc1 = ["messages.backup_pics"]
tc2 = ["messages.backup_other"]
td1 = ["cp ", $name, ".", $ext, ,
" ~/.localBackup"]
Fig. 8: Evaluated templates for the examples in Figure 7.
call site of an injection API, the analysis propagates infor-
mation about the possible values of the string argument
passed to the API call along inverse control ﬂow edges.
The propagated information is a tree that represents the
current knowledge of the analysis about the value:
Deﬁnition 1 (Template tree). A template tree is an
acyclic, connected, directed graph (N ,E) where
• a node n ∈ N represents a string constant, a symbolic
variable, an operator, or an alternative, and
• an edge e ∈ E represents a nesting relationship between
two nodes.
Figure 7 shows several examples of template trees:
• Example (a) represents a value known to be a string
constant "ls -l". The template tree consist of a single
node labeled with this string.
• In example (b), the analysis knows that the value is
the result of concatenating the value of a symbolic
variable $cmd and the string constant " -l". The root
node of the template tree is a concatenation operator,
which has two child nodes: a symbolic variable node
and a string constant node.
• Example (c) shows the tree that the analysis extracts
for the values that may be passed to eval at line 10 of
Figure 1. Because the value depends on the condition
checked at line 9, the tree has an alternative node with
children that represent the two possible string values.
• Finally, example (d) is the tree extracted for the
value passed to exec at line 7 of Figure 1. This tree
contains several operation nodes that represent the
push operations and the string concatenation that are
used to construct the string value, as well as several
symbolic variable nodes and string constant nodes.
To extract such templates trees automatically, we use a
data ﬂow analysis [26], [1], which propagates template trees
through the program. Starting at a call site of an injection
API with an empty tree, the analysis applies the following
transfer functions:
that represents the value of the constant.
• Constants. Reading a string constant yields a node
• Variables. A read of a local variable or a function
parameter yields a node that represents a symbolic
variable.
• Operations. Applying an operation, such as concate-
nating two strings with +, yields a tree where the root
node represents the operator and its children represent
the operands.
• Calls. A call of a function yields a tree where the root
node represents the called function and its children
represent the base object and arguments of the call.
• Assignments. An assignment of the form lhs = rhs
transforms the current tree by replacing any occur-
rence of the symbolic variable that corresponds to lhs
by the tree that results from applying the transition
function to rhs.
Whenever the backward control ﬂow merges, the analysis
merges the two template trees of the merged branches.
The merge operation inserts an alternative node that has
the two merged trees as its children. To avoid duplicating
subtrees with identical information, the analysis traverses
the two given trees t1 and t2 to ﬁnd the smallest pair of
subtrees t(cid:48)
2 that contain all diﬀerences between t1
and t2, and then inserts the alternative node as the parent
of t(cid:48)
1 and t(cid:48)
2.
1 and t(cid:48)
Template tree construction example. For example,
consider the call site of eval at line 10 of Figure 1. Starting
from an empty tree, the analysis replaces the empty tree
with a tree that represents the string concatenation at
line 10. One child of this tree is a variable node that
represents the variable kind, which has an unknown value
at this point. Then, the analysis reasons backwards and
follows the two control ﬂow paths that assign "pics"
and "other" to the variable kind, respectively. For each
path, the analysis updates the respective tree by replacing
the variable node for kind with the now known string
constant. Finally, the variable reaches the merge point
of the backward control ﬂow and merges the two trees
by inserting an alternative node, which yields the tree in
Figure 7c.
B. Evaluating Template Trees
Based on the template trees extracted by the backward
data ﬂow analysis, the second step of the static analysis is
to evaluate the tree for each call site of an injection API.
The result of this evaluation process is a set of templates:
Deﬁnition 2 (Template). A template is a sequence t =
[c1, . . . , ck] where each ci represents either a constant string
or an unknown value (hole).
For example, the template trees in Figure 7 are evalu-
ated to the templates in Figure 8. To obtain the templates
for a given tree, the analysis iteratively evaluates subtrees
in a bottom-up way until reaching the root node. The
evaluation replaces operation nodes that have a known
semantics with the result of the operation. Our implemen-
tation currently models the semantics of string concate-
nation, Array.push, Array.join, and String.replace where
the arguments are constant strings. These operations cover
most templates trees that the analysis extracts from real-
world JavaScript code (Section VIII-A). For alternative
nodes, the evaluation considers both cases separately, du-
plicating the number of template trees that result from the
evaluation.
7
Finally, the analysis transforms each evaluated tree into
a template by joining continuous sequences of characters
into constant strings and by representing all symbolic
values and unknown operations between these constants
as unknown values.
C. Identifying Statically Safe Calls