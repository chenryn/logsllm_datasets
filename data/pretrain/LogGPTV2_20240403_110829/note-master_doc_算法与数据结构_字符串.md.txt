# 字符串
## 排序
- 低位优先排序
```java
public static void sort(String[]a,int W) {
        int N = a.length;
        int R = 256;
        String[] aux = new String[N];
        //循环W次键索引记数法
        for(int d = W-1; d>=0;d--) {
            int[] count = new int[R+1];
            //键索引记数法第一步--频率统计
            for(int i=0;iv)	exch(a,i,gt--);
            else i++;
        }
        sort(a,lo,lt-1,d);
        if(v>=0) sort(a,lt,gt,d+1);
        sort(a,gt+1,hi,d);
    }
}
```
## 单词查找树
trie 树存储的开销要小得多，并且因为它天然的前缀匹配和排序的特性，在很多时候也能更快检索数据
```mermaid
stateDiagram-v2
    g --> o
    o --> l
    l --> d
    l --> a
    a --> n
    n --> s
```
- 查找
- 插入
- 查询所有键 
  - 通过递归的方式，如果有分叉，则生成一个由pre+branch的新字符串
```java
public Interable keys() {
  return keysWithPrefix("");
}
public Interable keysWithPrefix(String pre) {
  Queue q = new Queue();
  collect(get(root, pre, 0), pre, q);
  return q;
}
private void collect(Node x, String pre, Queue q) {
  if (x == null) return;
  if (x.val != null) q.enqueue(pre);
  for (char c = 0; c  {AB}
- 或
Ａ|B -> {A,B}
- 闭包
Ｂ* -> 0个或多个Ｂ
### 构造正则表达式
![](/assets/20233916432.png)
## 数据压缩
### 游程编码
行程编码（Run Length Encoding，RLE), 又称游程编码、行程长度编码、变动长度编码 等，是一种统计编码。主要技术是检测重复的比特或字符序列，并用它们的出现次数取而代之
### 哈夫曼编码
用较少的比特表示出现次数多的字符，用较多的比特表示出现频率低的字符，不同的字符编码间不能彼此成为对方的前缀
- 使用单词查找树实现
使用变长前缀，用一棵二叉树来标记每个字符的编码方式，左分支代表 0、右分支代表 1，所有需要编码的字符都对应二叉树的叶子节点，根结点到该叶子结点的路径就代表着该字符的编码方式
![哈夫曼编码算法1](/assets/20227915238.webp)
![哈夫曼编码算法2](/assets/202279152323.webp)
### LZW压缩
LZW编码 (Encoding) 的核心思想其实比较简单，就是把出现过的字符串映射到记号上，这样就可能用较短的编码来表示长的字符串，实现压缩
LZW的一个核心思想，即压缩后的编码是自解释 (self-explaining) 的。什么意思？即字典是不会被写进压缩文件的，在解压缩的时候，一开始字典里除了默认的0->A和1->B之外并没有其它映射，2->AB是在解压缩的过程中一边加入的。这就要求压缩后的数据自己能告诉解码器，完整的字典，例如2->AB是如何生成的，在解码的过程中还原出编码时用的字典