## 前言
这次UNCTF 我一共出了两道Web题目，一道node.js
（Arbi）一道Java（GoodJava），由于比赛宣传力度可能不是特别大，再加上比赛周和很多的大型线下赛冲突，所以很多师傅都没有来参加比赛，有一点小遗憾。本次准备的两道题目都是花了很长时间准备的（特别是Arbi），下面就分享一下题目的解法，并且由于arbi这道题目我用了一个我认为比较新的攻击面，所以我会在写另一篇文章单独讲这个攻击面（真的绝对不是凑稿费XD  
并且由于题目被安恒买断，我不能在互联网上公开题目的搭建dockerfile，但是这两道题目是公开的代码审计，所以我可以放出题目的源码，搭建就麻烦各位师傅花一点点时间，如果有搭建不成功的也可以私我询问，敬请谅解  
源码在最下面
## Arbi
这道题的出题思路是在SCTF被非预期后想到的，采用和当时一样的非预期攻击面（具体可以移步另一篇  
为了增加题目难度，我与[](\[https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#%C3%A5ngstromctf-2019
----quick-write-ups-by-terjanq-web\]\(https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#%C3%A5ngstromctf-2019
----quick-write-ups-by-terjanq-web)[ångstromCTF
2019](https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#%C3%A5ngstromctf-2019
----quick-write-ups-by-terjanq-web))  
的一道题的trick相结合，加上一点点node的特性，于是就有了这道题  
可能由于第一关脑洞有点大==，这道题虽然第一天就放了出来，但是很多师傅刚开始都没拿到源码，最终这道题放了6个hint，终于在6天后的
比赛最后一天被解了出来Orz
### 第一关
首先浏览题目，可以发现页面只有登陆注册，查看返回包，可以发现X-Powered-By告知了网站采用express构建  
注册登录以后首页会显示一个派大星的图片和用户名  
查看源代码可以发现可疑ssrf  
但是如果更换src参数会提示，"Evil request!"  
这个其实试一试就很容易猜到，这个路由的后端代码会匹配请求的url和用户名是否对应，在后面给的hint也可以得到这个结果  
源码：  
然后其实服务器的9000端口开了个SimpleHTTPServer，（题目描述）hint也讲的很清楚  
如果直接访问/upload/evoA.jpg
也可以访问到图片，所以可以推断出，SimpleHTTPServer的根目录很可能在web根目录下，由于express的路由无法直接访问源代码文件，但是因为SimpleHTTPServer的原因，我们可以通过这个端口直接获取源码文件
这里就是第一个考点，虽然我们不知道node的入口文件是什么（大部分可能是app.js或者main.js，但此题不是）  
node应用默认存在package.json，我们可以通过读取这个文件获取入口文件，由于上面说了ssrf接口会判断用户名是否匹配请求的url，所以我们可以注册一个恶意的用户名，"../package.json?"  
这里?刚好把后面的.jpg给截断了，登录以后已经没有派大星了（图片内容是package.json的内容)  
把图片下下来用文本打开，即可看到package.json文件内容  
可以得到flag在/flag中，并且项目主入口是mainapp.js，继续注册文件名，一步一步爬源码  
读到routers/index.js的时候可以看到源码路由（为了防止师傅们做题爬的太辛苦）访问下载源码即可  
第一关以拿到源码结束
### 第二关
审计源码，可以发现有一个读文件的敏感操作在一个admin23333_interface的路由中，但是这个路由会鉴权用户是不是admin，所以第二关的核心任务是如何成为admin，（注册时不能注册admin用户的）  
这里我参考了[](\[https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#%C3%A5ngstromctf-2019
----quick-write-ups-by-terjanq-web\]\(https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#%C3%A5ngstromctf-2019
----quick-write-ups-by-terjanq-web)[ångstromCTF
2019](https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#%C3%A5ngstromctf-2019
----quick-write-ups-by-terjanq-web))这道题  
但是为了防止做题的时候被师傅们搜到，我对照这个功能，重新写了一遍代码。  
具体代码就不贴了，师傅们可以自己看源码，我讲一下大概逻辑  
首先注册登陆采用jwt认证，但是jwt的实现很奇怪，逻辑大概是，注册的时候会给每个用户生成一个单独的secret_token作为jwt的密钥，通过后端的一个全局列表来存储，登录的时候通过用户传过来的id取出对应的secret_token来解密jwt，如果解密成功就算登陆成功。  
这里就是第二个考点
node 的jsonwebtoken库存在一个缺陷，也是jwt的常见攻击手法，当用户传入jwt secret为空时
jsonwebtoken会采用algorithm none进行解密  
因为服务端 通过
    var secret = global.secretlist[id];
     jwt.verify(req.cookies.token,secret);
解密，我可以通过传入不存在的id，让secret为undefined,导致algorithm为none,然后就可以通过伪造jwt来成为admin
    # pip3 install pyjwt
    import jwt
    token = jwt.encode({"id":-1,"username":"admin","password":"123456"},algorithm="none",key="").decode(encoding='utf-8')
    print(token)
替换jwt后使用admin/123456登陆即可成功伪造admin  
第二关就结束了
## 第三关
其实第三关才是我最想出出来的，但是由于思路不够，第三关感觉太简单了，所以前面设置了很多坎  
成为admin后，就可以访问admin23333_interface接口，审计可以发现，这是一个读取文件的接口
这里用到了express的特性，当传入?a[b]=1的时候,变量a会自动变成一个对象 a = {"b":1}
所以可以通过传入name为一个对象，避开进入if判断 从而绕过第一层过滤  
`if(!/^key$/im.test(req.query.name.filename))return res.sendStatus(500);`
第二个过滤是 判断filename 不能大于3,否者会过滤.和/,而读取flag需要先目录穿越到根目录  
而../就已经占了3个字符，再加上flag肯定超过限制，  
这时候可以换个思路，length不仅可以取字符串长度还可以取数组长度，把filename设数组，再配合下面的循环 即可完美恢复数组为字符串绕过过滤，  
而express 中当碰到两个同名变量时，会把这个变量设置为数组，例如a=123&a=456 解析后 a =  
[123,456]，所以最终组合成
    /admin23333_interface?name[filename]=../&name[filename]=f&name[filename]=l&name[filename]=a&name[filename]=g
## GoodJava
此题参考了最近的TMCTF，经过了改编 加大了难度
### 第一关
题目会提供一个Jar包  
用idea打开反编译后审计源码  
找到Controller  
[
](https://ctfwp.wetolink.com/2019unctf/GoodJava/f632b2d3b620a2789cd736b3a3a83bc5.png)  
源码可知一共有两个路由  
第二个路由需要输入secret密钥才能访问，而secret存在在服务器/passwd文件中  
可以猜测第一个路由就是获取密钥文件的功能，跟进可以发现OIS类继承了ObjectInputStream，把POST数据传入OIS构造方法，而然后ois.readObject()则是反序列化操作  
但是resolveClass方法限制了被反序列化的类只能是com.unctf.pojo.Man类  
查看Man类，可以发现重写了readObject方法，这是Java反序列化的魔术方法，审计一下很容易发现XXE，根据代码构造XXE读passwd即可  
PS: 需要注意一下本地构造时包名和serialVersionUID必须一致，此值代表了对象的版本或者说id，值不一致反序列化操作会失败  
这里有个小考点，这里限制了xml数据不能含有file（大小写），而我们需要读取/passwd  
这里有个trick，Java里面有个伪协议netdoc，作用和file一致，都是读取文件，所以这一步很简单，把file换成netdoc即可  
注意一下本地构造包名也必须一致哦，不仅仅是类名一致就行  
Man类加一个writeObject即可  
详细步骤可以看看  
[  
exp  
[  
output  
[
### 第二关
然后就是第二步，考点是代码执行绕过  
这里有个SPEL注入，可以构造任意类，但是同样代码过滤了Runtime|ProcessBuilder|Process|class  
这三个Java中执行命令的类，题目提示必须执行命令才能拿到flag，然后Java又是强类型语言，很多操作不像php那么动态，所以这一步可能会难住很多人  
然后这里有个trick，java内部有个javascript的解析器，可以解析javascript，而且在javascript内还能使用java对象  
我们就可以通过javascript的eval函数操作  
T(javax.script.ScriptEngineManager).newInstance().getEngineByName("js").eval("xxxxxxxxx")  
由于不能使用关键字，我们可以通过字符串拼接来  
exp里面也有对应的转换脚本
    #------------------    payload = 'new java.io.BufferedReader(new java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec("/readflag").getInputStream())).readLine()'