### 优化后的文本

#### 轨道写入信息
- **轨道01**: 86/86 MB 已写入（FIFO 100%）[缓冲区 97%] 4.0x。
- **总字节数读取/写入**: 90,937,344/90,937,344 字节（44,403 扇区）。
- **写入时间**: 38.337秒。
- **平均写入速度**: 1.7x。
- **最小驱动器缓冲填充率**: 97%。

#### 固化过程
- **固化时间**: 120.943秒。
- **wodim fifo状态**: 共有1433次put和1433次get，从未为空，777次满载，最小填充率为89%。

**提示**: 由于使用了 `-eject` 选项，烧录完成后DVD将自动弹出，请记得将其推回光驱。

#### 烧录后测试挂载
```bash
[root@demo ~]# mount /dev/sr0 /mnt
[root@demo ~]# df -h /mnt
Filesystem      Size  Used Avail Use% Mounted on
/dev/sr0        87M   87M   0  100% /mnt
[root@demo ~]# ll /mnt
dr-xr-xr-x. 135 root root 36864 Jun 30 04:00 etc
dr-xr-xr-x. 19 root root 8192 Jul 2 13:16 root
[root@demo ~]# umount /mnt  # 不要忘记卸载
```

#### 总结
虽然有许多参数可以使用，但掌握上述语法对于工程师来说已经足够。通常情况下，图形界面软件更适合处理烧录任务，而命令行工具主要用于数据光盘的烧录。

#### 数据备份的重要性
如果您的Linux系统用作服务器，那么定期备份重要数据至关重要。我们将在第五篇详细讨论备份策略，目前您只需熟悉这些工具即可。

#### dd 命令介绍
dd 命令在第七章中用于特殊 loop 设备挂载。它最大的优势在于能够直接读取磁盘扇区，并将整个设备备份为一个文件。以下是常用的 dd 选项：
```bash
[root@study ~]# dd if=input_file of=output_file bs=block_size count=number
```
- `if`: 输入文件或设备。
- `of`: 输出文件或设备。
- `bs`: 每个块的大小，默认为512字节（一个扇区）。
- `count`: 块的数量。

**示例一**: 备份 `/etc/passwd` 文件到 `/tmp/passwd.back`。
```bash
[root@study ~]# dd if=/etc/passwd of=/tmp/passwd.back
4+1 records in
4+1 records out
2092 Bytes (2.1 kB) copied, 0.000111657 s, 18.7 MB/s
[root@study ~]# ll /etc/passwd /tmp/passwd.back
-rw-r--r--. 1 root root 2092 Jun 17 00:20 /etc/passwd
-rw-r--r--. 1 root root 2092 Jul 2 23:27 /tmp/passwd.back
```
**示例二**: 将光驱内容备份为镜像文件。
```bash
[root@study ~]# dd if=/dev/sr0 of=/tmp/system.iso
177612+0 records in
177612+0 records out
90937344 Bytes (91 MB) copied, 22.111 s, 4.1 MB/s
```

**示例三**: 将镜像文件写入USB磁盘。
```bash
[root@study ~]# lsblk /dev/sda
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
sda    8:0   0  2G  0 disk
[root@study ~]# dd if=/tmp/system.iso of=/dev/sda
[root@study ~]# mount /dev/sda /mnt
[root@study ~]# ll /mnt
dr-xr-xr-x. 131 root root 34816 Jun 26 22:14 etc
dr-xr-xr-x. 5 root root 2048 Jun 17 00:20 home
dr-xr-xr-x. 8 root root 4096 Jul 2 18:48 root
```

**示例四**: 备份 `/boot` 文件系统。
```bash
[root@study ~]# df -h /boot
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda2       1014M 149M 866M  15% /boot
[root@study ~]# dd if=/dev/vda2 of=/tmp/vda2.img
[root@study ~]# ll -h /tmp/vda2.img
-rw-r--r--. 1 root root 1.0G Jul 2 23:39 /tmp/vda2.img
```

**注意事项**: 使用 dd 进行备份会逐个扇区读写，即使未使用的扇区也会被包含在内。因此，生成的文件与原始磁盘一样大。相比之下，`xfsdump` 只备份文件系统中已使用的部分。

**练习题**: 将 `/dev/vda2` 完整复制到另一个分区上。
```bash
# 1. 创建新分区
[root@study ~]# fdisk /dev/sda
Command (m for help): n
Partition type:
p primary (0 primary, 0 extended, 4 free)
e extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-4195455, default 2048): Enter
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-4195455, default 4195455): Enter
Using default value 4195455
Partition 1 of type Linux and of size 2 GiB is set
Command (m for help): p
Device Boot Start End Blocks Id System
/dev/sda1 2048 4195455 2096704 83 Linux
Command (m for help): w
[root@study ~]# partprobe

# 2. 复制扇区
[root@study ~]# dd if=/dev/vda2 of=/dev/sda1
2097152+0 records in
2097152+0 records out
1073741824 Bytes (1.1 GB) copied, 71.5395 s, 15.0 MB/s
[root@study ~]# xfs_repair -L /dev/sda1
[root@study ~]# uuidgen
896c38d1-bcb5-475f-83f1-172ab38c9a0c
[root@study ~]# xfs_admin -U 896c38d1-bcb5-475f-83f1-172ab38c9a0c /dev/sda1

# 3. 挂载并检查
[root@study ~]# mount /dev/sda1 /mnt
[root@study ~]# df -h /boot /mnt
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda2       1014M 149M 866M  15% /boot
/dev/sda1       1014M 149M 866M  15% /mnt
[root@study ~]# xfs_growfs /mnt
[root@study ~]# df -h /boot /mnt
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda2       1014M 149M 866M  15% /boot
/dev/sda1       2.0G   149M 1.9G  8% /mnt
[root@study ~]# umount /mnt
```

通过这种方式，您可以创建两个完全相同的磁盘。不过需要注意的是，当处理文件系统时，重新挂载前可能需要进行一些额外的修复操作。