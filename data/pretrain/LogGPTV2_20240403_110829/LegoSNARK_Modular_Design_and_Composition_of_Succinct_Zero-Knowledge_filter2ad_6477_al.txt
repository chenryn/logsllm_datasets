V
KG
(s)
(ms)
0.210 0.150 1.662
1.227 0.957 3.696
8.848 7.177 9.686
69.21 58.60 34.83
|π| (B)
350.25
127.38
Table 5: Performance of LegoAC1 comparing
to Groth16
commitment (in a canonical vectorized form). This property is not present in Groth16, and can be
useful in several applications.
For example, in the matrix factoring case, LegoAC1 works with commitments to the three matri-
ces that could be reused. This is a powerful feature as we could prove a statement like “B = A2k for
a committed matrix A” by doing k proofs, one for each squaring step (i.e., to show that Bi = B2
i−1);
this can be done by reusing the same CRS for one matrix factoring relation. In contrast, proving
B = A2k directly with Groth16 would require a very large CRS and a memory intensive prover that
would not scale for large k and n.
We give the experimental results that compare our LegoAC1 commit-and-prove zkSNARK
against the Groth16 scheme, in the SHA256 and matrix factoring applications explained above.
For SHA256, Groth16 needs 1.9s for key generation of a CRS of 5.1MB, 0.7s for proving and
0.9ms for veriﬁcation; LegoAC1 needs 7.9s for key generation of a CRS of 6.2MB, 0.9s for proving
and 1.8ms for veriﬁcation. For matrix factoring, we used n × n matrices of 32-bit integers with
n ∈ {16, 32, 64, 128}. Detailed timings are in Table 5.
Finally, we remark that LegoAC1 is commit-and-prove, which means its proofs are done with
respect to matrices that committed in a Pedersen commitment (in a canonical vectorized form).
42
comparison for
(b) Veriﬁcation time comparison
for LegoPar and HyrPoly-RDL.
(c) P time
for
(a) Proving time
LegoPar and HyrPoly-RDL.
LegoPar (left) and HyrPoly-RDL (right).
Figure 9: Performance comparison of systems for parallel relations. Lower on the y axis is bet-
ter (in (c), axis y is log-scale).We remind the reader that LegoPar = HyrPoly-Par + CPlin =
(GirnoRDL + CPLego
poly ) + CPlin and HyrPoly-RDL = GiryesRDL + CPHyr
poly.
(component-wise)
7.4 Parallel Checks on Joint Inputs
We compare performances of our LegoPar system with a baseline system, i.e. HyrPoly-RDL (see
Appendix F.5). Our choice of an Hyrax-based system for comparison is due to its optimization for
parallel computations, and thus enhancing the latter implies reﬁnements in all computations where
Hyrax applies today.
Recall that LegoPar consists of our CPPed
lin and HyrPoly-Par. To evaluate HyrPoly-Par and HyrPoly-
RDL we executed separately the part concerning PolyCom and CPpoly, and the one that includes the
ZKGir++ core. To benchmark the latter, we used the original Python code (appropriately modiﬁed
for the commitment part) from the Hyrax project [gitax] (run using the JIT-compiling interpreter
PyPy [pypPy]).23
We benchmarked LegoPar and HyrPoly-RDL on a highly parallel computation, that is proving
knowledge of an assignment to the leaves of a Merkle tree [Mer88] (cf. Section ?? to see how it can
be expressed using Rparjnt). We used SHA256 for the hash and a varying number of leaves (from 2 to
29). For this computation we generated two circuits using the Hyrax tool: one fully parallel to be fed
to HyrPoly-Par and one with the RDL for HyrPoly-RDL. Recall that in LegoPar the RDL is checked
using CPPed
lin . We ﬁnally note that the two largest inputs in our evaluation required extending the
available RAM from 30 to 75GB for both schemes.
Results. Figure 9 compares the costs (proving and veriﬁcation time) in the two schemes for repeated
computation. Overall LegoPar is faster than HyrPoly-RDL, both in proving and veriﬁcation time. On
our largest input, proving in LegoPar is 1.25× faster; verifying is more than 2.5× faster. Veriﬁcation
is expected to become faster due to the asymptotic diﬀerence in the veriﬁcation time.
– Proving time: On larger inputs LegoPar has a faster (up to 1.25×) proving time (Figs. 9a). In
both schemes most of the computation is due to ZKGir++: approximately 50% for LegoPar and
75% for HyrPoly-RDL. The higher time of ZKGir++ in HyrPoly-RDL is explained by the additional
round for the RDL. On the other hand, LegoPar spends twice as much time for the proving step
of CPpoly. This is because it evaluates a polynomial with twice as many terms, in turn requiring
roughly twice the number of exponentiations. (This is due to the RDL output u2, on which
23 Full integration of this component into our library is future work.
43
LegoPar operates, being twice as long as the RDL input u1 (also the “bottom-layer” input), on
which CPpoly runs in HyrPoly-RDL).
– Veriﬁcation time: On larger inputs LegoPar has a shorter (up to 2.5×) veriﬁcation time (Fig. 9b).
This speedup is due to increase with larger inputs, as the veriﬁer in HyrPoly-RDL has to perform an
additional veriﬁcation step for the RDL in ZKGir++ (requiring a number of ﬁeld operations roughly
linear in the width of the circuit). On the other hand LegoPar performs the same step through
a constant number of pairings (two) in CPveq. In both schemes ZKGir++ dominates running time
(more than 99.5%)24.
Discussion. Partly, the diﬀerent performances we observed are due to speciﬁc features of the circuit
chosen for benchmarks (we chose Merkle tree veriﬁcation, due to its relevance in practice). In a circuit
for parallel computation, at least two features, both related to the RDL, can have impact: (i) how
“large” the output u2 of the RDL is w.r.t. its input u1; (ii) how “complex” the RDL is. A higher
ratio |u2|/|u1| will determine the diﬀerence in running time for the CPpoly.Prove component. In our
circuit of choice the ratio was 2.
8 Conclusions
We have described LegoSNARK, a framework for commit-and-prove zkSNARKs that comprises def-
initions, a general composition result, and a “lifting” construction. The LegoSNARK tools are useful
as they enable designing zkSNARKs in a modular way (due to the framework of deﬁnitions and the
composition theorem) and they allow to eﬃciently add commit-and-prove capabilities to a variety
of existing schemes thus made interoperable. Furthermore we have proposed eﬃcient proof gadgets
for specialized relations and shown how to combine them into succinct proof systems for more com-
plex relations. We have described instantiations of these new proof systems and evaluated them
against prior work. The results show they have competitive performances. Speciﬁcally they show
slightly worse (but still acceptable) performances in some applications (general arithmetic circuits)
and signiﬁcant improvements in others (commit-ahead-of-time systems, parallel computations).
A limitation of our current instantiations is their reliance on pairing-based systems with a trusted
setup. Interestingly in some cases this is only needed to generate the commitment key of PolyCom.
We believe this is doable by a large-scale MPC ceremony similar to the powers-of-tau round 1 of
[BGM17] since the CRS includes only monomials in the exponent. It is future work to explore
this direction. Nonetheless we note that this limitation is not inherent. The basic results of the
framework (i.e., Section 3) are general enough to be instantiated in the future with schemes without
trust assumptions. Finally, another future work direction is investigating new and more eﬃcient
proof gadgets CP-SNARKs for specialized relations and test them in speciﬁc applications.
Acknowledgements
Research leading to these results has been supported by the Spanish Government under projects
Datamantium (ref. RTC-2016-4930-7), SCUM (ref. RTI2018-102043-B-I00), and ERC2018-092822,
by the Madrid Regional Government under project BLOQUES (ref. S2018/TCS-4339) and by Pro-
tocol Labs. The project that gave rise to these results received the support of a fellowship from “la
Caixa” Foundation (ID 100010434). The fellowship code is LCF/BQ/ES18/11670018.
24 This is why we do not show a detailed bar plot for each component as for proving time.
44
References
AGM18.
AHIV17.
AJ18.
Shashank Agrawal, Chaya Ganesh, and Payman Mohassel. Non-interactive zero-knowledge proofs for
composite statements. In Hovav Shacham and Alexandra Boldyreva, editors, CRYPTO 2018, Part III,
volume 10993 of LNCS, pages 643–673. Springer, Heidelberg, August 2018.
Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkitasubramaniam.
Ligero:
Lightweight sublinear arguments without a trusted setup. In Bhavani M. Thuraisingham, David Evans,
Tal Malkin, and Dongyan Xu, editors, ACM CCS 2017, pages 2087–2104. ACM Press, October / Novem-
ber 2017.
Kurt M. Alonso and Jordi Herrera Joancomartí. Monero - privacy in the blockchain. Cryptology ePrint
Archive, Report 2018/535, 2018. https://eprint.iacr.org/2018/535.
BBB+17. Benedikt Bünz, Jonathan Bootle, Dan Boneh, Andrew Poelstra, Pieter Wuille, and Greg Maxwell. Bullet-
proofs: Eﬃcient range proofs for conﬁdential transactions. Technical report, Cryptology ePrint Archive,
Report 2017/1066, 2017. https://eprint. iacr. org/2017/1066, 2017.
BBFR15. Michael Backes, Manuel Barbosa, Dario Fiore, and Raphael M. Reischuk. ADSNARK: Nearly practical
and privacy-preserving proofs on authenticated data. In 2015 IEEE Symposium on Security and Privacy,
pages 271–286. IEEE Computer Society Press, May 2015.
Jonathan Bootle, Andrea Cerulli, Pyrros Chaidos, Jens Groth, and Christophe Petit. Eﬃcient zero-
knowledge arguments for arithmetic circuits in the discrete log setting.
In Marc Fischlin and Jean-
Sébastien Coron, editors, EUROCRYPT 2016, Part II, volume 9666 of LNCS, pages 327–357. Springer,
Heidelberg, May 2016.
BCC+16.
BCC+17. Nir Bitansky, Ran Canetti, Alessandro Chiesa, Shaﬁ Goldwasser, Huijia Lin, Aviad Rubinstein, and Eran
Tromer. The hunting of the SNARK. Journal of Cryptology, 30(4):989–1066, October 2017.
BCCT12. Nir Bitansky, Ran Canetti, Alessandro Chiesa, and Eran Tromer. From extractable collision resistance
to succinct non-interactive arguments of knowledge, and back again. In Shaﬁ Goldwasser, editor, ITCS
2012, pages 326–349. ACM, January 2012.
BCG+13. Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, Eran Tromer, and Madars Virza. SNARKs for C:
In Ran Canetti and Juan A. Garay,
Verifying program executions succinctly and in zero knowledge.
editors, CRYPTO 2013, Part II, volume 8043 of LNCS, pages 90–108. Springer, Heidelberg, August
2013.
BCG+17.
BCG+14. Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers, Eran Tromer, and
Madars Virza. Zerocash: Decentralized anonymous payments from bitcoin. In 2014 IEEE Symposium on
Security and Privacy, pages 459–474. IEEE Computer Society Press, May 2014.
Jonathan Bootle, Andrea Cerulli, Essam Ghadaﬁ, Jens Groth, Mohammad Hajiabadi, and Sune K. Jakob-
sen. Linear-time zero-knowledge proofs for arithmetic circuit satisﬁability. In Tsuyoshi Takagi and Thomas
Peyrin, editors, ASIACRYPT 2017, Part III, volume 10626 of LNCS, pages 336–365. Springer, Heidelberg,
December 2017.
Nir Bitansky, Alessandro Chiesa, Yuval Ishai, Rafail Ostrovsky, and Omer Paneth. Succinct non-
interactive arguments via linear interactive proofs.
In Amit Sahai, editor, TCC 2013, volume 7785
of LNCS, pages 315–333. Springer, Heidelberg, March 2013.
BCI+13.
BCPR14. Nir Bitansky, Ran Canetti, Omer Paneth, and Alon Rosen. On the existence of extractable one-way
functions. In David B. Shmoys, editor, 46th ACM STOC, pages 505–514. ACM Press, May / June 2014.
Eli Ben-Sasson, Alessandro Chiesa, and Nicholas Spooner. Interactive oracle proofs. In Martin Hirt and
Adam D. Smith, editors, TCC 2016-B, Part II, volume 9986 of LNCS, pages 31–60. Springer, Heidelberg,
October / November 2016.
BCS16.
BCTV14. Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. Succinct non-interactive zero knowl-
edge for a von neumann architecture. In Kevin Fu and Jaeyeon Jung, editors, USENIX Security 2014,
pages 781–796. USENIX Association, August 2014.
BFR+13. Benjamin Braun, Ariel J. Feldman, Zuocheng Ren, Srinath Setty, Andrew J. Blumberg, and Michael
BGM17.
BP15.
Walﬁsh. Verifying computations with state. In Proc. of the ACM SOSP, 2013.
Sean Bowe, Ariel Gabizon, and Ian Miers. Scalable multi-party computation for zk-snark parameters in
the random beacon model. Cryptology ePrint Archive, Report 2017/1050, 2017. https://eprint.iacr.
org/2017/1050.
Elette Boyle and Rafael Pass. Limits of extractability assumptions with distributional auxiliary input.
In Tetsu Iwata and Jung Hee Cheon, editors, ASIACRYPT 2015, Part II, volume 9453 of LNCS, pages
236–261. Springer, Heidelberg, November / December 2015.
45
BSBHR18. Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. Scalable, transparent, and post-
quantum secure computational integrity. Cryptology ePrint Archive, Report 2018/046, 2018. https:
//eprint.iacr.org/2018/046.
https://github.com/apoelstra/secp256k1-mw/tree/bulletproofs, libsecp256k1.
bulk1.
CDG+17. Melissa Chase, David Derler, Steven Goldfeder, Claudio Orlandi, Sebastian Ramacher, Christian Rech-
berger, Daniel Slamanig, and Greg Zaverucha. Post-quantum zero-knowledge and signatures from
symmetric-key primitives. In Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu,
editors, ACM CCS 2017, pages 1825–1842. ACM Press, October / November 2017.
CFH+15. Craig Costello, Cédric Fournet, Jon Howell, Markulf Kohlweiss, Benjamin Kreuter, Michael Naehrig,
Bryan Parno, and Samee Zahur. Geppetto: Versatile veriﬁable computation. In 2015 IEEE Symposium
on Security and Privacy, pages 253–270. IEEE Computer Society Press, May 2015.
CGM16. Melissa Chase, Chaya Ganesh, and Payman Mohassel. Eﬃcient zero-knowledge proof of algebraic and
non-algebraic statements with applications to privacy preserving credentials. In Matthew Robshaw and
Jonathan Katz, editors, CRYPTO 2016, Part III, volume 9816 of LNCS, pages 499–530. Springer, Hei-
delberg, August 2016.
CLOS02. Ran Canetti, Yehuda Lindell, Rafail Ostrovsky, and Amit Sahai. Universally composable two-party and
CMT12.
multi-party secure computation. In 34th ACM STOC, pages 494–503. ACM Press, May 2002.
Graham Cormode, Michael Mitzenmacher, and Justin Thaler. Practical veriﬁed computation with stream-
ing interactive proofs. In Shaﬁ Goldwasser, editor, ITCS 2012, pages 90–112. ACM, January 2012.
FS87.
EHK+13. Alex Escala, Gottfried Herold, Eike Kiltz, Carla Ràfols, and Jorge Villar. An algebraic framework for
Diﬃe-Hellman assumptions. In Ran Canetti and Juan A. Garay, editors, CRYPTO 2013, Part II, volume
8043 of LNCS, pages 129–147. Springer, Heidelberg, August 2013.
FKL18.
FFG+16. Dario Fiore, Cédric Fournet, Esha Ghosh, Markulf Kohlweiss, Olga Ohrimenko, and Bryan Parno. Hash
In Edgar R. Weippl, Stefan
ﬁrst, argue later: Adaptive veriﬁable computations on outsourced data.
Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 2016, pages
1304–1316. ACM Press, October 2016.
Georg Fuchsbauer, Eike Kiltz, and Julian Loss. The algebraic group model and its applications. In Hovav
Shacham and Alexandra Boldyreva, editors, CRYPTO 2018, Part II, volume 10992 of LNCS, pages 33–62.
Springer, Heidelberg, August 2018.
Prastudy Fauzi, Helger Lipmaa, Janno Siim, and Michal Zajac. An eﬃcient pairing-based shuﬄe argu-
ment. In Tsuyoshi Takagi and Thomas Peyrin, editors, ASIACRYPT 2017, Part II, volume 10625 of
LNCS, pages 97–127. Springer, Heidelberg, December 2017.
Amos Fiat and Adi Shamir. How to prove yourself: Practical solutions to identiﬁcation and signature
problems. In Andrew M. Odlyzko, editor, CRYPTO’86, volume 263 of LNCS, pages 186–194. Springer,
Heidelberg, August 1987.
FLSZ17.
GKR08.
GGPR13. Rosario Gennaro, Craig Gentry, Bryan Parno, and Mariana Raykova. Quadratic span programs and
succinct NIZKs without PCPs. In Thomas Johansson and Phong Q. Nguyen, editors, EUROCRYPT 2013,
volume 7881 of LNCS, pages 626–645. Springer, Heidelberg, May 2013.
https://github.com/hyraxZK, Hyrax.
gitax.
GKM+18. Jens Groth, Markulf Kohlweiss, Mary Maller, Sarah Meiklejohn, and Ian Miers. Updatable and universal
common reference strings with applications to zk-SNARKs. In Hovav Shacham and Alexandra Boldyreva,
editors, CRYPTO 2018, Part III, volume 10993 of LNCS, pages 698–728. Springer, Heidelberg, August
2018.
Shaﬁ Goldwasser, Yael Tauman Kalai, and Guy N. Rothblum. Delegating computation: interactive proofs
for muggles. In Richard E. Ladner and Cynthia Dwork, editors, 40th ACM STOC, pages 113–122. ACM
Press, May 2008.
Daniel Günther, Ágnes Kiss, and Thomas Schneider. More eﬃcient universal circuit constructions. In
Tsuyoshi Takagi and Thomas Peyrin, editors, ASIACRYPT 2017, Part II, volume 10625 of LNCS, pages
443–470. Springer, Heidelberg, December 2017.
Irene Giacomelli, Jesper Madsen, and Claudio Orlandi. ZKBoo: Faster zero-knowledge for Boolean cir-