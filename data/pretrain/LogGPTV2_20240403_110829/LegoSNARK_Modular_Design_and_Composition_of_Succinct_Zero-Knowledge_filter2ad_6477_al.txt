### Table 5: Performance Comparison of LegoAC1 and Groth16

| V (ms) | KG (s) | |π| (B) |
|--------|--------|----------|
| 0.210  | 0.150  | 350.25   |
| 1.227  | 0.957  | 127.38   |
| 8.848  | 7.177  |          |
| 69.21  | 58.60  | 34.83    |

**Comparison of LegoAC1 and Groth16:**

LegoAC1 introduces a unique feature that allows commitments to be reused in a canonical vectorized form, which is not present in Groth16. This feature can be particularly useful in various applications. For instance, in matrix factoring, LegoAC1 can work with commitments to the three matrices, allowing them to be reused. This enables proving statements like "B = A^2k" for a committed matrix A by performing k proofs, one for each squaring step (i.e., showing that B_i = B_{i-1}^2). This can be achieved using the same CRS for one matrix factoring relation. In contrast, proving B = A^2k directly with Groth16 would require a very large CRS and a memory-intensive prover, making it impractical for large values of k and n.

**Experimental Results:**

We compare our LegoAC1 commit-and-prove zkSNARK against the Groth16 scheme in the SHA256 and matrix factoring applications. 

- **SHA256:**
  - Groth16: 
    - Key Generation: 1.9s (CRS: 5.1MB)
    - Proving: 0.7s
    - Verification: 0.9ms
  - LegoAC1:
    - Key Generation: 7.9s (CRS: 6.2MB)
    - Proving: 0.9s
    - Verification: 1.8ms

- **Matrix Factoring:**
  - We used n × n matrices of 32-bit integers with n ∈ {16, 32, 64, 128}. Detailed timings are provided in Table 5.

**Commit-and-Prove Feature:**

LegoAC1 is a commit-and-prove system, meaning its proofs are done with respect to matrices that have been committed in a Pedersen commitment (in a canonical vectorized form).

### Figure 9: Performance Comparison of Systems for Parallel Relations

- **(a) Proving Time:**
  - Lower on the y-axis is better.
  - LegoPar (left) and HyrPoly-RDL (right).

- **(b) Verification Time:**
  - Lower on the y-axis is better.
  - LegoPar (left) and HyrPoly-RDL (right).

- **(c) P Time:**
  - Log-scale on the y-axis.
  - LegoPar (left) and HyrPoly-RDL (right).

**Performance Comparison:**

We compare the performance of our LegoPar system with the baseline system, HyrPoly-RDL. Our choice of HyrPoly-RDL for comparison is due to its optimization for parallel computations, which makes it a suitable benchmark for evaluating improvements in such computations.

**Evaluation:**

- **HyrPoly-Par and HyrPoly-RDL:**
  - We evaluated the PolyCom and CPpoly components separately.
  - The ZKGir++ core was benchmarked using the original Python code from the Hyrax project, modified for the commitment part, and run using the JIT-compiling interpreter PyPy.

- **Merkle Tree Verification:**
  - We used SHA256 for the hash and varied the number of leaves (from 2 to 29).
  - Two circuits were generated using the Hyrax tool: one fully parallel for HyrPoly-Par and one with the RDL for HyrPoly-RDL.
  - The largest inputs required extending the available RAM from 30GB to 75GB for both schemes.

**Results:**

- **Proving Time:**
  - On larger inputs, LegoPar has a faster proving time (up to 1.25×).
  - Most of the computation is due to ZKGir++: approximately 50% for LegoPar and 75% for HyrPoly-RDL.
  - The higher time for ZKGir++ in HyrPoly-RDL is due to the additional round for the RDL.
  - LegoPar spends twice as much time for the proving step of CPpoly, as it evaluates a polynomial with twice as many terms, requiring roughly twice the number of exponentiations.

- **Verification Time:**
  - On larger inputs, LegoPar has a shorter verification time (up to 2.5×).
  - The speedup is due to the increase in input size, as the verifier in HyrPoly-RDL has to perform an additional verification step for the RDL in ZKGir++.
  - LegoPar performs the same step through a constant number of pairings (two) in CPveq.

**Discussion:**

The different performances observed are partly due to specific features of the chosen circuit (Merkle tree verification). In a circuit for parallel computation, two features related to the RDL can impact performance: (i) the ratio of the output u2 to the input u1, and (ii) the complexity of the RDL. In our chosen circuit, the ratio was 2.

### Conclusions

We have described LegoSNARK, a framework for commit-and-prove zkSNARKs that includes definitions, a general composition result, and a "lifting" construction. The LegoSNARK tools enable designing zkSNARKs in a modular way and allow for efficient addition of commit-and-prove capabilities to existing schemes. We have also proposed efficient proof gadgets for specialized relations and shown how to combine them into succinct proof systems for more complex relations. Our evaluations show competitive performance, with slight trade-offs in some applications (general arithmetic circuits) and significant improvements in others (commit-ahead-of-time systems, parallel computations).

A limitation of our current instantiations is their reliance on pairing-based systems with a trusted setup. However, this limitation is not inherent, and future work will explore new and more efficient proof gadgets without trust assumptions.

### Acknowledgements

This research was supported by the Spanish Government under projects Datamantium (ref. RTC-2016-4930-7), SCUM (ref. RTI2018-102043-B-I00), and ERC2018-092822, by the Madrid Regional Government under project BLOQUES (ref. S2018/TCS-4339), and by Protocol Labs. The project received support from a fellowship from “la Caixa” Foundation (ID 100010434, fellowship code LCF/BQ/ES18/11670018).

### References

[References listed here, formatted as per the original text]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.