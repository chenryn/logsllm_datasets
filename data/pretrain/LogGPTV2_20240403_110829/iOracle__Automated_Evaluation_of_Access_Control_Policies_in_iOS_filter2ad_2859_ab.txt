the protection state. iOracle automates this task by providing a
framework for extracting and modeling iOS access control policies,
relevant contextual data, and policy semantics.
Figure 1 depicts the architecture of the iOracle framework. Static
and dynamic analysis are used to extract policies and context from
firmware images, Developer Disk Images (DDIs), and jailbroken
devices. Next, we construct logical rules providing abstractions that
model the semantics of iOS access control policies. In this paper, we
use questions designed to identify policy flaws, but questions about
other aspects of the protection system can also be input as queries.
The data, semantics, and questions are combined into a decision
engine which can output potential policy flaws. The remainder of
this section overviews these steps.
Abstractions of Policy SemanticsPolicy FlawsStatic Analysis- iOS Firmware Image- Developer Disk ImageAccess Control Policy- Unix Permissions- Sandbox Proﬁles- Capability RequirementsRuntime Context- Process Attributes- File Access   - Dynamic Observations  - Static Program AnalysisDecisionEngineQuestionsDynamic Analysis- Jailbroken iOS Device- Device Exercises3. Write Implies Read – Sandbox policies can only represent file
paths and do not track inode numbers. We find files at writable,
non-readable paths that can be moved to readable paths.
4. Keystroke Exfiltration – Third party keyboards use a very restric-
tive sandbox profile that should prevent them from exfiltrating
keystroke logs. We find that pseudoterminals can be used to exfil-
trate data to a colluding third party app.
5. Chown Redirection – We identified chown operations that can
be redirected via symbolic links created by mobile UID subjects.
By redirecting chown operations an attacker can gain privileges
similar to root access.
4 iORACLE
iOracle is an extensible framework allowing researchers to make
high-level queries about the iOS protection system. Achieving this
goal requires overcoming two challenges: 1) extracting the access
control policies and relevant system context; and 2) constructing a
knowledge base that supports abstraction for high-level queries.
4.1 Policy and Context Extraction
This subsection discusses our design decisions and tools used to
extract the data needed to construct a knowledge base. Apple de-
clined our request for their access control policy data. Additionally,
the iOS simulator in Xcode oversimplifies the file system and there-
fore is unsuitable for iOracle. Therefore, iOracle extracts policies
and context from iOS firmware images (distributed by Apple as
updates), DDIs (extracted from Xcode), and jailbroken iOS devices.
The result of the policy and context extraction is the Prolog facts
listed in Table 1.
4.1.1
Static Extraction and Analysis. We statically extract the
following types of data from iOS firmware and DDIs: 1) file meta-
data and Unix configurations; 2) program attributes; 3) sandbox
assignment; 4) sandbox profile rules.
Official iOS firmware images and DDIs contain sandbox profiles,
system executables, file metadata, and Unix user/group configura-
tions. The DDI is mounted by Xcode over the /Developer/ directory
of an iOS device in order to support development features such
as debugging. It contains additional system executables that can
play a significant role in jailbreaks as discussed in Section 5. We
statically process the firmware and DDIs for each secondary iOS
version ≥ 7 (i.e., 7.0, 7.1, 8.0, 8.1, 8.2, 8.3, 8.4, 9.0, 9.1, 9.2, 9.3, 10.0,
10.1, 10.2, 10.3).
File Metadata and Unix Configurations: We extracted file meta-
data including the Unix permission bits, file owners, file path, and
link destination of each file. This data was acquired using the macOS
gfind utility to traverse a directory that combines firmware image
and DDI for each version. Since gfind only provides a very coarse
granularity of file type (e.g., regular file, symlink), we extract the
files from the disk images and use the file utility on Linux to col-
lect more fine-grained file types (e.g., Mach-O armv7 executable).
We also extract Unix user and group data from /etc/passwd and
/etc/groups respectively.
Program Attributes: We use jtool3 to extract symbols, code sig-
natures, and entitlement key-value pairs from each system exe-
cutable. We use the strings utility on Linux to extract strings from
each system executable.
We created a custom Interactive DisAssembler4 (IDA) script to
backtrace hard coded parameters for chown, chmod, and sandbox
initialization functions. Our backtracer is engineered to infer regis-
ter values while considering architectural differences in armv7 vs
arm64 binaries and logic used in Position Independent Execution
(PIE). This backtracer is similar in concept to those implemented
by PiOS [11] and iRiS [9]. However, PiOS and iRiS are not publicly
available, and were designed to process objective-c dispatch func-
tions, while we need to infer parameters for chown, chmod, and
sandbox initialization functions.
Sandbox Assignment: A sandbox profile is assigned to an exe-
cutable based on three factors: 1) entitlements; 2) file path of the
executable; and 3) self-assignment functions. A self-assigning exe-
cutable calls a sandbox initialization function with a sandbox profile
as a function parameter. Our backtracer data allows us to determine
which profile will be applied to executables that sandbox themselves
by inferring these parameters.
Sandbox Profile Rules: We obtained the code for SandBlaster [8]
and SandScout [10] from their authors and extended them. We
used SandBlaster to extract sandbox profiles from iOS firmware
images and decompile them from Apple’s proprietary binary format
into human readable SBPL. Apple made significant performance
optimizations that changed the proprietary sandbox format in iOS
10, so we added new functionality to SandBlaster to process these.
We used SandScout to compile the SBPL sandbox profiles into
Prolog facts. The original SandScout models each profile in isolation
with an emphasis on the container profile. Therefore, we made
modifications to produce facts that more easily allow comparison
between profiles and to process new sandbox filters.
SandScout can list sandbox filters for each rule, but it requires
the operator to design sandbox filter semantics into queries. To
address this issue, iOracle automatically matches subjects and ob-
jects to relevant sandbox rules based on iOracle’s built-in model of
semantics for ten types of sandbox filter as discussed in Section 4.2.
4.1.2 Dynamic Extraction and Analysis. We perform dynamic
analysis on jailbroken iOS devices by continuously running a series
of tools while a human performs actions on the device. Known jail-
breaks exploit the interface between the iOS device and a desktop,
and they abuse access to file paths in the Media/ directory. Therefore
we perform three actions on the device: 1) backing up the device
via iTunes; 2) taking a photo; and 3) making an audio recording. We
collect the following types of data via dynamic analysis: 1) sandbox
extensions; 2) file access operations; and 3) process user authority.
Since iOS devices cannot downgrade to run older iOS versions,
jailbroken devices are less readily available than firmware images.
Therefore, we perform dynamic analysis on a device for each major
version to supplement static analysis from the same major version.
For example, the dynamic analysis data from our iOS 7.1.2 device
supplements our static data for both iOS 7.0 and 7.1. Our four
jailbroken devices include an iPhone 4 with iOS 7.1.2, an iPod 5th
3http://newosxbook.com/tools/jtool.html
4https://www.hex-rays.com/products/ida/
Table 1: Policy and Runtime Context Prolog Facts
Description
File Access Observations
Process Ownership
Sandbox Extensions
Sandbox Profile Rules
Entitlements Possessed
Signature Identifier
Executable Strings
Executable Symbols
Directory Parents
File Type (From Header)
Unix User Configuration
Unix Group Membership
Vnode Types
Sandbox Assignment
Function Parameter
File Inode Number
File GID
File UID
File Permission Bits
File Symlink Target
File Type (Unix Types)
Extraction
dynamic
dynamic
dynamic
static
static
static
static
static
static
static
static
static
static
static (backtraced)
static (backtraced)
static
static
static
static
static
static
Functor
fileAccessObservation/4
processOwnership/3
sandbox_extension/2
profileRule/4
processEntitlement/2
processSignature/2
processString/2
processSymbol/2
dirParent/2
file/2
user/7
groupMembership/3
vnodeType/2
usesSandbox/3
functionCalled/3
fileInode/2
fileOwnerGroupNumber/2
fileOwnerUserNumber/2
filePermissionBits/2
fileSymLink/2
fileType/2
Gen with iOS 8.1.2, an iPhone SE with iOS 9.3.2, and an iPod 6th
Gen with iOS 10.1.1.
Sandbox Extensions: Sandbox extensions act as dynamic capabil-
ities granted to and consumed by a process at runtime in order to
satisfy conditions in that process’s sandbox profile. For example, a
sandboxed third party application can only access the Address Book
database if it has consumed the addressbook sandbox extension. We
use sbtool5 to dynamically log the sandbox extensions possessed
by each process running on the device.
Files Accessed: Unsandboxed processes can access (i.e., read, write,
or execute) any file on the file system that the Unix permissions
allow them to access. Therefore, the set of files that such unsand-
boxed processes can access is often too large to be useful. The set
of files that these processes actually access during runtime and the
types of access that occur (e.g., modify, chown) are more useful
for detecting policy flaws. We collect file access observations using
filemon6 to log various file system operations, the process that per-
formed them, and the files affected. Note that these observed file
access operations are intended to be used as an optional heuristic
to triage exploitable file paths. iOracle still models the set of files
accessible to unrestricted executables (i.e., no sandbox or root).
Process User Authority: We use ps to determine the effective UID
and GID of each process running on the device. This dynamically
captured information is especially relevant in finding the processes
that run as root and should therefore be classified as high integrity.
Dynamic Analysis Limitations: The sbtool sandbox extension
extraction feature only runs correctly on our iOS 10.1.1 device.
Therefore, each model of the iOS versions created in our study
uses sandbox extension data from iOS 10.1.1. The effective UID and
GID of a process may change under different run time scenarios
(e.g., a process could be run with either root authority or less priv-
ileged authority). Finally, we do not claim complete coverage of
iOS functionality. Therefore, our results represent an inherently
lower bound on the process authority, file operations, and sandbox
extensions that may occur.
5http://newosxbook.com/articles/hitsb.html
6http://newosxbook.com/tools/filemon.html
Figure 2: Simplified Hierarchy of Prolog Rules
4.2 Knowledge Base Construction
We model the iOS protection system by constructing a knowledge
base in Prolog. This construction requires reformatting the output of
various tools into Prolog facts as listed in Table 1. We then designed
Prolog rules that resolve high-level queries into a hierarchy of
subqueries that find the facts required to satisfy the high-level
query. A simplified hierarchy of rules is shown in Figure 2. Note
that the lowest level rules (e.g., literalFilter, checkRoot) consult
Prolog facts generated during extraction.
Prior work (i.e., SandScout) uses Prolog facts to model sandbox
policies, but relies on a human to embed relevant semantics into
complex queries requiring significant expert knowledge. For ex-
ample, SandScout could return a set of sandbox filters related to
file-write operations, but it lacks the context or modeled seman-
tics to automatically match those filters to file paths. While it is
possible to construct queries by directly referencing Prolog facts,
high-level questions involving multiple policies require specifying
an unmanageable number of conditions.
To address this issue, iOracle uses a hierarchy of Prolog rules to
keep queries at a more practical level of abstraction. The following
question will act as a running example for the remainder of this
section: What set of processes P can create files at filepath f ? While
the question appears simple, answering it requires consideration of
many facts, including Unix permissions, process authority, sandbox
rules, and sandbox assignment.
The remainder of this section discusses the purpose and design
of each rule iOracle uses to provide abstractions over policy seman-
tics. Note that users of iOracle also maintain the ability to directly
reference facts for simple queries such as checking the entitlements
possessed by a given executable.
Sandbox and Unix Policy Interaction: For a sandboxed, non-
root process to perform a file operation, both the sandbox and
Unix policies must allow the operation. These policies sometimes
have different requirements for similar operations. Creating a file
is one such example. To create a file, the sandbox must allow write
access for the filepath. In contrast, Unix permissions require write
access to the parent directory of the filepath in order to create a file.
Therefore, the query for the running example is made as follows:
sandboxAllowsunixAllowsgetAttributessatisfyFilterscheckPermissionBitsgetRelevantBitsSandbox FiltersextensionFilterentitlementFilterliteralFilterregexFiltersubpathFilterliteral-preﬁxFilterregex-preﬁxFiltersubpath-preﬁxFiltervnodeFilterrequire-notFilterOperation TypesreadOperationwriteOperationexecuteOperationOwner TypescheckRootcheckUsercheckGroupcheckOthers?-dirParent(Parent, Path),
unixAllows("write", Parent, Process),
sandboxAllows("file-write*",Path,Process).
In this query, dirParent captures a filepath, Path, and its parent
directory, Parent. unixAllows and sandboxAllows query the Unix
permissions and sandbox policy, respectively.
sandboxAllows: The sandbox access control mechanism depends
on the default policy of the matching profile. The vast majority of
sandbox profiles in iOS are default deny, so the iOracle rules assume
a default deny policy. Our Prolog rules supporting sandbox decision
abstraction are designed to match relevant context to sandbox rules
that allow a given operation. The sandboxAllows rule is defined as:
sandboxAllows(Operation,Object,Process) :-
getAttributes(Process,Entitlements,Extensions,User,Home,Profile),
profileRule(Profile,Decision,Op,Filters),
satisfyFilters(Filters,Entitlements,Extensions,Home,Object).
To match a sandbox rule to a system call’s context requires three
sources of information: the operation, the subject’s context, and the
object’s context. The operation can be specified directly in our query
(e.g., file-write* for full write access to a file), and matched directly
to sandbox profile facts. The subject is the sandboxed process, and
the object is a file path. Not all objects in sandbox rules are files,
but iOracle is designed to model file access. The getAttributes rule
maps a process to its respective entitlements, extensions, etc.
Matching the subject and object context to a sandbox rule re-
quires satisfying all filters listed in the sandbox rule. Modeling the
semantics of each filter type is non-trivial, and is performed in
iOracle by defining a Prolog rule for each of 10 filter types as shown
in Figure 2. For example, one filter could specify that the filepath
satisfy a regular expression while another requires a certain Vnode
type. A notable exception that we also model is the require_not
filter, which requires that a given filter not be satisfied. Since we
need to process a list of filters, we recursively process each filter and
declare the rule to be matched if all filters are satisfied. Consider the
following fact for the disjunctive normal form of a sandbox rule.
profileRule(profile("example_profile"),decision("allow"),
operation("file-write*"),
filters([require_entitlement("system-groups",[]),
extension("system-daemon"),
require_not(vnode-type(character-device)),
regex('^.*\.db$'),
subpath("/private/var/containers/")])).
Each filter in the rule must be satisfied for the rule’s allow de-
cision to be applied. Therefore, a process with a true value for
the system-groups entitlement key and a sufficient extension value
for the system-daemon extension class could write a non-character-
device file in /private/var/containers/ that ends in .db.
Subject Context Sandbox Filters: Three sandbox filters relate
to the access control subject (process) context: prefix, require-
-entitlement, and extension. The semantics of each filter are mod-
eled by Prolog rules that together determine if a process’s context
matches a given sandbox rule’s filters.