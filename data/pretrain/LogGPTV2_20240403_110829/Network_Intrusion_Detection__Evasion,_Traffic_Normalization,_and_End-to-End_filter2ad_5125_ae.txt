is roughly one quarter of the speed of UDP/IP normal-
ization.
These results do not, of course, mean that a kernel im-
plementation forwarding between interfaces will achieve
these speeds. However, the Linux implementation of
the click modular router [7] can forward 333,000 small
packets/sec on a 700MHz Pentium-III. The results above
indicate that normalization is cheap enough that a nor-
malizer implemented as (say) a click module should be
able to forward normal trafﬁc at line-speed on a bi-
directional 100Mb/s link.
Furthermore, if the normalizer’s incoming link is at-
tacked by ﬂooding with small packets, we should still
have enough performance to sustain the outgoing link
at full capacity. Thus we conclude that deployment of
the normalizer would not worsen any denial-of-service
attack based on link ﬂooding.
A more stressful attack would be to ﬂood the normalizer
with small fragmented packets, especially if the attacker
generates out-of-order fragments and intersperses many
fragmented packets. Whilst a normalizer under attack
can perform triage, preferentially dropping fragmented
packets, we prefer to only do this as a last resort.
To test this attack, we took the T1 trace and fragmented
every packet with an IP payload larger than 16 bytes:
trace T1-frag comprises some 3 million IP fragments
with a mean size of 35.7 bytes. Randomizing the order
of the fragment stream over increasing intervals demon-
strates the additional work the normalizer must perform.
For example, with minimal re-ordering the normalizer
can reassemble fragments at a rate of about 90Mb/s.
However, if we randomize the order of fragments by up
to 2,000 packets, then the number of packets simultane-
ously in the fragmentation cache grows to 335 and the
data rate we can handle halves.
rnd
intv’l
input
frags/s
output pkts in
frag’ed output
bit rate pkts/sec bit rate cache
39Mb/s
70
32Mb/s 133
26Mb/s 211
19Mb/s 335
100 299,670 86Mb/s 9,989
500 245,640 70Mb/s 8,188
1,000 202,200 58Mb/s 6,740
2,000 144,870 41Mb/s 4,829
It is clear that in the worst case, norm does need to per-
form triage, but that it can delay doing so until a large
fraction of the packets are very badly fragmented, which
is unlikely except when under attack.
The other attack that slows the normalizer noticeably is
when norm has to cope with inconsistent TCP retrans-
missions. If we duplicate every TCP packet in T1, then
this stresses the consistency mechanism:
All checks enabled
Trace
T1
T1-dup
pkts/sec
101,000
60,220
bit rate
397 Mb/s
236 Mb/s
Although the throughput decreases somewhat, the re-
duction in performance is not grave.
To conclude, a software implementation of a trafﬁc nor-
malizer appears to be capable of applying a large num-
ber of normalizations at line speed in a bi-directional
100Mb/s environment using commodity PC hardware.
Such a normalizer is robust to denial-of-service attacks,
although in the speciﬁc case of fragment reassembly,
very severe attacks may require the normalizer to per-
form triage on the attack trafﬁc.
Acknowledgments
We’d like to thank Bill Fenner, Brad Karp, Orion Hod-
son, Yin Zhang, Kevin Fall, Steve Bellovin and the End-
to-end Research Group for their comments and sugges-
tions. Thanks also go to Jupiter’s in Berkeley and the
ﬁne Guinness and Lost Coast brewing companies for lu-
bricating many hours of discussion on this topic.
References
[1] M. Allman, D. Glover and L. Sanchez, “Enhanc-
ing TCP Over Satellite Channels using Standard
Mechanisms,” RFC 2488, Jan. 1999.
[2] Anzen Computing, fragrouter, 1999.
http://www.anzen.com/research/nidsbench/
[3] Fyodor, nmap, 2001.
http://www.insecure.org/nmap/
[4] M. Handley, C. Kreibich, and V. Paxson, draft tech-
nical report, to appear at http://www.aciri.org/vern/
papers/norm-TR-2001.ps.gz, 2001.
[5] horizon ,
“Defeating
Sniffers and Intrusion Detection Systems”, Phrack
Magazine Volume 8, Issue 54, Dec. 25th, 1998.
[6] C. Kent and J. Mogul, “Fragmentation Considered
Harmful,” Proc. ACM SIGCOMM, 1987.
[7] E. Kohler, R. Morris, B. Chen, J. Jannotti and
M.F. Kaashoek, “The Click modular
router,”
ACM Transactions on Computer Systems, 18(3),
pp. 263–297, Aug. 2000.
[8] G. R. Malan, D. Watson, F. Jahanian and P. Howell,
“Transport and Application Protocol Scrubbing”,
Proceedings of the IEEE INFOCOM 2000 Confer-
ence, Tel Aviv, Israel, Mar. 2000.
[9] L. Deri and S. Suin, “Improving Network Secu-
rity Using Ntop,” Proc. Third International Work-
shop on the Recent Advances in Intrusion Detec-
tion (RAID 2000), Toulouse, France, Oct. 2000.
[10] S. McCanne, C. Leres and V. Jacobson, libpcap,
1994. ftp://ftp.ee.lbl.gov/libpcap.tar.Z
[11] K. Nichols, S. Blake, F. Baker and D. Black, “Def-
inition of the Differentiated Services Field (DS
Field) in the IPv4 and IPv6 Headers”, RFC 2474,
Dec. 1998.
[12] V. Paxson, “Bro: A System for Detecting Net-
work Intruders in Real-Time”, Computer Net-
works, 31(23-24), pp. 2435-2463, 14 Dec 1999.
[13] V. Paxson and M. Handley, “Defending Against
NIDS Evasion using Trafﬁc Normalizers,” pre-
sented at Second International Workshop on
the Recent Advances in Intrusion Detection,
Sept. 1999.
[14] T. H. Ptacek and T. N. Newsham, “Insertion,
Evasion and Denial of Service: Eluding Net-
work Intrusion Detection”, Secure Networks,
Inc., Jan. 1998. http://www.aciri.org/vern/Ptacek-
Newsham-Evasion-98.ps
[15] K. Ramakrishnan and S. Floyd, “A Proposal to
add Explicit Congestion Notiﬁcation (ECN) to IP”,
RFC 2481, Jan. 1999.
[16] S. Sanﬁlippo, “new tcp scan method,” Bugtraq,
Dec. 18, 1998.
[17] M. Smart, G.R. Malan and F. Jahanian, “Defeat-
ing TCP/IP Stack Fingerprinting,” Proc. USENIX
Security Symposium, Aug. 2000.
[18] M. de Vivo, E. Carrasco, G. Isern and G. de Vivo,
“A Review of Port Scanning Techniques,” Com-
puter Communication Review, 29(2), April 1999.
A Normalizations performed by norm
Our normalizer implementation norm currently per-
forms 54 of the following 73 normalizations we iden-
tiﬁed:
IP Normalizations
#
IP Field
1 Version
2 Header Len
3 Header Len
4 Diffserv
5 ECT
6 Total Len
7 Total Len
8
9
–
IP Identiﬁer
Protocol
Protocol
Normalization Performed
Non-IPv4 packets dropped.
Drop if hdr len too small.
Drop if hdr len too large.
Clear ﬁeld.
Clear ﬁeld.
link layer len.
link layer len.
Drop if tot len 
Trim if tot len 
Encrypt ID.
Enforce speciﬁc protocols.
Pass packet to TCP,UDP,ICMP
handlers.
Reassemble fragmented packets.
Clear DF.
Frag offset
Frag offset
Drop if offset + len  64KB.
Drop if DF set and offset  0.
10
11
12 DF
13 DF
14 Zero ﬂag
15
Src addr
Src addr
16
17
Src addr
18 Dst addr
19 Dst addr
20 Dst addr
21 TTL
22 Checksum
23
IP options
24
IP options
Indicates normalizations planned, but either not yet
Clear.
Drop if class D or E.
Drop if MSByte=127 or 0.
Drop if 255.255.255.255.
Drop if class E.
Drop if MSByte=127 or 0.
Drop if 255.255.255.255.
Raise TTL to conﬁgured value.
Verify, drop if incorrect.
Remove IP options.
Zero padding bytes.
implemented or not yet tested at the time of writing.
Note that most normalizations are optional, according to
local site policy.
UDP Normalizations
# UDP Field
1 Length
2 Checksum
Normalization Performed
Drop if doesn’t match length as
indicated by IP total length.
Verify, drop if incorrect.

TCP Normalizations
ICMP Normalizations
ICMP Type
#
1 Echo request Drop if destination is a multicast
Normalization Performed
2 Echo request Optionally drop if ping check-
or broadcast address.
sum incorrect.
3 Echo request Zero “code” ﬁeld.
4 Echo reply
The following “transport” protocols are recognized, but
currently passed through unnormalized: IGMP, IP-in-IP,
RSVP, IGRP, PGM.
5 Echo reply
6 Echo reply
7
Source
quench
8 Destination
Unreachable
other
9
Optionally drop if ping check-
sum incorrect.
prevent
to
Zero “code” ﬁeld.
Optionally
drop
Drop if no matching request.
DoS.
bled IP identiﬁer.
Drop.
Unscramble embedded scram-
# TCP Field
1
Seq Num
Seq Num
2
3
Seq Num
4 Ack Num
5
6
7
8
SYN
SYN
SYN
SYN
9 RST
10 RST
11 RST
FIN
12
13
PUSH
14 Header Len
15 Header Len
16 Reserved
17 ECE, CWR
18 ECE, CWR
19 Window
20 Checksum
21 URG,urgent
22 URG,urgent
23 URG
24 MSS option
25 MSS option
26 WS option
27
28
SACK pmt’d
SACK opt
29
30
31
SACK opt
SACK opt
SACK opt
32 T/TCP opts
33 T/TCP opts
34 TS option
35 TS option
36 TS option
37 MD5 option
38
other opts
Normalization Performed
Enforce data consistency in re-
transmitted segments.
Trim data to window.
Cold-start: trim to keep-alive.
Drop ACK above sequence hole.
Remove data if SYN=1.
If SYN=1 & RST=1, drop.
If SYN=1 & FIN=1, clear FIN.
If SYN=0 & ACK=0 & RST=0,
drop.
Remove data if RST=1.
Make RST reliable.
Drop if not in window.
If FIN=1 & ACK=0, drop.
If PUSH=1 & ACK=0, drop.
Drop if less than 5.
Drop if beyond end of packet.
Clear.
Optionally clear.
Clear if not negotiated.
Remove window withdrawals.
Verify, drop if incorrect.
Zero urgent if URG not set.
end of packet.
Zero if urgent 
If URG=1 & ACK=0, drop.
If SYN=0, remove option.
Cache option, trim data to MSS.
If SYN=0, remove option.
If SYN=0, remove option.
Remove
option
length
if
right edge.
Remove if left edge of SACK
Remove if any block above high-
Trim any block(s) overlapping
or continguous to cumulative ac-
Remove if NIDS doesn’t sup-
port.
invalid.
block 
est seq. seen.
knowledgement point.
Remove if under attack.
negotiated in SYN.
If packet fails PAWS test, drop.
viously sent, drop.
SYN packets without it.
If MD5 used in SYN, drop non-
Remove from non-SYN if not
If echoed timestamp wasn’t pre-
Remove options.