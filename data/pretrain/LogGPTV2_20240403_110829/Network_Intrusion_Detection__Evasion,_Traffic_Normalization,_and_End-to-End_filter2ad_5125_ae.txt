### Performance and Robustness of Traffic Normalization

The normalization process operates at approximately one-quarter the speed of UDP/IP normalization. These results, however, do not guarantee that a kernel-based implementation forwarding between interfaces will achieve the same speeds. Notably, the Linux implementation of the Click modular router [7] can forward 333,000 small packets per second on a 700MHz Pentium-III processor. The above results suggest that normalization is efficient enough for a normalizer, such as a Click module, to handle normal traffic at line-speed on a bidirectional 100Mb/s link.

Furthermore, if the normalizer's incoming link is subjected to a flooding attack with small packets, it should still be capable of maintaining full capacity on the outgoing link. This indicates that deploying a normalizer would not exacerbate denial-of-service (DoS) attacks based on link flooding.

A more challenging attack involves flooding the normalizer with small, fragmented packets, especially if the attacker generates out-of-order fragments and intersperses many fragmented packets. While a normalizer under attack can prioritize dropping fragmented packets, this is generally considered a last resort.

To test this scenario, we took the T1 trace and fragmented every packet with an IP payload larger than 16 bytes, resulting in a trace (T1-frag) comprising about 3 million IP fragments with an average size of 35.7 bytes. Randomizing the order of the fragment stream over increasing intervals demonstrates the additional workload the normalizer must handle. For example, with minimal reordering, the normalizer can reassemble fragments at a rate of about 90Mb/s. However, if the order of fragments is randomized by up to 2,000 packets, the number of packets simultaneously in the fragmentation cache increases to 335, and the data rate we can handle is halved.

| Reorder Interval | Input Fragments/s | Output Bit Rate (Mb/s) | Packets in Cache |
|------------------|-------------------|------------------------|------------------|
| 39Mb/s           | 70                | 32Mb/s                 | 133              |
| 26Mb/s           | 211               | 19Mb/s                 | 335              |
| 100              | 299,670           | 86Mb/s                 | 9,989            |
| 500              | 245,640           | 70Mb/s                 | 8,188            |
| 1,000            | 202,200           | 58Mb/s                 | 6,740            |
| 2,000            | 144,870           | 41Mb/s                 | 4,829            |

In the worst-case scenario, the normalizer may need to perform triage, but it can delay this until a significant fraction of the packets are severely fragmented, which is unlikely except during an attack.

Another type of attack that can slow down the normalizer is when it has to handle inconsistent TCP retransmissions. If every TCP packet in the T1 trace is duplicated, it stresses the consistency mechanism:

| Trace  | Packets/sec | Bit Rate (Mb/s) |
|--------|-------------|-----------------|
| T1     | 101,000     | 397 Mb/s        |
| T1-dup | 60,220      | 236 Mb/s        |

Although throughput decreases, the performance reduction is not severe.

### Conclusion

A software implementation of a traffic normalizer appears capable of applying a large number of normalizations at line speed in a bidirectional 100Mb/s environment using commodity PC hardware. Such a normalizer is robust against DoS attacks, although in the specific case of fragment reassembly, very severe attacks may require the normalizer to perform triage on the attack traffic.

### Acknowledgments

We would like to thank Bill Fenner, Brad Karp, Orion Hodson, Yin Zhang, Kevin Fall, Steve Bellovin, and the End-to-end Research Group for their comments and suggestions. Special thanks also go to Jupiter’s in Berkeley and the fine Guinness and Lost Coast brewing companies for facilitating many hours of discussion on this topic.

### References

[1] M. Allman, D. Glover, and L. Sanchez, “Enhancing TCP Over Satellite Channels using Standard Mechanisms,” RFC 2488, Jan. 1999.

[2] Anzen Computing, fragrouter, 1999. http://www.anzen.com/research/nidsbench/

[3] Fyodor, nmap, 2001. http://www.insecure.org/nmap/

[4] M. Handley, C. Kreibich, and V. Paxson, draft technical report, to appear at http://www.aciri.org/vern/papers/norm-TR-2001.ps.gz, 2001.

[5] horizon, “Defeating Sniffers and Intrusion Detection Systems,” Phrack Magazine Volume 8, Issue 54, Dec. 25th, 1998.

[6] C. Kent and J. Mogul, “Fragmentation Considered Harmful,” Proc. ACM SIGCOMM, 1987.

[7] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M.F. Kaashoek, “The Click modular router,” ACM Transactions on Computer Systems, 18(3), pp. 263–297, Aug. 2000.

[8] G. R. Malan, D. Watson, F. Jahanian, and P. Howell, “Transport and Application Protocol Scrubbing,” Proceedings of the IEEE INFOCOM 2000 Conference, Tel Aviv, Israel, Mar. 2000.

[9] L. Deri and S. Suin, “Improving Network Security Using Ntop,” Proc. Third International Workshop on the Recent Advances in Intrusion Detection (RAID 2000), Toulouse, France, Oct. 2000.

[10] S. McCanne, C. Leres, and V. Jacobson, libpcap, 1994. ftp://ftp.ee.lbl.gov/libpcap.tar.Z

[11] K. Nichols, S. Blake, F. Baker, and D. Black, “Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers,” RFC 2474, Dec. 1998.

[12] V. Paxson, “Bro: A System for Detecting Network Intruders in Real-Time,” Computer Networks, 31(23-24), pp. 2435-2463, 14 Dec 1999.

[13] V. Paxson and M. Handley, “Defending Against NIDS Evasion using Traffic Normalizers,” presented at Second International Workshop on the Recent Advances in Intrusion Detection, Sept. 1999.

[14] T. H. Ptacek and T. N. Newsham, “Insertion, Evasion and Denial of Service: Eluding Network Intrusion Detection,” Secure Networks, Inc., Jan. 1998. http://www.aciri.org/vern/Ptacek-Newsham-Evasion-98.ps

[15] K. Ramakrishnan and S. Floyd, “A Proposal to add Explicit Congestion Notification (ECN) to IP,” RFC 2481, Jan. 1999.

[16] S. Sanfilippo, “new tcp scan method,” Bugtraq, Dec. 18, 1998.

[17] M. Smart, G.R. Malan, and F. Jahanian, “Defeating TCP/IP Stack Fingerprinting,” Proc. USENIX Security Symposium, Aug. 2000.

[18] M. de Vivo, E. Carrasco, G. Isern, and G. de Vivo, “A Review of Port Scanning Techniques,” Computer Communication Review, 29(2), April 1999.

### Normalizations Performed by `norm`

Our normalizer implementation, `norm`, currently performs 54 of the following 73 identified normalizations:

#### IP Normalizations

| # | IP Field | Normalization Performed |
|---|----------|-------------------------|
| 1 | Version  | Non-IPv4 packets dropped. |
| 2 | Header Len | Drop if header length too small. |
| 3 | Header Len | Drop if header length too large. |
| 4 | Diffserv  | Clear field. |
| 5 | ECT       | Clear field. |
| 6 | Total Len | Adjust to match link layer length. |
| 7 | Total Len | Trim if total length exceeds packet length. |
| 8 | IP Identifier | Encrypt identifier. |
| 9 | Protocol  | Enforce specific protocols. |
| 10 | Fragment Offset | Drop if offset + length > 64KB. |
| 11 | DF        | Drop if DF set and offset > 0. |
| 12 | Zero Flag | Clear. |
| 13 | Source Address | Drop if class D or E. |
| 14 | Source Address | Drop if MSByte = 127 or 0. |
| 15 | Source Address | Drop if 255.255.255.255. |
| 16 | Destination Address | Drop if class E. |
| 17 | Destination Address | Drop if MSByte = 127 or 0. |
| 18 | Destination Address | Drop if 255.255.255.255. |
| 19 | TTL       | Raise TTL to configured value. |
| 20 | Checksum  | Verify, drop if incorrect. |
| 21 | IP Options | Remove IP options. |
| 22 | IP Options | Zero padding bytes. |

Note: Some normalizations are planned but not yet implemented or tested.

#### UDP Normalizations

| # | UDP Field | Normalization Performed |
|---|-----------|-------------------------|
| 1 | Length    | Drop if doesn't match IP total length. |
| 2 | Checksum  | Verify, drop if incorrect. |

#### TCP Normalizations

| # | TCP Field | Normalization Performed |
|---|-----------|-------------------------|
| 1 | Sequence Number | Enforce data consistency in retransmitted segments. |
| 2 | Sequence Number | Trim data to window. |
| 3 | Sequence Number | Cold-start: trim to keep-alive. |
| 4 | ACK Number | Drop ACK above sequence hole. |
| 5 | SYN | Remove data if SYN=1. |
| 6 | SYN & RST | If SYN=1 & RST=1, drop. |
| 7 | SYN & FIN | If SYN=1 & FIN=1, clear FIN. |
| 8 | RST | If SYN=0 & ACK=0 & RST=0, drop. |
| 9 | RST | Remove data if RST=1. |
| 10 | RST | Make RST reliable. |
| 11 | RST | Drop if not in window. |
| 12 | FIN | If FIN=1 & ACK=0, drop. |
| 13 | PUSH | If PUSH=1 & ACK=0, drop. |
| 14 | Header Len | Drop if less than 5. |
| 15 | Header Len | Drop if beyond end of packet. |
| 16 | Reserved | Clear. |
| 17 | ECE, CWR | Optionally clear. |
| 18 | Window | Remove window withdrawals. |
| 19 | Checksum | Verify, drop if incorrect. |
| 20 | URG, Urgent | Zero urgent if URG not set. |
| 21 | URG | If URG=1 & ACK=0, drop. |
| 22 | MSS Option | Cache option, trim data to MSS. |
| 23 | MSS Option | If SYN=0, remove option. |
| 24 | WS Option | If SYN=0, remove option. |
| 25 | SACK Permitted | If SYN=0, remove option. |
| 26 | SACK Option | Remove option length if right edge. |
| 27 | SACK Option | Remove if left edge of SACK. |
| 28 | SACK Option | Remove if any block above highest seq. seen. |
| 29 | SACK Option | Trim any block(s) overlapping or contiguous to cumulative acknowledgment point. |
| 30 | T/TCP Options | Remove if NIDS doesn’t support. |
| 31 | T/TCP Options | Remove if invalid. |
| 32 | TS Option | If packet fails PAWS test, drop. |
| 33 | TS Option | If echoed timestamp wasn’t previously sent, drop. |
| 34 | MD5 Option | If MD5 used in SYN, drop non-SYN packets without it. |
| 35 | Other Options | Remove options. |

Note: Most normalizations are optional, according to local site policy.