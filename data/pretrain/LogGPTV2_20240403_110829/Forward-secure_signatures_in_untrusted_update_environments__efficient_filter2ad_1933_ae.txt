at line 5. Since DecK is not involved in calls to Keygen0,
Keygen1, Sign0 or Update0, remaining operations of Keygen
are carried out as in the real game. The initial “encrypted”
is given to F
private key EncSK0 for period 0 in FSS-UU
who starts making queries.
Update queries: since the second factor DecK is not in-
volved in update operations, A can perfectly answer update
queries as in the proof of theorem 4.1.
Signing queries: at any period t, F may query A to sign
a message M . To answer such a request, A can always
1 at epoch (cid:11)t/T1(cid:12)) herself
compute σ0 (the certiﬁcate for ΣUU
since she knows the private key SK0 of Σ0 from the key
generation stage. To obtain σ1 (which is a signature on the
(cid:2)||t), she triggers the recursive
augmented message M||PK
signing algorithm Sign1 and follows its speciﬁcation until
entering the last step of the recursion (when T = 1). At
this point, A must query her challenger C to obtain a multi-
signature σ(cid:2)
w.r.t her challenge public key ˜pk and another
public key pk for which she knows the matching secret sk
that she chose herself (during the recursive key generation of
) without being required to reveal it
an instance of FSS-UU
when the update oracle was queried to enter epoch (cid:11)t/T1(cid:12).
(cid:2)
This sub-key sk of EncSK
allows her to play the malicious
party in her interaction with C. The resulting signature σ(cid:2)
(cid:2)
completes the recursion and allows her obtaining (σ1, PK
),
which ﬁnishes the signature generation.
Forgery: eventually, F is expected to produce a forgery
σ(cid:2) = ((cid:4)PK
1(cid:5), t(cid:2)) on a message M (cid:2) for some period
t(cid:2) during which M (cid:2) was not queried for signature.
(cid:2)(cid:2), σ(cid:2)
0 , σ(cid:2)
⊕
As in the security proof of the original product composi-
tion (theorem 4 in [28]), we have to distinguish two cases.
e} of public key com-
Let SEEN denote the set {PK
(cid:2)
(cid:2)
1, . . . , PK
that F happens to observe within outputs of
ponents for ΣUU
(cid:2)(cid:2) (cid:7)∈ SEEN , the inner multi-signature
1
signing queries. If PK
of σ(cid:2)
1 (which consists of a 2-party signature, a public key pk
and O(log T1) hash values) is a 2-party signature on a new
message M (cid:2)||PK
(cid:2)(cid:2)||t(cid:2)||t(cid:2) mod T1 w.r.t. the challenge pub-
lic key ˜pk and some other public key pk for which A may
not know the corresponding secret sk. However, this suﬃces
to break the unforgeability of 2MS in the plain public key
model (where A is not required to know or reveal the private
keys of maliciously generated public keys).
(cid:2)(cid:2) ∈ SEEN , σ(cid:2)
1 necessarily con-
tains a multi-signature on message M (cid:2)||PK
(cid:2)(cid:2)||t(cid:2)||t(cid:2) mod T1
(that was not previously queried since the pair (M (cid:2), t(cid:2)) was
not involved in a signing query from F) w.r.t. public keys
˜pk and a public key pk of known secret key sk, which also
implies a breach in the security of 2MS.
On the other hand, if PK
Theorem 4.5. Assuming the security of the underlying
2MS scheme in the plain public key model and the forward-
⊗
security of Σ0 in the sense of Bellare-Miner, the FSS-UU
composition is forward-secure in the sense of deﬁnition 1.
Namely, for a product scheme over T0· T1 periods, a forward
security adversary F has at most advantage
AdvFS(F) ≤ AdvFS(F0) + T0 · T1 · AdvMS(F MS)
after qs and qu signing and update queries within time
t(cid:2) ≤ max{t0 − qs · tMS
Sng − T0 · T1 · tMS
Kg ,
t1 − qs · tMS
Sng − T0 · (T1 · tMS
Kg + tFS
Sgn)},
Sgn and tFS
where tFS
Kg respectively denote the time complexi-
ties of signing and key generation algorithms in Σ0, tMS
Kg stand for these costs in 2MS while AdvFS(F0) and
Sng
and tMS
AdvMS(F MS) denote maximal advantages of a forward secu-
rity adversary F0 against Σ0 and a forger F MS against the
2MS scheme.
Proof. The result stems from the proof of theorem 4 in
[28]. As in theorem 4.2, it suﬃces to observe that FSS-UU
schemes become traditional forward-secure signatures when
the adversary knows DecK as in deﬁnition 1 and that FSS-
UU systems with one period can be implemented by 2-party
multi-signatures in the plain public key model.
4.3 Extending MMM
Recall that Malkin et al. [28] generically obtain forward-
secure signatures from any digital signatures by suitably in-
tegrating their sum and product compositions.
The salient property of the construction is that it does not
require to know the number of time period at key generation
time and allows for schemes with (virtually) unbounded life-
time: the only theoretical bound on the number of periods is
exponential in security parameters of underlying symmetric
primitives (i.e. a pseudorandom generator and a collision-
resistant hash function) and thus essentially impossible to
reach in practice. In all metrics, the MMM scheme never
exceeds a complexity that mildly (i.e.
logarithmically) de-
pends on the number of periods elapsed so far.
In a nutshell, the construction is a product composition
Σ0 ⊗ Σ1 where epochs use instances of a FSS scheme Σ1
with increasingly large numbers of periods, which is what
allows for a complexity growing as time elapses instead of
depending on a maximal number of stages. During epoch j
the product scheme uses an instance of Σ1 with 2j periods
(obtained by j iterations of the sum composition). If (cid:5) is the
security parameter of underlying symmetric primitives, the
product involves (cid:5) epochs (i.e. a scheme Σ0 with (cid:5) periods re-
sulting from the sum composition applied log (cid:5) times) so that
j=0 2j = 2(cid:5) − 1 is
the theoretical overall number of stages
far beyond the needs of any practical application.
(cid:8)(cid:5)−1
From an eﬃciency point of view, resulting signatures at
time period t consist of only two digital signatures, two pub-
lic keys and log (cid:5) + log t hash values (more precisely, log (cid:5)
of them stem from the sum composition producing Σ0 and
remaining log t hash values pertain to a second sum com-
position at epoch j = O(log t) of the product). Signature
generation only requires to compute a digital signature and
veriﬁcation entails the veriﬁcation of 2 digital signatures as
well as log (cid:5) + log t hash operations. Public keys only con-
sist of a hash value while private keys logarithmically grow
as time goes by (their length is O(λ + (log (cid:5) + log t)(cid:5)) bits).
When amortized (we refer to [28] for more details), the cost
of an update operation at period t is given by O(λ2(cid:5)+(cid:5)2 log t)
and the complexity of the key generation algorithm only de-
pends on security parameters λ and (cid:5).
By integrating our modiﬁed sum and product composi-
tions of sections 4.1 and 4.2 in the same way, we can obtain
a forward-secure signatures with untrusted updates enjoy-
ing identical performance. We ﬁrst construct a regular FSS
should result from applying FSS-UU
scheme Σ0 with (cid:5) periods thanks to the original sum compo-
sition [28]. Then, we obtain a “twisted product” by using an
1 with 2j periods at epoch j. Each instance
instance of ΣUU
of ΣUU
to any 2-party
1
multi-signature in the plain public key model. The Schnorr-
based [34] construction of [7] is a good candidate and so are
its alternative implementations based on RSA [20], factoring
[18, 31] or the Decision Diﬃe-Hellman assumption [24]. As
mentioned in [7], unrestricted aggregate signatures put forth
in [6] also give rise to multi-signatures in the plain public
key model that can be used here as well.
⊕
Again, several tradeoﬀs are possible. For instance, the
regular FSS scheme Σ0 in our “twisted product” can be a
number theoretic signature such as the one of Itkis-Reyzin
[22] instantiated over (cid:5) periods (recall that (cid:5) is the security
parameter of a symmetric primitive and is thus relatively
small w.rt. realistic numbers of periods T ). This removes
the need for including log (cid:5) hash values in signatures while
linear key generation and updates from the ﬁrst version of
[22] are avoided. Of course, the same idea applies to the
original MMM system as well.
Our full construction currently applies to only a handful
of schemes. Also, the only known examples [7, 6] of multi-
signatures in the plain public key model rely on the ran-
dom oracle methodology [5]. To date, it turns out that we
can only take full advantage of the MMM construction with
random-oracle-using signatures. However, security proofs of
our modiﬁed sum and product compositions do not rely on
random oracles. We thus believe that our extension of MMM
is an additional incentive to seek after standard model real-
izations of multi-signatures in the plain public key model.
5. CONCLUSION
In this paper, we described new constructions of forward-
secure signature with the untrusted update property re-
cently put forth in [12]. Our generic construction from any
forward-secure signature is very simple but induces size and
computational overheads. By extending the very eﬃcient
MMM sum-product composition however, we obtain a num-
ber of schemes based on various - non pairing-related - com-
putational assumptions and featuring very attractive per-
formance. This resolves an open problem raised in [12] that
called for eﬃcient implementations of untrusted updates in
existing forward-secure signatures found in the literature.
When applied to the recently suggested multi-signatures
of Bellare-Neven [7], our extension of MMM notably pro-
vides FSS-UU schemes with a practically unbounded num-
ber of time periods. It does not introduce additional random
oracle assumptions either. Currently known instantiations
of these new “unbounded” systems rely on random oracles
only because the underlying multi-signatures do.
6. REFERENCES
[1] M. Abdalla, S. K. Miner, C. Namprempre. Forward-Secure
Threshold Signature Schemes. In CT-RSA, pp. 441–456, 2001.
[2] M. Abdalla, L. Reyzin. A New Forward-Secure Digital
Signature Scheme. In ASIACRYPT, pp. 116–129, 2000.
[3] R. Anderson. Two Remarks on Public Key Cryptology. Invited
lecture, ACM CCS, 1997.
[4] M. Bellare, S. Miner. A Forward-Secure Digital Signature
Scheme. In CRYPTO, pp. 431–448, 1999.
[5] M. Bellare, P. Rogaway. Random oracles are practical: A
paradigm for designing eﬃcient protocols. In ACM CCS, pp.
62–73, 1993.
[6] M. Bellare, C. Namprempre, G. Neven. Unrestricted Aggregate
Signatures. In ICALP, pp. 411–422, 2007.
[7] M. Bellare, G. Neven. Multi-signatures in the plain public-Key
model and a general forking lemma. In ACM CCS, pp.
390–399, 2006.
[8] M. Bellare, B. Yee. Forward-Security in Private-Key
Cryptography. In CT-RSA, pp. 1–18, 2003.
[9] A. Boldyreva. Eﬃcient Threshold Signature, Multisignature
and Blind Signature Schemes Based on the
Gap-Diﬃe-Hellman-group Signature Scheme. In PKC, pp.
31–46, 2003.
[10] D. Boneh, X. Boyen, E.-J. Goh. Hierarchical Identity Based
Encryption with Constant Size Ciphertext. In EUROCRYPT,
pp. 440–456, 2005.
[11] D. Boneh, B. Lynn, and H. Shacham. Short signatures from
the Weil pairing. In ASIACRYPT, pp. 514–532, 2001.
[12] X. Boyen, H. Shacham, E. Shen, B. Waters. Forward-Secure
Signatures with Untrusted Update. In ACM CCS, pp.
191–200, 2006.
[13] R. Canetti, S. Halevi, J. Katz. A Forward Secure Public Key
Encryption Scheme. In EUROCRYPT, pp. 254–271, 2003.
[14] E. Cronin, S. Jamin, T. Malkin, P. McDaniel. On the
Performance, Feasibility and Use of Forward-Secure
Signatures. In ACM CCS, pp. 131–144, 2003.
[15] Y. Dodis, J. Katz, S. Xu, M. Yung. Key-Insulated Public Key
Cryptosystems. In EUROCRYPT’02, pp. 65–82, 2002.
[16] Y. Dodis, J. Katz, S. Xu, M. Yung. Strong key-insulated
signature schemes. In PKC, pp. 130–144, 2003.
[17] Y. Dodis, L. Reyzin. Breaking and repairing optimistic fair
exchange from PODC 2003. In Digital Rights Management
Workshop 2003, pp. 47–54, 2003.
[18] A. Fiat and A. Shamir. How to prove yourself: Practical
Solutions to Identiﬁcation and Signature Problems. In
CRYPTO, pp. 186–194, 1986.
[19] S. Goldwasser, S. Micali, R. Rivest. A Digital Signature
Scheme Secure Against Adaptive Chosen-Message Attacks.
SIAM J. Comput. 17(2), pp. 281–308, 1988.
[20] L. Guillou, J.-J. Quisquater. A “paradoxical” identity-based
signature scheme resulting from zero-knowledge. In CRYPTO,
pp. 216–231, 1988.
[21] K. Itakura, K. Nakamura. A Public Key Cryptosystem
Suitable for Digital Multisignatures. In NEC Research &
Development, 71:1–8, 1983.
[22] G. Itkis, L. Reyzin. Forward-Secure Signatures with Optimal
Signing and Verifying. In CRYPTO, pp. 332–354, 2001.
[23] G. Itkis, L. Reyzin. SiBIR: Signer-Base Intrusion-Resilient
Signatures. In CRYPTO, pp. 499–514, 2002.
[24] J. Katz, N. Wang. Eﬃciency Improvements for Signature
Schemes with Tight Security Reductions. In ACM CCS, pp.
155–164, 2003.
[25] H. Krawczyk. Simple Forward-Secure Signatures from any
Signature Scheme. ACM CCS, pp. 108-115, 2000.
[26] A. Kozlov, L. Reyzin. Forward-Secure Signatures with Fast
Key Update. In SCN, pp. 241–256, 2002.
[27] S. Lu, R. Ostrovsky, A. Sahai, H. Shacham, B. Waters.
Sequential Aggregate Signatures and Multisignatures Without
Random Oracles. In EUROCRYPT, pp. 465–485, 2006.
[28] T. Malkin, D. Micciancio, S. K. Miner. Eﬃcient Generic
Forward-Secure Signatures with an Unbounded Number Of
Time Periods. In EUROCRYPT, pp. 400–417, 2002.
[29] R. Merkle. A Digital Signature Based on a Conventional
Encryption Function. In CRYPTO, pp. 369–378, 1988.
[30] S. Micali, K. Ohta, L. Reyzin. Accountable-subgroup
multisignatures. ACM CCS, pp. 245–254, 2001.
[31] H. Ong and C. P. Schnorr. Fast signature generation with a
Fiat-Shamir like scheme. In EUROCRYPT, pp. 432–440, 1990.
[32] D. Pointcheval and J. Stern. Security proofs for signature
schemes. In EUROCRYPT, pp. 387–398, 1996.
[33] J. Rompel. One-Way Functions are Necessary and Suﬃcient
for Secure Signatures. In STOC, pp. 387–394, 1990.
[34] C. P. Schnorr. Eﬃcient identiﬁcation and signatures for smart
cards. In CRYPTO, pp. 239–252, 1989.
[35] D. Song. Practical Forward-Secure Group Signature Schemes.
ACM CCS, pp. 225–234, 2001.
[36] B. Waters. Eﬃcient Identity-Based Encryption Without
Random Oracles. In EUROCRYPT, pp. 114–127, 2005.