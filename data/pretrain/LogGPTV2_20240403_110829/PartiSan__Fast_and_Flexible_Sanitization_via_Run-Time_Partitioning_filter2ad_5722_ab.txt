variants with a probability that depends on the execution frequency (“hotness”)
and/or expected sanitization cost of that function. These policies can help us
limit the cost of sanitization.
3.1 Creating Function Variants
PartiSan’s compiler pass runs after the source code is parsed and converted into
intermediate representation (IR) code. As its ﬁrst step (Step 1 in Fig. 1), our
compiler pass analyzes the IR code and determines which functions to create
variants for. We do not necessarily create multiple variants for each function.
If the developer selects the proﬁle-guided or expected-cost partitioning policy,
and if the proﬁle data indicates that a function is infrequently executed, then we
create only the sanitized variant for that function. This design choice prevents
PartiSan from unnecessarily inﬂating the code size of the program and is justiﬁed
because checks in infrequently executed code have little impact on the program’s
overall performance.
Then, PartiSan creates the function variants ( 2 ). First, we clone functions
that should have two variants and give them new, unique names. Then, we apply
the requested instrumentations to the variants.
3.2 Creating the Indirection Layer
Once the function variants are created, our compiler pass creates the indirection
layer, through which we route all of the program’s function calls. This ensures
that the program can only call the active variant of each function. Our indirection
layer consists of three components: the variant pointer array (right side of Fig. 1),
trampolines, and control-ﬂow instructions that read their target from the pointer
array.
Our compiler starts by embedding the variant pointer array into the applica-
tion ( 3 ). The pointer array contains one slot for each function that has multiple
variants. Each slot contains a pointer to the entry point of the currently active
variant of that function.
Then, we create trampolines for externally reachable and address-taken func-
tions ( 4 ). A trampoline jumps to the currently active variant of its associated
408
J. Lettner et al.
function. We assign the original name of the associated function to the tram-
poline. This way, we ensure that any call that targets the original function now
calls the trampoline, and consequently, the currently active variant of the original
function instead.
Finally, we transform all direct call instructions that target functions with
multiple variants into indirect control-ﬂow instructions that read the pointer
to the active variant of the target function from the pointer array ( 5 ). This
optimization eliminates the need to route direct calls within the program through
the function trampolines. However, the trampolines may still be called through
indirect call instructions, or by external code.
3.3 Embedding Metadata
Our compiler embeds read-only metadata describing each function and its vari-
ants into the application ( 6 ). The metadata can consist of the function execution
frequencies read from the proﬁle data, the estimated execution costs for all func-
tion variants, and information connecting each slot in the variant pointer array
to the variant entry points associated with that slot. Our partitioning mechanism
bases run-time decisions on the metadata.
3.4 The PartiSan Runtime
Our runtime implements the selected partitioning policy by activating and deac-
tivating variants. While a speciﬁc variant is active, none of the other variants
of that same function can be called. To activate a variant, our runtime writes a
pointer to that variant’s entry point into the appropriate slot in the pointer array.
PartiSan periodically activates variants on a background thread. This allows us
to implement a variety of partitioning policies that do not slow down the appli-
cation thread(s). Operating on a background thread also allows our runtime to
run frequently, and thus make ﬁne-grained partitioning decisions.
Random Partitioning. With this policy, our runtime component activates a
randomly selected variant of each function whenever our thread wakes up. Since
we only generate two variants of each function, this policy divides the execution
time evenly among the sanitized/unsanitized function variants.
Proﬁle-Guided Partitioning. With this policy, our runtime component col-
lects the list of functions with multiple variants in the program and orders this list
based on the functions’ execution counts recorded during proﬁling. Our runtime
activates the sanitized variant of a function with a probability that is inversely
proportional to its order in the execution count list. The sanitized variant of the
most frequently executed function is activated with 1% probability, and that of
the least frequently executed function with a 100% probability. Note that this
partitioning policy does not estimate the overhead impact of executing a san-
itized variant instead of an unsanitized variant. It also does not consider the
absolute execution count of a function. For example, the second least executed
PartiSan: Fast and Flexible Sanitization via Run-Time Partitioning
409
function in a program with 100 functions is sanitized 99% of the time, even if its
execution count is 1000 times higher than that of the least executed function.
Expected-Cost Partitioning. This policy improves upon the proﬁle-guided
partitioning policy by calculating sanitization probabilities based on function
execution counts (read from the proﬁle data) and estimated sanitization cost.
We estimate the cost of sanitization for each function by calculating the costs of
all function variants using LLVM’s Cost Model Analysis. We then calculate the
probability of activating the sanitized variant for a function using formula:
Psanitization(f) =
sanitization budget(f)
costsanitization(f) ∗ execution count(f)
The sanitization overhead budget is chosen by the developer and is evenly
distributed among the functions in the program.
4 Implementation
Our prototype implementation of PartiSan supports applications compiled with
clang/LLVM 5.0 [10] on the x86-64 architecture. Our design, however, is fully
generalizable to other compilers and architectures.
4.1 Proﬁling
Two of our run-time partitioning policies rely on proﬁle data to calculate the
sanitization probabilities. We use LLVM’s built-in proﬁling functionality to gen-
erate binaries that collect proﬁle data.
4.2 Compiler Pass
Our pass instruments the program code at the LLVM IR level processing one
translation unit at a time. PartiSan is fully compatible with standard build
systems and program loaders. We scheduled our pass to run right before the
LLVM sanitizer passes, which run late in the compiler pipeline. This allows us to
deﬁne (mostly declaratively) which variants get instrumented without interfering
with LLVM’s earlier optimization stages.
Creating Function Variants. Of the sanitizers bundled with LLVM, our pass
currently supports ASan and UBSan. We did not modify any sanitizer code and
most of PartiSan’s code is tool-agnostic. To create the function variants, we
begin by passing the necessary -fsanitize command line options to the com-
piler. ASan’s front-end pass prepares the program by marking all functions that
require sanitization with a function-level attribute. With just one line of ASan-
speciﬁc code, PartiSan removes this function attribute for the unsanitized vari-
ants. UBSan’s front-end pass embeds many of its checks before the program is
translated into IR. PartiSan contains 56 lines of code to remove these checks
from the unsanitized variants.
410
J. Lettner et al.
foo :
...
# Prepare arguments
callq bar
...
(a) Original call site
foo_0 :
bar :
...
# Prepare arguments
callq *. Lptr_array +16(% rip )
...
(b) Transformed call site
# Preserve arguments
jmpq *. Lptr_array +16(% rip )
(c) Control-ﬂow trampoline
Fig. 2. Generated x86-64 assembly
Creating the Indirection Layer. We create the indirection layer as follows.
We begin by collecting the set of functions that have multiple variants. Then,
we add the variant pointer array as a global variable with internal linkage. We
choose the size of the array such that it has one slot for every function in the set.
Next, we create trampolines for all functions in the set. The trampoline, which
takes over the name of the function it corresponds to, forwards control to the
currently active variant of that function. By taking over the name of the original
function, the trampoline ensures that any calls to that function will be routed
to the currently active variant.
Next, we replace all call instructions that target functions in the set with
indirect call instructions that read their call target from the variant pointer
array. Functions outside the compilation unit will not be in the set, but might
still have multiple variants. While we do not replace calls to such instructions,
the call will still (correctly) invoke the currently active variant of the target
function because it will be routed through that function’s trampoline.
Note that the compiled program will only contain the trampolines that may
actually be used at run time. If a trampoline’s corresponding function is not
externally visible (and thus cannot be called by external code) and it does not
have its address taken (and thus cannot be called indirectly), then the trampoline
will be deleted by LLVM’s dead code elimination pass.
Figure 2 shows the assembly code that is generated for the trampolines and
transformed call sites.
Embedding Metadata. Our runtime component needs to know which function
variants are associated with each slot of the variant pointer array. Depending
on the partitioning policy, it may also require function execution frequencies
and estimated execution costs for all function variants. We add this informa-
tion (encoded in an array of function descriptors) as read-only data to each
compilation unit.
4.3 The PartiSan Runtime
The PartiSan runtime implements the three partitioning policies described in
Sect. 3.4. The runtime exposes a single externally visible function used to register
modules: cf register(const func t* start, const func t* end). Every module
registers its function variants with the runtime by invoking this function from a
constructor. After all modules have registered, the runtime initializes.
PartiSan: Fast and Flexible Sanitization via Run-Time Partitioning
411
The runtime’s initialization proceeds in four steps. First, the runtime com-
putes the activation probabilities for each function variant, according to the
conﬁgured policy. Then, we seed a secure number generator. Next, we initial-
ize all variant pointer arrays. This is necessary because the program might call
some of the variant functions before our runtime’s background thread performs
its ﬁrst round of run-time partitioning. Finally, we spawn the background thread
that is responsible for the continuous run-time partitioning.
Run-Time Partitioning. Our background thread runs an inﬁnite loop, which
invokes the partitioning procedure whenever it wakes up. This procedure iterates
through the function descriptors for every registered module. For every function,
we generate a random integer number X between 0 and 100, and use this to select
one of the variants. If the activation probabilities for the sanitized and unsani-
tized variants of a function are 0.01 and 0.99, respectively, then we will activate
the sanitized variant if X is less than 2, and we will activate the unsanitized
variant for values greater than 1. We write the pointer to the activated variant
in the variant pointer array.
We attempt to reduce cache contention by performing the write only if nec-
essary (i.e., only if the old and new value diﬀer). This adds a read dependency
on the old pointer value which may slow down the background thread. However,
the execution of the background thread is not performance critical since it runs
fully asynchronously with respect to the application threads.
5 Eﬀectiveness
We evaluate the eﬀectiveness of PartiSan with an empirical investigation of ﬁve
CVEs [15], including the infamous Heartbleed bug. Table 2 shows the CVEs
we tested. Each of them was found in a popular real-world program and the
types of vulnerabilities include stack-based overﬂows and information leaks on
the heap. We used PartiSan to compile two versions of each program, applying
ASan to the sanitized variants in one version and UBSan in the other version,
and we conﬁgured our runtime to enforce its expected-cost partitioning policy.
We detected four out of ﬁve vulnerabilities in the ASan version, and three out of
ﬁve in the UBSan version. We then compiled a third version of the program with
the same partitioning policy and applied both sanitizers to the sanitized variants.
This third version reliably detects three out of ﬁve CVEs. The remaining two
CVEs are detected in 72% and 6% of our test runs.
For each of the selected CVEs we perform the following steps:
1. Verify vulnerability exposure
2. Verify vulnerability detection
3. Collect proﬁle data
4. Evaluate vulnerability detection with PartiSan
Each of the above steps requires a program version with diﬀerent instrumenta-
tion. In step 1, we compile the vulnerable program without any instrumentation
412
J. Lettner et al.
Table 2. Evaluated CVEs
CVE # Program (Submodule)
2016-6297 Php 7.0.3 (Zip extension)
2016-6289 Php 7.0.3 (Core engine)
2016-3191 Php 7.0.3 (Pcre extension)
Vulnerability
Integer ovf. → Stack ovf.
Integer ovf. → Stack ovf.
Stack overﬂow
2014-0160 OpenSSL 1.0.1f (Heartbeat ext.) Heap over-read
2014-7185 Python 2.7.7 (Core library)
Sanitizer
UBSan, ASan 71.8%
Detection
UBSan, ASan Always
ASan
6.2%
Always
Always
ASan
Integer ovf. → Heap over-read UBSan
and verify that the vulnerability can be triggered. To do this, we use the proof-
of-concept scripts referenced in the CVE details.
In step 2, we compile the program with ASan or UBSan enabled, but without
PartiSan. We run our test script from step 1 to verify that the vulnerability is
detected by the sanitizer.
Our expected-cost partitioning policy greatly beneﬁts from proﬁle data, so
in step 3, we use LLVM’s built-in proﬁling facilities to create an instrumented
version of the program for collecting proﬁle data. We use the tests that come
with the program as the proﬁling workload. For vulnerabilities in submod-