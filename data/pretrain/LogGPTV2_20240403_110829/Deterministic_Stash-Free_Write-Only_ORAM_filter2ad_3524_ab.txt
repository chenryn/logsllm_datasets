maintain the stash of size ω(B log N), which in the stateless setting
must be transferred in its entirety on each write operation in order
to maintain obliviousness.
Less randomness and storage for IVs. The deterministic and
sequential access pattern fits nicely with encryption of each block
using counter mode. Suppose the previous writes so far have cycled
the physical storage i times, and physical block j is about to be
encrypted. Then, the block can be encrypted with the counter
i∥j∥0ℓ, where ℓ depends on how many times one needs to apply
a block cipher to encrypt the entire block. That is, we can get
indistinguishable symmetric encryption by storing just a single IV.
We stress that the above optimization cannot be applied to pre-
vious schemes due to the randomized procedure. For example, Hi-
VE-WoORAM chooses instead random IVs to encrypt each block.
These IVs must be stored separately on the server adding to the
communication cost overhead.
Additionally, we remark that the implementation [4] of HiVE-
WoORAM used RC4 as a PRG to choose random IVs for performance
reasons, but the insecurity of RC4 lead to an attack on the imple-
mentation [21].
Implementation and experiments. We have implemented Det-
WoORAM using C++ and BUSE (block device in user space). We
tested our implementation using Bonnie++ and fio on both a spinning-
platter hard drive and a solid state drive, comparing the implementa-
tion to a baseline that performs encryption only (no obliviousness)
as well as to an implementation of HiVE-WoORAM. We found
that DetWoORAM incurs only a 3x-14x slowdown compared to an
encryption-only baseline and around 6x-19x speedup compared to
HiVE-WoORAM.
Insecurity of other proposed WoORAM improvement. Data-
Lair [5] is another WoORAM scheme that has been proposed re-
cently with the goal of improving the practical performance com-
pared to HiVE-WoORAM. As our secondary contribution, we an-
alyzed this WoORAM protocol, which achieves faster writes by
tracking empty blocks within the WoORAM. We show in Section 6
that, unfortunately, the construction does not satisfy write-only
obliviousness.
2 BACKGROUND
2.1 Write-only ORAM
ORAM. An Oblivious RAM (ORAM) allows a client to store and ma-
nipulate an array of N blocks on an untrusted, honest-but-curious
server without revealing the data or access patterns to the server.
Specifically, the (logical) array of N blocks is indirectly stored into
a specialized backend data structure on the server, and an ORAM
scheme provides an access protocol that implements each logical
access with a sequence of physical accesses to the backend struc-
ture. An ORAM scheme is secure if for any two sequences of logical
accesses of the same length, the physical accesses produced by the
access protocol are computationally indistinguishable.
More formally, let (cid:174)y = (y1, y2, . . .) denote a sequence of opera-
tions, where each yi is a read(ai) or a write(ai , di); here, ai ∈ [0, N)
denotes the logical address of the block being read or written, and
di denotes a block of data being written. For an ORAM scheme
Π, let PhysicalAccΠ((cid:174)y) denote the physical access pattern that its
access protocol produces for the logical access sequence (cid:174)y. We say
the scheme Π is secure if for any two sequences of operations (cid:174)x and
(cid:174)y of the same length, it holds
PhysicalAccΠ((cid:174)x) ≈c PhysicalAccΠ((cid:174)y),
where ≈c denotes computational indistinguishability (with respect
to the security parameter λ).
Since the seminal work by Goldreich and Ostrovsky [9], many
ORAM schemes have been proposed and studied in the literature;
see Section 7 for more related work.
WoORAM. Blass et al. [4] considered a relaxed security notion
of write-only ORAM (WoORAM), where only the write physical
accesses are required to be indistinguishable. In particular, we say
an ORAM scheme Π is write-only oblivious if for any two sequences
of logical accesses (cid:174)x and (cid:174)y containing the same number of write
operations, it holds
WOnly(PhysicalAccΠ((cid:174)x)) ≈c WOnly(PhysicalAccΠ((cid:174)y)),
where WOnly denotes a function that filters out the read physical
accesses but passes the write physical accesses.
They also gave an WoORAM construction which is much more
efficient than full ORAM constructions. We will briefly describe
their construction below.
2.2 HiVE-WoORAM
Setting. In [4], to store N logical blocks, the server needs a physical
array D of M ≥ 2N elements, where each element is a pair (a, d),
where a is the logical address and d is the actual data. Obviously, all
the data in the backend storage D is encrypted with an IND-CPA
encryption scheme; throughout the paper, we will implicitly assume
that the backend data is encrypted with an IND-CPA encryption
scheme, even if we don’t use any encryption notations.
The client maintains a buffer, called stash, that temporarily holds
the blocks yet to be written to D. We assume for now that the client
also maintains the position map pos in its memory; the map pos
translates a logical address into the corresponding physical address.
This protocol depends crucially on parameter k, the number of
physical writes per logical write. This is selected to ensure a very
low probability of filling up the stash; according to [4], for k = 3,
the probability of having more than 50 items in the stash at any
given time is bounded by 2−64.
Write algorithm. The access protocol for write(a, d) works as
follows.
(1) Insert (a, d) into stash
(2) Choose k physical addresses r1, . . . , rk uniformly at random
from [0, M).
(3) For i ∈ {1, . . . , k} do:
(a) Determine whether D[ri] is free by checking whether
pos[D[ri].a] (cid:44) ri.
(b) If D[ri] is free and stash is nonempty, remove an element
(α, δ) from stash, set D[ri] ← δ, D[ri].a ← α, and update
the position map pos[α] ← ri.
(c) Otherwise, rewrite D[ri] under a new random IV.
N).
Communication complexity. Let M = O(N). Without consider-
ing the position map, their access protocol for write has fantastic
communication complexity of O(k(log N +B)), where B is the size of
a data block. In particular, with k = 3 and assuming B = Ω(log N),
the communication complexity is O(B). However, the size of the po-
sition map is Ω(N · log N), which is usually too large for the client
to store in memory. This issue can be addressed by recursively
storing the map in smaller and smaller ORAMs. Taking these recur-
sion steps into account, the eventual communication complexity
becomes O(B log2
3 DETERMINISTIC WOORAM DESIGN
In this section, we describe the algorithm for DetWoORAM con-
struction. We begin by first describing a “toy construction” that
has some of the key properties as the final algorithm, such as not
employing a stash while using a deterministic write pattern. From
this toy construction, we make a series of improvements that lead to
our actual DetWoORAM construction with sequential write pattern
and 2B communication cost per write.
3.1 A Toy Deterministic WoORAM
Construction
The toy deterministic WoORAM construction is inspired by the
square-root ORAM solution of Goldreich and Ostrovsky [9], adapted
to the write-only oblivious setting. For now, we set aside the issue
of the position map, which one could consider being stored by
the user locally and separately from the primary procedure. Later,
we will describe a method for storing the position map within an
adjacent, smaller WoORAM.
Toy Construction. Physical storage consists of an array D of 2N
data blocks of B bits each. D is divided into two areas, a main area
and a holding area (see Figure 1), where each area contains N blocks.
The key invariants of this construction, which will continue even
• Every block in the main area is stored at its actual address;
• Every block in the holding area is overwritten only after it
therefore the main area does not need any position map.
with our complete non-toy construction later, are:
has been copied to the main area.
main area
N blocks
holding area
N blocks
Figure 1: Physical data array D for the toy construction.
Each block of the storage area has an address a, and a user
interacts with the system by writing data to an address within the
main area, that is a ∈ [0, N), and reading data back by referring to
the address. In the main area, a block is always stored at its address,
but in the holding area, blocks are appended as they are written,
irrespective of their address.
In order to track where to write the next block in the holding area,
we keep a counter i of the number of write operations performed
so far. Additionally, as the holding area is not ordered, there needs
to be a position map that associates addresses a ∈ [0, N) to the
location in [0, 2N) of the freshest data associated with that address,
either at the address within the main area or a more recent write to
the holding area. The position map construction will be described
later as a write-only oblivious data structure stored with in an
adjacent, smaller WoORAM. For now, we abstract position map as
a straightforward key-value store with operations getpos(a) → a′
and setpos(a, a′)
With parameter N , counter i, and the WoORAM storage array
D, where |D| = 2N , we can now define the primary operations of
the toy WoORAM as in Algorithm 1. Note that the read operation,
which for now is trivial and which may seem irrelevant for a write-
only ORAM, is crucial to the practical performance. As we progress
to more sophisticated WoORAM schemes, both the read and write
operations will necessarily become more intricate.
Algorithm 1 Operations in Toy Deterministic WoORAM
//Perform the i-th write, storing data d at address a
function writei (a, d)
D[N + (i mod N)] := enc(d) //Write to holding area
setpos(a, N + (i mod N)) //Update position map
i := i + 1 //increment counter
//Refresh the main area
if i mod N = 0 then
for a ∈ [0, N) do
D[a] := enc(dec(D[getpos(a)]))
setpos(a, a) //Update the position map
end for
end if
end function
//Read and return data at address a
function read(a)
return dec(D[getpos(a)]) //Return freshest version of the data
end function
Properties of toy construction. Already, our toy construction
has some of the important of the properties of our final construction.
As explained below, it provides write obliviousness, it is determin-
istic, and it does not require a stash.
To see why the toy construction is write-oblivious, first consider
that each write occurs sequentially in the holding area and has
no correspondence to the actual address of the data. Writing to
the holding area does not reveal the address of the data. Second,
once the holding area has been filled completely with the freshest
data, after N operations, all the main area blocks are refreshed
with data from the holding area, or re-encrypted if no fresher data
is found in the holding area. Since all the main area blocks are
written during a refresh, it is impossible to determine which of the
addresses occurred in the holding area. In both cases, for a write to
the holding area and during a refresh, the block writes are oblivious.
The toy construction also has a deterministic write pattern: the
i-th write always touches the holding area block at index N +
(i mod N). As compared to previous ORAM and WoORAM schemes,
in which writing (or access) requires randomly selecting a set (or
path) of blocks to overwrite with the expectation that at least one
of the blocks has the requisite space to store the written data, our
construction does not require any random selection and operates
in a completely deterministic manner.
Further, as each write is guaranteed to succeed—we always write
sequentially to the holding area—there is no need for a stash. To
the best of our knowledge, all other WoORAM schemes require a
stash to handle failed write attempts. In some sense, one can think
of the stash in these systems as providing state information about
the current incomplete writes, and to have a stateless system the
full size of stash would need to be transferred on every step (even
if there is nothing in it). By contrast, our construction has constant
state cost (ignoring the position map for now), which consists
simply of the counter i and the encryption key. Our construction
continues to have constant unsynchronized client state even when
we consider the de-amortized case with position map below.
3.2 De-amortizing the toy construction
We can advance upon the toy construction above by further gen-
eralizing the storage procedure via de-amortization of the refresh
procedure as well as allowing the main and holding area to be of
different sizes. The key idea of de-amortization is that instead of
refreshing the main area once the holding area has been fully writ-
ten, we can perform a few writes to the main area for each write to
the holding area, so that it is fully refreshed at the same rate.
In this generalized setting, physical storage consists of a main
area of size N as before, and a holding area of size M, where M is
arbitrary, so that |D| = N + M.
main area
N blocks
holding area
M blocks
Figure 2: Back end data array D with unequal main and hold-
ing areas.
The key to the de-amortized write procedure is that there needs
to be a commensurate number of refreshes to the main area for each
write to the holding area. After any consecutive M writes to the
holding area, the entire main area (of size N ) needs to be refreshed,
just like what would happen in the amortized toy construction.
When N = M, this is simply accomplished by performing one
refresh for each write. When the sizes are unequal, we need to
perform on average N/M refreshes per write to achieve the same
goal. For example, consider the case where N = 2M, where the
main area is twice as large as the holding area, then N/M = 2, and
thus we perform two refreshes for every write. After M writes to
the holding area, the entire main area will have been refreshed.
It is also possible to have ratios where M > N , such as M = 2N
where the main area is half the size of the holding area, and in
fact, this setting and M = N · ⌈log(N)⌉ are both critical settings
for performance. When M > N this implies that we need to do less
than one refresh per write, on average. Specifically for N/M = 1/2,
we perform a refresh on every other write to the holding area.
Algorithm 2 has the properties of performing on average N/M
refreshes per write, while the read operation is the same as before.
Algorithm 2 De-amortized write operation with unequal size main
and holding areas.
//Perform the i-th write, storing data d at address a
function write(a, d)
D[N + (i mod M)] := enc(d) //Write to holding area
setpos(a, N + (i mod M)) //Update position map
//Refresh N/M main area blocks per-write
s := ⌊i · N/M⌋ mod N
e := ⌊(i + 1) · N/M⌋ mod N
for a′ ∈ [s, e) do
D[a′] := enc(dec(D[getpos(a′)]))
setpos(a′, a′)
end for
i := i + 1 //increment counter
end function
It is straightforward to see that the unequal size, de-amortized
solution has the same key properties as the toy construction: it is
write-oblivious, deterministic, and does not require a stash. It is
clearly deterministic because just as before, writes and refreshes
occur sequentially in the holding area and main area, respectively,
and this also assures write-obliviousness for the same reasons dis-
cussed before. It still does not require a stash because every write
will succeed, as the refresh pattern guarantees that the next write
to the holding area will always overwrite a block that has already
had the chance to be refreshed to the main area.
The only non-obvious fact may be the correctness of the scheme.
In particular, is it possible for some write to the holding area to
overwrite some other block which has not yet been refreshed to
the main area? The following lemma justifies that such a situation
cannot happen.
Lemma 3.1. Consider Algorithm 2. For any time i and address a,
there exists a time i′ when address a is refreshed to the main area