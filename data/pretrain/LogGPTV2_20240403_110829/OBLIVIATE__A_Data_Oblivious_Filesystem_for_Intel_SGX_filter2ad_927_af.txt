(a) SQLite (secs)
(b) Lighttpd (Req/secs)
Fig. 11: Runtime performance of SQLite and Lighttpd. For SQLite,
the value of K = 1, B = 3, and D = 4096. For Lighttpd, K = 8, B = 3,
and D = filesize. Since, lighttpd will read the whole file in anycase, it
makes sense to simply store it as a single block. OBLIVIATE prevents
the attacker from knowing which file was accessed.
worse than non-secure solutions. However, due to careful design
decisions, we ensure that OBLIVIATE’s overhead is less than
twice that of the in-memory filesystem, a degree of improvement
over a baseline ORAM scheme, while it provides complete
security. We also believe that OBLIVIATE can be practically
used with applications which are more security-critical than
performance-critical such as the ones mentioned in §IX-A.
IX. DISCUSSION
A. Potential Applications of OBLIVIATE
In this section, we attempt to illustrate the applications that
could serve as potential use cases for OBLIVIATE.
Cloud-based Storage. Previous work [8] has proposed using
write-only ORAM from a remote user side, in order to achieve
secure write-back into a cloud backup storage such as Dropbox,
Google Drive etc. However, their work assumes that all storage
13
1031041051061072M128M512M1G1031041051061072M128M512M1G1031041051061072M128M512M1G1031041051061072M128M512M1GNative FSHybrid FSIn-memory FSObliviate10410516M128M512M1GMsg Queueocall10310410516M128M512M1GNon-EPC (enc)EPC10-1100101INSERTSELECTHybrid FSIn-memory FSObliviate1001011021031041051K16K128K1Mattack on system call interaction, IAGO attacks [12] explores
the security implications of trusted systems (like SGX) relying
on untrusted syscalls. OBLIVIATE counters IAGO attacks by
loading initially encrypted files and mantaining their freshness
and integrity through Merkle Hash Trees (refer §VI-B2). Page
fault attacks [50] show how data and code based page faults can
be used to learn about the execution pattern of an application
within an enclave. Cache attacks [10, 40] have shown that
both L1 and LLC can be used to mount a successful cache
attack on Intel SGX. Recently, branch shadowing attack [23],
has been reported to leak fine-grained information from SGX
enclaves by exploiting uncleared branch history when there is
a context switch from enclave to non-enclave mode. In §IX-B,
we discuss how OBLIVIATE is also secure against this attack.
Side-Channel Defenses for SGX. Previous works attempted
to prevent (or their design stops) IAGO attacks, which includes
syscall based side-channel attacks as well [9, 18, 47, 48].
Focusing on protecting file resources, these works implement
an in-memory filesystem inside the SGX enclave in order to
hide file-related syscall parameters from the untrusted kernel.
There are several works which can be leveraged to stop page
fault based attacks. First, address space layout randomization
(ASLR) can be adopted for the SGX environment [41]. ASLR
will make it difficult to understand memory layout and therefore
file access patterns in case of in-memory FS. However, the
memory address will always be the same once an application
is launched, repeated page fault information will eventually
allow an attacker to decipher the underlying memory layout.
T-SGX [42] attempted to solve page fault based side-channels
by utilizing Transactional Synchronization Extensions (TSX).
Using T-SGX, an enclave application can directly receive all
page fault events ahead of the kernel handler. The key limitation
of T-SGX is that, as demonstrated in [11], it is vulnerable to
attackers who keeps track by keeping track of the access/dirty
bit in a page table, which effectively learns about memory
page access information. Another work [43] was proposed
to mask page fault patterns from revealing information by
making deterministic modifications of the programs memory
access pattern. However, their evaluation deals with smaller
applications (cryptographic in nature), involving a small number
of memory pages. In contrast, the filesystem handles far more
pages which would result in a very large overhead for an in-
memory filesystem employing their scheme. We also note that
their scheme cannot protect against cache attacks. Another
work [31] proposed a way to process Machine Learning
(ML) algorithms in a data oblivious manner. In contrast to
OBLIVIATE, their work focuses on redesigning specific ML
algorithms.
Cache attacks have been abused to exploit cryptographic
keys such as AES and RSA. There are various solutions [14,
21, 51] that have been proposed in order to secure programs
against non-SGX cache attacks. However, these will not work
with SGX since most of them require a trusted OS and/or
are prohibitively expensive. There are also various proposed
hardware solutions [25, 49].
changes. In the future, the performance issues of OBLIVIATE
can be also reduced if hardware changes can be permitted
(especially for hardware-based ORAM operations). Previous
solutions [26, 29], have shown that hardware-based ORAM
schemes offer less overhead than software-based schemes.
SGX-based Systems. Haven [9] provides a Windows-based
LibOS for the SGX to run unmodified binaries in an enclave.
Graphene [47, 48] similarly provides a Linux-based LibOS.
Panoply [44] applies the principle of separation for LibOS.
Ryoan [18] provides a sandbox for running applications that
are shared amongst mutually untrusted parties. VC3 [39] aims to
provide trusted analytics using Intel SGX in an untrusted cloud.
Scone [7] devises a mechanism to support asynchronous system
calls [45] for SGX and improves enclave performance using
user-level threading. Eleos [32] provides user-level paging in
order to prevent costly enclave exits. OpenSGX[20] provides an
open architecture for SGX research. As we design OBLIVIATE
for SGX environments, some of its design are inspired by
above mentioned work — for example, principle of separation
design from Panoply [44], message queues from Scone [7],
and extended secure memory region using non-EPC from
Eleos [32].
ORAM-based Systems. TaoStore [38] proposes a design to
share a single ORAM-tree structure. Raccoon [34] is another
work that aims to prevent executing programs from side-
channel attacks by obfuscating the execution patterns in non-
SGX environments. OBLIVIATE has adopted Raccoon’s data
oblivious memory copy using cmov. Oblivisync [8] uses write-
only ORAM to secure synchronization of local data with
Dropbox service.
XI. CONCLUSION
This paper presented OBLIVIATE, a data oblivious file
system for Intel SGX. In response to system call or page
fault based side-channel attacks, OBLIVIATE adopts an ORAM
protocol in accessing files for an SGX environment. The
evaluation using the prototype of OBLIVIATE demonstrated
its effectiveness in securely running large-scale applications
such as SQLite and Lighttpd.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
of the program committee of NDSS 2018 for their insightful
comments on this work.
REFERENCES
[1] “The apache http server project,” 2017. [Online]. Available: https://httpd.apache.org/
[2] “Intel(r) sgx linux driver,” 2017. [Online]. Available: https://github.com/01org/linux-
sgx-driver
[3] “Overview of
Intel Protected File System Library Using Software Guard
[Online]. Available: https://software.intel.com/en-us/articles/
Extensions,” 2017.
overview-of-intel-protected-file-system-library-using-software-guard-extensions
Intel Software Guard Extensions Programming Reference (rev2), Oct. 2014.
[4]
[5] 01org, “Intel(r) software guard extensions for linux* os (source code),” 2016.
[Online]. Available: https://github.com/01org/linux-sgx
Hardware-based Defenses against Side-Channels. Various
hardware solutions [24, 26, 29] have been proposed to mitigate
the risk of access pattern based attacks. In contrast to these,
OBLIVIATE is more practical since it does not impose hardware
[6] M. Alizadeh, A. Greenberg, D. A. Maltz, J. Padhye, P. Patel, B. Prabhakar,
S. Sengupta, and M. Sridharan, “Data center tcp (dctcp),” in ACM SIGCOMM
computer communication review. ACM, 2010.
[7] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind,
D. Muthukumaran, D. O Keeffe, M. L. Stillwell et al., “Scone: Secure linux
14
containers with intel sgx,” in Proceedings of the 12th USENIX Symposium on
Operating Systems Design and Implementation (OSDI), Savannah, GA, Nov. 2016.
[8] A. J. Aviv, S. G. Choi, T. Mayberry, and D. S. Roche, “Oblivisync: Practical
oblivious file backup and synchronization,” in Proceedings of the 2017 Annual
Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.
2017.
[9] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an untrusted
cloud with haven,” in Proceedings of the 11th USENIX Symposium on Operating
Systems Design and Implementation (OSDI), Broomfield, Colorado, Oct. 2014.
[10] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi,
“Software grand exposure: SGX cache attacks are practical,” in 11th USENIX
Workshop on Offensive Technologies (WOOT 17), Vancouver, BC, 2017.
[11] J. V. Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx, “Telling your
secrets without page faults: Stealthy page table-based attacks on enclaved execution,”
in Proceedings of the 26th USENIX Security Symposium (Security), Vancouver, BC,
Aug. 2017.
[12] S. Checkoway and H. Shacham, “Iago attacks: Why the system call api is a bad
untrusted rpc interface,” in Proceedings of the 18th ACM International Conference
on Architectural Support
for Programming Languages and Operating Systems
(ASPLOS), Houston, TX, Mar. 2013.
[13] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan, “Private information retrieval,”
Journal of the ACM (JACM), vol. 45, no. 6, pp. 965–981, 1998.
[14] B. Coppens, I. Verbauwhede, K. De Bosschere, and B. De Sutter, “Practical
mitigations for timing-based side-channel attacks on modern x86 processors,” in
Proceedings of the 30th IEEE Symposium on Security and Privacy (Oakland),
Oakland, CA, May 2009.
[15] V. Costan and S. Devadas, “Intel sgx explained.” IACR Cryptology ePrint Archive,
vol. 2016, p. 86, 2016.
[16] O. Goldreich and R. Ostrovsky, “Software protection and simulation on oblivious
rams,” Journal of the ACM (JACM), 1996.
[17] J. Götzfried, M. Eckert, S. Schinzel, and T. Müller, “Cache attacks on intel sgx.”
in EUROSEC, 2017, pp. 2–1.
[18] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed sandbox
for untrusted computation on secret data,” in Proceedings of the 12th USENIX
Symposium on Operating Systems Design and Implementation (OSDI), Savannah,
GA, Nov. 2016.
Intel(R) Software Guard Extensions SDK for Linux* OS, 2016,
Intel,
https://01.org/sites/default/files/documentation/intel_sgx_sdk_developer_reference_
for_linux_os_pdf.pdf.
[19]
[20] P. Jain, S. Desai, S. Kim, M.-W. Shih, J. Lee, C. Choi, Y. Shin, T. Kim, B. B.
Kang, and D. Han, “Opensgx: An open platform for sgx research,” in Proceedings
of the 2016 Annual Network and Distributed System Security Symposium (NDSS),
San Diego, CA, Feb. 2016.
[21] T. Kim, M. Peinado, and G. Mainar-Ruiz, “Stealthmem: System-level protection
against cache-based side channel attacks in the cloud,” in Proceedings of the 21st
USENIX Security Symposium (Security), Bellevue, WA, Aug. 2012.
[22] J. Kneschke, “Lighttpd,” 2003.
[23] S. Lee, M. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring fine-grained
control flow inside SGX enclaves with branch shadowing,” in Proceedings of the
26th USENIX Security Symposium (Security), Vancouver, BC, Aug. 2017.
[24] C. Liu, A. Harris, M. Maas, M. Hicks, M. Tiwari, and E. Shi, “Ghostrider: A
hardware-software system for memory trace oblivious computation,” in Proceedings
of the 20th ACM International Conference on Architectural Support for Program-
ming Languages and Operating Systems (ASPLOS), Istanbul, Turkey, Mar. 2015.
[25] F. Liu and R. B. Lee, “Random fill cache architecture,” in Proceedings of the
47th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO),
Cambridge, UK, Dec. 2014.
[26] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovic, J. Kubiatowicz,
and D. Song, “Phantom: Practical oblivious computation in a secure processor,” in
Proceedings of the 8th ACM Symposium on Information, Computer and Communi-
cations Security (ASIACCS), Hangzhou, China, May 2013.
[27] R. C. Merkle, “Method of providing digital signatures,” 1982.
[28] T. Moataz, E.-O. Blass, and G. Noubir, “Recursive trees for practical oram,”
Proceedings on Privacy Enhancing Technologies, 2015.
[29] K. Nayak, C. Fletcher, L. Ren, N. Chandran, S. Lokam, E. Shi, and V. Goyal,
“Hop: Hardware makes obfuscation practical,” in Proceedings of the 2017 Annual
Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.
2017.
[30] W. D. Norcott and D. Capps, “Iozone filesystem benchmark,” 2003.
[31] O. Ohrimenko, F. Schuster, C. Fournet, A. Mehta, S. Nowozin, K. Vaswani, and
M. Costa, “Oblivious multi-party machine learning on trusted processors,” in
Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug.
2016.
[32] M. Orenbach, P. Lifshits, M. Minkin, and M. Silberstein, “Eleos: Exitless os services
for sgx enclaves,” in Proceedings of the 12th European Conference on Computer
Systems (EuroSys), Belgrade, Serbia, Apr. 2017.
[33] M. Owens and G. Allen, SQLite. Springer, 2010.
[34] A. Rane, C. Lin, and M. Tiwari, “Raccoon: closing digital side-channels through
obfuscated execution,” in Proceedings of the 24th USENIX Security Symposium
(Security), Washington, DC, Aug. 2015.
[35] W. Reese, “Nginx: the high-performance web server and reverse proxy,” Linux
Journal, vol. 2008, no. 173, p. 2, 2008.
[36] E. Rescorla, “Diffie-hellman key agreement method,” 1999.
[37] J. Rott, “Intel advanced encryption standard instructions (aes-ni),” Technical Report,
Technical Report, Intel, 2010.
[38] C. Sahin, V. Zakhary, A. El Abbadi, H. Lin, and S. Tessaro, “Taostore: Overcom-
ing asynchronicity in oblivious data storage,” in Proceedings of the 37th IEEE
Symposium on Security and Privacy (Oakland), San Jose, CA, May 2016.
[39] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz,
and M. Russinovich, “Vc3: Trustworthy data analytics in the cloud using sgx,” in
Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San
Jose, CA, May 2015.
[40] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard, “Malware guard
extension: Using sgx to conceal cache attacks,” in Detection of Intrusions and
Malware, and Vulnerability Assessment: 14th International Conference, DIMVA
2017, Bonn, Germany, July 6-7, 2017, Proceedings.
[41] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim, “Sgx-shield:
Enabling address space layout randomization for sgx programs,” in Proceedings of
the 2017 Annual Network and Distributed System Security Symposium (NDSS), San
Diego, CA, Feb. 2017.
[42] M.-W. Shih, S. Lee, T. Kim, and M. Peinado, “T-sgx: Eradicating controlled-channel
attacks against enclave programs,” in Proceedings of the 2017 Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2017.
[43] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing your faults from
telling your secrets: Defenses against pigeonhole attacks,” in Proceedings of the
11th ACM Symposium on Information, Computer and Communications Security
(ASIACCS), Xi’an, China, May–Jun. 2016.
[44] S. Shinde, D. Le Tien, S. Tople, and P. Saxena, “Panoply: Low-tcb linux applications
with sgx enclaves,” in Proceedings of the 2017 Annual Network and Distributed
System Security Symposium (NDSS), San Diego, CA, Feb. 2017.
[45] L. Soares and M. Stumm, “Flexsc: flexible system call scheduling with exception-
less system calls,” in Proceedings of the 9th USENIX Symposium on Operating
Systems Design and Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[46] E. Stefanov, M. Van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas,
“Path oram: an extremely simple oblivious ram protocol,” in Proceedings of the
20th ACM Conference on Computer and Communications Security (CCS), Berlin,
Germany, Oct. 2013.
[47] C.-C. Tsai, K. S. Arora, N. Bandi, B. Jain, W. Jannen, J. John, H. A. Kalodner,
V. Kulkarni, D. Oliveira, and D. E. Porter, “Cooperation and security isolation of
library oses for multi-process applications,” in Proceedings of the 9th European
Conference on Computer Systems (EuroSys), Amsterdam, The Netherlands, Apr.
2014.
[48] C.-C. Tsai and D. E. Porter, “Graphene library os with intel sgx support,” 2017.
[Online]. Available: https://github.com/oscarlab/graphene
[49] Z. Wang and R. B. Lee, “A novel cache architecture with enhanced performance and
security,” in Proceedings of the 41th Annual IEEE/ACM International Symposium
on Microarchitecture (MICRO), Lake Como, Italy, Nov. 2008.
[50] Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks: Deterministic side
the 36th IEEE
channels for untrusted operating systems,” in Proceedings of
Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[51] Z. Zhou, M. K. Reiter, and Y. Zhang, “A software approach to defeating side
channels in last-level caches,” in Proceedings of the 23rd ACM Conference on
Computer and Communications Security (CCS), Vienna, Austria, Oct. 2016.
15