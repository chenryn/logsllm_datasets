### Figure 11: Runtime Performance of SQLite and Lighttpd

- **SQLite (secs)**
- **Lighttpd (Req/secs)**

**Description:**
Figure 11 illustrates the runtime performance of SQLite and Lighttpd. For SQLite, the parameters are set as follows: \( K = 1 \), \( B = 3 \), and \( D = 4096 \). For Lighttpd, the parameters are \( K = 8 \), \( B = 3 \), and \( D = \text{filesize} \). Since Lighttpd reads the entire file, it is logical to store it as a single block. OBLIVIATE ensures that an attacker cannot determine which file was accessed.

### Performance and Security Trade-offs

OBLIVIATE's performance is generally worse than non-secure solutions. However, due to careful design decisions, we ensure that OBLIVIATE's overhead is less than twice that of an in-memory filesystem, which is a significant improvement over a baseline ORAM scheme. OBLIVIATE provides complete security. We also believe that OBLIVIATE can be practically used with applications that prioritize security over performance, such as those mentioned in §IX-A.

### IX. Discussion

#### A. Potential Applications of OBLIVIATE

In this section, we explore potential use cases for OBLIVIATE.

- **Cloud-based Storage:**
  Previous work [8] has proposed using write-only ORAM from a remote user side to achieve secure write-back into cloud backup storage services like Dropbox and Google Drive. However, their approach assumes all storage operations are handled by the remote user. OBLIVIATE, on the other hand, ensures data security even when the storage is managed by untrusted parties.

- **Security Against Various Attacks:**
  - **IAGO Attacks:** These attacks exploit trusted systems (like SGX) relying on untrusted system calls. OBLIVIATE counters IAGO attacks by loading initially encrypted files and maintaining their freshness and integrity through Merkle Hash Trees (refer to §VI-B2).
  - **Page Fault Attacks:** These attacks use data and code-based page faults to learn about the execution pattern of an application within an enclave. OBLIVIATE is designed to mitigate such attacks.
  - **Cache Attacks:** Both L1 and LLC can be used to mount successful cache attacks on Intel SGX. OBLIVIATE is also secure against these attacks.
  - **Branch Shadowing Attack:** This attack leaks fine-grained information from SGX enclaves by exploiting uncleared branch history during context switches. OBLIVIATE is designed to be secure against this attack as well (see §IX-B).

- **Side-Channel Defenses for SGX:**
  Previous works have attempted to prevent IAGO attacks, including syscall-based side-channel attacks [9, 18, 47, 48]. These works implement an in-memory filesystem inside the SGX enclave to hide file-related syscall parameters from the untrusted kernel. OBLIVIATE leverages some of these techniques but also introduces additional security measures.

- **Address Space Layout Randomization (ASLR):**
  ASLR can be adopted for the SGX environment [41], making it difficult to understand memory layout and file access patterns. However, repeated page fault information can eventually allow an attacker to decipher the underlying memory layout. T-SGX [42] attempts to solve page fault-based side-channels by utilizing Transactional Synchronization Extensions (TSX), but it has limitations. Another work [43] proposes masking page fault patterns, but it is not practical for large-scale applications and does not protect against cache attacks.

- **Data-Oblivious Machine Learning:**
  Another work [31] proposed a way to process machine learning algorithms in a data-oblivious manner. In contrast, OBLIVIATE focuses on providing a general-purpose, secure filesystem.

- **Hardware-Based Defenses:**
  Various hardware solutions [24, 26, 29] have been proposed to mitigate access pattern-based attacks. OBLIVIATE is more practical as it does not require hardware changes.

- **SGX-Based Systems:**
  - **Haven [9]:** Provides a Windows-based LibOS for SGX to run unmodified binaries in an enclave.
  - **Graphene [47, 48]:** Provides a Linux-based LibOS.
  - **Panoply [44]:** Applies the principle of separation for LibOS.
  - **Ryoan [18]:** Provides a sandbox for running applications shared among mutually untrusted parties.
  - **VC3 [39]:** Aims to provide trusted analytics using Intel SGX in an untrusted cloud.
  - **Scone [7]:** Supports asynchronous system calls for SGX and improves enclave performance using user-level threading.
  - **Eleos [32]:** Provides user-level paging to prevent costly enclave exits.
  - **OpenSGX [20]:** Provides an open architecture for SGX research.

- **ORAM-Based Systems:**
  - **TaoStore [38]:** Proposes a design to share a single ORAM-tree structure.
  - **Raccoon [34]:** Obfuscates execution patterns in non-SGX environments.
  - **Oblivisync [8]:** Uses write-only ORAM to secure synchronization of local data with Dropbox.

### XI. Conclusion

This paper presents OBLIVIATE, a data-oblivious filesystem for Intel SGX. In response to system call or page fault-based side-channel attacks, OBLIVIATE adopts an ORAM protocol for accessing files in an SGX environment. The evaluation using the prototype of OBLIVIATE demonstrates its effectiveness in securely running large-scale applications such as SQLite and Lighttpd.

### Acknowledgment

The authors would like to thank the anonymous reviewers of the program committee of NDSS 2018 for their insightful comments on this work.

### References

[References listed here as provided in the original text.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.