lar to user-deﬁned functions. However, because a method
name can be deﬁned in multiple classes, our prototype has
to determine the receiver’s class to invoke the analysis of the
correct method [30].
Inter-procedural Analysis
Challenge: Receiver Analysis.
A call to a static method is easily mapped to the correct
class by its speciﬁed name (e. g., Class::method()). In case
the static keywords self::method() or parent::method()
are used, the class name can be resolved from the class hier-
archy of the current method’s class [8,36]. The same applies
if the reserved variable $this is used as receiver.
For all other non-static method calls, such as $o->method(),
the class name has to be inferred from the receiver variable
$o.
If the receiver’s name is found in the current block’s
object cache, the class name is extracted from the cached
Object symbol. Note that the object cache contains only
objects that were created in the current CFG or imported
into the current CFG as return value of a function. However,
as shown in Listing 3, if the receiver is passed as an argument
($obj1) or global variable ($obj2) to the currently analyzed
method, no information about the receiver is available. The
callee’s context is only applied to the function summary,
while our intra-procedural analysis is context-insensitive.
1 public function handler($obj1) {
2
$obj1->method1(1, 2);
global $obj2;
$obj2->method2(1, 2, 3);
3
4
5 }
Listing 3: Receiver $obj1 and $obj2 are unknown.
text: ‘test‘obj: MyClass{}obj: MyClass{           data:$text}obj: MyClass{           data:‘test‘}47We approach the problem for $obj1 by searching for all
available methods named method1() in all class deﬁnitions.
If the name is unique, the corresponding method is invoked.
Otherwise, we compare the number of arguments (here: two)
to the number of parameters speciﬁed in the method dec-
larations. Then, we invoke the analysis for all matching
candidates and combine their function summaries to one
summary. While this approach can potentially lead to an
over-approximation, it is likely that methods, such as the
method handler() in Listing 3, are intended to call diﬀer-
ent methods on diﬀerent objects.
For $obj2 we take a diﬀerent approach.
In our initial
setup phase, we index the name of all global variables within
all application’s functions and methods identiﬁed by the
global keyword or $GLOBALS variable. If a new object is as-
signed to a location having one of these indexed names, the
object’s class name is referenced to the index. During intra-
procedural analysis, the class name can then be retrieved for
global variables. In case of dynamic global variables we fall
back to the approach as described for $obj1.
Invocation-sensitive Magic Methods.
For static method calls we check the accessibility of the
method regarding to the receiver’s class name with the help
of our class hierarchy. We invoke any deﬁned __static-
Call() method of that class if the method is not accessible.
The same applies to the __call() method for non-static
method calls. Similar to the analysis of ﬁeld-sensitive magic
methods, our approach is limited by the success of our re-
ceiver analysis. However, during object injection, all classes
are considered so that our analysis of invocation-sensitive
magic methods for gadget chain generation is not limited.
Context-Sensitivity.
Once the correct method is identiﬁed and its CFG analysis
is completed, post conditions of the method call are applied
to the callee’s context. In a way similar to functions, the
summary of a method provides return values, sensitive pa-
rameters, and sensitive global variables. If a taint analysis
of a sensitive sink within a method results in an unresolved
PropertyFetch symbol and the receiver’s name is either
$this, a parameter’s name, or a global variable’s name, the
symbol is added to the function summary as sensitive prop-
erty. When the method is called, the sensitive parameters,
sensitive globals, and sensitive properties are adjusted to
the callee’s arguments and a new taint analysis is invoked
from the callee’s context. Furthermore, the object and prop-
write cache is propagated from the function summary to the
callee’s basic block. However, objects are only propagated
if their receiver is a global variable or a return value of the
method. Other objects are deleted from the cache and their
destructor is invoked.
Property writes are applied to global receivers as well as to
receivers that were passed by parameter. The receiver name
is adjusted to the arguments of the method call. Property
writes to the receiver $this are applied to the receiver of
the method call.
3.4 Case Study: POI Detection in Contao CMS
We now discuss a POI vulnerability in Contao CMS to
demonstrate the complexity of real-world OOP code and to
illustrate our novel approach of analyzing OOP code. The
aﬀected code of Contao CMS is given in Listings 4–6.
1 class PagePicker extends Backend {
2
public function run() {
3
4
5
6
7
8
9
if ($_POST && Environment::get(’isAjaxRequest’)) {
$this->objAjax = new Ajax(Input::post(’action’));
}
...
if ($_POST && Environment::get(’isAjaxRequest’)) {
$this->objAjax->execPostActions($objDca);
}
}
10
11 }
12 $objPagePicker = new PagePicker();
13 $objPagePicker->run();
Listing 4: The method run() of the class PagePicker.
Our analysis begins in line 12 of Listing 4, where a new
Object symbol is created and indexed in the block summary
under the name objPagePicker. We neglect the constructor
analysis. In the next line, the method run() is called. Its
class is determined from the recently indexed Object sym-
bol. Our analysis continues intra-procedurally in the ﬁrst
basic block of the method run() in line 4. Here, a new
object of the class Ajax is instantiated and assigned to the
property $this->objAjax. Again, we omit the construc-
tor analysis. The receiver $this is unknown at that time.
Thus, we store the new object into a PropWrite symbol.
It assigns the Object symbol Ajax to the property objAjax
of the receiver this. The PropWrite symbol is stored in
the propwrite cache and propagated to each further basic
block within the method run(). Consequently, in line 8, the
receiver $this->objAjax of the call execPostActions() is
resolved to the Ajax object from the propwrite cache. After
this call, the analysis of run() terminates and the property
write to objAjax is applied to the receiver $objPagePicker.
1 class Ajax extends Backend {
2
public function execPostActions(DataContainer $dc) {
3
4
5
if ($dc instanceof DC_Table) {
echo $dc->editAll($this->ajaxId, $id);
}
Listing 5: The method execPostActions() of the class Ajax.
In Listing 5, the executed method execPostActions() is
shown. Due to our context-insensitive intra-procedural anal-
ysis, arguments passed to a method are unknown during
analysis time. Thus, the receiver $dc of the call editAll()
in line 4 is unknown. However, our prototype is able to infer
the class information from the parameter speciﬁcation (Dat-
aContainer ) and more speciﬁcally from the if-condition in
line 3 (DC Table). Otherwise, the correct method would
have been found by method ﬁngerprinting. There are two
methods deﬁned with the name editAll(), but only one
accepts two parameters by its speciﬁcation.
1 class DC_Table {
2
public function editAll($intId=null, $ajaxId=null) {
3
4
5
if (Input::post(’FORM_SUBMIT’)) {
$session = unserialize(Input::post(’all_fields’));
}
Listing 6: The method editAll() of the class DC_Table.
Listing 6 shows the called method editAll() of the class
DC_Table. It contains the actual POI vulnerability in line 4.
Here, user input is fetched from the static class Input and
is passed to the sensitive function unserialize().
483.5 POP Chain Generation
Whenever our analysis reports a call to unserialize()
as vulnerable, the return value of the unserialize() call is
an Object symbol with a special POI ﬂag set to true. If
the return value of this unserialize() call is assigned to a
variable, the ﬂagged Object symbol is added to the current
block’s object cache that is propagated through the upcom-
ing basic blocks, as described in the previous section. How-
ever, its ﬂag causes certain diﬀerent analysis steps regarding
calls to magic methods.
First, all __wakeup() methods of all classes are analyzed
as initial gadgets. If an object-sensitive magic method is in-
voked on a ﬂagged Object symbol, all magic methods of
its type are also analyzed. This applies as well to a ﬁeld-
sensitive or invocation-sensitive magic method that is in-
voked on a ﬂagged Object symbol as receiver. The inter-
procedural analysis of the magic methods is performed with
an important diﬀerence: All sensitive properties of the func-
tion summary immediately report a POP gadget chain be-
cause the attacker has control over the object’s properties.
Furthermore, we limited gadget chains to only severe vul-
nerabilities by deactivating the detection of client-side vul-
nerabilities, such as cross-site scripting and open redirects,
in our prototype implementation. We also omit vulnera-
bilities that are triggered by a context-independent magic
method and cannot be exploited, such as path traversal at-
tacks against ﬁle handlers without further processing. An
exemplary POP analysis and report is presented in Sec-
tion 3.6.
Our approach has two remaining challenges. Recall List-
ing 3 where an object is unknown at intra-procedural anal-
ysis time. If we assume that method1() or method2() is a
magic method, we do not know at the time of the intra-
procedural analysis if the object is ﬂagged or not. Thus,
we do not know if all magic methods should be analyzed or
not. We approach this problem by setting a diﬀerent ﬂag for
each invoked magic method on an unknown receiver in the
function summary. When a method is called with a ﬂagged
object as argument, we can tell from the function summary
during inter-procedural analysis which magic method was
invoked and we trigger its analysis.
A false gadget chain report occurs if a magic method of a
class that is shipped with the project is analyzed, although
the class is not loaded at runtime within the executed code
path. We approach this problem by creating a stack of in-
cluded ﬁles [14] during analysis on-the-ﬂy. Before a magic
method is analyzed, the ﬁle name of the method’s class is
conﬁrmed in the stack in order to prove its availability. This
routine is ignored if a class autoloader is detected [38].
3.6 Case Study: POP Chain in Contao CMS
We now introduce a previously unreported gadget chain
in Contao CMS leading to an arbitrary ﬁle delete vulner-
ability. The chain is invoked through the __destruct()
method of the class Swift_Mime_SimpleEntity that is avail-
able through an autoloader. This initial gadget is shown in
Listing 7 and it is automatically analyzed, when the ﬂagged
Object symbol of a POI is removed from the object cache.
In line 3, our prototype invokes the analysis of all available
clearAll() methods within the application’s code base be-
cause the receiver $this->_cache is unknown. It can be ar-
bitrarily speciﬁed during object injection and point to any
clearAll() method.
1 class Swift_Mime_SimpleEntity {
2
public function __destruct() {
3
4
}
$this->_cache->clearAll();
Listing 7: Initial POP gadget in Contao CMS.
There are four clearAll() methods available in the code
base. While three of them are harmless, the one in the class
Swift_KeyCache_Disk triggers another gadget. As shown in
Listing 8, in line 3, it calls the function clearKey(). The
receiver of this call is the reserved variable $this. Thus,
only methods within the same class or its class hierarchy
are considered and the method deﬁned in line 5 is the only
candidate.
1 class Swift_KeyCache_Disk {
2
public function clearAll()
3
4
5
6
7
$this->clearKey();
}
public function clearKey()
unlink($this->_path);
}
Listing 8: Final POP gadget leading to arbitrary ﬁle delete.
Here, the property _path is used in the sensitive built-
in function unlink() that deletes a ﬁle. Our prototype
transfers the sensitive property _path to the receiver $this-
>_cache in the __destruct() method, where it issues a vul-
nerability report as shown in Listing 9. The POP chain
report is then attached to the POI vulnerability report.
Unserialize() to File Delete (unlink)
Swift_Mime_SimpleEntity::__destruct()
Swift_Mime_SimpleEntity->_cache = Swift_KeyCache_Disk
unlink(Swift_KeyCache_Disk->_path)
Listing 9: Generated POP chain report of our prototype.
4. EVALUATION
We implemented a prototype of the approach introduced
in the previous section as an extension of our static code
analysis framework RIPS [6]. To evaluate its eﬀectiveness,
we examined the CVE database regarding PHP object injec-
tion vulnerabilities in modern PHP applications [26]. Out
of the CVE entries published in the years 2013 and 2014, we
chose applications according to the following criteria:
• The vulnerable software version is still available for
download so that we can replicate the vulnerability.
• The application is non-trivial (i.e., has more than 40K
LOC) and is primarily written in object-oriented code.
• The aﬀected application is exploitable as it is. For ex-
ample, we excluded third-party plugins or framework
components that require an implementation.
We selected nine CVE entries matching our criteria and
also included Piwik as the ﬁrst reported software with a
POI vulnerability. The list of selected applications is given
in Table 1. Our selection includes some of the most popular
PHP applications on the Web [42].
Approximately, each of our selected application consists
of 700 PHP ﬁles and about 170K lines of PHP code (LOC).
The analysis was performed on a machine with an Intel i7-
2600 CPU @ 3.40 GHz and 16 GB RAM. On average, our
49Table 1: Evaluation results for selected applications recently aﬀected by a POI vulnerability. The number of POI vulnerabilities
and chains detected by our prototype are compared to the number of previously known issues. Highlighted numbers indicate
cases were our prototype detected novel POI vulnerabilites or POP chains.
Software
CVE Number
CVE-2014-2294 Open Web Analytics
CVE-2014-1860 Contao CMS
CVE-2014-0334 CMS Made Simple
CVE-2013-7034 LiveZilla
CVE-2013-4338 Wordpress
CVE-2013-3528 Vanilla Forums
CVE-2013-2225 GLPI
CVE-2013-1465 CubeCart
CVE-2013-1453
CVE-2009-4137 Piwik
Total
Joomla
Version
1.5.6
3.2.4
1.11.9
5.1.2.0
3.5.1
2.0.18.5
0.83.9
5.2.0
3.0.2
0.4.5
Files
463
578
692
103
425
597
1 025
846
1 592
750
7 071
LOC Time [s] Mem [MB]
475
1 264
922
342
7 640
6 471
1 632
1 483