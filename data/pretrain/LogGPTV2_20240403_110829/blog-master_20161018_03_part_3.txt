postgres=# select * from pg_stat_all_indexes where indexrelname='idx_h_1';    
 relid | indexrelid | schemaname | relname | indexrelname | idx_scan | idx_tup_read | idx_tup_fetch     
-------+------------+------------+---------+--------------+----------+--------------+---------------    
 35692 |      35698 | public     | h       | idx_h_1      |        2 |         1876 |           938    
(1 row)    
```    
为什么会有以上现象？    
bitmapscan和 index scan的获取记录方法如下：    
```    
bitmap scan: index -> heap blockid -> heap block scan -> recheck (filter tuple)      
index scan: index -> ctid (heap tuple id) -> read heap tuple     
```    
bitmap scan分了两个步骤，1、首先使用index 扫出HEAP BLOCK ID，2、然后有序的使用block ids扫描heap pages，从heap pages中找到所有的记录并根据索引条件再次recheck，筛选出有效记录。    
所以bitmapscan idx_tup_fetch = 0，是因为heap tuple不是走index leaf page的ctid直接获取的。而是通过heap block scan获取的heap tuple。    
index scan 的idx_tup_read可能大于idx_tup_fetch，因为index有垃圾版本，HEAP tuple也有垃圾版本。数据库并不知道index的版本是否为垃圾版本时都会被记录到idx_tup_read。但是计算idx_tup_fetch时，算的是有效tuple(所以一定不会计算垃圾tuple)。    
关闭自动垃圾回收，观察现象    
```    
postgres=# alter table h set (autovacuum_enabled =off);    
ALTER TABLE    
postgres=# delete from h where ctid = any (array ( select ctid from h where id=2 limit 100));    
DELETE 100    
```    
```    
postgres=# select * from pg_stat_all_indexes where indexrelname='idx_h_1';    
 relid | indexrelid | schemaname | relname | indexrelname | idx_scan | idx_tup_read | idx_tup_fetch     
-------+------------+------------+---------+--------------+----------+--------------+---------------    
 25052 |      25058 | public     | h       | idx_h_1      |        3 |         2076 |          1088    
(1 row)    
```    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from h where id=2;    
                                                       QUERY PLAN                                                            
-------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_h_1 on public.h  (cost=0.42..1801.36 rows=968 width=9) (actual time=0.765..1.820 rows=888 loops=1)    
   Output: id, info    
   Index Cond: (h.id = 2)    
   Buffers: shared hit=905 dirtied=1    
 Planning time: 0.076 ms    
 Execution time: 1.879 ms    
(6 rows)    
postgres=# select * from pg_stat_all_indexes where indexrelname='idx_h_1';    
 relid | indexrelid | schemaname | relname | indexrelname | idx_scan | idx_tup_read | idx_tup_fetch     
-------+------------+------------+---------+--------------+----------+--------------+---------------    
 25052 |      25058 | public     | h       | idx_h_1      |        4 |         3064 |          1976    
(1 row)    
postgres=# select 1976-1088;    
 ?column?     
----------    
      888    
(1 row)    
postgres=# select 3064-2076;    
 ?column?     
----------    
      988    
(1 row)    
```    
idx_tup_fetch 算的是有效heap table tuples    
idx_tup_read 算的是索引叶子节点的ctids（包含了100个垃圾版本）    
第一次查询时，可能设置了垃圾index leaf page ctids(因为第二次查询时，并不会计算这些垃圾版本).    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from h where id=2;    
                                                       QUERY PLAN                                                            
-------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_h_1 on public.h  (cost=0.42..1801.36 rows=968 width=9) (actual time=0.024..0.926 rows=888 loops=1)    
   Output: id, info    
   Index Cond: (h.id = 2)    
   Buffers: shared hit=812    
 Planning time: 0.076 ms    
 Execution time: 0.988 ms    
(6 rows)    
postgres=# select * from pg_stat_all_indexes where indexrelname='idx_h_1';    
 relid | indexrelid | schemaname | relname | indexrelname | idx_scan | idx_tup_read | idx_tup_fetch     
-------+------------+------------+---------+--------------+----------+--------------+---------------    
 25052 |      25058 | public     | h       | idx_h_1      |        5 |         3952 |          2864    
(1 row)    
postgres=# select 3952-3064;    
 ?column?     
----------    
      888    
(1 row)    
postgres=# select 2864-1976;    
 ?column?     
----------    
      888    
(1 row)    
```    
但是，在进行垃圾回收时，依旧发现index中有垃圾，所以不计数是为什么呢？：    
```    
postgres=# vacuum verbose h;    
psql: INFO:  vacuuming "public.h"    
psql: INFO:  scanned index "idx_h_1" to remove 200 row versions    
DETAIL:  CPU: user: 0.04 s, system: 0.00 s, elapsed: 0.04 s    
psql: INFO:  "h": removed 200 row versions in 184 pages    
DETAIL:  CPU: user: 0.01 s, system: 0.00 s, elapsed: 0.01 s    
psql: INFO:  index "idx_h_1" now contains 999800 row versions in 2749 pages    
DETAIL:  200 index row versions were removed.    
0 index pages have been deleted, 0 are currently reusable.    
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.    
psql: INFO:  "h": found 0 removable, 999800 nonremovable row versions in 5406 out of 5406 pages    
DETAIL:  0 dead row versions cannot be removed yet, oldest xmin: 71675731    
There were 0 unused item identifiers.    
Skipped 0 pages due to buffer pins, 0 frozen pages.    
0 pages are entirely empty.    
CPU: user: 0.10 s, system: 0.00 s, elapsed: 0.11 s.    
psql: INFO:  vacuuming "pg_toast.pg_toast_35692"    
psql: INFO:  index "pg_toast_35692_index" now contains 0 row versions in 1 pages    
DETAIL:  0 index row versions were removed.    
0 index pages have been deleted, 0 are currently reusable.    
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.    
psql: INFO:  "pg_toast_35692": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages    
DETAIL:  0 dead row versions cannot be removed yet, oldest xmin: 71675731    
There were 0 unused item identifiers.    
Skipped 0 pages due to buffer pins, 0 frozen pages.    
0 pages are entirely empty.    
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.    
VACUUM    
```    
关注这个回复    
https://www.postgresql.org/message-id/flat/15830-bb9bb19722c42076%40postgresql.org    
## 小结  
pg_stat_all_indexes 的    
```  
idx_scan            索引被扫描了多少次，和扫描多少条记录无关，和node有关，一般看执行计划，同一个索引如果在NODE中出现一次，那么这条SQL执行时这个索引就算扫描一次。    
idx_tup_read        从指定索引的leap page获取tid的条数(tid是指向heap表数据块上某条记录的一个数据结构(即heap表行号), 如(1,10)表示heap表的1号数据块的第10条记录)    
idx_tup_fetch       从索引的tid获取到的有效HEAP tuple的记数(垃圾版本不算)（每扫一条tuple计1） (bitmap scan不会算idx_tup_fetch，因为不是从leaf page的tid去查询heap tuple获取的，而是从HEAP BLOCK id去查询heap block然后再过滤出有效tuple的)   
```  
pg_statio_all_indexes 的    
```  
idx_blks_read       该索引的buffer read记数(每读一个block记1次), 包括在postgresql shared buffers中命中的，或者未在postgresql shared buffers中命中的。    
idx_blks_hit        在postgresql shared buffers中命中的buffer read记数。    
```  
pg_stat_all_tables 的    
```  
seq_scan            全表扫描的次数    
seq_tup_read        使用全表扫描扫过的tuple条数    
idx_scan            该表的所有索引扫描次数总和    
idx_tup_fetch       该表的所有 从索引的tid获取HEAP tuple的条数    
```  
pg_statio_all_tables 的    
```  
heap_blks_read      该表的buffer read记数, 包括在postgresql shared buffers中命中的，或者未在postgresql shared buffers中命中的。    
heap_blks_hit       在postgresql shared buffers中命中的buffer read记数。    
idx_blks_read       该表所有索引 所有buffer read记数(含命中和未命中)    
idx_blks_hit        该表所有索引 在shared buffer命中的buffer read记数    
toast_blks_read     heap表对应的toast表统计字段       
toast_blks_hit          
tidx_blks_read      heap表的索引对应的toast索引统计字段       
tidx_blks_hit           
```  
希望能帮助到大家，还不理解就要打屁屁了。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")