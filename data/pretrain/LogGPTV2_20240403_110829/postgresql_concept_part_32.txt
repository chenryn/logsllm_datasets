Asidefromthe"oid"field,systemattributescannotbereferencedanywhereinarule. Among
other things, this meansthat functions of instances(e.g., foo(emp) whereemp isa class)cannot
becalledanywhereinarule.
The rule system stores the rule text and query plans as text attributes. This implies that
creation of rules may fail if the rule plus its various internal representationsexceedsome value
thatisontheorderofonepage(8KB).
Usage
MakeSamgetthesamesalaryadjustmentasJoe:
CREATE RULE example_1 AS
ON UPDATE emp.salary
WHERE old.name = "Joe" DO
UPDATE emp SET salary = new.salary
WHERE emp.name = "Sam";
D.19. CREATERULE 299
AtthetimeJoereceivesasalaryadjustment,theeventwillbecometrueandJoe’soldinstanceand
proposednewinstanceareavailabletotheexecutionroutines. Hence,hisnewsalaryissubstituted
intotheactionpartoftherulewhichissubsequentlyexecuted. ThispropagatesJoe’ssalaryonto
Sam.
MakeBillgetJoe’ssalarywhenitisaccessed:
CREATE RULE example_2 AS
ON SELECT TO EMP.salary
WHERE old.name = "Bill" DO INSTEAD
SELECT emp.salary
FROM emp
WHERE emp.name = "Joe";
Deny Joe access to the salary of employees in the shoe department (current_user returns the
nameofthecurrentuser):
CREATE RULE example_3 AS
ON SELECT TO emp.salary
WHERE old.dept = "shoe" AND current_user = "Joe" DO INSTEAD
NOTHING;
Createaviewoftheemployeesworkinginthetoydepartment:
CREATE toyemp(name = char16, salary = int4);
CREATE RULE example_4 AS
ON SELECT TO toyemp DO INSTEAD
SELECT emp.name, emp.salary
FROM emp
WHERE emp.dept = "toy";
Allnewemployeesmustmake5,000orless:
CREATE RULE example_5 AS
ON INERT TO emp
WHERE new.salary > 5000 DO
UPDATE emp SET salary = 5000
WHERE emp.oid = new.oid;
Compatibility
SQL92
CREATE RULE statement is a Postgres language extension. There is no CREATE RULE
statementinSQL92.
300 APPENDIXD. REFERENCEMANUAL
D.20 CREATE SEQUENCE
Name
CREATESEQUENCE—Createsanewsequencenumbergenerator
CREATESEQUENCEseqname
[INCREMENTincrement]
[MINVALUEminvalue]
[MAXVALUEmaxvalue]
[STARTstart]
[CACHEcache]
[CYCLE]
Inputs
seqname Thenameofasequencetobecreated.
increment TheINCREMENTincrementclauseisoptional. Apositivevaluewillmakeanascend-
ingsequence,anegativeoneadescendingsequence. Thedefaultvalueisone(1).
minvalue TheoptionalclauseMINVALUEminvaluedeterminestheminimumvalueasequence
cangenerate. Thedefaultsare1and-2147483647forascendinganddescendingsequences,
respectively.
maxvalue UsetheoptionalclauseMAXVALUE maxvalueto determinethemaximum valuefor
thesequence. Thedefaultsare2147483647and-1forascendinganddescendingsequences,
respectively.
start The optional START start clause enables the sequence to begin anywhere. The default
startingvalueisminvalueforascendingsequencesandmaxvaluefordescendingones.
cache The CACHE cache option enables sequence numbers to be preallocated and stored in
memory for faster access. The minimum value is 1 (only one value can be generatedat a
time,i.e.,nocache)andthisisalsothedefault.
CYCLE TheoptionalCYCLEkeywordmaybeusedtoenablethesequencetocontinuewhenthe
maxvalueorminvaluehasbeenreachedbyanascendingordescendingsequencerespectively.
Ifthelimitisreached,thenextnumbergeneratedwillbewhatevertheminvalueormaxvalue
is,asappropriate.
Outputs
CREATE Messagereturnedifthecommandissuccessful.
D.20. CREATESEQUENCE 301
ERROR: Relation’seqname’alreadyexists Ifthesequencespecifiedalreadyexists.
ERROR: DefineSequence:MINVALUE (start)can’tbe>=MAXVALUE(max) Ifthespec-
ifiedstartingvalueisoutofrange.
ERROR: DefineSequence:STARTvalue(start)can’tbe=MAXVALUE(max) Ifthemin-
imumandmaximumvaluesareinconsistent.
Description
CREATESEQUENCEwillenteranewsequencenumbergeneratorintothecurrentdatabase.
Thisinvolvescreatingandinitializinganewsingle-rowtablewiththenameseqname.Thegenerator
willbe"owned"bytheuserissuingthecommand.
Afterasequenceiscreated,youmayusethefunctionnextval(seqname)togetanewnumber
from the sequence. The function currval(’seqname ’) may be used to determine the number
returned by the last call to nextval(seqname ) for the specified sequence in the current session.
The function setval(’seqname ’, newvalue ) may be used to set the current value of the specified
sequence. The next call to nextval(seqname ) will return the given value plus the sequence
increment.
UseaquerylikeSELECT * FROM seqname;togettheparametersofasequence. Asanalternative
to fetching the parameters from the original definition as above, you can use SELECT last_value
FROMseqname;toobtainthelastvalueallocatedbyanybackend.
Low-levellockingisusedtoenablemultiplesimultaneouscallstoagenerator.
Notes
UseDROPSEQUENCEtoremoveasequence.
Eachbackendusesitsowncachetostoreallocatednumbers. Numbersthatarecachedbutnot
usedinthecurrentsessionwillbelost,resultingin"holes"inthesequence.
Usage
Createanascendingsequencecalledserial,startingat101:
CREATE SEQUENCE serial START 101;
Selectthenextnumberfromthissequence:
SELECT NEXTVAL (’serial’);
nextval
302 APPENDIXD. REFERENCEMANUAL
-------
114
UsethissequenceinanINSERT:
INSERT INTO distributors
VALUES (NEXTVAL(’serial’),’nothing’);
SetthesequencevalueafteraCOPYFROM:
CREATE FUNCTION distributors_id_max()
RETURNS INT4 AS ’
SELECT max(id)
FROM distributors’
LANGUAGE ’sql’;
BEGIN;
COPY distributors FROM ’input_file’;
SELECT setval(’serial’, distributors_id_max());
END;
Compatibility
SQL92
CREATE SEQUENCEisa Postgreslanguageextension. Thereisno CREATE SEQUENCE
statementinSQL92.
D.21 CREATE TABLE
Name
CREATETABLE—Createsanewtable
CREATE[TEMPORARY|TEMP]TABLEtable(
columntype[NULL|NOTNULL][UNIQUE][DEFAULTvalue][column_constraint_clause
|PRIMARYKEY}[... ] ] [,... ]
[,PRIMARYKEY(column[,...] ) ] [,CHECK(condition)][,table_constraint_clause]
)[INHERITS(inherited_table[,...] ) ]
Inputs
TEMPORARY Thetableiscreatedonlyforthissession,andisautomaticallydroppedonsession
exit. Existing permanent tables with the same name are not visible while the temporary
tableexists.
D.21. CREATETABLE 303
table Thenameofanewclassortabletobecreated.
column Thenameofacolumn.
type Thetypeofthecolumn. Thismayincludearrayspecifiers. RefertothePostgreSQLUser’s
Guideforfurtherinformationaboutdatatypesandarrays.
DEFAULTvalue Adefaultvalueforacolumn. SeetheDEFAULTclauseformoreinformation.
column_constraint_clause The optional column constraint clauses specify a list of integrity
constraints or tests which new or updated entries must satisfy for an insert or update
operation to succeed. Each constraint must evaluate to a boolean expression. Although
SQL92 requires the column_constraint_clause to refer to that column only, Postgres allows
multiple columns to be referenced within a single column constraint. See the column
constraintclauseformoreinformation.
table_constraint_clause The optional table CONSTRAINT clause specifies a list of integrity
constraints which new or updatedentriesmust satisfyfor an insertor updateoperation to
succeed. Eachconstraintmustevaluatetoabooleanexpression. Multiplecolumnsmaybe
referencedwithinasingleconstraint. OnlyonePRIMARYKEYclausemaybespecifiedfora
table;PRIMARYKEYcolumn(atableconstraint)andPRIMARYKEY(acolumnconstraint)
aremutuallyexclusive. Seethetableconstraintclauseformoreinformation.
INHERITSinherited_table TheoptionalINHERITSclausespecifiesacollectionoftablenames
from which this table automatically inherits all fields. If any inherited field name appears
more thanonce, Postgresreportsanerror. Postgresautomaticallyallowsthecreatedtable
toinheritfunctionsontablesaboveitintheinheritancehierarchy.
Outputs
CREATE Messagereturnediftableissuccessfullycreated.
ERROR Messagereturnediftablecreationfailed. Thisisusuallyaccompaniedbysomedescrip-
tive text, such as: ERROR: Relation ’table ’ already exists, which occurs at runtime if the
tablespecifiedalreadyexistsinthedatabase.
ERROR: DEFAULT:typemismatched Ifdatatypeofdefaultvaluedoesn’tmatchthecolumn
definition’sdatatype.
Description
CREATE TABLE will enter a new class or table into the current data base. The table will be
"owned"bytheuserissuingthecommand.
304 APPENDIXD. REFERENCEMANUAL
Eachtypemaybeasimpletype,acomplextype(set)oranarraytype. Eachattributemaybe
specifiedtobenon-nullandeachmayhaveadefaultvalue,specifiedbytheDEFAULTClause.
Note: Consistentarraydimensionswithinanattributearenotenforced. Thiswilllikelychange
inafuturerelease.
The optional INHERITS clause specifies a collection of class names from which this class
automatically inherits all fields. If any inherited field name appears more than once, Postgres
reports an error. Postgres automatically allows the created class to inherit functions on classes
aboveitintheinheritancehierarchy. Inheritanceoffunctionsisdoneaccordingtotheconventions
oftheCommonLispObjectSystem(CLOS).
Each new table or class table is automatically created as a type. Therefore, one or more
instances from the class are automatically a type and can be used in ALTER TABLE or other
CREATETABLEstatements.
The new table is created as a heap with no initial data. A table can have no more than 1600
columns(realistically,thisislimitedbythefactthattuplesizesmustbelessthan8192bytes),but
thislimitmaybeconfiguredloweratsomesites. Atablecannothavethesamenameasasystem
catalogtable.
DEFAULT Clause
DEFAULTvalue
Inputs
value Thepossiblevaluesforthedefaultvalueexpressionare:
• aliteralvalue
• auserfunction
• aniladicfunction
Outputs
None.
Description
The DEFAULT clause assigns a default data value to a column (via a column definition in the
CREATETABLEstatement). Thedatatypeofadefaultvaluemustmatchthecolumndefinition’s
datatype.
AnINSERToperationthatincludesacolumnwithoutaspecifieddefaultvaluewillassignthe
NULL value to the column if no explicit data value is provided for it. Default literal means that
D.21. CREATETABLE 305
thedefaultisthespecifiedconstantvalue. Defaultniladic-functionoruser-functionmeansthatthe
defaultisthevalueofthespecifiedfunctionatthetimeoftheINSERT.
Therearetwotypesofniladicfunctions:
niladicUSER
CURRENT_USER /USER SeeCURRENT_USERfunction
SESSION_USER SeeCURRENT_USERfunction
SYSTEM_USER Notimplemented
niladicdatetime
CURRENT_DATE SeeCURRENT_DATEfunction
CURRENT_TIME SeeCURRENT_TIMEfunction
CURRENT_TIMESTAMP SeeCURRENT_TIMESTAMPfunction
Usage
Toassignaconstantvalueasthedefaultforthecolumnsdidandnumber,andastringliteraltothe
columndid:
CREATE TABLE video_sales (
did VARCHAR(40) DEFAULT ’luso films’,
number INTEGER DEFAULT 0,
total CASH DEFAULT ’$0.0’
);
Toassignanexistingsequenceasthedefaultforthecolumndid,andaliteraltothecolumnname:
CREATE TABLE distributors (
did DECIMAL(3) DEFAULT NEXTVAL(’serial’),
name VARCHAR(40) DEFAULT ’luso films’
);
Column CONSTRAINT Clause
[CONSTRAINTname]{
[NULL|NOTNULL]|UNIQUE|PRIMARYKEY|CHECKconstraint|
REFERENCESreftable(refcolumn)[MATCHmatchtype][ONDELETEaction][ONUPDATE
action][[NOT]DEFERRABLE][INITIALLYchecktime]}[,...]
306 APPENDIXD. REFERENCEMANUAL
Inputs
name Anarbitrarynamegiventotheintegrityconstraint. Ifnameisnotspecified,itisgenerated
fromthetableandcolumnnames,whichshouldensureuniquenessforname.
NULL ThecolumnisallowedtocontainNULLvalues. Thisisthedefault.
NOTNULL ThecolumnisnotallowedtocontainNULLvalues. Thisisequivalenttothecolumn
constraintCHECK(columnNOTNULL).
UNIQUE The column must have unique values. In Postgres this is enforced by an implicit
creationofauniqueindexonthetable.
PRIMARYKEY Thiscolumnisaprimarykey,whichimpliesthatuniquenessisenforcedbythe
system and that other tables may rely on this column as a unique identifier for rows. See
PRIMARYKEYformoreinformation.
constraint Thedefinitionoftheconstraint.
Description
The optional constraint clauses specify constraints or tests which new or updated entries must
satisfy for an insertor update operation to succeed. Each constraintmust evaluateto a boolean
expression. Multipleattributesmaybereferencedwithinasingleconstraint. TheuseofPRIMARY
KEYasatableconstraintismutuallyincompatiblewithPRIMARYKEYasacolumnconstraint.
Aconstraintisanamedrule: anSQLobjectwhichhelpsdefinevalidsetsofvaluesbyputting
limitsontheresultsofINSERT,UPDATEorDELETEoperationsperformedonaBaseTable.
Therearetwowaystodefineintegrityconstraints: tableconstraints,coveredlater,andcolumn
constraints,coveredhere.
Acolumnconstraintisanintegrityconstraintdefinedaspartofacolumndefinition,andlogically
becomesatableconstraintassoonasitiscreated. Thecolumnconstraintsavailableare:
PRIMARY KEY
REFERENCES
UNIQUE
CHECK
NOT NULL
NOTNULLConstraint
[CONSTRAINTname]NOTNULL
The NOT NULL constraint specifies a rule that a column may contain only non-null values.
Thisisacolumnconstraintonly,andnotallowedasatableconstraint.
D.21. CREATETABLE 307
Outputs
status ERROR: ExecAppend: Fail to add null value in not null attribute "column ". This error
occurs at runtime if one tries to inserta null value into a column which has a NOT NULL
constraint.
Description
Usage
DefinetwoNOTNULLcolumnconstraintsonthetabledistributors,oneofwhichbeinganamed
constraint:
CREATE TABLE distributors (
did DECIMAL(3) CONSTRAINT no_null NOT NULL,
name VARCHAR(40) NOT NULL
);
UNIQUEConstraint
[CONSTRAINTname]UNIQUE
Inputs
CONSTRAINTname Anarbitrarylabelgiventoaconstraint.
Outputs
status
ERROR:Cannotinsertaduplicatekeyintoauniqueindex. Thiserroroccursatrun-
timeifonetriestoinsertaduplicatevalueintoacolumn.
Description
The UNIQUE constraint specifiesa rule that a group of one or more distinct columns of a table
maycontainonlyuniquevalues.
ThecolumndefinitionsofthespecifiedcolumnsdonothavetoincludeaNOTNULLconstraint
to be included in a UNIQUE constraint. Having more than one null valuein a column without a
NOT NULL constraint, does not violate a UNIQUE constraint. (This deviates from the SQL92
definition,butisamoresensibleconvention. Seethesectiononcompatibilityformoredetails.)
EachUNIQUEcolumnconstraintmustnameacolumnthatisdifferentfromthesetofcolumns
namedbyanyotherUNIQUEorPRIMARYKEYconstraintdefinedforthetable.