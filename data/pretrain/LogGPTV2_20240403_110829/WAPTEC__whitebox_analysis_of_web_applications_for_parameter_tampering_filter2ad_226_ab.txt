ple to analyze, WAPTEC extracts a logical representation of all
such inputs (fclient) and utilizes constraint-solving technology to
directly construct an input the client accepts (i.e., without fuzzing).
While the server does not accept every input the client accepts,
therefore requiring constraint-guided search, the client side code is
a good enough approximation that WAPTEC often ﬁnds a benign
input on the ﬁrst try.
When searching for attacks on a given control path on the server
in step (ii), WAPTEC again uses fclient to generate inputs, but
in this case the inputs are designed to be hostile. The main thesis
of WAPTEC’s approach is that if the client code rejects an input,
the server ought to reject it as well; thus, every input satisfying the
negation of fclient is a potential hostile input (parameter tampering
exploit), which constraint solvers can again construct directly. Fur-
HTML/ JS AnalyzerConstraintSolverHTTP RequestBenignInstrumented  ServerHTTP ResponseExecutionTraceTraceAnalyzerHTTP RequestHostileConﬁrmExploit1345789¬ fc∧ fsSuccessBenign?✓✕ fc ∧ ¬ fsfs fc 69 fc=fclientfs=fserver ib  ih2577thermore, WAPTEC uses the logical representation of fclient to
group all the potential exploits by the vulnerabilities they illustrate
and generates one (or any number) of exploits per distinct vulnera-
bility.
Below we describe WAPTEC’s two step approach in more detail
and refer to the steps shown in Figure 1.
3.1 Finding benign inputs
The purpose of a web form that validates user input is to re-
ject inputs that the server will (or in practice should) reject. The
converse is also often true: if the web form accepts an input the
server will also accept it. We can therefore reasonably treat the
constraints the web form checks as an approximate speciﬁcation
for the server’s intended behavior. WAPTEC extracts the con-
straints enforced by the web form (which we call fclient) using
program analysis, which is accomplished by the HTML / JavaScript
Analyzer in step 2 of Figure 1. For our running example, the
client formula is quantity ≥ 0 ∧ len(name) ≤ 10 ∧ card ∈
{card-1|card-2} ∧ op = “purchase(cid:48)(cid:48) where the ﬁrst two con-
straints are contributed by JavaScript and the rest are derived from
HTML.
To ﬁnd a benign input, WAPTEC starts by using its Constraint
Solver component to ﬁnd any input that satisﬁes fclient and then
submits that input to the server (step 3). To check whether or not
the input reaches a sensitive sink (i.e., is benign), WAPTEC an-
alyzes the code executed by the server using its Trace Analyzer
component (step 4). If the server reaches a sensitive sink, the in-
put is benign. However, sometimes the input fails to reach a sen-
sitive sink because the server enforces more constraints than the
client. These extra constraints can arise, for example, because the
server has more information than the client (e.g., the list of ex-
isting usernames).
In our running example, the input satisfying
fclient might be quantity = 3, name = “JohnDoe”, card =
card-1, op = “purchase(cid:48)(cid:48). The server rejects this input because
it requires address to have a non-null value (i.e., address is a
required value).
When an input that satisﬁes fclient fails to reach a sensitive
sink, WAPTEC attempts to augment fclient with additional con-
straints, the intention being that any input satisfying the augmented
fclient will lead to a sensitive sink. To compute this augmentation,
WAPTEC examines the execution trace of the code the server exe-
cuted on the failed input, and computes a logical formula represent-
ing that code trace (called fserver, computed in step 5, by the Trace
Analyzer). The intuition is that fserver represents (the conjunction
of) the conditions on the server’s inputs that if true will always lead
to the same control path. Since that control path fails to lead to a
sensitive sink, every input leading to a sensitive sink must falsify
one of the conditions on the path, i.e., it must satisfy the negation of
fserver. Thus, the augmentation of fclient when no success sink is
found is fclient∧¬fserver (step 9). In our example, the augmented
fclient would be quantity ≥ 0 ∧ len(name) ≤ 10 ∧ card ∈
{card-1|card-2} ∧ op = “purchase(cid:48)(cid:48) ∧ required(address),
where required(x) means variable x is required to have a value.
This process then repeats, starting with the augmented fclient,
ﬁnding an input that satisﬁes it, and iterating until WAPTEC ﬁnds
a benign input. At a high level, this process generates a series of
inputs, where each subsequent input has a better chance of being a
benign input than all of the previous.
Once WAPTEC ﬁnds a benign input, it performs a depth-limited
version of the procedure above to ﬁnd additional, nearby control
paths that lead to sensitive operations. To do that, WAPTEC ana-
lyzes the trace to extract fserver, which is a conjunction C1 ∧···∧
Cn. For each Ci, WAPTEC adds ¬Ci to (the augmented) fclient,
ﬁnds a satisfying input, and checks if that input leads to a sensi-
tive operation. We call this process perturbation, since WAPTEC
attempts to perturb the constraints leading to one sensitive sink
to ﬁnd additional sinks. Since each Ci can potentially produce a
distinct control path leading to a sensitive sink, after this depth-
limited search WAPTEC has between 1 and n + 1 control paths
leading to sensitive operations. The perturbation process is moti-
vated by the intuition that small changes to successful inputs may
still drive execution successfully to sensitive sinks, which are often
clustered together, and hence after ﬁnding a single sink, there is a
high likelihood of ﬁnding additional sinks nearby. It is noteworthy
that WAPTEC does not perturb a path that has no sensitive sinks
because all the paths that it would reach by perturbation are already
reachable by the augmentation of fclient by ¬fserver.
3.2 Finding hostile inputs
For each control path WAPTEC ﬁnds that leads to a sensitive
sink, it attempts to generate inputs that the server ought not ac-
cept but that lead to that same sink. Generating inputs the server
ought not accept is straightforward: ﬁnd solutions to the negation
of fclient, for if the client rejects a given input, we can be assured
the server will reject it as well (or else the client fails to expose the
server’s full functionality to users). Generating inputs that cause
the server to follow the same control path and therefore arrive at
the same sensitive sink is likewise straightforward: ﬁnd solutions to
fserver. Thus, generating inputs that follow the same control path
and therefore are accepted by the server but that the server should
not accept amounts to ﬁnding a solution to ¬fclient ∧ fserver (step
6). Conceptually, every such solution amounts to a parameter tam-
pering exploit, but to ensure the input is in fact an exploit, we sub-
mit it to the server (step 7) and ensure it reaches a success sink
(steps 8 and 9).
Furthermore, instead of generating one input for ¬fclient∧fserver,
WAPTEC generates one input for each disjunct δ in the disjunctive
normal form of ¬fclient by ﬁnding a solution to δ ∧ fserver. Each
of those inputs satisﬁes a logically distinct set of constraints and
hence is likely to represent a logically distinct vulnerability. Each
δ ∧ fserver can be construed as a distinct server-side vulnerability
witnessed by one of the exploits WAPTEC ﬁnds.
0∨len(name) > 10∨op! = “purchase(cid:48)(cid:48)∨card (cid:54)∈ {card-1|card-2}.
There is a control path through the server where fserver includes
required(address) ∧ ¬len(name) > 10. Thus, to construct an
exploit, WAPTEC uses the Constraint Solver to ﬁnd one solution
to
formula
quantity  10) and
another
formula
len(name) > 10 ∧ required(address) ∧ ¬(len(name) > 10).
In the ﬁrst case, the server executes an INSERT operation, and is
deemed an exploit (hostile). This exploit illustrates the vulnerabil-
ity where quantity is given a negative value. The second formula
is not satisﬁable and therefore there is no exploit reported.
In our running example, the negation of fclient is quantity  10 ) {
8 }
9
10 if($_GET[’op’] == "purchase"){
11
12
$main_cost = $_POST[’quantity’] * 100 + 10;
//
where $price is 100
if(!isset($_POST[’discount’]){
$main_q = "INSERT INTO order (‘name‘,‘address‘, ‘
card‘, ‘cost‘)";
$main_q = "INSERT INTO order (‘name‘, ‘address‘,
‘card‘, ‘cost‘)" . "VALUES(’" . $main_n .
", ’" . $_POST[’address’] . "’" . $main_ca
. "," . $main_cost . ");";
mysql_query ($main_q);
$_wb_status = "SUCCESS";
// query
execution denoted by SUCCESS status
}
13
14
15
16
17
18
19
20
21
22