BITSInject 
Using the BITS service to execute a program in the 
“NT AUTHORITY/SYSTEM” session. 
Summary 
BITS Background 
Details 
How We Got There - Research Flow 
First Naive Try 
Taking Inspiration From Windows Update Service (wuaueng) 
Imitating Wuaueng 
The State File is the Supervisor 
Interactive or not? 
Migrate your Payload 
A Cleaner Method 
A Little Anecdote 
Reproduction Instructions 
General Reproduction Description 
Step-by-step Reproduction instructions 
Affected Environment Details 
Summary 
We formed a logical manipulation on BITS’s permissions validation model. As a local 
administrator, we were able to take almost full control of the BITS jobs queue, altering jobs’ 
properties and states, ​ultimately achieving program execution in the ​LocalSystem account 
(​NT AUTHORITY/SYSTEM)​, within session 0. 
It does not involve creating a new service, nor modifying any of the OS’s PE files. 
We introduce a new method in which a ​local administrator account​ can execute a program in 
the ​NT AUTHORITY/SYSTEM​ context. The method relies on BITS NotifyCmdLine option, by 
injecting a job to the service queue. Execution can be either interactive  or not. 
1
In this article, we would like to not only introduce the practical method, but also: 
●
Present a detailed explanation of the binary structure of the BITS DB file (from now on, 
we will use the internal name - “state file”) 
●
Share the knowledge we gathered while researching the service operation flow 
●
Provide free giveaways: 
○
A one-click python script that executes a program as LocalSystem using this new 
technique 
○
A generic python script that injects any pre-produced job into the current queue 
○
An ​010 editor​ template file with the types and structs definitions, which can be 
used to parse BITS files. 
○
SimpleBITSServer​ - a Python implementation of a BITS server, based on 
Python’s ​SimpleHTTPRequestHandler​. 
1An interactive program will dispatch the “Interactive Services Detection” message (forced by the 
UI0Detect ​service). 
BITS Background 
It is important to understand BITS and some of the key terms used throughout this article. So 
what is BITS in brief? 
●
A mechanism (service and protocol) that facilitates transferring of files over HTTP 
asynchronously in the background, featuring priorities, fail recovery and persistency. 
●
Its most widespread use is to download Windows updates from Microsoft servers. Many 
other programs use it as well for downloading updates. 
●
qmgr.dll​ is the Windows service DLL implementing BITS client. 
●
It is easily used in recent Windows versions through PowerShell cmdlets, and in 
previous versions - bitsadmin.exe deprecated utility. 
○
C/C++ API interfaces (COM) are available and documented on MSDN. 
●
BITS defines 3 types of operations: 
○
Download 
○
Upload 
○
Upload-Reply 
Each operation instance is called a job. 
●
BITS manages jobs in a priority queue, maintained by qmgr.dll. 
○
This queue is persisted on disk and is updated on any change. 
Details 
The general technique involved is injecting a serialized BITS-job object into the service queue . 
2
This is done by modifying the BITS state files, which maintain its jobs queue in run time. 
And because of the nature of state files - it does not affect the usual operation of any other 
existing jobs, nor any jobs that are added throughout the injection process. 
In addition, we can optionally make the job appear as if it is owned by another user, making it 
less suspicious. 
Interestingly, the state file binary structure is a ​clear, unencrypted and unprotected binary 
serialization​ of the job objects inside the queue. Reversing this structure allowed us to change 
state, properties, flags and settings of any existing job, and even, as mentioned above, inject 
our custom jobs. Because of the unified serialization method across machines, ​we could use a 
job that was serialized on one machine, to execute on another machine​. 
Controlling these aspects of jobs may open the door to other possible attacks, beyond the one 
described here. 
2The term “Queue” is used here throughout, even though it is more like a priority queue. 
Utilizing the following operation mechanisms allowed us to achieve the described SYSTEM 
execution: 
File permissions integrity 
Regular protection is applied to these state files, which are used and maintained by an OS 
SYSTEM process. They are held to SYSTEM use only as long as the service is running. 
Temporarily stopping the BITS service peels a bit of the protection applied to the files, which are 
owned by SYSTEM but can be modified by a local administrator (no kernel file lock is used nor 
even ​TrustedInstaller ​protection). Thus, we can modify them and control almost every aspect of 
the jobs queue. 
Clear, straight-forward object serialization to disk 
As said before, the state file content is nothing but a binary serialization of the current jobs in the 
queue, and this serialization is done mainly by ​CJob::Serialize(class CQmgrWriteStateFile)​. 
Reversing its structure allowed us to change state, properties, flags and settings of any existing 
job, and even injecting our custom jobs. 
Examples of the job properties we managed to easily extract: 
1.
Priority 
2.
State 
3.
GUID 
4.
Display Name 
5.
Description 
6.
Command Line 
7.
Command Line 
Parameters 
8.
Notification Flags 
9.
Presented owner 
SID 
10. Remote URL 
11. Destination path 
12. Temp path 
(BITXXXX.tmp) 
13. Proxy Settings 
14. Bypass Addresses 
15. ACL Flags 
And more… Here is a partial screenshot showing how job properties seen in PowerShell output 
are projected in their binary serialized form; full definition is given in next sections: 
Note that the deprecated utility bitsadmin.exe provides access to changing more aspects and 
properties of a job, than PowerShell cmdlets do. 
Lack of unique machine identification 
Another validation absence actually allowed our self-crafted, privileged job to be injected on 
different machines (with the same OS version), without a single change. In other words, a job 
created at one machine is not tangled by any means to the origin machine that created it. 
We took use of it to customly produce “payload” jobs in one “factory” computer, and transfer 
them ​as they are ​to another machine’s queue. The other machine’s BITS service would then 
execute it. 
Relying on state file data without verification 
The above circumstances make the enforcement of some parts of the user/logon validation 
useless, because the enforcement is done before committing job changes to the state file. After 
they are committed to disk, BITS service trusts the state file data with no validation. And 
because we anyway ​have write access to that file (as a local administrator), many previous 
checks become meaningless. 
Eventually, we were able to form and inject a job that led BITS to execute a process of 
our will, having the ​NT AUTHORITY/SYSTEM​ access token, and within its session. 
And because of the nature of state files - it does not hurt the usual operation of any other 
existing jobs, nor any jobs that are added throughout the injection process. 
In addition, if a user’s SID from the target computer is known in advance, we can optionally 
make the job appear as if it is owned by that user, making it less suspicious. 
How We Got There - Research Flow 
After some playing around, we noticed ​wuaueng​ (Windows Update) is running jobs as SYSTEM 
in order to install its updates, so we wanted to create our own SYSTEM-privileged job with a 
cmdline to execute. 
It is important to note that the new PowerShell BitsTransfer cmdlets offer only a limited interface, 
especially around the notification command line feature. For that reason, we mainly used the 
deprecated bitsadmin.exe utility which gives a more comprehensive control over BITS jobs. 
First Naive Try 
Our first try was running bitsadmin as SYSTEM using psexec and adding a download job: 
Bitsadmin​ ​/​CREATE I_WANT_YOUR_SYSTEM 
Bitsadmin​ ​/​ADDFILE I_WANT_YOUR_SYSTEM 
http​:​//get.videolan.org/vlc/2.2.4/win64/vlc-2.2.4-win64.exe c:\temp\vlc.exe 
/ADDFILE has failed, giving us the reason: 
Unable to add file to job ​-​ ​0x800704dd 
Which really means (powershell’s Start-BitsTransfer cmdlet is more verbose here): 
The operation being requested was not performed because the user has 
not logged on to the network 
That’s right, the user that creates the job is the job owner, and only it can modify its jobs. 
Moreover, the modification operations must be performed from an interactive logon session of 
that user (either locally or remotely), unless the operation is done by a service. And as we know, 
the shells we run using psexec are not in the LocalSystem interactive context, even though 
LocalSystem is always logged on. 
So what we actually got here is a job with ​LocalSystem​ being its owner, but that owner is now 
unable to control the job. Kind of an absurd situation, adding that we would encounter the same 
error if we tried to /CANCEL this job. 
So how does ​wuaueng​ service does it? 
Taking Inspiration From Windows Update Service (wuaueng) 
So we started debugging ​wuaueng​ service and noticed it uses ​qmgr​’s COM interface. In this 
in-proc scenario, ​wuaueng ​acts as the COM client, asking ​qmgr​, the COM server, to add a 
download job, as seen in ​wuaueng ​function ​CBitsJob:Init(IBackgroundCopyManager*, ulong, 
CCallerIdentity const*, int, void*)​. To be exact, it uses the following ​qmgrprxy.dll​’s COM CLSID: 
HKEY_CLASSES_ROOT\CLSID\{5CE34C0D-0DC9-4C1F-897C-DAA1B78CEE7C}\InProcServ
er32. 
●
Switching COM context to ​qmgrprxy​: 
●
Dynamic call to the external COM function, offered by the qmgr interface: 
When initiating a normal windows update, We noticed the following order of calls and treated 
this flow as the valid one we should pursue: 
wuaueng​!​CJobManagerExternal​::​CreateJob​ ​->  
wuaueng​!​CBitsJob​::​AddFile​ ​->  
qmgr​!​CJob​::​Resume​ ​->  
qmgr​!​CJob​::​Transfer​ ​->  
qmgr​!​CJob​::​BeginDownload 
On the way, we found out that the exception we got earlier (HRESULT: ​0x800704dd​) is thrown 
inside the call to ​CJobExternal::AddFile​. This sits well with the fact that we managed to create 
the job with no error, but only encountered it when we used the /ADDFILE flag. 
Next we dynamically compared this normal flow that ​wuaueng ​initiated, with the flow that we 
initiated using bitsadmin (run as ​LocalSystem​). 
While both external calls to ​qmgr!CJobManagerExternal::CreateJob​ seemed identical in 
parameters, we identified the call to ​CJobExternal::AddFile​ as the main junction that 
differentiates the two flows. The simple difference is that this call threw an exception when using 
bitsadmin, but not using ​wuaueng​. 
So the security enforcement must happen at this border, right? Yes, now let’s see how… 
Going step by step with the comparison of the two flows, we found out the key difference. 
First we need to remind you that a COM client that intends to invoke some function on the COM 
server is due to access check, performed by the server side by impersonating the client. 
Generally, a server may implement its own access check function that correspond to its security 
criterias for a specific exported function (this will be done by implementing the ​IServerSecurity 
interface). 
In this case, it seems that the ​qmgr ​service is using these interface functions to impersonate the 
client: ​IServerSecurity::CoImpersonateClient ​and ​IServerSecurity::CoRevertToself​. These 
functions are used inside the following call to ​CNestedImpersonation::CNestedImpersonation​. 
After impersonation, the server switches to the client’s user token to perform the actual 
modification of the job (​CNestedImpersonation::SwitchToLogonToken​): 
So far both flows look identical, so we went deeper into 
CNestedImpersonation::SwitchToLogonToken​ where the exception is thrown from. 
And this is the function where the magic happens. After retrieving some parts of the token such 
as the SID and IntegrityLevel, and just before ​qmgr ​tries to clone the user token, we see a call 
to ​GetTokenInformation​. And this call is the junction we were looking for that differs between the 
two flows: 
●
When the job was initiated by wuaueng - this function returns 0 
●
When the job was initiated by bitsadmin - this function returns 1 
And what does this value represent? 
It is the session ID, because the function is called with ​TokenInformationClass=TokenSessionId​: 
So we simply want this value to be 0 to represent session 0, just like it is when ​wuaueng​ is the 
job initiator. 
Imitating ​Wuaueng 
Previously, we found out what is the cause for the difference between the mentioned flows. In 
this step we wanted to make the bitsadmin flow act as it was initiated from ​wuaueng​ service. We 
changed the memory in runtime to store a fake result from ​GetTokenInformation​. 
So we again Initiated a job from a SYSTEM PowerShell. We put a breakpoint a bit after the call 
to ​GetTokenInformation​ and just before the call to ​CloneUserToken​. We changed the value in 
dword ptr ​[​rsp​+​0A8​+​var_88]​ (in the image above) to 0. We are now fooling the ​qmgr​ server to 
think that the client is at session 0. 
And this way, ​AddFile ​succeeded. So we have an actual valid job. Almost. Because the job 
state is SUSPENDED and will stay this way until LocalSystem will start it. But the existing 
LocalSystem (session 0) will not voluntarily do that for us. 
So, do you remember the normal flow we wrote down before? Looking at it, we see that our next 
obstacle is to call ​CJobExternal::Resume​. 
The problem is that we will face the same AccessCheck mechanism, so we will have to bypass 
it again using debugging and in-memory change. It would be feasible if we could finish happily 
after that, but the truth is that there will be many more obstacle calls alike along the way - calls 
to ​Resume​ and ​Transfer​ for example - over and over again. 
To overcome this frustrating future, we found a shortcut on the hard disk... 
The State File is the Supervisor 
As mentioned before, we observed that ​qmgr ​service maintains its jobs queue. The queue state 
has to be preserved between runs and restarts, so ​Microsoft​ thought that it would be a good 
solution to save it on the hard disk, in the form of a file called a “state file”, which is located in 
here: 
C​:​\ProgramData\Microsoft\Network\Downloader\ 
qmgr0.dat 
qmgr1.dat 
Notice there are actually 2 state files. Qmgr uses one as an alternate backup of the other. The exact 
backup model is not clear, but the easiest way for us to alter them is keep them identical. The following 
registry value tells which one is effect (0 or 1): 
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\BITS\StateIndex 
Qmgr ​takes care of updating any change in the job’s status and properties into the state file, 
and ​reads the file to get the job objects that it should execute. This is important to emphasize: 
the state file is a representation of the queue with all of its jobs included, and ​qmgr ​directly loads 