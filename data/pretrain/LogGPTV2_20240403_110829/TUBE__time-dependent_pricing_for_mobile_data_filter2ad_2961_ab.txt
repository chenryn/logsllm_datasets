5 points out limitations of our work and future directions,
while Section 6 discusses related work in this ﬁeld. Finally,
Section 7 concludes the paper.
2. ARCHITECTURE AND DESIGN
The TUBE architecture consists of two main components,
as shown in Fig. 2. One component resides on the ISP server
and computes the prices oﬀered to users, while the other
resides on user devices.
The ISP-side component of Fig. 2 measures individual us-
age and determines the prices oﬀered to the end users.2
These prices optimize the ISP’s proﬁt given its evolving es-
timates of user behavior.
At regular intervals, the user device pulls the price in-
formation over a secure connection and displays the prices
computed on the ISP server. The usage monitor in the de-
vice measures the timing and volume of each application’s
usage.
If activated by the users, the autopilot mode uses
these measurements to schedule applications on their behalf.
In this section, we ﬁrst discuss our guiding design princi-
ples (Section 2.1). Next, we consider two important modules
on the ISP server: how TUBE estimates user behavior (Sec-
tion 2.2) and how it optimizes the TDP prices (Section 2.3).
Finally, we discuss our GUI designs (Section 2.4) and an
autopilot algorithm (Section 2.5) that runs on user devices.
2.1 Design Guidelines
Our design choices stem from the following principles:
Separating functionality: The ISP server estimates
users’ reactions to prices and solves a large-scale nonlinear
optimization to compute the prices oﬀered to users. Since
user devices have limited computing power, we run this price
calculation on a central server. To allow users to view the
prices and automatically respond by scheduling their usage,
we implement a user interface on their individual devices.
Scaling up the system: To maintain scalability, our
behavior estimation algorithm requires only aggregate, and
not individual, usage data. We formulate the price calcula-
tion as a convex optimization problem, which can be rapidly
solved for many TDP periods.
Protecting user privacy: TUBE requires neither moni-
toring of users’ application source/destination addresses, nor
2Although the behavior estimation requires only aggregate
data, ISPs can of course keep track of individual usage data
in order to calculate users’ monthly bills.
User Device Autopilot (§2.5) Youtube Flipboard Magazine Netflix Apple App Store Usage Monitor User GUI (§2.4) ISP Server Aggregate Traffic  Measurement Allow or Block Price  Information Application Traffic Secure Connection User Behavior Estimation (§2.2) Price Optimizer (§2.3) Usage Prediction App Scheduler 249Figure 3: Patience indices from survey results.
discount d. Thus, we generally choose λρ =(cid:80)n−1
larger ρ indicates less patience, while ρ = 0 indicates indif-
ference to the time deferred τ : as τ increases, willingness to
wait wρ drops oﬀ faster for larger ρ. The normalization con-
stant is chosen so that the wρ(d, τ ) could represent the prob-
ability that users will defer for τ amount of time, given the
τ =1 wρ(D, τ ),
where D denotes the maximum possible discount oﬀered in
each period and wρ(D, τ ) is the unnormalized value of (1).3
The summation of τ from 1 to n − 1 represents the possible
times deferred (1 period, 2 periods, etc.) up to one day, or
n periods. We expect that users will not have signiﬁcant
incentive to delay their traﬃc for more than one day.
2.2.2 Initializing Patience Indices
In this section, we give reasonable estimates of the pa-
tience indices ρ used in (1) to model users’ willingness to
delay their data consumption. In practice, such estimates
may be achieved with a calibration period of pilot trials in
which the ISP oﬀers a wide variety of prices to users and
observes their responses.
In the present work, we take a
diﬀerent approach with initial market surveys in the U.S.
and India. We conducted two U.S. surveys, one in February
2011 and one in November 2011, each with 130 participants
from 25 states. The India survey included 546 participants
from 5 large cities.
In each survey, we asked the respondents whether they
would delay a given application type, e.g., YouTube videos
or software updates, for speciﬁed time intervals. Partici-
pants were told that waiting would reduce their bill by two-
thirds in the ﬁrst U.S. and India surveys and by one-third
in the second U.S. survey. The time interval choices ranged
from 5 minutes (e.g., for YouTube videos) to 48 hours (e.g.,
for software updates). The survey questions are given in [8].
We ﬁrst use the survey responses to ﬁnd the fraction of
users willing to wait for each of these time intervals. Given
these fractions, we then compute their discrete derivative
with respect to time (i.e., the diﬀerences between the frac-
tions divided by the interval duration) to ﬁnd the waiting
function values for each traﬃc class at the survey-speciﬁed
discount. Figure 3 shows the resulting patience indices for
three diﬀerent traﬃc classes. As expected, in all three sur-
veys, participants are much more likely to wait for software
updates or movie downloads than YouTube streaming, re-
ﬂecting streaming’s more “immediate” utility to users.
2.2.3 Updating Patience Indices
We now give an algorithm for ISPs to update their es-
timates of (1)’s user patience indices for diﬀerent applica-
tions. We assume that the ISP has several days of aggregate
(cross-user and cross-application) usage data and the corre-
sponding prices oﬀered in each period.
The main idea of our algorithm is to compare the ob-
3For instance, D may be the baseline metered price.
Algorithm 1: Waiting function estimation
Data: Prices oﬀered and TDP traﬃc pattern.
Result: Estimated waiting functions.
Compute the Si, to obtain n linear equations for the Aik;
Solve for n − 2 of the Aik, such that for each period j, at least
one Ajk is not solved for;
Substitute these expressions back into the original equations for
Si, so that only one equation, linear in the Aik, remains;
// This equation is a function of parameters µj and ρj
and the offered discounts.
Use the TIP and TDP data for this function to estimate (e.g.,
with nonlinear least-squares) all the µj and ρj parameters it
contains;
// These µj and ρj values give the waiting functions.
served usage data with a baseline usage trace, taken for time-
independent prices (TIP). We assume that changes between
the baseline usage and observed usage with TDP are due to
the time-dependent prices oﬀered. These changes can then
be expressed in terms of the waiting function parameters
and volume of diﬀerent application types; we can use stan-
dard curve-ﬁtting methods to estimate the optimal waiting
function parameters. The following discussion details this
procedure, which is summarized in Algorithm 1.
Since the baseline traces have only aggregate usage data,
the ISP does not know the usage for each application. Yet
for our purposes, grouping sessions by application type has
an important disadvantage: depending on the user, a given
application may correspond to diﬀerent patience indices. We
therefore group applications by traﬃc class, deﬁned as a
group of sessions with the same patience index, rather than
application type. After choosing a number of traﬃc classes,
we must estimate both the patience index and the fraction
of traﬃc corresponding to each traﬃc class.
Our estimation algorithm relies on calculating the ex-
pected amount of traﬃc deferred from a given period i to
another period k in terms of the waiting function parame-
ters.4 Thus, the amount of traﬃc in period i without any
traﬃc shifting is simply the average amount of traﬃc in pe-
riod i under TIP. Given a set of discounts di, i = 1, 2, . . . , n,
oﬀered over one day, the expected amount of traﬀic deferred
from period i to period k (cid:54)= i is then
m(cid:88)
(cid:0)dk,|k − i|n
(cid:1),
Aik = Yi
µjwρj
(2)
j=1
traﬃc in period i, we see that each Si =(cid:80)
where Yi is the TIP usage in period i, and |k − i|n is un-
derstood to be modulo n, representing the time diﬀerence
between period i and the nearest period k after period i. If
k < i, period k will occur on the day after period i. There
are m traﬃc classes, with the jth traﬃc class having pa-
tience index ρj and taking up a proportion µj of the traﬃc.
Denoting by Si the diﬀerence between the TIP and TDP
k(cid:54)=i Aik − Aki.
Each of the n Si values is a linear combination of the
n(n − 1)/2 Aik variables. One equation may be eliminated,
since we assume the sum of the Si is zero (no traﬃc is lost
with TDP). We can thus reduce this system of n − 1 linear
equations for the Si to one equation, by solving for n − 2 of
the Aik in terms of other Aik variables. The ISP can then
estimate the parameters µj and ρj using Algorithm 1.
4For simplicity, we assume that the average traﬃc volume
over each day remains the same when TDP is introduced,
i.e., that no traﬃc is lost due to TDP.
U.S.	
  (Feb.	
  2011)	
  U.S.	
  (Nov.	
  2011)	
  India	
  (with	
  data	
  plan)	
  India	
  (w/o	
  data	
  plan)	
  0	
  0.5	
  1	
  1.5	
  2	
  2.5	
  3	
  YouTube	
  So@ware	
  Updates	
  Movie	
  Downloads	
  EsFmated	
  PaFence	
  Indices	
  250Period
1
2
3
Actual
Estimated
ρ2
2
2.33
2.67
µ1
0.17
0.5
0.83
ρ1
1.03
1.02
0.90
ρ2
2.48
2.49
2.15
µ1
0.46
0.45
0.71
Error
(%)
11.8
9.0
0.5
ρ1
1
1
1
Table 1: Actual and estimated parameter values in
a simulation of waiting function estimation.
Since baseline TIP demand may change over time, we use
the following procedure to adjust the baseline. The ISP
estimates the waiting functions using TDP data from several
days, e.g. one month, and uses these estimates to solve
for the demand under TIP, Yi, in each period i. The n
equations (2) are linear in the Yi, and all other variables are
known upon choosing a set of discounts oﬀered and traﬃc
observed.5 We then estimate the Yi values.
To illustrate Algorithm 1, we consider a simple example
with two traﬃc classes and three periods. Actual parameter
values are given in Table 1. Our simulation takes a set of
given discounts and computes the traﬃc if waiting functions
are perfectly followed, adding noise to these results. Table
1 shows the µj and ρj values estimated by nonlinear least
squares. The maximum percent diﬀerence between actual
and estimated waiting function values µ1wρ1 + (1 − µ1)wρ2 ,
measured on a 1000-point grid of discounts and times de-
ferred, remains small at under 12%.
2.3 Optimizing Prices
We now describe how to use the estimated waiting func-
tions to calculate time-dependent prices over the next day.
An ISP wishes to set prices that balance two types of costs:
that of exceeding the maximum capacity, and that of of-
fering discounts to users in less-congested time periods. We
take the “maximum capacity” to mean the maximum amount
of traﬃc that can be handled by the network with an ac-
ceptable amount of congestion. Thus, demand may “exceed
capacity” in the sense that over a certain capacity, user re-
sponse time due to congestion becomes unacceptably high.
Suppose that there are n periods in a day, each lasting one
unit (e.g., hour or half-hour) of time. We assume that the
ISP’s network has a bottleneck link of capacity Ci in period
i, deﬁned as the link capacity less any background traﬃc or
excess capacity “cushion.” The cost of exceeding capacity is
assumed to be piecewise-linear and convex; we denote the
cost in period i as g(yi− Ci), where yi is the predicted usage
with TDP discounts di in period i. For ease of notation, j ∈ i
indexes all traﬃc classes j in period i. Moreover, the time
between periods i and k is given by |i − k|n as in (2).
We can now calculate the costs of exceeding capacity Γ1
and oﬀering discounts Γ2 as
g
i=1
(cid:32)
n(cid:88)
n(cid:88)
n(cid:88)
k=1,k(cid:54)=i
Yi
j∈i
1 −(cid:88)
(cid:88)
 n(cid:88)
(cid:88)
µjwj
j∈k
Yk
Yk
di
i=1
k(cid:54)=i
j∈k
Γ1 =
+
Γ2 =
(cid:1)
µj