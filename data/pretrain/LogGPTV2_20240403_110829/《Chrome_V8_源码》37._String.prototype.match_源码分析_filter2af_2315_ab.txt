    11.    GotoIfNot(has_initialmap, if_ismodified);
    12.    TNode last_index = FastLoadLastIndexBeforeSmiCheck(CAST(object));
    13.    GotoIfNot(TaggedIsPositiveSmi(last_index), if_ismodified);
    14.    // Verify the prototype.
    15.    TNode initial_proto_initial_map = CAST(
    16.        LoadContextElement(native_context, Context::REGEXP_PROTOTYPE_MAP_INDEX));
    17.    DescriptorIndexNameValue properties_to_check[2];
    18.    int property_count = 0;
    19.    properties_to_check[property_count++] = DescriptorIndexNameValue{
    20.        JSRegExp::kExecFunctionDescriptorIndex, RootIndex::kexec_string,
    21.        Context::REGEXP_EXEC_FUNCTION_INDEX};
    22.    if (additional_property_to_check) {
    23.      properties_to_check[property_count++] = *additional_property_to_check;
    24.    }
    25.    PrototypeCheckAssembler prototype_check_assembler(
    26.        state(), prototype_check_flags, native_context, initial_proto_initial_map,
    27.        Vector(properties_to_check, property_count));
    28.    TNode prototype = LoadMapPrototype(map);
    29.    prototype_check_assembler.CheckAndBranch(prototype, if_isunmodified,
    30.                                             if_ismodified);
    31.  }
上述代码中 if_ismodified 代表慢速正则；第 3 行代码 GotoIfForceSlowPath 根据
V8_ENABLE_FORCE_SLOW_PATH 判断是否使用慢速正则；  
第 2 行代码检测正则表达式对象map的tag标记；  
第 10-11 行代码判断正则表式对象的 tag 与 native_context中的 regexp_fun的 tag 是否相等；  
第 15-29 行代码检测 prototype 属性，并根据检测结果决定是否使用快速正则。  
 **（3）** MaybeCallFunctionAtSymbol 方法源码如下：
    1.  void StringBuiltinsAssembler::MaybeCallFunctionAtSymbol(
    2.      Node* const context, Node* const object, Node* const maybe_string,
    3.      Handle symbol,
    4.      DescriptorIndexNameValue additional_property_to_check,
    5.      const NodeFunction0& regexp_call, const NodeFunction1& generic_call) {
    6.    Label out(this);
    7.    // Smis definitely don't have an attached symbol.
    8.    GotoIf(TaggedIsSmi(object), &out);
    9.    {
    10.      Label stub_call(this), slow_lookup(this);
    11.      GotoIf(TaggedIsSmi(maybe_string), &slow_lookup);
    12.      GotoIfNot(IsString(maybe_string), &slow_lookup);
    13.      RegExpBuiltinsAssembler regexp_asm(state());
    14.      regexp_asm.BranchIfFastRegExp(
    15.          CAST(context), CAST(object), LoadMap(object),
    16.          PrototypeCheckAssembler::kCheckPrototypePropertyConstness,
    17.          additional_property_to_check, &stub_call, &slow_lookup);
    18.      BIND(&stub_call);
    19.  .
    20.      regexp_call();
    21.      BIND(&slow_lookup);
    22.    }
    23.    GotoIf(IsNullOrUndefined(object), &out);
    24.    TNode const maybe_func = GetProperty(context, object, symbol);
    25.    GotoIf(IsUndefined(maybe_func), &out);
    26.    GotoIf(IsNull(maybe_func), &out);
    27.    // Attempt to call the function.
    28.    generic_call(maybe_func);
    29.    BIND(&out);
    30.  }
上述代码中第 11-12 行判断正则表达式是否为 SMI 或 String，判断结果为真则执行慢速正则；  
第 14 行代码 BranchIfFastRegExp 判断原型链属性是否满足快速正则条件；  
第 23、25、26 行代码分别判断字符串是否为空、正则表达式是否未定义或为空。  
图 1 给出了 Generate 的函数调用堆栈。
## 3 String.prototype.match 测试
测试用例的字节码如下：
    1.  //省略.............
    2.  0000038004E42A8E @   16 : 12 01             LdaConstant [1]
    3.  0000038004E42A90 @   18 : 15 02 04          StaGlobal [2], [4]
    4.  0000038004E42A93 @   21 : 13 02 00          LdaGlobal [2], [0]
    5.  0000038004E42A96 @   24 : 26 f9             Star r2
    6.  0000038004E42A98 @   26 : 29 f9 03          LdaNamedPropertyNoFeedback r2, [3]
    7.  0000038004E42A9B @   29 : 26 fa             Star r1
    8.  0000038004E42A9D @   31 : 79 04 06 01       CreateRegExpLiteral [4], [6], #1
    9.  0000038004E42AA1 @   35 : 26 f8             Star r3
    10.  0000038004E42AA3 @   37 : 5f fa f9 02       CallNoFeedback r1, r2-r3
    11.  0000038004E42AA7 @   41 : 15 05 07          StaGlobal [5], [7]
    12.  0000038004E42AAA @   44 : 13 06 09          LdaGlobal [6], [9]
    13.  0000038004E42AAD @   47 : 26 f9             Star r2
    14.  0000038004E42AAF @   49 : 29 f9 07          LdaNamedPropertyNoFeedback r2, [7]
    15.  0000038004E42AB2 @   52 : 26 fa             Star r1
    16.  0000038004E42AB4 @   54 : 13 05 02          LdaGlobal [5], [2]
    17.  0000038004E42AB7 @   57 : 26 f8             Star r3
    18.  0000038004E42AB9 @   59 : 5f fa f9 02       CallNoFeedback r1, r2-r3
    19.  0000038004E42ABD @   63 : 26 fb             Star r0
    20.  0000038004E42ABF @   65 : ab                Return
    21.  Constant pool (size = 8)
    22.  0000038004E429F9: [FixedArray] in OldSpace
    23.   - map: 0x01afd2dc0169 
    24.   - length: 8
    25.  0: 0x038004e42999 
    26.  1: 0x038004e428c1 
    27.  2: 0x038004e428a9 
    28.  3: 0x022bdecab4b9 
    29.  4: 0x038004e428f9 
    30.  5: 0x038004e428e1 
    31.  6: 0x022bdecb3699 
    32.  7: 0x022bdecb2cd9 
    33.  Handler Table (size = 0)
上述代码中，第 2-5 行代码加载 “1 plus 2 equal 3” 到 r2 寄存器；  
第 6 行代码获取字符串方法 match，并存储到 r1 寄存器；  
第 8 行代码为字符串 \d+ 创建正表达式对象，并存储到 r3 寄存器；  
第 10 行代码 CallNoFeedback 调用 match方法（r1 寄存器），并传递 r2、r3 两个参数给 match 方法。  
图 2 给出了字节码 CallNoFeedback 的入口，从此处开始跟踪可以看到正则表达的匹配过程。
**技术总结**  
 **（1）** 快速正则是采用 Builtins::kRegExpMatchFast 实现的快速匹配；  
 **（2）** 使用快速正则的判断条件包括：字符串类型是否正确、正则表达式的类型、V8_ENABLE_FORCE_SLOW_PATH 等。
好了，今天到这里，下次见。
**个人能力有限，有不足与纰漏，欢迎批评指正**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**