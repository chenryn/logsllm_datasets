### Anomaly Detection and Scanning Worm Propagation

**Anomaly Scores for Specific Packets:**
Anomaly scores for specific packets are calculated based on deviations from expected values in a predetermined profile. When the anomaly score exceeds a defined threshold, an alarm is triggered. The experimental analysis for this method was based on a prototype that processed both HTTP and DNS network traffic.

**Granger et al. [10]:**
Granger et al. [10] present a software architecture for self-securing network interfaces that examine packets as they move between network links and host software, detecting and potentially blocking malicious activity. This host-based approach includes a detection technique that identifies worm propagation by shadowing a host's DNS table and checking the IP address of each new connection against it. The core idea is that it is abnormal for a host to make a large number of connection attempts without corresponding DNS activity. This approach has been extended to a network-based solution that incorporates additional network information, such as whitelists and embedded IP addresses in HTTP packets, which hosts use to initiate new connections.

**Williamson [27]:**
Williamson [27] developed a method to limit or throttle the rate of malicious mobile code by delaying connections if a system tries to connect to new addresses. By not dropping the connection, this method strikes a balance between reducing the impact of false alarms and limiting the spread of malicious activity in the network.

**Jung et al. [11]:**
Jung et al. [11] introduced the Threshold Random Walk (TRW) algorithm to identify malicious remote hosts. The algorithm is based on the observation that scanners are more likely to access non-existent hosts and services compared to legitimate users. If a connection attempt succeeds, the random walk value increases; if it fails, the value decreases. By assigning a higher success probability to legitimate traffic than to attack traffic, the algorithm can determine whether a series of connection attempts is a scan.

**Weaver et al. [25]:**
Weaver et al. [25] developed a simplified version of the TRW algorithm, using caches to track the activity of new connections and IP addresses, thereby reducing the computational complexity. This simplification made the algorithm suitable for both hardware and software implementations. Their technique can detect and stop a scanning host in fewer than 10 scans with a low false positive rate.

**Commercial Scanning Detectors:**
Forescout [1] and Mirage [2] networks use dark-address detection, a technique that involves monitoring unoccupied address spaces within an internal network and detecting when systems attempt to connect to these unused spaces.

**Silicon Defense [7]:**
Silicon Defense developed the CounterMalice worm defense solution [7], which proactively identifies and automatically blocks worm activity in an internal network. The solution divides the network into cells and prevents worms from spreading between them. Stanifordâ€™s analysis [20] revealed that worm outbreaks exhibit a phased structure with an epidemic threshold. If the network contains a low density of susceptible systems or if the threshold is low, containment systems can be effective. However, if these parameters are too high, containment systems may not stop the spread until a significant number of systems are infected.

**Zou et al. [28]:**
Zou et al. [28] modeled requirements for the dynamic quarantine of infected hosts, demonstrating that epidemic thresholds exist for different detection and response times. This work provides a benchmark for evaluating the efficiency of new detection algorithms. Our scanning worm detection approach is believed to have the required efficiency to stop worm propagation before reaching epidemic thresholds.

### Concluding Remarks
The DNS-based worm propagation detection approach is effective in combating scanning worm infections in appropriate enterprise networks. Depending on the network environment and security policy, the number of protocols added to the whitelist may limit its applicability as a standalone detector. In such scenarios, this detection method can be used in conjunction with other worm detection schemes. During evaluation, our prototype successfully detected scanning worm propagation in the Internal Departmental Network cell of our enterprise network. This network-based detection approach offers significant improvements in detection speed over existing methods, regardless of the scanning rate. It relies on a ubiquitous network service (DNS) and, being anomaly-based, can detect emerging worms. We have developed a full implementation of our approach in a software prototype that runs on non-specialized commodity hardware. We plan to make the software available to the public. Additionally, we believe this detection approach can be modified to detect other classes of malicious activity, including covert channel detection, mass-mailing worms, automated scanning tools, and remote-to-local worm propagation. We have already extended these ideas in an analogous worm detection implementation based on the Address Resolution Protocol, as noted in Section 2.

### Acknowledgements
We thank Anil Somayaji and the anonymous reviewers for their valuable comments, which significantly improved this paper. The second author is supported in part by NSERC (Natural Sciences and Engineering Research Council of Canada) and MITACS (Mathematics of Information Technology and Complex Systems) grants. The third author is the Canada Research Chair in Network and Software Security and is supported in part by an NSERC Discovery Grant, the Canada Research Chairs Program, and MITACS.

### References
[1] Forescout. Wormscout. http://www.forescout.com/wormscout.html.
[2] Mirage Networks. http://www.miragenetworks.com.
[3] Optixpro Trojan Horse. http://securityresponse1.symantec.com/sarc/sarc.nsf/html/backdoor.optixpro.12.html.
[4] Secure Shell Protocol (secsh). http://www.ietf.org/html.charters/secsh-charter.html; accessed on October 24, 2004.
[5] tcpdump/libpcap Public Repository. http://www.tcpdump.org.
[6] August was Worst Month Ever for Viruses, Worms. Technet News, September 2003.
[7] Worm Containment in the Internal Network. Technical report, Silicon Defense, 2003.
[8] M. Crispin. Internet Message Access Protocol. March 2003. http://www.ietf.org/rfc/rfc3501.txt?number=3501; accessed October 22, 2004.
[9] D. Ellis, J. Aiken, K. Attwood, and S. Tenaglia. A Behavioral Approach to Worm Detection. In To Appear in Proceedings of The Workshop on Rapid Malcode, 2003.
[10] G. Granger, G. Economou, and S. Bielski. Self-Securing Network Interfaces: What, Why and How. Technical report, Carnegie Mellon University, CMU-CS-02-144, May 2002.
[11] J. Jung, V. Paxson, A. Berger, and H. Balakrishnan. Fast Portscan Detection Using Sequential Hypothesis Testing. In 2004 IEEE Symposium on Security and Privacy, 2004.
[12] C. Kruegel, T. Toth, and E. Kirda. Service-Specific Anomaly Detection for Intrusion Detection. Technical report, TU-1841-2002-28, 2002.
[13] D. Mills. Network Time Protocol (Version 3). RFC, March 1992. http://www.ietf.org/rfcs/rfc1305.txt?number=1305; accessed October 24, 2004.
[14] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, and N. Weaver. Inside the Slammer Worm. In IEEE Magazine of Security and Privacy, pages 33-39, July/August 2003.
[15] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quarantine: Requirements for Containing Self-Propagating Code. In Proceedings of the 2003 IEEE Infocom Conference, San Francisco, CA, April 2003.
[16] R. Pethia. Attacks on the Internet 2003. Congressional Testimony, Subcommittee on Telecommunications and the Internet, November 2003.
[17] D. Plummer. An Ethernet Address Resolution Protocol. RFC, November 1982. http://www.ietf.org/rfc/rfc0826.txt?number=826; accessed on October 24, 2004.
[18] J. Postel and J. Reynolds. File Transfer Protocol (FTP). RFC, October 1985. http://www.ietf.org/rfc/rfc959.txt?number=959; accessed October 24, 2004.
[19] C. Shannon and D. Moore. The Spread of the Witty Worm. Technical report, CAIDA, March 2004.
[20] S. Staniford. Containment of Scanning Worms in Enterprise Networks. In Journal of Computer Science, to appear, 2004.
[21] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the Internet in Your Spare Time. In Proceedings of the 11th USENIX Security Symposium, August 2002.
[22] N. Weaver. Potential Strategies for High Speed Active Worms: A Worst Case Analysis. http://www.cs.berkeley.edu/~nweaver/worms.pdf; last accessed October 20, 2004.
[23] N. Weaver and D. Ellis. Reflections on Witty. ;login: The USENIX Magazine, 29(3):34-37, June 2004.
[24] N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A Taxonomy of Computer Worms. In The First ACM Workshop on Rapid Malcode (WORM), October 2003.
[25] N. Weaver, S. Staniford, and V. Paxson. Very Fast Containment of Scanning Worms. In Proceedings of the 13th USENIX Security Symposium, 2004.
[26] D. Whyte, E. Kranakis, and P. C. van Oorschot. ARP-Based Detection of Scanning Worms in an Enterprise Network. Technical report, School of Computer Science, Carleton University, October 2004.
[27] M. Williamson. Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code. In Annual Computer Security Applications Conference, 2002.
[28] C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and Early Warning for Internet Worms. In Proceedings of the 10th ACM Conference on Computer and Communications Security, 2003.

### Background

#### A.1 Worm Propagation Methods
A comprehensive discussion of worm classifications based on target discovery and selection strategies, carrier mechanisms, activation, payloads, and types of attackers can be found in [24]. Worms are typically classified based on two attributes: the methods used to spread and the techniques used to exploit vulnerabilities. Most worms propagate by indiscriminate scanning of the Internet to identify vulnerable systems. As demonstrated by the Slammer worm, the faster a worm can locate systems, the more rapid the infection rate. Staniford et al. [21] used empirical data from actual worm outbreaks to reveal a common effective propagation strategy, the random constant spread (RCS) model, where a worm randomly scans the entire Internet address space to find vulnerable systems.

**Traditional Propagation Methods:**
The factors that dictate how fast a worm can spread include:
1. The rate of scanning used to detect vulnerable systems.
2. The population of vulnerable systems.
3. The time required to infect vulnerable systems.
4. The resistance to countermeasures [22].

The spread of a random scanning worm can be described in three phases: the slow spreading phase, the fast spreading phase, and the slow finishing phase [28].

- **Slow Spreading Phase:** The worm builds an initial base of infected systems. Although it infects systems at an exponential rate, the small initial population limits the propagation speed.
- **Fast Spreading Phase:** Once a certain threshold of infected hosts is reached, the worm enters the fast spreading phase. Models derived from actual worm data indicate that this threshold is approximately 10,000 systems [21].
- **Slow Finishing Phase:** The final phase where the spread slows down as the number of remaining vulnerable systems decreases.

Worms use various scanning strategies, such as subnet scanning, topological scanning, and mass email and network shares to propagate. For example, using built-in emailers, worms can harvest email addresses from existing email address books, the inbox of the email client, and web page caches, and send copies of the worm to all harvested email entries. Through shared network drives, systems often have access to directories on other systems, allowing the worm to place itself in a shared system and use this shared access to infect other systems. The worm can also change permissions on directories or add guest accounts.

**Hyper Virulent Worm Propagation Strategies:**
Weaver et al. [21] describe hyper virulent worm propagation strategies, including hit-list and permutation scanning. A hit-list is a list of vulnerable systems targeted for infection, generated by previous reconnaissance activities such as network scanning, web surveys, DNS queries, and web spiders. Permutation scanning is a strategy to increase scanning efficiency. Infected systems start scanning at a fixed point in a pseudo-random permutation of the Internet address space. If the worm detects an infected system, it picks a new random point in the permutation and begins scanning again. This prevents reinfection and imposes a measure of coordination on the worm. These strategies have not appeared in the wild until the Witty worm [19].

#### A.2 DNS Review
DNS is a globally distributed hierarchical database that provides a mapping between numeric IP addresses and alphanumeric domain names. Whenever a service uses a domain name to locate a server, DNS is used. A domain name is a human-friendly pseudonym for a system's IP address.

DNS queries are performed by a resolver, an application installed on the userâ€™s local system that queries the local DNS server. If the local DNS server does not know the IP address for the requested domain name, it queries external DNS servers. If the external DNS servers do not have the information, they respond with the address of an authoritative DNS server higher up the chain. A server is considered authoritative about a domain if it can respond to a query with certainty that the name exists.

If a system or user knows the IP address of another system, a DNS query can be avoided. However, most accesses to remote systems are initiated by specifying the domain name in a client application. DNS resource records are the discrete data structures used to store information about the structure and content of the entire domain name space. The A record, which maps a fully qualified domain name to an IP address, is of particular interest for our detection approach. The TTL (Time to Live) value dictates how long the resource record will be kept in the DNS serverâ€™s cache, typically set to one day. TTL values provide a mechanism to allow resource records to expire and be updated periodically in case changes to the network topology are made.