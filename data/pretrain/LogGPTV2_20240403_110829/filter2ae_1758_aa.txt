**作者：此彼@蚂蚁安全实验室  
原文链接：**
在今年的Black Hat Asia上，蚂蚁安全实验室共入选了5个议题和3个工具。本期分享的是蚂蚁天穹实验室的议题《从算法到寄存器探索苹果神经网络引擎》。
# 1 引言
自 iPhone X
面世以来，越来越多的智能设备开始采用面容识别作为生物特征验证手段。然而对这些智能设备端的神经网络计算可靠性和安全性的研究少有报道，已有的技术文章也没有深入到代码操作硬件的实现层面。从iPhone
X上市已过去3年半，仍然没有公开的对面容ID实现层面的研究资料。
为了验证
iPhone面容识别的安全性，探索端设备生物特征识别的安全防护技术，更好的帮助移动设备的安全提升，本文将首次展示我对iPhone设备神经网络计算安全实现方式的一手研究成果，并分析其原理和可能存在的安全风险。
## 1.1 内容简介
本分享包含4个主要内容。
第一部分：逆向分析面容ID和安全神经网络引擎，并分析面容ID在软件层面上的实现方法。
第二部分：逆向找到“机器学习算法”转化为“寄存器操作”的过程中涉及所有组件。
第三部分：提取独立ANE编译器、开发ANE反汇编器。反汇编器可以解析内核驱动加载的内部神经网络文件。
第四部分：总结出6个可能的攻击面，介绍已经获得苹果致谢的bug。
## 1.2 名词解释
ANE: Apple Neural Engine 苹果神经网络引擎
AP: Application Processor 应用处理器
SEP: Secure Enclave Processor 安全隔区处理器
SEP APP: Application for SEP 运行在SEP中的应用程序
FaceID: 面容ID
# 2 面容ID和安全神经网络引擎
本章节着重介绍3个最受关心的逆向成果：1.面容ID的软件架构 2. 面容ID的神经网络参数解密 3. 安全神经网络引擎硬件如何被操作的。
## 2.1 FaceID的实现架构
上图用一些图框和箭头表示不同特权空间和交互方法。以人脸解锁为例，一些守护进程会通过XPC通知进程biometrickitd。biometrickitd通过IOKit调用内核中的驱动。内核驱动通过IOP调用协处理器SEP，SEPAPP
sprl会处理一些摄像头调用等行为，最终交给SEPAPP esipAppl去执行真正的神经网络计算。
由于SEP的固件和启动链有着严格的加密验签机制，过去很长的一段时间里我们完全不知道里面发生了什么。
## 2.2 SEP从AP加载加密神经网络参数并解密
操作系统启动后，FaceID会从文件系统加载名为DCNKernel.bin的文件。此文件可能是神经网络的训练好的权重，但被AES加密过的，解密用的iv和key被硬编码在SEP的固件里。且SEP会检查文件的SHA384数字摘要，摘要也是硬编码在代码中。
这就意味着SEP固件版本和系统版本需要基本一致，否则FaceID可能不可用。这也解释了 checkm8
越狱的手机如果系统降级但sep不降级导致FaceID不可用的原因。
## 2.3 FaceID在SEP中直接操作硬件寄存器
    伪代码：
    [(addr, value), …] = InterpreterLikeProduce(DmaBaseSetup, Setup, StaticCfg)
    for (addr,value) in [(addr, value), …]
        ffwCommon_writeReg32(addr, value)
左右滑动查看完整代码
FaceID直接操作硬件寄存器实现神经网络的计算过程。代码会从静态硬编码的数据中提取信息，计算出需要写入的寄存器地址和数值，然后调用函数写入。
本质上FaceID在SEP中实现了一种像解释器的程序，它将3种不同的设置信息转化为寄存器地址和需要向这些地址写入的数值。可惜这些寄存器地址和数值的含义我们是不知道的。寄存器被写入后，到底进行了哪些运算我们也是不知道的。
# 3 苹果神经网络引擎框架
在A11处理器上只有安全神经网络引擎，没有给AP开放接口使用。自A12处理器起，苹果将神经网络引擎分为，专门为SEP使用的“安全神经网络引擎”和为AP使用的“神经网络引擎”。
安全和非安全的神经网络引擎存在软硬件隔离。本章将展示逆向AP使用的“神经网络引擎”的成果。
## 3.1 开放给App使用的架构
苹果从A12芯片起开放了ANE给App使用。虽然苹果公司的白皮书上说Application Processor Neural Engine和Secure
Neural Engine有硬件级别的隔离，但是他们对寄存器的使用上可能有相似之处。
同样的，我用一些图框和箭头表示不同特权空间和交互方法。与Secure Neural
Engine不同的是App可以直接访问几个内核驱动接口。ANE的编译会在独立的隔离的进程里。且ANE的固件是不加密的。
## 3.2 ANE内部数据处理流程
上图中的方框代表数据，圆圈代表处理，描述了ANE框架内部将预训练模型加工成寄存器操作的完整过程。网络上有很多训练好的神经网络，但依赖不同的机器学习框架运行。苹果提供了coremltools将他们转化成统一的mlmodel格式。
coremlcompiler会将mlmodel文件编译成一些文件存放于特定文件夹下面，一般是mlmodelc为后缀名的文件夹。mlmodelc文件夹下面的一些文件会提供给ANE的与编译器处理，产生包含net.plist文件在内的另一批文件。将net.plist等文件提供给ANE编译器后，会编译出model.hwx文件。
model.hwx文件会被内核驱动加载。内核驱动会解析文件提取寄存器操作信息传递给ANE协处理器。最终由ANE协处理器操作寄存器来执行实际的神经网络运算。这处理流程比较长和复杂，其中很可能会出现bug。
## 3.3 内部处理流程所处空间的关系
为了方便研究安全风险，我把不同的过程按不同的特权空间进行划分。因为在安全问题的研究上我们更关心特权提升的问题，这些过程恰恰可能提供这样的机会。coremltools一般运行在开发者的主机电脑上，他会将其他机器学习框架的预训练好的数据转化为统一的mlmodel格式。
这一过程需要coremltools解析各种格式的文件，且这些文件可能是从不可信的渠道获得的，比如网络上公开的预训练数据。coremlcompiler过程既可以在开发者电脑上进行也可以在App中运行，在App中运行时coremlcompiler与App的进程权限一致，同样此时的App也可能加载的是不可信来源的mlmodel文件。
ANE预编译和完整编译过程发生在一个名为ANECompilerService的守护进程中，被编译的文件直接来自于App。对ANECompilerService进程来说App提供的文件也是不可信的，所以苹果也限制了ANECompilerService进程的权限。ANE内核驱动运行在内核空间，与前三个处理一样的是他们都运行在application
processor中。ANE固件则运行于独立的协处理器中。
## 3.4 ANE内核驱动
ANE内核驱动为App和aned守护进程提供了不同的客户端。App的客户端只有打开、关闭和ProgramSendRequest三个接口。
aned守护进程有使用驱动所有接口的权利。aned进程也负责把编译出的model.hwx文件传递给内核驱动解析加载，并把一些具柄传递给App。内核驱动会通过anecmdsend函数与ane固件交互。