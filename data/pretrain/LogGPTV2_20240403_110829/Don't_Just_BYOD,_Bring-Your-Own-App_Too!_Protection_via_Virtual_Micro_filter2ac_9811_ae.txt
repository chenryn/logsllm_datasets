for BYOD applications in the case of unmanaged apps where
a policy violation causes a data context switch. Table V shows
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
DATA POLICY VIOLATIONS (DM: DATA MIXING; UDM: UNIQUE DM; RA: RESPONSIBLE APPS; UDMP: UNIQUE DM PER PROCESS)
TABLE III
Object type
Files
Strings
Variables (bool, double, int, array)
#DM #UDM #RA #UDMP (top 3)
2178
536
105
android.vending 71; system server 1; whatsapp 14
android.vending 5; whatsapp 10; pandora.android 3
android.vending 3; system server 1; whatsapp 3
85
26
7
4
10
3
TABLE IV
OBSERVED DATA MIXING INCIDENTS
App
Facebook
Responsible action/entry
Service (background)
Play Store
Pandora
Brightest LED Flashlight
Adding account (UI)
SignUpActivity (UI)
Main activity (UI)
and sockets
Data sources
Accounts
a248.e.akamai.net, *.xx.fbcdn.net)
Accounts and sockets (*.google.com)
Accounts and sockets (tuner.pandora.com)
Accounts and sockets (*.ﬂurry.com)
(*.facebook.com,
Data mixing points
App ﬁles, sockets, strings
App ﬁles, sockets
Strings
Flurry agent
framework
ﬁle and socket, binary blob
  "' #("'.) (--&*% &'&'%9! /#!00
  "'  #+.) (--00
0
( '! #+# %4"#'
!#,'"''("'"'5
 "'  #+.) (&--"'88.--6! 788.--   88.'
 "' &&.) (&&&&=">4%&"#&5
5
 "31&%3$%&1"%# /"/+! 
 "311#,=ADDB@C?>D/'!$
!$#%%,! #"'"'4#%&$ ,5
'&%!#)#"#("'&*'
 "311#,2=E>=@A!&&&%)
( '&'"%! #+# %
%"'%!#'# %%#!"%#*>
4#"'$%#&&#" ! &%)%5
! "' &&.) (&&&&4%&"#&5
! '&4'&!' &"%#*@5
>#("'!&&&4%"'%#!"%#*@5
  

#

$

"'% %&#" "' %#&&#" "'
!
Fig. 7. Capsule Growth for the Email Client Use-Case. (INIT = Contexts at Initial State, A1 = Contexts After First Account Setup, INTER = Contexts After
First Account Use, A2 = Contexts After Second Account Setup, FINAL = Contexts at Final State, APP PREFIX=/data/data/com.android.email)
CONTEXT SWITCH (SECONDS) FOR POLICY VIOLATION SCENARIOS
TABLE V
Scenario mail & exchange mail & acore K9 & acore
Time
0.29
1.55
2.09
Avg.
1.31
access request denial (e.g., Binder call rejection) because of
the policy conﬂict until the launch completion of the process
with the new context. The context switch takes approximately
1.31 seconds that is reasonable for practical usages.
the results. We created multiple scenarios that all eventually led
to policy violations; i) an unmanaged Android’s default mail
client tries to use an Exchange (professional) service while
it is currently running in a different (personal) context; ii)
the Android’s default mail client tries to access the contact
provider (the acore process) for an entry from a different
context; iii) similar to (ii) but using a third-party K9 mail
client app. The table shows the time requirement from the
Managed app development. We analyzed the default Android
email client app by reading its source code and using SWIRLS’s
capsule boundary tracking to determine the main challenges
in rewriting legacy apps and turning them into context-aware
managed apps. The managed apps should use the SWIRLS API
(Figure 4) to handle multiple BYOD contexts simultaneously
and prevent intra-app capsule data mixing such as an email for-
warding between two different context accounts. We observed
534
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 8. SWIRLS-Enabled Smartphone Use Cases
Fig. 10. SWIRLS User Interface
(a) Policy Violation
(b) Geofence
(c) Timefence
BYOD device usage experience. Capsules facilitate system-
wide context/persona deﬁnition and data isolation. Our de-
veloped context-aware email client (Figure 8) shows how a
mail containing an attachment downloaded from a professional
account and forwarded to a professional contact eventually gets
blocked during the send process. We uploaded an anonymous
demo of SWIRLS’s BYOD use case in [33]. In the event of a
policy violation, SWIRLS asks the user for an action to take.
Figure 10(a) shows a screenshot of SWIRLS preventing an
app from launching that is already running under a different
context. In the case of policy violations caught in the Binder
driver, SWIRLS silently restarts the target component process
in the new context (Table V).
Employee-employee: corporate-level secure data exchange.
We evaluated SWIRLS for the BYOD data exchange use-
case where employees of the same company could share data
with another subset of employees, e.g., who are in the same
sensitive project team. SWIRLS enables data owners to export
policies for sensitive ﬁles across devices. The SWIRLS server
accepts requests from registered systems/users and creates cap-
sules on-the-ﬂy. In our use-case, the employee initially down-
loaded a sensitive project ﬁle sensitive-report.pdf
(incorporated into the corresponding capsule) from an email
from his colleague at the same company. Figure 8 (middle
block) shows what the employee observed upon opening the
email attachment. This step was followed by the capsule
installation and legitimate data access that was allowed by
SWIRLS. Later, the employee intended to send the ﬁle to
another colleague who was not a member of the project.
Consequently, SWIRLS denied the email send request as it
would have violated the installed capsule policies. We also
implemented a temporal and location-based context switching
app. Figure 10(b)- Figure 10(c) and Figure 8 (right block)
show the SWIRLS notiﬁcation when entering a geographically
constrained context. Based on our experiments, this use-case
drains the battery faster compared to other case studies mainly
because of periodic GPS pooling by SWIRLS to check and
enforce the installed capsule policy.
E. Security Analysis and Comparisons
We now compare the security protection provided by
SWIRLS with other existing most related solutions.
TaintDroid [15]. SWIRLS signiﬁcantly improves TaintDroid’s
capabilities through its policy enforcement agents across the
system, dynamic taint source assignment, and taint analysis
across reboots,
introducing several new data sources and
sinks (ﬁles, content provides, syscalls, and network sockets),
IFT support of apps with native code, a veriﬁed dynamic
Fig. 9. Violation Notiﬁcation in Managed App
that data mixing occurred because of only a few points in app’s
source code. The mixings occurred in ﬁles (local mail account
database entries and system service ﬁles), string variables,
and the content provider entries in the app’s data directory.
We modiﬁed the app accordingly with a small amount of
effort; the updated app was context-aware and did not mix
data from different context accounts. Additionally, it was able
to enforce more complicated capsule policies in SWIRLS, e.g.,
encrypting work emails after the work hours. Figure 8 (left
block) shows the user interface of the updated app where
emails from each BYOD context are color encoded. Overall,
we changed 13 source code ﬁles adding/removing 320/5 lines
of code within the app. The changes included i) modiﬁcation
to remove or duplicate the variables that get doubly tainted;
ii) policy checking at sensitive places in the code, e.g., the
sendMessage() function; and iii) UI and response action
implementations to raise a notiﬁcation (Figure 9) and ask the
user to modify the mail to avoid the policy-violating data leak.
D. Realized Smartphone Use Cases
Employer-employee: enterprise sensitive data access. Most
of the current apps have limited or no support for BYOD use
cases. Based on our analysis of 285, 457 top free apps on
Google Play store, many apps access universally accessible
shared spaces such as content providers and external storage,
where data from different contexts could mix leading to
capsule policy violations. In particular, 245, 315 apps (85.9%)
requested Internet access; 133, 133 (46.6%) asked for access to
external storage; 37, 153 (13.0%) requested access to account
information or credentials; and 13, 638 (4.7%) requested ac-
cess to contacts. Our ﬁndings through dynamic app analyses
(Section VI-B) and the static investigations above demonstrate
actual and potential unauthorized mixing of data from different
contexts. This hinders the deployment of a secure environment
where various context data interactions should be regulated
system-wide. For instance, any two applications with shared
space access permissions could set up a bi-directional com-
munication channel resulting in unauthorized data interactions.
SWIRLS facilitates an efﬁcient way to realize a multi-context
535
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
capsule deﬁnition/distribution/installation framework, system-
level API for context-aware app development, and isolation
of tainted data processing in system services, e.g., binder,
clipboard, account manager, device managers. TaintDroid uses
extended ﬁle attributes to store taints. Therefore, apps could
change their taint information, that TaintDroid (and not apps)
should maintain, at will by updating their ﬁle attributes.
SWIRLS takes an alternative kernel-level ﬁle taint tracking
approach for two reasons. First, SWIRLS should not allow
app developers to manipulate their app’s ﬁle taints (it
is
noteworthy that the app developers are often different from the
data owners who deﬁne data policies in SWIRLS). Second, the
kernel-level support allows SWIRLS to maintain a centralized
real-time system-wide database of capsule boundaries (the
list of tainted system objects) rather than distributed labels
on individual ﬁles. Centralized capsule boundary maintenance
enables SWIRLS to accelerate enforcement of some policy
types, e.g., “remove all professional data after working hours”.
For instance, in TaintDroid’s architecture, this would require
sweeping the whole ﬁlesystem, whereas in SWIRLS, remov-
ing ﬁles within the “professional data” table of the capsule
boundary database would sufﬁce.
Asbestos [14] and Histar [38]. SWIRLS’s initial architec-
ture for tainted system services (that run Android services)
followed Asbestos’s design; however, we had to totally re-
design it due to resource limitations in smartphones. Initially,
SWIRLS duplicated the system service process threads
for every taint, so IPC communications among tainted apps
and system services would comply with the capsule policies.
We dropped this implemented approach due to the added com-