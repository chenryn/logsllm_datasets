Application
Data
Record
Layer
TCP
Figure 1. The Structure of TLS
At the bottom is the TLS Record Layer which handles
all data transport. The record layer is assumed to sit di-
rectly on top of some reliable transport such as TCP. The
record layer can carry four kinds of payloads:
1. Handshake messages—used for algorithm negotia-
tion and key establishment.
2. ChangeCipherSpec messages—really part of the
handshake but technically a separate kind of mes-
sage.
3. Alert messages—used to signal that errors have oc-
curred
4. Application layer data
We focus on describing the record and handshake layers
since they are of the most relevance to DTLS.
3.3. Record Protocol
The TLS record protocol is a simple framing layer with
record format as shown below (see RFC 2246 [7] for a
description of the speciﬁcation language):
struct {
type;
ContentType
ProtocolVersion version;
uint16
opaque
length;
payload[length];
} TLSRecord;
In general, TLS authentication uses public key based
digital signatures backed by certiﬁcates. Thus, the server
authenticates either by decrypting a secret encrypted un-
der his public key or by signing an ephemeral public key.
The client authenticates by signing a random challenge.
Server certiﬁcates typically contain the server’s domain
name. Client certiﬁcates can contain arbitrary identities.
Each record is separately encrypted and MACed. In or-
der to prevent reordering and replay attacks a sequence
number is incorporated into the MAC but is not carried
in the record itself. Since records are delivered using a
reliable transport, the sequence number of a record can
be obtained simply by counting the records seen. Simi-
larly, encryption state (CBC residues or RC4 keystream)
ClientHello
ClientKeyExchange
[ChangeCipherSpec]
Finished
−−−−−−→
←−−−−−−
−−−−−−→
←−−−−−−
ServerHello
Certiﬁcate
ServerHelloDone
[ChangeCipherSpec]
Finished
Figure 2. The simple RSA TLS handshake
is chained between records. Thus, a record cannot be
independently decrypted if for some reason the previous
record is lost.
3.4. Handshake Protocol
The TLS handshake is a conventional two round-trip al-
gorithm negotiation and key establishment protocol. For
illustration, we show the most common RSA-based vari-
ant of the handshake in Figure 2.
A TLS client initiates the handshake by sending the
ClientHello message. This message contains the TLS ver-
sion, a list of algorithms and compression methods that
the client will accept and a random nonce used for anti-
replay.
The server responds with three messages. The Server-
Hello contains the server’s choice of version and algo-
rithms and a random nonce. The Certiﬁcate contains the
server’s certiﬁcate chain. The ServerHelloDone is sim-
ply a marker message to indicate that no other messages
are forthcoming. In more complicated handshakes other
messages would appear between the Certiﬁcate and the
ServerHelloDone messages.
The client then chooses a random PreMasterSecret
which will be used as the basis for each side’s keying ma-
terial. The client encrypts the PreMasterSecret under the
server’s RSA public key and sends it to the server in the
ClientKeyExchange message. The client then sends the
ChangeCipherSpec message to indicate that it is chang-
ing to the newly negotiated protection suite. Finally, the
client sends the Finished message which contains a MAC
of the previous handshake messages. Note that the Fin-
ished message is encrypted under the new protection suite.
The server responds with its own ChangeCipherSpec and
Finished messages.
As with the record layer, the handshake protocol as-
sumes that data is carried over reliable transport. The or-
der of the messages is precisely deﬁned and each message
depends on previous messages. Any other order is an error
and results in protocol failure. In addition, no mechanism
is provided for handling message loss. Retransmission in
case of loss must be handled by the transport layer.
4. DTLS Design
DTLS reuses almost all the protocol elements of TLS,
with minor but important modiﬁcations for it to work
properly with datagram transport. TLS depends on a sub-
set of TCP features: reliable, in-order packet delivery and
replay detection. Unfortunately, all of these features are
absent from datagram transport.
In this section we de-
scribe the DTLS protocol and how it copes with the ab-
sence of these features. Note that although we believe that
IPsec is the wrong tool for providing this type of security,
many of its techniques for handling these effects are quite
useful and are borrowed for DTLS.
4.1. Record Layer
As with TLS, all DTLS data is carried in records. In
both protocols, records can only be processed when the
entire record is available. In order to avoid dealing with
fragmentation, we require DTLS records to ﬁt within a
single datagram. There are three beneﬁts to this require-
ment. First, since the DTLS layer does not need to buffer
partial records, host memory can be used more efﬁciently,
which makes the host less susceptible to a DoS attack.
Second, it is quite possible that datagrams carrying the
remaining record fragments are lost, in which case the
received fragments are useless and cannot be processed.
Third, it is not clear how long received fragments should
be buffered before being discarded. Buffering record frag-
ments would unnecessarily complicate a DTLS imple-
mentation without providing any obvious beneﬁts. Note
that DTLS will still operate correctly with IP fragmenta-
tion and re-assembly, since IP re-assembly is transparently
handled by the kernel.
The DTLS record format is shown below. The boxed
ﬁelds are introduced by DTLS and are absent from TLS
records.
struct {
ContentType
ProtocolVersion version;
uint16
epoch;
type;
uint48
uint16
opaque
} DTLSRecord;
sequence_number;
length;
payload[length];
Epoch Epoch numbers are used by endpoints to de-
termine which cipher state has been used to protect the
record payload. Epoch numbers are required to resolve
ambiguity that arises when data loss occurs during a ses-
sion renegotiation. To illustrate, consider a client trans-
mitting data records 7, 8 and 9, followed by ChangeCi-
pherSpec message in record 10. Suppose the server re-
ceives records 7 and 9 (8 and 10 are lost). From the
server’s point of view, record 8 could have been the
ChangeCipherSpec message, in which case record 9 is
(incorrectly) assumed to be associated with the pending
cipher state. Since epoch numbers are incremented upon
sending a ChangeCipherSpec message, the server can use
the epoch number to resolve the ambiguity. In this case,
records 7 and 9 have the same epoch, implying that record
8 must have been a data record.
An alternative to epoch numbers would be to simply
use random initial sequence numbers for records. The se-
quence numbers are sufﬁciently large that the chance of
collision of active sequence number ranges is vanishingly
small. However, this would probably require slightly
more code to implement than the epoch strategy and is
less in keeping with the style of TLS, which uses zero-
based sequence numbers.
Sequence Number TLS employs implicit record se-
quence numbers (RSN) for replay protection. RSNs play
a similar role in DTLS, but must be explicitly speciﬁed
since records can get lost or be delivered out of order. As
with TLS, RSNs are incremented by 1 for each record and
are reset to zero whenever the cipher state is rolled over
due to a session renegotiation. Note that DTLS sequence
numbers are 48 bits (TLS’s are 64 bits) and therefore the
total space occupied by epoch and sequence number is the
same as the sequence number in TLS.
Replay detection is performed using the replay window
mechanism of RFC 2401 [18]. If datagrams always ar-
rived in order, it would be sufﬁcient for a DTLS end point
to keep track of the most recent record seen in order to
detect replays. But since datagrams may also arrive out
of order, a replay window mechanism is required. This
is most easily implemented as a bitmap where the set bits
represent the most recently received records. RSNs that
are too old to be checked against the bitmap are discarded.
Note, however, that replay detection can be undesirable
in some applications since packet duplication may be an
unintentional network effect. If replay detection is turned
off, then sequence numbers are not of any signiﬁcance in
MAC computation, but can be useful for counter mode
ciphers.
Payload Length DTLS requires that a record ﬁt entirely
within a single datagram. This means that DTLS records
will often be smaller than TLS records. The largest packet
that can be transmitted between two hosts—the Path Max-
imum Transmission Unit (PMTU)—is typically less than
the maximum size of a TLS record.
4.2. Ciphering Modes
DTLS cannot use any of the TLS 1.0 cipher modes,
since they all maintain residual state between records re-
quiring records to be processed in order without loss.
However, the CBC mode proposed for TLS 1.1 is com-
patible with DTLS, as we describe in this section. We
also explain why RC4 is unsuitable for use in DTLS.
DTLS can also make use of counter mode AES, once
this mode has been standardized.
CBC Mode An attack [31] against CBC mode ciphers
as employed by TLS 1.0 has resulted in the use of a
slightly modiﬁed version of CBC that requires explicit ini-
tialization vectors (IVs). The new version is likely to be a
feature of TLS 1.1 and is well suited for use in DTLS.
IV
R
E
C1
M2
E
C2
M3
E
C3
Figure 3. CBC Encryption with Explicit IV
As shown above, in explicit IV mode a random data
block is prepended to record data. All the encrypted
blocks are transmitted, and the receiver simply discards
the ﬁrst plaintext block to retrieve record data. With an ex-
plicit IV, each record can be separately decrypted. Triple-
DES and AES can be used with DTLS in this mode.
RC4 RC4 has been the cipher of choice for securing
TLS 1.0 connections due to its computational efﬁciency.
Unfortunately, RC4 is not easily applied to lossy datagram
trafﬁc: random access implies that the key stream needs
to be buffered. Alternatively, the RC4 engine can be re-
seeded for each incoming record, which is also fairly inef-
ﬁcient especially considering that work by Mironov [21]
recommends that the ﬁrst 512 bytes of RC4 keystream be
discarded due to a weakness in the RC4 key scheduling
algorithm [10].
We conclude that RC4 is an unsuitable cipher for use in
DTLS.
4.3. Handshake Protocol
The DTLS handshake, shown in Figure 4, is nearly
identical to that of TLS. There are two major changes:
1. Stateless cookie exchange to prevent denial of ser-
vice.
2. Message fragmentation and re-assembly
We begin by describing the modiﬁcations to protect the
well known, see for instance Photuris [13].
handshake exchange from denial of service.
Handshake Exchange Because the DTLS handshake
takes place over datagram transport, it is vulnerable to
two denial of service attacks that TLS is not. The ﬁrst
attack is the standard resource consumption attack. The
second attack is an ampliﬁcation attack where the attacker
sends a ClientHello message apparently sourced by the vic-
tim. The server then sends a Certiﬁcate message—which
is much larger—to the victim.
To mitigate these attacks, DTLS uses the cookie ex-
change technique that has been used in protocols such as
Photuris [13]. Before the handshake proper begins, the
client must replay a “cookie” provided by the server in or-
der to demonstrate that it is capable of receiving packets
at its claimed IP address.
Figure 4 shows the DTLS protocol.
ClientHello
ClientHello
ClientKeyExchange
[ChangeCipherSpec]
Finished
−−−−−−→
←−−−−−−
−−−−−−→
←−−−−−−
−−−−−−→
←−−−−−−
HelloVerifyRequest
ServerHello
Certiﬁcate
ServerHelloDone
[ChangeCipherSpec]
Finished
Figure 4. The simple DTLS RSA handshake
The DTLS ClientHello message contains a cookie ﬁeld.
The initial ClientHello contains an empty (zero-length)
cookie or potentially one cached from a prior exchange.
A server that is unable to verify the incoming cookie and
wishes to establish the liveness of the DTLS client sends
a HelloVerifyRequest message. Servers that are more sen-
sitive to overall handshake latency can skip the HelloVeri-
fyRequest message and instead respond with ServerHello
messages, in which case the protocol ﬂow is the same as
in TLS. Note that servers which choose to make this op-
timization can still be used as denial of service ampliﬁers
and should therefore only do so in environments where
ampliﬁcation attack is known not to be a problem.
The HelloVerifyRequest message contains a cookie.
This cookie should be generated in such a way that it
does not require keeping state on the server, thus avoid-
ing memory consumption denial of service attacks. For
example, the cookie can be generated from a keyed hash
of the client IP address, using a global key. Techniques for
generating and verifying this kind of stateless cookie are
Servers that are willing to resume sessions can skip the
cookie exchange phase if a valid session ID is presented
by the client, since the identity of the client must have
been previously established. One possible optimization
for servers that do not support session resumption is to
maintain a cache of recent (client, cookie) pairs, so that
cookie exchange can be skipped if a match is made on the
ﬁrst ClientHello .
The formats of the ClientHello and HelloVerifyRequest
messages are provided below.
opaque Cookie;
struct {
ProtocolVersion client_version;
Random random;
SessionID session_id;
Cookie cookie;
CipherSuite cipher_suites;
CompressionMethod comp_meth;
} ClientHello;
struct {
ProtocolVersion server_version;
Cookie cookie;
} HelloVerifyRequest;
Unlike application data, handshake messages (including
the ChangeCipherSpec message) must be reliably deliv-
ered since all handshake messages are necessary for suc-
cessful session negotiation. This creates three problems.
First, messages may be lost on the network. Second, they