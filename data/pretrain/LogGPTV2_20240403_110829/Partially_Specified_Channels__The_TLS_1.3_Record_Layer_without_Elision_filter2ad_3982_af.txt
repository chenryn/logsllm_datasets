b
and let AdvprivAE (t, q, µ) denote the maximum advantage of any t-time adversary making at most q queries
with total bit-length µ. Deﬁne the INT advantage of adversary A in attacking AE as
and let AdvintAE (t, q1, q2, µ1, µ2) be the maximum advantage of any t-time adversary making at most q1
(resp. q2) queries to Enc (resp. Dec) with total bit-length at most µ1 (resp. µ2).
Nonce generators. Finally, a nonce generator is a pair of algorithms N = (Init , Next ), the ﬁrst randomized
and the second deterministic.
• Init ( ) (cid:55)→ str ng. Initializes the state of the generator.
• Next (var str ng) (cid:55)→ str N . Computes the next nonce N given the current state ng and updates the
state.
We associate to N and an integer t ∈ N a procedure Coll , which ﬁrst executes ng ←← Init ( ), then computes
Ni ← Next (var ng) for each i ∈ [t]. Finally, if for every 1 ≤ i < j ≤ t it holds that Ni (cid:54)= Nj, then the
procedure outputs 0; otherwise it outputs 1. Deﬁne collN (t) = Pr(cid:2) Coll N (t) = 1(cid:3).
5.3 The partially speciﬁed record layer
We are now ready to formalize the record layer speciﬁcation. Refer to the PSC TLS[M,AE,N ] deﬁned
in Figure 7. It diﬀers from the standard (draft 23) in one small, but security-critical way: the standard
mandates that the AEAD scheme be invoked with ε as the AD, whereas in our scheme, the string A—the
record header—is used as AD. To fully comply with the spec, one would replace A with ε on lines 7:21
and 7:39. However, this leads to a trivial ciphertext stream integrity attack: suppose the sender outputs
Y = A(cid:107) Y (cid:48). Then the adversary can deliver A∗ (cid:107) Y (cid:48) to the receiver for some A∗ (cid:54)= A where |A∗| = |A|. If Y
is consumed by the receiver, then the channel will be deemed out of sync, but the output of the receiver
will be unaﬀected. We note that this attack is not an artiﬁcat of our security model. The strength of our
model—and hence the possibility of this attack—is inherited from the stream-based channel setting; if one
were to directly extend FGMP’s syntax and security notions so that they encompass multiplexing, then the
record layer woul have the same problem.
The procedure Mux invokes M (7:14) in order to compute the next channel fragment (i.e. record). It
is designed to never operate on 0-length records (7:15); if the ﬁrst input X to Write is undeﬁned (i.e.,
X = ε), then it outputs a 0-length ciphertext fragment (7:20). The data on the wire is A(cid:107) Y (cid:48), where Y (cid:48) is
the ciphertext and A is a string chosen by the SD (7:19).
Defragmentation of the ciphertext is performed by Read and is also left largely up to the SD: ﬁrst, the
ciphertext fragment is appended to a buﬀer buf , then the SD is invoked to decide how much of the buﬀer
to dequeue next. The oracle is given the contents of the buﬀer and outputs an integer c.
It also sets a
ﬂag drop. If Y = buf [:c] (cid:54)= (cid:5) ∧ ¬drop holds, then the next nonce is computed and output along with Y .
Otherwise the reader outputs Y = (cid:5) and N = (cid:5). (Note that the drop ﬂag permits the rules for handling CCS
messages; such a message will never be produced by the sender, but it may be transmitted to the receiver.)
18
5
str K, dx , bool sync
// The sender state.
1 type struct { str ng, mx } Muxer
2 type struct { str K } Writer
// The receiver state.
3 type struct { str ng, buf } Reader
4 type struct {
6 } Demuxer
Mux O(M, sc, var Muxer Mu)
14 (X, α) ←← M.Mux O(M, sc, var Mu.mx )
15 if X = (cid:5) then return ((cid:5),(cid:5), α)
16 N ← N .Next (var Mu.ng)
17 return (X, N, α)
Read O(C, var Reader Re)
26 declare str α, int c, bool drop
27 Re.buf ← Re.buf (cid:107) C; (cid:104)c, (cid:105) ← O((cid:104)parse, Re.buf (cid:105))
28 (cid:104)drop, α(cid:105) ←← O((cid:104)read, drop, Re.buf (cid:105))
29 Y ← Re.buf [:c]; Re.buf ← Re.buf % Y
30 if Y = (cid:5) or drop then return ((cid:5),(cid:5), α)
31 N ← N .Next (var Re.ng)
32 return (Y, N, α)
Init ( )
7 declare Muxer Mu, Writer Wr
8 declare Reader Re, Demuxer De
9 (Mu.mx , De.dx ) ←← M.Init ( )
10 Mu.ng ←← N .Init ( ); Re.ng ← Mu.ng
11 Wr .K ←← K; De.K ← Wr .K
12 De.sync ← 1
13 return (cid:0)Mu, Wr , Re, De(cid:1)
Write O(X, N, α, var Writer Wr )
18 declare str A, γ
19 (cid:104)A, γ(cid:105) ←← O((cid:104)write, ready,|X|, α(cid:105))
20 if X = (cid:5) then return ((cid:5), γ)
21 Y (cid:48) ← AE.Enc (Wr .K, N, A, X)
22 if Y (cid:48) = ⊥ or O((cid:104)parse, A(cid:107) Y (cid:48)(cid:105)) (cid:54)= (cid:104)|A|+|Y |,|A|(cid:105) then
γ ←← O((cid:104)write, invalid ptxt(cid:105))
return ((cid:5), γ)
23
24
25 return (A(cid:107) Y (cid:48), γ)
36
Demux O(Y, N, α, var Demuxer De)
33 declare str X, γ, int a
34 γ ←← O((cid:104)demux, ready,|Y |, α(cid:105))
35 if (Y = (cid:5) and γ (cid:54)= (cid:5)) or ¬De.sync
37 else if Y (cid:54)= (cid:5) then
39 X ← AE.Dec (De.K, N, A, Y (cid:48))
then return (⊥,⊥, γ)
(cid:104) , a(cid:105) ← O((cid:104)parse, Y (cid:105)); A ← Y [:a]; Y (cid:48) ← Y % A
if X = ⊥ then
De.sync ← 0
γ ←← O((cid:104)demux, invalid ctxt(cid:105))
return (⊥,⊥, γ)
40
41
42
38
43
44 (M, sc, γ) ←← M.Demux O(X, var De.dx )
45 return (M, sc, γ)
Figure 7: partially speciﬁed channel TLS[M,AE,N ] = (Init , Mux , Write , Read , Demux ) composed of a partially
speciﬁed stream multiplexer M, an AEAD scheme AE with key space K, and a nonce generator N .
Presumably, Y is equal to A(cid:107) Y (cid:48), where Y (cid:48) is a ciphertext and A is a string chosen by the SD. On input
of Y , the SD is invoked to determine the length of A (7:34). If Y (cid:54)= (cid:5), then string Y (cid:48) is decrypted (using A
as associated data) and the resulting channel fragment X (i.e. record) is input to the stream demultiplexer.
If Demux ever encounters an invalid ciphertext, then thereafter it never outputs a valid fragment (7:34
and 7:40–42). It uses a ﬂag sync to track this. If the receiver is in-sync and Y is 0-length, then Demux may
poll the stream demultiplexer to see if a message fragment is available for outputting. (That is, line 7:43
may be invoked on X = ε.) Usage limits are enforced by the SD (7:19 and 7:34).
Our construction captures all protocol-level side eﬀects in the record layer speciﬁcation [32] with the
exception of any sender or receiver state carried over after re-initialization of the channel.
Indeed, our
security model does not encompass re-initialization, since the game is deﬁned for an already initialized
channel. We made this choice because the record layer was designed so that no state is carried across key
changes. (See the discussion Section 5.1.)
Security. Let CH = TLS[M,AE,N ] be as deﬁned in Figure 7. Our ﬁrst step is to show that PRIV of AE
and mPRIV-S of M imply PRIV-S for CH:
Theorem 2. Let (cid:96) ∈ {lensc, len, none}. For every t, q, µ ∈ N and ˜t = t + O(q) it holds that
Advpriv-s
CH,(cid:96) (t, q, µ) ≤ Advmpriv-sM,(cid:96)
(˜t, q, µ) + 2AdvprivAE (˜t, q, µ) + 2 collN (q) .
19
G1(A)
1 declare bool coll
2 Env ← ε; (Mu, Wr , Re, De) ←← Init ( )
3 X ← ∅; coll ← 0
4 b ←← {0, 1}; b(cid:48) ←← ASend
5 return (b = b(cid:48))
(var Env )
1
Send(M0, sc0, M1, sc1)
6 L0 ← leak ((cid:96), M0, sc0); L1 ← leak ((cid:96), M1, sc1)
7 if L0 (cid:54)= L1 then return (⊥,⊥)
8 (X, N, γ) ←← Mux SD (Mb, scb, var Mu)
9 (C, γ) ←← Write SD (X, N, α, var Wr )
10 return (C, γ)
G1 G2
Write SD (X, N, α, var Wr )
11 declare str A, γ
12 (cid:104)A, γ(cid:105) ←← SD((cid:104)write, ready,|X|, α(cid:105))
13 if X = (cid:5) then return ((cid:5), γ)
14 Y (cid:48) ← AE.Enc (Wr .K, N, A, X)
15 if N ∈ X then coll ← 1 ; Y (cid:48) ← ⊥
16 X ← X ∪ {N}
17 if Y (cid:48) = ⊥ or SD((cid:104)parse, A(cid:107) Y (cid:48)(cid:105)) (cid:54)= (cid:104)|A|+|Y |,|A|(cid:105)
γ ←← SD((cid:104)write, invalid ptxt(cid:105))
return ((cid:5), γ)
18
19
20 return (A(cid:107) Y (cid:48), γ)
G2 G3
Write SD (X, N, α, var Wr )
21 declare str A, γ
22 (cid:104)A, γ(cid:105) ←← SD((cid:104)write, ready,|X|, α(cid:105))
23 if X = (cid:5) then return ((cid:5), γ)
24 Y (cid:48) ← AE.Enc (Wr .K, N, A, X)
25 Y (cid:48) ←← {0, 1}λ(|X|)
26 if N ∈ X then coll ← 1; Y (cid:48) ← ⊥
27 X ← X ∪ {N}
28 if Y (cid:48) = ⊥ or SD((cid:104)parse, A(cid:107) Y (cid:48)(cid:105)) (cid:54)= (cid:104)|A|+|Y |,|A|(cid:105)
γ ←← SD((cid:104)write, invalid ptxt(cid:105))
return ((cid:5), γ)
29
30
31 return (A(cid:107) Y (cid:48), γ)
Figure 8: Bottom: games G1, G2, and G3 for the proof of Theorem 2.
Proof. Fix t, q, µ ∈ N and let A = (A1,A2) be a t-time, PRIV-S adversary with query resources (q, µ).
We exhibit an mPRIV-S adversary B = (B1,B2) and a PRIV adversary C such that Advpriv-s
CH,(cid:96) (A) ≤
(B) + 2AdvprivAE (C) + 2 collN (q), where each runs in time t + O(q) and and uses the same query
Advmpriv-sM,(cid:96)
resources.
Let λ denote the ciphertext-length function associated with AE. Refer to game G1 deﬁned in Figure 8.
(Just as in the proof of Theorem 1, we have not explicitly deﬁned the SD oracle; refer to Figure 2 for
its deﬁnition.) One can easily check that for any A and a uniformly chosen b, the events G1(A) = 1
CH,(cid:96),b(A) = b are identically distributed. In game G2, the implementation of procedure Write is
and Exppriv-s
modiﬁed so that its output diﬀers from game G1 if the ﬂag coll gets set (8:15). By the Fundamental Lemma
of Game Playing [10],
Pr(cid:2) G1(A) = 1(cid:3) ≤ Pr(cid:2) G2(A) = 1(cid:3) + Pr(cid:2) Coll N (q) = 1(cid:3) .
(7)
In G2, if a nonce N input to procedure Write is ever repeated, then the output Y (cid:48) of the invocation of
AE.Enc gets set to ⊥ (8:15). Hence, the semantics of Y (cid:48) is the same as the output of Enc(N, A, X) in the
PRIV game for b = 1. In game G3, the invocation of AE.Enc is replaced with uniformly-chosen, λ(|X|)-bit
string.
Adversary CEnc simulates A in game G2 as follows. It ﬁrst initializes the adversary and multiplexer state
by setting Env ← ε and (Mu,∗,∗,∗) ←← Init ( ), then samples a bit b. It then executes b(cid:48) ←← ASend(cid:48)
(var Env ),
where Send(cid:48) is deﬁned like Send, except the invocation of AE.Enc (Wr .K, N, A, X) (8:14) is replaced
with Enc(N, A, X). (When Write calls SD, it invokes A2 as usual.) When A1 halts, adversary C halts and
outputs (b = b(cid:48)). By construction, we have that
1
(8)
(10)
for each d ∈ {0, 1}, which implies, by a standard conditioning argument, that
(9)
Finally, adversary B is deﬁned in Figure 9. It simulates A in a game G6, which we deﬁne in a moment.
In the remainder, we will show that
Pr(cid:2) ExpprivAE,d(C) = d(cid:3) = Pr(cid:2) G3−d(A) = 1(cid:3)
Pr(cid:2) G2(A) = 1(cid:3) ≤ Pr(cid:2) G3(A) = 1(cid:3) + AdvprivAE (C) .
(cid:2) Expmpriv-sM,(cid:96),b (B) = b(cid:3) = Pr(cid:2) G3(A) = 1(cid:3) .
Pr
b
20
The remaining transitions do not alter the semantics of the game; they serve only to clarify the reduction.
Refer to game G4 (Figure 9). The diﬀerence between it and G3 is that invocation of procedure Mux has
been replaced with its deﬁnition. In game G5, returning (⊥,⊥) in case M = ⊥ or sc = ⊥ (9:10) is deferred
until after invoking M.Mux (9:14). In game G6, the string 1|X| is passed to Write instead of X (9:25). But
the output of Write does not depend on X; it only depends on |X|, N , α, and its current state Wr . (This is
due to our revision in game G3.) Hence, these games are identically distributed. Now, the deﬁnition of B’s
simulated Send(cid:48) oracle is obtained by ﬁrst replacing lines 9:19–21 with an invocation of its own oracle Mux.
Then each instance of string X is replaced with integer x, the ﬁrst of the outputs of Mux. It is easy to
check that A’s view is the same in the simulation as it is in game G6, which yields equation (14).
Putting together equations (7)–(10) and our observation about game G1 yields the ﬁnal bound. To
complete the proof, we observe that B and C each runs in time t + O(q) (performing a constant amount