value. The last function, reset w, is there so that if we generate a known set
of fuzzed requests—say five of them—then for each payload position we
have designated in the Intruder tab, we will iterate through the five fuzzed
values.
Our fuzzer isn’t so fussy, and will always just keep randomly fuzzing
each HTTP request. Now let’s see how this looks when we implement it in
Python. Add the following code to the bottom of bhp_fuzzer.py:
u class BHPFuzzer(IIntruderPayloadGenerator):
def __init__(self, extender, attack):
self._extender = extender
self._helpers = extender._helpers
self._attack = attack
v self.max_payloads = 10
self.num_iterations = 0
return
w def hasMorePayloads(self):
if self.num_iterations == self.max_payloads:
return False
else:
return True
x def getNextPayload(self,current_payload):
# convert into a string
y payload = "".join(chr(x) for x in current_payload)
Extending Burp Proxy 81
# call our simple mutator to fuzz the POST
 payload = self.mutate_payload(payload)
# increase the number of fuzzing attempts
 self.num_iterations += 1
return payload
def reset(self):
self.num_iterations = 0
return
We start by defining our BHPFuzzer class u that extends the class
IIntruderPayloadGenerator. We define the required class variables as well as
add max_payloads v and num_iterations variables so that we can keep track
of when to let Burp know we’re finished fuzzing. You could of course let
the extension run forever if you like, but for testing we’ll leave this in place.
Next we implement the hasMorePayloads function w that simply checks
whether we have reached the maximum number of fuzzing iterations. You
could modify this to continually run the extension by always returning True.
The getNextPayload function x is the one that receives the original HTTP
payload and it is here that we will be fuzzing. The current_payload variable
arrives as a byte array, so we convert this to a string y and then pass it to
our fuzzing function mutate_payload . We then increment the num_iterations
variable  and return the mutated payload. Our last function is the reset
function that returns without doing anything.
Now let’s drop in the world’s simplest fuzzing function that you can
modify to your heart’s content. Because this function is aware of the cur-
rent payload, if you have a tricky protocol that needs something special, like
a CRC checksum at the beginning of the payload or a length field, you can
do those calculations inside this function before returning, which makes it
extremely flexible. Add the following code to bhp_fuzzer.py, making sure that
the mutate_payload function is tabbed into our BHPFuzzer class:
def mutate_payload(self,original_payload):
# pick a simple mutator or even call an external script
picker = random.randint(1,3)
# select a random offset in the payload to mutate
offset = random.randint(0,len(original_payload)-1)
payload = original_payload[:offset]
# random offset insert a SQL injection attempt
if picker == 1:
payload += "'"
# jam an XSS attempt in
if picker == 2:
payload += ""
82 Chapter 6
# repeat a chunk of the original payload a random number
if picker == 3:
chunk_length = random.randint(len(payload[offset:]),len(payload)-1)
repeater = random.randint(1,10)
for i in range(repeater):
payload += original_payload[offset:offset+chunk_length]
# add the remaining bits of the payload
payload += original_payload[offset:]
return payload
This simple fuzzer is pretty self-explanatory. We’ll randomly pick from
three mutators: a simple SQL injection test with a single-quote, an XSS
attempt, and then a mutator that selects a random chunk in the original
payload and repeats it a random number of times. We now have a Burp
Intruder extension that we can use. Let’s take a look at how we can get it
loaded.
Kicking the Tires
First we have to get our extension loaded and make sure there are no
errors. Click the Extender tab in Burp and then click the Add button.
A screen appears that will allow you to point Burp at the fuzzer. Ensure
that you set the same options as shown in Figure 6-3.
Figure 6-3: Setting Burp to load our extension
Extending Burp Proxy 83
Click Next and Burp will begin loading our extension. If all goes well,
Burp should indicate that the extension was loaded successfully. If there are
errors, click the Errors tab, debug any typos, and then click the Close button.
Your Extender screen should now look like Figure 6-4.
Figure 6-4: Burp Extender showing that our extension is loaded
You can see that our extension is loaded and that Burp has identified
that an Intruder payload generator is registered. We are now ready to lever-
age our extension in a real attack. Make sure your web browser is set to use
Burp Proxy as a localhost proxy on port 8080, and let’s attack the same
Acunetix web application from Chapter 5. Simply browse to:
http://testphp.vulnweb.com
84 Chapter 6
As an example, I used the little search bar on their site to submit a
search for the string “test”. Figure 6-5 shows how I can see this request in
the HTTP history tab of the Proxy tab, and I have right-clicked the request
to send it to Intruder.
Figure 6-5: Selecting an HTTP request to send to Intruder
Now switch to the Intruder tab and click the Positions tab. A screen
appears that shows each query parameter highlighted. This is Burp identify-
ing the spots where we should be fuzzing. You can try moving the payload
delimiters around or selecting the entire payload to fuzz if you choose, but
in our case let’s leave Burp to decide where we are going to fuzz. For clarity,
see Figure 6-6, which shows how payload highlighting works.
Now click the Payloads tab. In this screen, click the Payload type drop-
down and select Extension-generated. In the Payload Options section, click
the Select generator... button and choose BHP Payload Generator from the
drop-down. Your Payload screen should now look like Figure 6-7.
Extending Burp Proxy 85
Figure 6-6: Burp Intruder highlighting payload parameters
Figure 6-7: Using our fuzzing extension as a payload generator
86 Chapter 6
Now we’re ready to send our requests. At the top of the Burp menu
bar, click Intruder and then select Start Attack. This starts sending fuzzed
requests, and you will be able to quickly go through the results. When I ran
the fuzzer, I received output as shown in Figure 6-8.
Figure 6-8: Our fuzzer running in an Intruder attack
As you can see from the warning on line 61 of the response, in request 5,
we discovered what appears to be a SQL injection vulnerability.
Now of course, our fuzzer is only for demonstration purposes, but you’ll
be surprised how effective it can be for getting a web application to output
errors, disclose application paths, or behave in ways that lots of other scan-
ners might miss. The important thing is to understand how we managed to
get our custom extension in line with Intruder attacks. Now let’s create an
extension that will assist us in performing some extended reconnaissance
against a web server.
Bing for Burp
When you’re attacking a web server, it’s not uncommon for that single
machine to serve several web applications, some of which you might not be
aware of. Of course, you want to discover these hostnames exposed on the
same web server because they might give you an easier way to get a shell. It’s
not rare to find an insecure web application or even development resources
Extending Burp Proxy 87
located on the same machine as your target. Microsoft’s Bing search engine
has search capabilities that allow you to query Bing for all websites it finds
on a single IP address (using the “IP” search modifier). Bing will also tell
you all of the subdomains of a given domain (using the “domain” modifier).
Now we could, of course, use a scraper to submit these queries to Bing
and then scrape the HTML in the results, but that would be bad manners
(and also violate most search engines’ terms of use). In order to stay out of
trouble, we can use the Bing API1 to submit these queries programmatically
and then parse the results ourselves. We won’t implement any fancy Burp
GUI additions (other than a context menu) with this extension; we simply
output the results into Burp each time we run a query, and any detected
URLs to Burp’s target scope will be added automatically. Because I already
walked you through how to read the Burp API documentation and translate
it into Python, we’re going to get right to the code.
Crack open bhp_bing.py and hammer out the following code:
from burp import IBurpExtender
from burp import IContextMenuFactory
from javax.swing import JMenuItem
from java.util import List, ArrayList
from java.net import URL
import socket
import urllib
import json
import re
import base64
u bing_api_key = "YOURKEY"
v class BurpExtender(IBurpExtender, IContextMenuFactory):
def registerExtenderCallbacks(self, callbacks):
self._callbacks = callbacks
self._helpers = callbacks.getHelpers()
self.context = None
# we set up our extension
callbacks.setExtensionName("BHP Bing")
w callbacks.registerContextMenuFactory(self)
return
def createMenuItems(self, context_menu):
self.context = context_menu
menu_list = ArrayList()
x menu_list.add(JMenuItem("Send to Bing", actionPerformed=self.bing_¬
menu))
return menu_list
1. Visit http://www.bing.com/dev/en-us/dev-center/ to get set up with your own free Bing API key.
88 Chapter 6
This is the first bit of our Bing extension. Make sure you have your
Bing API key pasted in place u; you are allowed something like 2,500 free
searches per month. We begin by defining our BurpExtender class v that
implements the standard IBurpExtender interface and the IContextMenuFactory,
which allows us to provide a context menu when a user right-clicks a request
in Burp. We register our menu handler w so that we can determine which
site the user clicked, which then enables us to construct our Bing queries.
The last step is to set up our createMenuItem function, which will receive an
IContextMenuInvocation object that we will use to determine which HTTP
request was selected. The last step is to render our menu item and have the
bing_menu function handle the click event x. Now let’s add the functionality
to perform the Bing query, output the results, and add any discovered vir-
tual hosts to Burp’s target scope.
def bing_menu(self,event):
# grab the details of what the user clicked
u http_traffic = self.context.getSelectedMessages()
print "%d requests highlighted" % len(http_traffic)
for traffic in http_traffic:
http_service = traffic.getHttpService()
host = http_service.getHost()
print "User selected host: %s" % host
self.bing_search(host)
return
def bing_search(self,host):
# check if we have an IP or hostname
is_ip = re.match("[0-9]+(?:\.[0-9]+){3}", host)
v if is_ip:
ip_address = host
domain = False
else:
ip_address = socket.gethostbyname(host)
domain = True
bing_query_string = "'ip:%s'" % ip_address
w self.bing_query(bing_query_string)
if domain:
bing_query_string = "'domain:%s'" % host
x self.bing_query(bing_query_string)
Extending Burp Proxy 89
Our bing_menu function gets triggered when the user clicks the context
menu item we defined. We retrieve all of the HTTP requests that were
highlighted u and then retrieve the host portion of the request for each
one and send it to our bing_search function for further processing. The
bing_search function first determines if we were passed an IP address or a
hostname v. We then query Bing for all virtual hosts that have the same IP
address w as the host contained within the HTTP request that was right-
clicked. If a domain has been passed to our extension, then we also do a
secondary search x for any subdomains that Bing may have indexed. Now
let’s install the plumbing to use Burp’s HTTP API to send the request to
Bing and parse the results. Add the following code, ensuring that you’re
tabbed correctly into our BurpExtender class, or you’ll run into errors.
def bing_query(self,bing_query_string):
print "Performing Bing search: %s" % bing_query_string
# encode our query
quoted_query = urllib.quote(bing_query_string)
http_request = "GET https://api.datamarket.azure.com/Bing/Search/Web?$¬
format=json&$top=20&Query=%s HTTP/1.1\r\n" % quoted_query
http_request += "Host: api.datamarket.azure.com\r\n"
http_request += "Connection: close\r\n"
u http_request += "Authorization: Basic %s\r\n" % base64.b64encode(":%s" % ¬
bing_api_key)
http_request += "User-Agent: Blackhat Python\r\n\r\n"
v json_body = self._callbacks.makeHttpRequest("api.datamarket.azure.com",¬
443,True,http_request).tostring()
w json_body = json_body.split("\r\n\r\n",1)[1]
try:
x r = json.loads(json_body)
if len(r["d"]["results"]):
for site in r["d"]["results"]:
y print "*" * 100
print site['Title']
print site['Url']
print site['Description']
print "*" * 100
j_url = URL(site['Url'])
 if not self._callbacks.isInScope(j_url):
print "Adding to Burp scope"
self._callbacks.includeInScope(j_url)
90 Chapter 6
except:
print "No results from Bing"
pass
return
Okay! Burp’s HTTP API requires that we build up the entire HTTP
request as a string before sending it off, and in particular you can see
that we need to base64-encode u our Bing API key and use HTTP basic
authentication to make the API call. We then send our HTTP request v
to the Microsoft servers. When the response returns, we’ll have the entire
response including the headers, so we split the headers off w and then pass
it to our JSON parser x. For each set of results, we output some informa-
tion about the site that we discovered y and if the discovered site is not in
Burp’s target scope , we automatically add it. This is a great blend of using
the Jython API and pure Python in a Burp extension to do additional recon
work when attacking a particular target. Let’s take it for a spin.
Kicking the Tires
Use the same procedure we used for our fuzzing extension to get the Bing
search extension working. When it’s loaded, browse to http://testphp.vulnweb
.com/, and then right-click the GET request you just issued. If the extension
is loaded properly, you should see the menu option Send to Bing displayed
as shown in Figure 6-9.
Figure 6-9: New menu option showing our extension
Extending Burp Proxy 91
When you click this menu option, depending on the output you chose
when you loaded the extension, you should start to see results from Bing as
shown in Figure 6-10.
Figure 6-10: Our extension providing output from the Bing API search
And if you click the Target tab in Burp and then select Scope, you
will see new items automatically added to our target scope as shown in
Figure 6-11. The target scope limits activities such as attacks, spidering,
and scans to only those hosts defined.
92 Chapter 6
Figure 6-11: Showing how discovered hosts are automatically added to Burp’s target scope
turning website content into Password gold
Many times, security comes down to one thing: user passwords. It’s sad but
true. Making things worse, when it comes to web applications, especially
custom ones, it’s all too common to find that account lockouts aren’t imple-
mented. In other instances, strong passwords are not enforced. In these
cases, an online password guessing session like the one in the last chapter
might be just the ticket to gain access to the site.
The trick to online password guessing is getting the right wordlist. You
can’t test 10 million passwords if you’re in a hurry, so you need to be able to
create a wordlist targeted to the site in question. Of course, there are scripts
in the Kali Linux distribution that crawl a website and generate a wordlist
based on site content. Though if you’ve already used Burp Spider to crawl
the site, why send more traffic just to generate a wordlist? Plus, those scripts
usually have a ton of command-line arguments to remember. If you’re any-
thing like me, you’ve already memorized enough command-line arguments
to impress your friends, so let’s make Burp do the heavy lifting.
Extending Burp Proxy 93
Open bhp_wordlist.py and knock out this code.
from burp import IBurpExtender
from burp import IContextMenuFactory
from javax.swing import JMenuItem
from java.util import List, ArrayList
from java.net import URL
import re