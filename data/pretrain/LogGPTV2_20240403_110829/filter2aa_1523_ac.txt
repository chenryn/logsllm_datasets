exploit usually needs a known, predicatable address to target. By randomizing memory in the 
kernel, stack, userspace, or heap, ASLR aims to make exploits less successful.  
In practice, like StackGuard’s canary value, if ASLR’s randomization is weak, it becomes trivial to 
break. This is especially true for services that fork and respawn, such as Apache, or any service 
running inside a wrapper application that restarts it upon failure.  
Hovav Schacham and a group of other researchers found that by enumerating offsets of known 
libc functions by a series of unsuccessful attempts – their example used usleep(), but any widely-
available function with a known offset would work – they could effectively brute-force ASLR 
randomization through a series of failed overflow attempts on a respawning service, crashing it 
numerous times but eventually successfully exploiting the service and returning to libc.  
With this method, Shacham was able to compromise a vulnerable ASLR-protected Apache via 
brute force in around 200 seconds. Since 32-bit ASLR implementations use far less entropy than 
64-bit, it was noted that 64-bit ASLR would be substantially more time-consuming to defeat. Also, 
Shacham’s scenario presumes a service that restarts rather than simply crashes, so detecting a 
repeated number of failures (which the PaX team also recommends) would render the attack a 
denial of service rather than code execution. 
Most other methods of defeating ASLR work in a similar way: if an offset of a known-sized 
function can be obtained, return-to-libc is possible. In Phrack 59, “Tyler Durden” (a pseudonym 
and tip-of-the-hat to the film Fight Club) used format string vulnerabilities as an example to 
disclose addresses on a PaX-enabled system. Ben Hawkes of SureSec presented a method he 
called “Code Access Brute Forcing” at RuxCon in the past year that used, like Shacham, a series 
of unsuccesful reads to map out memory in OpenBSD.  
Shawn Moyer :: (un)Smashing the Stack :: DefCon 0x0F :: Page 9 of 13 
On the Microsoft front, Ollie Whitehouse of Symantec performed a series of regression tests of 
Vista’s ASLR, and found it to be substantially weaker on the heap and process environment 
blocks (PEBs) than in other areas, and that heap randomization was actually better using ANSI 
C’s malloc() than MS’s recommended HeapAlloc().  
Since even in the best cases Vista’s ASLR is weaker than that of most other implementations in 
terms of bits of entropy, it seems likely that derandomization attacks like Shacham’s will be 
effective to some extent. Additionally, like stack protection, Microsoft allows applications to opt-in 
or opt-out, which means for some apps protections may not be consistent. 
If sufficiently randomized, and if not readable in some other way such as via format string bugs 
or other information leakage, ASLR does still present a substantial barrier to heap overflows and 
return-to-libc attacks. This is especially true if all applications are built as PIC or PIE (Position-
Independent Executables|Code), which make it possible for running applications, in addition to 
libraries and stack or heap memory, to load at less predictable locations. 
0x08: How about just fixing the code? 
For some time, extensive code review has been posited as the best route to securing 
vulnerable applications. The OpenBSD project in particular has spent a number of years 
aggressively working to identify security bugs as part of the development process. After a 
number of remote vulnerabilities were still found in released code, Theo DeRaadt, long a 
proponent of pure code review and secure-by-default installations as the best approach to 
security, famously altered his position and began implementing a number of stack and heap 
protection measures as well as ASLR and other mechanisms to make overflow exploitation more 
difficult.  
Still, fixing vulnerabilities in code before they become exposures is without question the most 
effective route, and software developers are far more aware today than in previous years of the 
importance of integrating security review into the development lifecycle, using both manual 
review and static code analysis. 
In GCC, the RedHat-developed FORTIFY_SOURCE extension looks for a number of exploitable 
conditions at compile time, and when paired with its glibc counterpart, can identify if a buffer 
with a defined length is mishandled and stop execution, by replacing oft-abused functions with 
their checking counterparts. FORTIFY_SOURCE will also warn for conditions it deems suspect but 
cannot protect. OpenBSD has taken similar steps by replacing commonly exploited functions like 
strcat() / strcpy() with fixed-size alternatives. 
A number of vendor products also use automated code analysis to identify security holes. 
Recently the US Department of Homeland Security invested $1.25 million in a joint project 
between Stanford, Coverity, and Symantec to search Open Source projects for security bugs. In 
1999, as part of its security push, Microsoft purchased code analysis toolmaker Intrinsa outright, 
and made static analysis an integrated part of their QA process. 
Shawn Moyer :: (un)Smashing the Stack :: DefCon 0x0F :: Page 10 of 13 
0x09: The sum of the whole is partially great. 
If security in depth is the sum of a number of imperfect controls, then the controls described 
here should all certainly qualify. Each has been proven insufficient in a vaccuum, but the 
aggregate of a nonexecutable stack, ASLR, canary-based protection of pointer values, and static 
code analysis should still serve to create an environment that is more hostile to overflows than 
what has previously been available… The key weaknesses now seem to be in a lack of 
consistency of adoption and implementation. 
A remotely-exploitable stack-based overflow in ANI cursor handling in Vista, found by Alexander 
Sotirov, was due in part to Visual Studio’s /GS checks not protecting buffers that write to 
structures rather than arrays. Also, as NX and DEP have become more ubiquitous, heap 
exploitation and other alternatives have gained renewed interest as well. 
OpenBSD elected to omit kernel stack randomization, though it was adopted by PaX, due to 
questions about whether it broke POSIX compliance. In recent months OpenBSD was found 
vulnerable to a number of vulnerabilities in the kernel – one such example is being presented this 
year at BlackHat. While I’m sure the OpenBSD camp will have an alternative answer, it seems to 
me that a randomized kstack might have at least raised the bar a bit. 
OS X has benefited from relative obscurity for some time, but with increasing marketshare and 
minimal overflow protection beyond an optional integration with NX, it’s likely to become an 
attractive target – attacks refined a number of years ago are relatively trivial to implement, when 
compared to exploiting the same bugs on other platforms.  
In time, as always, new attacks will create new countermeasures, and the security ecosystem will 
continue to evolve, in fits and starts, as it always has, from RFC1135, to Aleph One, and on. 
Shawn Moyer :: (un)Smashing the Stack :: DefCon 0x0F :: Page 11 of 13 
// Notes and references 
Thanks for reading. I hope this paper was helpful to you. It’s the result of my attempt to better 
understand what protections were out there for my own systems and those under my care, and 
to get all of this information in one spot, which is something I couldn’t find a year ago when I got 
interested in this topic. 
Here’s a starting point for some of the information referenced in this paper. The BH CD also 
contains copies of these and a lot of other supporting material. In addition to these, I’d highly 
recommend reading Jon Erickson’s excellent Hacking: The Art of Exploitation, and The 
Shellcoder’s Handbook, edited by Jack Koziol.  
– shawn 
NX Bit, PaX, and SSP on Wikipedia 
http://en.wikipedia.org/wiki/NX_bit
http://en.wikipedia.org/wiki/PaX
http://en.wikipedia.org/wiki/Stack-smashing_protection
PaX: The Guaranteed End of Arbitrary Code Execution 
Brad Spengler 
http://grsecurity.net/PaX-presentation.ppt
PaX documentation repository: 
http://pax.grsecurity.net/docs/
Edgy and Proactive Security 
John Richard Moser 
http://www.nabble.com/Edgy-and-Proactive-Security-t1728145.html
What’s Exploitable? 
Dave LeBlanc 
http://blogs.msdn.com/david_leblanc/archive/2007/04/04/what-s-exploitable.aspx
On the Effectiveness of Address-Space Layout Randomization 
Shacham et al. 
http://crypto.stanford.edu/~dabo/abstracts/paxaslr.html
Defeating Buffer-Overflow Protection Prevention Hardware 
Piromposa / Enbody 
http://www.ece.wisc.edu/~wddd/2006/papers/wddd_07.pdf
ByPassing PaX ASLR 
“Tyler Durden” 
http://www.phrack.org/archives/59/p59-0x09.txt
Johnson and Silberman BH talk on Overflow Protection Implementations 
http://rjohnson.uninformed.org/blackhat/
Exploit mitigation techniques in OBSD 
Theo DeRaadt 
http://www.openbsd.org/papers/ven05-deraadt/index.html
Ubuntu USN analysis listing type of exploit (45% buffer overflows) 
John Richard Moser 
https://wiki.ubuntu.com/USNAnalysis
Crispin Cowan’s StackGuard paper,  
USENIX Security 1998 
http://www.usenix.org/publications/library/proceedings/sec98/full_papers/cowan/cowan_html/cowan.html
Shawn Moyer :: (un)Smashing the Stack :: DefCon 0x0F :: Page 12 of 13 
Detecting Heap Smashing Attacks through Fault Containment Wrappers: 
http://ieeexplore.ieee.org/iel5/7654/20915/00969756.pdf
ContraPolice: a libc Extension for Protecting Apps from Heap-Smashing attacks 
http://synflood.at/papers/cp.pdf
Effective protection against heap-based buffer overflows without resorting to magic 
Younan, Wouter, Piessens 
http://www.fort-knox.be/files/younan_malloc.pdf
l0t3k site with lots of linkage on BoF’s 
http://www.l0t3k.org/programming/docs/b0f/
How to write Buffer Overflows 
Peter Zaitko / Mudge 
http://insecure.org/stf/mudge_buffer_overflow_tutorial.html
Defeating Solar Designer’s NoExec stack patch 
http://seclists.org/bugtraq/1998/Feb/0006.html
Solar Designer / Owl Linux kernel patchset 
http://openwall.com/linux/
Theo’s hissy fit justifying ProPolice in OBSD to Peter Varga 
http://kerneltrap.org/node/516
Stack-Smashing Protection for Debian 
http://www.debian-administration.org/articles/408
IBM ProPolice site: 
http://www.trl.ibm.com/projects/security/ssp/
Four different tricks to bypass StackGuard and StackShield 
http://www.coresecurity.com/index.php5?module=ContentMod&action=item&id=1146
Smashing the Stack for Fun and Profit 
Elias Levy / Aleph One 
http://www.phrack.org/archives/49/P49-14
Stack Smashing Vulnerabilities in the Unix Operating System 
Nathan P. Smith 
http://community.corest.com/~juliano/nate-buffer.txt
RFC 1135 
http://www.faqs.org/rfcs/rfc1135.html
Gene Spafford’s analysis of the Morris Worm 
http://homes.cerias.purdue.edu/~spaf/tech-reps/823.pdf
Shawn Moyer :: (un)Smashing the Stack :: DefCon 0x0F :: Page 13 of 13