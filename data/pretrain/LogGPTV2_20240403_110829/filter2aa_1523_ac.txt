### Address Space Layout Randomization (ASLR) and Its Vulnerabilities

Exploits often require a known, predictable address to target. ASLR aims to make exploits less successful by randomizing memory in the kernel, stack, userspace, or heap. However, if the randomization is weak, it can be easily broken, particularly for services that fork and respawn, such as Apache or any service running inside a wrapper application that restarts it upon failure.

Hovav Schacham and his team of researchers demonstrated that by enumerating offsets of known libc functions through a series of unsuccessful attempts—using `usleep()` as an example, but any widely-available function with a known offset would work—they could effectively brute-force ASLR randomization. This method involves repeatedly crashing a respawning service until the correct offset is found, eventually leading to a successful exploit. Schacham was able to compromise a vulnerable ASLR-protected Apache via brute force in approximately 200 seconds. 

It is important to note that 64-bit ASLR implementations use more entropy than 32-bit versions, making them significantly more time-consuming to defeat. Additionally, if a service simply crashes rather than restarting, repeated failures can be detected, rendering the attack a denial of service rather than code execution.

### Other Methods of Defeating ASLR

Most methods of defeating ASLR involve obtaining the offset of a known-sized function, which allows for return-to-libc attacks. For example, "Tyler Durden" (a pseudonym referencing the film *Fight Club*) used format string vulnerabilities to disclose addresses on a PaX-enabled system. Ben Hawkes of SureSec presented a method called "Code Access Brute Forcing" at RuxCon, which involved a series of unsuccessful reads to map out memory in OpenBSD.

### Microsoft's ASLR Implementation

Ollie Whitehouse of Symantec conducted regression tests on Vista’s ASLR and found it to be weaker in the heap and process environment blocks (PEBs) compared to other areas. He also noted that heap randomization was better using ANSI C’s `malloc()` than Microsoft’s recommended `HeapAlloc()`. Given that even the best cases of Vista’s ASLR have fewer bits of entropy, derandomization attacks like Schacham’s are likely to be effective to some extent. Microsoft allows applications to opt-in or opt-out of ASLR, which can lead to inconsistent protection across different applications.

### Effectiveness of ASLR

When sufficiently randomized and not readable through other means, such as format string bugs or information leakage, ASLR presents a substantial barrier to heap overflows and return-to-libc attacks. This is especially true if all applications are built as Position-Independent Executables (PIE), which load at less predictable locations.

### Code Review and Security

Extensive code review has long been considered the best route to securing vulnerable applications. The OpenBSD project, for instance, has aggressively worked to identify security bugs during development. Despite these efforts, Theo DeRaadt, a proponent of pure code review, eventually implemented stack and heap protection measures, ASLR, and other mechanisms to make overflow exploitation more difficult.

Fixing vulnerabilities in code before they become exposures remains the most effective approach. Software developers today are more aware of the importance of integrating security review into the development lifecycle, using both manual review and static code analysis. Tools like GCC's FORTIFY_SOURCE extension, developed by RedHat, look for exploitable conditions at compile time and replace oft-abused functions with their checking counterparts. OpenBSD has taken similar steps by replacing commonly exploited functions like `strcat()` and `strcpy()` with fixed-size alternatives.

### Automated Code Analysis

Several vendor products use automated code analysis to identify security holes. For example, the US Department of Homeland Security invested $1.25 million in a joint project between Stanford, Coverity, and Symantec to search open-source projects for security bugs. In 1999, Microsoft purchased code analysis toolmaker Intrinsa and integrated static analysis into their QA process.

### Security in Depth

If security in depth is the sum of multiple imperfect controls, then the combination of a non-executable stack, ASLR, canary-based protection of pointer values, and static code analysis should create a more hostile environment for overflows. Key weaknesses now seem to be in the lack of consistent adoption and implementation.

For instance, a remotely-exploitable stack-based overflow in ANI cursor handling in Vista, discovered by Alexander Sotirov, was partly due to Visual Studio’s /GS checks not protecting buffers that write to structures rather than arrays. As NX and DEP have become more ubiquitous, heap exploitation and other alternatives have gained renewed interest.

### Conclusion

While each security control has its limitations, the aggregate effect of multiple controls can significantly enhance security. New attacks will always create new countermeasures, and the security ecosystem will continue to evolve. Understanding and implementing these protections is crucial for maintaining the security of systems.

---

**References:**

- **NX Bit, PaX, and SSP on Wikipedia:**
  - [NX Bit](http://en.wikipedia.org/wiki/NX_bit)
  - [PaX](http://en.wikipedia.org/wiki/PaX)
  - [Stack-smashing Protection](http://en.wikipedia.org/wiki/Stack-smashing_protection)

- **PaX Documentation:**
  - [PaX Presentation](http://grsecurity.net/PaX-presentation.ppt)
  - [PaX Documentation Repository](http://pax.grsecurity.net/docs/)

- **Other Resources:**
  - [Edgy and Proactive Security](http://www.nabble.com/Edgy-and-Proactive-Security-t1728145.html)
  - [What’s Exploitable?](http://blogs.msdn.com/david_leblanc/archive/2007/04/04/what-s-exploitable.aspx)
  - [On the Effectiveness of Address-Space Layout Randomization](http://crypto.stanford.edu/~dabo/abstracts/paxaslr.html)
  - [Defeating Buffer-Overflow Protection Prevention Hardware](http://www.ece.wisc.edu/~wddd/2006/papers/wddd_07.pdf)
  - [Bypassing PaX ASLR](http://www.phrack.org/archives/59/p59-0x09.txt)
  - [Johnson and Silberman BH talk on Overflow Protection Implementations](http://rjohnson.uninformed.org/blackhat/)
  - [Exploit Mitigation Techniques in OBSD](http://www.openbsd.org/papers/ven05-deraadt/index.html)
  - [Ubuntu USN Analysis Listing Type of Exploit](https://wiki.ubuntu.com/USNAnalysis)
  - [Crispin Cowan’s StackGuard Paper](http://www.usenix.org/publications/library/proceedings/sec98/full_papers/cowan/cowan_html/cowan.html)
  - [Detecting Heap Smashing Attacks through Fault Containment Wrappers](http://ieeexplore.ieee.org/iel5/7654/20915/00969756.pdf)
  - [ContraPolice: a libc Extension for Protecting Apps from Heap-Smashing Attacks](http://synflood.at/papers/cp.pdf)
  - [Effective Protection against Heap-Based Buffer Overflows without Resorting to Magic](http://www.fort-knox.be/files/younan_malloc.pdf)
  - [l0t3k Site with Lots of Linkage on BoFs](http://www.l0t3k.org/programming/docs/b0f/)
  - [How to Write Buffer Overflows](http://insecure.org/stf/mudge_buffer_overflow_tutorial.html)
  - [Defeating Solar Designer’s NoExec Stack Patch](http://seclists.org/bugtraq/1998/Feb/0006.html)
  - [Solar Designer / Owl Linux Kernel Patchset](http://openwall.com/linux/)
  - [Theo’s Hissy Fit Justifying ProPolice in OBSD to Peter Varga](http://kerneltrap.org/node/516)
  - [Stack-Smashing Protection for Debian](http://www.debian-administration.org/articles/408)
  - [IBM ProPolice Site](http://www.trl.ibm.com/projects/security/ssp/)
  - [Four Different Tricks to Bypass StackGuard and StackShield](http://www.coresecurity.com/index.php5?module=ContentMod&action=item&id=1146)
  - [Smashing the Stack for Fun and Profit](http://www.phrack.org/archives/49/P49-14)
  - [Stack Smashing Vulnerabilities in the Unix Operating System](http://community.corest.com/~juliano/nate-buffer.txt)
  - [RFC 1135](http://www.faqs.org/rfcs/rfc1135.html)
  - [Gene Spafford’s Analysis of the Morris Worm](http://homes.cerias.purdue.edu/~spaf/tech-reps/823.pdf)