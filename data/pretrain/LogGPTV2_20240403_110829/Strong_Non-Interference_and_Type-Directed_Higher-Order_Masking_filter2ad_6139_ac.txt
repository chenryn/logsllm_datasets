(cid:117)(cid:116)
1 + (cid:107)depsetG(O)(cid:107) by construction, therefore we can conclude.
The notion of t-non-interference extends readily to algorithms. In addition, one can
prove that an algorithm is secure iff the gadget obtained by fully inlining the algorithm
is secure.
Lemma 4 A program P is t-NI iff the gadget inline(P ) obtained by full inlining is t-NI.
The lemma sheds some intuition on the deﬁnition of t-NI for algorithms. However, we
emphasize that verifying fully inlined algorithms is a bad strategy; in fact, previous work
indicates that this approach does not scale, and that composition results are needed.
5 Strong Non-Interference
We introduce strong non-interference, a reinforcement of probing security based on
a ﬁner analysis of cardinality constraints for dependency sets. Informally, strong non-
interference distinguishes between internal and output positions, and requires that the
dependency set of a position set O has degree ≤ k, i.e. contains at most k shares of
each encoding input, where k is the number of internal positions in O. Formally, a local
variable is an output position for G if it appears in the return tuple of G, and an internal
position otherwise. Let Oint (resp. Oext) denote the subset of internal (resp. output)
positions of a set O. Strong t-non-interference requires that the degree of depset(O) is
smaller than |Oint|, rather than |O|. Intuitively, a t-SNI gadget information-theoretically
hides dependencies between each of its inputs and its outputs, even in the presence of
internal probes. This essential property is what supports compositional reasoning.
Deﬁnition 4 (Strong probing security) A gadget G is t-strongly non-interfering (or
t-SNI) if (cid:107)depsetG(O)(cid:107) ≤ |Oint| for every position set O such that |O| ≤ t.
Fortunately, many gadgets from the literature achieve strong non-interference (see
Table 1 and Section 7). First, we note that gadget RefreshM (Gadget 4b) generalized
from Ishai, Sahai and Wagner [24] is t-SNI for all t. (A proof sketch for this proposition
is given in Appendix C.)
Gadget 4 Mask Refreshing Gadgets
0: function RefreshA(a)
1: c0 ← a0
for i = 1 to t do
2:
r $← K
3:
c0 ← c0 ⊕ r
4:
ci ← ai (cid:9) r
5:
return c
6:
(4a) Addition-Based Mask Refreshing
for i = 0 to t do
ci ← ai
for i = 0 to t do
for j = i + 1 to t do
r $← K
ci ← ci ⊕ r
cj ← cj (cid:9) r
0: function RefreshM(a)
1:
2:
3:
4:
5:
6:
7:
8:
(4b) Multiplication-Based Mask Refreshing
return c
Proposition 1 RefreshM (Gadget 4b) is t-SNI.
On the contrary, the additive refreshing gadget RefreshA (Gadget 4a) achieves NI
but fails to achieve SNI. Interestingly, Coron’s linear-space variant of Ishai, Sahai and
Wagner’s multiplication [12, Alg. 6] (Gadget 7) and the MultLin gadget for securely
multiplying linearly dependent inputs [15, Alg. 5] (Gadget 8) are both strongly non-
interfering. The proof of SNI for Gadget 7 is easy to adapt to the more standard quadratic-
space multiplication gadget, since they compute the same intermediate values in different
orders.
Proposition 2 The SecMult gadget (Gadget 7) is t-SNI.
Proposition 3 The MultLin gadget (Gadget 8) is t-SNI.
The proofs of Propositions 1, 2 and 3 have been machine-checked using Easy-
Crypt [5]. We also provide more detailed game-based proof sketches in the full version
of this paper.
Strong Non-Interference for Mask Refreshing We now show how choosing a t-SNI
refreshing gadget over a t-NI refreshing gadget critically inﬂuences the security of
algorithms. Concretely, we provide a separating example, which captures the essence of
the ﬂaw in the inversion algorithm of Rivain and Prouff [31]. The example considers two
algorithms (Algorithm 5) which compute a cube in GF(28) by squaring and multiplying
(using, for illustration purposes, some t-NI gadgets Square and Mult for squaring and
multiplication). Both algorithms use a refreshing gadget between the two operations, but
they differ in which gadget they use: BadCube (Gadget 5a) uses the additive refreshing
gagdet RefreshA, which is t-NI but not t-SNI, and Cube (Gadget 5b) uses the RefreshM
gadget, which is t-SNI. This simple difference is fundamental for the security of the two
algorithms.
Alg. 5 Cubing procedures (with K = GF(28))
function BadCube(x)
y1 := Square(x)
y2 := RefreshA(y1)
z := Mult(x, y2)
return z
function Cube(x)
y1 := Square(x)
y2 := RefreshM(y1)
z := Mult(x, y2)
return z
(5a) Insecure Cubing
(5b) Secure Cubing
Lemma 5 ([15]) BadCube is not t-NI for any t ≥ 2. Cube is t-NI for all t.
Coron et al. [15] exhibit proofs for both statements. In Appendix C, we give a compact
proof of t-NI for Cube that does not exhaustively consider all (t + 1)-tuples of positions
in Cube. The key argument is that RefreshM being t-SNI essentially renders useless
any information on y2 the adversary may have learned from observing positions in Mult:
those do not add any shares of y1 to the dependency set we compute for RefreshM, and
therefore do not inﬂuence the shares of x that appear in the ﬁnal dependency set for
Cube. On the other hand, using a simple t-NI mask refreshing gadget (such as RefreshA)
in its place breaks the proof by allowing us to deduce only that each position in the
multiplication may depend on 2 shares of x.
In Section 6, we show how the proof of Lemma 5 can be improved and extended into
a compositional proof for the (repaired) inversion algorithm of Rivain and Prouff [31],
and, in fact, outlines a general mehodology for proving algorithms t-NI or t-SNI.
A Generic Composition Result Before formalizing and automating this proof process
to obtain precise probing security proofs for large circuits, we now give a coarse but
simple composition result that illustrates the generality of SNI. Informally, an algorithm
is t-NI if all its gadgets verify t-NI and every non-linear usage of an encoding variable is
guarded by t-SNI refreshing gadgets. In addition, it shows that processing all inputs, or
the output of a t-NI algorithm with a t-SNI gadget (here RefreshM) sufﬁces to make the
algorithm t-SNI.
Proposition 4 An algorithm P is t-NI provided all its gadgets are t-NI, and all encoding
variables are used at most once as argument of a gadget call other than RefreshM.
Moreover P is t-SNI if it is t-NI and one of the following holds:
– its return expression is b and its last instruction is of the form b := RefreshM(a);
– its sequence of encoding parameters is (a1, . . . , an), its ith instruction is b :=i
RefreshM(ai) for 1 ≤ i ≤ n, and ai is not used anywhere else in the algorithm.
6 Enforcing probing policies
We ﬁrst deﬁne an expressive assertion language for specifying sets of position sets, and
then introduce probing policies, which yield a convenient formalism for deﬁning a large
class of information ﬂow policies with cardinality constraints.
Deﬁnition 5 (Probing policy)
1. A probing assertion is a pair (Γ, φ), where Γ is a map from encoding variables
to expressions in the theory of ﬁnite sets, and φ is a cardinality constraint. Each
probing assertion (Γ, φ) deﬁnes a set of subsets of positions for a ﬁxed algorithm P ,
denoted by(cid:74)(Γ, φ)(cid:75). (The syntax and semantics of set expressions and cardinality
constraints is explained below.)
2. A probing policy is a pair of assertions
(Γin, φin) ⇐= (Γout, φout)
where (Γout, φout) is the post-assertion and (Γin, φin) is the pre-assertion.
3. Algorithm P satisﬁes the policy (Γin, φin) ⇐= (Γout, φout), written P |= (Γin, φin) ⇐=
(Γout, φout), if for every position set O ∈(cid:74)(Γout, φout)(cid:75), P is (I,O)-NI for some
input position set I ∈(cid:74)(Γin, φin)(cid:75).
The syntax of set expressions and cardinality constraints is given by the following
grammar:
S := X | ∅ | S ∪ S
(set expr.)
l := |S| | |O(cid:96)| | t | l + l
(arith. expr.)
(cardinality constr.) φ := l ≤ l | φ ∧ φ
The syntax distinguishes between variables X that are drawn from a set X of names–that
we will use to represent sets of shares of an encoding variable, and variables O, annotated
with a label (cid:96), that are drawn from a disjoint set Ω of names–that we will use to represent
sets of internal positions probed in the gadget used at instruction (cid:96).
Remark 1 Our syntax for set expressions and constraints is a fragment of the (decidable)
theory of ﬁnite sets with cardinality constraints. It would be possible to include other
set-theoretical operations, as in [32,3]. However, we have found our core fragment
sufﬁcient for our purposes.
The semantics of assertions is deﬁned using the notion of valuation. A valuation µ is a
mapping from names in X and Ω to ﬁnite sets, such that ∀ X ∈ X . µ(X) ⊆ {0, . . . , t}
and ∀ O(cid:96) ∈ Ω. µ(O(cid:96)) ⊆ OG(cid:96), where G(cid:96) is the gadget called at instruction (cid:96). Every
valuation µ deﬁnes, for every set expression S, a set of share indices µ(S) ⊆ {0, . . . , t}
and for every arithmetic expression l an interpretation µ(l) ∈ N, using the intended
interpetation of symbols (i.e. ∪ is interpreted as set union, + is interpreted as addition,
. . . ).
Deﬁnition 6 (Interpretation of assertions)
1. µ satisﬁes a cardinality constraint φ, written µ |= φ, if µ(l1) ≤ µ(l2) for every
conjunct l1 ≤ l2 of φ.
2. The interpretation of Γ under µ is the set
(cid:91)
{aı | ı ∈ µ(Γ (a))} ∪(cid:91)
µ(O)
µ(Γ ) =
a
O
3. The interpretation of (Γ, φ) is the set
(cid:74)(Γ, φ)(cid:75) = {µ(Γ ) | µ |= φ}
We now turn to the deﬁnition of the type system.
Deﬁnition 7 Algorithm P (a1, . . . , an) ::= s; return r has type (Γin, φin) ⇐= (Γout, φout)
if the judgment (cid:96) s : (Γin, φin) ⇐= (Γout, φout) is derivable using the typing rules from
Figure 3. We denote this fact (cid:96) P : (Γin, φin) ⇐= (Γout, φout).
We brieﬂy comment on the rules. Rule (SEQ) is used for typing the sequential composition
of gadget calls and is as expected. The remaining rules are used for interpreting the
non-interference properties of gadgets. We now detail them.
(cid:96) b := G(a1, . . . , an) : (Γin, φin) ⇐= (Γ, φ)
(cid:96) c : (Γ, φ) ⇐= (Γout, φout)
(cid:96) b := G(a1, . . . , an); c : (Γin, φin) ⇐= (Γout, φout)
φout ⇒ |Γout(b)| + |O(cid:96)| ≤ t
Γin := Γout{b, (ak)1≤k≤n ← ∅, (Γout(ak) ∪ X (cid:96)
G is t-NI
k)1≤k≤n}
(cid:94)
(cid:96) b :=(cid:96) G(a1, . . . , an) : (Γin, φout ∧ (
|X (cid:96)
k| ≤ |Γout(b)| + |O(cid:96)|)) ⇐= (Γout, φout)
(SEQ)
(NI-GADGET)
G is t-SNI
1≤k≤n
φout ⇒ |Γout(b)| + |O(cid:96)| ≤ t
Γin := Γout{b, (ak)1≤k≤n ← ∅, (Γout(ak) ∪ X (cid:96)
k)1≤k≤n}
(cid:96) b :=(cid:96) G(a1, . . . , an) : (Γin, φout ∧ (
|X (cid:96)
k| ≤ |O(cid:96)|)) ⇐= (Γout, φout)
(cid:94)
1≤k≤n
G is afﬁne
Γin := Γout{b, (ak)1≤k≤n ← ∅, (Γout(ak) ∪ Γout(b) ∪ X (cid:96))1≤k≤n}
(cid:96) b :=(cid:96) G(a1, . . . , an) : (Γin, φout ∧ |X (cid:96)| ≤ |O(cid:96)|) ⇐= (Γout, φout)
(AFFINE)
(SNI-GADGET)
where Γ{∀ k. vk ← ∀ k. ek} stands for the map Γ where each vk is updated to map to ek and all
other indices are left untouched.
Fig. 3: Typing rules
Rule (SNI-GADGET) is used for typing calls to a SNI-gadget with an arbitrary
post-assertion and a pre-assertion in which the mapping Γout is updated to reﬂect the
dependencies created by the call, and the constraint is strenghtened with the cardinality
constraint imposed by strong non-interference. The rule has a side condition |O(cid:96)| +
|Γout(b)| ≤ t ensuring that the total number of positions whose dependency set by G
we are considering is bounded by t, where O(cid:96) is the name of the subset of positions
that are observed in the current gadget (called at line (cid:96)), and Γout(b) is the set of shares
of b the adversary has information about from positions probed in gadgets that use
b later on in the algorithm. This side condition is veriﬁed under the condition φout.
Note that the variables X (cid:96)
k are fresh, and annotated with the label (cid:96) that identiﬁes the
current instruction, and an indice k that identiﬁes the argument. Rule (NI-GADGET)
is similar but deals with NI-gadgets, and therefore extends Γin with correspondingly
weaker constraints on the X (cid:96)
k.
We now turn to the rule for afﬁne gadgets. Informally, we say that a gadget is afﬁne if
it manipulates its input encodings share by share; this includes standard implementations
of ring addition, for example, but also of many other functions that are linear in K (for
example, multiplication by a constant–or public–scalar, or shifts in the representation
when addition is bitwise). Formally, we say that a gadget G with parameters (a1, . . . , an)
is afﬁne iff there exists a family of procedures f0, . . . , ft such that G is an inlining of
x0 ← f0(a0
1, . . . , a0