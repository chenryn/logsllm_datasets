ROTD securely controls Dev’s display and uses
it to output its public key for Alice to validate
This approach is insecure since Alice does not have a means to verify
whether the displayed public key is indeed from ROTD. Since Alice
has no prior knowledge of this public key, the adversary can display
an arbitrary value on Dev’s screen without invoking ROTD and
Alice can not visually authenticate its origin. The main challenge
stems from Alice having no identifiable information with respect
to ROTD.
The proposed presence attestation scheme splits the problem into
two parts: (1) existence problem, i.e., whether some DRTM interacts
with Verifier, and (2) residence problem, i.e., whether the DRTM that
participates in the interaction actually resides on Dev. The main
benefit of this approach is the flexibility of taking advantage of
DRTM security assurances and software trust anchor’s capabilities.
The scheme proceeds as follows:
Phase 1. Existence Checking. Verifier and Dev engage in an en-
hanced static integrity attestation protocol. Its outcome allows
Verifier to determine whether it is interacting with a true DRTM
which has launched a trust anchor. Nonetheless, it does not confirm
that DRTM is indeed ROTD on Dev, due to the possible presence
of the collusive adversary. At the end of the protocol, Verifier and
the DRTM share a secret key k, needed in Phase 2 .
Existence checking determines whether Verifier is interacting
with a genuine DRTM based on the latter’s ability to generate a
valid signature, i.e., verifiable using the public key from the DRTM’s
certificate. It extends conventional integrity attestation with verifi-
cation of ownership of the private key and establishment of a fresh
shared secret key.
Existence checking is based on the following logic: an entity that
can, based on a challenge, produce a signed response verified using
the public key (contained in a valid DRTM’s certificate issued by a
recognized CA) must know the corresponding private key. Recall
that, according to our trust and adversary model, the adversary
cannot extract the private key from any DRTM.
Interaction between Verifier and Dev is shown in Protocol 1.
Because of the threat of cuckoo attacks, the response received by
Verifier could be computed by ROTM instead of ROTD, though Veri-
fier exchanges data with Dev, from the communication perspective.
Caveat 1. Successful completion of Step 3 implies that Verifier
shares a fresh random secret key k with ROTD. In case of a cuckoo
attack, ROTM obtains k; however, neither Dev nor (untrusted) soft-
ware on M knows k.
Caveat 2. The certificate in Step 1 does not provide sufficient
identification information for Verifier to authenticate Dev, since
Alice does not have sufficient knowledge to link this certificate to
Dev.
Phase 2. Residence Checking. The trust anchor attests to its physi-
cal environment and sends to Verifier its attestation token, integrity
of which is protected by k. Using the analog interface provided by
Verifier, Alice checks the physical environment vouched for by the
trust anchor and determines whether it is indeed TA in Dev.
VerifierDevM1.	request2.	responseROTMROTD2. Verifier
3. Verifier
Existence Checking ()
1. Verifier verifies DRTM’s public key certificate provided by Dev. If
valid, it extracts public keys P Ke and P Kv .
c→ Dev. Verifier generates random number r, random secret
key k, and computes c = EP Ke (r ||k ).
σ← Dev. ROTD computes r ||k = DS Kd (c ) and generates
signature σ = SS Ks (r ||Hk (T A)) where T A is the code and data
image of the loaded trust anchor.
b→ Dev Verifier verifies the signature by computing
b = VP Kv (σ, r ||Hk (T A)) where Hk (T A) is HMAC of expected
trust anchor image. If σ is successfully verified, b = 1 is returned to
Dev. Both parties proceed to Phase 2. Otherwise, Verifier terminates
attestation and displays an error message to Alice.
4. Verifier
Protocol 1: Phase 1: Existence Checking; ROTD’s public and pri-
vate key pairs for encryption and signing are: (P Ke, SKd ) and
(P Kv, SKs ), respectively.
The main challenge in designing a residence checking protocol
is that Verifier, as a computer, cannot identify its protocol peer. All
commonly used identifiers – such as MAC or IP addresses as well
as IMEI numbers – are subject to modification attacks. Although a
hardware identifier can be unforgeable, it requires the manufacturer
to explicitly convey it to Alice who must then keep it at all times. On
the other hand, although Alice can easily identify Dev physically,
she can neither engage in any protocol with Dev, nor hold its
(trusted) logic identifier.
Our general idea is to challenge the alleged DRTM (and its trust
anchor) to respond with attestation for a physical feature of its
hosting device’s physical environment. Verifier first checks response
integrity to ensure that it indeed originates from the alleged trust
anchor. Then, Alice assesses whether this matches the expected
physical environment.
There are two prerequisites: First, the physical property in use
should be unique to the environment and not reproducible by the
adversary without detection. Therefore, some intuitive physical
properties such as velocity and altitude are not ideal. Second, the
physical property must be securely capturable by the trust anchor,
despite the threat from the untrusted kernel on Dev. This require-
ment rules out certain TA choices, e.g., software launched by Intel
SGX can not act as TA, since it lacks I/O capability.
In the following sections, we introduce three types of residence
checking based on scene, sight and location, with different security
and usability.
3 SIGHT-BASED RESIDENCE CHECKING
The residence checking protocol is designed to resist attacks by the
collusive and analog adversary. This section focuses on protocol
logic only. The operational model of analog I/O devices is simplified
to consist of rendering (delivering) data from/to main memory at
fixed-length intervals. The next section presents implementation
details of complex low-level I/O operations.
3.1 Basic Protocol
After a successful existence attestation phase, Verifier is assured
that a genuine DRTM and its TA took part in the interaction. The
next step is to check whether they both reside on ROTD or ROTM.
Using the general approach described in Section 2.3, we propose
to use the line-of-sight between Verifier and Dev to verify DRTM
residence. Before initiating attestation, Alice positions Dev’s camera
to face Verifier’s screen. The line-of-sight channel between Verifier
and Dev is then used to convey Verifier’s attestation challenge to
Dev. Our rationale is based on the physical property of line-of-sight:
since the attestation challenge is sent and received via the analog
channel, a man-in-the-middle adversary must perform the same
type of analog I/O operations to relay the challenge. It therefore
needs to take a longer time than an uncorrupted device would take.
Hence, our scheme needs to measure the interval between sending
a challenge in Verifier and arrival of that challenge at Dev.
3.1.1 Design Considerations. Although the basic idea is quite
simple, the scheme is challenging to realize, for several reasons:
First, it is very difficult to precisely measure the desired time
interval. The two events take place on Verifier and Dev, respectively.
Since they are not expected to have perfectly synchronized clocks,
we cannot obtain precise start and end times in the two devices.
Second, displaying an image on the screen and capturing that
image are independent events. The camera periodically generates
the image frame according to its frame rate. The image may be
displayed anytime during the camera’ operation cycle denoted by
τcam. In the rest of the paper, we refer to this as the D2C (display-
to-camera) interval, as illustrated in Figure 3. Thus, the difference
between the shortest and longest D2C intervals is about τcam,
Naturally, we must consider the shortest interval for the benefit of
the attacker, and the longest – for the normal case.
Fig. 3: The shadowed box represents the D2C interval. Its length is
uniformly distributed in [0, τcam].
Caveat: The D2C interval can not be precisely measured by soft-
ware, because the exact moment when the image is fully displayed is
not known to the CPU. Unless τcam is significantly short, variance
of the D2C interval should not be neglected.
Third, an image frame is essentially a matrix of pixels, displayed
row-wise. If the adversary can derive the entire frame data after
observing the first few rows, it does not need to wait for the entire
frame to be displayed, and can hence take less time than expected.
For example, after scanning the top row of a standard barcode, the
adversary can infer the encoded binary string. Hence, images used
between Verifier and Dev must not allow such shortcut attacks.
For ease of presentation, we refer to qualifying images as full-view
images.
Finally, the recipient must detect whether the camera captured
the entire image of the displayed challenge. As shown in Figure 4,
timeimage	captureimage	captureimage	captureend	ofdisplayτcamτcamD2C	intervalthe image produced by the camera might only take part of the chal-
lenge image, because the display has not yet rendered the entire
screen when the camera took the picture. This partial capture could
result in: (1) false positives with a genuine device, or (2) false nega-
tives, since the adversary’s cost is reduced by relaying only part of
the challenge. We refer to this issue as the full-screen problem.
Fig. 4: Illustration of the full-screen problem: j-th capture only gets
the top half of the displayed challenge, while both (j +1)-st and (j +2)-
nd captures produce the entire image of the challenge.
3.1.2 Protocol Details. The residence checking scheme uses the
analog display-to-camera (D2C) channel, where the former is the
sender and the latter – the receiver. Success of the scheme hinges
on this channel’s analog transmission latency, as defined below.
Definition 3.1. Analog Transmission Latency (ATL) of the D2C
channel is the interval between (1) the time when the sender’s display
starts to render the image on the screen, and (2) the time when the
complete image is stored by the camera in the receiver’s memory.
Since both display and camera run at a constant rate, ATL of a
D2C channel is expected to be relatively constant, except for any
variance due to the D2C interval. Moreover, any analog relay in a
D2C channel significantly increases its ATL. The idea behind the
basic sight-based residence checking scheme is as follows:
TA (which is verified in the existence checking phase) asks Veri-
fier to display a challenge image. It then captures that image and
reports it along with measured raw latency. To compute ATL, Veri-
fier refines raw latency by removing time intervals which are within
raw latency, but not within ATL. For ease of presentation, we refer
to them as noise intervals. If the image is genuine and the refined
ATL is lower than the pre-defined threshold, Verifier asserts that
TA indeed resides on Dev. Details are shown in Protocol 2.
As shown, TA and Verifier communicate over the normal net-
work and the D2C channel. We use: network-send, network-receive,
camera-receive and display-send to denote two sets of communica-
tion primitives for the respective channel. While the first two are
standard network operations, the last two are elaborated below:
display-send To send an image, trusted software (e.g., TA in
Dev or the kernel on Verifier) writes it directly to the frame
buffer. The hardware automatically retrieves this data and
renders it on the screen. If trusted software runs in an un-
trusted device, it cordons off the frame buffer to prevent any
read access from the untrusted kernel.
camera-receive Trusted software responds to the camera’s
interrupt which signals the arrival of a new batch of image
blocks. It immediately copies buffer contents to its own pro-
tected buffer and reconstructs the image. A camera-receive
operation returns successfully if the received frame is a full-
screen image. If trusted software runs on an untrusted device
Residence Checking (∆max , P )
Before execution, Verifier generates a random picture P. TA in Dev is
prepared for camera-receive.
5. (Dev) TA in Dev reads its clock to get current time Ts , and network-
sends (Ts, σ1) to Verifier, where σ1 = Hk (Ts )
6. (Verifier) Challenge: It network-receives (Ts, σ1) and verifies in-
tegrity of Ts against σ1. It display-sends P and measures network
latency, τnet , as well as noise interval, δV .
7. (Dev) Response: After network-sending (Ts, Hk (Ts )), TA camera-
receives eP′. It reads the clock to get current time Te , and network-
sends (Te, P′, σ2) to Verifier, where σ2 = Hk (Te − Ts, P′).
8. (Verifier) Verification: After network-receiving (Te, P′, σ2), Verifier
performs the following steps:
(a) Verifies integrity of Te and P′ against σ2.
(b) If Te − Ts − δV − τnet < ∆max and P′ ≡ P, declares that
DRTM and TA reside on Dev. Otherwise, they reside on M.
Protocol 2: (Cont. from Protocol 1) Basic sight-based residence
checking protocol: ∆max = τdis + 2τcam. Notation P′ ≡ P means
that they are visually equal.
(e.g., Dev), it cordons off the camera buffer to prevent any
write access from the untrusted kernel.
Note that it is difficult to directly measure ATL because the start
and end involve two distinct devices. In our protocol, TA times
two events and obtains Te − Ts, which is the raw latency. All noise
intervals for Protocol 2 are in Verifier. They include network trans-
mission (τnet ) and time (δV ) between packet arrival and Verifier’s
display starting to render the image.
Maximum Latency with No Attack. Figure 5 illustrates time lapses
measured by raw latency (Te −Ts) in Protocol 2. The channel’s ATL
refers to the period between t1 and Te, as shown in Figure 5. It
Fig. 5: Sequence of events between Te and Ts . Dashed lines indicate
variable times, while solid lines denote constant times. t0, t1, t2, t3
denote events of: packet arrival at Verifier, image rendering start,
image displayed on screen, and image capture, respectively.
includes three intervals, all of which involve hardware operations:
t1 → t2: Time for Verifier’s screen to display the image. This de-
pends on the display frame rate. Let τdis denote the time to
render the entire screen, which is close to the inverse of the
refresh rate.
t2 → t3: D2C interval, at most τcam, which is the inverse of the
t3 → Te: Time for the camera to deliver the image frame to the
camera’s frame-per-second (fps) rate.
DMA buffer; its length is also τcam.
timeimage	capture	jimage	capture	j+1start	ofdisplayτdisτcamend	ofdisplayimage	capture	j+2τcamtimeimage	datawritten	to	memoryτcamTst0packet	arrivalimage	displayed	on	screent2camera	starting	capturingTet3packet	sentDevVerifierτdist1starting	renderingδVATLTherefore, ∆max = τdis + 2τcam is the longest possible ATL for
intact Dev in the basic sight-based residence checking protocol.
3.1.3
Security Analysis. We first show that a collusive and software-
only attack cannot pass presence attestation, and then analyze ana-
log attacks. In the analysis below, we ignore CPU time consumed by
code execution. Since no heavy computation is involved, the sum
of CPU time in both Verifier and Dev is two orders of magnitude
less than the time for analog operations.
Software-Only Attacks. Residing on Dev and M, the adversary is
represented by malware with no hardware assistance. This malware
controls the kernels of both Dev and M. If neither Dev nor M
launches genuine DRTM-s, the adversary cannot pass existence
attestation.
Suppose that the adversary launches DRTM and TA on M. The
cuckoo attack allows it to successfully pass the existence checking
phase. Since the resulting secret key k is securely held by TA, it is
infeasible for malware to access k. Note that TA reads the challenge
image directly from the camera’s DMA buffer which can only be