ment can get delayed if it is preceded by a long latency in-
struction (e.g., a cache missing load), which would afford
subsequent transient instructions a chance to execute.
We test the above hypothesis and ﬁnd it to be false, but
in the process, we discover that some x86 processors exhibit
conceptually similar behavior due to other reasons.7 Namely,
we ﬁnd that how x86 processors perform a branch mispre-
diction squash depends in some complex way on preceding
branches in the pipeline. Speciﬁcally, the squash performed
by a mispredicting branch B1 can get delayed if there is a
preceding branch B0 whose condition has not yet resolved.
Listing 9 shows the experiment. We test a gadget simi-
lar to the “supposedly NULL dereference” (§ 5.3.1) gadget.
We train the victim so that both branches are taken (*p==1,
m!=bad_m). We then invoke it so that both mispredict (*p==0,
m==bad_m), with p being ﬂushed from the cache, and test
whether m is dereferenced and its value s is leaked. Table 5
shows the results: a leak can occur on both Intel and AMD
processors, but its probability is minuscule on Intel proces-
sors. The small success probability and its dependence on the
exact instructions in the gadget indicate that the leak occurs
due some complex microarchitectural interaction.
Implications The fact that leaks can be realistically ob-
served (for perspective: on AMD processors, our experiment
observes ≈ 10 K leaks per minute) means that compiler-
introduced gadgets are a real risk. For any gadget instance,
7We did not test non-x86 processors.
int victim(int* p,
T *m,
T *bad_m,
char *A) {
if (*p == 1) {
if (m != bad_m) {
T s = *m;
A[s*0x1000];
}
return 5;
}
return 0;
}
# *p==1 ?
# jmp if *p==1
# deref *p (cache miss)
mov
mov
cmp
je
(%rdi),%edi
$0x0,%eax
$0x1,%edi
L2
L1:repz retq
L2:mov
cmp
je
movzbl (%rsi),%eax # s = *m
shl
cltq
add
movzbl (%rcx),%eax # leak s
mov
jmp
$0x5,%eax
%rdx,%rsi # m==bad_m ?
# jmp if m==bad_m
L1
$0xc,%eax
%rax,%rcx
$0x5,%eax
L1
(a) C code
(b) Emitted x86 code (T=char).
Listing 9: Evaluating processor branch misprediction squashes.
processor
AMD EPYC 7R32
AMD Opteron 6376
Intel Xeon Gold 6132 (Skylake)
Intel Xeon E5-4699 v4 (Broadwell)
Intel Xeon E7-4870 (Westmere)
leak probability
T=long
1/5000
1/5000
1/(1.36× 106)
1/(6.2× 109)
1/(2.75× 107)
T=char
1/105
1/105
1/(5.09× 107)
1/(3.64× 109)
1/(1.67× 109)
Table 5: x86 branch squash behavior (in 30 B trials).
the kernel’s ﬂow may be such that there are slow-to-resolve
branches preceding the gadget, and/or the attacker may be
able to slow down resolution of preceding branches by evict-
ing data from the cache.
6 Speculative polymorphic type confusion
Linux defends from indirect branch target misspeculation
attacks (Spectre-BTB) using retpolines [81]. A retpoline re-
places an indirect branch with a thunk that jumps to the correct
destination in a speculation-safe way, but incurs a signiﬁcant
slowdown [9]. Since the original Spectre-BTB attacks di-
verted execution to arbitrary locations, retpolines can appear
as an overly aggressive mitigation, as they block all branch
target speculation instead of restricting it to legal targets [9].
Accordingly, Linux is moving in the direction of replacing
certain retpoline call sites with thunks of conditional direct
calls to the call site’s most likely targets, plus a retpoline
fallback [24]. Listing 10 shows an example. JumpSwitches [9]
take the idea further, and propose to dynamically promote
indirect call sites into such thunks by learning probable targets
and patching the call site online.
In this section, we detail how this approach can create
speculative type confusion vulnerabilities (§ 6.1) and analyze
the prevalence of such issues in Linux (§ 6.2)
USENIX Association
30th USENIX Security Symposium    2409
# %rax = branch target
cmp $0xXXXXXXXX, %rax # target1?
jz $0xXXXXXXXX
cmp $0xYYYYYYYY, %rax # target2?
jz $0xYYYYYYYY
...
jmp ${fallback} # jmp to retpoline thunk
Listing 10: Conditional direct branches instead of indirect branch.
6.1 Virtual method speculative type confusion
It has been observed (in passing) that misprediction of an
indirect call’s target can lead to speculative type confusion in
object-oriented polymorphic code [18]. The problem occurs
when a branch’s valid but wrong target, f , is speculatively
invoked instead of the correct target, g. The reason that both f
and g are valid targets is that both implement some common
interface. Each function, however, expects some or all of its
arguments to be a different subtype of the types deﬁned by
the interface. As a result, when the misprediction causes f ’s
code to run with g’s arguments, f might derive a variable v of
type Tf from one of g’s arguments, which is really of type Tg.
Prior work [32, 56] describes how, if Tg is smaller than Tf ,
f might now perform an out-of-bounds access. We observe,
however, that the problem is more general. Even if both types
are of the same size, f might still dereference a ﬁeld in Tf
which now actually contains some user-controlled content
from a ﬁeld in Tg, and subsequently inadvertently leak the
read value. Moreover, the problem is transitive: f might deref-
erence a ﬁeld that is a pointer in both Tf and Tg, but points to
an object of a different type in each, and so on.
In the following sections, we analyze the prevalence of
potential polymorphism-related speculative type confusion is
Linux. Our analysis is forward looking: we explore all indirect
call sites, not only the ones that have already been converted
to conditional call-based thunks. Such a broad analysis helps
answering questions such as: How likely is it that manually
converting a call site (the current Linux approach) will create a
vulnerability? What are the security implications of adopting
an “all-in” scheme likes JumpSwitches?
6.2 Linux analysis
Linux makes heavy use of polymorphism and data inheri-
tance (subtype derivation) in implementing internal kernel
interfaces. (Linux code implements inheritance manually, due
to being in C, as explained below.) We perform a source-level
vulnerability analysis by extending the smatch static analysis
tool [20]. As in § 5, we do not claim that if our analysis ﬁnds
no vulnerabilities then none exist.
At a high-level, the analysis consists of four steps, detailed
below. (Listing 11 shows pseudo code.)
1 Find legal targets: For each structure type and each func-
tion pointer ﬁeld in that type, we build a set of legal targets
that this ﬁeld might point to.
# targets: a mapping from function pointer
# fields in types to their valid targets
# derivedObjs: a mapping from function
# arguments to possible private structs they
# derive
# 1 find call site target
for every assignment x.a = g where g is a function
and x is of type T
targets[T,a].add(g)
# 2 find derived_objects
for every g in targets, scan control-flow graph of g:
if i-th arg of g is used to derive struct of type T :
derivedObjs[g,i] = T
# 3 find all overlaps
overlaps = set()
for every T,a (cid:55)→ {g1, . . . ,gm} in targets:
for every pair (gi,g j):
for every gi,a (cid:55)→ Di in derivedObjs:
for every field fi of Di that is user-controllable:
D j = derivedObjs[g j,a]
let f j be the overlapping field in D j
overlaps.add((gi,Di, fi,g j,D j, f j)]
# 4 find potentially exploitable overlaps
for each (gi,Di, fi,g j,D j, f j) in overlaps:
scan control-flow graph of g j
if D j. f j is dereferenced:
let v be the data read from D j. f j
if v is used to index an array or v is dereferenced:
flag (((gggiii,,,DDDiii,,, fff iii,,,ggg jjj,,,DDD jjj,,, fff jjj)))
Listing 11: Finding potential speculative polymorph type confusion.
2 Identify subtype derivations: For each function g that
is a legal target of some call site, we attempt to identify the
arguments used to derive g-speciﬁc (subtype) objects. Since
Linux implements data inheritance manually, we scan for
the relevant patterns (illustrated in Listing 12): (1) a “private
data” ﬁeld in the parent structure points to the derived object
(Listing 12a); (2) the derived object is the ﬁrst ﬁeld in the
parent, and obtained by casting (Listing 12b); and (3) the
derived object is some ﬁeld in the parent, extracted using the
container_of macro (Listing 12c).
3 Find overlapping ﬁelds: This is a key step. For every
pair of functions that are legal targets of some call site, we
search for overlapping ﬁelds among the objects derived from
the same function argument. Two ﬁelds overlap if (1) their
(start,end) offset range in the respective object types intersect,
(2) one ﬁeld is user-controllable, and (3) the other ﬁeld, re-
ferred to as the target, is not user-controllable. We rely on
smatch to identify which ﬁelds are user-controllable, which is
done based on Linux’s __user annotation [80] and heuristics
for tracking untrusted data, such as network packets. An over-
lap where the target ﬁeld is a kernel pointer can potentially
lead to an attacker-controlled dereference.
4 Search for vulnerabilities: This steps takes a pair of
functions gi,g j identiﬁed as using derived objects with over-
lapping ﬁelds, and tries to ﬁnd if the overlaps are exploitable.
We run a control- and data-ﬂow analysis on g j, the function
2410    30th USENIX Security Symposium
USENIX Association
struct Common {
void* private;
};
struct Derived {...};
void foo(Common* c) {
Derived* d = c->private;
struct Common {...}
struct Derived {
struct Common common_data;
...
}
void foo(Common* c) {
Derived* d = (Derived*) c;
(a) Private ﬁeld.
(b) Casting.
struct Derived {
...
struct Common common;
...
}
void foo(Common* c) {
Derived* d = container_of(c, Derived*, common);
(c) Contained structs.
Listing 12: Linux data inheritance patterns.
using the object with the target ﬁeld, and check if that ﬁeld
is dereferenced. This process ﬁnds thousands of potential
attacker-controlled dereferences. To make manual veriﬁca-
tion of the results tractable, we try to detect if the value read
by the dereference gets leaked via a cache covert channel. We
consider two types of leaks: if some array index depends on
the value, and a “double dereference” pattern, in which the
value is a pointer that is itself dereferenced. The latter pattern
can be used to leak the L1-indexing bits of the value.
6.3 Analysis results
We analyze Linux v5.0-rc8 (default conﬁguration) and v5.4.11
(allyes conﬁguration). Table 6 summarizes the results.
While we ﬁnd thousands of potential attacker-controlled deref-
erences, most are double dereferences, which we do not con-
sider further. Manual inspection of the array indexing cases
reveals that they are latent vulnerabilities, which are not (or
likely not) exploitable, but could become exploitable by acci-
dent:
• Most cases let the attacker control < 64 bits of the target
pointer, with which it cannot represent a kernel pointer (e.g.,
attacker controls a 64-bit ﬁeld in its structure, but it only
overlaps the target ﬁeld over one byte). A change in struc-
ture layout or ﬁeld size could make these cases exploitable.
• In other cases, the attacker does not have full control over
its ﬁeld (e.g., it is a ﬂag set by userspace that can only take
on a limited set of values). § 6.4 shows an example of such
a case. A change in the semantics of the ﬁeld could render
these cases exploitable.
• Some cases are false positives due to imprecision of the
analysis (e.g., a value read and used as an array index is
masked, losing most of the information).
# ﬂagged
double deref
array indexing
array indexing exploitable?
no: <<< 666444 bit overlap
no: limited control
no: other
no(?): speculation window
5.0-rc8 (def.)
2706
2578
128