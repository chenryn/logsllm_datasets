    如果API端点可以访问外部URL，则可能容易受到SSRF攻击，因此应检查其对内部URL的访问是否受限。在API中也可能会出现竞争条件。如果您可以使用API端点访问受竞争条件影响的应用程序功能，则这些端点可以成为触发竞争条件的替代方式。
    Other vulnerabilities, like path traversal, file inclusion, insecure deserialization issues, XXE, and XSS can also happen. If an API endpoint returns internal resources via a filepath, attackers might use that endpoint to read sensitive files stored on the server. If an API endpoint used for file uploads
    doesn’t limit the data type that users can upload, attackers might upload malicious files, such as web shells or other malware, to the server. APIs also commonly accept user input in serialized formats such as XML. In this case, insecure deserialization or XXEs can happen. RCEs via file upload or XXEs are commonly seen in API endpoints. Finally, if an API’s URL parameters are reflected in the response, attackers can use that API endpoint to trigger reflected XSS on victims’ browsers.
    其他漏洞，如路径遍历、文件包含、不安全的反序列化问题、XXE 和 XSS 也可能发生。 如果 API 端点通过文件路径返回内部资源，则攻击者可能利用该端点读取存储在服务器上的敏感文件。 如果用于文件上传的 API 端点不限制用户可以上传的数据类型，则攻击者可能上传恶意文件（如 Web Shell 或其他恶意软件）到服务器。 API 通常还接受以序列化格式（如 XML）的用户输入。 在这种情况下，可能会发生不安全的反序列化或 XXE。 RCE 通过文件上传或 XXE 常见于 API 端点。 最后，如果 API 的 URL 参数在响应中反映出来，攻击者可以利用该 API 端点在受害者的浏览器上触发反射型 XSS。
其他漏洞包括，路径遍历、文件包含、不安全的反序化、XXE 和 XSS 可能会出现。当API 端点返回文件路径的内部资源时，攻击者可能会利用该端点读取存储在服务器上的敏感文件。如果用户在用于文件上传的API端点没有限制上传的数据类型，攻击者可能会上传恶意文件，例如Web Shell或其他恶意软件，到服务器。API还通常以序列化格式接受用户输入，如XML。在这种情况下，可能会发生不安全的反序列化或XXE。通过文件上传或XXE实现远程代码执行(RCE) 在API端点中很常见。最后，如果API的URL参数在响应中反映出来，攻击者可以利用该API端点，在受害者的浏览器上触发反射型XSS。
    The process of testing for these issues will be similar to testing for them in a regular web app. You’ll simply supply the payloads to the application in API form.
    测试这些问题的过程将与在常规Web应用程序中测试它们的过程类似。您只需以API形式向应用程序提供有效负载即可。
    For example, for vulnerabilities like path traversals and file-inclusion attacks, look out for absolute and relative filepaths in API endpoints and try to mess with the path parameters. If an API endpoint accepts XML input, try to insert an XXE payload into the request. And if the endpoint’s URL parameters are reflected in the response, see if you can trigger a reflected XSS by placing a payload in the URL.
    例如，对于路径遍历和文件包含攻击等漏洞，要注意API端点中的绝对路径和相对路径，并尝试对路径参数进行干扰。如果API端点接受XML输入，请尝试在请求中插入XXE有效载荷。如果端点的URL参数在响应中反映出来，请尝试将有效载荷放在URL中触发反射型XSS攻击。
    You can also utilize fuzz-testing techniques, which we’ll discuss in
     Chapter 25
    , to find these vulnerabilities.
    你也可以利用第25章将会介绍的“模糊测试”技术来发现这些漏洞。
    Applications are becoming increasingly reliant on APIs, even as APIs aren’t always as well protected as their web application counterparts. Pay attention to the APIs used by your targets, and you might find issues not present in the main application. If you are interested in learning more about hacking APIs and web applications in general, the OWASP Web Security Testing Guide (
     https://github.com/OWASP/wstg/
    ) is a great resource to learn from.
    应用程序越来越依赖API，即使API并不总是像它们的Web应用程序对应物那样受到良好的保护。关注目标使用的API，您可能会发现主应用程序中不存在的问题。如果您对学习API和Web应用程序的黑客技术感兴趣，OWASP Web安全测试指南（https://github.com/OWASP/wstg/）是一个很好的学习资源。
25
      Automatic Vulnerability Discovery Using Fuzzers
    Whenever I approach a new target, I prefer to search for bugs manually. Manual testing is great for discovering new and unexpected attack vectors. It can also help you learn new security concepts in depth. But manual testing also takes a lot of time and effort, so as with automating reconnaissance, you should strive to automate at least part of the process of finding bugs. Automated testing can help you tease out a large number of bugs within a short time frame.
    每当我接近一个新目标时，我更喜欢手动搜索漏洞。手动测试非常适用于发现新的和意想不到的攻击向量。它也可以帮助你深入学习新的安全概念。但手动测试也需要大量的时间和精力，所以与自动化侦察一样，你应该努力自动化至少部分查找漏洞的过程。自动化测试可以帮助你在短时间内找出大量的漏洞。
    In fact, the best-performing bug bounty hunters automate most of their hacking process. They automate their recon, and write programs that constantly look for vulnerabilities on the targets of their choice. Whenever their tools notify them of a potential vulnerability, they immediately verify and report it.
    实际上，表现最佳的赏金猎人会自动化他们的绝大部分黑客过程。他们自动化侦查，并编写程序，不断搜索他们选择的目标的漏洞。每当他们的工具通知他们存在潜在漏洞时，他们立即验证并报告。
    Bugs discovered through an automation technique called
     fuzzing
    , or
     fuzz testing
    , now account for a majority of new CVE entries. While often associated with the development of binary exploits, fuzzing can also be used for discovering vulnerabilities in web applications. In this chapter, we’ll talk a bit about fuzzing web applications by using two tools, Burp intruder and Wfuzz, and about what it can help you achieve.
    利用称为模糊测试或Fuzzing的自动化技术发现的漏洞现在占新CVE条目的大部分。虽然通常与开发二进制漏洞有关，但Fuzzing也可用于发现Web应用程序中的漏洞。在本章中，我们将介绍使用两个工具Burp Intruder和Wfuzz来对Web应用程序进行Fuzzing的相关知识，以及它可以帮助您实现什么。
    What Is Fuzzing?
     Fuzzing
    is the process of sending a wide range of invalid and unexpected data to an application and monitoring the application for exceptions. Sometimes hackers craft this invalid data for a specific purpose; other times, they generate it randomly or by using algorithms. In both cases, the goal is to induce unexpected behavior, like crashes, and then check if the error leads to an exploitable bug. Fuzzing is particularly useful for exposing bugs like memory leaks, control flow issues, and race conditions. For example, you can fuzz compiled binaries for vulnerabilities by using tools like the American Fuzzy Lop, or AFL (
     https://github.com/google/AFL/
    ).
    模糊测试是通过向应用程序发送大量无效和意外的数据，并监视异常情况的过程。有时黑客会为特定目的创建此无效数据; 在其他情况下，他们会随机生成或使用算法生成它。在两种情况下，目标都是诱导意外行为，如崩溃，然后检查错误是否导致可利用的漏洞。模糊测试特别有用于暴露诸如内存泄漏，控制流问题和竞争条件等bug。例如，您可以使用类似美国Fuzzy Lop的工具（https://github.com/google/AFL/）对编译后的二进制文件进行漏洞扫描。
    There are many kinds of fuzzing, each optimized for testing a specific type of issue in an application.
     Web application fuzzing
    is a technique that attempts to expose common web vulnerabilities, like injection issues, XSS, and authentication bypass.
    有许多种模糊测试方法，每种方法都针对特定类型的应用问题进行了优化。Web 应用模糊测试是一种试图暴露常见 Web 漏洞的技术，例如注入问题、XSS 和认证绕过。
    How a Web Fuzzer Works
    Web fuzzers automatically generate malicious requests by inserting the payloads of common vulnerabilities into web application injection points. They then fire off these requests and keep track of the server’s responses.
    Web模糊器通过将常见漏洞的有效载荷插入到Web应用程序的注入点中自动生成恶意请求。然后它们发送这些请求并跟踪服务器的响应。
    To better understand this process, let’s take a look at how the open source web application fuzzer Wfuzz (
     https://github.com/xmendez/wfuzz/
    ) works. When provided with a wordlist and an endpoint, Wfuzz replaces all locations marked
     FUZZ
    with strings from the wordlist. For example, the following Wfuzz command will replace the instance of
     FUZZ
    inside the URL with every string in the
     common_paths.txt
    wordlist:
    为了更好地理解这个过程，让我们来看看开源Web应用fuzzer Wfuzz（https://github.com/xmendez/wfuzz/）是如何工作的。当提供一个字典和一个端点时，Wfuzz会将所有标记为FUZZ的位置替换为来自字典的字符串。例如，下面的Wfuzz命令将使用common_paths.txt字典中的每个字符串来替换URL中的FUZZ实例：
$ wfuzz -w common_paths.txt http://example.com/FUZZ
    You should provide a different wordlist for each type of vulnerability you scan for. For instance, you can make the fuzzer behave like a directory enumerator by supplying it with a wordlist of common filepaths. As a result, Wfuzz will generate requests that enumerate the paths on
     example.com
    :
    你应该为每种漏洞扫描提供不同的字典。例如，你可以通过提供一个包含常见文件路径的字典，让模糊测试器变成目录枚举器。结果，Wfuzz将生成一个对example.com上路径进行枚举的请求：
http://example.com/admin
http://example.com/admin.php
http://example.com/cgi-bin
http://example.com/secure
http://example.com/authorize.php
http://example.com/cron.php
http://example.com/administrator
    You can also make the fuzzer act like an IDOR scanner by providing it with potential ID values:
    你还可以让模糊器像一个 IDOR 扫描器一样，通过提供潜在的 ID 值来进行扫描：
$ wfuzz -w ids.txt http://example.com/view_inbox?user_id=FUZZ
    Say that
     ids.txt
    is a list of numeric IDs. If
     example.com/view_inbox
    is the endpoint used to access different users’ email inboxes, this command will cause Wfuzz to generate a series of requests that try to access other users’ inboxes, such as the following:
    假设ids.txt是一个数字ID列表。如果example.com/view_inbox是用于访问不同用户电子邮箱收件箱的端点，那么此命令将导致Wfuzz生成一系列尝试访问其他用户收件箱的请求，如下所示：
http://example.com/view_inbox?user_id=1
http://example.com/view_inbox?user_id=2
http://example.com/view_inbox?user_id=3
    Once you receive the server’s responses, you can analyze them to see if there really is a file in that particular path, or if you can access the email inbox of another user. As you can see, unlike vulnerability scanners, fuzzers are quite flexible in the vulnerabilities they test for. You can customize them to their fullest extent by specifying different payloads and injection points.
    一旦你收到了服务器的响应，你可以分析它们，看看那个路径上是否真的有一个文件，或者你是否可以访问另一个用户的电子邮箱。正如你所看到的，与漏洞扫描器不同的是，模糊测试工具在它们测试的漏洞方面非常灵活。你可以通过指定不同的负载和注入点来最大程度地定制它们。
    The Fuzzing Process
    Now let’s go through the steps that you can take to integrate fuzzing into your hacking process! When you approach a target, how do you start fuzzing it? The process of fuzzing an application can be broken into four steps. You can start by determining the endpoints you can fuzz within an application. Then, decide on the payload list and start fuzzing. Finally, monitor the results of your fuzzer and look for anomalies.
    现在让我们走过这些步骤，将模糊测试集成到您的黑客过程中！当您接近一个目标时，您如何开始进行模糊测试？模糊测试应用程序的过程可以分为四个步骤。您可以首先确定可以在应用程序中进行模糊测试的端点。然后，决定有效数据列表并开始模糊测试。最后，监视您的模糊测试器的结果并寻找异常情况。
    Step 1: Determine the Data Injection Points
    The first thing to do when fuzzing a web application is to identify the ways a user can provide input to the application. What are the endpoints that take user input? What are the parameters used? What headers does the application use? You can think of these parameters and headers as
     data injection points
    or
     data entry points
    , since these are the locations at which an attacker can inject data into an application.
    模糊测试Web应用程序的第一步是识别用户可以提供输入的方式。哪些端点需要用户输入？使用了哪些参数？应用程序使用了哪些标头？您可以将这些参数和标头视为数据注入点或数据输入点，因为这些是攻击者可以向应用程序注入数据的位置。
    By now, you should already have an intuition of which vulnerabilities you should look for on various user input opportunities. For example, when you see a numeric ID, you should test for IDOR, and when you see a search bar, you should test for reflected XSS. Classify the data injection points you’ve found on the target according to the vulnerabilities they are prone to:
    现在，您应该已经有了哪些漏洞应该在各种用户输入机会上寻找的直觉。例如，当您看到数字ID时，您应该测试IDOR，当您看到搜索栏时，您应该测试反射型XSS。根据它们容易受到的漏洞，对您在目标上找到的数据注入点进行分类：
     Data entry points to test for IDORs
    数据输入点用于测试IDORs。
GET /email_inbox?user_id=FUZZ
Host: example.com
POST /delete_user
Host: example.com
(POST request parameter)
user_id=FUZZ
     Data entry points to test for XSS
    数据输入点以测试XSS
GET /search?q=FUZZ
Host: example.com
POST /send_email
Host: example.com
(POST request parameter)
user_id=abc&title=FUZZ&body=FUZZ
    Step 2: Decide on the Payload List
    After you’ve identified the data injection points and the vulnerabilities that you might be able to exploit with each one, determine what data to feed to each injection point. You should fuzz each injection point with common payloads of the most likely vulnerabilities. Feeding XSS payloads and SQL injection payloads into most data entry points is also worthwhile.
    在确定数据注入点和每个注入点可能利用的漏洞后，确定向每个注入点提供什么数据。您应该使用最可能的漏洞的常见有效载荷对每个注入点进行模糊测试。在大多数数据输入点中提供XSS有效载荷和SQL注入有效载荷也值得尝试。
    Using a good payload list is essential to finding vulnerabilities with fuzzers. I recommend downloading SecLists by Daniel Miessler (
     https://github.com/danielmiessler/SecLists/
    ) and Big List of Naughty Strings by Max Woolf (
     https://github.com/minimaxir/big-list-of-naughty-strings/
    ) for a pretty comprehensive payload list useful for fuzzing web applications. Among other features, these lists include payloads for the most common web vulnerabilities, such as XXS, SQL injection, and XXE. Another good wordlist database for both enumeration and vulnerability fuzzing is FuzzDB (
     https://github.com/fuzzdb-project/fuzzdb/
    ).
    使用有效的负载列表是使用模糊测试发现漏洞的关键。我建议下载Daniel Miessler的SecLists （https://github.com/danielmiessler/SecLists/）和Max Woolf的Naughty Strings大列表 （https://github.com/minimaxir/big-list-of-naughty-strings/）进行比较全面的负载列表，这对于模糊测试Web应用程序非常有用。除了其他功能外，这些列表还包括最常见的Web漏洞的负载，如XXS，SQL注入和XXE。另一个用于枚举和漏洞模糊测试的好字典数据库是FuzzDB（https://github.com/fuzzdb-project/fuzzdb/）。
    Besides using known payloads, you might try generating payloads randomly. In particular, create extremely long payloads, payloads that contain odd characters of various encodings, and payloads that contain certain special characters, like the newline character, the line-feed character, and more. By feeding the application garbage data like this, you might be able to detect unexpected behavior and discover new classes of vulnerabilities!
    除了使用已知的载荷，你可以尝试随机生成载荷。特别是，创建极长的载荷，载荷包含各种编码的奇怪字符和包含特定特殊字符，如换行符、Line Feed符等。通过像这样提供垃圾数据给应用程序，您可能能够检测到意外的行为并发现新的漏洞类别！
    You can use bash scripts, which you learned about in
     Chapter 5
    , to automate the generation of random payloads. How would you generate a string of a random length that includes specific special characters? Hint: you can use a
     for
    loop or the file
     /dev/random
    on Unix systems.
    你可以使用在第五章学习的 Bash 脚本来自动化生成随机载荷。你怎样能够生成一个包含特定特殊字符的随机长度字符串？提示：你可以使用 for 循环或 Unix 系统上的 /dev/random 文件。
    Step 3: Fuzz
    Next, systematically feed your payload list to the data entry points of the application. There are several ways of doing this, depending on your needs and programming skills. The simplest way to automate fuzzing is to use the Burp intruder (
     Figure 25-1
    ). The intruder offers a fuzzer with a graphical
    user interface (GUI) that seamlessly integrates with your Burp proxy. Whenever you encounter a request you’d like to fuzz, you can right-click it and choose
     Send to Intruder
    .
    接下来，按照系统化的方式，将有效负载列表输入到应用程序的数据录入点。根据您的需求和编程技能，有多种方法可供选择。自动化模糊测试最简单的方法是使用Burp接收器（图25-1）。该接收器提供了一个带有图形用户界面（GUI）的模糊测试器，可与您的Burp代理无缝集成。每当您遇到想要模糊的请求时，可以右键单击它并选择发送到接收器。
    In the Intruder tab, you can configure your fuzzer settings, select your data injection points and payload list, and start fuzzing. To add a part of the request as a data injection point, highlight the portion of the request and click
     Add
    on the right side of the window.
    在侵入者选项卡中，您可以配置您的 Fuzzer 设置，选择您的数据注入点和有效载荷列表，然后开始 Fuzzing。要将请求的一部分添加为数据注入点，请突出显示请求的部分，然后单击窗口右侧的添加按钮。
       Figure 25-1
      : The Burp intruder payload position selection
      图25-1：Burp Intruder负载位置选择
    Then either select a predefined list of payloads or generate payload lists in the Payloads tab (
     Figure 25-2
    ). For example, you could generate list of numbers or randomly generated alphanumeric strings.
    然后在有效载荷选项卡（图25-2）中选择预定义的有效载荷列表或生成有效载荷列表。例如，您可以生成数字列表或随机生成的字母数字字符串。
       Figure 25-2
      : Selecting the payload list in Burp intruder
      图25-2：在Burp Intruder中选择有效载荷列表。
    Burp intruder is easy to use, but it has a downside: the free version of Burp limits the fuzzer’s functionality, and time-throttles its attacks, meaning that it slows your fuzzing and limits the number of requests you can send over a certain period of time. You’ll be able to send only a certain number of requests per minute, making the intruder a lot less efficient than a non-time-throttled fuzzer. Unless you need a GUI or have the professional
    version of Burp, you’re better off using an open source fuzzer like OWASP ZAP’s fuzzer or Wfuzz. You’ll learn how to fuzz a target with Wfuzz in
     “Fuzzing with Wfuzz” later on this page
    .
    Burp Intruder易于使用，但它有一个缺点：Burp的免费版本限制了模糊测试器的功能，并通过限制时间来限制其攻击性，这意味着它会减慢您的模糊测试效率并限制您可以在一定时间内发送的请求数量。您每分钟只能发送一定数量的请求，使得Burp Intruder比非时间限制的模糊测试器更不有效率。除非您需要图形用户界面或拥有Burp的专业版本，否则最好使用开源模糊测试器，如OWASP ZAP的模糊测试器或Wfuzz。您将在本页“使用Wfuzz进行模糊测试”中学习如何使用Wfuzz进行模糊测试。
    Note that sometimes throttling your fuzzers will be necessary to prevent disruption to the application’s operations. This shouldn’t be an issue for bigger companies, but you could accidentally launch a DoS attack on smaller companies without scaling architectures if you fuzz their applications without time throttling. Always use caution and obtain permission from the company when conducting fuzz testing!
    请注意，有时候你需要限制你的fuzzers的速度，防止影响应用程序的运行。对于大型公司来说，这不应该是问题，但是如果你在没有时间限制的情况下对小型公司的应用程序进行fuzz测试，你可能会意外地发起DoS攻击。在进行fuzz测试时，始终要使用谨慎并获取公司的许可！
    Step 4: Monitor the Results
    Analyze the results your fuzzer returned, looking for patterns and anomalies in the server responses. What to look for depends on the payload set you used and the vulnerability you’re hoping to find. For example, when you’re using a fuzzer to find filepaths, status codes are a good indicator of whether a file is present. If the returned status code for a pathname is in the 200 range, you might have discovered a valid path. If the status code is 404, on the other hand, the filepath probably isn’t valid.
    分析您的 fuzzer 返回的结果，查找服务器响应中的模式和异常。要查找什么取决于您使用的有效载荷集和要查找的漏洞。例如，当您使用 fuzzer 查找文件路径时，状态码是一个好的指标，可以判断文件是否存在。如果路径名的返回状态码在200范围内，可能发现了有效路径。另一方面，如果状态码为404，则该文件路径可能无效。
    When fuzzing for SQL injection, you might want to look for a change in response content length or time. If the returned content for a certain payload is longer than that of other payloads, it might indicate that your payload was able to influence the database’s operation and change what it returned. On the other hand, if you’re using a payload list that induces time delays in an application, check whether any of the payloads make the server respond more slowly than average. Use the knowledge you learned in this book to identify key indicators that a vulnerability is present.
    在进行 SQL 注入技术时，您可能需要关注响应内容长度或时间的变化。如果某个有效载荷的返回内容比其他有效载荷更长，那么它可能表明您的有效载荷已经影响了数据库的操作并改变其返回内容。另一方面，如果您使用的有效载荷列表会在应用程序中引入时间延迟，请检查是否有任何有效载荷使服务器的响应比平均响应更慢。利用本书的知识来识别存在漏洞的关键指标。
    Fuzzing with Wfuzz
    Now that you understand the general approach to take, let’s walk through a hands-on example using Wfuzz, which you can install by using this command:
    现在您已经了解了通用的方法，让我们通过使用Wfuzz的实际示例来进一步讲解一下。您可以使用以下命令来安装它：
$ pip install wfuzz
    Fuzzing is useful in both the recon phase and the hunting phase: you can use fuzzing to enumerate filepaths, brute-force authentication, test for common web vulnerabilities, and more.
    模糊测试在侦查和打猎阶段都非常有用：您可以使用模糊测试枚举文件路径、暴力破解身份验证、测试常见的Web漏洞等。
    Path Enumeration
    During the recon stage, try using Wfuzz to enumerate filepaths on a server. Here’s a command you can use to enumerate filepaths on
     example.com
    :
    在侦察阶段，可以尝试使用Wfuzz枚举服务器上的文件路径。以下是一个在example.com上枚举文件路径的命令示例：
$ wfuzz -w wordlist.txt -f output.txt --hc 404 --follow http://example.com/FUZZ
    The
     -w
    flag option specifies the wordlist to use for enumeration. In this case, you should pick a good path enumeration wordlist designed for the technology used by your target. The
     -f
    flag specifies the output file location. Here, we store our results into a file named
     output.txt
    in the current directory. The
     --hc 404
    option tells Wfuzz to exclude any response that has a 404 status code. Remember that this code stands for File Not Found. With this filter, we can easily drop URLs that don’t point to a valid file or directory from the results list. The
     --follow
    flag tells Wfuzz to follow all HTTP redirections so that our result shows the URL’s actual destination.
    -w选项标志指定用于枚举的字典。在这种情况下，您应该选择一个针对目标使用技术设计的好的路径枚举字典。-f标志指定输出文件位置。在这里，我们将结果存储在当前目录下名为output.txt的文件中。--hc 404选项告诉Wfuzz排除任何具有404状态代码的响应。记住，这个代码代表“文件未找到”。通过这个过滤器，我们可以轻松地在结果列表中删除不指向有效文件或目录的URL。--follow标志告诉Wfuzz跟随所有HTTP重定向，以便我们的结果显示URL的实际目的地。
    Let’s run the command using a simple wordlist to see what we can find on
     facebook.com
    . For our purposes, let’s use a wordlist comprising just four words, called
     wordlist.txt
    :
    让我们使用简单的字词表运行命令，看看在facebook.com上能找到什么。为了我们的目的，让我们使用一个仅包含四个单词的字词表，名为wordlist.txt：
authorize.php
cron.php