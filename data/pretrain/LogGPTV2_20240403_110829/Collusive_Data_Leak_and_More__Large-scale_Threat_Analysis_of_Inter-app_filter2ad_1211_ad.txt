times
The MainActivity
sender
The
locations where
organizes
photos were
around
the world.
MimeType
that
via
an
(ac-
=
implicit
intent
via
an
implicit
intent
sends
it
prayer
sends
(i.e.,
app
the
We found 1,540 receiver apps that can possibly accept this intent.
Among those possible receivers, 32 apps and the resulting inter-
app ICCs exhibit both collusive data leak and privilege escalation
behaviors (Type IV), 839 apps and the resulting ICCs exhibit only
privilege escalations (Type V), and 7 apps and the resulting ICCs
exhibit only collusive behaviors (Type VI).
For example, br.com.coderev.acumapa, which provides
an acupuncture map overlaid on the image captured by the camera,
can receive this intent and write the retrieved location information to
a ﬁle (Type IV). do.adoubleu.toy, which is an integrated diary
and messenger app without access to user’s location, can accept this
intent (Type V). com.du.android, which is a to-do list manage-
ment app with access to user’s location, can accept this intent, extract
location information sent via android.intent.extra.TEXT,
and leak it to a log (Type VI).
It is extremely challenging for us to infer the true intentions
behind these implicit-intent based collusive data leak or privilege
escalation behaviors. Is the developer’s intention malicious (e.g., for
deliberately evading detection or stealing sensitive data) or benign
(e.g., due to poor programming practices)? We further discuss the
security implications in Section 5.
4.4 Statistics on ICC Exit and Entry Leaks
For Dataset III, the number of sender apps with ICC exit leaks
is an order of magnitude fewer than the number of receiver apps
with ICC entry leaks. Speciﬁcally, DIALDroid identiﬁed a total of
30,453 ICC exit leaks that are caused by 3,372 sender apps (3.06%
of the total apps). DIALDroid identiﬁed a total of 249,263 ICC
entry leaks that are caused by 32,855 receiver apps (29.82% of the
total apps).
Out of the 3,372 sender apps with ICC exit leaks, 1,792 of them
(≈ 1.62% of total apps) initiate sensitive ICC channels (more in-
formation in Section 4.5). Although it does not necessarily mean
that the remaining apps are threat-free, as they may communicate
with apps outside of our dataset, the number of problematic sender
apps is somewhat surprisingly small. However, because of the use
of implicit intents in the inter-app ICCs, these 1,792 sender apps
generate millions of ICC links (presented in Section 4.5).
Figure 1 in the appendix shows the percentages of leaking apps
out of each app category. For Google Play apps, Personalization has
the highest percentage of apps with ICC exit leaks (in sender apps),
which is only slightly lower than the Virus Share category. For ICC
entry leaks in receiver apps, the percentages are rather high across
all the Google Play app categories, with Photography and Business
being the highest.
4.5 Statistics on Sensitive ICCs
For Dataset III, DIALDroid found 5,715,046 (≈ 5.7 million)
potentially sensitive ICC channels. Most of the (≈ 99.6%) sensi-
tive ICC channels are inter-app, and the rest are intra-app. These
sensitive ICC channels originate from only 1,792 apps.
Table 4 shows how the sender apps involved in sensitive ICC
channels or collusive data leaks are distributed across different app
categories for Dataset III. Intuitively, this table summarizes the
problematic sender apps and their categories. We highlight the
categories with at least one percentage over 7%.
For Google Play apps, Transportation (11.18%) and Travel &
Local (9.05%) apps initiate the most sensitive ICC channels, which
is most likely due to passing the user’s location information to
another app. In contrast, this category has a relatively low percentage
of collusive data leak cases, which indicates the location or other
sensitive information being passed is likely consumed by the receiver
app, as opposed to being leaked via disk output or network output.
Personalization and entertainment categories have high percentages
of problematic sender apps for both types of inter-app ICC threats.
In comparison, sender apps from Virus Share are involved in
a substantially higher number of detected sensitive ICC channels
Table 4: The distribution of sensitive ICC channels and collusive
data leaks among app categories for Dataset III. An app may have
multiple sensitive ICC channels.
%
collusive
Category
Books & Reference
Business
Comics
Communication
Entertainment
Lifestyle
Medical
Personalization
Photography
Productivity
Shopping
Social
Sports
Tools
Transportation
Travel & Local
Virus Share
% of
total
Apps
7.40%
5.40%
1.87%
0.05%
7.43%
6.69%
1.64%
6.75%
7.30%
6.88%
5.75%
6.24%
6.40%
7.36%
5.74%
3.04%
9.03%
% sensitive
ICC
channels
(origin)
0.01%
0.00%
0.00%
0.05%
4.49%
0.03%
0.00%
17.09%
4.33%
0.01%
2.16%
3.23%
2.14%
2.66%
11.18%
9.05%
43.18 %
data
leaks
(origin)
0.00%
0.00%
0.00%
0.04%
8.97%
0.11%
0.00%
13.31%
6.35%
0.59%
1.57%
1.84%
4.41%
7.16%
3.29%
0.02%
52.33%
Table 5: Top permissions leaked via privilege escalation in Dataset
III.
# Cases
Permission
android.permission.ACCESS_FINE_LOCATION
1,155,301
android.permission.ACCESS_COARSE_LOCATION 1,163,769
android.permission.READ_PHONE_STATE
880,645
433,887
android.permission.ACCESS_WIFI_STATE
486
android.permission.ACCESS_NETWORK_STATE
153
android.permission.BLUETOOTH
Total:
3,634,241
and collusive data leaks, which is expected. Although they account
for 9.03% of the apps in Dataset III, 43.18% of the sensitive ICC
channels and 52.33% of the collusive data leaks are originated from
apps in Virus Share. The high percentage (52.33%) of collusive data
leaks originating from malware apps indicates that malware apps
actively seek and transfer sensitive information.
4.6 Permission and Method Distributions
Table 5 shows the number of different permissions leaked via all
privilege escalation scenarios for Dataset III. Recall that Dataset III
includes Google Play apps and apps from Virus Share. The results
suggest that user’s location, device information, and current cellular
network information are overwhelmingly more likely to be trans-
ferred to apps that do not have corresponding access permissions.
The permission ACCESS_NETWORK_STATE gives the app autho-
rization to access NetworkManager to monitor network connections,
which is useful for device ﬁngerprinting. Similarly, the permission
ACCESS_WIFI_STATE provides the access to WiﬁManager and
can be used for ﬁngerprinting.
Table 6 (ﬁrst two columns) shows the most common sen-
sitive source methods in collusive data leak cases in Dataset
III. Methods to uniquely identify a user (i.e., getDeviceId,
are
and
getConnectionInfob
the most common sources of
Other com-
mon sources include methods to retrieve a user’s location
getSubscriberId)
ICC leaks.
getLatitude,
getLastKnownLocation,
(i.e.,
and
getLongtitude). Similarly, Table 6 (last two columns) shows
the most common sensitive sink methods. SharedPreferences
and Log are the mostly used for collusive data leaks. Other APIs
are related to ﬁle, network, and SMS. In Section 5, we discuss how
relaxing sensitive source and sink deﬁnitions impacts the results.
Table 6: Top sensitive source and sink methods involved in collusive
data leaks in Dataset III.
%
49.0%
48.3%
1.1%
0.9%
0.7%
0.1%
0.03%
Sensitive Source
getDeviceId
getConnectionInfo
getSubscriberId
getLastKnownLocation
getLongitude
getLatitude
getSimSerialNumber
getLine1Number
getActiveNetworkInfo
getCountry
others
% Sensitive Sink
36.69% android.content.SharedPrefs
33.44% android.util.Log
4.36% java.io.OutputStream
4.32% java.net.URL
4.18% java.io.FileOutputStream
4.03% org.apache.http.HttpResponse
3.09% android.telephony.SmsManager
2.78%
2.10%
1.35%
3.65%
4.7 Unintended ICCs & Inaccurate Manifests
The main source of false positives in our detection is unintended
ICCs with mismatched data types. We randomly selected 10 app
pairs (4 of Type IV, 5 of Type V, and 1 of Type VI) and manually
investigated their decompiled source code. The pairs have distinct
receiver apps. We found 5 receiver apps overclaim the types of data
it can receive in their Manifest ﬁles. For those apps, the sensitive
intents pass our static action test, category test, and data test, which
are equivalent to Android’s runtime tests. However, the code in the
receiver app is not designed to process the sensitive incoming intent.
At runtime, the receiver app may crash or simply do nothing. For
example, for a pair with Threat Type IV, we found that the source
app com.americos.selfshot sends implicit intent with data
ﬁeld “android.intent.extra.TEXT" containing user’s device ID. How-
ever, the code in a matched receiver app qubecad.droidtocad
assumes the data ﬁeld in the incoming intents to be ﬁle paths. This
suggests that this inter-app ICC is not intended. Unintended ICCs
with mismatched data types may lead to false positives.
The fundamental reason for these false positives is loose or no
restrictions on incoming data in the receiver app’s Manifest ﬁle.
If the format of incoming data is not well speciﬁed, then Android
system is likely to assume the receiver app can receive all types of
data at runtime. Judging based on our manual analysis, such cases
are quite common. We discuss this issue further in Section 5.
4.8 Runtime on 110K Apps
For scalability evaluation, we measure how long DIALDroid-
takes to analyze our largest dataset, Dataset III with 110,150 apps.
We used four virtual machines, each with 4 processor-cores, 64GB
RAM, and 1 TB hard drive to analyze the apps. We stored the
results to a MySQL database hosted on a server with an eight-core
processor and 80GB RAM. The ICC Leak Calculator module of
DIALDroid computed all the sensitive ICC channels among the
110,150 apps in 82 minutes. This computation is fast, because al-
though the total number of ICC links is huge, the percentage of
sensitive ones is extremely low (about 0.57% as estimated by our
experiment. 15 Non-sensitive entries are not touched in the computa-
15 We ﬁrst computed all the possible ICC links originating from
1,000 randomly selected applications and obtained ≈ 21.8 mil-
lion ICC links originating from those 1,000 apps. Among those
≈ 21.8 million ICC links, only 124K (≈ 0.57%) ICC links were
sensitive, i.e., sensitive ICC channels as deﬁned in Section 2.
The rest of them do not carry sensitive data.
tion. Our relational database schema is efﬁcient and consumes only
6.3 GB space for storing the information for 110,150 apps.
DIALDroid was able to analyze more the 80% of the apps within
ﬁve minutes. The average analysis time per app was 3.45 minutes.
Figure 3 in the appendix shows the distribution of analysis time
for the applications. Adding the individual analysis time for each
app (i.e., as if all the apps were analyzed on a single machine),
DIALDroid took a total of 6,339.6 hours to analyze the 110,150 apps.
DIALDroid was able to complete 83.6% of the apps with a high
precision conﬁguration within ﬁve minutes (Section 3.2). For 10.7%
of the apps, DIALDroid timed out in high precise conﬁguration but
was able to analyze successfully within ﬁve minutes when retried
with a low precision conﬁguration (Section 3.2). For the remaining
5.7% of the apps, DIALDroid failed to complete the analysis within
the speciﬁed execution limit (20 minutes). Table 7 in the appendix
shows statistics of the apps and our program analysis.
New benchmark released. In order to validate the detected col-
lusion pairs and privilege escalations, we inspected the taint paths
reported by DIALDroid. We further validated the leaks through man-
ual inspections on the code. We converted the .apk ﬁles to .jar
ﬁles using the dex2jar 16 tool. We decompiled the .jar ﬁles to
Java source code using a Java decompiler17. We manually inspected
the source codes to verify leaks. Based on our manual veriﬁca-
tion, we have compiled a benchmark suite, DIALDroid-Bench18, to
test inter-app collusion. Currently, the suite contains 30 real-world
apps from the Google play. To our knowledge, this is the ﬁrst such
benchmark using real-world apps, as opposed to proof-of-concept
apps.
5. DISCUSSION AND LIMITATIONS
Unintentional leaks and escalations. Although the reported collu-
sive data leak and permission escalation cases may be unintentional
(e.g., due to insecure design or poor development practices), these
apps still pose threats to user’s sensitive data and device. Sev-
eral lessons can be learned by developers in order to prevent or
reduce such threats. ICC sender apps should avoid transferring
sensitive data through Activity or Service based implicit in-
tents. Permission checking is needed for Broadcast intent with
sensitive information. Whenever possible, explicit intents are pre-
ferred for communicating sensitive data between apps. For receiver
apps, enforcing strict restrictions for each entry point (e.g., add
pathPattern in intentFilter) reduces unintended and un-
expected ICCs.
Sensitive source and sink deﬁnitions. The choice of sensitive
source and sink impacts the number of reported ICC anomalies. A
smaller set of sensitive sources and sinks generates a smaller number
of alerts. For example, as shown in Table 6, android.util.Log
accounts for 48.3% of the sensitive sinks (in receiver apps) in the
detected ICC leaks. When excluding both Log and SharedPrefer-
ences from the sensitive sink list, our query returns a much reduced
number (15,109) of collusive ICC links.
Our sensitive sources and sinks deﬁnitions follow SuSi [31],
which includes Android logging and SharedPreferences. In the
latest Android OS, the logged information is visible only to the app
itself, which reduces its risk. However, advanced logging-based
exploits (e.g., LogCat and CatLog) are still possible. Thus, our
evaluation includes logging as a sensitive sink in our evaluation.
SharedPreferences are key-value pairs maintained by the Android
system. An app can read and write the value associated with the
16
17
18
https://github.com/pxb1988/dex2jar