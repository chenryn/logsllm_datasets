with such uncertainties are excluded from (cid:2)ngerprinting
checks. False negatives may result from distinct networks
or hosts with identical (cid:2)ngerprints. Using multiple (cid:2)nger-
prints and choosing discriminating properties such as host
uptime and physical device (cid:2)ngerprints [31] signi(cid:2)cantly
reduce the likelihood of such coincidences.
Intuitively, attackers can use two methods to evade de-
tection: faking the similar (cid:2)ngerprints and forwarding all
probing packets to victim networks. Faking network or
host properties is challenging given the use of diverse prop-
erties, especially if properties are host-speci(cid:2)c and vary
continuously, e.g., clock skew, uptime, and IP ID number,
or those associated with available resources such as band-
width, since faking more resources than available is chal-
lenging. Forwarding all packets to victim networks is also
infeasible. First, there is little incentive for attackers to
spend precious bandwidth for forwarding, as it may disrupt
their attack activities. Moreover, such forwarding can be
easily detected with traceroute-like tools, as it creates ab-
normal patterns in packets’ forwarding path. The abnormal
forwarding path can also be identi(cid:2)ed simply by comparing
its actual AS path with the path of pre(cid:2)xes from the same
origin AS with the same announced AS path but are unlikely
hijacked. According to our experiment where we randomly
choose and traceroute to a pair of pre(cid:2)xes with the same AS
paths from 3026 distinct ASes, we (cid:2)nd that 95.6% of pre(cid:2)x
pairs have matching AS forwarding paths. Hence, packet
forwarding will cause the attacker’s AS path to exhibit un-
usual deviation from the normal paths, thus making evasion
very dif(cid:2)cult to succeed.
As initial examples, below we discuss the use of host
OS, IP ID, TCP and ICMP timestamp based (cid:2)ngerprints.
Note that other (cid:2)ngerprinting techniques can be easily in-
corporated to improve the accuracy, e.g., bandwidth estima-
tion [24, 42, 34] and physical (cid:2)ngerprints [31, 19].
Host OS properties: Attackers are likely to use a dis-
similar OS or con(cid:2)gure the OS differently in terms of open
ports compared to legitimate users of the network. Even if
the host is con(cid:2)gured in the same way, the IP addresses used
within the pre(cid:2)x may be different. Using popular remote
OS probing tools like Nmap [17, 16] and xprobe2 [49], such
host information can provide identifying (cid:2)ngerprints.
IP Identi(cid:2)er probing: IP header includes a 16 bit iden-
ti(cid:2)er (IP-ID) (cid:2)eld, designed to be unique for each IP data-
gram to help IP fragment reassembly. A common imple-
mentation is (cid:148)global(cid:148) IP ID, i.e., incrementing IP ID by
one for every outgoing packet, regardless of its destina-
tion. Similar to Bellovin’s work on using IP IDs to count
hosts behind NAT [7], we use them to verify whether two
machines are the same. We continuously send probe pack-
ets simultaneously to the same IP suspected to be hijacked
from two locations.
In the case of no hijacking, packets
reach the same machine. Because of the global incremen-
tal properties of most implementations, the IP IDs in reply
packets exhibit roughly alternating incrementing patterns.
If the address is hijacked, probe packets reach distinct ma-
chines, and IP ID in reply packets appear unrelated. Several
dif(cid:2)culties exist: Some implementations randomly set the
IP ID (cid:2)eld, reset it to 0, or set it to be uniquely increasing
for each destination.
TCP timestamp probing: The TCP timestamp option
speci(cid:2)ed by RFC 1323 [29], used for measuring round-
trip times, can give estimates of the time when the ma-
chine was last rebooted. TCP timestamp is set based on
a machine’s internal clock which is reset upon system re-
boot [31]. This clock runs at a certain frequency ranging
from 1Hz to 1000Hz. Knowing this frequency and the TCP
timestamp, we can infer the uptime. If the inferred uptime
obtained from different locations for the same IP is suf(cid:2)-
ciently diverse, a hijacking attack may have succeeded.
ICMP timestamp probing: Sending ICMP timestamp
requests to the target machine will solicit the ICMP times-
tamp replies containing the system time of the target ma-
chine reported in millisecond. Because not all the machines
connected to the Internet are synchronized with NTP, we
Routing updates monitored
Attack type
1. (Hijack pre(cid:2)x)
2. (Hijack pre(cid:2)x, AS)
3. (Hijack subnet pre(cid:2)x)
4. (Hijack subnet pre(cid:2)x, AS) New, nonsubMOAS pre(cid:2)xes
5. (Hijack a legitimate path)
Not triggered by updates
MOAS updates
All updates
SubMOAS updates
Detection techniques
Fingerprint-based consistency check (FP check)
Edge, geographic, and relationship (EGR) constraints, FP check
Customer-provider (C-P) check, re(cid:3)ect-scan
Edge, geographic, and relationship constraints, re(cid:3)ect-scan
Fingerprint-based consistency check
Table 1. Summary of detection techniques.
can expect two different machines likely to have noticeable
differences in their clock time.
Note that none of the above methods guarantees to dis-
tinguish two different machines, but their combination re-
duces false positives and negatives.
In what follows, we
discuss the techniques of detecting IP hijacking attacks for
each of (cid:2)rst four attack types summarized in Table 1.
4.2. Type 1: Detect preﬂx hijacking
This type of IP hijacking has the characteristic of MOAS
con(cid:3)icts as shown in Figure 1(c). The essence of our attack
detection is to check whether the pre(cid:2)x originated by mul-
tiple ASes has consistent data-plane signatures. To verify
this, we send probing packets to the same IP in the suspect
pre(cid:2)x and use the previously discussed (cid:2)ngerprint-based
consistency checks. The process is outlined here: 1) For
each pre(cid:2)x involved in MOAS con(cid:3)icts, (cid:2)nd its AS paths
from BGP data. 2) Find a live host in the pre(cid:2)x serving as
the probing target. 3) Select probe locations so that pack-
ets reach con(cid:3)icting origin ASes. 4) Perform probing using
techniques described in x4.1. 5) Analyze obtained (cid:2)nger-
prints to identify mismatches.
One challenge is to select probe locations such that probe
traf(cid:2)c reaches different origin ASes. We use the current
best AS paths from public BGP data to guide the selection.
For example, assume pre(cid:2)x P1 announced by both AS1
and AS2 has two AS paths reaching it: fAS5; AS3; AS1g
and fAS6; AS4; AS2g. Probe locations are chosen to be
as close to the origin AS as possible (cid:150) AS1 is preferred
over AS3. Traf(cid:2)c may not conform the expected AS paths,
because of inconsistency between the data and the control
plane or disagreeing AS paths within the same AS caused
by tie-breaking. Thus after selecting the probe locations, we
verify that traf(cid:2)c arrives at the intended AS. This is nontriv-
ial, as translating a router IP from traceroute to AS numbers
may result in multiple ASes [35]. Furthermore, traceroute
may not reach the destination. We use either of the fol-
lowing two criteria to ensure that packets with high prob-
ability reach the origin AS, e.g., AS1. 1) The traceroute
IP-level path contains a router whose IP address is origi-
nated by AS1 only. 2) The traceroute IP-level path contains
a router whose IP is originated by the nearest possible AS
before reaching AS1, e.g., AS3. In addition, AS3 should
not appear within the AS path originated by other con(cid:3)ict-
ing origin ASes for the pre(cid:2)x, e.g., AS2.
4.3. Type 2: Detect preﬂx and AS hijacking
We now address the second attack type shown in Fig-
ure 1(d) and described in x3.2. Attackers avoid MOAS and
subMOAS con(cid:3)icts by retaining the correct origin AS and
creating at least one fake AS edge. For example, attack-
ers append the correct origin AS after its own AS in the
AS path, creating a fake AS edge between its network and
the victim network. Thus the AS path is inconsistent with
the data plane. Our approach still relies on data-plane (cid:2)n-
gerprinting, but we enhance it by (cid:2)rst using the following
checks to reduce false positives, especially given that any
update may be a possible attack in this category. Unlike the
previous approach [33], our techniques are applicable inde-
pendent of the position of the fake edge within the AS path.
† Edge popularity constraint: We identify fake AS
edges by computing AS edge popularity.
If an AS
edge has never been observed in previous route an-
nouncements or few pre(cid:2)xes use routes traversing this
edge, it is highly suspicious.
† Geographic constraint: Similar to the above con-
straint, a fake AS edge can connect two geographically
distant networks. BGP peering sessions between two
ASes almost always occur between routers physically
colocated. Thus, an AS edge corresponding to two dis-
tant networks signals an alarm.
† Relationship constraint: Extending the path con-
straint in previous work [32], we identify obvious vi-
olations of routing policies within the AS paths using
inferred AS relationships [18].
We elaborate two improvements for the geographic con-
straint checking. First, rather than using data from reg-
istries such as whois, which provides only a single loca-
tion for each AS, we exploit more (cid:2)ne-grained pre(cid:2)x loca-
tions. Freedman et al. [14] showed that roughly 97% of all
pre(cid:2)xes announced by stub ASes were announced from the
same location. Second, we build up a location set for each
AS consisting of all distinct locations of its originated pre-
(cid:2)xes. The distance between ASes is the minimum distance
between every pair of locations in their sets.
increment by 1) and has little outgoing traf(cid:2)c. Later
we relax this requirement, but for ease of explanation,
let’s assume the host has no outgoing traf(cid:2)c.
4.4. Type 3: Detect preﬂx subnet hijacking
This attack shown in Figure 1(g), elaborated in x3.3, oc-
curs when the attacker hijacks a subnet of victim’s pre(cid:2)x
by announcing it as originating from its own AS, resulting
in a subMOAS con(cid:3)ict. This approach is more stealthy, as
it does not create obvious MOAS con(cid:3)icts and is also pre-
ferred by attackers as more networks will adopt the hijacked
route. Our detection scheme (cid:2)rst identi(cid:2)es subMOAS con-
(cid:3)icts and then excludes the cases directly involving ASes
with customer-provider relationships using the customer-
provider check explained below. Finally, we use (cid:2)ngerprint
checks to analyze the remaining cases.
The customer-provider check operates based on the as-
sumption that providers will not intentionally hijack cus-
tomer’s routes due to lack of economic incentives and the
ease of discovering such attacks through traceroute-like
probing. Similarly, customers are incapable of hijacking
provider’s routes because traf(cid:2)c needs to (cid:2)rst traverse the
provider, and providers can easily detect such routing an-
nouncements. Given this justi(cid:2)cation, we developed a sim-
ple yet very robust and accurate technique for inferring cus-
tomer provider relationships elaborated in the extended ver-
sion of this writing [25].
The customer-provider check does not deal with con-
(cid:3)icts involving ASes with non-customer-provider relation-
ship, e.g., Figure 1(g). Thus, we still need to resort to (cid:2)nger-
printing for the remaining cases, but the biggest challenge is
that the longest pre(cid:2)x match rule causes all traf(cid:2)c be routed
to more speci(cid:2)c hijacked pre(cid:2)x regardless of the probe loca-
tion unless we can (cid:2)nd the probe location inside the victim
AS, so that the (cid:2)ngerprinting packets will be routed using
IGP or the probe location is inside the customer or provider
of the victim AS that use static links to connect to the victim
AS and are thus unaffected by hijacking.
Given limited probe locations, neither condition is easily
satis(cid:2)ed. We devise a new probing technique called re(cid:3)ect-
scan for (cid:2)ngerprinting the victim network. Our method is
inspired by the TCP Idlescan technique [15] implemented
in Nmap [17]. The basic idea is to make use of predictable
IP ID increment in IP packet and IGP routing within the
victim AS which is unaffected by polluted BGP routes. We
use IP spoo(cid:2)ng to solicit traf(cid:2)c inside the victim AS. As an
example, let us assume a typical hijacking scenario where
AS1 has a large pre(cid:2)x P1, e.g., 195.6.0.0/16. AS2 is mali-
cious and hijacks subnet P2 of P1, e.g., 195.6.203.0/24. Our
probing technique works as follows (depicted in Figure 2):
1. Find a live host (H2 or H 0
2, e.g., 195.6.203.3) in the
hijacked pre(cid:2)x P2 with predictable IP ID values (e.g.,
2. Find a live host (H1, e.g., 195.6.216.26) with IP in P1
but not in P2. More generally H1 can be any live host
in any pre(cid:2)x except P2 originated by AS1.
3. Assume that due to hijacking, there exists a host H 0
2 in
attacker’s network AS2 and a host H2 in the victim’s
network AS1 with the same IP 195.6.203.3. Since
H1 and H2 are in the same AS, packets from H1 to
195.6.203.3 is routed using IGP, e.g., OSPF and reach
the correct host H2. In contrast, if probing packets are
sent from outside of AS1, they are routed using the
2 instead, since P2 is
polluted BGP routes and reach H 0
more speci(cid:2)c than P1.
4. Step 1-2: Send probe packets to 195.6.203.3 and
record its current IP ID value. Remember because our
probing comes from outside of AS1, in the case of hi-
jacking, traf(cid:2)c is routed to the potentially hijacked pre-
(cid:2)x and the IP ID value is that of attacker’s machine,
i.e., H 0
2.
5. Step 3-5: Send a SYN packet to an open port of
H1 (195.6.216.26) with a spoofed source IP of H2
(195.6.203.3). H1 should reply with SYN/ACK to
the spoofed source.
Because IP address of H1,
195.6.216.26 and 195.6.203.3 are inside the same AS,
the response should reach H2 in AS1. After receiving
this unsolicited SYN/ACK, H2 sends back a RST and
increases its IP ID value by one.
6. Step 6-7: Reprobe 195.6.203.3 and obtain the current
IP ID value of H2 or H 0
2 (depending on whether there
is a hijacking attack). If the IP ID value in the reply is
only increased by 1, it has not sent any packets. Very
likely it did not receive H1’s SYN/ACK packet (Fig-
ure 2(a)), indicating a possible hijacking attack.
As demonstrated by the Figure 2, the target host with IP
195.6.203.3 responds differently depending on whether the
subMOAS is caused by hijacking. If there is no hijacking,
the target host (in this case H2) receives reply SYN/ACK
packets from H1, causing its IP ID number to be incre-
mented by the number of spoofed packets received (Fig-
ure 2(b)). Otherwise, the IP ID value of the target host (H 0
2)
does not increase (Figure 2(a)). We now relax the restric-
tion that H2 needs to be idle to improve the robustness of
the re(cid:3)ect-scan test. In reality, during our probing, H2 may
also send out other packets not triggered by our probing.
To reduce false negatives, we repeat the test, send multiple
spoofed packets, and use information of average increase
rate of H2’s IP ID value to detect hijacking.
3. (cid:13)SYN to port 80(cid:13)
       Src IP: 195.6.203.3(cid:13)
Probing Machine(cid:13)
IP(cid:13) 1(cid:13)
2.(cid:13)  RST(cid:13)
      IP ID = 1234(cid:13)
7.(cid:13)RST(cid:13)
      IP ID = 1235(cid:13)
4.(cid:13)SYN/ACK(cid:13)
    Src IP: 195.6.216.26(cid:13)
  H(cid:13)1(cid:13)195.6.216.26(cid:13)
5.(cid:13)RST(cid:13)
     IP ID = 6789(cid:13)
H(cid:13)2(cid:13) 195.6.203.3(cid:13)
P(cid:13)1(cid:13) 195.6.0.0/16(cid:13)
Victim AS 1(cid:13)
a) Hijacking Attacks(cid:13)
H(cid:13)’(cid:13)2(cid:13) 195.6.203.3(cid:13)
P(cid:13)2(cid:13) 195.6.203.0/24(cid:13)
Attacker  AS 2(cid:13)
H(cid:13)1(cid:13) 195.6.216.26(cid:13)
P(cid:13)1(cid:13) 195.6.0.0/16(cid:13)
AS 1(cid:13)
1.(cid:13)SYN/ACK(cid:13)
     Src IP: IP(cid:13) 1(cid:13)