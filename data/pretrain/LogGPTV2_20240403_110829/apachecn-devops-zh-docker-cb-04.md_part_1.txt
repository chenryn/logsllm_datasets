# 四、容器的网络和数据管理
在本章中，我们将介绍以下食谱:
*   从外面进入容器
*   将容器连接到主机网络
*   启动没有网络的容器
*   与其他容器共享 IP 地址
*   创建用户定义的桥接网络
*   发现和负载平衡容器
*   使用卷保存数据
*   在主机和容器之间共享数据
# 介绍
到目前为止，我们一直使用单个容器，并在本地访问它。但是，随着我们转向更真实的用例，我们将需要从外部世界访问容器，共享容器内的外部存储，与运行在其他主机上的容器进行通信，等等。在本章中，我们将学习如何满足这些要求。让我们从了解 Docker 的默认网络设置开始，然后进入高级用例。
当 Docker 守护程序启动时，它会创建一个名为`docker0`的虚拟以太网桥。或许我们可以在运行 Docker 守护程序的系统上使用`ip addr`命令来收集更多关于`docker0`的信息:
![](img/6385dcf7-3c57-45ad-937d-dd9288987630.png)
我们可以看到，`docker0`有`172.17.0.1/16`的 IP 地址。Docker 从 RFC 1918 中定义的私有范围中随机选择一个地址和子网([https://tools.ietf.org/html/rfc1918](https://tools.ietf.org/html/rfc1918))。使用这个桥接接口，容器可以相互通信，也可以与主机系统通信。
默认情况下，每当 Docker 启动一个容器时，它都会在以太网接口上创建一对虚拟运行，然后对这对虚拟运行执行以下操作:
*   将`veth`对的一端连接到 Docker 主机中的`docker0`桥接口—让我们将这一端称为主机端
*   将`veth`对的另一端连接到新创建的容器作为其`eth0`接口—让我们将`veth`对的这一端称为容器端
让我们启动一个容器并检查它的网络接口 IP 地址:
![](img/014a0dc4-52f4-423c-b365-a526478b5ebc.png)
在前面的截图中，`veth`对的容器端被命名为`eth0@if17`，其中`17`是`veth`对的主机端的接口索引。我们可以使用该索引来识别 Docker 主机中`veth`对的主机端。容器的`eth0`被分配了 IP 地址`172.17.0.3`，该地址属于`docker0`子网，即`172.17.0.1/16`。
现在，让我们来看看第十七个索引的界面:
![](img/8833dc79-bc74-40e0-afb0-153ae2430ad6.png)
这里`veth`接口的主机端被命名为`vethe8b40b8@if16`，其中`16`是`veth`对的容器端的接口索引。由于索引`16`处的接口被分配给容器的网络名称空间，因此它不会显示在 Docker 主机中。Docker 引擎通过生成一个七位十六进制数自动生成主机端`veth`对的名称，然后将其附加到字符串 veth 中。在这个例子中，`e8b40b8`是由 Docker 引擎生成的随机数。Docker 引擎还确保这个随机数在 Docker 主机中是唯一的。如果仔细观察，您可能还会注意到`veth`接口的主机端绑定到了`docker0 `桥。
现在让我们再创建几个容器，并使用 Linux 以太网桥管理命令`brctl`查看`docker0`桥。
The Ubuntu Linux distribution does not usually carry the `brctl` tool, so we have to either install the `bridge-utils` package or leverage one of Docker's nifty features that lets you share the Docker host's network stack with the Docker container, as described in the *Attaching container to the host network* recipe.
这里，我们使用`docker container run`命令的`--network=host`选项连接到 Docker 主机的网络栈。由于`alpine`映像打包了`brctl`实用程序命令，我们将选择旋转带有`alpine`映像的容器，并运行`brctl show`命令来显示桥细节，如下图所示:
![](img/4a4c4352-01c1-4451-9c94-3c3de719adfa.png)
显然，`veth`对的所有主机端都绑定到默认的 Docker 桥`docker0`。除了设置`docker0`桥之外，Docker 还创建了`iptables` NAT 规则，这样所有容器默认都可以和外部世界对话，但是外部世界不能和容器对话。让我们看看 Docker 主机上的 NAT 规则:
![](img/24213d5e-2030-4392-9a64-94caf246b8b2.png)
在前面的输出中，为`172.17.0.0/16`子网配置了一个`POSTROUTING`规则。该规则的唯一目的是将源自`172.17.0.0/16`子网的数据包的源 IP 地址更改为主机 IP 地址。显然，`172.17.0.0/16`子网被分配给了我们的`docker0`桥。本质上，这个`POSTROUTING`规则使 Docker 容器能够连接到外部世界，正如您可以在下面的`traceroute`输出中看到的:
![](img/d2d3fccd-5c23-425c-b731-fd5b3e39e668.png)
很酷，不是吗？尽管如此，默认情况下，Docker 不会为外部世界做任何网络管道来连接容器。但是，当您在容器中托管服务时，必须从外部世界访问它。*从外部访问容器*的方法演示了如何向外部世界开放在容器内部运行的服务。此外，我们还有其他一些方法，这些方法关注单主机容器网络的各个方面。
For more information about the different kinds of networking we discussed in the preceding section, visit: [https://docs.docker.com/network/](https://docs.docker.com/network/).
在本章中，我们只关注单主机容器网络。除了单主机容器网络，我们还将研究如何在容器范例中共享和持久化数据。
# 从外面进入容器
在微服务架构中，多个较小的服务用于提供有意义的企业级应用。受 Docker 启发的容器化技术本质上是非常轻量级的，因此它在支持微服务架构方面发挥着至关重要的作用。默认情况下，Docker 容器允许传出数据流量，但是外部世界没有连接到容器内运行的服务的路径。尽管如此，Docker 提供了一个优雅的解决方案，使用`docker container run`命令的以下选项，有选择地使外部世界能够与容器内部运行的服务进行通信:
| `--publish`、`-p` | 向主机发布容器的端口 |
| `--publish-all`、`-P` | 将所有公开的端口发布到随机端口 |
这两个选项都允许外部世界通过 Docker 主机的端口连接到容器内部运行的服务。
# 准备好
在我们开始之前，请确保 Docker 守护程序正在 Docker 主机上运行。
# 怎么做...
执行以下步骤:
1.  让我们使用我们的`cookbook/apache2`映像在一个容器中启动一个`apache2`服务，并发布该服务，以便它使用`docker container run`命令的`-p`选项通过 Docker 主机的`80`端口运行到外部世界，如以下代码所示:
```
 $ docker container run -d -p 80:80 cookbook/apache2
a101ac9009f2237a2e4356e9caed6d0cf1666b5b86768f559a629d39034b4132
```
2.  接下来，使用`docker container port`命令查看容器和 Docker 主机端口之间的端口映射:
```
    $ docker container port a101ac9009f2
    80/tcp -> 0.0.0.0:80 
```
3.  显然，Docker 容器的端口`80`被映射到 Docker 主机的端口`80`。`0.0.0.0`的 IP 地址意味着 Docker 主机中的任何 IP 地址。
4.  现在，您可以使用 Docker 主机的 IP 地址从任何网络连接到容器内运行的`apache`服务，只要 Docker 主机具有来自该网络的 IP 网络连接。比如说你的 Docker 主机的 IP 地址是`198.51.100.73`。这意味着它可以通过使用任何浏览器的`http://198.51.100.73`网址连接到`apache`服务，您将获得以下输出:
```
    Docker Cookbook
```
# 它是如何工作的...
当容器用`-p :`启动时，Docker 引擎配置`iptables`目的 NAT 规则。此目标 NAT 规则负责将它在 Docker 主机端口上接收的所有数据包转发到容器的端口:
![](img/ff84a158-9936-4a74-8f74-61fd24ba7705.png)
值得注意的是，Docker 引擎插入了具有以下配置的目标 NAT 规则:
*   **源地址** `0.0.0.0/0`:通配符地址，表示该规则适用于从任何来源接收的数据包
*   **目的地址** `0.0.0.0/0`:通配符地址，表示该规则适用于 Docker 主机的任何网络接口上接收的数据包
*   **目的端口** `dpt:80`:该规则的关键属性之一，使`iptables`能够选择性地将该规则应用于仅发送到 Docker 主机的端口`80`的数据包
*   **转发地址** `172.17.0.2:80`:满足上述条件时`iptables`将数据包转发到的容器的 IP 地址和端口
# 还有更多...
`docker container run`命令的`-p` ( `--publish`)选项支持四种配置，您可以使用这些配置向外部世界发布您的容器化服务，如下列表所示:
1.  `:`:这种配置在早期的配方中有所提及。
2.  ``:在这个配置中，我们只是指定容器端口，让 Docker Engine 选择 Docker 主机端口。典型的端口范围是从`32768`到`61000`，在`/proc/sys/net/ipv4/ip_local_port_range`中定义。
3.  `::`:这个配置和`:`很像；但是，这里您指定的是 Docker 主机的特定 IP 接口。
4.  `::`:这个配置和``很像；但是，这里您指定的是 Docker 主机的特定 IP 接口。
`docker container run`命令的`-P` ( `--publish-all`)选项从映像元数据中读出容器端口，并将其映射到 Docker 主机中的随机高阶端口(`32768`到`61000`)。`Dockerfile`的`EXPOSE`指令将端口信息添加到映像元数据中。
# 请参见
*   `docker container run`的`help`选项:
```
        $ docker container run --help      
```
*   Docker 网站上的文档:
    *   [https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)
    *   [https://docs . docker . com/engine/user guide/networking/default _ network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)
# 将容器连接到主机网络
在前面的方法中，Docker 默认将我们的容器连接到默认的桥接网络`docker0`，然后利用`iptables`的`DNAT`规则允许来自外部世界的 TCP 连接。然而，有许多用例，其中容器需要完全访问主机网络名称空间，例如本章介绍部分的`brctl show`场景。在这个方法中，我们将一个容器连接到默认网桥网络，另一个连接到主机网络，并比较它们之间的差异。
# 准备好
在我们开始之前，请确保 Docker 守护程序正在运行，并且可以访问 alpine 映像。
# 怎么做...
请执行以下步骤:
1.  首先，让我们在不指定任何网络选项的情况下启动一个 alpine 容器，并调用`ip address`命令，如下图所示:
![](img/698da170-c3d1-4d9e-9cdb-6db0385f3f34.png)
2.  现在，让我们通过使用`--net=host`作为参数并执行`ip address`命令将其附加到 Docker 主机的网络栈来继续启动一个 alpine 容器，如下图所示:
![](img/a2eb8575-0d63-4f6f-b5c0-e43abed04691.png)
显然，在步骤 1 中，Docker 为容器创建了一个网络名称空间，并为容器分配了一个 IP 地址，而在步骤 2 中，Docker 将容器附加到主机网络栈，因此容器可以完全访问主机的网络栈。
# 它是如何工作的...
Docker 引擎通过将容器附加到 Docker 主机的网络栈来启动新容器，从而允许容器完全访问主机的网络栈。
# 请参见
*   `docker container run`的`help`选项:
```
    $ docker container run --help
```
*   Docker 网站上的文档:
    *   [https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)
    *   [https://docs . docker . com/engine/user guide/networking/default _ network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)
# 启动没有网络的容器
Docker 固有地支持三种类型的网络(`bridge`、`hosts`和`none`，如以下`docker network ls`命令输出所示:
![](img/a2ae3fdb-8ddf-4c02-8e79-fbfb707867d6.png)
在之前的食谱中，我们讨论了`bridge`和`host`网络功能。尽管如此，`none`网络模式在您将任何不需要任何网络连接的实用程序打包到容器中时会派上用场。此外，`none`网络模式也可以用来做你的自定义网络管道，不需要 Docker 参与。在这个食谱中，我们将推出一个具有`none `网络模式的容器，并探索容器的网络细节。
# 准备好
在我们开始之前，请确保 Docker 守护程序正在运行，并且可以访问 alpine 映像。
# 怎么做...
使用`docker container run`命令中的`--net none`参数启动没有网络的容器，如下图所示:
![](img/249ff9ac-bad7-478f-85e3-77370009c3eb.png)
显然，当我们启动一个网络模式设置为`none`的容器时，Docker 只为该容器创建一个`loopback`接口。由于没有为此容器定义以太网接口，因此容器与网络隔离。
# 它是如何工作的...
当容器以`none `网络模式启动时，Docker 引擎为容器创建一个网络命名空间。但是，它没有为该容器配置任何网络。