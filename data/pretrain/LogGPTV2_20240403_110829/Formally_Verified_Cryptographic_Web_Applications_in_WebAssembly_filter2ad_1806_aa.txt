title:Formally Verified Cryptographic Web Applications in WebAssembly
author:Jonathan Protzenko and
Benjamin Beurdouche and
Denis Merigoux and
Karthikeyan Bhargavan
2019 IEEE Symposium on Security and Privacy
Formally Veriﬁed Cryptographic Web Applications
in WebAssembly
Jonathan Protzenko∗, Benjamin Beurdouche†, Denis Merigoux† and Karthikeyan Bhargavan†
∗Microsoft Research
†Inria
Abstract—After suffering decades of high-proﬁle attacks, the
need for formal veriﬁcation of security-critical software has never
been clearer. Veriﬁcation-oriented programming languages like
F∗ are now being used to build high-assurance cryptographic
libraries and implementations of standard protocols like TLS. In
this paper, we seek to apply these veriﬁcation techniques to mod-
ern Web applications, like WhatsApp, that embed sophisticated
custom cryptographic components. The problem is that these
components are often implemented in JavaScript, a language
that is both hostile to cryptographic code and hard to reason
about. So we instead target WebAssembly, a new instruction set
that is supported by all major JavaScript runtimes.
We present a new toolchain that compiles Low∗, a low-level
subset of the F∗ programming language,
into WebAssembly.
Unlike other WebAssembly compilers like Emscripten, our com-
pilation pipeline is focused on compactness and auditability: we
formalize the full translation rules in the paper and implement it
in a few thousand lines of OCaml. Using this toolchain, we present
two case studies. First, we build WHACL∗, a WebAssembly ver-
sion of the existing, veriﬁed HACL∗ cryptographic library. Then,
we present LibSignal*, a brand new, veriﬁed implementation of
the Signal protocol in WebAssembly, that can be readily used by
messaging applications like WhatsApp, Skype, and Signal.
I. INTRODUCTION: CRYPTOGRAPHIC WEB APPLICATIONS
Modern Web applications rely on a variety of cryptographic
constructions and protocols to protect sensitive user data from
a wide range of attacks. For the most part, applications can rely
on standard builtin mechanisms. To protect against network
attacks, client-server connections are typically encrypted using
the Transport Layer Security (TLS) protocol, available in all
Web servers, browsers, and application frameworks like iOS,
Android, and Electron. To protect stored data, user devices
and server databases are often encrypted by default.
However, many Web applications have speciﬁc security
requirements that require custom cryptographic mechanisms.
For example, popular password managers like LastPass [1] aim
to synchronize a user’s passwords across multiple devices and
back them up on a server, without revealing these passwords
to the server. So, the password database is always stored
encrypted, with a key derived from a master passphrase known
only to the user. If this design is correctly implemented,
even a disgruntled employee or a coercive nation-state with
full access to the LastPass server cannot obtain the stored
passwords. A similar example is that of a cryptocurrency
wallet, which needs to encrypt the wallet contents, as well
as sign and verify currency transactions.
Secure messaging applications like WhatsApp and Skype
use even more sophisticated mechanisms to provide strong
guarantees against subtle attacks. For example, they provide
Fig. 1. Secure Messaging Web App Architecture: The application includes
the ofﬁcial LibSignal library, which in turn uses the platform’s crypto library,
but also provides custom implementations for crypto primitives that are not
available on all platforms. The security-critical components that we aim to
verify are the core signal protocol and all the crypto code it relies on.
end-to-end security between clients, so that a compromised
or coerced server cannot read or tamper with messages.
They guarantee forward secrecy, so that even if one of the
devices used in a conversation is compromised, messages sent
before the compromise are still secret. They even provide
post-compromise security, so that a compromised device can
recover and continue to participate in a conversation. To obtain
these guarantees, many messaging applications today rely on
some variant of Signal, a cryptographic protocol designed by
Moxie Marlinspike and Trevor Perrin [2], [3].
To provide a seamless experience to users, most Web ap-
plications are implemented for multiple platforms; e.g. native
apps for iOS and Android, Electron apps that work on most
desktop operating systems, installable browser extensions for
speciﬁc browsers, or a website version accessible from any
Web browser. Except for the native apps, these are all written
in JavaScript. For example, most Signal-based messaging apps
use the ofﬁcial LibSignal library, which has C, Java, and
JavaScript versions. The desktop versions of WhatsApp and
Skype use the JavaScript version, as depicted in Figure 1.
In this paper, we are concerned with the question of how
we can gain higher assurance in the implementations of
such cryptographic Web applications. The key novelty of
our work is that we target WebAssembly rather than general
JavaScript. We show how to build veriﬁed implementations
of cryptographic primitives so that they can be deployed both
within platform libraries (via a C implementation) and within
pure JavaScript apps (via a WebAssembly implementation).
We show how to build a veriﬁed implementation of the Signal
protocol (as a WebAssembly module) and use it to develop a
drop-in replacement for LibSignal-JavaScript.
© 2019, Jonathan Protzenko. Under license to IEEE.
DOI 10.1109/SP.2019.00064
1256
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
WebAssembly. Introduced in 2017, WebAssembly [4] is
a portable execution environment supported by all major
browsers and Web application frameworks. It is designed to
be an alternative to but interoperable with JavaScript.
WebAssembly deﬁnes a compact, portable instruction set
for a stack-based machine. The language is made up of
standard arithmetic, control-ﬂow, and memory operators. The
language only has four value types: ﬂoating-point and signed
numbers, both 32-bit and 64-bit. Importantly, WebAssembly
is typed, meaning that a well-typed WebAssembly program
can be safely executed without fear of compromising the
host machine (WebAssembly relies on the OS page protection
mechanism to trap out-of-memory accesses). This allows ap-
plications to run independently and generally deterministically.
WebAssembly applications also enjoy superior performance,
since WebAssembly instructions can typically be mapped
directly to platform-speciﬁc assembly.
Interaction with the rest of the environment, e.g. the browser
or a JavaScript application, is done via an import mechanism,
wherein each WebAssembly module declares a set of imports
whose symbols are resolved when the compiled WebAssembly
code is dynamically loaded into the browser. As such, Web-
Assembly is completely platform-agnostic (it is portable) but
also Web-agnostic (there is no mention of the DOM or the
Web in the speciﬁcation).
This clean-slate design, endorsed by all major browsers,
yields a language that has cleaner semantics, both on paper [4]
and in mechanized rules [5]. As such, WebAssembly provides
a better basis for reasoning about correctness than JavaScript,
as one does not need to deal with a large semantics rife with
corner cases [6], [7]. Indeed, analysis tools for WebAssembly
are beginning to emerge. For example, CT-WebAssembly [8]
aims to statically rule out some classes of side-channel viola-
tions by extending the WebAssembly semantics.
Our approach is to compile WebAssembly code from for-
mally veriﬁed source code written in Low∗ [9], a subset of
the F∗ programming language [10]. As far as we know, this is
the ﬁrst veriﬁcation toolchain for WebAssembly that supports
correctness, memory safety, and side-channel resistance.
Veriﬁed Crypto for WebAssembly. Programmers, when au-
thoring Web applications, have very few options when it comes
to efﬁcient, trustworthy cryptographic libraries. When run-
ning within a browser-like environment, the W3C WebCrypto
API [11] provides a limited choice of algorithms, while
imposing the restriction that all code calling into WebCrypto
must be asynchronous via the mandatory use of promises.
This entails that WebAssembly code cannot call WebCrypto,
since it does not support async functions. When running
within a framework like Electron, programmers can use the
crypto package, which calls OpenSSL under the hood and
hence supports more algorithms, but requires trust in a large
unveriﬁed library.
In both these scenarios, the main restriction is perhaps the
lack of novel algorithms: for a new algorithm to be available,
the W3C must adopt a new standard, and all browsers must
implement it; or, OpenSSL must implement it, issue a release,
and binaries must percolate to all target environments. For ex-
ample, modern cryptographic standards such as Curve25519,
Chacha20, Poly1305, SHA-3 or Argon2i are not available in
WebCrypto or older versions of OpenSSL.
When an algorithm is not available on all platforms, Web
developers rely on hand-written, unveriﬁed JavaScript imple-
mentations or compile such implementations from unveriﬁed
C code via Emscripten. In addition to correctness questions,
this JavaScript code is often vulnerable to new timing attacks.
We aim to address this issue, by providing application authors
with a veriﬁed crypto library that can be compiled to both C
and WebAssembly: therefore, our library is readily available
in both native and Web environments.
Veriﬁed Protocol Code in WebAssembly. Complex crypto-
graphic protocols are hard to implement correctly, and correct-
ness ﬂaws (e.g. [12]) or memory-safety bugs (e.g. HeartBleed)
in their code can result in devastating vulnerabilities. A num-
ber of previous works have shown how to verify cryptographic
protocol implementations to prove the absence of some of
these kinds of bugs. In particular, implementations of TLS
in F# [13], C [14], and JavaScript [15] have been veriﬁed for
correctness, memory safety, and cryptographic security. An
implementation of a non-standard variant of Signal written
in a subset of JavaScript was also veriﬁed for cryptographic
security [16], but not for correctness.
We propose to build and verify a fully interoperable imple-
mentation of Signal in Low∗ for memory safety and functional
correctness with respect to a high-level speciﬁcation of the
protocol in F∗. We derive a formal model from this speci-
ﬁcation and verify its symbolic security using the protocol
analyzer ProVerif [17]. We then compile our Low∗ code
to WebAssembly and embed it within a modiﬁed version
of LibSignal-JavaScript to obtain a drop-in replacement for
LibSignal for use in JavaScript Web applications.
Contributions and Outline. Our contributions are three-
fold. First, we present the ﬁrst veriﬁcation and compilation
toolchain targeting WebAssembly, along with its formalization
and a compact auditable implementation. Second, we present
WHACL∗, the ﬁrst high-assurance cryptographic library in
WebAssembly, based on the existing HACL∗ library [18].
Third, we present LibSignal*, a novel veriﬁed implementation
of the Signal protocol, that by virtue of our toolchain, enjoys
compilation to both C and WebAssembly, making it a prime
choice for application developers.
We next introduce our source language, F∗, along with the
target language, WebAssembly (II). Next, we formalize our
toolchain, going through various intermediate languages to
connect the semantics of our source and target (III). The fol-
lowing section demonstrates the applicability of our approach,
by compiling an existing library, HACL∗, to WebAssembly,
and validating that the generated code enjoys side-channel
resistance (IV). Finally, we introduce our novel Signal imple-
mentation Signal∗ (V) and explain its design and veriﬁcation
results.
1257
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
II. BACKGROUND: F∗ AND WEBASSEMBLY
A. Veriﬁed Security Applications in F∗
F∗ is a state-of-the-art veriﬁcation-oriented programming
language [10]. It is a functional programming language with
dependent types and an effect system, and it relies on SMT-
based automation to prove properties about programs using
a weakest-precondition calculus. Once proven correct with
regards to their speciﬁcation, programs written in F∗ can
be compiled to OCaml or F#. Recently [9], F∗ gained the
ability to generate C code, as long as the run-time parts of
the program are written in a low-level subset called Low∗.
This allows the programmer to use the full power of F∗ for
proofs and veriﬁcation and, relying on the fact that proofs
are computationally irrelevant and hence erased, extract the
remaining Low∗ code to C. This approach was successfully
used by the HACL∗ [18] veriﬁed crypto library, and the
resulting C code is currently used in the Firefox browser and
Wireguard VPN. In the present work, we reuse the Low∗ subset
as our source language when compiling to WebAssembly.
Writing speciﬁcations in F∗. The programmer ﬁrst writes
a high-level speciﬁcation for her program as a series of
pure terminating functions in F∗. To illustrate our method-
ology, we focus on the Curve25519 implementation found in
HACL∗, which is used as an example throughout this paper.
Curve25519 extensively relies on arithmetic in the ﬁeld of
integers modulo the prime 2255 − 19. The concise high-level
speciﬁcation of this ﬁeld in F∗ is as follows:
let prime = pow2 255 − 19
type elem = e:int{e ≥ 0 ∧ e < prime}
let add e1 e2 = (e1 + e2) % prime
let mul e1 e2 = (e1 * e2) % prime
let zero: elem = 0
let one: elem = 1
The syntax of F∗ resembles F# and OCaml. Deﬁnitions are
introduced using let; the syntax let f x y: Tot t deﬁnes a total
(pure) function of two parameters x and y, which returns
a value of type t while performing no side-effects. Total
functions always terminate for all valid inputs; F∗ enforces
this, and the programmer is sometimes required to provide a
decreases clause to indicate to F∗ why the function terminates.
Types may be annotated with a reﬁnement between curly
braces; for instance, the type elem above describes mathe-
matical integers modulo prime. The backtick operator ` allows
using a function as an inﬁx operator for readability.
The deﬁnitions above form a speciﬁcation. The set of
ﬁeld elements are deﬁned as a type that reﬁnes mathematical
integers (int) and two arithmetic operations on these elements
(add, mul) are deﬁned as pure terminating functions. These
speciﬁcations can be tested, by extracting the code above to
OCaml and running it on some test vectors as a sanity check.
However, this speciﬁcation is still quite far from a concrete
low-level implementation.
Speciﬁcations can be layered. Building upon the ﬁeld
arithmetic above, we can deﬁne elliptic curve operations for
Curve25519, culminating in a full speciﬁcation for elliptic
curve scalar multiplication.
Writing low-level code in Low∗. Once equipped with a
speciﬁcation, the programmer can write an efﬁcient stateful
implementation in Low∗, a subset of F∗. She can then use the
program veriﬁcation capabilities of F∗ to show that the low-
level implementation matches the high-level speciﬁcation.
Field arithmetic in Curve25519 requires 256-bit integers
which are not supported by generic CPUs and hence need to be
encoded as arrays of 32-bit or 64-bit integers. Consequently, to
implement Curve25519, we deﬁne a low-level representation
of ﬁeld elements called felem and stateful functions fadd and
felem that operate on these felems:
type felem = p:uint64 p { length p = 5 }
let fadd (output a b: felem):
Stack unit
(requires (λ h0 → live pointers h0 [output; a; b]
(ensures (λ h0
∧ fadd pre h0.[a] h0.[b])
h1 → modiﬁes only output h0 h1
∧ h1.[output] == add h0.[a] h0.[b]))
The code ﬁrst deﬁnes the type felem, using the popular
unpacked representation [19], as an array of ﬁve limbs of 64
bits each. To represent an integer modulo 2255 − 19, each limb