但是，我们可以很容易对secret值进行暴力破解，因为对于右移操作最多只有0x3f种可能。因此，我们将遍历从0到0x3f的所有可能情况，先对编码指针执行右移操作，然后再将结果与相应的明文指针进行异或，这样我们就会得到一个可能的secret值。此算法的伪代码如下：
    for (var i = 0; i > (0x40 - (i & 0x3f))) ^ plain_ptr;
        if (encode_ptr(plain_ptr, k) == encoded_ptr) {
        /* Found potential secret key k */
        }
    }
最终我们将猜出正确的secret值。但是，由于不同secret值对同一指针的编码仍可能得到相同的编码指针，因此对单独的明文指针和编码指针组合，可能会返回多个正确的secret值。并且相较64位进程，这种影响在32位进程中则更加明显。
为了提高猜测secret值的准确性，至少需要使用两对已知的编码指针和明文指针组合。我们通过其中一对指针来暴力破解可能的secret值，然后使用第二对指针做验证，只需将其中的明文指针用可能的secret值编码，再将结果与已知的编码指针比较即可。这样，我们就将secret值的碰撞降到了可接受的水平。
#### 5.3 查找指针对
让我们看下能否在EMET模块内找到通过读内存就能获取的已知编码指针和明文指针的组合。
如果你查看过emet64.dll内所有的EncodePointer调用，那么你会注意到，其中有次初始调用是发生在sub_180048110函数中的，如下图：
可以看到，此函数对NULL指针进行了编码，结果保存在函数第一个入参指向的地址，该函数被调用的其中一个地方是在函数sub_1800204B0内，如下所示：
其中，Ptr是EMET64模块的.data段中偏移量为0x135b80处的全局变量。
通过快速的调试查看可以知道，当EMET进行ASR检查时，该位置仍然保存着NULL指针的编码结果。因此我们找到了所需的第一对指针。
通过查看sub_180081038函数我们可以找到另一对编码指针和明文指针的组合。
此函数将对第一个入参指针进行编码，并且仅有一处被调用的地方，相应参数为函数sub_180080B40的地址。如下所示：
该函数指针编码后的结果保存在EMET64+1362a0起偏移为EMET64+0x135320相应值乘8的地址处。我们可以很容易在内存中读取这些值，从而得到第二对已知的编码指针和明文指针组合。
因此，这将使得我们可以解码iexplore.exe进程中的所有编码指针。我们不仅提供了一种禁用ASR保护的通用方法，而且该方法还可用于完全消除EMET保护的任何进程中基于EncodePointer和DecodePointer函数实现的那些保护（假设你已具有读取任意内存和获取EMET模块基址的能力）。
#### 5.4 泄漏EMET模块基址
这里我们将借助EMET中已知的几个被hook函数，其中包括了ntdll.dll模块中的NtProtectVirtualMemory函数。我们首先通过读取jscript9.dll导入表中的RtlCaptureContext函数地址来泄漏ntdll.dll模块基址，然后我们接着看下NtProtectVirtualMemory函数开头的这几条指令。
很显然，通过检查前几字节，我们就可以确定当前进程是否受到EMET保护。为了泄漏EMET模块的基址，我们跟下EMET启用时最开始的这两条jmp指令，最终可以看到如下所示的这条指令，它将EMET64.dll模块内的偏移量赋值给了一个寄存器：
通过这条寄存器赋值指令，我们就可以计算出EMET模块的基址。
#### 5.5 禁用ASR保护
既然我们能得到EMET模块的基址且拥有解码被保护指针的能力，那么很自然的想法就是将校验的flag值置为0以绕过ASR保护。但是，正如前面所述，该flag值存储的页面是只读的，因此我们转而替换指向此页面的指针。
所以，在泄露EMET模块的基址后，我们先按照前面的方法计算出EncodePointer/DecodePointer保护中所使用的secret值。而后借助该secret值，我们对EMET64.dll模块内偏移0x136800处的全局指针进行解码，最后使用指向NULL的指针来覆盖其中偏移量0x28处的指针。此处用到的覆盖值为EMET64+0x110ef8，它指向EMET64.dll模块.rdata段中的NULL值。
经过这么处理后，我们可以成功绕过ASR保护，进而执行我们的exploit。如果需要，也可以使用同样的方法来禁用其它的EMET保护技术。
### 6 结语
本文详细描述了利用我们发现的一个关于Internet Explorer
11中JavaScript实现方面的漏洞来进行exploit开发的完整过程。其中，我们阐述了许多现有的诸如DEP或CFG这样的漏洞利用保护措施就算不借助传统的ROP代码和shellcode也是可以实现轻松绕过的，只要我们能将漏洞转换成对任意内存空间的读写就可以了，之后再通过浏览器中已有的功能来执行系统命令，同时，我们还分析了如何仅通过写一个null字节就可在最新的Internet
Explorer 11版本中实现这种方式的攻击。
接下去我们给出了一种借助本地NetBIOS Spoofing进行Internet
Explorer中EPM绕过的新方法，我们详述了即便在开启EPM的情况下，利用之前的Local Intranet Zone方式还是可以实现Internet
Explorer沙箱逃逸。
最后，我们讨论了最新的EMET
5.5版本是如何被绕过的以及我们如何通过计算secret值的方式来消除EMET中使用的EcodePointer保护。当然，所讨论的这些方法不仅可以用于禁用ASR保护，而且还可用于消除EMET保护的进程中基于EncodePointer和DecodePointer函数实现的那些缓解措施。
这里所有提到的漏洞和技术都作为Mitigation Bypass Bounty项目提交的一部分报告给了微软。其中，第2部分描述的Typed Array
Neutering漏洞（CVE-2016-3210）已在MS16-063中修复，有趣的是，Edge的ChakraCore引擎自发布时就修复了同样的漏洞。
3.6节中描述的借助null字节开启上帝模式的技术（CVE-2016-0188）则在MS16-051中得到了修复，微软通过引入QueryProtectedPolicy函数来缓解此问题。
而第4部分描述的通过本地NetBIOS Spoofing实现EPM下的沙箱逃逸技术（CVE-2016-3213）在MS16-077中也得到了修复。
但最后第5部分介绍的EMET绕过技术尚未被修复，而且微软目前也没有计划去解决此问题。
总体来说，伴随着当前Windows系统中漏洞利用保护措施不断增长的数目以及稳定性的提升，exploit的开发成本被大幅增加了。但是，如果借助合适的漏洞，那么许多保护仍然是可以被绕过的，所缺乏的仅仅是想象力和创造性。
例如文中所述的data-only
attacks，它就允许攻击者绕过许多的保护措施，虽然微软已经开始着手进行一些修复，但我们预计这种利用方式在未来会变得更加常见。
### 7 参考
[9] Verizon, "Escaping from Microsoft’s Protected Mode Internet Explorer":  
[10] Zero Day Initiative, "There’s No Place Like Localhost: A Welcoming Front
Door To Medium Integrity, HP Security Research":  
[11] Zero Day Initiative, "(0Day) (Pwn2Own\Pwn4Fun) Microsoft Internet
Explorer localhost Protected Mode Bypass Vulnerability":  
[12] M. V. Yason, "Diving Into IE 10’s Enhanced Protected Mode Sandbox":  
[13] Microsoft, "IEInternals: The Intranet Zone":  
[14] FoxGlove Security, "Hot Potato Windows Privilege Escalation Exploit":  
[15] FireEye, "Using EMET to Disable EMET":  
[16] Offensive Security, "Disarming and Bypassing EMET 5.1":  
* * *