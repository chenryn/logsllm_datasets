title:Sharing Mobile Code Securely with Information Flow Control
author:Owen Arden and
Michael D. George and
Jed Liu and
K. Vikram and
Aslan Askarov and
Andrew C. Myers
2012 IEEE Symposium on Security and Privacy
Sharing Mobile Code Securely
With Information Flow Control
Owen Arden
K. Vikram
Michael D. George
Jed Liu
{owen,mdgeorge,liujed,kvikram,aslan,andru}@cs.cornell.edu
Aslan Askarov
Andrew C. Myers
Department of Computer Science
Cornell University
Abstract
Mobile code is now a nearly inescapable component of modern computing,
thanks to client-side code that runs within web browsers. The usual tension
between security and functionality is particularly acute in a mobile-code
setting, and current platforms disappoint on both dimensions.
We introduce a new architecture for secure mobile code, with which
developers can use, publish, and share mobile code securely across trust
domains. This architecture enables new kinds of distributed applications,
and makes it easier to reuse and evolve code from untrusted providers.
The architecture gives mobile code considerable expressive power: it can
securely access distributed, persistent, shared information from multiple trust
domains, unlike web applications bound by the same-origin policy. The core
of our approach is analyzing how ﬂows of information within mobile code
affect conﬁdentiality and integrity. Because mobile code is untrusted, this
analysis requires novel constraints on information ﬂow and authority.
We show that these constraints offer principled enforcement of strong
security while avoiding the limitations of current mobile-code security
mechanisms. We evaluate our approach by demonstrating a variety of mobile-
code applications, showing that new functionality can be offered along with
strong security.
1. Introduction
We are entering an era in which code is exchanged rather
freely among networked computers. The web has made mo-
bile code a part of everyday life: visiting a web page typically
loads JavaScript code from multiple providers onto your
system. Web services such as Facebook allow third parties to
provide applications that are dynamically combined with their
core functionality. Even traditional desktop applications are
dynamically downloading plugins from third-party providers.
Over the past few years a whole new ecosystem of mobile-
code development has sprung up in which web programmers
reuse and customize JavaScript code found on the web for
their own purposes. Sometimes programmers copy code and
modify it for their purposes; sometimes they write web ap-
plications that import code directly via URL. Various popular
JavaScript libraries have made this latter use common. Other
popular mobile-code platforms, including ActionScript (for
Flash) and Java, are not fundamentally different.
While there are many beneﬁts to promiscuously sharing
mobile code, these beneﬁts come at a cost: in general, it
is hard to determine if dynamically combining code from
multiple sources yields a secure application. On the web,
the main security safeguard is the same-origin policy [35],
which attempts to limit web applications to communication
with their originating website. This policy prevents many
useful applications yet also fails to address all
the ways
that untrusted code can create security vulnerabilities. The
limitations on expressive power force developers to work
around the same-origin policy [14], potentially introducing
additional vulnerabilities. These problems will be exacerbated
as applications begin relying on persistent storage function-
ality provided by the recent HTML 5 speciﬁcation [12].
The goal of this work is to create a platform that securely
supports the ﬂexible use and reuse of mobile code that
developers clearly want. Our contribution is a system that
provides expressive power while protecting the conﬁdentiality
and integrity of information—even though sharing happens
between sites lacking mutual trust. We take a holistic view of
security: not only must each individual application component
be secure, but also the entire assembly of code and data
from various providers must satisfy all participants’ security
requirements.
By their very nature, isolation mechanisms such as the
same-origin policy prevent sharing. In response to the need for
sharing, programmers inevitably open communication chan-
nels across isolation boundaries, reopening similar security
vulnerabilities in new guises. The usual response is to attempt
to control
these channels using authorization mechanisms
such as capabilities. This attempt is doomed to fail. The
problem is that authorization is not compositional, because
it does not
information is being
communicated—authorization mechanisms allow any com-
munication as long it is performed by an authorized principal.
Compositionality is needed for federated environments where
code and data from different sources are combined.
take into account what
Information-ﬂow control is an appealing alternative be-
cause it is inherently compositional. Information-ﬂow control
mechanisms and policies have been developed for reason-
ing about conﬁdentiality and integrity in decentralized sys-
tems [24, 25, 36, 40, 37, 38, 30, 20]. These systems ensure
that the ﬂow of information is in accordance with policies
expressed as labels on resources. Enforcement is done through
some combination of static or dynamic mechanisms at either
the programming language level or at the operating system
level, and the use of these mechanisms can be proved to
© 2012, Owen Arden. Under license to IEEE.
DOI 10.1109/SP.2012.22
191
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:49 UTC from IEEE Xplore.  Restrictions apply. 
ensure strong security properties [31]. However, these prior
systems do not support secure sharing of mobile code.
In our new mobile-code architecture, code becomes a
persistent resource managed by the system. The system allows
principals to publish code and tracks how much trust has been
placed in code by principals in the system, automatically
bounding the actions and privileges of the code according
to that trust. In addition, to support reuse and adaptation of
existing code, as happens in the web today, our new mobile-
code architecture provides mechanisms for secure evolution
of code and persistent data.
We have built a prototype of our secure mobile-code
platform as an extended version of the prototype Fabric
system [20, 19]. Fabric is a decentralized computing plat-
form that provides a high-level, object-oriented programming
model for secure distributed computation. While Fabric al-
ready addressed many distributed security issues, it did not
support mobile code. To distinguish the new version of Fabric
from the original, we refer to it as Mobile Fabric.
The advantage of working in the context of Fabric, rather
than, say, in JavaScript, is that we can solve a more gen-
eral, more abstract instantiation of the mobile-code prob-
lem. Working within the context of existing web standards
would obscure rather than illuminate the fundamental issues
of sharing untrusted and partially trusted code. Moreover,
the lessons learned from this work should be applicable to
web security as well; for example, the constraint placed on
code in Mobile Fabric might inform emerging cross-origin
policies [33], where attempts are being made to obtain some
of the expressive sharing obtained by Mobile Fabric.
The rest of the paper is structured as follows. Section 2
introduces a running example to demonstrate both the new
functionality that secure mobile code offers and the new
challenges it presents. Section 3 provides background on
decentralized information-ﬂow control (DIFC) and its in-
stantiation in the Fabric system. Section 4 describes the
overall architecture, including the threat model, and Section 5
explains the new mechanisms required to securely execute
mobile code. Section 6 discusses mechanisms to support
secure evolution of mobile code. Section 7 describes the
prototype implementation of the new architecture, and Sec-
tion 8 presents performance and experience results. Section 9
discusses related work, and Section 10 concludes.
2. A mobile-code example: untrusted mashups
The “FriendMap” application illustrates the security chal-
lenges of allowing untrusted mobile code to operate on
sensitive data. This application enables a user of a social
network to create a map displaying the locations of their
friends. Let us call the user “Alice” and one of her friends
“Bob.” Figure 1 shows the interactions Alice’s client makes
while executing FriendMap. First, Alice’s client downloads
the application code (1) and executes it locally. FriendMap
then fetches the locations of Alice’s friends (2) from the social
network (“Snapp”), requests a map (3) from a third-party map
192
Fig. 1: Overview of the social mashup example
service (“MapServ”), and plots the friends’ locations on the
map displayed to the Alice. Alice can also choose to post the
map (4) to the social network to share with her friends.
2.1. Security considerations
Even this simple example has complex security require-
ments because the principals trust each other to differing
degrees. For example, Alice trusts MapServ to learn some
information about her friends, but Bob may not trust MapServ
at all. In that case, FriendMap must avoid using his location
to compute the map request.
Similarly, although Bob trusts Alice to see his location, he
may not trust Alice’s friends with the same information. If
so, FriendMap must either avoid posting the resulting map
where Alice’s friends can see it or omit Bob’s location.
Further, none of the involved principals trust the provider
of the FriendMap code. Therefore some mechanism is needed
to ensure that the code enforces their policies; any principal
who controls this mechanism or the node on which it operates
must be trusted to enforce these policies. In this example, Bob
trusts Alice with the conﬁdentiality of his location, so Alice’s
node is responsible for enforcing this conﬁdentiality policy.
In real applications, policies are more nuanced than lists of
entities allowed to learn information. Bob may consider his
exact location conﬁdential, but not his current zip code. This
is an example of declassiﬁcation: some information about
Bob’s location is released, even though Bob’s precise location
is secret. The decision to declassify must be authorized by
Bob, so the code performing the declassiﬁcation must either
be provided by or endorsed by Bob.
Existing platforms for secure mobile code fail to meet
the security requirements of FriendMap. Isolation-based ap-
proaches, such as the same-origin policy [35] and SFI [34],
entirely prevent applications from interacting with each other.
FriendMap would be unable to access the locations of Al-
ice’s friends, regardless of the policies on those locations.
Authorization approaches such as OAuth [11] suffer from
the opposite problem: once Alice’s client is able to see the
locations, nothing prevents FriendMap from leaking the data
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:49 UTC from IEEE Xplore.  Restrictions apply. 
Alice'sclientSnappsocialnetworkMapServmap serviceFriendMapmashupapplicationmapAlice, Bob'slocation infopostcode4321to MapServ, her personal bulletin board, or even FriendMap’s
developers. By contrast, Mobile Fabric provides abstractions
and mechanisms to meet FriendMap’s security requirements.
2.2. Software construction and evolution
Reusing code improves productivity, interoperability, and
performance. But reusing and composing partially trusted
code and data presents new challenges. Developers need
assurance that their assumptions regarding a program’s depen-
dencies are met, particularly when the program manipulates
sensitive data. For instance, a developer might only trust
particular library vendors or particular library versions to
handle sensitive data. If a different library is used at run time,
the resulting program may be insecure or incorrect.
The developers involved in a collection of interdependent
code may have made conﬂicting assumptions about what
names in their code mean. Discovering and ﬁxing such errors
at run time can be very difﬁcult. Therefore, Mobile Fabric
includes support for detecting conﬂicting assumptions about
the binding of names in code (in particular, class names) to
actual code objects stored persistently in the system.
The problem of dependencies is made more complex
because real software evolves over time and because in Fabric,
code is tied to persistent objects whose behavior it deﬁnes.
As software evolves, changes to code may require replacing
or updating objects. In many updates, only a small percentage
of the code actually changes. Therefore, the goal of Mobile
Fabric is to allow the reuse of compiled code and persistent
objects without introducing inconsistencies.
Code sometimes evolves in a way that requires updates to
persistent data. In these cases it is important to be able to
migrate the data from one version to another, even though
the code for the old version may resolve names in a way that
is inconsistent with the new version.
As we show in Section 6, Mobile Fabric provides the
ﬂexibility to securely and incrementally evolve and extend
programs constructed from software components from mul-
tiple trust domains. It supports evolution of code and data,
while avoiding unnecessary updates to both.
3. Background: DIFC and Fabric
Mobile Fabric extends the Fabric system [20] with support
for mobile code. Fabric provides a high-level, language-based
abstraction for constructing secure distributed applications.
Its principled security enforcement makes Fabric a good
starting point for mobile code. However, Fabric’s security
mechanisms, both at the language and the system level, do
not handle code that might be supplied by an adversary.
Some additional background on Fabric will be helpful.
Fabric’s language model for distributed programs treats every
resource—distributed or local, persistent or non-persistent—
as an object in a Java-like object-oriented language. Compile-
time and run-time mechanisms protect the conﬁdentiality and
integrity of information in Fabric by controlling information
ﬂows. Flows within locally executed code are checked largely
at compile time. Run-time checking is primarily used at
remote calls to verify that the remote host node can be trusted
to enforce the information-ﬂow policies of the call.
3.1. Objects
Principals, policies, remote hosts, local data, and remote
data are all language-level objects in Fabric, and objects may
reference any other object. Each object is given a unique
object identiﬁer, or oid. An oid includes the host storing the
object, so an object can be located using only its oid, and
oids can be exported outside of Fabric.
3.2. Nodes
Fabric nodes serve different roles. Objects are stored per-
sistently on storage nodes (or just stores); computation takes
place on worker nodes (or workers). Workers fetch objects
from stores. The web analogue of workers and stores would
be clients and servers.
Fabric can express different styles of distributed compu-
tation, because a single computation can span both multiple
workers and multiple stores. This model is more general than
web applications, where computations cannot span multiple
client browsers. By default, Fabric computations use data
shipping: when computation at a worker needs a remote
object, the object’s store sends a copy of the object to the
worker. The worker pushes updates back to the object’s store
when the computation completes. In the FriendMap example,
Snapp and MapServ store objects used by the FriendMap
application. Alice’s worker initiates and coordinates the com-
putation, which includes a remote call to the MapServ worker
to generate maps. The data structure representing the resulting
map is fetched by Alice’s worker as FriendMap processes it
for display.
3.3. Delegating Trust
Fabric represents entities involved in a computation as
abstract principals. Principals may represent a single entity
such as a user or a Fabric node, or multiple entities such as
an organization or a group of friends.
A principal p may express trust in another principal q by
allowing q to act for it. In this case we write q (cid:60) p, which
we read as “q acts for p”. We also sometimes say that “p
delegates to q”, or “p trusts q”. It is essentially the same as
q ⇒ p in many authorization logics (for example, [17]).
If q (cid:60) p, then q may perform any action that p may
perform. For example, q may read any data that p can read,
or update any data that p may update. Principal q may also
downgrade policies owned by p.
In the FriendMap example, Snapp, MapServ,
and
FriendMap are all principals, as are users, such as Alice and
Bob. The ability to create new principals allows for ﬂexible,
ﬁne-grained delegation. As shown in Figure 2, Snapp users
do not trust their friends’ principals. Instead, users have a
193
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:49 UTC from IEEE Xplore.  Restrictions apply. 
Alice’s friends list:
Bob’s location:
Requests to MapServ:
MapServ responses:
{Alice ←}
{Bob ←; Bob → Bob.locGrp}
{(cid:62) → MapServ}
{(cid:62) ← MapServ}
Fig. 3: Labels in the FriendMap example
policies
are
the
Integrity
the information, but he allows the information to ﬂow to the
locGrp principal (and implicitly to himself).
policy
also
owned:
Alice←Alice.friends means
the
data, but
it may be inﬂuenced by her friends. This
policy is part of the label on Alice’s bulletin board on the
social network. The labels in the FriendMap example are
summarized in Figure 3.
that Alice owns
that
Fine-grained principals like a user’s friend group allow
other principals to control the meanings of policies by chang-
ing the acts-for hierarchy. For example, Bob has allowed all
of his friends to read his location by making his locGrp
principal delegate to his friends principal. Alice has not
made this delegation, so her friends cannot read her location.
Informally, a principal p is trusted to enforce a label (cid:96) if
it can both see and affect data at that label. We express this
with the notation p (cid:60) (cid:96). A principal is trusted to enforce a