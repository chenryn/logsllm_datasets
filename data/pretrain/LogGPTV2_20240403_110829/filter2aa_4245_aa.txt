# 类和模块
---
- https://www.kancloud.cn/imxieke/ruby-base/107295
---
# 类是什么
类（class）是面向对象中一个重要的术语。
**类和实例**
类表示对象的种类。Ruby 中的对象都一定属于某个类。例如，我们常说的“数组对象”“数组”，实际上都是 `Array` 类的对象（实例）。还有字符串对象，实际上是 `String` 类的对象（实例）。
相同类的对象所使用的方法也相同。类就像是对象的雏形或设计图，决定了对象的行为。
我们在生成新的对象时，一般会用到各个类的 `new` 方法。例如，使用 `Array.new` 方法可以生成新的数组对象。
```ruby
ary = Array.new
p ary #=> []
```
> 像数组、字符串这样的类，也可以使用字面量（像 `[1, 2, 3]`、`"abc"` 这样的写法）来生成对象。
当想知道某个对象属于哪个类时，我们可以使用 `class` 方法。
```ruby
ary = []
str = "Hello world."
p ary.class    #=> Array
p str.class    #=> String
```
当判断某个对象是否属于某个类时，我们可以使用 `instance_of?` 方法。
```ruby
ary = []
str = "Hello world."
p ary.instance_of?(Array)    #=> true
p str.instance_of?(String)   #=> true
p ary.instance_of?(String)   #=> false
p str.instance_of?(Array)    #=> false
```
**继承**
我们把通过扩展已定义的类来创建新类称为继承。
假设我们需要编写一个在屏幕中显示时间的小程序。根据用户的喜好，这个小程序能以模拟时钟或者电子时钟的方式显示。
模拟时钟与电子时钟，两者只是在时间的表现形式上不一样，获取当前时间的方法以及闹钟等基本功能都是相同的。因此，我们可以首先定义一个拥有基本功能的时钟类，然后再通过继承来分别创建模拟时钟类和电子时钟类。
继承后创建的新类称为子类（subclass），被继承的类被称为父类（superclass）。
通过继承我们可以实现以下事情：
- 在不影响原有功能的前提下追加新功能。
- 重定义原有功能，使名称相同的方法产生不同的效果。
- 在已有功能的基础上追加处理，扩展已有功能。
此外，我们还可以利用继承来轻松地创建多个具有相似功能的类。
`BasicObject` 类是 Ruby 中所有类的父类，它定义了作为 Ruby 对象的最基本功能。
> `BasicObject` 类是最最基础的类，甚至连一般对象需要的功能都没有定义。因此普通对象所需要的类一般都被定义为 `Object` 类。字符串、数组等都是 Object 类的子类。
子类与父类的关系称为“is-a 关系”。例如，`String` 类与它的父类 `Object` 就是 is-a 关系。
之前我们提到过查找对象所属的类时使用 `instance_of?` 方法，而根据类的继承关系反向追查对象是否属于某个类时，则可以使用 `is_a?` 方法。
```
str = "This is a String."
p str.is_a?(String)    #=> true
p str.is_a?(Object)    #=> true
```
顺便提一下，由于 `instance_of?` 方法与 `is_a?` 方法都已经在 `Object` 类中定义过了，因此普通的对象都可以使用这两个方法。
# 类的创建
```ruby
class HelloWorld                   # class 关键字
  def initialize(myname = "Ruby")  # initialize 方法
    @name = myname # 初始化实例变量
  end
  def hello                        # 实例方法
    puts "Hello, world. I am       #{@name}."
  end
end
bob = HelloWorld.new("Bob")
alice = HelloWorld.new("Alice")
ruby = HelloWorld.new
bob.hello
```
**class 关键字**
`class` 关键字在定义类时使用。以下是 `class` 关键字的一般用法：
```ruby
class 类名
 类的定义
end
```
类名的首字母必须大写。
**initialize 方法**
在 `class` 关键字中定义的方法为该类的实例方法。
其中，名为 `initialize` 的方法比较特别。使用 `new` 方法生成新的对象时，`initialize` 方法会被调用，同时 `new` 方法的参数也会被原封不动地传给 `initialize` 方法。因此初始化对象时需要的处理一般都写在这个方法中。
```ruby
def initialize(myname = "Ruby")  # initialize 方法
  @name = myname                 # 初始化实例变量
end
```
在这个例子中，`initialize` 方法接受了参数 `myname`。因此，
```ruby
bob = HelloWorld.new("Bob")
```
像这样，就可以把 `"Bob"` 传给 `initialize` 方法生成对象。由于 `initialize` 方法的参数指定了默认值 `"Ruby"`，因此，像下面这样没有指定参数时，
```ruby
ruby = HelloWorld.new
```
会自动把 `"Ruby"` 传给 `initialize` 方法。
**实例变量与实例方法**
```ruby
def initialize(myname = "Ruby")  # initialize 方法
  @name = myname                 # 初始化实例变量
end
```
通过 `@name = myname` 这行程序，作为参数传进来的对象会被赋值给变量 `@name`。我们把以 `@` 开头的变量称为实例变量。在不同的方法中，程序会把局部变量看作是不同的变量来对待。而只要在同一个实例中，程序就可以超越方法定义，任意引用、修改实例变量的值。另外，引用未初始化的实例变量时的返回值为 `nil`。
不同实例的实例变量值可以不同。只要实例存在，实例变量的值就不会消失，并且可以被任意使用。而局部变量则是在调用方法时被创建，而且只能在该方法内使用。
我们来看看下面的例子：
```ruby
alice = HelloWorld.new("Alice")
bob = HelloWorld.new("Bob")
ruby = helloWorld.new
```
`alice`、`bob`、`ruby` 各自拥有不同的 `@name`
可以在实例方法中引用实例变量，下面是 `HelloWorld` 类定义的 `hello` 方法引用 `@name` 的例子：
```ruby
class HelloWorld
  ┊
  def hello                        # 实例方法
    puts "Hello, world. I am #{@name}."
  end
end
```
通过以下方式调用 `HelloWolrd` 类定义的 `hello` 方法：
```
bob.hello
```
输出结果如下所示：
```
Hello, world. I am Bob.
```
**存取器**
在 Ruby 中，从对象外部不能直接访问实例变量或对实例变量赋值，需要通过方法来访问对象的内部。
为了访问 `HelloWorld` 类的 `@name` 实例变量，我们需要定义以下方法：
```ruby
class HelloWorld
  ┊
  def name          # 获取@name
    @name
  end
  def name=(value)  # 修改@name
    @name = value
  end
  ┊
end
```
第一个方法 `name` 只是简单地返回 `@name` 的值，我们可以像访问属性一样使用该方法。
```ruby
p bob.name        #=> "Bob"
```
第二个方法的方法名为 `name=`，使用方法如下：
```ruby
bob.name = "Robert"
```
乍一看，该语法很像是在给对象的属性赋值，但实际上却是在调用 `name=("Robert")` 这个方法。利用这样的方法，我们就可以突破 Ruby 原有的限制，从外部来自由地访问对象内部的实例变量了。
当对象的实例变量有多个时，如果逐个定义存取器，就会使程序变得难懂，而且也容易写错。为此，Ruby 为了我们提供了更简便的定义方法 `attr_reader`、`attr_writer`、`attr_accessor`。只要指定实例变量名的符号（symbol），Ruby 就会自动帮我们定义相应的存取器。
定义	| 意义
- | -
attr_reader :name	| 只读（定义 name 方法）
attr_writer :name	| 只写（定义 name= 方法）
attr_accessor :name	| 读写（定义以上两个方法）
也可以像下面这样只写一行代码，其效果与刚才的 `name` 方法以及 `name=` 方法的效果是一样的。
```ruby
class HelloWorld
  attr_accessor :name
end
```
> Ruby 中一般把设定实例变量的方法称为 writer，读取实例变量的方法称为 reader，这两个方法合称为 accessor。另外，有时也把 reader 称为 getter，writer 称为 setter，合称为 accessor method4。
**特殊变量 self**
在实例方法中，可以用 `self` 这个特殊的变量来引用方法的接收者。接下来就让我们来看看其他的实例方法如何调用 `name` 方法。
```ruby
class HelloWorld
  attr_accessor :name
  ┊
  def greet
    puts "Hi, I am #{self.name}."
  end
end
  ┊
```
`greet` 方法里的 `self.name` 引用了调用 `greet` 方法时的接收者。
调用方法时，如果省略了接收者，Ruby 就会默认把 `self` 作为该方法的接收者。因此，即使省略了 `self`，也还是可以调用 `name` 方法，如下所示：
```ruby
def greet
  print "Hi, I am #{name}"
end
```
另外，在调用像 `name=` 方法这样的以 `=` 结束的方法时，有一点需要特别注意。即使实例方法中已经有了 `name = "Ruby"` 这样的定义，但如果仅在方法内部定义名为 `name` 的局部变量，也不能以缺省接收者的方式调用 `name=` 方法。这种情况下，我们需要用 `self.name = "Ruby"` 的形式来显式调用 `name` 方法。
```ruby
def test_name
  name = "Ruby"         # 为局部变量赋值
  self.name = "Ruby"    # 调用name= 方法
end
```
> 虽然 `self` 本身与局部变量形式相同，但由于它是引用对象本身时的保留字，因此我们即使对它进行赋值，也不会对其本身的值有任何影响。像这样，已经被系统使用且不能被我们自定义的变量名还有 `nil`、`true`、`false`、`__FILE__`、`__LINE__`、`__ENCODING__` 等。
**类方法**
方法的接收者就是类本身（类对象）的方法称为类方法。类方法的操作对象不是实例，而是类本身。