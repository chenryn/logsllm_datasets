Virtual Base 
Hierarchies
Virtual Base
See appendix for full information (not enough time).
A nasty and rarely used C++ feature that allows “more efficiently” 
doing multiple inheritance when both parent classes inherit from the 
same base class.
Can make range checks impossible for a vftable hierarchy, need to use 
bitmap checks.
Interesting Notes
Misc.
Identical Comdat Folding (ICF) must be disabled for vftables in the 
“CastGuard region”.
ICF will eliminate duplicate copies of data (i.e. vftables that are identical) but CastGuard requires 
all vftables are unique since they are used as identifiers.
OptRef (remove unreferenced symbols) linker optimization also 
disabled for CastGuard vftables.
If the linker deletes an unreferenced vftable in the CastGuard region, it changes the layout of 
the region but we already generated code based on the expected layout.
Luckily LTCG does a pretty good job up-front at determining if a symbol is unreferenced and we 
won’t lay out the symbol in the first place.
Curiously 
Recurring Template 
Pattern (CRTP)
struct A
{
A::A(){}
virtual void Entry()
{
return;
}
};
template 
struct B : A
{
virtual void Entry()
{
static_cast(this)->WhoAmI();
}
void DoStuff()
{
DoOtherStuff(static_cast(this));
}
};
struct C : B
{
void WhoAmI()
{
PrintWhoIAm();
}
static void PrintWhoIAm()
{
printf(“C");
}
};
struct D : B
{
void WhoAmI()
{
PrintWhoIAm();
}
static void PrintWhoIAm()
{
printf(“D");
}
};
Derived type specifies itself as a 
templated parameter when inheriting 
from “B” class.
An object of type “B” is never created. 
Only derived types are created.
Because “B” is specialized based on the type inheriting from it, any given “B” type (such as B) 
only has a single derived type.
A
B
C
D
B
A::$vftable@
B::$vftable@
C::$vftable@
D::$vftable@
B::$vftable@
Class Hierarchy
Vftable Hierarchy
Each specialized version of “B” is its own unique class and has a unique vftable.
struct D : B
{
void WhoAmI()
{
PrintWhoIAm();
}
static void PrintWhoIAm()
{
printf(“D");
}
};
template 
struct B : A
{
virtual void Entry()
{
static_cast(this)->WhoAmI();
}
void DoStuff()
{
DoOtherStuff(static_cast(this));
}
};
struct A
{
A::A(){}
virtual void Entry()
{
return;
}
};
Vftable for C & B, D & B are 
identical. Linker will de-duplicate.
“DoStuff” for B and B are 
identical. Linker will de-duplicate them.
CastGuard checks make “DoStuff” implementations different (type specific cast checks) and reference 
vftables so they can no longer be de-duplicated. Some WinRT binaries got ~20% bigger.
struct C : B
{
void WhoAmI()
{
PrintWhoIAm();
}
static void PrintWhoIAm()
{
printf(“C");
}
};
A
B
C
D
B
A::$vftable@
B::$vftable@
C::$vftable@
D::$vftable@
B::$vftable@
Class Hierarchy
Vftable Hierarchy
These types are never created, so a valid object will 
NEVER have their vftables.
No reason to include these vftables in checks since an 
object can never have them.
A
B
C
D
B
A::$vftable@
B::$vftable@
C::$vftable@
D::$vftable@
B::$vftable@
Class Hierarchy
Vftable Hierarchy
The only vftable a “B*” pointer could have is “C::$vftable@” which is legal when casting to “C”, 
no point in doing a cast check.
void Demo(B* MyPtr) {
static_cast(MyPtr);
}
A “B*” either points to a “B” or a “C”. We know “B” was never created, must be “C”.
Optimizing for CRTP
Optimization can also help non-CRTP related casts.
We were able to statically prove away EVERY cast check in 
Windows.UI.Xaml.Controls.dll, going from 20% binary size regression to 0%.
Similar CRTP optimization issues exist for other technologies.
XFG (Extended Flow Guard) – Caused a 43% binary size regression on 
“Windows.UI.Xaml.Controls.dll” due to fine-grain indirect call signature checks. We got this fixed 
by making function signature ignore template specializations.
Clang CFI – Breaks CRTP code sharing due to fine-grain indirect call signature checks and cast 
checks (when derived-cast checks enabled). Likely a similar regression to CastGuard and XFG.
Performance
Near-zero runtime overhead 
 Spec 2006 showed no regression.
 No overhead detected in Windows components.
Binary size impact under 1%
 Components without downcasting have no overhead.
 CRTP optimization can statically prove safety of many 
casts.
Future 
Possibilities
Strict Mode
 Mark hierarchies as “strict” indicating they should never 
have an app compat check, all failures are fatal.
 Could force full bitmap checks (defend against type 
confusions caused by memory corruption).
Acceleration for dynamic_cast
 Dynamic_cast hot path uses CastGuard style check, 
only does the full check in the app compat check path.
Just ideas – nothing committed.
Conclusion
It is possible to provide performant cast 
checks to prevent certain types of type 
confusion. May even be possible to use 
CastGuard tech in the hot-path of 
dynamic_cast.
CastGuard is flighting in Hyper-V code in 
Windows Insider Preview builds.
Additional Windows components will use 
CastGuard in the future.
Acknowledgements
CastGuard would not be possible without:
 Inspiration from Clang/LLVM –fsanitize=cfi-derived-
cast.
 Many folks across Windows, Visual Studio, and MSRC.
Appendix
Virtual Base 
Inheritance
Overview
Inheritance works efficiently because offsets can be computed 
statically.
A pointer to an object can be upcast or downcast using simple pointer arithmetic based on 
where the type being casted to is “laid out” in the object’s memory.
The same is generally true for multiple inheritance.
Object layout is known at compile time and any static_cast can be statically computed at 
compile time.
Things get complicated when the same base class is inherited from 
multiple times (i.e. diamond pattern).
Non-Virtual Base Diamond Pattern
B
A
C
D
E
F
Object “F” layout:
0x0   vftable of A
0x8   
0x?   
0x?   
0x?   vftable of A
0x?   
0x?   
0x?   
0x?   
The object “A” is inherited from twice and so 
there are two copies of it in “F”. This may not be 
desirable.
Note: Cast checks for this pattern are identical to 
single inheritance / multiple inheritance
Diamond Pattern Issues
An object of type “F” contains two copies of the type “A”.
“A” is inherited from by both “B” and “C”. Which means “B” and “C” have their own copy of “A”.
C++ does not automatically determine “you are using multiple inheritance and inheriting from 
the same base class twice so I will de-duplicate the object”. Sometimes having multiple copies of 
the same base object is actually desired.
Can lead to bizarre behavior.
You cannot directly static_cast a pointer of type “A” to a pointer of type “F”. “F” has two copies of 
“A” so you need to first static_cast to either “B” or “C” and then cast to “F” so the compiler knows 
which copy of “A” you are trying to access.
Virtual Base Inheritance Offers a Solution
Allows the compiler to de-duplicate the base class “A”.
Anything that inherits from “A” cannot trivially cast to it since the 
location of “A” depends on the layout of the underlying type that was 
created.
i.e. an object of type “B” and type “F” may have “A” laid out at different positions.
A virtual base table is created in each object that contains the offset of 
“A” from the current “this” pointer.
Casting to “A” requires looking up how to adjust the current “this” pointer by reading from the 
virtual base table.
Virtual Base Diamond Pattern
B
A
C
D
E
F
Object “F” layout:
0x0   
0x?   
0x?   
0x?   vftable of A
0x?   
0x?   
0x?   
0x?   
0x?   
There is a single copy of “A” in the object “F”
The object has a “virtual base table” to identify 
where “A” is relative to the object base.
Virtual Base Diamond Pattern
Virtual base inheritance allows for a single copy of the A.
Virtual base table contains the offset from the “this” pointer of the 
current object to the base of “Object A” inside the object.
Object “F” layout:
0x0   
0x?   
0x?   
0x?   
0x?   
0x?   
0x?   
0x?   vftable of A
0x?   
Object “B” layout:
0x0   
0x?   
0x?   vftable of A
0x?   
B
A
C
D
E
F
Virtual Base Vftable View
B::$vftable@
D::$vftable@
E::$vftable@
F::$vftable@
A::$vftable@
C::$vftable@
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
D::$vftable@
0x20
C::$vftable@
0x28
E::$vftable@
0x30
F::$vftable@
0x38
__CastGuardVftableEnd
Cast Validity
A::$vftable@
B::$vftable@
D::$vftable@
C::$vftable@
E::$vftable@
F::$vftable@
A
✓
✓
✓
✓
✓
✓
B
✓
✓
✓
C
✓
✓
✓
D
✓
✓
E
✓
✓
F
✓
LHS Type (Type Being Cast To)
Legal Underlying Vftables
B::$vftable@
D::$vftable@
E::$vftable@
F::$vftable@
A::$vftable@
C::$vftable@
Bitmap Creation
A::$vftable@
B::$vftable@
D::$vftable@
C::$vftable@
E::$vftable@
F::$vftable@
A
✓
✓
✓
✓
✓
✓
B
✓
✓
✓
C
✓
✓
✓
D
✓
✓
E
✓
✓
F
✓
LHS Type (Type Being Cast To)
Legal Underlying Vftables
Bitmap bits relative to start of object
A_Bitmap
1
1
1
1
1
1
B_Bitmap
1
1
0
0
1
C_Bitmap
1
1
1
D_Bitmap
1
0
0
1
E_Bitmap
1
1
F_Bitmap
1
LHS Type (Type Being Cast To)
Notes
 Bitmap has zeros in it, cannot be optimized to a range check.
 With complicated virtual base hierarchies, there may be no way to 
order the vftables that results in bitmaps of all 1’s.
 We don’t even attempt to brute force alternate vftable orderings since very little code uses 
virtual base, just pay the overhead.
; Start of CastGuard check
; rcx == the right-hand side object pointer.
; First do the nullptr check. This could be optimized away but is not today.
; N.B. If the static_cast has to adjust the pointer base, this nullptr check
; already exists.
4885c9         test    rcx, rcx
7433           je      CodeGenTest!DoCast+0x3e
; Load the virtual base table
488b01         mov     rax, qword ptr [rcx]
; Right-hand side pointer adjustment (not part of CastGuard)
488d59e8       lea     rbx, [rcx-18h]
; Read from virtual-base table
8b5004         mov     edx, dword ptr [rax+4]
; Load vftable to compare against
488d057c6c0500 lea     rax, [CodeGenTest!MyGrandChild1::`vftable']
; Add the offset read from the virtual-base table to the object pointer
4803ca         add     rcx, rdx
; Read the vftable
488b11         mov     rdx, qword ptr [rcx]
; Do the ordinal check using an ROL instruction to force alignment
; Low bits below the alignment get shifted to high bits making the
; value huge.
482bd0         sub     rdx, rax
48c1c240       rol
rdx, 3dh   ; shift out low 3 bits
4883fa01       cmp
rdx, 3     ; ordinal range check
; Jump to app compat check if the range check fails
7336           jae
CodeGenTest!DoCast+0x65
; Load the bit vector and do a bit test against it using the ordinal 
computed
488d059af20500 lea     rax, [CodeGenTest!CastGuardBitVector]
480fa310       bt
qword ptr [rax], rdx
; Jump to a failure stub if the bitmap test fails
7330           jae
CodeGenTest!DoCast+0x6c
eb02           jmp
CodeGenTest!DoCast+0x40
; End of CastGuard check
Optimizations
Bitmaps that are all 1’s can be turned in to range checks
Bitmap bits relative to start of object
A_Bitmap
1
1
1
1
1
1
B_Bitmap
1
1
0
0
1
C_Bitmap
1
1
1
D_Bitmap
1
0
0
1
E_Bitmap
1
1
F_Bitmap
1
LHS Type (Type Being Cast To)
Optimizations
Bitmaps where all 1’s are at fixed offsets from each other don’t need a 
bitmap (but do need to enforce alignment)
Bitmap bits relative to start of object
A_Bitmap
1
1
1
1
1
1
B_Bitmap
1
1
0
0
1
C_Bitmap
1
1
1
D_Bitmap
1
0
0
1
E_Bitmap
1
1
F_Bitmap
1
LHS Type (Type Being Cast To)
1. Find pointer delta (current_vftable –
address_of_D_vftable)
2. Compute the ordinal by shifting the delta
3. Do a range check on the ordinal
Optimizations
Prefer to not use vftables that have virtual base inheritance.
Example: 
RHS type and LHS type each have 2 vftable’s
1 vftable is part of a virtual-base class hierarchy
1 vftable is part of a normal inheritance class hierarchy
Do the CastGuard check on the vftable from the normal inheritance 
hierarchy so that no virtual base overhead is needed
Misc
One Definition Rule (ODR) Violations
Sometimes can be detected at compile time (i.e. ODR violation occurs 
in LTCG code)
To ease adoption, CastGuard will not protect these hierarchies but won’t error.
If detected at link time (i.e. static lib introduces ODR violation):
If static lib introduces a smaller or identically sized vftable, we keep the vftable already placed in 
CastGuard region by the compiler.
If static lib introduces a bigger vftable, linker must select this vftable (documented behavior). 
This would break CastGuard, so we throw a linker error.