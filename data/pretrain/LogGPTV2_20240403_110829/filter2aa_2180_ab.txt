0x77d1f92f
push ‘calc’
push ‘.exe’
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
jmp esp
0x77d1f92f
CVE-2003-0344
0x00803E00
[Ret Address]
[Shellcode]
0x00804000
_/_/_/_/_/_/
abcd
efgh
0x77d1f92f
push ‘calc’
push ‘.exe’
push esp
call WinExec
_/_/_/_/_/_/
_/_/_/_/_/_/
_/_/_/_/_/_/
Return Oriented Programming - Timeline
Morris Worm
Smashing The 
Stack For Fun 
And Profit
DEP
Windows XP 
SP2
1988
1996
2004
• Enforces RWX on memory
• Cornerstone for ROP
• ROP used as a bridge 
• Read / Write memory vulnerability
• Setting it to Executable memory
• Running it
Data Execution Prevention
Flower Power
Bernie Boston, 1967
Return Oriented Programming - Timeline
Morris Worm
Smashing The 
Stack For Fun 
And Profit
1988
1996
DEP
Windows XP SP2
2004
2006
Windows Vista
ASLR
• Randomizes DLLs base address every boot
• Prevents jumping into know addresses
• Effective mostly on 64 bit processes
• Low entropy on 32 bit address space
Address Space Layout Randomization
• Vulnerable software code
• Information Gathering (Arbitrary Read)
• Stack location
• System function address(es)
• Memory Manipulation (Arbitrary Write)
• Overwrite the stack
• Affect registers
• Hijack Code Execution
• A by-product of previous steps!
Overlooked Steps of Exploitation
Return 
Oriented 
Programming
NYC
Helen Levitt, 1938
ASLR
Windows Vista
Return Oriented Programming - Timeline
Morris Worm
Smashing The 
Stack For Fun 
And Profit
1988
1996
DEP
Windows XP SP2
2004
2006
2007
ROP
“The Geometry 
of Innocent 
Flesh on the 
Bone” by 
Hovav Shacham
• The Geometry of Innocent Flesh on the Bone, 
Hovav Shacham, 2007
• Reuse existing code in memory
• ret
• jmp esp
• Leverage stack semantics (call / ret)
Return Oriented Programming
NYC
Helen Levitt, 1939
Return Oriented Programming
EIP 0x00402000
Memory
0x00400000
0x00403000
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Return Oriented Programming
EIP 0x00402005
Memory
0x00400000
0x00403000
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Return Oriented Programming
EIP 0x0040200C
Memory
0x00400000
0x00403000
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Return Oriented Programming
EIP 0x00402010
Memory
0x00400000
0x00403000
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Return Oriented Programming
EIP 0x00402014
Memory
0x00400000
0x00403000
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Return Oriented Programming
EIP 0x00402018
Memory
0x00400000
0x00403000
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Instruction
Return Oriented Programming
ESP 0x00802000
EIP 0x00402018
0x00000000
0xFFFFFFFF
Instructions
ret
Memory
0x00802000
0x00804000
0x004020F0
0x002020F0
0x7F400123
0x00C0FFEE
Instructions
ret
Instructions
ret
Return Oriented Programming
ESP 0x00802000
EIP 0x00402018
0x00000000
0xFFFFFFFF
Instructions
ret
Memory
0x00802000
0x00804000
0x004020F0
0x002020F0
0x7F400123
0x00C0FFEE
Instructions
ret
Instructions
ret
Return Oriented Programming
ESP 0x00802004
EIP 0x002020F0
0x00000000
0xFFFFFFFF
Instructions
ret
Memory
0x00802000
0x00804000
0x004020F0
0x002020F0
0x7F400123
0x00C0FFEE
Instructions
ret
Instructions
ret
Return Oriented Programming
ESP 0x00802004
EIP 0x002020F9
0x00000000
0xFFFFFFFF
Instructions
ret
Memory
0x00802000
0x00804000
0x004020F0
0x002020F0
0x7F400123
0x00C0FFEE
Instructions
ret
Instructions
ret
Return Oriented Programming
ESP 0x00802008
EIP 0x7F400123
0x00000000
0xFFFFFFFF
Instructions
ret
Memory
0x00802000
0x00804000
0x004020F0
0x002020F0
0x7F400123
0x00C0FFEE
Instructions
ret
Instructions
ret
Return Oriented Programming
ESP 0x00802008
EIP 0x7F40014F
0x00000000
0xFFFFFFFF
Instructions
ret
Memory
0x00802000
0x00804000
0x004020F0
0x002020F0
0x7F400123
0x00C0FFEE
Instructions
ret
Instructions
ret
• A sequence of instructions (+ret) that perform logical operation
• Copy a value into memory
• Change memory permissions to Execute
• Load values into specific registers
Return Oriented Programming - Gadgets
• A sequence of instructions (+ret) that perform logical operation
• Copy a value into memory
• Change memory permissions to Execute
• Load values into specific registers
• Example: Copy data into memory
pop eax
pop ecx
mov [ecx], eax
Return Oriented Programming - Gadgets
Return Oriented Programming
ESP 0x00802000
EIP 0x004020F0
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0x00000000
ECX 0x00000000
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x00802004
EIP 0x004020F1
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00000000
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x00802008
EIP 0x002020F0
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00000000
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x0080200C
EIP 0x002020F1
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00061230
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x0080200C
EIP 0x002020F1
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00061230
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x0080200C
EIP 0x002020F1
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00061230
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x0080200C
EIP 0x002020F1
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00061230
0x7F400123
0x00C0FFEE
0x00000000
Stack
Code
Return Oriented Programming
ESP 0x00802010
EIP 0x7F400125
0x00061230
0x002020F0
0x004020F0
0x7F400123
0xFFFFFFFF
pop ecx
ret
Stack
Code
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x004020F0
0xDEADBEEF
0x002020F0
0x00061230
pop eax
ret
mov [ecx], eax
ret
EAX 0xDEADBEEF
ECX 0x00061230
0x7F400123
0x00C0FFEE
0xDEADBEEF
• First 4 parameters are passed on rcx, rdx, r8, r9
• 32 bytes are pre-allocated on the stack
• All other parameters are passed on the stack (after pre-allocation)
64 bit Call Semantics
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804010
rip 0x000000007F400125
0x00802000
0x00802000
0x00802004
0x00802008
0x0080200C
0x00802010
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000000000
rdx 0x0000000000000000
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000000
r9 0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804010
rip 0x000000007f400100
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000000000
rdx 0x0000000000000000
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000000
r9 0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f400105
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000000000
rdx 0x0000000000000000
0x0000000000000000
0x0000000000000000