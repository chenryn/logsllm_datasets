件的存储格式”。GNU项目的gnumeric电子表格程序、Linux Documentation
Project（注9）以及OpenOffice.org（注10）的办公软件都已经这么微了。
以定界符分隔字段的行，这是一种方便用来与更复杂软件交换数据的格式，例如电
子表格与数据库，不过这类系统通常都提供某种形式的报表产生功能，可轻易地将
数据提取为分栏的流，之后便能利用适当的程序语言所写的过滤器，更进一步地处
理这些数据，例如产品目录与名录发布都是这种方法的最佳应用。
途 9:
E, http://www.tidp.org/,
途10:
见 kttp://www.openoffice.org/.
www.TopSage.com
---
## Page 135
第6章
变量、判断、重复动作
变量对于正规程序而言很重要。除了维护有用的值作为数据，变量还用于管理程序状态。
由于Shell主要是字符串处理语言，所以你可以利用Shell变量对字符申值微很多事，然
而，因为算术运算也是必要的，所以POSIXShell也提供利用Shell变量执行算术运算
的机制。
流程控制的功能造就了程序语言：如果你有的只是命令语句，是不可能完成任何工作的。
本章介绍了用来测试结果、根据这些结果做出判断以及加人循环的功能。
最后介绍的是函数：它可以将相关工作的语句集中在同一处。这么一来就可以在脚本里
的任何位置，轻松执行此工作。
6.1变量与算术
Shell变量如同传统程序语言的变量一样，是用来保存某个值，直到你需要它们为止，我
们在2.5.2节里已介绍过Shell变量名称与值的基本概念，但除此之外，Shell脚本与函数
还有位置参数（positionalparameter）的功能：传统的说法应该是“命令行参数”。
Shel1脚本里经常出现一些简单的算术运算，例如每经过一次循环，变量就会加1.POSIX
Shell为内嵌（inline）算术提供了一种标记法，称为算术展开（arithmetic expansion）。
Shell会对S（（...)）里的算术表达式进行计算，再将计算后的结果放回到命令的文本内
容。
6.1.1变量赋值与环境
Shell变量的赋值与使用方式已在2.5.2节中提过，但这个小节将解释之前未提及的内容。
123
www.TopSage.com
---
## Page 136
124
第6常区
有两个相似的命令提供变量的管理，一个是readonly，它可以使变量成为只读模式：而m1
赋值给它们是被禁止的。在Shell程序中，这是创建符号常量的一个好方法：
hour8_per_day=24 seconds_per_hour=3600 days_per_week=7
赋值
readonly hours_per_day seconds_per_hour days_per_week
设为只读模式
export,readonly
语法
export name[=word]...
export -p
readonly name[=word]...
readonly -p
用途
export用于修改或打印环境变量，readonly则使得变量不得修改。
主要选项
-P
打印命令的名称以及所有被导出（只读）变量的名称与值：这种方式可使
得Shell重新读取输出以便重新建立环境（只读设至）。
行为模式
使用-D选项，这两条命令都会分别地打印它们的名称以及被导出的或只读的
所有变量与值。否则，会把适当的属性应用到指定的变量。
警告
许多商用UNIX系统里的/bin/sh，仍然不是POSIX兼客版本，因此，export
与readonly的变量赋值形式可能无法工作，要实现最严格的可移植性，可使
用：
FOO=somevalue
export PO0
BAR=anothervalue
readonly BAR
较常见的命令是export，其用法是将变量放进环境（environment）里。环境是一个名
称与值的简单列表，可供所有执行中的程序使用。新的进程会从其父进程继承环境，也
可以在建立新的子进程之前修改它。export命令可以将新变量添加到环境中：
PATH=SPATH:/usr/1ocal/bin
更新PATH
export PATH
2用台
最初的BourneShell会要求你使用一个两步骤的进程：也就是，将赋值与导出（export）
www.TopSage.com
---
## Page 137
变量、判断、重复动作
125
或只读（readonly）的操作分开（如前所示）.POSIX标准允许你将赋值与命令的操作
结合在一起：
readonly hour8_per_day=24 seconds_per_hour=3600 daye_pex_week=7
export PATH=$PATH:/usr/local/bin
export命令可用于显示当前环境：
$export -p
export CD9ATH=* :/home/tolstoy*
显示当前的环境
export DISPLAY=*:0.0"
export xv=*/home/tolstoy/.kshrc*
export gxINIT=*eet ai 8m*
export FCEDIT=*vi*
变量可以添加到程序环境中，但是对Shell或接下来的命令不会一直有效：将该（变量）
赋值，置于命令名称与参数前即可：
PATH=/bin:/usr/bin awk *...* file1 fi1e2
这个PATH值的改变仅针对单个aWk命令的执行。任何接下来的命令，所看到的都是在
它们的环境中PATH的当前值。
export命令仅将变量加到环境中，如果你要从程序的环境中删除变量，则要用env命
令，env也可临时地改变环境变量值：
env -i FATH=SPATH HOME=SHOME LC_ALL=C awk *..,′ fI1e1 f11e2
-i选项是用来初始化（initializes）环境变量的：也就是丢弃任何的继承值，仅传递命
令行上指定的变量给程序使用。
unset命令从执行中的Shell中删除变量与函数，默认情况下，它会解除变量设置，也
可以加上-V来完成：
unset full_nane
除full_name变量
unset -v first niddle last
删除其他变量
使用unset-f删除函数：
定义函数
who 1 avk *( print $1 )· 1 sort -
产生排序后的用户列表
unset -f who_is_on
测除函数
Shell早期版本没有函数功能或unset命令，POSIX加入了-f选项，以执行副除函数的
操作，之后还加入-V选项，以便与-f相对应。
www.TopSage.com
---
## Page 138
126
第6章
env
语法
env [ -i 1[ var=value .
用建
当command_rame被env执行时，可针对被command_name继承为来的环境
有更细致的控制。
主委选项
-i.
忽略继承的环境、仅使用命令行上所给定的变量与值。
行为
未提供ccmmand_name时、显示环境中所有变量的名称与其值。否测，在命
令行上使用变量赋值，在引用command_name之前，以修改继承的环境。加
上-i选项，enV会完全息略继承的环境，显只使用所提供的变量与值。
登善
打印时，enV不会正确地为环境变登佳加上引号，以供重新输入到Shell中。
如果需要此功施，可使用export-P。
unset
语法
unset [ -v ] variable ..
unset -f function ...
用途
从当前Shell删除变量与函数，
主要选项
- f
解除（删除）指定的函数。
=V
解除（删除）指定的变量。没有任何选项时，这是跌认行为模式，
行为模式
加果没有提供选项，则参数将视为变量名称，并告知变量已删除，使用-V选
项也会发生相网的行为。如使用-F选项，参数测被视为函数名称，并删除面
数。
www.TopSage.com
---
## Page 139
变量、判断、重复动作
2
则会完全删除它。这一差异在于“是变量设置”以及“是变量设置，但非null”展开，这
部分将在下一个小节说明，
6.1.2
参数展开
参数展开（parameterexpansion）是Shell提供变量值在程序中使用的过程：例如，作
为给新变量的值，或是作为命令行的部分或全部参数。最简单的形式如下所示：
reminder=*Time to go to the dentist!*
将值存储在reminder中
sleep 120
echo $reminder
显示信息
等持两分钟
在Shell下，有更复杂的形式可用于更特殊的情况。这些形式都是将变量名称括在花括
号里（$（variable）），然后再增加额外的语法以告诉Shell该做些什么。花括号本身也
时，它就派得上用场了：
reminderw*Time to go to the dentist!*
将值存储在reminder中
echo _s(reminder)_
sleep 120
加下划线符号强调显示的信息
曹告：默认情况下，未定义的变量会展开为mull（空的）字符串，程序随便乱写，就可能会导致
灾难发生：
rn -fr /SMYPROGRA
如未设置MYPROGRU，就会有大灾难发生了！
所以，写程序要一直非常小心！
6.1.2.1
展开运算符
第一组字符申处理运算符用来测试变量的存在状态，且为在某种情况下允许默认值的替
换。如表6-1所示。
表6-1：替换运算符
运算符
替换
$( vazname:=word)
如果varname存在且非null，则返网其值，否则，返网word
用途：如果变量未定义，则返回默认值。
范例：如果count未定义，则s（count：-0）的值为0.
www.TopSage.com
---
## Page 140
128
第6章
表6-1：替换运算符（续）
遥算
(pron=1eweuzeA)$
如果varnamme存在且不是null，则返回它的值；否则，设置它为
word，并返国其值。
用途：如果变量未定义，则设置变量为默认值。
范例：如果count未被定义，则s（count；=0）设置count为0。
S（varname:?message}如果vazname存在且非null，则返回它的值，否则，显示vazname：
message，并退出当前的命令成脚本。省略message会出现默认
信息parameter null or not set，注意，在交互式Shell下
不需要退出（在不同的Shell间会有不同的行为，用户需自行注
意）。
用途：为了捕提由于变量未定义所导致的错误，
范例：$[count:？*undefined!*}将显示count：undefined!,
且如果count未定义，期退出。
${varname:+word)
如果varname存在且非null，则返回word，否则，返目null
用途：为测试变量的存在。
范例：如果count已定义，期s（count：+1）返回1（也就是“真"）。
表6-1里每个运算符内的冒号（：）都是可选的。如果省略冒号，则将每个定义中的“存
表6-1中的运算符已在BourneShell下使用了20多年。POSIX标准化额外的运算符，用
来执行模式匹配与删除变量值里的文本。新的模式匹配运算符，通常是用来切分路径名
称的组成部分，例如目录前缓与文件名后缀。除了列出Shell的模式匹配运算符之外，表
6-2也展现了这些运算符的运行范例。在这些例子里，我们都假设变量path的值为
/home/tolstoy/mem/long. file.name ,
注意：表6-2中运算符使用的模式，以及Shell里其他地方，例如case语句里所使用的模式，都
为Shell“通配字符（wildcard)*模式，这些在7.5节里有详细的说明。我们希望你能通过
每天使用Shell来熟悉这些基本功能。
表6-2：模式匹配运算符
运算符
替换
${variable#pattern)
如果模式匹配于变量值的开头处，则删除匹配的最短部分，并
返回剩下的部分。
www.TopSage.com
---
## Page 141
变量、判断、重复动作
129
表6-2：模式匹配运算符（续）
运算符
例：$(path#/*/)
结果： tolstoy/mem/long.fi1e.name
例：$(variablo##pattern)
如果模式匹配于变量值的开头处，则删除匹配的最长部
分、并返回剩下的部分，
例：$(path##/*/)
结果：1ong.fi1e.name