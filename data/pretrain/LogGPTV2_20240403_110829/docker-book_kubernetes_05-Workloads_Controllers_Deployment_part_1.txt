# Deployment
> * RC只支持基于等式的selector（env=dev或environment!=qa），但Replica Set还支持新的，基于集合的selector（version in (v1.0, v2.0)或env notin (dev, qa)），这对复杂的运维管理很方便。
> * 使用Deployment升级Pod，只需要定义Pod的最终状态，k8s会为你执行必要的操作，虽然能够使用命令`# kubectl rolling-update`完成升级，但它是在客户端与服务端多次交互控制RC完成的，所以REST API中并没有rolling-update的接口，这为定制自己的管理系统带来了一些麻烦。
> * Deployment拥有更加灵活强大的升级、回滚功能。
*Deployment* Controller为 [Pod](https://kubernetes.io/docs/concepts/workloads/pods/pod/) 和 [ReplicaSet](https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/) 提供声明式的更新。
只需在Deployment对象中描述*所期望的状态* ，Deployment Controller就会以受控的速率将实际状态逐步转变为你所期望的状态。您可以定义Deployment以创建新的ReplicaSet，也可删除现有Deployment并让新的Deployment采用其所有资源。
> **注意：**您不应该管理Deployment所拥有的ReplicaSet。而应该操作Deployment对象从而管理ReplicaSet。如果你认为有必须直接管理Deployment所拥有的ReplicaSet的场景，请考虑在Kubernetes repo中提Issue。
## 用例
以下是Deployment的典型用例：
- [Create a Deployment to rollout a ReplicaSet](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment) （创建Deployment从而升级ReplicaSet）。 ReplicaSet在后台创建Pod。检查升级的状态，看是否成功。
- 通过更新Deployment的PodTemplateSpec来 [Declare the new state of the Pods](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment) （声明Pod的新状态）。 这样，会创建一个新的ReplicaSet，并且Deployment会以受控的速率，将Pod从旧ReplicaSet移到新的ReplicaSet。每个新的ReplicaSet都会更新Deployment的修订版本。
- 如果的Deployment当前状态不稳定，则 [Rollback to an earlier Deployment revision](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-a-deployment) （回滚到之前的Deployment修订版本）。每次回滚都会更新Deployment的修订版本。
- [Scale up the Deployment to facilitate more load](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment) （扩展Deployment，以便更多的负载）
- [Pause the Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#pausing-and-resuming-a-deployment) （暂停Deployment），从而将多个补丁应用于其PodTemplateSpec，然后恢复它，开始新的升级。
- [Use the status of the Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#deployment-status) （使用Deployment的状态）作为升级卡住的指示器。
- 清理您不再需要的 [Clean up older ReplicaSets](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy) （清理旧的ReplicaSet）
## 创建Deployment
以下是Deployment的示例。它创建一个包含三个`nginx` Pod的ReplicaSet：
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
```
在本例中：
- 将创建名为`nginx-deployment` 的Deployment，由`metadata: name` 字段定义。
- Deployment创建三个Pod副本，由`replicas` 字段定义。
- Pod模板的规范，即：`template: spec`字段定义Pod运行一个 `nginx` 容器，它运行1.7.9版的`nginx`  [Docker Hub](https://hub.docker.com/) 镜像。
- Deployment打开80端口供Pod使用。
`template` 字段包含以下说明：
- Pod被打上了`app: nginx` 的标签
- 创建一个名为`nginx` 的容器。
- 运行`nginx 1.7.9` 镜像。
- 打开端口`80` ，以便容器可以发送和接收流量。
要创建此Deployment，请运行以下命令：
```shell
kubectl create -f https://raw.githubusercontent.com/kubernetes/kubernetes.github.io/master/docs/concepts/workloads/controllers/nginx-deployment.yaml
```
注意：您可以将`--record` 附加到此命令以在资源的annotation中记录当前命令。这对将来的审查（review）很有用，例如调查在每个Deployment修订版中执行了哪些命令。
接下来，运行`kubectl get deployments` ，将会输出类似如下内容：
```
NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   3         0         0            0           1s
```
当您inspect集群中的“Deployment”时，将会显示以下字段：
- `NAME` 列出了集群中Deployment的名称。
- `DESIRED` 显示您创建Deployment时所定义的期望*副本*数。这是*所需的状态* 。
- `CURRENT` 显示当前正在运行的副本数。
- `UP-TO-DATE` 显示已更新，从而实现期望状态的副本数。
  - > 译者按：该字段常用于在滚动升级时，显示有多少个Pod副本已成功更新到最新版本。
- `AVAILABLE` 显示当前有可用副本的数量。
- `AGE` 显示应用程序已经运行了多久。
注意每个字段中的值如何对应于Deployment规范中的值：
- 根据`spec: replicas` 字段，期望的副本数量是3。
- 根据`.status.replicas` 字段，当前副本的数量为0。
- 根据`.status.updatedReplicas` 字段，最新副本的数量为0。
- 根据`.status.availableReplicas` 字段，可用副本的数量为0。
要查看Deployment升级的状态，请运行 `kubectl rollout status deployment/nginx-deployment` 。此命令将会返回类似如下的输出：
```
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...
deployment "nginx-deployment" successfully rolled out
```
几秒钟后再次运行`kubectl get deployments` ：
```
NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   3         3         3            3           18s
```
由结果可知，Deployment已创建三个Pod副本，并且所有副本都是最新的（它们包含最新的Pod模板）并且可用（Pod状态为Ready的持续时间至少得达到`.spec.minReadySeconds` 字段定义的值）。
> 编者按：拓展阅读：
要查看Deployment创建的ReplicaSet（ `rs` ），可运行`kubectl get rs` ：
```
NAME                          DESIRED   CURRENT   READY   AGE
nginx-deployment-2035384211   3         3         3       18s
```
请注意，ReplicaSet的名称的格式始终为 `[DEPLOYMENT-NAME]-[POD-TEMPLATE-HASH-VALUE]` 。创建Deployment时会自动生成该hash。
要查看为每个Pod自动生成的label，请运行 `kubectl get pods --show-labels` 。 可返回类似以下输出：
```
NAME                                READY     STATUS    RESTARTS   AGE       LABELS
nginx-deployment-2035384211-7ci7o   1/1       Running   0          18s       app=nginx,pod-template-hash=2035384211
nginx-deployment-2035384211-kzszj   1/1       Running   0          18s       app=nginx,pod-template-hash=2035384211
nginx-deployment-2035384211-qqcnn   1/1       Running   0          18s       app=nginx,pod-template-hash=2035384211
```
ReplicaSet会确保在任何时候都有三个`nginx` Pod运行。
**注意：**您必须在Deployment中指定适当的选择器和Pod模板标签（在本例中为`app: nginx` ）。不要与其他Controller（包括其他Deployment和StatefulSet）所使用的标签或选择器重叠。Kubernetes不会阻止您重叠，如果多个Controller选择器发生重叠，那么这些Controller可能会出现冲突并且出现意外。
### Pod-template-hash标签
**注意**：请勿修改此标签。
`pod-template-hash label`由Deployment Controller添加到其创建或采用的每个ReplicaSet上。
此标签可确保Deployment的子ReplicaSet不重叠。 它通过将ReplicaSet的`PodTemplate` 进行hash，并将生成的hash值作为标签，添加到ReplicaSet选择器、Pod模板标签、ReplicaSet所拥有的任何现有Pod中。
## 升级Deployment
**注意：**当且仅当Deployment的Pod模板（即`.spec.template` ）发生变化时，Deployment才会发生升级。例如，如果模板的标签或容器镜像被更新，则会触发Deployment的更新。 其他更新，例如对Deployment伸缩，不会触发更新。
假设我们现在想要升级nginx Pod，让其使用`nginx:1.9.1` 镜像，而非`nginx:1.7.9` 镜像。
```shell
$ kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1
deployment "nginx-deployment" image updated
```
也可`edit` Deployment，并将`.spec.template.spec.containers[0].image` 从`nginx:1.7.9` 改为  `nginx:1.9.1` ：
```shell
$ kubectl edit deployment/nginx-deployment
deployment "nginx-deployment" edited
```
要想查看升级的状态，可运行：
```shell
$ kubectl rollout status deployment/nginx-deployment
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...
deployment "nginx-deployment" successfully rolled out
```
升级成功后，您可能希望`get` Deployment：
```shell
$ kubectl get deployments
NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   3         3         3            3           36s
```
* up-to-date：表示Deployment已升级为最新配置的副本数量
* current：表示此Deployment管理的副本总数
* available：表示当前可用副本的数量。
运行`kubectl get rs` 即可看到，Deployment通过创建一个新的ReplicaSet并将其扩展到3个副本，并将旧ReplicaSet减少到0个副本的方式更新Pod。
```
$ kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
nginx-deployment-1564180365   3         3         3       6s
nginx-deployment-2035384211   0         0         0       36s
```
运行`get pods` ，则只会显示新的Pod：
```
$ kubectl get pods
NAME                                READY     STATUS    RESTARTS   AGE
nginx-deployment-1564180365-khku8   1/1       Running   0          14s
nginx-deployment-1564180365-nacti   1/1       Running   0          14s
nginx-deployment-1564180365-z9gth   1/1       Running   0          14s
```
当下次我们要更新这些Pod时，只需再次更新Deployment的Pod模板。
Deployment可确保在升级时，只有一定数量的Pod会被关闭。默认情况下，它确保至少少有于1个期望数量的Pod运行（最多1个不可用）。