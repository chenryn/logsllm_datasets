# WAF Bypass via Xerces Parsing

##### Translation Disclaimer
This article is a translation. The content and meaning of the original text should be considered authoritative. Any discrepancies or inaccuracies in the translation are not reflective of the original document.

The Java XML parsing mechanism, which is based on _xerces_, can be exploited due to the inherent characteristics of XML and certain features of xerces. This discrepancy between how WAF (Web Application Firewall) and backend code interpret XML can be leveraged for bypassing security measures. The following discussion was compiled three months after reviewing the relevant code, so it may not exhaustively cover all the nuances involved in each bypass technique.

## 1. Character Encoding

### 1.1 Magic Charset
An XML document can declare its version and character set through the header, with common encodings being UTF-8, GBK, and ISO-8859-1. When the Java xerces library reads an XML document, it first selects an appropriate character stream Reader based on the first four bytes of the XML file. If the XML document includes a header, this Reader is used only for reading the header; the Reader for the rest of the document is then determined by the encoding specified in the header. If no header is present, the initial Reader will parse the entire document. 

The critical code responsible for choosing the Reader based on the first four bytes of the XML document is found in:
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalimplXMLEntityManager.java`

The method `getEncodingName` within this class determines the character set. Certain encodings, such as UCS-4 2143 and UCS-4 3412, will trigger an exception indicating unsupported character encoding. Based on these observations, we can summarize the supported encodings, referred to here as **Magic Charset** for clarity.

### 1.2 Declared Charset
If a user specifies a character set using the `encoding` attribute in the XML document's header, the subsequent document parsing will use a Reader corresponding to that encoding. The key code segments for setting the Reader are located in:
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalimplXMLDocumentFragmentScannerImpl.java`
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalimplXMLEntityScanner.java`

It is also important to note the `EncodingMap` in `createReader`, which maps alias names to actual character sets, e.g., IBM037 and CP037 refer to the same character set. For more details, see:
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalutilEncodingMap.java`

### 1.3 Double Charset
Given that the logic for handling magic charset and declared charset operates independently, it is possible to apply different encodings to the XML header and body respectively.

## 2. String Splitting Techniques

### 2.1 Label Insertion
Inserting additional labels to split strings, for example:
- `" union select 1 -- -` 
- `" unifoo1 foo2on select 1 -- -`

Using comments for string splitting:
- `" union select 1 -- -`

Employing Processing Instructions (PI) for string splitting:
- `" union select 1 -- -`

Refer to the following source for implementation details:
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalimplXMLDocumentScannerImpl.java`

### 2.2 CDATA
CDATA sections can also be utilized to split strings, for instance:
- `" unin select 1 -- -`

## 3. DTD (Document Type Definition)

It is worth noting that xstream disables DTDs by default. While XMLDecoder does not, Weblogicâ€™s XMLDecoder cannot be exploited due to its unique parsing process. The following examples omit detailed code references, some of which originate from RFCs and were reviewed three months ago.

### 3.1 ATTLIST
Attributes and their values can be defined using DTD. For example, given an original XML document, one could write:
- `]>`

HTML encoding and CDATA can also be applied:
- `oo">`
- `]>`

### 3.2 Local Entities
Local entities defined in the DTD can be referenced in attribute values, tag contents, and DTD string values. An example would be:
- `" union select 1 -- -`

Using local entities:
- `]>`
- `" &test2; &test1; 1 -- -`

HTML encoding and CDATA usage are also applicable:
- `ect">`
- `]>`
- `" &test2; &test1; 1 -- -`

## 4. XML 1.1

### 4.1 Space Characters
When the XML version is declared as 1.1, the parser supports additional whitespace and control characters. Relevant code can be found in:
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalimplXML11EntityScanner.java`
- `jdk1.8.0_191src.zip!comsunorgapachexercesinternalparsersXML11Configuration.java`

The term "x85" refers to a code point, not a Unicode character. In binary, x85 is 10000101, which cannot be represented in UTF-8 but is valid in ISO-8859-1 and UTF-16. For example:
- `%85foo`

In UTF-16BE, the corresponding Unicode character is x00x85. Similarly, x28x20, when converted to UTF-8, becomes %E2%80%A8. Thus, you can modify the XML document as follows:
- `%E2%80%A8foo`

## Conclusion
Beyond Java, other platforms like .NET and PHP, and subsets of XML such as SOAP, may have additional unique properties that could be explored for similar vulnerabilities.