schemes, are available to RTP protocol machine by writing
them into the global shared variables that are represented as
v.g variable name.
The (INIT) state of a SIP protocol state machine
(cid:104)INIT, SIP Packet, true, At,
makes a transition t,
INVITE Rcvd(cid:105) to the (INVITE Rcvd) state, and sends a
synchronization message (i.e. c!δSIP→RT P ) to the RTP
state machine. The transition’s update function At initial-
izes vector −→v (both local and global state variables) with the
corresponding values of input vector −→x . The synchroniza-
tion messages are transmitted through the communication
channels between protocol entities (see Figure 2(b)). We
assume that these communication channels are reliable and
function as FIFO queues. The FIFO queue associated with
the communication channel between protocol entity 1 and
protocol entity 2 is represented as queue12. The synchro-
nization events waiting in a FIFO queue have higher priority
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
1161816-4?L@51256)6-)+01-+=-IJ5AJ&5AJ 5AJ)+4?L@11646256)6-)+01-462FA5124625124624624A=@O4625AJ4624?L@/>=5D=HA@8=HE=>AI?=8=HE=>AI2HJ?-JEJO2HJ?-JEJO 2HJ?-JEJO!?=8=HE=>AI?=8=HE=>AI+KE?=JEA@EK5122=?AJALAJI4622=?AJALAJI46+22=?AJALAJIGKAKA !GKAKA! GKAKA!GKAKA GKAKA GKAKA!+KE?=JE+D=AI)+*)=OIEI-CEA-LAJ,EIJHE>KJHone particular call are assigned to one group. In the group,
packets are further classiﬁed into subgroups based on the
speciﬁc protocols. While RTP packets trigger the transi-
tions in RTP state machine, SIP state machine transitions
are caused by the arrival of SIP packets. Although both state
machines run in parallel, they are synchronized through the
shared global variables and the internal synchronizing mes-
sage events between protocol state machines. The Event
Distributor component further classiﬁes the received pack-
ets into the session and protocol dependent groups with the
help of Call State Fact Base, and then distributes to the
corresponding protocol state machine. The Analysis En-
gine component receives packets from Event Distributor
and state information from Call State Fact Base or Attack
Scenario. When protocol misbehavior (e.g. deviation from
protocol speciﬁcation based state machines) or attack sce-
nario match (i.e. a transition leading to an attack state) hap-
pens, vIDS raises an alert ﬂag and notiﬁes administrators
for further analysis.
6 Attack Detection Patterns
People may have a concern that the development of de-
tailed protocol state machines could be a complex and time
consuming process, therefore the proposed approach may
not be a practical solution for intrusion detection. Fortu-
nately, SIP-based call setup and teardown process can be
easily captured in a protocol state machine. Even if it is not
trivial to derive a protocol state machine, it is straightfor-
ward to develop attack scenarios for known attacks. In this
section, we are particularly interested in developing attack
patterns (or signatures) for some VoIP attacks discussed in
Section 3.
Figure 4. INVITE ﬂooding attack
INVITE Request Flooding Attack: Figure 4 shows the
state transition diagram for the detection of INVITE re-
quest ﬂooding attacks. At the (INIT) state, the predicate
checks the message type of the received message. Each
SIP message brings along with an input vector of values
Figure 3. VoIP IDS Architecture
than the data packet events.
On receiving a synchronization event from the commu-
nication channel, the RTP machine makes a transition from
the (INIT) state to the (RTP Open) state. At this state, the
RTP state variables are initialized with the media informa-
tion contained in the INVITE message of SDP. Figure 2(b)
illustrates the communication channels between the proto-
col entities and the associated queues. Without loss of gen-
erality, we only present the states and transitions of both
SIP and RTP protocol state machines after receiving an
INVITE message from the remote caller’s end. For other
SIP messages or RTP packets involved during the call setup
phase, the dynamics of protocol state machines are similar
to those shown in Figure 2(a).
5 vIDS Architecture
VoIP services involve many different protocols. There-
fore, to achieve a holistic view of an ongoing session, it is
important to pay special attention to the cross-protocol in-
teractions among protocol state machines. Figure 3 shows
the proposed vIDS architecture and its components.
As shown in Figure 3, vIDS sits on top of Packet Clas-
siﬁer. VoIP intrusion detection is performed through state
transition analysis of the state machines. It can detect both
known and unknown attacks. The protocol speciﬁcation-
based state machines allow us to detect any deviation from
normal system behaviors, and hence, capture unknown at-
tacks. The vIDS component, Call State Fact Base, stores
the control state and its state variables and keeps track of the
progress of state machines for each ongoing call. The state
information is updated by the arrival of packets from the
Event Distributor component. The Attack Scenario com-
ponent is a collection of known attack patterns, including
the intermediate states and transitions that lead to attack
states. vIDS conducts the state transition analysis of packet
streams on call by call basis. All the packets belonging to
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
.EJAHAJMH,HELAH)=OIEI-CEA)JJ=?5?A=HE+=5J=JA.=?J*=IA462512-LAJ,EIJHE>KJH2=?AJ+=IIEBEAH8121,5AJMH)@EEIJH=JH4AIFIA5124622=?AJ4?L@116)JJ=??KHHAJIJ=JA116EFKJ5122=?AJFHA@E?=JANAII=CAJOFA1816-=?JEEEJE=EALIJ=JAL=HE=>AIF??KJAHIJ=HJ6EAH6ANJIJ=JA2=?AJ4?L@?KHHAJIJ=JA2=?AJ4?L@EFKJ5122=?AJFHA@E?=JA2=@F??KJAH=@NAII=CAJOFA1816-=?JEF??KJAHF??KJAHANJIJ=JA2=?AJ4?L@?KHHAJIJ=JA2=?AJ4?L@EFKJ5122=?AJFHA@E?=JA2=@F??KJAH=@NAII=CAJOFA1816-=?JEANJIJ=J)JJ=?L=KABHIJ=JAL=HE=>A@AIJEF=IIECA@E116=?JE=J?DAIMEJDHA?AELA@512F=?AJI2HA@E?=JA26-NFEHAIFigure 5. BYE DoS attack
−→x . On snifﬁng the ﬁrst INVITE request received from
x.src ip (S) and destined for x.dest ip (D), the state machine
makes a transition from the (INIT) state to the interme-
diate state (Packet Rcvd). During this transition, state
variable vector −→v = (v1, v2, ..., vi, .., vk) is initialized and
assigned by update function At to the corresponding values
of input vector −→x , i.e. At(vi) ⇒ vi := xi. It also starts a
counter (pck counter) to count the received INVITE mes-
sages for the same destination within a certain amount of
time (T1). Timer T1 sets the time window, under which N
received INVITE requests are considered as normal. The
setting of threshold N depends upon the up-limit that a par-
ticular type of a phone can handle. If there is a sudden surge
of INVITE requests that exceeds the threshold N, it is a
strong indication of a ﬂooding attack.
BYE Denial of Service Attack: The proposed vIDS can
detect this kind of attacks by checking cross-protocol in-
teraction between SIP and RTP. Figure 5 shows the partial
SIP and RTP state machines and their cross-protocol inter-
actions. At the (Call Established) state after receiv-
ing a BYE message, SIP state machine makes a transition to
(Call tear-down begins) state. Before this transi-
tion occurs, a synchronization message δSIP→RT P is sent
to RTP state machine. On receiving δ synchronization mes-
sage, (RTP Rcvd) state makes a transition to the interme-
diate (RTP rcvd after BYE) state. At this state, timer
T is also started for all in-ﬂight RTP packets to arrive. The
value of T should be small enough, since the genuine UA
will stop sending RTP packets as soon as the BYE request
is passed to the client transaction. After the expiration of
T , (RTP rcvd after BYE) state makes a transition to
(RTP Close) state. At this state, if there are still incoming
RTP packets, it is an indication of a BYE DoS attack.
Figure 6. Media Spamming Attack
Media spamming: Figure 6 shows the state transition di-
agram for a media spamming attack. On receiving the
ﬁrst RTP packet (with packet ﬁeld vector −→x ) from source
x.src ip(S) and destination x.dest ip(D),
the state ma-
chine makes a transition t, (cid:104)INIT, RTP Packet, true,
At, Packet Rcvd(cid:105) from the initial state (INIT) to the in-
termediate state (Packet Rcvd). During this transition,
state variable vector −→v is initialized and assigned by update
function At to the corresponding values of input vector −→x ,
i.e. At(vi) ⇒ vi := xk. At the (Packet Rcvd) state,
each incoming RTP packet for the same destination D in
the enterprise network is allowed to make a transition ei-
ther to itself or to the (Attack) state depending upon the
predicate outcome. During the transition to itself, function
A(vi) updates state variable vector −→v with the recent values
of the (i + 1)th incoming packet (e.g. v.time stampi :=
x.time stampi+1). Media spamming attack is detected by
observing the sequence number and timestamp of the in-
coming RTP packets. If the timestamp or the sequence num-
ber of the incoming packet has a sudden gap larger than
∆t or ∆n respectively, compared to the earlier received
packet, then the fabricated message being injected into the
media stream is detected. These rules are expressed as a
part of predicates in (Packet Rcvd) state. The more for-
mal deﬁnition of the rule for attack detection is given as
follows: ((x.time stampi+1 − v.time stampi > ∆t) or
(x.sequence numberi+1−v.sequence numberi > ∆n)),
where ∆t and ∆n are adjustable threshold variables.
7 Performance Evaluation
In this section, we evaluate the performance of vIDS in
terms of additional delay induced to call setup time, CPU
cost, and memory consumption. Since VoIP is a time-
sensitive service, the effect of online placement of vIDS
upon the QoS of voice stream is also studied. Finally, we
assess the detection accuracy and sensitivity of vIDS.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
+=-IJ=>EIDA@+=JA=H@M>ACEI+=JA=H@M?FAJA462+IA512462)JJ=??KHHAJIJ=JA+=-IJEFKJ5122=?AJFHA@E?=JANAII=CAJOFA*;-=?JEANJIJ=JA+=JA=H@M>ACEI?KHHAJIJ=JA4624?L@EFKJIO?AII=CAFHA@E?=JAJHKA=?JEIJ=HJJEAH6ANJIJ=JA462H?L@=BJAH*;-JEAH6ANFEHAI?KHHAJIJ=JA462+IAEFKJ4622=?AJFHA@E?=JAJHKA=?JEANJIJ=JA)JJ=?512IJ=JA=?DEA462IJ=JA=?DEA462IAJ462H?L@=BJAH*;-4624?L@2=?AJ4?L@116)JJ=??KHHAJIJ=JA116EFKJ4622=?AJFHA@E?=JAJHKA=?JEEEJE=EALIJ=JAL=HE=>ALA?JHANJIJ=JA2=?AJ4?L@?KHHAJIJ=JA2=?AJ4?L@EFKJ4622=?AJFHA@E?=JA2=@NJEAIJ=FEߝLJEAIJ=FEࣘ࢞J=@NIAGKA?AEߝLIAGKA?AEࣘ࢞=?JELJEAIJ=FENJEAIJ=FELIAGKA?AENIAGKA?AEANJIJ=JA2=?AJ4?L@?KHHAJIJ=JA2=?AJ4?L@EFKJ4622=?AJFHA@E?=JA2=@NJEAIJ=FEߝLJEAIJ=FE࢞JHNIAGKA?AEߝLIAGKA?AE࢞=?JEANJIJ=J)JJ=?L=KABHIJ=JAL=HE=>AIL@AIJEF=IIECA@E116=?JE=J?DAIMEJDE?EC462F=?AJBEA@I@AIJE=JEEF=@@HAII2HA@E?=JA27.1 VoIP Network Testbed
The topology of our VoIP network testbed is shown in
Figure 7. The VoIP system consists of SIP proxy servers,
IP softphones, routers and other data networking elements
available in the network simulator OPNET [9]. Each enter-
prise network (A and B) is simulated by 10 generic Win-
dows PCs (733 MHz Pentium III with 128 Mbytes RAM)
acting as SIP UAs and one Sun Ultra 10 (333 MHz with 128
Mbytes RAM) machine acting as a SIP proxy server. vIDS
is implemented on the Sun Ultra 10 machine and strategi-
cally located between the edge router and the hub of net-
work B, allowing the visibility of all trafﬁc. The VoIP sys-
tem emulates the scenario of many UAs of network A mak-
ing calls to UAs of network B. We assume that enterprise
networks are based on 100BaseT Ethernet links and are
connected to Internet clouds by DS1 link. The Internet de-
lay between A and B is assumed to be 50 ms with 0.42%
packet loss rate. The voice codec algorithm used is G.729
with the setting of (cid:104)Frame Size = 10 ms, Lookahead Size
= 5 ms, DSP Processing Ratio = 1, Coding Rate = 8Kbps,
Speech Activity Detection = Enabled(cid:105). The average SIP
message size is assumed to be constant and is set to 500
bytes.
Figure 7. Simulated Network Topology
To emulate the realistic call behaviors, in our experi-
ments, the UAs of network A generate call requests ran-
domly and independently of each other. The call duration
and calling interval between calls are also assumed to be
randomly distributed. The experiment runs for 120 minutes.
Figure 8 plots number of calls arrival and duration observed
at enterprise network B’s SIP proxy server.
7.2 Call Setup Delay
In the telephony world, performance requirements are
generally expressed as cross-switching or message transfer
times but not as call setup delays. Nevertheless, since IP
telephony is used by Internet users, if they encounter long
connection delays, the proposed security mechanism may
not be adopted by the Internet service providers. Therefore,
the extra delays induced to call setup times by vIDS is an
important metric. In general, call setup delay is deﬁned as
Figure 8. Call arrivals and duration
the interval between entering the last dialed digit and receiv-
ing ringback. In SIP-based VoIP systems, the call setup time
can be deﬁned as the time interval between a caller sending
an INVITE message and receiving a 180 ringing mes-
sage back from the callee. Out of all 20 UAs available in
network A, we have shown the call setup delays with and
without vIDS for two representative UAs 3 and 4 in Fig-
ure 9. As it is evident from Figure 9, the average delay
induced by vIDS to call setup is (cid:39) 100 ms. Such an ad-
ditional delay of 100 ms will be hardly noticeable by VoIP