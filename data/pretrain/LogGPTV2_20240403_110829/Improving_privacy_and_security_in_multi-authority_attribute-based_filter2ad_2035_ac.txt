cases of corrupt issuer and corrupt user below.
2
1
Corrupt issuer.
For a corrupt issuer, our simulator proceeds as follows:
SimU First, it will run the arithmetic 2PC simulator for
computation of (β+u)ρ1. This 2PC will extract β from
the issuer and expect to be provided with x = ρ1(β+u)
mod q. We will choose a random value x ∈R Zq, and
give it to the arithmetic 2PC simulator. Note that this
is correctly distributed, since for any x, β, u, there is
some ρ1 such that x = ρ1(β + u) mod q. Next, our
simulator will receive X1, X2 from the adversary, and
two corresponding zero knowledge proofs. We will use
the extractor for the proof system to extract α. We will
choose a random Y ∈R G and return it. (Again, this
will be distributed exactly as in a real execution.) Fi-
nally, we will receive Z from the adversary, and use the
extractor to extract γ from the corresponding proof.
We will give α, β, γ to the trusted party, and receive
(hαg1/(β+u))γ, which will be the user’s private output.
Consider a hybrid simulator HybU that takes as input the
user’s identiﬁer u. It ﬁrst runs the arithmetic 2PC simulator
for the computation of x (with the correct output value ac-
cording to u), and then completes the protocol as the honest
user would. This is clearly indistinguishable from the real
user’s protocol by the security of the arithmetic 2PC.
Now, assuming that the proof of knowledge scheme is se-
cure, HybU should be indistinguishable from the above simu-
lator SimU . This is because the values x, Y used by SimU will
be distributed identically to those in HybU . (Since ρ1, ρ2 are
chosen at random in the real protocol, x will be distributed
uniformly over Zq, and Y will be distributed uniformly over
G in the real protocol as in the simulated protocol.) Thus,
interaction with our simulator is indistinguishable from in-
teraction with an honest user.
Corrupt user.
For a corrupt user, our simulator proceeds as follows:
SimI First,
it will run the arithmetic 2PC simulator for
computation for (β + u)ρ1 (in the process it will ex-
tract u). Next the simulator will choose random values
X1, X2 ∈R G, and send them to the user. It will receive
Y from the user, and extract ρ2 from the correspond-
ing proof. Then it will send u to the trusted party and
receive D = (hαg1/(β+u))γ. Finally, it will compute
Z = Dρ2 and send it to the user.
Consider a hybrid simulator HybI that takes as input the
issuer secrets α, β, γ. It will compute x = (β + u)ρ1 using
the arithmetic 2PC simulator. When the 2PC simulator
provides u, ρ1 and asks for output, it will correctly compute
x = ρ1(β + u). Then it will complete the execution as in the
real protocol. This protocol is clearly indistinguishable from
the real protocol by the security of the arithmetic 2PC.
Next, we consider a second hybrid Hyb(cid:48)
I which proceeds
as in HybI , but which uses the zero-knowledge simulator for
all proofs of knowledge. This must be indistinguishable by
the zero-knowledge property of the proof system. Now we
need only show that this second hybrid is indistinguishable
from the interaction with the above simulator.
Consider the following reduction from DDH: Given g, A =
ga, B = gb, C = gc, and we must decide whether c = ab or
c ∈R Zq. We set h = Aθ, for θ ∈R Zq. As described
in SimI , we run the arithmetic 2PC simulator to compute
x = ρ1(β + u), and to extract u. Then we compute X1 =
B(1/x), X2 = C θα, and send them to the adversary, along
with a simulated proof of knowledge. We receive Y and ex-
tract ρ2 from the corresponding proof. Finally, we compute
Z = (g1/(β+u)Aαθ)γρ2 , and return it to the user.
Note that, assuming that the proofs of knowledge are se-
cure, if c = ab, X1, X2, Z will be distributed correctly, and
this will be indistinguishable from Hyb(cid:48)
I . On the other hand,
if c is random, then X1, X2 are just values chosen at random
from G, as in SimI . Thus, any adversary that can distinguish
Hyb(cid:48)
I from SimI will allow us to solve DDH. We conclude
that under the DDH assumption, interaction with SimI is
indistinguishable from interaction with a real authority.
Thus our construction is a secure 2PC protocol.
5. PROPOSED MULTI-AUTHORITY ABE
5.1 Removing the Trusted Authority
We review the motivation behind the use of the CA, and
show how to avoid it. To have a concrete discussion, we
assume the following details of an ABE system. The master
public key is ˆe(g1, g2)msk and the message m is encrypted by
ˆe(g1, g2)s·msk·m where s is the randomness of the ciphertext.
Simple Secret Sharing Allows Collusion.
To allow for multiple attribute authorities, the ﬁrst step is
to distribute the master secret key msk across the diﬀerent
attribute authorities. However, care must be taken to pre-
vent collusion attacks so that users A and B who each have
126the appropriate attributes from one of two diﬀerent author-
ities cannot combine their knowledge to decrypt something
neither of them is entitled to.
Now let’s look at what happens when we want to divide
this msk among the authorities. Consider the two-authority
case. Suppose we use a trivial additive sharing of the master
secret key y1 + y2 = msk where one authority uses y1 and
the other uses y2, and a scheme where an honest user gets
a decryption key based on gy1 and gy2 from the respective
authorities. Then a user A with enough attributes from the
ﬁrst authority can recover ˆe(g1, g2)y1s, and similarly, user
B with enough attributes from the second authority can
recover ˆe(g1, g2)y2s. Even if neither alone has suﬃcient at-
tributes from both authorities, together they will be able
recover ˆe(g1, g2)s·msk and hence the message m. Thus we
cannot use a straightforward sharing of the master secret
key between the authorities.
The basic idea is to use a diﬀerent sharing for each user.
But, since we do not want these authorities to communicate
among themselves for every secret key request, how can they
ensure that the values used for each user always sum to msk?
Using PRFs to make the Key “User-Speciﬁc”.
The answer in [5] was to require that authorities com-
pute shares deterministically, each using their own PRF, and
then to have a separate CA, whose job was to ensure that
the sharing would add up: it would know each authority’s
PRF seed as well as the msk, it would use this information
generate the shares used for each user, and it would gener-
ate the appropriate ﬁnal share. Speciﬁcally, for user GID,
each authority k uses share gPRF k(GID), and the CA gives to
k=1(P RFk(GID)), where PRF k(·)
denotes a pseudorandom function using authority k’s secret
seed. A user GID with enough attributes from authority k
can recover ˆe(g1, g2)s·P RFk(GID) from the ciphertext. Then
this can be combined with the “matching” value obtained
from the CA and some component in the ciphertext to re-
cover the session key ˆe(g1, g2)s·msk.
user GID the value gmsk−PN
Ideas behind Our Proposal.
The beauty of a PRF family is that no polynomial-time
adversary can distinguish (with signiﬁcant advantage) be-
tween a randomly chosen function and a truly random func-
tion (in contrast with a degree m polynomial used in [10]).
The idea here (suggested by Waters) idea is to eliminate
the need for the CA by using a set of PRFs whose output
values on any particular input always sum to zero. Each
pair of authorities (j, k) shares a secret PRF seed seedjk
(again, this sharing is done once and for all at the ini-
tial setup stage). This means there are O(N 2) PRFs to
be used in total. The ﬁnal “random-looking” Fk(GID) used
by each authority is a linear combination of N − 1 basic
PRFs. More speciﬁcally, it is the summation of all of these
PRFs, each weighted by either 1 or −1. An appropriate
choice of summation and subtraction makes all these PRF
values cancel each other when Fk(GID) for diﬀerent k are
added together. Informally, such a “sum-of-PRF” construc-
tion still looks pseudorandom to any adversary who knows
less than N − 2 of a particular authority k’s secret seeds
to any adversary controlling less than N − 2
seedkj (i.e.
other authorities). The ﬁnal composite PRF is computed as
j>k PRF jk(GID). This
j<k PRF jk(GID) −P
Fk(GID) = P
PRF construction is similar to the simplest construction in
[11], where it is used to build a distributed key distribution
center.
5.2 Adding the Anonymous Key Issuing
1
1
Before we can apply our oblivious key issuing protocol,
we need to make suitable modiﬁcations to the scheme used
in [5]. In particular, Chase assumes a PRF with range Zq
and generates decryption keys blinded by gPRF k(GID)
. Here
instead, we wish to use the modiﬁed Dodis-Yampolskiy PRF
(DY-PRF), which has range G1. We observe that the PRF
in the exponent used in [5] can be replaced by DY-PRF so
that the values are instead blinded by PRF k(GID).With this
modiﬁcation and a little twist in the key structure, we can
directly apply our key issuing protocol.
While our anonymous key issuing protocol is general enough
to allow issuing keys of the form (SK · P RF (u))1/ti where
SK is the secret key held by the key-issuing authority and
u is a private value of the key-requesting user (e.g. GID),
a straightforward adoption in the CA-less multi-authority
ABE may result in a fairly ineﬃcient system. To see this,
recall that the keys are of the form gp(i)/ti
Fk(u)1/ti for poly-
nomial p (this gives us “user-speciﬁc secret keys” which pro-
vides collusion-resistance) for each attribute i ∈ Au. This
means that our key issuing protocol will be invoked O(|Au|)
times. On top of that, we require O(N 2) copies of the under-
lying PRF in order to remove the trusted authority, which
makes a total of O(N 2|Au|) invocations of our key issuing
protocol, an undesirably high price for preserving user pri-
vacy.
Instead, we will make the number of invocations indepen-
dent of |Au|, by introducing extra randomness in the at-
tribute key issuing process. We add N − 1 blinding factors
Rkj to the secret value ask used to generate the attribute
keys from authority k. The objective is to make the at-
tribute part of the decryption key independent of user GID
(but still diﬀerent for each user) so that it can be generated
without interaction with the user. We then use these R’s to
play the role of master secret key in the key issuing protocol,
· P RFkj(u) will be issued to user u for each value j.
Rkj
i.e. g
1
In the decryption process, the user will recover a function of
p(0), and can then use these values to remove the blinding.
To see how the new key structure ensures collusion resis-
tance, when a user has enough attributes from a particular
authority, he can recover a term with these R terms embed-
ded (because of the way we deﬁne p(0)). The user secret key
· P RFkj(u), which is the only other
Rkj
contains the term g
1
information about these R terms. Intuitively, to get rid of
these R terms will introduce the user-speciﬁc PRF value,
which can only be cancelled out by the other PRF values
for the same user, as hinted in the previous subsection.
5.3 Construction
Our ﬁnal CA-less multi-authority anonymous ABE works
as follows:
Setup.
The setup stage starts by the following initializations.
• (System Parameter) Given a security parameter λ and
a public random string S ∈ {0, 1}poly(λ), the authori-
ties generate an admissible bilinear group parameters
(cid:104)ˆe(·,·), ψ(·), q, g1, g2, G1, G2, GT(cid:105) from BDH Gen(1λ; S).
127• (Collision-Resistant Hash Function (CRHF)) The au-
thorities also generate from S a CRHF H : {0, 1}∗ →
Zq, which takes the user’s global identiﬁer GID as an
input. We denote the corresponding output by u.
Since the groups have prime order q and no hidden struc-
ture, this can safely be generated from public coins, so each
authority can do this independently. The next stage is an
interactive protocol. We assume the authorities have au-
thenticated channels with one another.
• (Master Public/Secret Key) Each authority k picks
vk ∈R Zq and sends Yk = ˆe(g1, g2)vk to the other au-
thorities. They all individually compute Y =Q Yk =
P
ˆe(g1, g2)
k vk .
• (PRF Seed) Each pair of authorities engages in a 2-
party key exchange such that each authority k shares
with another authority j a seed skj ∈ Zq which is
only known to them and not to any other authority
i /∈ {j, k}. We deﬁne skj = sjk.
• (PRF Base) Each authority k randomly picks xk ∈ Zq
and computes yk = gxk
1 , which deﬁnes a pseudoran-
dom function P RFkj(·) that can only be computed by
xkxj /(skj +u)
,
authority k and j. Deﬁne P RFkj(u) = g
1
which can be computed by y
.
or y
xk/(skj +u)
j
xj /(skj +u)
k
4. User u computes Du =Q
, where Ru =P
(k,j)∈{1,...,N}×({1,...,N}\{k}) Dkj
1
= gRu
(k,j)∈{1,...,N}×({1,...,N}\{k}) Rkj.
(Note that All PRF terms in the above project cancel
each other out by the choice of δkj.)
To encrypt m for attribute set {AC
Encryption.
Zq, return (cid:104)E0 = mY s, E1 = gs
(Note that this is identical to the encryption algorithm in
[5].
N}, pick s ∈R
k ,∀k∈[1...N ](cid:105).
2,{Ck,i = T s
1 , . . . , AC
k,i}i∈AC
Decryption.
k , pair up Sk,i and
1. For each authority k ∈ [1, . . . N ]:
(a) For any dk attributes i ∈ AC
k ∩Au
ˆe(g1, g2)spk(0) = ˆe(g1, g2)s(vk−P
Ck,i, i.e. compute ˆe(Sk,i, Ck,i) = ˆe(g1, g2)spk(i).
(b) Interpolate all the values ˆe(g1, g2)spk(i) to get Pk =
j(cid:54)=k Rkj ).
= Y s/ˆe(gRu
2. Multiply Pk’s together to get Q = ˆe(g1, g2)s(P {vk}−Ru)
3. Compute ˆe(Du, E1) · Q = ˆe(gRu
4. Recover m by E0/Y s.
2) · Q = Y s.
, gs
, gs
2).
1
1
Each authority k also gives non-interactive proofs of knowl-
5.4 Conﬁdentiality
edge of vk and xk.
The rest of the setup can be carried out by each authority
autonomously:
• (Attribute Public/Private Key) Authority k proceeds
as follows: for each attribute i ∈ {1, . . . , nk} it picks
tk,i ∈ Zq and computes Tk,i = g
.
tk,i
2
Each authority k stores
(cid:104)xk,{skj}j∈{1,...,N}\{k},{tk,i}i∈[1,...,nk]}(cid:105)
securely as its private key. Finally the system parameters
P
params are published as follows:
k vk ,{yk,{Tk,i = g
(cid:104)Y = ˆe(g1, g2)
({yk}k∈[1,...,N ] is only used by the authority.)
}i∈[1,...,nk]}}k∈[1,...,N ]}(cid:105).
tk,i
2
Key Issuing.