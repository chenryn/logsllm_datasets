Doubly Eﬃcient PIR Doubly Eﬃcient PIR (DEPIR) refers to an extension of PIR that allows a setup
phase which preprocesses the database before any retrieval requests. Beyond the preprocessed database, the
server will be stateless. DEPIR schemes are categorized into symmetric-key and public-key variants. In the
symmetric-key variant, each client must use a secret key to access the encoded database. On the other hand,
the public-key variant is accessible by all clients. The ﬁrst public-key DEPIR construction was presented by
Beimel et al. [9] in the multiple, non-colluding server setting that is information-theoretically secure. More
recently, Boyle et al. [12] and Canetti et al. [15] present symmetric-key DEPIR schemes in the single-server
setting using locally decodable codes built from Reed-Muller codes [41, 45]. In addition, Boyle et al. [12]
present a public-key DEPIR scheme using a variant of obfuscation. All above DEPIR schemes ensure that
both the client and server perform a sub-linear number of operations compared to the database per retrieval.
Both symmetric-key DEPIR and ORAM share the same problems involving the secret key that must be
shared by all clients that require access to the database. Any extensions to multiple clients will suﬀer the same
problems as multiple client ORAM. On the other hand, public-key DEPIR provides many useful properties
that are oﬀered by PSIR. However, all public-key constructions are built using very strong assumptions. The
scheme of Beimel et al. [9] requires multiple non-colluding servers while the scheme of Boyle et al. [12] relies
on non-standard assumptions involving obfuscation while, also, requiring server storage super-linear in the
database size. Therefore, DEPIR schemes are not a practical solution for privacy-preserving data access due
to their reliance on strong assumptions.
Private Anonymous Data Access Hamlin et al. [28] have recently introduced the Private Anonymous
Data Access (PANDA) primitive. PANDA is an extension of symmetric-key DEPIR where the server is
stateful and maintains information between multiple retrievals. In addition, PANDA requires anonymity.
That is, the adversary cannot learn the identity of the querying clients which can be enforced by requiring
clients to use anonymous mix networks [16]. Anonymity is an extra privacy feature of PANDA that is not
provided by PSIR. Using leveled fully homomorphic encryption [13] and Reed-Muller codes [41, 45], Hamlin
5
et al. [28] present both a read-only and public-write PANDA scheme. Public-writes are an operation that
are beyond the scope of PSIR, so we focus on the read-only variant. Their PANDA scheme must be built
using a collusion parameter that determines the maximum size of the subset of colluding clients before
privacy becomes compromised. Both client and server operations as well as server storage grow linearly in
the collusion parameter. On the other hand, the client and server operations for a private retrieval scale
poly-logarithmically in the database size.
In relation to PSIR that simply stores the database in plaintext, their PANDA scheme requires server
storage super-linear in the size of the database even when providing no protection against colluding clients.
If we wish the PANDA scheme to be secure in the setting that the server colludes with all clients except one,
the server would require storage larger than simply replicating the database for each client. In comparison,
our construction of PSIR outlined in Section 1 guarantees privacy even when the server colludes with all
clients except one without sacriﬁcing computational or storage eﬃciency. Also, PANDA does not allow
enrolling stateless clients into the system by only interacting with the server unlike PSIR. As a consequence,
PANDA does not provide a practical solution.
2 Technical Overview
Our construction is inspired by the construction of PIR with side information of Kadhe et al. [33] that con-
siders the following hypothetical scenario. Suppose the client has obliviously obtained some side information
consisting of k − 1 records (thus the server is unaware of which records are known to the client). Can the
client leverage on this side information to privately access other records more eﬃciently? Kadhe et al. [33]
show that the client can randomly partition the database of n records into n/k parts of size k such that the
desired query record and all k − 1 records of side information are in the same parts. The server will add all
records (that are represented as elements in a ﬁeld) within the same parts and return the n/k record sums
to the client. The client discards all sums except the sum of the desired record and the side information. By
subtracting the side information, the client successfully retrieves the desired record. However, Kadhe et al.
do not provide concrete algorithms to privately obtain side information. Furthermore, the network costs of
communicating the partition and downloading all n/k sums are signiﬁcant.
In this paper, we present a construction of PSIR which addresses these issues. Our PSIR relies on two
main building blocks that are of independent interest outside of PSIR: oblivious constrained partitions and
private batched sum retrieval. In addition, PSIR also uses a single-server PIR scheme.
• Oblivious Constrained Partitions (OCP). A OCP consists of two algorithms: the construction algorithm
and the expansion algorithm. Given a constraint subset S ⊆ [n] of size k, the construction algorithm
OCP.GenerateSeed of an OCP returns a succinct representation of a partition of [n], (P1, . . . , Pm), into
m = n/k parts, each of size k, such that one of the m parts is equal to the constraint subset S.
The obliviousness property guarantees that an adversary cannot correctly guess whether the input
constraint subset S contains a given q ∈ [n] better than guessing at random. The expansion algorithm
OCP.ExtractPartition, given a succinct description of a partition, produces the actual partition. We
give a construction algorithm that outputs a description of a partition consisting of k seeds of length
equal to the security parameter λ and k integers in [n]. Both the constructing and expanding the
description require O(n) PRF evaluations.
(B1, . . . , Bn), the client wishes to retrieve the c sums: O1 =(cid:80)
• Private Batched Sum Retrieval (PBSR). Given c subsets S1, . . . , Sc ⊆ [n], the client wishes to privately
retrieve c sums corresponding to the sum of all records in each subset. That is, for a database D =
Bi. This is an
extension of private batched retrieval [30] where only records, instead of sums of records, are retrieved.
For privacy, the adversary should not learn the c input subsets.
i∈S1
Bi, . . . , Oc =(cid:80)
i∈Sc
PSIR composes these primitives as follows. Assume the records are elements of some ﬁnite ﬁelds and that
the client has storage suﬃcient for containing c records. At the initialization phase, the client and the server
execute the private batched sum retrieval protocol so that the client privately retrieves c sums of records,
6
Figure 1: The constraint subset is embedded into the third row. The pairs (K1, v1) and (K2, v2) succinctly
represent the ﬁrst two ordered column subsets. The remaining columns have not been generated yet.
s1, . . . , sc, where sum si is over the set Si of k− 1 randomly chosen records from the database. Now, suppose
the client wishes to retrieve record q and let Si be the next unused set that does not contain q. Using the
construction algorithm of an OCP with S = Si ∪ {q} as constraint set, the client constructs an ordered
partition P = (P1, . . . , Pm) and let j be such that Pj = S. The client sends the succinct description of P to
the server. Upon receiving the description of the partition, the server expands it and constructs a database
where, for l = 1, . . . , m, the l-th record is the sum pl of all the records with index in part Pl. The client in
addition constructs a query, using the underlying single-server PIR, to retrieve pj and sends the query to
the server. Then, the server executes the PIR query using (p1, . . . , pm) as the database and returns the PIR
response to the client. Finally, the client decrypts the PIR response to retrieve pj and obtains the sought
record by computing pj − si. Once the client runs out of Si, the client will execute the private batched sum
retrieval protocol to gain new side information. Additionally, a client without state (such as a new client
or a crashed client that lost state) may execute a private batched sum retrieval protocol with the server to
start performing retrievals.
Let us now give informal descriptions of our constructions for OCP and PBSR.
Oblivious Constrained Partitions. Sampling a random partition of [n] into m parts each of size k is
equivalent to creating a random assignment of the integers of [n] to the n cells of an m × k matrix M ,
with each row corresponding to a part. The partition can be succinctly described by the random seed to
a PRF that is to be used to generate the randomness of an agreed upon procedure for sampling a random
permutation, like, for example, Fisher-Yates [21]. The randomly sampled permutation is then used to assign
integers to the cells of the m × k matrix. However, we have two additional goals. The ﬁrst is of having a
particular row be constrained to given k values from the constraint set S. This could be easily achieved by
using Fisher-Yates to generate a permutation of n− k values and then explicitly add the k constrains values
to the seed of the PRF used for Fisher-Yates. However, this method does not satisfy our privacy requirement
that the description of the partition be oblivious to the constraints.
Let us consider the following warm-up construction based on a family P of pseudorandom permutations.
The construction algorithm randomly selects the constraint row 1 ≤ r ≤ m that will contain the k elements
{s1, . . . , sk} of the constraint set S and generates a pseudorandom permutation key for each column. For the
ﬁrst column, a random key k1 is selected and the algorithm computes ρ1 := P−1(k1, s1). The construction
algorithm then evaluates P(k1,·) at values ρ1 − 1, ρ1 − 2, . . . , so to obtain values M [r − 1, 1], . . . , M [1, 1]. We
let σ1 be the value such that M [1, 1] = P(k1, σ1); clearly, for column 1, we have σ1 = ρ1− (r− 1). In addition,
the algorithm evaluates P(k1,·) at values ρ1 + 1, ρ1 + 2, . . . to obtain M [r + 1, 1], . . . , M [m, 1]. Once the ﬁrst
column T1 = M [(cid:63), 1] has been computed, the construction algorithm checks that it does not contain values
from the constrained row other than s1 and, if it does, a new key k1 is randomly selected and the process
is repeated until successful. The ﬁrst column T1 is succinctly speciﬁed by the key k1 and by the integer
7
9655...2141...35217...28...............7062...P1P2P3...Pn/kK1,v1K2,v2σ1. The expansion algorithm reconstructs the column by evaluating P(k1, x) for x = σ1, . . . , σ1 + (m − 1).
For the second column, the construction algorithm randomly selects key k2 and does the same: that is, it
sets ρ2 := P−1(k2, s2) and then evaluates the PRP from ρ2 going back until the value M [1, 2] in row 1 is
computed and forward until the value M [m, 2] is computed. As before, the algorithm makes sure none of
the remaining constrained row values are used. If a value from the constrained row appears, then a new key
k2 is randomly selected and the selection of column 2 starts again. Furthermore, it may be the case that a
generated value for column 2 appears in column 1. In this case, another key k2 is generated randomly and
the algorithm repeats. The expansion algorithm, once column 1 has been reconstructed, obtains column 2 by
repeatedly applying F(k2,·) starting from σ2; if during the reconstruction a value from column 1 appears, it
is ignored and the process continues until m values distinct from those appearing in column 1 are obtained.
The process continues until all k columns have been speciﬁed.
There are two problems with this scheme: ﬁrstly, in the later columns, we will have several collisions with
values from previous columns and this will require extra invocations of the PRP. We can avoid this by using
an indirection. Rather than treating the outputs of the PRP as permuted values themselves, we will treat
them as pointers in a table T of unused values. Initially, T has all n unused values and is ordered from 1 to
n. For column 1, all PRP evaluations are pointers to values in T . For example, if the evaluation at row 5
results in 11 then the actual value for row 5 is read from table as T [11] which, for column 1, happens to be
11 also since all values are unused. For the second column, we ﬁrst remove all the values from T that were
used for column 1 and now have a modiﬁed T with n − m ordered values. The domain of the PRP for the
second column will be 1, . . . , n − m. This way we can avoid generating new permutation keys by colliding
with values from previous columns and we only need to check that values from the constrained row values
are not used. The client continues this process for all k columns.
The second problem with PRP is that instantiating them securely is quite expensive:
in practice one
would use PRP based on block ciphers on small domains that can be constructed from secure block ciphers at
the cost of multiple evaluations (see, for example, [40, 46]). Hence, we provide our main construction below
that only uses PRFs and is very eﬃcient. Brieﬂy, for each column, the PRF F will generate m diﬀerent
values that are treated as a pointer to get unused values from table T . This can be done by repeatedly
evaluating the F in increasing index until m diﬀerent values appear. For convenience, we will assume the
ﬁrst m invocations of F are unique. As a result, F(K, i) will actually be the i-th unique value appearing when
evaluating F in increasing index. As the table size or domain size changes column to column, the PRF output
can be simply mod-ed by the new domain size to get appropriate values, as long as the original output of the
PRF was large enough to keep the biases negligible. However, we still have to guarantee that the element
in the constrained row of each column is an element from the constrained set S. Unlike a PRP, we cannot
invert the PRF and ﬁnd the correct index to start evaluating. Instead, the algorithm will use an augmented
description for the columns that consists of the key k along with a displacement v. The displacement v is
computed to ensure that the r-th unique value produced by each column PRF results in a speciﬁed index of
T corresponding to a value from the constrained set S. Thus, the expansion algorithm will set the element
in row 1 of a column described by (K, v) as the one in position F(K, 1) + v of table T (with wrap-around if
necessary). The algorithm chooses v so that F(K, r) + v is the current index in T of the constraint set S that
is destined for row r of the column being computed. The reconstruction algorithm is straightforward: the
partition is created column by column, using the key to instantiate the PRP and encrypt forward to create
pointers to which the displacement v is added to get index for the table T . After each column, the server
removes the used values from the table and the PRF works on a smaller domain for the next column.
The algorithm described above requires maintaining an ordered table of the unused elements, that is the
elements that have not been assigned to a part yet, and this would require linear storage. However, we
observe that only the ranks of the unused elements of the constraint set need to be maintained. For each
element si from the constraint set, the algorithm maintains the number of unused elements that are smaller
than si. Indeed, after generating a column, the algorithm only needs to check that the column contains the
rank of exactly one unused constraint subset element. Therefore, we only explicitly store the rank of all
constraint subset elements that are used. Once a new column is obtained, the algorithm updates the ranks
of the remaining unused items. As a consequence, this algorithm requires O(k) storage to maintain the ranks
8
and an additional O(m) storage to explicitly store the generated column.
Private Batched Sum Retrieval We present several diﬀerent private batched sum retrieval protocols
with both practical and theoretical interest. Recall as input, the protocol receives c subsets S1, . . . , Sc ⊆ [n].
The protocol with the best performance on practical database sizes is also the simplest scheme, which simply
downloads the entire database using n records of communication.
A more complex algorithm makes use of a private batched retrieval (PBR) scheme [7, 22, 26, 30]. The
client constructs the set of records used in the c sums, S = S1 ∪ . . . ∪ Sc. Additional records are added to S
until S has |S1|+. . .+|Sc| records. Afterwards, the client simply executes a PBR scheme to retrieve all records
in S and adds the records locally. This scheme requires only O(|S| · poly log(n)) records of communication
and O(n) CPU computation. This scheme makes sense for scenarios where network costs are signiﬁcantly
higher than computation costs. In Appendix E, we present more protocols of theoretical interest that use
only O(c · poly log(n)) records of communication.
Paper Organization In Section 3, we present the deﬁnitions of oblivious partitioning, private batched
sum retrieval and private stateful information retrieval. We present our OCP, PBSR and PSIR constructions
in Sections 4, 5 and 6 respectively. The results of our experiments are shown in Section 7.
3 Deﬁnitions
We suppose the database D contains n records denoted B1, . . . , Bn. We will interchangeably use the terms
records and blocks. We use [n] to denote the set {1, . . . , n}. For a two-party protocol Prot, the writing
(y1, y2) ← Prot(x1, x2) denotes that when the protocol is played by party 1 with input x1 and party 2 with
input x2 then party 1 receives y1 as output whereas party 2 receives y2.
For an algorithm A that interacts with the server, we denote the transcript by Trans[y ← A(x)] as all the
information revealed to the server by executing A to compute output y on input x. The transcript includes
all data uploaded to the server as well as the sequence of data accesses performed when executing A.
3.1 Private Stateful Information Retrieval
In this section, we deﬁne the notion of Private Stateful Information Retrieval (PSIR). Roughly speaking,
PSIR is an extension of the classical notion of a single-server PIR [35] in which the client keeps a state between
queries. Before any query can be issued, the client initializes its state by executing the Init protocol with
the server. As in PIR, the query process of a PSIR consists of a single client-to-server message followed by
a single server-to-client message. The client will use the server’s response and their current state to recover
the record desired. For the sake of clarity, we split this last step into two distinct parts: an Extract algorithm
executed by the client to extract the record queried from the server’s reply, and an UpdateState algorithm
jointly executed by the client and server to update the client’s state. In our construction, the UpdateState
protocol consumes part of the client’s state and, if needed, re-executes the Init protocol. We stress that the
server of a PSIR does not have a state just like in the original notion of a single-server PIR.
Deﬁnition 1 (PSIR). A Stateful Information Retrieval PSIR = (PSIR.Init, PSIR.Query, PSIR.Reply, PSIR.Extract,
PSIR.UpdateState) consists of the following components
• (st,⊥) ← PSIR.Init((1λ, 1c), (1λ, D = (B1, . . . , Bn))): a protocol executed by a client and the server.
The client takes as input the security parameter λ and the parameter c that describes the number of
records that can be stored by the client. The server takes as input the security parameter λ and the
database D = (B1, . . . , Bn). The client’s output is its initial state st and the server receives no output.
Protocol Init is run when a client enrolls into the system or when a new state is needed by a client
because the state has been lost for a crash.
9
• (st(cid:48), Query) ← PSIR.Query(q, st): an algorithm executed by the client that takes as input index q ∈ [n]
and its current state st and outputs Query to be sent to the server. In addition, the client’s state is
updated to st(cid:48).
• Reply ← PSIR.Reply(Query, D = (B1, . . . , Bn)): an algorithm executed by the server that takes as input
Query computed by a client and the database and returns Reply.
• B ← PSIR.Extract(Reply, st): an algorithm executed by the client to extract a record from the server’s
Reply to the query. Note that the client’s state is not updated.
• (st,⊥) ← PSIR.UpdateState((st), (D)): a protocol executed by a client and the server that updates the
client’s state.
such that the following Correctness condition is satisﬁed.
Correctness For all λ, for all n ≤ poly(λ), for all c ≤ poly(λ), for any set H of honest players, for any
database D = (B1, . . . , Bn) of size n and for any sequence Q = ((q1, u1), . . . , (ql, ul)) of length l = poly(λ)
we have
(cid:104)
Pr
ExptPSIR
Correctness(λ, c, H, D, Q) (cid:54)= 1
(cid:105) ≤ negl(λ)
where the experiment ExptPSIR
Correctness is deﬁned as follows
Correctness(λ, c, H, D, Q);
ExptPSIR
For all u ∈ H
For i ← 1, . . . , l:
(stu,⊥) ← PSIR.Init((1λ, 1c), (1λ, D));
(stui , Queryi) ← PSIR.Query(qi, stui );
Replyi ← PSIR.Reply(Queryi, D);
Ri ← PSIR.Extract(Replyi, stui );
(stui ,⊥) ← PSIR.UpdateState((stui ), (D)];
Output 1 iﬀ for all i ∈ [l] Ri = Bqi ;
To properly deﬁne the notion of security for a a stateful information retrieval we need the concept of
sequences compatible with respect to a set of corrupted players.
Deﬁnition 2. Two sequences Q0 = ((q0
with respect to set C of users if
1), . . . , (q0
l , u0