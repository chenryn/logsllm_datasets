index was not stemmed, but common stopwords were
removed. We used the relevance judgments from the “ad hoc”
track of the sixth, seventh, and eighth sessions of NIST’s
Text Retrieval Conference (TREC). There were 150 total
labeled queries.
Our experiment consisted of a few concrete steps. We
performed queries on two versions of the NIST index: an
unmodiﬁed ‘insecure” one which used the actual DFs of
the NIST corpus and one which used public DFs from the
Enron corpus. For both, we recorded the top 1,000 most
relevant documents returned for each query. Finally, with the
relevance judgments as ground truth, we computed quality
metrics to measure the degradation in quality (if any) caused
by our countermeasure.
We used two metrics from information retrieval: “preci-
sion” and “mean average precision”. Intuitively, precision is
the fraction of returned documents that were relevant to the
query. If the number of relevant documents returned for a
query is r and the total number of returned documents is s,
the precision is deﬁned as r/s. The metric P@n is deﬁned
as the precision when only considering the top n documents
returned for the search. The numbers given in Figure 8 are
averaged over all 150 queries.
Mean average precision is a related metric, deﬁned simply
as the mean over all queries of the per-query “average
precision”. The average precision is, importantly, not simply
the average of an arbitrary set of precision scores. Average
precision is deﬁned in our case by measuring the precision at
every cutoff point (i.e. n in P@n above) from 1 to 1,000, then
summing and dividing by the number of relevant documents.
The results of the experiment are in Figure 8. The results
using relevance scores computed with the default implemen-
tation is in the column of Figure 8 labelled “Real DFs”.
The results with the public-corpus DFs countermeasure
enabled (using the Enron email corpus) are in the column
labeled “Enron DFs”.
The results show that using the Enron DFs in place of the
real DFs for the corpus has negligible effect on the precision
of the searches. Most values are identical when rounded to
690
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
the hundredths place. This is true both for TF-IDF and the
more modern BM25 scoring function.
Limitations and future work. We believe our evaluation
presents good evidence of the practicality of the public-
corpus DF countermeasure. Nevertheless, it is limited in a
few important ways. First, we only evaluate unstructured
English text corpora and queries, and it is unclear if the
results generalize to code repositories like Github. Obtaining
labeled relevance judgments and corpora for code search is
an interesting direction for future work. Since the quality
of the search results above is, in an absolute sense, quite
low to begin with, an experiment on a better-tuned search
system which uses modern IR techniques to increase search
quality may yield different results. The ﬁnal limitation is the
small sample size of our experiment. Due to the difﬁculty
of ﬁnding appropriate data sets and relevance judgments, we
only evaluated search quality for one dataset, and leave a
more thorough evaluation as an open problem.
VIII. VENDOR RESPONSE
We disclosed via email to the three services investigated.
Xen.do immediately removed relevance scores from API re-
sponses as a preliminary mitigatition. GitHub forwarded the
issue to Elastic.co, their search service provider. Elastic.co
suggested several countermeasures in their response. To
mitigate our attacks, Elastic.co suggested small deployments
could use an index-per-tenant, but they admitted that this
could be cost prohibitive for large deployments. In some
cases, services can disable scoring and ranking if the resulting
functionality loss is acceptable. Another approach is to put
sensitive terms in the ﬁelds that are not used for ranking,
an approach suggested by Alex Brasetvik of Elastic.co. This
will prevent the side channel being exploited for those terms,
though some services might ﬁnd reliably identifying sensitive
information within tenants’ data challenging. We believe the
public-corpus DFs countermeasure presented in section VII
is the best approach due to its scalability and deployability.
Orchestrate.io’s parent company, CenturyLink, announced
that the service vulnerable to our attack will be shut down
on March 17th, 2017.
IX. CONCLUSION
We presented STRESS attacks. These demonstrate that
the industry-standard method for multi-tenant search leads
to an exploitable side channel, even in complex distributed
systems. We developed efﬁcient attacks on two services,
GitHub and Orchestrate, and veriﬁed exploitability of another
service Xen.do. Using our side channel we estimated the time
and cost required to extract information like phone and credit
card numbers from private ﬁles stored in these services.
Our case studies only hint at
the scope of affected
systems. As mentioned, we also conﬁrmed that following
best practice guides for building multi-tenant search on top
of AWS ElasticSearch, AWS CloudSearch, Searchly, bonsai,
and Swifttype would lead to a DF side channel. Some
of these search-as-a-service systems are in turn used by
other cloud services, such as Heroku, which may therefore
inherit any side channel. We have not yet performed in-depth
experimentation with applications using these services, so it
may be that noise or other subtleties prevent, e.g., brute-force
term recovery attacks or accurate DF estimation. That said,
services would do well to revisit their use of shared search
indexes in order to prevent STRESS attacks.
Along another dimension, we have focused on attacks
whose search queries include a single term. But many search
services allow more sophisticated queries such as phrase or
wildcard queries. We began thinking about how to exploit
these, but have not yet seen how they could provide attacks
better than our single-term ones. Future work may do better.
Based on our experiments we recommend that the imple-
mentations move away from the simple ﬁlter-based approach
to multi-tenancy. We suggested possible countermeasures,
such as using document frequencies taken only from public
documents, and our preliminary evaluation suggests this
approach will be very practical for deployments.
ACKNOWLEDGMENTS
We would like to thank all the anonymous reviewers for
their comments and suggestions. We would also like to thank
the employees at Elastico, GitHub, and Xen.do for their
helpful discussions during our disclosure process. This work
was supported in part by NSF grants CNS-1558500, CNS-
1330308, CNS-1453132, the Defense Advanced Research
Projects Agency (DARPA) and Space and Naval Warfare
Systems Center, Paciﬁc (SSC Paciﬁc) under contract No.
N66001-15-C-4070, and a generous gift from Microsoft.
Ristenpart and Grubbs have large ﬁnancial stakes in
Skyhigh Networks.
REFERENCES
[1] Index Aliases. https://www.elastic.co/guide/en/elasticsearch/
reference/current/indices-aliases.html#ﬁltered, 2016.
[2] Amazon. Amazon Cloudsearch.
https://aws.amazon.com
/cloudsearch.
[3] Amazon. Amazon Elasticsearch service. https://aws.amazon.
com/elasticsearch-service.
[4] D. J. Bernstein. Cache-timing attacks on AES, 2005.
[5] J. K. Blitzstein and J. Hwang.
Chapman and Hall/CRC, 2014.
Introduction to Probability.
[6] Bonsai – Hosted Elasticsearch. https://bonsai.io, 2016.
[7] S. B¨uttcher and C. L. A. Clarke. A security model for full-text
ﬁle system search in multi-user environments. In Proceedings
of the 4th Conference on USENIX Conference on File and
Storage Technologies - Volume 4, FAST’05, 2005.
Elasticsearch at GitHub.
[8] A. Cholakian.
http:
//exploringelasticsearch.com/github interview.html, 2014.
[9] Couchbase – NoSQL database. http://www.couchbase.com.
[10] Cratedb. https://crate.io.
[11] elastic.co. Updating a whole document. https://www.elastic.
co/guide/en/elasticsearch/guide/current/update-doc.html,
2016.
691
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
[12] Elasticsearch. Discovering the need for an indexing strategy in
multi-tenant applications. https://www.elastic.co/blog/found-
multi-tenancy, 2015.
[13] Elasticsearch. Term Filter query.
https://www.elastic.co/
guide/en/elasticsearch/reference/current/query-dsl-ﬁltered-
query.html, 2016.
[14] Elasticsearch.
https://www.elastic.co/products/elasticsearch,
[15] W. foundation. Wikipedia Dump download. https://dumps.
2016.
wikimedia.org/enwiki/.
[16] A. Futoransky, D. Saura, and A. Waissbein. The ND2DB
attack: Database content extraction using timing attacks on the
indexing algorithms. In WOOT, 2007.
[17] N. Gelernter and A. Herzberg. Cross-site search attacks.
In Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages 1394–1405.
ACM, 2015.
[18] GitHub. Sensitive data exposure. https://bounty.github.com
/classiﬁcations/sensitive-data-exposure.html, 2016.
[19] GitHub on Elastic.co case study. https://www.elastic.co/use-
cases/github, 2014.
[20] Google.
Google app engine.
/appengine.
[21] Add-ons - Heroku Elements.
/addons#search, 2016.
https://cloud.google.com
https://elements.heroku.com
[22] Hibernate commmuity documentation, chapter 10.9: Multi-
tenancy. https://docs.jboss.org/hibernate/search/5.3/reference/
en-US/html/ch10.html#section-multi-tenancy.
[23] M. S. Inci, B. G¨ulmezoglu, G. I. Apecechea, T. Eisenbarth,
and B. Sunar. Seriously, get off my cloud! cross-vm rsa key
recovery in a public cloud. IACR Cryptology ePrint Archive,
2015:898, 2015.
[24] B. Klimt and Y. Yang. The enron corpus: A new dataset
for email classiﬁcation research. In European Conference on
Machine Learning, pages 217–226. Springer, 2004.
[25] K. Kluge. Personal communication.
[26] D. D. Lewis, Y. Yang, T. G. Rose, and F. Li. Rcv1: A new
benchmark collection for text categorization research. Journal
of machine learning research, 5(Apr):361–397, 2004.
[27] Lucene. https://lucene.apache.org/, 2016.
[28] Lucene Practical Scoring function.
https://www.elastic.
co/guide/en/elasticsearch/guide/current/practical-scoring-
function.html, 2016.
[29] Lucene’s scoring function. http://lucene.apache.org/core/3 5
0/api/core/org/apache/lucene/search/Similarity.html.
[30] C. D. Manning, P. Raghavan, and H. Sch¨utze.
Introduction
to Information Retrieval. Cambridge University Press, New
York, NY, USA, 2008.
[31] E. C. Micheli, G. Margaritis, and S. V. Anastasiadis. Ef-
In
ﬁcient multi-user indexing for secure keyword search.
EDBT/ICDT Workshops, pages 390–395, 2014.
[32] Microsoft. Multi-tenant data architecture.
https://msdn.
microsoft.com/en-us/library/aa479086.aspx, 2006.
[33] How Mingle built
its Elasticsearch cluster on AWS.
https://www.thoughtworks.com/mingle/news/scaling/2015/
01/06/How-Mingle-Built-ElasticSearch-Cluster.html, 2015.
[34] Elasticsearch: the deﬁnitive guide.
https://www.elastic.co/
guide/en/elasticsearch/guide/current/shared-index.html, 2016.
[35] MySQL full text search. http://dev.mysql.com/doc/refman/5.
7/en/fulltext-search.html, 2011.
[36] Orchestrate.
How we improved elasticsearch indexing.
https://www.ctl.io/developers/blog/post/improved-
elasticsearch-indexing, 2014.
[37] OriginLab. http://originlab.com/, 2016.
[38] D. A. Osvik, A. Shamir, and E. Tromer. Cache attacks and
countermeasures: the case of AES. In Cryptographers” Track
at the RSA Conference, pages 1–20. Springer, 2006.
[39] A. Parker-Wood, C. Strong, E. L. Miller, and D. D. Long.
Security aware partitioning for efﬁcient ﬁle system search. In
2010 IEEE 26th Symposium on Mass Storage Systems and
Technologies (MSST), pages 1–14. IEEE, 2010.
[40] C. Percival. Cache missing for fun and proﬁt, 2005.
[41] PostgreSQL. https://www.postgresql.org.
[42] Lucene’s practical scoring function.
https://www.elastic.
co/guide/en/elasticsearch/guide/current/practical-scoring-
function.html.
[43] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey,
you, get off of my cloud: exploring information leakage in
third-party compute clouds. In Proceedings of the 16th ACM
conference on Computer and communications security, pages
199–212. ACM, 2009.
[44] Searchify. https://www.searchify.com.
[45] Searchly – Elasticsearch as a service.
searchly.com, 2016.
https://http://www.
[46] A. Singh, M. Srivatsa, and L. Liu. Efﬁcient and secure search
of enterprise ﬁle systems. In IEEE International Conference
on Web Services (ICWS 2007), pages 18–25. IEEE, 2007.
[47] I. Soboroff.
Information retrieval evaluation demo. https://
github.com/isoboroff/trec-demo.
[48] Apache Solr. http://lucene.apache.org/solr/, 2016.
[49] Swiftype. Customer case studies. https://swiftype.com/custom
[50] Swiftype - site search and enterprise search. https://swiftype.
ers, 2016.
com, 2016.
[51] V. Varadarajan, Y. Zhang, T. Ristenpart, and M. M. Swift. A
placement vulnerability study in multi-tenant public clouds. In
USENIX Security, pages 913–928, 2015.
[52] Vulnerability.ch. Creative commons: Donors data leak. https:
//vulnerability.ch/tag/github/, 2014.
[53] Wikipedia. Okapi BM25.
https://en.wikipedia.org/wiki/
Okapi BM25.
[54] Wikipedia.
Term frequency-inverse document frequency.
https://en.wikipedia.org/wiki/Tf-idf, 2016.
[55] Z. Wu, Z. Xu, and H. Wang. Whispers in the hyper-space:
High-speed covert channel attacks in the cloud. In USENIX
Security symposium, pages 159–173, 2012.
[56] Xendo. Xendo security blog. https://help.xen.do/hc/en-us/
sections/200689704-Security, 2016.
[57] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and
R. Schlichting. An exploration of l2 cache covert channels
in virtualized environments. In Proceedings of the 3rd ACM
workshop on Cloud computing security workshop, pages 29–
40. ACM, 2011.
[58] S. Zerr, D. Olmedilla, W. Nejdl, and W. Siberski. Zerber+
r: Top-k retrieval from a conﬁdential index. In Proceedings
of the 12th International Conference on Extending Database
Technology: Advances in Database Technology, pages 439–
449. ACM, 2009.
[59] B. Zhang. A new, experimental approach to implement
multi-tenancy with Lucene 4. https://community.jivesoftware.
com/community/developer/blog/2013/06/24/a-new-experim
ental-approach-to-implement-multi-tenancy-with-lucene-4.
[60] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-
tenant side-channel attacks in PaaS clouds.
In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and
Communications Security, pages 990–1003. ACM, 2014.
692
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply.