            .text
    main:       li  $v0, 4          # load appropriate system call code into register $v0;
                            # code for printing string is 4
                                  打印字符串， 赋值对应的操作代码 $v0 = 4
            la  $a0, string1        # load address of string to be printed into $a0
                                 将要打印的字符串地址赋值  $a0 = address(string1)
            syscall             # call operating system to perform print operation
#### 结束例子
    li  $v0, 10          # system call code for exit = 10
    syscall             # call operating sys
## 数据定义
定义整型数据
定义Float数据
定义Double数据
定义字符串数据
### 用户输入
字符串输入
整型数据输入
浮点型数据输入
#### 单精度和双精度
单精度数（float型）在32位计算机中存储占用4字节，也就是32位，有效位数为7位，小数点后6位。
双精度数（double型）在32位计算机中存储占用8字节，也就是64位，有效位数为16位，小数点后15位。
### 浮点寄存器
在mips中一共有32个浮点寄存器(其中包含16个双精度浮点寄存器),用于单独处理浮点数
## 函数声明和调用
### 函数声明
格式
    jr  ra  #ra寄存器中保存着调用指令下一条代码所在的地址
### 函数调用
格式
    jal 函数名
举个例子：函数传参和返回值
    #需求:定义加法函数 并调用获取返回值int sum(int v,int b)
    main:
        addi $a1,$zero,50
        addi $a2,$zero,100
           jal add
        li $v0,1
           move $a0,$v1
           syscall
           #结束程序
           li $v0,10
           syscall
           add:
              add $v1,$a1,$a2
              jr $ra
之心前两步之后a1和a2的值进行了改写
执行完第三步将当前的程序计数器保存到 $ra 中，也就是这里的`0x000300c`，而后我们直接跳转到了add函数
将函数值写入了v1，我们继续看下一步返回的ra，jr是跳转寄存器，通过上面保存在 $ra 中的计数器返回调用前，单步执行看一下
果然，我们跳转到了调用之前，给v0赋值的位置，也就是说这里的jr主要作用是结束一个函数的调用，
执行两步，看下结果，a0已经被成功的赋值了
执行到结束，成功输出了内容，同时优雅退出程序
## 针对栈的操作
主要是栈空间的拉伸和平衡
### 入栈和出栈
嵌套函数通过栈保护`$ra`来记录函数的地址，保证函数的调用和返回
### 内存空间布局
我们在使用Mars的时候其实就已经在进行对内存空间的改写和编辑了，就比如说这里
其中栈的结构用途来表示就是这样的
栈的伸缩在mips和x86架构中都是从高地址往低地址进行伸缩，在arm架构中可以升序也可以降序
### 内存碎片
在内存动态分配（heap区）过程中容易出现一些小且不连续的空闲内存区域,这些未被使用的内存称作内存碎片
我们可以将其分成内部碎片和外部碎片
#### 内部碎片
比如数据在内存中采用4个字节对齐的方式进行存储,
比如我们申请一块3个字节的空间用于存储一个数据,但是系统给我们分配了4个字节空间,这时多出来的一个字节的空间就被称之为内部碎片
#### 外部碎片
在我们进行内存回收和分配的时候容易出现外部碎片,比如我连续申请了三块4个字节的内存空间,当我释放第二块内存空间然后紧接着申请一块8个字节的空间,此时由于之前释放的4个字节空间太小无法使用,这就造成了内存块空闲,这种碎片叫做外部碎片
## PC寄存器
**程序计数寄存器(Program Counter Register)** :用于存储程序即将要执行的指令所对应在内存中的实际物理地址,
如果改变该值可以让指令跳转到我们想要跳转的地方
那么如何修改pc寄存器中的值呢？
我们可以使用转移指令
    jr          #类似相对寻址，跳到该寄存器给出的地址处
    jal         #将当前的程序计数器保存到 $ra 中，跳转到 sub_label 处的程序语句
    j           #看到就跳，不用考虑任何条件
## 内存数据的读写
### 从指定内存中读取数据
从内存中读取数据的宽度取决于寄存器的大小，由于32位cpu寄存器最大储存32位数据
因此`lw $t0`表示一次性读取四个细节的数据到`$t0`寄存器
如果想要连续读取八个字节的数据，那么需要使用`$ld`这个伪指令
>
>     .data
>     LEN:
>         .word 12
>     .text
>     ld $6, LEN
>
> 它说基本代码
>  
>  
>     lui $1, 0x00001001
>     lw $6, 0x00000000($1)
>     lui $1, 0x00001001
>     lw $7, 0x00000004($1)
>
> lw指令似乎可以完成所需的所有操作：它将32位特定地址0x00000000加载到寄存器$ 6中，并将随后的32位加载到后续寄存器中。
>
> lui指令对我而言似乎毫无用处。 它甚至两次做同一件事，为什么呢？
>
> 它用作lw指令的偏移量，但必须具有两倍的相同值，否则我们不会在内存地址获得64位，而是两个"随机" 32位？
>
> 解释下
>
> ld是"加载双字"(64b)，它将加载指定的寄存器+下一个寄存器，因此$6表示ld中的$6+$7
所以`ld $t0`，表示一次性读取8个字节的数据到t0
### 往指定内存中写入数据
第一种
    #整型数据
    li $s1,4
    sw $s1,0x10010000  #将$s1寄存器中的数据存入0x10010000这个物理地址
    #单精度浮点数
    .data 
        f1: .float 3.14
    .text
    lwc1 $f2,f1
    swc1   $f2,0x10010000 
    #双精度浮点数
    .data 
        d1: .double 3.14
    .text
    ldc1 $f2,d1
    sdc1   $f2,0x10010000
对于整形数据来说，我们将代码放到mars中跑一下看看，这里对应的值a1也发生了改变，与此同时`$at`(保留寄存器）位置也发生了偏移，也就是说保留的空间整体都发生了偏移。同时多出了一行原指令，这其实代表了将sw拆分成为了两条指令执行，首先是执行了lui，也就是取了`$at`中的立即数，也就是获取保留的内容，然后再用sw将`$at`中保留的内容给`$s1`存入内存，最终的结果就是将`$s1`寄存器中的数据存入0x10010000这个物理地址
对单精度的浮点数进行测试，因为我们提前再数据段写入了数据，也就是f1的值，这样数据段地址的值就发生了变化。再通过lwc1（lwc1指令是针对FPU(协处理器)，也就是针对浮点数专门拎出来的一条指令。功能与lw一样。）把f1的值读到`$f2`。这里对swc1的处理也是分成了两条来进行，基本和上面的过程一样，首先是执行了lui，也就是取了`$at`中的立即数，也就是获取保留的内容，然后再用swc1将`$at`中保留的内容给`$f2`存入内存，最终的结果就是将`$f2`寄存器中的数据存入0x10010000这个物理地址
继续看双精度浮点数的测试，因为双精度浮点数会占用64位也就是八个字节的大小来存储数据，所以再数据段中会占八个字节来进行存储，之后我们将d1的值通过ldc1，其实就是ld，ld其实是ldc1的别名，是加载双字的意思，也就是加载64位，相当于加载了8个字节。它会将加载指定的寄存器+下一个寄存器，因此`ldc1
$f2,d1`，也就是`ldc1
$f2+$f3,d1`，所以f2和f3都有值。后面也是将sdc1拆分成了两条命令执行，基本和上面的过程一样，首先是执行了`lui`，也就是取了`$at`中的立即数，也就是获取保留的内容，然后再用swc1将`$at`中保留的内容给`$f2`存入内存，最终的结果就是将`$f2`寄存器中的数据存入0x10010000这个物理地址
第二种，在代码段中使用指令
以上直接使用的是简单粗暴的十六进制表示物理地址,很多时候内存的地址会保存在寄存器中,你可能会看到以下写法:
    lw $s1, $s2
    sw $s1, $s2 
    或者
    lw $s1, 20($s2)
    sw $s1, 20($s2) ;将地址往高位偏移20个字节 相当于sw $s1, 20+$s2
    或者
    lw $s1, -20($s2)
    sw $s1, -20($s2) ;将地址往低位偏移20个字节
但是要注意，往指定内存中读取和写入数据时，代码段不允许直接写入和读取
我们单步执行可以看到，我们将在内存中存储的`$s2`的20个字节加载到了`$s1`中，也就是加载到了寄存器里，执行之后s1就有了值，然后通过sw将寄存器的值在写回内存，加了20个字节，这样原本在内存中的`$s1`也就向高位偏移了20个字节
## 一组数组的定义
数组本质上就是多个数据的集合，在内存中按照一定顺序排列，角标即为每个数据的偏移值，在mips中内存数据是按照4个字节进行对齐的，也就是说一个数据最少占用4个字节内存空间，因此数组中数据之间的偏移量固定为`n*4`，n为角标值
    .data
        array: .space 20   #别名的另外一种用法 通过array(寄存器)这种格式 寄存器中存放地址偏移地址量
    .text 
    # $t0寄存器存放角标值*4之后的偏移量 $s1中存放需要存入的值
    li $s1,1
    li $t0,0
    sw $s1,array($t0) #相当于 sw $s1,array+$t0
    li $s1,2
    li $t0,4
    sw $s1,array($t0)
    li $s1,3
    li $t0,8
    sw $s1,array($t0)
我们把它放到mars中看下
.data段中存放了下偏移量，之后进入.text段，先将s1中存入一个值，然后将t0赋一个值，也就是这里的偏移量，然后执行sw存字，将s1的值从寄存器0个偏移的位置取出存入内存。这里我截图截的是在进行完第二段之后的状态，这里就很直观了，可以看到t0中存入了4，这里也就代表着偏移量为4，在下面的+4位置上正好可以看到s1所存放的值，第三段同理。
那么我们怎么输出他呢？也就是怎么打印出来呢？
    .data
        array: .space 20   
    .text 
    #初始化数组中的数据
    li $s1,1
    li $t0,0
    sw $s1,array($t0) 
    li $s1,2
    li $t0,4
    sw $s1,array($t0)
    li $s1,3
    li $t0,8
    sw $s1,array($t0)
    #查找角标为2的数值
    getData:
     la $s1 ,array
     li $a0,2
     mul $a0,$a0,4
     add $s1,$s1,$a0
     lw $a0,0($s1)
     li $v0,1
     syscall
    #将角标临时置为0 方便下面循环操作