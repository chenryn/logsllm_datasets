nodes can be faulty at any time. Therefore, we
name a quorum as any subset of Π with size at least equal
(cid:2)
to
N
2
(cid:3)
+ 1.
N
2
(cid:2)
(cid:3)
(cid:2)
(cid:3)
N
2
We follow the deﬁnition of Generalized Consensus
from [11], where each node can propose commands for
a set Cmd via the C-PROPOSE(Cmd c) interface and
nodes decide command structures C-structs via the C-
DECIDE(C-struct cs) interface. The speciﬁcation is such
that: commands that are included in the decided C-structs
must have been proposed (Non-triviality); if a node decided
a C-struct v at any time, then at all later times it can
only decide v • σ, where σ is a sequence of commands
(Stability); and two C-structs decided by two different
nodes are preﬁxes of the same C-struct (Consistency).
Since the Liveness property of M 2P AXOS depends on the
success of the object ownership acquisition, we adopt the
following deﬁnition: if a command c has been proposed by a
correct node and there is no other concurrent and conﬂicting
command with c in the system, c will eventually be decided
in some C-struct.
Finally, we assume that commands are deﬁned for access-
ing a set of objects whose identiﬁers are in the set LS, and a
command c is associated with a set of identiﬁers c.LS ⊆ LS.
158
IV. PROTOCOL OVERVIEW
M 2P AXOS is designed to ensures that conﬂicting com-
mands are ordered in the same way in all nodes by requiring
that, on the proposal of a command c, a leader ﬁrst acquires
the exclusive ownership of all the commands interfering
with c, called the interference set of c, before trying to
decide c. Acquiring exclusive ownership of interference
sets prevents contention among different leaders: any two
conﬂicting commands will be either ordered by a unique
leader, namely their owner, or they will be separated by a
change of ownership.
(cid:3)
(cid:2)
N
2
Once the ownership of interference sets is stable in the
system, commands can be ordered in parallel within two
communication delays as long as they are assigned to
different leaders, and by relying only on classic quorums
+ 1. That is achievable in the
of minimal size equal to
optimal conditions of partitionable workload; namely, when
there are no conﬂicts among commands that are proposed by
different nodes and the applications exhibit temporal locality.
To simplify the ownership acquisition, we assume that
the semantics of a command c is given in terms of the
set of objects c.LS that
it accesses. Therefore, we can
over-approximate the interference set of c by the set of all
commands which access at least one object in c.LS.
Therefore, an execution of M 2P AXOS for deciding the
order of a proposed command c proceeds as follows: i) if
the proposer of c has ownership of all the objects accessed
by c, it orders c as the next command to execute on those
objects, in two communication delays (Section IV-A); ii) if
the proposer of c does not have the necessary ownerships for
c, but there is another node that has them, then M 2P AXOS
forwards c to that node, thus adding one communication
delay to the previous case (Section IV-B); and iii) in all the
other cases, the node proposing c ﬁrst acquires the ownership
of c’s objects by using the same mechanism adopted by
Multi-Paxos to elect a new leader, and then performs step i)
(Section IV-C).
In the description of the protocol, we do not explicitly
refer to a phase that recovers from a crash of a node and
which would be in charge of ﬁnalizing the decision of
commands that are proposed by the crashed node. Indeed,
we show that this recovery is embedded into the process of
changing the ownership on an object l, because that change
has to ﬁrst take into account any pending command already
accepted and not yet decided for l.
For the sake of simplicity in the overview of the protocol,
in this section we suppose that every node can access an ora-
cle which is able to determine the owner of any object. Also,
we suppose the existence of a relation Decided = LS× IN
that associates objects with natural numbers representing the
consensus instances. In particular, (cid:3)l, in(cid:4) ∈ Decided means
that a command accessing object l has been decided after
all commands such that (cid:3)l, in(cid:2)(cid:4) ∈ Decided ∧ in(cid:2)  in. Later in Section V, we will explain how
M 2P AXOS maintains the information about object owner-
ship and decided commands.
A. The Fastest Delivery
(cid:2)
(cid:3)
N
2
If pi is the proposer of a command c and is also the owner
of all objects accessed by c, i.e., c.LS, then M 2P AXOS can
solve consensus with a fast decision of two communication
delays and by relying on quorums of
+ 1.
More speciﬁcally, in this case, triggering a C-PROPOSE(c)
on pi for a command c entails: i) broadcasting an ACCEPT
message with a pair (cid:3)l, in(cid:4) for each l ∈ c.LS such that
in is the minimum not yet decided instance for l,
i.e.,
(cid:3)l, in(cid:4) (cid:7)∈ Decided; and then ii) waiting for a quorum
of ACK messages. The wait condition is necessary for
recoverability of the decision in case of faults. In fact, if pi
crashes after the decision for c, there always exists a correct
node which received an ACCEPT for that decision. We say
that pi is the leader of the consensus instance in of l.
As an example, let us consider two commands c1 and
c2, which access the pairs of objects {A, B} and {B, C},
respectively. Further, let us suppose that c1 was decided in
instance 1 for both objects A and B and that c2 was decided
in instance 2 for object B and in instance 1 for object C.
Therefore, the sequence decided by the consensus so far is
c1 • c2. At this point, let us consider that pi is the current
owner of A and B and also proposes a new command c3
such that c3.LS = {A, B}. Then pi can simply broadcast an
ACCEPT message for c3 with the set ins = {(cid:3)A, 2(cid:4),(cid:3)B, 3(cid:4)},
meaning that it requests the other nodes to accept c3 as the
command that follows both c1 and c2 in the ﬁnal sequence.
When a node receives an ACCEPT message from pi, it can
broadcast an ACK in order to indicate that it accepts c in
the consensus instances speciﬁed by the received ACCEPT
message. Afterwards, when a node receives a quorum of
ACK messages for c,
it can consider c as ready to be
delivered in those consensus instances.
As will be clear in Section V, that is not always the case,
since a node can also reply with a NACK message on the
reception of an ACCEPT message. This can happen when
a node pj(cid:3)=i concurrently proposes a command accessing
part of (or all) the objects accessed by c. However, if the
workload is partitionable, then a node will generally issue
ACK rather than NACK as replies to ACCEPT messages, thus
generally enabling fast decisions.
B. Time to Forward
Contrary to the previous case, a node pi proposing a
command c could not have the ownership of all objects in
c.LS. However, there could exist a different node pj that
is the owner of all objects in c.LS. In this case, upon a
C-PROPOSE(c) event on node pi, pi forwards c to pj. This
forwarding step triggers a new C-PROPOSE(c) event on node
159
pj, which can execute the steps of a fast decision for c as
described in Section IV-A. It is worth noticing that, in this
case, although c cannot be decided in two communication
delays, it is still decided in three communication delays,
which is the minimum cost required to solve consensus in
an asynchronous system in case of concurrent and conﬂicting
proposals [14].
C. Reshufﬂing the Ownership
Finally, in case no node has ownership of all the objects
accessed by a proposed command c, M 2P AXOS executes
a reshufﬂe of the object ownership such that one of the
scenarios presented in Sections IV-A and IV-B is recreated.
The reshufﬂing of object ownership can be implemented
in different ways according to the degree of conﬂicts. In
this paper, we propose a simple and generally effective
implementation that does not provide any guarantee on the
maximum number of communication delays to be paid. Then
we give some hints on how to solve this problem in a
bounded number of communication delays. In addition, we
do not focus on the deﬁnition of policies that determine
the right
timing of triggering a reshufﬂing because we
believe this is an orthogonal problem that has already been
addressed effectively in literature (e.g., [24]). Therefore, in
our implementation we use a simple on-demand policy that
attempts to change the ownership for a command c when a
request C-PROPOSE(c) is issued by the application.
The simple solution. When a node pi has to propose a
command c and there is no unique owner pj (possibly equal
to pi) of all the objects in c.LS, then pi executes a Paxos
prepare phase [1] in order to start a new epoch for the next
available instances of all the objects in c.LS. The idea is the
same adopted by Multi-Paxos when it elects a new leader
in a new epoch e, but it is applied at the granularity of
consensus instances for each object accessed by c.
in this case, pi broadcasts a PREPARE
message containing tuples (cid:3)l, in, e(cid:4), for each l ∈ c.LS, and
such that in is the smallest instance associated with l where
(cid:3)l, in(cid:4) (cid:7)∈ Decided, and e is the successor of the current
epoch number associated with l.
In particular,
Afterwards, pi waits for a quorum of replies and, if the
quorum does not contain any NACK message, pi has been
acknowledged to be the current leader for all the objects
in c.LS. At that point, pi can just request the acceptance
of c for all instances in deﬁned above, as explained in
Section IV-A, if the replies in this phase do not suggest the
acceptance of any other command different from c. Indeed,
as will be clearer in Section V, there could be another
command c(cid:2) that has been accepted in some of the instances
selected by pi but whose decision has not been ﬁnalized yet.
Such a scenario occurs if a node lost ownership of some
of the objects accessed by c(cid:2) after having sent an ACCEPT
message for c(cid:2).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:37 UTC from IEEE Xplore.  Restrictions apply. 
On the other hand, if pi receives at least one NACK in
this phase, it is forced to retry the ownership acquisition
with greater epoch numbers.
Bounding the Communication Delays. Negative acknowl-
edgements received during the ownership acquisition could
generate an unbounded sequence of restarts of the acquisi-
tion itself. This is not an optimal scenario for M 2P AXOS
because this happens in the case of multiple nodes trying
to concurrently acquire ownership of common objects. Typ-
ically, if the frequency of such attempts is high, it means
that the workload using M 2P AXOS is not partitionable. In
addition, we also have to notice that, in such scenarios, it
might not at all be worth having a protocol optimized for low
inter-node conﬂict rates (e.g., EPaxos [8], Fast/Generalized
Paxos [11], M 2P AXOS), and adopting a classical Paxos
implementation would be more effective [30].
However, in case we would like to establish a bound on
the number of communication delays paid in this phase, we
can either totally order ownership acquisition requests by
relying on another separate consensus instance or designate
one single leader to be responsible for solving conﬂicts on
ownership acquisitions. Also, to keep performance consis-
tent across varying workloads, we could use the approach
described in [31] to combine M 2P AXOS with algorithms
that perform well on workloads not favorable to M 2P AXOS.
For example, we could obtain an algorithm that dynamically
switches between M 2P AXOS and Multi-Paxos according to
the workload characteristics.
V. M 2P AXOS: PROTOCOL DETAILS
Since M 2P AXOS implements the Generalized Consensus
speciﬁcation, it exposes the interface C-PROPOSE(Cmd c)
used by any node to propose a command c and the interface
C-DECIDE(C-structs cs) used to deliver a C-structs cs to
any node. Before describing the details of the protocol, we
introduce all the data structures associated with a node in the
system. Then we present the complete protocol, covering all
the aspects we only provided an intuition of in Section IV.
A. Data Structures
Each node pi maintains the following data structures:
- Decided and LastDecided. The former is a multidimen-
sional array that maps (cid:3)object, consensus instance(cid:4) pairs
to commands. Decided[l][in] = c if c has been decided in
the consensus instance in (i.e., in position in) of the object
l. The latter is a unidimensional array that maps objects
to consensus instances such that LastDecided[l] = in if
in is the most recent instance for which pi has observed
a decision for object l. The initial values per object are
N U LL in Decided and 0 in LastDecided.
- Epoch. It is an array that maps objects to epoch numbers
(i.e., non-negative integers). Epoch[l] = e means that e
is the current epoch number that has been observed by pi
for the object l. The initial values are 0.
- Owners. It
is an array that maps objects to nodes.
Owners[l] = pj means that pj is the current owner of
the object l. The initial values are N U LL.
- Rnd, Rdec and V dec. They are three multidimensional
arrays. The ﬁrst two map (cid:3)object, consensus instance(cid:4)
the third one maps pairs of
pairs to epoch numbers;
the form (cid:3)object, consensus instance(cid:4) to commands. In
particular, Rnd[l][in] = e if e is the highest epoch number
in which pi has participated in the consensus instance in of
object l; Rdec[l][in] = e if e is the highest epoch number
in which pi has accepted a command for the consensus
instance in of object l; and V dec[l][in] = c if c is the