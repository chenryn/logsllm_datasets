        ThreadBasicInformation,             //0
        ThreadTimes,                        //1
        ThreadPriority,                     //2
        ThreadBasePriority,                 //3
        ThreadAffinityMask,                 //4
        ThreadImpersonationToken,           //5
        ThreadDescriptorTableEntry,         //6
        ThreadEnableAlignmentFaultFixup,    //7
        ThreadEventPair_Reusable,           //8
        ThreadQuerySetWin32StartAddress,    //9
        ThreadZeroTlsCell,                  //10
        ThreadPerformanceCount,             //11
        ThreadAmILastThread,                //12
        ThreadIdealProcessor,               //13
        ThreadPriorityBoost,                //14
        ThreadSetTlsArrayAddress,           //15
        ThreadIsIoPending,                  //16
        ThreadHideFromDebugger,             //17
        ThreadBreakOnTermination,           //18   0x12
        ThreadSwitchLegacyState,            //19
        ThreadIsTerminated,                 //20
        ThreadLastSystemCall,               //21
        ThreadIoPriority,                   //22
        ThreadCycleTime,                    //23
        ThreadPagePriority,                 //24
        ThreadActualBasePriority,           //25
        ThreadTebInformation,               //26
        ThreadCSwitchMon,                   //27
        MaxThreadInfoClass                  //28
    } THREADINFOCLASS;
    // 函数指针
    typedef NTSYSCALLAPI NTSTATUS(WINAPI *NTSETINFORMATIONTHREAD)(
        HANDLE ThreadHandle,
        THREADINFOCLASS ThreadInformationClass,
        PVOID ThreadInformation,
        ULONG ThreadInformationLength
        );
    typedef BOOL(__cdecl *RTLADJUSTPRIVILEGE)(ULONG, BOOL, BOOL, PBOOLEAN);
    NTSETINFORMATIONTHREAD NtSetInformationThread;
    RTLADJUSTPRIVILEGE RtlAdjustPrivilege;
    int main()
    {
        // 任何进程都会自动加载ntdll
        HMODULE  NtBase = GetModuleHandle(TEXT("ntdll.dll"));
        if (!NtBase) return false;
        // 获取各函数地址
        NtSetInformationThread = (NTSETINFORMATIONTHREAD)GetProcAddress(NtBase, "NtSetInformationThread");
        RtlAdjustPrivilege = (RTLADJUSTPRIVILEGE)GetProcAddress(NtBase, "RtlAdjustPrivilege");
        BOOLEAN A;
        BOOL Enable = TRUE;
        // RtlAdjustPrivilege返回值为0才成功
        if (RtlAdjustPrivilege(SE_DEBUG_PRIVILEGE, TRUE, FALSE, &A))
        {
            printf("------Please run program as an Administrator------\n");
            system("pause");
            return FALSE;
        }
        // 设置本进程为Critical Process
        NtSetInformationThread(GetCurrentThread(), ThreadBreakOnTermination, &Enable, sizeof(Enable));
        // 退出
        ExitProcess(0);
        //TerminateProcess((HANDLE)-1, 0);
    }
**很遗憾，执行了一下发现并没有蓝屏，这也是网上经常出现的代码，很多人在各论坛里抄来抄去，却不知道这段代码根本不好使**
。我觉得这段代码应该是XP时期的，因为它在XP下是可以蓝的。
这代码乍一看，确实觉得没问题，退出进程不就会退出所有的线程吗？那么退出线程里检测到BreakOnTermination为1就应该蓝屏啊。
继续猜测：第一个参数传的是-2，当前线程即主线程。莫非是主线程不能作为`Critical Therad`？那么我将所有线程全部设成`Critical
Therad`呢？
我这里用vs2015选择x64 Release版本，这样子设置程序就会有4个线程（如果没有的话，可以自己多创建几个线程），方便进行测试
    #include 
    #include 
    #include 
    const ULONG SE_DEBUG_PRIVILEGE = 20;
    typedef enum _THREADINFOCLASS
    {
        ThreadBasicInformation,             //0
        ThreadTimes,                        //1
        ThreadPriority,                     //2
        ThreadBasePriority,                 //3
        ThreadAffinityMask,                 //4
        ThreadImpersonationToken,           //5
        ThreadDescriptorTableEntry,         //6
        ThreadEnableAlignmentFaultFixup,    //7
        ThreadEventPair_Reusable,           //8
        ThreadQuerySetWin32StartAddress,    //9
        ThreadZeroTlsCell,                  //10
        ThreadPerformanceCount,             //11
        ThreadAmILastThread,                //12
        ThreadIdealProcessor,               //13
        ThreadPriorityBoost,                //14
        ThreadSetTlsArrayAddress,           //15
        ThreadIsIoPending,                  //16
        ThreadHideFromDebugger,             //17
        ThreadBreakOnTermination,           //18   0x12
        ThreadSwitchLegacyState,            //19
        ThreadIsTerminated,                 //20
        ThreadLastSystemCall,               //21
        ThreadIoPriority,                   //22
        ThreadCycleTime,                    //23
        ThreadPagePriority,                 //24
        ThreadActualBasePriority,           //25
        ThreadTebInformation,               //26
        ThreadCSwitchMon,                   //27
        MaxThreadInfoClass                  //28
    } THREADINFOCLASS;
    // 函数指针
    typedef NTSYSCALLAPI NTSTATUS(WINAPI *NTSETINFORMATIONTHREAD)(
        HANDLE ThreadHandle,
        THREADINFOCLASS ThreadInformationClass,
        PVOID ThreadInformation,
        ULONG ThreadInformationLength
        );
    typedef BOOL(__cdecl *RTLADJUSTPRIVILEGE)(ULONG, BOOL, BOOL, PBOOLEAN);
    NTSETINFORMATIONTHREAD NtSetInformationThread;
    RTLADJUSTPRIVILEGE RtlAdjustPrivilege;
    int main()
    {
        // 任何进程都会自动加载ntdll
        HMODULE  NtBase = GetModuleHandle(TEXT("ntdll.dll"));
        if (!NtBase) return false;
        // 获取各函数地址
        NtSetInformationThread = (NTSETINFORMATIONTHREAD)GetProcAddress(NtBase, "NtSetInformationThread");
        RtlAdjustPrivilege = (RTLADJUSTPRIVILEGE)GetProcAddress(NtBase, "RtlAdjustPrivilege");
        BOOLEAN A;
        BOOL Enable = TRUE;
        // RtlAdjustPrivilege返回值为0才成功
        if (RtlAdjustPrivilege(SE_DEBUG_PRIVILEGE, TRUE, FALSE, &A))
        {
            printf("------Please run program as an Administrator------\n");
            system("pause");
            return FALSE;
        }
        //    将所有线程设置为Critical Therad
        // 拍摄快照，该快照拥有拍摄时刻的所有进程和线程信息
        HANDLE Snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, NULL);
        THREADENTRY32 te32;
        // 在使用 Thread32First 前初始化 THREADENTRY32 的结构大小.
        te32.dwSize = sizeof(THREADENTRY32);
        // 获取第一个线程
        if (Thread32First(Snapshot, &te32))
        {
            ULONG PID = GetCurrentProcessId();
            HANDLE ThreadHandle = NULL;
            te32.dwSize = sizeof(te32);
            do
            {
                ThreadHandle = OpenThread(THREAD_ALL_ACCESS,FALSE,te32.th32ThreadID);
                // 如果线程属于本进程  则将其设置为Critical Thread
                if (PID == te32.th32OwnerProcessID)
                {
                    NTSTATUS status = NtSetInformationThread(ThreadHandle, ThreadBreakOnTermination, &Enable, sizeof(Enable));
                    printf("线程ID为%X\n",te32.th32ThreadID);
                }
                // 直至遍历完所有线程
            } while (Thread32Next(Snapshot, &te32));
        }
        // 退出
        ExitProcess(0);
        //TerminateProcess((HANDLE)-1, 0);
    }
仍然没有蓝屏，是不是没有设置成功呢？用Windbg看一下四个线程的位置
**四个线程的BreakOnTermination确实已经置1，却还是没有蓝屏。**
看来上面那些都不是蓝屏的重点。尽管没有猜出它蓝屏的条件，但是这种猜测是完全有必要的，有时候能节省不少时间，不能像无头苍蝇一样冲进去就开逆，有时候这样会适得其反，逆向时最重要的就是带着自己的想法和目的去逆，把所有代码都看一遍是不可能的。在这里为大家抛出这些疑问，下一节将带着这些疑问进一步探索`Critical
Therad`的秘密。
## 0x07 总结
本篇主要讲解了Critical
Process/Thread是如何被设置的，Process又是如何导致蓝屏的，介绍了其中的一些重要结构和类型，最终解决了问题1和问题2，经过一些探索又对Critical
Thread产生了疑问，下篇文章将为大家解答这些疑问。
## 0x08 参考
[NtGlobalFlags](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-flag-table?redirectedfrom=MSDN)  
[Ring3触发BSOD代码实现及内核逆向分析](https://www.anquanke.com/post/id/213412)