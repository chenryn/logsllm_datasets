title:CAVEAT: A Tool for Software Validation
author:Patrick Baudin and
Anne Pacalet and
Jacques Raguideau and
Dominique Schoen and
Nicky Williams
CAVEAT : a Tool for Software Validation
P.Baudin - A.Pacalet - J.Raguideau - D.Schoen - N.Williams
CEA Saclay, DTSI-SLA, 91191 Gif sur Yvette Cedex, France
PI:EMAIL
Abstract
Caveat is a static analysis tool designed to help verify
safety critical software. It operates on ANSI C programs.
It was developed by CEA, the French nuclear agency and
is used as an operational tool by Airbus-France and EdF,
the French electricity company. It is mainly based on Hoare
Logic and rewriting of ﬁrst order logic predicates. The main
features of Caveat are property synthesis, navigation facili-
ties, and proof of properties
1 Features
The property synthesis is the ﬁrst phase performed by
the tool and is fully automatic. It computes the call graph of
functions, extracts the operands for each function, generates
possible threats of execution crash. The computed operands
are not only the explicit operands but also the implicit ones,
i.e. global variables used locally and by the called functions.
The dependencies between inputs and outputs are computed
as well as, if possible, functional expressions linking out-
puts to inputs. The threat generation consists of the detec-
tion of certain unsafe operations such as division by zero,
dereferencing of null pointers or out of range array access.
The pre-conditions for these threats to be avoided are com-
puted locally and then propagated through the call graph. If
a pre-condition is proved to be satisﬁed at some level, the
associated threat will not occur.
Navigation facilities, such as browsing facilities or visuali-
sation of graphs, are provided. The call graph displays the
structure of the application and is colored to show the re-
sults of threat generation.
Property proof combines interactive and automatic op-
erations:
the user adds properties such as pre or post-
conditions and asks for their proof. If the result is not true,
meaning that the property was not automatically proven,
the cause can be either a weakness of the theorem prover
or missing information; in both cases the user is provided
with the remaining condition; in the ﬁrst case, under the
control of the tool, he can interactivly choose which trans-
formations to apply to the condition until the proof can be
performed automatically. In the second case, the remainder
contains the missing information, so the user can identify it
and adds it to go on with the veriﬁcation process.
The implementation of Hoare Logic in Caveat gives
good results in the veriﬁcation of critical software for two
main reasons: the ﬁrst one is that critical applications gener-
ally impose restrictions on the use of the C language: no re-
cursion, no alias, no dynamic use of memory. Furthermore,
programming must respect rules of good practice which re-
sults in a modular architecture and small modules. The sec-
ond one is that the aim is to ensure that functional, safety
or robustness properties given by the user are veriﬁed and
not to prove a complete functional speciﬁcation. Caveat is
based on the principle that it is not necessary to know ev-
erything about all functions to achieve a proof. Veriﬁcation
work with Caveat is an iterative process: at each step, the
tool indicates just what is needed to go further. In spite of
its theoretical limits, this technique gives very good results
when used with a progmatic approach.
2
Industrial use and future work
Features designed for industrial use have been added
to allow re-use of previous work, writing proof plans, re-
running of previous sessions. EdF uses Caveat to evalu-
ate the dependability of applications coming from outside
sources while Airbus decided, after an experimental phase,
to include Caveat in the operational software development
process to validate pieces of code as early as possible.
We are now working on features to extend the area
of available applications, increase the automation of the
proofs, and reduce the complexity of the computation.
Aliases are not treated in the current version; it is necessary
to address this feature to cope with a wider class of applica-
tions. Loops are a key point in a tool based on Hoare Logic.
The current method used for loops is too constraining to ob-
tain good results in the automatic proof. We are now adding
abstract interpretation and making the two techniques coop-
erate. We plan to add slicing and propagation of hypotheses
to reduce the code to consider during the computation.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:17:48 UTC from IEEE Xplore.  Restrictions apply.