# CAVEAT: A Tool for Software Validation

**Authors:**  
Patrick Baudin, Anne Pacalet, Jacques Raguideau, Dominique Schoen, Nicky Williams  
CEA Saclay, DTSI-SLA, 91191 Gif sur Yvette Cedex, France  
Email: [PI:EMAIL]

## Abstract
CAVEAT is a static analysis tool designed to assist in the verification of safety-critical software. It operates on ANSI C programs and was developed by CEA, the French nuclear agency. The tool is currently used operationally by Airbus-France and Électricité de France (EdF). CAVEAT is primarily based on Hoare Logic and the rewriting of first-order logic predicates. Its key features include property synthesis, navigation facilities, and property proof.

## 1. Features

### 1.1 Property Synthesis
The property synthesis is the initial phase performed by CAVEAT and is fully automated. This phase involves several steps:
- **Call Graph Computation:** The tool generates the call graph of functions.
- **Operand Extraction:** It extracts both explicit and implicit operands for each function, including global variables used locally and by called functions.
- **Dependency Analysis:** Dependencies between inputs and outputs are computed, along with functional expressions linking outputs to inputs, if possible.
- **Threat Generation:** The tool detects potential threats such as division by zero, dereferencing of null pointers, or out-of-range array access. Pre-conditions to avoid these threats are computed locally and propagated through the call graph. If a pre-condition is proven to be satisfied at any level, the associated threat is considered non-existent.

### 1.2 Navigation Facilities
CAVEAT provides various navigation tools, including browsing and visualization of graphs. The call graph, which displays the application's structure, is color-coded to show the results of threat generation.

### 1.3 Property Proof
Property proof in CAVEAT combines interactive and automatic operations:
- **User Interaction:** Users can add properties such as pre- or post-conditions and request their proof.
- **Proof Outcome:** If the property is not automatically proven, the user is provided with the remaining conditions. The cause could be either a weakness in the theorem prover or missing information.
- **Interactive Resolution:** In the case of a weak theorem prover, the user can interactively choose transformations to apply to the condition until the proof can be performed automatically.
- **Information Addition:** If the issue is due to missing information, the user can identify and add the necessary information to continue the verification process.

### 1.4 Implementation of Hoare Logic
The implementation of Hoare Logic in CAVEAT is effective for verifying critical software for two main reasons:
- **Restrictions on C Language Use:** Critical applications typically impose restrictions such as no recursion, no aliasing, and no dynamic memory use. Additionally, programming must adhere to best practices, resulting in a modular architecture and small modules.
- **Verification Focus:** The goal is to verify functional, safety, or robustness properties provided by the user, rather than proving a complete functional specification. CAVEAT operates on the principle that it is not necessary to know everything about all functions to achieve a proof. The verification process is iterative, with the tool indicating what is needed at each step. Despite theoretical limitations, this approach yields excellent results when used pragmatically.

## 2. Industrial Use and Future Work

### 2.1 Industrial Use
Features designed for industrial use have been added to CAVEAT, including:
- **Reusability:** Allowing reuse of previous work.
- **Proof Plans:** Enabling the writing of proof plans.
- **Session Reruns:** Facilitating the rerunning of previous sessions.
- **Application Examples:** EdF uses CAVEAT to evaluate the dependability of external applications, while Airbus has integrated CAVEAT into their operational software development process to validate code as early as possible.

### 2.2 Future Work
We are currently working on enhancing CAVEAT with the following features:
- **Extended Application Area:** Expanding the range of applications that can be verified.
- **Increased Automation:** Enhancing the automation of proofs.
- **Reduced Complexity:** Reducing the computational complexity.
- **Alias Handling:** Addressing the treatment of aliases to handle a wider class of applications.
- **Loop Handling:** Improving the method for handling loops, which is a key aspect in a tool based on Hoare Logic. We are integrating abstract interpretation to improve the cooperation between techniques.
- **Slicing and Hypothesis Propagation:** Adding slicing and hypothesis propagation to reduce the amount of code to consider during the computation.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:17:48 UTC from IEEE Xplore. Restrictions apply.**