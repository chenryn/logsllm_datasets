𝜆 (bits)
112
128
112 (H)
128 (H)
crs (kB)
1.24
1.77
0.47
0.62
𝑐 (kB)
667.88
1276.94
0.4
0.52
𝜋 (kB)
1721.34
3213
0.48
0.64
computations (resp. size 3072 for 128 bits security). We used SHA3-
256 to implement the random oracles H1 and H2, and SHAKE256
for H3.
Communication Size Costs. Our time-lock puzzle 𝑍 is composed
of an element of 𝐶𝑙(Δ𝐾) and one of 𝐶𝑙(Δ𝑞). At the 112 bits (resp.
128 bits) security level, this is 3208 bits (resp. 4166 bits). Notice
that using a recent compression technique of [40] this could be
reduced by a factor 3/4. The sizes for our CCA timed-commitment
can be found in Table 1: 𝑐 contains a puzzle 𝑍 together with Elgamal
encryptions of the bits of the randomness used to create 𝑍 both in
the class group G and the prime order group ˜G and 𝜋 is the NIZK
proof.
One can dramatically improve these sizes using a heuristic vari-
ant. In this variant we replace the complex NIZK proof by a sigma
protocol that prove the well-formedness of the time-lock puzzle 𝑍
for which we assume straight-line extractability. More precisely, to
prove that (𝑍1, 𝑍2) = (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚) relatively to 𝐺 and 𝐻 for
some 𝑟 and 𝑚, we can straightforwardly adapt the proof from [25]
that a CL ciphertext is well formed to our fast variant, which allows
a direct extraction of the message 𝑚. This reduce the size of the
crs as we do not need to define ˜G. Moreover, the size of 𝑐 shrinks
a lot as we do not need to re-encrypt bit by bit the randomness 𝑟.
The proof 𝜋 now only contains this NIZK of well-formedness of a
ciphertext under the vast variant of CL.
Computation Time Costs. We set the parameter T = 226 which
corresponds to an time-lock opening time of roughly 45 minutes
for 𝜆 = 112 (resp. one hour for 𝜆 = 128) in our local machine.
This corresponds to the timing of TForceOp. The running time of
TSetup is dominated by the generation of the puzzle: the group
generators CGGen and GGen only take a couple of seconds. The
running time of TCom and TVfy does not depend on T and it is
dominated by the computation of a huge number of exponentiations.
Note that contrary to the solving of the puzzle, these phases can be
parallelized: the running times of TCom and TVfy can be reduced
by a factor of 𝑁 by working with 𝑁 threads. The corresponding
benchmarks can be found in Table 2. Despite the complexity of
our proven NIZK proof of well-formedness, the timings remain
practical, especially in a context where we can use parallelization
for TCom and TVfy and applications with large time-lock opening
time. We also report running time for the heuristic version (lines
(H)) where we obtain a highly efficient protocol. We also report in
Table 3 timings with T = 219 which gives an opening time around
5 seconds which shows that TCom and TVfy are independent of T.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2674Table 2: Running time of CCA Timed Commitments on a
single thread reported in seconds with T = 226. (H) denotes
our heuristic variant.
𝜆 (bits)
112
128
112 (H)
128 (H)
TSetup
2617
3691
2596
3641
TCom TVfy
194
244
468
600
0.116
0.194
0.341
0.203
TForceOp
2594
3682
2584
3635
Table 3: Running time of CCA Timed Commitments on a sin-
gle thread reported in seconds with T = 217 for our heuristic
variant.
𝜆 (bits)
112 (H)
128 (H)
TSetup
7.99
13.474
TCom TVfy
0.120
0.2
0.205
0.337
TForceOp
5.272
7.259
Parallelisation. Our implementation uses only a single thread and
is therefore non-optimized. We expect the performance to substan-
tially improve with optimisations. In particular, independent expo-
nentiations during the commitment generation can be performed
using several threads in parallel. For instance, a workstation with 2
Dodeca Core processors, a 112 bits security commitment takes 5 sec
using 48 threads. Furthermore, optimisations in the basic arithmetic
in class groups is largely unexplored unlike in finite fields, leaving
open a lot of improvements in this direction.
9 CONCLUSIONS
In this work we constructed a timed commitment scheme with a
transparent setup, homomorphic evaluation properties, and satisfy-
ing CCA security. Along the way, we introduced new technical tools,
such as a homomorphic time-lock puzzle scheme over class groups
and a new simulation-extractable NIZK proof of well-formedness,
that may be of independent interest. As an application, we proposed
a new distributed randomness generation protocol that satisfies
many desirable efficiency and security properties. As a next step,
we plan to explore further applications of our randomness gen-
eration protocol and its integration in complex scenarios such as
cryptocurrencies or blockchain consensus.
ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their comments in im-
proving the work. This work was supported by the French ANR
ALAMBIC project (ANR-16-CE39-0006). This work was also par-
tially supported by the Deutsche Forschungsgemeinschaft (DFG –
German Research Foundation) under 442893093, and by the state
of Bavaria at the Nuremberg Campus of Technology (NCT).
REFERENCES
[1] Navid Alamati, Pedro Branco, Nico Döttling, Sanjam Garg, Mohammad Haji-
abadi, and Sihang Pu. 2021. Laconic Private Set Intersection and Applications.
Cryptology ePrint Archive, Report 2021/728. https://ia.cr/2021/728.
[2] Benny Applebaum, Yuval Ishai, and Eyal Kushilevitz. 2011. How to Garble
Arithmetic Circuits. In 52nd FOCS, Rafail Ostrovsky (Ed.). IEEE Computer Society
Press, Palm Springs, CA, USA, 120–129. https://doi.org/10.1109/FOCS.2011.40
[3] Carsten Baum, Bernardo David, Rafael Dowsley, Jesper Buus Nielsen, and Sabine
Oechsner. 2020. TARDIS: A Foundation of Time-Lock Puzzles in UC. Cryptology
ePrint Archive, Report 2020/537. https://eprint.iacr.org/2020/537.
[4] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. 2018. Scalable,
transparent, and post-quantum secure computational integrity. Cryptology ePrint
Archive, Report 2018/046. https://eprint.iacr.org/2018/046.
[5] Iddo Bentov, Ariel Gabizon, and David Zuckerman. 2016. Bitcoin Beacon.
arXiv:1605.04559 [cs.CR]
133–137.
[6] Jean-François Biasse, Michael J. Jacobson, and Alan K. Silvester. 2010. Security
Estimates for Quadratic Field Based Cryptosystems. In ACISP 10 (LNCS, Vol. 6168),
Ron Steinfeld and Philip Hawkes (Eds.). Springer, Heidelberg, Germany, Sydney,
NSW, Australia, 233–247.
[7] Nir Bitansky, Shafi Goldwasser, Abhishek Jain, Omer Paneth, Vinod Vaikun-
tanathan, and Brent Waters. 2016. Time-Lock Puzzles from Randomized Encod-
ings. In ITCS 2016, Madhu Sudan (Ed.). ACM, Cambridge, MA, USA, 345–356.
https://doi.org/10.1145/2840728.2840745
[8] Manuel Blum. 1982. Coin Flipping by Telephone. In Proc. IEEE Spring COMPCOM.
[9] Manuel Blum, Paul Feldman, and Silvio Micali. 1988. Non-Interactive Zero-
Knowledge and Its Applications (Extended Abstract). In 20th ACM STOC. ACM
Press, Chicago, IL, USA, 103–112. https://doi.org/10.1145/62212.62222
[10] Alexandra Boldyreva and Daniele Micciancio (Eds.). 2019. CRYPTO 2019, Part I.
[11] Dan Boneh, Joseph Bonneau, Benedikt Bünz, and Ben Fisch. 2018. Verifiable
Delay Functions. In CRYPTO 2018, Part I (LNCS, Vol. 10991), Hovav Shacham and
Alexandra Boldyreva (Eds.). Springer, Heidelberg, Germany, Santa Barbara, CA,
USA, 757–788. https://doi.org/10.1007/978-3-319-96884-1_25
LNCS, Vol. 11692. Springer, Heidelberg, Germany, Santa Barbara, CA, USA.
[12] Dan Boneh, Benedikt Bünz, and Ben Fisch. 2019. Batching Techniques for Accu-
mulators with Applications to IOPs and Stateless Blockchains, See [10], 561–586.
https://doi.org/10.1007/978-3-030-26948-7_20
[13] Dan Boneh and Moni Naor. 2000. Timed Commitments. In CRYPTO 2000 (LNCS,
Vol. 1880), Mihir Bellare (Ed.). Springer, Heidelberg, Germany, Santa Barbara, CA,
USA, 236–254. https://doi.org/10.1007/3-540-44598-6_15
[14] Joseph Bonneau, Jeremy Clark, and Steven Goldfeder. 2015. On Bitcoin as a
public randomness source. Cryptology ePrint Archive, Report 2015/1015. https:
//eprint.iacr.org/2015/1015.
[15] Zvika Brakerski, Nico Döttling, Sanjam Garg, and Giulio Malavolta. 2019. Lever-
aging Linear Decryption: Rate-1 Fully-Homomorphic Encryption and Time-Lock
Puzzles. In TCC 2019, Part II (LNCS, Vol. 11892), Dennis Hofheinz and Alon
Rosen (Eds.). Springer, Heidelberg, Germany, Nuremberg, Germany, 407–437.
https://doi.org/10.1007/978-3-030-36033-7_16
[16] J. Buchmann and U. Vollmer. 2007. Binary Quadratic Forms. An Algorithmic
Approach. Springer.
[17] Johannes Buchmann and Hugh C. Williams. 1988. A Key-Exchange System Based
on Imaginary Quadratic Fields. Journal of Cryptology 1, 2 (June 1988), 107–118.
https://doi.org/10.1007/BF02351719
[18] Benedikt Bünz, Ben Fisch, and Alan Szepieniec. 2020. Transparent SNARKs from
DARK Compilers. In Advances in Cryptology – EUROCRYPT 2020, Anne Canteaut
and Yuval Ishai (Eds.). Springer International Publishing, Cham, 677–706.
[19] Benedikt Bünz, Ben Fisch, and Alan Szepieniec. 2020. Transparent SNARKs from
DARK Compilers. In EUROCRYPT 2020, Part I (LNCS, Vol. 12105), Anne Canteaut
and Yuval Ishai (Eds.). Springer, Heidelberg, Germany, Zagreb, Croatia, 677–706.
https://doi.org/10.1007/978-3-030-45721-1_24
[20] Benedikt Bünz, Steven Goldfeder, and Joseph Bonneau. 2017. Proofs-of-delay
and randomness beacons in Ethereum.
[21] Jeffrey Burdges and Luca De Feo. 2020. Delay Encryption. Cryptology ePrint
Archive, Report 2020/638. https://eprint.iacr.org/2020/638.
[22] Christian Cachin, Klaus Kursawe, and Victor Shoup. 2000. Random oracles in
constantipole: practical asynchronous Byzantine agreement using cryptography
(extended abstract). In 19th ACM PODC, Gil Neiger (Ed.). ACM, Portland, OR,
USA, 123–132. https://doi.org/10.1145/343477.343531
[23] Ignacio Cascudo and Bernardo David. 2017. SCRAPE: Scalable Randomness At-
tested by Public Entities. In ACNS 17 (LNCS, Vol. 10355), Dieter Gollmann, Atsuko
Miyaji, and Hiroaki Kikuchi (Eds.). Springer, Heidelberg, Germany, Kanazawa,
Japan, 537–556. https://doi.org/10.1007/978-3-319-61204-1_27
[24] Guilhem Castagnos, Dario Catalano, Fabien Laguillaumie, Federico Savasta, and