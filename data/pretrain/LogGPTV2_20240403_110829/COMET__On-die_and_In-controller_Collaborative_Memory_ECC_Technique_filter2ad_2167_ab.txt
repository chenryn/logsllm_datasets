Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
125
• s = 0: No error.
• s (cid:5)= 0: Error detected; syndrome is matched with columns
of the parity check matrix H to determine the exact
bit-location of the error. If the syndrome matching is
unsuccessful, the decoder declares it as a DUE.
The syndrome is generated without any knowledge about
the exact number of errors in the received codeword. If
the number of errors exceeds the correction capability of
the code and the syndrome matching is successful it would
mean one of the following scenarios have occurred:
• s = 0: The decoder declares the codeword error-free and
all bits of errors go undetected.
• s (cid:5)= 0 and points to a bit: This bit can be one of the
erroneous bits or a non-erroneous bit. In either case, the
decoder will ﬂag a CE and miscorrect that bit.
This leads to SDC where the decoder wrongly declares data
with errors as correct. In this work, we attempt to reduce
such SDC events when double-bit errors occur.
C. SEC vs. SECDED
Single-Error Correcting (SEC) codes (dmin =3) correct all
possible SBEs. The columns in the parity-check matrix H of
a linear SEC code are distinct and the minimum number of
columns to form a linearly dependent set is 3. This ensures
that every legal codeword is at-least 3 bit ﬂips away from
each other. Single-Error Correcting, Double-Error Detecting
(SECDED) codes (dmin = 4) [18] can correct all SBEs and
detect all possible DBEs. The minimum number of columns
to form a linearly dependent set in the parity-check matrix
H of a linear SECDED code is 4. Every legal codeword is
at least four bit ﬂips away from each other. Both these codes
can correct SBEs. In case of DBEs, SEC code either declares
a DUE or miscorrects by ﬂipping a third bit. SECDED, on
the other hand, always declares a DUE when a DBE occurs.
III. MOTIVATION
Single bit errors are still the majority of the failures
in today’s DRAMs. Hence, DRAM manufacturers have
started adopting on-die ECC for better reliability. Based
on our system level reliability analysis (details provided
in Section VI-B) we see that on-die SEC ECC helps to
reduce system failures by more than 35%. However, it
is ineffective for multi-bit errors and instead introduces
unexpected miscorrection.
A. Miscorrections by On-Die ECC
Let us consider an example of a DRAM device with
the most commonly used (136,128) SEC Hamming code.
This SEC code can correct any SBE. However, in case of
a multi-bit error, there are two possible outcomes: (1) The
errors go undetected and is equivalent to not having an
on-die ECC mechanism. (2) The multi-bit error aliases to a
single-bit error. This happens when the sum of the columns
in the H-matrix of the decoder corresponding to the error
positions is equal to another column in the matrix.
The second case is the problematic one. In order to better
understand this case, consider the following example SEC
Hexample parity-check matrix with 128 message bits and
r =8 parity bits:
Hexample =
⎡
⎢⎢⎢⎢⎢⎢⎢⎢⎣
d1
1
1
0
0
0
0
0
0
c1
c2
c3
c4
c5
c6
c7
c8
d2
0
1
0
0
0
0
1
0
d3
0
0
1
0
0
1
1
1
d4
1
0
0
0
0
0
1
0
d5...d127
....
....
....
....
....
....
....
....
d128
1
0
0
1
0
0
1
0
p1
1
0
0
0
0
0
0
0
p2
0
1
0
0
0
0
0
0
p3
0
0
1
0
0
0
0
0
p4
0
0
0
1
0
0
0
0
p5
0
0
0
0
1
0
0
0
p6
0
0
0
0
0
1
0
0
p7
0
0
0
0
0
0
1
0
p8
0
0
0
0
0
0
0
1
⎤
⎥⎥⎥⎥⎥⎥⎥⎥⎦
,
where di represents the ith data bit, p j is the jth redundant
parity bit and ck is the kth parity-check equation. Now, if a
double-bit error occurs in bits 1 and 2, the resulting codeword
c(cid:6) is equivalent to adding error patterns e1 and e2 to the
original codeword c. ei is a 136-bit vector with bit i = 1 and
all other bits = 0. By the deﬁnition of a linear block code,
H.c =0 for all legal codewords c. Therefore, error patterns
e1 and e2 isolate columns 1 and 2 of the SEC H matrix (i.e.,
Hexample∗,1 and Hexample∗,2) and as shown in Equation 1, the
resulting syndrome is the sum of the two columns.
s =Hexample.c(cid:6) =Hexample.(c+e1 +e2)
⎤
⎞
⎛
⎡
⎤
⎡
⎜⎜⎜⎜⎜⎜⎜⎜⎝
1
0
0
⎥⎥⎥⎥⎥⎥⎥⎥⎦
⎢⎢⎢⎢⎢⎢⎢⎢⎣
0
1
0
c + 0 + 0
0
0
0
0
⎢⎢⎢⎢⎢⎢⎢⎢⎣
0
0
0
0
⎥⎥⎥⎥⎥⎥⎥⎥⎦
=Hexample.
=0+Hexample∗,1
⎟⎟⎟⎟⎟⎟⎟⎟⎠
⎡
⎢⎢⎢⎢⎢⎢⎢⎢⎣
⎤
⎥⎥⎥⎥⎥⎥⎥⎥⎦
1
0
0
0
0
0
1
0
+Hexample∗,2
=
=Hexample∗,4
(1)
Now, the sum of columns 1 and 2 of the Hexample matrix
is equal to column 4. Therefore, the generated syndrome s
matches column 4. As a result, the decoder would consider it
as a single bit error in bit position 4 and ﬂip it as part of its
correction mechanism. Thus, an originally double-bit error
has now become a triple-bit error. On an average (across
10 random SEC Hamming code constructions), the chances
of a DBE miscorrecting to a triple bit error is >45%. With
increasing DRAM error rates, recent studies [8], [23], [29],
[34] have shown that the probability of a DBE occurring
within the 128-bit dataword can be as high as ∼ 8×10−5,
which translates to a DBE every 12500 SEC decoding cycles.
Thus, the chances of a double-bit error converting to a triple-
bit error are also high and will only increase in the future.
B. SDC post in-controller SECDED decoding
Now let us look at the problems that arise because of this
miscorrection. SECDED code inside the memory controller
is not designed to detect more than double-bit errors. As a
result, when the (136,128) SEC on-die ECC miscorrects and
converts a DBE to a triple-bit error, there is a high probability
(greater than 50% on an average over multiple SECDED
codes) for the SECDED decoder to consider it as an SBE
and further miscorrect. This will happen when the generated
syndrome or the sum of three columns in the SECDED parity
check matrix corresponding to the erroneous bits is equal
to a fourth column. The probability of SDC depends on the
exact SECDED code and the memory data transfer protocol.
A widely used on-die ECC is (136, 128) SEC [4], [31] and
in-controller ECC is (72, 64) SECDED [24]. For the rest
of the paper, we will use these two codes for explaining our
proposed code construction mechanisms and DBE correction
technique. However, our proposed constraints can be easily
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
126
miscorrection rate remain constant across the DRAM dies
having the exact same SEC implementation. However, the
probability of the double-bit error and the miscorrected bit
coinciding within the same in-controller 64-bit dataword
decreases with the decrease in the amount of data from each
on-die dataword that constitutes the in-controller codeword
(as shown in Figure 2). If all 64-bits come from the same
DRAM chip and, therefore, from the same 128-bit SEC
dataword, the SDC probability is > 150x higher than the
case where 16 x4 DRAM chips send 4-bits each in parallel.
In this work, we provide two possible solutions that
exploit this data access pattern to completely avoid SDCs
when DBE occurs. (1) An on-die SEC construction technique
which ensures that the miscorrected bit is steered to a
different beat. It does not require knowledge of the exact
in-controller code and is compatible with any SECDED
implementation in the controller. (2) Our alternate solution
outlines an in-controller SECDED construction technique
that ensures that none of the on-die aliasing triplets result in
SDC. However, unlike the ﬁrst technique, this in-controller
SECDED construction needs to know the on-die SEC code.
A. On-die SEC-COMET ECC
In this work we exploit the data transfer protocol in
DRAMs to take care of SDCs. As shown in Figure 3, if all
the three erroneous bits in the 136-bit codeword do not get
transferred and decoded in the memory controller in the same
beat, the SECDED decoder will not encounter a triple-bit
error and SDC can be avoided. Thus, the on-die SEC has to be
constructed such that the miscorrection from any DBE within
a single beat gets steered to a bit position that belongs to a dif-
ferent transfer beat. This will ensure that the three erroneous
bits never coincide in the same 72-bit SECDED codeword.
In order to achieve this property in a (136, 128) SEC code,
within every beat transfer boundary, the sum of any two
columns in the parity check H matrix should not be equal
to a third column in the same set.
code
Step-by-step
construction and mathematical
guarantee: With 8-bits of parity per 128-bits of dataword,
the COMET-SEC additional constraint can be satisﬁed when
designing the SEC code for any data transfer protocol as
long as the beat transfer boundary (N) consists of 64-bits (64
columns) or less. When constructing the 8×136 parity check
matrix H, we can choose the 136 8-bit columns from 128
odd-weight and 127 even-weight non-zero options. The DBE-
induced miscorrection happens when the sum of two columns
is equal to a third column in the H matrix. Either all these
three columns would have even weights or two of them would
have odd weights and the third would have even weight. Thus,
the two aliasing sets possible are: (1) (odd, odd, even), (2)
(even, even, even). If we could construct the H matrix with
all odd weight columns then no pair of columns would sum
up to a third column and there would be no DBE-induced
miscorrection. However, we do not have enough odd-weight
columns for the entire matrix. Hence, when constructing the
H matrix for our proposed SEC-COMET code for an xN
DRAM architecture, we use a two-step approach.
Figure 2: Probability of SDC every 64-bits of SCEDED
dataword read from memory when a double-bit error occurs
in a system with (136,128) on-die SEC and (72,64) in-controller
SECDED coding schemes for different bit error rates and
data access protocols.
extended to other SEC and SECDED code constructions
with different dataword and codeword lengths.
DBEs are becoming more probable with increasing bit error
rate in the recent DRAM generations. Multiple recent experi-
mental/industrial studies [8], [23], [29], [34] have considered
DRAM raw bit error rate (BER) as high as 10−4. For different
memory system architectures and data access protocols, we