scheme has an advantage in that it allows a researcher to decide how deeply he or she wishes to fuzz, 
with the test cases most likely to cause errors being run first.   
Besides fuzzing data content, we've found that fuzzing state transitions is a valuable part of any security 
audit.  In our experience, simply injecting well‐formed data at unexpected times has yielded some very 
interesting software flaws.  Using both well‐formed and malformed data at various states is even better.  
Fuzzit includes a core state management system that can be extended for specific test scenarios. 
For a protocol that is delivered on top of another in a stack (e.g. HTTP borne on either TLS or TCP), 
fuzzing multiple protocols in the stack as opposed to just the top protocol has turned up some 
interesting errors for us in the past.  Although this would certainly cause combinatorial explosion for 
many fuzzers, Fuzzit's approach to combinatorics ensures that fuzzing a full stack of protocols 
simultaneously in moderate depth is feasible in a reasonable timeframe.  As a note, fuzzing a stack of 
protocols is usually only effective if the target implementation is leaky, that is, if the top protocol is not 
well encapsulated from lower layer protocols.  For example, TCP and UDP are typically very well 
encapsulated via a socket interface, so trying to target the TCP reassembly subsystem while fuzzing an 
HTTP server is unlikely to find faults (I would love to be proven wrong on this!).  Bluetooth and WAP, 
however, tend to be quite leaky, as lower protocols on the stack are often not well encapsulated. 
When working with stateful protocols or multiple test configurations for a given protocol or file format, 
having to re‐define the same data structure or PDU multiple times is not only tedious, but also 
contributes to brittle code.  Fuzzit is built to use the same data definition format for parsing valid data, 
generating valid data, and generating fuzzed data.  The data parsing, fuzzing, and generation methods of 
Elements and Blocks (the two primitive types in Fuzzit) are stateless, meaning that all information 
needed to parse, generate, or fuzz is passed into the methods and not stored in the Element or Block 
Objects.  Statefulness is pushed as far towards the edges of the system as possible.  For example, an 
injection system and state management system must be stateful to keep track of the position in a test 
suite or the position in a protocol's state graph, respectively.  None of the core objects such systems rely 
on are stateful.   
How do I use it? 
As a note, you'll notice that we spend a lot of thought on software and API design so that Fuzzit is as 
flexible as possible.  That flexibility not only makes writing new fuzzers for never‐before‐thought‐of 
scenarios easy, but also allows us to continuously improve the architecture of the framework.  From the 
time of writing to when you read this, some APIs may have changed, so be sure to check out the Fuzzit 
page at http://www.fuzzit.com to get the latest documentation. 
Fuzzit is implemented in Ruby, a dynamic object‐oriented programming language.  Key considerations 
for choosing Ruby include its ability to implement Domain Specific Languages and support for functional 
programming features—plus it is fun to write! 
The most basic part of Fuzzit is the humble Element.  Elements represent a field in a protocol or file 
format that can take a value. Different types of Elements (e.g. IntElement, CrcElement, StringElement) 
are implemented as subclasses of Element.  An Element is responsible for converting between serialized 
data and symbolic representations of data. 
A discussion of Element is incomplete without bringing in Block.  A Block can hold multiple Elements and 
even other Blocks. 
A new Block can be instantiated with several Elements inside of it as follows: 
block = Fuzzit::Block.new do |b| 
  b.IntElement(:elem1)  
  b.IntElement(:elem2) 
end2 
An Element is always declared with a name, while a Block is optionally declared with a name. When a 
Block is declared without a name, all symbols used to generate, parse, or fuzz a data structure are 
merged with the parent.  If a Block is declared with a name, that name is used to create a separate 
naming layer.  This way a Block can be used to encapsulate a protocol borne on another or simply to 
group together related elements for use with by a LengthElement or other form of reference. 
An Element may be sent messages to customize its behavior: 
b.IntElement(:elem1).has_endianness(:little).has_length(13,:bytes) 
One or more nominal values for an Element may be defined so that when fuzzing a different Element, 
this Element will cycle through its nominal values. 
b.Element(:elem1).has_value("hello") 
b.Element(:elem2.has_values(:type_1 => "1", :type_2 => "2", :type_3 => "3") 
An Element may also have values that are dynamically evaluated.  One of the values an Element takes 
may be a ruby Proc object (e.g. lambda) that accepts 2 parameters, the instance of the Element and the 
context of the current data structure being written. 
b.IntElement(:random).has_length(1,:byte).has_value( lambda{|inst, ctxt| rand(0x100) } ) 
2 Rubyists will notice that the above syntax is different from the standard method of instantiating a class.  
b.IntElement(:elem1) is effectively b.add(Fuzzit::IntElement.new(:elem1)), but we have shortened 
the API for ease of use.  The parameter, b, is the instance of the new Block object being created. 
The context is an important tool as it allows an Element to act upon the values of other Elements. The 
context encapsulates the state of the current test case so that no changes to Element or Block instances 
need to be made during the generation process.   
Once a block has been defined, a generator can be created with specific values to fuzz or no values to 
fuzz 
block = Fuzzit::Block.new do |b| 
  b.IntElement(:elem1).has_length(3, :bytes) 
  b.IntElement(:elem2).has_length(2, :bytes) 
  b.LengthElement(:length).for(:string_elem).has_length(2, :bytes).has_endianness(:little) 
  b.StringElement(:string_elem) 
end 
generator_with_default_values = block.fuzz_with() 
generator_with_specific_value = block.fuzz_with(:string_elem => ["A"*100, "%s%s", 
"\xff"*10000, "A"*100 + "\x00" + "A"*100]) 
Once we have a generator, it can be used to build all of the data structures we wish to fuzz with.  
Generators are able to index and describe the fuzzed data so that we can instantly rebuild the fuzzed 
data for a given test case and describe what value each Element took symbolically. 
Using the precursor to Fuzzit, we discovered a vulnerability affecting the SDP protocol in the Bluetooth 
implementation of the Apple iPhone.  The vulnerability has since been disclosed and fixed.   
The SDP protocol specifies a primitive that includes a type descriptor and a size descriptor.  Depending 
on the value of the size descriptor, the data for the primitive may have a fixed number of bytes or a 
variable number of bytes.  If the size descriptor specifies a variable number of bytes, a fixed‐width 
length field comes between the descriptor byte and the data.  SDP also specifies that certain type 
descriptors are only allowed to have certain size descriptors. 
Here is an example PDU that triggered the vulnerability: 
Using an invalid type descriptor with a size descriptor specifying fixed length (4 bytes) data causes the 
Bluetooth server process to crash with: 
Exception Type:  EXC_BAD_ACCESS 
Exception Codes: KERN_INVALID_ADDRESS at 0xFFFFFFFF 
Here is a simplistic generator block that would generate this PDU: 
sdp_block = Fuzzit::Block.new do |b| 
  b.IntElement(:id).has_length(1, :byte).has_value(:service_search_request => 2) 
  b.IntElement(:transaction_id).has_length(2, :bytes)  
  b.LengthElement(:payload_length).for(:payload).has_length(2,:bytes) 
  b.Block(:payload) do |p| 
    p.BitBlock(:descriptor, 1) do |bb| 
      bb.IntElement(:type).has_length(5,:bits).add_fuzz_values((0..0x1f).entries)  
      bb.IntElement(:length_type).has_length(3,:bits).add_fuzz_values((0..7).entries) 
    end 
    p.LengthElement(:data_length).for(:data).fuzzes_length(0,1,2,4,8,16)  
    p.IntElement(:data).fuzzes_length(1,2,3,4,5,6,7,8,16,100,1000,10000) 
  end 
end 
Notice how in the offending PDU there is no data length field.  By declaring the :data_length Element as 
having a fuzzable length with 0 being one of the lengths, that element will be omitted in a set of test 
cases.  Also note that a fuzzable length corresponds to the width of an Element, not the content of that 
Element.  How the content of Elements is fuzzed is explicitly specified by the add_fuzz_values call or by 
the default of fuzz values associated with the specific Element subclass. 
Bringing it all together 
After building creating a generator for a specific protocol or file format, the next step is to integrate it 
with an injection system, result analysis system, and optionally, a state management system.  The Fuzzit 
framework has a convention for how all of these systems work together, so that components can be 
mixed and matched without any code needing to change.  In the SDP example above, the generator was 
only useful without a robust state management system and result analysis system. 
The examples shown above are purposefully simple to introduce Fuzzit and its basic usage.  For more in‐
depth information on integrating a generator with other systems to create a full fuzzing system, 
advanced techniques for working with complex protocols, and examples of fuzzers implemented with 
Fuzzit, check out http://www.fuzzit.com.