have been found. It follows that Yi =(cid:80)i+n
Next, we extend it to the case of ﬁnding several conﬁr-
mations in time as needed for n-conﬁrmation transactions.
Let Yi be the random variable denoting the total number of
hashes that have to be computed until n valid conﬁrmations
j=i Xj is the sum of
n i.i.d. variables following the geometrical distribution with
parameter p = psuc. Hence Yi follows the negative binomial
distribution N B(r, p) with parameter r = n being the num-
ber of successes until the experiment is stopped and p = psuc
being the single success probability of one trial.
n · δ and with hashrate r is
The number of hashes that can now be computed within
hn = r · n · δ.
(5.5)
Therefore, the probability of ﬁnding n valid hashes within
these hn attempts (i.e.
the probability that it took less
h1 = r · δ.
(5.3)
lim
n→∞
1
n
max
s.t.
· P(rnet; n, δ) − P(rA; n, δ)
(cid:82) p
(cid:82) 1
0 tn−1(1 − t)rnet·n·δdt
(cid:82) p
0 tn−1(1 − t)rnet·n·δdt
(cid:82) 1
0 tn−1(1 − t)rA·n·δdt
0 tn−1(1 − t)rA·n·δdt
lim
n→∞
P(rA; n, δ) ≤ α
The resulting pair (n, δ) guarantees that any valid n -T
will be accepted and A’s probability of success is bound by
α.
Parameter examples We calculated several exemplary val-
ues for security parameters for the attack probability α =
0.1%. Particularly, Table 1 presents examples for param-
eters n and δ for diﬀerent attackers’ hashrates. The so-
lutions have been numerically approximated according to
Eq. 5.10. For the network values we refer to block 287500
of the blockchain. Here the target value is 1.5E + 58, which
means a hashrate rnet of approximately 22 petahashes per
second (cf. Eq. (5.1)).
Fig. 5 shows how A’s probability of success diﬀers from
the networks’ probability of success and how it diminishes
as more conﬁrmations are required. Note especially that a
527(a) Probability distributions for δ =800
Figure 5: Comparison of P(rnet; n, δ) and P(rA; n, δ) pairs for diﬀerent adversary models (A’s hashrate is given as percentage
of the network hashrate). The red/lighter (lower) graphs denote A’s probability and the blue/darker ones the corresponding
probability of the network
(b) Probability distribtutions for δ =1600
rA
δ
n
5%
1400s
5
10%
1100s
6
20%
1000s
12
30%
1000s
16
45%
1200s
> 600
Table 1: Solutions for the conﬁrmation generation time limit
(δ) for diﬀerent assumptions on the hashrate of the adver-
sary (rA) and the number of conﬁrmations (n) required in
each case in order to satisfy a security level α of 0.1%.
very strong attacker (rA = 40%)9 will still be capable to
succeed for δ = 1600s, but not any longer for δ = 800s.
5.2 Cost Estimations of Transaction Conﬁr-
mation Spooﬁng
In the following, we calculate the costs for A to compute n
conﬁrmations in order to determine the upper limit for the
amount which can be safely accepted by payees to render
timing attacks unproﬁtable. Our analysis considers costs
incurred by electricity consumed during required computa-
tions and excludes costs for hardware.
Let rA be A’s hashrate in H/s, c her power costs in ct/kWh
and w her power consumption in kWh. Then computing the
expected number of hashes per block (hE = E(Xi)) will take
her tE seconds in average and result in cE costs for electricity
for one block in average.
hE = E(Xi) =
2256
tgt
hE
rA
tE =
cE = w · c ·
tE
3600
(5.11)
(5.12)
(5.13)
Hence, A would need to load bitcoins at least worth cE into
her W . Note that A’s costs do not depend on her frac-
tion of the network hashrate, but only on the total network
hashrate. Increasing rA decreases the time in which A can
fake blocks, but at the same time increases her power con-
sumption to the same degree.
Note that this restriction can not be applied immediately,
since the possible proﬁt is in BTC and the costs are in com-
mon ﬁat currency such as euros or dollars. Therefore, the
9Remarkably, it was shown [52] that such a strong adver-
sary has a non-negligible probability to succeed in double
spending even in online Bitcoin payments.
actual limit that needs to be applied depends on the ex-
change rate between BTC and the reference currency, e.g.,
USD.
cmax = cE · BT C
U SD
(5.14)
Restricting the amount that a trusted wallet can be charged
with one transaction to cmax renders timing attacks unprof-
itable, given A’s rA, c and w.
Exemplary values For exemplary purposes, consider a sin-
gle adversary A that acquired a small number of recent
mining hardware worth of $60,000. Suppose A controls 10
TerraMiner IV, which is one of the most eﬃcient hardware
as of today. With 2000 GH/s per rig A’s hashrate rA is
20000 GH/s, constituting about 0.09% of the total network
hashrate. With this hashrate she needs tE = 187 hours in
average for one block. Assuming c = 8 ct/kWh, an estimate
of electricity cost in China [3] (where large Bitcoin miners
are active), then for w = 1.2 kWh per rig and an exchange
rate of 600 USD/BTC this costs her cE = $300 for one block.
Suppose the oﬄine wallet requires at least 6 conﬁrmations
for a pre-loading transaction, then A is expected to take over
46 days for computation and faces power costs of $1800.
6 Implementation
Our implementation consists of three components: (i) Bit-
coin miner, (ii) Bitcoin client of the payee and (iii) oﬄine
wallet of the payer.
Miners Changes required by miners were integrated into
bitcoind Bitcoin client. Modiﬁcations to the basic Bitcoin
protocol are minimal – we added functionality for miners to
verify the proof that the accused wallet indeed signed the
double-spending transaction before the revocation transac-
tion is further processed.
Payee’s client To implement functionality of a payee, we
extended the Android Bitcoin wallet [1]. Changes concern
oﬄine payment and revocation phases, while redemption of
bitcoins is performed in the same way as in the standard
Bitcoin scheme. Further, we enabled a client to listen to
transactions sent to the revocation address.
Payer’s Oﬄine Wallet The oﬄine wallet was prototyped
using a cgCard [25], which runs JCOP 2.4.1 R3, supports
528Figure 6: Timing results of 50 independent runs of the coin
preloading protocol (P1) and the oﬄine transaction protocol
(P2). Conﬁrmation size was n = 7.
JavaCard API of version 2.2.2 and the global platform stan-
dard in version 2.2.1. It has an NXP P5CD081 Chip based
on 8-bit CPU and about 81 kbyte of EEPROM. The Java
Card technology is an extremely stripped down Java derivate
designed to run on small memory footprint devices, such as
smart cards. While Java Card is a precise subset of Java, it
oﬀers none of the common conveniences and approaches of
conventional Java programming. Yet we were able to real-
ize full support of our protocol. In particular we are able to
perform parsing and validation of transactions, blockheaders
and Merkle trees as well as key and transaction generation.
The memory footprint is about 2 kB for transient memory
(RAM) and 3 kB for persistent data excluding transactions,
keys and the applet bytecode itself.
Fig. 6 shows the performance of the card for coin preload-
ing and oﬄine payment protocols. Measurements include
computations on the card and communication with the host.
The longest time (≈ 1100 ms in average) of the coin preload-
ing protocol was required for transaction conﬁrmation veriﬁ-
cation, while veriﬁcation of a single blockheader took about
160 ms in average, which we consider as a good result10.
With a median of 548 ms the generation of oﬄine transac-
tions should not notably interrupt any payment process.
7 Discussion
So far we described in details how to instantiate an oﬄine
wallet by leveraging secure hardware. However, as we al-
ready mentioned in Section 4.1, our solution can be instan-
tiated using an alternative approach which neither relies on
secure hardware nor on their manufacturers for certiﬁcation.
Our primary motivation for leveraging secure hardware
was to impose ﬁnancial loss to misbehaving users, so that
an adversary would need to invest signiﬁcant resources in
order to compromise the wallet environment, but could mis-
use it only for a limited period of time, until the wallet is
detected and revoked. This is likely to make wallet compro-
mise attacks unproﬁtable, especially given signiﬁcant costs
of attacks against secure hardware and limited transaction
amounts.
An alternative way to achieve similar objective is to utilize
a deposit system. Such a deposit system can be managed
by the Bitcoin network itself and without relying on any
external parties. In particular, it could be instantiated us-
ing decentralized anonymous credentials system of Garman
et al. [37] which enables a Bitcoin-based distributed certi-
ﬁcation authority which can issue certiﬁcates to our oﬄine
wallets. Such a certiﬁcation authority can be extended to
issue certiﬁcates only to wallets that can prove they have
sent certain amount of cryptocurrency to a special deposit
account.
Note that the na¨ıve approach to return deposits to well-
behaving wallets is to establish a trusted party which would
have control over the signing key of the deposit account. In
a more elegant solution, however, one could rely on a deposit
account of special type for which there is no signing key ex-
ists. When currency is transferred to such an account, it gets
permanently destroyed. To enable withdrawal of deposits,
we suggest to introduce a transaction of special type, which
has no source address, but only destination. Similar trans-
actions already exist in Bitcoin network – coinbase trans-
actions which are used to reward miners for mining blocks.
In this way, the destroyed currency can be returned to the
system and be transferred back to users of well-behaving
wallets11.
Remarkably, solution which we described in details in this
paper relies on wallet revocation to merely punish double-
spenders, while coin forgery attacks are prevented by other
means (cf. Section 3.1 for details). This is due to the fact
that coin forgery attacks could be launched against non-
compromised wallets. Indeed, an attacker controlling user’s
platform, but not the oﬄine wallet, could spoof transaction
conﬁrmation of the pre-loading transaction (cf. Section 4.2).
Hence, the successful attacker would not bear the costs of
wallet compromise, but only costs of transaction conﬁrma-
tion spooﬁng (cf. Section 5.2).
In case of deposit-based
wallet deployment, however, it might be reasonable to use
wallet revocation to defeat both attack classes, which would
simplify transaction veriﬁcation in oﬄine phase.
We would like to investigate deposit-based approach in our
future work, and in particular to model important system
parameters, such as size of the deposit, transaction limits,
and the amount of time the payee stays oﬄine.
Bitcoin limitations Recent research [28] has shown that
Bitcoin faces scalability problems, which limit transaction
throughput by a few transactions per second, hence, in a
long perspective Bitcoin might not be the best choice for
low amount payments. This, however, does not undermine
our results: While we have chosen Bitcoin due to its wide-
spread adoption, our solution can also be applied to other
blockchain-based cryptocurrency systems, including systems
with larger transaction throughput (e.g., Ethereum [24] which
has block generation time of 10 seconds).