p nor q, and every ADD channel connecting two processes
has its own K and D values.
B. Processes
For notational simplicity in the model and proofs, we
assume the existence of an external real-time reference clock
which cannot be queried by the processes. The range of the
ticks of this clock is the set of natural numbers. Given a local
event at a process, we may thus talk about the realtime at
which the event occurred.
A distributed algorithm is a collection of local algorithms
A1, A2, . . . , An. Every process pi ∈ Π follows the speci-
ﬁcation of Ai. An execution is an inﬁnite sequence α =
C0, s0, C1, s1, . . . with C0 being the initial conﬁguration of
the system and Ci+1 being the resulting conﬁguration of
applying the event si to the conﬁguration Ci. Every event si
corresponds to the speciﬁcation of Aj, which can be sending
or receiving a message or a local computation.
Processes may fail only by crashing. Given an execution
α, a process pi is said to crash at time t if pi does not
perform any event in α after time t and crashed(α, t) is the
set of all processes that have crashed by time t. A process
pi is correct at time t if pi has not crashed by time t and
correct(α, t) = Π − crashed(α, t).
If a process p ∈ crashed(α, t) at some t, we say that p
is a faulty process in α. If a process p ∈ correct(α, t) for
all t, we say that p is a correct process in α. Graph G at
266
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:55:15 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
(cid:2)
time t is deﬁned as G(t) = (correct(α, t), E
=
{(u, v)|(u, v) ∈ E and u, v ∈ correct(α, t)}. A partition P
is a maximal connected component of G.
) with E
All processes know the name of every process in the
network. This assumption is not trivial, as it has been shown
in [22] that without this assumption, it is not possible to im-
plement a failure detector class even in a fully synchronous
system with reliable links. However, we discuss extensions
of failure detector deﬁnitions where this assumption is no
longer true (as discussed in the Introduction).
C. Problem
In the next section, we propose an algorithm for imple-
menting an eventually perfect failure detector (♦P ) with
messages of size at most O(n log n) bits in an arbitrary
network connected with ADD channels. We will say that
a process p suspects process q if q is in the failure list of p.
The oracle ♦P is formally speciﬁed as follows. For each
execution α and every correct process p in α, there is a time
ta such that for every t > ta the failure detector satisﬁes:
• Strong completeness: For every process q such that q
has crashed or is not in the same partition of p in G(t),
p suspects q at time t.
• Eventual strong accuracy: For every correct process
q in the same partition of p in G(t), p does not suspect
q at time t.
III. ALGORITHM
In this section we describe our algorithm. Algorithm 1
uses the standard technique of heartbeats and timeouts, i.e.
a process sends periodically a message to its neighbors. Its
neighbors estimate the time of arrival of a new message,
managing timeouts. We extend these traditional ideas, with
time-to-live values.
Algorithm 1 is composed of three main modules. The ﬁrst
module (line 9) prepares and sends periodically heartbeat
messages to neighbors. The second module deals with the
reception of messages from neighbors (line 21), and timeouts
are estimated. The third module deals with the expiration of
the timer that the algorithm uses. When the timeout of a
process expires, that process is suspected (line 41).
A. Description of the algorithm
In what follows a subscript in the name of a variable is
used for denoting which process it belongs to; for example
the timeout[p] of q will be denoted timeoutq[p] and T T Lp
will denote a time-to-live value of p.
Heartbeat messages. Every process p sends a heartbeat
message (HB) to all its neighbors every T units of time
(as usual, T can be adjusted to save bandwidth or improve
response time, as desired). This HB message contains a set,
which is stored in the local variable HB Bagp and it is
called bag. When Algorithm 1 starts, the bag contains only
a pair (p, ttl), where the ttl variable is an integer called
time-to-live (TTL) (line 11). When a process p receives pairs
from its neighbors, it gathers all the information to create a
new set (line 14) and sends this new set to all its neighbors
(line 17).
Reception of the HB messages. When process p receives
a HB message from a neighbor q, the message contains a
set with several pairs, potentially a pair for every process in
the network. Process p only takes information from a pair
labeled with q sent by q. By only taking information about
neighbors directly from neighbors we are giving priority to
the topology graph, namely, at some point, a process r at
distance k from p eventually will have stored permanently
the pair (p, n − k).
When a set is delivered, p takes the information from pairs
(r, m) such that r is not a neighbor of p or r = q, since
neighbor q sends information of itself directly (line 23). The
ﬁrst pair that must be processed is the one labeled with q,
since its timeout is used later on (line 33). Process p stores
the received TTL of process r in T T Lp[r].
Timer estimation. When p receives a HB message from
a neighbor q, it saves its TTL value (which will be always
n − 1) and estimates how much time will take to receive
another message from q. This estimation is in timeoutp[q].
If this timeout expires, p suspects q and sets suspectp[q] to
true (line 41). If p receives a message of q and suspectp[q]
is true, probably q was wrongly suspected by p and the
timeout value was estimated to be too small, so p stops
suspecting q by setting suspectp[q] to false and incrementing
the timeoutp[q] (line 27). Process p does not suspect process
q if p receives periodically heartbeats from q on time,
(namely, before the timeout expires).
The same idea is used for processes that are not neighbors
of p, but in this case their timeout is estimated in relation
to their TTL value, as it is explained below.
The algorithm uses the function estimateT imeout (line
38) to increase the timeout each time a false suspicion is
detected. For correctness, we need to assume only that the
function increments the timeout. For performance, one may
tune this increment. Here we use the constant 2 to reach a
correct timeout exponentially fast.
Time-to-live values. This is the strategy used for pre-
venting that a pair labeled with a crashed process remains
forever in the network. Every time a process p sends a HB
message, it ﬁrst decrements by one the TTL value of every
process. A pair (q, T T Lp[q]) will only be added to the set
of pairs the process will send, if T T Lp[q]− 1 > 0 (line 14).
On the other hand, since the longest path in the network
may be of length n − 1, a process p adds to its own set the
pair (p, n− 1), to guaranteed that every process is informed
that it is alive, by receiving a pair (p, ttl).
Intuitively, process p should store the TTL of a process
r every time it receives the pair (r, m) in the set of any
neighbor q. Because the channels are unreliable and the
different message latencies, it may be the case that a process
267
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:55:15 UTC from IEEE Xplore.  Restrictions apply. 
s wrongly suspects a process r. Hence, a process always
keeps the max(T T Lp[r], m).
We need to avoid the situation that if r fails, the other
processes will keep receiving messages labeled with r for-
ever. To solve this problem, the maximum TTL of r received
by process p sent by q is stored (ﬁrst condition in line 30)
and is estimated when this value will be received again by
p from the HB message of q (line 33). If this value is not
received again before the timeoutp[r] expires, process r is
suspected by p and p stores any other TTL received, which
must be a smaller one (second condition in line 30). Thus,
if r fails, eventually all the pairs labeled with r will fade
away. Hence, eventually every correct process suspects r.
Algorithm 1 Code for process p
Constants
1: neighbors
2: T
3: n
Variables
4: clock()
(cid:2) list of neighbors of p
(cid:2) integer, time between successive heartbeats
(cid:2) integer, number of processes in the network
(cid:2) local clock of process p. Its value is 1
initially
5: lastHB = [ ]
(cid:2) array of clock
times, lastHB[i] stores the last time that p received a
pair from i. Every entry is 0 initially
6: timeout = [ ] (cid:2) array of integers of estimated timeouts
for all processes. Each entry is T initially
(cid:2) array of booleans for suspecting
7: suspect = [ ]
8: HB Bag = {∅}
processes. Each entry is f alse initially
(cid:2) array for storing the
ordered pairs (process, TTL) for sending to neighbors.
Initially it is an empty set
if suspect[i] = f alse and T T L[i] > 1 then
HB bag = HB bag ∪ {(i, T T L[i] − 1)}
end if
HB bag = {(p, n − 1)}
for each i ∈ Π − {p} do
9: every T units of time of clock()
10: begin:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end
21: upon receiving (cid:5)bag(cid:6) from a neighbor q
22: begin:
23:
24:
end for
for each q ∈ neighbors do
send((cid:5)HB bag(cid:6)) to q
end for
if m = T T L[r] then
for each (r, m) ∈ bag such that r /∈ neighbors \ {q} do
(cid:2) the stored TTL of r
25:
26:
27:
28:
29:
30:
arrives again
if suspect[r] = true then
(cid:2) The timeout
for this TTL of r was estimated to be too small, so it
is increased
suspect[r] = f alse
ESTIMATETIMEOUT(r)
end if
lastHB[r] = clock()
else if
(m > T T L[r]) or
suspect[r] = true) then
the stored one arrives or if the TTL stored expires,
the recently arrived TTL overwrites the old one
(m < T T L[r] and
(cid:2) when a TTL value larger than
31:
32:
33:
T T L[r] = m
suspect[r] = f alse
timeout[r] = timeout[q]
(cid:2) the expected time
for receiving again m is the same as the timer for q,
the sender
lastHB[r] = clock()
34:
35:
36:
37: end
end if
end for
38: function ESTIMATETIMEOUT(r) (cid:2) function for increasing
the timeout
timeout[r] = 2 · timeout[r]
39:
40: end function
41: when timeout[q] ==clock () − lastHB[q]
(cid:2) When the
time for receiving a pair labeled with q ∈ Π expires,
p suspects q
suspect[q] = true
42: begin:
43:
44: end
B. Correctness proof
To prove the correctness of the algorithm, we need to
show that the implementation above satisﬁes strong com-
pleteness and eventual strong accuracy. In what follows,
we consider an inﬁnite execution α of Algorithm 1.
First, we prove some preliminary lemmas. The following
simple lemma is similar to results proved in [14] and [15].
Lemma 1. Let p and q be two correct neighboring pro-
cesses. Then, there is an upper bound Dp,q on the time
between the consecutive reception at q of two HB messages
from p.
Proof: The channel delivers correctly one message for
every K consecutive messages sent by p to q with delay
at most D. This means that at most K messages are lost
between two messages delivered consecutively to q. Recall
that p sends a message every T ticks in line 9. Since we are
assuming clocks run at constant speed, the maximum time
between the consecutive reception of two messages from p
in q is (K + 1)· T + D = Dp,q
Given two processes p, q ∈ Π connected by a channel, in
what follows we call Dp,q the bound given by Lemma 1.
Observation 2. Given two correct neighboring processes
p and q, after an interval of time at most Dp,q, process q
receives the ﬁrst HB message from p.
Let tf be the earliest time when all the failures in α have
occurred.
Lemma 3. The following properties hold:
(cid:2)
(cid:2) ≥ tf
) for all t, t
1) G(t) = G(t