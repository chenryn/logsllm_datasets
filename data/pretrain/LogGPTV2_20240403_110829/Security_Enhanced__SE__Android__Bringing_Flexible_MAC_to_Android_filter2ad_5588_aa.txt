# Title: Security Enhanced (SE) Android: Bringing Flexible MAC to Android
# Authors: Stephen Smalley and Robert Craig

## Abstract
The Android software stack for mobile devices defines and enforces its own security model for applications through an application-layer permissions model. However, at its foundation, Android relies on the Linux kernel to protect the system from malicious or flawed apps and to isolate apps from one another. Currently, Android leverages Linux discretionary access control (DAC) to enforce these guarantees, despite DAC's known limitations. In this paper, we describe our work to bring flexible mandatory access control (MAC) to Android by enabling the effective use of Security Enhanced Linux (SELinux) for kernel-level MAC and by developing a set of middleware MAC extensions to the Android permissions model. We then demonstrate the benefits of our security enhancements for Android through a detailed analysis of how they mitigate several previously published exploits and vulnerabilities. Finally, we evaluate the overheads imposed by our security enhancements.

## 1. Introduction
Android is a Linux-based open-source software stack for mobile devices [4]. One of Android’s design goals is to facilitate a rich and open ecosystem of applications, where critical functionality can be provided or replaced by third-party applications [40]. Google Play, the official app market for Android, is notable for its low barrier to entry and lack of a formal review process for accepting new apps [2]. In such an environment, the need for a strong security model that can address the threat of flawed and malicious apps is particularly evident.

Android’s existing security model operates at two layers: an application-level permissions model (known as Android permissions) and a kernel-level sandboxing and isolation mechanism. The application-level permissions model, enforced by the Android middleware, controls access to application components and system resources. This model is directly exposed to developers, who must specify required permissions in their application’s manifest file, and to end users, who must approve dangerous permissions before installing an application [1].

Underneath the user-visible Android permission model, the Linux kernel provides the foundational mechanism for application isolation and sandboxing. This mechanism operates invisibly to app developers and users, so long as an app does not violate the restrictions imposed by the kernel. Application isolation and sandboxing in Android are enforced by the Linux kernel because the Dalvik VM is not a security boundary and any app can run native code [3]. Currently, Android relies on Linux discretionary access control (DAC) to implement these controls.

### 1.1. Discretionary Access Control (DAC) in Android
Android uses DAC in two primary ways:
1. **Restricting System Facilities**: DAC restricts the use of system facilities by apps. In some cases, DAC ensures that certain system resources can only be accessed indirectly through system services, which mediate access and address sharing concerns. In other cases, DAC directly authorizes apps to access system resources, such as creating Bluetooth or network sockets and accessing the filesystem on the SD card. Some socket controls required custom kernel modifications for Android.
2. **App Isolation**: DAC isolates apps from one another, similar to how it isolates users on a multi-user system. Each app is allocated a unique user and group identifier (UID and GID, respectively) when installed, and this (UID, GID) pair is assigned to the processes and private data files associated with the app [1]. This approach prevents one app from directly accessing the process state or files of another app through the kernel interfaces. Apps signed by the same key may optionally share the same (UID, GID) pair if they wish to fully share resources without restriction.

Despite these measures, DAC has well-known shortcomings, particularly in protecting against flawed and malicious applications [29]. While Android has mitigated some of these issues by modifying the Linux kernel and using DAC identities to represent applications rather than users, significant weaknesses remain, such as the ability of flawed or malicious apps to leak access to data, the coarse granularity of DAC permissions, and the inability to confine system daemons or setuid programs running with root or superuser identity.

### 1.2. Security Enhanced Linux (SELinux)
Security Enhanced Linux (SELinux) was developed as a Mandatory Access Control (MAC) mechanism for Linux to overcome the limitations of DAC [28]. SELinux enforces a system-wide security policy over all processes, objects, and operations based on security labels that encode various security-relevant information. As a MAC mechanism, SELinux can confine flawed and malicious applications, even those running with root or superuser identity.

SELinux offers three primary benefits for Android:
1. **Confinement of Privileged Daemons**: SELinux can confine privileged Android system daemons, protecting them from misuse and limiting the damage that can be done via them.
2. **Stronger Isolation and Sandboxing**: SELinux provides a stronger mechanism than DAC for isolating and sandboxing Android apps, controlling all possible interactions among apps and their access to system resources.
3. **Centralized Policy Configuration**: SELinux provides a centralized policy configuration that can be analyzed for potential information flows and privilege escalation paths.

To bring these benefits to Android and motivate the need for similar capabilities in other mobile operating systems, we initiated the Security Enhanced Android (SE Android) project. The SE Android project enables the use of SELinux in Android and refers to the reference implementation produced by the project. The current SE Android reference implementation demonstrates how to enable and apply SELinux at the lower layers of the Android software stack and showcases the value of SELinux in confining various root exploits and application vulnerabilities.

Our unique contributions in this work include:
- Identifying and overcoming several challenges to enabling the effective use of SELinux in Android,
- Integrating SELinux and middleware MAC into Android in a comprehensive and coherent manner,
- Demonstrating concretely how SELinux mitigates real Android exploits and app vulnerabilities, and
- Merging our security enhancements into the mainline Android platform maintained by the Android Open Source Project (AOSP).

The remainder of this paper is organized as follows. Section 2 describes the challenges to enabling the effective use of SELinux in Android. Section 3 details how these challenges were overcome in the SE Android reference implementation. Section 4 analyzes how SE Android blocks various previously published exploits and vulnerabilities for Android. Section 5 reports our results from measuring the size and performance overheads due to SE Android. Section 6 discusses related work.

## 2. Challenges
Prior to our work, the challenges to using SELinux in Android were numerous and spanned the kernel, userspace, and policy configuration. Previous efforts to enable SELinux in Android [44, 35] either overlooked or only partially addressed these challenges.

### 2.1. Kernel Challenges
The first set of challenges to using SELinux in Android was in the Linux kernel. Although SELinux is part of the standard Linux kernel, enabling it in Android requires more than just enabling SELinux in the kernel build configuration. SELinux requires filesystem support for security labeling, typically provided through extended attributes on files. However, the original preferred filesystem type for Android devices, yaffs2, did not support extended attributes. More recently, yaffs2 gained support for extended attributes but still lacked the necessary support for automatic security labeling of newly created files.

Additionally, Android introduces several new kernel subsystems and drivers, such as the Binder IPC mechanism and the Anonymous Shared Memory (ashmem) mechanism, as well as Android-specific facilities like the logging and wake lock mechanisms. These subsystems had not been previously studied or instrumented for SELinux, introducing the possibility of uncontrolled inter-app communication or privileged interfaces.

### 2.2. Userspace Challenges
The second set of challenges was in the Android userspace software stack. Unlike conventional GNU/Linux distributions, almost everything above the kernel in Android is different, from system-level components like the init program and C library (bionic) to the Dalvik runtime and application frameworks. This means that prior work to integrate SELinux into Linux userspace could not be directly reused for Android.

Android’s model for starting apps, which involves a single process called the zygote preloading the Dalvik VM and common class files, and then forking child processes for each app, also poses challenges. SELinux normally performs automatic security context transitions upon program execution, making it difficult to run apps in specific SELinux security contexts by default.

Furthermore, Android’s rich support for sharing through framework services, which occurs at the middleware layer and is only visible at the kernel layer as communications between each app and the system server, makes it impossible to fully address controlled sharing among apps at the kernel layer.

### 2.3. Policy Challenges
The third set of challenges was in the policy configuration. The SELinux reference policy, developed over many years based on feedback from SELinux users and developers, is designed for conventional Linux userspace and typical Linux distribution usage. However, Android has a unique userspace software stack and a different filesystem layout and usage model, making the reference policy unsuitable for constructing a SELinux policy for Android. Additionally, the reference policy is large and not well-suited to the resource constraints of small devices.

Lastly, the reference policy aims to provide comprehensive least privilege, requiring customization for specific environments and needs. While this is feasible for Linux developers and administrators, it would impose a significant usability challenge for typical Android users and app developers.

## 3. Implementation
This section discusses how the previously noted challenges to enabling the effective use of SELinux in Android were overcome in the SE Android reference implementation. Overcoming these challenges required changes to the kernel, changes and new additions to the Android userspace software stack, and the creation of a new policy configuration for Android.

### 3.1. Kernel Support
Kernel support for SELinux in Android can be divided into two categories: basic enablement and filesystem support, and instrumentation of Android-specific subsystems.

#### 3.1.1. Basic Enablement and Filesystem Support
Using SELinux in Android first requires enabling SELinux and its dependencies in the kernel configuration and rebuilding the kernel. SELinux dependencies include the Linux Security Module (LSM) framework, the audit subsystem, and filesystem support for extended attributes and security labels. Filesystems that do not support extended attributes or security labeling, such as vfat, can still be used but can only be labeled and protected at per-mount granularity rather than per-file granularity.

As noted earlier, the yaffs2 filesystem used for NAND storage on Android devices did not originally support extended attributes or security labeling. We implemented a fix to the yaffs2 getxattr implementation and added support for automatically setting a security label on new yaffs2 files when they are created. More recent Android devices use the ext4 filesystem for eMMC storage, which already incorporates the necessary support for extended attributes and security labeling.

#### 3.1.2. Android-Specific Subsystems
We began our study of Android-specific kernel subsystems and drivers with the Binder subsystem, which is the central IPC primitive for Android apps. The Binder enables transparent invocation of objects, whether local or remote, and provides lifecycle management of objects shared across multiple processes. At the kernel level, the core Binder functionality is implemented by a binder driver that presents a /dev/binder interface to applications. This interface can be opened by all Android apps to perform IPC transactions via specific ioctl commands.

One process, known as the Binder context manager, provides name service functionality for the Binder and enables the bootstrapping of communications with other services. The Android servicemanager program registers itself as the Binder context manager during system startup and handles initial requests by applications to obtain references to other services.

Once the servicemanager is operating, various Android framework services can register object references with the servicemanager. These references can then be looked up by Android apps and used to initiate IPC to the framework services. To support SELinux, we defined new LSM security hooks and inserted calls to these hooks into the binder driver on IPC transactions and security-relevant control operations. These hooks were implemented for SELinux to provide permission checks over inter-app communication and binder control operations, controlling which processes can communicate, propagate Binder references and open file descriptors, and serve as the Binder context manager.

Next, we examined the Anonymous Shared Memory (ashmem) subsystem. Ashmem regions are represented by file descriptors, and we implemented SELinux support to control the creation, mapping, and unmapping of ashmem regions, as well as the propagation of ashmem file descriptors via IPC.

## 4. Analysis of Exploits and Vulnerabilities
In this section, we analyze how SE Android blocks various previously published exploits and vulnerabilities for Android. We demonstrate how SELinux mitigates these threats through detailed case studies, showing the effectiveness of our security enhancements.

## 5. Performance Overheads
This section reports our results from measuring the size and performance overheads due to SE Android. We discuss the impact of our security enhancements on system performance and provide insights into the trade-offs between security and performance.

## 6. Related Work
In this section, we discuss related work in the area of enhancing the security of mobile operating systems, particularly focusing on the use of MAC mechanisms and the integration of SELinux in other systems. We compare and contrast our approach with existing solutions and highlight the unique contributions of the SE Android project.

---

This revised version of the text is more structured, clear, and professional, with improved flow and coherence.