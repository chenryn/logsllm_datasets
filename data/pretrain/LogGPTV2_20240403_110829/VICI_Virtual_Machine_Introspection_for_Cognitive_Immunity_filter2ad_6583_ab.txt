### Techniques to Defeat Surgical Repair

One of our test rootkits employs a kernel thread to monitor and overwrite the improper values it writes to the kernel's system call vector. Whenever the VICI Agentâ€™s Surgical repair restores the correct values, the kernel thread rewrites the improper values, thus negating the repair.

### Core War Repair

Upon detecting the failure of its Surgical repair, the VICI Agent initiates the Core War repair, inspired by the classic game of Core War [9]. The Core War repair identifies the rootkit's code by following the improper pointer from the system call vector and then "neuters" the rootkit by rewriting its code to immediately jump to the kernel's proper function, bypassing any malicious functionality. Although control still flows through the rootkit, its harmful actions are neutralized, achieving the VICI Agent's objective. While our code-rewriting aims to avoid inadvertently crashing the kernel, we reserve Core War for cases where the simpler and safer Surgical repair fails.

### Hitman Repair

The Hitman repair is designed to handle more sophisticated rootkits that can evade the Core War repair. Another test rootkit uses a kernel thread to maintain its modifications to the kernel's system call vector and to rewrite its own instructions if they are neutered.

When the VICI Agent detects the failure of Core War, it turns to the Hitman repair. Hitman attempts to identify and terminate threads that may be aiding the rootkit. Its method for determining which threads to kill is approximate and often includes some innocent threads along with the guilty ones. Like Core War, Hitman uses the improper function pointer values in the kernel's system call vector to locate the rootkit's malicious functions in kernel memory. It calculates the start and end addresses of the kernel pages containing these functions and examines the top 64 words from each thread's kernel stack. If it finds a word-sized value within the address range of those pages, it kills the thread.

This approach often targets kernel threads aiding rootkits because they store saved instruction pointers within the target address range near the tops of their kernel stacks when they relinquish the CPU. However, this method also kills other threads that happen to have a matching word-sized pattern on their stack, whether it is a saved instruction pointer or not. Despite this imprecision, attempting the Hitman repair is still worthwhile, as it may prevent the need for even more extreme and costly repairs.

### Checkpoint and Reboot Repairs

The Checkpoint repair action differs from Core War and Hitman in that it does not counter specific rootkit strategies. If prior repairs fail, the Checkpoint repair restores the virtual machine to a previously checkpointed state. Administrators might periodically checkpoint the virtual machine, and this repair aims to restore the kernel to a healthy state predating the infection.

The Reboot repair is the VICI Agent's last resort. In a deployment, the storage capacity for checkpoints is finite, so repeated Checkpoint restores may eventually exhaust this supply. In such cases, further failures of cheaper repairs will cause the VICI Agent to reboot the virtual machine, returning it to an early state that is hopefully free of infection. In our prototype, reboot is implemented by restoring a checkpoint taken just after the operating system installation, losing all useful application state.

If Reboot cannot restore the kernel to health, the VICI Agent continuously reboots the machine. Neither the rootkit nor the system's mission applications make progress, but the VICI Agent has succeeded in making the presence of the rootkit known.

Currently, the Core War and Hitman repairs are implemented only for attacks on the system call vector. Difficult attacks on other aspects of the kernel's state cause the VICI Agent to skip directly to the Checkpoint repair.

In a real deployment, administrators might prefer to avoid more expensive repairs like Checkpoint and Reboot, opting instead for shutdown or manual intervention. However, these repairs might be appropriate for nodes in systems like Chord [28] or MapReduce [8], which have automatic protocols to tolerate or recover from node failures.

### Control and Learning

The VICI Agent is designed to apply its cheapest repairs first, escalating to more expensive actions only when the cheaper ones fail. This escalation behavior is illustrated in Figure 3A, where shaded rectangles represent scans where the VICI Agent's diagnostics indicate problems. The height of the rectangles increases with the costliness of the repair actions.

For example, in scan 2, the VICI Agent might detect tampering in the kernel's system call vector and apply its Surgical repair. If the problem persists in scan 3, it escalates to Core War. If the problem still remains in scan 4, it escalates further to Hitman. If Hitman successfully repairs the kernel, scan 5 will reveal a healthy kernel. By reserving the expensive Hitman repair until necessary and avoiding even more costly actions once Hitman proves effective, the VICI Agent minimizes repair costs.

The VICI Agent has an "anger level" that escalates in response to persistent infections. Once it escalates to Hitman, it remains at that anger level for a constant number of scans (e.g., 10). If the infection recurs during this interval, the VICI Agent applies Hitman immediately, rather than repeating the escalation through Surgical and Core War. This optimization saves time by skipping presumably ineffective cheaper repairs.

After 10 scans without reinfection, the VICI Agent de-escalates, decreasing its anger level. If the infection recurs, it re-escalates. If not, it continues to de-escalate back to its lowest anger level over a series of 10 scan steps, as shown in Figure 3B. This combination of escalation and de-escalation enables the VICI Agent to provide a form of Cognitive Immunity [23], adjusting its defenses in response to changing attacks.

### Control Implementation

Automatic detection-repair systems like the VICI Agent are examples of continuous or reactive planning agents that loop through phases of sensing, planning, and execution. Systems like IPEM [1] and PRS [12] use partial-order planning and Hierarchical Task Networks, respectively, but these require creating internal abstract representations of the problem domain, which can be difficult and error-prone. This is unsuitable for dealing with kernel-modifying rootkits, as one mistake in the abstract representation can give rootkits an avenue to defeat the agent.

The "Subsumption Architecture" is an alternative approach originally developed for autonomous mobile robots [4, 5, 6]. It requires no abstract representation, instead continuously polling sensors to determine the state of the world and reacting directly to sensor reports. This architecture allows the agent to maintain state across loop iterations, enabling it to remember and learn from past experiences.

The subsumption architecture also permits rapid decision-making, meeting the goal of achieving repair within milliseconds of diagnosis. It is amenable to incremental development and easy extension as new kernel-modifying rootkit threats emerge.

The VICI Agent adapts this architecture by implementing each repair action as a layer. Higher layers observe the effectiveness of lower layers and apply more expensive repairs only when the cheaper ones fail.

### Related Work

The VICI Agent borrows techniques from various systems that use virtual machine introspection to monitor virtualized systems [11, 2, 17, 16, 22]. It adds fully-automated kernel repair techniques and automated reasoning to avoid losing useful system state and availability.

The term "virtual machine introspection" was coined by Garfinkel and Rosenblum to describe their Livewire prototype, which used a hypervisor to implement a host-based intrusion detection system for virtual machines [11]. Livewire detected intrusions in both the kernel and user-mode applications but could not operate at full effectiveness if an adversary modified the kernel state. The VICI Agent adds repair and automated reasoning to Livewire-like diagnostic functionality.

Building on Livewire, several efforts have used hypervisors to monitor virtualized systems. Asrigo and others have instrumented virtualized honeypot kernels to better record user-mode process activity [2]. The Lycosid system [17] uses a hypervisor-based monitor to detect processes hidden by kernel-modifying rootkits, using cross-view validation to detect inconsistencies [29]. The present VICI Agent prototype focuses on detecting control-flow and text changes, but adding a Lycosid-like diagnostic could improve its effectiveness.

The VMwatcher system [16] uses a hypervisor to gather low-level information about a virtualized system and recasts it into higher-level abstractions for traditional intrusion detection systems. XenKIMONO [22] combines rootkit detection with cross-view validation and monitors critical user-mode daemons. Unlike the VICI Agent, XenKIMONO stops or pauses infected virtual machines for manual intervention or forensic analysis.

Some hypervisor-based efforts have explored intrusion prevention [18, 30, 26]. For example, Manitou [18] prevents the execution of unauthorized executable text pages, and UCON [30] performs access control checks to prevent memory writes that violate security policies. SecVisor [26] uses the Secure Virtual Machine feature of AMD CPUs to enforce strict page protection, preventing the writing of kernel text and the execution of kernel data. These systems provide useful preventive functionality, but their performance overheads are not well-documented, making it difficult to compare them with detection and repair approaches.