### Version 7 Service Refresh 7: Security Enhancement in the Generator

Version 7 Service Refresh 7 includes a security enhancement in the generator, as reported by Sethi in [IBM14]. This update focuses on the `SecureRandom` implementation of the cryptographic provider `IBMSecureRandom`, located in the `com.ibm.securerandom.provider` package. The implementation features a main entropy pool and a mixing function that internally relies on the hash function family HK to update the pool.

#### Internal State Decomposition

The internal state of IBM's generator is contained within a 680-bit field, referred to as `state`. For clarity, we decompose this field into seven segments: \( S = (S1 || S2 || S3 || S4 || S5 || S6 || S7) \).

- **S1**: Number of bytes used from the output pool.
- **S2**: Always set to 0.
- **S3**: Output data.
- **S4**: First entropy pool.
- **S5**: Five different internal counters.
- **S6**: Second entropy pool.
- **S7**: Flag indicating whether input is provided.

The initial state is defined as:
- \( S1 = 0 \)
- \( S2 = 0 \)
- \( S3 = 0 \)
- \( S4 = 0 \)
- \( S5[0] = 0 \)
- \( S5[1] = 128 \)
- \( S5[2] = 30 \)
- \( S5[3] = 0 \)
- \( S5[4] = 0 \)
- \( S6 = 0 \)
- \( S7 = \text{false} \)

The generator uses an internal function `reverse` to reverse the binary content of the input.

#### Refresh Algorithm

The refresh algorithm, described in Algorithm 22, updates the internal state by mixing the first entropy pool (S4) with the input (I) using the hash function HK. It is implemented through the method `engineSetSeed`.

**Algorithm 22: IBM SHA1PRNG Refresh**

**Input:**
- Current internal state \( S = (S1, S2, S3, S4, S5, S6, S7) \)
- Input \( I \)

**Output:**
- New internal state \( S' \)

**Steps:**
1. If \( |I| > 320 \):
   - \( S6 = \text{HK}(I) \)
2. \( \bar{I} = \text{reverse}(I) \)
3. \( S4 = S4 \oplus \bar{I} \)
4. \( S7 = \text{true} \)
5. \( S1 = |S3| \)
6. Return \( S' = (S1, S2, S3, S4, S5, S6, S7) \)

#### Next Algorithm

The next algorithm, described in Algorithms 23 and 24, generates a specified number of random bytes and updates the internal state. It is implemented through the methods `engineNextBytes` and `updateEntropyPool`.

**Input:**
- Current internal state \( S \)
- Number of bytes requested \( n \)

**Output:**
- \( n \)-byte random value \( R \)
- New internal state \( S' \)

**Steps:**
1. If \( S1 > 0 \) and \( S7 = \text{false} \):
   - Perform additional steps (details not provided in the original text).
2. Return \( (S4, S5, S7) \)

#### Theorem 26: Backward Security

**Theorem 26:**
The pseudo-random number generator IBM SHA1PRNG is not backward secure. To mount an attack, an adversary needs to corrupt 4 bytes of the internal state.

**Proof:**
Consider an adversary \( A \) against the security of IBM SHA1PRNG. \( A \) chooses a distribution \( D \) such that \( D(0) = I \), where \( I \) is 20 bytes and random. The adversary makes the following oracle queries in the security game MBWD:
- One D-refresh
- One with an output of size 10 bytes
- One M-set-state with \( M = (0, 0, 0, 0, 0, 0, 0) \), \( J = \{3\} \)
- One final next-ror with an output of size 10 bytes

After these operations, the adversary can obtain a 10-byte string that is identical to the previous output, which should occur with a probability of \( 2^{-80} \). Therefore, the generator is not backward secure for \( \gamma^* \leq 160 \).

### Conclusion and Perspectives

#### Security Models

The robustness model from [DPR+13] has a limitation: the seed dependence of the distribution used to generate inputs. Our proposed constructions rely on the independence between the distribution sampler and the seed, and we have shown that full seed dependence is impossible. Finding a realistic and provably secure balance between these extremes is an important area for further research. Dodis et al. [DSSW14] made some initial progress by introducing a realistic model that allows a certain level of seed dependence.

#### Security Analysis

Numerous implementations of pseudo-random number generators with input from different providers exist, often relying on poorly documented or undocumented internal directives and parameters. Flaws in the design can cause serious damage to cryptographic protocols, and vulnerabilities can be exploited by adversaries. Therefore, widely used generators should be analyzed in strong security models, such as those proposed in this thesis. For example, the Fortuna pseudo-random number generator used in Windows and BSD systems should be assessed in a strong security model. Open-source security products and cryptographic libraries should also be evaluated, as they are widely used in practice.

#### Implementations

For the implementations of our robust construction, we used the RELIC open-source library [AG] and the PolarSSL open-source library [Pol]. In an industrial context, an optimized implementation of our robust construction for operating systems or security applications could be proposed.

### List of Figures

1. Extract from the Proceedings of the plenary session of the Pontifical Academy of Sciences, Vatican City, Italy, October 27-31 1992 [Pul]
2. Procedures in Security Game ENC
3. Impossibility of Deterministic Extraction for δ-Unpredictable-bit sources
4. Impossibility of Deterministic Extraction for k-sources
5. Randomly Chosen Function Extract
6. Standard Pseudo-Random Number Generator
7. Procedures in Security Game PR
8. Procedures in Security Game SPR
9. Pseudo-Random Number Generator with Input
10. Procedures in Security Game PRF
11. Procedures in Security Game WPRF
12. Procedures in Security Game PRP
13. Procedures for Security Games DCA, IBA, SCA
14. Stateful Pseudo-Random Number Generator [BY03]
15. Procedures in Security Game BY-FWD
16. Reduction to the Standard Security for BY-FWD
17. Pseudo-Random Number Generator with Input [DHY02]
18. Procedures in Security Games CIA, CSA, KKA
19. Procedures in Security Game BST-RES(τ)
20. Pseudo-Random Number Generator with Input [BH05]
21. Procedures in Security Game BH-ROB(H)
22. Procedures in Security Game LPR(f)
23. Construction from [YSPY10]
24. Construction from [FPS12]
25. Construction from [YS13]
26. Pseudo-Random Number Generator with Input [DPR+13]
27. Procedures in Security Games RES(γ∗), FWD(γ∗), BWD(γ∗), ROB(γ∗)
28. Entropy Estimates in ROB(γ∗)
29. Procedures in Security Game 'Simplified ROB(H)'
30. Procedures in Security Game RECOV(qr, γ∗)
31. Procedures in Security Game PRES
32. Reductions to Preserving and Recovering Security for ROB
33. Preserving Security of G
34. Recovering Security of G
35. Benchmark on the Accumulation Process
36. Benchmarks on the Generation Process
37. Procedures in Security Game MROB(γ∗, λ)
38. Entropy Estimates in MROB(γ∗, λ)
39. Procedures in Security Game MPRES(qr, γ∗, λ)
40. Procedures in Security Game MRECOV(qr, γ∗, λ)
41. Procedures in the Security Game LROB(γ∗, λ)
42. Entropy Estimates in LROB(γ∗, λ)
43. Procedures in Security Game LRECOV(qr, qn, λ, γ∗)
44. Procedures in Security Game LPRES(qr, qn, γ∗, λ)
45. Instantiation of Generator G from [YS13] with Random Input U = (C, K0)
46. Instantiation of Generator G from [FPS12] with Random Input U = (C, K0)
47. New Instantiation of Generator G with Random Input U = (C, K0, ..., Kκ−1)
48. Benchmarks Between [FPS12] and [DPR+13]