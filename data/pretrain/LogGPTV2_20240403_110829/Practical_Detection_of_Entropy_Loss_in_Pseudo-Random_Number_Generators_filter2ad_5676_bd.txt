Version 7 Service Refresh 7 which contains a security enhancement in the generator reported
by Sethi in [IBM14]. We focus on the SecureRandom implementation of the crypto provider
IBMSecureRandom located in the package com.ibm.securerandom.provider. This implemen-
tation consists of a main entropy pool and a mixing function which internally relies on the hash
function family HK to update the pool.
Internal State Decomposition. The internal state of IBM’s generator is self-contained in
the ﬁeld state of size 680 bits. For convenience, we refer the ﬁeld state as the set S =
(S1||S2||S3||S4||S5||S6||S7). The generator uses this decomposition as follows: S1 contains the
number of bytes that has been used from the output pool, S2 = 0, S3 is the output, S4 is a ﬁrst
entropy pool, S5 are 5 diﬀerent internal counters, S6 is a second entropy pool and S7 is a ﬂag
indicating whether the input is provided or not. The initial state is S1 = 0, S2 = 0, S3 = 0, S4 =
0, S5[0] = 0, S5[1] = 128, S5[2] = 30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 = false and it relies on the
internal function reverse that simply reverses binary the content of the input.
The refresh algorithm. This algorithm is described in Algorithm 22. It takes as input the
current internal state (S1, S2, S3, S4, S5, S6, S7), a input I and outputs the new internal state by
mixing S4 with I using HK. It is implemented with the method engineSetSeed.
Algorithm 22 IBM SHA1PRNG refresh
Require: S = (S1, S2, S3, S4, S5, S6, S7), I
Ensure: S0
1: if |I| > 320 then
S6 = HK(I)
2:
3: end if
4: ¯I = reverse(I)
5: S4 = S4 ⊕ ¯I
6: S7 = true
7: S1 = |S3|
8: return S0 = (S1, S2, S3, S4, S5, S6, S7)
The next algorithm. This algorithm is described in Algorithms 23 and 24. It is implemented
with the methods engineNextBytes and updateEntropyPool.
It takes as input the current
internal state S and n, the number of bytes requested. It outputs an n-byte R and a new value
for the internal state. It relies on S1 to generate the output as follows: if S1  0 and S7 = F ALSE then
2:
3:
4:
5:
6:
7:
8:
9:
10: end if
11: return (S4, S5, S7)
S4 = S4 ⊕ I
S5[4] = δ
S5[5] + S5[2] + time
S5[0] + 1
end if
end for
Theorem 26. The pseudo-random number generator IBM SHA1PRNG is not backward secure.
To mount an attack against the generator, A needs to corrupt 4 bytes of the internal state.
Proof. Consider an adversary A against the security of IBM SHA1PRNG that chooses a distribution
D, such that D(0) = I where I is of size 20 bytes and random (i.e. D is legitimate with γ0 = 160).
Then A makes the following oracle queries in the security game MBWD: one D-refresh, one with
an output of size 10 bytes, next-ror one M-set-state with M = (0, 0, 0, 0, 0, 0, 0), J = {3} and one
ﬁnal next-ror with an output of size 10 bytes. Then:
• After D-refresh with I, S1 = |S3|, S2 = 0, S3 = 0, S4 = 0⊕ I, S5[0] = 0, S5[1] = 128, S5[2] =
30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 = T RU E.
• After one next-ror with n = 10, S1 = 10, S2 = 0, S3 = HK(0||0 ⊕ I||0||128), S4 = 0 ⊕
I, S5[0] = 0, S5[1] = 128, S5[2] = 30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 = T RU E. R =
S3[0, . . . , 10]. The output R is random.
• After one M-set-state with M = (0, 0, 0, 0, 0, 0, 0), J = {1}, S1 = 1, S2 = 0, S3 = HK(0||0⊕
I||0||128), S4 = 0 ⊕ I, S5[0] = 0, S5[1] = 128, S5[2] = 30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 =
T RU E.
• After one next-ror with n = 10, S1 = 10, S2 = 0, S3 = SHA1(0||0 ⊕ I||0||128), S4 =
0 ⊕ I, S5[0] = 0, S5[1] = 128, S5[2] = 30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 = T RU E and
R = S3[0, . . . , 10].
Therefore, A obtains a 10-byte string in the last next-ror-oracle query that is exactly the same
as the previous next-ror-oracle query, whereas ideally, this event occurs only with probability
2−80. Therefore the pseudo-random number generator IBM SHA1PRNG is not backward secure
for γ∗ ≤ 160. Note that as the ﬁelds S2 and S3 are not updated during the refresh Algorithm,
A could make suﬃcient calls to D-refresh to mount a similar attack for a larger value of γ∗.
— 134 —
Chapter 8
Conclusion and Perspectives
Security Models. The robustness model from [DPR+13] has a limitation, the seed depen-
dence of the distribution used to generate inputs. Our proposed constructions crucially rely on
the independence between the distribution sampler and seed, and we have shown that full seed
dependence is impossible. Finding the right (realistic and, yet, provably secure) balance be-
tween these extremes is an important subject for further research. In [DSSW14], Dodis, Shamir,
Stephens-Davidowitz and Wichs made some initial progress along these lines by introducing a
realistic model that eﬀectively allows a certain level of seed dependence. They complemented the
robustness model allowing the attacker A and the distribution sampler D to deﬁne a new distri-
bution sampler D0 correlated with seed. They proved that the original construction of [DPR+13]
can be extended in this model.
Security Analysis. Currently there are numerous implementations of pseudo-random number
generators with input from diﬀerent providers, and most of them rely on internal directives and
parameters that are poorly documented or even undocumented. However, a ﬂaw in the design
can cause serious damages in cryptographic protocols, and vulnerabilities can be exploited by
adversaries. Therefore widely used generators shall be analysed in a strong security model as the
ones we propose in this thesis. For example, the design of the pseudo-random number generators
with input in the Windows system relies on the Fortuna pseudo-random number generator
[FSK10], which has been analyzed in [DSSW14], however the analysis of its implementation
remains to be done. Similarly, the pseudo-random number in the BSD operating system is based
on a former version of the Fortuna generator and shall be assessed in a strong security model.
Open-source security products, or open-source cryptographic libraries shall also be assessed, as
they are widely used in practice. Recently, a vulnerability has been discovered in the Truecrypt
software, related to the improper initialisation of the pseudo-random number generator [Tru15].
A careful assessment of this generator in a strong security model would allow to point out new
potential weaknesses or to ensure security.
Implementations. For the implementations of our robust construction, we used the RELIC
open source library [AG], and the PolarSSL open source library [Pol]. In an industrial perspec-
tive, one could propose an optimized implementation of our robust construction for operating
systems or security applications.
— 135 —
Chapter 8. Conclusion and Perspectives
— 136 —
List of Figures
1
Extract from the Proceedings of the plenary session of the Pontiﬁcal Academy of
. . . . . . . . . . . . . . .
Sciences, Vatican City, Italy, October 27-31 1992 [Pul]
2.1 Procedures in Security Game ENC . . . . . . . . . . . . . . . . . . . . . . . . . .
Impossibility of Deterministic Extraction for δ-Unpredictable-bit sources . . . . .
2.2
2.3
Impossibility of Deterministic Extraction for k-sources . . . . . . . . . . . . . . .
2.4 Randomly Chosen Function Extract . . . . . . . . . . . . . . . . . . . . . . . . . .
2.5 Standard Pseudo-Random Number Generator . . . . . . . . . . . . . . . . . . . .
2.6 Procedures in Security Game PR . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.7 Procedures in Security Game SPR . . . . . . . . . . . . . . . . . . . . . . . . . .
2.8 Pseudo-Random Number Generator with Input . . . . . . . . . . . . . . . . . . .
2.9 Procedures in Security Game PRF . . . . . . . . . . . . . . . . . . . . . . . . . .
2.10 Procedures in Security Game WPRF . . . . . . . . . . . . . . . . . . . . . . . . .
2.11 Procedures in Security Game PRP . . . . . . . . . . . . . . . . . . . . . . . . . .
3.1 Procedures for Security Games DCA, IBA, SCA . . . . . . . . . . . . . . . . . . . .
3.2 Stateful Pseudo-Random Number Generator [BY03]
. . . . . . . . . . . . . . . .
3.3 Procedures in Security Game BY-FWD . . . . . . . . . . . . . . . . . . . . . . . .
3.4 Reduction to the Standard Security for BY-FWD . . . . . . . . . . . . . . . . . .
3.5 Pseudo-Random Number Generator with Input [DHY02] . . . . . . . . . . . . . .
3.6 Procedures in Security Games CIA, CSA, KKA . . . . . . . . . . . . . . . . . . . .
3.7 Procedures in Security Game BST-RES(τ) . . . . . . . . . . . . . . . . . . . . . .
3.8 Pseudo-Random Number Generator with Input [BH05] . . . . . . . . . . . . . . .
3.9 Procedures in Security Game BH-ROB(H) . . . . . . . . . . . . . . . . . . . . . .
3.10 Procedures in Security Game LPR(f) . . . . . . . . . . . . . . . . . . . . . . . . .
3.11 Construction from [YSPY10]
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.12 Construction from [FPS12]
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.13 Construction from [YS13]
4.1 Pseudo-Random Number Generator with Input [DPR+13] . . . . . . . . . . . . .
4.2 Procedures in Security Games RES(γ∗), FWD(γ∗), BWD(γ∗), ROB(γ∗) . . . . . .
4.3 Entropy Estimates in ROB(γ∗)
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.4 Procedures in Security Game ’Simpliﬁed ROB(H)’
. . . . . . . . . . . . . . . . .
4.5 Procedures in Security Game RECOV(qr, γ∗) . . . . . . . . . . . . . . . . . . . . .
4.6 Procedures in Security Game PRES . . . . . . . . . . . . . . . . . . . . . . . . . .
4.7 Reductions to Preserving and Recovering Security for ROB . . . . . . . . . . . .
4.8 Preserving Security of G . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.9 Recovering Security of G . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . .
4.10 Benchmark on the Accumulation Process
4.11 Benchmarks on the Generation Process
. . . . . . . . . . . . . . . . . . . . . . .
iv
12
14
15
15
21
21
22
22
24
24
25
30
31
32
32
34
35
38
40
41
45
46
46
47
51
54
55
56
58
59
61
65
68
74
75
— 137 —
LIST OF FIGURES
77
79
80
81
5.1 Procedures in Security Game MROB(γ∗, λ)
. . . . . . . . . . . . . . . . . . . . .
5.2 Entropy Estimates in MROB(γ∗, λ) . . . . . . . . . . . . . . . . . . . . . . . . . .
5.3 Procedures in Security Game MPRES(qr, γ∗, λ)
. . . . . . . . . . . . . . . . . . .
5.4 Procedures in Security Game MRECOV(qr, γ∗, λ) . . . . . . . . . . . . . . . . . .
6.1 Procedures in the Security Game LROB(γ∗, λ) . . . . . . . . . . . . . . . . . . . .
92
6.2 Entropy Estimates in LROB(γ∗, λ)
93
. . . . . . . . . . . . . . . . . . . . . . . . . .
6.3 Procedures in Security Game LRECOV(qr, qn, λ, γ∗) . . . . . . . . . . . . . . . . .
95
6.4 Procedures in Security Game LPRES(qr, qn, γ∗, λ) . . . . . . . . . . . . . . . . . .
96
Instantiation of Generator G from [YS13] with Random Input U = (C, K0) . . . 104
6.5
Instantiation of Generator G from [FPS12] with Random Input U = (C, K0
6.6
. . 106
0)
6.7 New Instantiation of Generator G with Random Input U = (C, K0, . . . , Kκ−1) . . 107
6.8 Benchmarks Between [FPS12] and [DPR+13]