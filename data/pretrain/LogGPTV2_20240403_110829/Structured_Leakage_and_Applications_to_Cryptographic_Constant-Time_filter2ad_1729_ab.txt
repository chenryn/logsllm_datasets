flow, compile-time computations, support for vectorized operations
(simd), and arrays. Register arrays are particularly convenient in
combination with unrolled loops and compile-time computations of
array indices. Stack arrays dramatically simplify static analyses and
manual verification of programs: since array addresses cannot be
involved in pointer arithmetic, arrays with different names, neither
alias nor overlap.
Source Jasmin programs compute over several kinds of values:
boolean (written 𝑡𝑡 and 𝑓𝑓 ), unbounded integers (for compile-time
computations only), machine integers of various sizes (from 8 to
256-bit), and arrays of machine integers. Strikingly, arrays are a
first-class value: functions can take them as arguments and return
them as results. Arguments are passed by value: an array passed to
a function is not modified unless it is also returned by this function.
This considerably simplifies the reasoning about program behaviors.
Of course, this is just a convenience for the programmers and
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea464In order to remain predictable, the compiler does not perform op-
timizations that potentially affect efficiency, e.g. instruction sched-
uling or register spilling. For the latter, the Jasmin compiler instead
performs a weaker form of register allocation that fails when too
many registers are used. Nonetheless, the compilation chain is
complex and features many passes that can dramatically impact
leakage and cost; among them: inlining turns a program into a
single function, unrolling fully unrolls all for loops, constant propa-
gation simplifies expressions and conditionals, dead-code elimina-
tion removes some redundant computations, instruction selection
replaces high-level operators by sequences of machine instructions,
stack-allocation turns accesses to variables into memory operations,
linearization fixes the program layout and introduces jumps.
4 ILLUSTRATIVE EXAMPLES
Theorems 2.1 and 2.2 highlight the benefits of instrumented com-
piler correctness. However, two challenges must be addressed in
order to realize these benefits. First, one must define the leakage
transformer 𝐹. Second, applications such as cost require an algo-
rithmic description of 𝐹, in order to compute the cost of the target
program. We address these challenges by using structured leak-
age and a syntax for describing leakage transformers. This section
introduces deliberately simple examples that illustrate our repre-
sentations of leakage and leakage transformers and their benefits.
We first consider expressions, then turn to instructions.
Expressions. Figure 3 introduces two code snippets represent-
ing the source and target code for addition operations and their
associated leakages. Figure 3 also presents the leakage transformer
that will be produced during this transformation. The first addition
operation adds 0 to the value present at index 0 in the array a and
the second addition adds 1 to the result obtained from the first
addition. The compiler knows statically that the result of the first
operation will be 𝑎[0]; hence the target code is just one addition
operation with operands 𝑎[0] and 1. The leakage for (0+𝑎[0])+1 is
((•, (•, [0])),•) representing that evaluation of a constant produces
no leakage and an array access leaks the index accessed. The leakage
for the compiled expression 𝑎[0] + 1 is ((•, [0]),•). The compiler
produces leakage transformer (𝜋2, id) where 𝜋2 projects the leak-
age at index 2 from the source leakage (•, (•, [0])) and id preserves
the leakage. If the leakage produced by the addition operation was
represented as a concatenation of its sub-parts’ leakages, it would
be difficult to project at the corresponding index as concatenating
with an empty leakage returns the original leakage. The flattened
source leakage of the above example will be the concatenation of •,
[0] and •, which will get reduced to [0]. From the flattened list, it
is hard to identify the leakages belonging to the sub-parts.
Instructions. Figure 4 presents a conditional instruction with a 𝑡𝑡
guard, that is reduced to its then branch after compilation. This kind
of transformation is carried out when compiler statically knows the
value of boolean condition. The leakage for conditional instruction
at the source level is if𝑡𝑡 (•, (•, [0]) := •). The structure of the source
leakage is closely aligned with the structure of the conditional in-
struction, with 𝑡𝑡 indicating that the boolean condition is satisfied
and (•, [0]) := • indicating that the then branch is an assignment
Figure 1: Jasmin architecture
𝑒 ∈ Expr ::= 𝑥
| 𝑐
| 𝑎[𝑒]
| [𝑒]
| op(𝑒, . . . , 𝑒)
𝑑 ∈ Lval ::= 𝑥
| 𝑎[𝑒]
| [𝑒]
variable
constant
array access
memory load
operator
variable
array store
memory store
𝑖 ∈ Instr ::= 𝑑 := 𝑒
|
if 𝑒 then 𝑖 else 𝑖
| while 𝑒 do 𝑖
| {𝑖; . . . ; 𝑖}
assignment
conditional
while loop
sequencing
𝑎 ∈ A ranges over array variables; 𝑥 ∈ X ranges over scalar variables
Figure 2: Syntax of programs
verification tools: the compiler ensures that no copy happens at
run-time.
The compiler produces efficient assembly code for x86 64 plat-
forms (other platforms are under development). The overall com-
pilation chain is presented in Figure 1. It is formally verified for
correctness in Coq, except the front-end (parsing, type checking,
and expansion of parameters) and the assembly pretty-printer that
are trusted. Throughout the compilation, five different intermedi-
ate representations (IR) are used. At the highest-level, the Jasmin-
source language is verification friendly: it is structured and has a
clean semantics. Formal verification of Jasmin programs is done on
this intermediate representation. The middle-end manipulates the
Jasmin IR: it has the same syntax (presented in Figure 2) as Jasmin-
source but a more flexible semantics that allows more optimizations.
The last pass of the middle-end uses Jasmin-stack as output: this IR
again has the same structured syntax but also features an explicit
stack pointer. The back-end outputs unstructured IR: Jasmin-linear
with labels and gotos after linearization, and assembly at the end. In
this paper, we focus on the compiler middle-end; therefore, we only
present the semantics of Jasmin and not of the lower languages. Of
course, our implementation of leakage transformers carries all the
way to assembly.
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea465( ,
)
𝜋2
id
𝑎[0] + 1
( ,
)
( ,
)
•
•
[0]
(0 + 𝑎[0]) + 1
( ,
)
( ,
)
•
( ,
)
•
•
[0]
Figure 3: Example: Structured leakage for expression
ceval𝑡𝑡
:=
if 𝑡𝑡 then 𝑥[0] := 0 else 𝑥[0] := 1
id
id
𝑥[0] := 0
if𝑡𝑡
( ,
)
•
•
:=
[0]
•
:=
[0]
•
( ,
)
•
Figure 4: Example: Structured leakage for conditional
instruction. The target leakage is (•, [0]) := •, which gives us in-
formation, the conditional instruction is reduced to an assignment
instruction. The leakage transformer produced during this transfor-
mation is ceval𝑡𝑡 (id := id), where 𝑡𝑡 indicates the branch taken and
id := id transforms the leakage for the then branch from the source.
Designing the leakage transformer was straightforward because
of the structured notion of leakages. If the leakage generated from
conditional instruction was a concatenation of its sub-parts then it
would be hard to detect, which part in the list, belongs to the then
or else branch.
5 INSTRUMENTED CORRECTNESS FOR
JASMIN COMPILER
This section details how we apply our methodology for the Jas-
min compiler. We present our representation of leakage and our
instrumented operational semantics, and our syntax for leakage
transformers. Finally, we discuss instrumented correctness for some
of the Jasmin compiler passes. For the clarity of presentation, we
provide a simplified treatment of the semantics of leakage trans-
formers.
5.1 Instrumented semantics
In this section, we introduce the formal notion of structured leak-
ages, and the instrumented semantics of a core fragment of the
Jasmin language shown in Figure 2—our Coq formalization is for
the full language, including other forms of loops and procedure
calls.
We distinguish between leakage ℓe for expressions and leakage ℓ
for instructions. Figure 5 presents the syntax of structured leakages.
As the notations suggest, the leakage’s syntax is closely related to
the syntax of programs and their semantics. In the case of expres-
sions, ℓe can be •, an array index [𝑧], a memory address ∗𝑝 or a
𝑒 ). In the case of instructions, there is one
tuple of leakage (ℓ1
constructor per semantic rule.
𝑒 , . . . , ℓ𝑛
ℓ𝑒 ::= •
| [𝑧]
| ∗𝑝
| (ℓ𝑒, . . . , ℓ𝑒)
empty
index
address
sub-leakage
ℓ ::= ℓ𝑒 := ℓ𝑒
|
if𝑏 (ℓ𝑒, ℓ)
| whilet(ℓ𝑒, ℓ, ℓ)
| whilef (ℓ𝑒)
| {ℓ; . . . ; ℓ}
assignment
conditional
iteration
loop end
sequence
Figure 5: Syntax of structured leakages
Expression semantics:
𝑐 ↓𝑠• 𝑐
𝑣 = 𝑠(𝑥)
𝑥 ↓𝑠• 𝑣
𝑧
𝑒 ↓𝑠
𝑠(𝑎) = 𝑡
ℓ𝑒
𝑎[𝑒] ↓𝑠(ℓe,[z]) 𝑡 [𝑧]
𝑣𝑖
𝑒𝑖 ↓𝑠
ℓ𝑖
𝑒
op(𝑒1, . . . , 𝑒𝑛) ↓𝑠
(ℓ1
𝑒 ,...,ℓ𝑛
𝑣 = op(𝑣1, . . . , 𝑣𝑛)
𝑒 ) 𝑣
𝑒 ↓𝑠
ℓ𝑒
𝑝
[𝑒] ↓𝑠(ℓe,∗p) 𝑠[𝑝]
Assignment semantics:
𝑥 := 𝑣 ↓𝑠• 𝑠{𝑥 ← 𝑣}
𝑡′ = 𝑡 {𝑧 ← 𝑣}
𝑒 ↓𝑠
ℓ𝑒
𝑎[𝑒] := 𝑣 ↓𝑠(ℓe,[z]) 𝑠{𝑎 ← 𝑡′}
𝑠(𝑎) = 𝑡
𝑧
𝑒 ↓𝑠
ℓ𝑒
𝑝
[𝑒] := 𝑣 ↓𝑠(ℓe,∗p) 𝑠{𝑝 ← 𝑣}
Instruction semantics:
{} : 𝑠 ⇓{} 𝑠
𝑖 : 𝑠 ⇓ℓ𝑖 𝑠1
{𝑐} : 𝑠1 ⇓{ℓ𝑐} 𝑠2
{𝑖; 𝑐} : 𝑠 ⇓{ℓ𝑖 ;ℓ𝑐} 𝑠2
𝑠′
𝑒 ↓𝑠
𝑣 𝑑 := 𝑣 ↓𝑠
ℓ𝑒
ℓ𝑑
𝑑 := 𝑒 : 𝑠 ⇓ℓ𝑑 :=ℓ𝑒 𝑠′
𝑒 ↓𝑠
ℓ𝑒
𝑏 𝑐𝑏 : 𝑠 ⇓ℓ𝑐 𝑠′
if 𝑒 then 𝑐𝑡𝑡 else 𝑐 𝑓𝑓 : 𝑠 ⇓if𝑏 (ℓ𝑒 ,ℓ𝑐 ) 𝑠′
𝑒 ↓𝑠
ℓ𝑒
𝑓𝑓
while 𝑒 do 𝑐 : 𝑠 ⇓whilef (ℓ𝑒 ) 𝑠
𝑒 ↓𝑠
ℓ𝑒
𝑡𝑡
𝑐, 𝑠 ⇓ℓ𝑐 𝑠1 while 𝑒 do 𝑐 : 𝑠1 ⇓ℓ𝑤 𝑠2
while 𝑒 do 𝑐 : 𝑠 ⇓whilet(ℓ𝑒 ,ℓ𝑐 ,ℓ𝑤) 𝑠2
Figure 6: Instrumented semantics.
The instrumented semantics is produced from the original se-
mantics by annotating the judgments with leakage. The semantic
uses three judgments. The first, 𝑒 ↓𝑠
𝑣, provides the semantic
ℓ𝑒
of the expression 𝑒 in the state 𝑠, it produces a leakage ℓ𝑒 and a
𝑠′ provides semantics of assigning
value 𝑣. The second, 𝑑 := 𝑣 ↓𝑠
ℓ𝑒
a value 𝑣 to a destination 𝑑 in a state 𝑠; it generates a new state 𝑠′
and some leakage ℓ𝑒 (leakage for assignments is a subset of the one
for expressions). The last judgment, 𝑖, 𝑠 ⇓ℓ 𝑠′, provides semantics
of instructions; it takes an instruction 𝑖 and a state 𝑠 and returns
an instruction’s leakage ℓ and a state 𝑠′. The three judgments are
presented in Figure 6.
Informally a state is a pair of a memory (a mapping from ad-
dresses to values), and a valuation for variables (a mapping from
variables to values). 𝑠(𝑥) is the value associated to 𝑥 in 𝑠 (which can
be an array). 𝑠[𝑝] loads the value stored in memory at an address 𝑝.
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea466When a value 𝑣 is an array, 𝑣[𝑖] denotes the value at index 𝑖 in
this array. 𝑠{𝑥 ← 𝑣} updates the value associated to 𝑥 with 𝑣 and
𝑠{𝑝 ← 𝑣} writes 𝑣 in memory at address 𝑝.
The instrumented semantics of expressions is presented in Fig-
ure 6. Variables leak •, i.e. a mark indicating that a variable has
been evaluated. The evaluation of an array access 𝑎[𝑒] leaks a pair
(ℓ𝑒, [𝑧]) where ℓ𝑒 is the leakage corresponding to the evaluation of
the index 𝑒 and 𝑧 is the value of 𝑒. Memory accesses work in the
same way. Operators leak the tuple composed by the leakages of
their arguments. A destination can be either a variable, an array
destination or a memory destination. The semantic of assignment
also generates leakages due to memory and array stores. It follows
the same pattern as for expressions.
Except for the leakage, the non-instrumented rules are mostly
standard; hence we only discuss the parts related to leakage. An
assignment instruction produces a leakage ℓ𝑑 := ℓ𝑒 composed of
the leakage generated during the evaluation of the expression 𝑒
and the one generated during the evaluation of the assignment
𝑑 := 𝑣. The leakage of a sequence is composed of the leakage of