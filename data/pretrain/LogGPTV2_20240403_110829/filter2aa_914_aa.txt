1
threat protection | compliance | archiving & governance | secure communication
Malware Command and Control Channels
- a journey into Darkness -
By Brad Woodberg 
-
Emerging Threats Product Manager  / Proofpoint
-
@bradmatic517
-
PI:EMAIL
2
Agenda
C2 Intro and Background (7 mins)
Modern C2 Techniques (6 mins)
Case Studies (15 mins)
Predictions for C2 (5 mins)
Defense (10 mins)
Wrap Up (2 mins)
3
Why Command & Control?
Vulnerabilities, Exploits, and Malware grab the headlines and analyst focus 
While very interesting, it is also very noisy, many exploits fail, very FP prone.
If you can effectively detect C2 activity, you have a high fidelity indicator that an 
asset is actually compromised.
With C2, the tables are turned on attackers, they go on defense, and we go on 
offense.
4
Primary Breach Vectors
Modern malware is delivered in one of two ways:
− Executable Content:  Binary executables, embedded 
executable content like macros typically through web or 
email channels on the network.
− Exploit Driven: An exploit against a software vulnerability 
such as those against Flash, PDF, Java, Office Docs, 
Browsers, and other network enabled applications.
Regardless of how modern malware compromises a 
system, it is rarely autonomous.
Dridex
CVE-2016-4117
Angler EK
5
Why malware needs C2?
Initial malware execution may occur under non-ideal scenarios:
Malware may land on a non-target asset
Malware may not have sufficient privileges when it executes
Malware may be delivered in pieces to evade detection / fit into buffers
Malware may require payload before it is malicious (e.g. TinyLoader) 
Malware may require coordination with C2 for operating instructions before it 
takes action (e.g. Crypto Ransomware waiting to receive a key)
Enter Command and Control
6
Escalation
Complete malware breach by acquiring additional executables, payloads, and 
configurations.
− May be as simple as a word doc downloading an EXE (e.g. Dridex), 
− Or as complex as a dropper downloading an entirely new malware (e.g. Tinyloader / 
AbaddonPoS)
Escalation stage is often carried out by contacting C2 Infrastructure
This communication often leverages different infrastructure, protocols, and 
methods than the initial infection.
− Often because infection infrastructure is rented, and C2 is managed by a different actor.
7
Exfiltration
This phase is where the malware 
delivers on it’s intended purpose
Exfiltrated data often includes 
stealing intellectual property, 
exposing attributes of a target 
network, or larger escalation of 
an attack.
Locky Cataloguing Endpoint 
Files to C2
ZBOT (Zeus variant) DNS Covert 
Channel
8
Infection in Action: Angler Exploit Kit
Redirect to 
Angler 
Infrastructure
TDS Evaluates 
Target Client
Exploit / 
Payload 
Delivered
Target 
Compromised, 
C2
9
Lateral Infection vs. C2
Lateral Infection is not the same as C2!
Lateral Infection focuses on Three Phases:
− Introspection: Local device scanning
− Network Scanning: mapping the network for 
potential targets and pivot points.
− Exploit and Spread:  Compromise other assets.
LI typically involves using native networking 
protocols to scan and spread within an 
organization (e.g. Locky using SMB to 
encrypt file shares)
LI often spreads by leveraging standard 
network protocols like SMB, WMI, SSH, vs. 
C2 channels which are often over HTTP/S, 
ToR, or custom protocols.
Datacenter
Workstation
Workstation
C2
Lateral
Internet
10
C2 Channel Evolution: Cat and Mouse
Early malware just used fixed non-standard ports to communicate e.g. Back Orifice 
1998).
Early malware often heavily leveraged IRC channels for a simple C2 infrastructure 
e.g. PrettyPark (1999)
As some organizations tamped down on allowing ports outside of TCP 80/443 to 
communicate to the internet, so did malware evolve.
Enter the NGFW which leveraged Layer 7 payload inspection (similar to IPS) to 
identify applications rather than attacks.
Layer 3 Network Layer (IP)
Layer 4 Transport Layer (TCP/UDP)
Layer 7 Network Application Layer (HTTP)
Layer [8] Software Application Layer (Dropbox)
Layer [9] Content Layer (Docs, HTML)
Access List
Stateful Firewall
NGFW/IPS
Sandbox/NG-DLP
CASB
Malware noted that keeping explicit strings in the payload would be easy to identify (e.g. 
GhostRat).  The same is true for potentially unwanted applications like Bittorent / Tor / Skype 
which also leveraged evasion techniques.
To evade NGFW and other deep inspection technologies, malware shifted to leverage 
steganographic techniques to hide in plain sight.  E.g. Sninfs
Finally, malware has evolved even further to leverage highly obfuscated and embedded 
communication channels like jpgs, flash, encoded ASCII.
In addition to the advanced obfuscation, malware has gone to great lengths to hide itself in 
legitimate, cloud applications.
11
C2 Hosting Evolution
Early days C2 infrastructure was very fixed.  Similar to traditional computing, it was physical machines in data centers with
static IP’s.
While DNS was prominent, domain names for malware would not change very quickly.  
Configuration Updates via CNC
This weak link made for a great target for vendors providing defense mechanisms.  So malware evolved as well to domain 
generation algorithms (DGA’s) which could quickly cycle through generated domain names to eliminate single points of 
failure.  E.g. Conficker
The issue with DGA’s is that the algorithm can be reverse engineered, and it still relies on DNS. Enter P2P Mechanisms 
like GameOver-Zeus
To offset the potential disruptions for DGA’s, malware started leveraging common cloud services which enterprises are 
adverse to blocking as they may serve a business function. 
Timeline
Complexity
Static IP
DNS
Dynamic 
Configuration 
Updates
DGA
P2P
Common Cloud 
Services / Steg
12
C2 & Steg:
"Never write if you can speak; never speak if you can nod; never 
nod if you can wink.“
− Martin Lomasney, Gangster, Politician (1859-1933)
Steganography (Steg) is hiding in plain sight.  It has been used for centuries 
and provides plausible deniability.
Protocol Headers, Metadata in Files, Altering Bits in Data, Unicode &c &c &c.
Examples of how C2 can leverage Steg includes Embedding Configuration in 
Images, Audio, Video, File Metadata, and even network protocols!
You can also layer Steg with encryption/encoding for additional obfuscation.
13
C2 Steg Continued
Deterministically identifying when Steg is in use 
can be very expensive if not nearly impossible 
in many scenarios, especially when processing 
network streams in real time.
This makes Steg a perfect choice for enhancing 
the robustness of malware C2.
Source: IPv4/V6/TCP Header, LUC http://intronetworks.cs.luc.edu/1/html/tcp.html
OpenPuff:  http://embeddedsw.net/OpenPuff_Steganography_Home.html
14
C2 - Counter Offense Techniques
Attackers think economically, want their 
malware to last as long as possible thus 
bringing the most ROI.  
Malware authors utilize several counter 
detection techniques to ensure the viability of 
their malware.
− Filter who can connect (e.g. IP filtering to 
eliminate non-targets, researchers and 
sandboxing tools.)  
− Secret Handshakes: E.g. leverage custom TCP 
stacks or special low level handshakes that only 
illicit responses if correct handshake is used (e.g. 
Poison Ivy)
− Encryption:  Predefined SSL Certificates 
embedded in malware for authenticating 
client/servers
− Steg:  
Anecdotally, we’ve seen an increase in anti-
sandboxing techniques to prevent execution 
and avoid detection.
TDS ACL
Vendor/Non 
Target IP Space
Target IP Space
256 Byte Challenge Request
256 Byte Challenge Response
Source: Abuse.CH 
https://sslbl.abuse.ch/intel/9663b6799ba20d68734cc99aa83d6bbb0506f064
15
C2 Flavors: Crimeware vs. Targeted
Crimeware:
General Purpose
Widely distributed
Go to greater lengths to 
evade detection from a 
protocol perspective
Yet quite chatty on C2 
channels
Targeted:
Highly selective victims
Will be custom built to 
navigate individual 
networks, common 
platforms.
Often does not go to great 
lengths from an obfuscation 
perspective
Targeted Espionage:
Most exotic form of 
malware/C2
Far more sophisticated than 
traditional targeted.  
May lack network based C2 
channels altogether.
May leverage insiders as 
well as covert HW to bridge 
air gaps.
16
Case Studies
Now that we’ve covered the background and evolution, let’s take a look at actual 
malware C2 channels to reinforce our examples.
Note that there are often a great many variants for each malware and some 
leverage different communication than the mainstream samples which we will 
cover.
17
Gh0stRAT
Basic C2 Protocol
Common strains support a 
basic non-encoded string in the 
PCAP.
‘Gh0st’ string in initial payload 
to identify malware
Non-Standard Port easily 
filterable
Further Reading:  http://malware-unplugged.blogspot.com/2015/01/hunting-and-decrypting-communications.html
18
PoisonIvy
Unknown Encrypted, 256 Byte 
handshake
Does not contain explicit strings in 
handshake which are easy to key 
on.
Available since 2005, still very 
popular and little changed despite 
being in the wild so long.
256 Byte Handshake is exchanged 
in a CHAP like sequence.  Client 
sends a hello which allows the 
server to prevent it from 
communicating with an unknown 
client.
The server will only accept the client 
communication if it has been 
encrypted with the right password.
19
NanoLocker
Some malware leverage 
common network utilities 
and infrastructure to 
embed C2 functionality 
NanoLocker leverages 
ICMP to ping a hardcoded 
address 52.91.55.122 with 
an ICMP payload of the 
ransomware Bitcoin 
address.  It will also send 
follow up payloads of the 
number of files encrypted 
on the system.