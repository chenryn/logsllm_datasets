# 结束语 | 源码学习，我们才刚上路

大家好，我是胡夕。《Kafka核心源码解读》课程至此告一段落了，又到了和大家说再见的时候。

在接到这个任务时，我记得编辑告诉我这将是极客时间的第一个源码类专栏课程。当时我既感到自豪也有些忐忑。能够成为首个分享Kafka源码的专栏作者让我倍感荣幸；但同时我也意识到，讲解源码并非易事。如果讲解过于粗略，则可能流于表面；而过细的话，则容易陷入冗长乏味的代码阅读中。因此，如何把握其中的平衡点是一个需要仔细斟酌的问题。

尽管如此，我还是决定尝试一下。因为在我看来，当前的编程教育对于源码阅读的重视程度远远不够。无论是学校还是各类培训机构往往只注重编程技能的传授，却忽略了带领学生一起学习业界流行的框架源码编写方法。然而，这是非常关键的一环。正如美国作家斯蒂芬·金所说：“If you don't have time to read, you don't have the time (or the tools) to write. Simple as that.”这句话虽然针对写作而言，但对于编程同样适用。通过学习比自己更有经验的人所写的高质量代码，可以间接或直接提升自己的编码水平。

从2019年12月开始筹备至今，历时近八个月的时间，我精心挑选并详细解析了Kafka Broker端主要组件的核心源码。我认为整体上是成功的，并且在撰写过程中我自己也受益匪浅。希望你们也能从中有所收获。当然，无论你目前掌握了多少知识，这些内容都将作为宝贵的资源等待着你随时翻阅、消化，并帮助你解决现在及未来可能遇到的问题。

接下来我想谈谈关于未来继续学习源码的一些建议：

**首先，我建议研读Kafka Clients端的代码**。也许你会疑惑为何不先去研究Broker端其他组件？实际上，Clients工程不仅包含了客户端源码，还包括支持服务器端组件的基础代码如通信通道、消息集合等。理解它们有助于构建对整个Kafka代码架构的整体认知。

**其次，深入研究本课程中涉及组件的测试用例代码**。很多时候仅凭查看实现源码很难完全理解其实际运行机制，而测试用例则能很好地揭示这一点。例如，在学习Log Cleaner源码时我就遇到了很大困难，直到后来通过查阅相关测试用例才得以掌握其工作原理。因此，请务必重视测试用例代码的价值。

**最后，强烈推荐大家阅读Log Cleaner组件的相关代码**。它主要用于处理带Key消息的日志清理工作，在其他场景下较少出现，所以我并未在课程中专门讲解。但实际上它是Broker端非常重要的一部分。比如我们熟悉的位移主题就是依靠此机制定期删除过期数据。事实上，清除过期或重复数据是任何数据存储系统都需要解决的关键问题之一。该部分代码量不大，可以在较短时间内掌握。

面对看不懂的情况怎么办呢？我的答案是“不要着急”。刚开始接触陌生代码时感到困惑是很正常的。此时你需要做的是初步了解代码结构与轮廓，知道有哪些类以及它们定义了哪些API。就像学习写作一样，努力理解和吸收超出自己现有知识范围内的东西才能真正提高技术水平。另外值得注意的是，不要期望一遍就能彻底理解所有内容。阅读源码需要反复多次才能达到质变的效果。“洋葱源码阅读法”就是一个很好的例子——初次浏览只是获取整体框架概览，随后几次逐渐深入探究代码本质。每次只需专注于一层即可。

此外我还想分享一个个人心得：动手修改源码。只有当你对所读代码进行了一些改进或变更后，才能真正体会到其中的乐趣。因此在阅读Kafka或其他框架源码时不妨试着做一些实验性调整并通过调试来观察结果变化。相信这将是一段令人享受的过程。

最后一点我想强调的是：**不要害怕**。很多人之所以不敢接触源码主要是出于恐惧心理。一想到那么多行代码就望而却步。但实际上再庞大的系统也是由一行行代码组成的。我一直遵循一句话：“你敢写我就敢读！”现在我想把它送给你，在你觉得想要放弃时拿出来激励自己。

这一季课程到这里就结束了。今天没有太多华丽辞藻，只有一些朴实无华的建议。总而言之，我想说的是：源码学习之路才刚刚开始。这就像一场漫长的登山之旅，半山腰总是拥挤不堪，让我们山顶相见吧！

为了更好地了解大家对这门课的看法，我还准备了一份结课问卷。希望大家能花1-2分钟时间填写，期待听到你们的声音。
![](https://static001.geekbang.org/resource/image/13/1a/13edef1ac4708f68b31d98cd93c8051a.jpg)
[点击此处填写问卷](https://jinshuju.net/f/a88osf)