for three schemes and compared the false positive and false
negative rates. If the actual size of a reported spreader is
smaller than our threshold, we record a false positive (FP);
otherwise, or when a spreader is not reported, we record a
false negative (FN). We calculate the FP Rate (FPR) and the
FN Rate (FNR) using the reported events. Table III shows
the detection results, where MCSE provides valid estimations
for small spreaders only (i.e., 1K∼10K) with 2 Mb memory,
as shown in Fig. 9(c). Moreover, RRSE outperforms vHLL in
terms of FPR. However, RRSE has 2.1-3.5% of FNR, whereas
vHLL is 0%.
Remark. vHLL achieved 0% of FNR because of its biased
estimation (i.e., overestimation), which can be conﬁrmed by
its high FPR. With vHLL, many benign users will be mis-
classiﬁed as high spreaders, which is unacceptable for many
applications.
F. Query on the Fly: Cost
Next, we discuss the cost incurred by RRSE for providing
fast and more accurate estimation when compared with vHLL
and MCSE. As shown in Table IV, RRSE’s encoding has
the highest cost by requiring two additional memory reads
and writes per packet. Aside from that, all of the three
schemes need two hash computations and a similar amount of
logic/arithmetic operations (O(1)). The additional encoding
cost of RRSE is consumed for recording the global rank
distribution Cm[] on the ﬂy. This, however, allows RRSE to
instantly respond to queries while encoding the network trafﬁc
(i.e., faster decoding). As shown in Table IV, RRSE reads only
s+r registers for decoding, where s is the number of registers
assigned for a queried ﬂow and r is the size of Cm[]. We note
that s usually ranges from 16 to 256 and r = 7, 15 to cover
sufﬁciently large estimation ranges (i.e., s · 2r).
Our experiments use s = 256 and r = 15 to count up
to about 8.39 million distinct destinations for a source IP.
Fig. 15: RRSE-based spreader detection system on P4 switch.
While providing the same counting capacity, vHLL is almost
infeasible to respond to queries on the ﬂy, since it has to read
m registers, which is the entire memory space (e.g., 0.5 Mb ∼
4 Mb), to estimate noise. Unfortunately, the noise changes over
time; thus, vHLL must repeat O(s + m) memory readings and
operations for each query. Also, MCSE’s decoding complexity
requires applying the maximum likelihood estimation, which
makes it infeasible for online decoding.
Remark. The additional memory read and write overheads of
RRSE will suppress its performance in a CPU environment.
However, in Field Programmable Gate Arrays (FPGAs) or
Application-speciﬁc integrated circuit (ASIC) environments,
these overheads can be signiﬁcantly relaxed by fast on-chip
memory access.
V. SPREADER DETECTION FRAMEWORK
We demonstrate the feasibility of RRSE by designing
and implementing a spreader detection framework in a pro-
grammable switch (Toﬁno) [33]. Resource consumption and
packet processing latency in the data plane are given to show
the performance.
Architecture. Fig. 15 depicts the architecture of our spreader
detection framework. As shown, our framework consists of
three data plane components: Packet Receiver (PR), Universal
Register Array (UAR) and Active Tracker (AT). These com-
ponents reside in the data plane of the switch for recording
(encoding) packets and detecting high spreaders. When a
packet arrives, Packet Receiver receives a ﬂow ID from Parser,
and then hash the ﬂow ID with CRC32 function to derive
a rank value and register indexes ( 1 ). Universal Register
Array, which resides in SRAM, is responsible for storing the
rank value at the designated index and always recording a
larger rank value with the register ( 2 ). At the same time,
Active Tracker will store ﬂows that the rank value is larger
than a pre-deﬁned threshold for building a candidate pool
of high spreaders. These ﬂow IDs will be further pulled by
our last component Estimator, which resides in the control
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
340
TABLE V: Normalized resource usage of three data plane
components: the packet receiver (PR), the universal register
array (URA), and the active tracker (AT).
Component
PR
URA
AT
SRAM 0.1% 0.93% 0.41%
0% 2.08% 4.16%
Total
1.46%
6.25%
5.5% 4.16% 2.77% 12.44%
ALU
Hash
Fig. 16: RRSE’s packet processing overhead: a function-wise
breakdown of added latencies based on P4 compiler logs: PR,
URA, and AT. The baseline is the switch implementation with
default routing functions. Our RRSE only adds an insigniﬁcant
overhead as the switch still has a large room for operating other
functions (see Table V).
plane for a precise estimation of the cardinality. To do so,
Estimator retrieves ﬂows’ rank values with their IDs via a P4
run-time API ( 1 ) [34]. Eventually, Estimator performs spread
estimation using the proposed RRSE.
Resource usage. Table V shows the additionally required
resources (i.e., overhead) for operating our RRSE in a switch’s
data plane. As can be seen in the table, 1.45% of SRAM,
6.25% of the Arithmetic Logic Unit (ALU, computation unit),
and 12.44% of hash power are required for our data plane
components. Overall, our framework adds only insigniﬁcant
overheads to the standard data plane functions. Moreover,
it is worth mentioning that our framework does not affect
the switch’s maximum packet processing speed since the
switch still has a large room (e.g., resource and computational
budgets) for other functions. Therefore, we conclude that our
spreader detection framework can detect the high spread at a
line rate [35]–[37].
Latency. We further break down the packet processing process
in the data plane in terms of latency. The latency analysis
is based on P4 compiling logs generated after data plane
function deployment. Through the analysis, we show which
data plane component contributes the most to the total packet
processing latency. Fig. 16 illustrates the accumulated latency
of our framework with a function-wise breakdown. As shown,
URA contributes 58.33% of the latency out of the total latency
contributed by RRSE components, Packet Receiver contributes
31.94%, and Active Tracker contributes 9.72%. The results
indicate that the rank value derivation and register value update
require some computations. However, since the switch still has
plentiful resources remaining, the total latency added by our
spreader detection framework is still in an acceptable range.
the proposed RRSE is
lightweight and feasible for a switch’s data plane, which has a
strong potential to be used as an in-network security function.
To sum up, we conclude that
VI. RELATED WORKS
The cardinality estimation problem is to count the number
of distinct elements in a stream, where scaling up the esti-
mation range without signiﬁcant computational and memory
overheads has been a challenge.
To count the number of distinct elements, a compact data
structure is usually used. Linear Counting [17] uses a bitmap to
store and remove duplicate elements. Each element is hashed,
the corresponding bit is set to one, and the estimation is
ˆn = −b· ln V , where b is the total number of bits and V is the
number of 0’s bits. However, the Linear Counting’s counting
capacity is linear in m. To scale up the counting capacity, a
sampling-based technique is used by MultiresolusionBitmap
[26] to exponentially decrease an encoding probability by the
series 1
8 .... Meanwhile, MultiresolusionBitmap combines
samples with multiple bitmaps to perform cardinality counting.
PCSA [19] has a similar approach but combines the sampling
with registers. However,
the major drawback of the two
schemes is an unstable accuracy. The fundamental issue of
the two schemes is memory efﬁciency, which means they do
not work well when counting massive elements or the memory
is constrained.
2 , 1
4 , 1
To resolve the issue, LogLog [38] and HyperLogLog [11]
compress the memory of each element from r bits to b bits,
where b = log2 r, and r is the number of leading zeros at
the end of a hashed value, called rank. Therefore, the memory
cost for counting n distinct elements is reduced by log2 log2 n
while having the same estimation range of 2r. HyperLogLog
m and needs
is simple yet powerful. Its relative error is 1.04/
O(ε
−2 log log n + log n), where m is the number of registers
and n is the maximum estimation. In practice, HyperLogLog
is shown to be superior to other practical approaches such
as CSE [15], MultiresolusionBitmap [26], or Linear Counting
[17].
√
Driven by the increasing complexity of networks, multi-
tenant cardinality counting has emerged and gained interest.
The state-of-the-art works in this space are 1) vHLL [27],
which is an extension of HLL, and 2) Multiple CSE [16],
which is an extension of CSE [15]. They both use a random
memory sharing technique but at different levels: register and
bit. The major challenge in this domain is to eliminate noise
caused by memory sharing, which motivates our work.
VII. CONCLUSION
In this paper, we proposed a novel noise elimination
technique for the random memory sharing-based multi-tenant
HyperLogLog. Our solution, called RRSE, is superior to the
prior works, supported by theoretical proof and extensive
experiments. Moreover, RRSE provides a reliable estimation
under normal and attack trafﬁc scenarios. To show its fea-
sibility, we implemented RRSE on a programmable switch
and showed a use case of threshold-based spreader detection.
We believe this work opens a new direction in addressing
noise reduction for multi-tenant HyperLogLog and will inspire
further developments in sketch-based designs.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
341
ACKNOWLEDGMENT
This research was supported by the Global Research Lab-
oratory (GRL) Program through the National Research Foun-
dation of Korea (NRF) funded by the Ministry of Science and
ICT (NRF-2016K1A1A2912757), by the National Research
Foundation of Korea (NRF) grant funded by the Korea govern-
ment (MSIT) (NRF-2020R1A2C2009372), and by the Ewha
Womans University Research Grant of 2020 (1-2020-0311-
001-1). DaeHun Nyang is the corresponding author. Thanks to
anonymous reviewers and the shepherd Dr. Eduardo Alchieri
for valuable feedback.
REFERENCES
[1] World
internet
statistics.
[Online]. Available:
https://www.
internetworldstats.com/stats.html
[2] R. Jang, D. Min, S. Moon, D. Mohaisen, and D. Nyang, “Sketchﬂow:
Per-ﬂow systematic sampling using sketch saturation event,” in Proc.
IEEE INFOCOM 2020.
[3] G. Cormode and S. Muthukrishnan, “An improved data stream summary:
the count-min sketch and its applications,” J. Algorithms, vol. 55, no. 1,
pp. 58–75, 2005.
[4] R. Jang, S. Moon, Y. Noh, A. Mohaisen, and D. Nyang, “Instameasure:
Instant per-ﬂow detection using large in-dram working set of active
ﬂows,” in Proc.of IEEE ICDCS 2019.
[5] D. Nyang and D. Shin, “Recyclable counter with conﬁnement for real-
time per-ﬂow measurement,” IEEE/ACM Trans. Netw., vol. 24, no. 5,
pp. 3191–3203, 2016.
[6] X. A. Dimitropoulos, P. Hurley, and A. Kind, “Probabilistic lossy
counting: an efﬁcient algorithm for ﬁnding heavy hitters,” Computer
Communication Review, vol. 38, no. 1, p. 5, 2008.
[7] Y. Lu, A. Montanari, B. Prabhakar, S. Dharmapurikar, and A. Kabbani,
“Counter braids: a novel counter architecture for per-ﬂow measurement,”
in Proc. of ACM SIGMETRICS 2008.
[8] Y. Lu and B. Prabhakar, “Robust counting via counter braids: An
error-resilient network measurement architecture,” in Proc. of IEEE
INFOCOM 2009.
[9] P. Lieven and B. Scheuermann, “High-speed per-ﬂow trafﬁc mea-
surement with probabilistic multiplicity counting,” in Proc. of IEEE
INFOCOM 2010.
[10] C. Estan and G. Varghese, “New directions in trafﬁc measurement and
accounting: Focusing on the elephants, ignoring the mice,” ACM Trans.
Comput. Syst., vol. 21, no. 3, pp. 270–313, 2003.
[11] P. Flajolet, ´Eric Fusy, O. Gandouet, and F. Meunier, “Hyperloglog: The
analysis of a near-optimal cardinality estimation algorithm,” in Proc.
AOFA: The international conference of analysis of algorithms, 2007.
[12] Q. Zhao, J. J. Xu, and A. Kumar, “Detection of super sources and des-
tinations in high-speed networks: Algorithms, analysis and evaluation,”
IEEE J. Sel. Areas Commun., vol. 24, no. 10, pp. 1840–1852, 2006.
[13] Q. Xiao, B. Xiao, and S. Chen, “Differential estimation in dynamic
RFID systems,” in Proc. IEEE INFOCOM 2013.
[14] Q. Xiao, Y. Qiao, Z. Mo, and S. Chen, “Estimating the persistent spreads
in high-speed networks,” in Proc. IEEE ICNP 2014.
[15] M. Yoon, T. Li, S. Chen, and J. Peir, “Fit a spread estimator in small
memory,” in Proc. of IEEE INFOCOM 2009.
[16] M. Yoon, T. Li, S. Chen, and J.-K. Peir, “Fit a compact spread estimator
in small high-speed memory.” IEEE/ACM Trans. Netw., vol. 19, pp.
1253–1264, 2011.
[17] K.-Y. Whang, B. T. Vander-Zanden, and H. M. Taylor, “A linear-time
probabilistic counting algorithm for database applications,” ACM Trans.
Database Syst., vol. 15, no. 2, Jun. 1990.
[18] C. Estan, G. Varghese, and M. E. Fisk, “Bitmap algorithms for counting
active ﬂows on high-speed links,” IEEE/ACM Trans. Netw., vol. 14,
no. 5, pp. 925–937, 2006.
[19] P. Flajolet and G. N. Martin, “Probabilistic counting algorithms for data
base applications,” J. Comput. Syst. Sci., vol. 31, no. 2, p. 182–209, Sep.
1985.
[20] Z. Bar-Yossef, T. S. Jayram, R. Kumar, D. Sivakumar, and L. Trevisan,
“Counting distinct elements in a data stream,” in RANDOM, vol. 2483,
2002, pp. 1–10.
[21] J. Cao, Y. Jin, A. Chen, T. Bu, and Z. Zhang, “Identifying high
cardinality internet hosts,” in Proc. IEEE INFOCOM 2009, 2019.
[22] F. Giroire, “Order statistics and estimating cardinalities of massive data
sets,” Discret. Appl. Math., vol. 157, no. 2, pp. 406–427, 2009.
[23] Q. Zhao, J. Xu, and a. Kumar, “Detection of Super Sources and Desti-
nations in High-Speed Networks: Algorithms, Analysis and Evaluation,”
IEEE Journal on Selected Areas in Communications, vol. 24, pp. 1840–
1852, 2006.
[24] D. M. Kane, J. Nelson, and D. P. Woodruff, “An optimal algorithm
for the distinct elements problem,” in Proc. of ACM SIGMOD-SIGACT-
SIGART Symposium on PODS 2010, J. Paredaens and D. V. Gucht, Eds.
[25] S. Venkataraman, D. X. Song, P. B. Gibbons, and A. Blum, “New
streaming algorithms for fast detection of superspreaders,” in Proc.
NDSS 2005.
[26] C. Estan, G. Varghese, and M. Fisk, “Bitmap algorithms for counting
active ﬂows on high speed links,” in Proc. ACM IMC 2003.
[27] Q. Xiao, S. Chen, M. Chen, and Y. Ling, “Hyper-compact virtual esti-
mators for big network data based on register sharing.” in SIGMETRICS.
ACM, 2015, pp. 417–428.
[28] T. Li, S. Chen, and Y. Ling, “Fast and compact per-ﬂow trafﬁc measure-
ment through randomized counter sharing,” in Proc. IEEE INFOCOM
2011.
[29] T. Li, S. Chen, W. Luo, M. Zhang, and Y. Qiao, “Spreader classiﬁcation
based on optimal dynamic bit sharing,” IEEE/ACM Trans. Netw., vol. 21,
no. 3, pp. 817–830, 2013.
[30] M. Honarkhah and A. Talebzadeh. Hyperloglog in presto. [Online].
Available: https://engineering.fb.com/data-infrastructure/hyperloglog/
[31] C. Shannon and D. Moore. The caida dataset on the witty worm - march
19-24, 2004,. [Online]. Available: http://www.caida.org/passive/witty/
[32] G. Maci´a-Fern´andez, J. Camacho, R. Mag´an-Carri´on, P. Garc´ıa-
Teodoro, and R. Ther´on, “Ugr’16: A new dataset for the evaluation
of cyclostationarity-based network idss,” Comput. Secur., vol. 73, pp.
411–424, 2018.
[33] Toﬁno switch. [Online]. Available: https://www.barefootnetworks.com/
products/brief-toﬁno/
[34] O.
Foundation,
N.
Available:
p4-runtime-putting-the-control-plane-in-charge-of-the-forwarding-plane/
[Online].
https://opennetworking.org/news-and-events/blog/
runtime
api.”
“P4
[35] R. Miao, H. Zeng, C. Kim, J. Lee, and M. Yu, “Silkroad: Making stateful
layer-4 load balancing fast and cheap using switching asics,” in Proc.
ACM SIGCOMM 2017.
[36] T. Yang, J. Jiang, P. Liu, Q. Huang, J. Gong, Y. Zhou, R. Miao,
X. Li, and S. Uhlig, “Elastic sketch: Adaptive and fast network-wide
measurements,” in Proc. ACM SIGCOMM 2018.
[37] X. Jin, X. Li, H. Zhang, N. Foster, J. Lee, R. Soul´e, C. Kim, and I. Stoica,
“Netchain: Scale-free sub-rtt coordination,” in Proc. USENIX NSDI 18.
[38] M. Durand and P. Flajolet, “Loglog counting of large cardinalities
(extended abstract),” in Proc. of ESA 2003, ser. Lecture Notes in
Computer Science, G. D. Battista and U. Zwick, Eds.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
342