                wrap_remain_pkt_len,
                &v38[*((_QWORD *)v21 + 1)],         // *((_QWORD *)v21 + 1): pkt_item_offset
                *((_QWORD *)v21 + 2),               // *((_QWORD *)v21 + 2): pkt_item_max_len
                v31,
                v36);
        // ...
地址`off_7FFFF7DD7FC0`实际指向的内容如下。其中，函数`FHOSTPacketReadString()`会使用传入的第`7`个参数`v36`。另外，`FHOSTPacketReadArray()`内部直接调用`FHOSTPacketReadString()`，因此这两个函数是等价的。
    LOAD:00007FFFF7DD7FC0 off_7FFFF7DD7FC0 dq offset grgfieldParsers
    LOAD:00007FFFF7DD9340 grgfieldParsers dq 0                    ; DATA XREF: LOAD:off_7FFFF7DD7FC0↑o
    LOAD:00007FFFF7DD9348                 dq offset FHOSTPacketReadString
    LOAD:00007FFFF7DD9350                 dq offset FHOSTPacketWriteString
    LOAD:00007FFFF7DD9358                 dq 1
    LOAD:00007FFFF7DD9360                 dq offset FHOSTPacketReadInteger
    LOAD:00007FFFF7DD9368                 dq offset FHOSTPacketWriteInteger
    LOAD:00007FFFF7DD9370                 dq ?
    LOAD:00007FFFF7DD9378                 dq offset FHOSTPacketReadArray
    LOAD:00007FFFF7DD9380                 dq offset FHOSTPacketWriteArray
函数`FHOSTPacketReadString()`的部分代码如下。正常情况下，程序流程会到达`(7)`处，读取数据包中对应`data_length`字段，如果其值小于剩余数据包的总长度，程序流程会到达`(8)`。如果`(8)`处的条件成立，在`(9)`处会调用`snprintf()`将对应的`data`拷贝到内部缓冲区的指定偏移处，其中`snprintf()`的第`1`个参数为`(char
*)(a4 + a7 * pkt_max_length)`，用到了传进来的`v36/a7`参数。
    __int64 FHOSTPacketReadString(__int64 a1, _BYTE *a2, signed int remain_pkt_length, __int64 a4, unsigned __int64 pkt_max_length, __int64 a6, unsigned int a7)
    {
      // ...
      if ( remain_pkt_length > 0 )
      {
        data_length = (unsigned __int8)*a2;    // (7) get data_length
        v8 = 0;
        if ( remain_pkt_length > (int)data_length )
        {
          LOBYTE(v8) = 1;
          if ( *a2 )
          {
            LOBYTE(v8) = 0;
            if ( data_length  `DSM 6.1.7-15284`版本中的`findhostd`文件似乎经过混淆了，无法直接采用`IDA
> Pro`等工具进行分析，可以在`gdb`中`dump`出`findhostd`进程，然后对其进行分析。另外，在较新的版本如`VirtualDSM
> 6.2.4-25556`中，对应的`findhostd`文件未被混淆，可直接分析。
    // in findhostd
    __int64 handler_recv_data(__int64 a1, __int64 a2, __int64 a3)
    {
      // ...
      int v124[3042]; // [rsp+1970h] [rbp-2F88h] BYREF
      // ...
      memset(v124, 0LL, 0x2F50LL);  // local buffer on stack
      if ( (int)FHOSTPacketRead((__int64)v113, a2, (unsigned int)a1, (__int64)v124) <= 0 )
      {
        // ...
另外，由于`Synology Assistant`客户端对协议数据包的处理过程与`findhostd`类似，因此其早期的版本也会受该漏洞影响。
### 漏洞利用
查看`findhostd`启用的缓解机制，如下，同时设备上的`ASLR`等级为`2`。其中，显示`"NX
disabled"`，不知道是否和程序被混淆过有关。在设备上查看进程的内存地址空间映射，确实看到`[stack]`部分为`rwxp`。考虑到通用性，这里还是采用`ret2libc`的思路来获取设备的`root
shell`。
    $ checksec.exe --file ./findhostd
        Arch:     amd64-64-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x400000)
        RWX:      Has RWX segments
由于越界写发生在调用`snprintf()`时，故存在`'\x00'`截断的问题。通过调试发现，利用越界写覆盖栈上的返回地址后，在返回地址的不远处存在发送的原始数据包内容，因此可借助`stack
pivot`将栈劫持到指向可控内容的地方，从而继续进行`rop`。
在实际进行利用的过程中，本来是想将`cmd`直接放在数据包中发送，然后定位到其在栈上的地址，再将其保存到`rdi`寄存器中，但由于未找到合适的`gadgets`，故采用将`cmd`写入`findhostd`进程的某个固定地址处的方式替代。同时，发现区域`0x00411000-0x00610000`不可写(正常应该包含`.bss`区域?)，而`.got.plt`区域可写，故将`cmd`写到了该区域。
    root@NAS_6_1:/# cat /proc/`pidof findhostd`/maps
    00400000-00411000 r-xp 00000000 00:00 0
    00411000-00610000 ---p 00000000 00:00 0                                 # no writable permission 
    00610000-00611000 r-xp 00000000 00:00 0
    00611000-00637000 rwxp 00000000 00:00 0                       [heap]
    00800000-00801000 rwxp 00000000 00:00 0
    ...
    7ffffffde000-7ffffffff000 rwxp 00000000 00:00 0               [stack]   # executable stack?
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0       [vsyscall]
最终效果如下。
### One More Thing
获取到设备的`root
shell`后，相当于获取了设备的控制权，比如可以查看用户共享文件夹中的文件等。但是如何登录设备的`Web`管理界面呢？这里给出一种简单的方案：利用`synouser`和`synogroup`命令增加`1`个管理员用户，然后使用新增的用户进行登录即可。当然，`synouser`命令支持直接更改现有用户的密码，且无需原密码，但改了之后正常用户就不知道其密码了
:(
    # 增加一个用户名为cq, 密码为cq674350529的用户
    $ synouser --add cq cq674350529 "test admin" 0 "" 31
    # 查看当前管理员组中的现有用户
    $ synogroup --get administrators
    # 将新增加的用户cq添加到管理员组中，xxx为当前管理员组中的现有用户
    $ synogroup --member administrators xxx xxx cq
    # 之后, 便可利用该账户登录设备的Web管理界面
    # 删除新增加的用户
    $ synouser --del cq
### 小结
本文基于群晖`DSM 6.1.7-15284`版本，通过补丁比对的方式对群晖安全公告`Synology-SA-18:64`中提及的漏洞进行了定位和分析。该漏洞与`findhostd`服务相关，由于在处理接收的数据包时缺乏适当的校验，通过发送伪造的数据包，可触发`out-of-bounds
write`，利用该操作可覆盖栈上的返回地址，从而劫持程序控制流，达到任意代码执行的目的。通常情况下，`findhostd`服务监听的端口不会直接暴露到外网，故该漏洞应该是在局域网内才能触发。
### 相关链接
  * [Synology Security Advisory: Synology-SA-18:64 DSM](https://www.synology.com/en-global/security/advisory/Synology_SA_18_64)
  * [群晖镜像仓库](https://archive.synology.com/download/)
* * *