                        if (this.verboseDebug) {
                            this.getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), var25);
                        }
                        throw new DataImportHandlerException(500, var25);
                    } finally {
                        if (this.verboseDebug) {
                            this.getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), (Object)null);
                            if (epw.getEntity().isDocRoot()) {
                                this.getDebugLogger().log(DIHLogLevels.END_DOC, (String)null, (Object)null);
                            }
                        }
                    }
                }
            } finally {
                if (this.verboseDebug) {
                    this.getDebugLogger().log(DIHLogLevels.END_ENTITY, (String)null, (Object)null);
                }
            }
        }
可见方法体中，有一行语句是`Map arow =
epw.nextRow();`，功能是“读取EntityProcessorWrapper的每一个元素“，该方法返回的是一个Map对象。
对该语句下断点，进入EntityProcessorWrapper类中的nextRow方法：
> EntityProcessorWrapper类中的nextRow方法的方法体  
>
> 
可见，EntityProcessorWrapper类中的nextRow方法体中，调用了EntityProcessorWrapper类中的applyTransformer()方法。
继续跟进，EntityProcessorWrapper类中的applyTransformer()方法体：  
功能  
第1步.调用`loadTransformers`方法，作用是“加载转换器“  
第2步.调用对应的Transformer的transformRow方法
> applyTransformer()方法体  
>
> 
applyTransformer()方法体，代码如下
    protected Map applyTransformer(Map row) {
            if (row == null) {
                return null;
            } else {
                if (this.transformers == null) {
                    this.loadTransformers();
                }
                if (this.transformers == Collections.EMPTY_LIST) {
                    return row;
                } else {
                    Map transformedRow = row;
                    List> rows = null;
                    boolean stopTransform = this.checkStopTransform(row);
                    VariableResolver resolver = this.context.getVariableResolver();
                    Iterator var6 = this.transformers.iterator();
                    while(var6.hasNext()) {
                        Transformer t = (Transformer)var6.next();
                        if (stopTransform) {
                            break;
                        }
                        try {
                            if (rows == null) {
                                resolver.addNamespace(this.entityName, transformedRow);
                                Object o = t.transformRow(transformedRow, this.context);
                                if (o == null) {
                                    return null;
                                }
                                if (o instanceof Map) {
                                    Map oMap = (Map)o;
                                    stopTransform = this.checkStopTransform(oMap);
                                    transformedRow = (Map)o;
                                } else if (o instanceof List) {
                                    rows = (List)o;
                                } else {
                                    log.error("Transformer must return Map or a List>");
                                }
                            } else {
                                List> tmpRows = new ArrayList();
                                Iterator var9 = ((List)rows).iterator();
                                while(var9.hasNext()) {
                                    Map map = (Map)var9.next();
                                    resolver.addNamespace(this.entityName, map);
                                    Object o = t.transformRow(map, this.context);
                                    if (o != null) {
                                        if (o instanceof Map) {
                                            Map oMap = (Map)o;
                                            stopTransform = this.checkStopTransform(oMap);
                                            tmpRows.add((Map)o);
                                        } else if (o instanceof List) {
                                            tmpRows.addAll((List)o);
                                        } else {
                                            log.error("Transformer must return Map or a List>");
                                        }
                                    }
                                }
                                rows = tmpRows;
                            }
                        } catch (Exception var13) {
                            log.warn("transformer threw error", var13);
                            if ("abort".equals(this.onError)) {
                                DataImportHandlerException.wrapAndThrow(500, var13);
                            } else if ("skip".equals(this.onError)) {
                                DataImportHandlerException.wrapAndThrow(300, var13);
                            }
                        }
                    }
                    if (rows == null) {
                        return transformedRow;
                    } else {
                        this.rowcache = (List)rows;
                        return this.getFromRowCache();
                    }
                }
            }
        }
第1步.  
调用loadTransformers()方法。  
查看loadTransformers()方法体，可见它的作用是“加载转换器“：  
即如果`trans`以`script:`开头，则new一个`ScriptTransformer`对象。
> loadTransformers()方法的方法体  
>
> 
loadTransformers()方法体，代码如下
    void loadTransformers() {
            String transClasses = this.context.getEntityAttribute("transformer");
            if (transClasses == null) {
                this.transformers = Collections.EMPTY_LIST;
            } else {
                String[] transArr = transClasses.split(",");
                this.transformers = new ArrayList() {
                    public boolean add(Transformer transformer) {
                        if (EntityProcessorWrapper.this.docBuilder != null && EntityProcessorWrapper.this.docBuilder.verboseDebug) {
                            transformer = EntityProcessorWrapper.this.docBuilder.getDebugLogger().wrapTransformer(transformer);
                        }
                        return super.add(transformer);
                    }
                };
                String[] var3 = transArr;
                int var4 = transArr.length;
                for(int var5 = 0; var5  m)method";
                            log.error(msg);
                            DataImportHandlerException.wrapAndThrow(500, var10, msg);
                        } catch (Exception var11) {
                            log.error("Unable to load Transformer: " + aTransArr, var11);
                            DataImportHandlerException.wrapAndThrow(500, var11, "Unable to load Transformer: " + trans);
                        }
                    }
                }
            }
        }
第2步.调用对应的Transformer的transformRow方法
transformRow方法体的执行步骤：  
第(1)步.初始化脚本引擎  
第(2)步.使用`invoke`执行脚本
> transformRow方法的方法体  
>
> 
transformRow方法体，代码如下
    public Object transformRow(Map row, Context context) {
            try {
                if (this.engine == null) {
                    this.initEngine(context);
                }
                return this.engine == null ? row : this.engine.invokeFunction(this.functionName, row, context);
            } catch (DataImportHandlerException var4) {
                throw var4;
            } catch (Exception var5) {
                DataImportHandlerException.wrapAndThrow(500, var5, "Error invoking script for entity " + context.getEntityAttribute("name"));
                return null;
            }
        }
第(1)步:  
transformRow方法体中的语句`this.initEngine(context);`调用了`initEngine`方法(该方法只做初始化，并未执行JavaScript脚本)
调试过程中，可查看到`initEngine`方法中的名为`scriptText`的String类型的变量，值为：
    function poc(){ java.lang.Runtime.getRuntime().exec("/Applications/Calculator.app/Contents/MacOS/Calculator");
              }
第(2)步:  
调用Nashorn脚本引擎的`invokeFunction`方法，在Java环境中执行JavaScript脚本：
transformRow方法体中的语句`this.engine.invokeFunction(this.functionName, row,
context);`
附：Nashorn脚本引擎的`invokeFunction`方法定义：
    public Object invokeFunction(String name, Object... args) throws ScriptException, NoSuchMethodException {
            return this.invokeImpl((Object)null, name, args);
        }
后来发现Solr中的Nashorn脚本引擎的`invokeFunction`方法（这个能执行JavaScript代码的“值得关注”的方法），其实只在`ScriptTransformer`类中被调用。
### 漏洞检测
**第1种检测方式**
Exploit1使用数据源的类型为`URLDataSource`
优点：结果回显 支持对Solr低版本的检测  
缺点：需要出网
具体参考
* * *
**第2种检测方式**
Exploit2使用的数据源类型为 `ContentStreamDataSource`
优点:结果回显 无需出网
缺点:对低版本无法检测 - 因为通过POST请求修改`configoverlay.json`文件中的配置会失败
具体参考
* * *
**第3种检测方式**
缺点：需要出网 且 JNDI注入的payload受目标主机JDK版本影响（不够通用）
这种利用方式，使用数据源的类型为 "JdbcDataSource" ，并且driver 为"com.sun.rowset.JdbcRowSetImpl"
PoC中的DataConfig中，指定了Jdbc数据源(JdbcDataSource)的这些属性：  
driver属性 (必填) - The jdbc driver classname  
url属性 (必填) - The jdbc connection url (如果用到了jndiName属性则不必填url属性)  
jndiName属性 可选项 - 预配置数据源的JNDI名称(JNDI name of the preconfigured datasource)
其中jndiName属性属性的值，指定了payload的位置，待执行代码在`rmi:`地址中。
(发送HTTP请求前还需进行URL编码)
通过这种方式，我们使用基于`com.sun.rowset.JdbcRowSetImpl`类的已知gadget chain即可触发反序列化攻击。
需要为'jndiName'属性和'autoCommit'属性调用两个setter，并引导我们进行易受攻击的'InitialContext.lookup'操作，因此我们可以将它作为普通的“JNDI解析攻击“(JNDI
resolution attack)来利用。
JNDI攻击可参阅文章"Exploiting JNDI Injections"
Solr基于Jetty，因此Tomcat技巧在这里不适用，但你可以依赖于远程类加载(remote classloading)，它最近为LDAP已经做了修复。
### 总结
Apache Solr的DataImportHandler模块，因为支持使用web请求来指定配置信息"DIH配置"
，攻击者可构造HTTP请求指定dataConfig参数的值(dataConfig内容)，dataConfig内容完全可控(多种利用方式)，后端处理的过程中，可导致命令执行。
使用前两种检测办法，可以更准确地检测该漏洞。