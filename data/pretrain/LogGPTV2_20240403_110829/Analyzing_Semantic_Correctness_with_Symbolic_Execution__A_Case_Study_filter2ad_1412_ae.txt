00:00:06
00:00:00
Total Path ‡
(Accepting)
1476 (6)
21 (21)
21 (1)
3563 (1)
42 (1)
6 (1)
3957 (1)
26 (1)
6 (1)
1260 (1)
23 (1)
7 (1)
570 (1)
22 (1)
4 (1)
4008 (1)
1151 (1)
1802 (1)
2262 (3)
805 (3)
7284 (1)
4554 (1)
202 (1)
939 (2)
4574 (21)
202 (61)
350 (7)
51276 (1)
26 (1)
38 (1)
3768 (1)
22 (1)
2 (1)
4008 (1)
1148 (1)
1673 (1)
378 (1)
26 (1)
6 (1)
3889 (1)
42 (1)
6 (1)
2262 (3)
15747 (3)
216 (6)
14316 (1)
26 (1)
6 (1)
† Execution Time measured on a commodity laptop with an Intel i7-3740QM CPU
and 32GB DDR3 RAM running Ubuntu 16.04.
‡ Shaded cells indicate no discrepancies were found during cross-validation.
* Conﬁgured to use their own internal implementations of PKCS#1 v1.5.
We take the construction-based approach as the golden stan-
dard. For each of the test harnesses, while the occurrence of
multiple accepting paths signiﬁes problems, it is worth noting
that just because an implementation gave only one accepting
path does not mean that the implemented veriﬁcation is robust
and correct. In fact, as we show later, some lone accepting
paths can still be overly permissive. The summary of results
can be found in Table IV.
Cross-validation. For performing cross-validation, we use
GnuTLS 3.5.12 as our anchor, as it seems to be using a robust
construction-based signature veriﬁcation, and it gave the small-
est number of paths with TH1. We ran the cross-validation on a
commodity laptop with at most 8 query instances in parallel at
any time. For each implementation, cross-validating it against
the anchor for a particular test harness typically ﬁnishes in
the scale of minutes. In general, the exact time needed to
solve such queries depends on the size and complexity of the
constraints, but in this particular context, we have observed
that the overall performance is around 1200 queries per every
10 seconds on our commodity laptop.
In the rest of this section, when we show code snippets,
block comments with a single star are from the original source
code, and those with double stars are our annotations.
1) Openswan 2.6.50: Openswan is a popular open source
IPSec implementation, currently maintained by Xelerance Cor-
poration. Depending on the target platform, Openswan can be
conﬁgured to use NSS, or its own implementation based on
GMP, for managing and processing public-key cryptography.
We are particularly interested in testing the latter one.
The veriﬁcation of PKCS#1 v1.5 RSA signatures in
Openswan employs a hybrid approach. Given an O, everything
before AS is processed by a parser, and then AS is checked
against some known DER-encoded bytes and the expected
H(mv), which explains why TH2 and TH3 both found only
a small number of paths, similar to the other hybrid imple-
mentations like wolfSSL and BoringSSL. Those paths also
successfully cross-validated against the anchor.
Interestingly, despite TH1 yielding only 1 accepting path,
Openswan turns out to have an exploitable vulnerability in its
signature veriﬁcation logic.
Ignoring padding bytes (CVE-2018-15836): As shown
in Snippet 1, during veriﬁcation, the parser calculates and
enforces an expected length of padding. However, while the
initial 0x00, BT, and the end of padding 0x00 are veriﬁed,
the actual padding is simply skipped over by the parser. Since
the value of each padding byte is not being checked at all, for a
signature veriﬁcation to succeed, they can take arbitrarily any
values. As we will explain later in Section VI-1, this simple
but severe oversight can be exploited for a Bleichenbacher-
style signature forgery.
Snippet 1. Padding Bytes skipped in Openswan 2.6.50
/* check signature contents */
/* verify padding (not including any DER digest info! */
padlen = sig_len - 3 - hash_len;
... ...
/* skip padding */
if(s[0] != 0x00 || s[1] != 0x01 || s[padlen+2] != 0x00)
{ return "3""SIG padding does not check out"; }
s += padlen + 3;
2) strongSwan 5.6.3: strongSwan is another popular open
source IPSec implementation. Similar to Openswan, when
it comes to public-key cryptography, strongSwan offers the
relying on other cryptographic libraries (e.g.,
choice of
OpenSSL and libgcrypt), or using its own internal implementa-
tion, which happens to be also based on GMP. We are focused
on testing the latter one. To our surprise, the strongSwan
internal implementation of PKCS#1 v1.5 signature veriﬁcation
contains several weaknesses, many of which could be exploited
for signature forgery.
Not checking algorithm parameter (CVE-2018-16152):
TH1 revealed that the strongSwan implementation does not
reject O with extra garbage bytes hidden in the algorithm
8
parameter, a classical ﬂaw previously also found in other
libraries [13], [25]. As such, a practical low-exponent signature
forgery exploiting those unchecked bytes is possible [27].
Accepting trailing bytes after OID (CVE-2018-16151):
TH2 revealed another exploitable leniency exerted by the
parser used by strongSwan during its signature veriﬁcation.
The asn1_known_oid() function is used to match a series
of parsed OID encoded bytes against known OIDs, but the
matching logic is implemented in a way that as soon as a
known OID is found to match the preﬁx of the parsed bytes,
it considers the match a success and does not care whether
there are remaining bytes in the parsed OID left unconsumed.
One can hence hide extra bytes after a correctly encoded OID,
and as we will explain in Section VI-3, this can be exploited
for a low-exponent signature forgery.
Accepting less
than 8 bytes of padding:
In fact,
strongSwan has another classical ﬂaw. The PKCS#1 v1.5
standard requires the number of padding bytes to be at least
8 [RFC2313, RFC2437]. Unfortunately, during our initial
testing with TH1, we quickly realized that strongSwan does
not check whether PS has a minimum length of 8, a ﬂaw
previously also found in other implementations [24]. Since
PS is terminated with 0x00, during symbolic execution, our
initial TH1 automatically generated test cases where some
early byte of PS is given the value of 0x00, and hence the
subsequent symbolic bytes would be considered to be part
of AS. And because strongSwan attempts to parse AS using
an ASN.1 parser, this resulted in many paths enumerating
different possible ASN.1 types with symbolic lengths. After
ﬁnding this ﬂaw, we have added additional constraints to TH1
to guide the symbolic execution into not putting 0x00 in PS,
which in the end resulted in a reasonable number of paths.
Lax ASN.1 length checks: Additionally, the weaknesses
regarding algorithm parameter and algorithm OID also led
to lenient handling of their corresponding length variables, u
and y. This is the reason why TH3 found several accepting
paths, as the parser used during veriﬁcation enumerated various
combinations of values for u and y that it considers acceptable.
3) axTLS 2.1.3: axTLS is a very small footprint TLS
library designed for resource-constrained platforms, which has
been deployed in various system on chip (SoC) software
stacks, e.g., in Arduino for ESP82662, the Light Weight IP
stack (LWIP)3 and MicroPython4 for various microcontrollers.
Unfortunately, the signature veriﬁcation in axTLS is some
of the laxest among all the recent implementations that we
have tested. Its code is aimed primarily at traversing a pointer
to the location of the hash value, without enforcing rigid
sanity checks on the way. The various weaknesses in its
implementation can lead to multiple possible exploits.
Accepting trailing bytes (CVE-2018-16150): We ﬁrst
found that the axTLS implementation accepts O that contains
trailing bytes after the hash value, in order words, it does
not enforce the requirement on the length of padding bytes,
a classical ﬂaw previously found in other implementations [5],
[20], [27]. This is also why for both TH1 and TH2 there are
multiple accepting paths.
2https://github.com/esp8266/Arduino/tree/master/tools/sdk/lib
3https://github.com/attachix/lwirax
4https://github.com/micropython/micropython/tree/master/lib
Ignoring preﬁx bytes: On top of that, we found that
this implementation also ignores the preﬁx bytes, including
both BT and P B, which also contributes to the various
incorrect accepting paths yielded by TH1 and TH2. As shown
in Snippet 2, this effectively means that the ﬁrst 10 bytes of O
can take arbitrarily any values. Such a logic deviates from what
the standard prescribes [RFC2437], and as we will explain
later in Section VI-8, an over-permissiveness like this can be
exploited to forge signatures when e is small.
Snippet 2. Block Type and Padding skipped in axTLS 2.1.3
i = 10;/* start at the first possible non-padded byte */
while (block[i++] && i  0) {... ...}
Ignoring ASN.1 metadata (CVE-2018-16253): Moreover,
we found that axTLS does not check the algorithm OID and
parameter. In fact, through root-cause analysis, we found that
this could be attributed to the parsing code shown in Snippet 3
below, which skips the entire AlgorithmIdentifier part
of AS (achieved by asn1_skip_obj()), until it reaches
the hash value (type OCTET STRING), making this even laxer
than the ﬂaws of not checking algorithm parameter previously
found in other libraries [13], [27].
Snippet 3. Majority of ASN.1 metadata skipped in axTLS 2.1.3
if (asn1_next_obj(asn1_sig, &offset, ASN1_SEQUENCE) < 0
|| asn1_skip_obj(asn1_sig, &offset, ASN1_SEQUENCE))
goto end_get_sig;
if (asn1_sig[offset++] != ASN1_OCTET_STRING)
goto end_get_sig;
*len = get_asn1_length(asn1_sig, &offset);
ptr = &asn1_sig[offset];
/* all ok */
end_get_sig:
return ptr;
Trusting declared lengths (CVE-2018-16149): Further-
more, using our approach, we have automatically found several
test cases that could trigger memory errors at various locations
of the axTLS source code. This is because given the various
length variables in the ASN.1 structure that are potentially
under adversarial control, the parser of axTLS, partly shown in
Snippet 3, is too trusting in the sense that it uses the declared
values directly without sanity checks, so one can put some
absurd values in those lengths to try to trick the implementation
into reading from illegal memory addresses and potentially
crash the program. This is an example of CWE-130 (Improper
Handling of Length Parameter).
This is also part of the reason why for TH1, it took more
than 1 hour to ﬁnish the execution, as KLEE discovered many
test cases that can trick the parsing code into reading z, the
ASN.1 length of H(ms), from some symbolic trailing bytes,
which led to several invocations of malloc() with huge sizes
and hence the long execution time.
4) MatrixSSL 3.9.1: MatrixSSL requires |n| to be a multi-
ple of 512, so in our test harnesses, we have adjusted the size
of the test buffer and padding accordingly. Interestingly, we
have observed that MatrixSSL contains 2 somewhat different
implementations of PKCS#1 v1.5 signature veriﬁcation, one
for verifying signatures on CRLs, and the other for certiﬁcates.
Both are using a parsing-based veriﬁcation approach. Why the
9
two cases do not share the same signature veriﬁcation function
is not clear to us. Nevertheless, we have tested both of them,
and to our surprise, one veriﬁcation is laxer than the other, but
both exhibit some forms of weaknesses.
Lax ASN.1 length checks: We ﬁrst note that for both
signature veriﬁcation functions, their treatments of some of
the length variables in AS are overly permissive. Quite the
opposite of axTLS, we found that MatrixSSL does not fully
trust the various ASN.1 lengths, and imposes sanity checks on
the length variables. Those, however, are still not strict enough.
For the certiﬁcate signature veriﬁcation, the ﬁrst 2 ASN.1
lengths variables, w, and x (lengths of
the two ASN.1
SEQUENCE in AS), are allowed ranges of values in the veri-
ﬁcation. For w, the only checks performed on it are whether it
is in the long form, and whether it is longer than the remaining
buffer containing the rest of O. Similarly, there exist some san-
ity checks on x but they are nowhere near an exact match war-
ranted by a construction-based approach. The 2 accepting paths
yielded by TH3 are due to a decision being made on whether
x matches exactly the length of the remaining SEQUENCE
(OID and parameters) that had been consumed, which indicates
whether there are extra bytes for algorithm parameters or not.
However, this check is done with a macro psAssert(),
which terminates only if HALT_ON_PS_ERROR is deﬁned in
the conﬁguration, a ﬂag that is considered to be a debugging
option [23], not enabled by default and not recommended for
production builds, meaning that many possible values of x,
even if they failed the assertion, would still be accepted. When
the length of the encoded OID is correct (i.e., 5 for SHA-1),
the length of algorithm parameters, y, is not checked at all.
For the CRL signature veriﬁcation function, the treatments
of length variables w, x, and y are also overly permissive,
similar to what is done in certiﬁcate signature veriﬁcation. On
top of that, the checks on z the declared size of H(ms) in AS
is also overly permissive, similar to those on w.
Comparing to a construction-based approach, these imple-
mentations are overly permissive and the weaknesses discussed
allow some bits in O to take arbitrary any values, which means
the veriﬁcation is not as robust as it ideally should be.
Mishandling Algorithm OID: We found that for the CRL
signature veriﬁcation, there exists another subtle implementa-
tion weakness in how it handles the OID of hash algorithms.
As shown in the following snippet, upon ﬁnishing parsing
the algorithm OID, the veriﬁcation code would see whether the
length of hash output given by the parsed algorithm matches
what the caller of the veriﬁcation function expects. However,
since this is again done by the psAssert() macro, which
as discussed before, does not end the execution with an error
code even if the assertion condition fails, and the execution
would just fall through. This explains the numerous accepting
paths found by TH2 and TH3.
Snippet 4. Checking Signature Hash Algorithm in MatrixSSL (CRL)
/** outlen := length of H(m) provided by caller,
oi is the result of OID parsing **/
if (oi == OID_SHA256_ALG)
psAssert(outlen == SHA256_HASH_SIZE);
The implications of this ﬂaw is that for the algorithm OID
bytes (the length of which is subject to the checks discussed
before), they can be arbitrarily any values, since in the end,
it is the expected length of H(m) provided by the caller
of the veriﬁcation function that dictates how the rest of the
parsing would be performed. Hence the veriﬁcation is overly
permissive and one can get at most 9 arbitrary bytes in the
OID part of O this way (e.g., with H() being SHA-256).
Besides, even if psAssert() would actually terminate
with errors, the above implementation is still not ideal, as the
assertion conditions are done based on the length of H(m), not
the expected algorithm. We note that the hash size and length
of OID are not unique across hash algorithms. Since there are
pairs of hash algorithms (e.g., MD5 and MD2; SHA-256 and
SHA3-256) such that (1) the length of their OIDs are equal,
and (2) the length of their hash outputs are equal, the parser
would consider algorithms in each pair to be equivalent, which
can still lead to an overly permissive veriﬁcation. Ideally, this
should be done instead by matching the parsed OID against a
caller provided expected OID.
5) GnuTLS 3.5.12: Based on our testing and root-cause
analysis, GnuTLS is now using a construction-based approach
in its PKCS#1 v1.5 signature veriﬁcation code, which is
a considerable improvement to some of its own vulnerable
versions from earlier [25], [27]. This is also reﬂected in the
small number of paths yielded by our test harnesses, even less
than those that adopt a hybrid approach. Consequently, we
choose this as the anchor for cross-validation.
6) Dropbear SSH 2017.75: Dropbear implements the SSH
protocol, and uses libtomcrypt for most of the underlying
cryptographic algorithms like the various SHA functions and
AES. Interestingly, instead of relying on libtomcrypt’s RSA
code, for reasons unbeknownst
to us, Dropbear SSH has