    See 'docker run –-help'.
    ```
8.  Check for the logs of the Docker daemon for any plugin-related lines:
    ```
    journalctl -u docker | grep plugin | grep "OPA policy decision"
    ```
    注意
    `journalctl`是显示`systemd`进程日志的命令行工具。`systemd`进程以二进制格式存储日志。`journalctl`需要读取日志文本。
    下面的输出显示了在*第 7 步*和*第 8 步*中测试的动作通过了带有`"Returning OPA policy decision: true"`和`"Returning OPA policy decision: false"`行的授权插件。它显示我们的插件允许第一个动作，拒绝第二个动作:
    ![Figure 15.4: Plugin logs  ](img/B15021_15_04.jpg)
    图 15.4:插件日志
9.  通过从`/etc/docker/daemon.json`中移除`authorization-plugins`部分来停止使用插件，并重新加载 Docker 守护程序，类似于在*步骤 6* :
    ```
    cat > /etc/docker/daemon.json << EOF
    {}
    EOF
    cat /etc/docker/daemon.json
    sudo kill -HUP $(pidof dockerd)
    ```
    中所做的操作
10.  Disable and remove the plugin with the following commands:
    ```
    docker plugin disable opa-docker-authz:readonly 
    docker plugin rm opa-docker-authz:readonly  
    ```
    这些命令通过返回插件的名称来禁用和删除 Docker 中的插件。
在本练习中，您已经在 Docker 中配置并安装了一个授权插件。在下一节中，您将在 Docker 中了解更多关于网络插件的信息。
# 网络插件
在 Docker 网络插件的帮助下，Docker 支持多种网络技术。虽然它支持容器到容器和主机到容器的网络，具有完整的功能，插件使我们能够将网络扩展到其他技术。网络插件将远程驱动程序实现为不同网络拓扑的一部分，例如虚拟可扩展局域网(T0)和媒体访问控制虚拟局域网(T1)。您可以使用 Docker 插件命令安装和启用网络插件。此外，您需要用`--driver`标志指定网络驱动程序的名称。例如，如果您已经安装了启用的`my-new-network-technology`驱动程序，并且希望您的新网络成为其中的一部分，您需要设置一个`driver`标志:
```
docker network create --driver my-new-network-technology mynet
```
该命令创建一个名为`mynet`的网络，`my-new-network-technology`插件管理所有网络操作。
社区和第三方公司开发网络插件。然而，目前 Docker Hub 中只有两个经过认证的网络插件——Weave Net 和 Infoblox IPAM 插件:
![Figure 15.5: Networking plugins in Docker Hub ](img/B15021_15_05.jpg)
图 15.5:Docker 集线器中的网络插件
**Infoblox IPAM 插件**专注于提供 IP 地址管理服务，比如写 DNS 记录和配置 DHCP 设置。**编织网**专注于通过加密、服务发现和组播网络为 Docker 容器创建弹性网络。
在`go-plugin-helpers`中提供的官方 SDK 有 Go 处理程序来为 Docker 创建网络扩展。`Driver`界面定义如下:
```
// Driver represent the interface a driver must fulfill.
type Driver interface {
     GetCapabilities() (*CapabilitiesResponse, error)
     CreateNetwork(*CreateNetworkRequest) error
     AllocateNetwork(*AllocateNetworkRequest)        (*AllocateNetworkResponse, error)
     DeleteNetwork(*DeleteNetworkRequest) error
     FreeNetwork(*FreeNetworkRequest) error
     CreateEndpoint(*CreateEndpointRequest)        (*CreateEndpointResponse, error)
     DeleteEndpoint(*DeleteEndpointRequest) error
     EndpointInfo(*InfoRequest) (*InfoResponse, error)
     Join(*JoinRequest) (*JoinResponse, error)
     Leave(*LeaveRequest) error
     DiscoverNew(*DiscoveryNotification) error
     DiscoverDelete(*DiscoveryNotification) error
     ProgramExternalConnectivity(*ProgramExternalConnectivityRequest)        error
     RevokeExternalConnectivity(*RevokeExternalConnectivityRequest)        error
}
```
注意
完整代码见[https://github . com/docker/go-plugins-helper/blob/master/network/API . go](https://github.com/docker/go-plugins-helpers/blob/master/network/api.go)。
当您检查接口功能时，网络插件应该为网络、端点和外部连接提供操作。例如，一个网络插件应该用`CreateNetwork`、`AllocateneNetwork`、`DeleteNetwork`和`FreeNetwork`功能实现一个网络生命周期。
同样，端点生命周期应该由`CreateEndpoint`、`DeleteEndpoint`和`EndpointInfo`函数实现。此外，还有一些扩展集成和管理功能需要实现，包括`GetCapabilities`、`Leave`、`Join`。这些服务还需要它们特定的请求和响应类型才能在托管插件环境中工作。
在下面的练习中，您将使用编织网插件创建一个新网络，并让容器使用新网络进行连接。
## 练习 15.02: Docker 网络插件正在运行
Docker 网络插件接管特定网络实例的网络操作，并实现定制技术。在本练习中，您将安装和配置一个网络插件来创建 Docker 网络。然后，您将创建一个 Docker 映像的三副本应用，并使用插件来连接这三个实例。你可以使用编织网插件来实现这个目标。
要完成练习，请执行以下步骤:
1.  Initialize a Docker swarm (if you have not enabled one before) by running the following command in the terminal:
    ```
    docker swarm init
    ```
    此命令创建一个 Docker 群来部署应用的多个实例:
    ![Figure 15.6: Swarm initialization ](img/B15021_15_06.jpg)
    图 15.6:群初始化
2.  Install the **Weave Net** plugin by running the following command:
    ```
    docker plugin install --grant-all-permissions \
    store/weaveworks/net-plugin:2.5.2
    ```
    此命令从存储中安装插件，并授予所有权限:
    ![Figure 15.7: Plugin installation ](img/B15021_15_07.jpg)
    图 15.7:插件安装
3.  Create a new network using the driver with the following command:
    ```
    docker network create  \
    --driver=store/weaveworks/net-plugin:2.5.2  \
    weave-custom-net
    ```
    该命令使用插件提供的驱动程序创建一个名为`weave-custom-net`的新网络:
    ![Figure 15.8: Creating the network ](img/B15021_15_08.jpg)
    图 15.8:创建网络
    成功创建网络后，将打印一个随机生成的网络名称，如前面的代码所示。
4.  Create a three-replica application with the following command:
    ```
    docker service create --network=weave-custom-net \
    --replicas=3 \
    --name=workshop \
    -p 80:80 \
    onuryilmaz/hello-plain-text
    ```
    该命令创建三个`onuryilmaz/hello-plain-text`映像的副本，并使用`the weave-custom-net`网络连接实例。此外，它使用名称`workshop`并发布到港口`80`:
    ![Figure 15.9: Application creation ](img/B15021_15_09.jpg)
    图 15.9:应用创建
5.  Get the names of the containers by running the following commands:
    ```
    FIRST_CONTAINER=$(docker ps --format "{{.Names}}" |grep "workshop.1")
    echo $FIRST_CONTAINER
    SECOND_CONTAINER=$(docker ps --format "{{.Names}}" |grep "workshop.2")
    echo $SECOND_CONTAINER
    THIRD_CONTAINER=$(docker ps --format "{{.Names}}" |grep "workshop.3")
    echo $THIRD_CONTAINER
    ```
    这些命令列出正在运行的 Docker 容器名称，并按`workshop`实例进行过滤。您需要容器的名称来测试它们之间的连接:
    ![Figure 15.10: Container names ](img/B15021_15_10.jpg)
    图 15.10:容器名称
6.  Run the following command to connect the first container to the second one:
    ```
    docker exec -it $FIRST_CONTAINER sh -c "curl $SECOND_CONTAINER" 
    ```
    该命令使用`curl`命令连接第一和第二容器:
    ![Figure 15.11: Connection between containers ](img/B15021_15_11.jpg)