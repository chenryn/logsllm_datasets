https://www.postgresql.org/docs/9.6/static/indexes-multicolumn.html
151
Migrating from: Oracle BITMAP Indexes
[Back to TOC]
Overview
BITMAP indexes are task-specific indexes that are best suited for providing fast data retrieval for OLAP
workloads. BITMAP Indexes are generally very fast for read-mostly scenarios. BITMAP indexes do not perform
well in heavy-DML or OLTP-type workloads.
Unlike B-Tree Indexes where an index entry points to a specific table row, when using BITMAP Indexes, the
index stores a BITMAP for each index key.
BITMAP Indexes are ideal for low-cardinality data filtering, where the number of distinct values in a column is
relatively small.
Example
Create an Oracle BITMAP Index:
SQL> CREATE BITMAP INDEX IDX_BITMAP_EMP_GEN ON EMPLOYEES(GENDER);
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_5011.htm#SQLRF01209
https://docs.oracle.com/database/121/SQLRF/statements_5013.htm#SQLRF01209
152
Migration to: PostgreSQL BRIN Indexes
[Back to TOC]
PostgreSQL Index Overview
PostgreSQL does not provide native support for BITMAP indexes. However, a BRIN index, which splits table
records into block ranges with MIN/MAX summaries, can be used as a partial alternative for certain analytic
workloads. For example, BRIN indexes are suited for queries that rely heavily on aggregations to analyze large
numbers of records.
However, Oracle BITMAP indexes and PostgreSQL BRIN indexes are not implemented in the same way and
cannot be used as direct equivalents.
Example
PostgreSQL BRIN Index Creation:
demo=> CREATE INDEX IDX_BRIN_EMP ON EMPLOYEES USING BRIN(salary);
For additional details:
https://www.postgresql.org/docs/9.6/static/indexes-types.html
https://www.postgresql.org/docs/9.6/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY
153
Migrating from: Oracle Function-Based Indexes
[Back to TOC]
Overview
Function-Based Indexes allow functions to be used in the clause of queries on indexes columns.
WHERE
Function-Based Indexes store the output of a Function applied on the values of a table column. The Oracle
Query Optimizer will only use a Function-Based Index when the function itself is used in the query itself. To
maintain Function-Based Indexes updated, when the Oracle Database processes DML operations it will also
evaluate the output of the Function on updated column values.
Example
Creation of a Function-Based Index:
SQL> CREATE TABLE SYSTEM_EVENTS(
EVENT_ID NUMERIC PRIMARY KEY,
EVENT_CODE VARCHAR2(10) NOT NULL,
EVENT_DESCIPTION VARCHAR2(200),
EVENT_TIME TIMESTAMPNOT NULL);
SQL> CREATE INDEX EVNT_BY_DAY ON SYSTEM_EVENTS(EXTRACT(DAY FROM EVENT_TIME));
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e40540/indexiot.htm#CNCPT721
https://docs.oracle.com/database/121/SQLRF/statements_5013.htm#SQLRF01209
154
Migration to: PostgreSQL Expression Indexes
Overview
PostgreSQL supports Expression Indexes which are similar to Function-Based Indexes in Oracle.
Examples
1. Creating an Expression Index in PostgreSQL:
demo=> CREATE TABLE SYSTEM_EVENTS(
EVENT_ID NUMERIC PRIMARY KEY,
EVENT_CODE VARCHAR(10) NOT NULL,
EVENT_DESCIPTION VARCHAR(200),
EVENT_TIME TIMESTAMP NOT NULL);
Demo=> CREATE INDEX EVNT_BY_DAY ON SYSTEM_EVENTS(EXTRACT(DAY FROM EVENT_TIME));
2. Inserting records to the table, gathering table statistics using the statement
SYSTEM_EVENTS ANALYZE
and verifying that the Expression Index (“ ) is being used for data access.
EVNT_BY_DAY”
demo=> INSERT INTO SYSTEM_EVENTS
SELECT ID AS event_id,
'EVNT-A'||ID+9||'-'||ID AS event_code,
CASE WHEN mod(ID,2) = 0 THEN 'Warning' ELSE 'Critical' END AS
event_desc,
now() + INTERVAL '1 minute' * ID AS event_time
FROM
(SELECT generate_series(1,1000000) AS ID) A;
INSERT 0 1000000
demo=> ANALYZE SYSTEM_EVENTS;
ANALYZE
demo=> EXPLAIN
SELECT * FROM SYSTEM_EVENTS
WHERE EXTRACT(DAY FROM EVENT_TIME) = '22';
QUERY PLAN
-----------------------------------------------------------------------------------
Bitmap Heap Scan on system_events (cost=729.08..10569.58 rows=33633 width=41)
Recheck Cond: (date_part('day'::text, event_time) = '22'::double precision)
-> Bitmap Index Scan on evnt_by_day (cost=0.00..720.67 rows=33633 width=0)
Index Cond: (date_part('day'::text, event_time) = '22'::double precision)
155
Partial Indexes
PostgreSQL also offers “partial indexes”, which are indexes that use a clause when created. The
WHERE
biggest benefit of using “partial indexes” is reduction of the overall subset of indexed data allowing users to
index relevant table data only. “Partial indexes” can be used to increase efficiency and reduce the size of the
index.
Example
Create a PostgreSQL “partial Index”:
demo=> CREATE TABLE SYSTEM_EVENTS(
EVENT_ID NUMERIC PRIMARY KEY,
EVENT_CODE VARCHAR(10) NOT NULL,
EVENT_DESCIPTION VARCHAR(200),
EVENT_TIME DATE NOT NULL);
Demo=> CREATE INDEX IDX_TIME_CODE ON SYSTEM_EVENTS(EVENT_TIME)
WHERE EVENT_CODE like '01-A%';
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY
156
Migrating from: Oracle Local and Global Partitioned Indexes
[Back to TOC]
Overview
Local and Global Indexes are used for Partitioned Tables:
• Local Partitioned Index
Maintain a one-to-one relationship between the Index Partitions and the Table Partitions. For each
Table Partition, a separate Index Partition will be created. This type of index is created using the
clause. Because each Index Partition is independent, index maintenance operations are easier
LOCAL
and can be performed independently. Local Partitioned Indexes are managed automatically by the
Oracle Database during creation or deletion of Table Partitions.
• Global Partitioned Index
Each Global Index contains keys from multiple table partitions in a single index partition. This type of
index is created using the clause during index creation. A Global index can be
GLOBAL
partitioned or non-partitioned (default).
Certain restrictions exist when creating Global Partitioned Indexes on Partitioned Tables, specifically
for index management and maintenance. For example, dropping a Table Partition causes the Global
Index to become unusable without an index rebuild.
Example
Create a Local and Global Index on a Partitioned Table:
SQL> CREATE INDEX IDX_SYS_LOGS_LOC ON SYSTEM_LOGS (EVENT_DATE)
LOCAL
(PARTITION EVENT_DATE_1,
PARTITION EVENT_DATE_2,
PARTITION EVENT_DATE_3);
SQL> CREATE INDEX IDX_SYS_LOGS_GLOB ON SYSTEM_LOGS (EVENT_DATE)
GLOBAL PARTITION BY RANGE (EVENT_DATE) (
PARTITION EVENT_DATE_1 VALUES LESS THAN
(TO_DATE('01/01/2015','DD/MM/YYYY')),
PARTITION EVENT_DATE_2 VALUES LESS THAN
(TO_DATE('01/01/2016','DD/MM/YYYY')),
PARTITION EVENT_DATE_3 VALUES LESS THAN
(TO_DATE('01/01/2017','DD/MM/YYYY')),
PARTITION EVENT_DATE_4 VALUES LESS THAN (MAXVALUE);
For additional details:
https://docs.oracle.com/cd/E18283_01/server.112/e16541/partition.htm
https://docs.oracle.com/database/121/VLDBG/GUID-81DD6045-A269-4BD2-9EBF-E430F8C3E51B.htm#VLDBG1354
157
Migration to: PostgreSQL Partitioned Indexes
[Back to TOC]
Overview
The Table Partitioning mechanism in PostgreSQL is different when compared to Oracle. There is no direct
equivalent for Oracle Local and Global Indexes. The implementation of partitioning in PostgreSQL (“Table
Inheritance“) includes the use of a Parent Table with Child Tables used as the table partitions.
• Indexes created on the Child Tables behave similarly to Local Indexes in the Oracle database, with per-
table indexes (“partitions”).
• Creating an index on the parent table, similar to a Global Indexes in Oracle, has no effect.
Example
1. Create the Parent Table:
demo=# CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMERIC NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR(500),
ERROR_CODE VARCHAR(10));
2. Create Child Tables (“partitions”) with a Check Constraint:
demo=# CREATE TABLE SYSTEM_LOGS_WARNING (
CHECK (ERROR_CODE IN('err1', 'err2', 'err3')))
INHERITS (SYSTEM_LOGS);
demo=# CREATE TABLE SYSTEM_LOGS_CRITICAL (
CHECK (ERROR_CODE IN('err4', 'err5', 'err6')))
INHERITS (SYSTEM_LOGS);
3. Create Indexes on each Child Table (“partitions”)
demo=# CREATE INDEX IDX_SYSTEM_LOGS_WARNING ON
SYSTEM_LOGS_WARNING(ERROR_CODE);
demo=# CREATE INDEX IDX_SYSTEM_LOGS_CRITICAL ON
SYSTEM_LOGS_CRITICAL(ERROR_CODE);
PostgreSQL does not have direct equivalents for Local and Global indexes in Oracle. However, indexes that
have been created on the Child Tables behave similarly to Local Indexes in Oracle.
For additional details:
https://www.postgresql.org/docs/9.6/static/ddl-partitioning.html
158
Migrating from: Oracle Identity Columns
[Back to TOC]
Overview
Oracle 12c introduced support for automatic generation of values to populate columns in database tables. The
type generates a sequence and associates it with a table column without the need to manually
IDENTITY
create a separate Sequence object. The type relies (internally) on Sequences, which can also be
IDENTITY
manually configured.
Example
1. Create a table with an Oracle 12c Identity Column:
SQL> CREATE TABLE IDENTITY_TST (
COL1 NUMBER GENERATED BY DEFAULT AS IDENTITY
(START WITH 100
INCREMENT BY 10),
COL2 VARCHAR2(30));
2. Insert data into the table. The Identity Column automatically generates values for .
COL1
SQL> INSERT INTO IDENTITY_TST(COL2) VALUES('A');
SQL> INSERT INTO IDENTITY_TST(COL1, COL2) VALUES(DEFAULT, 'B');
SQL> INSERT INTO IDENTITY_TST(col1, col2) VALUES(NULL, 'C');
SQL> SELECT * FROM IDENTITY_TST;
COL1 COL2
---------- ------------------------------
100 A
110 B
For additional details:
https://docs.oracle.com/database/121/SQLRF/statements_6017.htm#SQLRF01314
http://www.oracle.com/technetwork/issue-archive/2013/13-sep/o53asktom-1999186.html
159
Migration to: PostgreSQL SERIAL Type
[Back to TOC]
Overview
PostgreSQL enables you to create a Sequence that is similar to the property supported by
AUTO_INCREMENT
Oracle 12c’s Identity column feature. When creating a new table using the pseudo-type, a Sequence
SERIAL
is created. Additional types from the same family are and .
SMALLSERIAL BIGSERIAL
By assigning a type to a column as part of table creation, PostgreSQL creates a Sequence using
SERIAL
default configuration and adds the constraint to the column. The new Sequence can be altered
NOT NULL
and configured as a regular Sequence.
Example
Using the PostgreSQL pseudo-type (with a Sequence that is created implicitly):
SERIAL
psql=> CREATE TABLE SERIAL_SEQ_TST(
COL1 SERIAL PRIMARY KEY,
COL2 VA RCHAR(10));
psql=> \ds
Schema | Name | Type | Owner
--------+----- --------------------+----------+-------
public | serial_seq_tst_col1_seq | sequence | pg_tst_db
psql=> ALTER S EQUENCE SERIAL_SEQ_TST_COL1_SEQ RESTART WITH 100
INCREME NT BY 10;
psql=> INSERT INTO SERIAL_SEQ_TST(COL2) VALUES('A');
psql=> INSERT INTO SERIAL_SEQ_TST(COL1, COL2) VALUES(DEFAULT, 'B');
psql=> SELECT * FROM SERIAL_SEQ_TST;
col1 | col2
------+---- - -
100 | A
110 | B
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createsequence.html
https://www.postgresql.org/docs/9.6/static/functions-sequence.html
https://www.postgresql.org/docs/9.6/static/datatype-numeric.html
160
Migrating from: Oracle MVCC
[Back to TOC]
Overview
Two primary lock types exist in the Oracle database: exclusive locks and share locks which implement the
following high-level locking semantics:
• Writers never block readers.
• Readers never block writers.
• Oracle never escalates locks from row to page and table level, which reduces potential deadlocks.
• Oracle allows the user to issue an explicit lock on a specific table using the statement.
LOCK TABLE
Lock types can be divided into four categories:
• DML Locks
Preserving data integrity accessed concurrently by multiple users, DML statements acquire locks
automatically both on row and table levels.
• Row Locks (TX) – obtained on a single row of a table by one the following statements:
.
INSERT, UPDATE, DELETE, MERGE, and SELECT ... FOR UPDATE
If a transaction obtains a row lock, a table lock is also acquired to prevent DDL modifications to
the table that might cause conflicts. The lock exists until the transaction ends with a or
COMMIT
.
ROLLBACK
• Table Locks (TM) - When performing one of the following DML operations:
INSERT,
a transaction
UPDATE, DELETE, MERGE, and SELECT ... FOR UPDATE,
automatically acquires a table lock to prevent DDL modifications to the table that might cause
conflicts if the transaction did not issue a or .
COMMIT ROLLBACK
161
The following table provides additional information regarding row and table locks:
Statement Row Table Lock RS RX S SRX X
Locks Mode
table — none Y Y Y Y Y
SELECT FROM ...
table Yes SX Y Y N N N
INSERTINTO
...
table Yes SX Y Y N N N
UPDATE
...
table Yes SX Y Y N N N
MERGEINTO
...
table Yes SX Y Y N N N
DELETEFROM
...
SELECT FROM
... Yes SX Y Y N N N
table
FORUPDATEOF
...
table —
LOCKTABLE IN
...
SS Y Y Y Y N
ROWSHAREMODE
...
SX Y Y N N N
ROWEXCLUSIVEMODE
S Y N Y N N
SHAREMODE
SSX Y N N N N
SHAREROWEXCLUSIVEMODE
X N N N N N
EXCLUSIVEMODE
• DDL Locks
The main purpose of a DDL lock is to protect the definition of a schema object while it is modified by an
ongoing DDL operation such as .
ALTER TABLE EMPLOYEES ADD 
• Explicit (Manual) Data Locking
The user has the ability to explicitly create a lock to achieve transaction-level read consistency for
when an application requires transactional exclusive access to a resource without waiting for other
transactions to complete. Explicit data locking can be done at the transaction level or the session level:
Transaction Level:
•
SET TRANSACTION ISOLATION LEVEL
•
LOCK TABLE
•
SELECT … FOR UPDATE
Session Level:
•
ALTER SESSION SET ISOLATION LEVEL
• System Locks
Oracle lock types such as Latches, Mutexes, and internal locks.
162
Examples
Explicit data lock using the command:
LOCK TABLE
-- Session 1
SQL> LOCK TABLE EMPLOYEES IN EXCLUSIVE MODE;
-- Session 2
SQL> UPDATE EMPLOYEES
SET SALARY=SALARY+1000
WHERE EMPLOYEE_ID=114;
-- Session 2 waits for session 1 to COMMIT or ROLLBACK
Explicit data lock using the command. Oracle obtains exclusive row-level locks on
SELECT… FOR UPDATE
all the rows identified by the statement:
SELECT FOR UPDATE
-- Se ssion 1
SQL> SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID=114 FOR UPDATE;
-- Session 2
SQL> UPDATE EMPLOYEES
Oracle Real-Time Locks Monitoring V$ Views
SET SALARY=SALARY+1000
WHE1R.E vE$MPlLoOcYkE;E_ ID=114;
2. v$locked_object;
-- Session 2 waits for session 1 to COMMIT or ROLLBACK
3. v$session_blockers;
For additional details:
https://docs.oracle.com/cloud/latest/db112/SQLRF/statements_9015.htm#SQLRF01605
http://docs.oracle.com/cd/E18283_01/server.112/e17118/ap_locks002.htm
https://docs.oracle.com/database/121/SQLRF/ap_locks001.htm#SQLRF55502
https://docs.oracle.com/database/121/SQLRF/ap_locks003.htm#SQLRF55513
https://docs.oracle.com/database/121/SQLRF/ap_locks002.htm#SQLRF55509
163
Migration to: PostgreSQL MVCC
[Back to TOC]
Overview
PostgreSQL provides various lock modes to control concurrent access to data in tables. Data consistency is
maintained using a Multi-Version Concurrency Control (MVCC) mechanism. Most PostgreSQL commands
automatically acquire locks of appropriate modes to ensure that referenced tables are not dropped or
modified in incompatible ways while the command executes.
The MVCC mechanism prevents viewing inconsistent data produced by concurrent transactions performing
updates on the same rows. MVCC in PostgreSQL provides strong transaction isolation for each database
session and minimizes lock-contention in multiuser environments.
• Similarly, to Oracle, MVCC locks acquired for querying (reading) data do not conflict with locks acquired
for writing data. Reads will never block writes and writes never blocks reads.
• Similarly to Oracle, Postgres does not escalate locks to table-level, such as where an entire table is
locked for writes when a certain threshold of row locks is exceeded.
Implicit and Explicit Transactions (Auto-Commit Behavior)
Unlike Oracle, PostgreSQL uses auto-commit for transactions by default. However, there are two options to
support explicit transactions, which are similar to the default behavior in Oracle (non-auto-commit):
• Use the (or ) statements and then or
START TRANSACTION BEGIN TRANSACTION COMMIT
.
ROLLBACK
• Set to OFF at the session level:
AUTOCOMMIT
psql=> \set AUTOCOMMIT off
With explicit transactions:
• Users can explicitly issue a lock similar to the statement in Oracle.
LOCK TABLE
• is supported.
SELECT… FOR UPDATE
164
Similarly to Oracle, PostgreSQL automatically acquires the necessary locks to control concurrent access to
data. PostgreSQL implements the following types of locks:
1. Table-level Locks:
Requested Lock Mode VS ACCESS ROW ROW SHARE SHARE SHARE EXCLUSIVE ACCESS
current SHARE SHARE EXCLUSIVE UPDATE ROW EXCLUSIVE
EXCLUSIVE EXCLUSIVE
ACCESS SHARE X
ROW SHARE X X
ROW EXCLUSIVE X X X X
SHARE UPDATE EXCLUSIVE X X X X X
SHARE X X X X X
SHARE ROW EXCLUSIVE X X X X X X
EXCLUSIVE X X X X X X X
ACCESS EXCLUSIVE X X X X X X X X
2. Row-level Locks: