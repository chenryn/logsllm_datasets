title:HeapHopper: Bringing Bounded Model Checking to Heap Implementation
Security
author:Moritz Eckert and
Antonio Bianchi and
Ruoyu Wang and
Yan Shoshitaishvili and
Christopher Kruegel and
Giovanni Vigna
HeapHopper: Bringing Bounded Model Checking 
to Heap Implementation Security
Moritz Eckert, University of California, Santa Barbara; Antonio Bianchi, University of 
California, Santa Barbara and The University of Iowa; Ruoyu Wang, University of California, 
Santa Barbara and Arizona State University; Yan Shoshitaishvili, Arizona State University; 
Christopher Kruegel and Giovanni Vigna, University of California, Santa Barbara
https://www.usenix.org/conference/usenixsecurity18/presentation/eckert
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Bringing Bounded Model Checking to Heap Implementation Security
HEAPHOPPER:
Moritz Eckert1, Antonio Bianchi1,2, Ruoyu Wang1,3, Yan Shoshitaishvili3,
Christopher Kruegel1, and Giovanni Vigna1
1University of California, Santa Barbara
2The University of Iowa
3Arizona State University
{m.eckert,chris,giovanni}@cs.ucsb.edu, PI:EMAIL,{fishw,yans}@asu.edu
Abstract
Heap metadata attacks have become one of the primary ways
in which attackers exploit memory corruption vulnerabilities.
While heap implementation developers have introduced miti-
gations to prevent and detect corruption, it is still possible for
attackers to work around them. In part, this is because these
mitigations are created and evaluated without a principled
foundation, resulting, in many cases, in complex, inefficient,
and ineffective attempts at heap metadata defenses.
In this paper, we present HEAPHOPPER, an automated
approach, based on model checking and symbolic execu-
tion, to analyze the exploitability of heap implementations in
the presence of memory corruption. Using HEAPHOPPER,
we were able to perform a systematic analysis of different,
widely used heap implementations, finding surprising weak-
nesses in them. Our results show, for instance, how a newly
introduced caching mechanism in ptmalloc (the heap allo-
cator implementation used by most of the Linux distributions)
significantly weakens its security. Moreover, HEAPHOPPER
guided us in implementing and evaluating improvements to
the security of ptmalloc, replacing an ineffective recent
attempt at the mitigation of a specific form of heap metadata
corruption with an effective defense.
1 Introduction
The art of software exploitation is practiced on a constantly
evolving battlefield. The hackers of a decade past employed
simple tactics — stack-based buffer overflows were lever-
aged to jump to shellcode on the stack, the constructors,
destructors, and Global Offset Tables of binaries were fruit-
ful targets to achieve execution control, and an incorrect
bounds-check most of the times guaranteed successful exe-
cution. But, as security became ever-more important in our
interconnected world, the state of the art moved on. Security
researchers developed mitigation after mitigation, aimed at
lessening the impact of software vulnerabilities. The stack
was made non-executable, leading to hackers developing the
concept of return oriented programming (ROP) [43] and the
resulting war between ROP attacks and defenses [36, 37].
Stack canaries were pressed into service [12], and then they
have been situationally bypassed [7]. Techniques were intro-
duced to reduce the potential targets of vulnerable writes [30],
and then they have been partially bypassed as well [14].
Countless measures to protect function pointers have been
developed and circumvented [11, 38]. The cat-and-mouse
game of binary warfare has gone on for a long time: The
locations change, but the battle rages on [50].
Faced with an array of effective mitigation techniques pro-
tecting against many classical vulnerabilities, hackers have
found a new, mostly unmitigated weapon: heap metadata
corruption. The application heap, which is responsible for dy-
namic memory allocation of C and C++ programs (including
the runtimes of other higher-level languages), is extremely
complex, due to the necessity to balance runtime perfor-
mance, memory performance, security, and usability. For
performance reasons, many modern heap implementations
(including the most popular ones [1]) place dynamically al-
located application data in the same memory regions where
they store control information for heap operations. This meta-
data is unprotected, and security vulnerabilities relating to
the handling of application data stored in the heap may lead
to its corruption. In turn, the corruption of heap metadata
may cause heap handling functions to fail in an attacker-
controllable way, leading to increased attacker capabilities,
and, potentially, a complete application compromise.
This weakness has not gone ignored: Heap implementa-
tion developers have introduced hardening mechanisms to
detect the presence of heap metadata corruption, and abort
the program if corruption is present. Unfortunately, any such
measure must consider the security measure’s impact on per-
formance, and this trade-off has led to a number of security
“half-measures” that have done little to reduce the ample heap
exploitation techniques available to hackers today [44].
This problem is exemplified in two recent incidents. In
2017, a patch was proposed to and accepted by the GNU
standard C library (glibc) heap implementation. This patch
USENIX Association
27th USENIX Security Symposium    99
ostensibly fixed a heap exploitation technique stemming from
the partial overwrite of the recorded size of an allocation.
Despite uncertainty over the efficacy of the patch (due, in
part, to a lack of tools to reason about its actual security
effects), the patch was merged. However, it was almost
immediately discovered that the check could be trivially
bypassed using a slight modification of the attack [45].
Even more recently, the ptmalloc allocator (used by
glibc) introduced a speed optimization feature called
tcache, with the intention of radically speeding up frequent
allocations. Again, no tool was available to analyze the se-
curity impact of this change, and this change was merged
with little debate. However, as we determined during the
execution of this project, and as hackers have since figured
as well, tcache resulted in a significant reduction in the re-
silience of the ptmalloc heap implementation to metadata
corruption.
These incidents showcase the urgent need for a principled
approach to verifying the behavior of heap implementations
in the presence of software vulnerabilities. While several
security analyses of heap operations have been carried out
in the past [32, 34, 35, 39, 54], none has taken the form of
a principled analysis of heap security directly applicable to
arbitrary heap implementations.
In this paper, we present HEAPHOPPER, the first approach
to bring bounded model checking to the exploitability anal-
ysis of dynamic memory allocator implementations in the
presence of memory corruption. Assuming an attacker can
carry out some subset of potential heap misuses, and assum-
ing that the heap implementation should not malfunction in
a way that could be leveraged by the attacker to amplify their
control over the process, HEAPHOPPER uses customized dy-
namic symbolic execution techniques to identify violations
of the model within a configurable bound. If such a viola-
tion is found, our tool outputs proof-of-concept (PoC) code
that can be used to both study the security violation of the
heap implementation and test the effectiveness of potential
mitigations.
We applied HEAPHOPPER to five different versions of
three different heap implementations, systematically identi-
fying heap attacks: Chains of heap operations that can be
triggered by an attacker to achieve more capability for mem-
ory corruption (such as arbitrarily targeted writes) in the pro-
gram. These systematized attacks against allocators allow us
to track the improvement of security (or, more precisely, the
increased difficulty of exploitation) as the implementations
evolve, and observe situations where there was a marked lack
of improvement. For example, HEAPHOPPER was able to
automatically identify both the bypass to the aforementioned
2017 glibc patch and the reduction of allocator security
resulting from the tcache implementation. Furthermore,
with the help of the PoC generated by HEAPHOPPER against
the 2017 glibc patch, we were able to develop a proper
patch that our system (and our manual analysis) has not been
able to bypass, which is currently being discussed by the
glibc project.
In summary, this paper makes the following contributions:
• We develop a novel approach to performing bounded
model checking of heap implementations to evaluate
their security in the presence of metadata corruption.
• We demonstrate our tool’s capabilities by analyzing
different versions of different heap implementations,
showcasing both security improvements and security
issues.
• We utilized the tool to analyze high-profile patches and
changes in the glibc allocator, resulting in improved
patches that are awaiting final sign-off and merge into
glibc.
Following our belief in open research, we provide the
HEAPHOPPER prototype as open source [16].
2 The Application Heap
The term heap refers to the manually managed dynamic
memory in the C/C++ programming language. The standard
C library provides an API for a group of functions handling
the allocation and deallocation of memory chunks, namely
malloc and free. As different implementations of the
standard C library emerged, different heap implementations
have been proposed and developed. Most of them were de-
veloped with the sole purpose of providing dynamic memory
management with the best performance in terms of both
minimal execution time and memory overhead.
Memory-corruption issues (such as buffer overflows),
have been shown to be exploitable by attackers to achieve, for
instance, arbitrary code execution in vulnerable software. For
this reason, protection techniques have been implemented
both for the memory on a program’s stack and the mem-
ory in the heap. The goal of these protection techniques is
to mitigate the impact of memory invalid modifications by
detecting corruption before they can be exploited.
In the context of the stack, protection techniques such as
StackGuard [13] provide low-overhead protection against
memory corruption and have become standard hardening
mechanisms. Conversely, for the heap, every implementation
uses ad hoc and widely different protection mechanisms,
which oftentimes have been shown to be bypassable by mo-
tivated attackers [44].
2.1 Heap Implementations
Many different heap implementations exist, which all share
the property of needing metadata information to keep track
of allocated and free regions. The most common solution
is to use in-line metadata. In this case, allocated regions
(returned by malloc) are placed in memory alongside with
100    27th USENIX Security Symposium
USENIX Association
the metadata. Examples of such allocators are: ptmal-
loc [22], used by glibc (the implementation of libc
commonly used in Linux distributions), dlmalloc [31]
(originally used in glibc, now superseded by ptmalloc),
and the heap implementation used in musl [2] (a libc
implementation typically used in embedded systems). Other
implementations, however, keep all the metadata in a sepa-
rate memory region. Examples of these allocators are je-
malloc [21] (used by the Firefox browser), and the heap
implementation used in OpenBSD [33].
The in-line metadata design increases the attack surface
since overflows can easily modify metadata and interfere
with how the heap is managed. However, these implementa-
tions are typically faster [47, 48].
2.2 Exploiting Heap Metadata Corruption
In the presence of a memory-corruption vulnerability, the
heap can be manipulated in different ways by an attacker.
Typically, an attacker can easily control allocations and deal-
locations. For instance, suppose that a program allows for the
storage and deletion of attacker-controlled data, read from
standard input. This allows an attacker to execute, at will,
instructions such as the following (allocating some memory,
filling it with attacker-controlled data, and then freeing it):
c = malloc(data size);
read(stdin, c, data size);
...
free(c);
Additionally, an attacker may be able to exploit any vulnera-
bilities in the code, such as double free, use-after-free, buffer
overflows, or off-by-one errors. By triggering controlled
allocations, frees, and memory bugs, the attacker will try to
achieve exploitation primitives, such as arbitrary memory
writes or overlapping allocations. While an arbitrary mem-
ory write can directly be used to overwrite function pointers
and does not require further explanation, an overlapping al-
location means to have two allocated chunks that have an
overlapping memory region. This allows an attacker to mod-
ify or leak the data and metadata of another chunk, which
entails pointers and heap metadata. Therefore, this primi-
tive is often used for further corruption of the heap’s state
in order to reach or support stronger primitives. Eventually,
these exploitation primitives can be used to achieve arbitrary
code execution (by, for instance, modifying a code pointer
and starting the execution of a ROP chain), or to disclose
sensitive data. We will provide details about the exploitation
primitives we consider in Section 5.2.
2.3 Motivating Example: 1-byte NULL Over-
flow
Figure 1: Graphic representation of how to exploit a 1-byte
NULL overflow in the current version of glibc (using
ptmalloc). On the bottom, the check added by Chris Evans’
patch is shown. This check can be easily bypassed by writing,
during Step 1, the value B.size & (∼0xff) in the right
location within the chunk B (in the example, where the field
in blue is).
checks can be bypassed, we present how an attacker can
exploit a seemingly minor off-by-one error to achieve arbi-
trary code execution. This example is traditionally called
the poisoned NULL byte [20] and targets ptmalloc. This
attack requires, in the victim process, only an overflow of
a single byte whose value is NULL (0x00), together with
control over the size and the content of some heap alloca-
tions (which, as explained in Section 2.2, might occur in the
application by design). Single NULL-byte-overflow bugs
frequently occur due to off-by-one conditions when manipu-
lating NULL-terminated strings.
The attack can be carried out as follow (refer to Figure 1)1:
1. Allocate 3 contiguous regions (A, B, C).
2. free B.
3. Trigger the 1-byte NULL overflow in A.
This overflow will result in setting to 0 the least significant
byte of the field size of the (now freed) chunk B. As a
To exemplify how modern libc libraries contain checks
to detect and mitigate memory corruptions and how these
1For simplicity, details about the specific constraints that the allocation
sizes have to satisfy are omitted. Interested readers can refer to Goichon’s
white paper [23].
USENIX Association
27th USENIX Security Symposium    101
ABCACACAB1CACAA               D1234567B.size=0x208C.prev_size=0x210  1-byte-NUL overflow: C.prev_size=0x210C.prev_size=0x210  NOT UPDATED!B1B2B2AC4With Chris Evans’s patch: B.size=0x200nextchunk(B) = B+B.size = B+0x200nextchunk(B).prev_sizeif different:  Abort0x1000x2080x100B2B.size=0x200To bypass the check, set to B.size & (~0xFF)(during Step 1)0x1000x80  OverlappingChunksERRONEOUSC.prev_size  consequence, if the original size of B was not a multiple of
0x100, the size field of B will end up being smaller than
it should be.
4. Allocate a smaller chunk B1.
Allocating B1, which is placed between A and C, should trig-
ger the update of the field prev size2 of C. However, the
allocator computes the location of C.prev size by doing