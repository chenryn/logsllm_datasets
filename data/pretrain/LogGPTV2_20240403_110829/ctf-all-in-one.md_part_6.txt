### 信息隐藏
在HTML中，一些标签用于元信息展示、注释等功能，并不直接参与内容的显示。此外，某些属性能够修改浏览器中的元素显示方式，在CTF（Capture The Flag）竞赛中经常被用来隐藏信息。

#### 标签
- **`<!-- -->`**：定义注释。
- **`<!DOCTYPE>`**：定义文档类型。
- **`<meta>`**：定义关于文档的信息。
- **`<iframe>`**：定义内联框架。

#### 属性
- **`hidden`**：隐藏元素。

### XSS (跨站脚本攻击)
XSS漏洞的详细介绍见1.4.5节OWASP Top Ten Project漏洞基础。导致XSS漏洞的主要原因是嵌入在HTML中的动态语言代码，而HTML则为恶意注入提供了入口。

与XSS相关的常见标签或属性包括：
- **`<script>`**：定义客户端脚本。
- **`src`**：规定显示图像的URL。
- **`background`**：规定文档背景图像URL。
- **事件属性**：如`onclick`等，可以附加到`<body>`、`<form>`和键盘事件上。
- **`href`**：定义外部资源链接。
- **`data`**：定义引用对象数据的URL。
- **`xlink:href`**：定义SVG资源引用。

### HTML编码
HTML编码是一种将特殊字符安全地嵌入HTML文档的方法。HTML定义了许多实体来表示这些特殊字符。

| HTML编码 | 特殊字符 |
|----------|-----------|
| `&quot;` | `"`       |
| `&apos;` | `'`       |
| `&amp;`  | `&`       |
| `&lt;`   | `<`       |
| `&gt;`   | `>`       |

此外，任何字符都可以使用其十进制或十六进制ASCII码进行HTML编码，例如：
| HTML编码 | 特殊字符 |
|----------|-----------|
| `&#34;`  | `"`       |
| `&#39;`  | `'`       |
| `&#x22;` | `"`       |
| `&#x27;` | `'`       |

### HTML5新特性
尽管HTML5已经存在了一段时间，但其强大的功能仍然带来许多新的挑战。HTML5的一些主要新特性包括：
- 新的语义元素标签。
- 新的表单控件。
- 强大的图像支持。
- 强大的多媒体支持。
- 强大的API。

### 参考资料
- W3C HTML教程
- HTML5安全问题

### HTTP协议基础
#### 什么是HTTP
HTTP是Web领域中最核心的通信协议。最初版本的HTTP仅支持基于文本的静态资源获取，但随着协议版本的不断迭代，它已经能够支持复杂的分布式应用程序。HTTP使用基于消息的模型，建立在TCP层之上。客户端发送请求消息，服务器返回响应消息。

#### HTTP请求与响应
一次完整的请求或响应由消息头、一个空白行和消息主体构成。以下是一个典型的HTTP请求示例：

```
GET / HTTP/1.1
Host: www.github.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Upgrade-Insecure-Requests: 1
Cookie: logged_in=yes;
Connection: close
```

响应示例：

```
HTTP/1.1 200 OK
Date: Tue, 26 Dec 2017 02:28:53 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Server: GitHub.com
Status: 200 OK
Cache-Control: no-cache
Vary: X-PJAX
X-UA-Compatible: IE=Edge,chrome=1
Set-Cookie: user_session=37Q; path=/;
X-Request-Id: e341
X-Runtime: 0.538664
Content-Security-Policy: default-src 'none';
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
Public-Key-Pins: max-age=0;
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-XSS-Protection: 1; mode=block
X-Runtime-rack: 0.547600
Vary: Accept-Encoding
X-GitHub-Request-Id: 7400
Content-Length: 128504
......
```

#### HTTP方法
HTTP协议目前共有三个主要版本：0.9、1.0和1.1。每个版本都引入了新的特性和改进，同时也带来了潜在的安全问题。

| 版本 | 简述 |
|------|------|
| 0.9  | 只允许GET方法，无状态性，无协议头和状态码，支持纯文本。 |
| 1.0  | 增加了HEAD和POST方法，支持长连接、缓存和身份认证。 |
| 1.1  | 增加了Keep-alive机制和PipeLining流水线，新增了OPTIONS、PUT、DELETE、TRACE、CONNECT方法。 |
| 2.0  | 增加了多路复用、头部压缩、随时复位等功能。 |

#### 请求方法
- **GET**：请求获取URL资源。
- **POST**：执行操作并附加新的数据。
- **HEAD**：只获取资源响应消息报头。
- **PUT**：请求服务器存储一个资源。
- **DELETE**：请求服务器删除资源。
- **TRACE**：请求服务器回送收到的信息。
- **OPTIONS**：查询服务器的支持选项。

#### URL
URL（统一资源定位符）代表了Web资源的唯一标识，类似于电脑上的路径。最常见的URL格式如下：
```
protocol://[user[:password]@]hostname[:port]/[path]/file[?param=value]
```

#### HTTP消息头
HTTP支持多种消息头，有些具有特定的作用，有些则特定于请求或响应。

| 消息头 | 描述 |
|--------|------|
| Connection | 告知通信另一端，在完成HTTP传输后是关闭TCP连接还是保持连接开放。 |
| Content-Encoding | 规定消息主体内容的编码形式。 |
| Content-Length | 规定消息主体的字节长度。 |
| Content-Type | 规定消息主体的内容类型。 |
| Accept | 告知服务器客户端愿意接受的内容类型。 |
| Accept-Encoding | 告知服务器客户端愿意接受的内容编码。 |
| Authorization | 进行内置HTTP身份验证。 |
| Cookie | 用于向服务器提交cookie。 |
| Host | 指定所请求的完整URL中的主机名称。 |
| Origin | 跨域请求中的请求域。 |
| Referer | 指定提出当前请求的原始URL。 |
| User-Agent | 提供浏览器或客户端软件的有关信息。 |
| Cache-Control | 向浏览器发送缓存指令。 |
| Location | 重定向响应。 |
| Server | 提供所使用的服务器软件信息。 |
| Set-Cookie | 向浏览器发布cookie。 |
| WWW-Authenticate | 提供服务器支持的验证信息。 |

#### Cookie
Cookie是大多数Web应用程序的关键组成部分，用于弥补HTTP的无状态记录缺陷。服务器通过`Set-Cookie`发布cookie，浏览器获取cookie后会在每次请求时在`Cookie`字段中包含cookie值。

Cookie包含以下信息：
- **expires**：设定cookie的有效时间。
- **domain**：指定cookie的有效域。
- **path**：指定cookie的有效URL路径。
- **secure**：指定仅在HTTPS中提交cookie。
- **HttpOnly**：指定无法通过客户端JavaScript直接访问cookie。

#### 状态码
状态码表明资源请求的结果状态，由三位十进制数组成，第一位代表基本类别。

| 状态码 | 短语 | 描述 |
|--------|------|------|
| 100    | Continue | 服务端已收到请求并要求客户端继续发送主体。 |
| 200    | Ok | 已成功提交，且响应主体中包含请求结果。 |
| 201    | Created | PUT请求方法的返回状态，请求成功提交。 |
| 301    | Moved Permanently | 请求永久重定向。 |
| 302    | Found | 暂时重定向。 |
| 304    | Not Modified | 指示浏览器使用缓存中的资源副本。 |
| 400    | Bad Request | 客户端提交请求无效。 |
| 401    | Unauthorized | 服务端要求身份验证。 |
| 403    | Forbidden | 禁止访问被请求资源。 |
| 404    | Not Found | 所请求的资源不存在。 |
| 405    | Method Not Allowed | 请求方法不支持。 |
| 413    | Request Entity Too Large | 请求主体过长。 |
| 414    | Request URI Too Long | 请求URL过长。 |
| 500    | Internal Server Error | 服务器执行请求时遇到错误。 |
| 503    | Service Unavailable | Web服务器正常，但请求无法被响应。 |

401状态支持的HTTP身份认证：
- **Basic**：以Base64编码的方式发送证书。
- **NTLM**：一种质询-响应机制。
- **Digest**：一种质询-响应机制，随同证书一起使用一个随机的MD5校验和。

#### HTTPS
HTTPS通过使用SSL/TLS在端与端之间传输加密后的消息，保护传输数据的隐密性和完整性。原始的HTTP协议依然按照之前同样的方式运作，不需要改变。

### 参考资料
- URL
- HTTP协议版本对比
- 《黑客攻防技术宝典——Web实战篇》

### JavaScript基础
#### 使用浏览器执行前端JavaScript
大多数浏览器可以通过F12调出调试窗口，如图所示。在调试窗口中可以执行相关代码。JavaScript是一种解释性语言，由解释器对代码进行解析。

示例代码：
```javascript
console.log("Hello World!");
```

#### JavaScript数据类型
- 基本类型：Number, String, Boolean, Null, Undefined, Symbol
- 引用类型：Object, Array, Function

#### JavaScript编程逻辑
- 条件语句：if, else, switch
- 循环语句：for, while, do-while
- 函数：function, 匿名函数, 箭头函数

#### JavaScript打印数据
- `console.log()`
- `alert()`
- `document.write()`

#### JavaScript框架
- jQuery
- React
- Angular
- Vue.js

#### JavaScript DOM 和 BOM
- DOM (Document Object Model)：文档对象模型，提供了一种结构化的表示文档的方法。
- BOM (Browser Object Model)：浏览器对象模型，提供了与浏览器窗口进行交互的对象。

#### JavaScript混淆
JavaScript代码混淆是为了增加代码的复杂性，防止被轻易理解和逆向工程。

#### 使用Node.js执行后端JavaScript
Node.js是一个基于Chrome V8引擎的JavaScript运行环境，可以在服务器端执行JavaScript代码。

#### Node.js模块
- CommonJS：Node.js默认的模块系统。
- ES Modules：ECMAScript标准的模块系统。

### 参考资料
- 使用浏览器执行前端JavaScript
- Node.js官方文档