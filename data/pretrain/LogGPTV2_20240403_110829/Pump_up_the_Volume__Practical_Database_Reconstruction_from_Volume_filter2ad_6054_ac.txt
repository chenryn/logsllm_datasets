cand = Vcand and V ∗
all processed ← TRUE
nec, V )
(cid:46) vol([1, 1]) or vol([N, N ])
for each e ∈ Vcomp :
if |Vcand| = Nmin then
Vnec ← Vcand
return Vnec
for each v ∈ Vcand \ Vnec :
22: procedure Augment NEC(Vcand, Vnec, Vcomp, Nmin)
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
if (cid:54) ∃(w, w(cid:48)) ∈ (Vcand \ {v})2 :(cid:12)(cid:12)w − w
if (cid:54) ∃(w, w(cid:48)) ∈ (Vcand \ {v})2 :(cid:12)(cid:12)w − w
Vnec ← Vnec ∪ {v}
for each v ∈ Vcand \ Vnec :
(cid:48)(cid:12)(cid:12) = e then
(cid:48)(cid:12)(cid:12) = v then
Vnec ← Vnec ∪ {v}
return Vnec
for each v ∈ Vcand \ Vnec :
for each vnec ∈ Vnec :
34: procedure Reduce CAND(Vcand, Vnec, V )
35:
36:
37:
38:
39:
if |v − vnec| /∈ V then
Vcand ← Vcand \ {v}
return Vcand
Our approach is motivated by the following observation: since the clique we want to ﬁnd must include
the nodes in Vnec, which already form a clique, we can reduce our problem to ﬁnding the rest of the
clique in the subgraph of non-necessary candidate nodes – that is, the subgraph induced by Vcand \ Vnec.
This second part of the clique must have the following properties. First, it must generate all missing
volumes – the volumes in V that do not arise as nodes or edges in the subgraph induced by Vnec – and
no volumes outside of V . The missing volumes could arise either as edges between the nodes of this
clique part, or as edges between its nodes and the nodes in Vnec. Second, if the number of elementary
volumes is between Nmin and Nmax, then this clique part must have size at least max{0, Nmin − |Vnec|}
and at most Nmax − |Vnec|. Given such a clique in the subgraph of non-necessary candidate nodes, we
recover the elementary volumes by combining it with Vnec.
10
Pseudocode for Step 3 is given in Algorithm 2. The Find Maximal Cliques subroutine called on
line 14 in Algorithm 2, which returns all maximal cliques in the subgraph induced by CANDnn, is not
speciﬁed:
it can be implemented using existing clique-ﬁnding algorithms. Algorithm 2 returns a set
of lists of volumes that (1) include vmin, (2) have size between Nmin and Nmax, (3) generate exactly
the volumes in V and no others, and (4) are not supersets of any other list of volumes in the returned
solution. This set of lists of volumes must include Velem, or a subset of Velem if the data was sparse. See
Lemma 2 in Appendix F for the full statement of correctness.
In addition, in Algorithm 3, we propose more practical variants of some subroutines from Algo-
rithm 2. We also modify the algorithm to return all solutions (when possible), not only minimal ones.
Speciﬁcally, we replace Min Subcliques with All Subcliques P as deﬁned starting on line 15 in
Algorithm 3. If it may be impractical to enumerate the subcliques whose sizes are in the right range,
we do not return any subcliques—the ﬁnal solutions will be incomplete.
3.2 Analysis of the Algorithm
Time complexity. The pre-processing step increases Vnec or decreases Vcand at each step; since there
are at most N (N + 1)/2 volumes, it follows that this step iterates O(N 2) times. The bulk of the time
complexity comes if clique-ﬁnding is run.
Finding maximal cliques. In general, a graph on n nodes can have an exponential number of maximal
cliques [MM65] – this clearly seems incompatible with our goal of practical reconstruction attacks. When
the number of nodes is small, however, it is still feasible to enumerate all of the maximal cliques with an
algorithm such as Bron–Kerbosch [BK73]. For larger domains, there exist logarithmic time algorithms
to sample one maximal clique at a time [Lub85].
Finding minimal subcliques. In the worst case, if the data is not dense, the check on line 40 in
Min Subcliques in Algorithm 2 will be carried out for 2|Vk| − 1 subcliques. In Section 3.3, we evaluate
a variant that either returns all subcliques, not just minimal subcliques, or fails if it is impractical to
do so.
Query complexity. We must assume something about the distribution to analyze the query complex-
ity of collecting all volumes. In the case of a uniform query distribution, this is the classic coupon col-
lector’s problem; because there are O(N 2) possible queries, coupon collection implies that O(N 2 log N )
queries suﬃce (and the constants are small).
For a non-uniform distribution, if the least likely range has probability
N (N +1)/2 , then a straightfor-
ward adaptation of coupon collection analysis shows that O(α−1N 2 log N ) queries suﬃce. Computing
coupon collector bounds for arbitrary distributions is straightforward, but somewhat tedious: Flajolet
et al. [FGT92] give a generating function for it. They also give a closed-form solution for one distribu-
tion of practical importance, namely the standard Zipf [Zip35] distribution (where the k-th most likely
element has probability proportional to 1/k). Somewhat surprisingly, their results imply that even if the
query distribution is standard Zipf, the query complexity of collecting all volumes is only O(N 2 log2 N ).
This means that even with a very skewed distribution the query complexity of our attack is not much
higher than with a uniform distribution.
α
Analytical model.
In order to provide insight into the behavior of our algorithm, in Appendix C, we
build an analytical model of the graph underpinning the algorithm. We assume the records are sampled
i.i.d. from a ﬁxed distribution. The database counts then follow a multinomial distribution, which
can be modelled (with only a factor of 2 loss in some cases [MU05]) by a series of independent Poisson
variables. Because a sum of Poisson variables is itself a Poisson variable, the number of records matching
any given range is also a Poisson variable. Using properties of the diﬀerence of Poisson variables, we
11
Algorithm 2 Recovering elementary volumes via clique-ﬁnding.
1: procedure Get Elem Volumes(N, Vcand, Vnec, V )
2:
3:
4:
5:
if |Vcand| = |Vnec| then
return Vnec
if 0 ∈ V then
V ← V \ {0}
Nmin ←(cid:108)−0.5 + 0.5 ·(cid:112)1 + 8 · |V |(cid:109)
(cid:46) Pre-processing success
(cid:46) Non-necessary candidate elem. volumes
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
else
Nmax ← min{N − 1,|Vcand|}
Nmin ← N
Nmax ← N
Mmin ← max{0, Nmin − |Vnec|}
Mmax ← Nmax − Vnec
CANDnn ← Vcand \ Vnec
cliques ← Find Maximal Cliques(CANDnn)
solutions ← {}
for all Vk ∈ cliques do
if |Vk| < Mmin then
if Gen All Volumes(Vnec ∪ Vk, V ) then
continue
solutions ← solutions ∪
Min Subcliques(Vk, V, Mmin, Mmax, Vnec)
21:
return solutions
if (cid:54) ∃ (v1, v2) ∈ Vnodes × Vnodes : |v2 − v1| = v then
for all v ∈ Vall do
22: procedure Gen All Volumes(Vnodes, Vall)
23:
24:
25:
26:
27:
if v /∈ Vall then
return FALSE
return TRUE
if Vnodes ⊆ Vall and Gen All Volumes(Vnodes, Vall) then
for all (v1, v2) ∈ Vnodes × Vnodes do
28: procedure Gen Exact Volumes(Vnodes, Vall)
29:
30:
31:
32:
33:
34:
35:
if |v2 − v1| /∈ Vall then
return FALSE
return FALSE
return TRUE
else
subcliques ← {}
for all m ∈ {mmin, . . . , min{mmax,|Vk|}} do
36: procedure Min Subcliques(Vk, Vall, mmin, mmax, Vnec)
37:
38:
39:
40:
41:
42:
43:
for all Vsk ∈ m-subsets(Vk) do
k ∈ subcliques : V (cid:48)
if Gen Exact Volumes(Vnec ∪ Vsk, Vall) then
k ⊂ {Vnec ∪ Vsk} then
subcliques ← subcliques ∪ {Vnec ∪ Vsk}
return subcliques
if (cid:54) ∃ V (cid:48)
12
else
cliques ← {}
if |CANDnn| ≤ 20 then
cliques ← Find Maximal Cliques(CANDnn)
for i ∈ {1, . . . , 1000} do
Algorithm 3 Practical, probabilistic subroutines for Alg. 2.
1: procedure Find Maximal Cliques P(CANDnn, Mmin, Vall)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
a clique ← Find A Maximal Clique(CANDnn)
if |a clique| ≥ Mmin then
if (cid:54) ∃ Vk ∈ cliques : Gen All Volumes(Vnec ∪ Vk, Vall) then
if cliques = {} then
return FAILURE
cliques ← cliques ∪ {a clique}
return FAILURE
return cliques
(cid:46) NetworkX
(cid:46) graph-tool
(cid:46) All sampled cliques too small
(cid:46) No sampled clique gen. all volumes
m=mmin
m
subcliques ← {}
if (cid:80)mmax
(cid:1) ≤ 2000 then
(cid:0)|Vk|
for all m ∈ {mmin, . . . , min{mmax,|Vk|}} do
15: procedure All Subcliques P(Vk, Vall, mmin, mmax, Vnec)
16:
17:
18:
19:
20:
21:
22:
subcliques ← subcliques ∪ {Vnec ∪ Vsk}
if Gen Exact Volumes(Vnec ∪ Vsk, Vall) then
for all Vsk ∈ m-subsets(Vk) do
return subcliques
can then approximate the collision probability between volumes, and ultimately compute estimates of
the number of distinct volumes, nodes, and edges in the graph.
√
To compute concrete bounds, we assume the database distribution is uniform. We show that the
number of volume collisions can be approximated by N 3/(4
πR). Experiments in Appendix C.4 support
this estimate. In particular, having no volume collision whatsoever would require R = Ω(N 6), which
is only reasonable for very low values of N . This shows the importance of using algorithms that are
resilient to the fact that volumes do collide, and hence do not in general identify a unique range; as is
the case of our algorithm.
We also show that the ratio R/N 2 relates both to the ratio of collisions among volumes, and to
the edge density of the graph, suggesting that it is a critical quantity for assessing the success of our
algorithm. Our experiments show that when this ratio is 1/2 or more, our algorithm typically succeeds
easily (even on non-uniform age data), while when it is much lower than 1/2 it typically fails.
Furthermore if we model the graph as a random graph, as far as its clique number is concerned
(and disregarding the existence of the two N -cliques stemming from elementary ranges), then we show
that for the two solution cliques stemming from elementary volumes to be of maximum size among all
cliques (and hence uniquely identiﬁable as such), it should be the case that R = Ω(N 2). We refer the
reader to Appendix C for more details.
3.3 Experimental Evaluation
In this section, we present an experimental evaluation of the reconstruction attack from the previ-
ous section. We simulate an attacker who has observed enough queries to see all possible volumes
of range queries. We implemented our algorithms in Python and used the graph-tool [Pei14] and
NetworkX [HSS08] packages for ﬁnding cliques or maximal independent vertex sets.
Datasets and methodology. We test our algorithm on various attributes from three years of med-
13