3Bad output responses in a Mealy machine correspond to bad states
of an equivalent Moore machine.
428(a)
(b)
1
1/2
2/3
3/2
2
1/3
3/1
2/2
2/1
3/3
3
1/1
E
2
3
1
2
3
1
2
3
2
3
1
1
2
3
1
2
3
1
2
1
2
3
3
1
2
3
1
2
3
1
3
1
2
S
I
Σ
·
S
ε
2
3
1
2 · 1
2 · 2
2 · 3
3 · 1
3 · 2
3 · 3
Figure 2: A Mealy Machine and the Corresponding Observa-
tion Table. The initial state is denoted by an incoming edge with
no source. Edges are labeled with input/output symbols. In this
paper, all three set of labels — state, input, and output labels
— are unrelated sets of integers.
Finiteness. We are interested in inferring ﬁnite-state protocols
(or ﬁnite abstractions of inﬁnite-state ones) with ﬁnite input and
output alphabets. We leave the inference of more expressive models
for the future work.
Known Message Format Semantics. To abstract input and out-
put messages with a ﬁnite alphabet, we rely upon the previous work
on automatic message format reverse-engineering [7]. Another in-
teresting option is the automatic message clustering and abstraction
proposed by Comparetti et al. [10].
Known Encryption. Many botnet protocols encrypt messages,
complicating protocol inference. If protocol messages are encrypted,
our approach needs to know the protocol encryption and decryption
functions. We leverage the previous work of Caballero et al. [5] to
automatically extract and circumvent encryption functions.
3. BACKGROUND MATERIAL
This section brieﬂy surveys prior work required for understand-
ing this paper. In the ﬁrst half, we provide a brief overview of the
main deﬁnitions and results in the automata theory and inference.
In the second half, we brieﬂy describe botnets, which are our main
targets. Even though the targets that we study are highly speciﬁc,
the results of our research are applicable to a broad range of proto-
cols in the realistic network setting.
3.1 Inference of Mealy Machines
Protocol inference is a special case of the grammatical inference
problem [14], because the problem of the ﬁnite state-machine infer-
ence is isomorphic to the problem of learning a regular language.
In this paper, we solely use Mealy machines, as they are a more ap-
propriate model for reactive systems, which have neither accepting
nor rejecting states, and are more compact than Moore machines
[28] by a linear factor equal to the size of the output alphabet.
DEFINITION 1
(MEALY MACHINE [26]). A Mealy machine
is a six-tuple (Q, ΣI , ΣO,δ,λ, q0), where Q is a ﬁnite non-empty
set of states, q0 ∈ Q is the initial state, ΣI is a ﬁnite set of input
symbols, ΣO is a ﬁnite set of output symbols, δ : Q × ΣI −→ Q is
the transition relation, and λ : Q × ΣI −→ ΣO is the output relation.
In this paper, we focus on inferring complete protocol state ma-
chines. A complete Mealy Machine is deﬁned as follows:
DEFINITION 2
(COMPLETE MEALY MACHINE).
A Mealy machine (Q, ΣI , ΣO,δ,λ, q0) is complete if and only if δ
and λ are deﬁned ∀m ∈ ΣI and ∀q ∈ Q.
We rely upon prior work [6] for reverse-engineering of the al-
phabet and claim no contribution on that front. We are not aware of
any automatic technique capable of reverse-engineering the com-
plete alphabet, so we necessarily have to work with a subset. Given
a subset of the alphabet, our technique infers a complete state-
machine (Deﬁnition 2), in contrast to prior work on protocol infer-
ence that learns incomplete state-machines [10, 21]. To the best of
our knowledge, our work is the ﬁrst to demonstrate a technique for
complete protocol state-machine inference in the realistic network
setting.
In this paper, input symbols will be denoted with letters from
the beginning of the alphabet a, b, c, output symbols with letters
from the end of the alphabet x, y, and strings of input symbols
with letters r, s,t, u. The set of all symbols in a given string is
denoted as [ ], e.g., [a · b · b] = {a, b}, where ‘·’ is the concatena-
tion operator. We extend the δ and λ relations to strings of char-
acters from ΣI , for example, δ∗ (q, a · b · c) = δ (δ (δ (q, a) , b) , c)
and λ∗ (q, a · b · c) = λ (q, a)·λ (δ∗ (q, a) , b)·λ (δ∗ (q, a · b) , c). We
shall frequently use a more intuitive term response for a string of
output symbols returned by λ∗.
Angluin [3] proposed the ﬁrst polynomial algorithm, called L∗,
for learning Moore machines. Shahbaz and Groz [33] adapted the
algorithm for Mealy machines and proposed several optimizations.
In this section, we brieﬂy describe Shahbaz and Groz’s algorithm,
while in the following section, we describe our improvements and
optimizations of their algorithm. The L∗ algorithm maintains an
observation table:
DEFINITION 3
(OBSERVATION TABLE [3]). An observation
table is a triple (S, E, T ), where S is a preﬁx-closed4 set of strings of
input symbols from Σ∗
I and set E is a sufﬁx-closed set of strings from
Σ+
I . Let set S · ΣI be deﬁned as a concatenation of all strings in S
with every alphabet symbol in ΣI , i.e.: S· ΣI = {s · a | s ∈ S, a ∈ ΣI }.
Then map T : (S ∪ S · ΣI ) × E −→ Σ+
O is a map from S ∪ S · ΣI and
E to a non-empty sequence of output symbols. Map T has an ad-
ditional property: ∀s ∈ S ∪ S · ΣI , r ∈ E, x ∈ Σ+
O . (T (s, e) = x) ⇒
|r| = |x|.
Intuitively, S and S · ΣI can be seen as two sets of rows, E as a
set of columns, and T as a map that maps input strings obtained
by concatenation of rows (S ∪ S · ΣI ) and columns (E) to output
strings of the same length as the column part of the input string.
For example, from Table 2b, it follows that T (2 · 1, 3) = 2, where
2 · 1 ∈ S · ΣI is a row and 3 ∈ E is a column.
Angluin introduced two observation table properties: closure and
consistency. Only the ﬁrst property is important for understanding
this paper, while the second is always satisﬁed if T is computed in
a speciﬁc way [33].
DEFINITION 4
(CLOSED OBSERVATION TABLE [3]). We say
that an observation table is closed if and only if ∀s ∈ S · ΣI . ∃t ∈
S . ∀r ∈ E . T (s, r) = T (t, r).
Intuitively, a table is closed if for every row s in the S · ΣI set of
rows, there is a row t in S having exactly the same responses, i.e.,
∀r ∈ E . T (s, r) = T (t, r). For example, Table 2b is closed. Table
T is usually computed in such a way that no two rows in S are
equivalent, i.e., there is always only one representative in S of each
class of equivalent rows. For example, rows ε and 2 · 3 in Table
2b are equivalent, so only one representative (ε) is in S. Further,
the representative put in S is minimal, according to the following
ordering.
4Let Pref be a function that returns a set of all preﬁxes of a string.
Set S is preﬁx-closed if and only if ∀s ∈ S . Pref (s) ⊆ S. Note that
an empty string ε is a preﬁx of every string. The deﬁnition of a
sufﬁx-closed set is similar.
429DEFINITION 5
(LEXICOGRAPHIC ORDERING). Let lexicogra-
phic ordering relation <: Σ∗
I −→ Bool be a total order relation
over two strings of input symbols, say s = a0 · · · an and t = b0 · · · bm,
deﬁned as follows.
I ×Σ∗
Angluin [3]. The sampling queries generated in the second step of
L∗ are called equivalence queries, for they check the equivalence
between the conjectured and to-be-learned machine.
s < t =
|s| < |t|
a j <a b j
false
if
if
|s| 6= |t|
s 6= ε ∧ a j 6= b j ∧ ∀0 ≤ i < j < |s|.ai = bi
otherwise
Deﬁne s ≤ t as s < t ∨ s = t. The alphabet symbols are ordered
according to some arbitrary total ordering <a.
E = E ∪ u
for all t ∈ S ∪ S · ΣI do
Intuitively, the deﬁnition imposes a total ordering on strings,
given a total order of the alphabet symbols, e.g., if a <a b <a c,
then b · a < b · c. We use this ordering in our implementation of the
L∗ algorithm (Algorithm 1) to choose the minimal representative
of a class of equivalent rows.
Algorithm 1 The L∗ Algorithm: Closing the Observation Table.
1: S = /0, S · ΣI = {ε} , E = ΣI
2: while ∃ s ∈ S · ΣI . (∀t ∈ S · ΣI . s ≤ t)∧
(∀t ∈ S . ∃ r ∈ E . T (s, r) 6= T (t, r)) do
3:
4:
5:
6:
7:
8:
9:
Move s to S
for all a ∈ ΣI do
S · ΣI = S · ΣI ∪ s · a
for all u ∈ E do
Compute response to s · a · u
Take sufﬁx x of the response (last |u| symbols)
Update table T (s · a, u) = x
10: Run sampling and Algorithm 2 if there is a counterexample
Next, we give a high-level description of the L∗ algorithm. L∗
has two steps. In the ﬁrst step, L∗ initializes S to a set containing an
empty string, S · ΣI to an empty string ε, the columns E to the input
alphabet5, and T to the responses of the system under study to in-
puts constructed from concatenating the rows (i.e., an empty string
at this point) with columns (individual alphabet symbols at this
point). The algorithm then iteratively keeps closing the table and
re-computing the responses to all S · ΣI · E sequences of messages.
Each sequence has to be generated, transmitted on the network,
response recorded, and stored into table T . The S · ΣI · E queries
generated in the ﬁrst step of L∗ are called membership queries.
In the second step, L∗ constructs a complete minimal conjecture
automaton from a closed table. This construction is performed as
follows: The rows in S represent the minimal set of states, rows in
S · ΣI represent transitions for every symbol in ΣI , and the range of
T (i.e., the elements of the table) represent the output relation. The
conjectured automaton is then, in the original algorithm [3], passed
to a teacher, which either conﬁrms that the machine has been cor-
rectly learned, or returns a counterexample. The counterexample is
a sequence of inputs and corresponding outputs that does not match
the conjectured machine. Of course, we cannot ask the bot master
to tell us whether our conjectured state-machine is correct or not,
so we use a sampling-based approach [3], which randomly gener-
ates uniformly distributed sequences of messages used to sample
the protocol’s state-machine and discover mismatches. If the re-
sponse of the agents involved in the message exchange does not
match those predicted by the conjectured state-machine, we have
a counterexample. Based on the number of sampling sequences
and the number of conjectures, one can compute the accuracy and
conﬁdence that the conjectured machine is correct, as proposed by
Algorithm 2 The L∗ Algorithm: Handling Counterexamples.
1: Let r, x be a counterexample input (r) and its response (x)
2: Let r = p · s, s.t. p ∈ S ∪ S · ΣI and p is the longest such preﬁx
3: for all u sufﬁxes of s do
4:
5:
6:
7:
8:
9: Run the inner loop of Algorithm 1 if T changed
Compute response to t · u
Take sufﬁx y of the response (last |u| symbols)
T (t, u) = y
⊲ If t · u = r, response is x
Algorithm 2 illustrates Shahbaz and Groz’s algorithm for han-
dling counterexamples. When a counterexample, an input (r) and
the corresponding response (x), is found, the algorithm ﬁnds the
longest preﬁx of r existing in S ∪ S · ΣI, and trims that preﬁx. The
remaining sufﬁx and all its sufﬁxes are added to the columns (set E)
of the observation table, and the responses for all the rows extended
with newly added sufﬁxes are computed.
The number of required membership queries depends on the size
of the state-machine to be inferred. Even a twenty-state machine
could require tens of thousands of queries. To reduce the number
of membership queries, we developed a novel response prediction
heuristic, which exploits redundancy in inferred models. Any mis-
predictions are guaranteed to be detected by the sampling queries
with the desired accuracy and conﬁdence. Since the number of
sampling queries is computed solely from the accuracy, conﬁdence,
and the number of conjectures [3], detecting mispredictions does
not require any additional sampling queries.
Our response prediction heuristic exploits the abundance of self-
loop transitions, deﬁned as follows.
DEFINITION 6
(SELF-LOOP TRANSITIONS). Let q be some
state and a some input symbol. Transitions for which δ (q, a) = q
are called self-loop transitions.
3.2 Botnets
A botnet is a network of compromised hosts controlled remotely
by botmasters to carry out nefarious activities such as denial of
service, theft of personal information, and spamming. Botmasters
control their botnets through a system of Command and Control
(C&C) servers. MegaD is a mass spamming botnet ﬁrst observed
2007, and was responsible for one-third of the world’s spam at its
peak6. The main MegaD C&C server used by each pool of bots is
the Master server, which points bots to a set of auxiliary (Template,
SMTP, and Drop) servers. A spamming MegaD bot contacts only
the Template and SMTP servers [8].
MegaD has been the target of multiple takedown attempts. The
most recent attempt occurred in Nov. 2009, but MegaD bounced
back after the takedown. The common practice to botnet takedowns
is to identify as many C&C servers as possible, and attempt to crip-
ple the entire botnet by sending abuse notiﬁcations to all ISPs in-
volved simultaneously.7 This is an expensive exercise requiring
careful co-ordination among all parties involved. In this paper, we
show through protocol inference that MegaD’s SMTP servers are
actually the critical link in the C&C, and taking just SMTP servers
down would be a cheaper and simpler option.
5The algorithm can also trivially handle monotonically increasing
alphabets, useful when new messages are discovered during the in-
ference, but we abstracted that away for clarity.
6http://www.m86security.com/trace/i/Mega-D,spambot.896∼.asp
7http://blog.ﬁreeye.com/research/2009/11/smashing-the-
ozdok.html
430Bot Master Server
Spam Template Server
Botnet SMTP Server
k
r
o
w
t
e
N
r
o
T
Bot 
Emulator
Bot 
Emulator
Bot 
Emulator
Bot 
Emulator
Bot 
Emulator
Bot 
Emulator
Bot 
Emulator
Bot 
Emulator
e
h
c
a
C
y
r
e
u
Q
n
o
i
i
i
t
c
d
e
r
P
e
s
n