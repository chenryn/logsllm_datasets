1.  从您的集群中，部署`cert-manager`清单:
    ```
    $ kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.16.1/cert-manager.yaml
    ```
2.  一旦 Pods 在`cert-manager`命名空间中运行，创建一个自签名证书，我们将使用它作为我们的证书颁发机构。在这本书的 Git 库的`chapter14/shell`目录中有一个名为`makeca.sh`的脚本，它将为你生成这个证书:
    ```
    $ cd Kubernetes-and-Docker-The-Complete-Guide/chapter14/shell/
    $ sh ./makeca.sh
    Generating RSA private key, 2048 bit long modulus (2 primes)
    .............................................................................................................................................+++++
    ....................+++++
    e is 65537 (0x010001)
    ```
3.  现在有一个带有证书和密钥的 SSL 目录。下一步是从这些文件中创建一个机密，它将成为我们的证书颁发机构:
    ```
    $ cd ssl/
    $ kubectl create secret tls ca-key-pair --key=./tls.key --cert=./tls.crt -n cert-manager
    secret/ca-key-pair created
    ```
4.  接下来，创建`ClusterIssuer`对象，这样我们所有的`Ingress`对象都可以拥有正确铸造的证书:
    ```
    $ cd ../../yaml/
    $ kubectl create -f ./certmanager-ca.yaml
    clusterissuer.cert-manager.io/ca-issuer created
    ```
5.  With `ClusterIssuer` created, any `Ingress` object with the `cert-manager.io/cluster-issuer: "ca-issuer"` annotation will have a certificate signed by our authority created for them. One of the components we will be using for this is our container registry. Kubernetes uses Docker's underlying mechanisms for pulling containers, and KinD will not pull images from registries running without TLS or using an untrusted certificate. To get around this issue, we need to import our certificate into both our worker and nodes:
    ```
    $ cd ~/
    $ kubectl get secret ca-key-pair -n cert-manager -o json | jq -r '.data["tls.crt"]' | base64 -d > internal-ca.crt
    $ docker cp internal-ca.crt cluster01-worker:/usr/local/share/ca-certificates/internal-ca.crt
    $ docker exec -ti cluster01-worker update-ca-certificates
    Updating certificates in /etc/ssl/certs...
    1 added, 0 removed; done.
    Running hooks in /etc/ca-certificates/update.d...
    done.
    $ docker restart cluster01-worker
    $ docker cp internal-ca.crt cluster01-control-plane:/usr/local/share/ca-certificates/internal-ca.crt
    $ docker exec -ti cluster01-control-plane update-ca-certificates
    Updating certificates in /etc/ssl/certs...
    1 added, 0 removed; done.
    Running hooks in /etc/ca-certificates/update.d...
    done.
    $ docker restart cluster01-control-plane
    ```
    第一个命令从我们为托管证书而创建的机密中提取证书。下一组命令将证书复制到每个容器，指示容器信任它，最后重新启动容器。一旦你的容器重启，等待所有的 Pods 回来；可能需要几分钟。
    重要说明
    现在是下载`internal-ca.crt`的好时机；将其安装到您的本地工作站上，并可能安装到您选择的浏览器中。不同的操作系统和浏览器对此的处理方式不同，因此请查看相关文档了解如何处理。信任该证书将使与应用交互、推送容器和使用命令行工具时变得更加容易。
`cert-manager`准备好颁发证书，并且您的集群和工作站都信任这些证书，下一步是部署容器注册表。
## 部署 Docker 容器注册表
Docker，Inc .提供了一个简单注册表。这个注册表上没有安全性，所以它对于生产使用来说肯定不是一个好的选择。`chapter14/yaml/docker-registry.yaml`文件将为我们部署注册表并创建一个`Ingress`对象。部署前，编辑该文件，将`192-168-2-140`的所有实例更改为集群 IP 地址的破折号表示。例如，我的集群运行在`192.168.2.114`上，所以我将用`192-168-2-114`替换`192-168-2-140`。然后，在清单上运行`kubectl create`来创建注册表:
```
$ kubectl create -f ./docker-registry.yaml
namespace/docker-registry created
statefulset.apps/docker-registry created
service/docker-registry created
ingress.extensions/docker-registry created
```
一旦注册表运行，您可以尝试从您的浏览器访问它:
![Figure 14.5 – Accessing the container registry in a browser ](img/Fig_14.5_B15514.jpg)
图 14.5–在浏览器中访问容器注册表
因为注册表没有 web UI，所以您不会看到太多，但是也不应该出现证书错误。那是因为我们部署了`cert-manager`，正在发放签名证书！运行我们的注册表后，最后一个要部署的组件是 OpenUnison。
## 部署开放协调
在 [*第 7 章*](07.html#_idTextAnchor203)*将认证集成到您的集群*中，我们引入了 OpenUnison 来验证对我们的 KinD 部署的访问。OpenUnison 有两种口味。我们已经部署的第一个是登录门户，它允许我们使用中央源进行认证，并将组信息传递给我们的 RBAC 策略。第二个是自动化门户，我们将使用它作为集成管理我们管道的系统的基础。该门户还将为我们提供一个中央用户界面，用于请求创建项目和管理对项目系统的访问。
我们定义了我们部署的每个项目将有三个“角色”，它们将跨越几个系统。您的企业会让您为我们创建的每个项目创建和管理组吗？有些人可能会，但活动目录在大多数企业中是一个关键组件，并且很难获得写访问权限。运行您的活动目录的人员不太可能与您在管理集群时向其报告的人员相同，这使得您获得您拥有管理权限的活动目录区域的能力变得复杂。OpenUnison 自动化门户允许您管理可以轻松查询的本地组的访问，就像使用活动目录一样，但是您可以控制管理它们。不过，我们仍将根据我们的中央 SAML 提供商进行认证。
为了促进 OpenUnison 的自动化功能，我们需要部署一个数据库来存储持久数据，并部署一个 SMTP 服务器来通知用户何时有打开请求或何时请求已经完成。对于数据库，我们将部署开源的 MariaDB。对于**简单邮件传输协议** ( **SMTP** )(电子邮件)服务器，大多数企业对发送电子邮件有非常严格的规定。我们不想为设置电子邮件通知而担心，所以我们将运行一个“黑洞”电子邮件服务，它会忽略所有 SMTP 请求:
1.  首先，从书的 GitHub 存储库中运行`chapter14/yaml/mariadb.yaml`清单。无需进行任何更改。
2.  接下来，部署 SMTP 黑洞:
    ```
    $ kubectl create ns blackhole
    namespace/blackhole created
    $ kubectl create deployment blackhole --image=tremolosecurity/smtp-blackhole -n blackhole
    deployment.apps/blackhole created
    $ kubectl expose deployment/blackhole --type=ClusterIP --port 1025 --target-port=1025 -n blackhole
    service/blackhole exposed
    ```
3.  随着 MariaDB 和我们的 SMTP 服务的部署，我们能够部署 OpenUnison。按照第 7 章 、*中 [*的*部署开放协调器*部分的*步骤 1–5*将认证集成到您的集群中*，部署开放协调器操作器和 Kubernetes 仪表板。](07.html#_idTextAnchor203)*
4.  接下来，创建一个`Secret`来存储访问 MariaDB 和 SMTP 服务的凭据。为了简单起见，我们将密码硬编码到我们的马里亚数据库部署中，因此确保为您的生产数据库帐户生成长的随机密码！在集群中创建以下`Secret`:
    ```
    apiVersion: v1
    type: Opaque
    metadata:
      name: orchestra-secrets-source
      namespace: openunison
    data:
      K8S_DB_SECRET: aW0gYSBzZWNyZXQ=
      SMTP_PASSWORD: ""
      OU_JDBC_PASSWORD: c3RhcnR0MTIz
      unisonKeystorePassword: aW0gYSBzZWNyZXQ=
    kind: Secret
    ```
5.  我们将在 [*第 7 章*](07.html#_idTextAnchor203) 、*将认证集成到您的集群中*的*配置您的集群进行模拟*部分中重用我们在*步骤 2* 中使用的 Helm 值，有三处更改。
6.  首先，将映像从`docker.io/tremolosecurity/openunison-k8s-login-saml2:latest`更改为`docker.io/tremolosecurity/openunison-k8s-saml2:latest`。
7.  接下来，Base64-将您的`internal-ca.crt`文件编码成一行，并将其添加到`values.yaml` :
    ```
    $ base64 -w 0 < internal-ca.crt
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0 tCk1JSUREVENDQWZXZ0F3SUJ…
    ```
    的`trusted_certs`部分
8.  添加 SMTP 和数据库部分。`values.yaml`的更新如下。一去掉了大部分不变的部分以节省空间:
    ```
    trusted_certs:
      - name: internal-ca
        pem_b64: LS0tLS1CRUdJTiB…
    saml:
      idp_url: https://portal.apps.tremolo.io/idp-test/metadata/dfbe4040-cd32-470e-a9b6-809c8f857c40
      metadata_xml_b64: ""
    database:
      hibernate_dialect: org.hibernate.dialect.MySQL5InnoDBDialect
      quartz_dialect: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      driver: com.mysql.jdbc.Driver
      url: jdbc:mysql://mariadb.mariadb.svc.cluster.local:3306/unison
      user: unison
      validation: SELECT 1
    smtp:
      host: blackhole.blackhole.svc.cluster.local
      port: 1025
      user: none
      from: PI:EMAIL
      tls: false
    ```
9.  使用掌舵图
    ```
    $ helm install orchestra tremolo/openunison-k8s-saml2 --namespace openunison -f ./openunison-values.yaml
    ```
    部署 OpenUnison
10.  一旦打开，编辑`orchestra`打开统一对象到移除`unison-ca`键。移除看起来像这样的区块:
    ```
          - create_data:
              ca_cert: true
              key_size: 2048
              server_name: k8sou.apps.192-168-2-114.nip.io
              sign_by_k8s_ca: false
              subject_alternative_names:
              - k8sdb.apps.192-168-2-114.nip.io