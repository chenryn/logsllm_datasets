# ARM-based Shellcodes and Identification

## Can We Identify Something New?

### Static Features
- **Correct Disassembly**: Accurate disassembly for a chain of at least K instructions.
- **CPU Mode Switching**: Use of `BX Rm` to switch between CPU modes.
- **Get-UsePC Code**: Presence of code that retrieves and uses the Program Counter (PC).
- **Specific Patterns**: The number of specific patterns, such as argument initializations and function calls, exceeds a certain threshold.
- **Argument Initialization**: Arguments are initialized strictly before system calls.
- **Memory Operations**: Cycles of writing to and loading from memory.
- **Return Address Range**: The return address falls within a specific range of values.
- **Last Instruction**: The last instruction in the chain is either a branch with link (`BL`, `BLX`) or a system call (`svc`).
- **Operand Initialization**: Operands for self-identified code and code with indirect jumps must be initialized.

### Correct Disassembly for a Chain of at Least K Instructions
- **Not Shellcode**: If the disassembly is incorrect, it is not shellcode.
- **Shellcode**: If the disassembly is correct, it is likely shellcode.

### Command of CPU Mode Switching (BX Rm)
- **CPU Mode Switch**: Indicates a change in CPU mode.
- **Thumb Mode**: Shellcode may operate in Thumb mode.
- **Arguments for System Call**: Specific arguments for system calls.
- **PC Register**: Used for jumps and other operations.
- **Jump with Exchange**: Involves switching between ARM and Thumb modes.

### Existing Get-UsePC Code
- **PC Register**: Used to get and use the PC.
- **Encrypted Shellcode**: May involve encrypted shellcode.
- **Get PC into LR Register (r14)**: Transfers the PC value to the Link Register.

### Argument Initializations for System Calls and Library Calls
- **System Call Number**: Specifies the type of system call.
- **Examples**:
  - `_socket #281`
  - `_connect #283`

### Write to Memory and Load from Memory Cycles
- **Encrypted Shellcode**: Involves reading from and writing to memory.
- **Cycle Counter**: Tracks the number of read and write cycles.
- **Address of Encrypted Payload**: Location of the encrypted payload.
- **Main Cycle**: Central loop for decryption and execution.

### Return Address in Some Range of Values
- **Return Address**: Must fall within a specified range.
- **Vulnerable Buffer**: Potential buffer overflow target.
- **Stack and Payload**: Locations for shellcode and return addresses.
- **Return Address Zone**: Specific area where return addresses are expected.

## Dynamic Features
- **Payload Reads**: The number of reads from the payload exceeds a threshold.
- **Unique Writes to Memory**: The number of unique writes to memory exceeds a threshold.
- **Control Flow Redirection**: Control flow is redirected to a recently written address at least once.
- **Executed wx-Instructions**: The number of executed write-execute instructions exceeds a threshold.
- **Conditional-Based Signatures**: Use of conditional instructions to control flow.

### Read and Write to Memory
- **Decryptor**: Decrypts the payload.
- **Encrypted Payload**: Contains the encrypted data.
- **Unique Reads and Writes**: Tracks the number of unique memory accesses.

### Control Flow Switch
- **Decryptor**: Manages the decryption process.
- **Decrypted Payload**: Result of the decryption.
- **Control Flow**: Directs the execution flow.

### Conditional-Based Signatures
- **Flags and Conditions**: Use of flags (Z, C) and conditional blocks (e.g., `ADDEQS`, `ADDCCS`).
- **Execution Paths**: Different paths based on flag states.

## Whatâ€™s Next
- **Module Development**: Create another module for shellcode detection in the tool Demorpheus.

## Demorpheus - Idea
- **Decision-Making Module**: Uses a hybrid classifier.
- **Data Flow**: Manages the flow of data through different levels of complexity.
- **Disassembling**: Reconstructs the Control Flow Graph (CFG) and Interprocedural Flow Graph (IFG).
- **Feature Detection**: Identifies various features using detectors.

## Experiments
- **Datasets**:
  - Shellcodes
  - Legitimate Binaries
  - Random Data
  - Multimedia

### Datasets
- **False Negatives (FN) and False Positives (FP)**:
  - **Shellcodes**: FN = 0, FP = n/a
  - **Legitimate Binaries**: FN = n/a, FP = 1.1
  - **Multimedia**: FN = n/a, FP = 0.33
  - **Random Data**: FN = n/a, FP = 0.27

### Throughput
- **Shellcodes**: 56.5 Mb/s
- **Legitimate Binaries**: 64.8 Mb/s
- **Multimedia**: 93.8 Mb/s
- **Random Data**: 99.5 Mb/s
- **Hardware**: 2 GHz Intel Core i7

## Questions?
- @SadieSv, @_IvanPetrov_