if uninitialized(opi) then
ValueSeti
newValueSeti
else
15
16
17
18
19
20
21
if newValueSeti
ValueSeti
push(worklist, succs(i))
entryn )
exit
(I) Handling context-sensitivity. It will be overly compli-
cated if a function is called multiple times when performing
the inter-procedureal analysis in a CFG. We therefore
augment our VSA with a cloning-based context sensitivity
analysis [38]. Basically, we have a separate analysis for
each function clone per calling context. More speciﬁcally,
we generate a function clone for every acyclic path through
a program call graph and, for cyclic paths, we merge all
functions in a strongly connected component to have a single
function context for them as in [38].
(II) Handling ﬂow-sensitivity. Since VSA is ﬂow-sensitive
and per-instruction, it is an engineering challenge to inspect
each instruction statically. We therefore borrow the idea
of how symbolic execution interprets each instruction and
updates the corresponding symbolic states. Essentially,
when perform our ﬂow sensitivity analysis, we need to
interpret each instruction, and updates the VSA based on
its semantics. Since symbolic execution is well studied
(with many open source tools), we do not describe how
we implement our interpreter and instead we abstract it as
a simple EXE operation (line 18) in algorithm 1, which is
responsible to capture the value set changes for each analyzed
instruction (working as a transfer function in static analysis).
In particular, all incoming value sets are merged on a per
register and memory cell basis as input value sets and are
fed into the static reasoning engine EXE to update the value
sets of each registers and memory cells for this analyzed
instruction i according to its semantics, and this updated
value set forms the output of our static analysis for this
particular instruction. A work list keeps looping and works
on each instruction as such, until a ﬁxed point is reached.
(III) Handling a-locs with unknown values or addresses.
Performing VSA on binary suffers from the lack of dynamic
information (e.g., calling context, and concrete memory
addresses). One major issue when applying VSA on
real-world binary is uninitialized variables and their aliases.
Among these uninitialized variables, some are used in address
calculation, which leads to a-locs with unknown addresses.
To conservatively taint instructions, we need to infer the
value set of these unknown addresses; otherwise the reads
and writes to them would indicate the reads and writes to the
whole address space.
In case VSA encounters an a-loc with uninitialized values
or addresses due to system inputs for instance, the special
handling is shown in line 16-17 in algorithm 1. In particular,
our analysis will assume the uninitialized a-loc to have any
value, i.e., with the value set (,,). In practice, we have
identiﬁed the following three cases in which VSA cannot
determine the corresponding addresses:
(i) Unknown values from command line input (CLI),
e.g., argv[]. The argv elements are pointers which
is uninitialized at analysis-time. As shown in Figure 4a,
instruction at 0x804b362 reads argv[0] which is
unknown at analysis-time.
(ii) Unknown addresses or values passed from missing
callers. Even we use approaches such as TypeArmor
to recover CFG, there are still some callee functions
without callers and the calling context is missing for
these callee. As shown in Figure 4b, the function
version_etc_arn has no identiﬁed callers, and thus,
the value of parameter at instruction 0x804b7a7 is
uninitialized.
(iii) Unknown addresses or values due to library func-
tions and system calls. For instance, fopen64 function
returns a pointer which is a pointer to FILE struct that is
uninitialized at analysis-time as illustrated in Figure 4c.
4.3 Taint Instruction Identiﬁcation
After our whole program VSA analysis, we next need to iden-
tify the instructions that need to be instrumented for the taint
analysis with the computed VSA. To this end, we have to
decide whether a memory address involves taint or not, which
essentially leads to problem of point-to (i.e., alias) analysis.
However, due to the imprecision of the static point-to analy-
sis, we may not be able to resolve all memory addresses with
VSA [3, 4], and instead we focus on identifying the addresses
that will never be involved in taint analysis for each speciﬁc
instruction (since VSA is ﬂow sensitive). Initially, all instruc-
tions will be marked tainted (i.e., they will all be instrumented
for taint analysis). As described in §3.2, our key objective is to
minimize this set, by identifying and enlarging the must-not
tainted set. In the following, we describe how we achieve this.
USENIX Association
30th USENIX Security Symposium    1671
bzip2
0804b296 :
804b296: push
804b297: mov
...
804b2a2: mov
...
804b362: mov
%ebp
%esp,%ebp
0xc(%ebp),%esi
(%esi),%edx
(a) Entry-function uninitialized variable
comm
0804b7a0 :
804b7a0: push
804b7a1: push
804b7a2: push
804b7a3: push
804b7a4: sub
804b7a7: mov
804b7ab: mov
804b7af: mov
804b7b3: mov
804b7b7: test
804b7b9: mov
804b7c0: mov
%ebp
%edi
%esi
%ebx
$0x5c,%esp
0x74(%esp),%eax
0x70(%esp),%esi
0x78(%esp),%edx
0x7c(%esp),%ecx
%eax,%eax
0x80(%esp),%ebx
0x84(%esp),%edi
(b) Incomplete CFG caused uninitialized variable
cut
08049dd0 :
8049dd0:push
%ebp
%edi
8049dd1: push
%esi
8049dd2: push
%ebx
8049dd3: push
8049dd4: sub
$0x4c,%esp
...
8049df3: call
8049df8: test
8049dfa: mov
8048e70 
%eax,%eax
%eax,%ebp
(c) fopen64 uninitialized variable
Figure 4: Example code of uninitialized variable in whole
program VSA
4.3.1 Must-not Tainted Analysis
In order to statically identify instructions never involved in
taint analysis, we should know the must-not tainted value
set, which is an opposite, more conservative counter-part of
the intuitive tainted value set, at each program point. This
is also a data ﬂow analysis problem, and we have to inspect
each instruction to decide whether its operand will never be
involved in taint or not.
Identiﬁcation Policy. Must-not-tainted set is based on the fol-
lowing policy: (1) instructions unreachable from taint sources
are removed from the must-not-tainted set (which is one of the
differences compared to DBI-based taint implementations),
e.g., in Figure 5a, the instruction at 80491b7, which is at the
beginning of the program, is removed from must-not-tainted
set as 804b4e1 is the ﬁrst instruction that introduces the
taint; (2) instructions with operands of potentially tainted or
unknown value sets are removed from must-not-tainted set
such as the instruction at 8055c41 that may contain tainted
data from __IO_getc function return value in Figure 5b; (3)
instructions whose operands hold literal values are added
to must-not-tainted set since none of the operands will be
tainted, e.g., instruction inc %ebp whose operand contains a
literal value in register ebp as shown in Figure 5c is added to
must-not-tainted set; (4) instructions whose opcode indicates
they will not be involved in taint propagation are added to
must-not-tainted set, e.g., control-ﬂow instructions (e.g., jmp
in Figure 5d) and compare and test instructions (e.g., cmp,
and test). The must-not tainted value set will propagate
along with data ﬂow, and it is a must analysis.
80491b7: mov
...
804b4e1: call
%eax,0x8052160
8048d70 
(a) Unreachable instructions
8055c3c: call
8055c41: mov
8048f30 
%eax,%edx
(b) Potentially tainted instructions
8096a07: inc
%ebp
(c) Untainted operand instructions
8062456: jmp
806238b 
(d) None taint-propagation instructions
Figure 5: Example code of the corresponding identiﬁca-
tion policy
Resolving operand’s addresses. To conservatively track the
must-not tainted value sets, we have to look into different
types of memory access of an instruction operand: (1) for con-
stant memory address, e.g., [0x8000200], we can easily infer
that it is a global variable rather than a local variable or a heap
variable and the must-not tainted value sets of that address
can be updated based on the constant memory address, e.g.,
if this constant memory address may be tainted, the constant
memory address would be removed from our must-not-tainted
set; (2) for a memory access based on ESP register, which we
call stack pointer addressing, e.g., [esp + 0x4], we identify
it as a stack variable, the stack region and offset can be ob-
tained through our whole program analysis caller/callee stack
information; (3) for a memory access without ESP register,
e.g., [eax], this is tricky since we may not know whether it is
a stack, global or heap variable; we thus use the VSA result to
decide the value set of the memory access: if the VSA cannot
decide whether the memory access address is tainted or not,
we conservatively remove it from the must-not tainted set.
Resolving operand’s values. Once the algorithm meets an
instruction operand that is uninitialized (it can lead to an
1672    30th USENIX Security Symposium
USENIX Association
Algorithm 2: Must-not Tainted Analysis
1 Function MustNotTainted(UntaintedSet, TaintedInst, ValueSet):
input
:set of must-not tainted data object UntaintedSet, set of
tainted instructions TaintedInst, value set ValueSet
:set of tainted data object UntaintedSet, set of tainted
instructions TaintedInst
output
Source← TaintSourceScan(Bin)
Init(buffer_start_addr, buffer_length, ValueSet, Source)
if unbounded(ValueSeti
unbounded(ValueSeti
entry[buffer_startaddr])
entry[buffer_length]) then
exit()
if ValueSeti
while changed do
foreach instruction i do
entry[opaddr]~⊆ UntaintedSet then
TaintedInst← TaintedInstࣶ {i}
5
6
7
8
9
10
11 Function Transfer(UntaintedSet, ValueSet, i):
12
13
Transfer(UntaintedSet, ValueSet)
switch rule(i) do
case tag(opaddrdest)← tag(opaddrdest)  tag(opaddrsrc) do
case tag(opaddrdest)← tag(opaddrsrc) do
case tag(opaddrunary)← tag(opaddrunary) do
UntaintedSet← UntaintedSet−
entry[opaddrsrc]⊆ UntaintedSet
UntaintedSet← UntaintedSetࣶ
entry[opaddr] = (,,) then
UntaintedSet← UntaintedSet−
ValueSeti
if ValueSeti
evalToConcrete(ValueSeti
ValueSeti
else if ValueSeti
entry[opaddrdest]) then
entry[opaddrdest]
entry[opaddrdest]
ValueSeti
entry[Overtaint(opaddrdest)]
2
3
4
14
15
16
17
18
19
20
alias that cannot be resolved), as mentioned in §4.2, we
conservatively taint the associated variables, depending on
the speciﬁc cases:
(i) Unknown value from CLI (e.g., Figure 4a). Based on
where the input value is going to be stored, we assign
a corresponding uninitialized value for these variables.
For instance, we will assign an uninitialized value for a
stack varaible which belongs to the stack of the caller
of main and is prior to the stack of main function, and
proceed the must-not analysis as usual.
(ii) Unknown value passed from missing callers (Fig-
ure 4b). A caller function passes function parameters
to a callee function, causing aliasing between actual
parameters and formal parameters. When CFG recon-
struction cannot determine the callers for a callee, it
results in unknown value from the missing callers.
We conservatively remove all of the memory access
instructions in the function and all of the data uses of
these variables outside the function from the must-not
tainted set. To optimize our analysis, we do not taint
all global variables, and instead we taint the data based
on their types (the type inference is described below)
in global sections such as .data and .bss.
(iii) Unknown value due to library function calls and
system calls (Figure 4c). We taint these unknown
variables according to the semantics of library functions
and system calls. For instance, the pointer returned by
fopen is put in the must-not tainted set at the program
point right after the library call and the pointer returned
is assigned a value set in a special heap region.
Variable type inference. To taint instructions more precisely,
we perform a simple variable type inference to determine
whether a variable is a pointer or not. We care them because
we want to identify the potential pointers that can hold the
tainted buffer. The analysis is based on whether a variable
is dereferenced or whether it is a pointer type parameter or
return value of known library functions as type sinks [20]. For
instance, movzbl (%ebx),%eax indicates the variable stored
at ebx is a pointer, and also variable stored at edi in the fol-
lowing snippet is a pointer as it is passed to the ﬁrst parameter
of strchr library function. With variable type inference, we
could only taint poniter variable of interest when an unknown
pointer is dereferenced instead of tainting all variables.
movl $0xa,0x4(%esp)
mov %edi,(%esp)
call 
Our Algorithm. Speciﬁcally, the must-not tainted analysis
algorithm as shown in algorithm 2 ﬁrst scans the whole bi-
nary for possible taint sources, e.g., read system call and
recv system call (line 2). Each identiﬁed taint source serves
as a starting point of our analysis. The initial tainted buffer
has two major characteristics: start address and length. As
our evaluation shows, we are able to identify the value set of
the starting address and length of the buffer that introduces
the taint. Otherwise, if either upper bound or lower bound
of buffer’s starting address or buffer length cannot be deter-
mined, our analysis triggers a warning and terminates, since
it may indicate program vulnerability (line 4-5). The analysis
is of a work-list style and iterates over each instruction un-
til the UntaintedSet and TaintedInst remain unchanged
(reached a ﬁxed point). For each instruction i in the program
(line 7-10), we ﬁrst compare the incoming value sets of in-
struction operand address with our must-not untainted value
sets. If the former is not a subset of the latter, the instruction
is identiﬁed as a possible tainted instruction for the later taint
propagation logic instrumentation (line 9). We then process
UntaintedSet with respect to the taint propagation rule of
each instruction (line 10). Particularly, if the taint propagation
rule for instruction i decides that i has a data ﬂow dependence
between instruction operand(s), i.e., the taint propagation rule
is in the form of:
tag(opaddrdest)
← tag(opaddrdest)  tag(opaddrsrc)
← tag(opaddrsrc)
tag(opaddrdest)
tag(opaddrunary) ← tag(opaddrunary)
we taint
the destination operand and remove it from
UntaintedSet as shown in line 16. If the source operand
USENIX Association
30th USENIX Security Symposium    1673
is deemed untainted and we know the exact concrete address
of the destination operand, we enlarge our UntaintedSet
by adding destination operand value set to UntaintedSet as
illustrated in line 17-18. Otherwise, we conservatively taint
all of the possible memory address involved in instruction i.
Example. We use