SELECT f_user_logout_1(:userid);  
\setrandom userid 8000001 12000000  
SELECT f_user_logout_2(:userid);  
\setrandom userid 12000001 16000000  
SELECT f_user_logout_3(:userid);  
\setrandom userid 16000001 20000000  
SELECT f_user_logout_4(:userid);  
```  
3\. 压力测试  
```  
pgbench -M prepared -r -c 1 -f /home/postgres/test/login0.sql -j 1 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal >./log.login0 &  
pgbench -M prepared -r -c 1 -f /home/postgres/test/login1.sql -j 1 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal >./log.login1 &  
pgbench -M prepared -r -c 2 -f /home/postgres/test/login2.sql -j 2 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal >./log.login2 &  
pgbench -M prepared -r -c 2 -f /home/postgres/test/login3.sql -j 2 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal >./log.login3 &  
pgbench -M prepared -r -c 2 -f /home/postgres/test/login4.sql -j 2 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal >./log.login4 &  
```  
4\. 测试结果  
```  
cat log.log*  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 180 s  
number of transactions actually processed: 233348  
tps = 1281.818097 (including connections establishing)  
tps = 1281.837109 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003492        \setrandom userid 1 4000000  
        0.771932        SELECT f_user_login_0(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 180 s  
number of transactions actually processed: 233466  
tps = 1282.514774 (including connections establishing)  
tps = 1282.573500 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003546        \setrandom userid 4000001 8000000  
        0.771399        SELECT f_user_login_1(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 2  
number of threads: 2  
duration: 180 s  
number of transactions actually processed: 475466  
tps = 2612.200783 (including connections establishing)  
tps = 2612.281526 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003605        \setrandom userid 8000001 12000000  
        0.757312        SELECT f_user_login_2(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 2  
number of threads: 2  
duration: 180 s  
number of transactions actually processed: 468904  
tps = 2576.380443 (including connections establishing)  
tps = 2576.488485 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003587        \setrandom userid 12000001 16000000  
        0.767869        SELECT f_user_login_3(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 2  
number of threads: 2  
duration: 180 s  
number of transactions actually processed: 439381  
tps = 2414.347086 (including connections establishing)  
tps = 2414.425600 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004431        \setrandom userid 16000001 20000000  
        0.817879        SELECT f_user_login_4(:userid);  
```  
总计 :   
```  
tps = 10167.261183 (including connections establishing)  
tps = 10167.261183 (excluding connections establishing)  
```  
5\. 瓶颈分析与优化  
到这里我们还没有关注过表空间, 其实这些表拆分后它们还在同一个表空间里面. 把它们放在不同的表空间可以扩展它们整体的IO吞吐能力.  
```  
postgres=# \db+  
                                           List of tablespaces  
    Name    |  Owner   |                  Location                   |  Access privileges  | Description   
------------+----------+---------------------------------------------+---------------------+-------------  
 digoal     | postgres | /pgdata/digoal/1921/data02/pg_tbs/digoal    | postgres=C/postgres+|   
            |          |                                             | digoal=C/postgres   |   
 digoal_01  | postgres | /pgdata/digoal/1921/data03/pg_tbs/digoal_01 | postgres=C/postgres+|   
            |          |                                             | digoal=C/postgres   |   
 digoal_02  | postgres | /pgdata/digoal/1921/data04/pg_tbs/digoal_02 | postgres=C/postgres+|   
            |          |                                             | digoal=C/postgres   |   
 digoal_03  | postgres | /pgdata/digoal/1921/data05/pg_tbs/digoal_03 | postgres=C/postgres+|   
            |          |                                             | digoal=C/postgres   |   
 digoal_04  | postgres | /pgdata/digoal/1921/data06/pg_tbs/digoal_04 | postgres=C/postgres+|   
            |          |                                             | digoal=C/postgres   |   
digoal=> alter table user_info_0 set tablespace digoal_04;  
ALTER TABLE  
digoal=> alter table user_info_2 set tablespace digoal_01;  
ALTER TABLE  
digoal=> alter table user_info_3 set tablespace digoal_02;  
ALTER TABLE  
digoal=> alter table user_info_4 set tablespace digoal_03;  
digoal=> alter index user_info_0_pkey set tablespace digoal_04;  
ALTER INDEX  
digoal=> alter index user_info_2_pkey set tablespace digoal_01;  
ALTER INDEX  
digoal=> alter index user_info_3_pkey set tablespace digoal_02;  
ALTER INDEX  
digoal=> alter index user_info_4_pkey set tablespace digoal_03;  
digoal=> alter table user_session_0 set tablespace digoal_04;  
ALTER TABLE  
digoal=> alter table user_session_2 set tablespace digoal_01;  
ALTER TABLE  
digoal=> alter table user_session_3 set tablespace digoal_02;  
ALTER TABLE  
digoal=> alter table user_session_4 set tablespace digoal_03;  
digoal=> alter index user_session_0_pkey set tablespace digoal_04;  
ALTER INDEX  
digoal=> alter index user_session_2_pkey set tablespace digoal_01;  
ALTER INDEX  
digoal=> alter index user_session_3_pkey set tablespace digoal_02;  
ALTER INDEX  
digoal=> alter index user_session_4_pkey set tablespace digoal_03;  
```  
重新把它们加载到内存.  
下节 :   
http://blog.163.com/digoal@126/blog/static/163877040201221333411196/  
## 【附】  
pgbench simple|extended|prepare 部分源码 :   
1\. pgbench.c  
```  
        if (commands[st->state]->type == SQL_COMMAND)  
        {  
                const Command *command = commands[st->state];  
                int                     r;  
                if (querymode == QUERY_SIMPLE)  
                {  
                        char       *sql;  
                        sql = xstrdup(command->argv[0]);  
                        sql = assignVariables(st, sql);  
                        if (debug)  
                                fprintf(stderr, "client %d sending %s\n", st->id, sql);  
                        r = PQsendQuery(st->con, sql);  
                        free(sql);  
                }  
                else if (querymode == QUERY_EXTENDED)  
                {  
                        const char *sql = command->argv[0];  
                        const char *params[MAX_ARGS];  
                        getQueryParams(st, command, params);  
                        if (debug)  
                                fprintf(stderr, "client %d sending %s\n", st->id, sql);  
                        r = PQsendQueryParams(st->con, sql, command->argc - 1,  
                                                                  NULL, params, NULL, NULL, 0);  
                }  
                else if (querymode == QUERY_PREPARED)  
                {  
                        char            name[MAX_PREPARE_NAME];  
                        const char *params[MAX_ARGS];  
                        if (!st->prepared[st->use_file])  
                        {  
                                int                     j;  
                                for (j = 0; commands[j] != NULL; j++)  
                                {  
                                        PGresult   *res;  
                                        char            name[MAX_PREPARE_NAME];  
                                        if (commands[j]->type != SQL_COMMAND)  
                                                continue;  
                                        preparedStatementName(name, st->use_file, j);  
                                        res = PQprepare(st->con, name,  
                                                  commands[j]->argv[0], commands[j]->argc - 1, NULL);  
                                        if (PQresultStatus(res) != PGRES_COMMAND_OK)  
                                                fprintf(stderr, "%s", PQerrorMessage(st->con));  
                                        PQclear(res);  
                                }  
                                st->prepared[st->use_file] = true;  
                        }  
                        getQueryParams(st, command, params);  
                        preparedStatementName(name, st->use_file, st->state);  
                        if (debug)  
                                fprintf(stderr, "client %d sending %s\n", st->id, name);  
                        r = PQsendQueryPrepared(st->con, name, command->argc - 1,  
                                                                        params, NULL, NULL, 0);  
                }  
```  
2\. src/interfaces/libpq/fe-exec.c  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")