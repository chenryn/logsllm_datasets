通过计算这些值并了解集群的当前可用容量，我们现在可以计算每个资源的空闲主机容量:
![](img/e923ae69-d5f0-4d01-b2ca-1943fd040d19.png)
![](img/d9551f76-8da1-491b-bbba-816942c7297b.png)
以下是如何计算最坏情况下的总空闲主机容量:
![](img/7201e489-d66f-4cae-b766-2b62ae79f69d.png)
此时，给定空闲主机容量为 1.0，我们应该在集群中*而不是*扩展，因为容量当前不大于 1*。鉴于您正好有一台空闲主机，这可能看起来违反直觉，但是如果您此时确实删除了一个实例，这将导致集群的可用 CPU 容量为 0，并且在没有空闲 CPU 容量的情况下，集群将横向扩展。*
 *# 实现 ECS 自动扩展解决方案
现在，您已经很好地理解了如何计算 ECS 群集容量以做出横向扩展和纵向扩展决策，我们准备实现自动扩展解决方案，如下图所示:
![](img/42bafe58-768e-4b70-9a30-b8e072ea6c64.png)
下面提供了上图所示解决方案的演练:
1.  在计算 ECS 集群容量之前，您需要一种机制来触发容量计算，最好是在 ECS 容器实例的容量发生变化时。这可以通过利用 CloudWatch Events 服务来实现，该服务为包括 ECS 在内的各种 AWS 服务发布事件，并允许您创建*事件规则*，这些规则订阅特定事件并使用各种机制(包括 Lambda 函数)对其进行处理。CloudWatch 事件支持接收有关 ECS 容器实例状态变化的信息，这代表了触发集群容量计算的理想机制，因为对 ECS 容器实例可用资源的任何更改都将触发状态变化事件。
2.  为每个 ECS 容器实例状态更改事件触发一个负责计算 ECS 集群容量的 Lambda 函数。
3.  Lambda 函数不是决定自动扩展集群，而是以 CloudWatch 自定义指标的形式发布当前容量，该指标报告当前空闲容器容量和空闲主机容量。
4.  CloudWatch 服务配置有警报，只要空闲容器容量或空闲主机容量低于或超过集群中横向扩展或扩展的阈值，就会触发 EC2 自动扩展操作。
5.  EC2 自动缩放服务配置有 EC2 自动缩放策略，这些策略是响应 CloudWatch 发出的警报而调用的。
6.  除了配置用于管理 ECS 集群容量的 CloudWatch 警报之外，您还可以为每个 ECS 服务配置适当的 CloudWatch 警报，这样就可以触发 AWS 应用自动扩展服务来扩展或扩展为您的 ECS 服务运行的 ECS 任务的数量。例如，在上图中，ECS 服务配置有应用自动扩展策略，如果 ECS 服务的 CPU 利用率超过 50%，该策略会增加 ECS 任务的数量。
现在让我们实现解决方案的各个组件。
# 为 ECS 配置云监视事件
我们需要执行的第一个任务是设置一个 CloudWatch 事件规则，该规则订阅 ECS 容器-实例状态-更改事件，并配置一个 Lambda 函数的目标，该函数将计算 ECS 集群容量。
下面的示例演示了如何将 CloudWatch 事件规则添加到 todo back and-AWS`stack.yml`cloud information 模板中:
```
...
...
Resources:
  EcsCapacityPermission:
 Type: AWS::Lambda::Permission
 Properties:
 Action: lambda:InvokeFunction
 FunctionName: !Ref EcsCapacityFunction
 Principal: events.amazonaws.com
 SourceArn: !Sub ${EcsCapacityEvents.Arn}
 EcsCapacityEvents:
 Type: AWS::Events::Rule
 Properties:
 Description: !Sub ${AWS::StackName} ECS Events Rule
 EventPattern:
 source:
 - aws.ecs
 detail-type:
 - ECS Container Instance State Change
 detail:
 clusterArn:
 - !Sub ${ApplicationCluster.Arn}
 Targets:
 - Arn: !Sub ${EcsCapacityFunction.Arn}
 Id: !Sub ${AWS::StackName}-ecs-events
  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
...
...
```
`EcsCapacityEvents`资源定义事件规则，包括两个关键属性:
*   `EventPattern`:定义事件与此规则匹配的模式。所有 CloudWatch 事件包括`source`、`detail-type`和`detail`属性，事件模式确保只有与`ApplicationCluster`资源(由`detail`模式定义)的 ECS 容器实例状态更改(由`detail-type`模式定义)相关的 ECS 事件(由`aws.ecs`的`source`模式定义)将与规则匹配。
*   `Targets`:定义事件应该路由到的目标资源。在前面的例子中，您引用了一个名为`EcsCapacityFunction`的 Lambda 函数的 ARN，您将很快定义它。
`EcsCapacityPermission`资源确保 CloudWatch 事件服务拥有调用`EcsCapacityFunction` Lambda 函数的权限。对于任何调用 Lambda 函数的服务，这都是一种常见的方法，即添加一个 Lambda 权限，该权限授予给定 AWS 服务(由`SourceArn`属性定义)的给定资源(由`Principal`属性定义)调用 Lambda 函数(`FunctionName`属性)的能力。
现在，让我们添加引用的 Lambda 函数，以及一个 IAM 角色和 CloudWatch 日志组:
```
...
...
Resources:
  EcsCapacityRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Action:
 - sts:AssumeRole
 Effect: Allow
 Principal:
 Service: lambda.amazonaws.com
 Policies:
 - PolicyName: EcsCapacityPermissions
 PolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Sid: ManageLambdaLogs
 Effect: Allow
 Action:
 - logs:CreateLogStream
 - logs:PutLogEvents
 Resource: !Sub ${EcsCapacityLogGroup.Arn}
 EcsCapacityFunction:
 Type: AWS::Lambda::Function
 DependsOn:
 - EcsCapacityLogGroup
 Properties:
 Role: !Sub ${EcsCapacityRole.Arn}
 FunctionName: !Sub ${AWS::StackName}-ecsCapacity
 Description: !Sub ${AWS::StackName} ECS Capacity Manager
 Code:
 ZipFile: |
 import json
 def handler(event, context):
 print("Received event %s" % json.dumps(event))
 Runtime: python3.6
 MemorySize: 128
 Timeout: 300
 Handler: index.handler
  EcsCapacityLogGroup:
 Type: AWS::Logs::LogGroup
 DeletionPolicy: Delete
 Properties:
 LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ecsCapacity
 RetentionInDays: 7
  EcsCapacityPermission:
    Type: AWS::Lambda::Permission
...
...
```
到目前为止，您应该已经很好地理解了如何使用 CloudFormation 定义 Lambda 函数，因此我将不深入描述前面的示例。但是，请注意，目前我已经实现了一个简单打印任何接收到的事件的基本功能——我们将使用它来初步了解 ECS 容器实例状态更改事件的结构。
此时，您现在可以使用`aws cloudformation deploy`命令部署您的更改:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file stack.yml \
 --stack-name todobackend --parameter-overrides $(cat dev.cfg) \
 --capabilities CAPABILITY_NAMED_IAM
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
```
部署完成后，您可以通过停止在您的 ECS 群集上运行的现有 ECS 任务来触发 ECS 容器实例状态更改:
```
> aws ecs list-tasks --cluster todobackend-cluster
{
    "taskArns": [
        "arn:aws:ecs:us-east-1:385605022855:task/5754a076-6f5c-47f1-8e73-c7b229315e31"
    ]
}
> aws ecs stop-task --cluster todobackend-cluster --task 5754a076-6f5c-47f1-8e73-c7b229315e31
```
```
{
    "task": {
        ...
        ...
        "lastStatus": "RUNNING",
        "desiredStatus": "STOPPED",
        ...
        ...
    }
}
```
因为此 ECS 任务链接到一个 ECS 服务，所以 ECS 将自动启动一个新的 ECS 任务，如果您前往 CloudWatch 控制台，选择 Logs，然后为处理 ECS 容器实例状态更改事件(`/aws/lambda/todobackend-ecsCapacity`)的 Lambda 函数打开日志组的最新日志流，您应该会看到记录了几个事件:
![](img/7c264632-6b24-4dd9-b464-645108398b4e.png)
在前面的截图中，您可以看到在几秒钟内记录了两个事件，这表示您停止了 ECS 任务，然后 ECS 自动启动了一个新的 ECS 任务，以确保链接的 ECS 服务满足其配置的期望计数。
您可以看到`source`和`detail-type`属性与您之前配置的事件模式相匹配，如果您在第二个事件中进一步向下滚动，您应该会发现一个名为`registeredResources`和`remainingResources`的属性，如下例所示:
```
{
  ...
  ...
  "clusterArn": "arn:aws:ecs:us-east-1:385605022855:cluster/todobackend-cluster",      
  "containerInstanceArn": "arn:aws:ecs:us-east-1:385605022855:container-instance/d27868d6-79fd-4858-bec6-65720855e0b3",
  "ec2InstanceId": "i-0d9bd79d19a843216",