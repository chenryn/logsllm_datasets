If a single element array is passed to `np.float64()` in the following way, it
is returned not as an array but as a numpy scalar. I have not observed this
behavior when converting in this way via other dtypes, though my tests are not
exhaustive. Code to reproduce below:
    import numpy as np
    # Returns float 0.699..., not array([0.699])
    np.float64(np.array([0.7], dtype=np.float64))
    # Broken for conversion within floats; returns 0.5
    np.float64(np.array([0.5], dtype=np.float32))
    # Broken for conversion from uint; returns 42.0
    np.float64(np.array([42], dtype=np.uint8))
    # Works as expected for 2-element arrays
    np.float64(np.array([0.7, 0.7], dtype=np.float64))
    # np.float32() and np.uint8() properly return arrays
    np.float32(np.array([0.7], dtype=np.float64)  # array([0.699], dtype=float32)
    np.uint8(np.array([42.], dtype=np.float64)    # array([4], dtype=uint8)
This was observed on both NumPy 1.6.1 and 1.6.2. I realize a workaround is to
use the `.astype()` method, and that would probably be more correct. However,
this functionality is exposed and I do not believe it is expected behavior.