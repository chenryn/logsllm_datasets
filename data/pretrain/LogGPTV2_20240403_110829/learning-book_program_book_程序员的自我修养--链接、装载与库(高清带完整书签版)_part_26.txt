1d: warming: cannot Eind entry symbo1 _start; defaulting to 0000000008048080
printf ,os In function ^_ro_printf *:
(.text+0x18) : undefined reference to *stdout *
printf,o: In function *_IO_printf*:
(,text+0x20): undefined reference to *vfprintf′
链接却失败了，原因是缺少两个外部符号的定义。其实眼尖的读者可能已经在最开始打
符号“stdout”和“vfprintf”，也就是有两个未定义的符号。i正是这两个未定义的符号打破了
看似完美的解释，很明显：“printf.o”依赖于其他的目标文件。
而“vfprintf”位于“vfprintf.o”。很不幸的是这两个文件还依赖于其他的目标文件，因为它
们也有未定义的符号。这些变量和函数都分布在glibc的各个目标文件之中，如果我们能够
“一将它们收集齐，那么理论上就可以将它们链接在一起，最后跟“hello.o”链接成一个可
执行文件。但是，如果靠人工这样做的代价实在是太大了，我们在这里不打算演示这样一个
紧项的过程。幸好1d链接器会处理这一切紧项的事务，白动寻找所有须要的符号及它们所
在的目标文件，将这些目标文件从“libc.a”中“解压”出米，最终将它们链接在一起成为
一个可执行文件。那么我们可不可以就这么认为：将“hello.o”和“libc.a”链接起来就可以
得到可执行文件呢？理论上这样就可以了，如图4-6所示。
实际情况悉怕还是令人失望的，现在Linux系统上的库比我们想象的要复杂。当我们编
译和链接一个普通C程序的时候。不仅要用到C语言库libc.a，而且还有其他一些辅助性质
，
译链接过程的中间步骤打印出来：
程序员的自我修养一链接、装载与库
---
## Page 144
4.5静态库链接
121
ibe.4
printf.o
e00(
pwrine.o
vfprintf.o
sodlo.o
图4-6静态库链接
$gcc -static --verbose -fno-builtin hello.c
Using built-in specs.
Target :i4861inuxgnu
--enable-languages=c,c+*, fortran,objc,obj-c++,treelang --prefix=/usr
Configured with: ../src/configure -v
--enable-shared --with-8ystem-z1ib --1ibexecdir=/usr/lib
--without-included-gettext --enable-threads=posix --enable-nls
* $=xggnsurexfo.xd-- c*t*/++/apnout/xsn/=x1p-apnout -xxbut--
--enable-__cxa_atex1t --enable-clocale=gnu --enable-1ibstdcxx-debug
Thread model: posix
--enable-mpfr
--enable-checking=release i486-1inux-gnu
bello.c -mtune=generic -auxbase hello -version -fno-builtin
/usr/1ib/gce/1486-1inux-gnu/4.1.3/cc1 -quiet -v he11o.c -qulet -dumgbase
ignoring nonexistent directory
-fetack-protector
-fetack-protector -o /tmp/ccUhtGsB.8
*/usr/1oca1/inc1ude/i486-1inux-gnu*
ignoring nonexistent directory
,nu5xnu1-9g/apntou/aen/, Axooax1p quasxauou 5uou5
/usr/1ib/gcc/i486-1inux-gnu/4.1.3/../../../../1486-1inux-gnu/inc1ude*
include  search starts here:
#include *...*
search starts here:
/u8r/1ib/gcc/1486-1inux-gnu/4 . 1 . 3/ine1ude
/usr/local/include
End of search list.
/u8r/include
(1486-1inux-gnu)
GNU C version 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)
4.1.2-16ubuntu2) .
Compi1ed by GNU C ver8ion 4.1.3 20070929 (prerelease) (Ubuntu
程序员的自我修养一—链接、装载与库
---
## Page 145
122
第4章静态链接
GGC heurist ics: --param ggc-min-expend=64 --paran ggc-min-heapsize=64493
Compi1er executab1e check8um: caf034d6752b947185f431aa3e927159
GNU as8embler version 2.18 (i486-1inux-gnu1 using BPD version (GNU Binuti1s
for Ubuntu)2.18
/u8r/1ib/gcc/1486-1inux-gnu/4.1.3/co1lect2 -m elf_i386 --hash-8tyle=both
/usr/1ib/gcc/1486-1inux-gnu/4.1.3/../../../../1ib/crt1.o
-atatic/usr/1ib/gcc/i486-1inux-gnu/4.1.3/../../../../1ib/crt1.o
/u8r/1ib/gcc/1486-1inux-gnu/4.1.3/crtbeginr.o
-L/usr/1ib/gcc/14861inux-gnu/4.1.3 -L/u8r/1ib/gcc/1486-1inux-gnu/4.1.3
-L/usr/1ib/../1ib/tmp/ccQzRpL5.o--gtart-group-1gcc-1gcc_eh-1c
L/uer/1ib/gcc/i486-1inux-gnu/4.1.3/../../../../1ib -L/1ib/../1ib
/u8r/1ib/gcc/1486-1inux-gnu/4.1.3/../../../../1ib/crtn.o
--end-group/u8r/1ib/gcc/1486-1inux-gnu/4.1.3/crtend.o
关键的三个步骤上面已经用粗体表示出来了，第一步是调用cc1程序，这个程序实际上
就是GCC的C语言编译器，它将“hello.c”编译成一个临时的汇编文件“/Amp/ccUhiGSB.s”：
然后调用as 程序，as 程序是GNU 的汇编器，它将“/fump/ccUhtGSB.s”汇编成临时目标文
键的步骤是最后一步，GCC调用collect2程序来完成最后的链接。但是按照我们之前的理解，
链接过程应该由ld链接器来完成，这里怎么忽然杀出个collect2？这是个什么程序？
实际上collect2可以看作是ld链接器的一个包装，它会调用Id链接器来完成对目标文
件的链接，然后再对链接结果进行一些处理，主要是收集所有与程序初始化相关的信息并且
构造初始化的结构，在第4部分我们会介绍程序的初始化结构的相关内容，还会再介绍
collect2程序。在这里，可以简单地把collect2看作是d链接器。可以看到最后一步中，至
少有下列儿个库和目标文件被链接入了最终可执行文件：
·cnl.o
·crti.o
·cnbeginT.o
go8!·
·libgcc_eh.a
·libc.a
·cnend.o
这些库和目标文件现在看来可能很不熟悉，我们将在第4部分专门介绍这些库及它们背
后的原理。
Q8.A
Q:为什么静态运行库里面一个目标文件只包含一个函数？比如libc.a里面printf.o只有
程序员的自我修养一链接、装载与库
---
## Page 146
4.6链接过程控制
123
printf(函数、strlen.o 只有strlen(函数，为什么要这样继织？
A：我们知道，链接器在链接静态库的时候是以目标文件为单位的。比如我们引用了静态
库中的printf)函数，那么链接器抗会把库中包含printf0函数的那个目标文件键接进来，
如果很多函数都放在一个目标文件中，很可能很多没用的函数都被一起缺接进了输出
结果中。由于运行库有成百上千个函数，数量非常庞大，每个函数独立地放在一个目
标文件中可以尽量减少空间的浪费，那些没有被用到的目标文件（函数）就不要链接
到最终的输出文件中。
4.6链接过程控制
绝大部分情况下，我们使用链接器提供的默认链接规则对目标文件进行链接，这在一般
情况下是没有问题的，但对于一些特殊要求的程序，比如操作系统内核、BIOS（BasicInput
Output System）或一些在没有操作系统的情况下运行的程序（如引导程序BootLoader或者
嵌入式系统的程序，或者有一些脱离操作系统的硬盘分区软件PQMagic等），以及另外的一
些须要特殊的链接过程的程序，如一些内核驱动程序等，它们往往受限于一些特殊的条件，
如须要指定输出文件的各个段虚拟地址、段的名称、段存故的顺序等，因为这些特殊的环境，
特别是某些硬件条件的限制，往往对程序的各个段的地址有着特殊的要求。
由于整个链接过程有很多内容须要确定：使用哪些目标文件？使用哪些库文件？是否在
最终可执行文件中保留调试信息、输出文件格式（可执行文件还是动态链接库）？还要考虑
是否要导出某些符号以供调试器或程序本身或其他程序使用等。
提
操作系统内核。从本质上来讲，它本身也是一个程序。比如Windows 的内核ntoskmlexe
示
就是一个我们平常看到的PE文件，它的位置位于WINDOWSsystem32vntoskml.exe。
很多人误以为Window操作系统的内核很庞大，由很多文件组成。这是一个误解，其实
真正的Windows内核就是这个文件。
4.6.1链接控制脚本
链接器一般都提供多种控制整个链接过程的方法，以用来产生用户所须要的文件。一般
链接器有如下三种方法。
·使用命令行来给链接器指定参数，我们前面所使用的ld的-o、-e参数就属于这类。这
种方法我们已经在前面使用很多次了。
·将链接指令存放在日标文件里面，编译器经常会通过这种方法向链接器传递指令。方
法也比较常见，只是我们平时很少关注，比如VISUALC++编译器会把链接参数放在
程序员的自我修养一链接、装载与库
---
## Page 147
124
PE目标文件的.drectve段以用来传递参数。具体可以参考PE/COF一节中的.drectve段
介绍。
·使用链接控制脚本，使用链接控制脚本方法就是本节要介绍的，也是最为灵活、最为
强大的链接控制方法。
由于各个链接器平台的链接控制过程各不相同，我们只能侧重一个平台来介绍。d链接
器的链接脚本功能非常强大，我们接下来以Id作为主要介绍对象。VISUALC++也允许使用
脚本来控制整个链接过程，VISUALC++把这种控制脚本叫做模块定义文件
（Module-DefinitionFile），它们的扩展名一般为.def。
前面我们在使用ld链接器的时候，没有指定链接脚本，其实ld在用户没有指定链接脚
本的时候会使用默认链接脚本。我们可以使用下面的命令行来查看d默认的链接脚本：
$ 1d -verbose
默认的ld链接脚本存放在/usr/lib/ldscripts/下，不同的机器平台、输出文件格式都有相应
的链接脚本。比如 Intel IA32下的普通可执行 ELF文件链接脚本文件为elf_i386.x：IA32下
共享库的链接脚本文件为elf_i386.xs等。具体可以看每个文件的注释。Id会根据命令行要求
使用相应的链接脚本文件来控制链接过程，当我们使用1d来链接生成一个可执行文件的时
候，它就会使用elf_i386.x作为链接控制脚本：当我们使用Id来生成一个共享目标文件的时
候，它就会使用elf_i386.xs作为链接控制脚本。
当然，为了更加精确地控制链接过程，我们可以自己写一个脚本，然后指定该脚本为链
接控制脚本。比如可以使用-T参数：
$ 1d -r 1ink.script
4.6.2最“小”的程序
为了演示链接的控制过程，我们接着要做一个最小的程序：这个程序的功能是在终端上
输出“Hello world!"。可能很多人的第一反应就是我们学C语言时候的那个经典的使用printf
的belloworld，然后对着屏幕盲打一遍该程序源代码后编译链接一气呵成，连鼠标都没有移
动一下，非常好，你的C语言基础很扎实。但是我们这里要演示的程序稍微有所不同。
·首先，经典的 helloworld 使用了printf函数，该函数是系统C语言库的一部分。为了使
用该函数，我们必须在链接时将C语言库与程序的目标文件链接产生最终可执行文件。
我们希望“小程序”能够脱离C语言运行库，使得它成为一个独立于任何库的纯正的
“程序”
·其次，经典的helloworld由于使用了库，所以必须有main函数，我们知道一般程序的
入口在库的_start，由库负责初始化后调用main函数来执行程序的主体部分。为了不使
程序员的自我修养一链接、装载与库
---
## Page 148
4.6链接过程控制
125
用main这个我们已经感到厌烦的函数名，“小程序”使用nomain作为整个程序的入口。
接着，经典的 helloworld会产生多个段：main程序的指令部分会产生ext 段、字符串
常量“Helloworld!n”会被放在数据段或只读数据段，还有C库所包含的各种段。为
了演示ld链接脚本的控制过程，我们将“小程序”的所有段都合并到一个叫“tinytext”
的段，注意：这个段是我们任意命名的，是由链接脚本控制链接过程生成的。
TinyHelloWorld.e 源代码如下:
,u\ip[10n ot[, - 1s reu
void print ()
asm( *mov1 $13, ##edx \n\t*
*mov1 80,88ecx 1n\t*
*mov1 $0, #$ebx
“movl $4,e8eax
\n\t*
*int $0x80
\n\t*
:*r*(str) : *edx*, *ecx*, *ebx*1 ;
\n\t*
void exit()
asm( “movl $42,Bebx \n\t*
*mov1 $1,$eax \n\t*
int $0x80
\n\t* );
void nomain()
print () ;
exit () ;
从源代码我们可以看到，程序入口为nomain(函数，然后该函数调用printO函数，打印
“Hello World”，接着调用exitO的数，结束进程。这里的print 函数使用了 Linux的WRITE
系统调用，exitO函数使用了EXIT系统调用。这里我们使用了GCC内嵌汇编，对这种内嵌
汇编格式不熟悉的话，请参照GCC手册关于内嵌汇编的部分。这里简单介绍系统调用：系
统调用通过0x80中断实现，其中eax为调用号，ebx、ecx、edx等通用寄存器用来传递参数，
比如WRITE调用是往一个文件句柄写入数据，如果用C语言来描述它的原型就是：
int write(int filedesc, char* buffer, int size):
·WRITE调用的调用号为4，则eax=0。
·filedesc表示被写入的文件句柄，使用ebx寄存器传递，我们这里是要往默认终端（stdout）
输出，它的文件句柄为0.即ebx=0.
·buffer表示要写入的缓冲区地址，使用ecx寄存器传递，我们这里要输出字符串str，所
以 ecx = str
程序员的自我修养一链接、装载与库
---
## Page 149
126
第4章静态链接
·size表示要写入的字节数，使用edx寄存器传递，字符串“Hello world!n”长度为13
字节，所以edx=13。
同理，EXIT系统调用中，ebx表示进程退出码（Exit Code），比如我们平时的main程
序中的retum的数值会返回给系统库，由系统库将该数值传递给EXIT系统调用。这样父进
程就可以接收到子进程的退出码。EXIT系统调用的调用号为1，即cax=1。你可以通过下
面的方法得到上一条bash命令执行的程序的退出码）：
$./TinyBelloWor1d
$ echo $7
4.2
这里要调用EXIT结束进程是因为如果是普通程序，main函数结束后控制权返回给系
统库，由系统库负责调用EXIT，退出进程。我们这里的nomain0结束后系统控制权不
会返回，可能会执行到nomain0后面不正常的指令，最后导致进程异常退出。
关于系统库已经系统调用的细节我们在这里不详组展开，将在第12章进行更为详细
的介绍。
我们先不急于使用链接脚本，面先使用普通命令行的方式来编译和链接TinyHelloWorid.c：
$gcc -c -fno-builtin TinylelloWorld.c
$ 1d -static -e nomain -o 7inyHelloWorld TinyHelloWorld.o
第一步是使用GCC 将TinyHelloWorld.c编译成TinyHelloWorld.o，接着使用Id 将
TinyHelloWorld.o链接成可执行文件TinyHelloWorld。这里GCC和Id的参数的意义如下。