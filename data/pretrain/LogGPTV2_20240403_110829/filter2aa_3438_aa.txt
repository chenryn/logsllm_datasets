### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date: August 11, 2019**

#### Slide 1: Introduction
**Title: The ABC of Next-Gen Shellcoding**
**Presenters:**
- Hadrien Barral
- Rémi Géraud-Stewart
- Georges-Axel Jaloyan
- David Naccache
**Affiliation: École normale supérieure, PSL Research University**

#### Slide 2: Focus of the Presentation
**Key Points:**
- **Embedded Devices:** Our primary focus is on embedded devices, particularly smartphones.
- **Prevalence and Security:** Many individuals own smartphones, and a significant number are security-conscious.
- **Sensitive Data:** Smartphones store a large amount of sensitive data, making them attractive targets for exploitation.
- **Limited Toolset:** The current hacking toolset for these devices is quite limited.

#### Slide 3: About the Presenters
- **Hadrien Barral:** Hacker with a passion for various hacking activities.
- **Georges-Axel Jaloyan:** PhD student specializing in the reverse engineering of open-source binaries.
- **Rémi Géraud-Stewart:** Hacker who enjoys whisky and mathematics.

#### Slide 4: Importance and Overview
- **Creative Methods:** We will explore innovative techniques for writing constrained shellcodes.
- **New Architectures:** These methods will be applied to new and emerging architectures.

#### Slide 5: This is Not the Shellcode You’re Looking For
- **Introduction to Shellcode Basics:**
  - **Definition:** Shellcode is code that you write or find in the target's memory, which gives you control (e.g., popping a shell).
  - **Execution:** It is executed by jumping to it using a vulnerability (e.g., buffer overflow, use-after-free).
  - **Typical Scenario:** Send a carefully crafted string to the target to exploit a vulnerability and gain control.

#### Slide 6: Shellcode 101
- **Basic Concepts:**
  - **String Representation:** If treated as a string, shellcode cannot contain null bytes (\x00).
  - **Stack Protections:** Modern systems have stack protections like NX (No eXecute) bit.
  - **Memory Constraints:** Limited memory available for shellcode.
  - **Address Space Layout Randomization (ASLR):** Makes jumping to shellcode more challenging.
- **Workarounds:**
  - Techniques such as ROP (Return-Oriented Programming), heap spraying, and egghunting exist to overcome these obstacles.

#### Slide 7: Shellcode 102
- **Example:**
  - A simple shellcode example:
    ```
    00000000: 6821 0a00 0068 6f72 6c64 686f 2c20 5768
    h!...horldho, Wh
    00000010: 4865 6c6c ba0e 0000 0089 e1bb 0100 0000
    Hell............
    00000020: b804 0000 00cd 80
    .......
    ```

#### Slide 8: Detection and Prevention
- **Detection:**
  - Textbook shellcode often contains many NOP instructions and non-printable characters.
  - Common signatures include `/bin/sh` and other suspicious patterns.
  - These characteristics make it easy to detect and block shellcode.

#### Slide 9: Shellcode 103: Flying Under the Radar
- **Objective:**
  - How to make shellcode appear as human input?
- **Ideas:**
  - Use only ASCII-printable characters.
  - Use only alphanumeric characters.
  - Use only English words.
  - Use only Shakespeare quotes.
- **Advantages:**
  - Less likely to trigger alarms and more plausible deniability.
  - Less likely to be escaped or broken.
  - Can serve as a social engineering tool.
- **Disadvantages:**
  - Is this even possible? Yes, it is.

#### Slide 10: ASCII to IA32 Mapping
- **Mapping Examples:**
  - **ASCII Characters to IA32 Instructions:**
    - `A`: `inc %eax`
    - `B`: `inc %edx`
    - `C`: `inc %ebx`
    - `D`: `inc %esp`
    - `E`: `inc %ebp`
    - `F`: `inc %esi`
    - `G`: `inc %edi`
    - `H`: `dec %eax`
    - `I`: `dec %ecx`
    - `J`: `dec %edx`
    - `K`: `dec %ebx`
    - `L`: `dec %esp`
    - `M`: `dec %ebp`
    - `N`: `dec %esi`
    - `O`: `dec %edi`
    - `P`: `push %eax`
    - `Q`: `push %ecx`
    - `R`: `push %edx`
    - `S`: `push %ebx`
    - `T`: `push %esp`
    - `U`: `push %ebp`
    - `V`: `push %esi`
    - `W`: `push %edi`
    - `X`: `pop %eax`
    - `Y`: `pop %ecx`
    - `Z`: `pop %edx`
    - `a`: `popa`
    - `h`: `push imm32`
    - `j`: `push imm8`
    - `p`: `jo short disp8`
    - `q`: `jno short disp8`
    - `r`: `jb short disp8`
    - `s`: `jnb short disp8`
    - `t`: `je short disp8`
    - `u`: `jnz short disp8`
    - `v`: `jbe short disp8`
    - `w`: `ja short disp8`
    - `x`: `js short disp8`
    - `y`: `jns short disp8`
    - `z`: `jpe short disp8`
    - `8`: `cmp r/m8, r8`
    - `9`: `cmp r/m32, r32`
    - `0`: `xor r/m8, r8`

#### Slide 11: Alphanumeric Shellcodes
- **References:**
  - rix, Phrack 57, 2001
  - Basu et al., ICISS, 2014
- **Key Points:**
  - **x86 ISA:** The x86 instruction set is well-suited for alphanumeric shellcodes.
  - **Instructions:** Many common operations like push, pop, inc, dec, jmp, and cmp can be represented with single letters.
  - **x86-64:** Prefixing `0x48` (H) to instructions can adapt them for x86-64, though this breaks some inc/dec instructions.
  - **Tutorial:** Follow the tutorial at [https://nets.ec/Alphanumeric_shellcode](https://nets.ec/Alphanumeric_shellcode)
  - **Example:**
    ```
    jZTYX4UPXk9AHc49149hJG00X5EB00PXHc1149Hcq01q0Hcq41q4Hcy0
    Hcq0WZhZUXZX5u7141A0hZGQjX5u49j1A4H3y0XWjXHc9H39XTH394c
    ```

#### Slide 12: English Shellcode
- **Reference:**
  - Mason et al., English Shellcode, ACM CCS, 2009
- **Key Points:**
  - **English Compatible Subset:** Generate a subset of IA32 instructions that can be represented in English.
  - **Extended Character Set:** Utilize punctuation, spaces, and other characters.
  - **Examples:**
    - `p.`: `jo short $30`
    - `q.`: `jno short $30`
    - `r.`: `jb short $30`
    - `s.`: `jnb short $30`
    - `t.`: `je short $30`
    - `u.`: `jnz short $30`
    - `v.`: `jbe short $30`
    - `w.`: `ja short $30`
    - `x.`: `js short $30`
    - `y.`: `jns short $30`
    - `z.`: `jpe short $30`
    - ` ca`: `and 61(%ebx), %ah`
    - ` An`: `and 6E(%ecx), %al`
    - ` jo`: `and 6F(%edx), %ch`

#### Slide 13: English Shellcode (Continued)
- **Extended Character Set:**
  - **Punctuation and Spaces:** These can be used to create more complex and less detectable shellcodes.
  - **Examples:**
    - `p.`: `jo short $30`
    - `q.`: `jno short $30`
    - `r.`: `jb short $30`

This optimized version of the text is more structured, coherent, and professional, making it easier to follow and understand.