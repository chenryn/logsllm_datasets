to be a very weak debugger detection technique. The second
check tries to detect an attached debugger by issuing a fake
breakpoint exception. A debugger can be easily hide from
this check by just passing the resulting exception back to the
process, so at runtime the code behaves in the same way as
if it was not running under a debugger. If no debugger has
been found by these checks, the procedure in question sets
the thread aﬃnity of the current thread, forcing it to run
on a randomized CPU in the system8. Before control ﬂow
is handed over to the ﬁrst trampoline, the current thread
context is fetched by means of the GetThreadContext API
in order to modify the debug registers, which are used to
pass parameters between trampolines and also serve as a
storage mechanism to hold the address of the starting tram-
poline. Finally the modiﬁed context is applied by using the
SetThreadContext API and control ﬂow is transfered to the
ﬁrst trampoline.
3.1.1
Trampoline control ﬂow
Control ﬂow between trampolines isn’t dispatched in a stan-
dard way with instructions like call or jmp, as in the case of
compiler generated code. Instead control ﬂow heavily relies
on exception handling and an internal call stack, which is
maintained by the system, so a call hierarchy can be real-
ized between trampolines. Figure 3 shows a situation where
the ﬂow of execution starts at trampolineA and is supposed
to end up at trampolineB. Whenever a trampoline initiates
such a change of control ﬂow, this process always starts at
trampoline0. This trampoline is also the ﬁrst one which is
called from the aforementioned procedure in the protection.
The address of this trampoline is randomized at runtime
via the RDTSC instruction (indicated by overlapping semi-
transparent boxes). The major tasks this trampoline per-
forms are to copy the next trampoline (trampoline1) to
a random location and to put the destination trampoline
(trampolineB in this case) on the internal call stack. This
internal call stack is needed to realize a call hierarchy be-
tween trampolines, because there is never a direct call in-
struction between trampolines but control ﬂow depends on
jumps and exceptions. As a consequence there is no mecha-
nism which implicitly puts a return address on the stack to
let control ﬂow return from a nested call, so all of this logic
has to be emulated by the protection. trampoline1 is ac-
countable for copying the previous trampoline to a random
location, installing a new exception handler and for raising
a single step exception by means of code shown in listing 7.
Moreover it copies parameters to a private stack area, which
is used by the exception handler to forward them to the next
trampoline.
pushf
pop
eax
or
eax, 100h
push
eax
popf
Listing 7: Raise single step exception
First the EFLAGS register is pushed on the stack, the TF bit is
enabled, and the modiﬁed EFLAGS register is applied again,
so before the next instruction executes, a debug exception is
8Reasoning behind this remains unclear at this time
Figure 3: Control ﬂow between trampolines
generated, which ultimately ends up in the previously regis-
tered exception handler. This exception handler then alters
control ﬂow by changing the instruction pointer based on the
parameters copied by the previous trampoline. The handler
clears the TF bit9, removes the SEH entry from the han-
dler list and gives control back to the operating system. As
soon as the thread is scheduled for execution, control ﬂow
resumes at trampoline2 which copies the destination tram-
poline and ﬁnally jumps to trampolineB.
Because of the fact that there is no classical call hierarchy be-
tween trampolines, a mechanism must exist which allows the
system to perform a return operation, i.e. whenever a tram-
poline has ﬁnished its operations control ﬂow must resume
in the trampoline which invoked the respective trampoline.
Once a trampoline wants to leave its scope, it registers a
special exception handler and again raises a single step ex-
ception.
The handler is then called by means of SEH as
usual, removes the SEH entry from the handler list, cleans
the stack and sets the EIP register to the value found in the
DR2 register of the supplied context.
After the operating
system has applied the modiﬁed context, execution resumes
at a trampoline whose position is again randomized. This
trampoline ﬁnally removes the returning trampoline from
the internal call stack, copies the code where control ﬂow
should resume and returns to this location.
While dispatching control ﬂow to trampolines and back, the
DRM system modiﬁes the debug registers by means of the
SetThreadContext API. Hardware breakpoints are switched
on and oﬀ repeatedly by modifying the DR7 register to inter-
fere with a possibly attached debugger. The debug registers
are used by the trampolines in the following way:
• DR0 and DR6 are mostly zeroed out and don’t serve a
special purpose
• DR1 contains a pointer to a shared stack area which is
used to pass data between trampolines
• DR2 holds the address of the trampoline, which is used
to return from another trampoline
• DR3 holds the address of the starting trampoline
(trampoline0). The address is obfuscated by XORing
it with 0x7FFFFFFF
• DR7 is used to turn hardware breakpoints on and oﬀ
very frequently
The debug registers DR0 to DR3 are normally used to spec-
ify the linear address of a hardware breakpoint, while DR6
9A single step exception is a trap, so it’s not necessary to
clear the TF bit to let the program continue normally[5]
and DR7 control options and breakpoint conditions. So by
overwriting the debug registers, the breakpoint mechanism
becomes unavailable for any attached debugger.
3.1.2
Impact
The main purpose of using the trampoline mechanism was
probably to make the problem of ﬁnding DRM relevant code
more diﬃcult. Since control ﬂow between trampolines isn’t
dispatched in a standard way a disassembler can’t easily
obtain any cross referencing information, which makes it
rather diﬃcult to analyze the dependencies between diﬀer-
ent trampolines. Additionally, without understanding the
mechanisms used to emulate the return logic, it is also dif-
ﬁcult to examine the call hierarchy at runtime because it
is not possible to perform an execute until return operation
which is supported by most debuggers. On the other hand
as soon as this mechanism is understood, one gets a pre-
fect call stack by watching the internal call stack emulation
structure. This is obviously an advantage compared to the
standard case where a perfect call stack is not available in
general. Since most trampolines don’t even have a ret in-
struction, deducing function boundaries also becomes harder
for disassemblers. A further eﬀect of the trampolines is the
jittering of start addresses caused by the RDTSC instruction.
This obviously only aﬀects debugging and makes it a rather
annoying process, because the disassembler gets confused by
changing function boundaries overlapping at the same ad-
dress. This impact can be alleviated as will be shown in the
next section.
The most severe impact is in fact caused by the usage of the
debug registers, because this technique eﬀectively blocks all
hardware breakpoints.
So the strategy of using BPMs to
watch access attempts on the ﬁle buﬀer becomes infeasible.
3.1.3
Ease Impact of Trampoline Randomization
The result of the RDTSC instruction is used as the seed for a
PRNG, so the jittering of the trampolines can be defeated
by changing the instruction result to a constant value. As
a consequence, this ﬁxes the trampolines at a constant ad-
dress, which makes it easier to debug and understand the
code. Fortunately, the X86 CPU allows us to turn RDTSC
into a privileged instruction by modifying the TSD ﬂag of
the CR4 register.
This implicates that whenever RDTSC is
executed from a privilege level other than ring0, a general
protection exception (#GP) is thrown. This exception is clas-
siﬁed as a fault, which means that the state of the program
is saved by the processor prior to the beginning of execution
of the faulting instruction. So by writing a driver to patch
the interrupt descriptor table (IDT), it is possible to insert a
handler, which intercepts this exception event and changes
the return value accordingly. As shown in ﬁgure 4 an error
code along with the instruction pointer and some other reg-
isters are then passed to the exception handler, i.e. the far
pointer of the descriptor at oﬀset 13 in the IDT.
Figure 4: Stack layout of #GP handler
The replaced handler has to make sure that the exception
originated in user-mode by checking that EIP < 0x80000000.
Moreover it has to verify that the instruction which caused
this fault actually was of type RDTSC. This can be achieved
by disassembling the code at EIP. If these preconditions are
met, the handler can set EDX:EAX to a constant value, clean
the stack and return from the handler by means of IRETD.
In all other cases the handler just cleans its private stack
and branches to the original handler.
When loaded, this driver causes each trampoline to be al-
ways copied to the same address, which makes debugging a
little bit more comfortable. Especially in the phase of ana-
lyzing the whole trampoline mechanism, recognizing tram-
polines becomes a lot easier when using the driver because
of the ﬁxed locations.
A technique to completely disable the trampoline mecha-
nisms could have been to set the destination trampoline ad-
dress to the source address, so trampolines would be in fact
not copied at all, but execute from their original source loca-
tion. This goal could be reached by modifying the trampo-
line control structures used internally as well as the respec-
tive exception handlers, though this approach would have
required a considerable amount of work in the ﬁrst place.
3.2
Unblocking the Debug Registers
As previously described the debug registers are used to pass
parameters between trampolines and are also used to alter
control ﬂow from exception handlers. By using the registers
in such a way, program logic heavily depends on the values
stored in these registers. This means that it is impossible to
just patch out all code related to modiﬁcation of the debug
registers.
Instead the context APIs need to be emulated
and the central exception dispatcher of the operating sys-
tem (KiUserExceptionDispatcher) has to be modiﬁed for
the debug registers to be available for debugging purposes.
A proven mechanism to hook such API functions is to ﬁrst
inject a DLL into the respective process and then perform
inline patching in order to dispatch control ﬂow to an inter-
nal hook function.
3.2.1
DLL Injection and API Hooking
There are numerous ways of injecting a DLL into a pro-
cess under windows like using SetWindowsHookEx, shellcode
injection or the method of using CreateRemoteThread[6].
Since this topic has been widely discussed over the past years
only the basic ideas are presented. A very reliable and ﬂex-
ible, though platform dependent, method is to inject some
shellcode into the target process. This shellcode can then
load the DLL in question from inside the target process.
First of all the control process allocates some memory in
the target process by using the VirtualAllocEx API func-
tion. Memory has to be allocated for the shellcode as well
as for a data structure which is used to pass the DLL path
to the shellcode and to read back error codes. In the sec-
ond step, the control process injects the actual shellcode
via the WriteProcessMemory API and then creates a new
thread at that address by means of CreateRemoteThread.
The shellcode in turn loads the DLL, saves the DLL handle
to the previously allocated data structure and terminates it-
self. The injecting process waits until the thread handle gets
signaled and reads back the DLL handle or an error code by
means of ReadProcessMemory. This handle can then be used
to perform remote calls at will in the target process. Figure
5 illustrates this approach. Once inside the address space of
the target process, the DLL can hook into any API function
used by the target process, so it is capable of modifying any
functionality exposed by imported API functions. Since the
DRM system builds custom stubs which scan API functions
for int3 opcodes and directly jump to the respective API,
inline patching is an adequate solution to this problem. API
hooking was realized by using the detours package[7] avail-
able from Microsoft Research.
3.2.2
Context Emulation
The ﬁrst step in preventing the DRM system from modify-
ing the debug registers is to hook the SetThreadContext
and GetThreadContext APIs, so upon invocation a hook
function is executed and redirects set and get requests to
an internal storage. This obviously makes it impossible for
the protection system to modify the debug registers, which
allows a debugger to use them. The problem with this ap-
proach is, that as soon as control ﬂow reaches an exception
handler, which emulates the return logic of a trampoline,
the supplied context is out of sync with the context saved in
the internal storage of the injected DLL. The reason for this
is, that the operating system itself passes the real thread
context of the faulting thread from kernel mode down to
KiUserExceptionDispatcher. From there, the thread con-
text is forwarded to RtlDispatchException and ﬁnally ends
up in the respective exception handler. By placing an addi-
tional hook in KiUserExceptionDispatcher it is possible to
re-synchronize the two contexts again, so the DRM system
gets the expected values passed to the exception handler on
the one hand, and the debugger can use the debug registers
to place hardware breakpoints on the other hand.
mov
ecx, [esp+4]
mov
ebx, [esp+0]
push
ecx
push
ebx
call
RtlDispatchException
or
al, al
jz
short loc_7C91EB0A
pop
ebx
pop
ecx
push
0
push
ecx
call
ZwContinue
jmp
short loc_7C91EB15
loc_7C91EB0A:
Figure 5: DLL Injection
pop
ebx
pop
ecx
push
0
push
ecx
push
ebx
call
ZwRaiseException
loc_7C91EB15:
add
esp, 0FFFFFFECh
mov
[esp], eax
mov
dword ptr [esp+4], 1
mov
[esp+8], ebx
mov
dword ptr [esp+10h], 0
push
esp
call
RtlRaiseException
retn
8
Listing 8: KiUserExceptionDispatcher
Listing 8 shows the disassembly of KiUserExceptionDis-
patcher. By looking at the disassembly it becomes obvious
why this procedure is named dispatcher and that’s because
there is no return address on the stack so the ﬁrst parameter
is accessible through [esp+0] rather than through [esp+4]
as is the case with normal procedures. Care must be taken
when transferring control ﬂow from the hooked KiUserEx-
ceptionDispatcher to kernel mode, otherwise random blue
screens will occur due to a messed up stack10. The two pa-
rameters pushed to RtlDispatchException are the thread
context (ECX) and the EXCEPTION_RECORD (EBX). RtlDis-
patchException in turn is responsible for all the SEH logic
previously discussed.
In the context of the DRM system
this function will always return, signaling that an appro-