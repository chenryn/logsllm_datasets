steps:
(1) Denote the input table as 𝑇 . Run the shuffle protocol on 𝑇
with security against semi-honest adversaries. Denote the
output as 𝑇𝑂.
(2) Run a set-equality protocol (secure against malicious adver-
saries) to verify that the set of rows of 𝑇𝑂 is equal to the set
of rows of 𝑇 .
(3) Apply the secure sorting protocol to 𝑇𝑂, with the compar-
isons implemented with security against malicious behavior.
Denote the output as 𝑇𝑆.
This approach seems secure since the set-equality check verifies
the correctness of the shuffle step. Unfortunately, it is insecure to
selective failure attacks, since the set-equality check can serve as
an oracle which tells an adversary whether the set of rows has
been changed or not. For example, a corrupt server can mount an
attack by flipping bits in two shuffle-pair protocols, and observing
whether these flips compensate each other and result in an output
which passes the set-equality check. Details in the full paper.
6.2.2 The secure protocol. It is instructive to think how an adver-
sary can mount a selective failure attack. There two flavors for this
attack: (1) changing bits in multiple rows to check if the resulting
set of rows is identical to the original input; or (2) changing bits at
one step of the protocol and attempting to reverse these changes
by changing bits at a later step of the protocol. The first variant is
prevented by ensuring that each pair of rows differs in many (𝜅)
random bits, and therefore it is unlikely that changing bits results
in a row which is equal to another row. We can prevent the second
attack variant by checking the equality of the input and output
sets after each step in which the adversary has the capability of
changing bits (and therefore the check is done before the adversary
can reverse any changes it had applied to the values).
These observations motivate the following sorting protocol:
(1) The servers concatenate to the table an 𝑛 × 𝜅 matrix of
random bits, where 𝜅 is a statistical security parameter.
None of the servers knows the value of these bits. Denote
the resulting table as 𝑇 .
then run equality-check between 𝑇 and 𝑇1.
then run equality-check protocol 𝑇1 and 𝑇2.
(2) The servers implement a secure shuffle based on the pro-
tocol of Fig. 3, changed in the following way:
(a) The servers compute𝑇1 =Shuffle-pair(𝑇 , 𝑆1, 𝑆2, 𝑆3). They
(b) The servers compute𝑇2 =Shuffle-pair(𝑇1, 𝑆2, 𝑆3, 𝑆1). They
(c) The servers compute𝑇3 =Shuffle-pair(𝑇2, 𝑆3, 𝑆1, 𝑆2). They
(3) The servers apply to 𝑇3 a comparison-based sorting pro-
tocol, where the comparisons are implemented using an
MPC protocol that is secure against malicious adversaries.
The comparisons are applied to the key and to the 𝜅 ran-
dom bits which are concatenated to it as the least signifi-
cant bits (these bits do not change the order of the items
as they serve as the least significant bits).
then run equality-check between 𝑇2 and 𝑇3.
Theorem 1. The sorting protocol is fully secure against a single
malicious server.
The security proof follows from the following two claims.
Claim 3. Steps (1) and (2) of the protocol securely implement the
shuffle functionality. Any corrupt behavior by a server is detected
with probability which is negligible in 𝜅.
Claim 4. Step (3) of the protocol securely computes the order of its
inputs.
Proof sketch of Claim 3: The proof refers to the shuffle pro-
tocol described in Section 5. The basic component of the proof
is proving that each substep, which (1) computes 𝑇 ′ =Shuffle-
pair(𝑇 , 𝑆𝑎, 𝑆𝑏, 𝑆𝑐) and then (2) runs an equality-check protocol be-
tween 𝑇 and 𝑇 ′, is a fully secure implementation of the following
functionality: The input of each server includes the usual sharing
of 𝑇 , and in addition the first two servers have as input a permuta-
tion 𝜋 (which is generated from a shared seed that they have). The
output is a sharing of 𝑇 ′ = 𝜋(𝑇). The security of the entire shuffle
phase follows from the composition of the three invocations of this
functionality.
With regards to the Shuffle-pair protocol, the semi-honest se-
cure implementation preserves privacy but enables parties to flip
arbitrary bits in 𝑇 . However, since Step (1) added to each row 𝜅
random bits, the probability of flipping bits in 𝑇 and obtaining a set
of rows which is equal to the original set of rows of 𝑇 is at most
2(cid:1)·2−2𝜅 +· · · ≈ 𝑛·2−𝜅. Therefore with probability 1−𝑛2−𝜅,
𝑛·2−𝜅 +(cid:0)𝑛
flipping bits results in an output set which is different than the in-
put set. If these sets are indeed different, this is identified by the
set-equality check with probability 1 − (3/4)𝜅. Therefore the prob-
ability of a the change being unnoticed is 𝑛2−𝜅 + (1 − 𝑛2−𝜅)(3/4)𝜅.
Consequently, the view of each party in the protocol can be simu-
lated as if receiving random messages and sending the messages
that it needs to send when correctly following the protocol. Any
deviation from this step results in an abort of the set-equality check
with probability 1 − (𝑛2−𝜅 + (1 − 𝑛2−𝜅)(3/4)𝜅).
Proof of Claim 4: We show that given the input and output
of this step, each server can produce the same view it sees in the
real execution of this step of the protocol: The output of this step
is a mapping from the order of the rows in the input to the step, to
a sorted order of the rows. (And since the input is a random per-
mutation of different keys, this mapping is randomly distributed.)
Based on this mapping, it is straightforward to compute the results
of all comparisons between pairs of keys of the input table. The real
execution uses a fully-secure comparison protocol, and therefore,
based on composition theorems, we can replace it by access to a
comparison oracle. We can therefore simulate the output of each
output of this oracle.
7 THE PROTOCOL
Following the basic description of the protocol in Section 2.1, we
describe it here in more detail.
7.1 Shuffle Equality Protocol
We first need to present another component of the protocol, which
is required in order to verify that in each round the servers apply the
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea620same secret permutations Π𝐴𝐵, Π𝐵𝐴, from shuffle A to shuffle B
and back. This protocol is pretty straightforward.
The ideal functionality of this protocol has as input two baseline
sharings of tables of input records of the format (𝑢, 𝑣, 𝑑). The shared
data is denoted shuffle A and shuffle B, where shuffle B is the result
of applying Π𝐴𝐵 to shuffle A. The functionality also has as inputs
new sharing 𝑋 and 𝑌 of data of the same length as in shuffle A,
shuffle B. The functionality verifies that the ordered list of (𝑢, 𝑣)
fields in 𝑋 is the same as in shuffle A, and that the ordered list of
(𝑢, 𝑣) fields in 𝑌 is the same as in shuffle B.
The shuffle verification protocol runs in the following way:
(4) The servers run a secure quicksort protocol to sort the
items in shuffle A according to the source field. Denote
the resulting order as src list. The mapping of elements
from shuffle A to src list is public.
(5) The servers run a secure quicksort protocol to sort the
items in shuffle B according to the destination field. De-
note the resulting order as dst list. The mapping of ele-
ments from shuffle B to dst list is public.
aTo be clear, in future invocations of the protocol, the input is a sharing of a table
𝑇 , and the output is a random sharing of Π𝐴𝐵 (𝑇) or Π𝐵𝐴(𝑇). The result is the
same permutation of the rows as in the original invocation, but the random
sharing of the items is independent in each invocation.
(1) Each server stores the ordered list of the shares that it has
for all (𝑢, 𝑣) fields in shuffle A, and similarly for shuffle B
(there is no need to keep the shares used for the 𝑑 values).
These are the shares that the server computed in the initial
phase of the protocol.
Denote the shares that server 𝑖 has as shuffle A𝑖, shuffle B𝑖.
(2) Server 𝑖 receives its shares 𝑋 𝑖, 𝑌 𝑖 of 𝑋, 𝑌. It xors the list of
values it has for the (𝑢, 𝑣) fields in 𝑋 𝑖 to the corresponding
list in shuffle A𝑖, and similarly for 𝑌 𝑖 and shuffle B𝑖. The
server then publishes a commitment to the values (𝑋 𝑖 ⊕
shuffle A𝑖) and (𝑌 𝑖 ⊕ shuffle B𝑖).
(3) After all three servers publish these commitments, each
server opens its commitment and presents (𝑋 𝑖⊕shuffle A𝑖)
and (𝑌 𝑖 ⊕shuffle B𝑖). The servers verify that ⊕𝑖=0,1,2(𝑋 𝑖 ⊕
shuffle A𝑖) and ⊕𝑖=0,1,2(𝑌 𝑖 ⊕ shuffle B𝑖) are both equal
to 0.
The functionality essentially checks if the exclusive-or of three
strings, held by the three servers, is 0. The security of the protocol
in the presence of malicious behavior follows from the security of
the commitment scheme (in a similar way to proving security of
coin-flipping protocols, see Section 6.7 of [34]).
7.2 Initial Computation
The initial phase of the protocol works in the following way, which
is also depicted in high level in Figure 1.
(1) The input to the servers is a list of shared records from
the graph. Each item is in the form (𝑢, 𝑣, 𝑑)=(src,dst,value).
There are no parallel edges. A record representing a node
has the source and destination fields equal to each other.
(2) The servers run the secure shuffle protocol to compute a
randomly shuffled version of the initial list. Denote it as
shuffle A.
(3) The servers run a secure shuffle protocol to compute a
secret shuffle of shuffle A to another randomly shuffled
version of the inputs, denoted as shuffle B.
Denote by Π𝐴𝐵 the permutation mapping shuffle A to
shuffle B, and by Π𝐵𝐴 the permutation from shuffle B to
shuffle A.
Each server remembers the random choices it used for
computing Π𝐴𝐵, and therefore the servers can in the fu-
ture securely recompute each of Π𝐴𝐵 and Π𝐴𝐵.a
7.3 Message-passing Protocol: Scatter-Gather
Computation
The protocol runs in the following way (depicted in Figure 2):
(1) The protocol begins with the elements sorted according to
the source, denoted in Figure 2 as src list. The servers run
a secure computation of a circuit computing the scatter
operation on this list.
(2) Each server applies to its shares the public permutation
of a shuffle from src list to shuffle A.
(3) The servers run a secure computation of a shuffle which
applies Π𝐴𝐵 to their shares. The servers then run the shuf-
fle equality protocol (Sec. 7.1) to verify that the input and
output of Π𝐴𝐵 are ordered as in shuffle A and shuffle B,
respectively.
(4) Each server applies to its shares the public permutation
from shuffle B to dst list.
(5) The servers run a secure computation of a circuit com-
puting the gather operation on the graph, applied to the
elements sorted according to the destination.
(6) Each server applies to its shares the public permutation
from dst list to shuffle B.
(7) The servers run a secure computation of shuffle which
applies Π𝐵𝐴 to their shares. They then run the shuffle
equality protocol to verify that the input/output of Π𝐵𝐴
are ordered as in shuffle B and shuffle A, respectively.
(8) Each server applies to its shares the public permutation
from shuffle A to src list. (Now the data is ordered to
apply the scatter operation of Step 1.)
The protocol steps which apply the known permutations Π𝐴𝐵,Π𝐵𝐴
can be combined with the steps preceding and following them.
Namely, with regards to scatter, Steps 8, 1 and 2 are run together and
implement a known permutation followed by a circuit computation
of scatter and then another known permutation. These three steps
can therefore be represented as a single circuit. The same holds for
Steps 4, 5 and 6 of the gather operation.
The circuit computing the OR operation required for the gather
phase of BFS, with circuit depth log 𝑛, is described in Appendix D.
A modification of this circuit to compute more complicated func-
tionalities related to contact tracing is described in Appendix E.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea6217.4 Security
Semi-honest version If semi-honest security is sufficient, the
protocol can be changed in the following way:
• The shuffle and sort protocols can be implemented with only
security against semi-honest behavior. The difference in the
run time of sort between the semi-honest and malicious
versions is by a factor of about 5-6 (see Table 2.).
• The secure computation of scatter and gather can be im-
plemented with only security against semi-honest adver-
saries. (In our experiments we use the fully secure protocols
of [2, 20]. The communication overhead of these protocols
is about 7 times larger than that of semi-honest secure pro-
tocols for the same task. The 7x increase in communication
is not critical to the overall overhead, since these protocols
take a small fraction of the total runtime, see Tables 3 and 4.)
• There is no need to run the shuffle equality protocol.
Full security The initialization and message-passing protocols are
a sequential composition of simpler subprotocols. The full security
of the initialization and message-passing protocols follows from
applying the composition theorem of Canetti [10, 34]. In partic-
ular, the protocols are a sequential composition of the following
subprotocols:
detailed in Theorem 1 and Claim 3 of Section 6.2.
• Sort and shuffle protocols. The security of these protocols is
• The shuffle equality protocol of Section 7.1.
• A secure computation of gather and scatter. These protocols
are implemented using the fully secure protocols of [2, 20].
8 IMPLEMENTING ALGORITHMS
Appendix E demonstrates how to use our framework in order to
implement generalized BFS/contact-tracing algorithms, which also
take into account the time of contact and the probability of infection.
The only components which need to be modified are the circuits
implementing the scatter and gather operations. The resulting per-
formance is comparable to that of the basic BFS protocol.
We describe next how to implement a completely different al-
gorithm, which, for the best of our knowledge, has not yet been
implemented securely.
8.1 Maximal Independent Set
Our protocol is based on modifications to the celebrated parallel
algorithm of Luby for finding a maximal independent set.
Given an undirected graph, a maximal independent set (MIS) is
a set of nodes that are not connected by any edge, and to which
we cannot add any additional node that is not connected to a node
in the set. A trivial algorithm can find an MIS in 𝑂(|𝑉 |) rounds,
by adding nodes to the set in arbitrary order. Luby’s algorithm is
a parallel probabilistic algorithm computing an MIS in 𝑂(log |𝑉 |)
rounds (whp) [38]. This algorithm operates in the following way:
(1) Initialize 𝐼 to an empty set. Mark all nodes as active.
(2) While there is an active node:
(a) Each active node 𝑣 ∈ 𝑉 selects a random number 𝑟(𝑣) and
sends it to its active neighbors.
Nodes
Edges
Random order per round
Fixed order
10,000
200,000
6
78
100,000
2,000,000
7
9
1,000,000
20,000,000
7