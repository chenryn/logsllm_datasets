column of Table 1. The right column of the table lists the results of
the calculation 2.1∗ 3.4 which is performed without any external
libraries and is, as such, by default compiled into pure x87 instruc-
tions due to its long double data type. Notice that this simple
multiplication already experiences a floating-point representation
error in the highlighted base mode, which is an inherent conse-
quence of limited-precision numerical representations. However,
the table clearly shows that ABI attackers can significantly magnify
the error with several orders of magnitude. While in the default
extended-precision mode, the error for our exemplary multipli-
cation lies in the order of 10−19, this error increases to the order
of 10−16 in double-precision mode and lastly to the order of 10−7
in single-precision mode. Observe that for each precision mode,
rounding upward yields the next higher floating-point number that
can be represented in the given precision, whereas the other three
rounding modes yield identical results for this particular example.
It is important to note that any successive calculation on the cor-
rupted result in larger applications would be exposed to an ever
increasing floating-point error. In this respect, our example also
highlights a remarkable discrepancy: while attentive enclave devel-
opers would aim to utilize the maximum available precision and
minimize the effects of inherent floating-point imprecisions, the
usage of the long double data type for this purpose also exposes
the enclave to increased attack surface for x87 ABI attackers.
The last row finally shows the impact of the MMX attack that
always silently replaces the expected outcome with an incorrect
-NaN result. As discussed previously, this error results from the x87
FPU not being able to determine a usable floating-point register on
the register stack and aborting the calculation.
3.3 TEE runtime vulnerability assessment
In order to methodologically assess the prevalence of ABI-level
FPU poisoning attack surface in real-world SGX shielding runtimes,
we performed a comprehensive vulnerability assessment of the 7
open-source projects summarized in Table 2. Our selection was
motivated by a recent extensive study [43] of popular Intel SGX
shielding runtimes, which we extended with two newer runtimes [4,
15] that were not analyzed before. Particularly, we examined all
predominant SGX shielding solutions in use by industry, namely
Intel’s SGX-SDK [19], Microsoft’s OpenEnclave [30], Fortanix’s
Rust-EDP [13], and RedHat’s Enarx [4], as well as three relevant
runtimes that were, at least initially, developed as research projects,
namely Graphene-SGX [38], SGX-LKL [35], and Go-TEE [15]. This
wide selection highlights that our ABI-level vulnerabilities apply
to both research and production code, emerging safe languages
like Rust and Go as well as traditional unsafe languages like C or
C++, and SDK-based secure function interfaces as well as library
OS-based system call shielding systems.
A first conclusion from Table 2 is that prior to October 2019, i.e.,
before the initial Patch by Microsoft OpenEnclave, all 7 runtimes
were originally vulnerable to the ABI poisoning attacks described
7
Table 2: Marked runtimes were demonstrated to not (⋆) or
only partially (⋆) sanitize FPU/SSE state, whereas empty
symbols ((cid:35)) indicate that the runtime was not vulnerable at
the time of our initial analysis (Nov 2019). When applicable,
applied and potentially remediated Patches are provided.
K∗
D
X - S
G
S
E
p e n
O
n cla v e
⋆
⋆
G r a p
(cid:35)
Exploit
Patch 1 xrstor ldmxcsr/cw fxrstor
Patch 2
∗ Includes derived runtimes such as Apache Teaclave’s Rust SGX SDK [36] (formerly
ldmxcsr/cw xrstor xrstor
xrstor
xrstor
⋆
⋆
⋆
–
Baidu Rust-SGX [46]) and Google’s Asylo [16].
h e n e
L
K
X - L
G
S
P
D
u st- E
R
E
E
o - T
G
E
n a r x
(cid:35)
in this work. Indeed, our initial analysis was motivated by a par-
tial ABI hardening patch in OpenEnclave in October 2019, which
subsequently appears to have been picked up by Graphene-SGX
developers as well. For the remaining runtimes, we then performed
our initial analysis in November 2019 where we experimentally
demonstrated that the SGX-SDK, Rust-EDP, SGX-LKL, and Go-TEE
all similarly lacked any form of FPU or SSE register sanitization.
We reported these issues and in the case of the SGX-SDK, this can
be tracked via CVE-2020-0561/Intel-SA-00336, which also affects
derived runtimes, such as Apache Teaclave’s Rust SGX SDK [36]
(formerly Baidu Rust-SGX [46]) and Google’s Asylo [16], that build
on top of the SGX-SDK.
A second tendency in Table 2 relates to the mitigation strate-
gies applied in the different runtimes. Particularly, following our
recommendations for more principled ABI sanitization, Intel re-
sponded to our disclosure by patching the shielding runtime with an
explicit xrstor instruction that fully initializes the entire processor-
extended state on every enclave entry. This is also the mitigation
applied by Enarx2 and Go-TEE. Note that SGX-LKL is depicted
in Table 2 as not to sanitize the FPU/SSE state because of their
unmaintained assembly entry code into the shielding enclave. How-
ever, SGX-LKL has been in a migration process in order to utilize
the code base of Microsoft OpenEnclave in favor of self-written
assembly stubs. As such, once SGX-LKL is fully migrated to utilize
OpenEnclave, it will inherit the mitigations implemented there.
In response to our disclosure, Rust-EDP adopted the original
mitigation strategy of OpenEnclave, which merely sanitizes the
SSE configuration register and the x87 control word through the
ldmxcsr and fldcw instructions respectively. While this approach
appears sufficient at first sight, and avoiding a full xrstor may
indeed be motivated from a performance perspective, we make
the crucial observation that fldcw does not clear the x87 regis-
ter stack and hence cannot protect the enclave against the MMX
poisoning attack variants described above. Specifically, we experi-
mentally demonstrated that on the initially patched Rust-EDP and
OpenEnclave runtimes, we can still forcibly put the processor in
MMX mode before entering the enclave and cause the outcome of
trusted in-enclave x87 FPU operations to be incorrectly replaced
with NaN values, which are further propagated silently and may
cause application-specific misbehavior. Hence, while the initial
2Enarx is an ongoing project, still under active development, which is only included
for completeness here. The specific runtime entry sanitization code was committed in
March 2020, in completion of a longer-standing documented issue.
ACSAC 2020, December 7–11, 2020, Austin, USA
Alder et al.
patches in these runtimes do severely reduce the attack surface
by cleansing MXCSR and the FPU control word, they fail to fully
shield the enclave application binary from our attacks. To fully rule
out MMX attack variants as well, the runtime should minimally
execute an additional emms instruction to place the FPU in the ex-
pected x87 mode. The mitigation implemented by the Graphene
developers who used an fxrstor instruction is sufficient to also
rule out this followup MMX attack as it cleanses all state related
to the FPU, MMX, XMM, and MXCSR registers. However, in light
of our findings, we explicitly recommend that shielding runtimes
adopt the more principled and future-proof strategy of cleansing the
entire processor-extended state through xrstor on every enclave
entry. Both OpenEnclave and Rust-EDP acknowledged the remain-
ing attack surface of an insufficient ldmxcsr/cw mitigation, and
our recommended full xrstor approach was integrated into their
respective projects. Microsoft additionally assigned this followup
issue CVE-2020-15107.
4 CASE STUDY: FLOATING-POINT
EXCEPTIONS AS A SIDE CHANNEL
Background. Apart from allowing to compromise computa-
tions, an adversary can also use the FPU state registers to obtain
side-channel information about floating-point computations inside
SGX enclaves. Notably, this side channel also applies to floating-
point operations carried out using the SSE extensions, i.e., with
standard compiler settings and without the special requirement to
use the x87 FPU. The base for this side channel are the exception
mask bits that can be set in the MXCSR register right before entering
the enclave and the fact that an attacker can register a custom signal
handler for floating-point exceptions (SIGFPE) to be notified about
the exceptions. Crucially, for SGX enclaves, the signal handler is
untrusted code. This is similar to other controlled-channel attacks,
e.g., attacks based on page faults [48], segmentation faults [17],
or alignment-check exceptions [43]. Note that in contrast to user-
space code, the exact reason for the exception (e.g., underflow or
overflow) is not passed on to the signal handler when triggered
from within SGX. However, we show that this can be overcome by
only unmasking one exception at a time and executing the enclave
multiple times with the same input operands.
In this section, for the sake of simplicity, we focus on double
operands, i.e., the 8-byte IEEE 754 double-precision binary floating-
point format [47]. In this case, the smallest normal number is
nmin ≈ 2.2250738585072014 · 10−308 (hex 0x0010000000000000),
while the largest subnormal is dmax ≈ 2.2250738585072009· 10−308
(hex 0x000FFFFFFFFFFFFF). Whenever the result of a computation
is ≤ dmax , an underflow exception will be triggered. As described
in the following, this can be used as a side channel to infer one
possibly secret operand of an enclaved floating-point computation,
in this particular example a multiplication, if the other operand is
attacker-controlled.
Attack scenario. For example, consider a neural network im-
plementation, where the weights of the network are secrets stored
securely inside an SGX enclave. The input layer of the network
involves multiplications of the attacker-controlled inputs and the
secret weights. For simplicity, we focus on a single multiplication
of two floats secret * input in the following, but note that the
8
method can be extended to multiple such multiplications by recov-
ering the secret operand one-by-one. Furthermore, for SGX, the
enclave code can be single-stepped [44] which allows to exactly
pinpoint on which instruction an exception has been raised.
For our proof-of-concept, we created an ecall on Intel SGX-
SDK v2.7.1 which multiplies a secret value with an input. The gcc
compiler by defaults generates the SSE instruction mulsd for the
multiplication in Listing 1. Note that the enclave API does not
expose the internal result value to the attacker and we merely focus
on the side-channel signal whether an exception was raised or not.
Secret recovery. To recover secret, in the first step, we deter-
mine if its magnitude is ≤ 1. This can be achieved by passing nmin
as input: if an underflow exception is raised, |secret| < 1, because
the result of the multiplication is less than nmin. In the follow-