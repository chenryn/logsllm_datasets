title:From Zygote to Morula: Fortifying Weakened ASLR on Android
author:Byoungyoung Lee and
Long Lu and
Tielei Wang and
Taesoo Kim and
Wenke Lee
2014 IEEE Symposium on Security and Privacy
From Zygote to Morula:
Fortifying Weakened ASLR on Android
Byoungyoung Lee†, Long Lu‡, Tielei Wang†, Taesoo Kim∗, and Wenke Lee†
†School of Computer Science, Georgia Institute of Technology
‡Department of Computer Science, Stony Brook University
∗MIT CSAIL
the morula is produced by the
In embryology,
rapid division of the zygote cell; in Android, each
application process is a fork of the Zygote process.
Abstract—There have been many research efforts to secure
Android applications and the high-level system mechanisms. The
low-level operating system designs have been overlooked partially
due to the belief that security issues at this level are similar to
those on Linux, which are well-studied. However, we identify that
certain Android modiﬁcations are at odds with security and result
in serious vulnerabilities that need to be addressed immediately.
In this paper, we analyze the Zygote process creation model,
an Android operating system design for speeding up application
launches. Zygote weakens Address Space Layout Randomization
(ASLR) because all application processes are created with largely
identical memory layouts. We design both remote and local
attacks capable of bypassing the weakened ASLR and executing
return-oriented programming on Android. We demonstrate the
attacks using real applications, such as the Chrome Browser and
VLC Media Player. Further, we design and implement Morula,
a secure replacement for Zygote. Morula introduces a small
amount of code to the Android operating system and can be
easily adopted by device vendors. Our evaluation shows that,
compared to Zygote, Morula incurs a 13 MB memory increase
for each running application but allows each Android process
to have an individually randomized memory layout and even a
slightly shorter average launch time.
I.
INTRODUCTION
With over 1.5 million devices activated daily in 2013 [33],
Android now owns the largest mobile user population around
the globe. However, as past experiences have shown, once a
piece of software or platform gains signiﬁcant popularity, it
becomes a hot target for ﬁnancially or politically motivated at-
tackers. Despite the tremendous efforts by the security research
community in reinforcing the security of Android, so far only
a few categories of security issues pertaining to Android have
been thoroughly studied and addressed. Most of these issues
are due to the vulnerable applications and speciﬁc to the high-
level design concepts adopted in Android, such as the widely
debated permission model.
In this paper, we describe a new Android security threat and
propose a countermeasure. Unlike previous studies, this threat
is enabled by a low-level design inside the Android operating
system. The design was intended to improve the responsiveness
of applications at launch-time, but it adversely affects the ef-
fectiveness of Address Space Layout Randomization (ASLR).
The root cause of the new threat lies in the core routine
that each application process goes through when created in
Android. Distributed in bytecode form, Android apps rely
on the Dalvik Virtual Machine (DVM) for interpretation and
runtime support. However, launching a new DVM instance
for each new app process can be both time- and resource-
consuming. Given the severe constraints of CPU power and
memory space on the early generation of mobile devices,
Android designers chose to spawn every app process by
forking a master process, the Zygote process, which is created
at device boot-time and contains a full DVM instance with
frequently used classes preloaded. Zygote effectively shortens
apps’ launch-time. However, a side effect of this long-existing
design—all app processes running on a device share a largely
identical memory layout inherited from Zygote—poses a great
security threat to Android’s recently adopted ASLR [22].
ASLR, when properly implemented, loads the code and
data of a program into random memory locations such that
the process memory layout cannot be deterministically inferred
from other executions of the same program or from other co-
located processes using the same shared libraries. However,
the Zygote process creation model indirectly causes two types
of memory layout sharing on Android, which undermine the
effectiveness of ASLR: 1) the code of an app is always loaded
at the exact same memory location across different runs even
when ASLR is present; and more alarmingly, 2) all running
apps inherit the commonly used libraries from the Zygote
process (including the libc library) and thus share the same
virtual memory mappings of these libraries, which represent a
total of 27 MB of executable code in memory.
Both types of memory layout sharing (or leakage) are found
on all versions of Android to date. These memory leakages
enable attackers to easily bypass ASLR, exposing Android
apps to critical attacks such as return-oriented programming
(ROP). We identify not only local but also remote attack
vectors, which obviate the common need for a pre-installed
app to carry out attacks on Android devices. By launching
attacks at popular apps, including the Chrome browser and
VLC media player, we demonstrate in Section III the critical
and realistic nature of this threat. It is also worth noting that
we found similar issues in the Chromium OS and Chrome
Browser for desktops. For simplicity, this paper only discusses
the issues in the context of Android.
Beyond the identiﬁcation of this critical threat, this paper
also proposes a simple and effective countermeasure, namely
© 2014, Byoungyoung Lee. Under license to IEEE.
DOI 10.1109/SP.2014.34
424
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
Morula, which is implemented via a small modiﬁcation to
the Android OS. Morula eliminates the dangerously high
predictability of the memory layout in Android by allowing
processes to have individually randomized memory layouts. An
intuitive way to carry out this straightforward idea is to aban-
don the Zygote process and create each application process
from scratch. In this case, the dependent libraries, application
code, and data are loaded into freshly allocated memory
regions each time a process is being created, and therefore the
existing ASLR in Android is able to independently randomize
the memory layout for each process. However, this intuitive
approach (requiring a cold start for each application) can incur
a prohibitive performance overhead that prolongs the average
app launch time by more than 3.5 seconds. In comparison,
Morula allows Android ASLR to achieve the same level of
security and shows a slightly shorter average launch time.
The core idea of Morula is to adaptively maintain a pool of
Zygote processes with distinct memory layouts (i.e., Morula
processes), so that when an app is about to start, a unique
Morula instance is available as a one-time and pre-initialized
process template in which the app can be loaded. Creating
and initializing the Morula processes in advance moves the
time-consuming operations (e.g., library and class loading)
out of the time-critical app launching phase and consequently
reduces the app launch time. We also devise two optimization
strategies: on-demand loading and selective randomization,
to further limit Morula’s impact on app responsiveness and
system memory usages.
We have built a prototype of Morula on Android 4.2 and
evaluated its effectiveness and performance overheads. When
Morula is in use, an attacker can no longer bypass Android
ASLR with a single attempt; rather,
they have to try, on
average, a minimum of 18,000 times. Moreover, Morula meets,
and sometimes exceeds, its performance goal of keeping app
launches as fast as when Zygote is used. However, Morula
incurs an increase of 13.7 MB memory usage per running app,
as a trade-off for the improved security and optimized app
responsiveness. Morula imposes no obvious overhead to other
resources, including battery power.
In addition to identifying a new threat and proposing a
countermeasure, this paper also conveys an important message:
the modiﬁcations and extensions made to Linux by Android
and other emerging OSes can open new and unique attack
surfaces. Some feature- or performance- oriented customiza-
tions do interfere or even break existing security mechanisms.
Therefore, the new designs incorporated by these OSes need
careful security scrutiny. This message contradicts the widely
held belief that the security of the low-level Android OS is the
same as the security of Linux (because Linux is the OS core
of Android).
To summarize, our contributions are as follows:
•
Leveraging Android’s weakened ASLR, we devised
two realistic attacks on real apps, which break ASLR
and achieve ROP on current Android systems.
• We designed Morula as a practical countermeasure and
implemented it as a small and backward-compatible
extension to the Android OS for easy adoption.
• We conducted thorough evaluations of Morula: mea-
suring its enhancement on ASLR and analyzing its
overheads in terms of app launch delays, memory use,
battery life, etc.
The rest of the paper continues as follows. Section II
provides the necessary background information about the new
threat and our solution. We discuss the details about the threat
and illustrate the possible attack scenarios in Section III.
Morula’s design and implementation is explained in Sec-
tion IV, followed by an evaluation in Section V. We then dis-
cuss implications and limitations in Section VI, and compare
the related work in Section VII. Section VIII concludes the
paper.
II. BACKGROUND
A. App Process Creation on Android
Android inherits its operating system core from Linux.
To overcome the unique constraints facing mobile platforms
and enable new mobile-speciﬁc features, Android’s design
introduced a new middleware layer on top of traditional Linux
and customized the designs of several system management
components within Linux. Among these customizations is the
Zygote process creation model. At the time of its introduction,
Zygote represented a reasonable design choice for improving
responsiveness and performance of apps, but we ﬁnd the design
conﬂicts with ASLR, the critical security mechanism recently
adopted by Android. Next we provide the background knowl-
edge on the Zygote process and other factors that contribute
to the root cause of the new security threat.
Android apps are packaged in Dalvik bytecode form and
rely on the Dalvik Virtual Machine (DVM) for interpretation
in runtime. Compiling apps into bytecode for distribution nat-
urally brings cross-platform compatibility to Android. More-
over, compared with native code, bytecode generally produces
smaller executable ﬁles and guarantees better runtime security,
which is favorable to mobile devices. However, similar to
other interpretation-based execution, Android’s bytecode-based
apps can suffer from the performance overhead incurred by
the virtual machine during runtime as well as launch-time.
To speed up the execution of bytecode, DVM prioritized
performance in its design. One example is the adoption of just-
in-time compilation at a very early stage in its development.
To improve app launch-time performance, Android em-
ploys the Zygote process creation model to avoid the long de-
lay that every app would otherwise have to undergo (i.e., wait-
ing for a fresh DVM instance to be created). Instead of
repeating the creation and initialization of DVM for each app,
Android does so only once during OS boot-time and keeps
the resulting DVM instance as a template process, namely
the Zygote process, from which all app processes will be
“forked.” The Zygote process not only hosts an initialized
DVM instance but also loads a large pool of commonly used
classes and libraries. As child processes of Zygote, every app
inherits the established process context without performing the
initialization themselves, and thus takes a signiﬁcantly reduced
amount of time to start. Zygote also enables a system-wide
sharing of the memory pages that contain the preloaded code
and data, reducing global memory usage. It is also worth noting
that Zygote-like process creation and class preloading is not
only seen on Android, but also used by the Chrome browser
and Chromium OS.
425
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 

&&*
!" & 

! "
' $ &

! "  !& 
&&&






#$%
(!)
 !"


Fig. 1. Zygote process creation model with memory layout representations
when launching a browser app. AM represents Activity Manager. The gray
region displays a snapshot of the Android’s address space layouts for running
apps, directly inherited from the Zygote process; each pattern represents a
shared library, such as libc.so or libssl.so, which is located identically
among all running apps.
Figure 1 illustrates how Zygote assists with creating a
new application process. Upon receiving an application launch
request, the Activity Manager in the Android Runtime signals
the Zygote process through an IPC socket (). The latter
then invokes the fork() system call, creating a new process
to host
the app (). Since the DVM instance is already
created and loaded with the common libraries by the parent
process, the forked child directly proceeds to the warm-init
stage, where only a few initializations that cannot be done in
advance are completed (). As the ﬁnal step of the app launch
phase, namely specialization, the forked process loads
the actual app per the information passed from the Activity
Manager (). The UID and GID are set at this time, marking
the beginning of app-speciﬁc security enforcement. Control
is then handed over to the application code via a call to the
main() method of the Activity Thread.
While reducing the app launch-time delay signiﬁcantly, the
Zygote process creation model poses an obvious side effect to
all app processes: as the forked children of Zygote, they all
end up sharing not only the common memory content but also
the same memory layout. Figure 1 also shows that the shared
system libraries are loaded at the same memory locations
across different processes. This side effect is by no means
harmful by itself but improves the system-wide memory space
efﬁciency. However, the nearly identical memory layout in all
processes can be leveraged by an attacker, who, knowing the
code addresses in one app can bypass ASLR and launch return-
oriented programming attacks against any vulnerable app on
the same device1. The severity of this threat is elevated by
the fact that native code is commonly used in many popular
and important apps, each of which heavily relies on native
code components for rendering HTML, playing media, accel-
erating graphics, etc., and such code is historically known for
being prone to memory corruptions and address information
leakages.
regions for both code and data at nearly random locations,
making it statistically difﬁcult to predict the memory address
of any executable code and writable data. Therefore, it can
signiﬁcantly lower the chance of locating code gadgets in
memory, without which return-oriented programming attacks
cannot succeed. Although a number of evasion techniques have
emerged, most of them require a particular app to leak its
address information and have an additional memory corruption
vulnerability at the same time, which is a difﬁcult requirement
to satisfy. In reality, ASLR, along with data execution preven-
tion, forms today’s most effective and practical defense against
a broad range of control-ﬂow hijacking attacks.
Android started supporting ASLR only recently, after the
OS had experienced a remarkable growth in user population
and seen an increasing demand for better security. Despite apps
being mainly written in a strong-type language, memory leaks
and control-ﬂow hijacking attacks are still more than likely
to happen on Android, as shown by the continuous stream
of new rooting exploits and vulnerability disclosures [1, 3].
This is partially because of the large amount of native code
executing inside every app process. First, Android allows
apps that are built with NDK (Native Development Kit) to
link native libraries and invoke functions in such libraries
through JNI-like interfaces. Apps with complex features, high
performance requirements, and legacy codebase tend to have
heavy dependence on native code, including many popular
apps, such as browsers, media players, games, etc. Second,
the runtime libraries and the DVM are implemented in C/C++
and run natively inside app processes without any memory
safety assurance. Native code from these two sources, loaded
into the same process as the rest of the app, represents a large
attack surface, which would have been left exposed if ASLR
was not supported or was bypassed.
The adoption of ASLR in Android took several version
iterations to complete [32]. Android 4.0 was the major upgrade
that ﬁrst introduced ASLR to the mobile OS. The scope at that
time only covered the shared libraries shipped with the OS,
such as libbionic (Android’s implementation of libc).
Therefore, only these libraries were loaded into randomly al-
located memory locations in each process, whereas other code
that may also be used as sources for mining ROP gadgets, such
as system executables and apps’ native libraries, always re-
mained at the same memory location when loaded, creating an
easy way to bypass ASLR. As Android added support for PIE
(Position Independent Executable) in Android 4.1 a year later,
its ASLR ﬁnally expanded to cover the remaining libraries, the
dynamic linker, and all other executables compiled with the
PIE ﬂag. The heap space was also randomized, marking the
end of a complete port of ASLR from Linux to Android [22]
and winning praise from the security community [17].
B. Address Space Layout Randomization on Android
ASLR is an attack mitigation technique used by all major
commercial operating systems today. It allocates memory
1Although the memory layout sharing issue was previously known, it was
not considered to be harmful to ASLR as it was seemingly difﬁcult for
attackers to take advantage of this issue [28, 31]. However, we found that
this can be easily abused, even in popular Android apps (see Section III).
Although a large amount of effort was spent
to fully
incorporate ASLR to Android, unfortunately, the effort failed
to include a careful examination of the existing system designs
that could cause conﬂicts with ASLR. In the next section, we
will explain these in detail: how the Zygote process creation
model—a design choice made to boost app performance—can
signiﬁcantly reduce the effectiveness of ASLR and even allow
attackers to bypass the critical security mechanism.
426
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
III. EXPLOITING ANDROID’S ASLR
The effectiveness of ASLR in mitigating control-ﬂow hi-
jacking attacks hinges on the fact that attackers possess no