title:Storage-based Intrusion Detection: Watching Storage Activity for Suspicious
Behavior
author:Adam G. Pennington and
John D. Strunk and
John Linwood Griffin and
Craig A. N. Soules and
Garth R. Goodson and
Gregory R. Ganger
USENIX Association
Proceedings of the
12th USENIX Security Symposium
Washington, D.C., USA
August 4–8, 2003
© 2003 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Storage-based Intrusion Detection:
Watching storage activity for suspicious behavior
Adam G. Pennington, John D. Strunk, John Linwood Grifﬁn,
Craig A.N. Soules, Garth R. Goodson, Gregory R. Ganger
Carnegie Mellon University
Abstract
Storage-based intrusion detection allows storage systems
to watch for data modiﬁcations characteristic of system in-
trusions. This enables storage systems to spot several com-
mon intruder actions, such as adding backdoors, inserting
Trojan horses, and tampering with audit logs. Further, an
intrusion detection system (IDS) embedded in a storage
device continues to operate even after client systems are
compromised. This paper describes a number of speciﬁc
warning signs visible at the storage interface. Examination
of 18 real intrusion tools reveals that most (15) can be de-
tected based on their changes to stored ﬁles. We describe
and evaluate a prototype storage IDS, embedded in an NFS
server, to demonstrate both feasibility and efﬁciency of
storage-based intrusion detection. In particular, both the
performance overhead and memory required (152 KB for
4730 rules) are minimal.
1 Introduction
Many intrusion detection systems (IDSs) have been devel-
oped over the years [1, 23, 29], with most falling into one
of two categories: network-based or host-based. Network
IDSs (NIDS) are usually embedded in sniffers or ﬁrewalls,
scanning trafﬁc to, from, and within a network environ-
ment for attack signatures and suspicious trafﬁc [5, 25].
Host-based IDSs (HIDS) are fully or partially embedded
within each host’s OS. They examine local information
(such as system calls [10]) for signs of intrusion or suspi-
cious behavior. Many environments employ multiple IDSs,
each watching activity from its own vantage point.
The storage system is another interesting vantage point for
intrusion detection. Several common intruder actions [7,
p. 218][34, pp. 363–365] are quite visible at the storage
interface. Examples include manipulating system utilities
(e.g., to add backdoors or Trojan horses), tampering with
audit log contents (e.g., to eliminate evidence), and reset-
ting attributes (e.g., to hide changes). By design, a stor-
age server sees all changes to persistent data, allowing it to
transparently watch for suspicious changes and issue alerts
about the corresponding client systems. Also, like a NIDS,
a storage IDS must be compromise-independent of the host
OS, meaning that it cannot be disabled by an intruder who
only successfully gets past a host’s OS-level protection.
This paper motivates and describes storage-based intrusion
detection. It presents several kinds of suspicious behav-
ior that can be spotted by a storage IDS. Using sixteen
“rootkits” and two worms as examples, we describe how
ﬁfteen of them would be exposed rapidly by our storage
IDS. (The other three do not modify stored ﬁles.) Most
of them are exposed by modifying system binaries, adding
ﬁles to system directories, scrubbing the audit log, or using
suspicious ﬁle names. Of the ﬁfteen detected, three mod-
ify the kernel to hide their presence from host-based detec-
tion including FS integrity checkers like Tripwire [18]. In
general, compromises cannot hide their changes from the
storage device if they wish to persist across reboots; to be
re-installed upon reboot, the tools must manipulate stored
ﬁles.
A storage IDS could be embedded in many kinds of storage
systems. The extra processing power and memory space
required should be feasible for ﬁle servers, disk array con-
trollers, and perhaps augmented disk drives. Most detec-
tion rules will also require FS-level understanding of the
stored data. Such understanding exists trivially for a ﬁle
server, and may be explicitly provided to block-based stor-
age devices. This understanding of a ﬁle system is anal-
ogous to the understanding of application protocols used
by a NIDS [27], but with fewer varieties and structural
changes over time.
As a concrete example with which to experiment, we have
augmented an NFS server with a storage IDS that sup-
ports online, rule-based detection of suspicious modiﬁca-
tions. This storage IDS supports the detection of four cat-
egories of suspicious activities. First, it can detect unex-
pected changes to important system ﬁles and binaries, us-
ing a rule-set very similar to Tripwire’s. Second, it can de-
tect patterns of changes like non-append modiﬁcation (e.g.,
of system log ﬁles) and reversing of inode times. Third, it
can detect speciﬁcally proscribed content changes to crit-
ical ﬁles (e.g., illegal shells inserted into /etc/passwd).
Fourth, it can detect the appearance of speciﬁc ﬁle names
(e.g., hidden “dot” ﬁles) or content (e.g., known viruses
or attack tools). An administrative interface supplies the
USENIX Association
12th USENIX Security Symposium 
137
detection rules, which are checked during the processing
of each NFS request. When a detection rule triggers, the
server sends the administrator an alert containing the full
pathname of the modiﬁed ﬁle, the violated rule, and the
offending NFS operation. Experiments show that the run-
time cost of such intrusion detection is minimal. Further
analysis indicates that little memory capacity is needed for
reasonable rulesets (e.g., only 152 KB for an example con-
taining 4730 rules).
The remainder of this paper is organized as follows. Sec-
tion 2 introduces storage-based intrusion detection. Sec-
tion 3 evaluates the potential of storage-based intrusion
detection by examining real intrusion tools. Section 4 dis-
cusses storage IDS design issues. Section 5 describes a
prototype storage IDS embedded in an NFS server. Sec-
tion 6 uses this prototype to evaluate the costs of storage-
based intrusion detection. Section 7 presents related work.
Section 8 summarizes this paper’s contributions and dis-
cusses continuing work.
2 Storage-based Intrusion Detection
Storage-based intrusion detection enables storage devices
to examine the requests they service for suspicious client
behavior. Although the world view that a storage server
sees is incomplete, two features combine to make it a well-
positioned platform for enhancing intrusion detection ef-
forts. First, since storage devices are independent of host
OSes, they can continue to look for intrusions after the ini-
tial compromise, whereas a host-based IDS can be disabled
by the intruder. Second, since most computer systems rely
heavily on persistent storage for their operation, many in-
truder actions will cause storage activity that can be cap-
tured and analyzed. This section expands on these two fea-
tures and identiﬁes limitations of storage-based intrusion
detection.
2.1 Threat model and assumptions
Storage IDSs focus on the threat on of an attacker who has
compromised a host system in a managed computing en-
vironment. By “compromised,” we mean that the attacker
subverted the host’s software system, gaining the ability to
run arbitrary software on the host with OS-level privileges.
The compromise might have been achieved via technical
means (e.g., exploiting buggy software or a loose policy) or
non-technical means (e.g., social engineering or bribery).
Once the compromise occurs, most administrators wish to
detect the intrusion as quickly as possible and terminate it.
Intruders, on the other hand, often wish to hide their pres-
ence and retain access to the machine.
Unfortunately, once an intruder compromises a machine,
Local
Area
Network
Wide
Area
Network
Firewall
and NIDS
Operating System
File
System
RPC or
Device
Driver
HIDS
Storage interconnect or
network link physically restricts
client access to storage
Storage
Requests
Storage
+
IDS
Configuration
and Alerts
Admin Console
Figure 1: The compromise independence of a storage IDS. The stor-
age interface provides a physical boundary behind which a storage server
can observe the requests it is asked to service. Note that this same picture
works for block protocols, such as SCSI or IDE/ATA, and distributed ﬁle
system protocols, such as NFS or CIFS. Also note that storage IDSs do
not replace existing IDSs, but simply offer an additional vantage point
from which to detect intrusions.
intrusion detection with conventional schemes becomes
much more difﬁcult. Host-based IDSs can be rendered in-
effective by intruder software that disables them or feeds
them misinformation, for which many tools exist. Network
IDSs can continue to look for suspicious behavior, but are
much less likely to ﬁnd an already successful intruder—
most NIDSs look for attacks and intrusion attempts rather
than for system usage by an existing intruder [11]. A stor-
age IDS can help by offering a vantage point on a system
component that is often manipulated in suspicious ways
after the intruder compromises the system.
A key characteristic of the described threat model is that
the attacker has software control over the host, but does not
have physical access to its hardware. We are not speciﬁ-
cally trying to address insider attacks, in which the intruder
would also have physical access to the hardware and its
storage components. Also, for the storage IDS to be ef-
fective, we assume that neither the storage device nor the
admin console are compromised.
2.2 Compromise independence
A storage IDS will continue watching for suspicious activ-
ity even when clients’ OSes are compromised. It capital-
138
12th USENIX Security Symposium 
USENIX Association
izes on the fact that storage devices (whether ﬁle servers,
disk array controllers, or even IDE disks) run different
software on separate hardware, as illustrated in Figure 1.
This fact enables server-embedded security functional-
ity that cannot be disabled by any software running on
client systems (including the OS kernel). Further, stor-
age devices often have fewer network interfaces (e.g.,
RPC+SNMP+HTTP or just SCSI) and no local users.
Thus, compromising a storage server should be more dif-
ﬁcult than compromising a client system. Of course, such
servers have a limited view of system activity, so they can-
not distinguish legitimate users from clever impostors. But,
from behind the physical storage interface, a storage IDS
can spot many common intruder actions and alert adminis-
trators.
Administrators must be able to communicate with the
storage IDS, both to conﬁgure it and to receive alerts.
This administrative channel must also be compromise-
independent of client systems, meaning that no user (in-
cluding root) and no software (including the OS kernel)
on a client system can have administrative privileges for
the storage IDS. Section 4 discusses deployment options
for the administrative console, including physical consoles
and cryptographic channels from a dedicated administra-
tive system.
All of the warning signs discussed in this paper could also
be spotted from within a HIDS, but host-based IDSs do not
enjoy the compromise independence of storage IDSs. A
host-based IDS is vulnerable to being disabled or bypassed
by intruders that compromise the OS kernel. Another in-
teresting place for a storage IDS is the virtual disk module
of a virtual machine monitor [39]; such deployment would
enjoy compromise independence from the OSes running in
its virtual machines [4].
2.3 Warning signs for storage IDSs
Successful intruders often modify stored data. For in-
stance, they may overwrite system utilities to hide their
presence, install Trojan horse daemons to allow for re-
entry, add users, modify startup scripts to reinstall kernel
modiﬁcations upon reboot, remove evidence from the audit
log, or store illicit materials. These modiﬁcations are visi-
ble to the storage system when they are made persistent.
This section describes four categories of warning signs
that a storage IDS can monitor: data and attribute modi-
ﬁcations, update patterns, content integrity, and suspicious
content.
2.3.1 Data/attribute modiﬁcation
In managed computing environments, the simplest (and
perhaps most effective) category of warning signs con-
sists of data or meta-data changes to ﬁles that administra-
tors expect to remain unchanged except during explicit up-
grades. Examples of such ﬁles include system executables
and scripts, conﬁguration ﬁles, and system header ﬁles and
libraries. Given the importance of such ﬁles and the infre-
quency of updates to them, any modiﬁcation is a potential
sign of intrusion. A storage IDS can detect all such modiﬁ-
cations on-the-ﬂy, before the storage device processes each
request, and issue an alert immediately.
In current systems, modiﬁcation detection is sometimes
provided by a checksumming utility (e.g., Tripwire [18])
that periodically compares the current storage state against
a reference database stored elsewhere. Storage-based in-
trusion detection improves on this current approach in
three ways: (1) it allows immediate detection of changes
to watched ﬁles; (2) it can notice short-term changes, made
and then undone, which would not be noticed by a check-
summing utility if the changes occurred between two pe-
riodic checks; and (3) for local storage, it avoids trusting
the host OS to perform the checks, which many rootkits
disable or bypass.
2.3.2 Update patterns
A second category of warning signs consists of suspi-
cious access patterns, particularly updates. There are sev-
eral concrete examples for which storage IDSs can be use-
ful in watching. The clearest is client system audit logs;
these audit logs are critical to both intrusion detection [6]
and diagnosis [35], leading many intruders to scrub evi-
dence from them as a precaution. Any such manipulation
will be obvious to a storage IDS that understands the well-
deﬁned update pattern of the speciﬁc audit log. For in-
stance, audit log ﬁles are usually append-only, and they
may be periodically “rotated.” This rotation consists of
renaming the current log ﬁle to an alternate name (e.g.,
logfile to logfile.0) and creating a new “current” log
ﬁle. Any deviation in the update pattern of the current log
ﬁle or any modiﬁcation of a previous log ﬁle is suspicious.
Another suspicious update pattern is timestamp reversal.
Speciﬁcally, the data modiﬁcation and attribute change
times commonly kept for each ﬁle can be quite useful
for post-intrusion diagnosis of which ﬁles were manipu-
lated [9]. By manipulating the times stored in inodes (e.g.,
setting them back to their original values), an intruder can
inhibit such diagnosis. Of course, care must be taken with
IDS rules, since some programs (e.g., tar) legitimately set
these times to old values. One possibility would be to only
set off an alert when the modiﬁcation time is set back long
after a ﬁle’s creation. This would exclude tar-style activ-
ity but would catch an intruder trying to obfuscate a mod-
iﬁed ﬁle. Of course, the intruder could now delete the ﬁle,
create a new one, set the date back, and hide from the stor-
age IDS—a more complex rule could catch this, but such
escalation is the nature of intrusion detection.
USENIX Association
12th USENIX Security Symposium 
139
Detection of storage denial-of-service (DoS) attacks also
falls into the category of suspicious access patterns. For
example, an attacker can disable speciﬁc services or en-
tire systems by allocating all or most of the free space. A
similar effect can be achieved by allocating inodes or other
metadata structures. A storage IDS can watch for such ex-
haustion, which may be deliberate, accidental, or coinci-