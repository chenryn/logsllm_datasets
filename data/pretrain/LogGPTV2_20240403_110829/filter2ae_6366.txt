# 【漏洞分析】SSH 命令注入漏洞 (CVE-2017-1000117) 分析

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。
作者：RickyHao & C1tas@360CERT

## 0x00 背景介绍
恶意第三方可以通过构造一个“ssh://…”形式的URL，并将其提供给不知情的受害者。当受害者尝试访问该URL时，可能会导致其机器上任意程序的执行。这种URL可以被放置在恶意项目的.gitmodules文件中，诱使不知情的受害者运行`git clone --recurse-submodules`命令来触发漏洞。

2017年8月10日，Junio C Hamano发布了关于此问题的通告。

## 0x01 漏洞概述
攻击者可以通过巧妙构造“ssh://…”链接，诱使受害人在执行程序时访问该恶意链接，从而达到命令执行的目的。此类链接可置于Git项目的`.gitmodules`文件中，当用户对项目执行`git clone --recurse-submodules`操作时，会引发安全问题。尽管本报告仅以Git为例进行说明，但该漏洞同样影响SVN、CVS、HG、Gitlab、Github Desktop和SourceTree等工具。

## 0x02 漏洞攻击面及影响
### 影响范围
该漏洞主要由“ssh://…”链接引起。包括Git、SVN、CVS和HG在内的多种版本控制系统，在解析SSH链接时均可能触发此漏洞。此外，任何未正确处理SSH链接解析的程序也可能受此漏洞影响。

经360CERT评估确认，该漏洞风险等级高且影响广泛。

### 影响版本
- Git v2.14.1之前的所有版本

### 修复版本
- Git v2.14.1

## 0x03 漏洞详情
### 技术细节
此漏洞源于SSH链接中的主机名部分。如果主机名以“-”开头，则可能导致ssh命令将其误认为是一个选项。因此，攻击者可以利用`-oProxyCommand`选项来执行任意命令。

在执行`git clone`时，会调用`git/connect.c`中的`struct child_process *git_connect(int fd[2], const char *url, const char *prog, int flags)`函数。该函数接收的参数`url`即为命令中的`xxx://xxxxxxxxxx/xx(.git)`部分。若协议为`ssh://`，则进入该函数的else分支。

接下来，按以下流程调用本地ssh：
1. 获取本地ssh路径并推入`conn->args`。
2. 提取URL中的`ssh_host`部分并拼接路径。
3. 最后调用`start_command`函数执行命令。`start_command`定义于`git/run-command.c`中，将传入的`cmd`处理后通过`execve`执行命令。然而，若命令内容包含如`/usr/bin/ssh -oProxyCommand=gnome-calculator xxx`这样的形式，将会在本地打开gnome计算器。

因此，如果在克隆操作时指定连接为`git clone ssh://-oProxyCommand=gnome-calculator/cert`，则同样能实现命令执行效果。

### 漏洞修复
在v2.14.1版本中，`git_connect`函数新增了对`ssh_host`的验证。具体而言，新增了一个函数用于检查`ssh_host`的第一个字符是否为“-”，以防止向ssh传递非法参数的情况。同时，在多处对传入的host和port进行了过滤。

## 0x04 漏洞利用验证
（注：此处省略利用演示）

## 0x05 修复建议
a) 参阅官方更新公告（非正式版本，需自行更新）。
b) 目前各发行版源尚未更新至修复版本v2.14.1，用户可自行下载编译。
c) 尚未更新的用户，在克隆项目时应特别注意`.gitmodules`等文件中是否存在恶意链接，以预防安全问题。

## 0x06 时间线
- 2017-8-10 官方首次发布安全通告
- 2017-8-11 360CERT完成漏洞分析并形成报告

## 0x07 参考文档