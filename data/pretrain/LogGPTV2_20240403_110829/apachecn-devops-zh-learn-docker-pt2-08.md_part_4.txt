![](img/image_08_001.png)
这里，在这个例子中，我们从实现`example.js`模块开始，一个 Node.js 文件来实现 web 服务器，以及密钥查找功能。此外，我们将在与`example.js`相同的目录下创建`Dockerfile`来打包 Node.js 运行时环境，然后，使用与`example.js`相同目录下的`docker-compose.yml`文件来定义服务编排。
下面是`example.js`文件，它是简单请求/响应 web 应用的 Node.js 实现。为了演示，在这个示例代码中，我们将请求和响应限制为两个`docker-compose`命令(`build`和`kill`)。为了使代码不言自明，我们在代码中添加了注释:
```
// A Simple Request/Response web application 
// Load all required libraries 
var http = require('http'); 
var url = require('url'); 
var redis = require('redis'); 
// Connect to redis server running 
// createClient API is called with 
//  -- 6379, a well-known port to which the 
//           redis server listens to 
//  -- redis, is the name of the service (container) 
//            that runs redis server 
var client = redis.createClient(6379, 'redis'); 
// Set the key value pair in the redis server 
// Here all the keys proceeds with "/", because 
// URL parser always have "/" as its first character 
client.set("/", "Welcome to Docker-Compose helpernEnter the docker-compose command in the URL for helpn", redis.print); 
client.set("/build", "Build or rebuild services", redis.print); 
client.set("/kill", "Kill containers", redis.print); 
var server = http.createServer(function (request, response) { 
  var href = url.parse(request.url, true).href; 
  response.writeHead(200, {"Content-Type": "text/plain"}); 
  // Pull the response (value) string using the URL 
  client.get(href, function (err, reply) { 
    if ( reply == null ) response.write("Command: " + 
    href.slice(1) + " not supportedn"); 
    else response.write(reply + "n"); 
    response.end(); 
  }); 
}); 
console.log("Listening on port 80"); 
server.listen(80); 
```
[https://github.com/thedocker/learning-docker/tree/master/chap08/orchestrate-using-compose](https://github.com/thedocker/learning-docker/tree/master/chap08/orchestrate-using-compose)
以下文本是打包 Node.js 映像的`Dockerfile`、Node.js 的`redis`驱动程序和`example.js`文件的内容，如前所述:
```
############################################### 
# Dockerfile to build a sample web application 
############################################### 
# Base image is node.js 
FROM node:latest 
# Author: Dr. Peter 
MAINTAINER Dr. Peter  
# Install redis driver for node.js 
RUN npm install redis 
# Copy the source code to the Docker image 
ADD example.js /myapp/example.js 
```
[https://github.com/thedocker/learning-docker/tree/master/chap08/orchestrate-using-compose](https://github.com/thedocker/learning-docker/tree/master/chap08/orchestrate-using-compose)
以下文本来自`docker-compose.yml`文件，该文件定义了 Docker Compose 工具编排的服务:
```
version: "3.1" 
services: 
  web: 
    build: . 
    command: node /myapp/example.js 
    depends_on: 
       - redis 
    ports: 
    - 8080:80 
  redis: 
    image: redis:latest 
```
[https://github.com/thedocker/learning-docker/tree/master/chap08/orchestrate-using-compose](https://github.com/thedocker/learning-docker/tree/master/chap08/orchestrate-using-compose)
我们在这个`docker-compose.yml`文件中定义了两个服务，其中这些服务用于以下目的:
*   名为`web`的服务是使用当前目录中的`Dockerfile`构建的。此外，它指示您通过运行以`/myapp/example.js`(网络应用实现)作为参数的`node`(node . js 运行时)来启动容器。由于这个 Node.js 应用使用了`redis`数据库，所以在使用`depends_on`指令的`redis`服务之后，`web`服务被强制启动。此外，`80`容器端口映射到`8080` Docker 主机的端口。
*   名为`redis`的服务被指示启动一个带有`redis:latest`映像的容器。如果映像不在 Docker 主机中，Docker 引擎将从中央存储库或私有存储库中将其取出。
现在，让我们继续我们的示例，使用`docker-compose build`命令构建 Docker 映像，使用`docker-compose up`命令启动容器，并连接浏览器以验证请求/响应功能，如下所述:
1.  必须从存储`docker-compose.yml`文件的目录中执行`docker-compose`命令。此外，`docker-compose`将每个`docker-compose.yml`文件视为一个项目，并采用来自`docker-compose.yml`文件目录的项目名称。当然，这可以使用`-p`选项来覆盖。因此，作为第一步，让我们更改存储`docker-compose.yml`文件的目录:
```
      $ cd ~/example
```
2.  使用`docker-compose build`命令构建服务:
```
      $ sudo docker-compose build
```
3.  使用`docker-compose pull`命令从存储库中提取映像:
```
      $ sudo docker-compose pull
```
4.  使用`docker-compose up`命令继续调出`docker-compose.yml`文件中指示的服务:
```
 $ sudo docker-compose up
 Creating network "example_default" with the default
 driver
 Creating example_redis_1
 Creating example_web_1
 Attaching to example_redis_1, example_web_1
 redis_1 | 1:C 03 Feb 18:09:40.743 # Warning: no 
 config file specified, using the default config. 
 In order to specify a config file use redis-server 
 /path/to/redis.conf 
 . . . TRUNCATED OUTPUT . . .
 redis_1 | 1:M 03 Feb 18:03:47.438 * The server 
 is now ready to accept connections on port 6379
 web_1 | Listening on port 80
 web_1 | Reply: OK
 web_1 | Reply: OK
 web_1 | Reply: OK
```
由于目录名为`example`，`docker-compose`工具假定项目名为`example`。如果你注意输出的第一行，你会注意到`example_default`网络正在创建。默认情况下，Docker Compose 工具会创建此桥接网络，该网络由服务用于 IP 地址解析。因此，这些服务只需使用组合文件中定义的服务名称就可以到达其他服务。
5.  使用`docker-compose`工具成功编排服务后，让我们从不同的终端调用`docker-compose ps`命令，列出与示例`docker-compose`项目相关的容器:
```
 $ sudo docker-compose ps
 Name Command 
 State Ports
 -------------------------------------------------- 
 -------------------------
 example_redis_1 /entrypoint.sh redis-server 
 Up 6379/tcp
 example_web_1 node /myapp/example.js 
 Up 0.0.0.0:8080->80/tcp
```
显然，两个`example_redis_1`和`example_web_1`容器已经启动并运行。容器名称以`example_`为前缀，为`docker-compose`项目名称。
6.  在 Docker 主机的不同终端上探索我们自己的请求/响应 web 应用的功能，如下图所示:
```
 $ curl http://localhost:8080
 Welcome to Docker-Compose helper
 Enter the docker-compose command in the URL for help
 $ curl http://localhost:8080/build
 Build or rebuild services
 $ curl http://localhost:8080/something
 Command: something not supported
```
`web`
`http://localhost:8080`
`web`
`8080`
`8080`
`https://:8080`
很酷，不是吗？在`docker-compose.yml`文件的帮助下，我们只需很少的努力就能够将两个不同的服务组合在一起，并提供一个复合服务。
## 摘要
这一章被合并到本书中，以便为您提供无缝编排多个容器的所有探索和规定细节。我们广泛讨论了容器编排的需求，以及简化和精简日益复杂的容器编排过程的支持工具。为了证实编排在制作企业级容器时是多么方便和有帮助，并说明编排过程，我们采用了一个简单的例子来解释整个色域，这种方法被广泛采用。我们开发了一个 web 应用，并将其包含在一个标准容器中。同样，我们采用了一个数据库容器，它是前端 web 应用的后端。数据库在另一个容器中执行。我们看到了如何通过 Docker Engine 的容器链接特性，使用不同的技术，让 web 应用容器知道数据库。为此，我们使用了一个开源工具(`docker-compose`)。
在下一章中，我们将讨论 Docker 如何促进软件测试，尤其是集成测试，并给出一些实用的例子。