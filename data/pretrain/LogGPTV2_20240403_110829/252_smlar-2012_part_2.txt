### N / sqrt(N * N) and Intersected Queries
- **Formula**: \( \frac{N}{\sqrt{N \cdot N}} \)
- **Intersected Query**:
  - \( \sqrt{\frac{N}{N}} \geq \) exact similarity of any intersected query
  - Successor: \( Oleg Bartunov, Teodor Sigaev \) (Finding Similar, PGCon-2012, Ottawa)

### GIN and Intersected Elements
- **GIN Index**:
  - \( N \) intersect – exact value
  - \( N \) intersect as a lower bound of \( N \) elements
- **Query Knowledge**:
  - \( \frac{N}{\sqrt{N \cdot N}} \geq \) exact similarity
  - \( \sqrt{\frac{N}{N}} \) for intersected queries

### Other Features
- **Function**: `float4 smlar(compositetype[], compositetype[], bool useIntersect)`
  - `CREATE TYPE compositetype AS (id text, w float4);`
- **GIN Index**:
  - TF*IDF metrics
  - `float4 smlar(anyarray, anyarray, text Formula)`
  - `text[] tsvector2textarray(tsvector)`
  - `anyarray array_unique(anyarray)`
  - `float4 inarray(anyarray, anyelement [, float4 found, float4 notfound])`

### Availability
- **Git Repository**: `git clone git://sigaev.ru/smlar.git`

### To-Do List
- **Index Support for Ratings**
- **Index Optimizations**
- **GIN per Row Storage?**
- **TF*IDF Speedup**

### Recommender Systems
- **Examples**: eBay, Amazon, last.fm, Pandora
- **Content Filtering**:
  - Based on content attributes (e.g., Music Genome Project with ~400 attributes)
  - Matches attributes of content the user likes
- **Collaborative Filtering**:
  - Based on preferences of many users
  - User-based and item-based filtering

### Our Recommender System
- **Item-Item CF (More Stable)**:
  - **Similarity Metric**: Cosine
  - **Input Data**: MovieLens
    - 1 million rates: 6000 users on 4000 movies
    - 10 million rates: 72000 users on 10,000 movies

### Initial Data
- **Tables**:
  - `movies(mid, title, genre, description)`
  - `rates(uid, mid, rate)`

### Step 1: Transform Ratings to Likes
- **Transformations**:
  - \( u: r = 1 \) if \( r > \text{avg(rate)} \)
  - Produce table: `rates(uid, mid, like)`
  - Create table: `ihu(itemid, {users}, {rates})`

### Step 2: Item-Item Matrix
- **Precompute Item-Item Matrix**:
  - `ii(itemid1, itemid2, sml)` from `ihu` table

### Step 3: Evaluations
- **Queries**:
  - **Q1**: For a given movie, provide a list of similar movies
  - **Q2**: For a given user, provide a list of recommendations

### Step 1: Table `ihu`
- **Create Table**:
  - `ihu(itemid, {users})`
  - Create index to accelerate `%` operation:
    ```sql
    CREATE INDEX ihu_users_itemid_idx ON ihu USING gist (users _int4_sml_ops, itemid);
    ```

### Step 2: Item-Item Matrix
- **SQL Query**:
  ```sql
  SELECT
    r1.itemid as itemid1,
    r2.itemid as itemid2,
    smlar(r1.users, r2.users) as sml
  INTO ii
  FROM ihu AS r1, ihu AS r2
  WHERE r1.users % r2.users AND r1.itemid > r2.itemid;
  ```
- **Performance**:
  - `Smlar.threshold=0.2`: 526195 ms (with index) vs. 1436433 ms (no index) → Speedup 2.7
  - `Smlar.threshold=0.4`: 8955 ms (with index) vs. 1172432 ms (no index) → Speedup 4.6

### Step 2: Index Creation
- **Indexes**:
  ```sql
  CREATE INDEX ii_itemid1_idx ON ii(itemid1);
  CREATE INDEX ii_itemid2_idx ON ii(itemid2);
  ```
- **View**:
  ```sql
  CREATE OR REPLACE VIEW ii_view AS
  SELECT itemid1, itemid2, sml FROM ii
  UNION ALL
  SELECT itemid2, itemid1, sml FROM ii;
  ```

### Step 3: Evaluations
- **Function**:
  ```sql
  CREATE OR REPLACE FUNCTION smlmovies(movie_id integer, num_movies integer, itemid OUT integer, sml OUT float, title OUT text)
  RETURNS SETOF RECORD AS $$
  SELECT s.itemid, s.sml::float, m.title
  FROM movies m,
  (SELECT itemid2 AS itemid, sml FROM ii_view
   WHERE itemid1 = movie_id
   UNION ALL
   SELECT movie_id, 1 -- just for illustration
  ) AS s
  WHERE m.mid = s.itemid
  GROUP BY s.itemid, s.sml, m.title
  ORDER BY s.sml DESC
  LIMIT num_movies;
  $$ LANGUAGE SQL IMMUTABLE;
  ```

### Example Queries
- **Query 1**:
  ```sql
  SELECT itemid, sml, title FROM smlmovies(1104, 10);
  ```
  - Results: (10 rows, Time: 5.780 ms)

- **Query 2**:
  ```sql
  SELECT itemid, sml, title FROM smlmovies(364, 10);
  ```
  - Results: (10 rows)

- **Query 3**:
  ```sql
  SELECT itemid, sml, title FROM smlmovies(919, 10);
  ```
  - Results: (10 rows, Time: 10.207 ms)

### My Profile
- **Table**:
  ```sql
  CREATE TABLE myprofile (mid integer);
  INSERT INTO myprofile VALUES (912), (1961), (1210), (1291), (3148), (356), (919), (2943), (362), (2116);
  ```
- **Query**:
  ```sql
  SELECT p.mid, m.title FROM movies m, myprofile p WHERE m.mid = p.mid;
  ```
  - Results: (10 rows)

### Recommendations
- **Query**:
  ```sql
  SELECT t.itemid2 as itemid, t.sml::float, m.title
  FROM movies m,
  (
    WITH usermovies AS (
      SELECT mid FROM myprofile
    ),
    mrec AS (
      SELECT itemid2, sml
      FROM ii_view ii, usermovies um
      WHERE ii.itemid1 = um.mid AND ii.itemid2 NOT IN (SELECT * FROM usermovies)
      ORDER BY itemid2 ASC
    )
    SELECT itemid2, sml, rank()
    OVER (PARTITION BY itemid2 ORDER BY sml DESC) FROM mrec
  ) t
  WHERE t.itemid2 = m.mid AND t.rank = 1
  ORDER BY t.sml DESC
  LIMIT 10;
  ```
  - Results: (20 rows, Time: 207.065 ms)

### Summary
- **Simple but Effective**:
  - This is a very simple recommender system, but it works!
  - Recompute the item-item matrix as needed (e.g., 10 million ratings took 15x15).

### Content-Based Similarity
- **Example**: 23.56% similarity

### Thanks!
- **Presenters**: Oleg Bartunov, Teodor Sigaev (Finding Similar, PGCon-2012, Ottawa)