### Input/Output and Network Resources

To isolate applications from the host operating system, Docker uses namespaces. This technology enables rapid container configuration and deployment across various environments, including cloud platforms, local virtual machines (VMs), and resource-constrained devices used in IoT.

### 3. Mobility, Energy Optimization, and Security Challenges in IoT

Designing and managing sensor networks is a complex task due to multiple factors such as network scalability, installation, hardware costs, operating environment, mobility management, network topology, topological changes, resource-constrained devices, fault detection, and tolerance. Table 1 below summarizes the key challenges related to mobility, energy optimization, and security in constrained networks.

**Table 1. Mobility, Energy, and Security Management Challenges**

| **Challenges** | **QoS & Scalability** | **Resource Management** | **Security** | **Topology Control** |
|----------------|-----------------------|--------------------------|--------------|----------------------|
| Data Loss Rate | Bandwidth             | Authentication            | Network Connectivity |
| Continuous Connectivity | Reduce Signaling Cost | Authorization | Coverage Area |
| Fast Movement Detection | Power Consumption | Integrity | Routing Protocol |
| Reduce Handover Delay | Duty Cycle | Confidentiality | Shortest Path |
| End-to-End Delay | Reduce Signaling Cost | Encryption | Alternate Path |
| Route Optimization | Multi-Hop | Path Stability |
| Avoid Triangle Routing | Network-Based Communication | Routing Metrics |

### 4. Proposed Container-Based Network Architecture

In this section, we describe our proposed Container-Based Network Architecture, illustrated in Fig. 2. Fig. 3 provides a sequence diagram for the process of container scheduling, selection, and migration. The proposed architecture consists of five layers, as shown in Fig. 2.

**Fig. 2.** Proposed container-based network architecture for mobility, energy, and security management as a service in IoT environments.

**Fig. 3.** Sequence diagram for container scheduling, selection, and migration process.

#### 4.1 Consumer Layer (CL)

The Consumer Layer serves resource consumers such as IT clients, IoT smart environments, and other end users. Consumers at this layer communicate with smart objects using different communication channels and edge gateways. These communications facilitate heterogeneous networks and large data volumes. Our proposed architecture addresses the challenges introduced by heterogeneity in terms of mobility, energy consumption, and network security. Additionally, it aims to provide quality of service (QoS) guarantees by enhancing network efficiency and longevity.

#### 4.2 Requirement Assessment Layer (RAL)

The second layer of our proposed architecture assesses overall user and network requirements. It divides these requirements into three modules: User Requirement Collector (URC), Network Requirement Collector (NRC), and Configuration Agent (CCA).

- **URC:** Collects user requirements such as sensing needs (e.g., temperature, humidity, air, light), number of communicating nodes, static and mobile nodes, and other specific requirements.
- **NRC:** Collects network requirements such as network size, type of communication, computation and storage requirements, communication channels, and protocols.
- **CCA:** Creates a container configuration file based on preset configuration values. This configuration is used to select the appropriate container for offloading among pre-configured containers for mobility, energy, and security management.

#### 4.3 Resource Control Layer (RCL)

The RCL is a crucial layer responsible for controlling and managing task scheduling, offloading, and monitoring. It includes two modules: Task Scheduling (TS) and Resource Management (RM).

- **TS:** Schedules all tasks to be offloaded.
- **RM:** Continuously monitors available, running, and idle container images in coordination with the Resource Broker Layer. This layer helps the Resource Broker Layer (RBL) to select, combine, rank, and allocate/reserve resources in the form of containers. It also provides mechanisms for monitoring resource status and container internal/external migration processes.

Docker facilitates efficient migration of container images (container-to-container – internal or container-to-VMs – external). It also supports real-time data collection and resource isolation by sharing Kernel Instances, Operating Systems, and Network Connections.

#### 4.4 Resource Broker Layer (RBL)

The Resource Broker acts as the backbone of our proposed architecture. This layer works in coordination with the Resource Control Layer and Resource Monitoring Layer. It primarily ranks, reserves, and assigns combinations of resources to containers. It also maintains information about available VMs, containers, and resource provisioning requests.

#### 4.5 Resource Monitoring Layer (RML)

The RML is responsible for monitoring all running, consumed, and available resources. It includes Clusters and Network Data Centers from where resources are provisioned. This layer assists the Resource Broker Layer and Resource Controller Layer in task scheduling by providing information about the current status of containers.

### 5. Conclusion

The growth of IoT environments has led to an increase in the number of connected devices and heterogeneous networks. This exponential growth introduces various communication, integration, and security challenges. Containers, being lightweight solutions, provide mechanisms for efficient resource utilization and new provisions. By adopting new technologies like containers, we can address the challenges introduced by heterogeneous IoT networks. In this article, we have presented a Container-Based architecture to provide Mobility, Energy, and Security as a Service (MESMaaS) at the core of the network. Implementing such an architecture at the initial network level will ensure better communication by eliminating performance, communication, and security anomalies. This will enhance communication within nodes, reduce delays, re-transmissions, packet losses, and help the network generate quality data. Thus, it will solve performance issues and enable efficient data processing for fog and cloud-based IoT systems.

### References

1. Borgia, E.: The Internet of Things vision: key features, applications, and open issues. Comput. Commun. 54, 1–31 (2014)
2. Buratti, C., et al.: Testing protocols for the Internet of Things on the EuWIn platform. IEEE Internet Things J. 3(1), 124–133 (2015)
3. Celesti, A., Mulfari, D., Fazio, M., Villari, M., Puliafito, A.: Exploring container virtualization in IoT clouds. In: 2016 IEEE International Conference on Smart Computing (SMARTCOMP), pp. 1–6. IEEE (2016)
4. da Cruz, M.A., Rodrigues, J.J., Sangaiah, A.K., Al-Muhtadi, J., Korotaev, V.: Performance evaluation of IoT middleware. J. Netw. Comput. Appl. 109, 53–65 (2018)
5. Fotouhi, H., Moreira, D., Alves, M., Yomsi, P.M.: mRPL+: a mobility management framework in RPL/6LoWPAN. Comput. Commun. 104, 34–54 (2017)
6. Krylovskiy, A.: Internet of Things gateways meet Linux containers: performance evaluation and discussion. In: 2015 IEEE 2nd World Forum on Internet of Things (WF-IoT), pp. 222–227. IEEE (2015)
7. Lee, K., Kim, H., Kim, B., Yoo, C.: Analysis on network performance of container virtualization on IoT devices. In: 2017 International Conference on Information and Communication Technology Convergence (ICTC), pp. 35–37. IEEE (2017)
8. Lee, K., Kim, Y., Yoo, C.: The impact of container virtualization on network performance of IoT devices. Mob. Inf. Syst. 2018, 1–6 (2018)
9. Merkel, D.: Docker: lightweight Linux containers for consistent development and deployment. Linux J. 2014(239), 2 (2014)
10. Mosenia, A., Jha, N.K.: A comprehensive study of security of Internet-of-Things. IEEE Trans. Emerg. Top. Comput. 5(4), 586–602 (2016)
11. Mulfari, D., Fazio, M., Celesti, A., Villari, M., Puliafito, A.: Design of an IoT cloud system for container virtualization on smart objects. In: Celesti, A., Leitner, P. (eds.) ESOCC Workshops 2015. CCIS, vol. 567, pp. 33–47. Springer, Cham (2016). https://doi.org/10.1007/978-3-319-33313-7_3
12. Nishio, T., Shinkuma, R., Takahashi, T., Mandayam, N.B.: Service-oriented heterogeneous resource sharing for optimizing service latency in mobile cloud. In: Proceedings of the First International Workshop on Mobile Cloud Computing & Networking, pp. 19–26 (2013)
13. Sharma, V., Sharma, V., Mishra, N.: Internet of Things: concepts, applications, and challenges. In: Exploring the Convergence of Big Data and the Internet of Things, pp. 73–95. IGI Global (2018)
14. Taleb, T., Ksentini, A., Jantti, R.: “Anything as a service” for 5G mobile systems. IEEE Netw. 30(6), 84–91 (2016)

### Towards a Rule-Based Recommendation Approach for Business Process Modeling

**Diana Sola**
1. Intelligent Robotic Process Automation, SAP SE, Walldorf, Germany
2. Data and Web Science Group, University of Mannheim, Mannheim, Germany
PI: EMAIL

**Abstract:**
Business process modeling can be time-consuming and error-prone, especially for inexperienced users. Graphical editors for business process modeling should support users by providing suggestions on how to complete a currently developed business process model. We address this problem with a rule-based activity recommendation approach, which suggests suitable activities to extend the business process model at a user-defined position. Unlike alternative approaches, rules provide an additional explanation for the recommendation, which can be useful when a user is torn between two alternatives. We plan to investigate how rule learning can be efficiently designed for the given problem setting and how a rule-based approach performs compared to alternative methods. In this paper, we describe the basic idea, a first implementation, and initial results.

**1. Introduction**
A business process model is the graphical representation of an organization’s business process and is an important instrument for Business Process Management. When modeling a business process, it is essential to precisely label the individual elements to ensure consistency and clarity. For domain-specific processes, this may require using specialized and sometimes technical vocabulary, which can be challenging. Many tools support the modeling of business processes in a graphical notation, such as Business Process Model and Notation (BPMN) or Petri Nets. These tools typically provide a repository of symbols representing the building blocks of the underlying modeling language. However, business process modeling remains time-consuming and error-prone, especially for inexperienced users. The modeling task can be facilitated by providing features that assist users during modeling and make recommendations on how to complete a business process model that is being edited. The basis for such a recommendation feature could be a repository of completed business process models.

Supervised by Heiner Stuckenschmidt (Data and Web Science Group, University of Mannheim, Mannheim, Germany), heiner@informatik.uni-mannheim.de.

**2. Related Work**
An overview of recommendation methods for business process modeling is presented in [11]. Kluza et al. distinguish between a subject-based classification, which concentrates on what is actually suggested, and a complementary position-based classification, which focuses on the position where the suggestion is to be placed. According to their categorization, our work falls into the category of full-name suggestion for an element. The evaluation method that we use in the experimental studies corresponds to a forward completion approach.

Several works abstract a business process model to a directed graph and use graph-mining techniques to extract structural patterns from the process repository. While Cao et al. [3] calculate the distance between patterns and the partial business process based on graph edit distance [2], Li et al. [14] propose an efficient string edit distance [13] based similarity metric, which turns the graph-matching problem into a string matching problem. Different distance calculation strategies are compared by Deng et al. [7].

Koschmider et al. [12] propose an approach that involves semantic information and patterns observed in other users’ preferences. They present a business process modeling editor with two features: a query interface for searching process model fragments based on semantic annotations and a system that recommends appropriate process model fragments to the model being edited, based on the combination of several aspects such as the frequency a process part has been selected by other users or its process design quality. In two experiments, the authors prove the usefulness and efficiency of their editor. However, the evaluation was based on a relatively small repository of process fragments developed specifically for the study’s modeling exercise.

Wang et al. [17] present their embedding-based activity recommendation method RLRecommender, which extracts relations between activities of the process models and embeds both activities and relations into a continuous low-dimensional space. The training model used is based on TransE [1]. The embedded vectors for activities and relations and their distances in the space are then used to recommend an appropriate activity.

Jannach et al. [10] propose different recommendation techniques to provide modeling support for users in the specific area of data analysis workflows and evaluate them using a pool of several thousand existing workflows. The user support consists of recommending additional operations to insert into the currently developed machine learning workflow, similar to activity recommendation. In a laboratory study, the authors show that their recommendation tool helps users significantly increase the efficiency of the modeling process.

**3. A Rule-Based Recommendation Approach**
Following [17], we frame the activity recommendation problem in terms of a knowledge graph completion task (sometimes also referred to as link prediction). Within this framework, the processes of the repository and the incomplete process are represented as a (large) graph consisting of triples (head activity, relation, tail activity), and the recommendation of an appropriate activity is understood as the completion task. Over the last decade, the knowledge graph completion task has received significant attention, and the majority of approaches are based on learning embeddings for entities and relations in the graph.

We propose a rule-based approach to address the activity recommendation problem. Rules are a good option to model such patterns, and we intend to learn rules that capture the interrelationships between activities in processes of a repository. These rules can then be applied to a process under development. We plan to investigate how rule learning can be efficiently designed for the given problem setting and analyze how a rule-based approach performs compared to alternative methods. In this paper, we propose a first, simple implementation and report on experiments where we compare it against one alternative approach.