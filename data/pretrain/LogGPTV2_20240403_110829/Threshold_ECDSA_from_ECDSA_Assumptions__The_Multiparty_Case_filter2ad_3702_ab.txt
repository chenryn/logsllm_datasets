according to the function’s superscript; when the superscript is
omitted it is assumed to be 1. We use Pi to denote the party
with index i, and variables may often be subscripted with an
index to indicate that they belong to a particular party. When
arrays are owned by a party, the party index always comes
before the array index. For convenience, when only two parties
are present in a context, they are referred to as Alice and Bob.
In functionalities, we assume standard and implicit book-
keeping. In particular, we assume that along with the other
messages we specify, session IDs and party IDs are transmitted
so that the functionality knows to which instance a message
belongs and who is participating in that instance. We assume
(cid:18)(cid:17)(cid:22)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
that the functionality aborts if a party tries to reuse a session
ID, send messages out of order, etc. We use slab-serif to
denote message tokens, which communicate the function of
a message to its recipients. For simplicity, we omit from a
functionality’s speciﬁer all parameters that we do not actively
use. For example, many of our functionalities are parameterized
by a group G of order q, but we leave implicit the fact that in
any given instantiation all functionalities use the same group.
B. Digital Signatures
Deﬁnition 1 (Digital Signature Scheme [23]).
A Digital Signature Scheme is a tuple of probabilistic polyno-
mial time (PPT) algorithms, (Gen, Sign, Verify) such that:
1) Given a security parameter κ, the Gen algorithm outputs
2) Given a secret key sk and a message m, the Sign algorithm
a public key/secret key pair: (pk, sk) ← Gen(1κ)
outputs a signature σ: σ ← Signsk(m)
3) Given a message m, signature σ, and public key pk, the
Verify algorithm outputs a bit b indicating whether the
signature is valid or invalid: b ..= Verifypk(m, σ)
A Digital Signature Scheme satisﬁes two properties:
1) (Correctness) With overwhelmingly high probability, all
valid signatures must verify. Formally, over (pk, sk) ←
Gen(1κ) and all messages m in the message space,
(cid:3)
(cid:4)
> 1 − negl(κ)
Pr
pk,sk,m
Verifypk(m, Signsk(m)) = 1
2) (Existential Unforgeability) No adversary can forge a
signature for any message with greater than negligible
probability, even if that adversary has seen signatures for
polynomially many messages of its choice. Formally, for
all PPT adversaries A with access to the signing oracle
Signsk(·), where Q is the set of queries A asks the oracle,
(cid:5)
(cid:6)
Verifypk (m, σ) = 1 ∧ m /∈ Q :
(m, σ) ← ASignsk(·) (pk)
< negl(κ)
Pr
pk,sk
C. ECDSA
ECDSA is parameterized by a group G of order q generated
by a point G on an elliptic curve over the ﬁnite ﬁeld Zp of
integers modulo a prime p. Assuming a curve has been ﬁxed,
the ECDSA algorithms are as follows [23]:
Algorithm 1. Gen(1κ):
1) Uniformly choose a secret key sk ← Zq.
2) Calculate the public key as pk ..= sk · G.
3) Output (pk, sk).
Algorithm 2. Sign(sk ∈ Zq, m ∈ {0, 1}∗
1) Uniformly choose an instance key k ← Zq.
2) Calculate (rx, ry) = R ..= k · G.
3) Calculate
):
sig ..=
H(m) + sk · rx
k
4) Output σ ..= (sig mod q, rx mod q).
Algorithm 3. Verify(pk ∈ G, m ∈ {0, 1}∗, σ ∈ (Zq, Zq)):
1) Parse σ as (sig, rx).
2) Calculate
(r(cid:4)
x, r(cid:4)
y) = R(cid:4) ..=
3) Output 1 if and only if (r(cid:4)
H(m) · G + rx · pk
sig
x mod q) = (rx mod q).
D. Security Model and Requisite Functionalities
We prove our protocols secure against any number of static
corruptions in the Universal Composability (UC) framework,
for an introduction to which we refer the reader to Canetti [24].
In this section we introduce a small set of functionalities
that we use as building blocks. We begin with a commitment
functionality and a committed-zero-knowledge functionality.
Informally, the commitment functionality F n
Com allows a party
to send a commitment to a message to a group of parties, and
later reveal the same message to these parties. The functionality
F RDL,n
Com-ZK allows a party to send a commitment to both an elliptic
curve point and a proof of knowledge of its discrete logarithm
to a group of parties, and later reveal both. Concretely, F n
Com
can be instantiated via the folkloric hash-based commitment
construction, and F RDL,n
Com-ZK via the Schnorr [25] protocol made
non-interactive using the Fiat-Shamir [26] or Fischlin [27]
transform, though only the latter achieves UC-security. For the
sake of efﬁciency, our implementation uses the Fiat-Shamir
transform in spite of this shortcoming.
Functionality 1. F n
This functionality runs with a group of parties {Pj}j∈[1,n],
where one speciﬁc party Pi commits, and all other parties
receive the commitment and committed value.
Commit: On receiving (commit, idcom, x, I) from Pi where
I ⊆ [1, n], if (commit, idcom,·,·) does not exist in mem-
ory, then store (commit, idcom, x, I) in memory and send
(committed, idcom, i) to all parties Pj for j ∈ I.
Decommit: On receiving (decommit, idcom) from Pi, send
(decommitted, idcom, x) to every party Pj for j ∈ I
Com:
Functionality 2. F RDL,n
Com-ZK:
This functionality is parameterized by a group G of order q
generated by G. It runs with a group of parties {Pj}j∈[1,n],
where one party Pi is the prover, and the others verify.
Commit Proof: On receiving (com-proof, idcom-zk, x, X, I)
from party Pi where x ∈ Zq and X ∈ G,
if
(com-proof, idcom-zk,·,·,·) does not exist in memory, then
send (committed, idcom-zk, i) to every party Pj for j ∈ I
and store (com-proof, idcom-zk, x, X, I) in memory.
Decommit Proof: On receiving (decom-proof, idcom-zk)
from party Pi, if (com-proof, idcom-zk, x, X, I) exists in
memory, then:
1) If X = x · G, send (accept, idcom-zk, X) to every party
2) Otherwise send (fail, idcom-zk) to every Pj for j ∈ I.
Pj for j ∈ I.
(cid:18)(cid:17)(cid:22)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
COTe:
In addition, our multiplication protocols make use of
Correlated Oblivious Transfer extensions [28], which we model
using the F η
COTe functionality of Doerner et al. [1], who derive
it in turn from a similar functionality introduced by Keller et
al. [29]. We reproduce their functionality here, for completeness.
In short, F η
COTe interacts with two parties: A sender, who
supplies a vector of correlations, and a receiver, who supplies
vector of choice bits. For each vector element, the functionality
returns to the sender a random pad, and to the receiver either the
same random pad, or the same pad plus the sender’s correlation.
Concretely, we instantiate this functionality in the same manner
as Doerner et al., using the OT-extension protocol of Keller et
al. [29], with Doerner et al.’s VSOT (a derivative of Simplest
OT [30]) performing the required base OTs.
Functionality 3. F η
This functionality is parameterized by a batch size η and a
set of groups {Gi}i∈[1,η], one group for each element in a
batch (though groups are not necessarily unique). It runs with
a sender S and a receiver R, who may participate in the Init
phase once, and the Choice and Transfer phases many times.
Init: On receiving (init) from both parties, store (ready)
(cid:7)
in memory and send (init-complete) to the receiver.
Choice: On receiving
from the receiver,
with the same idext does not exist in
if
(cid:7)
memory, and if (ready) does exist
in memory, and if
β ∈ {0, 1}η, then send (chosen) to the sender and store
(cid:8)
choice, idext, β
(cid:8)
Transfer: On receiving
from the
sender, if a message of the form
exists in
memory with the same idext, and if
complete, idext
does
not exist in memory, and if α ∈ G1 × . . . × Gη, then:
1) Sample a vector of random pads ωS ← G1 × . . . × Gη
2) Send (pads, ωS) to the sender.
βi · αi − ωS,i
3) Compute ωR
4) Send (padded-correlation, ωR) to the receiver.
5) Store (complete, idext) in memory.
choice, idext,·(cid:8)
(cid:8)
transfer, idext, α
choose, idext, β
choice, idext, β
in memory.
i∈[1,η].
(cid:9)
(cid:7)
(cid:10)
(cid:7)
(cid:8)
(cid:7)
(cid:7)
(cid:8)
..=
III. IMPROVED TWO-PARTY MULTIPLICATION
Doerner et al. [1] built their two party signing protocol atop
two-party multiplication, and our protocol retains this property
even when the number of signing parties is larger. While their
protocol was optimized for the single-use computation setting
(in which a small number of multiplications are computed
by exactly two parties with no preprocessing), we design a
new variant that is optimized for scenarios in which multiple
overlapping pairs of parties compose their multiplications
with one another. As a result we require a new two-party
multiplication functionality. Speciﬁcally, our new functionality
F (cid:4)
2PMul involves three main phases. Following the one-time
initialization phase, there is a preprocessing phase in which
the parties must each send a message to the functionality in
a speciﬁc order. Following this, they can supply their inputs
(either party going ﬁrst), and as each party’s input is supplied,
the opposite party’s output is delivered. One party is also
given the capability to deﬁne their own output by rushing
in the last phase, which we will discuss in conjunction with
the protocol that realizes this functionality. When F (cid:4)
2PMul is
composed, multiple instances can preprocess concurrently, and
then inputs can be supplied as data dependencies require. This
corresponds to a savings in rounds when instantiated with
our multiplication protocol, relative to naïve composition of
Doerner et al.’s multiplication protocol.
2PMul:
In addition, we add to both our protocol and our functionality
the ability to batch multiplications together, and we make a
simpliﬁcation: whereas the functionality given by Doerner et al.
allows an adversary to inject additive error into the output, we
give the adversary no such capability. We note that this change
is solely for simplicity of proof and ease of understanding:
both functionalities output pairs of unauthenticated additive
shares, and thus an adversary can always induce an offset.
Functionality 4. F (cid:4)
This functionality is parameterized by the group Zq over
which multiplication is to be performed, and the batch size (cid:5).
It runs with two parties, Alice and Bob, who may participate
in the Init phase once, the remaining phases repeatedly.
Init: Wait for message (init) from Alice and Bob. Store
(init-complete) in memory and send (init-complete)
to Bob.
Bob-preprocess: On receiving (preprocess, idmul) from
Bob, if (bob-ready, idmul) with the same idmul does not
exist in memory, and if (init-complete) does exist in
memory, then store (bob-ready, idmul) in memory, and send
(bob-ready, idmul) to Alice.
Alice-preprocess: On
(preprocess, idmul)
from Alice,
the form
(bob-ready, idmul,·) in memory with the same idmul,
and if (alice-ready, idmul) does not exist in memory,
then store (alice-ready, idmul) in memory, and send
(alice-ready, idmul) to Bob.
Alice-input: On receiving (input, idmul, a) from Alice, if a
message of the form (alice-ready, idmul) exists in memory
with the same idmul, and if (alice-complete, idmul,·,·) and
(bob-complete, idmul,·,·) do not exist in memory, and if
a ∈ Zq then:
1) Sample zB ← Z(cid:4)
2) Send (output, idmul, zB) to Bob.
3) Store (alice-complete, idmul, a, zB) in memory.
there exists a message of
receiving
if
q
Bob-input: On receiving (input, idmul, b) from Bob, if there
exists a message (alice-ready, idmul) in memory with the
same idmul, and if (bob-complete, idmul,·,·) does not exist
in memory, and if b ∈ Zq then:
1) If (alice-complete, idmul, a, zB) exists in memory,
then compute
(cid:9)
(cid:10)
zA
..=
ai · bi − zB,i
i∈[1,(cid:4)]
and send (output, idmul, zA) to Alice.
2) Otherwise send (bob-complete, idmul) to Alice.
(cid:18)(cid:17)(cid:22)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
them to calculate his one-time pads ˜b
(cid:11)(cid:12)
β ← {0, 1}(cid:4)·ξ
˜b ..=
g,{βj}j∈[i·ξ+1,(i+1)·ξ]
(cid:13)(cid:14)
i∈[1,(cid:4)]
3) Alice samples her one-time pads ˜a ← Z(cid:4)
q and a set of
q and sets α ∈ Zξ·(cid:4)
as
check values ˆa ← Z(cid:4)
q
(cid:15)(cid:15) . . .
Multiplication:
4) Alice and Bob access the F η
α ..= {˜a1(cid:9)ˆa1}j∈[1,ξ]
(cid:15)(cid:15) {˜an(cid:9)ˆan}j∈[1,ξ]
COTe functionality, supplying
η = ξ · (cid:5) as the OT-extension batch size. Alice plays the
sender, supplying α as her input, and Bob, the receiver,
supplies β. They receive as outputs, respectively, the
(cid:9)
(cid:10)
arrays ωA ∈ Zη
q and ωB ∈ Zη
q , which they interpret as
(cid:9)
(cid:10)
j∈[1,η] = ωA
˜zA,j
j∈[1,η] = ωB
(cid:15)(cid:15)ˆzA,j
(cid:15)(cid:15)ˆzB,j
˜zB,j
That is, ˜zA is a vector wherein each element contains the
ﬁrst half of the corresponding element in Alice’s output
from F η
COTe, and ˆzA is a vector wherein each element
contains the second half. ˜zB and ˆzB play identical roles
for Bob. The steps in the protocol up to this point
correspond to the Bob-preprocess phase in F (cid:4)
2PMul.
5) Alice and Bob generate 2(cid:5) shared, random values
by calling the random oracle. As input they use the
shared components of the transcript of the protocol that
implements F η
COTe, in order the ensure that these values
have a temporal dependency on the completion of the