    tokens = parse.getTokenizer() 
    index = 0 
    occurences = [] 
    for token in tokens: 
        tagname = token["tagname"] 
        content = token["content"] 
        attibutes = token["attibutes"] 
        _input = input 
        origin_length = len(occurences) 
        if _input in tagname: 
            occurences.append({ 
                "type": "intag", 
                "position": index, 
                "details": token, 
            }) 
        elif input in content: 
            if tagname == "#comment": 
                occurences.append({ 
                    "type": "comment", 
                    "position": index, 
                    "details": token, 
                }) 
            elif tagname == "script": 
                occurences.append({ 
                    "type": "script", 
                    "position": index, 
                    "details": token, 
                }) 
            elif tagname == "style":
                occurences.append({ 
                    "type": "html", 
                    "position": index, 
                    "details": token, 
                }) 
            else: 
                occurences.append({ 
                    "type": "html", 
                    "position": index, 
                    "details": token, 
                }) 
        else: 
            # 判断是在name还是value上 
            for k, v in attibutes: 
                content = None 
                if _input in k: 
                    content = "key" 
                elif v and _input in v: 
                    content = "value" 
                if content: 
                    occurences.append({ 
                        "type": "attibute", 
                        "position": index, 
                        "details": {"tagname": tagname, "content": content, "attibutes": [(k, v)]}, 
                    }) 
        if len(occurences) > origin_length: 
            index += 1 
    return occurences 
如果 这个回显没有找到匹配 
测试下直接请求会被转义的payload  payload = "".format(random_upper(details["tagname"]), flag) 
同样的去判断回显 有则输出结果
如果回显位置是在attibute里
flag 是  flag = random_str(5)  
如果content是key 
测试闭合的payload是  ">"  
如果content不是key
测试 attibutes
那么测试的闭合payload
for _payload in ["'", "\"", " "]: 
    payload = _payload + flag + "=" + _payload 
如果没被转义 那么可以用的payload
 truepayload = "{payload} onmouseover=prompt(1){payload}".format(payload=_payload) 
测试 html
闭合payload
for _payload in [r"'>", "\">", ">"]: 
    payload = _payload.format(flag) 
如果没被转义 可使用的payload  "svg onload=alert\ 1`"`
针对特殊属性进行处理
特殊属性
 specialAttributes = ['srcdoc', 'src', 'action', 'data', 'href'] 
如果标签是这些属性
直接把flag写到这些属性的value值里再次发起请求测试回显
specialAttributes = ['srcdoc', 'src', 'action', 'data', 'href']  # 特殊处理属性 
keyname = details["attibutes"][0][0] 
tagname = details["tagname"] 
if keyname in specialAttributes: 
    flag = random_str(7) 
    data[k] = flag 
    req = self.req(positon, data) 
    _occerens = SearchInputInResponse(flag, req.text) 
如果属性是 style 
那么测试的payload是  payload = "expression(a({}))".format(random_str(6, string.ascii_lowercase)) 
如果在 xss_eval_attitudes里
也是直接搞个随机数写到value里看回显来判断
如果回显位置是注释里
闭合的payload是
for _payload in ["-->", "--!>"]: 
    payload = "{}".format(_payload, flag) 
如果没被转义 那么可用的payload  payload.format(_payload, "svg onload=alert 1 ") 
如果回显位置是script里
闭合的payload
XSS_EVAL_ATTITUDES = ['onbeforeonload', 'onsubmit', 'ondragdrop', 'oncommand', 'onbeforeeditfocus', '
                      'onoverflow', 'ontimeupdate', 'onreset', 'ondragstart', 'onpagehide', 'onunhand
                      'oncopy', 
                      'onwaiting', 'onselectstart', 'onplay', 'onpageshow', 'ontoggle', 'oncontextmen
                      'onbeforepaste', 'ongesturestart', 'onafterupdate', 'onsearch', 'onseeking', 
                      'onanimationiteration', 
                      'onbroadcast', 'oncellchange', 'onoffline', 'ondraggesture', 'onbeforeprint', '
                      'onbeforedeactivate', 'onhelp', 'ondrop', 'onrowenter', 'onpointercancel', 'ona
                      'onmouseup', 
                      'onbeforeupdate', 'onchange', 'ondatasetcomplete', 'onanimationend', 'onpointer
                      'onlostpointercapture', 'onanimationcancel', 'onreadystatechange', 'ontouchleav
                      'onloadstart', 
                      'ondrag', 'ontransitioncancel', 'ondragleave', 'onbeforecut', 'onpopuphiding', 
                      'ongotpointercapture', 'onfocusout', 'ontouchend', 'onresize', 'ononline', 'onc
                      'ondataavailable', 'onformchange', 'onredo', 'ondragend', 'onfocusin', 'onundo'
                      'onstalled', 'oninput', 'onmousewheel', 'onforminput', 'onselect', 'onpointerle
                      'ontouchenter', 'onsuspend', 'onoverflowchanged', 'onunload', 'onmouseleave', 
                      'onanimationstart', 
                      'onstorage', 'onpopstate', 'onmouseout', 'ontransitionrun', 'onauxclick', 'onpo
                      'onkeydown', 'onseeked', 'onemptied', 'onpointerup', 'onpaste', 'ongestureend',
                      'ondragenter', 'onfinish', 'oncut', 'onhashchange', 'ontouchcancel', 'onbeforea
                      'onafterprint', 'oncanplaythrough', 'onhaschange', 'onscroll', 'onended', 'onlo
                      'ontouchmove', 'onmouseover', 'onbeforeunload', 'onloadend', 'ondragover', 'onk
                      'onmessage', 
                      'onpopuphidden', 'onbeforecopy', 'onclose', 'onvolumechange', 'onpropertychange
                      'onmousedown', 'onrowinserted', 'onpopupshowing', 'oncommandupdate', 'onerrorup
                      'onpopupshown', 
                      'ondurationchange', 'onbounce', 'onerror', 'onend', 'onblur', 'onfilterchange',
                      'onstart', 
                      'onunderflow', 'ondragexit', 'ontransitionend', 'ondeactivate', 'ontouchstart',
                      'onpointermove', 'onwheel', 'onpointerover', 'onloadeddata', 'onpause', 'onrepe
                      'onmouseenter', 
                      'ondatasetchanged', 'onbegin', 'onmousemove', 'onratechange', 'ongesturechange'
                      'onlosecapture',
                      'onplaying', 'onfocus', 'onrowsdelete'] 
script_tag = random_upper(details["tagname"]) 
payload = "{}".format(script_tag, 
                                script_tag, flag, 
                                script_tag) 
可用的payload
truepayload = "{}".format(script_tag, 
                                        script_tag, "prompt(1)", 
                                        script_tag) 
将payload写到value值 发起请求 测试回显
同时 js语法树分析反射
因为回显的位置是在js中所以这里还需要解析下js语法
如果回显的位置是  InlineComment  js单行注释
那么闭合的payload  payload = "\n;{};//".format(flag)  
可使用的payload  truepayload = "\n;{};//".format('prompt(1)') 
如果回显的位置是  BlockComment  js块注释
闭合 payload
flag = "0x" + random_str(4, "abcdef123456") 
payload = "*/{};/*".format(flag) 
这里的pyalod是随机出来的0x加上这几个字符串没有使用默认的全部有点疑惑 
可用的payload  truepayload = "*/{};/*".format('prompt(1)') 
如果回显的位置是  ScriptIdentifier 
可用的payload  prompt(1);// 
如果回显的位置是  ScriptLiteral 
如果回显位置的前缀是 单引号或者双引号 那么闭合payload
 payload = '{quote}-{rand}-{quote}'.format(quote=quote, rand=flag)  
可用payload  truepayload = '{quote}-{rand}-{quote}'.format(quote=quote, rand="prompt(1)")  
否则payload是  payload = "0x" + random_str(4, "abcdef123456")  
可用payload  truepayload = "prompt(1)"  
发起请求测试回显
学习的地方 (可以抄)
colorama 控制台彩色输出 支持windows
用的第三方库  colorama  控制台彩色输出 支持windows
 https://pypi.org/project/colorama/ 
随机banner
def banner(): 
    msg = "w13scan v{}".format(VERSION) 
    sfw = True 
    s = milk_random_cow(msg, sfw=sfw) 
    dataToStdout(random_colorama(s) + "\n\n") 
这个很酷啊 有颜色和随机的图案
load_file_to_module 另一种动态加载插件的方式
使用util通过模块的名字和路径来导入模块
解析post数据类型
是  FakeReq  解析请求里的方法 
 W13SCAN/lib/parse/parse_request.py#L38 
def _analysis_post(self): 
    post_data = unquote(self._body) 
    if re.search('([^=]+)=([^%s]+%s?)' % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER), 
                    post_data): 
        self._post_hint = POST_HINT.NORMAL 
        self._post_data = paramToDict(post_data, place=PLACE.POST, hint=self._post_hint) 
    elif re.search(JSON_RECOGNITION_REGEX, post_data): 
        self._post_hint = POST_HINT.JSON 
    elif re.search(XML_RECOGNITION_REGEX, post_data): 
        self._post_hint = POST_HINT.XML 
    elif re.search(JSON_LIKE_RECOGNITION_REGEX, post_data): 
        self._post_hint = POST_HINT.JSON_LIKE 
    elif re.search(ARRAY_LIKE_RECOGNITION_REGEX, post_data): 
        self._post_hint = POST_HINT.ARRAY_LIKE 
        self._post_data = paramToDict(post_data, place=PLACE.POST, hint=self.post_hint) 
    elif re.search(MULTIPART_RECOGNITION_REGEX, post_data): 
        self._post_hint = POST_HINT.MULTIPART 
raw方法
是  FakeReq  解析请求里的方法 
 W13SCAN/lib/parse/parse_request.py#L93  
返回一个raw数据 类似burp的请求包
    module_name = 'plugin_{0}'.format(get_filename(file_path, with_ext=False)) 
    spec = importlib.util.spec_from_file_location(module_name, file_path, loader=PocLoader(module_nam
    mod = importlib.util.module_from_spec(spec) 
    spec.loader.exec_module(mod) 
    return mod 
@property 
def raw(self): 
    # Build request 
    req_data = '%s %s %s\r\n' % (self.method, self._uri, self._request_version) 
    # Add headers to the request 
    for k, v in self._headers.items(): 
        req_data += k + ': ' + v + '\r\n' 
    req_data += '\r\n' 
    req_data += self._body 
    return req_data 
text 自动解码响应体
是  FakeResp  解析请求里的方法 
获取响应体内容
 W13SCAN/lib/parse/parse_responnse.py#L44 
    @property 
    def text(self): 
        if self._decoding: 
            try: 
                return self._body.decode(self._decoding) 
            except Exception as e: 
                return self._body.decode('utf-8', "ignore") 
        return self._body.decode('utf-8', "ignore") 
将参数拆分为名称和值 返回字典
是 插件父类的方法
def paramToDict(parameters, place=PLACE.GET, hint=POST_HINT.NORMAL) -> dict: 
    """ 
    Split the parameters into names and values, check if these parameters 
    are within the testable parameters and return in a dictionary. 
    """ 
    testableParameters = {} 
    if place == PLACE.COOKIE: 
        splitParams = parameters.split(DEFAULT_COOKIE_DELIMITER) 
        for element in splitParams: 
            parts = element.split("=") 
            if len(parts) >= 2: 
                testableParameters[parts[0]] = ''.join(parts[1:]) 
    elif place == PLACE.GET: 
        splitParams = parameters.split(DEFAULT_GET_POST_DELIMITER) 
        for element in splitParams: 
            parts = element.split("=") 
            if len(parts) >= 2: 
                testableParameters[parts[0]] = ''.join(parts[1:]) 
    elif place == PLACE.POST: 
        if hint == POST_HINT.NORMAL: 
            splitParams = parameters.split(DEFAULT_GET_POST_DELIMITER) 
            for element in splitParams: 
                parts = element.split("=") 
                if len(parts) >= 2: 
                    testableParameters[parts[0]] = ''.join(parts[1:]) 
        elif hint == POST_HINT.ARRAY_LIKE: 
            splitParams = parameters.split(DEFAULT_GET_POST_DELIMITER) 
            for element in splitParams: 
                parts = element.split("=") 
                if len(parts) >= 2: 
                    key = parts[0] 
                    value = ''.join(parts[1:]) 
                    if '[' in key: 
                        if key not in testableParameters: 
                            testableParameters[key] = [] 
                        testableParameters[key].append(value) 
                    else: 
                        testableParameters[key] = value 
    return testableParameters 
对url去重泛化模块
 W13SCAN/lib/core/spiderset.py 
代理模块
代理模块很好用
xss 语法语义的形式
等等
w13scan值得学习的太多了 对于自己的扫描器设计又有了一些想法 并且也可以抄很多代码