4.2 Solution Overview
We ﬁrst show what our solution will look like to an adversary
and then describe how to emulate it with a cost of l-bit-
memory-per-gate in Sect. 4.3 and Sect. 4.4.
As shown in Fig. 3, for each wire t in C, we place two iden-
tical SSGs G(t) at both ends, where G(t) is initialized with
an l-bit k(t) that is chosen uniformly at random from the
non-zero key space
K = {0, 1}l − {
0··· 0}
l
65
Figure 2: A Boolean circuit C with nodes sequen-
tially numbered.
Then, for each gate node t with fan-in f , we enclose the near-
est f +1 generators (appearing at its incoming and outgoing
wires) together with gate node t to produce an augmented
gate node, which we call a stateful gate (s-gate). The re-
sulting circuit C(cid:48) that consists of those s-gates is a private
stateful circuit. We assume that at time i (the i-th time C(cid:48) is
being invoked) each G(t) is synchronized to state i with the
corresponding output denoted by G(t)[i], then the computa-
tion of C(cid:48) is as follows: At the input level, encryption func-
tion E encrypts input x=v1··· vn to produce E(x)=v(cid:48)
1··· v(cid:48)
t=vt⊕G(t)[i] (1≤t≤n). For s-gate node t whose inputs
with v(cid:48)
t1 , ··· , v(cid:48)
are v(cid:48)
t1 ,··· , v
(cid:48)
(cid:48)
(cid:48)
t(v
tf ) = gt(v
tf , its functionality can be written as
g
n
t1⊕G(t1)[i],··· , v
(cid:48)
tf ⊕G(tf )[i])⊕G(t)[i]
(cid:48)
where gt is the functionality of the original gate in C. Thus,
it holds that the result of the s-gate
(cid:48)
t = g
v
Finally, C(cid:48) outputs v(cid:48)
decryption function to obtain C(x)=vt1··· vtm .
tf ) = gt(vb1 ,··· , vbf )⊕G(t)[i] = vt⊕G(t)[i]
(cid:48)
tm which is decrypted by the
t1 , ··· , v(cid:48)
t1 ,··· , v
(cid:48)
(cid:48)
t(v
a0=1a1=0a2=1a3=0a4=1a5=0a7=1a6=0s0s1s2s3s4s5s6s7output12345678910Figure 3: Computation of C (see Fig. 2) is simulated by an input encryption function (the left rectangle),
a stateful circuit C(cid:48) and a decryption function (the right rectangle), where G(t) denotes a self-shrinking
generator with initial state k(t).
4.3 Emulating Stateful Gate with an l-bit Mem-
ory
We introduce how to emulate each s-gate with the least pos-
sible number of memory cells. We assume that the s-gates
use SSGs, but our results remain the same in case of shrink-
ing generators.
Each s-gate with fan-in f has (f +1) SSGs, denoted by G(1),
G(2), ··· , G(f +1) and each G(t) (1≤t≤f +1) has an LFSR
L(t). Although the states of L(1), ··· , L(f +1) may diﬀer to
each other, they have the same feedback vector. We show
that we can keep only one LFSR (e.g., L(1)), discard the
rest (e.g., L(2), ··· , L(f +1)) and represent the outputs of the
discarded LFSRs using the internal states of the remaining
one (e.g., L(1)). In other words, the actual implementation
of an s-gate will be more or less like Fig 4.
Correctness. The correctness is straightforward by com-
paring the computation of C(cid:48) with that of C. That is, for
t=vt⊕
each wire t, the value it carries vt will be encrypted (v(cid:48)
t⊕ G(t) [i]). Thus, C(cid:48)
G(t) [i]) and then decrypted (vt=v(cid:48)
computes the same function as C does.
Overhead. The computation time of C(cid:48) is 3 times as long
as that of C since the depth of each s-gate has tripled with
regard to the original gate. At this point, it seems that each
s-gate needs f +1 SSGs, namely, a memory of (f +1)l bits,
where f is the fan-in and l is the security parameter. How-
ever, in Sect. 4.3, we will show that it suﬃces to use an l-bit
memory to emulate each s-gate.
Privacy. An adversary can probe any wire t in C(cid:48) to get
t=vt⊕G(t)[i]. Since the encryption key (i.e. initial state) of
v(cid:48)
each G(t), k(t), is chosen uniformly at random from K and
independent of each other, the adversary should work inde-
pendently on each wire t and a prior knowledge regarding
k(t) reveals nothing about other k(t(cid:48)) (t(cid:54)=t(cid:48)). As G can be
any shrinking generator, the following theorem holds.
Theorem 1. If there exists a self-shrinking pseudo-random
generator G, then the stateful circuit C(cid:48) constructed with G
using the above method is secure against polynomial-time
adversaries that eavesdrop on all wires of C(cid:48).
Scalability. With tamper-proof s-gates, we are able to pro-
tect sensitive results from probing adversaries. However,
each s-gate is larger than the original gate in that it is en-
hanced with an l-bit memory and is internally made of XOR
taps (see Sect. 4.3). In some cases, not all wires carry sensi-
tive information and hence we can remove the pairs of G(t)’s
from both ends of those wires carrying non-sensitive results.
Consequently, the overhead factor is in terms of the number
of sensitive wires (instead of the total number of wires).
Figure 4: A stateful gate internally consists of a
stateless gate, an l-bit private memory and some
XOR taps on the memory, where the functionality
of the s-gate depends on that of the stateless gate
and the current state.
Proposition 1. Suppose that L(1) and L(j) are two LF-
SRs with the same update matrix M and that their states at
66
12345678910G(1)G(2)G(3)G(4)G(1)G(2)G(5)G(3)G(2)G(6)G(4)G(7)G(6)G(8)G(7)G(5)G(8)G(7)G(9)G(9)time i are Si and S(j)
{0, ··· , 2l − 2} such that S(j)
respectively, then there exists a dj ∈
i =Si·M dj holds for all i≥0.
i
Proof. Due to the periodic property of LFSRs, there
0 . According
exists a dj ∈ {0, ··· , 2l − 2} such that Sdj =S(j)
to Eq. (2) (see Sect. 3), it holds that
space and hence the expectation value of w (b(j)
0 ··· b(j)
l−1) is
1
2l−1 (1 · l
2l−1 ( l − 1
1 
 + 2 · l
0 
 + l − 1
l 
)
2 
 + ··· + l · l
1 
 + ··· + l − 1
l − 1 
)
= l
= 2(l−1)
2l−1 l ≈ l
2
Sdj = (sdj ,··· , sdj +l−1) = S0 · M dj
(5)
It follows that the expectation value of (6) is
w(a0 ··· al−1) +
lf
2
< l +
lf
2
.
Minimization results. Each s-gate can be constructed
with an l-bit memory and averagely no more than l(1+f /2)
XOR taps. We note that l(1+f /2) is an overestimate in the
sense that there would be (partially) overlapping XOR taps
on an LFSR. For instance, in Fig. 5, by reusing overlapping
XOR taps, the minimum number of taps is 4 instead of
w(s0s1 ··· s7) − 1 + w(b(2)
0 b(2)
1
··· b(2)
7 ) − 1 = 6 .
4.4 Encryption/Decryption Function
With encryption/ decryption function, a legitimate user can
encrypt an input, compute it with C(cid:48) and decrypt the out-
put privately against probing attacks. Encryption (resp.,
decryption) is done by XORing vt (resp., v(cid:48)
t) with G(t)[i],
where t corresponds to the wire number of the input (resp.,
output) bit. However, it would be inconvenient for the user
to maintain and synchronize 1 generator per input/output
bit only for the sake of encryption/decryption. We introduce
a better approach that represents the encryption/decryption
function succinctly with an l-bit key per input/output bit.
We augment the stateful circuit C(cid:48) with a LFSR, denoted
by L(0), which has the same update matrix as those inside
s-gates and are kept synchronized with them. We initial-
ize L(0) with a non-zero random l-bit state and produce its
memory content (at time i) m0[i]··· ml−1[i] as a public out-
put of C(cid:48). As we have shown in Sect. 4.3, if we denote
the LFSR of G(t) by L(t), then there exists an l-bit string
0 ··· b(t)
b(t)
L(t)[i] =:l−1
l−1 such that the output of L(t) at time i
0 ·m0[i] ⊕···⊕ b(t)
l−1·ml−1[i] .
(7)
Thus, we let the l-bit string k=b(t)
l−1 be the encryption
(decryption) key of input (output) wire t, and write the
encryption function and decryption function as
p · mp[i] = b(t)
b(t)
0 ··· b(t)
p=0
Ek(vt) = vt ⊕ G(t)[i]
t ⊕ G(t)[i]
Dk(v(cid:48)
t) = v(cid:48)
respectively, where G(t)[i] is obtained from L(t)[i] using the
shrinking rules. Although the memory content of L(0) is
public, it discloses nothing substantial since its initial state
is randomly chosen.
5. CONCLUDING REMARKS
We have discussed the preservation of circuit privacy by aug-
menting each gate with an l-bit private memory to produce
a stateful circuit C(cid:48). As long as the internal states of s-gates
where M is non-singular since a0=1 (i.e. an XOR tap over
the ﬁrst memory cell) is a necessary (but not suﬃcient) con-
dition of the corresponding LFSRs having a maximal period
of 2l−1 (cf. [12]). Thus, we have
0 = S0 · M dj
S(j)
and the conclusion follows if we right multiply both sides of
the above equation with M i.
i
Thus, at each time i, we can learn the current state of L(j)
(i.e., S(j)
) from the state of L(1) (i.e., Si) and M dj . It is
not necessary to compute dj and then raise M to power dj
to get M dj as it would be ineﬃcient to determine the value
of dj ∈ {0, ··· , 2l − 2}. In Appendix A, we introduce how
to compute M dj in time O(l3).
After we get M dj , the output of L(j) (2≤j≤f +1) can be
written as a linear function of the memory states of L(1),
namely, if we denote the ﬁrst column vector of M dj by (b(j)
0 ,
··· b(j)
i =Sdj +i=Si·M dj
is
l−1), then the ﬁrst sub-equation of S(j)
p si+p = b(j)
b(j)
0 si ⊕ ··· ⊕ b(j)
l−1si+l−1
s(j)
i = sdj +i =:l−1
p=0
i
is the output of L(j) at time i and si··· si+l−1
where s(j)
is the memory contents of L(1) at time i. Finally, the out-
put of G(j) is obtained from that of L(j). Thus, we need
l−1)−1 XOR taps to represent the output of L(j),
w(b(j)
where w(·) denotes the hamming weight (the number of 1’s)
of a binary string.
0 ··· b(j)
Therefore, each s-gate only requires a memory of l bits. We
proceed to estimate the number of XOR taps (within each s-
gate), which are used to update internal state, represent the
outputs of L(2), ··· , L(f +1) and do encryption/decryption.
The total number is
w(a0 ··· al−1) − 1 +2f +1
= w(a0 ··· al−1) +2f +1
(6)
As the initial state of each L(j) (1≤j≤f +1) is uniformly and
independently chosen from
j=2 (w(b(j)
j=2 w(b(j)
0
0
··· b(j)
··· b(j)
l−1)
l−1) − 1) + f + 1
{0, 1}l − {
l−1 (2≤j≤f +1) is also uniformly dis-
it follows that b(j)
tributed (refer to Appendix B for the proof) in the above
0 ··· b(j)
0··· 0}
l
67
Figure 5:
1 ··· b(2)
b(2)