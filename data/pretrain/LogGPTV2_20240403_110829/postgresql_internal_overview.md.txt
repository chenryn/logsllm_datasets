# PostgreSQL Internals

## Overview
By Sheldon E. Strauch, Manager, Database Development at Enova Financial

## Path of a Query

### Client-Server Interaction
1. **Client Program**:
   - Sends an SQL query to the server.
2. **Server Program**:
   - **Parses the Query**: Produces a parse tree.
   - **Rewrites the Tree**: Uses rules from the catalog to rewrite the parse tree.
   - **Selects Execution Path**: Chooses the best execution path from multiple possibilities.
   - **Executes the Query Tree**: Executes the transformed query tree.
   - **Returns Data**: Sends the result data back to the client program.

### Client Programs
- **Command Line Interface**: `psql`
- **Protocol-Compatible Programs**:
  - **C-Language Library**: `libpq` implements the protocol.
  - **Java JDBC Driver**: Has a distinct implementation.
  - **Graphical Interface Tool**: `pgadmin3`
- **Third-Party Tools**:
  - **SQL Manager**
  - **HTSQL**
  - And others

## Establishing Connections

### Server Architecture
- **One Server Process per Client Process**:
  - A single postmaster process manages all backend processes.
  - The postmaster spawns backend processes for each client connection.
- **Concurrent Access and Data Integrity**:
  - Backend processes access data concurrently.
  - Ensures data integrity through semaphores and shared memory.

### Communication and Processing
- **Query Transmission**:
  - Queries are transmitted as plain-text SQL.
  - No parsing is done on the client side.
- **Server-Side Processing**:
  - **Creates an Execution Plan**: Generates an optimal plan.
  - **Retrieves Data**: Fetches tuples (rows) of data.
  - **Returns Data**: Sends the data back to the client over the established connection.

## Initial Parse Stage

- **Syntax Validation**:
  - Uses fixed rules to validate SQL syntax.
  - **Lexical Analyzer**: `scan.l` written for `flex` (lex).
  - **Token Generation**: Generates tokens for recognized identifiers.
  - **Grammar Parser**: `gram.y` written for `bison` (yacc).
  - **Parse Tree Construction**: Builds a parse tree using C code.

## Transformation

- **Semantic Transformation**:
  - Converts the parse tree into a query tree.
  - **System Catalogs**: Looks up tables, functions, and operators.
  - **Transaction Control**: Commands like `BEGIN`, `COMMIT`, and `ROLLBACK` are complete after parsing and require no further analysis.

## Query Rewrite Rule System

- **Improvement Over Berkeley Rule System**:
  - Interposed between the parser and planner.
  - **View Nodes**: Converts view nodes into underlying table nodes using user-defined rewrite rules.
  - **Rule Representation**: A query tree with additional information, representable as a SQL statement.

## Query Tree

- **Internal Representation**:
  - Each component part of the SQL statement is stored separately.
  - **Logging Configuration Parameters**:
    - `debug_print_parse`
    - `debug_print_rewritten`
    - `debug_print_plan`

### Query Tree Parts

- **Command Type**:
  - Simple commands: `SELECT`, `INSERT`, `UPDATE`, `DELETE`.
  - Some command types do not use certain query tree parts.
- **Range Table**:
  - List of relations (tables, views) used in the query.
  - For `SELECT`, it corresponds to the `FROM` clause.
  - Entries are referenced by number internally to resolve ambiguities.
- **Result Relation**:
  - Index into the range table identifying where the results go.
  - `SELECT` queries do not have a result relation.
  - Special cases like `SELECT INTO` are handled differently.
- **Target List**:
  - List of expressions defining the query result.
  - For `SELECT`, builds the final output.
  - For `INSERT`, describes the rows going into the result relation.
  - For `UPDATE`, describes the new rows replacing the old ones.
- **Qualification**:
  - Boolean expression determining if the operation should be executed.
  - Corresponds to the `WHERE` clause.
- **Join Tree**:
  - Corresponds to the `FROM` and `WHERE` clauses.
  - Shows the structure of JOIN expressions if join order matters.
  - Restrictions on JOIN clauses (ON or USING) are attached as qualification expressions.

## Views as Rules

- **Implementation**:
  - All views in PostgreSQL are implemented using the rule system.
  - Views and tables are identical to the parser.
  - Views are implemented as `ON SELECT...DO INSTEAD SELECT...` rules.

## The Planner

- **Execution Paths**:
  - Many possible ways to execute a query tree.
  - Example: `SELECT` on a column with an index can be executed via a sequential scan or an index scan.
- **Optimization**:
  - For small tables, a sequential scan is faster.
  - For large tables, an index scan is more efficient.
  - **Genetic Query Optimizer**: Used when examining all paths is computationally or memory prohibitive.

### Path and Plan

- **Path**:
  - A stripped-down version of a plan.
  - The plan to be executed is constructed after the cheapest path is chosen.
- **Relation Scanning Paths**:
  - Determines paths for scanning each individual relation.
  - Available indexes indicate possible paths.
  - Always creates a sequential table scan path.
  - Creates index paths for restriction attributes with available operators.
- **Join Paths**:
  - Determines paths for joining relation pairs.
  - **Nested Loop Join**: Right relation scanned once for each tuple in the left relation.
  - **Merge Join**: Both relations sorted on join attributes before the join.
  - **Hash Join**: Right relation loaded into a hash table, left relation scanned to find matches.

### Choosing Paths

- **Join Steps**:
  - Final result built by a tree of join steps.
  - Pairs with a corresponding `JOIN` in the `WHERE` qualification get preference.
- **Thresholds**:
  - If the genetic query optimizer's relation count threshold (`geqo_threshold`) is exceeded, heuristics are used to determine join sequences.

### The Chosen Plan

- **Base Relation Scans**:
  - Index and sequential scans.
- **Join Nodes**:
  - Nested-loop, merge, or hash joins.
- **Auxiliary Steps**:
  - Sort nodes.
  - Aggregate-function calculation nodes.

### Loose Ends

- **Plan Nodes**:
  - Can select (discard excluded tuples) and project (compute derived column values).
  - The planner assigns selection conditions and output expression computations to the most appropriate nodes.

## Executor

- **Processing the Plan Tree**:
  - Recursively processes the plan tree, extracting tuples.
  - One call to a plan node returns one tuple.
  - Complex queries involve numerous plan nodes, each applying selections and projections.
- **Actions**:
  - **SELECT**: Returns data to the client.
  - **INSERT**: `ModifyTable` node inserts tuples.
  - **UPDATE**: `ModifyTable` uses tuple ID as the target.
  - **DELETE**: `ModifyTable` uses tuple ID to delete.