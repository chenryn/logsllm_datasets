document and use it in an UNCLASSIFIED document. A 
system that strictly enforces the *-property would prohibit 
this operation. 
Consequently,  a  class  of  trusted  subjects  has  been 
included  in  the  model.  These  subjects  are  trusted  not  to 
violate  security  even  though  they  may  violate  the  *-
property.  Systems  based  on  this  less  restrictive  model 
usually  contain  mechanisms  that  permit  some  operations 
the  *-property  prohibits, 
trusted 
processes in KS OS [17] and SIGMA [1]. The presence of 
such  mechanisms  makes  it  difficult  to  determine  the 
actual  security  policy  enforced  by  the  system  and 
complicates the user interface. 
for  example, 
the 
To  avoid  these  problems,  we  propose  a  different 
approach.  Instead  of  starting  with  an  application-
independent abstraction for a secure computer system and 
trying to make an application fit on top of it, we start with 
the  application  and  derive  the  constraints  that  the  system 
must  enforce  from  both  the  functional  and  security 
requirements of the application. In this way, it is possible 
to  construct  a  set  of  assertions  that  is  enforced uniformly 
on all the system software. To evaluate our approach, we 
have formulated a security model for a family of military 
message  systems.  Defining  an  application-based  security 
model  is  part  of  a  larger  effort  whose  goals  are  (1)  to 
develop a disciplined approach to the production of secure 
systems  and (2) to produce fully worked-out examples of 
a  requirements  document  and  a  software  design  for  such 
systems.  In  this  paper,  we  introduce  the  message  system 
application,  discuss  the  Bell-LaPadula  trusted  process 
approach  to  building  secure  systems,  and  present  a 
security  model  for  military  message  systems  both 
informally and formally. 
2  Requirements of Military Message 
Systems 
In 
recent  years,  automation  has  been  applied 
increasingly  to  the  handling  of  military  messages  [10]. 
While the primary purpose of military message systems is 
to  process  formal  messages  (i.e.,  official  messages 
exchanged  by  military  organizations),  such  systems  may 
also  handle  informal  messages  (i.e.,  unofficial  messages 
individuals).  Formal  messages  are 
exchanged  by 
transmitted  over  military  networks,  such  as  AUTODIN; 
their  format  and  use  is  governed  by  military  standards. 
Examples  of  informal  messages  are  those  currently 
supported  by  several  message  systems  (e.g.,  HERMES 
[19]) available on the ARPA network. 
2.1  Functional Requirements 
Message  system  operations  may  be  organized  into 
three  categories:  operations  on 
incoming  messages, 
operations  on  outgoing  messages,  and  message  storage 
and  retrieval.  Operations  in  the  first  category  permit  a 
user  to  display  and  print  messages  he  has  received. 
Second-category  operations  support  the  creation,  editing, 
and  transmission  of  outgoing  messages.  Message  storage 
and retrieval operations allow users to organize messages 
into message files and to retrieve messages via single keys 
(e.g.,  message  id)  or  combinations  of  keys  (e.g.,  subject 
and  originator).  Typically,  military  systems  that  process 
formal  messages  provide  the  same  operations  as  systems 
that  process  informal  messages  plus  several  additional 
operations,  such  as  distribution  determination,  action  and 
information assignment, and release [10]. 
2.2 
Security Requirements 
Each  formal  military  message  is  composed  of  several 
fields, 
including  To,  From,  Info,  Date-Time-Group, 
Subject,  Text,  Security,  and  Precedence.  A  classification, 
such as UNCLASSIFIED or SECRET, is assigned to each 
field  and  to  some  subfields,  for  example,  the  paragraphs 
of  the  Text  field;  further,  the  overall  message  has  a 
classification that is at least as high as that of any field or 
subfield.  Thus,  the  Subject  field  of  a  message  may  be 
classified  at  a  lower  level  than  the  message  as  a  whole, 
and  two  paragraphs  of  the  Text  field  may  have  different 
classifications. 
In  some  data  processing  applications,  users  process 
information  at  a  single  security  level  for  long  periods  of 
time.  In  contrast,  message  system  users  often  need  to 
handle  data  of  several  classifications  during  a  single 
computer  session.  For  example,  a  user  may  wish  to 
compose  an  unclassified  message  based  in  part  on  a 
previous  classified  message  he  has 
received.  To 
accomplish  this,  he  must  simultaneously  display  the 
classified 
the  unclassified 
message. As a further example, the user may wish to scan 
newly  arrived  messages  and  print  only  those  that  are 
unclassifed.  To  do  so,  he  must  display  data  of  several 
different classifications and then print a hard copy only of 
the unclassifed data. 
information  and  compose 
Military  message  systems  are  required  to  enforce 
certain  security  rules.  For  example,  they  must  insure  that 
users  cannot  view  messages  for  which  they  are  not 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
cleared. Unfortunately, most automated systems cannot be 
trusted  to  enforce  such  rules.  The  result  is  that  many 
military message systems operate in "system-high" mode: 
each  user  is  cleared  to  the  level  of  the  most  highly 
classified  information  on  the  system.  A  consequence  of 
system-high  operation 
the 
computer  system  must  be  classified  at  the  system-high 
level  until  a  human  reviewer  assigns 
the  proper 
classification. 
that  all  data 
leaving 
is 
A  goal  of  our  research  is  to  design  message  systems 
that  are  multilevel  secure.  Unlike  systems  that  operate  at 
system-high,  multilevel  secure  systems  do  not  require  all 
users to be cleared to the level of the highest information 
processed.  Moreover,  information  leaving  such  a  system 
can  be  assigned  its  actual  security  level  rather  than  the 
level  of  the  most  highly  classified  information  in  the 
system.  Unlike  a  system  that  operates  at  system-high,  a 
multilevel 
the 
different 
classifications of information that it processes. 
preserve 
system 
can 
3  Experience with the Bell-Lapadula 
Model and Trusted Processes 
While  its  complete  formal  statement  is  lengthy  and 
the  Bell-LaPadula  model  may  be  briefly 
complex, 
summarized by the following two axioms: 
(a) the simple security rule, which states that a subject 
cannot  read  information  for  which  it  is  not  cleared  ("no 
read up"), and 
(b)  the  *-property,  which  states  that  a  subject  cannot 
move  information  from  an  object  with  a  higher  security 
classification to an object with a lower classification ("no 
write down"). 
These  axioms  are  to  be  enforced  by  restricting  the 
access  rights  that  subjects,  for  example,  users  and 
processes, have to objects, for example, files and devices. 
A  less  frequently  described  part  of  the  Bell-LaPadula 
model  is  its  concept  of  trusted  subjects,  that  is,  subjects 
that  are  allowed  "to  operate  without 
the  extra 
encumbrance  of  the  *-property"  because  they  are  trusted 
"never  [to]  mix  information  of  different  security  levels" 
[3].  More  precisely,  a 
trusted  subject  can  have 
simultaneous read access to objects of classification x and 
write  access  to  objects  of  classification  y,  even  if  the 
classification  of  y  is  less  than  the classification of x. The 
formal  statement  of  the  Bell-LaPadula  model  places  no 
constraints  on  the  trusted  subject's  violations  of  the  *-
property. 
A  number  of  projects  have  used  the  Bell-LaPadula 
model  to  describe  their  security  requirements.  In  these 
projects,  strict  enforcement  of  the  Bell-LaPadula  axioms 
without 
to  be  overly 
restrictive. Hence, trusted processes have been introduced 
as  an  implementation  of  the  concept  of  trusted  subjects. 
Below,  we  summarize  experience  with  the Bell-LaPadula 
trusted  subjects  has  proved 
model and trusted processes in four projects: the Military 
Message Experiment (MME), the Air Force Data Services 
Center  (AFDSC)  Multics,  the  Kernelized  Secure  Oper-
ating System (KSOS), and the Guard message filter. 
3.1  MME 
The  MME's  goal  was  to  evaluate  the  utility  of  an 
interactive  message  system  in  an  operational  military 
environment  [23].  During  the  MME,  more  than  100 
military  officers  and  staff  personnel  used  SIGMA,  the 
message  system developed for the experiment, to process 
their  messages  [21,  22].  Although  SIGMA  was  built  on 
the nonsecure TENEX operating system, its user interface 
was  designed  as  though  it  were  running  on  a  security 
kernel  (i.e.,  a  minimal,  tamperproof  mechanism  that 
assures that all accesses subjects have to objects conform 
to  a  specified  security  model).  SIGMA's  user  interface 
was designed so that it would not change if SIGMA were 
rebuilt  to  operate  with  a  security  kernel.  During  the 
planning  phase  of  the  MME,  it  was  decided  that SIGMA 
would enforce the Bell-LaPadula model [1]. This decision 
led  to  a  number  of  difficulties,  three  of  which  are 
described  below.  The  first  problem  arose  from  the  initial 
decision,  later  changed,  to  adopt  the  model  without 
trusted  subjects;  the  other  two  problems  apply  to  Bell-
LaPadula with or without trusted subjects. 
Prohibition  of  write-downs.  The  *-property  of  Bell-
LaPadula  disallows  write-downs;  yet,  in  certain  cases, 
message  system  users  need  to  lower  the  classification  of 
information. For example, a user may create a message at 
TOP SECRET, and, after he has entered the message text, 
decide that the message classification should be SECRET. 
A  system  that  strictly  enforces  the  *-property  would 
prohibit  a  user  from  reducing  the  message  classification. 
The  user  would  be  required  to  create  a  new  message  at 
SECRET and re-enter the text. 
of  multilevel 
objects.  Bell-LaPadula 
recognizes  only  single-level  objects;  some  message 
system data objects (e.g., messages and message files) are 
inherently  multilevel.  A  computer  system  that  treats  a 
multilevel  object  as  single-level  can  cause  some 
information to be treated as more highly classified than it 
really  is.  For  example,  when  a  user  of  such  a  system 
extracts  an  UNCLASSIFIED  paragraph  from  a  SECRET 
message,  the  system  labels  the  paragraph  SECRET  even 
though the paragraph is actually UNCLASSIFIED. 
Absence 
No  structure  for  application-dependent  security  rules. 
Military  message  systems  must  enforce  some  security 
rules that are absent in other applications. An example is a 
rule that allows only users with release authority to invoke 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
the  release  operation3.  Such  application-dependent  rules 
are  not  covered  by  Bell-LaPadula,  and,  hence,  must  be 
defined outside of it. 
To  address  the  first  problem  (and,  to  some  extent,  the 
third),  the  SIGMA  developers  designed  a  trusted  process 
that is not constrained by the *-property and is, therefore, 
permitted 
to  perform  write-downs.  For  example,  a 
SIGMA  user  could  search  a  file  containing  both 
UNCLASSIFIED  and  SECRET  messages  and 
then 
display  an  UNCLASSIFIED  message  whose  citation  was 
returned  by  the  search;  such  an  operation  required  the 
intervention  of  the  trusted  process  since  the  message 
citation  was  transmitted  from  the  SECRET  process  that 
did  the  search  to  the  UNCLASSIFIED  process  that 
handled  the  message  display.  Unlike  the  Bell-LaPadula 
model,  which  puts  no  explicit  constraints on write-downs 
performed  by  the  trusted  subjects,  SIGMA's  trusted 
process  narrowly  limited  the  cases  in  which  write-downs 
were  permitted.  Ames  [1]  provides  further  details  on  the 
role of the trusted process in SIGMA. 
SiGMA's use of a trusted process was helpful in that it 
relaxed  the  rigid  constraints  of  Bell-LaPadula,  thus 
permitting users to perform required operations. However, 