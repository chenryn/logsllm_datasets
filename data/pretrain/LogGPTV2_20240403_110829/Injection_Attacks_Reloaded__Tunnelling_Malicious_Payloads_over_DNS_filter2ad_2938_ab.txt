query and setting the query domain in Table 1, column ’Trig-
ger/Set query’. We also prefer target applications which allow
the attacker to trigger queries to attacker-selected domains,
e.g., by sending an Email or triggering a query via javascript
in browsers.
Attack surface. To ﬁnd meaningful attacks, we focus on
applications where input from DNS is used for some interest-
ing action, e.g., for implementing a cache, creating a URL,
etc. We do not analyse applications which only do standard
address lookups (without caching), as such a scenario does
not create a meaningful attack surface, even if no input vali-
dation is performed. We list the applications, along with how
the DNS inputs are used by those applications, in Table 1,
column ’Input use’.
Usage of vulnerable resolvers. For applications which use
the system’s libc resolver for DNS lookups, we prefer those
3168    30th USENIX Security Symposium
USENIX Association
Query
js,html
js,html
js,html
js,html
client app
client app




DNS Use-
Case
Chrome
Address
lookups
Firefox
(A, CNAME) Opera
Edge
unscd
java
ping(win32)
openjdk
ldapsearch
radsecproxy
ping(linux)
trace(linux)
OpenWRT
openssh
Application Trigger Set Uses Vali-
libc dates
no
yes
no
yes
no
yes
no
yes
yes
no
no
both
no
yes
no
no
no
no
no
no
no
yes
no
yes
no
ping yes
no
yes
display,log
no text protocol
no
no
-
no some
Authentication policyd-spf
(TXT, TLSA)
All
libspf2
Resolvers
create URL
create URL
conﬁgure
display
display
display
discovery
(MX, SRV,
NAPTR)
Reverse
lookups
(PTR)
login
login


login



login
SMTP
SMTP
client app
Input
use
cache
cache
cache
cache
cache
cache
display
parse
cache
Attack
found
no
no
no
no
no
no
yes
yes
no
yes
yes
yes
yes
yes
no
yes
yes
Table 1: Analysed software and tools.
which are often used on systems with vulnerable libc imple-
mentations. For example, OpenWRT was chosen because it
uses a vulnerable libc implementation with uclibc.
3.1.3 Vulnerabilities Analysis
After identifying a target application, we analyse its DNS
usage and whether input from the DNS is validated, as fol-
lows: (1) source code review, (2) fuzzing and (3) by executing
the application, feeding it with inputs and analysing the result-
ing behaviour and the outputs. We ﬁrst test if an application
does not validate DNS records received in input. For such
applications we then check how the input is used by the ap-
plication, and construct attack vectors accordingly, e.g., XSS
injection. The results of this analysis are listed in Table 1, the
found vulnerabilities in Table 2.
3.2 DNS Caches
The attacks exploit the fact that domains and hostnames are
not restricted to characters, and implements misinterpretation
of domain names due to presence of "\." and of "\000" char-
acters. These characters cause the appearance of "." to be
altered hence manipulating the subdomains of a given parent
domain.
The attacker can trigger a DNS query directly when launch-
ing the attack against open resolver or can initiate the attack
via an application which uses the target DNS resolver, e.g., a
web browser or an Email server.
3.2.1 DNS Cache Poisoning Attacks
In this section we present two types of cache-injection
attacks which are based on domain name misinterpretation
and verify them against popular DNS resolvers’ software
as well as against 3M open DNS resolvers in the Internet.
We also show how to extend our poisoning attacks against
forwarders and provide an example of the poisoning attack
we launched using the public Verisign DNS resolver.
• Attack #1: Period injection. To inject a malicious DNS
record or to overwrite a cached DNS record with a new
value (controlled by an attacker), we design the following
record set inject\.: www\.target.com. A 6.6.6.6. This attack
requires the attacker to control a specially-malformed domain
www\.target.com. under the same parent domain (in this ex-
ample com.) as the domain of its victim, say www.target.com.
Since most client software does not allow triggering a query
for a domain www\.target.com directly, to perform injection
of a malicious record into the victim’s cache, the attacker
can set up a CNAME record with arbitrary subdomain, e.g.,
injectdot.attacker.com, as follows:
injectdot.attacker.com. CNAME www\.target.com.
www\.target.com. A 6.6.6.6
When decoding these records naively without escaping the
period ("\.") it appears that www.target.com has IP address
6.6.6.6. Caching this misinterpreted record after decoding
leads to DNS cache injection.
• Attack #2: Zero-byte injection. We design the follow-
ing record set inject\000, which indicates end of data, for per-
forming DNS cache poisoning.
injectzero.attacker.com CNAME
www.target.com\000.attacker.com
www.target.com\000.attacker.com A 6.6.6.6
When naively decoded and fed into a victim cache
this record enables an attacker to inject records for ar-
bitrary domains into the cache. In this attack we also
use a CNAME alias mapped to some secondary domain
injectzero.attacker.com, since triggering a query to www.
target.com\000.attacker.com without direct access to the
resolver is not possible with most client software. When
decoding this record set into a C-string without escaping
the zero-byte after www.target.com, the .attacker.com is re-
moved since it is after the end of data \000 value, the DNS
software misinterprets the record and caches a record map-
ping www.target.com to IP address 6.6.6.6.
3.2.2 Evaluation of the Attacks
Every application-level DNS-cache running on a system
which misinterprets the inject\. or inject\000 payloads (See Ta-
ble 5) is vulnerable to these attacks. In our Internet study (see
Section 4) we found that 105,854 open DNS resolvers (or 8%
of 1,3M) are vulnerable to our attacks. Our attack evaluation
was automated hence did not include potentially vulnerable
resolvers which could result in a successful attack when the
evaluation was manually tailored per resolver. These cases in-
clude lost packets (we sent only one response to avoid loading
the network), resolvers with multiple caches (the attack was
tested once against each client-exposed-IP of the resolver).
Adjusting our attack to these cases is straightforward, would
however generate much more trafﬁc to the tested systems.
3.2.3 No Countermeasures Against Cache Poisoning
Classic countermeasures against DNS cache poisoning do
not mitigate our cache poisoning attacks. The situation is even
more risky when the same host is conﬁgured as nameserver
and resolver, [20], as a lack of validation by the DNS resolver
USENIX Association
30th USENIX Security Symposium    3169
Section -
Category
3.2 - DNS
3.3 - Eduroam
3.4 - LDAP
3.5 - Email
3.6 - Admin tools
3.6 - Web-interface Reverse-lookup
Mis-
interpretation
DNS use-case
is in
Address-lookup
Resolver
Service discovery
Application
Service discovery
Application
Authorization
Application
Address-, Reverse-lookup ping,openssh,trace Stub resolver
Stub resolver
Software
Verisign DNS
radsecproxy
openjdk
libspf2
OpenWRT luci
Attacker
can choose
domain
yes
yes
no
yes
no
yes
Record type
CNAME
NAPTR, SRV
SRV
TXT (SPF)
CNAME
PTR
Possible outcome(s)
Cache injection
Strip TLS, hijack connection, Crash
Crash
Crash, (potential code execution)
Terminal Escape Code injection
XSS in Admin web-interface
Table 2: Applications’ categories with vulnerabilities and attacks exploiting them.
can allow the attacker to also manipulate the zoneﬁle which
is hosted on the same machine.
Defences against off-path attackers. Defences against
off-path attackers, such as [RFC5452] [21], are not effective
against our attacks: we do not send the malicious DNS re-
sponses from spoofed IP addresses but respond from a name-
server that we control. Hence in our attacks the attacker does
not need to guess the randomisation values, such as UDP
source port and the TXID. The bailiwick check [22], which
prevents the attackers from responding with values not un-
der their domains is also ineffective against our attacks since
the bailiwick check is applied over the records before the
misinterpretation occurs.
Defences against on-path attackers. Cryptographic de-
fences, most notably DNSSEC [RFC4033-RFC4035], can
not prevent our cache poisoning attacks in common setups:
in situations where upstream resolvers are used the misin-
terpreted records are not detected by the downstream DNS
forwarders, since those typically do not perform DNSSEC
validation1. DNSSEC validation is performed by the recur-
sive resolvers over the DNS records in line-format, before the
decoding and the misinterpretation occur. After the records
successfully pass DNSSEC validation, they are cached in a
“misinterpreted” form.
Cross-zone CNAME caching. Additionally to the mis-
interpretation, these attacks require resolvers to cache and
process CNAME records across zone-boundaries, i.e., the re-
solvers must use the misinterpreted second record www.target.
com\000.attacker.com from zone attacker.com to answer
queries for www.target.com. While this is not typically the
case for recursive resolvers, we validated such behaviour in
dnsmasq, the most frequently used forwarder on our open
resolver dataset: given the records injectdot.attacker.com
CNAME www.victim.com and www.victim.com A 6.6.6.6 in re-
sponse to a query for injectdot.attacker.com, dnsmasq will
answer queries for www.victim.com with 6.6.6.6. We illus-
trate how this leads to a vulnerable conﬁguration of forwarder
and recursive resolver in the case dnsmasq is combined with
a misinterpreting recursive resolver like Verisign Public DNS
in Figure 3; our resolver evaluation is in Section 4.
1Neither dnsmasq, systemd-resolved nor OpenWRT or Fritz!Box SOHO
routers perform DNSSEC validation by default.
Figure 3: Downstream forwarder attack using dnsmasq with
Verisign Public DNS misinterpretation of inject\. payload.
3.2.4 Required attacker capabilities
To launch the inject\000 attack, the adversary only needs to
control a nameserver for an arbitrary domain in the internet.
In contrast, in order to launch the inject\. attack the adversary
has to control a specially crafted malicious sub-domain under
the same parent-domain (e.g., com.) as his target. This means
that conducting this attack requires registering a sub-domain
like www\.target via a domain registry. Applicability of
this attack depends on ability of the attacker to register such
sub-domains. For instance, a registry.pw for .pw reported
that registering domain www\.asd.pw was possible, while www.
asd.pw or asd.pw was not (indicating that they are existing
registered domains). Namely the attacker can register www\
.asd.pw and use it to attack the existing victim domain asd.
pw.
3.3 Eduroam Peer Discovery
Eduroam federation uses Remote Authentication Dial-In
User Service (Radius) [23] for authentication of guest access.
Radsecproxy is an application that implements Radius trans-
port over TCP and TLS as well as dynamic peer discovery
3170    30th USENIX Security Symposium
USENIX Association
3.3.2 Attacks Against Radsecproxy
We found multiple security vulnerabilities in the script [24]
for Dynamic Peer Discovery in eduroam, see vulnerabilities
in Table 3. The vulnerabilities allow an attacker to control
various variables inside the script as well as in the generated
dynamic conﬁguration. These vulnerabilities are caused by
the lack of input validation of the resulting output of dig as
well as the usage of printf, which negates the escaping of
special characters done by dig.
To initiate an attack the attacker causes the target system
to issue a query to its domain. To make radsecproxy query
for a domain of attacker’s choice, the attacker just needs to
attempt to log-in at an eduroam access point with a username
ending with the malicious domain. This triggers NAPTR and
SRV queries to locate the correct authentication server, see
messages exchange in Figure 4.
No validation of dig output: By changing the NAPTR
record’s replacement ﬁeld ($HOST), the attacker can control
one argument to dig, which is not checked for its format. We
exploited this to launch two attacks:
• Attack #1 in Table 3. Make dig query an attacker-