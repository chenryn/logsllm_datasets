### 第5章 表述性状态转移（REST）

#### 本章概要
本章旨在探讨万维网架构的需求及其在设计与评估关键通信协议改进时所面临的问题。主要挑战在于开发一种方法，以在部署前对架构改进进行有效评估。为此，我们提出了一种基于架构风格的方法，该方法不仅定义了Web架构的设计原则，还提供了一个严格的测试框架来验证提议的扩展，并通过将其直接应用于现有Web基础设施的软件项目中，实现对修订后架构的部署。

下一章将详细介绍并描述为分布式超媒体系统设计的表述性状态转移（REST）架构风格。这种风格被开发出来，用以代表现代Web应有的运作模型。REST通过一系列架构约束强调组件交互的可伸缩性、接口通用性、独立部署能力以及中间组件的作用，从而减少延迟、增强安全性和封装遗留系统。

#### 5.1 REST的推导

##### 5.1.1 从“空”风格开始
无论是建筑设计还是软件架构，都存在两种常见的设计观点：一种是从零开始构建，另一种则是从整体需求出发，逐步识别和应用各种约束。REST采用了后者，通过增量地添加一组约束来发展其架构风格。这些约束的应用过程如图5-1至5-8所示。“空”风格（图5-1）表示没有任何明确边界的组件系统，这正是我们讨论REST的起点。

**图5-1：“空”风格**

##### 5.1.2 客户-服务器
首先引入的是客户-服务器架构风格（图5-2），其核心原则是关注点分离。这一约束改善了用户界面的跨平台可移植性和系统的可扩展性，更重要的是，它允许组件独立进化，以满足大规模网络环境下的需求。

**图5-2：客户-服务器风格**

##### 5.1.3 无状态
接着，我们为客户-服务器交互增加了无状态约束（图5-3）。这意味着每次请求必须携带所有必要的信息，不能依赖服务器上的上下文数据。虽然这可能增加网络负载并降低某些情况下的性能，但显著提高了系统的可见性、可靠性和可扩展性。

**图5-3：客户-无状态-服务器风格**

##### 5.1.4 缓存
为了提高网络效率，我们进一步引入了缓存机制（图5-4）。这使得客户端可以重用之前请求的结果，减少了重复的数据传输，从而提升了响应速度和用户体验。然而，如果缓存中的数据过期，则可能导致可靠性下降。

**图5-4：客户-缓存-无状态-服务器风格**

##### 早期Web架构
早期的Web架构主要支持静态文档的交换，并仅提供了基本的缓存支持。随着技术的发展，Web开始处理动态内容和服务，并引入了代理和共享缓存等中间件来优化性能和安全性。

**图5-5：早期WWW的架构图**

##### 5.1.5 统一接口
REST最独特的特征之一是其统一接口（图5-6）。通过标准化组件间的交互方式，简化了系统架构并增强了互操作性。尽管这可能会牺牲一定的灵活性，但它对于大粒度超媒体数据传输特别有效。

**图5-6：统一-客户-缓存-无状态-服务器风格**

##### 5.1.6 分层系统
最后，分层系统约束（图5-7）被用于进一步提升系统的可管理性和扩展性。通过限制各层之间的直接交互，可以更好地控制复杂性，同时促进新旧服务的兼容共存。

**图5-7：分层系统风格**

以上各节详细阐述了REST架构风格的关键组成部分及其背后的逻辑依据，为理解和应用这一强大的Web架构模式奠定了基础。