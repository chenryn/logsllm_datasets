    Please select what kind of key you want:
       (1) RSA and RSA (default)
       (2) DSA and Elgamal
       (3) DSA (sign only)
       (4) RSA (sign only)
    Your selection? 
    RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 
    Requested keysize is 2048 bits
    Please specify how long the key should be valid.
             0 = key does not expire
            = key expires in n days
          w = key expires in n weeks
          m = key expires in n months
          y = key expires in n years
    Key is valid for? (0) 
    Key does not expire at all
    Is this correct? (y/N) y
    GnuPG needs to construct a user ID to identify your key.
    Real name: Scott Purcell
    Email address: PI:EMAIL
    Comment: 
    You selected this USER-ID:
        "Scott Purcell "
    Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
    You need a Passphrase to protect your secret key.
    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.
    gpg: key B9AED1DE marked as ultimately trusted
    public and secret key created and signed.
    gpg: checking the trustdb
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    pub   2048R/B9AED1DE 2011-02-22
          Key fingerprint = 9987 B276 A24A 1210 13A7  4D05 9F3F 8934 B9AE D1DE
    uid                  Scott Purcell 
    sub   2048R/0DA4CCE9 2011-02-22
    [scott@Client1 rhel6]$ 
The key ID can be seen in the output above, or can be found with gpg
\--fingerprint
Export the key to a file:
    $ gpg --armor --output ~/RPM-GPG-KEY-ScottPurcell --export B9AED1DE
> \[ \~\]\$ cat RPM-GPG-KEY-ScottPurcell \-\-\-\--BEGIN
> PGP PUBLIC KEY BLOCK\-\-\-\--Version: GnuPG v2.0.14 (GNU/Linux)
>
> mQENBE1jVagBCADVDTOvRl3Z5xPZb6AAl2D3bM/H4kEhyJ+yk1pbVPmu8yu0Cbsl . . .
> R+J9rjvN8rNpQwm40Gx6RpM7qtP/LodzD46dNfbr87lJ4F+4A3U= =f4Gq
> \-\-\-\--END PGP PUBLIC KEY BLOCK\-\-\-\--
Configure rpm-related tools to use your signature:
    $ echo '%_gpg_name Scott Purcell'>> ~/.rpmmacros 
or:
    $ echo '%_gpg_name B9AED1DE'>> ~/.rpmmacros 
Now packages can be created and signed at the same time with rpmbuild
using the \--sign option. Or existing packages can be retroactively
signed with rpm using the \--addsign or \--resign options.
With a signed package in place, the user intending to install it now
needs to import the key:
    # rpm --import /home/scott/RPM-GPG-KEY-ScottPurcell
And with the key imported, the package can be verified:
    $ rpm -K rpmbuild/RPMS/x86_64/rhel6rhce-0.5-1.el6.x86_64.rpm
    rpmbuild/RPMS/x86_64/rhel6rhce-0.5-1.el6.x86_64.rpm: rsa sha1 (md5) pgp md5 OK
#### Create a Repo with your files
(Assumes httpd already installed)
`# yum -y install createrepo`
`# mkdir -p /var/www/html/repo/Packages`
`# cp MyPackage.rpm /var/www/html/repo/Packages`
`# createrepo -v /var/www/html/repo`
`# cp /home/me/RPM-GPG-KEY-me /var/www/html/repo`
#### RPM Packaging, Other Documentation:
Red Hat Enterprise Linux Deployment Guide, section on \"Querying RPM\"
Man Pages:
> -   rpm (8)
> -   rpm2cpio (8)
> -   cpio (1)
#### Manage Processes and Services
Start a service:
:   -   `service  start`
    -   `/etc/init.d/ start`
Stop a service:
:   -   `service  stop`
    -   `/etc/init.d/ stop`
Check status of a service:
:   -   `service  status`
    -   `/etc/init.d/ status`
Reload a service\'s config:
:   -   `service  reload`
    -   `/etc/init.d/ reload`
#### Persistent Configuration of Services
Configure a service to start at boot:
:   -   `chkconfig  on`
    -   `system-config-services`
    -   `ntsysv`
#### Manage Processes and Services: Configure systems to boot into a specific runlevel automatically
`/etc/inittab`
#### Monitoring Processes
`ps`
:   Highly configurable command to list running processes
`top`
:   Command to provide realtime reports of the most active running
    processes
#### Killing Processes
`kill`
:   kills a process by PID. Optionally sends \"signals\" other than
    \"kill\".
`kill-all`
:   Kills a process by name. Use care not to match names you don\'t
    intend to kill.
`pkill`
:   Also kills processes by name. Use care not to match names you don\'t
    intend to kill.
`pgrep`
:   Searches processes by name. Useful for verifying which processes
    would be killed by pkill.
#### Prioritizing Processes
The kernel calculates the priority of each process through a variety of
factors. One input into that calculation is a user-modifiable value
called \"niceness\".
-   A process with higher niceness has lower priority and is thus more
    willing to share resources with other processes.
-   niceness can range from -20 (highest priority) to 19 (lowest
    priority).
#### `nice` and `renice` commands
`nice`
:   Launches commands with a specified \"niceness\" value affecting
    process priority.
    -   Default niceness is \"0\".
    -   Root can set any value.
    -   Non-privileged users can only use positive values.
`renice`
:   Modifies the niceness of an already-running process.
    -   Root can modify the niceness of any process in either direction.
    -   Non-privileged users can only modify their own processes and by
        increasing niceness (lowering priority)
#### Manage system performance
-   Use /proc/sys and sysctl to modify and set kernel run-time
    parameters
-   Produce and deliver reports on system utilization (processor,
    memory, disk, and network)
-   Use iostat and vmstat to report on system performance
-   Use shell scripting to automate system maintenance tasks
##### /proc/sys
/proc is a virtual filesystem containing \"virtual\" files and
directories that serve as an interface to the data being held in RAM by
the kernel.
Many of these files deal with running processes. Others deal with
hardware information. But the /proc/sys directory tree contains files
defining system performance and can be used for performance tuning.
These performance parameters can be directly read with `cat`:
    # cat /proc/sys/net/ipv4/icmp_echo_ignore_all 
    0
Or modified directly with `echo`:
    # echo 1 >/proc/sys/net/ipv4/icmp_echo_ignore_all
    # cat /proc/sys/net/ipv4/icmp_echo_ignore_all 
    1
##### sysctl
The `sysctl` command is an easier and safer way to work with these
parameters
To view all of the tunable parameters:
    # sysctl -A 
    kernel.sched_child_runs_first = 0
    kernel.sched_min_granularity_ns = 1000000
    kernel.sched_latency_ns = 5000000
    ...
To search for a tunable parameter related to a keyword:
    # sysctl -A | grep icmp
    ...
    net.ipv4.icmp_echo_ignore_all = 0
    net.ipv4.icmp_echo_ignore_broadcasts = 1
    ...
The [RHEL Deployment Guide]() has an appendix that documents many of the
more common parameters that might be of use.
##### Changing Tunable Parameters with sysctl
Modify a parameter using `sysctl` with a `-w` parameter:
    # sysctl -w net.ipv4.icmp_echo_ignore_all=1
    net.ipv4.icmp_echo_ignore_all = 1
The example above sets the system to ignore all ping requests.
##### Making changes persistent with /etc/sysctl.conf
Changes to these parameters can be made persistent by inclusion in
`/etc/sysctl.conf`.
The format for this file is exactly the same as that of the output of
`sysctl -A` \-- so you can find the parameter you want to modify, insert
it into `/etc/sysctl.conf` and then modify it.
The file documents a significant number of the most often modified
performance tuning parameters so that finding and modifying these values
is easy.
`sysctl -p` allows you to immediately process `/etc/sysctl.conf` (or an
alternate file) to make its settings effective immediately.
#### Monitoring System Utilization
free
:   Reports memory and swap usage
ps
:   Reports CPU and memory utilization by process
top
:   Reports memory, CPU, and process utilization of the most active
    processes
df
:   Reports utilization of mounted filesystems
du
:   Reports utilization of diskspace by files and directories
netstat
:   Reports network utilization
gnome-system-monitor
:   Graphical tool to monitor all of the above
#### Analyzing System Performance
iostat
:   Used for reporting the I/O performance of storage devices,
    partitions, and network storage.
vmstat
:   Used for reportion the performance of the virtual memory subsystem.
#### Bash Scripting
\
### Session 4 Networking and Routing
#### Network Configuration and Troubleshooting
Class discussion \-- Populate a table explaining for each of the
following aspects of network configuration: 1) How to view or verify the
existing configuration, and 2) How to change the configuration.
-   IP Address and Subnet Mask
-   Routing and Default Gateway
-   Hostname
-   Domainname
-   Name Resolution
#### IP Address and Subnet Mask
-   Verifying configuration
    > `ip a`, `ifconfig`, `nm_applet` (partial), `system-config-network`
    > (partial), `cat /etc/sysconfig/network-scripts/ifcfg-eth`
-   Changing configuration
    > `ip a` (not persistent), `ifconfig` (not persistent), `nm-applet`,
    > `system-config-network`, manual editing of interface config files
#### Routing and Default Gateway
-   Verifying configuration
    > `route`, `ip r`, `netstat -r`
-   Changing configuration
    > `route` (not persistent), `ip r` (not persistent), manual editing
    > of route config files, `nm_applet`, `system-config-network`
#### Hostname
-   Verifying configuration
    > `hostname`, `system-config-network`, `cat /etc/sysconfig/network`
-   Changing configuration
    > `system-config-network`, manual editing of
    > `/etc/sysconfig/network`
#### Domainname
Two types:
> NIS domain
>
> :   Set with `domainname` command
>
> Domain component of FQDN
>
> :   Set in 2nd field of an `/etc/hosts` entry.
#### Name Resolution
-   Verifying configuration
    > `cat /etc/resolv.conf`, `nm_applet`, `system-config-network`
-   Testing functionality
    > `dig`, `nslookup`, `host`
-   Changing configuration
    > `nm-applet`, `system-config-network`, manual editing of
    > `/etc/resolv.conf` and `/etc/hosts`
#### Two Controlling Services
**NetworkManager**
-   RHEL6 default
-   Ideal for client systems and systems with dynamic network conditions
-   No support for bonding/bridging/aliases, etc.
**network**
-   RHEL5 and earlier default
-   Ideal for systems with static network conditions
-   Bonding/bridging/aliases supported.
#### Switching between Controlling Services
To disable NetworkManager and enable network:
    # service NetworkManager stop; chkconfig NetworkManager off
    # service network start; chkconfig network on
To disable network and enable NetworkManager:
    # service network stop; chkconfig network off
    # service NetworkManager start; chkconfig NetworkManager on
To exempt a particular interface from control by NetworkManager, but
leave it in control of other interfaces:
-   In the interface configuration file of the interface to be exempted,
    insert the line:
        NM_CONTROLLED=no
-   Ensure both services are configured on and running.
-   Configured interfaces can be brought up with `ifup eth` or down
    with `ifdown eth` regardless of whether they are managed by
    NetworkManager or not.
#### Network Configuration Files
/etc/hosts
:   Static hostname-to-IP resolution.
/etc/resolv.conf
:   Client configuration for DNS.
/etc/sysconfig/network
:   Main system networking config file. Enables/disables networking in
    general, sets the hostname, and configures routing.
/etc/sysconfig/network-scripts/ifcfg-\
:   Config file for each configured interface.
/etc/sysconfig/network-scripts/route-\
:   Config file for static routes (where needed)
::: note
::: title
Note
:::
/etc/sysconfig/networking/ is used by system-config-network and should
not be manually edited.
:::
#### Reference
/usr/share/doc/initscripts-9.03.17/sysconfig.txt
#### Future (Near!) Network Device Naming Scheme
### Session 5 Firewalls and SELinux
#### Firewalling in RHEL6
RHEL6 implements a packet filtering firewall called iptables. You should
know several key terms:
rule
:   A one-line rule defining a packet type and how it should be handled.
chain
:   A list of rules.
table
:   A list of rules aggregating all of the chains and rules taking a
    particular path through the network stack.
policy
:   A default rule that applies in the absence of other rules.
#### iptables Built-in Chains
INPUT
:   Applies to traffic with your server as the destination.
OUTPUT
:   Applies to traffic origination on your server as the source.
FORWARD
:   Applies to traffic being routed by your system from one network to
    another
#### iptables Targets
ACCEPT
:   Allows the packet to proceed to its destination.
DROP
:   Silently drop the packet.
REJECT
:   Drop the packet with a rejection message
LOG
:   Log the packet and move to next rule in the chain (which may then
    accept, drop, or reject)
#### Connection Tracking States
Iptables can filter packets based on their relationship with previous
traffic.
NEW
:   The packet has started a new connection.
ESTABLISHED
:   Applies to packets that are part of an established TCP connection
    (packets have already been delivered in both directions).
RELATED
:   The packet is starting a new connection, but associated with an
    existing connection.
INVALID
:   The packet is associated with no known connection.
#### Iptables Command Options
`-vnl --line-numbers`
:   List all rules with line numbering
`-A   -j `
:   Adds a rule to the end of the chain