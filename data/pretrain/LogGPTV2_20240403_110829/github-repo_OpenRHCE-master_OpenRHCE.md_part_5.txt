### Key Generation and Configuration

1. **Select the Type of Key:**
   - (1) RSA and RSA (default)
   - (2) DSA and Elgamal
   - (3) DSA (sign only)
   - (4) RSA (sign only)

   Example:
   ```
   Your selection? 1
   ```

2. **Specify the Key Size:**
   - RSA keys can be between 1024 and 4096 bits long.
   - Default key size is 2048 bits.

   Example:
   ```
   What keysize do you want? (2048) 2048
   Requested keysize is 2048 bits
   ```

3. **Set the Key Validity Period:**
   - `0` = key does not expire
   - `n` = key expires in n days
   - `w` = key expires in n weeks
   - `m` = key expires in n months
   - `y` = key expires in n years

   Example:
   ```
   Key is valid for? (0) 0
   Key does not expire at all
   Is this correct? (y/N) y
   ```

4. **Provide User Identification:**
   - Real name: Scott Purcell
   - Email address: scott.purcell@example.com
   - Comment: (optional)

   Example:
   ```
   GnuPG needs to construct a user ID to identify your key.
   Real name: Scott Purcell
   Email address: scott.purcell@example.com
   Comment: 
   You selected this USER-ID:
       "Scott Purcell <scott.purcell@example.com>"
   Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
   ```

5. **Set a Passphrase:**
   - A passphrase is required to protect your secret key.

   Example:
   ```
   You need a Passphrase to protect your secret key.
   We need to generate a lot of random bytes. It is a good idea to perform
   some other action (type on the keyboard, move the mouse, utilize the
   disks) during the prime generation; this gives the random number
   generator a better chance to gain enough entropy.
   gpg: key B9AED1DE marked as ultimately trusted
   public and secret key created and signed.
   gpg: checking the trustdb
   gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
   gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
   pub   2048R/B9AED1DE 2011-02-22
         Key fingerprint = 9987 B276 A24A 1210 13A7  4D05 9F3F 8934 B9AE D1DE
   uid                  Scott Purcell <scott.purcell@example.com>
   sub   2048R/0DA4CCE9 2011-02-22
   ```

### Exporting and Using the Key

1. **Export the Key to a File:**
   - Use the `gpg --armor --output` command to export the key.

   Example:
   ```
   $ gpg --armor --output ~/RPM-GPG-KEY-ScottPurcell --export B9AED1DE
   ```

2. **View the Exported Key:**
   - Use the `cat` command to view the exported key.

   Example:
   ```
   $ cat ~/RPM-GPG-KEY-ScottPurcell
   -----BEGIN PGP PUBLIC KEY BLOCK-----
   Version: GnuPG v2.0.14 (GNU/Linux)
   
   mQENBE1jVagBCADVDTOvRl3Z5xPZb6AAl2D3bM/H4kEhyJ+yk1pbVPmu8yu0Cbsl . . .
   R+J9rjvN8rNpQwm40Gx6RpM7qtP/LodzD46dNfbr87lJ4F+4A3U= =f4Gq
   -----END PGP PUBLIC KEY BLOCK-----
   ```

3. **Configure RPM-Related Tools:**
   - Add the GPG key to the `~/.rpmmacros` file.

   Example:
   ```
   $ echo '%_gpg_name Scott Purcell' >> ~/.rpmmacros
   ```

   or:
   ```
   $ echo '%_gpg_name B9AED1DE' >> ~/.rpmmacros
   ```

4. **Sign Packages:**
   - Use the `--sign` option with `rpmbuild` to create and sign packages.
   - Use the `--addsign` or `--resign` options with `rpm` to sign existing packages.

   Example:
   ```
   $ rpmbuild --sign ...
   $ rpm --addsign ...
   ```

5. **Import and Verify the Key:**
   - Import the key using `rpm --import`.
   - Verify the package using `rpm -K`.

   Example:
   ```
   # rpm --import /home/scott/RPM-GPG-KEY-ScottPurcell
   $ rpm -K rpmbuild/RPMS/x86_64/rhel6rhce-0.5-1.el6.x86_64.rpm
   rpmbuild/RPMS/x86_64/rhel6rhce-0.5-1.el6.x86_64.rpm: rsa sha1 (md5) pgp md5 OK
   ```

### Creating a Repository

1. **Install Required Tools:**
   - Install `createrepo` using `yum`.

   Example:
   ```
   # yum -y install createrepo
   ```

2. **Create the Repository Directory:**
   - Create the necessary directory structure.

   Example:
   ```
   # mkdir -p /var/www/html/repo/Packages
   ```

3. **Copy the Package:**
   - Copy the RPM package to the repository directory.

   Example:
   ```
   # cp MyPackage.rpm /var/www/html/repo/Packages
   ```

4. **Generate the Repository Metadata:**
   - Use `createrepo` to generate the metadata.

   Example:
   ```
   # createrepo -v /var/www/html/repo
   ```

5. **Copy the GPG Key:**
   - Copy the GPG key to the repository directory.

   Example:
   ```
   # cp /home/me/RPM-GPG-KEY-me /var/www/html/repo
   ```

### Managing Processes and Services

#### Start, Stop, and Check Status of a Service

- **Start a Service:**
  - `service <service> start`
  - `/etc/init.d/<service> start`

- **Stop a Service:**
  - `service <service> stop`
  - `/etc/init.d/<service> stop`

- **Check Status of a Service:**
  - `service <service> status`
  - `/etc/init.d/<service> status`

- **Reload a Service's Configuration:**
  - `service <service> reload`
  - `/etc/init.d/<service> reload`

#### Configure a Service to Start at Boot

- `chkconfig <service> on`
- `system-config-services`
- `ntsysv`

#### Monitor and Manage Processes

- **List Running Processes:**
  - `ps`
  - `top`

- **Kill a Process by PID:**
  - `kill <PID>`
  - `killall <process-name>`
  - `pkill <process-name>`
  - `pgrep <process-name>`

- **Prioritize Processes:**
  - `nice` and `renice` commands
  - `nice -n <niceness-value> <command>`
  - `renice <niceness-value> -p <PID>`

#### System Performance Tuning

- **Modify Kernel Parameters:**
  - Use `/proc/sys` and `sysctl` to modify kernel parameters.
  - View all tunable parameters: `sysctl -A`
  - Search for a parameter: `sysctl -A | grep <keyword>`
  - Modify a parameter: `sysctl -w <parameter>=<value>`
  - Make changes persistent: `/etc/sysctl.conf`

- **Monitor System Utilization:**
  - `free` (memory and swap usage)
  - `ps` (CPU and memory utilization by process)
  - `top` (memory, CPU, and process utilization of active processes)
  - `df` (utilization of mounted filesystems)
  - `du` (diskspace usage by files and directories)
  - `netstat` (network utilization)
  - `gnome-system-monitor` (graphical tool for monitoring)

- **Analyze System Performance:**
  - `iostat` (I/O performance of storage devices)
  - `vmstat` (performance of the virtual memory subsystem)

### Networking and Routing

#### Network Configuration and Troubleshooting

- **IP Address and Subnet Mask:**
  - **Verify:**
    - `ip a`
    - `ifconfig`
    - `nm-applet` (partial)
    - `system-config-network` (partial)
    - `cat /etc/sysconfig/network-scripts/ifcfg-ethX`
  - **Change:**
    - `ip a` (not persistent)
    - `ifconfig` (not persistent)
    - `nm-applet`
    - `system-config-network`
    - Manual editing of interface config files

- **Routing and Default Gateway:**
  - **Verify:**
    - `route`
    - `ip r`
    - `netstat -r`
  - **Change:**
    - `route` (not persistent)
    - `ip r` (not persistent)
    - Manual editing of route config files
    - `nm-applet`
    - `system-config-network`

- **Hostname:**
  - **Verify:**
    - `hostname`
    - `system-config-network`
    - `cat /etc/sysconfig/network`
  - **Change:**
    - `system-config-network`
    - Manual editing of `/etc/sysconfig/network`

- **Domainname:**
  - **NIS Domain:**
    - Set with `domainname` command
  - **Domain Component of FQDN:**
    - Set in the second field of an `/etc/hosts` entry

- **Name Resolution:**
  - **Verify:**
    - `cat /etc/resolv.conf`
    - `nm-applet`
    - `system-config-network`
  - **Test:**
    - `dig`
    - `nslookup`
    - `host`
  - **Change:**
    - `nm-applet`
    - `system-config-network`
    - Manual editing of `/etc/resolv.conf` and `/etc/hosts`

#### Controlling Network Services

- **NetworkManager:**
  - RHEL6 default
  - Ideal for client systems and dynamic network conditions
  - No support for bonding, bridging, or aliases

- **network:**
  - RHEL5 and earlier default
  - Ideal for static network conditions
  - Supports bonding, bridging, and aliases

- **Switching Between Services:**
  - Disable NetworkManager and enable `network`:
    - `# service NetworkManager stop; chkconfig NetworkManager off`
    - `# service network start; chkconfig network on`
  - Disable `network` and enable NetworkManager:
    - `# service network stop; chkconfig network off`
    - `# service NetworkManager start; chkconfig NetworkManager on`
  - Exempt a particular interface from NetworkManager control:
    - In the interface configuration file, add `NM_CONTROLLED=no`
    - Ensure both services are configured and running
    - Bring up or down the interface with `ifup ethX` or `ifdown ethX`

#### Network Configuration Files

- `/etc/hosts`: Static hostname-to-IP resolution
- `/etc/resolv.conf`: Client configuration for DNS
- `/etc/sysconfig/network`: Main system networking config file
- `/etc/sysconfig/network-scripts/ifcfg-ethX`: Config file for each interface
- `/etc/sysconfig/network-scripts/route-ethX`: Config file for static routes

### Firewalls and SELinux

#### Firewalling in RHEL6

- **iptables**: Packet filtering firewall
- **Key Terms:**
  - **Rule**: Defines a packet type and handling
  - **Chain**: List of rules
  - **Table**: Aggregates chains and rules
  - **Policy**: Default rule in the absence of others

- **Built-in Chains:**
  - `INPUT`: Traffic with the server as the destination
  - `OUTPUT`: Traffic originating from the server
  - `FORWARD`: Traffic being routed by the system

- **Targets:**
  - `ACCEPT`: Allows the packet
  - `DROP`: Silently drops the packet
  - `REJECT`: Drops the packet with a rejection message
  - `LOG`: Logs the packet and moves to the next rule

- **Connection Tracking States:**
  - `NEW`: New connection
  - `ESTABLISHED`: Part of an established TCP connection
  - `RELATED`: New connection associated with an existing one
  - `INVALID`: Associated with no known connection

- **Command Options:**
  - `-vnl --line-numbers`: List all rules with line numbers
  - `-A <chain> -j <target>`: Adds a rule to the end of the chain

This document provides a comprehensive guide to generating and managing GPG keys, creating repositories, managing processes and services, configuring and troubleshooting network settings, and setting up firewalls in RHEL6.