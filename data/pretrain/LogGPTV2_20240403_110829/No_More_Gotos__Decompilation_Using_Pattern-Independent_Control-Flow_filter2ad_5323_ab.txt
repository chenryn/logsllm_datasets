as follows: we ﬁrst check for pairs of code nodes (ni, nj)
that satisfy cr (h, ni) = ¬cr (h, nj) and group according
to cr (h, ni). These conditions correspond to if-then-else
constructs, and thus are given priority. When no such pairs
can be found, we traverse all nodes in topological order
(including conditional nodes) and check if nodes can be
structured by the reaching condition of the currently visited
node. Intuitively, this traversal mimics the nesting order by
visiting the topmost nodes ﬁrst. Clustering according to the
corresponding conditions allows to structure inner nodes by
removing common factors from logical expressions. Therefore,
we iteratively repeat this step on all newly created sequence
nodes to ﬁnd further nodes with complementing conditions.
In our running example, when the algorithm structures the
acyclic region headed at node b1 (region R2), it computes
the initial AST as shown in Figure 7. Condition nodes are
represented by white nodes with up to two outgoing edges
that represent when the condition is satisﬁed (black arrowhead)
or not (white arrowhead). Sequence nodes are depicted by
blue nodes. Their children are ordered from left to right in
topological order. Leaf nodes (rectangles) are the basic blocks.
The algorithm performs a condition-based reﬁnement wrt.
condition b1 ∧ b2 since nodes n5 and n6 have complementary
conditions. This results in three clusters Vb1∧b2 = {n6},
V¬(b1∧b2) = {n5}, and Vr = {n4} and leads to creating a
condition node. At this point, no further condition-based re-
ﬁnement is possible. Cifuentes proposed a method to structure
compound conditions by deﬁning four patterns that describe
the shape of subgraphs resulting from short circuit evaluation
of compound conditions [11]. Obviously, this method fails if
no match to these patterns is found.
Condition-aware Reﬁnement. This step checks if the child
nodes, or a subset of them, can be structured as a switch
reﬁnement step. The algorithm iteratively extends the current
set of loop nodes by looking for successor nodes that have all
their immediate predecessors in the loop and are dominated
by the header node. When a successor node is identiﬁed as
loop node, its immediate successors that are not currently
loop nodes are added to the set of successor nodes. The
algorithm stops when the set of successor nodes contains
at most one node, i.e., the ﬁnal unique loop successor is
identiﬁed, or when the previous iteration did not ﬁnd new
successor nodes. If the loop still has multiple successors after
reﬁnement, we select from them the successor of the loop
node with smallest post-order as the loop ﬁnal successor. The
remaining successors are classiﬁed as abnormal exit nodes.
We then transform the region into a single-successor region
as will be described in Section V-B. For instance, when
structuring region R1 in our running example (Figure 3), the
algorithm identiﬁes the following initial loop and successor
nodes Nloop = {c1, n1, c2, n3, c3}, Nsucc = {n2, n9}. Next,
node n2 is added to the set of loop nodes since all its prede-
cessors are loop nodes. This results in a unique loop node and
the ﬁnal sets Nloop = {c1, n1, c2, n3, c3, n2}, Nsucc = {n9}.
Algorithm 2: Loop Successor Reﬁnement
Input
: Initial sets of loop nodes Nloop and successor
nodes Nsucc; loop header nh
Output: Reﬁned Nloop and Nsucc
1 Nnew ← Nsucc;
2 while |Nsucc| > 1 ∧ Nnew (cid:54)= ∅ do
Nnew ← ∅;
forall the n ∈ Nsucc do
3
4
5
6
7
8
if preds(n) ⊆ Nloop then
Nloop ← Nloop ∪ {n};
Nsucc ← Nsucc \ {n};
Nnew ← Nnew ∪
{u : u ∈ [succs(n) \ Nloop] ∧ dom(nh,u)};
end
end
Nsucc ← Nsucc ∪ Nnew
9
10
11
12 end
Phoenix [33] employs a similar approach to deﬁne loop
membership. The key difference to our approach is that
Phoenix assumes that the loop successor is either the imme-
diate successor of the header or latching node. For example,
in case of endless loops with multiple break statements or
loops with unstructured continuation condition (e.g., region
R3), the simple assumption that loop successor is directly
reached from loop header or latching nodes fails. In these
cases Phoenix generates an endless loop and represents exits
using goto statements. In contrast, our successor reﬁnement
technique described above does not suffer from this problem
and generates structured code without needing to use goto
statements.
3) Loop Type and Condition: In order to identify loop type
and condition, we ﬁrst represent each edge to the successor
node as a break statement and compute the AST of the
loop body after reﬁnement nb. Note that the loop body is
an acyclic region that we structure as explained in §IV-B.
Next, we represent the loop as endless loop with the computed
8
while (1)
if (c1)
n1
else
. . .
if (¬c3)
break
CONDTOSEQ→
while (1)
while (c1)
n1
. . .
if (¬c3)
break
DOWHILE→
do
while (c1)
n1
. . .
while (c3)
Fig. 9: Example of loop type inference of region R1.
body’s AST, i.e., n(cid:96) = Loop [τendless,−, nb]. Our assumption is
justiﬁed since all exits from the loop are represented by break
statements. Finally, we infer the loop type and continuation
condition by reasoning about the structure of loop n(cid:96).
Inference rules. We specify loop structuring rules as inference
rules of the form:
P1 P2
. . . Pn
C
The top of the inference rule bar contains the premises
P1, P2, . . . , Pn. If all premises are satisﬁed,
then we can
conclude the statement below the bar C. Figure 8 presents our
loop structuring rules. The ﬁrst premise in our rules describes
the input loop structure, i.e., loop type and body structure.
The remaining premises describe additional properties of loop
body. The conclusion is described as a transformation rule of
the form n (cid:59) ´n. Inference rules provide a formal compact
notation for single-step inference and implicitly specify an
inference algorithm by recursively applying rules on premises
until a ﬁxed point is reached. We denote by Br a break
statement, and by Bc
r a condition node that represents the
r = Cond [c, Seq [Br] ,−]. We
statement if (c){break}, i.e., Bc
represent by n ⇓ Br the fact that a break statement is attached
to each exit from the control construct represented by node n.
The operator(cid:80) returns the list of statements in a given node.
In our running example, computing the initial loop structure
for region R1 results in the ﬁrst (leftmost) code in Figure 9.
The loop body consists of an if statement with break state-
ments only in its false branch. This matches the CONDTOSEQ
rule, which transforms the loop body into a sequence of a
while loop and the false branch of the if statement. The rule
states that in this case the true branch of the if statement (n1)
is continuously executed as long as the condition c1 is satisﬁed.
Then, control ﬂows to the false branch. This is repeated until
the execution reaches a break statement. The resulting loop
body is a sequence that ends with a conditional break B¬c3
that matches the DOWHILE rule. The second transformation
results in the third (rightmost) loop structure. At this point the
inference algorithm reaches a ﬁxed point and terminates.
r
To give an intuition of the unstructured code produced by
structural analysis when a region in the CFG does not match its
predeﬁned region schemas, we consider the region R3 in our
running example. Computing the body’s AST of the loop in re-
gion R3 and assuming an endless loop results in the loop repre-
sented as while (1){if ((¬d1 ∧ ¬d2) ∨ (d1 ∧ ¬d3)){break;} . . .}.
The loop’s body starts with a conditional break and
hence is
structured according to the WHILE rule into
while ((d1 ∧ d3) ∨ (¬d1 ∧ d2)){. . .}. We wrote a small function
that produces the same CFG as the region R3 and decompiled
it with DREAM and Hex-Rays. Figure 11 shows that our
nk = Bc
r
DOWHILE
NESTEDDOWHILE
(cid:104)
n(cid:96) = Loop
n(cid:96) (cid:59) Loop
n(cid:96) = Loop
n1 = Bc
τendless,−, Seq [ni]i∈1..k(cid:105)
τendless,−, Seq [ni]i∈1..k(cid:105)
(cid:104)
(cid:104)
τdowhile,¬c, Seq [ni]i∈1..k−1(cid:105)
(cid:104)
τwhile,¬c, Seq [ni]i∈2..k(cid:105)
τendless,−, Seq [ni]i∈1..k(cid:105) ∀i ∈ 1..k − 1 : Br /∈(cid:80) [ni] nk = Cond [c, nt,−]
(cid:104)
n(cid:96) (cid:59) Loop
τdowhile,¬c, Seq [ni]i∈1..k−1(cid:105)
n(cid:96) (cid:59) Loop
τendless,−, Seq
n(cid:96) = Loop
(cid:21)(cid:35)
WHILE
(cid:34)
Loop
, nt
r
(cid:104)
(cid:105)
n(cid:96) = Loop
(cid:104)
(cid:104)
nk = ´nk ⇓ Br
(cid:20)
τendless,−, Seq [ni]i∈1..k(cid:105)
n(cid:96) (cid:59) Seq
(cid:3)(cid:105)
(cid:104)
τendless,−, Seq(cid:2)Loop [τwhile, c, nt] , nf
(cid:3)(cid:105)
τendless,−, Seq(cid:2)Loop [τwhile,¬c, nf ] , nt
(cid:104)
(cid:104)
n(cid:96) (cid:59) Loop
(cid:104)
τendless,−, Cond [c, nt, nf ]
n(cid:96) (cid:59) Loop
Fig. 8: Loop structuring rules. The input to the rules is a loop node n(cid:96).
(cid:105) Br /∈(cid:80) [nt] Br ∈(cid:80) [nf ]
(cid:105) Br ∈(cid:80) [nt] Br /∈(cid:80) [nf ]
τendless,−, Cond [c, nt, nf ]
n1, . . . , nk−1, ´nk
LOOPTOSEQ
CONDTOSEQNEG
CONDTOSEQ
n(cid:96) = Loop
n(cid:96) = Loop
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
1
2
3
4
5
6
7
8
9
10
signed int __cdecl loop(signed int a1)
{
signed int v2; // [sp+1Ch] [bp-Ch]@1
v2 = 0;
while ( a1 > 1 ){
if ( v2 > 10 )
goto LABEL_7;
LABEL_6:
printf("inside_loop");
++v2;
--a1;
}
if ( v2  1 && b <= 10)){
printf("inside_loop");
++b;
--a;
}
printf("loop_terminated");
return b;
}
Fig. 11: Decompiled code generated by DREAM.
D. Side Effects
Our structuring algorithm may result in the same condition
appearing multiple times in the computed AST. For example,
structuring region R2 in the running example leads to the AST
shown in Figure 7 where condition b1 is tested twice. If the
variables tested by condition b1 are modiﬁed in block n4,
the second check of b1 in the AST would not be the same
as the ﬁrst check. As a result, the code represented by the
computed AST would not be semantically equivalent to the
CFG representation.
To guarantee the semantics-preserving property of our
algorithm, we ﬁrst check if any condition is used multiple
times in the computed AST. If this is the case, we check if any
of the variables used in the test is changed on an execution
path between any two uses. This includes if the variable is
assigned a new value, used in a call expression, or used in
reference expression (its address is read). If a possible change
is detected, we insert a Boolean variable to store the initial
value of the condition. All subsequent uses of the condition
are replaced by the inserted Boolean variable.
E. Summary
In this section, we have discussed our approach to creating
an AST for single-entry and single-successor CFG regions.
The above algorithm can structure every CFG except cyclic
regions with multiple entries and/or multiple successors. The
following section discusses how we handle these problematic
regions.
V. SEMANTICS-PRESERVING CONTROL-FLOW
TRANSFORMATIONS
approach correctly found the loop type and continuation con-
dition. In comparison, Hex-Rays produced unstructured code
with two goto statements as shown in Figure 10; one goto
statement jumps outside the loop and the other one jumps back
in the loop.
In this section, we describe our method to transform
cyclic regions into semantically equivalent single-entry single-
successor regions. As the only type of regions that cannot be
structured by our pattern-independent structuring algorithm are
cyclic regions with multiple entries or multiple successors, we
9
We implement several transformations that ﬁnd simpler
forms for certain control constructs. For instance, we trans-
form if statements that assign different values to the same
variable into a ternary operator. That
is, code such as
if (c){x = vt} else{x = vf} is transformed into the equivalent
form x = c ? vt : vf . Also, we identify while loops that can