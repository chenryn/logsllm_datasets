wraps the function f (closed over key k) and turns it into
an oracle. A is an adversary. Comp bool is the type of
probabilistic computations that produce a bool. Rat is
the type of (unary, nonnegative) rational numbers.
This security deﬁnition is provided in the form of
a “game” in which the adversary tries to determine
whether the oracle is f (in game 0) or a random function
(in game 1). After interacting with the oracle, the adver-
sary produces a bit, and the adversary “wins” if this bit
is likely to be different in the games. We deﬁne the ad-
vantage of the adversary to be the difference between the
probability that it produces “true” in game 0 and in game
1. We can conclude that f is a PRF if this advantage is
sufﬁciently small.
Deﬁnition Adv-WCR-G : Comp bool :=
k <-$ RndKey;
[d1, d2, -] <-$3 A (f-oracle k) tt;
ret ((d1 != d2) && ((f k d1) ?= (f k d2))).
Deﬁnition Adv-WCR : Rat := Pr[Adv-WCR-G].
Listing 3: Deﬁnition of Weak Collision-Resistance.
Listing 3 deﬁnes a weakly collision-resistant function.
This deﬁnition uses a single game in which the adversary
is allowed to interact with an oracle deﬁned by a keyed
function f. At the end of this interaction, the adversary
attempts to produce a collision, or a pair of different in-
put values that produce the same output. In this game, we
use ?= and != to denote tests for equality and inequal-
ity, respectively. The advantage of the adversary is the
probability with which it is able to locate a collision.
Finally, the security proof assumes that a certain keyed
function is a PRF against ⊕-related-key attacks (RKA).
This deﬁnition (Listing 4) is similar to the deﬁnition of
a PRF, except the adversary is also allowed to provide a
value that will be xored with the unknown key before the
PRF is called. Note that this assumption is applied to the
dual family of h, in which the roles of inputs and keys are
reversed. So a single input value is chosen at random and
ﬁxed, and the adversary queries the oracle by providing
values which are used as keys.
Deﬁnition RKA-F (k: Bvector b) (s: unit)
(p: Bvector b × Bvector c)
: (Bvector c × unit) :=
ret (f ((fst p) xor k) (snd p), tt).
Deﬁnition RKA-R (k: Bvector b)
(s : list (Bvector c × Bvector c))
(p: Bvector b × Bvector c)
: (Bvector c × list (Bvector c × Bvector c) :=
randomFunc s ((fst p) xor k, (snd p))
Deﬁnition RKA-G0 : Comp bool :=
k <-$ RndKey; [b, -] <-$2 A (RKA-F k) tt; ret b.
Deﬁnition RKA-G1 : Comp bool :=
k <-$ RndKey; [b, -] <-$2 A (RKA-R k) nil; ret b.
Deﬁnition RKA-Advantage : Rat :=
| Pr[RKA-G0] -Pr[RKA-G1] |.
Listing 4: Deﬁnition of Security against ⊕ Related-Key
Attacks. b is the key length of the compression function,
c is the input length of the compression function; Bvec-
tor b is the type of bit-vectors of length b.
The proof of security has the same basic structure
(Figure 2) as Bellare’s more recent HMAC proof [14],
though we simplify the proof signiﬁcantly by assum-
ing h∗ is WCR. The proof makes use of a nested MAC
(NMAC) construction that is similar to HMAC, but it
uses h∗ in a way that is not typically possible in imple-
mentations of hash functions. The proof begins by show-
ing that NMAC is a PRF given that h is a PRF and h∗ is
WCR. Then we show that NMAC and HMAC are “close”
(that no adversary can effectively distinguish them) un-
der the assumption that ¯h is a ⊕-RKA-secure PRF. Fi-
nally, we combine these two results to derive that HMAC
is a PRF.
USENIX Association  
24th USENIX Security Symposium  213
h  PRF
h ⨁-RKA
PRF
HMAC/NMAC
“close”
h*  WCR
NMAC PRF
HMAC PRF
Figure 2: HMAC Security Proof Structure
We also mirror Bellare’s proof by reasoning about
slightly generalized forms of HMAC and NMAC (called
GHMAC and GNMAC) that require the input to be a list
of bit vectors of length b. The proof also makes use of
a “two-key” version of HMAC that uses a bit vector of
length 2b as the key. To simplify the development of this
proof, we build HMAC on top of these intermediate con-
structions in the abstract speciﬁcation (Listing 5).
Deﬁnition h-star k (m : list (Bvector b))
:= fold-left h m k.
Deﬁnition hash-words := h-star iv.
Deﬁnition GNMAC k m :=
let (k-Out, k-In) := splitVector c c k in
h k-Out (app-fpad (h-star k-In m)).
Deﬁnition GHMAC-2K k m :=
let (k-Out, k-In) := splitVector b b k in
let h-in := (hash-words (k-In :: m)) in
hash-words (k-Out :: (app-fpad h-in) :: nil).
Deﬁnition HMAC-2K k (m : list bool) :=
GHMAC-2K k (splitAndPad m).
Deﬁnition HMAC (k : Bvector b) :=
HMAC-2K ((k xor opad) ++ (k xor ipad)).
Listing 5: HMAC Abstract Speciﬁcation.
splitAndPad produces a list of bit-vectors from a list of
bits (padding the last bit-vector as needed), and app-fpad
is a padding function that produces a bit vector of length
b from a bit vector of length c. In the HMAC function, we
use constants opad and ipad to produce a key of length
2b from a key of length b.
The statement of security for HMAC is shown in List-
ing 6. We show that HMAC is a PRF by giving an expres-
sion that bounds the advantage of an arbitrary adversary
A. This expression is the sum of three terms, where each
term represents the advantage of some adversary against
some other security deﬁnition.
The listing describes all the parameters to each of the
security deﬁnitions. In all these deﬁnitions, the ﬁrst pa-
rameter is the computation that produces random keys,
and in PRF-Advantage and RKA-Advantage, the second
parameter is the computation that produces random val-
ues in the range of the function. In all deﬁnitions, the
penultimate parameter is the function of interest, and the
ﬁnal parameter is some constructed adversary. The de-
scriptions of these adversaries are omitted for brevity, but
only their computational complexity is relevant (e.g. all
adversaries are in ZPP assuming adversary A is in ZPP).
Theorem HMAC-PRF:
PRF-Advantage ({0, 1}ˆb) ({0, 1}ˆc) HMAC A <=
PRF-Advantage ({0, 1}ˆc) ({0, 1}ˆc) h B1 +
Adv-WCR ({0, 1}ˆc) h-star B2 +
RKA-Advantage ({0, 1}ˆb) ({0, 1}ˆc)
(BVxor b) (dual-f h) B3.
Listing 6: Statement of Security for HMAC.
We can view the result in Listing 6 in the asymptotic
setting, in which there is a security parameter η, and pa-
rameters c and b are polynomial in η. In this setting, it
is possible to conclude that the advantage of A against
HMAC is negligible in η assuming that each of the other
three terms is negligible in η. We can also view this re-
sult in the concrete setting, and use this expression to ob-
tain exact security measures for HMAC when the values
of b and c are ﬁxed according the sizes used by the imple-
mentation. The latter interpretation is more informative,
and probably more appropriate for reasoning about the
cryptographic security of an implementation.
5 Equivalence of the two functional specs
(Item 4 of the architecture.) In §2 we described a bytes-
and-words speciﬁcation following FIPS198-1, suited for
proving the C program; call that the concrete speciﬁca-
tion. In §4 we described a length-constrained bit-vector
speciﬁcation following Bellare et al.’s original papers;
call that the abstract speciﬁcation. Here we describe the
proof that these two speciﬁcations are equivalent.
Proof outline. There are seven main differences be-
tween the concrete and abstract specs:
(0) The abstract spec, as its name suggests, leaves sev-
eral variables as parameters to be instantiated. Thus,
in order to compute with the abstract HMAC, one
must pass it “converted” variables and “wrapped”
functions from the concrete HMAC.
(1) The abstract spec operates on bits, whereas the con-
crete spec operates on bytes.
(2) The
abstract
spec uses
the dependent
type
Bvector n, which is a length-constrained bit list of
length n, whereas the concrete spec uses byte lists
and int lists, whose lengths are unconstrained by
deﬁnition.
214  24th USENIX Security Symposium 
USENIX Association
(3) Due to its use of dependent types,
the abstract
spec must pad its input twice in an ad-hoc man-
ner, whereas the concrete spec uses the SHA-256
padding function consistently.
(4) The concrete spec treats the hash function (SHA-
256) as a black box, whereas the abstract spec ex-
poses various parts of its functionality, such as its
initialization vector, internal compression function,
and manner of iteration. (It does this because the
Bellare-style proofs rely on the Merkle-Damg˚ard
structure of the hash function.)
(5) The abstract spec pads the message and splits it into
a list of blocks so that it can perform an explicit fold
over the list of lists. However, the concrete spec
leaves the message as a list of bytes and performs
an implicit fold over the list, taking a new block at
each iteration.
(6) The abstract spec deﬁnes HMAC via the HMAC 2K
and GHMAC 2K structures, not directly.
Instantiating the abstract speciﬁcation. The abstract
HMAC spec leaves the following parameters abstract:
Variable c p : nat.
(∗ compression function ∗)
Variable h : Bvector c → Bvector b → Bvector c.
(∗ initialization vector ∗)
Variable iv : Bvector c.
Variable splitAndPad : Blist → list (Bvector b).
Variable fpad : Bvector c → Bvector p.
Variable opad ipad : Bvector b.
The abstract HMAC spec is also more general than the
concrete spec, since it operates on bit vectors, not byte
lists, and does not specify a block size or output size. Af-
ter “replacing” the vectors with lists (see the explanation
of difference (2)) and specializing c = p = 256 (result-
ing in b = 512), we may instantiate abstract parameters
with concrete parameters or functions from SHA-256,
wrapped in bytesToBits and/or intlist to Zlist conversion
functions. For example, we instantiate the block size to
256 and the output size to 512, and deﬁne iv and h as:
Deﬁnition intsToBits := bytesToBits ◦ intlist-to-Zlist.
Deﬁnition sha-iv : Blist :=
intsToBits SHA256.init-registers.
Deﬁnition sha-h (regs : Blist) (block : Blist) : Blist :=
intsToBits (SHA256.hash-block (bitsToInts regs)
(bitsToInts block)).
The intlist to Zlist conversion function is necessary
because portions of the SHA-256 spec operate on lists of
Integers, as speciﬁed in our bytes-and-words formaliza-
tion of FIPS 180-4. (Z in Coq denotes arbitrary-precision
mathematical integers. Our SHA-256 spec represents
byte values as Z. An Integer is four byte-Zs packed big-
endian into a 32-bit integer.)
We are essentially converting the types of the func-
tions from functions on intlists (intlist → . . . → intlist) to
functions on Blists (Blist → . . . → Blist) by converting
their inputs and outputs.
Let us denote by HmacAbs256 the instantiation of
function HMAC from Listing 5 to these parameters.
Since Bellare’s proof assumes that the given key is of the
right length (the block size), our formal equivalence re-
sult relates HmacAbs256 to the function HmacCore from
Section 2, i.e. to the part of HMAC256 that is applied af-
ter key length normalization. (Unlike Bellare, FIPS 198
includes steps to ﬁrst truncate or pad the key if it is too
long or short.)
Theorem. For key vector kv of type Bvector 256 and
message m of type list bool satisfying |l| ≡ 0 (mod 8),
HmacAbs256 kv m≈ HmacCore m (map Bytes.repr kv).
where (·) denotes bitsToBytes conversion, and ≈ is
equality modulo conversion between lists and vectors.
Reconciling other differences. The last difference
(6) is easily resolved by unfolding the deﬁnitions of
HMAC 2K and GHMAC 2K. We solve the other six
problems by changing deﬁnitions and massaging the two
specs toward each other, proving equality or equivalence
each time.
Bridging (5) is basically the proof of correctness of a
deforestation transformation. Consider a message m as a
list of bits bi. First, split it into 512-bit blocks Bi, then
“fold” (the “reduce” operation in map-reduce) the hash
operation H over it, starting with the initialization vector
iv: H(H(H(iv,B0),B1), . . . ,B n−1). Alternatively, express
this as a recursive function on the original bit-sequence
b: grab the ﬁrst 512 bits, hash with H, then do a recursive
call after skipping the ﬁrst 512 bits:
Function F (r: list bool) (b: list bool)
{measure length b} : list bool :=
nil ⇒ r
| - ⇒ F (H r (ﬁrstn 512 b)) (skipn 512 b)
end.
Provided that |b| is a multiple of 512 (which we prove
elsewhere), F(iv,b) =H (H(H(iv,B0),B1), . . . ,B n−1).
We bridge (4) by using the fact that SHA-256 is a
Merkle-Damg˚ard construction over a compression func-
tion. This is a simple matter of matching the deﬁnition
of SHA-256 to the deﬁnition of an MD hash function.
match msg with
USENIX Association  
24th USENIX Security Symposium  215
Bridging (3) is a proof that two different views of the
SHA padding function are equivalent. Before iterating
the compression function on the message, SHA-256 pads
it in a standard, one-to-one fashion such that its length is
a multiple of the block size. It pads it as such:
msg| [1]| [0,0, . . .0] |L
where | denotes list concatenation and L denotes the 64-
bit representation of the length of the message. The num-
ber of 0s is calculated such that the length of the entire
padded message is a multiple of the block size.
The abstract spec accomplishes this padding in two
ways using the functions fpad and splitAndPad.
fpad
pads a message of known length of the output size c to
the block size b, since c is speciﬁed to be less than b.
splitAndPad breaks a variable-length message (of type
list bool) into a list of blocks, each size b, padding it
along the way. fpad is instantiated as a constant, since we
know that the length of the message is c < b. splitAndPad
is instantiated as the normal SHA padding function, but
tweaked to add one block size to the length appended
in [l1,l2], since kin (with a length of one block) will be
prepended to the padded message later.
To eliminate these two types of ad-hoc padding,
we rewrite the abstract spec to incorporate fpad and
splitAndPad into a single padding function split-and-pad
included in the hash function, in the style of SHA-256.
hash-words-padded := hash-words ◦ split-and-pad.
We then remove fpad and splitAndPad from subse-
quent versions of the speciﬁcation. We can easily prove
equality by unfolding deﬁnitions.
Bridging bytes and bits. The abstract and concrete
HMAC functions have different types, so we cannot
prove them equal, only equivalent. HMACc operates on
(lists of) bits and HMACa operates on (lists of) bytes.
(HMACc used to operate on vectors, but recall that we
replaced them with lists earlier.) To bridge gap (1) we
prove, given that the inputs are equivalent, the outputs
will be equivalent:
kc ≈ ka →
mc ≈ ma →
HMACc(kc,mc) ≈ HMACa(ka,ma).
The equivalence relation ≈ can be deﬁned either compu-
tationally or inductively, and both deﬁnitions are useful.
To reason about the behavior of the wrapped functions
with which we instantiated the abstract HMAC spec, we
use the computational equivalence relation (≈c) instan-
tiated with a generic conversion function. This allows