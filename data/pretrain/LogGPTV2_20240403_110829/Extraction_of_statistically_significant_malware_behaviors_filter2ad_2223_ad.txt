Kruskal-based algorithm, see Figure 5, which contains a sub-
graph from a sample in the LdPinch family that has a per-
mutation p-value that is below 0.05. Note that the suspi-
cious behavior consists of all of the connected components
collectively (not individually). Connected components sg1,
sg2, sg3 and sg4 in Figure 5 can be induced by the actions of
sending stolen data over the network, checking its privilege,
adding an entry into the registry and making sure that the
memory space is free before sharing the memory between
their processes, respectively.
4.4 Comparison of graph mining algorithms
In this section, we evaluate the subgraph extraction com-
ponent (Section 3.2.1) of our framework. We consider the
Kruskal-based algorithm (Algorithm 1) and gSpan [26] (a
frequent subgraph mining algorithm) and LEAP [25] (a sub-
Figure 5: A signiﬁcant subgraph of an LdPinch sample
Family
Stration
Banbra
Gaobot
F1
0.1304
0.3000
0.3000
Precision Recall
0.1667
0.1071
0.2143
0.5000
0.5000
0.2143
Table 5: Average similarity scores of 95% signiﬁcant mal-
ware subgraphs extracted by gSpan.
graph mining algorithm designed to discriminate between
two classes and which was used in [12] as part of a malware
detection framework). To use gSpan within our framework,
we modiﬁed line 3 in Algorithm 1 to call gSpan to obtain fre-
quent subgraphs at 5% frequency. To use LEAP, we simply
replaced Algorithm 1 with a call LEAP. The call to LEAP
requires positive samples and negative samples. For the pos-
itive samples, we used graphs from the malware executable
being tested; for the negative samples, we used the goodware
graphs so that it can learn to distinguish between that mal-
ware sample and the goodware. There was an imbalance in
size between the positive and negative samples provided to
LEAP and as a result it produced no signiﬁcant subgraphs.
Hence, all of our subsequent comparisons are restricted to
the Kruskal-based algorithm and gSpan.
4.4.1 P-values
The average p-values of subgraphs, extracted by gSpan,
using permutation, empirical and resampling methods are
shown in Table 6. From the Table, average p-values of mal-
ware and goodware subgraphs are not that diﬀerent. Results
76
Figure 6: A component with multiple edges of type (S1, S2)
from Tables 3 and 6 show that the Kruskal-based method
can extract subgraphs with more reasonable p-values than
gSpan. The reason for the diﬀerence is that gSpan does not
use edge weights (it uses subgraph frequency instead). Thus
a comparison of these two tables show that frequent behav-
iors and malicious behaviors are entirely diﬀerent concepts.
Similarity scores
4.4.2
The gSpan mining algorithm produced signiﬁcant sub-
graphs (p-value below 0.05) only from samples from the Stra-
tion, Banbra and Gaobot families. Table 5 shows the aver-
age similarity of those subgraphs to the corresponding silver
standard graphs. By comparison, Table 4 shows the cor-
responding results for the Kruskal-based algorithm, which
produced higher similarity scores.
4.5 Unseen Behaviors
Template-based malware detection frameworks look for
ﬁxed patterns, such as the presence of pre-speciﬁed sub-
graphs in SDGs of new programs. One of their disadvan-
tages, therefore, is their limited ability to identify malicious
behavior that has not previously appeared in their training
sets. On the other hand, our statistical testing framework is
more ﬂexible because it considers the presence of clusters of
certain types of edges without pre-deﬁned connection pat-
terns between the edges. As a result, subgraphs that did
not appear in the training data can still be ﬂagged as mali-
cious (furthermore, it is more diﬃcult for malware authors
to counter this approach relative to ﬁxed templates).
(1)
i
(k)
i
In the ﬁnal set of experiments, we search for an empirical
demonstration by checking our testing set for behavior that
did not appear in the SDGs used for training and model
selection. For each malware sample in our testing set, we
extract a subgraph using the Kruskal-based algorithm. We
kept only the extracted subgraphs that were signiﬁcant (in
this case, those that had permutation p-values below 0.05).
Now, each extracted subgraph Si may consist of several dis-
joint connected components S
. For each compo-
nent, we check whether it is isomorphic to a subgraph of any
training malware SDG and only keep those components that
are not subgraph isomorphic to training malware SDGs.
, . . . , S
There were many connected components S
(j)
i belonging to
extracted subgraphs that survived this pruning. However,
we were not satisﬁed with most of them because of the fol-
(j)
i had multiple edges of
lowing reason. Many components S
the same type (i.e. they connected nodes with the same la-
bels, as in Figure 6). In many cases, we found that we could
remove the extra copies of those edges so that the resulting
component was still connected and was also isomorphic to a
subgraph of a training malware SDG.
tracted component are marked in bold (the rest of the nodes
and edges are shown to give context to this example). This
malware instance was trying to execute its code in another
process’s context. To do so, it ﬁrst created a process in a
suspended process with the CREATE SUSPENDED param-
eter to suspend the target’s main thread. Next, it queried
the base address value of the suspended process.
It then
read the code from its process and wrote into the memory
space of the suspended process, starting at the base address.
When the copy was done, it resumed the thread with the in-
struction pointer of the suspended thread to the location of
the copied code. We note that some malware in our train-
ing data also has this high-level behavior. However, their
edges are connected together in a way that is diﬀerent from
Figure 7. This reﬂects multiple ways of achieving the same
goal, but with a diﬀerent graph structure (something that
template-based schemes may have diﬃculty with).
5. CONCLUSIONS AND FUTURE WORK
In this paper, we proposed a framework for classifying
malware and identifying suspicious program behavior us-
ing statistical techniques. Our framework uses information
contained in the system call dependency graph of an exe-
cutable. Other approaches, such as static analysis and sta-
tistical analysis of a binary are also useful. In the future, we
plan to incorporate these sources of information as well as
reﬁne the subgraph extraction algorithms.
6. ACKNOWLEDGMENTS
This work is partially supported by University of the Thai
Chamber of Commerce and NSF grant #1054389.
7. REFERENCES
[1] B. Anderson, D. Quist, J. Neil, C. Storlie, and
T. Lane. Graph-based malware detection using
dynamic analysis. J Comput Virol, 7(4):247–258, 2011.
[2] AVG Antivirus 7.5.519a http://www.oldversion.
com/download-AVG-Anti-Virus-7.5.519a.html.
[3] D. Babi´c, D. Reynaud, and D. Song. Malware analysis
with tree automata inference. In CAV. Springer, 2011.
[4] U. Bayer, I. Habibi, D. Balzarotti, E. Kirda, and
C. Kruegel. A view on current malware behaviors. In
LEET, 2009.
[5] G. Casella and R. Berger. Statistical inference.
Duxbury Press, 2001.
[6] Y. Chen and C. Lin. Combining svms with various
feature selection strategies. Feature Extraction, 2006.
[7] M. Christodorescu, S. Jha, and C. Kruegel. Mining
speciﬁcations of malicious behavior. In Proceedings of
the 1st India software engineering conference, 2008.
[8] P. Comparetti, G. Salvaneschi, E. Kirda, C. Kolbitsch,
C. Kruegel, and S. Zanero. Identifying dormant
functionality in malware programs. In S&P, 2010.
[9] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and
C. Stein. Introduction to Algorithms. The MIT Press,
2 edition, 2001.
However, there was one component of an extracted sub-
graph from the Stration family that survived even this prun-
ing step. Figure 7 shows the part of the SDG containing the
extracted component. Nodes and edges belonging to the ex-
[10] J. Devesa, I. Santos, X. Cantero, Y. Penya, and
P. Bringas. Automatic behaviour-based analysis and
classiﬁcation system for malware detection. In ICEIS,
2010.
77
Family
Permutation
gSpan
Empirical
Resampling
Goodware-reference Malware-reference Goodware-reference Malware-reference
Stration
OnLineGames
Rbot
Hupigon
Banbra
Gaobot
Downloader
LdPinch
Mydoom
AVG Antivirus
Bitcomet
SpeedFan installation
mysql
Chrome
7zip
winrar
openOﬃceDraw
openOﬃceWriter
e
r
a
w
l
a
M
e
r
a
w
d
o
o
G
0.2633
0.2716
0.3367
0.4040
0.3738
0.2769
0.4322
0.4243
0.3913
0.3140
0.0857
0.2354
0.2462
0.2500
0.2580
0.2600
0.0020
0.0000
0.4455
0.3560
0.7236
0.7414
0.6417
0.3994
0.6272
0.6483
0.3532
0.4153
0.1855
0.8392
0.8377
0.8952
0.8145
0.3669
0.3629
0.3629
0.4927
0.3894
0.8372
0.8599
0.7308
0.4143
0.6884
0.7149
0.3903
0.4299
0.1861
0.9579
0.9569
0.9875
0.9516
0.4032
0.2830
0.2830
0.6029
0.7363
0.5727
0.7027
0.4778
0.4013
0.6611
0.5120
0.4793
0.1720
0.0600
0.5887
0.1163
0.1100
0.0907
0.0800
0.3490
0.5023
0.9976
0.9975
0.9928
0.9993
0.9913
0.9519
0.9976
0.9717
0.9960
0.8480
0.4622
0.9127
0.6188
1.0000
0.6387
0.5100
0.7300
0.8369
Table 6: Average p-values of subgraphs extracted by gSpan. The malware and goodware p-values are generally similar,
showing that those subgraphs are unrelated to malicious activity.
Figure 7: Unseen subgraph of a sample from Stration family
[11] R. Fan, K. Chang, C. Hsieh, X. Wang, and C. Lin.
Liblinear: A library for large linear classiﬁcation.
JMLR, 9:1871–1874, 2008.
[12] M. Fredrikson, S. Jha, M. Christodorescu, R. Sailer,
and X. Yan. Synthesizing near-optimal malware
speciﬁcations from suspicious behaviors. In S&P, 2010.
to mining signiﬁcant subgraphs in large graph
databases. In ICDE, 2009.
[19] J. Scott, T. Ideker, R. Karp, and R. Sharan. Eﬃcient
algorithms for detecting signaling pathways in protein
interaction networks. J. Comp. Bio., 13(2):133–144,
2006.
[13] H. He and A. Singh. Graphrank: Statistical modeling
[20] E. Stinson and J. Mitchell. Characterizing bots’
and mining of signiﬁcant subgraphs in the feature
space. In ICDM, 2006.
remote control behavior. DIMVA, 2007.
[21] Symantec security research centers.
[14] L. Martignoni, E. Stinson, M. Fredrikson, S. Jha, and
J. Mitchell. A layered architecture for detecting
malicious behaviors. In RAID. Springer, 2008.
[15] Mcafee labs threat center.
www.symantec.com/security_response/, Nov 2012.
[22] ThreatFire v3.0.0.15 Beta 1 http://www.afterdawn.
com/software/general/download_splash.cfm/
threatfire?software_id=1369&version_id=6190.
www.mcafee.com/us/mcafee-labs.aspx/, May 2012.
[23] C. Willems, T. Holz, and F. Freiling. Toward
[16] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan,
D. Chklovskii, and U. Alon. Network motifs: simple
building blocks of complex networks. Science,
298(5594):824, 2002.
automated dynamic malware analysis using
cwsandbox. S&P, 5(2), 2007.
[24] Wusstrace. http://code.google.com/p/wusstrace/,
June 2012.
[17] J. Newsome and D. Song. Dynamic taint analysis:
[25] X. Yan, H. Cheng, J. Han, and P. Yu. Mining
Automatic detection, analysis, and signature
generation of exploit attacks on commodity software.
In NDSS, 2005.
signiﬁcant graph patterns by leap search. In SIGMOD,
2008.
[26] X. Yan and J. Han. gspan: Graph-based substructure
[18] S. Ranu and A. Singh. Graphsig: A scalable approach
pattern mining. In ICDM, 2002.
78