### Kruskal-based Algorithm and Suspicious Behavior Detection

The Kruskal-based algorithm, illustrated in Figure 5, identifies a subgraph from a sample in the LdPinch family with a permutation p-value below 0.05. The suspicious behavior is characterized by the collective presence of all connected components (not individually). In Figure 5, the connected components sg1, sg2, sg3, and sg4 are induced by actions such as sending stolen data over the network, checking privileges, adding an entry to the registry, and ensuring that memory space is free before sharing it between processes, respectively.

### Comparison of Graph Mining Algorithms

In this section, we evaluate the subgraph extraction component (Section 3.2.1) of our framework. We compare the Kruskal-based algorithm (Algorithm 1) with gSpan [26], a frequent subgraph mining algorithm, and LEAP [25], a graph mining algorithm designed to discriminate between two classes and used in [12] for malware detection.

To integrate gSpan into our framework, we modified line 3 of Algorithm 1 to call gSpan and obtain frequent subgraphs at a 5% frequency. For LEAP, we replaced Algorithm 1 with a call to LEAP, which requires both positive and negative samples. Positive samples were graphs from the malware executable being tested, while negative samples were goodware graphs to help LEAP distinguish between malware and goodware. Due to an imbalance in the size of the positive and negative samples, LEAP did not produce any significant subgraphs. Therefore, our subsequent comparisons focus on the Kruskal-based algorithm and gSpan.

#### P-values

Table 6 shows the average p-values of subgraphs extracted by gSpan using permutation, empirical, and resampling methods. The p-values of malware and goodware subgraphs are similar, indicating that these subgraphs are unrelated to malicious activity. The Kruskal-based method, however, extracts subgraphs with more reasonable p-values because gSpan does not use edge weights, relying instead on subgraph frequency. This comparison highlights that frequent behaviors and malicious behaviors are distinct concepts.

#### Similarity Scores

The gSpan mining algorithm produced significant subgraphs (p-value below 0.05) only for samples from the Stration, Banbra, and Gaobot families. Table 5 presents the average similarity of these subgraphs to the corresponding silver standard graphs. In contrast, the Kruskal-based algorithm yielded higher similarity scores, as shown in Table 4.

### Unseen Behaviors

Template-based malware detection frameworks rely on fixed patterns, such as pre-specified subgraphs in SDGs of new programs. A key disadvantage is their limited ability to identify new malicious behaviors not present in their training sets. Our statistical testing framework, however, is more flexible. It considers clusters of certain types of edges without predefined connection patterns, allowing it to flag subgraphs that did not appear in the training data as malicious. This approach is also more resilient to countermeasures by malware authors compared to fixed templates.

In our final set of experiments, we searched for empirical evidence of unseen behaviors by examining the testing set for subgraphs that did not appear in the SDGs used for training and model selection. For each malware sample, we extracted a subgraph using the Kruskal-based algorithm and retained only those with permutation p-values below 0.05. Each extracted subgraph \( S_i \) may consist of several disjoint connected components \( S_{i}^{(1)}, S_{i}^{(2)}, \ldots, S_{i}^{(k)} \). We checked each component for isomorphism with subgraphs in the training malware SDGs and kept only those that were not isomorphic.

Many surviving components had multiple edges of the same type, connecting nodes with the same labels (Figure 6). In many cases, removing extra copies of these edges still resulted in connected components isomorphic to subgraphs in the training malware SDGs.

One component from the Stration family survived this pruning step. Figure 7 shows the part of the SDG containing this extracted component. This malware instance attempted to execute its code in another process's context by creating a suspended process, querying the base address value, reading the code from its process, writing it into the memory space of the suspended process, and then resuming the thread. Although some malware in our training data exhibited similar high-level behavior, their graph structures differed, reflecting multiple ways to achieve the same goal.

### Conclusions and Future Work

In this paper, we proposed a framework for classifying malware and identifying suspicious program behavior using statistical techniques. Our framework leverages information from the system call dependency graph of an executable. Future work will incorporate additional sources of information, such as static analysis and binary statistical analysis, and refine the subgraph extraction algorithms.

### Acknowledgments

This work is partially supported by the University of the Thai Chamber of Commerce and NSF grant #1054389.

### References

[1] B. Anderson, D. Quist, J. Neil, C. Storlie, and T. Lane. Graph-based malware detection using dynamic analysis. J Comput Virol, 7(4):247–258, 2011.
[2] AVG Antivirus 7.5.519a. http://www.oldversion.com/download-AVG-Anti-Virus-7.5.519a.html.
[3] D. Babić, D. Reynaud, and D. Song. Malware analysis with tree automata inference. In CAV. Springer, 2011.
[4] U. Bayer, I. Habibi, D. Balzarotti, E. Kirda, and C. Kruegel. A view on current malware behaviors. In LEET, 2009.
[5] G. Casella and R. Berger. Statistical inference. Duxbury Press, 2001.
[6] Y. Chen and C. Lin. Combining SVMs with various feature selection strategies. Feature Extraction, 2006.
[7] M. Christodorescu, S. Jha, and C. Kruegel. Mining specifications of malicious behavior. In Proceedings of the 1st India software engineering conference, 2008.
[8] P. Comparetti, G. Salvaneschi, E. Kirda, C. Kolbitsch, C. Kruegel, and S. Zanero. Identifying dormant functionality in malware programs. In S&P, 2010.
[9] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms. The MIT Press, 2nd edition, 2001.
[10] J. Devesa, I. Santos, X. Cantero, Y. Penya, and P. Bringas. Automatic behavior-based analysis and classification system for malware detection. In ICEIS, 2010.
[11] R. Fan, K. Chang, C. Hsieh, X. Wang, and C. Lin. Liblinear: A library for large linear classification. JMLR, 9:1871–1874, 2008.
[12] M. Fredrikson, S. Jha, M. Christodorescu, R. Sailer, and X. Yan. Synthesizing near-optimal malware specifications from suspicious behaviors. In S&P, 2010.
[13] H. He and A. Singh. GraphRank: Statistical modeling and mining of significant subgraphs in the feature space. In ICDM, 2006.
[14] L. Martignoni, E. Stinson, M. Fredrikson, S. Jha, and J. Mitchell. A layered architecture for detecting malicious behaviors. In RAID. Springer, 2008.
[15] McAfee Labs Threat Center. www.mcafee.com/us/mcafee-labs.aspx/, May 2012.
[16] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. Chklovskii, and U. Alon. Network motifs: Simple building blocks of complex networks. Science, 298(5594):824, 2002.
[17] J. Newsome and D. Song. Dynamic taint analysis: Automatic detection, analysis, and signature generation of exploit attacks on commodity software. In NDSS, 2005.
[18] S. Ranu and A. Singh. GraphSig: A scalable approach to mining significant subgraphs in large graph databases. In ICDE, 2009.
[19] J. Scott, T. Ideker, R. Karp, and R. Sharan. Efficient algorithms for detecting signaling pathways in protein interaction networks. J. Comp. Bio., 13(2):133–144, 2006.
[20] E. Stinson and J. Mitchell. Characterizing bots' remote control behavior. DIMVA, 2007.
[21] Symantec Security Research Centers. www.symantec.com/security_response/, Nov 2012.
[22] ThreatFire v3.0.0.15 Beta 1. http://www.afterdawn.com/software/general/download_splash.cfm/threatfire?software_id=1369&version_id=6190.
[23] C. Willems, T. Holz, and F. Freiling. Toward automated dynamic malware analysis using CWSandbox. S&P, 5(2), 2007.
[24] Wusstrace. http://code.google.com/p/wusstrace/, June 2012.
[25] X. Yan, H. Cheng, J. Han, and P. Yu. Mining significant graph patterns by LEAP search. In SIGMOD, 2008.
[26] X. Yan and J. Han. gSpan: Graph-based substructure pattern mining. In ICDM, 2002.