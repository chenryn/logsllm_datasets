latest: Pulling from library/centos
8ba884070f61: Pull complete
Digest:
sha256:b5e66c4651870a1ad435cd75922fe2cb943c9e973a9673822d1414824a1d0475
Status: Downloaded newer image for centos:latest
\[root@server docker\]# docker images #查看镜像文件
REPOSITORY TAG IMAGE ID CREATED SIZE
nginx latest 53f3fd8007f7 3 days ago 109 MB
centos latest 9f38484d220f 8 weeks ago 202 MB
\[root@server docker\]# docker run -p 8080:80 -it \--name=nginx01 -d
nginx /bin/bash #启动容器
root@c9808037f17b:/# which nginx\[root@server docker\]# #ctrl +
q退出交互界面容器未停
\[root@server docker\]#
\[root@server docker\]# docker port nginx01 #查看在运行的容器的 端口映射
情况
80/tcp -\> 0.0.0.0:8080
\[root@server docker\]# docker top nginx01 #查看在运行的容器的 进程 情况
\[root@server docker\]# docker inspect nginx01
#查看容器详细信息、底层信息、容器IP地址且宿主机可访问
\[root@server docker\]# curl 
#宿主机访问容器ip也是可以访问的，外面访问宿主机地址
\
\
\[root@server docker\]# docker stop nginx01 #停止容器
nginx01
\[root@server docker\]#
\[root@server docker\]# docker start nginx01 #再次启动容器，
nginx01
\[root@server docker\]# curl  #nginx服务并未启动
curl: (7) Failed connect to 172.17.0.2:80; 拒绝连接
\[root@server docker\]# docker stop nginx01
nginx01
\[root@server docker\]# curl  #无法连接nginx
\[root@server docker\]# docker exec nginx01 nginx
#exec连接容器，容器必须是运行状态
Error response from daemon: Container
c9808037f17b627f32f11258d8d1165b9abe5e82febf1e77bd938ea41568cd2b is not
running
\[root@server docker\]# docker start nginx01
nginx01
\[root@server docker\]# curl http://172.17.0.2
curl: (7) Failed connect to 172.17.0.2:80; 拒绝连接
\[root@server docker\]# docker exec nginx01 nginx
#exec连接nginx01容器的同时 执行nginx启动
\[root@server docker\]# curl  #连接成功
**Dokcer镜像**
容器的基石，层叠的只读文件系统，联合加载，
\[root@server \~\]# ls /var/lib/docker/
containers image network overlay plugins swarm tmp trust volumes
\]# docker info #查看docker使用的存储驱动和存储位置
\]# docker images \[OPTSIONS选项\] \[REPOSITORY仓库\] #查看镜像格式
\~\]# docker images --a
#-a显示所有默认不显示中间层的镜像，无名和标签的镜像为中间层镜像
\~\]# docker images -f 过滤条件 #带显示时的过滤条件
\~\]# docker images -q #-q只显示镜像的唯一ID
\~\]# docker images \--no-trunc #显示的时候，id值不截断，可看到完整的
\[root@server \~\]# docker images nginx #查看nginx仓库的镜像
\[root@server \~\]# docker images --a #-a显示所有默认不显示中间层的镜像
REPOSITORY**（仓库名）** TAG**（标签名）** IMAGE ID**（唯一ID）**
CREATED（镜像建立时间） SIZE（镜像打小）
Nginx latest 53f3fd8007f7 3 days ago 109 MB
centos latest 9f38484d220f 8 weeks ago 202 MB
\# REPOSITORY仓库（一系列镜像的集合） 与
REGISTRy仓库（docker镜像的存储服务）有区别
\#
REGISTRy仓库含有很多REPOSITORY仓库，REPOSITORY仓库中包含一个一个独立镜像
#TAG标签：仓库名+标签名=镜像名，如果未加标签名，默认使用latest标签，如nginx
= ngins:latesr
#一个镜像可打多个标签
\]# docker images nginx #查看镜像详细信息，底层信息
\]# docker rmi \[OPTIONS选项\] IMAGE \[IMAGE...镜像名\] #删除镜像格式
#选项 -f 强制删除 - -no-prune 保留被打标签的父镜像
\]# docker rmi busybox #删除镜像
\]#docker images #查看镜像
\]#docker save busbox:lotest \>busybox.tar #导出镜像
\]#docker load \< busybox.tar #导入镜像
\]# for i in \* ; do docker load \<\$i ; done #一次性导入多个镜像
**获取和推送镜像**
REGISTRY远程仓库 与REPOSITORY本地仓库，之间操作
#可到docker hub网站查找镜像，有许多官方的仓库
\]# docker search \[OPTIONS选项\] TERM #查找镜像最多一次返回25个结果
\]# docker search \--automated nginx
#\--automated自动化选项，只会显示自动化创建的
\]# docker search -s 3 nginx \#
-s限定查找镜像评定的星级，此处查找星级为4以上的nginx镜像
\]#docker pull \[OPTIONS选项\] busybox #下载busybox镜像-a
配置国内镜像站会更快
\# vim daemon.json 添加 \"registry-mirrors\"参数内容，再重启docker
\]#docker pull busybox #下载busybox镜像
#docker push busybox #上传镜像,可结合docker hub使用，类似于github
**自定义构建镜像：**
保存对容器的修改并再次使用， 自定义镜像的能力，
以软件的形式打包并分发服务及其运行环境
有两种方式：docker commit命令方式 与 docker build命令方式
**docker commit \[OPTIONS选项\] CONTAINER \[REPOSITORY仓库\]命令方式：**
选项：-a 记录作者信息， -m 记录镜像信息 -p 表示不暂停正在运行的容器，
通过容器构建，进行打包容器成新的镜像，提交一个具有新配置的容器成为镜像，后面跟容器的name
或者容器Id ，最后是生成新镜像的名字
\[root@server \~\]# docker run centos -it \--name ftpserver centos
/bin/bash
\[root@b25e4e56e863 /\]# yum -y install vsftpd
\[root@b25e4e56e863 /\]# \#
\[root@server \~\]# docker ps
\[root@server \~\]# docker commit -a \'zdd01\' -m \'1703\' ftpserver
ftpservertest1/test2
\[root@server \~\]# docker commit -a \'zdd01\' -m \'1703\' ftpserver
ftpservertest1:test3
\[root@server \~\]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
ftpservertest1 test3 c726e4c66495 3 seconds ago 292 MB
ftpservertest1/test2 latest 77a2e5affdf0 32 seconds ago
**docker build命令方式：**
通过dockerfile文件创建镜像，dockerfile文件所需要的全部指令。基于在这些的指令，我们可以使用Docker
build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。
\]# docker build -t centos_sshd_1 . \# -t 选项来docker
build新的镜像以便于标记构建的镜像，. 表示当前目录，也可以指定dockerfile
文件所在目录。