trust in domains that have good security practices through [7], and
so on as per individual preference.
Another target for attack is the authorization token used to cou-
ple the name-route to the address-route. An eavesdropper may at-
tempt to use the token generated for legitimate endpoints. A small
alteration in how tokens are handled protects tokens against eaves-
droppers. The token is never sent in the clear: P-Boxes append
three copies of the token in τ , one encrypted for each endpoint, and
one encrypted for the M-Box. Endpoints sign FLOWINIT messages
with their copy and include the encrypted M-Box copy within. M-
Boxes decrypt the token and use it to verify the signature to estab-
lish that the endpoint sending the packet possesses the token.
A malicious P-Box (or M-Box) can, at worst, deny service to an
endpoint behind it. Note, however, that a malicious P-Box not on
the name-routed path between the endpoint and its contact P-Box
cannot fake a registration, nor can a malicious P-Box redirect ﬂows
to malicious endpoints; authentication protocols along the name-
routed path prevent it. Malicious M-Boxes may attempt to redirect
FLOWINIT messages to an alternate (malicious) destination, how-
ever, without access to the tokens possessed by the intended desti-
nation, the alternate destination cannot complete the initialization
process in the reverse direction. The only time an address-routed
path can be diverted without authorization tokens is if every M-Box
between the two endpoints is compromised — including, in partic-
ular, the in-host M-Box of the non-malicious endpoint.
A malicious endpoint may attempt to abuse its network privi-
leges; the middle can, in response, contain such endpoints at the
cost of additional name-routed messages. For instance, an endpoint
can attempt to replay legitimately acquired tokens to initialize paths
to multiple destinations only one of which is explicitly authorized.
This is possible because, by default, tokens are bound to named
ﬂows and not to ephemeral addresses (to allow for some mobility);
P-Boxes may however choose to bind the token to the addresses
from which the token can be used, limit the time or number of data
bytes the token is valid for, or in extreme cases, make the token
single-use by requiring M-Boxes to notify the P-Box of each use.
The cost of restricting tokens to granularities ﬁner than ﬂows is ad-
ditional name-routed signaling each time the address-route breaks
trivially (e.g. M-Box reboots).
A
N1
N2
E1
B
E
N3
C
E2
N4
Core
D
Tokens learned over
name-routed signaling
Tokens presented over
address-routed signaling
IP Route
A
B
C
D
E
FlowNegotiate (E1->E2->E1)
FlowInit (succeeds)
FlowInit (fails) / Referral
FlowNegotiate (E2->E1->E2)
FlowInit (succeeds)
Figure 5: Asymmetric routing example. E1 and E2 are multi-homed. All
M-Boxes perform NAT. IP routing is asymmetric.
2.6
Incremental Deployment
We now describe how the NUTSS architecture can be realized in
three incremental phases. The goal of the deployment strategy is
to create incentives for applications and networks to adopt NUTSS
while keeping costs low.
In the ﬁrst phase, only endpoint applications are made NUTSS-
aware; this involves performing name-routed and address-routed
signaling during connection establishment but does not require any
changes to networks. A third-party provides a public P-Box that the
application can use. Endpoints beneﬁt from architectural support
for mobility, ability to traverse legacy NATs (the “killer-app” use-
case of NUTSS as described in the next section), and end-to-end
(but not end-middle-end) access control. In Section 4, we report on
our implementation and deployment of this ﬁrst phase.
In the second phase, the middle is gradually made name-aware.
This is accomplished by individual networks deploying a P-Box.
Endpoints behind these networks are conﬁgured to use the P-Box
(in the same way that DNS resolvers are conﬁgured today i.e. through
DHCP). The need for conﬁguration is temporary until networks de-
ploy M-Boxes in the third phase allowing the referral mechanism to
operate. Networks beneﬁt by gaining insight into, and weak access
control over, ﬂows carried by the network.
In the third and ﬁnal phase, networks replace legacy middleboxes
with NUTSS-aware M-Boxes. M-Boxes allow networks to enforce
access control policies, and control network use in multi-homed
settings. The need for legacy NAT traversal and P-Box conﬁgura-
tion introduced in the ﬁrst two deployment phases is eliminated. If
the network still has some legacy (non-NUTSS-aware) endpoints
that were not upgraded in the ﬁrst phase, the M-Boxes are made
aware of them so the M-Boxes can allow them through.
2.7 An Example: Asymmetric Routing through
Firewalls
We end this section with an example that demonstrates the need
to couple name-routed and address-routed signaling, and describes
how existing approaches fail in this case. The example involves a
scenario, shown in Figure 5, that may easily arise with site multi-
homing. In this example endpoints E1 and E2 wish to commu-
nicate. Both endpoints are multi-homed; E1 connects to the In-
ternet through networks N1 and N2, and E2 connects through N3
and N4. Each network Ni operates a NAT M-Box (Mi with exter-
From To Message
E1
P1
P3
P1
P3
E2
E2
P3
P1
E1
#
1.
2.
3.
4.
P3
5.
P1
6.
E1
7.
M1
8. M1 M3
9. M3
E2
10. E2
M4
11. M4
E2
12. E2
P4
13. P4
P1
14. P1
E1
15. E1
P1
16. P1
P4
17. P4
E2
18. E2
M4
19. M4 M1
20. M1
E1
FLOWNEGOTIATE(E1, E2, AE1 , [])
FLOWNEGOTIATE(E1, E2, AM1 , [τ1])
FLOWNEGOTIATE(E1, E2, AM1 , [τ1, τ3])
FLOWNEGOTIATE(E2, E1, AE2 , [τ1, τ3])
FLOWNEGOTIATE(E2, E1, AM3 , [τ1, τ3])
FLOWNEGOTIATE(E2, E1, AM3 , [τ1, τ3])
FLOWINIT(AE1 , AM3 , PE1 , [τ1, τ3])
FLOWINIT(AM1 , AM3 , PM1 , [τ1, τ3])
FLOWINIT(AM1 , AE2 , PM1 , [τ1, τ3])
FLOWINIT(AE2 , AM1 , PE2 , [τ1, τ3])
REFERRAL(P4, AP4 )
FLOWNEGOTIATE(E2, E1, AE2 , [τ1, τ3])
FLOWNEGOTIATE(E2, E1, AM4 , [τ1, τ3, τ4])
FLOWNEGOTIATE(E2, E1, AM4 , [τ1, τ3, τ4])
FLOWNEGOTIATE(E1, E2, AE1 , [τ1, τ3, τ4])
FLOWNEGOTIATE(E1, E2, AM1 , [τ1, τ3, τ4])
FLOWNEGOTIATE(E1, E2, AM1 , [τ1, τ3, τ4])
FLOWINIT(AE2 , AM1 , PE2 , [τ1, τ3, τ4])
FLOWINIT(AM4 , AM1 , PM4 , [τ1, τ3, τ4])
FLOWINIT(AM4 , AE1 , PM4 , [τ1, τ3, τ4])
Table 2: Message-ﬂow for asymmetric routing example.
nal address AMi) and an associated P-Box (Pi). Inside the multi-
homed networks, IP routing results in asymmetric paths — packets
from E1 to AM3 and AM4 are routed through N1 and N2 respec-
tively, while packets from E2 to AM1 and AM2 are routed through
N4 and N3.
NUTSS establishes an end-middle-end path as follows (Table 2).
After registration state is created, E1’s FLOWNEGOTIATE is ex-
changed with E2 through P1 and P3 (say). In the process E1 learns
AM3 and E2 learns AM1 as the other side’s effective address, along
with the tokens needed (messages #1–6 in the table, arrow (cid:3)A in
the ﬁgure). E1’s FLOWINIT to E2 succeeds (#7–9, (cid:3)B), however,
E2’s FLOWINIT, IP routed through M4, fails due to the lack of
the necessary token resulting in a referral to P4 (#10–11, (cid:3)C). E2
resumes name-routed negotiation through P4, and both endpoints
acquire tokens for M4 (#12–17, (cid:3)D). E2 successfully re-attempts
the FLOWINIT with the newly acquired tokens (#18–20, (cid:3)E). As a
side-effect, E1 learns AM4 as an alternate effective address for E2
that can be used as a failover (once initialized).
In comparison, existing approaches fail to establish a path. As
one might expect, any approach that relies solely on address-routed
signaling (e.g. TCP/IP, HIP [35]) simply cannot signal through the
facing NATs due to both endpoints having private addresses. Re-
laying application data through public proxies (e.g. i3 [49]) is sub-
optimal as public proxies are potential network bottlenecks. Ap-
proaches that use name-routed signaling before address-routed sig-
naling (e.g. DONA [28], i3+DoA [58], SIP+STUN [42, 45]) but do
not strongly couple the two fail to recover when the name-routed
path does not coincide with the address-routed path (i.e. unexpect-
edly encountering M4 above).
Note that the default path discovered by NUTSS is asymmetric
owing to the underlying asymmetric IP routing. If this asymme-
try is undesirable, the P-Box can use explicit M-Box addressing
whereby P3 changes the address advertised in the FLOWNEGOTI-
ATE (#3) from AM1 to AM3 (and stores AM1 in τ3); E2 learns AM3
as the effective address for E1. E2’s FLOWINIT (#10) in this case is
addressed to AM3 instead of AM1. The message is address-routed
to M3, which validates τ3 and NATs the message to AM1, which
in turn NATs the message to E1 completing the initialization. The
resulting path is symmetric despite the underlying asymmetry.
3. USING AND EXTENDING NUTSS
This section supplies a number of scenarios that serve to elu-
cidate the operation of NUTSS. Some of these scenarios require
minor extensions to the basic architecture described in the previous
section. While we should note that each of these scenarios may be
handled by one or another existing technology, taken together they
demonstrate the breadth of NUTSS and its ability to serve as the
foundation for a wide variety of important Internet features.
3.1 Mobility
Mobility in NUTSS follows naturally from the basic connection
establishment mechanism. A mobile endpoint registers with the
P-Box at the new network address. Once registration state is in-
stalled in the intermediate P-Boxes, FLOWNEGOTIATE messages
are routed to the new location. An added option to the REGISTER
message can be used to explicitly expunge the previous registration
state if it is no longer valid. Data transfer for already established
ﬂows is suspended while the endpoint is disconnected. Upon re-
joining, the endpoint attempts to re-initialize the suspended ﬂow
from the new address using the existing tokens; if the initialization
succeeds, for instance mobility inside the same network where the
new M-Box can use the same token as the old M-Box, data ﬂow
can be resumed immediately. Otherwise, data ﬂow is resumed after
the name-based path is re-established, the ﬂow re-negotiated, and
the address-routed path re-initialized with new tokens.
3.2 Legacy NAT Traversal
Endpoints use name-based routing as a generic signaling mech-
anism to conduct legacy NAT traversal as proposed in [21].
In
the presence of legacy M-Boxes without an associated P-Box, end-
points use a conﬁgured third-party P-Box service on the Internet.
Endpoints advertise their public address and port in FLOWNEGO-
TIATE messages. To learn their public address and port, endpoints
use a public service like STUN [45]. While key architectural com-
ponents (tokens, referrals etc.) are not used in this particular case,
legacy NAT traversal is a killer-app for endpoints; being able to
support legacy NAT traversal creates incentives for endpoints to
implement NUTSS, thus bootstrapping deployment.
3.3 Endpoint-Imposed Middleboxes
The NUTSS architecture as discussed focuses on the ability of
the middle to impose middleboxes. Endpoints too, can impose
middleboxes on a per ﬂow basis. We outline one method as fol-
lows. The initiating endpoint imposes a middlebox (e.g. anonymiz-
ing proxy) by sending the FLOWNEGOTIATE to the middlebox and
having it proxy both name-routed and address-routed messages.
The endpoint accepting a ﬂow imposes a middlebox (e.g. virus
scanner) by returning the address of the M-Box instead of its own
address in the FLOWNEGOTIATE; in addition, the endpoint ap-
pends a τdst that contains its own name. The initiator initializes
the address-routed path to the intended middlebox. The middlebox
recovers the name of the intended destination from τdst, negotiates
the path to that destination and proxies processed data. Endpoints