### Comparison of Feature Sets and Classification Performance

Certain macros cannot be subjected to the minimization technique of removing linefeeds. The results of this comparative experiment are presented in Table V and Figure 6, labeled as the 'J feature set'.

Table V includes the evaluation results of the comparison experiment (marked as J1-J20). The Random Forest (RF) classifier achieved the highest accuracy and precision at 90.3% and 84.1%, respectively, among the five classifiers. However, in all aspects, the classification performance was significantly better when using V features compared to J features.

To comprehensively evaluate the classification performance, we introduced the F2 score, which is depicted in Figure 6. The maximum F2 score for the V feature set was 0.92, achieved by the Multi-Layer Perceptron (MLP) classifier, while the RF classifier achieved a score of 0.69 for the J feature set.

As an additional comprehensive evaluation method, the Area Under the Curve (AUC) of the Receiver Operating Characteristic (ROC) curves was calculated. Figure 7 shows the ROC curves for the MLP and RF classifiers, which scored the maximum F2 for the proposed V and J features, respectively.

### Examples of Anti-Analysis Techniques

#### Example 1: Hiding String Data
```vba
Private Sub Document_Open()
    UYjwCZdgnz = ActiveDocument.Variables("waGnXV").Value()
    mambaFRUTISsIn = UserForm1.Label1.Caption
    Shell UYjwCZdgnz, 0
    Shell mambaFRUTISsIn, 0
End Sub
```
If a code analyst only has the above code, it is impossible to determine whether it is malicious without checking the contents of `UYjwCZdgnz` and `mambaFRUTISsIn`.

#### Example 2: Inserting Broken Code
```vba
Public Sub RemoveIDAndFormatRow()
    shtiletMurinoASALLLP = acs.responseBody
    ProjectAndNow.Write shtiletMurinoASALLLP
    CoachesReport ""
    Exit Sub
    Rows.Select
    'Broken code here
    Sel.ection.RowHeight = 15
    Colu.mns("A:A").Delete
    Colu.mns("A").ColumnWidth = 25
    Colu.mns("C").ColumnWidth = 24.71
    Colu.mns("I:R").ColumnWidth = 11
End Sub
```
Inserting broken code causes an error when the code parser tries to interpret non-existent objects like "Sel" or "Colu".

### Anti-Analysis Techniques in VBA Macros

We refer to these techniques that hinder code analysis as anti-analysis techniques, distinguishing them from obfuscation techniques. Obfuscation (O1-O4) is generally used in scripting code to alter the appearance of existing code. In contrast, anti-analysis techniques are more specific and designed to prevent particular analysis methods.

The anti-analysis techniques discussed are not directly addressed in our proposed method but can interfere with the code analysis process and are often found in obfuscated VBA macros. For further malware detection research, we categorize the basic anti-analysis techniques observed in VBA macros as follows:

1. **Hiding String Data**: Microsoft Office documents provide useful data spaces for storing string data, such as document properties, control captions, and form fields. Malware writers can hide malicious strings in these fields, making static analysis difficult. Figure 8(a) illustrates this technique.

2. **Inserting Broken Code**: This technique involves inserting code that causes runtime errors. As shown in Figure 8(b), the instruction pointer exits before reaching the broken code, rendering it ineffective during execution but causing syntax errors during parsing.

3. **Changing the Flow**: This strategy involves altering the execution flow using conditional branching statements. Conditions may include HTTP response codes or the number of recently opened files, to evade sandbox analysis.

### Conclusion

This paper presents the first research on detecting obfuscated VBA macros using machine learning. Since 2014, attacks using VBA macros have been increasing, and given the familiarity of MS Office documents, these attacks should not be underestimated. Despite increased reports by antivirus agencies, little research has been conducted to mitigate these threats.

Unlike traditional malware, VBA macro attacks exploit legitimate functions provided by MS Office, making them immune to security updates. Enhancing user awareness, such as avoiding untrusted email attachments, is crucial for prevention.

Our study collected 4,212 benign and malicious VBA macros, finding that 98.4% of malicious macros were obfuscated, compared to only 1.7% of benign macros. We proposed a machine learning-based approach for detecting obfuscated VBA macros, classifying obfuscation techniques into four types and introducing a feature set for effective detection. Our evaluation showed a 23% improvement in the F2 score compared to related studies.

### Acknowledgment

We express our gratitude to our shepherd, Eric Eide, and the anonymous reviewers for their valuable comments. This research was supported by the Institute for Information & Communications Technology Promotion (IITP) grant funded by the Korea government (MSIP) (NO.2017-0-00184, Self-Learning Cyber Immune Technology Development).

### References

[References are listed as in the original text, with appropriate formatting and citations.]

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring the content is well-organized and easy to understand.