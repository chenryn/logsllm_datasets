macros that can not be applied the miniﬁcation technique of
removing linefeed. The results of this comparison experiment
are shown in Table V and Figure 6 as ‘J feature set’.
Table V includes the evaluation result of comparison exper-
iment (marked as J1-J20). The accuracy and precision of RF
classiﬁer were the highest at 90.3% and 84.1% among ﬁve
classiﬁers, respectively. However, in all aspects, the classiﬁca-
tion performance was much better when using V features, than
when using J features. In order to comprehensively evaluate
the classiﬁcation performance, we introduced the F2 score and
the result is depicted in Figure 6. The maximum F2 score was
found in the MLP classiﬁer for V feature set (0.92) and the
RF classiﬁer for J feature set (0.69).
As another comprehensive evaluation method, the AUC of
ROC curves were calculated. Figure 7 shows the ROC curves
of MLP and RF, which scored maximum F2 for proposed
V and J features, respectively. MLP classiﬁer with proposed
1 Private Sub Document_Open()
2
3
4
5
6 End Sub
UYjwCZdgnz = ActiveDocument.Variables("waGnXV").Value()
mambaFRUTISsIn = UserForm1.Label1.Caption
Shell UYjwCZdgnz, 0
Shell mambaFRUTISsIn, 0
(a) A sample macro code which uses hiding string data. If the code
analyst has only the above code, it can not be determined whether
it is malicious or not before checking what ‘UYjwCZdgnz’ and
‘mambaFRUTISsIn’ contain.
1 Public Sub RemoveIDAndFormatRow()
2
3
4
5
6
7
8
9
10
11
12
13 End Sub
shtiletMurinoASALLLP = acs.responseBody
ProjectAndNow.Write shtiletMurinoASALLLP
CoachesReport ""
Exit Sub
Rows.Select
’Broken code here
Sel.ection.RowHeight = 15
Colu.mns("A:A").Delete
Colu.mns("A").ColumnWidth = 25
Colu.mns("C").ColumnWidth = 24.71
Colu.mns("I:R").ColumnWidth = 11
(b) Inserting broken code causes an error when code parser tries to
interpret “Sel” or “Colu” nonexistent objects.
Fig. 8: Example code of anti-analysis technique
paper, we call these tricks to hinder code analysis as anti-
analysis technique and distinguish it from obfuscation tech-
nique. Obfuscation (O1-O4) is used generically in scripting
code and makes a signiﬁcant difference in the appearance of
existing code. However, anti-analysis technique is limited in
scope that can be applied to code and is designed to prevent
speciﬁc analysis method.
The anti-analysis techniques to be introduced are not di-
rectly addressed or included in the proposed method. However,
they also interfere with the process of analyzing the code and
tend to be found together in obfuscated VBA macros. For
further malware detection research, we organize the basic anti-
analysis techniques observed in VBA macro as follows: 1)
Hiding string data, 2) Inserting broken code, and 3) Changing
the ﬂow.
1) Hiding string data: Microsoft Ofﬁce documents provide
useful data spaces for storing string data. For example, one can
store string data as the document’s property value, the Caption
value of CommandButton, Label, and Form controls, or the
ControlTipText value of UserForm controls [44]. If a malware
writer hides malicious string values in these ﬁelds or even in
the cell value of an Excel document and the malware refers to
them, this prevent the use of static analysis techniques which
analyze the VBA macro source code. Figure 8 (a) shows the
case of hiding string data technique.
2) Inserting broken code: This technique is frequently
adopted in obfuscated VBA macros. It is done by inserting
broken code which causes run-time error. However, as Figure 8
(b) shows, the instruction pointer actually exits in line number
5, before reaching the broken code starting from line number
8. So this anti-analysis technique does not affect the actual
behavior of the macro code, but it is considered as a syntax
error when trying to parse the code.
3) Changing the ﬂow: Another anti-analysis strategy, which
can be used together with the aforementioned anti-analysis
techniques, is achieved by switching the execution ﬂow. It is
done by using a conditional branching statement, together with
checking certain condition is satisﬁed. Certain condition may
be an http response code that veriﬁes that the connection is
well established, or it may be the number of recently opened
ﬁles to prevent sandboxing analysis [45].
VII. CONCLUSION
This paper is the ﬁrst research to propose obfuscated VBA
macro detection using machine learning method. Attacks using
VBA macro have been increasing since 2014. Given the
familiarity of the MS Ofﬁce document, this type of attack
should not be taken lightly. Even though AV agencies are
increasingly reporting attacks using VBA macro, little research
has been conducted to mitigate them.
Unlike the conventional malware which exploits the vul-
nerability of programs, attacks using VBA macro utilize
legitimate functions provided by MS Ofﬁce document. These
threats are not caused by a programmers mistake, nor are
mitigated by a security update. A general way to avoid this
kind of cyber attack is to improve the security awareness of
the end users. It includes: not downloading attachments from
untrusted e-mails, and recognizing the potential damage that
even one malicious document can bring.
Research on identifying obfuscation techniques, which are
applied to VBA macros in the document, is one of the coun-
termeasures to prevent malware infection before malicious
code is executed. We collected 4,212 benign and malicious
VBA macros to investigate how many macros were obfuscated.
98.4% of the malicious macros ﬁles were obfuscated, one the
other hand, only 1.7% of the benign macros were obfuscated.
In this paper, we proposed obfuscated VBA macro detection
with machine learning based approach. We have classiﬁed
VBA macro obfuscation techniques into four types and intro-
duced a feature set for effective obfuscation detection. In the
process of selecting detection features, several features were
selected from JavaScript related studies after being modiﬁed
to reﬂect
the characteristics of VBA macro, or excluded
if not applicable for VBA macro. We then evaluated the
classiﬁcation result of the ﬁve suggested machine learning
classiﬁers using various evaluation metrics. The evaluation
results demonstrated that our detection approach achieved a
F2 score improvement of greater than 23% compared to those
of related studies.
ACKNOWLEDGMENT
The authors would like to express our sincere gratitude for
our shepherd, Eric Eide, and the anonymous reviewers for their
every valued comments to improve the quality of the paper.
This research has been supported by Institute for Information
& communications Technology Promotion (IITP) grant funded
by the Korea government (MSIP) (NO.2017-0-00184, Self-
Learning Cyber Immune Technology Development).
500
[30] Malwr, “Malwr - malware analysis by cuckoo sandbox,” https://malwr.
[31] VirusShare, “Virusshare.com - because sharing is caring,” https://
de/.
com, 2016.
virusshare.com, 2016.
[22] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang, and
D. Xu, “J-force: Forced execution on javascript,” in Proceedings of the
26th International Conference on World Wide Web.
International World
Wide Web Conferences Steering Committee, 2017, pp. 897–906.
[23] M. AbdelKhalek and A. Shosha, “Jsdes: An automated de-obfuscation
system for malicious javascript,” in Proceedings of the 12th International
Conference on Availability, Reliability and Security. ACM, 2017, p. 80.
[24] P. Likarish, E. Jung, and I. Jo, “Obfuscated malicious javascript detection
using classiﬁcation techniques.” in MALWARE, 2009, pp. 47–54.
[25] M. Jodavi, M. Abadi, and E. Parhizkar, “Jsobfusdetector: A binary pso-
based one-class classiﬁer ensemble to detect obfuscated javascript code,”
in Artiﬁcial Intelligence and Signal Processing (AISP), Int’l Symp. on,
2015, pp. 322–327.
[26] S. Aebersold, K. Kryszczuk, S. Paganoni, B. Tellenbach, and T. Trow-
bridge, “Detecting obfuscated javascripts using machine learning,” in
Proceedings of the 11th International Conference on Internet Monitoring
and Protection (ICIMP), 2016.
[27] [MS-VBAL]: VBA Language Speciﬁcation, Microsoft Corporation, https:
//msdn.microsoft.com/en-us/library/dd361851.aspx, December 2016.
[28] C. Collberg, C. Thomborson, and D. Low, “A taxonomy of obfuscating
transformations,” Department of Computer Science, The University of
Auckland, New Zealand, Tech. Rep., 1997.
[29] “Crunchcode: the obfuscator for vba macros,” http://www.crunchcode.
[32] VirusTotal, “Virustotal - free online virus, malware and url scanner,”
https://www.virustotal.com, 2016.
[33] oletools, “oletools - python tools to analyze ole and ms ofﬁce ﬁles,”
https://www.decalage.info/python/oletools.
[34] B.-I. Kim, C.-T. Im, and H.-C. Jung, “Suspicious malicious web site de-
tection with strength analysis of a javascript obfuscation,” International
Journal of Advanced Science and Technology, vol. 26, pp. 19–32, 2011.
theory of communication,” ACM
SIGMOBILE Mobile Computing and Communications Review, vol. 5,
no. 1, pp. 3–55, 2001.
[35] C. E. Shannon, “A mathematical
[36] Scikit-learn, “scikit-learn - machine learning in python,” http://
scikit-learn.org/.
[37] C. Cortes and V. Vapnik, “Support-vector networks,” Machine learning,
vol. 20, no. 3, pp. 273–297, 1995.
[38] H. T. Kam, “Random decision forest,” in Proc. of the 3rd Int’l Conf. on
Document Analysis and Recognition, Montreal, Canada, August, 1995,
pp. 14–18.
[39] T. Hastie, R. Tibshirani, and J. Friedman, “The elements of statistical
learning 2nd edition,” 2009.
[40] S. S. Haykin, S. S. Haykin, S. S. Haykin, and S. S. Haykin, Neural
Pearson Upper Saddle River, NJ,
networks and learning machines.
USA:, 2009, vol. 3.
[41] S. Mika, G. Ratsch, J. Weston, B. Scholkopf, and K.-R. Mullers, “Fisher
discriminant analysis with kernels,” in Neural Networks for Signal
Processing IX, 1999. Proceedings of the 1999 IEEE Signal Processing
Society Workshop.
IEEE, 1999, pp. 41–48.
[42] R. A. Fisher, “The use of multiple measurements in taxonomic prob-
lems,” Annals of human genetics, vol. 7, no. 2, pp. 179–188, 1936.
[43] A. McCallum, K. Nigam et al., “A comparison of event models for
naive bayes text classiﬁcation,” in AAAI-98 workshop on learning for
text categorization, vol. 752. Madison, WI, 1998, pp. 41–48.
[44] [MS-OFORMS]: Ofﬁce Forms Binary File Formats, Microsoft Corpo-
ration, https://msdn.microsoft.com/en-us/library/cc313125(v=ofﬁce.12)
.aspx.
[45] C. Willems, T. Holz, and F. Freiling, “Toward automated dynamic
malware analysis using cwsandbox,” IEEE Security & Privacy, vol. 5,
no. 2, 2007.
REFERENCES
[1] F-Secure, “virus:w32/concept description,” https://www.f-secure.com/
v-descs/concept.shtml, 2017.
[2] M. Hypponen et al., “Threat report 2015,” F-Secure Corporation,
https://www.f-secure.com/documents/996508/1030743/Threat Report
2015.pdf, Tech. Rep., 2015.
“Microsoft ofﬁce 2000 and security against macro
[3] D. Chi,
viruses,”
Symantec Antivirus Research Center,
https://www.
symantec.com/content/dam/symantec/docs/security-center/white-papers/
microsoft-2000-security-against-macro-99-en.pdf, Tech. Rep., 2000.
[4] G. Szappanos, “VBA is not dead!” https://www.virusbulletin.com/
virusbulletin/2014/07/vba-not-dead, June 2014.
[5] G. Chantry, “From the labs: VBA is deﬁnitely not dead in fact, its
undergoing a resurgence,” https://nakedsecurity.sophos.com/2014/09/17/
vba-injectors/, September 2014.
[6] P. Wood et al., “Symantec internet security threat report vol 21,”
Symantec Corporation, Tech. Rep., 2016.
[7] D. Gudkova, M. Vergelis, and N. Demidova, “Spam and phishing in q3
2016,” AO Kapersky Lab, 2016.
[8] C. Beek et al., “Mcafee labs threats report,” McAfee Inc., Santa
Clara, CA., https://www.mcafee.com/ca/resources/reports/rp-quarterly-
threats-sept-2017.pdf, Tech. Rep., september 2017.
[9] W. Xu, F. Zhang, and S. Zhu, “The power of obfuscation techniques
in malicious javascript code: A measurement study,” in Malicious and
Unwanted Software (MALWARE), 2012 7th International Conference on.
IEEE, 2012, pp. 9–16.
[10] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P. Markatos,
“Combining static and dynamic analysis for the detection of malicious
documents,” in Proceedings of the Fourth European Workshop on System
Security. ACM, 2011, p. 4.
[11] S. Jana and V. Shmatikov, “Abusing ﬁle processing in malware detectors
for fun and proﬁt,” in Security and Privacy (SP), 2012 IEEE Symposium
on.
IEEE, 2012, pp. 80–94.
[12] T. Schreck, S. Berger, and J. G¨obel, “Bissam: Automatic vulnerability
identiﬁcation of ofﬁce documents,” in International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment.
Springer, 2012, pp. 204–213.
[13] C. Smutz and A. Stavrou, “Preventing exploits in microsoft ofﬁce
documents through content randomization,” in International Workshop
on Recent Advances in Intrusion Detection. Springer, 2015, pp. 225–
246.
[14] K. Iwamoto and K. Wasaki, “A method for shellcode extraction from
malicious document ﬁles using entropy and emulation,” International
Journal of Engineering and Technology, vol. 8, no. 2, p. 101, 2016.
[15] M. Mimura, Y. Otsubo, and H. Tanaka, “Evaluation of a brute forcing
tool that extracts the rat from a malicious document ﬁle,” in Information
Security (AsiaJCIS), 2016 11th Asia Joint Conference on.
IEEE, 2016,
pp. 147–154.
[16] A. Cohen, N. Nissim, L. Rokach, and Y. Elovici, “Sfem: Structural
feature extraction methodology for the detection of malicious ofﬁce
documents using machine learning methods,” Expert Systems with
Applications, vol. 63, pp. 324–343, 2016.
[17] N. Nissim, A. Cohen, and Y. Elovici, “Aldocx: detection of unknown
malicious microsoft ofﬁce documents using designated active learning
methods based on new structural feature extraction methodology,” IEEE
Transactions on Information Forensics and Security, vol. 12, no. 3, pp.
631–646, 2017.
[18] E. Gaustad, “Applied Machine Learning: Defeating Modern Malicious
https://www.rsaconference.com/events/us17/agenda/
Documents,”
sessions/6662-applied-machine-learning-defeating-modern-malicious,
February 2017.
[19] Y. Choi, T. Kim, S. Choi, and C. Lee, “Automatic detection for javascript
obfuscation attacks in web pages through string pattern analysis,” in
Int’l Conference on Future Generation Information Technology, 2009,
pp. 160–172.
[20] W. Xu, F. Zhang, and S. Zhu, “Jstill: mostly static detection of
obfuscated malicious javascript code,” in ACM conference on Data and
application security and privacy, 2013, pp. 117–128.
[21] D. Liu, H. Wang, and A. Stavrou, “Detecting malicious javascript in
pdf through document instrumentation,” in Dependable Systems and
Networks (DSN), 2014 44th Annual IEEE/IFIP International Conference
on.
IEEE, 2014, pp. 100–111.
501