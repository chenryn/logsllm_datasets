### References

1. Moti Yung and Jianying Zhou (Eds.). Vol. 3089. Springer, Heidelberg, 220–232.
2. Ik Rae Jeong, Jeong Ok Kwon, and Dong Hoon Lee. 2006. A Diffie-Hellman Key Exchange Protocol Without Random Oracles. In CANS 2006 (LNCS), David Pointcheval, Yi Mu, and Kefei Chen (Eds.), Vol. 4301. Springer, Heidelberg, 37–54.
3. Jonathan Katz and Yehuda Lindell. 2007. Introduction to Modern Cryptography. Chapman and Hall/CRC Press.
4. Kazukuni Kobara, SeongHan Shin, and Mario Strefler. 2009. Partnership in Key Exchange Protocols. In ASIACCS 2009, Wanqing Li, Willy Susilo, Udaya Kiran Tupakula, Reihaneh Safavi-Naini, and Vijay Varadharajan (Eds.). ACM Press, 161–170.
5. Florian Kohlar, Sven Schäge, and Jörg Schwenk. 2013. On the Security of TLS-DH and TLS-RSA in the Standard Model. Cryptology ePrint Archive, Report 2013/367. (2013). http://eprint.iacr.org/2013/367.
6. Hugo Krawczyk. 2005. HMQV: A High-Performance Secure Diffie-Hellman Protocol. In CRYPTO 2005 (LNCS), Victor Shoup (Ed.), Vol. 3621. Springer, Heidelberg, 546–566.
7. Hugo Krawczyk, Kenneth G. Paterson, and Hoeteck Wee. 2013. On the Security of the TLS Protocol: A Systematic Analysis. In CRYPTO 2013, Part I (LNCS), Ran Canetti and Juan A. Garay (Eds.), Vol. 8042. Springer, Heidelberg, 429–448. https://doi.org/10.1007/978-3-642-40041-4_24
8. Brian A. LaMacchia, Kristin Lauter, and Anton Mityagin. 2007. Stronger Security of Authenticated Key Exchange. In ProvSec 2007 (LNCS), Willy Susilo, Joseph K. Liu, and Yi Mu (Eds.), Vol. 4784. Springer, Heidelberg, 1–16.
9. Kristin Lauter and Anton Mityagin. 2006. Security Analysis of KEA Authenticated Key Exchange Protocol. In PKC 2006 (LNCS), Moti Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal Malkin (Eds.), Vol. 3958. Springer, Heidelberg, 378–394.
10. Augustin P. Sarr, Philippe Elbaz-Vincent, and Jean-Claude Bajard. 2010. A New Security Model for Authenticated Key Agreement. In SCN 2010 (LNCS), Juan A. Garay and Roberto De Prisco (Eds.), Vol. 6280. Springer, Heidelberg, 219–234.
11. Sven Schäge, Tibor Jager, Florian Kohlar, and Jörg Schwenk. 2011. On the Security of TLS-DHE in the Standard Model. Cryptology ePrint Archive, Report 2011/219. (2011). http://eprint.iacr.org/2011/219.

### A Brief Overview on Security Models for Authenticated Key Exchange

In the 1990s, Bellare and Rogaway introduced the Bellare-Rogaway model, which initiated a rigorous study of cryptographic models for key agreement protocols. This model has served as the foundation for many refined security models (e.g., [7, 29]). In 2001, Canetti and Krawczyk proposed a new key exchange model [17], now known as the CK-model, which covers session state revelations but does not require explicit authentication. The CK-model is widely recognized for its ability to reflect a broad range of practical attacks.

In 2005, Krawczyk extended the CK-model to include key impersonation (KCI) security and weak forward secrecy, resulting in the CKHMQV or CK+ model, also referred to as the HMQV model [35]. In 2007, LaMacchia et al. introduced the eCK model [37] for analyzing two-party key exchange protocols. The eCK model captures the exposure of ephemeral keys through an EphemeralKey-query and allows the exposure of ephemeral secret keys of the Test-oracle and its partner oracle. It is used in many security proofs due to its comprehensive coverage of practical attacks.

### General Setup

Let \(\pi\) be a security protocol. Suppose we have a set \(P_1, \ldots, P_n\) of honest parties, each with a long-term secret \(sk_i\). We denote the \(s\)-th instance of a protocol run at party \(P_i\) as \(\pi^s_i\). Each instance can be viewed as an oracle, either an initiator or responder, which defines the algorithms it uses to respond to incoming messages and compute the session key. Each oracle has an associated session state, including intermediate random values used in the computation of the session key. Additionally, each oracle has access to the long-term secrets of \(P_i\).

In most security models, security is defined through a security game played between an adversary and a challenger. The adversary's task is to distinguish the key computed by the Test-oracle from a random key. The active adversary \(A\) is granted access to Send, Reveal, Corrupt, EphemeralKey, and Test-queries.

### Detailed Example of a No-Match Attack

We will illustrate a concrete vulnerable protocol and a corresponding no-match attack. For simplicity, we focus on the SIG(NAXOS) protocol, which relies on the protocol compiler of Cremers and Feltz [20] applied to the NAXOS protocol [37].

#### Protocol Description

- **Setup**: Each party \(P_c\) has two independent long-term secret/public key pairs: one for the NAXOS protocol (\(pk_c = g^{x_c}, sk_c = x_c\)) and one for a randomized and strongly secure digital signature scheme (\(pk_{sig}^c, sk_{sig}^c\)). Let \(H_1: \{0, 1\}^* \to \mathbb{Z}_p\) and \(H_2: \{0, 1\}^* \to \{0, 1\}^\kappa\) be two hash functions, where \(\kappa\) is a security parameter.
- **Party \(P_i\)**: Selects a random number \(\alpha_i \leftarrow \mathbb{Z}_q\), computes \(\Gamma_i = g^{H_1(\alpha_i, sk_i)}\), and generates a signature \(\sigma_i = SIG.Sign(sk_{sig}^i, \Gamma_i || P_j)\).
- **Party \(P_j\)**: Similarly, selects \(\alpha_j \leftarrow \mathbb{Z}_q\), computes \(\Gamma_j\) and \(\sigma_j\) over \(\Gamma_j || \Gamma_i || P_i\), and sends \((\Gamma_j, \sigma_j)\) to \(P_i\).
- **Session Key Computation**: Party \(P_i\) checks if \(SIG.Vfy(pk_{sig}^j, \Gamma_j || \Gamma_i || P_i, \sigma_j) = 1\). If the check passes, \(P_i\) computes the session key \(K_{i, j} = H_2(g^{H_1(\alpha_i, sk_i)}, pk_j, \Gamma_j, i, j)\). Party \(P_j\) computes \(K_{i, j} = H_2(pk_i, g^{H_1(\alpha_j, sk_j)}, \Gamma_i, i, j)\). Finally, \(P_i\) sends \((\Gamma_i, \sigma_i)\) to \(P_j\).

#### No-Match Attack

- **Adversary \(A\)**: Makes a Corrupt\((P_i)\)-query and obtains the long-term private key \(sk_i\).
- **Party \(P_i\)**: Computes \(\Gamma_i = g^{H_1(\alpha_i, sk_i)}\) and \(\sigma_i = SIG.Sign(sk_{sig}^i, \Gamma_i || P_j)\).
- **Interception**: Adversary \(A\) intercepts and deletes \(\sigma_i\). Then, \(A\) computes a fresh signature \(\sigma^*\) with internal random coins \(r^* \neq r_i\) such that \(\sigma^* = SIG.Sign(sk_{sig}^i, \Gamma_i || P_j)\). Finally, \(A\) sends \((\Gamma_i, \sigma^*)\) to \(P_j\).
- **Party \(P_j\)**: Behaves similarly, computes \((\Gamma_j, \sigma_j)\), and sends them to \(P_i\).
- **Session Key Computation**: Parties \(P_i\) and \(P_j\) accept and compute the same session key \(K_{i, j}\).
- **Test Query**: Adversary \(A\) queries Test\((\pi^s_i)\) and gets \(K_b\) from \(\pi^s_i\). Then, \(A\) queries Reveal\((\pi^t_j)\) and obtains \(K_{i, j}\). Since \(\sigma^* \neq \sigma_i\), \(\pi^s_i\) and \(\pi^t_j\) are not partnered. Now, \(A\) can easily check if \(K_b = K_{i, j}\).

### Robust Composition

We believe our new definition of partnering not only fixes the notion of matching conversations but provides a superior notion of partnering. To support this, we highlight a fundamental problem with matching conversations: protocols secure under this definition cannot provide robust composition. This means the protocol cannot be securely composed with independently generated messages. This leads to the situation where some protocols may be secure when analyzed in isolation but lose all security when a single random value is added to the message flow.

#### Definitions

- **Robust Augmentation**: A protocol \(\pi'\) is a robust augmentation of \(\pi\) if:
  - The protocol messages of \(\pi\) form a subsequence of \(\pi'\), i.e., \(\pi'\) can be computed from \(\pi\) by adding messages.
  - The session key generated by \(\pi'\) is the same as the session key output by \(\pi\).

- **Weak Robust Composition**: A security model \(S\) supports weak robust composition if for all protocols \(\pi\) and every robust augmentation \(\pi'\) of \(\pi\):
  - The additional messages \(\pi' - \pi\) are computed independently of those of \(\pi\).
  - If \(\pi\) is secure under \(S\), then \(\pi'\) is secure under \(S\).

#### Theorem

**Theorem C.3**: Any exploitable security model \(S\) that defines partnering via matching conversations cannot support weak robust composition.

**Proof**: Consider a protocol \(\pi\) that is secure under \(S\). Let \(\pi'\) be a robust augmentation of \(\pi\) that adds a single random bit \(b\) to the first message. An adversary can launch a no-match attack against \(\pi'\) by inverting the bit \(b\) in the first protocol message. The oracles do not have matching conversations but compute the same session key, leading to a no-match attack. Since \(S\) is exploitable, this breaks the security of \(\pi'\). \(\blacksquare\)

This negative result highlights the composability issues of protocols under matching conversations.