Moti Yung, and Jianying Zhou (Eds.), Vol. 3089. Springer, Heidelberg, 220–232.
[31] Ik Rae Jeong, Jeong Ok Kwon, and Dong Hoon Lee. 2006. A Diffie-Hellman
Key Exchange Protocol Without Random Oracles. In CANS 06 (LNCS), David
Pointcheval, Yi Mu, and Kefei Chen (Eds.), Vol. 4301. Springer, Heidelberg, 37–54.
[32] Jonathan Katz and Yehuda Lindell. 2007. Introduction to Modern Cryptography.
[33] Kazukuni Kobara, SeongHan Shin, and Mario Strefler. 2009. Partnership in
key exchange protocols. In ASIACCS 09, Wanqing Li, Willy Susilo, Udaya Kiran
Tupakula, Reihaneh Safavi-Naini, and Vijay Varadharajan (Eds.). ACM Press,
161–170.
Chapman and Hall/CRC Press.
[34] Florian Kohlar, Sven Schäge, and Jörg Schwenk. 2013. On the Security of TLS-DH
and TLS-RSA in the Standard Model. Cryptology ePrint Archive, Report 2013/367.
(2013). http://eprint.iacr.org/2013/367.
[35] Hugo Krawczyk. 2005. HMQV: A High-Performance Secure Diffie-Hellman Pro-
tocol. In CRYPTO 2005 (LNCS), Victor Shoup (Ed.), Vol. 3621. Springer, Heidelberg,
546–566.
[36] Hugo Krawczyk, Kenneth G. Paterson, and Hoeteck Wee. 2013. On the Security
of the TLS Protocol: A Systematic Analysis. In CRYPTO 2013, Part I (LNCS),
Ran Canetti and Juan A. Garay (Eds.), Vol. 8042. Springer, Heidelberg, 429–448.
https://doi.org/10.1007/978-3-642-40041-4_24
[37] Brian A. LaMacchia, Kristin Lauter, and Anton Mityagin. 2007. Stronger Security
of Authenticated Key Exchange. In ProvSec 2007 (LNCS), Willy Susilo, Joseph K.
Liu, and Yi Mu (Eds.), Vol. 4784. Springer, Heidelberg, 1–16.
[38] Kristin Lauter and Anton Mityagin. 2006. Security Analysis of KEA Authenticated
Key Exchange Protocol. In PKC 2006 (LNCS), Moti Yung, Yevgeniy Dodis, Aggelos
Kiayias, and Tal Malkin (Eds.), Vol. 3958. Springer, Heidelberg, 378–394.
[39] Augustin P. Sarr, Philippe Elbaz-Vincent, and Jean-Claude Bajard. 2010. A New
Security Model for Authenticated Key Agreement. In SCN 10 (LNCS), Juan A.
Garay and Roberto De Prisco (Eds.), Vol. 6280. Springer, Heidelberg, 219–234.
[40] Sven Schäge Tibor Jager, Florian Kohlar and Jörg Schwenk. 2011. On the Security
of TLS-DHE in the Standard Model. Cryptology ePrint Archive, Report 2011/219.
(2011). http://eprint.iacr.org/2011/219.
A BRIEF OVERVIEW ON SECURITY MODELS
FOR AUTHENTICATED KEY EXCHANGE
With the so-called Bellare-Rogaway model, Bellare and Rogaway
have initiated the rigorous study of cryptographic models for key
agreement protocols in the 1990s. This model has become the basis
for many refined security models (e.g. [7, 29]). In 2001, Canetti
and Krawczyk introduced a new key exchange model [17] – today
known as the CK-model that additionally covers session state rev-
elations but does not require explicit authentication. It reflects a
wide range of practical attacks and has also become very popular.
In 2005, Krawczyk extended this model to also capture key imper-
sonation (KCI) security and weak forward secrecy. The resulting
model is often referred to as CKHMQV, or CK+, or simply the HMQV
model [35]. In 2007, LaMacchia et al. introduced an even further re-
fined model known as the eCK model for the analysis of two-party
key exchange protocols [37]. The eCK model captures the exposure
of ephemeral keys by using a dedicated EphemeralKey-query and
also allows the exposure of ephemeral secret keys of the Test-oracle
and its partner oracle. The eCK model captures a wide variety of
practical attacks and is used in many security proofs. Subsequently,
we will briefly recall the general setup. This is necessary when
illustrating our no-match attacks in Appendix B. In particular, we
stick to the term oracle to describe protocol instances run at a party.
We remark that many of models refer to such instances as sessions.
Let π be a security protocol. Suppose we have a set P1, . . . , Pn
of honest parties (as potential protocol participants), where each
honest party Pi has a long-term secret ski. We use π s
to denote
i
the s-th instance of a protocol run at a protocol participant Pi.
More intuitively, we will view π s
as an oracle of Pi. Each oracle
i
may either be an initiator or responder type oracle defining which
algorithms it is going to use to respond to incoming messages and
to compute the session key. Moreover, we will assume that each
oracle has an associated session state, including the intermediate
random values used in the computation of the session key. At the
same time, each oracle has access to the long-term secrets of Pi. In
most security models, security is defined in a security game that
is played between an adversary and a challenger. The adversaries
task is to distinguish the key computed by the Test-oracle from a
random key. We assume that the active adversary A is granted
access to Send, Reveal, Corrupt, EphemeralKey and Test-queries.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1356B DETAILED EXAMPLE OF A NO-MATCH
ATTACK
In the following we will in detail illustrate a concrete vulnerable
protocol and a corresponding no-match attack against it. We do
not provide detailed descriptions of the corresponding security
model here. For more information we instead refer to the original
papers. However, we remark that partnering is defined via (partial)
matching conversations.
The SIG(NAXOS) Protocol. For simplicity and concreteness, we
concentrate on the SIG(NAXOS) protocol (Figure 4) that relies on
the protocol compiler of Cremers and Feltz [20] when applied to
the NAXOS protocol [37].
Protocol Description.
• Setup: each party Pc has two independent valid long-term
secret/public key pairs, one key pair for the NAXOS protocol
(pkc = дxc , skc = xc), with c ∈ {i, j}, and one pair (pk
c ,
sig
c ) for a randomized and strongly secure digital signature
sig
sk
scheme SIG. Let H1:{0, 1}∗ → Zp and H2:{0, 1}∗ → {0, 1}κ
be two hash functions, where κ is a security parameter.
$← Zq, computes Γi =
• Party Pi selects a random number αi
дH1(αi,ski). Then, Pi computes a signature σi by evaluating
the probabilistic SIG.Sign algorithm under the private key
with internal random coins ri over input (Γi||Pj): σi =
sig
sk
i
SIG.Sign(sk
• Party Pj behaves similarly: it selects a random number αj
$←
Zq, computes Γj and the signature σj over Γj||Γi||Pi, and
sends (Γj, σj) to Pi.
• Computation of session key: Party Pi checks if it holds that:
, Γj||Γi||Pi , σj) = 1. If the check is passed, Pi
SIG.Vfy(pk
sig
i
computes the session key via the following equation: Ki, j =
H1(αi,ski)
H1(αi,ski)
H2(Γ
, i, j). Accordingly, Party Pj
ski
, Γ
j
j
j
H1(αj,skj)
computes Ki, j = H2(pk
skj
, Γ
i
i
, Γi||Pj). Finally, Pi sends (Γi, σi) to Pj.
H1(αj,skj)
, Γ
i
, i, j).
sig
i
, pk
No-Match Attack against the SIG(NAXOS) Protocol. In our no-
match attack described below the adversary A modifies message
σi via queries granted in the KCI security game. Moreover, we
choose π s
to be the Test-oracle. (We remark that the protocol is
i
also susceptible to a no-match attack that, very similarly, exploits
the power of the PFS security game. To this end the attacker can
substitute σj with a fresh signature and use π t
as the Test-oracle.)
j
• The adversary A makes a Corrupt(Pi)-query and obtains
the long-term private key of party Pi, sk
• According to the protocol specification, Party Pi computes
Γi = дH1(αi,ski). In the next step, Pi computes a signature σi
with internal random coins ri over Γi||Pj as follows: σi =
SIG.Sign(sk
• Since the adversary A controls all communication between
parties it can intercept and delete the message σi generated
by Pi. Then A computes a fresh signature σ∗ with internal
random coins r∗ (r∗ (cid:44) ri) such that σ∗ = SIG.Sign(sk
σi. Finally, A sends (Γi, σ∗) to Pj.
, Γi||Pj). Finally, Pi sends (Γi, σi) to Pj.
sig
i
sig
i
sig
i
.
, Γi||Pj) (cid:44)
• Party Pj behaves in the same way. Pj computes (Γj, σj) and
sends them to Pi.
• Computation of session key: parties Pi and Pj accept and
compute the same session key Ki, j.
• The adversary A queries Test(π s
i ) and gets Kb from π s
. Then,
A queries Reveal(π t
j ) and obtains the session key Ki, j. Note
that according to the definition of partnership π s
and π t
t
are not partnered since σ∗ (cid:44) σi. Now, A can easily check if
i
Kb = Ki, j.
i
C ROBUST COMPOSITION
We believe that our new definition of partnering not only fixes the
notion of matching conversations but that it provides a superior
notion of partnering. To further support this argument we isolate a
fundamental problem with matching conversations showing that
protocols secure under this partnering definition cannot provide
what we call robust composition. Roughly, this means that the pro-
tocol cannot be securely composed with independently generated
messages. This culminates in the odd situation that some protocols
may be secure under the matching conversations definitions when
analyzed in isolation but lose all security, when a single random
value is added to the message flow. An illustrative example is the
protocol compiler by Cremers and Feltz [20] (Appendix B) that aims
to increase the security of an input protocol by making it provide
forward secrecy. As detailed in Section 3.2, the resulting protocol is
vulnerable to a no-match attack even if the input protocol is secure
(for example, consider a protocol that relies on unique messages
and primitives only). This shows that the security of protocols ana-
lyzed in the MC-based definition depends on the context they are
used in, even if the context is independent from the protocol– a
theoretically highly unsatisfactory and counter-intuitive feature.
Fortunately, we can show that our new notion of partnering does
not suffer from this fundamental problems.
Definition C.1 (Robust Augmentation). Let π be a protocol (viewed
as the sequence of its messages). We say that protocol π ′ is a robust
augmentation of π if:
• the protocol messages of π form a subsequence (subproto-
col) of π ′, i.e. π ′ can be computed from π only by adding
messages to the protocol (either via appending new values to
existing messages flows or by adding entirely new messages
flows to the protocol) and
• the session key generated by π ′ is the session key that is
output by the subprotocol π.
Subsequently, we use π ′ − π to denote the additional messages
that π ′ contains besides the messages of π.
Definition C.2 (Weak Robust Composition). We say that a security
model S supports weak robust composition if for all protocols π
and every robust augmentation π ′ of π we have
• the additional messages π ′ − π are computed independently
of those of the protocol π
• if π is secure under S then π ′ is secure under S.
We are now ready to immediately prove the following theorem:
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1357SIG(NAXOS) Protocol
π s
i
pki = дxi , ski = xi, pk sig
i
, sk sig
i
π t
j
pkj = дxj , skj = xj, pk sig
j
, sk sig
j
$← Zq, Γi = дH1(αi ,ski)
, Γi ||Pj)
αi
σi = SIG.Sign(sk sig
i
$← Zq, Γj = дH1(αj ,skj)
αj
σj = SIG.Sign(sk sig
, Γj ||Γi ||Pi)
j
Γi, σi
Γj, σj
accept if
SIG.Vfy(pk sig
j
, Γj ||Γi ||Pi, σj) = 1
accept if
SIG.Vfy(pk sig
i
, Γi ||Pj, σi) = 1
Ki, j = H2(Γ
ski
j
, pk H1(αi ,ski)
j
H1(αi ,ski)
, Γ
j
, i, j)
Ki, j = H2(pk H1(αj ,skj)
i
skj
, Γ
i
H1(αj ,skj)
, Γ
i
, i, j)
Figure 4: Description of the SIG(NAXOS) Protocol
Theorem C.3. Any exploitable security model S that defines part-
nering via matching conversations cannot support weak robust com-
position.
Proof. Consider a protocol π that is secure under S. Let π ′ be a
robust augmentation of π that only adds a single random bit b to the
first message of the protocol. Then there exists an adversary that
can easily launch a no-match attack against π ′. All she has to do is to
slightly modify the messages sent between two oracles by inverting
the bit b in the first protocol message. Obviously, the oracles do not
have matching conversations, but they have computed the same
session key. This is a no-match attack and since S is exploitable
breaks the security of π ′.
□
This negative result on the composability of protocols under