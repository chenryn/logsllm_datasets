**notFoundHandler**
当在定义的路由的列表中找不到被调用的URL时，Slim就会使用这个处理程序。有了这个错误处理程序，当客户端用户调用不正确时，我们可以设置一个友好的API响应。这里有一个例子：
    $app = new SlimApp();
    $container = $app->getContains();
    $container['notFoundHandler'] = function($container) {
        return function ($request, $response) use ($container) {
            return $container['response']
                ->withStatus(404)
                ->withHeader('Content-Type', 'application/json')
                ->write(json_encode(['error' => 'Resource not valid']));
        };
    };
如果你不习惯使用PSR-7结构，那么代码可能会有点复杂，但是当你将其拆下来后会发现它其实很简单。本质上，如果调用不存在的URL，我们将返回一个HTTP状态为404
的对象response和一个值为“资源无效” 的JSON消息error：
    {
        error: "Resource not valid"
    }
然后Slim在端点未定义时内部使用此处理程序 – 你无需做其他任何工作。
**notAllowedHandler**
Slim使用的另一个特殊设置就是notAllowedHandler。当不允许调用端点的方法时，框架会使用此处理程序，比如使用GET请求去调用一个POST端点：
    $container['notAllowedHandler'] = function($container) {
        return function ($request, $response) use ($container) {
            return $container['response']
                ->withStatus(401)
                ->withHeader('Content-Type', 'application/json')
                ->write(json_encode(['error' => 'Method not allowed']));
        };
    };
它与上面的notFoundHandler非常相似，只是在响应中有不同的内容：401和“不允许的方法”的错误消息。
**errorHandler**
我想在这里需要提到的最后一个特殊的选项就是使用errorHandler。在我选择的应用程序结构中，我们将利用PHP的异常处理特性在出现错误时停止执行，并向用户报告错误。这样可以防止我们在我们的控制器内部直接输出JSON并在一些奇怪的地方做任何其他比较诡异的事情。如果发现错误，就应该立即返回，而不是继续往下执行。
该errorHandler比前面的例子更详细一点。示例代码如下：
    $container['errorHandler'] = function($container) {
        return function ($request, $response, $exception = null) use ($container) {
            $code = 500;
            $message = 'There was an error';
            if ($exception !== null) {
                $code = $exception->getCode();
                $message = $exception->getMessage();
            }
            // Use this for debugging purposes
            /*error_log($exception->getMessage().' in '.$exception->getFile().' - ('
                .$exception->getLine().', '.get_class($exception).')');*/
            return $container['response']
                ->withStatus($code)
                ->withHeader('Content-Type', 'application/json')
                ->write(json_encode([
                    'success' => false,
                    'error' => $message
                ]));
        };
    };
现在，这个处理程序应该看起来很熟悉了，具有相同的功能签名和返回相同的响应对象。但有一些差异，主要是处理例外的情况。你会注意到$exception在内部闭包中有一个新的参数。这是通过Slim的内部功能传递给了错误处理程序，因此我们可以评估抛出的异常。在我们的例子中，我们设置了一个默认值$code，如果未设置异常（并非所有错误都是异常）则为$message，然后如果设置了异常，则会更新这些值。在我们的设置中，我们将使用异常的“代码”值作为我们返回的HTTP状态代码。这让我们控制了控制器内部的response对象然后使用此代码返回该对象，该异常中提供的消息和一个值为false的success对象。在我们的API中使用这个success对象值的返回结构都是一致的，并且将与每个响应一起返回（保存错误响应）。在我们的控制器中，我们可以抛出异常，这样errorHandler就可以正确地处理它们了：
    $app = new SlimApp();
    $app->get('/', function() {
        throw new Exception("You shouldn't have done that!", 418);
    });
    $app->run();
这将导致如下的响应内容：
    {
        success: false,
        error: "You shouldn't have done that!"
    }
响应中的HTTP状态码将在路由中的异常throw中指定。最后，你还可以使用自定义的异常，通过在类中定义它们，并使自定义的异常更具可重用性（例如CouldNotSaveRecord或InvalidInput异常）。
**最后一件事**
我想在转到本系列的下一部分之前，做最后一次更新。在我们目前的设置中，根路径/响应了一些纯文本的“工作”。这不是很友好的API，现在我们的其他错误处理程序是支持API构建的，当然你也可以改变这一点。Slim的请求/响应处理可以使这种改变变得很容易。我们只是返回一个Response对象作为一个新的实例这与错误处理程序的输出类似：
    $app->get('/', function() {
        return $response->withHeader('Content-Type', 'application/json')
            ->write(json_encode(['message' => 'It works!']));
    });
现在，当我们访问到根路径的路由/时，响应将返回一个内容类型为application/json的JSON内容：
    {
        message: "It works!"
    }
**现在，安装完成…**
在本文中，我介绍了一些设置Slim框架的基础知识，创建一个应用程序并配置几个处理程序，以帮助后续的事情变得更简单。还有其他我们将来会遇到的配置选项，但这就是你开始的地方。
为了帮助你更轻松地跟踪本系列的文章和每次创建的代码，我将为GitHub存储库中的每个部分添加一个分支。分支中的代码将是每篇文章的最终结果，所以希望到本系列文章的最后，我们将有一个完整的API示例，你将来可以使用它作为构建安全API的指导。
存储库位于此处：[https](https://github.com/psecio/secure-api):[//github.com/psecio/secure-api](https://github.com/psecio/secure-api)。
所以，让我们继续构建这个项目，并尝试一些请求示例和我们在本文中提到的例子。
**  
**
**资源**
[Slim 框架](http://slimframework.com/)
[第一部分](https://websec.io/2017/04/14/Build-Secure-API-Part1.html)