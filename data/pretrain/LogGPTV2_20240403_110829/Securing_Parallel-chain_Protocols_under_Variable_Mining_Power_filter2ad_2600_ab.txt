by examining the view of all honest parties and is not a quantity that
is accessible to any of the honest parties individually. We make the
“honest majority” assumption, i.e., tr b0, then it should vote for an arbitrary number of pro-
poser blocks B1,B2,···,Bn, each covering (a1,b1], (a2,b2], ···,
(an,bn], such that ai <bi−1 <bi for all 1≤ i ≤ n and bn =b∗.
Upon collecting this content, the miner tries to generate a block
with target according to the proposer parent via proof-of-work (M1).
Once a valid nonce is found, the output of the hash is determin-
istically mapped to either a voter block in one of the m trees or a
proposer block (lines 19-25 in Algorithm 2).
While mining, nodes may receive blocks from the network, which
are processed in much the same way as Bitcoin. For a received voter
block to be valid, the chain difficulty of its proposer parent must be
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1704at least that of the proposer parent of its voter parent (M2). Upon
receiving a valid voter block, the miner updates the heaviest chain if
needed, and updates the vote counts accordingly. Upon receiving a
valid proposer block B with chain difficulty higher than the previous
heaviest chain, the miner makes B the new proposer parent, and
updates all m voter trees to vote for chain difficulties until B.
Ledger formation rule. Note that all the voters on one voter chain
may cover overlapping intervals. So we first sanitize them into
disjoint intervals: For n consecutive valid votes (a1, b1], (a2, b2],
··· , (an,bn] on a voter chain, we sanitize them into new intervals
(a1,b1],(b1,b2],··· ,(bn−1,bn]. In this way, we make sure that each
real-valued difficulty d is voted at most once by each voter chain,
hence d can receive at most m votes. Since voter blocks vote for
each difficulty value rather than level, the ledger is also generated
based on difficulty values (M3). Let vi(d) be the proposer block with
interval containing d voted by the heaviest chain on the i-th voter
tree. Let ℓ(d) be the leader block of difficulty d, which is the plurality
of the set {vi(d)}m
i =1. For each proposer block Bp in the proposer
tree, define д(Bp) as
{d : ℓ(d) = Bp}.
д(Bp) = inf
d ≥0
(1)
Note that if {d : ℓ(d) = Bp} is empty, then д(Bp) = ∞. Finally, by
sorting all proposer blocks by д(·), we get the leader sequence of the
proposer blocks. A concrete example of this ledger formation rule is
shown in Figure 5.
Operationally, we only need to count votes for intervals in the
atomic partition of all intervals covered by the proposer blocks. Af-
ter finding the leader block for each atomic interval, we can get the
leader sequence by sanitizing the repeated proposer blocks.
Main result: persistence and liveness of Prism (Informal) We
show that Prism generates a transaction ledger that satisfies persis-
tence andliveness inavariableminingpowersettinginTheorem6.17.
4 OHIE
4.1 Fixed Difficulty Algorithm
OHIE [27] composes m parallel instances of Bitcoin longest chains.
Each chain has a distinct genesis block, and the chains have ids from
0 to m−1. Similar to Prism, OHIE also uses cryptographic sortition
to ensure that miners extend the m chains concurrently and they do
not know which chain a new block will extend until the PoW puzzle
is solved.
Each individual chain in OHIE inherits the proven security prop-
erties of longest chain protocol [11], and all blocks on the m chains
confirmedbythelongestchainconfirmationrule(eg.thek-deeprule)
are called partially-confirmed. However, this does not yet provide
a total ordering of all the confirmed blocks across all the m chains in
OHIE. The goal of OHIE is to generate a sequence of confirmed blocks
(SCB) across all m parallel chains. Once a partially-confirmed block
is added to SCB, it becomes fully-confirmed.
In OHIE, each block has two additional fields used for ordering
blocks across chains, denoted as a tuple (rank,next_rank). In SCB,
the blocks are ordered by increasing rank values, with tie-breaking
based on the chain ids. For any new block B that extends from its
parent block denoted as parent(B), we directly set B’s rank to be the
same as parent(B)’s next_rank. A genesis block always has rank
of 0 and next_rank of 1. Properly setting the next_rank of a new
Figure 5: An example of the ledger formation rule in Prism.
For simplicity, we only have one voter chain in the example.
The number inside each proposer block is the block diffi-
culty. In this example, the heaviest proposer chain has chain
difficulty 5. We find the leader block ℓ(d) for each difficulty
level d in (0, 5] according to the votes (as shown in the first
table). Then we find the grade д(·) of each proposer block
by Equation (1) as shown in the second table. Finally, the
proposer blocks are ordered by their grades.
block B is the key design in OHIE. Let B be the set of all tips of the
m longest chains before B is added to its chain, then the next_rank
of B is given by
next_rank(B) =max{rank(B)+1, max
B′∈B{next_rank(B
′)}}.
If B copies the next_rank of a block B′ on a chain with different id,
then a reference link to B′ (or the hash of B′) is added into B. In the ex-
ampleofFigure6,whenB11ismined,B04hasthehighest next_rank,
so B11 copies the next_rank of B04 and has a reference link to B04.
OHIE generates a SCB in the following way. Consider any given
honest node at any given time and its local view of all the m chains.
Letyi bethe next_rankofthelastpartially-confirmedblockonchain
i in this view. Let confirm_bar←mink
i =1yi. All partially-confirmed
blocks whose rank is smaller than confirm_bar are deemed fully-
confirmed and included in SCB. Finally, all the fully-confirmed
blocks will be ordered by increasing rank values, with tie-breaking
favoring smaller chain ids. As an example, in Figure 6, we have
y0 = 4,y1 = 7,y2 = 9, hence confirm_bar is 4. Therefore, the 8
partially-confirmed blocks whose rank is below 4 become fully-
confirmed.
4.2 Variable Difficulty Algorithm
Following the same meta-principle of designing variable difficulty
Prism, we can also turn the fixed difficulty OHIE into a variable
difficulty algorithm by making the following changes.
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1705to its chain, then the next_rank of B is given by
B′∈B{next_rank(B
next_rank(B) =max{rank(B)+diff(B), max
′)}}.
If B copies the next_rank of a block B′ on a chain with differ-
ent id, then a reference link to B′ (or the hash of B′) is added
into B. Note that B′ may be different from B’s chain 0 parent,
eg. B21 in Figure 7. We point out that this design is not neces-
sary for the security analysis, but it is a very natural choice.
We refer the reader to Appendix G of [25] for a pseudocode of the
algorithm.
Main result: persistence and liveness of OHIE (Informal) We
show that OHIE generates a transaction ledger that satisfies persis-
tence and liveness in a variable mining power setting in Appendix
D of [25].
5 FRUITCHAINS
5.1 Fixed Difficulty Algorithm
The FruitChains protocol was developed in order to solve the selfish
mining problem and develop incentives which are approximately
a Nash equilibrium. A key underlying step in FruitChains is to en-
sure that a node that controls a certain fraction of mining power
receives reward nearly proportional to its mining power, irrespective
of adversarial action. FruitChains runs an instance of Nakamoto
consensus but instead of directly putting the transactions inside the
blockchain, the transactions are put inside “fruits” and fruits are
included by blocks. Mining fruits also requires solving some PoW
puzzle. Similar to Prism and OHIE, the FruitChains protocol also
uses cryptographic sortition to ensure that miners mine blocks and
fruits concurrently and they do not know the type of the blocks until
the puzzle is solved. Additionally, a fruit is required to “hang” from
a block which is not too far from the block which includes the fruit.
In FruitChains, each of the fruit will have two parent blocks, we
call them fruit parent and block parent: the fruit parent is a recently
stabilized/confirmed block that the fruit is hanging from; the block
parent should be the tip of the longest chain. A block will also have
a fruit parent because the fruit mining and block mining are piggy-
backed atop each other, but a block actually does not care about this