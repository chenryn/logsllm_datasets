# 三、使用 Docker 映像
在本章中，我们将介绍以下食谱:
*   从容器创建映像
*   使用 Docker 集线器创建帐户
*   登录和退出 Docker 映像注册表
*   将映像发布到注册表
*   看着映像的历史
*   移除映像
*   导出映像
*   导入映像
*   使用 Dockerfile 构建映像
*   构建 Apache 映像 Dockerfile 示例
*   设置私有索引/注册表
*   自动化构建——使用 GitHub 和 Bitbucket
*   创建自定义基础映像
*   使用基础映像创建最小映像
*   分多个阶段构建映像
*   可视化映像层次结构
# 介绍
Docker 映像是 Docker 启发的容器化范例的基本构件。正如您已经知道的，Docker 容器是从 Docker 映像创建的。根据您的应用需求，您可以选择使用 Docker 映像创建复杂的服务，这些映像由 Docker 或第三方的人员构建和提供。如果现有映像不符合您的要求，您也可以扩展现有映像或自定义构建您自己的映像。
在本章中，我们将向您介绍 Docker Hub，并向您展示如何通过 Docker Hub 共享映像以及如何托管您自己的 Docker 注册表。我们还将向您展示构建自己形象的不同方法，以及一些 Docker 形象管家操作。
We are using Ubuntu 18.04 as our primary environment on which to run the z=zx. They should also work with other environments.
# 从容器创建映像
有几种方法可以创建映像。一种是在容器内手动进行更改，然后提交映像。另一种是使用 Dockerfile 构建一个。在这个配方中，我们将查看前一个配方，并在本章后面查看 Dockerfiles。
当我们开始一个新的容器时，一个读/写层被附加到它上面。如果我们不保存它，这层就会被破坏。在本食谱中，我们将学习如何保存该图层，并使用`docker container commit`命令从运行或停止的容器中制作新映像。以下是`docker container commit`命令的语法:
```
    $ docker container commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
```
# 准备好
确保 Docker 守护程序正在运行，并且可以访问 Ubuntu 映像。
# 怎么做...
请执行以下步骤:
1.  让我们使用`docker container run`命令从`ubuntu`映像开始一个容器:
![](img/9832cec5-bf56-494a-8d96-b015f087d777.png)
2.  启动容器后，从容器提示发出`apt-get update`同步包列表，如下图截图所示:
![](img/2c0854fd-49e6-4807-bb0c-0f65b90c45db.png)
3.  使用`apt-get install`命令安装`apache2`包:
![](img/d5c25b6c-4c2e-4e31-98b3-569f05f5581a.png)
4.  现在，打开另一个终端，使用`docker container run`命令创建一个映像:
![](img/70c03a9d-0527-4a38-ad00-f7f8ec3b19a4.png)
如您所见，新映像现在被提交到本地存储库，其中`myapache2`作为名称，`latest`作为标签。
# 它是如何工作的...
在[第 1 章](01.html)、*介绍和安装*中，我们了解到 Docker 映像是分层的，并且每一层都堆叠在其父映像之上。当我们启动一个容器时，会创建一个读/写临时文件系统层。通过`apt-get`更新和`install`命令对文件系统的更改(即文件的添加、修改或删除)保留在这个读/写临时文件系统层中。如果我们停止并删除该容器，与该容器相关联的短暂层将被移除，本质上，我们将丢失应用于该容器的所有更改。
在这个配方中，我们通过使用`docker container commit`命令来保持容器的短暂层。实际上，`commit`操作会创建另一个映像层，并将其与其他映像一起保存在 Docker 宿主中。
# 还有更多...
`docker container diff`命令列出了容器文件系统映像中的所有更改，如以下代码所示:
```
    $ docker diff 6289e32373bf
    ...OUTPUT SNIPPED...
    C /var/log
    C /var/log/alternatives.log
    A /var/log/apache2
    A /var/log/apache2/access.log
    A /var/log/apache2/error.log
    A /var/log/apache2/other_vhosts_access.log
    ... OUTPUT SNIPPED... 
```
我们可以看到输出的每个条目前都有一个前缀。以下是这些前缀的列表:
*   `A`:这是添加了文件/目录的时候
*   `C`:用于文件/目录被修改的情况
*   `D`:用于文件/目录被删除的情况
默认情况下，容器在提交时会暂停。可以通过传递`--pause=false`来改变其行为进行提交。
# 请参见
参见`docker container commit`的`help`选项:
```
      $ docker container commit --help
```
更多信息，可在 Docker 网站[https://docs . Docker . com/engine/reference/command line/container _ commit/](https://docs.docker.com/engine/reference/commandline/container_commit/)阅读文档。
# 使用 Docker 集线器创建帐户
Docker Hub 是一个基于云的公共注册服务，用于托管公共和私有映像、共享它们以及与其他人协作。它与 GitHub 和 Bitbucket 集成，可以触发自动化构建。
要在 Docker Hub 中托管您的映像，您需要创建您的 Docker ID。这使您能够在 Docker Hub 中创建任意数量的公共存储库。
Docker Hub also gives you one free private repository. If you need more than one private repository, you can upgrade to a paid plan. A repository can hold different versions of an image.
# 准备好
要注册，您需要访问任何标准的网络浏览器。
# 怎么做...
请执行以下步骤:
1.  转到 [https://hub.docker.com](https://hub.docker.com) :
![](img/14856ffa-b19b-4d7d-814e-6c96e8a9bac2.png)
2.  在“注册”部分的字段中输入您首选的 Docker ID、有效的电子邮件地址和密码，然后单击“注册”按钮。
3.  成功创建帐户后，Docker Hub 将显示以下信息:
![](img/93b85335-30cd-4efa-99ac-79f97b26bc87.png)
4.  As shown in the preceding screenshot, your account is not activated yet. In order to activate your account, you have to confirm your email by pressing the Confirm Your Email button in the email from Docker that you will have received in the inbox of the email account that you provided, as shown in the following screenshot:
    ![](img/f51b37ef-a03e-4737-8e95-bb8350ece53c.png)
5.  一旦您确认您的电子邮件，您将登陆欢迎使用 Docker 页面，如下图所示:
![](img/7b282484-4fd9-4d6d-8bd6-788de9e2c82e.png)
现在，您已经成功创建并激活了您的 Docker Hub 帐户。
# 它是如何工作的...
前面的步骤已经为您创建了一个 Docker Hub 帐户。帐户创建后，您将收到一封确认电子邮件，您需要通过该邮件确认您的身份。
# 请参见
*   Docker 网站上的文档:
    *   [https://docs . docker . com/docker 中枢](https://docs.docker.com/docker-hub)
    *   [https://docs . docker . com/docker-hub/accounts](https://docs.docker.com/docker-hub/accounts)
    *   [https://hub . docker . com/help](https://hub.docker.com/help)
# 登录和退出 Docker 映像注册表
在你穿越容器化世界的旅程中，你经常会发布你的映像供公众使用，或者使用 Docker 注册表私下共享映像。要将映像推送到公共存储库，您必须登录到 Docker 注册表，并且您必须是该存储库的所有者。在私有存储库的情况下，拉和推都是允许的，但是只允许您登录一次。在这个食谱中，我们将看到如何登录和注销 Docker 注册表。
# 准备好
请确保您拥有有效的 Docker ID 或 GitLab 帐户。
# 怎么做...
`docker login`命令允许您同时登录多个 Docker 注册表。类似地，`docker logout`命令允许您从指定的服务器注销。以下是 Docker 登录和注销命令的语法:
```
$ docker login [OPTIONS] [SERVER]
$ docker logout [SERVER]
```
默认情况下，`docker login`和`docker logout`命令都假定[https://hub.docker.com/](https://hub.docker.com/)为默认注册表，但这可以更改。
让我们通过以下实验来进一步了解这个过程，如下图所示:
*   登录到默认的 Docker 注册表
*   登录位于[https://about.gitlab.com/](https://about.gitlab.com/)的注册中心
*   读取持久化的登录详细信息
*   从所有这些区域注销
![](img/0ab854fb-9d92-4e07-81d5-9b4b6e1194c2.png)
# 它是如何工作的...
在这个食谱中，我们使用`docker login`命令登录了两个注册表，然后探索了登录信息是如何存储的。我们还使用`base64`来检索登录的用户标识，而它也显示了存储的密码。然后我们继续使用`docker logout`命令从两个注册表中注销。
# 还有更多...
默认情况下，`docker login`命令交互提示用户输入用户名和密码。您可以通过使用`-u`或`--username`选项提供用户名，使用`-p`或`--password`选项提供密码，将此交互行为更改为批处理模式。
In the preceding recipe, the password stored in the `$HOME/.docker/config.json` file can be easily decoded using `base64`. This is not desirable in all environments, however; in other scenarios, you could resort to tools such as `docker-credential-helpers`.
# 请参见
*   `docker login`和`docker logout`选项的`help`选项:
```
        $ docker login -help
        $ docker logout --help 
```
*   Docker 网站上的文档:
    *   [https://docs.docker.com/engine/reference/commandline/login/](https://docs.docker.com/engine/reference/commandline/login/)
    *   [https://docs . docker . com/engine/reference/command line/注销/](https://docs.docker.com/engine/reference/commandline/logout/)
*   Docker 凭据助手的 GitHub 存储库:
    *   [https://github.com/docker/docker-credential-helpers](https://github.com/docker/docker-credential-helpers)
# 将映像发布到注册表
正如前面提到的方法，Docker 映像注册表充当存储和共享映像的中心。在这个食谱中，我们将看到如何使用`docker image push`命令将映像推送到注册表。在本章的后面，我们将介绍如何设置私有注册表。
# 准备好
确保您已成功登录 hub.docker.com，因为在本食谱中，我们将向 hub.docker.com 推送映像。或者，您可以使用私有或第三方 Docker 映像注册表。
# 怎么做...
以下是用于将 Docker 映像推送到注册表的命令的两种语法:
```
    $ docker image push [OPTIONS] NAME[:TAG]
    $ docker push [OPTIONS] NAME[:TAG] 
```
要将映像推送到 Docker 注册表，请执行以下步骤:
1.  首先，使用`docker image tag`命令在 Docker 集线器中为适当的用户或组织标记映像，如以下代码所示:
```
        $ docker image tag myapache2 cookbook/myapache2 
```
这里，映像被标记为`cookbook/myapache2`，因为在下一步中，我们将把这个映像推送给 Docker Hub 用户`cookbook`。
2.  现在，让我们使用`docker image push`将映像推送到 Docker Hub，如下图截图所示:
![](img/478ffe9b-96c2-4e6f-befa-70e56f4703df.png)
3.  将映像推送到 Docker Hub 后，我们可以登录 Docker Hub 并验证映像，如下图所示:
![](img/1b881b82-0881-4027-a062-3487ed8c6b5c.png)
# 它是如何工作的...
`docker image push`命令识别组成要推送的映像的所有映像层，并检查这些映像是否已经在注册表中可用。然后`push`命令上传注册表中不存在的所有映像。
# 还有更多...
假设您想要将映像推送到本地托管的注册表中。为此，您首先需要用注册表主机名或运行注册表的端口号标记映像，然后推送映像。
比如说我们的注册表配置在`shadowfax.example.com`上。要标记映像，我们将使用以下命令:
```
    $ docker tag myapache2 \ 
       shadowfax.example.com:5000/cookbook/myapache2
```
然后，要推送映像，我们将使用以下命令:
```
       $ docker push shadowfax.example.com:5000/cookbook/myapache2  
```
# 请参见
*   `docker image push`的`help`选项:
```
        $ docker push --help
```
*   Docker 网站上的文档:
    *   [https://docs . docker . com/engine/reference/command line/image _ push/](https://docs.docker.com/engine/reference/commandline/image_push/)
# 看着映像的历史
对我们来说，有必要对我们正在使用的 Docker 映像有更深的理解。`docker image history`命令帮助我们找到映像中的所有图层、其映像 ID、创建时间、创建方式、大小以及与该图层相关的任何附加注释。
# 准备好
在我们开始下一个食谱之前，首先拉或导入任何 Docker 映像。
# 怎么做...
要查看映像的历史记录，请考虑以下语法:
```
    $ docker image history [OPTIONS] IMAGE  
```
下面是一个使用前面语法的例子:
```
    $ docker image history myapache2 
```
![](img/26845fb6-49b0-40e1-b763-1b0066a7ad3f.png)