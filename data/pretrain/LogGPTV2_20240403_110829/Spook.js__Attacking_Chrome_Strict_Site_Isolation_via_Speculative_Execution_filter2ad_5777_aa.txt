title:Spook.js: Attacking Chrome Strict Site Isolation via Speculative Execution
author:Ayush Agarwal and
Sioli O'Connell and
Jason Kim and
Shaked Yehezkel and
Daniel Genkin and
Eyal Ronen and
Yuval Yarom
1
1
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Spook.js: Attacking Chrome Strict Site Isolation via
Speculative Execution
Ayush Agarwal∗
University of Michigan
PI:EMAIL
Shaked Yehezkel
Tel Aviv University
PI:EMAIL
Sioli O’Connell∗
University of Adelaide
PI:EMAIL
Daniel Genkin†
Eyal Ronen
Jason Kim†
Georgia Institute of Technology
PI:EMAIL
Yuval Yarom‡
Georgia Institute of Technology
PI:EMAIL
Tel Aviv University
PI:EMAIL
University of Adelaide
PI:EMAIL
Abstract—The discovery of the Spectre attack in 2018 has sent
shockwaves through the computer industry, affecting processor
vendors, OS providers, programming language developers, and
more. Because web browsers execute untrusted code while
potentially accessing sensitive information, they were considered
prime targets for attacks and underwent signiﬁcant changes to
protect users from speculative execution attacks. In particular,
the Google Chrome browser adopted the strict site isolation policy
that prevents leakage by ensuring that content from different
domains is not shared in the same address space.
The perceived level of risk that Spectre poses to web browsers
stands in stark contrast with the paucity of published demon-
strations of the attack. Before mid-March 2021, there was no
public proof-of-concept demonstrating leakage of information
that is otherwise inaccessible to an attacker. Moreover, Google’s
leaky.page, the only current proof-of-concept that can read such
information, is severely restricted to only a subset of the address
space and does not perform cross-website accesses.
In this paper, we demonstrate that the absence of published
attacks does not indicate that the risk is mitigated. We present
Spook.js, a JavaScript-based Spectre attack that can read from
the entire address space of the attacking webpage. We further
investigate the implementation of strict site isolation in Chrome,
and demonstrate limitations that allow Spook.js to read sensitive
information from other webpages. We further show that Spectre
adversely affects the security model of extensions in Chrome,
demonstrating leaks of usernames and passwords from the
LastPass password manager. Finally, we show that the problem
also affects other Chromium-based browsers, such as Microsoft
Edge and Brave.
I. INTRODUCTION
Recent computer trends have signiﬁcantly changed the way
we use and distribute software. Rather than downloading in-
stallation packages, users now prefer to “live in their browser”,
where software is seamlessly downloaded, compiled, opti-
mized, and executed merely by accessing a URL. Despite its
humble origins, the browser is no longer a simple GUI for
rendering text documents, but instead is more akin to a “mini
operating system”, complete with its own execution engines,
* Equal contribution joint ﬁrst authors.
† Work partially done while afﬁliated with the University of Michigan.
‡ Work partially done while also afﬁliated with Data61.
compilers, memory allocators, and API calls to underlying
hardware features. Perhaps most importantly, the browser has
evolved into a highly trusted component in almost any user-
facing computer system, holding more secret data than any
other computer program except the operating system.
Concurrently with the rise in importance of the browser,
the rapid growth in complexity of computer systems over
the past decades has resulted in numerous hardware security
vulnerabilities [2, 6, 12, 21, 22, 24, 26, 27, 29, 48, 49, 50, 58,
69, 70, 71, 74, 75, 77]. Here, the attacker artiﬁcially induces
contention on various system resources, aiming to cause faults
or recover information across security boundaries. Perhaps
the most known incident of this kind was the discovery of
Spectre [31] and Meltdown [36], which Google dubbed as a
watershed moment in computer security [41].
Recognizing the danger posed by browser-based transient-
execution attacks, Google has attempted to harden Chrome
against Spectre. Introducing the concept of strict site isola-
tion [56], Google’s main idea is to isolate websites based on
their domains, rendering mutually distrusting pages in different
memory address spaces. Aiming to further hinder memory
exposure attacks, Google elected to keep its JavaScript code
in 32-bit mode, effectively partitioning the renderer’s address
space into multiple disjoint 4 GB heaps. It is hoped that even
if a memory disclosure vulnerability is exploited, the use of
32-bit pointers will conﬁne the damage to a single heap [19].
Thus, given the heuristic nature of these countermeasures, in
this paper we ask the following questions:
Is Chrome’s strict site isolation implementation sufﬁcient to
mitigate browser-based transient-execution attacks? In partic-
ular, how can an attacker mount a transient execution attack
that recovers sensitive information, despite Google’s strict site
isolation and 32-bit sandboxing countermeasures?
A. Our Contribution
In this paper, we present Spook.js, a new transient-execution
attack capable of extracting sensitive information despite
Chrome’s strict site isolation architecture. Moreover, Spook.js
can overcome Chrome’s 32-bit sandboxing countermeasures,
© 2022, Ayush Agarwal. Under license to IEEE.
DOI 10.1109/SP46214.2022.00034
699
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
reading the entire address space of the rendering process. Ad-
ditionally, we demonstrate a gap between Chrome’s effective
top-level plus one (eTLD+1)-based consolidation policy and
the same-origin policy typically used for web security. The
discrepancy can result in mutually distrusting security domains
residing in the same address space, allowing one subdomain
to attack another. In addition, we show that Chromium-based
browsers such as Edge and Brave are also vulnerable to
Spook.js. We further show that Firefox’s strict site isolation
follows a similar eTLD+1 consolidation policy, but we leave
the task of porting Spook.js to Firefox to future work.
Escaping 32-Bit Boundaries via Speculative Type Confu-
sion.
Although it executes in 64-bit mode, Chrome uses
32-bit addressing for its JavaScript architecture. This limits
the information available to most Spectre-based techniques, as
even a (speculative) out-of-bounds array index cannot escape
the 4 GB heap boundary. To overcome this issue, Spook.js
uses a type confusion attack that allows it
the
entire address space. At a high level, our attack confuses the
execution engine to speculatively execute code intended for
array access on a tailored malicious object. The malicious
object is designed to place attacker-controlled ﬁelds where the
code expects a 64-bit pointer, allowing a speculative access to
arbitrary addresses. To the best of our knowledge, this is the
ﬁrst use of a type confusion attack to achieve pointer widening.
Avoiding Deoptimization Events via Speculative Hiding.
Even if a type confusion attack is successful, the type of the
malicious object does not match the expected array type. In
response to such a mismatch, Chrome deoptimizes the array
access code which Spook.js exploits, preventing subsequent
applications of the attack. We overcome this issue by perform-
ing the entire type confusion attack under speculation, running
the attack inside a mispredicted if statement.
to target
Consequently, Chrome is completely oblivious to the type-
confusion attack and its type mismatch, and does not deop-
timize the code used for array access. This allows us to run
our attack across multiple iterations, reading a large amount
of data from the address space of the rendering process.
Finally, while this speculative hiding technique suggested in
past works [9, 18, 36, 40], to the best of our knowledge this
is the ﬁrst application of this technique for hiding browser
deoptimization events.
Applicability to Multiple Architectures. With the basic
blocks of our attack in place, we proceed to show the feasibil-
ity of Spook.js across multiple architectures, including CPUs
made by Intel, AMD, and Apple. For Intel and Apple, we
ﬁnd that Spook.js can leak data at rates of around 500 bytes
per second, with around 96% accuracy. For AMD, we obtain
similar leak rates assuming a perfect L3 eviction primitive
for AMD’s non-inclusive cache hierarchy, the construction of
which we leave to future work.
Security Implications of eTLD+1 Based Consolidation.
Having established the feasibility of reading arbitrary ad-
dresses from Chrome’s rendering processes, we now turn our
attention to the eTLD+1 address space consolidation policy.
Rather than using the same-origin policy, which considers two
resources to be mutually trusting if their entire domain names
match, Chrome uses a more relaxed policy that consolidates
address spaces based on their eTLD+1 domains.
We show that this difference is signiﬁcant, demonstrating
how a malicious webpage (e.g., a user’s homepage) located
on some domain can recover information from login-protected
domain pages displayed in adjacent tabs. Here, we show that
a personal page uploaded to a university domain can recover
login-protected information from the university HR portal
displayed in adjacent tabs, including contact information, bank
account numbers, and paycheck data. Going beyond displayed
information, we show how Spook.js can recover login creden-
tials both from Chrome’s built-in password manager and from
LastPass, a popular third-party extension.
Exploiting Unintended Uploads. Tackling the case where a
malicious presence on a domain is not possible, we show that
user-uploaded cloud content is often automatically transferred
between different domains of the same provider. Speciﬁcally,
we show how content uploaded to a google.com domain is
actually stored by Google on googleusercontent.com,
where it can be consolidated with personal webpages created
on Google Sites. Empirically demonstrating this attack, we
show the recovery of an image uploaded to a google.com
domain through a malicious Google Sites webpage.
Exploiting Malicious Extensions.
Aside from website
consolidation, we port Spook.js into a malicious Chrome ex-
tension which requires no permissions. We show that Chrome
fails to properly isolate extensions, allowing one extension to
speculatively read the memory of other extensions. We empir-
ically demonstrate this on the LastPass extension, recovering
both website-speciﬁc credentials as well as the vault’s master
password (effectively breaching the entire account). Because
the problem stems from the browser policy, it is not speciﬁc to
LastPass and is likely to affect other password managers and
extensions. In response to our disclosure, Google introduced
the option to avoid consolidating extensions [14].
Summary of Contributions.
following contributions:
• We weaponize speculative execution attacks on the Chrome
browser, demonstrating Spook.js, an attack that can read
from arbitrary addresses within the rendering process’s
address space (Section IV).
In this paper we make the
• We explore the limitations of Chrome’s strict site isolation
and demonstrate that consolidating websites into the same
address space is risky, even when performed only in very
restricted scenarios (Section V).
• We study the implications of Spook.js on the security model
of extensions in Chrome. We demonstrate that an unprivi-
leged attacker can recover the list of usernames and used