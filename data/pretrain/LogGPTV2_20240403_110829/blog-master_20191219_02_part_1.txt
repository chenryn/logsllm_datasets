## PostgreSQL 阿里云rds pg发布高维向量索引，支持图像识别、人脸识别 - pase 插件, 以及ivfflat,hnsw搜索算法说明  
### 作者                                                                          
digoal                                                                                                                   
### 日期                                                                                                                   
2019-12-19                                                                                                               
### 标签                                                                                                                   
PostgreSQL , pase , 图像识别 , imgsmlr , cube , hnsw , ifflat     
----                                                                                                                   
## 背景         
[直播回放](https://yq.aliyun.com/live/1832)    
[官方文档](https://help.aliyun.com/document_detail/147837.html)     
市面上支持相似搜索的插件包括 imgsmlr , cube , pg_similarity等，我写过一些相关的文章介绍：    
[《PostgreSQL 多维、图像 欧式距离、向量距离、向量相似 查询优化 - cube,imgsmlr - 压缩、分段、异步并行》](../201811/20181129_01.md)      
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 3 - citus 8机128shard (4亿图像)》](../201809/20180904_04.md)      
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)      
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 1 - 单机单表 (4亿图像)》](../201809/20180904_02.md)      
[《PostgreSQL 相似搜索插件介绍大汇总 (cube,rum,pg_trgm,smlar,imgsmlr,pg_similarity) (rum,gin,gist)》](../201809/20180904_01.md)      
[《PostgreSQL 多维空间几何对象 相交、包含 高效率检索实践 - cube》](../201810/20181015_01.md)      
[《PostgreSQL 相似人群圈选，人群扩选，向量相似 使用实践 - cube》](../201810/20181011_01.md)      
[《PostgreSQL cube 插件 - 多维空间对象》](../201709/20170902_01.md)      
[《17种文本相似算法与GIN索引 - pg_similarity》](../201705/20170524_01.md)      
[《从相似度算法谈起 - Effective similarity search in PostgreSQL》](../201612/20161222_02.md)      
cube支持100维度(通过修改头文件可以扩展维度cubedata.h, #define CUBE_MAX_DIM (100))，存储采用float8[]。imgsmlr支持16个维度，采用float4[]。      
在图像识别领域，特别是人脸识别领域要求更高的维度，才能有更精确的查询效果。    
pase是阿里云rds pg推出的一款支持512维的高维向量搜索插件，支持ivfflat和hnsw两种向量存储算法，支持欧式距离、余弦距离、内积等多重距离算法。查询效率也非常高。    
## rds pg pase插件用法介绍    
目前pase插件支持rds pg 11的版本，未来会覆盖所有主流的pg版本。    
1、创建rds pg 11云盘版实例。    
https://www.aliyun.com/product/rds/postgresql    
2、链接数据库，创建插件    
```    
create extension pase;    
```    
3、查询插件支持的类型、操作符、索引方法、索引ops    
```    
postgres-> \dT+    
                                     List of data types    
 Schema | Name | Internal name | Size | Elements |  Owner  | Access privileges | Description     
--------+------+---------------+------+----------+---------+-------------------+-------------    
 public | pase | pase          | var  |          | dtstest |                   |     
(1 row)    
postgres-> \do+    
                                       List of operators    
 Schema | Name | Left arg type | Right arg type | Result type |     Function      | Description     
--------+------+---------------+----------------+-------------+-------------------+-------------    
 public |   | pase          | text           | -           | -                 |     
 public |   | text          | pase           | real        | g_pase_distance_3 |     
 public |   | pase          | real[]         | -           | -                 |     
 public |   | real[]        | pase           | real        | g_pase_distance   |     
 public |   | pase          | real[]         | -           | -                 |     
 public |   | real[]        | pase           | real        | g_pase_distance   |     
(6 rows)    
postgres-> \dA+    
                            List of access methods    
     Name     | Type  |   Handler    |              Description                   
--------------+-------+--------------+----------------------------------------    
 brin         | Index | brinhandler  | block range index (BRIN) access method    
 btree        | Index | bthandler    | b-tree index access method    
 gin          | Index | ginhandler   | GIN index access method    
 gist         | Index | gisthandler  | GiST index access method    
 hash         | Index | hashhandler  | hash index access method    
 pase_hnsw    | Index | pase_hnsw    |     
 pase_ivfflat | Index | pase_ivfflat |     
 spgist       | Index | spghandler   | SP-GiST index access method    
(8 rows)    
postgres=> select * from pg_opclass ;    
 opcmethod |        opcname         | opcnamespace | opcowner | opcfamily | opcintype | opcdefault | opckeytype     
-----------+------------------------+--------------+----------+-----------+-----------+------------+------------    
     16404 | pase_hnsw_ops          |         2200 |    16385 |     16405 |      1021 | t          |          0    
     16404 | pase_hnsw_text_ops     |         2200 |    16385 |     16408 |        25 | t          |          0    
     16412 | pase_ivfflat_float_ops |         2200 |    16385 |     16413 |      1021 | t          |          0    
     16412 | pase_ivfflat_text_ops  |         2200 |    16385 |     16416 |        25 | t          |          0    
(138 rows)    
postgres=> \df    
                                                             List of functions    
 Schema |       Name        |       Result data type        |                          Argument data types                          | Type     
--------+-------------------+-------------------------------+-----------------------------------------------------------------------+------    
 public | g_pase_distance   | real                          | real[], pase                                                          | func    
 public | g_pase_distance_3 | real                          | text, pase                                                            | func    
 public | hnsw_search       | TABLE(id text, distance real) | query_vector text, ef integer, k integer, table_name text             | func    
 public | hnsw_search       | TABLE(id text, distance real) | query_vector text, query text, table_name text                        | func    
 public | ivfflat_search    | TABLE(id text, distance real) | query_vector text, k integer, cr integer, query text, table_name text | func    
 public | ivfflat_search    | TABLE(id text, distance real) | query_vector text, k integer, cr integer, table_name text             | func    
 public | ivfflat_search    | TABLE(id text, distance real) | query_vector text, k integer, query text, table_name text             | func    
 public | ivfflat_search    | TABLE(id text, distance real) | query_vector text, k integer, table_name text                         | func    
 public | pase              | pase                          | real[], integer DEFAULT 0, integer DEFAULT 0                          | func    
 public | pase              | pase                          | text, integer DEFAULT 0, integer DEFAULT 0                            | func    
 public | pase_hnsw         | index_am_handler              | internal                                                              | func    
 public | pase_in           | pase                          | cstring                                                               | func    
 public | pase_ivfflat      | index_am_handler              | internal                                                              | func    
 public | pase_out          | cstring                       | pase                                                                  | func    
 public | pase_recv         | pase                          | internal                                                              | func    
 public | pase_send         | bytea                         | pase                                                                  | func    
(16 rows)    
```    
### 查询语法介绍    
#### hnsw     
```    
---------------------------------------------------------------------------    
--    
-- test new type pase    
-- create pase and cal g_pase_distance.    
--     vectors_hnsw_test - [3, 1, 1]    
--     extra   - 82   -- ef_search （每层使用多少个邻居点进行构图）     
--     ds      - 1/0  -- 0，欧式距离；1， 内积；2，余弦     
--     
---------------------------------------------------------------------------    
-- with constructor    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[])          AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[], 82)      AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[], 82, 1)   AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[], 82, 0)   AS distance;    
-- with io function    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1'::pase       AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1:82'::pase    AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1:82:1'::pase  AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]        '3,1,1:82:0'::pase  AS distance;    
```    
#### ivfflat      
```    
---------------------------------------------------------------------------    
--    
-- test new type pase    
-- create pase and cal g_pase_distance.     
--     vectors_ivfflat_test - [3, 1, 1]     
--     extra   - 0    -- 无效值，填0即可     
--     ds      - 1/0  -- 0，欧式距离； 1， 内积； 2，余弦     
--     
---------------------------------------------------------------------------    
-- with constructor    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[])          AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[], 82)      AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[], 82, 1)   AS distance;    
SELECT  ARRAY[2, 1, 1]::float4[]         pase(ARRAY[3, 1, 1]::float4[], 82, 0)   AS distance;    