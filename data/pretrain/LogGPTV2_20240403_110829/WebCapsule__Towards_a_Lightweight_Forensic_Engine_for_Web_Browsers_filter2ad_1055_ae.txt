Reddit

# Google Instant predictions off
 No noticeable difference
 Replay page rendering problem
 No noticeable difference
 No noticeable difference
 No noticeable difference
 No noticeable difference
 No noticeable difference
# Google Instant predictions off
 No noticeable difference
0 Search function issues
 No noticeable difference
 No noticeable difference
#0 Search function issues
 No noticeable difference
 No noticeable difference
we experienced some other less critical issues (e.g., a missed page
transition) during replay, due to a ﬁxable engineering issue in our
prototype code.
To better understand the origin of the replay issues related to
the search functionality on Yelp and Youtube, we performed an in-
depth investigation of WebCapsule’s execution traces. We found
that the above mentioned problems were caused by a combina-
tion of a small bug within our WebCapsule code (now ﬁxed) plus
two known bugs within the version of Chromium we developed
against. Our own bug was related to the implementation of the
JavaScript call-stack reconstruction code (see Section 5.3), which
would sometimes return an unhandled null value, causing We-
bCapsule to crash. Fixing this bug solved the problem with the
search functionality on Yelp. However, Youtube’s search func-
tionality was still not working properly. After further debugging,
we were able to conﬁrm that this was entirely due to two sepa-
rate bugs in Chromium itself (Issue-365858 and Issue-460328) that
caused ChromeShell to crash whenever a key-stroke was entered
into Youtube’s search ﬁeld. After implementing a workaround for
both Chromium’s bugs, WebCapsule was able to correctly replay
Youtube’s search functionalities as well.
All other Android record and replay tests worked notably well.
In addition, we were able to successfully replay the traces we re-
corded on the ARM-based Nexus 7 into a separate x86-based An-
droid virtual device, thus showing that WebCapsule’s traces can be
replayed in a different platform and in a separate isolated environ-
ment.
Demos. To further demonstrate the record and replay abilities of
WebCapsule, we have recorded ﬁve example “demo videos” that
show a representative demonstration of how WebCapsule can be
used to record and replay browsing activities. We produced two
videos related to phishing attack traces, and three for highly popular
websites (Flickr, Amazon, and Wikipedia). These videos have been
posted before the submission deadline, as demonstrated by the post
dates on Youtube. We also took care to remove any identiﬁable
information from the videos themselves, so not to break anonymity
during the paper submission and review process.
- Flickr (mobile): http://youtu.be/K1CwIwcTgbE
- Amazon: http://youtu.be/inhkt88RqN8
- Wikipedia: http://youtu.be/AelqP91QfLg
- Phishing 1: http://youtu.be/hOcH3OQj9HU
- Phishing 2: http://youtu.be/mMiZ17Qlh0M
7. DISCUSSION AND FUTURE WORK
Besides forensic analysis of browsing activities, WebCapsule co-
uld beneﬁt other applications, including the debugging of web ap-
plications and web usage mining [12], or be used as a compli-
ance tool in some sensitive network environments (e.g., healthcare,
banking, or government networks). In addition, besides social engi-
neering and phishing attacks, WebCapsule may help to reconstruct
other complex web-based attacks, including potentially helping to
detect and differentiate between phishing and insider threat attacks.
While WebCapsule is currently Blink-speciﬁc, this was a pon-
dered design decision. Our main objective was to enable accu-
rate recording and full replay of browsing traces while maximiz-
ing portability. One alternative we have thought about was to im-
plement WebCapsule as a browser extension. However, extension
APIs are browser-speciﬁc, and in most cases do not allow for the
ﬁne-grained recording of internal rendering engine events that are
critical for enabling full replay. In addition, most popular mobile
browsers do not currently allow for installing “powerful” exten-
sions, and this would have prevented the use of WebCapsule on
some mobile devices. On the other hand, because Blink is already
embedded in several popular browsers (e.g., Chrome, Opera, Silk,
etc.), and also in Android’s WebView library, implementing Web-
Capsule by instrumenting Blink enables its deployment in a variety
of web browsers, web-rendering applications, and platforms, in-
cluding on mobile devices.
Our current version of WebCapsule has some limitations. For
example, as discussed in Section 3, the fact that Blink is highly
multi-threaded imposes a number of implementation challenges for
replay. During evaluation we did encounter some practical cases
of complex web pages that cause replay divergence. However, as
shown by the results reported in Section 6, WebCapsule performed
remarkably well on a large variety of sites, considering that our
implementation is an academic-level prototype system.
In our future work we plan to study how to further enhance We-
bCapsule, for example by using an approach inspired by the logi-
cal thread schedule proposed in DejaVu [6]. In addition, once the
Blink scheduler [4] reaches a stable release, we plan to leverage it
to be able to record the scheduling of Blink’s internal tasks, and to
replicate the same scheduling during replay.
Another limitation of our system is due to differences in CPU
speed between the recording and replay environments, which may
affect rendering. While during replay we use the event timelines
discussed in Section 5 to synchronize the re-injection of user in-
puts to the underlying platform API calls (e.g., network requests,
calls to current time, etc.), theoretically a web application may gen-
erate DOM changes (e.g., rotate an image or rewrite a hyperlink)
repeatedly and in an unconstrained way, at a speed bounded only
by the available CPU cycles. In turn, this may cause a re-injected
user input to interact with the wrong DOM element. We refer to
this problem as intrinsic non-determinism, because it is mainly due
to the difference in hardware characteristics between the recording
and replying devices (though CPU load due to multiple applications
running on the same device during recording may also contribute
to this problem).
We believe this intrinsic non-determinism is difﬁcult to solve
completely unless we perform heavyweight record and replay at
the instruction level [11], rather than at the API call level. Unfor-
tunately, this would likely introduce a much higher performance
overhead and degrade portability. At the same time, we need to
consider the fact that in practice intrinsic non-determinism rarely
affects replay, as demonstrated in part by the positive results of our
replay evaluation reported in Section 6. We expect this to hold true
especially when the same device type used for recording is also
143used during replay. In our future work, we will attempt to further
mitigate the effects of intrinsic non-determinism by implementing
more sophisticated replay clock synchronization techniques (e.g.,
by synchronizing to DOM changes or rendering events).
8. RELATED WORK
Forensic analysis of web-based incidents generally relies on an-
alyzing the web browser’s history, cache ﬁles, and system logs [16,
20], or on web trafﬁc traces [15, 18, 24, 33]. However, such ap-
proaches do not provide the ability to fully reconstruct and replay
web security incidents, especially for incidents that directly involve
the user (e.g., phishing and social engineering attacks), as also dis-
cussed in Section 1.
Record and replay is a commonly desired feature for debugging
and troubleshooting complex software and systems, and a num-
ber of previous efforts have been explored to support record and
replay at different levels. For example, approaches based on vir-
tual machines [6, 11, 21, 29] have been proposed to record system
level events (interrupts, thread scheduling, etc.) and replay applica-
tion and system execution at the level of single instructions. While
they are designed for generic application record and replay, VM-
based approaches cannot be easily deployed with low performance
overhead to resource constrained devices, such as smartphones and
other mobile devices. In contrast, our WebCapsule system focuses
on always on record and replay of web browsing traces, and pro-
vides a lightweight and practical solution that can be deployed with
no changes in a variety of different web-rendering applications and
platforms, including mobile devices (e.g., Android devices).
WebCapsule also differs signiﬁcantly from prior work that fo-
cuses exclusively on replaying speciﬁc web components, such as
JavaScript code [17], user gestures and other sensor inputs on mo-
bile devices [13], or user interactions with web applications [2].
Unlike these previous studies, WebCapsule aims to record and re-
play the execution of a web browsing trace in its entirety, including
network transactions, and non-deterministic calls to the underlying
system platform. This allows us to replay in a completely isolated
environment, without requiring new user or network inputs. This is
especially important when there is a need to replay potential web-
security incidents for which the server-side content is ephemeral
and many not be otherwise available at the time of replay.
Another work related to ours is TimeLapse [5], a developer tool
that focuses on the record and replay of human visible web events,
and on the interoperability with existing web application debug-
ging tools. As discussed in more details in Section 1, TimeLapse
does not work as an always on recording system and is not easily
portable to different browser and operating systems (it is currently
limited to Safari+MacOS). In addition, Timelapse is not transpar-
ent, because ig deeply modiﬁes WebKit (e.g., to force a synch-
ronous scheduling of threads). In contrast, WebCapsule can per-
form low-overhead always on recording, and is also transparent and
portable.
9. CONCLUSION
In this paper, we presented WebCapsule, a novel record and re-
play forensic engine for web browsers. WebCapsule’s main goal is
to work as an always-on and lightweight (i.e., low overhead) foren-
sic data collection system that enables a full reconstruction of web
security incidents, including phishing and social engineering at-
tacks. We designed WebCapsule to be a portable system by instru-
menting Google’s Blink rendering engine without altering its appli-
cation and platform APIs. Our experimental results on both Linux
and Android systems show that WebCapsule can accurately record
and replay complex web applications, including popular websites
and real-world phishing attacks, with reasonable performance over-
head, thus making always-on recording practical.
Acknowledgments
We thank Minesh Javiya (Stony Brook University) and Jienan Liu
(University of Georgia) for their help with collecting the browsing
traces used to evaluate WebCapsule. We would also like to thank
the Chromium development team for their documentation of Blink
and of the entire Chromium project, and the anonymous reviewers
for their constructive and very helpful comments.
This material is based in part upon work supported by the Na-
tional Science Foundation, under grants No. CNS-1149051 and
CNS-1514142. Any opinions,ﬁndings, and conclusions or recom-
mendations expressed in this material are those of the authors and
do not necessarily reﬂect the views of the National Science Foun-
dation.
10. REFERENCES
[1] Acid3. http://acid3.acidtests.org.
[2] ANDRICA, S., AND CANDEA, G. Warr: A tool for
high-ﬁdelity web application record and replay. In
Proceedings of the 2011 IEEE/IFIP 41st International
Conference on Dependable Systems&Networks (Washington,
DC, USA, 2011), DSN ’11, IEEE Computer Society,
pp. 403–410.
[3] Blink web rendering engine.
http://www.chromium.org/blink.
[4] Blink scheduler. https://goo.gl/wzqXgC -
https://goo.gl/I8YGu3 -
https://goo.gl/RBkhCo.
[5] BURG, B., BAILEY, R., KO, A. J., AND ERNST, M. D.
Interactive record/replay for web application debugging. In
Proceedings of the 26th Annual ACM Symposium on User
Interface Software and Technology (New York, NY, USA,
2013), UIST ’13, ACM, pp. 473–484.
[6] CHOI, J.-D., AND SRINIVASAN, H. Deterministic replay of
java multithreaded applications. In Proceedings of the
SIGMETRICS Symposium on Parallel and Distributed Tools
(New York, NY, USA, 1998), SPDT ’98, ACM, pp. 48–59.
[7] Chrome devtools. https://developer.chrome.
com/devtools/docs/integrating.
[8] Chromeshell. https://code.google.com/p/
chromium/wiki/AndroidBuildInstructions.
[9] DENNING, D. E., AND BRANSTAD, D. K. A taxonomy for
key escrow encryption systems. Commun. ACM 39, 3 (Mar.
1996), 34–40.
[10] Dromaeo javascript test suite. http://dromaeo.com.
[11] DUNLAP, G. W., KING, S. T., CINAR, S., BASRAI, M. A.,
AND CHEN, P. M. Revirt: Enabling intrusion analysis
through virtual-machine logging and replay. In Proceedings
of the 5th Symposium on Operating Systems Design and
implementation (New York, NY, USA, 2002), OSDI ’02,
ACM, pp. 211–224.
[12] ETMINANI, K., DELUI, A., YANEHSARI, N., AND
ROUHANI, M. Web usage mining: Discovery of the users’
navigational patterns using som. In Networked Digital
Technologies, 2009. NDT ’09. First International Conference
on (2009), pp. 224–249.
[13] GOMEZ, L., NEAMTIU, I., T.AZIM, AND T.MILLSTEIN.
Reran: Timeing- and touch-sensitive record and replay for
android. In Proceedings of the 2013 ICSE (2013).
144[14] Google instant predictions. https://support.
google.com/websearch/answer/186645?hl=en.
[15] HONG, S.-S., AND WU, S. On interactive internet trafﬁc
replay. In Recent Advances in Intrusion Detection, A. Valdes
and D. Zamboni, Eds., vol. 3858 of Lecture Notes in
Computer Science. Springer Berlin Heidelberg, 2006,
pp. 247–264.
[16] JONES, K. J. Forensic analysis of internet explorer activity
ﬁles. http://www.mcafee.com/us/resources/
white-papers/foundstone/wp-pasco.pdf.
[17] MICKENS, J., ELSON, J., AND HOWELL, J. Mugshot:
Deterministic capture and replay for javascript applications.
In Proceedings of the 7th USENIX Conference on Networked
Systems Design and Implementation (Berkeley, CA, USA,
2010), NSDI’10, USENIX Association, pp. 11–11.
[18] NEASBITT, C., R.PERDISCI, LI, K., AND NELMS, T.
Clickminer: Towards forensic reconstruction of uesr-browser
interactions from network traces. In Proceedings of the 2014
ACM Computer and Communication Security Conference
(CCS) (2014).
[19] Rsa netwitness.
https://www.emc.com/collateral/
data-sheet/rsa-netwitness-nextgen.pdf.
[20] OH, J., LEE, S., AND LEE, S. Advanced evidence collection
and analysis of web browser activity. Digit. Investig. 8 (Aug.
2011), S62–S70.
[21] Panda. https://github.com/moyix/panda/
blob/master/docs/record_replay.md.
[22] REIS, C., AND GRIBBLE, S. D. Isolating web programs in
modern browser architectures. In Proceedings of the 4th
ACM European Conference on Computer Systems (New
York, NY, USA, 2009), EuroSys ’09, ACM, pp. 219–232.
[23] Selenium webdriver. http://docs.seleniumhq.
org/projects/webdriver/.
[24] Tcpreplay. http://tcpreplay.synfin.net/.
[25] Timelapse htmlparser. https://github.com/burg/
timelapse/blob/timelapse/Source/WebCore/
html/parser/HTMLDocumentParser.cpp; see “//
The timing of yields is nondeterministic, so just don’t yield
during capture/replay”.
[26] Timelapse wiki.
https://github.com/burg/timelapse/wiki/
Frequently-asked-questions.
[27] Adding traces to chromium.
http://www.chromium.org/developers/
how-tos/trace-event-profiling-tool/
tracing-event-instrumentation.
[28] V8 javascript engine.
https://developers.google.com/v8/.
[29] VMWARE INC. Replay debugging on linux, October 2009.
http://www.vmware.com/pdf/ws7_replay_
linux_technote.pdf.
[30] The webkit open source project.
https://www.webkit.org.
[31] Webview. http://developer.android.com/
guide/webapps/webview.html.
[32] Wikipedia - acid3.
http://en.wikipedia.org/wiki/Acid3.
[33] XIE, G., ILIOFOTOU, M., KARAGIANNIS, T., FALOUTSOS,
M., AND JIN, Y. Resurf: Reconstructing web-surﬁng
activity from network trafﬁc. In IFIP Networking
Conference, 2013 (2013).
145