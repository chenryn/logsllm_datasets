Ped.VerCommit([h]1, c, w, o) : output 1 iﬀ c = (o, w(cid:62)) · [h]1.
Above D is a probability distribution over the group elements that allows to argue that the scheme
is perfectly hiding and computationally binding. For example, D may be the uniform distribution, in
which case we obtain the classical scheme that is binding under the discrete logarithm assumption,
or D may output powers of random values, e.g., hi = si for an s ←$ Zq, that has also been proved
computationally binding under a suitable assumption.
In our constructions we only require the commitment scheme to have the same veriﬁcation
algorithm as Ped.VerCommit.
Tool: SNARK for Linear Subspaces. In our CP-SNARK constructions we make use of a SNARK
for the linear subspace relation RM([x]1, w) such that:
RM([x]1, w) = 1 ⇐⇒ [x]1 = [M]1 · w ∈ Gl
1, where [M] ∈ Gl×t
1
, w ∈ Zt
q
Namely, given a ﬁxed public matrix [M]1 and a public vector [x]1, one can prove knowledge of a
vector w such that [x]1 = [M]1 · w. We denote a SNARK for this family of relations with ssΠ.
A candidate scheme for ssΠ is the Kiltz-Wee QA-NIZK scheme Π(cid:48)
as [KW15] that works in bilinear
groups. As described in [KW15], the security of this scheme requires that l > t, which is not satisﬁed
in our setting where matrices have always more columns than rows. This means that, when M has
full rank, RM is satisﬁed for any [x]1. In fact, what we need is an argument of knowledge for this
language. For this, by extending a recent result [FLSZ17], we show the knowledge soundness of Π(cid:48)
as
[KW15], without the l > t restriction, under the discrete logarithm assumption, in the algebraic
group model [FKL18]. We recall the scheme and its security statement in Appendix D. For knowledge
soundness, the matrix [M]1 must be generated using a witness sampleable distribution Dmtx, i.e.,
there must exist a polynomial time algorithm that samples M in Zq such that [M]1 has the same
distribution as the one sampled with Dmtx. We note that this is satisﬁed by our use cases where M
includes bases of Pedersen-like commitment schemes.
4.1 CP-SNARK for Pedersen Veriﬁcation
Our scheme CPlink is designed to work with, as global commitment scheme, any Com such that
Com.VerCommit = Ped.VerCommit. Furthermore, it handles any cc-SNARK scheme ccΠ whose
underlying commitment algorithm also follows Pedersen veriﬁcation, i.e., ccΠ.VerCommit = Ped.
VerCommit. Let us stress that although the veriﬁcation algorithm is the same the commitment keys
are not. In particular, the key of Com is completely independent of the relations to be proven (e.g.,
are random group elements) whereas the key of ccΠ is relation-dependent.
More formally, let Com be a commitment scheme such that Com.VerCommit = Ped.VerCommit.
We build a CP-SNARK CPlink for Com and for the following class of relations Rlink. Fixed a security
parameter λ (and the group setting for λ as well), Rlink is over (Dx × D1 × ··· × D(cid:96) × Dω), where
Dx = G1,Dω = Zq and Dj = Znj
j nj = m. Rlink is parametrized by a
commitment key [f ]1 ∈ Gm+1
for some nj such that (cid:80)
Rlink(cid:0)c(cid:48), (uj)j∈[(cid:96)], o(cid:48)(cid:1) = 1 ⇐⇒ c(cid:48) ?= (o(cid:48), u(cid:62)
,and is deﬁned as:
1 , . . . , u(cid:62)
(cid:96) ) · [f ]1
1
q
20
Let ck = [h]1 ∈ Gn+1
Before describing the construction in full detail, let us present the main ideas.
be the key of the global commitment Com. In our CPlink the public
inputs of the prover are (cid:96) commitments (cj)j∈[(cid:96)] and another commitment c(cid:48); the witness is a set of
openings ((uj)j∈[(cid:96)], (oj)j∈[(cid:96)]) for commitments (cj)j∈[(cid:96)], and an opening o(cid:48) for c(cid:48). In particular, the
prover must prove that
1
(cid:94)
j∈[(cid:96)]
Ped(c(cid:48), (cj)j∈[(cid:96)], (uj)j∈[(cid:96)], (oj)j∈[(cid:96)], o(cid:48)) = 1 ⇐⇒
Rlink
cj = (oj, u(cid:62)
1 , . . . , u(cid:62)
j ) · [h[0,nj ]]1 ∧ c(cid:48) = (o(cid:48), u(cid:62)
(cid:96) ) · [f ]1
The description of our scheme CPlink follows:
CPlink.KeyGen(ck, Rlink): parse ck = [h]1 ∈ Gn+1
, and let Rlink : G1 × D1 × ··· × D(cid:96) × Zq be the
relation deﬁned above with ck(cid:48) = [f ]1 ∈ Gm+1
. Use [h]1, [f ]1 and Rlink to build a matrix M as in
equation (1). Compute (ek, vk) ← ssΠ.KeyGen([M]1) and return (ek, vk).
CPlink.Prove(ek, c(cid:48),(cj)j∈[(cid:96)], (uj)j∈[(cid:96)], (oj)j∈[(cid:96)],o(cid:48)) : deﬁne [x]1 and w as in as in equation (1), compute
π ← ssΠ.Prove(ek, [x]1, w) and return π.
CPlink.VerProof(vk, c(cid:48), (cj)j∈[(cid:96)], π): set [x]1 as in (1) and return ssΠ.VerProof(vk, [x]1, π).
1
1
The key idea of the construction is that this relation can be expressed as a linear subspace relation
Ped, with l = (cid:96) + 1 and
RM([x]1, w) where M, x, w can be deﬁned as follows from the inputs of Rlink
t = m + (cid:96) + 1:
(cid:122)
[x]1
(cid:122) (cid:125)(cid:124) (cid:123)
c1
...
c(cid:96)
c(cid:48)
1
=
(cid:125)(cid:124)
[M]1
...
h0 0 . . . 0 0 h[1,n1]
0 h0 . . . 0 0
...
...
0 0 . . . h0 0
0 0 . . . 0 f0 f [1,n1] f [n1+1,n2] . . . f [n(cid:96)−1+1,n(cid:96)]
. . .
. . .
...
. . .
h[1,n(cid:96)]
h[1,n2]
0
0
...
0
...
0
...
0
...
0
...
(cid:123)
1
w(cid:122) (cid:125)(cid:124) (cid:123)
o1
...
o(cid:96)
o(cid:48)
u1
...
u(cid:96)
(1)
In the theorem below we show that CPlink is knowledge-sound and zero-knowledge assuming so
is ssΠ. We show the formal statement in Appendix C.1, where we also prove the security of CPlink
based on that of ssΠ. Appendix C.2 shows how to extend CPlink to handle a more general class of
relations that essentially checks that a set of vectors (uj)j∈[(cid:96)] is a preﬁx, of known length, of a vector
u(cid:48) committed in c(cid:48).
Efficiency. When using ssΠ from [KW15], the key generation algorithm outputs an evaluation
key of m + (cid:96) + 1 G1 elements and a veriﬁcation key with l + 1 G2 elements. The prover cost is one
multi-exponentiation of length m + (cid:96) + 1 while the veriﬁer needs l + 1 pairings to check the one
group element composing the proof.
Theorem 4.1. If ssΠ is KSND(ssΠ.RG,Z) where Z is an auxiliary input distribution, then the CP-
SNARK construction CPlink given above is KSND(CPlink.RG,Z). Furthermore, if ssΠ is composable
ZK for ssΠ.RG, then CPlink is composable ZK for CPlink.RG.
21
4.2 CP-SNARK for Linear Properties
In this section we show a CP-SNARK for the relation Rlin that checks linear properties of (com-
mitted) vectors: for a ﬁxed public matrix F ∈ Zn×m
q and
witness u ∈ Zm
F over public input x ∈ Zn
q , with u := (uj)j∈[(cid:96)] and uj ∈ Znj
q , holds iﬀ x ?= F · u.
, relation Rlin
q
Our scheme, called CPPed
lin , is quite similar to CPlink and essentially consists into invoking ssΠ to
prove that the above subspace relation holds. The full description of our scheme CPPed
lin
follows:
F ): parse ck = [h]1 ∈ Gm+1
F to build a matrix [M] as in
CPPed
lin .KeyGen(ck, Rlin
equation (2). Compute (ek, vk) ← ssΠ.KeyGen([M]1) and return (ek, vk).
lin .Prove(ek, x, (cj)j∈[(cid:96)], (uj)j∈[(cid:96)], (oj)j∈[(cid:96)]): deﬁne [x(cid:48)]1 and w(cid:48) as in equation (2), and return
CPPed
π ← ssΠ.Prove(ek, [x(cid:48)]1, w(cid:48)).
lin .VerProof(vk, x, (cj)j∈[(cid:96)], π): set [x(cid:48)]1 as in (2) and return ssΠ.VerProof(vk, [x(cid:48)]1, π).
CPPed
. Use [h]1 and Rlin
1
The scheme CPPed
lin considers each uj to be committed using a commitment scheme Com such
that Com.VerCommit = Ped.VerCommit, and whose key is ck = [h]1 ∈ Gm∗+1
, with m∗ ≥ m.14 The
idea is to express such a commit-and-prove relation with the linear subspace relation RM([x(cid:48)]1, w(cid:48))
that holds iﬀ [x(cid:48)]1 = [M]1 · w(cid:48), where [x(cid:48)]1 ∈ Gl
and w(cid:48) ∈ Zt
q can be built from the
inputs of Rlin
F as follows (for l = (cid:96) + n and t = m + (cid:96)):
1
1
1, [M]1 ∈ Gl×t
(cid:125)(cid:124)
[M]1
(cid:123)
1
w(cid:48)
(cid:122) (cid:125)(cid:124) (cid:123)
o1
...
o(cid:96)
u1
...
u(cid:96)
(cid:122)
=
[x(cid:48)]1
(cid:122) (cid:125)(cid:124) (cid:123)
c1
...
c(cid:96)
x
1
0
h0 0 . . . 0 h[1,n1]
0 h0 . . . 0
...
...
0 0 . . . h0
. . .
0 h[1,n2] . . .
...
...
. . . h[1,n(cid:96)]
0
0
0
...
...
...
0
...
0
F
(2)
Efficiency. When using ssΠ from [KW15], the prover cost is one multi-exponentiation of length
m + (cid:96) while the veriﬁer needs (cid:96) + |x| + 1 pairings. If x is some ﬁxed value, as in our applications,
|x| of these pairings either disappear (if x = 0) or can be precomputed. Furthermore, it is possible
to see that the cost of KeyGen is O((cid:96) · t + nF ) where nF is the number of nonzero entries of F .
Essentially this cost depends on the sparsity of the matrix; this is crucial in our applications where
for example F includes the W matrices representing the linear constraints of a circuit [BCC+16].
We state the following theorem. We omit the proof, which is essentially the same as that of
Theorem C.1.
Theorem 4.2. Let F ∈ Zn×m
be a matrix from a distribution Dmtx, and Z be an auxiliary input
distribution. If ssΠ is KSND(ssΠ.RG,Z) where ssΠ.RG is a relation generator that samples ck and
lin given above is KSND(Dmtx,Z). Furthermore,
F ← Dmtx, then the CP-SNARK construction CPPed