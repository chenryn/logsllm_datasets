例子  
```  
postgres=# select * from tmp_xxx where xmax1=40477745 and xmax_cmstat='committed' and xmin_cmstat='committed';   
  xmin_txid  | xmin_cmstat |            xmin_ts            |  xmax_txid  | xmax_cmstat |            xmax_ts            |  xmin1   |  xmax1   | dead | oid | id   
-------------+-------------+-------------------------------+-------------+-------------+-------------------------------+----------+----------+------+-----+----  
 25810281516 | committed   | 2017-10-10 16:56:16.092184+08 | 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 40477740 | 40477745 | f    |   0 |  5  
(1 row)  
postgres=# select * from tmp_xxx where xmin1=40477745 and xmin_cmstat='committed';  
  xmin_txid  | xmin_cmstat |            xmin_ts            |  xmax_txid  | xmax_cmstat |            xmax_ts            |  xmin1   |  xmax1   | dead | oid | id   
-------------+-------------+-------------------------------+-------------+-------------+-------------------------------+----------+----------+------+-----+----  
 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477745 | 40477752 | f    |   0 |  2  
(1 row)  
```  
## flashback 可能造成的负面影响  
flashback的前提，前面已经讲了，但是可能带来一些负面影响。  
1、由于设置了vacuum_defer_cleanup_age，因此每次都会被触发VACUUM，扫描表，但是又有一些垃圾不能被回收；  
2、可能导致表膨胀。  
### 解决负面影响  
1、提高autovacuum_naptime，从而降低频繁扫描的概率。  
2、膨胀可能无法解决。建议修改内核，实现可以仅针对重要的表设置 vacuum_defer_cleanup_age。从而避免全库膨胀。  
## 相关知识点  
### 相关参数 - 跟踪事务时间、延迟回收垃圾  
```  
track_commit_timestamp = on         # collect timestamp of transaction commit  
                                    # (change requires restart)  
vacuum_defer_cleanup_age = 100000   # number of xacts by which cleanup is delayed  
```  
### 相关函数 - 事务状态、事务结束时间  
Name|	Return Type|	Description  
---|---|---  
txid_status(bigint)|	txid_status|	report the status of the given transaction: committed, aborted, in progress, or null if the transaction ID is too old  
pg_xact_commit_timestamp(xid)|	timestamp with time zone|	get commit timestamp of a transaction  
https://www.postgresql.org/docs/10/static/functions-info.html  
```  
txid_status(bigint)   
reports the commit status of a recent transaction.   
Applications may use it to determine whether a transaction committed or aborted   
when the application and database server become disconnected while a COMMIT is in progress.   
The status of a transaction will be reported as either in progress, committed, or aborted,   
provided that the transaction is recent enough that the system retains the commit status of that transaction.   
If is old enough that no references to that transaction survive in the system and the commit status information has been discarded,   
this function will return NULL. Note that prepared transactions are reported as in progress;   
applications must check pg_prepared_xacts if they need to determine whether the txid is a prepared transaction.  
```  
### 读脏页插件  
https://github.com/ChristophBerg/pg_dirtyread  
### 如何跟踪事务结束时间  
开启事务结束时间跟踪后，会开辟一块共享内存，跟踪事务结束时间。  
```  
/*  
 * Number of shared CommitTS buffers.  
 *  
 * We use a very similar logic as for the number of CLOG buffers; see comments  
 * in CLOGShmemBuffers.  
 */  
Size  
CommitTsShmemBuffers(void)  
{  
        return Min(16, Max(4, NBuffers / 1024));  
}  
/*  
 * Shared memory sizing for CommitTs  
 */  
Size  
CommitTsShmemSize(void)  
{  
        return SimpleLruShmemSize(CommitTsShmemBuffers(), 0) +  
                sizeof(CommitTimestampShared);  
}  
```  
### xid和txid的区别  
xid是32位的整型，会被FREEZE，循环使用，xmin,xmax都是XID类型。通过xid可以得到事务结束时间。  
txid是64位整型，不会被循环使用，通过epoch可以从xid转换为txid。通过txid可以得到事务的提交状态。  
```  
/*  
 *      Export internal transaction IDs to user level.  
 *  
 * Note that only top-level transaction IDs are ever converted to TXID.  
 * This is important because TXIDs frequently persist beyond the global  
 * xmin horizon, or may even be shipped to other machines, so we cannot  
 * rely on being able to correlate subtransaction IDs with their parents  
 * via functions such as SubTransGetTopmostTransaction().  
 *  
/* txid will be signed int8 in database, so must limit to 63 bits */  
#define MAX_TXID   UINT64CONST(0x7FFFFFFFFFFFFFFF)  
/*  
 * do a TransactionId -> txid conversion for an XID near the given epoch  
 */  
static txid  
convert_xid(TransactionId xid, const TxidEpoch *state)  
{  
        uint64          epoch;  
        /* return special xid's as-is */  
        if (!TransactionIdIsNormal(xid))  
                return (txid) xid;  
        /* xid can be on either side when near wrap-around */  
        epoch = (uint64) state->epoch;  
        if (xid > state->last_xid &&  
                TransactionIdPrecedes(xid, state->last_xid))  
                epoch--;  
        else if (xid last_xid &&  
                         TransactionIdFollows(xid, state->last_xid))  
                epoch++;  
        return (epoch  txid conversion for an XID near the given epoch  
 */  
static txid  
convert_xid(TransactionId xid, const TxidEpoch *state)  
{  
        uint64          epoch;  
        /* return special xid's as-is */  
        if (!TransactionIdIsNormal(xid))  
                return (txid) xid;  
        /* xid can be on either side when near wrap-around */  
        epoch = (uint64) state->epoch;  
        if (xid > state->last_xid &&  
                TransactionIdPrecedes(xid, state->last_xid))  
                epoch--;  
        else if (xid last_xid &&  
                         TransactionIdFollows(xid, state->last_xid))  
                epoch++;  
        return (epoch last_xid, &state->epoch);  
}  
Datum  
xid_to_txid(PG_FUNCTION_ARGS)  
{  
        txid            val;  
        TxidEpoch       state;  
        TransactionId   xid;  
        xid = DatumGetTransactionId(PG_GETARG_DATUM(0));  
        load_xid_epoch(&state);  
        val = convert_xid(xid, &state);  
        PG_RETURN_INT64(val);  
}  
```  
编译  
```  
gcc -O3 -Wall -Wextra -Werror -I /home/digoal/postgresql-10beta4/src/include -g -fPIC -c ./xid_to_txid.c -o xid_to_txid.o  
gcc -O3 -Wall -Wextra -Werror -I /home/digoal/postgresql-10beta4/src/include -g -shared xid_to_txid.o -o libxid_to_txid.so  
```  
拷贝到数据库软件LIB目录  
```  
cp libxid_to_txid.so pgsql10/lib/  
```  
创建函数  
```  
create or replace function xid_to_txid(xid) returns int8 as '$libdir/libxid_to_txid.so', 'xid_to_txid' language C STRICT;  
```  
测试  
```  
-- 当前值  
postgres=# select xmin,xmax,xid_to_txid(xmin),txid_status(xid_to_txid(xmin)),pg_xact_commit_timestamp(xmin) from trac ;  
   xmin   | xmax | xid_to_txid | txid_status |   pg_xact_commit_timestamp      
----------+------+-------------+-------------+-------------------------------  
 40477717 |    0 |  8630412309 | committed   | 2017-10-10 10:29:21.269612+08  
 40477719 |    0 |  8630412311 | committed   | 2017-10-10 11:15:05.875067+08  
(2 rows)  
-- 产生一些DML  
postgres=# begin;  
BEGIN  
postgres=# update trac set id =2;  
UPDATE 2  
postgres=# rollback;  
ROLLBACK  
-- 值的变化  