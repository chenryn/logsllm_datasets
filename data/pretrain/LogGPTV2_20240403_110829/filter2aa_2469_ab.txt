### 与传统 Web 应用程序相比，API 的特点和挑战

与传统的 Web 应用程序相比，API 倾向于公开更多的端点。这使得文档的编制和更新变得尤为重要。正确维护主机和已部署 API 版本的清单对于解决弃用版本和暴露调试端点等问题至关重要。

### API10:2019-日志和监控不足

日志记录和监控不足，加上与事件响应集成的缺失或无效，使攻击者能够进一步攻击系统，保持持久性，并转向更多系统以篡改、提取或销毁数据。大多数违规研究表明，检测违规行为的时间超过 200 天，通常由外部方而非内部程序或监控发现。

### API 安全脆弱性案例

#### 案例 #1：电子商务平台销售数据泄露
一个在线电子商务平台为入驻商户提供了一个带有利润图表的列表页。通过查看浏览器发出的请求，攻击者可以识别到为此图表提供数据源的 API 端点及其模式 `/shops/{shopName}/revenue_data.json`。通过另一个 API 端点，攻击者可以获取入驻平台的商户名列表，使用简单脚本即可获取入驻商户名。通过替换 URL 中的 `{shopName}`，攻击者可获取数千个入驻商户的销售数据。

#### 案例 #2：可穿戴设备账户数据篡改
通过监控可穿戴设备的网络流量，攻击者注意到 HTTP PATCH 请求中的自定义请求头部字段 `X-User-Id:54796`。通过替换 `X-User-Id` 字段的值为 `54795`，攻击者接收到成功的 HTTP 响应，并能修改其他用户的账户数据。

### 对象级授权的重要性

对象级授权是一种在代码层面实现的访问控制机制，用于验证用户仅能访问其有权访问的对象。所有接收对象 ID 并对对象执行操作的 API 都应实现对象级授权检查，确保登录用户确实有权对其所请求的对象进行操作。此校验机制失效将导致未经授权的数据披露、修改或销毁。

### 如何防止对象级授权失效

- **基于用户策略和继承关系** 实现适当的授权机制。
- **在所有涉及用户输入并访问数据库的函数中** 通过授权机制检查登录用户是否有权在该记录上执行请求的操作。
- **建议使用不可预测的随机 GUID** 作为信息记录的 ID。
- **通过测试评估授权机制**，不要部署带有漏洞的变更。

### API1:2019 失效的对象级授权

- **可利用性**：3
- **普遍性**：3
- **可检测性**：2
- **技术难度**：3

攻击者可以通过改变请求中的对象 ID 来攻击存在“失效的对象级授权”漏洞的 API，导致敏感数据的未授权访问。这种问题在基于 API 的应用中非常普遍，因为服务器通常依赖用户请求参数中的对象 ID 来决定访问哪些目标对象。

### 凭据填充和暴力破解

#### 案例 #1：凭据填充
凭据填充（使用用户名、密码列表）是一种常见的攻击。如果应用没有实现自动威胁保护或凭据填充保护，攻击者可以将其当作密码验证器来检测凭据的有效性。

#### 案例 #2：暴力破解 SMS 验证码
攻击者通过向 `/api/system/verification-codes` 发起 POST 请求并在请求体中提供用户名来启动重置密码工作流。由于该 API 没有实现调用频率限制，攻击者可以用多线程脚本尝试所有可能的验证码组合，在几分钟内破解验证码。

### 如何防止认证漏洞

- **确保了解所有用于 API 认证的工作流**（移动应用、Web 应用等）。
- **询问工程师是否存在遗漏的工作流**。
- **阅读并理解所使用的认证机制文档**，OAuth 是一种协议，不是认证也不是 API Key。
- **不要自创认证算法**，使用标准算法。
- **将凭据重置和忘记密码端点视为认证端点**，实施暴力破解防护、请求频率限制和锁定保护。
- **使用 OWASP Authentication Cheat Sheet**。
- **尽可能使用多因素认证**。
- **在认证端点上使用反暴力破解机制**，缓解凭据填充、字典攻击和暴力破解风险。
- **实现账号锁定和验证码机制**，防止对特定用户的暴力破解。
- **实现弱密码检查**。
- **API Key 不应用于用户认证**，而用于客户端应用程序或项目认证。

### API2:2019 失效的用户身份认证

- **可利用性**：3
- **普遍性**：2
- **可检测性**：2
- **技术难度**：3

API 的认证机制复杂且容易使人迷惑，软件和安全工程师可能对认证边界和实现方式存在误解。认证组件是攻击者的常见目标，因为它对所有人开放。缺乏保护机制或错误实现保护机制都会导致认证组件成为潜在的风险点。

### 过度的数据暴露

#### 案例 #1：移动应用评论数据泄露
移动开发团队使 `/api/articles/{articleId}/comments/{commentId}` 在文章视图中展示评论。通过嗅探移动应用流量，攻击者可以找出被返回的其他评论的敏感信息。端点通过在包含个人识别信息（PII）的 User 模型上使用通用的 `toJSON()` 方法，将对象序列化。

#### 案例 #2：物联网视频监控系统权限泄露
一个基于物联网的视频监控系统允许管理员创建具有不同权限的用户。当管理员为新的安保人员创建账户时，应只分配特定建筑范围的访问权限。然而，API 返回了站点内所有摄像头的完整列表，导致实际权限超出预期。

### 如何防止过度数据暴露

- **不要依赖客户端过滤敏感数据**。
- **检查 API 响应**，确保其中仅包含合法数据。
- **在开放新 API 端点前**，确认“谁才是真正的数据使用者”。
- **避免使用通用方法**（如 `to_json()` 和 `to_string()`），而是选择特定属性。
- **分类和检查所有返回敏感信息和个人识别信息（PII）的 API 调用**。
- **执行基于 schema 的响应验证机制** 作为额外的安全措施。

### 结论

API 的设计和实现需要特别注意文档编制、版本管理、日志记录、监控以及授权和认证机制。通过采取适当的安全措施，可以显著降低 API 安全风险，保护敏感数据免受未经授权的访问和篡改。