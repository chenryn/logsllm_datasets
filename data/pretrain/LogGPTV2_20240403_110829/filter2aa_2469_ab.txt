与传统 Web 应用程序相比，API倾向于公开更多的端点，
这使得恰当的文档编制和更新变得非常重要。正确的主机
和已部署的 API 版本清单对于缓解弃用的 API 版本和公开
的调试终端节点等问题也起着重要的作用。
API10:2019-日志和监视不足
日志记录和监控不足，加上与事件响应的集成缺失或无效，
使得攻击者可以进一步攻击系统，保持持久性，转向更多
系统以篡改、提取或销毁数据。大多数违规研究表明，检
测违规行为的时间超过 200 天，通常由外部方而不是内部
程序或监控发现。
API详情
业务详情
7
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：一个在线电子商务平台为他们的入驻商户提供了
一个带有利润图表的列表页。通过查看浏览器发出的请求，
攻击者可以识别到为此图表提供数据源的API 端点及其模式
/shops/{shopName}/revenue_data.json。通过另一个API端点，
攻击者可以获取入驻平台的商户名列表，用一个简单的脚
本即可获取到入驻商户名，通过替换URL中的{shopName}，
攻击者获取到数千入驻商户的销售数据。
场景#2：通过监控可穿戴设备的网络流量，其HTTP PATCH
请求中的自定义请求头部字段 X-User-Id:54796引起了攻击者
的注意。通过替换X-User-Id字段的值为54795，攻击者接收
到成功的HTTP响应，并可以修改其他用户的账户数据。
API脆弱吗？
对象级授权是一种通常在代码层面实现的访问控制机制，
用于校验用户仅能访问其有权访问的对象。
所有接收对象ID、并对对象执行任何操作的API，应该实现
对象级授权检查。此检查应该校验该登录用户确实有权对
其所请求的对象进行所请求的操作。
此校验机制失效通常将会导致数据的未授权信息披露、修
改或销毁。
参考资料
外部资料
• CWE-284: Improper Access Control
• CWE-285: Improper Authorization
• CWE-639: Authorization Bypass Through User-Controlled Key
如何防止？
•  基于用户策略和继承关系来实现适当的授权机制。
• 在接收用户输入并访问数据库的所有函数中，都通过一种
授权机制来检查该登录用户是否有权在该记录上执行其所
请求的操作。
• 建议使用不可预测的随机GUID作为信息记录的ID。
• 通过测试来评估授权机制。不要部署带有脆弱点的变更，
这将破坏测试。
API1:2019 失效的对象级授权
可利用性 ：3
普遍性：3
可检测性 ：2
技术：3
攻击者可以在发送的请求中改变对象
的ID来攻击存在“失效的对象级授权”
漏洞的API。这将导致敏感数据的未授
权访问。该问题在基于API的应用中非
常普遍，因为服务器通常不会完整地
跟踪用户的状态，而是依赖用户请求
参数中的对象ID来决定访问哪些目标
对象。
这已经成为最普遍、且影响广泛的API攻击。
授权和访问控制机制在现代应用中已经非常
复杂并广泛使用。即使应用已经实现了适当
的鉴权设施，开发者在访问敏感对象时仍可
能忘记使用这些鉴权设施。通常在静态或动
态测试中并不检查访问控制机制。
未授权访问将导致数据向未授权的
组织披露、数据丢失或数据篡改。
未授权的对象访问也能导致整个账
户被控制。
API详情
业务详情
8
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：凭据填充（使用用户名、密码列表）是一种常见
的攻击。如果应用没有实现自动的威胁保护或者凭据填充
保护，这个应用就能被当作密码验证器来检测凭据是否有
效。
场景#2：攻击者通过向/api/system/verification-codes发起一
个POST请求并在请求体中提供用户名来启动重置密码工作
流。然后一个6位数字的SMS短信验证码发送到受害者的手
机。由于该API没有实现调用频率限制，攻击者可以用多线
程脚本向/api/system/verification-codes/{smsToken}发送请求
来尝试所有可能的验证码组合，从而在几分钟内破解验证
码。
API脆弱吗？
应用端点和工作流是应该被保护的资产。“忘记密码/重置
密码”应该和认证机制一样被同等看待。
如果API含有以下项则，则其存在风险：
• 当攻击者拥有有效的用户名和密码列表时，可以进行凭据
填充；
• 缺失验证码或没有账号锁定机制，攻击者可以对同一用户
账号进行暴力破解；
• 允许弱密码；
• 发送用于认证的敏感信息，例如在URL中发送令牌和密码；
• 未校验令牌的真实性；
• 接受未签名或弱签名的JWT令牌（“alg”:“none”），或未校
验令牌过期时间；
• 使用明文密码、弱加密或者弱哈希密码；
• 使用弱秘钥。
参考资料
OWASP资料
• OWASP Key Management Cheat Sheet
• OWASP Authentication Cheat Sheet
• Credential Stuffing
外部资料
• CWE-798: Use of Hard-coded Credentials
如何防止？
• 确保您知晓所有用于API认证的工作流（移动应用、Web
应用、执行一键认证的Deep Links等）；
• 询问您的工程师看是否存在您遗漏了的工作流；
• 阅读您所使用的认证机制文档，确保您理解它是如何使用
的。OAuth是一种协议，它不是一种认证，也不是API Key；
• 不要在认证、凭据生成、密码存储方面自创算法，使用标
准的算法；
• 凭据重置、忘记密码端应被视作认证端点，在暴力破解、
请求频率限制和锁定保护上同等对待；
• 使用OWASP Authentication Cheat Sheet；
• 如有可能，尽量使用多因素认证；
• 在您的认证端上使用反暴力破解机制来缓解凭据填充、字
典攻击和暴力破解风险。此机制应该比您一般API具有更严
格的请求频率限制；
• 实现账号锁定、验证码机制来防止对特定用户的暴力破解。
实现弱密码检查；
• API Key不应用于用户认证，而用于客户端应用程序或项目
认证。
API2:2019 失效的用户身份认证
可利用性 ：3
普遍性：2
可检测性 ：2
技术：3
API的认证机制是一个复杂且容易使人
迷惑的机制。软件工程师和安全工程
师对认证的边界和如何正确实现它可
能存在误解。并且，对攻击者来说，
认证机制是比较容易接触到的目标，
因为它是对所有人开放的。这两点使
得认证组件成为很多攻击的潜在风险
点。
有两个子问题：1、缺少保护机制。负责认证
的API端点必须区别于普通端点对待，并且实
现额外的保护。
2、错误实现保护机制。所使用的保护机制没
有考虑攻击向量，或不是其所适合的使用场
景（如：为物联网设计的认证机制可能并不
适用于WEB应用）。
攻击者可以访问用户在系统中的账
户，读取他们的个人数据，并以他
们的身份执行敏感操作，例如转账
和发送私人消息。
API详情
业务详情
9
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：移动开发团队使/api/articles/{articleId}/comments/
{commentId} 在article 视图中展示comments。通过嗅探移动
应用流量，攻击者可以找出被返回的其他comments的敏感
信息。端点通过在包含个人识别信息（PII）的User 模型上
使用通用的toJSON()方法，将对象序列化。
场景#2：一个基于物联网的视频监控系统允许管理员创建
具有不同权限的用户。当管理员为一个新的安保人员创建
账户时，应当在站点上只分配特定建筑范围的访问权限。
当安保人员使用手机应用时，API会触发调用/api/sites/111/
cameras 来接收可用摄像头传输的数据，并显示在显示屏上。
这个响应包含了一个基于{"id":"xxx","live_access_token":
“xxxxbbbbb”,“building_id”:“yyy”}格式的摄像头详细列表。因
此，当客户端的图形化界面仅显示安保人员应当可以访问
的界面时，实际上API返回了站点内所有摄像头的完整列表。
API脆弱吗？
API在设计上将敏感数据返回至客户端，这些数据通常在展
示给用户前被客户端过滤掉，因此，攻击者可以非常容易
地通过嗅探流量获取敏感信息。
参考资料
外部资料
• CWE-213: Intentional Information Exposure
如何防止？
• 不要依赖客户端来过滤敏感数据；
• 检查API的响应，确认其中仅包含合法数据；
• 在开放一个新的API 端点前，后端工程师应当反复确认
“谁才是真正的数据使用者？”；
• 避免使用to_json() 和to_string()之类的通用方法，而是选用
您真正想要返回的特定属性；
• 将您的应用存储和工作所使用的敏感信息及个人识别信息
（PII）进行分类，并检查所有返回上述信息的 API 调用，确
认这些响应是否构成安全问题；
• 执行schema-based响应验证机制作为额外的安全措施。这
种机制定义并强制检查所有方法返回的数据，包括错误信
息。
API3:2019 过度的数据暴露
可利用性 ：3
普遍性：2
可检测性 ：2
技术：2
利用过度暴露的数据十分容易，通常
通过嗅探流量分析API的响应获取不应
该返回给用户的多余敏感信息。
API依赖客户端实现数据过滤。当API被用作数
据源时，有时开发者会尝试将API用于通用的
方法，而不去考虑所暴露数据的敏感性。自
动化工具通常无法检测到该类漏洞，因为在
没有对应用有深入理解的情况下，很难区分
API返回的合法数据和不应该返回的敏感数据。
过度的数据暴露通常导致敏感数据