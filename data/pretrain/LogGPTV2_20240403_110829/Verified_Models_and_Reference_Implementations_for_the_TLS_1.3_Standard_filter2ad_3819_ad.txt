### Group, Strong Hash Function, and Authenticated Encryption Algorithm

If we assume that TLS 1.3 clients and servers only support strong algorithms, the above query can be simplified to demonstrate that all messages exchanged between uncompromised principals remain confidential. For the remainder of this paper, we will assume that TLS 1.3 exclusively uses strong algorithms, while earlier versions of the protocol may still support weaker ones.

### Authentication and Replay Protection in TLS 1.3

Messages \( m_1 \) sent from the client to the server enjoy robust authentication and replay protection:

- **1-RTT Authentication (and Replay Prevention)**: If a message \( m \) is accepted by the server \( S \) over a session with an honest client \( C \), then this message corresponds to a unique message sent by \( C \) over a matching session.

However, the authentication guarantee for messages \( m_{0.5} \) and \( m_1 \) received by the client is weaker. Since the client cannot determine whether the server sent this data before or after receiving the client's second flight, the client and server sessions may disagree about the client's identity. Therefore, for these messages, we can only verify a weaker property:

- **0.5-RTT Weak Authentication (and Replay Prevention)**: If a message \( m \) is accepted by the client \( C \) over a session with an honest server \( S \), then this message corresponds to a unique message sent by \( S \) over a server session that matches all values in the client session, except possibly the client’s public key \( pk_C \), the resumption master secret \( psk \), and the channel identifier \( cid \).

By allowing the server to send 0.5-RTT data, Draft-18 has weakened the authentication guarantees for all data received by an authenticated client. For example, if a client requests personal data from the server over a client-authenticated 1-RTT session, a network attacker could delay the client's second flight (Certificate−Finished) so that when the client receives the server's 0.5-RTT data, it believes it contains personal data, but the server actually sent data intended for an anonymous client.

### Verifying TLS 1.3 1-RTT Composed with TLS 1.2

We combine our model with the TLS 1.2 model described at the end of §II, ensuring that each client and server supports both versions. We then ask the same queries as above, but only for sessions where the server chooses TLS 1.3 as the version in mode \( S \). Surprisingly, ProVerif identifies two counterexamples:

1. **Weak RSA Decryption**: If a server supports weak RSA decryption with RSA key transport in TLS 1.2, an attacker can use the RSA decryption oracle to forge TLS 1.3 server signatures, thus breaking our secrecy and authentication goals. This attack, found by ProVerif, directly corresponds to the cross-protocol Bleichenbacher attacks described in [47], [7]. It demonstrates that removing RSA key transport from TLS 1.3 is insufficient; one must also disable the use of TLS 1.2 RSA mode on any server whose certificate may be accepted by a TLS 1.3 client.

2. **Weak Hash Functions**: If a client or server supports a weak hash function for signatures in TLS 1.2, ProVerif shows how the attacker can exploit this weakness to forge TLS 1.3 signatures, thereby breaking our security goals. This attack corresponds to the SLOTH transcript collision attack on TLS 1.3 signatures described in [23]. To avoid this, TLS 1.3 implementations must disable weak hash functions in all supported versions, not just TLS 1.3.

After disabling these weak algorithms in TLS 1.2, we can indeed prove all our expected security goals for Draft-18 1-RTT, even when it is composed with TLS 1.2.

### Downgrade Attacks

We may also ask whether TLS 1.3 clients and servers can be downgraded to TLS 1.2. If such a downgrade occurs, we would end up with a TLS 1.2 session, so we need to state the query in terms of sessions where mode \( S \) includes TLS 1.2. ProVerif finds a version downgrade attack on a TLS 1.3 session if the client and server support weak Diffie-Hellman groups in TLS 1.2. This attack closely mirrors the flaw described in [14]. Draft-13 introduced a countermeasure in response to this attack, and we verify that by adding it to the model, the downgrade attack disappears.

Although our models of TLS 1.3 and 1.2 are individually verified in a few seconds each, their composition takes several minutes to analyze. As we add more features and modes to the protocol, ProVerif requires more time and memory. Our final composite model for all modes of TLS 1.3+1.2 takes hours on a powerful workstation.

### 0-RTT with Semi-Static Diffie-Hellman

In earlier versions of TLS, the client had to wait for two round-trips of handshake messages before sending its request. 1-RTT in TLS 1.3 reduces this to one round trip, but protocols like QUIC use a "zero-round-trip" (0-RTT) mode by relying on a semi-static (long-term) Diffie-Hellman key. This design was adapted for TLS in the OPTLS proposal [52] and incorporated in Draft-7 (along with a fix we proposed, as described below).

#### Protocol Flow

The protocol is depicted in Figure 3. Each server maintains a Diffie-Hellman key pair \((s, g^s)\) and publishes a signed server configuration containing \( g^s \). A client initiates a connection with a ClientHello containing its ephemeral key \( g^x \). If the client has already obtained and cached the server’s certificate and signed configuration (from a prior exchange, for example), the client computes a shared secret \( g^{xs} \) and uses it to derive an initial set of shared keys, which can then immediately be used to send encrypted data. To authenticate its 0-RTT data, the client may optionally send a certificate and a signature over the client’s first flight.

The server then responds with a ServerHello message that contains a fresh ephemeral public key \( g^y \). Now, the client and server can continue with a regular 1-RTT handshake using the new shared secret \( g^{xy} \) in addition to \( g^{xs} \).

The 0-RTT protocol continued to evolve from Draft-7 to Draft-12, but in Draft-13, it was removed in favor of a PSK-based 0-RTT mode. Even though Diffie-Hellman-based 0-RTT no longer exists in Draft-18, we analyze its security in this section, both for posterity and to warn protocol designers about the problems they should watch out for if they decide to reintroduce DH-based 0-RTT in a future version of TLS.

#### Verification with ProVerif

We modeled the protocol in ProVerif and wrote queries to check whether the 0-RTT data \( m_0 \) is (forward) secret and authentic. ProVerif is able to prove secrecy but finds that \( m_0 \) is not forward secret if the semi-static key \( s \) is compromised once the session is over. ProVerif also finds a Key Compromise Impersonation attack on authentication: if \( g^s \) is compromised, an attacker can forge 0-RTT messages from \( C \) to \( S \). Furthermore, the 0-RTT flight can be replayed by an attacker, and the server will process it multiple times, thinking that the client has initiated a new connection each time. In addition to these three concerns, which were documented in Draft-7, ProVerif also finds a new attack, explained below, that breaks 0-RTT authentication if the server’s certificate is not included in the 0-RTT client signature.

### Unknown Key Share Attack on DH-based 0-RTT

We observe that in the 0-RTT protocol, the client starts using \( g^s \) without having any proof that the server knows \( s \). A dishonest server \( M \) can claim to have the same semi-static key as \( S \) by signing \( g^s \) under its own key \( sk_M \). If a client connects to \( M \) and sends its client hello and 0-RTT data, \( M \) can simply forward this entire flight to \( S \), which may accept it because the semi-static keys match. This is an unknown key share (UKS) attack where \( C \) thinks it is talking to \( M \) but is, in fact, connected to \( S \).

While the UKS attack is difficult to exploit since \( M \) does not know \( g^{xs} \) and hence cannot decrypt or tamper with messages between \( C \) and \( S \), if the client authenticates its 0-RTT flight with a certificate, \( M \) can forward \( C \)'s certificate (and \( C \)'s signature) to \( S \), resulting in a credential forwarding attack, which is much more serious. Suppose \( C \) is a browser that has a page open at website \( M \); from this page, \( M \) can trigger any authenticated 0-RTT HTTPS request \( m_0 \) to its own server, which then uses the credential forwarding attack to forward the request to \( S \), who will process \( m_0 \) as if it came from \( C \). For example, \( M \) may send a POST request that modifies \( C \)'s account details at \( S \).

The unknown key share attack described above applies to both QUIC and OPTLS but remained undiscovered despite several security analyses of these protocols [42], [56], [52] because these works did not consider client authentication and hence did not formulate an authentication goal that exposed the flaw. We informed the authors of QUIC, and they acknowledged our attack. They now recommend that users who need client authentication should not use QUIC and should instead move to TLS 1.3. We also informed the authors of the TLS 1.3 standard, and on our suggestion, Draft-7 of TLS 1.3 included a countermeasure for this attack: the client signature and 0-RTT key derivation include not just the handshake log but also the cached server certificate. With this countermeasure in place, ProVerif proves authentication for 0-RTT data.

### Pre-Shared Keys for Resumption and 0-RTT

Aside from the number of round-trips, the main cryptographic cost of a TLS handshake is the use of public-key algorithms for signatures and Diffie-Hellman, which are significantly slower than symmetric encryption and MACs. Once a session has been established between a client and server, it is tempting to reuse the symmetric session key as a pre-shared symmetric key in new connections. This mechanism is called session resumption in TLS 1.2 and is widely used in HTTPS, where a single browser typically has many parallel and sequential connections to the same website. In TLS 1.2, pre-shared keys (PSKs) are also used instead of certificates by resource-constrained devices that cannot afford public-key encryption. TLS 1.3 combines both these use-cases in a single PSK-based handshake mode that combines resumption, PSK-only handshakes, and 0-RTT.

#### Protocol Flow

Figure 4 shows how this mode extends the regular 1-RTT handshake. In our analysis, we only consider PSKs that are established within TLS handshakes, but similar arguments apply to PSKs that are shared out-of-band. We assume that the client and server have established a pre-shared key \( psk \) in some earlier session. The client has cached \( psk \), but to remain stateless, the server has given the client a ticket containing \( psk \) encrypted under an encryption key \( kt \). As usual, the client sends a ClientHello with its ephemeral key share \( g^x \) and indicates that it prefers to use the shared PSK \( psk \). To prove its knowledge of \( psk \) and to avoid certain attacks (described below), it also MACs the ClientHello with a binder key \( kb \) derived from the \( psk \). The client can then use \( psk \) to derive an encryption key for 0-RTT data \( m_0 \) and start sending data without waiting for the server’s response. When the server receives the client’s flight, it can choose to accept or reject the offered \( psk \). Even if it accepts the \( psk \), the server may choose to reject the 0-RTT data, skip certificate-based authentication, and (if it does not care about forward secrecy) skip the Diffie-Hellman exchange altogether. The recommended mode is PSK-DHE, where \( psk \) and \( g^{xy} \) are both mixed into the session keys. The server then sends back a ServerHello with its choice, and the protocol proceeds with the appropriate 1-RTT handshake and completes the session.

#### Verifying PSK-based Resumption

We first model the PSK-DHE 1-RTT handshake (without certificate authentication) and verify that it still meets our usual security goals:

- **PSK-DHE 1-RTT (Forward) Secrecy**: Any message \( m \) sent over a PSK-DHE session in 1-RTT is secret as long as the PSK \( psk \) and the ticket encryption key \( kt \) are not compromised until the end of the session.
- **PSK-DHE 1-RTT Authentication and Replay Protection**: Any message \( m \) received over a PSK-DHE session is authenticated and protected from replays.