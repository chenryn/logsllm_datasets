==parents[A]==B，那么就用parents[A]/parents[C]=2/(1/3）=6。为什么可以这
样做呢？因为A/B=2，C/B=1/3，那么A/C=（A/B)/(C/B）即
---
## Page 486
parents[A]/parents[C] = 2/(1/3) = 6。
代码
package leetcode
type stringunionFind struct {
parents map[string]string
vals
map[string]float64
}
func (suf stringunionFind) add(x string) {
if _, ok := suf.parents[x]; ok {
return
suf.parents[x] = x
suf.vals[x] = 1.0
func (suf stringunionFind) find(x string) string {
p :=
11 19
if v, ok := suf.parents[x]; ok {
P = v
}else{
p=x
if x != p {
pp := suf.find(p)
suf.vals[x] = suf.vals[p]
suf.parents[x]= pp
if v, ok := suf.parents[x]; ok {
return V
return x
func (suf stringunionFind) union(x, y string, v float64) {
suf.add(x)
suf. add(y)
px, py := suf.find(x), suf.find(y)
suf.parents [px] = py
// x / px = vals[x]
//x/y=v
//由上面2个式子就可以得出px=vvals[y]/vals[x]
suf.vals[px] = v * suf.vals[y] / suf.vals[x]
---
## Page 487
func calcEquation(equations [][]string, values []float64, queries [][]string)
[]float64{
res, suf := make([]float64,len(queries))，stringunionFind{parents:
map[string]string(}, vals: map[string]float64{}}
for i:= 0;i  8 {
return []string{}
res := []string{}
for i := 0; i  0 && 1en(res) > 0 && c 1 && res[0]==‘o′{
res = res[1:]
return string(res)
404.SumofLeftLeaves
题目
---
## Page 493
Find the sum of all left leaves in a given binary tree.
Example:
3
/
920
15
There are two left leaves in the binary tree, with values 9 and 15
respectively. Return 24.
题目大意
计算给定二叉树的所有左叶子之和。
解题思路
·这一题是微软的面试题。递归求解即可
代码
package leetcode
☆
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func sumofLeftLeaves(root *TreeNode) int {
if root == nil{
return 0
if root.Left != nil && root.Left.Left == nil && root.Left.Right == nil {
return root.Left.Val + sumofLeftLeaves(root.Right)
return sumofLeftLeaves(root.Left) + sumofLeftLeaves(root.Right)
405.ConvertaNumbertoHexadecimal
---
## Page 494
题目
Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two's
complement method is used.
Note:
1. All letters in hexadecimal ( a-f ) must be in lowercase.
2. The hexadecimal string must not contain extra leading 0 s. Iif the number is zero, it is
hexadecimal string will not be the zero character.
aa pais  e o a a  a on paeen s aqn aai a 
number to hex directly.
Example 1:
Input:
26
Output:
"1a"
Example 2:
Input:
-1
Output:
"ffffffff"
题目大意
给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用补码运算方法。
注意：
1.十六进制中所有字母（a-f)都必须是小写。
2.十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符0'来表示；对
于其他情况，十六进制字符串中的第一个字符将不会是0字符。
3.给定的数确保在32位有符号整数范围内。
4.不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。
解题思路
·这一题是水题，将十进制数转换成十六进制的数。需要额外注意0和负数的情况。
---
## Page 495
代码
package leetcode
func toHex(num int) string {
if num == 0{
return "o"
if num  0 {
bitArr = append(bitArr, mp[num%16])
num /= 16
for i := len(bitArr) - 1; i >= 0; i-- {
str += bitArr[i]
return str
409.LongestPalindrome
题目
Given a string which consists of lowercase or uppercase letters, find the length of the longest
palindromes that can be built with those letters.
au aopuld e paaisuo sou sl v, aldexa aog agisuas ase si s
Note:Assume the length of given string will not exceed 1,010.
Example:
---
## Page 496
Input:
"abccccdd"
Output:
7
Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.
题目大意
给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程
中，请注意区分大小写。比如“Aa”不能当做一个回文字符串。注意：假设字符串的长度不会超过1010。
解题思路
·给出一个字符串，要求用这个字符串里面的字符组成一个回文串，问回文串最长可以组合成多长
的？
·这也是一题水题，先统计每个字符的频次，然后每个字符能取2个的取2个，不足2个的并且当
前构造中的回文串是偶数的情况下（即每2个都配对了），可以取1个。最后组合出来的就是最长回
文串。
代码
package leetcode
func longestPalindrome(s string) int {
counter := make(map[rune]int)
for _, r := range s {
counter[r]++
answer := 0
for _,v := range counter {
answer +=v / 22
ifanswer%2 == 0 && v%2 ==1{
answer++
return answer
41o.SplitArrayLargestSum
题目
---
## Page 497
Given an array which consists of non-negative integers and an integer m, you can split the array
oe wns se a a o wole ue am egns snonuo da-ou  o
these m subarrays.
pagses ae sueesuo umolog aue awnsse ee jo yual au si u flao
●1 ≤n ≤ 1000
●1 ≤ m ≤ min(50, n)
Examples:
Input:
nums = [7,2,5,10,8]
Z =Ⅲ