ˆe(g2, w)ρ1 ∧
2
= ˆe(A2, h0)−e ˆex
ˆe(A2 ,w)
ˆe0
  n
^i=1
˜Ai = bβ3
i t−ρ3
i ! ∧ 1 = bβ3 t−ρ3ﬀ(m)
(3)
on message m, which can be computed using the
knowledge of e, x, y, ρ1, ρ2, ρ3, ρ4, α1, α2, β3 and
β4, where α1 = ρ1e, α2 = ρ2e, β3 = ρ3x and β4 = ρ4x.
In the above, we denoted ˆe(gi, h0) as ˆei for i = 0 to 2.
5.2.2 Veriﬁcation
To verify a proof Π2 = (A1, A2, A3, ˜A1, . . . , ˜An, Π3) for
SP K2 on message m, return valid if the veriﬁcation of Π3
on m returns valid and ˜Ai 6= 1 for all i = 1 to n. Return
invalid otherwise.
Remark. The instantiation of SP K3 itself is straightfor-
ward, and is enumerated in the full version of this paper [35].
5.3 Analysis
5.3.1 Security
The correctness of the construction mostly stems from the
correctness of SP K’s. Its proof is thus relatively straight-
forward. We claim that our construction has correctness
without proof for the sake of conciseness.
We now state the following theorem about the security of
our construction. Its proof can be found in the full version
of this paper [35].
Theorem 1
construction of
(Security). Our
the
BLAC system is secure if the q-SDH problem is hard in
(G1, G2) and the DDH problem is hard in G under the
Random Oracle Model.
5.3.2 Complexity
We analyze the eﬃciency of our construction in terms of
both time and space/communication complexities. First we
Table 1: Number of operations during an authenti-
cation with a blacklist of size n.
User
Operation
SP
w/o Preproc. w/ Preproc.
G1 multi-EXP
GT multi-EXP
G multi-EXP
Pairing
7
2
2n + 1
1
0
0
2n
0
4
2
n + 1
2
emphasize that both complexities are independent of the
number of users and SPs in the system. Thus our system
scales well with respect to these two quantities. Both com-
plexities, however, are dependent on the size of the blacklist.
In particular, the time it takes for both a user and a SP to
execute the authentication protocol, as well as communi-
cation overhead for the same protocol, grow linearly with
the current size of the SP’s blacklist.
More speciﬁcally, a blacklist of size n contains n tickets,
each consisting of an ℓ-bit string and an element of G. A
proof Π2 of SP K2 consists of 3 G1 elements, n G elements
and 12 Zp elements. The total communication complexity
for an authentication is thus (n + 2) ℓ-bit strings, 3 G1 ele-
ments, (2n + 1) G elements and 12 Zp elements. SPs need
to store a ticket for every successful authentication.
A breakdown of time complexity of the authentication
protocol into the number of multi-exponentiations (multi-
EXPs)10 in various groups and pairings is shown in Table 1.
Other operations such as G addition and hashing are ne-
glected as they take negligible time. Some preprocessing is
possible at the user before the knowledge of the challenge
message and the blacklist. In fact, all but 2n multi-EXPs in
G can be precomputed by the user.
6. PERFORMANCE EVALUATION
We implemented our construction of the BLAC system in
C and packaged the code into a software library to allow for
easy adoption by diﬀerent potential applications. We used
the Pairing-Based Cryptography (PBC) Library.11 (version
0.4.7) for the underlying elliptic-curve and pairing opera-
tions, which is built on the GNU MP Bignum (GMP) Li-
brary.12 We also made use of several routines in OpenSSL,13
such as its SHA-1 hash function for instantiating the cryp-
tographic hash functions needed by our construction.
The choice of curve parameters can have a signiﬁcant ef-
fect on the performance of an implementation. We used
pairings over Type-A curves as deﬁned in the PBC library.
A curve of such type has the form of E : y2 = x3 + x over
the ﬁeld Fq for some prime q. Both G1 and G2 are the group
of points E(Fq) of order p for some prime p such that p is a
factor of q + 1. The pairing is symmetric and has an embed-
ding degree k of 2. Thus GT is a subgroup of F
q2 . In our
implementation, q and p are respectively 512-bit and 160-
bit. We also used GT for G, the group wherein the tickets
reside.
10 A multi-EXP computes the product of exponentiations
faster than performing the exponentiations separately. We
assume that one multi-EXP operation multiplies up to 3
exponentiations.
11http://crypto.stanford.edu/pbc/
12http://gmplib.org/
13http://www.openssl.org/
The interface to the library we implemented is deﬁned
by a list of C functions. Some of the more important ones
are as follows. setup() is a function that implements the
Setup algorithm. The functions register_gm() and regis-
ter_user(), executed by the GM and the user respectively,
together implement the Registration protocol. Similarly
authen_sp() and authen_user() together implement the
Authentication protocol.
6.1 Prototyping
Using our library, we prototyped a proof-of-concept ap-
plication that allows users to post text messages at a web
forum. This can be thought of as users editing Wikipedia
pages. We did not prototype the user registration part of
the system because our major interest was to study the per-
formance of the Authentication protocol.
In our prototype, the authentication is carried out as fol-
lows. The SP ﬁrst creates a listening socket. Upon the
arrival of a connection request from a user, the SP sets up
an SSL socket with the user using OpenSSL.14 This means
that a conﬁdential and server-authenticated channel is set
up between the user and the SP. From within this channel,
the user and the server respectively execute authen_user()
and authen_sp(). If authen_sp returns failure, then the
SP closes the SSL connection, thereby refusing to serve the
user. Otherwise, SP serves the user using the same channel
by recording the text message sent by the user, along with
the ticket extracted from the authentication transcript. The
SP may then manually inspect the text message and add the
associated ticket to its blacklist.
Alternatively,
by integrating it with SSL server-
authentication, BLAC authentication can be turned into a
mutual authentication, in which the user authenticates the
server’s identity but the server is ensured that and only that
the user is some well-behaving user.
6.2 Experimental Results and Analysis
For our experiments, we used a Dell GX745 desktop ma-
chine with an Intel dual-core 2.16 GHz CPU and 2GB of
RAM, running Linux/Ubuntu 6.10. All the timings reported
below are averaged over 10 randomized runs.
We measured two time quantities related to the execution
of the Authentication protocol: (1) the time it took for an
SP to verify the authentication (i.e., step 4 of the protocol),
and (2) the time it took for a user to inspect the blacklist
and produce a proof (i.e., steps 2 and 3 of the protocol),
with preprocessing enabled. The sum of these two quantities
roughly represents the total latency incurred by the protocol
as perceived by the user if we ignore the network I/O delay,
which is network-dependent.
When the blacklist was empty, it took the SP 0.06s to ver-
ify the authentication. When the blacklist had 400 entries
instead, it took the server 0.46s to do the same. On the
other hand, when the blacklist size was 0 and 400, the user
spent 0.09ms and 0.73s respectively to inspect the black-
list and produce a proof. The estimated protocol latencies
are thus 0.06s and 1.19s respectively. The total communica-
tion overhead due to the authentication protocol is roughly
0.27KB per blacklist entry. Table 2 shows experimental ﬁg-
ures collected with diﬀerent blacklist sizes. Please see our
14For simplicity’s sake, the SP uses a self-signed key-pair to
authenticate himself.
Table 2: Performance of our authentication protocol
with respect to diﬀerent blacklist sizes.
400
1600
800
0
100
200
Blacklist Size (#Entries)
Time (in s) for User to
inspect the blacklist and
generate a proof (steps 2 & 3)
Time (in s) for SP to
verify the proof (step 4)
Estimated Protocol Latency
(in s) perceived by User
Communication
Overhead (in KB)
0.00
0.18
0.36
0.73
1.45
2.85
0.06
0.16
0.26
0.46
0.87
1.68
0.06
0.34
0.62
1.19
2.32
4.53
0.8
27.7
54.7
108.6
216.4
431.8
discussion in Section 7 that elaborates on the feasibility of
our construction in real applications.
Note that our authentication protocol scales well with the
number of cores in CPUs because virtually all computation
that grows linearly with the blacklist size is parallelizable.15
As evidence, on our dual-core machine, all the timings we
collected using our original single-threaded implementation
almost doubled the ﬁgures we just reported above. In our
current multi-threaded implementation, the library interface
includes a bootstrapping function that takes the number of
threads as an input.
7. DISCUSSION
Efﬁciency.
In our cryptographic construction, blacklist veriﬁcation
requires O(n) computations, where n is the number of en-
tries in the blacklist. As indicated by Section 6, our scheme
would support 1,600 blacklist entries with 2 authentications
per second on an 8-core machine.16 Since anonymous au-
thentications will be used at SPs such as Wikipedia only for
certain operations such as editing webpages, we believe this
performance is reasonable. Consider two extreme examples.
In March 2007, Wikipedia averaged about two edits per sec-
ond to its set of English webpages.17 Likewise, YouTube
reported less than one video upload per second on average
in July 2006.18 The communication complexity required to
sustain one or two authentications per second with 1,600
blacklist entries would be about 3.5 to 7 Mbps for the SP.
Such a data rate would be high for an individual server,
but would be reasonable for large SPs such as YouTube and
Wikipedia, which may have distributed servers across the
nation for handling large bandwidth. Based on these cal-
culations, SPs with much lower authentication rates than
Wikipedia or YouTube (e.g., one authentication every few
seconds) can easily be served on commodity hardware and
T-1 lines. We reiterate that our construction is the ﬁrst to
allow anonymous blacklisting without TTPs, and more eﬃ-
cient blacklist checking, perhaps in O(log n) or O(1) time, is
an open problem that deserves further research. Faster veri-
ﬁcation will allow much higher rates of authentication while
15The only exception is the two calls to SHA-1, but they take
comparably negligible time.
16An 8-core Mac Pro with two 3.0GHz Quad-Core Intel Xeon
processors was available for under $4,000 at the time of writ-
ing.
17http://stats.wikimedia.org/EN/PlotsPngDatabaseEdits.htm
18http://technology.guardian.co.uk/weekly/story/0,,
1823959,00.html
supporting extremely large blacklists, and this problem is,
therefore, worthy of further study.
Interleaving authentications.
One concern is that an individual user may attempt to
interleave multiple authentications and take up several hun-
dreds of entries in the blacklist by misbehaving several times
in a short span of time. Such an attack is possible because
users can parallelize several anonymous sessions with an SP.
A promising approach would be to use a scheme such as
Camenisch et al.’s periodic n-times anonymous authentica-
tion [9] to rate-limit the number of anonymous accesses from
users. In such a scheme, an anonymous user would be able
to access the SP anonymously at most n times within a time
period. For example, for n = 10 and a time period of 1 day,
a single user would be able to contribute at most 10 entries
to the blacklist in a given day.
Remark. Since concurrent sessions are preempted while
an entry is added (atomically) to a blacklist, our system
guarantees that once an entry is added to the blacklist at
time t, the blacklisted user will not be able to access the
service after time t (or until unblacklisted at a later time).
Enrollment issues.
We assume that the Group Manager issues only one cre-
dential per legitimate user and assume it is diﬃcult to per-
form “Sybil” attacks [22], where users are able to obtain mul-
tiple credentials by posing as diﬀerent identities. The Sybil
attack, however, is a challenging problem that any creden-
tial system is vulnerable to, and we do not attempt to solve
this problem here.
In a real deployment of a BLAC system, users may eventu-
ally misplace their credentials, or have them compromised.
Since that credential may be blacklisted by an SP, issuing
a new credential to a user can help that user circumvent
anonymous blacklisting. As a trade-oﬀ, we suggest that if
a user misplaces his or her credential, that user is issued a
pseudonymous credential for a certain amount of time called
the “linkability window.” If a user repeatedly attempts to
acquire new credentials, the linkability window of that user
can be increased to curb misbehavior.
Allowing the sharing of (entries in) blacklists.
We have presented our construction of the BLAC system
in which an SP Bob cannot use an entry from another SP’s
blacklist (corresponding to Alice) to prevent Alice from suc-
cessfully authenticating to Bob. Nevertheless, in some ap-
plications, a group of SPs may desire to block users misbe-
having at any one of the SPs.
Our system can be modiﬁed to allow such sharing—
instead of computing the tag as t = H(s||Bob)x, one com-
putes the tag as t = H(s)x regardless of the SP for which
the ticket is meant. Tickets with tags computed this way
are sharable between SPs because adding a user’s ticket bor-
rowed from another SP is no diﬀerent from the SP obtaining
the ticket directly from the user. Such a change in con-
struction, however, makes it necessary to redeﬁne security
notions. For example, Wikipedia may decide to add only
YouTube’s tickets to its blacklist. If a user’s authentication