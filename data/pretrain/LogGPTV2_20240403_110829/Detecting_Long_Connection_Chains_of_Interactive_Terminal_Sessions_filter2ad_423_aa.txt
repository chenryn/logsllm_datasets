title:Detecting Long Connection Chains of Interactive Terminal Sessions
author:Kwong H. Yung
Detecting Long Connection Chains of Interactive
Terminal Sessions
Kwong H. Yung
Stanford University Statistics Department
390 Serra Mall; Stanford CA 94305-4020; USA
PI:EMAIL
Abstract. To elude detection and capture, hackers chain many
computers together to attack the victim computer from a distance.
This report proposes a new strategy for detecting suspicious remote
sessions, used as part of a long connection chain. Interactive terminal
sessions behave diﬀerently on long chains than on direct connections.
The time gap between a client request and the server delayed ac-
knowledgment estimates the round-trip time to the nearest server.
Under the same conditions, the time gap between a client request
and the server reply echo provides information on how many hops
downstream the ﬁnal victim is located. By monitoring an outgoing
connection for these two time gaps, echo-delay comparison can identify
a suspicious session in isolation. Experiments conﬁrm that echo-delay
comparison applies to a range of situations and performs especially well
in detecting outgoing connections with more than two hops downstream.
Keywords: Stepping stone, connection chain, intrusion detection, com-
puter security, network security, network protocol, terminal session, de-
layed acknowledgment, reply echo, echo delay.
1 Introduction
Network security and intrusion detection have become important topics of ac-
tive research [1,4,5,3]. As the use of the Internet becomes more common and
widespread, so have network attacks and security breaches. Because the growing
number of network attacks is ever more costly, network security and intrusion
detection now play a crucial role in ensuring the smooth operation of computer
networks.
1.1 Motivation
A skilled computer hacker launches attacks from a distance in order to hide his
tracks. Before launching an actual attack with noticeable consequences, a skilled
hacker will break into many computers across many political and administra-
tive domains, to gather computer accounts. With access to multiple computer
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 1–16, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
2
K.H. Yung
−m −→ −m + 1 −→ . . . −→ −1 −→ 0 −→ 1 −→ . . . −→ n − 1 −→ n
Fig. 1. Typical connection chain. Relative to stepping stone 0, machines −m,−m +
1, . . . , −1 are upstream and machines 1, 2, . . . , n are downstream.
accounts, the hacker can chain these computers through remote sessions, using
the intermediate computers in the chain as stepping stones to his ﬁnal victim.
Figure 1 shows a typical connection chain. Computer −m attacks computer
n, via stepping stones −m+1,−m+2, . . . , 0 . . . , n−2, n−1. Since the logs of the
ﬁnal victim n traces back only to the nearest stepping stone n−1, the originating
point −m of the attack cannot be determined without logs from the upstream
stepping stones. Although the originating point used by the hacker may be found
through repeated backtrace, this process is slow and complicated because the
stepping stones belong to diﬀerent political and administrative domains and
often do not have logs readily available. Even when the originating attack point
is found after costly investigation, the hacker will have already left and eluded
capture.
This report presents a simple technique to detect interactive terminal sessions
that are part of long connection chains. Once an outgoing session is found to
have many hops downstream, the server machine can terminate the outgoing
connection, to avoid being used as a stepping stone in the long connection chain.
Moreover, the suspicious outgoing terminal session is useful as a basis for ﬁnding
other sessions on the same chain.
1.2 Previous Approaches
Staniford-Chen and Heberlein [8] introduced the problem of identifying connec-
tion chains and used principal-component analysis to compare diﬀerent sessions
for similarities suggestive of connection chains. Because the packet contents were
analyzed, the technique did not apply to encrypted sessions.
Later, Zhuang and Paxson [10] formulated the stepping stones problem and
proposed a simpler approach to ﬁnding two correlated sessions, part of the same
connection chain. By using only timing information of packets, the technique
also applied to encrypted sessions.
Both [8] and [10] aim to match similar session logs, indicative of connection
chains. Unless sessions on the same connection chain are in the same pool of
collected sessions, however, this approach fails to identify suspicious sessions.
For example, [10] analyzed logs from a large subnet at UC Berkeley. A hacker
initiating an attack from a computer on the subnet would not be detected unless
his chain connects back into the subnet.
The strategy of grouping similar sessions also inadvertently detects many be-
nign, short connection chains because legitimate users often make two or three
hops to their ﬁnal destinations. For example, the Stanford University database
Detecting Long Connection Chains of Interactive Terminal Sessions
3
research group has one well-protected computer that allows incoming connec-
tions only from trusted computers on the Stanford University network. To con-
nect to this protected machine, an oﬀ-campus user must connect via another
computer on the campus network. Because restrictions on incoming connections
are quite common in heavily protected networks, short connection chains are
often necessary and harmless.
1.3 New Strategy
This report presents an alternative strategy for identifying connection chains.
Because sessions on a long chain behave diﬀerently than sessions on a direct
connection, a suspicious session can be detected in isolation without ﬁnding
other similar sessions on the same connection chain. The proposed technique
makes use of delayed-acknowledgment packets, response signals found in typical
protocols for interactive terminal sessions, such as telnet, rlogin, and secure shell.
Like [10], echo-delay comparison, the technique proposed here, relies only on
timing information of packets and so applies equally well to encrypted sessions.
Rather than comparing sessions in a large pool, echo-delay comparison operates
on a single session and thus solves the shortcomings of [8] and [10]. A suspicious
session that is part of a long connection chain can be identiﬁed even without
ﬁnding another correlated session.
Clearly many factors determine the behavior of a connection, including the
network, the machine, the user, and the session transcript. Therefore, isolat-
ing the distinctive properties of sessions in long connection chains is extremely
diﬃcult. Yet research in this strategy is worthwhile because looking for similar
sessions from a large pool has many inherent drawbacks. Of course, these two
strategies are not mutually exclusive but rather complementary.
To balance out the many uncontrolled factors in a connection, echo-delay
comparison relies on the logistics of interactive terminal sessions. Because details
of speciﬁc protocols involved are used, echo-delay comparison does not apply to
all types of connections. Nevertheless, the technique is quite simple and can be
extended to handle related protocols.
1.4 Elementary Solutions
The original Internet protocols were not designed with security as the main ob-
jective. Under the shield of anonymity oﬀered by the Internet, malicious users
can attack many computers remotely. Although the prevention and detection of
attacks are now important, the widespread use of older protocols is diﬃcult to
change because the global connectivity of the Internet often requires compatibil-
ity with older software. Upgrading the vast number of computers on the Internet
proves to be nearly impossible.
Perhaps the simplest way to prevent connection chains from forming is to
forbid all incoming sessions from executing any outgoing terminal sessions. Some
servers indeed do adopt this policy and forbid most outgoing connections. Yet
implementing such a strict policy severely limits legitimate users.
4
K.H. Yung
Any policy blindly disabling outgoing connections is too restrictive in most
settings because there are many legitimate reasons to connect via a short chain.
On many networks, users are allowed external connections only through a dedi-
cated server, which is heavily protected and closely monitored. So to connect to
an outside host, users must connect via the dedicated server. In this case, the
gateway server cannot blindly forbid outgoing connections.
Legitimate computer users often use short connection chains to get from one
host to another. Malicious hackers generally use long connection chains to cover
their tracks before executing an attack. To protect a machine from being used
as a stepping stone in a long chain, a reasonable policy would be to terminate
sessions that continue multiple hops downstream.
1.5 Outline of Report
Following this introduction, Section 2 provides a brief background of the network
signals sent during an interactive terminal session between a client and a server
in a direct connection. Section 3 then explains the dynamics of a connection
chain and introduces two time gaps useful for detecting long connection chains.
Next, Section 4 presents the mathematics for calculating and comparing the two
time gaps. Afterwards, Section 5 presents two sets of experiments used to test
the proposed technique. Towards the end, Section 6 discusses the advantages and
limitations of the ideas proposed in this report. Finally, Section 7 summarizes
this report’s main conclusions.
2 Background
By comparing its incoming sessions with its outgoing sessions, a machine can de-
termine that it is being used as a stepping stone in a connection chain. Standard
protocols for remote sessions do not provide information about the length of
the connection chain. So in isolation, the machine cannot in principle determine
whether it is being used as part of a long chain or just a short chain.
2.1 Reply Echo
In most client implementations of interactive terminal sessions, each individual
character typed by user will initiate a packet sent from the client to the server.
Once the server receives the character packet, it usually echoes the character
back to the client, instructing the client to display the typed character on the
client screen. This reply echo is the typical response of the server to a non-special
character from the client.
When the user types a carriage return, the carriage return received at the
server usually triggers the server to execute a special command. After executing
the command, the server then sends back command output. Figure 2 illustrates
a typical exchange between a client and a server on a direct connection.
Detecting Long Connection Chains of Interactive Terminal Sessions
5
client machine 0
server machine 1
time
0
0
0
0
l
l
s
)SSSSSSSSSSSSSSSSSSS
ukkkkkkkkkkkkkkkkkkk
)SSSSSSSSSSSSSSSSSSS
ukkkkkkkkkkkkkkkkkkk
)SSSSSSSSSSSSSSSSSSS
ukkkkkkkkkkkkkkkkkkk
[output]
[return]
s
1
1
1
Fig. 2. Interactive session on direct connection. Client 0 sends the ls command to
server 1 and receives back the directory listing. The vertical time axis is not drawn to
scale.
2.2 Delayed Acknowledgment
Most often, the server responds soon enough with a nonempty packet, which also
functions to acknowledge the client request. If the requested command requires
a long execution time, then the server times out and sends a so-called delayed
acknowledgment. This delayed-acknowledgment packet contains no content but
signals to the client that the server indeed received the client request. Thus, the
delayed acknowledgment functions to keep the conversation between the client
and the server alive, at the expense of sending an empty packet. The server
sends a delayed acknowledgment only when it cannot send a nonempty response
in time. The server implementation determines the actual delay tolerance before
a delayed acknowledgment is sent from the server to client.
Similarly, when the server sends a nonempty packet to the client, the client
must acknowledge the server. Usually this acknowledgment to the server is sent
by the client along with the next character packet. If the user is slow to type the
next character, however, the client times out and sends a delayed acknowledg-
ment to the server. The client implementation determines the delay tolerance
before a delayed acknowledgment is send from the client to the server.


)
u
)
u
)
u
6
K.H. Yung
3 Theory
A machine used as a stepping stone in a connection chain only knows about its
incoming and outgoing sessions. Typically the stepping stone only passes the
packet information from its client onto its server. In the Figure 1, the stepping
stone 0 acts as a server to receive the incoming connection from upstream client
machine −1. The stepping stone 0 then acts as a client to forward the outgoing
connection onto downstream machine 1. This propagation of signals starts from
the very ﬁrst originating client −m to the ﬁnal victim destination n.
After the ﬁnal victim n receives the packet and executes the command, the
output from n is then forwarded back to the originating client −m in a similar
manner. The intermediate stepping stones −m + 1,−m + 2, . . . , n − 2, n − 1
act mainly as conduits to pass the packets between −m and n. Along the way,
packets may be fragmented or coalesced. Moreover, packets may be lost and
retransmitted. Because human typing generates character packets separated by
relatively large time intervals, character packets are generally not coalesced.
3.1
Interactive Terminal Sessions
Protocols for standard interactive terminal sessions do not provide information
about an outgoing connection beyond the ﬁrst hop. So there is no certainty about
how many additional hops an outgoing connection will continue downstream. In
this scenario, the client machine only communicates with the nearest server
one hop downstream and does not know about additional servers several hops
downstream.
After sending out a character packet to the server, the client waits for a re-
ply echo from the server. If the ﬁnal victim machine is many hops downstream
from the client, then the nearest server must forward the character packet down-
stream. Upon receiving the character packet, the ﬁnal victim then sends the reply
echo to the client via the client’s nearest server. To the client, the reply echo
appears to come from the nearest server.
3.2 Dynamics of Connection Chains
In a connection chain with many hops downstream, there is a long time gap
between the client request and the server reply echo because the nearest server
must forward the client request to the ﬁnal victim and then pass the reply echo
back to the client. A long delay between the client request and the server reply
echo also results if the client and the nearest server are separated by a noisy
connection or if the server is just slow. Consequently, a long echo delay alone is
not suﬃcient to suggest that there are many hops downstream.