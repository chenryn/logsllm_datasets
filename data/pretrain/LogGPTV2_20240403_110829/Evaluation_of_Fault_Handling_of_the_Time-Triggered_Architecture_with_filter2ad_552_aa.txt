title:Evaluation of Fault Handling of the Time-Triggered Architecture with
Bus and Star Topology
author:Astrit Ademaj and
Håkan Sivencrona and
G&quot;unther Bauer and
Jan Torin
Evaluation of Fault Handling of the Time-Triggered Architecture with Bus and 
Star Topology 
Astrit Ademaj1, Håkan Sivencrona2, Günther Bauer1, Jan Torin3
1) Vienna University of Technology Real-Time Systems Group, Vienna, Austria 
{ademaj,gue}@vmars.tuwien.ac.at 
2) SP Swedish National Testing and Research Institute Department of Electronics and Software, Boras, Sweden 
PI:EMAIL
3) Chalmers University of Technology Department of Computer Engineering, Gothenburg, Sweden
PI:EMAIL 
Abstract 
fault 
Arbitrary  faults  of  a  single  node  in  a  time-triggered 
architecture  (TTA)  bus  topology  system  may  cause 
error  propagation  to  correct  nodes  and  may  lead  to 
inconsistent system states. This has been observed in 
validation  work  using  software  implemented  fault 
injection  (SWIFI)  and  heavy-ion 
injection 
techniques  in  a  TTA  cluster.  In  a  TTA  system,  the 
membership  and  the  clique  avoidance  algorithms 
detect  state  inconsistencies  and  force  the  nodes  that 
do not have the same state with the state of majority 
of  nodes,  to  restart.  Changing  the  interconnection 
structure  of  the  cluster to a  star  topology  allows the 
use of star couplers that will isolate faults of a node, 
thus  guaranteeing  consistency,  even  in  the  presence 
of  arbitrary  node  failures.  The  same  SWIFI  and 
heavy-ion  fault  injection  experiments  that  caused 
error  propagation  in  bus-based  TTA  clusters,  were 
performed 
the  star  configuration.  No  error 
propagation  was  observed  in  a  TTA  system  with  the 
star  topology  during  the  execution  of  SWIFI  and 
heavy-ion experiments
in 
1 
Introduction 
Fault-tolerant systems are being used more and more in 
complex  and  critical  applications  applied  in  automotive 
and aircraft industry, nuclear power plants, process control, 
and  robotics.  The  design  of  computer  systems  to  be 
embedded  in  critical  real-time  applications  is  a  complex 
task.  Such  critical  systems  impose  high  dependability 
requirements, because even a small (temporal) fault of the 
embedded  computer  system  can  lead  to  catastrophic 
failures.  Therefore,  it  is  not  sufficient  that  such  systems 
meet  hard  real-time  constraints  imposed  by  the  physical 
environment;  they  must  guarantee  to  meet  specified 
constraints  despite  the  occurrence  of  physical  faults. 
Another concern of a safety-critical system is the ability to 
assure  the  consistent  state  of  the  distributed  computer 
nodes of the system. In the past few years there has been a 
tendency to increase the safety of vehicles by introducing 
intelligent control systems like brake-by-wire and steer-by-
wire.  In  a  brake-by-wire  system  [13],  each  wheel  node 
calculates 
the 
computation of the local node. If one of the wheel brakes is 
not functioning, the system enters a degraded mode where 
three remaining wheel nodes will distribute the pressure on 
the  local  brakes,  such  that  the  vehicle  can  perform  safe 
braking. To achieve this functionality, a consistent view of 
the global state in all nodes is required. 
the  braking  pressure  according 
to 
The  Time-Triggered  Architecture  (TTA)  [9]  is  an 
architecture  for  safety-critical  applications  like  drive-by-
wire and fly-by-wire. At the core of the TTA is the TTP/C 
communication  protocol  [10]  running  in  a  dedicated 
microcontroller. A prototype micro-programmable version 
of a TTP/C controller chip was designed and implemented 
in the course of the EU-funded ESPRIT OMI project TTA. 
The  TTA  based  on  a  bus  topology  using  the  above 
mentioned  controller  was  validated  by  multi-million  fault 
injection  experiments  performed  in  the  course  of  the  EU 
IST  Project  FIT  [6].  Different  fault  injection  techniques 
were  applied  to  validate  the  TTA,  starting  from  runtime 
software 
injection,  pin-level  fault 
injection,  fault  injection  in  the  C-Sim  simulation  model, 
heavy-ion  radiation,  fault  injection  into  the  protocol  code 
(permanent  pre-runtime  SWIFI),  and  VHDL 
fault 
injection.  
implemented  fault 
The  TTP/C  fault  hypothesis  states  that  the  TTP/C 
protocol is designed to tolerate a single fault in one of the 
constituent  parts  (nodes,  buses)  of  the  system  without  an 
impact  on  the  operation  of  the  whole  system  [10].  Each 
TTP node in a bus-based configuration has a bus guardian, 
which  is  claimed  to  be  an  autonomous  (independent) 
subsystem of a node and allows the node to transmit only 
within the nodes scheduled transmission window [17]. The 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:59:21 UTC from IEEE Xplore.  Restrictions apply. 
bus  guardian protects  the  bus  from  temporal  transmission 
failures.  
In the first part of this paper we present the results of 
SWIFI and heavy-ion experiments in the TTA with the bus 
topology  and  the  dedicated  controller  TTP/C-C1  [15].    It 
was  shown  that  in  the  current  implementation  of  the 
TTP/C communication controller 
•  slightly-off-specification (SOS) failures are intricate to 
• 
• 
handle [1], 
it  is  possible  to  violate  the  fault  hypothesis  of  the 
TTP/C protocol, 
the implementation of the bus guardian in the TTP/C-
C1  communication  controller  is  not  fully  independent 
(autonomous).  
the 
star 
Two  solutions  to  implement  independent  bus  guardians 
were  proposed  [1],  and  the  most  cost  efficient,  with  a 
centralized  guardian  and 
topology  was 
implemented.  With  the  centralized  guardian  the  fault 
hypothesis of the TTP/C [10] can be extended beyond the 
restricted  “single  fault  assumption”  to  tolerate  arbitrary 
node failures [8]. Validation of the latter assumption using 
the  SWIFI  and  heavy-ion  fault  injection  experiments  is 
presented in the last part of this paper. 
  The  remainder  of  this  paper  is  organized  as  follows: 
Section  2  describes  the  Time-Triggered  Architecture  in 
general.  In  Section  3  the  results  of  SWIFI  and  heavy-ion 
fault  injection  experiments  in  a  TTA  bus  system  are 
presented.  A  definition  of  fault  containment  and  error 
containment  regions  are  given  in  Section  4.  Section  5 
describes the design requirements and the implementation 
of the central bus guardian. Validation of the TTA with the 
central  bus  guardian  by  means  of 
injection 
experiments  is  given  in  Section  6.  The  paper  ends  with 
concluding remarks in Section 7. 
fault 
2 
Overview of the Time-Triggered 
Architecture 
The  Time-Triggered  Architecture  (TTA)  consists  of  a 
system  of  n  nodes  (called  TTP  nodes)  interconnected  by 
two  (replicated)  communication  channels  denoted  as 
channel 0 and channel 1 (Figure 1). The nodes access the 
replicated channels according to a Time Division Multiple 
Access  (TDMA)  scheme.  Each  node  in  the  system  is 
assigned a unique transmission slot, which is specified in a 
static  data  structure  of  the  TTP/C  controller  called  the 
Message Description List (MEDL) [10]. 
Node
Node
1
2
Node
n
    CNI
HOST (OS & Appl.)
Channel 0
Channel 1
TTP/C
A  TTP  node  consists  of  a  TTP/C  communication 
controller, a Communication Network Interface (CNI), and 
a host controller. The CNI (implemented as a Dual Ported 
RAM)  is  an  interface  between  the  application  layer  and 
protocol layer of a TTP node. A set of interconnected and 
synchronized  TTP  nodes  is  called  a  TTP  cluster.  The 
TTP/C  protocol  runs  on 
the  TTP/C  communication 
controller, whereas applications run on the host subsystem. 
In the TTA with the bus topology (Figure 1), each node is 
equipped with a local bus guardian [17]. The bus guardian 
is an autonomous subsystem of a TTP node, which protects 
the  communication  channels  from  temporal  transmission 
failures.  It  allows  transmissions  only  within  the  slots 
assigned  to  the  respective  node.  The  bus  guardian  has  a 
separate  oscillator  to  prevent  temporal  coupling  with  the 
communication  controller  and  to  prevent  common  mode 
failures. The main characteristics of the TTA are common 
notion  of  time  in  all  nodes  and  the  provision  of  fully 
specified  interfaces  between  these  nodes.  The  TTP/C 
protocol basically provides three services to the application 
level: 
•  deterministic message sending,  
•  provision of a global time base and  
•  membership  service  –  each  correct  TTP  node  has  the 
actual  view  of  which  nodes  are  currently  active 
(operating) in the cluster. This information is stored in 
the membership vector, which consists of a vector of n
bits, where n is the number of nodes in the cluster. 
In a TTA system, nodes transmit N-frames (containing 
the  messages  exchanged  among  the  nodes  in  the  cluster) 
and  I-frames  (contain  the  local  view  of  global  system 
state). I-frames are used by nodes that are reintegrating in 
an already synchronized cluster or during system startup. I-
frames consist of: local view of global time, slot position, 
application  mode  and 
the  membership  vector.  The 
information  contained  in  I-frames  is  called  the  C-state 
(cluster state).  
In  the  TTA  star  topology  (Figure 2)  two  redundant 
central  hubs  (one  for  each  communication  channel) 
implement  central  guardians  whereby  no  bus  guardian 
(needs to) exist(s) at local nodes [3]. A detailed description 
of the star coupler implementation is given in Section 5. 
Node
1
Node
2
Node
n
    CNI
HOST (OS & Appl.)
TTP/C
Star coupler
Channel 0
Star coupler
Channel 1
Figure 1: TTA bus topology 
       Figure 2: TTA star topology
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:59:21 UTC from IEEE Xplore.  Restrictions apply. 
3 
TTA Bus Topology Validation  
The TTP/C protocol relies on a single-fault assumption 
and claims that a single fault in any of its constituent parts 
(nodes,  communication  channels)  should  not  impact  the 
operation  of  the  system (fault  hypothesis)  [10].  The  fault 
hypothesis of the TTP/C protocol assumes that a TTP node 
is fail-silent. A fail-silent component either delivers correct 
service  or  does  not  deliver  any  service  at  all.  If  the 
delivered  service  is  untimely  (a  computational  result  is 
generated too late or too early), a fail-silence violation in 
the time domain has occurred. If the value of the delivered 
service  does  not  comply  with  the  specification,  a  fail-
silence violation in the value domain has occurred. It is the 
duty of the communication subsystem (TTP/C protocol) to 
assure  that  no  fail-silence  violations  in  the  time  domain 
occur,  i.e.,  the  messages  from  one  node  should  be 
transmitted  within  the  predefined  time  interval.  Fail-
silence  violations  in  the  value  domain  are  partly  handled 
by  error  detection  mechanisms  (EDM)  of  the  TTP/C 
protocol 
the  message 
transmission).  Any  fail-silence  violation  in  the  value 
domain  not  handled  by  the  protocol  (faults  that  occur 
before  message  transmission  or  after  message  reception) 
need  to  be  handled  by  the  end-to-end  error  detection 
mechanism implemented in the application layer.
that  occur  during 
(faults 
Consider  an  example  when  a  node  transmits  a  correct 
frame (protected by CRC) on the broadcast bus and during 
the transmission the frame is corrupted because of an EMI 
(electromagnetic  interference)  fault.  In  this  case,  receiver 
nodes  will  judge  the  frame  as  incorrect  (the  CRC
checksum  computed  at  the  receiver  does  not  match  with 
the  received  CRC  checksum  because  the  content  of  the 
transmitted frame was changed by a fault) and will reject 
this frame as an incorrect frame. If nodes are considered to 
be  fail-silent,  a  receiver  node  will  report  a  fail-silence 
violation,  because  it  has  received  an  incorrect  frame 
(although  a  correct  frame  was  transmitted  by  the  sender 
node).  Therefore,  in  practice,  we  denote  a  TTP  node 
operates  correctly  if  it  either  delivers  a  correct  frame,  or 
detectable  erroneous  frames.  Detectable  erroneous  frames 
allow the error detection mechanisms (EDM) to detect the 
erroneous  transmission  consistently  at  all  correct  receiver 
nodes. This will ensure that all correct receivers maintain a 
consistent  view  of  the  distributed  system  state.  If  the 
erroneous  transmission  is  inconsistently  detected  by  the 
EDMs of the (correct) receiver nodes, receivers will arrive 
at  differing  views  of 
the  distributed  system  state. 
Inconsistent  states  in  the  TTP/C  are  resolved  by  the 
membership  mechanism  and 
the  clique  avoidance 
algorithm [10]. 
A fail-silence violation in the time domain occurs when 
a  node  (say  A)  sends  outside  the  specified  time  window 
and collides with the frames sent by another node (say B), 
or  even  if  no  collision  occurred,  but  the  transmissions  of 
node  A  and  B  are  close  to  each  other,  and  the  receiver 
might  interpret  them  as  one  transmission.  In  both  cases, 
other  nodes  will  reject  frames  sent  from  nodes  A  and  B, 
and both A and B will be removed from the membership. 
A fail-silence violation in the time domain may thus cause 
error  propagation  from  a  faulty  sender  (node  A)  to  a 
correct  sender  (node  B).  The  communication  subsystem 
(TTP/C  protocol)  should  assure  that  no  error  propagation 
occurs.  If  this  can  be  guaranteed,  proper  operation  of  the 
whole  system  is  provided  by  using  replica  nodes  (one 
replicated node can fail without affecting the operation of 
the system). 
In this paper we focus on validation of the TTA against 
error  propagation  scenarios  by  using  two  fault  injection 
techniques.  Fault  injection  experiments  are  performed  in 
only  one  node.  If,  during  the  execution  of  fault  injection 
experiments, an error is detected in a node other than the 
node  under  test,  it  is  a  clear  indication  that  an  error  has 
propagated  from  the  node  under  test.  To  clarify,  we 
validate 
isolation  capabilities  of  current 
implementation of the local bus guardian in the TTP nodes. 
the  failure 