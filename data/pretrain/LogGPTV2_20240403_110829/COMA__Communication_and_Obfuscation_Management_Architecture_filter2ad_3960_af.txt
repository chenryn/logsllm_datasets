### Graphic Schemes for Ultra-High-Speed and Ultra-Security

Our experimental results demonstrate that, compared to the state-of-the-art key management architecture, FORTIS, COMA reduces the area overhead by 14% while addressing several of the shortcomings of previous work.

#### Figure 9: Energy Breakdown in COMA

**Key Generation and Security:**
- **COMA:** The communication and authentication key is generated using a Physical Unclonable Function (PUF). This ensures that the secret key is generated dynamically and securely.
- **FORTIS:** Relies on embedding the private and public keys in GDSII. This approach poses a risk as the private key could be known during fabrication, potentially allowing the entire activation process to be faked in software.

**Security Enhancements:**
1. **Key Generation:**
   - **FORTIS:** The private key is embedded in GDSII, making it vulnerable to fabrication attacks.
   - **COMA:** The secret key is generated by PUF and read out securely using public key cryptography, preventing such attacks.

2. **Side-Channel Attacks (SCA):**
   - **FORTIS:** The use of the private key for chip authentication is susceptible to SCA.
   - **COMA:** Secret-key cryptography is side-channel protected, and public-key encryption is used only once, making it secure against SCA.

3. **Fault Attacks:**
   - **FORTIS:** There is a risk of deploying a fault attack by fixing the value of the session key \( K_s \).
   - **COMA:** Such an attack would require fixing the PUF output or replacing the PUF with a known function. This can be detected by performing statistical tests on the PUF response (PUF health check).

4. **Activation and Key Storage:**
   - **FORTIS:** Activation is done once, necessitating the storage of the obfuscation key in an untrusted chip.
   - **COMA:** Removes the need to store the obfuscation key in an untrusted chip. In R-COMA, activation occurs on demand, and the key is removed after power down or reset. In 2.5D-COMA, the activation key is stored in a trusted chip.

5. **Communication Modes:**
   - **COMA:** Introduces two new communication mechanisms:
     - **DCC (Double Cipher Communication) Mode:** For added security.
     - **LCC (Low-Latency Communication) Mode:** For high-speed communication.

6. **Random Number Generation:**
   - **COMA:** Uses a True Random Number Generator (TRNG) to produce the seed for the Pseudorandom Number Generator (PRNG), enhancing security.
   - **FORTIS:** Uses a PRNG without specifying a random source for its seed, increasing vulnerability.

#### Energy Consumption Analysis
- **DCC (AES-GCM + AES) and LCC (AES-GCM):**
  - Message Size (Bytes): 16, 64, 128, 256, 512, 1024
  - Energy (nJ): 0, 0.2, 0.4, 0.6, 0.8, 1.0
- **DCC (ACORN + Trivium) and LCC (ACORN + Trivium):**
  - Message Size (Bytes): 16, 64, 128, 256, 512, 1024
  - Energy (nJ): 0, 0.2, 0.4, 0.6, 0.8, 1.0

**References:**
[1] A. B. Kahng, J. Lach, W. H. Mangione-Smith, S. Mantik, I. L. Markov, M. Potkonjak, P. Tucker, H. Wang, and G. Wolfe. Watermarking Techniques for Intellectual Property Protection. In Proceedings of the Annual Design Automation Conference (DAC), pages 776–781, 1998.
...
[53] Y. Xie and A. Srivastava. Mitigating SAT Attack on Logic Locking. In International Conference on Cryptographic Hardware and Embedded Systems (CHES), pages 127–146, 2016.

---

This revised version provides a clearer and more structured presentation of the comparison between FORTIS and COMA, highlighting the key differences and improvements. The references are also formatted consistently for better readability.