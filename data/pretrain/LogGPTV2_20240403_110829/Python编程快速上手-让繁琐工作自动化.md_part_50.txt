# Create and start the Thread objects.
downloadThreads = [] # a list of all the Thread objects
for i in range(0, 1400, 100): # loops 14 times, creates 14 threads
downloadThread = threading.Thread(target=downloadXkcd, args=(i, i + 99))
downloadThreads.append(downloadThread)
downloadThread.start()
首先，我们创建了一个空列表downloadThreads，该列表帮助我们追踪创建的多个
Thread对象。然后开始for循环。在每次循环中，我们利用threading.Thread()创建一个
Thread对象，将它追加到列表中，并调用start()，开始在新线程中运行downloadXkcd()。
因为for循环将变量i设置为从0到1400，步长为100，所以i在第一次迭代时为0，
第二次迭代时为 100，第三次为 200，以此类推。因为我们将 args=(I, I+99)传递给
threading.Thread()，所以在第一次迭代时，传递给downloadXkcd()的两个参数将是0
和99，第二次迭代是100和199，第三次是200和299，以次类推。
由于调用了Thread对象的start()方法，新的线程开始运行downloadXkcd()中的
代码，主线程将继续for循环的下一次迭代，创造下一个线程。
第 3步：等待所有线程结束
主线程正常执行，同时我们创建的其他线程下载漫画。但是假定主线程中有一
些代码，你希望所有下载线程完成后再执行。调用Thread对象 join()方法将阻塞，
直到该线程完成。利用一个 for 循环，遍历 downloadThreads 列表中的所有 Thread
对象，主线程可以调用其他每个线程的join()方法。将以下代码添加到程序的末尾：
#! python3
# multidownloadXkcd.py - Downloads XKCD comics using multiple threads.
--snip--
# Wait for all threads to end.
for downloadThread in downloadThreads:
downloadThread.join()
print('Done.')
第15章 保持时间、计划任务和启动程序
所有的join()调用返回后，'Done.'字符串才会打印，如果一个Thread对象已经完成，
那么调用它的join()方法时，该方法就会立即返回。如果想扩展这个程序，添加一些代
码，在所有漫画下载后运行，就可以用新的代码替换print('Done.')。
15.8 从 Python 启动其他程序
利用内建的subprocess模块中的Popen()函数，Python程序可以启动计算机中的
其他程序（Popen()函数名中的P表示process，进程）。如果你打开了一个应用程序
的多个实例，每个实例都是同一个程序的不同进程。例如，如果你同时打开了Web
浏览器的多个窗口，每个窗口都是Web浏览器程序的不同进程。参见图15-1，这是
同时打开多个计算器进程的例子。
图15-1 相同的计算器程序，六个正在运行的进程
每个进程可以有多个线程。不像线程，进程无法直接读写另一个进程的变量。
如果你认为多线程程序是多个手指在追踪源代码，那么同一个程序打开多个进程就像
有一个朋友拿着程序源代码的独立副本。你们都独立地执行相同的程序。
如果想在 Python 脚本中启动一个外部程序，就将该程序的文件名传递给
subprocess.Popen()（在Windows中，右键点击该应用程序的开始菜单项，然后选择
“属性”，查看应用程序的文件名。在OS X上，按住Ctrl键单击该应用程序并选择
Python编程快速上手——让繁琐工作自动化
“显示包内容”，找到可执行文件的路径）。Popen()函数随后将立即返回。请记住，
启动的程序和你的Python程序不在同一线程中运行。
在Windows计算机上，在交互式环境中输入以下代码：
>>> import subprocess
>>> subprocess.Popen('C:\\Windows\\System32\\calc.exe')
在Ubuntu Linux上，可以输入以下代码：
>>> import subprocess
>>> subprocess.Popen('/usr/bin/gnome-calculator')
在OS X上，过程稍有不同。参见15.8.5节“用默认应用程序打开文件”。
返回值是一个Popen对象，它有两个有用的方法：poll()和wait()。
可以认为poll()方法是问你的朋友，她是否执行完毕你给她的代码。如果这个
进程在 poll()调用时仍在运行，poll()方法就返回 None。如果该程序已经终止，
它会返回该进程的整数退出代码。退出代码用于说明进程是无错终止（退出代码
为 0），还是一个错误导致进程终止（退出代码非零，通常为 1，但可能根据程序
而不同）。
wait()方法就像是等着你的朋友执行完她的代码，然后你继续执行你的代码。
wait()方法将阻塞，直到启动的进程终止。如果你希望你的程序暂停，直到用户完成
与其他程序，这非常有用。wait()的返回值是进程的整数退出代码。
在Windows上，在交互环境中输入以下代码。请注意， wait()的调用将阻塞，
直到退出启动的计算器程序。
 >>> calcProc = subprocess.Popen('c:\\Windows\\System32\\calc.exe')
 >>> calcProc.poll() == None
True
 >>> calcProc.wait()
0
>>> calcProc.poll()
0
这里，我们打开了计算器程序。在它仍在运行时，我们检查 poll()是否返回
None。它应该返回None，因为该进程仍在运行。然后，我们关闭计算器程序，并对
已终止的进程调用wait()。wait()和poll()现在返回0，说明该进程终止且无错。
15.8.1 向Popen()传递命令行参数
用 Popen()创建进程时，可以向进程传递命令行参数。要做到这一点，向Popen()
传递一个列表，作为唯一的参数。该列表中的第一个字符串是要启动的程序的可执
行文件名，所有后续的字符串将是该程序启动时，传递给该程序的命令行参数。实
际上，这个列表将作为被启动程序的sys.argv的值。
第15章 保持时间、计划任务和启动程序
大多数具有图形用户界面（GUI）的应用程序，不像基于命令行或基于终端的
程序那样尽可能地使用命令行参数。但大多数 GUI 应用程序将接受一个参数，表示
应用程序启动时立即打开的文件。例如，如果你使用的是Windows，创建一个简单
的文本文件C:\hello.txt，然后在交互式环境中输入以下代码：
>>> subprocess.Popen(['C:\\Windows\\notepad.exe', 'C:\\hello.txt'])
这不仅会启动记事本应用程序，也会让它立即打开C:\hello.txt。
15.8.2 Task Scheduler、launchd 和cron
如果你精通计算机，可能知道 Windows 上的 Task Scheduler，OS X 上的
launchd，或Linux上的cron调度程序。这些工具文档齐全，而且可靠，它们都允许
你安排应用程序在特定的时间启动。如果想更多地了解它们，可以在http://nostarch.
com/automatestuff/找到教程的链接。
利用操作系统内置的调度程序，你不必自己写时钟检查代码来安排你的程序。但
是，如果只需要程序稍作停顿，就用 time.sleep()函数。或者不使用操作系统的调度程
序，代码可以循环直到特定的日期和时间，每次循环时调用time.sleep(1)。
15.8.3 用Python 打开网站
webbrowser.open()函数可以从程序启动Web浏览器，打开指定的网站，而不是
用 subprocess.Popen()打开浏览器应用程序。详细内容参见第 11 章的“项目：利用
webbrowser模块的mapIt.py”一节。
15.8.4 运行其他Python 脚本
可以在Python中启动另一个Python脚本，就像任何其他的应用程序一样。只需
向Popen()传入python.exe可执行文件，并将想运行的.py脚本的文件名作为它的参
数。例如，下面代码将运行第1章的hello.py脚本：
>>> subprocess.Popen(['C:\\python34\\python.exe', 'hello.py'])
向 Popen()传入一个列表，其中包含 Python 可执行文件的路径字符串，以及脚本
文件名的字符串。如果要启动的脚本需要命令行参数，就将它们添加列表中，放在脚
本文件名后面。在Windows上，Python可执行文件的路径是C：\python34\ python.exe。
在OS X上，是/Library/Frameworks/Python.framework/ Versions/3.3/bin/python3。在Linux
上，是/usr/bin/python3。
不同于将Python 程序导入为一个模块，如果Python程序启动了另一个Python
程序，两者将在独立的进程中运行，不能分享彼此的变量。
Python编程快速上手——让繁琐工作自动化
15.8.5 用默认的应用程序打开文件
双击计算机上的.txt文件，会自动启动与.txt文件扩展名关联的应用程序。计算
机上已经设置了一些这样的文件扩展名关联。利用 Popen()，Python 也可以用这种
方式打开文件。
每个操作系统都有一个程序，其行为等价于双击文档文件来打开它。在 Windows
上，这是start程序。在OS X上，这是open程序。在Ubuntu Linux上，这是see程序。
在交互式环境中输入以下代码，根据操作系统，向Popen()传入'start'、'open'或'see'：
>>> fileObj = open('hello.txt', 'w')
>>> fileObj.write('Hello world!')
12
>>> fileObj.close()
>>> import subprocess
>>> subprocess.Popen(['start', 'hello.txt'], shell=True)
这里，我们将Hello world!写入一个新的hello.txt文件。然后调用Popen()，传入一个
列表，其中包含程序名称（在这个例子中，是Windows上的'start'），以及文件名。我们也
传入了shell=True关键字参数，这只在Windows上需要。操作系统知道所有的文件关联，
能弄清楚应该启动哪个程序，比如Notepad.exe，来处理hello.txt文件。
在OS X上，open程序用于打开文档文件和程序。如果你有Mac，在交互式环
境中输入以下代码：
>>> subprocess.Popen(['open', '/Applications/Calculator.app/'])
计算器应用程序应该会打开。
Unix哲学
程序精心设计，能被其他程序启动，这样的程序比单独使用它们自己的代码
更强大。Unix的哲学是一组由UNIX操作系统（现代的Linux和OS X也是基于
它）的程序员建立的软件设计原则。它认为：编写小的、目的有限的、能互操作
的程序，胜过大的、功能丰富的应用程序。
较小的程序更容易理解，通过能够互操作，它们可以是更强大的应用程序的
构建块。智能手机应用程序也遵循这种方式。如果你的餐厅应用程序需要显示一
间咖啡店的方位，开发者不必重新发明轮子，编写自己的地图代码。餐厅应用程
序只是启动一个地图应用程序，同时传入咖啡店的地址，就像 Python 代码调用
一个函数，并传入参数一样。
你在本书中编写的Python程序大多符合Unix哲学，尤其是在一个重要的方
面：它们使用命令行参数，而不是input()函数调用。如果程序需要的所有信息都
可以事先提供，最好是用命令行参数传入这些信息，而不是等待用户键入它。这
样，命令行参数可以由人类用户键入，也可以由另一个程序提供。这种互操作的
第15章 保持时间、计划任务和启动程序
方式，让你的程序可以作为另一个程序的部分而复用。
唯一的例外是，你不希望口令作为命令行参数传入，因为命令行可能记录它们，
作为命令历史功能的一部分。在需要输入口令时，程序应该调用input()函数。
在 https://en.wikipedia.org/wiki/Unix_philosophy/，你可以阅读更多有关 Unix
哲学的内容。
15.9 项目：简单的倒计时程序
就像很难找到一个简单的秒表应用程序一样，也很难找到一个简单的倒计时程
序。让我们来写一个倒计时程序，在倒计时结束时报警。
总的来说，程序要做到：
 从60倒数。
 倒数至0时播放声音文件（alarm.wav）。
这意味着代码将需要做到以下几点：
 在显示倒计时的每个数字之间，调用time.sleep()暂停一秒。
 调用subprocess.Popen()，用默认的应用程序播放声音文件。
打开一个新的文件编辑器窗口，并保存为countdown.py。
第 1步：倒计时
这个程序需要time模块的time.sleep()函数，subprocess模块的subprocess. Popen()
函数。输入以下代码并保存为countdown.py：
#! python3
# countdown.py - A simple countdown script.
import time, subprocess
 timeLeft = 60
while timeLeft > 0:
 print(timeLeft, end='')
 time.sleep(1)
 timeLeft = timeLeft - 1
# TODO: At the end of the countdown, play a sound file.
导入 time 和 subprocess 后，创建变量 timeleft，保存倒计时剩下的秒数。它
从 60 开始，或者可以根据需要更改这里的值，甚至通过命令行参数设置它。
在while循环中，显示剩余次数，暂停一秒钟，再减少timeleft变量的值，
然后循环再次开始。只要timeleft大于0，循环就继续。在这之后，倒计时就结束了。
第 2步：播放声音文件
虽然有第三方模块，播放各种声音文件，但快速而简单的方法，是启动用户使
Python编程快速上手——让繁琐工作自动化
用的任何播放声音文件的应用程序。操作系统通过.wav文件扩展名，会弄清楚应该
启动哪个应用程序来播放该文件。这个.wav 文件很容易变成其他声音文件格式，
如.mp3或.ogg。
可以使用计算机上的任何声音文件，在倒计时结束播放，也可以从http://nostarch.
com/automatestuff/下载alarm.wav。
在程序中添加以下代码：
#! python3
# countdown.py - A simple countdown script.
import time, subprocess
--snip--
# At the end of the countdown, play a sound file.
subprocess.Popen(['start', 'alarm.wav'], shell=True)
while 循环结束后，alarm.wav（或你选择的声音文件）将播放，通知用户倒计
时结束。在Windows上，要确保传入Popen()的列表中包含'start'，并传入关键字参
数shell=True。在OS X上，传入'open'，而不是'start’，并去掉shell=True。
除了播放声音文件之外，你可以在一个文本文件中保存一条消息，例如Break time
is over!。然后在倒计时结束时用 Popen()打开它。这实际上创建了一个带消息的弹
出窗口。或者你可以在倒计时结束时，用webbrowser.open()函数打开特定网站。不像在
网上找到的一些免费倒计时应用程序，你自己的倒计时程序的警报可以是任何你希望的
方式！
第 3步：类似程序的想法
倒计时是简单的延时，然后继续执行程序。这也可以用于其他应用程序和功能，
诸如：
 利用time.sleep()给用户一个机会，按下Ctrl-C取消的操作，例如删除文件。你