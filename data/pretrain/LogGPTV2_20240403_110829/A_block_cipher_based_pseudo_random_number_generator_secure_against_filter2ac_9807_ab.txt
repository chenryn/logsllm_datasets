Succprng−0
R←− K; y R←− K]
∗
1 , y) = 1 : k1
R←− K; k
GX ,A = Pr[A(k1, k
∗
1
Figure 2: Multiple rounds of our PRNG.
But this last probability is also equal to Succprng−1
GX ,A , which
shows that, if the block cipher adopted in practice essen-
tially behaves like an ideal cipher, no reasonable adversary
can have an important prng-advantage against GX .
Security of multiple rounds. The behavior of multiple
rounds of our PRNG can be seen as the sequential execution
of PRNGs taken from G family, as depicted in Figure 2: at
each step, we select the PRNG indexed by the XOR of the
IV and the last part of the output of the previous step, and
use the ﬁrst two parts of the output of the previous step as
seed. Using a standard hybrid argument, e.g. following [7,
Theorem 3.3.3], we obtain that the prng-advantage of an
adversary against n-rounds of our PRNG is bounded by n
times the prng-advantage of a similar adversary against a
single instance of any PRNG in G. In the rest of this paper,
we denote a q-round version of our PRNG as Gq, and omit
the superscript q when it is clear from the context.
4. PHYSICAL SECURITY MODEL
This section considers the physical security of the previously
described PRNG with respect to the notion of side-channel
key recovery. We ﬁrst outline our model and deﬁnitions.
Then, we detail our assumptions on the physical implemen-
tation of the construction, based on standard practice in the
side-channel community. In the remaining of this paper, we
mostly follow the formalism introduced in [14, 16]; we re-
fer to these papers for deﬁnitions of a physical computer,
leakage function, and more details on the model.
4.1 Deﬁnition of security
When we move to the physical world, a q-round version of
our PRNG Gq(K, K∗) with seed (K, K∗) is associated with a
leakage function Lq(K, K∗) that describes what can be mea-
sured during an actual execution of Gq(K, K∗) on a speciﬁc
physical device1. In Sections 5 and 6, we will consider dif-
ferent types of leakage functions Lq(K, K∗). Following [14],
the pair Pq(K, K∗) = (Gq(K, K∗), Lq(K, K∗)) constitutes a
physical implementation of our PRNG. We want to analyze
the security of a physical implementation Pq(K, K∗) of our
PRNG in front of a side-channel key recovery adversary. The
goal of such an adversary A is to guess a speciﬁc function δ
of a master key K, K∗ used during the (physical) execution
of Pq(K, K∗). The success rate of A is deﬁned as:
1 In [14], the leakage function was deﬁned as a function of
the internal conﬁguration of the used device, the measure-
ment parameters, and a random parameter. For simplicity,
our notation considers the measurement parameter as ﬁxed
and takes as only input the part of the device internal con-
ﬁguration that is targeted in the attacks, namely the master
keys K, K∗. Finally, the noise parameter will be explicitly
mentioned when required in our analysis.
58
Figure 3: Physical implementation of the PRNG.
Succsc−kr−δ(K,K∗)
Pq (K,K∗),A
= Pr[A(Pq(k, k
∗
)) = δ(k, k
∗
) :
∗ R←− K]
k R←− K; k
δ(K, K∗) is traditionally seen as a key classiﬁcation function,
which typically returns one or two key bytes of a running key
Ki, K∗
i targeted during the side-channel attack. In the fol-
lowing, we ﬁrst do the reasonable assumption that the side-
channel adversary is bounded. It means that the set δ(K,K)
has a limited size of typically 28, 216, 232. Additionally, we
consider a standard strategy where physical key parts are
targeted independently, i.e. we consider one particular type
of classiﬁcation function δ. The global success rate will then
be the product of the success rates on each of the targeted
key parts. For instance, assuming identical success rates for
all pieces of the key, a successful attack against the full n-bit
key requires n/8 partial attacks against 8-bit classes:
Succsc−kr−K
Pq (K,K∗),A = (Succ
sc−kr−K[0···7]
Pq (K,K∗),A
)n/8
(1)
As a result, if we can obtain a construction where the success
rate on some part of the key is bounded, the global success
rate will decrease exponentially with the length of the key.
We mention that assuming identical success rates for all
pieces of the key may not always be correct. For exam-
ple, one could imagine a leakage function providing the most
signiﬁcant bit(s) of a key to the adversary which straightfor-
wardly contradicts the assumption. However for the prac-
tically meaningful leakage functions that we consider in the
next sections, it is expected to hold in a suﬃcient degree.
Similarly, the decision to target physical parts of the key (of
8, 16, 32, . . . bits) rather than bits of information is inﬂu-
enced by the practice of side-channel attacks in which the
leakage is usually correlated with the values of physical bits.
We consequently use this strategy as a reasonable starting
point allowing the analysis of our construction.
4.2 Circuit model & working assumptions
Our model for the physical implementation of the PRNG is
pictured in Figure 3. We now detail the working assump-
tions required for its physical security analysis. Note that a
signiﬁcant part of these assumptions were selected in order
to facilitate the formal investigation of our construction and
will be relaxed in the following of the paper.
a1. We assume a ﬁxed (meaning read-only) IV in order to
avoid the possibility of chosen IV attacks.
a2. We consider an iterative block cipher with r identical
rounds: R1, R2, . . . Rr. Each round is made of diﬀerent
operations, e.g. bitwise XORs, s-boxes and diﬀusion
layers in our picture. A typical example is the Ad-
vanced Encryption Standard (AES) Rijndael [6].
a3. We do not consider the key scheduling algorithm and
assume that the cipher initially has r + 1 independent
0, j ∈ [0, r], each belonging to K, updated
round keys kj
according to the same procedure: kj
i ⊕ mi.
i+1 = kj
a4. We only consider the leakage obtained from the exe-
cution of the ﬁrst block cipher E1 in the PRNG.
a5. We consider an adversary targeting the ﬁrst round key2
k0
i . From this point we omit the “0” superscript for all
keys, as we will always consider the ﬁrst round key.
Additionally, we consider an adversary targeting this
ﬁrst round key for either the ﬁrst or the last PRNG
iteration considered in the attack, namely k0 or kq.
a6. During each iteration of the PRNG, the adversary ob-
tains two leakages lKi and lMi . As a matter of fact, this
does not mean that the adversary is limited in the way
he exploits the side-channel information. It just means
that all the information obtained from the execution
of the rounds is translated into information on these
two values. The leakage function abstraction captures
the fact that “any kind of information” can in principle
be obtained: it can model any implementation.
a7. Finally and most importantly, we assume that the in-
formation on a running key ki and the information on
the middle point mi cannot be eﬃciently combined,
but through the key update procedure ki+1 = ki ⊕
mi. That is, we assume that the cipher E1’s inner
rounds constitute a permutation E∗
1 that is hard to
compute/invert for the adversary.
Among these assumptions, the ﬁrst one is the most critical
from an application point of view. A way to mitigate it by
initializing the PRNG securely with public random seeds is
discussed in Section 8. Assumptions 3, 4 and 5 reduce the
amount of information leakage provided to the adversary
and are relaxed in Section 9. We now use these deﬁnitions
and assumptions in an analysis of our PRNG construction.
2 Since all rounds are identical and the IV is known, we
assume that it is the easiest target, i.e., if k0
i cannot be
recovered, the other round keys cannot either.
59
5. SECURITY ANALYSIS OF A BAYESIAN
SIDE-CHANNEL ADVERSARY
The objective of the following analysis is to evaluate the
physical security of our PRNG. According to the model
in [16], such an evaluation generally requires to consider both
the amount of information leaked by an implementation and
the extent to which an actual adversary can turn this infor-
mation into a successful key recovery. However, as explained
in the introduction of this paper, our PRNG does not intend
to aﬀect the amount of information that is provided to the
adversary during a single round.
In fact, the information
available in the physical observations is a parameter of our
analysis, hidden in the leakage function abstraction L. By
contrast, the PRNG attempts to make the eﬃcient combina-
tion of this information a diﬃcult task. How diﬃcult is the
leakage combination can consequently be measured with a
security metric, e.g. the key-recovery success rate of a side-
channel adversary. For this purpose, we now consider the
Bayesian side-channel adversary which is the most powerful
one from an information theoretic point of view [5], when a
perfect knowledge of the noise distribution is available.
More speciﬁcally, we model an adversary that is provided
with generic leakages under the form of a vector of 2q − 1
components, each of them corresponding to the leakage that
can be measured during the use of the i-th round key or of
the i-th round value of the middle point mi. Following [16],
we then consider that the random leakage variable obtained
from Lq can be expressed as a random vector Lq of the
form (LK (K0), LM (M0), LK (K1), LM (M1), . . . , LK (Kq)),3 in
which each LK (Ki), LM (Mi) is a random variable repre-
senting the leakage trace on the use of, respectively, the
running key Ki and the middle point Mi. We also write
lq = (lK0 , lM0 , lK1 , . . . , lKq ) to denote any ﬁxed element in
the domain of Lq. Given this speciﬁc form of the leakages,
a Bayesian adversary observing a leakage lq selects the key
candidate Ki,guess such that Ki,guess := arg maxki Pr[Ki =
ki|Lq = lq]. Using the fact that all round keys Ki can be
considered as independent and uniformly distributed (fol-
lowing our black box analysis of Section 3), this is equivalent
to choosing Ki,guess = arg maxki Pr[Lq = lq|Ki = ki].
We turn now to the generic evaluation of this expression.
In order to simplify our analysis, we ﬁrst evaluate the prob-
ability Pr[Lq = lq|Ki = ki] in the context of determinis-
tic leakage functions L = Ldet, where the LK (·) and LM (·)
functions are deterministic. Then we extend our analysis to
noisy leakage functions of the form L = Ldet + R, where R
is noise occurring on each leakage component according to
a noise distribution. That is, the LK (·) and LM (·) functions
are evaluated as the sum of a deterministic function and a
random variable selected according to the noise distribution.
5.1 Analysis of deterministic leakages
For each possible values lKi and lMi of the deterministic
leakage functions LK (Ki) and LM (Mi), let us deﬁne a run-
ning matrix AlKi and an update matrix BlMi as:
3 The leakage corresponding to Mq is not taken, as it is only
useful to attack the q + 1-th round.
=
60
(cid:189)
(cid:189)
AlKi (ki, k
(cid:48)
i) =
BlMi (ki, ki+1) =
if ki = k(cid:48)
1,
0, otherwise;
i and LK (ki) = lKi ;
if LM (ki ⊕ ki+1) = lMi ;
1,
0, otherwise.
lKi
(cid:80)
(cid:80)
AlKi = I2n (identity matrix) and
The matrix AlKi is a diagonal matrix, with one row (resp.
column) for each possible key in K, and where elements are
set to 1 iﬀ the leakage corresponding to the key indexed
by the current line is equal to leakage corresponding to Ki.
Similarly, the matrix BlMi has elements equal to 1 in posi-
tion (ki, ki+1) iﬀ the leakage corresponding to LM (ki ⊕ ki+1)
is equal to lMi . It directly follows from the deﬁnitions that
BlMi = 1 (all
ones matrix). Then, for each possible leakage value lq of
Lq, we deﬁne a leakage (directed) graph Glq = (V lq , Elq ) as
follows. The set of vertices V lq contains (2q + 2)|K| nodes,
referred to by pairs of the form (k, i) where k ∈ K and
0 ≤ i ≤ 2q + 1. The set Elq is deﬁned by the edges:
1. ((k, 2i), (k(cid:48), 2i + 1)) ∈ Elq (where 0 ≤ i ≤ q),
2. ((k, 2i + 1), (k(cid:48), 2i + 2)) ∈ Elq (where 0 ≤ i ≤ q − 1),
iﬀ AlKi (k, k(cid:48)) = 1,
iﬀ BlMi (k, k(cid:48)) = 1.
lMi
An example of such a graph is in Figure 4. Finally, for
every key k0 and leakage vector lq, we deﬁne the set of keys
that possibly gave rise to the leakages:
Sq(k0, lq) = {(K1, K2 ..., Kq) ∈ {0, ..., 2n − 1}q|
LM (k0 ⊕ K1) = lM0 , LK (K1) = lK1 , LM (K1 ⊕ K2)
= lM1 , LK (K2) = lK2 , . . . , LK (Kq) = lKq}
It follows that Pr[Lq = lq|K0 = k0] = |Sq(k0, lq)|/2nq.
From the graphical representation of Figure 4, |Sq(k0, lq)|
can be interpreted as the number of paths from left to right
starting at K0 = k0 in the graph associated with lq. Sim-
ilarly, for every k0, lq and every 0 ≤ p ≤ q, the number of
paths from k0 to kp in the graph associated to lq equals
np(kp, k0, lq) = |{(K1, K2 ...Kp) ∈ Sp(k0, lp)|Kp = kp}|
where lp corresponds to the ﬁrst p components of lq. Look-
ing at the example of Figure 4, we have that n3(111, 001, l5)=
2 and n5(010, 001, l5) = 4. Deﬁne the vector np(k0, lq) =
(np(0, k0, lq), np(1, k0, lq), . . . , np(2n − 1, k0, lq))t and deﬁne
ek0 as a column vector containing all zeros but a one in
position ko. We ﬁnally obtain:
|Sq(k0, lq)| =
nq(kq, k0, lq) = (1 . . . 1) nq(k0, lq)
(cid:88)
kq
np+1(k0, lq) = AlKp+1 BlMp np(k0, lq)
n0(k0, lq) = AlK0 ek0
And by combining the equations above, we can express the
leakage probabilities as follows:
Pr[Lq = lq|K0 = k0] =
|Sq(k0, lq)|
2nq
=
(1...1) AlKq · BlMq−1 ...AlK1 · BlM0 · AlK0 · ek0
Pr[Lq = lq|Kq = kq]
(1...1) AlK0 · BlM0 ...AlKq−1 · BlMq−1 · AlKq · ekq
2nq
2nq
(2)
(3)
Figure 4: Leakage graph for n = 3, with a Hamming weight leakage function providing the observed leakage
l5 = {1, 1, 2, 2, 0, 3, 3, 1, 2, 1, 1}. The bold edges enlighten the four elements of S5(001, l5).
(cid:88)
lq
=
Pr[Lq = lq] · max
ki