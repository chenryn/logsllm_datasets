SharpC2 beacon插件机制
Demo代码位置:     AgentModules\DemoModule\Module.cs
关于插件接口定义  代码位置:Agents\Stage\Interfaces\IAgentModule.cs
Init() 方法初始化插件，接收两个参数。第一个AgentController  规范beacon的行为,定义beacon的通用
功能;  其中 RegisterAgentModule方法需要关注下
再来看第二个参数 ConfigController.cs;   
// AgentController.cs
public void RegisterAgentModule(IAgentModule Module)
{
    // 初始化插件  ConfigController Config
    Module.Init(this, Config);
    // 添加模块信息
    AgentModules.Add(Module.GetModuleInfo());
}
通过AgentConfigs字典保存beacon的核心信息，Set()方法设置beacon配置;还记得之前推过一个
C#写的Agent端里面有个动态修改Config功能和这个差不多意思。泛型方法Get() 获取beacon配置
信息;  AgentConfig 包括KillData,PPID,BlockDLLs,SpawnTo,Sleep等，这些信息基本都是全局
的，也就是beacon存活期间必定存在的。
重新回到AgentController.cs
List AgentModules全局保存 beacon的module信息
可以看到解密完数据后，利用Linq 从AgentModules中先获取Module信息，再获取命令，然后使用call 
back委托执行具体的命令
Tips: 想要获取命令指令或明文返回结果  首先我们要锁定在AgentController.cs中，在解密后和加
密前记录数据然后分析。
发送消息函数:   SendMessage(C2Data)   也有对应的重载函数   第一套用来发送 
Core,AgentOutput 要回传的数据；第二套用来自定义的插件模块。
关于Beacon端的  LinkAgent, 功能类似 CobaltStrike中的SMB beacon, 即不需要beacon于
TeamServer服务器直连，可以借助中间进行数据转发，这个后面单独分析。
在了解了 AgentController和ConfigController核心操作后，接下来我们跟进核心功能。
代码位置:     Modules\Core\CoreModule.cs
Beacon所有的功能都必须按照规范 也就是继承IAgentModule接口，完成Init() 初始化操作和
GetModuleInfo() 公开当前模块的实体功能。
CoreModule.cs
public void RegisterAgentModule(IAgentModule Module)
{
    Module.Init(this, Config);
    AgentModules.Add(Module.GetModuleInfo());
}
具体看ModuleInfo类   
    public class ModuleInfo
    {
        // Name表示当前模块的名称
        public string Name { get; set; }
        // 当前模块具体含有的命令
        public List Commands { get; set; }
        public class Command
        {
前面我们说过 AgentController 里面的RegisterAgentModule函数挺重要的，当然在注册
AgentModule前肯定需要先加载
整个逻辑非常清楚了  从我们下发的AgentTask 对象 Parameters字典参数中获取 Assembly,加载
到当前域中，根据前面的接口规范，创建实例，获取ModuleInfo,但是这里成功注册模块后 控制端
UI上并没有输出相关帮助信息，而且执行功能也没有返回实际的结果。
这里需要对比下  SharpC2 早期版本Dev branch
之前在https://www.c2.tips/2020/10/265/也提到过,load-module怎么做的，具体看下代码。
            // 命令的名称
            public string Name { get; set; }
            // 命令执行委托回调
            public AgentController.AgentCommand Delegate { get; set; }
        }
    }
// 不得不说 除了学习代码功能，如何设计也是重点，难点啊:)
// SharpC2 Dev版本\Client\AgentCommand.cs
public static string GetModuletHelpText(List agentModules)
{
    // 遍历AgentModule  因为是全局的 List集合 因此可以实时显示
        foreach (var module in agentModules.OrderBy(m => m.Name))
再来看 Models\AgentHelp.cs
我们在控制端输入help,然后下端 跟进
        {
            foreach (var cmd in module.Commands.OrderBy(c => c.Name))
            {
                if (cmd.Visible)
                {
                    result.Add(new ModuleHelpText
                               {
                                   Module = module.Name,
                                   Command = cmd.Name,
                                   Description = cmd.Description,
                                   Usage = cmd.HelpText
                               });
                }
            }
        }
}
// 切回到Experiment版本   MainViewModel.cs
// 110行左右调用  LoadTaskDefinitions()
void LoadTaskDefinitions()
{
    var path = 
Path.Combine(Assembly.GetExecutingAssembly().Location.Replace("SharpC2.dll", 
""), "Core", "Tasks");
    var files = Directory.GetFiles(path);
    var yamlDotNet = new 
DeserializerBuilder().IgnoreUnmatchedProperties().Build();
    foreach (var file in files)
    {
        var yaml = File.ReadAllText(file);
        // yaml文件反序列化
        var tasks = yamlDotNet.Deserialize>(yaml);
        // 将反序列化对象添加到  AgentTasks中
        AgentTasks.AddRange(tasks);
    }
}
Shared\Misc\GenericObjectResult.cs
继续跟进  Client\Command\SendAgentCommand.cs
在这个方法里有对进行命令判断，从已有的模块中以alias别名搜索，如果搜索不到就直接设置
task为null, 然后SubmitAgentCommand 提交命令;   由于作者没有提供给插件设置别名，我们手
动new TaskDefinition实例
执行我们的命令(这里仅作演示以及插件规范的编写,至于如何对插件信息进行补全需要单独设计)
TaskDefinition类 有些成员不需要被反序列化，可以不设置初始值
插件DemoModule这里  作者有个小失误，参数类型传递错误了，修改为AgentTask即可
其他功能模块编写参考:    Stage\Modules\  
也可以参考  Dev版本的 mimikatz, powerpick等; 
至于是否使用WPF搭配GUI，具体根据需求而定。
Thinging >
在整理完插件机制功能后如果你问我最大的感受是什么，我觉得是控制端，TeamServer,Beacon3
端交互的点很重要。比如这里面模块，命令，参数的构造和解析以及是否容易扩展都是一款C2相
当重要的功能。
#碎碎念
stageless怎么加载beacon也即是 agent.dll,之前在分析 SharpC2 beacon无法上线时已经分析过
了; 这里简单做个拓展
Agent\Stage\Stage.cs
如果觉得load-module 加载不满足实际需求，可能需要健壮beacon的功能，例如sharpc2缺失一
些内网后渗透的功能，也可以在这里面提前注册好