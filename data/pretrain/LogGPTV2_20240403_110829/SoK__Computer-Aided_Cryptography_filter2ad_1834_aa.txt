title:SoK: Computer-Aided Cryptography
author:Manuel Barbosa and
Gilles Barthe and
Karthik Bhargavan and
Bruno Blanchet and
Cas Cremers and
Kevin Liao and
Bryan Parno
8
0
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
SoK: Computer-Aided Cryptography
Manuel Barbosa∗, Gilles Barthe†‡, Karthik Bhargavan§, Bruno Blanchet§, Cas Cremers¶, Kevin Liao†(cid:107), Bryan Parno∗∗
∗University of Porto (FCUP) and INESC TEC, †Max Planck Institute for Security & Privacy, ‡IMDEA Software Institute,
§INRIA Paris, ¶CISPA Helmholtz Center for Information Security, (cid:107)MIT, ∗∗Carnegie Mellon University
Abstract—Computer-aided cryptography is an active area of
research that develops and applies formal, machine-checkable
approaches to the design, analysis, and implementation of
cryptography. We present a cross-cutting systematization of
the computer-aided cryptography literature, focusing on three
main areas: (i) design-level security (both symbolic security and
computational security), (ii) functional correctness and efﬁciency,
and (iii) implementation-level security (with a focus on digital
side-channel resistance). In each area, we ﬁrst clarify the role
of computer-aided cryptography—how it can help and what the
caveats are—in addressing current challenges. We next present
a taxonomy of state-of-the-art tools, comparing their accuracy,
scope, trustworthiness, and usability. Then, we highlight their
main achievements, trade-offs, and research challenges. After
covering the three main areas, we present two case studies.
First, we study efforts in combining tools focused on different
areas to consolidate the guarantees they can provide. Second, we
distill the lessons learned from the computer-aided cryptography
community’s involvement in the TLS 1.3 standardization effort.
Finally, we conclude with recommendations to paper authors,
tool developers, and standardization bodies moving forward.
I. INTRODUCTION
Designing,
implementing, and deploying cryptographic
mechanisms is notoriously hard to get right, with high-
proﬁle design ﬂaws, devastating implementation bugs, and
side-channel vulnerabilities being regularly found even in
widely deployed mechanisms. Each step is highly involved
and fraught with pitfalls. At the design level, cryptographic
mechanisms must achieve speciﬁc security goals against some
well-deﬁned class of attackers. Typically, this requires com-
posing a series of sophisticated building blocks—abstract con-
structions make up primitives, primitives make up protocols,
and protocols make up systems. At the implementation level,
high-level designs are then ﬂeshed out with concrete functional
details, such as data formats, session state, and programming
interfaces. Moreover, implementations must be optimized for
interoperability and performance. At the deployment level,
implementations must also account for low-level threats that
are absent at the design level, such as side-channel attacks.
Attackers are thus presented with a vast attack surface: They
can break high-level designs, exploit implementation bugs,
recover secret material via side-channels, or any combination
of the above. Preventing such varied attacks on complex
cryptographic mechanisms is a challenging task, and existing
methods are hard-pressed to do so. Pen-and-paper security
proofs often consider pared-down “cores” of cryptographic
mechanisms to simplify analysis, yet remain highly complex
and error-prone; demands for aggressively optimized imple-
mentations greatly increase the risks of introducing bugs,
which are difﬁcult to catch by code testing or auditing; ad-
hoc constant-time coding recipes for mitigating side-channel
attacks are tricky to implement, and yet may not cover the
whole gamut of leakage channels exposed in deployment.
Unfortunately, the current modus operandi—relying on a select
few cryptography experts armed with rudimentary tooling to
vouch for security and correctness—simply cannot keep pace
with the rate of innovation and development in the ﬁeld.
the implementation level,
Computer-aided cryptography, or CAC for short, is an active
area of research that aims to address these challenges. It en-
compasses formal, machine-checkable approaches to design-
ing, analyzing, and implementing cryptography; the variety of
tools available address different parts of the problem space.
At the design level, tools can help manage the complexity of
security proofs, even revealing subtle ﬂaws or as-yet-unknown
attacks in the process. At
tools
can guarantee that highly optimized implementations behave
according to their design speciﬁcations on all possible inputs.
At the deployment level, tools can check that implementations
correctly protect against classes of side-channel attacks. Al-
though individual tools may only address part of the problem,
when combined, they can provide a high degree of assurance.
Computer-aided cryptography has already fulﬁlled some of
these promises in focused but impactful settings. For instance,
computer-aided security analyses were inﬂuential in the recent
standardization of TLS 1.3 [1]–[4]. Formally veriﬁed code
is also being deployed at Internet-scale—components of the
HACL∗ library [5] are being integrated into Mozilla Firefox’s
NSS security engine, elliptic curve code generated using the
Fiat Cryptography framework [6] has populated Google’s
BoringSSL library, and EverCrypt [7] routines are used in
the Zinc crypto library for the Linux kernel. In light of these
successes, there is growing enthusiasm for computer-aided
cryptography. This is reﬂected in the rapid emergence of
a dynamic community comprised of theoretical and applied
cryptographers, cryptography engineers, and formal methods
practitioners. Together, the community aims to achieve broader
adoption of computer-aided cryptography, blending ideas from
many ﬁelds, and more generally, to contribute to the future
development of cryptography.
At the same time, computer-aided cryptography risks be-
coming a victim of its own success. Trust in the ﬁeld can be
undermined by difﬁculties in understanding the guarantees and
ﬁne-print caveats of computer-aided cryptography artifacts.
The ﬁeld is also increasingly broad, complex, and rapidly
evolving, so no one has a complete understanding of every
facet. This can make it difﬁcult for the ﬁeld to develop and
© 2021, Manuel Barbosa. Under license to IEEE.
DOI 10.1109/SP40001.2021.00008
777
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
address pressing challenges, such as the expected transition
to post-quantum cryptography and scaling from lower-level
primitives and protocols to whole cryptographic systems.
Given these concerns, the purpose of this SoK is three-fold:
1) We clarify the current capabilities and limitations of
computer-aided cryptography.
2) We present a taxonomy of computer-aided cryptography
tools, highlighting their main achievements and important
trade-offs between them.
3) We outline promising new directions for computer-aided
cryptography and related areas.
We hope this will help non-experts better understand the ﬁeld,
point experts to opportunities for improvement, and showcase
to stakeholders (e.g., standardization bodies and open source
projects) the many beneﬁts of computer-aided cryptography.
A. Structure of the Paper
The subsequent
three sections expand on the role of
computer-aided cryptography in three main areas: Section II
covers how to establish design-level security guarantees,
using both symbolic and computational approaches; Sec-
tion III covers how to develop functionally correct and ef-
ﬁcient implementations; Section IV covers how to establish
implementation-level security guarantees, with a particular
focus on protecting against digital side-channel attacks.
We begin each section with a critical review of the area,
explaining why the considered guarantees are important, how
current tools and techniques outside CAC may fail to meet
these guarantees, how CAC can help, the ﬁne-print caveats
of using CAC, and necessary technical background. We then
taxonomize state-of-the-art tools based on criteria along four
main categories: accuracy (A), scope (S), trust (T), and usabil-
ity (U). For each criterion, we label them with one or more
categories, explain their importance, and provide some light
discussion about tool support for them. The ensuing discussion
highlights broader points, such as main achievements, impor-
tant takeaways, and research challenges. Finally, we end each
section with references for further reading. Given the amount
of material we cover, we are unable to be exhaustive in each
area, but we still point to other relevant lines of work.
Sections V and VI describe two case studies. Our ﬁrst case
study (Section V) examines how to combine tools that address
different parts of the problem space and consolidate their guar-
antees. Our second case study (Section VI) distills the lessons
learned from the computer-aided cryptography community’s
involvement in the TLS 1.3 standardization effort.
Finally, in Section VII, we offer recommendations to paper
authors, tool developers, and standardization bodies on how to
best move the ﬁeld of computer-aided cryptography forward.
II. DESIGN-LEVEL SECURITY
In this section, we focus on the role of computer-aided
cryptography in establishing design-level security guarantees.
Over the years, two ﬂavors of design-level security have been
developed in two largely separate communities: symbolic se-
curity (in the formal methods community) and computational
security (in the cryptography community). This has led to two
complementary strands of work, so we cover them both.
A. Critical Review
Why is design-level security important? Validating cryp-
tographic designs through mathematical arguments is perhaps
the only way to convincingly demonstrate their security against
entire classes of attacks. This has become standard practice in
cryptography, and security proofs are necessary for any new
standard. This holds true at all levels: primitives, protocols,
and systems. When using a lower-level component in a larger
system, it is crucial to understand what security notion and ad-
versarial model the proof is relative to. Similar considerations
apply when evaluating the security of a cryptographic system
relative to its intended deployment environment.
How can design-level security fail? The current modus
operandi for validating the security of cryptographic designs
using pen-and-paper arguments is alarmingly fragile. This is
for two main reasons:
• Erroneous arguments. Writing security arguments is tedious
and error-prone, even for experts. Because they are primarily
done on pen-and-paper, errors are difﬁcult to catch and can
go unnoticed for years.