runs in time polynomial in the size of the instance CS𝜅. In contrast, a “fully-succinct”
SNARK also requires that the setup run in time sublinear (or polylogarithmic) in the
size of CS𝜅. Using recursive composition [29], it is possible to obtain fully succinct
SNARKs from preprocessing SNARKs.
(A.2)
(1𝜆, 1𝜅) is defined as
(1) The challenger samples 𝑏
r← {0, 1}. If 𝑏 = 0, the challenger
computes (crs, st) ← Setup(1𝜆, 1𝜅) and gives (crs, st) to A. If
𝑏 = 1, the challenger computes ((cid:102)crs,(cid:101)st, stS) ← S1(1𝜆, 1𝜅) and
gives ((cid:102)crs,(cid:101)st) to A.
(2) The adversary A outputs a statement x and a witness w.
(3) If CS𝜅(x, w) ≠ 1, then the experiment halts with output 0.
Otherwise, the challenger proceeds as follows:
• If 𝑏 = 0, the challenger replies with 𝜋 ← Prove(crs, x, w).
• If 𝑏 = 1, the challenger replies with ˜𝜋 ← S2(stS, x).
At the end of the experiment, A outputs a bit 𝑏′ ∈ {0, 1}. The
output of the experiment is 1 if 𝑏′ = 𝑏 and is 0 otherwise.
When the probability in Eq. (A.2) is bounded by 1/2+ 𝜀, we say that
the scheme satisfies 𝜀-computational zero knowledge.
B LINEAR PCP FOR R1CS
In this section, we describe the linear PCP we use for R1CS. The
construction is based on the quadratic arithmetic programs of Gen-
naro et al. [64], and is adapted from the 5-query linear PCP con-
struction by Ben-Sasson et al. [20]. There are two minor differences
in our construction:
• We remove the statement-dependent query and have the verifier
introduce the statement-dependent components during verifica-
tion. This yields a 4-query linear PCP with shorter query length
at the expense of a slightly more expensive verification step. A
similar approach is used implicitly in [24, 64].
• The LPCP query-generation samples the random point from a
smaller subset of the field. This introduces some knowledge error,
but enables perfect HVZK. The construction of Ben-Sasson et al.
provided statistical HVZK where the statistical distance was in-
versely proportional to the field size. The difference between sta-
tistical HVZK and perfect HVZK is negligible for super-polynomial
size fields, but not for the moderate-size fields we use in this work.
For completeness, we provide the full description and analysis
below. Our presentation and analysis is adapted from [20, Appen-
dix E].
Construction B.1 (Linear PCP for R1CS [20, 64, adapted]). Let
CS = {CS𝜅}𝜅∈N be a family of R1CS instances over a finite field F,
F𝑁𝑤,𝜅+1 (and entries indexed from 0 to 𝑁𝑤,𝜅). For notational con-
venience, we write 𝑛 = 𝑛(𝜅) to denote a function where 𝑛(𝜅) = 𝑛𝜅
for all 𝜅 ∈ N. We define 𝑁𝑔 = 𝑁𝑔(𝜅), 𝑁𝑤 = 𝑁𝑤(𝜅), a𝑖 = a𝑖(𝜅),
b𝑖 = b𝑖(𝜅) and c𝑖 = c𝑖(𝜅) similarly. We additionally define the
following components:
• Let 𝑆 = {𝛼1, . . . , 𝛼𝑁𝑔} ⊂ F be an arbitrary subset of F.
• For each 𝑖 ∈ {0, . . . , 𝑁𝑤}, let 𝐴𝑖, 𝐵𝑖, 𝐶𝑖 : F → F be the unique
polynomial of degree 𝑁𝑔 − 1 where for all 𝑗 ∈ [𝑁𝑔],
𝐵𝑖(𝛼 𝑗) = b𝑗,𝑖, 𝐶𝑖(𝛼 𝑗) = c𝑗,𝑖 .
where CS𝜅 =(cid:0)𝑛𝜅, 𝑁𝑔,𝜅, 𝑁𝑤,𝜅, {a𝑖,𝜅, b𝑖,𝜅, c𝑖,𝜅}𝑖∈[𝑁𝑔,𝜅 ](cid:1), a𝑖,𝜅, b𝑖,𝜅, c𝑖,𝜅 ∈
• Let 𝑍𝑆 : F → F be the polynomial 𝑍𝑆(𝑧) :=𝑗 ∈[𝑁𝑔](𝑧 − 𝛼 𝑗).
𝐴𝑖(𝛼 𝑗) = a𝑗,𝑖,
Namely, 𝑍𝑆 is the polynomial whose roots are the elements of 𝑆.
The 4-query linear PCP ΠLPCP = (QLPCP, PLPCP,VLPCP) for CS
is defined as follows:
r← F \ 𝑆. Define vec-
• QLPCP(1𝜅): On input 𝜅 ∈ N, sample 𝜏
tors a = (𝐴1(𝜏), . . . , 𝐴𝑛(𝜏)), b = (𝐵1(𝜏), . . . , 𝐵𝑛(𝜏)), and c =
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea228
Q =
𝑍𝑆(𝜏)
0
0
0
0
𝑍𝑆(𝜏)
0
0
0
0
𝐴𝑛+1(𝜏)
𝐵𝑛+1(𝜏)
𝑍𝑆(𝜏) 𝐶𝑛+1(𝜏)
0
0
· · · 𝐴𝑁𝑤 (𝜏)
· · ·
𝐵𝑁𝑤 (𝜏)
· · · 𝐶𝑁𝑤 (𝜏)
· · ·
0
0
0
0
1
0
0
0
𝜏
· · ·
· · ·
· · ·
· · ·
0
0
0
𝜏 𝑁𝑔
T
∈ F(4+𝑁𝑤+𝑁𝑔−𝑛)×4.
Figure 3: The query matrix Q output by QLPCP in Construction B.1. Here, 𝜏
r← F \ 𝑆.
(𝐶1(𝜏), . . . , 𝐶𝑛(𝜏)). Output st = (𝐴0(𝜏), 𝐵0(𝜏), 𝐶0(𝜏), a, b, c, 𝑍𝑆(𝜏))
and the query matrix Q as defined in Fig. 3.
• PLPCP(1𝜅, x, w): On input 𝜅 ∈ N and an instance (x, w) where
r← F. Construct polynomials
CS𝜅(x, w) = 1, sample 𝛿1, 𝛿2, 𝛿3
𝐴, 𝐵, 𝐶 : F → F, each of degree 𝑁𝑔, where
𝐴(𝑧) := 𝛿1𝑍𝑆(𝑧) + 𝐴0(𝑧) +
𝐵(𝑧) := 𝛿2𝑍𝑆(𝑧) + 𝐵0(𝑧) +
𝐶(𝑧) := 𝛿3𝑍𝑆(𝑧) + 𝐶0(𝑧) +
𝑖∈[𝑁𝑤] 𝑤𝑖𝐴𝑖(𝑧)
𝑖∈[𝑁𝑤] 𝑤𝑖 𝐵𝑖(𝑧)
𝑖∈[𝑁𝑤] 𝑤𝑖𝐶𝑖(𝑧).
(B.1)
Let 𝐻(𝑧) := (𝐴(𝑧)𝐵(𝑧)−𝐶(𝑧))/𝑍𝑆(𝑧), and let h = (ℎ0, . . . , ℎ𝑁𝑔) ∈
F𝑁𝑔+1 be the coefficients of 𝐻. Parse wT = [xT | ˜wT] Output the
proof vector 𝝅 = (𝛿1, 𝛿2, 𝛿3, ˜w, h) ∈ F4+𝑁𝑤+𝑁𝑔−𝑛.
• VLPCP(st, x, a): On input st = (𝑎0, 𝑏0, 𝑐0, a, b, c, 𝑧), x ∈ F𝑛 and
a ∈ F4, the verifier computes 𝑎′
1 = 𝑎1+𝑎0+xTa, 𝑎′
2 = 𝑎2+𝑏0+xTb,
and 𝑎′
3 = 𝑎3 + 𝑐0 + xTc. It accepts if
𝑎′
1𝑎′
2 − 𝑎′
(B.2)
Theorem B.2 (Linear PCP for QAPs). Construction B.1 is complete,
has knowledge error 2𝑁𝑔/(|F| − 𝑁𝑔), and is perfect HVZK.
3 − 𝑎4𝑧 = 0.
Proof. Let CS = {CS𝜅}𝜅∈N be an R1CS system over F. We
consider each property separately:
• Completeness: Take any 𝜅 ∈ N and (x, w) where CS𝜅(x, w) =
1. Let (st, Q) ← QLPCP(1𝜅), 𝝅 ← PLPCP(1𝜅, x, w), a ← QT𝝅.
Consider the value of VLPCP(st, x, a). Let 𝑎′
3 be the values
computed by VLPCP. By definition,
𝑎′
1 = 𝑎1 + 𝑎0 + xTa
1, 𝑎′
2, 𝑎′
= 𝛿1𝑍𝑆(𝜏) + 𝐴0(𝜏) + 
= 𝛿1𝑍𝑆(𝜏) + 𝐴0(𝜏) + 
𝑖∈[𝑛]
𝑥𝑖𝐴𝑖(𝜏) + 
𝑖∈[𝑁𝑤−𝑛]
𝑤𝑖𝐴𝑖(𝜏)
𝑖∈[𝑁𝑤]
𝑤𝑛+𝑖𝐴𝑛+𝑖(𝜏)
= 𝐴(𝜏).
3 = 𝐶(𝜏). Finally 𝑎4 = ℎ0 +𝑖∈[𝑁𝑔] ℎ𝑖𝜏𝑖 = 𝐻(𝜏),
since 𝑤𝑖 = 𝑥𝑖 for 𝑖 ∈ [𝑛], 𝐴 is the polynomial in Eq. (B.1), and
𝜏 ∈ F\𝑆 is the element sampled by QLPCP. Similarly, we have that
𝑎′
2 = 𝐵(𝜏) and 𝑎′
where 𝐻(𝑧) = (𝐴(𝑧)𝐵(𝑧) − 𝐶(𝑧))/𝑍𝑆(𝑧) is the polynomial con-
structed by the prover. The verification procedure now computes
1𝑎′
𝑎′
2 − 𝑎′
3 − 𝑎4𝑧 = 𝐴(𝜏)𝐵(𝜏) − 𝐶(𝜏) − 𝐻(𝜏)𝑍𝑆(𝜏) = 0,
by definition of the polynomial 𝐻. Completeness follows.
• Knowledge: Define E⟨𝝅∗,·⟩
to be the algorithm that on input
a statement x and given linear access to a proof vector 𝝅∗ =
3, ˜w∗, h∗), outputs wT = [xT | ( ˜w∗)T] ∈ F𝑁𝑤 . To show
1, 𝛿∗
(𝛿∗
2, 𝛿∗
LPCP
2, 𝛿∗
1, 𝛿∗
3, ˜w∗, h∗) where
.
that this extractor works, take any 𝝅∗ = (𝛿∗
2𝑁𝑔
Pr[VLPCP(st, x, QT𝝅∗) = 1 : (st, Q) ← QLPCP(1𝜅)] >
|F| − 𝑁𝑔
We use 𝝅∗ and CS to define polynomials 𝐴, 𝐵, 𝐶, 𝐻 : F → F:
𝐴(𝑧) = 𝛿∗
˜𝑤∗
𝑖 𝐴𝑛+𝑖(𝑧)
˜𝑤∗
𝑖 𝐵𝑛+𝑖(𝑧)
˜𝑤∗
𝑖 𝐶𝑛+𝑖(𝑧)
𝑥𝑖𝐴𝑖(𝑧) + 
𝑥𝑖 𝐵𝑖(𝑧) + 
𝑥𝑖𝐶𝑖(𝑧) + 
1𝑍𝑆(𝑧) + 𝐴0(𝑧) + 
2𝑍𝑆(𝑧) + 𝐵0(𝑧) + 
3𝑍𝑆(𝑧) + 𝐶0(𝑧) + 
0 + 
𝐻(𝑧) = ℎ∗
𝐶(𝑧) = 𝛿∗
𝐵(𝑧) = 𝛿∗
𝑖∈[𝑁𝑤−𝑛]
𝑖∈[𝑁𝑤−𝑛]
𝑖∈[𝑁𝑤−𝑛]
ℎ∗
𝑖 𝑧𝑖
𝑖∈[𝑛]
𝑖∈[𝑛]
𝑖∈[𝑛]
𝑖∈[𝑁𝑔]
2 = 𝐵(𝜏), 𝑎′
Let Q be the query matrix output by QLPCP, a ← QT𝝅∗ and
𝑎′
2, 𝑎′
1, 𝑎′
3 be the components computed by VLPCP. By construc-
tion, 𝑎′
1 = 𝐴(𝜏), 𝑎′
3 = 𝐶(𝜏) and 𝑎4 = 𝐻(𝜏). Define
the polynomial 𝑃 : F → F where 𝑃(𝑧) = 𝐴(𝑧)𝐵(𝑧) − 𝐶(𝑧) −
𝐻(𝑧)𝑍𝑆(𝑧). By construction, deg(𝑃) ≤ 2𝑁𝑔. Next, VLPCP accepts
1𝑎′
if 𝑎′
2 − 𝑎′
3 − 𝑎4𝑧 = 0, where 𝑧 = 𝑍(𝜏), or equivalently, if
0 = 𝐴(𝜏)𝐵(𝜏) − 𝐶(𝜏) − 𝐻(𝜏)𝑍𝑆(𝜏) = 𝑃(𝜏).
(B.3)
Suppose Eq. (B.3) holds with probability 𝜀 > 2𝑁𝑔/(|F| − 𝑁𝑔);
that is, the verifier accepts with probability greater than 𝜀. Since
QLPCP samples 𝜏 uniformly from F \ 𝑆 and deg(𝑃) ≤ 2𝑁𝑔, we
conclude by the Schwartz-Zippel lemma (Lemma A.1) that 𝑃 ≡ 0.
In particular, this means that for all 𝑗 ∈ [𝑁𝑔],
𝑃(𝛼 𝑗) = 𝐴(𝛼 𝑗)𝐵(𝛼 𝑗) − 𝐶(𝛼 𝑗) = 0,
since 𝑍𝑆(𝛼 𝑗) = 0 for all 𝑗 ∈ [𝑁𝑔]. Equivalently, this means that
𝐴(𝛼 𝑗)𝐵(𝛼 𝑗) = 𝐶(𝛼 𝑗) for all 𝑗 ∈ [𝑁𝑔]. By construction of 𝐴, 𝐵, 𝐶,
this means that
[1 | ˜uT]a𝑗 · [1 | ˜uT]b𝑗 = [1 | ˜uT]c𝑗 ,
((cid:101)st, ˜Q) ← QLPCP(1𝜅). It outputs(cid:101)st, ˜Q, and stS =(cid:101)st.
where ˜uT = [xT | ( ˜w∗)T]. Since this holds for all 𝑗 ∈ [𝑁𝑔], we
have that CS𝜅(x, ˜w∗) = 1, as required.
• HVZK: We first construct a simulatorSLPCP = (SLPCP,1,SLPCP,2):
– SLPCP,1(1𝜅): The statement-independent algorithm samples
– SLPCP,2(stS, x): On input the state stS = ( ˜𝑎0, ˜𝑏0, ˜𝑐0, ˜a, ˜b, ˜c, ˜𝑧)
and the statement x, the statement-dependent algorithm sam-