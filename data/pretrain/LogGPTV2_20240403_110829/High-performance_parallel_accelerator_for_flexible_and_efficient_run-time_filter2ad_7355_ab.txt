set the tag (taint) input-derived data, and then transparently
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
Monitor
DIFT (1-bit value tag)
UMC (1-bit location tag)
BC (4-bit location tag and 4-bit value tag)
RC (32-bit object tag)
Trigger
ALU instructions
LOAD instructions
STORE instructions
JUMP instructions
LOAD instructions
STORE instructions
LOAD instructions
STORE instructions
ADD instructions
SUB instructions
OR instructions
XOR instructions
NOT instructions
Create pointer
Destroy pointer
Action
Tag(reg dest) := Tag(reg src1) or Tag(reg src2)
Tag(reg dest) := Tag(mem addr)
Tag(mem addr) := Tag(reg dest)
check reg src1 != “1”
check Tag(mem addr) != ”0”
Tag(mem addr) := “1”
check Tag(mem addr) == Tag(reg src1)
Tag(reg src1) := Tag(mem addr)
check Tag(mem addr) == Tag(reg src1)
Tag(mem addr) := Tag(mem src1)
Tag(reg dest) := Tag(reg src1) + Tag(reg src2)
Tag(reg dest) := Tag(reg src1) - Tag(reg src2)
Tag(reg dest) := 0
Tag(reg dest) := 0
Tag(reg dest) := -Tag(reg src1)
refcnt[addr] := refcnt[addr]+1
refcnt[addr] := refcnt[addr]-1
TAG TYPES AND OPERATIONS FOR A SET OF RUN-TIME MONITORING FUNCTIONS.
TABLE I
tracks the ﬂow of tainted information on each instruction in
the monitored application. On each ALU instruction, the tag
of the destination register is set if at least one of the two
input operand tags is set. On each memory access instruction,
the tag is copied from the source to the destination: a store
copies a tag from the source register to the destination memory
location, a load copies a tag from memory to a register. On
a control transfer instruction, such as an indirect jump, the
tag of the target address in the source operand is checked to
ensure that the address is not tainted.
Uninitialized memory checking (UMC) [13]: UMC de-
tects programming mistakes involving uninitialized variables.
Eliminating these memory errors can be a very important
part of the software development cycle. UMC uses 1-bit
location tag per word in memory to indicate whether the
memory location has been initialized since being allocated.
UMC leverages software support to clear tags when memory
is allocated. On each store instruction, the tag of the accessed
memory word is set. On each load instruction, the tag for the
accessed memory word is read and checked to detect when
data is read before being initialized.
Memory bounds checking (BC) [6]: While there exist a
number of run-time bounds checking techniques, in this paper,
we discuss a technique that utilizes a notion of coloring both
pointers and corresponding memory locations. Conceptually,
this approach maintains a location tag for each word in
memory and a value tag for each register and each word in
memory. The location tag encodes the color for the memory
location, and the value tag encodes the color for a pointer. Our
implementation uses 4-bit tags. The tags are set so that pointer
and memory tags match for in-bound accesses and differ
for out-of-bound accesses. On memory allocation events, BC
assigns the same tag value (color) to both memory locations
that are allocated and the pointer than is returned. On each
memory access instruction, the tag of the pointer that is used to
access memory is compared to the tag of the accessed memory
location. The access is allowed only when the tags match.
In addition to checking the color tags, the BC scheme also
tracks the tags for pointers. On memory load instructions,
the value tag is loaded from memory into the destination tag
register. On memory store instructions, the value tag is copied
into memory as the pointer color tag of the accessed memory
location. On ALU (ADD/SUB) instructions, the value tags are
propagated from the source operands to the output register
to keep track of tags for an updated pointer on an pointer
arithmetic operation.
Reference counting (RC) [8]: RC transparently performs
reference counting in hardware to aid garbage collection mech-
anisms implemented in software. In this scheme, because hard-
ware can transparently maintain reference count information,
software memory allocation mechanisms can quickly ﬁnd and
free memory blocks that are no longer in use by the monitored
application. RC uses multi-bit object tags for each object in
the monitored application. In our study, we used 32-bit tags
to represent integer reference counts. RC leverages compiler
modiﬁcations to ﬁnd instructions that create or destroy pointer
references. On an instruction that creates a new pointer, the
pointer value is used to look up the object tag, and the tag
is incremented. On an instruction that destroys an existing
pointer, the pointer value is used to look up the object tag,
and the tag is decremented.
Table I summarizes the characteristics of each monitoring
technique in terms of the tag type and tag operations.
III. ARCHITECTURE DESIGN
In this section, we present the design of Harmoni, which
can efﬁciently support a broad spectrum of runtime monitoring
techniques based on tagging.
A. Overview
Harmoni is designed as a parallel decoupled co-processor
in a runtime monitoring architecture as shown in Figure 3.
The Harmoni architecture supports ﬁne-grained monitoring
techniques by adding specialized hardware support
to the
processing core to forward an execution trace of selected types
of instructions from the main processing core to Harmoni.
The forwarded instructions are selected based on the opcode.
The execution trace includes the opcode, register indexes of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
Processing Core 
I-TLB 
D-TLB 
I-Cache 
D-Cache 
c
i
r
b
a
F
-
e
r
o
C
e
c
a
f
r
e
t
n
I
Harmoni 
Tag TLB 
Tag Cache 
Bus Interface 
Bus to an L2 cache or a memory controller 
Fig. 3. High-level block diagram of the Harmoni architecture.
source and destination registers, the accessed memory address
on a load/store instruction, and a pointer value for a high-level
object that are being used in the main core.
Forwarded instructions trigger tag operations on the Har-
moni co-processor, which update the corresponding tags
and/or check tag values for errors or events in the monitored
program. In order to efﬁciently manage location and value
tags in main memory, the Harmoni architecture includes a
tag TLB to translate a data address to a tag address and an
L1 tag cache. The Harmoni pipeline raises an exception if a
check fails; this exception is delivered over a backward FIFO
to the main processing core, which invokes an appropriate
exception handler to pinpoint the cause of the exception and
take necessary actions.
The architecture allows the monitoring on Harmoni to be
mostly decoupled from the program running on the main pro-
cessing core by using a FIFO within the Core-Fabric interface
to buffer forwarded instructions. Using the interface, the main
processing core can queue each completed instruction that is
to be forwarded to Harmoni into the FIFO and then continue
execution without waiting for the corresponding check on
Harmoni to complete. The Harmoni co-processor can dequeue
instructions at its own pace from the Core-Fabric interface and
perform tag operations for each dequeued instruction. As long
as the FIFO within the Core-Fabric interface is not full, the
main processor and Harmoni can effectively run in parallel.
In our implementation of the Harmoni prototype, the FIFO
is sufﬁciently sized (64 entries) to accommodate short-term
differences in the throughput between the main processing core
and the Harmoni co-processor.
Because the monitoring on Harmoni
is performed in a
decoupled fashion, an exception signal reaches the main core
after the corresponding instruction has already completed. The
delayed exception is sufﬁcient if we assume a fail-stop model
where the monitored program is terminated on an error. To
avoid erroneous program outputs and corruption in persistent
state, critical instructions such as system calls with externally
visible effects are delayed until Harmoni checks are completed
for all preceding instructions. If necessary, exceptions raised
by Harmoni can be made precise by either utilizing standard
precise exception mechanisms for modern out-of-order pro-
cessors or by adding a small amount of buffering to in-order
processors [14].
B. Programmability
At a high level, the Harmoni co-processor supports a wide-
range of tag-based program monitoring techniques by allowing
both tag type and tag operations to be customized depending
on the monitoring technique. The Harmoni co-processor is
designed to efﬁciently support the three types of tags: value,
location, and object tags. The size of the tag can be statically
conﬁgured to be any value that is a power of two, up to a
word (32 bits). The granularity of location tags can be set to
be a value that is a power of two and equal to or greater than
a byte. The granularity of a single byte means that there is a
tag for each byte. The object tags allow an arbitrary range in
memory to be tagged.
For location tags, the Harmoni architecture supports storing
a tag for each memory location using a tag memory hierarchy
(TMEM). Figure 4 show the block diagram with major com-
ponents in the Harmoni pipeline. The tags are stored in a linear
array in main memory alongside program instructions and
data. TMEM is accessed using a memory address forwarded
along with an instruction from the main processing core. The
mapping between the monitored program’s memory address
and the corresponding tag address can be done as a simple
static translation in virtual addresses based on the tag size and
granularity. The operating system can allocate physical mem-
ory space to program data and tags using the virtual memory
mechanism. The mappings can be cached in the tag TLB,
which translates memory addresses used by the monitored
application into memory tag addresses. Harmoni supports the
tagging of memory blocks with statically conﬁgurable sizes
of one byte or larger (any power of two) with tags that can
be any size that is a power of two in bits and up to a word
length (32 bits). Similar to regular data accesses, the latency
of tag accesses is reduced using a tag cache hierarchy. In
our prototype, the cache uses write-back and write-allocate
policies.
For value tags, Harmoni supports tagging each register and
each value in memory using a tag register ﬁle (TRF) and tag
memory hierarchy (TMEM). The TRF stores a tag for the
corresponding register in the main core. The TRF is accessed
using source/destination register numbers from the main core.
The TMEM is accessed using the memory address from the
main core on load/store instructions in the same way that the
location tag is handled.
Because both location and value tags require tags in mem-
ory, the memory hierarchy in Harmoni needs to be able to
deal with two tags at a time in order to allow both tag types
to be used simultaneously. In case that both location and value
tags are enabled, Harmoni stores a concatenation of the two
tags in a linear array so that both tags can be easily accessed
together. The tag cache allows reading both tags together and
updating only one tag type. For example, our bounds checking
prototype uses 4-bit location and value tags per word. Harmoni
maintains an 8-bit meta-data per word in memory. On a load,
the tag cache reads the 8-bit meta-data and splits it into two
4-bit tags. On a store, the cache only overwrites 4 bits out of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
Tag Read
Tag Compute
Tag Update
Decode
Tag Read
Tag Update
Tag Check
Tag Write
rs1
rs2
rd
alu_result
M
U
X
SEL
TBASE
TBOUND
AN
D
AN
D
AN
D
E
n
c
o
d
e
op
Control 
Table
TRF
REN
TMEM
REN
TTBL
REN
miss?
M
U
X
SEL
M
U
X
SEL
UALU
OP
M
U
X
SEL
UTBL
OP
M
U
X
SEL
M
U
X
SEL
CALU
OP
CTBL
OP
TRF
WEN
TMEM
WEN
TTBL
WEN
PASS
tbl miss
update miss
check miss
Fig. 4. High level block diagram of the Harmoni pipeline. The pipeline can be broken down into ﬁve discrete stages. The ﬁrst two stages read the tags of
operands used in the instruction, the third and fourth stage update and check the tags, the ﬁfth stage writes the updated tag. The output of the control table
is connected to all of the modules in the last four stages of the pipeline and determines their behavior.
the 8-bit meta-data.
Object tags are supported with a software-controlled object
table (OBJTBL), which stores a tag for recently accessed high-
level program objects. Each entry in the OBJTBL contains
base and bound addresses of an object along with its tag. The
table is looked up in two steps using a pointer from the main
core. In the ﬁrst step, the table compares the base and bound
addresses of each entry with the input pointer to see if there
is a match. If the corresponding entry is found, the tag value
is read in the second step. If the entry does not exists in the
table, a object table miss exception is raised so that the table
can be updated by software. In our prototype, the OBJTBL can
cache up to 32 entries for object tags. Previous studies [17],
[15], [16] have shown that program objects and arrays have
very high temporal locality, and only a handful of entries are
sufﬁcient to cache object tags with low miss rates.
In addition to ﬂexible tag types and sizes, the Harmoni