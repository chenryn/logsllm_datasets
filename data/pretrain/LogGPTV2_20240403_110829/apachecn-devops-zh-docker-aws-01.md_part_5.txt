这个页面是应用的根，您可以看到当您使用浏览器时，Django REST 框架为导航 API 提供了一个图形界面。如果您使用`curl`命令而不是浏览器，请注意，Django 检测到一个简单的 HTTP 客户端，并且只返回一个 JSON 响应:
```
src> curl localhost:8000
{"todos":"http://localhost:8000/todos"}
```
如果您点击 todos 项目(`http://localhost:8000/todos`)的超媒体链接，您将看到一个 Todo 项目列表，该列表当前为空:
![](img/7c7bb14a-91e3-484e-85d6-83e9d89a6767.png)
Todo Item List
请注意，您可以使用网络界面创建一个带有标题和顺序的新待办事项，一旦您单击开机自检按钮，该界面将填充待办事项列表:
![](img/68f0d7ba-a263-4044-9cd5-7582841aa551.png)
Creating a Todo Item
当然，您也可以使用命令行和`curl`命令创建新的待办事项，列出所有待办事项，并更新待办事项:
```
> curl -X POST -H "Content-Type: application/json" localhost:8000/todos \
 -d '{"title": "Wash the car", "order": 2}'
{"url":"http://localhost:8000/todos/2","title":"Wash the car","completed":false,"order":2}
> curl -s localhost:8000/todos | jq
[
 {
 "url": "http://localhost:8000/todos/1",
 "title": "Walk the dog",
 "completed": false,
 "order": 1
 },
 {
 "url": "http://localhost:8000/todos/2",
 "title": "Wash the car",
 "completed": false,
 "order": 2
 }
]
> curl -X PATCH -H "Content-Type: application/json" localhost:8000/todos/2 \
 -d '{"completed": true}' {"url":"http://localhost:8000/todos/2","title":"Wash the car","completed":true,"order":1}
```
在前面的例子中，您首先使用`HTTP POST`方法创建一个新的 Todo 项目，然后验证 Todos 列表现在包含两个 Todo 项目，将`curl`命令的输出传送到您之前安装的`jq`实用程序，以格式化返回的项目。最后，使用`HTTP PATCH`方法对 Todo 项进行部分更新，将该项标记为已完成。
您创建和修改的所有 Todo 项都将保存在应用数据库中，在本例中，应用数据库是一个运行在您的开发机器上的 SQLite 数据库。
# 在本地测试示例应用
现在，您已经了解了示例应用，让我们看看如何在本地运行测试来验证应用是否按预期运行。todobackend 应用包括一小组位于`src/todo/tests.py`文件中的 Todo 项目测试。理解这些测试是如何编写的超出了本书的范围，但是知道如何运行这些测试对于能够测试、构建并最终将应用打包到 Docker 映像中至关重要。
测试应用时，有特定于应用测试的附加依赖项是非常常见的，如果您要构建在生产环境中运行的应用，则不需要这些依赖项。这个示例应用在名为`src/requirements_test.txt`的文件中定义了测试依赖关系，该文件导入了`src/requirements.txt`中的所有核心应用依赖关系，并添加了附加的特定于测试的依赖关系:
```
-r requirements.txt
colorama==0.3.9
coverage==4.4.2
django-nose==1.4.5
nose==1.3.7
pinocchio==0.4.2
```
要安装这些需求，您需要运行画中画包管理器，参考`requirements_test.txt`文件:
```
src> pip3 install -r requirements_test.txt --user
Requirement already satisfied: Django==2.0 in /usr/local/lib/python3.7/site-packages (from -r requirements.txt (line 1)) (2.0)
Requirement already satisfied: django-cors-headers==2.1.0 in /usr/local/lib/python3.7/site-packages (from -r requirements.txt (line 2)) (2.1.0)
...
...
Installing collected packages: django-coverage, nose, django-nose, pinocchio
Successfully installed django-nose-1.4.5 pinocchio-0.4.2
```
现在，您可以通过运行`python3 manage.py test`命令，传入`--settings`标志来运行示例应用的测试，该标志允许您指定自定义设置配置。在示例应用中，在`src/todobackend/settings_test.py`文件中定义了附加的测试设置，扩展了`src/todobackend/settings.py`中包含的默认设置，增加了测试增强功能，例如规格样式格式和代码覆盖率统计:
```
src> python3 manage.py test --settings todobackend.settings_test
Creating test database for alias 'default'...
Ensure we can create a new todo item
- item has correct title
- item was created
- received 201 created status code
- received location header hyperlink
Ensure we can delete all todo items
- all items were deleted
- received 204 no content status code
Ensure we can delete a todo item
- received 204 no content status code
- the item was deleted
Ensure we can update an existing todo item using PATCH
- item was updated
- received 200 ok status code
Ensure we can update an existing todo item using PUT
- item was updated
- received 200 created status code
----------------------------------------------------------------------
XML: /Users/jmenga/todobackend/src/unittests.xml
Name                              Stmts   Miss  Cover
-----------------------------------------------------
todo/__init__.py                      0      0   100%
todo/admin.py                         1      1     0%
todo/migrations/0001_initial.py       5      0   100%
todo/migrations/__init__.py           0      0   100%
todo/models.py                        6      6     0%
todo/serializers.py                   7      0   100%
todo/urls.py                          6      0   100%
todo/views.py                        17      0   100%
-----------------------------------------------------
TOTAL                                42      7    83%
----------------------------------------------------------------------
Ran 12 tests in 0.281s
OK
Destroying test database for alias 'default'...
```
请注意，Django 测试运行程序扫描存储库中的各个文件夹进行测试，创建一个测试数据库，然后运行每个测试。所有测试完成后，测试运行程序会自动销毁测试数据库，因此您不必执行任何手动设置或清理任务。
# 摘要
在本章中，您了解了 Docker 和容器，并了解了容器的历史以及 Docker 是如何发展成为测试、构建、部署和运行容器工作负载的最流行解决方案之一的。您了解了 Docker 的基本体系结构，包括 Docker 客户端、Docker 引擎和 Docker 注册表，我们还介绍了使用 Docker 时将使用的各种类型的对象和资源，其中包括 Docker 映像、卷、网络、服务，当然还有 Docker 容器。
我们还讨论了在 AWS 中运行 Docker 应用的各种选项，包括弹性容器服务、Fargate、弹性 Kubernetes 服务、弹性 Beanstalk，以及运行自己的 Docker 平台，如 Docker Swarm。
然后，您在本地环境中安装了 Docker，这在 Linux 上是本机支持的，并且在 macOS 和 Windows 平台上需要一个虚拟机。Mac 的 Docker 和 Windows 的 Docker 会自动为您安装和配置虚拟机，让 Docker 在这些平台上的启动和运行比以往任何时候都更容易。您还学习了如何将面向 Linux 的 Windows 子系统与面向 Windows 的 Docker 集成，这将允许您支持我们将在本书中使用的基于*nix 的工具。
最后，您设置了一个 GitHub 帐户，将示例应用存储库分叉到您的帐户，并将存储库克隆到您的本地环境。然后，您学习了如何安装示例应用依赖项，如何运行本地开发服务器，如何运行数据库迁移以确保应用数据库模式和表就位，以及如何运行单元测试以确保应用按预期运行。在您能够测试、构建和发布作为 Docker 映像的应用之前，了解所有这些任务非常重要，这将是下一章的重点，您将创建一个完整的本地 Docker 工作流，以自动化为应用创建生产就绪的 Docker 映像的过程。
# 问题
1.  对/错:Docker 客户端使用命名管道与 Docker 引擎通信。
2.  对/错:Docker 引擎在 macOS 上本地运行。
3.  对/错:Docker 映像发布到 Docker 商店进行下载。
4.  您为 Linux 安装了 Windows 子系统，并安装了 Docker 客户端。您的 Docker 客户端无法与您的 Docker 进行 Windows 安装通信。你如何解决这个问题？
5.  对/错:卷、网络、容器、映像和服务都是可以使用 Docker 处理的实体。
6.  您可以通过运行`pip install docker-compose --user`命令标志来安装 docker-compose，但是在尝试运行程序时，您会收到一条消息，说明 **docker-compose:未找到**。你如何解决这个问题？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   Docker 概述:[https://docs.docker.com/engine/docker-overview/](https://docs.docker.com/engine/docker-overview/)
*   Docker 入门:[https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)
*   Mac 安装说明 Docker:https://docs . docker . com/docker-for-MAC/install/
*   Windows 安装说明摘要:https://docs.docker.com/docker-for-windows/install/
*   Ubuntu 安装说明 Docker:https://docs . docker . com/install/Linux/docker-ce/Ubuntu/
*   Debian 安装说明的 Docker:https://docs . docker . com/install/Linux/docker-ce/debian/
*   百位安装说明的 Docker:https://docs . docker . com/install/Linux/docker-ce/centos/
*   Fedora 安装说明的 Docker:https://docs . docker . com/install/Linux/docker-ce/fedora/
*   Linux 的 Windows 子系统安装说明:[https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)
*   苹果电脑自制包装经理:[https://brew.sh/](https://brew.sh/)
*   PIP 包管理器用户安装:[https://pip.pypa.io/en/stable/user_guide/#user-installs](https://pip.pypa.io/en/stable/user_guide/#user-installs)
*   转到用户手册:[https://git-SCM . com/docs/user 手册. html](https://git-scm.com/docs/user-manual.html)
*   GitHub 指南:https://guide . github . com/
*   分叉 GitHub 存储库:[https://guides.github.com/activities/forking/](https://guides.github.com/activities/forking/)
*   姜戈网络框架:[https://www.djangoproject.com/](https://www.djangoproject.com/)
*   姜戈 REST 框架:[http://www.django-rest-framework.org/](http://www.django-rest-framework.org/)*