### Network Setup and Attack Evaluation

Our Autonomous System (AS) is registered with the RIPE NCC, and we purchased a /22 prefix for $20,000. We connected our AS to the DE-CIX internet exchange point in Frankfurt. This AS hosts the servers used for evaluating various attacks.

#### DNS Resolver and Domain Setup
We set up an Unbound 1.6.7 DNS resolver on Linux 4.14.11, and poisoned its cache with records of customer domains. We also registered a victim domain and configured two nameservers and an email server within this domain. We use this victim domain to register accounts with the services we test, and refer to it as the "victim customer domain." Additionally, we set up a border router to represent the attacker, which issues bogus BGP announcements claiming the prefix assigned to our victim AS. This setup allows us to evaluate BGP prefix hijack attacks against our domains without affecting other services or the global BGP routing table.

#### Side-Channel and Fragmentation Attacks
To evaluate cache poisoning attacks using side-channels, we configured the nameservers in our domain to support rate-limiting and the DNS resolver to issue ICMP errors. For fragmentation-based cache poisoning attacks, we configured the nameservers to reduce the MTU according to the value in ICMP fragmentation needed messages. The nameservers in our victim domain use a globally incremental IPID counter.

### Study Methodology

Our experimental evaluation of the attacks is performed reliably without disrupting the functionality of the customers. We follow a two-step approach:

1. **Vulnerability Assessment of Providers:**
   - We set up victim domains and register victim accounts with the providers.
   - We experimentally test attack methodologies by poisoning their DNS caches with malicious records mapping the email server in our victim domain to adversarial hosts.
   - We then hijack our victim accounts by triggering password recovery procedures and changing their passwords.
   - This validates vulnerabilities to cache poisoning without risking the providers' use of poisoned records for genuine customers.

2. **Vulnerability Assessment of Customers:**
   - We set up a victim DNS resolver and poison its cache with malicious records mapping the genuine customer domains to our adversarial hosts.
   - The combination of both evaluations (against providers and customers) enables us to estimate the extent of vulnerable accounts that can be hijacked.

### BGP Prefix Hijack

BGP (Border Gateway Protocol) allows ASes to compute paths to any Internet destination. Since BGP is not currently protected, adversaries can send bogus BGP announcements to hijack victim prefixes, intercepting communication of victim ASes that accept these announcements. In our attacks, we hijack the prefix of our AS to intercept responses from our nameservers to the DNS resolvers of the providers and requests from our DNS resolver to the customers' domains. After our AS accepts the bogus BGP announcement, all communication between the servers on our AS and the targets in our dataset traverse our adversarial BGP router.

We launch short-lived hijacks, which are common and allow the attacker to stay below the radar. These hijacks are often caused by configuration errors and are largely ignored due to their minimal impact on network load or connectivity.

### Attack Evaluation Against Providers

The adversary announces a prefix of the provider's network where the target DNS resolver is located. The bogus BGP announcement is sent only on the interface connected to our AS and not to other destinations. This redirects responses from our nameservers to the adversarial host instead of the provider's DNS resolver. The adversary initiates a password recovery procedure, triggering a DNS request to our victim domain. The nameserver sends a response, which is redirected to the adversary's host. The adversary manipulates the response, injecting a DNS record that maps the email server of our victim domain to the adversary's IP address. The response is then sent to the provider, and the BGP hijack is released. The DNS resolver caches the response and returns it to the email server, which sends the password recovery link to the adversary's IP address. The adversary resets the password and takes control over the account.

### Attack Evaluation Against Customers

The adversary announces prefixes of the networks hosting the nameservers in the target customers' domain. The bogus BGP announcements are sent only on the interface connected to our AS. This redirects DNS requests from our victim AS to the adversarial host instead of the nameservers of the customer's domain. The attacker releases the hijacked prefix and crafts a spoofed DNS response to our DNS resolver, mapping the IP address of the adversary to the email server of the victim customer's domain. The records from the DNS response are cached by our resolver.

### Side-Channel Port Inference (SadDNS)

The SadDNS off-path attack uses an ICMP side channel to guess the UDP source port used by the victim resolver in the query to the target nameserver. This reduces the entropy in a DNS request from 32 bits (DNS TXID & UDP port) to 16 bits. The adversary then uses brute-force to match the TXID by sending spoofed packets for each possible TXID value to the resolver.

#### Attack Evaluation Against Providers

We verify the existence of the ICMP global-rate limit by sending a single UDP probe to the resolver to check if it emits ICMP port unreachable messages. Then, we send a burst of 50 spoofed UDP packets to closed ports at the resolver and follow up with a single non-spoofed UDP packet to observe if an ICMP port unreachable message is received. If the ICMP global rate-limit is present, no message will be received.

The adversary initiates a password recovery procedure with a provider for an account of our victim customer domain, triggering a DNS request to our victim domain. The adversary mutes the nameservers on our victim AS to prevent the response from being sent to the provider's resolver, then infers the source port in the DNS request. Once the source port is found, it sends 2^16 spoofed responses for each possible TXID value with malicious DNS records. If the response is accepted by the resolver, it is cached and used by the service for sending an email with the password or reset link, allowing the attacker to control the account.

#### Attack Evaluation Against Customers

We configure our DNS resolver to send ICMP errors on closed ports and use our own implementation of the SadDNS port scanning application with binary search to poison the resolver with a malicious record pointing the customer's domain to our adversarial host. Due to a high failure rate, evaluating SadDNS on all domains in our dataset is impractical. We perform the measurement on a dozen randomly selected customers. Our implementation performs the complete attack, including triggering queries, muting nameservers, and scanning ports using the ICMP side-channel, followed by sending spoofed DNS responses with malicious records.

### Injection into IP-Defragmentation Cache (FragDNS)

The off-path adversary uses a spoofed IPv4 fragment to manipulate the fragmented response from the nameserver. The idea is to send a spoofed fragment that is reassembled with the first genuine fragment from the nameserver. The adversary replaces the second fragment with a malicious fragment, overwriting parts of the payload of a DNS response with new content. The reassembled IP packet contains legitimate DNS records sent by the genuine nameserver with the malicious records from the fragment sent by the adversary. Since the challenge values (port, TXID) are in the first fragment, they remain intact.

#### Attack Evaluation Against Providers

We evaluate the FragDNS attack against the resolvers of the providers with our victim domain. Our nameservers use a custom application that always emits fragmented responses padded to a certain size. The nameservers are configured to send CNAME records in the first fragmented response. When the provider's resolver receives and reassembles the fragmented response, it issues a subsequent query for the CNAME-alias, verifying that the spoofed fragment was correctly reassembled and cached.

The adversary sends two spoofed fragments (for each nameserver's IP address) to the provider's resolver. The fragments are identical except for the source IP addresses. The fragments contain malicious DNS records mapping the email server to the adversary's IP address. The adversary initiates a password recovery for our victim account, triggering a DNS request to one of the nameservers in our victim domain. The response from the nameserver is sent in two fragments. The first fragment is reassembled with one of the second fragments of the adversary, already waiting in the IP defragmentation cache. The reassembled packet is checked for UDP checksum and, if valid, passed to the DNS software. If the records are cached by the provider's resolver, the password recovery link is sent to the host controlled by the attacker.

#### Attack Evaluation Against Customers

We configure our DNS resolver to allow fragmentation and look up the nameservers in the customer's domain to check if we can force them to fragment responses. We send DNS requests from our resolver and receive responses. From the adversarial host, we send ICMP fragmentation needed errors (Packet Too Big) for the source IP address of our DNS resolver. We then send DNS requests from our resolver and check if the responses arrive fragmented according to the MTU indicated in the ICMP errors.

We run the FragDNS attack against the nameservers that fragment DNS responses following our ICMP PTB errors. The adversarial host crafts spoofed second fragments, one for each nameserver in the customer's domain. Each fragment contains a malicious DNS record mapping the email server of the customer's domain to the adversary's IP address. The adversary sends all these fragments to our DNS resolver. The adversary causes our DNS resolver to issue a DNS request for an MX record in the victim customer's domain. The nameserver that received the request responds with a fragmented DNS packet. The first fragment is reassembled with the matching second fragment waiting in the IP defragmentation cache. If the email server in the response is mapped to the adversary's IP address, the attack succeeds.

### Hijacking Accounts

In this section, we evaluate DNS poisoning attacks against providers and customers using the methodologies described above. After collecting the target providers and their customers, we analyze the password recovery mechanism at each provider, collect the DNS resolvers at those providers, and evaluate off-path cache poisoning attacks against the DNS resolvers of providers. Finally, we measure the percentage of vulnerable customers of those providers.

#### Datasets

We use two datasets: one for providers and one for their customers.

**Providers:**
- **RIRs:** All five RIRs.
- **Registrars:** Top 15 registrars based on the number of domains managed.
- **IaaS Providers:** Selected based on market share data.
- **CAs:** Top 5 CAs covering 97% of the market share.

Some providers do not allow the creation of user accounts, so we could not test them. We obtained a list of 32 resource providers using 1,006 resolvers on 44 ASes associated with 130 prefixes.

**Customers:**
- We extract account information for customers of RIRs and domain registrars from whois databases.
- We parse email addresses in whois records to extract the domains of the customers and query the nameservers responsible for those domains.
- We collected 94,997 user accounts hosted in 59,322 domains and 69,935 nameservers.

#### Collecting Accounts’ Information

The first step in our attack is to trigger the password recovery procedure at the provider. This requires collecting information about the target customer, such as the email account required to log into the target account, a username, or a handle. We study the information needed for password recovery and how to collect that information for our targets. We found that email addresses can often be retrieved from public whois records. For customers whose details cannot be publicly accessible via whois, we use manual research and dictionary attacks.