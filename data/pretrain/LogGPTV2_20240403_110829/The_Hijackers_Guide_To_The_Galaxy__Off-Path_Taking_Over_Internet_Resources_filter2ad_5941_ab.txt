(which has a primary account with RIPE NCC). We purchased
a /22 preﬁx for our AS for 20,000USD. We connected our
AS to DE-CIX internet exchange point in Frankfurt. This
AS hosts the servers which we use for our evaluation of the
attacks.
We set up an Unbound 1.6.7 DNS resolver on Linux
4.14.11, whose cache we poison with the records of the cus-
tomer domains. We registered a victim domain and set up two
nameservers in our domain and an Email server. We use our
victim domain to register accounts with the services that we
test in this work. We call this domain the victim customer
domain. We also set up a border router which represents our
attacker. The attacker’s BGP router issues bogus BGP an-
3150    30th USENIX Security Symposium
USENIX Association
DNSwebNSmailInternetAttacker6.6.6.6Provider NetworkAS 3030.0.0.0/24Customer NetworkAS 123123.0.0.0/24123Poison provider’s DNS resolvervia Hijack/Sad/FragDNSTrigger password recovery Emailand change customer’s passwordLog-in and exploit resources in customer’s account12321232nouncements that claim the preﬁx assigned to our victim AS.
This allows us to evaluate the viability of attacks with BGP
preﬁx hijacks against our domains hosted on our victim AS
without affecting services and domains not under our control
and without affecting the global BGP routing table in the
Internet.
To evaluate cache poisoning attacks with side-channels
we conﬁgure the nameservers in our domain to support rate-
limiting and the DNS resolver to issue ICMP errors. To evalu-
ate fragmentation based cache poisoning attacks we conﬁgure
nameservers in our domain to reduce the MTU according
to the value in ICMP fragmentation needed messages. The
nameservers in our victim domain use a globally incremental
IPID counter.
4.2 Study Methodology
Our experimental evaluation of the attacks is performed reli-
ably yet without disrupting the functionality of the customers.
To achieve this we evaluate the attacks in two steps: (1) We
evaluate vulnerabilities to cache poisoning in providers. For
this we set up victim domains and register victim accounts
with the providers. We experimentally test the attack method-
ologies against providers by poisoning their DNS caches with
malicious records mapping the Email server in our victim
domain to the adversarial hosts that we control. We then hi-
jack our victim accounts by triggering the password recovery
procedures and changing their passwords. This enables us to
validate vulnerabilities to cache poisoning yet without risking
that the providers use poisoned records for genuine customers.
The ability to take over the accounts of the real customers
depends not only on vulnerabilities in providers’ infrastruc-
ture but also on properties in customers’ domains. (2) Hence,
in this step we set up a victim DNS resolver and poison its
cache with malicious records mapping the genuine customer
domains to our adversarial hosts. The combination of both
evaluations against the providers and against the customers
enables us to estimate the extent of the vulnerable accounts
that can be hijacked.
4.3 BGP Preﬁx Hijack
BGP (Border Gateway Protocol) allows ASes to compute the
paths to any Internet destination. Since BGP is currently not
protected, adversaries can send bogus BGP announcements to
hijack victim preﬁxes, hence intercept the communication of
victim ASes that accept the malicious BGP announcements.
In our attacks we hijack the preﬁx of our AS: once in the
evaluation against providers to intercept the responses from
our nameservers sent to the DNS resolvers of the providers
and then again during the evaluation of the customers, to
intercept requests from our DNS resolver to the customers’
domains. After our AS accepts the bogus BGP announcement,
all the communication between the servers on our AS and the
servers of the targets in our dataset traverse our adversarial
BGP router.
We launch short-lived hijacks. Such hijacks are common
[37] and allow the attacker to stay below the radar [4, 16].
It is believed that short-lived trafﬁc shifts are caused by the
conﬁguration errors (that are quickly caught and ﬁxed) and
since they do not have impact on network load or connectivity,
they are largely ignored [10, 27, 28]. We evaluate our attacks
using short-lived same preﬁx hijacks and sub-preﬁx of the
victim preﬁx.
Our experimental evaluation reﬂects a common BGP hi-
jacking attacker: the attacker controls a BGP router or an AS,
and issues BGP announcements hijacking the same-preﬁx or
a sub-preﬁx of a victim AS in the Internet.
4.3.1 Attack evaluation against providers
The adversary announces to our victim AS a preﬁx of the
network of the provider where the target DNS resolver is
located. The bogus BGP announcement is sent only on the
interface that is connected to our AS and is not sent to other
destinations in the Internet. As a result, the responses from the
nameservers of our victim domain are sent to the adversarial
host instead of the DNS resolver of the provider. The adver-
sary initiates password recovery procedure for an account of
our victim customer domain. This triggers a DNS request to
our victim domain. The corresponding nameserver sends a
response, which is instead redirected to the adversary’s host.
The adversary manipulates the response, and injects a DNS
record that maps the Email server of our victim domain to the
IP address of the adversary. The response is then sent to the
provider and the BGP hijack is released. The DNS resolver
caches the response and returns it to the Email server, which
sends the password recovery link to the IP address of our ad-
versary. The adversary resets the password and takes control
over the account.
4.3.2 Attack evaluation against customers
The adversary announces to our victim AS preﬁxes of the
networks that host the nameservers in the target customers’
domain. The bogus BGP announcements are sent only on
the interface that is connected to our AS and not to other
destinations in the Internet. As a result, the DNS requests from
the DNS resolver on our victim AS are sent to the adversarial
host instead of the nameservers of the customer’ domain. The
attacker releases the hijacked preﬁx, and additionally crafts
a spoofed DNS response to our DNS resolver mapping the
IP address of the adversary to the Email server of the victim
customer’s domain. The records from the DNS response are
cached by our resolver.
USENIX Association
30th USENIX Security Symposium    3151
4.4 Side-channel Port Inference
SadDNS off-path attack [33] uses an ICMP side channel to
guess the UDP source port used by the victim resolver in the
query to the target nameserver. This reduces the entropy in
a DNS request from 32 bit (DNS TXID & UDP port) to 16
bit. The adversary then uses brute-force to match the TXID
by sending spoofed packets for each possible TXID value to
the resolver.
4.4.1 Attack evaluation against providers
We verify the existence of the ICMP global-rate limit: we
send a single UDP probe to the resolver to verify that it emits
ICMP port unreachable messages. Then, we send a burst of 50
spoofed UDP packets to closed ports at the resolver and follow
up with a single non-spoofed UDP packet and observe if an
ICMP port unreachable message is received by our sender.
If the ICMP global rate-limit is present no message will be
received because the global rate-limit is already reached.
The adversary initiates password recovery procedure with a
provider for an account of our victim customer domain. This
triggers a DNS request to our victim domain. The adversary
mutes the nameservers on our victim AS, to prevent the re-
sponse from being sent to the resolver of the provider, then
runs the procedure for inferring the source port in the DNS
request. Once the source port is found, it sends 216 spoofed
responses for each possible TXID values with malicious DNS
records in payload. The records map the nameservers of the
victim domain to attacker controlled IP addresses. If the re-
sponse is accepted by the resolver of the public service, it is
cached and used by the service for sending an Email with
the password or the reset link. The attacker now controls the
account.
4.4.2 Attack evaluation against customers
We conﬁgure our DNS resolver to send ICMP errors on closed
ports. We use our own implementation of the SadDNS port
scanning application with binary search and attempt to poison
the resolver with a malicious record pointing the domain of
the customer to our adversarial host. Due to a high failure
rate, evaluation of each tuple (resolver, domain) takes up to
30 minutes, hence evaluating SadDNS on all the domains in
our dataset is not practical. We therefore perform the measure-
ment on a dozen randomly selected customers in our dataset.
Our implementation performs the complete attack from trig-
gering the queries to muting the nameservers and scanning
the ports (using the ICMP side-channel) and in the last step
sending the spoofed DNS responses with malicious records.
The high failure rate of the SadDNS attack is due to the
fact that most of the queries do not generate a useful attack
window, since the resolver times out after less than a second.
The attacker can further improve this via manual attack by
analysing the back-off strategies of the target resolver. The
timeout of the resolver is implementation dependent, e.g., the
timeout value of Unbound is a dynamically computed value
based on RTT to the nameserver, while Bind uses 0.8 seconds.
The DNS software increases the timeout value after each
retransmission.
Injection into IP-Defragmentation Cache
4.5
The off-path adversary uses a spoofed IPv4 fragment to ma-
nipulate the fragmented response from the nameserver, [18].
The idea is to send a spoofed fragment which is reassembled
with the ﬁrst genuine fragment of the nameserver. The adver-
sary replaces the second fragment of the nameserver with its
malicious fragment, hence overwriting some parts of payload
of a DNS response with new (attacker’s injected) content. As
a result, the reassembled IP packet contains the legitimate
DNS records sent by the genuine nameserver with the mali-
cious records from the fragment sent by the adversary. Since
the challenge values (port, TXID) are in the ﬁrst fragment
of the response from the nameserver, they remain intact, and
hence correct.
4.5.1 Attack evaluation against providers
We evaluate FragDNS attack against the resolvers of the
providers with our victim domain. For our nameservers we
use a custom application that we developed, which always
emits fragmented responses padded to a certain size to reach
the tested fragment size limit. The nameservers are conﬁg-
ured to send CNAME records in the ﬁrst fragmented response.
As a result, when the resolver of the provider receives a frag-
mented response and reassembles it, the DNS software will
issue a subsequent query for the CNAME-alias. This allows us
to verify that the spoofed fragment arrived at the resolver and
was reassembled correctly and cached, which is an indicator
that the cache poisoning via fragmentation attack succeeded.
Throughout the attack we use our adversarial host to trigger
password recovery procedures and to inject malicious DNS
records into the caches of the providers, mapping the Email
servers in our domains to the IP addresses allocated to our
adversary.
The adversary sends two spoofed fragments (for each name-
server’s IP address) to the resolver of the public service. The
fragments are identical except for the source IP addresses:
one is sent with a source IP address of one nameserver and
the other is with the source IP address of the other name-
server. The fragments are constructed so that they match the
ﬁrst fragment in the response that will have been sent by our
nameserver. In the payload the fragments contain malicious
DNS records mapping the Email server to the IP address of
the adversary. The adversary initiates password recovery for
our victim account. This triggers a DNS request to one of the
nameservers in our victim domain. We do not know in ad-
vance which nameserver that will be, and hence initially send
3152    30th USENIX Security Symposium
USENIX Association
two spoofed fragments (for each nameserver). The response
from the nameserver is sent in two fragments. Once the ﬁrst
fragment reaches the IP layer at the resolver of the provider
it is reassembled with one of the second fragments of the
adversary (it is already waiting in IP defragmentation cache).
The reassembled packet is checked for UDP checksum and if
valid, passed on to the DNS software on the application layer.
If the records from the DNS packet are cached by the resolver
of the public service, the password recovery link will be sent
to the host controlled by the attacker.
When to send the spoofed ‘second’ fragment? The stan-
dard [RFC791] recommends caching the IP fragments in IP
defragmentation cache for 15 seconds. If there is no match-
ing fragment after 15 seconds, the fragment is removed from
IP defragmentation cache. The actual caching time exceeds
15 seconds in most implementations. For instance in Linux
/proc/sys/net/ipv4/ipfrag_time is set to 30 seconds.
For attack to succeed the total time between the moment
that the fragment enters the IP defragmentation cache at the
provider’s resolver and the moment at which the ﬁrst fragment
from the genuine nameserver arrives should not exceed 15
seconds (to ensure that the attack is effective not only against
resolvers running on Linux but also against standard compli-
ant operating systems). We show that in practice 15 seconds
sufﬁce to launch the attack. We measure the latency from
the moment that we trigger the password recovery procedure
via the web interface of the provider and the moment that a
DNS request from the resolver of the provider arrives at our
nameservers. The measurements for different providers are
plotted in Figure 2. As can be seen, except for two providers,
all the latencies are below 30 seconds. The results for the
attack window across all the providers, plotted in Figure 2
show that the latencies are stable, and are within the inter-
val which provides for successful attacks. For instance, for
AFRINIC RIR the attacker learns that after issuing the pass-
word recovery procedure the DNS query will be sent to the
victim nameserver at a predictable time interval (between 0.1
and 0.2 seconds).
Figure 2: Avg. latency (in seconds) between registration and resolver query,
excluding outliers outside ±1σ.
4.5.2 Attack evaluation against customers
Our evaluation is performed with the domain of a victim
customer against our DNS resolver. The DNS resolver is con-
ﬁgured to allow fragmentation. We look-up the nameservers
in the domain of the customer and check if we can force
them to fragment responses: (1) for each nameserver, our
DNS resolver sends requests to the nameserver and receives
responses. (2) From the adversarial host we send to these
nameservers ICMP fragmentation needed errors indicating
Packet Too Big (PTB) for the source IP address of our DNS
resolver. (3) We send DNS requests from our resolver and
check if the responses arrive fragmented according to the
MTU indicated in the ICMP errors.
We then run FragDNS attack against the nameservers that
fragment DNS responses following our ICMP PTB errors: (4)
The adversarial host crafts spoofed second fragments, one for
each nameserver in customer’s domain. Since the adversary
does not know to which nameserver the resolver will send
a DNS request (the nameserver selection depends on DNS
resolver software) it will send spoofed second fragments for
each of the nameserver in that domain. Each fragment con-
tains an identical payload: a malicious DNS record that maps
the Email server of the customer domain to the IP address of
our adversary. Each fragment has a different spoofed source
IP address corresponding to each of the nameserver in the
target domain. The adversary sends all these fragments to our
DNS resolver. (5) The adversary causes our DNS resolver
to issue a DNS request for a MX record in victim customer’s
domain. The nameserver which received the request responds
with a fragmented DNS packet. The ﬁrst fragment is reassem-
bled with the matching second fragment that is waiting in the
IP defragmentation cache. (6) The adversary receives a DNS
response from our resolver. If the Email server in the response
is mapped to the IP address of our adversary, then the attack
succeeded.
5 Hijacking Accounts
In this section we evaluate DNS poisoning attacks against
the providers and the customers using the methodologies in
Section 4.
After collecting the target providers and their customers in
Section 5.1, we analyse the password recovery mechanism
at each provider in Section 5.2. Then we collect the DNS
resolvers at those providers in Section 5.3.1. We evaluate
off-path cache poisoning attacks against the DNS resolvers of
providers in Section 5.3.2. Finally we measure the percentage
of vulnerable customers of those providers in Section 5.4.
5.1 Datasets
In our measurements and attacks’ evaluations we use two
datasets: of providers and of their customers.
Providers. The providers that we study are listed in Table 1.
For each class of resource providers (RIRs, Registrars, IaaS
providers, CAs) we select a set of most popular examples.
Our methodology for selecting the providers is: (1) all the ﬁve
RIRs, (2) we scan the whois data of 100K-top Alexa domains
and select the top 15 registrars according to the number of
USENIX Association
30th USENIX Security Symposium    3153
 0.01 0.1 1 10 100 1000AFRINICAPNICARINLACNICRIPE NCCgodaddynamecheapnetworksolutionsenomname.comAlibaba CloudAmazon AWSgandinamesiloGoogle CloudOVHCloudMicrosoft AzureIBM CloudTencent CloudOracle CloudDigitalOceanLinodeIONOSHostwindsVultrCloudSigmadigicert.comsectigo.comdomains each registrar is managing, (3) to select the IaaS
providers, we use market share data and supplement it with
additional selected providers1, (5) we select the top 5 CAs
which cover 97% of the market share2, all other CAs have
less than 1% market share.
For registrars and IaaS providers these datasets include
providers which we could not test, because they do not allow
creation of user accounts. For example, publicdomainregistry
does not offer accounts to end-users directly, but only man-
ages domain registration for webhosters. Providers where we
could not register accounts are: tucows.com, publicdomainreg-
istry, cscglobal, markmonitor, Rackspace cloud, CenturyLink
Cloud and Joyent Triton.
We obtain a list of 32 resource providers which use 1,006
resolvers for sending Email (back-end IP addresses) on 44
ASes associated with 130 preﬁxes. Some resource providers
use only a small amount of Email servers and resolvers on
their own networks, while other providers use large pools of
Email servers and resolvers provided by third-party Email
services like Mailchimp and Sendgrid. We list this technical
information in Table 2.
Customers. We extract account information for customers
of RIRs and domain registrars from whois databases. We
parse the Email addresses in whois records to extract the do-
mains of the customers and query the nameservers responsible
for those domains.
Because of data protection settings, not all whois records
contain Email addresses, or only contain masked Email ad-
dresses which point to a registrar’s Email proxy. We were able
to ﬁnd Email addresses for 74.62% of the ASes from RIR
whois databases and for 10.60% of the domains owners in
100K-top Alexa list from domain registrar whois databases
(see Table 3). We collected 94,997 user accounts hosted in
59,322 domains and 69,935 nameservers.
We were not able to retrieve user account information for
IaaS accounts and CAs as this is not possible ethically in an
automated way. An adversary can obtain this information,
e.g., by enumerating usernames as described in Section 5.2.
Our dataset of domain registrars is also representative for
other types of resources hosted under that domain. Organisa-
tions which own domains also own cloud resources at IaaS
providers and certiﬁcates at CAs and use the same domain
for their Email addresses and therefore are vulnerable to the
same attack at those providers.
1https://www.srgresearch.com/articles/quarterly-cloud-spending-blows-
past-30b-incremental-growth-continues-rise, https://stackify.com/top-iaas-
providers/, https://www.g2.com/categories/infrastructure-as-a-service-iaas
2https://w3techs.com/technologies/history_overview/ssl_certiﬁcate: this
market share data lists most of Let’sEncrypt certiﬁcates as issued by IdenTrust
as Let’sEncrypt certiﬁcates are cross signed by IdenTrust. We do not test
Let’sEncrypt itself because it does not offer traditional user accounts and
therefore does not support password recovery.
5.2 Collecting Accounts’ Information
The ﬁrst step in our attack is to trigger the password recov-
ery procedure at the provider. This step requires collecting
information of the target customer whose account the attacker
attempts to hijack, such as the Email account required to log
into the target account, a username or a handle. We study
for each service provider which information is needed for
password recovery and how to collect that information for our
targets; the data is summarised in Table 1. We found that the
customers’ Email addresses can often be retrieved from the
public whois records. We were able to extract the Email ad-
dresses associated with the accounts at the providers for 41%
of the customers in our study. For instance, the Emails for the
SSO accounts of 74.62% of the LIRs (i.e., the customers of
RIRs) can be retrieved via whois.
For victim customers whose details cannot be publicly ac-
cessible via whois we ﬁnd the required information with
manual research and dictionary attack. To carry out the dic-
tionary attack we used the observations we derived from
our data collection from public sources: the data we col-
lected through whois shows that more than 24% of the
Email addresses use one of ten well-known username parts,
like PI:EMAIL, PI:EMAIL, etc.,