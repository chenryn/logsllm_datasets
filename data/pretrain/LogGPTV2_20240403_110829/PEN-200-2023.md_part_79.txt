### Port Forwarding Configurations

Port forwarding configurations can be unwieldy for temporary solutions. However, there are several methods to create port forwards, including the use of Netcat and named pipes, as well as more advanced techniques like `iptables` for those with root privileges.

#### Using Netcat and Named Pipes
- **Netcat and FIFO**: We can combine Netcat and a FIFO (named pipe) to create a port forward.
  - **References**:
    - [Thomas Boutell and Sam Hocevar, 2022](https://github.com/samhocevar/rinetd)
    - [Linux manual page, 2022](https://man7.org/linux/man-pages/man7/fifo.7.html)
    - [holly, 2015](https://gist.github.com/holly/6d52dd9addd3e58b2fd5)

#### Using `iptables`
- **Root Privileges**: If we have root privileges, we can use `iptables` to create port forwards. The specific `iptables` setup will depend on the existing configuration.
- **Enabling Forwarding**: To forward packets in Linux, we need to enable forwarding on the interface by writing "1" to `/proc/sys/net/ipv4/conf/[interface]/forwarding` if it is not already configured to allow it.

### SSH Tunneling

This section covers the following learning objectives:
1. Learn the fundamentals of SSH tunneling.
2. Use SSH local, dynamic, remote, and remote dynamic port forwarding methods.
3. Understand the pros and cons of using `sshuttle`.

#### Overview of Tunneling
- **Tunneling**: At a high level, tunneling involves encapsulating one kind of data stream within another as it travels across a network. Protocols designed for this purpose, such as Secure Shell (SSH), are called tunneling protocols.
- **SSH Protocol**: SSH was developed to provide administrators with the ability to log in to their servers remotely through an encrypted connection. Before SSH, tools like `rsh`, `rlogin`, and Telnet provided similar capabilities but over unencrypted connections.
- **Encrypted Tunnel**: In each SSH connection, all shell commands, passwords, and data are transported through an encrypted tunnel built using the SSH protocol. This makes SSH a versatile tool for passing almost any kind of data securely.

#### Benefits of SSH Tunneling
- **Blending into Background Traffic**: SSH is commonly used by network administrators for legitimate remote administration, making it less likely to be flagged as anomalous in network environments that are not heavily monitored.
- **Common Installation**: SSH client software is often pre-installed on Linux hosts, and OpenSSH client software is increasingly common on Windows hosts.

#### SSH Port Forwarding
- **Official Documentation**: Tunneling data through an SSH connection is referred to as SSH port forwarding. Different SSH software provides slightly different port forwarding capabilities.
- **References**:
  - [Wikipedia, 2019](https://en.wikipedia.org/wiki/Tunneling_protocol)
  - [Wikipedia, 2022](https://en.wikipedia.org/wiki/Secure_Shell)
  - [SSH, 2018](https://www.ssh.com/ssh/protocol/)
  - [Wikipedia, 2022](https://en.wikipedia.org/wiki/Berkeley_r-commands)
  - [Wikipedia, 2022](https://en.wikipedia.org/wiki/Telnet)
  - [OpenSSH, 2022](https://www.openssh.com/)
  - [SSH, 2022](https://www.ssh.com/academy/ssh/tunneling-example#what-is-ssh-port-forwarding,-aka-ssh-tunneling?)

### SSH Local Port Forwarding

#### Example Scenario
- **Initial Setup**: Recall the first port forwarding example using Socat. We set up Socat to listen on TCP port 2345 on the WAN interface of CONFLUENCE01 and forward packets to TCP port 5432 on PGDATABASE01.
- **Modification**: In this scenario, Socat is no longer available on CONFLUENCE01. We still have the credentials from the Confluence database and no firewall preventing us from binding ports on CONFLUENCE01.

#### Setting Up SSH Local Port Forwarding
- **Objective**: We want to connect to an SMB server on a newly found host (172.16.50.217) and download files directly to our Kali machine.
- **Steps**:
  1. **Enumerate Network Interfaces and Routes**:
     - Use `ip route` to discover subnets.
     - Use a Bash loop with Netcat to sweep for open ports.
  2. **Create SSH Local Port Forward**:
     - Use the `-L` option in OpenSSH to set up the port forward.
     - Example command: `ssh -N -L 0.0.0.0:4455:172.16.50.217:445 database_admin@pgdatabase01`
  3. **Confirm Port Listening**:
     - Use `ss -ntplu` to confirm that the SSH process is listening on the specified port.

#### Diagram
- **Connection Flow**: The following diagram illustrates how the SSH local port forward works.

```plaintext
+-------------------+          +-------------------+          +-------------------+
|                   |          |                   |          |                   |
|  Kali Machine     |          |  CONFLUENCE01     |          |  PGDATABASE01     |
|                   |          |                   |          |                   |
|  (Connect to      |  <-----> |  (Listen on port  |  <-----> |  (Forward to port |
|  port 4455)       |          |  4455)            |          |  445 on 172.16.50.217)|
+-------------------+          +-------------------+          +-------------------+
```

### Conclusion
SSH local port forwarding is a powerful tool for both legitimate and penetration testing purposes. By understanding and implementing these techniques, you can effectively navigate restrictive network environments and achieve your objectives.

---

**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved.**

**Made in Morocco**

**Penetration Testing with Kali Linux**