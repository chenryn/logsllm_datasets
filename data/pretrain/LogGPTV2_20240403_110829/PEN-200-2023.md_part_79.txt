port forwarding configurations, but is slightly unwieldy for temporary port forwarding
solutions.
• We can combine Netcat and a FIFO905 named pipe file to create a port forward.906
904 (Thomas Boutell and Sam Hocevar, 2022), https://github.com/samhocevar/rinetd
905 (Linux manual page, 2022), https://man7.org/linux/man-pages/man7/fifo.7.html
906 (holly, 2015), https://gist.github.com/holly/6d52dd9addd3e58b2fd5
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 576
Made in Morocco
Penetration Testing with Kali Linux
• If we have root privileges, we could use iptables to create port forwards. The specific
iptables port forwarding setup for a given host will likely depend on the configuration already
in place. To be able to forward packets in Linux also requires enabling forwarding on the
interface we want to forward on by writing “1” to
/proc/sys/net/ipv4/conf/[interface]/forwarding (if it’s not already configured to allow it).
18.3 SSH Tunneling
This Learning Unit covers the following Learning Objectives:
1. Learn the fundamentals of SSH tunneling
2. Use SSH local, dynamic, remote, and remote dynamic port forwarding methods
3. Understand the pros and cons of using sshuttle
y
At a high-level, tunneling describes the act of encapsulating one kind of data stream within
another as it travels across a network. Certain protocols called tunneling protocols907 are
k
designed specifically to do this. Secure Shell (SSH)908 is an example of one of these protocols.909
SSH was initially developed to give administrators the sability to log in to their servers remotely
through an encrypted connection. Before SSH, tools such as rsh, rlogin,910 and Telnet911 provided
similar remote administration capabilities, but oveor an unencrypted connection.
In the background of each SSH connection, all shell commands, passwords, and data are
transported through an encrypted tunneln built using the SSH protocol. The SSH protocol is
primarily a tunneling protocol, so it’s possible to pass almost any kind of data through an SSH
connection. For that reason, tunneling capabilities are built into most SSH tools.
i
Another great benefit of SSH tunnzeling is how its use can easily blend into the background traffic
of network environments. SSH is used often by network administrators for legitimate remote
administration purposes, anDd flexible port forwarding setups in restrictive network situations. It’s
therefore common to find SSH client software already installed on Linux hosts, or even SSH
servers running there. It’s also increasingly common to find OpenSSH912 client software installed
on Windows hosts. In network environments that are not heavily monitored, SSH traffic will not
seem anomalous, and SSH traffic will look much like regular administrative traffic. Its contents
also cannot be easily monitored.
In most official documentation, tunneling data through an SSH connection is referred to as SSH
port forwarding.913 Different SSH software will provide slightly different port forwarding
capabilities. We will cover all common SSH port forwarding types offered by OpenSSH in this
Learning Unit.
907 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Tunneling_protocol
908 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Secure_Shell
909 (SSH, 2018), https://www.ssh.com/ssh/protocol/
910 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Berkeley_r-commands
911 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Telnet
912 (OpenSSH, 2022), https://www.openssh.com/
913 (SSH, 2022), https://www.ssh.com/academy/ssh/tunneling-example#what-is-ssh-port-forwarding,-aka-ssh-tunneling?
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 577
Made in Morocco
Penetration Testing with Kali Linux
SSH port forwarding can be a hugely powerful tool in any network situation, but it can also be a
very useful option for attackers working in restrictive network environments.
18.3.1 SSH Local Port Forwarding
Let’s recall the first port forwarding example from the Socat scenario. We set up Socat to listen
on TCP port 2345 on the WAN interface of CONFLUENCE01. Packets it received on that port were
forwarded to TCP port 5432 on PGDATABASE01. We used this to connect from our Kali machine,
through CONFLUENCE01, to the PostgreSQL service on PGDATABASE01. The crucial thing to
notice in this case is that listening and forwarding were both done from the same host
(CONFLUENCE01).
SSH local port forwarding914 adds a small twist to this. With SSH local port forwarding, packets
are not forwarded by the same host that listens for packets. Instead, an SSH connection is made
between two hosts (an SSH client and an SSH server), a listening poryt is opened by the SSH client,
and all packets received on this port are tunneled through the SSH connection to the SSH server.
The packets are then forwarded by the SSH server to the socket we specify.
k
This concept might seem a bit abstract at the moment. We can understand it better by getting
some experience setting up a local port forward. s
Let’s reconsider the previous scenario with a slight modification: Socat is no longer available on
o
CONFLUENCE01. We still have all the credentials we previously cracked from the Confluence
database, and there is still no firewall preventing us from connecting to the ports we bind on
CONFLUENCE01. n
With the database_admin credentials, we’ll log in to PGDATABASE01 and find that it’s attached to
another internal subnet. We find a hiost with a Server Message Block (SMB) server open (on TCP
port 445) in that subnet. We wantz to be able to connect to that server and download what we find
to our Kali machine.
D
In this type of scenario, we’ll plan to create an SSH local port forward as part of our SSH
connection from CONFLUENCE01 to PGDATABASE01. We will bind a listening port on the WAN
interface of CONFLUENCE01. All packets sent to that port will be forwarded through the SSH
tunnel. PGDATABASE01 will then forward these packets toward the SMB port on the new host we
found.
The following diagram illustrates our setup:
914 (OpenBSD manual, 2022), https://man.openbsd.org/ssh#L
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 578
Made in Morocco
Penetration Testing with Kali Linux
Figure 246: How we want our SSH local port forward to work in the lab, at a high level
y
In this diagram, we listen on TCP port 4455 on CONFLUENCE01. Packets sent to that port are
pushed by the SSH client software on CONFLUENCE01 through the SSH tunnel. At the other end
of the tunnel, the SSH server software on PGDATABASE01 forkwards them to TCP port 445 on the
newly-found host.
s
Let’s set up our lab environment up just like this. A VM group for following along is provided at the
bottom of this section.
o
As before, we can get a shell on CONFLUENCE01 using the cURL one-liner exploit for CVE-2022-
26134. We can no longer use Socat to create a port forward that allows us to SSH into
n
PGDATABASE01 from our Kali machine. However, in this case, we can SSH directly from
CONFLUENCE01 to PGDATABASE01.
i
We can’t create the SSH local port forward just yet, though. When setting up an SSH local port
z
forward, we need to know exactly which IP address and port we want the packets forwarded to.
So before we create the port forward SSH connection, let’s SSH into PGDATABASE01 to start
D
enumerating.
In our shell from CONFLUENCE01, we’ll make sure we have TTY915 functionality by using the
Python 3’s pty module. We can then SSH into PGDATABASE01 with the database_admin
credentials.
confluence@confluence01:/opt/atlassian/confluence/bin$ python3 -c 'import pty;
pty.spawn("/bin/bash")'
 mtu 65536 qdisc noqueue state UNKNOWN group default qlen
1000 n
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferried_lft forever
inet6 ::1/128 scope host z
valid_lft forever preferred_lft forever
2: ens192:  mtu 1500 qdisc fq_codel state UP group
D
default qlen 1000
link/ether 00:50:56:8a:6b:9b brd ff:ff:ff:ff:ff:ff
inet 10.4.50.215/24 brd 10.4.50.255 scope global ens192
valid_lft forever preferred_lft forever
inet6 fe80::250:56ff:fe8a:6b9b/64 scope link
valid_lft forever preferred_lft forever
3: ens224:  mtu 1500 qdisc fq_codel state UP group
default qlen 1000
link/ether 00:50:56:8a:0d:b6 brd ff:ff:ff:ff:ff:ff
inet 172.16.50.215/24 brd 172.16.50.255 scope global ens224
valid_lft forever preferred_lft forever
inet6 fe80::250:56ff:fe8a:db6/64 scope link
valid_lft forever preferred_lft forever
4: ens256:  mtu 1500 qdisc noop state DOWN group default qlen
1000
link/ether 00:50:56:8a:f0:8e brd ff:ff:ff:ff:ff:ff
Listing 534 - Enumerating network interfaces on PGDATABASE01.
We’ll then run ip route to discover what subnets are already in the routing table.
database_admin@pgdatabase01:~$ ip route
10.4.50.0/24 dev ens192 proto kernel scope link src 10.4.50.215
10.4.50.0/24 via 10.4.50.254 dev ens192 proto static
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 580
Made in Morocco
Penetration Testing with Kali Linux
172.16.50.0/24 dev ens224 proto kernel scope link src 172.16.50.215
172.16.50.0/24 via 172.16.50.254 dev ens224 proto static
Listing 535 - Enumerating network routes on PGDATABASE01.
We find that PGDATABASE01 is attached to another subnet, this time in the 172.16.50.0/24
range. We don’t find a port scanner installed on PGDATABASE01; however, we can still do some
initial reconnaissance with the tools that are available.
Let’s write a Bash for loop to sweep for hosts with an open port 445 on the /24 subnet. We can
use Netcat to make the connections, passing the -z flag to check for a listening port without
sending data, -v for verbosity, and -w set to 1 to ensure a lower time-out threshold.
database_admin@pgdatabase01:~$ for i in $(seq 1 254); do nc -zv -w 1 172.16.50.$i 445;
done
< (seq 1 254); do nc -zv -w 1 172.16.50.$i 445; done
nc: connect to 172.16.50.1 port 445 (tcp) timed out: Operatioyn now in progress
...
nc: connect to 172.16.50.216 port 445 (tcp) failed: Connection refused
k
Connection to 172.16.50.217 445 port [tcp/microsoft-ds] succeeded!
nc: connect to 172.16.50.218 port 445 (tcp) timed out: Operation now in progress
... s
database_admin@pgdatabase01:~$
Listing 536 - Using a bash loop with Netcat to sweep for port 445 in the newly-found subnet.
o
Most of the connections time out, suggesting that there’s nothing there. In contrast, we’ll notice
that PGDATABASE01 (at 172.16.50.215) actively refused the connection. We also find that there
n
is a host on the subnet, which has TCP port 445 open: 172.16.50.217!
We want to be able to enumerate the SMB service on this host. If we find anything, we want to
i
download it directly to our Kali machine for inspection. There are at least two ways we could do
z
this.
One way is to use whatevDer built-in tools we find on PGDATABASE01. However, if we did find
anything, we would have to download it to PGDATABASE01, then transfer it back to
CONFLUENCE01, then back to our Kali machine. This would create quite a tedious manual data
transfer process.
The alternative is to use SSH local port forwarding. We could create an SSH connection from
CONFLUENCE01 to PGDATABASE01. As part of that connection, we could create an SSH local
port forward. This would listen on port 4455 on the WAN interface of CONFLUENCE01,
forwarding packets through the SSH tunnel out of PGDATABASE01 and directly to the SMB share
we found. We could then connect to the listening port on CONFLUENCE01 directly from our Kali
machine.
In this scenario, there still is no firewall preventing us from accessing ports that
we bind on the WAN interface of CONFLUENCE01. In later sections, we will put
the firewall up, and use more advanced techniques to traverse this boundary.
For now, we should kill our existing SSH connection to PGDATABASE01. We will then set up a
new connection with new arguments to establish the SSH local port forward.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 581
Made in Morocco
Penetration Testing with Kali Linux
A local port forward can be set up using OpenSSH’s -L option, which takes two sockets (in the
format IPADDRESS:PORT) separated with a colon as an argument
(e.g. IPADDRESS:PORT:IPADDRESS:PORT). The first socket is the listening socket that will be
bound to the SSH client machine. The second socket is where we want to forward the packets to.
The rest of the SSH command is as usual - pointed at the SSH server and user we wish to
connect as.
In this case, we will instruct SSH to listen on all interfaces on port 4455 on CONFLUENCE01
(0.0.0.0:4455), then forward all packets (through the SSH tunnel to PGDATABASE01) to port 445
on the newly-found host (172.16.50.217:445).
We’re listening on port 4455 on CONFLUENCE01 because we’re running as the
confluence user: we don’t have the permissions to listen on any port below 1024.
y
k
Let’s create the SSH connection from CONFLUENCE01 to PGDATABASE01 using ssh, logging in
as database_admin. We’ll pass the local port forwarding argument we just put together to -L, and
use -N to prevent a shell from being opened. s
confluence@confluence01:/opt/atlassian/confluence/bin$ ssh -N -L
o
0.0.0.0:4455:172.16.50.217:445 PI:EMAIL
<0:4455:172.16.50.217:445 PI:EMAIL
Could not create directory '/home/confluence/.ssh'.
n
The authenticity of host '10.4.50.215 (10.4.50.215)' can't be established.
ECDSA key fingerprint is SHA256:K9x2nuKxQIb/YJtyN/YmDBVQ8Kyky7tEqieIyt1ytH4.
Are you sure you want to continuie connecting (yes/no/[fingerprint])? yes
yes
z
Failed to add the host to the list of known hosts (/home/confluence/.ssh/known_hosts).
PI:EMAIL's password:
LDisting 537 - Running the local port forward command.
Once we’ve entered the password, we don’t receive any output. When running SSH with the -N
flag, this is normal. The -N flag prevents SSH from executing any remote commands, meaning we
will only receive output related to our port forward.
If the SSH connection or the port forwarding fails for some reason, and the
output we get from the standard SSH session isn’t sufficient to troubleshoot it,
we can pass the -v flag to ssh in order to receive debug output.
Since this reverse shell from CONFLUENCE01 is now occupied with an open SSH session, we
need to catch another reverse shell from CONFLUENCE01. We can do this by listening on another
port and modifying our CVE-2022-26134 payload to return a shell to that port.
Once we have another reverse shell from CONFLUENCE01, we can confirm that the ssh process
we just started from our other shell is listening on 4455 using ss.
confluence@confluence01:/opt/atlassian/confluence/bin$ ss -ntplu
ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 582
Made in Morocco
Penetration Testing with Kali Linux
Process
udp UNCONN 0 0 127.0.0.53%lo:53 0.0.0.0:*
tcp LISTEN 0 128 0.0.0.0:4455 0.0.0.0:*
users:(("ssh",pid=59288,fd=4))
tcp LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:*
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
tcp LISTEN 0 128 [::]:22 [::]:*
tcp LISTEN 0 10 *:8090 *:*
users:(("java",pid=1020,fd=44))
tcp LISTEN 0 1024 *:8091 *:*
users:(("java",pid=1311,fd=15))
tcp LISTEN 0 1 [::ffff:127.0.0.1]:8000 *:*
users:(("java",pid=1020,fd=76))
Listing 538 - Port 4455 listening on all interfaces on CONFLUENCE01.
It is - great! Connecting to port 4455 on CONFLUENCE01 will now be just like connecting directly
y
to port 445 on 172.16.50.217. We can review the connection flow in the following diagram.
k