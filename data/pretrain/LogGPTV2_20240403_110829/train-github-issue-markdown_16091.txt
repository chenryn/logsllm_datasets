### Issue with Custom Hook and Dependency Array in `useEffect`

**Problem Description:**

I have a custom hook, `useAppState`, that returns a state value and a `setValue` function. The `setValue` function is designed to always return a memoized callback. Here's an example of how I use it:

```javascript
const [value, setValue] = useAppState(...);
```

When I use `setValue` inside a `useEffect` hook, which has a dependency array, I encounter an error. For instance:

```javascript
useEffect(() => {
    if (value !== 'a') {
        setValue('a');
    }
}, [value]);
```

Unlike the `useState` hook, this setup generates an error. The error message is as follows:
![Error Image](https://user-images.githubusercontent.com/5655858/158798838-82fb7ffe-9907-4db2-8276-3230a68610a8.png)

**Source of the Problem:**

I found the source code responsible for this check in the React repository:
[ExhaustiveDeps.js](https://github.com/facebook/react/blob/9198a5cec0936a21a5ba194a22fcbac03eba5d1d/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js)

**Suggestion:**

To address this issue, I suggest adding configuration options to the ESLint plugin for React hooks. This would allow users to specify their custom hooks to be treated in the same way as built-in hooks, such as `useState`.

This would help in avoiding false positives and ensure that the linter correctly handles custom hooks with memoized callbacks.

Thank you for considering this suggestion.