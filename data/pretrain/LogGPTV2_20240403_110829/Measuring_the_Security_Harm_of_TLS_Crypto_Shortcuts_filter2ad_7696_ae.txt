### Optimized Text

#### TLS Connection and Time-to-First Byte
A single TLS connection ensures that the time-to-first byte for the initial request is identical to that of standard HTTP over TLS. However, subsequent requests are significantly faster without expanding the Perfect Forward Secrecy (PFS) vulnerability window.

#### STEK Rotation
Frequently rotating Session Ticket Encryption Keys (STEKs) is the simplest way to reduce the vulnerability window when using session ticket resumption. While many domains already implement this practice, as shown in Figure 3, many do not. Companies like Twitter, CloudFlare, and Google have developed custom key rotation solutions [27, 33, 34]. To our knowledge, no popular server software, except the most recent release of Caddy [28], includes this feature.

#### Geographical Diversity in STEKs
Large sites should use different STEKs for different regions rather than sharing a single session ticket key globally. This practice not only limits exposure if a single server is compromised or physically attacked but also helps confine the effects of legally mandated STEK disclosure to connections within a specific jurisdiction.

#### Reducing Session Cache Lifetimes
For session ID resumption, quickly expiring cached session state is beneficial. The number of connections at risk of decryption grows proportionally with the lifetime of the server-side state. By measuring the duration of a typical user visit, operators can ensure that a user only needs to conduct one full handshake per visit while avoiding retaining session state longer than necessary.

#### Secure Handling of TLS Secrets
TLS implementations must ensure that TLS secrets are handled securely before, during, and after their use. For small sites, these details should be managed by the TLS implementation. In more complex deployments involving synchronization of caches or STEKs across multiple servers, operators need to be directly involved. Any mechanism designed to synchronize STEKs must ensure that these keys are transmitted securely and maintained only in memory (not persistent storage), so they can be reliably discarded.

### Related Work
The HTTPS ecosystem has been extensively studied. Previous work has tracked the configuration and deployment of HTTPS [18, 29], and community projects provide up-to-date, Internet-wide measurements of HTTPS servers and certificates [16, 17]. However, none of these studies have directly measured support for TLS session resumption or quantified the lifetimes of cached sessions, STEKs, or repeated Diffie-Hellman values. Our research builds on this prior work to understand and quantify the impact of these performance enhancements on forward secrecy and their effect on the overall attack surface of the HTTPS ecosystem.

Previous research has shown that some TLS implementations generate a single DHE value and reuse it for a period of time. In May 2015, Adrian et al. [1] found that 17% of randomly sampled IPv4 hosts with browser-trusted certificates reused a DHE value at least once over 20 connections. They noted that server-side DHE reuse was the default behavior in OpenSSL and Microsoft SChannel. In January 2016, OpenSSL removed support for DHE reuse following CVE-2016-0701 [44]. Our work expands on these measurements by providing updated metrics following the OpenSSL change, characterizing the lengths over which Diffie-Hellman values are repeated, and measuring reuse for ECDHE (now the most popular key exchange).

We are not the first to recognize the impact of TLS session resumption techniques on forward security. Representatives from Mozilla, Google, Twitter, and CloudFlare have written about various aspects of this issue [27, 33, 34, 54]. Our work aims to provide an empirical foundation for future discussions, system designs, and operator configuration choices by offering detailed global measurements on the use and impacts of session resumption and related TLS cryptographic shortcuts. To our knowledge, we are also the first to examine the effect of widespread inter-domain sharing of session secrets.

### Conclusion
We conducted a 9-week study of HTTPS within the Alexa Top Million, focusing on understanding the prevalence and characteristics of TLS performance enhancements such as (EC)DHE value reuse, session ID resumption, and session ticket resumption. Through this study, we characterized the effects of cryptographic shortcuts on the promises associated with the use of forward-secret ciphers. Our findings show that the TLS ecosystem achieves much weaker protection from forward secrecy than statistics about support for forward-secret handshakes suggest. They also highlight the need for the security community to clearly communicate the relevant trade-offs between security and performance to server operators.

### Acknowledgments
The authors thank Adam Langley, Vern Paxson, Nick Sullivan, and our shepherd, Christo Wilson, for insightful discussions and feedback. We also thank the exceptional sysadmins at the University of Michigan for their ongoing help and support. This material is based upon work supported by the U.S. National Science Foundation under grants CNS-1345254, CNS-1409505, CNS-1518888, and CNS-1530915, by the NSF Graduate Research Fellowship Program under grant DGE-1256260, by the Post-9/11 GI Bill, by the Google Ph.D. Fellowship in Computer Security, and by an Alfred P. Sloan Foundation Research Fellowship.

### References
[References listed here, formatted consistently and checked for accuracy and completeness.]

This optimized text is more structured, coherent, and professional, making it easier to read and understand.