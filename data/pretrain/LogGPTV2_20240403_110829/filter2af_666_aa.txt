_自动化躺赚系列 02_ 以后可能还有，哈哈哈。
自动化躺赚系列 01 业务漏洞挖掘笔记 
## 1.自动黑盒漏洞检测思路
黑盒测试，也就是盲测http请求，进行漏洞挖掘，如检测挖掘XSS\SQL\SSRF\命令执行\代码执行 甚至于越权之类漏洞，此类漏洞都属于，代码/命令
拼接时不严谨出现的问题。
    如挖sql注入，'"   如xss '">, 如ssrf，替换请求参数值为url链接的请求，命令执行 代码执行依次...
在黑盒挖掘它们时的操作规律为在参数值后面 “追加/替换/值前追加"
payload等操作，既然发现此规律，我们就可以依此规律分析后，进行编程，做出一个减少重复操作和降低人工操作成本小工具。
## 2.功能分析
所需知识技能，Python PHP HTML JavaScript语言 Http协议之类，和一些常见漏洞的理解XSS\SQL\SSRF\RCE之类。
如上所说，在黑盒挖掘漏洞时的操作规律为在参数值后面 “追加/替换/值前追加" payload等操作，如:
原URL 
[http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=111payload](http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=111payload)
为追加
[http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=payload](http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=payload)
为替换
[http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=payload111](http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=payload111)
值前追加
这三类操作就能覆盖大部分黑盒测试场景。
在HTTP请求时，大概有8种请求方式
1、OPTIONS
返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性
2、HEAD
向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。
3、GET
向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web
Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。Loadrunner中对应get请求函数：web_link和web_url
4、POST
向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。
5、PUT
向指定资源位置上传其最新内容
6、DELETE
请求服务器删除Request-URL所标识的资源
7、TRACE
回显服务器收到的请求，主要用于测试或诊断
8、CONNECT
HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。
最为常见的是GET/POST两种，为了节省代码量和篇幅，我也就介绍这两种方式的黑盒自动化测试。
## 3.代码实现
process_http_request.py
    # coding: utf-8
    """
    @Time :    6/18/2021 17:02
    @Author:  guimaizi
    @File: process_http_request.py
    @Software: PyCharm
    """
    import json,copy
    from urllib.parse import urlparse
    from urllib import parse
    class process_http_request:
        def __init__(self):
            self.list_data=[]
        def type_param(self,param_data):
            '''
            返回数据类型  INT Json List Url String
            :param param_data:
            :return:
            '''
            try:
                int(param_data)
                return 'Int'
            except:pass
            try:
                if type(param_data) == type({'a': 1}):return 'Json'
            except:pass
            try:
                if type(json.loads(param_data)) == type({'a': 1}):return 'Json'
            except:pass
            try:
                if type(param_data) == type([]):return 'List'
            except:pass
            if parse.unquote(param_data).startswith('http://') or parse.unquote(param_data).startswith('https://'):return 'Url'
            return 'String'
        def process_payload(self,json_data, num, payload):
            '''
            Payload处理 0追加 1替换 2值前添加
            :param json_data:
            :param num:
            :param payload:
            :return:
            '''
            #print(num)
            if num == 0:
                json_data = str(json_data) + payload
            elif num == 1:
                json_data = payload
            elif num == 2:
                json_data = payload + str(json_data)
            return json_data
        def process_json(self,http_request_body, param_name=''):
            '''
            遍历json键名
            :param http_request_body:
            :param param_name:
            :return:
            '''
            for name in http_request_body:
                #print(name)
                if param_name != '':
                    self.list_data.append((param_name + '.' + name,self.type_param(http_request_body[name]),http_request_body[name]))
                else:
                    self.list_data.append((name,self.type_param(http_request_body[name]),http_request_body[name]))
                if isinstance(http_request_body[name], dict):
                    if param_name != '':
                        self.process_json(http_request_body[name], param_name + '.' + name)
                    else:
                        self.process_json(http_request_body[name], name)
        def callback_set_json(self,http_request,data):
            http_request["param_name"] = data["param_name"]
            http_request["param_value"] = data["param_value"]
            http_request["param_type"] = data["param_type"]
            return http_request
        def callback_json_http_request(self,http_request_body, param_name_list, payload='', payload_num=0):
            '''
            Json格式http body返回
            :param http_request_body:
            :param param_name_list:json键名
            :param payload:
            :param num:
            :return:
            '''
            param_name_list = param_name_list.split('.')
            num_param = len(param_name_list)
            num=0
            task_name = 'http_request_body[param_name_list[%s]]' % num
            for i in range(num_param):
                if num ==num_param-1:
                    param_type = self.type_param(eval(task_name))
                    param_value=eval(task_name)
                    item=eval('task_name')+" = self.process_payload("+eval('task_name')+", payload_num, payload)"
                    exec(item)
                num = num + 1
                task_name =task_name+'[param_name_list[%s]]'%num
            return {"param_name": '.'.join(param_name_list), "param_value": param_value, "param_type": param_type,
                    "data": http_request_body}
        def callback_param_http_request(self, http_request_body, param, payload='', payload_num=0):
            '''
            a=str&b=str&c=1 返回
            :param http_request_body:
            :param param: 参数名
            :param payload:
            :param num:
            :return:
            '''
            try:
                list_data=[]
                task_list=list(set(http_request_body.split('&')))
                if '' in task_list:
                    task_list.remove('')
                #print(task_list)
                for tmp in task_list:
                    #print(tmp.split('=')[0])
                    #print(param)
                    tmp=copy.deepcopy(tmp)
                    if '=' in tmp and str(tmp.split('=')[0])==param:
                        param_name=tmp.split('=')[0]
                        param_value=tmp.split('=')[1]
                        param_type=self.type_param(tmp.split('=')[1])
                        list_data.append(tmp.split('=')[0]+'='+self.process_payload(tmp.split('=')[1],payload_num,payload))
                    else:
                        #print(tmp.split('='))
                        if len(tmp.split('='))==2:
                            list_data.append(tmp.split('=')[0] + '=' + tmp.split('=')[1])
                        else:
                            param_value='Null'
                            param_type='Null'
                            list_data.append(tmp.split('=')[0] + '=' + param_value)
                #print(list_data)
                return {"param_name":param_name, "param_value": param_value, "param_type": param_type,"param_data":'&'.join(list_data)}
            except:return {}
        def process_param(self, http_request_body, param_name=''):
            '''
            遍历参数名 a=str&b=str&c=1  这类参数处理
            :param http_request:
            :param param_name:
            :return:
            '''
            try:
                callback_param = []
                for tmp in http_request_body.split('&'):
                    if len(tmp.split('='))==2:
                        callback_param.append((tmp.split('=')[0],self.type_param(tmp.split('=')[1]),tmp.split('=')[1]))
                    else:callback_param.append((tmp.split('=')[0],'Null','Null'))
                return callback_param
            except Exception as e:
                print(e)
                return []
        def callback_param_list(self,http_request):
            '''
            :param http_request:
            :return: (参数名 , 参数值类型)