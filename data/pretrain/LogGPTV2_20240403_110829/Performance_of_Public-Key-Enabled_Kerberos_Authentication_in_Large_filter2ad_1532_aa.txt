# Title: Performance of Public-Key-Enabled Kerberos Authentication in Large Networks
# Authors: Alan H. Harbitter and Daniel A. Menascé

## Abstract
Several proposals have been made to incorporate public-key cryptography into various stages of the secret-key-based Kerberos network authentication protocol. The computational requirements of public key cryptography are significantly higher than those of secret key cryptography, and substituting public key algorithms for secret key algorithms can impact performance. This paper uses closed, class-switching queuing models to demonstrate the quantitative performance differences between PKCROSS and PKTAPP—two proposals for public-key-enabling Kerberos. Our analysis shows that while PKTAPP is more efficient for authenticating to a single server, PKCROSS outperforms the simpler protocol if there are two or more remote servers per remote realm. This heuristic can guide the design of a high-level protocol that combines both methods to improve overall performance.

## 1. Introduction
Kerberos has become a mature, reliable, and secure network authentication protocol based on secret key encryption technology. It is the native network authentication protocol in Microsoft Windows 2000 and may be a candidate for use as a general-purpose authentication protocol for large user communities on the Internet. Several proposals have been developed to add public key cryptography to various stages of Kerberos to make the protocol work with large user communities and Public Key Infrastructures (PKIs). However, the computational requirements of public key cryptography are higher than those of secret key cryptography, which impacts performance.

This paper examines the performance impacts of substituting public key cryptography in client-to-server and KDC-to-KDC authentication in Kerberos, specifically focusing on the PKCROSS and PKTAPP proposals. The context for this analysis is a large network with many application hosts participating in the authentication process. Section 2 provides background information about Kerberos and proposals to public-key-enable Kerberos. Section 3 describes the performance modeling techniques used to analyze PKCROSS and PKTAPP, and Section 4 analyzes the performance implications. Sections 5 and 6 describe related work, present the conclusions of this analysis, and suggest areas for future research.

## 2. Kerberos and Public Key Variants

### 2.1 The Basic Operation of Kerberos
Kerberos is a network authentication scheme based on the early work of Needham and Schroeder [1]. Two popular Kerberos standards exist: Version 4 and Version 5 [2]. This paper considers the more current Version 5 and its variations. Kerberos divides the world into realms, each with a single primary Key Distribution Center (KDC), backup KDCs, application servers, and user workstations. A single realm corresponds to a community of interest with a single security policy.

Many detailed descriptions of the Kerberos protocol operation exist [3, 4] and will not be repeated here. Briefly, the client (Alice) engages in a multi-step authentication to obtain access to the application server (Bob). Alice must first obtain a ticket-granting ticket (TGT) from the KDC. She uses the TGT to obtain a service ticket to Bob. She then presents the service ticket to Bob and authenticates herself by demonstrating knowledge of a secret session key securely passed to her by the KDC.

In a large enterprise, Alice may need to access an application server in a remote realm. To support "cross-realm" authentication, Alice's KDC and the remote KDC must have either a direct or indirect trust relationship (Kerberos Version 4 requires a direct trust relationship). This trust relationship is implemented by sharing symmetric keys among the KDCs. If such a trust relationship exists, Alice can gain access to a remote server by first requesting a ticket to the remote realm’s KDC from her local KDC. She will receive a ticket (a data structure encrypted with the KDC pair’s shared symmetric key) to the remote TGS. When she presents the ticket to the remote KDC, she will receive a service ticket for an application server in the remote realm.

### 2.2 Motivation to Add Public Key Cryptography to Kerberos
Kerberos offers at least two significant benefits as a network authentication protocol. First, the message formats are defined such that the session keys are always included in some encrypted portion of the message. As a result, Kerberos servers do not need to store session keys or maintain a security association with each client. Kerberos is stateless; state is represented through the Kerberos tickets. Statelessness is extremely valuable from the standpoint of scalability.

The second benefit is that the client user (Alice) is only required to provide her password once. Although many Kerberos request messages contain authenticators, the encryption is performed by Alice’s workstation. As a result, Kerberos implements a "single sign-on" mechanism.

A potential limitation in Kerberos scalability is its reliance on symmetric key encryption [5]. Shared secrets must be established and maintained between every user and the KDC, between every application server and the KDC, and between remote KDCs. The use of public key cryptography shifts key management from the KDC to a Certification Authority (CA) [6]. Public key cryptography eliminates the need to establish a large number of shared secrets (i.e., symmetric keys) between KDCs, servers, and users.

Although the scaling merits of public-key versus secret-key-based systems have not been definitively proven, several current proposals suggest adding public key cryptography to Kerberos and hence changing the key management model.

### 2.3 Proposals to Add Public Key Encryption to Kerberos
Internet drafts exist for three alternatives: (1) Public Key Cryptography for Initial Authentication in Kerberos (PKINIT) [7], (2) Public Key Cryptography for Cross-Realm Authentication in Kerberos (PKCROSS) [8], and (3) Public Key Utilizing Tickets for Application Servers (PKTAPP) [9]. PKINIT is the core specification. Both PKCROSS and PKTAPP use variations of PKINIT message types and data structures to apply public key cryptography to different Kerberos authentication steps.

**PKINIT.** The PKINIT Internet draft specifies that considerable message content must be added to the initial Kerberos Version 5 exchanges to replace the user secret key authentication with public key authentication. Figure 1 illustrates the flow of the PKINIT protocol. The client must send a public key certificate and a chain of certificates ("userCert" in the PKINIT specification) to establish trust between the user and the KDC and relay the user’s public key. The client must also send an authenticating data structure ("SignedAuthPack") signed with the client’s private key. This information is included in the Kerberos pre-authentication fields, defined in the specification to support extensions to the protocol.

The KDC verifies the client’s identity by verifying the digital signature in the SignedAuthPack. The KDC replies to the client with a chain of certificates for the KDC’s public key ("kdccert"), the KDC’s digital signature ("SignedReplyKeyPack"), and the session key ("encTmpKeyPack") encrypted with the client’s public key. The client can confirm KDC identity by verifying its digital signature.

Mandatory variations allow the substitution of a certificate serial number for the certificate chain (assuming that the KDC already has a trusted copy of the user’s certificate) and the use of Diffie-Hellman to establish a session key. PKINIT drafts have included several interesting options, such as storing the user’s private key on the KDC and allowing the user to generate the session key. Allowing the user to generate the session key would reduce load on the KDC and potentially change scaling characteristics.

**PKCROSS.** While PKINIT addresses the issue of managing secret keys for a large number of clients, it does not address the issue of key management among a large number of realms. A logical extension of PKINIT is the use of public key encryption for multiple-realm, KDC-to-KDC authentications. This is the subject of the PKCROSS Internet draft specification.

Figure 2 illustrates a possible flow for PKCROSS authentication. PKCROSS picks up the multiple realm authentication at the point at which the client has already obtained a TGT. The client may or may not have authenticated to its local KDC using PKINIT (Figure 2 shows a secret-key-based TGT request). Assume that the client has requested access to a server in a remote realm. Its local KDC initiates a PKCROSS transaction with the appropriate remote KDC. With a few minor variations, the KDC-to-KDC authentication is performed using the PKINIT protocol.

One variation is that the remote KDC is responsible for generating a "special symmetric key" it uses for PKCROSS requests [8]. The local KDC can skip the explicit exchange with the remote KDC if it currently has an active, valid TGT sealed with a special symmetric key. Once the client possesses a remote TGT, it may request additional service tickets in the remote realm without involving the local KDC.

**PKTAPP.** In Kerberos, the KDC issues all TGS, remote KDC, and server tickets in its realm. Since most authentication transactions have to transit the KDC, it can become a performance bottleneck. Although secondary KDCs can be included in the system, they are typically used as backups in the event of a primary KDC failure. The PKTAPP Internet draft seeks to eliminate this potential bottleneck and reduce communications traffic by implementing the authentication exchange directly between the client and the application server.

This variation was originally introduced as the Public-key-based Kerberos for Distributed Authentication (PKDA) [10]. PKTAPP proposes to implement PKDA using the PKINIT-specified message definitions and exchanges.

PKTAPP is a more efficient protocol than traditional Kerberos from a message exchange perspective. The client may deal directly with the application server. Figure 3 illustrates the PKTAPP authentication message exchange. The AS-REQ message, the first message submitted by the client, contains the client’s certificate chain and the identity of the service ticket requested. The server response, an AS-REP message, contains the server’s certificate chain and the session key encrypted with the server’s private key. After authentication, the client requests an application service ticket using a Kerberos Version 5 request. The entire authentication process is reduced to a total of two message pairs.

In the above public key extensions, there is no explicit requirement for pre-knowledge of identity between the client and the KDC or between the two KDCs. There is no need to pre-establish shared secrets or store a user record in a Kerberos database. The only basis for trust between these entities is the certificate chain.

These protocols substitute public key infrastructure as the management mechanism in lieu of sharing secret keys. Because of the additional processing requirements, a performance price is paid each time a public key calculation is substituted for a symmetric key calculation. Additionally, because the public key messages are larger than the corresponding Kerberos Version 5 messages and more likely to fragment, the PKINIT draft recommends the use of TCP as the underlying transport protocol. UDP, which has a significantly lower overhead, is the protocol commonly used for secret-key-based Kerberos implementations.

### 2.4 Using Closed Queuing Networks to Analyze Protocol Performance
The KDCs, application servers, communication networks, and client workstations are finite resources that process workload while Kerberos authentication transactions are executing. One way to quantitatively analyze the performance of alternative public-key-enabled Kerberos variants is through the use of closed queuing networks [11], which represent each system resource with a queuing discipline and a stochastic service distribution.

[Figures 1, 2, and 3 should be included here to illustrate the transaction flows for PKINIT, PKCROSS, and PKTAPP, respectively.]

## 3. Performance Modeling Techniques
[This section should describe the specific performance modeling techniques used to analyze PKCROSS and PKTAPP, including the assumptions, parameters, and methodologies.]

## 4. Performance Implications
[This section should analyze the performance implications of PKCROSS and PKTAPP, presenting the results of the closed queuing network models and discussing the trade-offs and benefits of each approach.]

## 5. Related Work
[This section should discuss related work in the field, comparing and contrasting the findings with other studies and proposals.]

## 6. Conclusions and Future Research
[This section should summarize the key findings, present the conclusions of the analysis, and suggest areas for future research, including potential improvements and further investigations into the performance and scalability of public-key-enabled Kerberos.]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.