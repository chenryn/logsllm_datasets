In this section, we will prove security of all our main constructions,
that is, Protocols 2, 3, and 4. We do not provide a full proof for
Protocol 6, but as we discuss in Section 6, this proof can be obtained
directly by taking the one given by Boyle et al. [9] and replacing
their MPFSS construction by ours. As described in Section 2.6, we
split our proofs in three phases, i.e., we (i) define correctness and
security requirements, (ii) define ideal functionalities that satisfy
these requirements, and (iii) prove our key generation protocols
securely implement the ideal functionalities.
We note that our definitions are also closely related to the Pseu-
dorandom Correlation Generators (PCGs) of Boyle et al. [11]. How-
ever, as our key generators take additional arguments beyond the
security parameter, we cannot use their definition out-of-the-box.
Still, our (𝑛 − 1)-out-of-𝑛-ROT is defined in a similar way as PCGs.
For our FSS variants, we stick to pure simulation-based proofs us-
ing Definition 2.2, which ensures they cen be used as a drop-in
replacement for the constructions of Boyle et al. [9].
(𝑛 − 1)-out-of-𝑛-ROT
A.1
Definition A.1 (Pseudorandom (𝑛 − 1)-out-of-𝑛-OT Generator). A
pseudorandom (𝑛−1)-out-of-𝑛-OT generator for a group G consists
of the following two algorithms:
• (𝐾1, 𝐾2) ← ROT.Gen(1𝜆, 𝑛, 𝑖) - Outputs two keys when
given an output size 𝑛 and a single index 𝑖 ∈ [𝑛].
• v𝑏 ← ROT.Expand(𝑏, 𝐾𝑏) - Given an evaluation key 𝐾𝑏 for
𝑏 ∈ {1, 2}, outputs a vector of length 𝑛.
Here, 𝜆 ∈ N denotes a security parameter. Additionally, the follow-
ing properties must hold:
Correctness. For any 𝑛 ∈ N and 𝑖 ∈ [𝑛], any pair (𝐾1, 𝐾2) in the
image of ROT.Gen(1𝜆, 𝑛, 𝑖), and v𝑏 ← ROT.Expand(𝑏, 𝐾𝑏)
for 𝑏 ∈ {1, 2}, we have that v1 is computationally indistin-
guishable from a uniformly random vector from G𝑛, and
𝑣1
𝑗 = 𝑣2
𝑗 for all 𝑗 ∈ [𝑛] \ {𝑖}.
15
Functionality 7: 𝑛 − 1-out-of-𝑛-ROT
Public Parameter: 𝑘
Key Generation (ROT.Gen(1𝜆, 𝑛, 𝑖)):
(1) Run steps (1) and (2) from Protocol 2 as P1 to obtain a
𝑘-ary GGM tree 𝑇 with root 𝑠0 and depth 𝛼 = log𝑘(𝑛),
using seeds of size 𝜆.
(2) For each level 𝑙 ∈ [𝛼], let (𝑝1, . . . , 𝑝𝑘𝑙) be the seeds of
the 𝑙th level of 𝑇 , and for each 𝑗 ∈ [𝑘] \ {𝑏𝑙}, compute
𝑞𝑙,𝑗 ← 
𝑠∈{𝑝𝑥 : 𝑥 ≡ 𝑗 mod 𝑘}
(3) Let (𝑏1, . . . , 𝑏𝛼) be a 𝑘-ary encoding of 𝑖 − 1. Return
Expansion (ROT.Expand(𝑏, 𝐾𝑏)):
Let 𝛼 = log𝑘(𝑛).
𝐾1 ← 𝑠0 and 𝐾2 ←(cid:0)𝑖, (𝑞𝑙,𝑗)𝑙∈[𝛼],𝑗 ∈[𝑘]\{𝑏𝑙 }(cid:1).
• If 𝑏 = 2, parse 𝐾𝑏 as(cid:0)𝑖, (𝑞𝑙,𝑗)𝑙∈[𝛼],𝑗∈[𝑘]\{𝑏𝑙 }(cid:1), where
the 𝑛 leaves of 𝑇 .
(𝑏1, . . . , 𝑏𝛼) is a 𝑘-ary encoding of 𝑖 − 1. Then run steps
(5) and (7) of Protocol 2 as P2.
• If 𝑏 = 1, compute the GGM tree 𝑇 = 𝑇 (𝐾𝑏, 𝛼) and output
𝑠.
Security. There are ppt simulators Sim𝑏 for 𝑏 ∈ {1, 2} such that
for any 𝑛 ∈ N and 𝑖 ∈ [𝑛],
(cid:26)
𝐾1
and(cid:40)
𝐾2, 𝑣1
𝑖
(cid:27) 𝑐≈
(cid:12)(cid:12)(cid:12)(cid:12) (𝐾1, 𝐾2) 𝑅← ROT.Gen(1𝜆, 𝑛, 𝑖),
(cid:12)(cid:12)(cid:12)(cid:12) 𝐾1
(cid:26)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(𝐾1, 𝐾2) 𝑅← ROT.Gen(1𝜆, 𝑛, 𝑖),
v1 ← ROT.Expand(1, 𝐾1)
𝐾1
(cid:26)
(cid:12)(cid:12)(cid:12)(cid:12) 𝐾2
𝐾2, 𝑣1
𝑖
𝑅← Sim2(1𝜆, 𝑛, 𝑖), 𝑣1
𝑖
𝑅← G
𝑅← Sim1(1𝜆, 𝑛)
(cid:41)
𝑐≈
(cid:27)
(cid:27)
,
(2)
.
(3)
Informally, the above security definition ensures that P1 does not
learn anything about 𝑖, while P2 does not learn anything about 𝑣1
𝑖 ,
i.e., the random value it chooses not to receive, beyond the fact that
it is random.
Theorem A.2. Functionality 7 is a pseudorandom generator for
(𝑛 − 1)-out-of-𝑛-OT.
uniformly at random, v1 ← ROT.Expand(1, 𝐾1) =(cid:0)𝐹𝑠0( 𝑗)(cid:1)
Proof. Correctness. First, observe that a GGM tree 𝑇 with 𝑛
leaves and initial seed 𝑠0 implements a PRF 𝐹𝑠0 : [𝑛] → {0, 1}𝜆 with
key 𝑠0, where 𝐹𝑠0( 𝑗) is the 𝑗-th leaf of 𝑇 [32, 37]. Since 𝑠0 is chosen
𝑗 ∈[𝑛] is
indistinguishable from a vector drawn uniformly at random from
G𝑛. Second, observe that in ROT.Expand(2, 𝐾2) in Functionality 7,
all seeds of sub-trees of 𝑇 that do not lie on the path to the 𝑖-th leaf
are recovered. Since the expansion of 𝐺 is deterministic, all leaves
of these sub-trees are equal to the corresponding leaves in 𝑇 , and
therefore 𝑣1
Security. We construct simulators Sim𝑏 for 𝑏 ∈ {1, 2} as follows.
𝑗 for all 𝑗 ∈ [𝑛] \ {𝑖}.
𝑗 = 𝑣2
𝑙,𝑗
0 ∈ {0, 1}𝜆 and output 𝑠′
𝑏 = 1. Sample a random seed 𝑠′
2 ←(cid:0)𝑖, (𝑞′
𝑙,𝑗)𝑙∈[𝛼],𝑗∈[𝑘]\{𝑏𝑙 }(cid:1).
0. Indistin-
guishability of the two sides in Eq. (2) follows immediately
as 𝐾1 on the left hand side is also sampled uniformly from
{0, 1}𝜆.
𝑏 = 2. Let 𝛼 = log𝑘(𝑛), and let (𝑏1, . . . , 𝑏𝛼) be a 𝑘-ary encoding of
𝑖−1. Construct a partial GGM tree by following the path from
the root to the 𝑖-th leaf, sampling uniformly random seeds for
all siblings of nodes on that path, and expanding them using
the GGM construction. Now, for each level 𝑙 ∈ [𝛼] and each
𝑗 ∈ [𝑘] \ {𝑏𝑙}, compute 𝑞′
as in Step (2) of Functionality 7,
and output 𝐾′
We will now show the indistinguishability of the two sides
of Eq. (3) using a hybrid argument. We construct 𝛼 +1 hybrid
distributions by successively modifying ROT.Gen as follows.
Let H0 be the left-hand side of Eq. (3), and let (𝑝1, . . . , 𝑝𝛼)
denote the nodes on the path from the root to the 𝑖-th leaf of
the GGM tree generated in ROT.Gen. Now, for each 𝑙 ∈ [𝛼],
construct H𝑙 from H𝑙−1 by replacing the result of the PRG
expansion of 𝑝𝑙 by 𝑘 uniformly random strings from {0, 1}𝜆,
and proceeding normally from then on to compute 𝐾′
2. Note
that neither 𝐻𝑙−1 nor 𝐻𝑙 contain 𝑝𝑙, but both contain at least
one of the children. Thus, any distinguisher between H𝑙−1
and H𝑙 could be used to distinguish the output of a PRG
from random. Now, by construction of Sim2 above, H 𝛼 is
precisely the right-hand side of Eq. 3 which concludes the
security proof.
□
What remains to be shown is that the key generation of Proto-
col 2 securely implements Functionality 7. We reduce this to the
security of the (𝑘 − 1)-out-of-𝑘-OT sub-protocol used in Protocol 2.
Theorem A.3. Steps (1) – (4) of Protocol 2 implement Functional-
ity 7 in the (𝑘 − 1)-out-of-𝑘-OT-hybrid model with security against
semi-honest adversaries.
Proof. For each 𝑏 ∈ {1, 2}, we construct a simulator Sim𝑏 for
the view of P𝑏 in the (𝑘 − 1)-out-of-𝑘-OT-hybrid model.
𝑏 = 1. Since P1 does not receive any messages in Protocol 2, Sim1
is the identity function. Since the computation performed
is the same in Protocol 2 and Functionality 7, the simulated
and real views are identically distributed.
𝑏 = 2. Here, in addition to the outputs of the ideal functionality, P2
receives the outputs of the OTs in Step (4). However, note
that these are directly passed through to P2’s output and are
therefore trivially simulatable. Since the values computed
in Step (2) of Functionality 7 are precisely the ones selected
by the OT functionality, the two views are again identically
distributed.
□
We can now compose Protocol 2 with any (𝑘 − 1)-out-of-𝑘-OT
protocol using a standard modular composition theorem, as for
example given by Canetti [14], thus obtaining a secure protocol in
the plain model.
16
(cid:0)𝐾ROT1
Functionality 8: Known-Index SPFSS
Key Generation (SPFSS.Gen(1𝜆, 𝑓𝑖,𝛽)):
Let [𝑛] denote the domain of 𝑓𝑖,𝛽.
(1) Generate keys for a (𝑛 − 1)-out-of-𝑛-ROT scheme
(2) Compute v1 = ROT.Expand(1, 𝐾1) and ˜𝑟 = 𝛽 − 𝑣1
𝑖 .
(3) Output 𝐾1 = 𝐾ROT1
Expansion (SPFSS.Eval(𝑏, 𝐾𝑏, 𝑥)):
Let G denote the image of 𝑓𝑖,𝛽.
(cid:1) ← ROT.Gen(1𝜆, 𝑛, 𝑖).
and 𝐾2 =(cid:0)𝐾ROT2
, ˜𝑟(cid:1).
, 𝐾ROT2
• If 𝑏 = 1, compute v1 ← ROT.Expand(1, 𝐾1) and output
𝑣1
𝑥.
contains
• If 𝑏 = 2, parse 𝐾2 as(cid:0)𝐾ROT2
compute v2 ← ROT.Expand(cid:0)2, 𝐾ROT2
, ˜𝑟(cid:1). Note that 𝐾ROT2
(cid:1) and output −𝑣2
the non-zero index 𝑖. If 𝑥 = 𝑖, output ˜𝑟. Otherwise,
𝑥.
A.2 Known-Index SPFSS
Here, we define out Known-Index SPFSS as an instance of Defini-
tion 2.2 from the preliminaries section.
Definition A.4 (Known-Index SPFSS). Let F = {𝑓𝑖,𝛽 : [𝑛] → G}
denote a class of point functions, where for all 𝑥 ∈ [𝑛],
(cid:26) 𝛽
0
𝑓𝑖,𝛽 =
if 𝑥 = 𝑖,
otherwise.
A Known-Index Single-Point Function Secret Sharing (Known-Index
SPFSS) scheme is a FSS scheme for F , where Leak1(𝑓𝑖,𝛽) = (𝐼, G)
and Leak2(𝑓𝑖,𝛽) = (𝐼, G, 𝑖), i.e., we allow the recipient of 𝐾2 to
additionally learn the non-zero index 𝑖 (but not the value 𝛽).
In Functionality 8, we define key generation and evaluation pro-
cedures for our known-index FSS scheme. We will now prove that
this functionality indeed satisfies Definition A.4, and that Protocol 3
implements the key generation phase securely.
Theorem A.5. Functionality 8 is a Known-Index Single-Point
Function Secret Sharing scheme.
Proof. Correctness. For any 𝑗 ∈ [𝑛] \ {𝑖}, the correctness of the
𝑗 , and hence SPFSS.Eval(1, 𝐾1, 𝑗)+
ROT scheme guarantees that 𝑣1
𝑗 = 𝑣2
SPFSS.Eval(2, 𝐾2, 𝑗) = 𝑣1
𝑗 − 𝑣2
𝑗 = 0. On the other hand, for 𝑗 = 𝑖,
we have SPFSS.Eval(1, 𝐾1, 𝑗) + SPFSS.Eval(2, 𝐾2, 𝑗) = 𝑣1
𝑖 + ˜𝑟 =
𝑖 + 𝛽 − 𝑣1
𝑣1
Security. We construct the following simulators Sim𝑏 for 𝑏 ∈
{1, 2}, assuming simulators SimROT
for the random OT scheme
used.
𝑏 = 1. Output SimROT1
(1𝜆, 𝑛). Indistinguishability follows from Eq. (2)
𝑖 = 𝛽.
𝑏
𝑅← G and output(cid:0)SimROT2