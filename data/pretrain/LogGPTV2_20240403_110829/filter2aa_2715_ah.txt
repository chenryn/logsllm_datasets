Ctrl+W 
File → Close 
Project 
Save Project1 
Ctrl+S 
File → Save Project 
Import File1 
I 
File → Import File 
Export Program 
O 
File → Export 
Program 
Open File System1 
Ctrl+I 
File → Open File 
System 
NAVIGATION 
Go To 
G 
Navigation → Go To 
Back 
Alt+← 
Forward 
Alt+→ 
Toggle Direction 
Ctrl+Alt+T 
Navigation → Toggle 
Code Unit Search 
Direction 
Next Instruction 
Ctrl+Alt+I 
Navigation → Next 
Instruction 
Next Data 
Ctrl+Alt+D 
Navigation → Next 
Data 
Next Undefined 
Ctrl+Alt+U 
Navigation → Next 
Undefined 
Next Label 
Ctrl+Alt+L 
Navigation → Next 
Label 
78 
Next Function 
Ctrl+Alt+F 
Navigation → Next 
Function 
Previous Function 
Ctrl+↑ 
Navigation → Go To 
Previous Function 
Next Non-function 
Instruction 
Ctrl+Alt+N 
Navigation → Next 
Instruction Not In 
a Function 
Next Different Byte 
Value 
Ctrl+Alt+V 
Navigation → Next 
Different Byte 
Value 
Next Bookmark 
Ctrl+Alt+B 
Navigation → Next 
Bookmark 
MARKUP 
Undo 
Ctrl+Z 
Edit → Undo 
Redo 
Ctrl+Shift+Z 
Edit → Redo 
Save Program 
Ctrl+S 
File → Save program 
name 
Disassemble 
D 
❖ → Disassemble 
Clear Code/Data 
C 
❖ → Clear Code 
Bytes 
Add Label Address 
field 
L 
❖ → Add Label 
Edit Label Label 
field 
L 
❖ → Edit Label 
Rename Function 
Function name field 
L 
❖ → Function → 
Rename Function 
Remove Label Label 
field 
Del 
❖ → Remove Label 
Remove Function 
Function name field 
Del 
❖ → Function → 
Delete Function 
Define Data 
T 
❖ → Data → Choose 
Data Type 
Repeat Define Data 
Y 
❖ → Data → Last 
Used: type 
Rename Variable 
Variable in 
decompiler 
L 
❖ → Rename Variable 
Retype Variable 
Variable in 
decompiler 
Ctrl+L 
❖ → Retype Variable 
Cycle Integer Types 
B 
❖ → Data → Cycle → 
byte, word, dword, 
qword 
Cycle String Types 
' 
❖ → Data → Cycle → 
char, string, 
unicode 
Cycle Float Types 
F 
❖ → Data → Cycle → 
float, double 
79 
Create Array2 
[ 
❖ → Data → Create 
Array 
Create Pointer2 
P 
❖ → Data → pointer 
Create Structure 
Selection of data 
Shift+[ 
❖ → Data → Create 
Structure 
New Structure Data 
type container 
❖ → New → Structure  
Import C Header 
File → Parse C 
Source 
Cross References 
❖ → References → 
Show References to 
context 
WINDOWS 
Bookmarks 
Ctrl+B 
Window → Bookmarks 
Byte Viewer 
Window → Bytes: 
program name 
Function Call Trees 
Data Types 
Window → Data Type 
Manager 
Decompiler 
Ctrl+E 
Window → Decompile: 
function name 
Function Graph 
Window → Function 
Graph 
Script Manager 
Window → Script 
Manager 
Memory Map 
Window → Memory Map 
Register Values 
V 
Window → Register 
Manager 
Symbol Table 
Window → Symbol 
Table 
Symbol References 
Window → Symbol 
References 
Symbol Tree 
Window → Symbol 
Tree 
SEARCH 
Search Memory 
S 
Search → Memory 
Search Program Text 
Ctrl+Shift+E 
Search → Program 
Text 
MISC 
Select 
Select → what 
Program Differences 
2 
Tools → Program 
Differences 
Rerun Script 
Ctrl+Shift+R 
Assemble 
Ctrl+Shift+G 
❖ → Patch 
Instruction 
**❖ indicates the context menu, i.e., right-click. 
REFERENCE: 
https://www.shogunlab.com/blog/2019/12/22/here-be-dragons-ghidra-1.html 
https://ghidra-sre.org/CheatSheet.html 
80 
G
G 
GIT 
ALL 
ADMINISTRATION 
SOURCE/DOCUMENTATION 
Configure Tooling 
Sets the name attached to your commit transaction 
# git config --global user.name "[name]" 
Set the email attached to your commit transactions 
# git config --global user.email "[email address]" 
Enables colorization of command line output 
# git config --global color.ui auto 
Create Repositories 
Turn an existing directory into a git repository 
# git init 
Clone (download) a repository that already exists, including all of 
the files, branches, and commits 
# git clone [url] or [/path] or [user@host:/path] 
Branches 
Create a new branch 
# git branch [branch-name] 
Switches to the specified branch and updates the working directory 
# git checkout [branch-name] 
Combines the specified branch’s history into the current branch.  
# git merge [branch] 
Deletes the specified branch 
# git branch -d [branch-name] 
Push branch to remote repository 
# git push origin [branch] 
Synchronize Changes 
Downloads all history from the remote tracking branches 
# git fetch 
Combines remote tracking branch into current local branch 
# git merge 
Uploads all local branch commits to GitHub 
# git push 
Updates your current local working branch with all new commits from 
the remote branch 
# git pull 
81 
Browse History Changes 
List version history for the current branch 
# git log 
List version history for a file 
# git log --follow [file] 
Show content differences between two branches 
# git diff [branch-1]…[branch-2] 
Output metadata and content changes of a commit 
# git show [commit] 
Snapshots a file in preparation for versioning 
# git add [file] 
Remove a git file from a repository 
# git rm [file] 
Record file snapshot in permanent version history 
# git commit -m “[description text]” 
Redo & Restore Commits 
Undo all commits after the specified commit, except changes locally 
# git reset [commit] 
Discard all history & changes back to commit 
# git reset --hard [commit] 
Replace working copy with latest from HEAD 
# git checkout --[file]  
Terms 
git: an open source, distributed version-control system 
GitHub: a platform for hosting and collaborating on Git 
repositories 
commit: a Git object, a snapshot of your entire repository 
compressed into a SHA 
branch: a lightweight movable pointer to a commit 
clone: a local version of a repository, including all commits and 
branches 
remote: a common repository on GitHub that all team member use to 
exchange their changes 
fork: a copy of a repository on GitHub owned by a different user 
pull request: a place to compare and discuss the differences 
introduced on a branch with reviews, comments, integrated tests, 
and more 
HEAD: representing your current working directory, the HEAD pointer 
can be moved to different branches, tags, or commits when using git 
checkout 
REFERENCE: 
https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf 
82 
G
G 
GITHUB CLI 
ALL 
ADMINISTRATION 
SOURCE/DOCUMENTATION 
gh is GitHub on the command line and brings pull requests, issues, 
and other GitHub concepts to the terminal next to where you are 
already working with git and your code. 
# Create an issue interactively 
gh issue create 
# Create an issue using flags 
gh issue create --title "Issue title" --body "Issue body" 
# Quickly navigate to the issue creation page 
gh issue create --web 
# Viewing a list of open issues 
gh issue list 
# Viewing a list of closed issues assigned to a user 
gh issue list --state closed --assignee user 
# Viewing issues relevant to you 
gh issue status 
# Viewing an issue in the browser 
gh issue view  
# Viewing an issue in terminal 
gh issue view  --preview 
# Check out a pull request in Git Example Syntax 
gh pr checkout { |  | } [flags] 
# Checking out a pull request locally 
gh pr checkout  
# Checking out a pull request locally with branch name or URL 
gh pr checkout branch-name 
# Create a pull request interactively 
gh pr create 
# Create a pull request using flags 
83 
gh pr create --title "Pull request title" --body "Pull request 
body" 
# Quickly navigate to the pull request creation page 
gh pr create --web 
# Viewing a list of open pull requests 
gh pr list 
# Viewing a list of closed pull requests assigned to a user 
gh pr list --state closed --assignee user 
# Viewing the status of your relevant pull requests 
gh pr status 
# Viewing a pull request in the browser 
gh pr view  
# Viewing a pull request in terminal 
gh pr view  --preview 
REFERENCE: 
https://cli.github.com/ 
G
G 
GITHUB_Exploit 
RED/BLUE TEAM 
ADMINISTRATION 
EXPOSED SECRETS 
It’s advantageous to search git repos like Github or Gitlab for 
exposed credentials, api keys, and other authentication methods.  
TRUFFLE HOG 
https://github.com/dxa4481/truffleHog 
STEP 1: pip install truffleHog 
STEP 2: Fire at a git repo or local branches: 
truffleHog --regex --entropy=False 
https://github.com/someco/example.git 
truffleHog file:///user/someco/codeprojects/example/ 
GITROB 
84 
Gitrob will clone repos to moderate depth and then iterate through 
commit histories flagging files that match potentially sensitive 
content. 
https://github.com/michenriksen/gitrob 
https://github.com/michenriksen/gitrob/releases 
STEP 1: Download precompiled gitrob release 
STEP 2: Login and generate/copy your GITHUB access token: 
https://github.com/settings/tokens 
STEP 3: Launch Gitrob in analyze mode 
gitrob analyze  --site=https://github.example.com --
endpoint=https://github.example.com/api/v3 --access-
tokens=token1,token2 
G
G 
GREYNOISE 
BLUE TEAM 
THREAT INTEL 
CLOUD 
GreyNoise - collects and analyzes untargeted, widespread, and 
opportunistic scan and attack activity that reaches every server 
directly connected to the Internet. Mass scanners (such as Shodan 
and Censys), search engines, bots, worms, and crawlers generate 
logs and events omnidirectionally on every IP address in the IPv4 
space. GreyNoise gives you the ability to filter this useless noise 
out. 
**CLI & WEB UI Available 
GREYNOISE CLI 
Install the library: 
pip install greynoise or python setup.py install 
Save your configuration: 
greynoise setup --api-key  
#CLI COMMAND OPTIONS 
query 
Run a GNQL structured query. 
account 
View information about your GreyNoise account. 
alerts 
List, create, delete, and manage your GreyNoise 
alerts. 
analyze 
Analyze the IP addresses in a log file, stdin, 
etc. 
feedback 
Send feedback directly to the GreyNoise team. 
filter 
Filter the noise from a log file, stdin, etc. 
help 
Show this message and exit. 
85 
interesting 
Report one/more IP "interesting". 
ip 
Query for all information on an IP. 
pcap 
Get PCAP for a given IP address. 
quick 
Check if one/many IPs are "noise". 
repl 
Start an interactive shell. 
setup 
Configure API key. 
signature 
Submit IDS signature to GreyNoise. 
stats 
Aggregate stats from a GNQL query. 
version 
Get version and OS of GreyNoise. 
FILTER 
Sort external IP's from a log file (firewall, netflow, DNS, etc..) 
into a text file one per line ips.txt. Stdin to greynoise 
filter/remove all IP's that are "noise" and return non-noise IP's" 
# cat ips.txt | greynoise filter > non-noise-ips.txt 
ANALYZE 
Sort external IP's from a log file (firewall, netflow, DNS, etc..) 
into a text file one per line ips.txt. Stdin to greynoise to 
analyze all IP's for ASN, Categories, Classifications, Countries, 
Operating Systems, Organizations, and Tags: 
# cat ips.txt | greynoise analyze 
STATS 
Any query you run can be first checked for statistics returned for 
that query: 
# greynoise stats "ip:113.88.161.0/24 classification:malicious" 
#IP DATA 
The IP address of the scanning device IP: 
# greynoise query "ip:" 
# greynoise query "ip:113.88.161.215" 
# greynoise query "113.88.161.0/24" 
Whether the device has been categorized as unknown, benign, or 
malicious: 
# greynoise query "classification:" 
# greynoise query "classification:malicious" 
# greynoise query "ip:113.88.161.0/24 classification:malicious" 
The date the device was first observed: 
# greynoise query "first_seen:" 
86 
# greynoise query "first_seen:2019-12-29" 
# greynoise query "ip:113.88.161.0/24 first_seen: 2019-12-29" 
The date the device was most recently observed: 
# greynoise query "last_seen:" 
# greynoise query "last_seen:2019-12-30" 
# greynoise query "ip:113.88.161.0/24 last_seen:2019-12-30" 
The benign actor the device has been associated with, i.e. Shodan, 
GoogleBot, BinaryEdge, etc: 
# greynoise query "actor:" 
# greynoise query "actor:censys" 
# greynoise query "198.108.0.0/16 actor:censys" 
A list of the tags the device has been assigned over the past 90 
days: 
# greynoise query "tags:" 
# greynoise query "tags:avtech" 
# greynoise query "tags:avtech metadata.asn:AS17974" 
#METADATA 
Whether device is a business, isp, or hosting: 
# greynoise query "metadata.category:" 
# greynoise query "metadata.category:ISP" 
# greynoise query "metadata.category:ISP actor:Yandex" 
The full name of the country the device is geographically located 
in: 
# greynoise query "metadata.country:" 
# greynoise query "metadata.country:turkey" 
# greynoise query "metadata.country:turkey 
metadata.category:mobile" 
The two-character country code of the country the device is 
geographically located: 
# greynoise query "metadata.country_code:" 
# greynoise query "metadata.country_code:RU" 
# greynoise query "metadata.country_code:RU classification:benign" 
The city the device is geographically located in 
metadata.organization: 
# greynoise query "metadata.city:" 
# greynoise query "metadata.city:moscow" 
# greynoise query "metadata.city:moscow tags:SMB Scanner" 
The organization that owns the network that the IP address belongs: 
# greynoise query "metadata.organization:" 
# greynoise query "metadata.organization:Yandex" 
87 
# greynoise query "metadata.organization:Yandex tags:DNS Scanner" 
The reverse DNS pointer of the IP: 
# greynoise query "metadata.rdns:" 
# greynoise query "metadata.rdns:*yandex*" 
# greynoise query "metadata.rdns:*yandex* tags:Web Crawler" 
The autonomous system the IP address belongs: 
# greynoise query "metadata.asn:" 
# greynoise query "metadata.asn:AS17974" 
# greynoise query "metadata.asn:AS17974 metadata.organization:PT 
TELEKOMUNIKASI INDONESIA" 
Whether the device is a known Tor exit node: 
# greynoise query "metadata.tor:" 
# greynoise query "metadata.tor:true" 
# greynoise query "metadata.tor:true metadata.country:sweden" 
#RAW_DATA 
The port number(s) the devices has been observed scanning: 
# greynoise query "raw_data.scan.port:" 
# greynoise query "raw_data.scan.port:23" 
# greynoise query "raw_data.scan.port:23 metdata.country:sweden" 
The protocol of the port the device has been observed scanning: 
# greynoise query "raw_data.scan.protocol:" 
# greynoise query "raw_data.scan.protocol:udp" 
# greynoise query "raw_data.scan.protocol:udp 
metadata.country:china" 
Any HTTP paths the device has been observed crawling the Internet: 
# greynoise query "raw_data.web.paths:" 
# greynoise query "raw_data.web.paths:*admin*" 
# greynoise query "raw_data.web.paths:*admin* tags:Jboss Worm" 
Any HTTP user-agents the device has been observed using while 
crawling the Internet 
# greynoise query "raw_data.web.useragents:" 
# greynoise query "raw_data.web.useragents:Mozilla/4.0 (compatible; 
MSIE 8.0; Windows NT 5.2; Trident/4.0)" 
# greynoise query "raw_data.web.useragents:*baidu* 
metadata.country:Hong Kong" 
Fingerprinting TLS encrypted negotiation between client and server 
interactions (https://ja3er.com/ & 
https://github.com/salesforce/ja3/tree/master/lists):  
# greynoise query "raw_data.ja3.fingerprint:" 
88 
# greynoise query "raw_data.ja3.fingerprint:6734f3 
7431670b3ab4292b8f60f29984"  
# greynoise query "raw_data.ja3.fingerprint:6734f3 
7431670b3ab4292b8f60f29984 metadata.country:china" 
GREYNOISE WEB UI 
https://viz.greynoise.io/ 
#IP DATA 
The IP address of the scanning device IP: 
> ip or cidr 
> 113.88.161.215 
> 113.88.161.0/24 
Whether the device has been categorized as unknown, benign, or 
malicious: 
> classification: 
> classification:malicious 
> 113.88.161.0/24 classification:malicious 
The date the device was first observed: 
> first_seen: 
> first_seen:2019-12-29 
> 113.88.161.0/24 first_seen 2019-12-29 
The date the device was most recently observed: 
> last_seen: 
> last_seen:2019-12-30 
> 113.88.161.0/24 last_seen:2019-12-30 
The benign actor the device has been associated with, i.e. Shodan, 
GoogleBot, BinaryEdge, etc: 
> actor: 
> actor:censys 
> 198.108.0.0/16 actor:censys 
A list of the tags the device has been assigned over the past 90 
days: 
> tags: 
> tags:avtech 
> tags:avtech metadata.asn:AS17974 
#METADATA 
Whether device is a business, isp, or hosting: 
> metadata.category: 
> metadata.category:ISP 
> metadata.category:ISP actor:Yandex 
89 
The full name of the country the device is geographically located 
in: 
> metadata.country: 
> metadata.country:turkey 
> metadata.country:turkey metadata.category:mobile 
The two-character country code of the country the device is 
geographically located: 
> metadata.country_code: 
> metadata.country_code:RU 
> metadata.country_code:RU classification:benign 
The city the device is geographically located in 
metadata.organization: 
> metadata.city: 
> metadata.city:moscow 
> metadata.city:moscow tags:SMB Scanner 
The organization that owns the network that the IP address belongs: 
> metadata.organization: 
> metadata.organization:Yandex 
> metadata.organization:Yandex tags:DNS Scanner 
The reverse DNS pointer of the IP: 
> metadata.rdns: 
> metadata.rdns:*yandex* 
> metadata.rdns:*yandex* tags:Web Crawler 
The autonomous system the IP address belongs: 
> metadata.asn: 
> metadata.asn:AS17974 
> metadata.asn:AS17974 metadata.organization:"PT TELEKOMUNIKASI 
INDONESIA" 
Whether the device is a known Tor exit node: 
> metadata.tor: 
> metadata.tor:true 