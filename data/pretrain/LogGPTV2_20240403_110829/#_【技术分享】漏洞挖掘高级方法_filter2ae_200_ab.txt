activities），主动活动需要我们对程序的执行环境及上下文有一个比较全面的了解，而客观活动却不一定，比如它是客观存在与程序的一些技术文档之中。不过，这种划分也不一定严格，不过对于每一个activity，我们可以从以下几方面去考虑：
**1\. 理解有关漏洞的相关模型**
**2\. 试图假设一个场景去破坏程序**
**3\. 尝试去破坏程序**
程序用途分析（Use case
analysis）。程序用途分析是指理解一个应用程序做了什么工作，会提供什么服务等。每当我去分析一个新的应用程序时，我所做的第一件事就是程序用途分析。同时，阅读与该程序的相关文档将有助于进一步理解程序功能（如上图所示）。我总是这样做，以期对程序有一个透彻的了解。
或许，比起直接构造测试样例进行测试，这项工作可能并不是那么有趣。不过，它的确帮助我节省了一大笔时间。举一个我自己的例子，我之前发现过[Oracle
Opera](http://jackson.thuraisamy.me/oracle-opera.html)（一个广泛使用的酒店管理软件）[CVE-2016-5563/4/5]的远程代码执行漏洞，我就是通过阅读器用户手册快速找到可能存在危险的数据表，最后快速找出远程代码执行漏洞。有关这个漏洞的分析，请参看：[http://jackson.thuraisamy.me/oracle-opera.html](http://jackson.thuraisamy.me/oracle-opera.html)
（执行条件分析）Implementation
analysis，执行条件分析是指理解应用程序运行时需要包括的环境因素，比如网络配置，端口使用等。可以通过端口扫描，漏洞扫描等方式进行操作。这些配置上的问题，很可能就会导致一个漏洞的出现。
聚个例子，一个系统权限级别的程序，由于配置错误，可能会使的低权限的用户能够访问并修改，最终导致一个权限提升，引发一个提权漏洞。又比如，在一个网络程序中，可能程序本身并没有错误，但是由于这个服务器开了一个anonymous的FTP服务器，那么任何人都有可能访问这个机器，这就导致web应用的源代码或者其他敏感文件暴露在外面。这些问题，理论上并非程序自身的漏洞，但是由于其执行环境的因素，就使得其成为一个漏洞。
通信分析（Communications
analysis）。通信分析是指对一个目标程序与其他进程或系统之间交互信息的方式进行深入分析。在这样的前提下，可通过发送精心构造的请求（request）等方法，触发不安全状态。许多web应用程序漏洞都是通过这种方式发现的。
在上述模式下，需要我们对数据通信协议有较为清晰的认识，如果并不能够清晰的了解协议格式呢？这种情况就要借助黑盒测试的技术进行解决，主要通过发送请求，并根据返回值进行判断是否存在异常。
下面举个例子来说明，这里假设存在一个金融网站，里面有一项功能允许用户使用不同的货币购买预付信用卡。这里假设实现这项业务的请求（Request）如下：
**FromAccount : 用于购买预付卡的账户**
**FromAmount : 需要从fromAccount转入预付卡的金额（例如 ￥100）**
**CardType: 需要购买的预付卡类型（例如 USD、GBP**
**currencyPair : 付款账户和预付信用卡的货币配对,用于计算汇率（如 CADUSD、CADGBP）**
当我们要去测试这样一个应用程序时，首先我们可能会想到发送一个正常的数据请求，以帮助我们了解该应用程序的标准响应的格式。例如下图，用CAD去购买82美刀的预付卡的请求和响应是下面这个样子：
或许我们并不知道程序在后台到底对我们的数据做了何种处理，但是我们通过观察status字段的属性知道我们的请求是ok的，下面如果我们将fromAmount参数调整为一个负数，或者将fromAccount调整为其他某个人的账户，那么这个web应用就可能会返回错误响应，比如验证不通过。另外如果我们将currencyPair从CADUSD（加元对美元）改为CADJPY（加元对日元）而cardType不变，那么我们会看到返回值中toAmount字段从82.20变为8863.68。如果程序缺乏足够的验证的话，我们有可能通过这种方式获取到更多的钱而付出的钱不变。
另一方面，如果我们能够获取到后台代码或程序，那事情就变得更加有意思，我们可以轻松了解到后台的运作流程，如后台是如何处理请求，有哪些错误响应，这将有助于我们构造出更加具有针对性的数据对应用进行测试。
代码分析（Code and binary
analysis）。代码分析是指理解一个目标程序是如何处理用户输入的数据，以及该程序的执行流程。目前有很多方法可以对程序实现动态和静态分析，下面介绍其中一部分：
**数据流分析。** 数据流分析对于寻找入口点以及数据是如何走向潜在的不安全状态是非常有用的。当我在通信分析（Communications
analysis）遇到困难，很难构造出合适的request，我便会调整思路采取其他的方式寻找不安全状态，在数据流分析中，我可以使用这种方法，首先判断是否存在不安全状态，如果存在，则进一步跟踪数据是如何流向该状态。这个方法的有点是，一但发现不安全状态，入口点也随之确定，这为发掘漏洞提供巨大帮助。
在这个过程中，动态分析和静态分析需要紧密配合起来。举个例子，当你在寻找如何从A点走到B点时，静态分析就好比是在阅读一张地图，而动态分析就好比直接在这地图上走，需要实时关注路上的天气及交通状况，IDA和windbg的配合就是如此。静态分析可以对程序有一个全貌但不细致的理解，动态分析则可以对程序有一个狭隘但却细致的理解，二者是相互补充的。
**外部引用分析。**
在分析程序的过程中，程序上下文环境中可能非常有限，这个时候分析程序的导入API可以帮助我们进一步了解程序的功能以及它与操作系统的交互方式。比如说，程序引用加密库对数据进行加密，那么你可以跟踪这个加密库并分析其功能，进而分析自己的输入是否能够影响其功能。令外，理解程序是如何与操作系统的交互也可以帮助我们进一步找到我们可以与程序进行交互的入口点。
**字符串分析。**
与外部引用分析一样，分析程序中的字符串将帮助我们进一步理解程序中的功能，特别是那些调试信息，关键字或者令牌什么的，或者是那些看起来特别奇特的东西，对这些关键的字符串的分析及跟踪也将有利于我们寻找到更多的程序入口，进而更加全面的找出程序中的缺陷。
**安全扫描。**
使用自动化的扫描工具（如PHP源代码扫描AWS）可能帮助我们快速找到一些常见的漏洞。但是对于寻找基于上下文和基于设计的漏洞并没有太大帮助。我通常并不会对这种方法有太多青睐，只会用来做一些辅助性的功能，如果单纯靠扫描就能找出一堆漏洞，你研究的目标安全做的就太差了，这在目前并不常见，或者说研究这类目标对于提高你自己并无任何帮助。
**依赖性分析。**
一个应用程序往往会以来其他外来的组件，比如一些开源模块，它所依赖的开源模块自身存在的漏洞可能会被引入造成自身的未公开漏洞。值得一提的是，现今一个程序往往都是引用了众多第三方扩展模块，这些第三方的漏洞极易造成主程序的漏洞。举个例子，大多数浏览器都会使用sqlite做数据缓存，如果sqlite存在漏洞，那么这些浏览器都有可能存在问题，无论是谷歌还是火狐。
**版本分析。**
如果你有机会访问程序的代码仓库，那么你就可以通过分析历史版本的方式对程序进行分析，这种方式不是基于上下文的，比如说，寻找那些长时间没有做改动的部分，这些部分极易寻在漏洞。
代码分析通常需要花费比其他方式更多的时间，同时也更难，因为研究者对这个程序的功能和使用的技术的掌握程度要不亚于其开发者，另外，一个程序的开发可能是由一个团队进行维护，那么对于研究者，全面掌握这些东西显得比较困难。但是只要肯专研，其实什么也都是能够克服的，中国有句古话，只要肯专研，铁棒变花针。
我无法不去强调编程能力的重要性，如果一个研究人员对他当前研究的程序所采用的语言和技术有深入扎实的功底，那么他必将创造出很多有价值的东西。从攻击的角度来说，他可以发现更加简单及直观，编写利用程序也将得心应手。从防御的角度来说，他可以提供出代码级别的具有高度针对性的修复建议而非那种通用的方法。
**四. 有关漏洞挖掘的其他想法。**
**1\. 漏洞的复杂性**
漏洞的复杂性分布非常广。一方面，有很多漏洞非常简单与直观，并且利用代码一目了然，比如说经典的sql注入。另一方面，在系统中有的看似并不相关，并且就其自身而言并非不安全，但是当这些东西以一种特定的方式结合起来的时候，就有可能引发大的漏洞，比如说条件竞争，或者一些其他的复杂的逻辑漏洞。我尝试将这些漏洞按照复杂级别分为“一级漏洞”和“二级漏洞”，不过也有其他分类方法。引用一局来自Project
Zero的Ben Hawkes说过的一句话：
The modern exploit is not a single shot vulnerability anymore. They tend to be
a chain of vulnerabilities that add up to a full-system compromise.
如今想要完成一个完整的利用，只靠单一的漏洞往往行不通。很多时候我们需要靠一连串的漏洞才能完成一起完整的利用，致使系统“妥协”。
**2\. 团队工作**
在一个团队中工作能够有效帮助自己了解自己不知道的知识，以及提高自己已知的知识。不过在团队中要需要注意工作的方式方法，知之为知之，不知为不知，永远不要强行假装精通你不熟悉的东西，因为精通的人可以很轻易的指出你的症结。如果一个团队里面大家都不坦诚相待，那么这不是一个合格的团队，你可以尽早更换。在优秀的团队中，不要指望别人会把所有的知识交给你，要学会如何高效的学习，并在团队交流与合作中不断提高。
**写在最后**
感谢花时间将我的文章读完，我希望我的文章在可以帮助你解开你的一些对于漏洞挖掘的谜团。在学习和研究漏洞挖掘的过程中遇到困难并感到不知所措是非常正常的。不过学习的过程就是这样，只有不断的去尝试才会进步。祝你在漏洞挖掘的路上走的越来越远。
**参考文章**
1.
2.[http://jackson.thuraisamy.me/oracle-opera.html](http://jackson.thuraisamy.me/oracle-opera.html)
3.