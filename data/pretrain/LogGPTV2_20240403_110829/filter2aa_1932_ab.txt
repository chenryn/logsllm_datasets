### How SSH-Jack Works

#### Step III: Attaching to the SSH Client
- **ptrace** attaches to the SSH client process.
- It locates the virtual channel setup code.
- The code is then patched in memory to request a remote shell that communicates with a local TCP socket instead of the user.

#### Step IV: Altering Execution Flow
- The execution flow is altered to run the modified virtual channel (VC) setup code.

#### Step V: Restoring Original State
- The original code and state are restored.
- The process continues as if nothing happened, but the system has been compromised.

### What Your Mother Warned You About
- **Hackers are Sneaky**: They don't just install LRK4 and BNC anymore. Good hackers display creativity, similar to what you would expect from high-end penetration testers.

### Automated Debugging
- **Human vs. Automation**: A human with a debugger can perform sneaky actions, but we aim to automate this.
- **GDB and GDB/MI**: GDB is a powerful debugger, and GDB/MI (Machine Interface) is useful for automation. Python combined with GDB is an excellent choice due to its ubiquity and scripting capabilities.
- **Goal**: Achieve the sneakiness of a human with the speed and portability of a script. This involves more binary analysis and virus-like techniques rather than traditional debugging.

### SSH-Jack Nitty Gritty
- **Python and GDB/MI**: Use Python with GDB/MI for automation.
- **Finding a Safe Place**: Identify a safe point in the program to stop and inject code.
- **Execution Redirection**: Decide where to redirect execution and generate the code to inject.
- **Running and Restoring**: Execute the injected code and restore the original state.

### GDB/MI
- **GDB Overview**: GDB is the GNU Debugger, and GDB/MI is its programmatic interface.
- **gdbmi.py**: A Python interface to GDB, providing basic functionality.
- **Example Usage**:
  ```python
  g = gdbmi()
  g.connect(pid)
  g.insertBreak(breakpoint)
  g.waitForBreak()
  oldeip = g.getRegs()["eip"]
  g.setByte(0x0ee7beef, 0x29)
  ```

### Finding a Safe Place
- **Single-Threaded and Global Variables**: Be cautious with single-threaded processes and global variables.
- **Source Code Analysis**: Read the source code to find a suitable place, likely in the mainline.
- **Stopping and Locating**: Stop the process, locate the address, and set a breakpoint.

### Locating `select()`
- **No Debug Symbols**: If debug symbols are unavailable, follow these steps:
  - `select()` is provided by `libc`.
  - Find the address where the dynamic linker placed `libc::select()`.
  - Locate the entry in the ELF Global Offset Table (GOT) for `libc::select()`'s address.
  - Find entries in the ELF Procedure Linkage Table (PLT) for the GOT entry.
  - Set a breakpoint in the PLT.

### Injecting the Evil
- **Virtual Channel Setup Code**: Find the VC setup code, typically in `ssh.c` at line 1150 (`ssh_session2_open()`).
- **Unique String**: Use a unique string like "dup() in/out/err failed" to locate the code.
- **Code Injection**: Replace the first half of the VC setup code with malicious code.
  - Save and restore registers and flags.
  - Use `socket()` and `connect()` to create a local TCP socket.
  - Ensure the stack and register state are left intact for continued execution.

### Generating and Injecting the Evil
- **Work Backwards**: From the unique string, learn the stack size and patch in command-line parameters.
- **Backup and Overwrite**: Backup the EIP and old code, overwrite the function start with evil code, and set a breakpoint to catch the end of the injection.
- **Execution and Cleanup**: Continue execution, restore the old code, and clean up.

### Anti-Forensic Techniques
- **Memory-Only Operations**: No code on disk, use local tools, and avoid new network connections.
- **Encryption**: Encrypt everything to make packet logs useless.
- **Implementation**: Use general-purpose tools like Python and GDB, and ensure the connection is encrypted.

### Future Improvements
- **Runtime Assembler**: Use Mosdef or similar for runtime assembly.
- **Pure Python Debugger**: Remove GDB dependency.
- **Expand to Other Protocols**: Apply the technique to MSRDP, Citrix ICA, and other protocols.

### Mitigation Techniques
- **Restrict ptrace()**: Patch the kernel to restrict `ptrace()` to root.
- **Restrictive SSH Trusts**: Use restrictive SSH configurations.
- **Educate Users**: Ensure users are aware of the risks and best practices.

### Conclusion
- **Awareness**: Understand that if your system is compromised, it's a serious issue.
- **Rich Desktops**: Rich desktop environments make attacking administrators a viable route.
- **Protocol Vulnerabilities**: Protocols with virtual channel architectures are particularly vulnerable.

### Acknowledgments
- **Inspiration**: Ruxcon (Sydney) 2k3 and 4, Grugq, Shaun Clowes, Silvio Cesare.
- **Community Support**: NZISIG, NZ2600, SLi, and others.

### Q&A
- **Questions and Feedback**: Feel free to ask questions or provide feedback.

### Contact
- **Email**: [Your Email Address]