不再被复制到目标缓冲区，因为前面 0x20 次循环已经足够覆盖到下一个 bitmap 了。
我们用调试器更具体的看一下，先设置 `bFill+0x38c` 的断点，确定 palloc 分配的 0x60 大小 chunk 的地址。
然后再设置一个 `AddEdgeToGET+0x142` 位置处的断点，这个位置是每成功复制一次 points 对象，  
目标缓冲区的地址 +0x30，开始下一次复制，可以看到 vulnerable object 的地址是  
`fffff901716d2fb0`，那么就是从 fb0 处开始复制，继续运行。
这里注意到 points 对象的第一个点的 x 和 y 均为 0，猜测默认第零点为原点，  
然后开始对我们设置的第一个点进行检查，由于前一个点为 (0, 0)，y = 0 小于 0x1f0，  
第一个点会复制到缓冲区，目标缓冲区地址 +0x30。但是到了第二个点，points[1].y  
或者 points[0].y 都大于 0x1f0，这个点会被跳过。接着到了第三个点，points[3].y  
= 0x140，它是小于 0x1f0 所以 points[3] 会被复制到目标缓冲区，再看下这段代码：
其实可以发现，在检查 y 是否小于 0x1f0 时，y 的值是前一个 points.y 和当前 points.y 中较小的那一个，  
所以 points[3] 也会被复制到缓冲区。
由此可以知道第一次调用的 polylineto 函数使目标缓冲区往后增加了 0x90 的偏移，之后的 0x1f 次循环都会增加  
2 * 0x30 的偏移。
    0xfb0 + 0x90 + 2 * 0x30 * 0x1f = 0x1be0
但是看看 bitmap 对象在内存中的位置
    bc0: pool header 0x10
    bd0: base object 0x18
    be8: ... 0x20
    c08: sizlBitmap
还差一个 points，这时在调试器中查看内存发现 points 数组末尾还会检查一次 (0, 0)，  
那么 0x1be0 + 0x30 = 0x1c10 刚好可以覆盖到 sizlBitmap。
这样复制完成后 sizlBitmap 的成员属性就变成了 0xffffffff * 0x1，导致 buffer 的读写空间非常大，  
那么把这个 bitmap 当作 manager，它的下一页的 bitmap object 当作 worker，通过 `SetBitmapBits`  
修改 worker 的 `pvScan0` 属性来设置想读写的地址。可以调用 GetBitmapBits 函数来验证下是否复制成功了，  
添加如下代码：
    for (int k=0; k  0x150) // if check succeeds we found our bitmap.
    }
但是这里又出现问题了，如果直接添加 GetBitmapBits 代码运行会发生 crash，原因时 hdev  
被覆盖成 0x1 了，正常情况下它的值为一个 Gdev device object 的指针或者为 NULL，  
而 crash 发生的函数 `PDEVOBJ::bAllowShareAccess` 会从被覆盖的地址 `0x0000000100000000`  
读取值，然后判断这个值如果为 1 的话就正常返回。
幸运的是这个地址可以在用户态直接申请分配，那么用 VirtualAlloc 申请这个地址把值设置成 1 就解决了问题。
    VOID *fake = VirtualAlloc(0x0000000100000000, 0x100, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    memset(fake, 0x1, 0x100);
现在我们已经能够读写一大块内存了，下一步就可以任意地址读写了，不过我们还需要修复一下堆头结构，  
前面我们写的 poc 程序每次运行完退出时会因为 Bad Pool Header 触发 crash，溢出破坏了堆头部结构。  
先用 GetBitmapbits 读取下一页的 region 对象和 bitmap 对象的头部，写入到当前页的 region 对象和  
bitmap 对象头部中，然后泄露相关内核地址，计算出当前页的 region 对象地址。
    // Get Gh04 header to fix overflown header.
    static BYTE Gh04[0x10];
    fprintf(stdout, "\r\nGh04 header:\r\n");
    for (int i = 0; i 
  * 
  * 
  * 
  * 