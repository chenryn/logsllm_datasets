

 
-
2018-20374 OOB-write  



2018-20375 OOB-write   
-


-
2018-20376 OOB-write   


-
2019-12495 OOB-write  



-
OOB-write   
2019-9754


-
OOB-write


  
OOB-write  
-



-
UAF-write  



-
UAF-write   


-
OOB-write    

-
OOB-write  


-
OOB-write  


OOB-write    
-

-
OOB-write

  
-
-
-
2018-19490 BO
2018-19491 BO
2018-19492 BO
2019-7559
2019-7560
2019-8343
 -
 -
 -


-
-
-
-
-
-
-
-
-

Target
PHP
PHP
PHP
PHP
TCC
TCC
TCC
TCC
TCC
TCC
Boolector
Boolector
NASM
NASM
NASM
NASM
NASM
NASM
gnuplot
gnuplot
gnuplot
cannot outperform them on their own. In contrast to similar
methods, our approach does not rely on complex primitives
such as symbolic execution or taint tracking. Therefore, it
can easily be integrated into existing fuzzers. Additionally,
since GRIMOIRE is based on REDQUEEN, it can be used on
a wide variety of binary-only targets, ranging from userland
programs to operating system kernels.
Despite all advantages, our approach has signiﬁcant dif-
ﬁculties with more syntactically complex constructs, such
as matching the ID of opening and closing tags in XML or
identifying variable constructs in scripting languages. For
instance, while GRIMOIRE is able to produce nested in-
puts such as “FOO”, it struggles to
generalize “(cid:3)” to the more uniﬁed representation
“(cid:3)” with the constraint A = B. A solution for
such complex constructs could be the following generaliza-
tion heuristic: (i) First, we record the new coverage for
the current input. (ii) We then change only a single occur-
rence of a substring in our input and record its new coverage.
For instance, consider that we replace a single occurrence
of “a” by “b” in “FOO” and obtain
“FOO”. This change results in an
invalid XML tag which leads to different coverage compared
to the one observed in (i). (iii) Finally, we change multiple
instances of the same substring and compare the new cover-
age of the modiﬁed input with the one obtained in (i). If we
1998    28th USENIX Security Symposium
USENIX Association
achieved the same new coverage in (iii) and (i), we can assume
that the modiﬁed instances of the same substring are related
to each other. For example, we replace multiple occurrences
of “a” with “b” and obtain “FOO”.
In this example, the coverage is the same as for the original
input since the XML remains syntactically correct.
Similarly, our generalization approach might be too coarse
in many places. Obtaining more precise rules would help un-
covering deeper parts of the target application in cases where
multiple valid statements have to be produced. Consider, for
instance, a scripting language interpreter such as the ones
used in our evaluation. Certain operations might require a
number of constructors to be successfully called. For exam-
ple, it might be necessary to get a valid path object to obtain a
ﬁle object that can ﬁnally be used to perform a read operation.
A more precise representation would be highly useful in such
cases. One could try to infer whether a combination is “valid”
by checking if the combination of two inputs exercises the
combination of the new coverage introduced by both inputs.
For instance, assume that input “a(cid:3)b” triggers the cover-
age bytes 7 and 10 and that input “(cid:3)=(cid:3)” triggers coverage
byte 20. Then, a combination of these two inputs such as
“(cid:3)a(cid:3)=(cid:3)b” could trigger the coverage bytes 7, 10 and 20.
Using this information, it might be possible to infer more
precise grammar descriptions and thus generate inputs that
are closer to the target’s semantics than it is currently possible
in GRIMOIRE. While this approach would most likely further
reduce the gap between hand-written grammars and inferred
grammars, well-designed hand-written grammars will always
have an edge over fuzzers with no prior knowledge: any
kind of inference algorithm ﬁrst needs to uncover structures
before the obtained knowledge can be used. A grammar-
based fuzzer has no such disadvantage. If available, human
input can improve the results of grammar inference or steer
its direction. An analyst can provide a partial grammar to
make the grammar-fuzzer focus on a speciﬁc interesting area
and avoid exploring paths that are unlikely to contain bugs.
Therefore, GRIMOIRE is useful if the grammar is unknown or
under-speciﬁed but cannot be considered a full replacement
for grammar-based fuzzers.
7 Related Work
A signiﬁcant number of approaches to improve the perfor-
mance of different fuzzing strategies has been proposed over
time. Early on, fuzzers typically did not observe the inner
workings of the target application, yet different approaches
were proposed to improve various aspects of fuzzers: different
mutation strategies were evaluated [14, 29], the process of se-
lecting and scheduling of seed inputs was analyzed [11,51,61]
and, in some cases, even learned language models were used
to improve the effectiveness of fuzzing [22, 27]. After the
publication of AFL [65], the research focus shifted towards
coverage-guided fuzzing techniques. Similarly to the previ-
ous work on blind fuzzing, each individual component of
AFL was put under scrutiny. For example, AFLFAST [8]
and AFLGo [7] proposed scheduling mechanisms that are
better suited to some circumstances. Both, COLLAFL [16]
and InsTrim [35], enhanced the way in which coverage is
generated and stored to reduce the amount of memory needed.
Other publications improved the ways in which coverage
feedback is collected [23, 53, 55, 62]. To advance the ability
of fuzzers to overcome constraints that are hard to guess, a
wide array of techniques were proposed. Commonly, dif-
ferent forms of symbolic execution are used to solve these
challenging instances [9, 10]. In most of these cases, a re-
stricted version of symbolic execution (concolic execution)
is used [19–21, 26, 54, 60]. To further improve upon these
techniques, DigFuzz [67] provides a better scheduling for
inputs to the symbolic executor. Sometimes, instead of using
these heavy-weight primitives, more lightweight techniques
such as taint tracking [12, 17, 26, 50], patches [3, 13, 47, 60]
or instrumentation [3, 39] are used to overcome the same
hurdles.
While these improvements generally work very well for
binary ﬁle formats, many modern target programs work with
highly structured data. To target these programs, generational
fuzzing is typically used. In such scenarios, the user can
often provide a grammar. In most cases, fuzzers based on this
technique are blind fuzzers [14, 33, 45, 52, 63].
Recent projects such as AFLSMART [48], NAUTILUS [2]
and ZEST [46] combined the ideas of generational fuzzing
with coverage guidance. CODEALCHEMIST [28] even ven-
tures beyond syntactical correctness. To ﬁnd novel bugs in
mature JavaScript interpreters, it tries to automatically craft
syntactically and semantically valid inputs by recombining
input fragments based on inferred types of variables. All of
these approaches require a good format speciﬁcation and—in
some cases—good seed corpora. CODEALCHEMIST even
needs access to a specialized interpreter for the target lan-
guage to trace and infer type annotations. In contrast, our
approach has no such preconditions and is thus easily inte-
grable into most fuzzers.
Finally, to alleviate some of the disadvantages that the men-
tioned grammar-based strategies have, multiple approaches
were developed to automatically infer grammars for given
programs. GLADE [5] can systematically learn an approxima-
tion to the context-free grammars parsed by a program. To
learn the grammar, it needs an oracle that can answer whether
a given input is valid or not as well as a small set of valid
inputs. Similar techniques are used by PYGMALION [25] and
AUTOGRAM [34]. However, both techniques directly learn
from the target application without requiring a modiﬁed ver-
sion of the target. AUTOGRAM still needs a large set of inputs
to trace, while PYGMALION can infer grammars based solely
on the target application. Additionally, both approaches re-
quire complex analysis passes and even symbolic execution to
produce grammars. These techniques cannot easily be scaled
USENIX Association
28th USENIX Security Symposium    1999
to large binary applications. Finally, all three approaches are
computationally expensive.
8 Conclusion
We developed and demonstrated the ﬁrst fully automatic algo-
rithm that integrates large-scale structural mutations into the
fuzzing process. In contrast to other approaches, we need no
additional modiﬁcations or assumptions about the target appli-
cation. We demonstrated the capabilities of our approach by
evaluating our implementation called GRIMOIRE against var-
ious state-of-the-art coverage-guided fuzzers. Our evaluation
shows that we outperform other coverage-guided fuzzers both
in terms of coverage and the number of bugs found. From this
observation, we conclude that it is possible to signiﬁcantly
improve the fuzzing process in the absence of program input
speciﬁcations. Furthermore, we conclude that even when a
program input speciﬁcation is available, our approach is still
useful when it is combined with a generational fuzzer.
Acknowledgements
We would like to thank our shepherd Deian Stefan and the
anonymous reviewers for their valuable comments and sug-
gestions. Furthermore, we would like to thank Moritz Contag,
Thorsten Eisenhofer, Joel Frank, Philipp Görz and Maxim-
ilian Golla for their valuable feedback. This work was sup-
ported by the German Research Foundation (DFG) within
the framework of the Excellence Strategy of the Federal Gov-
ernment and the States - EXC 2092 CASA. In addition, this
project has received funding from the European Union’s Hori-
zon 2020 research and innovation programme under grant
agreement No 786669 (ReAct). This paper reﬂects only the
authors’ view. The Research Executive Agency is not re-
sponsible for any use that may be made of the information it
contains.
References
[1] APPLE INC. JavaScriptCore. https://github.com/WebKit/webkit/
tree/master/Source/JavaScriptCore.
[2] ASCHERMANN, C., FRASSETTO, T., HOLZ, T., JAUERNIG, P.,
SADEGHI, A.-R., AND TEUCHERT, D. Nautilus: Fishing for deep
bugs with grammars. In Symposium on Network and Distributed System
Security (NDSS) (2019).
[3] ASCHERMANN, C., SCHUMILO, S., BLAZYTKO, T., GAWLIK, R.,
AND HOLZ, T. REDQUEEN: Fuzzing with input-to-state correspon-
dence. In Symposium on Network and Distributed System Security
(NDSS) (2019).
[4] BASTANI, O., SHARMA, R., AIKEN, A., AND LIANG, P. Synthe-
sizing program input grammars. In ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI) (2017).
[5] BASTANI, O., SHARMA, R., AIKEN, A., AND LIANG, P. Synthe-
sizing program input grammars. In ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI) (2017).
[6] BELLARD, F. TCC: Tiny C compiler. https://bellard.org/tcc/.
[7] BÖHME, M., PHAM, V.-T., NGUYEN, M.-D., AND ROYCHOUDHURY,
A. Directed greybox fuzzing. In ACM Conference on Computer and
Communications Security (CCS) (2017).
[8] BÖHME, M., PHAM, V.-T., AND ROYCHOUDHURY, A. Coverage-
In ACM Conference on
based greybox fuzzing as Markov chain.
Computer and Communications Security (CCS) (2016).
[9] CADAR, C., DUNBAR, D., AND ENGLER, D. R. KLEE: Unassisted
and automatic generation of high-coverage tests for complex systems
programs. In Symposium on Operating Systems Design and Implemen-
tation (OSDI) (2008).
[10] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY, D. Un-
leashing Mayhem on binary code. In IEEE Symposium on Security and
Privacy (2012).
[11] CHA, S. K., WOO, M., AND BRUMLEY, D. Program-adaptive muta-
tional fuzzing. In IEEE Symposium on Security and Privacy (2015).
[12] CHEN, P., AND CHEN, H. Angora: Efﬁcient fuzzing by principled
search. In IEEE Symposium on Security and Privacy (2018).
[13] DREWRY, W., AND ORMANDY, T. Flayer: Exposing application
internals. In Proceedings of the ﬁrst USENIX workshop on Offensive
Technologies (2007), USENIX Association.
[14] EDDINGTON, M. Peach fuzzer: Discover unknown vulnerabilities.
https://www.peach.tech/.
[15] FREE SOFTWARE FOUNDATION.
www.gnu.org/software/bison/.
GNU Bison.
https://
[16] GAN, S., ZHANG, C., QIN, X., TU, X., LI, K., PEI, Z., AND CHEN,
Z. CollAFL: Path sensitive fuzzing. In IEEE Symposium on Security
and Privacy (2018).
[17] GANESH, V., LEEK, T., AND RINARD, M. Taint-based directed white-
box fuzzing. In International Conference on Software Engineering
(ICSE) (2009).
[18] GNU PROJECT. GCC, the GNU compiler collection.
//gcc.gnu.org/.
https:
[19] GODEFROID, P., KIEZUN, A., AND LEVIN, M. Y. Grammar-based
whitebox fuzzing. In ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI) (2008).
[20] GODEFROID, P., KLARLUND, N., AND SEN, K. DART: Directed auto-
mated random testing. In ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI) (2005).
[21] GODEFROID, P., LEVIN, M. Y., MOLNAR, D. A., ET AL. Automated
In Symposium on Network and Distributed
whitebox fuzz testing.
System Security (NDSS) (2008).
[22] GODEFROID, P., PELEG, H., AND SINGH, R. Learn&fuzz: Machine
learning for input fuzzing. In Proceedings of the 32nd IEEE/ACM
International Conference on Automated Software Engineering (2017),
pp. 50–59.
[23] GOODMAN,
P.
Shin GRR: Make
fuzzing fast
again.
https://blog.trailofbits.com/2016/11/02/shin-grr-make-
fuzzing-fast-again/.
[24] GOOGLE LLC. V8. https://v8.dev/.
[25] GOPINATH, R., MATHIS, B., HÖSCHELE, M., KAMPMANN, A., AND
ZELLER, A. Sample-free learning of input grammars for comprehen-
sive software fuzzing. arXiv preprint arXiv:1810.08289 (2018).
[26] HALLER, I., SLOWINSKA, A., NEUGSCHWANDTNER, M., AND BOS,
H. Dowsing for overﬂows: A guided fuzzer to ﬁnd buffer boundary
violations. In USENIX Security Symposium (2013).
[27] HAN, H., AND CHA, S. K. IMF: Inferred model-based fuzzer. In
ACM Conference on Computer and Communications Security (CCS)
(2017).
2000    28th USENIX Security Symposium
USENIX Association
[53] SCHUMILO, S., ASCHERMANN, C., GAWLIK, R., SCHINZEL, S.,
AND HOLZ, T. kAFL: Hardware-assisted feedback fuzzing for OS
kernels. In USENIX Security Symposium (2017).
[54] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A., WANG, R.,
CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL, C., AND VIGNA,
G. Driller: Augmenting fuzzing through selective symbolic execution.
In Symposium on Network and Distributed System Security (NDSS)
(2016).
[55] SWIECKI, R. Security oriented fuzzer with powerful analysis options.
https://github.com/google/honggfuzz.
[56] THE NASM DEVELOPMENT TEAM. NASM. https://www.nasm.us/.
[57] THE PHP GROUP. PHP. http://php.net/.
[58] VEGGALAM, S., RAWAT, S., HALLER, I., AND BOS, H. IFuzzer:
An evolutionary interpreter fuzzer using genetic programming.
In
European Symposium on Research in Computer Security (ESORICS)
(2016), pp. 581–601.
[59] VEILLARD, DANIEL. The XML C parser and toolkit of Gnome. http:
//xmlsoft.org/.
[60] WANG, T., WEI, T., GU, G., AND ZOU, W. TaintScope: A checksum-
aware directed fuzzing tool for automatic software vulnerability detec-
tion. In IEEE Symposium on Security and Privacy (2010).
[61] WOO, M., CHA, S. K., GOTTLIEB, S., AND BRUMLEY, D. Schedul-
ing black-box mutational fuzzing. In ACM Conference on Computer
and Communications Security (CCS) (2013).
[62] XU, W., KASHYAP, S., MIN, C., AND KIM, T. Designing new oper-
ating primitives to improve fuzzing performance. In ACM Conference
on Computer and Communications Security (CCS) (2017).