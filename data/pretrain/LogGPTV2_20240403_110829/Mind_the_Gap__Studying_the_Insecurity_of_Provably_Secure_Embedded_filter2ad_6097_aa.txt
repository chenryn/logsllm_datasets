title:Mind the Gap: Studying the Insecurity of Provably Secure Embedded
Trusted Execution Architectures
author:Marton Bognar and
Jo Van Bulck and
Frank Piessens
5
3
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Mind the Gap: Studying the Insecurity of Provably
Secure Embedded Trusted Execution Architectures
Marton Bognar
PI:EMAIL
imec-DistriNet, KU Leuven
3001 Leuven, Belgium
Jo Van Bulck
PI:EMAIL
imec-DistriNet, KU Leuven
3001 Leuven, Belgium
Frank Piessens
PI:EMAIL
imec-DistriNet, KU Leuven
3001 Leuven, Belgium
Abstract—The security claims of a system can be supported
or refuted by different kinds of evidence. On the one hand,
attack research uses empirical, experimental, inductive methods
to refute security claims. If motivated and competent attackers do
not succeed in breaking a speciﬁc security property, this provides
some support (but no deﬁnite proof) that the system is secure.
On the other hand, formal methods use mathematical, deduc-
tive methods that can prove the security of a model of the system.
The process of constructing a proof can uncover vulnerabilities
that can then be ﬁxed. The use of formal methods can be very
powerful and is attractive because it seems to provide irrefutable
evidence of security. However, that evidence applies only to the
mathematical model, not to any actual system, and, hence, it
is important to understand the gap between the model and the
real-world system.
In this paper, we present a case study that examines this
gap for two embedded security architectures that use formal
methods to prove their security properties. Despite strong formal
evidence for security, we discover numerous attacks against the
implementations, all of which falsify proven security properties.
These attacks range from exploiting simple programming errors
to a novel DMA-based side-channel attack. The simple attacks
demonstrate that the construction of systems and proofs is error-
prone, while some of the more sophisticated attacks serve as
examples to show that formal methods alone can never guarantee
the security of a real-world system.
From our case study, we also distill actionable guidelines on
how to provide stronger evidence for the security of a system.
I. INTRODUCTION
How can we be sure that a computer system satisﬁes some
security property of interest? How can potential users be
convinced that the system’s security can be relied upon? How
can we provide scientiﬁc evidence for the security of a system?
These questions were already asked 35 years ago [1] and are
still at the heart of security research and practice today [2]–[4].
Still, to date, there is no consensus on what the best approach
is to provide such evidence of security.
Providing scientiﬁc evidence can be done using inductive
or deductive methods [3], [4]. Induction uses experiments and
observations on a real system to provide empirical evidence
for system properties. Deduction uses mathematical methods
to establish deﬁnite truths about a formal system model.
Both inductive and deductive methods can be applied with
varying levels of rigor. For instance, experiment design and
methodology impact the rigor of inductive methods. Deduction
can use less rigorous informal arguments, or very rigorous
(even machine-checked) formal proofs.
Attack research in security is an inductive method: it in-
volves producing attacks (breaking the security properties) on
real-world systems. If even after extensive effort, no successful
attacks are found, we may increase our belief that the system
is secure. Penetration testing and bug bounty programs can
help ensure that sufﬁcient effort is invested. The strengths
of attack research include that it is applicable to complex
systems, even in a black-box manner, and that it can provide
strong, indisputable evidence for the insecurity of a particular
system. In fact, over the past decades, attack research papers
have regularly uncovered severe vulnerabilities in complex,
widely used systems, including processors [5] or popular web
applications [6]. Attack research can provide deep insight into
the root cause of underlying vulnerabilities and the effort and
conditions required to successfully exploit them [4], [7]. As
a result, attack research has proven indispensable for guiding
effective countermeasure design, as evident by the ongoing
arms race in – among others – the memory-safety domain [8].
An important weakness, however, is that attack research
remains an inductive method, and can, hence, fundamentally
not guarantee the security of a system. That is, even if no
attacks have been found after extensive analysis, one can never
state with certainty that attacks will not be found in the future.
It is also hard to quantify the security assurance obtained
from the observation that no attacks have been found within a
speciﬁc time window by a speciﬁc team of attack researchers.
Formal security proof, on the other hand, is a deductive
method: its strength lies in using mathematical methods to
provide strong evidence that a formal system model satisﬁes
speciﬁc security properties. This model can be abstract and
constructed separately from the system, but it is also possible
to have a stronger connection between the two: source code
in a programming language or hardware description language
can be seen as a system model by deﬁning an operational
semantics, and, hence, formal methods can prove the absence
of vulnerabilities in such code. Under the assumption that the
real system executes the code as deﬁned in the semantics, this
rules out entire classes of attacks on the real-world system.
But important weaknesses of the formal approach include
limited scalability, and the need for simplifying assumptions to
keep system models analyzable and understandable. Further-
more, whether a real-world system satisﬁes certain assump-
tions remains a claim that cannot be proven by deductive
© 2022, Marton Bognar. Under license to IEEE.
DOI 10.1109/SP46214.2022.00049
1638
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:35 UTC from IEEE Xplore.  Restrictions apply. 
methods alone. In other words, formal methods make it
possible to better focus attack efforts (focus on invalidating
assumptions made by the formal model), but can never render
attack effort unnecessary.
Some subﬁelds of the broad security research ﬁeld have de-
veloped certain maturity in providing evidence of security. In
cryptography, competitions leading to standardized algorithms,
such as TLS 1.3 [9] and post-quantum cryptography [10],
are examples where both inductive and deductive techniques
have been used to achieve sufﬁcient security. Other subﬁelds,
systems security in particular, are still far from a consensus
on how to provide evidence. Recent papers appearing in the
literature take widely different approaches for producing their
security arguments.
Case-study approach: The main objective of this paper
is to showcase the gap in systems security between formal,
deductive-only approaches and real-world security. To ﬁt this
within the scope of a single paper, we follow a case study-
driven approach. Many different architectures could be se-
lected for such a case study; for our case study, we selected
small embedded systems that (i) have been published at
recognized security conferences, (ii) support trusted-execution
related functionality, (iii) are accompanied by formal (deduc-
tive) evidence proving their security properties, and (iv) have
an open-source implementation.1 We chose small embedded
systems to make an in-depth systematic analysis at our scale
possible, while trusted execution was chosen for being an
emerging security paradigm that has also received substantial
attention from a formal perspective [11]–[15].
Several systems satisfying these criteria have been published
over the past years. The two systems we examine are both
part of mature research projects with multiple collaborators
and a rich publication history, both by the original designers
[14]–[22] and by outside researchers [23], [24]. One is an
extension [14] to the Sancus system [16] that offers secure
interruptible enclaves; and one is VRASED [15], a remote
attestation framework with a number of extensions [19]–[22]
building on its security properties.
Contributions: In our case study, we provide the following
novel contributions:
• We present a signiﬁcant number of attacks that directly
falsify formally proven security claims in recently pub-
lished, peer-reviewed papers, which have not been shown
insecure before. These attacks are implemented and val-
idated to work on the provided implementations with no
modiﬁcations (unless explicitly mentioned).
• We describe a novel DMA-based side-channel attack that
is effective against these systems and is interesting in its
own right.
• As a more indirect contribution, we provide evidence for
the value of combining inductive and deductive methods
(attack research and formal proofs) in systems security,
share the lessons learned from our case study, and provide
1In this paper, the implementation of a system refers to its source code,
not a physical realization.
guidelines to strengthen the security claims of a system,
supported by examples in the paper.
We want to emphasize two important points right from
the start: ﬁrst, our attacks range from simple programming
errors to more advanced side-channel attacks. It can be tempt-
ing to dismiss the more straightforward attacks as simple
implementation oversights. However,
if a paper claims to
avoid implementation bugs, e.g., because it “uses a veriﬁed
cryptographic software implementation and combines it with a
veriﬁed hardware design to guarantee correct implementation
of RA security properties” [15], then even simple oversights
falsify the claims in the paper. Perhaps more importantly, the
more advanced attacks demonstrate that formal methods alone
can never guarantee the complete security of a system.
Second, due to the nature of our paper, we have to be critical
of the systems in the case study. This should not be mistaken
as questioning the value or quality of these papers. In fact, we
consider these papers to be comparable or better than others in
the literature. The papers were selected based on the positive
qualities of providing open-source implementations, precise
security claims, and detailed security proofs.
Reproducibility and open-source artifacts: To ensure
the reproducibility of our ﬁndings and to encourage further
research, we made all of our experiments open-source at
https://github.com/martonbognar/gap-attacks. This repository,
furthermore,
includes a continuous integration framework
that provides a fully reproducible build environment and
reference output for all our attacks, executed via a cycle-
accurate iverilog simulation of the systems’ respective
openMSP430 designs.
II. BACKGROUND AND SELECTED ARCHITECTURES
A. SancusV: Provably secure interruptible enclaves
Sancus [16] is a lightweight trusted execution environment
(TEE) [25] for embedded devices with a zero-software trusted
computing base. More speciﬁcally, the open-source Sancus
research prototype extends the openMSP430 processor ar-
chitecture [26] with a hardware-level, program-counter-based
memory access control mechanism that
isolates protected
software modules, called enclaves, against all other software
on the platform, including the operating system and other
enclaves. Sancus has seen a line of follow-up work [17], [18],
[24] that modiﬁes or extends the functionality offered by the
base architecture. In this paper, we focus on SancusV [14], the
only such system that offers formal security guarantees. The
journal version [27] of the SancusV paper provides a detailed
outline of the formal model and security proof.
1) Interrupt latency attacks: Following similar embedded
TEE designs [28]–[30], recent upstream versions [31] of
Sancus support interruptible enclaves, where the processor’s
interrupt logic is extended to securely save CPU registers
within the enclave before vectoring to the untrusted operating
system. However, while architecturally sound, this scheme has