信誉危机
广受认可的硬件和软件遭遇信任危机
Seunghun Han
国家安全研究所高级安全研究员
29 May 2019
- NSR（韩国国家安全研究所）高级安全研究员
- Black Hat Asia 2019影响力成员
- KIMCHICON审查委员会成员
- 作为演讲嘉宾出席以下会议：
- USENIX Security 2018 
- Black Hat Asia 2017 - 2019
- HITBSecConf 2016 - 2017
- BeVX and KIMCHICON 2018
- “64-bit multi-core OS principles and structure, Vol. 1 and Vol. 2)的作者
- a.k.a kkamagui
@kkamagui1
我是谁?
- 介绍一个关于信誉的刻板印象
▪ 信誉并不代表值得信赖！
▪ 不幸的是，由于信誉，我们很容易相信某些东西！
- 列举信誉厂商令人失望的案例
▪ BIOS / UEFI固件和可信平台模块（TPM）由值得信赖的
公司制作！
▪ 但是，我发现了两个漏洞，CVE-2017-16837和CVE-
2018-6622，可以破坏TPM
- 提出了对策以及我们所需要做的
▪ 不要基于信誉而轻信，眼见为实，自己动手检查！
本演讲的目标
以前的工作
信誉
基于
信任!
我们只相信
值得信赖
的公司出产的
产品
信誉良好的公司
(高价)
其他公司
(低价)
您的
仅供演示!
信誉良好的公司
(高价值)
其他公司
(低价值)
您的
仅供演示!
I KNOW WHAT YOU DID
FOR THE PRESENTS!
值得信赖的要素
衡量信任的根源
核心 RTM
信誉良好的 产品
真的
值得信任吗?
信誉
可信!
每个人都有一个计划, 
直到他们脸上挨了一拳。
- 迈克 泰森
每个人都有一个计划，
直到他们脸上挨了一拳。
- 迈克 泰森
每个研究者 都有一个计划，
直到遇到他们的经理。
- 佚名
你
每个研究者 都有一个计划，
直到遇到他们的经理。
- 佚名
经理
CEO
时间轴
~~
Happiness
0
5
10
- 10
- 5
- 1000
- 100
2017
2018
2019
Time
(year)
首次遭遇
再次遭遇
CVE-2017-
16837
CVE-2018-
6622
USENIX
Security
Black Hat
Asia
Black Hat Asia
with Napper
~~
Happiness
0
5
10
- 10
- 5
- 1000
- 100
2017
2018
2019
Time
(year)
首次遭遇
二次遭遇
CVE-2017-
16837
CVE-2018-
6622
USENIX
Security
Black Hat
Asia
Black Hat Asia
with Napper
内容 - 背景
可信计算组织（TCG）
- 定义全球行业规范和标准
- 英特尔，AMD，IBM，惠普，戴尔，联想，微软，思科，
瞻博网络和英飞凌等知名公司均为其成员
- 支持硬件信任根
- 可信平台模块（TPM）是核心技术
- TCG技术已应用于统一可扩展固件接口（UEFI）
TCG的可信计算基（TCB）
- 是主机平台上的软件和硬件集合
- 管理和执行系统的安全策略
- 能够防止自己受到入侵
- 可信平台模块（TPM）有助于确保TCB正确实例化并值得
信赖
可信平台模块（TPM）(1)
- 是防篡改设备
- 拥有自己的处理器，RAM，ROM和
非易失性RAM
- 它有自己的与系统分开的独立状态
- 提供加密和累积测量功能
- 测量值累积到平台配置寄存器（PCR＃0~＃23）
可信平台模块（TPM）(2)
- 用于通过调查存储在PCR中的值来确定系统的可信度
- 可以使用本地验证或远程证明
- 用于根据特定的PCR值限制对秘密数据的访问
- “密封”操作利用TPM的PCR加密秘密数据
- 只有当PCR值与特定值匹配时，“Unseal”操作才能解密密封
数据
测量信任的根源（RTM）
- 向TPM发送与完整性相关的信息（测量）
- TPM将测量结果累积到具有PCR中先前存储的值的PCR
- CPU是否由Core RTM（CRTM）控制
- 当建立新的信任链时，CRTM是第一组指令
Extend: PCRnew = Hash(PCRold || Measurementnew)
静态和动态RTM（SRTM和DRTM）
- 当主机平台在POWER-ON或RESTART启动时，SRTM由静态
CRTM（S-CRTM）启动
- DRTM由动态CRTM（D-CRTM）在运行时启动，无需平台重
置
- 在将控制传递给它们前，它们将组件的测量值（散列）扩展到
PCR
: 将下一个代码的哈希扩展到TPM
：执行下一个代码
BIOS/UEFI 固件
BIOS/UEFI
Code
TPM
Bootloader
Kernel
User
Applications
静态测量信任根（SRTM）
S-CRTM
Power On/
Restart
D-CRTM
(SINIT, DCE)
TPM
tboot
(DLME)
动态测量信任根（DRTM）
(英特尔可信执行技术)
Untrusted
Code
DL Event
Bootloader
User
Applications
Kernel
DLME：动态启动测量环境
DL Event：动态启动事件
DCE：DRTM配置环境
DRTM
SRTM
PCR 保护
- 即使攻击者获得root权限，也不得通过不允许的操作重置它们！
- 只有主机复位时，才能复位静态PCR（PCR＃0~＃15）
- 仅当主机初始化DRTM时，才能重置动态PCR（PCR＃17~
＃22）
- 如果攻击者重置PCR，他们可以通过重放哈希值来重现特定的
PCR值
- 他们可以窃取秘密并欺骗本地和远程验证
我们相信所有这些机制
因为信誉!
幸运的是，他们起作用了！
我们相信所有这些机制
因为信誉!
幸运的是，他们起作用了！
直到我发现了漏洞！
你背叛我!
~~
Happiness
0
5
10
- 10
- 5
- 1000
- 100
2017
2018
2019
Time
(year)
First Encounter
Second Encounter
CVE-2017-
16837
CVE-2018-
6622
USENIX
Security
Black Hat
Asia
Black Hat Asia
with Napper
内容 - CVE-2017-16837
英特尔可信执行环境（TXT）
- 是TCG规范的DRTM技术
- 英特尔只使用自己的术语
- ex）DCE =安全初始化认证代码模块（SINIT ACM）
DLME =测量启动环境（MLE）
- 有一个特殊命令（SENTER和SEXIT）进入可信任状态并从中
退出
- SENTER检查SINIT ACM是否有有效签名
- 英特尔在网站上发布SINIT ACM
可信启动（tBoot）
- 是英特尔TXT的参考实现
- 这是一个开源项目（https://sourceforge.net/projects/tboot/
- 它包括许多Linux发行版，如RedHat，SUSE和
Ubuntu的
- 可以验证操作系统和虚拟机监视器（VMM）
- 它测量OS组件并将散列存储到TPM
- TPM的PCR中的测量结果可以由远程认证服务器（例如Intel 
Open CIT）验证
- 它通常用于服务器环境
tBoot的启动过程
CRTM
BIOS/UEFI
Code
GRUB
Pre-
Launch
Code
Kernel
initrd
Remote
Attestation
Tool
Static PCRs (PCR#0-15)
Dynamic PCRs (PCR#17-22)
SINIT
ACM
(DCE)
Post-
Launch
Code
CPU
tBoot (DLME)
TPM
Microcode
SENTER
(DL event)
: Execution
: Measurement
PCR #17
PCR #17~
#19
R.A. Server
Attestation
启动过程很完美！
休眠过程怎么样？?
高级配置和电源接口（ACPI）和休眠状态
- 关闭电源之后
- S0：正常，没有上下文丢失
- S1：待机，CPU缓存丢失
- S2：待机，CPU处于断电状态
- S3：暂停，CPU和设备已关闭电源
- S4：休眠，CPU，设备和RAM均已关闭
- S5：软关闭，所有部件均已关闭电源
TPM也已关机！
唤醒时再次测量代码！
继续
重启 DRTM
再次
测量！
唤醒DRTM的过程
使用tBoot进行休眠的过程
Seal S3 key and MAC of Kernel Memory with Post-Launch PCRs
Save Static PCRs(0~16)
- seal_post_k_state() → g_tpm->seal()
- tpm->save_state()
- shutdown_system()
Shutdown Intel TXT
- txt_shutdown()
Sleep. 关闭CPU和TPM!
Launch MLE again and then, Unseal S3 key and MAC with P-Launch 
PCRs
Extend PCRs and Resume Kernel
Wake Up, Restore Static PCRs, and Resume tBoot
- Real Mode, Single CPU
- begin_launch() → txt_s3_launch_environment()
- post_launch() → s3_launch() → verify_integrity() → g_tpm->unseal()
- verify_integrity() → extends_pcrs() →g_tpm→extend()
- s3 launch()-> prot to real()
使用tBoot进行休眠的过程
Seal S3 key and MAC of Kernel Memory with Post-Launch PCRs
Save Static PCRs(0~16)
- seal_post_k_state() → g_tpm->seal()
- tpm->save_state()
- shutdown_system()
Shutdown Intel TXT
- txt_shutdown()
Sleep. 关闭CPU和TPM!
Launch MLE again and then, Unseal S3 key and MAC with P-Launch 
PCRs
Extend PCRs and Resume Kernel
Wake Up, Restore Static PCRs, and Resume tBoot
- Real Mode, Single CPU
- begin_launch() → txt_s3_launch_environment()
- post_launch() → s3_launch() → verify_integrity() → g_tpm->unseal()
- verify_integrity() → extends_pcrs() →g_tpm→extend()
- s3 launch()-> prot to real()
?!
“丢失的指针”漏洞
(CVE-2017-16837)
Memory Layout of tBoot
Multiboot Header
Code (.text)
Read-Only Data 
(.rodata)
Uninitialized Data
(.bss)
由英特尔TXT测量！
_mle_start
_mle_end
…
Initialized Data 
(.data)
struct tpm_if *g_tpm
struct tpm_if tpm_12_if
struct tpm_if tpm_20_if
“丢失的指针”漏洞
(CVE-2017-16837)
Memory Layout of tBoot
Multiboot Header
Code (.text)
Read-Only Data 
(.rodata)
Uninitialized Data
(.bss)
由英特尔TXT测量！
_mle_start
_mle_end
…
Initialized Data 
(.data)
struct tpm_if *g_tpm
struct tpm_if tpm_12_if
struct tpm_if tpm_20_if