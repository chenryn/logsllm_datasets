------------------------------------------------------------------------------------------------------------------------------------------------------------    
 Index Only Scan using idx_tbl_sensor_track_2 on public.tbl_sensor_track  (cost=0.56..34.92 rows=1003 width=73) (actual time=0.033..0.542 rows=973 loops=1)    
   Output: id, sid, pos, traceid, info, crt_time    
   Index Cond: ((tbl_sensor_track.sid = 1) AND (tbl_sensor_track.traceid = 1))    
   Heap Fetches: 0    
   Buffers: shared hit=22    
 Planning Time: 0.166 ms    
 Execution Time: 0.742 ms    
(7 rows)    
postgres=# \dt+    
                                         List of relations    
 Schema |       Name       | Type  |  Owner   | Persistence | Access method |  Size   | Description     
--------+------------------+-------+----------+-------------+---------------+---------+-------------    
 public | tbl_sensor_track | table | postgres | unlogged    | heap          | 1042 MB |     
(1 row)    
postgres=# \di+    
                                                     List of relations    
 Schema |          Name          | Type  |  Owner   |      Table       | Persistence | Access method |  Size  | Description     
--------+------------------------+-------+----------+------------------+-------------+---------------+--------+-------------    
 public | idx_tbl_sensor_track_1 | index | postgres | tbl_sensor_track | unlogged    | btree         | 301 MB |     
 public | idx_tbl_sensor_track_2 | index | postgres | tbl_sensor_track | unlogged    | btree         | 994 MB |     
 public | tbl_sensor_track_pkey  | index | postgres | tbl_sensor_track | unlogged    | btree         | 214 MB |     
(3 rows)    
```    
并发能力压测      
```    
vi test.sql    
select * from tbl_sensor_track where sid=1 and traceid=1 order by crt_time;    
```    
全内存命中的情况下, 差异较小, 但是实际生产环境中数据不可能全部在内存中, 此时IO带来的问题就会凸显, 性能差异明显.      
非聚集索引    
```    
pgbench (PostgreSQL) 14.0    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 12    
number of threads: 12    
duration: 120 s    
number of transactions actually processed: 366951    
latency average = 3.924 ms    
latency stddev = 10.133 ms    
initial connection time = 12.210 ms    
tps = 3058.035523 (without initial connection time)    
statement latencies in milliseconds:    
         3.925  select * from tbl_sensor_track where sid=1 and traceid=1 order by crt_time;    
```    
聚集覆盖索引    
```    
pgbench (PostgreSQL) 14.0    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 12    
number of threads: 12    
duration: 120 s    
number of transactions actually processed: 460368    
latency average = 3.127 ms    
latency stddev = 8.477 ms    
initial connection time = 12.219 ms    
tps = 3836.628407 (without initial connection time)    
statement latencies in milliseconds:    
         3.128  select * from tbl_sensor_track where sid=1 and traceid=1 order by crt_time;    
```    
## include index解决了什么问题?    
1、在某个维度上查询需要返回N条记录, N条记录在HEAP PAGE中非常分散, 需要耗费大量IO的问题.    
- 不需要联合索引, 减少索引build的时间和复杂度, 并且索引有<1/3 index page的限制, 复合索引会导致数据超长写入失败.    
2、支持按任意维度查询, 每个维度都需要返回N条, N条记录在HEAP PAGE中非常分散, 需要耗费大量IO的问题.    
- index include 可以按任意维度进行聚集存储. 满足不同维度的大范围搜索需求.  比聚集表要厉害: 聚集表只能按1个维度(也就是PK)来进行存储.     
## 其他    
除了使用index include, 在业务侧也可以改进来解决离散IO问题, 例如    
- 轨迹合并存储(使用1条记录, 而非存储到N条记录里面.)    
- 按SID分片存储, 每个SID一个表. 这样就不会和其他SID混PAGE了.    
- 轨迹合并可以使用PG的PostGIS或者阿里云ganos的轨迹数据类型(支持轨迹的计算、例如伴随、相似、拟合等分析).    
##### 202104/20210406_04.md   [《PostgreSQL 14 preview - SP-GiST 索引新增 index 叶子结点 include column value 功能 支持》](../202104/20210406_04.md)      
##### 202011/20201117_01.md   [《使用Postgres，MobilityDB和Citus大规模(百亿级)实时分析GPS轨迹》](../202011/20201117_01.md)      
##### 202004/20200429_01.md   [《PostgreSQL 索引算子下推扩展 - 索引内offset - 索引内过滤 - include index - 随机偏移》](../202004/20200429_01.md)      
##### 201905/20190503_03.md   [《PostgreSQL index include - 类聚簇表与应用(append only, IoT时空轨迹, 离散多行扫描与返回)》](../201905/20190503_03.md)      
##### 201903/20190331_08.md   [《PostgreSQL 12 preview - GiST 索引支持INCLUDE columns - 覆盖索引 - 类聚簇索引》](../201903/20190331_08.md)      
##### 201812/20181209_01.md   [《PostgreSQL IoT，车联网 - 实时轨迹、行程实践 2 - (含index only scan类聚簇表效果)》](../201812/20181209_01.md)      
##### 201812/20181207_01.md   [《PostgreSQL IoT，车联网 - 实时轨迹、行程实践 1》](../201812/20181207_01.md)      
##### 201811/20181101_02.md   [《PostgreSQL pipelinedb 流计算插件 - IoT应用 - 实时轨迹聚合》](../201811/20181101_02.md)      
##### 201806/20180607_02.md   [《Greenplum 轨迹相似(伴随分析)》](../201806/20180607_02.md)      
##### 201712/20171231_01.md   [《PostgreSQL 实时位置跟踪+轨迹分析系统实践 - 单机顶千亿轨迹/天》](../201712/20171231_01.md)      
##### 201712/20171204_01.md   [《GIS术语 - POI、AOI、LOI、路径、轨迹》](../201712/20171204_01.md)      
##### 201708/20170803_01.md   [《菜鸟末端轨迹 - 电子围栏(解密支撑每天251亿个包裹的数据库) - 阿里云RDS PostgreSQL最佳实践》](../201708/20170803_01.md)      
##### 201707/20170722_02.md   [《车联网案例，轨迹清洗 - 阿里云RDS PostgreSQL最佳实践 - 窗口函数》](../201707/20170722_02.md)      
##### 201704/20170418_01.md   [《PostgreSQL 物流轨迹系统数据库需求分析与设计 - 包裹侠实时跟踪与召回》](../201704/20170418_01.md)      
##### 201703/20170312_23.md   [《PostgreSQL 10.0 preview 功能增强 - 唯一约束+附加字段组合功能索引 - 覆盖索引 - covering index》](../201703/20170312_23.md)      
##### 201702/20170219_01.md   [《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)      
##### 201606/20160611_02.md   [《PostgreSQL 如何轻松搞定行驶、运动轨迹合并和切分》](../201606/20160611_02.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")