# 【缺陷周话】第53期：不当的循环终止
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1、不当的循环终止
C/C++语言中的循环操作包括 for() 循环，while() 循环、do{}while()
循环等，在使用循环操作时，需要设定恰当的循环终止条件，避免造成死循环。
## 2、“不当的循环终止”的危害
不当的循环终止通常会导致死循环的发生，进而导致拒绝服务攻击、程序崩溃等漏洞。
CVE中也有一些与之相关的漏洞信息，从2018年1月至2019年9月，CVE中就有3条相关漏洞信息。漏洞信息如下：
CVE | 概述  
---|---  
CVE-2019-14207 | Foxit PhantomPDF 是中国福昕（Foxit）公司的一款PDF文档阅读器。Foxit PhantomPDF
8.3.11 之前版本中存在安全漏洞。攻击者可利用该漏洞造成应用程序崩溃（死循环）。  
CVE-2018-19826 | LibSass是一个开源的使用C语言编写的Sass（CSS扩展语言）解析器。LibSass 3.5.5版本中的
inspect.cpp 文件存在安全漏洞（死循环）  
CVE-2018-10316 | NetwideAssembler(NASM) 是一个基于 Linux
的汇编器，它能够创建二进制文件并编写引导加载程序。NASM2.14rc0 版本中的asm/nasm.c文件的 ‘assemble_file’
函数存在整数溢出漏洞。攻击者可借助特制的文件利用该漏洞造成拒绝服务（死循环）。  
## 3、示例代码
示例源于 toyota-itc-benchmarks-master (https://github.com/regehr/itc-benchmarks)，源文件名：endless_loop.c。
### 3.1 缺陷代码
上述示例代码中在第39行使用 for 语句进行循环操作，且在 for 语句中省略了循环控制变量，在 for
循环体中也没有对循环控制变量进行更新，从而导致死循环的发生，因此存在“不当的循环终止”问题。
使用代码卫士对上述示例代码进行检测，可以检出“不当的循环终止”缺陷，显示等级为高。如图1所示：
图1：“不当的循环终止”检测示例
### 3.2 修复代码
上述修复代码中，在第42行使用 i++; 语句对循环控制变量进行更新，当 i
的值等于10时循环退出，从而避免了死循环问题。使用代码卫士对修复后的代码进行检测，可以看到已不存在“不当的循环终止”缺陷。如图2：
图2：修复后检测结果
## 4、如何避免“不当的循环终止”
（1）在使用循环操作时，设定正确的循环条件；（2）在循环体中，满足循环条件的情况下也可以通过执行 break、return 等语句终止循环。