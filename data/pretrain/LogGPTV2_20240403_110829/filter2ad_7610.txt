# Title: RPKI MIRO: Monitoring and Inspection of RPKI Objects

## Authors:
- Andreas Reuter, Freie Universität Berlin, andreas.reuter@fu-berlin.de
- Matthias Wählisch, Freie Universität Berlin, m.waehlisch@fu-berlin.de
- Thomas C. Schmidt, HAW Hamburg, t.schmidt@haw-hamburg.de

## Abstract
The Resource Public Key Infrastructure (RPKI) stores attestation objects for Internet resources. In this demonstration, we present RPKI MIRO, an open-source software framework designed to monitor and inspect these RPKI objects. RPKI MIRO provides resource owners, RPKI operators, researchers, and lecturers with intuitive access to the content of deployed RPKI repositories. It helps to optimize the repository structure and identify potential failures.

### Categories and Subject Descriptors
- **C.2.3 [Computer-Communication Networks]:** Network Operations
- **H.5.2 [Information Interfaces and Presentation]:** User Interfaces

### Keywords
- PKI monitoring, RPKI measurement, secure inter-domain routing

## 1. Introduction
The RPKI is a public key infrastructure for Internet resources, consisting of three main components:
1. **Extended X.509 Certificates:** These attest the ownership of IP prefixes and autonomous system (AS) numbers.
2. **RPKI Signed Objects:** These do not follow the X.509 data structure but are essential for implementing secure Internet routing (e.g., route origin objects).
3. **Distributed Repository System:** This stores and provides all signed objects to Internet operators and other users.

Relying party software fetches RPKI objects via the rsync protocol from Certificate Authorities (CAs) and cryptographically verifies the data for further processing.

To enhance routing security, approaches such as prefix origin validation have been developed. For example, route origin authorization objects (ROAs) have been created by several operators and service providers like AT&T, Deutsche Telekom, and Mozilla. The success of RPKI applications depends on stable and coherent repository data. However, there are few high-level monitoring tools available to inspect (R)PKI content. Existing tools primarily focus on gathering statistical measures and metadata about RPKI repositories or offer limited inspection capabilities.

### Why RPKI MIRO?
- **Core Tools for Experts:** Current RPKI tools are primarily built for experts and provide limited convenience functions.
- **Monitoring Support:** Distributed measurements and monitoring are not easily supported by existing tools.
- **User Benefits:** An extendable and easy-to-use monitoring framework would benefit various user groups, including CA operators, resource owners, researchers, and lecturers.

#### CA Operators
There are two modes for deploying RPKI: hosted mode (each Regional Internet Registry runs the CA and repositories for resource owners) and delegated mode (each participant maintains their own RPKI). Currently, the delegated mode is rarely supported by RIRs, but this will change as larger ISPs adopt this model. RPKI MIRO has already shown its value in improving the repository structure of RIRs and is expected to see increased demand with the growing deployment of the delegated model.

#### Resource Owners
Transparency is crucial for RPKI acceptance. Public RPKI data does not need to be correct. RPKI MIRO aims to provide easy access to RPKI certificates, revocation lists, ROAs, etc., to give Internet operators more confidence in their data. Its modular design allows for adding additional views and integrating components that can alert individual resource owners in case of failures.

#### Researchers
Despite the standardization of basic RPKI functionality within the IETF, there are still open research questions, particularly regarding ongoing deployment. For example, the mechanism to retrieve RPKI objects from distributed repositories is still under discussion. RPKI MIRO's modular architecture allows for different fetching strategies, distributed measurements, and coherent analysis of results.

#### Lecturers
Public Key Infrastructures, including RPKI, are complex systems. The interplay of different (R)PKI objects is often difficult for students to grasp. Real data can aid in teaching, but current tools are command-line-based and lack visualization. RPKI MIRO provides an intuitive graphical browser to visualize object content and relationships, helping students better understand RPKI concepts. The visualization is tailored to RPKI but can be easily updated for other X.509 extensions.

In the remainder of this paper, we briefly explain the basic architecture of RPKI MIRO, report on our experiences, and discuss future work.

## 2. Architecture of RPKI MIRO
The source code of RPKI MIRO is publicly available at [GitHub](https://github.com/rpki-miro) and is licensed under MIT. RPKI MIRO consists of the following components:

### Backend—Validator
The validator downloads, parses, and validates RPKI objects. It provides statistics relevant for evaluating the functions of a relying party. Validated repository data can be exported in multiple formats for further processing.

Efficient fetching of objects is crucial for any relying party. To minimize the number of separate calls, we implemented a pre-fetching strategy that derives the longest common prefix of multiple publishing points. Table 1 shows the performance gain in terms of rsync calls and download time due to reduced communication overhead.

| Repository | Without Prefetching | With Prefetching |
|------------|---------------------|------------------|
| AfriNIC    | 35 calls, 96 s      | 3 calls, 11 s    |
| APNIC      | 534 calls, 1745 s   | 2 calls, 35 s    |
| ARIN       | 5 calls, 16 s       | 1 call, 7 s      |
| IANA       | 25 calls, 81 s      | 1 call, 9 s      |
| LACNIC     | 492 calls, 1610 s   | 1 call, 23 s     |
| RIPE       | 2 calls, 6 s        | 1 call, 7 s      |

### Backend—Statistics
Separate modules calculate statistical measures (e.g., number of valid objects) to evaluate the repository state. This information is helpful for analyzing the coherence of the distributed repository among different vantage points and comparing different implementations of the validator. Our work revealed some bugs in existing relying party software.

### Frontend—Browser
The browser component visualizes the content of RPKI objects and their relationships. The current tree view per trust anchor is not a direct representation of the underlying file system structure, which would overload the presentation. Instead, it shows only certificates and ROAs within the tree and presents their metadata and relationships to manifests and CRLs in a separate detail view. Additional views can be easily added due to the model-view-controller concept of RPKI MIRO. A public instance of the RPKI browser is available at [rpki-browser.realmv6.org](http://rpki-browser.realmv6.org/).

### Frontend—Statistics
This component visualizes previously gathered statistics, allowing for an easy comparison of the repository state with other relying parties.

## 3. Experiences and Future Work
RPKI MIRO is used by both the research and operator communities. It has helped to better understand the current state of RPKI deployment. For example, RPKI MIRO identified an increase in cross-RIR resource space, which includes route origin attestation objects. Cross-RIR resources are those signed by one RIR and transferred to another, requiring a functional provisioning protocol between RIRs.

RPKI MIRO has also provided insights into how the five RIRs have implemented majority-minority address space, i.e., IP address space where a super-prefix is managed by one RIR but some sub-prefixes are managed by another. This fragmentation has implications for creating resource certificates.

Future work will include the analysis of different protocol proposals to retrieve RPKI objects from repositories, leveraging RPKI MIRO's distributed measurement functionality. We will also refine our pre-fetching strategy to automatically adapt to the repository structure.

On the feature side, we plan to extend the web interface to allow for uploading external repository data and enable users to configure monitoring of repository changes and initiate alarms.

## Acknowledgments
We thank the SIDR community and the RIR community for discussions and valuable feedback, especially Rob Austein, Tim Bruijnzeels (RIPE), and Carlos M. Martinez (LACNIC). This work was supported by the BMBF project Peeroskop.

## References
1. M. Lepinski and S. Kent, “An Infrastructure to Support Secure Internet Routing,” IETF, RFC 6480, February 2012.
2. J. Kloots, “RPKI Dashboard,” [http://rpki.surfnet.nl/](http://rpki.surfnet.nl/), 2015.
3. RIPE NCC, “RPKI Validator,” [https://github.com/RIPE-NCC/rpki-validator](https://github.com/RIPE-NCC/rpki-validator), 2015.
4. LACNIC, “Origin Validation Looking Glass,” [http://www.labs.lacnic.net/rpkitools/looking_glass/](http://www.labs.lacnic.net/rpkitools/looking_glass/), 2015.
5. E. Heilman, D. Cooper, L. Reyzin, and S. Goldberg, “From the consent of the routed: Improving the transparency of the RPKI,” in Proc. of ACM SIGCOMM 2014.
6. T. Bruijnzeels, O. Muravskiy, B. Weber, R. Austein, and D. Mandelberg, “RPKI Repository Delta Protocol,” IETF, Internet-Draft – work in progress 00, February 2015.
7. E. Osterweil, T. Manderson, R. White, and D. McPherson, “Sizing Estimates for a Fully Deployed RPKI,” Verisign Labs, TR 1120005 version 2, December 2012.
8. G. Huston, R. Loomans, B. Ellacott, and R. Austein, “A Protocol for Provisioning Resource Certificates,” RFC 6492.