### 1. 表膨胀分析
snap_ts | db | schemaname | tablename | tups | pages | otta | tbloat | wastedpages | wastedbytes | wastedsize | iname | itups | ipages | iotta | ibloat | wastedipages | wastedibytes | wastedisize | totalwastedbytes
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```gin_test``` | 10000000 | 2000001 | 1737641 | 1.2 | 262360 | 2149253120 | 2149253120 bytes | idx_gin_test | 999505408 | 500492 | 171109651 | 0.0 | 0 | 0 | 0 bytes | 2149253120
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```rum_test``` | 9800000 | 1960028 | 1702888 | 1.2 | 257140 | 2106490880 | 2106490880 bytes | rumidx | 979514496 | 823549 | 167687321 | 0.0 | 0 | 0 | 0 bytes | 2106490880
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```pgbench_accounts``` | 10454088 | 176172 | 168862 | 1.0 | 7310 | 59883520 | 59883520 bytes | pgbench_accounts_pkey | 10454088 | 27431 | 139440 | 0.2 | 0 | 0 | 0 bytes | 59883520
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```pgbench_tellers``` | 1000 | 3664 | 9 | 407.1 | 3655 | 29941760 | 29941760 bytes | pgbench_tellers_pkey | 1000 | 605 | 3 | 201.7 | 602 | 4931584 | 4931584 bytes | 34873344
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```arr_test``` | 10000000 | 555557 | 553109 | 1.0 | 2448 | 20054016 | 20054016 bytes | idx_arr_test | 999504960 | 500492 | 53326501 | 0.0 | 0 | 0 | 0 bytes | 20054016
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_class``` | 51056 | 2191 | 1175 | 1.9 | 1016 | 8323072 | 8323072 bytes | pg_class_oid_index | 51056 | 443 | 907 | 0.5 | 0 | 0 | 0 bytes | 8323072
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_class``` | 51056 | 2191 | 1175 | 1.9 | 1016 | 8323072 | 8323072 bytes | pg_class_tblspc_relfilenode_index | 51056 | 315 | 907 | 0.3 | 0 | 0 | 0 bytes | 8323072
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_class``` | 51056 | 2191 | 1175 | 1.9 | 1016 | 8323072 | 8323072 bytes | pg_class_relname_nsp_index | 51056 | 589 | 907 | 0.6 | 0 | 0 | 0 bytes | 8323072
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_attribute``` | 107789 | 2926 | 2164 | 1.4 | 762 | 6242304 | 6242304 bytes | pg_attribute_relid_attnam_index | 107789 | 749 | 1570 | 0.5 | 0 | 0 | 0 bytes | 6242304
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_attribute``` | 107789 | 2926 | 2164 | 1.4 | 762 | 6242304 | 6242304 bytes | pg_attribute_relid_attnum_index | 107789 | 662 | 1570 | 0.4 | 0 | 0 | 0 bytes | 6242304
#### 建议
根据浪费的字节数, 设置合适的autovacuum_vacuum_scale_factor, 大表如果频繁的有更新或删除和插入操作, 建议设置较小的autovacuum_vacuum_scale_factor来降低浪费空间.  
同时还需要打开autovacuum, 根据服务器的内存大小, CPU核数, 设置足够大的autovacuum_work_mem 或 autovacuum_max_workers 或 maintenance_work_mem, 以及足够小的 autovacuum_naptime.  
同时还需要分析是否对大数据库使用了逻辑备份pg_dump, 系统中是否经常有长SQL, 长事务. 这些都有可能导致膨胀.  
使用pg_reorg或者vacuum full可以回收膨胀的空间.  
参考: http://blog.163.com/digoal@126/blog/static/1638770402015329115636287/.  
otta评估出的表实际需要页数, iotta评估出的索引实际需要页数.  
bs数据库的块大小.  
tbloat表膨胀倍数, ibloat索引膨胀倍数, wastedpages表浪费了多少个数据块, wastedipages索引浪费了多少个数据块.  
wastedbytes表浪费了多少字节, wastedibytes索引浪费了多少字节.  
### 2. 索引膨胀分析
snap_ts | db | schemaname | tablename | tups | pages | otta | tbloat | wastedpages | wastedbytes | wastedsize | iname | itups | ipages | iotta | ibloat | wastedipages | wastedibytes | wastedisize | totalwastedbytes
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```gist_test``` | 9999939 | 63695 | 63632 | 1.0 | 63 | 516096 | 516096 bytes | idx_gist | 9999939 | 76922 | 36711 | 2.1 | 40211 | 329408512 | 329408512 bytes | 329924608
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```test_pg_part_single``` | 999999 | 8389 | 8322 | 1.0 | 67 | 548864 | 548864 bytes | test_pg_part_single_pkey | 999999 | 5486 | 2570 | 2.1 | 2916 | 23887872 | 23887872 bytes | 24436736
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_depend``` | 209624 | 2280 | 1540 | 1.5 | 740 | 6062080 | 6062080 bytes | pg_depend_depender_index | 209624 | 2462 | 950 | 2.6 | 1512 | 12386304 | 12386304 bytes | 18448384
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```pg_catalog``` | ```pg_depend``` | 209624 | 2280 | 1540 | 1.5 | 740 | 6062080 | 6062080 bytes | pg_depend_reference_index | 209624 | 1875 | 950 | 2.0 | 925 | 7577600 | 7577600 bytes | 13639680
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```pgbench_tellers``` | 1000 | 3664 | 9 | 407.1 | 3655 | 29941760 | 29941760 bytes | pgbench_tellers_pkey | 1000 | 605 | 3 | 201.7 | 602 | 4931584 | 4931584 bytes | 34873344
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```test_pg_part_orig_3``` | 100014 | 737 | 833 | 0.9 | 0 | 0 | 0 bytes | test_pg_part_orig_3_pkey | 100014 | 551 | 257 | 2.1 | 294 | 2408448 | 2408448 bytes | 2408448
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```test_pg_part_pathman_4``` | 100000 | 761 | 833 | 0.9 | 0 | 0 | 0 bytes | test_pg_part_pathman_4_pkey | 100000 | 551 | 257 | 2.1 | 294 | 2408448 | 2408448 bytes | 2408448
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```test_pg_part_pathman_8``` | 100000 | 738 | 833 | 0.9 | 0 | 0 | 0 bytes | test_pg_part_pathman_8_pkey | 100000 | 551 | 257 | 2.1 | 294 | 2408448 | 2408448 bytes | 2408448
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```test_pg_part_pathman_3``` | 100000 | 732 | 833 | 0.9 | 0 | 0 | 0 bytes | test_pg_part_pathman_3_pkey | 100000 | 551 | 257 | 2.1 | 294 | 2408448 | 2408448 bytes | 2408448
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```test_pg_part_orig_9``` | 100001 | 730 | 833 | 0.9 | 0 | 0 | 0 bytes | test_pg_part_orig_9_pkey | 100001 | 551 | 257 | 2.1 | 294 | 2408448 | 2408448 bytes | 2408448
#### 建议
如果索引膨胀太大, 会影响性能, 建议重建索引, create index CONCURRENTLY ... .  
### 3. 垃圾记录 TOP 10 表分析
snap_ts | database | schemaname | tablename | n_dead_tup
---|---|---|---|---
```2016-11-24 10:57:04.081798+08``` | ```postgres``` | ```public``` | ```pgbench_branches``` | 672799
#### 建议
通常垃圾过多, 可能是因为无法回收垃圾, 或者回收垃圾的进程繁忙或没有及时唤醒, 或者没有开启autovacuum, 或在短时间内产生了大量的垃圾.  
可以等待autovacuum进行处理, 或者手工执行vacuum table.  
### 4. 未引用的大对象分析
snap_ts | database | pg_size_pretty
---|---|---|---|---
#### 建议
如果大对象没有被引用时, 建议删除, 否则就类似于内存泄露, 使用vacuumlo可以删除未被引用的大对象, 例如: vacuumlo -l 1000 $db -w或者我写的调用vacuumlo()函数.  
应用开发时, 注意及时删除不需要使用的大对象, 使用lo_unlink 或 驱动对应的API.  
参考 http://www.postgresql.org/docs/9.4/static/largeobjects.html  
## 四、数据库安全或潜在风险分析
### 1. 表年龄前100
snap_ts | database | rolname | nspname | relkind | relname | age | age_remain
---|---|---|---|---|---|---|---
#### 建议
表的年龄正常情况下应该小于vacuum_freeze_table_age, 如果剩余年龄小于2亿, 建议人为干预, 将LONG SQL或事务杀掉后, 执行vacuum freeze.  
### 2. unlogged table和hash index
snap_ts | database | rolname | nspname | relname
---|---|---|---|---
snap_ts | database | idx
---|---|---
#### 建议
unlogged table和hash index不记录XLOG, 无法使用流复制或者log shipping的方式复制到standby节点, 如果在standby节点执行某些SQL, 可能导致报错或查不到数据.  
在数据库CRASH后无法修复unlogged table和hash index, 不建议使用.  
PITR对unlogged table和hash index也不起作用.  
### 3. 剩余可使用次数不足1000万次的序列检查
snap_ts | database | rolname | nspname | relname | times_remain