### Optimized Text

#### Resource Limitations of Mobile Devices
Mobile devices, such as smartphones, have more limited computational resources compared to regular desktop computers. Therefore, any detection method designed to run directly on these devices must be highly efficient.

#### Detailed Runtime Analysis
Figure 7 presents a detailed runtime analysis for both a desktop computer and a Galaxy S3 smartphone, plotting the runtime per application against the size of the analyzed code. Surprisingly, DREBIN achieves a sublinear runtime on both devices, meaning its performance scales with \(O(\sqrt{m})\) in the number of analyzed bytes \(m\). This suggests that the number of features does not increase linearly with the code size, and thus larger applications do not necessarily contain more features to analyze.

From this evaluation, we conclude that DREBIN not only reliably detects malicious applications but also performs this task within a time frame that meets practical requirements.

#### Limitations
While our evaluation demonstrates the efficacy of DREBIN in detecting recent malware on the Android platform, it is important to note that DREBIN, which relies on static analysis, cannot completely prevent infections from malicious applications. Specifically, transformation attacks that are undetectable by static analysis, such as those based on reflection and bytecode encryption, can hinder accurate detection. To mitigate the absence of dynamic analysis, DREBIN extracts API calls related to obfuscation and loading of code, such as `DexClassLoader.loadClass()` and `Cipher.getInstance()`. These features help identify the execution of hidden code, even if further analysis is not possible. In combination with other features, DREBIN can still detect malware despite the use of some obfuscation techniques.

#### Dataset and Training
To avoid manually crafting detection patterns, DREBIN uses machine learning to generate detection models. While machine learning provides a powerful tool for automatic inference, it requires a representative dataset for training. The quality of DREBIN's detection model depends critically on the availability of both malicious and benign applications. Although collecting benign applications is straightforward, gathering recent malware samples requires significant technical effort. Fortunately, offline analysis methods like DroidRanger, AppsPlayground, and RiskRanker can help automatically acquire malware and maintain a representative dataset over time.

Another limitation of using machine learning is the potential for mimicry and poisoning attacks. Obfuscation strategies such as repackaging, code reordering, or junk code insertion do not affect DREBIN. However, renaming activities and components between the learning and detection phases can impair discriminative features. Similarly, an attacker may lower DREBIN's detection score by incorporating benign features or fake invariants into malicious applications. Although such attacks cannot be entirely ruled out, thorough sanitization of learning data and frequent retraining on representative datasets can limit their impact.

#### Related Work
The analysis and detection of Android malware have been a vibrant area of research in recent years. Several concepts and techniques have been proposed to counter the growing amount and sophistication of this malware. An overview of the current malware landscape is provided in studies by Felt et al. and Zhou & Jiang.

1. **Detection Using Static Analysis:**
   - Early approaches for detecting Android malware were inspired by static program analysis. Methods like Kirin, Stowaway, and RiskRanker statically inspect applications and disassemble their code to detect malicious activity.
   - Common open-source tools for static analysis include Smali and Androguard, which facilitate dissecting the content of applications with minimal effort.
   - DREBIN is related to these approaches but differs in two key aspects: it uses machine learning to analyze information extracted from static analysis and is optimized for efficiency, enabling direct inspection on smartphones.

2. **Detection Using Dynamic Analysis:**
   - Another branch of research has focused on detecting Android malware at runtime. Systems like TaintDroid and DroidScope enable dynamic monitoring in a protected environment, providing detailed behavior information.
   - However, these systems are too complex to be deployed directly on smartphones and are mainly used for offline detection of large collections of Android applications.
   - ParanoidAndroid is one of the few systems that employ dynamic analysis on smartphones by running a virtual clone of the device on a dedicated server. However, this approach is not scalable due to the complexity involved.

3. **Detection Using Machine Learning:**
   - The difficulty of manually crafting and updating detection patterns has led to the use of machine learning. Methods like Crowdroid, DroidMat, Adagio, MAST, and DroidAPIMiner use machine learning to analyze statically extracted features.
   - DroidAPIMiner, which is closest to DREBIN, provides similar detection performance but incurs significant runtime overhead and lacks explainability.
   - DREBIN addresses these issues by providing an effective, efficient, and explainable detection of malicious applications.

#### Conclusion
Android malware is a rapidly growing threat, and traditional defenses like antivirus scanners are increasingly ineffective. While recent approaches like DroidRanger and AppPlayground support filtering malicious applications, they induce runtime overhead that makes them impractical for direct smartphone protection. DREBIN, a lightweight method, combines static analysis and machine learning to keep pace with malware development. Our evaluation shows that DREBIN outperforms related approaches with fewer false alarms.

In practice, DREBIN offers two key advantages:
1. **Efficient Scanning:** It can scan large numbers of applications, such as those from third-party markets, with an average runtime of 750 ms per application on a regular computer.
2. **Direct Smartphone Protection:** DREBIN can be applied directly on smartphones, triggered when new applications are downloaded, protecting users who install apps from untrusted sources.

Although DREBIN effectively identifies malicious software, it has the inherent limitations of static analysis. Future work could explore dynamically triggering DREBIN whenever new code is loaded, similar to successful approaches in JavaScript analysis.

#### Dataset
To foster research and enable comparisons, we make the malicious Android applications and all extracted feature sets used in our work available to other researchers at [http://user.cs.uni-goettingen.de/˜darp/drebin](http://user.cs.uni-goettingen.de/˜darp/drebin).

#### Acknowledgements
We thank the anonymous reviewers for their helpful comments and Yan Chen for shepherding the paper. This work was funded by BMBF under the project PROSEC (FKZ 01BY1145).

#### References
[References listed as provided in the original text]