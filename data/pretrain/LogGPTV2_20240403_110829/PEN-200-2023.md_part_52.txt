### Optimized Text

#### Terminating and Considering Alternatives
If a prospective cracking session is becoming overly prolonged, it's more efficient to consider alternative attack vectors or invest in hardware upgrades or cloud-based machine instances rather than holding out hope for success.

#### Wordlist Preparation
In nearly all cases, we should mutate our wordlist and perform a rule-based attack instead of a straightforward dictionary attack. This step involves investigating potential password policies and researching other password vectors, including online password leak sites. Without this, we may need to run multiple wordlists with (or without) pre-existing rules to cover a broad range of possible passwords.

#### Starting the Cracking Process
After all the preparation, we can start our tool and begin the cracking process. At this point, we must be meticulous when copying and pasting hashes. An extra space or a newline can render our efforts futile. Additionally, we must ensure we are using the correct hash type. For example, `hashid` cannot automatically determine if `b08ff247dc7c5658ff64c53e8b0db462` is MD2, MD4, or MD5. An incorrect choice will waste time. We can avoid this by double-checking the results with other tools and conducting additional research.

We will follow this methodology in the upcoming demonstrations to reinforce the important aspects and details of the cracking process. The best way to improve results in this often-lengthy process is to operate with focus and structure.

### 13.2.4 Password Manager
Password managers create and store passwords for different services, protecting them with a master password. This master password grants access to all passwords held by the password manager. Users often copy and paste these passwords from the password manager or use an auto-fill function tied to a browser. Examples of popular password managers include 1Password and KeePass. While this type of software assists users who must maintain many complex passwords, it can also introduce risks into an organization.

In this section, we will demonstrate a common penetration test scenario. Let's assume we have gained access to a client workstation running a password manager. In the following demonstration, we will extract the password manager’s database, transform the file into a format usable by Hashcat, and crack the master database password.

#### Connecting to the Workstation
Let's begin by connecting to the SALESWK01 machine (192.168.50.203) over RDP. Assuming we have obtained credentials for the `jason` user (password: `lab`), we will log in and gain access to the system desktop.

Once connected, we will check which programs are installed on the system. Since we have GUI access, we will use the "Apps & features" function of Windows, which is the most straightforward approach. We will click on the Windows icon, type "Apps," select "Add or remove programs," and scroll down to review all installed programs.

**Figure 213: KeePass in Installed Programs List**

The list shows that KeePass is installed on the system. If we were unfamiliar with this program, we would research it and discover that the KeePass database is stored as a `.kdbx` file and that there may be more than one database on the system. For example, a user may maintain a personal database, and an organization may maintain a department-level database.

#### Locating the Database Files
Our next step is to locate the database files by searching for all `.kdbx` files on the system. We will use PowerShell with the `Get-ChildItem` cmdlet to locate files in specified locations. We will use `-Path C:\` to search the entire drive, `-Include *.kdbx` to specify the file types, and `-File -Recurse` to get a list of files and search in subdirectories. Finally, we will set `-ErrorAction SilentlyContinue` to silence errors and continue execution.

```powershell
PS C:\Users\jason> Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue
```

**Listing 274 - Searching for KeePass Database Files**

The output reveals a database file in the `jason` user’s Documents folder.

**Figure 214: KeePass Database in Explorer**

We will transfer this file to our Kali system in preparation for the following steps.

#### Transforming the Hash
We have now completed the first step of the cracking methodology and can proceed to the next step, transforming the hash into a format our cracking tool can use.

The JtR suite includes various transformation scripts like `ssh2john` and `keepass2john`, which can format a broad range of different file formats and are installed by default on our Kali machine. We can also use these scripts to format hashes for Hashcat.

Let's use the `keepass2john` script to format the database file and save the output to `keepass.hash`.

```bash
kali@kali:~/passwordattacks$ ls -la Database.kdbx
-rwxr--r-- 1 kali kali 1982 May 30 06:36 Database.kdbx
kali@kali:~/passwordattacks$ keepass2john Database.kdbx > keepass.hash
kali@kali:~/passwordattacks$ cat keepass.hash
Database:$keepass$*2*60*0*d74e29a727e9338717d27a7d457ba3486d20dec73a9db1a7fbc7a068c9aec6bd*04b0bfd787898d8dcd4d463ee768e55337ff001ddfac98c961219d942fb0cfba*5273cc73b9584fbd843d1ee309d2ba47*1dcad0a3e50f684510c5ab14e1eecbb63671acae14a77eff9aa319b63d71ddb9*17c3ebc9c4c3535689cb9cb501284203b7c66b0ae2fbf0c2763ee920277496c1
```

**Listing 275 - Using keepass2john to Format the KeePass Database for Hashcat**

The listing above shows the resulting hash of the KeePass database stored in `keepass.hash`. Before we can work with the resulting hash, we need to further modify it.

In our case, the JtR script prepended the filename `Database` to the hash. The script does this to act as the username for the target hash, which is helpful when cracking database hashes. Since KeePass uses a master password without any kind of username, we need to remove the `“Database:”` string with a text editor.

After removing the `“Database:”` string, the hash is in the correct format for Hashcat:

```bash
kali@kali:~/passwordattacks$ cat keepass.hash
$keepass$*2*60*0*d74e29a727e9338717d27a7d457ba3486d20dec73a9db1a7fbc7a068c9aec6bd*04b0bfd787898d8dcd4d463ee768e...
```

**Listing 276 - Correct Hash Format for Hashcat without “Database:”**

We are nearly ready to start the cracking process, but we need to determine the hash type for KeePass. We could look it up in the Hashcat Wiki or grep the Hashcat help output as shown below:

```bash
kali@kali:~/passwordattacks$ hashcat --help | grep -i "KeePass"
13400 | KeePass 1 (AES/Twofish) and KeePass 2 (AES) | Password Manager
```

**Listing 277 - Finding the Mode of KeePass in Hashcat**

The output of the grep command shows that the correct mode for KeePass is 13400.

Let's skip step three (cracking time calculation) since this is a simple example and won't take long, and move on to step four to prepare our wordlist. We will use one of the Hashcat-provided rules (`rockyou-30000.rule`), as mentioned earlier, combined with the `rockyou.txt` wordlist. This rule file is especially effective with `rockyou.txt`, as it was created for it.

As we enter step five, we have prepared everything for our password attack. Let's use Hashcat with the updated arguments and start cracking.

```bash
kali@kali:~/passwordattacks$ hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force
hashcat (v6.2.5) starting
...
$keepass$*2*60*0*d74e29a727e9338717d27a7d457ba3486d20dec73a9db1a7fbc7a068c9aec6bd*04b0bfd787898d8dcd4d463ee768e55337ff001ddfac98c961219d942fb0cfba*5273cc73b9584fbd843d1ee309d2ba47*1dcad0a3e50f684510c5ab14e1eecbb63671acae14a77eff9aa319b63d71ddb9*17c3ebc9c4c3535689cb9cb501284203b7c66b0ae2fbf0c2763ee920277496c1:qwertyuiop123!
...
```

**Listing 278 - Cracking the KeePass Database Hash**

After several seconds, Hashcat successfully cracked the hash and discovered the KeePass master password of `qwertyuiop123!`. Let's run KeePass over our RDP connection and, when prompted, enter the password.

**Figure 215: Prompt for Master Password in KeePass**

Great! We opened KeePass with the cracked password. Now we have access to all the user’s stored passwords!

**Figure 216: Password List After Successfully Entering the Master Password**

### 13.2.5 SSH Private Key Passphrase
In this section, we will focus on cracking SSH private key passphrases.

Even though SSH private keys should be kept confidential, there are many scenarios in which these files could be compromised. For example, if we gain access to a web application via a vulnerability like Directory Traversal, we could read files on the system. We could use this to retrieve a user’s SSH private key. However, when we try to use it to connect to the system, we would be prompted for a passphrase. To gain access, we need to crack the passphrase.

Let's demonstrate this scenario and how to use the cracking methodology we discussed to crack the passphrase of a private key. When we used a dictionary attack on the BRUTE HTTP login form, we gained access to a web-based file manager that hosted an SSH private key.

#### Browsing the Web Service
Let's browse another web service, which (for this demonstration) is located at `http://192.168.50.201:8080` and log in with a username `osf` and a password of `121212`.

**Figure 217: Directory Listing of TinyFileManager**

This web service is similar to the previous TinyFileManager example, except that the main directory now contains the two additional files `id_rsa` and `note.txt`. Let's download both of them to our Kali machine and save them to our `passwordattacks` directory. First, we will review the contents of `note.txt`.

```bash
kali@kali:~/passwordattacks$ cat note.txt
Dave's password list:
Window
rickc137
dave
superdave
megadave
umbrella
Note to myself:
New password policy starting in January 2022. Passwords need 3 numbers, a capital letter, and a special character
```

**Listing 279 - Contents of note.txt**

The output shows that this note contains Dave’s password list in plaintext. In a real-world situation, we would need to perform significantly more information gathering, including learning the actual username associated with each password, but for demonstration purposes, we will use this information.

#### Attempting SSH Connection
Let's try to use the private key `id_rsa` for the newly-identified user `dave` in an SSH connection. For this, we must modify the permissions of the downloaded private key. The SSH port used in this example is 2222. We will try each of these passwords as the passphrase for the SSH private key. Note that the `ssh` program will not echo the passphrase.

```bash
kali@kali:~/passwordattacks$ chmod 600 id_rsa
kali@kali:~/passwordattacks$ ssh -i id_rsa -p 2222 dave@192.168.50.201
The authenticity of host '[192.168.50.201]:2222 ([192.168.50.201]:2222)' can't be established.
ED25519 key fingerprint is SHA256:ab7+Mzb+0/fX5yv1tIDQsW/55n333/oGARIluRonao4.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[192.168.50.201]:2222' (ED25519) to the list of known hosts.
Enter passphrase for key 'id_rsa':
Enter passphrase for key 'id_rsa':
Enter passphrase for key 'id_rsa':
```

**Listing 280 - SSH Connection Attempts with the Private Key**

None of the passwords from the text file worked for this passphrase. However, in a real penetration test, we would keep these passwords on hand for various other vectors, including spray attacks or attacks against a `dave` user on other systems. However, we still need a passphrase to use Dave’s private key.

According to the `note.txt` file, a new password policy was enabled in January 2022. There’s a high probability that Dave has a passphrase that satisfies the new password policy.

#### Transforming the Private Key
Following the cracking methodology, our next step is to transform the private key into a hash format for our cracking tools. We will use the `ssh2john` transformation script from the JtR suite and save the resulting hash to `ssh.hash`.

```bash
kali@kali:~/passwordattacks$ ssh2john id_rsa > ssh.hash
kali@kali:~/passwordattacks$ cat ssh.hash
id_rsa:$sshng$6$16$7059e78a8d3764ea1e883fcdf592feb7$1894$6f70656e7373682d6b65792d7631000000000a6165733235362d6374720000000662637279707400000018000000107059e78a8d3764ea1e883fcdf592feb7000000100000000100000197000000077373682...
```

**Listing 281 - Using ssh2john to Format the Hash**

Within this output, `"$6$"` signifies SHA-512. As before, we will remove the filename before the first colon. Then, we will determine the correct Hashcat mode.

```bash
kali@kali:~/passwordattacks$ hashcat -h | grep -i "ssh"
...
10300 | SAP CODVN H (PWDSALTEDHASH) iSSHA-1 | Enterprise Application Software (EAS)
22911 | RSA/DSA/EC/OpenSSH Private Keys ($0$) | Private Key
22921 | RSA/DSA/EC/OpenSSH Private Keys ($6$) | Private Key
22931 | RSA/DSA/EC/OpenSSH Private Keys ($1, $3$) | Private Key
22941 | RSA/DSA/EC/OpenSSH Private Keys ($4$) | Private Key
22951 | RSA/DSA/EC/OpenSSH Private Keys ($5$) | Private Key
```

**Listing 282 - Determine the Correct Mode for Hashcat**

The output indicates that `"$6$"` is mode 22921.

#### Creating Rules and Preparing the Wordlist
Now, let's proceed with our methodology and create a rule file and prepare a wordlist to crack the hash. We will again review `note.txt` to determine which rules we should create and which passwords we will include in the wordlist.

```bash
kali@kali:~/passwordattacks$ cat note.txt
Dave's password list:
Window
rickc137
dave
superdave
megadave
umbrella
Note to myself:
New password policy starting in January 2022. Passwords need 3 numbers, a capital letter, and a special character
```

**Listing 283 - Contents of note.txt to Determine Rules and Wordlist**

Based on this, we can begin to create our rule file. We must include three numbers, at least one capital letter, and at least one special character.

We notice that Dave used `137` for the three numbers in the `rickc137` password. Furthermore, the `Window` password starts with a capitalized letter. Let's use a rule function to make the first letter uppercase. There is no special character included in any of the listed passwords. For our first cracking attempt, we will just use the most common special characters `!`, `@`, and `#`, as they are the first three special characters on many keyboard layouts.

Based on the analysis, we will create our rules. We will use `c` for the capitalization of the first letter and `$1 $3 $7` for the numerical values. To address the special characters, we will create rules to append the different special characters `!`, `@`, and `#`.

```bash
kali@kali:~/passwordattacks$ cat ssh.rule
c $1 $3 $7 $!
```

This completes the setup for cracking the SSH private key passphrase.