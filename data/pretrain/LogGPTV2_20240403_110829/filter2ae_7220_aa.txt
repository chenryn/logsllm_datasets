# 0x00：前言
2018年5月微软发布了一次安全补丁，其中有一个是对内核空指针解引用的修复，本片文章从补丁对比出发，对该内核漏洞进行分析，对应CVE-2018-8120，实验平台是Windows
7 x86 sp1
# 0x01：补丁对比
对比四月和五月的安全补丁可以定位以下几个关键函数，逐个分析观察可以定位到我们本次分析的的关键函数`SetImeInfoEx`
可以看到五月的补丁对`SetImeInfoEx`多了一层检验
IDA中观察4月补丁反汇编如下，稍微添加了一些注释
    signed int __stdcall SetImeInfoEx(signed int pwinsta, const void *piiex)
    {
      signed int result; // eax
      int v3; // eax
      int v4; // eax
      result = pwinsta;
      if ( pwinsta )                                // 判断 pwinsta 是否为空
      {
        v3 = *(_DWORD *)(pwinsta + 0x14);           // 获取 pwinsta + 0x14 处的值,也就是 spkList
        while ( *(_DWORD *)(v3 + 0x14) != *(_DWORD *)piiex )// 未判断指针内容直接引用,触发空指针解引用漏洞
        {
          v3 = *(_DWORD *)(v3 + 8);
          if ( v3 == *(_DWORD *)(pwinsta + 0x14) )
            return 0;
        }
        v4 = *(_DWORD *)(v3 + 0x2C);
        if ( !v4 )
          return 0;
        if ( !*(_DWORD *)(v4 + 0x48) )
          qmemcpy((void *)v4, piiex, 0x15Cu);
        result = 1;
      }
      return result;
    }
5月补丁反汇编如下
    signed int __stdcall SetImeInfoEx(signed int pwinsta, const void *piiex)
    {
      signed int result; // edx
      int v3; // eax
      int v4; // eax
      if ( !pwinsta )
        return 0;
      result = *(_DWORD *)(pwinsta + 0x14);
      if ( !result )
        return 0;
      v3 = *(_DWORD *)(pwinsta + 0x14);
      while ( *(_DWORD *)(v3 + 0x14) != *(_DWORD *)piiex )
      {
        v3 = *(_DWORD *)(v3 + 8);
        if ( v3 == result )
          return 0;
      }
      v4 = *(_DWORD *)(v3 + 0x2C);
      if ( !v4 )
        return 0;
      if ( !*(_DWORD *)(v4 + 0x48) )
        qmemcpy((void *)v4, piiex, 0x15Cu);
      return 1;
    }
可以看到五月的补丁对于参数v3是否为零进行了一次检测，我们对比`SetImeInfoEx`函数的实现发现，也就是多了对成员域
`spklList`的检测，v3就是我们的`spklList`，该函数的主要作用是对扩展结构`IMEINFO`进行设置
    // nt4 源码
    /**************************************************************************\
    * SetImeInfoEx
    *
    * Set extended IMEINFO.
    *
    * History:
    * 21-Mar-1996 wkwok       Created
    \**************************************************************************/
    BOOL SetImeInfoEx(
        PWINDOWSTATION pwinsta,
        PIMEINFOEX piiex)
    {
        PKL pkl, pklFirst;
        UserAssert(pwinsta->spklList != NULL);
        pkl = pklFirst = pwinsta->spklList;
        do {
            if (pkl->hkl == piiex->hkl) {
                /*
                 * Error out for non-IME based keyboard layout.
                 */
                if (pkl->piiex == NULL)
                    return FALSE;
                /*
                 * Update kernel side IMEINFOEX for this keyboard layout
                 * only if this is its first loading.
                 */
                if (pkl->piiex->fLoadFlag == IMEF_NONLOAD) {
                    RtlCopyMemory(pkl->piiex, piiex, sizeof(IMEINFOEX));
                }
                return TRUE;
            }
            pkl = pkl->pklNext;
        } while (pkl != pklFirst);
        return FALSE;
    }
同样的修复我们可以在`ReorderKeyboardLayouts`函数中看到，也是对`spklList`成员域进行了限制
`ReorderKeyboardLayouts`函数实现如下，可以看到函数也对`spklList`进行了调用，我们这里主要分析`SetImeInfoEx`函数
    // nt4 源码
    VOID ReorderKeyboardLayouts(
        PWINDOWSTATION pwinsta,
        PKL pkl)
    {
        PKL pklFirst = pwinsta->spklList;
        UserAssert(pklFirst != NULL);
        /*
         * If the layout is already at the front of the list there's nothing to do.
         */
        if (pkl == pklFirst) {
            return;
        }
        /*
         * Cut pkl from circular list:
         */
        pkl->pklPrev->pklNext = pkl->pklNext;
        pkl->pklNext->pklPrev = pkl->pklPrev;
        /*
         * Insert pkl at front of list
         */
        pkl->pklNext = pklFirst;
        pkl->pklPrev = pklFirst->pklPrev;
        pklFirst->pklPrev->pklNext = pkl;
        pklFirst->pklPrev = pkl;
        Lock(&pwinsta->spklList, pkl);
    }
结合上面微软对于两个函数的修复，我们可以猜测这次的修复主要是对`spklList`成员域的错误调用进行修复，从`SetImeInfoEx`函数的交叉引用中，因为只有一处交叉引用，所以我们可以追溯到调用函数`NtUserSetImeInfoEx`，通过分析可以看到该函数的主要作用是对进程中的窗口进行设置
    signed int __stdcall NtUserSetImeInfoEx(char *buf)
    {
      signed int v1; // esi
      char *v2; // ecx
      char v3; // al
      signed int pwinsta; // eax
      char piiex; // [esp+10h] [ebp-178h]
      CPPEH_RECORD ms_exc; // [esp+170h] [ebp-18h]
      UserEnterUserCritSec();
      if ( *(_BYTE *)gpsi & 4 )
      {
        ms_exc.registration.TryLevel = 0;
        v2 = buf;
        if ( (unsigned int)buf >= W32UserProbeAddress )
          v2 = (char *)W32UserProbeAddress;
        v3 = *v2;
        qmemcpy(&piiex, buf, 0x15Cu);
        ms_exc.registration.TryLevel = 0xFFFFFFFE;
        pwinsta = _GetProcessWindowStation(0);
        v1 = SetImeInfoEx(pwinsta, &piiex); // 参数 pwinsta 由 _GetProcessWindowStation(0) 获得
                                         // 参数 piiex 在 qmemcpy 函数中由 a1 拷贝得到,而 a1 是我们可控的传入参数
      }
      else
      {
        UserSetLastError(0x78);
        v1 = 0;
      }
      UserSessionSwitchLeaveCrit();
      return v1;
    }
在`SetImeInfoEx`函数中，我们可以看到传入的指针`PWINDOWSTATION`指向结构体`tagWINDOWSTATION`结构如下，也就是窗口站结构，其中偏移
0x14 处可以找到`spklList`，我们需要关注的点我会进行注释
    1: kd> dt win32k!tagWINDOWSTATION
       +0x000 dwSessionId      : Uint4B
       +0x004 rpwinstaNext     : Ptr32 tagWINDOWSTATION
       +0x008 rpdeskList       : Ptr32 tagDESKTOP
       +0x00c pTerm            : Ptr32 tagTERMINAL
       +0x010 dwWSF_Flags      : Uint4B
       +0x014 spklList         : Ptr32 tagKL    // 关注点
       +0x018 ptiClipLock      : Ptr32 tagTHREADINFO
       +0x01c ptiDrawingClipboard : Ptr32 tagTHREADINFO
       +0x020 spwndClipOpen    : Ptr32 tagWND
       +0x024 spwndClipViewer  : Ptr32 tagWND
       +0x028 spwndClipOwner   : Ptr32 tagWND
       +0x02c pClipBase        : Ptr32 tagCLIP
       +0x030 cNumClipFormats  : Uint4B
       +0x034 iClipSerialNumber : Uint4B
       +0x038 iClipSequenceNumber : Uint4B
       +0x03c spwndClipboardListener : Ptr32 tagWND
       +0x040 pGlobalAtomTable : Ptr32 Void
       +0x044 luidEndSession   : _LUID
       +0x04c luidUser         : _LUID
       +0x054 psidUser         : Ptr32 Void
我们继续追溯到`spklList`指向的结构`tagKL`，可以看到是一个键盘布局对象结构体，结构体成员中我们可以看到成员`piiex`指向一个基于`tagIMEINFOEX`布局的扩展信息，而在`SetImeInfoEx`函数中，该成员作为第二个参数传入，作为内存拷贝的内容，我们还可以发现有两个很相似的指针`pklNext`和`pklPrev`负责指向布局对象的前后
    1: kd> dt win32k!tagKL
       +0x000 head             : _HEAD
       +0x008 pklNext          : Ptr32 tagKL    // 关注点
       +0x00c pklPrev          : Ptr32 tagKL    // 关注点
       +0x010 dwKL_Flags       : Uint4B
       +0x014 hkl              : Ptr32 HKL__    // 关注点
       +0x018 spkf             : Ptr32 tagKBDFILE
       +0x01c spkfPrimary      : Ptr32 tagKBDFILE
       +0x020 dwFontSigs       : Uint4B
       +0x024 iBaseCharset     : Uint4B
       +0x028 CodePage         : Uint2B
       +0x02a wchDiacritic     : Wchar
       +0x02c piiex            : Ptr32 tagIMEINFOEX // 关注点
       +0x030 uNumTbl          : Uint4B
       +0x034 pspkfExtra       : Ptr32 Ptr32 tagKBDFILE
       +0x038 dwLastKbdType    : Uint4B
       +0x03c dwLastKbdSubType : Uint4B
       +0x040 dwKLID           : Uint4B
`piiex`指向的`tagIMEINFOEX`的结构如下
    1: kd> dt win32k!tagIMEINFOEX
       +0x000 hkl              : Ptr32 HKL__
       +0x004 ImeInfo          : tagIMEINFO
       +0x020 wszUIClass       : [16] Wchar
       +0x040 fdwInitConvMode  : Uint4B
       +0x044 fInitOpen        : Int4B
       +0x048 fLoadFlag        : Int4B  // 关注点