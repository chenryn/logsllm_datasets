### 12.8.3.1. Manipulating Volume-Level Ownership Rights

#### File Type and Permission Bits
- `fileMode`: A 16-bit unsigned integer representing the file type and permission bits.
- `special`: A union containing:
  - `iNodeNum`: A 32-bit unsigned integer for the indirect inode number in hard links.
  - `linkCount`: A 32-bit unsigned integer for the count of links referring to this indirect node.
  - `rawDevice`: A 32-bit unsigned integer for the device number in block/character devices.

#### Permissions on HFS+ Volumes
- **Mandatory on Root Volumes**: Permissions are mandatory on the root volume.
- **Optional on Non-Root Volumes**: Permissions can be deactivated on non-root HFS+ volumes.

#### Example: Disabling and Enabling Permissions
```sh
# Create a 32MB HFS+ volume with permissions enabled
$ hdiutil create -size 32m -fs HFSJ -volname HFSPerms /tmp/hfsperms.dmg
$ open /tmp/hfsperms.dmg
$ touch /Volumes/HFSPerms/file.txt
$ chmod 600 /Volumes/HFSPerms/file.txt
$ sudo chown root:wheel /Volumes/HFSPerms/file.txt
$ ls -l /Volumes/HFSPerms
total 0
-rw------- 1 root wheel 0 Oct 15 10:55 file.txt

# Disable permissions
$ mount -u -o noperm /Volumes/HFSPerms
$ ls -l /Volumes/HFSPerms
total 0
-rw------- 1 amit amit 0 Oct 11 10:55 file.txt
```

#### Behavior When Permissions Are Disabled
- **Replacement User ID**: Disabling permissions assigns ownership to a single user ID, known as the replacement user ID.
- **Default Replacement ID**: If not specified, the kernel uses `UNKNOWNUID` (user ID 99), which matches any user ID for ownership rights.
- **Behavioral Change**: The file system objects retain their original owner IDs, but the `hfsmount` structure holds the replacement ID in memory.

#### Example: Checking Ownership
```sh
$ hfsdebug /Volumes/HFSPerms/file.txt
...
# BSD Info
ownerID = 0 (root)
groupID = 0 (wheel)
...

$ sudo hfsdebug -V /Volumes/HFSPerms -m
...
HFS+ flags = 00000000000000000000000000001110
+ HFS_UNKNOWN_PERMS
+ HFS_WRITEABLE_MEDIA
+ HFS_CLEANED_ORPHANS
default owner = { uid=99, gid=99 }
...
```

#### Note on File Mode Bits
- **File Mode Bits Honored**: Even when permissions are disabled, the file mode bits are still honored.
- **Example**:
  ```sh
  $ chmod 000 /Volumes/HFSPerms/file.txt
  $ cat /Volumes/HFSPerms/file.txt
  cat: /Volumes/HFSPerms/file.txt: Permission denied
  ```

#### Algorithm for Determining Ownership Rights
- **Figure 1222**: Shows the algorithm used by the Mac OS X HFS+ implementation to determine ownership rights to a file system object.

### 12.8.3.2. Repairing Permissions

#### Background
- **Permissions Corruption**: Older applications may disregard or corrupt Unix-style permissions if run with sufficient privileges.
- **Repairing Permissions**: Mac OS X supports repairing permissions to address this issue, typically on boot volumes.

#### Bill of Materials (BOM) Files
- **BOM Files**: Contain metadata for each file, including Unix permissions, and are located in `/Library/Receipts/`.
- **Usage**: Tools that repair permissions use these BOM files to restore the original permissions.

#### Example: Creating and Repairing Permissions
```sh
# Create a disk image and enable permissions
$ hdiutil create -size 32m -fs HFSJ -volname HFSPR /tmp/hfspr.dmg
$ open /tmp/hfspr.dmg
$ mount -u -o perm /Volumes/HFSPR

# Add necessary directories and files
$ mkdir -p /Volumes/HFSPR/System/Library/CoreServices
$ mkdir -p /Volumes/HFSPR/Library/Receipts/BaseSystem.pkg/Contents
$ cp /System/Library/CoreServices/SystemVersion.plist /Volumes/HFSPR/System/Library/CoreServices/

# Create a file and set initial permissions
$ touch /Volumes/HFSPR/somefile.txt
$ chmod 400 /Volumes/HFSPR/somefile.txt

# Create a BOM file
$ cd /Volumes/HFSPR/Library/Receipts/BaseSystem.pkg/Contents/
$ sudo mkbom /Volumes/HFSPR Archive.bom

# Corrupt and repair permissions
$ chmod 444 /Volumes/HFSPR/somefile.txt
$ sudo diskutil repairPermissions /Volumes/HFSPR
Started verify/repair permissions on disk disk10s2 HFSPR
Determining correct file permissions.
Permissions differ on ./somefile.txt, should be -r-------- , they are -r--r--r--
Owner and group corrected on ./somefile.txt
Permissions corrected on ./somefile.txt
The privileges have been verified or repaired on the selected volume
Verify/repair finished permissions on disk disk10s2 HFSPR
$ ls -l /Volumes/HFSPR/somefile.txt
-r-------- 1 amit amit 0 Oct 16 12:27 /Volumes/HFSPR/somefile.txt
```

### 12.8.4. Journaling

#### Overview
- **Journaling Support**: HFS+ supports journaling of metadata, including volume data structures.
- **Purpose**: Ensures file system consistency in case of failure by recording metadata-related changes in a journal file.

#### Transactional Integrity
- **Transactions**: Related modifications are grouped into transactions and recorded in the journal.
- **Commitment**: Transactions are either fully committed or not at all, ensuring atomicity.
- **Recovery**: Journaling makes it faster to repair the volume after a crash, as only the journal needs to be examined.

#### Implementation Details
- **Write-Ahead Journaling**: The journaling mechanism writes intended changes to the journal file before writing to the actual destination blocks.
- **Syncing Fully**: Uses `DKIOCSYNCHRONIZECACHE` ioctl to flush media state to the drive.

#### Journal Files
- **Invisible Files**: `.journal_info_block` and `.journal` are stored as contiguous files and are normally invisible through the file system APIs.
- **hfsdebug**: Can retrieve information about the journal files.

#### Enabling and Disabling Journaling
- **Tools**: `diskutil` and `hfs.util` can be used to enable or disable journaling on a mounted HFS+ volume.
- **Sysctl Operations**: Programmatic manipulation of the journal is possible using `HFS_ENABLE_JOURNALING`, `HFS_DISABLE_JOURNALING`, and `HFS_GET_JOURNAL_INFO`.

#### Observing Journal Operation
- **hfsdebug**: Can be used to view the contents of the journal buffer and relate them to specific file system operations.

### 12.8.5. Quotas

#### Overview
- **Volume-Level Quotas**: HFS+ supports volume-level quotas based on user and group IDs.
- **Quota Files**: `.quota.user` and `.quota.group` reside in the root directory and contain quota limits and usage values.

#### Implementation
- **cnode Structure**: Contains an array of disk quota usage records (`struct dquot`).
- **Mac OS X 10.4**: Supports two elements in the array, one for user quotas and one for group quotas.

This section provides a detailed and organized overview of the HFS+ file system's features related to permissions, journaling, and quotas.