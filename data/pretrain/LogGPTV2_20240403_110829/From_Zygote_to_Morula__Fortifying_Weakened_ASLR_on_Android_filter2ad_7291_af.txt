0
2
0
0
0
0
0
3
1
1
0
0
0
2
0
0
0
0
0
3
1
1
Fig. 12. Android Compatibility Test Suite (CTS) results. Morula shows the
same compatibility test results as Zygote, and the failed test cases in both
models were not related to either of the process creation models. The preﬁxes
on test package names were removed for simple representations.
VI. DISCUSSION
Security Implications for Other Zygote-Based Systems. The
concept of the Zygote process creation model is not only used
for Android, but also used for other systems including the
Chromium OS and the Chromium browser. The reason for
using the Zygote model varies depending on the environment.
For example, Chromium in Linux uses it to keep a reference
to original binaries/libraries. As a result, after being updated in
runtime, Chromium can keep running without version compat-
ibility issues with newly updated binaries/libraries [48]. As we
have shown, the Zygote model can be a possible attack surface
because all child processes inherit resources, including mem-
ory layouts, from their parent process. Although Chromium
only relies on the Zygote model for rendering processes, it
is possible to have cross attacks involving multiple rendering
processes or security related resource leaks initialized by the
parent process.
Limitations of Selective Randomization. Selective random-
ization aims to balance the security gain and performance
penalty. Thus, selective randomization does not protect An-
droid from the attacks described in Section III because it
provides the unique address space layouts only for selective
apps. This indicates that a system deploying selective ran-
domization can still be vulnerable to our ASLR attacks. For
example, even if the app is distributed without native code
components, it can be still exposed to address leak vulner-
abilities while running the default system libraries loaded by
Zygote. Although the possibility of having such vulnerabilities
should be low, we recommend device vendors deploy selective
randomization only if the Morula design cannot be applied for
the whole system (i.e., low-end devices with limited computing
resources). The security limitation of selective randomization
stems from the fact that an app still runs native code in default
system libraries even if it does not contain its own native code
component. To handle this limitation, control-ﬂow analysis can
be performed on the app to see whether it actually runs (or
heavily depends) on native code.
VII. RELATED WORK
ASLR has been considered an effective defense mechanism
for mitigating exploitation of security bugs by increasing diver-
sity in address space layout of a program [39]. ASLR-enabled
systems, combined with DEP, have successfully mitigated
attack techniques such as arbitrary code execution or return-
oriented programming (ROP).
ASLR Attacks/defenses. As modern commodity OSes provide
ASLR/DEP defense mechanisms by default [24, 43], attack
techniques also try to evolve to bypass ASLR/DEP. One
example is to brute-force insufﬁcient randomness in memory
layout [30, 39]. Another example is to generate exploits based
on memory layout extrapolated from leaked pointers, type
confusion (heap overﬂow), and use-after-free bugs [35, 37].
Furthermore, by repeatedly abusing memory disclosures, an
attacker can learn the entire memory layout of a system and
chain ROP gadgets on the ﬂy [41]. Moreover, it is possible
for attackers to target non-randomized components of an
application. For example, Flash, Java, and the .NET runtime
in IE8/9/10 [42, 44] are well-known targets for ROP-gadgets
to break ASLR/DEP in Windows.
With increasing use of bytecode interpreters [13], JIT
compilation, which optimizes performance by compiling byte
code to native instructions, opens other threats for breaking
ASLR/DEP [11, 15]. Many commonly utilized attack vectors,
such as JavaScript, are being compiled to native code via JIT
compilation, providing attackers the means to convert their
bytecode to a native executable. However, these attacks are
only effective in breaking speciﬁc applications, so mitigation
mechanisms such as anomaly detectors [14], are already de-
ployed and used in commercial products [34].
Researchers also explored interesting ways to estimate
target addresses for attacks by using cache or hash collision,
both in the OS kernel [25] and in web browsers [2]. However,
we believe ASLR-enabled systems raise a high bar for attack-
ers to compromise servers [47] and mobile devices, which
encounter attacks via small sets of interfaces like HTTP or
media streaming.
Attacks/defenses on Android. We classify common attacks
on Android into two types: the ﬁrst is an exploit of underlying
system components [45, 46, 51], which are privileged and
separated processes in Linux. The other is abuse of over-
privileged application permissions [9, 19, 20, 26, 49]. Accord-
ing to Lookout’s Android Threat Report [36], one emerging
problem on Android is the repackaged trojan attack, which
prevents users from distinguishing an ofﬁcial and legitimate
application from a trojan [18, 50]. For example, 250,000 users
downloaded a disguised trojan application, DroidDream [36].
Therefore, we believe our local trojan attacks will become
more critical to mobile users in the near future, and the ASLR
solution in Morula can mitigate the threats effectively.
Although Android already ships with a variety of security
features, such as UID separation and digitally signed appli-
cations [38, 40], we found that individual security bugs in
applications can seriously threaten the entire system if Android
does not ﬁx the ASLR problem in the default Zygote process
creation model.
Adopting ASLR/DEP in Mobile Devices. As exploits against
437
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
mobile platforms have increased, vendors outside the Android
platform have also begun to include defensive mechanisms
even at the cost of performance. For example, iOS 4 [29]
supports ASLR of applications and the kernel.
Mitigating ASLR problems on Android. The most relevant
work to Morula is Retouching [12], a mechanism that ran-
domizes prelinked code when deploying Android applications.
Since Retouching randomizes at the time of deployment or
update, it does not require direct kernel changes. Therefore,
Retouching provides differing memory layouts across differ-
ent devices. However, Retouching has uniform address space
layouts for all running apps in a device as it uses the Zygote
process creation model, and thus it is still vulnerable to remote
coordinated and local trojan attacks.
VIII. CONCLUSION
In this paper, we presented a new security threat
to
Android’s ASLR and proposed Morula as a countermeasure.
We showed that Zygote, Android’s low-level process creation
system, can severely weaken the effectiveness of ASLR, an
existing and standard security mechanism. We demonstrated
two attack scenarios where either a remote attacker or a local
trojan app can exploit the weakened ASLR and execute code
by means of return-oriented programming. As a replacement
for the insecure Zygote, Morula fortiﬁes the weakened ASLR
on Android using three key designs and optimizations: the
Morula process creation model, on-demand loading of Dalvik
classes, and selective randomization of app memory layouts.
We conducted a thorough evaluation, showing that Morula
restores the effectiveness of ASLR on Android to the same
level as on Linux, and at the same time maintains app launch
time on par with or even better than Zygote. Morula pays
an acceptable cost of increased app memory usage for much
improved security, and imposes no obvious overhead to other
resources,
including battery power. Morula’s design yields
an easy-to-adopt and backward-compatible implementation,
which is ready to be merged into the open source branch of
Android OS as well as vendor-customized branches.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers
for their valuable comments. We thank William Enck for the
thoughtful feedback that guided the ﬁnal version of this paper.
We also thank the various members of our operations staff
who provided proofreading of this paper. This material
is
based upon work supported in part by the National Science
Foundation under Grants No. CNS-1017265, CNS-0831300,
and CNS-1149051, by the Ofﬁce of Naval Research under
Grant No. N000140911042, by the Department of Homeland
Security under contract No. N66001-12-C-0133, and by the
United States Air Force under Contract No. FA8650-10-C-
7025. Any opinions, ﬁndings, and conclusions or recommen-
dations expressed in this material are those of the authors and
do not necessarily reﬂect the views of the National Science
Foundation, the Ofﬁce of Naval Research, the Department of
Homeland Security, or the United States Air Force.
REFERENCES
[1] Android Web Browser GIF File Heap-Based Buffer Overﬂow. http:
//cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0985.
[2] Leaking
information with
timing
attacks
on
hashtables.
http://gdtr.wordpress.com/2012/08/07/leaking-information-with-
timing-attacks-on-hashtables-part-1.
[3] SRS One Click Root for Android. http://www.srsroot.com/.
[4] Type confusion in WebKit. http://cve.mitre.org/cgi-bin/cvename.cgi?
name=CVE-2013-0912, 2013.
[5] Android Compatibility Program. Android Compatibility. http://source.
android.com/compatibility.
[6] Android Open Source Project. Introducing ART. http://source.android.
com/devices/tech/dalvik/art.html.
[7] Android Open
Project
droid.security.cts.PackageSignatureTest
R4. https://code.google.com/p/android/issues/detail?id=19030.
Tracker.
in
Issue
failuer
Source
an-
android CTS
[8] Android Open
Issue
com.android.cts.appsecurity.AppSecurityTests
FAIL. https://code.google.com/p/android/issues/detail?id=53532.
Tracker.
CTS
testPermissionDiffCert
Project
Source
[9] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: Analyzing the
In ACM conference on Computer
Android Permission Speciﬁcation.
and communications security (CCS ’12), 2012.
[10] C. M. Bishop and N. M. Nasrabadi. Pattern recognition and machine
learning. springer New York, 2006.
[11] D. Blazakis.
Interpreter exploitation.
Offensive technologies (WOOT ’10), 2010.
In USENIX conference on
[12] H. Bojinov, D. Boneh, R. Cannings, and I. Malchev. Address space
In ACM conference on Wireless
randomization for mobile devices.
Network Security (WiSec ’11), 2011.
[13] H. Chen, C. Cutler, T. Kim, Y. Mao, X. Wang, N. Zeldovich, and M. F.
Kaashoek. Security bugs in embedded interpreters. In ACM SIGOPS
Asia-Paciﬁc Workshop on Systems (APSys ’13), 2013.
[14] P. Chen, Y. Fang, B. Mao, and L. Xie. JITDefender: A defense against
JIT spraying attacks. In Future Challenges in Security and Privacy for
Academia and Industry. Springer, 2011.
[15] Y. I. Chris Rohlf. Attacking Clientside JIT Compilers. In Black Hat
USA, 2011.
[16] coolkaveh. VLC media player 2.0.4 suffers from buffer overﬂow. https:
//trac.videolan.org/vlc/ticket/7860.
[17] J. Easton-Ellett. Android 4.1 Jelly Bean Features ASLR, Making It
Much Harder To Exploit. http://www.ijailbreak.com/android/android-4-
1-jelly-bean-features-alsr.
[18] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile
phone application certiﬁcation. In ACM conference on Computer and
communications security (CCS ’09), 2009.
[19] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. Sheth. Taintdroid: An information-ﬂow tracking system for
realtime privacy monitoring on smartphones. In USENIX Symposium
on Operating Systems Design and Implementation (OSDI ’10), 2010.
[20] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study of android
In USENIX Security Symposium (Security ’11),
application security.
2011.
[21] C. Evans.
Some Random Observations on Linux ASLR.
http://scarybeastsecurity.blogspot.com/2012/03/some-random-
observations-on-linux-aslr.html, 2012.
[22] D. Fisher. Android 4.1 Jelly Bean Includes Full ASLR Implemen-
http://threatpost.com/android-41-jelly-bean-includes-full-aslr-
tation.
implementation-071612, 2012.
[23] M. Flores. Google Nexus 5 Review. http://www.techradar.com/us/
reviews/phones/mobile-phones/google-nexus-5-1194974/review.
[24] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced operating
system security through efﬁcient and ﬁne-grained address space ran-
domization. In USENIX Security Symposium (Security ’12), 2012.
[25] R. Hund, C. Willems, and T. Holz. Practical timing side channel attacks
against kernel space aslr. In IEEE Symposium on Security and Privacy
(Oakland ’13), 2013.
438
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
[26] S. Jana and V. Shmatikov. Memento: Learning secrets from process
footprints. In IEEE Symposium on Security and Privacy (Oakland ’12),
2012.
[27] S. H. Kim, D. Han, and D. H. Lee. Predictability of android openssl’s
In ACM conference on Computer
pseudo random number generator.
and communications security (CCS ’13), 2013.
your secrets from Android public resources.
Computer and communications security (CCS ’13), 2013.
In ACM conference on
[51] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization
and evolution. In IEEE Symposium on Security and Privacy (Oakland
’12), 2012.
[28] N. Kralevich.
in
https://groups.google.com/forum/#!msg/android-security-
Address Space Layout Randomization
Android.
discuss/Af71Z2QYdMo/u1miB1A9UOwJ.
[29] T. Mandt.
Attacking the iOS Kernel: A Look at
’evasi0n’.
http://blog.azimuthsecurity.com/2013/03/attacking-ios-kernel-look-at-
evasi0n.html.
[30] T. Muller. ASLR Smack & Laugh Reference. http://www-users.rwth-
aachen.de/Tilo.Mueller/ASLRpaper.pdf, Feb. 2008.
[31] J. Oberheide. A look at ASLR in Android Ice Cream Sandwich
https://www.duosecurity.com/blog/a-look-at-aslr-in-android-ice-
4.0.
cream-sandwich-4-0, .
[32] J. Oberheide.
in Android Jelly Bean
4.1. https://www.duosecurity.com/blog/exploit-mitigations-in-android-
jelly-bean-4-1, .
Exploit Mitigations
[33] L. Page. Google I/O 2013 Keynote. http://www.google.com/events/io/
2013/, 2013.
[34] P. Ratanaworabhan, V. B. Livshits, and B. G. Zorn. NOZZLE: A defense
In USENIX Security
against heap-spraying code injection attacks.
Symposium (Security ’09), 2009.
[35] G. F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically re-
turning to randomized lib(c). In Annual Computer Security Applications
Conference (ACSAC ’09), 2009.
[36] L. M. Security. Lookout Mobile Threat Report. https://www.lookout.
com/ downloads/lookout-mobile-threat-report-2011.pdf.
[37] F. J. Serna. The info leak era on software exploitation. In Black Hat
USA, 2012.
[38] A. Shabtai, Y. Fledel, U. Kanonov, Y. Elovici, S. Dolev, and C. Glezer.
Google Android: A comprehensive security assessment. Security &
Privacy, IEEE, 8(2), 2010.
[39] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh.
On the effectiveness of address-space randomization. In ACM confer-
ence on Computer and communications security (CCS ’04), 2004.
[40] S. Smalley. The Case for Security Enhanced (SE) Android. https:
//events.linuxfoundation.org/images/stories/pdf/lf abs12 smalley.pdf.
[41] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A.-R. Sadeghi. Just-in-time code reuse: On the effectiveness of ﬁne-
grained address space layout randomization.
In IEEE Symposium on
Security and Privacy (Oakland ’13), 2013.
[42] A. Sotirov and M. Dowd. Bypassing browser memory protections in
windows vista. In Black Hat USA, 2008.
[43] The PaX Team. PaX. http://pax.grsecurity.net.
[44] S. J. Vaughan-Nichols.
Pwn2Own: Down go all
http://www.zdnet.com/pwn2own-down-go-all-the-browsers-
7000012283.
the browsers.
[45] T. Vidas, D. Votipka, and N. Christin. All your droid are belong to us: a
survey of current Android attacks. In USENIX conference on Offensive
technologies (WOOT ’11), 2011.
[46] T. Vidas, D. Votipka, and N. Christin. All your droid are belong to
In USENIX conference on
us: A survey of current Android attacks.
Offensive technologies (WOOT ’11), 2011.
[47] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring:
Self-randomizing instruction addresses of legacy x86 binary code. In
ACM conference on Computer and communications security (CCS ’12),
2012.
[48] C. Wiki. The use of zygotes on Linux. https://code.google.com/p/
chromium/wiki/LinuxZygote.
[49] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor
customizations on Android security. In ACM conference on Computer
and communications security (CCS ’13), 2013.
[50] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A.
Gunter, and K. Nahrstedt. Identity, location, disease and more: Inferring
439
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply.