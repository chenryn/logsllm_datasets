### Figure 12: Android Compatibility Test Suite (CTS) Results
Morula demonstrates the same compatibility test results as Zygote. The failed test cases in both models were not related to the process creation models. For simplicity, the prefixes on test package names have been removed.

## VI. Discussion

### Security Implications for Other Zygote-Based Systems
The Zygote process creation model is not exclusive to Android; it is also employed in other systems such as Chromium OS and the Chromium browser. The rationale for using Zygote varies depending on the environment. For instance, in Linux, Chromium uses Zygote to maintain references to original binaries and libraries, allowing it to continue running without version compatibility issues after runtime updates [48]. As demonstrated, the Zygote model can serve as a potential attack surface because all child processes inherit resources, including memory layouts, from their parent process. Although Chromium primarily relies on Zygote for rendering processes, cross-attacks involving multiple rendering processes or security-related resource leaks initialized by the parent process are possible.

### Limitations of Selective Randomization
Selective randomization aims to balance security gains with performance penalties. Consequently, it does not fully protect Android from the attacks described in Section III, as it only provides unique address space layouts for selected apps. This means that a system employing selective randomization remains vulnerable to our ASLR attacks. For example, even if an app is distributed without native code components, it can still be exposed to address leak vulnerabilities while running default system libraries loaded by Zygote. Although the likelihood of such vulnerabilities is low, we recommend that device vendors deploy selective randomization only if the Morula design cannot be applied to the entire system (e.g., low-end devices with limited computing resources). The security limitation of selective randomization arises because an app still runs native code in default system libraries, even if it does not contain its own native code component. To address this, control-flow analysis can be performed on the app to determine whether it actually runs (or heavily depends on) native code.

## VII. Related Work

### ASLR as a Defense Mechanism
Address Space Layout Randomization (ASLR) has been considered an effective defense mechanism for mitigating the exploitation of security bugs by increasing diversity in the address space layout of a program [39]. ASLR-enabled systems, combined with Data Execution Prevention (DEP), have successfully mitigated attack techniques such as arbitrary code execution and return-oriented programming (ROP).

### ASLR Attacks and Defenses
As modern commodity operating systems provide ASLR/DEP by default [24, 43], attack techniques have evolved to bypass these defenses. One approach is to brute-force insufficient randomness in memory layout [30, 39]. Another method involves generating exploits based on memory layout extrapolated from leaked pointers, type confusion (heap overflow), and use-after-free bugs [35, 37]. By repeatedly abusing memory disclosures, attackers can learn the entire memory layout of a system and chain ROP gadgets on the fly [41]. Additionally, attackers may target non-randomized components of an application, such as Flash, Java, and the .NET runtime in IE8/9/10 [42, 44], which are well-known targets for ROP-gadgets to break ASLR/DEP in Windows.

With the increasing use of bytecode interpreters [13], Just-In-Time (JIT) compilation, which optimizes performance by compiling byte code to native instructions, opens new threats for breaking ASLR/DEP [11, 15]. Commonly used attack vectors, such as JavaScript, are compiled to native code via JIT, providing attackers the means to convert their bytecode to a native executable. However, these attacks are only effective in breaking specific applications, so mitigation mechanisms like anomaly detectors [14] are already deployed in commercial products [34].

Researchers have also explored methods to estimate target addresses for attacks using cache or hash collision, both in the OS kernel [25] and in web browsers [2]. Nevertheless, ASLR-enabled systems raise a high bar for attackers to compromise servers [47] and mobile devices, which encounter attacks via limited interfaces like HTTP or media streaming.

### Attacks and Defenses on Android
Common attacks on Android can be classified into two types: the first is the exploitation of underlying system components [45, 46, 51], which are privileged and separated processes in Linux. The second type involves the abuse of over-privileged application permissions [9, 19, 20, 26, 49]. According to Lookoutâ€™s Android Threat Report [36], a growing problem on Android is the repackaged trojan attack, which makes it difficult for users to distinguish between official and malicious applications. For example, 250,000 users downloaded a disguised trojan application, DroidDream [36]. Therefore, we believe that local trojan attacks will become increasingly critical for mobile users, and the ASLR solution in Morula can effectively mitigate these threats.

Although Android already includes various security features, such as UID separation and digitally signed applications [38, 40], individual security bugs in applications can seriously threaten the entire system if the ASLR problem in the default Zygote process creation model is not addressed.

### Adopting ASLR/DEP in Mobile Devices
As exploits against mobile platforms have increased, vendors outside the Android ecosystem have begun to include defensive mechanisms, even at the cost of performance. For example, iOS 4 [29] supports ASLR for applications and the kernel.

### Mitigating ASLR Problems on Android
The most relevant work to Morula is Retouching [12], a mechanism that randomizes prelinked code when deploying Android applications. Since Retouching randomizes at the time of deployment or update, it does not require direct kernel changes, providing differing memory layouts across different devices. However, Retouching has uniform address space layouts for all running apps in a device due to the Zygote process creation model, making it vulnerable to remote coordinated and local trojan attacks.

## VIII. Conclusion

In this paper, we presented a new security threat to Android's ASLR and proposed Morula as a countermeasure. We demonstrated that Zygote, Android's low-level process creation system, can severely weaken the effectiveness of ASLR, an existing and standard security mechanism. We illustrated two attack scenarios where either a remote attacker or a local trojan app can exploit the weakened ASLR and execute code through return-oriented programming. As a replacement for the insecure Zygote, Morula strengthens the weakened ASLR on Android using three key designs and optimizations: the Morula process creation model, on-demand loading of Dalvik classes, and selective randomization of app memory layouts.

We conducted a thorough evaluation, showing that Morula restores the effectiveness of ASLR on Android to the same level as on Linux, while maintaining app launch times comparable to or even better than Zygote. Morula incurs an acceptable increase in app memory usage for significantly improved security, with no obvious overhead to other resources, including battery power. Morula's design is easy to adopt and backward-compatible, ready to be merged into the open-source branch of the Android OS as well as vendor-customized branches.

## Acknowledgments

The authors would like to thank the anonymous reviewers for their valuable comments. We also thank William Enck for his thoughtful feedback, which guided the final version of this paper. We extend our gratitude to the various members of our operations staff who provided proofreading of this paper. This material is based upon work supported in part by the National Science Foundation under Grants No. CNS-1017265, CNS-0831300, and CNS-1149051, by the Office of Naval Research under Grant No. N000140911042, by the Department of Homeland Security under contract No. N66001-12-C-0133, and by the United States Air Force under Contract No. FA8650-10-C-7025. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Office of Naval Research, the Department of Homeland Security, or the United States Air Force.

## References
[References listed here as per the original text]

---

This revised version aims to improve the clarity, coherence, and professionalism of the text.