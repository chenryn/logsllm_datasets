```
$ kubectl proxy --port=8080  
```
当代理会话运行时，任何发送到`localhost:8000`的请求都将被转发到 Kubernetes API 服务器。要检查我们的`api-server`是否正在运行，让我们询问它支持的 API 版本:
```
$ curl http://localhost:8080/api/  
```
如果`api-server`正在运行并等待传入的请求，它应该会给你一个类似如下的输出:
![](img/545f3b8b-4ac9-47a8-aacd-fe5a717da62a.png)
似乎运行良好；让我们继续并利用公开的 API，从创建一个服务开始，和前面一样。
# 使用应用编程接口创建服务
首先，让我们创建一个服务清单文件。请注意，如果您在[第 8 章](08.html)、*中使用带有 Java 的 Kubernetes*创建了服务、部署和 Pods，通过使用`kubectl`，您将需要使用`kubectl`或 Kubernetes 仪表板删除它们。我们将对服务和部署使用相同的名称。当使用更大有效载荷的`curl`时，将有效载荷放在外部文件中而不是在命令行中键入更方便。我们将用作有效载荷的 JSON 文件与我们用`kubectl`创建 Pod 时使用的文件非常相似，但这次是 JSON 格式。让我们创建一个名为`service.json`的文件:
```
{
 "apiVersion": "v1",
 "kind": "Service",
 "metadata": {
 "name": "rest-example",
 "labels": {
 "app": "rest-example",
 "tier": "backend"
 }
 },
 "spec": {
 "type": "NodePort",
 "ports": [
 {
 "port": 8080
 }
 ],
 "selector": {
 "app": "rest-example",
 "tier": "backend"
 }
 }
} 
```
请注意，JSON 文件的内容基本上与我们使用 YAML 文件创建资源时使用的内容相同。是的，你可以清楚地看到`kubectl`命令是如何实现的，它只是从输入的文件中创建一个 JSON 有效载荷，完全没有幕后的魔力。
You can convert between YAML to JSON and vice-versa using one of the YAML/JSON converters available online. The Kubernetes `api-server` will accept such JSON as `Kubectl` accepts the YAML file.
准备好我们的 JSON 文件后，下一步是通过调用以下命令在集群中创建服务资源:
```
$ curl -s http://localhost:8080/api/v1/namespaces/default/services \
-XPOST -H 'Content-Type: application/json' PI:EMAIL  
```
定义好服务后，让我们创建一个部署。
# 使用应用编程接口创建部署
创建部署与创建服务非常相似，毕竟它创建的是另一种类型的 Kubernetes 资源。我们只需要一个合适的 JSON 有效载荷文件，我们将使用`POST HTTP`方法将其发送到`api-server`。我们在 JSON 中的`rest-example`部署清单如下所示:
```
{
 "apiVersion": "extensions/v1beta1",
 "kind": "Deployment",
 "metadata": {
 "name": "rest-example"
 },
 "spec": {
 "replicas": 1,
 "template": {
 "metadata": {
 "labels": {
 "app": "rest-example",
 "tier": "backend"
 }
 },
 "spec": {
 "containers": [
 {
 "name": "rest-example",
 "image": "jotka/rest-example",
 "imagePullPolicy": "IfNotPresent",
 "resources": {
 "requests": {
 "cpu": "100m",
 "memory": "100Mi"
 }
 },
 "env": [
 {
 "name": "GET_HOSTS_FROM",
 "value": "dns"
 }
 ],
 "ports": [
 {
 "containerPort": 8080
 }
 ]
 }
 ]
 }
 }
 }
}
```
让我们用`deployment.json`文件名保存文件。同样，我们现在需要做的就是将这个文件发布到`api-server`。这个过程非常类似于服务的创建，它将只是一个`POST`到不同端点的不同有效载荷。要使用`curl`从外壳创建部署，请执行以下命令:
```
$ curl -s \ http://localhost:8080/apis/extensions/v1beta1/namespaces/default/deployments -XPOST -H 'Content-Type: application/json' \
PI:EMAIL      
```
在前面的示例中，您应该注意到与部署相关的 API 命令位于另一个 API 组中:`extensions`。这就是为什么端点会有不同的`REST`路径。
在执行这两个`REST HTTP`请求之后，我们应该在集群中创建我们的服务和部署。当然，由于部署清单包含值为`1`的副本数量，因此也将创建一个 Pod。让我们通过执行以下命令来检查它是否正确:
```
$ kubectl get services
$ kubectl get deployments
$ kubectl get pods 
```
正如您在下面的截图中看到的，所有的资源都存在于我们的集群中。然而，这一次，它们是由两个简单的`HTTP POST`请求创建的，没有使用`kubectl`:
![](img/794b74ed-b19a-42c7-849b-43702d12fe1b.png)
我们之前说过，我们可以观察`kubectl`工具正在执行什么`HTTP`请求。让我们验证一下。我们将执行最后一个命令来获取 Pods 的列表，但是有额外的详细级别，如下所示:
```
$ kubectl get pods -v6  
```
输出应该类似于以下内容:
![](img/b7a86d2b-07e5-48a2-a3ca-75cd03a14f9d.png)
有一堆关于从集群缓存获取信息的日志行，但最后一行特别有趣，它包含了`kubectl`发出的实际`HTTP`请求:
```
GET https://192.168.99.100:8443/api/v1/namespaces/default/pods
```
如果您现在使用该网址运行`curl GET`命令，所有的身份验证和授权机制都将发挥作用。但是让`api-server`代理运行，我们可以通过在代理端口上执行调用来跳过授权和认证(注意`curl`默认执行`GET`方法):
```
$ curl http://localhost:8080/api/v1/namespaces/default/pods  
```
作为输出，您将得到包含集群中 Pods 详细信息的 JSON 响应。该应用编程接口正在工作，如下图所示:
![](img/6aae754c-c9b4-450f-a95f-96d793186450.png)
# 删除服务和部署
如果您决定进行一些清理，您可以通过执行`HTTP DELETE`请求来删除服务和部署，例如:
```
$ curl http://localhost:8000/ \ apis/extensions/v1beta1/namespaces/default/deployments/rest-example \ 
-XDELETE
$ curl http://localhost:8080/ \ api/v1/namespaces/default/services/rest-example -XDELETE 
```
仅仅通过查看网络文档或窥探`kubectl`调用的网址，找出正确的应用编程接口操作`REST`路径(端点)可能非常不方便。有更好的方法可以做到这一点；Kubernetes 家的开放应用编程接口规范`api-server`。让我们看看如何得到这个规范。
# 斯瓦格医生
Kubernetes `api-server`利用 OpenAPI 规范提供了可用的 API 命令列表。OpenAPI 规范为`REST`API 定义了一个标准的、与语言无关的接口，允许人类和计算机发现和理解服务的功能，而无需访问源代码、文档或通过网络流量检查。使用 Kubernetes `api-server`附带的 SwaggerUI 工具浏览 API 命令目录非常方便。您也可以使用 SwaggerUI 执行`HTTP`命令。
请注意，如果使用 Minikube 运行本地集群，默认情况下不会启用 SwaggerUI。您需要在群集启动期间使用以下命令启用它:
```
$ minikube start --extra-config=apiserver.Features.EnableSwaggerUI=true
```
让`api-server`代理仍然使用端口`8080`运行，在您的网络浏览器中访问以下主机以查看 SwaggerUI 屏幕:
```
http://localhost:8080/swagger-ui/
```
您将看到一个可用的应用编程接口命令列表，按应用编程接口分组:
![](img/93303d5f-426a-4dde-a7f2-34310c7003bd.png)
展开每个 API 部分将为您提供所有可用的端点以及每个操作的描述。SwaggerUI 是一个以清晰可读的形式探索应用编程接口的好工具。
# 摘要
可以看到，Kubernetes 公开的 API 是你的武器库中非常强大的工具。任何可以通过仪表盘或`kubectl`客户端执行的任务都作为一个 API 公开。只需利用`HTTP`调用，您几乎可以用集群做任何事情。Kubernetes 采用了 API 优先的方法，使其可编程和可扩展。正如我们所看到的，开始使用该应用编程接口很容易。我们的服务和部署创建示例可能很简单，但应该会让您了解如何试验`api-server`。使用该应用编程接口，您不仅可以使用`kubectl`从命令行创建和检索集群资源，还可以从您自己的应用、构建脚本或持续交付管道创建和检索集群资源。只有你的想象力和天空才是极限，说到天空，是时候移动到那里，看看 Kubernetes 如何在云中使用了。