---
author: NickTikhonov
category: 软件开发
comments_data:
- date: '2016-10-15 16:28:51'
  message: 等我换台新电脑再学习吧……
  postip: 219.159.104.197
  username: 绿色圣光 [Firefox 48.0|Windows 7]
- date: '2016-10-15 16:59:51'
  message: 不用的，装个 Fedora 你就可以重获新生了
  postip: 113.251.165.220
  username: OneNewLife [Chrome 53.0|Fedora]
- date: '2016-10-16 16:31:21'
  message: 哈哈，那台装着Win7的电脑可不是我的。
  postip: 219.159.104.197
  username: 绿色圣光 [Firefox 45.0|GNU/Linux]
- date: '2016-10-16 16:31:23'
  message: 哈哈，那台装着Win7的电脑可不是我的。
  postip: 219.159.104.197
  username: 绿色圣光 [Firefox 45.0|GNU/Linux]
count:
  commentnum: 4
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 18716
date: '2016-10-15 16:16:22'
editorchoice: false
excerpt: 我们将会制作一个山寨版的 Sourcerer，这是一个从 StackOverflow 查询并使用代码片段的插件。到教程结束时，你将会制作好一个将编程问题（用英语描述的）转换成获取自
  StackOverflow 的代码片段的插件
fromurl: https://github.com/blog/2231-building-your-first-atom-plugin
id: 7865
islctt: true
largepic: /data/attachment/album/201610/15/161556nz01buuwz1gq25zw.jpg
permalink: /article-7865-1.html
pic: /data/attachment/album/201610/15/161556nz01buuwz1gq25zw.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我们将会制作一个山寨版的 Sourcerer，这是一个从 StackOverflow 查询并使用代码片段的插件。到教程结束时，你将会制作好一个将编程问题（用英语描述的）转换成获取自
  StackOverflow 的代码片段的插件
tags:
- atom
- 插件
thumb: false
title: 制作你的第一个 Atom 文本编辑器插件
titlepic: true
translator: OneNewLife
updated: '2016-10-15 16:16:22'
---
![](/data/attachment/album/201610/15/161556nz01buuwz1gq25zw.jpg)
### 序言
这篇教程将会教你怎么制作你的第一个 Atom 文本编辑器的插件。我们将会制作一个山寨版的 [Sourcerer](https://github.com/NickTikhonov/sourcerer)，这是一个从 StackOverflow 查询并使用代码片段的插件。到教程结束时，你将会制作好一个将编程问题（用英语描述的）转换成获取自 StackOverflow 的代码片段的插件，像这样：
![](/data/attachment/album/201610/15/154809kzgamoaygugu9nnp.gif)
#### 教程须知
Atom 文本编辑器是用 web 技术创造出来的。我们将完全使用 JavaScript 的 EcmaScript 6 规范来制作插件。你需要熟悉以下内容：
* 使用命令行
* JavaScript 编程
* [Promises](https://developers.google.com/web/fundamentals/getting-started/primers/promises)
* [HTTP](https://atom.io/)
#### 教程的仓库
你可以跟着教程一步一步走，或者看看 [放在 GitHub 上的仓库](https://github.com/NickTikhonov/sourcefetch-guide)，这里有插件的源代码。这个仓库的历史提交记录包含了这里每一个标题。
### 开始
#### 安装 Atom
根据 [Atom 官网](https://atom.io/) 的说明来下载 Atom。我们同时还要安装上 `apm`（Atom 包管理器的命令行工具）。你可以打开 Atom 并在应用菜单中导航到 `Atom > Install Shell Commands` 来安装。打开你的命令行终端，运行 `apm -v` 来检查 `apm` 是否已经正确安装好，安装成功的话打印出来的工具版本和相关环境信息应该是像这样的：
```
apm -v
> apm  1.9.2
> npm  2.13.3
> node 0.10.40
> python 2.7.10
> git 2.7.4
```
#### 生成骨架代码
让我们使用 Atom 提供的一个实用工具创建一个新的 **package**（软件包）来开始这篇教程。
* 启动编辑器，按下 `Cmd+Shift+P`（MacOS）或者 `Ctrl+Shift+P`（Windows/Linux）来打开 命令面板   （    Command Palette    ） 。
* 搜索“Package Generator: Generate Package”并点击列表中正确的条目，你会看到一个输入提示，输入软件包的名称：“sourcefetch”。
* 按下回车键来生成这个骨架代码包，它会自动在 Atom 中打开。
如果你在侧边栏没有看到软件包的文件，依次按下 `Cmd+K` `Cmd+B`（MacOS）或者 `Ctrl+K` `Ctrl+B`（Windows/Linux）。
![](/data/attachment/album/201610/15/154924xs3id22wnynulfoy.gif)
> 
>  命令面板   （    Command Palette    ） 可以让你通过模糊搜索来找到并运行软件包。这是一个执行命令比较方便的途径，你不用去找导航菜单，也不用刻意去记快捷键。我们将会在整篇教程中使用这个方法。
> 
> 
> 
#### 运行骨架代码包
在开始编程前让我们来试用一下这个骨架代码包。我们首先需要重启 Atom，这样它才可以识别我们新增的软件包。再次打开命令面板，执行 `Window: Reload` 命令。
重新加载当前窗口以确保 Atom 执行的是我们最新的源代码。每当需要测试我们对软件包的改动的时候，就需要运行这条命令。
通过导航到编辑器菜单的 `Packages > sourcefetch > Toggle` 或者在命令面板执行 `sourcefetch:toggle` 来运行软件包的 `toggle` 命令。你应该会看到屏幕的顶部出现了一个小黑窗。再次运行这条命令就可以隐藏它。
![](/data/attachment/album/201610/15/155008b7a0pgzv8rk8rcpb.gif)
#### “toggle”命令
打开 `lib/sourcefetch.js`，这个文件包含有软件包的逻辑和 `toggle` 命令的定义。
```
toggle() {
 console.log('Sourcefetch was toggled!');
 return (
   this.modalPanel.isVisible() ?
   this.modalPanel.hide() :
   this.modalPanel.show()
 );
}
```
`toggle` 是这个模块导出的一个函数。根据模态面板的可见性，它通过一个[三目运算符](https://en.wikipedia.org/wiki/%3F:) 来调用 `show` 和 `hide` 方法。`modalPanel` 是 [Panel](https://atom.io/docs/api/v1.9.4/Panel)（一个由 Atom API 提供的 UI 元素） 的一个实例。我们需要在 `export default` 内部声明 `modalPanel` 才可以让我们通过一个实例变量 `this` 来访问它。
```
this.subscriptions.add(atom.commands.add('atom-workspace', {
  'sourcefetch:toggle': () => this.toggle()
}));
```
上面的语句让 Atom 在用户运行 `sourcefetch:toggle` 的时候执行 `toggle` 方法。我们指定了一个 [匿名函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) `() => this.toggle()`，每次执行这条命令的时候都会执行这个函数。这是[事件驱动编程](https://en.wikipedia.org/wiki/Event-driven_programming)（一种常用的 JavaScript 模式）的一个范例。
#### Atom 命令
命令只是用户触发事件时使用的一些字符串标识符，它定义在软件包的命名空间内。我们已经用过的命令有：
* `package-generator:generate-package`
* `Window:reload`
* `sourcefetch:toggle`
软件包对应到命令，以执行代码来响应事件。
### 进行你的第一次代码更改
让我们来进行第一次代码更改——我们将通过改变 `toggle` 函数来实现逆转用户选中文本的功能。
#### 改变 “toggle” 函数
如下更改 `toggle` 函数。
```
toggle() {
  let editor
  if (editor = atom.workspace.getActiveTextEditor()) {
    let selection = editor.getSelectedText()
    let reversed = selection.split('').reverse().join('')
    editor.insertText(reversed)
  }
}
```
#### 测试你的改动
* 通过在命令面板运行 `Window: Reload` 来重新加载 Atom。
* 通过导航到 `File > New` 来创建一个新文件，随便写点什么并通过光标选中它。
* 通过命令面板、Atom 菜单或者右击文本然后选中 `Toggle sourcefetch` 来运行 `sourcefetch:toggle` 命令。
更新后的命令将会改变选中文本的顺序：
![](/data/attachment/album/201610/15/155103uthil87z17eu7shz.gif)
在 [sourcefetch 教程仓库](https://github.com/NickTikhonov/sourcefetch-tutorial/commit/89e174ab6ec6e270938338b34905f75bb74dbede) 查看这一步的全部代码更改。
### Atom 编辑器 API
我们添加的代码通过用 [TextEditor API](https://atom.io/docs/api/v1.11.1/TextEditor) 来访问编辑器内的文本并进行操作。让我们来仔细看看。
```
let editor
if (editor = atom.workspace.getActiveTextEditor()) { /* ... */ }
```
头两行代码获取了 [TextEditor](https://atom.io/docs/api/latest/TextEditor) 实例的一个引用。变量的赋值和后面的代码被包在一个条件结构里，这是为了处理没有可用的编辑器实例的情况，例如，当用户在设置菜单中运行该命令时。
```
let selection = editor.getSelectedText()
```
调用 `getSelectedText` 方法可以让我们访问到用户选中的文本。如果当前没有文本被选中，函数将返回一个空字符串。
```
let reversed = selection.split('').reverse().join('')
editor.insertText(reversed)
```
我们选中的文本通过一个 [JavaScript 字符串方法](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) 来逆转。最后，我们调用 `insertText` 方法来将选中的文本替换为逆转后的文本副本。通过阅读 [Atom API 文档](https://atom.io/docs/api/latest/TextEditor)，你可以学到更多关于 TextEditor 的不同的方法。
### 浏览骨架代码
现在我们已经完成第一次代码更改了，让我们浏览骨架代码包的代码来深入了解一下 Atom 的软件包是怎样构成的。
#### 主文件
主文件是 Atom 软件包的入口文件。Atom 通过 `package.json` 里的条目设置来找到主文件的位置：
```
"main": "./lib/sourcefetch",
```
这个文件导出一个带有生命周期函数（Atom 在特定的事件发生时调用的处理函数）的对象。
* **activate** 会在 Atom 初次加载软件包的时候调用。这个函数用来初始化一些诸如软件包所需的用户界面元素的对象，以及订阅软件包命令的处理函数。
* **deactivate** 会在软件包停用的时候调用，例如，当用户关闭或者刷新编辑器的时候。
* **serialize** Atom 调用它在使用软件包的过程中保存软件包的当前状态。它的返回值会在 Atom 下一次加载软件包的时候作为一个参数传递给 `activate`。
我们将会重命名我们的软件包命令为 `fetch`，并移除一些我们不再需要的用户界面元素。按照如下更改主文件：
```
'use babel';
import { CompositeDisposable } from 'atom'
export default {
  subscriptions: null,
  activate() {
    this.subscriptions = new CompositeDisposable()
    this.subscriptions.add(atom.commands.add('atom-workspace', {
      'sourcefetch:fetch': () => this.fetch()
    }))
  },
  deactivate() {
    this.subscriptions.dispose()
  },
  fetch() {
    let editor
    if (editor = atom.workspace.getActiveTextEditor()) {
      let selection = editor.getSelectedText()
      selection = selection.split('').reverse().join('')
      editor.insertText(selection)
    }
  }
};
```
### “启用”命令
为了提升性能，Atom 软件包可以用时加载。我们可以让 Atom 在用户执行特定的命令的时候才加载我们的软件包。这些命令被称为 **启用命令**，它们在 `package.json` 中定义：
```