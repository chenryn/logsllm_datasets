Table I. Each Snappy transaction τ carries an identiﬁer of the
operation type τop (e.g., “Payment”, “Registration”, “Claim”).
Moreover, transactions marked as “Payments” also include
the address of the transacting merchant τm, a monotonically
increasing payment index τi,2 an aggregate τA of the state-
keepers’ approval signatures, and a vector of bits τq indicating
1Boneh et al.’s scheme utilises speciﬁc bilinear pairings where there is
an efﬁciently computable isomorphism between G and H which are not
implemented over Ethereum. However, Boneh et al. [36] observed that the
proof of security does still apply with respect to the more commonly used
pairings under a stronger cryptographic assumption. We assume the signature
scheme is implemented with regards to bilinear groups with no known
isomorphism.
2We note that the Snappy transaction index τi is a separate ﬁeld from
the standard Ethereum transaction nonce. Although both are monotonically
increasing counters, the Snappy index counts payments inside the Snappy
system, while the Ethereum nonce counts all transactions by the same user,
also outside the Snappy system.
6
O Aggregation: Given message m and
signatures
σ1, . . . , σn, an aggregated signature A is computed
signature as σj = H(m)xj .
as A =(cid:81)n
j=1 σj.
O Veriﬁcation: The veriﬁer considers an aggregated signa-
(cid:16)
H(m),(cid:81)n
(cid:17)
j=1 vj
.
Customers
(cid:44)→ entry
(cid:44)→ Collateral
(cid:44)→ Clearance
(cid:44)→ Finalized
(cid:44)→ entry
(cid:44)→ Hash
(cid:44)→ Signatures
(cid:44)→ Quorum
(cid:44)→ Bit
Merchants
(cid:44)→ entry
Statekeepers
(cid:44)→ entry
(cid:44)→ Allocation
C
C[c]
C[c].(cid:99)(cid:111)(cid:108)c
C[c].cl
C[c].D
C[c].D[i]
C[c].D[i].H(τ)
C[c].D[i].τA
C[c].D[i].τq
C[c].D[i].b
M
M [m]
S
S[s]
S[s].(cid:99)(cid:111)(cid:108)s[m]
Customers
Customer c entry
Customer’s collateral
Clearance index
Finalized Transactions
Entry for index i
Tx Hash
Aggregate signature
Approving parties
Sig. veriﬁed ﬂag
Merchants
Merchant m entry
Statekeepers
Statekeeper s entry
Value per merchant
TABLE II: Arbiter’s state. The arbiter smart contract maintains a
record for each customer, merchant and statekeeper.
which statekeepers contributed to the aggregate signature. τv
denotes the amount of funds in τ.
Arbiter state. The Arbiter maintains state, shown in Table II,
that consist of the following items: a Customers dictionary C
that maps customer public keys to their deposited collateral
(cid:99)(cid:111)(cid:108)c, a clearance index cl, and a dictionary D of ﬁnalized
transactions. D maps transaction index values to tuples that
contain the hash of the transaction H(τ), τA, τq, and a bit b in-
dicating whether the signature has been veriﬁed. Additionally,
the Arbiter maintains a Merchants dictionary M containing
the public keys of each registered merchant. The Statekeepers
dictionary S maps the statekeeper public keys to a tuple with
their collateral (cid:99)(cid:111)(cid:108)s and a vector d indicating how (cid:99)(cid:111)(cid:108)s is
distributed between the merchants (by default, evenly).
Customer state. Each customer c maintains an ordered list L
with its past approved transactions. We denote Sc the subset
of those transactions from L that are still pending inclusion in
the blockchain (Sc ⊆ L).
Statekeeper state. Each statekeeper maintains a list P of all
the payment intents it has approved for each customer c.
Merchant state. Each merchant maintains a table R[s] indi-
cating how much collateral of each statekeeper s it can claim.
Initially, R[s] = (cid:99)(cid:111)(cid:108)s/k for each statekeeper.
C. Registration
Customers can join and leave the system at any time, but the set
of merchants and statekeepers is ﬁxed after the initialization
(in Appendix B we discuss dynamic sets of merchants and
statekeepers).
Merchant registration. Merchant m submits a registration
request which is a transaction that calls a function of the
Arbiter contract. Once executed, the Arbiter adds a new entry
M [m] to its state, where m = τf is the merchant’s account
address (public key).
Customer registration. Customer c sends a transaction to the
Arbiter with the funds that it intents to deposit for its collateral
(cid:99)(cid:111)(cid:108)c. The Arbiter contract creates a new customer entry C[c],
the payment
3 Payment approval. Next,
intent must be
approved by a majority of the statekeepers. The merchant
forwards INTc to all statekeepers, who individually compare
it with c’s payment intents they have approved in the past
(list P in their state). If no intent with the same index τi is
found, statekeeper s appends INTc in P, computes a BLS
signature σs over INTc, and sends σs back to the merchant.
If the statekeeper ﬁnds a past approved intent from c with the
same index value, it aborts and notiﬁes the merchant.
4 Statekeeper evaluation. Upon receiving the approval sig-
natures from a majority of the statekeepers, merchant m uses
R[s] to check that each approving statekeeper s has sufﬁcient
collateral remaining to cover the current payment value τv.
In particular, the merchant veriﬁes that none of the approv-
ing statekeepers have previously approved pending payments,
whose sum together with the current payment exceeds R[s].
(Merchants can check the blockchain periodically and update
their R depending on the pending payments that got ﬁnalized
on-chain.) Recall that initially R[s] is set to (cid:99)(cid:111)(cid:108)s/k for each
statekeeper, but in case m has ﬁled a settlement claims in the
past against s, the remaining collateral allocated for m may
have been reduced. This check ensures that in case one or
more statekeepers equivocate, m is able to recover its losses
in full.
j=1
(i.e, A =(cid:81)(cid:100)(k+1)/2(cid:101)
5 Signature aggregation. If the statekeepers evaluation suc-
ceeds, m aggregates the approval signatures σ1, . . . , σ(cid:100)(k+1)/2(cid:101)
σj) and sends to customer c the resulting
aggregate A and a bit vector q indicating which statekeepers’
signatures were included in A. Otherwise, if one or more
statekeepers do not have sufﬁcient collateral to approve INTc,
the merchant can either contact additional statekeepers or
abort.
6 Transaction ﬁnalization. The customer signs and returns to
m a transaction τ with the details of INTc, as well as τto =
Arbiter, τm = m, τA = A and τq = q.
7 Payment acceptance. Merchant m ﬁrst veriﬁes the details
and the signatures of the transaction τ, and then hands over
the purchased goods or service to the customer. Finally, m
broadcasts τ to the blockchain network. (Merchants have
no incentive to withhold payments, but if this happens, the
customer can simply broadcast it after a timeout.)
8 Payment logging. Once τ is added in a block, the Arbiter
records the payment and forwards its value to merchant m
(Algorithm 1). To keep the payments inexpensive in Ethereum,
our smart contract does not verify the aggregate signature τA
during logging. Instead, it performs the expensive signature
veriﬁcation only in cases of disputes, which are expected to
be rare. In Section V, we show that such optimization is safe.
E. Claim Settlement
If a transaction does not appear in the blockchain within
a reasonable time,
the
blockchain to determine the cause of the delay. There are three
possible reasons for a transaction not getting included in the
blockchain in a timely manner:
the affected merchant may inspect
7
Fig. 3: Payment-approval protocol. Customer c initiates a payment
to merchant m, who requests a majority approval from statekeepers
s1, ..., sl. Merchant m aggregates the received responses and forwards
them back to customer c, who creates and broadcasts the ﬁnal
transaction τ transferring the funds to the merchant.
sets the customer’s collateral to τv, and initializes the clearance
index to cl = 0. The Arbiter also initializes a new dictionary
C[c].D to log the registered customer’s payments.
Statekeeper registration. The registration process for state-
keepers is similar to that of customers. However, a state-
keeper’s registration includes also a proof of knowledge for
their BLS private key xj to prevent rogue key attacks (see [38]
for details). The proof is included in the data ﬁeld of the
registration transaction and is veriﬁed by the Arbiter. Addi-
tionally, the statekeeper may also deﬁne how its collateral is
to be distributed between the merchants. The maximum value
each merchant can claim is S[s].d. We consider the case where
each statekeeper collateral (cid:99)(cid:111)(cid:108)s is equally allocated between
all k merchants, and thus each merchant can recoup losses up
to (cid:99)(cid:111)(cid:108)s/k from statekeeper s.
D. Payment Approval
The payment-approval protocol proceeds as follows (Figure 3):
1 Payment initialization. To initiate a payment, customer
c creates a payment intent INTc and sends it to merchant
m, together with its state Sc that contains a list of already
approved but still pending payments. The intent carries all the
details of the payment (e.g., sender, recipient, amount, index)
and has the same structure as normal transaction, but without
the signatures that would make it a complete valid transaction.
2 Customer evaluation. Upon reception, merchant m checks
that all the index values in the interval {1 . . . INTc[i]} appear
either in the blockchain as ﬁnalized transactions or in Sc as
approved but pending transactions. If this check is successful,
m proceeds to verify that (cid:99)(cid:111)(cid:108)c sufﬁces to compensate all of the
currently pending transactions of that customer (i.e., (cid:99)(cid:111)(cid:108)c ≥
signatures of the customer’s transactions both in Sc and in the
blockchain.
(cid:80)Sc + INTc[v]). Finally, merchant m veriﬁes the approval
Algorithm 1: Record-and-Forward. Arbiter records the transac-
tion and forwards the payment value to the merchant.
Algorithm 3: Claim-Customer. Arbiter recovers lost funds from
the customer’s collateral or returns the remaining amount.
: Arbiter (smart contract)
: Snappy transaction τ
Actor
Input
Output : None
1 c ← τf
2 if c ∈ C and τi (cid:54)∈ C[c].D then
h ← H(τf , τto, τv, τi)
C[c].D[τi] ← (cid:104)h, τA, τq, 0(cid:105)
Send(m, τv)
3
4
5
6 else
7
(cid:46) Forward the tx’s funds to merchant
Send(s, τv)
(cid:46) Return funds to sender
Algorithm 2: Claim-Settlement. Arbiter processes settlement
claim using customers’ and statekeepers’ collaterals.
Actor
Input
Output : None
: Arbiter (smart contract)
: Pending transaction τ p
Ordered list of pending transactions Tp
List of conﬂicting transaction tuples Tcnﬂ (optional)
A) then
r ← Claim-Customer(τ p, Tp)
if r > 0 then
c ← τ p
C[c].D[τi] ← (cid:104)h, τA, τq, 1(cid:105)
Claim-Statekeeper(τ p, Tcnﬂ, r)
1 if Verify(τ p
2
3
4
5
6
f
(cid:46) Log tx as processed
1. Benign congestion. A transaction may be of lower priority
for the miners compared to other transactions awarding
higher miner fees.
2. Conﬂicting transaction. Another transaction by the same
customer prevents the transaction from being included
in the blockchain (doubles-pending attack). In Ethereum,
two transactions from the same customer conﬂict when
they share the same nonce value [1].
3. Customer’s account depletion. A recent transaction left
insufﬁcient funds in the customer’s account. Ethereum
processes the transactions of each customer in increasing
nonce order, and thus transactions with greater nonce
values may be invalidated by those preceding them.
In the ﬁrst case, the merchant must simply wait and check
again later. In the latter two cases, the merchant can initiate a
settlement claim to recoup the lost value τv. Such claims are
sent to the Arbiter and include: (1) the pending transaction τ p
for which the merchant requests settlement, (2) a list Tp with
all preceding (lower index) and pending Snappy transactions,
and (3) optionally a list of conﬂicting transaction tuples Tcnﬂ.
The merchant can construct Tp from the Sc (received at
payment initialization) by removing the transactions that are
no longer pending (Tp ⊆ Sc).
Settlement overview. Algorithm 2 describes how the Arbiter
executes settlement. First, it checks the majority approval by
verifying the BLS signature aggregate τ p
A. Then, it tries to
recoup the transaction value τ p
v from the customer’s collateral
using the Claim-Customer sub-routine. If the collateral does
not sufﬁce to cover the transaction value τv, it proceeds to
claim the remaining amount from the collateral of the equiv-
ocating statekeeper using the Claim-Statekeeper sub-routine.
Finally, the contract logs τi so that no further claims from the
customer’s collateral can be made for the same index τi.
Claim-Customer sub-routine is shown in Algorithm 3. First
8
Actor
Input
Output : Residual r or ⊥
: Arbiter (smart contract)
: Pending transaction τ p
Preceding pending transactions Tp
1 c ← τ p
2 I∗ ← C[c].D
f
(cid:46) Pass by reference
/* Verify signatures of preceding non-pending
*/
txs.
if Verify(I∗[i]A) then
else
3 for ∀{i ∈ I∗|I∗[i].b = 0} do
4
I[i].b ← 1
5
6
del I∗[i]
7