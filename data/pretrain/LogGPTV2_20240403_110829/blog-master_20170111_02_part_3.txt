```  
然后执行测试程序：  
```  
[root@tencent64 ~]# ./mmap &  
[1] 19157  
0x7f1ae3635000  
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         32         93          0          0         18  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  
[root@tencent64 ~]# echo 3 > /proc/sys/vm/drop_caches  
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         32         93          0          0         18  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  
```  
我们可以看到，在程序执行期间，cached一直为18G，比之前涨了2G，并且此时这段cache仍然无法被回收。然后我们等待100秒之后程序结束。  
```  
[root@tencent64 ~]#   
[1]+  Exit 1                  ./mmap  
[root@tencent64 ~]#   
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         30         95          0          0         16  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  
```  
程序退出之后，cached占用的空间被释放。这样我们可以看到，使用mmap申请标志状态为MAP_SHARED的内存，内核也是使用的cache进行存储的。  
在进程对相关内存没有释放之前，这段cache也是不能被正常释放的。实际上，mmap的MAP_SHARED方式申请的内存，在内核中也是由tmpfs实现的。  
由此我们也可以推测，由于共享库的只读部分在内存中都是以mmap的MAP_SHARED方式进行管理，实际上它们也都是要占用cache且无法被释放的。  
#### 小结  
我们通过三个测试例子，发现Linux系统内存中的cache并不是在所有情况下都能被释放当做空闲空间用的。并且也也明确了，即使可以释放cache，也并不是对系统来说没有成本的。  
总结一下要点，我们应该记得这样几点：  
1\. 当cache作为文件缓存被释放的时候会引发IO变高，这是cache加快文件访问速度所要付出的成本。  
2\. tmpfs中存储的文件会占用cache空间，除非文件删除否则这个cache不会被自动释放。  
3\. 使用shmget方式申请的共享内存会占用cache空间，除非共享内存被ipcrm或者使用shmctl去IPC_RMID，否则相关的cache空间都不会被自动释放。  
4\. 使用mmap方法申请的MAP_SHARED标志的内存会占用cache空间，除非进程将这段内存munmap，否则相关的cache空间都不会被自动释放。  
5\. 实际上shmget、mmap的共享内存，在内核层都是通过tmpfs实现的，tmpfs实现的存储用的都是cache。  
当理解了这些的时候，希望大家对free命令的理解可以达到我们说的第三个层次。  
我们应该明白，内存的使用并不是简单的概念，cache也并不是真的可以当成空闲空间用的。  
如果我们要真正深刻理解你的系统上的内存到底使用的是否合理，是需要理解清楚很多更细节知识，并且对相关业务的实现做更细节判断的。  
我们当前实验场景是Centos 6的环境，不同版本的Linux的free现实的状态可能不一样，大家可以自己去找出不同的原因。  
当然，本文所述的也不是所有的cache不能被释放的情形。那么，在你的应用场景下，还有那些cache不能被释放的场景呢？  
### Linux是如何使用内存的？  
了解清楚这个问题是很有必要的，因为只有先知道了Linux如何使用内存，我们在能知道内存可以如何限制，以及做了限制之后会有什么问题？我们在此先例举出几个常用概念的意义：  
内存，作为一种相对比较有限的资源，内核在考虑其管理时，无非应该主要从以下出发点考虑：  
1\. 内存够用时怎么办？  
2\. 内存不够用时怎么办？  
### 当内存够用时  
当内存够用时，内核的思路是，如何尽量提高资源的利用效率，以加快系统整体响应速度和吞吐量？于是内存作为一个CPU和I/O之间的大buffer的功能就呼之欲出了。  
为此，内核设计了Buffers/Cached系统来做这个功能：  
思考题：  
Linux什么时候会将脏数据写回到外部设备(如块设备 磁盘)？这个过程如何进行人为干预？  
这足可以证明一点，以内存管理的复杂度，我们必须结合系统上的应用状态来评估系统监控命令所给出的数据，才是做评估的正确途径。如果你不这样做，那么你就可以轻而易举的得出"Linux系统好烂啊！"这样的结论。也许此时，其实是你在这个系统上跑的应用很烂的缘故导致的问题。  
### 当内存不够用时  
我们好像已经分析了一种内存不够用的状态，就是上述的大量buffer/cache把内存几乎占满的情况。但是基于Linux对内存的使用原则，这不算是不够用，但是这种状态导致IO变高了。我们进一步思考，假设系统已经清理了足够多的buffer/cache分给了内存，而进程还在嚷嚷着要内存咋办？  
此时内核就要启动一系列手段来让进程尽量在此时能够正常的运行下去。  
请注意我在这说的是一种异常状态！我之所以要这样强调是因为，很多人把内存用满了当成一种正常状态。他们认为，当我的业务进程在内存使用到压力边界的情况下，系统仍然需要保证让业务进程有正常的状态！这种想法显然是缘木求鱼了。另外我还要强调一点，系统提供的是内存管理的机制和手段，而内存用的好不好，主要是业务进程的事情，责任不能本末倒置。  
### 谁该被SWAP？  
首先是Swap机制。Swap是交换技术，当内存不够用的时候，我们可以选择性的将一块磁盘、分区或者一个文件当成交换空间，将内存上一些临时用不到的数据放到交换空间上，以释放内存资源给急用的进程。  
哪些数据可能会被交换出去呢？  
从概念上判断，如果一段内存中的数据被经常访问，那么就不应该被交换到外部设备上，因为这样的数据如果交换出去的话会导致系统响应速度严重下降。  
内存管理需要将内存区分为活跃的（Active）和不活跃的（Inactive），再加上一个进程使用的 用户空间内存映射 包括文件映射（file）和匿名映射（anon），所以就包括了Active（anon）、Inactive（anon）、Active（file）和Inactive（file）。  
你说神马？啥是文件映射（file）和匿名映射（anon）？  
匿名映射举例：进程使用malloc申请内存，或者使用mmap(MAP_ANONYMOUS的方式)申请的内存。  
文件映射举例：进程使用mmap映射文件系统上的文件，包括普通的文件，也包括临时文件系统（tmpfs）。另外，Sys V的IPC 和 POSIX的IPC （IPC是进程间通信机制，在这里主要指共享内存，信号量数组和消息队列）也都是通过文件映射方式体现在用户空间内存中的。  
匿名映射和文件映射的内存都会被算成进程的RSS。同时在cgroup的统计方法中，共享内存（通过文件映射方式为IPC而申请的内存） 和 文件缓存（file cache）都会被算成是cgroup的cache使用的总量。   
共享内存不计算在RSS中。  
```  
[root@zorrozou-pc ~]# cat /cgroup/memory/memory.stat  
cache 94429184  
rss 102973440  
rss_huge 50331648  
mapped_file 21512192  
swap 0  
pgpgin 656572990  
pgpgout 663474908  
pgfault 2871515381  
pgmajfault 1187  
inactive_anon 3497984  
active_anon 120524800  
inactive_file 39059456  
active_file 34484224  
unevictable 0  
hierarchical_memory_limit 9223372036854775807  
hierarchical_memsw_limit 9223372036854775807  
total_cache 94429184  
total_rss 102969344  
total_rss_huge 50331648  
total_mapped_file 21520384  
total_swap 0  
total_pgpgin 656572990  
total_pgpgout 663474908  
total_pgfault 2871515388  
total_pgmajfault 1187  
total_inactive_anon 3497984  
total_active_anon 120524800  
total_inactive_file 39059456  
total_active_file 34484224  
total_unevictable 0  
```  
字段解释  
Statistic|	Description  
---|---  
cache|	page cache, including tmpfs (shmem), in bytes  
rss|	anonymous and swap cache, not including tmpfs (shmem), in bytes  
mapped_file|	size of memory-mapped mapped files, including tmpfs (shmem), in bytes  
pgpgin|	number of pages paged into memory  
pgpgout|	number of pages paged out of memory  
swap|	swap usage, in bytes  
active_anon|	anonymous and swap cache on active least-recently-used (LRU) list, including tmpfs (shmem), in bytes  
inactive_anon|	anonymous and swap cache on inactive LRU list, including tmpfs (shmem), in bytes  
active_file|	file-backed memory on active LRU list, in bytes  
inactive_file|	file-backed memory on inactive LRU list, in bytes  
unevictable|	memory that cannot be reclaimed, in bytes  
hierarchical_memory_limit|	memory limit for the hierarchy that contains the memory cgroup, in bytes  
hierarchical_memsw_limit|	memory plus swap limit for the hierarchy that contains the memory cgroup, in bytes  
```
When you interpret the values reported by memory.stat, note how the various statistics inter-relate:  
active_anon + inactive_anon = anonymous memory + file cache for tmpfs + swap cache  
Therefore, active_anon + inactive_anon ≠ rss, because rss does not include tmpfs.  
active_file + inactive_file = cache - size of tmpfs  
```
这些值跟Swap有什么关系？还是刚才的问题，什么内容该被从内存中交换出去呢？  
文件cache是一定不需要swap的，因为是cache，就意味着它本身就是硬盘上的文件（当然你现在应该知道了，它也不仅仅只有文件），那么如果是硬盘上的文件，就不用swap交换出去，只要写回脏数据，保持数据一致之后清除就可以了，这就是刚才说过的缓存清楚机制。但并不是所有被标记为cache的空间都能被写回硬盘的 (比如共享内存，但是共享内存能被Swap)。  
能交换出去的内存主要包括：  
Inactive（anon 匿名映射）这部分内存。需要注意的是，内核也将共享内存作为计数统计进了Inactive（anon）中去了（是的，共享内存也可以被Swap）。  
还要补充一点，**如果内存被mlock标记加锁了，则也不会交换，这是对内存加mlock锁的唯一作用。**   
另外再说明一下，HugePages也是不会交换的。  
刚才我们讨论的这些cgroup计数，很可能会随着Linux内核的版本改变而产生变化，但是在比较长的一段时间内，我们可以这样理解。  
我们基本搞清了swap这个机制的作用效果，那么既然swap是内部设备和外部设备的数据拷贝，加一个缓存就显得很有必要，这个缓存就是swapcache，在cgroup memory.stat文件中，swapcache跟anon page被一起记录到rss中，但是不包含共享内存。  
当前的swap空间用了多少，总共多少，这些我们也可以在相关的数据中找到答案。  
以上概念中还有一些名词大家可能并不清楚其含义，比如RSS或HugePages。请自行查资料补上这些知识。为了让大家真的理解什么是RSS，请思考 (ps aux命令中显示的VSZ；RSS；cat /proc/pid/smaps中显示的：PSS) 这三个进程占用内存指标的差别？  
参考:    
[《精确度量Linux下进程占用多少内存的方法》](../201606/20160608_01.md)  
### 何时SWAP？  
搞清楚了谁该swap，那么还要知道什么时候该swap。这看起来比较简单，内存耗尽而且cache也没什么可以回收的时候就应该触发swap。其实现实情况也没这么简单，实际上系统在内存压力可能不大的情况下也会swap，这种情况并不是我们今天要讨论的范围。  
思考题：  
除了内存被耗尽的时候要swap，还有什么时候会swap？如何调整内核swap的行为？如何查看当前系统的swap空间有哪些？都是什么类型？什么是swap权重？swap权重有什么意义？  
绝大多数场景下，什么时候swap并不重要，而swap之后的事情相对却更重要。  
大多数的内存不够用，只是临时不够用，比如并发突增等突发情况，这种情况的特点是时间持续短，此时swap机制作为一种临时的中转措施，可以起到对业务进程的保护作用。  
如果没有swap，内存耗尽的结果一般都是触发oom killer，会杀掉此时积分比较高的进程。  
更严重的话，内存不够用还会触发进程D状态死锁，死锁怎么发生的呢？  
当多个进程同时要申请内存的时候，需要被干掉的积分比较高的进程很可能就是需要申请内存的进程，而这个进程本身因为正在争抢内存而导致陷入D状态，那么此时kill就可能是对它无效的。从而导致进程hang住的状态。此时既然不能KILL它，如果系统还有足够的内存，而且只是对应cgroup组的内存限制导致的，建议放大memory限制来解决。  
但是swap也不是任何时候都有很好的保护效果。如果内存申请是长期并大量的，那么交换出去的数据就会因为长时间驻留在外部设备上，导致进程调用这段内存的几率大大增加，当进程很频繁的使用它已经被交换出去的内存时，就会让整个系统处在io繁忙的状态，此时进程的响应速度会严重下降，导致整个系统夯死。对于系统管理员来说，这种情况是完全不能接受的，因为故障之后的第一要务是赶紧恢复服务，但是swap频繁使用的IO繁忙状态会导致系统除了断电重启之外，没有其它可靠手段可以让系统从这种状态中恢复回来，所以这种情况是要尽力避免的。此时，如果有必要，我们甚至可以考虑不用swap，哪怕内存过量使用被oom，或者进程D状态都是比swap导致系统卡死的情况更好处理的状态。如果你的环境需求是这样的，那么可以考虑关闭swap。  
### 进程申请内存的时候究竟会发生什么？  
刚才我们从系统宏观的角度简要说明了一下什么是buffer/cache以及swap。下面我们从一个更加微观的角度来把一个内存申请的过程以及触发机制给串联起来。本文描述的过程是基于Linux 3.10内核版本的，Linux 4.1基本过程变化不大。如果你想确认在你的系统上究竟是什么样子，请自行翻阅相关内核代码。  
进程申请内存可能用到很多种方法，最常见的就是malloc和mmap。但是这对于我们并不重要，因为无论是malloc还是mmap，或是其他的申请内存的方法，都不会真正的让内核去给进程分配一个实际的物理内存空间。真正会触发分配物理内存的行为是 **缺页异常(page fault)**。  
缺页异常就是我们可以在memory.stat中看到的total_pgfault，这种异常一般分两种，一种叫major fault，另一种叫minor fault。这两种异常的主要区别是，进程所请求的内存数据是否会引发磁盘io？如果会引发，就是一个major fault，如果不引发，那就是minor fault。就是说如果产生了major fault，这个数据基本上就意味着已经被交换到了swap空间上。  
缺页异常的处理过程大概可以整理为以下几个路径：  
首先检查要访问的虚拟地址是否合法，如果合法则继续查找和分配一个物理页，  
步骤如下：  
检查发生异常的虚拟地址在物理页表中是不是不存在？  
1\. 如果虚拟地址在物理页表中不存在，那么  
1\.1 如果请求是匿名映射，则申请置零的匿名映射内存，此时也有可能是映射了某种虚拟文件系统，比如共享内存，那么就去映射相关的内存区，或者发生COW(写时复制)申请新内存。  
1\.2 如果是文件映射，则有两种可能，一种是这个映射区是一个page cache，直接将相关page cache区映射过来即可，或者COW新内存存放需要映射的文件内容。如果page cache中不存在，则说明这个区域已经被交换到swap空间上，应该去处理swap。  
2\. 如果页表中已经存在需要映射的内存，那么  
2\.1 检查是否要对内存进行写操作，如果不写，那就直接复用，如果要写，就发生COW写时复制，此时的COW跟上面的处理过程不完全相同，在内核中，这里主要是通过do_wp_page方法实现的。  
2\.2 如果需要申请新内存，则都会通过alloc_page_vma申请新内存，而这个函数的核心方法是__alloc_pages_nodemask，也就是Linux内核著名的内存管理系统**伙伴系统**的实现。  