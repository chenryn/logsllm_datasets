private final 
try l 
this.data = data;
private vcid slcwly() throws Interruptedexception (
 public void doWrite(Object arg) throws InterruptedException ↑
 public Object doRead() throws InterruptedException 
public DefaultReadwriteStrategy(int size)
while (true)
 Thread.sleep(50);
ReaderThread 接口(ReaderThread java)
for (int i = O; i = filler.length()) {
index++;
char c = filler.charAt(index);
try f 
th:s.filler = filler;
this.data = datar
}catch (interruptedException e) {
catch 
index = 0:
while (true)
WriteThread 接口(WriteThread java)
Thread.sleep (random. nextInt (3000));
data.write[c);
Character c = nextchari);
(IaterruptedException e)
---
## Page 417
微的修改恐怕会让程序的安全性发生问题，因此需要特别注意。
当中，之前没有增加的readingReaders 会被减少，readingReaders 字段的值会变得太
字段并不会增加。
常InterruptException就会被抛出，而从readLock方法跳脱出来。这时，readingReaders
问题6-5的解答
我们再来看－次题目中所示 Bcfore/After pattern的架构。
处理 InterruptedException 是为了让程序的响应更好而必要进行的处理。但是稍
从readLock跳脱出来的线程会跳到finally那段，执行lock.readUnlockO。在这
现在，假设线程在 lock.readLock()中正在wait。这个线程被 interrupt 的话，异
在此，before任 try 之外，表示“如果在: before 的执行过程中发生异常，就不执
try i
beforell;
但是，如果线程被 interrupt．很可能会调用过多次readUnlock或writeUnlock。
如果是在范例程序中的话，可以正确执行无误。
public class Main f
import readwritelock.Data;
 finaily {
List A6-7
 after();
executeil;
 public static void mair(stringll srgs) l
new WriterThread (data,
new WriterThread(data,
new
new ReaderThread(data) -start ();
new ReaderThread(data].start();
Data data = new Jatall;
1ew
lew
new ReaaerThread(datal.start();
Main 类(Main.java)
ReaderThread(data)-start();
ReaderThread(áata).srart();
ReaderThread(data).start();
"abcdefghijklmropqrstuvwxyz") .start ();
"ABCDEFGHIJKIMNOPQRSTUVWXYZ") . Start () ;
练习问题的解答
403
---
## Page 418
问题6-7的解答
这就好比行人的信号量灯与行车的信号量灯轮流变成红灯是一样的。
理 read。 preferWriter 字段就是用来让 ReaderThread 与 WriterThread 轮流优先执行的。
为 false。结果，read 处理结束后优先进行 write 处理，在 write 处理结束后就优先处
设置为 true。此外，在 writeUnlock 中（也就是 doWrite 结束时），将 preferWriter 设置
条件的waitingWriters。然后，在readUnlock （也就是doRead 结束时）将 preferWriter
与WriterThread何者优先的标识（Flag）。preferWriter只要是true，就开始要考虑Guard
待红灯而无法前进样。
就好像一直有人要过马路，自按式交通信号灯·直有人按着，两旁的车子就一直等
就无法开始执行 deRead，因此到最后，RcaderThread 就无法开始执行 doRead。这
开始执行doRead。那种情况就是1个WriterThread在结束执行doWrite之前，其他
灯自己就变成红灯让车辆停下来，行人可以安全通过一样。
就可以避免WriterThread无法开始执行的情况：这就像当有人等待过与路时，红绿
WriterThread 的数日。当 waitingWriters > 0成立时,通过计 ReaderThread 的线程 wait,
穿越马路的意思是-样的。
WriterThread 就越来越无法执行 doWrite。这就好像马路上的车子川流不息，而无法
但是 ReaderThread 不会被设置为共享互斥，因此会一个个执行 doRead：到最后，
问题6-6的解答
会调川出 after:
的执行中断”。如果 before 放在 try 这段程序代码块中，即使中断 before 的执行，也
行 execute 与after”例如，从betore中抛出 IntcrruptedException,就可以想成是“before
范例程序的ReadWriteLock类（List 6-5）的preferWriter字段是决定ReaderThread
但是，光是考虑waitingWriters 的情况的话，下次可能变成ReaderThread 无法
范例程序的ReadWriteLock类（List6-5）的 waitingWriter字段会保持wait 中的
这个现象是因为ReaderThread的线程比 WriterThread的线程数目还多所造成的。
（2）
（1）错。
程就必须等待。
preferWriter && waitingWriters > 0 为 true 时， 后面的 ReaderThread 的线
有时候ReaderThread与 WriterThread两方的线程会在 this 上 wait，例如,
错。
有时候 ReaderThread 与 WriterThread 两方的线程会在this 上 wail。
---
## Page 419
C的文字不会混在－起，以及所有的request 结束之后，主线程才会结束，
介绍的范例程序的执行范例（见图7-2）则会随时间不同而变化。
方法。Main 类、Helper 类并没有变更的必要。
问题7-2的解答
问题7-1的解答
我们可以看到由于--个request 结束之后，下一个 request才会开始，因此A、B、
将Host 类改成如 List A7-1一-样。我们设置为在 request方法中会直接调用 handle
第
执行结果如图A7-1，此执行结果并不会因为时间不同而变化。不过，本文中所
ENL"};
BEGIN"};
public class Most 
List A7-1
X（3）如果没有从request 方法回来，就不会调用出handle方法。
○（1）每次调用出 requcst方法时，都会启动新的线程。
X
X
（5）slowly方法中，延长 sleep 时间的话，从request 方法回来的时间也会延长
pubiic void request (final int count, final char c) ↑
 privare final Helper helper = new Helperi); 
行 request 方法的线程并不会调用 slowly 方法。
slowly 方法中，即使延长 sleep 时间，从 request 方法回来的时间也不变。执
调目出 handle 方法的，是在 request方法中重新启动的线程，而非主线程。
（4）调用出handle方法，显示出文字的是主线程。
的线程是否从 request 方法返回无关。
request 方法中启动新的线程，该线程则又会调用 handle 方法。这跟一开始
Helper 类的实例只有在 Host 类的实例产生时才生成。
（2）每次调用Hl request方法时，都会生成 Helper类的实例。
rcquesi 方法中，每次都会启动新的线程，
喜
System.out.printlr("
System.out.prinrln("
helper.handle(count, c); 
更改后的 Host 类 (Host.java)
request ("" + count + "， " + c + ")
练习问题的解答
405
---
## Page 420
内部类（inner class）。
即使调用出run方法，新的线程也不会启动，因此反而变成只H上线程来执行匿名
样。之所以如此，是因为在线程启动的部分调用出的是run 方法，而非 stant 方法。
问题7-3的解答
执行结果如图A7-2 所示。
main END
000000000000000000000000000000
BBBBBRBRBBBBBBBBBBBB
AAAAAAAAAA
main BEGIN
requesL(30, C) END
reguest120,
request(20, B)
request(l0, A) BEGIN
request (30,
reguest(l0,
 handle(30, C) END
hardle(30,
handlei20,
handle{26,
handle(10,
randle(lu,
，这样的话，响应性是不会提升的。
mai: END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
BBBBBBBBBBBBBBBREBBR
AAAAAAAAAA
main EEGIN
B}
A1
request(30, C) END
reqrest(30,
request [20, ]
request(a0, A)
） BEG TN ←一个 request 结束之后、下--个 request 才会开始 
request(20,
request(i0. 
C) BEGIN
B) END
END
AJBEGIN
A) BEGIN
一所有的réquest 结束之后、
handle(30, C) END
 handle[30,
handle(20, B) BEGIN
handle(l],
handlef20，
handle(l,
与上
BEGIN
图A7-2执行结果
图A7-1执行结骐
-题用单线程得出的执行结果（见图A7-1）
C1
A)
CI BEGIN
BEGIN
BEGIN
A}ENI
A) BEGIN
BEGIN
END
END
、主线程才会结束
---
## Page 421
解答 2 ：将 HefperThread 声明为非匿名韵南部类
名内部类，程序代码的可读性也许更高也不一定。
序代码时稍微比较麻烦，因为必须要-个个整理成字段的形式。不过，比起使用
Helper 类维持范例程序的属性即可。
解答1：将HelperThread类声明为Top Level 类
问题7-4的解答
跟使用匿名内部类的情况相比，将被包含在要求中的参数传递给线程，在与程
将Host 类、HelperThrcad 类分别写成如I List A7-2、List A7-3 所示。Main 类、
写成如 List A7-4这样的话，就可以在Helper类与HelperThread 类在Host 类中r
public class HelperThread extends Thread ↑
public class Hos:
介绍两个解答范例。
List A7-3
List A7-2
public void run() [
pubiic Heiperihread(Heiper helper, int count, char c) (
private final char c;
private fina- int count;
 private fina: Helper helper;
publ:c vcid request(int count, char c)
private Helper helper - new Helper();
helper.handle(count, c);
System.ort.println ("
now HelperThread(helper, count, c).start();
System.out.println("
this.c = c;
Lhis.count - count;
this.helper = he-per:
HelperThread 类(HelperThread.java)
Host 类(Host.java)
request.(" + count + ", "+ c+") BEGIN");
练习问题的解答
---
## Page 422
408
确关系密切。但是，Host类的声明变长了变得比较不好看，这是其缺点。
进行声明。这样
+"}BEGIN"}；
public class Host {
- List A7~4
Main类保持范例文件的原样。
"）END"}；
private class HelperThread extends Thread ↑
// Inner class
private class Helper ↑
public vaid request(int count, char c) f
 private final Helper helper = new Helperi);
！！
private final int count:
private final Helper helper;
pubiic void handielint count,
Inner class
private final char cr
private void slowly()
System.out .prinlln("
new HelperThread{helper, count, c)-start();
System.out.println{"
System.out.printin("
System.out.println("");
for （int i = Q; i < count; i++) l
 System.out.println("
try [
catch (InterruptedException e) ↓
Host 类 (Host.java)
来的话，Helper 与 HelperThread 的两个类可以表现出与 Host 类的
Thread.sleep(1c0);
System.out.print(c);
slowiy();
（N （ + + '+ uno + /sanbex
 char c)
handle(" 
=
+
门
---
## Page 423
以 doService 进行实际的处理。这样一来，就可以从 service方法马上回米。
解答1：使用 Thread-Per-Message 模式
理方式。
问题7-5的解答
service 方法中启动新的线程，该新的线程则会调用 doService 这个方法。然后
这里提出4个解答范例。这4个解答的不同之处在于用户连续按下按键时的处
public class Service f
这个解答在用户连续按下按键时，会同时执行好几个线程doService（见图A7-3)。
List A7-5
public staric void service() {
private static void doService()
for (int i = 0; i < 50; i++)
System.out.print("service");
new Thread() {
}.start;
public vcid run() l
public HeiperThread(Helper helper, int count, char c) {
System.out.print(".");
 public void run(} t
解答1：连续按下按键，每次按下都会执行doService的
helper.handie(count, c);
)catch (InterruptedException e) 
try f 
Service 类(Service.java)
this.c = cr
this.helper = helper;
this.count. = counl;
Thread.sleep(l00);
doservice();
练习问题的解答
---
## Page 424
结果不会混在起。
解答 2：使用 Thread-Per-Message 模式易 Singfe Threaded Execution 模式
此项解答在用户连续按下按键多次时，按几次就会执行doService几次，输出