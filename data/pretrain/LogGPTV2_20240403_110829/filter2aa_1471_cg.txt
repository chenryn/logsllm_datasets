signature EKUs are the IUM EKU (1.3.6.1.4.1.311.10.3.37) for
internal Windows-signed enclaves or the Enclave EKU
(1.3.6.1.4.1.311.10.3.42) for all the third-party enclaves.
■    It includes an enclave configuration section (represented by an
IMAGE_ENCLAVE_CONFIG data structure), which describes
information about the enclave and which is linked to its image’s load
configuration data directory.
■    It includes the correct Control Flow Guard (CFG) instrumentation.
The enclave’s configuration section is important because it includes
important information needed to properly run and seal the enclave: the
unique family ID and image ID, which are specified by the enclave’s author
and identify the enclave binary, the secure version number and the enclave’s
policy information (like the expected virtual size, the maximum number of
threads that can run, and the debuggability of the enclave). Furthermore, the
enclave’s configuration section includes the list of images that may be
imported by the enclave, included with their identity information. An
enclave’s imported module can be identified by a combination of the family
ID and image ID, or by a combination of the generated unique ID, which is
calculated starting from the hash of the binary, and author ID, which is
derived from the certificate used to sign the enclave. (This value expresses
the identity of who has constructed the enclave.) The imported module
descriptor must also include the minimum secure version number.
The Secure Kernel offers some basic system services to enclaves through
the VBS enclave runtime DLL, Vertdll.dll, which is mapped in the enclave
address space. These services include: a limited subset of the standard C
runtime library, the ability to allocate or free secure memory within the
address range of the enclave, synchronization services, structured exception
handling support, basic cryptographic functions, and the ability to seal data.
EXPERIMENT: Dumping the enclave configuration
In this experiment, we use the Microsoft Incremental linker
(link.exe) included in the Windows SDK and WDK to dump
software enclave configuration data. Both packages are
downloadable from the web. You can also use the EWDK, which
contains all the necessary tools and does not require any
installation. It’s available at https://docs.microsoft.com/en-
us/windows-hardware/drivers/download-the-wdk.
Open the Visual Studio Developer Command Prompt through
the Cortana search box or by executing the LaunchBuildEnv.cmd
script file contained in the EWDK’s Iso image. We will analyze the
configuration data of the System Guard Routine Attestation
enclave—which is shown in Figure 9-40 and will be described later
in this chapter—with the link.exe /dump /loadconfig command:
The command’s output is large. So, in the example shown in the
preceding figure, we have redirected it to the
SgrmEnclave_secure_loadconfig.txt file. If you open the new
output file, you see that the binary image contains a CFG table and
includes a valid enclave configuration pointer, which targets the
following data:
Click here to view code image
   Enclave Configuration
                00000050 size
                0000004C minimum required config size
                00000000 policy flags
                00000003 number of enclave import 
descriptors
                0004FA04 RVA to enclave import descriptors
                00000050 size of an enclave import 
descriptor
                00000001 image version
                00000001 security version
        0000000010000000 enclave size
                00000008 number of threads
                00000001 enclave flags
                family ID : B1 35 7C 2B 69 9F 47 F9 BB C9 4F 
44 F2 54 DB 9D
                 image ID : 24 56 46 36 CD 4A D8 86 A2 F4 EC 
25 A9 72 02
      ucrtbase_enclave.dll
                 0 minimum security version
                 0 reserved
                   match type : image ID
                    family ID : 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00
                     image ID : F0 3C CD A7 E8 7B 46 EB AA 
E7 1F 13 D5 CD DE 5D
             unique/author ID : 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00
                                00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00
      bcrypt.dll
                 0 minimum security version
                 0 reserved
                   match type : image ID
                    family ID : 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00
                     image ID : 20 27 BD 68 75 59 49 B7 BE 
06 34 50 E2 16 D7 ED
             unique/author ID : 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00
                                00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00
      ...
The configuration section contains the binary image’s enclave
data (like the family ID, image ID, and security version number)
and the import descriptor array, which communicates to the Secure
Kernel from which library the main enclave’s binary can safely
depend on. You can redo the experiment with the Vertdll.dll library
and with all the binaries imported from the System Guard Routine
Attestation enclave.
Enclave lifecycle
In Chapter 5 of Part 1, we discussed the lifecycle of a hardware enclave
(SGX-based). The lifecycle of a VBS-based enclave is similar; Microsoft has
enhanced the already available enclave APIs to support the new type of VBS-
based enclaves.
Step 1: Creation
An application creates a VBS-based enclave by specifying the
ENCLAVE_TYPE_VBS flag to the CreateEnclave API. The caller should
specify an owner ID, which identifies the owner of the enclave. The enclave
creation code, in the same way as for hardware enclaves, ends up calling the
NtCreateEnclave in the kernel. The latter checks the parameters, copies the
passed-in structures, and attaches to the target process in case the enclave is
to be created in a different process than the caller’s. The MiCreateEnclave
function allocates an enclave-type VAD describing the enclave virtual
memory range and selects a base virtual address if not specified by the caller.
The kernel allocates the memory manager’s VBS enclave data structure and
the per-process enclave hash table, used for fast lookup of the enclave
starting by its number. If the enclave is the first created for the process, the
system also creates an empty secure process (which acts as a container for the
enclaves) in VTL 1 by using the CREATE_PROCESS secure call (see the
earlier section “Trustlets creation” for further details).
The CREATE_ENCLAVE secure call handler in VTL 1 performs the actual
work of the enclave creation: it allocates the secure enclave key data
structure (SKMI_ENCLAVE), sets the reference to the container secure
process (which has just been created by the NT kernel), and creates the
secure VAD describing the entire enclave virtual address space (the secure
VAD contains similar information to its VTL 0 counterpart). This VAD is
inserted in the containing process’s VAD tree (and not in the enclave itself).
An empty virtual address space for the enclave is created in the same way as
for its containing process: the page table root is filled by system entries only.
Step 2: Loading modules into the enclave
Differently from hardware-based enclaves, the parent process can load only
modules into the enclave but not arbitrary data. This will cause each page of
the image to be copied into the address space in VTL 1. Each image’s page in
the VTL 1 enclave will be a private copy. At least one module (which acts as
the main enclave image) needs to be loaded into the enclave; otherwise, the
enclave can’t be initialized. After the VBS enclave has been created, an
application calls the LoadEnclaveImage API, specifying the enclave base
address and the name of the module that must be loaded in the enclave. The
Windows Loader code (in Ntdll.dll) searches the specified DLL name, opens
and validates its binary file, and creates a section object that is mapped with
read-only access right in the calling process.
After the loader maps the section, it parses the image’s import address
table with the goal to create a list of the dependent modules (imported, delay
loaded, and forwarded). For each found module, the loader checks whether
there is enough space in the enclave for mapping it and calculates the correct
image base address. As shown in Figure 9-40, which represents the System
Guard Runtime Attestation enclave, modules in the enclave are mapped
using a top-down strategy. This means that the main image is mapped at the
highest possible virtual address, and all the dependent ones are mapped in
lower addresses one next to each other. At this stage, for each module, the
Windows Loader calls the NtLoadEnclaveData kernel API.
Figure 9-40 The System Guard Runtime Attestation secure enclave (note
the empty space at the base of the enclave).
For loading the specified image in the VBS enclave, the kernel starts a
complex process that allows the shared pages of its section object to be
copied in the private pages of the enclave in VTL 1. The
MiMapImageForEnclaveUse function gets the control area of the section
object and validates it through SKCI. If the validation fails, the process is
interrupted, and an error is returned to the caller. (All the enclave’s modules
should be correctly signed as discussed previously.) Otherwise, the system
attaches to the secure system process and maps the image’s section object in
its address space in VTL 0. The shared pages of the module at this time could
be valid or invalid; see Chapter 5 of Part 1 for further details. It then commits
the virtual address space of the module in the containing process. This
creates private VTL 0 paging data structures for demand-zero PTEs, which
will be later populated by the Secure Kernel when the image is loaded in
VTL 1.
The LOAD_ENCLAVE_MODULE secure call handler in VTL 1 obtains
the SECURE_IMAGE of the new module (created by SKCI) and verifies
whether the image is suitable for use in a VBS-based enclave (by verifying
the digital signature characteristics). It then attaches to the secure system
process in VTL 1 and maps the secure image at the same virtual address
previously mapped by the NT kernel. This allows the sharing of the
prototype PTEs from VTL 0. The Secure Kernel then creates the secure VAD
that describes the module and inserts it into the VTL 1 address space of the
enclave. It finally cycles between each module’s section prototype PTE. For
each nonpresent prototype PTE, it attaches to the secure system process and
uses the GET_PHYSICAL_PAGE normal call to invoke the NT page fault
handler (MmAccessFault), which brings in memory the shared page. The
Secure Kernel performs a similar process for the private enclave pages,
which have been previously committed by the NT kernel in VTL 0 by
demand-zero PTEs. The NT page fault handler in this case allocates zeroed
pages. The Secure Kernel copies the content of each shared physical page
into each new private page and applies the needed private relocations if
needed.
The loading of the module in the VBS-based enclave is complete. The
Secure Kernel applies the SLAT protection to the private enclave pages (the
NT kernel has no access to the image’s code and data in the enclave),
unmaps the shared section from the secure system process, and yields the
execution to the NT kernel. The Loader can now proceed with the next
module.
Step 3: Enclave initialization
After all the modules have been loaded into the enclave, an application
initializes the enclave using the InitializeEnclave API, and specifies the
maximum number of threads supported by the enclave (which will be bound
to threads able to perform enclave calls in the containing process). The
Secure Kernel’s INITIALIZE_ENCLAVE secure call’s handler verifies that
the policies specified during enclave creation are compatible with the policies
expressed in the configuration information of the primary image, verifies that
the enclave’s platform library is loaded (Vertdll.dll), calculates the final 256-
bit hash of the enclave (used for generating the enclave sealed report), and
creates all the secure enclave threads. When the execution control is returned
to the Windows Loader code in VTL 0, the system performs the first enclave
call, which executes the initialization code of the platform DLL.
Step 4: Enclave calls (inbound and outbound)
After the enclave has been correctly initialized, an application can make an
arbitrary number of calls into the enclave. All the callable functions in the
enclave need to be exported. An application can call the standard
GetProcAddress API to get the address of the enclave’s function and then use
the CallEnclave routine for transferring the execution control to the secure
enclave. In this scenario, which describes an inbound call, the NtCallEnclave
kernel routine performs the thread selection algorithm, which binds the
calling VTL 0 thread to an enclave thread, according to the following rules:
■    If the normal thread was not previously called by the enclave
(enclaves support nested calls), then an arbitrary idle enclave thread is
selected for execution. In case no idle enclave threads are available,
the call blocks until an enclave thread becomes available (if specified
by the caller; otherwise the call simply fails).
■    In case the normal thread was previously called by the enclave, then
the call into the enclave is made on the same enclave thread that
issued the previous call to the host.
A list of enclave thread’s descriptors is maintained by both the NT and
Secure Kernel. When a normal thread is bound to an enclave thread, the
enclave thread is inserted in another list, which is called the bound threads
list. Enclave threads tracked by the latter are currently running and are not
available anymore.
After the thread selection algorithm succeeds, the NT kernel emits the
CALLENCLAVE secure call. The Secure Kernel creates a new stack frame
for the enclave and returns to user mode. The first user mode function
executed in the context of the enclave is RtlEnclaveCallDispatcher. The
latter, in case the enclave call was the first one ever emitted, transfers the
execution to the initialization routine of the VSM enclave runtime DLL
(Vertdll.dll), which initializes the CRT, the loader, and all the services
provided to the enclave; it finally calls the DllMain function of the enclave’s
main module and of all its dependent images (by specifying a
DLL_PROCESS_ATTACH reason).
In normal situations, where the enclave platform DLL has been already
initialized, the enclave dispatcher invokes the DllMain of each module by
specifying a DLL_THREAD_ATTACH reason, verifies whether the specified
address of the target enclave’s function is valid, and, if so, finally calls the
target function. When the target enclave’s routine finishes its execution, it
returns to VTL 0 by calling back into the containing process. For doing this,
it still relies on the enclave platform DLL, which again calls the
NtCallEnclave kernel routine. Even though the latter is implemented slightly
differently in the Secure Kernel, it adopts a similar strategy for returning to
VTL 0. The enclave itself can emit enclave calls for executing some function
in the context of the unsecure containing process. In this scenario (which
describes an outbound call), the enclave code uses the CallEnclave routine
and specifies the address of an exported function in the containing process’s
main module.
Step 5: Termination and destruction
When termination of an entire enclave is requested through the
TerminateEnclave API, all threads executing inside the enclave will be forced
to return to VTL 0. Once termination of an enclave is requested, all further
calls into the enclave will fail. As threads terminate, their VTL1 thread state
(including thread stacks) is destroyed. Once all threads have stopped
executing, the enclave can be destroyed. When the enclave is destroyed, all
remaining VTL 1 state associated with the enclave is destroyed, too
(including the entire enclave address space), and all pages are freed in VTL 0.
Finally, the enclave VAD is deleted and all committed enclave memory is
freed. Destruction is triggered when the containing process calls VirtualFree
with the base of the enclave’s address range. Destruction is not possible
unless the enclave has been terminated or was never initialized.
 Note
As we have discussed previously, all the memory pages that are mapped
into the enclave address space are private. This has multiple implications.
No memory pages that belong to the VTL 0 containing process are
mapped in the enclave address space, though (and also no VADs
describing the containing process’s allocation is present). So how can the
enclave access all the memory pages of the containing process?
The answer is in the Secure Kernel page fault handler
(SkmmAccessFault). In its code, the fault handler checks whether the
faulting process is an enclave. If it is, the fault handler checks whether the
fault happens because the enclave tried to execute some code outside its
region. In this case, it raises an access violation error. If the fault is due to
a read or write access outside the enclave’s address space, the secure page
fault handler emits a GET_PHYSICAL_PAGE normal service, which
results in the VTL 0 access fault handler to be called. The VTL 0 handler
checks the containing process VAD tree, obtains the PFN of the page
from its PTE—by bringing it in memory if needed—and returns it to VTL
1. At this stage, the Secure Kernel can create the necessary paging
structures to map the physical page at the same virtual address (which is
guaranteed to be available thanks to the property of the enclave itself) and
resumes the execution. The page is now valid in the context of the secure
enclave.
Sealing and attestation
VBS-based enclaves, like hardware-based enclaves, support both the sealing
and attestation of the data. The term sealing refers to the encryption of
arbitrary data using one or more encryption keys that aren’t visible to the
enclave’s code but are managed by the Secure Kernel and tied to the machine
and to the enclave’s identity. Enclaves will never have access to those keys;
instead, the Secure Kernel offers services for sealing and unsealing arbitrary
contents (through the EnclaveSealData and EnclaveUnsealData APIs) using
an appropriate key designated by the enclave. At the time the data is sealed, a
set of parameters is supplied that controls which enclaves are permitted to
unseal the data. The following policies are supported:
■    Security version number (SVN) of the Secure Kernel and of the
primary image No enclave can unseal any data that was sealed by a
later version of the enclave or the Secure Kernel.
■    Exact code The data can be unsealed only by an enclave that maps
the same identical modules of the enclave that has sealed it. The
Secure Kernel verifies the hash of the Unique ID of every image
mapped in the enclave to allow a proper unsealing.
■    Same image, family, or author The data can be unsealed only by an
enclave that has the same author ID, family ID, and/or image ID.
■    Runtime policy The data can be unsealed only if the unsealing
enclave has the same debugging policy of the original one
(debuggable versus nondebuggable).
It is possible for every enclave to attest to any third party that it is running
as a VBS enclave with all the protections offered by the VBS-enclave
architecture. An enclave attestation report provides proof that a specific
enclave is running under the control of the Secure Kernel. The attestation
report contains the identity of all code loaded into the enclave as well as
policies controlling how the enclave is executing.
Describing the internal details of the sealing and attestation operations is
outside the scope of this book. An enclave can generate an attestation report
through the EnclaveGetAttestationReport API. The memory buffer returned
by the API can be transmitted to another enclave, which can “attest” the
integrity of the environment in which the original enclave ran by verifying
the attestation report through the EnclaveVerifyAttestationReport function.
System Guard runtime attestation
System Guard runtime attestation (SGRA) is an operating system integrity
component that leverages the aforementioned VBS-enclaves—together with a
remote attestation service component—to provide strong guarantees around
its execution environment. This environment is used to assert sensitive
system properties at runtime and allows for a relying party to observe
violations of security promises that the system provides. The first
implementation of this new technology was introduced in Windows 10 April
2018 Update (RS4).
SGRA allows an application to view a statement about the security posture
of the device. This statement is composed of three parts:
■    A session report, which includes a security level describing the
attestable boot-time properties of the device
■    A runtime report, which describes the runtime state of the device
■    A signed session certificate, which can be used to verify the reports
The SGRA service, SgrmBroker.exe, hosts a component
(SgrmEnclave_secure.dll) that runs in a VTL 1 as a VBS enclave that
continually asserts the system for runtime violations of security features.
These assertions are surfaced in the runtime report, which can be verified on
the backend by a relying part. As the assertions run in a separate domain-of-
trust, attacking the contents of the runtime report directly becomes difficult.
SGRA internals
Figure 9-41 shows a high-level overview of the architecture of Windows
Defender System Guard runtime attestation, which consists of the following
client-side components:
■    The VTL-1 assertion engine: SgrmEnclave_secure.dll
■    A VTL-0 kernel mode agent: SgrmAgent.sys
■    A VTL-0 WinTCB Protected broker process hosting the assertion
engine: SgrmBroker.exe
■    A VTL-0 LPAC process used by the WinTCBPP broker process to
interact with the networking stack: SgrmLpac.exe
Figure 9-41 Windows Defender System Guard runtime attestation’s
architecture.
To be able to rapidly respond to threats, SGRA includes a dynamic
scripting engine (Lua) forming the core of the assertion mechanism that
executes in a VTL 1 enclave—an approach that allows frequent assertion
logic updates.
Due to the isolation provided by the VBS enclave, threads executing in
VTL 1 are limited in terms of their ability to access VTL 0 NT APIs.
Therefore, for the runtime component of SGRA to perform meaningful work,
a way of working around the limited VBS enclave API surface is necessary.
An agent-based approach is implemented to expose VTL 0 facilities to the