情。适合在后台运行的命令有f i n d、费时的打印作业、费时的排序及一些s h e l l脚本。在后台运
行作业时要当心：需要用户交互的命令不要放在后台执行，因为这样你的机器就会在那里傻
等。
不过，作业在后台运行一样会将结果输出到屏幕上，干扰你的工作。如果放在后台运行
的作业会产生大量的输出，最好使用下面的方法把它的输出重定向到某个文件中：
command >out.file 2>&1 &
在上面的例子中，所有的标准输出和错误输出都将被重定向到一个叫做 out.file 的文件中。
当你成功地提交进程以后，就会显示出一个进程号，可以用它来监控该进程，或杀死它。
3.3.1 向后台提交命令
现在我们运行一个f i n d命令，查找名为“s r m . c o n f”的文件，并把所有标准输出和错误输
出重定向到一个叫作f i n d . d t的文件中：
在上面的例子中，在我们成功提交该命令之后，系统给出了它的进程号 2 7 0 1 5。
当该作业完成时，按任意键（一般是回车键）就会出现一个提示：
这里还有另外一个例子，有一个叫做 p s 1的脚本，它能够截断和清除所有的日志文件，我
把它放到后台去执行：
3.3.2 用ps命令查看进程
当一个命令在后台执行的时候，可以用提交命令时所得到的进程号来监控它的运行。在
前面的例子中，我们可以按照提交p s 1时得到的进程号，用p s命令和g r e p命令列出这个进程：
如果系统不支持ps x命令，可以用：
记住，在用p s命令列出进程时，它无法确定该进程是运行在前台还是后台。
3.3.3 杀死后台进程
如果想杀死后台进程可以使用k i l l命令。当一个进程被放到后台运行时， s h e l l会给出一个
加入java编程群：524621833
29
第3章 后台执行命令
下载
进程号，我们可以根据这个进程号，用k i l l命令杀死该进程。该命令的基本形式为：
kill -signal [process_number]
现在暂且不要考虑其中的各种不同信号；我们会在后面的章节对这一问题进行介绍。
在杀进程的时候，执行下面的命令(你的进程号可能会不同)并按回车键。系统将会给出相
应的信息告诉用户进程已经被杀死。
如果系统没有给出任何信息，告诉你进程已经被杀死，那么不妨等一会儿，也许系统正
在杀该进程，如果还没有回应，就再执行另外一个 k i l l命令，这次带上一个信号选项：
如果用上述方法提交了一个后台进程，那么在退出时该进程将会被终止。为了使后台进
程能够在退出后继续运行，可以使用n o h u p命令，下面我们就介绍这一命令。
3.4 nohup命令
如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用
n o h u p命令。该命令可以在你退出帐户之后继续运行相应的进程。 N o h u p就是不挂起的意思( n o
hang up)。
该命令的一般形式为：
nohup command &
3.4.1 使用nohup命令提交作业
如果使用n o h u p命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名
为n o h u p . o u t的文件中，除非另外指定了输出文件：
nohup command > myout.file 2>&1
在上面的例子中，输出被重定向到m y o u t . f i l e文件中。
让我们来看一个例子，验证一下在退出帐户后相应的作业是否能够继续运行。我们先提
交一个名为p s 1的日志清除进程：
现在退出该s h e l l，再重新登录，然后执行下面的命令：
我们看到，该脚本还在运行。如果系统不支持ps x命令，使用ps -ef|grep ps1命令。
3.4.2 一次提交几个作业
如果希望一次提交几个命令，最好能够把它们写入到一个 s h e l l脚本文件中，并用n o h u p命
令来执行它。例如，下面的所有命令都用管道符号连接在一起；我们可以把这些命令存入一
加入java编程群：524621833
30
第一部分 shell
下载
个文件，并使该文件可执行。
现在让它可执行：
$ chmod 744 quarterend
我们还将该脚本的所有输出都重定向到一个名为q t r. o u t的文件中。
3.5 小结
本章中所讨论的工具主要是有关后台运行作业的。有时我们必须要对大文件进行大量更
改，或执行一些复杂的查找，这些工作最好能够在系统负荷较低时执行。
创建一个定时清理日志文件或完成其他特殊工作的脚本，这样只要提交一次，就可以每
天晚上运行，而且无需你干预，只要看看相应的脚本日志就可以了。 C r o n和其他工具可以使
系统管理任务变得更轻松。
加入java编程群：524621833
下载
第4章 文件名置换
当你在使用命令行时，有很多时间都用来查找你所需要的文件。 S h e l l提供了一套完整的
字符串模式匹配规则，或者称之为元字符，这样你就可以按照所要求的模式来匹配文件。还
可以使用字符类型来匹配文件名。在命令行方式下，使用元字符更为快捷，所以在本章我们
只介绍这部分内容。
在本章我们将讨论：
• 匹配文件名中的任何字符串。
• 匹配文件名中的单个字符。
• 匹配文件名中的字母或数字字符。
下面就是这些特殊字符：
* 匹配文件名中的任何字符串，包括空字符串。
？ 匹配文件名中的任何单个字符。
[...] 匹配[ ]中所包含的任何字符。
[!...] 匹配[ ]中非感叹号！之后的字符。
当s h e l l遇到上述字符时，就会把它们当作特殊字符，而不是文件名中的普通字符，这样
用户就可以用它们来匹配相应的文件名。
4.1 使用*
使用星号*可以匹配文件名中的任何字符串。在下面的例子中，我们给出文件名模式a p p *，
它的意思是文件名以a p p开头，后面可以跟随任何字符串，包括空字符串：
*也可以用在文件名模式的开头，在下面的例子中， * . d o c匹配所有以. d o c结尾的 文件名：
*还可以用在文件名的当中，在下面的例子中， c l * . s e d用于匹配所有以c l开头、后面跟任
何字符串、最后以. s e d结尾的文件名：
在使用c d命令切换路径时，使用星号还可以省去输入整个路径名的麻烦，下面给出一个
这样的例子：
加入java编程群：524621833
32
第一部分 shell
下载
4.2 使用？
使用可以匹配文件名中的任何单个字符。在下面的例子中，我们列出文件名以任意两个
字符开头，接着是R，后面跟任何字符的文件：
在下面的例子中，我们列出文件名以 c o n f开头、中间是任意两个字符、最后以 . l o g结尾的
文件：
在下面的例子中，f ? ? * s匹配所有以f开头、中间是任意两个字符、后面跟随任意字符串、
并以s结尾的文件名：
4.3 使用[...]和[!...]
使用[ . . . ]可以用来匹配方括号[ ]中的任何字符。在这一方法中，还可以使用一个横杠 -来连
接两个字母或数字，以此来表示一个范围。在下面的例子中，列出了以 i或o开头的文件名：
为了匹配所有以l o g .开头、后面跟随一个数字、然后可以是任意字符串的文件名，可以用
l o g . [ 0 - 9 ] *，其中[ 0 - 9 ]表示任意单个数字，星号*代表了其他字符：
下面的例子和刚才的有所不同，使用 [ ! 0 - 9 ] *来表示非数字开头的字符串，其中 !是非的意
思：
下面的例子中，列出了所有以LPS开头、中间可以是任何两个字符，最后以1结尾的文件名：
加入java编程群：524621833
33
第4章 文件名置换
下载
下面的例子中，列出了所有以L P S开头、中间可以是任何两个字符，后面跟随一个非数字
字符、然后是任意字符串的文件名：
为了列出所有以大写字母开头的文件名，可以用：
$ ls [A-Z]*
为了列出所有以小写字母开头的文件名，可以用：
$ ls [a-z]*
为了列出所有以数字开头的文件名，可以用：
$ ls [0-9]*
为了列出所有以 . 开头的文件名（隐含文件，例如. p r o f i l e、. r h o s t s、. h i s t o r y等等），可以
用：
$ ls .*
4.4 小结
使用元字符可以大大减少你在查找文件名上的工作量。这是一种非常有效的模式匹配方
法，在后面的章节中，我们还将在讨论正则表达式的时候对文本处理中所涉及到的元字符进
行更为详尽的讨论。
加入java编程群：524621833
下载
第5章 shell输入与输出
在s h e l l脚本中，可以用几种不同的方式读入数据：可以使用标准输入—缺省为键盘，或
者指定一个文件作为输入。对于输出也是一样：如果不指定某个文件作为输出，标准输出总
是和终端屏幕相关联。如果所使用命令出现了什么错误，它也会缺省输出到屏幕上，如果不
想把这些信息输出到屏幕上，也可以把这些信息指定到一个文件中。
大多数使用标准输入的命令都指定一个文件作为标准输入。如果能够从一个文件中读取
数据，何必要费时费力地从键盘输入呢？
本章我们将讨论以下内容：
• 使用标准输入、标准输出及标准错误。
• 重定向标准输入和标准输出。
本章全面讨论了s h e l l对数据和信息的标准输入、标准输出，对重定向也做了一定的介绍。
5.1 echo
使用e c h o命令可以显示文本行或变量，或者把字符串输入到文件。它的一般形式为：
echo string
e c h o命令有很多功能，其中最常用的是下面几个：
\c 不换行。
\f 进纸。
\t 跳格。
\n 换行。
如果希望提示符出现在输出的字符串之后，可以用：
上面的命令将会有如下的显示：
其中“□”是光标。
如果想在输出字符之后，让光标移到下一行，可以用：
$ echo "The red pen ran out of ink"
还可以用e c h o命令输出转义符以及变量。在下面的例子中，你可以让终端铃响一声，显
示出$ H O M E目录，并且可以让系统执行 t t y命令(注意，该命令用键盘左上角的符号，法语中
的抑音符引起来，不是单引号，)。
如果是LINUX系统，那么......
必须使用- n选项来禁止echo命令输出后换行：
加入java编程群：524621833
35
第5章 s h e l l输入与输出
下载
(续)
$ echo -n "What is your name :"
必须使用-e选项才能使转义符生效：
如果希望在e c h o命令输出之后附加换行，可以使用\ n选项：
运行时会出现如下输出：
还可以在e c h o语句中使用跳格符，记住别忘了加反斜杠\：
如果是LINUX系统，那么...
别忘了使用- e选项才能使转义符生效：
如果想把一个字符串输出到文件中，使用重定向符号 >。在下面的例子中一个字符串被重
定向到一个名为m y f i l e的文件中：
$ echo "The log files have all been done"> myfile
或者可以追加到一个文件的末尾，这意味着不覆盖原有的内容：
$ echo "$LOGNAME carried them out at `date`">>myfile
现在让我们看一下m y f i l e文件中的内容：
初涉s h e l l的用户常常会遇到的一个问题就是如何把双引号包含到 e c h o命令的字符串中。
引号是一个特殊字符，所以必须要使用反斜杠 \来使s h e l l忽略它的特殊含义。假设你希望使用
e c h o命令输出这样的字符串：“/ d e v / r m t 0”，那么我们只要在引号前面加上反斜杠\即可：
$ echo "\"/dev/rmt0"\"
" / d e v / r m t 0 "
5.2 read
可以使用r e a d语句从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。如果只
加入java编程群：524621833
36
第一部分 shell