### 后台运行命令

#### 适合后台运行的命令
适合在后台运行的命令包括 `find`、耗时的打印作业、长时间的排序任务以及一些 shell 脚本。需要注意的是，任何需要用户交互的命令都不应放在后台执行，因为这会导致系统等待用户的输入。

#### 输出重定向
即使是在后台运行的任务，其输出也会显示在终端上，从而干扰你的工作。如果后台任务会产生大量输出，建议使用以下方法将输出重定向到文件中：
```bash
command > out.file 2>&1 &
```
在这个例子中，所有的标准输出和错误输出都会被重定向到名为 `out.file` 的文件中。成功提交进程后，系统会显示一个进程号，这个进程号可以用来监控或终止该进程。

##### 示例：向后台提交命令
现在我们来运行一个 `find` 命令，查找名为“srm.conf”的文件，并将所有标准输出和错误输出重定向到一个叫作 `find.dt` 的文件中：
```bash
find / -name "srm.conf" > find.dt 2>&1 &
```
在成功提交命令后，系统会显示一个进程号（例如 27015）。

当作业完成时，按任意键（通常是回车键）会出现提示信息。另一个例子是将一个名为 `ps1` 的脚本（用于截断和清除所有日志文件）放到后台去执行：
```bash
./ps1 > ps1.out 2>&1 &
```

#### 使用 `ps` 命令查看进程
当一个命令在后台执行时，可以使用提交命令时获得的进程号来监控它的运行。例如，我们可以用 `ps` 和 `grep` 命令列出这个进程：
```bash
ps -ef | grep [process_number]
```
如果系统不支持 `ps x` 命令，可以使用：
```bash
ps -ef
```
请注意，在使用 `ps` 命令列出进程时，它无法确定该进程是运行在前台还是后台。

#### 终止后台进程
要终止后台进程，可以使用 `kill` 命令。基本形式为：
```bash
kill -signal [process_number]
```
对于简单的终止操作，可以使用：
```bash
kill [process_number]
```
如果系统没有响应，可以尝试发送更强硬的信号：
```bash
kill -9 [process_number]
```

#### 使用 `nohup` 命令
如果你希望在退出账户后继续运行某个进程，可以使用 `nohup` 命令。`nohup` 的意思是“不挂起” (no hang up)。该命令的一般形式为：
```bash
nohup command &
```
默认情况下，`nohup` 会将所有输出重定向到一个名为 `nohup.out` 的文件中，除非指定了其他输出文件：
```bash
nohup command > myout.file 2>&1
```

##### 示例：使用 `nohup` 提交作业
假设我们要提交一个名为 `ps1` 的日志清除进程：
```bash
nohup ./ps1 > ps1.out 2>&1 &
```
然后退出 shell 并重新登录，再执行以下命令确认进程是否仍在运行：
```bash
ps -ef | grep ps1
```

#### 一次提交多个作业
如果希望一次提交多个命令，最好将它们写入一个 shell 脚本文件，并使用 `nohup` 命令来执行。例如：
```bash
#!/bin/bash
# 将多个命令放入一个脚本文件
command1
command2
...
```
使脚本可执行：
```bash
chmod 744 script.sh
```
并将其输出重定向到一个文件：
```bash
nohup ./script.sh > qtr.out 2>&1
```

### 小结
本章讨论了如何在后台运行作业。通过这些工具，可以在系统负荷较低时执行耗时的任务，如大文件修改或复杂查找。创建定时清理日志文件或其他特殊工作的脚本，可以每天自动运行，无需人工干预，只需查看脚本日志即可。Cron 等工具可以使系统管理任务更加轻松。