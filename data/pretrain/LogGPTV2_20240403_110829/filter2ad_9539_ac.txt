  * HashData()函数计算出hash值。
  * 判断原buffer长度是否够，如果够，则直接在原buffer中data后添加hash值；否则申请新的buf，并将data和hash值拷贝过去。
  * 判断hash算法是否是3DES 或者 AES，如果是，则调用EncryptOrDecryptData() 函数。
我们首先来看一下HashData函数：
    internal static byte[] HashData(byte[] buf, byte[] modifier, int start, int length)
    {
        EnsureConfig();
        if (s_config.Validation == MachineKeyValidation.MD5)
            return HashDataUsingNonKeyedAlgorithm(null, buf, modifier, start, length, s_validationKey);
        if (_UseHMACSHA) {
            byte [] hash = GetHMACSHA1Hash(buf, modifier, start, length);
            if (hash != null)
                return hash;
        }
        if (_CustomValidationTypeIsKeyed) {
            return HashDataUsingKeyedAlgorithm(KeyedHashAlgorithm.Create(_CustomValidationName),
                                               buf, modifier, start, length, s_validationKey);
        } else {
            return HashDataUsingNonKeyedAlgorithm(HashAlgorithm.Create(_CustomValidationName),
                                                  buf, modifier, start, length, s_validationKey);
        }
    }
这里有几个特殊的标志位：s_config.Validation、_UseHMACSHA、_CustomValidationTypeIsKeyed，用来决定进入哪个函数生成hash。
s_config.Validation 应当是web.config 中设置的签名算法。
而另外两个标志则源自于 InitValidationAndEncyptionSizes() 函数里根据签名算法进行的初始化设置：
            private void InitValidationAndEncyptionSizes()
            {
                _CustomValidationName = ValidationAlgorithm;
                _CustomValidationTypeIsKeyed = true;
                switch(ValidationAlgorithm)
                {
                case "AES":
                case "3DES":
                    _UseHMACSHA = true;
                    _HashSize = SHA1_HASH_SIZE;
                    _AutoGenValidationKeySize = SHA1_KEY_SIZE;
                    break;
                case "SHA1":
                    _UseHMACSHA = true;
                    _HashSize = SHA1_HASH_SIZE;
                    _AutoGenValidationKeySize = SHA1_KEY_SIZE;
                    break;
                case "MD5":
                    _CustomValidationTypeIsKeyed = false;
                    _UseHMACSHA = false;
                    _HashSize = MD5_HASH_SIZE;
                    _AutoGenValidationKeySize = MD5_KEY_SIZE;
                    break;
                case "HMACSHA256":
                    _UseHMACSHA = true;
                    _HashSize = HMACSHA256_HASH_SIZE;
                    _AutoGenValidationKeySize = HMACSHA256_KEY_SIZE;
                    break;
                case "HMACSHA384":
                    _UseHMACSHA = true;
                    _HashSize = HMACSHA384_HASH_SIZE;
                    _AutoGenValidationKeySize = HMACSHA384_KEY_SIZE;
                    break;
                case "HMACSHA512":
                    _UseHMACSHA = true;
                    _HashSize = HMACSHA512_HASH_SIZE;
                    _AutoGenValidationKeySize = HMACSHA512_KEY_SIZE;
                    break;
                default:
                    ...
可以看到，只有MD5签名算法将 _UseHMASHA设置为false，其他算法都将其设置为true。除此之外，还根据签名算法设置_HashSize
为相应hash长度。所以计算MD5 hahs时进入 HashDataUsingNonKeyedAlgorithm()函数，计算其他算法hash时进入
GetHMACSHA1Hash() 函数。
我们先看使用MD5签名算法时进入的 HashDataUsingNonKeyedAlgorithm() 函数：
    private static byte[] HashDataUsingNonKeyedAlgorithm(HashAlgorithm hashAlgo, byte[] buf, byte[] modifier,
                                                         int start, int length, byte[] validationKey)
    {
        int     totalLength = length + validationKey.Length + ((modifier != null) ? modifier.Length : 0);
        byte [] bAll        = new byte[totalLength];
        Buffer.BlockCopy(buf, start, bAll, 0, length);
        if (modifier != null) {
            Buffer.BlockCopy(modifier, 0, bAll, length, modifier.Length);
        }
        Buffer.BlockCopy(validationKey, 0, bAll, length, validationKey.Length);
        if (hashAlgo != null) {
            return hashAlgo.ComputeHash(bAll);
        } else {
            byte[] newHash = new byte[MD5_HASH_SIZE];
            int hr = UnsafeNativeMethods.GetSHA1Hash(bAll, bAll.Length, newHash, newHash.Length);
            Marshal.ThrowExceptionForHR(hr);
            return newHash;
        }
    }
这里的modifier 的来源我们稍后再议，其长度一般为4个字节。HashDataUsingNonKeyedAlgorithm() 函数流程如下：
  * 申请一块新的内存，其长度为data length + validationkey.length + modifier.length
  * 将data，modifier，validationkey 拷贝到新分配的内存里。特殊的是，modifier 和 vavlidationkey 都是从紧挨着data的地方开始拷贝，这就导致了validationkey 会 覆盖掉modifier。所以真正的内存分配为： data + validationkey + '\x00'*modifier.length
  * 根据MD5算法设置hash长度，即newHash。关于这一点，代码中有各种算法产生hash值的长度设定：
      private const int MD5_KEY_SIZE          = 64;
      private const int MD5_HASH_SIZE         = 16;
      private const int SHA1_KEY_SIZE         = 64;
      private const int HMACSHA256_KEY_SIZE       = 64;
      private const int HMACSHA384_KEY_SIZE       = 128;
      private const int HMACSHA512_KEY_SIZE       = 128;
      private const int SHA1_HASH_SIZE        = 20;
      private const int HMACSHA256_HASH_SIZE      = 32;
      private const int HMACSHA384_HASH_SIZE      = 48;
      private const int HMACSHA512_HASH_SIZE      = 64;
各种算法对应的Hash长度分别为 MD5:16 SHA1:20 MACSHA256:32 HMACSHA384:48 HMACSHA512:64,
全都不同。
  * 调用UnsafeNativeMethods.GetSHA1Hash() 函数进行hash计算。该函数是从webengine4.dll 里导入的一个函数。第一次看到这里，我有一些疑问，为什么MD5算法要调用GetSHA1Hash函数呢？这个疑问先保留。我们先看其他算法是如何生成hash的。
计算其他算法的hash时调用了一个自己写的GetHMACSHA1Hash() 函数，其实现如下：
    private static byte[] GetHMACSHA1Hash(byte[] buf, byte[] modifier, int start, int length) {
        if (start  buf.Length)
            throw new ArgumentException(SR.GetString(SR.InvalidArgumentValue, "start"));
        if (length  buf.Length)
            throw new ArgumentException(SR.GetString(SR.InvalidArgumentValue, "length"));
        byte[] hash = new byte[_HashSize];
        int hr = UnsafeNativeMethods.GetHMACSHA1Hash(buf, start, length,
                                                     modifier, (modifier == null) ? 0 : modifier.Length,
                                                     s_inner, s_inner.Length, s_outer, s_outer.Length,
                                                     hash, hash.Length);
        if (hr == 0)
            return hash;
        _UseHMACSHA = false;
        return null;
    }
可以看到，其内部直接调用的UnsafeNativeMethods.GetHMACSHA1Hash()
函数，该函数也是从webengine4.dll里导入的一个函数。和之前看生成MD5
hash值时有一样的疑问，为什么是GetHMACSHA1HAsh？为什么多种算法都进入这一个函数？根据他们参数的特点，而且之前看到各个算法生成hash的长度不同，我们可以猜测，或许是该函数内部根据hash长度来选择使用什么算法。
把 webengine4.dll 拖进ida里。查看GetSHA1Hash() 函数和 GetHMACSHA1Hash() 函数，特点如下：
GetHMACSHA1Hash:
二者都进入了GetAlgorithmBasedOnHashSize() 函数，看来我们的猜测没错，确实是通过hash长度来选择算法。
### 6\. EncryptOrDecryptData 加密解密函数
我们之前看到，无论是开启加密的情况下，还是采用AES\3DES签名算法的情况下，都会进入
MachineKeySection.EncryptOrDecryptData() 函数，那么该函数内部是怎么样的流程呢？
先来看一下该函数的声明和注释：
    internal static byte[] EncryptOrDecryptData(bool fEncrypt, byte[] buf, byte[] modifier, int start, int length, bool useValidationSymAlgo, bool useLegacyMode, IVType ivType, bool signData)
    /* This algorithm is used to perform encryption or decryption of a buffer, along with optional signing (for encryption)
     * or signature verification (for decryption). Possible operation modes are:
     * 
     * ENCRYPT + SIGN DATA (fEncrypt = true, signData = true)
     * Input: buf represents plaintext to encrypt, modifier represents data to be appended to buf (but isn't part of the plaintext itself)
     * Output: E(iv + buf + modifier) + HMAC(E(iv + buf + modifier))
     * 
     * ONLY ENCRYPT DATA (fEncrypt = true, signData = false)
     * Input: buf represents plaintext to encrypt, modifier represents data to be appended to buf (but isn't part of the plaintext itself)
     * Output: E(iv + buf + modifier)
     * 
     * VERIFY + DECRYPT DATA (fEncrypt = false, signData = true)
     * Input: buf represents ciphertext to decrypt, modifier represents data to be removed from the end of the plaintext (since it's not really plaintext data)
     * Input (buf): E(iv + m + modifier) + HMAC(E(iv + m + modifier))
     * Output: m
     * 
     * ONLY DECRYPT DATA (fEncrypt = false, signData = false)
     * Input: buf represents ciphertext to decrypt, modifier represents data to be removed from the end of the plaintext (since it's not really plaintext data)
     * Input (buf): E(iv + plaintext + modifier)
     * Output: m
     * 
     * The 'iv' in the above descriptions isn't an actual IV. Rather, if ivType = IVType.Random, we'll prepend random bytes ('iv')
     * to the plaintext before feeding it to the crypto algorithms. Introducing randomness early in the algorithm prevents users
     * from inspecting two ciphertexts to see if the plaintexts are related. If ivType = IVType.None, then 'iv' is simply
     * an empty string. If ivType = IVType.Hash, we use a non-keyed hash of the plaintext.
     * 
     * The 'modifier' in the above descriptions is a piece of metadata that should be encrypted along with the plaintext but
     * which isn't actually part of the plaintext itself. It can be used for storing things like the user name for whom this
     * plaintext was generated, the page that generated the plaintext, etc. On decryption, the modifier parameter is compared
     * against the modifier stored in the crypto stream, and it is stripped from the message before the plaintext is returned.
     * 
     * In all cases, if something goes wrong (e.g. invalid padding, invalid signature, invalid modifier, etc.), a generic exception is thrown.
     */
注释开头说明：该函数用于加密/解密，可选择的进行签名/校验。一共有4中情况：加密+签名、只加密、解密+校验、只解密。重点是其中的加密+签名、解密+校验。
  * 加密+签名：fEncrypt = true, signData = true 
输入：待加密的原始数据，modifier
输出：E(iv + buf + modifier) + HMAC(E(iv + buf + modifier))
（上述公式中E表示加密，HMAC表示签名）
  * 解密+校验：fEncrypt = false, signData = true 
输入：带解密的加密数据，modifier，buf 即为上面的 E(iv + m + modifier) + HMAC(E(iv + m +
modifier))
输出：m
老实说，只看注释，我们似乎已经可以明白该函数是如何进行加密和签名的了，操起python
就可以学习伪造加密的viewstate了（开玩笑）。不过我们还是看一下他的代码：
    internal static byte[] EncryptOrDecryptData(bool fEncrypt, byte[] buf, byte[] modifier, int start, int length, bool useValidationSymAlgo, bool useLegacyMode, IVType ivType, bool signData)
该函数有9个参数：
  * 第1个参数 fEncrypt 表示是加密还是解密，true为加密，false 为解密；
  * 第2~5个参数 buf、modifier、start、length 为与原始数据相关；
  * 第6个参数 useValidationSymAlgo 表示加密是否使用与签名相同的算法；
  * 第7个参数useLegacyMode 与自定义算法有关，一般为false；
  * 第8个参数 ivType与加密中使用的初始向量iv 有关，根据注释，旧的 IPType.Hash 已经被去除，现在默认使用IPType.Random；
  * 第9个参数 signData 表示是否签名/校验。
关于第6个参数 useValidationSymAlgo 有一些细节要说：
我们知道，在Serialize 函数下有两种情况会进入 EncryptOrDecryptData 函数：
（1）由于web.config 配置中开启加密功能，直接进入 EncryptOrDecryptData() 函数：
此时EncryptOrDecryptData () 参数有5个。
（2）在进入GetEncodeData() 函数后，由于使用了AES/3DES 签名算法，导致再次进入 EncryptOrDecryptData() 函数:
此时EncryptOrDecryptData () 参数有6个。
二者参数个数不同，说明是进入了不同的重载函数。
细细观察会发现，由于使用了AES/3DES签名算法导致进入 EncryptOrDecryptData () 时，第6个参数
useValidationSymAlgo 为true。意义何在呢？因为先进入GetEncodedData()
函数，说明没有开启加密功能，此时由于使用的是AES/3DES签名算法，导致需要在签名后再次EncryptOrDecryptData ()
函数。进入EncryptOrDecryptData()
就需要决定使用什么加密算法。所以第6个参数为true，表示加密使用和签名同样的算法。另外多说一句，这种情况下会有两次签名，在GetEncodedData()
里一次，进入EncryptOrDecryptData() 后又一次（后面会看到）。
下面代码将有关解密和校验的操作隐去，只介绍加密与签名的部分。