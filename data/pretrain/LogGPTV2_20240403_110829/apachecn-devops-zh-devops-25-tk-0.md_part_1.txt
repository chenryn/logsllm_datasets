# 零、前言
Kubernetes 可能是我们知道的最大的项目。它是巨大的，然而许多人认为经过几周或几个月的阅读和练习，他们知道关于它的一切。它比这大得多，而且它的增长速度超过了我们大多数人的能力。你在 Kubernetes 收养方面走了多远？
根据我的经验，采用 Kubernetes 有四个主要阶段。
在第一阶段，我们创建一个集群，了解 Kube API 和不同类型资源(例如，Pods、入口、部署、状态集等)的复杂性。一旦我们对 Kubernetes 的工作方式感到满意，我们就开始部署和管理我们的应用。到这个阶段结束时，我们可以喊“**看看我，我的生产 Kubernetes 集群中有东西在运行，没有什么东西爆炸！**“我在*的 DevOps 2.3 工具包:Kubernetes*([https://amzn.to/2GvzDjy](https://amzn.to/2GvzDjy))中解释了这一阶段的大部分内容。
第二阶段通常是自动化。一旦我们熟悉了 Kubernetes 的工作方式，并且我们正在运行生产负载，我们就可以转向自动化。我们经常采用某种形式的连续交付(CD)或持续部署(CDP)。我们用我们需要的工具创建 Pods，我们构建我们的软件和容器映像，我们运行测试，我们部署到生产中。当我们完成时，我们的大部分过程都是自动化的，我们不再对 Kubernetes 执行手动部署。我们可以说**东西在工作，我甚至没有碰我的键盘**。在*DevOps 2.4 工具包:持续部署到 Kubernetes*([https://amzn.to/2NkIiVi](https://amzn.to/2NkIiVi))中，我尽我所能提供了一些关于 CD 和 CDP 的见解。
在许多情况下，第三阶段与监控、警报、日志记录和扩展相关。事实上，我们可以在 Kubernetes 中运行(几乎)任何东西，并且它将尽最大努力使其容错和高度可用，这并不意味着我们的应用和集群是防弹的。我们需要监控集群，我们需要能够通知我们潜在问题的警报。当我们发现有问题时，我们需要能够查询整个系统的指标和日志。只有当我们知道问题的根本原因时，我们才能解决问题。在像 Kubernetes 这样高度动态的分布式系统中，这并不像看起来那么容易。
此外，我们需要学习如何扩展(和缩小)一切。应用的 Pods 数量应该随着时间的推移而变化，以适应流量和需求的波动。节点也应该扩展以满足我们应用的需求。
Kubernetes 已经拥有提供度量和日志可见性的工具。它允许我们创建自动缩放规则。然而，我们可能会发现，仅靠 Kuberentes 是不够的，我们可能需要用额外的流程和工具来扩展我们的系统。这一阶段是本书的主题。当你读完它的时候，你将能够说**你的集群和应用是真正动态和有弹性的，并且它们需要最少的人工参与。我们将努力使我们的系统自适应。**
我提到了第四阶段。亲爱的读者，这就是一切。最后一个阶段主要是跟上 Kubernetes 提供的所有其他好东西。它是关于遵循它的路线图和调整我们的过程，以获得每一个新版本的好处。
最终，你可能会陷入困境，需要帮助。或者你可能想对这本书的内容写一篇评论或评论。请加入*devo ps20*([http://slack.devops20toolkit.com/](http://slack.devops20toolkit.com/))Slack 工作区，发表您的想法、提问或参与讨论。如果你更喜欢一对一的交流，可以用 Slack 给我发私信或者发邮件给`PI:EMAIL`。我写的所有书对我来说都很珍贵，我希望你有一个好的阅读体验。那段经历的一部分是选择联系我。不要害羞。
请注意，这本书和以前的书一样，是自己出版的。我认为在作者和读者之间没有中间人是最好的方法。它让我写得更快，更新书的频率更高，和你有更直接的交流。你的反馈是这个过程的一部分。不管你是在只写了几章还是所有章节的时候购买了这本书，想法是它永远不会真正完成。久而久之，它将需要更新，以便与技术或流程的变化保持一致。如果可能的话，我会尽量保持更新，并在有意义的时候发布更新。最终，事情可能会发生如此大的变化，以至于更新不再是一个好的选择，这将是一本全新的书被需要的标志。**只要继续得到你的支持，我会一直写下去。**
# 概观
我们将探索运行 Kubernetes 集群所需的一些技能和知识。我们将处理那些在一开始没有被研究过的主题，但是只有在我们对 Kubernetes 的核心特性感到厌烦之后，比如 Pod、复制集、部署、入口、持久卷等等。在我们学习了基础知识和自动化所有过程之后，我们将掌握我们经常钻研的学科。我们将探索**监控**、**报警**、**记录**、**自动缩放**以及旨在使我们的集群**具有弹性**、**自给自足**、**自适应**的其他主题。
# 观众
我假设您熟悉 Kubernetes，并且不需要解释 Kube API 是如何工作的，也不需要解释主节点和工作节点之间的区别，尤其不需要解释像 Pods、Ingress、Deployments、StatefulSets、ServiceAccounts 等资源和构造。如果不是你，这个内容可能太高级了，我建议你先去看看*DevOps 2.3 工具包:Kubernetes*([https://amzn.to/2GvzDjy](https://amzn.to/2GvzDjy))。希望你已经是 Kubernetes 的忍者学徒了，对如何让你的集群更有弹性、可伸缩、自适应感兴趣。如果是这样的话，这本书就是给你的。继续读。
# 要求
本书假设您已经知道如何操作 Kubernetes 集群，因此我们不会详细讨论如何创建集群，也不会探讨 Pods、Deployments、StatefulSets 和其他常用的 Kubernetes 资源。如果这个假设不正确，你可能想先阅读*DevOps 2.3 工具包:Kubernetes* 。
除了基于知识的假设，还有一些技术要求。如果你是 **Windows 用户**，请运行 **Git Bash** 的所有示例。它将允许您通过终端运行与 MacOS 和 Linux 用户相同的命令。Git Bash 是在 [Git](https://git-scm.com/download/win) 安装期间设置的。如果您还没有它，请重新运行 Git 安装程序。
由于我们将使用 Kubernetes 集群，我们将需要**kube CTL**([https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/))。我们将在集群中运行的大多数应用将使用**Helm**([https://helm.sh/](https://helm.sh/))安装，因此请确保您也安装了客户端。最后，还要安装**jq**([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))。这是一个帮助我们格式化和过滤 JSON 输出的工具。
最后，我们需要一个 Kubernetes 集群。所有的例子都是使用 **Docker for Desktop** 、 **minikube** 、**Google Kubernetes Engine(GKE)**、**Amazon Elastic Container Service for Kubernetes(EKS)**、**Azure Kubernetes Service(AKS)**进行测试的。我将提供需求(例如，节点数量、中央处理器、内存、入口等。)对于每一种 Kubernetes 口味。
您可以自由地将这些经验应用于任何经过测试的 Kubernetes 平台，或者您可以选择使用不同的平台。没有很好的理由说明为什么这本书的例子不能适用于所有的 Kubernetes 风味。你可能需要到处调整它们，但我相信这不会成为问题。
如果您遇到任何问题，请通过*devo ps20*([http://slack.devops20toolkit.com/](http://slack.devops20toolkit.com/))空闲工作区或通过给我发送电子邮件来联系我。我会尽力帮忙的。如果您确实使用了 Kuberentes 集群，而不是我测试的集群，我将非常感谢您在扩展列表方面的帮助。
在您选择 Kubernetes 口味之前，您应该知道并非所有的功能都是随处可用的。如果本地集群基于桌面的 Docker**或 T2 的 minikube** ，扩展节点是不可能的，因为两者都是单节点集群。其他集群可能无法使用更具体的功能。我将利用这个机会比较不同的平台，并为您提供额外的见解，如果您正在评估使用哪个 Kubernetes 发行版以及在哪里托管它，您可能会想要使用这些见解。或者，您可以选择使用本地集群运行某些章节，并仅针对不在本地运行的部分切换到多节点集群。通过这种方式，您可以在很短的时间内在云中拥有一个集群，从而节省一些成本。
如果你不确定选择哪种 Kubernetes 风味，选择 GKE。它是目前市场上最先进、功能最丰富的托管 Kubernetes。另一方面，如果你已经习惯了 EKS 或阿克苏，它们或多或少也是可以的。这本书里的大部分，如果不是全部的话，都是可行的。最后，您可能更喜欢在本地运行集群，或者您正在使用不同的(可能是本地的)Kubernetes 平台。在这种情况下，您将了解您缺少什么，以及需要在“标准产品”的基础上构建哪些东西来实现相同的结果。
# 下载示例代码文件
你可以从你在[www.packt.com](http://www.packt.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[www.packtpub.com/support](https://www.packtpub.com/support)并注册将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  登录或注册[www.packt.com](http://www.packt.com)。
2.  选择“支持”选项卡。
3.  点击代码下载。
4.  在搜索框中输入图书的名称，并按照屏幕指示进行操作。
下载文件后，请确保使用最新版本的解压缩文件夹:
*   视窗系统的 WinRAR/7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip/PeaZip
这本书的代码包也在的 GitHub 上托管。如果代码有更新，它将在现有的 GitHub 存储库中更新。