considered security sensitive, such as getpid and
gettimeofday. Operations that modify process
state in safe ways of no interest for delegation pur-
poses, such as signal and ulimit, are also permit-
ted to execute normally.
• fork handling and thread support: The fork sys-
tem call requires special handling. When the client in-
vokes fork, the emulation library takes control and
notiﬁes the agent. The agent forks a second agent
process and replies to the client with a UNIX do-
main socket descriptor for communicating with the
new agent. Then the client calls into the kernel to
perform the real client fork. Afterward, each client
closes one of the descriptors.
As for thread support, with a ﬁltering architecture,
sandboxes must provide extra code to prevent shared
state from leading to races as discussed in section 5.1.
In contrast, delegating sandboxes must provide extra
code to share state between agents where necessary.
Ostia needs such extra code only for thread support.
In particular, the current working directory and ﬁle cre-
ation mask can be shared between multiple threads in
a single program. When one of these threads sends
a chdir request to its agent, the change in current
working directory must be reﬂected in all of the agents.
The agents cannot themselves be threads that share a
single current working directory. Use of chdir is an
essential part of checking ﬁle system policy, and serial-
izing those uses across the agents would induce a per-
formance hit. Instead, each agent checks between pro-
cessing requests whether another agent has changed
the current working directory and if so updates its own.
The emulation library also needs support for threads.
Threads can share a ﬁle descriptor table, so a differ-
ent ﬁle descriptor must be used to connect each thread
in a process to its agent. Each thread needs a piece
of thread-speciﬁc data that designates the ﬁle descrip-
tor for its agent. We support this type of thread-local
storage through mod ostia.
Concurrency strategy: Whereas a ﬁltering sandbox can
easily be implemented using a multiplexing or multi-
threaded concurrency model, Ostia exhibits a multithread-
ing model, i.e. one agent process per sandboxed process,
from necessity.
In a delegating sandbox the agent both
checks policy and executes approved operations. Under the
multiplexing model it would serialize both policy checking
and operation execution, which can cause correct programs
to fail. Consider a pair of producer-consumer client pro-
cesses that communicate over sockets with sendmsg and
recvmsg, operations that must be checked for policy and
can block in the server. If the consumer process runs and
blocks waiting for input from the producer, it will wait for-
ever because the producer will never get a chance to run.
This limitation does not appear to be a liability. In our
experience, a multithreading sandbox is simpler and cleaner
than the multiplexing equivalent, because each agent or
monitor only manages state for a single process. Others
have reported the same observation [36]. Also, a multiplex-
ing sandbox can impose signiﬁcant performance restrictions
under high load due to serializing all requests on a single
thread. This is examined further in section 5.5.
5 Evaluation
In this section we evaluate and compare Ostia and J2,
considering the implications of these results for ﬁltering and
delegating architectures in general.
5.1 Security
conditions: Time-of-check/time-of-use
Race
(“TOC-
TOU”) races [7] are a signiﬁcant potential problem for
sandboxing systems. These races occur when a policy
engine performs a check to authorize a system call that
relies on an object that a name (e.g. a ﬁle system path)
references, but the name changes to refer to a different
object before the operating system executes the call. This
can occur when the name is stored as some type of shared
state, e.g. when the policy engine checks that a given ﬁle
name refers to an allowed ﬁle, but the ﬁle name changes
to refer to a symbolic link before the operating system
executes it. Races arise from three kinds of state:
1. Inter-thread shared state: State shared between mul-
tiple threads within a process, e.g. entire process mem-
ory space, user and group identity, current working di-
rectory, and ﬁle descriptor space.
2. Inter-process shared state: State shared between
multiple threads or processes, e.g. memory shared with
System V shared memory and mmap mechanisms.
3. Globally shared state: State shared by all processes
on the system, e.g. the ﬁle system.
The key property of all of these forms of shared state
is that any of them can change asynchronously from the
perspective of a given thread. Put another way, regardless
of whether a given thread is scheduled, these aspects of its
state can change.
Race conditions in ﬁltering sandboxes: Race conditions
are a signiﬁcant problem in sandboxes based on a ﬁlter-
ing architecture, and no system, including J2, has fully ad-
dressed this problem. An in-depth study of this problem has
been presented elsewhere [16]. We will review the main is-
sues here to provide adequate context and appreciate the
importance of this problem in ﬁltering sandboxes.
When threads in a process share a single ﬁle descriptor
table, the object a descriptor number references can change
between check and use. Similarly, if two threads share a
current working directory, then a thread’s current working
directory can be changed by a second thread between check
and use. There does not appear to be any simple way to
ﬁx these races in ﬁltering sandboxes. J2 simply disallows
execution of multithreaded programs.
Shared memory (inter-thread and inter-process) results
in argument races,
i.e. races where an argument could
change after it is checked by the policy engine, but before it
is used by the system call. This is a problem for non-scalar
system call arguments such as struct sockaddrs and
pathnames, that typically reside in the sandboxed process’s
memory until they are used by the system call. As described
in section 3, J2’s solution, the same as that adopted by many
other ﬁltering sandboxes, is to marshal non-scalar argu-
ments into protected kernel memory. This provides an ade-
quate solution to the argument race problem, but it comes at
a the cost of simplicity. The code to perform this function-
ality accounts for about 25% of mod janus’s code.
Globally shared state in the ﬁle system is also a trouble-
some source of races. These race conditions come in two
types: symbolic link races and relative path races.
Symbolic link races occur because any component in a
path may be replaced by a symbolic link between time of
check and time of use. Currently we are not aware of any
implemented solution to this problem in a ﬁltering sandbox.
All published proposed solutions rely on canonicalizing the
path name before it is checked, either in user space or in the
kernel. This does not solve the problem; any component of
the path can still change to a symbolic link, no matter how
many times canonicalization is done.
Relative path races, the second type of ﬁle system race,
can occur when the parent directory of a process’s current
working directory changes and a relative path is in use.
Canonicalizing ﬁle names before use does solve this kind
of race, as this forces the use of an absolute path. J2 per-
forms this action and is thus immune to relative path races.
Clearly, solving some types of race conditions, possi-
bly all on a piecemeal basis, is possible in a ﬁltering sand-
box. However, it comes at a great cost to implementation
complexity, primarily in the kernel where it is least desir-
able. The complexity of these races and their solutions
casts signiﬁcant doubt on the security of these systems. It
was many years after the ﬁrst ﬁltering-based sandboxing pa-
per [18] that all of the aforementioned races were brought
to light [16]. We may still be overlooking others.
Ameliorating races with delegation: Delegation alone
does not prevent all races. However, it does prevent some,
by placing inter-process/inter-thread state under control of
the agent by default. It also easily facilitates the prevention
of remaining races by giving the agent control over how re-
sources are accessed. Let us consider how delegation allows
each class of race to be easily addressed in Ostia:
• Inter-thread and inter-process shared state races:
In a delegating sandbox, sensitive system calls are per-
formed by the agent, so the ﬁle descriptor space, cur-
rent working directory, etc., used by sensitive system
calls are held exclusively by the agent. Most races,
such as argument races, are no longer a concern be-
cause an external process cannot modify this state.
One concern is whether an agent could be tricked into
inducing a race because of state shared between mul-
tiple agent processes. As we noted in section 4.2, this
is not a signiﬁcant issue because agents only share the
current working directory and ﬁle creation mask be-
tween multiple threads, explicitly and in a race-free
fashion.
• Globally shared state:
In some sense the primary
problem that ﬁltering sandboxes face is that they are
not in control of how programs gain access to re-
sources. Programs should be able to access resources
in a race-free fashion, but the responsibility for ensur-
ing race-free accesses falls upon the application pro-
grammer.
If all programs carefully avoided ﬁle races, then a ﬁl-
tering sandbox would not need to worry about race
conditions. For example, if all open calls in Linux
were done with the “no follow” ﬂag (which prevents
symlink expansion in the last component of a path)
then a ﬁltering sandbox would not have to worry about
the last component of a path being a symlink, one pre-
condition for a race free open. Of course, not all pro-
grams make their calls following this convention.
In a delegating sandbox we can address this problem
because the sandbox makes all accesses to resources
itself. Thus accesses can be performed in a manner
respecting OS conventions for providing race-free op-
erations on the ﬁle system. Another way to view this is
that the agent is an active proxy which normalizes calls
to the OS to put them into a form which will provide a
predictable result.
If the delegating sandbox naively opened ﬁles it would
be prone to race conditions,
just like poorly writ-
ten programs in today’s systems that suffer from the
normal user-level ﬁle system races such as /tmp
races [7]. By respecting OS conventions for safe ﬁle
access, Ostia is able to obtain the descriptor to a known
ﬁle, in particular one permitted by policy, while being
safe from race conditions.
Code complexity: There is no simple way to summarize
the security of a system. A popular starting point for com-
parison is lines of code. The counts given below are total
lines of code (LOC) as determined by Brian Marick’s lc
program [26], rounded to the nearest 100. Code is written
in C except where otherwise speciﬁed.
First, consider user-level code. The Ostia agent consists
of 3,200 lines total. Of this, 700 comprise the policy en-
gine, and the remaining 2,500 lines are the system core.
The J2 monitor is effectively 3,000 LOC (1,400 LOC in the
policy engine and 1,600 LOC in the core, excluding 1,000
additional lines to pretty-print system calls for policy de-
bugging). Thus, there is little difference in size between
the user-level portions of these two systems, or between
them and the original Janus prototype, which was just un-
der 3,000 lines of code [36]. The Ostia emulation library is
1,000 lines of additional code, but this is not part of the TCB
(trusted computing base) as it runs in the address space of
the untrusted application.
The J2 kernel module mod janus consists of 1,400
LOC in C and 11 LOC in x86 assembly. The Ostia ker-
nel module mod ostia is only 200 LOC in C and 5 LOC
in x86 assembly. The difference in complexity in the ker-
nel portion of J2 and Ostia point to signiﬁcant differences
in the impact of each tool on a system’s security. A kernel
bug would potentially render the entire system vulnerable,
as opposed to a bug in a user-space portion which would
generally only render the sandbox ineffective.
While a difference of 1,200 LOC may not seem signiﬁ-
cant, we found the complexity difference between these two
modules to be considerable. The difference in development
time for these two modules was a few days for mod ostia,
versus many weeks for mod janus. To put the complex-
ity of this code into perspective, ptrace [27], the standard
Linux process tracing interface, consists of less than 300
LOC, offers less functionality than mod janus, and is part
of the core kernel which is maintained by experienced ker-
nel developers. Although ptrace has been in Linux since
version 1.0 or earlier, signiﬁcant vulnerabilities were found
in its implementation during both Linux 2.2.x [8] and Linux
2.4.x [11] kernel development.
The size of the kernel portions of these systems is still
dwarfed by completely in-kernel systems. For example,
Subdomain [10] is a relatively small in-kernel solution that
restricts access to the ﬁle system in a fashion similar to that
of our tools.
It offers a very simple policy interface, but
adds 4,500 lines of code in a kernel module and a patch.
Other security factors: Metrics like lines of code do not
tell the whole story on security. Simple code and a conser-
vative design are often far more telling. This is well illus-
trated by the original Janus system, which although under
3,000 LOC was fraught with security problems, many of
which resulted from architectural features that made it par-
ticularly prone to race conditions, inconsistent views of sys-
tem state, and more [16]. Conversely, delegating sandboxes
provide an excellent illustration of how system architecture
can beneﬁt security.
Delegating sandboxes permit a more conservative design
in several ways.
As we noted in section 5.1, delegating sandboxes are
relatively easy to render free of race conditions, as most
classes of race conditions (inter-process/inter-thread shared
state) are eliminated by design due to the fact that the agent
performs all sensitive system calls, and inter-process/inter-
thread state used by the calls is local to the agent. The
remaining potential races are reduced to the much-studied
problem of race-free ﬁle access by a normal application
(i.e. the agent).
Running applications with privilege increases the risk
that an application that bypasses the sandbox will be able
to inﬂict damage on the system. Several approaches have
been taken that try to mitigate this risk in ﬁltering sand-
boxes [31]. A delegating sandbox entirely mitigates this
risk, because sandboxed processes never run with any priv-
ilege. All privilege resides in the agents, as they will be
making the system calls requiring privilege on the process’s
behalf.
If the policy engine contains a bug, it could potentially
allow the sandbox to be bypassed, thus it is critical that this
portion of the system be as simple as possible. A delegating
sandbox like Ostia can simplify its policy engine greatly,
as well as other portions of its implementation, by push-
ing some of the complexity of its TCB into untrusted code,
i.e. into the address space of the sandboxed process via the
emulation library. For example, the emulation library can
reduce the policy engine’s complexity by translating oper-
ations in the sandboxed process into equivalent sequences
for the agent, e.g. if a stub translates truncate into the
equivalent sequence open, ftruncate, close, then the
agent does not need to implement truncate at all. Tech-
niques like this account for the 50% smaller size of Ostia’s
policy engine. The complexity of marshaling the arguments
of system calls made by a sandboxed process can also be
pushed into the emulation library. This is another exam-
ple of ofﬂoading complexity into the emulation library. In
this case, the agent only has to check that arguments, once
received, are correctly formatted.
5.2 Flexibility