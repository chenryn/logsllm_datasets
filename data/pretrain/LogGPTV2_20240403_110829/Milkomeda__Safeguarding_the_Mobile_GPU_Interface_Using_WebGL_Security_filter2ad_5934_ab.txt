an OpenGL ES-like API for web apps, enabling them to render
high-performance 3D content using GPUs. Yet, browser vendors
have been mindful of the security vulnerabilities in GPU device
drivers. These vulnerabilities have been a great concern to them
since web apps are completely untrusted and can be launched with
a single click on a URL. As a result, supporting WebGL seemed like
a significant security risk in the beginning, causing a large amount
of discussions. For example, Microsoft first announced that WebGL
is harmful and “is not a technology Microsoft can endorse from a
security perspective” [2].
WebGL security solution. To mitigate these security concerns,
the WebGL framework is equipped with a set of runtime security
 0 10 20 30 40 50 6012-151617Number of vulnerabilitiesYear (20--)UnspecifiedLowMediumHighchecks. Whenever a WebGL API is called by a web app, the param-
eters of the call are vetted before being passed to the underlying
graphics library (which can be OpenGL ES, OpenGL, or Direct3D
depending on the platform and operating system). These checks are
mostly derived from the OpenGL ES specification [12], given that
the WebGL API is similar to the OpenGL ES API (see §6.2 for in-
compatibilities). Moreover, when a new vulnerability or an exploit
is discovered, a new check is added to prevent future exploits. For
example, recently, a drive-by Rowhammer attack was demonstrated
using the GPU through the WebGL API [38]. To mitigate it, Google
and Mozilla both blocked a certain extension in WebGL [17]. While
these security checks cannot protect against all unknown attacks
(e.g., zero-day exploits), their accumulation over the past few years
has greatly improved the state of WebGL security.
One might wonder whether existing checks in GPU device dri-
vers are enough to guard them and whether WebGL security checks
are redundant given the driver checks. Unfortunately, GPU device
drivers do not include a comprehensive set of security checks and
are vendor specific. While some simple checks (such as checking
for a null pointer) might exist, they are not systematically designed
to properly vet the driver API calls. This is one important rea-
son behind so many vulnerabilities in mobile GPU device drivers
(Figure 2). On the other hand, WebGL checks have been compre-
hensively designed to protect against potentially malicious web
apps.
However, deploying WebGL checks has an important cost for
browsers: performance loss. This is mainly due to the architecture
needed to protect integrity of check evaluation. More specifically,
in order to control a web app’s access to the GPU device driver,
WebGL is deployed in a multi-process architecture [3, 5]. In this
architecture, the web app cannot directly communicate with the
GPU device driver as enforced by the operating system. Instead, it
is only granted permission to communicate with the GPU driver
through a proxy process, called the GPU process, which executes
the WebGL API on behalf of the web app, albeit after security
checking. The GPU process is a privileged process in the browser
with access to the GPU device driver.
Figure 1b illustrates this architecture. The web app process uses
a WebGL frontend framework, which uses Inter-Process Communi-
cation (IPC) and shared memory to serialize and pass the WebGL
API calls of the web app to the WebGL backend in the GPU process.
The backend performs the aforementioned security checks on these
API calls, executes them if they pass the checks, and then returns
the result to the web app process. This architecture degrades the
performance of WebGL. This is because a WebGL call is now an
IPC call rather than a function call and it requires serialization and
deserialization of arguments. Moreover, the graphics data need to
be copied to a shared memory segment by the web app.
2.4 WebGL Security Checks
In this subsection, we provide a high-level review of WebGL security
checks based on available documents, e.g., [4], and our own study
of Chromium browser source code. While our study focused on
WebGL in Chromium, we believe that the provided review is valid
for other browsers too. We group WebGL security checks into four
categories.
Category I: checks on numeric values. WebGL validates nu-
meric arguments passed as input to its APIs. For example, it checks
for some arguments to be positive and rejects deprecated values.
Some simple checks are hard-coded in the WebGL implementation
using conditional statements. The rest are handled by Validators,
which are automatically generated with a python script from a
checklist manually derived from the OpenGL ES specification.
Category II: checks on correctness of API calls. WebGL
(built on top of the OpenGL ES) is highly stateful. That is, some We-
bGL calls update the “rendering state”. At any rendering state, only
some WebGL API and arguments are valid according to the OpenGL
ES specification. WebGL performs checks to enforce correct API
usage. It records the API calls and uses them to infer the rendering
state. It then uses this state to validate subsequent API calls. As
an example, a call for a graphics operation on a graphics object is
only valid if that object (identified by an integer handle) has already
been created in a previous call. Therefore, upon handling such calls,
WebGL first checks the existence of the corresponding graphics
object.
Category III: checks on the shader code. Hardware acceler-
ation using GPUs is primarily done through “shaders”, which are
submitted to the GPU for execution. The WebGL implementation
translates the shader source code to the format used on the plat-
form and validates it. For example, it does not allow non-ASCII
characters in the shader source code as it has been reported that
such characters can crash some shader compilers [1]. The transla-
tion and validation is done through the Almost Native Graphics
Layer Engine (ANGLE) compatibility layer. Also, WebGL disables
the glShaderBinary API, which submits a compiled shader binary
to the GPU, since it bypasses shader validation.
Category IV: platform workarounds. Chromium maintains
a list of known graphics bugs and their respective workarounds.
Then at runtime, depending on the platform (e.g., GPU model), it
applies the necessary workarounds. For our experiment platform
(i.e., Nexus 5X smartphone with a Qualcomm Adreno GPU), there
are 15 workarounds at the time of this writing. For example, due
to a bug in the Adreno OpenGL ES library, the initialization of
shader variables in a loop causes the shader compiler to crash [7].
Chromium avoids this problem by disallowing the use of loops to
initialize shader variables.
Preventing TOCTTOU attacks. Many parameters passed to
the WebGL API are pointers. To prevent Time of Check to Time
of Use (TOCTTOU) attacks, the WebGL implementation makes
a “shadow copy” of the sensitive data pointed by these pointers,
then validates and uses the shadow copies. Only security-sensitive
data is shadowed. Others, such as a texture data passed to the
glTextImage2D API, are not shadowed as they can only affect the
rendered content. This selective shadowing helps with performance
as it minimizes the required data copying.
Case Study: glTexImage2D in WebGL. The glTexImage2D
API specifies a two-dimensional texture image [18]. Figure 3 shows
a simplified version (for readability) of the IPC handler function
for glTexImage2D in WebGL in Chrome (HandleTexImage2D). This
function first retrieves non-pointer arguments from the IPC data
structure. It then enforces simple checks on the width and height
parameters and uses safe arithmetic functions to validate the image
data size. It then calls ValidateAndDoTexImage for more security
error::Error HandleTexImage2D(void* ipc_data) {
TexImage2D_args& c = *static_cast(ipc_data);
GLenum target = static_cast(c.target);
/* Get all other parameters from ipc_data */
...
/* Get shared memory ID for image data */
uint32_t pixels_shm_id = static_cast(c.pixels_shm_id);
uint32_t pixels_shm_offset = static_cast(c.pixels_shm_offset);
...
if (width (
pixels_shm_id, pixels_shm_offset, pixels_size);
if (!pixels)
return error::kOutOfBounds;
} else {
pixels = reinterpret_cast(pixels_shm_offset);
}
ValidateAndDoTexImage( ... );
return error::kNoError;
}
void ValidateAndDoTexImage( ... ) {
if (((args.command_type == DoTexImageArguments::kTexImage2D) &&
!validators->texture_target.IsValid(args.target)) || ... ) {
return false;
}
ValidateTextureParameters( ... );
ValidForTarget( ... );
TextureRef* local_texture_ref = GetTextureInfoForTarget(state, args.target);
if (!local_texture_ref) {
return false;
}
/* Apply necessary platform workarounds */
...
/* DoTexImage updates the bookkeeping info for the affected objects and
eventually call glTexImage2D */
DoTexImage(texture_state, state, framebuffer_state, function_name,
texture_ref, args);
}
Figure 3: WebGL’s (simplified) handling of the glTexIm-
age2D API including several security checks.
checks. This function uses validators to check whether the target
texture type, the command type, and image data parameters are
allowed according to the OpenGL ES specification [18]. Then, it
checks the target texture’s ability to work with the dimension and
level of the image data. It then attempts to retrieve the target texture
information, which is collected when handling previous calls to
create and operate on the texture. If the target texture information
does not exist, it returns an error. After the arguments are validated,
the function looks for and applies necessary platform workarounds.
It then calls DoTexImage to update the bookkeeping state for the
affected objects. Finally, it calls the actual OpenGL ES API function:
glTexImage2D.
3 THREAT MODEL
We assume that mobile apps are untrusted and potentially malicious,
similar to web apps. This is because many mobile apps are developed
by untrusted developers. Moreover, an “instant app” [19] can be
launched with a single URL click and without installation.
We assume that the attacker uses one such mobile app to attack
the system. This malicious app has full control over the user space
process it runs in (excluding the shield space). It can run both
Java and native code. It does the latter by loading arbitrary native
libraries and calling them through the Java Native Interface (JNI).
We assume that this malicious app tries to exploit vulnerabilities in
the GPU device driver. To do so, the app uses the GPU device driver
syscall interface (e.g., ioctl and mmap syscalls) or the OpenGL ES
API (which indirectly invokes the GPU device driver syscalls). We
do not trust any libraries used directly by the app in its process,
including system libraries. We do trust the kernel, which we also
leverage to set up a trusted shield space in the process address space.
We set up the shield at application load time and before loading the
application’s code. Therefore, we assume that the shield is set up
correctly and hence can be trusted.
4 MILKOMEDA’S DESIGN
Milkomeda protects the GPU kernel device driver from malicious
apps by disallowing direct access to the driver and routing all
OpenGL ES calls through a vetting layer. We repurpose the se-
curity checks developed for the WebGL framework for this layer.
Note that this is fundamentally feasible since WebGL API is based
on OpenGL ES (in §6, we describe how we automate porting and
overcome incompatibilities). The question now becomes: what is
the right architecture that satisfies security and performance con-
straints for deploying these checks for mobile apps? We first discuss
two straw-main solutions before presenting ours.
Straw-man design I. One straight-forward design is the multi-
process architecture used in the browser. That is, we can deploy a
special process and force the app to communicate to this process for
OpenGL ES support. This process then performs the security checks
adopted from the browser and invokes the GPU device driver. This
design provides isolation between the app code and the security
checks since they execute in different processes. Therefore, the
web app cannot easily circumvent the checks, unless it manages to
compromise this specialized process or the operating system.
Unfortunately, there is one major drawback for this design: de-
graded performance. The graphics performance in this design is
lower than that of the existing graphics stack for mobile apps due to
the overhead of (i) IPC calls and shared memory data copy, needed
for communication between the two processes, and (ii) serialization
and deserialization of the API calls’ parameters.
Straw-man design II. Another potential design is to deploy the
checks in the app process itself. That is, we can deploy the checks
as a shim layer on top of the existing OpenGL ES library. When the
app calls the OpenGL ES API, the API call is first evaluated through
the shim before being passed to the underlying API handlers. While
this design achieves high graphics performance (only degraded by
the minor performance overhead of evaluating the security checks),
it suffers from an important problem: the checks are circumventable.
First, the app can directly call the GPU device driver itself, bypassing
the library altogether. Second, the app can load and use a different
OpenGL ES library, which does not incorporate the security checks.
Third, the app can bypass the security checks in the existing library
by jumping past the checks but before the API handlers.
Required guarantees. Based on these straw-man solutions, we
come up with a set of principled guarantees that a solution must
provide including three security guarantees and one performance
guarantee.
• Security guarantee I: Untrusted app code cannot directly
interact with the GPU device driver. All interactions between
the app and the driver are vetted by security checks.
• Security guarantee II: the control-flow integrity of the
security checks is preserved.
• Security guarantee III: the data integrity of the security