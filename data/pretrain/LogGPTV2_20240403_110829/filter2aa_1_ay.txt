     while
     loop will continue to run and ask the user for domains until the user enters
     quit
     , which will cause the
     while
     loop to exit and the program to terminate
     3
     .
    在此程序中，我们首先检查用户是否通过指定 -i 选项选择交互模式。接着，我们使用 while 循环重复提示用户输入域名。如果用户输入不是 quit 关键字，则假定他们输入了目标域名，因此我们会扫描并为该域名生成报告。while 循环将继续运行并要求用户输入域名，直到用户输入 quit，这将导致 while 循环退出并终止程序。
    Interactive tools can help your workflow operate more smoothly. For example, you can build testing tools that will let you choose how to proceed based on preliminary results.
    交互工具可以帮助你的工作流程更加顺畅。例如，你可以构建测试工具，根据初步结果选择如何继续操作。
    Using Special Variables and Characters
    You’re now equipped with enough bash knowledge to build many versatile tools. This section offers more tips that concern the particularities of shell scripts.
    你现在掌握了足够的 Bash 知识，可以构建许多多功能工具。本节提供更多有关 shell 脚本的特殊提示。
    In Unix, commands return
     0
    on success and a positive integer on failure. The variable
     $?
    contains the exit value of the last command executed. You can use these to test for execution successes and failures:
    在Unix中，命令成功执行会返回0，失 败则返回正整数。变量$？包含最后一个执行的命令的退出值。您可以使用这些值来测试执行的成功或失败情况：
#!/bin/sh
chmod 777 script.sh
if [ "$?" -ne "0" ]; then
  echo "Chmod failed. You might not have permissions to do that!"
fi
    Another special variable is
     $$
    , which contains the current process’s ID. This is useful when you need to create temporary files for the script. If you have multiple instances of the same script or program running at the same time, each might need its own temporary files. In this case, you can create temporary files named
     /tmp/script_name_$$
    for every one of them.
    另一个特殊的变量是$$，它包含当前进程的ID。当您需要为脚本创建临时文件时，这非常有用。如果您同时运行同一脚本或程序的多个实例，每个实例可能都需要自己的临时文件。在这种情况下，您可以为它们中的每一个创建名为/tmp/script_name_$$的临时文件。
    Remember that we talked about variable scopes in shell scripts earlier in this chapter? Variables that aren’t input parameters are global to the entire script. If you want other programs to use the variable as well, you need to export the variable:
    在本章早些时候我们讨论过shell脚本中的变量作用域。如果变量不是输入参数，则对整个脚本都是全局的。如果您希望其他程序也使用该变量，您需要导出该变量：
export VARIABLE_NAME=VARIABLE_VALUE
    Let’s say that in one of your scripts you set the variable
     VAR
    :
    假设在您的脚本中设置了变量VAR：
VAR="hello!"
    If you don’t export it or source it in another script, the value gets destroyed after the script exits. But if you export
     VAR
    in the first script and run that script before running a second script, the second script will be able to read
     VAR
    ’s value.
    如果您在脚本中不会导出或在另一个脚本中引用它，值将在脚本退出后被销毁。但是，如果您在第一个脚本中导出VAR并在运行第二个脚本之前运行该脚本，则第二个脚本将能够读取VAR的值。
    You should also be aware of special characters in bash. In Unix, the wildcard character
     *
    stands for
     all
    . For example, this command will print out all the filenames in the current directory that have the file extension
     .txt
    :
    你也需要注意bash中的特殊字符。在Unix中，通配符*代表所有。例如，这个命令将打印当前目录中所有具有文件扩展名.txt的文件名：
$ ls *.txt
    Backticks (
     `
    ) indicate command substitution. You can use both backticks and the
     $()
    command substitution syntax mentioned earlier for the same purpose. This
     echo
    command will print the output of the
     whoami
    command:
    反引号（`）表示命令替换。您可以同时使用反引号和$（）命令替换语法来达到相同的目的。这个echo命令将打印出whoami命令的输出：
echo `whoami`
    Most special characters, like the wildcard character or the single quote, aren’t interpreted as special when they are placed in double quotes. Instead, they’re treated as part of a string. For example, this command will echo the string
     "abc '*' 123"
    :
    大多数特殊字符（例如通配符或单引号）在双引号中使用时不会被解释为特殊字符，而是被视为字符串的一部分。例如，这个命令将回显字符串 "abc '*' 123"。
$ echo "abc '*' 123"
    Another important special character is the backslash (
     \
    ), the escape character in bash. It tells bash that a certain character should be interpreted literally, and not as a special character.
    另一个重要的特殊字符是反斜杠（\），是bash中的转义字符。它告诉bash应该将某些字符解释为字面意思，而不是特殊字符。
    Certain special characters, like double quotes, dollar sign, backticks, and backslashes remain special even within double quotes, so if you want bash to treat them literally, you have to escape them by using a backslash:
    特定的特殊字符，比如双引号、美元符号、反引号和反斜杠，即使在双引号内部仍然保持特殊，所以如果想要让bash将它们按字面含义处理，你需要使用反斜杠来转义它们：
$ echo "\" is a double quote. \$ is a dollar sign. \` is a backtick. \\ is a backslash."
    This command will echo:
    "这个指令将会回显："
" is a double quote. $ is a dollar sign. ` is a backtick. \ is a backslash.
    You can also use a backslash before a newline to indicate that the line of code has not ended. For example, this command
    你也可以在换行符之前使用反斜杠，以表示该行代码未结束。例如，这个命令。
chmod 777 \
script.sh
    is the same as this one:
    与这个相同：
chmod 777 script.sh
    Congratulations! You can now write bash scripts. Bash scripting may seem scary at first, but once you’ve mastered it, it will be a powerful addition to your hacking arsenal. You’ll be able to perform better recon, conduct more efficient testing, and have a more structured hacking workflow.
    恭喜您！现在您已经可以编写Bash脚本了。Bash脚本在一开始可能会让人感到害怕，但一旦掌握它，它将成为您黑客工具箱中强大的工具。您将能够执行更好的侦察，进行更有效的测试，并拥有更有结构的黑客工作流程。
    If you plan on implementing a lot of automation, it’s a good idea to start organizing your scripts from the start. Set up a directory of scripts and sort your scripts by their functionality. This will become the start of developing your own hacking methodology. When you’ve collected a handful of scripts that you use on a regular basis, you can use scripts to run them automatically. For example, you might categorize your scripts into recon scripts, fuzzing scripts, automated reporting, and so on. This way, every time you find a script or tool you like, you can quickly incorporate it into your workflow in an organized fashion.
    如果您计划实施大量自动化，最好从一开始就开始组织您的脚本。建立一个脚本目录，并根据功能对脚本进行分类。这将成为开发自己的黑客方法论的开始。当您收集了一些经常使用的脚本时，可以使用脚本自动运行它们。例如，您可以将脚本分类为侦察脚本，模糊测试脚本，自动报告等。这样，每当您发现自己喜欢的脚本或工具时，都可以以有组织的方式快速将其纳入您的工作流程中。
    Scheduling Automatic Scans
    Now let’s take your automation to the next level by building an alert system that will let us know if something interesting turns up in our scans. This saves us from having to run the commands manually and comb through the results over and over again.
    现在，让我们把你的自动化技术提升到新的水平，构建一个警报系统，让我们知道如果在我们的扫描中出现有趣的内容，这将使我们免于手动运行命令和一遍又一遍地浏览结果的麻烦。
    We can use cron jobs to schedule our scans.
     Cron
    is a job scheduler on Unix-based operating systems. It allows you to schedule jobs to run periodically. For example, you can run a script that checks for new endpoints on a particular site every day at the same time. Or you can run a scanner that checks for vulnerabilities on the same target every day. This way, you can monitor for changes in an application’s behavior and find ways to exploit it.
    我们可以使用cron作业来计划我们的扫描。Cron是Unix基础操作系统上的作业调度程序。它允许您定期运行作业。例如，您可以每天在同一时间运行检查特定站点上新端点的脚本。或者您可以每天运行检查同一目标漏洞的扫描程序。通过这种方式，您可以监视应用行为的变化并找到对其进行利用的方法。
    You can configure Cron’s behavior by editing files called
     crontabs
    . Unix keeps different copies of crontabs for each user. Edit your own user’s crontab by running the following:
    你可以通过编辑名为crontabs的文件来配置Cron的行为。Unix为每个用户保留不同的crontabs副本。 运行以下命令来编辑你自己用户的crontab：
crontab -e
    All crontabs follow this same syntax:
    所有的cron表达式都遵循相同的语法：
A B C D E command_to_be_executed
A: Minute (0 – 59)
B: Hour (0 – 23)
C: Day (1 – 31)
D: Month (1 – 12)
E: Weekday (0 – 7) (Sunday is 0 or 7, Monday is 1...)
    Each line specifies a command to be run and the time at which it should run, using five numbers. The first number, from 0 to 59, specifies the minute when the command should run. The second number specifies the hour, and ranges from 0 to 23. The third and fourth numbers are the day and month the command should run. And the last number is the weekday when the command should run, which ranges from 0 to 7. Both 0 and 7 mean that the command should run on Sundays; 1 means the command should run on Mondays; and so on.
    每行都指定要运行的命令以及它应该运行的时间，使用五个数字。第一个数字从0到59，指定命令应该运行的分钟。第二个数字指定小时数，范围从0到23。第三和第四个数字是命令应该运行的日期和月份。最后一个数字是命令应该运行的星期几，范围从0到7。0和7都表示命令应该在星期天运行。1表示命令应该在星期一运行，依此类推。
    For example, you can add this line to your crontab to run your recon script every day at 9:30
     PM
    :
    例如，您可以将以下行添加到您的crontab中，每天晚上9点30分运行您的recon脚本：
30 21 * * * ./scan.sh
    You can also batch-run the scripts within directories. The
     run-parts
    command in crontabs tells Cron to run all the scripts stored in a directory. For example, you can store all your recon tools in a directory and scan your targets periodically. The following line tells Cron to run all scripts in my security directory every day at 9:30
     PM
    :
    您还可以批量运行目录中的脚本。crontab 中的 run-parts 命令告诉 Cron 运行目录中存储的所有脚本。例如，您可以将所有的侦察工具存储在一个目录中，并定期扫描您的目标。下面的命令告诉 Cron 每天晚上 9:30 运行我安全目录中的所有脚本：
30 21 * * * run-parts /Users/vickie/scripts/security
    Next,
     git diff
    is a command that outputs the difference between two files. You need to install the Git program to use it. You can use
     git diff
    to compare scan results at different times, which quickly lets you see if the target has changed since you last scanned it:
    `git diff`是一个命令，用于输出两个文件之间的差异。要使用它，您需要安装Git程序。您可以使用`git diff`比较不同时间的扫描结果，这将快速让您了解目标自上次扫描以来是否有更改：
git diff SCAN_1 SCAN_2
    This will help you identify any new domains, subdomains, endpoints, and other new assets of a target. You could write a script like this to notify you of new changes on a target every day:
    这将帮助您识别目标的任何新域名、子域名、终端点和其他新资产。您可以编写如下脚本，每天通知您目标的新变化：
#!/bin/bash
DOMAIN=$1
DIRECTORY=${DOMAIN}_recon
echo "Checking for new changes about the target: $DOMAIN.\n Found these new things."
git diff  
    And schedule it with Cron:
    "使用Cron安排它："
30 21 * * * ./scan_diff.sh facebook.com
    These automation techniques have helped me quickly find new JavaScript files, endpoints, and functionalities on targets. I especially like to use this technique to discover subdomain takeover vulnerabilities automatically. We’ll talk about subdomain takeovers in
     Chapter 20
    .
    这些自动化技巧帮助我快速在目标上找到新的JavaScript文件、端点和功能。我特别喜欢使用这种技术自动发现子域接管漏洞。我们将在第20章讨论子域接管问题。
    Alternatively, you can use GitHub to track changes. Set up a repository to store your scan results at
     https://github.com/new/
    . GitHub has a Notification feature that will tell you when significant events on a repository occur. It’s located at Settings
     ▶
    Notifications on each repository’s page. Provide GitHub with an email address that it will use to notify you about changes. Then, in the directory where you store scan results, run these commands to initiate
     git
    inside the directory:
    或者，您可以使用GitHub来跟踪更改。 在https://github.com/new/上设置一个存储您的扫描结果的存储库。 GitHub具有通知功能，可以在存储库上发生重要事件时告诉您。 它位于每个存储库页面的“设置▶Notifications”下。 向GitHub提供一个电子邮件地址，以便它会使用它来通知您有关更改的信息。 然后，在存储扫描结果的目录中运行以下命令以初始化目录内的git：
git init
git remote add origin https://PATH_TO_THE_REPOSITORY
    Lastly, use Cron to scan the target and upload the files to GitHub periodically:
    最后，使用Cron定期扫描目标并上传文件到GitHub。
30 21 * * * ./recon.sh facebook.com
40 21 * * * git add *; git commit -m "new scan"; git push -u origin master
    GitHub will then send you an email about the files that changed during the new scan.
    GitHub随后会向您发送一封有关新扫描中更改的文件的电子邮件。
    A Note on Recon APIs
    Many of the tools mentioned in this chapter have APIs that allow you to integrate their services into your applications and scripts. We’ll talk about APIs more in
     Chapter 24
    , but for now, you can think of APIs as endpoints you can use to query a service’s database. Using these APIs, you can query recon tools from your script and add the results to your recon report without visiting their sites manually.
    本章提到的很多工具都有API，可以让你将它们的服务集成到你的应用和脚本中。我们会在第24章更深入地介绍API，但现在你可以将它们看作是你可以用来查询服务数据库的端点。使用这些API，你可以从你的脚本中查询反侦察工具，并将结果添加到你的反侦察报告中，而不需要手动访问它们的网站。
    For example, Shodan has an API (
     https://developer.shodan.io/
     )
    that allows you to query its database. You can access a host’s scan results by accessing this URL:
     https://api.shodan.io/shodan/host/{ip}?key={YOUR_API_KEY}
    . You could configure your bash script to send requests to this URL and parse the results
     .
    LinkedIn also has an API (
     https://www.linkedin.com/developers/
    ) that lets you query its database. For example, you can use this URL to access information about a user on LinkedIn:
     https://api.linkedin.com/v2/people/{PERSON ID}.
    The Censys API (
     https://censys.io/api
    ) allows you to access certificates by querying the endpoint
     https://censys.io/api/v1
    .
    例如，Shodan具有API（https://developer.shodan.io/），可以让您查询其数据库。您可以通过访问此URL: https://api.shodan.io/shodan/host/{ip}?key={YOUR_API_KEY}来访问主机的扫描结果。您可以配置Bash脚本以向此URL发送请求并解析结果。 LinkedIn还具有API（https://www.linkedin.com/developers/），可让您查询其数据库。例如，您可以使用此URL来访问LinkedIn上用户的信息：https://api.linkedin.com/v2/people/{PERSON ID}。 Censys API（https://censys.io/api）允许您通过查询端点https://censys.io/api/v1来访问证书。
    Other tools mentioned in this chapter, like BuiltWith, Google search, and GitHub search, all have their own API services. These APIs can help you discover assets and content more efficiently by integrating third-party tools into your recon script. Note that most API services require you to create an account on their website to obtain an
     API key
    , which is how most API services authenticate their users. You can find information about how to obtain the API keys of popular recon services at
     https://github.com/lanmaster53/recon-ng-marketplace/wiki/API-Keys/
    .
    本章提到的其他工具，如BuiltWith、Google搜索和GitHub搜索，都有自己的API服务。 这些API可以通过将第三方工具集成到您的搜寻脚本中，帮助您更有效地发现资产和内容。请注意，大多数API服务都需要您在其网站上创建帐户以获取API密钥，这是大多数API服务对其用户进行身份验证的方式。您可以在https://github.com/lanmaster53/recon-ng-marketplace/wiki/API-Keys/中找到有关如何获取流行搜寻服务API密钥的信息。
    Start Hacking!
    Now that you’ve conducted extensive reconnaissance, what should you do with the data you’ve collected? Plan your attacks by using the information you’ve gathered! Prioritize your tests based on the functionality of the application and its technology.
    既然你已经进行了广泛的侦察，那么你应该如何处理收集到的数据呢？利用你所收集的信息来规划攻击计划吧！根据应用程序的功能和技术优先安排测试。