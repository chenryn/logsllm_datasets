# Policy Algebras for Access Control: The Propositional Case

**Authors:**
- Duminda Wijesekera
- Sushil Jajodia

**Affiliation:**
Center for Secure Information Systems  
George Mason University  
Fairfax, VA 22030–4444  
Email: [PI:EMAIL] (for both authors)

## Abstract

Different organizations have varying requirements for data protection. However, there is an increasing need for these organizations to integrate their computing resources to achieve common goals. This paper addresses the fundamental problem of capturing the algebra used in composing access control policies of collaborating organizations. We aim to develop a framework that can be viewed at multiple levels of abstraction (e.g., abstract vs. explicit or propositional vs. predicate), independent of implementation mechanisms and environments, and expressive enough to model existing policy composition practices.

In the propositional version, policies are treated as abstract symbols, and their semantics are defined as authorization state transformers. An authorization state is a collection of (subject, object, access set) triples and a set of propositions satisfied by them. Syntactic rules are provided to simplify policy expressions without knowing their semantics, enabling algebraic manipulations of uninterpreted policies. Our abstract algebra can model any policy, regardless of the language used for its implementation. We demonstrate how to reason about completeness, consistency, unambiguity, and semantic equivalence of abstractly specified policies.

**Categories and Subject Descriptors:**
- H.2.7 [Database Management]: Database Administration—Security, integrity, and protection
- K.6.5 [Management of Computing and Information Systems]: Security and protection

**General Terms:**
- Security, Theory

**Keywords:**
- Access control, Security policy, Policy composition, Policy algebra

**Acknowledgments:**
This work was partially supported by the National Science Foundation under grant ITR-01113515.

**Copyright:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.

## 1. Introduction

In today's interconnected world, organizations with diverse privacy protection and information sharing requirements increasingly connect their computing resources to carry out joint or common tasks. Examples include coalitions formed for coordinated operations, such as NATO in Bosnia or United Nations forces against Iraq. Similar needs exist in the commercial sector, where mergers and breakups of organizations are frequent. Since different organizations operate under different data protection and control requirements, their security mechanisms often lack common principles, are implemented in different languages, and run on incompatible operating platforms.

To maintain conceptual coherence of security policies among collaborating organizations and provide a common basis for comparison, we propose an algebra to reflect the composition of security policies at a higher level. This paper, the first in a series, presents a policy composition framework at the propositional level for access control policies.

At the propositional level, policies are viewed as abstract symbols, and their semantics are interpreted as nondeterministic transformers of (subject, object, access set) triples. Operations on policies are interpreted as relational operators such as union, intersection, and composition. The advantages of this framework include:
- Language and implementation mechanism-independent descriptions of policies.
- The ability to examine policies for completeness, consistency, and unambiguity.
- Facilitating the identification of contradictory policies.
- Allowing specifiers to determine if two policies result in the same accesses (semantic equivalence).
- Enabling decentralized policy specification.
- Facilitating the reuse and composition of well-specified and error-free policies.

This work is closely related to the composition framework for access control policies proposed by Bonatti et al. [5], where an access control policy is a set of ground terms over an alphabet for subject, object, and action terms, closed under set-theoretical operators and recursive closure under Horn Clauses. Detailed comparisons to this and other related work appear in Section 7.

The main results of this paper are:
- A propositional version of a policy composition algebra with a syntax consisting of abstract symbols for atomic policy expressions and composition operators.
- Semantics of policies interpreted as relational transformers of (subject, object, access set) with controlled non-determinism.
- Algebraic identities and their use in determining equivalent policies.
- Sufficient conditions for consistency, completeness, and determinism.
- Comparisons with other works and summaries of ongoing extensions.

The rest of the paper is organized as follows. Sections 2 and 3 introduce the syntax and semantics of our algebra, respectively. Section 4 provides properties of our algebra, and Section 5 discusses deterministic policies and sufficient conditions for policy expressions. Section 6 shows how example policies can be modeled using our algebra, and Section 7 compares our work with others. Finally, Section 8 concludes the paper.

## 2. Syntax

This section describes the syntax of the algebra, which includes a collection of policies, a collection of operators to combine them, and a collection of propositions to model conditionals. Semantically, policies map authorization triples (subject, object, action set) to collections of such authorization triples. Operators on policies are mapped to set-theoretical operators, and propositions are abstract, uninterpreted symbols. Semantic details are given in Section 3.

### Definition 1: Atomic Policies and Propositions

Let \( P = \{ p_i : i \in \mathbb{Z} \} \) be a collection of atomic policies and \( \Phi = \{ \phi_i : i \in \mathbb{Z} \} \) be a collection of atomic propositions.

### Definition 2: Algebra of Policies

Let \( P = \{ p_i : i \in \mathbb{Z} \} \) be a set of atomic policies. If \( p_1 \) and \( p_2 \) are policies and \( \phi \) is a proposition, then the following are policies:
- Every atomic policy is a policy.
- \( (p_1 \cup p_2) \): Union of policies.
- \( (p_1 \cap p_2) \): Intersection of policies.
- \( (p_1 - p_2) \): Difference of policies.
- \( (p_1; p_2) \): Sequential composition of policies.
- \( (\neg p_1) \): Negation of policies.
- \( (\bot p_1) \): Invalidation of all access decisions made by \( p_1 \).
- \( (p_1^*) \): Iterative closure of policies.
- \( (\phi : p_1) \): Adding provisions to policies.
- \( (p_1 | \phi) \): Restricting the scope of policies.
- \( \text{max}(p_1) \), \( \text{min}(p_1) \): Lattice max and lattice min with respect to actions.

### Intended Semantics of Policy Operators

- **Disjunction**: Permits accesses allowed under either component.
- **Conjunction**: Allows only those accesses permitted by both components.
- **Difference**: Permits accesses allowed under the first but not the second component.
- **Sequential**: Permits accesses allowed as a consequence of the second component after the first is applied.
- **Negation**: Changes positive authorizations to negative and vice versa.
- **Invalidation**: Removes all authorizations granted under the policy.
- **Closure**: Allows accesses permitted under repeated application of policies.
- **Provisions**: Allow accesses provided specified provisions are met.
- **Scoping**: Allows only those authorizations meeting the scoping restrictions.
- **Maximum and Minimum**: Resolve conflicts by selecting positive and negative permissions, respectively.

## 3. Semantics

Policy composition operators in our algebra include conjunction, disjunction, sequential composition, negation, invalidating all granted accesses, negating access given by a policy, difference, iterative closure under a set of rules, adding provisions, restricting the scope of policies, and granting minimum and maximum possible permissions.

Semantically, access control policies allow specified subjects to execute desired actions over given objects. Accordingly, policies are interpreted as abstract transformers of (subject, object, action set) triples.

### Definition 3: Authorization States

- **Subjects, Objects, and Actions**: Let \( S = \{ s_i : i \in \mathbb{Z} \} \), \( O = \{ o_i : i \in \mathbb{Z} \} \), and \( A = \{ a_i : i \in \mathbb{Z} \} \) be collections of subjects, objects, and actions, respectively. Let \( \hat{A} = A^+ \cup A^- \) where \( A^+ = \{ +a : a \in A \} \) and \( A^- = \{ -a : a \in A \} \). Subjects in \( S \) belong to three different sorts: individuals, groups, and roles.
- **Authorization Triples**: \( (s, o, B) \) is an authorization triple where \( s \), \( o \), and \( B \) are the subject, object, and a set of signed action terms, respectively.
- **State**: \( (Auth, Truth) \) is a state if \( Auth \) is a set of authorization triples satisfying the property that for each \( s \in S \) and \( o \in O \), there is some signed subset \( B \subseteq \hat{A} \) such that \( (s, o, B) \in Auth \). \( Truth \subseteq \Phi \), i.e., \( Truth \) is a collection of atomic propositions. We use the symbol \( S \) for the set of states.

### Definition 4: Models of Policy Algebras

A model \( M \) of policy algebra is a tuple \( (S, M) \), where \( S \) is a set of states, and \( M \) is a mapping from the set of atomic policies \( P \) to a subset of \( S \times S \). We say that a state \( s = (P, Q) \in S \) of the model \( M \) satisfies the atomic proposition \( \phi_i \) if \( \phi_i \in Q \). Satisfaction of propositions is defined as in classical propositional logic. A state \( S \in S \) satisfying the proposition \( \phi \) is denoted by \( S \models \phi \). We extend \( M \) to non-atomic policies using the following recursive definition:

- **Union**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p_i) \) and \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_3), T_2)) \in M(p_j) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2 \cup A_3), T_2)) \in M(p_i \cup p_j) \).
- **Intersection**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p_i) \) and \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_3), T_2)) \in M(p_j) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2 \cap A_3), T_2)) \in M(p_i \cap p_j) \).
- **Difference**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p_i) \) and \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_3), T_2)) \in M(p_j) \), then \( (((s_1, o_1, A_1), T_2), ((s_1, o_1, A_2 - A_3), T_2)) \in M(p_i - p_j) \).
- **Sequential Composition**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p_i) \) and \( (((s_1, o_1, A_2), T_2), ((s_1, o_1, A_3), T_3)) \in M(p_j) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_3), T_3)) \in M(p_i; p_j) \).
- **Negation**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, \{ -a : +a \in A_2 \} \cup \{ +a : -a \in A_2 \}), T_2)) \in M(\neg p) \).
- **Invalidation**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, \emptyset), T_2)) \in M(\bot p) \).
- **Provisions**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(\phi : p) \) provided \( T_2 \models \phi \), else \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, \emptyset), T_2)) \in M(\phi : p) \).
- **Scoping**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p) \), then there are subsets \( B_1 \subseteq A_1 \) and \( B_2 \subseteq \hat{A} \) such that \( (((s_1, o_1, B_1), T_1), ((s_1, o_1, B_2), T_2)) \in M(p | \phi) \).
- **Iterative Closure**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p) \), then inductively define \( M(\hat{p}_n) \) as \( M(\hat{p}_0) = M(\bot p) \), \( M(\hat{p}_1) = M(p) \), \( M(\hat{p}_{n+1}) = M((p : \hat{p}_i) \cup \hat{p}_i) \). Now define \( M(p^*) \) as \( \bigcup_n M(\hat{p}_n) \).
- **Maximum and Minimum**: If \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, A_2), T_2)) \in M(p) \), then \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, \{ +a : \text{if } +a, -a \in A_2 \} \cup \{ -a : \text{if } +a, -a \in A_2 \}), T_2)) \in M(\text{max}(p)) \) and \( (((s_1, o_1, A_1), T_1), ((s_1, o_1, \{ -a : \text{if } +a, -a \in A_2 \} \cup \{ +a : \text{if } +a, -a \in A_2 \}), T_2)) \in M(\text{min}(p)) \).

This completes the definitions and interpretations of the policy algebra at the propositional level.