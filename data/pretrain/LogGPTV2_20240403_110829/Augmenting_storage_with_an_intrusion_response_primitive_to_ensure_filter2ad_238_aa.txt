title:Augmenting storage with an intrusion response primitive to ensure
the security of critical data
author:Ashish Gehani and
Surendar Chandra and
Gershon Kedem
Augmenting Storage with an Intrusion Response Primitive
to Ensure the Security of Critical Data
Department of Computer Science and Engineering, University of Notre Dame
Ashish Gehani
Surendar Chandra
384 Fitzpatrick Hall, Notre Dame, IN 46556
{ashish.gehani,surendar}@nd.edu ∗
Department of Computer Science, Duke University
Gershon Kedem
Box 90129, Durham, NC 27708
PI:EMAIL
ABSTRACT
Hosts connected to the Internet continue to suffer attacks with high
frequency. The use of an intrusion detector allows potential threats
to be ﬂagged. When an alarm is raised, preventive action can be
taken. A primary goal of such action is to assure the security of the
data stored in the system. If this operation is effected manually, the
delay between the alarm and the response may be enough for an
intruder to cause signiﬁcant damage.
The alternative proposed in this paper is to provide a response prim-
itive for intrusion detectors to utilize in automating the response.
We describe RICE, a modiﬁcation to the Java ﬁle subsystem that
provides such functionality for data that is deemed to be threatened
by an attack. If it is activated when an intrusion appears likely to
succeed, it guarantees the conﬁdentiality, integrity and availability
of the protected data even after a system is compromised.
In particular, RICE allows cryptographic encapsulation of data to
be reduced to simple key deletion so that it can be effected rapidly.
Further, it uses digitally signed hashes of ﬁle deltas to allow un-
tainted data to be distinguished from the rest. Finally, ﬁle deltas
are replicated at a remote node to ensure that changes made by an
attacker can be undone using the remote replicas.
INTRODUCTION
1.
Vulnerabilities in deployed software continue to be discovered and
exploited by attackers. If possible, the error in design, implemen-
tation or conﬁguration that results in a weakness ought to be ad-
dressed directly. However, in many environments, users need to
install, manage and continue to use software that may introduce the
vulnerabilities. Here alternative preventive measures must be uti-
lized, such as ﬁrewalls and intrusion detection systems. These tools
∗This work is supported by the U.S. National Science Foundation
(IIS-0515674 and CNS-0447671)
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’06, March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003...$5.00
allow an extra level of defense to be introduced to prevent exposure
of the weaknesses that may exist in the system.
Efforts have been made to utilize information about the attack to
take precautionary measures automatically, such as terminating pro-
cesses or network connections. These approaches typically aim to
cut off an attacker’s access to the execution environment. The last
line of defence is protecting the information stored itself. This is the
focus of this paper. By allowing an intrusion detector to interface
directly with the storage system through an exposed programming
interface, we show how the cryptographic and replication responses
needed to ensure the security of the data can be automated.
Implementing runtime protection of data imposes an overhead, how-
ever. If the data’s security is not critical, the impact on performance
may not warrant the changes, while in certain applications it clearly
will matter. For example, in the context of ﬁnancial systems, a
breach of conﬁdentiality, integrity or continued availability of the
data after an attack can be catastrophic. In such cases the tradeoff
is weighted in favor of instituting additional protective measures.
RICE is implemented as a modiﬁcation of the Java Runtime Envi-
ronment. It provides intrusion detection applications with a sim-
ple programming interface to cryptographically disable (and re-
enable with manual authentication) read access to subsets of the
data stored in the ﬁlesystem. Using authenticated hashes of changes
to ﬁles, it allows unauthorized writes to be cryptographically de-
tected. Finally, it utilizes authenticated, encrypted replication of
deltas. This allows the changes made by an attacker to be undone.
RICE’s efﬁcacy is demonstrated through its use with a simple intru-
sion detector (modeled after Stat [11]) which leverages its capabil-
ities to automatically limit the consequences of imminent attacks.
The overhead imposed by the cryptographic operations is also ex-
amined.
2. MOTIVATION
Current intrusion detection applications have limited response op-
tions. They typically raise an alarm when an intrusion has been
detected. The more advanced ones can tear down network connec-
tions and kill processes. They do not have a means of protecting
the data on the system. In particular, the response is invoked after
an intrusion is detected, at which point it may be too late to make
any guarantees about the security of the system.

We instead consider the case where the intrusion detector can take
proactive protective action before the intrusion completes. This is
when a partial match to an intrusion signature has been detected.
In this context, tearing down network connections and killing pro-
cesses on a host are not viable options since they are not reversible
and because there will be high false positive rates even if consserva-
tive thresholds are used for what is considered to be a partial match.
However, protecting the data (using cryptography) at the expense
of its accessibility is a reversible operation. While this does irre-
versibly alter the execution path of an application (which is unable
to access the data that it needs), this can be compensated for by pro-
grammatically exposing this information and allowing applications
to respond to this exceptional condition.
3. GOALS
We outline below the envisioned goals of a storage system augmen-
tation built for intrusion response. We also describe the approach
we take to achieving the goals.
Guarantee Security
Data security has three aspects - conﬁdentiality, integrity and avail-
ability. If the intrusion response primitives are utilized as designed,
they should be able to ensure that all three aspects of the data are
maintained. Since an attacker may achieve complete control of the
system, we can not rely on the operating system after an intrusion
has occurred. This necessitates the use of cryptography to guaran-
tee conﬁdentiality and to verify integrity. In addition, to ensure the
availability of data that may be deleted or otherwise modiﬁed, the
data must be replicated at a remote node.
Reduce Mean Time To Response
If an intrusion detector is limited to raising an alarm, the data re-
mains exposed to attack for a signiﬁcant period until a manual re-
sponse can be invoked. Instead the storage subsystem should allow
an intrusion detector to directly interact with it to invoke the req-
uisite response. We achieve this by providing a simple program-
ming interface by which the intrusion detector can request partic-
ular groups of data objects to be considered at risk. Thereafter, it
becomes the storage system’s responsibility. Since this is a com-
pletely automated event, the mean time to response can be reduced
from minutes or hours to seconds.
Compartmentalize the Impact
Usability of a storage system response primitive can be enhanced
signiﬁcantly by limiting its adverse impact on the parts of the sys-
tem that are not threatened. To achieve this, data is divided into
groups (orthogonal to the access control groups in use) that are
likely to be affected by particular intrusions. When protective mea-
sures are instituted, they should only affect the groups containing
the targets of a current attack. This allows the rest of the system to
continue functioning unhindered, improving system usability and
reducing its vulnerability to denials of service created by the trig-
gering of the protective measures.
Simplify Recovery
Adding security often reduces convenience. In the current context,
once a set of data has been protected, it should no longer be read-
able, writes to it should not be authenticated and replicas should
be detected as untrusted. Once a threat is deemed to have passed,
these changes must be undone. There are two aspects to this. The
ﬁrst is what must occur at runtime, which is the removal of the
cryptographic protections.
Since the cryptographic keys needed to remove the protections would
have been deleted to prevent an attacker from being able to access
them, they must be recovered from a keystore. Access to the key-
store must be password protected for the same reason and thus ne-
cessitates manual authentication by the system’s administrator or
user (as speciﬁed by policy). To minimize the inconvenience this
imposes, when a protection group is no longer deemed to be under
threat, instead of unprotecting it immediately, it is added to a pool
of candidates for unprotection. Only when a ﬁle from one of these
groups is accessed does the keystore get accessed. At this point all
the elements of the pool have their protection removed. This ef-
fectively amortizes the authentication over a number of recoveries,
diminishing the inconvenience it causes.
Make Undoability Usable
The other aspect of undoing changes is what must be done ofﬂine if
an intrusion occurred. This is the utilization of the remote replicas
to reconstruct the ﬁlesystem to a point in time where it had not been
subverted. The usability of the recovered state is dependent on the
semantics of write operations. If there are no transactional guaran-
tees, ﬁles may be left with multiple pieces dating to different times.
Such data is likely to be of little utility. The approach we use is to
allow recovery to be guaranteed at the granularity of transactions
deﬁned by the opening and closing of a ﬁle for writing.
4. BACKGROUND
Several projects have used cryptography to control data access at
ﬁle granularity. Each has a difference from what we propose which
makes it unsuitable for application in the context we describe.
Cryptographic File System [1], Transparent Cryptographic File Sys-
tem [2], and Cryptfs [13] use only symmetric key cryptography.
Guaranteeing a ﬁle’s integrity requires a means to check that it has
only been modiﬁed by an authorized party. If the key used to verify
the hash of the ﬁle was of symmetric cipher then it could be used to
modify the hash as well. An asymmetric cipher is required to allow
veriﬁcation of integrity without allowing changes. Framed in terms
of ﬁle operations, we need a asymmetric cipher to be able to grant
read access without write access.
Secure File System [9] and Secure File System - Read Only [4]
use asymmetric ciphers to provide authentication but not conﬁden-
tiality. Encrypting File System [10] uses an asymmetric cipher for
authenticated access along with a symmetric cipher for conﬁden-
tiality. It does not sign hashes on writes which are veriﬁed on reads,
so it is unable to guarantee integrity.
Secure File System [6] and Cepheus [3] target distributed environ-
ments and rely on the network for gaining access to keys. Apart
from the latency introduced by the network access, this introduces
the weakness of allowing an attacker to cut off read and write ac-
cess to ﬁles by ﬂooding the server port used to listen for requests
for keys.
Finally, none of these systems aim to address the issue of avail-
ability of data after a successful attack. RICE addresses this by
computing the changes made to ﬁles and storing them on a differ-
ent host to allow ﬁle reconstruction should the original no longer
be available after an intrusion. Additionally, RICE provides an in-
terface for key manipulation to allow cryptographic guarantees to
be added to read/write access denials with minimal overhead.

Intrusion
Detector
Application
Read
Unencrypted
Data
Write
Unsigned
Data
Control
Public/Private Keys
Filesystem API
Capability
Manager
Write Signed
Encrypted Delta
Read
Encrypted
Data
Write
Signed
Data
Remote Node
Filesystem
Figure 1: RICE’s augmentation of the storage subsystem al-
lows transparent data encryption, integrity hash checking and
replication for threatened data. It exposes a programming in-
terface to allow an intrusion detector to activate the protections
only when needed to minimize its impact on system usability.
5. OVERVIEW
Computing systems are designed to manipulate data. It is this data
whose security is paramount and the ﬁnal target of protection. Our
goal therefore is to assure that the data’s conﬁdentiality, integrity
and availability is maintained, even after the system is penetrated.
We aim to achieve this by providing a response primitive that can be
invoked by an intrusion detection system when it detects an attack
that is likely to succeed. Invoking the primitive must ensure that the
data is encrypted to guarantee conﬁdentiality, a hash of it is signed
to allow its integrity to be subsequently veriﬁed, and it is replicated
at another node so that it is available even if the local copy is lost.
Effecting the above mentioned operations on a large data set is a
computationally intensive task. The latency of the operation would
be too high if it were to be completely executed at invocation time.
Our strategy to address this issue is to minimize the computation
needed in response to a likely intrusion. This is done by main-
taining data in a protected state until an application needs access
to it. At this point, transparent to the application, it is exposed as
described in Section 7.4. When it is no longer used by any applica-
tion, it is transparently protected once again, as outlined in Section
7.5. An overview of the scheme can be seen in Figure 1.
This process imposes an overhead whenever data is used, but it has
the beneﬁt of allowing data to be rapidly protected, by simply delet-
ing exposed copies of the data and the cryptographic key material
needed for the transparent manipulations, as explained in Section
7.6. Access to the data can be re-enabled by manual authentication,
as outlined in Section 7.7. The scheme uses mechanisms similar to
a cryptographic ﬁlesystem. The differences are highlighted in Sec-
tion 4.
We describe how RICE is utilized in conjunction with a prototype
intrusion response engine in Section 8.1. The overhead it intro-
duces during the normal operation of the system is evaluated in
Section 8.2.
6. DESIGN
6.1 Protection Groups
Protection groups allow predeﬁned subsets of the data to be cryp-
tographically safeguarded atomically. We use them for several rea-
sons. Each group has a public key pair associated with it. Their use