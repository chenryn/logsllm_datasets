    printk(KERN_INFO “Goodbye, World!\n”);
    }
    module_init(hello_init);
    module_exit(hello_exit);
在编写内核模块前必须导入的三个头文件 `linux/init.h` , `linux/module.h`,
`linux/kernel.h`，其次是模块的加载，LKM中没有main函数，对应的是`module_init`和`module_exit`，`module_init`在LKM被加载进入内核后调用，`module_exit`在LKM被卸载时调用。  
编写完 LKM 后需要写一个简单的 Makefile
    obj-m += hello_world.o    # obj-m 表示将 hello_world.o 编译为模块， obj-y 表示将 hello_world.o 编译入内核中（更详细的内核Makefile命令的解释可以参考官方文档）
    all:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
    clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
make 后就可以看到一个 hello_world.ko 的文件
此时，通过 insmod 指令即可将 hello_world.ko 模块加载进入内核中，通过dmesg命令就可以看到hello world了。
卸载 LKM 的命令为 rmmod， 需要注意的是，如果在编写代码过程中没有写 `module_exit` 的话，LKM是不能通过 rmmod 卸载掉的！
## 0x03 Hook execve
**1\. my_hook_execve**
首先实现一个自己的sys_execve函数，这里需要注意的是，在实现自己的内核函数的时候，一定要严格按照原函数的定义来定义自己的函数，否则在调用的时候有一定的几率会
crash
    asmlinkage long my_hook_execve(const char __user *filename, const char __user * const __user *argv,
        const char __user *const  __user *envp)
    {
        char user_filename[500] = {0};
        get_user_cmdline(argv, user_filename, 500);
        return orig_execve_func(filename, argv, envp);
    }
代码逻辑比较简单，打印当前执行指令的参数后就直接调用了原本的 sys_execve 函数，这里如果之前没有对内核编码有基础了解的话，容易踩的一个坑就是
**内核代码是不能直接访问用户空间数据的** ，需要通过指定的接口来从用户空间拷贝数据到内核中。
    bool get_user_cmdline(const char __user *const __user *argv, char* cmdline, int cmd_len)
    {
        if(unlikely(argv==NULL||cmdline==NULL||cmd_len cmd_len){
                        printk("[err] %s. too much args",__FUNCTION__);
                        break;
                    }
                    strncpy(cmdline+offset, tmp, tmp_len);
                    offset += tmp_len;
                    cmdline[offset]=' ';
                    offset++;
                }
                else{
                    printk("[err] %s. copy_from_user failed. ret:%d.\n",__FUNCTION__, ret);
                }
                ++i;
            }
        }
        if(cmdline[offset-1]==' ')
            cmdline[offset-1]=0;
        printk("[cmdline]:%s, offset:%d\n", cmdline, offset);
        return true;
    }
通过 copy_from_user、strncpy_from_user、copy_to_user、get_user、put_user
可完成用户空间数据与内核的交互。
    //__copy_from_user — Copy a block of data from user space, with less checking.
    unsigned long __copy_from_user (void * to,const void __user * from,unsigned long n);
    //strncpy_from_user --  Copy a NUL terminated string from userspace.
    long strncpy_from_user (char * dst, const char __user * src, long count);
    //copy_to_user --  Copy a block of data into user space.
    unsigned long copy_to_user (void __user * to, const void * from, unsigned long n);
    //get_user --  Get a simple variable from user space.
    get_user (x, ptr);
    //put_user --  Write a simple value into user space.
    put_user (x, ptr);
**2\. 获取 sys_call_table 地址**
获取sys_call_table前首先要根据内核对应结构信息，在代码中增加相关的定义
    typedef asmlinkage long (*sys_call_ptr_t)(const struct pt_regs *);
    static sys_call_ptr_t *sys_call_table;
    typedef asmlinkage long (*execve_t)(const char __user *filename, const char __user * const __user *argv,
        const char __user *const  __user *envp, struct pt_regs *);
    execve_t orig_execve_func = NULL;
    execve_t stub_execve_func = NULL;
    sys_call_table = (sys_call_ptr_t *)kallsyms_lookup_name("sys_call_table");    //获取 sys_call_table 地址
    stub_execve_func = (execve_t)sys_call_table[__NR_execve];    // 获取stub_execve地址
    orig_execve_func = kallsyms_lookup_name("sys_execve");    // 获取原始sys_execve地址
**3\. 替换sys_execve**
因为需要对内核的代码段打patch，首先需要内核对代码段的保护（CR0），patch完毕后再开启。
        write_cr0(read_cr0() & (~0x10000));
        replace_kernel_func(stub_execve_func, orig_execve_func, (unsigned long)my_hook_execve);
        write_cr0(read_cr0() | 0x10000);
patch函数源码如下：
    static int replace_kernel_func(unsigned long handler, 
        unsigned long orig_func, unsigned long my_func)
    {
      unsigned char *tmp_addr = (unsigned char*)handler;    // stub_execve 函数的地址
      int i = 0;
      do{
    /* in x86_64 the call instruction opcode is 0x8e, 
         * occupy 1+4 bytes(E8+offset) totally
         */
        if(*tmp_addr == 0xe8){    // 从头开始找 call 指令
          int* offset = (int*)(tmp_addr+1);
          if(((unsigned long)tmp_addr + 5 + *offset) == orig_func){        // 找到 call 指令后判断是否 call 的地址是 sys_execve
            printk("call:0x%08x, offset:%08x, old_func:%08x.\n",
              (unsigned int)tmp_addr, *offset, orig_func);
    /* replace with my_func relative addr(offset) */
            *offset=my_func-(unsigned long)tmp_addr-5;        // 如果是，则替换该地址为我们自实现的地址
            printk("call:0x%08x, offset:%08x, new_func:%08x.\n", 
              (unsigned int)tmp_addr, *offset, my_func);
            return 1;
          }
        }
        tmp_addr++;
      }while(i++   