### 1.3 Linux 基础

#### 文本编辑器
- **nano, vim, emacs**：这些是常用的字符终端文本编辑器。

#### 命令行操作
- **exit**：退出当前 shell。
- **管道命令符 `|`**：将一个命令的标准输出作为另一个命令的标准输入。

#### 变量使用
- **赋值**：`var=value` 给变量 `var` 赋值为 `value`。
- **取值**：`$var` 或 `${var}` 用于获取变量的值。
- **命令替换**：``cmd`` 或 `$(cmd)` 用于代换命令的标准输出。
- **字符串**：
  - `'string'`：非替换字符串，直接输出内容。
  - `"string"`：可替换字符串，其中的变量会被解析。

```bash
$ var="test"
$ echo $var
test
$ echo 'This is a $var'
This is a $var
$ echo "This is a $var"
This is a test
$ echo $(date)
2017年 11月 06日 星期一 14:40:07 CST
$ echo $0
/bin/bash
$ $($0)
```

#### Bash 快捷键
- **方向键**：上下箭头键可以浏览历史命令。
- **Ctrl + c**：终止当前进程。
- **Ctrl + z**：挂起当前进程，使用 `fg` 命令可以恢复。
- **Ctrl + d**：删除光标处的字符或退出 shell（如果在空行）。
- **Ctrl + l**：清屏。
- **Ctrl + a**：移动到命令行首。
- **Ctrl + e**：移动到命令行尾。
- **Ctrl + b**：按单词后移（向左）。
- **Ctrl + f**：按单词前移（向右）。
- **Ctrl + Shift + c**：复制。
- **Ctrl + Shift + v**：粘贴。

更多细节请查看：[Bash Keyboard Shortcuts](https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File-Syntax.html)

#### 根目录结构
```bash
$ uname -a
Linux manjaro 4.11.5-1-ARCH #1 SMP PREEMPT Wed Jun 14 16:19:27 CEST 2017 x86_64 GNU/Linux
$ ls -al /
```

重要的目录包括：
- `/bin` 和 `/sbin`：链接到 `/usr/bin`，存放核心二进制文件。
- `/boot`：操作系统启动时所需的程序。
- `/dev`：包含所有外部设备的访问端口。
- `/etc`：系统配置文件和子目录。
- `/home`：普通用户的主目录。
- `/lib` 和 `/lib64`：链接到 `/usr/lib`，存放动态链接库。
- `/mnt`：临时挂载其他文件系统的目录。
- `/proc`：虚拟目录，映射系统内存，提供系统信息。
- `/root`：系统管理员的主目录。
- `/srv`：服务启动后需要的数据。
- `/sys`：内核设备树的直观反映。
- `/tmp`：公用的临时文件存放目录。
- `/usr`：应用程序和文件几乎都在这个目录下。
- `/var`：存放服务的日志信息。

#### 进程管理
- **top**：实时动态查看系统整体运行情况。
- **ps**：报告当前系统的进程状态。
  - 查看某进程的状态：`$ ps -aux | grep [file]`
- **kill**：删除执行中的程序或工作。
  - 删除指定 PID 的进程：`$ kill [PID]`

#### 用户和组
- **UID 和 GID**：每个用户都有唯一的 UID 和 GID。
  - 使用 `id` 命令查看用户 ID 和组 ID。
  - 示例：
    ```bash
    $ id root
    uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),19(log)
    $ id firmy
    uid=1000(firmy) gid=1000(firmy) groups=1000(firmy),3(sys),7(lp),10(wheel),90(network),91(video),93(optical),95(storage),96(scanner),98(power),56(bumblebee)
    ```
- **sudo**：允许普通用户以 root 权限运行命令。
- **su**：切换到不同的用户。
  - 示例：
    ```bash
    $ whoami
    firmy
    $ su root
    # whoami
    root
    ```

#### 权限设置
- 使用 `ls -l [file]` 查看文件或目录的信息。
- 权限表示：
  - `r`：读取权限（数字代号 4）
  - `w`：写入权限（数字代号 2）
  - `x`：执行或切换权限（数字代号 1）
- 使用 `chmod` 指令更改文件和目录的权限。
  - 示例：
    ```bash
    $ chmod a+r [file]  # 赋予所有用户读取权限
    $ chmod u-w [file]  # 取消所有者写入权限
    $ chmod g=x [file]  # 指定组权限为可执行
    $ chmod o=rwx [file]  # 指定其他人权限为可读、可写和可执行
    ```

#### 字节序
- **大端 (Big-endian)** 和 **小端 (Little-endian)**：两种字节存储机制。
  - 大端：最重要的字节放在低地址。
  - 小端：最不重要的字节放在低地址。
- 常见的处理器字节序：
  - Intel 处理器：小端
  - PowerPC 处理器：大端
  - TCP/IP 协议和 Java 虚拟机：大端

#### 输入输出
- **命令输出作为参数**：
  - `./vulnerable 'your_command_here'`
  - `./vulnerable $(your_command_here)`
- **命令作为输入**：
  - `your_command_here | ./vulnerable`
- **命令行输出写入文件**：
  - `your_command_here > filename`
- **文件作为输入**：
  - `./vulnerable < filename`

#### 核心转储
- **修改转储文件保存路径**：
  - `echo 1 > /proc/sys/kernel/core_uses_pid` 使生成的核心转储文件名变为 `core.[pid]`。
  - `echo /tmp/core-%e-%p-%t > /proc/sys/kernel/core_pattern` 控制生成核心转储文件的保存位置和文件名格式。
- **使用 gdb 调试核心转储文件**：
  - `gdb [filename] [core file]`

示例：
```bash
$ cat core.c
#include <stdio.h>
void main(int argc, char **argv) {
    char buf[5];
    scanf("%s", buf);
}
$ gcc -m32 -fno-stack-protector core.c
$ ./a.out
AAAAAAAAAAAAAAAAAAAA
Segmentation fault (core dumped)
$ file /tmp/core-a.out-12444-1503198911
/tmp/core-a.out-12444-1503198911: ELF 32-bit LSB core file Intel 80386, version 1 (SYSV), SVR4-style, from './a.out', real uid: 1000, effective uid: 1000, real gid: 1000, effective gid: 1000, execfn: './a.out', platform: 'i686'
$ gdb a.out /tmp/core-a.out-12444-1503198911 -q
Reading symbols from a.out...(no debugging symbols found)...done.
[New LWP 12444]
Core was generated by `./a.out'.
```