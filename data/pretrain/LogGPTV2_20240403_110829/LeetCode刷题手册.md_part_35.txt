Explanation: 
output: [1，3，4]
Input: [1,2,3,null,5,null,4]
func rob(nums []int) int {
//解法三 模拟
return max(a, b)
for i := O; i  O { 
return []int{}
if curNum == 0 {
tmp = []int{} 
queue = queue[1:]
tmp = append(tmp, node.val)
if node.Right != nil { 
nextLevelNum = 0 
curNum = nextLevelNum 
res = append(res, tmp[len(tmp)-1])
curNum--
if node.Left != nil {
node := queue[0] 
 queue = append(queue, node.Right) 
Right *TreeNode
Left *TreeNode
Val int 
 nextLevelNum++
queue = append(queue, node.Left)
nextLevelNum++
---
## Page 328
代码
解题思路
通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。
给定一个由‘1′（陆地）和'0′（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是
题目大意
 Example 2:
Example 1:
surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You 
Given a 2d grid map of '1's (land) and C'0' s (water), count the number of islands. An island is 
题目
200. Number of Islands
·要求找出地图中的孤岛。孤岛的含义是四周被海水包围的岛。
Output:3
00011
00100
11000
Input:
Output: 1
11000
00000
11000
11010
11110
Input:
陆地，也都标识上访问过。每次遇到新的"1"且没有访问过，就相当于遇到了新的岛屿了。
这一题可以按照第 79 题的思路进行搜索，只要找到为"1"的岛以后，从这里开始搜索这周连通的
---
## Page 329
Example 1: 
this range, inclusive.
Given a range [m, n] where 0 >= 1
 return 0
11010
n >>=
，说明后面不同的位数已经都被抹平了，1都被打掉为 0了。所以关键的操作为n &=（n －
，清除最低位的1。这个算法名叫 Brian Kernighan 算法。
e leetcode
1
 最后把 m 或者 n 的右边添上
---
## Page 331
按照题意要求做即可。
解题思路
false。
来，反复的加，最终如果能有结果是1，则是"快乐数字"，如果不能得到一，出现了循环，则输出
判断一个数字是否是"快乐数字"，“快乐数字"的定义是，不断的把这个数字的每个数字的平方和加起
题目大意
Example 1: 
Those numbers for which this process ends in 1 are happy numbers.
number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
replace the number by the sum of the squares of its digits, and repeat the process until the
 A happy number is a number defined by the following process: Starting with any positive integer,
Write an algorithm to determine if a number is "happy".
202. Happy Number
题目
28
12+92=82
Explanation:
Output: true
Input: 19 
func rangeBitwiseAnd(m int, n int) int {
// 解法二 Brian Kernighan's algorithm
2+02+02=1
2 + 82 = 100
2 + 22 = 68
return n
for n>m{ 
return m 2->3->4->5 
res = 0 
num = res
record[res] = res
1->2->6->3->4->5->6, val = 6 
 return true
---
## Page 333
Example:
Count the number of prime numbers less than a non-negative number, n.
题目
204. Count Primes
代码
按照题意做即可。
解题思路
删除链表中所有指定值的结点。
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
output:4
Input: 10
func removeElements(head *ListNode, val int) *ListNode {
package leetcode
* type ListNode struct {
if head == nil { 
return newHead.Next
for cur != nil { 
cur := head 
pre := newHead 
newHead := &ListNode{Val: O, Next: head}
 Definition for singly-linked list.
if cur.val == val {
 return head 
cur = cur.Next
else{ 
 pre = cur
 pre.Next = cur.Next
Next *ListNode
Val int 
---
## Page 334
Example 1: 
to itself.
order of characters. No two characters may map to the same character but a character may map
All occurrences of a character must be replaced with another character while preserving the
 Two strings are isomorphic i the characters in s can be replaced to get t.
Given two strings s and t, determine if they are isomorphic.
题目
 205. Isomorphic Strings
代码
解题思路
统计所有小于非负整数n的质数的数量。
题目大意
·给出一个数字n，要求输出小于 n 的所有素数的个数总和。简单题。
func countPrimes(n int) int {
package leetcode 
return count
for i := 2; i< n; i++ { 
count := 0 
isNotPrime := make([]bool, n)
if !isNotPrime[i] {
if isNotPrime[i]{ 
 isNotPrime[j] = true 
continue 
count++
---
## Page 335
代码
这道题做法和第 290 题基本一致。
解题思路
映射，则输出 true，反之输出 false。
给定一个初始字符串串，判断初始字符串是否可以通过字符映射的方式，映射到目标字符串，如果可以
的。
这道题和第 290 题基本是一样的。第 290 题是模式匹配，
题目大意
You may assume both s and t have the same length.
Note:
 Example 3:
Example 2: 
func isIsomorphic(s string, t string) bool 
package leetcode
Output: true 
Input: S = "paper", t = "title"
Output: false
Input: S = "foo", t = "bar"
output: true
Input: s = "egg", t = "add"
patternByte := []byte(s)
strList := []byte(t) 
 return false
M
这道题的题意是字符串映射，实质是一样
---
## Page 336
代码
按照题意做即可。
解题思路
翻转单链表
题目大意
Reverse a singly linked list.
题目
206. Reverse Linked List
package leetcode
* type ListNode struct { 
 Definition for singly-linked list.
return true
for index, b := range patternByte {
sMap := map[byte]byte{} 
pMap := map[byte]byte{}
} else {
if pMap[b] != strList[index]{
} else{ 
if
Next *ListNode
Val int 
return false 
if sMap[strList[index]] !=b {
 pMap[b] = StrList[index]
sMap[strList[index]] = b
 return false
 ok = sMap[strList[index]]; !ok { 
---
## Page 337
Example 2: 
Example 1:
all courses?
 Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish
Some courses may have prerequisites, for example to take course O you have to first take course 
There are a total of n courses you have to take, labeled from O to n-1.
1, which is expressed as a pair: [o,1]
题目
207. Course Schedule
course 0 you should 
Explanation: There are a total of 2 courses to take.
Output: false 
Input: 2, [[1,0],[0,1]]
possible.
Explanation: There are a total of 2 courses to take.
output: true
Input: 2, [[1,0]]
func reverseList(head *ListNode) *ListNode {
type ListNode struct 
// ListNode define
return behind
for head != nil { 
var behind *ListNode
Next *ListNode
Val
head = next
oehind = head 
head.Next = behind
next := head.Next
 int 
 also have finished course l. so it is impossible.
To take course 1 you should have finished course 0. So it is
~
---
## Page 338
代码
解题思路
件，判断是否可能完成所有课程的学习？
课程0，你需要先完成课程1，我们用一个匹配来表示他们：[0,1]。给定课程总量以及它们的先决条
现在你总共有 n 门课需要选，记为0 到n-1。在选修某些课程之前需要一些先修课程。例如，想要学习
题目大意
Note:
·这一题就是标准的 AOV网的拓扑排序问题。拓扑排序问题的解决办法是主要是循环执行以下两
·给出n个任务，每两个任务之间有相互依赖关系，比如A任务一定要在B 任务之前完成才行。问
2. You may assume that there are no duplicate edges in the input prerequisites.
 1. The input prerequisites is a graph represented by a list of edges, not adjacency matrices.