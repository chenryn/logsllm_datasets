    To embed an XXE payload in an SVG image, you need to first open up the image as a text file. Take this SVG image of a blue circle, for example:
    嵌入一个XXE有效载荷到SVG图像中，您需要先将图像作为一个文本文件打开。以这个蓝色圆形的SVG图像为例：
    Insert the XXE payload by adding a DTD directly into the file and referencing the external entity in the SVG image. You can then save the file as an
     .svg
    file and upload it to the server:
    将XXE负载插入文件中，通过直接在文件中添加DTD并在SVG图像中引用外部实体。然后，您可以将文件保存为.svg文件，并上传到服务器：
]>
  &test;
    Microsoft Word documents (
     .docx
    files), PowerPoint presentations (
     .pptx
    ), and Excel worksheets (
     .xlxs
    ) are archive files containing XML files, so you can insert XXE payloads into them as well. To do so, you should first unzip the document file. For example, I used the Unarchiver software on a Mac to extract the files. You should see a few folders containing XML files (
     Figure 15-1
    ).
    Microsoft Word 文档（.docx 文件）、PowerPoint 演示文稿（.pptx）和 Excel 工作表（.xlxs）均为包含 XML 文件的档案文件，因此您也可以在其中插入 XXE 负载。为此，您首先需要解压缩文档文件。例如，我在 Mac 上使用 Unarchiver 软件提取文件。您应该会看到几个包含 XML 文件的文件夹（图 15-1）。
       Figure 15-1
      : When you unarchive a DOCX file, you will see a few folders containing XML files.
      图15-1：当你解压一个DOCX文件时，你会看到几个包含XML文件的文件夹。
    Then you can simply insert your payload into
     /word/document.xml
    ,
     /ppt/presentation.xml
    , or
     /xl/workbook.xml
    . Finally, repack the archives into the
     .docx
    ,
     .pptx
    , or
     .xlxs
    format.
    然后，您可以将负载简单地插入到/word/document.xml、/ppt/presentation.xml或/xl/workbook.xml中。最后，将归档重新打包成.docx、.pptx或.xlxs格式。
    You can do this by
     cd
    ing into the unarchived folder and running the command
     zip -r
     filename.format
     *
    . The
     zip
    command line utility archives files. The
     -r
    option tells
     zip
    to recursively archive files in directories,
     filename.format
    tells zip what the name of the archived file should be, and
     *
    tells zip to archive all files in the current directory. In this case, you can run these commands to create a new DOCX file:
    你可以通过进入未归档文件夹并运行命令zip -r文件名格式*来完成此操作。 zip命令行实用程序对文件进行归档。 -r选项告诉zip递归地在目录中归档文件，文件名格式告诉zip所归档文件的名称，*告诉zip归档当前目录中的所有文件。在这种情况下，您可以运行这些命令来创建新的DOCX文件：
cd example
zip -r new_example.docx *
    You should see the repacked document appear in the current directory.
    你应该能看到重新打包的文档出现在当前目录下。
    Step 5: Test for XInclude Attacks
    Sometimes you cannot control the entire XML document or edit the DTD of an XML document. But you can still exploit an XXE vulnerability if the target application takes your user input and inserts it into XML documents on the backend.
    有时你无法控制整个XML文档，或者编辑XML文档的DTD。但是如果目标应用程序接受您的用户输入并将其插入后端的XML文档中，您仍然可以利用XXE漏洞。
    In this situation, you might be able to execute an XInclude attack instead.
     XInclude
    is a special XML feature that builds a separate XML document from a single XML tag named
     xi:include
    . If you can control even a single piece of unsanitized data passed into an XML document, you might be able to place an XInclude attack within that value.
    在这种情况下，你可能会执行一个XInclude攻击。 XInclude是一种特殊的XML功能，可以从一个名为xi：include的单个XML标记构建单独的XML文档。如果您可以控制传递到XML文档的未经过滤的数据的任何一个部分，则可能将XInclude攻击放置在该值中。
    To test for XInclude attacks, insert the following payload into the data entry point and see if the file that you requested gets sent back in the response body:
    为测试XInclude攻击，请将以下负载插入到数据输入点中，并查看请求的文件是否会发送回响应主体中：
    This piece of XML code does two things. First, it references the
     http://www.w3.org/2001/XInclude
    namespace so that we can use the
     xi:include
    element. Next, it uses that element to parse and include the
     /etc/hostname
    file in the XML document.
    这段XML代码有两个作用。首先，它引用了http://www.w3.org/2001/XInclude命名空间，以便我们可以使用xi:include元素。接下来，它使用该元素来解析并包含XML文档中的/etc/hostname文件。
    Escalating the Attack
    What you can achieve with an XXE vulnerability depends on the permissions given to the XML parser. Generally, you can use XXEs to access and exfiltrate system files, source code, and directory listings on the local machine. You can also use XXEs to perform SSRF attacks to port-scan the target’s network, read files on the network, and access resources that are hidden behind a firewall. Finally, attackers sometimes use XXEs to launch DoS attacks.
    使用XXE漏洞可以获得的权限取决于XML解析器授予的权限。通常，您可以使用XXE来访问和窃取本地机器上的系统文件、源代码和目录列表。您还可以使用XXE执行SSRF攻击来端口扫描目标网络、读取网络上的文件以及访问隐藏在防火墙后的资源。最后，攻击者有时使用XXE启动DoS攻击。
    Reading Files
    To read local files by using an XXE vulnerability, place the local file’s path into the DTD of the parsed XML file. Local files can be accessed by using the
     file://
    URL scheme followed by the file’s path on the machine. This payload will make the XML parser return the contents of the
     /etc/shadow
    file on the server:
    使用XXE漏洞读取本地文件，将本地文件路径放入已解析XML文件的DTD中。可以使用文件：// URL方案后跟该机器上的文件路径来访问本地文件。此有效载荷将使XML解析器返回服务器上/ etc / shadow文件的内容。
]>
&file;
    Launching an SSRF
    Besides retrieving system files, you can use the XXE vulnerability to launch SSRF attacks against the local network. For example, you can launch a port scan by switching out the external entity’s URL with different ports on the target machine. This is similar to the port-scanning technique mentioned in
     Chapter 13
    , where you can determine the status of a port by analyzing differences in the server’s responses:
    除了检索系统文件外，您还可以使用XXE漏洞发起针对本地网络的SSRF攻击。例如，您可以通过在目标机器上使用不同的端口替换外部实体的URL来发起端口扫描。这类似于第13章提到的端口扫描技术，通过分析服务器响应中的差异可以确定端口的状态。
]>
&file;
    You can also use an XXE to launch an SSRF to pull instance metadata, as we talked about in
     Chapter 13
    . This payload will make the parser return AWS metadata:
    您还可以使用 XXE 进行 SSRF 启动来提取实例元数据，就像我们在第13章中讨论的那样。此有效载荷将导致解析器返回 AWS 元数据。
]>
&file;
    When trying to view unintended data like this, you should look for the exfiltrated data by inspecting the page source code (right-click the page and click
     View Source
    ) or HTTP response directly, rather than viewing the HTML page rendered by the browser, because the browser might not render the page correctly.
    当尝试查看意外数据时，应该通过检查页面源代码（右键单击页面并单击“查看源代码”）或直接查看HTTP响应来查找渗透的数据，而不是查看浏览器呈现的HTML页面，因为浏览器可能无法正确呈现该页面。
    Of course, what you can do with an XXE-based SSRF isn’t simply limited to network scanning and retrieving instance metadata. You can also use the information you gathered to pivot into internal services. For more ideas of how to exploit SSRFs, visit
     Chapter 13
    .
    当然，通过基于XXE的SSRF，您可以做的不仅仅局限于网络扫描和检索实例元数据。您还可以使用收集的信息来进入内部服务。有关如何利用SSRF的更多想法，请访问第13章。
    Using Blind XXEs
    Sometimes the application does not return the results of XML parsing to the user. In this case, you can still exfiltrate data to a server that you control by forcing the XML parser to make an external request with the desired data in the request URL—the blind XXE attacks mentioned earlier. Then you can monitor your server logs to retrieve the exfiltrated data. At this point, you might think the payload of a blind XXE looks like this:
    有时，应用程序不能向用户返回XML解析的结果。 在这种情况下，您仍可以通过强制XML解析器在请求URL中进行外部请求并将所需数据包含在其中，从而将数据窃取到您控制的服务器上 - 就像先前提到的盲目XXE攻击一样。 然后，您可以监视您的服务器日志以检索窃取的数据。 这时，您可能认为盲目XXE的有效载荷看起来像这样：
]>
&exfiltrate;
    This payload is meant to exfiltrate the
     /etc/shadow
    file on the server by making a request to the attacker’s server with the file’s contents in a URL parameter. The payload first defines an external entity
     file
    that contains the contents of the local
     /etc/shadow
    file. Then it makes a request to the attacker’s server with the contents of that file in the request’s URL parameter.
    该有效载荷旨在通过在请求的URL参数中使用文件内容向攻击者的服务器请求服务器上的/etc/shadow文件。有效载荷首先定义一个包含本地/etc/shadow文件内容的外部实体文件，然后使用该文件的内容向攻击者的服务器发送请求。
    However, this attack probably wouldn’t work, because most parsers do not allow external entities to be included in other external entities. And parsers would stop processing the DTD once they encounter this line:
    . So exfiltrating data by using a blind XXE is a bit more complicated than in a classic XXE.
    然而，这种攻击很可能不起作用，因为大多数解析器不允许在其他外部实体中包含外部实体。一旦遇到这行代码：，解析器就会停止处理DTD。因此，使用盲XXE泄露数据比传统XXE要复杂一些。
    Fortunately, XML DTDs have a feature called
     parameter entities
    that we can use instead. Parameter entities are XML entities that can be referenced only elsewhere within the DTD. They are declared and referenced with a percent (
     %
    ) character. For example, the blind XXE payload I introduced earlier can be rewritten as follows:
    幸运的是，XML DTD具有参数实体的功能，我们可以使用它来替代。参数实体是只能在DTD内的其他地方引用的XML实体。它们是通过百分号(%)字符声明和引用的。例如，我之前介绍的盲目XXE负载可以重写为下面的形式：
 1
  "> 2
  %ent;
  %exfiltrate;
]>
    This DTD first declares a parameter entity called
     file
    that contains the file contents of
     /etc/shadow
     1
    . Then it declares a parameter entity named
     ent
    that contains a dynamic declaration of another parameter entity called
     exfiltrate
     2
    .
     &#x25;
    is the hex-encoded version of the percent sign (
     %
    ). Depending on your target, hex encoding is sometimes needed for special characters within dynamic declarations. The
     exfiltrate
    entity points to the attacker’s server with the contents of
     /etc/shadow
    in the URL parameter.
    Finally, the DTD references
     ent
    to declare the
     exfiltrate
    entity and then references
     exfiltrate
    to trigger the outbound request.
    此DTD首先声明一个名为file的参数实体，其中包含/etc/shadow的文件内容1。然后声明一个名为ent的参数实体，其中包含对另一个名为exfiltrate的参数实体的动态声明2。&#x25;是百分号（％）的十六进制编码版本。根据您的目标，动态声明中的特殊字符有时需要进行十六进制编码。exfiltrate实体使用URL参数将内容指向攻击者服务器上的/etc/shadow。最后，DTD引用ent声明exfiltrate实体，然后引用exfiltrate触发出站请求。
    But if you try to upload this payload to a target, you might notice that it does not work. This is because, according to XML specifications, parameter entities are treated differently in inline DTDs (DTDs within the XML document specified within the
     DOCTYPE