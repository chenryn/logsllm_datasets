b) Verify all (cid:3)Sij against (cid:3)Pij using Xi and Aik. Buffer
each (correct) H si(j) created in the process. Mark
each share that does not pass the veriﬁcation as in-
(cid:3)Sij, (cid:3)Pij, H si(j)) to the respective trustee.
valid, and do not forward the corresponding tuple
(
c) Create the commitment to the ﬁnal list of secrets T (cid:5)
(T (cid:5)
0, . . . , T (cid:5)
m−1) by randomly selecting T (cid:5)
l| = tl for all l ∈ {0, . . . , m − 1}.
that |T (cid:5)
(cid:4)
d) Compute the aggregate Schnorr commit V =
i Vi
and the Schnorr challenge c = H(V (cid:5) H(C) (cid:5) T (cid:5)
).
l ⊂ Tl such
=
e) Prepare the message
(cid:11)I2i(cid:12)x0 = (cid:11)H(C), c, T (cid:5), (
(cid:3)Sji, (cid:3)Pji, H sj (i)
(cid:12)x0
,
)j∈T (cid:2)
l
449
record it in L, and send it to trustee i ∈ Tl.
4) Secret Acknowledgment (Server). Each trustee i ∈ Tl
acknowledges the client’s commitment by executing the
following steps:
l in T (cid:5) and that f +1 ≤
a) Check that |T (cid:5)
(cid:2)m−1
l=0 tl. Abort if any of those conditions does not
hold.
b) Compute the Schnorr response ri = vi − cxi.
c) Prepare the message
l| = tl for each T (cid:5)
(cid:11)R2i(cid:12)xi = (cid:11)H(I2i), ri(cid:12)xi
and send it back to the client.
5) Decryption Request (Client). The client requests the
decryption of the secrets from the trustees by presenting
a valid Schnorr signature on his commitment:
a) Record each received (cid:11)R2i(cid:12)xi message in L.
b) Compute the aggregate Schnorr response r =
(cid:2)
i ri
and create a list of exceptions E that contains infor-
mation on missing server commits and/or responses.
c) Prepare the message
(cid:11)I3(cid:12)x0 = (cid:11)H(C), r, E(cid:12)x0 ,
record it in L, and broadcast it to all servers.
6) Share Decryption (Server). To decrypt received shares,
each trustee i ∈ Tl performs step 2 of PVSS:
a) Check that (c, r) forms a valid Schnorr signature on
T (cid:5) taking exceptions recorded in E into account and
verify that at least 2f + 1 servers signed. Abort if any
l that (cid:3)Sji veriﬁes against (cid:3)Pji using
of those conditions does not hold.
b) Check for all j ∈ T (cid:5)
c) If the veriﬁcation fails, mark (cid:3)Sji as invalid and do not
decrypt it. Otherwise, decrypt (cid:3)Sji by computing Sji =
(cid:3)Sji)x−1
i = Gsj (i) and create a decryption consistency
H sj (i) and public key Xi.
(
proof Pji.
d) Prepare the message
(cid:11)R3i(cid:12)xi = (cid:11)H(I3), (Sji, Pji)j∈T (cid:2)
(cid:12)xi
l
and send it back to the client.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
7) Randomness Recovery (Client). To construct the col-
lective randomness, the client performs step 3 of PVSS:
a) Record all received (cid:11)R3i(cid:12)xi messages in L.
b) Check each share Sji against Pji and mark invalid
ones.
c) Use Lagrange interpolation to recover the individual
Si0 that have enough valid shares Sij and abort if even
a single one of the secrets previously committed to in
T (cid:5) cannot be reconstructed.
(cid:6)
i∈(cid:3)
d) Compute the collective random value as
Si0 ,
Z =
T (cid:2)
l
and publish Z and L.
2) Randomness Veriﬁcation: A veriﬁer who wants to check
the validity of the collective randomness Z against the tran-
script
L = (C,(cid:11)I1(cid:12)x0
,(cid:11)I2i(cid:12)x0
has to perform the following steps:
,(cid:11)R1i(cid:12)xi
,(cid:11)R2i(cid:12)xi
,(cid:11)I3(cid:12)x0
,(cid:11)R3i(cid:12)xi )
1) Verify the values of arguments included in the session
conﬁguration C = (X, T, f, u, w). Speciﬁcally, check
that |X| = n = 3f + 1, that groups Tl deﬁned in T are
(cid:2)m−1
l=0 |Tl|,
non-overlapping and balanced, that |X| =
that each group threshold satisﬁes tl = |Tl|/3 + 1, that u
and w match the intended use of Z, and that the hash of
C matches H(C) as recorded in the messages.
2) Verify all signatures of (cid:11)I1(cid:12)x0, (cid:11)R1i(cid:12)xi, (cid:11)I2i(cid:12)x0, (cid:11)R2i(cid:12)xi
(cid:11)I3(cid:12)x0, and (cid:11)R3i(cid:12)xi. Ignore invalid messages for the rest
of the veriﬁcation.
3) Verify that H(I1) matches the hash recorded in R1i.
Repeat for I2i and R2i, and I3 and R3i. Ignore messages
that do not include the correct hash.
4) Check that T (cid:5) contains at least f + 1 secrets, that the
collective signature on T (cid:5) is valid and that at least 2f + 1
servers contributed to the signature (taking into account
5) Verify each recorded encrypted share (cid:3)Sij, whose secret
the exceptions in E).
was chosen in T (cid:5), against the proof (cid:3)Pij using Xi and
Aik. Abort if there are not enough shares for any secret
chosen in T (cid:5).
proof Pij where the corresponding (cid:3)Sij was found to be
valid. Abort if there are not enough shares for any secret
chosen in T (cid:5).
7) Verify Z by recovering Z(cid:5) from the recovered individual
secrets Si0 and by checking that Z = Z(cid:5). If the values
are equal, then the collective randomness Z is valid.
Otherwise, reject Z.
6) Verify each recorded decrypted share Sij against
the
C. Security Properties
RandHound provides the following security properties:
1) Availability. For an honest client, the protocol success-
fully completes and produces the ﬁnal random output Z
with high probability.
450
2) Unpredictability. No party learns anything about the ﬁnal
random output Z, except with negligible probability, until
the secret shares are revealed.
3) Unbiasability. The ﬁnal random output Z represents an
unbiased, uniformly random value, except with negligible
probability.
4) Veriﬁability. The collective randomness Z is third-party
veriﬁable against
that serves as an
unforgeable attestation that the documented set of par-
ticipants ran the protocol to produce the one-and-only
random output Z, except with negligible probability.
the transcript L,
In the discussion below, we assume that each honest node
follows the protocol and that all cryptographic primitives
RandHound uses provide their intended security properties.
Speciﬁcally, the (t, n)-PVSS scheme ensures that a secret can
be recovered only by using a minimum of t shares and that
the shares do not leak information about the secret.
Availability. Our goal is to ensure that an honest client
can successfully complete the protocol, even in the presence
of adversarial servers that misbehave arbitrarily, including by
refusing to participate. A dishonest client can always abort
the protocol, or simply not run it, so we do not consider a
“self-DoS” by the client to be an attack on availability. In the
remaining security properties, we can thus restrict our concern
to attacks in which a dishonest client might corrupt (e.g. bias)
the output without affecting the output’s availability.
According to the protocol speciﬁcation, an honest client
randomly assigns (honest and dishonest) nodes to their groups.
Therefore, each group’s ratio of honest to dishonest nodes will
closely resemble the overall ratio of honest to dishonest nodes
in the entire set. Given that n = 3f + 1, the expected number
of nodes in a group Tl is about 3f /m. The secret-sharing
threshold of tl = |Tl|/3 + 1 = (3f /m)/3 + 1 = f /m + 1
enables 2f /m honest nodes in each group to recover its
group secret without the collaboration of malicious nodes. This
ensures availability, with high probability, when the client is
honest. Section V-C analyzes of the failure probability of a
RandHound run for different parameter conﬁgurations.
Unpredictability. We want to ensure that output Z remains
unknown to the adversary until step 7 of the protocol, when
honest nodes decrypt and reveal the secret shares they hold.
The random output Z is a function of m group secrets,
where each group contributes exactly one secret that depends
on tl
is
recoverable using PVSS with tl shares. In order to achieve
unpredictability, there must be at least one group secret that
remains unknown to the adversary until step 7.
inputs from group members. Further, each input
there exists at
We will show that
least one group for
which the adversary cannot prematurely recover the group’s
secret. An adversary who controls the dishonest client can
deviate from the protocol description and arbitrarily assign
nodes to groups. Assuming that there are h honest nodes
in total and m groups, then by the generalized pigeonhole
principle, regardless of how the dishonest client assigns the
groups, there will be at least one group which contains at
least (cid:13)h/m(cid:14) nodes. In other words, there must be at least
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
one group with at least an average number of honest nodes.
Therefore, we set the threshold for secret recovery for each
group l such that the number of nodes needed to recover
the group secret contains at least one honest node, that is,
|Tl|−h/m+1 = f /m+1. In RandHound, we have n = 3f +1
and tl = |Tl|/3 + 1 = (3f /m)/3 + 1 = f /m + 1 as needed.
Consequently, the adversary will control at most m − 1
groups and obtain at most m − 1 group secrets. Based on the
properties of PVSS, and the fact that Z is a function of all m
group secrets, the adversary cannot reconstruct Z without the
shares held by honest nodes that are only revealed in step 7.
Unbiasability. We want to ensure that an adversary cannot
inﬂuence the value of the random output Z.
In order to prevent the adversary from controlling the output
Z, we need to ensure that there exists at least one group for
which the adversary does not control the group’s secret. If,
for each group, the adversary can prematurely recover honest
nodes’ inputs to the group secret and therefore be able to
prematurely recover all groups’ secrets, then the adversary can
try many different valid subsets of the groups’ commits to
ﬁnd the one that produces the Z most beneﬁcial to him. If,
for each group, the adversary can exclude honest nodes from
contributing inputs to the group secret, then the adversary has
full control over all group secrets, hence Z.
(cid:2)m−1
l=0 tl =
As argued in the discussion of unpredictability, there exists
at least one group for which the adversary does not control
its group secret. Furthermore, the requirement that the client
(cid:2)m−1
has to select tl inputs from each group in his commitment T (cid:5)
l=0 f /m + 1 = f + m
ensures that at least
inputs contribute to the group secrets, and consequently to the
output Z. Combining these two arguments, we know that there
is at least one group that is not controlled by the adversary
and at least one honest input from that group contributes to Z.
As a result, the honest member’s input randomizes the group’s
secret and Z, regardless of the adversary’s actions.
Lastly, the condition that at least 2f + 1 servers must sign
off on the client’s commitment T (cid:5) ensures that a malicious
client cannot arrange malicious nodes in such a way that would
enable him to mount a view-splitting attack. Without that last
condition the adversary could use different arrangements of
honest and dishonest inputs that contribute to Z and generate
multiple collective random values with valid transcripts from
which he could choose and release his preferred one.
Veriﬁability. In RandHound, only the client obtains the
ﬁnal random output Z. In order for Z to be usable in other
contexts and by other parties, any third party must be able to
independently verify that Z was properly generated. Therefore,
the output of RandHound consists of Z and a transcript
L, which serves as third-party veriﬁable proof of Z. The
transcript L must (a) enable the third party to replay the
protocol execution, and (b) be unforgeable.
L contains all messages sent and received during the pro-
tocol execution, as well as the session conﬁguration C. If the
verifying party ﬁnds C acceptable, speciﬁcally the identities of
participating servers, he can replay the protocol execution and
verify the behavior of the client and the servers, as outlined
in Section III-B2. After a successful protocol run completes,
the only relevant protocol inputs that remain secret are the
private keys of the client and the servers. Therefore, any third
party on its own can verify L and decide on its validity since
the private keys are only used to produce signatures and the
signatures are veriﬁed using the public keys.
If an adversary can forge the transcript, producing a valid
transcript without an actual run of the protocol,
then the
adversary must be in possession of the secret keys of all
participant listed in C, violating the assumption that at most
f nodes are controlled by the adversary.
Therefore, under the assumption that all cryptographic prim-
itives used in RandHound offer their intended security proper-
ties, it is infeasible for any party to produce a valid transcript,
(cid:2)m−1
except by legitimately running the protocol to completion with
l| servers
l=0 |T (cid:5)
the willing participation of the at least
listed in the client’s commitment vector T (cid:5) (step 3).
Further Considerations. In each protocol run, the group
element H is derived from the session identiﬁer H(C), which
mitigates replay attacks. A malicious server that tries to replay
an old message is immediately detected by the client, as the
replayed PVSS proofs will not verify against the new H.
It is also crucial for RandHound’s security that none of the
participants knows a logarithm a with G = H a. Otherwise
the participant can prematurely recover secret shares since
(H si(j))a = H asi(j) = Gsi(j) = Sij, which violates Rand-
Hound’s unpredictability property and might even enable a
malicious node to bias the output. This has to be taken into
account when deriving H from H(C). The naive way to map
H(C) to a scalar a and then set H = Ga is obviously insecure
as G = H 1/a. The Elligator mappings [7] provide a secure
option for elliptic curves.
D. Extensions
Each Lagrange interpolation that the client has to perform to
recover a server’s secret can be replaced by the evaluation of
a hash function as follows: Each server i sends, alongside his
encrypted shares, the value H(si(0)) as a commitment to the
client in step 2. After the client’s request to decrypt the shares,
each server, whose secret was chosen in T (cid:5), replies directly
with si(0). The client checks the received value against the
server’s commitment and, if valid, integrates it into Z.
Note that the veriﬁcation of the commitment is necessary,
as a malicious server could otherwise just send an arbitrary
value as his secret that would be integrated into the collective
randomness thereby making it unveriﬁable against the tran-
script L. The client can still recover the secret as usual from
the decrypted shares with Lagrange interpolation if the above
check fails or if the respective server is unavailable.
Finally, SCRAPE [16] provides a new approach to decen-
tralized randomness that builds upon an improved version of
PVSS. While this approach is orthogonal to ours, the improved
PVSS scheme has a lower veriﬁcation complexity and can be
used to reduce the complexity of RandHound from O(c2n) to
O(cn), making it more scalable.
451
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
IV. RANDHERD: A SCALABLE RANDOMNESS COTHORITY
TSS Group 1
This section introduces RandHerd, a protocol that builds
a collective authority or cothority [58] to produce unbiasable
and veriﬁable randomness. RandHerd serves as a decentralized
randomness beacon [45], [49], efﬁciently generating a regular
stream of random outputs. RandHerd builds on RandHound,
but requires no distinguished client to initiate it, and signiﬁ-
cantly improves repeat-execution performance.
We ﬁrst outline RandHerd, then detail the protocol, analyze
its security properties, and explore protocol extensions.
A. Overview
RandHerd provides a continually-running decentralized ser-
vice that can generate publicly veriﬁable and unbiasable ran-
domness on demand, at regular intervals, or both. RandHerd’s
goal
is to reduce communication and computational over-
head of the randomness generation further from RandHound’s