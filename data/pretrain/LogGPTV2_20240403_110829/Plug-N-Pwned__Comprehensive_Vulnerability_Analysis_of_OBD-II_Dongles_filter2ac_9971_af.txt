(cid:88)
(cid:88)
(cid:88)
V4
(cid:88)
(cid:88)
(cid:88)
V3
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
V1.1
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 8: Dongle Vulnerability Status by Connection Name.
(V1 to V4). The dongles with duplicated connection names
possibly share the same development model, and thus it is
likely that they also share the same vulnerability status.
6 Attack Case Studies
To demonstrate the severity of the vulnerabilities discovered
in §5, we construct 4 classes of concrete attacks building
up these vulnerabilities and validated them on our testing
vehicle. These 4 attacks can lead to a wide range of security
implications, including privacy, property theft, and even the
safety of the drivers, passengers and pedestrians.
Prior to launching these attacks, an attacker ﬁrst sniffs
broadcast connection information from surrounding wireless
network. Based on the sniffed information, she can identify
a vulnerable OBD-II dongle by leveraging V5, or arbitrarily
tries to connect to a nearby dongle for attacks. Next, lack of
connection-level authentication vulnerability (V1.1) allows
the attacker to establish a connection. Note that multiple
device access vulnerability (V2) can enable such a malicious
connection even when the dongle is connected with the
vehicle owner’s mobile device, which signiﬁcantly increases
the attack ﬂexibility. Having established the connection, if
lack of application-level authentication vulnerability (V1.2)
exists, the attacker can conduct at least 4 attacks on the
victim vehicle including vehicle-related data leakage (A1),
property theft (A2), vehicle control interference (A3), and
in-vehicle network inﬁltration (A4). Each attack needs one
or more identiﬁed vulnerabilities as precondition, which
is summarized in Table 9. We also present the number of
dongles vulnerable to each attack, including the statistics
with or without two optional preconditions (V2 or V5). When
either V2 or V5 exists, the ﬂexibility or success rate of the
attack is much higher. Next, we describe each attack in detail.
A1. Vehicle-related Data Leakage. This attack only requires
V1 to enable a nearby attacker to connect and read private data
from the vulnerable OBD-II dongle with OBD-II PIDs [14].
We have demonstrated a few cases which can harvest location,
vehicle diagnostic data, and CAN bus trafﬁc from a victim
vehicle through a vulnerable dongle, which endangers user
privacy or assists other complicated attacks. As indicated
in the table, 65 (84.42%) OBD-II dongles in our study are
vulnerable to this attack.
• A1.1. Location Leakage. Using the diagnostic PID 09 02,
an attacker is able to get the vehicle identiﬁcation number
(VIN) which uniquely identiﬁes an automobile. Since the
VIN is also printed on the dashboard on the driver side and
can be seen from outside, the attacker is capable of locating
the target vehicle where a vulnerable dongle is installed,
and performs further attacks.
• A1.2. Diagnostic Data Leakage. In addition to the VIN,
an attacker is also able to read diagnostic data from the
vehicle with the PIDs, including odometer, fuel rate, engine
RPM, etc., which invades the privacy of the vehicle owner.
Additionally, she can also analyze the driving behaviour
and ﬁngerprint drivers with the leaked data such as vehicle
speed and throttle position [32, 33].
• A1.3. CAN Bus Trafﬁc Leakage. Reverse engineering of
the CAN bus protocol is non-trivial but of great value [10,
13, 23]. We discover that by injecting an ATMA command to
an ELM327-based OBD-II dongle, one is able to dump the
CAN bus trafﬁc to analyze the CAN bus protocol. There-
fore, an attacker is able to harvest safety related CAN bus
control messages (e.g., applying brake) to perform arbitrary
CAN bus message injection attack when V3 exists.
A2. Property Theft. To achieve this attack, V1 and V3 are
required. Therefore, 46 (59.74%) dongles are vulnerable to
property theft. During the experiment, we found one CAN bus
message that is able to disable the wireless locking capability
of our testing vehicle. Using this message, we construct a
property theft attack. First, an attacker locates a target vehicle
as mentioned in A1.1. Next, she injects the message and dis-
ables the wireless locking capability, and waits for the owner
on the vehicle to leave. When the driver exits the vehicle and
locks the vehicle remotely with his key as usual, he or she may
not know the locking is unsuccessful and thus leaves without
any concern. Afterwards, the attacker has the opportunity to
sneak into the vehicle and steal all the belongings.
A3. Vehicle Control Interference. Fuzzing is a technique
widely used in software testing, which can help ﬁnd bugs by
sending random inputs to a computer program [34]. Similarly,
attackers can fuzz diagnostic CAN bus messages to a vehicle
through a vulnerable dongle with V1 for denial-of-service
(DoS) purpose. Moreover, fuzzing with control related CAN
bus messages to a dongle with V3 can even cause interference
on the vehicle control, which threatens the safety of drivers,
960    29th USENIX Security Symposium
USENIX Association
Precondition
V3
Attack Case
A1.1
A1.2
A1.3
A2
A3
A4
Location Leakage
Diagnostic Data Leakage
CAN Bus Trafﬁc Leakage
Property Theft
Vehicle Control Interference
In-vehicle Network Inﬁltration
V1.1
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
V1.2
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
V2
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)
# Vulnerable Dongle (%)
V4
(cid:88)
V5
w/o V2,V5
(cid:13) 65 (84.42%)
(cid:13) 65 (84.42%)
(cid:13) 65 (84.42%)
(cid:13) 46 (59.74%)
(cid:13) 46 (59.74%)
(cid:13)
2 (2.60%)
w/ V2
w/ V5
27 (35.06%)
27 (35.06%)
27 (35.06%)
20 (25.97%)
20 (25.97%)
0
26 (33.77%)
26 (33.77%)
26 (33.77%)
24 (31.17%)
24 (31.17%)
2 (2.60%)
(cid:88)
(cid:88)
Table 9: Proposed Attack Cases and Vulnerable Dongle Statistics. (cid:88)indicates mandatory precondition, (cid:13) indicates optional
precondition that are not necessary but can increase the attack ﬂexibility (e.g., with V2) or attack success rate (e.g., with V5).
passengers, and pedestrians. Previous research has conﬁrmed
the serious consequences caused by the fuzzing attack, which
can affect the engine, instrumentation panel, and brake
system [10, 35]. Among the collected dongles, 46 (59.74%)
are vulnerable to this attack. Note that to trigger the actual
effects on the vehicle, one must fuzz with high frequency to
overwrite the normal messages. To validate this attack, we
wrote a Python script that injects random CAN bus messages
every 10 milliseconds to a vulnerable dongle with V3, which
resulted in abnormal behaviour on our testing vehicle since
its alert system went on. We had to stop it before the fuzzing
caused permanent damage to the vehicle.
A4. In-vehicle Network Inﬁltration. V1 and V4 allow an
unauthorized attacker to send a malicious ﬁrmware packet
to subvert the dongle’s ﬁrmware. Since OBD-II dongles are
directly connected with CAN bus, the attacker is able to in-
ﬁltrate the in-vehicle network by replacing the ﬁrmware to
achieve malicious purposes such as spooﬁng and eavesdrop-
ping attacks. Among all the OBD-II dongles in our study, 2
(2.60%) (including 2 false negatives due to private messages)
dongles are vulnerable to this attack.
7 Discussion and Future Works
7.1 Tool Effectiveness
First, we discuss the effectiveness of DONGLESCOPE in
terms of its false positives and false negatives in correctly
achieving the measurement objectives summarized in Table 1.
False positives. In the design and implementation of DON-
GLESCOPE, the measurement objectives across all the three
attack stages are tested dynamically with the dongle under
test plugged into a real automobile. As a result, the analysis re-
sults do not have false positives. The vulnerabilities identiﬁed
are true vulnerabilities and conﬁrmed with dynamic analysis.
False negatives. False negatives may exist in both our
dynamic dongle analysis and static mobile app analysis. In
the broadcast and connection stage, DONGLESCOPE follows
the default conﬁguration to collect broadcast information and
sets up connection, which does not result in false negatives,
otherwise the dongle is also not usable for normal users. The
analysis in communication stage can bring false negatives in
our results. For example, one source of false negative is our
design assumption that all the dongles are ELM327-based
(described in §4.2). However, among the dongles we
collected (detailed in §5.1), we ﬁnd that a small portion of
dongles has their own implementations of the communication
protocol between the dongle and the app. For these dongles,
DONGLESCOPE failed to get responses by testing with
standard ELM327 commands. We discover these cases using
app analysis results and manual conﬁrmation, which results in
5 false negatives during the connection stage analysis in §5.3.
Since the implementations for each of these dongles may be
different, it is non-trivial to design a generic approach to cover
these cases, which is thus left as future work. As for our static
app analysis results, false negatives may exist due to code
obfuscation which confuses the control ﬂow of the program.
As a result, the set of messages we can identify through static
analysis is a subset of all messages supported by the dongle.
To summarize, DONGLESCOPE does not have false posi-
tives but may have false negatives. Thus, the analysis results
in the paper present a lower bound of the vulnerability status
of the dongles in our experiments.
7.2 Root Causes and Countermeasures
In this paper, we have uncovered 5 general vulnerabilities on
wireless OBD-II dongles that lead to remote or nearby attacks.
To summarize, there are two root causes. On one hand, OBD-
II dongles have direct access to the CAN bus through the
OBD-II port. On the other hand, unauthorized access allows
a nearby attacker to write malicious messages to OBD-II
dongles. To eliminate these vulnerabilities, countermeasures
can be deployed on any of the three entities: the CAN bus,
the OBD-II port, or OBD-II dongles, which are detailed as
follows.
Authentication on the CAN bus. Deploying secure authen-
tication on the CAN bus is a fundamental solution, since it
eliminates all unauthorized messages regardless of the secu-
rity of the OBD-II port and OBD-II dongles. This has been
well studied in the literature (e.g., [36–40]). However, due
to the insecure nature of the CAN bus protocol design as well
USENIX Association
29th USENIX Security Symposium    961
as the high demand on performance (e.g., low latency), there
is no effective and practically deployable solution so far [41].
Firewall on the OBD-II port. Another countermeasure is
to build a ﬁrewall on the OBD-II port to prevent malicious
message injection. For example, a physical gateway module
is developed for Chrysler models, which has deployed cloud
authentication for access control [42]. Speciﬁcally, unautho-
rized devices only have limited harmless capabilities such as
read operations to the diagnostic CAN bus. The drawback
of this countermeasure is that it requires vehicle owners to
purchase an additional gateway to protect the OBD-II port.
Moreover, the existing gateway device is only compatible
with a few car models, which is apparently not a universal
solution. Therefore, the design and development of such a
generic gateway is left to another future work.
Authentication on OBD-II dongles. As demonstrated in our
paper, lack of authentication on connection layer and applica-
tion layer of OBD-II dongles are the necessary preconditions
for any nearby attacks to a vehicle. Therefore, deploying se-
cure authentication is also an effective way to prevent the
attacks. However, it is a non-trivial task for two reasons. First,
since OBD-II dongles usually neither have cellular network
nor user interface such as a display or keyboard, they require
an external device (e.g., a mobile app) to ﬁrst authenticate
itself by sending speciﬁc credentials before communication,
which can introduce a new attack surface. For example, the
hardcoded credentials are discovered in the Bosch dongle app.
Therefore, the developers also need to spend a signiﬁcant
amount of effort to secure the authentication process in apps
(e.g., by using sophisticated algorithms or involving cloud).
Second, deploying secure authentication is costly. On one
hand, infrastructure such as cloud needs to be involved. On
the other hand, additional effort may be needed to customize
the dongle ﬁrmware, such as hardcoding a random PIN in
each dongle. Possibly due to these reasons, a majority of don-
gles available on the market today is still vulnerable to attacks.
In our future work, we plan to design and develop a secure
authentication protocol between OBD-II dongles and mobile
apps atop some well-known platforms such as OpenXC [43].
7.3 Responsible Disclosure
On August 7, 2019, we reported the discovered vulnerabilities
via email to 29 vendors, which covers 47 (61%) OBD-II
dongles in our study. For the remaining 30 (39%) dongles, we
were not able to ﬁnd the contact information of their vendors.
As of November 19, 2019, which is over 3 months after our
disclosure, we have received responses only from a handful
vendors in total. Among them, 2 vendors have decided to
deploy authentication in the future versions of their dongles,
while the other are still discussing our reported problems.
We believe the reasons for such a low response rate may
be two-fold. First, most of these OBD-II dongles are quite
cheap, e.g., 75% of them are actually less than $30. Such
a low price can increase their product competitiveness on
the market, but this also means that the vendors may not be
able to afford adding extra security features. As discussed
in §7.2, deploying authentication in these dongles requires
signiﬁcant efforts, which thus will inevitably increase the
dongle cost. Second, we ﬁnd that there is a lack of security
awareness among some vendors. In particular, among the
responses we received, some vendors did not consider the
leakage of some CAN bus data, e.g., speed and VIN, as privacy
leakage. However, as discussed in §6 and shown by previous
work [32, 33], these data can indeed lead to privacy breaches
such as leaking the driver’s identity.
Based on our experience above, it
is actually both
ineffective and inefﬁcient to address the OBD-II dongle
vulnerabilities by contacting the vendors directly, since it
is not only difﬁcult to ﬁnd their contact information, but
also hard to convince them to take security enhancement
actions. Thus, we have already reported all the vulnerabilities
discovered in this paper to CVE in order to ensure enough
public disclosure of this class of security problems. As of
November 27, 2019, our ﬁndings have been acknowledged
by a set of CVEs 2. At the same time, we also hope our work
can raise immediate attention in the community, and make