40
0
)
.
i
n
M
(
e
m
T
i
e
r
o
c
S
Q1 Q2 Q3 Q4 Q5 Avg
Built formulas
Created patches
(a) Experienced RV users.
Created patches
Q1 Q2 Q3 Q4 Q5 Avg
Built formulas
(b) Experienced RV developers.
Fig. 10: The spent time per question.
2.6
3.8
4.3
1.9
e
r
o
c
S
3.8
2.5
4.0
2.1
Created patches
Confidence
Built formulas
Difficulty
Created patches
Confidence
Built formulas
Difficulty
(a) Experienced RV users.
Fig. 11: Conﬁdence and difﬁculty on a ﬁve-point scale.
(b) Experienced RV developers.
2) User Study Results: We compare the manual patches
and PPL formulas created by participants using four metrics:
(1) the number of correct answers, (2) average time spent in
each question, (3) the participants’ conﬁdence in their answers,
and (4) the difﬁculty level participants assign. The participants
create on average 4.6 correct PPL formulas compared to 2
correct manual patches while spending about 12 times less time
on creating formulas. Additionally, the participants have higher
conﬁdence in PPL formulas compared to patches (on average
4.2 vs. 3) and they ﬁnd generating PPL formulas easier (on
average 1.9 vs. 3.3). We conﬁrm the differences are statistically
signiﬁcant using the Mann-Whitney U test [51].
Correctness. Two authors of this paper met over multiple
sessions to check the correctness of participants’ answers (man-
ual patches and PPL formulas) and reconcile disagreements.
Through this analysis, we categorize each answer as ‘correct’,
‘incorrect’ or ‘incomplete’ (empty answer).
As shown in Figure 9, the participants correctly created on
average 2 manual patches and 4.6 PPL formulas. We found
that the difference between the two averages is statistically
signiﬁcant, with p < 0.001. We next analyzed the correctness
of users’ and developers’ answers separately. In Figure 9,
participants from A to L are experienced RV users and
participants from M to R are RV software developers. We
found that RV users correctly created on average 1.25 patches
and 4.6 formulas, while RV developers correctly created on
average 3.5 patches and 4.5 formulas. We found the difference
between the number of correct PPL formulas from users and
developers is not statistically signiﬁcant (p = 0.66), whereas the
difference between the number of correct patches from users
and developers is (p = 0.008). This shows that participants
can correctly write PPL formulas and create patches through
PGPATCH regardless of their level of RV software experience.
We examined the reasons behind the incomplete and in-
correct answers from participants. We found that none of the
participants provided an incomplete PPL formula, but they
did not give an answer for 44 of the 90 manual patches. We
observed “limited time” and “not familiar with this component”
were the main reasons participants provided in free text for
giving up creating patches. Among the 46 manual patches and
90 PPL formulas participants provided, we found participants
build PPL formulas more accurately compared to creating code-
level patches. Speciﬁcally, 19.6% (9/46) of the patches and
8.9% (8/90) of the PPL formulas were incorrect (See Table V).
Upon further analysis, we found the incorrect manual patches
stem from (1) partially ﬁxing a bug, (2) using a wrong unit
(i.e., meter or centimeter), (3) wrong patch location, and
(4) introducing compilation errors. Regarding incorrect PPL
formulas written by participants, they were in almost all cases
(6 out of 8) syntactically incorrect formulas (“wrong verb”,
“wrong term”, and “wrong value”). PGPATCH can detect the
syntactically incorrect formulas (Section V-B) and avoid using
them to generate a patch.
Required Time. We measured the time participants spent
answering each question. We exclude the time the participant
spent on a question if its answer is incomplete. We found
participants spent on average 31.7 minutes on each manual
patch and 2.6 minutes on each PPL formula. We found the
difference between the average time spent on manual patches
and PPL formulas is statistically signiﬁcant (p < 0.001). As
shown in Figure 10a, the experienced RV users spent on average
36.9 and 2.4 minutes on creating a patch and building a formula,
respectively. As shown in Figure 10b, RV developers spent
on average 20 minutes to create each patch and 3 minutes
to build each formula. We found the differences between the
average time users spent on patches and formulas (p < 0.001)
and the average time developers spent on patches and formulas
(p < 0.001) are both statistically signiﬁcant. These results show
that building formulas requires less time regardless of the level
of experience in RV software development.
Conﬁdence and Difﬁculty Scores. We asked the participants
to specify, for each question, their levels of conﬁdence and
the difﬁculty of the question on a scale from 1 to 5. The
participants gave on average 4.2 conﬁdence level to PPL
formulas and 3 to patches they created. We found this difference
statistically signiﬁcant (p = 0.019). The participants rated
the difﬁculty as 1.9 for PPL formulas and 3.3 for patches
on average (p < 0.001). Based on these, we conclude that
participants have a higher conﬁdence in PPL formulas, and
they ﬁnd generating manual patches more difﬁcult. As shown
in Figure 11a, experienced RV users felt high conﬁdence and
less difﬁculty when they built formulas compared to creating
patches. Although the RV developers also felt on average
higher conﬁdence and less difﬁculty in building formulas
(See Figure 11b), the difference between creating patches and
building formulas is smaller compared to the users’ answers.
In summary, our user study shows that, regardless of the
participant’s experience level, creating PPL formulas to ﬁx
bugs using PGPATCH is both easier and less error-prone than
manually ﬁxing the source code of an RV software package.
VIII. RELATED WORK
A. Test suite-based Automatic Program Repair
Search-based APR. A line of search-based APR methods mu-
tates a statement’s operation at a candidate patch location [20].
However, changing an operation (e.g., arithmetic and relational)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
131838
could not ﬁx any bugs in RV software (See Section III). Other
works use existing code to ﬁx bugs rather than synthesizing a
new code snippet [27], [79], [80]. While reusing code can ﬁx
some of the logic bugs (See Section VII-B), patching logic bugs
requires more complex analysis, e.g., updating a conditional
statement, and inserting a new statement.
Pattern-based APR. To ﬁnd the patch location and patch the
bug, pattern-based APR methods use common “ﬁx patterns”
learned from patches written by developers and through static
analysis [40], [49]. However, these methods cannot create
a patch if the patch needs to access a variable or function
outside the patch location. PGPATCH addresses this issue by
creating an access pattern mapping table that represents how
to access required variables/functions from the patch location.
Further, these methods fail to create a patch requiring multiple
statements, as they can only ﬁx a single statement. PGPATCH
supports patches with multiple statements by synthesizing a
patch from a PPL formula.
Satisﬁability Modulo Theories (SMT) Solver-based APR.
SMT solver-based approaches conduct the following steps
to ﬁx bugs [54], [56]. (1) They extract a repair constraint
based on symbolic execution. (2) They generate potential
patches by enumerating all the possible expressions that can
be constructed starting from a set of program variables and
operators. (3) They query an SMT solver to check whether a
potential patch makes the program pass the given test suite.
However, these approaches fail to create correct patches in RV
software because the correctness of patches depends on the
test suite’s completeness and achieving completeness in RV
software is challenging due to the huge input/output space.
B. Speciﬁcation-based Automatic Program Repair
APR on Source Code. Recent works leveraged safety speciﬁca-
tions to ﬁnd patch locations and create code-level patches [34].
For example, they deﬁne a memory safety speciﬁcation for
buffer overﬂow that states “the program must not make an
out-of-bounds memory access to a buffer” [48]. However, these
methods cannot ﬁx logic bugs in RVs for two main reasons.
(1) Their safety speciﬁcations solely express memory-safety
violations. (2) They insert an “if check statement” as a patch to
prevent access to the buffer’s out-of-bounds memory. However,
ﬁxing logic bugs requires more complex code modiﬁcations
(See Section III).
APR with Abstract Behavioral Models. A line of work rep-
resents the code in an abstract behavioral model (e.g., discrete
state transition system) and uses temporal logic formulas to
detect and repair software bugs [5], [15], [37]. For instance,
AutoTap [82] takes an LTL formula and ﬁxes a bug in trigger-
action programming (TAP) rules for IoT devices. This approach
has two fundamental limitations preventing it from patching
bugs in RV software. First, it assumes that a device command is
always executed when the IoT system satisﬁes the preconditions
to trigger it. However, this assumption does not hold in RVs as
logic bugs could make the RV software fail to trigger a behavior
or execute an action. Second, it uses model checking on a ﬁnite
Buchi Automaton to validate all possible system executions.
However, RV states are mostly represented as ﬂoating point
numbers, which makes extracting behavior models and building
the equivalent Buchi Automaton challenging. Additionally, RV
software operates both in digital and physical spaces; thus,
its behavior can be represented in a hybrid automaton rather
than a discrete transition system. This makes model checking
undecidable due to inﬁnite state space in hybrid systems [31],
[62]. These limitations are also valid for other APR methods
that operate on similar abstract behavioral models.
IX. LIMITATIONS AND DISCUSSION
Correctness of a Given Formula. PGPATCH veriﬁes the
syntax and semantics of the given formulas (Section V-B2). Yet,
it cannot detect an incorrect PPL formula written by developers,
if the formula does not conﬂict with any other formulas. In such
a case, PGPATCH could produce a faulty patch. One possible
solution to this problem is automated extraction of policies
from the correct function of RVs. Appendix B provides more
details on this topic.
Effort to Port PGPATCH to other RV Software. Porting
PGPATCH to Paparazzi required the following steps: (1) Deﬁn-
ing formulas that describe an RV software’s correct behavior by
reusing existing formulas and, if necessary, updating the terms
on the formulas based on variable/function names provided by
PGPATCH; (2) Verifying and updating the term classiﬁcation
table; (3) Writing policy violation predicates according to
the new formulas; (4) Designating a control loop function
for generating REUSE type patches; (5) Updating the list of
distance variables for ﬁxing metric unit inconsistency. We
believe that these tasks are not a burden for developers familiar
with RV control programs. For instance, porting PGPATCH
from PX4 to Paparazzi required about 14.5 hours. This includes
above manual tasks and modifying 815 LoC in the “Autotest
suite” (Section V-E2) to adapt to Paparazzi’s differences in the
MAVLink protocol.
Opting out of the Patch Type Analyzer. PGPATCH allows
the patch type analyzer to be optional for creating patches. To
detail, when a user does not select the patch type analyzer
to create a patch, PGPATCH’s Patch Generator ﬁrst creates a
patch per each patch type that PGPATCH supports, PGPATCH’s
Patch Veriﬁer then validates whether the created patches ﬁx
the bug. It then selects the patch that ﬁxes the bug and deploys
that patch, ignoring the other generated patches.
X. CONCLUSIONS
We introduce PGPATCH, a policy-guided APR framework for
RVs. PGPATCH ﬁxes the logic bugs via customized methods
for ﬁve patch types. It addresses the unique challenges in
patching RV software by using PPL formulas to ﬁnd patch
locations and generate patches. We evaluated PGPATCH on
three popular ﬂight control software. PGPATCH correctly ﬁxed
258 out of 297 logic bugs (86.9%) without interfering with the
RV’s intended functionality and performance. Our user study,
involving 18 experienced RV developers and users, shows that
using PGPATCH to ﬁx bugs in RV software is easier and less
error-prone than manually patching the bugs.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
141839
ACKNOWLEDGMENT
This work was supported in part by ONR under Grants
N00014-20-1-2128 and N00014-17-1-2045. Any opinions,
ﬁndings, and conclusions in this paper are those of the authors
and do not necessarily reﬂect the views of the ONR. This
work was also supported in part by DARPA under contract
number N6600120C4031. The U.S. Government is authorized
to reproduce and distribute reprints for Governmental purposes
notwithstanding any copyright notation thereon. The views
and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the
ofﬁcial policies or endorsements, either expressed or implied,
of DARPA or the U.S. Government.
REFERENCES
[1] “Add arming check for windvane,” https://tinyurl.com/2byfhbzd, 2021.
[2] “Add new mode,” https://tinyurl.com/swshv3tc, 2021.
[3] “Add vertical emergency braking,” https://tinyurl.com/2w5h2eds, 2021.
[4] “Add yaw speed ﬁlter,” https://tinyurl.com/2rbzczn9, 2021.
[5] D. Alrajeh and R. Craven, “Automated error-detection and repair for
compositional software speciﬁcations,” in Proceedings of the Interna-
tional Conference on Software Engineering and Formal Methods (SEFM),
2014.
[6] “Apm sitl,” https://tinyurl.com/wzkamnrp, 2021.
[7] “Ardupilot parameter list xml,” https://tinyurl.com/4bemvrh5, 2021.
[8] “Ardupilot project,” https://github.com/ArduPilot/ardupilot, 2021.
[9] “Ardupilot blog,” https://discuss.ardupilot.org, 2021.
[10] “Ardupilot chat channel,” https://ardupilot.org/discord, 2021.
[11] “Ardupilot-documentation,” https://ardupilot.org/ardupilot/, 2021.
[12] “Autotest,” https://tinyurl.com/6ampumny, 2021.
[13] “Battery fail-safe bug,” https://tinyurl.com/ynf788f4, 2021.
[14] “Betaﬂight,” https://github.com/betaﬂight/betaﬂight, 2021.
[15] C.-H. Cai, J. Sun, and G. Dobbie, “Automatic b-model repair using model
checking and machine learning,” Automated Software Engineering, 2019.
[16] M. Chen, F. Fischer, N. Meng, X. Wang, and J. Grossklags, “How
reliable is the crowdsourced knowledge of security implementation?” in
IEEE/ACM International Conference on Software Engineering (ICSE),
2019.
[17] H. Choi, S. Kate, Y. Aafer, X. Zhang, and D. Xu, “Cyber-physical
inconsistency vulnerability identiﬁcation for safety checks in robotic
vehicles,” in Proceedings of the ACM SIGSAC Conference on Computer
and Communications Security (CCS), 2020.
[18] “Cleanﬂight,” https://github.com/cleanﬂight/cleanﬂight, 2021.
[19] “Copy code from stack overﬂow,” https://tinyurl.com/4mf3dhzz, 2021.
[20] V. Debroy and W. E. Wong, “Using mutation to automatically suggest
ﬁxes for faulty programs,” in Proceedings of the International Conference
on Software Testing, Veriﬁcation and Validation (ICST), 2010.
[21] “Open source drone software projects,” https://dojofordrones.com/
[22] “List of ﬂight controller ﬁrmware projects,” https://blog.dronetrest.com/
open-source-drone/, 2021.
ﬂight-controller-ﬁrmware/, 2021.
[23] “dronin,” https://github.com/d-ronin/dRonin, 2021.
[24] E. Ebeid, M. Skriver, K. H. Terkildsen, K. Jensen, and U. P. Schultz,
“A survey of open-source uav ﬂight controllers and ﬂight simulators,”
Microprocessors and Microsystems, 2018.
[25] “Ardupilot fence,” https://tinyurl.com/3z2w22d9, 2021.
[26] C. Feng, V. R. Palleti, A. Mathur, and D. Chana, “A systematic framework
to generate invariants for anomaly detection in industrial control systems.”
in Proceedings of the Network & Distributed System Security Symposium
(NDSS), 2019.
[27] S. Forrest, T. Nguyen, W. Weimer, and C. Le Goues, “A genetic
programming approach to automated software repair,” in Proceedings
of the conference on Genetic and evolutionary computation (GECCO),
2009.
[28] “Gps-failsafe,” https://docs.px4.io/master/en/conﬁg/safety.html, 2021.
[29] “Hackﬂight,” https://github.com/simondlevy/Hackﬂight, 2021.
[30] “Hackﬂight gcs,” https://github.com/simondlevy/HackﬂightGCS, 2021.
[31] T. A. Henzinger, P. W. Kopke, A. Puri, and P. Varaiya, “What’s decidable
about hybrid automata?” Journal of computer and system sciences, 1998.
[32] H. Huang, S. Z. Guyer, and J. H. Rife, “Detecting semantic bugs
in autopilot software by classifying anomalous variables,” Journal of
Aerospace Information Systems, 2020.
[33] Z. Huang, M. DAngelo, D. Miyani, and D. Lie, “Talos: Neutralizing vul-
nerabilities with security workarounds for rapid response,” in Proceedings
of the IEEE Symposium on Security and Privacy (S&P), 2016.
[34] Z. Huang, D. Lie, G. Tan, and T. Jaeger, “Using safety properties to
generate vulnerability patches,” in Proceedings of the IEEE Symposium
on Security and Privacy (S&P), 2019.
[35] “Inav,” https://github.com/iNavFlight/inav, 2021.
[36] “jmavsim,” https://github.com/PX4/jMAVSim, 2021.
[37] B. Jobstmann, A. Griesmayer, and R. Bloem, “Program repair as a
game,” in Proceedings of the International conference on computer
aided veriﬁcation (CAV), 2005.
[38] B. Jobstmann, S. Staber, A. Griesmayer, and R. Bloem, “Finding and
ﬁxing faults,” Journal of Computer and System Sciences, 2012.
[39] J. A. Jones, M. J. Harrold, and J. Stasko, “Visualization of test information
to assist fault localization,” in Proceedings of the IEEE/ACM International
Conference on Software Engineering (ICSE), 2002.
[40] D. Kim, J. Nam, J. Song, and S. Kim, “Automatic patch generation
learned from human-written patches,” in Proceedings of the IEEE/ACM
International Conference on Software Engineering (ICSE), 2013.
[41] H. Kim, M. O. Ozmen, A. Bianchi, Z. B. Celik, and D. Xu, “PGFUZZ:
Policy-guided fuzzing for robotic vehicles,” in Proceedings of the Network
& Distributed System Security Symposium (NDSS), 2021.
[42] T. Kim, C. H. Kim, A. Ozen, F. Fei, Z. Tu, X. Zhang, X. Deng, D. J.
Tian, and D. Xu, “From control model to program: Investigating robotic
aerial vehicle accidents with MAYDAY,” in Proceedings of the USENIX
Security Symposium (USENIX SEC), 2020.
[43] T. Kim, C. H. Kim, J. Rhee, F. Fei, Z. Tu, G. Walkup, X. Zhang,
X. Deng, and D. Xu, “RVFUZZER: ﬁnding input validation bugs in
robotic vehicles through control-guided testing,” in Proceedings of the
USENIX Security Symposium (USENIX SEC), 2019.
[44] Y.-M. Kwon, J. Yu, B.-M. Cho, Y. Eun, and K.-J. Park, “Empirical
analysis of mavlink protocol vulnerability for attacking unmanned aerial
vehicles,” IEEE Access, 2018.
[45] X. B. D. Le, F. Thung, D. Lo, and C. Le Goues, “Overﬁtting in semantics-
based automated program repair,” Empirical Software Engineering, 2018.
[46] B. Liblit, A. Aiken, A. X. Zheng, and M. I. Jordan, “Bug isolation via
remote program sampling,” ACM Sigplan Notices, 2003.
[47] “Librepilot,” https://github.com/librepilot/LibrePilot, 2021.
[48] Z. Lin, X. Jiang, D. Xu, B. Mao, and L. Xie, “Autopag: towards automated
software patch generation with source code root cause identiﬁcation and
repair,” in Proceedings of the ACM symposium on Information, computer
and communications security (ASIACCS), 2007.
[49] K. Liu, A. Koyuncu, D. Kim, and T. F. Bissyandé, “Avatar: Fixing seman-
tic bugs with ﬁx patterns of static analysis violations,” in Proceedings
of the IEEE International Conference on Software Analysis, Evolution
and Reengineering (SANER), 2019.
[50] “Llvm,” https://releases.llvm.org/10.0.0/docs/, 2021.
[51] H. B. Mann and D. R. Whitney, “On a test of whether one of two
random variables is stochastically larger than the other,” The annals of
mathematical statistics, 1947.
[52] M. Martinez, T. Durieux, R. Sommerard, J. Xuan, and M. Monperrus,
“Automatic repair of real bugs in java: A large-scale experiment on the
defects4j dataset,” Empirical Software Engineering, 2017.
[53] “Mavlink,” https://mavlink.io/en, 2021.
[54] S. Mechtaev, J. Yi, and A. Roychoudhury, “Angelix: Scalable multiline
program patch synthesis via symbolic analysis,” in Proceedings of the
IEEE/ACM International Conference on Software Engineering (ICSE),
2016.
[55] “multiwii,” https://github.com/multiwii/multiwii-ﬁrmware, 2021.