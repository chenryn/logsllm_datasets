当提交/1.php？id=%df'union select 1，2，3，4%23时，成功注入的效果如图4-3所示。
图 4-3
对宽字节注入的挖掘方法也比较简单，只要搜索如下几个关键字即可：
SET NAMES
character_set_client=gbk
mysql_set_charset
（
'gbk'
）
2.二次urldecode注入
只要字符被进行转换就有可能产生漏洞，现在的Web程序大多都会进行参数过滤，通常使用addslashes（）、mysql_real_escape_string（）、mysql_escape_string（）函数或者开启GPC的方式来防止注入，也就是给单引号（'）、双引号（"）、反斜杠（\）和NULL加上反斜杠转义。如果某处使用了urldecode或者rawurldecode函数，则会导致二次解码生成单引号而引发注入。原理是我们提交参数到WebServer时，WebServer会自动解码一次，假设目标程序开启了GPC，我们提交/1.php？id=1%2527，因为我们提交的参数里面没有单引号，所以第一次解码后的结果是id=1%27，%25解码的结果是%，如果程序里面使用了urldecode或者rawurldecode函数来解码id参数，则解码后的结果是id=1’单引号成功出现引发注入。
测试代码：
'
；
echo '$b='.$b
；
测试效果如图4-4所示。
图 4-4
既然知道了原理主要是由于urldecode使用不当导致的，那我们就可以通过搜索urldecode和rawurldecode函数来挖掘二次urldecode注入漏洞。
4.1.1.3 espcms搜索注入分析
这里以一个笔者在2013年发现的一个小CMS程序espcms搜索注入的漏洞为例，我们目前尽量以相对好理解的漏洞来举例。
漏洞在interface/search.php文件和interface/3gwap_search.php文件in_taglist（）函数都存在，一样的问题，以interface/search.php为例说明：
打开文件看到如下代码：
function in_taglist
（）
{
      parent
：：
start_pagetemplate
（）；
      include_once admin_ROOT . 'public/class_pagebotton.php'
；
      $page = $this->fun->accept
（
'page'
，
'G'
）；
      $page = isset
（
$page
）
？
intval
（
$page
）
：
1
；
      $lng =
（
admin_LNG == 'big5'
）
？
$this->CON['is_lancode']
：
admin_LNG
；
      $tagkey = urldecode
（
$this->fun->accept
（
'tagkey'
，
'R'
））；
      $takey = $this->fun->inputcodetrim
（
$tagkey
）；
      $db_where = ' WHERE lng=\'' . $lng . '\' AND isclass=1'
；
      if
（
empty
（
$tagkey
））
{
      $linkURL = $_SERVER['HTTP_REFERER']
；
      $this->callmessage
（
$this->lng['search_err']
，
$linkURL
，
$this->lng ['gobackbotton']
）；
      }
      if
（！
empty
（
$tagkey
））
{
      $db_where.=" AND FIND_IN_SET
（
'$tagkey'
，
tags
）
"
；
      }
其中：
$tagkey = urldecode
（
$this->fun->accept
（
'tagkey'
，
'R'
））；
这行代码得到$_REQUEST['tagkey']的值，由于$tagkey变量使用了urldecode，从而可以绕过GPC：
$db_where.=" AND FIND_IN_SET
（
'$tagkey'
，
tags
）
"
；
经过判断$tagkey不为空则拼接到SQL语句中，导致产生注入漏洞。
4.1.2 漏洞防范
SQL注入漏洞虽然是目前最泛滥的漏洞，不过要解决SQL注入漏洞其实还比较简单。在PHP中可以利用魔术引号来解决，不过魔术引号在PHP 5.4后被取消，并且gpc在遇到int型的注入时也会显得不那么给力了，所以通常用得多的还是过滤函数和类，像discuz、dedecms、phpcms等程序里面都使用过滤类，不过如果单纯的过滤函数写得不够严谨，也会出现绕过的情况，像这三套程序就都存在绕过问题。当然最好的解决方案还是利用预编译的方式，下面就来看看这三种方式的使用方法。
4.1.2.1 gpc/rutime魔术引号
通常数据污染有两种方式，一种是应用被动接收参数，类似于GET、POST等；还有一种是主动获取参数，类似于读取远程页面或者文件内容等。所以防止SQL注入的方法就是要守住这两条路。在本书第2章第3节介绍了PHP的核心配置，里面详细介绍了GPC等魔术引号配置的方法，magic_quotes_gpc负责对GET、POST、COOKIE的值进行过滤，magic_quotes_runtime对从数据库或者文件中获取的数据进行过滤。通常在开启这两个选项之后能防住部分SQL注入漏洞被利用。为什么说是部分，因为我们之前也介绍了，它们只对单引号（'）、双引号（"）、反斜杠（\）及空字符NULL进行过滤，在int型的注入上是没有多大作用的。
PHP 4.2.3以及之前的版本可以在任何地方设置开启，即配置文件和代码中，之后的版本可以在php.ini、httpd.conf以及.htaccess中开启。
4.1.2.2 过滤函数和类
过滤函数和类有两种使用场景，一种是程序入口统一过滤，像框架程序用这种方式比较多，另外一种是在程序进行SQL语句运行之前使用，除了PHP内置的一些过滤单引号等函数外，还有一些开源类过滤union、select等关键字。
1.addslashes函数
addslashes函数过滤的值范围和GPC是一样的，即单引号（'）、双引号（"）、反斜杠（\）及空字符NULL，它只是一个简单的检查参数的函数，大多数程序使用它是在程序的入口，进行判断如果没有开启GPC，则使用它对$_POST/$_GET等变量进行过滤，不过它的参数必须是string类型，所以曾经某些程序使用这种方式对输入进行过滤时出现了绕过，比如只遍历$_GET的值，当时并没有考虑到$_GET的值也是一个数组。我们来看一个例子如下：
上面的例子输出：phpsafe\'。
2.mysql_[real_]escape_string函数
mysql_escape_string和mysql_real_escape_string函数都是对字符串进行过滤，在PHP4.0.3以上版本才存在，如下字符受影响【\x00】【\n】【\r】【\】【'】【"】【\x1a】，两个函数唯一不一样的地方在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转义字符串，所以推荐使用mysql_real_escape_string。
使用举例：
exec
（
"set names 'gbk'"
）；
$sql="select * from test where name =
？
and password =
？
"
；
$stmt = $dbh->prepare
（
$sql
）；
$exeres = $stmt->execute
（
array
（
$name
，
$pass
））；
上面这段代码虽然使用了pdo的prepare方式来处理sql查询，但是当PHP版本setAttribute
（
PDO
：：
ATTR_EMULATE_PREPARES
，
false
）；
$dbh->exec
（
"set names 'utf8'"
）；
$sql="select * from test where name =
？
and password =
？
"
；
$stmt = $dbh->prepare
（
$sql
）；
$exeres = $stmt->execute
（
array
（
$name
，
$pass
））；
4.2 XSS漏洞
XSS学名为跨站脚本攻击（Cross Site Scriptings），在Web漏洞中XSS是出现最多的漏洞，没有之一。这种漏洞有两种情况，一种是通过外部输入然后直接在浏览器端触发，即反射型XSS；还有一种则是先把利用代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面上时触发漏洞，也就是存储型XSS。XSS攻击在浏览器端触发，大家对其危害认识往往停留在可以窃取cookie、修改页面钓鱼，等等。用一句话来说明该漏洞的危害就是：前端页面能做的事它都能做。
4.2.1 挖掘经验
挖掘XSS漏洞的关键在于寻找没有被过滤的参数，且这些参数传入到输出函数，常用的输出函数列表如下：print、print_r、echo、printf、sprintf、die、var_dump、var_export，所以我们只要寻找带有变量的这些函数即可。另外在代码审计中，XSS漏洞在浏览器环境对利用的影响非常大，所以最重要的还要掌握各种浏览器容错、编码等特性和数据协议。关于XSS漏洞的东西可以再写一本厚厚的书，由于篇幅问题，这些东西就不在这里详细介绍了，推荐阅读邱永华的《XSS跨站脚本攻击剖析与防御》和余弦的《Web前端黑客技术揭秘》。
XSS漏洞比SQL注入更多，而且在满足业务需求的情况下更加难防御。XSS漏洞经常出现在文章发表、评论回复、留言以及资料设置等地方，特别是在发文章的时候，因为这里大多都是富文本，有各种图片引用、文字格式设置等，所以经常出现对标签事件过滤不严格导致的XSS，同样，评论回复以及留言也是。其次在资料设置的地方，比如用户昵称、签名等，有的应用可能不只一处设置资料的地方，像在注册的地方可以设置、修改资料的地方可以设置，这时候要多留意，不一定所有设置这个资料的地方都过滤严格了。我们在通读代码挖掘的时候可以重点关注这几个地方，这几个地方的XSS也通常都是存储型的。
4.2.1.1 反射型XSS
反射型XSS也就是我们在描述里面说直接通过外部输入然后在浏览器端输出触发的类型，这种类型的漏洞比较容易通过扫描器黑盒直接发现，只需要将尖括号、单双引号等提交到Web服务器，检查返回的HTML页面里面有没有保留原来的特殊字符即可判断。但是白盒审计中，我们只需要寻找带有参数的输出函数，然后根据输出函数对输出内容回溯输入参数，观察有没有经过过滤。
举例一个反射型XSS漏洞的大致形式，代码如下：
//
以下是
QQ
私密接口
if
（
$_GET["openid"]
）
{
      //
授权成功后，会返回用户的
openid
      //
检查返回的
openid
是否是合法
id
      //echo $_GET["oauth_signature"]
；
      if
（！
is_valid_openid
（
$_GET["openid"]
，
$_GET["timestamp"]
，
$_GET["oauth_signature"]
））
      {      showerr
（
'API
帐号有误！
'
）；
      //demo
对错误简单处理
      echo "###invalid openid\n"
；
      echo "sig
：
".$_GET["oauth_signature"]."\n"
；
      exit
；
}
代码中echo"sig：".$_GET["oauth_signature"]."\n"；直接将$_GET["oauth_signature"]的值输出到浏览器中，则可以直接用GET方式注入代码。
4.2.1.2 存储型XSS
存储型XSS，顾名思义也就是需要先把利用代码保存在比如数据库或文件中，当Web程序读取利用代码并输出在页面上时执行利用代码，它的原理图流程图如图4-5所示。
图 4-5
存储型XSS比反射型要容易利用得多，不用考虑绕过浏览器的过滤，另外在隐蔽性上面也要好得多，特别是在社交网络中的存储型XSS蠕虫能造成大面积的传播，影响非常大，曾经在新浪微博和百度贴吧都爆发过大规模的XSS蠕虫。
同样，要挖掘存储型XSS也是要寻找未过滤的输入点和未过滤的输出函数，这个最终的输出点可能跟输入点完全不在一个业务流上，对于这类可以根据当前代码功能去猜，或者老老实实去追哪里有操作过这个数据，使用表名、字段名去代码里面搜索。
下面的经典案例分析将讲述一个存储型XSS的挖掘过程。
4.2.1.3 骑士cms存储型XSS分析
这里笔者临时找了一个叫骑士cms的程序看了下，在后台申请友情链接的地方存在XSS漏洞，常规的特殊字符（如尖括号）和标签的事件（如onerror等）大多被过滤，漏洞挖掘过程如下。
安装好骑士cms后，在后台看到一个友情链接管理如图4-6所示。
图 4-6