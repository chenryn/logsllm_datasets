# Shall we play a game (re 113p, 111 solved)
This turned out to be a very annoying challenge, because I was working on the x86 version of it, and it was broken and didn't give the proper flag.
As a result I solved this task 3 times, with 3 different methods, which is worth writing down.
The challenge is a simple [Android App](app.apk) with tic-tac-toe game.
We need to win 1M times to get the flag.
The code is not pure Java - there is also a native library with a single function.
Since the library was provided for ARM, x86 and x64 I was using x86 emulator, which is much faster than ARM, and this was a mistake, most likely not anticipated by the author.
My first approach to the task was to Reverse Engineer the code and figure out how the flag is calculated.
I didn't know Smali very well so I was not eager to dive into patching the app at this point.
I got the [decompiled code](app_source.zip) and started looking at what was happening there.
The important bits were (labelled by me):
```java
    Object f2329n = C0644N.m3217_(Integer.valueOf(3), C0644N.f2341h, Long.valueOf((((((((1416127776 + 1869507705) + 544696686) + 1852403303) + 544042870) + 1696622963) + 544108404) + 544501536) + 1886151033));
    int winCounter;
    boolean gameEnd;
    byte[] f2332q = new byte[32];
    byte[] f2333r = new byte[]{(byte) -61, (byte) 15, (byte) 25, (byte) -115, (byte) -46, (byte) -11, (byte) 65, (byte) -3, (byte) 34, (byte) 93, (byte) -39, (byte) 98, (byte) 123, (byte) 17, (byte) 42, (byte) -121, (byte) 60, (byte) 40, (byte) -60, (byte) -112, (byte) 77, (byte) 111, (byte) 34, (byte) 14, (byte) -31, (byte) -4, (byte) -7, (byte) 66, (byte) 116, (byte) 108, (byte) 114, (byte) -122};
    public GameActivity() {
        C0644N.m3217_(Integer.valueOf(3), C0644N.f2342i, this.f2329n, this.f2332q);
        this.winCounter = 0;
        this.gameEnd = false;
    }
    void showFlag() {
        Object _ = C0644N.m3217_(Integer.valueOf(0), C0644N.f2334a, Integer.valueOf(0));
        Object _2 = C0644N.m3217_(Integer.valueOf(1), C0644N.f2335b, this.f2332q, Integer.valueOf(1));
        C0644N.m3217_(Integer.valueOf(0), C0644N.f2336c, _, Integer.valueOf(2), _2);
        ((TextView) findViewById(R.id.score)).setText(new String((byte[]) C0644N.m3217_(Integer.valueOf(0), C0644N.f2337d, _, this.f2333r)));
        endTheGame();
    }
    void finishRound() {
        for (int i = 0; i n()V
	iget v0, p0, Lcom/google/ctf/shallweplayagame/GameActivity;->o:I
	if-eqz v0, :cond_3
	goto :goto_magic
```
We also added some logging to certain functions, just to know what is going on.
For example:
```
.method n()V
    .locals 10
    iget v5, p0, Lcom/google/ctf/shallweplayagame/GameActivity;->o:I
    invoke-static {v5}, Ljava/lang/String;->valueOf(I)Ljava/lang/String;
    move-result-object v1
    const-string v5, "wins"
    invoke-static {v5, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
```
This tells us how many times we've won already, each time function `n` is called.
With such changes we could invoke:
```
apktool b test
```
To make a new apk file.
In order to run it we had to sign it as well:
```
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore app/dist/app.apk alias_name
```
And as might be expected, the result was again identical, but was still not a proper flag.
Fortunately at this point someone suggested that maybe we could run this on a real ARM Android device, just to be sure, and it turns out the [patched apk](app_patched.apk) worked like a charm on ARM device and finally gave the flag: `CTF{ThLssOfInncncIsThPrcOfAppls}`