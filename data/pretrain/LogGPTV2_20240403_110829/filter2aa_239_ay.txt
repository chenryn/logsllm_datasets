为终结器（finalizer）。在C#中定义析构函数时，编译器发送给程序集的实际上是
Finalize（）方法。它不会影响源代码，但如果需要查看生成的IL代码，就应知道这个
事实。
C++开发人员应很熟悉析构函数的语法。它看起来类似于一个方法，与包含的类同
名，但有一个前缀波形符（～）。它没有返回类型，不带参数，没有访问修饰符。下面是
一个例子：
    class MyClass
    {
      ～MyClass()
      {
        // Finalizer implementation
      }
    }
C#编译器在编译析构函数时，它会隐式地把析构函数的代码编译为等价于重写
Finalize（）方法的代码，从而确保执行父类的Finalize（）方法。下面列出的C#代码等价
于编译器为～MyClass（）析构函数生成的IL：
    protected override void Finalize()
    {
      try
      {
        // Finalizer implementation
      }
      finally
      {
        base.Finalize();
      }
    }
如上所示，在～MyClass（）析构函数中实现的代码封装在Finalize（）方法的一个try
块中。对父类的Finalize（）方法的调用放在finally块中，确保该调用的执行。第14章会讨
论try块和finally块。
有经验的C++开发人员大量使用了析构函数，有时不仅用于清理资源，还提供调试信
息或执行其他任务。C#析构函数要比C++析构函数的使用少得多。与C++析构函数相比，
C#析构函数的问题是它们的不确定性。在销毁C++对象时，其析构函数会立即运行。但由
于使用C#时垃圾回收器的工作方式，无法确定C#对象的析构函数何时执行。所以，不能
在析构函数中放置需要在某一时刻运行的代码，也不应寄望于析构函数会以特定顺序对不
同类的实例调用。如果对象占用了宝贵而重要的资源，应尽快释放这些资源，此时就不能
等待垃圾回收器来释放了。
另一个问题是C#析构函数的实现会延迟对象最终从内存中删除的时间。没有析构函
数的对象会在垃圾回收器的一次处理中从内存中删除，但有析构函数的对象需要两次处理
才能销毁：第一次调用析构函数时，没有删除对象，第二次调用才真正删除对象。另外，
运行库使用一个线程来执行所有对象的Finalize（）方法。如果频繁使用析构函数，而且
使用它们执行长时间的清理任务，对性能的影响就会非常显著。
5.4.2 IDisposable接口
在C#中，推荐使用System.IDisposable接口替代析构函数。IDisposable接口定义了一种
模式（具有语言级的支持），该模式为释放非托管的资源提供了确定的机制，并避免产生
析构函数固有的与垃圾回收器相关的问题。IDisposable接口声明了一个Dispose（）方法，
它不带参数，返回void。MyClass类的Dispose（）方法的实现代码如下：
    class MyClass: IDisposable
    {
      public void Dispose()
      {
        // implementation
      }
    }
Dispose（）方法的实现代码显式地释放由对象直接使用的所有非托管资源，并在所
有也实现IDisposable接口的封装对象上调用Dispose（）方法。这样，Dispose（）方法为
何时释放非托管资源提供了精确的控制。
假定有一个ResourceGobbler类，它需要使用某些外部资源，且实现IDisposable接口。
如果要实例化这个类的实例，使用它，然后释放它，就可以使用下面的代码：
    var theInstance = new ResourceGobbler();
    // do your processing
    theInstance.Dispose();
但是，如果在处理过程中出现异常，这段代码就没有释放theInstance使用的资源，所
以应使用try块，编写下面的代码：
    ResourceGobbler theInstance = null;
    try
    {
      theInstance = new ResourceGobbler();
      // do your processing
    }
    finally
    {
      theInstance? .Dispose();
    }
5.4.3 using语句
使用try/finally，即使在处理过程中出现了异常，也可以确保总是在theInstance上调用
Dispose（）方法，总是释放theInstance使用的任意资源。但是，如果总是要重复这样的结
构，代码就很容易被混淆。C#提供了一种语法，可以确保在实现IDisposable接口的对象的
引用超出作用域时，在该对象上自动调用Dispose（）方法。该语法使用了using关键字来
完成此工作——该关键字在完全不同的环境下，它与名称空间没有关系。下面的代码生成
与try块等价的IL代码：
    using (var theInstance = new ResourceGobbler())
    {
      // do your processing
    }
using语句的后面是一对圆括号，其中是引用变量的声明和实例化，该语句使变量的
作用域限定在随后的语句块中。另外，在变量超出作用域时，即使出现异常，也会自动调
用其Dispose（）方法。
  注意： using关键字在C#中有多个用法。using声明用于导入名称空间。using
语句处理实现IDisposable的对象，并在作用域的末尾调用Dispose方法。
  注意： .NET Framework中的几个类有Close和Dispose方法。如果常常要关闭
资源（如文件和数据库），就实现Close和Dispose方法。此时Close（）方法只是调用
Dispose（）方法。这种方法在类的使用上比较清晰，还支持using语句。新类只实现了
Dispose方法，因为我们已经习惯了它。
5.4.4 实现IDisposable接口和析构函数
前面的章节讨论了自定义类所使用的释放非托管资源的两种方式：
● 利用运行库强制执行的析构函数，但析构函数的执行是不确定的，而且，由于垃圾
回收器的工作方式，它会给运行库增加不可接受的系统开销。
● IDisposable接口提供了一种机制，该机制允许类的用户控制释放资源的时间，但需
要确保调用Dispose（）方法。
如果创建了终结器，就应该实现IDisposable接口。假定大多数程序员都能正确调用
Dispose（）方法，同时把实现析构函数作为一种安全机制，以防没有调用Dispose（）方
法。下面是一个双重实现的例子：
    using System;
    public class ResourceHolder: IDisposable
    {
      private bool _isDisposed = false;
      public void Dispose()
      {
        Dispose(true);
        GC.SuppressFinalize(this);
      }
      protected virtual void Dispose(bool disposing)
      {
        if (! _isDisposed)
        {
        if (disposing)
        {
          // Cleanup managed objects by calling their
          // Dispose() methods.
        }
        // Cleanup unmanaged objects
        }
        _isDisposed = true;
      }
      ～ResourceHolder()
      {
        Dispose (false);
      }
      public void SomeMethod()
      {
        // Ensure object not already disposed before execution of any method
        if(_isDisposed)
        {
        throw new ObjectDisposedException("ResourceHolder");
        }
        // method implementation…
      }
    }
从上述代码可以看出，Dispose（）方法有第二个protected重载方法，它带一个布尔参
数，这是真正完成清理工作的方法。Dispose（bool）方法由析构函数和
IDisposable.Dispose（）方法调用。这种方式的重点是确保所有的清理代码都放在一个地
方。
传递给Dispose（bool）方法的参数表示Dispose（bool）方法是由析构函数调用，还是
由IDisposable.Dispose（）方法调用——Dispose（bool）方法不应从代码的其他地方调
用，其原因是：
● 
如果使用者调用IDisposable.Dispose（）方法，该使用者就指定应清理所有与该对
象相关的资源，包括托管和非托管的资源。
● 如果调用了析构函数，原则上所有的资源仍需要清理。但是在这种情况下，析构函
数必须由垃圾回收器调用，而且用户不应试图访问其他托管的对象，因为我们不
再能确定它们的状态了。在这种情况下，最好清理已知的非托管资源，希望任何
引用的托管对象还有析构函数，这些析构函数执行自己的清理过程。
_isDisposed成员变量表示对象是否已被清理，并确保不试图多次清理成员变量。它还
允许在执行实例方法之前测试对象是否已清理，如SomeMethod（）方法所示。这个简单
的方法不是线程安全的，需要调用者确保在同一时刻只有一个线程调用方法。要求使用者
进行同步是一个合理的假定，在整个.NET类库中（例如，在Collection类中）反复使用了
这个假定。第21和22章将讨论线程和同步。
最后，IDisposable.Dispose（）方法包含一个对System.GC.SuppressFinalize（）方法的
调用。GC类表示垃圾回收器，SuppressFinalize（）方法则告诉垃圾回收器有一个类不再
需要调用其析构函数了。因为Dispose（）方法已经完成了所有需要的清理工作，所以析
构函数不需要做任何工作。调用SuppressFinalize（）方法就意味着垃圾回收器认为这个对
象根本没有析构函数。
5.4.5 IDisposable和终结器的规则
学习了终结器和IDisposable接口后，就已经了解了Dispose模式和使用这些构造的规
则。因为释放资源是托管代码的一个重要方面，下面总结如下规则：
● 如果类定义了实现IDisposable的成员，该类也应该实现IDisposable。
● 实现IDisposable并不意味着也应该实现一个终结器。终结器会带来额外的开销，因
为它需要创建一个对象，释放该对象的内存，需要GC的额外处理。只在需要时才
应该实现终结器，例如，发布本机资源。要释放本机资源，就需要终结器。
● 如果实现了终结器，也应该实现IDisposable接口。这样，本机资源可以早些释放，
而不仅是在GC找出被占用的资源时，才释放资源。
● 在终结器的实现代码中，不能访问已终结的对象了。终结器的执行顺序是没有保证
的。
● 如果所使用的一个对象实现了IDisposable接口，就在不再需要对象时调用Dispose方
法。如果在方法中使用这个对象，using语句比较方便。如果对象是类的一个成
员，就让类也实现IDisposable。
5.5 不安全的代码
如前所述，C#非常擅长于对开发人员隐藏大部分基本内存管理，因为它使用了垃圾
回收器和引用。但是，有时需要直接访问内存。例如，由于性能问题，要在外部
（非.NET环境）的DLL中访问一个函数，该函数需要把一个指针当作参数来传递（许多
Windows API函数就是这样）。本节将论述C#直接访问内存的内容的功能。
5.5.1 用指针直接访问内存
下面把指针当作一个新论题来介绍，而实际上，指针并不是新东西。因为在代码中可
以自由使用引用，而引用就是一个类型安全的指针。前面已经介绍了表示对象和数组的变
量实际上存储相应数据（被引用者）的内存地址。指针只是一个以与引用相同的方式存储
地址的变量。其区别是C#不允许直接访问在引用变量中包含的地址。有了引用后，从语
法上看，变量就可以存储引用的实际内容。
C#引用主要用于使C#语言易于使用，防止用户无意中执行某些破坏内存中内容的操
作。另一方面，使用指针，就可以访问实际内存地址，执行新类型的操作。例如，给地址
加上4个字节，就可以查看甚至修改存储在新地址中的数据。
下面是使用指针的两个主要原因：
● 向后兼容性 ——尽管.NET运行库提供了许多工具，但仍可以调用本地的Windows
API函数。对于某些操作这可能是完成任务的唯一方式。这些API函数都是用
C++或C#语言编写的，通常要求把指针作为其参数。但在许多情况下，还可以使
用DllImport声明，以避免使用指针，例如，使用System.IntPtr类。
● 性能 ——在一些情况下，速度是最重要的，而指针可以提供最优性能。假定用户
知道自己在做什么，就可以确保以最高效的方式访问或处理数据。但是，注意在
代码的其他区域中，不使用指针，也可以对性能进行必要的改进。请使用代码配
置文件，查找代码中的瓶颈，Visual Studio中就包含一个代码配置文件。
但是，这种低级的内存访问也是有代价的。使用指针的语法比引用类型的语法更复
杂。而且，指针使用起来比较困难，需要非常高的编程技巧和很强的能力，仔细考虑代码
所完成的逻辑操作，才能成功地使用指针。如果不仔细，使用指针就很容易在程序中引入
细微的、难以查找的错误。例如，很容易重写其他变量，导致栈溢出，访问某些没有存储
变量的内存区域，甚至重写.NET运行库所需要的代码信息，因而使程序崩溃。
另外，如果使用指针，就必须授予代码运行库的代码访问安全机制的高级别信任，否
则就不能执行它。在默认的代码访问安全策略中，只有代码运行在本地计算机上，这才是
可能的。如果代码必须运行在远程地点，如Internet，用户就必须给代码授予额外的许
可，代码才能工作。除非用户信任你和你的代码，否则他们不会授予这些许可，第24章将
讨论代码访问安全性。
尽管有这些问题，但指针在编写高效的代码时是一种非常强大和灵活的工具。
  注意： 这里强烈建议不要轻易使用指针，否则代码不仅难以编写和调试，而
且无法通过CLR施加的内存类型安全检查。
1．用unsafe关键字编写不安全的代码
因为使用指针会带来相关的风险，所以C#只允许在特别标记的代码块中使用指针。
标记代码所用的关键字是unsafe。下面的代码把一个方法标记为unsafe：
    unsafe int GetSomeNumber()
    {
      // code that can use pointers
    }
任何方法都可以标记为unsafe——无论该方法是否应用了其他修饰符（例如，静态方
法、虚方法等）。在这种方法中，unsafe修饰符还会应用到方法的参数上，允许把指针用
作参数。还可以把整个类或结构标记为unsafe，这表示假设所有的成员都是不安全的：
    unsafe class MyClass
    {
      // any method in this class can now use pointers
    }
同样，可以把成员标记为unsafe：
    class MyClass
    {
      unsafe int＊ pX; // declaration of a pointer field in a class
    }
也可以把方法中的一块代码标记为unsafe：
    void MyMethod()
    {
      // code that doesn't use pointers
      unsafe
      {
        // unsafe code that uses pointers here
      }
      // more 'safe' code that doesn't use pointers
    }
但要注意，不能把局部变量本身标记为unsafe：
    int MyMethod()
    {
      unsafe int ＊pX; // WRONG
    }
如果要使用不安全的局部变量，就需要在不安全的方法或语句块中声明和使用它。在
使用指针前还有一步要完成。C#编译器会拒绝不安全的代码，除非告诉编译器代码包含
不安全的代码块。通过DNX，可以在project.json文件的compilationOptions中把allowUnsafe
设置为true（代码文件PointerPlayground/project.json）：
    "compilationOptions": {"allowUnsafe": true},
在传统的csc编译器中，可以设置/unsafe选项，或者使用Visual Studio 2015在Project设
置中把Build配置指定为Allow Unsafe Code：
    csc /unsafe MySource.cs
2．指针的语法
把代码块标记为unsafe后，就可以使用下面的语法声明指针：
    int＊ pWidth, pHeight;
    double＊ pResult;
    byte＊[] pFlags;
这段代码声明了4个变量，pWidth和pHeight是整数指针，pResult是double型指针，
pFlags是字节型的数组指针。我们常常在指针变量名的前面使用前缀p来表示这些变量是
指针。在变量声明中，符号*表示声明一个指针，换言之，就是存储特定类型的变量的地
址。
声明了指针类型的变量后，就可以用与一般变量相同的方式使用它们，但首先需要学
习另外两个运算符：
● 
&表示“取地址”，并把一个值数据类型转换为指针，例如，int转换为*int。这个运
算符称为寻址运算符。
● 
*表示“获取地址的内容”，把一个指针转换为值数据类型（例如，*float转换为
float）。这个运算符称为“间接寻址运算符”（有时称为“取消引用运算符”）。
从这些定义中可以看出，&和*的作用是相反的。
  注意： 符号&和*也表示按位AND（&）和乘法（*）运算符，为什么还可以
以这种方式使用它们？答案是在实际使用时它们是不会混淆的，用户和编译器总是知
道在什么情况下这两个符号有什么含义，因为按照指针的定义，这些符号总是以一元
运算符的形式出现——它们只作用于一个变量，并出现在代码中该变量的前面。另一
方面，按位AND和乘法运算符是二元运算符，它们需要两个操作数。
下面的代码说明了如何使用这些运算符：
    int x = 10;
    int＊ pX, pY;
图5-6
    pX = &x;
    pY = pX;
    ＊pY = 20;
首先声明一个整数x，其值是10。接着声明两个整数指针pX和pY。然后把pX设置为
指向x（换言之，把pX的内容设置为x的地址）。然后把pX的值赋予pY，所以pY也指向