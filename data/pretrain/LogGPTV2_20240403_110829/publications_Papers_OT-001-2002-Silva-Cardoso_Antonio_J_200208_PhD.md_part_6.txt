### 2.6.1.1 Workflow Reduction Techniques

#### 2.6.1.1.1 Parallel System Reduction
In a parallel system, tasks \( t_1, t_2, \ldots, t_n \) can be reduced to a single task \( t_{1n} \). The incoming transitions of \( t_a \) and the outgoing transition of \( t_b \) remain unchanged. The only outgoing transitions from \( t_a \) and the only incoming transitions to \( t_b \) are those shown in Figure 2-4. The probabilities \( p_{a1}, p_{a2}, \ldots, p_{an} \) and \( p_{1b}, p_{2b}, \ldots, p_{nb} \) are all set to 1.

**Figure 2-4: Parallel system reduction**

- **QoS of tasks \( t_a \) and \( t_b \)**: Remain unchanged.
- **QoS of the reduction**:
  - \( T(t_{1n}) = \max_{i \in \{1, \ldots, n\}} \{T(t_i)\} \)
  - \( C(t_{1n}) = \sum_{i=1}^{n} C(t_i) \)
  - \( R(t_{1n}) = \prod_{i=1}^{n} R(t_i) \)
  - \( F(t_{1n}).a = f(F(t_1), F(t_2), \ldots, F(t_n)) \)

#### 2.6.1.1.2 Conditional System Reduction
A system of conditional tasks \( t_1, t_2, \ldots, t_n \), an XOR split (task \( t_a \)), and an XOR join (task \( t_b \)) can be reduced to a sequence of three tasks \( t_a, t_{1n}, t_b \). Task \( t_a \) has no other outgoing transitions, and task \( t_b \) has no other incoming transitions except those shown in Figure 2-5. The incoming transitions of \( t_a \) and the outgoing transition of \( t_b \) remain the same, and \( \sum_{i=1}^{n} p_{ai} = 1 \).

**Figure 2-5: Conditional system reduction**

- **QoS of tasks \( t_a \) and \( t_b \)**: Remain unchanged.
- **QoS of the reduction**:
  - \( T(t_{1n}) = \sum_{i=1}^{n} p_{ai} \cdot T(t_i) \)
  - \( C(t_{1n}) = \sum_{i=1}^{n} p_{ai} \cdot C(t_i) \)
  - \( R(t_{1n}) = \sum_{i=1}^{n} p_{ai} \cdot R(t_i) \)
  - \( F(t_{1n}).a = f(p_{a1}, F(t_1), p_{a2}, F(t_2), \ldots, p_{an}, F(t_n)) \)

#### 2.6.1.1.3 Simple Loop System Reduction
A simple loop system in task \( t_i \) can be reduced to a task \( t_{li} \). In this reduction, \( \sum_{i=1}^{n} p_{li} + p_{oi} = 1 \). Once the reduction is applied, the probabilities of the outgoing transitions of task \( t_{li} \) are changed to \( p_{lk} = \frac{p_{ok}}{\sum_{k=1}^{n} p_{ok}} \) and \( p_{li} = 1 \).

**Figure 2-6: Simple loop system reduction**

- **QoS of the reduction**:
  - \( T(t_{li}) = \frac{T(t_i)}{1 - p_i} \)
  - \( C(t_{li}) = \frac{C(t_i)}{1 - p_i} \)
  - \( R(t_{li}) = \frac{(1 - p_i) \cdot R(t_i)}{1 - p_i \cdot R(t_i)} \)
  - \( F(t_{li}).a = f(p, F(t_i)) \)

#### 2.6.1.1.4 Dual Loop System Reduction
A dual loop system composed of two tasks \( t_i \) and \( t_j \) can be reduced to a single task \( t_{ij} \). In this reduction, \( \sum_{i=1}^{n} p_{li} + p_{oi} = 1 \). Once the reduction is applied, the probabilities of the outgoing transitions of task \( t_{ij} \) are changed to \( p_{lk} = \frac{p_{ok}}{\sum_{k=1}^{n} p_{ok}} \) and \( p_{ij} = 1 \).

**Figure 2-7: Dual loop system reduction**

- **QoS of the reduction**:
  - \( T(t_{ij}) = \frac{T(t_i) + T(t_j) - (1 - p_j) \cdot T(t_j)}{1 - p_j} \)
  - \( C(t_{ij}) = \frac{C(t_i) + C(t_j) - (1 - p_j) \cdot C(t_j)}{1 - p_j} \)
  - \( R(t_{ij}) = \frac{(1 - p_j) \cdot R(t_i)}{1 - p_j \cdot R(t_i) \cdot R(t_j)} \)
  - \( F(t_{ij}).a = f(F(t_i), p, F(t_j)) \)

#### 2.6.1.1.5 Fault-Tolerant System Reduction
A fault-tolerant system with tasks \( t_1, t_2, \ldots, t_n \), an AND split (task \( t_a \)), and an XOR join (task \( t_b \)) can be reduced to a sequence of three tasks \( t_a, t_{1n}, t_b \). The execution of a fault-tolerant system starts with the execution of task \( t_a \) and ends with the completion of task \( t_b \). Task \( t_b \) will be executed only if \( k \) tasks from the set \( \{t_1, t_2, \ldots, t_n\} \) are executed successfully. In this reduction, the incoming transitions of \( t_a \) and the outgoing transition of \( t_b \) remain the same, and \( \forall i \in \{1, \ldots, n\}, p_{ai} = 1, p_{ib} = 1 \).

**Figure 2-8: Fault-tolerant system reduction**

- **QoS of tasks \( t_a \) and \( t_b \)**: Remain unchanged.
- **QoS of the reduction**:
  - \( T(t_{1n}) = \min\{T(t_1), T(t_2), \ldots, T(t_n)\} \)
  - \( C(t_{1n}) = \sum_{i=1}^{n} C(t_i) \)
  - \( R(t_{1n}) = \sum_{i_1=0}^{1} \cdots \sum_{i_n=0}^{1} f\left(\sum_{j=1}^{n} i_j - k\right) \cdot \prod_{j=1}^{n} \left((1 - i_j) + (2i_j - 1) \cdot R(t_j)\right) \)
  - \( F(t_{1n}).a = f(p_{a1}, F(t_1), p_{a2}, F(t_2), \ldots, p_{an}, F(t_n), k) \)

  The function \( \min(s) \) selects the \( k \)-th minimum value from set \( s \), and the function \( f(x) \) is defined as:
  \[
  f(x) = 
  \begin{cases} 
   0 & \text{if } x < 0 \\
   1 & \text{if } x \geq 0 
  \end{cases}
  \]

  The formula \( R(t_{1n}) \) computes the reliability by summing over all probabilistic states where more than \( k \) tasks execute successfully. The summation over \( i_1, \ldots, i_n \) generates a binary sequence where 0 represents the failure of a task, and 1 represents its success.

#### 2.6.1.1.6 Network System Reduction
A network task \( n_s \) represents a sub-workflow (Figure 2-9). It can be viewed as a black box encapsulating an unknown workflow realization with a certain QoS. A network task \( n_s \) having only one task \( t_i \) can be replaced by an atomic task \( t_j \). This reduction can be applied only when the QoS of task \( t_i \) is known. In this replacement, the QoS of the atomic task \( t_j \) is set to the workflow QoS of the task \( t_i \), i.e., \( X(t_j) = X(t_i) \) for \( X \in \{T, C, R, F\} \).

**Figure 2-9: Network system reduction**

- **Input and output transitions**: The input and output transitions of the network task \( n_s \) are transferred to the atomic task \( t_j \).

### 2.6.1.2 Time, Cost, Reliability, and Fidelity Computations

#### Time and Cost
The operations used to compute the time and cost dimensions are fairly intuitive.

#### Reliability
For the reliability dimension, we use concepts from system and software reliability theory (Hoyland and Rausand 1994; Ireson, Jr. et al. 1996; Musa 1999). The reliability functions assume that tasks behave independently, which is a common assumption in hardware systems but may be inappropriate for software systems due to their interdependencies.

Mason and Woit (1998) show that an application’s structure influences the dependability derived from the reliability of its components. They present a theory based on a set of rules that, when applied to the construction of an application, can result in systems that do not violate the underlying assumptions of typical reliability models, i.e., system independence. To understand the dependence of software components, it is necessary to distinguish between the terms “uses” and “invokes” (Parnas 1974; Parnas 2001). The “uses” methodology creates a dependency between modules or procedures, whereas the “invokes” methodology does not. Based on this observation, Mason and Woit (1998) state that to reduce the dependence of modules in a system or application, the “uses” methodology should not be present, and instead, the “invokes” methodology should be used. Additionally, the implementation details of a module should not affect the correctness of other modules in the system.