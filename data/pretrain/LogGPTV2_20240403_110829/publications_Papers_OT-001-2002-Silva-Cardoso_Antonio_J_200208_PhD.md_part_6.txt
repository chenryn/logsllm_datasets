2 n a b
49
tasks t , t , and t . In this reduction, the incoming transitions of t and the outgoing
a 1n b a
transition of tasks t remain the same. The only outgoing transitions from task t and the
b a
only incoming transitions from task t are the ones shown in the figure below. The
b
probabilities of p , p ,…, p and p , p ,…, p are equal to 1.
a1 a2 1n 1b 2b nb
t
1 p
p 1b
a1
p p p p
t * a2 t 2b * t t 1n t b t
a 2 b a 1n b
p an p nb
t
n
(a) (b)
Figure 2-4 - Parallel system reduction
The QoS of tasks t and t remain unchanged, and p = p = 1. To compute the QoS
a b 1n b
of the reduction the following formulae are applied:
T(t 1n) = Max i˛ {1..n} {T(t i)}
C(t ) = C(t)
1n i
1£ i£ .n
R(t ) = R(t)
1n i
1£ i£ .n
F(t ).a = f(F(t ), F(t ), …, F(t ))
1n r 1 2 n
Reduction of a Conditional System. Figure 2-5 illustrates how a system of conditional
tasks t , t , …, t , a xor split (task t ), and a xor join (task t ) can be reduced to a sequence
1 2 n a b
of three tasks t , t , and t . Task t and task t do not have any other outgoing transitions
a 1n b a b
and incoming transitions, respectively, other than the ones shown in the figure. In this
50
reduction the incoming transitions of t and outgoing transition of tasks t remain the
a b
 n
same, and p =1.
ai
i=1
t
1 p
p 1b
a1
+ p a2 p 2b+ p 1n p b
t t t t t t
a 2 b a 1n b
p p
an nb
t
n
(a) (b)
Figure 2-5 - Conditional system reduction
The QoS of tasks t and t remain unchanged, and p = p = 1. To compute the QoS
a b 1n b
of the reduction the following formulae are applied:
T(t ) = p * T(t)
1n ai i
1£ i£ .n
C(t ) = p * C(t)
1n ai i
1£ i£ .n
R(t ) = p * R(t)
1n ai i
1£ i£ .n
F(t ).a = f(p , F(t ), p , F(t ), …, p , F(t ))
1n r a1 1 a2 2 an n
Reduction of a Loop System. Loop systems can be characterized by simple and dual
loop systems. Figure 2-6 illustrates how a simple loop system can be reduced. A simple
 n
loop system in task t can be reduced to a task t . In this reduction, p + p =1.
i li i oi
i=1
Once the reduction is applied, the probabilities of the outgoing transitions of task t
li
p  n
are changed to p = ok , and p =1.
lk 1-p lk
i k=1
51
p
i
+ t i +p o1 + t + p l1
li … … … …
p p
(a) on (b) ln
Figure 2-6 – Simple loop system reduction
To compute the QoS of the reduction the following formulae are applied:
T(t )
T(t ) = i
li
1-p
i
C(t )
C(t ) = i
li
1-p
i
(1-p )*R(t )
R(t ) = i i
li
1-pR(t )
i i
F(t ).a = f(p, F(t))
li r i i
Figure 2-7 illustrates how a dual loop system can be reduced. A dual loop system
composed of two tasks t and t can be reduced to a single task t . In this reduction, p
i j ij i
 n
+ p =1. Once the reduction is applied, the probabilities of the outgoing transitions of
oi
i=1 p  n
task t are changed to p = ok , and p =1.
ij lk 1-p lk
i k=1
t
j
p
j
+ t +p o1 + + p l1
i t
ij … … … …
p p
(a) on (b) ln
Figure 2-7 – Dual loop system reduction
52
To compute the QoS of the reduction the following formulae are applied:
T(t )+T(t )- (1-p )T(t )
T(t ) = i j j j
ij
(1-p )
j
C(t )+C(t )- (1-p )C(t )
C(t ) = i j j j
ij
(1-p )
j
(1-p )*R(t )
R(t ) = j i
ij
1-p R(t )R(t )
j i j
F(t ).a = f(F(t), p, F(t))
ij r i j j
Reduction of a Fault-Tolerant System. Figure 2-8 illustrates how a fault-tolerant
system with tasks t , t , …, t , an and split (task t ), and a xor join (task t ) can be reduced
1 2 n a b
to a sequence of three tasks t , t , and t . The execution of a fault-tolerant system starts
a 1n b
with the execution of task t and ends with the completion of task t . Task t will be
a b b
executed only if k tasks from the set {t , t , …, t } are executed successfully. In this
1 2 n
reduction, the incoming transitions of t and the outgoing transition of tasks t remain the
a b
same, and " i˛ {1..n},p =1,p =1.
ai ib
t
1 p
p 1b
a1
K
p p p p
t * a2 t 2b + t t a1n t 1nb t
a 2 b a 1n b
p an p nb
t
n
(a) (b)
Figure 2-8 – Fault-Tolerant system reduction
The QoS of tasks t and t remain unchanged, and p = p = 1. To compute the
a b a1n 1nb
QoS of the reduction the following formulae are applied:
53
T(t ) = Min({T(t ),...,T(t )})
1n 1 n
k
C(t ) = C(t)
1n I
1£ i£ .n
 1  1  n
R(t ) = … f( i - k)*((1- i )+(2i - 1)R(t ))*...*((1- i )+(2i - 1)R(t ))
1n j 1 1 1 n n n
i=0 i =0 j=1
1 n
F(t ).a = f(p , F(t ), p , F(t ), …, p , F(t ), k)
1n r a1 1 a2 2 an n
The function Min(s)selects the k minimum value from set s, and function f(x)is
k
defined as followed:
 0,x < 0
f(x) = 
 1,x ‡ 0
The formula R(t ) is utilized to compute reliability and corresponds to the sum of all
1n
the probabilistic states for which more than k tasks execute successfully. The summation
over i , …, i corresponds to the generation of a binary sequence for which 0 represents
1 n
the failing of a task, and 1 represents its success. For example, in a faul-ttolerant system
with three parallel tasks (n=3), the values of the indexes i =1, i =0, and i =1 represent the
1 2 3
probabilistic state for which tasks t and t succeed and task t fails. The term
1 3 2
 n
f( i - k) is used to indicate if a probabilistic state should be considered in the
j
j=1
reliability computation. A probabilistic state is considered only if the number of tasks
 n  n
succeeding is greater or equal to k, i.e., i ‡ k (or equivalently i - k ‡ 0). In our
j j
j=1 n j=1
previous example, since i =1, i =0, i =1 and i = 2, the probabilistic state (i =1, i =0,
1 2 3 j 1 2
j=1
i =1) will be only considered if k £ 2.
3
54
Reduction of a Network System. A network task represents a sub-workflow (Figure
2-9). It can be viewed as a black box encapsulating an unknown workflow realization
with a certain QoS. A network task n , having only one task t, can be replaced by an
s i
atomic task t. This reduction can be applied only when the QoS of task t is known. In
j i
this replacement, the QoS of the atomic task t is set to the workflow QoS of the task t,
j i
i.e., X(t) = X(t), X ˛ {T, C, R, F}.
j i
n
s
t
j
t
i
(a) (b)
Figure 2-9 - Network system reduction
The input and output transitions of the network task n are transferred to the atomic
s
task t.
j
2.6.1.2 TIME, COST, RELIABILITY, AND FIDELITY COMPUTATIONS
Time and Cost. The operations used to compute the time and cost dimensions are fairly
intuitive.
Reliability. For the reliability dimension we have used concepts from system and
software reliability theory (Hoyland and Rausand 1994; Ireson, Jr. et al. 1996; Musa
1999). The reliability functions used when applying workflow reduction systems sasume
that tasks behave independently. While this assumption is widely employed when
modeling hardware systems, it is considered by some to be inappropriate for software
systems since they tend to violate the independence supposition of the individual
software systems.
Mason and Woit (1998) show that an application’s structure has an influence on the
dependability derived from the reliability of its components. Their work presents a theory
55
based on a set of rules which when applied to the construction of an application can result
in systems which do not violate the underlying assumptions of the typical reliability
models, i.e., system independence. In order to understand the dependence of software
components it is necessary to understand the difference between the terms “uses” and
“invokes” (Parnas 1974; Parnas 2001). The utilization of “use” methodology creates a
dependency between modules or procedures. This is because if a module A calls a
module B, then the state of A depends on the results of B. Using the “invokes”
methodology this problem does not arise, since when module A calls module B, module
A does not wait or depend on B’s execution results. Based on this observation, Mason
and Woit (1998) state that to reduce the dependence of modules in a system or
application a, “uses” methodology should not be present to interconnect the components;
instead, a “invokes” methodology should be present. Additionally, the module’s
implementation details cannot affect the correctness of other modules in the system (state