son with dynamic analysis. Observe that X-Force covers
all the instructions that are covered by natural runs for
all benchmarks except 253.perlbmk, which we will ex-
plain later. X-Force could cover most of the instructions
identiﬁed by IDA except 252.eon and 253.perlbmk.
We have manually inspected the differences between the
IDA and X-Force coverage. For most programs except
253.perlbmk, the differences are caused by part of the
code in those binaries being unreachable. In other words,
they are dead code that cannot be executed by any input.
Since IDA simply scans the code body to construct CFG
and CG, it reports all instructions it could ﬁnd including
the unreachable ones.
Input Union X-Force
Table 5: Detailed Indirect Call Edges Identiﬁcation
Comparison with Dynamic Analysis
Input Union
∩ X-Force
2
169
60
103
1103
28
\ Input Union
0
1551
61
48
19382
2
Input Union
\ X-Force
0
0
0
122
0
0
253.perlbmk
254.gap
255.vortex
164.gzip
176.gcc
252.eon
2
169
60
225
1103
28
2
1720
121
151
20485
30
X-Force
Indirect call edge identiﬁcation is very challenging in
binary analysis as a call site may have multiple call tar-
gets depending on execution states, which are usually
difﬁcult to cover or abstract. Some of them are dependent
on states related to multiple procedures. Note that there
does not exist an oracle that can provide the ground truth
for the set of real indirect call edges. From the results,
we could observe that LLVM’s indirect call identiﬁca-
tion algorithm generates a large number of edges, much
more than X-Force. However, we conﬁrm that most of
them are bogus because the LLVM algorithm simply re-
lies on method signatures to identify possible targets and
4Direct jump and call edges are easy to identify and elided.
836  23rd USENIX Security Symposium 
USENIX Association
IDA-Pro
7913
31847
310277
2184
43327
25532
70592
132264
113410
132053
5761
46556
Coverage
Input Union X-Force
5075
29218
227546
1935
42763
23135
27224
33643
110066
101207
4830
41935
3601
19409
157451
1622
27811
17339
15580
55964
37564
53798
3612
19996
IDA-Pro
0
0
25
0
0
0
0
24
2
0
0
0
164.gzip
175.vpr
176.gcc
181.mcf
186.crafty
197.parser
252.eon
253.perlbmk
254.gap
255.vortex
256.bzip2
300.twolf
Table 3: CFG and CG Construction Results.
Indirect Call Edge
X-Force Internals
# of Runs Avg. # of Exp. Avg./Max. Linear Set Size
2.9/36
2.8/19
4.5/265
3.1/23
2.6/9
2.5/17
2.3/10
3.5/40
30.0/1846
2.9/33
3.3/15
2.6/8
246
1849
26606
113
2496
1820
2091
843
7319
8566
209
2825
10
49
95
10
0.4
8
4
0.8
1353
13
5
17
Switched/Total # of predicates
2.1/1291
4.7/2164
12.9/29847
4.3/153
8.0/62582
6.4/944
4.1/3146
8.3/9535
6.0/173316
7.3/2548
1.4/7001
5.4/1322
Input Union
2
0
169
0
0
0
60
225
1103
28
0
0
LLVM X-Force Time (s)
704
8725
173241
129
43995
3424
6379
7137
50745
34776
557
10043
2
0
9141
0
0
0
28802
-
187155
340
0
0
2
0
1720
0
0
0
121
151
20470
30
0
0
hence is too conservative. X-Force could recognize a lot
more indirect call edges than dynamic analysis. The de-
tailed comparison in Table 5 shows that the X-Force re-
sults cover all the dynamic results and have many more
edges, except 253.perlbmk. We have manually inspected
a random set of the selected edges that are reported by
X-Force but not the dynamic analysis and conﬁrmed that
they are feasible. From the results in Table 3, IDA can
hardly resolve any indirect call edges.
253.perlbmk
Function Block
164.gzip
176.gcc
252.eon
Functions
21/186(11%)
19/1398(1%)
13/649(2%)
27/1510(1%)
21/941(2%)
21/1031(2%)
Touched
Functions
62/186(33%)
62/1398(4%)
19/649(2%)
134/1510(8%)
80/941(8%)
437/1031(42%)
Coverage
768/1294(59%)
740/1468(50%)
64/101(63%)
1708/6912(24%)
1235/3136(39%)
10933/20822(52%)
Basic Block
Coverage
768/2240(34%)
740/46487(1%)
64/2830(2%)
1708/37384(4%)
1235/28871(4%)
10933/35979(30%)
Table 6: Result of using S2E to analyze SPEC programs
Fully Covered Number
of Paths
134
261
33
329
254.gap
29
255.vortex
9
We also use S2E to analyze the six SPECINT 2000
programs that contain indirect calls. The four programs
other than 252.eon and 255.vortex read input from
stdin, so we use the s2ecmd utility tool provided by S2E
to write 64 bytes to stdout and pipe the symbolic bytes
into these programs. We run each program in S2E and
use the ExecutionTracer plugin to record the execu-
tion trace. We use the IDA scripts provided by S2E to
extract information of basic blocks and functions from
the binaries, and then use the coverage tool provided
by S2E to calculate the result.