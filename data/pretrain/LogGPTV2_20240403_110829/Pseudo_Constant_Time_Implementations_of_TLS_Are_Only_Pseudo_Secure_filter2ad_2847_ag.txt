(2017),
s2n is now handling 100 percent of
ssl
https://aws.amazon.com/blogs/security/
traﬃc
s2n-is-now-handling-100-percent-of-of-ssl-traffic-for-amazon-s3/
amazon
for
32. Somorovsky, J.: Systematic fuzzing and testing of TLS libraries. In: Weippl, E.R., Katzen-
beisser, S., Kruegel, C., Myers, A.C., Halevi, S. (eds.) ACM CCS 16: 23rd Conference on
Computer and Communications Security. pp. 1492–1504. ACM Press (Oct 2016)
33. Vaudenay, S.: Security ﬂaws induced by CBC padding - applications to SSL, IPSEC,
WTLS... In: Knudsen, L.R. (ed.) Advances in Cryptology – EUROCRYPT 2002. Lecture
Notes in Computer Science, vol. 2332, pp. 534–546. Springer, Heidelberg (Apr / May
2002)
34. Veyrat-Charvillon, N., G´erard, B., Renauld, M., Standaert, F.X.: An optimal key enu-
meration algorithm and its application to side-channel attacks. In: Knudsen, L.R., Wu,
H. (eds.) SAC 2012: 19th Annual International Workshop on Selected Areas in Cryptog-
raphy. Lecture Notes in Computer Science, vol. 7707, pp. 390–406. Springer, Heidelberg
(Aug 2013)
35. Xiao, Y., Li, M., Chen, S., Zhang, Y.: STACCO: Diﬀerentially analyzing side-channel
traces for detecting SSL/TLS vulnerabilities in secure enclaves. In: Thuraisingham, B.M.,
Evans, D., Malkin, T., Xu, D. (eds.) ACM CCS 17: 24th Conference on Computer and
Communications Security. pp. 859–874. ACM Press (Oct / Nov 2017)
36. Yarom, Y.: Mastik: A micro-architectural side-channel toolkit (2016), http://cs.
adelaide.edu.au/~yval/Mastik/Mastik.pdf
37. Yarom, Y., Benger, N.: Recovering OpenSSL ECDSA nonces using the FLUSH+RELOAD
cache side-channel attack. Cryptology ePrint Archive, Report 2014/140 (2014), http:
//eprint.iacr.org/2014/140
38. Yarom, Y., Falkner, K.: FLUSH+RELOAD: A high resolution,
low noise, L3 cache
side-channel attack. In: Fu, K., Jung, J. (eds.) Proceedings of the 23rd USENIX
Security Symposium, San Diego, CA, USA, August 20-22, 2014. pp. 719–732.
USENIX Association (2014), https://www.usenix.org/conference/usenixsecurity14/
technical-sessions/presentation/yarom
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
29
39. Zhang, Y., Juels, A., Reiter, M.K., Ristenpart, T.: Cross-VM side channels and their use
to extract private keys. In: Yu, T., Danezis, G., Gligor, V.D. (eds.) ACM CCS 12: 19th
Conference on Computer and Communications Security. pp. 305–316. ACM Press (Oct
2012)
A Source Code
int s2n hmac digest two compression rounds(struct s2n hmac state ∗state,
Listing 1.1: s2n HMAC digest for CBC verify
in the current hash block
void ∗out, uint32 t size ){
/∗ Do the ”real” work of this function. ∗/
GUARD(s2n hmac digest(state, out, size));
/∗ If there were 9 or more bytes of space left
∗ then the serialized length , plus an 0x80 byte, will have ﬁt
in that block .
∗ If there were fewer than 9 then adding the length will have caused an extra
∗ compression block round. This digest function always does two compression rounds,
∗ even if there is no need for the second.
∗/
if (state−>currently in hash block > (state−>hash block size − 9))
/∗ Can’t reuse a hash after it has been ﬁnalized ,
so reset and push another block in ∗/
GUARD(s2n hash reset(&state−>inner));
/∗ No−op s2n hash update to normalize timing and guard against Lucky13. This
does not aﬀect the value of ∗out. ∗/
return s2n hash update(&state−>inner, state−>xor pad, state−>hash block size);
return 0;
}
int s2n verify cbc(struct s2n connection ∗conn, struct s2n hmac state ∗hmac,
Listing 1.2: s2n CBC veriﬁcation function
struct s2n blob ∗decrypted) {
/∗ Set up MAC copy workspace ∗/
struct s2n hmac state ∗copy = &conn−>client−>record mac copy workspace;
...
/∗ Update the MAC ∗/
GUARD(s2n hmac update(hmac, decrypted−>data, payload length));
GUARD(s2n hmac copy(copy, hmac));
/∗ Check the MAC ∗/
uint8 t check digest [S2N MAX DIGEST LEN];
lte check(mac digest size, sizeof(check digest ));
GUARD(s2n hmac digest two compression rounds(hmac, check digest, mac digest size));
Listing 1.3: GnuTLS’s extra compression call calculation
static void dummy wait(record parameters st ∗ params, gnutls datum t ∗ plaintext,
unsigned pad failed, unsigned int pad, unsigned total){
...
30
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
/∗ This is really speciﬁc to the current hash functions.
∗ It should be removed once a protocol ﬁx is in place .
∗/
if ((pad + total) % len > len − 9 && total % len size)
gnutls auth cipher add auth(&params−>read.cipher state,
plaintext−>data, len);
Listing 1.4: GnuTLS’s pad check and HMAC veriﬁcation
decrypt packet(gnutls session t session , gnutls datum t ∗ ciphertext,
gnutls datum t ∗ plain, content type t type, record parameters st ∗ params,
gnutls uint64 ∗ sequence) {
...
pad = plain−>data[ciphertext−>size − 1]; /∗ pad ∗/
...
for ( i = 2; i size); i++) {
tmp pad failed |= (plain−>data[ciphertext−>size − i] != pad);
pad failed |= (( i  ((int) ciphertext−>size − tag size)))) {
/∗ We do not fail here. We check below for the
∗ the pad failed . If zero means success.
∗/
pad failed = 1;
pad = 0;
}
length = ciphertext−>size − tag size − pad − 1;
...
ret = gnutls auth cipher add auth(&params−>read.ctx.tls12, plain−>data, length);
if ( unlikely (gnutls memcmp(tag, tag ptr, tag size) != 0 || pad failed != 0)) {
/∗ HMAC was not the same. ∗/
dummy wait(params, plain, pad failed, pad, length + preamble size);
Listing 1.5: WolfSSL’s extra compression call calculation
COMPRESS UPPER = 55, /∗ compression calc numerator ∗/
COMPRESS LOWER = 64, /∗ compression calc denominator ∗/
/∗ get compression extra rounds ∗/
static INLINE int GetRounds(int pLen, int padLen, int t) {
...
L1 −= COMPRESS UPPER;
L2 −= COMPRESS UPPER;
if ( (L1 % COMPRESS LOWER) == 0)
roundL1 = 0;
if ( (L2 % COMPRESS LOWER) == 0)
roundL2 = 0;
Listing 1.6: WolfSSL’s pad checke and HMAC veriﬁcation
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
31
/∗ timing resistant pad/verify check, return 0 on success ∗/
static int TimingPadVerify(WOLFSSL∗ ssl, const byte∗ input, int padLen, int t,
int pLen, int content){
byte verify [WC MAX DIGEST SIZE];
byte dmy[sizeof(WOLFSSL) >= MAX PAD SIZE ? 1 : MAX PAD SIZE] = {0};
byte∗ dummy = sizeof(dmy) hmac(ssl, verify, input, pLen − t, content, 1); /∗ still compare ∗/
ConstantCompare(verify, input + pLen − t, t);
...
PadCheck(dummy, (byte)padLen, MAX PAD SIZE − padLen − 1);
ret = ssl−>hmac(ssl, verify, input, pLen − padLen − 1 − t, content, 1);
CompressRounds(ssl, GetRounds(pLen, padLen, t), dummy);
...
}
Listing 1.7: MBedTLS’s SHA512 ﬁnish function
static const unsigned char sha512 padding[128] = {
0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
...
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int mbedtls sha512 ﬁnish ret( mbedtls sha512 context ∗ctx,
unsigned char output[64] ){
size t last , padn;
...
last = (size t)( ctx−>total[0] & 0x7F );
padn = ( last in msg[ssl−>in msglen − 1];
...
for( i = 1; i in msg[padding idx + i] == padlen − 1 );
}
correct &= ( pad count == padlen ); /∗ Only 1 on correct padding ∗/
padlen &= correct ∗ 0x1FF;
...∗ Known timing attacks:
∗ − Lucky Thirteen (http://www.isg.rhul.ac.uk/tls/TLStiming.pdf)
∗
∗ We use ( ( Lx + 8 ) / 64 ) to handle ’negative Lx’ values
32
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
∗ correctly . (We round down instead of up, so −56 is the correct
∗ value for our calculations instead of −55)
∗/
size t j , extra run = 0;
extra run = ( 13 + ssl−>in msglen + padlen + 8 ) / 64 −
( 13 + ssl−>in msglen
+ 8 ) / 64;
...
mbedtls md hmac update( &ssl−>transform in−>md ctx dec, ssl−>in ctr, 8 );
mbedtls md hmac update( &ssl−>transform in−>md ctx dec, ssl−>in hdr, 3 );
mbedtls md hmac update( &ssl−>transform in−>md ctx dec, ssl−>in len, 2 );
mbedtls md hmac update( &ssl−>transform in−>md ctx dec, ssl−>in msg,
mbedtls md hmac ﬁnish( &ssl−>transform in−>md ctx dec, mac expect );
/∗ Call mbedtls md process at least once due to cache attacks ∗/
for( j = 0; j in msglen );
mbedtls md process( &ssl−>transform in−>md ctx dec, ssl−>in msg );
mbedtls md hmac reset( &ssl−>transform in−>md ctx dec );
Listing 1.9: MBedTLS’s internal SHA512 process function assmebly code
48690 :
fb c0 b5
movabs $0xb5c0fbcfec4d3b2f,%rbp
movabs $0x7137449123ef65cd,%r13
mov %r15,0x20(%rsp)
movabs $0x923f82a4af194f9b,%r15
...
48797: 49 bf 18 81 6d da d5 movabs $0xab1c5ed5da6d8118,%r15
4879e: 5e 1c ab
487a1: 48 bd 2f 3b 4d ec cf
487a8:
487ab: 4c 89 7c 24 20
487b0: 49 bf 9b 4f 19 af a4
487b7: 82 3f 92
487ba: 49 bd cd 65 ef 23 91
487c1: 44 37 71
487c4: 4c 89 7c 24 18
487c9: 49 bf 19 d0 05 b6 f1
487d0: 11 f1 59
487d3: 49 bc 22 ae 28 d7 98 movabs $0x428a2f98d728ae22,%r12
487da: 2f 8a 42
...
48802: 49 bf 38 b5 48 f3 5b movabs $0x3956c25bf348b538,%r15
48809: c2 56 39
4880c: 48 89 74 24 30
48811: 4c 89 7c 24 08
48816: 49 bf bc db 89 81 a5 movabs $0xe9b5dba58189dbbc,%r15
4881d: db b5 e9
mov %r15,0x18(%rsp)
movabs $0x59f111f1b605d019,%r15
mov %rsi,0x30(%rsp)
mov %r15,0x8(%rsp)