### 优化后的文本

#### s2n 处理 SSL 流量的现状
截至2017年，s2n 已经处理了 Amazon S3 的全部 SSL 流量。更多信息请参见 [AWS 安全博客](https://aws.amazon.com/blogs/security/s2n-is-now-handling-100-percent-of-ssl-traffic-for-amazon-s3/)。

#### 参考文献
1. **Somorovsky, J.** (2016). 系统化模糊测试和TLS库测试。*ACM CCS 16: 第23届计算机与通信安全会议*，pp. 1492–1504。ACM Press。
   
2. **Vaudenay, S.** (2002). CBC填充引起的安全缺陷——应用于SSL、IPSEC、WTLS等。*Advances in Cryptology – EUROCRYPT 2002*，Lecture Notes in Computer Science, vol. 2332, pp. 534–546。Springer, Heidelberg。

3. **Veyrat-Charvillon, N., Gérard, B., Renauld, M., Standaert, F.X.** (2013). 最优密钥枚举算法及其在侧信道攻击中的应用。*SAC 2012: 第19届密码学选定领域国际研讨会*，Lecture Notes in Computer Science, vol. 7707, pp. 390–406。Springer, Heidelberg。

4. **Xiao, Y., Li, M., Chen, S., Zhang, Y.** (2017). STACCO：通过分析侧信道痕迹检测安全飞地中的SSL/TLS漏洞。*ACM CCS 17: 第24届计算机与通信安全会议*，pp. 859–874。ACM Press。

5. **Yarom, Y.** (2016). Mastik：一个微架构侧信道工具包。[在线文档](http://cs.adelaide.edu.au/~yval/Mastik/Mastik.pdf)。

6. **Yarom, Y., Benger, N.** (2014). 使用FLUSH+RELOAD缓存侧信道攻击恢复OpenSSL ECDSA非随机数。Cryptology ePrint Archive, Report 2014/140。[在线文档](http://eprint.iacr.org/2014/140)。

7. **Yarom, Y., Falkner, K.** (2014). FLUSH+RELOAD：一种高分辨率、低噪声的L3缓存侧信道攻击。*第23届USENIX安全研讨会*，美国加利福尼亚州圣迭戈，2014年8月20-22日，pp. 719–732。USENIX Association。[在线文档](https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/yarom)。

8. **Zhang, Y., Juels, A., Reiter, M.K., Ristenpart, T.** (2012). 跨虚拟机侧信道及其在提取私钥中的应用。*ACM CCS 12: 第19届计算机与通信安全会议*，pp. 305–316。ACM Press。

### 代码示例
以下是一些代码示例，展示了不同实现中对TLS的伪常数时间实现。

#### s2n HMAC摘要（两轮压缩）
```c
int s2n_hmac_digest_two_compression_rounds(struct s2n_hmac_state *state, void *out, uint32_t size) {
    // 执行函数的主要工作
    GUARD(s2n_hmac_digest(state, out, size));

    // 如果当前哈希块中有9个或更多字节的空间，则序列化长度加上0x80字节将适合该块。
    // 如果少于9个字节，则添加长度会导致额外的压缩块轮次。
    if (state->currently_in_hash_block > (state->hash_block_size - 9)) {
        // 重置并推送另一个块
        GUARD(s2n_hash_reset(&state->inner));
    }

    // 无操作的s2n_hash_update以规范化时间和防止Lucky13攻击
    return s2n_hash_update(&state->inner, state->xor_pad, state->hash_block_size);
}
```

#### s2n CBC验证函数
```c
int s2n_verify_cbc(struct s2n_connection *conn, struct s2n_hmac_state *hmac, struct s2n_blob *decrypted) {
    // 设置MAC复制工作区
    struct s2n_hmac_state *copy = &conn->client->record_mac_copy_workspace;

    // 更新MAC
    GUARD(s2n_hmac_update(hmac, decrypted->data, payload_length));
    GUARD(s2n_hmac_copy(copy, hmac));

    // 检查MAC
    uint8_t check_digest[S2N_MAX_DIGEST_LEN];
    lte_check(mac_digest_size, sizeof(check_digest));
    GUARD(s2n_hmac_digest_two_compression_rounds(hmac, check_digest, mac_digest_size));
}
```

#### GnuTLS的额外压缩调用计算
```c
static void dummy_wait(record_parameters_st *params, gnutls_datum_t *plaintext, unsigned pad_failed, unsigned int pad, unsigned total) {
    // 特定于当前哈希函数，应在未来协议修复后移除
    if ((pad + total) % len > len - 9 && total % len == 0) {
        gnutls_auth_cipher_add_auth(&params->read.cipher_state, plaintext->data, len);
    }
}
```

#### GnuTLS的填充检查和HMAC验证
```c
void decrypt_packet(gnutls_session_t session, gnutls_datum_t *ciphertext, gnutls_datum_t *plain, content_type_t type, record_parameters_st *params, gnutls_uint64 *sequence) {
    // 填充检查
    pad = plain->data[ciphertext->size - 1];
    for (i = 2; i < size; i++) {
        tmp_pad_failed |= (plain->data[ciphertext->size - i] != pad);
        pad_failed |= ((i < (int)ciphertext->size - tag_size));
    }

    // 验证HMAC
    ret = gnutls_auth_cipher_add_auth(&params->read.ctx.tls12, plain->data, length);
    if (unlikely(gnutls_memcmp(tag, tag_ptr, tag_size) != 0 || pad_failed != 0)) {
        dummy_wait(params, plain, pad_failed, pad, length + preamble_size);
    }
}
```

#### WolfSSL的额外压缩调用计算
```c
#define COMPRESS_UPPER 55
#define COMPRESS_LOWER 64

// 获取额外压缩轮次
static INLINE int GetRounds(int pLen, int padLen, int t) {
    L1 -= COMPRESS_UPPER;
    L2 -= COMPRESS_UPPER;
    if ((L1 % COMPRESS_LOWER) == 0) roundL1 = 0;
    if ((L2 % COMPRESS_LOWER) == 0) roundL2 = 0;
}
```

#### WolfSSL的填充检查和HMAC验证
```c
// 时序抗性填充/验证检查，成功返回0
static int TimingPadVerify(WOLFSSL *ssl, const byte *input, int padLen, int t, int pLen, int content) {
    byte verify[WC_MAX_DIGEST_SIZE];
    byte dmy[sizeof(WOLFSSL) >= MAX_PAD_SIZE ? 1 : MAX_PAD_SIZE] = {0};
    byte *dummy = sizeof(dmy);

    // 仍然进行比较
    ConstantCompare(verify, input + pLen - t, t);
    PadCheck(dummy, (byte)padLen, MAX_PAD_SIZE - padLen - 1);
    ret = ssl->hmac(ssl, verify, input, pLen - padLen - 1 - t, content, 1);
    CompressRounds(ssl, GetRounds(pLen, padLen, t), dummy);
}
```

#### MBedTLS的SHA512完成函数
```c
static const unsigned char sha512_padding[128] = {
    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

int mbedtls_sha512_finish_ret(mbedtls_sha512_context *ctx, unsigned char output[64]) {
    size_t last, padn;
    last = (size_t)(ctx->total[0] & 0x7F);
    padn = (last < 112) ? (112 - last) : (128 + 112 - last);
    ...
}
```

#### MBedTLS的内部SHA512过程函数汇编代码
```assembly
48690: fb c0 b5 movabs $0xb5c0fbcfec4d3b2f,%rbp
movabs $0x7137449123ef65cd,%r13
mov %r15,0x20(%rsp)
movabs $0x923f82a4af194f9b,%r15
...
48797: 49 bf 18 81 6d da d5 movabs $0xab1c5ed5da6d8118,%r15
4879e: 5e 1c ab
487a1: 48 bd 2f 3b 4d ec cf
487a8:
487ab: 4c 89 7c 24 20
487b0: 49 bf 9b 4f 19 af a4
487b7: 82 3f 92
487ba: 49 bd cd 65 ef 23 91
487c1: 44 37 71
487c4: 4c 89 7c 24 18
487c9: 49 bf 19 d0 05 b6 f1
487d0: 11 f1 59
487d3: 49 bc 22 ae 28 d7 98 movabs $0x428a2f98d728ae22,%r12
487da: 2f 8a 42
...
48802: 49 bf 38 b5 48 f3 5b movabs $0x3956c25bf348b538,%r15
48809: c2 56 39
4880c: 48 89 74 24 30
48811: 4c 89 7c 24 08
48816: 49 bf bc db 89 81 a5 movabs $0xe9b5dba58189dbbc,%r15
4881d: db b5 e9
mov %r15,0x18(%rsp)
movabs $0x59f111f1b605d019,%r15
mov %rsi,0x30(%rsp)
mov %r15,0x8(%rsp)
```

这些代码示例展示了不同的TLS实现如何处理伪常数时间问题，并提供了具体的实现细节。