## PolarDB 开源版 通过pgpointcloud 实现高效孪生数据存储和管理 - 支撑工厂、农业等现实世界数字化|数字孪生, 元宇宙相关业务的虚拟现实结合    
### 作者                
digoal                
### 日期                
2022-12-26                
### 标签                
PostgreSQL , PolarDB , pointcloud , pgpointcloud , 点云 , 元宇宙 , 数字孪生 , 虚拟现实         
----                
## 背景          
PolarDB 的云原生存算分离架构, 具备低廉的数据存储、高效扩展弹性、高速多机并行计算能力、高速数据搜索和处理; PolarDB与计算算法结合, 将实现双剑合璧, 推动业务数据的价值产出, 将数据变成生产力.                
本文将介绍PolarDB 开源版 通过 pgpointcloud 实现高效孪生数据存储和管理 - 支撑工厂、农业等现实世界数字化|数字孪生, 元宇宙相关业务的虚拟现实结合      
测试环境为macOS+docker, PolarDB部署请参考下文:                
- [《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB简单部署》](../202209/20220908_02.md)     
点云部署参考:  
- [《使用 PolarDB 开源版 部署 pgpointcloud 支撑激光点云数据的高速存储、压缩、高效精确提取》](../202212/20221224_02.md)               
## pgpointcloud 的特性    
pgpointcloud的原理是将很多个点存储到一个值(点集)里面, 点集可以用来表达轨迹、扫描影像, 业务操作通常包含:    
- 判断轨迹是否相交(指包住两个轨迹的边界(bound box)是否相交), 实际上使用PostGIS的trajectories可能更适合.    
- 判断轨迹是否落到某个给定区域(指轨迹的边界(bound box)是否和指定几何对象是否相交)  
- 指定区域将内部的轨迹抠出(将落在指定几何对象内部的点从点集中抠出)  
- 合并轨迹  
- 压缩轨迹  
- 3D建模和数据存储  
- 3D影像的抠出  
注意这里说的“轨迹”不带时间, 只是为了辅助理解所以称之为轨迹, 实际上pgpointcloud不适合轨迹业务. 轨迹建议使用postgis. 或者阿里云ganos.     
- https://postgis.net/docs/manual-3.3/reference.html#Temporal    
pgpointcloud存储点集的优势:  
- 支持压缩, 节省成本  
- 片存储, 存取效率高  
- 支持内置点云操作算法, 同时可扩展算法, 无需提取数据到本地进行计算, 大幅度提升计算效率  
- 支持GIS, 方便和地理信息结合, 更好的满足虚拟现实|数字孪生业务需求  
- 支持索引, 过滤效率高  
## 例子  
1、点   
```  
SELECT PC_MakePoint(1, ARRAY[-127, 45, 124.0, 4.0]);  
010100000064CEFFFF94110000703000000400  
```  
Insert some test values into the points table:  
```  
INSERT INTO points (pt)  
SELECT PC_MakePoint(1, ARRAY[x,y,z,intensity])  
FROM (  
  SELECT  
  -127+a/100.0 AS x,  
    45+a/100.0 AS y,  
         1.0*a AS z,  
          a/10 AS intensity  
  FROM generate_series(1,100) AS a  
) AS values;  
```  
```  
SELECT PC_AsText('010100000064CEFFFF94110000703000000400'::pcpoint);  
{"pcid":1,"pt":[-127,45,124,4]}  
```  
2、点集  
```  
INSERT INTO patches (pa)  
SELECT PC_Patch(pt) FROM points GROUP BY id/10;  
```  
```  
SELECT PC_AsText(PC_MakePatch(1, ARRAY[-126.99,45.01,1,0, -126.98,45.02,2,0, -126.97,45.03,3,0]));  
{"pcid":1,"pts":[  
 [-126.99,45.01,1,0],[-126.98,45.02,2,0],[-126.97,45.03,3,0]  
]}  
```  
```  
SELECT PC_AsText(pa) FROM patches LIMIT 1;  
{"pcid":1,"pts":[  
 [-126.99,45.01,1,0],[-126.98,45.02,2,0],[-126.97,45.03,3,0],  
 [-126.96,45.04,4,0],[-126.95,45.05,5,0],[-126.94,45.06,6,0],  
 [-126.93,45.07,7,0],[-126.92,45.08,8,0],[-126.91,45.09,9,0]  
]}  
```  
3、判断轨迹是否相交(指包住两个轨迹的边界(bound box)是否相交), 实际上使用PostGIS的trajectories可能更适合.    
```  
-- Patch should intersect itself  
SELECT PC_Intersects(  
         '01010000000000000001000000C8CEFFFFF8110000102700000A00'::pcpatch,  
         '01010000000000000001000000C8CEFFFFF8110000102700000A00'::pcpatch);  
t  
```  
4、判断轨迹是否落到某个给定区域(指轨迹的边界(bound box)是否和指定几何对象是否相交)  
```  
SELECT PC_Intersects('SRID=4326;POINT(-126.451 45.552)'::geometry, pa)  
FROM patches WHERE id = 7;  
t  
```  
5、指定区域将内部的轨迹抠出(将落在指定几何对象内部的点从点集中抠出)  
```  
SELECT PC_AsText(PC_Explode(PC_Intersection(  
      pa,  
      'SRID=4326;POLYGON((-126.451 45.552, -126.42 47.55, -126.40 45.552, -126.451 45.552))'::geometry  
)))  
FROM patches WHERE id = 7;  
             pc_astext  
--------------------------------------  
 {"pcid":1,"pt":[-126.44,45.56,56,5]}  
 {"pcid":1,"pt":[-126.43,45.57,57,5]}  
 {"pcid":1,"pt":[-126.42,45.58,58,5]}  
 {"pcid":1,"pt":[-126.41,45.59,59,5]}  
```  
6、合并轨迹  
聚合函数  
```  
-- Compare npoints(sum(patches)) to sum(npoints(patches))  
SELECT PC_NumPoints(PC_Union(pa)) FROM patches;  
SELECT Sum(PC_NumPoints(pa)) FROM patches;  
100  
```  
可变函数  
```  
create or replace function pcunion (VARIADIC pc pcpatch[]) returns pcpatch as $$  
  select PC_Union(pa) from unnest(pc) as pa;  
$$ language sql strict;  
select pcunion(pc1,pc2,...);  
```  
7、压缩点集  
```  
PC_Compress(p pcpatch,global_compression_scheme text,compression_config text) returns pcpatch  
```  
Allowed global compression schemes are:  
- auto: determined by pcid  
- laz: no compression config supported  
- dimensional: configuration is a comma-separated list of per-dimension compressions from this list  
    - auto: determined automatically from values stats  
    - zlib: deflate compression  
    - sigbits: significant bits removal  
    - rle: run-length encoding  
8、3D影像的抠出  
```  
1 PC_FilterGreaterThan  
PC_FilterGreaterThan(p pcpatch, dimname text, float8 value) returns pcpatch:  
Returns a patch with only points whose values are greater than the supplied value for the requested dimension.  
SELECT PC_AsText(PC_FilterGreaterThan(pa, 'y', 45.57))  
FROM patches WHERE id = 7;  
 {"pcid":1,"pts":[[-126.42,45.58,58,5],[-126.41,45.59,59,5]]}  
2 PC_FilterLessThan  
PC_FilterLessThan(p pcpatch, dimname text, float8 value) returns pcpatch:  
Returns a patch with only points whose values are less than the supplied value for the requested dimension.  