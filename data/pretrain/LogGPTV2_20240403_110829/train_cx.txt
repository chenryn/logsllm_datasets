this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" this man page is copyright (c) 1999 andi kleen .
.\"
.\" %%%license_start(verbatim_one_para)
.\" permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%license_end
.\"
.\" $id: ip.7,v 1.19 2000/12/20 18:10:31 ak exp $
.\"
.\" fixme the following socket options are yet to be documented
.\"
.\" 	ip_xfrm_policy (2.5.48)
.\"	    needs cap_net_admin
.\"
.\" 	ip_ipsec_policy (2.5.47)
.\"	    needs cap_net_admin
.\"
.\"	ip_minttl (2.6.34)
.\"	    commit d218d11133d888f9745802146a50255a4781d37a
.\"	    author: stephen hemminger 
.\"
.\"	mcast_join_group (2.4.22 / 2.6)
.\"
.\"	mcast_block_source (2.4.22 / 2.6)
.\"
.\"	mcast_unblock_source (2.4.22 / 2.6)
.\"
.\"	mcast_leave_group (2.4.22 / 2.6)
.\"
.\"	mcast_join_source_group (2.4.22 / 2.6)
.\"
.\"	mcast_leave_source_group (2.4.22 / 2.6)
.\"
.\"	mcast_msfilter (2.4.22 / 2.6)
.\"
.\"	ip_unicast_if (3.4)
.\"	    commit 76e21053b5bf33a07c76f99d27a74238310e3c71
.\"	    author: erich e. hoover 
.\"
.th ip  7 2021-03-22 "linux" "linux programmer's manual"
.sh name
ip \- linux ipv4 protocol implementation
.sh synopsis
.nf
.b #include 
.\" .b #include  -- does not exist anymore
.\" .b #include  -- never include 
.b #include 
.b #include         \fr/* superset of previous */
.pp
.ib tcp_socket " = socket(af_inet, sock_stream, 0);"
.ib udp_socket " = socket(af_inet, sock_dgram, 0);"
.ib raw_socket " = socket(af_inet, sock_raw, " protocol ");"
.fi
.sh description
linux implements the internet protocol, version 4,
described in rfc\ 791 and rfc\ 1122.
.b ip
contains a level 2 multicasting implementation conforming to rfc\ 1112.
it also contains an ip router including a packet filter.
.pp
the programming interface is bsd-sockets compatible.
for more information on sockets, see
.br socket (7).
.pp
an ip socket is created using
.br socket (2):
.pp
    socket(af_inet, socket_type, protocol);
.pp
valid socket types include
.b sock_stream
to open a stream socket,
.b sock_dgram
to open a datagram socket, and
.b sock_raw
to open a
.br raw (7)
socket to access the ip protocol directly.
.pp
.i protocol
is the ip protocol in the ip header to be received or sent.
valid values for
.i protocol
include:
.ip \(bu 2
0 and
.b ipproto_tcp
for
.br tcp (7)
stream sockets;
.ip \(bu
0 and
.b ipproto_udp
for
.br udp (7)
datagram sockets;
.ip \(bu
.b ipproto_sctp
for
.br sctp (7)
stream sockets; and
.ip \(bu
.b ipproto_udplite
for
.br udplite (7)
datagram sockets.
.pp
for
.b sock_raw
you may specify a valid iana ip protocol defined in
rfc\ 1700 assigned numbers.
.pp
when a process wants to receive new incoming packets or connections, it
should bind a socket to a local interface address using
.br bind (2).
in this case, only one ip socket may be bound to any given local
(address, port) pair.
when
.b inaddr_any
is specified in the bind call, the socket will be bound to
.i all
local interfaces.
when
.br listen (2)
is called on an unbound socket, the socket is automatically bound
to a random free port with the local address set to
.br inaddr_any .
when
.br connect (2)
is called on an unbound socket, the socket is automatically bound
to a random free port or to a usable shared port with the local address
set to
.br inaddr_any .
.pp
a tcp local socket address that has been bound is unavailable for
some time after closing, unless the
.b so_reuseaddr
flag has been set.
care should be taken when using this flag as it makes tcp less reliable.
.ss address format
an ip socket address is defined as a combination of an ip interface
address and a 16-bit port number.
the basic ip protocol does not supply port numbers, they
are implemented by higher level protocols like
.br udp (7)
and
.br tcp (7).
on raw sockets
.i sin_port
is set to the ip protocol.
.pp
.in +4n
.ex
struct sockaddr_in {
    sa_family_t    sin_family; /* address family: af_inet */
    in_port_t      sin_port;   /* port in network byte order */
    struct in_addr sin_addr;   /* internet address */
};
/* internet address */
struct in_addr {
    uint32_t       s_addr;     /* address in network byte order */
};
.ee
.in
.pp
.i sin_family
is always set to
.br af_inet .
this is required; in linux 2.2 most networking functions return
.b einval
when this setting is missing.
.i sin_port
contains the port in network byte order.
the port numbers below 1024 are called
.ir "privileged ports"
(or sometimes:
.ir "reserved ports" ).
only a privileged process
(on linux: a process that has the
.b cap_net_bind_service
capability in the user namespace governing its network namespace) may
.br bind (2)
to these sockets.
note that the raw ipv4 protocol as such has no concept of a
port, they are implemented only by higher protocols like
.br tcp (7)
and
.br udp (7).
.pp
.i sin_addr
is the ip host address.
the
.i s_addr
member of
.i struct in_addr
contains the host interface address in network byte order.
.i in_addr
should be assigned one of the
.br inaddr_*
values
(e.g.,
.br inaddr_loopback )
using
.br htonl (3)
or set using the
.br inet_aton (3),
.br inet_addr (3),
.br inet_makeaddr (3)
library functions or directly with the name resolver (see
.br gethostbyname (3)).
.pp
ipv4 addresses are divided into unicast, broadcast,
and multicast addresses.
unicast addresses specify a single interface of a host,
broadcast addresses specify all hosts on a network, and multicast
addresses address all hosts in a multicast group.
datagrams to broadcast addresses can be sent or received only when the
.b so_broadcast
socket flag is set.
in the current implementation, connection-oriented sockets are allowed
to use only unicast addresses.
.\" leave a loophole for xtp @)
.pp
note that the address and the port are always stored in
network byte order.
in particular, this means that you need to call
.br htons (3)
on the number that is assigned to a port.
all address/port manipulation
functions in the standard library work in network byte order.
.pp
there are several special addresses:
.b inaddr_loopback
(127.0.0.1)
always refers to the local host via the loopback device;
.b inaddr_any
(0.0.0.0)
means any address for binding;
.b inaddr_broadcast
(255.255.255.255)
means any host and has the same effect on bind as
.b inaddr_any
for historical reasons.
.ss socket options
ip supports some protocol-specific socket options that can be set with
.br setsockopt (2)
and read with
.br getsockopt (2).
the socket option level for ip is
.br ipproto_ip .
.\" or sol_ip on linux
a boolean integer flag is zero when it is false, otherwise true.
.pp
when an invalid socket option is specified,
.br getsockopt (2)
and
.br setsockopt (2)
fail with the error
.br enoprotoopt .
.tp
.br ip_add_membership " (since linux 1.2)"
join a multicast group.
argument is an
.i ip_mreqn
structure.
.pp
.in +4n
.ex
struct ip_mreqn {
    struct in_addr imr_multiaddr; /* ip multicast group
                                     address */
    struct in_addr imr_address;   /* ip address of local
                                     interface */
    int            imr_ifindex;   /* interface index */
};
.ee
.in
.pp
.i imr_multiaddr
contains the address of the multicast group the application
wants to join or leave.
it must be a valid multicast address
.\" (i.e., within the 224.0.0.0-239.255.255.255 range)
(or
.br setsockopt (2)
fails with the error
.br einval ).
.i imr_address
is the address of the local interface with which the system
should join the multicast group; if it is equal to
.br inaddr_any ,
an appropriate interface is chosen by the system.
.i imr_ifindex
is the interface index of the interface that should join/leave the
.i imr_multiaddr
group, or 0 to indicate any interface.
.ip
the
.i ip_mreqn
structure is available only since linux 2.2.
for compatibility, the old
.i ip_mreq
structure (present since linux 1.2) is still supported;
it differs from
.i ip_mreqn
only by not including the
.i imr_ifindex
field.
(the kernel determines which structure is being passed based
on the size passed in
.ir optlen .)
.ip
.b ip_add_membership
is valid only for
.br setsockopt (2).
.\"
.tp
.br ip_add_source_membership " (since linux 2.4.22 / 2.5.68)"
join a multicast group and allow receiving data only
from a specified source.
argument is an
.i ip_mreq_source
structure.
.pp
.in +4n
.ex
struct ip_mreq_source {
    struct in_addr imr_multiaddr;  /* ip multicast group
                                      address */
    struct in_addr imr_interface;  /* ip address of local
                                      interface */
    struct in_addr imr_sourceaddr; /* ip address of
                                      multicast source */
};
.ee
.in
.pp
the
.i ip_mreq_source
structure is similar to
.i ip_mreqn
described under
.br ip_add_membership .
the
.i imr_multiaddr
field contains the address of the multicast group the application
wants to join or leave.
the
.i imr_interface
field is the address of the local interface with which
the system should join the multicast group.
finally, the
.i imr_sourceaddr
field contains the address of the source the
application wants to receive data from.
.ip
this option can be used multiple times to allow
receiving data from more than one source.
.tp
.br ip_bind_address_no_port " (since linux 4.2)"
.\" commit 90c337da1524863838658078ec34241f45d8394d
inform the kernel to not reserve an ephemeral port when using
.br bind (2)
with a port number of 0.
the port will later be automatically chosen at
.br connect (2)
time,
in a way that allows sharing a source port as long as the 4-tuple is unique.
.tp
.br ip_block_source " (since linux 2.4.22 / 2.5.68)"
stop receiving multicast data from a specific source in a given group.
this is valid only after the application has subscribed
to the multicast group using either
.br ip_add_membership
or
.br ip_add_source_membership .
.ip
argument is an
.i ip_mreq_source
structure as described under
.br ip_add_source_membership .
.tp
.br ip_drop_membership " (since linux 1.2)"
leave a multicast group.
argument is an
.i ip_mreqn
or
.i ip_mreq
structure similar to
.br ip_add_membership .
.tp
.br ip_drop_source_membership " (since linux 2.4.22 / 2.5.68)"
leave a source-specific group\(emthat is, stop receiving data from
a given multicast group that come from a given source.
if the application has subscribed to multiple sources within
the same group, data from the remaining sources will still be delivered.
to stop receiving data from all sources at once, use
.br ip_drop_membership .
.ip
argument is an
.i ip_mreq_source
structure as described under
.br ip_add_source_membership .
.tp
.br ip_freebind " (since linux 2.4)"
.\" precisely: 2.4.0-test10
if enabled, this boolean option allows binding to an ip address
that is nonlocal or does not (yet) exist.
this permits listening on a socket,
without requiring the underlying network interface or the
specified dynamic ip address to be up at the time that
the application is trying to bind to it.
this option is the per-socket equivalent of the
.ir ip_nonlocal_bind
.i /proc
interface described below.
.tp
.br ip_hdrincl " (since linux 2.0)"
if enabled,
the user supplies an ip header in front of the user data.
valid only for
.b sock_raw
sockets; see
.br raw (7)
for more information.
when this flag is enabled, the values set by
.br ip_options ,
.br ip_ttl ,
and
.b ip_tos
are ignored.
.tp
.br ip_msfilter " (since linux 2.4.22 / 2.5.68)"
this option provides access to the advanced full-state filtering api.
argument is an
.i ip_msfilter
structure.
.pp
.in +4n
.ex
struct ip_msfilter {
    struct in_addr imsf_multiaddr; /* ip multicast group
                                      address */
    struct in_addr imsf_interface; /* ip address of local
                                      interface */
    uint32_t       imsf_fmode;     /* filter\-mode */
    uint32_t       imsf_numsrc;    /* number of sources in
                                      the following array */
    struct in_addr imsf_slist[1];  /* array of source
                                      addresses */
};
.ee
.in
.pp
there are two macros,
.br mcast_include
and
.br mcast_exclude ,
which can be used to specify the filtering mode.
additionally, the
.br ip_msfilter_size (n)
macro exists to determine how much memory is needed to store
.i ip_msfilter
structure with
.i n
sources in the source list.
.ip
for the full description of multicast source filtering
refer to rfc 3376.
.tp
.br ip_mtu " (since linux 2.2)"
.\" precisely: 2.1.124
retrieve the current known path mtu of the current socket.
returns an integer.
.ip
.b ip_mtu
is valid only for
.br getsockopt (2)
and can be employed only when the socket has been connected.
.tp
.br ip_mtu_discover " (since linux 2.2)"
.\" precisely: 2.1.124
set or receive the path mtu discovery setting for a socket.
when enabled, linux will perform path mtu discovery
as defined in rfc\ 1191 on
.b sock_stream
sockets.
for
.rb non- sock_stream
sockets,
.b ip_pmtudisc_do
forces the don't-fragment flag to be set on all outgoing packets.
it is the user's responsibility to packetize the data
in mtu-sized chunks and to do the retransmits if necessary.
the kernel will reject (with
.br emsgsize )
datagrams that are bigger than the known path mtu.
.b ip_pmtudisc_want
will fragment a datagram if needed according to the path mtu,
or will set the don't-fragment flag otherwise.
.ip
the system-wide default can be toggled between
.b ip_pmtudisc_want
and
.b ip_pmtudisc_dont
by writing (respectively, zero and nonzero values) to the
.i /proc/sys/net/ipv4/ip_no_pmtu_disc
file.
.ts
tab(:);
c l
l l.
path mtu discovery value:meaning
ip_pmtudisc_want:use per-route settings.
ip_pmtudisc_dont:never do path mtu discovery.
ip_pmtudisc_do:always do path mtu discovery.
ip_pmtudisc_probe:set df but ignore path mtu.
.te
.sp 1
when pmtu discovery is enabled, the kernel automatically keeps track of
the path mtu per destination host.
when it is connected to a specific peer with
.br connect (2),
the currently known path mtu can be retrieved conveniently using the
.b ip_mtu
socket option (e.g., after an
.b emsgsize
error occurred).
the path mtu may change over time.
for connectionless sockets with many destinations,
the new mtu for a given destination can also be accessed using the
error queue (see
.br ip_recverr ).
a new error will be queued for every incoming mtu update.
.ip
while mtu discovery is in progress, initial packets from datagram sockets
may be dropped.
applications using udp should be aware of this and not
take it into account for their packet retransmit strategy.
.ip
to bootstrap the path mtu discovery process on unconnected sockets, it