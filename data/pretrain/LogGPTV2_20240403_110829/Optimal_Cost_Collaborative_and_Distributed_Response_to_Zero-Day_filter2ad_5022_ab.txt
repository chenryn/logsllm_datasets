mechanism with pre-shared key was adopted.
2) Control Center: The control center consists of a set of
software modules, including the launcher, log receiver, log
analyzer, trafﬁc analyzer, and ﬁrewall controller. It runs on
UNIX. The network administrator will start the launcher with
root privilege and the launcher will launch the log receiver,
trigger the log analyzer and trafﬁc analyzer. When the com-
promised host or master is identiﬁed, a message will be output
on the console. The trafﬁc analyzer was implemented using
C programming language because of performance concern.
To simplify the implementation, Python was chosen as the
programming language for other modules.
The log receiver has been programmed using Twisted frame-
work, which receives the messages from the client and redirect
them to the standard output. If Twisted is not available in the
1198
Fig. 4. Sample Malware Communicates with Bot-master
command, agents will execute it. Otherwise, the agent will
wait for more time and fetch the command again.
1) Time-based Patterns: We ﬁnd that many malicious soft-
ware are programmed to communicate with the controller
periodically. After communicating with its master, the com-
promised hosts will either try to request the resource on
remote server (e.g., updating malware software and ﬁnding
new commands) rapidly (in a interval of few milliseconds), or
they will sleep for a while, usually a ﬁxed time, if no command
is sent to the host. Figure 4 shows one example, where the
compromised host communicates to the master every 900
seconds with the command fetched from the master. Hence,
by catching the connection established in a certain interval,
we can identify the master. To improve the detection accuracy,
we adopt the discrete Fourier transformation (DFT) technique.
Let the time period of malware communicating to the master
be T , the DFT analysis will show a very high amplitude at
the frequency of 1
T in the spectrum density plot. However,
the intelligent malware propagation may connect to its master
using random time-intervals and this will pose the time-based
detection algorithm ineffective. To overcome this problem, we
consider other patterns described below.
2) Other Patterns: HTTP is generally used to transmit web
pages and resources linked from web pages. Regular web
pages usually contain several images, style sheets and scripts.
However, most malware on compromised hosts do not use
web pages to communicate and in most cases they do not
have a HTML parser. Hence, their requests and responses do
not contain JavaScripts or images because they are mostly
useless for malware on compromised hosts as it tends to be
a light-weight program. To this end, detecting the requests
without JavaScript and image or relatively simple connections
(which contains one or several plain-text like requests) will
help us determine the communication to masters. However,
this may raise false positives because web-services have a
similar pattern. To deal with this issue, we integrate other
patterns: User-Agent is a request header ﬁeld deﬁned in
RFC2616 [6] and should be sent to the server requested.
Every well-mannered browser will report their user-agent.
However, many malwares simply do not send User-Agent in
their request. We ﬁnd that many malwares have their own
User-Agent or faked User-Agent such as Microsoft IE or
Mozilla/6.0. Many malwares also use self-implemented
HTTP classes with HTTP/1.0 standard as an obsolete one
and all modern browsers use HTTP/1.1. Hence, any trafﬁc
transmitted using HTTP/1.0 standard become suspicious. By
integrating those features into the detection module, we can
further improve the detection accuracy.
Fig. 3. Workﬂow
trafﬁc analyzer and ﬁgure out whether other hosts inside the
enterprise network communicate with such a malware-master.
In real-world practice, there are different kinds of malwares
in the network. Passive discovery can ﬁnd different kinds
of malware through pattern-matching. Because of pattern-
matching, the passive discovery may ﬁnd the most compro-
mised hosts with some false positives. For example, a number
of network-based softwares, including the IM (Instant Mes-
saging) and Peer-to-Peer (P2P) software, may communicate
with servers outside the network periodically. By leveraging
application-speciﬁc knowledge, we can ﬁlter out false positives
and make the passive discovery more accurate. In essence,
through the combination of both the active and passive dis-
covery, our system will achieve a high detection rate. The
patterns of malware will be discussed next.
C. Patterns of Malware
Generally speaking, malware propagation usually contain
two parts: master (or controller) and agent (installed at com-
promised hosts). Although agents are programmed in various
ways, their basic concept are identical, i.e. communicating to
the master and fetching command from it. After fetching the
1199
In this section, we use real-world experiments to demon-
strate the feasibility and effectiveness of our proposed de-
tection framework. All the experiments were conducted in a
controlled and experimental proof-of-concept testbed. In the
following, we ﬁrst present our experimental setup, and then
report the results of our experiments.
A. Experimental Setup
We selected malwares in our performance evaluation be-
cause they are greatest threats in enterprise network. The
malware software were obtained from http://www.gangsir.cn/,
a website providing popular malware samples with monthly
update, to simulate attacks. To save time for the reinstallation
of OS and reduce the impact to the campus network, we
installed virtual machines (VMs) on Mac OS X using Virtual-
Box, where we emulated our hosts. All the experiments were
conducted in a controlled manner. The guest OS is Windows
XP SP3 with most up-to-date patches and without installing
any anti-virus software. After OS is installed, the snapshots are
recorded. Computers are compromised by using a USB stick
with malware softwares before each experiment. After each
experiment, we restore the initial snapshots on computers.
B. Experimental Results
To validate the effectiveness of the detection system, we
implement both the passive and active discovery to detect
compromised hosts by malware propagation.
1) Passive Discovery: We conduct experiment to emulate
a realistic scenario in enterprise networks, where the network
administrator may not be aware of individual compromised
computers. To deal with this issue, DAs will be installed on
every hosts. In our experiments, we adopt ten VMs running
Windows XP, where hosts 0, 1, and 2 are compromised before
DAs have been installed and host 3 is compromised during the
experiment which emulate the newly compromised host.
The experiments results are shown in Figure 5. The ex-
periment was started on 17:40:55 and lasted for 280 seconds.
On 17:42:05, about 120 seconds after launching the attack, the
ﬁrst compromised host was identiﬁed via the passive discovery
discussed in Section III. On 17:42:14, the second compromised
host was reported, and two masters were added to the list of
Fig. 5. Screen-shot for Passive Discovery
IV. EVALUATION
Fig. 6. Screen-shot of Active Discovery
suspicious masters. On 17:42:44, the third compromised host
was reported. On 17:45:09, malicious malware was launched
on host 3, and a few seconds later, on 17:45:12, host 3 was
reported to be compromised as well.
In Figure 5, the number in square brackets are UNIX time-
stamp and PASV indicates abnormal behavior detected by
passive discovery. The program will periodically report current
compromised computers and masters. The false positives exist
because normal applications communicates with well-known
Internet servers (e.g., google, cnn.com) with the pattern similar
to malicious behaviors. However, by adding those servers into
a white-list, the false positive rate can be largely reduced.
Note that the total time for detecting all compromised hosts
and masters will depend on how often the compromised hosts
communicate with their masters. Our developed framework
can detect most popular malwares via pattern-matching dis-
cussed in Section III-B.
2) Active Discovery: In this experiment, we setup ten client
computers running Windows XP. To simulate the malware
propagation in enterprise networks, we ﬁrst
installed the
malware on host 0 as the compromised one, which has been
detected. To this end, DA was installed after host 0 was com-
promised. We also installed the malware on hosts 1, 2 and 3
without installing DA and other hosts were not compromised.
Our experiment stared on 19:37:30. On 19:37:44.59, the host 0
was connected to the ﬁrst master. Right after it connects to the
ﬁrst master, on 19:37:44.78, another compromised computer
connected to the master and was found by active discovery. On
19:37:51.20, the third computer was found to be compromised.
On 19:37:54.48, the last compromised computer was detected.
Figure 7 shows the detection rate over time. Note that the
detection rate is deﬁned as the probability of the compromised
computers to be identiﬁed by our detection system. Through
experiments, we did not ﬁnd any false positives in active
discovery mode. As we can see, the detection rate increases
over time linearly. It takes roughly half minute for detecting
all hosts compromised by a relatively active malware in our
experimental network. However, for dormant malware, such
detection process might take a longer time. In addition, the
detection time will be longer when the malware connects to
multiple masters. To reduce the total time taken in capturing
compromised hosts, we can deploy more active agents. With
more active agents, the total time used to gather IP addresses
1200
1
0.95
0.9
0.85
0.8
0.75
0.7
0.65
0.6
0.55
e
t
a
R
n
o
i
t
c
e
t
e
D
0.5
14
16
18
20
22
24
26
28
Time (s)
Fig. 7. Detection rate vs. time
of masters will be shorter.
V. RELATED WORK
In this section, we review some existing work related to
our study, including worm, malware, botnet and detection. In
the past, many real-world worms and malwares have caused
notable damage to the Internet, including Slammer worm [7],
Stuxnet [8] and others. There are two types of systems for
detection: host-based detection and network-based detection.
Many host-based detection schemes are proposed in the lit-
erature [9], [10], which mainly focus on detecting malwares
via software anomaly behavior [11]. Many network-based
malware detection schemes are proposed in the literature,
many of which focus on the detection via trafﬁc analysis
[12], [13], [14], [15], [16]. Differently from the existing
research efforts, we propose a distributed network sensor based
intrusion detection framework to detect the emerging stealthy
attacks in enterprise networks and we develop techniques to
efﬁciently process and aggregate network trafﬁc and system-
logs and provision the detection techniques.
VI. FINAL REMARKS
In this paper, we propose a distributed network sensor based
intrusion detection framework to detect emerging stealthy
attacks within enterprise networks. This framework consists
of the detection agents on hosts and the control center. The
detection agents monitors network trafﬁc and other anomaly
behaviors on the hosts, efﬁciently process network trafﬁc
and suspicious events, and intelligently generates attacking-
alerts. The control center intelligently collect and aggregate
the information from detection agents, and detect the attack
behavior, and trace other compromised hosts and anonymized
attack origins. To demonstrate the effectiveness of our pro-
posed framework, we have implemented a prototypical system,
including the detection agents and the detection center, along
with a set of techniques to effectively conduct trafﬁc analysis,
attack detection, and detection data aggregation. Our real-
world data show the effectiveness of our framework and
techniques to detect attacks, including malware propagation.
As an ongoing work, we are investigating the temporal and
spatial aggregation techniques to further reduce the bandwidth
for transmitting the detection data from DAs to the control
center. Such aggregation techniques will render our framework
feasible in mission critical network with limited bandwidth
resources, such as the Mobile Ad Hoc Networks (MANETs).
We also plan to enhance the framework to provision advanced
detection algorithms and forensics techniques to analyze com-
plicated attack-scenes.
ACKNOWLEDGMENT
Research was sponsored by the ARL (Army Research
Laboratory) and was accomplished under the grant Number
W911NF-11-1-0193. The views and conclusions contained
in this document are those of the authors and should not
be interpreted as representing the ofﬁcial policies, either
expressed or implied, of the Army Research Laboratory or
the U.S. Government. The U.S. Government is authorized
to reproduce and distribute reprints for Government purposes
notwithstanding any copyright notation here on.
REFERENCES
[1] D. S. Alberts and F. P. S. John Garstka, “Network centric warfare,” in
CCRP, 2010.
[2] Y. Liu, P. Ning, and M. Reiter, “False data injection attacks against state
estimation in electric power grids,” in Proceedings of the 16th ACM
Conference on Computer and Communications Security (CCS), 2009.
[3] W. Yu, N. Zhang, X. Fu, and W. Zhao, “Self-disciplinary worms
and countermeasures: Modeling and analysis,” IEEE Transactions on
Parallel and Distributed Systems (TPDS), vol. 21, no. 10, 2010.
[4] F. Giroire, J. Chandrashekar, N. Taft, E. M. Schooler, and D. Papagian-
naki, “Exploiting temporal persistence to detect covert botnet channels,”
in Proceeding of RAID, 2009.
[5] J. Z. Kolter and M. A. Maloof, “Learning to detect malicious executables
in the wild,” in Proceedings of the 10th ACM International Conference
on Knowledge Discovery and Data Mining (SIGKDD), Seattle, WA,
August 2004.
[6] J. G. e. R. Fielding, UC Irvine, “Hypertext transfer protocol – http/1.1,”
http://www.ietf.org/rfc/rfc2616.txt, 1999.
[7] D. Moore, V. Paxson, and S. Savage, “Inside the slammer worm,” IEEE
Magazine of Security and Privacy, vol. 1, no. 4, pp. 33–39, 2003.
[8] R. McMillan, Was Stuxnet Built to Attack Iran’s Nuclear Program?,
http://www.pcworld.com/businesscenter/article/205827/was stuxnet
built to attack irans nuclear program.html, 2010.
http://netninja.com/ﬁles/bintxtscan.zip.
[9] Binary Text Scan.
[10] X. F. Wang, Z. Li, J. Xu, M. Reiter, C. Kil, and J. Choi, “Packet vaccine:
Black-box exploit detection and signature generation,” in Proceedings
of the 13th ACM Conference on Computer and Communication Security
(CCS), Alexandria, VA, October/November 2006.
[11] P. M. Comparetti, G. Salvaneschi, C. Kolbitsch, E. Kirda, and S. Z.
Christopher Kruegel (University of California, Santa Barbara), “Identi-
fying dormant functionality in malware programs,” in Proceedings of
the 2010 IEEE Symposium on Security and Privacy (S&P), Oakland,
CA, May 2010.
[12] G. Jacob, R. Hund, T. Holz, and C. Kruegel, “Jackstraws: Picking
command and control connections from bot trafﬁc,” in Proceedings
of the 13th USENIX Security Symposium (SECURITY), San Francisco,
August 2011.
[13] W. T. Strayer, D. Lapsley, R. Walsh, and C. Livadas, “Botnet detection:
Countering the largest security threat,” in Book Chapter - Botnet
Detection Based on Network Behavior, 2008.
[14] D. Ramsbrock, X. Wang, and X. Jiang, “A ﬁrst step towards
[Online]. Available:
live botmaster
traceback,” pp. 59–77, 2008.
http://dx.doi.org/10.1007/978-3-540-87403-4 4
[15] A. Lakhina, M. Crovella, and C. Diot, “Mining anomalies using trafﬁc
feature distribution,” in Proceedings of ACM SIGCOMM, Philadelphia,
PA, August 2005.
[16] R. Perdisci, O. Kolesnikov, P. Fogla, M. Sharif, and W. Lee, “Polymor-
phic blending attacks,” in Proceedings of the 15-th USENIX Security
Symposium (SECURITY), Vancouver, B.C., August 2006.