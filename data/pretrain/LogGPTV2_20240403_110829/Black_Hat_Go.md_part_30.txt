scanner’s Lookup() call, as well as the type assertion and
conversion needed to instantiate the plug-in-defined
TomcatChecker. This basic entry point does nothing more than
return a new *TomcatChecker (which, since it implements the
required Check() method, happens to be a scanner.Checker).
Running the Scanner
Now that you’ve created both your plug-in and the main
program that consumes it, compile your plug-in, using the -o
option to direct your compiled shared object to the scanner’s
plug-ins directory:
$ go build -buildmode=plugin -o /path/to/plugins/tomcat.so
Then run your scanner (cmd/scanner/main.go) to confirm
that it identifies the plug-in, loads it, and executes the plug-
in’s Check() method:
$ go run main.go
Found plugin: tomcat.so
2020/01/15 15:45:18 Checking for Tomcat Manager...
2020/01/15 15:45:18 Host responded to /manager/html request
2020/01/15 15:45:18 Host requires authentication. Proceeding with password
guessing...
2020/01/15 15:45:18 Host is vulnerable: Valid credentials found - tomcat:tomcat
Would you look at that? It works! Your scanner is able to
call code within your plug-in. You can drop any number of
other plug-ins into the plug-ins directory. Your scanner will
attempt to read each and kick off the vulnerability-checking
functionality.
The code we developed could benefit from a number of
improvements. We’ll leave these improvements to you as an
exercise. We encourage you to try a few things:
1. Create a plug-in to check for a different vulnerability.
2. Add the ability to dynamically supply a list of hosts and their open ports for
more extensive tests.
3. Enhance the code to call only applicable plug-ins. Currently, the code will call
all plug-ins for the given host and port. This isn’t ideal. For example, you
wouldn’t want to call the Tomcat checker if the target port isn’t HTTP or
HTTPS.
4. Convert your plug-in system to run on Windows, using DLLs as the plug-in
type.
In the next section, you’ll build the same vulnerability-
checking plug-in in a different, unofficial plug-in system: Lua.
BUILDING PLUG-INS IN LUA
Using Go’s native buildmode feature when creating pluggable
programs has limitations, particularly because it’s not very
portable, meaning the plug-ins may not cross-compile nicely.
In this section, we’ll look at a way to overcome this deficiency
by creating plug-ins with Lua instead. Lua is a scripting
language used to extend various tools. The language itself is
easily embeddable, powerful, fast, and well-documented.
Security tools such as Nmap and Wireshark use it for creating
plug-ins, much as you’ll do right now. For more info, refer to
the official site at https://www.lua.org/.
To use Lua within Go, you’ll use a third-party package,
gopher-lua, which is capable of compiling and executing Lua
scripts directly in Go. Install it on your system by entering the
following:
$ go get github.com/yuin/gopher-lua
Now, be forewarned that the price you’ll pay for portability
is increased complexity. That’s because Lua has no implicit
way to call functions in your program or various Go packages
and has no knowledge of your data types. To solve this
problem, you’ll have to choose one of two design patterns:
1. Call a single entry point in your Lua plug-in, and let the plug-in call any helper
methods (such as those needed to issue HTTP requests) through other Lua
packages. This makes your main program simple, but it reduces portability and
could make dependency management a nightmare. For example, what if a Lua
plug-in requires a third-party dependency not installed as a core Lua package?
Your plug-in would break the moment you move it to another system. Also,
what if two separate plug-ins require different versions of a package?
2. In your main program, wrap the helper functions (such as those from the net/http
package) in a manner that exposes a façde through which the plug-in can
interact. This, of course, requires you to write extensive code to expose all the
Go functions and types. However, once you’ve written the code, the plug-ins can
reuse it in a consistent manner. Plus, you can sort of not worry about the Lua
dependency issues that you’d have if you used the first design pattern (although,
of course, there’s always the chance that a plug-in author uses a third-party
library and breaks something).
For the remainder of this section, you’ll work on the
second design pattern. You’ll wrap your Go functions to
expose a façde that’s accessible to your Lua plug-ins. It’s the
better of the two solutions (and plus, the word façde makes it
sound like you’re building something really fancy).
The bootstrapping, core Go code that loads and runs plug-
ins will reside in a single file for the duration of this exercise.
For the sake of simplicity, we’ve specifically removed some of
patterns used in the examples at
https://github.com/yuin/gopher-lua/. We felt that some of the
patterns, such as using user-defined types, made the code less
readable. In a real implementation, you’d likely want to
include some of those patterns for better flexibility. You’d also
want to include more extensive error and type checking.
Your main program will define functions to issue GET and
HEAD HTTP requests, register those functions with the Lua
virtual machine (VM), and load and execute your Lua scripts
from a defined plug-ins directory. You’ll build the same
Tomcat password-guessing plug-in from the previous section,
so you’ll be able to compare the two versions.
Creating the head() HTTP Function
Let’s start with the main program. First, let’s look at the head()
HTTP function, which wraps calls to Go’s net/http package
(Listing 10-4).
func head(l *lua.LState❶) int {
var (
host string
port uint64
path string
resp *http.Response
err error
url string
)
❷ host = l.CheckString(1)
port = uint64(l.CheckInt64(2))
path = l.CheckString(3)
url = fmt.Sprintf("http://%s:%d/%s", host, port, path)
if resp, err = http.Head(url); err != nil {
❸ l.Push(lua.LNumber(0))
l.Push(lua.LBool(false))
l.Push(lua.LString(fmt.Sprintf("Request failed: %s", err)))
❹ return 3
}
❺ l.Push(lua.LNumber(resp.StatusCode))
l.Push(lua.LBool(resp.Header.Get("WWW-Authenticate") != ""))
l.Push(lua.LString(""))
❻ return 3
}
Listing 10-4: Creating a head() function for Lua (/ch-10/lua-
core/cmd/scanner/main.go)
First, notice that your head() function accepts a pointer to a
lua.LState object and returns an int ❶. This is the expected
signature for any function you wish to register with the Lua
VM. The lua.LState type maintains the running state of the VM,
including any parameters passed in to Lua and returned from
Go, as you’ll see shortly. Since your return values will be
included within the lua.LState instance, the int return type
represents the number of values returned. That way, your Lua
plug-in will be able to read and use the return values.
Since the lua.LState object, l, contains any parameters passed
to your function, you read the data in via calls to l.CheckString()
and l.CheckInt64() ❷. (Although not needed for our example,
other Check* functions exist to accommodate other expected
data types.) These functions receive an integer value, which
acts as the index for the desired parameter. Unlike Go slices,
which are 0-indexed, Lua is 1-indexed. So, the call to
l.CheckString(1) retrieves the first parameter supplied in the Lua
function call, expecting it to be a string. You do this for each
of your expected parameters, passing in the proper index of the
expected value. For your head() function, you’re expecting Lua
to call head(host, port, path), where host and path are strings and port
is an integer. In a more resilient implementation, you’d want
to do additional checking here to make sure the data supplied
is valid.
The function proceeds to issue an HTTP HEAD request
and perform some error checking. In order to return values to
your Lua callers, you push the values onto your lua.LState by
calling l.Push() and passing it an object that fulfills the lua.LValue
interface type ❸. The gopher-lua package contains several types
that implement this interface, making it as easy as calling
lua.LNumber(0) and lua.LBool(false), for example, to create numerical
and boolean return types.
In this example, you’re returning three values. The first is
the HTTP status code, the second determines whether the
server requires basic authentication, and the third is an error
message. We’ve chosen to set the status code to 0 if an error
occurs. You then return 3, which is the number of items you’ve
pushed onto your LState instance ❹. If your call to http.Head()
doesn’t produce an error, you push your return values onto
LState ❺, this time with a valid status code, and then check for
basic authentication and return 3 ❻.
Creating the get() Function
Next, you’ll create your get() function, which, like the previous
example, wraps the net/http package’s functionality. In this case,
however, you’ll issue an HTTP GET request. Other than that,
the get() function uses fairly similar constructs as your head()
function by issuing an HTTP request to your target endpoint.
Enter the code in Listing 10-5.
func get(l *lua.LState) int {
var (
host string
port uint64
username string
password string
path string
resp *http.Response
err error
url string
client *http.Client
req *http.Request
)
host = l.CheckString(1)
port = uint64(l.CheckInt64(2))
❶ username = l.CheckString(3)
password = l.CheckString(4)
path = l.CheckString(5)
url = fmt.Sprintf("http://%s:%d/%s", host, port, path)
client = new(http.Client)
if req, err = http.NewRequest("GET", url, nil); err != nil {
l.Push(lua.LNumber(0))
l.Push(lua.LBool(false))
l.Push(lua.LString(fmt.Sprintf("Unable to build GET request: %s", err)))
return 3
}
if username != "" || password != "" {
// Assume Basic Auth is required since user and/or password is set
req.SetBasicAuth(username, password)
}
if resp, err = client.Do(req); err != nil {
l.Push(lua.LNumber(0))
l.Push(lua.LBool(false))
l.Push(lua.LString(fmt.Sprintf("Unable to send GET request: %s", err)))
return 3
}
l.Push(lua.LNumber(resp.StatusCode))
l.Push(lua.LBool(false))
l.Push(lua.LString(""))
return 3
}
Listing 10-5: Creating a get() function for Lua (/ch-10/lua-
core/cmd/scanner/main.go)
Much like your head() implementation, your get() function
will return three values: the status code, a value expressing
whether the system you’re trying to access requires basic
authentication, and any error messages. The only real
difference between the two functions is that your get() function
accepts two additional string parameters: a username and a
password ❶. If either of these values is set to a non-empty
string, you’ll assume you have to perform basic authentication.
Now, some of you are probably thinking that the
implementations are oddly specific, almost to the point of
negating any flexibility, reusability, and portability of a plug-
in system. It’s almost as if these functions were designed for a
very specific use case—that is, to check for basic
authentication—rather than for a general purpose. After all,
why wouldn’t you return the response body or the HTTP
headers? Likewise, why wouldn’t you accept more robust
parameters to set cookies, other HTTP headers, or issue POST
requests with a body, for example?
Simplicity is the answer. Your implementations can act as a
starting point for building a more robust solution. However,
creating that solution would be a more significant endeavor,
and you’d likely lose the code’s purpose while trying to
navigate implementation details. Instead, we’ve chosen to do
things in a more basic, less flexible fashion to make the
general, foundational concepts simpler to understand. An
improved implementation would likely expose complex user-
defined types that better represent the entirety of, for example,
the http.Request and http.Response types. Then, rather than accepting
and returning multiple parameters from Lua, you could
simplify your function signatures, reducing the number of
parameters you accept and return. We encourage you to work
through this challenge as an exercise, changing the code to
accept and return user-defined structs rather than primitive
types.
Registering the Functions with the Lua VM
Up to this point, you’ve implemented wrapper functions
around the necessary net/http calls you intend to use, creating
the functions so gopher-lua can consume them. However, you
need to actually register the functions with the Lua VM. The
function in Listing 10-6 centralizes this registration process.
❶ const LuaHttpTypeName = "http"
func register(l *lua.LState) {
❷ mt := l.NewTypeMetatable(LuaHttpTypeName)
❸ l.SetGlobal("http", mt)
// static attributes
❹ l.SetField(mt, "head", l.NewFunction(head))
l.SetField(mt, "get", l.NewFunction(get))
}
Listing 10-6: Registering plug-ins with Lua (/ch-10/lua-core/cmd/scanner/main.go)
You start by defining a constant that will uniquely identify
the namespace you’re creating in Lua ❶. In this case, you’ll
use http because that’s essentially the functionality you’re
exposing. In your register() function, you accept a pointer to a
lua.LState, and use that namespace constant to create a new Lua
type via a call to l.NewTypeMetatable() ❷. You’ll use this
metatable to track types and functions available to Lua.
You then register a global name, http, on the metatable ❸.
This makes the http implicit package name available to the Lua
VM. On the same metatable, you also register two fields by
using calls to l.SetField() ❹. Here, you define two static
functions named head() and get(), available on the http
namespace. Since they’re static, you can call them via http.get()
and http.head() without having to create an instance of type http in
Lua.
As you may have noted in the SetField() calls, the third
parameter is the destination function that’ll handle the Lua
calls. In this case, those are your get() and head() functions you
previously implemented. These are wrapped in a call to
l.NewFunction(), which accepts a function of form func(*LState) int,
which is how you defined your get() and head() functions. They
return a *lua.LFunction. This might be a little overwhelming,
since we’ve introduced a lot of data types and you’re probably
unfamiliar with gopher-lua. Just understand that this function is
registering the global namespace and function names and
creating mappings between those function names and your Go
functions.
Writing Your Main Function
Lastly, you’ll need to create your main() function, which will
coordinate this registration process and execute the plug-in
(Listing 10-7).
❶ const PluginsDir = "../../plugins"
func main() {
var (
l *lua.LState
files []os.FileInfo
err error
f string
)
❷ l = lua.NewState()
defer l.Close()
❸ register(l)
❹ if files, err = ioutil.ReadDir(PluginsDir); err != nil {
log.Fatalln(err)
}
❺ for idx := range files {
fmt.Println("Found plugin: " + files[idx].Name())
f = fmt.Sprintf("%s/%s", PluginsDir, files[idx].Name())
❻ if err := l.DoFile(f); err != nil {
log.Fatalln(err)
}
}
}
Listing 10-7: Registering and calling Lua plug-ins (/ch-10/lua-
core/cmd/scanner/main.go)
As you did for your main() function in the Go example,
you’ll hardcode the directory location from which you’ll load
your plug-ins ❶. In your main() function, you issue a call to
lua.NewState() ❷ to create a new *lua.LState instance. The
lua.NewState() instance is the key item you’ll need to set up your
Lua VM, register your functions and types, and execute
arbitrary Lua scripts. You then pass that pointer to the register()
function you created earlier ❸, which registers your custom
http namespace and functions on the state. You read the
contents of your plug-ins directory ❹, looping through each
file in the directory ❺. For each file, you call l.DoFile(f) ❻,
where f is the absolute path to the file. This call executes the
contents of the file within the Lua state on which you
registered your custom types and functions. Basically, DoFile()
is gopher-lua’s way of allowing you to execute entire files as if
they were stand-alone Lua scripts.
Creating Your Plug-in Script
Now let’s take a look at your Tomcat plug-in script, written in
Lua (Listing 10-8).
usernames = {"admin", "manager", "tomcat"}
passwords = {"admin", "manager", "tomcat", "password"}
status, basic, err = http.head("10.0.1.20", 8080, "/manager/html") ❶
if err ~= "" then
print("[!] Error: "..err)
return
end
if status ~= 401 or not basic then
print("[!] Error: Endpoint does not require Basic Auth. Exiting.")
return
end
print("[+] Endpoint requires Basic Auth. Proceeding with password guessing")
for i, username in ipairs(usernames) do
for j, password in ipairs(passwords) do
status, basic, err = http.get("10.0.1.20", 8080, username, password,
"/manager/html") ❷
if status == 200 then
print("[+] Found creds - "..username..":"..password)
return
end
end
end
Listing 10-8: A Lua plug-in for Tomcat password guessing (/ch-10/lua-
core/plugins/tomcat.lua)
Don’t worry too much about the vulnerability-checking
logic. It’s essentially the same as the logic you created in the
Go version of this plug-in; it performs basic password
guessing against the Tomcat Manager portal after it
fingerprints the application by using a HEAD request. We’ve
highlighted the two most interesting items.
The first is a call to http.head("10.0.1.20", 8080, "/manager/html") ❶.
Based off your global and field registrations on the state
metatable, you can issue a call to a function named http.head()
without receiving a Lua error. Additionally, you’re supplying
the call with the three parameters your head() function expected
to read from the LState instance. The Lua call is expecting three
return values, which align with the numbers and types you
pushed onto the LState before you exited the Go function.
The second item is your call to http.get() ❷, which is similar
to the http.head() function call. The only real difference is that
you are passing username and password parameters to the
http.get() function. If you refer back to the Go implementation of
your get() function, you’ll see that we’re reading these two
additional strings from the LState instance.
Testing the Lua Plug-in
This example isn’t perfect and could benefit from additional
design considerations. But as with most adversarial tools, the
most important thing is that it works and solves a problem.
Running your code proves that it does, indeed, work as