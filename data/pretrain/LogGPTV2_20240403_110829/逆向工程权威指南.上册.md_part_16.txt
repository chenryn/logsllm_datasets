Lui
1a
Jauad*61$
.text: 004006F4
jalr
$a0, 0x40
$t9 : printf
---
## Page 91
第7章scanf0
.text:004006F8
1a
$a0, aYouEnteredD_.
*You entered id... \n*
-text:004006FC
1v
$ra,
0x20+var_4 ($sp)
-text: 00400700
nove
$v0, $zero
-text:00400704
1.v
$s0,
text: 00400708
jr
Sra
(des)8"3eA+0zx0
-text: 0040070C
addiu
02x0 *des
-data:00410920
-glob1x
-data:00410920 x
word
0xA
为何它处没有了.sdata段？这可能是受到了GCC选项的影响。不论如何，变量x出现在.data段里。这
个段会被加载到常规的通用内存区域，我们可以在此看到变量的处理方法。
MTPS 程序必须使用成对指令处理变量的地址。本例使用的是LUI(LoadUpper Immediate）和 ADDIU
(Add Immediate Unsigned Word)指令时。
我们继续借助objdump观察确切地操作指令。
指令清单 7.11Optimizing GCC 4.4.5 （objdump)
004006a0 1
4006a0;
3c1c0042
lui
9P, 0x42
4006a4:
279c8930
27bdffe0
addiu
9P9p,-30416
sp, sp, -32
4006a :
4006ac:
afbfo01c
addiu
SV
s0,24(sp)
ra,28(sp)
4006b0:
afb00018
4006b4:
afbc0010
SV
4006b8 :
8f998034
1v
SV
t9,-32716(gp)
(ds)91 *d6
4006bc:
3c040040
4006c0:
0320f809
jalr
Lu1
a0, 0x40
4006c4:
248408d0
addiu
0,a0,2256
t.9
4006cll:
8fbc0010
 prepare high part of x
T
gp, 16 (sp)
3c100041
addre88:
4006cc:
1uI
t9,32712 (gp)
$0, 0x41
4006d0:
4006d4:
3c040040
80086678
1×
lui
part of x address:
a0, 0x40
: add 1ow
: now addres8 of x is in Sal.
4006d8 :
26050920
addiu
a1, s0, 2336
4006e0:
4006dc:
248408dc
0320f809
Jalr
addiu
t:9
4006e4:
8fbc0010
a0, ±0,2268
:high part of x address
i8 still in $s0.
1w
gp, 16 (ap)
} add 1ow
4006e8:
part to it and
8e050920
1oad a word fron
menory:
:value of x Ls now In $a1.
T
a1., 2336(80)
4006ec:
Bf99803c
1
t9, -32708 (gp)
4006f4:
4006f0:
0320f809
3c040040
1u1
ja1r
t9
a0, 0x40
4006fe1
4006f8:
248408e0
add1u
a0, a0, 2272
Bfbf001c
1v
400700:
TZOT0000
nove
ra, 28 (sp)
v0, zero
400708:
400704:
03e00008
8fb00018
jr
T
s0, 24 (sp)
40070c:
27bd0020
ra
add1u
sp, sp, 32
这个程序使用LUI和ADDIU指令对生成变量地址。地址的高地址位仍然存储于SS0寄存器，而且单条LW
指令（LoadWord）即可封装这个偏移量。所以，单条LW指令足以提取变量的值，然后把它交付给printO函数。
T-字头的寄存器名称是临时数据寄存器的助记符。此外，这段程序还使用到了S-字头的寄存器名称。
在调用其他函数之前，调用方函数应当保管好自身S-字头的寄存器的值，避免它们受到被调用方函数的影
响，举例来说在0x4006cc处的指令对SS0寄存器赋值，而后程序调用了scanfO函数，接着地址为0x4006e8
的指令然继续调用SSo据此我们可以判断。scanfO函数不会变更sS0的值。
---
## Page 92
74
逆向工程权威指南（上册）
7.3
Scanf(函数的状态监测
大家都知道scanfO不怎么流行了，但是这并不代表它派不上用场了。在万不得已必须使用这个函数的
时候，切记检查函数的退出状态是否正确。例如：
#include 
int nain()
printf (*Enter X:\n");
int x7
Lf(scanf (*d*, &x)==1)
printf (*Tou entered 4d...\n*, x)
printf (*Khat you entered? Huh?\n*);
return 0;
根据这个函数的功能规范，scanfO函数在退出时会返回成功赋值的变量总数。
就本例子而言，正常情况下：用户输入一个整型数字时函数返回1：如果没有输入的值存在问题（或
为EOF/没有输入数据），scanfO则返回0。
为此我们可在C程序里添加结果检查的代码，以便在出现错误时进行相应的处理。
我们来验证一下：
9x9*x8ex3.exe
Enter X1
What you entered? Huh?
ouch
7.3.1MSVC:x86
使用MSVC2010生成的汇编代码如下所示。
lea
qend
e8x, DWORD PTR _x$ [ebp]
OFFSET $SG3833 ;*d′, 00H
eax
Pusb
ca11
_scanf
add
crp
8*dso
Jne
eax,1
ecx, DNORD PTR _x$ [ebp]
SHORT $LN2(main
push
A0B
push
OFFSBT $SG3834 ; *You entered id... ', 0an, 00H
ecx
ca11
add
_printf
esp,8
J=p
SHORT SLNLemain
$LN2@main:
push
OFFSET $SG3836 ; *What you entered? Huh? *, 0aH, 008
ca11
add
-printf
SIN1fmain:
esp, 4
xor
eax, eax
①请参照 http://msdn.microsofl.coe
em-us/library/9y6s16x1(VS.71).aspx
---
## Page 93
第7章scanfO
75
当被调用方函数callee（本例中是 scanfO函数）使用EAX寄存器向调用方函数caller（本例中是mainO
函数）传递返回值。
之后，“CMPEAX，1”指令对返回值进行比对，检查其值是否为1。
JNE是条件转移指令其全称是“JumpifNotEqual”.在两值不相同时进行跳转。
就是说，如果EAX寄存器里的值不是1，则程序将跳转到JNE所指明的地址（本例中会跳到
SLN1@main）：在将控制权指向这个地址之后，CPU会执行其后的打印指令，显示"Whatyou entered？Huh？”。
另一种情况是scanf）成功读取指定数据类型的数据，其返回值就会是1，此时不会发生跳转，而是继续执
行JNE以后的指令，显示“You entered %d.…’和变量x的值。
在scanfO函数成功地给变量赋值的情况下，程序会一路执行到JMP（无条件转移）指令。这条指令会
跳过第二条调用printfO函数的指令，从“XOREAX,EAX”指令开始执行，从而完成retum0的操作。
可见，“一般地说”条件判断语句会出现成对的“CMP/Jcc”指令。此处cc是英文“conditioncode”
的缩写。比较两个值的CMP指令会设置处理器的标志位。Jcc指令会检查这些标志位，判断是否进行
跳转。
但是上述的说法容易产生误导，实际上CMP指令进行的操作是减法运算。确切地说，不仅是CMP
指令所有的“数学/算术计算”指令都会设置标志位。如果将1与1进行比较，1-1=0，ZF标志位（"零”
标识位，最终运算结果是0）将被计算指令设定为1。将两个不同的数值进行CMP比较时，ZF标志位
的值绝不会是1。JNE指令会依据ZF标志位的状态判断是否需要进行跳转，实际上此两者（JumpifNot
Zero）的同义指令。JNE和 JNZ的opcode 都相同。所以，即使使用减法运算操作指令SUB替换CMP
指令，Jcc指令也可以进行正常的跳转。不过在使用SUB指令时，我们还需要分配一个寄存器保存运算
结果，而CMP则不需要使用寄存器保存运算结果。
7.3.2MSVC:x86:IDA
现在来让IDA大显身手。对于多数初学者来说，使用MSVC编译器的/MD选项是个值得推荐的
好习惯。这个选项会要求编译器“不要链接（link）标准函数”，而是从MSVCR*，DLL里导入这些
标准函数。总之，使用/MD选项编译出来的代码一目了然，便于我们观察它在哪里、调用了哪些标
准函数。
在使用IDA分析程序的时候，应当充分利用它的标记功能。比如说，分析这段程序的时候，我们明
白在发生错误的时候会执行JNE跳转。此时就可以用鼠标单击跳转的JNE指令，按下“n”键，把相应
的标签（lable）改名为“error”：然后把正常退出的标签重命名为“exit”。这种修改就可大幅度增强代码
的可读性。
.text:00401000 _main proc near
00010100:1X01
-text:00401000 var_4 = dvord ptr -4
.text: 00401000
0 argc = dword ptr
- text:00401000
argv
3d pzonp =
8
-text:00401000
envp
31d pzonp =
10h
0Ch
-text:00401000
-text:00401000
.text:00401001
push
mov
dsa *dqa
ebp
.text:00401003
push
.text: 00401004
push
offset Format : “Enter X \n*
ecx
text :00401009
ca11
30010+00:1xa4*
add
gautad:ep
lea
esp.4
text:00401015
push
eax, [ebp+var_4]
text:00401016
push
offset aD ; *ld*
eax
-text: 00401018
ca11
ds:scanf
① processor flags, S步 见 http://en.wikipedia.org/wiki/FLAGS_register_(computing)
---
## Page 94
76
逆向工程权威指南（上册）
text:00401021
add
m
esp, 8
-text:00401024
- text: 00401027
eax, 1
short error
text : 00401029
nov
push
ecx, [ebp*var_4]
text:00401020
push
offset aYou : "You entered ld.. \n*
X20
-text:00401032
ca11
ds:printf
- text: 00401038
text:00401038
add
JaP
esp,8
short exit
.text:0040103D
.text:0040103D
error: : CODE XREF: _main+27
, text:0040103D
push
offset aWhat ; *What you entered? Huh?\n*
text:00401048
.text:00401042
ca11
add
ds:printf
.text:0040104B
esp,4
.text:0040104B exit:
: CODE XREF: _main+3B
.text:0040104B
xor
esp, ebg
eax, eax
.text:0040104F
.text:00401040
nov
pop
retn
ebp
-text:00401050 _nain endp
-text:00401050
如此一来，这段代码就容易理解了。虽然重命名标签的功能很强大，但是逐一修改每条指令的标签则
无疑是画蛇添足。
此外，IDA还有如下一些高级用法。
整理代码：
标记某段代码之后，按下键盘数字键的“一”减号，整段代码将被隐藏，只留下首地址和标签。下面
的例子中，我隐藏了两段代码，并对整段代码进行了重命名。
text:00401000
_text segment para public *coDE' use32
.text:00401000
assune cs:_text
.text:00401000
.text:00401000;ask for X
:org 401000h
.text:00401024
get X
-text:00401027
cax, 1
.text:00401029 : print result
short error
. text:0040103B
.text:0040103D
jmp
short exit
.text:0040103D
error: : CODE XREF: _nain+27
.text:0040103D
push
offset aWhat ; *What you entered? Huh?n*
-text:00401042
.text:00401048
addesp, 4
ca11
ds:printf
.text:0040104B
.text:0040104B
exit: : CODE XREF: main+3B
text: 0040104B
.text : 0040104D
KOT
edx, eax
.text:0040104F
esp, ebp
-text:00401050
pop
retn
ebp
-text:00401050 _nain endp
图解模式：
按下空格键，IDA将会进入图解的显示方式。其效果如图7.7所示。
判断语句会分出两个箭头，一条是红色、一条是绿色。当判断条件表达式的值为真时，程序会走绿色
箭头所示的流程：如果判断条件表达式不成立，程序会采用红色箭头所标示的流程。
图解模式下，也可以对各分支节点命名和收缩。图7.8处理了3个模块。
这种图解模式非常实用。逆向工程工作经验不多的人，可使用这种方式来大幅度地减少他需要处理
的信息量。
---
## Page 95
第7章scanf0
77
sa_k
c=9p
图7.7IDA 的图解模式
sis prec 
图7.8IDA图解模式下的收缩授作
7.3.3MSVC:x86+OllyDbg
我们使用OllyDbg调试刚才的程序，在scanfO异常返回的情况下强制其继续运行余下的指令。
在把本地变量的地址传递给scanfO的时候，变量本身处于未初始化状态，其值应当是随机的噪声数据。
如图7.9所示，变量x的值为0x6E494714。
[CPU-R
图7.9使用OllyDbg观察 scanfD的变量传通过程
---
## Page 96
78
逆向工程权威指南（上册）
在执行scanfO函数的时候，我们输入非数字的内容，例如“asdasd”。这时候scanfO会通过EAX寄存
器返回0，如图7.10所示。这个零意味着scanfO函数遇到某种错误。
-4)
Nd'x
LnErr
图7.10使用 OllyDbg 观察 scanf的异常处理