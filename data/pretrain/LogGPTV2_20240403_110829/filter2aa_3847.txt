当然，我可以帮助你优化这段代码。以下是改进后的版本，使其更加清晰、连贯和专业：

```python
import r2pipe
import sys

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <address>")
        sys.exit(1)

    # 打开 ELF 文件
    r2 = r2pipe.open("iof.elf")
    
    # 获取命令行参数中的地址
    address = sys.argv[1]
    
    # 读取指定地址的 4 字节数据
    data = r2.cmd(f"p8 4 @ {address}")
    
    # 重新排列字节顺序
    reordered_data = data[6:8] + data[4:6] + data[2:4] + data[0:2]
    
    # 输出重新排列后的数据
    print(f"Reordered Data: {reordered_data}")
    
    # 读取反汇编信息
    disassembly = r2.cmd(f"xr 4 @ {address}")
    print(f"Disassembly: {disassembly}")
    
    # 读取 ROM 文件并查找匹配项
    with open("esp32.rom", "r") as rom_file:
        for line in rom_file:
            if reordered_data in line:
                print(line.strip())

if __name__ == "__main__":
    main()
```

### 改进点：
1. **添加了参数检查**：确保脚本在没有提供正确数量的命令行参数时能够给出提示并退出。
2. **使用 f-string**：使字符串格式化更加简洁和易读。
3. **改进变量命名**：使用更具描述性的变量名，如 `address` 和 `reordered_data`。
4. **使用 `with` 语句打开文件**：确保文件在操作完成后正确关闭。
5. **输出信息的格式化**：增加了输出信息的描述性，使其更易于理解。
6. **移除不必要的空格**：使代码更加紧凑和整洁。

希望这些改进对你有帮助！如果有任何进一步的需求或问题，请告诉我。