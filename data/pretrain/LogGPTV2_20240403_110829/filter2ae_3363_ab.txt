（1）将TSS段描述符加载到TR寄存器，使用指令： **LTR**
有几点需要注意：
  * 用LTR指令去装载的话 仅仅是改变TR寄存器的值(96位) ，并没有真正改变TSS。
  * LTR指令只能在系统层使用。(当前cpu权限必须是0环的)
  * 加载后TSS段描述符会状态位会发生改变。(高四字节的第9位发生变化)
（2）读TR寄存器，使用指令： **STR**
如果用STR去读的话，只读了TR的16位也就是段选择子。这跟读取cs段寄存器一样，读取16位。
> 注意：上面两个指令只能修改tr寄存器，并不能直接修改TSS任务段。
###  前提回顾与对比
在调用门或者段间跳转的时候已经了解过call far和 jmp far。
当执行jmp 0x48:0x123456478时，如果0x48对应的段描述符是一个代码段，那么改变的是cs和EIP。
**如果0x48对应的段描述符是一个TSS的段描述符(任务段)，将会通过0x48对应的TSS段描述符修改tr的值，再用tr.base指向的TSS中的值修改当前寄存器的值。**
这里call和jmp的大题实现是一样的，但在细节上是完全不一样的，下面通过两个实验，一个call一个jmp，来抓住具体细节。
###  实验
> 通过call和jmp去访问一个任务段，并能保证正常返回。
大体上思路为：
  1. 准备一个自己写的TSS段描述符，写入到gdt的一个空白的位置。
  2. 准备一个104字节的TSS，并附上正确的值。
  3. 修改tr寄存器(call far,jmp far)
那么第一步先准备一个TSS段描述符。这里还是把图搬过来方便看。
这里的G位是0，是以字节为单位的。如果忘记了G位的可以看之前的文章。
那么其他的位数含义也就不多说了，base的值是要更具我们自己要切换的TSS的地址（这里我自己的地址是0x0012fd78），limit这里没有特殊设置就设置成0x68，也就是十进制的104（limit可以更大一些也没关系）。那么构造的TSS段描述符可以是：
    0x0000E912`fd780068
这点明确了之后就可以先贴代码
####  call far
    #include "stdafx.h"
    #include 
    #include 
    char trs[6]={0};
    char gdts[6]={0};
    void __declspec(naked) test()
    {
            __asm
            {
                    //int 3
                    iretd;
            }
    }
    int main(int argc,char * argv[])
    {
            char stack[100]={0};
            DWORD cr3=0;
            printf("cr3:");
            scanf("%X",&cr3);
            DWORD tss[0x68]={
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    cr3,
                    (DWORD)test,
                    0,
                    0,
                    0,
                    0,
                    0,
                    ((DWORD)stack) - 100,
                    0,
                    0,
                    0,
                    0x23,
                    0x08,
                    0x10,
                    0x23,
                    0x30,
                    0,
                    0,
                    0x20ac0000
            };
            printf("%x",tss);
            WORD rs=0;
            _asm
            {
                    sgdt gdts;
                    str ax;
                    mov rs,ax;
            }
            *(WORD*)&trs[4]=rs;
            char buf[6]={0,0,0,0,0x48,0};
            system("Pause");
            __asm
            {
                    call fword ptr buf;
            }
            printf("sucessfully\n");
            system("Pause");
            return 0;
    }
cr3这个值是要当前进程跑起来之后才知道的，所以需要通过控制台来获取。
使用`kd> !process 0 0`查看进程信息，获取cr3的值。
写入后再修改gdt表中的值，段选择子为0x48再gdt表中的索引是9。
成功返回
这个实验还可以拓展一下
####  call far拓展
在返回之前执行int 3，看一下切换的寄存器，顺便看下能不能正常返回。(就是上面代码注释的部分)
寄存器已经全部切换了。我们继续往下走，直接蓝屏了。
这是为什么呢？int 3究竟做了什么导致了蓝屏。
实际上这跟 **任务嵌套** 有关，也就是efl的第14位，NT位。
当该位为1时，系统会认为是任务嵌套，也就是call上来的，返回的时候使用iretd就回去找上一个任务链(如下图)。如果使用jmp，该位为0，操作系统认为是一个新的任务，不是任务嵌套。
**而int 3会把NT位清0**
所以当int 3断点后，系统认为这不是一个嵌套任务，无法通过上一次的任务链接找到对应的esp等寄存器，最终导致蓝屏。
那么既然int 3改变了NT位标识，我们可以在int 3之后再重新将NT位复原，这样也是可以正确返回的。
更改后的test代码如下：
    void __declspec(naked) test()
    {
            __asm
            {
                    int 3
                    push eax      //保存原来的eax寄存器
                    pushfd 
                    pop eax
                    or eax,0x4000
                    push eax
                    popfd
                    pop eax
                    iretd;
            }
    }
再次运行，这次能够成功返回了。
整个过程如下图所示：
####  jmp far
直接上代码
    #include "stdafx.h"
    #include 
    #include 
    char trs[6]={0};
    char gdts[6]={0};
    void __declspec(naked)  test()
    {
            __asm
            {
                    //int 3
                    jmp fword ptr trs;
                    //iretd;
            }
    }
    int main(int argc,char * argv[])
    {
            char stack[100]={0};
            DWORD cr3=0;
            printf("cr3:");
            scanf("%X",&cr3);
            DWORD tss[0x68]={
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    cr3,
                    (DWORD)test,
                    0,
                    0,
                    0,
                    0,
                    0,
                    ((DWORD)stack) - 100,
                    0,
                    0,
                    0,
                    0x23,
                    0x08,
                    0x10,
                    0x23,
                    0x30,
                    0,
                    0,
                    0x20ac0000
            };
            printf("%x",tss);
            WORD rs=0;
            _asm
            {
                    sgdt gdts;
                    str ax;
                    mov rs,ax;
            }
            *(WORD*)&trs[4]=rs;
            char buf[6]={0,0,0,0,0x48,0};
            system("Pause");
            __asm
            {
                    jmp fword ptr buf;
            }
            printf("SUCESSFULLY\n");
            system("Pause");
            return 0;
    }
由于是jmp，是跳到了一个新的任务段，那么上一次的任务段的tr，tr本身是96位，通过str取出最后的16位选择子，将这个选择子存储到一个全局变量中，方便返回的时候重新跳到一开始的TSS。
####  jmp far拓展
加上int 3，这对jmp是没有影响的。
    void __declspec(naked)  test()
    {
            __asm
            {
                    //int 3
                    jmp fword ptr trs;
                    //iretd;
            }
    }
原因就是回跳的时候不依靠NT位，相当于是直接跳过去的，不会依赖上一次的任务链。
## 任务门
上面讲的call far，jmp far是两种可以访问任务段的方法，而任务门则是第三种方式可以访问任务段。
IDT表可以包含3种门描述符：
  * 任务门描述符
  * 中断门描述符
  * 陷阱门描述符
IDT表，中断门和陷阱门之前已经说过了，任务门的结构如下：
值得注意的是第四字节的16到31位是一个新的段选择子，指向的是gdt表中对应的段描述符。其他保留位添0就行了。
可以构造的任务门描述符：0000E500`00480000
任务门的执行过程：
  * 1.INT N指令来去IDT表中执行代码
  * 2.查询IDT表找到任务门描述符
  * 3.通过任务描述符表.查询GDT表.找到任务段描述符.
  * 4.使用TSS段中的值修改寄存器
  * 5.IRETD返回
执行过程与中断门陷阱门是有相似之处的，都是要跨两张表。
要完成任务门的实验，首先要更改idt表。这里选择idt表的第32个，那里没有被操作系统使用。
    kd> eq 8003f500 0000E500`00480000
然后其他的和call far访问任务段过程差不多。
实验代码如下：
    #include "stdafx.h"
    #include 
    #include 
    char trs[6]={0};
    char gdts[6]={0};
    void __declspec(naked) test()
    {
            __asm
            {
                    //int 3
                    iretd;
            }
    }
    int main(int argc,char * argv[])
    {
            char stack[100]={0};
            DWORD cr3=0;
            printf("cr3:");
            scanf("%X",&cr3);
            DWORD tss[0x68]={
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    0x0,
                    cr3,
                    (DWORD)test,
                    0,
                    0,
                    0,
                    0,
                    0,
                    ((DWORD)stack) - 100,
                    0,
                    0,
                    0,
                    0x23,
                    0x08,
                    0x10,
                    0x23,
                    0x30,
                    0,
                    0,
                    0x20ac0000
            };
            printf("%x",tss);
            WORD rs=0;
            _asm
            {
                    sgdt gdts;
                    str ax;
                    mov rs,ax;
            }
            *(WORD*)&trs[4]=rs;
            char buf[6]={0,0,0,0,0x48,0};
            system("Pause");
            __asm
            {
                    int 32;
            }
            printf("sucessfully\n");
            system("Pause");
            return 0;
    }
运行后获取cr3的值，并修改gdt表。
    kd> eq 8003f048 0000E912`fd780068
能够正常返回。
###  为什么任务段可以用call far访问还要有任务门
这也是设计思想的问题。
在idt表的第九个，也就是8号中断(int 8)。
这实际上是个任务门，再看对应的gdt表中描述符。
这里的TSS的base就是：0x8054af00。查看eip信息。
    kd> dd 8054af00kd> uf 805404ce
那么八号中断是个什么作用呢，还是得看intel白皮书。
当产生一个异常后会被异常处理接管，进入异常处理里面去，但是异常处理函数在执行中还有可能再次产生异常，这时候就是int 8来接管，也就是双异常。
int 8是如何接管处理的呢？一旦进入8号中断，将会替换一堆寄存器，保证CPU
能跳到一个正确的地方去执行（除非那个地方也被破坏了），此时什么错误都无所谓了，收集信息后，蓝屏。
## 后记
下节进入页的机制。