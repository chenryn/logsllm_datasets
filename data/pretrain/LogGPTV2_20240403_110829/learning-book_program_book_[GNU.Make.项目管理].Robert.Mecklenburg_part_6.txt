lexer.o:lexer.h
所有内置规则（built-inrule）都是模式规则（patternrule）的实例。一个模式规则看
起来就像之前你所见过的一般规则，只是主文件名（就是扩展名之前的部分）会被表示
成%字符。上面这个makefile之所以可行是因为make里存在三项内置规则。第一项规
则描述了如何从-个.c文件编译出一个.o文件：
8.0：8.C
$（COMPILE.C)S(OUTPUT_OPTION)$$@
最后是一项特殊的规则，描述了如何从.c文件产生出一个不具扩展名（经常是一个可以
执行）的文件：
8：8.C
S（LINK.C)S^S(LOADLIBES)$（LDLIBS)-O S@
我们将会进一步探讨这个语法的细节，不过首先让我们查看make的输出，看看它是如
何应用这些内置规则的。
当我们对这7行makefile运行make时，会看到如下的输出：
S make
gcc-Iinclude-c-o count_words.osrc/count_words.c
gcc-Iinclude-c-o counter.o src/counter.c
flex-t src/lexer.1>lexer.c
xx---
gcccount_words.ocounter.olexer.o/lib/libfl.a-o count_words
rm lexer.c
首先，make会读取makefile，并且将默认目标（defaultgoal）设置成count_words，因
为命令行上并未指定任何工作目标。查看默认目标时，make发现了四个必要条件：
count_words.o（makefile并未指定这个必要条件，它是由隐含规则提供的）、counter.o、
lexer.o以及-lfl。接着，make会试着依次更新每个必要条件。
当make检查第一个必要条件count_words.o时，并未发现可以处理它的具体规则
（explicitrule），不过却找到了隐含规则（implicitrule）。查看当前目录，make并未找
到源文件，所以它开始搜索VPATH，而且在src目录中找到了一个相符的源文件。因为
src/count_words.c没有其他必要条件，make可以自由更新counr_words.o，所以它会执
行这个隐含规则。counter.o也是类似的情况，当make检查lexer.o的时候，并未找到相
应的源文件（即使在src目录中），所以make会假设这（不存在的源文件）是一个中间
文件，而且会查找“从其他源文件产生lexer.c文件”的方法。make找到了一个“从.1
文件产生.c文件”的规则，并且注意到lexer./文件的存在。因为不需要进行lexer.l的更
新，所以make前往用来更新lexer.c的命令，这会产生flex命令行。接着，make会
从C源文件来更新目标文件。像这样使用一连串的规则来更新一个工作目标的动作称为
规则链接（rulechaining）。
接下来，make会检查程序库规范-1fl，它会搜索系统的标准程序库，并且找到/lib/
libfl.a.
---
## Page 43
规则
33
现在make已经找到更新count_words时所需要的每个必要条件，所以它会执行最后一
个gcc命令。最后，make发现自己创建了一个不必保存的中间文件，所以会对它进行清
除的操作。
正如所见，在makefile文件中使用规则，可以略过许多细节。这些规则经过复杂的交互
之后可产生极为强大的功能。尤其是，使用这些内置规则可大量简化makefile的规范工
作。
你可以通过在脚本中更改变量的值来自定义内置规则。一个典型的规则包含一群变量，
以所要执行的程序开头，并且包括用来设定主要命令行选项（比如输出文件、进行优化、
进行调试等）的变量。你可以通过运行make--print-data-base列出make具有哪些
默认规则（和变量）。
模式
模式规则中的百分比字符（8）大体上等效于Unixshell中的星号（*），它可以代表任
意多个字符。百分比字符可以放在模式中的任何地方，不过只能出现一次。百分比字符
的正确用法如下所示：
8,v
s3.0
wrapper_&
在文件名中，百分比以外的字符会按照字面进行匹配。一个模式可以包含一个前缀
（prefix）或一个后缀（suffix），或是这两者同时存在。当make搜索所要使用的模式规
则时，它首先会查找相符的模式规则工作目标（patternruletarget）。模式规则工作目
标必须以前缀开头并且以后缀结尾（如果它们存在的话）。如果找到相符的模式规则工
作目标，则前缀与后缀之间的字符会被作为文件名的词干（stem）。接着make会通过将
词干替换到必要条件模式（prerequisitepattern）中来检查该模式规则的必要条件。如
果所产生的文件名存在，或是可以应用另一项规则进行产生的工作，则会进行比较以及
应用规则的动作。词干必须至少包含一个字符。
事实上，你还有可能用到只有一个百分比字符的模式。此模式最常被用来编译Unix可执
行程序。例如，下面就是GNUmake用来编译程序的若干模式规则：
8：8.mod
$(COMPILE.mod）-O$@-eS@S~
8：8.cpp
$（LINK.CPP)$^S（LOADLIBES）$（LDLIBS)-O$@
8：8.sh
cat s<>$@
---
## Page 44
34
第二章
pSx+epouy
这些模式会依次被用来从Modula源文件，经过预处理的C源文件和Bourneshell脚本
静态模式规则
静态模式规则（staticpatternrule）只能应用在特定的工作目标上。
S(OBJECTS）：.O:$.C
->（) -）
此规则与一般模式规则的唯一差别是开头的$（OBJECTS）：规范。这将使得该项规则只
能应用在S（OBJECTS）变量中所列举的文件上。
此规则与模式规则十分类似。.O模式会匹配S（OBJECTS）中所列举的每个目标文件
并且取出其词干。然后该词干会被替换进。.c模式，以产生工作目标的必要条件。如果
工作目标模式不存在，则make会发出警告。
如果明确列出工作目标文件比较容易进行扩展名或其他模式的匹配，请使用静态模式规
则。
后缀规则
后缀规则（suffixrule）是用来定义隐含规则的最初（也是过时的）方法。旧版的make
可能不支持GNUmake的模式规则语法，因此你仍然会在许多makefile文件中看到后缀
可以解决makefile的可移植性问题，但是在一些罕见的情况下你可能仍旧需要使用后缀
规则。
后缀规则中的工作目标，可以是一个扩展名或两个被衔接在一起的扩展名：
.C.O:
S(COMPILE.C)S(OUTPUT_OPTION)Sfoo.y
revision 1.1
done
bison -yfoo.y
mv-fy.tab.c foo.c
gcc-c-ofoo.ofoo.c
gccfoo.o-ofoo
rm foo.cfoo.o foo.y
找到了隐含规则链之后，make可以作出如下的决定：如果目标文件foo.o存在，就可以
创建可执行文件foo：如果C源文件foo.c存在，就可以创建foo.o：如果yacc源文件foo.y
存在，就可以创建foo.c。最后，make发现它可以通过从RCS文件foo.y，v中调出（check
out）文件foo.y来创建该文件。一旦make将此计划公式化之后，就会以co调出foo.y，
以bison将之转换成foo.c，以gcc将之编译成foo.o，最后再次以gcc将之链接成foo。
以上这些步骤全都产生自隐含规则库。酷极了！
链接规则的过程中所产生的文件称为中间文件（intermediatefile），make会对它们进行
特别的处理。首先，因为中间文件不会在工作目标中出现（否则它们就不是中间文件
---
## Page 48
38
第二章
了），所以make不会更新中间文件；其次，make创建中间文件本身就有更新工作目标
的副作用，所以make在结束运行之前会删除这些中间文件。
规则的结构
内置规则具有标准的结构，好让它们容易自定义。现在让我们来查看此结构，并探讨有
关“自定义”（customization）这方面的议题。下面是（现在我们所熟悉的）从C源文
件来更新目标文件的规则：
8.0：8.C
S(COMPILE.C)S（OUTPUT_OPTION)$<
这个规则的“自定义”完全取决于其所用到的变量。我们在此处看到了两个变量，其中
的COMPILE.C是由多个其他变量所定义而成的：
CC=gcc