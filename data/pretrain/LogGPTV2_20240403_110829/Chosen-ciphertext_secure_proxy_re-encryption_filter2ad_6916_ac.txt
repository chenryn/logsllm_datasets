additional justiﬁcation for the adequacy of the deﬁnition.
Definition 2.5
(Bidirectional PRE-CCA security).
A PRE scheme is Bidirectional PRE-CCA secure for domain
D of messages if it is correct for D as in Deﬁnition 2.3, and
any p.p.t. adversary wins the bidirectional PRE-CCA game
only with negligible advantage.
Remark 2.6
(On Private Re-Encryption Keys).
This deﬁnition captures the important feature that, from a
ciphertext and its re-encrypted value, the adversary does not
learn the re-encryption keys. Suppose the adversary could
learn a re-encryption key rk c↔d from queries to Orenc, then
it could always win the PRE game by re-encrypting challenge
(c, Cb) to the pair (d, Db) using rk c↔d, and then querying the
decryption oracle Odec on (d, Db).
2.2 UC Deﬁnitions of Security
We formulate a deﬁnition for proxy re-encryption within
the universally composable (UC) security framework, and
investigate its relation with the game-based deﬁnition. In
addition to providing additional conﬁdence in the adequacy
of the notion, a deﬁnition in the UC framework carries with
it strong composability guarantees.
Providing a UC deﬁnition amounts to formulating an ideal
functionality for proxy re-encryption. However, precisely
capturing the security guarantees provided by Deﬁnition 2.5
as an ideal functionality within the UC framework turns
out to be non-trivial. We thus provide two such deﬁnitions,
namely two formulations of an “ideal proxy re-encryption
functionality”, and show that one formulation implies Def-
inition 2.5, whereas the second formulation is implied by
Deﬁnition 2.5. This allows us to “sandwich” the security
guarantees provided by Deﬁnition 2.5, when formulated in
a composable, simulation based framework.
In a nutshell, the diﬀerence between the two formulations
is that the weak one does not guarantee security to parties
that have setup re-encryption keys with corrupted parties
(or with other parties that have setup re-encryption keys
with corrupted parties), even if the corresponding proxies
are uncorrupted. The strong formulation guarantees secu-
rity even for such parties, as long as the corresponding prox-
ies are uncorrupted.
We ﬁrst describe the strong formulation, denoted FsP RE.
Here we extend the ideal public-key encryption functionality
FP KE from [9] to handle re-encryption. To do so, we must
allow a single instance of FsP RE to handle multiple pairs
of encryption and decryption keys, as well as multiple re-
encryption proxies. This is in contrast to the case of FP KE,
where each instance handles only a single pair of encryption
and decryption keys. In addition, in order to simplify the
presentation, we assume that the size of the domain D of
plaintexts is super-polynomial.
Speciﬁcally, as in the case of FP KE, FsP RE provides a
key generation interface for primary encryption and decryp-
tion keys, where the keys themselves are formal (“dummy”)
values chosen by the adversary, the encryption key (algo-
rithm) is returned to the registering party, and the decryp-
tion key (algorithm) is locally recorded. In addition, there
is a re-encryption key generation interface, where two reg-
istered parties P and P (cid:48) can provide a proxy X with the
formal capability to re-encrypt ciphertexts from P to P (cid:48) and
vice versa. As part of this operation the adversary provides
FsP RE with a “dummy” re-encryption key eP,P (cid:48) between P
and P (cid:48). These interfaces also allow the adversary to deter-
mine the identities of corrupted parties and proxies, with
eﬀects described below.
It is assumed that the adversary
speciﬁes parties as corrupted only before the encryption in-
terface is used for the ﬁrst time. This manifests the restric-
tion of the modeling to non-adaptive party corruption.
We say that a party P is eﬀectively corrupted if it is cor-
rupted, or if it has setup a re-encryption key with a party
P (cid:48) that is either corrupted or eﬀectively corrupted, and in
addition the re-encryption proxy for P, P (cid:48) is corrupted. Es-
sentially, if a party P is eﬀectively corrupted then the ad-
versary can “by deﬁnition of the problem” freely learn any
message encrypted to P . Indeed, FsP RE will not guarantee
secrecy for eﬀectively corrupted parties.
The encryption interface allows arbitrary encryptors to
“formally encrypt” messages, namely to obtain “formal ci-
phertexts” that will decrypt to the correct message, while
guaranteeing unconditional secrecy as long as the target party
is not eﬀectively corrupted. This is done as follows: If the
target party P is not eﬀectively corrupted, then the formal
ciphertext c for a message m is computed by applying the
dummy encryption algorithm provided by the adversary to a
random message r in the domain. Then, the tuple (P, m, r, c)
is recorded. Recording the random value r is done in order
to correctly decrypt re-encrypted ciphertexts (see details be-
low). If the target party is eﬀectively corrupted then c is
computed by applying the dummy encryption algorithm to
the actual message m to be encrypted. This represents the
fact that no secrecy is guaranteed in this case.
In addition to encryption, FsP RE provides a re-encryption
interface. This interface is simple, and allows a re-encryption
proxy between P and P (cid:48) to transform a dummy ciphertext c
to a dummy ciphertext c(cid:48) in a way that guarantees that when
P (cid:48) decrypts c(cid:48) it will obtain the same value as that obtained
by P when decrypting c. The value of c(cid:48) is computed by
applying the recorded algorithm eP,P (cid:48) to c.
The decryption interface allows a registered party P to
decrypt ciphertexts c addressed to it. The decryption val-
ues are computed as follows. First, FsP RE checks whether
there is a recorded tuple which contains ciphertext c and
target party P . If so, the corresponding plaintext m is re-
turned. This case guarantees correct decryption for mes-
sages that were legitimately encrypted and re-encrypted us-
ing FsP RE’s interfaces. Next, FsP RE “helps” the adversary
(namely, the simulator) by proceeding as follows. First, the
value r = dp(c) is computed, where dP is the dummy de-
Functionality FP RE (with message domain D)
Key Generation: When receiving (KeyGen, sid ) from some party P , send (KeyGen, sid , P ) to the adversary. When
receiving algorithms (eP , dP ) and a “corrupted” bit from the adversary, register (P, eP , dP ) and output
(EncryptionAlgorithm, sid , eP ) to P . In addition, if the “corrupted” bit is set then record P as corrupted.
Re-Encryption Key Generation: When receiving (ReKeyGen, sid , P, P (cid:48), X) from registered parties P and P (cid:48), send
(ReKeyGen, sid , P, P (cid:48), X) to the adversary. When receiving algorithm eP,P (cid:48) and a “corrupted” bit from the adver-
sary, record (P, P (cid:48), X, eP,P (cid:48) ) and (P (cid:48), P, X, eP,P (cid:48) ). Output (Proxy, sid , P, P (cid:48)) to party X (the proxy). In addition,
if the “corrupted” bit is set then record X as corrupted.
A registered party P is called eﬀectively corrupted if it is corrupted, or it has registered a re-encryption key with
an eﬀectively corrupted party where the proxy is corrupted.
Encryption: When receiving (Enc, sid , m, e) from some party E, do: If m is not in the legitimate encryption domain,
output an error message. Else, if e = eP for some registered party P which is not eﬀectively corrupted, then
choose a random message rm ← D, run algorithm eP (rm) (making the necessary random choices) and let c be the
outcome. Else (i.e., P is either eﬀectively corrupted or not registered), let c = e(m), and let rm =⊥ where ⊥ /∈ D.
In either case, record (P, m, rm, c) and output (Ciphertext, sid , c) to E.
Re-Encryption: When receiving (ReEnc, sid , c, eP , eP (cid:48) ) from party X, where (P, P (cid:48), X, eP,P (cid:48) ) is recorded, compute
c(cid:48) = eP,P (cid:48) (c), and return (Ciphertext, sid , c(cid:48)) to X. In addition, if there is a record (P, m, rm, c) then add the
record (P (cid:48), m, rm, c(cid:48)).
Decryption: When receiving (Dec, sid , c) from a registered party P , do: If there is a recorded entry (P, m, r, c) for
some m and r, then set µ ← m. Else, compute r = dP (c). If there is a recorded entry (P (cid:48), m(cid:48), r, c(cid:48)) for some
P (cid:48), m(cid:48), c(cid:48), then set µ ← m(cid:48). (If there is more than a single such entry then output an error message.) Else set
µ ← r. Return (Plaintext, sid , µ) to P (cid:48).
Figure 1: The strong version of the ideal functionality for (bidirectional) proxy re-encryption, FsP RE. The weak version,
FwP RE, is identical except that a party is called eﬀectively corrupted whenever it has registered a re-encryption key with
an eﬀectively corrupted party, even when the proxy is not corrupted. The unidirectional case is captured by modifying the
re-encryption key generation interface so that it registers proxies with the ability to re-encrypt only unidirectionally.
cryption algorithm provided by the adversary when P reg-
istered. Next, if there is any recorded tuple where the third
ﬁeld (i.e., the random value chosen at encryption time) is
r, then the corresponding plaintext m from that tuple is
returned. This represents the case where c was generated
by applying the re-encryption algorithm not via the inter-
face provided by FsP RE. (This situation is possible when a
re-encryption proxy gets corrupted and its key becomes ex-
posed. In this case we’d like to allow the adversary to create
new ciphertexts that decrypt to the same value as existing
ones, while still maintaining the secrecy of the decrypted
value. This situation is somewhat reminiscent of the case of
RCCA security. We note that for this step to be eﬀective,
the domain D of plaintexts should be super-polynomial in
order to avoid collisions.) Finally, if no matching tuple is
found, FsP RE outputs r as the decryption value. This step
is similar to the case of plain FP KE, and provides assistance
to the simulator in the case where the ciphertext c was sim-
ply generated by the environment as an encryption of r to
party P , not via the legitimate encryption interface.
As stated more precisely below, functionality FsP RE cap-
tures the same security notion as Deﬁnition 2.5, except for
the following issue: Consider a party P that’s not eﬀectively
corrupted, but has setup a re-encryption proxy X with a
corrupted party P (cid:48). (That is, X is not corrupted and the
re-encryption key between P and P (cid:48) is secret.) Now, assume
that a ciphertext c, that was generated for P as an encryp-
tion of a message m, is being re-encrypted to a ciphertext c(cid:48)
for P (cid:48). Recall that, since P is not eﬀectively corrupted, the
ciphertext c is a “dummy ciphertext” that’s statistically un-
related to m. In contrast, c(cid:48) must be a value that decrypts
to m under a key that’s known to the adversary and the
environment. Furthermore, c(cid:48) must look like a “plausible re-
encryption” of c. Thus, a scheme that realizes FsP RE must
allow a “simulator” to “convincingly” transform a ciphertext
c that’s unrelated to m into a ciphertext c(cid:48) linked to m. This
is a property that seems to be an artifact of the simulation
paradigm; it is not implied by Deﬁnition 2.5. In particular,
our scheme does not have this property.
The weaker proxy-re-encryption ideal functionality, noted
FwP RE, bypasses this problem by considering any party that
has a re-encryption key with an eﬀectively corrupted party
to be eﬀectively corrupted, regardless of whether the rele-
vant proxy is corrupted. This provides a somewhat weaker
security guarantee, but the gain is that we can now show
that this notion is implied by Deﬁnition 2.5, thus providing
a “lower bound” of the security provided by Deﬁnition 2.5
in a simulation-based framework. Figure 1 presents the re-
encryption functionalities, FsP RE and FwP RE.
Within the UC framework, security is deﬁned via realiz-
ing the corresponding ideal functionality.
In our case, we
make another restriction: We consider only environments
that setup all the keys, including the re-encryption keys,
before encrypting messages. More precisely, we say that
an environment is non-adaptive corruption if, as soon as a
message is encrypted or re-encrypted to a party, no addi-
tional re-encryption keys are generated between this party
and other parties (since this may eﬀectively corrupt parties).
UC-secure PRE schemes are then deﬁned as follows:3
Definition 2.7
(UC-secure PRE schemes). A PRE
scheme Σ is non-adaptively strongly (resp., weakly) UC-secure
if the protocol πΣ UC-realizes FsP RE (resp., FwP RE) as de-
ﬁned in [9], with respect to non-adaptive environments.
2.3 Relationships between Security Deﬁnitions
The following relationships between these deﬁnitions hold.
Proof of Theorem 2.9 is in the full version of this paper [12].
Theorem 2.8
(Strongly UC implies Game-Based).
Let Σ be a PRE scheme that’s non-adaptively strongly UC-
secure as in Deﬁnition 2.7. Then Σ is bidirectional PRE-
CCA re-encryption scheme (as in Deﬁnition 2.5).
Theorem 2.9
(Game-Based implies Weakly UC).
Let Σ be a bidirectional PRE-CCA re-encryption scheme (as
in Deﬁnition 2.5) over message space D, where |D| is super-
polynomial in the security parameter. Then it holds that Σ
is non-adaptively weakly UC-secure as in Deﬁnition 2.7.
3. CONSTRUCTIONS
Following some preliminaries on bilinear forms, we ﬁrst
present a simple construction in the random oracle model,
and then show how replace the random oracles with concrete
hash functions.
3.1 Bilinear Forms
Bilinear Groups: We write G = (cid:104)g(cid:105) to denote that g
generates the group G. Let BSetup be an algorithm that,
on input the security parameter 1k, outputs the parameters
for a bilinear map as (q, g, h, G, GT , e), where G, GT are of
prime order q ∈ Θ(2k) and (cid:104)g(cid:105) = (cid:104)h(cid:105) = G. The eﬃcient
mapping4 e : G × G → GT is both: (Bilinear) for all g ∈ G
and a, b ∈ Zq, e(ga, gb) = e(g, g)ab; and (Non-degenerate) if
g generates G, then e(g, g) (cid:54)= 1.
The security of our schemes depend only on this mild as-
sumption:
Decisional Bilinear Diﬃe-Hellman (DBDH) [8]: Let
BSetup(1k) → (q, g, G, GT , e), where (cid:104)g(cid:105) = G. For all p.p.t.
adversaries A, the following probability is strictly less than
1/2 + 1/poly(k):
Pr[a, b, c, d ← Zq; x0 ← e(g, g)abc; x1 ← e(g, g)d;
z ← {0, 1}; z
(cid:48) ← A(g, ga, gb, gc, xz) : z = z
(cid:48)
].
3An alternative way to deﬁne weak UC-security is to say
that a PRE scheme is weakly UC-secure if it UC-realizes the
strong functionality, FsP RE, with respect to restricted envi-
ronments that do not ask to re-encrypt ciphertexts directed
at parties that are not eﬀectively corrupted, to parties that