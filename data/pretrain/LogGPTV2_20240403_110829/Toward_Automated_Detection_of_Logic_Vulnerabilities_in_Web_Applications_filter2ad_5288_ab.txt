havior of a program and can be used to guide further,
more elaborate program analysis.
As the second step of the analysis, we use model
checking with symbolic inputs to check the inferred spe-
ciﬁcations. The goal is to ﬁnd additional evidence in
the code about which invariants are likely to be part of
the real program speciﬁcation and then to identify paths
where these invariants are violated.
A na¨ıve approach would assume that all the generated
invariants represent real invariants (speciﬁcations) for an
application. Unfortunately, this straightforward solution
leads to an unacceptably large number of false positives.
The reason is the incompleteness of the dynamic analysis
step. In particular, the limited variety of the input data
frequently leads to the discovery of spurious invariants
that do not reﬂect the intended program speciﬁcation. To
address this problem, we propose two novel techniques
to distinguish between spurious and real program invari-
ants.
The ﬁrst technique aims to distinguish between a spu-
rious and a true invariant by determining whether a pro-
gram contains a check that involves the variables con-
tained in the invariant on a path leading to the pro-
gram point for which this likely invariant was gener-
ated. A check on a variable is a control ﬂow operation
that constrains this variable on a path. For example, the
if -statement if (isAdmin == true) {...} repre-
sents a check on the variable isAdmin. Intuitively, we
assume that a certain invariant was intended by a pro-
grammer if there is at least one program path that con-
tains checks that enforce the correctness of this invariant
(i.e., the checks imply that the invariant holds). We call
such invariants supported invariants. When we ﬁnd a
supported invariant that can be violated on an alterna-
tive program path leading to the same program point, we
report this as a potential application logic vulnerability.
When a likely invariant can be violated, but there are no
checks in the program that are related to this invariant,
then we consider it to be spurious.
The second technique identiﬁes a certain type of in-
variant that we always consider to reﬂect actual program
speciﬁcations. These invariants represent equality rela-
tions between web application state variables (in partic-
ular, variables storing the content of user sessions and
database contents). Relationships of that kind often re-
ﬂect important internal consistency constraints in a web
application and are rarely coincidental. A vulnerability
is reported when the analysis determines that the equal-
ity relation is not enforced on all paths.
The vulnerability detection process and our techniques
to distinguish between spurious and real invariants are
discussed in more detail in Section 4.3.
4
Implementation
We chose to implement
the proposed approach for
servlet-based web applications written in Java. Servlets
are frequently used for implementing web applications.
In addition, there are a number of existing tools available
for Java that can be used for program analysis. In this
section, we describe the tools that we used, the exten-
sions that we developed, and the challenges that we had
to overcome to make them work together.
We ﬁrst brieﬂy introduce servlets [24]. A typi-
cal servlet-based web application consists of servlets,
static documents, client-side code, and descriptive meta-
information. A servlet is a Java-based web component
4
package myapp;
public class User {
private String username;
private String role;
}
public class Order {
private int tax;
private int total;
private Cart cart;
}
public class Cart {
private List products;
private int total;
}
Class Deﬁnitions
_jspService(javax.servlet.http.HttpServletRequest req,
javax.servlet.http.HttpServletResponse res)
:::EXIT106
// invariants for the field "role" belonging to an
// object stored in the session under the key "user"
req.session.user.role != null
req.session.user.role.toString == ‘‘admin’’
// invariants for the fields "cart" and "total"
// stored in the session under the key "order"
req.session.order.cart.total
== req.session.order.total
req.session.order.total > req.session.order.tax
Generated Invariants
Figure 1: Example of invariants generated for an exit
point on line 106 of the jspService method of a servlet.
whose methods are executed on the server in response to
certain web requests. Servlets are managed by a servlet
container, which is an extension of a web server that
loads/manages servlets and provides services via a well-
deﬁned API. These services include receiving and map-
ping requests to servlets, sending responses, caching, en-
forcing security restrictions, etc. Servlets can be devel-
oped as Java classes or as JavaServer Pages (JSPs). JSPs
are a mix of code and static HTML content, and they are
translated into Java classes that implement servlets.
4.1 Deriving Speciﬁcations
As mentioned previously, in this work, we consider pro-
gram speciﬁcations that can be expressed as invariants
over program variables. To derive these invariants, we
leverage Daikon [9, 11], a well-known tool for dynamic
detection of likely program invariants.
Daikon. Daikon generates program invariants using ap-
plication execution traces, which contain values of vari-
ables at concrete program points. It is capable of gene-
rating a wide variety of invariants that cover both single
variables (e.g., total ≥ 50.0) and relationships between
multiple variables (e.g., total = price ∗ num + tax).
Daikon-generated invariants are called likely invariants
because they are based on dynamic execution traces and
might not hold on all program paths.
5
Daikon comes with a set of front-ends. Each front-
end is speciﬁc to a certain programming language (such
as C or Java). The task of a front-end is to instrument
a given program, execute it, and create data trace ﬁles.
These trace ﬁles are then fed to Daikon for invariant gen-
eration. For our analysis, we leveraged the existing front
end for Java, called Chicory, and plugged it into a JVM
on top of which the Tomcat servlet engine [13] is exe-
cuted. This allowed us to intercept and instrument all
servlets executed by the Tomcat server.
The current
implementation of Chicory produces
traces only for procedure entry and exit points and non-
local variables. Therefore, Daikon generates invariants
for method parameters, function return values, static and
instance ﬁelds of Java objects, and global variables.
Our changes. In addition to altering Chicory’s invoca-
tion model to work with Tomcat, we extended Chicory
with a way to include the content of user sessions into
the generated execution traces. Invariants over this data
are important for the vulnerability analysis of web appli-
cations because user sessions are an integral part of an
application’s state and directly affect its logic.
The content of user sessions is stored by a servlet con-
tainer in the form of dynamically-generated mappings
from a key to a value, i.e., as elements in a hash map con-
tainer. We found that, given the current design of Daikon
and Chicory, it is not possible to generate useful invari-
ants for the contents of such containers. The reason is
that Daikon requires the type and the name of all vari-
ables that can appear at a particular program point to be
declared before the ﬁrst trace for a particular program
point is generated. This information is not available be-
forehand for containers like hash maps because they are
dynamically-sized and can contain elements of different
types.
To generate valid traces for Daikon, Chicory gener-
ates all declarations for program points at the applica-
tion loading time. At this time, it needs to know the ex-
act type of each variable/object in declaration to be able
to traverse the object structure and generate precise (or
interesting) invariants. For example, in order to gener-
ate a deﬁnition for the ﬁeld role of the object of type
User (deﬁned in Figure 1), which might be stored in the
user session of a servlet application under the key “user,”
Chicory needs to know that the object of the type User is
expected in the session.
To overcome these problems, we provide our front-
end with possible mappings from a key to an object type
that can be observed in a session during execution. For
example, for the code shown in Figure 1, we would need
to provide the following mappings:
user:myapp.User
cart:myapp.Cart
order:myapp.Order
We modiﬁed Chicory to use this information to gener-
ate more precise traces for session data. This information
allows for the generation of more interesting invariants,
such as the ones shown in the Figure 1. We extended the
front-end to generate traces for the content of user ses-
sions for every method in an application. As future work,
we plan to generate these mapping automatically for ar-
bitrary containers by generating new declarations as new
elements are found in a container, and then merging the
resulting traces before feeding them to Daikon.
To generate program execution traces, we wrote
scripts to automatically operate web applications. For
each application, these scripts simulate typical user ac-
tivities, such as creating user accounts, logging into the
application, choosing and buying items from a store, ac-
cessing administrative functionality, etc. The main idea
of this step is to exercise the application’s common ex-
ecution paths by following the links and ﬁlling out the
forms presented to the user during a typical interaction
with the application. The ﬁnal outcome of the dynamic
analysis step is a ﬁle containing a serialized version of
likely invariants for the given web application. These
invariants serve as a (partial, simpliﬁed) speciﬁcation of
the web application, and they are provided as input to the
next step of the analysis.
4.2 Model Checking Applications
Once the approximate speciﬁcations (i.e., the likely in-
variants) for a web application have been derived, the
next step is to analyze the application for supporting
“clues” and identify invariants that are part of a true pro-
gram speciﬁcation. Any violation of such an invariant
represents a vulnerability.
We chose to use model checking for this step of the
analysis and implemented it in a tool called Waler (Web
Application Logic Errors AnalyzeR). Given a servlet-
based application and a set of likely invariants, Waler
systematically instantiates and executes symbolically the
servlets of the application imitating the functionality of
a servlet container. As the application is executed, Wa-
ler checks the truth value of provided likely invariants,
analyzes the application’s code for “clues,” and reports
possible logic errors. In this section, we describe the ar-
chitecture and execution model of Waler. Then, in Sec-
tion 4.3 we explain how Waler identiﬁes interesting in-
variants and application logic vulnerabilities.
4.2.1 System Top-level Design
Waler is implemented on top of the Java PathFinder (JPF)
framework [19, 35], and its general architecture is shown
Figure 2: Waler’s architecture.
Figure 2. In this ﬁgure, dark gray boxes represent new
modules that we implemented, while dotted (light gray)
boxes represent parts of JPF that we had to extend.
JPF overview.
JPF is an open-source, explicit-state
model checker that implements a JVM. It systemati-
cally explores an application’s state space by executing
its bytecode. JPF consists of a number of conﬁgurable
components. For example, the speciﬁc way in which an
application’s state space is explored depends on a cho-
sen Search Strategy – JPF core distribution includes a
number of basic strategies. The State Serializer compo-
nent deﬁnes how an application state is stored, matched
against others, and restored. JPF also comes with a num-
ber of interfaces that allow for its functionality to be ex-
tended and modiﬁed in arbitrary ways.
In general, JPF is capable of executing any Java class-
ﬁle that does not depend on platform-speciﬁc native
code, and many of the Java standard library classes can
run on top of JPF unmodiﬁed. However, in JPF, some of
the Java library classes are replaced with their model ver-
sions to reduce the complexity of their real implementa-
tions and/or to enable additional features. For example,
Java classes that have native method calls (such as ﬁle
I/O) have to be replaced by their models, which either
emulate the required functionality or delegate the native
calls to the actual JVM on top of which JPF is executed.
6
Virtual MachineSearch StrategiesSymbolic Model ClassesVulnerability Analysis StrategiesProgram Checks AnalyzerLikely Invariants AnalyzerJPFSymbolic Execution ExtensionJava APIServlet APIJSP APIJava VM FunctionalityApplication ControllerWeb ApplicationLikely InvariantsCore JPFLibraries Available to Applications Application DriverState SerializersUnmodiﬁed JPF componentsModiﬁed JPF componentsNew componentsAlso, JPF comes with a number of extensions that pro-
vide additional functionality on top of JPF. Below, we
discuss the JPF-SE extension for JPF, which we lever-
aged in Waler to enable symbolic execution.
The JPF-SE Extension. The JPF-SE extension for JPF
enables symbolic execution of programs over unbounded
input when using explicit-state model checking [2]. With
this extension, the Java bytecode of an application needs
to be transformed so that all concrete basic types, such
as integers, ﬂoats, and strings, are replaced with the cor-
responding symbolic types. Similarly, concrete opera-
tions need to be replaced with the equivalent operations
on symbolic values. For example, all objects of type int
are replaced with objects of type Expression. An addition
of two integers is replaced with a call to the plus method
of the Expression class. Following the standard symbolic
execution approach, all newly-generated constraints are
added to the path condition (PC) over the current execu-
tion path. The generation of constraints is done in the
methods of symbolic classes, and it is transparent to the
application. Whenever the PC is updated, it is checked
for satisﬁability with a constraint solver, and infeasible
paths are pruned from execution.
Unfortunately, we found that JPF-SE was missing a
considerable amount of functionality that needed to be
added to make the system suitable for real-world appli-
cations. For example, the classes implementing symbolic
string objects were missing a signiﬁcant number of sym-
bolic methods with respect to the java.lang.String API,
which is used extensively in web applications. Also, in
order to execute an arbitrary application using JPF-SE,
symbolic versions of many standard Java libraries are re-
quired. These libraries were not provided with the ex-
tension. Finally, a tool to perform the necessary transfor-
mations of Java bytecode was not publicly available, and,
therefore, we implemented our own transformer by lever-
aging ASM [25], a Java bytecode engineering library.
Waler overview. In order to execute servlet-based web
applications and analyze them for logic errors, we had to
extend JPF in a number of ways. As shown in Figure 2,
we implemented from scratch four main components: the
Application Controller (AC), the Vulnerability Analysis
Strategies (VAS), the Program Checks Analyzer (PCA),
and the Likely Invariants Analyzer (LIA). The AC com-
ponent is responsible for loading, mapping, and system-
atically initiating execution of servlets in a servlet-based
application. As the analyzed application itself, it runs on
top of the JVM implemented by core-JPF and uses sym-
bolic versions of Java libraries.
The other three components are internal to JPF, i.e.,
they are not visible to web applications and do not rely
on model classes. The LIA component is responsible for
parsing Daikon-generated invariants and checking their
truth value as a program executes. The PCA component
keeps track of all the program checks performed by an
application on an execution path. Finally, the VAS com-
ponent provides various strategies for vulnerability de-
tection based on the information provided by LIA and
PCA. We provide more details on how these modules
work in the following sections.
In addition, we had to extend a number of existing JPF
components to address the needs of our analysis. In par-
ticular, we modiﬁed existing search strategies, state in-
formation tracking, and implemented some missing parts
of JPF-SE. Due to space limitations, we will not explain
all of the changes unless they are signiﬁcant for under-
standing our approach.
Finally, we extended JPF with a set of 40 model
classes that provide the servlet API and related inter-
faces (such as the JSP API). These classes implement the
standard functionality of a servlet container, but instead
of reading and writing actual data from/to the network,
they operate on symbolic values. Our implementation is
based on the real implementation of the servlet container
for Tomcat.
4.2.2 Execution Model
To systematically analyze a web application for logic er-
rors, Waler needs to be able to model all possible user in-
teractions with the application. To achieve that, it needs
to ﬁnd all possible entry points to the application and
execute all the possible sequences of invocations using
symbolic input.
In general, a user can interact with a web application
in different ways: one can either follow the links (leading
to URLs) presented by the application (as part of a web
page) or can directly point the browser to a certain URL.
On the server side, after (and if) a request URL is mapped
to a servlet-based application, the path part of the URL