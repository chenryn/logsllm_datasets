#include  
#include  
typedef union 
{ 
        uint64_t i; 
        double  d; 
} uint_double; 
double calculate_machine_epsilon(double start) 
{ 
        uint_double v; 
        v.d=start; 
        v.i++; 
        return v.d-start; 
} 
void main()  
{ 
        printf ("%g\n", calculate_machine_epsilon(1.0)); 
}; 
ARM64 平台的指令不能直接在 FPU 的 D-字头寄存器里进行加法运算。因此输入值首先从 D0 寄存器
复制到 GPR，在那里进行运算并把结果复制给 D1 寄存器，从而在 FPU 里进行减法运算。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 22 章  共用体（union）类型 
351 
指令清单 22.6  Optimizing GCC 4.9 ARM64 
calculate_machine_epsilon: 
        fmov     x0, d0 
; load input value of double type into X0 
        add      x0, x0, 1 ; X0++ 
        fmov     d1, x0 
; move it to FPU register 
        fsub     d0, d1, d0 ; subtract 
        ret 
可见上述 x64 程序使用到了 SIMD 指令。有关介绍请参见本书 27.4 节。 
22.2.3 MIPS 
面向 MIPS 平台的编译器使用 MTC1（Move To Coprocessor 1）指令把 GPR 的数据传递给 FPU 寄存器。 
指令清单 22.7  Optimizing GCC 4.4.5 (IDA) 
calculate_machine_epsilon: 
                mfc1     $v0, $f12 
                or       $at, $zero ; NOP 
                addiu   $v1, $v0, 1 
                mtc1    $v1, $f2 
                jr      $ra 
                sub.s   $f0, $f2, $f12 ; branch delay slot 
22.2.4 本章小结 
本章程序所使用的技巧，在实际程序中出现的几率不大。但是这些技巧可充分演示 IEEE 754 型数据和
C/C++ UNIONS 型数据结构的特点。 
22.3  快速平方根计算 
浮点数解释为整数的另一个著名的算法，是快速平方根计算。 
指令清单 22.8  取自 http://go.yurichev.com/17364 的源代码 
/* Assumes that float is in the IEEE 754 single precision floating point format 
 * and that int is 32 bits. */ 
float sqrt_approx(float z) 
{ 
    int val_int = *(int*)&z; /* Same bits, but as an int */ 
    /* 
     * To justify the following code, prove that 
     * 
     * ((((val_int / 2^m) - b) / 2) + b) * 2^m = ((val_int - 2^m) / 2) + ((b + 1) / 2) * 2^m) 
     * 
     *where 
     * 
     *b = exponent bias 
     * m = number of mantissa bits 
     * 
     * 
     . 
     */ 
    val_int -= 1 >= 1; /* Divide by 2. */ 
    val_int += 1  
 4  #include  
 5 
 6  int comp(const void * _a, const void * _b) 
 7  { 
 8    const int *a=(const int *)_a; 
 9    const int *b=(const int *)_b; 
10 
11    if (*a==*b) 
12      return 0; 
13    else 
14      if (*a < *b) 
15           return -1; 
16       else 
17        return 1; 
18  } 
19 
20  int main(int argc, char* argv[]) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 23 章 函 数 指 针 
353 
21  { 
22    int numbers[10]={1892,45,200,-98,4087,5,-12345,1087,88,-100000}; 
23    int i; 
24 
25   /* Sort the array */ 
26   qsort(numbers,10,sizeof(int),comp) ; 
27   for (i=0;i<9;i++) 
28     printf("Number = %d\n",numbers[ i ]) ; 
29   return 0; 
30  } 
23.1  MSVC 
使用 MSVC 2010（启用选项/Ox/GS-/MD）编译上述程序，可得到下述汇编指令（为了凸出重点而进
行了精简）。 
指令清单 23.1  Optimizing MSVC 2010: /GS- /MD 
__a$ = 8 
; size = 4 
__b$ = 12 
; size = 4 
_comp   PROC 
         mov  
eax, DWORD PTR __a$[esp-4] 
         mov  
ecx, DWORD PTR __b$[esp-4] 
         mov  
eax, DWORD PTR [eax] 
         mov  
eax, DWORD PTR [ecx] 
         cmp  
eax, ecx 
         jne  
SHORT $LN4@comp 
         xor  
eax, eax 
         ret  
0 
$LN4@comp: 
         xor  
edx, edx 
         cmp  
eax, ecx 
         setge 
dl 
         lea  
eax, DWORD PTR [edx+edx-1] 
         ret  
0 
_comp ENDP 
_numbers$ = -40  
; size = 40 
_argc$ = 8  
; size = 4 
_argv$ = 12  
; size = 4 
_main   PROC 
         sub  
esp, 40 
; 00000028H 
         push 
esi 
         push 
OFFSET _comp 
         push 
4 
         lea  
eax, DWORD PTR _numbers$[esp+52] 
         push 
10 
; 0000000aH 
         push 
eax 
         mov  
DWORD PTR _numbers$[esp+60], 1892 
; 00000764H 
         mov  
DWORD PTR _numbers$[esp+64], 45  
; 0000002dH 
         mov  
DWORD PTR _numbers$[esp+68], 200 
; 000000c8H 
         mov  
DWORD PTR _numbers$[esp+72], -98 
; ffffff9eH 
         mov  
DWORD PTR _numbers$[esp+76], 4087 
; 00000ff7H 
         mov  
DWORD PTR _numbers$[esp+80], 5 
         mov  
DWORD PTR _numbers$[esp+84], -12345 ; ffffcfc7H 
         mov  
DWORD PTR _numbers$[esp+88], 1087 
; 0000043fH 
         mov  
DWORD PTR _numbers$[esp+92], 88  
; 00000058H 
         mov  
DWORD PTR _numbers$[esp+96], -100000 ; fffe7960H 
         call  
_qsort 
         add  
esp, 16 
; 00000010H 
… 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
354 
逆向工程权威指南（上册） 
这个程序没有特殊之处。在传递第四个参数时，传递的是标签_comp 的地址。该地址正是 comp()函数
的第一条指令的内存地址。 
qsort()函数又是如何调用 comp()函数的？ 
qsort()函数位于 MSVCR80.DLL（含有 C 函数标准库的 MSVC DLL）中。我们来分析这个文件中的具
体指令。 
指令清单 23.2  MSVCR80.DLL 
.text:7816CBF0 ; void __cdecl qsort(void *, unsigned int, unsigned int, int (__cdecl *)(const  
     void *, const void *)) 
.text:7816CBF0  
     public _qsort 
.text:7816CBF0 _qsort  
     proc near 
.text:7816CBF0 
.text:7816CBF0 lo 
     = dword ptr -104h 
.text:7816CBF0 hi 
     = dword ptr -100h 
.text:7816CBF0 var_FC  
     = dword ptr -0FCh 
.text:7816CBF0 stkptr  
     = dword ptr -0F8h 
.text:7816CBF0 lostk  
     = dword ptr -0F4h 
.text:7816CBF0 histk  
     = dword ptr -7Ch 
.text:7816CBF0 base 
     = dword ptr  4 
.text:7816CBF0 num 
     = dword ptr  8 
.text:7816CBF0 width  
     = dword ptr  0Ch 
.text:7816CBF0 comp 
     = dword ptr  10h 
.text:7816CBF0 
.text:7816CBF0  
     sub      esp, 100h 
 … 
.text:7816CCE0 loc_7816CCE0: 
; CODE XREF: _qsort+B1 
.text:7816CCE0  
     shr      eax, 1 
.text:7816CCE2  
     imul     eax, ebp 
.text:7816CCE5  
     add      eax, ebx 
.text:7816CCE7  
     mov      edi, eax 
.text:7816CCE9  
     push     edi 
.text:7816CCEA  
     push     ebx 
.text:7816CCEB  
     call     [esp+118h+comp] 
.text:7816CCF2  
     add      esp, 8 
.text:7816CCF5  
     test     eax, eax 
.text:7816CCF7  
     jle      short loc_7816CD04 
MSVCR80.DLL 中的 comp 参数，是传递给 qsort()函数的第四个参数。在执行 qsort()的过程中，系统会
把控制权传递给 comp 参数指向的函数指针的地址。在调用它之前，comp()函数所需的两个参数已经传递
到位。在执行它之后，排序已经完成。 
可见，函数指针十分危险。首先，如果传递给 qsort()函数的函数指针有误，那么 qsort()函数仍然会把
控制权传递给错误的指针地址，届时程序多半将会崩溃，而且人工排错很难发现问题所在。 
其次，callback 函数必须严格遵守调用规范。无论是函数不当、参数不当还是数据类型不当，都会引
发严重的问题。相比之下，关键问题并不是程序是否会崩溃，而是排查程序崩溃的手段是什么。在编译器
处理函数指针的时候，它不会对潜在问题进行任何提示。 
23.1.1  MSVC+OllyDbg 
我们使用 OllyDbg 加载这个程序，并在首次调用 comp()函数的地址设置断点。 
图 23.1 所示为程序首次调用 comp()函数时的情况。OllyDbg 在代码窗口下显示出被比较的两个值。此
时 SP 指向 RA，即 qsort()函数的地址（实际上是 MSVCR100.DLL 内部的地址）。 
在程序运行完 RETN 指令之前，我们一直按 F8 键，等待它进入 qsort()函数，如图 23.2 所示。 
程序将再次调用比较函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权