Such situations can occur due to errors on the server or the network, to name
a few.
With Cypress, we can easily simulate error situations.
Below are examples of tests for server and network errors.
```javascript
context('Errors', () => {
  const errorMsg = 'Oops! Try again later'
  it('simulates a server error', () => {
    cy.intercept(
      'GET',
      '**/search?query=cypress',
      { statusCode: 500 }
    ).as('getServerFailure')
    cy.visit('https://example.com/search')
    cy.get('[data-cy="search-field"]')
      .should('be.visible')
      .type('cypress{enter}')
    cy.wait('@getServerFailure')
    cy.contains(errorMsg)
      .should('be.visible')
  })
  it('simulates a network failure', () => {
    cy.intercept(
      'GET',
      '**/search?query=cypressio',
      { forceNetworkError: true }
    ).as('getNetworkFailure')
    cy.visit('https://example.com/search')
    cy.get('[data-cy="search-field"]')
      .should('be.visible')
      .type('cypressio{enter}')
    cy.wait('@getNetworkFailure')
    cy.contais(errorMsg)
      .should('be.visible')
  })
})
```
In the above tests, the HTTP request of type GET to the search endpoint is
intercepted. In the first test, we use the `statusCode` option with the value
`500`. In the second test, we use the `forceNewtworkError` option with the value
of `true`. After that, you can test that the correct message is visible to the
user.
## [Sending different responses](https://glebbahmutov.com/blog/cypress-intercept-problems/#sending-different-responses)
To return different responses from a single `GET /todos` intercept, you can
place all prepared responses into an array, and then use Array.prototype.shift
to return and remove the first item.
```javascript
it('returns list with more items on page reload', () => {
  const replies = [{ fixture: 'articles.json' }, { statusCode: 404 }]
  cy.intercept('GET', '/api/inbox', req => req.reply(replies.shift()))
})
```
## [Component testing](https://docs.cypress.io/guides/component-testing/introduction)
Component testing in Cypress is similar to end-to-end testing. The notable differences are:
* There's no need to navigate to a URL. You don't need to call `cy.visit()` in
your test.
* Cypress provides a blank canvas where we can `mount` components in isolation.
For example:
```javascript
import { mount } from '@cypress/vue'
import TodoList from './components/TodoList'
describe('TodoList', () => {
  it('renders the todo list', () => {
    mount()
    cy.get('[data-testid=todo-list]').should('exist')
  })
  it('contains the correct number of todos', () => {
    const todos = [
      { text: 'Buy milk', id: 1 },
      { text: 'Learn Component Testing', id: 2 },
    ]
    mount()
    cy.get('[data-testid=todos]').should('have.length', todos.length)
  })
})
```
If you are using Cypress Component Testing in a project that also has tests
written with the Cypress End-to-End test runner, you may want to [configure some
Component Testing specific defaults](#configure-component-testing).
!!! warning "It doesn't yet work with vuetify"
### Install
Run:
```bash
npm install --save-dev cypress @cypress/vue @cypress/webpack-dev-server webpack-dev-server
```
You will also need to configure the component testing framework of your choice
by installing the corresponding component testing plugin.
```javascript
// cypress/plugins/index.js
module.exports = (on, config) => {
  if (config.testingType === 'component') {
    const { startDevServer } = require('@cypress/webpack-dev-server')
    // Vue's Webpack configuration
    const webpackConfig = require('@vue/cli-service/webpack.config.js')
    on('dev-server:start', (options) =>
      startDevServer({ options, webpackConfig })
    )
  }
}
```
### Usage
```javascript
// components/HelloWorld.spec.js
import { mount } from '@cypress/vue'
import { HelloWorld } from './HelloWorld.vue'
describe('HelloWorld component', () => {
  it('works', () => {
    mount(HelloWorld)
    // now use standard Cypress commands
    cy.contains('Hello World!').should('be.visible')
  })
})
```
You can pass additional styles, css files and external stylesheets to load, see
docs/styles.md for full list.
```javascript
import Todo from './Todo.vue'
const todo = {
  id: '123',
  title: 'Write more tests',
}
mount(Todo, {
  propsData: { todo },
  stylesheets: [
    'https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.css',
  ],
})
```
## [Visual testing](https://docs.cypress.io/guides/tooling/visual-testing#Functional-vs-visual-testing)
Cypress is a functional Test Runner. It drives the web application the way
a user would, and checks if the app functions as expected: if the expected
message appears, an element is removed, or a CSS class is added after the
appropriate user action. Cypress does NOT see how the page actually looks though.
You could technically write a functional test asserting the CSS properties using
the have.css assertion, but these may quickly become cumbersome to write and
maintain, especially when visual styles rely on a lot of CSS styles.
Visual testing can be done through plugins that do visual regression testing,
which is to take an image snapshot of the entire application under test or
a specific element, and then compare the image to a previously approved baseline
image. If the images are the same (within a set pixel tolerance), it is
determined that the web application looks the same to the user. If there are
differences, then there has been some change to the DOM layout, fonts, colors or
other visual properties that needs to be investigated.
If you want to test if your app is responsive use
[parametrization](#parametrization) to have maintainable tests.
For more information on how to do visual regression testing read [this
article](https://medium.com/norwich-node-user-group/visual-regression-testing-with-cypress-io-and-cypress-image-snapshot-99c520ccc595).
As of 2022-04-23 the most popular tools that don't depend on third party servers are:
* [cypress-plugin-snapshots](https://github.com/meinaart/cypress-plugin-snapshots):
    It looks to be the best plugin as it allows you to update the screenshots
    directly through the Cypress interface, but it is [unmaintained](https://github.com/meinaart/cypress-plugin-snapshots/issues/210)
* [cypress-visual-regression](https://github.com/mjhea0/cypress-visual-regression):
    Maintained but it doesn't show the differences in the cypress interface and
    you have to interact with them through the command line.
* [cypress-image-snapshot](https://github.com/jaredpalmer/cypress-image-snapshot):
    Most popular but it looks unmaintained
    ([1](https://github.com/jaredpalmer/cypress-image-snapshot/issues/231),
    [2](https://github.com/jaredpalmer/cypress-image-snapshot/issues/247))
Check the [Visual testing plugins
list](https://docs.cypress.io/plugins/directory#visual-testing) to see all
available solutions. Beware of the third party solutions like  [Percy](https://percy.io/)
and [Applitools](https://applitools.com/cypress/) as they send your pictures to
their servers on each test.
### `cypress-visual-regression`
#### Installation
```bash
npm install --save-dev cypress-visual-regression
```
Add the following config to your `cypress.json` file:
```json
{
  "screenshotsFolder": "./cypress/snapshots/actual",
  "trashAssetsBeforeRuns": true
}
```
Add the plugin to `cypress/plugins/index.js`:
```javascript
const getCompareSnapshotsPlugin = require('cypress-visual-regression/dist/plugin');
module.exports = (on, config) => {
  getCompareSnapshotsPlugin(on, config);
};
```
Add the command to `cypress/support/commands.js`:
```javascript
const compareSnapshotCommand = require('cypress-visual-regression/dist/command');
compareSnapshotCommand();
```
Make sure you import `commands.js` in `cypress/support/index.js`:
```javascript
import './commands'
```
#### Use
Add `cy.compareSnapshot('home')` in your tests specs whenever you want to test
for visual regressions, making sure to replace home with a relevant name. You
can also add an optional error threshold: Value can range from 0.00 (no
difference) to 1.00 (every pixel is different). So, if you enter an error
threshold of 0.51, the test would fail only if > 51% of pixels are different. For example:
```javascript
it('should display the login page correctly', () => {
  cy.visit('/03.html');
  cy.get('H1').contains('Login');
  cy.compareSnapshot('login', 0.0);
  cy.compareSnapshot('login', 0.1);
});
```
You can target a single HTML element as well:
```javascript
cy.get('#my-header').compareSnapshot('just-header')
```
Check more examples [here](https://github.com/mjhea0/cypress-visual-regression/blob/master/docker/cypress/integration/main.spec.js)
You need to take or update the base images, do it with:
```bash
npx cypress run \
    --env type=base \
    --config screenshotsFolder=cypress/snapshots/base,testFiles=\"**/*regression-tests.js\"
```
To find regressions run:
```bash
npx cypress run --env type=actual
```
Or if you want to just check a subset of tests use:
```bash
npx cypress run --env type=actual --spec "cypress\integration\visual-tests.spec.js"
npx cypress run --env type=actual --spec "cypress\integration\test1.spec.js","cypress\integration\test2.spec.js"
npx cypress run --env type=actual --spec "cypress\integration\**\*.spec.js
```
## Third party component testing
Other examples of testing third party components
* [Testing HTML emails](https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/)
# [Configuration](https://docs.cypress.io/guides/references/configuration)
Cypress saves it's configuration in the `cypress.json` file.
```javascript
{
  "baseUrl": "http://localhost:8080"
}
```
Where:
* `baseUrl`: Will be prefixed on `cy.visit()` and `cy.requests()`.
## [Environment variables](https://docs.cypress.io/guides/guides/environment-variables#Setting)
Environment variables are useful when:
* Values are different across developer machines.
* Values are different across multiple environments: (dev, staging, qa, prod).
* Values change frequently and are highly dynamic.
Instead of hard coding this in your tests:
```javascript
cy.request('https://api.acme.corp') // this will break on other environments
```
We can move this into a Cypress environment variable:
```javascript
cy.request(Cypress.env('EXTERNAL_API')) // points to a dynamic env var
```
Any key/value you set in your configuration file under
the `env` key will become an environment variable.
```json
{
  "projectId": "128076ed-9868-4e98-9cef-98dd8b705d75",
  "env": {
    "login_url": "/login",
    "products_url": "/products"
  }
}
```
To access it use:
```javascript
Cypress.env() // {login_url: '/login', products_url: '/products'}
Cypress.env('login_url') // '/login'
Cypress.env('products_url') // '/products'
```
## Configure component testing
You can configure or override Component Testing defaults in your configuration
file using the `component` key.
```javascript
{
  "testFiles": "cypress/integration/*.spec.js",
  "component": {
    "componentFolder": "src",
    "testFiles": ".*/__tests__/.*spec.tsx",
    "viewportHeight": 500,
    "viewportWidth": 700
  }
}
```
# [Debugging](https://docs.cypress.io/guides/guides/debugging#What-you-ll-learn)
## Using the debugger
Use the `.debug()` command directly BEFORE the action.
```javascript
// break on a debugger before the action command
cy.get('button').debug().click()
```
## Step through test commands
You can run the test command by command using the `.pause()` command.
```javascript
it('adds items', () => {
  cy.pause()
  cy.get('.new-todo')
  // more commands
})
```
This allows you to inspect the web application, the DOM, the network, and any
storage after each command to make sure everything happens as expected.
# Issues
* [Allow rerun only failed
    tests](https://github.com/cypress-io/cypress/issues/4886): Until it's ready
    use `it.only` on the test you want to run.
# References
* [Home](https://www.cypress.io/)
* [Git](https://github.com/cypress-io/cypress)
* [Examples of usage](https://github.com/cypress-io/cypress-example-recipes#logging-in-recipes)
* [Cypress API](https://docs.cypress.io/api/table-of-contents)
* [Real World Application Cypress testing example](https://github.com/cypress-io/cypress-realworld-app)
* [Tutorial on writing
    tests](https://docs.cypress.io/guides/getting-started/writing-your-first-test)
* [Video tutorials](https://docs.cypress.io/examples/examples/tutorials)