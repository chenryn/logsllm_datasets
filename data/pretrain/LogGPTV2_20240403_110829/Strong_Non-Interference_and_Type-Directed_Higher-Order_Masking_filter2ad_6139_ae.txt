0.08s
0.08s


0.07s
0.09s
–
–
–
–
–
–

–
–
of two encodings; RefreshA, the weakly secure mask refreshing algorithm from Rivain
and Prouff [31]; RefreshIterk, the iterated additive refresh proposed by Coron [12, Alg. 4]
for supporting more efﬁcient composition in his full model (we make explicit the number
of iterations k); WeakMult, the generic reduced-randomness multiplication algorithm
proposed by Bela¨ıd et al. [8]. Table 1 sums up our ﬁndings and some veriﬁcation
statistics.
8 Masking Transformation
As a proof of concept, we implement our type system for a comfortable subset of C that
includes basic operators, static for loops, table lookups at public indices, and mutable
secret state, and extended with libraries that implement core gadgets for some choices of
K. Moreover, we deﬁne a source-to-source certifying masking transformation, which
takes an unprotected program and returns a masked algorithm accepted by our type
system, selectively inserting refreshing gadgets as required for typing to succeed. We
note that the transformation itself need not be trusted, since its result is the ﬁnal program
on which typing is performed.
Furthermore, the choice of C as a supporting language is for convenience, since
many of the algorithms we consider have reference implementations written in C. In
particular, we do not claim that compiling and executing the C programs produced by
our masking transformation will automatically yield secure executables: our veriﬁcation
results are on algorithms described in the C language rather than on C programs in
general. Making use of these veriﬁcation results in practice still requires to take into
account details not taken into account in the probing model. Although an important
problem, this is out of the scope of this paper and a research area on its own: for example
Balasch et al. [2] consider some of the issues involved in securely implementing probing
secure algorithms.
8.1
Implementation
We now give an overview of the different passes performed by our masking transforma-
tion. The input programs use explicit typing annotations to distinguish public variables
(for example, public inputs, or public loop indices) from sensitive or secret variables
that must be encoded. We call public type any type outside of those used for denoting
variables that must be encoded.
Parsing and Pre-Typing This pass parses C code into our internal representation, checks
that the program is within the supported subset of C, performs C type-checking and
checks that variables marked as sensitive (variables given type K) are never implicitly
cast to public types. Implicit casts from public types to K (when compatible, for example,
when casting a public uint8 t to a protected variable in GF(28)) are replaced with
public encoding gadgets (that set one share to the public value and all other shares to 0).
Gadget Selection and Generic Optimizations This pass heuristically selects optimal
gadgets depending on their usage. For example, multiplication of a secret by a public
value can be computed by an afﬁne gadget that multiplies each share of the secret,
whereas the multiplication of two secrets must be performed using the SecMult gadget.
Further efforts in formally proving precise types for specialized core gadgets may
also improve this optimization step. Since the encoding replaces scalar-typed variables
(passed by value) with array-typed variables (passed by reference), it is also necessary
to slightly transform the program to ensure the correctness of the resulting program. In
addition, we also transform the input program into a form that more closely follows the
abstract language from Figure 1, which makes it easier to type-check.
Type Inference and Refresh Insertion This is the core of our transformation. We imple-
ment a type inference algorithm for the type system of Section 6. The algorithm simpliﬁes
policies on the ﬂy, supports inferred types on sub-algorithms as gadget-invocation types,
and fails when the simpliﬁed policy is inconsistent. Failure arises exactly when a refresh-
ing operation is needed. At the cost of tracking some more information and reinforcing
the typing constraint on sub-algorithms, we use this observation to automatically insert
Refresh gadgets where required. When type inference fails, the variable whose masks
need to be refreshed is duplicated and one of its uses is replaced with the refreshed
duplicate. To avoid having to re-type the entire program after insertion of a refresh
gadget, our transformation keeps track of typing information for each program point
already traversed and simply rewinds the typing to the program point immediately after
the modiﬁcation.
Code Generation Finally, once all necessary mask refreshing operations have been
inserted and the program has been type-checked, we produce a masked C program. This
transformation is almost a one-to-one mapping from the instructions in the type-checked
programs to calls to a library of veriﬁed core gadgets or to newly deﬁned gadgets. Some
cleanup is performed on loops to clarify the ﬁnal code whenever possible, and to remove
initialization code on normalized gadgets. Interestingly, our transformation produces
a (set of) C ﬁles that is parameterized by the masking order t. Producing executable
versions of that algorithm at a particular order, for example to evaluate its performance,
is as easy as deﬁning a pre-processor macro at compile-time.
8.2 Practical Evaluation
To test the effectiveness of our transformation, we apply it to different algorithms,
generating equivalent masked algorithms at various orders. We apply our transformation
to the following programs: AES ((cid:12)), a full computation (10 rounds including key
schedule) of AES-128 masked using the multiplication gadget, and implemented in
GF(28); AES (x (cid:12) g(x)), a full computation (10 rounds including key schedule) of
AES-128 masked using Coron et al.’s gadget for computing x (cid:12) g(x), and implemented
in GF(28); Keccak, a full computation (24 rounds) of Keccak-f[1600], implemented
in GF(264); Simon, a block of Simon(128,128), implemented in GF(264); Speck, a
block of Speck(128,128), implemented in GF(2)64, and using one of the following
modular addition algorithms; AddLin, Coron, Großsch¨adl and Vadnala’s algorithm [14]
for the computation of modular addition on boolean-masked variables (in GF(2)64);
AddLog, Coron et al.’s improved algorithm [13] for the computation of modular addition
on boolean-masked variables (in GF(2)64). We ﬁrst discuss the performance of our
veriﬁer and the veriﬁcation results before discussing the practical signiﬁcance, in terms
of time, memory and randomness complexity of our masking transformation. Finally,
we discuss examples on which our tool implementation could be improved.
Veriﬁcation Performance and Results Table 2 shows resource usage statistics for gener-
ating the masked algorithms (at any order) from unprotected implementations of each
algorithm. The table shows the number of mask refreshing operations inserted in the
program12, the compilation time, and the memory consumption. For Keccak, we show
two separate sets of ﬁgures: the ﬁrst, marked “no refresh”, is produced by running our
algorithm transformer on a bare implementation of the algorithm; the second, marked
“refresh in χ”, is produced by running our tool on an annotated implementation, where
a mask refreshing operation is manually inserted in the χ function and the tool used
for veriﬁcation only. We discuss discrepancies between the numbers on these two lines
in Section 9, and consider the “refresh in χ” set of statistics in all discussions until
then. We ﬁrst note the signiﬁcant improvements these results represent over the state
of the art in formal veriﬁcation for probing security. Indeed, our closest competitor [4]
report the veriﬁcation of all 10 rounds of AES (including key schedule) at order 1 in
10 minutes, and could not verify all 10 rounds for higher orders. In contrast, our tool
veriﬁes the probing security of Rivain and Prouff’s algorithm [31] as ﬁxed by Coron et
al. [15] at all orders in less than a second.13 Further, we note that the masked algorithms
our transformation produce for modular addition are the ﬁrst such algorithms known
to be t-probing secure using only t + 1 shares. Indeed, the original proofs [14,13] rely
on the ISW framework and make use of 2t + 1 shares to obtain t-probing security. We
further note that Coron, Großsch¨adl and Vadnala’s algorithm [14] does not require the
insertion of mask refreshing operations, and is thus t-probing secure with t + 1 shares
as it was originally described. Finally, we note that, to the best of our knowledge, the
12 Note that the number of mask refreshing operations executed during an execution of the
algorithm may be much greater, since the sub-procedure in which the insertion occurs may be
called multiple times.
13 This excludes the once-and-forall cost of proving the security of core gadgets.
results obtained on Keccak, Simon and Speck constitute the ﬁrst generic higher-order
masking schemes for these algorithms.
Algorithm
AES ((cid:12))
AES (x (cid:12) g(x))
AddLin
AddLog
Keccak (no refresh)
Keccak (refresh in χ)
Simon
Speck (AddLin)
Speck (AddLog)
0
0
# Refresh
2 per round
Time Mem.
0.09s
4MB
4MB
0.05s
4MB
0.01s
log2(k) − 1
0.01s
4MB
1 per round ∼20min 23GB
18.20s 456MB
15MB
38MB
8MB
67 per round 0.38s
61 per round 0.35s
66 per round 0.21s
0
Table 2: Resource usage during masking and veriﬁcation
Performance of Masked Algorithms Table 3 reports the time taken to execute the resulting
programs 10,000 times at various orders on an Intel(R) Xeon(R) CPU E5-2667 0 @
2.90GHz with 64GB of memory running Linux (Fedora). As an additional test to assess
the performance of the generated algorithms at very high orders, we masked an AES
computation at order 100: computation took ∼0.11 seconds per block. For AES and
Speck, the ﬁgures shown in the “unmasked” column are execution times for the input to
our transformation: a table-based implementation of AES or an implementation of Speck
that uses machine arithmetic, rather than Coron, Großsch¨adl and Vadnala’s algorithm
would be much faster, but cannot be masked directly using our transformation. Although
these observations do highlight the cost of security, we note that using RefreshA when
masking the AES SBox does not incur a signiﬁcant timing gain for any of the masking
orders we tested (t ≤ 20). However, the randomness cost is greatly reduced, which may
be signiﬁcant in hardware or embedded software settings. Further research in reducing
the randomness cost of SNI mask refreshing, or of other gadgets, serves to make security
less costly [8,1,6]. We also conﬁrm the 15% timing improvements reported by Coron et
al. [15] when implementing the AES SBox using their gadget for computing x (cid:12) g(x).
Algorithm
AES ((cid:12))
AES (x (cid:12) g(x))
unmasked Order 1 Order 2 Order 3 Order 5 Order 10 Order 15 Order 20
2.697s 3.326s 4.516s 8.161s 21.318s 38.007s 59.567s
2.278s 3.209s 4.368s 7.707s 17.875s 32.552s 50.588s
1.572s 3.057s 5.801s 13.505s 42.764s 92.476s 156.050s
0.279s 0.526s 0.873s 1.782s
11.551s 20.140s
Speck (AddLin)
4.361s 10.281s 20.053s 47.389s 231.423s 357.153s 603.261s
Speck (AddLog)
0.529s 1.231s 2.258s
72.358s
Table 3: Time taken by 10,000 executions of each program at various masking orders
0.078s
0.078s
0.238s
0.053s
0.022s
0.022s
Keccak
Simon
6.136s
5.621
19.991s
42.032
We now look more closely at statistics for the modular addition algorithms AddLin
and AddLog and their effects on the performance of masked algorithms for Speck. We
ﬁrst note that proving AddLog t-NI requires the addition of a mask refreshing gadget,
whereas AddLin does not. Despite this additional cost, however, AddLog is better than
AddLin when word size k grows, since it saves k − log(k) multiplications and replaces
them with a single mask refreshing operation. These performance gains on modular
addition become overwhelming when seen in the context of a masked algorithm for
Speck, which computes one 64-bit modular addition per round. It would be interesting to
consider using our transformer to produce masked algorithms for other efﬁcient circuits
for modular addition [26] and measure their performance impact in terms of randomness,
time and memory when masked.
9 Discussions and Related Work
Here, we further discuss the relation between the deﬁnitions and results reported here
and existing and future work in theoretical and practical cryptography. Our discussions
focus mainly on: i. adversary and leakage models; ii. compositional security notions;
iii. theoretical and practical masking transformations; and iv. limitations of our deﬁnitions
and tools.
Adversary and Leakage Models for Masking We have considered security in the probing
model of Ishai, Sahai and Wagner [24], which is particularly well-suited to automated
analysis due to its tight relation to probabilistic non-interference. In particular, our notion
of t-NI is equivalent to the notions of t-probing security and perfect t-probing security
used by Carlet et al. [10] and others [31,15].
Despite its broad usage in the literature, the practical relevance of the probing
model is not immediately obvious: in practice, side-channel adversaries observe leakage
traces, which contain noisy information about all intermediate computations, rather than
precise information about some. This threat model is much more closely captured by the
noisy leakage model, ﬁrst introduced by Chari et al. [11] and extended by Prouff and