we examined can be detected using at least one of these
approaches. In Table V, we show the results of 8 examples,
which reveal different aspects of a user,
including sexual
orientation (Hornet), health condition (AsthmaMD), age and
education (Ready4SAT), marital status (DivorceForce), drug
condition (Weedmaps), etc.
2) Other attack targets: The fileExistsAtPath tim-
ing channel is capable of extracting other information. For ex-
ample, iOS stores photos and video clips in ﬁxed paths and pre-
dictable names (i.e., APPLE/IMG_.,
where  is an integer starting from 100 and 
starts from 0001). Enumerating all possible combinations only
11
Description
HIV dating app for HIV positive singles
Asthma activity tracking & visualization
Social network for gay men
Pregnancy & baby developing tracker
App Name
Hzone
AsthmaMD
Hornet
Pregnancy+
Sugar Sense Diabetes app to track blood sugar level
Weedmaps
Ready4SAT
DivorceForce Community of those affected by divorce
A B
 
 
 
 
 
Marijuana directory and discovery source  
Preparation for the SAT test
 
 
TABLE V: Examples of sensitive apps. A: requesting push
notiﬁcations; B: dynamically registering quick actions.
needs a few seconds. Also, the pre-installed Voice Memos app
records speeches and conversations and names the recordings
using , which is the time of recording that
is accurate to a second. In our experiment, we found that
enumerating each second of one year (e.g., 2016) only take 80
minutes on an iPhone 7. Therefore, the same timing channel
can be used to learn the number of photos/videos/memos of
the user, and also infer the timestamps that memos were taken.
VII. PRACTICAL ISSUES
In this section, we discuss several issues in practical side-
channel attacks, and how we addressed them in our work.
A. Run Background Apps on iOS
To be able to run in the background, an app needs to specify
one of the nine “Background Modes” [5] (e.g., Audio, VoIP,
Location updates, etc) in its Info.plist ﬁle. When
it is launched for the ﬁrst time, it will explicitly ask for the
user’s permission to run in the background. Some background-
mode permissions (e.g., Location updates) will need the
user to explicitly grant permission every now and then.
To periodically (in our experiments every 1ms) invoke
our monitoring thread in the background with ﬁxed intervals,
we used the NSTimer class, which can be used to
create a timer object
that expires after a certain time
interval has elapsed, and sends a speciﬁed message to
a target object
In particular, we used [NSTimer
scheduledTimerWithTimeInterval: target:
selector: userInfo: repeats:] API
to schedule
the timer to execute our monitoring process in a ﬁxed interval.
Our experiments show that with an Audio background
permission, our monitoring app can keep running and
periodically invoke monitoring thread in the background to
sample the features.
[13].
B. App Store Vetting
We submitted a monitoring app that is able to conduct
all the aforementioned side-channel attacks to the App Store
for vetting. The app is disguised as an Audio Player, which
requires the Audio Background Mode for running in the back-
ground. The app collects all the 6 features from Table I. The
sampling rate of each feature is about 1000/s. We also included
the code for conducting fileExistsAtPath timing chan-
nel attacks in the monitoring app. Our app successfully passed
the vetting, which indicates that these codes are not considered
as malicious by Apple. After our app was approved by Apple,
we downloaded the app and withdrew it immediately.
C. Background Noise
Intuitively, because most of our attacks exploit global
statistic information of the system resources, our attacks may
be fragile. However,
in the presented attacks, we did not
intentionally clean up the background apps, but the noise in
our collected traces remains manageable using our machine
learning frameworks. This is because iOS itself suspends apps
when they run in the background, unless the app specially
requests background permissions. Therefore, iOS devices
are relatively quieter than Android devices, which greatly
facilitates side-channel attacks.
(a) Classiﬁcation.
(b) Pattern matching.
Fig. 9: Cross-device evaluation.
D. Cross-device Attack Feasibility
E. Power Consumption
To demonstrate the practicality of our attacks, we manually
collected traces on another non-jailbroken iPhone 7 running
iOS 10.2.1. Then, we use previously collected data as training
set (for classiﬁcation) or signature (for pattern matching) to
re-evaluate the attacks. To make sure the sampling rate on
different devices and different iOS versions remain the same
(about 1000 times/s), our monitoring app self-adjusts the
sampling interval (speciﬁed using NSTimer) the ﬁrst time
it runs in the background.
1) Classiﬁcation: We randomly selected 20 third-party
apps from the 100 apps we used in Sec. IV. Then we manually
collected 10 traces of the app launching process for each of
them to construct a new test set, so this new test set contains
200 traces. Then, we used previous training set as mentioned
in Sec. IV and repeated the evaluation. Fig. 9a shows that
the performance of the classiﬁer drops only slightly: 80.5%
accuracy with Top 1 result, 91.5% accuracy for Top 3, and
95.0% for Top 5. It is worth noting that the training traces
were collected 20 days before the new test set on a different
device with a different iOS version. Moreover, some of the 20
apps have been updated during the time period. For instance,
Blockchain Wallet has been updated, but we are still able to
detect the launching process of it with high conﬁdence (90%
Top 1 accuracy for this app).
2) Pattern Matching: We recollected traces of 11 ma-
jor activities in Blockchain Wallet, 5 traces each. We ran-
domly selected 5 previously-collected traces of each activity
(Sec. V-B1) as the signature traces, and used the similar
method to draw a heatmap (Fig. 9b). This time, x-axis means
non-jailbroken (testing) device, and y-axis means jailbroken
(training) device. We normalized the distance per row using
cell(i, j) as the base (wk in Sec. V-A), so that each diag-
onal value is 1. From Fig. 9b, we can clearly see that the
make-payment(0) and return-to-home-screen(10)
and activity can be clearly distinguished. Some activities
are not so distinguishable (e.g., menu-settings(7) and
menu-backupfunds(2)) because these activities consist of
common sub-activities (i.e., clicking the menu button).
From these experiments, we show that our demonstrated
attacks are robust enough to be trained on a device owned by
the attacker and then tested using the data collected from the
victim’s device. Minor differences in the iOS versions and app
versions can also be tolerated.
We evaluated the power consumption of the monitoring
app when collecting side-channel data. Speciﬁcally, we ran
the experiment on a jailbroken iphone7 with iOS 10.1.1. The
phone was fully charged before the experiment. It ran in the
foreground and read the APIs 1000 times per second. This
setup over-approximates its power consumption when it runs
in the background. The monitoring app called [UIDevice
batteryLevel] every 1 minute to keep track of the re-
maining battery level. After 60 minutes, only 5% of battery was
consumed, i.e., less than 1% per 10 minutes. The experiment
suggests that the monitoring app will not drain the battery
much faster than regular apps.
F. Execution Time of Machine Learning Algorithms
We evaluated the execution time of these algorithms with
the experiment data used in Sec. IV-B1. Our original data
contains 960 training samples; each sample has 6 time series;
and each time series consists of 5000 data points. To compare
the performance of these two algorithms, we report in Table VI
the execution time of classifying one test trace using these
two algorithms when each time series has 50, 500, 5000 data
points, and when the training set is composed of 480 or 960
training samples. Note that the kNN algorithm does not have
a training phase. It compares each testing sample with all
training samples to calculate the distance. From the table, we
can see the execution time of kNN algorithm is linear to the
number of training samples. The SVM algorithm has separated
training and testing phases. It is the execution time of the
testing phase that is of interest (reported in Table VI). The
execution time of SAX+BOP+SVM algorithm is signiﬁcantly
shorter than kNN in our case; when the trace has 5000
data points, the kNN algorithm took too long to complete.
Therefore, the classiﬁcation framework presented in Sec. IV-A
is much more efﬁcient.
In contrast, the reason for selecting kNN+DTW algorithm
for the pattern matching task in Sec. V is that the number
of in-app activities for each app is small (e.g., 11 in both
Blockchain wallet and Venmo) and the number of data points
are fewer (e.g., on average 30.54 data points in our experi-
ments). To compute the distance using the multi-dimensional
DTW algorithm (with the 4 VM features) between two traces,
the average execution time was only 0.03 second.
12
12345Top N Result020406080100Accuracy (%)012345678910Non-jailbroken Device012345678910Jailbroken Device1.041.121.201.281.361.441.521.60data points
classiﬁer
480 training samples
960 training samples
50
SVM
0.07
0.08
kNN
48
94
500
SVM
0.11
0.13
kNN
536
1095
5000
kNN
—
—
SVM
0.15
0.17
TABLE VI: Execution time comparison (in seconds).
VIII. COUNTERMEASURES
We formulated the following countermeasures and dis-
cussed them with a group of Apple engineers who were
assembled speciﬁcally to address our attacks in iOS.
• Eliminating the attack vectors. Removing the APIs that lead
to information leakage will completely eliminate the threats.
However, as stated in Sec. III, among the 7,418 iOS apps we
statically analyzed, host_statistics64() is probably
used by about 1,230 apps and getifaddrs() is potentially
used by 3,955 apps. Eliminating such widely used APIs may
cause signiﬁcant compatibility issues. This concern has also
been conﬁrmed by Apple engineers, who believed it is difﬁcult
to simply remove these APIs from iOS because they are used
by some high-proﬁle apps.
• Rate limiting. In our (ﬁrst two categories of) attacks, the
monitoring app calls the APIs at a rate of 1000 times per
second. It is intuitive that by limiting the rate at which an
app can query the sensitive APIs, most applications may still
work while the attacks can be mitigated. We envision rating
limiting can be implemented by caching the return values in the
kernel and updating the cached value only N times per second.
Then in our experiments, every (1000/N )th data point of our
original data is preserved. To evaluate the effectiveness of these
methods, we ﬁltered data points accordingly for both training
and testing, and then repeated the experiments in Sec. IV-B1.
The top 1, 2, and 3 classiﬁcation accuracy with the maximum
sample rate of 5, 10, 100, 500, and 1000 per second are shown
in Fig. 10a. From the ﬁgure we can see that a sample rate of 10
per second is still high enough to conduct side-channel attacks,
with top 1 accuracy of 69.6% and top 3 accuracy of 78.3%.
This result also suggest our classiﬁcation framework remains
robust even with less data. The effectiveness of the attacks
decreases dramatically when the sample rate drops to 5/s,
however. We have discussed these ideas and results with Apple
and were informed that rate limiting has been implemented in
iOS 11.1 for host_statistics64(), as well as macOS
High Sierra 10.13.1, watchOS 4.1 and tvOS 11.1.
• Coarse-grained return values. Another approach to coun-
tering the attacks is to reduce the granularity of the return
values. For instance, instead of returning the exact number
of page faults, free pages, or bytes sent/received from the
W if i interface, etc., the last 1, 2, or 3 decimal digits of
the values can be masked. We evaluated this method for the
experiment we did in Sec. IV-B1 by reducing the granularity
of all 6 features. We show the top 1, 2, and 3 accuracy of the
classiﬁcation in Fig. 10b. As seen in the ﬁgure, when reducing
the granularity of the return values, the classiﬁcation accuracy
decreases accordingly. The accuracy drops to a reasonably low
level when masking 3 digits (28.8% top 1 accuracy and 41.3%
top 3 accuracy). Apple has implemented this approach for
getifaddrs() in iOS 11 to round the values of ibytes
and obytes to 1K Bytes.
• Runtime detection. An alternative approach is to monitor the
13
use of the leaky APIs while some sensitive apps are running
in the foreground. This idea has been illustrated in Android
by Zhang et al. [65] on Android using a non-privileged
guardian app. Due to the more strict cross-app isolation on
iOS, however,
this task can only be accomplished by the
system itself on iOS.
• Privacy-preserving statistics reporting. Xiao et al. [61] pro-
posed a privacy-preserving procfs to mitigate side channels
resulted from the procfs in Linux OS, so that statistics
reporting through procfs satisﬁes d-privacy, a variation of
differential privacy. Apple could modify the OS kernel and
implement similar functionalities to these leaky APIs. The
effectiveness and performance overhead of such approach on
iOS warrant further research.
• Removing the fileExistsAtPath timing channel. Apple
has made kernel-level changes in its VFS implementation to
eliminate this timing channel. We have conﬁrmed that the
timing channel has been eliminated in iOS 11.
IX. RELATED WORK
Closest to our work is the studies of procfs side channels
on Linux and Android. Particularly, Zhang and Wang [64]
demonstrated side-channel attacks through procfs on Linux
to eavesdrop users’ keystrokes. Jana and Shmatikov [42]
exploited procfs on Linux to infer the website a Chrome
browser visits by taking snapshots of its memory footprint
(e.g., data resident size). Qian et al. [56] exploited error
packet counters reported in /proc/net/ to facilitate off-path
TCP session hijacking attacks. Zhou et al. [67] demonstrated
inference attacks using procfs on Android to learn a victim
app’s activity by learning its packet statistics. Chen et al. [31]
extracted the victim app’s CPU utilization time, memory usage,
and network usage from various procfs ﬁles to detect
activity transition and then identify the foreground activity.
Lin et al. [45] employed procfs to extract an app’s CPU
usage to detect user’s key press operation on Android. Zhang et
al. [65] explored similar channels from procfs to ﬁngerprint