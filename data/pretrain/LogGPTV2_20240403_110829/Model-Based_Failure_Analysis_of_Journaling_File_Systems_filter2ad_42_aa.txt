# Model-Based Failure Analysis of Journaling File Systems

**Authors:**
- Vijayan Prabhakaran
- Andrea C. Arpaci-Dusseau
- Remzi H. Arpaci-Dusseau

**Affiliation:**
University of Wisconsin, Madison
Computer Sciences Department
1210 West Dayton Street, Madison, WI

## Abstract
We introduce a novel method to evaluate the robustness of journaling file systems under disk write failures. Our approach involves constructing models that simulate how journaling file systems order disk writes in different journaling modes and using these models to inject write failures during file system updates. This technique allows us to assess whether journaling file systems maintain on-disk consistency in the presence of disk write failures. We apply our method to three prominent Linux journaling file systems: ext3, Reiserfs, and IBM JFS. Our analysis reveals several design flaws and correctness issues in these file systems, which can lead to serious errors, including data corruption and unmountable file systems.

## 1. Introduction
Disk failures are a reality, and modern file systems and storage systems must include mechanisms to handle such failures to ensure integrity and reliability. However, the nature of disk failures is evolving. Traditional systems assume disks are fail-stop, meaning a disk is either fully operational or completely failed, with the failure being easily detectable. As disk complexity increases, along with the pressures of time-to-market and cost, new failure modes, such as latent sector faults and transient performance issues, are becoming more common. These new failure modes challenge the assumption that a disk is either working or not.

In this paper, we investigate how modern journaling file systems cope with these new types of disk write failures. Journaling file systems, such as ext3, Reiserfs, and IBM JFS, maintain file system integrity by logging data in a separate journal before writing it to its final location. To analyze these file systems, we develop a model-based fault-injection technique. We create an abstract model of the file system's update behavior, specifically how it orders writes to maintain consistency. Using this model, we can inject faults at various points during a file system transaction and observe the system's response. We focus on write failures because they change the on-disk state and can lead to corruption if not properly handled.

We apply our fault-injection methodology to test three widely used Linux journaling file systems: ext3, Reiserfs, and IBM JFS. Our analysis reveals several design flaws in these file systems that can severely impact on-disk data. Specifically, both ext3 and IBM JFS are not designed to handle sector write failures, leading to potential unmountable file systems. Reiserfs, while generally cautious about write failures, has configurations where it can also commit failed transactions, leading to corrupted file systems.

The rest of the paper is organized as follows: Section 2 provides a brief introduction to journaling file systems. Section 3 explains our methodology for analyzing journaling file systems. Section 4 discusses the results of our analysis of ext3, Reiserfs, and JFS. Section 5 presents related work, and Section 6 concludes the paper.

## 2. Background
When a file system update occurs, a set of blocks is written to the disk. If the system crashes during this process, the file system is left in an inconsistent state. Traditional file systems, such as FFS and ext2, use `fsck` to scan and repair the file system, which can be time-consuming for large file systems.

Journaling file systems avoid this expensive integrity check by recording extra information in a write-ahead log or journal. Once the writes are successfully committed to the log, they can be transferred to their final locations on the disk. This process is called checkpointing. If a crash occurs during checkpointing, the file system can recover the data from the log and complete the writes. The journal super block is updated periodically to mark the size of the log and the end of checkpointing.

Modern file systems provide different journaling modes, each with subtle differences in their update behavior:
- **Data journaling:** Provides the strongest data integrity by logging all blocks (data and metadata) before committing them.
- **Writeback journaling:** Logs only metadata, providing no guarantee of data consistency.
- **Ordered journaling:** Ensures data consistency by enforcing an ordering constraint, writing data blocks before metadata blocks.

## 3. Methodology
Our testing framework consists of two main components: a fault-injection driver and a user-level coordinator. The driver is positioned between the file system and the disk, observing I/O traffic and injecting faults at specific points. The coordinator monitors and controls the process, specifying which faults to inject, running workloads, and observing the system's behavior.

### 3.1 The Fault-Injection Driver
The fault-injection driver appears as a typical block device to the file system. It has three main roles:
1. **Classify block types:** Identify the type of file system data structure each write represents.
2. **Model journaling behavior:** Represent the correct sequence of states a transaction must go through.
3. **Inject faults:** Insert faults at specific points in the I/O stream based on the journaling model.

### 3.2 The Coordinator
The coordinator manages the entire benchmarking process. It inserts the fault-injection driver into the Linux kernel, constructs the file system, passes fault specifications to the driver, and runs the workload. The coordinator logs errors from the file system, the driver, and system logs.

Each fault injection experiment involves creating a fresh file system, generating the necessary files and directories, and running a controlled workload. The driver injects the fault when the expected block is written. The coordinator then collects error logs and manually interprets them to determine the extent of file system damage.

### 3.3 Journaling Models
We build models for each journaling mode based on their functionality. These models represent the correct sequence of states for each journaling mode and help us identify appropriate fault injection points. We inject faults at five main points: ordered data writes, journal writes, commit writes, checkpoint writes, and journal superblock writes. In some cases, we force a system crash after fault injection to test recovery.

## 4. Results
Our analysis of ext3, Reiserfs, and IBM JFS reveals several design flaws and correctness issues:
- **ext3 and IBM JFS:** Not designed to handle sector write failures, leading to potential unmountable file systems.
- **Reiserfs:** Generally cautious about write failures but has configurations where it can commit failed transactions, leading to corrupted file systems.

## 5. Related Work
[Discuss related work here]

## 6. Conclusion
[Conclude the paper here]

---

**Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05)**
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 12:10:16 UTC from IEEE Xplore. Restrictions apply.