                    print ar'
                QM.assert ok
            ) ss
    main :: IO ()
    main = Q.quickCheckWith Q.stdArgs { Q.maxSuccess = 1000000 } prop_test_re2c
获取re2c结构的表达式，转换成规则，为后续分析进行匹配。
parse.cc 基于 bison
    static const char *const yytname[] =
    {
      "$end", "error", "$undefined", "TOKEN_COUNT", "TOKEN_ERROR",
      "TOKEN_REGEXP", "'|'", "'*'", "'+'", "'?'", "'('", "')'", "$accept",
      "regexp", "expr", "term", "factor", "primary", YY_NULLPTR
    };
    #define yyerrok         (yyerrstatus = 0)
    #define yyclearin       (yychar = YYEMPTY)
    #define YYEMPTY         (-2)
    #define YYEOF           0
    #define YYACCEPT        goto yyacceptlab
    #define YYABORT         goto yyabortlab
    #define YYERROR         goto yyerrorlab
    switch (yyn)
        {
            case 2:
    #line 51 "../lib/parse.ypp" /* yacc.c:1651  */
        { regexp = (yyval.regexp); }
    #line 1244 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 4:
    #line 55 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_alt((yyvsp[-2].regexp), (yyvsp[0].regexp)); }     
    #line 1250 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 6:
    #line 60 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_cat((yyvsp[-1].regexp), (yyvsp[0].regexp)); }
    #line 1256 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 8:
    #line 65 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_iter((yyvsp[-1].regexp), 0, AST::MANY); }
    #line 1262 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 9:
    #line 66 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_iter((yyvsp[-1].regexp), 1, AST::MANY); }
    #line 1268 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 10:
    #line 67 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_iter((yyvsp[-1].regexp), 0, 1); }
    #line 1274 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 11:
    #line 68 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_iter((yyvsp[-1].regexp), (yyvsp[0].bounds).min, (yyvsp[0].bounds).max); }
    #line 1280 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 13:
    #line 73 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_cap(ast_nil(NOWHERE)); }
    #line 1286 "lib/parse.cc" /* yacc.c:1651  */
        break;
      case 14:
    #line 74 "../lib/parse.ypp" /* yacc.c:1651  */
        { (yyval.regexp) = ast_cap((yyvsp[-1].regexp)); }
    #line 1292 "lib/parse.cc" /* yacc.c:1651  */
        break;
    #line 1296 "lib/parse.cc" /* yacc.c:1651  */
          default: break;
        }
将分析之后的结构插入AST中
lex.cc
    if (yych ') {
            if (yych  ast_to_dfa(const spec_t &spec, Output &output)
    {
        const opt_t *opts = output.block().opts;
        const loc_t &loc = output.block().loc;
        Msg &msg = output.msg;
        const std::vector &rules = spec.rules;
        const std::string
            &cond = spec.name,
            name = make_name(output, cond, loc),
            &setup = spec.setup.empty() ? "" : spec.setup[0]->text;
    RangeMgr rangemgr;
    RESpec re(rules, opts, msg, rangemgr);
    split_charset(re);
    find_fixed_tags(re);
    insert_default_tags(re);
    warn_nullable(re, cond);
    nfa_t nfa(re);
    DDUMP_NFA(opts, nfa);
    dfa_t dfa(nfa, spec.def_rule, spec.eof_rule);
    determinization(nfa, dfa, opts, msg, cond);
    DDUMP_DFA_DET(opts, dfa);
    rangemgr.clear();
    // skeleton must be constructed after DFA construction
    // but prior to any other DFA transformations
    Skeleton skeleton(dfa, opts, name, cond, loc, msg);
    warn_undefined_control_flow(skeleton);
    if (opts->target == TARGET_SKELETON) {
        emit_data(skeleton);
    }
    cutoff_dead_rules(dfa, opts, cond, msg);
    insert_fallback_tags(opts, dfa);
    // try to minimize the number of tag variables
    compact_and_optimize_tags(opts, dfa);
    DDUMP_DFA_TAGOPT(opts, dfa);
    freeze_tags(dfa);
    minimization(dfa, opts->dfa_minimization);
    DDUMP_DFA_MIN(opts, dfa);
    // find strongly connected components and calculate argument to YYFILL
    std::vector fill;
    fillpoints(dfa, fill);
    // ADFA stands for 'DFA with actions'
    DFA *adfa = new DFA(dfa, fill, skeleton.sizeof_key, loc, name, cond,
        setup, opts, msg);
    // see note [reordering DFA states]
    adfa->reorder();
    // skeleton is constructed, do further DFA transformations
    adfa->prepare(opts);
    DDUMP_ADFA(opts, *adfa);
    // finally gather overall DFA statistics
    adfa->calc_stats(output.block());
    // accumulate global statistics from this particular DFA
    output.max_fill = std::max(output.max_fill, adfa->max_fill);
    output.max_nmatch = std::max(output.max_nmatch, adfa->max_nmatch);
    if (adfa->need_accept) {
        output.block().used_yyaccept = true;
    }
    return make_smart_ptr(adfa);
    }
ast转DFA
将AST内容拆分，添加标签，生成NFA，输出NFA，转换成DFA，添加回溯标签，寻找最简DFA
## 最后
代码部分分析只是草草带过，依旧有很多不足。如果有什么问题，欢迎指教。