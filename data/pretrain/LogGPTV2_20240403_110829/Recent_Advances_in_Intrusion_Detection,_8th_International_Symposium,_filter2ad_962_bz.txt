stack
Top of
memory
Fig. 1. General structure of exploit code
Figure 1 shows the structure of a typical exploit code, which consists of three
distinct components - 1) a return address block, 2) a NOOP sled, and 3) the
payload. The main purpose of such a construction is that when a function returns
following a buﬀer overﬂow, the return address block directs execution on to the
NOOP sled, which eventually reaches the payload.
The basic idea of exploit code detection inside network ﬂows with the goal of
preventing remote exploits is not new. Support for packet-level pattern match-
ing has long been oﬀered by network-based intrusion detection systems such as
Snort and Bro, and detecting exploit code entails specifying the corresponding
signature. While such systems are relatively easy to implement and perform well,
their security guarantees are only as good as the signature repository. Evasion is
simply a matter of operating outside a signature repository and this is achieved
either by altering instructions or instruction sequence (metamorphism), encryp-
tion/decryption (polymorphism), or discovering an entirely new vulnerability
and writing the corresponding exploit (zero-day exploit). As a rule of thumb,
signatures must be long so that they are speciﬁc enough to reduce false positives
which may occur when normal data accidentally matches exploit code signatures.
Also, the number of signatures has to be few to achieve scalability because the
signature matching process can become computationally and storage intensive.
These two goals are seriously hindered by polymorphism and metamorphism
and pose signiﬁcant challenges for signature-based detection systems especially
when automated toolkits are available [6,3].
Polymorphism and metamorphism aﬀect the three components of exploit code
diﬀerently. The payload component can be concealed to evade signature-based
detection using either polymorphism and metamorphism, and therefore, is sel-
dom the focus of detection. In an exploit code, the return address block and
the NOOP sled are used to improve chances of success by accounting for the
uncertainty regarding the vulnerable buﬀer such as its actual address in mem-
ory. Therefore, it is only reasonable to assume that polymorphic encryption
cannot be applied to them and they must be in plain view. On the downside,
the NOOP sled is still susceptible to metamorphism and the return address
block may be too short to be useful. Consequently, although recently proposed
techniques [16,35,31] for detection of exploit code have attempted to cope with
polymorphism and metamorphism, there are shortcomings and some challenges
remain. To summarize, signature-based detection techniques cannot provide all
the answers and we must look elsewhere for more eﬀective techniques.
286
R. Chinchani and E. van den Berg
Table 1. Some popularly targeted network services as reported by SANS [5], their
port numbers and the general nature of network ﬂows on the corresponding ports as
observed empirically
Microsoft Windows
Vulnerable service/program Port
IIS Webserver
Workstation Service
Remote Access Services
Microsoft SQL Server
Instant messaging
(MSN, Yahoo, AOL)
80
139, 445
111, 137, 138, 139
1434
Content Type
Mostly data
Data
Data
Data
1863, 5050, 5190-5193 Mostly data
GNU/Linux
Vulnerable service/program Port
BIND
Apache Webserver
pserver/Version Control
Mail Transport
SNMP
Database Systems
(Oracle, MySQL, PostgreSQL) 1521, 3306, 5432
53
80
2401
25
161
Content Type
Data
Mostly data
Data
Mostly data
Data
Data
In this paper, we propose an approach which takes the viewpoint that the
nature of communication to and from network services is predominantly or exclu-
sively data and not executable code (see Table 1). Since remote exploits are typi-
cally executable code transmitted over a network, it is possible to detect exploits
if a distinction can be made between data and executable code in the context of a
network ﬂow. One such exploit code indicator was proposed by Toth and Kruegel
[35] wherein binary disassembly is performed over a network ﬂow and a long se-
quence of valid instructions shows the presence of a NOOP sled. However, this
scheme falls short, ﬁrstly because it is easily defeated by a metamorphic NOOP
sled [16], and secondly, because it doesn’t take into account information given
away by branch instructions. Hence, mere binary disassembly is not adequate.
Exploit code, although not a full program, is very “program-like” and has a
certain structure. Moreover, the code must achieve whatever goal was intended
by the exploit code author through some sequence of executable instructions.
Therefore, there is a deﬁnite data and control ﬂow, and at least some of which
must be in plain view. Our approach to exploit detection is to look for evidence
of meaningful data and control ﬂow, essentially focusing on both NOOP sled
and payload components whenever possible. An important consequence of using
a static analysis based approach is that it can not only detect previously unseen
exploit code but is also more resilient to changes in implementation which exploit
code authors employ to defeat signature-based techniques.
There are signiﬁcant diﬀerences both in terms of goals and challenges faced
between static analysis of programs and our approach. When performing static
analysis, the goal is to reason about a program and answer the question: can pro-
gram execution lead to unpredictable or malicious behavior? We face a diﬀerent
A Fast Static Analysis Approach
287
problem, which is phrased as follows. Consider one or more executable code frag-
ments with no additional information in terms of program headers, symbol tables
or debugging information. At this point, we neither have a well-deﬁned program
nor can we trivially determine the execution entry point. Next, consider a set of
network ﬂows and arbitrarily choose both a ﬂow as well as the location inside the
ﬂow where the code fragments will be embedded. Now, we ask the question: given
a ﬂow, can we detect whether a ﬂow contains the program-like code or not? Also,
if it does, can we recover at least majority of the code fragments, both for further
analysis as well as signature generation? In other words, one challenge is to per-
form static analysis while recovering the code fragments without the knowledge of
their exact location. The other is that the process must be eﬃcient in order scale
to network traﬃc. We show that this is possible albeit in a probabilistic sense.
The relevance of our work goes beyond singular exploits. Lately, there has been
a proliferation of Internet worms and there is a strong relationship between the
worm spread mechanism and remote exploits.
1.1 Connections Between Exploit Code and Worm Spread
Mechanism
Following earlier eﬀorts [33,43,29]
in understanding worms which are self-
propagating malware, several techniques have been proposed to detect and
contain them. For a comprehensive overview of various types of worms, we rec-
ommend the excellent taxonomy by Weaver et al. [39].
As is the case with most security areas, there is an arms race unfolding
between worm authors and worm detection techniques. For example, portscan
detection algorithms [19,40] proposed to rapidly detect scanning worms can be
eluded if hitlists are used and one such worm named Santy surfaced recently
which used Google searches to ﬁnd its victims. Table 2 is a compilation of a few
representative worm detection algorithms, their working principles and worm
counterexamples which can evade detection. In their taxonomy, Weaver et al.
[39] had foreseen such possibilities and only within a year of this work, we are
beginning to see the corresponding worm implementations. Moreover, with the
availability of now mature virus and exploit authoring toolkits which can create
stealthy code [6,3], a worm author’s task is becoming increasingly easy.
The main point we want to make is that while the working principles speciﬁed
in the second column of Table 2 are suﬃcient conditions for the presence of worm
activity, they are not necessary conditions and the counterexamples in the third
column support the latter claim. The necessary condition for a worm is self-
propagation and so far this property has been realized primarily through the use
of exploit code; a situation which is unlikely to change. Therefore, if an eﬀective
technique can be devised to detect exploit code, then we automatically get worm
detection for free regardless of the type of the worm.
1.2 Contributions
There are two main contributions in this paper. As the ﬁrst contribution, we
propose a static analysis approach which can be used over network ﬂows with
288
R. Chinchani and E. van den Berg
Table 2. A compilation of worm detection techniques, their working principles and
counterexamples
Working Principle
Worm Detection Ap-
proach
Portscan Detection [19,41] Scanning worms discover
victims by trial-and-error,
resulting in several failed
connections
Worm code propagation
appears
replicated
byte sequences in network
streams
Distributed Worm Signa-
ture Detection [21]
as
Worm/virus Throttle [36] Rate-limiting
Network
Detection [42]
Activity-Based
Honeypots/Honeyfarms
Statistics-Based Payload
Detection [38]
outgoing
slows down
connections
worm spread
Detect “S”-shaped network
activity pattern character-
istic of worm propagation
Collections of honeypots
fed by network telescopes,
worm signatures obtained
from outgoing/incoming
traﬃc.
Normal traﬃc has diﬀerent
byte-level
statistics
than
worm infested traﬃc
Counterexample
Histlist worms, e.g. Santy
worm [1] used Google
searches.
Polymorphic
and meta-
morphic worms, e.g. Phat-
bot worm [27].
Slow-spreading worms.
Slow-spreading worms.
Anti-honeypot technology
[23]
Blend into normal traﬃc
[22]
the aim of distinguishing data and program-like code. In this regard, we answer
the following two questions.
How can the instruction stream of an exploit code be recovered without the
knowledge of its exact location inside a network ﬂow? The exact location of
the exploit code inside a network ﬂow depends on several factors, one of them
being the targeted vulnerability, and since we have no prior information about
the existence of vulnerabilities or lack thereof, we cannot make any assump-
tions. Nevertheless, Linn et al. [26] observed that Intel binary disassembly has a
self-correcting property, that is, performing disassembly over a byte stream con-
taining executable code fragments but without the knowledge of their location
still leads to the recovery of a large portion of the executable fragments. Our
approach also leverages this property and we present a more in-depth analysis to
show that it is relevant even for network ﬂows. Consequently, we have an eﬃcient
technique to recover the instruction stream, which although lossy, is suﬃciently
accurate to perform static analysis.
How can static analysis be performed with only a reasonable cost? Static anal-
ysis typically incurs a very high cost and is only suitable for oﬄine analysis. On
the other hand, our aim in using static analysis is only to the extent of realiz-
ing an exploit code indicator which establishes a distinction between data and
A Fast Static Analysis Approach
289
executable code. We analyze the instruction stream produced via binary disas-
sembly using basic data and control ﬂow, and look for a meaningful structure
in terms a sequence of valid instructions and branch targets. Such a structure
has a very low probability of occurrence in a random data stream. Since we use
an abbreviated form of static analysis, the costs are reasonable, which makes it
suitable for use in online detection. In the context of detection, false positives
can occur when random data is mistaken for executable code, but this is highly
unlikely. Also, an exploit code author may deliberately disguise executable code
as data, leading to false negatives. This is a harder problem to solve and we pay
attention to this aspect during algorithm design wherever relevant.
These two aspects in cohesion form the core of our exploit code detection
methodology, which we call convergent static analysis. We have evaluated our
approach using the Metasploit framework [3], which currently supports several
exploits with features such as payload encryption and metamorphic NOOP sleds.
We are interested mainly in evaluating eﬀectiveness in detecting exploit code
and resistance to evasion. Also, given the popularity of the 32-bit x86 processor
family, we consider the more relevant and pressing problem of detecting exploit
code targeted against this architecture.
As our second contribution, we describe the design and architecture of an
network ﬂow based exploit code detection sensor hinging on this methodology.
Sensor deployment in a real-world setting raises several practical issues such as
performance overheads, sensor placement and management. In order to gain in-
sight into these issues, we have performed our evaluation based on traces (several
gigabytes in size) collected from an 100Mbps enterprise network over a period
of 1-2 weeks. The dataset consists of ﬂows that are heterogeneous in terms of
operating systems involved and services running on the hosts.
1.3 Summary of Results
As a primary exploit detection mechanism, our approach oﬀers the following
beneﬁts over signature-based detection systems.
– It can detect zero-day and metamorphic exploit code. Moreover, it can also
detect polymorphic code, but the mileage may vary.
– It does not incur high maintenance costs unlike signature-based detection
systems where signature generation and updates are a constant concern.
While our approach can operate in a stand-alone manner, it can also comple-
ment signature-based detection systems, oﬀering the following beneﬁt.
– If signature-based detection is to be eﬀective, then the signature repository
has to be kept up-to-date; a practically impossible task without automated
tools. Our approach, by virtue of its ability to separate data and exploit code,
identify portions of a network ﬂow which correspond to an exploit. Therefore,
it also serves as a technique which can automatically generate precise and
high quality signatures. This is particularly invaluable since signiﬁcant eﬀort
goes into maintaining the signature repository.
290
R. Chinchani and E. van den Berg
The rest of the paper is organized as follows. Related work is discussed in
Section 2. Our ﬁrst contribution is presented in Section 3. The core exploit code
detection mechanism is described in Section 4.
2 Related Work
The two broad areas which are relevant to our work are exploit code detection
inside network ﬂows and static analysis, and signiﬁcant advances have been made
in both these areas. We review and compare some of them to put our work in
perspective.
Several research eﬀorts have acknowledged these evasion tactics and proposed
possible solutions to deal with them, but they have their limitations. Hittel [16]
showed how a metamorphic sled can be constructed and in the same paper,
developed Snort rules for detection; however, their number can be very large.
Toth and Kruegel [35], also concentrating on the NOOP sled, went one step fur-
ther. They used binary disassembly to ﬁnd sequences of executable instructions
bounded by branch or invalid instructions; hence, longer the sequence, greater
the evidence of a NOOP sled. However, this scheme can be easily defeated by
interspersing branch instructions among normal code [16], resulting in very short
sequences. In our approach, although we perform binary disassembly, its purpose
is to assist static analysis. Recently, Pasupulati et al. [31] proposed a technique
to detect the return address component by matching against candidate buﬀer
addresses. While this technique is very novel and perhaps the ﬁrst to address
metamorphic and polymorphic code, there are caveats. First, the return address
component could be very small so that when translated to a signature, it is not
speciﬁc enough. Secondly, even small changes in software are likely to alter buﬀer
addresses in memory. Consequently, this approach runs into similar administra-
tive overheads as existing signature-based detection systems. We do not focus
on the return address component and changes in software do not impact our
approach. Wang et al. [38] proposed a payload based anomaly detection system
called PAYL which works by ﬁrst training with normal network ﬂow traﬃc and
subsequently using several byte-level statistical measures to detect exploit code.
But it is possible to evade detection by implementing the exploit code in such a
way that it statistically mimics normal traﬃc [22].