  * 如果读取失败，检查 `arg0` 中是否存在 `/` 字符，如果存在，则判断最后一个 `/` 前面的路径为 AFL 的根目录；然后读取`afl-llvm-rt.o`文件，成功读取，设置该目录为 `obj_path` ，然后直接返回。
  * 如果上面两种方式都失败，到`/usr/local/lib/afl` 目录下查找是否存在 `afl-llvm-rt.o` ，如果存在，则设置为 `obj_path` 并直接返回（之所以向该路径下寻找，是因为默认的AFL的MakeFile在编译时，会定义一个名为`AFL_PATH`的宏，该宏会指向该路径）；
  * 如果以上全部失败，抛出异常提示找不到 `afl-llvm-rt.o` 文件或 `afl-llvm-pass.so` 文件，并要求设置 `AFL_PATH` 环境变量 。
函数的主要功能是在寻找AFL的路径以找到 `afl-llvm-rt.o` 文件，该文件即为要用到的运行时库。
###### 3\. edit_params 函数
该函数的主要作用仍然为编辑参数数组，其控制流程如下：
  * 首先，判断执行的是否为 `afl-clang-fast++` ：
  * 如果是，设置 `cc_params[0]` 为环境变量 `AFL_CXX`；如果环境变量为空，则设置为 `clang++` ；
  * 如果不是，设置 `cc_params[0]` 为环境变量 `AFL_CC`；如果环境变量为空，则设置为 `clang` ；
  * 判断是否定义了 `USE_TRACE_PC` 宏，如果有，添加 `-fsanitize-coverage=trace-pc-guard -mllvm(only Android) -sanitizer-coverage-block-threshold=0(only Android)` 选项到参数数组；如果没有，依次将 `-Xclang -load -Xclang obj_path/afl-llvm-pass.so -Qunused-arguments` 选项添加到参数数组；（这里涉及到llvm_mode使用的2种插桩方式：默认使用的是传统模式，使用 `afl-llvm-pass.so` 注入来进行插桩，这种方式较为稳定；另外一种是处于实验阶段的方式——`trace-pc-guard` 模式，对于该模式的详细介绍可以参考[llvm相关文档——tracing-pcs-with-guards](https://clang.llvm.org/docs/SanitizerCoverage.html#tracing-pcs-with-guards)）
  * 遍历传递给 `afl-clang-fast` 的参数，进行一定的检查和设置，并添加到 `cc_params` 数组：
  * 如果存在 `-m32` 或 `armv7a-linux-androideabi` ，设置 `bit_mode` 为32；
  * 如果存在 `-m64` ，设置 `bit_mode` 为64；
  * 如果存在 `-x` ，设置 `x_set` 为1；
  * 如果存在 `-fsanitize=address` 或 `-fsanitize=memory`，设置 `asan_set` 为1；
  * 如果存在 `-Wl,-z,defs` 或 `-Wl,--no-undefined`，则直接pass掉。
  * 检查环境变量是否设置了 `AFL_HARDEN`：
  * 如果有，添加 `-fstack-protector-all` 选项；
  * 如果有且没有设置 `FORTIFY_SOURCE` ，添加 `-D_FORTIFY_SOURCE=2` 选项；
  * 检查参数中是否存在 `-fsanitize=memory`，即 `asan_set` 为0：
  * 如果没有，尝试读取环境变量 `AFL_USE_ASAN`，如果存在，添加 `-U_FORTIFY_SOURCE -fsanitize=address`；
  * 接下来对环境变量`AFL_USE_MSAN`的处理方式与 `AFL_USE_ASAN` 类似，添加的选项为 `-U_FORTIFY_SOURCE?-fsanitize=memory`；
  * 检查是否定义了 `USE_TRACE_PC` 宏，如果存在定义，检查是否存在环境变量 `AFL_INST_RATIO`，如果存在，抛出异常`AFL_INST_RATIO` 无法在trace-pc时使用；
  * 检查环境变量 `AFL_NO_BUILTIN` ，如果没有设置，添加 `-g?-O3?-funroll-loops`；
  * 检查环境变量 `AFL_NO_BUILTIN`，如果进行了设置，添加 `-fno-builtin-strcmp -fno-builtin-strncmp -fno-builtin-strcasecmp -fno-builtin-strcasecmp -fno-builtin-memcmp`；
  * 添加参数 `-D__AFL_HAVE_MANUAL_CONTROL=1?-D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1`；
  * 定义了两个宏 `__AFL_LOOP(),?__AFL_INIT()`；
  * 检查是否设置了 `x_set`， 如果有添加 `-x?none`；
  * 检查是否设置了宏 `__ANDORID__` ，如果没有，判断 `bit_mode` 的值：
  * 如果为0，即没有`-m32`和`-m64`，添加 `obj_path/afl-llvm-rt.o` ；
  * 如果为32，添加 `obj_path/afl-llvm-rt-32.o` ；
  * 如果为64，添加 `obj_path/afl-llvm-rt-64.o` 。
##### 2\. afl-llvm-pass.so.cc
`afl-llvm-pass.so.cc` 文件实现了 LLVM-mode 下的一个插桩 LLVM Pass。
本文不过多关心如何实现一个LLVM Pass，重点分析该pass的实现逻辑。
该文件只有一个Transform?pass：`?AFLCoverage`，继承自 `ModulePass`，实现了一个 `runOnModule`
函数，这也是我们需要重点分析的函数。
    namespace {
      class AFLCoverage : public ModulePass {
        public:
          static char ID;
          AFLCoverage() : ModulePass(ID) { }
          bool runOnModule(Module &M) override;
          // StringRef getPassName() const override {
          //  return "American Fuzzy Lop Instrumentation";
          // }
      };
    }
###### 1\. pass注册
对pass进行注册的部分源码如下：
    static void registerAFLPass(const PassManagerBuilder &,
                                legacy::PassManagerBase &PM) {
      PM.add(new AFLCoverage());
    }
    static RegisterStandardPasses RegisterAFLPass(
        PassManagerBuilder::EP_ModuleOptimizerEarly, registerAFLPass);
    static RegisterStandardPasses RegisterAFLPass0(
        PassManagerBuilder::EP_EnabledOnOptLevel0, registerAFLPass);
其核心功能为向PassManager注册新的pass，每个pass相互独立。
对于pass注册的细节部分请读者自行研究llvm的相关内容。
###### 2\. runOnModule 函数
该函数为该文件中的关键函数，其控制流程图如下：
  * 首先，通过 `getContext()` 来获取 `LLVMContext` ，获取进程上下文：
```c LLVMContext &C = M.getContext();
IntegerType _Int8Ty = IntegerType::getInt8Ty(C); IntegerType_ Int32Ty =
IntegerType::getInt32Ty(C); ```
  * 设置插桩密度：读取环境变量 `AFL_INST_RATIO` ，并赋值给 `inst_ratio`，其值默认为100，范围为 1～100，该值表示插桩概率；
  * 获取只想共享内存shm的指针以及上一个基本块的随机ID：
```c GlobalVariable *AFLMapPtr = new GlobalVariable(M,
PointerType::get(Int8Ty, 0), false, GlobalValue::ExternalLinkage, 0,
"__afl_area_ptr");
GlobalVariable *AFLPrevLoc = new GlobalVariable( M, Int32Ty, false,
GlobalValue::ExternalLinkage, 0, "__afl_prev_loc", 0,
GlobalVariable::GeneralDynamicTLSModel, 0, false); ```
  * 进入插桩过程：
  * 通过 `for` 循环遍历每个BB（基本块），寻找BB中适合插入桩代码的位置，然后通过初始化 `IRBuilder` 实例执行插入；
`c BasicBlock::iterator IP = BB.getFirstInsertionPt(); IRBuilder<>
IRB(&(*IP));`
  * 随机创建当前BB的ID，然后插入load指令，获取前一个BB的ID；
```c if (AFL_R(100) >= inst_ratio) continue; // 如果大于插桩密度，进行随机插桩
/ _Make up cur_loc_ /
unsigned int cur_loc = AFL_R(MAP_SIZE);
ConstantInt *CurLoc = ConstantInt::get(Int32Ty, cur_loc); // 随机创建当前基本块ID
/ _Load prev_loc_ /
LoadInst _PrevLoc = IRB.CreateLoad(AFLPrevLoc); PrevLoc->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None)); Value
_PrevLocCasted = IRB.CreateZExt(PrevLoc, IRB.getInt32Ty()); // 获取上一个基本块的随机ID
```
  * 插入load指令，获取共享内存的地址，并调用 `CreateGEP` 函数获取共享内存中指定index的地址；
```c / _Load SHM pointer_ /
LoadInst _MapPtr = IRB.CreateLoad(AFLMapPtr); MapPtr->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None)); Value
_MapPtrIdx = IRB.CreateGEP(MapPtr, IRB.CreateXor(PrevLocCasted, CurLoc)); ```
  * 插入load指令，获取对应index地址的值；插入add指令加一，然后创建store指令写入新值，并更新共享内存；
```c / _Update bitmap_ /
LoadInst _Counter = IRB.CreateLoad(MapPtrIdx); Counter->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None)); Value _Incr =
IRB.CreateAdd(Counter, ConstantInt::get(Int8Ty, 1)); IRB.CreateStore(Incr,
MapPtrIdx) ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
```
  * 右移 `cur_loc` ，插入store指令，更新 `__afl_prev_loc`；
```c / _Set prev_loc to cur_loc >> 1 _/
StoreInst *Store = IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc >> 1),
AFLPrevLoc); Store->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C,
None)); ```
  * 最后对插桩计数加1；
  * 扫描下一个BB，根据设置是否为quiet模式等，并判断 `inst_blocks` 是否为0，如果为0则说明没有进行插桩；
```c if (!be_quiet) {
        if (!inst_blocks) WARNF("No instrumentation targets found.");
    else OKF("Instrumented %u locations (%s mode, ratio %u%%).",
             inst_blocks, getenv("AFL_HARDEN") ? "hardened" :
             ((getenv("AFL_USE_ASAN") || getenv("AFL_USE_MSAN")) ?
              "ASAN/MSAN" : "non-hardened"), inst_ratio);
} ```
整个插桩过程较为清晰，没有冗余动作和代码。
##### 3\. afl-llvm-rt.o.c
该文件主要实现了llvm_mode的3个特殊功能：`deferred?instrumentation,?persistent mode,trace-pc-guard?mode?`。
###### 1\. deferred instrumentation
AFL会尝试通过只执行一次目标二进制文件来提升性能，在 `main()`
之前暂停程序，然后克隆“主”进程获得一个稳定的可进行持续fuzz的目标。简言之，避免目标二进制文件的多次、重复的完整运行，而是采取了一种类似快照的机制。
虽然这种机制可以减少程序运行在操作系统、链接器和libc级别的消耗，但是在面对大型配置文件的解析时，优势并不明显。
在这种情况下，可以将 `forkserver`
的初始化放在大部分初始化工作完成之后、二进制文件解析之前来进行，这在某些情况下可以提升10倍以上的性能。我们把这种方式称为LLVM模式下的
`deferred?instrumentation`。
首先，在代码中寻找可以进行延迟克隆的合适的、不会破坏原二进制文件的位置，然后添加如下代码：
    #ifdef __AFL_HAVE_MANUAL_CONTROL
        __AFL_INIT();
    #endif
以上代码插入，在 `afl-clang-fast.c` 文件中有说明：
      cc_params[cc_par_cnt++] = "-D__AFL_INIT()="
        "do { static volatile char *_A __attribute__((used)); "
        " _A = (char*)\"" DEFER_SIG "\"; "
    #ifdef __APPLE__
        "__attribute__((visibility(\"default\"))) "
        "void _I(void) __asm__(\"___afl_manual_init\"); "
    #else
        "__attribute__((visibility(\"default\"))) "
        "void _I(void) __asm__(\"__afl_manual_init\"); "
    #endif /* ^__APPLE__ */
`__afl_manual_init()` 函数实现如下：
    /* This one can be called from user code when deferred forkserver mode
        is enabled. */
    void __afl_manual_init(void) {
      static u8 init_done;
      if (!init_done) {
        __afl_map_shm();
        __afl_start_forkserver();
        init_done = 1;
      }
    }
首先，判断是否进行了初始化，没有则调用 `__afl_map_shm()` 函数进行共享内存初始化。 `__afl_map_shm()` 函数如下：
    /* SHM setup. */
    static void __afl_map_shm(void) {
      u8 *id_str = getenv(SHM_ENV_VAR); // 读取环境变量 SHM_ENV_VAR 获取id
      if (id_str) { // 成功读取id
        u32 shm_id = atoi(id_str);
        __afl_area_ptr = shmat(shm_id, NULL, 0); // 获取shm地址，赋给 __afl_area_ptr
        /* Whooooops. */
        if (__afl_area_ptr == (void *)-1) _exit(1);  // 异常则退出
        /* Write something into the bitmap so that even with low AFL_INST_RATIO,
           our parent doesn't give up on us. */
        __afl_area_ptr[0] = 1; // 进行设置
      }
    }
然后，调用 `__afl_start_forkserver()` 函数开始执行forkserver：
    /* Fork server logic. */
    static void __afl_start_forkserver(void) {
      static u8 tmp[4];
      s32 child_pid;
      u8  child_stopped = 0;
      /* Phone home and tell the parent that we're OK. If parent isn't there,
         assume we're not running in forkserver mode and just execute program. */
      if (write(FORKSRV_FD + 1, tmp, 4) != 4) return; // 写入4字节到状态管道，通知 fuzzer已准备完成
      while (1) {
        u32 was_killed;
        int status;
        /* Wait for parent by reading from the pipe. Abort if read fails. */
        if (read(FORKSRV_FD, &was_killed, 4) != 4) _exit(1); 
        /* If we stopped the child in persistent mode, but there was a race
           condition and afl-fuzz already issued SIGKILL, write off the old
           process. */
          // 处于persistent mode且子进程已被killed
        if (child_stopped && was_killed) {
          child_stopped = 0;
          if (waitpid(child_pid, &status, 0) < 0) _exit(1);
        }
        if (!child_stopped) { 
          /* Once woken up, create a clone of our process. */
          child_pid = fork(); // 重新fork
          if (child_pid < 0) _exit(1);
          /* In child process: close fds, resume execution. */
          if (!child_pid) {
            close(FORKSRV_FD); // 关闭fd，
            close(FORKSRV_FD + 1);
            return;
          }
        } else {
          /* Special handling for persistent mode: if the child is alive but
             currently stopped, simply restart it with SIGCONT. */
          // 子进程只是暂停，则进行重启
          kill(child_pid, SIGCONT);
          child_stopped = 0;
        }
        /* In parent process: write PID to pipe, then wait for child. */
        if (write(FORKSRV_FD + 1, &child_pid, 4) != 4) _exit(1);
        if (waitpid(child_pid, &status, is_persistent ? WUNTRACED : 0) < 0)
          _exit(1);