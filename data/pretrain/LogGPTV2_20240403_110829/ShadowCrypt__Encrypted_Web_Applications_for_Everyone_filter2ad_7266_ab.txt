new upcoming primitive, the Shadow DOM [19], to securely isolate
cleartext from the application code (Section 3).
Key Storage. ShadowCrypt stores encryption keys on the user’s
computer. Only the ShadowCrypt code has access to them. A
ShadowCrypt user can share keys with anyone she wants via Shadow-
Crypt’s key import/export interface. ShadowCrypt’s user interface
supports multiple keys at run time, and the user can choose which
key to use. This design puts the user in control of her data and helps
mitigate the privacy diffusion problem.
2.3 Threat Model
Figure 2: Overview of the ShadowCrypt architecture. ShadowCrypt runs in
the browser, isolated from web pages but modifying the DOM via secure
APIs. It creates an isolated Shadow DOM that interacts with the user.
Web security research is working towards addressing these two
issues on the web in general.
First, ShadowCrypt does not defend against side channel data
leakage. Because ShadowCrypt causes the page to render with
the cleartext, the dimensions of the cleartext are available to the
untrusted page. In comparison, many features of HTML, such as
images, allow access to the dimensions resources loaded from other
origins.
Second, one mode of text input supported by ShadowCrypt does
not defend against clickjacking. ShadowCrypt allows users to en-
ter text into a text ﬁeld directly on the page (another supported
method is to open a dedicated window). It may be possible to create
an arrangement of transparent elements that intercepts keystrokes
while showing a proper encrypted input underneath. In comparison,
this kind of attack also affects sensitive cross-origin content that is
included through an iframe.
Our system’s TCB includes the operating system and the browser—
we do not protect against a compromised browser or OS. Currently,
we also do not provide protection against side-channel attacks such
as length of text on the encrypted text.
2.4 Goals
Security Goal. ShadowCrypt aims to ensure that any data entered
into a secure input widget that encrypts the data with key k is only
visible to principals with knowledge of the key k. We rely on
the user to authenticate the secure input widget via a passphrase
(Section 5) and not to input sensitive data in a widget that lacks this
passphrase.
Usability Goals. ShadowCrypt focuses on supporting current,
popular web applications transparently. The user should be able to
interact with the application in the same way whether ShadowCrypt
is enabled or disabled. ShadowCrypt aims to preserve, as much as
possible, the application’s look and feel. A user should be able to
use ShadowCrypt on any site without having to modify the site. This
goal aims to ensure broad usability and backwards compatibility.
Previous experience has shown that secure systems with serious
usability constraints fail to achieve adoption beyond a niche.
Non-Goals. We do not aim to protect against denial-of-service
attacks by the application. A trivial denial-of-service attack on
our system would be for the web application to simply delete all
encrypted data. We also do not guarantee the “freshness” of the
application’s data. Applications are free to display a previously
entered value, whether by intended functionality or by malicious
interference.
Our key threat model is the web attacker. We do not trust the
application’s server and client-side code (including the DOM and
JavaScript code).
We declare two threats that ShadowCrypt does not defend against.
These two issues are not addressed by the same-origin policy either.
3. SHADOWCRYPT DESIGN
Figure 2 summarizes the ShadowCrypt architecture. Shadow-
Crypt runs as a browser extension and relies on the security of the
user’s browser and operating system.
BrowserApplicationDOMcleartextciphertextShadowCryptJSShadowDOMnot sensitiveNetworkApplicationServerApplication JSThe user interacts with the page as normal. ShadowCrypt seam-
lessly replaces encrypted data in the page with the cleartext stored
in an isolated Shadow DOM. ShadowCrypt also replaces input
elements in the page with new inputs, isolated from the page. The
user provides her sensitive data to these isolated input elements
and ShadowCrypt provides only encrypted text to the rest of the
application’s DOM and JavaScript code.
ShadowCrypt needs to isolate its own JavaScript code, which
stores keys and performs encryption. We rely on the browser exten-
sion infrastructure to provide this isolated environment, which we
describe in Section 3.1.
Isolating ShadowCrypt’s JavaScript code is not sufﬁcient for
protecting the data that it handles. ShadowCrypt needs to show the
decrypted data to the user as well as accept sensitive data input. This
needs to occur in the application’s DOM, since the user does not
interact with JavaScript directly. In Section 3.2.1, we show how
ShadowCrypt relies on an upcoming primitive, Shadow DOM, to
securely isolate content in the DOM.
3.1
Isolating JavaScript
In order to meet our security goal, ShadowCrypt must isolate
cleartext data, decryption keys, and its own logic from the applica-
tion. ShadowCrypt is a browser extension, written in HTML and
JavaScript just like a web page. Extensions can interact with and
modify web pages via the page’s DOM, just like scripts on the web
page.
Browsers protect extension logic by running the extension code in
a separate JavaScript environment—even code that interacts directly
with the web page. The JavaScript isolation also includes isolated
DOM APIs. Barth et al. present details about this isolation in Google
Chrome [22]. This mechanism protects ShadowCrypt’s logic from
the untrusted page. Mozilla Firefox implements a similar isolation
mechanism called NativeWrappers [35].
The extension’s JavaScript code is more privileged than the page’s
JavaScript code. It can execute code in the page’s JavaScript en-
vironment by inserting  elements into the page. But
the page’s JavaScript code cannot inject code into the extension’s
JavaScript environment.
3.2
Isolating DOM
The DOM isolation mechanism should isolate both input and
output widgets, and it should maintain the look and feel of the ap-
plication. Isolating parts of the DOM while preserving ﬁne-grained
styling has not been explored in previous work. In this section, we
ﬁrst discuss two unsatisfactory approaches. Then, we introduce the
upcoming Shadow DOM standard and discuss how we used it in
ShadowCrypt.
Strawman 1. iframes leverage a browser’s built-in frame and
origin isolation properties. This provides strong, browser-vetted
secrecy, but iframes create discord, because they disregard the
surrounding page’s text styling.2
Furthermore, cross-origin iframes are resource intensive, par-
ticularly given Chrome’s plans for out-of-process iframes [47].
ShadowCrypt creates a large number of isolated widgets for appli-
cations with many pieces of user data per page, like Facebook and
Reddit.
Strawman 2. We could modify the DOM API such that it hides
the secret content from JavaScript code, for example, by overriding
the getters/setters of an input element to return encrypted values.
DOM has an intricate, complex API that is hard to reason about,
so implementing this technique securely is difﬁcult. We are not
2The seamless attribute could help with the styling issue, but
neither Chrome, Firefox, nor Internet Explorer support it.
1 Enter your name: 
2 
3 
nameDisplay.textContent = ’Hello, ’ + nameField.value + ’!’;
Figure 3: Simple Hello World Application.
aware of any work on formalizing the DOM API and its semantics.
Even if such a formal model existed, the DOM API is continuously
evolving, and ShadowCrypt would always run the risk of vulnerabil-
ity by falling out of sync with the browser’s DOM implementation.
Second, there exist pure HTML mechanisms for sending data to
the server, such as forms. Since form submission only involves the
native browser behavior, it is not subject to our modiﬁed API, and it
acts on the secret data.
3.2.1
ShadowCrypt relies on an upcoming standard, the Shadow DOM,
for isolating cleartext input/output in the DOM. Shadow DOM
speciﬁes a way for an application to deﬁne a separate “shadow”
tree for a particular node in the DOM. The browser then renders a
composition of the main document and shadow trees. We explain
the nature of this composition in more detail with an example in
Section 3.2.2.
Shadow DOM
ShadowCrypt identiﬁes input and output nodes in the main ap-
plication document and deﬁnes a new shadow tree for each. The
shadow tree contains cleartext, while the original node only sees the
ciphertext. The browser composes the main document and shadow
trees, and the user sees the cleartext from the shadow trees.
An explicit goal of the Shadow DOM standard is encapsulation.
It speciﬁes only a few explicit ways for the application to access
the content of a shadow tree. The list of JavaScript objects that can
cross the boundary between DOM and Shadow DOM is a whitelist3
and ShadowCrypt redeﬁnes these objects to nulls.
Keystroke events still traverse the encapsulation boundary. We
rely on the privileged ShadowCrypt extension code to ensure that
keystroke events for secure input do not trigger the application’s lis-
teners. ShadowCrypt checks the target property of any keystroke
events and stops the event propagation if the target is a secure input
widget.
Together, the above two ensure isolation of the shadow tree with
clear text from the main document. The W3C is currently consid-
ering proposals to extend the Shadow DOM standard to include
browser-vetted isolation [18].
3.2.2 Example
Consider a simple Hello World application (shown in Figure 3).
The application waits for a user, Alice, to type in her name and
updates the page with a simple greeting.
Input Shadowing. When Alice loads this page with Shadow-
Crypt enabled, the ShadowCrypt JavaScript code notices the pres-
ence of a text input element. ShadowCrypt creates a shadow tree
for this input element containing a “shadow” input. The shadow
input handles the cleartext data in place of the original, application-
provided input element (Figure 4, left). The shadow input is in a
separate shadow tree, but the browser composes it with the main
document and renders the shadow input element next to the “Enter
your name:” message.
3Appendix A discusses this list in more detail.
3.3 Defending against Active Client-side At-
tacker
Providing a thorough defense against an active attacker at the
client side is difﬁcult. We found a number of challenges in defending
against such a powerful adversary, especially while building a user
interface that ﬁts in with the untrusted page’s visual style. We
discuss two concrete attacks below.
In order to match the page’s look and feel, ShadowCrypt inherits
CSS styles when displaying data to the user. Combined with the
ancillary information such as the dimensions of the output element,
an active attacker can learn information about the cleartext displayed
to the user. For example, Heiderich et al. present an efﬁcient way to
determine the characters in a string from its size by using custom
fonts [24]. Similarly, Stone demonstrated a number of cross-origin
timing attacks leaking text across cross-origin iframes [46].
For seamless integration, ShadowCrypt allows untrusted content
and secure input/output widgets to run in a single page. This design
is vulnerable to mashup integrity attacks like clickjacking. For
example, an attacker could try to layer an unencrypted input over a
passphrase-bearing encrypted input.
Defending against such UI attacks is a broad problem. Extensions
such as NoScript already provide protections against such attacks,
while Huang et al. present the InContext defense, which is also on
standards track at the W3C [25, 32].
Both the attacks above result from our design constraints of seam-
less integration and usability. It is a trivial extension to use separate
tabs/windows instead of Shadow DOM; such a design would be se-
cure from the clickjacking attack mentioned above. We implement
this kind of input for discretionary use: pressing a keyboard com-
mand (Ctrl+Backtick) with a secure input selected causes Shadow-
Crypt to open a dedicated window with the user’s passphrase and a
single text input.
Mitigating the ﬁrst attack is also easy, as long as we disregard
the page’s look and feel: the Shadow DOM speciﬁcation allows the
construction of shadow trees that do not inherit styles.
Our experience shows that enacting these protective measures
tremendously limits the usability of our system, and thus we default
to in-page input and output despite the vulnerabilities above. In the
future, we will investigate mechanisms that compromise between
information leakage and styling ﬂexibility.
3.4 Functionality Impact
Enabling ShadowCrypt means that the main application code
never gets access to the user data in the clear. As a result, the un-
modiﬁed application cannot process the data (save for operations
that work equally well on encrypted data). Depending on the appli-
cation, this can minimally or severely impact the functionality of
the application. We discuss our experience with various classes of
applications and the functionality impact in Section 7.
One limitation that we observed broadly is that the application
code can no longer sanitize the encrypted text. Rich text inputs (such
as comments or blog posts) normally work by providing HTML code
to the application. The application can then sanitize it before render-
ing it again. However, with ShadowCrypt enabled, the application
only sees an encrypted blob and cannot sanitize the untrusted input
values. If ShadowCrypt rendered this potentially untrusted input, it
would create an XSS vulnerability.
Instead, in our current design, we always render the decrypted
value as plaintext. We can also add support for simple formatting
tags, but the fundamental limitation remains: ShadowCrypt does not
have information on which HTML constructs to allow or disallow.
Figure 4: Left: The example application in its initial state. A text input hosts
a shadow input. Right: The example application presenting a personalized
greeting. A span element hosts cleartext.
Hello, Alice!
Listing 1: The browser renders a composed tree equivalent to this HTML
snippet
When Alice clicks on the rendered input element and starts typing,
she is interacting with the shadow input element created by Shadow-
Crypt. As she types, the browser notiﬁes ShadowCrypt of each
keystroke. Each time Alice types a letter of her name, ShadowCrypt
reads the cleartext in the shadow element, encrypts it, and updates
the original input node’s value with the ciphertext. The encrypted
text also includes the ﬁngerprint of the key used for encryption as
well as a sentinel string (=?shadowcrypt) to help easily identify
ciphertext in the page.
Application Processing. When Alice ﬁnishes typing, the appli-
cation receives a change event. Line 4, Figure 3 reads the value
of the original input node, which is the ciphertext set by Shadow-
Crypt. The application concatenates it with “Hello” before setting
the textContent property of the p element (Line 5).