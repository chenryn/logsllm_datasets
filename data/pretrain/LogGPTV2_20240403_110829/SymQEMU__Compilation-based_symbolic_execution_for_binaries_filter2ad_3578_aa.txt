title:SymQEMU: Compilation-based symbolic execution for binaries
author:Sebastian Poeplau and
Aur&apos;elien Francillon
Compilation-based symbolic execution for binaries
SymQEMU:
Sebastian Poeplau
EURECOM and Code Intelligence
PI:EMAIL
Aur´elien Francillon
EURECOM
PI:EMAIL
Abstract—Symbolic execution is a powerful technique for
software analysis and bug detection. Compilation-based symbolic
execution is a recently proposed ﬂavor that has been shown
to improve the performance of symbolic execution signiﬁcantly
when source code is available. We demonstrate a novel technique
to enable compilation-based symbolic execution of binaries (i.e.,
without the need for source code). Our system, SymQEMU, builds
on top of QEMU, modifying the intermediate representation of
the target program before translating it to the host architecture.
This enables SymQEMU to compile symbolic-execution capabil-
ities into binaries and reap the associated performance beneﬁts
while maintaining architecture independence.
We present our approach and implementation, and we show
that it outperforms the state-of-the-art binary symbolic executors
S2E and QSYM with statistical signiﬁcance; on some bench-
marks, it even achieves better performance than the source-based
SymCC. Moreover, our tool has found a previously unknown
vulnerability in the well-tested libarchive library, demonstrating
its utility in testing real-world software.
I.
INTRODUCTION
Symbolic execution is becoming increasingly popular in
program testing. Research over the past few decades has
steadily improved the design and increased the performance of
available implementations [2], [12]. Nowadays, symbolic exe-
cution has a reputation of being a highly effective yet expensive
technique to explore programs. It is often combined with fuzz
testing (so-called hybrid fuzzing), where the fuzzer leverages
heuristics to explore relatively easy-to-reach paths quickly,
while symbolic execution contributes test cases that reach the
more difﬁcult-to-explore parts of the target program [27], [28].
An important characteristic of symbolic execution systems
is whether they require the source code of the program under
test or instead apply to binary-only programs in a black-box
fashion. While source-based testing is sufﬁcient when one is
testing one’s own products or open-source software, many real-
world scenarios require the ability to analyze binaries without
the source code available:
• We are increasingly surrounded by and rely upon em-
bedded devices. Their ﬁrmware is typically available
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23118
www.ndss-symposium.org
•
•
in binary form only. Security audits therefore require
binary-analysis tools [24], [29].
Even when testing one’s own products, proprietary
library dependencies may not ship with source code,
rendering source-based approaches infeasible.
Source-based testing may simply be impractical for
large programs under test. With a source-based tool,
one typically needs to build all library dependencies
in a dedicated manner prescribed by the tool, which
may put a large burden on the tester. Moreover, if
the program under test
is implemented in a mix
of programming languages, chances are that source-
based tools cannot handle all of them.
When a binary-only symbolic executor is called for, users
often face a dilemma: tools optimize either for performance
or for architecture independence but rarely provide both. For
example, QSYM [28] has shown how to implement very fast
symbolic execution of binaries, but it achieves its high speed
by tying the implementation to the instruction set of x86
processors. Not only does this render the system architecture-
dependent, it also increases its complexity due to the sheer
size of modern processors’ instruction sets; in the authors’
own words, their approach is to “pay for the implementation
complexity to reduce execution overhead”. In contrast, S2E [6]
is an example of a system that is broadly applicable yet suffers
from relatively low execution speed. S2E can conceptually
analyze code for most CPU architectures, including kernel
code. However, its wide applicability is bought with multiple
translations and ﬁnally interpretation of the target program
(to be detailed later), which increase the system’s complexity
and ultimately affect performance. In fact, it appears that high
performance in binary-only symbolic analysis is often achieved
with highly specialized implementations—a design choice that
is in conﬂict with architectural ﬂexibility.
In this paper, we show an alternative that (a) is independent
of the target architecture of the program under test, (b) has
low implementation complexity, yet (c) achieves high perfor-
mance. The key insight of our system, SymQEMU, is that the
CPU emulation of QEMU [3] can be combined with a very
lightweight mechanism for symbolic execution: instead of a
computationally expensive translation of the target program to
an intermediate representation that is subsequently interpreted
symbolically (like in S2E), we hook into QEMU’s binary-
translation mechanism in order to compile symbolic handling
directly into the machine code that the emulator emits and
executes. This approach yields performance superior to state-
of-the-art systems while retaining full platform independence.
Currently, we focus on Linux user-mode programs (i.e., ELF
binaries), but it would be possible to extend the concept to full-
system emulation for arbitrary QEMU-supported platforms
(e.g., for ﬁrmware analysis). Moreover, we make SymQEMU
publicly available to foster future research in the area.1
Note that the notion of compiling symbolic handling into
target programs is also at
the core of our previous work
SymCC [20]. We showed that it outperforms other current
approaches to symbolic execution. However, SymCC is only
applicable when source code is available, and therefore does
not support binary analysis. SymQEMU, in contrast, demon-
strates how to achieve similar performance gains in a binary-
only setting, respecting all the additional constraints inherent to
that scenario (see Section II). For a more detailed comparison
of SymQEMU and SymCC, refer to Section III-D.
We compared SymQEMU to state-of-the-art binary sym-
bolic executors S2E and QSYM, and found that it outperforms
both in terms of coverage reached over time. Moreover, we
show that SymQEMU’s performance is similar to that of
SymCC, even though the latter requires access to source code.
Finally, we submitted SymQEMU to Google FuzzBench, a
comparison framework for fuzzers; even though the test suite
is not targeted at symbolic execution systems, SymQEMU
outperformed all included fuzzers on 3 out of 21 targets.
In summary, we make the following contributions:
• We analyze state-of-the-art implementations of binary-
only symbolic execution and identify the respective
strengths and weaknesses of their designs.
• We present an approach that combines the strengths
of existing systems while avoiding most of their
weaknesses; the core idea is a novel technique to apply
compilation-based symbolic execution to binaries. The
source code of our implementation is freely available.
• We evaluate our system in Google FuzzBench, as
well as on open-source and closed-source real-world
software. The raw results, as well as data and scripts
used in our evaluation, will be published with the
paper.
The remainder of the paper is structured as follows: We ﬁrst
review symbolic execution in general, as well as the binary-
only ﬂavor in particular, and existing implementations thereof
(Section II). Then we present design and implementation of
SymQEMU (Section III) and evaluate it against the state of
the art (Section IV). Finally, we discuss future work (Sec-
tion V), place our contribution in the context of previous work
(Section VI), and conclude (Section VII).
II. BACKGROUND
In this section, we present symbolic execution in general
before we examine the challenges of binary-only symbolic
execution and review how state-of-the-art
implementations
address them. Finally we discuss SymCC, a source-based
symbolic executor that was an important inspiration for our
work.
1http://www.s3.eurecom.fr/tools/symbolic execution/symqemu.html
A. Symbolic execution
The general goal of symbolic execution is to keep track of
how intermediate values are computed during the execution
of a target program. Usually, each intermediate value can
be expressed as a formula in terms of the program input(s).
Then, at any point during execution, the system can leverage
those symbolic expressions to answer questions like “can this
array access run out of bounds,” “is it possible to take this
branch of the program,” or “can this pointer be null when
it is dereferenced?” Moreover, if the answer is afﬁrmative,
symbolic executors typically provide a test case, i.e., a new
program input that triggers the requested behavior. This ability
makes symbolic execution extremely useful for automated
program testing, where the goal is to explore as many corner
cases of a program as possible and ﬁnd inputs that cause
crashes or otherwise trigger bugs.
In order to trace computations in the target program,
symbolic execution systems need a certain understanding of
the program’s instruction set. Many current implementations
translate the program to an intermediate representation [4],
[6], [25]; typical examples of such representations are LLVM
bitcode [14] and VEX [17]. The intermediate representation is
subsequently executed symbolically; since the executor only
needs to handle the intermediate language (usually consisting
of a rather low number of instructions), the implementation can
be relatively simple. Moreover, we found in previous work that
queries derived from high-level representations of the program
under test are easier to solve than those derived from low-level
instruction sets like machine code [19].
However, translating programs to intermediate representa-
tions requires computational effort and introduces overhead in
program execution; some implementations therefore choose to
forego any form of translation and work on machine code di-
rectly [22], [28]. Apart from the performance beneﬁts, skipping
program translation helps robustness because concrete machine
code can be executed even when the symbolic executor does
not know how to interpret a given instruction. On the downside,
specializing on the machine code of a particular processor
architecture restricts the symbolic execution system to that
platform. The alternative extreme—working directly on source
code—is less common these days and obviously does not apply
when only a binary is available.
B. Binary-only symbolic execution
Requiring the analysis system to work with just a binary
target adds its own unique set of challenges to the ﬁeld: In the
absence of source code, translating programs to an intermedi-
ate representation requires reliable disassemblers; due to the
challenges of static disassembly [18], most implementations
perform the translation on demand at run time [6], [25].
Moreover, support for multiple architectures becomes crucial
when source code is not available: without source code, cross-
compiling a program for whichever architecture a symbolic
executor supports is not an option. If a symbolic execution
system cannot handle the target architecture of the program
under test,
it simply cannot be used. This is particularly
relevant for the embedded space, where a large variety of
processor architectures is commonplace.
2
Fig. 1.
Overview of angr: the target program is lifted to VEX IR and
interpreted symbolically or executed concretely inside the Unicorn CPU
emulator.
Fig. 3. Overview of QSYM: the target program is executed directly on the
CPU while QSYM instruments it dynamically.
the target program’s dependencies and the operating-system
kernel. To this end, S2E runs an entire operating system
inside the emulator QEMU [3] and connects it to KLEE in
order to execute relevant code symbolically (see Figure 2).
The resulting system is rather complex, involving multiple
translations of the program under test:
Fig. 2.
Overview of S2E: the target program is lifted to TCG ops and
then either translated to host machine code or lifted once more and executed
symbolically in KLEE.
Translation-free symbolic executors thus face portability
challenges in the binary-only scenario, in addition to main-
tainability issues arising from the relatively complex imple-
mentation. Executors that translate the target program to an
intermediate representation fare better, but they still require
a reliable translator for the particular target architecture; sig-
niﬁcant amounts of work have gone into verifying translator
correctness [11]. This is in contrast to source-based symbolic
execution, where intermediate representations can rather easily
be obtained from the program’s source code [4].
In summary, binary-only symbolic execution puts higher
demands on architectural ﬂexibility and the performance of
(run-time) program translation than source-based analysis.
C. State-of-the-art solutions
Having presented the challenges of binary-only symbolic
execution, we now describe three popular state-of-the-art im-
plementations and study the design choices with which they
address those problems.
1) Angr [25]: A “classic” translating symbolic executor. It
reuses VEX, the intermediate language and translator of the
Valgrind framework [17]. The target programs are translated
at run time; the symbolic executor then interprets the VEX
instructions. As an optimization, angr can execute computa-
tions that do not involve symbolic data (i.e., whose results do
not depend on program input) in Unicorn [21], a fast CPU
emulator based on QEMU [3]. Figure 1 illustrates the design.
By virtue of being based on VEX, angr inherits support
for all architectures that VEX knows how to handle. Since the
core of the symbolic executor is written in Python, it is rather
slow [19] but very versatile.
2) S2E [6]: Created from the desire to extend the reach
of the source-based symbolic-execution system KLEE [4] to
1)
QEMU is a binary translator, i.e., in normal operation,
it translates the target program from machine code to
an intermediate representation (called TCG ops), then
recompiles it to machine code for the host CPU.
2) When computations involve symbolic data, the modi-
ﬁed QEMU used by S2E does not recompile the TCG
ops to host code; instead, it translates them to LLVM
bitcode [14], which is subsequently passed to KLEE.
KLEE interprets the LLVM bitcode symbolically and
hands the concrete portion of the results back to
QEMU.
3)
This approach results in a very ﬂexible system that can
conceptually handle many different architectures and trace
layers of the operating system.2
computations through all
However, the ﬂexibility comes at a cost: S2E is a complicated
system with a large code base. Moreover, the two-step transla-
tion from machine code to TCG ops and from there to LLVM
bitcode hurts its performance [19]. Compared with angr from
a user’s point of view, S2E is more involved to set up and run
but provides a more comprehensive analysis.
3) QSYM [28]: With a strong emphasis on performance,
QSYM does not translate the target program to an intermediate
language. Instead, it instruments x86 machine code at run time
to add symbolic tracing to binaries (see Figure 3). Concretely,
it employs Intel Pin [15], a dynamic binary instrumentation
framework, to insert hooks into the target program. Inside the
hooks, it performs the symbolic equivalent of the machine-
code instructions that the program executes.
This design yields a very fast and robust symbolic executor
for x86 programs. However, the system is inherently restricted
to a single target architecture, and the implementation is te-
dious because it needs to handle each and every x86 instruction
that can be expected to occur in relevant computations. In
previous work, we have found QSYM to be a great tool for
the analysis of x86 binaries, but adding support for another
architecture would be a signiﬁcant amount of work.
D. SymCC
The recently presented symbolic executor SymCC [20],
proposed by the same authors as the present publication, does
2At the time of writing, only x86 is fully supported (https://github.com/
S2E/s2e-env/issues/268).
3
UnicornangrBinaryVEX IRNoSymbolic?Yes:libVEXSymbolic interpretationin angrConcreteexecution on the host CPUSynchronizationHostmachinecodeTCG opsS2ETCG lifterBinaryTCG opsNo:TCG compilerSymbolic?LLVMbitcodeHostmachinecodeYes:CustomtranslatorSymbolic interpretationin KLEEConcreteexecution on the host CPUSynchronizationQSYMBinarySymbolic or concreteexecution on the host CPU(based on demand)Dynamic binary instrumentationrepresentation—this way, in order to support a new architec-
ture, only the translator has to be ported. Ideally, one picks
an intermediate language for which translators from many
relevant architectures exist already. Representing programs
in an architecture-independent way for ﬂexibility is a well-
known technique that has been successfully applied in many
other domains, such as compiler design [14] and static binary
analysis [11]. We therefore incorporate it into our design as
well.
While translating programs to an intermediate representa-
tion gives us ﬂexibility, we need to be aware of the impact
on performance: translating binary-only programs statically is
challenging because disassembly may not be reliable (espe-
cially in the presence of indirect jumps [18]), and performing
the translation at run time incurs overhead during the analysis.
We believe that this is the core reason why translating symbolic
executors like S2E and angr lag behind non-translating systems
like QSYM in terms of performance. Our goal is to ﬁnd a way
to build a translating system that still performs well.
First, we note that the speed of both S2E and angr is
affected by non-essential issues that could be ﬁxed with an
engineering effort:
•
•
S2E translates the program under test twice (see Sec-
tion II-C2). The second translation could be avoided
if symbolic execution was implemented on the ﬁrst
intermediate representation.3
Angr’s performance suffers from the Python imple-
mentation; porting the core to a faster programming
language would likely result in a noteworthy speedup.
However, our contribution goes beyond just identifying
and avoiding those two problems. This is where a second
observation comes into play: Both S2E and angr, as well as
all other translating binary-only symbolic executors that we
are aware of, interpret the intermediate representation of the
program under test. (This is independent of the modiﬁcations
suggested above—interpretation is a core part of their design.)
We conjecture that compiling an instrumented version of the
target program yields much higher performance. SymCC has
recently shown that this is true of source-based symbolic exe-
cution [20], but its compiler-based design inherently requires
source code and therefore doesn’t apply to the binary-only use
case (see Section II-D).
Our approach, inspired by the above observations, is the
following:
1)
2)
3)
Translate the target program to an intermediate lan-
guage at run time.
Instrument the intermediate representation as neces-
sary for symbolic execution.
Compile the intermediate representation to machine
code suitable for the CPU running the analysis and
execute it directly.
By compiling the instrumented target program to machine
code, we compensate for the performance penalty incurred by
translating the binary to an intermediate language in the ﬁrst
3In fact, the developers of S2E have plans to do just that, documented at
https://github.com/S2E/s2e-env/issues/178.
Fig. 4.
Overview of SymCC: the source code of the target program is
compiled to machine code; symbolic handling is injected at the level of LLVM
bitcode in the compiler.
not work on binaries; however, SymQEMU draws inspiration
from SymCC, so we brieﬂy outline SymCC’s design here. We
refer interested readers to the original publication for details.
Our core observation when building SymCC was that
most modern symbolic execution systems are interpreters. We