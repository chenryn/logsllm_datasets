### 优化后的文本

#### Windows 运行库
Windows 运行库是一个本地运行库，它看起来像是使用语言投射的 .NET。许多 WPF 控件都为这个新的运行库进行了重写，并且 .NET Framework 的一个子集可以用于这样的应用程序。

由于 System.AddIn 框架过于复杂和缓慢，.NET 4.5 引入了一个新的合成框架：Managed Extensibility Framework（MEF）和名称空间 System.Composition。新的平台独立通信版本由 ASP.NET Web API 提供。WCF 支持有状态和无状态服务以及多种网络协议，而 ASP.NET Web API 则更为简单，基于 Representational State Transfer (REST) 软件架构风格。

**注意：** C# 5 中的 async 和 await 关键字在第 15 章中详细讨论。其中还介绍了 .NET 在不同时期使用的不同异步模式。MEF 参见第 26 章。Windows 应用程序参见第 29～33 章，ASP.NET Web API 参见第 42 章。

### C# 6 和 .NET Core
C# 6 没有像泛型、LINQ 和异步那样的重大改进，但有许多小而实用的语言增强功能，可以在多个地方减少代码长度。许多这些改进都是通过新的编译器引擎 Roslyn 实现的。

**注意：** Roslyn 参见第 18 章。

完整的 .NET Framework 并不是近年来唯一使用的 .NET Framework。某些场景需要更小的框架。2007 年，Microsoft 发布了 Silverlight 的第一个版本（代号为 WPF/E，即 WPF Everywhere）。Silverlight 是一个支持动态内容的 Web 浏览器插件。第一个版本只支持通过 JavaScript 编程。第二个版本包含了 .NET Framework 的子集。当然，不需要服务器端库，因为 Silverlight 始终在客户端运行，但附带的框架删除了一些核心特性和方法，使其更简洁且易于移植到其他平台。桌面版 Silverlight 的最新版本（第 5 版）于 2011 年 12 月发布。Silverlight 也用于 Windows Phone 编程。Silverlight 8.1 用于 Windows Phone 8.1，但这个版本与桌面版本有所不同。

在 Windows 桌面上，巨大的 .NET 框架需要更快的开发节奏和较大的改进。在 DevOps 中，开发人员和运维人员共同工作，甚至可能是同一个人，不断向用户提供应用程序和新特性，这需要快速引入新特性。由于框架庞大且依赖关系复杂，创建新特性和修复缺陷变得非常困难。

有了几个较小的 .NET Framework（如 Silverlight 和 Windows Phone 上的 Silverlight），在 .NET 桌面版本和较小版本之间共享代码变得非常重要。可移植库是一种在不同 .NET 版本之间共享代码的技术。随着时间的推移，随着多个不同的 .NET Framework 和版本的出现，管理可移植库已成为一场噩梦。

为了解决这些问题，需要一个新的 .NET 版本（确实需要解决这些问题）。这个新版本被称为 .NET Core。.NET Core 较小，带有模块化的 NuGet 包，并且其运行时是开源的，不仅适用于 Windows 桌面版，还适用于多种 Windows 设备、Linux 和 macOS。

为了创建 Web 应用程序，完全重写了 ASP.NET Core 1.0。虽然这个版本不完全向后兼容旧版本，但与旧版本相比，它具有许多优点，例如每个网络请求的开销较低、性能更好，并且可以在 Linux 上运行。ASP.NET Web Forms 不包含在这个版本中，因为它并不是为最佳性能设计的，而是基于 Windows Forms 应用程序开发人员熟悉的模式来提高开发人员的友好性。

当然，并不是所有的应用程序都能轻松迁移到 .NET Core。因此，这个庞大的框架也会进行改进——即使改进的速度不如 .NET Core 快。.NET Framework 的完整新版本是 4.6。ASP.NET Web Forms 的小更新包在完整的 .NET 上可用。

**注意：** Roslyn 参见第 18 章。C# 语言的变化参见第 I 部分的所有语言章节，例如，只读属性参见第 3 章，nameof 运算符和空值传播参见第 8 章，字符串插值参见第 10 章，异常过滤器参见第 14 章。本书尽可能使用 .NET Core。.NET Core 和 NuGet 包的更多信息参见本章后面的内容。

### 选择技术，继续前进
了解框架内技术相互竞争的原因后，选择编写应用程序的技术就变得更加容易。例如，如果创建新的 Windows 应用程序，使用 Windows Forms 就不太合适。应该使用基于 XAML 的技术，例如 Windows 应用程序或 WPF 的 Windows 桌面应用程序。

如果创建 Web 应用程序，应使用 ASP.NET Core 和 ASP.NET MVC 6。选择时应排除 ASP.NET Web Forms。如果访问数据库，应使用 Entity Framework 而不是 LINQ to SQL，应选择 Managed Extensibility Framework 而不是 System.AddIn。

旧应用程序仍在使用 Windows Forms、ASP.NET Web Forms 等一些旧技术。仅仅为了改变现有的应用程序而使用新技术是没有意义的。进行修改必须有巨大的优势，例如维护代码已经非常困难，需要大量重构以缩短客户要求的发布周期，或者使用一项新技术可以显著减少编码时间。根据旧应用程序的类型，使用新技术可能并不值得。可以允许应用程序继续使用旧技术，因为在未来的许多年里仍将支持 Windows Forms 和 ASP.NET Web Forms。

本书的内容以新技术为基础，展示创建新应用程序的最佳技术。如果仍然需要维护旧应用程序，可以参考本书的老版本，其中介绍了 ASP.NET Web Forms、Windows Forms、System.AddIn 以及其他仍在 .NET Framework 中可用的旧技术。

### .NET 2015
.NET 2015 是所有 .NET 技术的总称。图 1-1 给出了这些技术的总览。左边代表 .NET Framework 4.6 技术，如 WPF 和 ASP.NET 4。ASP.NET Core 1.0 也可以在 .NET Framework 4.6 上运行。右边代表新的 .NET Core 技术。ASP.NET Core 1.0 和 UWP 运行在 .NET Core 上。还可以创建在 .NET Core 上运行的控制台应用程序。

**图 1-1**

.NET Core 的一个重要组成部分是一个新的运行库 CoreCLR。从 ASP.NET Core 1.0 开始使用这个运行库。此外，.NET 也可以编译为本地代码。UWP 自动利用这一特性，这些 .NET 应用程序编译为本地代码后，在 Windows Store 中提供。其他 .NET Core 应用程序以及运行在 Linux 上的应用程序也可以编译为本地代码。

在图 1-1 的下方，.NET Framework 4.6 和 .NET Core 1.0 之间有一些共享内容。运行库组件是共享的，例如垃圾回收器的代码和 RyuJIT（一个新的 JIT 编译器，将 IL 代码编译为本地代码）。垃圾回收器由 CLR、CoreCLR 和 .NET Native 使用。RyuJIT 即时编译器由 CLR 和 CoreCLR 使用。库可以在基于 .NET Framework 4.6 和 .NET Core 1.0 的应用程序之间共享。NuGet 包的概念帮助把这些库放在一个在所有 .NET 平台上都可用的公共包上。当然，所有这些技术都使用新的 .NET 编译器平台。

### .NET Framework 4.6
.NET Framework 4.6 是过去十年 .NET Framework 不断增强的结果。1.2 节讨论的许多技术都基于这个框架。这个框架用于创建 Windows Forms 和 WPF 应用程序。此外，ASP.NET 5 可以在 .NET Core 上运行，也可以在 .NET Framework 4.6 上运行。

如果希望继续使用 ASP.NET Web Forms，应选择 ASP.NET 4.6 和 .NET Framework 4.6。ASP.NET 4.6 与 4.5 版本相比也有一些新特性，比如支持 HTTP/2（HTTP 协议的一个新版本，参见第 25 章）、用 Roslyn 编译器编译以及异步模型绑定。然而，不能将 ASP.NET Web Forms 切换到 .NET Core。

在目录 `%windows%\Microsoft.NET\Framework\v4.0.30319` 下可以找到框架的库以及 CLR。

可用于 .NET Framework 的类组织在 System 命名空间中。表 1-2 描述了命名空间的层次结构。

**表 1-2**

| 名称空间               | 说明                                                                 |
|----------------------|----------------------------------------------------------------------|
| System.Collections   | 这是集合的根命名空间。子命名空间也包含集合，如 System.Collections.Concurrent 和 System.Data。 |
| System.Collections.Generic | 这是泛型集合的根命名空间。                                           |
| System.Data          | 这是访问数据库的命名空间。System.Data.SqlClient 包含访问 SQL Server 的类。 |
| System.Diagnostics   | 这是诊断信息的根命名空间，如事件记录和跟踪（在 System.Diagnostics.Tracing 命名空间中）。 |
| System.Globalization | 该命名空间包含用于全球化和本地化应用程序的类。                         |
| System.IO            | 这是文件 I/O 的命名空间，其中的类访问文件和目录，包括读取器、写入器和流。 |
| System.Net           | 这是核心网络的命名空间，比如访问 DNS 服务器，用 System.Net.Sockets 创建套接字。 |
| System.Threading    | 这是线程和任务的根命名空间。任务在 System.Threading.Tasks 中定义。      |
| System.Web           | 这是 ASP.NET 的根命名空间。在这个命名空间下面定义了许多子命名空间，如 System.Web.UI、System.Web.UI.WebControls 和 System.Web.Hosting。 |
| System.Windows       | 这是用于带有 WPF 的 Windows 桌面应用程序的根命名空间。子命名空间有 System.Windows.Shapes、System.Windows.Data 和 System.Windows.Documents。 |

**注意：** 一些新的 .NET 类使用以 Microsoft 开头而不是以 System 开头的命名空间，例如用于 Entity Framework 的 Microsoft.Data.Entity，以及用于新的依赖注入框架的 Microsoft.Extensions.DependencyInjection。

### .NET Core 1.0
.NET Core 1.0 是新的 .NET，所有新技术都使用它，是本书的一大关注点。这个框架是开源的，可以在 [http://www.github.com/dotnet](http://www.github.com/dotnet) 上找到。运行库是 CoreCLR 库；包含集合类的框架、文件系统访问、控制台和 XML 等都在 CoreFX 库中。

.NET Framework 要求必须在系统上安装应用程序需要的特定版本，而在 .NET Core 1.0 中，框架（包括运行库）是与应用程序一起交付的。以前，将 ASP.NET Web 应用程序部署到共享服务器上有时可能会有问题，因为提供商安装了旧版本的 .NET。这种情况已经成为过去。现在可以同时提交应用程序和运行库，而不依赖服务器上安装的版本。

.NET Core 1.0 以模块化的方式设计。该框架分成许多 NuGet 包。根据应用程序决定需要什么包。添加新功能时，.NET Framework 会变得越来越大。删除不再需要的旧功能是不可能的，例如，添加了泛型集合类，旧的集合类就变得多余了。.NET Remoting 被新的通信技术取代，或者 LINQ to SQL 已经更新为 Entity Framework。删除某个功能会破坏应用程序。这不适用于 .NET Core，因为应用程序会发布它需要的部分框架。

目前，.NET Core 的框架与 .NET Framework 4.6 一样庞大。然而，这可以改变，它可以变得更大，但由于模块化，其增长潜力不是问题。.NET Core 已经如此之大，本书不可能涵盖每个类型。在 [http://www.github.com/dotnet/corefx](http://www.github.com/dotnet/corefx) 中可以看到所有的源代码。例如，旧的非泛型集合类已被包含在 .NET Core 中，使旧代码更容易迁移到新平台。

.NET Core 可以很快更新。即使更新运行库，也不影响现有的应用程序，因为运行库与应用程序一起安装。现在，微软公司可以增强 .NET Core，包括运行库，发布周期更短。

**注意：** 为了使用 .NET Core 开发应用程序，微软公司创建了新的命令行工具 .NET Core Command Line Interface (CLI)。

### 程序集
.NET 程序的库和可执行文件称为程序集（assembly）。程序集是包含编译好的、面向 .NET Framework 的代码的逻辑单元。

程序集是完全自描述性的，它是一个逻辑单元而不是物理单元，这意味着它可以存储在多个文件中（动态程序集存储在内存中，而不是存储在文件中）。如果一个程序集存储在多个文件中，其中就会有一个包含入口点的主文件，该文件描述了程序集中的其他文件。

可执行代码和库代码使用相同的程序集结构。唯一的区别是可执行的程序集包含一个主程序入口点，而库程序集不包含。

程序集的一个重要特征是它们包含元数据，描述了对应代码中定义的类型和方法。程序集也包含描述程序集本身的程序集元数据，这种程序集元数据包含在一个称为“清单（manifest）”的区域中，可以检查程序集的版本及其完整性。

由于程序集包含程序的元数据，调用给定程序集中的代码的应用程序或其他程序集不需要引用注册表或其他数据源就能确定如何使用该程序集。

在 .NET Framework 4.6 中，程序集有两种类型：私有程序集和共享程序集。共享程序集不适用于 UWP，因为所有代码都编译到一个本机映像中。

#### 私有程序集
私有程序集通常附带在某个软件上，且只能用于该软件。附带私有程序集的常见情况是，以可执行文件或许多库的形式提供应用程序，这些库包含的代码只能用于该应用程序。

系统可以保证私有程序集不被其他软件使用，因为应用程序只能加载位于主执行文件所在文件夹或其子文件夹中的私有程序集。

用户通常希望将商用软件安装在它自己的目录下，这样软件包不存在覆盖、修改或无意间加载另一个软件包的私有程序集的风险。私有程序集只能用于自己的软件包，这样，用户对什么软件使用它们就有了更大的控制权。因此，不需要采取安全措施，因为没有其他商用软件用某个新版本的程序集覆盖原来私有程序集的风险（但软件专门执行恶意损害操作的情况除外）。名称也不会有冲突。如果私有程序集中的类正巧与另一个人的私有程序集中的类同名，不会有问题，因为给定的应用程序只能使用它自己的一组私有程序集。

因为私有程序集是完全自包含的，所以部署它的过程很简单。只需要把相应的文件放在文件系统的对应文件夹中即可（不需要注册表项），这个过程称为“xcopy 安装”。

#### 共享程序集
共享程序集是其他应用程序可以使用的公共库。因为其他软件可以访问共享程序集，所以需要采取一定的保护措施来防止以下风险：

- **名称冲突**：指另一个公司的共享程序集实现的类型与自己的共享程序集中的类型同名。因为客户端代码理论上可以同时访问这些程序集，所以这是一个严重的问题。
- **程序集被同一个程序集的不同版本覆盖**：新版本与某些已有的客户端代码不兼容。

这些问题的解决方法是将共享程序集放在文件系统的特定子目录树中，称为全局程序集缓存（Global Assembly Cache, GAC）。与私有程序集不同，不能简单地将共享程序集复制到对应的文件夹中，而需要专门安装到缓存中。有许多 .NET 工具可以完成这个过程，并要求对程序集进行检查，在程序集缓存中设置一个小的文件夹层次结构，以确保程序集的完整性。

为了避免名称冲突，应根据私钥加密法为共享程序集指定一个名称（而对于私有程序集，只需要指定与其主文件名相同的名称即可）。该名称称为强名（strong name），并保证其唯一性，它必须由要引用共享程序集的应用程序来引用。

与覆盖程序集的风险相关的问题，可以通过在程序集清单中指定版本信息来解决，也可以通过同时安装来解决。

### NuGet 包
在早期，程序集是应用程序的可重用单元。添加对程序集的一个引用，以使用自己代码中的公共类型和方法，此时，仍可以这样使用（一些程序集必须这样使用）。然而，使用库可能不仅意味着添加一个引用并使用它。使用库也意味着一些配置更改，或者可以通过脚本来利用的一些特性。这是在 NuGet 包中打包程序集的一个原因。

NuGet 包是一个 zip 文件，其中包含程序集（或多个程序集）、配置信息和 PowerShell 脚本。

使用 NuGet 包的另一个原因是，它们很容易找到，不仅可以从微软公司找到，也可以从第三方找到。NuGet 包很容易在 NuGet 服务器 [http://www.nuget.org](http://www.nuget.org) 上获得。

在 Visual Studio 项目的引用中，可以打开 NuGet 包管理器（NuGet Package Manager，见图 1-2），在该管理器中可以搜索包，并将其添加到应用程序中。这个工具允许搜索还没有发布的包（包括预发布选项），定义应该在哪个 NuGet 服务器中搜索包。

**图 1-2**

**注意：** 使用 NuGet 服务器中的第三方包时，如果一个包以后才能使用，总是有风险。还需要检查包的支持可用性。使用包之前，总要检查项目的链接信息。对于包的来源，可以选择 Microsoft and .NET，只获得微软公司支持的包。第三方包也包括在 Microsoft and .NET 部分中，但它们是微软公司支持的第三方包。

也可以让开发团队使用自己的 NuGet 服务器。可以定义开发团队只允许使用自己服务器中的包。

因为 .NET Core 是模块化的，所以所有应用程序（除了最简单的应用程序）都需要额外的 NuGet 包。为了更容易找到包，本书使用 .NET Core 构建的每个示例应用程序都显示了一个表格，列出需要添加的包和命名空间。

**注意：** NuGet 包管理器的更多信息参见第 17 章。

### 公共语言运行库
通用 Windows 平台（UWP）利用 Native .NET 将 IL 编译成本地代码。在所有其他场景中，使用 .NET Framework 4.6 的应用程序和使用 .NET Core 1.0 的应用程序都需要 CLR（Common Language Runtime，公共语言运行库）。然而，.NET Core 使用 CoreCLR，而 .NET Framework 使用 CLR。

在 CLR 执行应用程序之前，编写好的源代码（使用 C# 或其他语言编写的代码）都需要编译。在 .NET 中，编译分为两个阶段：

1. 将源代码编译为 Microsoft 中间语言（Intermediate Language, IL）。
2. CLR 将 IL 编译为平台专用的本地代码。

IL 代码在 .NET 程序集中可用。在运行时，JIT 编译器编译 IL 代码，创建特定于平台的本地代码。

新的 CLR 和 CoreCLR 包括一个新的 JIT 编译器 RyuJIT。新的 JIT 编译器不仅比以前的版本快，还在使用 Visual Studio 调试时更好地支持 Edit & Continue 特性。Edit & Continue 特性允许在调试时编辑代码，可以继续调试会话，而不需要停止并重新启动过程。

CLR 还包括一个带有类型加载器的类型系统，类型加载器负责从程序集中加载类型。类型系统中的安全基础设施验证是否允许使用某些类型系统结构，如继承。

创建类型的实例后，实例还需要销毁，内存也需要回收。CLR 的另一个功能是垃圾回收器。垃圾回收器从托管堆中清除不再引用的内存。第 5 章解释其工作原理和执行的时间。

CLR 还负责线程的处理。在 C# 中创建托管的线程不一定来自底层操作系统。线程的虚拟化和管理由 CLR 负责。

**注意：** 如何在 C# 中创建和管理线程参见第 21 章和第 22 章。

### .NET Native
.NET Native 是 .NET 2015 的一个新特性，它将托管程序编译成本地代码。对于 Windows 应用程序，这会生成优化的代码，其启动时间可以缩短 60%，内存使用减少 15%～20%。

最初，.NET Native 将 UWP 应用编译为本地代码，以部署到 Windows Store。现在，.NET Native 未来也可以用于其他 .NET Core 应用程序，尽管它目前还不适用于 .NET Core 1.0 版本，但可用于 .NET Core 的将来版本中。可以将运行在 Windows 和 Linux 上的 .NET Core 应用程序编译为本地代码。当然，在每一个平台上需要不同的本地映像。在后台，.NET Native 共享 C++ 优化器，以生成本地代码。

### Windows 运行库
从 Windows 8 开始，Windows 操作系统提供了另一种框架：Windows 运行库（Windows Runtime）。这个运行库由 Windows Universal Platform (WUP) 使用，Windows 8 使用第 1 版，Windows 8.1 使用第 2 版，Windows 10 使用第 3 版。

与 .NET Framework 不同，这个框架是使用本地代码创建的。当它用于 .NET 应用程序时，所包含的类型和 .NET 类似。在语言投射的帮助下，Windows 运行库可以用于 .NET 应用程序。