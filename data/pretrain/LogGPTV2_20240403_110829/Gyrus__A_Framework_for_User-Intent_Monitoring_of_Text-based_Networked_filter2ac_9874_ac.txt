follows (Figure 3):
The UI monitor communicates with the secure overlay to keep
the information displayed in the overlay up-to-date (0). A
hardware input event reaches the Central Control (1). Central
Control queries the UI Monitor to see if this input triggers
network trafﬁc or not (2). If it does, Central Control queries the
Secure Overlay (3) to create a dynamic authorization vector
that describes the user-intended outgoing trafﬁc and save it
to Authorization DB (4). At the same time, the intercepted
input event is passed to dom-U (4’). After the application
inside dom-U gets the input, it generates the outgoing network
trafﬁc (5). Trafﬁc is intercepted and inspected by the network
monitor. The network monitor queries the Authorization DB
to determine if the intercepted trafﬁc matches user intent (6).
Trafﬁc will be allowed if it matches an authorization vector.
Otherwise, trafﬁc is blocked and Gyrus raises an alarm to
notify the user of a likely attack attempt (7).
B. Implementation
We implemented our prototype of the Gyrus framework
using a Linux / KVM host running Ubuntu 12.04.2 LTS and a
dom-U running Windows 7 SP1. We note that the Gyrus archi-
tecture is not limited to this speciﬁc software stack. We chose
KVM and Windows to demonstrate Gyrus in a traditional
desktop environment. In general, Gyrus only requires three
platform capabilities:
intercepting input & network events,
accessing UI objects, and drawing a secure overlay UI. There-
fore, Gyrus could be implemented on a variety of different
platforms. For example, Gyrus could use BitVisor [34] as a
Overlay that
the trafﬁc-triggering event has occurred. The
Secure Overlay also receives details about what operation and
which application triggered the event, and the content needed
to generate an authorization vector. A point worth noting here
is that we block all updates to the Secure Overlay when we
query the UI monitor. This prevents any malicious updates on
visible data right before the event, even with the prediction of
user’s behavior on trafﬁc-triggering event. Also, we ensure that
the query to the UI monitor completes before the actual input
is delivered to the application inside the dom-U, so it will not
interfere the application’s behavior. Section VI-A presents a
more detailed security analysis of Gyrus.
Extracting Text and UI Structure Data To support the
Secure Overlay, the UI Monitor needs to extract the user-
intended text and associated UI properties. At ﬁrst, before
extracting the currently displayed text, the UI Monitor registers
the text box to be monitored with the Secure Overlay for
tracking its properties. Whenever a text box is in focus,
the UI Monitor will assign it a unique ID based on the
AutomationID, an identiﬁer from UIAutomation, of the UI
object. This identiﬁer will be used for updating properties of
the overlaid text boxes, and indicating which text boxes are
needed for generating an authorization vector. At the same
time, it extracts the required properties form UI object to
support overlaying. To get
the screen location of the text
box, we query its BoundingRectangle property. For text
boxes that support properties such as rich text, formatting,
text selection, and scrolling, the corresponding information
is extracted from the TextPattern object. Finally, the UI
Monitor catches user-intended text from the Value property
of a target text box. For text boxes with hidden content (e.g.,
scrolled-out text), the Value and TextPattern properties
together provide the complete content and useful position
information. The Secure Overlay will be notiﬁed of all ex-
tracted data, along with its identiﬁer, to enable displaying this
information back to the user.
To handle updates to the target text box, once we register
a text box, we subscribe to the PropertyChangedEvent
of target object for the Value property of the object, and in
the event handler, we send the updated content to the overlay.
This will update the Secure Overlay whenever the user edits
the text. Finally, we register to listen for the change in position
of the caret object, and forward this information to the overlay
so we can display the caret properly.
In addition to getting properties for the target text box
object, the UI Monitor tracks windowing events when multiple
target applications are involved. In particular, we adopted the
policy of only displaying on the overlay the text content
of the currently focused window;
this policy signiﬁcantly
simpliﬁes our implementation and only has a small impact on
the usability of our system6. Although overlaid text boxes for
background applications are not displayed, the Secure Overlay
maintains previously captured user-intended text while it is
visible, and disables its update while it is hidden7. Therefore,
the text integrity of background applications can be preserved
even if it is not shown on the screen. To handle window focus
change, we listen for the system-wide FocusChanged and
WindowClosed events from the UIAutomation library. In the
handler of these events, we signal the secure overlay to hide
content of the window that is closed or has lost focus, and dis-
play the content of the newly focused window. We also listen
for the EVENT_SYSTEM_MOVESIZEEND event and send the
secure overlay the updated location of the textual content of
the target application whenever it is moved or resized. Finally,
we choose not to listen for events related to window creation,
but only handle newly opened target applications when the text
boxes of interest in these applications ﬁrst receive focus.
2) Secure Overlay and Central Control: We implemented
both the secure overlay and the central control components as
Java programs that run in dom-0. Since the implementation
of the Central Control is quite simple, we will not present
the details here. However, some implementation details of the
Secure Overlay warrant further discussion.
The Secure Overlay has two primary tasks. First, it is
responsible for securely displaying the user-generated text, as
captured by the dom-U UI monitor. This part mainly involves
some UI/graphics programming, and some book keeping to
group captured text in the same window together for proper
handling of windowing events (in particular, when a window
gains or loses focus, we need to show or hide all captured text
for this window). Our experiments show that the UI monitor
provides us with sufﬁciently rich information to provide a
seamless user experience; captured text are rendered without
noticeable difference in terms of location, size, font and color
(including background color for highlighting text).
The second task for the secure overlay is to capture and
reconstruct the user’s intent based on all the textual content that
is displayed in the overlay window, so that we can determine
what the user intended outgoing trafﬁc should look like when
the user ﬁnally decides to commit what she has typed to the
network. Upon receipt of a trafﬁc-triggering event, the UI
Monitor will send the tag name of the User Intent Signature,
along with identiﬁers for the text boxes that are required to
reconstruct a user’s intent to Central Control. Based on tag-
matching with a User Intent Signature, the Central Control
extracts text content for each corresponding text box from the
Secure Overlay, builds an authorization vector with them, and
saves it to the Authorization DB.
For creating an authorization vector, the Secure Overlay
should maintain the user-intended text. In the case where all
the user-generated text is displayed on screen, this is very
easily achieved. However, the task is more complicated if the
text is displayed in a text box with scrollbar. In this case, the
UI monitor is still able to capture all the text in the textbox;
however, reﬂective veriﬁcation will not work for the text that
has been scrolled out of view. As such, malware in dom-U
can modify the invisible parts of the text without the user
noticing. To solve this problem, the secure overlay keeps track
6Alternatively, we could keep track of the visible region of each target ap-
plication by implementing a mirror display device driver. We have successfully
implemented this functionality, but have not yet integrated it with the rest of
our system.
7Allowing updates while invisible would prevent reﬂective veriﬁcation. If
an update is made, the text box will be marked as being “dirty” and will not
be used for creating an authorization vector until the user sees the updated
content by moving focus into corresponding application.
7
of changes in the content captured by the UI monitor and
only considers updates to the target text box that satisfy the
following criteria as valid:
1)
2)
3)
4)
Updates cannot occur at multiple non-consecutive
locations (i.e., the difference between the old version
and the new version of some captured text can only
be the result of inserting/deleting a single charac-
ter/chunk of text).
Updates can only occur in the visible part of text
(i.e., the point where the character or chunk of text is
inserted or deleted must be visible before the update
occurs).
If a chunk of text is inserted, the end of the chunk
must be visible after the update. Similarly, if one
character is inserted, the character must be visible
after the update.
If a chunk of text
the text following
the deleted chunk must be visible after the update.
Similarly, if one character is deleted, the character
that follows must be visible after the update.
is deleted,
If the UI monitor reports updates that violate the above
condition, the secure overlay will draw a red border over the
corresponding text box to let the user know of the problem.
In this case, the user could check the text displayed by the
overlay to determine if her intent was properly captured by
Gyrus. If it was, she can commit the input to the network. The
above design allows us to correctly and securely handle most
normal operations like typing, deleting text using “backspace”,
copy-and-paste, deleting/replacing a chunk of highlighted text,
even autocomplete and auto-spell-correction; the only caveats
we know of are: 1) “Find and replace all”, and 2) if the user
pastes a chunk of text that is too long to be displayed all
at once, some of the pasted text will not be visible in the
entire process, and is subject to illegitimate modiﬁcations by
malware. In these cases, the best practice will be for the user
to scroll through the pasted text to ascertain the correctness
(and we believe this is a reasonable practice, even if not for
security reasons).
3) Authorization DB: The Authorization DB saves the user
intent captured by the secure overlay at the time we capture
an input event that signiﬁes the user wants to send something
out to the network, and is queried by the network monitor
when actual outgoing trafﬁc of the corresponding protocol is
observed. To allow for efﬁcient lookup by the network monitor,
we implement the Authorization DB as a hashtable stored in
Ruby, indexed by a data structure called authorization vector,
which captures both the exact content of the expected outgoing
trafﬁc, as well as the expected protocol used to send the
content. We also associate each key in the hashtable with a
numeric value which indicates how many messages matching
that key can be sent, so we can handle scenarios where the
user intend the same message to be sent multiple times.
4) Network Monitor: The network monitor is implemented
as a set of transparent proxies, one for each protocol of
interest. Each of these proxies has deep packet inspection
capability, and we used iptables to redirect all of the trafﬁc
of each monitored protocols’ port to the corresponding proxy
for inspection. For SMTP and YMSG, we used stand-alone
proxy software proxsmtp [38] and IMSpector [17], respectively.
Fig. 4. UI structure of Windows Live Mail. Tree structure on the left is
from Inspect.exe. ‘0’ indicates event-receiving object (send button), +2 and
+3 indicate 2nd and 3rd sibling from the origin (negative number indicates
previous sibling). ‘P’ is a symbol for a parent, and ‘C’ refers to child.
For HTTP, even though there exists a transparent proxy with
the capability of ICAP [7] handling such as Squid [39], we
wrote our own implementation due to performance issue8.
For SSL/TLS encapsulated protocols (e.g, HTTPS, and SMTP
TLS), we use the Man-In-The-Middle (MITM) approach to
decrypt the trafﬁc to be analyzed, and re-encrypt it afterwards.
In particular, we created a self-signed CA certiﬁcate and
CA-signed wild-card certiﬁcate, and inject the CA certiﬁcate
to dom-U as a trusted CA. With these certiﬁcates, Gyrus
can impose itself as the server at the setup phase for SSL
connections, and be able to decrypt any subsequent trafﬁc from
dom-U to the actual server. Finally, we note that this MITM
approach is not an invention of our own, but is widely used
approach for deep packet inspection with IDSs/IPSs [33].
5) User-Intent Signature: As we have mentioned in the
introduction, an approach that
tries to model and enforce
correct behavior of applications will inevitably have some per-
application logic. To make this development process as pain-
less as possible, we created our own language for specifying
the per-application logic, as well as the programs to interpret
the speciﬁcations. We call speciﬁcations under our language
User-Intent Signatures, and we express these signatures in the
JSON (JavaScript Object Notation) format. Each user intent
signature contains eight JSON object ﬁelds, and the names
of the ﬁelds are: TAG, WINDOW, DOMAIN, EVENT, COND,
CAPTURE, TYPE, and BIND. In the following, we will give
a brief description of each with its intended purpose. Please
refer to Example 1, and Example 2 for examples of user intent
signature, as well as more speciﬁcs of the signature language.
Before starting, we ﬁrst note that the TAG ﬁeld in this signature
is for assigning a unique signature name.
Identifying Trafﬁc Event and Focused Application Our
monitor component UI Monitor uses this signature to iden-
tify trafﬁc-triggering input events. To specifying a trafﬁc-
generating event in a User Intent Signature, the signature writer
can set the EVENT ﬁeld. This ﬁeld will contain the value
of required hardware input event. For example, it could be
LCLICK to indicate a left mouse click on the send button of
an e-mail client, or ENTER for reacting on pressing return key
on the message dialog of an instant messenger application.
The trafﬁc-triggering event is only partially deﬁned by this
ﬁeld. It should be linked with application-speciﬁc, operation-
8Squid did not support multi-threading for trafﬁc relaying. It can cause
severe delays when a web browser loads a web page.
8
Example 1 User Intent Signature for sending e-mail on
Windows Live Mail.
{
"TAG" : "LIVEMAILCOMPOSE",
"EVENT" : "LCLICK",
"WINDOW" : "ATH_Note",
"COND" : {
"0" : {
"CONT" : "BUTTON",
"NAME" : "Send this message now"
},
"+2" : {
"CONT" : "EDIT",
"NAME" : "To:"
},
"+3" : {
"CONT" : "EDIT",
"NAME" : "Subject:"
},
"P-1CCCCCCCCC" : {
"CONT" : "PANE"
}
},
"CAPTURE" : {
"A" : "+2.value",
"B" : "+3.value",
"C" : "P-1CCCCCCCCC.value"
},
"TYPE" : "SMTP",
"BIND" : {
"METHOD" : "SEND",
"PARAMS" : {
"to" : "A",
"subject" : "B",
"body" : "C"
}
}
}
Example 2 User Intent Signature for posting comments on
Facebook Web-app.
{
"TAG" : "FBCOMMENT",
"EVENT" : "ENTER",
"DOMAIN" : "www.facebook.com",
"COND" : {
"0" : {
"NAME" : "Write a comment...",
"CONT" : "EDIT"
},
"P-1" : {
"CONT" : "IMG"
}
},