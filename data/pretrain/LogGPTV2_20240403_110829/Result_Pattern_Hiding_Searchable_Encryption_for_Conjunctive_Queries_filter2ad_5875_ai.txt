xtoken[c , ℓ] ← A[ ¯idσ(c) , xℓ[i]]1/yc
else
end if
xtoken[c , ℓ] ← B[s[i], xℓ[i], c]
end if
for j = 1 : k do vc[Hj (xtoken[c , ℓ]yc )] = 1 end for
end for
tokenc[i] ← HVE.KeyGen(msk , vc)
α(vc) ← {i ∈ [m] : vc[i] (cid:44) 1}; β(vc , BF) ← P HVE
vc
tokenc[i] ← SHVE(α(vc), β(vc , BF))
resc[i] ← HVE.Query(tokenc[i], ec)
if resc[i] = True then
E[i] ← E[i] ∪ {ec }
end if
Res ← E[i]; ResInds ← DB(s[i]) ∩n
end for
tr[i] ← (Res, ResInds, ((STags[i], xtoken[i], token[i])))
ℓ=2 DB(xℓ[i])
(BF)
end for
return (EDB, tr)
ℓ=2 DB(xℓ[i]) then
// β(vc , BF) = 1 ⇐
¯idσ(c) ∈ DB(s[i]) ∩n
we consider the following adversary B5 against selective simulation
security of HVE. B5 starts to simulate Game6/Game7 by generating
TSet, BF and xtoken exactly as in Game6, and then simulates c and
token with the response from the real/ideal game of HVE. Note that,
(BF) = 1 iff
assuming no false positive happens, it holds that P HVE
vc
ℓ=2 DB(xℓ[i]), hence B5 can derive the input
(α(vc), β(vc , BF)) of SHVE from BF and xtoken[c, ℓ].
By the description of Game6 and Game7, we know that the
real game of HVE with B5 perfectly simulates Game6, while the
ideal game with B5 perfectly simulates Game7, so we have that
Pr[G7 = 1] − Pr[G6 = 1] ≤ AdvHVEB5
Game8: To enable the final simulator to work well with its given
leakage profile, the way of array A being accessed is changed to an
(λ).
p ; t[c]←(y , e) end for
else if ∃j (cid:44) i and ν ∈ [2, n] : ¯idσ(c) ∈ DB(s[j]) ∧ xℓ[i] = xν [j] then
i =1 ← DB
Algorithm 7 : Game8
(idi , Wi)d
for w ∈ W and id ∈ DB(w) do A[w , id] $←− G end for
for w ∈ s do WPerms[w] ← Perm([Ts]) end for
for w ∈ W do
t ← {}; κe
for c =1:Tw do e =Sym.Enc(κe , 0λ); y
T[w] ← t
$←− {0, 1}λ
$←− Z∗
end for
(TSet, STags) ← ST (LT (DB, s), T[s])
c ← SHVE(µ = ‘True’)
for i = 1 : Q do
t ← TSet.Retrieve(EDB(1), STags[i]); E[i] ← {}
( ¯id1 , . . . , ¯idTs ) ← DB(s[i]); σ ← WPerms[s[i]]
for c = 1 : T do
vc ← ∗m
for ℓ = 2 : n do
if c ≤ Ts then
if ¯idσ(c) ∈ DB(s[i]) ∩n
(yc , ec) ← t[c]
ℓ=2 DB(xℓ[i]) then
xtoken[c , ℓ] ← A[ ¯idσ(c) , xℓ[i]]1/yc
xtoken[c , ℓ] ← A[ ¯idσ(c) , xℓ[i]]1/yc
xtoken[c , ℓ] $←− G
else
else
end if
xtoken[c , ℓ] $←− G
end if
for j = 1 : k do vc[Hj (xtoken[c , ℓ]yc )] = 1 end for
(BF)
end for
α(vc) ← {i ∈ [m] : vc[i] (cid:44) 1}; β(vc , BF) ← P HVE
vc
tokenc[i] ← SHVE(α(vc), β(vc , BF))
resc[i] ← HVE.Query(tokenc[i], ec)
if resc[i] = True then
E[i] ← E[i] ∪ {ec }
end if
Res ← E[i]; ResInds ← DB(s[i]) ∩n
end for
tr[i] ← (Res, ResInds, ((STags[i], xtoken[i], token[i])))
ℓ=2 DB(xℓ[i])
end for
return (EDB, tr)
i =1(cid:0)WRP[i] ∪
for w ∈ ˆx and id ∈
Algorithm 8 : Simulator SHXT
j(cid:44)i ,α , β IP[i , j , α , β](cid:1) do
A[id, w] $←− G
end for
for w ∈ EP do WPerms[w] $←− Perm([SP[i]]) end for
(TSet, STags) ← ST (LT (DB, s), T[s])
c ← SHVE(α(vc), β(vc , BF))
EDB ← (TSet, c)
for i = 1 : Q do
R[i] ← WRP[i] ∪
t ← TSet.Retrieve(EDB(1), STags[i]); σ ← WPerms[EP[i]]; E[i] ← {}
( ¯id1 , ¯id2 , · · · , ¯idT′ , ⊥, · · · , ⊥
SP[i]−T′
j(cid:44)i ,α , β IP[i , j , α , β]; T′ ← |R[i]|
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
) ← DB[EP[i]]
for c = 1 : T do
vc ← ∗m
for ℓ = 2 : n do
if c ≤ SP[i] then
(yc , ec) ← t[c]
if ¯idσ(c) (cid:44) ⊥ ∧ ¯idσ(c) ∈ WRP[i] then
else if ¯idσ(c) (cid:44) ⊥ ∧ ¯idσ(c) ∈
xtoken[c , ℓ] ← A[ ¯idσ(c) , ˆx[i , ℓ]]1/yc
xtoken[c , ℓ] ← A[ ¯idσ(c) , ˆx[i , ℓ]]1/yc
xtoken[c , ℓ] $←− G
else
else
end if
xtoken[c , ℓ] $←− G
j(cid:44)i ,ν IP[i , j , ℓ, ν] then
end if
for j = 1 : k do vc[Hj (xtoken[c , ℓ]yc )] = 1 end for
end for
tokenc[i] ← SHVE(α(vc), β(vc , BF))
resc[i] ← HVE.Query(tokenc[i], ec)
if resc[i] = True then
E[i] ← E[i] ∪ {ec }
end if
Res ← E[i]; ResInds ← DB(s[i]) ∩n
end for
tr[i] ← (Res, ResInds, ((STags[i], xtoken[i], token[i])))
ℓ=2 DB(xℓ[i])
end for
return (EDB, tr)
DB(s[i]) ∩n
alternative but equivalent way. We note that the array A in Game7
is only accessed when generating the xtoken, and not ever used
for producing c because the simulator of HVE does not receive the
actual BF (as mentioned in the ideal game of HVE). More specifically,
in this game we replace with a random selection the access of
array A during the generation of xtoken for the case of ¯idσ(c) (cid:60)
ℓ=2 DB(xℓ[i]), except for the repeated accesses, which
does not affect the distribution of xtoken. Note that, a repeated
access to the same position of A happens only if it is called during
two distinct search queries, since computing xtoken for one single
query touches only unique position of A. More precisely, for an
element indexed by (id, w) to be accessed twice, it must hold that
id ∈ DB(s[i]) ∩ DB(s[j]) for some i (cid:44) j and xα[i] = xβ[j] for some
α , β ∈ [2, n]. The condition for such a repeated access is exactly
captured by the third “if” statement in the last loop of this game
(exactly, the IP leakage component). If this condition does not apply,
the xtoken is randomly selected from G. Furthermore, it is easy
to observe that both token and c rely heavily on (α(vc), β(vc , BF))
which are derived from xtoken, so we have that Pr[G8 = 1] =
Pr[G7 = 1].
Simulator: In the following, we present a simulator SHXT that
takes as input the leakage profile L(DB, s, x2, . . . , xn) consisting
of (N , EP, SP, WRP, IP, LT (DB, s), T[s])8 and outputs a simulated
EDB and tr. By showing that the simulator produces the same
distribution as Game8 and then combining the relations between
the games, we get the simulator satisfying the requirements in
Theorem 3.
First of all, our simulator SHXT will compute a restricted equal-
ity pattern of x (cid:17) (x2, . . . , xn) as below, denoted by ˆx. Then it
proceeds to produce its final output through Algorithm 8. The re-
stricted equality pattern ˆx can be computed as follows in terms of
the leakage IP by defining a table such that ˆx[t1, α] = ˆx[t2, β] iff
IP[t1, t2, α , β] (cid:44) ∅. The table ˆx describes which xterms are “known"
to be equal by the adversarial server. In particular, we have that
ˆx[t1, α] = ˆx[t2, β] =⇒ x[t1, α] = x[t2, β], and
(x[t1, α] = x[t2, β]) ∧ (DB(s[t1]) ∩ DB(s[t2]) (cid:44) ∅)
(3)
=⇒ ˆx[t1, α] = ˆx[t2, β].
(4)
Taking as input the leakage profile (N , EP, SP, WRP, IP, LT (DB,
s), T[s]) and the restricted equality pattern ˆx computed as above,
the simulator then works as in Algorithm 8 to generate the EDB =
(TSet, c) and the transcript tr.
In the simulation, array A is only filled out for positions w ∈ ˆx
to keep the reuse pattern of A during the generation of xtoken.
8Note that LT (DB, s) and T[s] are computed in the same way as [12].
j(cid:44)i ,α , β IP[i, j, α , β](cid:1), which is used
i =1(cid:0)WRP[i] ∪
and id ∈ 
indices for that query as R[i] ← WRP[i] ∪
Similarly, the permutations σ’s are assigned with respect to EP, the
repetition of which captures that of sterms s. When computing the
transcript tr[i] for the i-th query, the simulator sets the “revealed"
j(cid:44)i ,α , β IP[i, j, α , β]
and puts them in canonical order, calling them ¯id1, ¯id2, · · · , ¯id|R[i]|.
Since R[i] ⊆ DB(s[i]), the simulator then pads R[i] up to size SP[i]
by setting ¯idk for k ∈ [|R[i]|, SP[i]] to be dummy symbols ⊥. After
that, the simulator uses SP, WRP, IP to simulate xtoken as described
in Algorithm 8.
Next we show the output of the simulator SHXT is identically
distributed as that of Game8. It is clear that the distributions of
t,(yc , ec) are identical to Game8, as (TSet, STags) are computed
exactly in the same way. In addition, the permutations σ’s have
the same distribution, since they are chosen uniformly at random
and reused in the same pattern in both cases. Moreover, we can see
that identifiers in DB(s[i])/DB(SP[i]) are used in the random order
determined by σ, except identifiers not appearing as relevant results
are padded with dummy symbols in DB(SP[i]), and that they follow
the same logic in both Game8 and the simulated game (cf. Algo-
ℓ=2 DB(xℓ[i])
or the set of identifiers containing the sterm of another query with
some same xterm, then the corresponding position of A is accessed;
otherwise, a random group element is selected. At last, what we
need to do is to show the accessed entries from A follow the same
repetition in both games, which is analyzed as below.
Suppose that(id1, xℓ[i]) and(id2, xν[j]) are any two identifier/key-
word pair accessed from A in Game8. Then the simulator SHXT will
read the positions (id1, ˆx[i, ℓ]) and (id2, ˆx[j, ν]) instead. To show
the simulation is identical to Game8, next we argue that
rithm 8): if σ(c)-th identifier is in either DB(s[i]) ∩n
(id1, xℓ[i]) = (id2, xν[j]) ⇐⇒ (id1, ˆx[i, ℓ]) = (id2, ˆx[j, ν]).
Obviously, the ⇐ direction follows readily from (3). As to the other
direction, we know that id1 = id2 are members of the following set
IP[i, k, α , β](cid:1) ∩(cid:0)WRP[j]∪ 
(cid:0)WRP[i]∪ 
IP[j, k, α , β](cid:1),
k(cid:44)i ,α , β
k(cid:44)j ,α , β
as the games only use identifiers from these sets when computing
xtoken. This indicates that id (cid:17) id1 = id2 belongs to DB(s[i]) ∩
DB(s[j]), and thus we can get from (4) that ˆx[i, ℓ] = ˆx[j, ν].
Finally, regarding the distributions of output c and token, they
rely heavily on the distribution of xtoken and can be simulated by
running SHVE with α(vc) and β(vc , BF) as input. Recall that α(vc)
and β(vc , BF) can be derived from xtoken and WRP directly. Up to
now, we get that SHXT perfectly simulates Game8 with its leakage.
Proof of Theorem 5:
The main idea of proving this theorem, as shown in [12], is
similar to that of Theorem 4, except that we need to invoke the
adaptive TSet simulator and respond queries adaptively. Roughly
speaking, to handle the adaptivity, the simulator with input N
chooses N random group elements and then adds them to BF. When
simulating the response to each query, the simulator adaptively
“assigns” elements of the BF to id-keyword pairs. This is in contrast
to the non-adaptive simulator, where it first initializes the A array
and then adds the elements to the BF, as determined by the leakage.
Currently, the simulator first chooses the elements of the BF, and
then uses them or independent elements to initialise A adaptively.
Figure 10: Overall query delay comparison of HXT for differ-
ent sizes of datasets.
Figure 11: Bandwidth communication comparison of HXT
and OXT in 2.93GB dataset.
C HXT SUPPLEMENTARY RESULTS
Finally, some supplementary results are presented in this section.
Query delay. We present the query delay comparison of HXT
in our three datasets to illustrate the efficiency and scalability of
HXT, In this evaluation, we use the execution time of HXT in 2.93
GB dataset as the baseline. Fig. 10 shows the efficiency of HXT, as
there is only a negligible difference between these execution times
of HXT protocol on different sizes of datasets. It also demonstrates
the highly scalable property of HXT, because the invariant query
delay implies that the delay is independent to the size of dataset,
even if the encrypted dataset is larger than the size of RAM.
Communication overhead comparison. Finally, we use the
test query with various selectivities in Sec. 7.3 (i.e. variable term v
AND fixed term a) to compare the communication overhead of OXT
and HXT. The evaluate is conducted in 2.93GB dataset. However, the
communication overhead is identical for different datasets, because
it only correlates with the selectivity of v (see Table 7).
The evaluation result (see Fig. 11) shows that HXT needs 1.5 times
more in communications to transmit the token for HVE, since OXT
only requires the client to transmit xtoken. Such communication
overhead is moderate in our test system, because the client only
sends 100MB tokens at most for a query with about 330K documents,
which can be handled with in several milliseconds. However, it
introduces extra delay for the queries if the selectivity of v is large
and the network bandwidth is limited.
1     10    100   1000  10000 1000001e+06 Selectivity of Variable Term (v)0.00010.001 0.01  0.1   1     10    100   Time (sec)Selectivity of a:1284HXT v AND a in 2.93GBHXT a AND v in 2.93GBHXT v AND a in 8.92GBHXT a AND v in 8.92GBHXT v AND a in 60.2GBHXT a AND v in 60.2GB1     10    100   1000  10000 1000001e+06 Selectivity of Variable Term (v)0.00010.001 0.01  0.1   1     10    100   Amount of Interaction (MB)Communication in HXTCommunication in OXT