###  Sign
一款安全性合格的产品，请求里必然会有 sign 字段，可以防止篡改的同时还能提高逆向分析的难度。
抓包分析之后发现请求的的 `headers` 里头有一个 `APISign` 字段，每一个请求都会通过这个字段对当前的数据以及时间戳进行校验。
按照常规套路，就是反编译之后搜索相关字符串，然后找到加密算法的地方，抠出来。
然鹅，这个 APP 是加固的，首先尝试一下[快速脱壳](https://github.com/hluwa/FRIDA-DEXDump)。
结果好像还不错，`dump` 下来很多 `dex`，可以开始一顿搜索了。  
然鹅：
搜索并没有得到结果，我以为是字符串进行了加密，然后手动打开这堆了 `dex` 文件，也搜索了其他的一些关键字、API，发现确实没有。
另外发现应该少了一些代码，这说明有一个重要的 `dex` 可能没有脱下来
逆向分析就跟股市一样，喜欢起起落落落落落落。短时间内也不纠结为什么脱不下来了，来一次不脱壳的纯动态分析逆算法。
无法脱壳下的动态分析口诀只有两个字：猜、试。 说详细一点，就是信息收集之后一步一步的进行猜想和验证。
####  一
因为 `APISIGN` 是一个 32 位长的 `hex` 字符串，那么可以初步猜想，这可能是个 `MD5`, `SHA1`
之类的摘要算法。那么这个时候，如果开发者使用了系统自带的摘要 `API` 那我们就可以通过 `Hook` 来得到计算之前的数据，从而倒推出签名算法。
关键类: `java.security.MessageDigest`， 通过对这个类的 `getInstance`, `update`, `digest`
方法进行 `hook`， 可以得到所有调用系统 API 的摘要算法、摘要数据、摘要结果。 代码这里不给了，自己实现一份不难。
想象很美好，现实却很残酷，通过这个方法并没有成功 `Hook` 到与请求数据相符合的调用结果，那么基本上这个算法就是自己实现的了。
####  二
大部分 APP 的网络请求，都是通过调用第三方网络框架发出去的，那么，我们可以先尝试一下能不能找到这款 APP 所使用的网络请求框架。
第一个肯定是龙头：`OKHttp`
因为之前有写过现成的针对 `OKHttp` 的抓包、解密工具，所以我就直接尝试启动了一下，结果:
    [*OKHttp-InfoIntercept] not found RealInterceptorChain class
    [*OKHttp-PacketIntercept] not found CallServerInterceptor class
找不到预设的类名，可能是因为混淆或者 APP 在集成框架的时候，很多人会选择修改包名，因为工具之前没有写智能查找的功能，那么可以使用 `objection`
手动查找一下。
使用命令: `android hooking search classes Interceptor`， 先搜一下带 `Interceptor`
的类名，因为一般来说可以通过他们，直接拦截到发包的调用。
结果发现，还是可以找到 `okhttp` 的类的。
那么将找到的这几个类进行一个 `android hooking watch class`。在发送一个请求，发现:
可以成功拦截到调用。那么，观察调用栈:
执行 `android hooking watch class_method
okhttp3.logging.HttpLoggingInterceptor.intercept --dump-args --dump-backtrace
--dump-return`
于是我们得到了 `RealInterceptorChain` 的真正类名
很多时候，`OKHttp` 对请求的加密、`Sign` 都是在开发者自定义的 `Interceptor` 里完成的，而
`RealInterceptorChain` 这个类，是贯穿全部 `Interceptor` 的一个关键点，具体详情可以阅读 `OKHttp` 的源码。对其
`proceed` 方法进行 `Hook` 在调用栈中即可看到所有的 `Interceptor`。
于是: `android hooking watch class_method okhttp3.internal.http.f.proceed
--dump-args --du mp-backtrace --dump-return`
运气很不错，一下子就打出来了一条 APP 包名代码里的调用栈，而且还是 `pkgname + .net` 的包名，一看就是用于网络请求的，信息情报加一：
代码里有一个 .net 的包, 而且这个包并没有被脱下来。这个包基本上一看就知道很关键了。
那么再继续对找到的这个 `Interceptor` 类进行 `hook`， 仔细观察返回结果以及调用栈。
很可惜的是，并未在返回结果里找到与请求相符合的 `sign` 字符串，这说明，`sign` 的算法方法并不在这个类里面。
调用栈里也没有什么可疑的类或者方法，可以说这条线在这里已经断了。
####  三
从二中，我们收获到了一个情报: 未脱下来的代码中有一个 `pkgname + .net` 的包，那么可以先搜索一下，看看这个包中都有一些什么类：
    [usb] # android hooking search classes xxx.xx.xxx.net
    ...... # 具体的类名就不列了
    ......
    Found 54 classes
排除掉一些明显不相关的类，剩下的类不多，只有十几个。一个一个对其进行尝试 `hook`，功夫不负有心人，在一个没有做符号混淆的类中发现了一个方法:
那么观察一下这个方法的输入输出
看到这个，我就觉得基本上已经结束了。
再详细分析一下输入参数，分别是 URL PATH、用户 ID、时间戳等信息，都是已知或者可以自己生成的参数，返回结果就是 HTTP 报文里的
`APISign`。
至于为什么这么方法和类没有做符号混淆，原因是这个算法是在 `SO` 里面的，需要在混淆配置里面排除。
由此，我们又得到了一条新的经验： 下次 `Hook` 不到算法就直接看 `SO`。
####  四
算法调用方法有了，那我们还需要自己逆算法么？no。
`Frida-RPC`，懒人必备，在也不用手撕 `OLLVM`, `VMP`。
    rpc.exports = {
        sign: function (xxx1, path, xxx2, t, xxx3, xxx4) {
            var result;
            Java.perform(function () {
                result = xxxxxxx.yyyyyyySign(context, xxx1, path, xxx2, t, xxx3, xxx4);
            });
            return result;
        }
    };
    sign = script.exports.sign(xxx1, path, xxx2, t, xxx3, xxx4)
完全 OK。 然后再构造一下包体，编码一下逻辑，一个无情的自动点赞机器人就诞生了。
## 正正文
作为一个新世纪的颜值主义者，虽然这哥们长得丑，但我还是希望他能找到一个漂亮的女朋友。于是我添加了一段人脸识别和打分的代码…
原本的逻辑是这样的:
    遍历动态列表 -> 是个女的 -> 点赞
然后我加上了 `F4ce+-` 和 `B4ldu` 的 AI 颜值评分系统之后，逻辑是这样的：
    遍历动态列表 -> 是个女的 -> 识别动态里的全部人脸 -> 评分 -> 大于80分 -> 点赞 -> 关注
最终效果咋样咱也不知道，反正这哥们那几天就抱着个手机在那一直傻乐，前几天跟我说准备跟新的女朋友去旅游，咱也不知道这是哪个新女朋友，咱也不敢问。
## 总结
后来我拿这哥们的账号提取了一点数据，事实证明，`B4ldu` 的颜值评分比较靠谱。