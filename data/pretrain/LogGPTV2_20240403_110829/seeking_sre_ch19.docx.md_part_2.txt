参与的优先级，并发现需要进一步调查的领域。这些概述通常是[生产就绪性审核](https://landing.google.com/sre/book/chapters/evolving-sre-engagement-model.html)流程的输出。
基本服务概述为 SRE
提供了有关服务的详细信息，以便进行更深入的挖掘，这对新入职的 SRE
特别重要。完整的服务概述详细描述了服务及其与环境的响应，以及 SRE
解决意外问题所需的仪表板、指标和相关信息的链接。
### 行动手册
  行动手册是典型的操作文档，它们使轮值工程师能够响应服务监视生成的警报。操作手册包含监视过程生成的每个警报的验证、故障排除和上报说明。行动手册通常与从监控系统生成的警报名称匹配。它们包含需要测试和检查准确性的命令和步骤。当新的故障排除过程可用，并且发现新的故障模式或新增依赖项时，它们通常也需要更新。
行动手册并非警报专用，还可以包括推送版本、监视和故障排除*的生产程序*。生产程序的其他示例包括服务调降、服务维护和紧急/上报。
### 故障报告
  SRE
与大规模，复杂的分布式系统协同工作，并且还通过新功能和新系统的增加来增强服务。因此，考虑到变化的速度，事故和中断是不可避免的。故障报告是
SRE 的重要工具，它们代表了SRE 从事件中学习的正式过程。
事后分析描述生产环境的故障或告警事件，（至少）包括：时间线、用户影响描述、根本原因以及行动项和经验教训。故障报告由经历过故障的小组成员编写，最好是参与并可以负责后续工作的人员。[故障报告需要以无可指责的方式写](https://landing.google.com/sre/book/chapters/postmortem-culture.html)。它应包括了解所发生情况所需的信息，以及可显著减少复发可能性、减少影响和使恢复更加直接的行动项目清单。
### 政策
这些文件应指定生产环境的具体技术和非技术政策。
技术策略可以应用于生产更改日志记录、日志保留、内部服务命名（工程师在实施服务时应采用的命名约定）和用来管理紧急访问的协议等领域。
策略也可以应用于流程。升级策略可帮助工程师将生产问题分类为紧急情况和非紧急情况，并就每个类别的适当行动提供建议。轮值的要求政策概述了团队成员的结构和职责。
### SLA
  SRE 团队记录他们服务的可用性和延迟指标，并监控相对于 SLA 的服务性能。
记录和发布 SLA，并严格衡量最终用户体验，并将其与 SLA 进行比较，使 SRE
团队能够更快地进行创新。这也减少了 SRE 和 SWE
团队之间的摩擦，因为他们可以客观地协商目标和结果，并避免对风险进行主观讨论。
### 定义成功指标
在定义文档要求时，定义如何*衡量*文档的功能质量也很重要。这对于文档的持续维护和改进都很重要，另外如果你希望能够将工作的价值传达给组织的其他人员，这一点也非常重要。
例如，行动手册应该使轮值的 SRE 能够响应警报或完成某个程序。如果 SRE
能够在不需要上报的情况下处理警报，并且如果事后没有认为文档是事件的促成因素，则行动手册具有高功能质量。如果服务概述为
SRE 提供处理故障所需的情境，那么它算是高功能质量的。  
# 将文档集成到工程的工作流中
根据经验，我们强烈建议 SWE 和 SRE
将文档及其关联代码保留在源代码管理中。我们将在本章的其余部分中更详细地讨论这一点，但总结如下：只要文档以简单格式编写，并存储在其描述的代码相邻的同一个源代码管理内，工程师就可以很容易的创建和更新该文档，作为其常规文档的一部分工程工作流，且不需要启用额外的工具。此外，此方法还促进文档与工程工具集（如代码搜索和评审工具以及
IDE）集成；由于代码和文档之间的关系是明确的，就能支持自动关联和更容易的内容发现。
## 谷歌的经验：g3doc 和 EngPlay
   早在 2014 年春天，一些手头有空闲时间的 Google
技术作家就决定做一些前所未有的事情：与他们的客户（内部工程师）交谈，并了解他们在文档方面面临的挑战。正如预期的那样，他们发现大多数工程师对内部工程文档的状态非常不满意。但他们不只是抱怨而已。他们*理解*文档很重要，他们*知道*每个团队都不可能拥有技术作家，并且他们*希望*他们可以更好的完成工作。
其中一些问题来自于不匹配的期望。对于用户来说，获得文档是*紧迫*的：他们现在就需要答案。但对于创作者来说，文档往往优先级较低，特别是考虑到文档的创建存在障碍。在谷歌，几乎所有这些障碍都源于碎片化：文档分散在多个存储库中，包括我们的内部维基、谷歌文档、我们的内联网和内部[谷歌网站](http://sites.google.com)。这意味着，为了创建或编辑文档，工程师必须离开其开发环境，找到正确的文档位置，并花时间在格式设置、布局和其他问题上。像这样的情境切换是昂贵的。在项目处理期间的两次情境切换往往带来
20 分钟的中断；实际上，这种中断会导致失去几个小时真正有效的工作时间。
鉴于时间有限和苛刻的要求，如何证明文档工作的合理性，尤其是你往往不相信这项工作会在绩效审核中得到回报，特别是当你的主要任务（编程）正在兴头时？如果说有些东西必须给予重视，那么一般来说就是文档。
当然，谷歌是一个极端的例子。我们的代码库，google3，被描述为[有超过20亿行的代码，](https://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/)并且可能是世界上最大的代码库。数以万计的工程师使用它和
Piper（位于代码库之上的版本控制系统），每天提交数以万计的更改，每周修改数百万行代码。工程师每天使用的工作流工具与
google3 和 Piper
深度集成。在这样的系统中编码、构建、测试和发布软件可提供非凡的效率。但是，这些效率对文档没有影响，文档几乎位于您想要它所需的任何位置，*并且与*项目代码或标准工程工作流和工具没有显式连接。
如果文档以称为 Markdown
的简洁格式编写，并存储在其关联的代码边上，那是否可能的？毕竟，GitHub
的文档模型（其中文档用 Markdown
编写并随代码一起存储）效果很好。为什么我们不能在谷歌做同样的事呢？我们最初的想法非常简单：使工程师能够查找、创建和维护文档，将文档保留在一种*简单且可移植的格式*（Markdown）中，*放在其关联代码边上*，并通过*反映其在代码库位置的
URL 来呈现文档*。此策略具有一些明显的好处：
-   Markdown
    格式易于学习，易于在源代码中读懂。它的简单性也意味着它是可移植的：如果我们设计的文档模式不好用，那么获取我们的
    Markdown 内容并将其转储到其他位置会很简单。
-   SWE 和 SRE
    可以编辑其文档，将其发送以供审阅，并使用用于创建和编辑代码的相同工具将其提交到源代码管理系统。
-   将文档与其关联的代码保留起来将使工程师更容易找到它们。工程师无需离开
    IDE 并打开谷歌站点、wiki 或谷歌文档，只需在其常规 IDE 中编辑
    Markdown 文件，并将新文档和此前更新的代码一起发送以便审阅。
-   这创造了将文档集成到我们内部 IDE
    中的强大可能性，从而产生了至少一个最小文档（README）存在的默认预期。
-   在反映 Piper 中文档位置的 URL 上呈现页面，将使在我们的 Intranet
    上搜索信息的用户清楚文档和项目之间的关联。
我们起初开发的原型除了渲染简单的标记外，几乎没有别的。我们用几个团队进行了测试。"哇，太丑了，"他们说。"但这个想法？它。。。有趣。给我们一个更好的外观和感觉，一些导航，更好的显示风格，如代码块的特殊处理，我们可能会使用它。"
于是 g3doc
团队开始添加这些基本功能以及显示风格，消除了作者对格式和外观和感觉的顾虑。悄悄地，我们开始与少数团队合作，帮助他们将内容迁移到新平台。慢慢地，消息开始传播。随着兴趣的增长，发生了几件事情：
-   g3doc 团队由来自 Google 的工程师和作家加入，他们发现 g3doc
    缺少对其团队至关重要的功能，并且自愿构建这些功能。我们认为，这种基层自下而上的发展模式很好，对于确保平台反映非常广泛的用户需求至关重要。
-   其他工程工具（如我们的内部代码搜索和审查工具）和内部 IDEs 添加了基于
    g3doc
    的功能，例如在文件提交到代码库之前预览文件的能力。这些变化本身很小，但它们消除了工作流中的摩擦，使得使用常规工程工作流工具创建和编辑文件更加无缝。
-   该平台获得了青睐：有影响力的工程师和领导者，他们将其推广到内部社交媒体上，推荐团队和组织了解，并开始要求他们的团队使用
    g3doc。
在最初的几个月里，推广速度很慢，但大约六个月后，人们的兴趣激增。后来在很大程度上是病毒式传播：团队自行发现
g3doc，并选择用它。三年后（2017 年 10
月），Google（数千个项目）的几乎所有工程文档都使用 g3doc
及其不太以工程为中心的表兄弟
CompanyDoc。至此，谷歌弃用了内部wiki，避免了整个公司的工程知识碎片化。
但是，即使这样的采用数字是令人欣慰的，任何人都可以创建文档；重要的是文档是保持最新的，这需要改变开发人员的行为。我们的理论是，如果让工程师创建和维护文档尽可能简单，并且允许他们按照常规工作流的方式来创建文档，并且如果你的公司创造了提倡文档化的企业文化，那么工程文档的质量将得到改善。事后发现这个项目确实开始生效。大约
75% 的 Google
工程师每月提交文档更改；平均文档文件每月更新几次；关键是，包含代码的所有更改列表中大约有三分之一也包含文档文件。这些指标表明开发人员的行为正在发生变化，文档实际上正在成为
Google 内部工程实践的标准部分。
 我们还推出了 EngPlay，一个用于 SRE 行动手册的 g3doc 版本。EngPlay 为
Google 内的行动手册提供集中托管。EngPlay 比 g3doc
更具弹性，可确保在故障时内容可用。EngPlay
还具有其他功能，可确保行动手册完整并反映系统的当前状态：
-   每个警报都有自己的文档页。该工具会自动将监视配置中的警报，并与行动手册条目进行比较，若警报未记录*或*存在缺少相关文档的警报，则发出缺失文档的警告。
-   如果在预期的 URL 上找不到页面，则通过简单容错机制检查该 URL
    的可能变体，从而提高可发现性。
-   对变量的支持允许 EngPlay
    使用来自监视系统的信息调整警报文档页，例如生成警报的作业的
    ID、受影响群集的 ID，甚至反映系统当前状态的实时图形。
g3doc 和 EngPlay 都使用相同的（EngDoc）服务器作为后端。EngPlay
为了托管行动手册而设计的特点是极其可靠，而 g3doc
则用于一般文档。因此，g3doc 的功能与 EngPlay
功能之间的核心区别是概念性的。
EngPlay
的可靠性从一开始就是重中之重。它几乎可以承受所有故障，并且在紧急情况下可用。由于这种极端可靠性的需要，这需要
EngPlay 是一个单独的服务，并有自己的专用路径供 Piper
调用，而且它的功能相比于 g3doc 显得很有限。