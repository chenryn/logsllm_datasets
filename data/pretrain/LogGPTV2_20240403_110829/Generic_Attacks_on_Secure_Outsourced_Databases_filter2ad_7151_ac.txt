d(x) = d0 + d1x + d2x2 + ··· + dnxn
and its “mirror” polynomial
dR(x) = dn + dn−1x + dn−2x2 + ··· + d0xn,
and deﬁne
F (x) = d(x) · dR(x).
A crucial observation is that the coeﬃcients of F (x) are
u0, . . . , un:
F (x) = unx2n + un−1x2n−1 +··· + u0xn +··· + un−1x + un.
I.e., we can construct F (x) by determining the values ui
based on the query answers volume, and, furthermore, fac-
toring F (x) into two polynomials with non-negative integer
coeﬃcients ˆd(x) and its “mirror” ˆdR(x) provides a solution
to the system 1.
If F (x) uniquely factors into two polynomials with non-
negative integer coeﬃcients then these would be d(x) and
dR(x) and hence u0, . . . , un suﬃce for exact reconstruction.
In practice, one can use algorithms for factoring polynomials
with integer coeﬃcients, e.g., the LLL algorithm [34].
Figure 2 depicts the resulting reconstruction algorithm.
Initially, RO constructs the vector u (RO:line 1) by execut-
ing ConstructUO. The latter retrieves p (the value of p is
discussed later) uniformly drawn queries from the oracle O
(ConstructUO:lines 1-2). O essentially draws a random query
q, and returns the size of the answer (i.e., the communication
volume leakage). Next, ConstructUO determines the number
of distinct queries that returned a speciﬁc number of records,
and returns the result (ConstructUO: lines 3-4). Then, RO
recovers the di’s (RO:line 2) by executing FactorFO using u.
FactorFO initially sets the u0 value (FactorFO:line 1), and
deﬁnes the polynomial F (x) by using as coeﬃcients the val-
ues of u (FactorFO:line 2). Then, it runs any state-of-the-art
polynomial factorization algorithm and stores the factors of
F (x) in a list (FactorFO:line 3). It picks an arbitrary factor
from the list as a factor of d(x), and removes it from the list
along with its mirror (FactorFO:lines 5-7). Finally, it checks
that the resulting polynomial d(x) has non-negative coef-
ﬁcients and if so returns these coeﬃcients (FactorFO:lines
8-10).5 Finally, RO uses the di’s to determine the positions
of the records in the domain (RO:lines 3-6) (recall that each
di represents the distance of record i from record i + 1).
Main Result. The attack described above provides full re-
construction when F (x) uniquely factors into irreducible
d(x), dR(x) over the integers.
In case the factorization of
F (x) results in more than 2 irreducible factors, there may
be more than two candidate solutions for the database, and
the algorithm picks an arbitrary solution.
Remark 4.1. We give an example where a dataset is not
uniquely reconstructed. Let N = 11 and consider a dataset
with sk1 = 1, sk2 = 6. This corresponds to d(x) = 1 +
5x + 6x2 (and dR(x) = 6 + 6x + x2). We get that F (x) =
d(x)·dR(x) = 6+35x+62x2 +35x3 +6x4. Over the integers,
F (x) factors as (1 + 2x)(2 + x)(1 + 3x)(3 + x). Our attack
algorithm may hence choose to recover d(x) = (1 + 2x)(3 +
x) = 3+7x+2x2 (and dR(x) = (2+x)(1+3x)) which results
in sk1 = 3, sk2 = 10. Note that this is not a reﬂection of
the true dataset.
We note here that our experiments indicate that for real
life databases the factorization is likely to result in two irre-
ducible factors d(x) and dR(x). Indeed, this was the case for
all 6,786 datasets used in our evaluation (Section 5.2 below).
5As described, FactorFO ﬁnds one solution to F (x) = d(x) ·
dR(x), it can be modiﬁed to ﬁnd all such solutions.
1234d1=2d2=3d3=1d0=2d4=11N/* Recover distances and actual values */
Algorithm RO:
/* Construct c */
1. u ← ConstructUO
2. ˆd ← FactorFO(u)
3. ˆsk1 ← r[0]
4. For j = 2 to n do:
5.
6. Return ( ˆsk1, . . . , ˆskn)
Oracle O:
1. q ←$ QueryGen
2. C ← Lcomm(q, sk1, . . . , skn)
3. Return C
ˆskj ← ˆskj−1 + ˆd[j − 1]
Algorithm ConstructUO():
1. For k = 1 to p do:
Uk ←$ O
2.
u[Uk] ← u[Uk] + 1
3.
4. Return u · N (N +1)
2·p1
+u[1]xn+1 + u[0]xn + u[1]xn−1 + . . . + u[n]
Algorithm FactorFO(u):
1. Set u[0] = 2u[0] + N + 1
2. Set F (x) = u[n]x2n + u[n − 1]x2n−1 + . . . +
3. f actors ← Factorize(F (x))
4. Set d(x) = 1 (and dR(x) = 1)
5. For each pair of factors e and reciprocal(e) in f actors do
Set d(x) = d(x) · e (and dR(x) = dR(x)· reciprocal(e))
6.
7.
remove e and reciprocal(e) from f actors
8.
9.
10. Otherwise fail
Set ˆd as the coeﬃcients of d(x) and return ˆd
If coeﬃcients of d(x) are non-negative
Figure 2: Reconstruction algorithm using the communication volume leakage
5. EXPERIMENTS
We implemented and ran our attacks on an Intel Core
i7 2.5GHz machine with 16GB of RAM, running MacOS
10.11. Using Parallels, we created two virtual machines run-
ning Ubuntu Linux 14.04, each with 2 CPU cores and 4GB
of memory. Speciﬁcally, our implementation is depicted in
Figure 3. We installed mySQL server on the ﬁrst virtual ma-
chine (hereafter called server), and CryptDB on the second
(called proxy). We implemented our client in Java and ran
it on the proxy. The client stores a database to the server
through the CryptDB proxy, and chooses an attribute to
be indexed. The CryptDB proxy encrypts each record be-
fore storing it to the mySQL server. Then, the user asks
range queries on the indexed attribute, the CryptDB proxy
retrieves the required encrypted records from the server, de-
crypts them, and sends them back to the user. Addition-
ally, we implemented a packet sniﬀer in Java, residing on
the server side, which can only observe the network packets
from the server to the proxy.
In our implementation, the
sniﬀer ignores the communication between the user and the
proxy. Finally, the packet sniﬀer performs our attacks.
Remark 4.2. Factorization might be slow for large num-
ber of records. Thus, we design a simple algorithm (see Ap-
pendix E) that checks the possible combinations of di’s in
order to determine the correct values, and is faster than fac-
torization in practice.
To complete the attack description, we now give a bound
on the number of queries needed for estimating the coeﬃ-
cients u[i].
Claim 4.3. Let p = O(N 4 log N ). Then, an execution of
ConstructUO returns the correct ui’s with inverse polynomial
probability.
Proof. Let E[u[i]] be the expected value of u[i]. We draw
p queries to ensure that every u[i] lies in the range
u[i] ∈ [E[u[i]] − , E[u[i]] + ]
with probability at least 1 − δ, for  = O(1/N 2) and in-
verse polynomial δ. Using the same steps as in the proof of
Theorem 3.1, we get that p is O(N 4 log N ).
Claim 4.4. An execution of FactorFO on the correct in-
puts un, un−1, . . . , u0 returns the correct outputs d0, d1, . . . , dn
when d(x) is irreducible.
Proof. Our algorithm factorizes F (x) (line 3). If d(x)
is irreducible over the integers, then the factoring of F (x)
results in d(x) and dR(x).
Next, we show the optimality of our attack in the number
Figure 3: System implementation
of required queries.
Lemma 4.5. Let the output of QueryGen be uniform. Then
there is a distribution databaseGen such that no outsourced
database system for range queries that leaks the communi-
databaseGen,
cation volume is fully reconstructable wrt.
QueryGen, Lsetup, and Lcomm with O(N 4) queries, where
Lsetup is arbitrary.
Proof. The proof derives directly from Claim D.1 in the
Appendix D.
In order to evaluate the performance of each attack, we en-
crypted and uploaded to the server the 518 datasets from the
Texas Hospital Inpatient Discharge Public Use Data File of
2008 (PUDF)6, and the 1049 datasets from the 2009 HCUP
Nationwide Inpatient Sample (NIS)7. Each dataset repre-
sents a speciﬁc hospital, and consists of records of hospital-
ized patients. We indexed diﬀerent attributes deriving in
6http://archive.ahrq.gov/
7http://www.hcup-us.ahrq.gov/
ServerCryptDBProxyUsersEncrypted QueryEncrypted RecordsQueryRecordsAdversaryClient SidePacketSniffertotal 6,786 databases and ran the attacks on all of them.
Both the attack using the access pattern and the attack
using the communication volume successfully reconstructed
all the search keys in every case. Table 1 summarizes the
characteristics of each data source. The datasets and the
domains are similar to those in [38].
capture the packets of all the users simultaneously. Finally,
we note that our attack always succeeds to fully reconstruct
the records on the domain.
5.1 Access Pattern Attack
Table 1: Dataset Characteristics
Source Datasets
PUDF
518
NIS
1049
Index
Mortality Risk
Age (<18)
Age (≥ 18)
Age (All)
Length of Stay
Age (<18)
Age (≥ 18)
Age (All)
Length of Stay
N
4
6
16
22
365
18
107
125
365
n(max)
55,605
20,454
34,162
50,626
55,605
16,954
106,252
121,663
121,663
Source
PUDF
NIS
n(avg)
5,612
1,170
4,130
5,300
5,612
1,195
6,240
7,435
7,435
Table 2: Access pattern attack
Positions
Ordering
Index
Mortality Risk
Age (<18)
Age (≥ 18)
Age (All)
Length of Stay
Age (<18)
Age (≥ 18)
Age (All)
Length of Stay
1 ms
1 ms
1 ms
1 ms
43 ms
1 ms
1 ms
1 ms
5 ms
1 ms
1 ms
1 ms
1 ms
4.2 sec
1 ms
202 ms
356 ms
3.4 sec
Dense
85%
34.1%
67.3%
32.2%
0%
31.5%
0%
0%
0%
The average number of patients per hospital from the
PUDF source is 5,612 (with minimum 1 and maximum 55,605).
Each patient record has size 1,486 bytes (1,547 bytes after
the encryption). We used 3 attributes of the PUDF datasets
as the ordered domains for the range queries, namely Mor-
tality Risk, Age, and Length of Stay. The Mortality Risk
has 4 possible values; minor, moderate, major, and extreme.
The Age domain consists of 22 diﬀerent values, each repre-
senting an age interval, instead of a speciﬁc age in years.
We further divided it into two domains; one for patients
under the age of 18, and one for adult patients, assuming
that some users are only interested in these attribute val-
ues. The Length of Stay represents the number of days a
patient was hospitalized. Each domain position is a speciﬁc
number of days, ranging from 0 to 364. Finally, the combi-
nations of search keys and datasets produce essentially 2,590
diﬀerent databases because for each domain, the records are
distributed diﬀerently.
The NIS datasets incorporate similar information, with
average number of patients equal to 7,435 (minimum 1 and
maximum 121,663) and record size of 621 bytes (684 bytes
after the encryption). However, there is no Mortality Risk
information. As such, we indexed only the Age and Length
of Stay attributes. Again, we divided the Age domain into
two additional domains for minor and adult patients respec-
tively. NIS has more detailed age information, i.e., each
domain position represents a speciﬁc age in years, ranging
from 0 to 124. The eﬀective databases are in this case 4,196.
We ﬁrst gathered enough queries in order to be able to
run each attack. The user issues uniformly drawn range
queries to the proxy. For each query, the proxy retrieves
the encrypted records, decrypts them, and sends them back
to the user. Then, the client asks the next query. The
running time depends on the number of required queries
(or in the domain size), the number of records to decrypt,
the network speed, and the number of users. For all the
datasets, this time varied from some seconds to one month
(for retrieving N 4 queries on the large domain with size N =
365). For datasets where the required time for executing
enough queries exceeded an hour, we simulated the query
retrieval. However, we expect that in real life scenarios the
system is running for more than several months, and more
importantly, that several users are issuing queries. In case
of 100 users issuing queries, the packet sniﬀer would gather
enough information 100 times faster (e.g., only a few hours
for the largest domain size of N = 365), because it can
In this section we evaluate the running time of the attack
using the access pattern leakage. Table 2 summarizes our re-
sults. Column Ordering represents the average required time
to recover the order of the records using N 2 log N queries,
while Positions depicts the average time needed to recover
the positions, requiring N 4 queries.
If a dataset is dense,
then the attack terminates when it determines the order.