另外，PAUSE（ Perl 作者上载服务器   （    Perl Authors Upload Server    ） ）在过去的几年里得到了不少人的喜爱。这使他们可以更容易适应未来的需要。从事这方面工作的人都是经验丰富、才华横溢的人，他们让代码库变得更加容易管理。
### 为什么要跳到大版本？
一个主要版本可以与用户订立不同的契约。跳转到一个主要版本可以用新的默认行为来改变这个契约，即使这与过去有冲突。如果你愿意的话，总会有办法将所有这些设置都重置为旧的 Perl 5 默认行为。不过在语法和行为上，Perl 7 的代码（大部分）仍然是 v5.32 的代码。
Sawyer 谈到了 Perl 用户的三个主要细分市场：
* 绝不会改变他们的代码的人
* 使用新功能的人
* 从零开始的人
Perl 5 的社会契约是 极度后向兼容   （    extreme backward compatibility    ） ，并且在这方面取得了惊人的成功。问题是，极度后向兼容对那些不会更新代码的人有效，但对另外两部分人没有帮助。要使用新功能的人不得不在每个程序中加入挺长的例行模板部分，而从零开始的人们则想知道为什么他们创建一个程序就必须包含这么多，才能不让 StackOverflow 上的人因为少了那些编译指令而呵斥他们。
> 
> 硬核老王：迎合新血才是最重要的，让旧代码和旧人们自己过吧。
> 
> 
> 
### 为什么是 7，而不是 6？
这个答案分为两部分。 首先，“Perl 6” 已经被现在称为 [Raku](https://raku.org/) 的产品所采用。很久以前，我们认为这件非常雄心勃勃的重写工作将取代 v5.8。但最后，这件事并没有发生，Perl 语言依旧继续过着自己的生活。
因此，下一个可用数字为 7。如此而已。这只是序列中的下一个基数。版本跳跃这事情并不稀奇：PHP 直接从 5 升到了 7 —— 难道是我们从 PHP 社区偷学到的跳跃技能？看看一下历史上的其他奇怪的版本变化：
* 从 Solaris 2.6 到 Solaris 7
* 从 Java 1.4 至 Java 5
* 从以 Postgres 9.x 为主要版本变成了以 Postgres 10 为主要版本
* Windows 3.1 至 Windows 95（98、ME、2000、XP、Vista、7、8、10）
* TeX（每个新版本都更趋近于圆周率 π ）
至少我们没跳到 Perl 34！
> 
> 硬核老王：言外之意，你们跳得，我也跳得~而且，你们不觉得版本 6 这个数字有点不吉利么，而版本 7 这个数字就好多了。
> 
> 
> 
### 有什么消失了么？
消失的东西不多。有些东西在默认情况下会被禁用，但同样，这本质上是调整旋钮和拨盘指向不同地方的 Perl 5.32。即使在 Perl 5 的土地上，有些东西你也应该学会不需要。以下这些都是第一轮变化的可能目标：
* 间接对象符号
* 裸词文件柄（标准文件柄除外）
* 伪多维数组和哈希值（老的 Perl 4 花招）
* Perl 4 风格的原型定义（使用 `:prototype()` 代替）
> 
> 硬核老王：是该学会放弃了，又不是区块链，什么旧的都不能丢下。
> 
> 
> 
### 增加了什么？
增加的也不多。Perl 7 主要是 Perl v5.32，但默认启用了所有的功能。你不需要做任何事情就可以获得大多数新功能，比如[postfix 解引用](https://www.effectiveperlprogramming.com/2014/09/use-postfix-dereferencing/)，新的 [isa 操作符](https://www.effectiveperlprogramming.com/2020/01/use-the-infix-class-instance-operator/)，或者其他一些功能。这就是一个主要版本可以提供的新社会契约的好处。这是一个硬边界，新功能可以在一边默认存在，而不干扰另一边。
> 
> 硬核老王：多增加点新的编程语言技能吧！哪怕是语法糖。
> 
> 
> 
### 那我现在应该做什么？
如果你需要一个旧版的 Perl 来运行你的代码，你继续好了。那些旧版本是不会消失的。就像 Perl 5.6 到现在仍然可以使用，如果那是你希望运行的版本的话。
如果你的代码在那些约束和警告下运行没有问题，而且你使用的是现代 Perl 风格，可能你大部分代码都不用动。如果你有一些裸词的文件柄，就开始转换这些，间接对象符号也一样。
如果你的代码比较凌乱，你也不是没有机会。在从 Perl 5 到 7 的过渡过程中，会有兼容模式来帮助你（但不是 Perl 5 到 8）。一个编译指令可以把那些旋钮和拨盘设置回旧的设置（但这最多也就是一个版本的事情）。
```
use compat::perl5;  # 行为类似 Perl 5 的默认行为
```
对于模块来说，还有一些问题需要解决，但也会有一个兼容机制来解决这些问题。
> 
> 硬核老王：代码实在写的烂（辩解：我这不是烂，是 Perl 的古怪传统），那没办法，只能给你一次机会。
> 
> 
> 
好消息是，这些东西已经被主要的 Perl 利益相关者在生产环境中进行了测试。这不是纸上谈兵：我们已经在做了，一些粗陋的地方正在调整打磨。
而且，v5.32 中已经有了一些这些旋钮和拨盘，比如，你可以这样关闭间接对象表示：
```
no feature qw(indirect);
```
预期会有更多的旋钮或拨盘，或许像这样：
```
no multidimensional;
no bareword::filehandle;
```
我在《[为 Perl 7 做准备](https://leanpub.com/preparing_for_perl7)》一书中收集了所有这些信息，这是我通过 [Perl School](https://perlschool.com/) 和 LeanPub 提供的最新产品。
> 
> 硬核老王：本文作者 brian d foy 也是《 精通 Perl   （    Mastering Perl    ） 》 的作者，我是这本书是中文译者之一。
> 
> 
> 
### 一句话总结
Perl 7 是 v5.32，设置不同而已。你的代码如果不是乱七八糟的，应该可以用。预计一年内会有用户发布。
> 
> 硬核老王：作为一个老 Perl 程序员，这个消息让我又动心了，认真考虑是不是再投回 Perl 的怀抱，哦不，是 Perl 7 的怀抱。
> 
> 
>