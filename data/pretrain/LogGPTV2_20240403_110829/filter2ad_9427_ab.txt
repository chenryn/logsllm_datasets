        g.logger.Info("Creating gossip service with self membership of", g.selfNetworkMember())
        g.certPuller = g.createCertStorePuller()
        g.certStore = newCertStore(g.certPuller, g.idMapper, selfIdentity, mcs)
        if g.conf.ExternalEndpoint == "" {
            g.logger.Warning("External endpoint is empty, peer will not be accessible outside of its organization")
        }
        go g.start()
        go g.connect2BootstrapPeers()
        return g
    }
  * 之后通过`g.conf.BootstrapPeers( )`方法读取了core.yaml配置文件并获得了bootstrap超级节点的值。
    func (g *gossipServiceImpl) connect2BootstrapPeers() {
        for _, endpoint := range g.conf.BootstrapPeers {
            endpoint := endpoint
            identifier := func() (*discovery.PeerIdentification, error) {
                remotePeerIdentity, err := g.comm.Handshake(&comm.RemotePeer{Endpoint: endpoint})
                if err != nil {
                    return nil, errors.WithStack(err)
                }
                sameOrg := bytes.Equal(g.selfOrg, g.secAdvisor.OrgByPeerIdentity(remotePeerIdentity))
                if !sameOrg {
                    return nil, errors.Errorf("%s isn't in our organization, cannot be a bootstrap peer", endpoint)
                }
                pkiID := g.mcs.GetPKIidOfCert(remotePeerIdentity)
                if len(pkiID) == 0 {
                    return nil, errors.Errorf("Wasn't able to extract PKI-ID of remote peer with identity of %v", remotePeerIdentity)
                }
                return &discovery.PeerIdentification{ID: pkiID, SelfOrg: sameOrg}, nil
            }
            g.disc.Connect(discovery.NetworkMember{
                InternalEndpoint: endpoint,
                Endpoint:         endpoint,
            }, identifier)
        }
    }
  * 随后启动连接 g.disc.Connect( )方法，将 endpoint 作为参 数传入。
  * 使用 d.createMembershipRequest( )方法生成请求信息。
  * 将 endpoint 和自身 PKIid 组合，利用 go `d.sendUntilAcked( )`  
方法将 req 信息发送至对应 endpoint。
    func (d *gossipDiscoveryImpl) Connect(member NetworkMember, id identifier) {
        for _, endpoint := range []string{member.InternalEndpoint, member.Endpoint} {
            if d.isMyOwnEndpoint(endpoint) {
                d.logger.Debug("Skipping connecting to myself")
                return
            }
        }
        d.logger.Debug("Entering", member)
        defer d.logger.Debug("Exiting")
        go func() {
            for i := 0; i < maxConnectionAttempts && !d.toDie(); i++ {
                id, err := id()
                if err != nil {
                    if d.toDie() {
                        return
                    }
                    d.logger.Warningf("Could not connect to %v : %v", member, err)
                    time.Sleep(d.reconnectInterval)
                    continue
                }
                peer := &NetworkMember{
                    InternalEndpoint: member.InternalEndpoint,
                    Endpoint:         member.Endpoint,
                    PKIid:            id.ID,
                }
                m, err := d.createMembershipRequest(id.SelfOrg)
                if err != nil {
                    d.logger.Warningf("Failed creating membership request: %+v", errors.WithStack(err))
                    continue
                }
                req, err := m.NoopSign()
                if err != nil {
                    d.logger.Warningf("Failed creating SignedGossipMessage: %+v", errors.WithStack(err))
                    continue
                }
                req.Nonce = util.RandomUInt64()
                req, err = req.NoopSign()
                if err != nil {
                    d.logger.Warningf("Failed adding NONCE to SignedGossipMessage %+v", errors.WithStack(err))
                    continue
                }
                go d.sendUntilAcked(peer, req)
                return
            }
        }()
    }
  * 得到范围信息并更新地址数据库。
**（2）地址数据库详情**
Fabric 采用超级节点的形式，都需要接入超级节点。在加载地址的时候，节点只需要验证super节点的存在并去那里取地址即可。节点通过解析收到
消息，检查节点是否正常，维护节点列表，不仅如此还定时与 连接节点通信，一旦被连接节点超过配置时间没有响应，则将 其移出节点列表，加入离线列表。