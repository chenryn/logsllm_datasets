# Why Does My Security Camera Scream Like a Banshee?

## Signal Analysis and Reverse Engineering of a Proprietary Audio-Data Encoding Protocol

### About Me
- **Rion Carter**
- **Software Engineer** with a passion for coding and problem-solving.
- **Hacker Mindset**: Move fast, break things, and then fix them.
- **Recipe Hacking**: Turning code into delicious results.
- **Opinionated**: All opinions are my own and may not reflect those of past or present employers.
- **Contact**: [7thzero.com](http://7thzero.com)

### Table of Contents
1. Introduction
2. Signal Analysis
3. Reversing the APK and App Analysis
4. Hacking the Signal
5. Demo: Master the Signal

### 1. Introduction
#### What Are We Doing Here?
- **Original Goal**: Use an inexpensive wireless camera to monitor the garden.
- **Challenges**:
  - Vendor app requires a login.
  - No direct configuration options (lacks Bluetooth and Ad-Hoc WiFi).
  - Lack of reliable documentation for a $30 camera.
  - Cloud app lock-in.

#### New Goal
- Figure out what is happening during the camera setup process.
- Investigate the proprietary audio-data encoding protocol used for pairing.

### 2. Signal Analysis
#### Capture, Visualization, and Patterns
- **Capture & Visualize**: Use tools like Audacity to capture and visualize the signal.
- **Repetition**: Identify repeating parts of the signal.
- **Replay & Variation**: Analyze differences and outliers in the signal.
- **Fuzzing / Simulation**: Take control of the input and examine the output.

#### Initial Observations
- The signal is digitized in coded tones.
- Tones are in the 3KHz to 5KHz range.
- The complete sequence repeats several times.
- The signal is not binary and does not match a 56k modem.

#### Manual Mode
- Use Audacity labels to calculate frequencies.
- Zoomed-view of frequency detection shows consistent range control signals.
- Manual mode has limitations due to variability in audio playback and capture.

### 3. Reversing the APK and App Analysis
#### Preparation
- Enable Developer Mode on your Android test device.
- Allow USB Debugging.
- Ensure Android Studio is installed (includes `adb` command).
- Verify `adb` installation and USB debugging.

#### Extract the APK
1. Open a terminal and execute:
   ```sh
   adb shell pm list packages | awk -F':' '{print $2}' | grep jawa
   ```
2. With the package name, execute:
   ```sh
   adb shell pm path com.jawa.cam | awk -F':' '{print $2}'
   ```
3. Pull the APK:
   ```sh
   adb pull /data/app/com.jawa.cam-1/base.apk
   ```
4. Rename the APK:
   ```sh
   mv base.apk com.jawa.cam.apk
   ```

#### Decompile the APK
- **Using JADX**:
  1. Download the latest release from [GitHub](https://github.com/skylot/jadx/releases).
  2. Extract the archive.
  3. Decompile the APK:
     ```sh
     ./jadx ~/tmp/apk/com.jawa.cam.apk -d ~/tmp/apk/jawa-decompiled
     ```

- **Using Android Studio**:
  1. Open the decompiled APK in Android Studio.
  2. Configure the Android framework.

#### Live Log Analysis
- **Setup**:
  - Plug in your Android Test Device.
  - Select the LogCat tab in Android Studio.
  - Search for log entries using regex: `OutAudio|PRETTYLOGGER|jawa|Decode`.

- **Logs on App Startup**:
  - Distinctive characters: `biz 加密前`
  - URL: `https://ap.jawalife.net/jawa/login.do`
  - UrlParams with a lot of data.

- **Logs on Camera Pairing**:
  - Notable string: `myList size`
  - ByteArrayRequest and new URL endpoint: `checkBindVoice.do`
  - More distinctive characters, SSID, Password, and other data: `声波信息— >DEFCON29-29IsOnline-87gz811`
  - Class to investigate: `com.ithink.activity.camera.BindDeviceNewActivity`
  - HttpRequestHelper used to phone home with pairing session details.

#### String Search
- Searching within the project for `声波信息` uncovered a method that includes:
  - Delimiter `0x01` for fields.
  - A `smartCode` (randomly generated for each pairing attempt).
  - The string `"1"` appended at the end (`MSG_DB_NOTIFY_REACHED = "1"`).

### 4. Hacking the Signal
- **Replicate the Signal**: Use the insights gained from the signal analysis and reverse engineering to replicate the signal.
- **Fuzzing and Simulation**: Automate the process to generate and test permutations of the signal.

### 5. Demo: Master the Signal
- Demonstrate the ability to control and understand the signal, allowing for a deeper understanding of the camera's setup process.

By following these steps, we can demystify the audio-data encoding protocol used by the security camera and gain better control over its setup and operation.