Why does my security 
camera scream like a 
Banshee?
Signal analysis and RE of a proprietary 
audio-data encoding protocol 
About Me
Love me some 
codes!
Move fast and break 
things... then fix 
them!
Recipe hacking with 
delicious results!
Hacker Mindset
🤍 Food
Software Engineer
Opinionated
All opinions are my own 
and may not reflect those 
of past/present employers
Rion Carter
www: 7thzero.com
Reversing the APK and digging deeper 
with Ghidra
App Analysis
03
Introduction
01
Signal Analysis
Capture, visualization and patterns 
02
Hacking the Signal
Replicate the signal
04
Demo
Master the Signal
05
TABLE OF 
CONTENTS
What are we doing here and why this 
wireless security camera?
What Are We Doing Here?
And why are we talking about 
wireless security cameras?
01
Original Goal: Use an inexpensive 
wireless camera to monitor the 
garden
Inexpensive Camera
Sounds easy... What’s the catch?
Vendor app 
requires a login
No way to directly 
configure the camera
(lacks BT/AD-HOC WIFI)
Good luck finding 
reliable docs on a 
$30 camera
No self-setup
No docs
Cloud ‘App’ 
Lock-in
Bespoke Setup Protocol 
Using Soundwaves
Which is what brings 
us here today ;)
Listen to This
Listen to This
New Goal: Figure out what is 
going on during camera setup
Time to investigate!
Hardware
Unfortunately, this 
is not an avenue of 
investigation
The cable supplies 
power to the camera
USB
Camera Inspection
On boot, the camera 
enters ‘setup mode’
Setup mode requires 
the app for pairing
The camera does not 
advertise an Ad-Hoc 
network or show up 
as a bluetooth device
BT/WIFI
Camera Inspection
Software
JAWA is the app 
used to configure 
the ‘Cloud 
Camera’
Meet JAWA
Vendor App
Unfettered 
internet access
The App needs 
something...
Vendor App
All vendor-app 
analysis performed 
on a ‘vintage’ 
BlackBerry Priv
Time for a 
‘test’ device
Vendor App
Searching for terms like ‘Amiccom’, ‘Smart IP Camera’, and ‘audio pairing wifi camera’ 
didn’t turn up a whole lot. Expanding the search found additional cameras that may use a 
similar pairing technique, though...
●
Imou Cue 2, Ranger 2, LOOC, Bullet Lite, Ranger Pro
Not much online...
Interestingly enough, I found examples of cheap cameras that use a less-flaky approach 
(QR Code Scanning) in place of audio pairing:
●
BESDER 1080P Cloud Storage Wireless PTZ IP Camera
●
Swann Indoor/Outdoor Wireless 1080p WiFi Security Camera
It sounds... Intriguing?
Signal Analysis
02
What should we try?
Capture & 
Visualize
Capture the signal, 
use tools to 
visualize the signal
Reptition
Are there any parts 
of the signal that 
repeat?
Replay & Variation
What differences stand 
out? Any outliers? 
Patterns where variated 
output is observed?
Fuzzing / Simulation
Take control of the 
input and examine 
the output
Capture viewed in Audacity
Eyeball analysis: could this be like 
an old dial-up modem?
It definitely sounds funky
Confirmed:
Not a Modem
Camera Comm Signal
56k Modem
Spectrographs are 
substantially different
Eyeball analysis
● Collapsed-Spectrograph view shows output in 3000Hz → 5000Hz range
● Quick eyeballing of the graph shows a few areas of interest
Can we get more precise?
Pretty pictures can only take us so far
Manual Mode
Use Labels in Audacity:
● Position the cursor over each 
frequency time-slice
● Press Ctrl-B to add the label
● This will cause Audacity to 
calculate the frequency of 
each tone
Manual Mode
View the Labels in Audacity:
● Click on Edit → Labels → 
Edit Labels...
● Audacity will show a list of 
labels
● This list of labels will include 
frequency information
● Press the Export button to 
get this in a text file for 
analysis
Manual Mode
Zoomed-view of frequency detection
What do we know now?
What do we know now?
Despite the audible-
medium, the signal 
is digitized in coded 
tones
Tones are in the 
3Khz to 5Khz range
Outliers at the top and 
bottom  of the spectrum 
warrant a closer look
Consistent Range Control Signals...?
Tone-encoded
Repetition
The complete 
sequence repeats 
several times
Not ‘Binary’
The signal isn’t two-
toned or ‘directly’ 
sending 1’s and 0’s
Not 56k Modem!
Spectral 
analysis does 
not match
Can we go further with 
Manual Mode?
Can we go further manually?
Yes, with caveats:
● Variability of audio playback and capture gets old
● You’ll tire of this quickly
● It would be great to identify exact frequencies used
● Audacity frequency analysis gets you ‘close’
● You’ll find variation in the detected frequency depending on which 
tone you check
● No API is readily available to leverage this Audacity functionality
● Also no readily available CLI option for us to script...
What are the manual mode options?
Black-box signal reversing
● Brute-force reproduction of tones
● Attempt to match generated tones with the spectrograph
● Fuzz/generate permutations of the signal until you find a match
We have a better way...
Next Up: Reverse-engineer the 
App to understand the signal 
protocol
We have the vendor app, so 
let’s take a closer look
App Analysis: Reversing the APK
03
What are our options?
What are our options?
Leverage Android 
debug log to picture 
the runtime state
Reverse compiled 
code
Attribute meaning to 
code that’s lost its 
context
Decompile
De-Obfuscate
Execute and Log
String Search
Look for strings or 
constants to aid in 
our understanding
Key Methods
Obfuscation may not 
strip out all meaning
High-Speed Fuzz
Leverage code to 
automate brute-force 
where necessary
Preparation
1.
Enable Developer Mode on your Android test device
–
Go to ‘Settings’ and find the ‘Software Information’ for your device
–
Tap the Build number field 7 to 10 times
2.
Allow USB Debugging
–
Go to ‘Settings’ and find ‘Developer options’ (which appears after step 1)
–
Flip the slider to enable/allow ‘USB debugging’ when USB is connected
3.
Ensure you have Android Studio installed (includes the adb command)
4.
Verify that adb is correctly installed and that USB debugging is propery enabled on your 
test device:
–
Plug in your device
–
Run this command:
●
adb shell pm list packages | tail
(You should see a list of packages)
Prepare Your Computer to Pull the APK
Extract the APK
To find and extract the camera app APK, follow these commands:
1.
Open a terminal which can execute adb
2.
Execute: 
adb shell pm list packages | awk -F':' '{print $2}' | grep jawa
3.
With the package name from step 2, execute:
adb shell pm path com.jawa.cam | awk -F':' 
'{print $2}'
4.
Use output from step 3, execute:
adb pull /data/app/com.jawa.cam-1/base.apk
(Note: The path varies per-device, so use your output!)
5.
Rename the APK to something usable:
mv base.apk com.jawa.cam.apk 
6.
Sample Output:
Decompile the APK: 
JADX
For this analysis, I used JADX
1.
Visit https://github.com/skylot/jadx/releases
2.
Download the latest release
3.
Extract the archive
4.
./jadx ~/tmp/apk/com.jawa.cam.apk -d ~/tmp/apk/jawa-decompiled
Example
Decompile the APK: 
Android Studio
Load the decompiled APK into an IDE
1.
Ensure you have Android Studio installed
2.
Select File -> Open and select your decompiled sources
3.
Click the Configure button to setup the Android framework
Decompile the APK: 
Android Studio
Behold: the loaded project!
It holds the Secrets of the Grid
Quick Note on 
Obfuscated Code
A Note on Obfuscation
What is obfuscation?
● Software makers try to hide what their 
software does
● With higher level languages you get 
terse, ‘randomly’ generated identifiers
● Harder to obfuscate the use of system 
libraries than their own code
A Note on Obfuscation
Why Android Studio for de-obfuscation?
● Easily re-factor throughout the project
● Find Usages and Go To Declaration
● Integrated LogCat search bar
... Still a frustratingly manual proceess
Live Log Analysis
Live Log Analysis Setup
● Plug in your Android Test Device
● Select the LogCat tab in the bottom window
● Enter this in the Search field and check the Regex box:
● OutAudio|PRETTYLOGGER|jawa|Decode
Logs on App Startup
Live Log Analysis
Login Screen
Live Log Analysis: 
App Startup/Login
Hmm... looks interesting
Live Log Analysis: 
App Startup/Login
On startup, we find log entries that could be useful:
●
Distinctive characters: biz 加密前
●
URL: https://ap.jawalife.net/jawa/login.do 
●
UrlParams with a lot of data
●
And a lot more log messages off screen
Let’s see what else turns up
Logs on Camera Pairing
Live Log Analysis
Let’s see what we see!
Live Log Analysis
Let’s see what we see!
Live Log Analysis: 
Pairing
A few areas standout
Live Log Analysis
Let’s see what we see!
Live Log Analysis
Let’s see what we see!
Live Log Analysis: 
Pairing – Sound Waves
Doesn’t look like much? Think again!
Notable string: myList size
A couple of other items, 
probably more related to 
phoning home:
●
ByteArrayRequest
●
New URL endpoint 
‘checkBindVoice.do’
Live Log Analysis: 
Pairing
During the pairing process we discovered
●
More distinctive characters, followed by the SSID, Password and... something else?: 
–
声波信息— >DEFCON29-29IsOnline-87gz811
●
A class to investiate:
–
com.ithink.activity.camera.BindDeviceNewActivity
●
An HttpRequestHelper used to phone-home with details about the pairing session
–
The request includes the email associated with my ‘cloud account’
Where does this lead?
Search for Strings
com.ithink.activity.camera.BindDeviceNewActivity
●
Searching within the project for 声波信息 
uncovered a method
●
Aside from the expected (SSID/Password), 
we see:
–
0x01 used to delimit fields
–
A smartCode (?)
–
The string “1” appended at the end
(MSG_DB_NOTIFY_REACHED = “1”)
My guess is this is a decompilation 
artifact
Search for Strings:
What is a SmartCode?
It appears to be randomly-generated for each pairing attempt in getBundleExtras(Bundle bundle)