Hello there !
On any golang version (1.5 or 1.6 ).
    # http://play.golang.org/p/71ZtR0mX9K
    package main
    import (
        "encoding/json"
        "fmt"
    )
    type FooBar struct {
        Foo int `json:"Foo,omitempty"`
        Bar int `json:"Bar,omitempty"`
    }
    var (
        foo1 = `{"Foo": 1}`
        bar1 = `{"Bar": 1}`
    )
    func main() {
        fb := FooBar{}
        json.Unmarshal([]byte(foo1), &fb)
        fmt.Printf("%+v\n", fb)
        json.Unmarshal([]byte(bar1), &fb)
        fmt.Printf("%+v\n", fb)
    }
outputs
    {Foo:1 Bar:0}
    {Foo:1 Bar:0}
I assume it's because as its not set it's considered empty and omitted.
But this can provoque weird behaviours when you reuse structs twice or have an
unmarshal loop that read a file. Or worse, when you rewrite a that file with a
loop in a different format.
* * *
Possible solutions:
  * add a `reset()` builtin, the one that's called just after allocation ? How would that work with pointers ?
  * make the encoding pkgs reset unset fields in _Unmarshal_ using reflection ?
  * just tell people to be careful
cheers !