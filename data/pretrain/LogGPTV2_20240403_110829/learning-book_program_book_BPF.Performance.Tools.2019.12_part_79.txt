and via timed sampling of on-CPU stack traces.
Overhead
a Suoen sogd1 suaa paoen po apeu a uo spuadap Supen uoeodde peao au
requests themselves costs negligible overhead, whereas tracing lock contention, off-CPU events,
and syscalls can cost noticeable overhead for busy workloads.
13.1.4 Strategy
Here is a suggested overall strategy you can follow for application analysis. The next sections
explain these tools in more detail.
1. Learn what the application does: what is its unit of work? It may already expose its unit
of work in application metrics and logs. Also determine what would it mean to improve
atos ro) aesn aomosa 1amo o ouage samo andqno sautq :aotueuoad s
(uoeuquoo
2. See if any documentation exists to describe application internals: major components such
as libraries and caches, its API, and how it services requests: thread pools, event worker
threads, or something else.
3. Apart from the application’s main unit of work, find out if it uses any background periodic
tasks that could impact performance (e.g., a disk flush event that happens every 30
(spuosas
4. Check whether USDT probes are available for the application or its programming language.
5. Perform on-CPU analysis to understand CPU consumption and look for inefficiencies
(e.g-, using BCC profile(8).
---
## Page 630
13.2 BPF Tools
593
6. Perform off-CPU analysis to understand why the application is blocking and look for areas
to optimize (e.g., BCC offcputime(8), wakeuptime(8), offwaketime(8). Focus on blocking
time during application requests.
7. Profile syscalls to understand an application's use of resources (e.g., BCC syscount(8)-
8. Browse and execute the BPF tools listed in Chapters 610.
9. Use uprobes to explore application internals: the previous on-CPU and off-CPU analysis
stack traces should have identified many functions to begin tracing.
10. For distributed computing, consider tracing both server side and client side. For example,
with MySQL it may be possible to trace the server as well as clients making requests by
tracing the MySQL client library.
It may already be known whether the application is CPU bound, disk bound, or network bound,
based on the resource it spends most of its time waiting for. After confirming that this assumption
is true, the limiting resource can be investigated from the appropriate resource chapter in this
book.
If you wish to write BPF programs to trace application requests, you need to take into account
thread, the thread ID (task ID) can be used to associate events from different sources, provided
how requests are processed. Because service thread pools process a request entirely from the same
they are asynchronous. For example, when a database begins procesing a query, the query string
can be stored in a BPF map keyed on the thread ID. This query string could later be read when disk
I/O is first initialized, so that disk I/O can be associated with the query that caused it. Other appli-
cation architectures such as event worker threads require a different approach, since one thread
processes different requests concurrently, and the thread ID is not unique to one request.
13.2
BPF Tools
This section covers the BPF tools you can use for application performance analysis and trouble
shooting. These are shown in Figure 13-1.
Applications
sipais
Runtimes
Loprotile
System Libraries
danoos
System Call Inserface
esectoop
peotile
threeded
Rest of Kemel
Scheduler
offcputist
Figure 13-1 BPF tools for application analysis
---
## Page 631
594
Chapter 13 Applications
These tools are either from the BCC and bpftrace repositories covered in Chapters 4 and 5 or were
created for this book. Some tools appear in both BCC and bpftrace. Table 13-2 lists the origins of
the tools covered in this section (BT is short for bpftrace).
Table 13-2
Application-Related Tools
Tool
Source
Description
execsnoop
BCC/BT
Sched
List new process execution
threadsnoop
Book
pthread
List new thread creation
profile
BCC
CPUs
Sample on-CPU stack traces
threaded
Book
CPUs
Sample on-CPU threads
offcputine
BCC
Sched
Show off-CPU time with stack traces
offcpuhist
Book
Sched
Show off-CPU stacks with time histograms
syscount
BCC
Syscalls
Count syscalls by type
loprof11e
Book
 /0
Count stacks on 1/0
xanotsbptbs/u
BCC/book
MySQL server
Show MySQL queries slower than a threshold
mysq1d_c1at
Book
MySQL server
Show MySQL command latency as a histogram
s 1gmals
Book
Signals
Summarize sent signals by target process
k111snoop
BCC/BT
Syscalls
Show kill(2) syscalls with sender details
pm1ock
Book
Locks
Show pthread mutex lock times and user stacks
pmhe1d
Book
Locks
Show pthread mutex held times and user stacks
naptine
Book
Syscalls
Show voluntary sleep calls
For the tools from BCC and bpftrace, see their repositories for full and updated lists of tool
options and capabilities. A selection of the most important capabilities are summarized here,
These tools can be grouped into the following topics:
• CPU-analysis: profile(8), threaded(8), and syscount(8)
 Off-CPU analysis: offcputime(8), offcpuhist(8), and ioprofile(8)
• Application context: mysqld_slower(8) and mysqld_clat(8)
Thread execution: execsnoop(8), threadsnoop(8), and threaded(8)
• Lock analysis: rmlock(8) and pmheld(8)
● Signals: signals(8) and killsnoop(8)
=Sleep analysis: naptime(8)
There are also one-liners at the end of this chapter. The following tool sections also include a
section on libc frame pointers, as a follow-on from ioprofile(8).
---
## Page 632
13.2 BPF Tools
595
13.2.1
execsnoop
execsnoop(8), introduced in Chapter 6, is a BCC and bpftrace tool to trace new processes, and can
identify if applications are using short-lived processes. Example output from an idle server:
1 execshoop
PCOMM
PID
PPID
RET ARGS
sh
17788
17T87
0 /bin/sh =c /usr/1ib/sysstat/sal 1 1 -S ALL
5a1
1778917788
0 /usz/lib/sysstat/sa1 1  1 -S ALL
sadc
1778917788
0 /usx/11b/sysstat/sadc -F -L =S DISK 1 1 =S ALL /vax/
9s.a/B0T
[ . - - ]
This shows that the server was not so idle: it has caught an invocation of the system activ-
ity recorder. execsnoop(8) is useful for catching unexpected process usage by applications.
Sometimes applications call shellscripts for functionality, maybe as a temporary workaround
until it can be coded properly within the application, causing inefficiencies.
See Chapter 6 for more about execsnoop(8).
13.2.2
threadsnoop
threadsnoop(8) traces thread creation via the pthread_create() library call. For example, during
MySQL server startup:
threadsnoop .bt
Attaching 3 probes..
TIME (ns)
PID
COMH
FUNC
2049
14456
nyrqld
tiner_notify_thread_func
2234
14460
nysq1d
pfs_spavn_thread
2243
14 460
mysq1d
io_handler_thread
2243
14460
nyagld
1o_handler_thread
2243
14460
mysg]d
io_handler_thread
2243
14 460
nyaqld
1o_handler_thzead
2243
14 460
mysq1d
io_handler_thread
2243
14 460
nysq1d
1o_handler_thzead
2243
14460
mysgld
1o_handler_thread
2243
14460
ptbss
1o_handler_thread
2243
14460
nyrqld
io_handler_thread
2243
14460
nysqld
1o_handler_thzead
2243
14460
pbsfu
buf_flush_page_cleaner_coordinator
2274
14460mysqld
txx_rollback_or_clean_all_recovered
2296
14460mysqld
lock_vsit_tineout_thresd
1. Origin: I crested it for this t
on 15-Feb-2019,
---
## Page 633
596
Chapter 13 Applications
2296
14460mysqld
srv_error_nonitor_thresd
2296
14460
nyaqld
sxv_nonltox_thread
2296
14460
mysgld
srr_naster_thread
2296
14460
mysqld
sxv_purge_coordinatox_thread
2297
14460
mysgld
14460myaq14
srv_vorker_thresd
2297
pesxexxox"sx8
2297
14460mysq]d
srv_vorker_thread
2298
14460
nysq1d
peexudsmpgnq
2298
2298
14460
mysg]d
dict_stats_thread
14460
mysqld
_219ft.s_optLnize_thzeadPv
2298
14460mysg]d
buf_resize_thread
2381
14460
nyaqld
pfs_spavn_thread
2381
14460mysqld
pfs_spawm_thread
This shows the rate of thread creation by examining the TIME(ms) column, as well as who is
creating the thread (PID, COMM), and the starting function for the thread (FUNC). This output
shows MySQL. creating its pools of server worker threads (srv_worker_thread(), I/O handller
threads (io_handler_thread0), and other threads for running the database.
This works by tracing the pthread_create0 library call, which is expected to be relatively infre
quent, such that the overhead of this tool should be negligible.
The source to threadsnoop(8) is:
+1/usr/local/bin/bpftrace
BEGIN
printf(*10s =6s 16s sn*,*rIME (ns)*,*PID*,"cox", *rNc*)
uprobe:/1ib/x86_6411nux=gnu/1lbpthzead.so 0:pthzead_czeate
printf(*4-10u 4=6d s-16s %sn*, elapsed / 10oo000, pid, conn,
usym (a.rg21) 
The path to your libpthread library may need adjusting in this source.
The output line can also be adljusted. For example, to include the user-level stack trace:
printf(*g10u g-6d $16s shan*, elapsed / 1000000, pid, corm,
usym (arg21 , ustaek) ;
---
## Page 634
13.2 BPF Tools
597
This produces:
-/threadsnoop-ustack.bt
Attach.ing 3 probes...
TIHE (ns)
PID
COMH
FUNC
1555
14976mysgld
tiner_notify_thread_func
0x7fb5ced4b9b0
0x55f6255756b7
0x55f625577145
0x7fb5ce035b97
0x2246258d4c544155
1729
14981 nysqld
_pthread_create_2_1+0
my_timer_instlallza+156
init_server_components () +87
nysq[d_naln [1nt, char** +1941
_libc_start_nsin+231
0x224625864c544155
1739
14981 nysqld
1o_handler_thread
_pthread_create_2_1+0
1nnobase_staxt_or_create_foz_nysq] (1 +6648
innobase_init (void*) +3044
ha_initla1lze_handlerton (at_plugin_1nt*) +T9
plugin_initialize (st_plugin_int*) +101
plug1n_regl.ster_bu11tin_and_1nit_core_se (1nt*, chax**) +485
init_server_components () +960
nyaq1d_nain(1nt, char**)+1941
_libc_start_nain+231
0x224625864c544155
[. ..]
This shows the code path that led to the thread’s creation. For MySQL, the role of the threads was
already apparent from the starting functions, but this won’t always be the case with all applica-
tions, and the stack trace may be needed to identify what the new threads are for.
---
## Page 635
598
Chapter 13 Applications
13.2.3 profile
profile(8), introxduced in Chapter 6, is a BCC tool that does timed sampling of on-CPU stack traces
and is a cheap and coarse way to show which code paths are consuming CPU resources. It was
introduced in Chapter 6. For example, using profile(8) to profile a MySQL server:
(prbsAu dexbd) s d- p- atTgoad 
Sanpling at 49 Bextz of PID 9908 by user + kernel stack... Hit Ctrl-C to end.
[..-]
dusxosuseum
hp_rec_hashnr
hp_xrite_key
heap_veite
ha_heap::xx1te_rov [unsigned chaz*]
handler::ha_vrite_rov(unsigned chae*)
end_wrIte (JOIN*, QEP_TAB*, boo1)
evaluate_Join_record (0oIN*, QEP_TAB*)
sub_select (JOIN*, QEP_TAB*, boo1)
JOIN: :exec()
handle_quexy (THD*, LEX*, Quezy_result*, unsigned long long, unslgned long long)
execute_sqlcon_select (THD*, TABLE_LIST*)
mysql_axecute_cornand(THD*, boo1)
Prepared_statenent:rexecute (String*, bool)
Prepared_statenent::execute_loop (Stxing*, bool, unslgned chax*, unslgned chax*)
mysq]d_stmt_execute (THD*, unsigned long, unsigned long, unsigned char*, unsign.
dl.spatch_conmand (THD*, Co_DATA const*, enun_server_corman.d)
(xGH)poeuuoo"op
handle_connectlon
pfs_spavn_thread
start_thread
nysqld (9908)
1. 4
[. - -]