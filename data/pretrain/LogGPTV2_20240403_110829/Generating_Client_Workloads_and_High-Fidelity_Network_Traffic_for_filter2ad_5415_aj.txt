Jul 30 13:16:11.045: vmx| TimeTrackerStats PIIX4PMTT 2 ints, 0.40/sec, 0.42 avg, 0.43 req; 34 
tot, 1644 req; 278 loprg, 14994 rtry; behind  -36140 us
tot, 34 req; 0 loprg, 0 rtry; behind -1026844 us
The following points describe key phrases in this report:
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
behind by 2246 us—the virtual machine’s built‐in time tracker knows that the guest operating system’s 
clock is slightly behind real time, by 2246μs.
running at 101%—the virtual machine ran the guest operating system’s clock at an average of 101 
percent of normal speed since the last time statistics were printed (roughly 
timeTracker.statInterval).
mode 0—the mode in which the time tracker is operating. Currently defined modes include the following:
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
0—aggressive interrupt delivery. This is the normal mode.
1—smooth interrupt delivery. This special mode spaces interrupts out more. It is used for certain 
older guest operating systems that may have fragile interrupt handling code.
2—smooth interrupt delivery, with catch‐up currently in progress.
3—lazy interrupt delivery. This is useful for tickless guest operating systems.
4—timer calibration mode. This is used briefly while a Linux guest operating system is calibrating 
timers during boot.
catchup limited 4485 us—during the last statistics interval, the time tracker was sometimes not able 
to immediately catch up to real time because of a heuristic that limits the rate of catch‐up to avoid causing 
problems in the guest operating system. A total of 4855μs of potential catch‐up was delayed by this 
heuristic. This includes catch‐up that was slightly delayed but did occur later in the interval, not just 
catch‐up that was delayed beyond the end of the interval. Thus, it can be more than the amount the time 
tracker is currently behind, as in this example.
0 stops—VMware Tools has not asked the time tracker to stop catch‐up since the virtual machine was 
powered on. VMware Tools stops catch‐up whenever it detects that the guest operating system’s clock is 
significantly behind real time and turns the clock ahead.
0 giveups—the time tracker itself has not detected that the guest operating system clock is too far behind 
to catch up.
0 numLargeBumps, maxLargeBump: 0 cycles— there have been no large skews between apparent time 
on different virtual CPUs.
Copyright © 2008 VMware, Inc. All rights reserved.
24
Timekeeping in VMware Virtual Machines
The remaining lines give details for specific timer devices. The CMOS-P line refers to the CMOS timer’s periodic 
interrupt, the timer0 line refers to PIT timer 0, and the PIIX4PMTT line refers to the ACPI PM timer. Other 
names that can appear on these lines include CMOS-U (the CMOS timer update interrupt) and APICn (the local 
APIC timer on virtual CPU n, where n ranges from 0 upward).
Taking the CMOS-P line as an example, the following points explain key phrases:
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
320 ints, 64.00/sec—there were 320 virtual CMOS periodic timer interrupts delivered in the last 
statistics interval (five seconds in this example), or exactly 64 per second.
64.01 avg, 64.00 req—there was an average of 64.01 interrupts per second over the interval since the 
guest operating system last reprogrammed this timer to a different rate. The guest operating system asked 
for 64.00 interrupts per second. In general, the average can be higher than the requested rate because of 
catch‐up or lower because the time tracker is currently behind. In this example, the difference is 
insignificant.
5462 tot, 5461 req—there has been a total of 5462 interrupts since the guest operating system last 
reprogrammed the timer, whereas there should have been 5461 at the nominal, requested rate.
1808 loprg, 70756 rtry—on 1808 occasions, when the virtual machine wanted to deliver a virtual 
interrupt to the guest operating system, it was not safe to do so because the guest operating system had 
made too little progress running code since the last virtual interrupt of this type. The time tracker did a 
total of 70756 retries, implying that it often required multiple retries to deliver a single interrupt.
behind -15606 us—how far in the past the next interrupt from this device is programmed to occur, 
relative to apparent time. This is normally a negative value, which means that the next interrupt is set to 
occur in the future. It can sometimes be positive because of various unusual conditions that force apparent 
time to move ahead even though a timer device has not yet delivered all of its interrupts.
If one of the timer devices in the guest operating system is not currently programmed in a periodic mode but 
has produced interrupts in the last interval, a different style of statistics line is logged for it, with a subset of 
the fields shown in the example above. The line uses the word aperiodic because it most commonly occurs 
when the device is being used in one‐shot mode. An aperiodic statistics line looks like this:
Aug 17 10:58:21.264: vmx| TimeTrackerStats APIC0 aperiodic 12153 ints, 202.54/sec; 1092447 tot; 
322 loprg, 326 rtry
The following listing shows time tracker statistics output from an older product version running a different 
guest operating system. Many fields are similar. The differences are described below.
Mar 21 17:17:36: vmx| TimeTrackerStats behind by 104218351 cycles (43668 us); running at 100%; 0 
stops, 0 giveups
Mar 21 17:17:36: vmx| TimeTrackerStats APIC0 9972 ints, 997.40/sec, 1023.94 avg, 1000.49 req; 
51188 tot, 50015 req; 59 loprg, 60 rtry
Mar 21 17:17:36: vmx| TimeTrackerStats timer0 9970 ints, 997.20/sec, 1023.62 avg, 1000.15 req; 
51172 tot, 49998 req; 1395 loprg, 1400 rtry
(cid:132)
(cid:132)
The behind by statistic is given in cycles (of the virtual TSC) as well as microseconds.
There is no mode statistic. Instead, the running at statistic gives the rate at which the time tracker is 
currently attempting to catch up the guest clock. 100% means that there is no catch‐up in progress. A 
typical value when catch‐up is in progress is 300%, but the effective catch‐up rate is generally much lower.
Gather VM-Support Dump
If you are submitting a support request, VMware Support also asks you to run the vm-support script to gather 
additional information about your host system and virtual machines. On Linux‐hosted and VMware ESX 
systems, this script is named /usr/bin/vm-support. On Windows‐hosted systems, the script is named 
vmsupport.vbs and is located in the VMware installation directory. See VMware knowledge base article 653 
(http://kb.vmware.com/kb/653).
Copyright © 2008 VMware, Inc. All rights reserved.
25
Timekeeping in VMware Virtual Machines
Resources
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
“Collecting diagnostic information for VMware ESX Server “
http://kb.vmware.com/kb/653
“Disabling Time Synchronization”
http://kb.vmware.com/kb/1189
“Installing and Configuring NTP on VMware ESX Server”
http://kb.vmware.com/kb/1339
“Paravirtualization API Version 2.5”
http://www.vmware.com/pdf/vmi_specs.pdf
“Timekeeping best practices for Linux”
http://kb.vmware.com/kb/1006427
“Virtual Machine Seems Slow when Running a Particular Program (Clock Issue)”
http://kb.vmware.com/kb/892
If you have comments about this documentation, submit your feedback to:  PI:EMAIL 
VMware, Inc. 3401 Hillview Ave., Palo Alto, CA 94304 www.vmware.com
Copyright © 2008 VMware, Inc. All rights reserved. Protected by one or more of U.S. Patent Nos. 6,397,242, 6,496,847, 6,704,925, 6,711,672, 6,725,289, 6,735,601, 6,785,886, 
6,789,156, 6,795,966, 6,880,022, 6,944,699, 6,961,806, 6,961,941, 7,069,413, 7,082,598, 7,089,377, 7,111,086, 7,111,145, 7,117,481, 7,149, 843, 7,155,558, 7,222,221, 7,260,815, 
7,260,820, 7,269,683, 7,275,136, 7,277,998, 7,277,999, 7,278,030, 7,281,102, 7,290,253, 7,356,679, 7,409,487, 7,412,492, and 7,412,702; patents pending. VMware, the VMware 
“boxes” logo and design, Virtual SMP, and VMotion are registered trademarks or trademarks of VMware, Inc. in the United States and/or other jurisdictions. All other marks and 
names mentioned herein may be trademarks of their respective companies. 
Revision: 20081017 Item: WP-065-PRD-02-02
26