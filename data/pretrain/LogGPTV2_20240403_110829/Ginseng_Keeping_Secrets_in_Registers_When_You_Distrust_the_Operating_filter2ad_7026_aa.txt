title:Ginseng: Keeping Secrets in Registers When You Distrust the Operating
System
author:Min Hong Yun and
Lin Zhong
Ginseng: Keeping Secrets in Registers
When You Distrust the Operating System
Min Hong Yun and Lin Zhong
Rice University
{mhyun, lzhong}@rice.edu
Abstract—Many mobile and embedded apps possess sensitive
data, or secrets. Trusting the operating system (OS), they often
keep their secrets in the memory. Recent incidents have shown
that the memory is not necessarily secure because the OS can
be compromised due to inevitable vulnerabilities resulting from
its sheer size and complexity. Existing solutions protect sensitive
data against an untrusted OS by running app logic in the Secure
world, a Trusted Execution Environment (TEE) supported by
the ARM TrustZone technology. Because app logic increases the
attack surface of their TEE, these solutions do not work for
third-party apps.
This work aims to support third-party apps without growing
the attack surface, signiﬁcant development effort, or performance
overhead. Our solution, called Ginseng, protects sensitive data
by allocating them to registers at compile time and encrypting
them at runtime before they enter the memory, due to function
calls, exceptions or lack of physical registers. Ginseng does not
run any app logic in the TEE and only requires minor markups
to support existing apps. We report a prototype implementation
based on LLVM, ARM Trusted Firmware (ATF), and the HiKey
board. We evaluate it with both microbenchmarks and real-world
secret-holding apps.
Our evaluation shows Ginseng efﬁciently protects sensitive
data with low engineering effort. For example, a Ginseng-
enabled web server, Nginx, protects the TLS master key with
no measurable overhead. We ﬁnd Ginseng’s overhead is pro-
portional to how often sensitive data in registers have to be
encrypted and decrypted, i.e., spilling and restoring sensitive data
on a function call or under high register pressure. As a result,
Ginseng is most suited to protecting small sensitive data, like a
password or social security number.
I.
INTRODUCTION
Many mobile and IoT apps nowadays contain sensitive
data, or secrets, such as passwords, learned models, and health
information. Such secrets are often protected by encryption in
the storage. However, to use a secret, an app must decrypt it
and usually store it as cleartext in memory. In doing so, the app
assumes that the operating system (OS) is trustworthy. OSes
are complex software and have a large attack surface. Even
techniques such as secure boot still leave the OS vulnerable to
attacks after the boot, e.g., [11], [63]. Increasingly abundant
evidence [10], [37], [42], [67], [74] suggests that prudent apps
should not trust the OS with their secrets.
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23327
www.ndss-symposium.org
There has been a growing interest in protecting app secrets
against an untrusted OS, as summarized in Table I. Many
reported solutions do not work for mobile and embedded
systems that are based on the ARM architecture: they require
either Intel SGX extension, e.g. Haven [8], SCONE [3] and
Ryoan [32], or hypercall from userspace that is not available in
ARM, e.g., Flicker [45], TrustVisor [44], and InkTag [31]. Oth-
ers leverage ARM’s TrustZone technology, which provides a
hardware-supported trust execution environment (TEE) called
the Secure world. Most of them run an entire or sensitive
part of an app in the Secure world, e.g., [29], [40], [43],
[60]. By doing so,
they proportionally expand the attack
surface of the TEE and as a result, do not support third-
party apps. CaSE [76], a rare exception, only requires generic
logic in the Secure world. Unfortunately CaSE requires a cache
lockdown feature that is no longer available on the latest ARM
architecture, i.e., AArch64. Moreover, CaSE keeps the entire
app in the cache, which limits the app size to tens of KB; it
also forbids concurrent OS activities, which incurs signiﬁcant
runtime overhead.
In this work, we present a new approach toward protecting
app secrets against an untrusted OS, called Ginseng. Ginseng
supports third-party apps without growing the attack surface,
signiﬁcant development effort, or performance overhead. It
follows two principles to overcome the limitations of the prior
work. First, app logic should not enter the TEE. Otherwise,
the TEE’s attack surface grows proportionally as the number
of apps increases: app logic with a vulnerability opens the door
to adversaries to compromise the TEE. Second, only sensitive
data need to be protected. Protecting insensitive data incurs
unnecessary overhead, which can be prohibitively high.
Following the two principles, Ginseng protects only sensi-
tive data. The key idea is to keep them in registers only when
they are being used and to save them in an encrypted memory
region, called secure stack, when switching context. With
the compiler’s help, Ginseng infers which data are sensitive
based on developer-provided hints and keeps them in registers.
Whenever these registers have to be saved to the stack, e.g.,
due to function call or exception, Ginseng uses the secure
stack to hide the sensitive data. We note some prior works
also place secrets in registers in order to defend against cold-
boot attacks [27], [28], [46], [47], [65]. These works, however,
all trust the OS. Ginseng’s runtime protection relies on a
small, generic logic in the TEE, called GService. GService
implements the behaviors of the secure stack, supports code
integrity of functions processing sensitive data, and provides
control-ﬂow integrity (CFI) when sensitive data are in use.
We enhance the security/safety of GService with a three-
pronged approach. First, we implement most of it in Rust,
a safe language that guarantees software fault isolation by
preventing unauthorized memory access and using a single
ownership model [7]. Second, we minimize the unsafe part of
GService to a small amount of assembly code, 190 lines in our
implementation, which is amenable to formal veriﬁcation by
existing tools, e.g., Vale [9]. Finally, GService uses a statically-
allocated memory region as its private heap, which further
prevents it from affecting the existing TEE.
We report a Ginseng prototype using the HiKey board with
ARM TrustZone. Combining Ginseng with known techniques
that secure user input [41], [72], our prototype is the ﬁrst
to secure sensitive app data for its entire lifetime against an
untrusted OS on ARM-based systems, without app logic in the
TEE. The prototype has been made open-source [54].
Using both micro and macro benchmarks, we evaluate how
much overhead Ginseng imposes and how app knowledge can
help alleviate it. We build a two-factor authenticator processing
a user’s secret key to log in popular web sites such as Amazon
and Facebook. We extend OpenSSL used by wpa supplicant
and the Nginx web server. Linux systems connecting to a Wi-
Fi network use wpa supplicant which saves Wi-Fi passwords
in memory. Many IoT devices provide TLS-enabled web user
interfaces using Nginx [35], [48], [71], which saves the TLS
master key in memory. We also use Ginseng to protect a
decision-tree-based classiﬁer, which is popular on mobile and
embedded apps and contains valuable intellectual property
from the app vendor.
The evaluation shows Ginseng imposes a low overhead
when computation with sensitive data does not contribute
signiﬁcantly to app execution time, which is usually true for
I/O extensive apps. For example, Ginseng protects the TLS
master key of Nginx with no measurable overhead for HTTPS
transactions. Otherwise, Ginseng may impose a high overhead.
For example, four functions processing the Wi-Fi password
in wpa supplicant dominate the app’s execution time;
this
results in an overhead of 6 B cycles for protecting the password
due to repeated function calls with a na¨ıve implementation.
Nevertheless, 75 % of this overhead can be eliminated by
aggregating the functions and inlining callees, using app-
speciﬁc knowledge, as we discuss in VI-C.
While we target Ginseng for ARM-based systems, Ginseng
can be also realized in x86 systems as the latter also meet
Ginseng’s architectural requirements (see III-A1). Importantly,
by keeping secrets in registers, Ginseng naturally protects
them from cold-boot attacks, which extract and analyze system
memory by exploiting the remanence effect of DRAM [30],
[47]. Indeed, some existing defenses against cold-boot attacks
also place secrets in registers, e.g, [27], [28], [46], [47], [65].
All of them trust the OS and even require OS collaboration
at runtime. In contrast, Ginseng does not trust the OS and as
a result, a signiﬁcant part of Ginseng’s innovation goes into
preventing sensitive register content from entering memory
without OS collaboration.
Although our prototype supports apps written C or C++,
Ginseng can also protect sensitive data in managed code such
as Dalvik bytecode, which constitutes the majority of Android
apps. The challenge to applying Ginseng to managed code is
that the managed runtime, not the compiler, determines the
TABLE I.
COMPARISON WITH RELATED WORK DISTRUSTING THE OS
Solutions
Ginseng
TLR [60]
TrustShadow [29]
CaSE [76]
Overshadow [14]
Flicker [45], InkTag [31]
TrustVisor [44]
Haven [8], SCONE [3]
Eleos [50], Ryoan [32]
HW
Req.
ARM
Support
Attack
Surface
Perf.
Overhead

No
AArch64
Fixed
Prop.†
Fixed
Low
Mid-
High
High (no
concurrency)

∗
∗
TrustZone
or x86
TrustZone
Hypercall
from
userspace
Intel SGX
†“Prop.” means that the attack surface grows proportionally with the number of apps, a
result from having app logic in the TEE.
registers used for sensitive data. This challenge, however, can
be sidestepped by using ahead-of-time (AOT) compilation and
pre-compiling sensitive functions to binary on a developer’s
machine.
In summary, we make the following contributions:
• We report Ginseng, the ﬁrst system design that protects
third-party app secrets on ARM-based systems. Ginseng
does not install any app logic in the TEE, requires only
minor markups in app source code, and selectively protects
only sensitive data for efﬁciency.
• We report a Ginseng prototype based on LLVM and an
AArch64 board with ARM TrustZone, protecting sensitive
data for its entire lifetime against the OS, starting from user
input.
• We report
the evaluation of Ginseng’s performance and
engineering overhead using microbenchmarks and four real-
world apps with various secrets. It shows that Ginseng im-
poses overhead only when sensitive data is being processed
and as a result, an app using sensitive data only sparingly,
like Nginx, suffers no measurable overhead.
II. THREAT MODEL
We seek to protect
the conﬁdentiality and integrity of
an application’s sensitive data against an adversary who can
access privileged software, i.e., OS. We do so without any app
logic in the TEE. Below, we elaborate our assumptions and
rationales.
Trusted Computing Base (TCB):
Like many prior
works [4], [6], [25], our TCB includes the hardware, boot-
loader for a higher privilege mode than the OS, and the
software running in the higher privilege mode. At the hardware
level, we trust the processor along with its security extensions,
e.g., ARM TrustZone. At the software level, we trust the
bootloader for the higher privilege mode and software in the
mode. We do not trust the bootloader for the OS, the OS, and
any software running in the OS. Following the TCB deﬁnition
of Lampson et al [38], we do not consider apps relying on the
TCB as part of the TCB because their misbehavior does not
affect the TCB.
We do not trust the OS, but we assume the OS, e.g., Linux,
is integral at booting time, thanks to the chain of trust, or secure
2
boot [1], [2], which veriﬁes the integrity of the OS during
boot. Nevertheless, secure boot only veriﬁes that the kernel
image is not modiﬁed; it does not ﬁx vulnerabilities [11], [63].
Moreover, our threat model allows kernel modules to be loaded
after booting, which are not subject to boot-time veriﬁcation.
Threat Model: After boot, an attacker can compromise
the OS and gain access to sensitive data of an unsuspicious
app. The attacker can completely control the kernel and install
any software. Then, the attacker can access memory content
of an app by mapping the latter’s physical page frames to the
kernel’s address space; or the attacker can simply turn off the
MMU and access the memory content with physical addresses.
Importantly, we assume a user or attacker can load a loadable
kernel module (LKM). We do not address attacks on OS
availability, side-channel attacks, and sophisticated physical
attacks and consider them as out of scope.
No App Logic in TEE
Utilizing the TEE as an app’s
execution environment helps the app conceal
its memory
content from the untrusted OS. However, doing so increases the
TEE’s attack surface and may result in information leakage of
the entire trusted environment as demonstrated in Secure world
attacks [36], [55], [63]. These attacks exploit the OS vulner-
abilities to use privileged instructions; then, they compromise
an app with vulnerabilities in the TEE and then the secure
OS. That is, an app with vulnerabilities in the TEE becomes
the gate for the attackers to enter the trusted environment. To
prevent these types of attacks, both trusted apps and the secure
OS must have no vulnerability, which is unrealistic as shown
by continuous CVEs since 2013, e.g., [16]–[23].
To reduce app logic in TEE, many prior research efforts
partition an app into secure and non-secure parts and only push
the secure parts into the TEE [40], [60], [77]. This approach is
hardly applicable to third-party apps because it still increases
the TEE’s attack surface and there can be many third-party
apps. Thus, we follow the principle of the least privilege [58].
App secrets must be protected by the mechanisms that the TEE
provides, not by running the apps in the TEE with excessive
privilege. Ginseng is an example of such mechanisms.
III. GINSENG DESIGN
Ginseng’s goal is to protect the conﬁdentiality and integrity
of sensitive app data in an untrusted OS. Its key idea is for an
app to retain sensitive data only in registers. When the data
have to be saved to the stack, e.g., context switching, Ginseng
saves them in an encrypted memory region, called secure stack.
The hashes of the encrypted data in the secure stack are kept
in the TEE so that the OS shall not break conﬁdentiality and
integrity of the data. In doing so, Ginseng limits sensitive
data to local variables or function parameters and employs
both compile-time and runtime mechanisms to keep them from
leaving registers unencrypted. Figure 1 illustrates Ginseng’s
architecture.
This section provides an overview of Ginseng’s design and
elaborates its programming model and compile-time support
for static protection. We will elaborate the runtime protection
in IV.
Figure 1. Ginseng Overview: a function with developer-marked sensitive
variables directly communicates with GService through secure APIs. The
service running with a higher privilege mode than the OS protects code
integrity of the function, and conﬁdentiality and integrity of sensitive data.
Ginseng keeps sensitive variables in registers and uses the secure stack
to protect them when switching context with the help from the Ginseng
compiler. In ARM processors, the higher privilege mode corresponds to the