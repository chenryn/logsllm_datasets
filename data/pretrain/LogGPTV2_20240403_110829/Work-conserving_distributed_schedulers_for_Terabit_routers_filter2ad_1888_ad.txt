traffic from different inputs to output j in proportion to the frac-
tion that each could supply of the total that all inputs could send 
to j in this update interval. The second chart in Fig. 4 shows the 
results of these stress tests on BLOOFA. Although close examina-
tion reveals small differences between the distributed and central-
ized  versions  of  BLOOFA,  the  results  are  virtually  indistinguish-
able. We conclude that the approximation introduced by using the 
backlog-proportional  allocation  method  to  enable  efficient  dis-
tributed  scheduling,  has  a  negligible  effect  on  the  quality  of  the 
scheduling  results,  even  though  the  distributed  version  is  not 
known to be provably work-conserving for any speedup.  
We have also studied the performance of DBL for less extreme 
(although,  still  very  demanding)  traffic.  In  particular,  we  have 
studied bursty traffic situations in which there is one output (re-
ferred to as the subject output), for which traffic is arriving con-
tinuously  at  a  specified  fraction  of  the  link  rate.  The  input  at 
which the subject’s traffic arrives changes randomly as the simu-
lation  progresses  (it  remains  with a given input for an exponen-
tially distributed time interval). Each of the inputs that is not cur-
rently  providing  traffic  for  the  subject  has  its own target output 
DBL
DBL
3500
3500
3000
3000
2500
2500
2000
2000
1500
1500
1000
1000
500
500
0
0
speedup =1.2, 3 inputs, 5 phases
speedup =1.2, 3 inputs, 5 phases
B (+,0)
B (+,0)
B (+,1)
B (+,1)
B (0)
B (0)
B (1)
B (1)
B (+,2)
B (+,2)
B (+,3)
B (+,3)
B (+,4)
B (+,4)
B (4)
B (4)
0
0
1000
1000
2000
2000
3000
3000
4000
4000
5000
5000
6000
6000
Time
Time
miss  fraction
miss  fraction
speedup =1.2, 3 inputs, 5 phases
speedup =1.2, 3 inputs, 5 phases
DBL
DBL
0.7
0.7
0.6
0.6
0.5
0.5
0.4
0.4
0.3
0.3
0.2
0.2
0.1
0.1
0
0
4000
4000
average miss fraction
average miss fraction
4250
4250
4500
4500
4750
4750
5000
5000
5250
5250
Time
Time
5500
5500
5750
5750
6000
6000
6250
6250
6500
6500
Fig. 3. Results from sample stress test for distributed BLOOFA - buffer levels (top) and miss fraction (bottom). 
(not equal to the subject) to which it sends traffic, changing tar-
gets  randomly  and  independently  of  all  other  inputs  (an  input 
retains its current target for an exponentially distributed time in-
terval). With this traffic pattern, roughly one fourth of the outputs 
that are not the subject are overloaded at any one time (they are 
targets  of  two  or  more  inputs).  An  ideal  scheduler  will  forward 
cells to the subject output as fast as they come in, preventing any 
input-side  queueing  of  cells  for  the  subject.  However,  the  other 
outputs  can  build  up  significant  input  side  backlogs  (due  to  the 
transient  overloads  they  experience),  leading  to  contention  that 
can affect the subject output. Fig. 5 shows an example of what can 
happen in a system subjected to this type of traffic. The top chart 
shows the amount of data buffered for the subject output (which is 
output 0) at all inputs (B(+,0)), the amount of data buffered at the 
input that is currently receiving traffic for the subject (B(i,0)) and 
the amount of data buffered at the subject (B(0)). The unit of stor-
age is the amount of data received on an external link during an 
update interval and the time unit is the update interval. The dis-
continuities  in  the  curve  for  B(i,0)  occur  when  the  input  that  is 
currently receiving traffic for the subject changes (i.e., the value 
of i changes). The bottom chart shows the instantaneous value of 
the miss fraction. 
Fig. 6 shows the average miss fraction from a large number of 
bursty  traffic  simulations  with  varying  input  load  and  speedup. 
Note that the miss fraction reaches its peak when the input load is 
between 0.8 and 0.9. Larger input loads lead to a sharp drop in the 
miss fraction. The explanation for this behavior is that when the 
input load approaches 1, output-side backlogs tend to persist for a 
long period of time and it is only when the output-side backlogs 
are close to zero that misses can occur. As one would expect, the 
miss fraction drops quickly as the speedup increases. Note that for 
speedup  1.15  the  miss  fraction  never  exceeds  2%,  meaning  that 
only a small fraction of the link capacity is lost. 
 It should be noted that the bursty traffic model used in these 
studies represents a very extreme situation. A more realistic bursty 
traffic  model  would  have  a  large  number  of  bursty  sources  (at 
least a few tens) with more limited peak rates sharing each input 
link (at least a few tens of sources per link). Such a model is far 
less challenging than the one used here. 
4. OUTPUT QUEUE LEVELING 
The  intuition  behind  BLOOFA  is  that  by  favoring  outputs  with 
smaller  queues,  we  can  delay  the  possibility  of  underflow  and 
potentially  avoid  it  altogether.  Theorem  2  tells  us  that  for  a 
speedup of 2 or more, we can avoid underflow, but it does not say 
anything about what happens with smaller speedups. When there 
are  several  output  queues  of  nearly  the  same  length,  BLOOFA 
transfers as many cells as possible to the shortest queues, poten-
tially preventing any cells from reaching slightly longer queues. It 
seems  likely  that  we  could  get  better  performance  by  balancing 
the transfers so that the resulting output queue lengths are as close 
to equal as possible. This is the intuition behind the Output Level-
ing Algorithm (OLA). In this section we show that OLA, like BCCF 
and BLOOFA is work-conserving for speedups of 2 or more. Sub-
sequently, we study the performance of OLA and a practical vari-
ant  of  OLA  and  show  that  these  algorithms  can  out-perform 
BLOOFA and DBL.  
OLA  orders  cells  at  an  input  in  the  same  way  that  BLOOFA 
does.  Let  B(i,j)  and  B(j)  be  the  lengths  of  the  VOQs  and  output 
queues  respectively,  immediately  before  a  transfer  phase  and  let 
2 inputs , 5 phases
3,7 
0
1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5
distributed BLOOFA
5,11
4,9 
speedup
5,11
4,9 
BLOOFA
1
0.8
0.6
0.4
0.2
1
0.8
0.6
0.4
0.2
n
o
i
t
c
a
r
f
s
s
i
m
.
g
v
a
n
o
i
t
c
a
r
f
s
s
i
m
.
g
v
a
2 inputs , 5 phases
3,7 
0
1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5
speedup
Fig. 4.  Miss fraction for DBL and BLOOFA on a variety 
of stress tests 
x(i,j)  be  the  number  of  cells  transferred  from  input i  to  output j 
during the transfer. We say that the transfer is level if for any pair 
of outputs  j1 and  j2,  
B( j1) + x(+, j1) < B( j2) + x(+, j2) − 1 
implies  that  x(+,    j1)  =  min{ST,  B(+,  j1)}.  That  is,  whenever the 
output  queue  level  at  some  output  j1  is  more  than  one  less than 
that of another (following a transfer phase), it’s implies there is no 
way to increase the level at j1. We define OLA as any scheduling 
algorithm that produces schedules that are maximal and level.  
4.1 Work Conservation 
We  use  essentially  the  same strategy to show that  OLA is work-
conserving when the speedup is at least 2. However, to show that 
the minimum slack increases by ST at each input during a transfer 
phase,  we  first need to show how a transfer phase scheduled by 
OLA can be decomposed into a sequence of sub-phases. Note that 
this  decomposition  is  needed  only  for  the  work-conservation 
proof. It plays no role in the implementation of the algorithm. 
Let B(i,j) and B( j) be the lengths of the VOQs and output queues 
respectively, immediately before a transfer phase and let x(i,j) be 
the number of cells transferred from input i to output j during the 
transfer. Each of the sub-phases corresponds to the transfer of up 
to one cell from each input and up to one cell to each output. We 
let  xk(i,j)  denote  the  number  of  cells  transferred  from  input  i  to 
output j by the first k sub-phases. At the end of sub-phase k, the 
outputs are ordered in increasing order of B( j) + xk(+, j) with ties 
broken according to the output numbers. The ordering of the out-
puts is used to order the VOQs at each input and this ordering is 
extended to all the cells at each input. We say that a cell b pre-
cedes  a  cell  c  following  sub-phase  k  if b comes before c in this 
cell ordering. We define qk(c)=B( j) + xk(+, j) and we define pk(c) 
to be the number of cells at c’s input that precede it in the order-
ing  at  the  end  of  sub-phase  k.  We  also  define  slackk(c)  =  qk(c) 
− pk(c).  Let  slack0(c)  be  the  value  of  slack(c)  before  the  transfer 
phase begins and note that if k is the last sub-phase, then slackk(c) 
is equal to the value of slack(c) following the transfer phase. 
Given a schedule constructed by an  OLA scheduler, we con-
struct sub-phases iteratively. To construct sub-phase k, repeat the 
following step until no outputs are eligible for selection. 
Select an output j that has not yet been selected in this sub-
phase  for  which  xk−1(+,  j)<x(+,  j)  and  which,  among  all  such 
outputs, has the minimum value of qk−1(c). If there are multi-
ple  outputs  that  satisfy  this  condition,  select  the  output  that 
comes first in the fixed numbering of the outputs. Then, select 
some input i that has not yet been selected in this sub-phase 
for which xk−1(i, j)<x(i, j). If there is such an input, include the 
transfer of a cell from input i to output j in sub-phase k, mak-
ing xk(i, j) = xk−1(i, j) + 1.  
We will use this decomposition to show that the minimum slack at 
each input increases by at least ST during each transfer phase. 
Lemma  5.  For  any  OLA  scheduler,  during  a  transfer  phase,  the 
minimum slack at any input that does not transfer all of its cells 
during the transfer phase, increases by at least ST. 
proof.  Because  OLA  constructs  maximal  schedules,  any  transfer 
phase that leaves cells at input i must either transfer ST cells from 
input i or must transfer ST cells to every output j for which a cell 
remains at input i following the transfer phase. This means that if 
we  decompose  the  transfer  phase  into  sub-phases,  as  described 
above, there will be at least ST sub-phases. We show below that 
every  one  of  these  sub-phases  increases  the  minimum  slack  at 
input i. Hence, the minimum slack increases by ST over the com-
plete transfer phase.  
Let k be the index of any sub-phase and let c be any cell at in-
put  i  which  is  not  transferred  during  sub-phase  k  and  for  which 
slackk−1(c) is minimum among all cells at input i. Let j be the out-
put that c is going to. If output j receives no cell during sub-phase 
k, then input i must transfer a cell during sub-phase k. The selec-
tion rule used to construct sub-phases ensures that the transferred 
cell  precedes  c.  Hence,  pk(c)  =  pk−1(c)−1  and  thus,  slackk(c)  = 
slackk−1(c)+1. 
If output j does receive a cell, then qk(c) = qk−1(c) + 1. If no 
cell  at  input  i  passes  c  during  the  sub-phase,  then  slackk(c)  ≥ 
slackk−1(c)+1.  Suppose  then,  that  there  is  one  or  more  cell  that 
passes  c  during  the  sub-phase  and  let  d  be  such  a  cell.  Since  c 
precedes  d  before  the  sub-phase  qk−1(c)  ≤  qk−1(d)  and  pk−1(c)  < 
pk−1(d). Since d precedes c after the sub-phase, no cell is received 
by  d’s  output  during  the  sub-phase  and  so  qk−1(d)  ≤  qk−1(c)  +  1. 
Because slackk−1(c) ≤ slackk−1(d), pk−1(d) − pk−1(c) ≤ qk−1(d) − qk−1(c) 
≤ 1 which means that there are no cells that fall between c and d in 
the cell ordering. This implies that d is the only cell that passes c 
during the sub-phase. Because d’s output receives no cell during 
the  sub-phase,  there  must  be  some  cell  that  precedes  d  that  is 
transferred  from  input  i  during  the  sub-phase  and  this  cell  must 
also precede c. Thus, pk(c) = pk−1(c) and so slackk(c) = slackk−1(c) 
+ 1. (cid:132) 
As before, we note that each arrival phase causes slack(c) to 
decrease  by  at  most  T.  Also,  as  before,  if  slack(c)  is  at  least  T 
before the start of a departure phase, then slack(c) is at least zero, 
DBL , speedup =1.1, bursty traffic, load=0.9, mean dwell time=10 
DBL , speedup =1.1, bursty traffic, load=0.9, mean dwell time=10 
B (+,0)
B (+,0)
B (i ,0)
B (i ,0)
B (0)
B (0)
1020
1020
1040
1040
1060
1060
1080