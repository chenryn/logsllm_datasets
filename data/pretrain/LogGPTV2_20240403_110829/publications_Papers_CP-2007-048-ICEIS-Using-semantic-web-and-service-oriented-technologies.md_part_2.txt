from the DL, which means that independently from business rules represent the validations that have to
the implementation of the DSL, the only thing that be verified in order to insert and retrieve data from
has to be assured is the XML structure. the databases.
4.2 Business Layer 4.3 Presentation Layer
The BL (4) is where the domain model, The PL (11) is responsible for receiving and
described in OWL is stored. The domain model (5) processing the requests from the clients. Requests
represents the important concepts, its attributes, and are structured in XML, as is going to be described in
relations between concepts. The concepts are detail in the next section.
mapped to the DSL, which allows access to the data The ‘Query Processor’ (12) is responsible for
described by the concept, by creating instances (6) validating the request from the client, and interacting
of the OWL model. The instances contain the with the ‘Controller’ (10) in order to get the desired
necessary information (database, table, attribute) in data.
order to build the SQL queries that allows retrieving Requests and responses are encapsulated in
the required data from the databases. It is the ‘Query SOAP, and exposed as Web Services. SWOAT Web
Generator’ (7) that is responsible for extracting the Services are implemented using JBoss (JBoss,
necessary information from the ‘Domain Model 2006). JBoss Application Server is one of the most
Instances’ (6) and ‘Domain Model’ (5) and generate used Java application server on the market, and it is
the SQL statement that is going to be executed in the an open source project (JBoss, 2006).
‘Query Executer’ (2) of the DSL. The language used
to query the OWL, in order to extract the data to
build the SQL expression, is SPARQL.
The ‘Controller’ (10) is responsible for
interacting with the ‘Query Generator’ (7) in order
to obtain the returned data, formatted in XML. The
data returned from the DSL is then transformed, in
Figure 3: SWOAT Mapings
Illustrated at the bottom of Figure 3, the table
TablPerson, TablPersonAddress, TablAddress and
5 RUNNING EXAMPLE TablAddressType represent the database structure
that store the data described by the ontology. The
table TablPersonAddress is used because it is a
Let us suppose that we are interested in getting
relation from n to m (which means that one person
the name of all persons and their address stored in a
may have one or more addresses and one address
relational database system. For this example, we will
may belong to one or more persons).
describe the ontology that describes the personal
The ontology instances, illustrated at the top
data, namely Person and Address. The database
right of Figure 3 contains the mappings from the
structure that stores the data is also presented. It
concepts of the ontology to the database tables.
follows with the ontology instances that contain the
There are instances of the ontology class Person and
mapping to the database layer. XML request and
Address. The name of the instances is equal to the
response of the service layer are also illustrated.
name of the database respective table, as illustrated
In Figure 3 we illustrate the ontology classes and
in Figure 3. For example, TablPerson is an instance
their attributes (top left), the ontology instances that
of the domain class Person, and its name represents
contain the mappings to the database tables (top
the database table name. The attributes ‘name’,
right), and the database schema that contains the
‘birthDate’ and ‘address’ are stored on the database
data described by the ontology (bottom).
table that is equal to the ontology instance name, as
As depicted in the ontology (top left of Figure
illustrated by (1), (2) and (3) in Figure 3. Since the
3), for this example, a Person has a name and a
‘addressType’ attribute is not contained on the
birthDate. In the case of the Address, it contains an
TablAddress, but instead on the table
address description (address) and an addressType.
TablAddressType, a special mapping has to be done:
The relation between them is hasAddress, which
table=TablAddressType;
means that a person has an address.
field=AddressType; path={field=IdAddressType;};
(4). The ‘table=’ contains the table name that stores
the data, ‘field=’ contains the attribute and ‘path=‘ this particular case, we are interested in the name of
contains the path from the table TablAddress (name the person and in its address. The output property is
of the instance) to TablAddressType (name of the hasAddress, which means that the class Person and
attrubute in the mapping). As described in the Address are related by hasAddress. The data
‘path=’ the attribute that related the two tables is returned would be:
‘IdAddressType’.
Until now all tables and attributes are mapped, 
but it is remaining the intermediary table: 
TablPersonAddress. This type of mapping is 
addressed in the relation property named hasAddress 
(5). So, the property hasAddress, that directionally 
connects two classes, will contain the flowing 
mapping: 
field=IdPerson;table=TablPersonAddress;
field=IdAddress;. The field=IdPerson connects the This response is structured ‘like’ the domain
table TablPerson with the table TablPersonAddress. model, as described in the top left of Figure 3. As
The field IdAddress connects the table already depicted the domain class Person is
TablPersonAddress with TablAddress. connected with the class Address through the
This is all the information that is needed in order relation hasAddress.
to generate the SQL statement with the objective of
executing it to return the required data.
6 RELATED WORK
5.1 SWOAT Requests and Responses
Requests are structured in XML and allow Several tools and approaches to integrate
clients (applications, internal or external, and users) heterogeneous data sources and create an abstraction
to interact with SWOAT in order to get the desired layer exist today (Alexiev et al., 2005). Examples
data. XML requests allow users to specify: are Corporate Ontology Grid, the Mediator
• Fields that should be returned, using the envirOnment for Multiple Information Systems,
XML outputFields element. It is a required OBSERVER, the Knowledge Reuse And
element. Fusion/Transformation and InfoSleuth.
• The order of the output fields (ascending, Some of the approaches, like InfoSleuth and
descending) is specified using the XML KRAFT, are based on agents. InfloSleuth is a multi-
orderFields element. agent system for semantic interoperability in
• Filters (for example, return only names heterogeneous data sources. Agents are used to
started by letter A) are specified using the query and instance transformations between data
XML filters element. schemas (Nodine et al., 1999).
• Choose the path that connects domain In the KRAFT project, users typically have their
classes, using the outputProperties element. own local ontology, which is mapped to the central
ontology. The basic philosophy of KRAFT is to
For example, in order to get the name and define a “communication space” within certain
address information, the request would be structured communication protocols and languages must be
like: respected (Grayy et al., 1997).
OBSERVER uses multiple pre-existing
ontologies to access heterogeneous distributed and
independently developed data repositories. It is a
component based approach to ontology mapping and
provides brokering capabilities across domain
ontologies to enhance distributed ontology querying
(Mena et al., 1996).
COG aims to create a semantic information
management in which several heterogeneous data
sources are integrated into a global virtual view
(Bruijn, 2004).
MOMIS goal is to give the user a global virtual
In the output fields, all required fields and the
view of the information coming from heterogeneous
classes, which contain the attribute, are specified. In
data sources (Beneventano and Bergamaschi, 2004).
None of the solutions described are based on domain model. The third one is that SWOAT XML
Semantic Web technologies defined and specified by requests allow clients to specify ‘what’ information
W3C. In the described solutions, the ontology, they need, in a non-technical way. These three
which describes the domain model of the characteristics will allow the construction of loosely
application/organization is described in a non- coupled systems.
standard language, most of the times proprietary or
adapted in order to address the needed requirements.
Interoperability of the described solutions with other REFERENCES
applications / organizations is not fully addressed. In
fact, XML and Web Services are not used. Getting
Alexiev, V. et al., 2005. Information Integration
the data from the data sources involves questioning
the middleware. Most of the times, a proprietary with Ontologies. John Wiley &Sons, Ltd.
“SQL like” query language is used to get the data Beneventano, D. and Bergamaschi, S., 2004. The
from the databases, leading to a specific and MOMIS Methodology for Integrating
proprietary query language. Heterogeneous Data Sources.
Berners-Lee, T., Hendler, J. and Lassila, O., 2001.
The Semantic Web, Scientific America.
7 CONCLUSION Bruijn, J.d., 2004. Semantic Integration of Disparate
Sources in the COG Project.
SWOAT was implemented in order to address Cardoso, J. and Sheth, A., 2006. Semantic Web
the advantages of the three tier architecture. In fact, Services, Processes and Applications.
it acts like an abstraction layer between the client Springer.
and the database servers. This way, aspects like CyCorp, 2006. Cyc KNowledge Base
database location, database technology among Fremantle, P., Weerawarana, S. and Khalaf, R.,
others, are transparent to clients. The main objective
2002. Enterprise Services. In: C.o.t. ACM
is that the clients focus on ‘what information’ and
(Editor), pp. 77-82.
not on ‘how to get it’ and ‘where to get it’. The other
Genesereth, M., 2006. Knowledge Interchange
objective is to impede that changes on database be
Format (KIF).
propagated to all clients, generating unnecessary
Grayy, P.M.D. et al., 1997. KRAFT: Knowledge
maintenance.
Our developed system uses Semantic Web Fusion from Distributed Databases and
Technologies (SWT), more precisely ontologies, to Knowledge Bases.
formally describe the domain model, which is stored Gruber, T., 1993. A Translation Approach to
and centralized in the middleware. Being a formal Portable Ontology Specifications. In:
model, it is particular suitable to describe and be http://ksl-
used by humans and computers. web.stanford.edu/KSL_Abstracts/KSL-92-
With the use of service-oriented technology,
71.html (Editor).
using Web services, SWOAT allows interoperability
Haase, P., Broekstra, J., Eberhart, A. and Volz, R.,
with other clients, either internal or external to the
2004. A Comparison of RDF Query
organization.
Languages, Third International Semantic
SWOAT is a good solution to quickly create an
Web Conference.
abstraction layer between clients and database
servers, exposing its services as Web Services. Hibernate, 2006. Hibernate Reference
Mappings to database are achieved by creating Documentation.
instances of the ontology, allowing that the OWL Horridge, M., Knublauch, H., Rector, A., Stevens,
model can be distributed and reused. Independently R. and Wroe, C., 2004. A Practical Guide
of the database structure, the domain model can be To Building OWL Ontologies Using The
mapped to the database tables, exposing information Protégé-OWL Plugin and CO-ODE Tools
in a format that described the domain model and not
Edition 1.0.
the database structure.
JBoss, 2006. JBoss Application Server.
To sum up, we can state three main SWOAT
Lassila, O. and Swick, R., 1999. Resource
characteristics. The first one is that it is an
Description Framework (RDF) model and
interoperable solution through Web Services (open
syntax specification.
standards). The second is that it uses OWL to
describe the domain model, which is a W3C McGuinness, D.L. and Harmelen, F.v., 2004. OWL
recommendation that semantically describes the Web Ontology Language Overview.
Mena, E., Kashyap, V., Sheth, A. and Illarramendi,
A., 1996. OBSERVER: An Approach for
Query Processing in Global Information
Systems based on Interoperation across
Pre-existing Ontologies
Nodine, M. et al., 1999. Active Information
Gathering in InfoSleuth
Noy, N.F. and McGuinness, D.L., 2001. Ontology
Development 101: A Guide to Creating
Your First Ontology
Silva, B. and Cardoso, J., 2006. Semantic Data
Extraction for B2B Integration,
International Workshop on Dynamic
Distributed Systems.
SPARQL-W3C, 2005. SPARQL Query Language
for RDF - W3C Working Draft 20 February
2006.
Taylor, J., 2004. Enterprise Information Integration:
A New Definition. In: I. Consortium
(Editor), Thoughts from the Integration
Consortium.
Vliet, H.V., 2000. Software Engineering - Principles
and Practice. John Wiley & Sons.