title:S-ORAM: a segmentation-based oblivious RAM
author:Jinsheng Zhang and
Wensheng Zhang and
Daji Qiao
CORE
Provided by Digital Repository @ Iowa State University
Metadata, citation and similar papers at core.ac.uk
Computer Science Technical Reports
Computer Science
2013
S-ORAM: A Segmentation-based Oblivious RAM
Zhang Jinsheng
Iowa State University, PI:EMAIL
Zhang Wensheng
Iowa State University, PI:EMAIL
Daji Qiao
Iowa State University, PI:EMAIL
Follow this and additional works at: http://lib.dr.iastate.edu/cs_techreports
Part of the OS and Networks Commons
Recommended Citation
Jinsheng, Zhang; Wensheng, Zhang; and Qiao, Daji, "S-ORAM: A Segmentation-based Oblivious RAM" (2013). Computer Science
Technical Reports. 254.
http://lib.dr.iastate.edu/cs_techreports/254
This Article is brought to you for free and open access by the Computer Science at Iowa State University Digital Repository. It has been accepted for
inclusion in Computer Science Technical Reports by an authorized administrator of Iowa State University Digital Repository. For more information,
please contact digirep@iastate.edu.
S-ORAM: A Segmentation-based Oblivious RAM
Abstract
As outsourcing data to remote storage servers gets popular, protecting user’s pattern in accessing these data
has become a big concern. ORAM constructions are promising solutions to this issue, but their application in
practice has been impeded by the high communication and storage overheads incurred. Towards addressing
this challenge, this paper proposes a segmentation-based ORAM (S-ORAM). It adopts two segment-based
techniques, namely, piece-wise shuffling and segment-based query, to improve the performance of shuffling
and query by factoring block size into design. Extensive security analysis shows that S-ORAM is a provably
highly secure solution with a negligible failure probability of O(NlogN).In terms of communication and
storage overheads, S-ORAM out-performs the Balanced ORAM (B-ORAM) and the Path ORAM (P-
ORAM), which are the state-of-the-art hash and index based ORAMs respectively, in both practical and
theoretical evaluations. Particularly under practical settings, the communication overhead of S-ORAM is 12 to
23 times less than B-ORAM when they have the same constant-size user-side storage, and S-ORAM
consumes 80% less server-side storage and around 60% to 72% less bandwidth than P-ORAM when they have
the similar logarithmic-size user-side storage.
Disciplines
OS and Networks
This article is available at Iowa State University Digital Repository: http://lib.dr.iastate.edu/cs_techreports/254
S-ORAM: A Segmentation-based Oblivious RAM
Jinsheng Zhang∗, Wensheng Zhang∗, and Daji Qiao∗∗
∗∗Department of Electrical and Computer Engineering
∗Department of Computer Science
Iowa State University
ABSTRACT
As outsourcing data to remote storage servers gets popular, protect-
ing user’s pattern in accessing these data has become a big concern.
ORAM constructions are promising solutions to this issue, but their
application in practice has been impeded by the high communi-
cation and storage overheads incurred. Towards addressing this
challenge, this paper proposes a segmentation-based ORAM (S-
ORAM). It adopts two segment-based techniques, namely, piece-
wise shufﬂing and segment-based query, to improve the perfor-
mance of shufﬂing and query by factoring block size into design.
Extensive security analysis shows that S-ORAM is a provably highly
− log N ).
secure solution with a negligible failure probability of O(N
In terms of communication and storage overheads, S-ORAM out-
performs the Balanced ORAM (B-ORAM) and the Path ORAM
(P-ORAM), which are the state-of-the-art hash and index based
ORAMs respectively, in both practical and theoretical evaluations.
Particularly under practical settings, the communication overhead
of S-ORAM is 12 to 23 times less than B-ORAM when they have
the same constant-size user-side storage, and S-ORAM consumes
80% less server-side storage and around 60% to 72% less band-
width than P-ORAM when they have the similar logarithmic-size
user-side storage.
INTRODUCTION
1.
Along with the increasing popularity of outsourcing data services
to remote storage servers, arise also security and privacy concerns.
Although encrypting data content has been a common practice for
data protection, it does not fully eliminate the concerns, because
users’ data access pattern is not preserved and researchers have
found that a wide range of private information could be revealed
by observing the data access pattern [12].
To address this issue, more and more efﬁcient constructions have
been developed to implement oblivious RAM (ORAM) [6], which
was originally proposed for software protection but also is a prov-
able solution to data access pattern preservation. Among these ef-
forts, hash based ORAMs [6,8–11,13,15,20] utilize hash functions
(including ordinary hash functions, cuckoo hash functions, bloom
ﬁlters, etc.) to distribute data blocks to storage locations when data
is stored or shufﬂed and to look up intended data blocks when data
is queried. In comparison, index based ORAMs [16–19] maintain
index structures to record the mapping between data blocks and
locations and facilitate data lookup at the query time.
Though a large variety of techniques has been proposed and adopted,
most existing ORAM constructions are still not applicable in prac-
tice because of the high communication and/or storage overheads
incurred. Particularly, hash based ORAMs require a large extra
storage space at the server side to deal with hash collisions; hence,
access pattern privacy usually has to be preserved via heavy data re-
trievals and complicated data shufﬂing. Index based ORAMs rely
on index structures to avoid the above problems. However, they
fail to provide an efﬁcient solution with which the index structures
can be stored in a space-efﬁcient manner and meanwhile can be
searched and updated in a time-efﬁcient manner. This limitation
has also impeded their applications in practice.
We propose a novel ORAM scheme, called segmentation-based
oblivious RAM (S-ORAM), aiming to bring theoretical ORAM con-
structions one step closer to practical applications. Our proposal is
motivated by the observation that a large-scale storage system (e.g.,
a cloud storage system such as Amazon S3 [2]) usually stores data
in blocks and such a block typically has a large size [18], but most
existing ORAM constructions treat data blocks as atomic units for
query and shufﬂing, and do not factor block size into their de-
signs. S-ORAM is designed to make better use of the large block
size by introducing two segment-based techniques, namely, piece-
wise shufﬂing and segment-based query, to improve the efﬁciency
in data shufﬂing and query. With piece-wise shufﬂing, data can
be perturbed across a larger range of blocks in a limited user-side
storage; this way, the shufﬂing efﬁciency can be improved, and
the improvement gets more signiﬁcant as the block size increases.
With segment-based query, S-ORAM organizes the data storage at
the server side as a hierarchy of single-segment and multi-segment
layers, and an encrypted index block is introduced to each segment.
With these two techniques at the core, together with a few supple-
mentary algorithms for distributing blocks to segments, S-ORAM
can accomplish efﬁcient query with only O(log N ) communication
overhead and a constant user-side storage, while existing ORAM
constructions have to use a larger user-side storage to achieve the
same level of communication efﬁciency in query.
Extensive security analysis has been conducted to verify the se-
curity of the proposed S-ORAM. Particularly, S-ORAM has been
shown to be a provably highly secure solution that has a negligible
− log N ), which is no higher than that of
failure probability of O(N
existing ORAM constructions.
In terms of communication and storage overheads, S-ORAM out-
performs the Balanced ORAM (B-ORAM) [13] and the Path ORAM
(P-ORAM) [19], which are the best known theoretical hash-based
and practical index-based ORAMs under small local storage as-
sumption, respectively. Particularly, under practical settings [18]
where the number of data blocks N ranges from 220 to 236 and the
block size is 32 KB to 256 KB, (i) the communication overhead
of S-ORAM is 12 to 23 times less than B-ORAM when they have
the same constant-size user-side storage; (ii) S-ORAM consumes
80% less server-side storage and around 60% to 72% less band-
width than P-ORAM when they have the similar logarithmic-size
user-side storage.
The rest of the paper is organized as follows. Section 2 brieﬂy re-
views existing ORAM constructions. In Section 3, the basic system
model and threat model are described, and a formal security deﬁ-
nition is provided. Our proposed S-ORAM is described in detail
in Section 4. The subsequent Section 5 provides the security and
overhead analysis as well as the comparisons between S-ORAM
and two representative existing ORAM constructions. Finally, Sec-
tion 6 concludes the paper.
2. RELATED WORK
In the past decades, there are numerous ORAM schemes proposed
to hide user’s pattern of access to remote data storage. We roughly
classify them into two categories based on the data lookup tech-
nique used. From each category, one representative ORAM with
the best performance among its peers is chosen to be compared
with S-ORAM in Section 5.3.
• Hash based ORAMs: A number of ORAMs [6, 8–11, 13, 15,
20] belong to this category. With hash functions used for
data lookup, these ORAMs require facilities such as buck-
ets and stashes to deal with hash collisions. To the best of
our knowledege, the Balanced ORAM (B-ORAM) [13] pro-
posed by Kushilevitz et. al. achieves the best asymptotical
communication efﬁciency among hash based ORAMs.
• Index based ORAMs: For ORAMs [16–19] belonging to this
category, an index structure is used for data lookup. There-
fore, it requires that the user-side storage stores the index,
which is feasible only if the number of data blocks is not
quite large. When the user-side storage cannot afford to store
the index, it can outsource the index to the server in a way
similar to storing real data blocks at the cost of increased
communication overhead. The Path ORAM (P-ORAM) [19]
proposed by Stefanov et. al.
is a representative scheme in
this category.
blocks per query. In practice, however, the overhead is on the mag-
nitude of log3 N due to a large constant ignored in the above big-O
notation; particularly, querying one data block may require the user
to access at least 1000 data blocks, which may not be acceptable in
many practical applications.
2.2 P-ORAM
In P-ORAM, the server-side storage is organized as a binary tree
in which each node contains a constant-size bucket for storing data
blocks.
Initially, data are randomly stored at leaf nodes, and an
index structure is maintained to record the mapping between the
IDs of data blocks and the IDs of the leaf nodes storing the blocks.
Based on the index, a data query process retrieves all blocks on
the path that contains the query target block and then moves the
target block to the root node. In addition, a background eviction
process is performed after each query process, to gradually evict
blocks from the root node to nodes of lower-height so as to avoid
or reduce node overﬂowing. The index can also be outsourced to
the server and stored in a similar binary tree. Besides, to keep
bucket size constant at each node, a user-side storage whose size
is a logarithmic function of the number of data blocks is needed
to form a stash. P-ORAM achieves a communication overhead of
· ω(1) blocks per query, where Z is data block
O
size and ω(1) is a security parameter. Though the communication
overhead is considered to be acceptable in practice [19], the over-
head of server-side storage, which is about 32N blocks, may pose
as a big cost to the user.
log(Z= log N )
(
)
log2 N
Note that, other ORAM constructions such as the partition based
ORAM [18], PrivateFS [21], and the single-round ORAM [22], ei-
ther are based on different user-side storage assumptions than ours
or focus on aspects other than bandwidth and storage efﬁciency,
which is the main focus of our work. Due to these prominent dif-
ferences, we do not compare them with our proposed S-ORAM.
3. PROBLEM STATEMENT
3.1 System Model
Similar to existing ORAM constructions [6, 8–11, 13, 15, 20], we
consider a system composed of a user and a remote storage server.
The user exports a large amount of data to store at the server, and
wishes to hide from the server the pattern of his/her accesses to the
data. Data are assumed to be stored and accessed in the unit of
blocks, and the typical size of a block ranges from 32 KB to 256
KB [18]. Let N denote the total number of data blocks exported by
the user. For simplicity, we assume log N is an even number.
Each data request from the user, which the user wishes to keep
private, can be one of the following types:
log N
2.1 B-ORAM
In B-ORAM, the server-side storage is organized as a hybrid hier-
archy with a total of
log log N layers, where each layer consists of
log N equal-size sublayers. For the top O(log log N ) layers, the
bucket-hash structure [6] proposed by Goldreich and Ostrovsky is
deployed and the remaining layers are cuckoo-hash structures with
a shared stash [8]. Since each layer is extended to multiple sublay-
ers, the shufﬂing frequency is reduced while the query overhead is
increased; a balance is struck between the query and shufﬂing over-
heads. The randomized shellsort [7] is selected as the underlying
oblivious sorting algorithm for the shufﬂing process. In theory, the
amortized communication overhead of B-ORAM is O
(
)
log2 N
log log N
• read a data block D of unique ID i from the storage, denoted
as a 3-tuple (read, i, D); or
• write/modify a data block D of unique ID i to the storage,
denoted as a 3-tuple (write, i, D).
To accomplish a data request, the user may need to access the re-
mote storage multiple times. Each access to the remote storage,
which is observable by the server, can be one of the following types:
• retrieve (read) a data block D from a location l at the remote
storage, denoted as a 3-tuple (read, l, D); or
• upload (write) a data block D to a location l at the remote
storage, denoted as a 3-tuple (write, l, D).
3.2 Threat Model
We assume the user is trusted but the remote server is not. Particu-
larly, the server is assumed to be honest but curious; that is, it be-
haves correctly in storing data and serving users’ data accesses, but
it may attempt to ﬁgure out the user’s access pattern. The network
connection between the user and the server is assumed to be secure;
in practice, this can be achieved using well-known techniques such
as SSL [4].
We inherit the standard security deﬁnition of ORAMs [6, 18, 19] to
deﬁne the security of our proposed ORAM. Intuitively, an ORAM
system is considered secure if the server learns nothing about the
user’s data access pattern. More precisely, it is deﬁned as follows:
′
2, l2, D
Deﬁnition Let ⃗x = ⟨ (op1, i1, D1), (op2, i2, D2), ··· ⟩ denote
a private sequence of the user’s intended data requests, where each
op is either a read or write operation. Let A(⃗x) = ⟨ (op
′
′
1),
1, l1, D
2), ··· ⟩ denote the sequence of the user’s accesses to
′
(op
the remote storage (observed by the server), in order to accomplish
the user’s intended data requests. An ORAM system is said to be
secure if (i) for any two equal-length private sequences ⃗x and ⃗y of
the intended data requests, their corresponding observable access
sequences A(⃗x) and A(⃗y) are computationally indistinguishable;
and (ii) the probability that the ORAM system fails to operate is