printf(*sc*, op_char);fflush(stdout):
3）在经过一个随机等待时间之后我们准备离开关键代码，在进人下一次循环之前我们要调
用semaphore_v把信号量设置为可用状态。整个循环语句执行完毕后，我们发出del_semaphore调
用对代码进行清理。如下所示：
if (!semaphore_v()) exit(EXIT_PAILURE);
pause_time = rand()  2;
sleep(pause_time);
printt(*\ned - finished\n*,getpid());
if (arge > 1){
de1_senvalue() ;
sleep(10) ;
exit(EXIT_SUCCESS);
4)se_semvalue函数通过一个带SETVAL命令的semctl调用初始化信号量。在使用信号量之
前我们必须这样做。如下所示：
static int set_senvalue(void)
union semun sen_union;
sem_union.val = 1;
if (semctl(sem_id,0, SETvAL. sen_union)=e -1) returm(0);
return(1):
5)del_semvalue函数的做法也差不多，只不过它是通过调用一个带IPC_RMID命令的semctl
来副除那个信号量的标识码。如下所示：
加入jaVa编程群：524621833
---
## Page 420
402
Linux程序设计
static void del_semvalue (void)
un1 on semun sem_union;
if (semct1(sen_id, 0,_IPC_RMID, sem_union)== -1)
fprintf (stderr, *Failed to delete semaphore\n*1;
F
6)semaphore_p对信号量做“-1”操作（等待）：
static int semaphore_p[void]
ques jnqias aonzs
sem_b.sem_num s 0;
/.()d、/↑-=dousqwas
（-s （qps）doas） 
sen_b.sen_f1g = SEM_UNDO:
fprintf(stderr.“semaphore_p faiied'n"):
return(0) :
return(1):
7)semaphore_v把sembuf结构中的sem_op部分设置为“1"，从面使信号量变得可用。
static int semaphore_v(void)
struct sembuf sem_b;
sem_b.sen_num = 0;
sem_b.sem_op= 1;/*V() */
}（t-s（qws“pros）doa）jT
fprintf(stderr.*semaphore_v failedin*);
return(0) ;
return(1):
这个简单的程序只允许每个程序只有一个二进制信号量，如果需要用到更多的信号量，我
们可以通过传递信号量变量的办法来扩展它。在大多数情况下，一个二进制信号量也就够用
的了。
我们可以通过多次启动这个程序的办法来对它进行测试。第一次启动时要加上一个参数，
表示应该由它来负责创建和删除信号量的工作。其他实例不需要参数。
下面是有两个程序实例在执行时的样本输出：
Ssesl 1 &
{1}1082
0OXXO0XXO0XX0OXXO0XXOO0OXXO0XXOOXXO0XXXX
S sem1
1082-finished
1063-finished
$
大家可以看到，字母“O”和“X”是成对出现的，这表明对关键代码的处理是正确的。如
果它在读者的系统上不能运行，请在启动程序之前先试试“stty-tostop”命令，它的作用是确保
会产生tty输出的后台程序不引起信号的产生。
加入java编程群：524621833
---
## Page 421
第13章信号量、消惠队列和共事内存
403
操作注释：
在程序的开始，我们使用semget函数通过一个（随意选取的）键字得到了一个信号量标识码。
IPC_CREAT标志的含义是：如果信号量不存在就创建它。
如果程序带着一个参数，信号量的初始化工作就将由它来负责。信号量的初始化工作由
set_semvalue函数完成，它是更通用的semctl函数的简化接口。它还根据程序是否带有参数来判
断需要它打印出哪个字符。sleep的作用是让我们有时间在程序的头一份拷贝执行太多循环次数
之前调用它的其他拷贝。srand和rand的作用是给程序加上点伪随机形式的时间分配。
接下来程序循环了十次，在关键代码和非关键代码部分里会分别停留等待一段随机的时间。
关键代码由我们的semaphore_p函数和semaphore_v函数前后把守着，它们是更通用的semop函数
的简化接口。
在删除信号量之前，启动时带参数的程序会等待其他实例都执行完毕，如果不对信号量
做删除操作，那即使没有程序在使用它，它也会继续存在于系统之中。这个问题应该引起大
家高度的注意，在实际程序里，千万不要在执行之后还粗心地留下信号量没删除。它们会在
你下次执行这个程序的时候引起问题：再说了，信号量也是一种需要大家节约使用的有限资
源呢。
13.1.5信号量总结
我们已经看到，信号量们有一个复杂的程序设计接口。但幸好我们还能为自己准备一-个大
大简化了的接口，而这个接口就已经足以解决大部分信号量的程序设计问题了。
13.2共享内存
共享内存是三个IPC功能里面的第二个。它允许两个不相关的进程去访问同一部分逻辑内存。
如果需要在两个运行中的进程之间传输数据，共享内存将是一种效率极高的解决方案。虽然
X/Open标准并没有对它做出要求，但原因并不是它可有可无，而是因为大多数共享内存的具体
实现都把由不同进程共享的内存安排为同一段物理内存的缘故。
13.2.1概述
共享内存是由IPC为一个进程创建的一个特殊的地址范围，它将出现在进程的地址空间中。
其他进程可以把同一段共享内存段“连接到”它们自已的地址空间里去。所有进程都可以访问
共享内存中的地址，就好像它们是由malloc分配的一样。如果一个进程向这段共享内存写了数据，
所做的改动会立刻被有权访问同一段共享内存的其他进程看到。
共享内存本身没有提供任何同步功能。也就是说，在第一个进程结束对共享内存的写操作
之前，并没有什么自动功能能够预防第个进程开始对它进行读操作。共享内存的访问同步问
题必须由程序员负责。
图13-2中的箭头代表的是各进程的逻辑地址空间到可用物理内存的映射关系，实际情况要比
这个示意图复杂的多，因为可用内存实际是由物理内存和已经交换到磁盘上的内存页面组成的。
加入jaVa编程群：524621833
---
## Page 422
404
Linux程序设计
物理内存
进A的定辑地址空码
进程的逻辑地空间
图13-2
13.2.2共享内存函数
共享内存使用的函数与信号量的很相似，请看它们的定义情况：
#1nclude
void *abmat（int shm_id, const vold *shm_addr,fat shmflg);
int shndt（constvoid*sbm_addx))
int shnctl(int sbm_id, int ced,struct sbmdd_ds *buf）;
Int abmget(kay_t key.size_t sise,int shatlg);
类似于信号量的情况，头文件sys/types.h和/sys/ipc.h一般也不能少。
1.shmget函数
我们通过shmget函数来创建共享内存：
int shnget(key_t key. sixe_t eizo, int shmflg )1
类似于信号量的情况，程序需要提供一个键字参数key，也就是这个共享内存段的名字，而
shmget函数返回一个供后续共享内存函数使用的共享内存标识码。有一个特殊的键值
IPC_PRIVATE，它的作用是创建本进程私用的共享内存。这个键值很少会用到，但一个进程与它
加入jaVa编程群：524621833
---
## Page 423
第13章信号量、消息队列和共享内存405
自己共享内存的事情也不是不可能。
第二个参数size以字节为单位给出了需要共享的内存量。
第三个参数shmflg由九个权限标志构成，它们的用法和创建文件时使用的mode模式标志是
一样的。由IPC_CREAT定义的特殊位必须与其他标志按位OR（或）在一起才能创建出一个新的
的共享内存段来。设置TPC_CREAT标志并传递已存在的共享内存段的键字不会产生错误。如果
IPC_CREAT标志用不着，就会忽略其作用。
权限标志对共享内存来说是非常有用的，因为它们允许一个进程创建出这样一种共享内存：
允许共享内存的创建者用户所拥有的进程对这段共享内存进行写操作，但其他用户创建的进程
却只能进行读操作。给共享内存加上相应的标志就可以既提供一种有效的数据只读访问措施，
又不必冒其他用户可能会修改它的风险。
如果共享内存创建成功，shmget将返回一个非负整数，即该段共享内存的标识码；如果失
败，返回“-1”。
2.shmat西数
在共享内存段刚被创建的时候，任何进程还都不能访问它。为了建立对这个共享内存段的
访问渠道，必须由我们来把它连接到某个进程的地址空间。这项工作是由shmat函数完成的，下
面是它的定义情况：
vold *shaat(int shm_id, congt void *sbm_addr. int shmflg ):
第一个参数shm_id是shmget返回的共享内存标识码。
第二个参数shm_addr是把共享内存连接到当前进程去的时候准备放置它的那个地址。这通
常是一个空指针，表示把选择共享内存出现处的地址这项工作交给系统去完成。
第三个参数shmflg是一组按位OR（或）在一起的标志。它的两个可能取值是SHM_RND
（这个标志与shm_addr一起控制着共享内存连接的地址）和SHM_RDONLY（它使连接的共享内
存成为一个只读区间）。很少有需要控制共享内存连接的地址的情况，一般都是由系统替你挑选
一个地址：否则就会使你的软件对硬件的依赖性过高。
如果shmat调用操作成功，它将返回一个指针，指针指向共享内存的第一个字节；如果失败，
它将返回“-1”。
共享内存的读写权限由它自己的属主（即共享内存的创建者）它的访问权限和当前进程的
属主情况来决定。共享内存的访问权限类似于文件的访问权限。
这里有一个例外，就是“shmflg&SHM_RDONLY”为true时的情况。此时这段共享内存将
不允许写操作的执行，哪怕它的访问权限允许写操作都不行。
3.shmdt函数
shmdt函数的作用是把共享内存与当前进程脱离开。它的参数是一个由shmat返回的地址指
针。如果操作成功，它将返回“0"，失效则返回“-1”：需要提醒大家的是脱离共享内存并不等
于删除它，只是当前进程不能再继续访问它面已。
4.shmctl函数
与信号量那复杂的控制函数相比，共享内存的控制函数（谢天谢地）要简单得多。下面是
它的定义：
加入jaVa编程群：524621833
---
## Page 424
406
Linux程序设计
Int shactl(int sba_id, int couaand, struct sbnid_ds *buf ) 1
shmid_ds结构至少应该包含以下几个成员：
struct ahmid_ds (
uid_t shn_pern.uid;
uid_t wbn_perm.gid;
mode_t shm_pem.mode)
第一个参数shm_id是由shmget函数返回的共享内存标识码。
第二个参数command是将要采取的动作。它有三个可取值（见表13-2）：
表13-2
命令
说明
IPC_STAT
把shmid_ds结构中的数据设置为共享内存的当前关联值
TPC_SE?
在进程有足够权限的前提下，把共享内存的当前关联值设置为hmid_ds数据结构中绘出的值
IPC_RMID
剩除共享内存段
第三个参数buf是一个指针，它指向一个保存着共享内存的模式状态和访问权限的数据结构。
如果操作成功，它将返回“0"，失败则返回“-1”。X/Open没有规定试图删除一个正处于连
接状态的共享内存段时会发生什么事情、一般的做法是，这个已经被“删除”了的连接态共享
内存段还能继续使用，直到从最后一个进程上脱离为止。但是，因为这种行为不属于技术规范
里的规定，所以最好不要依赖它。
在学习了共享内存函数之后，我们来编写一个使用它们的程序。我们将编写两个程序
shml.c和shm2.c。第一个（消费者）将创建一个共享内存段，然后把写到它里面的数据都显示
出来。第二个（加工厂）将连接一个现有的共享内存段，并允许我们向其中输人数据。
动手试试：共事内存
1）我们先来编写一个公共的头文件来定义我们将要用到的共享内存。我们给它起名为
shm_com.h。如下所示：
#define TExr_Sz 2048
int written_by_you:
char some_text [TEXT_SZ];
} ;
上面定义的结构“消费者”和“加“厂”两个程序都要用到。我们通过int（整数）类型的
里；而且我们决定需要传输多达2K的文本。
2)我们的第一个程序是那个“消费者”。在头文件之后，我们用一个shnget调用创建了共
享内存段（其长度就是我们共享内存结构的长度），注意我们设置了IPC_CREAT标志位，如下
所示：
#include 
加入jaVa编程群：524621833
---
## Page 425
第13章信号量、消息队列和共享内存
include cstdlib.h>
#inciude 
#include cstring.h>
include 
1nclude 
include
#1nelude “shm_con.h'
int main()
int running = 1:
struct shared_use_st *shared_stuff:
void *sha:ed_memory = (void *)0:
int shmid;
srand( (unsigned int)getpid());
shmid = shuget((key_t)1234. sizeof(struct shared_use_st) . 0666 | IPC_CREAT) :
if (shmid == -1}(
fprintfIstderr,
exit (EXIT_FAILURE) :
*shmgct failed\n*);
3）现在，让程序能够访问到这段共享内存：
shared_menory =shmat(shmid.(void*)0,0:
]（[-(pro) msowapoxeus） j
fprintt（stderr,*shnat failed\n*}:
exit(EXIT_FAILURE}:
：
printf (Menory attached at sx\n*, (int)shared_memory):
4）接下来的程序把shared_memory赋值给shared_stuff，然后输出written_by_you中的文本。
循环将一直执行到在written_by_you里找到“end”字样为止。sleep调用让“消费者”在关键代