# 设备指纹指南：上篇
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
设备指纹在安全上主要用来识别用户，增强认证能力。参考业界普遍实践和学术探索，我们对常见的29种方法进行了比较，本文对这些方法根据稳定性、可重复性、资源消耗、用户端被动、绕过难度和可区分性进行了比较，用以在实践中选择。
## 一、背景
网络认证机制当前主要仍然是密码方法，但问题大家也都知道，密码方法在可用性、安全性上都有缺陷。设备指纹作为一种增强技术，收集设备软硬件信息进行识别，例如浏览器可采集屏幕分辨率、本地时间、操作系统版本进行主机系统识别，同时也可通过浏览器行为采集信息，目前很多用户画像、广告推送都会采用设备指纹跟踪用户浏览的习惯。另外则是在风控领域有大规模使用，通过在认证过程中进行多维判断，在无需用户干预的情况下实现增强认证。
现实中对设备指纹的主要考虑是：能够提高安全性、对用户不可见、兼容，从而在可用性和可部署性上实现低成本。
## 二、学术界研究
学术界对设备指纹也早有研究，目前业界知名的研究我们也做了分析。
第一篇设备指纹研究论文是Eckersley在2010年发表的，详细讨论了基于浏览器的设备指纹的概念，表明可通过收集设备IP地址、时区、屏幕分辨率、支持字体和插件列表等基本信息来识别用户，并跟踪用户的浏览习惯，这个功能最初目的是为了优化各类设备浏览体验。
后来Mowery等人提出了两种更先进的指纹方法：第一种是测量浏览器JavaScript引擎的性能签名，第二种是在HTML5画布中渲染文本，来区分不同软硬件平台的字体渲染技术。
Nikiforakis等人继续扩展了一些对抗下的方法，例如不同浏览器JavaScript实现差异会暴露出使用的是哪个浏览器，哪怕是user-agent被伪造。用户如果使用代理，则可通过Flash或Java等外部插件来确认真实IP地址。用户如果改动设备指纹，则会导致一个罕见指纹，对识别用户反而更有用。
Bojinov开始对手机传感器进行指纹识别，利用了设备的加速度校准误差和扬声器麦克风系统的响应频率。
Nikiforakis等人开发了PriVaricator，通过随机化各种浏览器参数来降低指纹性。
Acar和Nikiforakis等人的实证研究发现，在用户清除浏览器cookie的情况下广告商普遍使用设备指纹作为后备机制跟踪用户，广告商还通过非传统的存储机制保存识别信息，例如Flash
cookie，用户很难删除，如果用户清除浏览器cookie，这些信息还可用来重建浏览器cookie。
在安全上也有一些研究探索。Unger提出了，通过监控某些Web浏览器属性(例如user-agent、支持的CSS功能)来增强会话安全，帮助检测会话劫持。Preuveneers和Joosen则提出了一个协议，该协议在整个认证会话中监控各种参数，使用比较算法为每个属性分配一个权重来确定指纹变化。Van
Goethem提出了一种基于加速度计的设备指纹机制，用于多因素认证。Freeman提出了一个统计框架，利用各种浏览器属性和其他参数（如访问时间）来检测可疑的登录尝试。
Spooren认为，与台式电脑相比，移动设备指纹相对缺乏多样性，在风险的认证中的可靠性较低，但这个研究并没包括一些先进的指纹技术。Laperdrix收集分析了119,000个指纹，发现虽然一些移动设备属性的多样性较低（例如浏览器插件支持有限），但其他属性（例如user-agent和画布指纹）的多样性要比台式机高得多。Eisen有两项设备指纹专利：第一项描述了通过记录服务器的本地时间和客户端时间差来检测欺诈（用户端时区、夏令时以及UTC漂移）；第二项描述了一个通用的框架，在用户端向服务器请求的每个页面上获取指纹，并在指纹有足够变化时发出告警。
Varghese的专利描述了如何将设备指纹作为索引，从涉嫌欺诈的设备指纹数据库中匹配相关欺诈风险，并据此给账户访问分级。
Markus提出了隐式认证，根据用户行为如打字节奏、触摸屏输入、传感器输入（如陀螺仪、加速度计、附近蓝牙或WiFi）、使用模式（如访问时间、常用访问页面）等来加强或替代现有的认证机制。在更广泛的多维认证背景下，用户行为特征分析可与设备指纹一起使用，在不牺牲可用性的情况下实现更强认证。
## 三、设备指纹框架和威胁模型
在设备指纹中，服务器使用多种指纹向量验证设备的软硬件相关属性。“纯粹的”设备指纹是无状态的，对应则是有状态。而攻击者则会学习设备指纹的组成来对抗绕过。
有些向量要求浏览器执行操作，例如通过JavaScript，并将输出返回给服务器。如果一个向量响应是静态的，不管在什么情况下都不变，那么攻击者可以重放。如果服务器改变向量，或者使用单个向量，或其响应取决于条件或二次挑战，那就需要更高一级对抗，例如伪造地理位置等。
按照攻击能力，我们分为五类，用来分析设备指纹的防御能力。
M1：天真级，天真级就是传统密码猜测攻击，这是最容易防范的。攻击者试图猜测账户密码，但不对抗设备指纹，可根据历史数据确定暴力尝试来自来自新设备。
M2：密码和指纹猜测攻击。在多个账户中按流行程度暴力猜测密码，同时对设备指纹猜测迭代。攻击者可伪造设备匹配的指纹，这些指纹可能是为目标网站受众量身定做，例如针对特定国家用户的网站有特定时区访问者，特定厂商的技术支持网站则使用该厂商设备。然后，攻击者可以根据每个密码和设备指纹组合，在所有账户中递减顺序遍历密码-指纹。攻击者还可通过已泄漏密码库或设备指纹库（例如利用XSS获取大量数据伪造设备指纹）。
M3：目标密码和指纹猜测攻击。攻击者针对特定账户的密码猜测攻击，同时伪造指纹，这种攻击按照某种顺序对密码和指纹进行暴力迭代，通过已知信息(例如已知用户使用iphone7)或在特殊情况下可能拥有用户密码或用户设备指纹，从而将攻击降低为指纹猜测或密码猜测，大大减少搜索空间。
M4：指纹钓鱼和欺骗。钓鱼攻击可窃取密码和设备指纹。然后攻击者伪造指纹并使用密码访问，如果设备指纹不易伪造，这种攻击就比较困难。
M5：利用指纹欺骗进行会话劫持。攻击者目的是劫持会话，M1-M4攻击者是通过密码和指纹伪造来破解账户。M5攻击者则可窃取会话cookie，并利用诸如配置不当的HTTPS或XSS漏洞来执行用户端JavaScript。这样攻击者能够捕获设备指纹，从攻击者设备上恢复会话。因此，在M5下设备指纹必须很难伪造。
模型的总体分层结论如下：
M1：设备指纹可以防御，即使指纹可重放。
M2：设备指纹可显著降低攻击成功概率，即使指纹可重放，即使指纹的猜测空间足够大。
M3：这类攻击比较难以防御，因为攻击目标是特定用户，并拥有特定设备信息。
M4：最难防范，攻击者通过钓鱼获取密码和设备指纹，如果指纹可重放，就足以伪造。
M5：专门针对会话劫持，指纹不仅仅是在一个会话开始时，而是在整个会话过程中用来增强身份验证，后面我们会讨论。
## 四、设备指纹分类
我们查了各类研究文献、专利，以及网上技术文章、开源指纹库、营销广告和反欺诈服务，把所有的到的类型进行了总结分类，分类主要根据获取方法。
第一类：浏览器提供的信息。浏览器明确提供（例如JavaScript）多种系统信息，这些信息已知向量如下：
（a） 主要软硬件细节。navigator和浏览器对象模型(BOM)公开了浏览器/操作系统厂商和版本、系统语言、平台、user-agent
(有时还包括设备型号之类)、已安装插件、浏览器支持的存储机制(如本地存储(localStorage)、索引数据库(indexedDB)、会话存储(sessionStorage)、通过openDatabase的WebSQL)、屏幕分辨率、颜色深度和像素等属性。
（b） WebGL信息。WebGL是用来在浏览器内渲染图形的JavaScript
API，公开了底层浏览器和硬件各种属性(如GL版本、最大纹理大小、渲染缓冲区大小、支持的WebGL扩展、供应商/渲染器字符串)。
（c） 系统时间和时钟漂移。设备的系统时间可通过JavaScript访问，并用于推断设备的时区、是否遵守夏令时以及UTC时钟漂移。
（d）
电池信息。当提供足够精确的读数时，HTML5电池状态API适用于指纹识别。电池电量可用于在不同网站上对用户端进行短期跟踪，电池容量随着电池老化缓慢下降，但在相对较短的时间内，例如一天内变化不大，可通过监测约30秒的放电速率来估计，并用于辅助识别。
（e） 永续cookie。Evercookie通过使用HTML5本地存储、HTTP ETags或Flash
Cookie等多种技术，将用户端标识符存储在设备上，从而允许网站重建用户删除的cookie。
（f）