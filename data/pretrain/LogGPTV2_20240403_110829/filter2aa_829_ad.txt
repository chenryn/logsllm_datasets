(JMP) instructions to redirect the flow of execution from the function being 
hooked into the function specified by the developer of the EDR.
Microsoft Detours is one of the most commonly used libraries for 
implementing function hooks. Behind the scenes, Detours replaces the 
first few instructions in the function to be hooked with an unconditional 
JMP instruction that will redirect execution to a developer-defined function, 
also referred to as a detour. This detour function performs actions specified 
by the developer, such as logging the parameters passed to the target func-
tion. Then it passes execution to another function, often called a trampoline, 
which executes the target function and contains the instructions that were 
Evading EDR (Early Access) © 2023 by Matt Hand
20   Chapter 2
originally overwritten. When the target function completes its execution, 
control is returned to the detour. The detour may perform additional pro-
cessing, such as logging the return value or output of the original function, 
before returning control to the original process.
Figure 2-2 illustrates a normal process’s execution compared to one 
with a detour. The solid arrow indicates expected execution flow, and the 
dashed arrow indicates hooked execution.
application.exe
kernel32!
CreateFile()
ntdll!
NtCreateFile()
ntoskrnl
edr!
HookedNtCreateFile()
Figure 2-2: Normal and hooked execution paths
In this example, the EDR has opted to hook ntdll!NtCreateFile(), the 
syscall used to either create a new I/O device or open a handle to an exist-
ing one. Under normal operation, this syscall would transition immediately 
to the kernel, where its kernel-mode counterpart would continue opera-
tions. With the EDR’s hook in place, execution now makes a stop in the 
injected DLL. This edr!HookedNtCreateFile() function will make the syscall 
on behalf of ntdll!NtCreateFile(), allowing it to collect information about 
the parameters passed to the syscall, as well as the result of the operation.
Examining a hooked function in a debugger, such as WinDbg, clearly 
shows the differences between a function that has been hooked and one 
that hasn’t. Listing 2-1 shows what an unhooked kernel32!Sleep() function 
looks like in WinDbg.
1:004> uf KERNEL32!SleepStub
KERNEL32!SleepStub:
00007ffa`9d6fada0 48ff25695c0600 jmp 
qword ptr [ KERNEL32!imp_Sleep (00007ffa`9d760a10)
KERNEL32!_imp_Sleep:
00007ffa`9d760a10 d08fcc9cfa7f  
ror 
byte ptr [rdi+7FFA9CCCh],1
00007ffa`9d760a16 0000  
add byte ptr [rax],al
00007ffa`9d760a18 90  
nop
00007ffa`9d760a19 f4  
hlt
00007ffa`9d760a1a cf  
iretd
Listing 2-1: The unhooked kernel32!SleepStub() function in WinDbg
This disassembly of the function shows the execution flow that 
we expect. When the caller invokes kernel32!Sleep(), the jump stub 
kernel32!SleepStub() is executed, long-jumping (JMP) to kernel32!_imp_Sleep(), 
which provides the real Sleep() functionality the caller expects.
The function looks substantially different after the injection of a DLL 
that leverages Detours to hook it, shown in Listing 2-2.
Evading EDR (Early Access) © 2023 by Matt Hand
Function-Hooking Dlls   21
1:005> uf KERNEL32!SleepStub
KERNEL32!SleepStub:
00007ffa`9d6fada0 e9d353febf jmp 00007ffa`5d6e0178
00007ffa`9d6fada5 cc  
int 3
00007ffa`9d6fada6 cc  
int 3
00007ffa`9d6fada7 cc  
int 3
00007ffa`9d6fada8 cc  
int 3
00007ffa`9d6fada9 cc  
int 3
00007ffa`9d6fadaa cc  
int 3
00007ffa`9d6fadab cc  
int 3
1:005> u 00007ffa`5d6e0178
00007ffa`5d6e0178 ff25f2ffffff jmp qword ptr [00007ffa`5d6e0170]
00007ffa`5d6e017e cc  
int 3
00007ffa`5d6e017f cc  
int 3
00007ffa`5d6e0180 0000  
add byte ptr [rax],al
00007ffa`5d6e0182 0000  
add byte ptr [rax],al
00007ffa`5d6e0184 0000  
add byte ptr [rax],al
00007ffa`5d6e0186 0000  
add byte ptr [rax],al
00007ffa`5d6e0188 0000  
add byte ptr [rax],al
Listing 2-2: The hooked kernel32!Sleep() function in WinDbg
Instead of a JMP to kernel32!_imp_Sleep(), the disassembly contains 
a series of JMP instructions, the second of which lands execution in 
trampoline64!TimedSleep(), shown in Listing 2-3.
0:005> uf poi(00007ffa`5d6e0170)
trampoline64!TimedSleep
  10 00007ffa`82881010 48895c2408  
mov 
qword ptr [rsp+8],rbx
  10 00007ffa`82881015 57  
push 
rdi
  10 00007ffa`82881016 4883ec20  
sub 
rsp,20h
  10 00007ffa`8288101a 8bf9  
mov 
edi,ecx
  10 00007ffa`8288101c 4c8d05b5840000 lea 
r8,[trampoline64!'string' (00007ffa`828894d8)]
  10 00007ffa`82881023 33c9  
xor 
ecx,ecx
  10 00007ffa`82881025 488d15bc840000 lea 
rdx,[trampoline64!'string' (00007ffa`828894d8)]
  10 00007ffa`8288102c 41b930000000 
mov 
r9d,30h
  10 00007ffa`82881032 ff15f8800000 
call 
qword ptr [trampoline64!_imp_MessageBoxW]
  10 00007ffa`82881038 ff15ca7f0000 
call 
qword ptr [trampoline64!_imp_GetTickCount]
  10 00007ffa`8288103e 8bcf  
mov 
ecx,edi
  10 00007ffa`8288103e 8bd8  
mov 
ebx,eax
  10 00007ffa`82881040 ff15f0a60000 
call 
qword ptr [trampoline64!TrueSleep]
  10 00007ffa`82881042 ff15ba7f0000 
call 
qword ptr [trampoline64!_imp_GetTickCount]
  10 00007ffa`82881048 2bc3  
sub 
eax,ebx
  10 00007ffa`8288104e f00fc105e8a60000  lock xadd dword ptr [trampoline64!dwSlept],eax
  10 00007ffa`82881050 488b5c2430  
mov 
rbx,qword ptr [rsp+30h]
  10 00007ffa`82881058 4883c420  
add 
rsp,20h
  10 00007ffa`8288105d 5f  
pop 
rdi
  10 00007ffa`82881061 c3  
ret
Listing 2-3: The kernel32!Sleep() intercept function
To collect metrics about the hooked function’s execution, this 
trampoline function evaluates the amount of time it sleeps, in CPU 
Evading EDR (Early Access) © 2023 by Matt Hand
22   Chapter 2
ticks, by calling the legitimate kernel32!Sleep() function via its internal 
trampoline64!TrueSleep() wrapper function. It displays the tick count in a 
pop-up message.
While this is a contrived example, it demonstrates the core of what 
every EDR’s function-hooking DLL does: proxying the execution of the 
target function and collecting information about how it was invoked. 
In this case, our EDR simply measures how long the hooked program 
sleeps. In a real EDR, functions important to adversary behavior, such as 
ntdll!NtWriteVirtualMemory() for copying code into a remote process, would 
be proxied in the same way, but the hooking might pay more attention to 
the parameters being passed and the values returned.
Injecting the DLL
A DLL that hooks functions isn’t particularly useful until it is loaded into 
the target process. Some libraries offer the ability to spawn a process and 
inject the DLL through an API, but this isn’t practical for EDRs, as they 
need the ability to inject their DLL into processes spawned by users at any 
time. Fortunately, Windows provides a few methods to do this.
Until Windows 8, many vendors opted to use the AppInit_Dlls infrastruc-
ture to load their DLLs into every interactive process (those that import 
user32.dll). Unfortunately, malware authors routinely abused this technique 
for persistence and information collection, and it was notorious for causing 
system performance issues. Microsoft no longer recommends this method 
for DLL injection and, starting in Windows 8, prevents it entirely on systems 
with Secure Boot enabled.
The most commonly used technique for injecting a function-hooking 
DLL into processes is to leverage a driver, which can use a kernel-level fea-
ture called kernel asynchronous procedure call (KAPC) injection to insert the 
DLL into the process. When the driver is notified of the creation of a new 
process, it will allocate some of the process’s memory for an APC routine 
and the name of the DLL to inject. It will then initialize a new APC object, 
which is responsible for loading the DLL into the process, and copy it into 
the process’s address space. Finally, it will change a flag in the thread’s APC 
state to force execution of the APC. When the process resumes its execu-
tion, the APC routine will run, loading the DLL. Chapter 5 explains this 
process in greater detail.
Detecting Function Hooks
Offensive security practitioners often want to identify whether the functions 
they plan to use are hooked. Once they identify hooked functions, they can 
make a list of them and then limit, or entirely avoid, their use. This allows 
the adversary to bypass inspection by the EDR’s function-hooking DLL, 
as its inspection function will never be invoked. The process of detecting 
hooked functions is incredibly simple, especially for the native API func-
tions exported by ntdll.dll.
Evading EDR (Early Access) © 2023 by Matt Hand
Function-Hooking Dlls   23
Each function inside ntdll.dll consists of a syscall stub. The instructions 
that make up this stub are shown in Listing 2-4.
mov r10, rcx
mov eax, 
syscall
retn
Listing 2-4: Syscall stub assembly instructions
You can see this stub by disassembling a function exported by ntdll.dll 
in WinDbg, as shown in Listing 2-5.
0:013> u ntdll!NtAllocateVirtualMemory
ntdll!NtAllocateVirtualMemory
00007fff`fe90c0b0 4c8bd1  
   mov 
r10,rcx
00007fff`fe90c0b5 b818000000    mov 
eax,18h
00007fff`fe90c0b8 f694259893fe7f01 test  byte ptr [SharedUserData+0x308,1
00007fff`fe90c0c0 7503  
   jne 
ntdll!NtAllocateVirtualMemory+0x15
00007fff`fe90c0c2 0f05  
   syscall
00007fff`fe90c0c4 c3  
   ret
00007fff`fe90c0c5 cd2e  
   int 2Eh
00007fff`fe90c0c7 c3  
   ret
Listing 2-5: The unmodified syscall stub for ntdll!NtAllocateVirtualMemory()
In the disassembly of ntdll!NtAllocateVirtualMemory(), we see the basic 
building blocks of the syscall stub. The stub preserves the volatile RCX 
register in the R10 register and then moves the syscall number that cor-
relates to NtAllocateVirtualMemory(), or 0x18 in this version of Windows, 
into EAX. Next, the TEST and conditional jump (JNE) instructions follow-
ing MOV are a check found in all syscall stubs. Restricted User Mode uses it 
when Hypervisor Code Integrity is enabled for kernel-mode code but not 
user-mode code. You can safely ignore it in this context. Finally, the syscall 
instruction is executed, transitioning control to the kernel to handle the 
memory allocation. When the function completes and control is given back 
to ntdll!NtAllocateVirtualMemory(), it simply returns.
Because the syscall stub is the same for all native APIs, any modifica-
tion of it indicates the presence of a function hook. For example, Listing 2-6  
shows the tampered syscall stub for the ntdll!NtAllocateVirtualMemory() 
function.
0:013> u ntdll!NtAllocateVirtualMemory
ntdll!NtAllocateVirtualMemory
00007fff`fe90c0b0 e95340baff  
jmp 
00007fff`fe4b0108
00007fff`fe90c0b5 90  
nop
00007fff`fe90c0b6 90  
nop
00007fff`fe90c0b7 90  
nop
00007fff`fe90c0b8 f694259893fe7f01 test  byte ptr [SharedUserData+0x308],1
00007fff`fe90c0c0 7503  
jne 
ntdll!NtAllocateVirtualMemory+0x15
00007fff`fe90c0c2 0f05  
syscall
Evading EDR (Early Access) © 2023 by Matt Hand
24   Chapter 2
00007fff`fe90c0c4 c3  
ret
00007fff`fe90c0c5 cd2e  
int 2Eh
00007fff`fe90c0c7 c3  
ret
Listing 2-6: The hooked ntdll!NtAllocateVirtualMemory() function
Notice here that, rather than the syscall stub existing at the entry point 
of ntdll!NtAllocateVirtualMemory(), an unconditional JMP instruction is pres-
ent. EDRs commonly use this type of modification to redirect execution 
flow to their hooking DLL.
Thus, to detect hooks placed by an EDR, we can simply examine func-
tions in the copy of ntdll.dll currently loaded into our process, comparing 
their entry-point instructions with the expected opcodes of an unmodified 
syscall stub. If we find a hook on a function we want to use, we can attempt 
to evade it using the techniques described in the next section.
Evading Function Hooks
Of all the sensor components used in endpoint security software, func-
tion hooks are one of the most well researched when it comes to evasion. 
Attackers can use a myriad of methods to evade function interception, all of 
which generally boil down to one of the following techniques:
• 
Making direct syscalls to execute the instructions of an unmodified sys-
call stub
• 
Remapping ntdll.dll to get unhooked function pointers or overwriting 
the hooked ntdll.dll currently mapped in the process
• 
Blocking non-Microsoft DLLs from loading in the process to prevent 
the EDR’s function-hooking DLL from placing its detours
This is by no means an exhaustive list. One example of a technique that 
doesn’t fit into any of these categories is vectored exception handling, as 
detailed in Peter Winter-Smith’s blog post “FireWalker: A New Approach to 
Generically Bypass User-Space EDR Hooking.” Winter-Smith’s technique 
uses a vectored exception handler (VEH), an extension to structured exception 
handling that allows the developer to register their own function for which 
to watch and handle all exceptions in a given application. It sets the pro-
cessor’s trap flag to put the program into single-step mode. On each new 
instruction, the evasion code generates a single-step exception on which the 
VEH has first right of refusal. The VEH will step over the hook placed by 
the EDR by updating the instruction pointer to the chunk containing the 
original, unmodified code.
While interesting, this technique currently only works for 32-bit applica-
tions and can adversely affect a program’s performance, due to the single 
stepping. For these reasons, this approach to evasion remains beyond 
the scope of this chapter. We’ll instead focus on more broadly applicable 
techniques.
Evading EDR (Early Access) © 2023 by Matt Hand
Function-Hooking Dlls   25
Making Direct Syscalls
By far, the most commonly abused technique for evading hooks placed on 
ntdll.dll functions is making direct syscalls. If we execute the instructions 
of a syscall stub ourselves, we can mimic an unmodified function. To do so, 
our code must include the desired function’s signature, a stub containing 
the correct syscall number, and an invocation of the target function. This 
invocation uses the signature and stub to pass in the required parameters 
and execute the target function in a way that the function hooks won’t 
detect. Listing 2-7 contains the first file we need to create to execute this 
technique.
NtAllocateVirtualMemory PROC
mov r10, rcx
mov eax, 0018h
syscall
ret
NtAllocateVirtualMemory ENDP
Listing 2-7: Assembly instructions for NtAllocateVirtualMemory( )
The first file in our project contains what amounts to a reimplementa-
tion of ntdll!NtAllocateVirtualMemory(). The instructions contained inside 
the sole function will fill the EAX register with the syscall number. Then, 
a syscall instruction is executed. This assembly code would reside in its 
own .asm file, and Visual Studio can be configured to compile it using the 
Microsoft Macro Assembler (MASM), with the rest of the project.
Even though we have our syscall stub built out, we still need a way  
to call it from our code. Listing 2-8 shows how we would do that.
EXTERN_C NTSTATUS NtAllocateVirtualMemory(
HANDLE ProcessHandle,