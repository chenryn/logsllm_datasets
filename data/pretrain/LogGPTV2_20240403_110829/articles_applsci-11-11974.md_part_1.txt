applied
sciences
Article
Efficient Online Log Parsing with Log Punctuations Signature
ShijieZhangandGangWu*
SchoolofSoftware,ShanghaiJiaoTongUniversity,Shanghai200240,China;PI:EMAIL
* Correspondence:PI:EMAIL
Abstract: Logs,recordingthesystemruntimeinformation,arefrequentlyusedtoensuresoftware
systemreliability.Asthefirstandforemoststepoftypicalloganalysis,manydata-drivenmethods
havebeenproposedforautomatedlogparsing. Mostexistinglogparsersworkoffline,requiring
atime-consumingtrainingprogressandretrainingasthesystemupgrades. Meanwhile,thestate
oftheartonlinelogparsersaretree-based, whichstillhavedefectsinrobustnessandefficiency.
Toovercomesuchlimitations,weabandonthetreestructureandproposeahash-likemethod. In
thispaper,weproposeLogPunk,anefficientonlinelogparsingmethod. ThecoreofLogPunkis
a novel log signature method based on log punctuations and length features. According to the
signature,wecanquicklyfindasmallsetofcandidatetemplates.Further,themostsuitabletemplate
isreturnedbytraversingthecandidatesetwithourlogsimilarityfunction.WeevaluatedLogPunk
on16publicdatasetsfromtheLogHubcomparingwithfiveotherlogparsers. LogPunkachieves
thebestparsingaccuracyof91.9%.Evaluationresultsalsodemonstrateitssuperiorityintermsof
robustnessandefficiency.
Keywords:logparsing;logsignature;punctuations;onlinealgorithm
(cid:1)(cid:2)(cid:3)(cid:1)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:1)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
1. Introduction
Citation: Zhang,S.;Wu,G.Efficient
OnlineLogParsingwithLog Loggingisthepracticeofrecordingeventsthatprovidesinformationaboutthesystem
PunctuationsSignature.Appl.Sci. runningstatusandexecutionpaths. Earlier,systemoperatorscouldunderstandruntime
2021,11,11974. https://doi.org/ behaviors and diagnose failures by manually analyzing logs [1,2]. A modern system
10.3390/app112411974 serviceareoftencomposedofseveralbasicservices[3]. Moreover,modernsystemclusters
usuallycontainhundredsofnodes,someofwhichareevengeographicallydistributed[4].
AcademicEditor:AgostinoForestiero In this context, with the increasing scale and complexity of modern software systems,
the volume of logs explodes [5]. It leads to the emergence of automated log analysis
Received:17October2021
approaches. Theseautomatedapproachesbringmoretools(e.g.,anomalydetection[6,7],
Accepted:12December2021
failureprediction[8,9],andfailurediagnosis[10,11])toensuresystemreliability,whichis
Published:16December2021
anindispensablesteptowardsAIOps(ArtificialIntelligenceforITOperations).
Logs are unstructured text printed by logging statements in the source code. As
Publisher’sNote:MDPIstaysneutral
showninFigure1,aloggingstatementisspecifiedbyloglevel,staticstring,anddynamic
withregardtojurisdictionalclaimsin
variables. As the variable value changes at runtime, a logging statement can produce
publishedmapsandinstitutionalaffil-
differentlogmessages. Typically,alogmessagemaycontainatimestamp,loglevel,logger
iations.
name,andrawmessagecontent. Differentlogmessagesfromthesameloggingstatement
havethesamelogtemplate(eventtype).
Mostdataminingmodelsusedinloganalysisrequirestructuredinput. Therefore
rawlogscannotbeusedasinputdirectly[12–14]. Toconquertheunstructurednatureof
Copyright: © 2021 by the authors.
rawlogs,weneedlogparsingtoconverttheunstructuredlogsintoastructuredformat
Licensee MDPI, Basel, Switzerland.
before analysis [15]. The goal of log parsing is to extract the static template, dynamic
This article is an open access article
variables,andtheheaderinformation(timestamp,loglevel,loggername)fromtheraw
distributed under the terms and
logmessagetoastructuredformat. Suchstructureddatacanbefedintodownstreamlog
conditionsoftheCreativeCommons
analysismodels.
Attribution(CCBY)license(https://
creativecommons.org/licenses/by/
4.0/).
Appl.Sci.2021,11,11974.https://doi.org/10.3390/app112411974 https://www.mdpi.com/journal/applsci
Appl.Sci.2021,11,11974 2of15
Figure1.Anillustrativeexampleoflogparsing.
Regularexpressionsarealwaysachoiceforlogparsing[15],butitisonlypracticable
forasmallnumberoflogtemplates. Continuoushumaneffortsareneededtodevelop
andmaintaintheregularexpressions,whicharelabor-intensiveanderror-prone[16,17].
Asmodernsoftwarehasmanylogtemplatesandconstantlyevolves[18],developingand
maintainingsuchregularexpressionscouldbeanightmare.
Toalleviatethepainofhumanefforts,researchershaveproposedmanyautomated
data-drivenapproaches. Earlierworksleveragedataminingapproachessuchasfrequent
pattern mining [19,20], clustering [21,22], and iterative partitioning [23] to extract the
commonpartoflogmessagesunderthesameclusterasthelogtemplate. However,all
theseapproachesareoffline,whichrequiresatime-consumingtrainingprocessandcan
notdealwiththetemplatechangescausedbysoftwareupdates. Incontrast,onlinelog
parsersparselogsinastreamingfashionanddonotrequireofflinetraining. Therefore,
whatmodernsystemsneedisonlinelogparsing,whichisonlystudiedinafewpreliminary
works[17,24–26].
Spell[26]andDrain[17]arestate-of-the-artonlinelogparsers. Spellmeasuresthe
distancebetweenlogmessagesthroughlongestcommonsubsequence(LCS), anduses
prefixtreetooptimizetheprocessingtimeofeachlogmessageclosetolinear. Drainalso
adoptsatreestructure. UnlikeSpell,ithasmoreheuristicsandstrongassumptionsabout
thelengthandprecedingtokensoflogmessages.
In practice, we find that the tree structure has some limitations in robustness and
efficiency. Although,existingonlineparsersachievegoodparsingaccuracyonspecific
datasets. Theirparsingaccuracyfluctuatesacrossdifferentdatasets,whichmeansthatthey
arenotrobust(e.g.,theaverageaccuracyofSpell[26]islessthan80%). Inaddition,with
therapidgrowthoflogvolumeandtheincreasingdemandforlowlatencyloganalysis,
efficiency becomes an essential concern of log analysis [18,27]. However, the previous
benchmark[15]showsthatSpell[26]andDrain[17]arenotefficientenough. Inthiswork,
weabandonthetreestructureandproposeahash-likemethod, whichreallyimproves
robustnessandefficiency.
Unlikepreviouswork,wefocusonmeaninglesspunctuationsinlogmessagesrather
than meaningful words. Because we believe that words processing is the reason why
the previous approaches are inefficient. Our intuition is that punctuation marks of log
messagesfromthesametemplatetendtobethesame,whichmeanssimplepunctuations
imply template information. There are fixed types of punctuations, and they are easy
toprocess.
ThispaperproposesLogPunk,arobustandefficientlogparserbasedonournovellog
signaturemethod. LogPunkisdesignedasageneral-purposeonlinelogparsingmethod,
whichissystemandlogtypeagnostic. Weuselogpunctuationsandlengthinformation
(cf. Section2)togeneratelogsignatures. Eachlogsignaturecorrespondstoasignature
group. Obviously,logmessageswiththesameeventtypewillhavethesamelogsignature
andgetintothesamegroup. However,asignaturegroupmayalsocontainlogmessages
fromdifferenteventtypeswiththesamesignature. Wecallthissignaturecollisioneasyto
Appl.Sci.2021,11,11974 3of15
solvebyfurthercalculatingthesimilaritybetweenthelogmessageandeventtemplates.
Fortunately,wefoundinourexperimentsthateachsignaturegrouponlycorrespondsto
oneortwoeventtemplatesinmostcases.
WeevaluateLogPunkon16datasetsfromtheLogHub[28]comparingwithfiveother
logparsers.ExperimentsdemonstratethatLogPunkisefficientbutwithoutlossofaccuracy.
LogPunkachievesthehighestaccuracyon14datasetsandthebestaveragePAof0.919.
Moreimportantly,LogPunkperformsconsistentlyacrossdifferentdatasets,whichmeans
itisrobust.
Insummary,ourpapermakesthefollowingcontributions:
• Weproposeanovelandefficientlogsignaturemethodbasedonlogpunctuationsand
lengthinformationappliedforlogparsing;
• Wepresentanonlinelogparserbasedonourlogsignaturemethod,namedLogPunk,
whichisbetterthanthepreviouslogparsersinrobustnessandefficiency;
• Weconductextensiveexperimentson16datasetsandcomparingLogPunkwithfive
otherlogparsers. TheresultsshowthatLogPunkisaccurate,robust,andefficient.
Thepaperisorganizedasfollows. Section2introducesthebackgroundoflogparsing.
Section3describesourlogsignaturemethodandtheimplementationofLogPunk.Section4
showstheresultsofevaluatingLogPunkontheLogHubdatasets. Section5compares
LogPunk with tree-based methods and discusses the validity. Section 6 introduces the
relatedworkofthreecategoriesofdata-drivenlogparsingapproaches. Finally,Section7
concludesthepaper.
2. ProblemDescription
AsshowninFigure1,thegoaloflogparsingistoextractthestatictemplate,dynamic
variables, andheaderinformationfromarawlogmessage. Astheheaderinformation
usuallyfollowsafixedformatinthesamesystem,regularexpressionsarecommonlyused
toextracttheheaderinformationandthelogcontent.
Logcontentisthecentralprocessingobjectoflogparsing,composedofstatictemplates
anddynamicvariables. ItcanbedefinedasatupleofEV = {(e,v ) : e ∈ E, i =1,2,···},
i i
whereEisthesetofalllogtemplates,k = |E|isthenumberofalldistincttemplatesandv
i
isalistofvariables.
Formally,givenasetoflogmessagesL = {l ,l ,··· ,l }thatisproducedbyklogging
1 2 m
statements(logtemplates)fromthesourcecode,wherethekisunknown. Alogparseris
toparseLtogetallklogtemplates.
Afterextractingthelogcontentfromtherawlog,itiscommontoprocessthecontent
withstringsplitting. Bysplittingthecontent,wegetasplitlist,andeachelementinthe
listiscalledatoken. Logmessagelengthisdefinedasthenumberoftokensinthesplit
list. Formally,eachlogmessageconsistsofaboundedlistoftokens,t = {t : t ∈ T,j =
i j
1,2,··· ,n}, where T is a set of all tokens, j is the token index within the split list and
n = |t |isthenumberoftokens(messagelength).
i
Thetokenisusuallythesmallestgranularitytodeterminethetemplateandvariable
part. Atokeniseitherpartofthestatictemplatesordynamicvariables. Therefore,how
tosplitthecontenthasasignificantinfluenceontheparsingresults. Differentdelimiters
resultindifferentsplittokenlists. Previousstudiesoftenusespacesasdelimiters.
Onlinealgorithmsusuallyhavetwocoresteps: first,findthecandidatetemplateset;
andthentraversethecandidatesettofindthemostsuitabletemplate.
Quicklyfindingcandidatesetsiscriticalinthefirststep. Inspiredbytheprefixtree
datastructure,Spell[26]andDrain[17]adoptatreestructuretofindcandidatesetstofilter
outmostirrelevanttemplates. Suchatreestructureisusuallyverycomplex. Sometree
nodeshavehundredsofchildren,andthetreeneedsfrequentmaintenance.Inaddition,the
tree-basedmethoddoesnotguaranteethatthereturnedtemplateisthelongestcommon
subsequence. Forexample,thelogmessagel = DAPBC(eachletterrepresentsatoken,
andthespacebetweentokensisomitted)andthetemplatesets = {DA,ABC},theprefix
Appl.Sci.2021,11,11974 4of15
treereturnsDAinsteadof ABC. Sincethesecondstepwilltraversethecandidateset,the
sizeofthecandidatesetalsomatters.
Inthepreviousbenchmark[15],SpellandDrainfailedtoreachthefirstlevelefficiency,
which means there is still room for improvement. Our goal is to find a more efficient
methodtoobtainsmallercandidatesets.
3. Methodology
Asmentionedabove,ourapproachisonline,anditcanprocesslogsinastreaming
way. As shown in Figure 2, when a new raw log message arrives, LogPunk will first
preprocess it with some simple regular expressions to extract the content and split its
content into a token list. Then, a log signature will be generated for this log message
basedonthetokenlist. Wecanquicklylocatethesignaturegroupthatcontainsalistof
possibletemplatesaccordingtothesignature. Themostsuitabletemplatewillbereturned
bysearchingthesignaturegroupwithourspeciallydesignedlogsimilarityfunction. Ifno
suchtemplateisfound,thislogmessagewillbeappendedasanewtemplateitself.
Figure2.Basicworkflowofourmethod.
3.1. Step1PreprocessandSplit
This step extracts a list of tokens from each log message through three sub-steps:
(1)logcontentextraction;(2)commonvariablessubstitution;(3)logcontentsplit.
First,apre-definedregularexpressionisalwaysusedtoextractthelogcontentand