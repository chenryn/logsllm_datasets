2
— 97 —
Chapter 6. Robustness Against Side-Channel Attacks
2
are identical.
Gi+ 1
We build a reduction to the preserving with leakage security notion. We will thus deﬁne an
adversary A0 against the preserving with leakage security game. The adversary A0 emulates the
challenger for A. It thus runs the adversary A, to get a distribution sampler D and the leakage
functions f. A0 initiates its security game, and receives back the seed it transfers to A. Then
A0 sets S = 0n and σ = 0, and simulates the answers to all the oracle calls that A makes in the
leakage-resilient robustness security game, but altered as in Gi, until the (i+1)th uncompromised
next-query. Note that after the ith uncompromised next-query, the internal state is assumed to
be the state S0 provided by the challenger, since it has full entropy n.
Since A0 knows the leakage functions, controls the internal state of the generator and has access
to the distribution sampler D, with the knowledge of its state, it can simulate all the calls
to get-state, set-state, D-refresh, leak-refresh, leak-next, and unsafe/compromised next-ror. The
uncompromised next-queries are answered with a truly random R (as in Gi) and the internal
state is renewed with a truly random S. All these new states are chosen, and thus known to A0,
until the ith uncompromised next-queries. After this last query the internal state is not known
any more to A0, but is assumed to be the state S0 provided by the challenger, which is also
uniformly random.
Between the ith uncompromised next-queries and the (i + 1)th uncompromised next-query, A0
can use its challenger to answer the queries asked by A, but providing the inputs for the refresh
queries (with or without leakage), using the distribution sampler D, since it still knows its state
Indeed, during the preserving sequence, only oracles D-refresh, leak-refresh, and leak-next
σ.
are possible. At the end of this sequence, A0 receives the challenge (S(b), R(b)) it uses for the
(i+1)th uncompromised next-query: it answers A with R(b) and updates the internal state of the
generator with S(b) and continues to simulate the oracle calls made by A as in Gi, since it knows
again the internal state of the generator and has always known the state of the distribution
sampler. Eventually, A outputs the bit b∗. If the challenge bit b was 0 then (S(b), R(b)) is the
real value so it perfectly simulates Gi for A. Otherwise, (S(1), R(1)) is a random value, as in Gi+1.
Therefore, the challenge of A0 is exactly the same as the challenge consisting in distinguishing
both games and we have,
| Pr[Gi = 1] − Pr[Gi+ 1
= 1]| ≤ εp.
2
2
and Gi+1. We assume that we are
We now consider the distance between the games Gi+ 1
in a recovering with leakage case, otherwise the two games are identical.
We build a reduction to the recovering with leakage security notion. We will thus deﬁne an
adversary A0 against the recovering with leakage security game. The adversary A0 emulates the
challenger for A. It thus runs the adversary A, to get a distribution sampler D and the leakage
functions f. A0 initiates its security game, and receives back the seed it transfers to A, as well
as the values γ1, . . . , γqr and z1, . . . , zqr. Then A0 sets S = 0n, and simulates the answers to all
the oracle calls that A makes in the leakage-resilient robustness security game, but altered as in
Gi, until the (i + 1)th uncompromised next-query. Actually, as above, the uncompromised next-
queries are answered with truly random R and the internal state is renewed with a truly random
S. To simulate the calls to D-refresh and leak-refresh queries from A, A0 asks for a D-refresh
query and gets back the input Ik, which allows it to evaluate the refresh algorithm itself, and
even compute the leakage information. Together with the values γk and zk it received above
from the challenger, it can answer appropriately to A. Since A0 knows the internal state of the
generator (and even controls it during the uncompromised next-query), it can easily simulate
get-state, set-state, unsafe/compromised next-ror, and leak-next queries.
After the ith uncompromised next-query, it continues the same way until the mRED query, it
— 98 —
6.4. A Secure Construction
has to guess among the possible queries (whose number is bounded by qri + qni + qsi, the sum
of the refresh, next and σ queries between the ith uncompromised next-queries and the (i + 1)th
uncompromised next-query). For this guess (which might later revealed to be incorrect), A0
provides the current internal state, right after the mRED, as S0 to its challenger. A0 can use
its challenger to answer the queries asked by A. Indeed, during the recovering sequence, only
oracles D-refresh, leak-refresh, and leak-next are possible (without making c drop to 0). At the
end of this sequence, A0 receives the challenge (S(b), R(b)) it uses for the (i+1)th uncompromised
next-query, together the sequence of the next inputs: it answers A with R(b) and updates the
internal state of the generator with S(b) and continues to simulate the oracle calls made by A as
in Gi, since it knows again the internal state of the generator and knows the inputs to update it
(as in the ﬁrst part of the simulation). Eventually, A outputs the bit b∗. If the challenge bit b
was 0 then (S(b), R(b)) is the real value so it perfectly simulates Gi for A. Otherwise, (S(1), R(1))
is a random value, as in Gi+1. Therefore, the challenge of A0 is exactly the same as the challenge
consisting in distinguishing both games and we have,
| Pr[Gi+ 1
2
= 1] − Pr[Gi+1 = 1]| ≤ (qri + qni + qsi) · εr.
Combining both results, we have
| Pr[G0 = 1] − Pr[Gqn = 1]| ≤ qn · (εp + (qr + qn + qs) · εr),
while the former game G0 is the leakage-resilient robustness security game and the latter game
Gqn is independent of b.
6.4 A Secure Construction
We slightly modify the assumption on the standard pseudo-random number generator G, to
keep the pseudo-random number generator with input G secure even in the presence of leakage:
The standard pseudo-random number generator G : {0, 1}m → {0, 1}n+‘ instantiated with the
truncated product U = [X0 · S]m1 is now required to be a (α, λ)-leakage-resilient and (t, ε)-secure
standard pseudo-random number generator according to Deﬁnition 40.
In that deﬁnition, λ
denotes the leakage during the execution of G, and α is the expected entropy of the output,
even given the leakage.
Deﬁnition 40 (Leakage-Resilient and Secure Standard Pseudo-Random Number Generator).
A standard pseudo-random number generator G : {0, 1}m → {0, 1}N is (α, λ)-leakage-resilient
and (t, ε)-secure if it is ﬁrst a (t, ε)-secure standard pseudo-random number generator, but in
addition, for any adversary A, running within time t, that ﬁrst outputs a leakage f with λ-
bit outputs, there exists a source S that outputs couples (L, T) ∈ {0, 1}λ × {0, 1}N, so that
the entropy of T, conditioned on L being greater than α, and the advantage with which A can
distinguish (f(U), G(U)) from (L, T) is bounded by ε. Note that f(U) denotes the information
leakage generated by f during this execution of G (on the inputs at the various atomic steps of
the computation, that includes U and possibly some internal values).
Based on our new assumption, Theorem 16 shows that the pseudo-random number generator
with input G is leakage-resilient robust. The proof relies on the notions of recovering and
preserving with leakage.
Theorem 16. Let m, n, α, and γ∗ be integers, such that n > m and α > γ∗, and G :
{0, 1}m → {0, 1}n+‘ an (α + ‘, λ)-leakage-resilient and (t, εG)-secure standard pseudo-random
number generator. Then, the pseudo-random number generator with input G previously deﬁned
— 99 —
Chapter 6. Robustness Against Side-Channel Attacks
and instantiated with G is (t0, qr, qn, qs, γ∗, λ, ε)-leakage-resilient robust where t0 ≈ t, after at
most q = qr + qn + qs queries, where qr is the number of D-refresh/leak-refresh-queries, qn the
number of next-ror/leak-next-queries, and qs the number of get-state/set-state-queries, where
2 + 1) · εext + 3εG(cid:1) and εext =
ε ≤ qqn ·(cid:0)(qr
√
2m+1−δ for δ = min{n − log qr, γ∗ − λ}.
Following Theorem 15, we show that the pseudo-random number generator with input G satisﬁes
both the recovering security with leakage and the preserving security with leakage. We also
denote εext the bias of the distribution of U = [X0· S]m1 from uniform when the min-entropy of S
is greater than γ∗− λ, and show that it can be any value greater than
2m+1−δ for δ = min{n−
log qr, γ∗ − λ}. Let us recall that we denote qr the number of calls to D-refresh/leak-refresh, qn
the number of calls to next-ror/leak-next, and qs the number of calls to get-state/set-state. We
also denote q = qr + qn + qs, the global number of queries.
As explained in Section 3.7 under the term granular model, we split the algorithm in atomic
procedures, with leakage on their manipulated data. In particular, in the above construction,
the refresh procedure can be considered atomic, while the next procedure should be split in two:
the truncation of the product, and the standard pseudo-random number generator evaluation.
As a consequence, we consider three leakage functions:
√
• frefresh collects the leakage during the computation of the algorithm refresh, and thus takes
as inputs the internal state S, the sample I and the part X of the seed;
• fnext,Π collects the leakage in algorithm next, during the computation of the truncation of
the product, and thus takes as inputs the internal state S and the part X0 of the seed;
• fnext,G collects the leakage during the standard pseudo-random number generator evalua-
tion. It takes as input the intermediate variable U = [X0 · S]m1 .
2 · εext + εG))-recovering security with leakage.
Lemma 9. The pseudo-random number generator with input G satisﬁes the (t, qr, qn, γ∗, λ, qn ·
(qr
Proof of Lemma 9. The proof extends the one built in Section 4.3 to integrate the impact of the
leakage.
Game 0 [Recovering with Leakage Security Game].
This game is the original attack game described in Section 6.3, where f is described by three
leakage functions frefresh, fnext,Π and fnext,G. Because of the restriction for the estimated entropy
not to drop to 0, a ﬁrst sequence includes only D-refresh-queries, until c gets larger than γ∗.
Thereafter, the leaking procedures leak-refresh and leak-next are also allowed, in addition to the
D-refresh, as soon as c remains above γ∗. With the answer to the challenge next-ror, this game
eventually outputs 1 if b∗ = b, and we want to show that Pr[G0 = 1] is close to 1/2.
Game 1.a [First leak-next Query: Random U].
In the ﬁrst call to leak-next, we replace the truncated product U by a truly random value.
Using the same approach as in Section 4.3 with Lemma 4, we can show that the sequence of
inputs (Ik)d
k=1 generated by the distribution sampler, and the polynomial evaluation followed
by the m-truncation leads to a (N, ε)-randomness extractor as long as the entropy in the source
N ≥ m + 2 log(1/ε) + 1 and n ≥ m + 2 log(1/ε) + log(d) + 1. With the possible information
k=1 has a min-entropy larger than γ∗ − λ (because of
leakage zk and Lk, the sequence (Ik)d
the possible additional fnext,Π(S, X0)), so we just need m ≤ γ∗ − λ − 2 log(1/εext) − 1 and
m ≤ n− 2 log(1/εext)− log(qr)− 1 to guarantee εext indistinguishability between the real U and
— 100 —
6.4. A Secure Construction
a random value, with this sequence (Ik).
However, since the adversary can choose when it starts (among qr possibility), and how long
2. Then, we then have | Pr[G0 = 1] −
it lasts (again, qr possibilities), there is a factor loss qr
Pr[G1.a = 1]| ≤ qr
2 · εext.
Game 1.b [First leak-next Query: Random State and Output].
In the ﬁrst call to leak-next, since fnext,G is ﬁxed, and G is a leakage-resilient standard pseudo-
random number generator, the source S generates indistinguishable leakage, state and random
as in the previous game with a truly random U. Then, we then have | Pr[G1.a = 1] − Pr[G1.b =
1]| ≤ εG.
Game 2 [All leak-next Queries: Random States].
In an hybrid way, we replace all the leak-next outputs by S. Then, we have | Pr[G2 = 1]−Pr[G0 =
1]| ≤ (qn − 1) · (qr
2 · εext + εG).
Game 3 [The next-ror Query: Random U].
If this was the ﬁrst next-query, we have already shown that U can be replaced by a truly random
If it happens after a leak-next, the state S has enough entropy for the extractor (the
value.
global output (S, R) from the source S had entropy α + ‘ when knowing the leakage, then
knowing the ‘-bit randomness R, the remaining entropy for S is above α ≥ γ∗ ≥ γ∗ − λ):
the truncated product in the ﬁeld is a 2−m(1 + 2m−n)-universal, and thus a (N, ε)-randomness
extractor as long as the entropy in the source is N ≥ m + 2 log(1/ε) + 1. The above constraint
is enough for a bias bounded by εext between the real U and a random value. We then have
| Pr[G2 = 1] − Pr[G3 = 1]| ≤ εext.
Game 4 [The next-ror Query: Random Output].
Since G is a (t, εG)-secure standard pseudo-random number generator, we can replace both the
output and the random state by truly random values. And we have | Pr[G3 = 1]−Pr[G4 = 1]| ≤
εG.
From the above games, one gets, | Pr[G0 = 1] − Pr[G4 = 1]| ≤ qn · (qr
Pr[G4 = 1] = 1/2, for any εext ≥
2m+1−δ for δ = min{n − log qr, γ∗ − λ}.
2 · εext + εG), while
√
Remark 2. This proof with leakage shows the relevance of the adaptation of the generic con-
struction. Concretely, to ensure an internal state with enough entropy at the input of the ﬁnal
next-ror, we established two measures to limit the negative impact of the leak-next calls. First,
the threshold γ∗ was set voluntary higher than the original one in the robustness security ROB,
to capture the leakage in the truncated product, given by the leakage function fnext,Π. Then, the
generator G was deﬁned with security properties whereby, in a leak-next call, the ﬁnal output
comes with an entropy at least equal to α despite the leakage.
Lemma 10. The pseudo-random number generator with input G has (t, qr, qn, γ∗, λ, qn · (εext +
εG) + 2−n)-preserving security with leakage.
Proof of Lemma 10. The proof extends the one built in Section 4.3 to integrate the impact of
the leakage.
— 101 —
Chapter 6. Robustness Against Side-Channel Attacks
Game 0 [Preserving with Leakage Security Game].
This is the original preserving with leakage security game described in Section 6.3. The internal
state starts uniformly at random, and then the adversary can ask D-refresh and leak-refresh-
queries with chosen inputs, and leak-next-queries before the challenge next-ror, as soon as c
remains above γ∗. With the answer to this, this game eventually outputs 1 if b∗ = b, and we
want to show that Pr[G0 = 1] is close to 1/2.
Game 1.a [First leak-next Query: Random U].
As above, in the ﬁrst call to leak-next, we replace the truncated product U by a truly random
value. But since the internal state started full of randomness (but it would be true with any
entropy level), following D-refresh and leak-refresh-query maintain entropy or reduce it by λ at
most, but remaining above γ∗, unless X = 0. Then, since the truncated product in the ﬁeld is a
(γ∗, ε)-randomness extractor (with above constraints), the bias is bounded by εext between the
real U and a random value. Then, we have | Pr[G1.a = 1] − Pr[G0 = 1]| ≤ εext + 2−n.
Game 1.b [First leak-next Query: Random State and Output].
In the ﬁrst call to leak-next, since fnext,G is ﬁxed, and G is a leakage-resilient standard pseudo-
random number generator, the source S generates indistinguishable leakage, state and random
as in the previous game with a truly random U. We then have | Pr[G1.a = 1]−Pr[G1.b = 1]| ≤ εG.
Game 2 [All leak-next Queries: Random States].
In an hybrid way, we replace all the leak-next outputs by S. Then, we then have | Pr[G2 =
1] − Pr[G0 = 1]| ≤ (qn − 1) · (εext + εG) + 2−n.
Game 3 [The next-ror Query: Random U].
If this was the ﬁrst next-query, we have already shown that U can be replaced by a truly random
value. If it happens after a leak-next, the state S has enough entropy for the extractor: the
truncated product in the ﬁeld is a strong (γ∗, ε)-extractor. Since the state S has an entropy
larger than γ∗, the above constraint is enough for a bias bounded by εext between the real U
and a random value. Then, we have | Pr[G2 = 1] − Pr[G3 = 1]| ≤ εext.
Game 4 [The next-ror Query: Random Output].
Since G is (t, εG)-secure, we can replace both the output and the random state by truly random
values. And we have | Pr[G3 = 1] − Pr[G4 = 1]| ≤ εG.
From the above games, one gets, | Pr[G0 = 1] − Pr[G4 = 1]| ≤ qn · (εext + εG) + 2−n, while
Pr[G4 = 1] = 1/2.
From above Lemmas 9 and 10, we conclude that the generator G satisﬁes (t0, qr, qn, qs, γ∗, λ, ε)-
leakage-resilient robustness where t0 ≈ t, and
2 · εext + εG)(cid:17) + (qr + qn + qs) ·(cid:0)qn · (εext + εG) + 2−n(cid:1)(cid:17)
,
ε = qn ·(cid:16)(cid:16)
qn · (qr
which proves Theorem 16, since qn ≤ q and 2−n ≤ εext.
— 102 —
6.5. Instantiations
Instantiations
6.5
In Section 6.2, we explained that the original instantiation presented in Section 4.5 is vulnerable
to side-channel attacks, and needs a stronger notion of security than the usual security of a
standard pseudo-random number generator for G, namely a leakage-resilient and secure standard
pseudo-random number generator (Deﬁnition 40):
it takes as input a perfectly random m-bit
string U, and generates an (n + ‘)-bit output T = (S, R) that looks random. Even in case of
leakage, S should have enough entropy. In this section, we give three concrete instantiations for
such a leakage-resilient and secure standard pseudo-random number generator G. The two ﬁrst
ones are existing constructions proposed and proved leakage-resilient by Faust et al. [FPS12]
and Yu and Standaert [YS13]. The third one is a new construction that we propose with a
security analysis to improve the security parameters at the expense of the internal state size.
Eventually, we implement the three solutions and give benchmarks together with security levels.
To instantiate the standard pseudo-random number generator G, we need a leakage-resilient
construction which can get use of a bounded part of the internal state. We recall here two