# 五、网络与安全
我们已经在[第 3 章](03.html#22O7C0-6c8359cae3d4492eb9973d94ec3e4f1e)、*中学习了如何在 Kubernetes 中部署具有不同资源的容器，并知道如何使用卷来保存数据、动态资源调配和不同的存储类。接下来，我们将学习 Kubernetes 如何路由流量来实现这一切。网络在软件世界中一直扮演着重要的角色。我们将描述从单个主机上的容器到多个主机，最后到 Kubernetes 的网络。*
*   Docker 网络
*   不可思议的网络
*   进入
*   网络策略
# 不可思议的网络
在 Kubernetes 中有很多选择可以用来实现网络。Kubernetes 本身并不关心您如何实现它，但是您必须满足它的三个基本要求:
*   所有容器都应该可以在没有 NAT 的情况下相互访问，无论它们位于哪个节点上
*   所有节点都应该与所有容器通信
*   IP 容器应该像其他容器一样看待自己
在深入讨论之前，我们将首先回顾默认容器网络是如何工作的。这是使这一切成为可能的网络支柱。
# Docker 网络
在进入 Kubernetes 网络之前，让我们回顾一下 Docker 网络是如何工作的。在[第二章](02.html#1CQAE0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *DevOps 带容器*中，我们学习了容器组网的三种模式，桥接、无、主机。
网桥是默认的网络模式。Docker 创建并附加虚拟以太网设备(也称为 veth)，并为每个容器分配网络名称空间。
The **network namespace** is a feature in Linux, which is logically another copy of a network stack. It has its own routing tables, arp tables, and network devices. It's a fundamental concept of container networking.
Veth 总是成对出现，一个在网络名称空间中，另一个在网桥中。当流量进入主机网络时，它将被路由到网桥。数据包将被发送到它的 veth，并进入容器内部的命名空间，如下图所示:
![](img/00088.jpeg)
让我们仔细看看。在下面的例子中，我们将使用 minikube 节点作为 docker 主机。首先，我们必须使用`minikube ssh`来 ssh 到节点中，因为我们还没有使用 Kubernetes。进入 minikube 节点后，让我们启动一个容器与我们进行交互:
```
// launch a busybox container with `top` command, also, expose container port 8080 to host port 8000.
# docker run -d -p 8000:8080 --name=busybox busybox top
737e4d87ba86633f39b4e541f15cd077d688a1c8bfb83156d38566fc5c81f469 
```
让我们看看容器内出站流量的实现。`docker exec `可以在运行容器中运行命令。让我们使用`ip link list`列出所有接口:
```
// show all the network interfaces in busybox container
// docker exec  
# docker exec busybox ip link list
1: lo:  mtu 65536 qdisc noqueue qlen 1
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: sit0@NONE:  mtu 1480 qdisc noop qlen 1
 link/sit 0.0.0.0 brd 0.0.0.0
**53**: **eth0@if54**:  
    mtu 1500 qdisc noqueue
 link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff  
```
我们可以看到`busybox`容器内部有三个接口。一个是身份证`53`和名字`eth0@if54`。`if`后的数字是该对中的另一个接口标识。在这种情况下，配对 ID 是`54`。如果我们在主机上运行相同的命令，我们可以看到主机中的 veth 指向容器内的`eth0`:
```
// show all the network interfaces from the host
# ip link list
1: lo:  mtu 65536 qdisc noqueue  
   state UNKNOWN mode DEFAULT group default qlen 1
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0:  mtu 1500 qdisc 
   pfifo_fast state UP mode DEFAULT group default qlen  
   1000
 link/ether 08:00:27:ca:fd:37 brd ff:ff:ff:ff:ff:ff
...
**54**: **vethfeec36a@if53**:  
    mtu 1500 qdisc noqueue master docker0 state UP mode  
    DEFAULT group default
 link/ether ce:25:25:9e:6c:07 brd ff:ff:ff:ff:ff:ff link-netnsid 5  
```
我们在主机上有一个名为`vethfeec36a@if53` **的 veth。**它与容器网络命名空间中的`eth0@if54`配对。veth 54 连接到`docker0`桥，最终通过 eth0 接入互联网。如果我们看一下 iptables 规则，我们可以在 Docker 为出站流量创建的主机上找到一个伪装规则(也称为 SNAT)，这将使容器可以访问互联网:
```
// list iptables nat rules. Showing only POSTROUTING rules which allows packets to be altered before they leave the host.
# sudo iptables -t nat -nL POSTROUTING
Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination
...
MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0
...  
```
另一方面，对于入站流量，Docker 在预路由上创建自定义过滤链，并在`DOCKER`过滤链中动态创建转发规则。如果我们公开一个容器端口`8080`并将其映射到一个主机端口`8000`，我们可以看到我们正在监听任何 IP 地址(`0.0.0.0/0`)上的端口`8000`，然后该端口将被路由到容器端口`8080`:
```
// list iptables nat rules
# sudo iptables -t nat -nL
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination
...
DOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL
...
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
DOCKER     all  --  0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL
...
Chain DOCKER (2 references)
target     prot opt source               destination
RETURN     all  --  0.0.0.0/0            0.0.0.0/0
...
DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8000 to:172.17.0.7:8080
...  
```
现在我们知道包裹是如何进出容器的了。让我们来看看容器是如何相互通信的。
# 容器到容器的通信
Kubernetes 中的 Pods 有自己的真实 IP 地址。pod 中的容器共享网络名称空间，因此它们将对方视为*本地主机*。默认情况下，这是由**网络容器**实现的，它充当一个桥，为 pod 中的每个容器调度流量。让我们在下面的例子中看看这是如何工作的。我们用[第三章](03.html#22O7C0-6c8359cae3d4492eb9973d94ec3e4f1e)*中的第一个例子开始使用 Kubernetes* ，它包括两个容器，`nginx`和`centos`在一个容器内:
```
#cat 5-1-1_pod.yaml
apiVersion: v1
kind: Pod
metadata:
 name: example
spec:
 containers:
 - name: web
 image: nginx
 - name: centos
 image: centos
 command: ["/bin/sh", "-c", "while : ;do curl http://localhost:80/; sleep 10; done"]
// create the Pod
#kubectl create -f 5-1-1_pod.yaml
pod "example" created  
```
然后，我们将描述容器并查看其容器标识:
```
# kubectl describe pods example
Name:       example
Node:       minikube/192.168.99.100
...
Containers:
 web:
 Container ID: docker:// **d9bd923572ab186870284535044e7f3132d5cac11ecb18576078b9c7bae86c73**
 Image:        nginx
...
centos:
 Container ID: docker: **//f4c019d289d4b958cd17ecbe9fe22a5ce5952cb380c8ca4f9299e10bf5e94a0f**
 Image:        centos
...  
```
在本例中，`web`带有容器标识`d9bd923572ab`，`centos`带有容器标识`f4c019d289d4`。如果我们使用`docker ps`进入节点`minikube/192.168.99.100`，我们可以检查 Kubernetes 实际启动了多少个容器，因为我们在 minikube 中，minikube 启动了许多其他集群容器。通过`CREATED`栏查看最新的投放时间，在这里我们会发现有三个刚刚投放的容器:
```
# docker ps
CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS                                      NAMES
f4c019d289d4        36540f359ca3                               "/bin/sh -c 'while : "   2 minutes ago        Up 2 minutes k8s_centos_example_default_9843fc27-677b-11e7-9a8c-080027cafd37_1
d9bd923572ab        e4e6d42c70b3                               "nginx -g 'daemon off"   2 minutes ago        Up 2 minutes k8s_web_example_default_9843fc27-677b-11e7-9a8c-080027cafd37_1
4ddd3221cc47        gcr.io/google_containers/pause-amd64:3.0   "/pause"                 2 minutes ago        Up 2 minutes  
```
还有一个额外的容器`4ddd3221cc47`被启动。在深究是哪个容器之前，我们先来检查一下我们的`web`容器的网络模式。我们会发现示例 pod 中的容器运行在具有映射容器模式的容器中:
```
# docker inspect d9bd923572ab | grep NetworkMode
"NetworkMode": "container:4ddd3221cc4792207ce0a2b3bac5d758a5c7ae321634436fa3e6dd627a31ca76",  
```
`4ddd3221cc47`容器在这种情况下就是所谓的网络容器，它持有网络命名空间让`web`和`centos`容器加入。同一网络命名空间中的容器共享相同的 IP 地址和网络配置。这是 Kubernetes 中实现容器到容器通信的默认实现，映射到第一个需求。
# Pod 间通信
无论在哪个节点上，都可以从其他 PODS 访问 PODS 的 IP 地址。这符合第二个要求。在下一节中，我们将描述 pods 在同一个节点内和跨节点的通信。
# 同一节点内的 Pod 通信
默认情况下，同一节点内的 Pod 到 pod 通信通过网桥进行。假设我们有两个 PODS，它们有自己的网络名称空间。当 pod1 想和 pod2 通话时，数据包通过 pod1 的命名空间到达相应的 veth 对 **vethXXXX** ，最终到达网桥。网桥然后广播目的地 IP，以帮助数据包找到路径，**vethyyy**响应。数据包随后到达 pod2:
![](img/00089.jpeg)
然而，Kubernetes 是关于集群的。当 pod 位于不同的节点时，流量是如何路由的？
# 跨节点的 Pod 通信
根据第二个要求，所有节点必须与所有容器通信。Kubernetes 将实现委托给**容器网络接口** ( **CNI** )。用户可以选择不同的实现，通过 L2、L3 或叠加。覆盖网络是常见的解决方案之一，被称为**数据包封装**。它在离开源之前包装消息，得到传递，并在目的地打开消息。这导致覆盖增加了网络延迟和复杂性。只要所有容器可以跨节点相互访问，您就可以自由使用任何技术，例如 L2 邻接或 L3 网关。有关 CNI 的更多信息，请参考其规范(https://github . com/container networking/CNI/blob/master/spec . MD):
![](img/00090.jpeg)
假设我们有一个从 pod1 到 pod4 的数据包。数据包从容器接口离开，到达 veth 对，然后通过网桥和节点的网络接口。网络实现在第 4 步开始发挥作用。只要数据包可以被路由到目标节点，您就可以自由使用任何选项。在下面的例子中，我们将使用`--network-plugin=cni`选项启动 minikube。启用 CNI 后，参数将通过节点中的 kubelet 传递。Kubelet 有一个默认的网络插件，但是你可以在它启动时探测任何支持的插件。在启动 minikube 之前，如果已经启动，您可以先使用`minikube stop`或`minikube delete`彻底删除整个集群，然后再做任何进一步的操作。虽然 minikube 是一个单节点环境，它可能不完全代表我们将遇到的生产场景，但这只是让您对所有这些工作有了一个基本的了解。我们将在[第 9 章](09.html#6NGV40-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes 在 AWS* 和[第 10 章](10.html#7BHQU0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes 在 GCP* 中学习网络选项在现实世界中的部署。
```
// start minikube with cni option
# minikube start --network-plugin=cni
...
Kubectl is now configured to use the cluster.  
```
当我们指定`network-plugin`选项时，它会在启动时使用`--network-plugin-dir`中为插件指定的目录。在 CNI 插件中，默认的插件目录是`/opt/cni/net.d`。集群启动后，我们登录节点，通过`minikube ssh`查看里面的设置:
```
# minikube ssh
$ ifconfig 
...
mybridge  Link encap:Ethernet  HWaddr 0A:58:0A:01:00:01
 inet addr:10.1.0.1  Bcast:0.0.0.0  
          Mask:255.255.0.0
...  
```
我们会发现节点中有一个新的网桥，如果我们通过`5-1-1_pod.yml`再次创建示例 pod，我们会发现 pod 的 IP 地址变成了`10.1.0.x`，附属于`mybridge`而不是`docker0`。
```
# kubectl create -f 5-1-1_pod.yaml
pod "example" created
# kubectl describe po example
Name:       example
Namespace:  default
Node:       minikube/192.168.99.100