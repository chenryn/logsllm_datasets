1 SELECT Title, Body FROM Emails
WHERE Username='vickie' AND AccessKey='ZB6w0YLjzvAVmp6zvr'
2 UNION 3SELECT Username, Password FROM Users;4-- ;
    The SQL
     UNION
     2
    operator combines the results of two different
     SELECT
    statements. Therefore, this query combines the results of the first
     SELECT
    statement
     1
    , which returns a user’s emails, and the second
     SELECT
    statement
     3
    , which, as described earlier, returns all usernames and passwords from the Users table. Now the attacker can read all users’ usernames and passwords in the HTTP response! (Note that many SQL injection payloads would comment out whatever comes after the injection point
     4
    , to prevent the rest of the query from messing up the syntax or logic of the query.)
    SQL UNION 2 操作符将两个不同 SELECT 语句的结果合并起来。因此，该查询将第一个 SELECT 语句 1 的结果（返回用户的电子邮件）和第三个 SELECT 语句 3 的结果（如前所述，从 Users 表返回所有用户名和密码）合并在一起。现在攻击者可以在 HTTP 响应中读取所有用户的用户名和密码！（请注意，许多 SQL 注入有效负载会注释掉注入点 4 后面的任何内容，以防止查询的语法或逻辑混乱。）
    SQL injection isn’t limited to
     SELECT
    statements, either. Attackers can also inject code into statements like
     UPDATE
    (used to update a record),
     DELETE
    (used to delete existing records), and
     INSERT
    (used to create new entries in a table). For example, let’s say that this is the HTTP POST request used to update a user’s password on the target website:
    SQL注入不仅限于SELECT语句。攻击者还可以将代码注入到UPDATE（用于更新记录），DELETE（用于删除现有记录）和INSERT（用于在表中创建新条目）等语句中。例如，假设这是用于更新目标网站上用户密码的HTTP POST请求：
POST /change_password
Host: example.com
(POST request body)
new_password=password12345
    The website would form an
     UPDATE
    query with your new password and the ID of the currently logged-in user. This query will update the row in the Users table whose ID field is equal to 2, and set its password to
     password12345
    :
    该网站将通过新密码和当前登录用户的ID形成一个UPDATE查询。此查询将更新用户表中ID字段等于2的行，并将其密码设置为password12345。
UPDATE Users
SET Password='password12345'
WHERE Id = 2;
    In this case, attackers can control the
     SET
    clause of the statement, which is used to specify which rows should be updated in a table. The attacker can construct a POST request like this one:
    在这种情况下，攻击者可以控制语句中的SET子句，该子句用于指定应在表中更新哪些行。攻击者可以构造像这样的POST请求：
POST /change_password
Host: example.com
(POST request body)
new_password="password12345';--"
    This request generates the following SQL query:
    此请求生成以下 SQL 查询：
UPDATE Users
SET Password='password12345';-- WHERE Id = 2;
    The
     WHERE
    clause, which specifies the criteria of the rows that should be updated, is commented out in this query. The database would update all rows in the table, and change all of the passwords in the Users table to
     password12345
    . The attacker can now log in as anyone by using that password.
    WHERE子句在此查询中被注释了，它指定了应该更新的行的标准。数据库将更新表中所有行，并将Users表中所有密码更改为password12345。攻击者现在可以使用该密码登录任何账户。
    Using Second-Order SQL Injections
    So far, the SQL injections we’ve discussed are all first-order SQL injections.
     First-order SQL injections
    happen when applications use user-submitted input directly in a SQL query. On the other hand,
     second-order SQL injections
    happen when user input gets stored into a database, then retrieved and used unsafely in a SQL query. Even if applications handle input properly when it’s submitted by the user, these vulnerabilities can occur if the application mistakenly treats the data as safe when it’s retrieved from the database.
    到目前为止，我们已经讨论的 SQL 注入都是一级 SQL 注入。当应用程序直接在 SQL 查询中使用用户提交的输入时，就会发生一级 SQL 注入。另一方面，当用户输入被存储到数据库中，然后不安全地在 SQL 查询中检索和使用时，就会发生二级 SQL 注入。即使应用程序在用户提交输入时正确地处理输入，如果应用程序在从数据库中检索到数据时错误地将数据视为安全，则可能会出现这些漏洞。
    For example, consider a web application that allows users to create an account by specifying a username and a password. Let’s say that a malicious user submits the following request:
    例如，考虑一个允许用户通过指定用户名和密码创建帐户的Web应用程序。假设有一个恶意用户提交了以下请求：
POST /signup
Host: example.com
(POST request body)
username="vickie' UNION SELECT Username, Password FROM Users;-- 
"&password=password123
    This request submits the username
     vickie' UNION SELECT Username, Password FROM Users;--
    and the password
     password123
    to the
     /signup
    endpoint. The
     username
    POST request parameter contains a SQL injection payload
    that would
     SELECT
    all usernames and passwords and concatenate them to the results of the database query.
    这个请求提交了用户名 vickie' UNION SELECT Username, Password FROM Users;-- 和密码 password123 到 /signup 端点。用户名 POST 请求参数包含了一个 SQL 注入负载，该负载将选择所有用户名和密码，并将它们连接到数据库查询的结果中。
    The application properly handles the user input when it’s submitted, using the protection techniques I’ll discuss in the next section. And the string
     vickie' UNION SELECT Username, Password FROM Users;--
    is stored into the application’s database as the attacker’s username.
    应用程序在用户提交时正确处理其输入，并使用我将在下一节中讨论的保护技术。并且字符串vickie' UNION SELECT Username, Password FROM Users;--作为攻击者的用户名存储在应用程序的数据库中。 
该应用程序能够正确处理用户提交的输入，并采用我在下一节中讨论的保护技术。攻击者使用的字符串“vickie' UNION SELECT Username, Password FROM Users;--”被存储于应用程序数据库中作为攻击者的用户名。
    Later, the malicious user accesses their email with the following GET request:
    以后，恶意用户使用以下GET请求访问他们的电子邮件：
GET /emails
Host: example.com
    In this case, let’s say that if the user doesn’t provide a username and an access key, the application will retrieve the username of the currently logged-in user from the database and use it to populate a SQL query:
    在这种情况下，假设用户没有提供用户名和访问密钥，则应用程序将从数据库中检索当前已登录用户的用户名并使用它来填充SQL查询。
SELECT Title, Body FROM Emails
WHERE Username='USERNAME'
    But the attacker’s username, which contains SQL code, will turn the SQL query into the following one:
    但攻击者的用户名中包含SQL代码，将会把SQL查询转变为以下形式：
SELECT Title, Body FROM Emails
WHERE Username='vickie'
UNION SELECT Username, Password FROM Users;--
    This will return all usernames and passwords as email titles and bodies in the HTTP response!
    这将在HTTP响应中返回所有用户名和密码作为电子邮件标题和正文！
    Prevention
    Because SQL injections are so devastating to an application’s security, you must take action to prevent them. One way you can prevent SQL injections is by using prepared statements.
     Prepared statements
    are also called
     parameterized queries
    , and they make SQL injections virtually impossible.
    由于SQL注入对应用程序的安全性有如此巨大的破坏力，所以您必须采取措施来防止它们。其中一种方式是使用准备语句进行预防SQL注入攻击。准备语句也称作参数化查询，它们几乎可以使SQL注入攻击变成不可能。
    Before we dive into how prepared statements work, it’s important to understand how SQL queries are executed. SQL is a programming language, and your SQL query is essentially a program. When the SQL program arrives at the SQL server, the server will parse, compile, and optimize it. Finally, the server will execute the program and return the results of the execution (
     Figure 11-1
    )
     .
    在我们深入了解预处理语句的工作方式之前，重要的是要了解SQL查询的执行方式。SQL是一种编程语言，你的SQL查询本质上就是一个程序。当SQL程序到达SQL服务器时，服务器将对其进行解析、编译和优化。最后，服务器将执行程序并返回执行结果（图11-1）。
       Figure 11-1
      : Life of a SQL query
      图11-1：SQL查询的生命周期
    When you insert user-supplied input into your SQL queries, you are basically rewriting your program dynamically, using user input. An attacker can supply data that interferes with the program’s code and alter its logic (
     Figure 11-2
    ).
    当您将用户提供的输入插入到SQL查询中时，您基本上是动态地重写程序，使用用户输入。攻击者可以提供干扰程序代码并改变其逻辑的数据（图11-2）。
       Figure 11-2
      : A SQL query that concatenates user input into the query before compilation will make the database treat user input as code.
      图11-2：在编译之前将用户输入连接到查询中的SQL查询将使数据库将用户输入视为代码。
    Prepared statements work by making sure that user-supplied data does not alter your SQL query’s logic. These SQL statements are sent to and compiled by the SQL server before any user-supplied parameters are inserted. This means that instead of passing a complete SQL query to the server to be compiled, you define all the SQL logic first, compile it, and then insert user-supplied parameters into the query right before execution (
     Figure 11-3
    ). After the parameters are inserted into the final query, the query will not be parsed and compiled again.
    预处理语句通过确保用户提供的数据不会改变您的 SQL 查询逻辑来工作。在任何用户提供的参数被插入之前，这些 SQL 语句将被发送到 SQL 服务器并编译。这意味着你首先定义所有 SQL 逻辑、编译它，然后在执行之前将用户提供的参数插入查询中（图11-3）。在参数插入到最终的查询之后，查询不会再次被解析和编译。
       Figure 11-3
      : A SQL query that concatenates user input into the query after compilation allows the database to distinguish between the code part and the data part of the SQL query.
      图11-3：编译后将用户输入连接到查询中的SQL查询允许数据库区分SQL查询的代码部分和数据部分。
    Anything that wasn’t in the original statement will be treated as string data, not executable SQL code, so the program logic part of your SQL query will remain intact. This allows the database to distinguish between the code part and the data part of the SQL query, regardless of what the user input looks like.
    任何原陈述中没有的内容将被视为字符串数据，而非可执行的 SQL 代码，因此 SQL 查询的程序逻辑部分将保持不变。这使得数据库能够区分 SQL 查询的代码部分和数据部分，无论用户输入的是什么样子。
    Let’s look at an example of how to execute SQL statements safely in PHP. Say that we want to retrieve a user’s ID by using their provided username and password, so we want to execute this SQL statement:
    让我们看一下PHP中如何安全执行SQL语句的示例。假设我们想通过使用提供的用户名和密码检索用户ID，因此我们想要执行以下SQL语句：
SELECT Id FROM Users
WHERE Username=USERNAME AND Password=PASSWORD;
    Here’s how to do that in PHP:
    这是如何在PHP中实现的方法：
$mysqli = new mysqli("mysql_host", "mysql_username", "mysql_password", "database_name"); 1
$username = $_POST["username"]; 2
$password = $_POST["password"]; 3
    In PHP, we first establish a connection with our database
     1
    , and then retrieve the username and password as POST parameters from the user
     2
     3
     .
    在 PHP 中，我们首先与数据库 1 建立连接，然后从用户 2 3 检索用户名和密码作为 POST 参数。
    To use a prepared statement, you would define the structure of the query first. We’ll write out the query without its parameters, and put question marks as placeholders for the parameters:
    要使用预处理语句，您需要首先定义查询的结构。我们会先将查询写出来，而将参数用问号作为占位符：
$stmt = $mysqli->prepare("SELECT Id FROM Users WHERE Username=? AND Password=?");
    This query string will now be compiled by the SQL server as SQL code. You can then send over the parameters of the query separately. The following line of code will insert the user input into the SQL query:
    此查询字符串现在将由SQL服务器编译为SQL代码。然后，您可以单独发送查询参数。以下代码行将将用户输入插入SQL查询中：
$stmt->bind_param("ss", $username, $password);
    Finally, you execute the query:
    最终，你执行查询：
$stmt->execute();
    The username and password values provided by the user aren’t compiled like the statement template, and aren’t executed as the logic part of the SQL code. Therefore, if an attacker provides the application with a malicious input like this one, the entire input would be treated as plain data, not as SQL code:
    用户提供的用户名和密码值未编译成语句模板，并且不作为 SQL 代码的逻辑部分执行。因此，如果攻击者向应用程序提供恶意输入，整个输入将被视为纯数据，而不是 SQL 代码：
Password12345';--
    How to use prepared statements depends on the programming language you are using to code your applications. Wikipedia provides a few examples:
     https://en.wikipedia.org/wiki/Prepared_statement
     .
    如何使用预处理语句取决于您使用的编程语言来编写应用程序。维基百科提供了一些示例：https://en.wikipedia.org/wiki/Prepared_statement。
    Another way of preventing SQL injections is to use an allowlist for allowed values. For example, the SQL
     ORDER BY
    clause allows a query to specify the column by which to sort the results. Therefore, this query will return all of the user’s emails in our table, sorted by the Date column, in descending order:
    另外一种防止SQL注入的方法是使用允许值的允许列表。例如，SQL ORDER BY子句允许查询指定用于排序结果的列。因此，此查询将按日期列的降序返回表中所有用户的电子邮件。
SELECT Title, Body FROM Emails
WHERE Username='vickie' AND AccessKey='ZB6w0YLjzvAVmp6zvr';
ORDER BY Date DESC;
    If the application allows users to specify a column to use for ordering their email, it can rely on an allowlist of column names for the
     ORDER BY
    clause instead of allowing arbitrary input from the user. For example, the application can allow only the values
     Date
    ,
     Sender
    , and
     Title
    , and reject all other user-input values.
    如果应用程序允许用户指定用于排序电子邮件的列，则可以依赖于允许列表中的列名进行 ORDER BY 子句，而不是允许用户提供任意输入。例如，应用程序只能允许 Date、Sender 和 Title 这些值，并拒绝所有其他用户输入的值。
    Finally, you can carefully sanitize and escape user input. However, this approach isn’t entirely bulletproof, because it’s easy to miss special characters that attackers could use to construct a SQL injection attack. Special characters that should be sanitized or escaped include the single quote (
     '
    ) and double quote (
     "
    ), but special characters specific to each type of database also exist. For more information about SQL input sanitization, read OWASP’s cheat sheet at