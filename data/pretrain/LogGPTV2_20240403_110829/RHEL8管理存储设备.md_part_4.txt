::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-storage-devices.html#configuring-lvm-pool-with-raid-using-storage-system-role_managing-local-storage-using-rhel-system-roles}使用存储系统角色使用 RAID 配置 LVM 池 {.title}
:::
通过 `storage`{.literal} 系统角色，您可以使用 Red Hat Ansible Automation
Platform 在 RHEL 上使用 RAID 配置 LVM
池。在本小节中，您将了解如何使用可用参数设置 Ansible
playbook，以配置使用 RAID 的 LVM 池。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `storage`{.literal} 解决方案的系统中安装 Red Hat
    Ansible Automation Platform。
    :::
-   已安装该系统中要运行 playbook 的 `rhel-system-roles`{.literal}
    软件包。
-   您有一个清单文件详细描述了您要使用 `storage`{.literal}
    系统角色配置带有 RAID 的 LVM 池的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容 `playbook.yml`{.literal} 创建新文件：
    ``` screen
    - hosts: all
      vars:
        storage_safe_mode: false
        storage_pools:
          - name: my_pool
            type: lvm
            disks: [sdh, sdi]
            raid_level: raid1
            volumes:
              - name: my_pool
                size: "1 GiB"
                mount_point: "/mnt/app/shared"
                fs_type: xfs
                state: present
      roles:
        - name: rhel-system-roles.storage
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要使用具有 RAID 的 LVM 池，您必须使用 `raid_level`{.literal}
    参数指定 RAID 类型。
    :::
2.  可选。验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 RAID 的详情，请参阅[管理
    RAID](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/managing-raid_managing-storage-devices){.link}。
-   有关存储系统角色中使用的参数的详情，请查看
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-storage-devices.html#proc_creating-a-luks-encrypted-volume-using-the-storage-role_managing-local-storage-using-rhel-system-roles}使用存储角色创建 LUKS 加密卷 {.title}
:::
您可以通过运行 Ansible playbook，使用 `storage`{.literal}
角色创建并配置使用 LUKS 加密的卷。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要创建卷的系统中安装 Red Hat Ansible Automation Platform。
    :::
-   您已在 Ansible 控制器上安装了 `rhel-system-roles`{.literal} 软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色部署 LUKS
    加密卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容 `playbook.yml`{.literal} 创建新文件：
    ``` screen
    - hosts: all
      vars:
        storage_volumes:
          - name: barefs
            type: disk
            disks:
             - sdb
            fs_type: xfs
            fs_label: label-name
            mount_point: /mnt/data
            encryption: true
            encryption_password: your-password
      roles:
       - rhel-system-roles.storage
    ```
2.  可选：验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   [使用 LUKS
    加密块设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/encrypting-block-devices-using-luks_managing-storage-devices){.link}
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    file
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请安装 `rhel-system-roles`{.literal}
    软件包并查看以下目录：
    ::: itemizedlist
    -   `/usr/share/doc/rhel-system-roles/storage/`{.literal}
    -   `/usr/share/ansible/roles/rhel-system-roles.storage/`{.literal}
    :::
:::
:::
:::
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_getting-started-with-partitions_managing-storage-devices}第 3 章 分区入门 {.title}
:::
作为系统管理员，您可以使用以下步骤创建、删除和修改各种磁盘分区。
有关在块设备中使用分区的优缺点概述，请参阅以下 KBase
[文章：](https://access.redhat.com/solutions/163853){.link}
::: section
::: titlepage
# []{#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_viewing-the-partition-table_assembly_getting-started-with-partitions}重新划分现存分区的大小 {.title}
:::
作为系统管理员，您可以显示块设备的分区表来查看分区布局和单个分区的详情。
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#proc_viewing-the-partition-table-with-parted_assembly_viewing-the-partition-table}使用 parted 查看分区表 {.title}
:::
这个步骤描述了如何使用 `parted`{.literal} 工具查看块设备的分区表。
::: orderedlist
**流程**
1.  启动交互式 `parted`{.literal} shell：
    ``` screen
    # parted block-device
    ```
    ::: itemizedlist
    -   使用您要检查的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis}：例如
        `/dev/sda`{.literal}。
    :::
2.  查看分区表：
    ``` screen
    (parted) print
    ```
3.  另外，使用以下命令切换到您想要检查下一个设备的另一个设备：
    ``` screen
    (parted) select block-device
    ```
:::
::: itemizedlist
**其它资源**
-   `parted(8)`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#ref_example-output-of-parted-print_assembly_viewing-the-partition-table}`parted print`{.literal} 的输出示例 {.title}
:::
本节提供了 `parted`{.literal} shell 中的 `print`{.literal}
命令输出示例，并描述输出中的字段。
::: example
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398920480}
**例 3.1. `print`{.literal} 命令的输出**
::: example-contents
``` screen
Model: ATA SAMSUNG MZNLN256 (scsi)
Disk /dev/sda: 256GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags:
Number  Start   End     Size    Type      File system  Flags
 1      1049kB  269MB   268MB   primary   xfs          boot
 2      269MB   34.6GB  34.4GB  primary
 3      34.6GB  45.4GB  10.7GB  primary
 4      45.4GB  256GB   211GB   extended
 5      45.4GB  256GB   211GB   logical
```
下面是这些字段的描述：
::: variablelist
[`Model: ATA SAMSUNG MZNLN256 (scsi)`{.literal}]{.term}
:   磁盘类型、制造商、型号号和接口。
[`Disk /dev/sda: 256GB`{.literal}]{.term}
:   到块设备和存储容量的文件路径。
[`Partition Table: msdos`{.literal}]{.term}
:   磁盘标签类型。
[`Number`{.literal}]{.term}
:   分区号。例如：带有次号码 1 的分区对应 `/dev/sda1`{.literal}。
[`Start`{.literal} 和 `End`{.literal}]{.term}
:   在分区启动和结束的设备中的位置。
[`Type`{.literal}]{.term}
:   有效类型为 metadata、free、primary、extended 或 logical。
[`File system`{.literal}]{.term}
:   文件系统类型。如果设备的 `File system`{.literal}
    字段没有显示值，这意味着其文件系统类型未知。`parted`{.literal}
    工具无法识别加密设备的文件系统。
[`Flags`{.literal}]{.term}
:   列出为分区设置的标记。可用标记有
    `boot`{.literal}、`root`{.literal}、`swap`{.literal}、`hidden`{.literal}、`raid`{.literal}、`lvm`{.literal}
    或 `lba`{.literal}。
:::
:::
:::
:::
:::
::: section
::: titlepage
# []{#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_creating-a-partition-table-on-a-disk_assembly_getting-started-with-partitions}在磁盘中创建分区表 {.title}
:::
作为系统管理员，您可以使用不同类型的分区表格式化块设备来启用该设备的分区。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
使用分区表格式化块设备会删除该设备中所有存储的数据。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#con_considerations-before-modifying-partitions-on-a-disk_assembly_creating-a-partition-table-on-a-disk}修改磁盘分区前的注意事项 {.title}
:::
本节列出了在创建、删除或重新定义分区大小前需要考虑的关键点。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本节不涵盖 DASD 分区表，它特定于 IBM Z 构架。有关 DASD 的详情请参考：
::: itemizedlist
-   [在 IBM Z 中配置 Linux
    实例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_a_standard_rhel_installation/configuring-a-linux-instance-on-ibm-z_installing-rhel){.link}
-   IBM [知识库中您应该了解的
    DASD](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lgdd/lgdd_c_dasd_know.html){.link}
    文章
:::
:::
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#the_maximum_number_of_partitions}分区的最大数量
设备中的分区数量受分区表类型的限制：
::: itemizedlist
-   [**在使用主引导记录(MBR)分区表格式化的设备中**]{.strong}，您可以使用：
    ::: itemizedlist
    -   最多四个主分区，或者
    -   最多有三个主分区，以及一个扩展分区，其中包括多个逻辑分区。
    :::
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备中，最多分区数为
    128。尽管 GPT 规范通过增大为分区表保留的区域来允许更多分区，但
    `parted`{.literal} 工具使用的常见做法是将其限制为 128 分区足够区域。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
[*红帽建议，除非您有其他原因，否则至少应创建以下分区*]{.emphasis} ：
`swap`{.literal}、`/boot/`{.literal} 和 `/`{.literal} (root)。
:::
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#the_maximum_size_of_a_partition}分区的最大大小
设备中的分区大小受分区表类型的限制：
::: itemizedlist
-   在使用[**主引导记录（MBR）**]{.strong}
    分区表格式化的设备中，最大值为 2TiB。
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备中，最大大小为
    8ZiB。
:::
如果要创建一个大于 2TiB 的分区，该磁盘必须使用 GPT 格式化。