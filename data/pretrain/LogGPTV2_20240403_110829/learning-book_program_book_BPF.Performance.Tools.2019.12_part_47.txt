### 8.3.26 readahead

The `readahead(8)` tool traces the file system's automatic read-ahead operations (not the `readahead(2)` syscall) and measures whether the read-ahead pages were used during tracing, as well as the time between reading the page and its use. For example:

```bash
$ readahead.bt
Attaching 5 probes...
^C
Readahead unused pages: 128
Readahead used page age (ns):
[1, 2)
2455
[2, 4)
8424
[4, 8)
4417
[8, 16)
7680
[16, 32)
4352
[32, 64)
0
[64, 128]
0
[128, 256)
0
```

This output indicates that during tracing, there were 128 pages read ahead but not used, which is a relatively small number. The histogram shows that thousands of pages were read and used, mostly within 32 milliseconds. If the time was in the order of seconds, it could indicate that read-ahead is loading too aggressively and should be tuned.

This tool was created to analyze read-ahead behavior on Netflix production instances using solid-state drives, where read-ahead is less useful than for rotational disks. The source code for `readahead(8)` is:

```c
# /usr/local/bin/bpftrace
kprobe:do_page_cache_readahead
{
    @Bin_readahead[tid] = 1;
}
kretprobe:do_page_cache_readahead
{
    @Bin_readahead[tid] = 0;
}
kretprobe:page_cache_alloc
{
    if (@Bin_readahead[tid]) {
        @birth[arg0] = nsecs;
        @rapages++;
    }
}
kprobe:mark_page_accessed
{
    if (@birth[arg0]) {
        @age_ms = hist((nsecs - @birth[arg0]) / 1000000);
        delete(@birth[arg0]);
    }
}
END
{
    printf("\nReadahead unused pages: %d\n", @rapages);
    printf("\nReadahead used page age (ns):\n");
    print(@age_ms);
    clear(@age_ms);
    clear(@birth);
    clear(@Bin_readahead);
    clear(@rapages);
}
```

This script uses kprobes to instrument various kernel functions. It sets a per-thread flag during `do_page_cache_readahead()`, which is checked during page allocation to determine if the page was for read-ahead. If so, a timestamp is saved for the page, keyed on the page struct address. This timestamp is later read when the page is accessed, and the time difference is recorded in the histogram. The count of unused pages is calculated by subtracting the number of used pages from the total number of read-ahead page allocations.

If the kernel implementation changes, this tool will need to be updated. Tracing page functions and storing extra metadata per page can add significant overhead, especially on busy systems, where the overhead may reach 30% or higher. This tool is intended for short-term analysis.

At the end of Chapter 9, a bpftrace one-liner is shown that can count the ratio of read vs. read-ahead block I/O.

### 8.3.27 Other Tools

Other BPF tools worth mentioning include:

- `ext4slower(8)`, `ext4dist(8)`: ext4 versions of `xfsslower(8)` and `xfsdist(8)` in BCC.
- `btrfsslower(8)`, `btrfsdist(8)`: btrfs versions of `xfsslower(8)` and `xfsdist(8)` in BCC.
- `zfsslower(8)`, `zfsdist(8)`: zfs versions of `xfsslower(8)` and `xfsdist(8)` in BCC.
- `nfsslower(8)`, `nfsdist(8)`: NFS versions of `xfsslower(8)` and `xfsdist(8)` in BCC, for NFSv3 and NFSv4.

### 8.4 BPF One-Liners

These sections show BCC and bpftrace one-liners. Where possible, the same one-liner is implemented using both BCC and bpftrace.

#### 8.4.1 BCC

- **Trace files opened via `open(2)` with process name:**
  ```bash
  trace 'syscalls:sys_enter_open' '%s', comm, args->filename
  ```

- **Trace files created via `creat(2)` with process name:**
  ```bash
  trace 'syscalls:sys_enter_creat' '%s', comm, args->pathname
  ```

- **Count `newstat(2)` calls by filename:**
  ```bash
  argdist -C 'syscalls:sys_enter_newstat' :char*:args->filename
  ```

- **Count read syscalls by syscall type:**
  ```bash
  funccount 'syscalls:sys_enter_*read*'
  ```

- **Count write syscalls by syscall type:**
  ```bash
  funccount 'syscalls:sys_enter_*write*'
  ```

- **Show the distribution of `read()` syscall request sizes:**
  ```bash
  argdist -H 'syscalls:sys_enter_read' :int:args->count
  ```

- **Show the distribution of `read()` syscall read bytes (and errors):**
  ```bash
  argdist -H 'syscalls:sys_exit_read' :int:args->ret
  ```

- **Count `read()` syscall errors by error code:**
  ```bash
  argdist -C 'syscalls:sys_exit_read' :int:args->ret:args->ret < 0
  ```

#### 8.4.2 bpftrace

- **Trace files created via `creat(2)` with process name:**
  ```bash
  bpftrace -e 't:syscalls:sys_enter_creat { printf("%s %s\n", comm, str(args->pathname)) }'
  ```

- **Count `newstat(2)` calls by filename:**
  ```bash
  bpftrace -e 't:syscalls:sys_enter_newstat { @str(args->filename) = count() }'
  ```

- **Count read syscalls by syscall type:**
  ```bash
  bpftrace -e 'tracepoint:syscalls:sys_enter_*read* { @probe = count() }'
  ```

- **Count write syscalls by syscall type:**
  ```bash
  bpftrace -e 'tracepoint:syscalls:sys_enter_*write* { @probe = count() }'
  ```

- **Show the distribution of `read()` syscall read bytes (and errors):**
  ```bash
  bpftrace -e 'tracepoint:syscalls:sys_exit_read { @bytes = hist(args->ret) }'
  ```

- **Count `read()` syscall errors by error code:**
  ```bash
  bpftrace -e 't:syscalls:sys_exit_read /args->ret < 0/ { @err[args->ret] = count() }'
  ```

### 8.4.3 BPF One-Liners Examples

Including sample output for each tool is useful for illustrating one-liners. Here are some selected one-liners with example output.

#### Counting Read Syscalls by Syscall Type

```bash
$ funccount -d 10 'syscalls:sys_enter_*read*'
Tracing 9 functions for 'syscalls:sys_enter_*read*'... Hit Ctrl-C to end.
FUNC                                   COUNT
syscalls:sys_enter_readlinkat             3
syscalls:sys_enter_readlink              34
syscalls:sys_enter_read               9863782
Detaching...
```

This example runs for 10 seconds. The output shows that `read(2)` is almost always in use, with nearly 10 million calls in 10 seconds of tracing.

#### Showing the Distribution of `read()` Syscall Read Bytes (and Errors)

```bash
$ bpftrace -e 'tracepoint:syscalls:sys_exit_read { @bytes = hist(args->ret) }'
Attaching 1 probe...
^C
@bytes:
[0, 1)            2791
[1, 2)            2899
[2, 4)            731
[4, 8)            1791
[8, 16)           3741
[16, 32)          2184
[32, 64)          1421
[64, 128)         880
[128, 256)        389
[256, 512)        198
[512, 1K)         16170
[1K, 2K)          19885
[2K, 4K)          23926
[4K, 8K)          0
[8K, 16K)         6888
[16K, 32K)        1909
[32K, 64K)        551
[64K, 128K)       149
[128K, 256K)      1
```

This output shows a large mode of reads between 512 bytes and 8 Kbytes. It also shows that 15,609 reads returned only one byte, which could be a target for performance optimizations. These can be investigated further by fetching the stack for these one-byte reads.

#### Counting XFS Tracepoints

```bash
$ funccount -d 10 't:xfs:*'
Tracing 496 functions for 't:xfs:*'... Hit Ctrl-C to end.
FUNC                                   COUNT
xfs:xfs_buf_delwri_queued               1
xfs:xfs_lrele                           1
xfs:xfs_inactive_symlink                2
xfs:xfs_dinode_block_addname            1
xfs:xfs_buf_trylock_fail                1
...
xfs:xfs_trans_read_buf                  9548
xfs:xfs_trans_log_buf                   11800
xfs:xfs_buf_read                       13320
xfs:xfs_buf_find                       13322
xfs:xfs_buf_get                        13322
xfs:xfs_buf_trylock                    15740
xfs:xfs_buf_unlock                     15836
xfs:xfs_buf_rele                       20959
xfs:xfs_perag_get                      21048
xfs:xfs_perag_put                      26230
xfs:xfs_file_buffered_read             43283
xfs:xfs_getattr                        80541
xfs:xfs_write_extent                   121930
xfs:xfs_update_time                    137315
xfs:xfs_log_reserve                    140053
xfs:xfs_log_reserve_exit               140066
xfs:xfs_log_ungrant_sub                140094
xfs:xfs_log_ungrant_exit               140107
xfs:xfs_log_ungrant_enter              140195
xfs:xfs_log_done_nonperm               140264
xfs:xfs_lomap_found                    188507
xfs:xfs_file_buffered_write            188759
xfs:xfs_writepage                     476196
xfs:xfs_releasepage                    479235
xfs:xfs_ilock                         581785
xfs:xfs_iunlock                       589775
Detaching...
```

XFS has many tracepoints, and this output example was truncated to save space. These provide many ways to investigate XFS internals and get to the bottom of problems.

#### Counting ext4 Reads to Storage Devices, with Stacks and Process Names

```bash
$ stackcount -P ext4_readpages
Tracing 1 function for 'ext4_readpages'... Hit Ctrl-C to end.
COMM             PID    COUNT
ext4_readpages   28475  1
    read_pages
    __alloc_pages_nodemask
    filemap_fault
    ext4_filemap_fault
    _do_fault
    handle_mm_fault
    async_page_fault
    _clear_user
    load_elf_binary
    search_binary_handler
    _do_execve_file.isra.36
    do_syscall_64
    entry_SYSCALL_64_after_hwframe
    [unknown]
    head [28475]
ext4_readpages   28475  1
    read_pages
    __alloc_pages_nodemask
    _vfs_read
    vfs_read
    kernel_read
    prepare_binprm
    _do_execve_file.isra.36
    do_syscall_64
    entry_SYSCALL_64_after_hwframe
    [unknown]
    bash [28475]
Detaching...
```

This output captures two events: the first shows a page fault leading to `ext4_readpages` and reading from disk (from an `execve(2)` call loading its binary program); the second shows a normal `read(2)` that reaches `ext4_readpages` via read-ahead functions. These examples illustrate an address space operations read and a file operations read. The kernel stack trace provides more information about the event. These stacks are from Linux 4.18 and may change between kernel versions.

### 8.5 Optional Exercises

If not specified, these exercises can be completed using either bpftrace or BCC:

1. **Rewrite `filelife(8)` to use the syscall tracepoints for `creat(2)` and `unlink(2)`.**
2. **What are the pros and cons of switching `filelife(8)` to these tracepoints?**
3. **Develop a version of `vfsstat(8)` that prints separate rows for your local file system and TCP.** (See `vfssize(8)` and `fsrwstat(8)`.) Mock output:

```bash
$ vfsstatx
TIME       FS       READ/s  WRITE/s  CREATE/s
02:41:23   ext4     1715013  38717    0
02:41:23   TCP      1431     0
```