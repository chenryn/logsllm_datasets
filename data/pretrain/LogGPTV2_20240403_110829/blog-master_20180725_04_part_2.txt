LOCK TABLE  
```  
4、开启另一个会话，插入，并返回当前插入的是哪个表？  
```  
postgres=# insert into abc values(1) returning *,tableoid,tableoid::regclass;  
```  
堵塞，等待  
5、切换流程继续，切换AB表  
```  
postgres=# alter table abc rename to abc_mid;  
ALTER TABLE  
postgres=# alter table abc_tmp rename to abc;  
ALTER TABLE  
postgres=# alter table abc_mid rename to abc_tmp;  
ALTER TABLE  
postgres=# end;  
COMMIT  
```  
6、堵塞结束，到底插入了哪个表？  
```  
 id | tableoid | tableoid   
----+----------+----------  
  1 |    26743 | abc  
(1 row)  
INSERT 0 1  
```  
结论：插入了切换后的ABC表  
### 更新操作  
接上面的表  
```  
truncate abc;  
truncate abc_tmp;  
insert into abc values (1);  
insert into abc_tmp values (1);  
```  
1、更新测试，返回当前插入的是哪个表  
```  
update abc set id=2 returning *,ctid,tableoid,tableoid::regclass;  
 id | ctid  | tableoid | tableoid   
----+-------+----------+----------  
  2 | (0,2) |    26743 | abc  
(1 row)  
UPDATE 1  
```  
2、开启切换流程，先锁住2个要被切换的表  
```  
postgres=# begin;  
BEGIN  
postgres=# lock table abc in access exclusive mode ;  
LOCK TABLE  
postgres=# lock table abc_tmp in access exclusive mode ;  
LOCK TABLE  
```  
3、开启另一个会话，插入，并返回当前插入的是哪个表？  
```  
postgres=# update abc set id=2 returning *,ctid,tableoid,tableoid::regclass;  
```  
堵塞，等待  
4、切换流程继续，切换AB表  
```  
postgres=# alter table abc rename to abc_mid;  
ALTER TABLE  
postgres=# alter table abc_tmp rename to abc;  
ALTER TABLE  
postgres=# alter table abc_mid rename to abc_tmp;  
ALTER TABLE  
postgres=# end;  
COMMIT  
```  
5、堵塞结束，到底更新了哪个表？  
```  
 id | ctid  | tableoid | tableoid   
----+-------+----------+----------  
  2 | (0,2) |    26746 | abc  
(1 row)  
UPDATE 1  
```  
结论：更新了切换后的ABC表  
## 维系同样索引、约束、默认值的AB表切换
业务上通常会使用中间表，加载全量数据后，再与业务表切换。除了数据，还需要考虑索引、约束、默认值等与业务表保持一致。   
### 例子
1、交换表UDF(包括索引)  
```  
create or replace function exchange_table(v_nsp name, v_old_tbl name, v_new_tbl name) returns void as $$  
declare  
  idx_def text[];  
  sql text;  
begin  
  set lock_timeout ='5s';  
  select array_agg(regexp_replace(indexdef,'INDEX (.+) ON (.+) ','INDEX i'||to_char(clock_timestamp(),'yyyymmddhh24miss')||'_'||rn||' ON '||quote_ident(v_nsp)||'.'||quote_ident(v_new_tbl))) 
    into idx_def 
    from (select *,row_number() over() rn from pg_indexes where schemaname=v_nsp and tablename=v_old_tbl) t;  
  foreach sql in array idx_def   
  loop  
    execute sql;     
  end loop;  
  -- 如果索引非常多，可以异步并行创建，所有索引创建完成后再切换表  
  -- PG 11版本，不需要异步创建，因为单个索引的创建已经支持并行  
  execute format('drop table %I.%I', v_nsp, v_old_tbl);  
  execute format('alter table %I.%I rename to %I', v_nsp, v_new_tbl, v_old_tbl);  
end;  
$$ language plpgsql strict;  
```  
PG11 并行创建索引例子  
[《PostgreSQL 快速给指定表每个字段创建索引》](../201808/20180822_01.md)  
异步并行调用参考   
[《阿里云RDS PostgreSQL OSS 外部表实践 - (dblink异步调用封装并行) 从OSS并行导入数据》](../201804/20180427_01.md)    
[《在PostgreSQL中跑后台长任务的方法 - 使用dblink异步接口》](../201806/20180621_03.md)  
以上UDF，结合[《PostgreSQL dblink异步调用实践,跑并行多任务 - 例如开N个并行后台任务创建索引, 开N个后台任务跑若干SQL》](../201809/20180903_01.md)  改成并行创建   
```
create or replace function exchange_table(v_nsp name, v_old_tbl name, v_new_tbl name) returns void as $$  
declare  
  idx_def text[];  
  sql text;  
  sqls text[];      
begin  
  set lock_timeout ='5s';  
  select array_agg(regexp_replace(indexdef,'INDEX (.+) ON (.+) ','INDEX i'||to_char(clock_timestamp(),'yyyymmddhh24miss')||'_'||rn||' ON '||quote_ident(v_nsp)||'.'||quote_ident(v_new_tbl))) 
    into idx_def 
    from (select *,row_number() over() rn from pg_indexes where schemaname=v_nsp and tablename=v_old_tbl) t;  
  foreach sql in array idx_def   
  loop  
    sqls := array_append(sqls, sql);  
  end loop;  
  -- 如果索引非常多，可以异步并行创建，所有索引创建完成后再切换表  
  -- PG 11版本，不需要异步创建，因为单个索引的创建已经支持并行  
  -- 并行
  perform run_sqls_parallel(  
    16,   -- 并行度  
    sqls  -- 执行index SQL数组  
  );  
  -- 切换表名
  execute format('drop table %I.%I', v_nsp, v_old_tbl);  
  execute format('alter table %I.%I rename to %I', v_nsp, v_new_tbl, v_old_tbl);  
end;  
$$ language plpgsql strict;  
```
2、DEMO  
业务表\索引  
```  
create table tbl(id int primary key, info text not null, crt_time timestamp default now());  
create index idx_tbl_1 on tbl (crt_time);  
insert into tbl select generate_series(1,100),md5(random()::text);  
```  
临时表（无索引，只包含与业务表一样的约束）  
```  
create table tmp (like tbl including CONSTRAINTS including DEFAULTS);   
```  
加载数据到临时表(demo)  
```  
insert into tmp select generate_series(1,200),md5(random()::text);  
```  
临时表切换为业务表，并加与业务表相同的索引   
```  
select exchange_table('public', 'tbl', 'tmp');  
postgres=# select count(*) from tbl;  
 count   
-------  
   200  
(1 row)  
postgres=# select * from tmp;  
ERROR:  relation "tmp" does not exist  
LINE 1: select * from tmp;  
                      ^  
```  
```  
postgres=# \d tbl  
                           Table "public.tbl"  
  Column  |            Type             | Collation | Nullable | Default   
----------+-----------------------------+-----------+----------+---------  
 id       | integer                     |           | not null |   
 info     | text                        |           | not null |   
 crt_time | timestamp without time zone |           |          | now()  
Indexes:  
    "i_20180827222503_1" UNIQUE, btree (id)  
    "i_20180827222503_2" btree (crt_time)  
```  
## 小结  
使用本文提到的方法对AB表进行切换，可以完全杜绝雪崩。同时，如果有正在使用AB表的会话，会被回退，由于切换AB表仅涉及元数据的更新，所以切换很快，影响很小。  
注意，使用切换表的方法，实际上有一个问题是依赖关系的问题，如果依赖关系复杂,RENMAE的方式，需要注意依赖关系的切换，包括主外键，继承，分区等。   
所以，对于依赖关系复杂的情况，更好的方法是类似pg_repack的方法，切换表的filenode(即数据文件映射关系，当然还需要注意TOAST也要切换)，而不是RENAME TABLE。   
## 参考  
[《PostgreSQL 设置单条SQL的执行超时 - 防雪崩》](../201712/20171211_02.md)    
[《PostgreSQL 锁等待监控 珍藏级SQL - 谁堵塞了谁》](../201705/20170521_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")