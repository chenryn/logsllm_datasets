# 五、更新和删除应用
在前一章中，我们学习了如何部署应用及其服务，以及如何扩展部署副本。现在让我们了解一些更新应用的更高级的方法。
在这一章中，我们将学习如何将应用更新到新版本，以及如果发布的版本不好，如何回滚。我们将看到如何将应用分配给特定的节点，如何在高可用性模式下运行应用，如何使应用在互联网上可用，以及在有需要的情况下，如何删除应用。
我们将在本章中讨论以下主题:
*   发布新的应用版本
*   回滚应用版本
*   将应用分配给特定节点(节点关联性)
*   将应用副本调度到不同的节点(pod 相似性)
*   向互联网公开应用
*   删除应用
# 部署新的应用版本
在前一章中，我们使用`nginx v1.18.0` Docker 映像部署了一个应用。在这一部分，让我们将其更新为`nginx v1.19.0`:
要更新`nginx` Docker 映像标签，运行以下命令:
```
$ kubectl set image deployment nginx nginx=nginx:1.19.0 \
 --record
deployment.apps/nginx image updated
$ kubectl rollout status deployment nginx
deployment "nginx" successfully rolled out
$ kubectl get deployment nginx
NAME    READY   UP-TO-DATE   AVAILABLE   AGE
nginx   3/3     3            3           5d19h
$ kubectl get pods
NAME                    READY   STATUS    RESTARTS   AGE
nginx-6fd8f555b-2mktp   1/1     Running   0          60s
nginx-6fd8f555b-458cl   1/1     Running   0          62s
nginx-6fd8f555b-g728z   1/1     Running   0          66s
```
`$ kubectl rollout status deployment nginx`命令将显示卷展栏状态为成功、失败或等待:
```
deployment "nginx" successfully rolled out
```
这是一种检查部署部署状态的简便方法。
让我们通过运行以下命令来确保部署更新到`nginx` v1.19.0:
```
$ kubectl describe deployment nginx
```
前面命令的输出可以在下面的截图中看到:
![Figure 5.1 – Output for describe deployment ](img/B16411_05_001.jpg)
图 5.1–描述部署的输出
是的，更新到了 v1.19.0，我们可以在`Pod Template`部分看到。现在，让我们使用`deployment.yaml`文件更新 Docker 映像。
用新的 Docker `image`标签更新`deployment.yaml`文件:
```
...
spec:
  containers:
  -image: nginx:1.19.0
...
```
运行`$ kubectl apply -f deployment.yaml`命令:
```
$ kubectl apply -f deployment.yaml
deployment.apps/nginx configured
$ kubectl rollout status deployment nginx
deployment "nginx" successfully rolled out
$ kubectl get deployment nginx
NAME    READY   UP-TO-DATE   AVAILABLE   AGE
nginx   3/3     3            3           5d19h
$ kubectl get pods
NAME                    READY   STATUS    RESTARTS   AGE
nginx-6fd8f555b-2mktp   1/1     Running   0          12m
nginx-6fd8f555b-458cl   1/1     Running   0          12m
nginx-6fd8f555b-g728z   1/1     Running   0          12m
```
运行`$ kubectl get pods`命令显示，当我们应用与之前相同的 Docker 映像标签时，Pod 没有变化，因此 Kubernetes 足够聪明，不会对`nginx`部署进行任何不必要的更改。
# 回滚应用版本
当您需要将应用版本回滚到以前的版本时，总会有种情况(例如代码中的错误、为最新版本提供的错误 Docker 标记等等)。
这可以通过使用`$ kubectl rollout undo deployment nginx`命令后跟`get`和`describe`命令来完成:
![Figure 5.2 – Deployment release rollback ](img/B16411_05_002.jpg)
图 5.2–部署版本回滚
前面的输出显示版本为`Image: nginx:1.18.0`，因此回滚成功。
我们还可以检查部署部署历史:
```
$ kubectl rollout history deployment nginx
deployment.apps/nginx
REVISION  CHANGE-CAUSE
1         
2         
```
我们也可以回滚到一个特定的版本:
```
$ kubectl rollout undo deployment nginx –to-revision=1
deployment.apps/nginx rolled back
```
很好，我们已经学习了如何回滚部署的发布。
# 将应用分配给特定节点(节点关联性)
有一些用例，其中 Kubernetes 集群具有不同规格的不同节点池，例如:
*   有状态应用
*   后端应用
*   前端应用
让我们将`nginx`部署重新安排到专用节点池:
1.  To get the nodes list, run the following command:
    ```
    $ kubectl get nodes
    ```
    前面的命令给出了以下输出:
    ![Figure 5.3 – Node pools list ](img/B16411_05_003.jpg)
    图 5.3–节点池列表
2.  Next, let's check a node under the `gke-kubectl-lab-we-app-pool` name. Run the following command:
    ```
    $ kubectl describe node gke-kubectl-lab-we-app-pool-1302ab74-pg34
    ```
    前面命令的输出如下图所示:
    ![Figure 5.4 – Node labels ](img/B16411_05_004.jpg)
    图 5.4–节点标签
3.  在这里，我们有一个`node-pool=web-app`标签，对于`gke-kubectl-lab-we-app-pool`池的所有节点都是一样的。
4.  让我们用`nodeAffinity`规则更新`deployment.yaml`文件，这样`nginx`应用只被安排到`gke-kubectl-lab-we-app-pool` :
    ```
    ...
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-pool
                operator: In
                values:
                - "web-app"
    containers:
    ...
    ```
5.  To deploy the changes, run the `$ kubectl apply -f deployment.yaml` command followed by the `get` command as shown in the following screenshot:
    ![Figure 5.5 – Node affinity ](img/B16411_05_005.jpg)
    图 5.5–节点关联性
    很好，Pod 被安排在`gke-kubectl-lab-we-app-pool`上。
    小费
    我们使用了`–o wide`标志，它允许我们显示更多关于 pod 的信息，比如它的 IP 和它被安排在的节点。
6.  Let's delete one pod to verify that it gets scheduled onto `gke-kubectl-lab-we-app-pool`:
    ```
    $ kubectl delete pod nginx-55b7cd4f4b-tnmpx
    ```
    我们再来看看 PODS 清单:
![Figure 5.6 – Pods list with nodes  ](img/B16411_05_006.jpg)