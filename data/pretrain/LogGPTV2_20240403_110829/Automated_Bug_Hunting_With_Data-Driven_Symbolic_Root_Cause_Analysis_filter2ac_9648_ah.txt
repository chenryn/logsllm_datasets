以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[90] Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: 一种用于C语言的并行单元测试引擎. In *ACM SIGSOFT Software Engineering Notes*, Vol. 30. ACM, 263–272.

[91] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. 2012. AddressSanitizer: 一种快速的地址检查工具. In *2012 USENIX Annual Technical Conference (USENIX ATC)*. 309–318.

[92] Hashim Sharif, Muhammad Abubakar, Ashish Gehani, and Fareed Zaffar. 2018. TRIMMER: 应用程序专业化以减少代码膨胀. In *Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering*. 329–339.

[93] Yan Shoshitaishvili, Antonio Bianchi, Kevin Borgolte, Amat Cama, Jacopo Corbetta, Francesco Disperati, Audrey Dutcher, John Grosen, Paul Grosen, Aravind Machiry, et al. 2018. Mechanical Phish: 弹性自主黑客攻击. *IEEE Security & Privacy* 16, 2 (2018), 12–22.

[94] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2015. Firmalice: 自动检测二进制固件中的认证绕过漏洞. In *NDSS*.

[95] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2016. SoK: 攻击技术在二进制分析中的现状. In *Proceedings of the 37th Symposium on Security and Privacy (Oakland)*. San Jose, CA.

[96] Xiaokui Shu, Danfeng (Daphne) Yao, Naren Ramakrishnan, and Trent Jaeger. 2017. 长跨度程序行为建模与攻击检测. *ACM Transactions on Privacy and Security* 20, Article 12 (2017).

[97] Asia Slowinska and Herbert Bos. 2007. 数据时代：精确定位堆栈或堆上的多态缓冲区溢出中的罪魁祸首字节. In *Twenty-Third Annual Computer Security Applications Conference (ACSAC 2007)*. IEEE, 487–500.

[98] Dawn Song, David Brumley, Heng Yin, Juan Caballero, Ivan Jager, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Prateek Saxena. 2008. BitBlaze: 通过二进制分析实现计算机安全的新方法. In *International Conference on Information Systems Security*. Springer, 1–25.

[99] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: 通过选择性符号执行增强模糊测试. In *Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA.

[100] sudo. 2012. 格式字符串漏洞. https://bugs.gentoo.org/401533. [在线; 访问日期: 2019年10月25日].

[101] Rijnard van Tonder, John Kotheimer, and Claire Le Goues. 2018. 语义崩溃分桶. In *33rd IEEE International Conference on Automated Software Engineering*. IEEE, 612–622.

[102] Qi Wang, Wajih Ul Hassan, Ding Li, Kangkook Jee, Xiao Yu, Kexuan Zou, Jung-whan Rhee, Zhengzhang Zhen, Wei Cheng, Carl A. Gunter, and Haifeng Chen. 2020. 你所为即你所是：通过数据溯源分析猎杀隐蔽恶意软件. In *27th ISOC Network and Distributed System Security Symposium (NDSS'20)*.

[103] C. Warrender, S. Forrest, and B. Pearlmutter. 1999. 使用系统调用来检测入侵：替代数据模型. In *Proceedings of the 1999 IEEE Symposium on Security and Privacy (Cat. No.99CB36344)*. 133–145.

[104] Andreas Wespi, Marc Dacier, and Hervé Debar. 2000. 使用变长审计跟踪模式进行入侵检测. In *Recent Advances in Intrusion Detection*. Springer, 110–129.

[105] K. Xu, K. Tian, D. Yao, and B. G. Ryder. 2016. 更敏锐的自我感知：具有上下文敏感性的程序行为概率推理. In *2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)*. 467–478.

[106] Carter Yagemann, Matthew Pruett, Simon P. Chung, Kennon Bittick, Brendan Saltaformaggio, and Wenke Lee. 2021. ARCUS: 生产系统中利用符号根因分析的漏洞检测. In *USENIX Security Symposium*.

[107] Carter Yagemann, Salmin Sultana, Li Chen, and Wenke Lee. 2019. Barnum: 通过硬件跟踪中的控制流异常检测文档恶意软件. In *Proceedings of the 25th Information Security Conference (ISC)*. New York, NY, USA.

[108] Attila Altay Yavuz and Peng Ning. 2009. BAF: 一种高效的、公开可验证的安全审计日志方案. In *Proceedings of the Annual Computer Security Applications Conference (ACSAC)*.

[109] Attila A. Yavuz, Peng Ning, and Michael K. Reiter. 2012. 高效、抗妥协且追加唯一的密码学方案用于安全审计日志. In *Proceedings of the International Conference on Financial Cryptography and Data Security (FC)*.

[110] Wei You, Peiyuan Zong, Kai Chen, XiaoFeng Wang, Xiaojing Liao, Pan Bian, and Bin Liang. 2017. SemFuzz: 基于语义的自动生成概念验证漏洞利用. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2139–2154.

[111] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. QSYM: 一种适用于混合模糊测试的实用并行执行引擎. In *27th USENIX Security Symposium (USENIX Security 18)*. 745–761.

[112] Michal Zalewski. 2017. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl (2017).

[113] Andreas Zeller and Ralf Hildebrandt. 2002. 简化并隔离故障引发输入. *IEEE Transactions on Software Engineering* 28, 2 (2002), 183–200.

### 示例根因报告（CVE-2018-12326）

**跟踪:**
- `openhost +0x2a4` 在 `ntpq` 中 (0xbae4)
- `openhost +0x218` 在 `ntpq` 中 (0xba58)
- `openhost +0x3bc` 在 `ntpq` 中 (0xbbfc)
- `__stack_chk_fail +0x0`

**触发了 bug**

**分析退出**

**归咎于:**
- `openhost +0x2dd` 在 `ntpq` 中 (0xbb1d)

**建议:**
- 在 `openhost +0x218` 处添加 `[argv[232] == ']']`

**漏洞挂钩详情:**
- **哈希:** 1cfad
- **地址:**
  - `0x55857b000028` => `__stack_chk_fail +0x0`
  - `0x55857a27dc01` => `openhost +0x3c1`

### 手动验证的用于二进制恢复的API

| 库            | 函数数 | 变量数 | 指针匹配 |
|---------------|--------|--------|----------|
| libpng        | 71     | 183    | 是       |
| libz          | 11     | 14     | 是       |
| glib          | 125    | 283    | 是       |
| libc          | 22     | 29     | 是       |
| libbabl       | 70     | 163    | 是       |
| libx11        | 5      | 247    | 是       |
| libjpeg-turbo | 25     | 15     | 是       |
| libcyrus-sasl | 1      | 3      | 是       |
| libpoppler    | 3      | 7      | 是       |
| libgegl       | 33     | 52     | 是       |
| libghostpdl   | 29     | 47     | 是       |
| libgimp       | 36     | 50     | 是       |
| libgtk        | 21     | 41     | 是       |
| libkeyutils   | 4      | 8      | 是       |
| libidn2       | 1      | 2      | 是       |
| libXpm        | 5      | 18     | 是       |
| libopenjpeg   | 22     | 40     | 是       |
| **总计**      | 484    | 1,202  |          |

### 算法3: 获取计算VEX IR临时变量的寄存器和地址的污点算法

1. 输入: 从最后执行的VEX IR语句开始。
2. 初始要污点的临时变量 `Tmp n`。
3. 初始化集合 `𝐴` 和 `𝑅` 为空集。
4. 初始化集合 `𝑇` 为 `{𝑛}`。
5. 对每个语句 `𝑠` 进行以下操作：
   - 如果 `Type(s)` 为 `Put` 且 `Type(s.data)` 为 `RdTmp`，则将 `𝑠.𝑑𝑎𝑡𝑎.𝑡𝑚𝑝` 添加到 `𝑇` 中。
   - 如果 `Type(s)` 为 `WrTmp` 且 `𝑠.𝑡𝑚𝑝` 在 `𝑇` 中，则对 `𝑠.𝑑𝑎𝑡𝑎.𝑎𝑟𝑔𝑠` 中的每个参数 `𝑎` 进行以下操作：
     - 如果 `Type(a)` 为 `RdTmp`，则将 `𝑎.𝑡𝑚𝑝` 添加到 `𝑇` 中。
     - 如果 `Type(a)` 为 `Get`，则将 `𝑎.𝑟𝑒𝑔𝑖𝑠𝑡𝑒𝑟` 添加到 `𝑅` 中。
     - 如果 `Type(a)` 为 `Load`，则将 `EvalTmp(a.address)` 添加到 `𝐴` 中。

### 算法1: 从VEX IRSB `𝐼` 中获取所有内存读写操作

1. 初始化集合 `𝐴` 和 `𝑇` 为空集。
2. 对每个指令 `𝑖` 进行以下操作：
   - 如果 `Type(i)` 为 `Store` 且 `Type(i.addr)` 为 `Const`，则将 `𝑖.𝑎𝑑𝑑𝑟` 添加到 `𝐴` 中。
   - 否则，将 `𝑖.𝑎𝑑𝑑𝑟` 添加到 `𝑇` 中。
   - 如果 `Type(i)` 为 `WrTmp` 且 `Type(i.data)` 为 `Load`，则：
     - 如果 `Type(i.data.addr)` 为 `Const`，则将 `𝑖.𝑑𝑎𝑡𝑎.𝑎𝑑𝑑𝑟` 添加到 `𝐴` 中。
     - 否则，将 `𝑖.𝑑𝑎𝑡𝑎.𝑎𝑑𝑑𝑟` 添加到 `𝑇` 中。
3. 对每个临时变量 `𝑡` 进行以下操作：
   - 将 `EvalTmp(S, t)` 的结果添加到 `𝐴` 中。

### 算法2: 检测状态序列 `𝑆` 中的循环步进行为

1. 初始化 `𝑅` 为 `False`，`𝐼` 为空集。
2. 对每个状态 `𝑠` 进行以下操作：
   - 对 `𝑠.𝑖𝑟𝑠𝑏.𝑠𝑡𝑎𝑡𝑒𝑚𝑒𝑛𝑡𝑠` 中的每个指令 `𝑖` 进行以下操作：
     - 如果 `IsTmpStore(𝑖)` 为真，则将 `𝑖.𝑎𝑑𝑑𝑟.𝑡𝑚𝑝` 添加到 `𝐼[𝑖.𝑎𝑑𝑑𝑟]` 中。
3. 对 `𝐼` 中的每个地址 `𝑎` 进行以下操作：
   - 计算 `𝑙 = 𝐼[𝑎].size`。
   - 如果 `𝑙 > 1` 且 `𝐼[𝑎][0] ≥ 𝐼[𝑎][1] ≥ ... ≥ 𝐼[𝑎][𝑙]` 或 `𝐼[𝑎][0] ≤ 𝐼[𝑎][1] ≤ ... ≤ 𝐼[𝑎][𝑙]`，则将 `𝑅` 设置为 `True`。

---

希望这些优化能帮助您更好地理解和使用这些信息。如果有任何进一步的需求，请随时告知。