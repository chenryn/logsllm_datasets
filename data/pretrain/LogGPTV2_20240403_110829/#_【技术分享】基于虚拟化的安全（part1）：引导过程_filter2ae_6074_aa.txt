# 【技术分享】基于虚拟化的安全（第一部分）：引导过程

## 译文声明
本文为翻译文章，原文来源：[blog.amossys.fr](http://blog.amossys.fr)。译文仅供参考，具体内容及含义以原文为准。
- 翻译者：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 0x00 前言
本文是关于基于虚拟化的安全和设备保护功能系列文章的一部分，旨在从技术角度深入探讨这些功能，以便更好地理解其工作原理。本篇将重点介绍系统引导过程，涵盖从 Windows Bootloader 到 VTL0 启动的全过程。

## 0x01 基于虚拟化的安全
基于虚拟化的安全（VBS）是微软在 Windows 10 和 Windows Server 2016 中引入的主要安全特性之一。例如，DeviceGuard 和 CredentialGuard 都依赖于它。DeviceGuard 允许系统阻止任何不受信任的程序运行，而 CredentialGuard 则通过隔离 lsass.exe 进程来防止类似 Mimikatz 工具读取内存中的密码。

VBS 的核心思想是利用硬件虚拟化技术（如 Intel VT-x），在两个虚拟机（VM）之间实现强隔离，并可能在未来扩展更多功能。这些技术允许虚拟机管理器（VMM）使用扩展页表（EPT）对物理页设置不同的权限。具体来说，一个 VM 可以在其页表入口（PTE）中设置某个物理页为可写（+W），而 VMM 可以通过在 EPT 上设置适当的权限来授权或阻止这种行为。

VBS 依赖于 Hyper-V 技术，该技术能够生成不同虚拟信任等级（VTL）的虚拟机。Hyper-V 包含一个 hypervisor，并且任何操作系统，甚至主操作系统，都包含在 VM 中。这个主操作系统（Windows）被认为是根 VM，Hyper-V 信任它并接受来自它的管理命令。其他 VM 可能是“开明的”，并向 Hyper-V 发送受限消息以进行自我管理。

VTL 是有序号的，编号越高表示越受信任。目前有两个 VTL：
1. VTL0：普通环境，包含标准的 Windows 操作系统。
2. VTL1：安全环境，包含一个微内核和称为 trustlet 的安全应用程序。

### CredentialGuard 安全机制
CredentialGuard 使用这项技术在 VTL1 trustlet（lsaiso.exe，上图中的“Isolated LSA”）中隔离关键的 lsass.exe 进程，即使 VTL0 内核也无法访问其内存。只有消息可以从 VTL0 转发到隔离的进程，从而有效阻止了像 Mimikatz 这样的密码和哈希收集工具。

### DeviceGuard 安全机制
DeviceGuard 使 VTL0 内核地址空间中的 W^X 内存缓解（即物理页不能同时具有可执行和可写权限），并接受包含授权代码签名者的策略。如果 VTL0 内核希望使一个物理页可执行，必须请求 VTL1 来更改（图中的“HVCI”），后者会根据策略校验签名。对于用户模式代码，这不起作用，只有 VTL0 内核才会请求签名验证。策略在启动时加载，之后不能修改，除非强制用户重启以加载新策略。

策略也是被签名的：在这种情况下，授权签名者在 UEFI 变量中设置，新的策略将校验此签名者。UEFI 变量设置 Setup 和 Boot 标志，意味着在启动后它们无法被访问和修改。要清除这些变量，本地用户必须使用自定义的微软 EFI bootloader 重启，并在输入密码后移除它们。

因此，VBS 强烈依赖于 SecureBoot。引导加载器的完整性必须被校验，因为它负责加载策略、Hyper-V 和 VTL1 等等。

如果你对设备保护的细节感兴趣，可以阅读这篇 MSDN 文章：[https://blogs.technet.microsoft.com/ash/2016/03/02/windows-10-device-guard-and-credential-guard-demystified/](https://blogs.technet.microsoft.com/ash/2016/03/02/windows-10-device-guard-and-credential-guard-demystified/)。我们也推荐你观看 Alex Ionescu 和 Rafal Wojtczuk 在 BlackHat 2015/2016 上的演讲视频，这对理解 VBS 有很大帮助：[https://www.youtube.com/watch?v=_646Gmr_uo0](https://www.youtube.com/watch?v=_646Gmr_uo0)。

本文将涵盖系统引导过程，从 Windows Bootloader 到 VTL0 启动。为了分析 VBS 在引导过程中如何初始化自身，以下是一些已逆向工程的 Windows 10 1607 文件：
- Bootmgr.efi：EFI 引导加载器（一小部分）
- Winload.efi：EFI Windows 加载器
- Hvix.exe：Hyper-V（相当小的一部分）
- Ntoskrnl.exe：NTOS 内核
- Securekernel.exe：安全内核
- Ci.dll：VTL0 代码完整性
- Skci.dll：VTL1 代码完整性

让我们深入探讨 VBS 引导过程，从 winload.efi 的执行开始，直到 ntoskrnl.exe 的入口点执行。

## 0x02 引导过程
引导过程可以总结为五个必要步骤：
1. **Bootmgr.efi**：第一个加载的组件，由 Secure Boot 验证并执行。
2. **Bootmgr.efi** 加载并校验 winload.efi。
3. **Winload** 加载并校验 VBS 配置。
4. **Winload** 加载并校验 Hyper-V 和 VTL0/VTL1 内核组件。
5. **Winload** 退出 EFI 模式，启动 Hyper-V。

### Bootmgr.efi
当系统开始引导时，bootmgr.efi 是第一个被加载并执行的组件。它的完整性和签名已经由 Secure Boot UEFI 代码校验过。为了识别过期的签名，DBX 数据库包含了过期的签名（截至 2016 年底，该数据库包含 71 个黑名单和未知的 SHA256 哈希值）。在 bootmgr.efi 的最后，执行将转到 winload.efi 的入口点：OslpMain/OslMain。

OslpMain 首先调用 OslpPrepareTarget，这是 winload.efi 的核心函数。它将初始化 hypervisor 和内核等。但在初始化之前，会使用 OslSetVsmPolicy 初始化 VBS 配置。

### VBS 策略加载
OslSetVsmPolicy 首先检查 VbsPolicyDisabled EFI 变量的值（参见下面的微软命名空间）。如果设置了该变量，则其值为 0，表示没有凭据保护配置将被加载。因此，这个 EFI 变量将在引导时禁用凭据保护（并且可以在 VTL0 ring3 调用设置权限）。如果没有设置，配置将从 SYSTEM 注册表的 hive 中加载，并通过 BlVsmSetSystemPolicy 调用执行，该调用将读取和更新 VbsPolicy EFI 变量。