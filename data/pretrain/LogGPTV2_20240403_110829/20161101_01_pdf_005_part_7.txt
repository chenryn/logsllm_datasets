 SESSION B:
 Lock tuple 2 waiting;
 A,B相互等待.
 死锁检测算法介绍
 src/backend/storage/lmgr/README
 死锁检测的时间间隔配置, deadlock_timeout 默认为1秒.
 锁等待超过这个配置后, 触发死锁检测算法.
 因为死锁检测比较耗资源, 所以这个时间视情况而定.
 PostgreSQL和Oracle死锁检测的区别例子.
 http://blog.163.com/digoal@126/blog/static/16387704020113811711716/
 规避死锁需要从业务逻辑的角度去规避, 避免发生这种交错持锁和交错等待的情况.
练习
 通过观察pg_locks了解各种SQL获取的锁对象类型和锁模式对应关系.
 验证锁冲突
监控数据库活动
 了解各种维度的统计信息的解读(table, index, database, replication, sql...), 锁信息解读, 磁盘使用, 数据库级别或事务级别或会话级别的活动
信息统计, 历史数据库活动统计报告
PostgreSQL 统计信息采集进程
 了解各种维度的统计信息的解读(table, index, database, replication, sql...), 锁信息解读, 磁盘使用, 数据库级别或事务级别或会话级别的活动
信息统计, 历史数据库活动统计报告
 PostgreSQL 用于收集统计信息的进程
 stats collector process "src/backend/postmaster/pgstat.c"
 PostgreSQL 统计信息的存放地 (启动时, 读入已存在的统计文件, 或初始化0. 数据库运行过程中存储在内存和temp文件; 数据库关闭时保存
到非易失存储)
 启动时 : shared buffer -> "src/backend/postmaster/pgstat.c" -> PgstatCollectorMain -> pgstat_read_statsfiles
 postgresql.conf - stats_temp_directory , 推荐配置在高速磁盘或内存文件系统中.
 数据库正常关闭时会把统计信息从tmp目录拷贝到$PGDATA/pg_stat目录中, 确保统计信息不会丢失. -> pgstat_write_statsfiles(true, true);
 统计信息的收集维度配置
 track_activities (boolean) -- 收集SQL执行开始时间以及SQL语句的内容. 默认打开.
 track_activity_query_size (integer) -- 指定统计信息中允许存储的SQL长度, 超出长度的SQL被截断. 默认1024. pg_stat_activity.query
 track_counts (boolean) -- 收集数据库的活动信息(如表新增的行数, 删除的行数等), autovacuum进程需要用到这部分信息.
 track_io_timing (boolean) -- 收集IO操作的时间开销, 因为需要不断的调用系统当前时间, 所以某些系统中会带来极大的负面影响.
 被用于pg_stat_database, pg_stat_statements 显示IO时间. (使用pg_test_timing测试时间统计的影响)
 track_functions (enum) -- 跟踪函数的调用次数和时间开销. 可配置pl(仅包括plpgsql函数), all(包括SQL,C,plpgsql函数), off
 update_process_title (boolean) -- 每次服务端process接收到新的SQL时更新command状态. (ps命令可见)
PostgreSQL 统计信息采集进程
 log_statement_stats (boolean) -- 类似unix的getrusage()操作系统函数, 用于收集SQL语句级的资源开销统计. 包含以下3种层面的
全部.
 因此配置了log_statement_stats就不需要配置以下选项.
 log_parser_stats (boolean) -- 同上, 但是只包含SQL parser部分的资源开销统计.
 log_planner_stats (boolean) -- 同上, 但是只包含SQL planner部分的资源开销统计.
 log_executor_stats (boolean) -- 同上, 但是只包含SQL executor部分的资源开销统计.
 查看统计信息的视图
 pg_stat和pg_statio开头的系统视图
 http://www.postgresql.org/docs/9.3/static/monitoring-stats.html
 查看或重置统计信息的函数
PostgreSQL 统计信息采集进程
 在事务中获取统计信息时, 仅获取一次, 除非使用pg_stat_clear_snapshot()丢弃这个镜像.
 SESSION A :
 digoal=# begin;
 BEGIN
 digoal=# select last_analyze from pg_stat_all_tables where relname ='test';
 last_analyze
 2014-02-20 14:04:32.716723+08
 SESSION B :
 digoal=# analyze test;
 SESSION A :
 digoal=# select last_analyze from pg_stat_all_tables where relname ='test';
 last_analyze
 2014-02-20 14:04:32.716723+08
 digoal=# select pg_stat_clear_snapshot();
 digoal=# select last_analyze from pg_stat_all_tables where relname ='test';
 last_analyze
 ------------------------------
 2014-02-20 15:53:09.52539+08
 (1 row)
PostgreSQL 统计信息采集进程
 查看或重置统计信息的函数
 查看会话 | 服务端进程级别统计信息的函数, 根据进程ID查询统计信息.
监控数据库活动
 使用举例1, 语句级的资源开销统计. 参考 man getrusage, src/backend/tcop/postgres.c
 digoal=# set client_min_messages=log;
 SET
 digoal=# set log_statement_stats=on;
 SET
 digoal=# select count(*) from iso_test;
 LOG: QUERY STATISTICS
 DETAIL: ! system usage stats:
 ! 0.001057 elapsed 0.000000 user 0.001000 system sec
 ! [0.001999 user 0.001999 sys total]
 ! 0/0 [0/0] filesystem blocks in/out
 ! 0/226 [0/1050] page faults/reclaims, 0 [0] swaps
 ! 0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
 ! 0/0 [6/0] voluntary/involuntary context switches
 count
 -------
 1000
 (1 row)
监控数据库活动
 struct rusage {
 struct timeval ru_utime; /* user time used */
 struct timeval ru_stime; /* system time used */
 long ru_maxrss; /* maximum resident set size */
 long ru_ixrss; /* integral shared memory size */
 long ru_idrss; /* integral unshared data size */
 long ru_isrss; /* integral unshared stack size */
 long ru_minflt; /* page reclaims */
 long ru_majflt; /* page faults */
 long ru_nswap; /* swaps */
 long ru_inblock; /* block input operations */
 long ru_oublock; /* block output operations */
 long ru_msgsnd; /* messages sent */
 long ru_msgrcv; /* messages received */
 long ru_nsignals; /* signals received */
 long ru_nvcsw; /* voluntary context switches */
 long ru_nivcsw; /* involuntary context switches */
 };
监控数据库活动
 src/backend/tcop/postgres.c
 ShowUsage(const char *title)
 * the only stats we don't show here are for memory usage -- i can't
 * figure out how to interpret the relevant fields in the rusage struct,
 * and they change names across o/s platforms, anyway. if you can figure
 * out what the entries mean, you can somehow extract resident set size,
 * shared text size, and unshared data and stack sizes.
 appendStringInfoString(&str, "! system usage stats:\n");
 appendStringInfo(&str,
 "!\t%ld.%06ld elapsed %ld.%06ld user %ld.%06ld system sec\n",
 (long) (elapse_t.tv_sec - Save_t.tv_sec),
 (long) (elapse_t.tv_usec - Save_t.tv_usec),
 (long) (r.ru_utime.tv_sec - Save_r.ru_utime.tv_sec),
 (long) (r.ru_utime.tv_usec - Save_r.ru_utime.tv_usec),
 (long) (r.ru_stime.tv_sec - Save_r.ru_stime.tv_sec),
 (long) (r.ru_stime.tv_usec - Save_r.ru_stime.tv_usec));
 appendStringInfo(&str,
 "!\t[%ld.%06ld user %ld.%06ld sys total]\n",
监控数据库活动
 (long) user.tv_sec,
 (long) user.tv_usec,
 (long) sys.tv_sec,
 (long) sys.tv_usec);
 #if defined(HAVE_GETRUSAGE)
 appendStringInfo(&str,
 "!\t%ld/%ld [%ld/%ld] filesystem blocks in/out\n",
 r.ru_inblock - Save_r.ru_inblock,
 /* they only drink coffee at dec */
 r.ru_oublock - Save_r.ru_oublock,
 r.ru_inblock, r.ru_oublock);
 appendStringInfo(&str,
 "!\t%ld/%ld [%ld/%ld] page faults/reclaims, %ld [%ld] swaps\n",
 r.ru_majflt - Save_r.ru_majflt,
 r.ru_minflt - Save_r.ru_minflt,
 r.ru_majflt, r.ru_minflt,
 r.ru_nswap - Save_r.ru_nswap,
 r.ru_nswap);
监控数据库活动
 appendStringInfo(&str,
 "!\t%ld [%ld] signals rcvd, %ld/%ld [%ld/%ld] messages rcvd/sent\n",
 r.ru_nsignals - Save_r.ru_nsignals,
 r.ru_nsignals,
 r.ru_msgrcv - Save_r.ru_msgrcv,
 r.ru_msgsnd - Save_r.ru_msgsnd,
 r.ru_msgrcv, r.ru_msgsnd);
 appendStringInfo(&str,
 "!\t%ld/%ld [%ld/%ld] voluntary/involuntary context switches\n",
 r.ru_nvcsw - Save_r.ru_nvcsw,
 r.ru_nivcsw - Save_r.ru_nivcsw,
 r.ru_nvcsw, r.ru_nivcsw);
 #endif /* HAVE_GETRUSAGE */
监控数据库活动
 使用举例2, 查看当前活动的会话信息(会话的启动时间, 事务的启动时间, 当前正在执行的SQL等)
 digoal=# select * from pg_stat_activity where state<>'idle' ; -- and pid<>pg_backend_pid();
 -[ RECORD 1 ]----+----------------------------------------------------
 datid | 16384
 datname | digoal
 pid | 22164
 usesysid | 10
 usename | postgres
 application_name | psql
 client_addr |
 client_hostname |
 client_port | -1
 backend_start | 2013-12-17 15:35:09.22653+08
 xact_start | 2013-12-17 15:36:35.868056+08
 query_start | 2013-12-17 15:36:35.868056+08
 state_change | 2013-12-17 15:36:35.868061+08
 waiting | f
 state | active
 query | select * from pg_stat_activity where state<>'idle';
监控数据库活动
 使用举例3, 查看数据库的SQL级别统计信息, 按耗时倒序输出, 调用次数倒序输出, 单次SQL执行时间倒序输出.
 digoal=# create extension pg_stat_statements;
 CREATE EXTENSION
 digoal=# \q
 pg93@db-172-16-3-150-> cd $PGDATA
 pg93@db-172-16-3-150-> vi postgresql.conf
 shared_preload_libraries = 'pg_stat_statements'
 pg_stat_statements.max = 1000
 pg_stat_statements.track = all
 pg93@db-172-16-3-150-> pg_ctl restart -m fast
 按SQL总耗时倒序输出
监控数据库活动
 digoal=# select * from pg_stat_statements order by total_time desc limit 1 offset 0;
 -[ RECORD 1 ]-------+--------------------------------------------------
 userid | 10
 dbid | 16384
 query | insert into kuaidi_log1 values ($1, now(), ?, ?);
 calls | 100000000
 total_time | 1361916.61973994
 rows | 100000000
 shared_blks_hit | 102272487
 shared_blks_read | 1136660
 shared_blks_dirtied | 1136379
 shared_blks_written | 9385
 local_blks_hit | 0
 local_blks_read | 0
 local_blks_dirtied | 0
 local_blks_written | 0
 temp_blks_read | 0
 temp_blks_written | 0
 blk_read_time | 0 -- 以下两项需要开启trace_io_timing
 blk_write_time | 0
监控数据库活动
 调用次数倒序输出
 select * from pg_stat_statements order by calls desc limit 1 offset 0;
 单次SQL执行时间倒序输出
 select * from pg_stat_statements order by total_time/calls desc limit 1 offset 0;
 按shared buffer "未命中块读" 倒序输出
 select * from pg_stat_statements order by shared_blks_read desc limit 1 offset 0;
监控数据库活动
 每天以邮件形式发送CPU time TOP 20的SQL统计结果
 vi /home/postgres/script/report.sh
 #!/bin/bash