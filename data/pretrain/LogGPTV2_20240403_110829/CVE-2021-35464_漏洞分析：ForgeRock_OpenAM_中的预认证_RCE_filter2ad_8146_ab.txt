         * @return
         * @throws Exception
         * @throws IOException
         */
        private static Person DeserializePerson() throws Exception, IOException {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(
                    new File("D:/Person.txt")));
            Person person = (Person) ois.readObject();
            System.out.println("Person对象反序列化成功！");
            return person;
        }
    }
我们看看序列化出来是什么？
可以看到是一串16进制，以`ACED`为开头，实际上所有的序列化出来的都是这样。其中`serialVersionUID`
是序列化的版本号，凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量。这个字段的添加可以使得我们对新的类的增加修改比较方便，否则编译会抛出错误。
###  Java框架
简而言之，为了方便开发，也为了减少技术整合的问题，`Java`框架就诞生了。它可以被开发者定制，其他开发者可以基于它完成复用和重构。比如我们使用`jQuery`开发，如果使用了较多的第三方`js`，多个页面可能用了同一个`js`，可能所有的页面都引入一遍，如果`js`发生了修改，还需要每个页面再去修改，很麻烦，而且使得页面打开速度，维护难度都提高了。如果使用`Vue`配合`Webpack`构建工具，在入口文件引入需要重复的插件，我们就可以在所有组件中使用这个插件，后期发生变动，也只需要修改这个入口文件就可以了。
常见的`java`框架有：
`WAF`：
全称：`WEB APPLICATION FRAMEWORK`  
主要应用方面：`EJB`层，（`WEB`层也有，但是比较弱）。  
主要应用技术：`EJB`等  
出处： `http://java.sun.com/blueprints/code/index.html`  
简述：这是`SUN`在展示`J2EE`平台时所用的例子`PetStore`(宠物商店系统)里面的框架。是SUN蓝皮书例子程序中提出的应用框架。它实现了`MVC`和其他良好的设计模式。`SUN`的网站上有技术资料，最好下载`PetStore`来研究，`WEBLOGIC`里自带此系统，源码在`bea\weblogic700\samples\server\src\petstore`。这是学习了解`J2EE`的首选框架。
`Struts`:
主要应用方面：`WEB`层。  
主要应用技术：`JSP`,`TagLib`,`JavaBean`,`XML`等  
出处： `http://jakarta.apache.org/struts/index.html`  
简述：这是`APACHE`的开源项目，目前应用很广泛。基于`MVC`模式，结构很好，基于`JSP`。`Jbuilder8`里已经集成了`STRUTS1.02`的制作。
`WAF+STRUTS`结合的例子：
`WEB`层用`STRUTS`，`EJB`层用`WAF`：  
`JSP(TagLib)——>ActionForm——>Action ——>Event——>EJBAction——>EJB——>DAO——>Database
JSP(TagLib)(forward)<——Action <——EventResponse<——`
`Turbine`：
主要应用方面：`WEB`层。  
主要应用技术：`servlet`等  
出处：`http://jakarta.apache.org/turbine/index.html`  
简述：这是`APACHE`的开源项目。基于`SERVLET`。据说速度比较快，基于`service`（`pluggable
implementation`可插拔的执行组件）的方式提供各种服务。
`COCOON`：
主要应用方面：`WEB`层。  
主要应用技术：`XML`，`XSP`，`servlet`等  
出处： `http://cocoon.apache.org/2.0/`  
简述：这是`APACHE`的一个开源项目。基于`XML`，基于`XSP`（通俗地说，`XSP`是在`XML`静态文档中加入`Java`程序段后形成的动态`XML`文档。）。特点是可以与多种数据源交互，包括文件系统，数据库，`LDAP`，`XML`资源库，网络数据源等。
`ECHO`：
主要应用方面：`WEB`层。  
主要应用技术：`servlet`等  
出处： `http://www.nextapp.com/products/echo/`  
简述：`nextapp`公司的一个开源项目。基于`SERVLET`。页面可以做的很漂亮，结合`echopoint`，可以作出很多图形效果（里面用了`jfreechart`包）。使用`SWING`的思想来作网页，把`HTML`当作`JAVA`的类来做。但是大量使用`Session`，页面分帧（`Frame`）很多,系统资源消耗很大。
`JATO`：
全称：`SUN ONE Application Framework`  
主要应用方面：`WEB`层。  
主要应用技术：`JSP`,`TagLib`,`JavaBean`等  
出处： `http://www.sun.com/`  
简述：这是`SUN`推出的一个商业性框架，一看名字就知道是结合`SUN
ONE`的平台推出的。`JATO2.0`比较简单，适宜分析，使用了`JSP＋TagLib+JavaBean`。如他的`DOC`所说`JATO`是适合用在小的`WEB`应用里。
`TCF`：
全称：`Thin-Client Framework`  
主要应用方面：`JAVA GUI`。  
主要应用技术：`JAVA application`等
而分层开发下的常见`JavaEE`框架有：
`Mybatis`：解决数据持久化
`Spring MVC`：解决WEB层的MVC框架
`Spring`：解决技术整合问题的框架（`V&NCTF`有出过相关题目）
了解这些框架能够既能帮我们尽快上手一个项目，也能够在面对安全审计任务时更快确定问题。
而今天要讲的分析的漏洞就存在于`JATO`框架中。
## 0x02 源码分析
组件 | 影响版本 | 安全版本  
---|---|---  
ForgeRock AM | 6.0.0.x | 7  
ForgeRock AM | 6.5.0.x | 7  
ForgeRock AM | 6.5.1 | 7  
ForgeRock AM | 6.5.2.x | 7  
ForgeRock AM | 6.5.3 | 7  
这个openam.war文件怎么得到呢？两种方法。
第一种，docker拉一个环境。
    $ docker run -h localhost -p 7080:8080 --name openam openidentityplatform/openam
然后拉起来从docker cp openam://usr/local/tomcat/webapps/openam.war ./ 提取出openam.war。
第二种，可以`ForgeRock`官网下载相关固件，这里给出地址。顺便说个小tips，这个`ForgeRock`的邮箱可以选择`yeah.net`的`domain`。
`https://backstage.forgerock.com/downloads/get/familyId:am/productId:am/minorVersion:6.5/version:6.5.2.3/releaseType:full/distribution:war`
给出的是AM-6.5.2.3.war。
得到这个war后，解压WAR文件并反编译里面的所有JAR（库），以便我们查看源代码。
可以使用 Intellij IDEA 来处理 Java 代码，因为它提供了用于搜索和构建调用图的便捷方法。更重要的是，它可以帮助我们直接反编译，而且这个
Java 反编译器可以在其内置terminal调用。它就是java-decompiler.jar。 你可以在 Intellij IDEA 的
\plugins\java-decompiler\lib 下找到它。
对openam搜索，大概找到了330个jar。
可以使用两种方法反编译。