F ρ,Dρ is negligible (in ρ) for every
polynomial-time distinguisher Dρ that halts in time poly(ρ).
Now assume that adversary B is given access to the public
information associated with the key assignment of G and
is allowed to adaptively corrupt nodes from V . That is,
B obtains ki ← KA(vi), where vi ∈ V and can compute
h ← Fki (`) for arbitrary labels ` ∈ {0, 1}ρ. At some point,
B makes a single query to a challenge oracle vc ← C(G),
where vc is a node of the graph not a descendant of any
corrupted nodes and is chosen by the oracle. After that,
B may corrupt more nodes that do not have the challenge
node vc among their descendants. At some point B outputs
a key ˆk ∈ {0, 1}ρ and wins if ˆk = kc.
Proof. We construct an adversary AB0 that will distin-
guish between random and pseudo-random functions using
algorithm B0. Instead of using public information associated
with the graph G = (O, V, E) constructed according to the
above key assignment scheme, in this experiment public in-
formation is constructed in such a way that with 50% prob-
ability the key assignment is performed in the usual way,
and with 50% probability one of the functions Fkc (vc ∈ V )
is replaced with a random function g. AB0 obtains access
to the same oracle C(G) as B0 did, and when querying this
oracle obtains a challenge node vc along with the keys of
the children of vc and siblings of ancestors of vc (let this set
of keys be denoted as Kc so that {vc,Kc} = C(G)). A0
B is
then asked to decide whether Fkc or g was used in the key
assignment. It can be constructed as the following:
Adversary AB0
{vc,Kc} = C(G)
Run adversary B0 replying to its oracle query with {vc,Kc}
When B0 outputs a key ˆk, compute Fˆk(lj) where vj is one
of the children nodes of vc
if yc,j = kj − Fˆk(lj ) mod 2ρ, then return 1, else return 0
In the above algorithm, if B0 guesses the key correctly,
AB0 assumes that the PRF was used. If B0 doesn’t return
the correct key, AB0 bets on the random function. Now the
prf-advantage of AB0 is:
1. Delete the edges touching vi one by one, using the
above procedure for edge-deletions.
2. Now that vi has no edges touching it, removing it is
trivial.
Advprf
B0
KA,AB0 = P r[1 = AC(G)
|Fkc was used]
− P r[1 = AC(G)
|g was used]
1
≥ Advkr
KA,B0 −
2ρ
B0
because if Fkc was used, AB0 will guess correctly at least
with the same probability as B0, and if g was used, the
probability that Fˆk(lj) results in the same value as g(lj) is
1
2ρ .
2
Proof of Theorem 2. Now the proof of security follows
directly from Lemma 1, which states that if an adversary
can break the scheme with non-negligible probability, it will
also be able to break the security of PRFs.
2
With only minimal changes to the scheme, security under
the key indistinguishability can be shown. We leave these
results to the full version of the paper.
5. EXTENSIONS
5.1 Dynamic Version
While section 4 described the base scheme without dy-
namic changes, in this section we show how with one simple
modiﬁcation we can perform all dynamic changes locally.
Modiﬁed private key Each vertex vi is assigned a ran-
dom private key ˆki in {0, 1}ρ. As before, an entity that
is assigned access levels V 0 ⊆ V is given a smartcard
with all keys for their access levels vj ∈ V 0. The ac-
tual key used for this access level is now ki = H(ˆki, `i).
Note that by changing a vertex’s label one can change
its key.
The rest of the scheme remains unchanged. Now we describe
how to handle dynamic changes.
Insertion of an edge. Suppose the edge (vi, vj ) is inserted
into G. Then we simply add yi,j = kj − H(ki, `j) mod 2ρ to
the description of G by attaching it to the edge (vi, vj ).
Deletion of an edge. Deleting an edge is trivial, but the
diﬃculty is in preventing ex-member access. Suppose the
edge (vi, vj ) is deleted from G. Then the following updates
are done: for each node vt ∈ Desc(vj , G), perform:
1. Change the label of vt, call it `0
t; note that this changes
the key for vt to H(ˆkt, `0
t).
2. For each edge (vp, vt) where vp ∈ P red(vt), update the
value of yp,t according to the new key.
If a new node u is inserted,
Insertion of a new node.
together with new edges into it and new edges out of it,
then we do the following:
1. Create the node u without any edges touching it, which
is trivial to do since all it requires is generation of a
random key ku for that node.
2. Add the edges one by one, using each time the above
procedure for edge-insertions.
Deletion of a node. If a node vi is deleted, together with
all the edges that touch it, we need to perform two steps:
Key replacement. Key replacement for a node vi is per-
formed as the following:
1. Update the node’s key ˆki with a new key ˆk0
i.
i = H(ˆk0
2. Update the vertex’s access key to k0
i, `i).
3. Update edges (vj , vi) where vj ∈ P red(vi) with yj,i
4. Update edges (vi, vl) where vl ∈ Succ(vi) with yi, l
computed according to the new key ˆk0
i.
computed according to the new key ˆk0
i.
No other node is aﬀected.
User revocation. To the best of our knowledge, no prior
work on hierarchical access control considered key manage-
ment at the level of access classes and at the same time
at the level of individual users. For instance, among the
schemes closest to ours, [54] considers only a hierarchy of
security classes without mentioning individual users, and
[30] considers a hierarchy of users without grouping them
into classes. However, it is important to group users with
the same privileges together and on the other hand permit
revocation of individual users.
In our scheme, revoking a
single user can be done with two approaches:
1. Recard every user at that user’s access level(s) and
for all descendants of this access level(s) perform the
operation described for edge deletion (i.e., change all
keys by changing the labels and then update the public
information). Note that the descendants do not have
to rekeyed.
2. Make the graph such that each user is represented by
a single node in the graph with edges from this node
to each of that user’s access levels. By creating such
a graph, removing a user is as easy as removing this
node, and thus does not require rekeying.
5.2 Other Access Models
Traditionally, the standard notion of permission inheri-
tance in access control is that permissions are transfered
“up” the access graph G.
In other words, any vertex in
Anc(vi, G) has a superset of the permissions held by vi.
Crampton [13] suggested other access models, including:
1. Permissions that are transfered down the access graph.
For these permissions, any node in Desc(vi, G) has a
superset of the permissions held by vi.
2. Permissions that are transfered either up or down the
graph but only to a limited depth.
In this section, we discuss how to extend our scheme to
allow such permissions. We can achieve upward and down-
ward inheritance with only two keys per node. Also, we
can achieve all of these permissions with four keys at each
node for a special class of access graphs that are “layered”
directed acyclic graphs (DAGs) (we deﬁne this later) when
there is no collusion.
5.2.1 Downward inheritance
To handle such queries, we construct the reverse of the
graph G = (V, E, O), which is GR = (V, E 0, O) where for
each edge (vi, vj ) ∈ E there is an edge (vj , vi) ∈ E 0. Then
we use our base scheme for both G and GR, which results
in each node having two keys, but the scheme now supports
permissions that are inherited upwards or downwards.
5.2.2 Limited depth permission inheritance
We say that an access graph is layered if the nodes can be
partitioned into sets, denoted by S1, S2, . . . , Sr, where for
all edges (vi, vj ) in the access graph it holds that if vi ∈ Sm
then vj ∈ Sm+1. We claim that many interesting access
graphs are already layered, but in general any DAG can be
made layered by adding enough virtual nodes.
Given such a layering, we can then support limited depth
permissions. This is done by creating another graph which
is a linear list that has a node for each layer, and there is
an edge from each layer to the next layer. The reverse of
this graph is also constructed, and these graphs are assigned
keys according to our scheme. A node is given the keys
corresponding to its layers. Clearly, with such a technique
we can support permission requirements that permit access
to all nodes higher than some level and to all nodes lower
than some level.
We now show how to utilize these four key assignments to
support permission sets of the form “all ancestors of some
node vi that are lower than a speciﬁc layer L” (an analogous
technique can be used for permission sets of the form “all
descendants of vi above some speciﬁc layer”). Suppose the
key for the permission requirement to access “all ancestors
of node vi” is ki and the key for permission requirement to
access “all nodes lower than layer L” is kL. Then we es-
tablish a key for both permission requirements by setting
the key to H(ki, kL). Clearly, only nodes that are an an-
cestor of vi can generate ki and only nodes lower than level
L can generate kL, so the only nodes that could generate
both keys would be an ancestor of ki AND below level L,
assuming that there is no collusion.
6.
IMPROVING EFFICIENCY
As the scheme described in the previous sections supports
arbitrary graphs, it is possible to add edges to an access
structure in order to reduce the path length between two
nodes. In this section we consider how to add edges to trees
so that the distance between any two nodes is small. This is
essential for deep hierarchies since the key derivation time
in our base scheme is the depth of the access graph in the
worst case. In the remainder of this section we assume that
the access structure is a tree with n nodes. Sections 6.1–
6.3 describe our ﬁrst approach that achieves O(log log n)
hash functions for key derivation with O(n) public space,
and section 6.4 describes an alternative approach that re-
quires only 3 hash function applications for key derivation
with O(n log log n) public storage space. Then section 6.5
addresses dynamic behavior and section 6.6 covers more gen-
eral hierarchies.
6.1 A Preliminary Scheme
First we review some background material that is needed
for our scheme. A centroid of an n-node tree T is a node
whose removal from T leaves no connected component of
size greater than n/2 [28]. The tree T does not need to
be binary or even have constant-degree nodes.
It is easy
to prove that there are at most two centroids, and if there
are two centroids, then they must be adjacent. However,
if the tree is rooted and has two centroids, we can break
the tie by arbitrarily selecting the parent among the two
centroids. Thus we shall refer to “the” centroid of a rooted
tree. Now we are ready to describe the preliminary scheme
for computing the edges that we add to the tree and to which
we refer as shortcut edges.
Input: The tree T .
Output: A set of O(n log n) shortcut edges such that there
is a path of length less than log n between any ancestor-
descendant pair.
Algorithm Steps: For every node v of T , do the following:
1. Let Tv be the subtree of T rooted at v. Compute
the centroid of Tv (call it cv).
2. Add a shortcut edge from v to cv (unless such a
tree edge already exists or v = cv).
3. Remove from Tv its subtree rooted at cv. Note
that the new Tv is now at most half its previous
size (and could in fact be empty if v = cv).
4. Repeat the above process for the new Tv until the
ﬁnal Tv is empty.
The number of shortcut edges leaving each v in the above
description is no more than log n because each addition of
a shortcut edge results in at least halving the size of Tv.
Therefore the total number of shortcut edges is no more
than n log n.
Now we show that the shortcut edges make it possible for
every ancestor v to reach any of its descendants w in a path
of no more than log n edges. When we trace the path from v
to w, we distinguish two cases, depending on whether w is in
the subtree of the centroid cv of Tv. The tracing algorithm
is as follows:
Case 1: w is in the subtree of the centroid cv of Tv. Then
if v 6= cv, we follow the edge from v to cv, and we
continue recursively down from cv.
If, on the other
hand, v = cv, then we follow the tree edge from v
to that child of v whose subtree contains w and we
continue recursively down from there.
Case 2: w is not in the subtree of cv in Tv. Then we recur-
sively continue down with a Tv that is “truncated” by
the (implicit) removal of Tcv from it (so it is now half
its previous size).
The fact that the path traced by the above approach consists
of no more than log n edges follows from the observation that
every time we follow an edge (whether it is a tree edge or
a shortcut edge), we end up at a node whose subtree is at
most half the size of the subtree we were at.
6.2 Improving the Time Complexity
Before describing the improved scheme, we need to re-
view the concept of centroid decomposition of a tree: If we
compute the centroid of a tree, then remove it, and recur-
sively repeat this process with the remaining trees (of size
no more than n/2 each), we obtain a decomposition of the
tree into what is called a “centroid decomposition”. Such a
decomposition can be easily computed in linear time (see,
for example, [21]).
Our improved scheme is based on doing a pre-processing
step of T that consists of carrying out what might be called
a “prematurely terminated centroid decomposition”. This is
similar to the above-described centroid decomposition, ex-
cept that we stop the recursion not when the tree becomes