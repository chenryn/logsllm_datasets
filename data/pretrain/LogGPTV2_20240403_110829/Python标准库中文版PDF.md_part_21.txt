last-modified = Thu, 30 Sep 1999 12:25:35 GMT
copied 30832 bytes from http://www.python.org
这个流对象提供了一些非标准的属性. headers 是一个 Message 对象(在
mimetools 模块中定义), url 是实际的 URL . 后者会根据服务器的重定向而更
新.
urlopen 函数实际上是一个辅助函数, 它会创建一个 FancyURLopener 类的实
例并调用它的 open 方法. 你也可以继承这个类来完成特殊的行为. 例如
Example 7-15 中的类会自动地在必要时登陆服务器.
7.6.0.2. Example 7-15. 用 urllib 模块实现自动身份验证
File: urllib-example-3.py
import urllib
class myURLOpener(urllib.FancyURLopener):
# read an URL, with automatic HTTP authentication
def setpasswd(self, user, passwd):
self._ _user = user
self._ _passwd = passwd
def prompt_user_passwd(self, host, realm):
return self._ _user, self._ _passwd
urlopener = myURLOpener()
urlopener.setpasswd("mulder", "trustno1")
fp = urlopener.open("http://www.secretlabs.com")
print fp.read()
7.7. urlparse 模块
urlparse 模块包含用于处理 URL 的函数, 可以在 URL 和平台特定的文件名间
相互转换. 如 Example 7-16 所示.
7.7.0.1. Example 7-16. 使用 urlparse 模块
File: urlparse-example-1.py
import urlparse
print urlparse.urlparse("http://host/path;params?query#fragment")
('http', 'host', '/path', 'params', 'query', 'fragment')
一个常见用途就是把 HTTP URL 分割为主机名和路径组件(一个 HTTP 请求会涉
及到主机名以及请求路径), 如 Example 7-17 所示.
7.7.0.2. Example 7-17. 使用 urlparse 模块处理 HTTP 定位器( HTTP
Locators )
File: urlparse-example-2.py
import urlparse
scheme, host, path, params, query, fragment =\
urlparse.urlparse("http://host/path;params?query#fragment")
if scheme == "http":
print "host", "=>", host
if params:
path = path + ";" + params
if query:
path = path + "?" + query
print "path", "=>", path
host => host
path => /path;params?query
Example 7-18 展示了如何使用 urlunparse 函数将各组成部分合并回一个
URL .
7.7.0.3. Example 7-18. 使用 urlparse 模块处理 HTTP 定位器( HTTP
Locators )
File: urlparse-example-3.py
import urlparse
scheme, host, path, params, query, fragment =\
urlparse.urlparse("http://host/path;params?query#fragment")
if scheme == "http":
print "host", "=>", host
print "path", "=>", urlparse.urlunparse(
(None, None, path, params, query, None)
)
host => host
path => /path;params?query
Example 7-19 使用 urljoin 函数将绝对路径和相对路径组合起来.
7.7.0.4. Example 7-19. 使用 urlparse 模块组合相对定位器
File: urlparse-example-4.py
import urlparse
base = "http://spam.egg/my/little/pony"
for path in "/index", "goldfish", "../black/cat":
print path, "=>", urlparse.urljoin(base, path)
/index => http://spam.egg/index
goldfish => http://spam.egg/my/little/goldfish
../black/cat => http://spam.egg/my/black/cat
7.8. cookie 模块
(2.0 中新增) 该模块为 HTTP 客户端和服务器提供了基本的 cookie 支持.
Example 7-20 展示了它的使用.
7.8.0.1. Example 7-20. 使用 cookie 模块
File: cookie-example-1.py
import Cookie
import os, time
cookie = Cookie.SimpleCookie()
cookie["user"] = "Mimi"
cookie["timestamp"] = time.time()
print cookie
# simulate CGI roundtrip
os.environ["HTTP_COOKIE"] = str(cookie)
print
cookie = Cookie.SmartCookie()
cookie.load(os.environ["HTTP_COOKIE"])
for key, item in cookie.items():
# dictionary items are "Morsel" instances
# use value attribute to get actual value
print key, repr(item.value)
Set-Cookie: timestamp=736513200;
Set-Cookie: user=Mimi;
user 'Mimi'
timestamp '736513200'
7.9. robotparser 模块
(2.0 中新增) robotparser 模块用来读取 robots.txt 文件, 该文件用于
Robot Exclusion Protocol (搜索机器人排除协议?
http://info.webcrawler.com/mak/projects/robots/robots.html ).
如果你实现的一个 HTTP 机器人会访问网路上的任意站点(并不只是你自己的站
点), 那么最好还是用该模块检查下你所做的一切是不是受欢迎的. Example
7-21 展示了该模块的使用.
7.9.0.1. Example 7-21. 使用 robotparser 模块
File: robotparser-example-1.py
import robotparser
r = robotparser.RobotFileParser()
r.set_url("http://www.python.org/robots.txt")
r.read()
if r.can_fetch("*", "/index.html"):
print "may fetch the home page"
if r.can_fetch("*", "/tim_one/index.html"):
print "may fetch the tim peters archive"
may fetch the home page
7.10. ftplib 模块
ftplib 模块包含了一个 File Transfer Protocol (FTP , 文件传输协议)客户
端的实现.
Example 7-22 展示了如何登陆并获得登陆目录的文件列表. 注意这里的文件列
表 (列目录操作)格式与服务器有关(一般和主机平台的列目录工具输出格式相
同, 例如 Unix 下的 ls 和 Windows/DOS 下的 dir ).
7.10.0.1. Example 7-22. 使用 ftplib 模块获得目录列表
File: ftplib-example-1.py
import ftplib
ftp = ftplib.FTP("www.python.org")
ftp.login("anonymous", "ftplib-example-1")
print ftp.dir()
ftp.quit()
total 34
drwxrwxr-x 11 root 4127 512 Sep 14 14:18 .
drwxrwxr-x 11 root 4127 512 Sep 14 14:18 ..
drwxrwxr-x 2 root 4127 512 Sep 13 15:18 RCS
lrwxrwxrwx 1 root bin 11 Jun 29 14:34 README ->
welcome.msg
drwxr-xr-x 3 root wheel 512 May 19 1998 bin
drwxr-sr-x 3 root 1400 512 Jun 9 1997 dev
drwxrwxr-- 2 root 4127 512 Feb 8 1998 dup
drwxr-xr-x 3 root wheel 512 May 19 1998 etc
...
下载文件很简单; 使用合适的 retr 函数即可. 注意当你下载文本文件时, 你
必须自己加上行结束符. Example 7-23 中使用了一个 lambda 表达式完成这项
工作.
7.10.0.2. Example 7-23. 使用 ftplib 模块下载文件
File: ftplib-example-2.py
import ftplib
import sys
def gettext(ftp, filename, outfile=None):
# fetch a text file
if outfile is None:
outfile = sys.stdout
# use a lambda to add newlines to the lines read from the server
ftp.retrlines("RETR " + filename, lambda s, w=outfile.write:
w(s+"\n"))
def getbinary(ftp, filename, outfile=None):
# fetch a binary file
if outfile is None:
outfile = sys.stdout
ftp.retrbinary("RETR " + filename, outfile.write)
ftp = ftplib.FTP("www.python.org")
ftp.login("anonymous", "ftplib-example-2")
gettext(ftp, "README")
getbinary(ftp, "welcome.msg")
WELCOME to python.org, the Python programming language home site.
You are number %N of %M allowed users. Ni!
Python Web site: http://www.python.org/
CONFUSED FTP CLIENT? Try begining your login password with '-' dash.
This turns off continuation messages that may be confusing your client.
...
最后, Example 7-24 将文件复制到 FTP 服务器上. 这个脚本使用文件扩展名来
判断文件是文本文件还是二进制文件.
7.10.0.3. Example 7-24. 使用 ftplib 模块上传文件
File: ftplib-example-3.py
import ftplib
import os
def upload(ftp, file):
ext = os.path.splitext(file)[1]
if ext in (".txt", ".htm", ".html"):
ftp.storlines("STOR " + file, open(file))
else:
ftp.storbinary("STOR " + file, open(file, "rb"), 1024)
ftp = ftplib.FTP("ftp.fbi.gov")
ftp.login("mulder", "trustno1")
upload(ftp, "trixie.zip")
upload(ftp, "file.txt")
upload(ftp, "sightings.jpg")
7.11. gopherlib 模块
gopherlib 模块包含了一个 gopher 客户端实现, 如 Example 7-25 所示.
7.11.0.1. Example 7-25. 使用 gopherlib 模块
File: gopherlib-example-1.py
import gopherlib
host = "gopher.spam.egg"
f = gopherlib.send_selector("1/", host)
for item in gopherlib.get_directory(f):
print item
['0', "About Spam.Egg's Gopher Server", "0/About's Spam.Egg's
Gopher Server", 'gopher.spam.egg', '70', '+']
['1', 'About Spam.Egg', '1/Spam.Egg', 'gopher.spam.egg', '70', '+']
['1', 'Misc', '1/Misc', 'gopher.spam.egg', '70', '+']
...
7.12. httplib 模块
httplib 模块提供了一个 HTTP 客户端接口, 如 Example 7-26 所示.
7.12.0.1. Example 7-26. 使用 httplib 模块
File: httplib-example-1.py
import httplib
USER_AGENT = "httplib-example-1.py"
class Error:
# indicates an HTTP error
def _ _init_ _(self, url, errcode, errmsg, headers):
self.url = url
self.errcode = errcode
self.errmsg = errmsg
self.headers = headers
def _ _repr_ _(self):
return (
"" %
(self.url, self.errcode, self.errmsg)
)
class Server:
def _ _init_ _(self, host):
self.host = host
def fetch(self, path):
http = httplib.HTTP(self.host)
# write header
http.putrequest("GET", path)
http.putheader("User-Agent", USER_AGENT)
http.putheader("Host", self.host)
http.putheader("Accept", "*/*")
http.endheaders()
# get response
errcode, errmsg, headers = http.getreply()
if errcode != 200:
raise Error(errcode, errmsg, headers)
file = http.getfile()
return file.read()
if _ _name_ _ == "_ _main_ _":
server = Server("www.pythonware.com")
print server.fetch("/index.htm")
注意 httplib 提供的 HTTP 客户端在等待服务器回复的时候会阻塞程序. 异步
的解决方法请参阅 asyncore 模块中的例子.
7.12.1. 将数据发送给服务器
httplib 可以用来发送其他 HTTP 命令, 例如 POST , 如 Example 7-27 所示.
7.12.1.1. Example 7-27. 使用 httplib 发送数据
File: httplib-example-2.py
import httplib
USER_AGENT = "httplib-example-2.py"
def post(host, path, data, type=None):
http = httplib.HTTP(host)
# write header
http.putrequest("PUT", path)
http.putheader("User-Agent", USER_AGENT)
http.putheader("Host", host)
if type:
http.putheader("Content-Type", type)
http.putheader("Content-Length", str(len(size)))
http.endheaders()
# write body
http.send(data)
# get response
errcode, errmsg, headers = http.getreply()
if errcode != 200:
raise Error(errcode, errmsg, headers)
file = http.getfile()
return file.read()
if _ _name_ _ == "_ _main_ _":
post("www.spam.egg", "/bacon.htm", "a piece of data", "text/plain")
7.13. poplib 模块
poplib 模块(如 Example 7-28 所示) 提供了一个 Post Office Protocol
( POP3 协议) 客户端实现. 这个协议用来从邮件服务器 "pop" (拷贝) 信息到
你的个人电脑.
7.13.0.1. Example 7-28. 使用 poplib 模块
File: poplib-example-1.py
import poplib
import string, random
import StringIO, rfc822
SERVER = "pop.spam.egg"
USER = "mulder"
PASSWORD = "trustno1"
# connect to server
server = poplib.POP3(SERVER)
# login
server.user(USER)
server.pass_(PASSWORD)
# list items on server
resp, items, octets = server.list()
# download a random message
id, size = string.split(random.choice(items))
resp, text, octets = server.retr(id)
text = string.join(text, "\n")
file = StringIO.StringIO(text)
message = rfc822.Message(file)
for k, v in message.items():
print k, "=", v
print message.fp.read()
subject = ANN: (the eff-bot guide to) The Standard Python Library
message-id = 
received = (from PI:EMAIL)
by spam.egg (8.8.7/8.8.5) id KAA09206
for mulder; Tue, 12 Oct 1999 10:08:47 +0200
from = Fredrik Lundh 
date = Tue, 12 Oct 1999 10:08:47 +0200
to = PI:EMAIL
...
7.14. imaplib 模块
imaplib 模块提供了一个 Internet Message Access Protocol ( IMAP, Internet
消息访问协议) 的客户端实现. 这个协议允许你访问邮件服务器的邮件目录,
就好像是在本机访问一样. 如 Example 7-29 所示.
7.14.0.1. Example 7-29. 使用 imaplib 模块
File: imaplib-example-1.py
import imaplib
import string, random
import StringIO, rfc822
SERVER = "imap.spam.egg"
USER = "mulder"
PASSWORD = "trustno1"
# connect to server
server = imaplib.IMAP4(SERVER)
# login
server.login(USER, PASSWORD)
server.select()
# list items on server
resp, items = server.search(None, "ALL")
items = string.split(items[0])
# fetch a random item
id = random.choice(items)
resp, data = server.fetch(id, "(RFC822)")
text = data[0][1]
file = StringIO.StringIO(text)
message = rfc822.Message(file)
for k, v in message.items():
print k, "=", v
print message.fp.read()
server.logout()
subject = ANN: (the eff-bot guide to) The Standard Python Library
message-id = 
to = PI:EMAIL
date = Tue, 12 Oct 1999 10:16:19 +0200 (MET DST)
from = 
received = (PI:EMAIL) by imap.algonet.se (8.8.8+Sun/8.6.12)
id KAA12177 for PI:EMAIL; Tue, 12 Oct 1999 10:16:19 +0200
(MET DST)
body text for test 5
7.15. smtplib 模块
smtplib 模块提供了一个 Simple Mail Transfer Protocol ( SMTP , 简单邮件
传输协议) 客户端实现. 该协议用于通过 Unix 邮件服务器发送邮件, 如
Example 7-30 所示.
读取邮件请使用 poplib 或 imaplib 模块.
7.15.0.1. Example 7-30. 使用 smtplib 模块
File: smtplib-example-1.py