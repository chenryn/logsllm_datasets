DEPARTMENT:ViewfromtheCloud
fi
Ef cient Failure Diagnosis
of OpenStack Using
Tempest
AnkurBhatia WhilecloudcomputingcontinuestobepopularintheIT
MichaelGerndt
world,companiesofferingcloudsolutionsareunder
TechnicalUniversityof
Munich pressuretoprovidethemostreliablesolutionstousers.In
JorgeCardoso thisarticle,wedescribeaninnovativeapproachto
HuaweiMunichResearch
diagnoseservicefailuresinanOpenStack-basedcloud
Center
UniversityofCoimbra usingTempestasastartingpoint.
SERVICE FAILURE DIAGNOSIS OF OPENSTACK:
EARLIER WORK
OpenStack1isanopen-sourcecloud-operatingsystemforbuildingpublicandprivateclouds.Itcan
managelargepoolsofcompute,storage,andnetworkingresourcesindatacenters.Itisacontinuously
evolvingsystemwithamajorreleasecycleeverysixmonths.
Toreachhighavailabilitylevels,thefailuresofOpenStackservicesneedtobecontinuously
monitored.Avizienisetal.2characterizeaservicefailureas“aneventthatoccurswhenthedelivered
servicedeviatesfromcorrectservice.Aservicefailureisatransitionfromcorrectservicetoincorrect
service,i.e.,tonotimplementingthesystemfunction.”
TheOpenStackcommunitycuratesaWikipage3withover50differenttoolsthatcanmonitorand
diagnosefailures.4However,mostofthemaregenericsolutions.TheonesspecifictoOpenStack
typicallyshowusagemetricsormonitorifacertainprocessisrunningornot.Othertoolsrequireusers
tohaveexpertknowledgeofsystemsandtointerpretlargeamountsofloginformationtodiagnose
failures.DevOpscanalsouseRally,anOpenStacktoolcapableofmanagingcomplexworkflows
whichorchestratebenchmarkingandevaluationexperiments.
Overtheyears,severalapproacheshavebeenproposedtodetectanomaliesinsoftwaresystems.The
threemostrelevanttechniquesthathaveyieldgoodresultsarelog,performance,andtraceanalysis.
IEEEInternetComputing PublishedbytheIEEEComputerSociety
November/December2018 61 1089-7801/18/$33.002018IEEE
IEEEINTERNETCOMPUTING
 Loganalysis5usesclusteringorheuristics,aswellastemplatestominelogsintoeventsor
flows.Features/graphsareextractedtomodelthenormalandabnormalbehaviorofsystems.
 Performanceanalysis6identifiesresourceconsumptionmodels(e.g.,fromCPU,memory,
diskI/O)toestablishpatternsofnormalityandabnormality.
 Traceanalysis7instrumentscodetoenablethegenerationoftraces(i.e.,sequencesof
correlatedevents)atruntimetoidentifythenormalandabnormalbehaviorofsystems.
ThemainadvantageofourapproachisthatitcopeswellwiththeperiodicnewreleasesofOpenStack
codebase.Thereisnoneedtoreparameterizealgorithms(e.g.,thekparameterofk-meansclustering),
updateheuristics,orrulesasfrequentlyneededbyloganalysis.Forcloudplatformssuchas
Openstack,thevariabilityofcloudworkloadsandmultitenancymakesperformanceanalysisand
resourcemodelingadifficulttask.Finally,traceanalysisalsobreakswhennewinstrumentationpoints
areadded,removed,orchangedinthecodebase.
CAN TEMPEST TESTS BE USED TO DIAGNOSE
FAILURES IN OPENSTACK?
TheOpenStackcommunityalsodevelopedatestsuitenamedTempest.Itisusedforthevalidationof
allthemodulesofOpenStackduringthedevelopmentcycletoguaranteethatthecodeiserrorfree.Itis
theofficialintegrationtestsuitecontainingmorethan1500testsforAPIandscenariosvalidation.Due
tothevalueofthislargesetoftests,oneinterestingquestioniswhetherornotitwouldbepossibleto
alsouseittodiagnoseservicefailuresinOpenStack.
AlthoughTempesttestsareextremelyusefulforthepurposeofdevelopmentandintegration,their
useforservicefailurediagnosispresentsasetofchallenges.First,theydonotprovideany
informationaboutthenonresponsiveorfailedservicesincloudplatforms.Theexecutionof
Tempesttestsgeneratesalistofpassedandfailedtests.Thislistcanhelptolocatesoftwareerrors
ortofindissueswithindividualmodulesofthecodebutcannotdiagnosefailuresasthereareno
relationshipsbetweenTempesttestsandservicesrunningonOpenStack.Second,Tempest
containsmorethan1500tests.WitheverynewreleaseofOpenStack,thenumberoftestsalso
increases.Thus,ittakesaconsiderableamountoftime(3–4h)toexecutethem.Thus,cloud
operatorsoftendevelopcustomteststodiagnosefailuresinOpenStack.However,asmentioned
previously,OpenStackisacontinuouslyevolvingcloudplatformwithareleasecycleofsix
months.Hence,thetestsdevelopedbecomeoutdatedandthereisaconstantneedtomodifythem.
Therefore,theapproachiscostlyforcloudoperators.
Adifferentapproachis,therefore,neededtodiagnoseservicefailuresinOpenStack.Thesolution
shouldbeefficient(fast)andshouldbeabletoestablishrelationshipsbetweenTempesttestsandthe
servicestheyarecapableoftesting.Thesolutionshouldalsobeabletocopeupwiththefastrelease
cycleofOpenStack.
FAILURE DIAGNOSIS OF OPENSTACK USING
TEMPEST TESTS
DiagnosingfailuresinOpenStackisnotasimpletask.Althoughtherehasbeenresearchinthis
field,8–10thereisnosolutionthatusesTempesttestsforthepurposeoffailurediagnosis.Wehave
alreadymentionedthechallengesassociatedwithusingTempestforfailurediagnosis.However,there
areafewbenefitsofusingTempestaswell.First,TempesttestsaredevelopedalongwithOpenStack.
Hence,thereisnoadditionalcostofdevelopmentinvolved.Second,theycanbeexecutedwith
minimaleffortastheyareautomated.Finally,witheverynewrelease,Tempesttestsareupdated.
Therefore,thereisnoneedtomodifythetestsforanewrelease.
Havingthesebenefitsinmind,wedevelopedanewmethodtodiagnoseservicefailuresinOpenStack
usingTempest.Themethodhasthreemainphasesdetailedinthefollowingsections.Theoverall
achievementisthatitcandiagnosefailuresbyrunningonly4–5%ofthereducedTempesttests.
November/December2018 62 www.computer.org/internet
VIEWFROMTHECLOUD
Phase 1: Tempest Test Suite Reduction
Phase1ofthesolutiondealswithTempesttestreduction.ThistaskishandledbytheTempesttest
manager.Figure1showsthearchitectureofthiscomponent.Itconsistsofthefollowingfive
subsystems.
IdentifyModules
ThefirsttaskofthisphaseistoidentifyallthemoduleswheretheTempesttestsareimplemented.
ThesemodulesareidentifiedusinganamingconventionfollowedbyOpenStack,forexample,
tempest.api.compute.flavors.test_flavors.FlavorsV2TestJSON.test_get_flavoryieldsthefollowing
information:
 pathtothemodule:tempest.api.compute.flavors.test_flavors;
 classname:FlavorsV2TestJSON;
 testmethod:test_get_flavor.
ConstructAbstractSyntaxTree(AST)
EveryTempesttesthasonetestmethoddefinedinamodule.Thetestmethodsmakecallstoother
methodsthatareknownassupportmethods.Thesemethodscallvariousfunctionalitiesprovidedby
OpenStack.Themaintaskofthissubsystemistoperformcodeanalysistoidentifythetestmethods
andtheirsupportmethods.ThisisdonebyconstructinganAST11torepresentthesourcecodeinthe
formofatree.EachnodeofanASTrepresentsaconstruct(module,class,testmethod,orasupport
method)occurringinthesourcecode,asshowninFigure2(b).
FilterAST
Inthepreviousstep,weconstructedASTstoidentifytestmethodsandsupportmethods.However,
therearesomesupportmethodsthatarenotrelevant.Theyarelanguagespecificanddonotplaya
directroleintestinganyfunctionalityofOpenStack.Therefore,thesesupportmethodshavetobe
eliminated.Thisisachievedusingtheinversedocumentfrequency(IDF).12Thistechniqueisbasedon
thenotionthatwordswithlowIDFarepresentacrossmultipledocumentsandareusuallynot
consideredimportant.Thesamelogicisusedtodetermineifasupportmethodisrelevantornot.Ifa
supportmethodispresentacrossmostofthemodules,itisconsideredtobeirrelevant.TheIDFofa
supportmethodiscalculatedbythefollowingexpression:
IDF(x)¼log(#modules/#moduleswithsupportmethodx).
Figure1. Tempesttestmanager.ThisisthearchitecturaldiagramoftheTempesttestmanagerthat
consistsoffivemodulesexplainedindetailinthetext.
November/December2018 63 www.computer.org/internet
IEEEINTERNETCOMPUTING
Figure2. AST.ThefigureshowsasimpleASTconstructedforaPythonmodule.
Figure3. IDFcalculation.ThefigureshowstheconstructionofASTsforPythonmodulestocalculate
theIDFofallthesupportmethodsinthemodule.
LetusconsidertheexampleshowninFigure3.
Module1calls4supportmethods:Assert,S1,S2,andS3.TheIDFofthesemethodsiscalculated
asfollows:
IDF(Assert)¼log(4/4)¼log(1)¼0
IDF(S1)¼log(4/1)¼log(4)¼2
IDF(S2)¼log(4/2)¼log(2)¼1
IDF(S3)¼log(4/1)¼log(4)¼2.
Asmentioned,thesupportmethodswithlowIDFarenotrelevantandhenceareeliminated.Fromthe
aboveexample,Assertislabeledasirrelevant,whileS1,S2,andS3arerelevant.
SupportMethodDeduplication
Inthepreviousstep,weeliminatedtheirrelevantsupportmethodsfrommodules.Thenexttaskisto
eliminatetheredundanttestmethodsfrommodules.Theanalysisofthecodeenabledustodiscover
thatinmostcasesasubsetofthetestmethodscallsallsupportmethodsinamodule.Therefore,within
mostmodules,thereareredundanttestmethodsthatcanbeeliminated.
This task is accomplished using the set cover algorithm.13 The algorithm selects the minimum
number of test methods from the module such that the selected test methods call all the support
methods present in the module. For example, in Figure 3, in Module 3, the subsets of test
methods {U7, U8} and {U7, U9} call all the support methods {S6, S7, S8} present in the
module. Hence, any one of these subsets can be selected to call all the support methods.
However, the algorithm selects the subset with a lower execution time. The following two
parameters are considered in the algorithm.
November/December2018 64 www.computer.org/internet
VIEWFROMTHECLOUD
 TimeisthetimetakenforeachTempesttesttoexecute.Itistheparametercostoftheset
coveralgorithm.Thisparameterenablestoselectthemosttime-efficientsubsetofthetest
methods.Iftherearecaseswheremorethanonesubsetofthetestmethodscallsallthe
supportmethods,thesubsetwiththelowerexecutiontimeisselected.
 Coverage is the minimum coverage (in %) of the support methods to achieve. This
parameter is not present in the original set cover algorithm. It is introduced to give
users an option to select test methods based on the percentage of the support methods
to be considered. For example, in Figure 3, in Module 3, there are three support
methods {S6, S7, S8}. For a 100% coverage, the subsets {U7, U8} or {U7, U9} have
to be selected in order to cover all the support methods. For a 30% coverage, only
{U7} is sufficient as this requires only one out of the three support methods to be
called.
CrossModuleDeduplication
The support method deduplication eliminates the redundant test methods within modules using
the set cover algorithm. However, through code analysis, we discovered that some test methods
are redundant also across modules. Hence, the reduction can be improved without losing the
coverage.
LetusconsiderModule2andModule4fromFigure4.ThetestmethodU5callsthesupportmethods
{S4,S5}.Similarly,Module4consistsoftestmethodsU10,U11,andU12,whichcallthesetof
supportmethods{S4},{S10,S4},and{S12,S5},respectively.Thesupportmethoddeduplication
subsystemguaranteesthat{S4,S5,S10,S12}arecalledbythesubsetofthetestmethodsinModule4.
ThismeansthatallthesupportmethodscalledbyU5(i.e.,{S4,S5})arealreadycoveredinModule4.
Hence,U5isredundantandcanbeeliminated.
Thisapproachisappliedtoallthetestmethodstoeliminatetheredundanttestmethodsacrossthe
modules.Itisimportanttonotethatthetestdeduplicationstrategydevelopedwasbasedonhow
Tempestworks.Beforeexecutingthetests,Tempestdownloadsandcreatesalltherequiredresources
(e.g.,OSresources,users,networks,etc.).Thus,usersdonotneedtotesttheservicewithspecific
parametersasTempesthandlesthem.Moreover,iftwoormoreTempestmethodsthathaveacommon
supportmethod,theyalwaysusethesameparameter(e.g.,VMimage).Hence,eliminatingoneof
themhasnoeffectonthecoveragebutreducesthenumberoftest.
OurexperimentwithOpenStackenabledustoautomaticallyreduce1392Tempestteststo518tests
with100%coverage.
Phase 2: Relationship Establishment and Isomorphic Test
Elimination
OneofthemajorchallengesofusingTempesttestsforfailurediagnosisisthelackofrelationships
betweenTempesttestsandOpenStackservices.TheexecutionofTempesttestsoutputsalistofpassed,
failed,andskippedtests.However,itisdifficulttodeterminefailedservicesbasedonthislist.The
Figure4. RelationshipbetweenTempesttestsandservices.
November/December2018 65 www.computer.org/internet
IEEEINTERNETCOMPUTING
secondphaseestablishesrelationshipsbetweenTempesttestsandservices.ItfurthereliminatesTempest
testsbyremovingteststhatestablishthesamerelationships.Thesetestsarecalledisomorphictests.
TempestTestandServiceMapping
TherelationshipsbetweenTempesttestsandOpenStackservicesareestablishedbasedontheabilityof
theteststodetermineifaparticularserviceisworkingproperlyornot.Thefollowingstepsare
performed.
Forsinservices:
1. DisableservicestosimulateafailureofaserviceinOpenStack.
2. RunthereducedsetofTempesttests.Teststhatdependonswillfail.Teststhatdonot
dependonitwillpass.
3. Restartservices.
Servicesaredisabledoneatatime.Thisisbecauseifmorethanoneserviceisdisabledandatestfails,
itisnotpossibletodeterminewhichservicecausedthetesttofail.
TheprocedureisrepeatedforallservicescriticaltothefunctioningofOpenStack.Basedontheresults,
relationshipsbetweenTempesttestsandservicesareestablishedandarerepresentedinamatrix,as
showninFigure4.
EachcellrepresentsarelationshipbetweenaTempesttestandaservice.Letusrepresentthis
relationshipwiththeexpressionR(U service)whereU isaTempesttestandservice isaservice.
i, j i j
R(U service)¼1meansthatU dependsonservice.
i, j i j
R(U service)¼0meansthatU doesnotdependsonservice.