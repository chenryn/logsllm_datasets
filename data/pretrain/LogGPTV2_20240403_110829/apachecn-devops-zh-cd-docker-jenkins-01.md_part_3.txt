首先，具体的工具总是不如理解它在过程中的作用重要。换句话说，任何工具都可以用另一个起同样作用的工具来代替。比如 Jenkins 可以换成亚特兰蒂斯的竹子，酋长可以换成 Ansible。这就是为什么每一章都以这样一个工具的必要性和它在整个过程中的作用的一般描述开始。然后，通过与其替代品的比较来描述确切的工具。该表单为您提供了选择适合您环境的表单的灵活性。
另一种方法是在思想层面上描述持续交付过程；然而，我坚信，用代码摘录给出一个确切的例子，读者可以自己运行，会导致对这个概念有更好的理解。
There are two ways to read this book. The first is to read and understand the concepts of the Continuous Delivery process. The second is to create your own environment and execute all scripts while reading to understand the details.
让我们快速浏览一下我们将在整本书中使用的工具。然而，在这一部分，它只是对每种技术的简单介绍，随着这本书的深入，会呈现更多的细节。
# Docker 生态系统
Docker 作为容器化运动的明确领导者，近年来一直主导着软件行业。它允许在与环境无关的映像中打包应用，因此将服务器视为资源场，而不是必须为每个应用配置的机器。Docker 是这本书的明确选择，因为它完全适合(微)服务世界和持续交付流程。
与 Docker 一起出现的还有其他技术，如下所示:
*   **Docker Hub** :这是 Docker 映像的注册表
*   **Docker 编写**:这是一个定义多容器 Docker 应用的工具
*   **Docker Swarm** :这是一个集群和调度工具
# Jenkins
Jenkins 是目前市场上最受欢迎的自动化服务器。它有助于创建连续集成和持续交付管道，通常还有任何其他自动化脚本序列。高度面向插件，它有一个伟大的社区，不断扩展新功能。此外，它允许将管道编写为代码，并支持分布式构建环境。
# Ansible
Ansible 是一个自动化工具，有助于软件配置、配置管理和应用部署。它的发展趋势比任何其他配置管理引擎都要快，很快就能超过它的两个主要竞争对手:Chef 和 Puppet。它采用无代理架构，与 Docker 平滑集成。
# 开源代码库
GitHub 绝对是所有托管版本控制系统中的第一名。它提供了一个非常稳定的系统，一个伟大的基于网络的用户界面，以及一个面向公共存储库的免费服务。话虽如此，任何源代码管理服务或工具都将与 Continuous Delivery 一起工作，无论它是在云中还是自托管，也无论它是基于 Git、SVN、Mercurial 还是任何其他工具。
# 爪哇/春船/格拉德尔
多年来，Java 一直是最流行的编程语言。这就是为什么它被用于本书的大多数代码示例。与 Java 一起，大多数公司使用 Spring 框架进行开发，因此我们使用它来创建一个简单的 web 服务，需要解释一些概念。Gradle 被用作构建工具。然而，它仍然不如 Maven 受欢迎，趋势要快得多。一如既往，任何编程语言、框架或构建工具都可以交换，并且持续交付过程将保持不变，因此如果您的技术栈不同，请不要担心。
# 其他工具
任意选择黄瓜作为验收测试框架。其他类似的解决方案是 Fitnesse 和 jbehavior。对于数据库迁移，我们使用 Flyway，但是任何其他工具都可以，例如，Liquibase。
# 创建完整的持续交付系统
你可以从两个角度来看这本书是如何组织的。
第一个是基于自动化部署管道的步骤。每一章都让您更接近完整的持续交付流程。如果你看一下章节的名字，有些章节甚至被命名为管道阶段:
*   连续集成管道
*   自动化验收测试
*   使用 Ansible 进行配置管理
其余章节给出了介绍、总结或补充过程的附加信息。
这本书的内容还有第二个视角。每章描述环境的一部分，依次为持续交付过程做好准备。换句话说，这本书呈现了，一步一步，一个技术接一个技术，如何构建一个完整的系统。为了帮助您了解我们计划在整本书中构建什么，现在让我们看看系统将如何在每一章中发展。
Don't worry if you don't understand the concepts and the terminology at this point. We explain everything from scratch in the corresponding chapters.
# 介绍 Docker
在[第 2 章](02.html)*介绍 Docker* 中，我们从系统的中心开始，构建一个打包成 Docker 映像的工作应用。本章的输出如下图所示:
![](img/360f4181-be46-4ca6-b481-53ba5e352a1a.png)
一个 Docker 化的应用(网络服务)作为一个容器在一个**Docker 主机**上运行，并且可以直接在主机上运行。这要归功于端口转发(Docker 术语中的端口发布)。
# 配置 Jenkins
在[第 3 章](03.html)、*配置 Jenkins*中，我们准备了 Jenkins 环境。由于多个代理(从)节点的支持，它能够处理繁重的并发负载。结果如下图所示:
![](img/1098463d-b149-49b8-b80d-b08a6df6e053.png)
**Jenkins**主设备接受构建请求，但是在其中一台**Jenkins 从设备**(代理)上开始执行。这种方法提供了 Jenkins 环境的横向扩展。
# 持续集成管道
在[第 4 章](04.html)、*持续集成管道*中，我们展示了如何创建持续交付管道的第一阶段，即提交阶段。本章的输出是下图所示的系统:
![](img/47bc7bc5-8cf0-4d4e-bdc9-f3b7e6b48221.png)
该应用是一个简单的 web 服务，使用 Spring Boot 框架用 Java 编写。Gradle 用作构建工具，GitHub 用作源代码存储库。对 GitHub 的每次提交都会自动触发 Jenkins 构建，该构建使用 Gradle 编译 Java 代码、运行单元测试并执行额外的检查(代码覆盖率、静态代码分析等)。Jenkins 构建完成后，会向开发人员发送通知。
完成本章后，您将能够创建一个完整的连续集成管道。
# 自动化验收测试
在[第 5 章](05.html)、*自动化验收测试*中，我们最终从书名中合并了两项技术: *Docker* 和 *Jenkins* 。它导致系统如下图所示:
![](img/2ca2ff1f-0162-4b35-9b90-06f686b53022.png)
图表中的附加元素与自动化验收测试阶段相关:
*   **Docker 注册表**:持续集成阶段结束后，先将应用打包成 JAR 文件，再打包成 Docker 镜像。该映像随后被推送到**Docker 登记处**，该登记处充当 Docker 化应用的存储器。
*   **Docker 主机**:在执行验收测试套件之前，必须启动应用。Jenkins 触发一台**Docker 主机**机器，从**Docker 注册表**中提取 Docker 化的应用并启动它。
*   **Docker Compose** :如果完整的应用由一个以上的 Docker 容器组成(例如，两个 web 服务:应用 1 使用应用 2)，那么 **Docker Compose** 帮助它们一起运行。
*   **黄瓜**:在 **Docker 主机**上启动应用后，Jenkins 运行一套写在**黄瓜**框架中的验收测试。
# 具有可转换/持续交付管道的配置管理
接下来的两章，即[第 6 章](06.html)、*带 Ansible* 的配置管理、[第 7 章](01.html)、*持续交付管道*，我们完成持续交付管道。输出是下图中显示的环境:
![](img/6b7eeee2-d286-4b43-a91c-d2066e375a83.png)
Ansible 负责环境，并支持在多台机器上部署相同的应用。因此，我们将应用部署到试运行环境，运行验收测试套件，最后将应用发布到生产环境，通常在许多情况下(在多台 Docker Host 机器上)。
# 具有 DockerSwarm/高级持续交付的集群
在[第 8 章](08.html)、*集群与 Docker Swarm* 中，我们将每个环境中的单个主机替换为机器集群。[第 9 章](09.html)、*高级持续交付*，在持续交付流程中增加了数据库。本书中创建的最终环境如下图所示:
![](img/4e76ac56-d89b-4e6f-8ea0-47a7bc1083ef.png)
暂存和生产环境配备了 Docker Swarm 集群，因此应用的多个实例在集群上运行。我们不再需要考虑我们的应用部署在哪台机器上。我们只关心它们的实例数量。这同样适用于 Jenkins 的奴隶，他们也是在集群上运行的。最后一项改进是使用集成到交付过程中的 Flyway 迁移自动管理数据库模式。
我希望你已经对我们在本书中计划构建的内容感到兴奋。我们将一步一步地接近它，解释每个细节和所有可能的选项，以帮助您理解程序和工具。读完这本书，你将能够在你的项目中引入或改进持续交付过程。
# 摘要
在这一章中，我们介绍了持续交付过程，从这个想法开始，讨论了先决条件，最后是本书其余部分中使用的工具。本章的要点如下:
*   大多数公司目前使用的交付流程都有明显的缺点，可以使用现代自动化工具进行改进
*   持续交付方法提供了许多好处，其中最重要的是:快速交付、快速反馈周期和低风险发布
*   持续交付管道由三个阶段组成:持续集成、自动化验收测试和配置管理
*   引入持续交付通常需要改变组织的文化和结构
*   持续交付环境中最重要的工具是 Docker、Jenkins 和 Ansible
在下一章中，我们将介绍 Docker，并介绍如何构建一个 Docker 化的应用。*