## Page 348
第7章
URL、路径和 Internet 地址
前一章我们讨论了如何处理数字，而在程序中经常需要处理的另一重要对象是在各种
各样的路径和定位符中寻找数据：
大家网
URL、URN和相关的字符串
域名
.
IP地址
TopSage.com
MicrosoftWindows文件和文件夹名
特别来讲，其中的URL格式被证实相当灵活有用，即使和Intarnet无关的资源也广泛
地采纳了URL格式。本章要讲解的正则表达式分析工具将会在非常多的情况下展现其
价值所在。
7.1
URL合法性验证
问题描述
你要检查某段给定的文本是否是一个符合需要的合法URL。
解决方案
允许使用几乎任意的URL：
(https?1ftplfile)://.+$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
\A(https?|ftp|file)://.+\z
正则选项：不区分大小写
PDG
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
332
www.TopSage.com
---
## Page 349
必须包含一个域名，但不允许出现用户名或者口令：
\A
#定位符
(https?|ftp)://
通信协议方案（scheme）
[a-z0-9-]+(\.[a-z0-9-]+)+
#域
（·[/])
#路径和/或参数
#定位符
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
(https?1ftp)://[a-z0-9-]+(\.[a-z0-9-]+)+
$（+·[/])
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
必须包含一个域名，不允许使用用户名或口令。如果在子域名（www或ftp）中隐含了
通信协议方案（也称作scheme，即http或ftp等），那么允许省略通信协议方案：
\A
#定位符
((https?|ftp) :/ /1(www| ftp)\.)
#通信协议方案或子城名
+（+[-6-0z-]*)+[-6-0z-]
#域名
（·[/]）
路径和/或参数
\Z
定位符
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
((https?1ftp)://1(www|ftp)\.)[a-z0-9-]+(\.[a-z0-9-]+)+([/?].*)?$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
必须包含一个域名和指向一个图像文件的路径。不允许使用用户名、口令或参数：
\A
定位符
//:(d1sd)
#通信协议方案
[a-z0-9-] +(\. [a-z0-9-} +) +
鲁域
(/[\w-]+) *
#路径
/ [\w-]+\.(gif1png1jpg)
文件
\Z
善定位符
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
^(https?|ftp）://[a-z0-9-]+(\.[a-z0-9-]+)+(/[\w-]+)*/(\w-]+\.(giflpn
gljpg)$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
讨论
你无法创建一个能匹配每个合法的URL，并且不会匹配任何不合法URL的正则表达
式。原因是在某些尚未问世的的通信协议方案中，很可能几乎任何字符串都是一个合
法的URL。
URL、路径和Internet地址
333
www.TopSage.com
---
## Page 350
因此，只有当我们知道要求URL合法的上下文环境时，URL的合法性验证才是有意
义的。这时，可以把能够接受的URL限制为当前正在使用的软件所支持的通信协议
方案。本实例中所有正则表达式都是在web浏览器中使用的。这类URL使用的是如
下格式：
scheme://user:PI:EMAIL:80/path/file.ext?param=value&param2
=value2#fragment
其中所有的组成部分实际上都是可选的。-个file：URL可以只包含有一个路径。而另
一个http：URL则可以只包含一个域名。
在解决方案中的第一个正则表达式会检查URL是否以web浏览器普遍采用的通信协议
方案开头：http、https、ftp和file。正则表达式使用脱字符来定位到字符串的开始（实
例2.5)。多选结构（实例2.8）被用来罗列出通信协议方案的列表。https?>是chttplhttps)
的一种更为聪明的表示方式。
因为第一个正则表达式充许截然不同的通信协议方案，例如http和file，所以它并不会
试图对通信协议方案后的文本进行合法性验证。（.+S）会简单地抓取置到学符事结尾之
前的一切字符，这个字符串中并不包含任何换行字符。
默认来说，点号（实例2.4）匹配除了换行字符之外的所有字符，而美元符号（实例2.5）
并不会匹配任何内嵌的换行符。这里Ruby会是一个例外。在Ruby中，脱字符和美元
符号总是会匹配任何内嵌的换行符，所以只能使用A）和Z来替代它们（实例2.5）。
严格来讲，对于Ruby来说，你必须对此实例中所有其他正则表达式进行同样的修改。
如果输人可以由多行组成，而且你想要避免匹配一个在几行文本中占用一行的URL，
那么你就应该这样做。
接下来的两个正则表达式分别是同一正则表达式的宽松排列版本（实例2.18）和常规
版本。宽松排列的正则表达式更容易阅读，然而常规版本的输入则会更快。JavaScript
并不支持宽松排列的正则表达式。
这两种正则表达式只接受web和FTPURL，且要求HTTP或者FTP通信协议方案后面
必须跟随一个看起来像是合法域名的字符串。域名必须以ASCII字符组成。国际化域名
（）
列表。因为问号位于一个字符类中（实例2.3），所以我们不需要对它进行转义。问号
是字符类中的一个普通字符，而斜杠在正则表达式中任何地方都是一个普通字符。（如
果你在源代码中看到它被转义了，那是因为在Perl和其他-些编程语言中使用斜杠来
界定字面的正则表达式。）
在该正则式中，并没有企图对路径或者参数进行合法性验证。（.*只是简单地匹配了不
包含换行符的任何东西。由于路径和参数都是可选的，很好地做到了这一点。这个列表中包含2个选择分支，每个
都以2个选择分支作为开始。第一个选择分支允许和，后面必须紧随。
第二个选择分支允许（www>和（ftp)，后面必须跟随着一个点号。你可以很容易地编辑
每个列表，改变正则表达式应该接受的通信协议方案和子域名。
最后2个正则表达式要求包含一个通信协议方案、一个ASCⅡI的域名、路径和代表一个GIF、
PNG或者JIPEG图像文件的文件名。在任何脚本中，路径和文件名中都允许出现所有的字
母、下划线和连字符。简写字符类w>包括了所有这些字符，除了连字符之外（实例2.3）。
那么到底应该使用哪个正则表达式呢？这实际上要取决于你到底想要做什么。在许多
情况下，答案可能是根本不要使用任荷正则表达式。试着简单地去访问URL。如果它
返回了有效的内容，就接受它。如果获得了404或者其他错误，则拒绝它。最终来讲，
这是检查一个URL是否有效的唯一有实际意义的测试。
参见
实例2.3、实例2.8、实例2.9和实例2.12。
7.2在全文中查找URL
问题描述
你要在一大段文本中查找URL。URL可能被诸如圆括号这样的标点符号包围起来，也
可能没有，用来包住它的标点符号并不属于URL的一部分。
解决方案
不包含空格的URL：
\b(https?Iftplfile)://\S+
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
不包含空格和结尾标点符号的URL：
\b(https?1ftp1file)://[-A-z0-9+&@#/?=~_1$!:,.;] *
[A-Z0-9+&@#/=~_1$]
URL、路径和Internet地址
335
www.TopSage.com
---
## Page 352
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
不包含空格或者结尾标点符号的URL，以wWw或ftp子域名开始的URL可以省略掉
通信协议方案：
\b（(https？|ftp|fi1e)://1(www|ftp)\.)[-A-z0-9+&@#/%？=~_1$!:,.] *
[$1~=/#+6-0z-]
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
假设有这样一段文字：
Visit http://www.somesite.com/page, where you will find more information.
你能找到其中的URL是什么吗？
在你说出http://www.somesite.com/page这样的答案之前，请认真想一想：标点符号和空
格都是URL中的合法字符。逗号、点号甚至空格都不一定要被转义为%20。字面的空格
是完全合法的。有些所见即所得（WYSIWYG）的网页写作工具甚至让用户能够方便地
在文件和文件夹名中放人空格，并且把这些空格包含在指向这些文件的链接中。
这意味着如果使用一个能够允许所有合法URL的正则表达式，它将在上述文本中找到
如下URL：
http://www.somesite.com/page, where you will find more information.
很少有人在输入这句话时有意把空格作为URL的一部分，这是因为URL中含有未转义
的空格毕竞是很罕见的。在解决方案中的第一个正则表达式使用简写字符类S排除了
这种情况，简写字符类S会包含所有非空格的字符。尽管这个正则表达式采用了“不
区分大小写”的选项，但是S必须是大写的，因为不同于。实际上，它们恰好
完全相反。具体讲解可参见实例2.3。
第一个正则表达式还是非常粗糙。它会把示例文本中的逗号也包括到URL中。尽管在
URL中包含逗号和其他标点符号并不很罕见，但标点符号还是很少会在URL结尾处出
现的。
下一个正则表达式使用了两个字符类来替代单个的简写S>。第一个字符类比第二个要
包括更多的标点符号。第二个字符类排除了当URL放在英文句子中时，跟在URL后
在英文中可能作为标点符号出现的字符。第一个字符类中有一个星号量词（实例2.12），
允许URL为任意长度。第二个字符类则没有使用量词，要求URL以此字符类中的一
个字符结尾。字符类不包括小写字母，“不区分大小写”选项会被用来保证这一点。关
于如何在你的编程语言中使用这类选项，请参考实例3.4中的讲解。
第二个正则表达式在处理使用了一些特殊标点符号的URL时会出现错误，它将会只能
336第7章
www.TopSage.com
---
## Page 353
匹配URL的一部分。但是这个正则表达式确实解决了非常普遍的URL后面跟随一个逗
号或者句号的情况，同时依然允许URL中包含有逗号或者点号。
许多Web浏览器可以接受不指明通信协议方案的URL，然后从域名中正确地推断出通
信协议方案。例如，www.regexbuddy.com是http://www.regexbuddy.com的简写。为了
允许使用这些URL，最后一个正则表达式扩充了所支持的通信协议方案的列表，把子
域名www.和ftp.包括在所允许的通信协议方案列表中。
很好地做到了这一点。这个列表中包含2个选择分支，每个
又会以2个选择分支开始。第一个选择分支允许chttps?>和和ftp>，后面必须跟随着一个点号。你可以很容易地编
辑每个列表，从而改变正则表达式应该接受的通信协议方案和子域名。