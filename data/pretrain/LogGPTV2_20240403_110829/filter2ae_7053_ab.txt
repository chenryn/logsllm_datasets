                grammar[symbol][i] = exp_string(exp)
            else:
                grammar[symbol][i] = (exp_string(exp), new_opts)
            return
        raise KeyError(
            "no expansion " +
            repr(symbol) +
            " -> " +
            repr(
                exp_string(expansion)))
同时，在写Fuzz的时候肯定不希望不断地写大量的符号和值的对应，因此我们需要一些语法来帮助，这里提供了ENBF的解析方法：
    # 解析 ebnf 语法
    def new_symbol(grammar: Grammar, symbol_name: str = "") -> str:
        """Return a new symbol for `grammar` based on `symbol_name`"""
        if symbol_name not in grammar:
            return symbol_name
        count = 1
        while True:
            tentative_symbol_name = symbol_name[:-1] + "-" + repr(count) + ">"
            if tentative_symbol_name not in grammar:
                return tentative_symbol_name
            count += 1
    # 提取表达式中符合EBNF语法的部分，? , * , + , ()
    def parenthesized_expressions(expansion: Expansion) -> List[str]:
        RE_PARENTHESIZED_EXPR = re.compile(r'\([^()]*\)[?+*]')
        # In later chapters, we allow expansions to be tuples,
        # with the expansion being the first element
        if isinstance(expansion, tuple):
            expansion = expansion[0]
        return re.findall(RE_PARENTHESIZED_EXPR, expansion)
    # 对Grammar中的EBNF语法括号进行解析
    def convert_ebnf_parentheses(ebnf_grammar: Grammar) -> Grammar:
        """Convert a grammar in extended BNF to BNF"""
        grammar = extend_grammar(ebnf_grammar)
        for nonterminal in ebnf_grammar:
            expansions = ebnf_grammar[nonterminal]
            for i in range(len(expansions)):
                expansion = expansions[i]
                if not isinstance(expansion, str):
                    expansion = expansion[0]
                while True:
                    parenthesized_exprs = parenthesized_expressions(expansion)
                    if len(parenthesized_exprs) == 0:
                        break
                    for expr in parenthesized_exprs:
                        operator = expr[-1:]
                        contents = expr[1:-2]
                        new_sym = new_symbol(grammar)
                        exp = grammar[nonterminal][i]
                        opts = None
                        if isinstance(exp, tuple):
                            (exp, opts) = exp
                        assert isinstance(exp, str)
                        expansion = exp.replace(expr, new_sym + operator, 1)
                        if opts:
                            grammar[nonterminal][i] = (expansion, opts)
                        else:
                            grammar[nonterminal][i] = expansion
                        grammar[new_sym] = [contents]
        return grammar
    # ENBF符号扩展
    def extended_nonterminals(expansion: Expansion) -> List[str]:
        RE_EXTENDED_NONTERMINAL = re.compile(r'( ]*>[?+*])')
        # In later chapters, we allow expansions to be tuples,
        # with the expansion being the first element
        if isinstance(expansion, tuple):
            expansion = expansion[0]
        return re.findall(RE_EXTENDED_NONTERMINAL, expansion)
    # ENBF符号扩展
    def convert_ebnf_operators(ebnf_grammar: Grammar) -> Grammar:
        """Convert a grammar in extended BNF to BNF"""
        grammar = extend_grammar(ebnf_grammar)
        for nonterminal in ebnf_grammar:
            expansions = ebnf_grammar[nonterminal]
            for i in range(len(expansions)):
                expansion = expansions[i]
                extended_symbols = extended_nonterminals(expansion)
                for extended_symbol in extended_symbols:
                    operator = extended_symbol[-1:]
                    original_symbol = extended_symbol[:-1]
                    assert original_symbol in ebnf_grammar, \
                        f"{original_symbol} is not defined in grammar"
                    new_sym = new_symbol(grammar, original_symbol)
                    exp = grammar[nonterminal][i]
                    opts = None
                    if isinstance(exp, tuple):
                        (exp, opts) = exp
                    assert isinstance(exp, str)
                    new_exp = exp.replace(extended_symbol, new_sym, 1)
                    if opts:
                        grammar[nonterminal][i] = (new_exp, opts)
                    else:
                        grammar[nonterminal][i] = new_exp
                    if operator == '?':
                        grammar[new_sym] = ["", original_symbol]
                    elif operator == '*':
                        grammar[new_sym] = ["", original_symbol + new_sym]
                    elif operator == '+':
                        grammar[new_sym] = [
                            original_symbol, original_symbol + new_sym]
        return grammar
    def convert_ebnf_grammar(ebnf_grammar: Grammar) -> Grammar:
        return convert_ebnf_operators(convert_ebnf_parentheses(ebnf_grammar))
对于Grammar来言，我们必须要确定它的一个合法性，不然在使用中必然会遇到各种错误问题，因此语法检查是很必要的，就如同编译器的语法检查很重要一样：
    # 搜索Grammar中的定义的noterminal
    def def_used_nonterminals(grammar: Grammar, start_symbol: 
                              str = START_SYMBOL) -> Tuple[Optional[Set[str]], 
                                                           Optional[Set[str]]]:
        """Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.
        In case of error, return (`None`, `None`)."""
        defined_nonterminals = set()
        used_nonterminals = {start_symbol}
        for defined_nonterminal in grammar:
            defined_nonterminals.add(defined_nonterminal)
            expansions = grammar[defined_nonterminal]
            if not isinstance(expansions, list):
                print(repr(defined_nonterminal) + ": expansion is not a list",
                      file=sys.stderr)
                return None, None
            if len(expansions) == 0:
                print(repr(defined_nonterminal) + ": expansion list empty",
                      file=sys.stderr)
                return None, None
            for expansion in expansions:
                if isinstance(expansion, tuple):
                    expansion = expansion[0]
                if not isinstance(expansion, str):
                    print(repr(defined_nonterminal) + ": "
                          + repr(expansion) + ": not a string",
                          file=sys.stderr)
                    return None, None
                for used_nonterminal in nonterminals(expansion):
                    used_nonterminals.add(used_nonterminal)
        return defined_nonterminals, used_nonterminals
    def reachable_nonterminals(grammar: Grammar,
                               start_symbol: str = START_SYMBOL) -> Set[str]:
        reachable = set()
        def _find_reachable_nonterminals(grammar, symbol):
            nonlocal reachable
            reachable.add(symbol)
            for expansion in grammar.get(symbol, []):
                for nonterminal in nonterminals(expansion):
                    if nonterminal not in reachable:
                        _find_reachable_nonterminals(grammar, nonterminal)
        _find_reachable_nonterminals(grammar, start_symbol)
        return reachable
    def unreachable_nonterminals(grammar: Grammar,
                                 start_symbol=START_SYMBOL) -> Set[str]:
        return grammar.keys() - reachable_nonterminals(grammar, start_symbol)
    def opts_used(grammar: Grammar) -> Set[str]:
        used_opts = set()
        for symbol in grammar:
            for expansion in grammar[symbol]:
                used_opts |= set(exp_opts(expansion).keys())
        return used_opts
    # Grammar的合法性判断，类似于编译器里面的语法检查
    def is_valid_grammar(grammar: Grammar,
                         start_symbol: str = START_SYMBOL, 
                         supported_opts: Set[str] = set()) -> bool:
        """Check if the given `grammar` is valid.
           `start_symbol`: optional start symbol (default: ``)
           `supported_opts`: options supported (default: none)"""
        defined_nonterminals, used_nonterminals = \
            def_used_nonterminals(grammar, start_symbol)
        if defined_nonterminals is None or used_nonterminals is None:
            return False
        # Do not complain about '' being not used,