title:Intrusion Detection in RBAC-administered Databases
author:Elisa Bertino and
Ashish Kamra and
Evimaria Terzi and
Athena Vakali
Intrusion Detection in RBAC-administered Databases ∗
Elisa Bertino
Purdue University
Ashish Kamra
Purdue University
PI:EMAIL
PI:EMAIL
Evimaria Terzi
University of Helsinki
Athena Vakali
Aristotle University
PI:EMAIL
PI:EMAIL
Abstract
A considerable effort has been recently devoted to the
development of Database Management Systems (DBMS)
which guarantee high assurance security and privacy. An
important component of any strong security solution is rep-
resented by intrusion detection (ID) systems, able to detect
anomalous behavior by applications and users. To date,
however, there have been very few ID mechanisms specif-
ically tailored to database systems. In this paper, we pro-
pose such a mechanism. The approach we propose to ID
is based on mining database traces stored in log ﬁles. The
result of the mining process is used to form user proﬁles
that can model normal behavior and identify intruders. An
additional feature of our approach is that we couple our
mechanism with Role Based Access Control (RBAC). Under
a RBAC system permissions are associated with roles, usu-
ally grouping several users, rather than with single users.
Our ID system is able to determine role intruders, that is,
individuals that while holding a speciﬁc role, have a be-
havior different from the normal behavior of the role. An
important advantage of providing an ID mechanism speciﬁ-
cally tailored to databases is that it can also be used to pro-
tect against insider threats. Furthermore, the use of roles
makes our approach usable even for databases with large
user population. Our preliminary experimental evaluation
on both real and synthetic database traces show that our
methods work well in practical situations.
1. Introduction
Data represent today an important asset. We see an in-
creasing number of organizations that collect data, very of-
ten concerning individuals, and use them for various pur-
∗
This material is based upon work supported by the National Science
Foundation under Grant No. 0430274 and the sponsors of CERIAS.
poses, ranging from scientiﬁc research, to demographic
trend analysis and marketing purposes. Organizations may
also give access to their data, or even release such data
to third parties. The increasing number of data sets be-
ing available, poses serious threats against the privacy
of individuals and organizations.
Since privacy is to-
day an important concern, several research efforts have
been devoted to address issues related to the development
of privacy-preserving data-management techniques, such
as anonymization [21] and other privacy-preserving data-
mining techniques [11, 23]. Those techniques however
mainly aim at modifying raw data before releasing them to
other parties. The problem of developing Database Man-
agement Systems (DBMS) with high-assurance privacy and
conﬁdentiality guarantees is not that trivial ([4]). To start
with, it requires a revision of architectures and techniques
adopted by current DBMS ([3]). In [3] it is also pointed out
that an important component of the new generation security-
aware DBMS is an Intrusion Detection (ID) mechanism.
ID systems speciﬁc to DBMS have not been much inves-
tigated before, whereas several ID approaches for networks
and operating systems exist. We believe that there are two
important reasons that motivate the development of DBMS-
speciﬁc ID systems. The ﬁrst is that actions malicious for
a database application are not necessarily malicious for the
network or the operating system; thus ID systems speciﬁ-
cally designed for the latter would not be effective for data-
base protection. The second, and more relevant motiva-
tion, is that ID systems designed for networks and oper-
ating systems are not adequate to protect databases against
insider threats, which is an important issue when dealing
with privacy. These threats are much more difﬁcult to de-
fend against, because they are from subjects that are legiti-
mate users of the system, and thus may have access rights to
data and resources. As an example, suppose that a clerk in
a hospital usually accesses the tables and corresponding at-
tributes containing the addresses of patients to whom billing
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply. 
information need to be send. Suppose now, that suddenly
this clerk issues a query accessing all attributes from the
relevant tables and retrieving all patient addresses at once.
Such a behavior, being so different from the normal behav-
ior, should at least raise an alarm. We believe that building
accurate proﬁles of legitimate user behavior and checking
user access patterns against such proﬁles guarantees better
control on the data usage, and it is a fundamental building
block of any privacy solution. In this paper we address this
problem by proposing a DBMS-speciﬁc ID system. It is im-
portant to note that our approach is based on the assumption
that these DBMS require a high degree of assurance and se-
curity and, hence, they have well deﬁned usage and access
control policies in place. In the absence of such policies,
like in the case when all users are allowed to randomly ac-
cess every part of the database, the anomalies will be not
well-deﬁned and therefore, non-trivial to detect.
1.1. Our Approach
One important fact that needs to be considered is that
databases typically have very large number of users. Thus,
keeping a proﬁle for each single user is not feasible in prac-
tice. We have thus based our approach on the well-known
role-based access control (RBAC) model; we build a pro-
ﬁle for each role and check the behavior of each role with
respect to such proﬁle. The RBAC model is widely used
for access-control management, both in closed and open
systems [10]. Authorizations are speciﬁed with respect to
roles and not with respect to individual users. One or more
roles are assigned to each user and privileges are assigned
to roles. Managing a few roles is much more efﬁcient than
managing many individual users. With respect to ID, us-
ing roles means that the number of proﬁles to build and
maintain is much smaller than those one would need when
considering individual users. Other important advantages of
RBAC are that it has been standardized (see the NIST model
[19]) and has been adopted in various commercial DBMS
products as well in security enterprise solutions [12]. This
implies that an ID solution, based on RBAC, could be de-
ployed very easily in practice.
In the paper, we develop our ID solution for RBAC data-
base systems and in this context, the problem we address is
as follows: how to build and maintain role proﬁles repre-
senting accurate and consistent user behavior; and how to
use these proﬁles for the intrusion detection task at hand.
The approach we follow relies on the use of intrusion-free
database traces to extract user behavior. We build role pro-
ﬁles using a classiﬁer. This classiﬁer is then used for detect-
ing anomalous behavior.
The main challenge in attacking the problem is to ex-
tract the right information from the database traces so that
accurate proﬁles can be built. To address this problem, we
Figure 1. Overview of the ID process
propose several representations for the database log records.
Each such representation is characterized by different gran-
ularity and correspondingly, by different accuracy levels.
By using those representations, we then address our prob-
lem as a standard classiﬁcation problem.
1.2. System Architecture
The system’s architecture consists of four main compo-
nents: the user that enters queries, the conventional DBMS
mechanism that handles the query evaluation process, the
database log ﬁles and the ID mechanism. The latter three
components constitute the new extended DBMS that is en-
hanced with an independent ID system, operating at the
database (application) level. The ﬂow of the interactions
are as follows (Figure 1). Every time a query is issued, the
database log ﬁles are updated.
In the training phase, the
intrusion detection system mines the existing log ﬁles and
forms role proﬁles. In the detection phase, for every new
query, the ID mechanism checks the query statement to de-
termine whether it is anomalous. If this is the case, an alarm
is raised. It should be noted that the role proﬁles are periodi-
cally updated (forming the New DB log in Figure 1), so that
they represent the most current and relevant role behavior
and false alarms are minimized.
1.3. Related Work
As we already mentioned, several approaches to ID at
the operating system and network level have been devel-
oped [5, 1, 13, 17, 22]. In addition to that, some schemes
have been proposed in the past related to developing an In-
trusion Detection mechanism for databases. Zhu et al. [9]
and Peng Liu [16] propose architectures for intrusion toler-
ant database systems. However, these approaches are more
focused on architectures for intrusion detection, and data-
base recovery in case of an attack rather than proposing
speciﬁc algorithms for performing the intrusion detection
task on a DBMS. Shu et al.
[24] also describe an archi-
tecture for securing web based database systems without
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply. 
proposing any speciﬁc intrusion detection schemes. Lee et
al. [14] describe a method for intrusion detection applica-
ble only to real-time database systems. Among the most
notable approaches towards a database-speciﬁc ID mecha-
nism are those of Hu et al. [8] and DEMIDS [6]. Hu et al.
provide mechanisms for ﬁnding dependency relationships
among transactions and use this information to ascertain
hidden anomalies in the database log. However, the work
which is conceptually most similar to our work is DEMIDS.
DEMIDS is a misuse detection system tailored to relational
database systems. It uses audit-log data to derive proﬁles
that describe typical users’ activities. The drawback of such
an approach, as mentioned earlier, is that the number of
users for a database system can be quite large and main-
taining/updating proﬁles for such large number of users is
not a trivial task. Moreover, the approach used by DEMIDS
to build user proﬁles assumes domain knowledge about the
data structures and semantics encoded in a given database
schema. This can adversely affect the general applicability
of their methods. We, on the other hand, propose to build
proﬁles using syntactic information from the SQL queries
which makes our approach more generic than others.
Other approaches to database security include privacy-
preserving DBMS. Architectures for hippocratic databases
[3] have been proposed as a mechanism to preserve the pri-
vacy of data they manage. But, even though the architec-
ture includes ID as a core component, it does not spec-
ify any methods for performing the ID task. Other re-
cent work related with privacy-preserving databases mainly
deals with topics such as data anonymization, privacy-
preserving data mining, or ﬁne-grained access control and
auditing [15, 2, 20].
1.4. Paper road map
Next section describes the format of the log records and
the three different representation levels we propose. Sec-
tion 3 describes in detail the classiﬁer used in our approach.
Section 4 reports experimental results on both synthetic and
real database traces. We conclude the paper by discussing
future work.
2. Preliminaries
In order to identify user behavior, we use the data-
base log ﬁles which are the primary source that naturally
comes to mind when information regarding users’ actions is
needed. We use the log-ﬁle entries, after being processed,
in order to form proﬁles of acceptable actions. Each entry
of the log ﬁle is represented as a separate data unit and then
these units are combined to form the desired proﬁles.
We assume that users of the database issue commands,
where each command is a different entry of the log ﬁle,
structured according to the SQL language. In particular, in
the case of queries such commands have the format:
SELECT [DISTINCT] {TARGET-LIST}
FROM
{RELATION-LIST}
In order to build proﬁles, we need to transform the log
ﬁle entries into a format that can be processed and analyzed.
Therefore, we represent each entry by a data basic unit that
contains three ﬁelds, and thus it is called triplet.
Triplets are our basic unit for viewing the log ﬁles and
are the basic components for forming user and role pro-
ﬁles, since subjects’ actions are characterized by sequences
of such triplets. Each triplet contains information about the
SQL command issued by the user, the set of relations ac-
cessed and the set of attributes within the relations that are
referenced in the command. Therefore, the abstract form of
such a command consists of three ﬁelds (SQL Command,
Relation Information, Attribute Information). For sake of
simplicity in the adopted notation, we represent a generic
triplet with T (c,R,A) 1, where c corresponds to the com-
mand, R to the relation information and A to the attribute
information.
Depending on the detail
required in the proﬁle-
construction and in the ID phase, we generate the triplets
from the log ﬁles entries according to three different strate-
gies, each characterized by a different amount of recorded
information.
The ﬁrst strategy generates triplets recording the least
amount of information. This strategy uses the so-called
coarse triplets or c-triplets which only record counters on
the number of relations and attributes required by a given
command. Therefore, c-triplets only model the cardinality
of the TARGET-LIST and RELATION-LIST, rather than
the speciﬁc elements they contain. The c-triplets are deﬁned
as follows:
Deﬁnition 1. A coarse triplet or c-triplet is a represen-
tation of a log record of the database log ﬁle. Each c-
triplet consists of 3 ﬁelds (SQL-CMD, REL-COUNTER,
ATTR-COUNTER). The ﬁrst ﬁeld is symbolic and corre-
sponds to the issued SQL command, while the other two are
numeric and correspond to the number of relations and at-
tributes involved in the issued SQL command, respectively.
In terms of the triplet notation T (), here both R and A
have one element each, corresponding to the number of re-
lations and attributes involved in the query respectively. Ap-
parently, a large amount of valuable information in the log
is ignored by the c-triples. It is however useful to consider
1Depending on the type of triplet the two arguments R and A can be
of different types, but for simplicity and clarity we allow the symbols to be
overloaded. Whenever the type of triplet is vital, we will explicitly specify
it. However, when it is not speciﬁed our claims hold for all types of triplets.
Additionally note that R and A can also be viewed generically as vectors.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply. 
such a “primitive” data unit since it is sufﬁcient in the case
of a small number of well-separated roles. Moreover, more
sophisticated representations of log ﬁle entries are based on
the deﬁnition of c-triplets.
The strategy records more information in the triplets
record more information than the ﬁrst one. Such a strat-
egy uses the so-called medium-grain triplets or m-triplets.
These triplets extend the coarse triplets by further exploiting
the information in the query-log entry. Again, the m-triplet
represents a single log entry of the database log ﬁle and we
further consider each relation of the database separately by
recording the number of attributes, accessed by the SQL
command at hand, of each such relation. In terms of the
triplet notation T (), R and A are vectors of the same size
which is equal to the number of relations in the database.
The m-triplets are deﬁned as follows:
Deﬁnition 2. A medium-grain triplet or m-triplet is a
data object which corresponds to a single entry of the
database log ﬁle and consists of 3 ﬁelds (SQL-CMD,
REL-BIN[], ATTR-COUNTER[]).
The ﬁrst ﬁeld is
symbolic and corresponds to the issued SQL command, the
second is a binary (bit) vector of size equal to the number
of relations in the database. This bit vector contains 1 in its
i-th position if the i-th relation is included in the SQL com-
mand. The third ﬁeld of the triplet is a vector of size equal
to the size of the REL-BIN[] vector. The i-th element of
the ATTR-COUNTER[] vector corresponds to the number
of attributes of the i-th relation that are involved in the SQL
command.
Finally, the third strategy is the one that extracts the
largest amount of information from the log ﬁles. This strat-
egy uses the so-called ﬁne triplets or f-triplets; their struc-
ture is similar to that of the m-triplets. In particular, the ﬁrst
two ﬁelds of the f-triplets are the same of the m-triplets. F-
triplets and m-triplets only differ for the third ﬁeld which
in the f-triplets is a vector, called BIN-ATTR[[]], of vec-
tors. The i−th element of BIN-ATTR[[]] is a vector cor-
responding to the i-th relation of the database and having
size equal to the number of attributes of relation i. The vec-
tor elements are binary values indicating whether speciﬁc
attributes of the relation i have been used by the SQL com-
mand.
Here, R is a vector of size equal to the number of rela-
tions in the database while A is a vector of the same size,
but with each element i being a vector of size equal to the
number of attributes in relation i. The formal deﬁnition of
the f-triplets is as follows:
Deﬁnition 3. A ﬁne triplet or f-triplet is a detailed repre-
sentation of a log entry. It consists of 3 ﬁelds (SQL-CMD,
REL-BIN[], ATTR-BIN[[]]). The ﬁrst ﬁeld is sym-
bolic and corresponds to the issued SQL command, the
second is a binary vector that contains 1 in its i-th posi-
tion if the i-th relation is included in the issued SQL com-
mand. The third ﬁeld is a vector of N vectors, where
N is the number of relations in the database. Element
ATTR-BIN[i][j] = 1 if the SQL command at hand ac-
cesses the j-th attribute of the i-th relation and 0 otherwise.
Table 1 shows two SQL commands corresponding to se-
lect statements and their representations according to the
three different types of triplet. In the example we consider
a database consisting of two relations R1 = {A1, B1, C1}
and R2 = {B2, D2, E2}.
3. Classiﬁer
This section describes in detail the classiﬁer that has
been used for forming the proﬁles as well as for deciding
when to raise an intrusion alarm. Because information re-
lated to the roles of individuals is available from the data-
base traces, the problem at hand is transformed into a clas-
siﬁcation (supervised learning) problem and has been ad-
dressed as such. For starters, we describe a standard method
of solving the classiﬁcation problem using the Naive Bayes
Classiﬁer. Despite some modeling assumptions that one
would expect to degrade the performance of the classiﬁer,
Naive Bayes classiﬁer has several properties that make it
surprisingly useful in practice. Like all probabilistic clas-
siﬁers under the Maximum Aposteriori Probability (MAP)
decision rule, it arrives at the correct classiﬁcation as long as
the correct class is more probable than any other class; class
probabilities do not have to be estimated very well. In other