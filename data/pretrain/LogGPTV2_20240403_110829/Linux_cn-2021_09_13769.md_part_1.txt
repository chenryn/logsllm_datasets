---
author: Chris Hermansen
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 2876
date: '2021-09-10 07:57:59'
editorchoice: false
excerpt: 外部库填补了 Java 核心库中的一些功能空白。
fromurl: https://opensource.com/article/20/2/external-libraries-java
id: 13769
islctt: true
largepic: /data/attachment/album/202109/10/075749s65x89uzxj8x5kq9.jpg
permalink: /article-13769-1.html
pic: /data/attachment/album/202109/10/075749s65x89uzxj8x5kq9.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 外部库填补了 Java 核心库中的一些功能空白。
tags:
- Java
thumb: false
title: 在 Java 中使用外部库
titlepic: true
translator: unigeorge
updated: '2021-09-10 07:57:59'
---
> 
> 外部库填补了 Java 核心库中的一些功能空白。
> 
> 
> 
![](/data/attachment/album/202109/10/075749s65x89uzxj8x5kq9.jpg "books in a library, stacks")
Java 自带有一组核心库，其中包含了定义常用数据类型和相关行为的库（例如 `String` 和 `Date`）、与主机操作系统交互的实用程序（例如 `System` 和 `File`），以及一些用来管理安全性、处理网络通信、创建或解析 XML的有用的子系统。鉴于核心库的丰富性，程序员通常很容易在其中找到有用的组件，以减少需要编写的代码量。
即便如此，核心库仍有一些功能上的不足，因此发现这些不足的程序员们还额外创建了很多有趣的 Java 库。例如，[Apache Commons](https://commons.apache.org/)“是一个专注于可重用 Java 组件所有方面的 Apache 项目”，提供了大约 43 个开源库的集合（截至撰写本文时），涵盖了 Java 核心库之外的一系列功能 （例如 [geometry](https://commons.apache.org/proper/commons-geometry/) 或 [statistics](https://commons.apache.org/proper/commons-statistics/)），并增强或替换了 Java 核心库中的原有功能（例如 [math](https://commons.apache.org/proper/commons-math/) 或 [numbers](https://commons.apache.org/proper/commons-numbers/)）。
另一种常见的 Java 库类型是系统组件的接口（例如数据库系统接口），本文会着眼于使用此类接口连接到 [PostgreSQL](https://opensource.com/article/19/11/getting-started-postgresql) 数据库，并得到一些有趣的信息。首先，我们来回顾一下库的重要部分。
### 什么是库？
 库   library 里自然包含的是一些有用的代码。但为了发挥用处，代码需要以特定方式进行组织，特定的方式使 Java 程序员可以访问其中组件来解决手头问题。
可以说，一个库最重要的部分是它的应用程序编程接口（API）文档。这种文档很多人都熟悉，通常是由 [Javadoc](https://en.wikipedia.org/wiki/Javadoc) 生成的。Javadoc 读取代码中的结构化注释并以 HTML 格式输出文档，通常 API 的  包   package  在页面左上角的面板中显示， 类   class  在左下角显示，同时右侧会有库、包或类级别的详细文档（具体取决于在主面板中选择的内容）。例如，[Apache Commons Math 的顶级 API 文档](https://commons.apache.org/proper/commons-math/apidocs/index.html) 如下所示：
![API documentation for Apache Commons Math](/data/attachment/album/202109/10/075802g5nlrmmlxgwcb325.png "API documentation for Apache Commons Math")
单击主面板中的包会显示该包中定义的 Java 类和接口。例如，[org.apache.commons.math4.analysis.solvers](https://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math4/analysis/solvers/package-summary.html) 显示了诸如 `BisectionSolver` 这样的类，该类用于使用二分算法查找单变量实函数的零点。单击 [BisectionSolver](https://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math4/analysis/solvers/BisectionSolver.html) 链接会列出 `BisectionSolver` 类的所有方法。
这类文档可用作参考文档，不适合作为学习如何使用库的教程。比如，如果你知道什么是单变量实函数并查看包 `org.apache.commons.math4.analysis.function`，就可以试着使用该包来组合函数定义，然后使用 `org.apache.commons.math4.analysis.solvers` 包来查找刚刚创建的函数的零点。但如果你不知道，就可能需要更多学习向的文档，也许甚至是一个实际例子，来读懂参考文档。
这种文档结构还有助于阐明  包   package （相关 Java 类和接口定义的集合）的含义，并显示特定库中捆绑了哪些包。
这种库的代码通常是在 [.jar 文件](https://en.wikipedia.org/wiki/JAR_(file_format)) 中，它基本上是由 Java 的 `jar` 命令创建的 .zip 文件，其中还包含一些其他有用的信息。.jar 文件通常被创建为构建过程的端点，该构建过程编译了所定义包中的所有 .java 文件。
要访问外部库提供的功能，有两个主要步骤：
1. 确保通过类路径（或者命令行中的 `-cp` 参数或者 `CLASSPATH` 环境变量），库可用于 Java 编译步骤（[javac](https://en.wikipedia.org/wiki/Javac)）和执行步骤（`java`）。
2. 使用恰当的 `import` 语句访问程序源代码中的包和类。
其余的步骤就与使用 `String` 等 Java核心类相同，使用库提供的类和接口定义来编写代码。很简单对吧？不过也没那么简单。首先，你需要了解库组件的预期使用模式，然后才能编写代码。
### 示例：连接 PostgreSQL 数据库
在数据库系统中访问数据的典型使用步骤是：
1. 访问正在使用的特定数据库软件代码。
2. 连接到数据库服务器。
3. 构建查询字符串。
4. 执行查询字符串。
5. 针对返回的结果，做需要的处理。
6. 断开与数据库服务器的连接。
所有这些面向程序员的部分由接口包 [java.sql](https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html) 提供，它独立于数据库，定义了核心客户端 Java 数据库连接（JDBC）API。`java.sql` 包是 Java 核心库的一部分，因此无需提供 .jar 文件即可编译。但每个数据库提供者都会创建自己的 `java.sql` 接口实现（例如 `Connection` 接口），并且必须在运行步骤中提供这些实现。
接下来我们使用 PostgreSQL，看看这一过程是如何进行的。
#### 访问特定数据库的代码
以下代码使用 [Java 类加载器](https://en.wikipedia.org/wiki/Java_Classloader)（`Class.forName()` 调用）将 PostgreSQL 驱动程序代码加载到正在执行的虚拟机中：
```
import java.sql.*;
public class Test1 {
    public static void main(String args[]) {
        // Load the driver (jar file must be on class path) [1]
        try {
            Class.forName("org.postgresql.Driver");
            System.out.println("driver loaded");
        } catch (Exception e1) {
            System.err.println("couldn't find driver");
            System.err.println(e1);
            System.exit(1);
        }
        // If we get here all is OK
        System.out.println("done.");
    }
}
```
因为类加载器可能失败，失败时会抛出异常，所以将对 `Class.forName()` 的调用放在 `try-catch` 代码块中。
如果你使用 `javac` 编译上面的代码，然后用 `java` 运行，会报异常：
```
me@mymachine:~/Test$ javac Test1.java
me@mymachine:~/Test$ java Test1
couldn't find driver
java.lang.ClassNotFoundException: org.postgresql.Driver
me@mymachine:~/Test$
```
类加载器要求类路径中有包含 PostgreSQL JDBC 驱动程序实现的 .jar 文件：
```
me@mymachine:~/Test$ java -cp ~/src/postgresql-42.2.5.jar:. Test1
driver loaded
done.
me@mymachine:~/Test$
```
#### 连接到数据库服务器
以下代码实现了加载 JDBC 驱动程序和创建到 PostgreSQL 数据库的连接：
```
import java.sql.*;
public class Test2 {
        public static void main(String args[]) {
                // Load the driver (jar file must be on class path) [1]