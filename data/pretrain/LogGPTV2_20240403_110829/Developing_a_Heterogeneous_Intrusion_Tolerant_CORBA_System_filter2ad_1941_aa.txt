title:Developing a Heterogeneous Intrusion Tolerant CORBA System
author:David Sames and
Brian Matt and
Brian Niebuhr and
Gregg Tally and
Brent Whitmore and
David E. Bakken
Developing a Heterogeneous Intrusion Tolerant CORBA System 
David Sames, Brian Matt, Brian Niebuhr, Gregg 
Tally, Brent Whitmore 
Distributed Systems Security Department 
NAI Labs - Network Associates, Inc 
3060 Washington Road 
Glenwood, MD 21738 USA 
{ dsames, brian_matt, bniebuhr, gtally 
bwhitmore}@nai.com 
Abstract 
to  provide 
research  project1 
Intrusion  Tolerant  systems  provide  high-integrity 
and  high-availability  services  to  their  clients  in  the 
face  of  successful  attacks  from  an  adversary.  The 
Intrusion  Tolerant  Distributed  Object  Systems 
is  developing  an 
(ITDOS) 
architecture  for  a  heterogeneous  intrusion  tolerant 
distributed  object  system. 
integrates  a 
Byzantine  Fault  Tolerant  multicast  protocol  into  an 
open-source  CORBA  ORB 
Intrusion 
Tolerant  middleware.  This  foundation  allows  up  to  f 
simultaneous  Byzantine  failures  of  replicated  servers 
in  a  system  of  at  least  3f+1  replicas.  Voting  on 
unmarshalled CORBA messages allows heterogeneous 
application 
for  a  given  service, 
allowing  for  greater  diversity  in  implementation  and 
greater  survivability.  Symmetric  encryption  session 
keys generated by distributed pseudo-random function 
techniques 
client-server 
communications.    This  paper  overviews  the  ITDOS 
architecture,  discusses  some  of 
the  challenging 
technical  issues  related  to  intrusion  tolerance  in 
heterogeneous  middleware  systems,  and  offers  views 
on future areas of work. 
implementations 
confidential 
ITDOS 
provide 
1. Introduction 
Intrusion  prevention  mechanisms  and  technologies 
cannot  always  prevent  a  well-funded  and  persistent 
adversary 
information  systems.  
Mission-critical  systems  require  intrusion tolerance  in 
order to provide correct system operation even after an 
from  penetrating 
1 This research performed under DARPA contract F30602-00-C-
0183. 
David Bakken 
School of Electrical Engineering and Computer 
Science 
Washington State University 
PO Box 642752 
Pullman, WA 99164-2752 USA 
PI:EMAIL 
attacker  has  successfully  breached  the  prevention 
mechanisms.  Middleware  is  one  area  where  a  system 
can  provide  intrusion tolerance.  Middleware  is a  very 
useful  category of software that removes much of the 
tedium of distributed systems programming and shields 
programmers from having to deal with numerous kinds 
of  heterogeneity  inherent  in  a  distributed  system  [1].  
Distributed  object  middleware  is  considered  the  most 
general  kind  of  middleware, and  the  Common  Object 
Request  Broker  Architecture  (CORBA)  [29]  is  a 
widely  adopted  standard 
for  distributed  object 
middleware. Middleware provides an ideal platform for 
intrusion  tolerance  extensions  because  it  allows  for  a 
variety of applications to be built that can transparently 
take advantage of the intrusion tolerance properties of 
the  middleware,  eliminating  the  need  for  custom 
solutions for each application. 
The  goal  of  our  framework,  Intrusion  Tolerant 
Distributed  Object  Systems  (ITDOS)  [14] is  to  create 
an  architecture  for  CORBA-based  distributed  object 
systems  that  can  provide  high  reliability  for  mission-
critical  information  systems  by  tolerating  Byzantine 
[17] (arbitrary) faults in object servers. From a system-
level  point  of  view, 
this  architecture  provides 
additional security in the form of a firewall proxy that 
can monitor BFTM messages at the enclave boundary. 
This  paper  does  not  discuss  the  firewall  proxy  for 
reasons of brevity. In ITDOS, symmetric session keys 
provide 
each 
association of client and server.  
communications 
confidential 
for 
One  prior  distributed  object  middleware  research 
project  that  has  focused  on  tolerating  Byzantine 
the  voting 
failures 
is 
mechanism 
heterogeneous 
environments.    Presently,  the  ITUA  project  [41] 
Immune 
does 
[25],  however, 
support 
not 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:17 UTC from IEEE Xplore.  Restrictions apply. 
focuses  on 
tolerating  Byzantine 
failures  by 
unpredictability and adaptation, but uses a local proxy 
to  integrate  with  the  application  as  opposed  to 
replacing  the  transport.  Most  other  Byzantine  fault 
tolerant  multicast  (BFTM)  systems  to  date  have  not 
supported  standard  distributed  object  programming 
models [36, 6].  
The  paper  makes  the  following  contributions  by 
describing: 
•  An  approach 
for  allowing  heterogeneous 
Intrusion Tolerant CORBA architectures using 
active replication  
•  Techniques  for  providing  intrusion  tolerant 
symmetric key generation  
•  An  approach  for  virtual  connection  semantics 
over multicast 
•  An  approach  for  state  synchronization  that  is 
scalable to large object servers. 
The remainder of this paper is organized as follows. 
Section 2 provides a description of the system model, 
including an overview of the architecture, assumptions, 
and threats addressed. Section 3 addresses the technical 
challenges  and  solutions  to  significant  issues  in  the 
architecture.  Section  4  reviews  related  work,  while 
Section 5 provides our conclusions. Finally, Section 6 
provides a look at future directions for our work. 
2. System Model 
The concept of operations for an ITDOS system is 
fairly  simple.  An  ITDOS  CORBA  client  invokes  an 
operation  on  an  ITDOS  CORBA  server.  The  server 
carries  out  that  operation,  either  independently,  or  by 
making  invocations  on  other  CORBA  servers,  and 
Client Application
Client Application
Code
Code
IT ORB (TAO)
IT ORB (TAO)
Voter
Voter
Marshalling
Marshalling
Secure, Reliable 
Secure, Reliable 
Multicas t
Multicas t
IP Multicas t
IP Multicas t
Client-Side
Client-Side
Firewall
Firewall
Firewall
Firewall
IT-CORBA
IT-CORBA
Proxy
Proxy
(Secure, 
(Secure, 
Reliable 
Reliable 
Multicas t)
Multicas t)
returns  a  result  to  that  client.  Figure  1  illustrates  a 
nominal configuration. 
than 
  That  system  contains  not  more 
However, ITDOS modifies the traditional notion of 
a CORBA server, in that a “server” is an asynchronous 
system of deterministic communicating state machines 
[37]. 
f 
simultaneously  faulty  processes  and  at  least  3f  +  1 
processes  in  all  [4].    ITDOS  requires  a  minimum  of 
3f+1  replicated  state  machines  to  tolerate  arbitrary 
traitorous  behavior  by  f  state  machines.  Each  state 
machine  in  the  system  is  implemented  as  a  CORBA 
server; the server hosts objects  for access  by CORBA 
clients.    Furthermore,  each  state  machine  for  a  given 
system hosts the same CORBA objects as the others in 
that  system. 
  Since  ITDOS  performs  voting  in 
middleware to support heterogeneous implementations, 
all  invocations  on  objects  must  pass  through  the 
middleware layer equally; that is, if one state machine 
invokes  operations  on an  object  remotely  (so  that the 
invocation  passes 
then  all 
replicated  state  machines  in  that  group  must  invoke 
operations  on  that  object  remotely.    We  term  an 
individual process in the system a replication domain 
element. 
  The  collection  of  replication  domain 
elements  is  a  replication  domain.  ITDOS  uses  active 
replication 
the  same  state  of  each 
replication  domain  element  [10];  a  client  request  is 
delivered  to  each  replication  domain  element  in  a 
replication domain by a totally ordered, BFT multicast 
protocol.    Each  replication  domain  element  executes 
the invocation and returns its result to the client in the 
same fashion.  
through  middleware), 
to  maintain 
Like  many  CORBA  systems  where  servers  can,  in 
turn,  be  clients,  ITDOS  provides  the  ability  for  one 
replication domain to be a client to another replication 
Server-Side
Server-Side
Firewalls
Firewalls
Firewall
Firewall
IT-CORBA
IT-CORBA
Proxy
Proxy
Firewall
Firewall
IT-CORBA
IT-CORBA
Proxy
Proxy
Firewall
Firewall
IT-CORBA
IT-CORBA
Proxy
Proxy
Replic ation
Replic ation
Domain
Domain
Server
Server
Application
Application
Code
Code
IT ORB
IT ORB
Server
Server
Application
Application
Code
Code
IT ORB
IT ORB
Server
Server
Application
Application
Code
Code
IT ORB
IT ORB
Replic ation 
Replic ation 
Domain 
Domain 
Element
Element
Group
Group
Mgr
Mgr
Group
Group
Mgr
Mgr
Group
Group
Mgr
Mgr
Figure 1. Singleton Client and Replicated Server 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:17 UTC from IEEE Xplore.  Restrictions apply. 
  ITDOS  supports  replicated  clients  and 
domain. 
servers, as well as singleton clients.  Our architecture 
currently  does  not  support  replicated  clients  invoking 
operations  on  singleton  servers;  however  extending 
ITDOS  to  include  that  capability  would  not  be  too 
difficult,  since  the  voting  mechanism  required  is 
already used by the replication domain elements. 
The  objects 
for  each  server  perform  only 
deterministic  operations.    Furthermore,  the  servers 
must execute deterministically.  Without determinism, 
it is impossible to differentiate between arbitrary faults 
in  the  system  and  non-deterministic  behavior.    To 
reduce  complexity  and  help  ensure  deterministic 
behavior,  each  replication  domain  element  employs  a 
single-threaded execution model. 
In  this  system,  faulty  processes  in  a  replication 
domain are detected primarily by processes external to 
it;  either  by  clients  receiving  a  faulty  result,  or  other 
servers receiving a faulty request. “Faulty” in this case 
is  a  value  that  doesn’t  match  the  majority  of  other 