# Title: Developing a Heterogeneous Intrusion Tolerant CORBA System

**Authors:**  
David Sames, Brian Matt, Brian Niebuhr, Gregg Tally, Brent Whitmore, and David E. Bakken

**Affiliations:**
- **Distributed Systems Security Department, NAI Labs - Network Associates, Inc.**  
  3060 Washington Road, Glenwood, MD 21738, USA  
  Email: {dsames, brian_matt, bniebuhr, gtally, bwhitmore}@nai.com
- **School of Electrical Engineering and Computer Science, Washington State University**  
  PO Box 642752, Pullman, WA 99164-2752, USA  
  Email: dbakken@wsu.edu

## Abstract
Intrusion Tolerant (IT) systems provide high-integrity and high-availability services to their clients, even in the face of successful attacks from an adversary. The Intrusion Tolerant Distributed Object Systems (ITDOS) project is developing an architecture for a heterogeneous, intrusion-tolerant distributed object system. This architecture integrates a Byzantine Fault Tolerant (BFT) multicast protocol into an open-source CORBA ORB, forming the foundation of IT middleware. This foundation allows the system to tolerate up to \( f \) simultaneous Byzantine failures in a system with at least \( 3f+1 \) replicas. Voting on unmarshalled CORBA messages enables the use of heterogeneous application implementations for a given service, enhancing diversity and survivability. Symmetric encryption session keys, generated using distributed pseudo-random function techniques, ensure confidential client-server communications. This paper provides an overview of the ITDOS architecture, discusses the technical challenges related to intrusion tolerance in heterogeneous middleware systems, and outlines future areas of work.

## 1. Introduction
Intrusion prevention mechanisms and technologies cannot always prevent a well-funded and persistent adversary from penetrating mission-critical information systems. To ensure correct system operation even after an attacker has breached the prevention mechanisms, these systems require intrusion tolerance. Middleware is a key area where such tolerance can be provided. Middleware simplifies distributed systems programming by abstracting away the complexities of heterogeneity [1]. Distributed object middleware, particularly the Common Object Request Broker Architecture (CORBA) [29], is widely adopted and provides a general platform for building applications. By extending middleware with intrusion tolerance, a variety of applications can transparently benefit from these properties, eliminating the need for custom solutions.

The goal of our framework, Intrusion Tolerant Distributed Object Systems (ITDOS) [14], is to create an architecture for CORBA-based distributed object systems that can provide high reliability for mission-critical information systems by tolerating Byzantine faults [17] in object servers. From a system-level perspective, this architecture enhances security through a firewall proxy that monitors BFTM messages at the enclave boundary. For brevity, this paper does not discuss the firewall proxy. In ITDOS, symmetric session keys ensure confidential communications between each client and server.

One prior distributed object middleware research project, the Immune Project [41, 25], focuses on tolerating Byzantine failures through unpredictability and adaptation but uses a local proxy to integrate with the application rather than replacing the transport. Most other BFT multicast (BFTM) systems do not support standard distributed object programming models [36, 6].

This paper makes the following contributions:
- An approach for allowing heterogeneous Intrusion Tolerant CORBA architectures using active replication.
- Techniques for providing intrusion-tolerant symmetric key generation.
- An approach for virtual connection semantics over multicast.
- A scalable state synchronization approach for large object servers.

The remainder of this paper is organized as follows: Section 2 describes the system model, including an overview of the architecture, assumptions, and threats. Section 3 addresses the technical challenges and solutions in the architecture. Section 4 reviews related work, while Section 5 provides conclusions. Finally, Section 6 outlines future directions for our work.

## 2. System Model
The operational concept for an ITDOS system is straightforward. An ITDOS CORBA client invokes an operation on an ITDOS CORBA server. The server executes the operation, either independently or by invoking other CORBA servers, and returns a result to the client. Figure 1 illustrates a nominal configuration.

However, ITDOS modifies the traditional notion of a CORBA server, defining a "server" as an asynchronous system of deterministic communicating state machines [37]. The system contains no more than \( f \) simultaneously faulty processes and at least \( 3f + 1 \) processes in total [4]. ITDOS requires a minimum of \( 3f+1 \) replicated state machines to tolerate arbitrary traitorous behavior by \( f \) state machines. Each state machine is implemented as a CORBA server, hosting objects for access by CORBA clients. All state machines in a given system host the same CORBA objects. Since ITDOS performs voting in middleware to support heterogeneous implementations, all invocations on objects must pass through the middleware layer equally. If one state machine invokes operations on an object remotely, all replicated state machines in the group must do the same. We term an individual process in the system a replication domain element, and the collection of these elements forms a replication domain. ITDOS uses active replication to maintain the same state across all replication domain elements [10]. A client request is delivered to each element in a replication domain via a totally ordered, BFT multicast protocol. Each element executes the invocation and returns its result to the client in the same manner.

Like many CORBA systems, ITDOS supports both replicated and singleton clients and servers. Our current architecture does not support replicated clients invoking operations on singleton servers, but extending this capability would be feasible since the required voting mechanism is already used by the replication domain elements.

The objects in each server perform only deterministic operations, and the servers themselves must execute deterministically. Without determinism, it is impossible to differentiate between arbitrary faults and non-deterministic behavior. To reduce complexity and ensure deterministic behavior, each replication domain element employs a single-threaded execution model.

In this system, faulty processes in a replication domain are primarily detected by external processes, either by clients receiving a faulty result or by other servers receiving a faulty request. A "faulty" value is one that does not match the majority of other values.

![Figure 1. Singleton Client and Replicated Server](figure1.png)

---

**Note:** The figure referenced in the text should be included as an image file (e.g., `figure1.png`) in the final document.