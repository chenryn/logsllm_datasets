    0:000> ?? vp[2].asBits_ 
    unsigned int64 0xfffe01fc`e637e1c0
    0:000> dt js::NativeObject 1fc`e637e1c0 shapeOrExpando_ # 可以这样连着写
       +0x008 shapeOrExpando_ : 0x000001fc`e63ae880 Void
    0:000> ?? ((js::shape*)0x000001fc`e63ae880)
    class js::Shape * 0x000001fc`e63ae880
       +0x000 base_            : js::GCPtr
       +0x008 propid_          : js::PreBarriered  # 存储prop信息
       +0x010 immutableFlags   : 0x2000001 #低位存slot number 
       +0x014 attrs            : 0x1 ''
       +0x015 mutableFlags     : 0 ''
       +0x018 parent           : js::GCPtr
       +0x020 kids             : js::KidsPointer
       +0x020 listp            : (null) 
    0:000> ?? ((js::shape*)0x000001fc`e63ae880)->propid_.value
    struct jsid
       +0x000 asBits           : 0x000001fc`e63a7e20
    0:000> ?? (char*)((JSString*)0x000001fc`e63a7e20)->d.inlineStorageLatin1
    char * 0x000001fc`e63a7e28
     "blah"
shape objects 直接通过链表连接(.parent)
    0:000> ?? ((js::shape*)0x000001fc`e63ae880)->parent.value
    class js::Shape * 0x000001fc`e63ae858
       +0x000 base_            : js::GCPtr
       +0x008 propid_          : js::PreBarriered
       +0x010 immutableFlags   : 0x2000000
       +0x014 attrs            : 0x1 ''
       +0x015 mutableFlags     : 0x2 ''
       +0x018 parent           : js::GCPtr
       +0x020 kids             : js::KidsPointer
       +0x020 listp            : 0x000001fc`e63ae880 js::GCPtr
    0:000> ?? ((js::shape*)0x000001fc`e63ae880)->parent.value->propid_.value
    struct jsid
       +0x000 asBits           : 0x000001fc`e633d700
    0:000> ?? (char*)((JSString*)0x000001fc`e633d700)->d.inlineStorageLatin1
    char * 0x000001fc`e633d708
     "foo"
B和A的property信息是相同的，所以他们使用相同的shape: `0x000001fc e63ae880`
    # address(B)处断下
    0:000> ?? vp[2].asBits_
    unsigned int64 0xfffe01fc`e637e1f0
    0:000> dt js::NativeObject 1fc`e637e1f0 shapeOrExpando_
       +0x008 shapeOrExpando_ : 0x000001fc`e63ae880 Void
C相比A和B增加了一个property，来看看他有什么变化，
    # address(C)处断下
    0:000> ?? vp[2].asBits_
    union JS::Value
       +0x000 asBits_          : 0xfffe01e7`c247e1c0
    0:000> dt js::NativeObject 1fc`e637e1f0 shapeOrExpando_
       +0x008 shapeOrExpando_ : 0x000001fc`e63b10d8 Void
    0:000> ?? ((js::shape*)0x000001fc`e63b10d8)
    class js::Shape * 0x000001fc`e63b10d8
       +0x000 base_            : js::GCPtr
       +0x008 propid_          : js::PreBarriered
       +0x010 immutableFlags   : 0x2000002
       +0x014 attrs            : 0x1 ''
       +0x015 mutableFlags     : 0 ''
       +0x018 parent           : js::GCPtr
       +0x020 kids             : js::KidsPointer
       +0x020 listp            : (null) 
    0:000> ?? ((js::shape*)0x000001fc`e63b10d8)->propid_.value
    struct jsid
       +0x000 asBits           : 0x000001fc`e63a7e60
    0:000> ?? (char*)((JSString*)0x000001fc`e63a7e60)->d.inlineStorageLatin1
    char * 0x000001fc`e63a7e68
     "another"
    0:000> ?? ((js::shape*)0x000001fc`e63b10d8)->parent.value
    class js::Shape * 0x000001fc`e63ae880 # 这个是A、B的shape
C使用一个新的shape对象，他的parent指针指向A、B的shape对象，形成链表结构
图示如下：
**value**
value存在elements_中，各个value依次排列。 通过shape对象immutableFlags中的值作为索引把prop和value联系起来。
    0:000> ?? vp[2].asBits_
    unsigned int64 0xfffe01fc`e637e1c0  
    0:000> ?? vp[2].asBits_
    unsigned int64 0xfffe01fc`e637e1c0
    0:000> dt js::NativeObject 1fce637e1c0
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : 0x000001fc`e63ae880 Void
       +0x010 slots_           : (null) 
       +0x018 elements_        : 0x00007ff7`7707dac0 js::HeapSlot
    0:000> dqs 1fc`e637e1c0
    000001fc`e637e1c0  000001fc`e637a520
    000001fc`e637e1c8  000001fc`e63ae880
    000001fc`e637e1d0  00000000`00000000
    000001fc`e637e1d8  00007ff7`7707dac0 js!emptyElementsHeader+0x10
    000001fc`e637e1e0  fff88000`00000539  ?? (char*)((JSString*)0x1fce63a7e40)->d.inlineStorageLatin1
    char * 0x000001fc`e63a7e48
     "doar-e"
###  更多类型
按照上面的方法可以把感兴趣的类型都看一看，这里举一些例子。
windbg打开可执行文件js.exe，参数填写`-i` ,在交互模式下调试
    js> const br = Math.atan2;
    js> const od = objectAddress;
    js> ar=new Array(1,2,3,4)
    [1, 2, 3, 4]
    js> u8a = new Uint8Array(16)
    ({0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0})
    js> u32a = new Uint32Array(16)
    ({0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0})
    js> ab = new ArrayBuffer(100)
    ({})
    js> od(ar)
    "00000246ABA01B00"
    js> od(u8a)
    "00000246ABA01B60"
    js> od(u32a)
    "00000246ABA01BC0"
    js> od(ab)
    "00000246ABB94080"
    js>
    0:001> dqs 00000246ABA01B00 # ar=new Array(1,2,3,4)
    00000246`aba01b00  00000246`abb7acd0 # group??
    00000246`aba01b08  00000246`abb997e8 # shapes
    00000246`aba01b10  00000000`00000000 # slot
    00000246`aba01b18  00000246`aba01b30 # 数据指针 element
    00000246`aba01b20  00000004`00000000 # ?
    00000246`aba01b28  00000004`00000006 # ?
    00000246`aba01b30  fff88000`00000001 # 数据
    00000246`aba01b38  fff88000`00000002
    00000246`aba01b40  fff88000`00000003
    00000246`aba01b48  fff88000`00000004
    00000246`aba01b50  2f2f2f2f`2f2f2f2f
    00000246`aba01b58  2f2f2f2f`2f2f2f2f
    00000246`aba01b60  00000246`abb7ae50
    00000246`aba01b68  00000246`abbb3038
    00000246`aba01b70  00000000`00000000
    00000246`aba01b78  00007ff7`10eedac0 js!emptyElementsHeader+0x10
    0:001> ?? ( js::ArrayObject * )0x0000246ABA01B00 
    class js::ArrayObject * 0x00000246`aba01b00
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : 0x00000246`abb997e8 Void
       +0x010 slots_           : (null) 
       +0x018 elements_        : 0x00000246`aba01b30 js::HeapSlot
       =00007ff7`10ebed88 class_           : js::Class
    0:001> dqs 00000246ABA01B60   # u8a = new Uint8Array(16)
    00000246`aba01b60  00000246`abb7ae50 # group
    00000246`aba01b68  00000246`abbb3038 # shape
    00000246`aba01b70  00000000`00000000 # slot
    00000246`aba01b78  00007ff7`10eedac0 js!emptyElementsHeader+0x10
    00000246`aba01b80  fffa0000`00000000 # BUFFER_SLOT
    00000246`aba01b88  fff88000`00000010 # 长度 LENGTH_SLOT
    00000246`aba01b90  fff88000`00000000 # BYTEOFFSET_SLOT
    00000246`aba01b98  00000246`aba01ba0 #数据指针 DATA_SLOT
    00000246`aba01ba0  00000000`00000000 #数据 Inline data
    00000246`aba01ba8  00000000`00000000
    00000246`aba01bb0  2f2f2f2f`2f2f2f2f
    00000246`aba01bb8  2f2f2f2f`2f2f2f2f
    00000246`aba01bc0  00000246`abb7af10
    00000246`aba01bc8  00000246`abbb3178
    00000246`aba01bd0  00000000`00000000
    00000246`aba01bd8  00007ff7`10eedac0 js!emptyElementsHeader+0x10
    0:001> ?? (js::ArrayBufferViewObject *) 0x0000246ABA01B60
    class js::ArrayBufferViewObject * 0x00000246`aba01b60
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : 0x00000246`abbb3038 Void
       +0x010 slots_           : (null) 
       +0x018 elements_        : 0x00007ff7`10eedac0 js::HeapSlot
    0:001> dqs 00000246ABA01BC0  # u32a = new Uint32Array(16)
    00000246`aba01bc0  00000246`abb7af10
    00000246`aba01bc8  00000246`abbb3178
    00000246`aba01bd0  00000000`00000000
    00000246`aba01bd8  00007ff7`10eedac0 js!emptyElementsHeader+0x10
    00000246`aba01be0  fffa0000`00000000
    00000246`aba01be8  fff88000`00000010
    00000246`aba01bf0  fff88000`00000000
    00000246`aba01bf8  00000246`aba01c00
    00000246`aba01c00  00000000`00000000
    00000246`aba01c08  00000000`00000000
    00000246`aba01c10  00000000`00000000
    00000246`aba01c18  00000000`00000000
    00000246`aba01c20  00000000`00000000
    00000246`aba01c28  00000000`00000000
    00000246`aba01c30  00000000`00000000
    00000246`aba01c38  00000000`00000000
    0:001> dqs 00000246ABB94080  # ab = new ArrayBuffer(100)
    00000246`abb94080  00000246`abb7afa0
    00000246`abb94088  00000246`abbb3380
    00000246`abb94090  00000000`00000000
    00000246`abb94098  00007ff7`10eedac0 js!emptyElementsHeader+0x10
    00000246`abb940a0  00000123`55f81020 # 数据指针（要移位）
    00000246`abb940a8  fff88000`00000064 # 长度
    00000246`abb940b0  fffa0000`00000000 # first view??
    00000246`abb940b8  fff88000`00000008 # flags
    00000246`abb940c0  4f4f4f4f`4f4f4f4f
    00000246`abb940c8  4f4f4f4f`4f4f4f4f
    00000246`abb940d0  4f4f4f4f`4f4f4f4f