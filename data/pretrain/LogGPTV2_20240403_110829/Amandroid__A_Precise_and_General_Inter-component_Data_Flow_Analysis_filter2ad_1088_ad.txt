*
*
*
Callbacks
O
O
OOO*
OO
OO
O
*
*
*
O
O
OOO
OO
OO
O*
Field and Object Sensitivity
FieldSensitivity1
FieldSensitivity2
FieldSensitivity3
FieldSensitivity4
InheritedObjects1
ObjectSensitivity1
ObjectSensitivity2
FieldSensitivity1
O
O
Inter-App Communication
IntentSink1
IntentSink2
ActivityCommunication1
X
O
O
Lifecycle
BroadcastReceiverLifecycle1 O
O
ActivityLifecycle1
O
ActivityLifecycle2
O
ActivityLifecycle3
ActivityLifecycle4
O
O
ServiceLifecycle1
Loop1
Loop2
SourceCodeSpeciﬁc1
StaticInitialization1
UnreachableCode
General Java
O
O
O
X
O
O
O
O
X
O
O
O
O
O
O
O
O
O
O
Miscellaneous Android-Speciﬁc
O
O
O
O
O
O
PrivateDataLeak1
PrivateDataLeak2
DirectLeak1
InactiveActivity
LogNoLeak
ImplicitFlow1
ImplicitFlow2
ImplicitFlow3
ImplicitFlow4
Implicit Flows
XX
XX
XX
XX
XX
XX
XX
XX
Sum, Precision and Recall — DroidBench
O, higher is better
*, lower is better
X, lower is better
Precision p = O/(O + *)
Recall r = O/(O + X)
F-measure 2pr/(p + r)
26
4
10
86%
72%
0.78
27
4
9
87%
75%
0.81
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
mation based on ICC call parameters and thus cannot ﬁnd
the actual leak paths.
The detailed comparison of the performance of FlowDroid
and Amandroid on DroidBench and ICC-Bench is available
in Table 7 and 8. Not surprisingly, Amandroid outperforms
FlowDroid on the ICC-Bench since FlowDroid does not han-
dle ICC. The two perform similarly on the DroidBench test
suite.
4.3.3 Data Injection
Table 9 compares Amandroid, FlowDroid and Epicc in the
context of data injection detection performance, using the
third testsuite. Since this datasuite only consists of apps
with a single component, FlowDroid is able to handle most
Table 6: ICC Test Result
Step 1: Solve ICC call parameters
Tools
Explicit
Epicc
Amandroid
FlowdDroid
ICC
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Implicit ICC
(cid:88)
(cid:88)
N/A

(cid:88)

(cid:88)
mAction mCategories mData mType
Table 8: Results on ICC-Bench. O = True Positive, * =
False Positive, X = False Negative.
App Name
FlowDroid
Amandroid
Epicc
Part A — Testing ICC Addressing
*X
ICC Explicit1
OX
ICC Implicit Action
OX
ICC Implicit Category
OX
ICC Implicit Data1
OX
ICC Implicit Data2
OXX
ICC Implicit Mix1
ICC Implicit Mix2
OX
ICC DynRegisteredReceiver1 OX
O
OO
OO
OO
OO
OOO
OO
OO
Part B — Testing ICC Data Flow Tracking
ICC Explicit NoSrc NoSink
ICC Explicit NoSrc Sink
ICC Explicit Src NoSink
ICC Explicit Src Sink
ICC Implicit NoSrc NoSink
ICC Implicit NoSrc Sink
ICC Implicit Src NoSink
ICC Implicit Src Sink
*
*X
O
OX
O
O
OO
Sum, Precision and Recall — ICC-Bench
O, higher is better
*, lower is better
X, lower is better
Precision p = O/(O + *)
Recall r = O/(O + X)
F-measure 2pr/(p + r)
9
3
11
75%
45%
0.56
20
0
0
100%
100%
1.00
N/A
N/A
N/A
Table 9: Data Injection Detection Comparison. FP = False
Positive, FN = False Negative.
App Feature
Public Comp
Private Comp
data reach sink
not reach sink
data reach sink
not reach sink
FlowDroid
(cid:88)
(cid:88)
FP
(cid:88)
(cid:88)
FP
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Epicc Amandroid
of them, execpt for one case where it raised a false alarm due
to not being aware of a component’s exported status. Al-
though not included in the testsuite, FlowDroid would have
False Negative (FN) when the app involves ICC (e.g., “next
intent” vulnerability [34]). On the other hand, Epicc takes a
simple worst-case approach to detect a data injection prob-
lem, which assumes that any public component can have
such vulnerability. However, this conservative approach will
cause false alarms where there is no data ﬂow path from the
public component to the sensitive operation sink. Aman-
droid can correctly handle all the cases.
5. DISCUSSIONS
Amandroid has limited capability to handle exceptions.
If an app has a security issue where the code of an excep-
tion handler plays a role, Amandroid may not detect it. We
will address this limitation in future work. Amandroid does
not currently handle reﬂections and concurrency. Adding
support for reﬂections is similar to handling ICC in Aman-
droid, which already has some preliminary string analysis
capability.
Mixed
(cid:88)
(cid:88)
Step 2:
Step 3:
Find the target component(s) Track the ICC data ﬂow
N/A
(cid:88)
N/A
N/A
(cid:88)
N/A
An app may have multiple components and they may
run concurrently. There could be security problems that
only manifest when multiple components interleave in cer-
tain ways. Handling concurrency in a general way in static
analysis is nontrivial; like in other prior works we leave this
for future research. For example, we could follow the ap-
proaches that have been developed from prior research [10].
Amandroid’s data and control ﬂow analysis depends on
the faithfulness of the models, including the models of the
Android environment and its APIs. Due to the size of the
library, it still remains a challenge to develop a precise and
sound model for every library API.
6. RELATED WORK
There has been a long line of works on applying static
analysis for Android security problems [6, 8, 11, 14, 17, 20,
23, 25]. Below we describe a few works that are most closely
related to ours.
The design of Amandroid leverages a number of approaches
from FlowDroid [6, 17] (e.g., callback collection algorithm
during environment generation), but the two also have a
few important diﬀerences. FlowDroid does not handle ICC
and as such cannot address security issues involving intent
passing among multiple components. FlowDroid builds a
call graph based on Spark/Soot [32], which conducts a ﬂow-
insensitive points-to analysis. FlowDroid then conducts a
taint and on-demand alias analysis based on the above call
graph, using IFDS [28, 29] which is ﬂow- and context-sensitive.
The ﬂow-insensitivity in the call graph construction may in-
troduce spurious call edges (false positives), which could im-
pact the analysis precision of the subsequent IFDS analysis.
Amandroid computes the call graph at the same time as
the dataﬂow analysis by computing the ﬂow- and context-
sensitive points-to facts; thus its callgraph is more precise,
which could lead to fewer false positives in the ﬁnal anal-
ysis results. Moreover, FlowDroid does not calculate alias
or points-to information for all objects in a both context-
and ﬂow-sensitive way. This is a design decision from com-
puting cost concerns [17]. Amandroid calculates all objects’
points-to information in a both context- and ﬂow-sensitive
way, with reasonable computing cost (ref. Section 4.1).
This enables us to build the generic framework supporting
multiple security analyses.
Epicc [25] computes Android ICC call parameters using
the same IDE framework as FlowDroid, by modeling the
intent data structure explicitly in the ﬂow functions. To
the best of our knowledge, Epicc does not use the ICC pa-
rameter analysis result to resolve the ICC call targets in
the general case, and has not used the result to perform
inter-component dataﬂow analysis. Amandroid’s approach
to deriving ICC parameters is to simply use the ﬂow and