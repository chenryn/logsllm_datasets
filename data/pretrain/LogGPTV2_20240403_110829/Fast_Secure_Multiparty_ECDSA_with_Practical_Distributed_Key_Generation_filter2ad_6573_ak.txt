### 优化后的文本

#### Diffie-Hellman Tuple Proof
考虑以下等式：
\[ e \cdot D - z_1 \cdot G + W = e \cdot t \cdot P + e \cdot y \cdot G - \sigma \cdot G - e \cdot y \cdot G + \sigma \cdot G \]
简化后得到：
\[ e \cdot D - z_1 \cdot G + W = e \cdot t \cdot P \]

因此，我们有：
\[
(G, P, e \cdot C, e \cdot D - z_1 \cdot G + W) = (G, P, (e \cdot t) \cdot G, (e \cdot t) \cdot P)
\]
这是一个Diffie-Hellman元组，其见证为 \( e \cdot t \mod q \)。验证者接受此元组。

#### 特殊健全性
假设给定 \((X, Y, W, e, e', z_1, z_2, z_1', z_2', \pi, \pi')\)，其中 \( e \neq e' \mod q \)，且 \((X, Y, W, e, z_1, z_2, \pi)\) 和 \((X, Y, W, e', z_1', z_2', \pi')\) 都是接受的转录（其中 \(\pi, \pi'\) 是Diffie-Hellman证明）。我们可以计算出 \((x, r)\) 使得 \((A, B) = \text{EGexpEnc}_P(x; r)\)。

由假设，两个转录都接受，我们有：
\[
z_1 \cdot A + z_2 \cdot G = X + e \cdot E \quad \text{和} \quad z_1 \cdot B + z_2 \cdot P = Y + e \cdot F,
\]
以及
\[
z_1' \cdot A + z_2' \cdot G = X + e' \cdot E \quad \text{和} \quad z_1' \cdot B + z_2' \cdot P = Y + e' \cdot F.
\]

将这两个方程相减，得到：
\[
(z_1 - z_1') \cdot A + (z_2 - z_2') \cdot G = (e - e') \cdot E,
\]
\[
(z_1 - z_1') \cdot B + (z_2 - z_2') \cdot P = (e - e') \cdot F.
\]

因此，
\[
E = (z_1 - z_1') \cdot (e - e')^{-1} \cdot A + (z_2 - z_2') \cdot (e - e')^{-1} \cdot G,
\]
\[
F = (z_1 - z_1') \cdot (e - e')^{-1} \cdot B + (z_2 - z_2') \cdot (e - e')^{-1} \cdot P.
\]

设 \( y = (z_1 - z_1') \cdot (e - e')^{-1} \mod q \) 和 \( r = (z_2 - z_2') \cdot (e - e')^{-1} \mod q \)，则
\[
E = y \cdot A + r \cdot G \quad \text{和} \quad F = y \cdot B + r \cdot P.
\]

接下来需要验证 \( y \) 确实是加密在 \((E, D)\) 中的值。通过Diffie-Hellman元组证明的特殊健全性（对于包含两个不同证明 \(\pi, \pi'\) 的两个接受转录），我们可以提取 \( w, w' \in \mathbb{Z}_q \) 使得：
\[
e \cdot C = w \cdot G \quad \text{和} \quad e \cdot D - z_1 \cdot G + W = w \cdot P,
\]
\[
e' \cdot C = w' \cdot G \quad \text{和} \quad e' \cdot D - z_1' \cdot G + W = w' \cdot P.
\]

这意味着：
\[
C = (w - w') \cdot (e - e')^{-1} \cdot G,
\]
\[
D = (w - w') \cdot (e - e')^{-1} \cdot P + (z_1 - z_1') \cdot (e - e')^{-1} \cdot G.
\]

从上面已经确定 \( y = (z_1 - z_1') \cdot (e - e')^{-1} \mod q \)，设 \( t = (w - w') \cdot (e - e')^{-1} \mod q \)，则 \( C = t \cdot G \) 和 \( D = t \cdot P + y \cdot G \)。

#### 诚实验证者的零知识
给定 \( e \)，模拟器选择随机 \( z_1, z_2 \leftarrow \mathbb{Z}_q \) 并计算：
\[
X = z_1 \cdot A + z_2 \cdot G - e \cdot E \quad \text{和} \quad Y = z_1 \cdot B + z_2 \cdot P - e \cdot F,
\]
并生成一个模拟的Diffie-Hellman元组证明 \(\pi\)。

如果确实存在 \((y, r)\) 使得 \( E = y \cdot A + r \cdot G \) 和 \( F = y \cdot B + r \cdot P \)，则
\[
X = z_1 \cdot A + z_2 \cdot G - e \cdot y \cdot A - e \cdot r \cdot G = (z_1 - e \cdot y) \cdot A + (z_2 - e \cdot r) \cdot G,
\]
\[
Y = z_1 \cdot B + z_2 \cdot P - e \cdot y \cdot B - e \cdot r \cdot P = (z_1 - e \cdot y) \cdot B + (z_2 - e \cdot r) \cdot P.
\]

设 \( \sigma = z_1 - e \cdot y \) 和 \( \rho = z_2 - e \cdot r \)，则分布是相同的（使用与Section A.2中REG相同的方法）。（Diffie-Hellman元组的模拟是完美的，因为使用了Sigma协议。）

#### 复杂度
证明的成本是证明者进行七次指数运算（5次用于协议A.3的操作，2次用于Diffie-Hellman证明），验证者进行十次指数运算（6次用于协议A.3的操作，4次用于Diffie-Hellman证明）。应用Fiat-Shamir变换后，通信成本是6个 \(\mathbb{Z}_q\) 元素（3个用于协议A.3，3个用于Diffie-Hellman证明）。

### 完整的安全性证明 – Fmult
我们证明协议4.3-4.7安全地计算了Fmult。我们在(Fzk, Fcom-zk, FcheckDH)混合模型中证明该定理。如第3.3节所述，Fzk和Fcom-zk可以在随机预言机模型中高效地非交互实现。这些功能也有高效的交互实现，但不依赖于随机预言机，不过会增加轮次复杂度，并且承诺也会增加计算复杂度。我们将在第7节中展示如何安全地计算功能FcheckDH。

**定理B.1** 假设在群 \((G, G, q)\) 中决策性Diffie-Hellman问题是困难的，并且 \(\pi_{\text{priv}}^{\text{mult}}\) 是针对恶意对手的私有乘法协议（如第2.3节所定义）。那么，协议4.3至4.7在(Fzk, Fcom-zk, FcheckDH)混合模型中安全地计算了Fmult功能，在存在最多腐蚀 \( t < n \) 个参与者的恶意对手的情况下，具有点对点通道。

**证明**：安全性直觉在第4.3节中给出，因此我们直接描述模拟器。设 \( A \) 是一个对手，\( I \subseteq [n] \) 是被腐蚀的参与者集合。如果所有参与者都被腐蚀，则模拟是平凡的。因此，我们考虑 \( I \subset [n] \)（即 \( |I| < n \)），并将诚实的参与者集合记为 \( J = [n] \setminus I \)。在整个证明过程中，我们将腐蚀的参与者记为 \( P_i \)（即 \( i \in I \)），诚实的参与者记为 \( P_j \)（即 \( j \in J \)），并在 \([n]\) 上使用运行索引 \(\ell\)。我们注意到，在模拟中，每一轮的模拟首先模拟诚实参与者发送给腐蚀参与者的消息，然后再接收这一轮来自对手的消息。这是因为对手是“急迫”的，可能在发送第 \( i \) 轮消息之前就已经接收到诚实参与者在第 \( i \) 轮发送的消息（这与协议呈现方式相反，因为在协议中，诚实参与者在第 \( i+1 \) 轮开始时处理第 \( i \) 轮的消息）。除非另有说明，所有标量值的操作都是模 \( q \) 进行的。

我们构造一个模拟器 \( S \)，它内部调用 \( A \) 并模拟真实协议的执行，同时与理想模型中的Fmult进行交互。我们分别描述每个子协议的模拟步骤。

#### 初始化
当接收到 \((\text{init}, G, G, q)\) 时，模拟器 \( S \) 以输入 \((\text{init}, G, G, q)\) 调用 \( A \) 并按以下步骤工作：

1. \( S \) 选择一个随机的群元素 \( P \in G \)。
2. \( S \) 模拟 \( F_{\text{RDL}}^{\text{com-zk}} \) 发送 \((\text{ProofReceipt}, \text{init}, j)\) 给 \( P_i \)，对于每一个 \( i \in I \) 和 \( j \in J \)。
3. \( S \) 接收 \( A \) 发送给 \( F_{\text{RDL}}^{\text{com-zk}} \) 的消息 \((\text{ComProve}, \text{init}, i, P_i, d_i)\)。
4. \( S \) 选择随机的群元素 \(\{P_j\}_{j \in J}\)，满足 \(\sum_{j \in J} P_j = P - \sum_{i \in I} P_i\)。具体来说，\( S \) 选定某个 \( j^* \in J \)，然后为所有 \( j \in J \setminus \{j^*\} \) 选择随机的 \( P_j \)，最后设置 \( P_{j^*} = P - \sum_{\ell \neq j^*} P_\ell\)。
5. \( S \) 模拟 \( F_{\text{RDL}}^{\text{com-zk}} \) 发送 \((\text{DecomProof}, \text{init}, j, P_j, 1)\) 给 \( P_i \)，对于每一个 \( i \in I \) 和 \( j \in J \)。
6. \( S \) 接收 \( A \) 发送给 \( F_{\text{RDL}}^{\text{com-zk}} \) 的消息 \((\text{DecomProof}, \text{init}, i)\)。
7. 如果对于某些 \( i \in I \)，接收到的DecomProof消息中 \( P_i \neq d_i \cdot G \)，则 \( S \) 向Fmult发送abort，输出 \( A \) 的输出并停止。否则，\( S \) 继续下一步。
8. \( S \) 存储所有 \(\{d_i\}_{i \in I}\) 以及 \( P \) 和所有的 \(\{P_\ell\}_{\ell=1}^n\)。

#### 输入
当接收到 \((\text{input}, \text{sid}, \tilde{a}_i)\) 对于所有 \( i \in I \) 时，模拟器 \( S \) 以相同的输入调用 \( A \) 并按以下步骤工作：

1. \( S \) 选择随机的群元素 \(\{U_j, V_j\}_{j \in J}\)。
2. \( S \) 模拟 \( F_{\text{REG}}^{\text{zk}} \) 发送 \((\text{proof}, \text{sid}, j, (P, U_j, V_j), 1)\) 给 \( P_i \)，对于每一个 \( i \in I \) 和 \( j \in J \)。
3. \( S \) 接收 \( A \) 发送给 \( F_{\text{REG}}^{\text{zk}} \) 的消息 \((\text{proof}, \text{sid}, i, (P, U_i, V_i), (a_i, s_i))\)。
4. 如果对于某些 \( i \in I \)，\( U_i \neq s_i \cdot G \) 或 \( V_i \neq s_i \cdot P + a_i \cdot G \)，则 \( S \) 向Fmult发送abort，输出 \( A \) 的输出并停止。否则，\( S \) 继续下一步。
5. \( S \) 计算 \( U = \sum_{\ell=1}^n U_\ell \) 和 \( V = \sum_{\ell=1}^n V_\ell \)，并存储 \((\text{sid}, (U, V), \{U_i, V_i, a_i, s_i\}_{i \in I}, \{U_j, V_j\}_{j \in J})\)。

#### 输出元素
当接收到 \((\text{element-out}, \text{sid})\) 时，如果某个 \(\text{sid}\) 已经存储，则模拟器 \( S \) 从每个 \( P_i \)（\( i \in I \)）向Fmult发送 \((\text{element-out}, \text{sid})\)。当接收到回传的 \((\text{element-out}, \text{sid}, A)\) 和点 \((A_1, \ldots, A_n)\) 时，\( S \) 以相同的输入调用 \( A \) 并按以下步骤工作：

1. 设 \( (U_j, V_j) \) 是 \( S \) 存储的与 \(\text{sid}\) 关联的每一对点（如果没有这样的点，则 \( S \) 不做任何事情）。
2. \( S \) 模拟 \( P_j \) 发送 \( A_j \) 给 \( P_i \)，并且 \( F_{\text{RDH}}^{\text{zk}} \) 发送 \((\text{proof}, \text{sid}, j, (G, P, U_j, V_j - A_j), 1)\) 给 \( P_i \)，对于每一个 \( i \in I \) 和 \( j \in J \)。
3. \( S \) 接收 \( A \) 发送给 \( F_{\text{RDH}}^{\text{zk}} \) 和 \( P_j \) 的消息 \((\text{proof}, \text{sid}, i, (G, P, U_i, V_i - A_i), s_i)\) 和 \( A_i \)，对于每一个 \( i \in I \) 和 \( j \in J \)。如果对于某些 \( i \in I \)，\( U_i \neq s_i \cdot G \) 或 \( V_i \neq s_i \cdot P + a_i \cdot G \)，则 \( S \) 向Fmult发送abort，输出 \( A \) 的输出并停止。

#### 仿射变换
这个操作只涉及参与者的本地操作。因此，\( S \) 对其存储的值也进行相同的本地变换，如同诚实参与者一样。

#### 乘法
当接收到 \((\text{mult}, \text{sid1}, \text{sid2})\) 时，如果这些已经被存储，则模拟器 \( S \) 从每个 \( P_i \)（\( i \in I \)）向Fmult发送 \((\text{mult}, \text{sid1}, \text{sid2})\)。当接收到回传的 \((\text{mult-out}, \text{sid1}, \text{sid2}, c)\) 时，\( S \) 设置 \(\text{sid} = \text{sid1} \| \text{sid2}\)，调用 \( A \) 并按以下步骤工作：

1. 设 \((\text{sid1}, (U, V), \{U_i, V_i, a_i, s_i\}_{i \in I}, \{U_j, V_j\}_{j \in J})\) 和 \((\text{sid2}, (X, Y), \{X_i, Y_i, b_i, t_i\}_{i \in I}, \{X_j, Y_j\}_{j \in J})\) 是已存储的。
2. \( S \) 选择随机值 \( a_j, b_j \) 满足 \((\sum_{\ell=1}^n a_\ell) \cdot (\sum_{\ell=1}^n b_\ell) = c\)，并使用输入 \(\{a_j, b_j\}_{j \in J}\) 执行 \(\pi_{\text{priv}}^{\text{mult}}\)。（这里的思路是，如果 \( A \) 使用诚实参与者的“正确”输入，则这些输入是不可区分的。否则，各方会在揭示任何内容之前中止。注意，腐败参与者的值 \(\{a_i, b_i\}_{i \in I}\) 在输入阶段的模拟中已被 \( S \) 提取，并且可能通过仿射变换进行了已知的修改。因此，这些值对 \( S \) 是已知的。）
3. \( S \) 选择随机的群元素 \( E_j, F_j \in G \) 对于每一个 \( j \in J \)。
4. \( S \) 模拟 \( F_{\text{Rprod}}^{\text{zk}} \) 发送 \((\text{proof}, \text{sid}, j, (P, X, Y, U_j, V_j, E_j, F_j), 1)\) 给 \( P_i \)，对于每一个 \( i \in I \) 和 \( j \in J \)。
5. \( S \) 接收 \( A \) 发送给 \( F_{\text{Rprod}}^{\text{zk}} \) 的消息 \((\text{proof}, \text{sid}, i, (P, X, Y, U_i, V_i, E_i, F_i), (a_i, s_i, s_i'))\) 对于每一个 \( i \in I \)。如果对于某些 \( i \in I \)，证明不正确（通过见证检查），则 \( S \) 向Fmult发送abort，输出 \( A \) 的输出并停止。否则，\( S \) 继续下一步。
6. \( S \) 选择随机的群元素 \( A_j, B_j \in G \) 并模拟 \( F_{\text{REG}}^{\text{zk}} \) 发送 \((\text{proof}, \text{sid}, j, (P, A_j, B_j))\) 给 \( P_i \)，对于每一个 \( j \in J \) 和 \( i \in I \)。
7. \( S \) 接收 \( A \) 发送给 \( F_{\text{REG}}^{\text{zk}} \) 的消息 \((\text{proof}, \text{sid}, i, (P, A_i, B_i), (c_i, \hat{s}_i))\) 对于每一个 \( i \in I \)。如果对于某些 \( i \in I \)，\((A_i, B_i) \neq \text{EGexpEnc}(c_i'; \hat{s}_i)\)，则 \( S \) 向Fmult发送abort，输出 \( A \) 的输出并停止。
8. \( S \) 计算 \( A = E - \sum_{\ell=1}^n A_\ell \) 和 \( B = F - \sum_{\ell=1}^n B_\ell \)。
9. \( S \) 接收 \( A \) 发送给 \( F_{\text{checkDH}} \) 的消息 \((\text{check}, i, A, B, d_i)\) 对于每一个 \( i \in I \)。
   - 如果对于某些 \( i \in I \)，\( d_i \cdot G \neq P_i \)，则 \( S \) 模拟 \( F_{\text{checkDH}} \) 发送reject给所有参与者，向Fmult发送abort，输出 \( A \) 的输出并停止。
   - \( S \) 验证 \(\sum_{\ell=1}^n c_\ell = c\)，其中 \(\{c_i\}_{i \in I}\) 是 \( S \) 在步骤7中从 \( A \) 接收到的证明消息中的值，\(\{c_j\}_{j \in J}\) 是 \( S \) 模拟的诚实参与者从 \(\pi_{\text{priv}}^{\text{mult}}\) 中接收到的输出。