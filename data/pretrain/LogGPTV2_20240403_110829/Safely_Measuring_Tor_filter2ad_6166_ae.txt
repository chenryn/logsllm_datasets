900 (70%)
±200 (22%)
±40 (17%)
230 (18%)
call that the unique client IP addresses were recounted over
10-minute intervals for privacy reasons. Table 9 shows the
mean inferred counts over all 10-minute intervals that oc-
curred during our 4-day entry measurement period (there
are 4 · 24 · 6 = 576 such intervals) as well as the conﬁdence
intervals (accounting for noise and sampling error).
We found that Tor has about 700 thousand unique clients
connecting to the network during an average 10-minute in-
terval. Compared to Tor’s own estimate of about 1.75 million
clients per day in May 2016 [4], this suggests that the client
population turns over about 2.5 times a day. Somewhat sur-
prisingly, we found that about 130 thousand clients have in-
active circuits during an average 10 minutes. Also, we found
fewer connections from clients compared to the number of
unique clients, but we note that the client connections that
did not close during our 4 day measurement period would
not have been counted (because PrivCount counts connec-
tions when they are closed).
Exit Statistics. Our exit statistics focus on circuit and stream
statistics to help better understand Tor trafﬁc. Table 10 shows
the mean inferred counts over all 10-minute intervals that oc-
curred during our 21-day exit measurement period (there are
21 · 24 · 6 = 3024 such intervals) as well as the conﬁdence in-
tervals (accounting for noise and sampling error). Although
all of the counts were taken over the entire 21-day exit mea-
surement period, we show the counts as 10-minute means
for clarity of presentation.
We inferred that there are 1.4 million active circuits used
during an average 10 minutes, which corresponds to between
2 and 3 active circuits per active client. We also found about
the same number of inactive circuits as active circuits during
an average 10 minutes, which may not be surprising given
the large number of inactive clients we inferred from the en-
try statistics and also given that some of Tor’s circuits that are
preemptively generated for performance reasons may never
be used. As in the exploratory rounds, we found that a ma-
jority of the active circuits carry Web trafﬁc, and that an over-
whelming majority of streams and stream data corresponds
to Web trafﬁc. Our inferences indicate that there are an av-
erage of about 25 Web streams per Web circuit, and that exit
relays exchange an average of about 50 KiB with the desti-
nation for each such stream. Similarly, there are an average
of about 2 Other streams per Other circuit, and an average
of about 150 KiB is exchanged with the destination per Other
stream.
The histogram statistics are shown in Table 11. For each
statistic, the table shows the bin ranges and the relative counts
as percentages of the number of times the statistic fell within
each bin range, and the 95% conﬁdence interval that applies
to each bin count. The percentages shown were computed
by taking the bin count as a fraction of the single-counter to-
tal counts (i.e. number of circuits, streams, and stream data)
for each trafﬁc type (i.e. Total, Web, and Other), and there-
fore the conﬁdence intervals account for the ranges of both
the total and the bin counts. We believe that this data would
be useful for modeling Tor trafﬁc distributions in tools like
Shadow [19]. In the remainder of this section, we highlight
some of the results.
We found that a majority of Web streams per circuit have
fewer than 7 streams; by comparison, HTTP Archive [5] re-
ports that 23% of pages have less than 10 connections per
page. One potential reason for the relatively lower stream
count may be because Tor Browser blocks javascript by de-
fault, which would prevent loading many embedded page
objects. Most Other circuits have fewer than 3 streams.
We found that exit relays read less than 2 KiB and between
2 KiB and 16 KiB from 33% and 37% of Web streams, respec-
tively, while they read less than 2 KiB from 56% of Other
streams. Exit relays write less than 1 KiB to 77% of Web
streams and 46% of Other streams. We also measured the
“Bytes Per Stream Ratio” statistic that was computed using
log2(byteswritten/bytesread) as input to the histogram for each
stream. Under this interpretation, the range (-∞,-1) corre-
sponds to the number of streams where the exit relay read
more than twice as many bytes as wrote, the range [-1,1) cor-
responds to the number of streams where the exit relay read
and wrote about the same amount, and the range [1,∞) cor-
responds to streams where the exit relay read less than half
as much as wrote. Our results indicate that exit relays are
mostly reading from Web streams, but that a bimodal distri-
bution exists for Other streams where the exit relay writes
more than reads for 12% of streams. Finally, we found that
68% of Web streams on the same circuit were created within
1 seconds of one another, while Other streams were more
evenly dispersed across the bins we counted.
6. RELATED WORK
Privacy-Preserving Data Aggregation. There are many de-
signs for privacy-preserving data aggregation in networks
[6, 9, 15, 25]. The most relevant of these, and work that we
build on directly, is the PrivEx system of Elahi et al. This sys-
tem is designed speciﬁcally to gather statistics on Tor. PrivEx
provides the S2 protocol, which we build on to create Priv-
Count, and the D2 protocol. The D2 protocol uses homomor-
phic encryption and zero-knowledge proofs to provide some
additional security and tolerance against Tally Key Server
(i.e., PrivCount SK) faults. We choose to build on the simpler
and faster S2 protocol because the security improvements of
D2 are relatively minor, and we are able to add fault toler-
ance of the more error prone DCs to S2.
PrivCount expands on PrivEx-S2 in many ways to make
it more ﬂexible and practical. In general, the modiﬁcations
make the protocol suitable for exploratory and diverse Tor
Table 11: Distributions of Tor network activity from histogram-counter in-depth exit statistics
Bin Ranges and Count Distribution (with ± 95% CI)
Statistic
Active Circuit Life Time (s)
Streams Per
Circuit
Total
Client-bound
Bytes Per Stream
Server-bound
Bytes Per Stream
Bytes Per
Stream Ratio
Inter-stream
Creation Time (s)
[1, 480):
[1, 3):
[1, 3):
[1, 3):
[1, 2048):
[1, 2048):
[1, 2048):
[1, 512):
[1, 512):
[1, 512):
(-∞, -1):
(-∞, -1):
(-∞, -1):
[0, 1):
[0, 1):
[0, 1):
57%±44% [480, 720):
46%±43% [3, 7):
36%±37% [3, 7):
78%±15% [3, 7):
60%±40% [2048, 16384):
33%±33% [2048, 16384):
56%±21% [2048, 16384):
57%±39% [512, 1024):
41%±35% [512, 1024):
40%±19% [512, 1024):
80%±45% [-1, 1):
70%±42% [-1, 1):
45%±20% [-1, 1):
87%±47% [1, 5):
68%±41% [1, 5):
16%±16% [1, 5):
45%±42% [720, 1200):
38%±41% [7, 15):
22%±33% [7, 15):
10%±9% [7, 15):
38%±35% [16384, 65536):
37%±34% [16384, 65536):
9%±15% [16384, 65536):
25%±31% [1024, 4096):
36%±34% [1024, 4096):
6%±14% [1024, 4096):
25%±31% [1, ∞):
15%±28% [1, ∞):
14%±16% [1, ∞):
16%±29% [5, 10):
8%±27% [5, 10):
10%±15% [5, 10):
Web
Other
Total
Web
Other
Total
Web
Other
Total
Web
Other
Total
Web
Other
0%±33% [1200, ∞):
31%±40% [15, ∞):
13%±31% [15, ∞):
0%±8% [15, ∞):
32%±33% [65536, ∞):
5%±26% [65536, ∞):
8%±15% [65536, ∞):
38%±34% [4096, ∞):
23%±30% [4096, ∞):
15%±16% [4096, ∞):
0%±21%
0%±21%
12%±15%
1%±25% [10, ∞):
13%±28% [10, ∞):
3%±14% [10, ∞):
0%±35%
9%±37%
3%±28%
2%±8%
6%±26%
0%±24%
11%±15%
0%±24%
2%±25%
1%±14%
0%±23%
14%±28%
12%±15%
measurements by a small deployment while maintaining its
suitability for Tor-wide measurement. Major contributions of
the PrivCount design over PrivEx include multi-phase itera-
tive measurement, an expanded privacy notion that simul-
taneously handles multiple types of measurements, optimal
allocation of the  privacy budget across multiple statistics,
and a composable security deﬁnition and proof. Our imple-
mentation is also a more capable and reliable tool, with 29
new Tor statistics, resilience against node failure and reboots,
and simpler conﬁguration and setup.
Measurement. There have been few published studies mea-
suring Tor network trafﬁc characteristics. Perhaps the most
well-known is the 2008 study by McCoy et al. [23] in which
the authors ran an exit relay and used tcpdump to capture
the ﬁrst 150 bytes of every packet (which included up to 96
bytes of application payloads). The study raised ethical and
legal questions [28], as they collected, stored, and manually
analyzed sensitive data. Chaabane et al. [8] conducted a simi-
lar study, but used a customized deep packet inspection soft-
ware (OpenDPI) to further analyze packets by protocol.
Although we also measure Tor, privacy is a primary mo-
tivation of our work: PrivCount provides formal guarantees
about security and privacy and the only outputs from the
measurement process are the aggregated, noisy counts that
are safe to share publicly. Further, to the best of our knowl-
edge, neither of the previously mentioned studies used a non-
default exit policy, while we found that a non-trivial shift in
trafﬁc type occurs when switching from the default exit pol-
icy to one that allows common ﬁle-sharing ports (Section 5).
In a case study on Tor measurement, Loesing et al. [22]
measured countries of connecting clients and exiting trafﬁc
by port while providing guidelines for safely measuring po-
tentially sensitive data in anonymity networks. They obfus-
cate the true measured values by rounding them to common
multiples, but unlike PrivCount they do not aggregate across
relays or provide any formal deﬁnitions of security or pri-
vacy. Tor currently allows relays to enable the collection and
distribution [4] of statistics implemented by Loesing et al.,
but it is not currently enabled by default.
Tor hidden service usage has also been measured more
recently [16, 26]. We chose not to focus on hidden services
because they account for less than 4% of all Tor trafﬁc [20].
However, PrivCount provides a promising way to measure
hidden-service statistics that cannot be safely gathered with-
out aggregation, such as the number of hidden-service con-
nections (see [16, Section 4]).
7. CONCLUSION
We build on recent advancements in privacy-preserving
aggregation to develop a Tor measurement system called Priv-
Count. We detailed the PrivCount protocol and provided for-
mal arguments about its security and privacy properties. We
also implemented PrivCount and used it to perform a mea-
surement study on Tor users and trafﬁc. Among the mea-
sured statistics that we collected, we found that on average
710 thousand clients are connected to Tor at any given time,
of which 550 thousand (77%) are active. Although Tor has
its own estimates of the number of clients, we are the ﬁrst to
measure the distinct number of active clients. We also mea-
sured Tor trafﬁc characteristics under various exit policies,
providing the ﬁrst analysis of how exit policies affect trafﬁc
distribution to the best of our knowledge. We found that Web
ports account for 91% of bytes exiting Tor.
Future Work. Future work should consider taking measure-
ments over longer time periods and with various exit policies
in order to improve inference accuracy. Additional insights
could be obtained with our tools and methods by extending
the set of collected statistics to include onion service statis-
tics. More robust and secure methods for counting the client
population over varying time periods and without sacriﬁc-
ing privacy could allow for analysis of client churn. Finally,
our measurements are well-suited to advance Tor research,
especially in the area of trafﬁc modeling and simulation.
Acknowledgments. We thank the anonymous reviewers for
their suggestions and feedback which have helped to im-
prove this paper. We also thank Tim Wilson-Brown, Tariq
Elahi, David Goulet, and Micah Sherr for their assistance in
running share keepers for our deployment. This work has
been partially supported by the Defense Advanced Research
Project Agency (DARPA), the National Science Foundation
(NSF) under grant number CNS-1527401, and the Depart-
ment of Homeland Security (DHS) Science and Technology
Directorate, Homeland Security Advanced Research Projects
Agency, Cyber Security Division under agreement number
FTCY1500057. The views expressed in this work are strictly
those of the authors and do not necessarily reﬂect the ofﬁcial
policy or position of DARPA, NSF, DHS, or the U.S. Naval
Research Laboratory.
8. REFERENCES
[1] PrivCount source code.
https://github.com/privcount/privcount.
[2] TC: A Tor control protocol (Version 1). https://gitweb.
torproject.org/torspec.git/tree/control-spec.txt.
[3] Tor directory protocol, version 3. https://gitweb.
torproject.org/torspec.git/plain/dir-spec.txt.
[4] Tor Metrics. https://metrics.torproject.org/.
[5] HTTP Archive. http://httparchive.org/, May 2016.
[6] BURKHART, M., STRASSER, M., MANY, D., AND
DIMITROPOULOS, X. A. SEPIA: Privacy-preserving
aggregation of multi-domain network events and
statistics. In USENIX Security Symposium (2010).
[7] CANETTI, R. Universally composable security: A new
paradigm for cryptographic protocols. In IEEE
Symposium on Foundations of Computer Science (2001).
[8] CHAABANE, A., MANILS, P., AND KAAFAR, M.
Digging into anonymous trafﬁc: A deep analysis of the
Tor anonymizing network. In IEEE Network and System
Security (2010).
[9] CHEN, R., REZNICHENKO, A., FRANCIS, P., AND
GEHRKE, J. Towards statistical queries over distributed
private user data. In USENIX NSDI (2012).
[10] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON,
P. Tor: The second-generation onion router. In USENIX
Security (2004).
[11] DWORK, C. Differential privacy. In International
Colloquium on Automata, Languages and Programming
(2006).
[12] DWORK, C., KENTHAPADI, K., MCSHERRY, F.,
MIRONOV, I., AND NAOR, M. Our data, ourselves:
Privacy via distributed noise generation. In Eurocrypt.