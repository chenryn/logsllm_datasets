}
......
利用第三阶段 — 任意地址写入阶段
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
………
PATHALLOC 01
Ring-3
Ring-0
pprnext
pprprev
flags = 0
count
………
PATHRECORD
http://seclists.org/fulldisclosure/2013/May/91
PATHALLOC::freelist
#define FREELIST_MAX  4
WangYu, All Rights Reserved.
细节说明：
只要环三节点不含有 PD_BEZIERS 标
志，就可构造出 EPATHOBJ::bFlatten
例程的（无干扰）死循环条件。
当然，死循环本身不是目的，只是利
用这个技巧可以省去多线程同步的烦
恼。
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
利用第三阶段 — 任意地址写入阶段
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
………
PATHALLOC 01
Ring-3
Ring-0
pprnext
pprprev
flags = 0
count
………
PATHRECORD_1
http://seclists.org/fulldisclosure/2013/May/91
PATHALLOC::freelist
#define FREELIST_MAX  4
WangYu, All Rights Reserved.
pprnext
0xCCCCCCCC
PD_BEZIERS
count
………
PATHRECORD_2 InterlockedExchange
Thread 2
ppr
细节说明：
辅助线程释放内存，还原系统环境。
由于 PATHRECORD_2 节点的属性含
有 PD_BEZIERS 标志，这意味着
EPATHOBJ::bFlatten 例程在循环到这
个节点时将会以此节点为参数调用
EPATHOBJ::pprFlattenRec
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
利用第三阶段 — 我们又回来了
PPATHREC EPATHOBJ::pprFlattenRec(PATHRECORD *ppr)
{
// 1. create a new record
if (newpathrec(&pprNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
// 2. init some fields (count/flags ...)
pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
……
}
pprnext
pprprev
flags = 0
count
………
PATHRECORD_1
pprnext
0xCCCCCCCC
PD_BEZIERS
count
………
PATHRECORD_2
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
Ring-3
Ring-0
利用第三阶段 — 我们又回来了
PPATHREC EPATHOBJ::pprFlattenRec(PATHRECORD *ppr)
{
// 1. create a new record
if (newpathrec(&pprNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
// 2. init some fields (count/flags ...)
pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
……
}
pprnext
pprprev
flags = 0
count
………
PATHRECORD_1
pprnext
0xCCCCCCCC
PD_BEZIERS
count
………
PATHRECORD_2
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
Ring-3
Ring-0
利用第三阶段 — 我们又回来了
PPATHREC EPATHOBJ::pprFlattenRec(PATHRECORD *ppr)
{
// 1. create a new record
if (newpathrec(&pprNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
// 2. init some fields (count/flags ...)
pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
……
}
pprnext
pprprev
flags = 0
count
………
PATHRECORD_1
pprnext
0xCCCCCCCC
PD_BEZIERS
count
………
PATHRECORD_2
ppr
pprnext
flags
count
………
PATHRECORD
Ring-3
Ring-0
0xCCCCCCCC
利用第三阶段 — 任意地址写入阶段
PPATHREC EPATHOBJ::pprFlattenRec(PATHRECORD *ppr)
{
// 1. create a new record
if (newpathrec(&pprNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
// 2. init some fields (count/flags ...)
pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
……
}
pprnext
pprprev
flags = 0
count
………
PATHRECORD_1
pprnext
0xCCCCCCCC
PD_BEZIERS
count
………
PATHRECORD_2
ppr
[0xCCCCCCCC + 0] = pprNew; // Arbitrary Address Write Bug !
pprnext
flags
count
………
PATHRECORD
Ring-3
Ring-0
0xCCCCCCCC
我们又回到了熟悉的 EPATHOBJ::pprFlattenRec 例程了。还记得我们之前提到过的两次
EPATHOBJ::bFlatten 调用吗？
第一次：触发问题代码，构造畸形链表；第二次：遍历畸形链表，产生访问违例。这里
就是利用的完整体现 —— 利用链表赋值操作进行任意地址写入。
此时利用问题已经转化为传统的 write-4 问题。唯一需要注意的是：任意地址写入后，
写入的值不可控，为 pprNew 的基地址。
利用第四阶段 — Home Run！
pprnext
nt!HalDispatchTable + 4
PD_BEZIERS
count
………
PATHRECORD_2
ppr
jmp ……
flags
count
………
PATHRECORD
Ring-3
Ring-0
nt!HalDispatchTable
+00
+04
+08
nt!HalDispatchTable + 4
write-4 问题的利用方案很多，比如参考 ms08-025 的利用方式，
将任意地址写的目标指向 nt!HalDispatchTable + 4。
如果有 call [nt!HalDispatchTable+0x04] 的操作即意味着 call 到
pprNew 处，因为（第一次）任意地址写入的是 pprNew 的基
址。
所以我们也一定希望 pprNew+0x00 处是一些可以执行的东
西，; )
我们有四个字节的发挥空间，
至于是 jmp 0 还是跳转到栈上取参数
pprNew->pprnext = ppr->pprnext; 语句会帮你
完成赋值。
唯一需要留神的是 pprNew->pprnext->pprprev = pprNew;
即双链表操作的四个子步骤都需要照顾好，我们要保证第二次
pprNew 写入的页面地址是有写属性的。
x64 的利用方式和上述描述类似。
利用第四阶段 — 攻防永无止尽
jump to nt!HalDispatchTable stack
Page Pool NX
patch MM_USER_PROBE_ADDRESS /
MM_HIGHEST_USER_ADDRESS
and using (return to) Zero-Page
NULL-Pointer Dereference 
Mitigation
the others ring-3 shellcode
CR4.SMEP
kernel gadget & ROP
……
……
思考与启示
第四部分
思考与启示
程序员编码的疏漏
模拟内存压力环境
PATHALLOC 内存池的可控特性
bFlatten 链表遍历代码将未初始化的垃圾数据当做指针来看待
有问题的代码被激活
未初始化完成的
节点被接入链表
执行流程被错误的
引导向操作系统用户态
精心构造用户态节点形态
操控内核函数的执行分支
迫使内核函数工作在
用户可控参数的环境下
还原内存压力测试环境，使得操作系统重新变得可用
Write-4 任意地址写
入
漏洞回顾：
Ring-0
Ring-3
思考与启示
从攻击的角度看待：
坚持不懈，永不言弃，注重积累，将攻击知识融会贯通
从防御的角度看待：
无知者无畏，未知攻焉知防？
千里之堤，毁于蚁穴，任何时候都不能掉以轻心
从阴谋论 / 国家安全的角度看待：
输出的产品有必要内置后门代码吗？太容易被发现了吧
往往一句看似漫不经心的代码就可以打破整个安全模型
思考与启示
从程序员的角度看待：
请谨慎编码，
哪怕它只是一句错误处理，
哪怕它可以潜藏 8252 天。
EPATHOBJ::pprFlattenRec(ppr)
CVE-2013-3660
5-Dec-1990 — 9-Jul-2013
@
Dig-it！
致谢！
P1P1Winner    PJF    Bugvuln
RoyceLu
YaoTong
PaulFan
MJ0011
HIT Committee
guys in the 2B# - 14F
Tavis Ormandy
Q&A
PI:EMAIL