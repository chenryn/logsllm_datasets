### Optimized Text

#### Section: Attacking OpenSSH

To demonstrate the practical risks that RAMBleed poses to memory confidentiality, this section outlines an end-to-end attack against OpenSSH 7.9. The attack allows an unprivileged attacker to extract the server’s 2048-bit RSA private signing key, which is crucial for the server's authentication in SSH connections. Compromising this key enables the attacker to impersonate the server, facilitating man-in-the-middle (MITM) attacks and decryption of all traffic from compromised sessions.

**Attack Overview:**
At a high level, our attack involves coercing the server’s SSH daemon to repeatedly allocate and place its private key material at vulnerable physical memory locations. We then use double-sided RAMBleed to recover portions of the bits that constitute the server’s RSA key. Finally, we leverage the mathematical redundancy in RSA keys to correct errors in the extracted bits and recover missing bits that were not directly readable.

Before delving into the specifics of the attack, we provide an overview of how OpenSSH manages and uses its keys in response to incoming SSH requests and how we adapted the techniques from Section V to target OpenSSH.

**A. Overview of OpenSSH:**

The OpenSSH daemon is a root-level process that binds to port 22 and has access to a root-accessible file storing the server’s RSA private key. As illustrated in Figure 5, when a TCP connection arrives on port 22, the daemon spawns a child process to handle the authentication phase of the incoming SSH connection. This child process is responsible for both authenticating the server to the client and the client to the server. Server authentication is performed using the RSA private key to sign a challenge issued by the client. After successful authentication, the child process spawns an unprivileged grandchild to handle the user’s connection.

**Key Memory Management:**

The child process spawned by the SSH daemon for mutual authentication must first read the server’s private key from the key file into a temporary buffer. At this point, the key exists in two memory locations: the temporary buffer and the OS’ page cache. Unfortunately, neither location is accessible via RAMBleed. The temporary buffer is overwritten immediately, and the page cache is stored in a static region of physical memory. However, during the authentication process, OpenSSH copies the keys into a new buffer maintained by a global structure called "sensitive data," which remains in physical memory for the duration of the connection. Our attack aims to read the private key material from this structure.

**B. Attack Details:**

1. **Memory Profiling:**
   - The first step is to profile the memory to identify flippable bits, as described in Section V-B.
   - Once a sufficient number of flippable bits are found, we proceed to the reading phase, where we use RAMBleed to leak one bit at a time.
   - For each templated bit, we use Frame Feng Shui to place the private key material in the configuration shown in Figure 3, with A1 being the page containing the flippable bit.
   - We then perform double-sided RAMBleed to leak the bit’s value and move to the next bit.

2. **Overcoming OpenSSH’s Memory Allocation Pattern:**
   - To use Frame Feng Shui effectively, we need to determine the value \( n \), which is the number of pages we must unmap after vacating the target frame to cause OpenSSH to place the secret in the targeted frame location.
   - By examining the behavior of OpenSSH 7.9 on our system, we found that its allocation pattern is predictable, allowing us to use Frame Feng Shui with a high success rate.
   - Specifically, we found that:
     - The page containing \( d \) (the RSA private exponent) is allocated 101 pages after the daemon accepts a new TCP connection.
     - A single page containing both \( p \) and \( q \) is allocated 102 pages after the daemon accepts a new connection.
     - A single page containing both \( dp \) and \( dq \) is allocated 104 pages after accepting a new connection.
   - All these private key values are located at the same offset within their page upon every incoming connection. Thus, we set \( n = 100, 101, \) and \( 104 \) respectively for \( d, p \) and \( q, \) and \( dp, dq \).
   - To achieve the configuration in Figure 3, we call `munmap` on the page above A1 and follow it with \( n \) `munmaps` on random pages. We then make a TCP connection, causing the SSH daemon to make \( n \) allocations, followed by allocating the secret-containing page, which will be placed in the target frame.
   - By keeping the TCP connection open, we can repeat the process to place the page in the frame below A1, creating two copies of the secret in memory to facilitate double-sided RAMBleed.

3. **Accounting for Allocation Noise:**
   - The memory placement technique is susceptible to noise due to the time between unmapping by the attacker and the victim mapping the key-containing page.
   - To minimize this noise, the attacker yields the scheduler before performing the page deallocations, allowing other scheduled system activity to execute. We also use a busy loop after unmapping the pages and before reading the bits, waiting a fixed amount of time for OpenSSH to perform the required allocations.
   - Using a sleep operation instead of a busy loop can cause the system to schedule another process, disrupting the memory layout.
   - After using RAMBleed to read the bits, we close the connections, triggering the daemon to kill the two children.
   - With these mitigations, the memory placement process succeeds against OpenSSH with an 83% probability. This means we will be in the double-sided RAMBleed situation 68.89% of the time, in single-sided RAMBleed 28.22% of the time, and 2.39% of the time, we will be unable to place the target page near the flipping row, resulting in random guessing.

**C. Key Recovery:**

To recover the key from the noisy bits, we use a variant of Paterson et al. [46]’s algorithm, an adaptation of the Heninger-Shacham algorithm [24] for the case where key bits are known with some probability. The algorithm reconstructs the key bit by bit, starting from the least significant bit, and prunes potential keys by relating the public (N, e) and private (d, p, q, dp, and dq) key components. The algorithm explores a search tree of potential keys while pruning branches that contradict known bits or have a large number of mismatches with probabilistically recovered bits. Our approach is similar to Paterson et al. [46], but we use a depth-first search instead of a breadth-first search.

Through simulations on random RSA 2048-bit keys, we empirically found that our amended Heninger-Shacham algorithm requires 68% recovery of the private key material (d, p, q, dp, dq) with 82% accuracy. This implies that 4200 distinct bits of private key material are sufficient to extract the complete key.

**D. Overall Attack Performance:**

- **Memory Templating:**
  - We begin by locating flippable bits in the target machine’s memory using the techniques presented in Sections IV and V.
  - The time required to template memory and find the required flips depends on the susceptibility of the underlying DIMMs to Rowhammer attacks. While [21, 37] report finding thousands of flips within minutes, we found flips at a more modest rate of 41 flips per minute, resulting in a running time of 34 hours to locate the 84K bit flips required for the next phase of the attack.

This comprehensive approach ensures a high success rate in extracting the RSA private key from the OpenSSH server, demonstrating the significant security risks posed by RAMBleed.