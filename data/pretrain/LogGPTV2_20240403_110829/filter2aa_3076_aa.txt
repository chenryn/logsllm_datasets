David Rook
The Security Risks of Web 2.0
DefCon 17, Las Vegas
Agenda
• A quick Web 2.0 definition
• The differences between Web 1.0 and Web 2.0
• Common Web 2.0 security vulnerabilities
• The differences between Web 1.0 and Web 2.0 vulnerabilities
• Security analysis difficulties with Web 2.0
• How to prevent these vulnerabilities
if (slide == introduction)
System.out.println(“I’m David Rook”);
• Security Analyst, Realex Payments, Ireland
CISSP, CISA, GCIH and many other acronyms
• Security Ninja (www.securityninja.co.uk)
• Secure Development (www.securedevelopment.co.uk) 
• OWASP contributor and presenter
• IIA Web Development Working Group
• Facebook hacker and published security author (insecure 
magazine, bloginfosec etc)
About this Presentation
• What this presentation isn’t
– A technical discussion about Web 2.0 
technologies/architectures
– No 0 days, new attacks or new vulnerabilities
– Just a discussion about XSS and SQL Injection
• What this presentation is:
– A look at Web 2.0 app vulnerabilities
– How they differ (or not) from Web 1.0
– How to prevent them
A quick Web 2.0 definition
• “Web 2.0 is the business revolution in the computer industry 
caused by the move to the internet as a platform, and an 
attempt to understand the rules for success on that new 
platform. Chief among those rules is this: Build applications 
that harness network effects to get better the more people 
use them”
Tim O’Reilly - 2006 
Rapid 
proliferation 
of content
RSS
Atom
Everything 
can go online 
now
Google Docs
eyeOS
Architecture 
of 
participation
Soc Nets
Youtube
Writes data 
to local 
databases
Gears
HTML 5
User 
generated 
content
Offline 
storage of 
data and 
state
Desktop 
look and 
feel
Syndication 
of content
Key points about Web 2.0
Differences between Web 1.0 and 2.0
Category
Web 1.0
Web 2.0
Functionality/Content
Reading Content
Creating Content
Personal Websites
Blogs and profiles
Under Construction Sign
BETA
Technologies
HTML, HTTP, HTTPS
AJAX, JSON, SOAP, REST, 
XML, HTTP, HTTPS
Synchronous
Asynchronous
Client-Server
Peer to Peer
Security
Content from site owner
Content from site user
Structured entry points
Distributed, multiple entry 
points
• Cross Site Scripting
• Cross Site Request Forgery
• SQL Injection
• Authentication and Authorisation Flaws
• Information Leakage
• Insecure Storage
• Insecure Communications
Common Web 2.0 Vulnerabilities
• On top of that list we do have some specific Web 2.0 
vulnerabilities:
– XSS Worms
– Feed Injections
– Mashup and Widget Hacks
Some Web 2.0 Specific Vulnerabilities
• New to Web 2.0? No
• Is this worse in Web 2.0? Yes
XSS flaws occur whenever an application takes user
supplied data and sends it to a web browser without
first validating or encoding that content.
Cross Site Scripting (XSS)
•
Persistent “Stored”
•
The malicious input is stored server side (message boards etc) and 
used in many users pages
•
Think: 
•
Non-Persistent “Reflected” 
•
Input is immediately used in the page returned to the user
•
Think: 
•
DOM Based
•
Content inserted into the user pages DOM, all client side because data is 
never sent to the server
•
Think: http://examplesite.com/home.php?name=………..
•
Coupled with:  
Cross Site Scripting (XSS)
Cross Site Scripting (XSS)
• What makes this worse in Web 2.0?
•
Dynamic nature of the DOM in Web 2.0 apps
•   User controlled data in more places
•   Self propagating XSS attack code
•
Stream (i.e. JSON, XML etc) contents may be malicious
Cross Site Scripting (XSS)
• Dynamic nature of DOM in AJAX and RIA applications 
utilises javascript calls such as document.write which can 
write malicious data to the DOM
• If you use document.write(data) with the data coming from 
an untrusted source then data such as:
can be injected into the DOM
• Malicious input in streams such as JSON written to the 
DOM by the javascript eval()
function date() 
{ 
var http; 
if(window.XMLHttpRequest) { 
http = new XMLHttpRequest(); 
} else if (window.ActiveXObject) { 
http=new ActiveXObject("Msxml2.XMLHTTP"); 
if (! http) {
http=new ActiveXObject("Microsoft.XMLHTTP"); 
} 
} 
http.open("GET", ”siteproxy.php?url=http://livedate-example.com", true);
http.onreadystatechange = function() 
{ if (http.readyState == 4) { 
var response = http.responseText; //other code in here 
eval(data) } 
} http.send(null); } 
Cross Site Scripting (XSS)
• New to Web 2.0? No
• Is this worse in Web 2.0? Yes
Cross Site Request Forgery (CSRF)
A CSRF attack forces a logged-on victim’s browser to 
send a pre-authenticated request to a vulnerable web 
application, which then forces the victim’s browser to 
perform a hostile action to the benefit of the attacker.
XSS != CSRF
XSS, malicious script is executed on the client’s 
browser, whereas in CSRF, a malicious command or 
event is executed against an already trusted site.
POST http://ninjarental.com/login.html HTTP/1.1
HTTP headers etc in here
user=ninjafan&pass=Ninjafan1&Submit=Submit
Cross Site Request Forgery (CSRF)
GET http://ninjarental.com/purchase?ninja=rgninja&Submit=Submit.html HTTP/1.1
HTTP headers etc in here
SessionID=0123456789
Cross Site Request Forgery (CSRF)
HTTP/1.1
HTTP headers etc in here
SessionID=0123456789
Cross Site Request Forgery (CSRF)
Cross Site Request Forgery (CSRF)
• What makes this worse in Web 2.0?
•   XML and JSON based attacks tricky but possible 
•   Web 2.0 has to allow cross domain access
•   Same Origin Policy doesn't protect you
Cross Site Request Forgery (CSRF)
• Discovered by Vicente Aguilera Diaz 
•  
GMAIL change password CSRF vulnerability
Cross Site Request Forgery (CSRF)
Google contacts CSRF with JSON
• Normally XMLHttpRequest (XHR) pulls in data from same 
domain location
• JSON data cannot be called from an off domain source
• That’s not very Web 2.0 friendly though is it?
• JSON call-backs to the rescue!
Google contacts CSRF with JSON call-backs
Cross Site Request Forgery (CSRF)
function google(data){
    var emails, i;
    for (i = 0; i " + data.Body.Contacts[i].Email + "";
    }
    document.write("" + emails + "");
}
Credit to Haochi Chen who found this vulnerability
• New to Web 2.0? No
• Is this worse in Web 2.0? Yes
SQL Injection
A SQL injection attack consists of insertion or 
"injection" of a SQL query via the input data from the 
client to the application
var username
username = name.form ("username")
var sql = "SELECT * FROM users WHERE name = '" + userName + "';"
SQL Injection
I enter 1’ or ‘1’=‘1
1=1 == true, bingo!
"SELECT * FROM users WHERE name = ‘1’ OR ‘1’=‘1’;
A simple example, but SQL Injection has been used to steal large 
amounts of data and cause chaos:
Card Systems – 40 million credit card numbers
Automated SQL Injection compromised 70,000+ sites in one attack
Accounts for roughly 20% of all CVE numbers for 2009 so far
The inspiration for my favourite XKCD comic
SQL Injection
• What makes this worse in Web 2.0?
•   Being used as a precursor to exploiting Web 2.0 technologies
•   Has been used to inject malicious swf files into sites
•   Has been used to inject malware serving javascript into sites
SQL Injection
•   Injections can occur in JSON, XML, SOAP etc
Alumni Server SQL Injection exploit, June 2009
Credit to YEnH4ckEr
26:  $email=requestVar('login','',true);
32:  $pwd=requestVar('password','',true);
72: $result=mysql_query("SELECT * FROM 'as_users' 
WHERE (email LIKE '".$email."') AND (password LIKE 
'".md5($pwd)."') LIMIT 1",$dbh);
E-Mail=PI:EMAIL') OR 1=1 /*
Password=nothing
SQL Injection
SQL Injection
SQL Injecting malicious javascript, June 2009
DECLARE @T varchar(255),@C varchar(255) DECLARE 
Table_Cursor CURSOR FOR select a.name,b.name from 
sysobjects a,syscolumns b where a.id=b.id and a.xtype='u' and 
(b.xtype=99 or b.xtype=35 or b.xtype=231 or b.xtype=167) 
OPEN Table_Cursor FETCH NEXT FROM  Table_Cursor INTO 
@T,@C WHILE(@@FETCH_STATUS=0) BEGIN exec('update 
['+@T+'] set ['+@C+']=rtrim(convert(varchar,['+@C+']))+''''')FETCH NEXT FROM  
Table_Cursor INTO @T,@C END CLOSE Table_Cursor 
DEALLOCATE Table_Cursor
http://f1y.in/j.js contained the following:
document.writeln("");
document.writeln(" 
          Security
          Ninja 
          sninja 
          secret 
          Bobby
          Tables
          bobtables 
          anotherSecret 
XPATH Injection
//unames/user[loginID/text()=‘sninja’ and password/text()=‘secret’]
I enter ' or 1=1
//unames/user[LoginID/text()=' ' or 1=1  and password/text()=' ' or 1=1]
1=1 == true, bingo!
A simple example, the injection of ' or 1=1 has allowed me to 
bypass the authentication system 
XPATH Injection
• What makes this worse in Web 2.0?
•   XML is the X in AJAX!
• New to Web 2.0? Yes
Self propagating XSS code injected into a web 
application which will spread when users visits a page.
XSS Worms
The obligatory Samy discussion
No XSS worm discussion would be complete without
mentioning our hero Samy
First XSS worm, 4 years ago spread through MySpace 
1 million+ infections in 24 hours
Even in 2009 Samy is still a hero