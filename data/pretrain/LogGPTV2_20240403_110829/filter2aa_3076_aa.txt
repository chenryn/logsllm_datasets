# David Rook
## The Security Risks of Web 2.0
### DefCon 17, Las Vegas

---

### Agenda
- A brief definition of Web 2.0
- Differences between Web 1.0 and Web 2.0
- Common Web 2.0 security vulnerabilities
- Distinctions in vulnerabilities between Web 1.0 and Web 2.0
- Challenges in security analysis for Web 2.0
- Strategies to prevent these vulnerabilities

---

### Introduction
```java
if (slide == introduction) {
    System.out.println("I’m David Rook");
}
```
- **Security Analyst at Realex Payments, Ireland**
- **Certifications:** CISSP, CISA, GCIH, and others
- **Founder of Security Ninja** (www.securityninja.co.uk)
- **Secure Development** (www.securedevelopment.co.uk)
- **OWASP Contributor and Presenter**
- **Member of IIA Web Development Working Group**
- **Published Security Author** (insecure magazine, bloginfosec, etc.)
- **Facebook Hacker**

---

### About This Presentation
#### What This Presentation Is Not:
- A technical deep dive into Web 2.0 technologies and architectures
- Discussion of zero-day vulnerabilities, new attacks, or new vulnerabilities
- Focused solely on XSS and SQL Injection

#### What This Presentation Is:
- An examination of Web 2.0 application vulnerabilities
- How they differ from Web 1.0 vulnerabilities
- Strategies to prevent these vulnerabilities

---

### A Brief Definition of Web 2.0
> "Web 2.0 is the business revolution in the computer industry caused by the move to the internet as a platform, and an attempt to understand the rules for success on that new platform. Chief among those rules is this: Build applications that harness network effects to get better the more people use them."
— Tim O’Reilly, 2006

**Key Characteristics:**
- **Rapid Proliferation of Content:** RSS, Atom
- **Everything Can Go Online Now:** Google Docs, eyeOS
- **Architecture of Participation:** Social Networks, YouTube
- **User-Generated Content:** Blogs, Profiles
- **Offline Storage of Data and State:** Gears, HTML5
- **Desktop Look and Feel:** AJAX, JSON, SOAP, REST, XML

---

### Differences Between Web 1.0 and Web 2.0
| Category | Web 1.0 | Web 2.0 |
|----------|---------|---------|
| **Functionality/Content** | Reading Content | Creating Content |
| **Personal Websites** | Static Pages | Blogs and Profiles |
| **Under Construction Sign** | BETA | Continuous Deployment |
| **Technologies** | HTML, HTTP, HTTPS | AJAX, JSON, SOAP, REST, XML, HTTP, HTTPS |
| **Synchronous** | Yes | Asynchronous |
| **Client-Server** | Yes | Peer to Peer |
| **Security** | Content from site owner | Content from site user |
| **Structured Entry Points** | Single Point | Distributed, Multiple Entry Points |

---

### Common Web 2.0 Vulnerabilities
- **Cross Site Scripting (XSS)**
- **Cross Site Request Forgery (CSRF)**
- **SQL Injection**
- **Authentication and Authorization Flaws**
- **Information Leakage**
- **Insecure Storage**
- **Insecure Communications**

**Additional Web 2.0 Specific Vulnerabilities:**
- **XSS Worms**
- **Feed Injections**
- **Mashup and Widget Hacks**

---

### Cross Site Scripting (XSS)
- **Persistent (Stored):** Malicious input stored server-side (e.g., message boards) and used in multiple user pages.
- **Non-Persistent (Reflected):** Input immediately used in the page returned to the user.
- **DOM Based:** Content inserted into the user's DOM, all client-side without data being sent to the server.

**Worsening Factors in Web 2.0:**
- **Dynamic Nature of the DOM:** AJAX and RIA applications use `document.write` which can inject malicious data.
- **User-Controlled Data:** More places for user-controlled data.
- **Self-Propagating XSS Attack Code:** Stream contents (JSON, XML) may be malicious.

---

### Cross Site Request Forgery (CSRF)
- **Definition:** Forces a logged-on victim’s browser to send a pre-authenticated request to a vulnerable web application, performing a hostile action.
- **Difference from XSS:** XSS executes malicious script on the client’s browser, while CSRF executes a command against an already trusted site.

**Worsening Factors in Web 2.0:**
- **XML and JSON-Based Attacks:** Tricky but possible.
- **Cross-Domain Access:** Web 2.0 must allow cross-domain access, bypassing the Same Origin Policy.

**Example:**
- **GMAIL Change Password CSRF Vulnerability**
- **Google Contacts CSRF with JSON Callbacks**

---

### SQL Injection
- **Definition:** Insertion of a SQL query via input data from the client to the application.
- **Example:**
  ```sql
  var sql = "SELECT * FROM users WHERE name = '" + userName + "';";
  ```
  - **Input:** `1' OR '1'='1`
  - **Result:** `"SELECT * FROM users WHERE name = '1' OR '1'='1';"`

**Worsening Factors in Web 2.0:**
- **Precursor to Exploiting Web 2.0 Technologies:**
  - **Malicious SWF Files:** Injected into sites.
  - **Malware-Serving JavaScript:** Injected into sites.
- **Injections in JSON, XML, SOAP, etc.**

**Example:**
- **Alumni Server SQL Injection Exploit, June 2009**

---

### XPATH Injection
- **Definition:** Injection of an XPATH query via input data from the client to the application.
- **Example:**
  ```xpath
  //unames/user[loginID/text()='sninja' and password/text()='secret']
  ```
  - **Input:** `' or 1=1`
  - **Result:** `//unames/user[LoginID/text()=' ' or 1=1 and password/text()=' ' or 1=1]`

**Worsening Factors in Web 2.0:**
- **XML Usage in AJAX:** XPATH injection becomes more relevant.

---

### XSS Worms
- **Definition:** Self-propagating XSS code injected into a web application, spreading when users visit a page.
- **Example:**
  - **Samy Worm (MySpace, 2005):** First XSS worm, spread through MySpace, infecting over 1 million profiles in 24 hours.

---

### Conclusion
- **Understanding the differences between Web 1.0 and Web 2.0** is crucial for identifying and mitigating security risks.
- **Common vulnerabilities** such as XSS, CSRF, and SQL Injection are exacerbated in Web 2.0 due to its dynamic and interconnected nature.
- **Proactive measures** and best practices are essential to secure Web 2.0 applications.

Thank you for your attention!