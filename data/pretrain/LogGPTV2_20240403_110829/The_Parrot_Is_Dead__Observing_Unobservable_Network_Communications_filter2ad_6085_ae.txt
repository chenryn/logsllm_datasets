Attack
Manipulate tag in SIP OK
SIP INVITE to
fakeID@suspiciousIP
SIP INVALID
SIP BYE with
invalid SIP-ID
Drop RTP packets
(only for conﬁrmation)
Imitation requirement
Soft
SideProtocols
Soft, Err
SideProtocols,Err
SideProtocols
Soft, Err
SideProtocols
Soft, Network
Adversary
LO/OB/OM Nothing
Typical SIP clients (e.g., Ekiga)
CensorSpoofer
Client closes the call
LO/OB/OM
Respond with “100 Trying” and “180 Ringing”,
“483 Busy Here”, “603 Decline”, or “404 Not Found”
LO/OB/OM Respond “400 BadRequest”
LO/OB/OM
LO/OB/OM
Respond “481 Call Leg/Transaction
Does Not Exist”
Terminate the call after a time period depending on
the client, may change codec in more advanced clients.
Nothing
Nothing
Nothing
Nothing
A genuine SIP client returns a status message, e.g., “100
Trying” and “180 Ringing”, or “483 Busy Here”, or “603
Decline”, or “404 Not Found”. CensorSpoofer returns noth-
ing and, furthermore, cannot ever mimic the proper response
because, by design, it does not receive the censor’s INVITE.
Send an invalid SIP message. In response to any message
not deﬁned by the SIP standard, a genuine SIP client returns
“400 BadRequest [Malformed Packet]”. CensorSpoofer re-
turns nothing. In contrast to the SIP INVITE probe, this test
is completely transparent to genuine callees.
Send a message for a non-existing call. Each SIP call has a
unique ID, which is negotiated in the call’s ﬁrst packet. If the
censor sends a SIP message (e.g., BYE) for a random call
ID, a genuine SIP client returns “481 Call Leg/Transaction
Does Not Exist”. CensorSpoofer returns nothing. This test,
too, is transparent to genuine callees.
To prevent these SIP probing attacks, a CensorSpoofer
spoofer may change its IP address selection algorithm and
use similar probes to ﬁnd addresses that are running genuine
SIP clients. This signiﬁcantly reduces the set of addresses
that can be used for spooﬁng. The nmap-based selection
algorithm of [59], which is less accurate than SIP probing,
ﬁnds only 12.1% of 10, 000 random IP addresses to be
suitable for spooﬁng. Our SIP probes to 10, 000 random
addresses did not return a single host running IETF-based
VoIP software such as Ekiga. The main reason is that pro-
prietary VoIP services like Skype, Oovoo, and Google Voice
are signiﬁcantly more popular than IETF-based services.
Instead of Ekiga, CensorSpoofer may attempt to mimic
a more popular proprietary service. This imitation will be
easily detectable due to CensorSpoofer’s use of spoofed IP
addresses. Genuine clients react in a certain way to probes
and manipulated messages, but CensorSpoofer cannot mimic
the right reaction because it does not actually receive the
probes sent to the spoofed IP address. This is a fundamental
design ﬂaw that cannot be ﬁxed.
Manipulating upstream packets.
Requirements: SideProtocols, Soft, Network
Adversary: Active, LO/OB/OM
According to the standard [53, § 6], the primary function
of RTCP is “to provide feedback on the quality” of RTP
sessions. This feedback may be used for “control of adaptive
encodings,” so one might expect that changes in network
bandwidth during an RTP session would result in RTCP
negotiations as clients adjust their VoIP codec. Nevertheless,
none of the tested VoIP clients, including Ekiga, Blink,
PhonerLite, and Twinkle, appear to react when RTP and
RTCP packets are dropped at various rates. Only dropping
all RTP packets for 10 seconds to 2 minutes, depending on
the client, results in the client terminating the call.
This allows easy detection of imitated sessions. Dropping
all RTP packets will cause a genuine RTP session to close,
but a CensorSpoofer session will not react. This attack is
acknowledged in [59], but described as expensive because it
interrupts genuine sessions. Note, however, that the censor
can use it only for conﬁrmation, e.g., for calls that failed
SIP probing tests. If a more advanced implementation of
RTP/RTCP adjusts codecs according to the network condi-
tions, this behavior must be imitated, too.
X. RELATED WORK
Pﬁtzmann and Hansen [45] proposed deﬁnitions for
privacy-related concepts including unobservability. Unob-
servability has been interpreted as anonymity or plausible
75
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
deniability in various systems [8, 37], none of which hide
the fact that a given user is participating in the system. We
do not consider such systems in this paper because they are
easily blockable and thus not censorship-resistant.
Several proposals for unobservable systems assume that
the participants share some secret not known to the censors.
An Infranet [20] client sends a special sequence of HTTP
requests to a friendly Web server who decodes the requested
URL and steganographically hides its content inside images
returned to the client. The identities of such servers must
be hidden from the censors. In Collage [14], a client and
a server secretly agree on websites with user-generated
content, e.g., ﬂickr.com, and use steganography to commu-
nicate through these sites. To achieve sender unobservability,
Nonesuch [26] steganographically hides data inside mes-
sages submitted to public Usenet newsgroups and dispatches
them through a cascade of mixes that probabilistically detect
and remove cover trafﬁc until the hidden message reaches
its intended recipient. None of these systems support low-
latency communications like Web browsing.
Pluggable Tor transports. To evade IP address ﬁltering,
many circumvention technologies rely on proxies such as
UltraSurf [57] and Tor bridges [17]. They face the problem
of distributing the proxies’ addresses to legitimate clients
while hiding them from the censors [39, 40].
With the emergence of advanced censorship techniques
like deep-packet inspection and active probing [63], hiding
the proxy’s address is not enough. A circumvention system
must also disguise is trafﬁc contents and patterns. Tor re-
cently adopted pluggable transports [46] that aim to remove
all content and pattern signatures characteristic of Tor.
Obfsproxy [44] is the ﬁrst pluggable Tor transport. It
tries to remove Tor-related content identiﬁers, but preserves
the patterns such as inter-packet times and packet sizes.
Therefore, it fails to achieve unobservability against today’s
censors [18]. Furthermore, Obfsproxy does not make Tor
trafﬁc look like another, “benign” protocol. This is the main
motivation for the recently proposed pluggable transports
that try to mimic Skype and/or HTTP (see Section III).
To evade proxy blocking, Flashproxy [22] proxies the traf-
ﬁc between a Tor client and a Tor bridge through short-term,
frequently changing proxies provided by Internet users who
visit volunteer websites helping Flashproxy. Flashproxy does
not attempt to mimic another protocol and our initial analysis
shows that it fails several requirements from Section V.
It fails Users: a Flashproxy client receives consecutive
incoming connections from geographically distributed IP
addresses and the lengths of these connections are similar
to typical Web browsing sessions. It also fails Content
and Pattern because it does not completely remove the
characteristic content and statistical patterns of Tor trafﬁc.
Other pluggable Tor transports include Dust [62], which
(as opposed to
deﬁnes a new format
for packet-level
connection-level) obfuscation, and FTE [19], a system for
imitating arbitrary packet formats. As we show in this paper,
packet-level imitation is insufﬁcient for unobservability.
Decoy routing. An alternative approach to unobservable
circumvention is decoy routing [27, 64]. In this approach,
a client steganographically hides her request to a blocked
destination inside trafﬁc sent to non-blocked destinations. A
friendly “decoy” router intercepts this trafﬁc, extracts the
request, and deﬂects it to the true destination. While not yet
implemented, trafﬁc shaping is essential in decoy routing
systems to protect against trafﬁc analysis [27].
In general, decoy routing systems do not mimic other
protocols and are outside the scope of our study. Further-
more, a recent study [52] shows that an adversary capable
of changing routing decisions can effectively block decoy
routing systems if they are deployed by only a few ISPs.
XI. LESSONS AND RECOMMENDATIONS
Unobservability may very well be the most important
property of censorship-resistant communication systems.
Users of these systems run a very real risk of imprisonment
and even death, and extra care must be taken to ensure that
censorship circumvention solutions offered to them provide
meaningful privacy and anonymity protection.
First, a thorough understanding of the adversaries is a
must. Systems like SkypeMorph, StegoTorus, and Censor-
Spoofer deploy ad-hoc defenses against large-scale trafﬁc
analysis, yet leave their communications trivially recogniz-
able even by very weak, local censors. Real-world censors
are much more likely to look for tell-tale local deviations
from genuine protocols (Section IV-C) than run sophisticated
statistical algorithms on ISP-wide trafﬁc traces.
Second, unobservability by imitation is a fundamen-
tally ﬂawed approach, unlikely to ever succeed due to the
daunting list of requirements that an imitator must satisfy
(Section V). The failure of all proposed parrot circumvention
systems to achieve unobservability conﬁrms this conclusion.
In particular, it is not enough to simply mimic a popular
protocol. To achieve unobservability, the parrot must mimic
a concrete implementation and be compatible with every
implementation-speciﬁc quirk and bug (a similar observation
has been made in other contexts such as HTML ﬁltering [7]
and ﬁle parsing [36]). For example, StegoTorus’s imitated
HTTP server is very distinct from any known HTTP server
and thus trivially recognizable. Mimicking side protocols
is especially difﬁcult due to their complex, dynamic inter-
dependences and correlations. As we demonstrated,
the
absence of such dependences is a dead giveaway of an
imitation. Some imitation ﬂaws are impossible to ﬁx at any
cost. For example, in the asymmetric, spooﬁng-based design
of CensorSpoofer, the imitator cannot see the censor’s probes
and thus cannot mimic appropriate responses.
Third, partial
imitation is worse than no imitation
at all. For example, Tor trafﬁc may be recognizable by
76
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
certain trafﬁc patterns, but this requires fairly sophisticated
analysis of multiple ﬂows. On the other hand,
the not-
quite-Skype imitation performed by SkypeMorph is easily
recognizable given even a short observation of a single ﬂow.
Users of SkypeMorph, StegoTorus, and similar systems may
be putting themselves at greater risk than the users of plain
Tor because these ostensibly “unobservable” Tor transports
are more distinct than Tor itself!
One promising alternative is to not mimic, but run the
actual protocol, i.e., move the hidden content higher in
the protocol stack. For example, FreeWave [28] hides data
in encrypted voice or video payloads sent over genuine
Skype, while SWEET [29] embeds it in email messages.
This approach is well-known in steganography [15]: the
covert information is always encoded into the features of
an actual cover medium (e.g., an image), as opposed to
synthesizing the medium. Embedding low-latency network
services like Tor into another protocol is a challenging task,
however. As in steganography, much research is needed to
ﬁnd the right balance between the unobservability of hidden
messages and communication efﬁciency. For example, sizes
of datagrams containing hidden messages may appear statis-
tically anomalous in comparison to regular Skype datagrams.
On the positive side, detection of such anomalies typically
requires large-scale analysis of multiple ﬂows and thus OM
capabilities, raising the technical threshold for the censors.
Acknowledgments. We are grateful to Suman Jana for his
insights and to Zack Weinberg for helping us understand
StegoTorus. This research was supported by the Defense
Advanced Research Agency (DARPA) and SPAWAR Sys-
tems Center Paciﬁc, Contract No. N66001-11-C-4018, NSF
grant CNS-0746888, and the MURI program under AFOSR
Grant No. FA9550-08-1-0352.
REFERENCES
[1] D. Adami, C. Callegari, S. Giordano, M. Pagano, and T. Pepe.
Skype-Hunter: A Real-Time System for the Detection and
Classiﬁcation of Skype Trafﬁc. Int. J. Communication Sys-
tems, 25(3):386–403, 2012.
[2] K. Allen. A Software Developer’s Guide to HTTP. http://
odetocode.com/articles/743.aspx.
[3] J. Arkko, E. Carrara, F. Lindholm, M. Naslund, and K. Nor-
rman. MIKEY: Multimedia Internet KEYing. RFC 3830.
China
[4] Joining
Internet.
like-china-iran-australia-ﬁlter-internet.
Filter
http://www.foxnews.com/scitech/2009/12/15/
Australia
Iran,
and
to
[5] S. Baset and H. Schulzrinne. An Analysis of the Skype Peer-
to-Peer Internet Telephony Protocol. In INFOCOM, 2006.
[6] S. Baset and H. Schulzrinne. Skype Relay Calls: Measure-
ments and Experiments. In INFOCOM, 2008.
[7] D. Bates, A. Barth, and C. Jackson. Regular Expressions
In WWW,
Considered Harmful in Client-side XSS Filters.
2010.
[8] O. Berthold, H. Federrath, and S. K¨opsell. Web MIXes: A
System for Anonymous and Unobservable Internet Access.
In Design Issues in Anonymity and Unobservability, 2000.
[9] D. Bonﬁglio and M. Mellia. Tracking Down Skype Trafﬁc.
In INFOCOM, 2008.
77
[10] D. Bonﬁglio, M. Mellia, and M. Meo. Revealing Skype
Trafﬁc: When Randomness Plays With You. In SIGCOMM,
2007.
[11] R. Breen. Circumventing Browser Connection Limits for
Fun and Proﬁt. http://www.ajaxperformance.com/2006/12/18/
circumventing-browser-connection-limits-for-fun-and-proﬁt/,
2006.
[12] Bridge Easily Detected by GFW. https://trac.torproject.org/
projects/tor/ticket/4185, 2011.
[13] Tor BridgeDB. https://gitweb.torproject.org/bridgedb.git/tree.
[14] S. Burnett, N. Feamster, and S. Vempala. Chipping Away
In
at Censorship Firewalls with User-Generated Content.
USENIX Security, 2010.
[15] I. Cox, J. Kilian, F. T. Leighton, and T. Shamoon. Secure
Spread Spectrum Watermarking for Multimedia. IEEE Trans-
actions on Image Processing, 6(12), 1997.
[16] Defeat Internet Censorship: Overview of Advanced Technolo-
gies and Products. http://www.internetfreedom.org/archive/
Defeat Internet Censorship White Paper.pdf, 2007.
[17] R. Dingledine and N. Mathewson. Design of a Blocking-
Resistant Anonymity System. https://svn.torproject.org/svn/