位  域
事  务
助 记 符
二进制编码
PP
本处理器发起请求
SRC
00
PP
本处理器响应请求
RES
01
PP
本处理器作为第三方观察到错误
OBS
10
PP
通用（generic）
11
T
请求超时
TIMEOUT
1
T
请求没有超时
NOTTIMEUT
0
II
内存访问
M
00
II
保留
01
II
I/O
IO
10
II
其他事务
11
6.3 编写MCA软件
本章开头提到过，MCA的整体设计思路是通过硬件与软件的配合
来实现对硬件错误的记录（logging）和处理（handling）的。这意味着
MCA设施需要软件的配合才能发挥作用。
6.3.1 基本算法
简单来说，如果CPU自身在运行过程中发生了错误，或者系统的其
他部件（如其他CPU、内存或MCH）发生了错误，并通过某种方式
（比如设置CPU的某些管脚信号）告知了CPU，那么CPU会先将事故现
场的相关信息记录到寄存器中，然后通过以下方式通知软件。
如果是不可纠正的错误，而且机器检查异常（MC#）被允许（CR4
寄存器），那么CPU便会产生一个机器检查异常，然后转去执行软件事
先设置好的异常处理例程。比如观察Windows 10系统（64位）的IDT，
可以看到负责处理MCE异常的内核函数名叫KiMcheckAbort。
如果是可纠正的错误，或者机器检查异常（MC#）被禁止，那么
CPU不会产生异常（只是将错误情况记录在那儿，期望软件来读取）。
对于这类情况，软件应该定期查询MCA寄存器来检测是否曾经有机器
检查错误发生。
对于支持CMCI的处理器（MCG_CMCI_P为1），可以通过可纠正
机器检查异常处理函数来处理尚未纠正的可恢复（Uncorrected
Recoverable，UCR）错误。
清单6-1给出了机器检查异常处理例程的伪代码，该代码的最初版
本来源于IA手册（卷3A 15-2），但作者对其做了部分修改。
清单6-1 机器检查异常处理例程
1    IF CPU supports MCE
2      THEN
3        IF CPU supports MCA
4          THEN
5            call errorlogging routine; (* returns restartability *)
6          ELSE (* Pentium(R) processor compatible *)
7            READ P5_MC_ADDR
8            READ P5_MC_TYPE;
9            report RESTARTABILITY to console;
10       FI;  
11   FI;
12   IF error is not restartable
13     THEN
14       report RESTARTABILITY to console;
15       abort system;
16   FI;
17   IF CPU supports MCA
18     THEN CLEAR MCIP flag in IA32_MCG_STATUS;
19   FI;
第1～3行是通过CPUID指令来检查处理器对MCE和MCA的支持情
况（EDX的相应位）的。第7～9行是针对奔腾处理器的特殊处理的。值
得说明的是，上述伪代码是没有包含恢复UCR错误的逻辑，IA手册卷
3A清单15-4给出了支持UCR的伪代码。
清单6-2给出了查询和记录机器检查错误的伪代码。
清单6-2 查询和记录机器检查错误的伪代码
1    Assume that execution is restartable;
2    IF the processor supports MCA
3      THEN
4        FOR each bank of machine-check registers
5          DO
6            READ IA32_MCi_STATUS;
7            IF VAL flag in IA32_MCi_STATUS = 1
8              THEN
9                IF ADDRV flag in IA32_MCi_STATUS = 1
10                 THEN READ IA32_MCi_ADDR;
11               FI;
12               IF MISCV flag in IA32_MCi_STATUS = 1
13                 THEN READ IA32_MCi_MISC;
14               FI;
15               IF MCIP flag in IA32_MCG_STATUS = 1
16                   (* Machine-check exception is in progress *)
17                   AND PCC flag in IA32_MCi_STATUS = 1
18                   OR RIPV flag in IA32_MCG_STATUS = 0
19                   (* execution is not restartable *)
20                 THEN
21                   RESTARTABILITY = FALSE;
22                   return RESTARTABILITY to calling procedure;
23               FI;
24               Save time-stamp counter and processor ID;
25               Set IA32_MCi_STATUS to all 0s;
26               Execute serializing instruction (i.e., CPUID);
27             FI;
28         OD;
29   FI;
从第4行开始一个FOR循环，每次处理一组（bank）错误报告寄存
器。可以通过查询IA32_MCG_CAP（或P6的MCG_CAP）寄存器得到错
误报告寄存器的组数。
第15～23行用来检查是否可以返回发生错误的地方并重新执行，第
17行判断PCC（Process Context Corrupt）标志位——该位为1表示处理
器的上下文已经损坏，第18行判断RIPV（Restart IP Valid）标志——该
位为0表示不可以恢复执行。较老版本IA手册中的原始代码（Example
14-3）在第18行处的OR位置是AND，作者认为不当，因为这两个条件
之一满足，就不可以恢复执行了。在作者编写本书第2版时，新版IA手
册（Example 15-3）已经改正了这个错误。
6.3.2 示例
下面通过一个使用MFC编写的小程序MCAViewer来演示如何检测
CPU对MCA的支持情况，以及如何通过查询方式读取错误报告寄存器
的内容。图6-6是MCAViewer在作者编写本书第1版时使用的电脑上运行
时的截图。
图6-6 MCAViewer的执行界面
从图6-6中可以看到，运行MCAViewer的CPU既支持MCE又支持
MCA，说明一定是P6或P6后的CPU（实际上是Pentium 4）。列表的第
二行显示该CPU共配备了4组错误报告寄存器。清单6-3给出了如何读取
MCA各个错误报告寄存器的源代码，整个程序的完整代码位于
chap06\McaViewer目录中。
清单6-3 读取MCA的错误报告寄存器
1    #define MCA_MCIBANK_BASE 0x400
2    void CMcaPoller::PollBanks(CListBox &lb)
3    {
4       MSR_STRUCT msr;
5       TCHAR szMsg[MAX_PATH];
6       //
7       LPCTSTR szBankMSRs[]={"CTRL","STAT","ADDR","MISC"};
8       // 每个Bank 4个MSR寄存器，我们把它们的名字
9       //显示为相等长度
10      //
11    
12      if(m_nTotalBanks<=0)
13         DetectMCA(lb);
14      if(m_nTotalBanks<=0)
15         return;
16    
17      msr.MsrNum=MCA_MCIBANK_BASE;
18      for(int i=0;i<m_nTotalBanks;i++)
19      {
20         //循环显示每个寄存器
21         for(int j=0;j<4;j++)
22         {
23            if(m_DvrAgent.RDMSR(msr)<0)
24               sprintf(szMsg,"Failed in reading [%s]_MSR at bank %d.",
25                  szBankMSRs[j],i);
26            else
27               sprintf(szMsg,"[%s]_MSR at bank [%d]:%08X-%08X", 
28                  szBankMSRs[j],i,msr.MsrHi,msr.MsrLo);
29            lb.AddString(szMsg);
30            msr.MsrNum++;
31         }
32      }
33   }
因为IA-32架构将错误报告寄存器的起始地址确定为0x400，每组包
含4个寄存器，所以只要使用两层循环就可以很简单地遍历所有寄存器
了。值得说明的是，并不是每一组都全部实现4个寄存器，应该根据每
组的状态寄存器（STATUS）来判断该组是否包含地址（ADDR）和附
加信息（MISC）寄存器。以上代码省略这个判断，因此图6-6包含了几
条读取MISC和ADDR寄存器失败的记录。
6.3.3 在Windows系统中的应用
在Windows系统中，内核会负责处理机器检查异常，并提供接口给
其他驱动程序或上层应用程序。从Windows XP开始，硬件抽象层
（HAL）便包含了对MCA的基本支持，并可通过
HalSetSystemInformation()注册更复杂的MCA处理例程。
McaDriverInfo.ExceptionCallback = MCADriverExceptionCallback;
    McaDriverInfo.DpcCallback = MCADriverDpcCallback;
    McaDriverInfo.DeviceContext = McaDeviceObject;
    Status = HalSetSystemInformation(
                 HalMcaRegisterDriver,
                 sizeof(MCA_DRIVER_INFO),
                 (PVOID)&McaDriverInfo
                 );
Windows XP的DDK包含了一个完整的例子，名为
IMCA（DDKROOT\src\kernel\mca\imca）。感兴趣的读者可以进一步阅
读其代码或对其进行编译安装。
Windows Server 2003 DDK的示例源代码包含了一个名为mcamgmt
的小程序（路径为DDKROOT\src\kernel\mca\mcamgmt），演示了如何
通过WMI接口查询、读取和解析MCA信息。图6-7是在Windows 10系统
上运行这个小程序的截图。