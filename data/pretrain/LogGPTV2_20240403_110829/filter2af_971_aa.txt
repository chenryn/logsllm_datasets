**作者：SungLin@知道创宇404实验室  
时间：2019年7月30日 **
### 一．恶意邮件样本的信息与背景
在六月份的某单位HW行动中，知道创宇HW安全团队通过创宇云图APT威胁感知系统并结合腾讯御点终端安全管理系统成功处置了一起APT攻击事件。
7月份对同一样本的补充截图如下： ![
](https://images.seebug.org/content/images/2019/08/bcdddc51-7811-4002-b5be-ff935ac3e28b.jpg-w331s)
在本次APT攻击中，攻击者通过发送鱼叉式钓鱼邮件，配合社会工程学手段诱导用户运行宏代码，进而下载尾部带有恶意payload压缩包的可执行文件。通过层层释放最终运行可窃取受害人员各类机密信息、维持权限、接收远端控制的木马。
文档打开后，会诱导用户需要开启宏才能查看被模糊的图片，一旦用户点击开启宏，恶意样本将会在用户电脑上运行、潜伏、收集相应的信息、等待攻击者的进一步指令。
![
](https://images.seebug.org/content/images/2019/08/316e557e-b4b0-401e-9377-9d9a2d9926f7.png-w331s)
该APT样本整体运行流程图如下：
![
](https://images.seebug.org/content/images/2019/08/7203bca3-0f08-4705-ae85-8cf987be2dfe.png-w331s)
### 二．宏病毒文档的提取与调试
使用OfficeMalScanner解压Office文档并提取文档所带的vba宏代码，打开Office文档启用宏后，采用快捷键Alt+F11开启宏代码的动态调试。该宏代码作为实施攻击的入口，实现了恶意样本的下载和执行。本章也将分析下载和执行的整体流程。
解压该Office文档后，宏代码被封装在xl文件夹下的vbaProject.bin文件中。
![
](https://images.seebug.org/content/images/2019/08/9d2c0385-1f00-4ca8-8a22-20c422a4d573.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/5704cf05-525a-4e03-b2b2-97eb420c95ba.png-w331s)
使用OfficeMalScanner这个工具的命令info从vbaProject.bin中提取宏代码，提取完后可以知道有6个宏代码，其中fdrhfaz2osd是主要的宏代码：
![
](https://images.seebug.org/content/images/2019/08/e7a50072-2da5-44de-a836-618832fff0aa.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/c157e69c-8b92-4dec-8547-446a1f262927.png-w331s)
动态调试分析宏代码，首先宏代码传入两个值u和f，分别是请求的url和写入的filepath。
![
](https://images.seebug.org/content/images/2019/08/01a896dd-e52b-4da0-b5f9-8d0b7410f3c0.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/e1a561ef-f18c-4082-9448-0fa17575bc74.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/2d950c7c-60aa-426e-a21e-bcdf7c34c830.png-w331s)
通过调用WinHttp.WinHttpRequest模块的方法Get请求来获取Response并写入到文件gc43d4unx.exe中。
![
](https://images.seebug.org/content/images/2019/08/fd82edfb-1296-4c1e-94d0-2fbd070a93d8.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/3fa75990-037c-408c-ae78-72e966a4a5bd.png-w331s)
最后通过调用WScript.Shell来启动程序gc43d4unx.exe。
![
](https://images.seebug.org/content/images/2019/08/7f3d3bbb-016c-4c48-890d-4f15e82247af.png-w331s)
### 三．gc43d4unx.exe释放pkk.exe等文件并执行
程序gc43d4unx.exe在文件的末尾存放了一个RAR的压缩文件，gc43d4unx.exe程序通过解压缩后在用户Temp目录下的29317159文件夹释放了49个文件，并以pkk.exe
xfj=eaa命令继续执行恶意样本。
压缩文件在gc43d4unx.exe中的分布情况。
![
](https://images.seebug.org/content/images/2019/08/6e0ebeb0-f655-4826-b1b0-2383eeaee52d.png-w331s)
gc43d4unx.exe主要逻辑在对话框的回调函数sub_419B4E中，识别Rar!的头部标识
![
](https://images.seebug.org/content/images/2019/08/74d255ea-54ce-4de0-99c0-cffba336a39d.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/f0c74c99-717c-410d-8d27-1d6767b4807d.png-w331s)
解压缩到映射的内存文件中，然后再挨着写到各个文件中
![
](https://images.seebug.org/content/images/2019/08/884610c4-9ca1-49ed-a79b-d70131673f70.png-w331s)
在用户Temp目录下的29317159文件夹生成隐藏文件
![
](https://images.seebug.org/content/images/2019/08/b930ba41-2fcf-45d6-bc76-e14eb293d76c.png-w331s)
最后通过SHELL32.ShellExecuteExW执行qwb.vbs代码，qwb.vbs则会使用WshShell.Run运行pkk.exe
xfj=eaa。
 ![
](https://images.seebug.org/content/images/2019/08/f6145d1d-c1f6-4f05-8720-44162bacda9f.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/3317579c-29dc-4c8f-9788-b4d1aa06d7b1.png-w331s)
### 四．PayLoad之pkk.exe运行分析
pkk.exe是个名为AutoIt
v3的脚本软件，可以加载自定义脚本。主要是就是通过定义DllStruct，然后再通过DllCall来调用函数。qwb.vbs运行代码为WshShell.Run”pkk.exe
xfj=eaa”，通过pkk.exe加载一个叫xfj=eaa的二进制文件。
软件先判断载入的是不是DLL，xfj=eaa是个编码后的脚本，判断后程序将会尝试解码。
![
](https://images.seebug.org/content/images/2019/08/ce5b791c-0d98-4534-83a9-06da73739746.png-w331s)
解码成功后，将解码数据写入一个临时文件中，软件将会重新创建一个进程来重新加载脚本。
![
](https://images.seebug.org/content/images/2019/08/7095b140-1dc8-46a2-b51d-38d43541775c.png-w331s)
解码后的Autolt脚本，代码被混淆了。
![
](https://images.seebug.org/content/images/2019/08/6c483368-cfc9-4217-b484-bf7fb0b63d15.png-w331s)
根据混淆的脚本，只是函数名混淆，而且脚本只是一个纯文本代码，通过重写此脚本后，可以看到基本还原的Autolt脚本代码了。
![
](https://images.seebug.org/content/images/2019/08/a1055881-9bee-449e-a162-bd59e6ddd6e3.png-w331s)
Autolt软件解析完脚本后根据字符串功能通过分发函数来执行相应的函数。
![
](https://images.seebug.org/content/images/2019/08/2ff50aab-b767-4efd-95c9-009c6fba3ea9.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/3a9d2181-f07a-48f7-a5c3-0b7225a32130.png-w331s)
### 五．PayLoad之Autolt脚本分析
Autolt脚本包含的功能有：检测运行环境、修改注册表、解密最终的.net木马并运行。
通过检测进程名、设备是否有D盘等操作实现反虚拟机检测
![
](https://images.seebug.org/content/images/2019/08/1b224d61-53fd-4fa4-8002-bf436b237d14.png-w331s)
注册表禁用UAC策略函数
![
](https://images.seebug.org/content/images/2019/08/c308cf11-58bf-4376-8b04-88b9a0b6d27c.png-w331s)
注册表禁用任务管理器函数
注册表开启自启函数,AuEx和ExE_c的值分别是xfj=eaa、pkk.exe。
![
](https://images.seebug.org/content/images/2019/08/85368e07-8279-4220-a605-99726344929e.png-w331s)
解密.net木马：
读取K3ys这个键值和mmm.ini文件中[Data]段到[eData]，将此数据进行字符替换正则匹配。
![
](https://images.seebug.org/content/images/2019/08/db0f6fed-1f6a-4558-bd37-6f14afcbcef6.png-w331s)
![
](https://images.seebug.org/content/images/2019/08/dfed8b74-f494-49f8-a2a2-01e18dc6d0dd.png-w331s)
载入Advapi32.dll，将K3ys键值进行Hash计算获取到真正的key，后再调用CryptDecrypt函数解密，利用ollydbg动态调试dump出解密数据，解密后的数据就是一个PE结构的程序，用IDA分析程序后，为.NET程序，这个.NET程序就是最后核心木马了，Autolt脚本后续将此PE结构加载进去，创建线程去单独运行此程序。
![
](https://images.seebug.org/content/images/2019/08/767cde76-16b3-44c4-9915-b257bf2e8d44.png-w331s)
### 六．.NET木马分析
木马主要功能进行了敏感信息收集，敏感信息收集完后会判断目标主机是否符合收集目标，以判断6个人名为主，符合本机收集目标，将会通过smtp或者ftp服务器上传文件,并且也通过web服务和c&c进行信息交流等。
木马程序的基本信息：
用.net反编译工具dnSpy打开此程序，程序入口处就是在类afg.agu，此木马经我判定进行了控制流扁平化和字符串加密的混淆方式，采用工具de4dot无法进行反混淆。
![