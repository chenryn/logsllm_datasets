||||||||||||||||||||
gateway
configuring, 66–67
ARP poisoning, 74–77
DHCP spoofing, 71–74
default, 8, 66
forwarding traffic to, 71–77
hops, 65
nodes, 64
routing tables on, 65–66
GB2312, 44
GCC compiler, 196
GCM (Galois Counter Mode), 155
GDB (debugger), 236–241
General Public License, 14
general purpose registers, 116–117, 136
GET request, 8, 29
GetConstructor method (.NET), 191
getDeclaredConstructor() (Java), 195
GetMethod() method (.NET), 192–193
Google, 170, 176–177
GS register, 116, 118
guard pages, 245
GUI registry editor, 67
GVSP protocol, 182
gzip, 217
H
handshake, 172
hardcoded credentials, 218
hash table, 225
hashed message authentication codes (HMAC), 168–169
hashing algorithms
collision resistance, 164
cryptographic, 164–165
nonlinearity of, 164
pre-image resistance, 164
||||||||||||||||||||
||||||||||||||||||||
secure, 164–165, 202
SHA-1, 133, 165–166
SHA-2, 165
SHA-3, 168
HEAD, 29
Header,, 4–5
C, 17, 262
Ethernet, 6
HTTP, 24, 32–34
IP, 6
system call number, 260
TCP, 5, 87
UDP, 5
heap buffer overflows, 248–249
heap implementations, 250–251
heap memory storage, 253
Hellman, Martin, 162
Hex Dump (Wireshark), 86–95
determining protocol structure in, 88–89
information columns in, 87
viewing individual packets in, 87
hex editor, 125
hex encoding, 59–60
Hex Rays, 125
high privileges, 254–255
HMAC (hashed message authentication codes), 168–169
Hopper, 289–290
hops, 65
host header, 24, 32–33
host order, 42
hosts file, 23, 34
Hping, 282
HTTP (HyperText Transport Protocol), 3, 56
host header, 24
network protocol analysis, 8–10
proxies. See also protocols
forwarding, 29–31
Technet24
||||||||||||||||||||
||||||||||||||||||||
reverse, 32–35
I
IBM, 151
ICS (Internet Connection Sharing), 69
IDA Pro, 289
analyzing stack variables and arguments in, 128
analyzing strings in, 132
debugger windows, 135–136
EIP window, 135
ESP window, 136
disassembly window, 127–128
extracting symbolic information in, 129–131
free version, 125–128
graph view, 126
identifying automated code in, 133–134
Imports window, 131–132
main interface, 127
viewing imported libraries in, 131–132
windows, 126–127
IEEE format, 40–41
IEEE Standard for Floating-Point Arithmetic (IEEE 754), 40
ILSpy, 138, 290
analyzing type in, 140–141
main interface, 139
Search window, 139
implicit-length data, 48–49
in-band method, 253
inbound bytes, 89–92
inbound data, 92
INC instruction, 115
incorrect resource access, 220–223
canonicalization, 220–221
verbose errors, 221–222
inet_pton, 122–123
information disclosure, 209
||||||||||||||||||||
||||||||||||||||||||
initialization vector, 154
inner padding block, 168
instruction set architecture (ISA), 114–116
integer overflows, 214–215
integers
signed, 39
text protocols, 55
unsigned, 38
variable-length, 39–40
Intel, 114
Intel syntax, 116
Internet Connection Sharing (ICS), 69
Internet layer, 3
Internet Protocol (IP), 2
Internet Protocol Suite (IPS)
data encapsulation, 4–7
data transmission, 6–7
defined, 3
layers, 3
network routing, 7–8
interpreted languages, 112
interpreters, 112
Invoke() method (.NET), 192–193
IP (Internet Protocol), 2
IP address
32-bit, 24
ARP poisoning, 74–77
data transmission, 6–7
destination, 18, 22
DNAT, 69–71
DNS spoofing, 34
hosts file, 34
NAT, 68
network routing, 7–8
reverse shell, 266
SNAT, 68
SOCKS connection, 25
Technet24
||||||||||||||||||||
||||||||||||||||||||
ipconfig command, 69
iptables command, 69
IPS. See Internet Protocol Suite (IPS)
IPv4, 3, 5, 24, 52, 122
IPv6, 3, 5–6, 25, 52, 67
ISA (instruction set architecture), 114–116
J
Japanese characters, 44
Java, 112, 210
applications, 141–142
reflection types, 194
repurposing codes in, 193–195
Java archive (JAR), 141, 193–194
Java byte code, 137
Java Decompiler, 288
Java Runtime, 27
JavaScript, 252
JavaScript Object Notation (JSON), 57–58
Java TCP client, 27
Jcc instruction, 115
JD-GUI, 142
JMP instruction, 115, 119
K
Kali Linux, 286
kernel mode, 14
key-scheduling algorithm, 151
Korean characters, 44
Krypto Analyzer, 134
L
least significant bit (LSB), 38
||||||||||||||||||||
||||||||||||||||||||
length-extension attacks, 166–168
length-prefixed data, 48
lengths, 107
LibPCAP, 278–279
line feed, 56
line oriented protocols, 56
linking, 113–114
link layer, 3, 6
Linux, 120
ASLR implementation flaws in, 272
configuring SNAT on, 69
cron jobs, 254
debug symbols, 129
debugger, 236–241
dynamic libraries, 196
enabling routing on, 67
error codes, 262
executable file format, 131
loading library on, 197
SOCKS proxy, 27
strace, 16
little endian, 42, 122
LLDB (debugger), 236–241
Load() method (.NET), 190
LoadFrom() method (.NET), 190
local variables, corrupting, 274–275
localhost, 12
low-privileged file writes, 255
Lua, 95–103
M
MAC (Media Access Control) addresses, 6–7, 8, 74–77
machine code, 112–114, 120, 125
macOS, 16, 27–28, 120
debug symbols, 129
debugger, 236–241
Technet24
||||||||||||||||||||
||||||||||||||||||||
dynamic libraries, 196
enabling routing on, 67
Mach-O format, 120, 131, 144
MACs. See message authentication codes (MACs)
magic constants, 132
mail application, 3
main thread, 121
Mallory, 281–282
malware, 23
man 2 syscall_name command, 16
managed languages
Java, 141–142
.NET applications, 137–141
reverse engineering, 137–144
man-in-the-middle proxy, 20, 201
masquerading, 68
master secret (TLS), 175
MD algorithm. See message digest (MD) algorithm
Media Access Control (MAC) addresses, 6–7, 8, 74–77
memory
arbitrary writing of, 253–254
heap memory storage, 253
information disclosure vulnerabilities, 270–271
wasted, 250
memory canaries (cookies)
bypassing by corrupting local variables, 274–275
bypassing with stack buffer underflow, 275–276
detecting stack overflows with, 273–276
memory corruption. See also vulnerabilities
buffer overflows, 210–215
data expansion attack, 217
dynamic memory allocation failures, 217
exploit mitigations, 266–276
address space layout randomization, 270–273
data execution prevention, 266–267
return-oriented programming, 268–270
exploiting, 245–253
||||||||||||||||||||
||||||||||||||||||||
heap buffer overflows, 248–249
stack buffer overflows, 246–248
memory-safe vs. memory-unsafe languages, 210
off-by-one error, 213
out-of-bounds buffer indexing, 216–217
memory exhaustion attacks, 222–223
memory index registers, 117
memory sections, 120
memory-safe languages, 210
memory-unsafe languages, 210
Message Analyzer, 278
message authentication codes (MACs)
collision attacks, 166–168
hashed, 168–169
length-extension attacks, 166–168
signature algorithms, 166–168
Message command, 101–102
message digest (MD) algorithm, 164
MD4, 165
MD5, 133, 165–167
message packet, 100–103
Metasploit, 286
accessing payloads, 265
advantages and disadvantages of, 265–266
executing payloads, 266
generating shell code with, 265–266
MethodInfo type (.NET), 192
Microsoft, 170
Microsoft Message Analyzer, 278
MIME (Multipurpose Internet Mail Extensions), 56–57
minus sign (-), 55
MIPS, 42, 137
Mitmproxy, 284–285
mnemonic instruction, 114
modulo arithmetic, 214
modulus, 161, 214
Technet24
||||||||||||||||||||
||||||||||||||||||||
mono binary, 80
Mono Project, 137
most significant bit (MSB), 38
MOV instruction, 115
Mozilla Firefox, 26
MSCORLIB, 141
MS-DOS, 119
msfvenom tool, 265–266
multibyte character sets, 44
multiplexing, 51–52
Multipurpose Internet Mail Extensions (MIME), 56–57
multitasking, 120
N
namespace, 193
name-value pairs (XML), 58
nasm assembler, 256, 258, 263
NAT. See network address translation (NAT)
.NET applications
base class library, 141
file formats, 137–138
ILSpy, 138–141
reflection binding types, 192
reflection types, 190
repurposing codes in, 189–193