### 8.3.8 What is Missing
This study excluded several well-known open-source fuzzers, such as SPIKE, Sulley, and Peach. These tools are considered fuzzing frameworks rather than ready-made, protocol-specific fuzzers. They allow users to generate fuzzed inputs based on a specification file. If one were to test these fuzzers using the strategies outlined in this chapter, the focus would be on the particular format specification rather than the framework itself. Additionally, creating a comprehensive specification file can take weeks. At the time of the analysis, Sulley already included sophisticated monitoring and analysis tools, and SPIKE supported Layer 2 protocols.

### 8.4 The Targets
Three protocols were selected for testing: FTP, SNMP, and DNS. These protocols are extremely common, relatively simple, and represent both ASCII-based and binary protocols. For FTP and SNMP, server implementations were tested, while a DNS client was examined. To avoid finding real bugs, well-established and robust open-source implementations were chosen.

- **FTP Server**: ProFTPD was selected. It was configured with mostly default settings, with some modifications to ensure the fuzzer could run quickly without the server denying connections. An anonymous login was enabled, and the ability to download and upload documents was included.
- **SNMP Server**: Net-SNMP was used. The server was configured to accept version 2 SNMP with a suitable community string and version 3 SNMP with a valid username (no authentication required). This user was given read and write access. Configuration options significantly affected the outcome, as some fuzzers may only handle certain SNMP versions.
- **DNS Client**: The `dig` utility from the BIND open-source DNS library was chosen.

### 8.5 The Bugs
For each program implementation, 17 bugs were intentionally added. Approximately half were buffer overflows, a quarter were format string vulnerabilities, and the remaining were from other categories such as command injection, double free, and wild pointer writes. Some bugs were easy to find, while others were hidden deeper within the application. All bugs were tested to ensure they were remotely accessible and not detectable using the standard server or client. Each vulnerability was prefixed with code to log when it had been detected, ensuring accurate tracking regardless of the monitoring method used.

#### Example Bugs
- **FTP Bug 0**:
  ```c
  MODRET xfer_type(cmd_rec *cmd) {
      ...
      if (strstr(get_full_cmd(cmd), "%") != NULL) {
          BUGREPORT(0);
      }
      char tempbuf[32];
      snprintf(tempbuf, 32, "%s not understood", get_full_cmd(cmd));
      pr_response_add_err(R_500, tempbuf);
  }
  ```
  This bug occurs due to a format string vulnerability in the `pr_response_add_err` function.

- **FTP Bugs 2 and 16**:
  ```c
  MODRET xfer_stru(cmd_rec *cmd) {
      ...
      cmd->argv[1][0] = toupper(cmd->argv[1][0]);
      switch ((int) cmd->argv[1][0]) {
          ...
          case 'R':
          case 'P':
              {
                  char tempbuf[64];
                  if (strlen(get_full_cmd(cmd)) > 34) {
                      BUGREPORT(16);
                  }
                  if (strstr(get_full_cmd(cmd), "%") != NULL) {
                      BUGREPORT(2);
                  }
                  sprintf(tempbuf, "'%s' unsupported structure type.", get_full_cmd(cmd));
                  pr_response_add_err(R_504, tempbuf);
                  return ERROR(cmd);
              }
      }
  }
  ```
  These bugs involve a buffer overflow and a format string issue in the processing of the STRU FTP command, but they are only detectable if the first character of the string is 'R' or 'P'.

### 8.6 Results
After setting up the bugs and fuzzers, the performance of the fuzzers was evaluated. The following abbreviations were used in the results:

- **Random**: Purely random data fed into the interface.
- **GPF Partial**: GPF used with a partial packet capture.
- **GPF Full**: GPF with a full packet capture.
- **SuperGPF**: SuperGPF with a full packet capture and a text file of valid FTP commands.
- **TAOF Partial**: TAOF with a partial packet capture.
- **TAOF Full**: TAOF with a full packet capture.
- **ProxyFuzz Partial**: ProxyFuzz with a partial packet capture.
- **ProxyFuzz Full**: ProxyFuzz with a full packet capture.
- **GPF Generic**: GPF with a generic binary tokAid.
- **GPF SNMP**: GPF with a custom written SNMP tokAid.

Generation-based fuzzers ran through all their test cases, while mutation-based fuzzers were allowed to run for 25,000 test cases or seven hours, whichever came first.

#### 8.6.1 FTP
Table 8.1 summarizes the bugs found while fuzzing the FTP server. Figure 8.1 shows the percentage of bugs found and the total percentage of code coverage obtained by each fuzzer. The code coverage represents the percentage of source code lines executed after authentication.

| Bug | 0 | 1 | 3 | 4 | 5 | 9 | 11 | 12 | 13 | 14 | 15 | 16 |
|-----|---|---|---|---|---|---|----|----|----|----|----|----|
| GPF Random |   |   |   |   |   |   |    |    |    |    |    |    |
| GPF Partial | X | X | X |   |   |   |    |    |    |    |    |    |
| GPF Full | X | X | X | X | X |   |    |    |    |    |    |    |
| Super GPF | X | X | X | X | X | X |    |    |    |    |    |    |
| TAOF Partial |   |   |   |   |   |   |    |    |    |    |    |    |
| TAOF Full | X | X | X |   |   |   |    |    |    |    |    |    |
| ProxyFuzz Partial |   |   |   |   |   |   |    |    |    |    |    |    |
| ProxyFuzz Full | X | X | X |   |   |   |    |    |    |    |    |    |
| Mu-4000 | X | X | X | X | X |   |    |    |    |    |    |    |
| FTPfuzz | X | X | X | X |   |   |    |    |    |    |    |    |
| Codenomicon | X | X | X | X | X | X |    |    |    |    |    |    |

#### 8.6.2 SNMP
Table 8.2 displays the results of the fuzzing against the SNMP server. SuperGPF was not used as it only works on ASCII protocols.

| Bug | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |
|-----|---|---|---|---|---|---|---|---|----|----|----|----|----|----|----|
| GPFRandom |   |   |   |   |   |   |   |   |    |    |    |    |    |    |    |
| GPF Generic | X | X | X | X | X | X | X |   |    |    |    |    |    |    |    |
| GPF SNMP | X | X | X | X | X | X | X | X | X |    |    |    |    |    |    |
| ProxyFuzz | X | X | X | X | X | X |   |   |    |    |    |    |    |    |    |
| Mu-4000 | X | X | X | X | X | X | X | X | X | X | X |    |    |    |    |
| PROTOS | X | X | X | X | X | X | X |   |    |    |    |    |    |    |    |
| Codenomicon | X | X | X | X | X | X | X | X | X | X | X |    |    |    |    |
| beSTORM | X | X | X | X | X | X |    |    |    |    |    |    |    |    |    |

#### 8.6.3 DNS
Table 8.3 lists which bugs were found by which fuzzers. The Mu-4000 fuzzer does not fuzz client-side applications and was excluded from this testing.

| Bug | 0 | 1 | 2 | 3 | 4 | 5 | 7 | 8 | 11 | 12 | 13 | 14 | 15 |
|-----|---|---|---|---|---|---|---|---|----|----|----|----|----|
| GPF Random |   |   |   |   |   |   |   |   |    |    |    |    |    |
| GPF Generic | X | X | X | X |   |   |   |   |    |    |    |    |    |
| ProxyFuzz | X | X | X | X | X | X | X | X | X |    |    |    |    |
| Codenomicon | X | X | X | X | X | X | X | X | X | X | X | X | X |
| beSTORM | X |   |   |   |   |   |   |   |    |    |    |    |    |

### 8.7 A Closer Look at the Results
Some of the results were surprising, while others were expected. Let's examine some of the more prominent anomalies in the data.

#### 8.7.1 FTP
- **Bugs 9, 12, and 13**: Found by GPF but no other fuzzers.
- **Bugs 14 and 16**: Found by TAOF and ProxyFuzz but no other fuzzers.
- **Bugs 4, 5, and 15**: Found by generational-based fuzzers but not mutation-based ones.

**Bug 9**:
```c
MODRET core_size(cmd_rec *cmd) {
    ...
    if (!path || !dir_check(cmd->tmp_pool, cmd->argv[0], cmd->group, path, NULL) || pr_fsio_stat(path, &sbuf) == -1) {
        char tempbuf[64];
        if (strstr(cmd->arg, "%")) {
            BUGREPORT(9);
        }
        strncpy(tempbuf, cmd->arg, 64);
        strncat(tempbuf, ": ", 64);
        strncat(tempbuf, strerror(errno), 64);
        pr_response_add_err(R_550, tempbuf);
    }
}
```
This is a format string vulnerability in the SIZE FTP verb. Generational-based fuzzers did not execute the size verb, likely because it is not in the RFC 959. Since TAOF and ProxyFuzz used the same packet capture, they should have found this bug, but ProxyFuzz may not have run long enough.

**Bug 16**:
```c
MODRET core_eprt(cmd_rec *cmd) {
    char delim = '\0', *argstr = pstrdup(cmd->tmp_pool, cmd->argv[1]);
    ...
    /* Format is protoip addressport (ASCII in network order), where  is an arbitrary delimiter character. */
    delim = *argstr++;
    ...
    while (isdigit((unsigned char) *argstr))
        argstr++;
    ...
    if (*argstr == delim)
        argstr++;
    ...
    if ((tmp = strchr(argstr, delim)) == NULL) {
        pr_log_debug(DEBUG3, "badly formatted EPRT argument: '%s'", cmd->argv[1]);
        char tempbuf[64];
        if (strstr(cmd->argv[1], "%") != NULL) {
            BUGREPORT(16);
        }
        snprintf(tempbuf, 64, "badly formatted EPRT argument: '%s'", cmd->argv[1]);
        pr_response_add_err(R_501, tempbuf);
        return ERROR(cmd);
    }
}
```
To activate this bug, the EPRT argument must lack sufficient delimiters, and the portion after the second delimiter must contain a format string specifier. Generational-based fuzzers did not run the EPRT command, and GPF always included the correct number of delimiters, missing the bug.

**Bug 4**:
```c
char *dir_canonical_path(pool *p, const char *path) {
    char buf[PR_TUNABLE_PATH_MAX + 1] = {'\0'};
    char work[256 + 1] = {'\0'};
    if (*path == '~') {
        if (strlen(path) > 256 + 1) {
            BUGREPORT(4);
        }
        if (pr_fs_interpolate(path, work, strlen(path)) != 1) {
            if (pr_fs_dircat(work, sizeof(work), pr_fs_getcwd(), path) < 0)
                return NULL;
        }
    }
}
```
This bug is activated when a long path starting with a tilde is used. Only generational-based fuzzers found this bug.