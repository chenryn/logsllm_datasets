说过KISS这一非常有名的标语吧
英文 Keep It Sweet & Slaple 的
绵写。也有人认为是 kep t
我们举个简单的例子：下面两张卡片上各画了几个圆圈，哪个更容易
Slnpla, Stupid,
数清楚呢？
00000
---
## Page 215
202—第1章神奇的SOL
两者表达的信息都是“5个圆图”但是，可能大多数人都认为右边
的更容易数清楚。原因非常简单。因为我们通过小时候玩的扑克牌或者散
子（以及麻将）已经记住了“这个形状表示5"，看到右边的卡片时，我们
会不以数字而以图形的方式来进行模式识别。像这样通过图形来帮助识别
的示例也被应用在了常见的各种交通标志，以及演讲资料等地方。
其实，确立统一的编程风格追求的也是相同的效果。特别是在大型项
目中，由于经常需要阅读别人的代码，所以这时的编程行为就像是一种沟
通方式。因此，对编程风格的研究也可以看成是对提高系统开发中沟通效
率的方法的研究（因此在只有一个人编程的项目中，很难注意到代码风格
的重要性）
一方面，这个领域的研究为编程的世界带来了重要的启发。在主流的
面向过程语言领域，出现了由Kemighan和Pike编写的《程序设计实践》，
以及由Kernighan 和 Plauger编写的《编程格调》等经典名著。此外，编
程风格的研究也在用户界面的领域也发挥着重要作用。
另一方面，数据库领域还远没有发展到开始关注编程风格的阶段。事
实上，SQL作为一种非过程式语言，一直以来都不被当成主流，因此不像
面问过程语言一样有看丰富的积累，而且事实上，人们也尚未认识到应该
对SQL这门语言进行那么深入的研究。
但是，最近几年SQL也实现了一些高级的功能，因而人们也渐渐注
意到了它的强大实力。可以预见，未来SQL能实现的处理会越来越多、
越来越复杂，与此同时代码也会变得越来越复杂。因此本节的目的在于抛
砖引玉，为确立未来的数据库工程师可能会需要的编程风格而提出笔者个
人的想法。
表的设计
名字和意义
概括地说，人类对“无意义”很容易感到不知所措。我们每天都想要
从交谈、工作，乃至人生中找点什么意义出来。如果生活中到处充斥着各
种无意义的事情，人的精神就会受到非常不良的影响。不善于处理无意义
---
## Page 216
1-12SOL编程方法—203
的事情（或者不确定的事情）正是人类的一个特点。
关系数据库在各类系统中获得广泛支持的最重要的原因，就在于它放
注0
关于这部分内容，请步考2-4节。
包括用来指代具体东西的固有名称，也包括用来指代概念或者集合的一般
名称。就像代码和标记（flag）一样，乍一看不像是名称的东西，从指代
概念或者集合的意义上来讲也属于一般名称的范畴。例如指代“男”“女”
这种集合的性别标记，指代“感冒”“蛀牙”等概念的疾病编号，都是一
般名称。与此相反，地址没有指代任何具有实际意义的概念或者事物。
既然好不容易构建了所有名字都有意义的数据库世界，就不会再犯独
自引入无意义的符号这样愚的错误了。对于列、表、索引，以及约束，
命名时都请做到名副其实。绝对不要使用A、AA，或者idx_123这样无
意义的符号。特别需要注意的是，如果没有为索引和约束显式地指定名称，
DBMS就会自动为之分配随机的名称，这也是应该避免的。
还有人很认真地为真实的表命名，但是对代码中出现的内联视图命名
却很随意。但是既然用到了内联视图，一般来说代码还是相当复杂的，所
以也有必要认真地为内联视图命名。
命名时允许的字符有以下3种。
英文字母
·阿拉伯数字
。下划线“"
这些并非由笔者个人决定的，而是由标准SQL定义的字符集合。除
此之外，各个数据库实现中可能还加入了S、#、@等特殊符号，以及汉
字这样2字节的文字，但笔者认为最好不要使用。因为这样写出的代码可
移植性不好，而且容易隐藏Bug。还有，标准SQL中规定名称的第一个
字符应该是英文字母，这一点我们应该遵守。如果像“Primary”这样用双
引号扩起来，那么字符可以被当作SQL保留字来解析，但是这种写法也
可能带来无谓的混乱，所以请尽量避免。
属性和列
我们时不时地会遇到一个列包含多个意义的表的设计。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 217
204—第1章神奇的SQL
例如，对于存储了“年份不同格式就不同的报表”这类值的表，格式
切换的时间点不同，某一列中存储的值的意义就会发生变化。还有一类表，
使用某一列去管理多种编号（都道府县编号或客户编号等），也属于这种
设计。
这种设计的基础思想是“根据位置调用数据”，但是在关系数据库的
世界中，这种设计是明确禁止的。在数据库中，列代表的是“属性”，因
此应该具有一贯性。
有些时候指代的是年龄，有些时候指代的是体重，还有一些时候指
代像这种列的含义随条件发生变化的设计会给写代码增加困难，而且
连列的名称都会很难起，所以最好不要这样做。
编程的方针
注释
注释是编程风格中一个比较有争议的话题。有些人极力主张必须要添
加注释，相反也有人认为“注释只会使代码的可读性降低，因此努力方向
应该是把代码写得不需要注释也能看懂”
笔者认为，不管其他语言怎么样，就SQL而论，最好还是写注释。
这样说主要有两个原因：一个是，SQL是声明式语言，即使表达同样的处
理过程，逻辑仍然比面向过程语言凝练得多；另一个是，SQL很难进行分
步的执行调试。分析代码时主要需要进行桌面调试。
注释的写法有以下两种。
--从SoneTable中查询col_1
= =
单行注释
S8LBCT co1_1
FROM SomeTable,
/*
多行注释
从 SomeTable中查询 col_1
SEL&CT col_1
FROM SomeTable,
---
## Page 218
1-12SOL塘程方法—20.5
很多人都知道“--”这种单行注释的写法，其实我们还能像C语言
或Java语言一样通过“/*/”去写多行注释，不过这一点很多人都不知
道。这种写法不仅可以用来添加真正的注释，也可以用来注释掉代码，非
常方便，请灵活应用。
此外，SQL语句中不能有空行，却可以像下面这样加入注释。
SELECT col_1
FROM SomeTable,
MHERE col_1 = 'a'
AND co1_2 - 'b'
下面的条件用于宿定co1_3的值是c'或者'd
(P. o, ) NI too aNV
需要把揉在一起难以阅读的条件分割成有意义的代码块时，比如必须
往WHERE子句中写很多条件的时候，这种写法很方便。注释也可以与代码
在同一行。
SELBCT co1_1
-从 SomeTable 中查询co1_1
FROM SoneTable;
希望大家在编程过程中都能尽量详细地加上注释。
缩进
代码难以阅读的原因里，也许排在第一位的是没有进行缩进（排在第
二位的是没有对长代码划分模块，所有的都揉在一起）。
特别是编程的初学者，他们不了解缩进的重要性，写出来的代码每一
行都从行首开始。如果是练习用的小的程序，即使不缩进也不至于带来混
乱，因此这样也没什么不可以。但是对于专业的工程师来说，如果写代码
没有缩进意识就不能容忍了，下面是笔者觉得好和坏的示例。
V好的示例
SELECT col_1,
co1_2,
co1_3,
(+)1An0
FROM tb1_A
HHERE col_1 = *a
AND co1_2 = ( SSL&CT KAX (co1_2)
---
## Page 219
206—第1章神奇的SOL
PROM tbl_B
KHERE co1_3 = 100 )
GROUP BY col_1,
col_2,
--坏的示例
SEL&CT col_1,
col_2,co1_3,COUNT (+)
PROMtbl_A
MHERE col_1 = 'a'
AND
1=0
SSL&CT MAX (co1_2)
PROM tb1_B
1 GRoUP BY col_1, co1_2, col_3
从上面“好的示例”中我们首先可以看到，子查询的代码缩进了一层。
的逻辑。
然后，在SELBCT子句和 GROUP BY子句中指定多列时，也需要缩进
一层。缩进之后，“子句”的代码块就变得很清晰，更方便阅读。如果不
想让代码的行数增加得太多，也可以每行写3列或5列，或者根据具体含
文汇总多列进行换行。
在上面“坏的示例”中，GROUPBY子句之前没有进行换行，这种写
法也不太好。SQL中SELECT、FROM等语句都有着明确的作用，请务必以
这样的单位进行换行。这里再说点儿细节，笔者认为，比起①这种所有关
键字都顶格左齐的写法，②这种让关键字右齐的写法更好。
①左齐
SEL8CT
FBOM
NHERE
大E40080
HAVING
ORD&R BY
②右齐
SBLBCT
FROM
---
## Page 220
1-12SOL填程方法—207
HAVIBG
GROUP BY
ORDER BY
原因是紧接着的列名或表名的位置也能对齐，代码更易读（这个完全
看个人喜好，仅供参考）。
空格
不管用什么语言编程都一样，代码中需要适当地留一些空格。如果一
点都不留，所有的代码都紧凑到一起，代码的逻辑单元就会不明确，也会
给阅读的人带来额外负担。
--V好的示例
SELBCT co1_1
MHERB
1 A.col_1 >= 100 0R A.col_2 IB =100 0R A.co1_2 IN (a',*b)
AND A.col_3=B.col_31
从“坏的示例”中可以看出，因为没有添加空格，所以A.col_1>=100
和A.co1_3-B.col_3这样的语句看起来就像是一个要素，非常不易阅读。
虽然不加空格也不会导致语法错误，但是适当地加入空格后，能够明确地
区分出各个要素，读起来更加直观一些。添加空格的事情只要稍微留心一
点就能做到，所以大家从平时就开始养成好习惯吧。
大小写
英文中需要强调某句重要的话时，一般会使用斜体或者大写字母，因
此在编程中，也有重要的语句使用大写字母，不重要的语句使用小写字母
的习惯。
在SQL里，关于应该如何区分使用大小写字母有着不成文的约定：
关键字使用大写字母，列名和表名使用小写字母（也有一些人习惯只将单
---
## Page 221
208—
第1章种奇的 SQL
词的首字母大写·)。很多图书也都是这样的。笔者经常看到有些人写出
9(像 PlayStat:lon。 Mc0oreld 这
样的写生，大写字母看起来就像
的SQL语句全部使用大写字母，或者全部使用小写字母，真心感觉不舒服
骆驼的峰，因此也被称为驼峰命
名法。这种写法的好处是不用空
格色经区分单词，因此在计算机
--V大小写有区分，易读
世界里很常用，例期 Jesa 语高中
SELBCr col_1, col_2, col_3,
类的非名。
COUNT(*)
FROM
tbl_A
col_1 = 'a'
AND
(2too)x ITas ) - tT0o
FROM tb1_B
XHERE co1_3 = 100 1
GR0UP BYcol_1, col_2, co1_3↓
--大小写漫有区分，难读：全是小写
Belect col_1, col_2, col_3,
tbl_a
count (▪)
fron
vhere
col_1 = 'a'
amd
col_2 - ( select max(col_2)
from tb1_b
where co1_3 = 100 1
∈[oo*[ootooq dno36
--大小写没有区分，难读：全是大写
SELBCTCOL_1,COL_2,COL_3,
TBL_A
COUMT(+)
FROM
COL_1 = 'A'
AND
COL_2 = ( SELECT MAX(COL_2)
FROM TBL_B
GROUP BYCOL_1, COL_2, COL_3
逗号
到底要不要说这个话题，笔者其实一度非常犹豫。但是既然本节的目
的就是抛砖引玉，那么笔者愿意接受批评，下面就讲一下自己的观点。
在SQL中，分割列或表等要素时需要使用逗号。很多人都习惯把逗
号写在要素的后面。例如写“col_1，col_2，col_3”时，先写col_1，
再在后面写逗号，然后写co1_2，再在后面写逗号…但是如果按照这种
规则，就不能解释为什么col_3的后面没有写逗号。同时，也并不是说逗
号得统一写在要素的前面，因为这样就不能解释为什么col_1的前面没
---
## Page 222
1-12SOL编程方法—209
有写逗号了。正确的写法是把逗号写在要素和要素的中间。
这句话听起来没错，理所当然。如果基于这样的想法来思考，我们就
能理解为什么要像下面这样写了。
SELECT
co1_1
co1_2
co1_4
这里我们以逗号“，”为例，不过“+”“-”等二元运算符，以及AND
和OR与这里的逗号一样，起到的是连接要素的作用，一般都写在行的开头。