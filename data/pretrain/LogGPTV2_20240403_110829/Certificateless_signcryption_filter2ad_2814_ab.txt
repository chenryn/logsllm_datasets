5. b(cid:48) ← A
O2
2 (c∗, st)
AdvIND−atk−x
R, PK∗
S, ID∗
(A) := |2 Pr[b(cid:48) = b] − 1|.
S and ID∗
CLSC
R, params)
Here m0 and m1 should be of equal length and ID∗
R should be distinct.
Parameter aux is the empty string when x = I and it is the KGC’s secret key
Msk when x = II. Note it is possible that the challenger is not aware of the secret
value corresponding to ID∗
S, if the associated public key has been replaced. In
this case, we require the adversary to provide this value4. Here, implicitly, the
challenger continues to use Msk which could be unknown to the adversary.
The adversary has access to six oracles:
– Request Public Key: On input of an identity ID, this oracle returns the
corresponding public key. If such a key does not yet exist, it is constructed
using the Generate-User-Keys algorithm.
– Replace Public Key: On input an identity ID and a valid PK, this oracle
replaces the public key associated with ID with PK.
– Extract Partial Secret Key: On input of an identity ID, this oracle re-
turns a partial secret key DID for that identity, generated using the Extract-
Partial-Private-Key algorithm.
– Extract Private Key: On input of an identity ID, this oracle returns the
(full) private key for that identity SID. If such a key does not yet exist, it is
constructed using the appropriate algorithms. The adversary is not allowed
to query this oracle on any identity for which the corresponding public key
has been replaced. This restriction is imposed due to the fact that it is
unreasonable to expect that the challenger is able to provide a full secret
key for a user for which it does not know the secret value. Additionally, the
adversary is never allowed to call this oracle on the challenge identities ID∗
R. To capture insider security, this restriction applies only to ID∗
and ID∗
R.
S
4 A non-polynomial-time challenge oracle could be formulated as in [1].
6
– De-signcrypt: On input of a ciphertext, a sender’s identity and a receiver’s
identity, this oracle returns the result of running the Dsc algorithm on the
ciphertext, the sender’s public parameters, and the receiver’s full private
key. Note that, it is possible that the challenger is not aware of the receiver’s
secret value, if the associated public key has been replaced. In this case, we
require the adversary to provide it 5. Of course, the adversary is not allowed
to query this oracle in the second stage of the game on c∗ under ID∗
S and
ID∗
S of the sender or that of the receiver PK∗
R used
to signcrypt mb has been replaced after the challenge was issued. We also
disallow queries where IDR = IDS.
R, unless the public key PK∗
Next we describe the additional oracle restrictions in each attack scenario6:
Type I Adversary (IND-oCCA-I) This scenario models an attacker which
is a common user of the system and is not in possession of the KGC’s secret key.
This type of adversary is not allowed to extract the partial secret key for ID∗
or ID∗
S if the public key of this identity has been replaced before the challenge
ciphertext was issued. To capture insider security (iCCA), this restriction is
lifted from ID∗
S.
R
R at all.
In our security analysis we use a weaker formulation of insider Type I adver-
saries which we refer to as insider Type I(cid:48). Here the adversary is not allowed to
extract the partial private key of ID∗
Type II Adversary (IND-oCCA-II) This scenario models an honest-but-
curious KGC, against which we want to preserve conﬁdentiality. For this type
of adversary, the partial secret key extraction oracle is not necessary, as the
adversary can simply generate these keys itself using Msk. Additionally, this
type of adversary is not allowed to replace the public key for ID∗
S before
the challenge is issued. To capture insider security (iCCA), this restriction is
lifted from ID∗
S.
In Appendix A we prove the following lemma which justiﬁes our deﬁnition of
Type I(cid:48) attackers.
R or ID∗
Lemma 1. If a certiﬁcateless signcryption scheme is IND-iCCA secure against
Type II and Type I(cid:48) attackers then it is also IND-iCCA secure against Type I
attackers:
AdvIND−iCCA−I
CLSC
(A) ≤ 2AdvIND−iCCA−I
(cid:48)
CLSC
(B0) + 2AdvIND−iCCA−II
CLSC
(B1).
The intuition behind the proof is that we guess if the adversary is going to
replace the public key for the challenge identity or extract the partial private
5 Note that, implicitly, the oracle answers continue to use Msk, which could be un-
known to the adversary. A non-polynomial-time de-signcryption oracle could also be
formulated as in [1].
6 In all of the following scenarios, if the adversary does not make any decryption
queries it is said to be an IND-oCPA/iCPA-x adversary.
7
key for it and, accordingly, we use the adversary to win a Type I(cid:48) or a Type II
security game.
The authenticity property required for certiﬁcateless signcryption schemes is
captured by the following (strong) existential unforgeability security model.
sUF-atk-x
1. (Msk, params) ← Setup(1κ)
2. (c∗, ID∗
R) ← AO(params, aux)
S, ID∗
AdvsUF−atk−x
CLSC
where aux is the empty string when x = I and it is the master secret key Msk
when x = II. For the unforgeability game, we deﬁne the adversary’s advantage
as
(A) := Pr[m∗ (cid:54)=⊥ ∧(m∗, ID∗
R, ID∗
R, PK∗
S, params) and ID∗
R, ID∗
S, PK∗
S, ID∗
R, c∗) (cid:54)∈ L],
S and ID∗
S, PK∗
R, PK∗
where m∗ := Dsc(c∗, S∗
R should be
distinct. We denote by L the list of inputs and the corresponding outputs in
queries to the signcryption oracle which is described below. The entries of this
list are of the form (m, IDS, PKS, IDR, PKR, c) where PKS and PKR are the public
keys corresponding to the queried identities at the time the query is placed. A
weaker form of unforgeability can be deﬁned by imposing that the signcryption
oracle has not been used to obtain a diﬀerent ciphertext on the same parameters
associated with c∗, namely m∗, ID∗
R and the associated public keys at the
time of A’s termination.
S, ID∗
The adversary has access to the same oracles as in the conﬁdentiality game
as well as an additional signcryption oracle. We describe the diﬀerences to the
previous security game:
– Extract Private Key: Same as in the previous game, but an insider ad-
versary is allowed to query this oracle only on ID∗
S, rather than on ID∗
R.
– De-signcrypt: We still disallow queries where IDR = IDS. Apart from this,
there are no restrictions on calls to this oracle, although the adversary should
provide the secret value for the receiver, in case the corresponding public key
has been replaced.
– Signcrypt: On input of a message, a sender’s identity and a receiver’s iden-
tity, this oracle returns the result of running the signcryption algorithm
on the message, the sender’s full private key, and the receiver’s public pa-
rameters. Note that, it is possible that the challenger is not aware of the
sender’s secret value, if the associated public key has been replaced. In this
case, we require the adversary to provide it. We also disallow queries where
IDR = IDS.
Various attack scenarios are as follows7:
Type I Adversary (sUF-oCMA-I) This type of adversary is not allowed to
extract the partial secret keys for ID∗
R if the public keys for these identities
S or ID∗
7 In all of the following scenarios, if the adversary does not make any signcryption
queries it is said to be an UF-oNMA/iNMA-x (no message attack) adversary.
8
have been replaced. To capture insider security (iCMA), this restriction is lifted
from ID∗
R.
In our security analysis we use a weaker formulation of insider Type I adver-
saries which we refer to as insider Type I(cid:48). Here the adversary is not allowed to
extract the partial private key of ID∗
Type II Adversary (sUF-oCMA-II) This type of adversary is not allowed
to replace the encrypt/verify key for ID∗
S or ID∗
R. To capture insider security
(iCMA), this restriction is lifted from ID∗
R.
The following result, which relates the diﬀerent authenticity adversarial mod-
S at all.
els, is analogous to that presented for conﬁdentially in Lemma 1.
Lemma 2. If a certiﬁcateless signcryption scheme is sUF-iCMA secure against
Type II and Type I(cid:48) attackers then it is also sUF-iCMA secure against Type I
attackers:
AdvsUF−iCMA−I
CLSC
(A) ≤ 2AdvsUF−iCMA−I
(cid:48)
CLSC
(B0) + 2AdvsUF−iCMA−II
CLSC
(B1).
5 An Eﬃcient Certiﬁcateless Signcryption Scheme
We now present our certiﬁcateless signcryption scheme which can be seen as an
Encrypt-then-Sign construction where randomness is shared between signature
and encryption schemes. Our scheme, which relies on a symmetric bilinear group
description Γ , is as follows. We choose four cryptographic hash functions:
H1 : {0, 1}∗ → G1, H2 : {0, 1}∗ → {0, 1}κ,
H3 : {0, 1}∗ → G1, H4 : {0, 1}∗ → G1.
We then select Msk uniformly at random from Zp, set Mpk := Msk · P and
let params := (Γ, Mpk). The partial secret key extraction algorithm on input
(ID, Msk) returns D := Msk · H1(ID). The user key generation algorithm returns
a random element x from Zp as the secret value, and PK := x·P as the public key.
The full private key is then set to be S := (x, D). Message, ciphertext and ran-
domness spaces are {0, 1}κ, G1 ×{0, 1}κ × G1 and Zp respectively. Signcryption
and de-signcryption algorithms are given below.
Sc(m, SS, IDS, PKS, IDR, PKR, Mpk)
1. r ← Zp; U ← rP ; T ← e(Mpk, QR)r
2. h ← H2(U, T, rPKR, IDR, PKR)
3. V ← m ⊕ h
4. H ← H3(U, V, IDS, PKS)
5. H(cid:48) ← H4(U, V, IDS, PKS)
6. (xS, DS) ← SS
7. W ← DS + rH + xSH(cid:48)
8. c ← (U, V, W )
9. Return c
Dsc(c, SR, IDR, PKR, IDS, PKS, Mpk)
1. (U, V, W ) ← c
2. H ← H3(U, V, IDS, PKS)
3. H(cid:48) ← H4(U, V, IDS, PKS)
4. If e(Mpk, QS)e(U, H)e(PKS, H(cid:48)) (cid:54)=
5. (xR, DR) ← SR; T ← e(DR, U)
6. h ← H2(U, T, xRU, IDR, PKR)
7. m ← V ⊕ h
8. Return m
e(P, W ) return ⊥
We now turn to the security analysis of this scheme.
9
Theorem 1. The certiﬁcateless signcryption scheme above is IND-iCCA-I/II
secure, in the random oracle model, under the assumption that the gap bilinear
Diﬃe-Hellman problem is intractable in the underlying bilinear group.
This theorem follows from Lemmas 1, 3 and 4.
Lemma 3. Under the GBDH assumption, no PPT attacker A has non-negligible
advantage in winning the IND-iCCA-I(cid:48) game against the scheme proposed above,
when all hash functions are modelled as random oracles. More precisely, there
exists an algorithm B which uses A to solve the GBDH problem such that:
AdvIND−iCCA−I
(cid:48)
CLSC
(A) ≤ qT AdvGBDH