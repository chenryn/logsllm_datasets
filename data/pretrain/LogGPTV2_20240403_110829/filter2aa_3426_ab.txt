    }
    buf = ngx_palloc(r->pool, len);
    if (buf == NULL) {
        return luaL_error(L, "no memory");
    }
    lua_createtable(L, 0, 4);
    p = buf;
    for (cl = r->request_body->bufs; cl; cl = cl->next) {
        p = ngx_copy(p, cl->buf->pos, cl->buf->last - cl->buf->pos);
    }
    dd("post body: %.*s", (int) len, buf);
    last = buf + len;
    retval = ngx_http_lua_parse_args(L, buf, last, max);
    ngx_pfree(r->pool, buf);
    return retval;
}
找到定义的NGX_HTTP_LUA_MAX_ARGS  默认为100
然后走到了ngx_http_lua_parse_args 这个函数
#ifndef NGX_HTTP_LUA_MAX_ARGS
#   define NGX_HTTP_LUA_MAX_ARGS 100
#endif
int
ngx_http_lua_parse_args(lua_State *L, u_char *buf, u_char *last, int max)
{
    u_char                      *p, *q;
    u_char                      *src, *dst;
    unsigned                     parsing_value;
    size_t                       len;
    int                          count = 0;
    int                          top;
    top = lua_gettop(L);
    p = buf;
    parsing_value = 0;
    q = p;
    while (p != last) {
        if (*p == '=' && ! parsing_value) {
            /* key data is between p and q */
            src = q; dst = q;
            ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                      NGX_UNESCAPE_URI_COMPONENT);
            dd("pushing key %.*s", (int) (dst - q), q);
            /* push the key */
            lua_pushlstring(L, (char *) q, dst - q);
            /* skip the current '=' char */
            p++;
            q = p;
            parsing_value = 1;
        } else if (*p == '&') {
            /* reached the end of a key or a value, just save it */
            src = q; dst = q;
            ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                      NGX_UNESCAPE_URI_COMPONENT);
            dd("pushing key or value %.*s", (int) (dst - q), q);
            /* push the value or key */
            lua_pushlstring(L, (char *) q, dst - q);
            /* skip the current '&' char */
            p++;
            q = p;
            if (parsing_value) {
                /* end of the current pair's value */
                parsing_value = 0;
            } else {
                /* the current parsing pair takes no value,
                 * just push the value "true" */
                dd("pushing boolean true");
                lua_pushboolean(L, 1);
            }
            (void) lua_tolstring(L, -2, &len);
            if (len == 0) {
                /* ignore empty string key pairs */
                dd("popping key and value...");
                lua_pop(L, 2);
            } else {
                dd("setting table...");
                ngx_http_lua_set_multi_value_table(L, top);
            }
            if (max > 0 && ++count == max) {
                lua_pushliteral(L, "truncated");
                ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                               "lua hit query args limit %d", max);
                return 2;
            }
        } else {
            p++;
        }
    }
    if (p != q || parsing_value) {
        src = q; dst = q;
        ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                  NGX_UNESCAPE_URI_COMPONENT);
        dd("pushing key or value %.*s", (int) (dst - q), q);
        lua_pushlstring(L, (char *) q, dst - q);
        if (!parsing_value) {
            dd("pushing boolean true...");
            lua_pushboolean(L, 1);
        }
如上代码。读取等于号之前的作为key 然后& 之前的作为value  。然后进行保存到内存中然后进行判断
是否大于等于max
获取key
value
        (void) lua_tolstring(L, -2, &len);
        if (len == 0) {
            /* ignore empty string key pairs */
            dd("popping key and value...");
            lua_pop(L, 2);
        } else {
            dd("setting table...");
            ngx_http_lua_set_multi_value_table(L, top);
        }
    }
    dd("gettop: %d", lua_gettop(L));
    dd("type: %s", lua_typename(L, lua_type(L, 1)));
    if (lua_gettop(L) != top) {
        return luaL_error(L, "internal error: stack in bad state");
    }
    return 1;
}
            src = q; dst = q;
            ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                      NGX_UNESCAPE_URI_COMPONENT);
            dd("pushing key %.*s", (int) (dst - q), q);
            /* push the key */
            lua_pushlstring(L, (char *) q, dst - q);
            /* skip the current '=' char */
            p++;
            q = p;
            parsing_value = 1;
判断长度是否等于max
但是现在还有一个疑问就是get_uri_args 这个怎么获取的呢？ 如上是获取了get_post_args
四、get_uri_args
参考大量的代码发现。他这个是内置的一个格式ngx_http_lua_ffi 开头。我也没有找到他内部怎么注册流
程。
例如：
ngx_http_lua_ffi_encode_base64
ngx_http_lua_ffi_unescape_uri
ngx_http_lua_ffi_time
暂时没有找到他的内部注册的逻辑。这里先不做讨论了。如果有大佬可以指出哪里是注册流程话记得艾
特一下我
ngx_http_lua_ffi_req_get_uri_args 代码如下
src = q; dst = q;
            ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                      NGX_UNESCAPE_URI_COMPONENT);
            dd("pushing key or value %.*s", (int) (dst - q), q);
            /* push the value or key */
            lua_pushlstring(L, (char *) q, dst - q);
           if (max > 0 && ++count == max) {
                lua_pushliteral(L, "truncated");
                ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                               "lua hit query args limit %d", max);
                return 2;
            }
int
ngx_http_lua_ffi_req_get_uri_args(ngx_http_request_t *r, u_char *buf,
    ngx_http_lua_ffi_table_elt_t *out, int count)
{
    int                          i, parsing_value = 0;
    u_char                      *last, *p, *q;
    u_char                      *src, *dst;
    if (count args.data, r->args.len);
    i = 0;
    last = buf + r->args.len;
    p = buf;
    q = p;
    while (p != last) {
        if (*p == '=' && !parsing_value) {
            /* key data is between p and q */
            src = q; dst = q;
            ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                      NGX_UNESCAPE_URI_COMPONENT);
            dd("saving key %.*s", (int) (dst - q), q);
            out[i].key.data = q;
            out[i].key.len = (int) (dst - q);
            /* skip the current '=' char */
            p++;
            q = p;
            parsing_value = 1;
        } else if (*p == '&') {
            /* reached the end of a key or a value, just save it */
            src = q; dst = q;
            ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                      NGX_UNESCAPE_URI_COMPONENT);
            dd("pushing key or value %.*s", (int) (dst - q), q);
            if (parsing_value) {
                /* end of the current pair's value */
                parsing_value = 0;
                if (out[i].key.len) {
                    out[i].value.data = q;
                    out[i].value.len = (int) (dst - q);
                    i++;
                }
            } else {
                /* the current parsing pair takes no value,
                 * just push the value "true" */
                dd("pushing boolean true");
                if (dst - q) {
                    out[i].key.data = q;
                    out[i].key.len = (int) (dst - q);
                    out[i].value.len = -1;
                    i++;
                }
首先呢。他这个也是获取一个key 和一个value 的过程。然后判断一下是否是i==count  
i 这个地方是一个整数。每次设置好值之后i++   
这里画了一个图
            }
            if (i == count) {
                return i;
            }
            /* skip the current '&' char */
            p++;
            q = p;
        } else {
            p++;
        }
    }
    if (p != q || parsing_value) {
        src = q; dst = q;
        ngx_http_lua_unescape_uri(&dst, &src, p - q,
                                  NGX_UNESCAPE_URI_COMPONENT);
        dd("pushing key or value %.*s", (int) (dst - q), q);
        if (parsing_value) {
            if (out[i].key.len) {
                out[i].value.data = q;
                out[i].value.len = (int) (dst - q);
                i++;
            }
        } else {
            if (dst - q) {
                out[i].key.data = q;
                out[i].key.len = (int) (dst - q);
                out[i].value.len = (int) -1;
                i++;
            }
        }
    }
    return i;