code must be restructured in order to run inside an enclave. Porting a benchmark
of the size and complexity of SPEC is a formidable task, so we focused on porting
the more reasonably-sized nbench to measure real enclave performance.
In order to minimize the modiﬁcations to nbench, we moved only the minimal
code required to run the timed portion of each benchmark into an enclave, and
we left the rest of the benchmark code on the host application side. Speciﬁcally,
we created an enclave application that we linked with modiﬁed nbench code; all
the timing code stays outside the enclave, and the modiﬁed nbench code performs
enclave calls to run the initialization code and timed code. The enclave contains
the benchmark initialization functions (each benchmark needs to allocate one
or more buﬀers and initialize them with starting data before the benchmark)
374
Y. Fu et al.
and iteration functions (each benchmark performs n iterations until n is large
enough that the elapsed time is greater than min seconds).
Our port added 5, 279 LOC, modiﬁed 150 LOC, and removed 447 LOC from
nbench 2.2.3. About half of the added LOC comprised enclave code or host
application enclave initialization code, while the other added LOC were added
to call the enclave functions for each of the benchmarks.
SPEC2006. We directly compiled SPEC2006 by using clang compiled from our
modiﬁed LLVM framework. There are 31 benchmarks provided by SPEC2006,
but only 21 are written in C/C++. We selected those 21 benchmarks to eval-
uate Sgx-Lapd. In total, there are 12 integer benchmarks and 7 ﬂoating-point
benchmarks. 998.specrand and 999.specrand are the common random number
generator for integer suite and ﬂoating-point suite respectively.
Experiment Setup. All the benchmarks are compiled with Clang. Our tested
platform is Ubuntu 14.04 with Linux Kernel 4.2.0, and our hardware is a 4-core
Intel Core i5-6200U Skylake CPU running SGX-v1 at 2.3 GHz with 4G DDR3
RAM.
6.2 Results
We complied the benchmarks with three settings: without Instrumentation, with
Non-Present page fault Detection (NPD) and with Non-eXecutable page fault
Detection (NXD). The evaluation tries to measure the overhead added to the
compiler and programs caused by the instrumentation.
Sgx-Lapd Compiler. Table 1 presents the building details for the SPEC2006
and SGX-nbench. To show how much code we needed to insert for each program,
we reported the number of CFTs for each benchmark. We report the number
of direct CFTs in the 3rd column and the number of indirect CFTs in the 4th
column. We also show the static binary size for each benchmark after compila-
tion. The number of CFTs correlates with the size of the binary code; a larger
code size will have more CFTs. Space overhead is due to the inserted code, so
a program with more CFTs will have a higher space overhead. Table 1 shows
that 400.perlbench and 403.gcc have the largest space overhead. Note that
445.gobmk is as large as 403.gcc, but only one-third is code. Hence, its space
overhead is small. For SGX-nbench, we only report the size of code inside the
enclave. On average, Sgx-Lapd increases the static binary size by 213% with
NPD and 244% with NXD.
In terms of compilation time, Sgx-Lapd only introduces small overhead
to the compiler. The building time for SPEC2006 is increased from 5672 s to
5745 s, with only additional 73 s more time. The building time for SGX-nbench
is increased from 1.4 s to 1.6 s.
Sgx-Lapd Linker. In the linking phase, Sgx-Lapd will optimize out the unnec-
essary instrumentation code. To show the eﬃciency of our optimization, we
reported the number of patches for each benchmark in Table 1. As mentioned in
Sect. 4.1, each direct CFT is associated with one piece of meta-data to record
SGX-LAPD: Thwarting Controlled Side Channel Attacks
375
Table 1. The building results for SPEC2006 and SGX-nbench
Benchmark
w/o Instrumentation
w/ NPD
Size
(KB)
#Direct
CFT
#InDirect
CFT
400.perlbench
1086
50152
1881
#Patch Size
(KB)
5266
262
33375
1454
90
2029
120
3218
143634
5190
95564
15170
401.bzip
403.gcc
429.mcf
433.milc
444.namd
445.gobmk
447.dealII
450.soplex
453.povray
456.hmmer
458.sjeng
19
132
327
3382
3240
375
1027
303
136
462.libquantum 47
464.h264ref
470.lbm
471.omnetpp
473.astar
482.sphinx3
653
19
655
43
186
338
3665
6527
26701
101938
13867
32399
11108
4541
1113
12533
140
32
234
113
2369
5722
1467
1747
478
189
104
875
20
25196
2503
1062
6186
90
299
265
1497
4653
47
440
863
15185
5642
70494
11596
7719
16508
6117
2686
592
8466
71
6234
647
3315
1551
3739
1227
516
139
1721
31
2819
135
702
483.xalancbmk 4250
140253
9892
92143
16522
988.specrand
999.specrand
SGX-nbench
Average
7
7
273
885
19
19
848
10
10
91
19
19
615
26558
1520
16711
11
11
408
3128
Increase
(%)
384.9
191.1
371.4
147.4
233.3
163.9
66.8
257.9
313.6
264.1
305
279.4
195.7
163.6
63.2
330.4
214
277.4
288.8
57.1
57.1
49.5
212.5
w/ NXD
#Patch Size
(KB)
34651
5818
1572
286
101562 16738
296
2341
5675
51
484
935
15838
5962
80068 12856
9742
21304
8048
3118
727
1723
4107
1355
564
155
9492
1869
110
31
11028
3175
888
3926
147
774
95686 18538
19
19
13
13
732
412
18493
3455
Increase
(%)
435.7
217.8
420.1
168.4
266.7
185.9
76.3
296.8
359.5
299.9
347.2