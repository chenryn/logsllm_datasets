To run code within an enclave, it must be restructured. Given the size and complexity of SPEC, porting such a benchmark is a significant challenge. Therefore, we focused on porting nbench, a more manageable benchmark, to measure real enclave performance.

To minimize modifications to nbench, we moved only the essential code required for the timed portion of each benchmark into the enclave, leaving the rest of the code in the host application. Specifically, we created an enclave application that we linked with modified nbench code. All timing code remains outside the enclave, while the modified nbench code makes enclave calls to execute the initialization and timed code. The enclave contains the benchmark initialization functions (which allocate and initialize buffers) and iteration functions (which perform iterations until the elapsed time exceeds a minimum threshold).

Our port added 5,279 lines of code (LOC), modified 150 LOC, and removed 447 LOC from nbench 2.2.3. Approximately half of the added LOC comprised enclave code or host application enclave initialization code, while the other added LOC were used to call the enclave functions for each benchmark.

### SPEC2006
We directly compiled SPEC2006 using Clang from our modified LLVM framework. SPEC2006 provides 31 benchmarks, but only 21 are written in C/C++. We selected these 21 benchmarks to evaluate Sgx-Lapd. These include 12 integer benchmarks and 7 floating-point benchmarks. 998.specrand and 999.specrand serve as the common random number generators for the integer and floating-point suites, respectively.

### Experiment Setup
All benchmarks were compiled with Clang. Our test platform was Ubuntu 14.04 with Linux Kernel 4.2.0, running on a 4-core Intel Core i5-6200U Skylake CPU with SGX-v1 at 2.3 GHz and 4 GB DDR3 RAM.

### Results
We compiled the benchmarks under three settings: without instrumentation, with Non-Present page fault Detection (NPD), and with Non-eXecutable page fault Detection (NXD). The evaluation aimed to measure the overhead added to the compiler and programs by the instrumentation.

#### Sgx-Lapd Compiler
Table 1 presents the build details for SPEC2006 and SGX-nbench. It shows the number of Control Flow Transfers (CFTs) for each benchmark, both direct and indirect, and the static binary size after compilation. The number of CFTs correlates with the binary size; larger code sizes have more CFTs. Space overhead is due to the inserted code, so a program with more CFTs will have higher space overhead. For example, 400.perlbench and 403.gcc have the largest space overhead. Note that 445.gobmk, despite being as large as 403.gcc, has only one-third of its code, resulting in smaller space overhead. For SGX-nbench, we report only the size of the code inside the enclave. On average, Sgx-Lapd increases the static binary size by 213% with NPD and 244% with NXD.

In terms of compilation time, Sgx-Lapd introduces only a small overhead. The build time for SPEC2006 increased from 5672 seconds to 5745 seconds, adding only 73 seconds. The build time for SGX-nbench increased from 1.4 seconds to 1.6 seconds.

#### Sgx-Lapd Linker
During the linking phase, Sgx-Lapd optimizes out unnecessary instrumentation code. Table 1 also reports the number of patches for each benchmark. As mentioned in Section 4.1, each direct CFT is associated with metadata to record the control flow.

### Table 1: Build Results for SPEC2006 and SGX-nbench
| Benchmark | w/o Instrumentation | w/ NPD | w/ NXD |
| --- | --- | --- | --- |
| Size (KB) | #Direct CFT | #InDirect CFT | #Patch Size (KB) | Increase (%) | #Patch Size (KB) | Increase (%) |
| 400.perlbench | 1086 | 50152 | 1881 | 5266 | 384.9 | 34651 | 435.7 |
| 401.bzip | 132 | 33375 | 1454 | 262 | 191.1 | 5818 | 217.8 |
| 403.gcc | 90 | 2029 | 120 | 3218 | 371.4 | 1572 | 420.1 |
| 429.mcf | 143634 | 5190 | 95564 | 15170 | 147.4 | 286 | 168.4 |
| 433.milc | 3240 | 15170 | 186 | 338 | 233.3 | 101562 | 266.7 |
| 444.namd | 375 | 1454 | 120 | 3218 | 163.9 | 16738 | 185.9 |
| 445.gobmk | 1027 | 303 | 136 | 462.libquantum | 66.8 | 296 | 76.3 |
| 447.dealII | 303 | 136 | 462.libquantum | 257.9 | 2341 | 296.8 |
| 450.soplex | 136 | 462.libquantum | 313.6 | 5675 | 359.5 |
| 453.povray | 462.libquantum | 264.1 | 51 | 299.9 |
| 456.hmmer | 462.libquantum | 305 | 484 | 347.2 |
| 458.sjeng | 462.libquantum | 279.4 | 935 | 347.2 |
| 462.libquantum | 47 | 15838 | 195.7 | 15838 | 195.7 |
| 464.h264ref | 19 | 5962 | 163.6 | 5962 | 163.6 |
| 470.lbm | 43 | 80068 | 63.2 | 80068 | 63.2 |
| 471.omnetpp | 186 | 12856 | 330.4 | 12856 | 330.4 |
| 473.astar | 338 | 9742 | 214 | 9742 | 214 |
| 482.sphinx3 | 3665 | 21304 | 277.4 | 21304 | 277.4 |
| 988.specrand | 6527 | 8048 | 288.8 | 8048 | 288.8 |
| 999.specrand | 26701 | 3118 | 57.1 | 3118 | 57.1 |
| SGX-nbench | 101938 | 727 | 57.1 | 727 | 57.1 |
| Average | 13867 | 1723 | 49.5 | 1723 | 49.5 |

This table summarizes the build results, showing the increase in binary size and the number of patches for each benchmark under different instrumentation settings.