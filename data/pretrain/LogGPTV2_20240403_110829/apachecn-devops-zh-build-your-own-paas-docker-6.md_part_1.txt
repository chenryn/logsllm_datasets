# 六、反向代理请求
在同一个服务器上有许多带有公共端口的容器的一个大问题是，它们不能都监听它们服务种类的标准端口。如果我们有一个 MySQL 后端服务，并且有 10 个 MySQL 容器在运行，那么其中只有一个可以监听 MySQL 标准端口`3306`。对于那些公开网络服务器的人来说，标准端口`80`只能由他们的一个 WordPress 容器使用。在本章中，我们将涵盖以下主题:
*   解释问题
*   想出解决问题的办法
*   用 Nginx 和 HAProxy 实现解决方案
*   自动化映射域的过程
# 解释问题
在同一台主机上有许多服务相同的容器的问题是，用户应用使用的是标准端口。默认情况下，使用网络浏览器并向运行 WordPress 容器的 Docker 主机输入 IP 将会请求端口`80`上的资源。你不能指望你的用户记住一个非标准端口来进入你的网站。
![Explaining the problem](img/00056.jpeg)
到达这三个容器的唯一方法是手动输入容器的公开端口号。
# 找到解决方案
在我们转向解决方案之前，让我解释一下什么是常规代理服务器，以防你不熟悉它。
一个代理服务器是一个代表你连接服务并将所有结果转发给你的服务器。在您设置好通过代理服务器路由所有流量后，作为用户，您不会注意到它在那里。一切都会照常进行。
但是，服务所有者只看到某台机器(代理服务器)连接到他们。如果另一个用户使用与您相同的代理服务器和相同的服务，服务所有者无法区分，并且会将您视为一个单独的用户。
![Finding a solution](img/00057.jpeg)
通过代理服务器连接的不同用户显示为一个用户。
从上图可以看到，服务拥有者只是看到有一个 IP 为**213.12.12.3**的人连接到了他们。
那么，如果我们在 Docker 主机上使用这个呢？如果我们把一些东西放在所有的容器前面呢？根据所请求的域名，这个东西会将请求转发到正确的容器和端口，然后将请求的响应转发给请求的用户。
有些东西是专门为解决这种问题而做的。它们被称为**反向代理**(反向是因为代理在另一端，使用户只看到一个 IP 并转发请求)。
如果我们在 Docker 主机服务器上安装和配置反向代理，那么图表将是这样的:
![Finding a solution](img/00058.jpeg)
反向代理让所有 Docker 容器作为一个整体出现。
反向代理监听端口`80`(标准网络端口)，当`domain1.com`的请求到来时，代理查看其配置，查看该域是否有指定的转发端点。如果有，反向代理会将请求转发到正确的 Docker 容器，等待其响应，并在容器响应到来时将其转发给请求用户。
这就是我们所追求的解决方案。现在唯一的问题是我们将使用哪个反向代理。外面有很多这样的人。有些反向代理有更具体的用途，比如负载平衡，有些是做很多其他事情的服务，也有这个功能，比如 web 服务器。
# 实施解决方案
选择解决问题的工具时，您将始终有偏好。有时候，你选择一个工具是因为你觉得使用它很舒服，而且它足够好；有时候，你选择它是因为它有很好的性能，或者因为你只是想尝试一些新的东西。
这就是为什么我们将通过两种不同的工具来解决这个问题。最终结果将是相同的，但是工具的设置略有不同。
在我们开始实现解决方案之前，我们使用 Crane 启动我们的三容器应用的一个实例，并通过将其连接到站点来验证它是否在工作。让 Docker 为你决定公共港口，所以是`491XX`。请记住这个端口，因为我们将在实施解决方案时使用它。
我们需要指出我们想要用于 Docker 主机的 IP 地址的域名。我们可以通过将域名 A-record 设置为我们的服务器的 IP 地址，或者在我们的本地`/etc/hosts`文件中添加一行，将对域名的请求定向到我们的服务器的 IP 地址。
我会选择后者，并将其输入我的 Mac 的`/etc/hosts`文件中:
```
54.148.253.187 domain1.com
54.148.253.187 domain2.com
54.148.253.187 domain3.com
```
### 注
请确保用服务器的 IP 地址替换上述 IP 地址。
## 用 HAProxy 实现
HAProxy([http://www.haproxy.org](http://www.haproxy.org))是一个负载均衡器，其作用是将流量转发到其背后的不同服务。
这就是哈普罗西对自己的描述:
> *“HAProxy 是一个免费的、非常快速和可靠的解决方案，为基于 TCP 和 HTTP 的应用提供高可用性、负载平衡和代理。它特别适合流量非常高的网站，并为世界上许多访问量最大的网站提供动力。多年来，它已经成为事实上的标准开源负载平衡器，现在与大多数主流 Linux 发行版一起提供，并且通常默认部署在云平台中。”*
这听起来像是符合我们需要的东西。
### 安装羟基磷灰石
正如报价中的所述，许多系统已经安装并随其一起发货。如果你找不到它，如果你使用 Ubuntu 或 Debian ( `apt-get install haproxy`)的话，它应该可以在你的包管理器中找到，或者在其他有包管理器的发行版中找到。
在我运行亚马逊 Linux 的亚马逊 EC2 实例上，可以使用`yum install haproxy`安装 HAProxy。
将获得如下和输出:
![Installing HAProxy](img/00059.jpeg)
这不是最新的版本，但对于我们将要做的事情来说，这是可以的。
### 配置 HAProxy
我们将在文件`/etc/haproxy/docker.cfg`中编写一个 HAProxy 配置，这样我们就不必删除默认配置文件中的所有内容，因为将来可能会有很好的参考价值。
HAProxy 将其配置分为四个部分:全局、默认、前端和后端。不要把前端和后端与前端和后端开发混为一谈。这里，前端是指面向互联网的服务器部分，后端是 HAProxy 后面的服务器部分，在我们的例子中是 Docker 容器。
打开配置文件，从输入通用内容开始，如下所示:
```
global
    daemon
    maxconn 4096
    pidfile /var/run/haproxy.pid
defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
```
现在，我们输入要监听的端口和要用于哪个域的后端配置:
```
frontend http-in
    bind *:80
    acl is_site1 hdr_end(host) -i domain1.com
    use_backend site1 if is_site1
```
我们定义应该捕获端口`80`上的常规传入 HTTP 流量。这里的`acl`是指访问控制列表，是一个基于从请求中提取的内容做出决定的灵活解决方案。`hdr_end(host) -i domain1.com`函数调用意味着标头主机的结尾不区分大小写，与字符串`domain1.com`匹配。该匹配的结果(布尔)保存在`is_site1`变量中。
请注意，这意味着`domain1.com`的所有子域都将与该设置相匹配。如果只是想搭配`www.domain1.com`，可以用`hdr(host) -i www.domain1.com`代替。
现在我们在`is_site1`变量中有了匹配结果，我们可以将请求发送到名为`site1`的后端配置。
我们将其附加到配置文件中:
```
backend site1
    balance roundrobin
    option httpclose
    option forwardfor
    server s1 127.0.0.1:49187 maxconn 450
```
我们将后端名称定义为`site1`，设置几个选项，并将服务器和端口添加到我们的 WordPress 容器中。
### 注
确保您输入了 WordPress 容器的公开端口，而不是前面代码中的`49187`。
是时候尝试这种配置了。保存配置文件，并使用以下命令在 shell 中测试它:
```
haproxy -f /etc/haproxy/docker.cfg –c
```
输出应该是`Configuration file is valid`。
确保您的机器上没有正在收听端口`80`的内容。您可以使用诸如`netstat –a`之类的东西来验证`80`或 HTTP 未列出。如果是，找到正在监听的应用并关闭它。
使用以下命令启动 HAProxy:
```
haproxy -f /etc/haproxy/docker.cfg –D
```
`-D`选项意味着我们希望在后台将其作为守护进程运行。当您调用这个命令时，您不应该看到任何输出。
让我们通过调用`ps aux | grep haproxy`来检查 HAProxy 是否正在运行。你应该看到它列在那里。最后，让我们通过调用`netstat –a | grep http`来验证它正在监听端口`80`。现在，你应该在那份名单上有些东西。
获得的输出显示在这里:
![Configuring HAProxy](img/00060.jpeg)
一切看起来都很好！
简单回顾一下我们在这里所做的工作:我们在服务器的端口`80`上设置了一个监听传入请求的服务。当该端口上的请求进入时，会对请求头的主机进行检查，看其是否匹配`domain1.com`。如果匹配，请求将被转发到 IP 地址`127.0.0.1`和端口`49187`。来自这个 IP 和端口的响应被发送回请求者。
现在到了真相大白的时刻。打开你的网页浏览器，输入网址`domain1.com`。
确保你的主机文件中有`domain1.com`的条目，指向你的服务器。
执行上述说明后，您将看到以下网站屏幕:
![Configuring HAProxy](img/00061.jpeg)
您可以看到在定位栏中，没有指定端口。太棒了！
### 向 HAProxy 添加更多域
我们做并不是为了在端口`80`上服务一个单一的网络应用，这可以在没有反向代理的情况下完成。用 Crane 启动另一个 WordPress 应用，方法是将旧配置复制到一个新目录，并更改服务的名称，如下所示:
```
cd..
cp –r crane-wp crane-wp2
cd crane-wp2
sed -i "s/wp/wp2/g" crane.yaml
sed -i "s/mydata/mydata2/g" crane.yaml
sed -i "s/mymysql/mymysql2/g" crane.yaml
crane lift data_db
crane lift wp2
#check out port for new container named wp2
docker ps
```
再次打开 HAProxy 配置文件，在前端增加两行:
```
acl is_site2 hdr_end(host) -i domain2.com
use_backend site2 if is_site2
```
之后，添加一个名为`site2`的新后端配置: