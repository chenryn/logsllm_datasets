就需要先创建一个更长的数组，再把原来数组里的值复制到新数组里。
在Go语言中声明变量时，总会使用对应类型的零值来对变量进行初始化。数组也不例外。
当数组初始化时，数组内每个元素都初始化为对应类型的零值。在图4-2里，可以看到整型数组
里的每个元素都初始化为0，也就是整型的零值。
图4-2 声明数组变量后数组的值
一种快速创建数组并初始化的方式是使用数组字面量。数组字面量允许声明数组里元素的数
量同时指定每个元素的值，如代码清单4-2所示。
代码清单4-2 使用数组字面量声明数组
// 声明一个包含5个元素的整型数组
// 用具体值初始化每个元素
array := [5]int{10, 20, 30, 40, 50}
如果使用...替代数组的长度，Go 语言会根据初始化时数组元素的数量来确定该数组的长
度，如代码清单4-3所示。
代码清单4-3 让Go自动计算声明数组的长度
// 声明一个整型数组
// 用具体值初始化每个元素
// 容量由初始化值的数量决定
array := [...]int{10, 20, 30, 40, 50}
如果知道数组的长度而是准备给每个值都指定具体值，就可以使用代码清单4-4所示的这种
语法。
代码清单4-4 声明数组并指定特定元素的值
// 声明一个有5个元素的数组
// 用具体值初始化索引为1和2的元素
// 其余元素保持零值
array := [5]int{1: 10, 2: 20}
代码清单4-4中声明的数组在声明和初始化后，会和图4-3所展现的一样。
图4-3 声明之后数组的值
4.1.3 使用数组
正像之前提到的，因为内存布局是连续的，所以数组是效率很高的数据结构。在访问数组里
任意元素的时候，这种高效都是数组的优势。要访问数组里某个单独元素，使用[]运算符，如
代码清单4-5所示。
代码清单4-5 访问数组元素
// 声明一个包含5个元素的整型数组
// 用具体值初始为每个元素
array := [5]int{10, 20, 30, 40, 50}
// 修改索引为2的元素的值
array[2] = 35
代码清单4-5中声明的数组的值在操作完成后，会和图4-4所展现的一样。
图4-4 修改索引为2的值之后数组的值
可以像第2章一样，声明一个所有元素都是指针的数组。使用*运算符就可以访问元素指针
所指向的值，如代码清单4-6所示。
代码清单4-6 访问指针数组的元素
// 声明包含5个元素的指向整数的数组
// 用整型指针初始化索引为0和1的数组元素
array := [5]*int{0: new(int), 1: new(int)}
// 为索引为0和1的元素赋值
*array[0] = 10
*array[1] = 20
代码清单4-6中声明的数组的值在操作完毕后，会和图4-5所展现的一样。
图4-5 指向整数的指针数组
在Go语言里，数组是一个值。这意味着数组可以用在赋值操作中。变量名代表整个数组，
因此，同样类型的数组可以赋值给另一个数组，如代码清单4-7所示。
代码清单4-7 把同样类型的一个数组赋值给另外一个数组
// 声明第一个包含5个元素的字符串数组
var array1 [5]string
// 声明第二个包含5个元素的字符串数组
// 用颜色初始化数组
array2 := [5]string{"Red", "Blue", "Green", "Yellow", "Pink"}
// 把array2的值复制到array1
array1 = array2
复制之后，两个数组的值完全一样，如图4-6所示。
图4-6 复制之后的两个数组
数组变量的类型包括数组长度和每个元素的类型。只有这两部分都相同的数组，才是类型相
同的数组，才能互相赋值，如代码清单4-8所示。
代码清单4-8 编译器会阻止类型不同的数组互相赋值
// 声明第一个包含4个元素的字符串数组
var array1 [4]string
// 声明第二个包含5个元素的字符串数组
// 使用颜色初始化数组
array2 := [5]string{"Red", "Blue", "Green", "Yellow", "Pink"}
// 将array2复制给array1
array1 = array2
Compiler Error:
cannot use array2 (type [5]string) as type [4]string in assignment
复制数组指针，只会复制指针的值，而不会复制指针所指向的值，如代码清单4-9所示。
代码清单4-9 把一个指针数组赋值给另一个
// 声明第一个包含3个元素的指向字符串的指针数组
var array1 [3]*string
// 声明第二个包含3个元素的指向字符串的指针数组
// 使用字符串指针初始化这个数组
array2 := [3]*string{new(string), new(string), new(string)}
// 使用颜色为每个元素赋值
*array2[0] = "Red"
*array2[1] = "Blue"
*array2[2] = "Green"
// 将array2复制给array1
array1 = array2
复制之后，两个数组指向同一组字符串，如图4-7所示。
图4-7 两组指向同样字符串的数组
4.1.4 多维数组
数组本身只有一个维度，不过可以组合多个数组创建多维数组。多维数组很容易管理具有父
子关系的数据或者与坐标系相关联的数据。声明二维数组的示例如代码清单4-10所示。
代码清单4-10 声明二维数组
// 声明一个二维整型数组，两个维度分别存储4个元素和2个元素
var array [4][2]int
// 使用数组字面量来声明并初始化一个二维整型数组
array := [4][2]int{{10, 11}, {20, 21}, {30, 31}, {40, 41}}
// 声明并初始化外层数组中索引为1个和3的元素
array := [4][2]int{1: {20, 21}, 3: {40, 41}}
// 声明并初始化外层数组和内层数组的单个元素
array := [4][2]int{1: {0: 20}, 3: {1: 41}}
图4-8展示了代码清单4-10中声明的二维数组在每次声明并初始化后包含的值。
图4-8 二维数组及其外层数组和内层数组的值
为了访问单个元素，需要反复组合使用[]运算符，如代码清单4-11所示。
代码清单4-11 访问二维数组的元素
// 声明一个2×2的二维整型数组
var array [2][2]int
// 设置每个元素的整型值
array[0][0] = 10
array[0][1] = 20
array[1][0] = 30
array[1][1] = 40
只要类型一致，就可以将多维数组互相赋值，如代码清单 4-12 所示。多维数组的类型包括每
一维度的长度以及最终存储在元素中的数据的类型。
代码清单4-12 同样类型的多维数组赋值
// 声明两个不同的二维整型数组
var array1 [2][2]int
var array2 [2][2]int
// 为每个元素赋值
array2[0][0] = 10
array2[0][1] = 20
array2[1][0] = 30
array2[1][1] = 40
// 将array2的值复制给array1
array1 = array2
因为每个数组都是一个值，所以可以独立复制某个维度，如代码清单4-13所示。
代码清单4-13 使用索引为多维数组赋值
// 将array1的索引为1的维度复制到一个同类型的新数组里
var array3 [2]int = array1[1]
// 将外层数组的索引为1、内层数组的索引为0的整型值复制到新的整型变量里
var value int = array1[1][0]
4.1.5 在函数间传递数组
根据内存和性能来看，在函数间传递数组是一个开销很大的操作。在函数之间传递变量时，
总是以值的方式传递的。如果这个变量是一个数组，意味着整个数组，不管有多长，都会完整复
制，并传递给函数。
为了考察这个操作，我们来创建一个包含100万个int类型元素的数组。在64位架构上，
这将需要800万字节，即8 MB的内存。如果声明了这种大小的数组，并将其传递给函数，会发
生什么呢？如代码清单4-14所示。
代码清单4-14 使用值传递，在函数间传递大数组
// 声明一个需要8 MB的数组
var array [1e6]int
// 将数组传递给函数foo
foo(array)
// 函数foo接受一个100万个整型值的数组
func foo(array [1e6]int) {
...
}
每次函数foo被调用时，必须在栈上分配8 MB的内存。之后，整个数组的值（8 MB的内
存）被复制到刚分配的内存里。虽然Go语言自己会处理这个复制操作，不过还有一种更好且更
有效的方法来处理这个操作。可以只传入指向数组的指针，这样只需要复制8字节的数据而不是
8 MB的内存数据到栈上，如代码清单4-15所示。
代码清单4-15 使用指针在函数间传递大数组
// 分配一个需要8 MB的数组
var array [1e6]int
// 将数组的地址传递给函数foo
foo(&array)
// 函数foo接受一个指向100万个整型值的数组的指针
func foo(array *[1e6]int) {
...
}
这次函数 foo 接受一个指向 100 万个整型值的数组的指针。现在将数组的地址传入函数，
只需要在栈上分配8字节的内存给指针就可以。
这个操作会更有效地利用内存，性能也更好。不过要意识到，因为现在传递的是指针，
所以如果改变指针指向的值，会改变共享的内存。如你所见，使用切片能更好地处理这类共
享问题。
4.2 切片的内部实现和基础功能
切片是一种数据结构，这种数据结构便于使用和管理数据集合。切片是围绕动态数组的概念
构建的，可以按需自动增长和缩小。切片的动态增长是通过内置函数append来实现的。这个函
数可以快速且高效地增长切片。还可以通过对切片再次切片来缩小一个切片的大小。因为切片的
底层内存也是在连续块中分配的，所以切片还能获得索引、迭代以及为垃圾回收优化的好处。
4.2.1 内部实现
切片是一个很小的对象，对底层数组进行了抽象，并提供相关的操作方法。切片有3个字段
的数据结构，这些数据结构包含Go语言需要操作底层数组的元数据（见图4-9）。
这3个字段分别是指向底层数组的指针、切片访问的元素的个数（即长度）和切片允许增长
到的元素个数（即容量）。后面会进一步讲解长度和容量的区别。
图4-9 切片内部实现：底层数组
4.2.2 创建和初始化
Go 语言中有几种方法可以创建和初始化切片。是否能提前知道切片需要的容量通常会决定
要如何创建切片。
1．make和切片字面量
一种创建切片的方法是使用内置的make函数。当使用make时，需要传入一个参数，指定
切片的长度，如代码清单4-16所示。
代码清单4-16 使用长度声明一个字符串切片
// 创建一个字符串切片
// 其长度和容量都是5个元素
slice := make([]string, 5)
如果只指定长度，那么切片的容量和长度相等。也可以分别指定长度和容量，如代码清单 4-17
所示。
代码清单4-17 使用长度和容量声明整型切片
// 创建一个整型切片
// 其长度为3个元素，容量为5个元素
slice := make([]int, 3, 5)
分别指定长度和容量时，创建的切片，底层数组的长度是指定的容量，但是初始化后并不能
访问所有的数组元素。图 4-9 描述了代码清单 4-17 里声明的整型切片在初始化并存入一些值后的
样子。
代码清单4-17中的切片可以访问3 个元素，而底层数组拥有5 个元素。剩余的2 个元素可
以在后期操作中合并到切片，可以通过切片访问这些元素。如果基于这个切片创建新的切片，新
切片会和原有切片共享底层数组，也能通过后期操作来访问多余容量的元素。
不允许创建容量小于长度的切片，如代码清单4-18所示。
代码清单4-18 容量小于长度的切片会在编译时报错
// 创建一个整型切片
// 使其长度大于容量
slice := make([]int, 5, 3)
Compiler Error:
len larger than cap in make([]int)
另一种常用的创建切片的方法是使用切片字面量，如代码清单 4-19 所示。这种方法和创建
数组类似，只是不需要指定[]运算符里的值。初始的长度和容量会基于初始化时提供的元素的
个数确定。
代码清单4-19 通过切片字面量来声明切片
// 创建字符串切片
// 其长度和容量都是5个元素
slice := []string{"Red", "Blue", "Green", "Yellow", "Pink"}
// 创建一个整型切片
// 其长度和容量都是3个元素
slice := []int{10, 20, 30}
当使用切片字面量时，可以设置初始长度和容量。要做的就是在初始化时给出所需的长
度和容量作为索引。代码清单 4-20中的语法展示了如何创建长度和容量都是 100个元素的
切片。
代码清单4-20 使用索引声明切片
// 创建字符串切片
// 使用空字符串初始化第 100 个元素
slice := []string{99: ""}
记住，如果在[]运算符里指定了一个值，那么创建的就是数组而不是切片。只有不指定值
的时候，才会创建切片，如代码清单4-21所示。
代码清单4-21 声明数组和声明切片的不同
// 创建有3个元素的整型数组
array := [3]int{10, 20, 30}
// 创建长度和容量都是3的整型切片
slice := []int{10, 20, 30}
2．nil和空切片
有时，程序可能需要声明一个值为nil的切片（也称nil切片）。只要在声明时不做任何初
始化，就会创建一个nil切片，如代码清单4-22所示。
代码清单4-22 创建nil切片
// 创建nil整型切片
var slice []int
在Go语言里，nil切片是很常见的创建切片的方法。nil切片可以用于很多标准库和内置
函数。在需要描述一个不存在的切片时，nil切片会很好用。例如，函数要求返回一个切片但是