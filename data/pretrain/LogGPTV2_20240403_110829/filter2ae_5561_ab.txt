      i64_store(Z_envZ_memory, v13 + 32, v5);
      v6 = i64_load(Z_envZ_memory, 0x428LL);
      i64_store(Z_envZ_memory, v13 + 40, v6);
      v7 = i64_load(Z_envZ_memory, 0x430LL);
      i64_store(Z_envZ_memory, v13 + 48, v7);
      v8 = i64_load(Z_envZ_memory, 0x438LL);
      i64_store(Z_envZ_memory, v13 + 56, v8);
      v9 = i32_load(Z_envZ_memory, 0x440LL);
      i32_store(Z_envZ_memory, v13 + 64, v9);
      v10 = i32_load8_s(Z_envZ_memory, 0x444LL);
      i32_store8(Z_envZ_memory, v13 + 68, v10);
      v11 = i32_load8_s(Z_envZ_memory, a1 + v13);
      g12 = v13;
      --wasm_rt_call_stack_depth;
      return (unsigned __int8)(v11 - 66);
主逻辑在_authenticate，其中有两处比较可疑:
    v1 = i32_load(Z_envZ_memory, 0x4D0LL);
      i32_store(Z_envZ_memory, (unsigned int)(v18 + 28), v1);
      v2 = i32_load8_s(Z_envZ_memory, 0x4D4LL);
还有循环结尾的：
    if ( v11 == 69 )
        {
          g12 = v18;
          v13 = 0x4D5;
        }
        else
        {
          g12 = v18;
          v13 = 0x4DD;
如果0x400指向常量的开头，0x4d5刚好对应success，0x4DD刚好对应failure。这肯定不是巧合。事实上，0x400的偏移都对应常量开头，在之前做的另外一些题中也能看到类似的结构。
如此一来，我们便能轻易的从密文中猜出flag
## 另外两个例子
### simple wasm
这是去年上交大运维赛的一道web题，能得到一个wasm。
直接在文件为查找字符串：
看到了base64表和密文，解码出来是
    iodj~44h393d5fh4;e:9h6i598f798;gd= 1.0 || (f64_load(Z_envZ_memory, v7 + 8), 1.0 - (double)175 >= 1.0) )
      {
        f98(0x1186u, (unsigned int)((_DWORD)v11 + 32), (unsigned int)((_DWORD)v11 + 32));
        g10 = (signed int)v11;
      }
      else
      {
        f98(0x117Cu, (unsigned int)((_DWORD)v11 + 24), (unsigned int)((_DWORD)v11 + 24));
        g10 = (signed int)v11;
      }
注意f99, f98的参数：0x1170, 0x1173, 0x1168, 0x117C
刚好对应之前的字符串常量之间的偏移，可以断定这是scanf和printf
f23中对输入进行了一些操作：
    for ( i = 0; i = 0 == 0 )
            break;
          ++v11;
          v4 = i + a1;
          v5 = i32_load8_s(Z_envZ_memory, v4);
          v7 = f22(v5, v4, v6);
          a2 = (char *)(unsigned int)(4 * (v11 - 1) + 0x11E0);
          i32_store(Z_envZ_memory, (__int64)a2, (v7 >> (j % 5 & 0x1F)) & 1);
        }
      }
再看看f22
    for ( i = 0; ; ++i )
      {
        if ( i >= 32 )
        {
          v6 = 6;
          goto LABEL_11;
        }
        v4 = i;
        if ( a1 == (char)i32_load8_s(Z_envZ_memory, (unsigned int)(i + 0x400)) )
          break;
      }
似乎是从0x400的偏移找某个值，而且范围是32？
找找0x400的偏移（跟之前一样，0x400也是字符串常量的开头？）
在数据开头，看到了一个长度为32的表
    .rodata:000000000006BF00 data_segment_data_0 db '0123456789bcdefghjkmnpqrstuvwxyz'
    .rodata:000000000006BF00                                         ; DATA XREF: init_memory+14↑o
    .rodata:000000000006BF20                 db    2
联想一下之前的查表，这应该是我们的输入范围。
回到f23，看到循环内有右移j%5再&1得操作，可能是分离每一位
加密逻辑在f24内：
    v11 = -180.0;
      v12 = 180.0;
      v13 = -90.0;
      v14 = 90.0;
      for ( i = 0; i < 50; ++i )
      {
        v6 = i32_load(Z_envZ_memory, (unsigned int)(4 * i + (_DWORD)a1));
        if ( (i + 1) % 2 == 1 )
          i32_store(Z_envZ_memory, (unsigned int)(4 * ((i + 1) / 2) + v7), v6);
        else
          i32_store(Z_envZ_memory, (unsigned int)(4 * (i / 2) + v8), v6);
      }
      for ( j = 0; j < 20; ++j )
      {
        if ( (unsigned int)i32_load(Z_envZ_memory, (unsigned int)(4 * j + v7)) == 1 )
        {
          v11 = v10;
          v10 = (v10 + v12) / 2.0;
        }
        else if ( (unsigned int)i32_load(Z_envZ_memory, (unsigned int)(4 * j + v7)) == 0 )
        {
          v12 = v10;
          v10 = (v11 + v10) / 2.0;
        }
        if ( (unsigned int)i32_load(Z_envZ_memory, (unsigned int)(4 * j + v8)) == 1 )
        {
          v13 = v9;
          v9 = (v9 + v14) / 2.0;
        }
        else if ( (unsigned int)i32_load(Z_envZ_memory, (unsigned int)(4 * j + v8)) == 0 )
        {
          v14 = v9;
          v9 = (v13 + v9) / 2.0;
        }
      }
是不是很像二分查找？
猜测下逻辑，把输入按32个字符的table映射到一个0-31的数字，转二进制后，根据奇数位和偶数位分成两组，根据每一位为1或0决定二分查找的方向，两组分别在[-180,180]和[-90,90]区间内二分查找，找到结果为175和25时结果正确，注意精度要足够。
## 小结
初步分析了wasm静态分析的方法。wasm作为一种新的指令格式，相关工具并不齐全。总体上还有很大的进步空间。
关于wasm的动态调试过程在网上可以查到很多教程，这里就不多做分析了。用chrome，Firefox
等浏览器可以轻松实现wasm的动态调试。在动态调试的过程中能验证静态分析的一些猜想。