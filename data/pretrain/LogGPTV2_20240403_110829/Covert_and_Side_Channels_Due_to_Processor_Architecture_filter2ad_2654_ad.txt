e
r
r
o
C
d
e
z
i
l
a
m
r
o
N
1.2
1
0.8
0.6
0.4
0.2
0
1
13 25 37 49 61 73 85 97 109 121 133 145 157 169 181 193 205 217 229 241 253
Key Byte Value (0-255)
(a) Key searching chart without cache-index permutation 
Key Searching Chart (with permutation)
n
o
i
t
a
l
e
r
r
o
C
d
e
z
i
l
a
m
r
o
N
1.2
1
0.8
0.6
0.4
0.2
0
1
13 25 37 49 61 73 85 97 109 121 133 145 157 169 181 193 205 217 229 241 253
Key Byte Value (0-255)
(b) Key searching chart with cache-index permutation 
Figure 11. Key searching charts  
6.5. Security analysis 
Three of the attacks described in sections 3 involve 
cache-based information leakage.   
Bernstein(cid:146)s  statistical  cache  attack:  We  first 
evaluate the effectiveness of the RPCache in mitigating 
Bernstein(cid:146)s statistical cache attack and illustrate this in 
Figure 11. We simulate the effect of cache permuting 
by  swapping  the  memory  blocks  of  the  AES  tables 
once  per  25  AES  encryptions.  This  is  roughly 
equivalent  to  swapping  two  cache  sets  per  10,000 
cycles. In Figure 11, the x-axis is the key value that is 
used in the key-byte searching algorithm described in 
Section 3. The y-axis is the normalized correlation of 
the 
the 
corresponding  x  value  as  the  guessed  key  byte.  The 
higher the y value, the more the two charts match. The 
x  value  that  has  the  highest  correlation  value  is  the 
discovered  key-byte.  Figure  11(a)  shows  a  distinct 
high y value for a given x value (x=143), leading to a 
likely key-byte match. In Figure 11(b), the same key is 
used, but with the RPCache remapping, the correlation 
timing  characteristic  charts  given 
two 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:18 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006is rather random, resulting in non-recovery of the key 
byte. In fact, the highest peaks are actually misleading, 
since they indicate values that are not the correct key-
byte.  This  shows  the  effectiveness  of  our  RPCache 
remapping in thwarting Bernstein(cid:146)s attack. 
SMT/Cache side channel attack: in the SMT/Cache 
side  channel  attack,  the  receiver  process  can  directly 
detect  the  memory  locations  used  by  the  sender 
(victim)  process  by  detecting  cache  misses.  The 
RPCache  thwarts  this  attack  since  each  time  the 
receiver process observes a cache miss, the swapping 
policy ensures that this cache miss can be caused by a 
victim process(cid:146)s cache access to any one of the cache 
sets with equal probability. Therefore no information is 
gleaned  about  which  cache  line  was  accessed  by  the 
victim 
(sender)  process.  This  effectively  stops 
SMT/Cache side channel attacks. 
Speculation-enhanced  cache  attack:  the  control-
speculation  mechanism,  described  in  section  3.4,  can 
provide  a  more  reliable  way  to  detect  cache  misses. 
However,  this  will  not  help  if  our  RPCache  is  used. 
Recall  that  RPCache  does  not  prevent  the  attacker 
from detecting cache misses. Instead, RPCache makes 
the  victim  process(cid:146)s  cache  accesses  unrelated  to  the 
attacker(cid:146)s  cache  miss  pattern,  and  hence  no 
information  can  be  inferred  even  if  the  attacker  can 
accurately detect cache misses. 
7. Related work 
implementations 
Past  work  on  covert  channels  analyzed  system 
specifications 
illegal 
information  flows  [13].  Past  work  on  side-channel 
attacks focused on differential power [2-5] and timing 
[6-10] analysis. Cache-based side channel attacks were 
studied  in  [26-27].  Some  side-channel  attacks  were 
reported  recently  which  allow  complete  key  recovery 
during AES and RSA encryption [11][12][22]. 
The control flow information leakage problem due 
to  the  exposure  of  address  traces  on  the  system 
memory  bus  is  studied  in  [21][24].  Both  proposed 
probabilistic  approaches  for  hiding  the  real  access 
sequence.  Our  work  is  different  since  we  focus  on 
information  leakage  caused  by  resource  interference, 
e.g.,  cache  interference,  which  has  fundamentally 
different  assumptions.  Our  solutions  are  also  very 
different. In [23], an approach different from ours, i.e. 
cache partitioning, was proposed to mitigate one type 
of  cache-based  side  channel  attacks.  This  incurs 
performance penalties and also requires changes in the 
ISA,  compiler  and  operating  system.  Other  relevant 
work  include  special  purpose  secure  devices  such  as 
the IBM 4758 cryptographic coprocessor [20]. 
and 
for 
8. Summary and conclusions 
reasons.  They  dramatically 
Information  leakage  attacks  that  exploit  processor 
architecture  features  are  particularly  dangerous  for 
many 
the 
bandwidth and reliability of covert and side channels, 
and  they  exist  even  when  strong  software  isolation 
techniques are present. 
increase 
Unlike traditional covert channels, processor-based 
covert  channels  are  much  faster  and  more  reliable. 
They are much faster because microprocessors operate 
at  the  highest  clock  rate  in  the  system  and  resource 
sharing can be very tightly coupled, as we showed for 
Simultaneous  Multi-Threaded 
(SMT)  processors. 
Processor-based  covert  channels  also  result  in  more 
reliable  covert  channel  communications  since  the 
global on-chip clock makes the synchronization easier. 
In  fact,  we  showed  that  the  data  rate  of  these 
processor-based  covert  channels  can  be  orders  of 
magnitude larger than traditional covert channels.  
We  showed  that  processor-based  covert  channels 
are  not  prevented  (or  even  impacted)  by  strong 
software  isolation  architectures  like  Virtual  Machine 
technology  with  secure  Virtual  Machine  Monitors  or 
secure hypervisors. In fact, the software trends toward 
portable  design  methodology  and  virtualization 
techniques  both  try  to  (cid:147)hide(cid:148)  the  hardware,  making 
most  of 
system  design  and  development 
independent of hardware. This can be very dangerous, 
since it can lead to oblivion of the serious and growing 
threat  of  hardware  processor-based 
information 
leakage. Also, since covert channels and side channels 
only  rely  on  legitimate  use  of  the  system  and  do  not 
directly  access  secrets,  the  system  can  not  detect  the 
existence  of  such  an  attack  even  if  perfect  access 
control,  monitoring  and  auditing  mechanisms  are 
implemented.  
This  paper  demonstrated  the  information  leakage 
problem  at  the  processor  architecture  level,  with 
detailed  covert  and  side  channel  examples.  We 
identified two new convert channels based on highly-
touted  processor  features,  viz.,  Simultaneous  Multi-
Threading  and  Speculative  Execution.  We  also 
provided  detailed  analysis  of  why  the  two  recently 
publicized cache-based side channel attacks work. 
then  suggested 
two  solutions,  Selective 
Partitioning  and 
the  novel  RPCache.  Selective 
partitioning by software (or hardware) can prevent the 
SMT/FU covert channel problem. Here, we estimated 
the  performance  degradation  at  no  more  than  25%, 
with an expected value of less than 10%. Our RPCache 
proposal  uses  an  efficient  cache-index  randomization 
solution 
thwarts  software  cache-based  side 
channel  attacks.  Performance  degradation  is  less  than 
that 
the 
We 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:18 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20061%,  and  the  solution  is  transparent  to  software.  We 
believe  this  solution  can  defeat  most  cache-based 
attacks that try to find which cache locations are used 
by another process. 
In  conclusion,  hardware  processor-based  covert 
channels  and  cache  side  channels  can  be  very 
dangerous.  Mitigation of these at the hardware level is 
often  necessary  since  these  hardware-based  channels 
are  not  impacted  by  even  strong  software  isolation 
mechanisms. We hope to have alerted both the security 
and  computer  architecture  communities 
this 
processor-induced  information  leakage  threat.  Future 
work  will  attempt  to identify more processor features 
that  facilitate  covert  channels  and  side  channels  and 
will study other solutions for this growing threat. 
to 
References 
[1]  Butler  W.  Lampson,  (cid:147)A  note  on  the  confinement 
problem(cid:148),  Communications  of  the  ACM, v.16 n.10, pp.613-
615, Oct. 1973. 
[2]  C.  Kocher,  J.  Jaffe,  and  B.  Jun,  (cid:147)Differential  power 
analysis(cid:148), Advances in Cryptology - CRYPTO (cid:146)99, vol. 1666 
of  Lecture  Notes 
in  Computer  Science,  pp.388-397, 
Springer-Verlag, 1999. 
[3] J.-S. Coron and L. Goubin, (cid:147)On Boolean and arithmetic 
masking against differential power analysis(cid:148), Cryptographic 
Hardware  and  Embedded  Systems  (CHES  2000),  vol.  1965 
of  Lecture  Notes  in  Computer  Science,  pp.  231-237, 
Springer-Verlag, 2000. 
[4]  M.  Joye,  (cid:147)Smart-card  implementations  of  elliptic  curve 
cryptography and DPA-type attacks(cid:148), Smart Card Research 
and  Advanced  Applications  VI,  pp.115-125,  Kluwer 
Academic Publishers, 2004. 
[5]  J.  Waddle  and  D.  Wagner,  (cid:147)Towards  efficient  second-
order  power  analysis(cid:148),  Cryptographic  Hardware  and 
Embedded Systems (CHES 2004), vol. 3156 of Lecture Notes 
in Computer Science, pp. 1-15, Springer-Verlag, 2004. 
[6] P. Kocher, (cid:147)Timing attacks in implementations of Diffie-
Hellman,  RSA,  DSS,  and  other  systems(cid:148),  Proceedings 
Crypto  ’96,  Lecture  Notes  in  Computer  Science,  vol.  1109, 
Springer-Verlag, pp. 104-113. 
[7]  Werner  Schindler,  (cid:147)A  Timing  Attack  against  RSA  with 
the Chinese Remainder Theorem(cid:148), CHES 2000, pp.109-124, 
2000. 
[8]  Werner  Schindler,  (cid:147)Optimized  Timing  Attacks  against 
Public  Key  Cryptosystems(cid:148),  Statistics  and  Decisions, 
20:191-210, 2002. 
[9] David Brumley and Dan Boneh, (cid:147)Remote Timing Attacks 
are  Practical(cid:148),  Proceedings  of  the  12th  USENIX  Security 
Symposium, pp.1-14, August 2003. 
[10]  J.-F.  Dhem,  F.  Koeune,  P.-A.  Leroux,  P.  Mestre,  J.-J. 
Quisquater, and J.-L. Willems, (cid:147)A practical implementation 
of  the  timing  attack(cid:148),  Proc.  CARDIS  1998,  Smart  Card 
Research and Advanced Applications, 1998. 
[11]  D.J.  Bernstein,  (cid:147)Cache-timing  Attacks  on  AES(cid:148), 
http://cr.yp.to/antiforgery/cachetiming-20050414.pdf. 
Intel 
Itanium  Architecture  Software  Developer(cid:146)s 
[12]  C.  Percival,  (cid:147)Cache  Missing  for  Fun  and  Profit(cid:148), 
http://www.daemonology.net/papers/htt.pdf. 
[13]  National  Computer  Security  Center,  (cid:147)A  Guide  to 
Understanding  Covert  Channel  Analysis  of  Trusted 
Systems(cid:148), NCSC-TG-30, November 1993,  
http://www.radium.ncsc.mil/tpep/library/rainbow. 
[14] 
Manuals Volume 1-3,  
http://www.intel.com/design/itanium2/documentation.htm. 
[15]  Dean  Tullsen,  Susan  Eggers,  and  Henry  Levy, 
(cid:147)Simultaneous  Multithreading:  Maximizing  On-Chip 
Parallelism(cid:148),  Proceedings  of  the  22nd  Annual  International 
Symposium on Computer Architecture, June 1995. 
[16]  D.T.  Marr,  F.  Binns,  D.L.  Hill,  G.  Hinton,  D.A. 
J.A.  Miller,  M.  Upton,  (cid:147)Hyper-Threading 
Koufaty, 
Intel 
Technology  Architecture  and  Microarchitecture(cid:148), 
Technology Journal, vol.6, issue 1, pp.4-15, 2002. 
[17]  T.  Garfinkel,  B.  Pfaff,  J.  Chow,  M.  Rosenblum,  D. 
Boneh,  (cid:147)Terra:  A  Virtual  Machine-Based  Platform  for 
the  19th  ACM 
Trusted  Computing(cid:148),  Proceedings  of 
Symposium  on  Operating  System  Principles,  pp.  193-206, 
Oct 2003. 
[18] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, 
A.  Ho,  R.  Neugebauer,  I.  Pratt,  A.  Warfield,  (cid:147)Xen  and  the 
the  19th  ACM 
Art  of  Virtualization(cid:148),  Proceedings  of 
Symposium  on  Operating  System  Principles,  pp.  164-177, 
Oct 2003. 
[19] A. Baratloo, T. Tsai, and N. Singh, (cid:147)Transparent Run-
Time  Defense  Against  Stack  Smashing  Attacks(cid:148), 
Proceedings  of  the  USENIX  Annual  Technical  Conference, 
June 2000. 
[20] The IBM 4758 PCI cryptographic coprocessor, available 
at http://www-03.ibm.com/security/cryptocards. 
[21]  X.  Zhuang,  T.  Zhang,  and  S.  Pande,  (cid:147)HIDE:  an 
infrastructure  for  efficiently  protecting  information  leakage 
on the address bus(cid:148), ACM 11thInternational Conference on 
Architecture  Support 
for  Programming  Language  and 
Operating Systems, 2004.  
[22] D. A. Osvik, A. Shamir and E. Tromer, (cid:147)Cache attacks 
and Countermeasures: the Case of AES(cid:148), Cryptology ePrint 
Archive, Report 2005/271, 2005. 
[23]  D.  Page,  (cid:147)Partitioned  Cache  Architecture  as  a  Side-
Channel  Defense  Mechanism(cid:148),  Cryptology  ePrint  Archive, 
Report 2005/280, 2005. 
[24]  Oded  Goldreich,  (cid:147)Towards  a  theory  of  software 
protection and simulation by oblivious RAMs(cid:148), Proceedings 
of  the  Nineteenth  Annual  ACM  Symposium  on  Theory  of 
Computing, May 1987.  
[25]  T  Austin,  E.  Larson,  and  D.  Ernst,  (cid:147)Simplescalar:  an 
infrastructure 
IEEE 
computer, 35(2), Feb 2002. 
[26]  Daniel  Page,  (cid:147)Theoretical  use  of  cache  memory  as  a 
cryptanalytic  side-channel(cid:148),  technical  report  CSTR-02-003, 
Department  of  Computer  Science,  University  of  Bristol, 
2002. 
[27] Yukiyasu Tsunoo, Teruo Saito, Tomoyasu Suzaki, Maki 
Shigeri,  Hiroshi  Miyauchi, 
(cid:147)Cryptanalysis  of  DES 
implemented on computers with cache,(cid:148) Proc. CHES 2003, 
LNCS 2779, 62-76, 2003. 
for  computer  system  modeling,(cid:148) 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:18 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006