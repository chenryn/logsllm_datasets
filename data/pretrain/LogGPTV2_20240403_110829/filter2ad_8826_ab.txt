我们无法控制`fs:[0x30]`和得到它的值，因此不容易控制`flag == &_IO_vtable_check`条件。
而对于第二种方式，理论上可行，但是如果我们可以找到存在往`_dl_open_hook`中写值的方法，完全利用该方法来进行更为简单的利用（如写其他`hook`）。
看起来无法将vtable覆盖成外部地址了，还有其他啥方法？
目前来说，存在两种办法：
  * 使用内部的vtable`_IO_str_jumps`或`_IO_wstr_jumps`来进行利用。
  * 使用缓冲区指针来进行任意内存读写。
这里主要描述第一个方法使用内部的vtable`_IO_str_jumps`或`_IO_wstr_jumps`来进行利用，第二个方法由于篇幅限制且功能也相对较独立，将在下一篇中阐述。
如何利用`_IO_str_jumps`或`_IO_wstr_jumps`完成攻击？在vtable的check机制出现后，大佬们发现了vtable数组中存在`_IO_str_jumps`以及`_IO_wstr_jumps`两个vtable，`_IO_wstr_jumps`与`_IO_str_jumps`功能基本一致，只是`_IO_wstr_jumps`是处理wchar的，因此这里以`_IO_str_jumps`为例进行说明，后者利用方法完全相同。
`_IO_str_jumps`的函数表如下  
函数表中存在两个函数`_IO_str_overflow`以及`_IO_str_finish`，其中`_IO_str_finish`源代码如下，在文件`/libio/strops.c`中：
    void
    _IO_str_finish (_IO_FILE *fp, int dummy)
    {
      if (fp->_IO_buf_base && !(fp->_flags & _IO_USER_BUF))
        (((_IO_strfile *) fp)->_s._free_buffer) (fp->_IO_buf_base); //执行函数
      fp->_IO_buf_base = NULL;
      _IO_default_finish (fp, 0);
    }
可以看到，它使用了IO 结构体中的值当作函数地址来直接调用，如果满足条件，将直接将`fp->_s._free_buffer`当作函数指针来调用。
看到这里利用的方式应该就很明显了。首先，当然仍然需要绕过之前的`_IO_flush_all_lokcp`函数中的输出缓冲区的检查`_mode_IO_write_base`进入到`_IO_OVERFLOW`中。
接着就是关键的构造IO
FILE结构体的部分。首先是vtable检查的绕过，我们可以将vtable的地址覆盖成`_IO_str_jumps-8`的地址，这样会使得`_IO_str_finish`函数成为了伪造的vtable地址的`_IO_OVERFLOW`函数（因为`_IO_str_finish`偏移为`_IO_str_jumps`中0x10，而`_IO_OVERFLOW`为0x18）。这个vtable（地址为`_IO_str_jumps-8`）可以绕过检查，因为它在vtable的地址段中。
构造好vtable之后，需要做的就是构造IO
FILE结构体其他字段来进入把`fp->_s._free_buffer`当作指针的调用。先构造`fp->_IO_buf_base`不为空，而且看到后面它将作为第一个参数，因此可以使用`/bin/sh`的地址；然后构造`fp->_flags`要不包含`_IO_USER_BUF`，它的定义为`#define
_IO_USER_BUF 1`，即`fp->_flags`最低位为0。满足这两个条件，将会使用IO 结构体中的指针当作函数指针来调用。
最后构造`fp->_s._free_buffer`为`system`或`one gadget`的地址，最后调用`(fp->_s._free_buffer)
(fp->_IO_buf_base)`，`fp->_IO_buf_base`为第一个参数。
`_IO_str_jumps`中的另一个函数`_IO_str_overflow`也存在该情况，但是它所需的条件会更为复杂一些，原理一致，就不进行描述了，有兴趣的可以自己去看。而另一个vtable`_IO_wstr_jumps`与`_IO_str_jumps`表中的函数指针功能一致，因此也是完全一样的使用方法。
最后，如果libc中没有`_IO_wstr_jumps`与`_IO_str_jumps`表的符号，给出定位`_IO_str_jumps`与`_IO_wstr_jumps`的方法：
  * 定位`_IO_str_jumps`表的方法，`_IO_str_jumps`是vtable中的倒数第二个表，可以通过vtable的最后地址减去`0x168`。
  * 定位`_IO_wstr_jumps`表的方法，可以通过先定位`_IO_wfile_jumps`，得到它的偏移后再减去`0x240`即是`_IO_wstr_jumps`的地址。
## 实践
最后给出两道题进行相应的实践，实际体验下如何使用`_IO_str_jumps`来绕过vtable check。从网上筛选了一圈，找了两道题。一道题是hctf
2017的babyprintf，应该是很经典的一道题了；一道是ASIS2018的fifty-dollars，这道题用了FSOP中的两次`_chain`链接，很有意思，值得一看。
### babyprintf
题目中格式化字符串以及堆溢出很明显。
但是格式化字符串漏洞使用`__printf_chk`，该函数限制了格式化字符串在使用`%a$p`时需要同时使用`%1$p`至`%a$p`才可以，并且禁用了`%n`。因此只能使用漏洞来泄露地址。
堆溢出利用的方法与上篇的东华杯pwn450的用法基本一致，覆盖`top chunk`的`size`，使得系统调用`sysmalloc`将top
chunk放到unsorted bin里，然后利用`unsorted bin attack`改写`_IO_list_all`，指向伪造好的IO
结构体，vtable使用的地址是`_IO_str_jumps-8`，最后构造出来的IO结构体数据如下：  
其中`fp->_mode`为0且`fp->_IO_write_ptr>_fp->_IO_write_base`，通过了`house of
orange`的检查，可以进入到`_IO_OVERFLOW`的调用；同时vtable表指向`_IO_str_jumps-8`在vtable段中，也可绕过vtable的check机制；最后`fp->_flags`为0，`fp->_IO_buf_base`不为空，且指向`/bin/sh`字符串地址，可以顺利进入到`(fp->_s._free_buffer)
(fp->_IO_buf_base)`的调用。在exp中可以使用[pwn_debug](https://github.com/ray-cp/pwn_debug)`IO_FILE_plus`模块的`str_finish_check`函数来检查所构造的字段是否能通过检查。
vtable表指针如下，可以看到当前的`__overflow`函数确实为`_IO_str_finish`：  
最后再看跳转的目标地址，确实为`system`函数且参数`_IO_buf_base`为`/bin/sh`的地址，因此执行`system("/bin/sh")`，成功拿到shell。  
当然这题也可以用fastbin attack做，因为top chunksize不够的时候是使用`free`函数来释放的，因此也会放到fastbin中去。
### fifty_dollars
这题是一道菜单题，提供申请、打印以及释放的功能，`free`了以后指针没清空，导致`uaf`，可以实现堆地址任意写的功能。
先说一下如何使用`uaf`构造出unsroted bin，如下面一个demo，主要是通过fastbin
attack修改相应chunk的size，再释放时，将会释放至unsorted bin中：
    A=alloc(0)
    B=alloc(1)
    C=alloc(2)
    delete(A)
    delete(B)
    delete(A)
    #此时形成fastbin attack
    A=alloc(0,data=p64(addressof(C)-0x10) # 修改fastbin的fd指向c-0x10
    B=alloc(1)
    A=alloc(0)
    evil=alloc(3,data=p64(0)+p64(0xb1)) #修改C的size为0xb0
    delete(C) #此时C将被释放至
可通过释放到fastbin的链表中，再show可以泄露出堆地址；通过将堆块释放到unsorted bin中，再show可泄露libc地址。
这题的限制是只能申请`0x60`大小的堆块，使用house of orange攻击的时候无法把unsorted bin 释放到small
bin为0x60的数组中（即满足`fp->_chain`指向我们的堆块中），为此只能想办法释放一个最终形成`fp->_chain->_chain`指向我们堆块的地址的堆块（即大小为`0xb0`的堆块）。通过两次`chain`的索引，最终实现控制IO
FILE结构，调用`_IO_OVERFLOW`控制程序执行流。
最后伪造`_IO_list_all`结构如下，`_IO_list_all`指向`unsorted bin`的指针的位置：  
`_IO_list_all->_chain`指向`unsorted bin+0x68`的位置即smallbin size为0x60的位置：  
`_IO_list_all->_chain->_chain`指向`unsorted bin+0xb8`的位置，即smallbin
size为0xb0的位置，此时由于存在我们已经释放的堆的地址，因此它指向了我们伪造的结构。  
堆内容的构造则和上一题babyprintf没有区别，甚至可以使用同一个模版，不再细说。覆盖vtalbe为`_IO_str_jumps-8`，绕过vtable的check，同时设置好IO
FILE的字段绕过相应检查，最终进入到`_IO_flush_all_lockp`触发FSOP，经过两次`_chain`的索引就会执行`system("/bin/sh")`。
主要利用FSOP两次`_chain`的思想，还是很有意思的。
## 小结
这是本系列的倒数第二篇文章，介绍了vtable的check机制和其相应的绕过方法之一。vtable数组中的各个成员都有其相应的功能，最终在里面找到了`_IO_str_jumps`与`_IO_wstr_jumps`两个虚表来实现利用。
相关文件和脚本在[github](https://github.com/ray-cp/ctf-pwn/tree/master/PWN_CATEGORY/IO_FILE/vtable_str_jumps)
## 参考链接
  1. [Hctf-2017-babyprintf-一个有趣的PWN-writeup](https://bbs.pediy.com/thread-222735.htm)
  2. [通过一道pwn题探究_IO_FILE结构攻击利用](https://www.anquanke.com/post/id/164558#h2-5)
  3. [IO FILE 学习笔记](https://veritas501.space/2017/12/13/IO%20FILE%20学习笔记/)