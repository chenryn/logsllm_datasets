title:Verifying Curve25519 Software
author:Yu-Fang Chen and
Chang-Hong Hsu and
Hsin-Hung Lin and
Peter Schwabe and
Ming-Hsien Tsai and
Bow-Yaw Wang and
Bo-Yin Yang and
Shang-Yi Yang
Verifying Curve25519 Software
Yu-Fang Chen1
PI:EMAIL
Peter Schwabe4
PI:EMAIL
Chang-Hong Hsu2
PI:EMAIL
Ming-Hsien Tsai1
PI:EMAIL
Hsin-Hung Lin3
PI:EMAIL
Bow-Yaw Wang1
PI:EMAIL
Bo-Yin Yang1
PI:EMAIL
Shang-Yi Yang1
PI:EMAIL
1Institute of Information Science, Academia Sinica, Taiwan
2University of Michigan, Ann Arbor, USA
3Faculty of Information Science and Electrical Engineering, Kyushu University, Japan
4Institute for Computing and Information Sciences, Radboud University Nijmegen, The Netherlands
ABSTRACT
This paper presents results on formal veriﬁcation of high-
speed cryptographic software. We consider speed-record-
setting hand-optimized assembly software for Curve25519
elliptic-curve key exchange presented by Bernstein et al. at
CHES 2011. Two versions for diﬀerent microarchitectures
are available. We successfully verify the core part of the
computation, and reproduce detection of a bug in a previ-
ously published edition. An SMT solver supporting array
and bit-vector theories is used to establish almost all prop-
erties. Remaining properties are veriﬁed in a proof assistant
with simple rewrite tactics. We also exploit the composi-
tionality of Hoare logic to address the scalability issue. Es-
sential diﬀerences between both versions of the software are
discussed from a formal-veriﬁcation perspective.
Keywords
Elliptic-curve cryptography, optimized assembly, Hoare logic,
SMT solver, Boolector, Coq.
1.
INTRODUCTION
Optimization of cryptographic primitives and protocols
for high performance in software is a very active ﬁeld of
research. Papers that report new speed records for, e.g.,
elliptic-curve cryptography are published at top cryptogra-
phy venues like Crypto, Eurocrypt, Asiacrypt or CHES. See,
for example, [12, 29, 33, 24].
One might expect that the software described in these pa-
pers is quickly included in cryptographic libraries so that
users beneﬁt from the speedups; however this is often not
the case. Sometimes the reason is that the software is not
Public domain. This work was supported by the Ministry of Science and Technol-
ogy (MOST), Taiwan, through projects no 102-2221-E-001-017/018, and 103-2221-
E-001-019/020-MY3; by the Netherlands Organisation for Scientiﬁc Research (NWO)
through Veni 2013 project 13114; and by Academia Sinica, through the IIS Spe-
cialty Project and BY’s Career Advancement Award. Part of this work was done
while Schwabe was employed by Academia Sinica. Permanent ID of this document:
55ab8668ce87d857c02a5b2d56d7da38. Date: August 24, 2014.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11. http://dx.doi.org/10.1145/2660267.2660370.
(freely) available or that the primitive is incompatible with
existing cryptographic infrastructure. However,
in other
cases the reason is simply that we do not know whether the
software is correct. For example, the designers of the Net-
working and Cryptography library (NaCl) [18] announced
in 2011 that they would include Ed25519 signatures [13] in
NaCl. This has not happened until today; the reason is given
in [17]: “Auditing the NaCl source is a time-consuming job.”
All of the papers listed above that report speed records
for elliptic-curve cryptography rely on large portions of in-
line hand-optimized assembly code to achieve the speeds.
For example, the Ed25519 signature software consists of 4
diﬀerent implementations that together have 5521 lines of C
code and 16184 lines of qhasm code. The two speed-record-
setting Curve25519 [11] elliptic-curve Diﬃe-Hellman imple-
mentations, which were also presented in [13], consist of 342
lines of C and 4064 lines of qhasm code. The qhasm pro-
gramming language is a high-level assembler introduced by
Bernstein [9]. What is particularly interesting about this
Ed25519 and Curve25519 software from a correctness per-
spective is not only that it is waiting for inclusion in a widely
used cryptographic library but also that the software ini-
tially had a bug which is not found by extensive testing1.
In principle, there are three diﬀerent approaches to ensure
the correctness of software:
Testing: Every serious cryptographic library includes ex-
tensive test batteries. Software testing has many ad-
vantages:
it is relatively cheap, it does not conﬂict
with software performance, and it is able to catch a
large amount of bugs. The last aspect is ampliﬁed by
the nature of many cryptographic algorithms, which
require that each input bit inﬂuences each output bit
and typically also most intermediate values. For ex-
ample it is very hard to imagine AES software which
is correct for almost all inputs but fails in some rare
cases.
However, some bugs are naturally much harder to test
for. One such example is carries (borrows) in mod-
ern elliptic curve cryptography that often requires big
1This bug is documented, see http://cryptojedi.org/
crypto/#ed25519
299integer arithmetic modulo something very close to a
power of two. Thus, often one side in a conditional
statement would be extremely rare when considered as
a statistical event. The bug reported for the Ed25519
and Curve25519 software from [13] falls into this cat-
egory. Also the bug in the OpenSSL elliptic-curve
Diﬃe-Hellman implementation, which was exploited
in [22], falls into this category.
Auditing: One way to ﬁnd bugs that are not found by
testing are code audits. Such audits by experts are a
widely accepted means to ensure correctness and gen-
erally quality of software, but they come at a relatively
high cost. For example, a community eﬀort collected
more than US$50,000 for a now ongoing audit of True-
Crypt [37]. The cost for a full audit of OpenSSL has
recently been estimated to be US$250, 000 [34].
Another disadvantage of software auditing is a con-
ﬂict with performance. Software that is relatively easy
(and thus cheap) to audit is concise, has small amounts
of code, and is naturally portable. High-speed crypto-
graphic software is written in assembly with optimiza-
tions for multiple architectures and micro-architectures.
The core development team of NaCl, together with
Janssen, recently released TweetNaCl, a re-implemen-
tation of NaCl which is optimized for conciseness and
audit-ability [17]. The authors state that TweetNaCl
“allows correct functionality to be veriﬁed by human
auditors with reasonable eﬀort”. However, Curve25519
in TweetNaCl takes 2.5 million cycles on an Intel Ivy
Bridge processor – more than 10 times more than the
assembly implementation presented in [13].
Veriﬁcation: The third direction to ensure correctness of
(cryptographic) software is formal veriﬁcation; this di-
rection oﬀers the the strongest guarantees for the cor-
rectness of software. There are two major streams of
formal veriﬁcation approaches, namely model check-
ing and theorem proving. In the model checking ap-
proach, an abstract model is ﬁrst built for a program
and then automatically and exhaustively explored to
see if there is a counterexample of a property. In the
theorem-proving approach, a program and its proper-
ties have to be ﬁrst formalized in the meta-logic of a
proof assistant and then the proof of the properties are
manually deduced within the proof assistant. Theorem
proving requires more manual work, but it is capable
of proving harder properties.
The current state of the art in formal veriﬁcation is
far away from being able to verify a complete cryp-
tographic library, which is optimized for speed. From
a cryptographic-engineering perspective it is obvious
that veriﬁcation should prioritize those portions of code
that are expensive to audit and that may contain bugs
which are not revealed by testing. The formal veriﬁ-
cation of precisely this kind of code is the content of
this paper.
Contributions of this paper. We describe the formal
veriﬁcation of the central hand-optimized assembly routine
of each of the two implementations of Curve25519 Diﬃe-
Hellman key-exchange software presented in [13]. This soft-
ware is still today the speed-record holder for Curve25519;
see [15]. To the best of our knowledge, our work is the ﬁrst
to formally verify an inline hand-optimized assembly imple-
mentation of a real-world cryptographic protocol.
The correctness of the mathematical formulas in the com-
putation of Curve25519 Diﬃe-Hellman key exchange is en-
sured by Sage veriﬁcation scripts in [16]2. So we assume
that those formulas are correct and verify that the low-level
implementation correctly implements the formulas. Our ver-
iﬁcation shows that the core routine of one of the two im-
plementations was indeed correct right from the beginning,
reproduces detection of the bug in the other and shows that
the bug-ﬁxed version of that software is also correct.
We also present a hybrid methodology that integrates
compositional reasoning, SMT (Satisﬁability Modulo The-
ories) solvers, and proof assistants. A language is intro-
duced for annotating qhasm code with preconditions on in-
puts and postconditions on intermediate values and outputs.
With the annotations, the compositional reasoning in Hoare
logic [28] allows us to boil down the veriﬁcation of a large
program to the veriﬁcation of smaller programs. We then
automatically translate this annotated qhasm code to sev-
eral SMT formulas and use an SMT solver to prove that the
code matches the conditions speciﬁed in the annotations. To
achieve better veriﬁability, we develop heuristics to help the
SMT solver. For a small set of algebraic properties such as
modular congruence that are hard for SMT solvers, we rely
on proof assistants.
Related work. Cryptographic software forms the back-
bone of information security and it is thus widely accepted
that correctness of such software is important enough to jus-
tify formal veriﬁcation eﬀorts.
One approach is to re-implement cryptographic protocols
in languages and frameworks that allow eﬃcient veriﬁca-
tion. The most extensive work in this area is miTLS, a
“veriﬁed reference implementation of the TLS protocol” [20,
21]. This implementation of TLS is written in F# and spec-
iﬁed in F7 – the clear focus is on a veriﬁable (and veri-
ﬁed) re-implementation; not on verifying existing high-speed
cryptographic software. Note that miTLS relies on (unveri-
ﬁed) “cryptographic providers such as .NET or Bouncy Cas-
tle” for core cryptographic primitives. Also the CryptVer
project [26] aims at re-implementing cryptography such that
it can be formally veriﬁed. Their approach is to specify cryp-
tographic algorithms in higher-order logic and then imple-
ment them by formal deductive compilation.
Another approach to formally veriﬁed cryptographic soft-
ware are special-domain compilers. A recent example of this
is [4], where Almeida et al. introduce security-aware compi-
lation of a subset of the C programming language.
The theory of elliptic curve has been formalized in [36,
7]. In principle, the mathematical formulas in Curve25519
Diﬃe-Hellman key-exchange can be veriﬁed with the for-
malization. Low-level machine codes have been formalized
in proof assistants [1, 3, 2, 32]. Large-integer arithmetic
and cryptographic functions can be formally veriﬁed semi-
automatically. Our approach is very lightweight. Most of
the veriﬁcation is performed by an SMT solver automati-
cally. It hence requires much less human intervention.
the
2Speciﬁcally,
http://www.hyperelliptic.
org/EFD/g1p/auto-sage/montgom/coordinates.sage and
http://www.hyperelliptic.org/EFD/g1p/auto-sage/
montgom/xz/ladder/mladd-1987-m.sage
scripts
300Cryptographic software must be more than correct,
it
must avoid leaks of secret information through side chan-
nels. For example, if the execution time of cryptographic
software depends on secret data, this can be exploited by
an attacker in a so-called timing attack. As a consequence,
countermeasures against side-channel attacks have also been
formalized. For example, Bayrak et al. [8] use SAT solving
for the automated veriﬁcation of power-analysis countermea-
sures. Molnar et al. [30] describe a tool for static analysis of
control-ﬂow vulnerabilities and their automatic removal.
Availability of software. To maximize reusability of our
results we placed the tools and software presented in this
paper into the public domain. They are available at http:
//cryptojedi.org/crypto/#verify25519.
Organization of this paper. Section 2 gives the necessary
background on Curve25519 elliptic-curve Diﬃe-Hellman key
exchange. Section 3 reviews the two diﬀerent approaches for
assembly implementations of arithmetic in the ﬁeld F
2255−19
used in [13]. Section 4 gives the necessary background on
veriﬁcation techniques and describes the tools we use for
veriﬁcation. Section 5 details our methodology. Section 6
presents and discusses our results. We conclude the paper
and point to future work in Section 7.
2. CURVE25519
To establish context, we brieﬂy review the basics of elliptic-
curve cryptography. For more information see, for exam-
ple, [6, 27]. Let Fq be the ﬁnite ﬁeld with q elements. For
coeﬃcients a1, a2, a3, a4, a6 ∈ Fq, an equation of the form
E : y2 + a1xy + a3y = x3 + a2x2 + a4x + a6
deﬁnes an elliptic curve E over Fq (if certain conditions hold,
cf. [27], Chapter 3). The set of points (x, y) ∈ Fq × Fq that
fulﬁll the equation E, together with a “point at inﬁnity”,
form a group of size (cid:96) ≈ q, which is usually written ad-
ditively. Addition under this group law is eﬃciently com-
putable through a few operations in the ﬁeld Fq. Given a
point P on the curve and a scalar k ∈ Z it is easy to do a
scalar multiplication k · P ; the number of group additions
required for a such a scalar multiplication is linear in the
length of k (i.e., logarithmic in k).
In contrast, for a suﬃciently large ﬁnite ﬁeld Fq, a suit-
ably chosen curve, and random points P and Q, computing
the discrete logarithm logP Q, i.e., ﬁnding k ∈ Z such that
Q = k · P , is hard. More speciﬁcally, for elliptic curves
√
used in cryptography, the best known algorithms takes time
(cid:96)). Elliptic-curve cryptography is based on this diﬀer-
Θ(
ence in the complexity for computing scalar multiplication
and computing discrete logarithms. A user who knows a
secret k and a system parameter P computes and publishes
Q = k · P . An attacker who wants to break security of the
scheme needs to obtain k, i.e., compute logP Q.
Curve25519 is an elliptic-curve Diﬃe-Hellman key exchange
protocol proposed by Bernstein in 2006 [11]. It is based on
arithmetic on the elliptic curve E : y2 = x3 + 486662x2 + x
deﬁned over the ﬁeld F
2.1 The Montgomery ladder
2255−19.
Curve25519 uses a so-called diﬀerential-addition chain pro-
posed by Montgomery [31] to multiply a point, identiﬁed
only by its x-coordinate, by a scalar. This computation
is highly regular, performs one ladder step per scalar bit,
and is relatively easy to protect against timing attacks; the
whole loop is often called Montgomery ladder. An overview
of the structure of the Montgomery ladder and the oper-
ations involved in one ladder-step are given respectively in
Algs. 1 and 2. The inputs and outputs xP , X1, X2, Z2, X3, Z3,
and temporary values Ti are elements in F
2255−19. The per-
formance of the computation is largely determined by the
performance of arithmetic operations in this ﬁeld.
Algorithm 1 Curve25519 Montgomery Ladder
Input: scalar k, and x-coordinate xP of a point P on E.
Output: (XkP , ZkP ) fulﬁlling xkP = XkP /ZkP
t = (cid:100)log2 k + 1(cid:101)
X1 = xP ; X2 = 1; Z2 = 0; X3 = xP ; Z3 = 1
for i ← t − 1 downto 0 do
if bit i of k is 1 then
(X3, Z3, X2, Z2) ← ladderstep(X1, X3, Z3, X2, Z2)
(X2, Z2, X3, Z3) ← ladderstep(X1, X2, Z2, X3, Z3)
else
end if
end for
return (X2, Z2)