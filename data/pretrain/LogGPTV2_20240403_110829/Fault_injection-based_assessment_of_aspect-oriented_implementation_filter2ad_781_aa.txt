title:Fault injection-based assessment of aspect-oriented implementation
of fault tolerance
author:Ruben Alexandersson and
Johan Karlsson
Fault injection-based assessment of aspect-oriented implementation of fault 
tolerance 
Ruben Alexandersson and Johan Karlsson 
Department of Computer Science & Engineering, 
Chalmers University of Technology, 
SE-41296, Gothenburg, Sweden 
{ruben;johan}@chalmers.se 
Abstract—  Aspect-oriented  programming  provides 
an 
interesting  approach  for  implementing  software-based  fault 
tolerance as it allows the core functionality of a program and 
its fault tolerance features to be coded separately. This paper 
presents  a  comprehensive  fault  injection  study  that  estimates 
the fault coverage of two software implemented fault tolerance 
mechanisms  designed  to  detect  or  mask  transient  and 
intermittent hardware faults. We compare their fault coverage 
for  two  target  programs  and  for  three  implementation 
techniques:  manual  programming  in  C  and  two  variants  of 
aspect-oriented programming. We also compare the impact of 
different  compiler  optimization  levels  on  the  fault  coverage. 
The 
tolerance  mechanisms 
investigated are: i) triple time-redundant execution with voting 
and  forward  recovery,  and  ii)  a  novel  dual  signature  control 
flow checking mechanism. The study shows that the variations 
in  fault  coverage  among  the 
implementation  techniques 
generally  are  small,  while  some  variations  for  different 
compiler optimization levels are significant.  
software-implemented 
fault 
Keywords-aspect  oriented  programming;  fault  tolerance; 
fault injection; time-redundant execution; control flow checking 
I. 
INTRODUCTION 
Scaling  of  VLSI  technology  is  expected  to  make 
integrated  circuits  increasingly  susceptible  to  a  variety  of 
hardware failure mechanisms, including process variations, 
aging  effects  and  ionizing  radiation  [1].  This  is  likely  to 
increase  the  rate  of  transient,  intermittent  as  well  as 
permanent  hardware  faults  in  future  integrated  circuits.  To 
prevent  such  faults  from  causing  system  failures,  chip 
manufacturers  have  begun  to  equip  microprocessors  and 
other  integrated  circuits  with  increasingly  sophisticated 
hardware  mechanisms 
for  error  detection  and  error 
correction [2]. 
Although we can expect future integrated circuits to be 
provided  with  redundancy  mechanisms  that  can  detect  or 
correct a large number of  hardware related errors, it is not 
likely  that  these  mechanisms  will  achieve  perfect  fault 
detection  coverage.  Thus,  for  applications  with  high 
reliability requirements, it is necessary to enhance the fault 
coverage  by 
level 
techniques that can handle errors which are not detected or 
masked at the hardware level.  
introducing  software  and  system 
These errors can easily be handled at the system level by 
classical  fault  tolerance  techniques  like  triple  modular 
redundancy. Such techniques are, however, often considered 
too expensive in emerging applications, such as automotive 
active safety systems. 
A  cost-effective  approach  for  handling  hardware  errors 
is to use software based fault tolerance techniques. Design 
and evaluation of software techniques for handling hardware 
errors is a widely studied research topic. Previous studies in 
this  area  have  proposed  and  evaluated  techniques  such  as 
control  flow  checking  [3],  time-redundant  execution  [4], 
software  assertions  [5],  algorithm  based  fault  tolerance 
(ABFT) [6] and software-level encoding [7]. 
the  program  code  providing  fault 
Software-based  fault  tolerance  techniques  differ  in  the 
way 
is 
introduced. Examples of implementation techniques include 
manual  programming,  code  transformation  [8,9],  code 
interpreters [7 ], and aspect-oriented programming.  
tolerance 
In  this  paper,  we  present  and  evaluate  two  software 
mechanisms designed to handle hardware errors originating 
from  device  level  faults  in  microprocessors  and  main 
memory circuits.  
forward 
implement 
it  possible 
execution  with 
is  a  dual  signature  control 
flow  checking 
mechanism  providing  error  detection.  The  other  achieves 
error detection and error masking by combining triple time 
redundant 
recovery.  Both 
mechanisms  are  introduced  at  the  source  code  level.  This 
makes 
them  using  manual 
programming as well as aspect-oriented programming [10].  
The main purpose of this study is to investigate the fault 
coverage  obtained  by  our  software  mechanisms  when  they 
are 
implemented  using  aspect-oriented  programming 
(AOP).  AOP  allows  for  modularization  of  functionalities 
that  cannot  be  modularized  in  traditional  programming 
languages via a language concept called aspects. The use of 
aspects makes it possible to implement generic mechanisms 
for fault tolerance that can be applied to any target program 
[11]. Thus,  AOP allows the code for the target application 
and  the  code  for  the  fault  tolerance  mechanism  to  be 
developed separately. This reduces program complexity and 
simplifies program verification and maintenance.  
Another  advantage  of  using  AOP  for  implementing 
software-based fault tolerance is its flexibility  with respect 
One 
to 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE303to  tool  chain  certification.  AOP  uses  a  program  called  a 
weaver  which  merges  the  code  of  the  target  program  with 
the  code  that  implements  fault  tolerance.  The  weaver  is  a 
generic program having no knowledge of the fault tolerance 
mechanisms. Hence, once a certified weaver is available, the 
programmer 
tolerance 
mechanisms without having to re-certify the tool chain. 
to  develop  new  fault 
is  free 
This  is  in  contrast  to  implementing  fault  tolerance  via 
code  transformation.  Here  the  fault  tolerance  code  is 
inserted  by  a  transformation  program  which  is  part  of  the 
compiler  tool  chain  (typically  a  pre-  or  post  processor). 
Thus,  for  this  technique,  a  modification  of  the  fault 
tolerance  mechanisms  requires  re-certification  of  the  tool 
chain. 
We  have  equipped  two  target  programs  with  our 
software-based fault tolerance mechanisms, a brake-by-wire 
control  application  and  a  program  that  calculates  the 
Fibonacci  number  series.  We  used  an  extended  version  of 
the  AspectC++  language  [12]  to  implement  fault  tolerant 
versions of the target programs, which we have subjected to 
fault injection. 
We have also conducted fault injection experiments with 
program  versions  where  the  software  mechanisms  were 
implemented using manual programming in C. The purpose 
of these experiments was to enable a comparison of the fault 
coverage obtained for different implementation techniques.  
Another important goal was to investigate the impact of 
compiler  optimization  on  fault  coverage.  Hence,  we  have 
conducted  experiments  with  executables  produced  using 
two different  levels of compiler optimization. In an earlier 
study  [13]  we  have  shown  that  the  use  of  compiler 
optimizations  is  essential  when  using  AOP  for  introducing 
fault tolerance in order to have an acceptable execution time 
overhead.  
The  remainder  of  this  report  is  organized  as  follows. 
Section II discusses implementation languages and compiler 
optimizations. Section III describes the target programs, the 
fault model and the fault injection tool. The fault tolerance 
implementations  are 
mechanisms  and 
described 
the 
experimental  results.  Section  VI  gives  an  overview  of 
related work while conclusions are drawn in Section VII. 
IV.  Section  V  presents 
their  different 
in  Section 
II.  PROGRAM IMPLEMENTATION TECHNIQUES 
In this section, we discuss aspect-oriented programming 
and  the  implementation  languages  used  in  this  study.  We 
also  discuss  the  different  optimization  levels  used  by  the 
compiler when generating the executable programs. 
A.  Aspect-oriented programming and languages 
As  stated  above,  aspect-oriented  programming  allows 
for  the  separation  of  the  source  code  implementing  fault 
tolerance  from  that  of  the  target  programs.  Instead  of 
writing the code for a fault tolerance mechanism as part of 
the  target  program  functions,  it  is  written  as  independent 
code  segments  called  advices.  Along  with  an  advice  a 
for 
pointcut is declared stating when in the target program the 
advice code should be executed. An accessible point during 
the target program execution where advices can be inserted 
is known as a joinpoint. The process of combining advices 
with  the  target  program  sources  is  called  weaving  and  is 
done  by  a  compiler  known  as  the  AOP  language  weaver. 
When an advice is inserted the weaver also adds glue code 
to handle the connection between the advice and the target 
program. 
Our  interest  in  AOP  is  directed  towards  the  domain  of 
safety-critical  embedded  systems,  and  especially  active 
safety  systems 
road  vehicles.  The  predominant 
programming language for safety-critical applications in this 
domain  is  C  and  to  some  degree  C++.  Today  there  exists 
only  one  mature  AOP  language  that  extends  C  and  C++, 
namely AspectC++ [12]. AspectC++ is an extension to C++ 
but since C is a subset of C++ the AspectC++ weaver can 
also be used together with C programs.  
In two earlier studies [11, 13] we evaluated AspectC++ 
for  fault  tolerance  purposes.  As  part  of  these  studies  two 
new  variants  of  AspectC++  have  been  developed.  We  call 
these language variants AspectC++Ext and AspectC++Opt. 
AspectC++Ext  extends  AspectC++  with  some  features 
that are needed for implementing fault tolerance. The most 
important  additions  are  joinpoints  for  accessing  read  and 
write operations on global variables. Such joinpoints are in 
other  AOP  languages  known  as  get  and  set  joinpoints. 
Without  these  joinpoints  fault  tolerance  mechanisms  like 
data  redundancy,  incremental  checkpointing,  or  executable 
assertions cannot be implemented as aspects [11]. It should 
be noted that these extensions are generic features that can 
be  found  in  other  general-purpose  AOP  languages.  Hence, 
they  are  not  specifically  developed  for  supporting  fault 
tolerance.  
The  second  variant,  AspectC++Opt,  is  a  refinement  of 
AspectC++Ext,  which  reduces  overhead  by  introducing  two 
optimizations  to  the  language  weaver.  Strictly  speaking, 
these two variants are not different languages, but rather two 
compilers for the same language. However, to simplify our 
writing, we refer to them as different languages. 
Both 
these 
language  variants  can  be  used 
for 
implementing fault tolerance. However, the code generated 
by  AspectC++Ext  resembles  that  of  the  official  release  of 
AspectC++  while  AspectC++Opt  in  many  cases  produces 
much less glue code. Glue code is a potential problem when 
using AOP for implementing fault tolerance. Since the glue 
code  is  generated  by  the  AOP  language  weaver  it  is  not 
visible  in  the  program  sources.  Hence  it  cannot  be 
specifically  targeted  by  source  code  level  fault  tolerance 
mechanisms, and might therefore be vulnerable to faults.  
Apart from this issue, the final machine code is different 
also in other ways when using AOP languages compared to 
when the fault tolerance mechanisms are written directly in, 
for  instance,  C.  Since  we  did  not  know  whether  these 
differences  would  affect 
the 
the  fault  coverage  of 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
304implementations,  we  choose  to  include  both  AspectC++ 
variants in the study and compare them to standard C. 
B.  Compiler optimization 
In an earlier study [13], we have shown that the use of 
compiler  optimizations  is  essential  in  order  for  the  AOP 
technique to be feasible from an overhead perspective. The 
level of optimization greatly affects the structure of the code 
generated  by  the  compiler.  We  conducted  experiments  for 
two  different  levels  of  compiler  optimization  in  order  to 
investigate to what extent compiler optimization affects the 
fault coverage. To the best of our knowledge, this study is 
the first to investigate the impact compiler optimization on 
fault coverage for software-based fault tolerance techniques.  
GCC v4.2.2 was used for compiling all program variants 
subjected  to  fault  injection.  Table  I  shows  the  different 
optimization  levels  supported  by  GCC.  Apart  from  these 
levels, individual optimizations can also be turned on or off 
by  using  specific  flags.  However,  all  optimizations  do  not 
have individual flags. Hence, choosing an optimization level 
activates more optimization techniques than indicated by the 
number of activated flags in the table. 
The  two  levels  of  optimization  that  were  used  in  the 
experiments  are  denoted  as  follows.  Low  optimization  is 
equal to the O0 level of GCC, apart from that the –finline 
option  is  set.  This  option  tells  the  compiler  to  inline 
functions that has been declared as inline in the source code. 
The reason for using this option is that AspectC++ produces 
extremely ineffective code if the inline statements added are 
not  honored  by  the  compiler.  Hence,  using  AspectC++ 
without  this  option  is  not  feasible  in  any  situation.  High 
optimization  equals  the  GCC  level  O3  except  that  strict-
aliasing  is  turned  off.  This  option  was  not  used  because  it 
caused one of the target programs to behave incorrectly.  
III.  EXPERIMENTAL SET-UP 
This  section  describes  the  target  programs,  the  fault 
model, the experimental set-up and the fault injection tool. 
A.  Target applications  
We have used two target applications in this study. The 
first  one  is  a  small  program  calculating  the  Fibonacci 
number  series.  This  program  was  specifically  created  for 
these  experiments  in  order  to  have  properties  that  would 
help  us  detect  problems  with  using  AOP.  First,  the 
Fibonacci  algorithm  has  no  internal  robustness  to  faults.  
TABLE I.  
GCC OPTIMIZATION LEVELS 
O0 
O1 
No extra optimizations.  
Simple optimizations. Priority is on fast compilation. 29 
optimizations flags are activated. 
Standard optimizations. Additionally 32 flags are set. 
Maximum optimizations. 6 additional flags are included. 
Optimize for small code size.  
O2 
O3 
Os 
Ofast  Similar to O3 but optimize even more by disregarding strict 
standards compliance.  
in 
the  fault 
That is, the complete state is used  for the calculations and 
all errors affecting the calculations will always propagate to 
the output within two iterations. This reduces the risk of the 
program  masking  weaknesses 
tolerance 
implementation. Second, the algorithm can be implemented 
with  a  small  amount  of  code  and  does  not  accept  inputs. 
This allows us to do exhaustive fault injection, meaning that 
we can inject all possible faults according to our fault model 
(i.e. single bit flips, see Section III.B below). Thus we can 
be certain also to detect vulnerabilities  with low activation 
probability.  In  our  implementation  the  compact  Fibonacci 
algorithm  has  been  spread 
throughout  five  different 
functions  operating  on  two  state  variables.  The  complete 
implementation consists of 33 lines of source code (LOC). 
This  means that  the  fault tolerant versions of this program 
consist  mainly  of  code  implementing  the  fault  tolerance 
mechanisms,  and  for  the  AOP  implementations,  of  glue 
code  generated  by  the  weavers.  Since  we  can  test  these 
programs  exhaustively,  we  can  be  sure  to  expose  any 
weaknesses that reside in these parts of the code.. 
The second target program is a real-life application. It is 
a  prototype  brake-by-wire  application  developed  by  Volvo 
Technology. The program consists of an ABS controller and 
a  global  controller  for  wheel  node  synchronization.  The 
software  was  produced  using  Simulink  from  Mathworks, 
Inc.  The  source  code  in  C  was  generated  with  Targetlink 
from dSPACE Gmbh. This is the same target program as is 
used  in  [4]  with  the  exception  that  we  did  not  include  the 
scheduler in this study. It  was excluded in order to reduce 
the size of the program and hence speed up the experiments. 
The  implementation  used  here  has  445  LOC,  5  functions, 
and 40 global variables.   
B.  Fault model and experimental set-up 
The 
faults 
level  hardware 
impact  of  device 
in 
microprocessors varies widely depending on where the fault 
occurs, its failure mechanism, and whether it is a transient, 