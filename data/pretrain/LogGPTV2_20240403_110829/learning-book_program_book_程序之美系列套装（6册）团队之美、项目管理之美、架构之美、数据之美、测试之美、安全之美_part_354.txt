重可测试性
司
整体团队方案
自动化测试
测试之美：
成功
试
考虑依颜美系
考虑波及效应
探索可替代方案
2019
---
## Page 2021
图15-1思维导图
测试之美就美在平淡、安稳。我们自信于每一次冲刺，不会把事情
弄糟。没有人会因此一败涂地。
这是一个成功的故事，我希望能激励读者们能对测试产生出不同的
看法。这不是马后炮或安全网。这是一个坚实的基础一—编写美丽
的代码的基础，一个快乐的并发团队的基础，以及拥有一批快乐的
客户的基础。
整体团队方案
从敏捷开发Scrumm方法的第一个选代周期开始，我们的使命就是尽我
们所能创造出最好的代码，我们非常幸运得到了这样的管理，即长
远收益取决于质量而非速度。我们也致力于其他更高层次的驱动开
发测试，而不仅仅是单位层次的。在受了BrianMarick、Robert"Uncle
Bob"Martin和其他人的观点的激励后，我们要求客户们能给出如对每
个主题（也称为显示并行指令计算或特征集）最需要的行为，并把
这些行为转化为可执行的面向商务的测试，同时也能引导代码。我
们尽量实施100%自动化的回归测试，这样我们就把大量的时间花在
端到端的探索性测试。
除非经过了测试，故事才算完
在早期的选代周期中，我很怕在敏捷开发中听到程序员们这样说：
“我已经完成了某某故事”，但我知道这些代码还未被测试，没有经
过自动化测试，那就并不真正意味着已经完成。在对第一个选代周
期进行总结时，我使提出了这样的观点。我们把“除非经过了测试，
故事才算完”这句话写在了当时算是比较大的故事板上，从那以后，
这便成了我们的一条规则。
由于我们还是一个新的驱动并发测试团队，我们测试前都会写任务
卡片，直到写卡片成为根深蒂固的习惯和每次代码编写任务的一部
分。在我们的脚本上有一栏显示着高层次的测试是否被写入故事
中。高层次验收测试可用在wiki前，代码任务卡片一直没有被移入
“工作进程”。
持续改进
2020
---
## Page 2022
对我们而言最重要的工具就是每个选代开始时的回顾。这是一个解
决测试争论的好契机。像很多团队一样，我们感觉到测试最痛苦的
部分被挤到了选代的结尾部分。测试任务，尤其是自动测试任务，
被延续到了下一次选代。
在我们回顾的基础上，我们提出了一些帮助解决我们这些问题的规
则：
在两周送代中的第四大，所有的高级验收测试都必须以列表或逐点
列出的形式写人wiki。
·团队必须集中精力每次完成一个故事。
一个故事必须在选代的第四天准备好测试工作。
新功能不能在送代的最后一大被录入。
这些规则已经变成了我们工作进程的很自然的一部分。任何时候，
我们发现测试落后于代码了，都会去检查是否是由于我们忽视了我
们的规则，或者我们需要制定新的规则。我们挑战自己，为自已设
定更高的门槛。在我们一开始做持续改进时，我们的目标是在选代
的第12天做出一个稳定的构建。
持续的测试和编码终于使我们达到这样一个振奋人心的目标。
每六个月，我们都会设定一个团队目标。例如，当我们决定测量单
元测试覆盖率时，我们就会设定一个目标，并去挑选工具并找到覆
盖率的基线。到下一个六个月时，我们的目标就变成达到70%的覆
盖率。每个送代周期，我们都会评估我们的进步并且视需要进一步
体验新的想法或方法。
我们的测试覆盖率够好了吗？会有比平时更多的产品支持请求吗？
产品会出现性能问题吗？曾几何时，在任何时候都能发布，而不仅
仅是在选代末期发布，似乎是一个无法完成的梦想。但是现在我们
能按照需要在迭代中期就发布，这样我们就能对任何业务危机作出
紧急回应，也能帮助企业抓住每一个机会。我们会抓住时机尽我们
所能对每一个业务问题提出最好的解决方案。
这远比侵入可怕的代码库进行快速修复要漂亮得多。
2021
---
## Page 2023
交付最大化的商业价值
我们公司的业务模式取决于能及时实施正确的软件。这是一个还未
盈利的小的初创项目。我们的团队必须找到方法使公司在软件上的
投资回报最大化。
一些组织机构转向敏捷开发方法，因为他们认为这样可以更快捷。
敏捷价值和实践可以提供更频繁的业务价值，但前提是从长远着
眼。学习测试驱动并发是一项重大的投资，但具有良好的自动化测
试覆盖率、精心设计的代码，能使团队更迅速地传递特性。
注重可测试性
我们遗留的应用程序不太稳定，容易出问题。因此我们决心要开始
生产高质量的软件。因为我们在2003年年底还没有自动回归测试，
所以我为所有的关键功能的网络应用程序写了手动的测试脚本。整
个团队，包括程序员、数据库管理员、系统管理员和这些敏捷专
家，在每两周的选代周期的最后一两关时执行这些手动测试。这种
活动怎样激励团队成员为实现可测试性而设计代码，并在不同层次
上为自动化回归测试研究出好办法，是非常令人印象深刻的。
我们承诺做不仅仅是单位层次上的测试驱动开发，而且是使用更高
的业务层次的测试去指导代码的编写。为了保证技术债务达到最低
限度，在改变代码后的故障问题得到即时反馈并允许连续重构，我
们打算100%实现回归测试自动化。
自动化测试
经过几周的研究和讨论，团队决定继续我们在分层体系结构中以自
动化测试为前提设计的新代码。由于很多（不代表所有）团队在测
试驱动开发中是新手，我们的程序员发现很难为遗留代码写单元测
试，业务和表示逻辑与数据库访问混在了一起。事实上，做测试驱
动开发在一段时间内是有滩度的。BrianMarick把这个现象引用为
“痛苦的波峰”（见图15-2）。团队对测试驱动开发很精通和熟练
时，不管遗留代码有没有变化，程序员们都可以开始写单元测试
就像在新的架构中编写代码一样简单。
2022
---
## Page 2024
痛苦的波峰
付出
时间
图15-2痛苦的波峰
我的团队与MikeCohn的“测试自动化金字塔"观点（见图15-3）如出
一辙。我们知道我们的投资会回报在单元层次自动化测试上。我们
都渴望做GU背后的大部分的功能自动化测试，而且我们选择用
FitNesse工具来完成这件事。
我们函待解决的问题是这样一个表达方式、业务逻辑和数据库层次
错综复杂的巨大的遗留系统。得到一些自动化回归测试覆盖率最快
的方法就是通过GUI。但是众所周知GUI测试很脆弱文很难维护。我
们必须找到好工具帮助我们达到合理的投资回报率。
2023
---
## Page 2025
手动
测试
GUI
测试
验收测试
（API层）
单元测试/组件测试
图15-3测试自动化金字塔
团队投票选择工具
由于我们整个开发团队担负着质量责任，而且必须确保所有的测试
活动能在每次发布前成功地完成，所以我们团队一起来选择工具。
这样选择不管对开发还是测试框架都是适用的。
下面这个例子讲述了我们团队是怎么决定使用某个工具的。在2004
年初，业务自动化测试框架并不受程序员们的欢迎。他们大多数使
用的是专用的脚本语言。我们是一个Java商店，程序员们不想适用
另一种程序设计语言来工作。JUnit无非是测试驱动开发的不二选
择。所以我们决定用CruiseControl作为持续集成构建过程的工具，而
CruiseControl使用Ant。
我听到过一些关于CanooWebTest的好消息。CanooWebTest是一个测
试框架，以Ant脚本来制定测试。WebTest通过模拟的浏览器而不是
真实的浏览器来驱动测试，但是我们的瘦客户层并没有经历过很多
的浏览器不兼容问题。所以我们喜欢这种方式，即用我们的输出构
建来报告结果。我们团队的每个人都觉得这个方法非常好，所以我
们继续用WebTest作为GUI测试自动化的工具。这已经是我们现在使
用的几个测试自动化框架的其中之一了。
2024
---
## Page 2026
令人惊叹的新工具每星期都层出不穷。如果我们尊敬的业内人士向
我们推荐一种新的工具，并且这新工具能产生出潜在的有价值的新
特性，那么我们一定会抽出时间试用一下。我们经常会挑战现用的
工具，时时关注是否有更好的替代者。如果一种工具没有足够高的
投资回报率，我们就不应该继续试用了。如果一个新工具可以提供
相对于掌握它需要的工作量和花费更多的价值，那我们就应该更换
工具了。我们不会废弃现有的自动化回归测试，但是我们可以在不
同的框架中创造出新工具。每个团队成员都可以质疑正在使用的工
具，也可以提议使用新的工具。是否试用甚至采用这个新的测试工
具是一个团队性质的集团决议。自由的体验和分享意见意味着更好
的测试基础设施，更能体现出测试之美。
团队工具的决策不仅仅只适用于测试框架。缺陷跟踪系统、wiki、
语音应答技术，所有这些决定都是团队集体努力的成果。当我们用
金字塔指导自动化决策时，我们也使用敏捷的原理和价值指导其他
工具的选择。简单地说，反馈的速度和透明度以及支持协作都是我
增量自动化
当你以非自动化并始测试时，那么就意味着达到百分之百回归测试
自动化的目标几乎没有起色。程序员们忙于测试驱动并发时，我开
试。
我向客户们要了一份正常工作的应用程序中关键区域的优先顺序排
列。每一个选代周期，我都会添加一些WebTest脚本。一个队友帮我
配置了构建进程能使测试自动运行。每个迭代，我们都节省了更多
执行手动回归脚本的时间。大约8个月后，我们再也不需要在老代码
上做任何的手动回归测试，而且每个新故事不管是单元层次还是GUI
层次都可以做自动化测试了。这真让我们有了美的感觉。
起初，WebTest脚本跟我们现有的一些单元测试一样都是在持续构建
过程中运行的。当我们有了更多的WebTest和单元测试脚本后，我们
把速度相对比较慢的WebTest脚本移动到了夜间构建。
翻转金字塔
2025
---