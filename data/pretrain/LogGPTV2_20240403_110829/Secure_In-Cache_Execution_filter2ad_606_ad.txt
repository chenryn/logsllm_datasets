even a small part of them could severely harm the system performance. Fortu-
nately, EncExec does not reserve any of the L1 and L2 cache. This is because
each L1 and L2 cache line can cache more physical lines than a L3 cache line
does. For example, Intel Core i7-4790 has 256 KB of L2 cache and 64 KB of L1
cache (instruction + data). Its L2 cache uses the 8-way set-associative algorithm.
Accordingly, the set ﬁeld for the L2 cache is 9 bits ( 256K
64×8 = 512 = 29), and the
tag ﬁeld is 19 bits. Therefore, each L2 cache line caches 219 lines of the phys-
ical memory, most of which are not reserved by EncExec. Therefore, EncExec
does not reserve any of the L1 or L2 cache lines. Nevertheless, it changes access
patterns of the L1 and L2 caches. Some L1 and L2 cache lines may see more
activities and some less.
Thrashing Control: EncExec can protect either the selected sensitive data or
all the data. In the latter case, thrashing could happen if the process’ working
set is larger than the reserved cache. To relieve that, we could reserve more
cache and use processors with a larger L3 cache. For example, the Xeon E5-2670
398
Y. Chen et al.
processor has a 20 MB shared L3 cache with 20-way set-associative. EncExec can
use 40 plaintext pages (or 160 KB) if we reserve 8 KB of the cache space. Recent
Intel CPUs partition the L3 cache among their cores. Speciﬁcally, each core
has its own slice of the CPU’s L3 cache which acts like a N-way set-associative
cache. Physical RAM is assigned (equally) to these slices using an undisclosed
hash algorithm [17–19,29]. This design allows more cache pages to be reserved
by EncExec since cache slices operate mostly independently [29]. Even though
these improvements allow EncExec to support a larger working set, the reserved
cache is still not enough for complex programs. For these programs, the develop-
ers should use EncExec to protect only the sensitive data. Most cryptographic
algorithms have a small working set that ﬁts in EncExec’s reserved cache.
Large Page Sizes: EncExec controls all the physical pages cached by the
reserved cache. For example, our prototype reserves one physical page every
128 pages. This precludes the use of larger pages in the kernel. As previously
mentioned, x86 processors support several page sizes, including 4 KB, 2 MB, and
1 GB. They often have separate TLB (translation look-aside buﬀer) entries for
small pages and large pages. Using large pages can thus reduce the TLB pres-
sure for small pages. The kernel uses 2 MB pages to map its own code and data.
However, EncExec has to reserve 4 small pages from every 2 MB page. A kernel
with EncExec therefore cannot use large pages. In our prototype, we break large
kernel pages into small ones and reclaim the pages we need to reserve. There are
two possible workarounds for the kernel to continue using large pages. First, we
can compile the kernel so that no code or data will be allocated to the reserved
page. The kernel still maps itself with large pages, but none of the reserved pages
are actually accessed at runtime. This leaves a number of unused holes in the
kernel’s address space. As long as these pages are not touched by the kernel, they
will not conﬂict with EncExec. Second, we can restore kernel large pages when
EncExec is not in use. The user may not always need the protection of EncExec.
For example, he may use EncExec when accessing his bank accounts but not
when browsing random Internet sites. This solution will eliminate EncExec’s
idle performance overhead.
In addition, some I/O devices (e.g., graphic cards) may use large continu-
ous blocks of physical address space for memory-mapped I/O (MMIO). MMIO
accesses the device’s (on-board) I/O memory instead of the RAM. Memory-
mapped I/O will not interfere with EncExec because I/O spaces are often con-
ﬁgured to be uncachable in order to correctly interact with I/O devices. Read-
ing/writing I/O memory thus will not cause cache ﬁll or eviction.
Intel SGX: Intel SGX is a powerful and complex extension to Intel CPUs. It
creates a trusted execution environment, called enclave, for trusted apps. The
enclave’s code and data are encrypted in the memory and only decrypted in
the CPU cache. SGX’s TCB (trusted computing base) consists of only the CPU
and the app itself. Therefore, the enclave is protected from cold boot attacks,
bus snooping attacks, and malicious high-privileged code (e.g., the hypervisor).
SGX has many other useful features, such as remote attestation that can ensure
the initial integrity of the trusted app. Compared to SGX, EncExec works on
Secure In-Cache Execution
399
the existing commodity Intel and other CPUs with a similar cache architec-
ture, while SGX is only available in the new Intel CPUs. EncExec is also very
lightweight: accessing the protected data in EncExec is instant and does not
require time-consuming context switches. A context switch in SGX could be
very expensive since it has to ﬂush the TLB and perform various checks [5].
EncExec can also support unmodiﬁed programs. Moreover, the design of SGX
is vulnerable to cache-based side-channel attacks [8]. By protecting data in the
reserved cache, EncExec can provide some (limited) protection against cache
side-channel attacks targeting that data, even though the side-channel defense
is not the focus of this paper.
6 Related Work
Cold Boot Attacks and Defenses: the ﬁrst category of related work con-
sists of cold boot attacks and defenses. A cold boot attack exploits the fact that
frozen DRAM keeps its contents for a relatively long period of time. It has been
demonstrated against both desktop computers [14,27] and mobile phones [23,28].
A cold boot attack can be launched by either transplanting the frozen memory
to a machine controlled by the attacker or booting a small kernel to dump
the memory. Most existing defenses focus on re-purposing hardware storage to
protect (small) cryptographic keys [10,21,22,26] or execute cryptographic algo-
rithms [12] on the chip. For example, AESSE [21], TRESOR [22], LoopAmne-
sia [26], and ARMORED [10] protect an AES key in the SSE registers, debug
registers, performance counters, and NEON registers, respectively. These “bor-
rowed” registers naturally can only support compact cryptographic algorithms,
but they do not have enough space for algorithms like RSA that have larger
memory footprints. Compared to this line of work, EncExec can support all
these algorithms.
Copker uses the cache-as-RAM technology [9] to run cryptographic algo-
rithms in the cache. It can also support more complex algorithms such as RSA.
However, Copker has very high context switch overheads – it has to force the
calling CPU core, as well as any cores that share a cache with it, to enter the
no-ﬁll mode of caches. This poses a severe limit on the number of concurrent
processes that can use Copker. For example, it can only support one process at
a time on the Intel Core i7 CPU used in our prototype because the L3 cache is
shared by all the cores. Most recent and near-future Intel CPUs all have a similar
cache architecture. EncExec does not have these limitations. For example, it can
support multiple concurrent processes and has a close to native performance if
used properly. Mimosa uses hardware transactional memory to protect private
(RSA) keys from memory disclosure [13]. EncExec also supports large RSA keys
and can transparently protect the whole data sections. Both EncExec Mimosa
require changes to the OS kernel although EncExec’s changes are more inva-
sive. On the other hand, Mimosa requires special hardware support (hardware
transactional memory); thus it is not applicable to other architectures.
400
Y. Chen et al.
CaSE combines the cache-as-ram technology and ARM TrustZone to create
a system that can protect the data from both cold-boot attacks and the com-
promised operating system [30]. The ﬂexible cache control of the ARM platform
allows CaSE to have lower performance overhead than Copker but similar to
EncExec. EncExec instead works on the x86 architecture that lacks ﬁnd-grained
cache control. A recent system called RamCrypt [11] uses moving-window based
encryption to protect the process data, similar to our second technique. As men-
tioned before, this technique alone is potentially susceptible to cold boot attacks
because the recently-used unencrypted (sensitive) data can be evicted to the
memory and become vulnerable to cold boot attacks.
Other Related Work: EncExec can protect the whole process data from cold
boot attacks. Overshadow uses the hypervisor-assisted whole process encryption
to protect an application from the untrusted OS kernel [6]. PrivateCore vCage
is a virtual machine monitor that implements full-memory encryption for guest
VMs by actively managing the whole L3 cache [3]. EncExec focuses on protecting
applications. It reserves a small portion of the L3 cache and relies on demand
paging to support larger protected data. XnR leverages demand paging to pre-
vent an attacker from reading the randomized code [4]. RamCrypt similarly uses
that technology to protect the process data from cold boot attacks [11]. HIveS
manipulates the CPU’s physical memory layout to hide malware in the I/O
memory address space to avoid detection by memory forensic tools [31].
7 Summary
We have presented the design, implementation, and evaluation of EncExec, a
practical and eﬀective defense against cold boot attacks. EncExec has two key
techniques: spatial cache reservation reserves a small block of the L3 cache, and
secure in-cache execution uses demand paging to protect sensitive process data.
Under the protection of EncExec, the sensitive data are always encrypted in the
memory, and the plaintext data are conﬁned to the reserved cache. Consequently,
cold boot attacks can only obtain the encrypted data. The evaluation results
demonstrate the eﬀectiveness and practicality of EncExec.
Acknowledgments. We would like to thank the anonymous reviewers for their insight-
ful comments that helped improve the presentation of this paper. This work was sup-
ported in part by the US National Science Foundation (NSF) under Grant 1453020. Any
opinions, ﬁndings, and conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views of the NSF.
References
1. FreeBSD. https://www.freebsd.org
2. SSL Library mbed TLS/PolarSSL. https://tls.mbed.org
3. Trustworthy Cloud Computing with vCage. https://privatecore.com/vcage/
Secure In-Cache Execution
401
4. Backes, M., Holz, T., Kollenda, B., Koppe, P., N¨urnberger, S., Pewny, J.: You can
run but you can’t read: preventing disclosure exploits in executable code. In: Pro-
ceedings of the 2014 ACM SIGSAC Conference on Computer and Communications
Security (CCS 2014) (2014)
5. Baumann, A., Peinado, M., Hunt, G.: Shielding applications from an untrusted
cloud with haven. ACM Trans. Comput. Syst. 33(3), 8 (2015)
6. Chen, X., Garﬁnkel, T., Lewis, E.C., Subrahmanyam, P., Waldspurger, C.A.,
Boneh, D., Dwoskin, J., Ports, D.R.: Overshadow: a virtualization-based approach
to retroﬁtting protection in commodity operating systems. In: Proceedings of the
13th International Conference on Architectural Support for Programming Lan-
guages and Operating Systems (ASPLOS XIII) (2008)
7. Chow, J., Pfaﬀ, B., Garﬁnkel, T., Christopher, K., Rosenblum, M.: Understanding
data lifetime via whole system simulation. In: Proceedings of the 13th Conference
on USENIX Security Symposium (SSYM 2004), vol. 13 (2004)
8. Costan, V., Devadas, S.: Intel SGX explained. https://eprint.iacr.org/2016/086.
pdf
9. Nallusamy, E.: A framework for using processor cache as RAM (CAR). http://
www.coreboot.org/images/6/6c/LBCar.pdf
10. G¨otzfried, J., M¨uller, T.: ARMORED: CPU-bound encryption for android-driven
ARM devices. In: Proceedings of 8th International Conference on Availability,
Reliability and Security, Regensburg (2013)
11. G¨otzfried, J., M¨uller, T., Drescher, G., N¨urnberger, S., Backes, M.: RamCrypt:
kernel-based address space encryption for user-mode processes. In: Proceedings
of the 11th ACM Symposium on Information, Computer and Communications
Security (ASIA CCS 2016). ACM (2016)
12. Guan, L., Lin, J., Jing, B.L.: Copker: computing with private keys without RAM.
In: Proceedings of the 21th Network and Distributed System Security Symposium
(NDSS 2014) (2014)
13. Guan, L., Lin, J., Luo, B., Jing, J., Wang, J.: Protecting private keys against
memory disclosure attacks using hardware transactional memory. In: Proceedings
of the 2015 IEEE Symposium on Security and Privacy (SP 2015), pp. 3–19. IEEE
Computer Society, Washington, DC (2015)
14. Halderman, J.A., Schoen, S.D., Heninger, N., Clarkson, W., Paul, W., Calandrino,
J.A., Feldman, A.J., Appelbaum, J., Felten, E.W., Remember, L.W.: Cold-boot
attacks on encryption keys. In: Proceedings of the 17th USENIX Conference on
Security, San Jose (2008)
15. Hennessy, J.L., Patterson, D.A.: Computer Architecture: A Quantitative App-
roach. Morgan Kaufmann, San Francisco (2012)
16. Intel: Intel 64 and IA-32 Architectures Software Developer´s Manual, February 2014
17. Irazoqui, G., Eisenbarth, T., Sunar, B.: S $ A: a shared cache attack that works
across cores and deﬁes VM sandboxing-and its application to AES. In: Proceedings
of the 36th IEEE Symposium on Security and Privacy, pp. 591–604. IEEE (2015)
18. Liu, F., Yarom, Y., Ge, Q., Heiser, G., Lee, R.B.: Last-level cache side-channel
attacks are practical. In: Proceedings of the 36th IEEE Symposium on Security
and Privacy, pp. 605–622 (2015)
19. Maurice, C., Scouarnec, N., Neumann, C., Heen, O., Francillon, A.: Reverse engi-
neering intel last-level cache complex addressing using performance counters. In:
Bos, H., Monrose, F., Blanc, G. (eds.) RAID 2015. LNCS, vol. 9404, pp. 48–65.
Springer, Cham (2015). doi:10.1007/978-3-319-26362-5 3
402
Y. Chen et al.
20. McKusick, M.K., Neville-Neil, G.V., Watson, R.N.: The Design and Implemen-
tation of the FreeBSD Operating System. Addison-Wesley Professional, London
(2014)
21. M¨uller, T., Dewald, A., Freiling, F.C.: AESSE: a cold-boot resistant implementa-
tion of AES. In: Proceedings of the Third European Workshop on System Security,
Paris (2010)
22. M¨uller, T., Freiling, F.C., Dewald, A.: TRESO: runs encryption securely outside
RAM. In: Proceedings of the 20th USENIX Conference on Security, San Francisco
(2011)
23. M¨uller, T., Spreitzenbarth, M.: FROST: forensic recovery of scrambled telephones.
In: Proceedings of the 11th International Conference on Applied Cryptography and
Network Security, Banﬀ (2013)
24. Onarlioglu, K., Mulliner, C., Robertson, W., Kirda, E.: PrivExec: private execution
as an operating system service. In: Proceedings of the 2013 IEEE Symposium on
Security and Privacy (SP 2013). IEEE Computer Society, Washington, DC (2013)
25. Silberschatz, A., Galvin, P.B., Gagne, G.: Operating System Concepts. Wiley, Har-
low (2012)
26. Simmons, P., Amnesia, S.T.: A software-based solution to the cold boot attack on
disk encryption. In: Proceedings of the 27th Annual Computer Security Applica-
tions Conference, Orlando (2011)
27. Lest We Remember: Cold-boot attacks on encryption keys. https://citp.princeton.
edu/research/memory/
28. FROST: Forensic Recovery Of Scrambled Telephones. http://www1.informatik.
uni-erlangen.de/frost
29. Yarom, Y., Ge, Q., Liu, F., Lee, R.B., Heiser, G.: Mapping the Intel last-level
cache. https://eprint.iacr.org/2015/905.pdf
30. Zhang, N., Sun, K., Lou, W., Hou, Y.T.: CaSE: cache-assisted secure execution on
ARM processors. In: Proceedings of the 2016 IEEE Symposium on Security and
Privacy (SP 2016) (2016)
31. Zhang, N., Sun, K., Lou, W., Hou, Y.T., Jajodia, S.: Now you see me: hide and
seek in physical address space. In: Proceedings of the 10th ACM Symposium on
Information, Computer and Communications Security, ASIA (CCS 2015). ACM
(2015)