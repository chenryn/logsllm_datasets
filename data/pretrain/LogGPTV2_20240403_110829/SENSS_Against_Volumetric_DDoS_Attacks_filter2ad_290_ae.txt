Zenedge
7
20
38
1
1
41
12
374
69
14
185
187
199
130
0
3.2
2.8
3.5
3
4
Table 4: Providers and peers of select clouds, which we use in
our evaluation.
4.4 Comparison of SENSS and Cloud Defenses
In this section we compare SENSS’s performance to that of clouds,
with regard to bandwidth saved during an attack. We assume the
same kind of filtering deployed by SENSS and clouds, to isolate
the effect of deployment points. This evaluation shows that on-path
deployment is superior to the case when traffic is diverted to a cloud.
We first calculate the amount of bandwidth consumed by attack
traffic on inter-AS links, as follows. For each of our effectiveness
scenarios (Section 4.3) whenever an attack flow crosses an inter-AS
link we add its volume to the total consumption. We assume a perfect
defense, which drops all attack traffic when it reaches the defense.
The difference between bandwidth consumption without and with
defense becomes the saved bandwidth. We report it as percentage
of the attack bandwidth when there is no defense. An ideal defense
would save close to 100% of the bandwidth because it would be
deployed close to the sources.
We select five clouds to compare to, which currently offer DDoS
defense – CloudFlare, Google, Akamai, Incapsula and Zenedge.
While we do not know their peering agreements, we can easily
find out their AS ownership from public records. We then obtain
peering for those ASes from the CAIDA’s AS-level topology. When
a cloud owns multiple ASes, we assume that all such ASes deploy
the defense. Table 4 shows the number of ASes each cloud owns
in our topology, number of providers and peers in our AS topology,
and the average AS path length from all other ASes to the cloud.
Figure 6(a) shows the saved bandwidth under top SENSS deploy-
ment (median shown with line and 25% and 75% with errorbars),
and Figure 6(b) shows it under random SENSS deployment, for flood
w sig attack. In both Figures we also show with colored horizontal
bars 25% and 75% of bandwidth consumption when the victim is
defended by clouds, and the lines show the median of the same mea-
sure. Intuitively, bandwidth savings will be largest when attack is
filtered close to its sources. There are significant differences among
cloud defenses – ranging from 13% bandwidth saved by Zenedge to
38–46% by Google. These differences occur because some clouds
have long AS paths (e.g., Zenedge), i.e., they are far from sources,
while others (e,g,. Google) have short paths. SENSS outperforms all
clouds after 0.4% of top transit ASes (52 ASes, on par with Google’s
and Akamai’s AS count) or after 15% of random transit ASes deploy
SENSS. This is because SENSS’s on-path defense stops the attack
closer to its sources, than when attack traffic must be diverted to
clouds.
4.5 Delay, Traffic and Message Cost
All communication between a SENSS client and a SENSS server
occurs in one session, over SSL. It takes two round-trip times for
SSL establishment. After this, the client would send a query and
wait for a reply. Finally it may send a control message to the server
to mitigate attacks. Each of the four attack types we studied require
1–3 messages per SENSS ISP for mitigation.
The client can strike the balance between achieving a fast response
(ask all SENSS servers for help) and saving money (ask servers one
by one). The client can first communicate with Tier-1 and Tier-2
ASes simultaneously, and then switch to iterative communications.
This yields on the average 10-second delay, and 300–400 messages
for full mitigation.
When using SENSS to mitigate floods w/o sig, the victim must
periodically issue traffic queries to learn legitimate traffic distribu-
tion, and identify links that carry a lot of legitimate traffic. During
attacks the SENSS client uses its most recent observation to esti-
mate collateral damage for a given filter deployment. More frequent
queries increase message cost but may reduce collateral damage if
traffic fluctuates a lot. We investigated the impact of query period on
collateral damage, by replacing legitimate traffic in our effectiveness
experiments by traffic volumes and destinations obtained from 24
hours of traffic logs from a large US CDN. We calculated traffic
volumes per each minute in the logs and used earlier observations
to make SENSS decisions about filter locations, then used later ob-
servations to estimate collateral damage. We summarize results of
this experiment: (1) observation periods of up to 12 h only slightly
increase collateral damage over the ideal case, when we observe
immediately prior to attack, (2) filtering at large ASes has higher
fluctuation of collateral damage, due to higher traffic aggregation,
than filtering at smaller ASes.
4.6 Scalability within an ISP
SENSS functionalities in switches are implemented on the fast path,
and incur no per-packet overhead. Further, each SENSS request
results in one rule per switch. In our emulation experiments it took
only 0.15 sec to handle a single traffic_query and 0.26 sec to handle
a route demote. This includes the propagation delay between the
victim and the SENSS server (0.05 sec), RPKI validation (0.02 sec),
and SENSS processing of the query (0.03 sec). When handling 100
concurrent requests, it took 4.32 s to fully serve traffic_queries, and
24.95 s to serve route_queries followed by demote messages. The
delay mostly comes from the concurrent telnet requests to switches,
and can be further reduced if we parallelize this communication.
In Figure 7 we illustrate one experiment when flood w/o sig attack
is handled by SENSS. The SENSS client at the victim uses our client
program from Section 3.4 for handling floods w/o sig. This includes
two types of SENSS messages: a traffic_query and a filter. The attack
is fully handled within 7 seconds.
5 CONCLUSION
Volumetric DDoS attacks cannot be handled by the victim, because
they usually create congestion upstream from the victim. We have
proposed SENSS – a framework for collaborative diagnosis and
mitigation of volumetric attacks. SENSS’s simple but powerful inter-
faces enable victim-customized solutions to several DDoS variants.
SENSS mitigates attacks instead of withstanding them. SENSS is
implementable in today’s ISPs with SDN, it is very effective in
sparse deployment, much faster than manual inter-AS collaboration,
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Sivaramakrishnan, Jelena Mirkovic, Minlan Yu, and Ying Zhang
[12] John Ioannidis and Steven M. Bellovin. 2002. Implementing Pushback: Router-
Based Defense Against DDoS Attacks. In Proceedings of the Network and Distri-
buted System Security Symposium, NDSS 2002, San Diego, California, USA.
[13] Michael G. Kallitsis, Stilian Stoev, Shrijita Bhattacharya, and George Michailidis.
2015. AMON: An Open Source Architecture for Online Monitoring, Statistical
Analysis and Forensics of Multi-gigabit Streams. CoRR abs/1509.00268 (2015).
[14] Min Suk Kang, Virgil D. Gligor, and Vyas Sekar. 2016. Defending Against
Evolving DDoS Attacks: A Case Study Using Link Flooding Incidents. In Security
Protocols Workshop (Lecture Notes in Computer Science), Vol. 10368. Springer,
47–57.
[15] Min Suk Kang, Virgil D. Gligor, and Vyas Sekar. 2016. SPIFFY: Inducing Cost-
Detectability Tradeoffs for Persistent Link-Flooding Attacks. In 23rd Annual
Network and Distributed System Security Symposium, NDSS 2016, San Diego,
California, USA, February 21-24, 2016.
[16] M. S. Kang, S. B. Lee, and V. D. Gligor. 2013. The Crossfire Attack. In 2013
IEEE Symposium on Security and Privacy. 127–141.
[17] Yoohwan Kim, Wing Cheong Lau, Mooi Choo Chuah, and H. J. Chao. 2006.
PacketScore: a statistics-based packet filtering scheme against distributed denial-
of-service attacks. IEEE Transactions on Dependable and Secure Computing 3, 2
(April 2006), 141–155.
[18] S. Knight, H. X. Nguyen, N. Falkner, R. Bowden, and M. Roughan. 2011. The
Internet Topology Zoo. IEEE Journal on Selected Areas in Communications 29, 9
(October 2011), 1765–1775.
[19] Soo Bum Lee, Min Suk Kang, and Virgil D. Gligor. 2013. CoDef: Collabora-
tive Defense Against Large-scale Link-flooding Attacks. In Proceedings of the
Ninth ACM Conference on Emerging Networking Experiments and Technologies
(CoNEXT ’13). ACM, New York, NY, USA, 417–428. http://doi.acm.org/10.
1145/2535372.2535398
[20] Xin Liu, Xiaowei Yang, and Yanbin Lu. 2008. To Filter or to Authorize: Network-
layer DoS Defense Against Multimillion-node Botnets. In Proceedings of the ACM
SIGCOMM 2008 Conference on Data Communication (SIGCOMM ’08). ACM,
New York, NY, USA, 195–206. http://doi.acm.org/10.1145/1402958.1402981
[21] MANRS. 2018. MANRS for Network Operators. https://www.manrs.org/manrs/.
[22] P Marques, N Sheth, R Raszuk, B Greene, J Mauch, and D McPherson. 2009.
Dissemination of Flow Specification Rules. RFC 5575.
[23] Andrew Mortensen, Flemming Andreasen, Tirumaleswar Reddy, Christopher
Gray, Rich Compton, and Nik Teague. 2018. Distributed-Denial-of-Service
Open Threat Signaling (DOTS) Architecture.
Internet-Draft draft-ietf-dots-
architecture-07. Internet Engineering Task Force.
https://datatracker.ietf.org/
doc/html/draft-ietf-dots-architecture-07 Work in Progress.
[24] 360.com NetLab. 2017. A quick stats on the 608,083 Mirai IPs that hit our
honeypots in the past 2.5 months. https://goo.gl/NYWMLq.
[25] Arbor Networks. 2018. DDoS Protection by Arbor Networks APS. https://www.
arbornetworks.com/ddos-protection-products/arbor-aps.
[26] George Oikonomou, Jelena Mirkovic, Peter Reiher, and Max Robinson. 2006. A
Framework for a Collaborative DDoS Defense. In ACSAC ’06: Proceedings of
the 22nd Annual Computer Security Applications Conference. IEEE Computer
Society, 33–42.
[27] Vern Paxson. 1999. Bro: A System for Detecting Network Intruders in Real-time.
Comput. Netw. 31, 23-24 (December 1999), 2435–2463. http://dx.doi.org/10.
1016/S1389-1286(99)00112-7
[28] Adrian Perrig, Pawel Szalachowski, Raphael M. Reischuk, and Laurent Chuat.
2017. The SCION Architecture. Springer International Publishing, Cham. 17–42
pages. https://doi.org/10.1007/978-3-319-67080-5_2
[29] Steve Ranger. 2018. GitHub hit with the largest DDoS attack ever seen. ZD-
Net,https://goo.gl/BmqekG.
[30] Matthew Roughan. 2005. Simplifying the Synthesis of Internet Traffic Matrices.
SIGCOMM Comput. Commun. Rev. 35, 5 (October 2005), 93–96. https://doi.org/
10.1145/1096536.1096551
[31] The New York Times. 2013.
How the Cyberattack on Spamhaus Un-
http://www.nytimes.com/interactive/2013/03/30/technology/
folded.
how-the-cyberattack-on-spamhaus-unfolded.html.
[32] D. Turk. 2004. Configuring BGP to Block Denial-of-Service Attacks. RFC 3882.
RFC Editor.
[33] Michael Walfish, Mythili Vutukuru, Hari Balakrishnan, David Karger, and Scott
Shenker. 2010. DDoS Defense by Offense. ACM Trans. Comput. Syst. 28, 1,
Article 3, 54 pages. http://doi.acm.org/10.1145/1731060.1731063
[34] X. Yang, D. Wetherall, and T. Anderson. 2008. TVA: A DoS-Limiting Network
Architecture. IEEE/ACM Transactions on Networking 16, 6 (Dec 2008), 1267–
1280.
[35] Kyle York. 2016. Dyn Statement on 10/21/2016 DDoS Attack. https://dyn.com/
blog/dyn-statement-on-10212016-ddos-attack/.
[36] Zenedge. 2018. Zenedge Web page. https://www.zenedge.com/.
Figure 7: SENSS client using our client program to mitigate floods w/o
signature attack.
and has small message overhead. We hope that these good features
will encourage its wide adoption.
6 ACKNOWLEDGEMENT
This project is the result of funding provided by the Science and
Technology Directorate of the United States Department of Home-
land Security under contract number D15PC00184. The views and
conclusions contained herein are those of the authors, and should
not be interpreted necessarily representing the official policies or
endorsements, either expressed or implied, of the Department of
Homeland Security or the US Government. Authors are grateful to
anonymous reviewers for their helpful comments.
REFERENCES
[1] Katerina Argyraki and David R. Cheriton. 2005. Active Internet Traffic Filtering:
Real-time Response to Denial-of-service Attacks. In Proceedings of the Annual
Conference on USENIX Annual Technical Conference (ATEC ’05). USENIX
Association, Berkeley, CA, USA, 10–10.
http://dl.acm.org/citation.cfm?id=
1247360.1247370
[2] R. Bajcsy, T. Benzel, M. Bishop, B. Braden, C. Brodley, S. Fahmy, S. Floyd,
W. Hardaker, A. Joseph, G. Kesidis, K. Levitt, B. Lindell, P. Liu, D. Miller,
R. Mundy, C. Neuman, R. Ostrenga, V. Paxson, P. Porras, C. Rosenberg, J. D.
Tygar, S. Sastry, D. Sterne, and S. F. Wu. 2004. Cyber Defense Technology
Networking and Evaluation. Commun. ACM 47, 3 (March 2004), 58–61. http:
//doi.acm.org/10.1145/971617.971646
[3] Sean Bakley. 2017. From Comcast to Hawaiian Telcom: Tracking the top 16
residential broadband service providers in Q3 2017. FierceTelecom, https://goo.
gl/otRTw2.
[4] Cristina Basescu, Raphael M. Reischuk, Pawel Szalachowski, Adrian Perrig, Yao
Zhang, Hsu-Chun Hsiao, Ayumu Kubota, and Jumpei Urakawa. 2015. SIBRA:
Scalable Internet Bandwidth Reservation Architecture. CoRR abs/1510.02696
(2015).
[5] CAIDA. 2017. The CAIDA AS Relationships Dataset, May 01, 2017. http:
//www.caida.org/data/as-relationships/.
[6] CloudFlare. 2018. CloudFlare Web page. https://www.cloudflare.com/.
[7] Tim Dierks and Eric Rescorla. 2008. Rfc 5246: The transport layer security (tls)
protocol. The Internet Engineering Task Force 3 (2008).
[8] Seyed K. Fayaz, Yoshiaki Tobioka, Vyas Sekar, and Michael Bailey. 2015. Bo-
hatei: Flexible and Elastic DDoS Defense. In 24th USENIX Security Symposium
(USENIX Security 15). USENIX Association, Washington, D.C., 817–832.
[9] Lixin Gao. 2001. On inferring autonomous system relationships in the Internet.
IEEE/ACM Transactions on Networking 9, 6, 733–745.
[10] Michael T. Goodrich. 2008. Probabilistic Packet Marking for Large-scale IP
Traceback. IEEE/ACM Transaction on Networking 16, 1 (February 2008), 15–24.
https://doi.org/10.1109/TNET.2007.910594
[11] MAWI group. 2017. MAWI Working Group Traffic Archive. http://mawi.wide.ad.
jp/mawi/.
 0 200 400 600 800 1000 12005101520253035Speed in MbpsTime in SecondsLegitimate Traﬃc MeasuredAttack Traﬃc Measured