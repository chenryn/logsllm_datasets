# Zenedge and Cloud Defenses Evaluation

## Table 4: Providers and Peers of Selected Clouds
| Cloud Provider | Number of ASes | Number of Providers | Number of Peers | Average AS Path Length |
|----------------|----------------|---------------------|-----------------|------------------------|
| Zenedge        | 7              | 20                  | 38              | 1                      |
| CloudFlare     | 1              | 41                  | 12              | 374                    |
| Google         | 69             | 14                  | 185             | 187                    |
| Akamai         | 199            | 130                 | 0               | 3.2                    |
| Incapsula      | 2.8            | 3.5                 | 3               | 4                      |

## 4.4 Comparison of SENSS and Cloud Defenses
In this section, we compare the performance of SENSS with that of cloud-based defenses in terms of bandwidth savings during an attack. We assume the same filtering mechanisms are used by both SENSS and the clouds to isolate the effect of deployment points. Our evaluation demonstrates that on-path deployment (as in SENSS) is more effective than diverting traffic to a cloud.

### Bandwidth Consumption Calculation
We calculate the bandwidth consumed by attack traffic on inter-AS links as follows:
- For each effectiveness scenario (Section 4.3), we add the volume of attack traffic crossing an inter-AS link to the total consumption.
- We assume a perfect defense that drops all attack traffic upon reaching the defense point.
- The difference between the bandwidth consumption without and with the defense represents the saved bandwidth, which we report as a percentage of the attack bandwidth when there is no defense. An ideal defense would save close to 100% of the bandwidth if deployed near the sources.

### Cloud Providers and AS Ownership
We selected five cloud providers offering DDoS defense: CloudFlare, Google, Akamai, Incapsula, and Zenedge. While their peering agreements are not public, we can determine their AS ownership from public records. We then use CAIDA’s AS-level topology to obtain peering information for these ASes. If a cloud owns multiple ASes, we assume all such ASes deploy the defense.

### Results
- **Figure 6(a)**: Shows the saved bandwidth under top SENSS deployment (median with line, 25% and 75% with error bars).
- **Figure 6(b)**: Shows the saved bandwidth under random SENSS deployment for flood attacks without signatures.
- In both figures, colored horizontal bars represent 25% and 75% of bandwidth consumption when the victim is defended by clouds, and lines show the median.

**Key Findings:**
- Bandwidth savings are highest when the attack is filtered close to its sources.
- There are significant differences among cloud defenses, ranging from 13% saved by Zenedge to 38-46% by Google.
- These differences arise because some clouds have long AS paths (e.g., Zenedge), while others (e.g., Google) have short paths.
- SENSS outperforms all clouds after 0.4% of top transit ASes (52 ASes, comparable to Google’s and Akamai’s AS count) or after 15% of random transit ASes deploy SENSS. This is due to SENSS's on-path defense, which stops attacks closer to their sources compared to diverting traffic to clouds.

## 4.5 Delay, Traffic, and Message Cost
All communication between a SENSS client and a SENSS server occurs in one session over SSL. It takes two round-trip times for SSL establishment. Afterward, the client sends a query and waits for a reply. Finally, it may send a control message to the server to mitigate attacks. Each of the four attack types we studied requires 1-3 messages per SENSS ISP for mitigation.

### Balancing Response Time and Cost
- The client can balance fast response (asking all SENSS servers for help) and cost (asking servers one by one).
- Initially, the client can communicate with Tier-1 and Tier-2 ASes simultaneously, then switch to iterative communications.
- On average, this yields a 10-second delay and 300-400 messages for full mitigation.

### Query Period and Collateral Damage
- For floods without signatures, the victim must periodically issue traffic queries to learn legitimate traffic distribution and identify high-traffic links.
- More frequent queries increase message cost but may reduce collateral damage if traffic fluctuates significantly.
- We investigated the impact of query periods on collateral damage using 24 hours of traffic logs from a large US CDN. Key findings:
  - Observation periods up to 12 hours only slightly increase collateral damage over the ideal case.
  - Filtering at large ASes has higher fluctuations in collateral damage due to higher traffic aggregation compared to smaller ASes.

## 4.6 Scalability within an ISP
SENSS functionalities in switches are implemented on the fast path, incurring no per-packet overhead. Each SENSS request results in one rule per switch. In our emulation experiments:
- Handling a single `traffic_query` took 0.15 seconds.
- Handling a `route demote` took 0.26 seconds.
- This includes propagation delay (0.05 sec), RPKI validation (0.02 sec), and SENSS processing (0.03 sec).

### Concurrency
- Handling 100 concurrent requests took 4.32 seconds for `traffic_queries` and 24.95 seconds for `route_queries` followed by demote messages.
- Delays are mainly due to concurrent telnet requests to switches and can be reduced with parallel communication.

### Example Experiment
- **Figure 7**: Illustrates an experiment where a flood without signature attack is handled by SENSS.
- The SENSS client at the victim uses our client program from Section 3.4.
- The attack is fully mitigated within 7 seconds.

## 5 Conclusion
Volumetric DDoS attacks cannot be effectively handled by the victim alone, as they typically cause congestion upstream. We propose SENSS, a framework for collaborative diagnosis and mitigation of volumetric attacks. SENSS's simple yet powerful interfaces enable customized solutions for various DDoS variants. SENSS mitigates attacks rather than withstanding them, is implementable in today’s ISPs with SDN, and is highly effective even in sparse deployment. It is much faster than manual inter-AS collaboration.

## 6 Acknowledgement
This project was funded by the Science and Technology Directorate of the United States Department of Homeland Security under contract number D15PC00184. The views and conclusions herein are those of the authors and do not necessarily represent the official policies or endorsements of the Department of Homeland Security or the US Government. We are grateful to anonymous reviewers for their helpful comments.

## References
[References listed here as provided in the original text]