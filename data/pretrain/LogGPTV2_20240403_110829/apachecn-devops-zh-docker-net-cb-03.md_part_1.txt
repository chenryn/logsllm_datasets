# 三、用户定义的网络
在本章中，我们将介绍以下食谱:
*   查看 Docker 网络配置
*   创建用户定义的网络
*   将容器连接到网络
*   定义用户定义的桥接网络
*   创建用户定义的覆盖网络
*   隔离网络
# 简介
Docker 的早期版本依赖于一个主要是静态的网络模型，这种模型对于大多数容器网络需求来说运行得相对较好。然而，如果你想做一些不同的事情，你没有太多的选择。例如，您可以告诉 Docker 将容器部署到不同的桥上，但是在 Docker 和网络之间没有强大的集成点。随着 Docker 1.9 中引入用户定义的网络，游戏发生了变化。您现在可以直接通过 Docker 引擎创建和管理网桥和多主机网络。此外，还为第三方网络插件通过 libnetwork 及其**容器网络模型** ( **CNM** )模型与 Docker 集成打开了大门。
### 注
CNM 是 Docker 定义容器网络模型的模型。在[第 7 章](07.html "Chapter 7. Working with Weave Net")、*与 Weave Net* 合作中，我们将考察一个可以集成为 Docker 驱动程序的第三方插件(Weave)。本章的重点将是 Docker 引擎固有的默认网络驱动程序。
转向基于驱动程序的模式象征着 Docker 网络的巨大变化。除了定义新的网络，您现在还能够动态地连接和断开容器接口。这种固有的灵活性为连接容器打开了许多新的可能性。
# 查看 Docker 网络配置
如上所述，现在可以通过 Docker 直接定义和管理网络，并添加`network`子命令。`network`命令为您提供了构建网络和将容器连接到网络所需的所有选项:
```
user@docker1:~$ docker network --help
docker network --help
Usage:  docker network COMMAND
Manage Docker networks
Options:
      --help   Print usage
Commands:
  connect     Connect a container to a network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or more networks
  ls          List networks
  rm          Remove one or more networks
Run 'docker network COMMAND --help' for more information on a command.
user@docker1:~$
```
在这个食谱中，我们将学习如何查看已定义的 Docker 网络，以及检查它们的具体细节。
## 做好准备
`docker network`子命令是在 Docker 1.9 中引入的，所以你需要一个 Docker 主机至少运行那个版本。在我们的例子中，我们将使用 Docker 版本。您还需要对当前的网络布局有一个很好的了解，以便我们检查当前的配置时，您可以跟着做。假设每个 Docker 主机都处于其本机配置。
## 怎么做…
我们要做的第一件事是找出 Docker 认为已经定义的网络。这可以使用`network ls`子命令来完成:
```
user@docker1:~$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
200d5292d5db        bridge              bridge              local
12e399864b79        host                host                local
cb6922b8b84f        none                null                local
user@docker1:~$
```
正如我们所见，Docker 显示我们已经定义了三个不同的网络。要查看有关网络的更多信息，我们可以使用`network inspect`子命令检索有关网络定义及其当前状态的详细信息。让我们仔细看看每个定义的网络。
### 桥梁
桥网络表示 Docker 引擎默认创建的`docker0`桥:
```
user@docker1:~$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "62fcda0787f2be01e65992e2a5a636f095970ea83c59fdf0980da3f3f555c24e",
        "Scope": "local",
 "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
 "Subnet": "172.17.0.0/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {},
        "Options": {
 "com.docker.network.bridge.default_bridge": "true",
 "com.docker.network.bridge.enable_icc": "true",
 "com.docker.network.bridge.enable_ip_masquerade": "true",
 "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
 "com.docker.network.bridge.name": "docker0",
 "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]
user@docker1:~$  
```
`inspect`命令的输出向我们展示了关于已定义网络的大量信息:
*   `Driver`:在这种情况下，我们可以看到网桥实现了`Driver`桥。虽然这看起来很明显，但重要的是要指出，所有网络功能，包括本机功能，都是通过驱动程序实现的。
*   `Subnet`:在这种情况下，`subnet`是我们期望从`docker0`桥，`172.17.0.1/16`得到的默认值。
*   `bridge.default_bridge`:值`true`表示 Docker 将向该桥提供所有容器，除非另有说明。也就是说，如果您在没有指定网络(`--net`)的情况下启动一个容器，该容器将在此桥上结束。
*   `bridge.host_binding_ipv4`:默认设置为`0.0.0.0`或所有接口。正如我们在[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*中看到的，我们可以通过将`--ip`标志作为 Docker 选项传递给服务来告诉服务级别的 Docker 限制这一点。
*   `bridge.name`:如我们所料，这个网络代表了`docker0`桥。
*   `driver.mtu`:默认设置为`1500`。正如我们在[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*中所看到的，我们可以通过将`--mtu`标志作为 Docker 选项传递给服务，在服务级别告诉 Docker 更改 **MTU** ( **最大传输单元**)。
### 无
`none`网络只代表它所说的，没有任何东西。当您希望定义一个绝对没有网络定义的容器时，使用`none`模式。检查网络后，我们可以看到，就网络定义而言，没有太多内容:
```
user@docker1:~$ docker network inspect none
[
    {
        "Name": "none",
        "Id": "a191c26b7dad643ca77fe6548c2480b1644a86dcc95cde0c09c6033d4eaff7f2",
        "Scope": "local",
        "Driver": "null",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": []
        },
        "Internal": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]
user@docker1:~$
```
如你所见，`Driver`由`null`代表，暗示这根本不是这个网络的`Driver`。`none`网络模式有几个用例，我们将在稍后讨论容器与已定义网络的连接和断开时介绍这些用例。
### 宿主
*主机*网络代表我们在[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*中看到的主机模式，其中一个容器直接绑定到 Docker 主机自己的网络接口。通过仔细观察，我们可以看到很像`none`网络，这个网络没有太多定义:
```
user@docker1:~$ docker network inspect host
[
    {
        "Name": "host",
        "Id": "4b94353d158cef25b9c9244ca9b03b148406a608b4fd85f3421c93af3be6fe4b",
        "Scope": "local",
        "Driver": "host",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": []
        },
        "Internal": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]
user@docker1:~$
```
虽然主机网络确实比`none`模式做得更多，但从对其定义的考察来看，并不是这样。这里的关键区别是，这个网络使用的是主机`Driver`。由于这种网络类型使用现有主机的网络接口，我们不需要将其中任何一个定义为网络的一部分。
使用`network ls`命令时，您可以通过附加参数进一步过滤或改变输出:
*   `--quiet` ( `-q`):这仅显示数字网络标识
*   `--no-trunc`:这样可以防止命令在输出中自动截断网络 ID，让你看到完整的网络 ID
*   `--filter` ( `-f`):这将根据网络 ID、网络名称或网络定义(内置或用户定义)过滤输出
例如，我们可以使用此过滤器显示所有用户定义的网络:
```
user@docker1:~$ docker network ls -f type=custom
NETWORK ID          NAME                DRIVER              SCOPE
a09b7617c550        mynetwork           bridge              local
user@docker1:~$
```
或者我们可以用包含`158`的网络 ID 显示所有网络:
```
user@docker1:~$ docker network ls -f id=158
NETWORK ID          NAME                DRIVER              SCOPE
4b94353d158c        host                host                local
user@docker1:~$
```
# 创建用户定义的网络
正如我们到目前为止所看到的，至少有两种不同的网络驱动程序是每个 Docker 安装、网桥和主机固有的一部分。除了这两个，虽然由于先决条件最初没有定义，但还有另一个现成可用的`Driver`覆盖。本章后面的食谱将会包括关于桥和覆盖驱动的细节。
因为使用主机`Driver`创建主机网络的另一个迭代是没有意义的，所以内置的用户定义网络仅限于网桥和覆盖驱动程序。在本食谱中，我们将向您展示创建用户定义网络的基础知识，以及与`network create`和`network rm` Docker 子命令相关的选项。
## 做好准备
`docker network`子命令是在 Docker 1.9 中引入的，所以你需要一个 Docker 主机至少运行那个版本。在我们的例子中，我们将使用 Docker 版本。您还需要很好地了解您当前的网络布局，这样您就可以在我们检查当前配置时跟随。假设每个 Docker 主机都处于其本机配置。
### 注
警告:在 Linux 主机上创建网络接口时必须小心谨慎。Docker 会尽最大努力防止你搬起石头砸自己的脚，但是在 Docker 主机上定义新网络之前，你必须对自己的网络拓扑有一个很好的了解。要避免的一个常见错误是定义一个与网络中其他子网重叠的新网络。在远程管理的情况下，这可能会导致主机和容器连接问题。
## 怎么做…
使用`network create`子命令定义网络，该命令有以下选项:
```