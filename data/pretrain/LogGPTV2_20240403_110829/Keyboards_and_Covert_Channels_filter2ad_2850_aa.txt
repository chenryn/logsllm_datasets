title:Keyboards and Covert Channels
author:Gaurav Shah and
Andr&apos;es Molina
Keyboards and Covert Channels
Gaurav Shah, Andres Molina and Matt Blaze
Department of Computer and Information Science
University of Pennsylvania
{gauravsh, andresmf, blaze}@cis.upenn.edu
Abstract
This paper introduces JitterBugs, a class of inline inter-
ception mechanisms that covertly transmit data by per-
turbing the timing of input events likely to affect exter-
nally observable network trafﬁc. JitterBugs positioned at
input devices deep within the trusted environment (e.g.,
hidden in cables or connectors) can leak sensitive data
without compromising the host or its software. In partic-
ular, we show a practical Keyboard JitterBug that solves
the data exﬁltration problem for keystroke loggers by
leaking captured passwords through small variations in
the precise times at which keyboard events are delivered
to the host. Whenever an interactive communication ap-
plication (such as SSH, Telnet, instant messaging, etc)
is running, a receiver monitoring the host’s network traf-
ﬁc can recover the leaked data, even when the session or
link is encrypted. Our experiments suggest that simple
Keyboard JitterBugs can be a practical technique for cap-
turing and exﬁltrating typed secrets under conventional
OSes and interactive network applications, even when
the receiver is many hops away on the Internet.
1
Introduction
Covert channels are an important theoretical construc-
tion for the analysis of information security, but they
are not often regarded as a signiﬁcant threat in con-
ventional (non-MLS) networked computing systems. A
covert channel allows an attacker that has compromised
a secure system component to leak sensitive information
without establishing its own explicit connection to the
outside world. Covert timing channels, for example, may
exist if there is ﬂexibility in the timing or sequencing of
externally observable events (such as disk accesses or de-
livery of data packets). Covert channels are notoriously
hard to detect or eliminate, but this is somewhat ame-
liorated by the fact that their bandwidth is often rather
low, and, in any case, exploiting them requires that the
attacker somehow compromise a sensitive system com-
ponent in the ﬁrst place. The sensitive system compo-
nent typically gives the attacker total control over the
system or an output channel, making the threat of covert
channels relatively minor compared with that of what-
ever software vulnerability which made such a compro-
mise possible in the ﬁrst place. Outside of those intended
explicitly to support multi-level security, conventional
general purpose commercial operating systems, network
components, application software, and system architec-
tures largely ignore the threat of covert channels.
In this paper, however, we suggest that typical gen-
eral purpose computing systems are indeed susceptible
in practice to certain covert timing channels. These chan-
nels require only the compromise of an input channel or
device and can leak sensitive information (such as typed
passwords and encryption keys) through the network in-
terface. Furthermore, this can remain a threat even under
conditions that intuitively seem quite unfavorable to the
attacker, where there is only an indirect, multi-stage link
between the compromised system component and a re-
ceiver placed many hops away on the Internet.
Speciﬁcally, we investigate loosely-coupled network
timing channels, in which a compromised input device is
separated from a covert receiver by multiple system lay-
ers at different levels of abstraction. Each of these layers
adds noise to the timing of received events through nor-
mal internal propagation delays, event scheduling, and
buffering. The receiver is assumed only to passively
measure the arrival times of some subset of network
packets but otherwise has no access to sensitive data. We
introduce JitterBugs, a class of mechanisms that exploit
such channels. A JitterBug must have access to sensi-
tive information along with the capability to modulate
event timing. JitterBugs can thus capture and store this
sensitive information and send it later through a loosely-
coupled network timing channel. Loosely-coupled tim-
ing channels and JitterBugs provide a practical frame-
work for exploiting timing channels that exist in general-
USENIX Association
Security ’06: 15th USENIX Security Symposium
59
purpose computing systems.
In particular, we built a hardware keylogger, the Key-
board JitterBug, that can leak typed passwords over the
Internet without compromising the host or its OS, with-
out the use of a separate communication channel, and
without the need for subsequent access to the device by
the attacker. The Keyboard JitterBug is intended as an
interesting artifact in its own right (demonstrating a prac-
tical attack tool that can operate under highly constrained
conditions), but also as a platform for studying the prop-
agation of timing information across hardware, operat-
ing systems, network stacks and the Internet. Assuming
that the user is running an interactive network application
(e.g. SSH, X-Windows), it can leak previously captured
passphrases over such network connections. We show
using experiments that one can get good performance in-
dependent of the OS, system and network conditions un-
der which the Keyboard JitterBug is deployed. Such a
device is therefore very robust against any changes in its
environment. Keyboard JitterBugs also raise the threat
of a Supply Chain Attack. In this attack, a powerful ad-
versary subverts a large number of keyboards in the hope
that a target of interest acquires one.
2 Related Work
A common simplifying assumption in the covert chan-
nel literature is that the attacker has direct control over
the timing of the events being measured by the receiver.
That is, the attacker is usually assumed to compromise
important system components that allow partial or to-
tal access to the output subsystem. While this may be a
useful conservative assumption for those concerned with
minimizing covert channel bandwidth or for abstractly
modeling information leakage, we note that those seek-
ing to exploit a timing channel may be able to do so
more indirectly. In particular, network packet timing is
inﬂuenced by many system components outside a host’s
network subsystem, including input devices. Event tim-
ing information is propagated from one layer to another,
eventually reaching the external network, where it can be
measured by an adversary. We are not the ﬁrst to observe
that packet timing can leak sensitive information about
non-network subsystems, which has been effectively ex-
ploited in remote timing “side channel” attacks against
crypto systems [10] and for host ﬁngerprinting [26, 8, 9].
Here, however, we are concerned not with incidental
side channel leakage, but with leakage deliberately in-
troduced (perhaps at somewhat higher bandwidth) by a
malicious adversary.
The term “covert channel” was ﬁrst used by Lamp-
son [27] in describing program conﬁnement to ensure
processes were not able to leak private data to other
processes. Covert channels have primarily been stud-
ied in the context of multi-level secure (MLS) systems.
MLS systems have multiple security clearance levels.
A “HIGH” level should be able to access any data at
“LOW” level but not vice-versa.
It is thus important
that there be no covert channels that allow a rogue agent
(e.g. software trojan horse, spy) to transfer information
from “HIGH” to “LOW”. As a result, some of the earliest
research in covert channels was from the perspective of
these systems. Due to resource sharing and some com-
monly used MLS primitives, getting rid of covert chan-
nels in such systems is often very hard and in some cases,
effectively impractical [38, 33].
Identiﬁcation of covert timing channels is concerned
with enumerating all possible covert channels that might
be exploited by a software or the user. The US Trusted
Computer System Evaluation Criteria [2] requires ex-
plicit covert channel identiﬁcation in any system certiﬁed
at class B3 or higher. Many methods have been proposed
to identify covert channels, e.g. dual-clock analysis [46],
shared resource matrix [24], high-level scenarios [17].
Note that none of these methods guarantee that all covert
channels will be found, and, more importantly, identiﬁed
channels may represent an exploitable threat.
Once practical covert timing channels have been iden-
tiﬁed, it is often necessary to take steps to mitigate them.
Mitigation of timing channels involves either neutraliz-
ing the channel completely or reducing its bandwidth to
acceptable levels. The ﬁrst step in covert channel anal-
ysis typically involves estimating the worst case band-
width and the effect of various system parameters like
noise and delay [35, 6, 16, 43, 34]. Once this is done,
there are many ways in which channel bandwidth can be
reduced, including the network pump [20, 21, 22], fuzzy
time [18], timing jammers [16] and language transfor-
mations [5]. Reducing the bandwidth of covert channel
does not imply that the covert channel threat is removed.
Useful and important information like encryption keys
can still be leaked out over low-bandwidth covert chan-
nel [31].
Because it is often not practical to neutralize covert
timing channels completely, it might be preferable to de-
tect their active exploitation rather than suffering the per-
formance penalties associated with reducing their poten-
tial bandwidth [11]. The detection of network timing
channel exploitation is known to be a difﬁcult problem
in general. Although speciﬁc methods [11, 7] have been
proposed to handle various covert encodings, they do not
work against every kind of timing channel. All these
mechanisms rely on some notion of “regularity” to dis-
tinguish between regular network trafﬁc and covert tim-
ing channel trafﬁc. The exact regularity depends on the
speciﬁc channel encoding to be detected and therefore,
none of these methods work for every possible scheme.
Side-channel attacks against cryptosystems are some-
60
Security ’06: 15th USENIX Security Symposium
USENIX Association
what similar to covert channels. Side-channel attacks ex-
ploit information leaked by an application’s implemen-
tation of a crypto algorithm. By measuring the time it
takes to perform different cryptographic operations and
a knowledge of the implementation, it is sometimes pos-
sible to extract key bits [25]. It has been shown that side-
channel timing attacks can be practical over a network
[10]. Side-channel leakage can also occur in contexts
outside of cryptographic algorithms themselves. Song et
al. [41] describe a timing attack on the inter-keystroke
timing of an interactive SSH connection. Their exper-
iments indicate that one can gain 5.7 bits of informa-
tion about an SSH password from the observed inter-
keystroke timings over a network, assuming a password
length of 8 characters. This corresponds to a 50x reduc-
tion in work factor for a bruce-force attack.
In fact, the most commonly studied examples of net-
work timing channels in the recent literature are cryp-
tosystem side-channel attacks. Here, the amount of in-
formation leaked per packet is very small but given suf-
ﬁcient data and large enough samples, it is possible to
perform effective cryptanalysis [23].
Actual malicious attacks exploiting covert chan-
nels have not been commonly reported in the litera-
ture. Covert storage channels exploiting unused TCP/IP
header ﬁelds have been used in the past by DDoS tools
[13]. We are not aware of any public reports document-
ing the use of malicious covert network timing channels
in the wild over the Internet, although it is at least plau-
sible that they too have been exploited as part of real at-
tacks.
Given the high variability in round trip times of net-
work packets and their unreliable delivery mechanisms
without any QoS guarantees, it is natural to ask whether
covert timing channels are even practical on the Internet.
Surprisingly, there has been relatively little research on
the practical exploitation of covert network timing chan-
nels. Cabuk et al. [11] describe the design of a simple
software-based network timing channel over IP. Because
the timing channel is software based, the sender of the
channel has complete control over the network subsys-
tem. Their timing channel uses a binary symbol encod-
ing where the presence or absence of a network packet in
a timing interval signiﬁes a bit of information.
The idea of perturbing the timing information of exist-
ing network trafﬁc is not new. Addition of timing jitters
to existing network packets has been studied previously
for SSH stepping stone correlation [45] and for tracking
VoIP calls [44]. VoIP tracking relies on encoding timing
information in VoIP packets to encode a 24-bit water-
mark that can then be used to correlate two separate VoIP
ﬂows. This is made possible by exploiting the regularity
of VoIP trafﬁc and modifying the statistical properties of
groups of packets to encode bits. Some timing attacks on
anonymizing mix networks also rely on perturbing ﬂows
[36, 30].
3
Input Channels and Network Events
In the discussion that follows, we use the following
terminology while talking about covert network timing
channels. The sender of the channel is the subverted en-
tity that is responsible for modulating the timing to en-
code information. It can be an application software, part
of the operating system or a hardware device. The re-
ceiver in the channel can either be a network connection
endpoint or a passive eavesdropper that extracts infor-
mation from the channel by looking at network packet
timings.
The sender in a covert network timing channel aims to
modulate the timing of packets on the network to which
the receiver has access. This may, for example, be the
result of a software trojan that generates network pack-
ets at speciﬁc times corresponding to the information be-
ing sent [11]. Similarly, a router in the path of a net-
work packet can change [44] the timing of the packets
it receives before sending them to their destination. In
both these examples, the sender of the timing channel
has complete control over the network packets and can
directly inﬂuence their timing on the network. Ideally,
when the network delay is negligible, the receiver of the
timing channel observes the same timings as those in-
tended by the sender. Thus, the sender of the covert chan-
nel is a part of an already compromised output channel
or device. Research in practical network timing chan-
nels typically considers such direct channel senders. This
threat model, however, is overly conservative. It is possi-
ble to have usable and practical network timing channels
that require only the compromise of system components
that have traditionally been thought to lie comfortably
within a host’s security boundary: the input subsystems.
That the subversion of an input channel or device is a
sufﬁcient condition for a practical network timing chan-
nel to exist is a somewhat surprising claim. However,
once we consider that many network events are directly
caused by activity on input channels, it is easy to see
how such covert channels might work. Also, because we
are just interested in timing, we only need to modify the
timing of existing input events. It is not necessary to gen-
erate any new trafﬁc.
From the attacker’s perspective, the goal of a covert
channel is to leak secrets in violation of the host’s se-
curity policy. Compromised input devices expose any
secrets communicated over the input channel. For ex-
ample, compromising a keyboard (used by the Keyboard
JitterBug) allows the attacker to learn passphrases and
other personal information that can then be leaked over
the covert network timing channel.
USENIX Association
Security ’06: 15th USENIX Security Symposium
61
In fact, compromising an output channel to leak se-
crets over a covert channel is not a very interesting sce-
nario for the attacker. Once such a channel or device
has been inﬁltrated by an attacker, leaking secrets from
it is very easy. A compromised output subsystem has
many options for communicating with an unauthorized
receiver, often at much higher bandwidth than a covert
channel could provide.
Input based channels do not ﬁt well within the tradi-
tional model used in covert channel analysis. As we will
see, their presence – as well as the fact that they can be
exploited in practice – makes it necessary to include in-
put devices in the Trusted Computing Base (TCB).
The coupling between input devices and the network
is made possible by timing propagation often present in
general purpose computing systems. Once these chan-
nels have been identiﬁed, they can be exploited with a
JitterBug.
4 Networks and JitterBugs
Loosely coupled network timing channels and JitterBugs
are a way of thinking about covert network channels
in conventional computer architectures that emphasizes
their potential for exploitation. As such, they also pro-
vide a model under which the threat of covert channels
in conventional computer systems can be analyzed.
One of the characteristics of the software and router
based network timing channel described in the previous
section is that the sender and receiver of the channel are
closely coupled together.
In loosely coupled network timing channels, the sender
and receiver might be separated by multiple system lay-
ers, each belonging to a different level of abstraction.
These channels are based on the observation that, just
as data ﬂow occurs in a general computing system, tim-
ing information also propagates from one system object
to the other. By perturbing this timing information, it is
possible to modulate a receiver many stages ahead in this
ﬂow. It is easier to see how this can be done by consid-
ering an example ﬂow that is exploited by the Keyboard
JitterBug.
Consider the case where the user is running an inter-
active network application. Each keypress triggers a se-
quence of events. The keyboard sends scan codes over
the keyboard cable to the host’s keyboard controller. This
transmission is not instantaneous and depends on the
state of the hardware, whether there’s enough space in
the keyboard controller buffer, etc. This in turn causes
an interrupt to be generated to the operating system. De-
pending on the operations being performed, there might
be a variable delay between when the value is received
by the keyboard buffer and when it is read by the op-
erating system. Once the interrupt handling routine has
read the value from the keyboard controller, the operat-
ing system will typically perform some additional oper-
ations (e.g. scan-code → key-code translation) and put
this value into a buffer to be read by the user-space net-
work application, typically through a read() system call.
Once the interactive network software gets the charac-
ter, it might perform additional processing (e.g. encryp-
tion) before requesting the OS to send the character in a
network packet. Similarly, additional delays will occur
due to the network stack and hardware before the packet