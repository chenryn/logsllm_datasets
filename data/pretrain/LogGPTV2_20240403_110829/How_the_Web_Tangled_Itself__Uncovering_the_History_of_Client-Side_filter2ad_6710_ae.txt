privileges of an operation. Also, existing APIs could be
changed to at least warn developers. As an example,
accessing the data property of a postMessage without
a prior access to the origin property could result in a
JavaScript console warning for a potentially missing ori-
gin check. Future generations of APIs could extend this
behavior to throw security exceptions, in case crucial se-
curity checks have been omitted.
Ensure Better Developer Training The results of our
study indicate that although security measures exist to
prevent or mitigate attacks, developers are often un-
aware of the underlying security issues. Examples for
this include (missing) origin checking on postMessages,
the ineffective use of HTTP-only cookies, or the inclu-
sion of user-controllable data in the generation of script
code, which causes Client-Side XSS. Especially Client-
Side Cross-Site Scripting appears a class of vulnerabil-
ity that remains unresolved — even in light of mitigat-
ing technologies like CSP. We therefore argue that re-
search should continue to investigate how developers can
be better educated on security issues and how develop-
ment tools can be designed in a way that they empower
their users to build secure applications.
7 Related Work
Our work touches on many areas of Web security. In the
following, we discuss research related to our work.
Large-Scale Analysis of Web Security and Privacy
Several papers have conducted large-scale analyses of
different aspects of Web security. Yue and Wang [40]
analyzed inclusions of external scripts and investigated
dangerous API calls.
In 2010, Zhou and Evans [42]
investigated the use of HTTP-only cookies ﬁnding that
only 50% of the investigated sites make use of the fea-
ture. In 2011, two works analyzed the use of crossdo-
main policies for Flash, as well as other cross-domain
communication channels [16, 10], which align with the
results we presented for that time.
In the same year,
Richards et al. [27] provided the ﬁrst large-scale anal-
ysis of the (mis)use of eval, showing that while it can
be replaced in certain cases, removing it all-together is
impossible.
In 2012, Nikiforakis et al. [24] examined
Javascript inclusions over time of the Alexa top 10.000,
pointing out the trend of an evermore increasing amount
of external inclusions, which we also observed in our
work. In the area of privacy, Lerner et al. [19] conducted
an analysis of how trackers evolved over time, also using
data from archive.org.
Vulnerability Detection in the Wild In addition to
the previously discussed papers, several works have fo-
cussed on examining a certain type of vulnerability in
the wild.
In 2013, Son and Shmatikov [31] analyzed
insecure usage of postMessage receivers ﬁnding several
exploitable issues.
In the same year, we presented an
automated system to measure the prevalence of Client-
Side Cross-Site Scripting in the wild [17]. More recently,
Lauinger et al. [14] performed an in-depth analysis of the
usage of vulnerable libraries in the wild, showing results
comparable to our historical view.
Content Security Policy An area that has gained more
attention over the last years is the Content Security Pol-
icy. While Doupé et al. [4] showed in 2013 that automat-
ically separating code and data is feasible for ASP.net
applications, Weissbacher et al. [38] conducted a long-
term study which indicated that CSP was not deployed
at scale. Moreover, they discussed the difﬁculties in set-
ting up CSP for legacy applications. In 2016, Pan et al.
984    26th USENIX Security Symposium
USENIX Association
[26] showed that automatically generating CSP policies
for the Alexa top 50 is feasible. In the same year, Weich-
selbaum et al. [37] investigated the efﬁcacy of deployed
CSP policies in the wild, highlighting that around 95%
of the examined policies are susceptible to bypassing.
Moreover, though, the authors propose an extension to
CSP to allow for easier deployment.
HTTPS Over the last year, the research community
also has focussed more on HTTPS. Clark and van
Oorschot [3] systematically explored issues in the area of
HTTPS in terms of infrastructure as well as attack vec-
tors against HTTPS in general. Later on, Liang et al. [20]
examined the relation between the usage of HTTPS and
the embedding of CDNs into Web pages. Most recently,
Sivakorn et al. [30] presented an overview of the privacy
risks of exposing non authenticating cookies over HTTP,
leading to intrusions of end-user privacy.
8 Conclusion
In this paper, we conducted a thorough study on the secu-
rity history of the Web’s client side using the preserved
client-side Web code from the Internet Archive. In the
course of our study, we were able to observe three over-
arching developments: For one, the platform complexity
of the client-side Web has not plateaued yet: Regardless
of the numerical indicator we examine, be it code size,
number of available APIs, or amount of third-party code
in web sites, all indicators still trend upwards.
Furthermore, the overall security level of Web sites is
not increasing noticeably: Injection vulnerabilities found
their way onto the client side in the early years of the new
millennium and show no sign of leaving. Vulnerabilities
that are on the decrease, due to deprecated technology, as
it is the case with insecure crossdomain.xml policies,
appear to be seamlessly replaced with insecure usage of
corresponding new technologies, e.g., insecure handling
of postMessages.
Finally, we could observe a steady adoption of easy to
deploy security mechanisms, such as the HTTPOnly-ﬂag
or the X-Frames-Option header. Unfortunately, this
trend does not apply to more complex security mech-
anisms, such as the Content-Security-Policy or
sandboxed iframes. Furthermore, we found that while
early adopters of dedicated security technologies are
overall less likely to exhibit vulnerabilities, this does not
apply into the extended lifetime of the mechanism – late
adopters appear to have no inherent security advantage
over average sites despite their demonstrated security
awareness.
Overall, these results paint a sobering picture. Even
though Web security has received constant attention from
research, security, and standardization communities over
the course of the last decade, and numerous dedicated
security mechanisms have been introduced, the overall
positive effects are modest: Client-Side XSS stagnates at
a high level and potentially problematic practices, such
as cross-origin script inclusion or usage of outdated Java-
Script libraries are still omnipresent. At best, it appears
that the growing security awareness merely provides a
balance to a further increase in insecurity, caused by the
ever-rising platform complexity.
Thus, this paper provides strong evidence, that the pro-
cess of making the Web a secure platform is still in its
infancy and requires further dedicated attention to be re-
alized.
Acknowledgements
We would like to thank the anonymous reviewers for
their valuable feedback and our shepherd Nick Niki-
forakis for his support in addressing the reviewer’s com-
ments. This work was supported by the German Federal
Ministry of Education and Research (BMBF) through
funding for the Center for IT-Security, Privacy and Ac-
countability (CISPA) (FKZ: 16KIS0345).
References
[1] Devdatta Akhawe, Frederik Braun, François
Marier, and Joel Weinberger. Subresource integrity.
https://www.w3.org/TR/SRI/, Jun 2016.
[2] Daniel Bates, Adam Barth, and Collin Jackson.
Regular expressions considered harmful in client-
side XSS ﬁlters. In WWW, 2010.
[3] Jeremy Clark and Paul C van Oorschot. SoK: SSL
and HTTPS: Revisiting past challenges and evalu-
ating certiﬁcate trust model enhancements. In IEEE
Security and Privacy, 2013.
[4] Adam Doupé, Weidong Cui, Mariusz H
Christopher
Jakubowski, Marcus
to-
Kruegel, and Giovanni Vigna.
ward preventing server-side xss via automatic code
and data separation. In CCS, 2013.
deDacota:
Peinado,
[5] R. Fielding, J. Gettys, J. Mogul, H. Frystyk,
L. Masinter, P. Leach, and T. Berners-Lee. Hy-
pertext Transfer Protocol – HTTP/1.1. RFC 2616
(Draft Standard), June 1999.
[6] Jeremiah Grossman. Clickjacking: Web pages can
see and hear you. http://blog.jeremiahgross
man.com/2008/10/clickjacking-web-pages
-can-see-and-hear.html.
USENIX Association
26th USENIX Security Symposium    985
[7] Ian Hickson. HTML5 Web Messaging. https:
//www.w3.org/TR/webmessaging/, May 2015.
[8] J. Hodges, C. Jackson, and A. Barth. HTTP Strict
Transport Security (HSTS). RFC 6797 (Proposed
Standard), November 2012.
[9] Lin-Shung Huang, Alexander Moshchuk, Helen J
Wang, Stuart Schecter, and Collin Jackson. Click-
jacking: Attacks and defenses. In USENIX, 2012.
[10] Dongseok
Jang,
Aishwarya Venkataraman,
G Michael Sawka, and Hovav Shacham. Analyz-
ing the crossdomain policies of Flash applications.
In W2SP, 2011.
[11] jQuery Bug Tracker. SELECTOR INTERPRETED
AS HTML. http://goo.gl/JNggpp, 2012.
[12] Amit Klein. DOM based cross site scripting or XSS
of the third kind. Web Application Security Consor-
tium, Articles, 2005.
[13] Michael Kranch and Joseph Bonneau. Upgrading
HTTPS in mid-air. In NDSS, 2015.
[14] Tobias Lauinger, Abdelberi Chaabane, Sajjad Ar-
shad, William Robertson, Christo Wilson, and En-
gin Kirda. Thou shalt not depend on me: Analysing
the use of outdated javascript libraries on the web.
In NDSS, 2017.
[15] Eric Lawrence.
IE8 security update VI: Beta 2
update. https://blogs.msdn.microsoft.com/i
e/2008/09/02/ie8-security-part-vi-bet
a-2-update/, September 2008.
[16] Sebastian Lekies, Martin Johns, and Walter Tighz-
ert. The state of the cross-domain nation. In W2SP,
2011.
[17] Sebastian Lekies, Ben Stock, and Martin Johns. 25
million ﬂows later: large-scale detection of DOM-
based XSS. In CCS, 2013.
[18] Sebastian Lekies, Ben Stock, Martin Wentzel, and
Martin Johns. The unexpected dangers of dynamic
In USENIX Security, pages 723–735,
javascript.
2015.
[19] Adam Lerner, Anna Kornfeld Simpson, Tadayoshi
Kohno, and Franziska Roesner. Internet jones and
the raiders of the lost trackers: An archaeologi-
cal study of web tracking from 1996 to 2016.
In
USENIX Security, 2016.
[20] Jinjin Liang, Jian Jiang, Haixin Duan, Kang Li, Tao
Wan, and Jianping Wu. When HTTPS meets CDN:
A case of authentication in delegated service.
In
IEEE Security and Privacy, 2014.
[21] Bill Marczak, Nicholas Weaver, Jakub Dalek, Roya
Ensaﬁ, David Fiﬁeld, Sarah McKune, Arn Rey,
John Scott-Railton, Ronald Deibert, and Vern Pax-
son. China’s great cannon. Citizen Lab, 2015.
[22] Thomas J McCabe. A complexity measure. IEEE
Transactions on Software Engineering, 1976.
[23] Mozilla Firefox Team.
X-frame-options.
https://developer.mozilla.org/en/do
cs/Web/HTTP/Headers/X-Frame-Options.
[24] Nick Nikiforakis, Luca Invernizzi, Alexandros
Kapravelos, Steven Van Acker, Wouter Joosen,
Christopher Kruegel, Frank Piessens, and Giovanni
Vigna. You are what you include: large-scale evalu-
ation of remote javascript inclusions. In CCS, 2012.
[25] Erlend Oftedal. Retire.js - identify JavaScript li-
braries with known vulnerabilities in your applica-
tion. http://goo.gl/r4BQoG, 2013.
[26] Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou,
Yan Chen, and Tingzhe Zhou.
CSPAutoGen:
Black-box enforcement of content security policy
upon real-world websites. In CCS, 2016.
[27] Gregor Richards, Christian Hammer, Brian Burg,
and Jan Vitek. The eval that men do - A large-scale
study of the use of eval in javascript applications.
In ECOOP, 2011.
[28] D. Ross and T. Gondrom. HTTP Header Field X-
Frame-Options. RFC 7034, October 2013.
[29] David Ross.
Happy 10th birthday cross-site
scripting!
http://blogs.msdn.com/b/dross
/archive/2009/12/15/happy-10th-birthda
y-cross-site-scripting.aspx, 2009.
[30] Suphannee Sivakorn, Iasonas Polakis, and Ange-
los D Keromytis. The cracked cookie jar: HTTP
cookie hijacking and the exposure of private infor-
mation. In IEEE Security and Privacy, 2016.
[31] Sooel Son and Vitaly Shmatikov.
The post-
man always rings twice: Attacking and defending
postmessage in HTML5 websites. In NDSS, 2013.
[32] Michele Spagnuolo. Abusing JSONP with rosetta
ﬂash.
https://miki.it/blog/2014/7/8/ab
using-jsonp-with-rosetta-flash/, August
2014.
[33] Ben Stock and Martin Johns.
against XSS-based password manager abuse.
AsiaCCS, 2014.
Protecting users
In
986    26th USENIX Security Symposium
USENIX Association
[34] Ben Stock, Stephan Pﬁstner, Bernd Kaiser, Sebas-
tian Lekies, and Martin Johns. From facepalm
to brain bender: Exploring client-side cross-site
scripting. In CCS, 2015.
[35] Apurva Udaykumar. Setting a crossdomain.xml
ﬁle for HTTP streaming. http://www.adobe.com
/devnet/adobe-media-server/articles/c
ross-domain-xml-for-streaming.html.
[36] Marie Vasek and Tyler Moore.
factors for webserver compromise.
Crypto, 2014.
Identifying risk
In Financial
[37] Lukas Weichselbaum, Michele Spagnuolo, Sebas-
tian Lekies, and Artur Janc. CSP is dead, long live
CSP! On the insecurity of whitelists and the future
of Content Security Policy. In CCS, 2016.
[38] Michael Weissbacher, Tobias Lauinger,
and
William Robertson. Why is CSP failing? trends
and challenges in csp adoption. In RAID, 2014.
[39] Mike West, Adam Barth, and Dan Veditz. Content
security policy level 2, W3C candidate recommon-
dation. https://www.w3.org/TR/2015/CR-CSP
2-20150219/, February 2015.
[40] Chuan Yue and Haining Wang. Characterizing in-
In WWW,
secure javascript practices on the web.
2009.
[41] Michal Zalewski. The tangled Web: A guide to se-
curing modern web applications. No Starch Press,
2012.
[42] Yuchen Zhou and David Evans. Why aren’t HTTP-
only cookies more widely deployed. W2SP, 2010.
USENIX Association
26th USENIX Security Symposium    987