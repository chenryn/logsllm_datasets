title:Multicast Authentication in Fully Adversarial Networks
author:Anna Lysyanskaya and
Roberto Tamassia and
Nikos Triandopoulos
Multicast Authentication in Fully Adversarial Networks
Anna Lysyanskaya Roberto Tamassia Nikos Triandopoulos
Brown University
Department of Computer Science
Providence, RI, 02912-1910
fanna,rt,PI:EMAIL
Abstract
We study a general version of the multicast authentica-
tion problem where the underlying network, controlled by
an adversary, may drop chosen packets, rearrange the or-
der of the packets in an arbitrary way, and inject new pack-
ets into the transmitted stream. Prior work on the problem
has focused on less general models, where random, rather
than adversarially-selected, packets may be dropped and
altered, or no additional packets may be injected into the
stream. We describe an efﬁcient and scalable authentica-
tion scheme that is based on a novel combination of error-
correcting codes with standard cryptographic primitives.
We prove the security of our scheme and analyze its per-
formance in terms of the computational effort at the sender
and receiver and the communication overhead. We also dis-
cuss speciﬁc design and implementation choices and com-
pare our scheme with previously proposed approaches.
1. Introduction
The authentication of multicast transmissions of data
streams over the Internet is a challenging problem. IP mul-
ticast is implemented with a best-effort delivery mechanism
over the UDP transport protocol, where packet losses are
tolerated. Thus, the received stream may differ from the
transmitted one. Any authentication scheme for multicast
streams should verify as many as possible of the received
packets without assuming the availability of the entire orig-
inal stream. In addition, it should resist against any types
of attacks by an adversary, even when the adversary con-
trols the underlying network.
In the multicast authentication problem, we wish to au-
thenticate a packet stream transmitted over a network that
may adversarially drop packets, arbitrarily rearrange the or-
der of the packets, and inject new packets into the stream.
Prior work on the subject has focused on a network model
where either all the received packets are valid (authentic)
or packets are lost according to some predeﬁned random
patterns (e.g., [12, 19, 22, 27]) or no packet injections oc-
cur (e.g., [20, 21]). Thus, most of the previously proposed
schemes only tolerate erroneous network behavior and are
not resilient against an adversarial behavior of the network.
Of course, if each packet were signed by the sender,
then the only damage the adversarial network could inﬂict
is packet loss, as the receiver would simply reject pack-
ets whose signature is not veriﬁed. However, this simple
“sign-all” solution is undesirable because of the repeated
use by the sender of the critical and computationally ex-
pensive sign primitive for each transmitted packet and the
heavy communication overhead caused by the addition of
a signature to each packet. Additionally, this solution suf-
fers by a simple denial-of-service attack at the receiver; one
signature veriﬁcation must be performed for each received
packet, valid or not.
In this paper, we formally deﬁne a general model for
multicast authentication where an adversary can perform
various attacks on the transmitted streams. In this model,
two parameters of the network, the survival rate and the
ﬂood rate, characterize the power of the adversary. We de-
scribe an efﬁcient authentication scheme for this model that
gives almost the same security guarantees as if each packet
were individually signed, but requires only one signature
operation for the entire stream and adds only a constant size
authentication overhead per packet. Our technique uses a
novel combination of Reed-Solomon error-correcting codes
with standard cryptographic primitives, such as collision-
resistant hashing and digital signatures.
In the rest of this section, we introduce our model,
summarize our contributions and review previous work on
multicast authentication. The cryptographic primitives and
error-correcting codes used in this paper are reviewed in
Section 2. In Section 3, we describe in detail our adversar-
ial network model and multicast authentication framework.
Section 4 describes our multicast authentication scheme and
gives proofs of correctness and security. In Section 5 we an-
alyze the performance of our scheme and compare it with
various other proposed schemes in terms of security as-
sumptions, underlying network model, resilience to packet
loss and injection, computational effort at the sender and re-
ceiver, and communication overhead. Conclusions and fu-
ture work are given in Section 6.
1.1. Model and Contributions
We consider the problem of authenticating a stream
of packets transmitted over a fully adversarial network.
Namely, the network is controlled by an adversary who can
destroy packets of her choice, arbitrarily rearrange the order
of the packets, and inject new, arbitrarily constructed, pack-
ets. We limit the power of the adversary to modify a stream
of n packets transmitted by the sender by introducing two
parameters of the network, the survival rate ﬁ, 0 < ﬁ • 1,
and the ﬂood rate ﬂ, ﬂ ‚ 1, which are assumed to be con-
stants. A network with these two parameters, which we call
an (ﬁ; ﬂ)-network, guarantees that despite the presence of
the adversary, at least ﬁn packets in the received stream are
valid and the received stream contains at most ﬂn packets.
The model is formally described in Section 3. For now, we
justify the introduction of the survival and ﬂood rates with
the following observations. If too many packets are dropped
or corrupted by the adversary, then the main problem is the
loss of data, as the small number of valid packets received
may be useless even if authenticated. On the other hand, if
the adversary can inject a very large number of packets, then
we have a denial-of-service attack.
The contributions of our work can be summarized as fol-
lows:
† We provide a formal deﬁnition of multicast authenti-
cation over an (ﬁ; ﬂ)-network, where arbitrary pack-
ets are lost, injected, and rearranged, subject to a given
survival rate ﬁ and ﬂood rate ﬂ. We also give the re-
quirements for an authentication scheme to be correct
and secure.
† We present
the ﬁrst efﬁcient and scalable multi-
cast authentication scheme for an (ﬁ; ﬂ)-network. Our
scheme is based on digital signatures, cryptographic
hash functions and Reed-Solomon error-correcting
codes. This last feature of our scheme provides a new
interesting connection between coding theory and se-
curity.
† We prove the correctness and security of our scheme,
analyze its performance in terms of various cost pa-
rameters, discuss design and implementation choices,
and compare it with previous approaches. In particu-
lar, we show that our scheme adds to each transmitted
packet only a small amount of authentication informa-
tion, proportional to ﬂ=ﬁ2, and that all the valid pack-
ets received are recognized, while all the invalid pack-
ets are rejected.
The only prior approach that provides security in our adver-
sarial model and is the inefﬁcient “sign every packet” solu-
tion, which consists of either (i) singing each packet indi-
vidually or (ii) using a Merkle hash tree [28]. The trivial so-
lution of signing each packet individually is not viable due
to heavy computational operations at both the sender and
the receiver, but also because secret-key operations are ex-
pensive in terms of the security architecture as well. The
Merkle-tree-based authentication scheme has the drawback
that the communication overhead (signature and hash val-
ues) grows with the number of packets sent.
1.2. Prior and Related Work
Previous work on multicast authentication consid-
ers both unconditionally secure and computationally
secure authentication. Approaches based on the informa-
tion theoretic model (see, e.g., [8, 26]) tend to be less
practical. In the rest of this section, we overview ap-
proaches that use computationally secure authentica-
tion.
MAC-Based Approaches. Various approaches use message
authentication codes (MACs) and secret-key cryptography.
The trivial solution here is having the group members shar-
ing a secret key and including a MAC into every packet sent,
but this scheme is not secure, as any user can spoof packets.
In another MAC-based trivial solution, each receiver has her
own secret key and the sender possesses all such keys. To
authenticate a stream, the sender adds to each packet a MAC
for every receiver. This approach is not scalable because of
the high communication cost. In [4], a MAC-based scheme
is described that is secure with high probability against any
coalition of w corrupted users and where O(w) MACs are
appended to each packet. This scheme is not fully scalable
due to its communication overhead. In [22], another scheme
that uses MACs is proposed, where a MAC is appended to
every packet and the key of the MAC is provided in some
subsequent packet. To tolerate packet losses, the keys are
generated by means of a hash chain. This approach has low
communication overhead. However, it requires time syn-
chronization between the parties. Two MAC-based schemes
that make explicit use of the topology of a multicast tree
are presented in [29]. Both schemes are similar in concept
to [22] and take denial-of-service and access control into
consideration (namely, a corrupted packet is ﬁltered out as
soon as possible in the multicast tree and only legitimate
group subscribers can authenticate the multicast packets).
Both schemes assume the existence of secure and trusted
routers at the nodes of the tree. In addition, the ﬁrst scheme
uses clock synchronization, whereas the second scheme re-
lies on the existence of secure channels between the source
and each of the receivers.
Boneh et al. [1] generalize MACs to a multicast set-
ting by deﬁning a new primitive for multicast authentica-
tion called multicast MAC (MMAC). They show that any
MMAC scheme can be transformed into a digital signa-
ture scheme of almost the same efﬁciency. Thus, any mul-
ticast authentication scheme not relying on additional as-
sumptions on the network (such as synchronization, trusted
routers, or secure channels) may as well use a signature
scheme! This brings us to signature amortization. Other
research efforts have focused on building faster signature
schemes for signing every packet separately (e.g., [10, 25]).
Signature Amortization. Other approaches use the mecha-
nism of signature amortization, where a single digital sig-
nature is used for the authentication of multiple packets. A
ﬁrst scheme that uses signature amortization over a hash
chain appears in [10]. Each packet pi is augmented with au-
thentication information ai, which is recursively deﬁned as
the hash of pi+1 – ai+1 (– denotes concatenation). Also,
the augmented ﬁrst packet p1 – a1 is digitally signed. This
scheme has constant authentication overhead per packet but
does not tolerate packets losses. In [28], a Merkle hash tree
is used to amortize a signature over n packets. Namely, a
hash tree is built on top of the hashes of the packets and
the root hash value is digitally signed. Each packet is aug-
mented with authentication information that consists of the
signed root hash and the hashes of the siblings of the nodes
on the path between the root and the leaf associated with the
packet. The scheme tolerates packet losses but has logarith-
mic communication overhead per packet. In contrast, our
approach, which also uses signature amortization, has con-
stant communication overhead.
Graph-Based Authentication. Graph-based authentication
[12, 19, 22, 27] generalizes the idea of amortizing a sig-
nature over a hash chain in such a way as to tolerate packet
losses. A single-sink directed acyclic graph (DAG) G is de-
ﬁned, where each vertex corresponds to a packet. A directed
edge from packet pi to packet pj indicates that the authen-
tication information aj of packet pj includes the hash of
pi – ai. Also, the augmented packet p1 – a1 of the sink of
the DAG is digitally signed. The validation of packets pro-
ceeds backward along the edges of the graph. Namely, if
packet pj has been validated and edge (pi; pj) exists in G,
then the validity of packet pi can be determined using the
authentication information aj of pj. Graph-based authenti-
cation schemes offer probabilistic security guarantees pro-
vided packet losses occur randomly (i.e., they are not ad-
versarially selected). In particular, they require that the sig-
nature packet will reach the receiver intact. Two packet loss
patterns have been studied: the uniform model, where each
packet is lost with a ﬁxed probability and independently
of other packets being lost, and the bursty model, where a
packet is lost with a ﬁxed probability and then a given num-
ber of successive packets are also lost.
In [22], G is an augmented-chain graph, consisting of
a path plus additional edges that connect vertices at var-
ious distances. In [12], another augmented-chain graph is
designed speciﬁcally to tolerate bursty packet losses. Ran-
dom graphs and a new scheme that is resilient to multiple
bursty losses are studied in [19]. Finally, in [27], expander
graphs are used. The efﬁciency of graph-based authentica-
tion schemes is analyzed in [5] and experimentally studied
in [7].
Erasure Codes. In [21] and [20], erasure codes (e.g., [16,
17, 23]) are used for multicast authentication to tolerate
adversarially-chosen packet losses and disperse one signa-
ture over the packets in a group. The constructions are ef-
ﬁcient in terms of communication cost and similar in prin-
ciple. The two schemes only differ in that in [20], encod-
ing is performed twice to reduce the size of the authenti-
cation information. Both schemes are, however, vulnerable
to a very simple attack: a single injected packet can com-
promise the correctness of the decoding procedure at the re-
ceiver. In [15], a “binding” of the valid packets through the
use of a Merkle hash tree has been recently proposed to tol-
erate packet injections: each packet carries also the Merkle-
tree authentication information so that blocks of valid pack-
ets are grouped together and blocks of invalid packets are
ﬁltered out. This scheme suffers from high, not constant,
per-packet communication overhead.
2. Preliminaries
In this section, we introduce some notation (mostly
from [18]) and deﬁne the cryptographic and coding primi-
tives that we use in our construction.
2.1. Notation
Let A be an algorithm. By A(¢) we denote that A has
one input (resp., by A(¢; : : : ; ¢) we denote that A has sev-
eral inputs). By y ˆ A(x), we denote that y was obtained
by running A on input x. If A is deterministic, then this y
is unique; if A is probabilistic, then y is a random variable.
If S is a ﬁnite set, then y ˆ S denotes that y was cho-
sen from S uniformly at random. By y 2 A(x) we mean
that the probability that y is output by A(x) is positive.
By AO(¢), we denote an algorithm that makes queries to
an oracle O. I.e., this algorithm (Turing machine) will have
an additional (read/write-once) query tape, on which it will
write its queries in binary; once it is done writing a query,
it inserts a special symbol “#”. By external means, once the
symbol “#” appears on the query tape, oracle O is invoked
and its answer appears on the query tape adjacent to the “#”
symbol. By Q = Q(AO(x)) ˆ AO(x) we denote the con-
tents of the query tape once A terminates, with oracle O
and input x. By (q; a) 2 Q we denote the event that q was a
query issued by A, and a was the answer received from or-
acle O.
Let b be a boolean function. By (y ˆ A(x) : b(y)),
we denote the event that b(y) is TRUE after y was gen-
erated by running A on input x. The statement Pr[fxi ˆ
Ai(yi)g1•i•n : b(xn)] = ﬁ means that the probability that
b(xn) is TRUE after the value xn was obtained by running
algorithms A1; : : : ; An on inputs y1; : : : ; yn, is ﬁ, where the
probability is over the random choices of the probabilistic
algorithms involved.
Deﬁnition 2.2 (Collision-resistant Hash Function). Let
H be a probabilistic polynomial-time algorithm that, on in-
put 1k, outputs an algorithm H : f0; 1g⁄ 7! f0; 1gk. Then
H deﬁnes a family of collision-resistant hash functions if:
Efﬁciency. For all H 2 H(1k), for all x 2 f0; 1g⁄, it takes
polynomial time in k + jxj to compute H(x).
Collision-resistance. For all
families of probabilistic
polynomial-time Turing machines fAkg, there exists a neg-
ligible function ”(k) such that
Pr[H ˆ H(1k); (x1; x2) ˆ Ak(H) :
x1 6= x2 ^ H(x1) = H(x2)] = ”(k):
2.2. Cryptographic Primitives
2.3. Error Correcting Codes
The following deﬁnition is due to Goldwasser, Micali,
and Rivest [11], and has become the standard deﬁnition of
security for signature schemes. Schemes that satisfy it are
also known as signature schemes secure against adaptive
chosen-message attack.
2.1
(Signature
algorithms
polynomial-time