UNORTHODOX LATERAL 
MOVEMENT: 
STEPPING  AWAY  FROM  STANDARD 
TRADECRAFT
> ldapsearch (displayname=Riccardo Ancarani)
sAMAccountname: Rancarani
displayname: Riccardo Ancarani
memberOf: @APTortellini, WithSecure/F-Secure
security certifications: who cares really
‚ñ™ Lateral Movement is the act of using authentication material to execute code on 
another host
‚ñ™ Ubiquitous in red team engagements and real-life attacks
‚ñ™ EDR and well-trained SOCs are making this harder ‚Äì we must improve
‚ñ™ We need to find new techniques to stay on top of our game
PREMISE OF THE TALK
As we go trough the techniques, we will also classify them using the following metrics:
PREMISE OF THE TALK
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
Uploads a Binary on 
Disk
Creates Additional 
Artefacts
Directly connect to 
create and trigger the 
task
Well known technique 
‚Äì IoC Available
Modifies Existing 
Artefacts on Disk
Modifies an Existing 
Object
No Direct Connection
Less known technique 
or Modified Technique
None
None
Unknown Technique
This simple and intentionally incomplete traffic light system will help us taking more 
informed decisions while choosing a lateral movement technique. Examples:
PREMISE OF THE TALK
Filesystem 
Artefacts
Host Artefacts
Network 
Artefacts
Prevalence -
IoC
Default PsExec
Uploads a Binary 
in ADMIN$
Creates a Service
Directly connect 
to create and 
trigger the 
service
Well known 
technique ‚Äì IoC
Available
RPC BASED
EXECUTION METHODS
‚ñ™ Remote Procedure Calls (RPC) is a client-server communication mechanism.
‚ñ™ Allows clients to invoke methods on a server.
‚ñ™ Used everywhere in Windows.
RPC
https://specterops.io/assets/resources/RPC_for_Detection_Engineers.pdf
In this section we will mostly rely on:
‚ñ™ Task Scheduler
‚ñ™ Service Control Manager
‚ñ™ Remote Registry
RPC
RPC
TASK SCHEDULER
Tasks can be created remotely via RPC.
The old classic that we should all avoid 
(BOOOOOORING):
beacon> shell schtasks /CREATE /TN code 
/TR "C:\Windows\beacon.exe" /RU "SYSTEM" 
/ST 15:33 /S HOST 
RPC ‚ÄìTASK SCHEDULER
Standard task creation is sketchy (like my accent)
The approach is straightforward, we either want to:
‚ñ™ Replace a binary. See SUNBURST.
‚ñ™ Replace the ‚Äúaction‚Äù
RPC ‚ÄìTASK SCHEDULER
https://riccardoancarani.github.io/2021-01-25-random-notes-on-task-scheduler-lateral-movement/
Are among us memes still a thing? 
TaskShell is a small tool that can help you quickly weaponizing the action swapping:
RPC ‚ÄìTASK SCHEDULER
https://github.com/RiccardoAncarani/TaskShell
Why no DLL hijacks?
RPC ‚ÄìTASK SCHEDULER
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
Classic Task 
Scheduler Execution
Uploads a binary on 
disk
Creates a new task
Directly connect to 
create and trigger the 
task
Well known technique
TaskShell ‚Äì
Replacing Action
None - depends
Modifies an existing 
task
Directly connect to 
create and trigger the 
task
Less known technique
TaskShell ‚Äì
Replacing Binary
Uploads a binary on 
disk
Does not modify tasks
Directly connect to 
create and trigger the 
task
Less known technique
RPC ‚ÄìTASK SCHEDULER
Useful telemetry for Task Scheduler:
‚ñ™ Task Scheduler Event Log -> Require auditing
‚ñ™ Task Scheduler ETW Sensor
‚ñ™ Task Scheduler Operational Logs -> Just mirrors the ETW logs
RPC ‚ÄìTASK SCHEDULER
We can programmatically create scheduled 
tasks only via remote registry. This will allow us 
to:
‚ñ™ Create tasks without going via the Task 
Scheduler‚Äôs RPC interfaces
‚ñ™ Avoid generating ANY Task Scheduler based 
Windows event (not even ETW telemetry)
RPC ‚ÄìTASK SCHEDULER
https://labs.f-secure.com/blog/scheduled-task-tampering/
Only SYSTEM can modify those keys. Need Silver Tickets.
ticketer.py -nthash [NTLM] -domain-sid S-1-5-21-861978250-176888651-3117036350 
-domain isengard.local -dc-ip 192.168.182.132 -extra-sid S-1-5-18 -spn
HOST/WIN-FCMCCB17G6U.isengard.local WIN-FCMCCB17G6U$ 
RPC ‚ÄìTASK SCHEDULER
RPC
WHAT THE FAX
RegisterServiceProviderEx allows 
the load of an arbitrary DLL after 
the Fax service restarts.
‚ñ™ Not installed on servers by 
default
‚ñ™ Present on Win10 workstations
RPC ‚ÄìWHAT THE FAX
https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/
MS-FAX/%5bMS-FAX%5d.pdf
After a fair amount of trial and error with last0x00, it was possible to find that 
what the FaxRegisterServiceProvider does is adding a few registry keys:
RPC ‚ÄìWHAT THE FAX
https://docs.microsoft.com/en-us/windows/win32/api/winfax/
nf-winfax-faxregisterserviceproviderw
RPC ‚ÄìWHAT THE FAX
# check the status of Fax
services.py ./developer:PI:EMAIL status -name fax
# add the relevant keys 
reg.py same add -keyName "HKLM\\Software\\Microsoft\\Fax\\Device Providers\\{fdd90a36-8160-
49b5-af34-3843e4c06417}"
reg.py same add -keyName "HKLM\\Software\\Microsoft\\Fax\\Device Providers\\{fdd90a36-8160-
49b5-af34-3843e4c06417}" -v FriendlyName -vt REG_SZ -vd 'Legit Fax Provider'
reg.py same add -keyName "HKLM\\Software\\Microsoft\\Fax\\Device Providers\\{fdd90a36-8160-
49b5-af34-3843e4c06417}" -v ProviderName -vt REG_SZ -vd 'Legit Fax Provider'
reg.py same add -keyName "HKLM\\Software\\Microsoft\\Fax\\Device Providers\\{fdd90a36-8160-
49b5-af34-3843e4c06417}" -v ImageName -vt REG_EXPAND_SZ -vd 'C:\dummy.dll'
reg.py same add -keyName "HKLM\\Software\\Microsoft\\Fax\\Device Providers\\{fdd90a36-8160-4 
9b5-af34-3843e4c06417}" -v APIVersion -vt REG_DWORD -vd 65536
# start the service and triggers the payload
services.py same start -name fax
RPC ‚ÄìWHAT THE FAX
Caveats:
‚ñ™ Will execute as NETWORK SERVICE ‚Äì needs 
other exploit for full compromise
‚ñ™ The process FXSSVC.exe will die immediately
RPC ‚ÄìWHAT THE FAX
You can easily change the user account associated with the FAX service (thanks 
cube0x0) and avoid the escalation problem. This clearly creates additional artefacts as 
you would need to change the service configuration via specific RPC calls.
# change service config
services.py ./developer:PI:EMAIL change -start_name "NT 
AUTHORITY\SYSTEM" -name fax
# revert
services.py ./developer:password @192.168.232.133 change -start_name "NT 
AUTHORITY\NetworkService" -name fax
RPC ‚ÄìWHAT THE FAX
Can create FaxServer.FaxServer COM object and invoke the Connect method locally via 
Outlook COM:
$a = [System.Activator]::CreateInstance([type]::GetTypeFromCLSID("0006F033-0000-
0000-C000-000000000046", ‚ÄùREMOTE"))
$fax = $a.CreateObject(‚ÄùFaxServer.FaxServer") 
$fax.Connect(‚Äù.‚Äù)
We will use the Outlook object again in the next sections üëÄ
RPC ‚ÄìFAX
RPC
NETTCPPORTSHARING
RPC  -NETTCPPORTSHARING
NetTcpPortSharing is a .NET based service that exists in most Windows systems. By 
default it‚Äôs disabled and configured to run as a virtual service account. 
The target binary is located at 
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\SMSvcHost.exe
.NET binary? Appdomain Manager Injection
RPC  -NETTCPPORTSHARING
All you need to do is:
‚ñ™ Drop a DLL in C:\Windows\Microsoft.NET\Framework64\v4.0.30319
‚ñ™ Modify the existing SMSvcHost.exe.config to specify the custom Appdomain
Manager
‚ñ™ Enable and start the service
RPC  -NETTCPPORTSHARING
‚ñ™ A small caveat is that the service by default is running as a virtual service account
‚ñ™ However, it is pretty simple to use ChangeServiceConfig2A to reconfigure the 
privileges needed
ChangeServiceConfig2A
RPC
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
NetTcpPortSharing
Uploads a binary on 
disk
Creates a new Registry 
Keys
Directly connect to 
create and trigger the 
execution
Unknown technique
Fax
Uploads a binary on 
disk
Creates a new Registry 
Keys
Directly connect to 
create and trigger the 
execution
Unknown Technique
a.k.a I don‚Äôt know what COM is but somehow I can pop calc
DCOM BASED
EXECUTION METHODS
Distributed Component Object Model (DCOM) is a technology that allows the creation of 
COM objects on network endpoints and invoke methods that will be executed on a remote 
host.
Popular methods used in the past for DCOM lateral movement:
‚ñ™ ShellBrowser
‚ñ™ Excel
‚ñ™ InternetExplorer
‚ñ™ MMC20
DCOM
DCOM
CONTROLPANELITEM