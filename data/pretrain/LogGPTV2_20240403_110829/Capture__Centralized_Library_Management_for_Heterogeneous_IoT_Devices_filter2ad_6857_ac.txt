Nest
Nest
Nest
Nest
Nest
Nest
D-Link
D-Link
D-Link
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
57
11
9
14
9
2019/08/09
2019/08/09
2015/10/14
2019/09/05
2015/06/30
2019/09/05
2019/09/04
2019/09/03
2019/08/09
2019/09/03
2019/09/03
2019/08/09
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
2011/10/25 - 2017/10/16
2013/11/19 - 2016/07/13
2014/07/15 - 2016/07/14
2014/06/05 - 2016/03/07
2014/07/09 - 2016/04/30
53
53
53
54
54
53
55
47
53
53
53
53
5
5
5
53
177
7
12
107
20
140
18
75
72
51
55
55
54
54
55
54
55
48
54
54
54
54
5
5
5
55
186
8
13
108
20
194
21
86
85
54
Table 3: Details of devices and ﬁrmware releases included in the measurement. For each device, we count the number of unique
libraries and unique library-version combinations across all ﬁrmware releases.
Firmware A*
Firmware B*
Capture Device Library
Capture Device Library
Capture Hub
Driver A*
Driver B*
Capture Driver Library
Capture Driver Library
Shared Security Libraries (e.g. OpenSSL)
Hub Monitor
& Enforce
Figure 5: Capture system architecture. Every device consists
local device ﬁrmware and driver on the hub. They form a
logical uniﬁed entity, Virtual Device Entity (orange dashed
box). The Capture Hub maintains a central version of common
libraries and has extra monitoring and enforce modules.
4 Capture Framework
To mitigate the security threats from outdated libraries in
device ﬁrmware reported in Section 3, we present Capture,
a novel architecture for deploying IoT ﬁrmware to support
centralized management of third-party libraries, alleviating
the need for library updates by individual vendors.
4.1 Overview
Figure 5 provides an overview of Capture. A Capture Hub
in the local network centralizes library security updates. Ev-
ery device has two components: a device ﬁrmware (F/W A*,
B*), and a remote driver (Driver A*, B*) running on the Cap-
ture Hub. Developers can use default drivers (provided by
Capture) or implement custom ones to use the latest libraries
on the hub. The device ﬁrmware and the driver use Capture
SDK libraries for network communication. Moreover, the
driver uses API wrappers provided by Capture to interact
with common libraries on the hub. If vendors need libraries
not provided by Capture, they can include custom dependen-
cies in their ﬁrmware while still beneﬁting from Capture’s
isolation protection. The Capture Hub Monitor and Enforce
module manages all drivers and provides runtime and network
isolation for all devices supported by it.
Threat Model. We assume that the Capture Hub is trusted,
and all standard wireless protocols and Linux tools we use to
provide isolation are up-to-date to address any vulnerabilities.
We consider an adversary who seeks to compromise IoT de-
vices through known vulnerabilities in unpatched third-party
libraries. Unlike prior efforts that restrict devices to explicitly
whitelisted hosts (e.g., the vendors’ cloud backend) [36, 39],
we allow devices to communicate with arbitrary hosts to avoid
limiting their functionality. Since local devices (or drivers)
may be compromised, our goal is to prevent them from being
able to affect other non-compromised devices and drivers in
the same home deployment. Attack vectors from zero-day
exploits (i.e. no patches available) and non-library vulnerabil-
ities (e.g., weak passwords) are out of the scope of this work.
In addition, we exclude side-channel attacks arising from the
shared hub access from different drivers.
4192    30th USENIX Security Symposium
USENIX Association
Intuitively, the main goal of Capture is to
Security Goals.
centralize library management by providing a consistent,
up-to-date set of third-party libraries for devices in the local
network, conﬁgured and managed by the central hub. Since
we do this by splitting the ﬁrmware across an IoT device and
a hub, Capture should not introduce new vulnerabilities or
attack opportunities. For example, Capture needs to preserve
device integrity by protecting communication that would
normally be on the device. Hence Capture needs to prevent
any entity from intercepting or impersonating a device with
its driver on the hub and vice-versa.
In addition, Capture needs to maintain proper isolation
between devices and drivers. This implies that compromised
devices should not be able to communicate with other hosts
on the same local network, and that compromised drivers on
the hub should not affect the operation of devices other than
the one that they represent.
4.2 Library Update Management
Capture alleviates the burden of patching security-critical
shared libraries, enabling device vendors to use the up-to-date
versions on the Capture Hub without managing patches them-
selves. Notably, vendors still implement their device ﬁrmware
and the corresponding drivers. However, they may be con-
cerned with losing control over devices’ stability whenever
Capture automatically updates shared libraries. These library
updates can potentially cause semantic changes (e.g., new
APIs) or unexpected bugs to break the existing functionality
of the drivers. Fortunately, prior work on patching vulnerable
libraries for Android apps provides an optimistic outlook [16],
reporting that 97.8% of apps using libraries with known vul-
nerabilities can be ﬁxed with a drop-in patched version of
the library. To determine whether this ﬁnding applies to IoT
devices, we analyze the dataset from Section 3 for potential
impacts of library updates on device functionality. We focus
on the OpenSSL library usage in Nest devices, since their
dataset has a comprehensive history of versions and upgrades.
OpenSSL Versioning. OpenSSL’s versioning scheme uses
letters to denote minor security patches and numbers for major
changes [51]. For example, an application using version 1.0.2a
can upgrade to 1.0.2b to ﬁx bugs and security vulnerabilities,
while an upgrade to 1.1.0 indicates new features and APIs.
Each major version has an end-of-life date, after which users
stop receiving security updates. OpenSSL’s staggered release
strategy supports multiple major versions at the same time,
providing a buffer to transition between versions. Our analysis
on Nest’s OpenSSL use ﬁnds that Nest always upgrades the
major version before the old one reaches end-of-life.
Maintain Multiple Majors in Parallel. The most stable
strategy to preserve device functionality is to support all
active major versions in parallel. The hub applies security
patches for each major version independently. According to
the OpenSSL’s release history [52,76], Capture has to support
two or three majors concurrently and needs to apply security
updates every few months. This strategy will not break any
Nest device’s functionality in our dataset, since they never
use any outdated major versions.
Only Maintain the Latest Major Version. Managing multi-
ple library versions in parallel may become complicated as
the number of libraries increase. A simple strategy is to only
keep one version per library on the hub, presumably the latest
major release. Based on our dataset, Nest devices use a non-
latest major version in 1238 out of 2184 days. This strategy
will cause version mismatches almost half of the time. Mixing
drivers intended for older versions with newer runtime can
be problematic. Although OpenSSL meticulously preserves
backward compatibility across major upgrades [51], we are
pessimistic about third-party libraries ’ stability in general.
Therefore, we use the major mismatch as a conservative es-
timator of potential functionality breakages. Choosing how
many major versions to support demonstrates the tradeoffs
between manageability and functionality.
Forceful Major Upgrades after End-of-Life. Vendors could
ignore library upgrades so long that it reaches the end-of-life
dates. Capture could forcefully upgrade major versions to
maintain security at the expense of potential functionality
breakages. Since Nest always upgrades OpenSSL to the next
major version before the end-of-life dates, we do not have
data to measure the impact of a forceful upgrade. However,
this tradeoff is a very difﬁcult yet open challenge. Prior works
proposed various strategies from blocking devices with inse-
cure libraries [39], quarantining insecure devices locally [22],
to preserving functionality at the expense of security [43]. We
plan to leave this as a conﬁgurable option for end-users to
make informed decisions based on their concerns.
4.3 Virtual Device Entities (VDEs)
An IoT device supporting Capture comprises of two com-
ponents: a Capture-enabled ﬁrmware on the device and an
associated software driver running on a hub, collectively form-
ing a Virtual Device Entity (VDE). Note that Capture creates a
unique VDE instance for every deployed device. Even if there
are multiple identical devices, Capture instantiates separate
VDE instances for each of them. Capture ensures conﬁden-
tiality within the VDE and enforces isolation across different
VDEs, as we will explain in the following sections.
Library Update Strategies. There are three strategies for
Capture to support multiple library versions concurrently.
Device Bootstrap. Figure 6 illustrates the process of boot-
strapping new devices and obtaining VDE. A device ﬁrst
connects to a setup network with pre-shared credentials, just
USENIX Association
30th USENIX Security Symposium    4193
Phase
Device
Capture Hub
Request Credential
1
VDE Discovery
Respond Credential
Generate VDE
2
Connect Network
Join Network
Reply Ready
Create Driver &
Conﬁgure Network
Figure 6: Device bootstrap procedure. In Step 1, the device
connects to the Capture Hub using a shared setup network.
Then it joins a VDE-speciﬁc VLAN network in Step 2 (dashed
box). Section 4.4 discusses more details on network conﬁgura-
tions. Section 4.6 addresses potential attacks during bootstrap.
like traditional home WiFi. In Step 1 , the Capture Hub cre-
ates a fresh VDE and prepares a VDE-speciﬁc VLAN on the
second operation network. After receiving the VDE-speciﬁc
credential, the device disconnects the setup network and joins
the operation network (Step 2 ), where the hub binds the
device to its VLAN. This transition won’t affect other exist-
ing devices, since they are connected to their VDE-speciﬁc
VLANs already. The hub creates a driver for the VDE, sets
up network interfaces and isolation, and enforces resource
isolation for the driver on the hub.
4.4 Communication Isolation
A Capture-enabled device essentially functions as a “local” de-
vice since it can only communicate with its driver on Capture
Hub and vice versa. Other communication, such as between
local devices or different drivers, is automatically blocked. We
achieve this in Capture by creating unique logical networks
for each VDE with its own subnet and virtual interface.
The Capture Hub simultaneously manages two separate
WiFi Access Points (APs). The ﬁrst one is a WPA2-Personal
AP with pre-shared credentials for the ﬁrst step of initializa-
tion (Figure 6), similar to current home WiFi. The second
AP uses WPA2-Enterprise and enforces VDE-based isola-
tion. Speciﬁcally, Capture Hub creates unique RADIUS user
accounts and constructs different virtual Network Interface
Cards (vNICs) for each VDE. Using enterprise features such
as VLAN and RADIUS authentication, the second AP binds
each VDE’s device into its own subnet and vNIC. The hub
binds the corresponding driver to the same vNIC interface
using TOMOYO [68], a Linux security module for mandatory
access control. If the driver needs Internet access, the hub cre-
ates a designated public-facing port and enables the driver’s
connection to the port via TOMOYO. We then conﬁgure the
ﬁrewall program iptables’s rulesets to block communica-
tions across vNICs to achieve VDE-based isolation. Capture’s
VDE-based isolation is inspired by DreamCatcher [22], which
shows vNIC-based isolation is effective against link-layer
spooﬁng. We extend DreamCatcher’s network isolation with
additional mandatory access control to accommodate Capture
Hub’s shared driver execution environment.
To bind multiple devices into different vNICs while using
a single WiFi AP, we utilize the VLAN isolation feature from
WPA2-Enterprise. While WPA2-Personal is common for
home users, popular WiFi modules used by vendors to build
their products already support WPA2-Enterprise [24]. Hence
we believe modern devices can support Capture and WPA2-
Enterprise either out of the box or with updated ﬁrmware. For
legacy devices without WPA2-Enterprise support, Capture
can create a new WPA2-Personal AP for each legacy device,
however that may run into software limitations of the number
of SSIDs per antenna [22]. An alternative approach is to create
unique WPA group keys for each device, isolating hosts under
one shared WPA2-Personal network [70]. Capture didn’t take
this approach as it requires modifying standard protocols.
4.5 Resource Isolation
Since Capture Hub executes multiple drivers, a key challenge
is to ensure secure and fair resource sharing on the hub. Cap-
ture needs to ensure slow or malicious drivers are contained
and cannot affect other VDE’s availability and private data.
Linux containers [45] seem like a natural choice for process
isolation. However, they are ill-suited for Capture since each
container has a copy of the libraries the driver needs. When-
ever the library is updated, all container images would have to
be updated and rebuilt, which conﬂicts with our goal of man-
aging libraries centrally. Instead, Capture provides resource
isolation and access control using lightweight Linux system
primitives. The Capture Hub creates a new Linux user account
per VDE, under which context the associated driver runs, ap-
plying standard Linux ﬁlesystem and memory protections. We
further limit the driver’s capability by utilizing the TOMOYO
Linux extension and its domain-based security management.
We assign each VDE and all of its subprocesses to the same
security domain and enforce security policies for network-
ing and ﬁle systems. Finally, we used Linux cgroups [34],
a key building block for implementing containers, to limit
the resources used by each VDE. Linux cgroups are known
to be an efﬁcient and low overhead mechanism to account
for resource usage [55, 79]. Currently we statically set the
CPU and the memory resources for each driver to equally
share the total system resources, but in the future, we can add
support for drivers to specify their resource demands (such as
via manifest ﬁles during installation, similar to mobile apps)
and dynamically enforce them.
4.6 Security Analysis
External Threats. Capture protects devices from external
threats by securing the driver components, which are reach-
able from the Internet. This is done by the Capture Hub, which
ensures that the latest library versions are installed automat-
4194    30th USENIX Security Symposium
USENIX Association
ically and used by the drivers, without the device vendors
having to do this. Unlike drivers, the actual devices are iso-
lated from other hosts in the local network. Manufacturers
still implement custom ﬁrmware running on their devices,
meaning that some outdated libraries and vulnerabilities may
still exist. However, since the network isolation in Capture
only allows communication between driver and device, it lim-