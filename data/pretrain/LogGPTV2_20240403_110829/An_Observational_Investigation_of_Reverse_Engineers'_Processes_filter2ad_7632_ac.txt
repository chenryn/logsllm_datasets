stead, we asked them to discuss where their normal process
on a larger program diﬀered from process they showed with
the challenge binary.
While we know of no good RE demographics surveys, our
participant demographics are similar to bug-bounty hunters,
who commonly perform RE tasks. Our population is mostly
male (94%), young (63% < 30) and well educated (75% with
a bachelor’s degree). HackerOne [72] and Bugcrowd report
similar genders (91% of Bugcrowd hunters), ages (84% < 35
5The screening full questionnaire can be found in an extended form of
this paper at https://ter.ps/REStudy2020
6An exercise program designed to expose REs to interesting concepts in
a simple setting
ID1
Edu.
Program
B.S.
P01M Malware
HS
System
P02V
M.S.
Challenge
P03V
Challenge
P04V
B.S.
Application M.S.
P05V
Challenge
P06V
System
P07V
Firmware
P08V
P09V
Firmware
P10B Malware
P11M Malware
System
P12V
P13V
Application
P14M Malware
P15V
P16M Malware
1 M: Malware analysis, V: Vulnerability discovery, B: Both
2 Scale from 0-5, with 0 indicating no skill and 5 indicating an
expert
Recruitment
Conference
Conference
Conference
Conference
Forum
Forum
Forum
Forum
Forum
Organization
Forum
Forum
Forum
Forum
Forum
Forum
HS
M.S.
Assoc.
B.S.
M.S.
Ph.D.
B.S.
B.S.
M.S.
HS
M.S.
7
8
6
11
6
10
10
5
14
15
10
8
21
5
4
3
Application
Skill2 Exp.
4
4
4
5
5
4
5
4
4
5
3
3
5
4
3
3
Table 1: Participant demographics.
and 77% < 30, respectively), and education levels (68% and
63% with a bachelor’s, respectively) for bug-bounty hunters.
5 Results: An RE Process Model
Across all participants, we observed at a high-level (RQ1)
their RE process could be divided into three distinct phases:
Overview, Sub-component scanning, and Focused experi-
mentation. Beginning with a general goal—e.g., identifying
vulnerabilities or malicious behaviors—REs seek a broad
overview of the program’s functionality (overview). They use
this to establish initial hypotheses and questions which fo-
cus investigation on certain sub-components, in which they
only review subsets of information (sub-component scanning).
Their focused review produces more reﬁned hypotheses and
questions. Finally, they attempt to test these hypotheses and
answer speciﬁc questions through execution or in-depth static
analysis (focused experimentation). Their detailed analysis
results are then fed back to the second phase for further inves-
tigation, iteratively reﬁning questions and hypotheses until
the overall goals are achieved. Each phase has its own set of
questions, methods, and beacons that make up the technical
approaches taken by REs (RQ2). In this section, we describe
each phase in detail and highlight diﬀerences between RE and
traditional program comprehension tasks (RQ3). In the next
section, we discuss trends observed across these phases, in-
cluding RE process components common to multiple phases,
such as factors driving their decision-making. Figure 1 pro-
vides an overview of each phase of analysis.
Note, in this section and the next, we give the number of
REs who expressed each idea. We include counts to indicate
prevalence, but a participant not expressing an idea may only
mean they failed to state it, not that they disagree with it.
1880    29th USENIX Security Symposium
USENIX Association
Therefore, we do not perform comparisons between partici-
pants using statistical hypothesis tests. It is uncertain whether
our results generalize past our sample, but they suggest future
work and give novel insights into the human factors of RE.
Somewhat to our surprise, we generally observed the same
process and methods used by REs performing both malware
analysis and vulnerability discovery. In a sense, malware ana-
lysts are also seeking an exploit: a unique execution or code
pattern that can be exploited as a signature or used to recover
from an attack (e.g., ransomware). We did observe diﬀerences
between groups, but only in their operationalization of the
analysis process. For example, the two groups focused on
diﬀerent APIs and functionality (e.g., vulnerability ﬁnders
looked at memory management functions and malware ana-
lysts focused on network calls). However, because our focus
is on the high-level process and methods used, we discuss
both groups together in the following sections.
5.1 Overview (RQ1)
Reverse engineers may have a short description of the pro-
gram they are investigating (N=2), some familiarity with its
user interface (N=2), or an intuition from prior experience
about the functions the program likely performs (N=7). How-
ever, they generally do not have prior knowledge about the pro-
gram’s organization or implementation (N=16). They might
guess that the program performs cryptographic functions be-
cause it is a secure messaging app, but they do not know the
algorithm or libraries used, or where in the code cryptographic
protocols are implemented. Therefore, they start by seeking
a high-level program view (N=16). This guides which parts
of the program to prioritize for more complex investigation.
P01M said this allows him to “get more to the core of what is
going on with this binary.” Reverse engineers approach this
phase in several ways. The left section of Figure 1 summa-
rizes the overview phase’s simulation methods, beacons, and
outputs. We discuss these items in more detail below.
Identify the strings and APIs used (RQ2). Most REs be-
gin by listing the strings and API calls used by the program
(N=15). These lists allow them to quickly identify interesting
components. P03V gave the example that “if this was a piece
of malware. . . and I knew that it was opening up a ﬁle or a reg-
istry entry, I would go to imports and look for library calls that
make sense. Like refile could be a good one. Then I would
ﬁnd where that is called to ﬁnd where malicious behavior
starts.” In some cases, REs begin with speciﬁc functionality
they expect the program to perform and search for related
strings and APIs (N=7). As an example, P08V performed a
“grep over the entire program looking for httpd because a lot
of times these programs have a watchdog that includes a lot
of additional conﬁguration details.”
Run the program and observe its behavior (RQ2). Many
REs execute the program to see how it behaves under basic
usage (N=7). When running the program, some REs look at
UI elements (e.g., error messages), then search for them in
the code, marking associated program components for further
review (N=3). For example, P13V began by “starting the
software and looking for what is being done.” He was shown
a pop-up that said he had limited features with the free version.
He observed that there was “no place I can put a [access] code,
so it must be making a web services check” to determine
license status. Next, he opened the program in a disassembler
and searched for the pop-up’s text “because you expect there
to be a check around where those strings are.”
Review program metadata (RQ2). Some REs looked at in-
formation beyond the binary or execution trace, such as the ﬁle
metadata (N=3), any additional resources loaded (N=3) (e.g.,
images or additional binaries), function size (N=2), history of
recent changes (N=1), where vulnerabilities were found previ-
ously (N=1), and security mitigations used (N=1) (e.g., DEP
or ASLR). This information gives further insights into pro-
gram functionality and can help REs know what not to look
for. P04V said “I’ve been burned in the past. You kind of end
up down a long rabbit hole that you have to step completely
back from if you don’t realize these things. . . For example,
for PIE [Position Independent Executables] there has to be
some sort of program relative read or write or some sort of
address disclosure that allows me to defeat the randomization.
So that’s one thing to look for early on.”
Malware analysts perform overview after unpacking
(RQ2). Many malware binaries are stored in obfuscated form
and only deobfuscated at execution time to complicate RE.
This is commonly referred to as packing. Therefore, REs
must ﬁrst unpack the binary before strings and imported APIs
become intelligible (N=2). However, once unpacking is per-
formed and the binary is in a readable state, REs perform the
same overview analyses described above (N=2).
Overview is unique to RE (RQ3). In most other program
comprehension tasks, the area of code to focus on is known
at the outset based on the error being debugged [73] or the
functionality being modiﬁed or updated [34, 74]. Addition-
ally, developers performing program comprehension tasks
typically have access to additional resources, such as docu-
mentation and the original developers, to provide high-level
understanding [75], making overview analyses unnecessary.
5.2 Sub-component Scanning (RQ1)
Based on ﬁndings from their overview, REs next shift their
attention to program sub-components, searching for insights
into the “how” of program functionality. By focusing on sub-
components, sub-component scanning allows REs to quickly
identify or rule out hypotheses and reﬁne their view of the
program. P08V explained that he scanned the code instead of
reading line-by-line, saying, “I’m going through it at a high
USENIX Association
29th USENIX Security Symposium    1881
Figure 1: Overview of REs’ three analysis phases. For each phase, the analyzed program scope is shown at the top, simulation
methods used are in rectangles, and the analysis results are below the phase. Finally, the phase’s beacons are at the bottom of the
ﬁgure. Segments diﬀering the most from the program comprehension literature are colored orange.
“it’s a very common function for obfuscation. . . it’s likely set-
ting up an alternate input table” to hide obviously malicious
calls from an RE looking only at the standard import table.
REs infer program behaviors both from individual instances
(N=16) and speciﬁc sequences (N=12) of these items. For ex-
ample, while reverse engineering the code in Figure 2, P11M
ﬁrst scanned the strings on lines 44-46 and recognized them
as well-known websites, generally reachable by any device
connected to the Internet. He then looked at the API calls
and strings on lines 51-56 and said that “it’s just trying to
make a connection to each of those [websites].” By looking at
the constant checked on line 66, he inferred that “if it’s able
to make a connection, it’s going to return a non-zero value
[at line 66].” Putting this all together and comparing to past
experience, P11M explained, “usually you see this activity if
something is trying to see if it has connectivity.”
REs also make inferences from less obvious information.
Many review control-ﬂow structures (N=13) for common
patterns. When studying a router’s ﬁrmware, P08V noticed
an assembly code structure corresponding to a switch state-
ment comparing a variable to several constants. From this,
he assumed that it was a “comparison between the device’s
product ID and a number of diﬀerent product IDs. And then
it’s returning diﬀerent numbers based oﬀ that. So it looks
like it’s trying to ascertain what product it is and then doing