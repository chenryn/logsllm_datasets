parameters that allow the VMM to control the guest VMs,
which gives the VMM considerable flexibility in determining
which hardware to expose to the guest. For example, a VMM
can configure the VMCS to determine which instruction and
which exception in the VMX non-root mode can cause a VM
exit. Moreover, a guest can manually trigger a VM exit through
the VMCALL instruction.
D. SMAP in Processors
To prevent the kernel from inadvertently executing mali-
cious code in user-space (e.g., by dereferencing a corrupted
pointer), Intel and AMD provide the Supervisor-mode
Access Prevention (SMAP) hardware feature to disable the
kernel access to the user space memory [29]. Other processor
vendors also provide similar features, such as the Privileged
Access Never (PAN) in ARM [5] and the Permit Supervisor
User Memory Access (SUM) in RISC-V [43]. Because the
kernel code requires access to the user space directly and
frequently (e.g., I/O operations), enabling and disabling these
features are typically very fast.
In x86, the running states are divided into the supervisor-
mode (hereinafter referred to as S-mode) and the user-mode
(hereinafter referred to as U-mode). When the current privileged
level (CPL) is 3, the state is U-mode, and when the CPL is less
than 3, the state is S-mode. Meanwhile, the memory pages are
also divided into the supervisor-mode page (hereinafter referred
to as S-page) and the user-mode page (referred to as U-page)
based on the U/S bit in the page table entry. When SMAP
is disabled, the code in the S-mode can access the U-page.
When SMAP is enabled, the code in the S-mode cannot access
the U-page. Code in the S-mode can enable/disable the access
to an U-page by setting the AC (Access Control) flag of the
RFLAGS. The processor provides two privileged instructions
(executable only in ring 0), STAC and CLAC, to set and clear
the flag. In addition, when the POPFQ instruction is executed
in the S-mode (ring 0-2), the AC flag can also be modified.
We measured the latency of POPFQ, STAC/CLAC, and WRPKRU
(used to configure MPK) to identify their micro-architectural
characteristics. Table I summarizes the results. STAC/CLAC has
a much smaller latency than WRPKRU does. As such, switching
SMAP using STAC/CLAC will be much faster than switching
MPK, which motivates us to develop SEIMI.
3
TABLE I: Latency of instrs. which are measured 10 million times.
Instructions
VMCALL
SYSCALL
POPFQ
WRPKRU
STAC/CLAC
Cycles
541.7
95.2
22.4
18.9
8.6
Description
Complete a hypercall (trigger a VM exit).
Complete a system call (trap into the kernel).
Pop stack into the RFLAGS register.
Update the access right of a pkey in MPK.
Set/Clear the AC flag in the RFLAG register.
III. OVERVIEW
A. Threat Model
SEIMI shares a similar threat model as traditional memory-
corruption defense mechanisms. The goal of SEIMI is to
provide intra-process isolation for a safe memory region
that is required by defense mechanisms against memory-
corruption attacks. The target programs can be server programs
(e.g., Nginx web server) or local programs (e.g., browsers).
We assume that the target programs may have the memory-
corruption vulnerabilities that could be exploited by adversaries
to gain arbitrary read and write capabilities. We also assume
that the developers of the programs are benign, so malware
is out of the scope. However, the target programs may allow
local execution that is in a contained environment. For instance,
adversaries can trick web users to click malicious URL links,
and malicious script code can run locally in a browser.
We assume that a memory-corruption defense itself (includ-
ing the IH-based defenses mentioned in §II-B) is secure. That is,
breaking SEIMI’s isolation is a prerequisite for compromising
the defense mechanism. Since the defense mechanism aims to
prevent memory-corruption attacks, when SEIMI is effective,
adversaries cannot launch code-injection attacks or code-reuse
attacks (e.g., using unintended instructions) to maliciously
disable or enable SMAP. In other words, the target defense
mechanism and SEIMI protect each other. We further assume
that the target OS is secure and trusted.
B. High-Level Design
Because application code is intended to run in the user mode,
all existing intra-process memory isolation techniques utilize
only the hardware support available in this mode, such as Intel
MPK and MPX. In this paper, we turn our attention to the
privileged hardware feature—SMAP (see §II-D). As shown in
Table I, switching SMAP (using STAC/CLAC instructions) is
much faster (8.6 vs. 18.9 CPU cycles) than switching MPK.
Therefore, we conjecture that domain-based memory isolation
techniques using SMAP would lead to better performance,
which motivates the development of SEIMI.
Figure 1 shows the basic idea of SEIMI. The isolated
memory region is allocated in the U-pages, and the other
memory regions are set to be S-pages. The application runs
in ring 0 (because STAC/CLAC instructions can only run in
this ring level). SMAP is enabled by default. To access the
isolated memory, the trusted code temporarily disables SMAP
by executing STAC. When the access completes, the trusted
code executes CLAC to re-enable SMAP to prevent accesses
from untrusted code. Although this mechanism exposes a time
window in which SMAP is disabled, the window cannot be
Fig. 1: The memory layout of the process in ring 0 under SEIMI.
exploited to launch the concurrent attacks (i.e., accessing the
isolated memory region from other threads). This is because
the disabling of SMAP is through the RFLAGS register which is
thread-private; it is effective in only the current thread. More
details about this are discussed in §V-B.
Running untrusted code in ring 0 may corrupt the kernel.
To address this problem, SEIMI places the OS kernel in “ring
-1”. To this end, we adopt the Intel VT-x technique to separate
the target application and the kernel, i.e., placing the target
process in the VMX non-root mode (guest) and the kernel in
the VMX root mode (host).
C. Key Challenges
Although running the user code in ring 0 of the VMX non-
root mode could realize the SMAP-based memory isolation
without corrupting the kernel, it still faces several challenges.
C-1: Distinguishing SMAP reads and writes.
In some
cases, sensitive data may require integrity protection only;
the read restriction brings extra performance overhead. In
some other cases, the defense mechanisms would require
sensitive data to be readable but not writable to untrusted code.
These situations demand SEIMI to distinguish read and write
operations. Unfortunately, SMAP cannot provide separated read
and write permissions.
C-2: Preventing leakage/manipulation of the privileged
data structures.
In general, a guest VM needs to manage its
own memory, interrupts, exceptions, I/O, etc. Some data struc-
tures are privileged, e.g., the page tables, the interrupt
descriptor table (IDT), and the segment descriptor
table. An attacker in ring 0 may leak or manipulate these
structures to gain a more powerful ability, e.g., modifying the
page table to disable the DEP mechanism.
C-3: Preventing abuses of the privileged hardware features.
When the process runs in ring 0, privileged hardware features,
in addition to SMAP, become available. Attackers may abuse
privileged instructions to launch more powerful attacks. For
example, an attacker can use the MOV to %CR0 instruction to
clear the WP bit to gain the write permission to the non-writable
pages (the code pages).
D. Approach Overview
Separating read/write in SMAP. To address challenge C-1,
we propose SMAP read/write separation based on a shared-
memory method. When allocating the isolated memory region
for the sensitive data, we allocate two virtual memory areas
for the same physical memory region; one is configured as
U-pages that can be read and written (hereinafter referred
to as the isolated U-page region), and the other is set to be
S-pages that can only be read (hereinafter referred to as the
4
SSSSSUUUSupervisor-modePageUser-modePageRegular MemoryIsolated MemorySSRWCode (RX)Heap (RW)Stack (RW)Access DeniedRing 0UUSMAPFig. 2: The architecture overview of SEIMI.
isolated S-page region). When the trusted code needs to modify
the sensitive data, it operates the isolated U-page region after
disabling SMAP. When it only needs to read the sensitive data,
it operates the isolated S-page region directly.
Protecting privileged data structures. To address challenge
C-2, we place the privileged data structures and their operations
into the VMX root mode. In general, the operations on these
structures are only performed when the process accesses the
kernel through events such as system calls, exceptions, and
interrupts. We therefore leverage Intel VT-x to intercept and
force all these events to trigger VM exits, and then perform
corresponding operations in the VMX root mode. This way,
the data structures stay only in the VMX root mode and will
not be exposed to the VMX non-root mode.
Preventing privileged instructions. The privileged hardware
features are all used through the privileged instructions. To
address challenge C-3, we comprehensively collect and protect
all the privileged instructions using multiple new techniques.
In particular, SEIMI sanitizes the execution of all privileged
instructions in the VMX non-root mode by (i) triggering the
VM exits and stopping the execution, (ii) invalidating the
execution results, and (iii) raising processor exceptions and
disabling the execution.
IV. SECURELY EXECUTING USER CODE IN RING 0
Figure 2 shows the architecture overview of SEIMI. The
core of SEIMI is a kernel module that manages VT-x. It
enables VT-x and places the kernel in the VMX root mode
when loaded. Processes using SEIMI run in ring 0 of the VMX
non-root mode so that they have direct access to SMAP, while
other processes run in ring 3 of the VMX root mode. This
arrangement is transparent to the kernel; SEIMI automatically
switches the VMX modes when the execution returns from the
kernel to the target process.
The SEIMI module includes three key components: mem-
ory management, privileged-instruction prevention, and event
redirection. The memory management component is used to
configure the regular/isolated memory region in the target
process to realize the SMAP-based isolation (§IV-A). The
privileged-instruction prevention component is used to prevent
the privileged instructions from being abused by attackers
(§IV-B). The event redirection component is used to configure
and intercept the VM exits that are triggered when the process
accesses the kernel
interrupts, and
exceptions. After intercepting these events, it delivers the
requests to the kernel for actual processing (§IV-C). The three
components, as a whole, ensure the safe running of user code
in ring 0 and achieve the SMAP-based memory isolation.
through system calls,
5
Fig. 3: The memory management in SEIMI.
A. Memory Management
In contrast to traditional VMs, SEIMI does not have an OS
running in the VMX non-root mode that takes care of memory
management. Therefore, SEIMI has to help the guest manage
its page table, which, however, must satisfy the following
requirements:
• R-1: Because the host kernel handles the system calls from
the guest, the memory layout of the user space should remain
the same in both guest and host page tables.
• R-2: The physical memory of the guest should be managed
by the host kernel directly.
• R-3: SEIMI should be able to flexibly configure the U-page
and the S-page in the guest virtual memory space.
• R-4: The guest should not access the memory in the host.
A simple solution that satisfies the requirements is to copy (to
satisfy R-1 and R-2) the host page table of the user space (to
satisfy R-4) as the guest page table in the SEIMI module. The
guest page table contains the mapping from the guest virtual
address to the host physical address directly, and changes the
pages in the non-isolated memory space to the S-page (satisfy
R-3). Because the guest page tables are allocated in the host
kernel memory, and the kernel memory is invisible in the guest
page table, the guest page table will not be exposed to attackers.
However, since the page table is a tree structure, and there are
four levels in X86_64 (PML4, PDPT, PD, PT), this solution
has to copy the entire page table, which is complicated and
expensive when tracking all updates of the host page table and
synchronize them with the guest page table.
A shadow mechanism for (only) page-table root. To reduce
the time and space cost, we propose an alternative solution that
reuses the last three level page tables, and copies only the first
level page table, i.e., PML4. The PML4 page has 512 entries;
each indexes 512GB of virtual memory space, so the whole
virtual address space is 256TB. Among them, the first 256
entries point to the user space while the last 256 entries point
to the kernel space; the user and the kernel space are each
128TB. We copy the PML4 page of the host page table to a
new page, which we call the PML4’ page. In the PML4’ page,
we clear the 256th~511th entries (because the guest should
not access the kernel pages), and the 0th~255th entries of the
VMX root, Ring 0OS  KernelSEIMI Kernel ModuleVMX root, Ring 3Other ProcessesVMX non-root, Ring 0Target ProcessUserKernelU···U···SSPML4Host CR3#0#511···#256#255···512GU1GPDPTU2MPage DirectoryU4KPage Table4KB PageS···UNULLPML4’Guest CR3#0#511···#255···Supervisor-Page4KB PageUser-PageUser-Mode EntryUSupervisor-Mode EntrySCopy & Sync•#0—#254entriesonlychangetheU/Sbit.•#256—#511entriesonlychangethePbit.U···U···SS#0#511···#256#255···512GU1G… …S···UNULLPML4’#0#511···#255#254···#254 and #255 reference the same PDPT.S•TheR/Wbitof#255entryissetto1.•TheR/Wbitof#254entryissetto0.PML4PDPT(a)(b)Host CR3Guest CR3Shared MemoryTABLE II: The privileged instructions and the instructions that will
change the behaviors in different rings in the 64-Bit mode of X86_64.
Method
Line Type Detailed Instructions
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
VM[RESUME/READ/WRITE/...], INVEPT, INVVPID
INVD, XSETBV
ENCLS (e.g, ECREATE, EADD, EINIT, EDBGRD...)
RDMSR, WRMSR
IN, OUT, IN[S/SB/SW/SD], OUT[S/SB/SW/SD]