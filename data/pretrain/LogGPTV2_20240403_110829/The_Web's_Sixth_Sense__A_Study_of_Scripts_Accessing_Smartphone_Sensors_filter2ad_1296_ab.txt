### 3.2 Mimicking Sensor Events
The browser we used for crawling does not have real sensors, so we added extra logic to OpenWPM-Mobile to trigger artificial sensor events with realistic values for all four device APIs. To ensure the sensor values were within a plausible range, we first obtained them from real mobile browsers using a test page. To trace the usage of these values through scripts, we combined fixed values with a small random noise. For example, for the alpha, beta, and gamma components of the `deviceorientation` event, we used base values of 43.1234, 32.9876, and 21.6543, respectively, and added random noise with five leading zeros (e.g., 0.000005468). The fixed base values allowed us to track sensor values sent in HTTP requests, while the random noise prevented unrealistic data with fixed values.

### 3.3 Data Collection Setup
We crawled the Alexa top 100K ranked websites [5] using OpenWPM-Mobile. The crawling machines were hosted in two different geographical locations: one at the University of Illinois in the United States and the other at a data center in Frankfurt, Germany. We conducted two separate crawls of the top 100K sites in the US (US1, collected May 17–21, 2018, and US2, collected May 27–June 1, 2018) and one from Germany (EU1, collected May 17–21, 2018). US1 is our default dataset, and most of our analysis is based on it; the other crawls are analyzed in Section 4.3. Figure 1 provides an overview of the data collection and processing pipeline. Our datasets are available to other researchers [17].

### 3.4 Feature Extraction
To characterize and analyze script behavior, we first represent script behavior as vectors of binary features. We extract these features from the JavaScript and HTTP instrumentation data collected during the crawls. For each script, we extract two types of features: low-level and high-level, as described below.

#### Low-level Features
Low-level features represent browser properties accessed and function calls made by the script. OpenWPM instruments various browser properties relevant to fingerprinting and tracking using JavaScript getter and setter methods. We define two corresponding features:
- `get_SymbolName`: Set to 1 when a particular property is accessed.
- `set_SymbolName`: Set to 1 when a property is written to.

For example, a script that reads the user-agent property would have the `get_window.navigator.userAgent` feature, and a script that sets a cookie would have the `set_window.document.cookie` feature.

OpenWPM also tracks calls to JavaScript APIs related to fingerprinting, such as `HTMLCanvasElement.toDataURL` and `BatteryManager.valueOf`. We represent these calls with a `call_functionName` feature. Additionally, we create a special set of features for the `addEventListener` call to capture the type of event the script is listening for. For example:
```javascript
window.addEventListener("devicemotion", ...)
```
would result in the `addEventListener_devicemotion` feature being set for the script. The four types of low-level features are summarized in Table 1.

#### High-level Features
High-level features capture the tracking-related behavior of scripts. These features include whether a script uses different browser fingerprinting techniques, such as canvas or audio-context fingerprinting, and whether the script is blocked by certain adblocker lists. We use techniques from existing literature [1, 31] to detect fingerprinting techniques and check the blocked status of the script using three popular ad-blocking/tracking protection lists: EasyList [27], EasyPrivacy [28], and Disconnect [25]. The full list of high-level features is given in Table 2.

### 3.5 Feature Aggregation
We produce a feature vector for each script loaded by each site in the crawl. For analysis, we aggregate these feature vectors in three ways: site, domain, and URL. 
- **Site-level aggregation** considers the features used by all scripts loaded by a given site.
- **Domain-level aggregation** captures all scripts (across all sites) served from a given domain to identify major players who perform sensor access. We use the Public Suffix + 1 (PS+1) domain representation, commonly used in web privacy measurement literature to group domains issued to a single entity [50, 57].
- **URL-level aggregation** groups accesses by script URL to capture the use of the same script across different sites, discarding the fragment and query string URL components [7] (i.e., the part of the URL after the ?, & or # characters), as these are often used to pass script parameters or circumvent caching.

When performing this aggregation, we compute a binary OR of the feature vectors of the individual instances. In other words, if any member of the grouping exhibits a certain feature, the feature is assigned to the script. For example, if any script served by a given domain performs canvas fingerprinting, we assign the `canvas_fingerprinting` feature to that domain.

### 4. MEASUREMENT RESULTS
In this section, we highlight the overall prominence of scripts accessing different device sensors, showcase different ways in which scripts send raw sensor data to remote servers, and examine the stability of our findings across different crawls in the same and different geolocations. US1 is our default dataset unless stated otherwise.

#### 4.1 Prevalence of Scripts
First, we examine how often device sensors are accessed by scripts. Table 3 shows that sensor APIs are accessed on 3,695 of the 100K websites by scripts served from 603 distinct domains. Orientation and motion sensors are the most frequently accessed, on 2,653 and 2,036 sites, respectively. This can be explained by common browser support for these APIs. Light and proximity sensors, which are only supported by Firefox, are accessed on fewer than 200 sites each.

| Sensor | Num. of Sites | Num. of Script Domains |
|--------|---------------|------------------------|
| Motion | 2,653         | 384                    |
| Orientation | 2,036      | 420                    |
| Proximity | 186          | 50                     |
| Light | 181            | 35                     |
| Total | 3,695         | 603                    |

We also look at the distribution of the sensor-accessing scripts among the Alexa top 100K sites. Figure 2 shows the distribution of the scripts across different ranked sites. Interestingly, many sensor-accessing scripts are served on top-ranked websites. Table 4 provides a more detailed overview of the most common scripts that access sensor APIs, represented by their Public Suffix + 1 (PS+1) addresses. We calculated the prominence metric developed by Englehardt and Narayanan [31], which captures the rank of the different websites where a given script is loaded and sorts the scripts according to this metric.

Table 4 shows that scripts from `serving-sys.com`, which belongs to the advertising company Sizmek [75], access motion sensor data on 815 of the 100K sites crawled. DoubleVerify, which has a very similar prominence score, provides advertising impression verification services [26] and has been known to use canvas fingerprinting [31]. The most prevalent scripts that access proximity and light sensors commonly belong to ad verification and fraud detection companies such as `b2c.com` and `adsafeprotected.com`. Both scripts also use battery and AudioContext API fingerprinting.

Although present on only 417 sites, the `alicdn.com` script has the highest prominence score (0.3303) across all scripts. This is largely because a script originating from `alicdn.com` accessed device orientation data on five of the top 100 sites, including `taobao.com` (Alexa global rank 9), the most popular site in our measurement where we detected sensor access. Table 5 shows the breakdown of sensor-accessing scripts in terms of first and third parties. While web measurement research commonly focuses on third-party tracking [50], we find that first-party scripts that access sensor APIs are slightly more common than third-party scripts. Our sensor exfiltration analysis of the scripts in Section 4.2 revealed that many bot detection and mitigation scripts, such as those provided by `perimeterx.net` and `b2c.com`, are served from the clients' first-party domains.

#### 4.2 Sensor Data Exfiltration
After identifying scripts that access device sensors, we investigate whether these scripts send raw sensor data to remote servers. To do this, we spoof expected sensor values, as described in Section 3.2. We then analyze HTTP request headers and POST request bodies obtained through OpenWPM’s instrumentation to identify the presence of spoofed sensor values. We found several domains that access and send raw sensor data to remote servers, either in clear text or in base64 encoded form.

Table 6 highlights the top ten script domains that send sensor data to remote servers. `perimeterx.com` (a bot detection company) and `b2c.com` (an ad fraud detection company) are the most prevalent scripts that exfiltrate sensor readings. Additionally, we found that `priceline.com` and `kayak.com` serve a copy of the `perimeterx.com` script from their domain (as a first-party script), which in turn reads and sends sensor data. These scripts send anywhere from one to tens of sensor readings to remote servers. The majority of the scripts (eight out of ten) encode sensor data before sending it to a remote server. Appendix C lists examples of scripts sending sensor data to remote servers. We also found that certain scripts send statistical aggregates of sensor readings, and others obfuscate the code used to process and send sensor data to a remote server. More examples are available in Section 5.5.

While detecting the exfiltration of spoofed sensor values, we use HTTP instrumentation data provided by OpenWPM.