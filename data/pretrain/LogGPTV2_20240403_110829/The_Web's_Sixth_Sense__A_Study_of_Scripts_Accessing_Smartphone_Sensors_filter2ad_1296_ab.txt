3.2 Mimicking Sensor Events
Since the browser we used for crawling is not equipped with real
sensors, we added extra logic into OpenWPM-Mobile to trigger
artificial sensor events with realistic values for all four of the de-
vice APIs. We ensured that the sensor values were in a plausible
range by first obtaining them from real mobile browsers through a
test page. To allow us to trace the usage of these values through
scripts, we used a combination of fixed values and a small random
noise. For instance, for the alpha, beta and gamma components of
the deviceorientation event, we used 43.1234, 32.9876, 21.6543 as
the base values and added random noise with five leading zeros
(e.g., 0.000005468). This fixed base values allowed us to track sensor
values that are sent within the HTTP requests. The random noise,
on the other hand, prevented unrealistic sensor data with fixed
values.
3.3 Data Collection Setup
We crawl the Alexa top 100K ranked4 websites [5] using OpenWPM-
Mobile. The crawling machines are hosted in two different geo-
graphical locations; one in the United States, at the University of
Illinois, and the other in Europe, at a data center in Frankfurt. We
conducted two separate crawls of the top 100K sites in US (produc-
ing crawls US1, collected May 17–21, 2018 and US2, collected May
3https://dxr.mozilla.org/mozilla-esr45/source/mobile/android/app/mobile.js
4Using rankings dated May 12, 2018.
Table 1: Overview of different types of low-level features.
Feature name format
get_symbolName
set_symbolName
call_functionName
addEventListener_eventName
Operation
Property lookup
Property assignment
Function call
addEventListener call
27–June 1, 2018) and one from Germany (EU1, collected May 17–21,
2018). US1 is our default dataset and thus majority of our analysis is
evaluated on US1; the other crawls are analyzed in section 4.3. Fig-
ure 1 highlights the overall data collection and processing pipeline.
We are making our data sets available to other researchers [17].
3.4 Feature Extraction
To be able to characterize and analyze script behavior, we first
represent script behavior as vectors of binary features. We extract
features from the JavaScript and HTTP instrumentation data col-
lected during the crawls. For each script we extract two types of
features: low- and high-level, as described below.
Low-level features: Low-level features represent browser prop-
erties accessed and function calls made by the script. OpenWPM in-
struments various browser properties relevant to fingerprinting and
tracking using JavaScript getter and setter methods. We define two
corresponding features: get_SymbolName that is set to 1 when a par-
ticular property is accessed and set_SymbolName that is set when
a property is written to. For example, a script that reads the user-
agent property would have the get_window.navigator.userAgent
feature, and a script that sets a cookie would have the set_win-
dow.document.cookie feature.
OpenWPM also tracks a number of calls to JavaScript APIs
that are related to fingerprinting, such as HTMLCanvasElement.
toDataURL and BatteryManager.valueOf. We represent calls with
a call_functionName feature. We create a special set of features
for the addEventListener call to capture the type of event that the
scripts are listening for. For example:
window.addEventListener("devicemotion",. . .)
would result in the addEventListener_devicemotion feature being
set for the script. The four types of low-level features are summa-
rized in Table 1.
High-level features: The high-level features capture the track-
ing related behavior of scripts. The features include whether a
Figure 1: Overview of data collection and processing work flow.
script is using different browser fingerprinting techniques, such as
canvas or audio-context fingerprinting, and whether the script is
blocked by certain adblocker list or not. We use techniques from
existing literature [1, 31] to detect fingerprinting techniques. We
check the blocked status of the script by using three popular ad-
blocking/tracking protection lists: EasyList [27], EasyPrivacy [28],
and Disconnect [25]. The full list of high-level features are given in
Table 2.
3.5 Feature Aggregation
We produce a feature vector for each script loaded by each site in
the crawl. For analysis purpose, we aggregate these feature vectors
in three different ways: site, domain, and url. Site-level aggregation
considers the features used by all the scripts loaded by a given
site. Domain-level aggregation captures all the scripts (across all
sites) that are served from a given domain, to identify major players
who perform sensor access. We use the Public Suffix + 1 (PS+1)
domain representation, which are commonly used in the web pri-
vacy measurement literature to group domains issued to a single
entity [50, 57]. We also group accesses by script URL to capture the
use of the same script across different sites. When performing this
grouping, we discard the fragment and query string URL compo-
nents [7] (i.e., the part of the URL after the ?, & or # characters),
as these are often used to pass script parameters or circumvent
caching.
When performing this aggregation, we essentially compute a
binary OR of the feature vectors of the individual instances that
we incorporate. In other words, if any member of the grouping
exhibits a certain feature, the feature is assigned to a script. For
example, if any script served by a given domain performs canvas
fingerprinting, we assign the canvas_fingerprinting feature for that
domain.
4 MEASUREMENT RESULTS
In this section, we will first highlight the overall prominence of
scripts accessing different device sensors. Next, we showcase differ-
ent ways in which scripts send raw sensor data to remote servers.
Lastly, we will look at the stability of our findings across different
crawls taking place in the same geolocation and across different
geolocations. US1 is our default dataset unless stated otherwise.
4.1 Prevalence of Scripts
First, we look at how often are device sensors accessed by scripts.
Table 3 shows that sensor APIs are accessed on 3 695 of the 100K
websites by scripts served from 603 distinct domains. Orientation
and motion sensors are by far the most frequently accessed, on
2 653 and 2 036 sites respectively. This can be explained by common
browser support for these APIs. Light and proximity sensors, which
are only supported by Firefox, are accessed on fewer than 200 sites
each.
Table 3: Overview of script access to sensor APIs. Columns
indicate the number of sites and distinct script domains (i.e.,
domains from where scripts are served), respectively.
Sensor
Num. of
sites
2653
Motion
Orientation 2036
186
Proximity
181
Light
3695
Total
Num. of
script domains
384
420
50
35
603
We also look at the distribution of the sensor-accessing scripts
among the Alexa top 100K sites. Figure 2 shows the distribution
of the scripts across different ranked sites. Interestingly, we see
that many of the sensor-accessing scripts are being served on top
ranked websites. Table 4 gives a more detailed overview of the most
common scripts that access sensor APIs. The scripts are represented
by their Public Suffix + 1 (PS+1) addresses. In addition we calculated
the prominence metric developed by Englehardt and Narayanan [31],
which captures the rank of the different websites where a given
script is loaded and sort the scripts according to this metric.
Table 4 shows that scripts from serving-sys.com, which belongs
to advertising company Sizmek [75], access motion sensor data on
815 of the 100K sites crawled. Doubleverify, which has a very simi-
lar prominence score, provides advertising impression verification
services [26] and has been known to use canvas fingerprinting [31].
The most prevalent scripts that access proximity and light sensors
commonly belong to ad verification and fraud detection companies
such as b2c.com and adsafeprotected.com. Both scripts also use
battery and AudioContext API fingerprinting.
Although present on only 417 sites, alicdn.com script has the
highest prominence score (0.3303) across all scripts. This is largely
Table 2: The list of high-level features and reference to methodology for detection.
Description & Reference
High-level feature name
audio_context_fingerprinting Audio Context API fingerprinting via exploiting differences in the audio processing engine [31]
battery_fingerprinting
canvas_fingerprinting
canvas_font_fingerprinting
webrtc_fingerprinting
easylist_blocked
easyprivacy_blocked
disconnect_blocked
Battery status API fingerprinting via reading battery charge level and discharge time [62]
Canvas fingerprinting via exploiting differences in the graphic rendering engine [1, 31]
Canvas font fingerprinting via retrieving the list of supported fonts [31]
WebRTC fingerprinting via discovering public/local IP address [31]
Whether blocked by EasyList filter list [27]
Whether blocked by EasyPrivacy filter list [28]
Whether blocked by Disconnect filter list [25]
Table 4: Top script domains accessing device sensors sorted by prominence [31]. The scripts are grouped by domain to minimize
over counting different scripts from each domain.
Sensor
Motion
Orientation
Proximity
Light
Script Domain
Num. sites Min. Rank Prominence EasyList
blocked
0
815
serving-sys.com
1
517
doubleverify.com
1
648
adsco.re
417
0
alicdn.com
1
648
adsco.re
1
83
yieldmo.com
0
b2c.com
108
adsafeprotected.com 36
1
0
1
allrecipes.com
0
b2c.com
108
1
adsafeprotected.com 36
allrecipes.com
1
0
0.0485
0.0453
0.0275
0.3303
0.0275
0.0263
0.0114
0.0023
0.0008
0.0114
0.0023
0.0008
67
187
570
9
570
100
498
1418
1216
498
1418
1216
EasyPrivacy
blocked
1
0
0
0
0
0
1
0
0
1
0
0
Disconnect
blocked
1
0
0
0
0
1
0
1
0
0
1
0
Table 5: Number of sensor-accessing scripts served from
first-party domains vs. third-party domains.
Num. of
first party
364
Motion
Orientation 350
40
Proximity
30
Light
518
Any sensor
Num. of
third party Total
501
137
650
300
56
96
82
52
398
916
Figure 2: Distribution of sensor-accessing scripts across var-
ious ranked intervals.
because a script originating from alicdn.com accessed device orien-
tation data on five of the top 100 sites—including taobao.com (Alexa
global rank 9), the most popular site in our measurement where
we detected sensor access—and thus this script is served to a very
large user base. Table 5 shows the breakdown of sensor-accessing
scripts in terms of first and third parties. While web measurement
research commonly focuses on third-party tracking [50], we find
that first-party scripts that access sensor APIs are slightly more
common than third-party scripts. Our sensor exfiltration analysis
of the scripts in section 4.2 revealed that many bot detection and
mitigation scripts such as those provided by perimeterx.net and
b2c.com are served from the clients’ first party domains.
4.2 Sensor Data Exfiltration
After uncovering scripts that access device sensors, we investigate
whether scripts are sending raw sensor data to remote servers.
To accomplish this we spoof expected sensor values, as described
in section 3.2. We then analyze HTTP request headers and POST
request bodies obtained through OpenWPM’s instrumentation to
identify the presence of spoofed sensor values. We found several
domains to access and send raw sensor data to remote servers either
in clear text or in base64 encoded form.
Table 6 highlights the top ten script domains that send sensor
data to remote servers. perimeterx.com (a bot detection company)
and b2c.com (ad fraud detection company) are the most prevalent
scripts that exfiltrate sensor readings. In addition, we found that
priceline.com and kayak.com serve a copy of the perimeterx.com
script from their domain (as a first-party script), which in turn reads
and sends sensor data. These scripts send anywhere between one
to tens of sensor readings to remote servers. Majority of the scripts
(eight of ten) encode sensor data before sending it to a remote
server. Appendix C lists examples of scripts sending sensor data to
remote servers. We also found that certain scripts send statistical
aggregates of sensor readings, and others obfuscate the code that
is used to process sensor data and send it to a remote server. More
examples are available in section 5.5.
While detecting exfiltration of spoofed sensor values, we use
HTTP instrumentation data provided by OpenWPM. Since Open-