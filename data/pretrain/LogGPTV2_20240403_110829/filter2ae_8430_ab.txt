                channel.writeAndFlush(requestToSQLMAPAPI).sync();
                channel.closeFuture().sync();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (URISyntaxException e) {
                e.printStackTrace();
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            } finally {
                workerGroup.shutdownGracefully();
            }
        }
        // *** 创建任务response处理 ***
        private class StartTestResponse extends ChannelInboundHandlerAdapter {
            @Override
            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
                if (msg instanceof HttpResponse) {
                    HttpResponse httpResponse = (HttpResponse) msg;
                }
                if (msg instanceof HttpContent) {
                    HttpContent httpContent = (HttpContent) msg;
                }
            }
        }
        // 任务状态
        boolean isEnd = false;
        int count = 1;
        // *** 查询任务是否结束 ***
        public String status() {
            // 当任务未结束时，不停查询
            while (isEnd == false) {
                // *** 每次查询间隔1秒钟 ***
                long startTime = System.currentTimeMillis();
                do {
                } while (System.currentTimeMillis() () {
                                @Override
                                protected void initChannel(SocketChannel socketChannel) throws Exception {
                                    socketChannel.pipeline().addLast("codec", new HttpClientCodec());
                                    socketChannel.pipeline().addLast("httpAggregator",
                                            new HttpObjectAggregator(512 * 1024)); // http 消息聚合器
                                    socketChannel.pipeline().addLast(new StatusResponse());
                                }
                            });
                    Channel channel = bootstrap.connect(Properties.SQLMapApiAdr, Properties.SQLMapApiPort).sync().channel();
                    // *** 生成post传送的uri
                    URI uri = new URI("/scan/" + taskid + "/status");
                    FullHttpRequest requestToSQLMAPAPI = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                            uri.toASCIIString());
                    requestToSQLMAPAPI.headers().set(HttpHeaders.Names.HOST, "127.0.0.1");
                    requestToSQLMAPAPI.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.KEEP_ALIVE);
                    // send request
                    channel.writeAndFlush(requestToSQLMAPAPI).sync();
                    channel.closeFuture().sync();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                } finally {
                    workerGroup.shutdownGracefully();
                }
            }
            return "task_Finish";
        }
        // *** 查询任务response处理 ***
        private class StatusResponse extends ChannelInboundHandlerAdapter {
            @Override
            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
                if (msg instanceof HttpResponse) {
                    HttpResponse httpResponse = (HttpResponse) msg;
                }
                if (msg instanceof HttpContent) {
                    HttpContent httpContent = (HttpContent) msg;
                    String json = httpContent.content().toString(0, httpContent.content().capacity(),
                            Charset.defaultCharset());
                    JSONObject obj = JSON.parseObject(json);
                    String status = (String) obj.get("status");
                    if (status.equalsIgnoreCase("terminated")) {
                        isEnd = true;
                    }
                }
            }
        }
        // *** 查询任务扫描结果并保存至文件 ***
        public void result() {
            // *** 请求sqlmapapi获取任务扫描结果
            NioEventLoopGroup workerGroup = new NioEventLoopGroup();
            try {
                Bootstrap bootstrap = new Bootstrap();
                bootstrap.group(workerGroup).channel(NioSocketChannel.class).option(ChannelOption.SO_KEEPALIVE, true)
                        .handler(new ChannelInitializer() {
                            @Override
                            protected void initChannel(SocketChannel socketChannel) throws Exception {
                                socketChannel.pipeline().addLast("codec", new HttpClientCodec());
                                socketChannel.pipeline().addLast("httpAggregator", new HttpObjectAggregator(512 * 1024)); // http
                                                                                                                            // 消息聚合器
                                socketChannel.pipeline().addLast(new DataResponse());
                            }
                        });
                Channel channel = bootstrap.connect(Properties.SQLMapApiAdr, Properties.SQLMapApiPort).sync().channel();
                // *** 生成post传送的uri
                URI uri = new URI("/scan/" + taskid + "/data");
                FullHttpRequest requestToSQLMAPAPI = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                        uri.toASCIIString());
                requestToSQLMAPAPI.headers().set(HttpHeaders.Names.HOST, "127.0.0.1");
                requestToSQLMAPAPI.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.KEEP_ALIVE);
                // send request
                channel.writeAndFlush(requestToSQLMAPAPI).sync();
                channel.closeFuture().sync();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (URISyntaxException e) {
                e.printStackTrace();
            } finally {
                workerGroup.shutdownGracefully();
            }
        }
        // *** 查询任务扫描结果response处理 ***
        private class DataResponse extends ChannelInboundHandlerAdapter {
            @Override
            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
                String data = null;
                if (msg instanceof HttpResponse) {
                    HttpResponse httpResponse = (HttpResponse) msg;
                }
                if (msg instanceof HttpContent) {
                    HttpContent httpContent = (HttpContent) msg;
                    String json = httpContent.content().toString(0, httpContent.content().capacity(),
                            Charset.defaultCharset());
                    JSONObject obj = JSON.parseObject(json);
                    data = obj.get("data").toString();
                }
                // *** 当data内容为空或为“[]”时，不存在注入，否则存在注入 ***
                if (data.equalsIgnoreCase("[]") || data.isEmpty() || data==null) {
                    Result.writeToFile("SQL注入\t不存在\t问题链接\t\t请求数据包\t" + Properties.requestFileSaveBasePath + taskid
                            + "\tSQLMAP响应\t" + Properties.SingleSQLTestResultFileName + taskid);
                    Result.saveResultToFile(Properties.SingleSQLTestResultFileName + taskid, data);
                } else {
                    Result.writeToFile("SQL注入\t存在\t问题链接\t"+uri+"\t请求数据包\t" + Properties.requestFileSaveBasePath + taskid
                            + "\tSQLMAP响应\t" + Properties.SingleSQLTestResultFileName + taskid);
                    Result.saveResultToFile(Properties.SingleSQLTestResultFileName + taskid, data);
                }
            }
        }
    }
### 涉及的bean
    public class Start {
        private String url;
        public String getUrl() {
            return url;
        }
        public void setUrl(String url) {
            this.url = url;
        }
    }
## 构建输出模块
    public class Result {
        private static BufferedWriter bw;
        public static void init() {
            try {
                Result.bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(Properties.resultFilePath)),"UTF-8"));
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        public static void writeToFile(String content) {
            try {
                bw.write(content);
                bw.newLine();
                bw.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public static void saveResultToFile(String filePathAndName, String result) {
            // *** 将SQLMAPAPI测试结果写入结果文件中
            FileWriter fw = null;
            BufferedWriter bufw = null;
            File file = new File(filePathAndName);
            try {
                if (file.exists()) {
                    //如果文件已存在
                } else {
                    //如果文件目录不存在，创建文件
                    String filePath = filePathAndName.substring(0, filePathAndName.lastIndexOf("\\"));
                    File folder = new File(filePath);
                    folder.mkdirs();
                    //如果文件不存在，创建文件
                    file.createNewFile();
                }
                //创建输出流
                fw = new FileWriter(file,true);
                bufw = new BufferedWriter(fw);
                //输出
                bufw.write(result);
                bufw.newLine();
                bufw.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if (bufw != null) {   
                    try {
                        bufw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }   
                }
                if (fw != null) {   
                    try {
                        fw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }   
                }
            }
        }
        public static void saveFullHttpRequestToFile(String filePathAndName, FullHttpRequest result) {
            // *** 将SQLMAPAPI测试结果写入结果文件中
            FileWriter fw = null;
            BufferedWriter bufw = null;
            File file = new File(filePathAndName);
            try {
                if (file.exists()) {
                    //如果文件已存在
                } else {
                    //如果文件目录不存在，创建文件
                    String filePath = filePathAndName.substring(0, filePathAndName.lastIndexOf("\\"));
                    File folder = new File(filePath);
                    folder.mkdirs();
                    //如果文件不存在，创建文件
                    file.createNewFile();
                }
                //创建输出流
                fw = new FileWriter(file,true);
                bufw = new BufferedWriter(fw);
                // **** 文件中的三个字段 ****
                String top = "";
                String header = "";
                String content = "";
                // **** 将uri由“http://.../...”处理为“/...” ****
                String uri = result.uri();
                for (int i = 0; i  it = names.iterator();
                while (it.hasNext()) {
                    String name = it.next();
                    header += name + ": ";
                    header += result.headers().get(name);
                    header += "\r\n";
                }
                // 提取request包中content内容
                content = result.content().toString(0, Integer.valueOf(result.headers().get("Content-Length")),
                        Charset.defaultCharset());
                // 组装request包内容
                String dataPackage = top + "\r\n" + header + "\r\n" + content;
                //输出
                bufw.write(dataPackage);
                bufw.newLine();
                bufw.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if (bufw != null) {   
                    try {
                        bufw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }   
                }
                if (fw != null) {   
                    try {
                        fw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }   
                }
            }
        }
        public static void saveHttpResponseAndContentToFile(String originalResponsefilePathAndName,
                HttpResponse httpResponse, HttpContent responseContent) {
            FileWriter fw = null;
            BufferedWriter bufw = null;
            File file = new File(originalResponsefilePathAndName);
            try {
                if (file.exists()) {
                    //如果文件已存在
                } else {
                    //如果文件目录不存在，创建文件
                    String filePath = originalResponsefilePathAndName.substring(0, originalResponsefilePathAndName.lastIndexOf("\\"));
                    File folder = new File(filePath);
                    folder.mkdirs();
                    //如果文件不存在，创建文件
                    file.createNewFile();
                }
                //创建输出流
                fw = new FileWriter(file,true);
                bufw = new BufferedWriter(fw);
                //输出
                bufw.write(httpResponse.toString());
                bufw.newLine();
                bufw.write(responseContent.content().toString(0, responseContent.content().capacity(),Charset.defaultCharset()));
                bufw.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if (bufw != null) {   
                    try {
                        bufw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }   
                }
                if (fw != null) {   
                    try {
                        fw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }   
                }
            }
        }
    }
# 使用效果
## 启动扫描器
**启动SQLMapapi作为测试模块**
**启动Tomcat作为文件服务器及被测试网站**
**运行StartProxy类，启动测试工具**
**在浏览器中设置代理**
**访问Tomcat的默认页面：**  
**测试结果及过程文件**