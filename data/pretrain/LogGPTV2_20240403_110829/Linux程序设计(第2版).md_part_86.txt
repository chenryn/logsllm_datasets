int nain(int argc, char *argv[))
char *host，**names，**addrs;
struct hostent *hostinfo:
2)把host变量设置为随getname调用提供的参数，如果缺省，就设置为用户正在使用的这台
机器。
if(argc == 1){
gethostname(nymame,255);
char myname{256];
host >mymame;
else
host = argv[1]:
加入jaVa编程群：524621833
---
## Page 454
436
Linux程序设计
3）调用gethostbyname，如果信息没找到就报告一条错误，
hostinfo = gethostbyname (host);
if(thostinfo)(
fprintf(stderr,‘cannot get info for host:s\n*,host):
exit(1) ;
4）显示主机名和它可能有的一切假名。
printfi*results for host es:\n*, hostl;
printf(*Naze:ss\n*,hostinfo ->h_nane);
printt(*Aliages:*):
names = hostinfo
0 > h_aliases;
while(*names)(
printf(*s*,*names);
tazes++;
prantf(*\n*}:
5）如果要查询的主机不是一个IP主机，就报告并退出。
if(hostinfo -> h_addrtype 1= AF_INET){
fprintf(atderr, *not an IP host:\n*);
exit(1);
6）否则，显示它的IP地址。
addrs = hostinfo -> h_addr_list;
while(*addrs)(
printf(* &s*,inet_ntoa(*(struct in_addr *)*addrs));
sddrs++;
printf(*\n*);
exit (0) :
另外一种办法是使用gethostbyaddr，它可以查出给定IP地址处是哪一台主机。你可以把它用
在一个服务器里去查看客户是从哪里来调用的。
操作注释：
getname程序调用gethostbyname从主机数据库里提取出主机的资料。它将给出主机名、它的假名
（那台计算机的其他名字）和该主机在它的网络接口上使用的IP地址。当我在自己的机器上运行这个
程序的时候，给定主机名ilde，程序给出了以太网和调制解调器两个网络接口的资料。如下所示：
S getnang tilde
results for host tilde:
Name: tilde.denon.co.uk
192.9.200.4 158.152.38.110
Aliases:tilde
当我使用主机名localhost的时候，程序只给出了回馈网络的资料。如下所示：
S getnane localhont
results for host localhost:
Name: localhost
Aliases:
127.0.0.1
我们现在来改进我们的客户程序，使它能够连接到任何有名字的主机。这一次我们不再连
加入jaVa编程群：524621833
---
## Page 455
第14章套接字
437
接到我们示例用的服务器，而是连接到一项标准服务上去，这样可以演示端口号的提取操作。
大多数UNIX系统都有一项名为daytime的标准服务，即提供它们的系统日期和时间。客户可
以连接到这项服务上去看看该服务器的当前日期和时间是什么。下面就是完成这一工作的客户
程序getdate.C
动手试试：连接到一个标准服务
1)必要的头文件和变量定义。
include 
include 
#include 
include 
include 
int main(int argc, char *argv↓1)
int len,result;
int sockfd:
struct sockaddr_in address;
struct servent*servinfo:
struct hostent *hostinfo;
char buffer[128]:
if{axgc  1)
host=*localhost*;
else
host = argv[11:
2）查找主机的地址，如果找不到就报告一条错误。
hostinfo = gethostbyname(host);
ifi!hostinfo) (
fprintf(stderr,*no host: &s\n*.host);
ex1t (1) :
3）检查主机上有没有daytime服务。
servinfo =_getservbymame(*daytine*.*tcp*):
if(!servinfo){
fprintf(stderr,*no daytime service\n*);
exit(1):
printf(*daytine port is ld\n*, ntohs(servinfo -> s_port));
4）创建一个套接字。
sockfd = socket (AF_INET. SOCK_STREAM, 0) :
5）构造connect函数要用到的地址等…
address.sin_family = AF_INET:
address.sin_port = sgrvinfo -> s_port;
address.sin_addr *(struct in_addr *)*hostinfo →> h_addr_list;
len = sizeof (address):
6)建立连接并取得有关信息。
result s connect(sockfd. (struct sockaddr *)&address. len);
if（result = -1)(
加入java编程群：524621833
---
## Page 456
438
Linux程序设计
perror(*oops: getdate*}:
exit(1} :
buffer[result}'\0;
result = read(sockfd, buffer, sizeof (buffer));
printfi*road d bytes: $s*, result, buffer1;
close (sockfd) ;
exit (0) ;
我们可以用getdate获取任一有名字的主机上的日期和时间。如下所示：
S getdate tilde
read 26 bytes: Sun Aug 1 11:29:53 1999
daytine port is 13
如果我们看到如下所示的一条错误信息：
oops: getdate: Connection refused
就说明你正在连接的计算机可能没有激活daytime服务。这是现时期Linux系统的缺省行为。
我们将在下一小节里学习如何激活这项服务和其他服务项目。
操作注释：
当我们运行这个程序的时候，可以指定一个主机去建立连接。daytime服务的端口号是通过
网络数据库函数getserverbyname确定的，这个函数返回的是关于网络服务方面的资料，它们和
主机资料差不多。getdate程序会先去尝试连接指定主机替换地址表里列出来的地址。如果成功，
它就读取daytime服务返回的信息—这是一个表示UNIX时间和日期的字符串。
14.3.1因特网守护进程
提供多项网络服务的UNIX系统通常是以超级服务器的方式来这样做的。这个程序（因特网
守护进程，即inetd）同时监听着许多端口地址上的连接。当有客户连接到某项服务时，ineid程
序就会运行相应的服务器。这使服务器们不必一直运行着；它们可以在必要时由inetd启动执行。
下面是inetd配置文件/etc/inetd.conf中的一个片段，这个文件的作用是决定需要运行哪些个服务
器。如下所示：
><><><>
 Echo, discard, daytime, and chargen are used primarily for testing.
daytine
stream
tcp
nowait
internal
daytine
wexBp
udp
wait
root
internal
# These are standard services.
ftp
stream
tcp
nowait
root
/usr/sbin/tcpd
/usr/sbin/wu. ftpd
telnet
stream
tcp
nowait
root
/usr/sbin/tcpd
/usr/sbin/in.telnetd
 End of inetd.conf.
我们的getdate程序连接到的daytime服务实际上是由inetd本身负责处理的（被标记为intermal，
加入jaVa编程群：524621833
---
## Page 457
第14章套接字439
内部）.SOCK_STREAM（tcp）套接字和SOCK_DGRAM（udp）套接字都能使用这项服务。
文件传输服务ftp只能通过SOCK_STREAM套接字提供，并且是由一个外部程序提供的，例
子里使用的是wu.ftpd，当有客户连接到ttp端口时，inetd就会启动它。
通过编辑/etc/inetd.conf文件（语句最前面的“#”符号表示这是一个注释行）再重新启动
inetd进程的办法，我们就可以改变通过inetd提供的服务。这可以通过用kil命令向它发送一个挂
起信号来实现。为了使这个操作更容易进行，有的系统会配置成让inetd把它自已的进程ID写到
一个文件里（在RedHat6.0上，它是/var/run/inetd.pid文件）。另外一个办法是使用killall命令，
如下所示：
kiilall -HUP inetd
14.3.2套接字选项
套接字连接有许多可以用来控制其行为的选项—这些选项数量很多，这军根本没有足够的
篇辐来对它们做详细的介绍。应用这些选项时要使用setsockopt函数。
#include 
int setaockopt(int socket, lat level, int option_nama
const vold *option_value, size_t option_len);
你可以在协议树结构里的各种级别上对这些选项进行设置。如果想要在套接字级别上设置
选项，就必须把level参数设置为SOL_SOCKET。如果想要在底层协议级别（比如TCP、UDP等）
上设置选项，就必须把level参数设置为该协议的编号（这些编号从netinet/in.h头文件或者通过
getprotobyname函数获得）。
option_name参数指定准备设置的选项，option_value是一个长度为option_len个字节的任意
常数值参数，底层协议的处理程序需要传递来这么一个参数。
在/sys/socket.h文件里定义的套接字级别选项见表14-5：
表14-5
SO_DEBUG
打开调试信息
SO_KEEPALIVE
为周期性传输保持连接一直接通
SO_LINGER
在关闭之前先完成传输工作
SO_DEBUG和SO_KEEPALiVE级别要用一个整数的option_value值来设置该选项的开（1）
关（O）状态。SO_LINGER需要使用一个在/sys/socket.h文件里定义的linger结构来定义该选项的
状态和关闭之前的延长期。
如果操作成功，setsockopt返回“o”，否则返回“-1”。它的使用手册页里介绍了更多的选项
和错误。
14.4多客户
本章到目前为止一直介绍的是如何利用套接字来实现本地或跨网络的客户/服务器系统，在
建立起套接字连接之后，它的作用几乎完全类似于一个底层open调用所返回的文件描述符，并
加入jaVva编程群：524621833
---
## Page 458
440
Linux程序设计
且在行为上与双向管道有很多相似之处。
我们现在来考虑一下多个客户同时连接到一个服务器的情况。我们已经知道服务器程序在
接受了一个新的连接时会创建出一个新的套接字，而原先的那个监听套接宁会被空出来监听以
后的连接。如果服务器不能立刻接受后来的连接，它们就会被放到一个队列里去排队等候，
既然原先的套接字被空了出来，套接字的行为又象是一个文件描述符，我们就可以利用这
些事实找出一个同时服务多个客户的办法来：如果服务器调用fork为自己创建了个第二份拷贝，
已经打开的套接字就可以被那个新创建出来的子进程所继承。我们可以让它与当前连接着的客
户进行通信，让主服务器继续接受后来的客户连接，这些改动对我们的服务器程序来说是很容
易做到的，下面给出的就是。
既然我们正在创建子进程，但又不等待它们的完成和结束。我们就必须安排服务器不理
SIG_CHLD信号以避免山现僵进程。
动手试试：一个可以服务多个客户的服务器
1）这个server4.c程序的开始部分与我们前面的服务器一脉相承，只是引人注目地增加了一条
包括signal.h头文件的include语句。变量的初始化和会接字的创建及命名过程都与以前一样。
1ncladc 
#incl.ade 
#inelade 
incl yle 
#include 
#inclutle 
nt na.n()
in server_sockfd, ciient_sockfd;
sttuct sockaddr_in server_addxess:
int server_len. client_len:
struc: sockaddr_in client_address;
rcrver_sockfd = Socket(AF_INET. SOCK_STREAM, O):
>ctver_address.sin_fanily - AF_INET;
server_address.sin_addr .s_addr = htonl tINADDR_ANY) :
server_address.sin_port = htons (9734);
bind(server_sockfd. (struct sockaddr *)&server_address, server_len):
2）创建一个连接队列，屏蔽子进程的退出细节并等待客户的到来。