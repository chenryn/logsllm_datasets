JRMP
with JDK 1.7.0_80
with java-rmi-server/rmi.RMIServer2
看情况取舍：
上⾯说的RMI通信过程中假设客户端在与RMI服务端通信中，虽然也是在JRMP协
议上进⾏通信，尝试传输序列化的恶意对象到服务端，此时服务端若也返回客户端
⼀个恶意序列化的对象，那么客户端也可能被攻击，利⽤JRMP就可以利⽤socket
进⾏通信，客户端直接利⽤JRMP协议发送数据，⽽不⽤接受服务端的返回，因此
这种攻击⽅式也更加安全。
这⾥我们针对 ysoserial 的⼏个相关 Class 进⾏分析，⾸先先列举下相关的作
⽤。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 16/34
2020/7/27 RMI 利⽤分析
payloads.JRMPListener 在⽬标服务器⽬标端⼝上开启JRMP监听服务 -
独⽴利⽤
payloads.JRMPClient 向 ⽬ 标 服 务 器 发 送 注 册 Ref ， ⽬ 标
exploit.JRMPListener 地址
exploit.JMRPListener 被动向请求⽅传输序列化 payload
exploit.JRMPClient 主动向⽬标服务器传输序列化 payload
除此之外，我们还需要了解下关于DGC的⼀些内容，以便理解下⾯的内容。
RMI.DGC 为 RMI 分布式垃圾回收提供了类和接⼝。当 RMI 服务器返回⼀个对象
到其客户机（远程⽅法的调⽤⽅）时，其跟踪远程对象在客户机中的使⽤。当再没
有更多的对客户机上远程对象的引⽤时，或者如果引⽤的“租借”过期并且没有更
新，服务器将垃圾回收远程对象。
payloads.JRMPListener
在了解之前，我们先看下JAVA原⽣序列化有两种接⼝实现。
1.Serializable接⼝：要求实现writeObject、readObject、writeReplace、
readResolve
2.Externalizable接⼝：要求实现 writeExternal、readExternal
分析
回到JRMPListener中，代码很简单，主要功能就是⽣成⼀个开启⽬标端⼝进⾏监
听RMI服务的payload。
我们⾸先跟⼊到
ysoserial.payloads.util.Reflections#createWithConstructor ， 了 解 下 函
数逻辑。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 17/34
2020/7/27 RMI 利⽤分析
1.先查找RemoteObject下参数类型为 RemoteRef 的构造器。
2.根据找到的构造器为ActivationGroupImpl动态⽣成⼀个新的构造器并⽣成实
例。
为什么需要这样呢？其实就是为了避免调⽤ActivationGroupImpl本身的构造⽅
法，避免复杂的或其他不可控的问题。
我们关注下UnicastRemoteObject在序列化阶段做了什么，从reexport跟⼊到
exportObject，创建监听并返回此 stub。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 18/34
2020/7/27 RMI 利⽤分析
另外，通过上⾯的分析实际上我们只⽤需要UnicastRemoteObject就⾜够开启监
听利⽤，下⾯两种也可以，但好奇为什么作者要通过⼦类转换实现利⽤呢？
1 ActivationGroupImpl uro = Reflections.createWithConstructor(A
2 RemoteRef.class
3 }, new Object[] {
4 new UnicastServerRef(jrmpPort)
5 });
6
7 UnicastRemoteObject uro = Reflections.createWithConstructor(U
8 RemoteRef.class
9 }, new Object[] {
10 new UnicastServerRef(jrmpPort)
11 });
12
13
利⽤
1 java -cp ysoserial-master.jar ysoserial.exploit.XXXXX 
2
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 19/34
2020/7/27 RMI 利⽤分析
3 java -cp ysoserial-master.jar ysoserial.exploit.JRMPClient 
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 24/34
2020/7/27 RMI 利⽤分析
exploit.JRMPListener
分清两个JRMPListener的区别
payloads.JRMPListener 在⽬标机上开启 JMRP 监听
exploit.JRMPListener 实现对 JRMP Client 请求的应答
分析
从 Main 可 以 看 到 基 本 逻 辑 就 是 开 启 监 听 JRMP 端 ⼝ 等 待 连 接 后 传 输 恶 意
payload。
在监听时对协议进⾏解析，对为 StreamProtocol、SingleOpProtocol 的连接
均会通过 doMessage 进⾏应答。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 25/34
2020/7/27 RMI 利⽤分析
⽽在 doMessage 中对远程RMI调⽤发送 payload 数据包。
那么 payload 是填充到哪⾥了呢？
注意到 doCall 函数中的这段代码，和 cc5 的⼊⼝点是⼀样的。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 26/34
2020/7/27 RMI 利⽤分析
但需要注意的是，
BadAttributeValueExpException.readObject 的 触 发 点 不 ⼀ 定 是
valObj.toSting()，这⾥在调试的时候出现了⼀堆莫名其妙的现象。
抛开后续的利⽤，我们从开始看下⽬标是如何向 JRMPListener 请求的。
会向 DGCClient 中进⾏注册 Ref，通过80请求、81应答进⾏传输，这⾥可以关
注下调⽤栈，结合上⾯ DGC 内容进⾏了解。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 27/34
2020/7/27 RMI 利⽤分析
那么 80 是如何出现的呢？
看到StreamRemoteCall初始化时会直接往第⼀个字节写⼊ 80。
接着⽬标会读取 Listener 传递的值对之后的内容选择是否进⾏反序列化，反序列
化的内容就和上⾯连接起来了。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 28/34
2020/7/27 RMI 利⽤分析
额外提⼀下，var1在这⾥的意义是⽤来判断Listener是否为正常返回，如果因为某
些原因在 Listener 端产⽣了异常报错需要将报错信息传递回请求端，⽽传递的信
息是序列化的所以会在请求端触发反序列化。
利⽤
本身⽆法直接利⽤的，需要向⽬标机发送 payloads.JRMPClient 以被动攻击。
1 java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener <
exploit.JRMPClient
分清两个 JRMPClient 区别，以及 RMIRegistry
Exploit
payloads.JRMPClient 向⽬标DGC注册Ref
exploit.JRMPClient 向⽬标DGC传输序列化 payload
exploit.RMIRegistryExploit 向⽬标RMI.Registry传输序列化 payload，
⽬标为 RMI.Registry 监听端⼝
下⾯是payloads.JRMPListener和RMI.Registry 开启的监听端⼝在nmap扫描
下的不同信息：
exploit.JRMPClient 可以对两者进⾏攻击；
exploit.RMIRegistryExploit只能攻击后者。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 29/34
2020/7/27 RMI 利⽤分析
分析
先在
sun.rmi.server.UnicastServerRef#dispatch中读取 Int 数据。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 30/34
2020/7/27 RMI 利⽤分析
然后在
sun.rmi.server.UnicastServerRef#oldDispatch中读取 Long 数据。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 31/34
2020/7/27 RMI 利⽤分析
之后进⼊
sun.rmi.transport.DGCImpl_Skel#dispatch，先对读取的 Long 数据即接⼝
hash 值进⾏判断是否为相同。
再根据之前读取的 Int 数据进⾏相应的处理。
利⽤
1 java -cp ysoserial-master.jar ysoserial.exploit.JRMPClient <rm
04
JNDI Reference
关于 JNDI 的内容已在整篇⽂章开头有涉及，此处暂时⽆额外需求。
demo
with JDK 1.7.0_17
with jndi\rmi.RMIClient、rmi.RMIServer
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 32/34
2020/7/27 RMI 利⽤分析
分析
我们跟进Client执⾏lookup后看看发⽣了什么。
同 样 也 是 Client 向 Server 请 求 查 询 test_service 对 应 的 stub ， 再 执 ⾏
到 com.sun.jndi.rmi.registry.RegistryContext#decodeObject中获取⽬标
类的 ref。
之后带⼊ ref 到
javax.naming.spi.NamingManager#getObjectInstance 中 进 ⾏ 远 程 ⼯ ⼚ 类
的 加 载 ( 所 以 Server 端 new Reference 时 的 第 ⼀ 个 class 参 数 随 便 写 不 影
响)。
这样就是在 Client 执⾏ lookup 操作时让其直接加载远程恶意类进⾏ RCE，不
需要任何其他的 gadget。
防御
受 到 ⾃ 6u141 、 7u131 、 8u121 起 默 配 置
com.sun.jndi.rmi.object.trustURLCodebase=false ，直接远程加载会被限
制，报错信息如下：
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 33/34
2020/7/27 RMI 利⽤分析
另外还对可反序列化的类做了⽩名单检测- JEP290，对 JEP290 的分析⽂章很
多，常⻅ Bypass会在之后总结。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 34/34