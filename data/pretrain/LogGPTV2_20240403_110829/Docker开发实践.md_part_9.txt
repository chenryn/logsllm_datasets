### 提交镜像到注册服务器
要将构建好的镜像提交到注册服务器，可以使用以下命令：
```sh
docker push 127.0.0.1:5000/my_image:v1
```
本节仅介绍了注册服务器的基本知识，更详细的介绍和操作将在第10章中展开。

### 第4章 数据卷及容器连接

#### 4.1 容器网络基础
当应用在容器中运行时，需要通过网络对外提供服务。本章将介绍与容器数据管理相关的内容，主要包括：
- **容器网络基础**：容器通过暴露端口来提供外部服务。
- **数据卷的概念和使用**：通过数据卷存储和共享数据。
- **容器连接**：通过互联机制使一个容器能够安全地使用另一个容器的服务。

##### 4.1.1 暴露网络端口
在Docker中运行网络应用时，可以通过端口映射使外部能够访问容器内的服务。这可以通过 `-P` 或 `-p` 参数实现。

###### 使用 `-P` 参数
使用 `-P` 参数时，Docker会在宿主主机上随机分配一个49000到49900之间的未被使用的端口，并将其映射到容器的开放端口。

例如，使用Docker官方提供的培训示例镜像 `training/webapp`：
```sh
$ docker search training/webapp
NAME DESCRIPTION STARS OFFICIAL AUTOMATED
training/webapp 8 [OK]
amouat/webapp-training 0 [OK]

$ docker run -d -P training/webapp python app.py
Unable to find image 'training/webapp' locally
Pulling repository training/webapp
31fa814ba25a: Download complete
511136ea3c5a: Download complete
...
Status: Downloaded newer image for training/webapp:latest
45fd5b0fc80413484da26bb68640b8794dc5409d0ff1bcab8a60c5541205592a

$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
45fd5b0fc804 training/webapp:latest "python app.py" 8 minutes ago Up 8 minutes 0.0.0.0:49153->5000/tcp condescending_kirch
```
可以看到，Docker将宿主主机的49153端口映射到了容器的5000端口。此时，可以通过Web浏览器访问该应用。

###### 使用 `-p` 参数
`-p` 参数允许指定宿主主机上的端口映射到容器内部的特定端口。格式有以下三种：
- `ip:hostPort:containerPort`
- `ip::containerPort`
- `hostPort:containerPort`

例如，将宿主主机的80端口映射到容器的5000端口：
```sh
$ docker run -d -p 80:5000 training/webapp python app.py
c56833c127474cac15fe7ce111057c35f32b5023b623ae3ea221d7b0f3a38af5
2014/12/16 17:24:31 Error response from daemon: Cannot start container c56833c127474cac15fe7ce111057c35f32b5023b623ae3ea221d7b0f3a38af5: Error starting userland proxy: listen tcp 0.0.0.0:80: bind: address already in use
```
由于80端口已被占用，绑定失败。改为映射到5000端口：
```sh
$ docker run -d -p 5000:5000 training/webapp python app.py
791116a0598ec3a90c8a24ecd2264c4455cd92f8ce3a944f815ddb0ba04eefbf

$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
791116a0598e training/webapp:latest "python app.py" 22 seconds ago Up 22 seconds 0.0.0.0:5000->5000/tcp agitated_galileo
```
成功映射后，可以通过 `docker port` 命令查看端口映射情况：
```sh
$ docker port agitated_galileo 5000
0.0.0.0:5000
```

##### 4.1.2 查看网络配置
可以通过 `docker inspect` 命令查看容器的网络配置信息。例如，查看特定容器的网络设置：
```sh
$ docker inspect --format '{{.NetworkSettings}}' cf9c27
map[PortMapping: Ports:map[5000/tcp:[map[HostIp:0.0.0.0 HostPort:5000]] 80/tcp:[map[HostIp:0.0.0.0 HostPort:4000]]] Bridge:docker0 Gateway:172.17.42.1 IPAddress:172.17.0.12 IPPrefixLen:16 MacAddress:02:42:ac:11:00:0c]
```
也可以直接使用 `docker inspect` 命令获取详细信息：
```sh
$ docker inspect cf9c27
"NetworkSettings": {
    "Bridge": "docker0",
    "Gateway": "172.17.42.1",
    "IPAddress": "172.17.0.12",
    "IPPrefixLen": 16,
    "MacAddress": "02:42:ac:11:00:0c",
    "PortMapping": null,
    "Ports": {
        "5000/tcp": [
            {
                "HostIp": "0.0.0.0",
                "HostPort": "5000"
            }
        ],
        "80/tcp": [
            {
                "HostIp": "0.0.0.0",
                "HostPort": "4000"
            }
        ]
    }
}
```
如果只需要查看容器的IP地址，可以使用：
```sh
$ docker inspect --format '{{.NetworkSettings.IPAddress}}' cf9c27
172.17.0.12
```
然后可以在宿主主机上ping该地址以确认网络连通性：
```sh
$ ping 172.17.0.12
PING 172.17.0.12 (172.17.0.12) 56(84) bytes of data.
64 bytes from 172.17.0.12: icmp_seq=1 ttl=64 time=0.069 ms
64 bytes from 172.17.0.12: icmp_seq=2 ttl=64 time=0.039 ms
64 bytes from 172.17.0.12: icmp_seq=3 ttl=64 time=0.050 ms
64 bytes from 172.17.0.12: icmp_seq=4 ttl=64 time=0.043 ms
^C
--- 172.17.0.12 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.039/0.050/0.069/0.012 ms
```

#### 4.2 数据卷
数据卷是一个可供一个或多个容器使用的特殊目录，其主要用途包括：
- 绕过“拷贝写”系统，提高本地磁盘I/O性能。
- 避免在 `docker commit` 时将不必要的文件打包进镜像。
- 在多个容器之间共享目录。
- 在宿主和容器之间共享目录。
- 在宿主和容器之间共享单个文件（如socket）。

##### 4.2.1 创建数据卷
可以通过以下两种方式创建数据卷：
1. 在Dockerfile中使用 `VOLUME` 指令：
   ```Dockerfile
   VOLUME /var/lib/postgresql
   ```

2. 在命令行中使用 `docker run` 的 `-v` 参数：
   ```sh
   $ docker run -d -P -v /webapp training/webapp python app.py
   ```

通过这些方法，可以有效地管理和共享容器中的数据。