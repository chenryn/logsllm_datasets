aol.com
geico.com careerbuilder.com
aaa.com
my.wm.edu
Table 3: The 20 legitimate web sites.
First, as we expected, none of these legitimate web sites
lock a real account during our extensive tests. Second, if
the set size S is 4 or 8, none of these legitimate web sites
require CAPTCHA tests. If the set size S is 12 or 16, only
two web sites ask a user to do a CAPTCHA test after receiv-
ing S credentials. This test is a burden to a user but will not
block a user’s further interactions with a web server. Third,
the delay caused by BogusBiter is very small when the set
size S is 4 or 8. Figure 4 depicts the percentage of legiti-
mate sites versus the delay caused by BogusBiter under four
different set sizes. We can see that if the set size S is 4 or
8, for all the 20 legitimate sites the delay is less than 3 sec-
onds, and for over 85% of legitimate sites the delay is less
than one second. Therefore, BogusBiter only induces a very
small delay to users even if false positives really occur.
6. Discussions
In this section, we discuss deployment requirements, de-
ployment preparations, and limitations of BogusBiter.
352352
051015202500.10.20.30.40.50.60.70.80.91Delay (seconds)Percentage of Phishing Sites  S=4S=8S=12S=1602468101200.10.20.30.40.50.60.70.80.91Delay (seconds)Percentage of Legitimate Sites  S=4S=8S=12S=166.1. Deployment Requirements
At the client-side, users need to install BogusBiter. Vul-
nerable users can install BogusBiter to protect themselves,
while security-conscious users can install BogusBiter to
help protect others. Because BogusBiter is a browser exten-
sion, the client-side installation is straightforward. At the
server-side, phishing-targeted legitimate web sites need to
deploy the defensive line enabled by BogusBiter. However,
this deployment work is very simple compared to that of
Dynamic Security Skins [5] and BeamAuth [1], because our
SCI only uses these sites’ existing authentication informa-
tion and does not change their authentication mechanisms.
6.2. Massive Deployment Preparations
The main concern regarding a massive deployment of
BogusBiter is that if the login page of a legitimate site is
wrongly ﬂagged as a phishing page, the load on the site’s
authentication server will increase by a factor of S due
to BogusBiter. However, the false positives produced by
widely-deployed phishing detection mechanisms such as
used in IE 7 and Firefox 2 are rare, especially for popu-
lar web sites that have a large number of users. This is
because otherwise the false positives would have been no-
ticed and corrected by these web sites to prevent losing
users. As reported in [32], both IE 7 and Firefox 2 achieve
a zero false positive rate for 516 representative legitimate
web sites. Thus, we expect that only few less-popular and
poorly-designed legitimate web sites need to prepare for a
massive deployment of BogusBiter. The operators of these
web sites can either revise their login pages or contact web
browser vendors to ﬁx this problem.
6.3. Limitations of BogusBiter
Phishers may use JavaScript attacks to evade BogusBiter.
For example, phishers can directly steal a user’s credential
using keystroke monitoring techniques. Such attacks can be
mitigated by adopting the keystroke intercepting technique
introduced in PwdHash[22]. However, it is still possible for
phishers to fabricate more sophisticated JavaScript attacks.
Phishers may also use non-standard login pages to evade
BogusBiter.
For example, phishers may use irregular
HTML login forms, use CAPTCHA on login pages, or
even write the entire login page in Flash. For legitimate
web sites, using non-standard login pages is not popular
because it may create accessibility and usability problems
[27, 38]. Meanwhile, for phishing sites, using non-HTML
login forms is also not popular because it makes a phishing
attack more evident to users or phishing detection tools if
its surface-level or deep-level characteristics become devi-
ated from that of the targeted legitimate web site. For these
reasons, standard HTML pages remain the central focus of
most anti-phishing research work [4, 22, 29, 33].
7. Related Work
Basically the various client-side anti-phishing tech-
niques can be classiﬁed into three different approaches. The
ﬁrst approach focuses on building tools or toolbars to en-
hance the security of a login process. Ye and Smith [30]
designed a prototype of “Trusted Path” to convey relevant
trust signals from a web browser to a human user. Dhamija
and Tygar [5] proposed “Dynamic Security Skins” to allow
a legitimate web site to prove its identity in a way that is
easy for a user to verify but hard for a phisher to spoof. Ross
et al. [22] designed PwdHash to transparently produce dif-
ferent passwords for different domains, so that passwords
stolen at a phishing site are not useful at a legitimate web
site. Wu et al. [29] introduced “Web Wallet” to direct an
alternative safe path to a user if the user’s intended web site
does not match the current web site. Adida [1] proposed
BeamAuth to use a secret token in a URL fragment identi-
ﬁer as a second factor for web-based authentication. These
tools are very helpful, but users must be well trained to use
them and must change some of their login habits.
The second approach focuses on improving the accuracy
of automatic phishing detection techniques. Chou et al. [4]
built SpoofGuard to compute spoof indexes using heuristics
and to provide warnings for suspected phishing web sites.
Recent work by Zhang et al. [33] and Garera et al. [11]
demonstrate that heuristic-based techniques can correctly
identify over 90% of phishing pages with about 1% false
positives. Many other automatic phishing detection tools
or toolbars have been developed, and both Firefox 2 and
IE 7 have automatic phishing detection as a built-in fea-
ture. The evaluation of popular automatic phishing detec-
tion tools, toolbars, and web browser features can be found
in [17, 32, 35, 37].
Researchers have also sought to develop non-preventive
anti-phishing approaches. Florˆencio and Herley [8] pro-
posed a password rescue scheme which relies on client-side
reporting and server-side aggregation to detect and protect
stolen credentials. However, this scheme can only make a
detection decision after several users become victims, and
it also raises privacy concerns by using an extra server to
collect user activity information. Parno et al. [19] pro-
posed a Phoolproof anti-phishing mechanism. Although
their mechanism eliminates reliance on perfect user behav-
ior, a trusted mobile device must be used to perform mutual
authentications. Birk et al. [2] introduced an “active phish-
ing tracing” method, which injects ﬁngerprinted credentials
into phishing sites to trace money laundering. Their method
can support forensic analyses and enforce judicial prosecu-
tions, but it cannot directly protect phishing victims.
353353
8. Conclusion
We introduced BogusBiter, a new client-side anti-
phishing tool to automatically protect vulnerable users by
injecting a relatively large number of bogus credentials into
phishing sites. These bogus credentials hide victims’ real
credentials, and force phishers to verify their collected cre-
dentials at legitimate web sites. The credential veriﬁcation
actions initiated by phishers, in turn, create opportunities for
legitimate web sites to detect stolen credentials in a timely
manner. BogusBiter is transparent to users and can be seam-
lessly integrated with current phishing detection and warn-
ing mechanisms on web browsers. We implemented Bo-
gusBiter as a Firefox 2 extension and evaluated its effec-
tiveness and usability. Phishing is a serious security prob-
lem today, and phishers are smart, economically motivated,
and adaptable. We must therefore actively pursue different
approaches and promote the cooperation of different solu-
tions. The effectiveness of BogusBiter depends on many
factors, but we believe its unique approach will make a use-
ful contribution to the anti-phishing research.
Acknowledgments: We thank anonymous reviewers for
their insightful comments, and Barbara G. Monteith for her
valuable suggestions. This work was partially supported by
NSF grants CNS-0627339 and CNS-0627340.
References
[1] B. Adida. BeamAuth: Two-factor web authentication with a book-
mark. In Proceedings of the CCS, pages 48–57, 2007.
[2] D. Birk, M. Dornseif, S. Gajek, and F. Gr¨obert. Phishing phishers
- tracing identity thieves and money launderer. Technical Report,
Horst-G¨ortz Institute of Ruhr-University of Bochum, 2006.
[3] A. Bortz, D. Boneh, and P. Nandy. Exposing private information by
timing web applications. In Proceedings of the WWW, pages 621–
628, 2007.
[4] N. Chou, R. Ledesma, Y. Teraguchi, and J. C. Mitchell. Client-
side defense against web-based identity theft. In Proceedings of the
NDSS, 2004.
[5] R. Dhamija and J.D.Tygar. The battle against phishing: Dynamic
security skins. In Proceedings of the SOUPS, pages 77–88, 2005.
[6] J. S. Downs, M. B. Holbrook, and L. F. Cranor. Decision strategies
and susceptibility to phishing. In Proceedings of the SOUPS, pages
79–90, 2006.
[7] S. Egelman, L. F. Cranor, and J. Hong. You’ve been warned: An em-
pirical study of the effectiveness of web browser phishing warnings.
In Proceedings of the CHI, pages 1065–1074, 2008.
[8] D. Florˆencio and C. Herley. Password rescue: A new approach to
phishing prevention. In Proceedings of the HOTSEC, 2006.
[9] D. Florˆencio and C. Herley. A large-scale study of web password
habits. In Proceedings of the WWW, pages 657–666, 2007.
[10] D. Florˆencio, C. Herley, and B. Coskun. Do strong web passwords
accomplish anything? In Proceedings of the HOTSEC, 2007.
[11] S. Garera, N. Provos, M. Chew, and A. D. Rubin. A framework for
detection and measurement of phishing attacks. In Proceedings of
the WORM, 2007.
[12] T. N. Jagatic, N. A. Johnson, M. Jakobsson, and F. Menczer. Social
phishing. Commun. ACM, 50(10):94–100, 2007.
[13] M. Jakobsson and S. Myers. Phishing and Countermeasures: Under-
standing the Increasing Problem of Electronic Identity Theft. Wiley-
Interscience, ISBN 0-471-78245-9, 2006.
354354
[14] M. Jakobsson and J. Ratkiewicz. Designing ethical phishing exper-
iments: a study of (ROT13) rOnl query features. In Proceedings of
the WWW, pages 513–522, 2006.
[15] M. Jakobsson and A. Young. Distributed phishing attacks. In Pro-
ceedings of the workshop on Resilient Financial Information Sys-
tems, 2005.
[16] P. Kumaraguru, Y. Rhee, A. Acquisti, L. F. Cranor, J. Hong, and
E. Nung. Protecting people from phishing: The design and evaluation
of an embedded training email system. In Proceedings of the CHI,
pages 905–914, 2007.
[17] C. Ludl, S. McAllister, E. Kirda, and C. Kruegel. On the effective-
In Proceedings of the
ness of techniques to detect phishing sites.
DIMVA, 2007.
[18] T. Moore and R. Clayton. Examining the impact of website take-
down on phishing. In Proceedings of the APWG eCrime Researchers
Summit, 2007.
[19] B. Parno, C. Kuo, and A. Perrig. Phoolproof phishing prevention. In
Proceedings of the Financial Cryptography, pages 1–19, 2006.
[20] B. Pinkas and T. Sander. Securing passwords against dictionary at-
tacks. In Proceedings of the CCS, pages 161–170, 2002.
[21] Rachna Dhamija and J.D.Tygar and Marti Hearst. Why phishing
works. In Proceedings of the CHI, pages 581–590, 2006.
[22] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. C. Mitchell.
Stronger password authentication using browser extensions. In Pro-
ceedings of the USENIX Security Symposium, pages 17–32, 2005.
[23] S. E. Schechter, R. Dhamija, A. Ozment, and I. Fischer. The em-
peror’s new security indicators: An evaluation of website authentica-
tion and the effect of role playing on usability studies. In Proceedings
of the IEEE Symposium on Security and Privacy, pages 51–65, 2007.
[24] S. Sheng, B. Magnien, P. Kumaraguru, A. Acquisti, L. F. Cranor,
J. Hong, and E. Nunge. Anti-Phishing Phil: the design and evaluation
of a game that teaches people not to fall for phish. In Proceedings of
the SOUPS, pages 88–99, 2007.
[25] L. von Ahn, M. Blum, N. Hopper, and J. Langford. CAPTCHA: Us-
ing hard AI problems for security. In Proceedings of the Eurocrypt,
pages 294–311, 2003.
[26] T. Whalen and K. M. Inkpen. Gathering evidence: use of visual
security cues in web browsers. In Proceedings of the conference on
Graphics interface, pages 137–144, 2005.
[27] M. Wu. Fighting Phishing at the User Interface. PhD thesis, MIT,
2006.
[28] M. Wu, R. C. Miller, and S. L. Garﬁnkel. Do security toolbars ac-
tually prevent phishing attacks? In Proceedings of the CHI, pages
601–610, 2006.
[29] M. Wu, R. C. Miller, and G. Little. Web Wallet: preventing phishing
attacks by revealing user intentions. In Proceedings of the SOUPS,
pages 102–113, 2006.
[30] Z. E. Ye and S. Smith. Trusted paths for browsers. In Proceedings of
the USENIX Security Symposium, pages 263–279, 2002.
[31] K.-P. Yee and K. Sitaker. Passpet: convenient password management
and phishing protection. In Proceedings of the SOUPS, pages 32–43,
2006.
[32] Y. Zhang, S. Egelman, L. F. Cranor, and J. Hong. Phinding phish:
Evaluating anti-phishing tools. In Proceedings of the NDSS, 2007.
[33] Y. Zhang, J. Hong, and L. Cranor. CANTINA: A content-based ap-
proach to detecting phishing web sites. In Proceedings of the WWW,
pages 639–648, 2007.
[34] APWG: Phishing Scams by Targeted Company.
http://www.millersmiles.co.uk/scams.php.
[35] Firefox 2 Phishing Protection Effectiveness Testing.
http://www.mozilla.org/security/phishing-test.html.
[36] Firefox Phishing Protection.
http://www.mozilla.com/en-US/ﬁrefox/phishing-protection/.
[37] Gone Phishing: Evaluating Anti-Phishing Tools for Windows.
http://www.3sharp.com/projects/antiphishing/gone-phishing.pdf.
[38] Inaccessibility of CAPTCHA. http://www.w3.org/TR/turingtest/.
[39] Know your Enemy: Phishing.
http://www.honeynet.org/papers/phishing/.
[40] Microsoft Phishing Filter.
http://www.microsoft.com/protect/products/yourself/.
[41] PhishTank. http://www.phishtank.com/.