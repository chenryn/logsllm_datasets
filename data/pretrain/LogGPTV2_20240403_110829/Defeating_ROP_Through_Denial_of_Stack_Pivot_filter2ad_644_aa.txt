title:Defeating ROP Through Denial of Stack Pivot
author:Aravind Prakash and
Heng Yin
Defeating ROP Through Denial of Stack Pivot
Aravind Prakash⇤
Binghamton University
PI:EMAIL
Heng Yin
Syracuse University
PI:EMAIL
ABSTRACT
Return-Oriented Programming (ROP) is a popular and prevalent in-
ﬁltration technique. While current solutions based on code random-
ization, artiﬁcial diversiﬁcation and Control-Flow Integrity (CFI)
have rendered ROP attacks harder to accomplish, they have been
unsuccessful in completely eliminating them. Particularly, CFI-
based approaches lack incremental deployability and impose high
performance overhead – two key requirements for practical appli-
cation.
In this paper, we present a novel compiler-level defense
against ROP attacks. We observe that stack pivoting – a key step
in executing ROP attacks – often moves the stack pointer from
the stack region to a non-stack (often heap) region, thereby vio-
lating the integrity of the stack pointer. Unlike CFI-based defenses,
our defense does not rely on the control-ﬂow of the program. In-
stead, we assert the sanity of stack pointer at predetermined exe-
cution points in order to detect stack pivoting and thereby defeat
ROP. The key advantage of our approach is that it allows for in-
cremental deployability, an Achilles heel for CFI. That is, we can
selectively protect some modules that can coexist with other unpro-
tected modules. Other advantages include: (1) We do not depend
on ASLR – which is particularly vulnerable to information disclo-
sure attacks, and (2) We do not make any assumptions regarding
the so called “gadget". We implemented our defense in a proof-
of-concept LLVM-based system called PBlocker. We evaluated
PBlocker on SPEC 2006 benchmark and show an average run-
time overhead of 1.04%.
1.
INTRODUCTION
With the advent of hardware mechanisms that prevent data ex-
ecution (e.g., DEP, NX), attacks that reuse existing code are on a
rise. Particularly, Return-Oriented Programming (ROP) [32] gleans
code fragments terminated by ret instruction (or more broadly, an
indirect branch instruction) called “gadgets" from executable sec-
tions of program code, and chains such gadgets to perform mean-
ingful malicious tasks. In a seminal paper, Shacham [32] showed
that ROP is Turing complete. Since, several real world attacks
⇤This work was done when the author was a student at Syracuse
university.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’15, December 07 - 11, 2015, Los Angeles, CA, USA
Copyright 2015 ACM 978-1-4503-3682-6/15/12 ...$15.00
DOI: http://dx.doi.org/10.1145/2818000.2818023.
employ ROP to bypass DEP. State-of-the-art binary-level defenses
against ROP approach the problem from three different paradigms:
gadget elimination, control-ﬂow integrity (CFI) and artiﬁcial diver-
siﬁcation or randomization. Defenses based on gadget elimination
statically analyze a binary and perform semantics-preserving trans-
formation in order to eliminate gadgets [28, 27]. CFI-based de-
fenses enforce CFI, a program property [3] that requires the ﬂow
of control during the execution of a program to adhere to a stat-
ically determined control ﬂow graph. Due to the lack of precise
program semantics, binary-level CFI defenses (e.g., BinCFI [43],
CCFIR [42]) enforce an approximate control-ﬂow graph (CFG) and
as a consequence, they enforce coarse-grained CFI policies. Fi-
nally, defenses based on artiﬁcial diversiﬁcation (e.g., [40], [17])
randomize at various granularities, the locations of modules in the
memory thereby making it hard for an attacker to locate the gad-
gets.
Firstly, defenses based on gadget elimination often lack cover-
age due to the vast number of gadgets in binaries and the intrusive-
ness of the approach. For example, Pappas et al. [28] disrupt or
eliminate no more than 76.9% of all the gadgets in all PE modules
in Windows 7 and Windows XP. That still leaves an attacker with
23.1% (or 6,320,777) gadgets to construct an attack. Secondly, as
demonstrated by Carline and Wagner [8], and Gökta¸s et al. [21],
state-of-the-art binary-level CFI defenses (e.g., BinCFI [43], CC-
FIR [42]) suffer from low precision due to their coarse-grained na-
ture. Most practical implementations of CFI including those based
on shadow stack impose high performance overhead [15]. Runtime
hardware-based CFI defenses ROPecker [11] and kBouncer [29]
have also been shown inadequate when confronted by a determined
adversary [8]. Moreover, CFI-based approaches often lack incre-
mental deployability and offer all-or-nothing protection. That is,
either all modules are protected or no modules are protected. Fi-
nally, artiﬁcial diversiﬁcation as a solution is vulnerable to disclo-
sure attacks [6, 35, 25]. By injecting and reusing the predictable
just-in-time (JIT) code into a program’s memory, Snow et al. [35]
show that randomization is also not an effective solution. Funda-
mentally (also highlighted by [8]), defenses against ROP deﬁne a
“gadget" to be a short sequence of instructions terminated by an
indirect branch instruction, which is not necessarily true. In fact,
[8] and [21] demonstrate attacks that utilize large and legitimate
sequence of instructions – sometimes entire functions – as gadgets.
A key component of most ROP attacks is stack pivoting, a tech-
nique that positions the stack pointer to point to the ROP payload
– an amalgamation of data and pointers to gadgets. In this paper,
we observe that during any point in a program, the stack pointer
must point to the stack region of the currently executing thread.
We also observe that during ROP, each gadget behaves like an in-
struction with complex semantics, and the stack pointer performs
the role of a program counter. Therefore, within the realm of ROP,
traditional CFI (i.e., integrity of instruction pointer) transforms into
integrity of stack pointer. By performing compiler-level modiﬁca-
tions during code generation, we ensure that modiﬁcations to the
stack pointer lie within a predetermined region and stop attempts
by an adversary to pivot the stack to point to the ROP payload that
is located outside the stack region.
Our solution presents several advantages over prior binary-level
ROP defenses:
1. We take a non-control-ﬂow approach and make no assump-
tions regarding the size or instruction semantics of gadgets.
In fact, our solution is oblivious to the concept of a “gadget",
and operates at an instruction level.
2. Our solution does not depend on ASLR. Our threat model
allows for ASLR to be turned off and yet, defend against
ROP.
3. Our solution allows for incremental deployment. That is,
only speciﬁc modules can be protected, and the protected
modules can inter-operate with unprotected modules.
4. Finally, our solution defends against ROP attacks where pay-
load is located outside the stack region (e.g., heap) with a low
overhead of ⇠1%.
Using the LLVM compiler architecture, we implemented our
compiler-level solution in proof-of-concept prototypes called PBlocker
and PBlocker+. PBlocker asserts the sanity of stack pointer
whenever the stack pointer is modiﬁed, whereas PBlocker+ as-
serts the sanity of stack pointer at the end of each function. PBlocker
imposed an overhead of 1.04% for SPECINT 2006 benchmark,
1.99% for binutils and 0.7% for coreutils, whereas PBlocker+
imposed an overhead of 2.9% on SPECINT 2006 benchmark.
The rest of the paper is organized as follows: Section 2 provides
a technical background on ROP attacks and stack pivoting. Sec-
tion 3 and 4 present our solution and the relevant security analysis
respectively. We evaluate our solution in Section 5. We present the
related work and conclude in Section 6 and 7.
2. TECHNICAL BACKGROUND AND MO-
TIVATION
We brieﬂy review the various steps involved in ROP attacks. One
particular step: Stack Pivoting is fundamental in understanding the
rest of the paper.
2.1 ROP Attacks
Rerturn-Oriented Programming (ROP), an extension of return-
to-libc, is a well established attack technique. During ROP attack,
an attacker reuses fragments of code called “gadgets" in existing
executable code regions. Traditionally, a gadget is a short sequence
of instructions terminated by a ret instruction. By chaining mul-
tiple gadgets in the program, one can achieve meaningful compu-
tation [32]. Other variants of ROP [7], use a pop reg followed
by an indirect jmp reg instruction instead of a ret instruction
as the last instruction of the gadgets. Without loss of generality, in
this work, we use the term ROP to include traditional ROP and its
variants.
Instructions in x86 are of variable-width, therefore it is possible
that potentially useful gadgets can be constructed by starting at an
offset within an intended instruction. Instructions in such gadgets
are termed unintended instructions.
A schematic overview of steps involved in a ROP attack is pre-
sented in Figure 1. Also, Figure 2 presents the concrete steps in
an ROP attack. The attacker ﬁrst injects the payload into the vic-
tim process’ memory. Here, and in the remainder of the paper, we
refer to ROP payload or payload as the combination of data and
addresses of the gadgets used in the ROP attack1. In Figure 2, the
payload resides as data at address 0x8000.
In theory, an attacker can inject ROP payload into any segment
that is writable. In practice however, a vast majority of browser
exploits utilize a popular and convenient technique called Heap
Spray, wherein the payload is dumped onto the heap. Depend-
ing on the nature of the vulnerability and constraints speciﬁc to the
attack, an attacker may choose to or need to inject payload in a
speciﬁc writable section of the program memory.
The second step exploits the vulnerability in the victim process.
This step is independent of the nature of vulnerability (e.g., use-
after-free, integer overﬂow, buffer overﬂow). At the end of this
step, the attacker controls the program counter. S/he may also con-
trol certain registers depending on the nature of the attack. For ex-
ample, in Figure 2, a vulnerability in the victim process allows the
attacker to control registers eax and ebx. The attacker achieves
malicious code execution by loading eax with the address of the
payload (0x8000) and ebx with address of a special type of gadget
called “stack pivot".
The third step is the execution of stack-pivot gadget, which loads
the address of the location where ROP payload is stored into the
stack pointer. This step deﬁnitively transforms the execution to the
ROP domain, and the stack pointer assumes the role of the program
counter. Stack-pivoting is crucial for the attacker to convert an in-
stance of single arbitrary code execution into continuous execution
of malicious logic.
Finally, an indirect branch instructionat the end of the stack pivot
gadget triggers the execution of the chain of gadgets directed by
the payload (in Figure 2, 0x51c0577f, 0x77c30083, 0x51c05534,
etc.). Often, the scope of ROP is limited to bypassing the DEP.
An executable is injected into a data page and an API such as
VirtualProtect or mprotect is used to set the data page
as executable. Our solution is independent of the scope/goals of
ROP and therefore we do not dwell into the details of bypassing
DEP.
2.2 Stack Pivoting
A requirement for stack-pivot operation is to write to the stack
pointer. We refer to such instructions as “SP-update" instructions,
short for “stack-pointer update" instructions. Depending on the na-
ture of the write operation, we further classify SP-update instruc-
tions into:
• Explicit SP-update: These instructions perform an explicit
write operation that alters the stack pointer (e.g., mov esp,
eax; add esp, 0x10;). Explicit SP-update instructions
occur in two forms:
– Absolute SP-update: These instructions write an abso-
lute value or register into the stack pointer. For ex-
ample, mov esp, eax; xchg eax, esp; pop
esp;.
– Relative SP-update: These instructions alter the stack
pointer by a ﬁxed offset. For example, add esp,
0x10; sub esp, 0x10;.
• Implicit SP-update: These instructions alter the stack pointer
as an implicit effect of another operation. pop eax; ret;
retn;, etc. are examples of implicit SP-updates.
1ROP payload is diffent from the malicious executable payload that
is commonly executed after DEP is bypassed.
ROP Payload 
Injection
Exploitation
Stack Pivoting
Heap Spray,
Stack Overflow, 
Stack Injection
Use-after-free,
Integer/buffer 
overflow, etc.
mov esp, eax; ret
xchg esp, eax; ret
add esp, 0x28; ret
sub esp, 0x40; ret
etc.
Gadget-Chain 
Execution
Call preceeding gadget,
Function entry gadget,
Unintended instruction 
gadget
Figure 1: Steps involved in executing a typical ROP attack.
Vulnerable program:
...
//eax, ebx controlled by attacker.
//eax <= 0x8000
//ebx <= &Stack Pivot
jmp *ebx
...
Exploitation
Stack Pivot:
xchg eax, esp;
ret
0x51c05534:
mov eax, [eax]; ret;
0x51c0577f:
pop ecx; pop edx; ret;
0x77c30083:
mov eax, edx; ret;
Gadget Chain 
Execution 
Figure 2: Example of stack pivoting
...
0x8010
0x800c
0x8008
0x8004
0x8000
0x51c05534
0x77c30083
0x445000f3
0x7
&Gadget 2
&Gadget 1
Data
Data
0x51c0577f &Gadget 0
ROP Payload
Stack 
Growth
allocated for the function, and when the function returns, the exact
amount of space that was allocated is reclaimed. Allocation and
deallocation are accomplished by simply moving the stack pointer
by the amount of stack space the function requires. Typically, when
the size of the stack required by a function is known during compile
time, the compiler inserts relative SP-update instructions to allocate
and deallocate the function stack frame. For example, in LLVM
clang compiler, frame allocation is accomplished via a sub off-
set, %rsp instruction or the push instruction, and deallocation is
accomplished through add offset, %rsp instruction. In fact, other
than frame allocation and deallocation, we found no legitimate uses
of relative SP-update instructions. It is possible that enter and
leave instructions are used to save and restore stack pointer and
the frame pointer. These instructions manifest as absolute stack
pointer updates.
Furthermore, while infrequent, the compiler sometimes intro-
duces absolute SP-update instructions to initialize the stack pointer.
When the size of a function’s stack frame is unknown during com-
pile time (e.g., when the function allocates stack space dynamically
using alloca), the compiler inserts code to calculate the appro-
priate frame size at runtime and using an absolute SP-update in-
struction, initializes the stack pointer with the correct value. There
are also legitimate uses of absolute SP-update instructions when
the stack is unwound (e.g., during an exception). In such cases, the
value of the stack pointer is calculated and initialized at runtime. C
compilers that target ﬂavors of Windows OS utilize a helper routine
called _chkstk when the local variables for a function exceed 4K
and 8K for 32 and 64 bit architectures respectively. The function
_chkstk checks for stack overﬂow and dynamically grows the
stack region using an absolute SP-update instruction if the stack
growth is within the thread’s allowable stack limit. More on dy-
namic stack allocation is presented in Section 3.4.
3. PBLOCKER
3.1 Threat Model and Scope
Our solution assumes an adversary who has the capability to ex-
ploit a vulnerability in a program and achieve arbitrary code execu-
Figure 3: Classiﬁcation of SP-update instructions.
Figure 3 shows the classiﬁcation of various SP-update instruc-
tions. Absolute SP-update instructions can load an arbitrary value
into the stack pointer, and are therefore most popular and conve-
nient choice for pivoting. Due to the limited abilities in moving the
stack pointer, relative SP-update instructions are less capable than