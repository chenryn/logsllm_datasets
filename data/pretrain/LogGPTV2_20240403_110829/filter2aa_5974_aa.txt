# 并发与线程
---
**文章**
- [Ruby 实例说明 Ruby 多线程的潜力和弱点](https://ruby-china.org/topics/11248)
- [Ruby并发与线程](http://afghl.github.io/2016/09/22/ruby-concurrency-and-thread-pool.html)
- [Ruby 无人知晓的 GIL](https://ruby-china.org/topics/28415)
- [Nobody understands the GIL](https://www.jstorimer.com/blogs/workingwithcode/8085491-nobody-understands-the-gil)
- [Nobody understands the GIL - Part 2: Implementation](https://www.jstorimer.com/blogs/workingwithcode/8100871-nobody-understands-the-gil-part-2-implementation)
---
# 简单例子
**语法**
要启动一个新的线程，只需要调用 `Thread.new` 即可:
```ruby
# 线程 #1 代码部分
Thread.new {
  # 线程 #2 执行代码
}
# 线程 #1 执行代码
```
```ruby
#!/usr/bin/ruby
def func1
   i=0
   while i "unhandled exception"
end
```
使用下列3个方法，就可以让解释器在某个线程因异常而终止时中断运行。
- 启动脚本时指定 `-d` 选项，并以调试模时运行。
- 用 `Thread.abort_on_exception` 设置标志。
- 使用 `Thread#abort_on_exception` 对指定的线程设定标志。
当使用上述3种方法之一后，整个解释器就会被中断。
```ruby
t = Thread.new { ... }
t.abort_on_exception = true
```
**线程同步控制**
在 Ruby 中，提供三种实现同步的方式，分别是：
1. 通过 `Mutex` 类实现线程同步
2. 监管数据交接的 `Queue` 类实现线程同步
3. 使用 `ConditionVariable` 实现同步控制
- 通过 `Mutex` 类实现线程同步
  通过 `Mutex` 类实现线程同步控制，如果在多个线程钟同时需要一个程序变量，可以将这个变量部分使用 `lock` 锁定。 代码如下：
  ```ruby
  require "thread"
  puts "Synchronize Thread"
  @num=200
  @mutex=Mutex.new
  def buyTicket(num)
      @mutex.lock
            if @num>=num
                @num=@num-num
                puts "you have successfully bought #{num} tickets"
            else
                puts "sorry,no enough tickets"
            end
      @mutex.unlock
  end
  ticket1=Thread.new 10 do
      10.times do |value|
      ticketNum=15
      buyTicket(ticketNum)
      sleep 0.01
      end
  end
  ticket2=Thread.new 10 do