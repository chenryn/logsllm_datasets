title:A practical characterization of a NASA SpaceCube application through
fault emulation and laser testing
author:John Paul Walters and
Kenneth M. Zick and
Matthew French
A Practical Characterization of a NASA SpaceCube
Application through Fault Emulation and Laser Testing
John Paul Walters, Kenneth M. Zick, and Matthew French
Information Sciences Institute, University of Southern California
Arlington, VA 22203
Email: {jwalters, kzick, mfrench}@isi.edu
Abstract—Historically, space-based processing systems have
lagged behind their terrestrial counterparts by several processor
generations due,
in part, to the cost and complexity of im-
plementing radiation-hardened processor designs. Efforts such
as NASA’s SpaceCube seek to change this paradigm, using
higher performance commercial hardware wherever possible.
This has the potential to revolutionize onboard data processing,
but it cannot happen unless the soft error reliability can be
characterized and deemed sufﬁcient.
A variety of fault injection techniques are used to evaluate
system reliability, most commonly fault emulation, fault simula-
tion, laser testing, and particle beam testing. Combining multiple
techniques is more complex and less common. In this study we
characterize a real-world application that leverages a radiation-
hardening by software (RHBSW) solution for the SpaceCube
platform, using two fault injection strategies: laser testing and
fault emulation. We describe several valuable lessons learned, and
show how both validation techniques can be combined to greater
effect.
I.
INTRODUCTION
The space community sits at an inﬂection point. As Earth-
orbiting satellite imaging systems continue to generate massive
volumes of data, either the satellite to Earth downlink capacity
must increase to accommodate this data, or onboard processing
must be used to reduce the data volume. Early experiments
from NASA’s EO-1 mission demonstrated the viability of
onboard processing, and future missions expect to use it more
extensively [1].
Typically,
space-based computing leverages
radiation-
hardened processing elements (e.g. FPGAs, processors, memo-
ries). Processors such as the Mongoose V [2], the Rad6000 [3],
and the Rad750 [4] provide this radiation -hardening at the
cost of processing performance. To realize the full beneﬁt
of onboard processing, however, future missions will require
much greater computational power than is available in today’s
radiation-hardened processors.
NASA has provided an alternative processing platform
through the SpaceCube [1]. Instead of performing all data
processing in radiation-hardened components, the SpaceCube
can provide commercial systems-on-a-chip paired with a low
performance radiation-hardened microcontroller. This allows
scientiﬁc missions to utilize far greater processing power, pro-
vided that the SpaceCube-based processing reliability can be
characterized and well understood, and provided that software
approaches to fault tolerance can be proven effective.
Through our previous work we have developed an
application-agnostic fault tolerance suite for embedded plat-
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
forms like the NASA SpaceCube [5], allowing such platforms
to mitigate control errors (detecting and correcting data errors
is an active area of our research).
The focus of this paper is to characterize, through fault
injection, the reliability of a real application with our radiation-
hardening by software (RHBSW) solution targeting the Space-
Cube platform. There are four common fault injection methods
to characterizing a processor or system’s reliability: fault emu-
lation, fault simulation, laser testing, and particle beam testing.
Particle beam testing is known to be the “gold standard” of
radiation characterization for devices. In our case, however,
particle beam testing was not suitable because it would have
exposed portions of the chip that were not protected by our
radiation-hardening by software scheme.
Fault simulation is commonly used by logic designers to
characterize their own hardware designs, whether for space
or terrestrial applications. This is convenient because such
designers have access to RTL and netlists that enable accu-
rate simulation. We do not have access to such proprietary
information for the embedded CPU cores on the SpaceCube.
Thus fault simulation was infeasible.
Instead, we base our characterization on a combination
of laser testing and fault emulation. Laser testing allows for
precise control of the injection target to the micron level,
allowing injection of a single pulse at a speciﬁed x − y
coordinate. Fault emulation (injecting faults into an actual
machine such as a prototype) provides an inexpensive solution
to long running fault injection campaigns, enabling users to
collect thousands of injections continuously over a period of
days or weeks. We show how we can leverage both techniques
to greater effect than either laser testing or fault emulation can
provide alone.
As such, we make two contributions in this paper: 1) we
offer lessons learned while characterizing the reliability of
an embedded application using both laser testing and fault
emulation, 2) we describe the synergistic effects achieved by
combining laser testing and fault emulation.
II. BACKGROUND
A. NASA SpaceCube and Onboard Data Processing
The NASA SpaceCube is a family of platforms created at
the NASA Goddard Space Flight Center for high-performance
onboard data processing [1]. By leveraging leading-edge
commercial devices, FPGA-based acceleration, and radiation-
hardening by software, this paradigm aims for breakthrough
performance for key applications. A SpaceCube 1.0 platform
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
ignored. As we later show, this can lead to overestimating the
impact of speciﬁc architectural features (e.g. the register set).
D. Laser Testing
A laser can be used to inject
transient faults into an
integrated circuit [6], enabling an evaluation of a system’s fault
tolerance methods. Unlike particle beam-induced faults, laser-
induced faults can be ﬁnely controlled in space and time; single
laser pulses can be injected into a system in order to test single
event effects, and a laser can be readily focused on a circuit
of interest with a spot size on the order of a micron. A laser
pulse ionizes a circuit region, potentially causing states to ﬂip
in one or more sequential elements or combinational circuit
nodes. The physical fault mechanisms are not identical to those
involving particle collisions, so laser testing does not directly
characterize the raw fault rates that can be expected in a
particle radiation environment. However, the precise generation
of transient faults allows for characterization of fault-to-error
probabilities, and the scheduling of laser facilities is often
easier and more ﬂexible than scheduling of particle beam
facilities.
Laser testing has advantages over fault emulation as well.
Faults can be injected across all sequential elements as opposed
to only those that are software-writable. Faults in combina-
tional logic (single event transients aka SETs) can be injected.
Importantly, it is also possible to generate realistic multi-bit
upsets; this is usually not feasible with fault emulation when
a system contains proprietary IP cores for which the logical-
physical mapping is unknown.
III. APPLICATION, SYSTEM, AND FAULT MODELS
A. System and Application Models
For testing, we modeled the SpaceCube using commer-
cial Xilinx Virtex-4FX60 FPGAs identical to those on the
SpaceCube 1.0 platform. Laser testing and fault emulation
campaigns were conducted on separate test boards due to
the requirements of the laser test. More details on the laser
testing apparatus are described in Section IV. In both the laser
and fault emulation campaigns, two PowerPC processors are
used: one for application execution, and the other to model the
radiation-hardened microcontroller.
Our application model synthesizes the major components
of common satellite imagery applications: FFT, complex
multiplication, and thresholding. We created an application
representative of synthetic aperture radar (SAR) as well as
hyperspectral image classiﬁcation. The application repeatedly
performs 1-dimensional FFTs and complex-complex multipli-
cation followed by thresholding (see Fig. 2). The number
of loop iterations was ﬁxed at 330 in order to limit
the
application’s runtime to approximately 5 seconds.
At system startup a golden output is calculated that is used
to verify results after both the fault emulation and laser testing
trials. We deﬁne a trial as a single execution of our application,
during which a single fault is injected. In the case of our laser
test, a single pulse is emitted causing a single laser strike,
while in the case of our fault emulator, a single state bit is
ﬂipped at random.
Fig. 1: SpaceCube (circled) on the International Space Station
MISSE-7 experiment.
using four Xilinx Virtex-4FX60 FPGAs was installed on the
International Space Station in 2009, as shown in Fig. 1.
Another system ﬂew on the Hubble Space Telescope Servicing
Mission 4 in 2009. Next generation versions are being devel-
oped for a range of missions including CubeSats.
B. Error Detection and Recovery Methods
Our fault tolerance platform is composed of two primary
error detection mechanisms: application-level control ﬂow
assertions, and heartbeat monitors. We assume the presence
of a radiation-hardened controller like the one present on
the SpaceCube 1.0 platform. The radiation-hardened controller
performs no data processing; however, it is responsible for
monitoring the heartbeats sent from each of the embedded
PowerPC processors.
The primary recovery mechanisms are through our embed-
ded checkpoint/rollback library. Recovery is performed either
via self-recovery, where an individual PowerPC application
recovers itself, or via the rad-hard microcontroller.
C. Fault Emulation
A fault emulator can be used to emulate upsets within the
software-writable regions of a prototype system or processor.
Unlike laser or particle beam-induced faults, emulated faults
can be precisely speciﬁed through the emulator’s logical view
of the hardware with precise reporting of speciﬁc upsets and
their logical location. This level of detail can prove incred-
ibly valuable when characterizing an application or system,
allowing developers to tune their fault tolerance strategies to
the unique characteristics of a speciﬁc application. Another
beneﬁt of fault emulation is its low cost, enabling inexpensive
long-running fault injection campaigns over days, weeks, or
longer.
However, fault emulation has its limitations. The fault
mechanism does not always closely mimic the fault mechanism
of real world radiation-induced faults. Multi-bit upsets cannot
typically be modeled accurately. Moreover, because this type
of fault emulation can only characterize systems based on their
software-writable regions, any non-software-visible regions are
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
For laser testing, faults are modeled as an SEU or SET at
a random location within a region containing the embedded
processor core. Only a single laser pulse is injected during
one execution of the application of interest, with timing that
is uniformly random across the execution time. Unlike in
fault emulation, laser-induced SEUs may be multi-bit. Speciﬁc
details about the laser testing methodology are provided in the
following sections.
IV. EXPERIMENTAL METHODOLOGY
A. Fault Emulation
Fault emulation is performed using a custom designed
PowerPC fault emulator. The experiment runs on a single
Virtex-4FX60 FPGA. Testing is performed using a Xilinx
ML410 development board. As described in Section III we
use a single PowerPC core within the FPGA as the application
processor, and a second core as an emulated rad-hard micro-
controller. Faults are injected using a non-cacheable interrupt
with non-cacheable variables to avoid polluting the application
cache contents. Register upsets are implemented through a
combination of inline assembly code and stack manipulation
to inject upsets into the nonvolatile registers of the processor.
To inject upsets into the cache contents, a custom FPGA
circuit is used. First, the target cache element and cache line
are identiﬁed. In the case of the instruction cache, the line
is invalidated and retouched. In doing so, the custom FPGA
circuit modiﬁes the bus transaction to insert the bit ﬂip before
the data enters the processor. A similar process is used in the
case of the data cache; however, additional work is necessary
to account for dirty cache lines. We provide a more detailed
description of the fault emulator in our prior work [8].
The fault emulator is capable of injecting faults into any
software-writable memory location. Fault locations are chosen
by randomly selecting a bit among all software-writable bits.
In Table I we provide an estimation of all of the bits within
the PowerPC 405. We classify them by those accessible by our
fault injector and those that are not.
TABLE I: PowerPC 405 sensitive bits
Feature
Instruction Cache
Data Cache
Registers
Execution Pipeline
ALU/MAC
Timers
MMU
Misc
Total
Size
Accessible
16KB + 1472B tag/ctrl
16KB + 1344B tag/ctrl
75 x 32 bits
0
0
0