HDFS
Kernel sec.
SELinux
Y
Y
FTP server
pureftpd
iptables
Firewall
Y
Y
SSH server
openssh
O
Y
Y
Y
Y
Y
Y
Y
Y
N
A
Y
Y
Y
Y
Y
Y
Y
Y
N
R
Y
Y
Y
Y
N
Y
N
Y
Y
Table 2: Information encoded in access logs of different soft-
ware. S = subject, O = object, A = action, R = result.
access logs of the studied systems encode the required information.
Therefore, it is straightforward to build a uniform parser that takes
a few simple format annotations to work with different systems.
Furthermore, the access results (ALLOW or DENY) recorded in
the access logs of one software component reflect the end-to-end
access control behavior which includes the access control of all the
downstream components. For example in Figure 1, the access logs
of the web server reflect the end-to-end access control behavior of
the entire Wikipedia system including the web server itself as well
as the downstream app server and database server. If the request is
denied at the app server or the database server, a DENY will also
be recorded in the access log of the top-level web server.
In order to make our solution practical, we explore the feasibility
of building a solution on top of the end-to-end access logs only,
instead of attempting to understand the complex, heterogeneous
access control configurations of every single component in the
system (which may not be feasible for closed-source, proprietary
software or hardware components).
2.3 Access-Control Policies
An access-control policy is composed of a set of rules. Each rule can
be represented by an IF-THEN statement that evaluates a subject
attribute and an object attribute, and the concrete action in order to
make a decision (ALLOW or DENY). Within the same subject/ob-
ject attribute, all the subjects/objects are treated as identical. For
instance, an access control rule for a web server could be:
1 IF ( $method is "GET") THEN
2
3
4
ALLOW
IF ($url is "/ confidential /*") THEN
IF (group($user) is "admin") THEN
The observation drives the following two design decisions of
P-DIFF: (1) We are able to encode the access control policy using
a decision tree based on the IF-THEN representation. Certainly,
traditional decision trees cannot deal with time-series sequences
and cannot encode policy changes. Therefore, we design a novel
decision tree named Time-Changing Decision Tree in §6; (2) The
policy inference should work at the granularity of subject/object
attributes rather than each individual subject/object for efficiency
and scalability.
3 DESIGN DECISIONS
3.1 Inferring Policy from Access Logs
There are two information sources from which access control policy
changes can be inferred: (1) configuration change history and (2)
access logs. We decide to build P-DIFF on top of the access logs for
the following considerations.
In our experience, inferring the policy changes from the config-
uration change history is difficult with non-technical barriers. First,
as access control policy is implemented and enforced by multiple
components as exemplified in Figure 1, the configurations of each
component could be managed by different teams (e.g., web server
administrators, app developers, and database administrators) with-
out a holistic authoring system [55, 56]. It is technically challenging
to keep track of every single configuration change in a large-scale,
complex system, not to mention the cultural challenges of enforcing
the practice of tracking everything. On the other hand, access logs
are the output of the running systems and can be collected without
much extra overhead.
Second, as discussed in §2.2, access logs reflect the precise end-
to-end access control behavior of the entire system. We only need
to collect the access logs of the top-tier components. Instead, a
configuration based solution requires to understand the interactions
among multiple components which could be challenging in large-
scale, complex systems. Furthermore, due to misconfigurations and
bugs in the configuration handling code, the configuration settings
may not be consistent with the policy or the mental model of
sysadmins [69, 70]. Access logs, as the output of the access control
system, precisely records the end-to-end behavior.
Third, comprehension and analysis of various configuration and
code are challenging, especially for closed-source, proprietary soft-
ware and hardware components. As shown in [64], reverse engineer-
ing of an application’s access-control configurations is challenging
and requires non-trivial human efforts. Oftentimes, understanding
the access control configurations of a single component is non-
trivial [22], let alone analyzing the interactions between multiple
components. On the other hand, access logs have simple and clear
semantics, as discussed in §2.2.
3.2 Using Decision Tree Based Models
As discussed in §2.3, an access control policy is essentially a “classi-
fier” that labels an access to be either allowed or denied. There are
many machine learning algorithms that can infer such classifiers
from data, such as Decision Tree [47], Association rule learning [1],
Logistic Regression [25] and Neural Networks [23]. We choose
Decision Tree for two reasons:
• Decision trees are easy to interpret. As our goal is to inform
human administrators of policy changes for validation, it is
important to use a machine learning algorithm that generates
human-understandable classifiers. Many algorithms, such as
Logistic Regression and Neural Networks, generate classifiers
with hard-to-understand weights and thus are not suitable for
our use case.
• Decision trees can effectively represent access control policies.
As discussed in §2.3, an access control policy consists of mul-
tiple steps of decision-making and may contain decisions on
Figure 2: Decision tree representations of three access con-
trol models. The tree structure can effectively represent ac-
cess control hierarchies for (a) files, (b) roles, and (c) URLs
with multiple decision steps based on different attributes.
hierarchical attributes, which can naturally be represented by a
decision tree. Figure 2 gives an example of how decision trees
can effectively represent policies implemented in different ac-
cess control models, including DAC, RBAC, and ABAC. Some
other algorithms, such as Association Rule Learning can only
infer correlations between attributes but cannot deal with hier-
archical relations of them.
3.3 Dealing with Sparse Logs
A key challenge of inferring access control policies from access logs
is to deal with sparse logs that only contain a fraction of all possible
requests. Access logs are often sparse because users typically do
not request every resource in a system in a short period, which has
been reported in prior studies [13] as well as the access logs we
collected from real-world deployments (used for evaluation).
Given that access logs are often sparse, one cannot assume ev-
ery possible tuple of  (§2.2) can be observed from
historical logs. In other words, one cannot train a classifier with
the complete dataset of every  tuple. To address this
challenge, we design a decision tree learning algorithm to infer the
result R of unobserved requests from observed access records. As
shown in Figure 3, our learning algorithm groups observed and
unobserved requests and uses the observed request results to infer
the group policies. The detailed algorithm is described in §7.
4 THREAT MODEL
P-DIFF targets on detecting the attacks that aim to steal data by
exploiting access control vulnerabilities. The typical cases include
that a sysadmin mistakenly over-grant the permissions of resources,
e.g., make a private web page accessible to unexpected users (e.g.
anonymous) and then the attackers steal the data by acting as those
users. As reported by a number of recent studies [7–9, 15, 52, 55, 56,
68], such misconfigurations of access control are among the most
common and severe security risks in modern information systems.
However, P-DIFF does not target on password attacks or spoofing
attacks in which attackers try to guess a password and pretend to
be a normal user. In those cases, P-DIFF cannot differentiate a
malicious access from a normal access because they have the same
access-decisive attribute (i.e. user name) in the log.
The correctness and effectiveness of P-DIFF rely on that the
access logs faithfully reflect the system behavior. This is based on
Figure 3: Example of sparse accesses to a course website and
the decision tree inferred from them. In (a), a green|red mark
means the access was allowed|denied. A vacancy means the
access did not happen, and thus the policy is not reflected
in the accesses. To address it, our learning algorithm groups
vacancy with green|red marks and infers a group policy as
shown in (b).
three specific assumptions. First, we assume the sysadmins enable
access logs in the system settings. This is a reasonable assumption
because the default settings of most programs (e.g. web server) have
access logs enabled. In addition, since only one log entry needs to be
recorded for each access, this will not cause too much performance
or storage overhead. Second, we assume that the monitored system
can always correctly generate access logs. If the system is modified
by attackers so that no log or fake logs are generated, P-DIFF may
not be able to detect the behavior changes. Third, we assume that
there is no rootkit or malware at the storage layer which can modify
the generated logs.
5 P-DIFF OVERVIEW
P-DIFF is a tool that infers access control policies from access logs.
P-DIFF is able to detect policy changes, when it observes deviation
of access results from its known policy. P-DIFF supports two use
cases, change validation and forensics, by (1) detecting new policy
changes and (2) extracting historical changes.
Figure 4 illustrates the end-to-end workflow of P-DIFF. P-DIFF in-
fers access control policies and maintains the policy change history
in internal decision-tree like data structure. When P-DIFF observes
a new access result, it checks whether or not the result adheres
to the latest known policy. If not, P-DIFF treats the violation as a
policy change.
Change validation is done by asking sysadmins to validate the
policy change whenever a change is detected. To avoid over-alarming,
by default, P-DIFF only notifies system admins when an access that
previous was denied is now granted. This is the common pattern
of illegal accesses caused by over-granting misconfigurations, as
discussed in §1.1. P-DIFF presents both the changed rules, together
with the accesses that were affected by the rule changes to make
the validation effective.
For forensic analysis, given an access of interest (e.g., illegal
access that caused security incidents like data breaches), P-DIFF
searches the change history and identifies the rule change that
causes a previously denied access to be granted. If the access is
allowed from the beginning, P-DIFF outputs the initial state as the
root cause.
(a)DAC:UnixfilepermissionsIF$dir==“/homework”AllowDenyIF$file==“que.pdf”Deny!"#$%&’($%&’($!"#$IF$role==“director”AllowAllowIF$role==“engineer”Deny!"#$%&’($%&’($!"#$(b)RBAC:hierarchalrolesinatechcompany(c)ABAC:webserveraccesscontrolIF$url==“/private.htm”AllowAllowIF$IP==“127.0.0.1”Deny!"#$%&’($%&’($!"#$Figure 4: The workflow of P-DIFF. P-DIFF infers access control policies from access logs. It maintains the inferred policies
in a data structured named Time-Changing Decision Tree which records the entire change history. P-DIFF supports two uses
cases, change validation and forensics analysis, as elaborated in §5.
P-DIFF needs to address three main challenges: (1) How to effec-
tively maintain the evolution of access control policies? (2) How to
accurately learn access control policies from access logs? and (3)
How to manage the policy changes?
To address the first challenge, we design a novel data struc-
ture named Time-Changing Decision Tree (TCDT) to encode rule
changes as time series. In a TCDT, each leaf node of the tree is no
longer associated with a percentage of ALLOW/DENY as in the tra-
ditional decision tree, but with the history of all the access results
related to the rule. In this way, TCDT not only can precisely model
access-control policies at any given time, but also can capture the
evolution of policy changes.
For the second challenge, we design a decision-tree-based learn-
ing algorithm to automatically infer policies from access logs. As
discussed in §2.3, access-control policies have an IF-THEN form
and inherent namespaces hierarchies, which can be encoded in a
decision tree model with each internal node representing a condi-
tion associated with an attribute and each path from the root node
to a leaf node representing an access control rule.
Addressing the third challenge requires a learning algorithm
that can infer access control rules alone with its evolution history.
Traditional decision tree learning cannot deal with time-series se-
quences and thus cannot be used by P-DIFF (cf. §12 for details). We
design a new data structure named Time-Changing Decision Tree
(TCDT) and the learning algorithm which is capable of learning
access control policy changes over time and encoding the change
history in a TCDT.
P-DIFF is implemented with Python based on the NumPy and
Pandas data analysis libraries [40, 43]. It can be deployed on differ-
ent platforms that support Python.
6 POLICY REPRESENTATION
Access control policies can be naturally represented using a series
of IF-THEN statements and be maintained in decision-tree-based
data structures (cf. §2.3). In this section, we first present how to use
traditional decision trees to encode static access control policies. We
then present a novel data structure called Time-Changing Decision
Tree (TCDT) to encode the evolution history of access control
policies.
Decision Tree (DT). A decision tree is a predictive model that
generates a result value based on the observed attributes of an
item [47]. It encodes the result generation rule in each tree path
that walks from the root node to a leaf node. A DT has two types of
nodes: internal nodes and leaf nodes. An internal node encodes a
pair of (AttributeName, AttributeValue) and has two outgoing edges
corresponding to a predicate whether or not an item with an at-
tribute name has the corresponding attribute value. A leaf node
encodes (r , pr) where r ∈ {True|False} is the final decision result
and pr ∈ [0, 1] is the probability of the result.
A decision tree can encode access control policies by treating
subjects (e.g., IP), objects (e.g., file), and actions (e.g., GET or SET)
as access attributes, and access results (ALLOW or DENY) as result
values. Each internal node encodes (Access Attribute Name, Access
Attribute Value), each leaf node encodes the access result with
the probability, and each path from the root node to a leaf node
represents an access rule. An access attribute name refers to “IP”,
“file” and “GET”, etc., and the corresponding access attribute value
is a binary value deciding whether an access is allowed or denied
at the point. Figure 5 illustrates how an access rule is encoded
in a decision tree based on Apache web server’s access control
implementation.
The IF-THEN structure of DT can also effectively encode rules
with regular expressions. For example, a rule that allows access to