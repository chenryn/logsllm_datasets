randomness has been sampled upfront at the beginning of the protocol. This idea stems from
the CCSA model [11], from which we re-use exactly the same term semantics. This is one of
the reason why our results, while applicable in a broader context, ﬁt naturally in the CCSA
model. Let us recall the syntax and semantics of terms drawn from the CCSA model.
Syntax We use terms built over explicit names to denote messages computed by the protocol.
The terms are deﬁned with the following syntax:
t
::= n
|
n(cid:126)i
|
x
|
f (t1, . . . , tn) operation of arity n
names
indexed names
variable
A key addition to the CCSA model is that some names can be indexed by sequences of
index variables. This is necessary so that we may later on consider the replication of protocols.
When a replicated protocol depends on a name ni, the ﬁrst copy (session) of the protocol uses
n1, the second n2, . . . . Names without index models randomness shared by all sessions of
the protocol. Variables are used to model the attacker inputs, and function symbols allows to
model the cryptographic computations.
Semantics Terms are interpreted as bitstrings. As in the computational model, the inter-
pretation depends on some security parameter η. As we assume that all the randomness is
sampled at the beginning, the interpretation depends on an inﬁnitely long random tape ρs.
We then leverage the notion of a cryptographic library1, that provides an interpretation for
1This corresponds in the CCSA model to the notion of functional model.
7
all names and function symbols. A cryptographic library Mf provides for each name n a
Probabilistic Polynomial Time Turing Machine (PPTM for short) An, that is given access to
the random tape ρs. As an additional input, all machines will always be given the security
parameter in unary. Each An extracts a bit-string of length η from the random tape. Diﬀerent
names extract non-overlapping parts of the random tape. In the interpretation, we give to all
the PPTM the same random tape ρs, so each name is always interpreted with the same value
in any term (and thus any protocol), and all names are interpreted independently.
Mf also provides for each function symbol f (encryption, signature,...) a PPTM Af , that
must be deterministic. To model randomized cryptographic primitives, additional randomness
must be given to the function symbol as extra names (cf. Example 2.1).
Given Mf, the semantic mapping [[·]]η,σ
evaluates its argument, a formal term, given an
assignment σ of its variables to bit-strings and a random tape ρs. For instance, if n is a
ρs = An(1η, ρs) (extracts a bit-string of length η from the random tape ρs) and
name, [[n]]η
[[sign(x, k)]]η,{x(cid:55)→m}
= Asign(m,Ak(1η, ρs)). The details about the syntax and semantic of
messages can be found in Appendix A.
ρs
ρs
2.2 Syntax of the protocols
The summary of the protocol syntax is given in Figure 1. An elementary protocol models a
thread running on a speciﬁc computer. let denotes variable binding inside a thread, in(c, x)
(resp. (out(c, m)) denotes an input (resp. an output) of the thread over the channel c, where
all channels are taken out of a set C. For simplicity, channel identiﬁers are constants or indexed
constants. In particular, they are known to the attacker. The if then else constructs denotes
conditionals, 0 is a successfully terminated thread and ⊥ is an aborted thread.
For protocols, our goal is to state and prove general composition results: we ﬁrst consider
sequential composition (the ; operator), where 0; P reduces to P , while ⊥; P reduces to ⊥.
In most cases, we will omit 0. We also consider parallel composition (the (cid:107) operator), a
ﬁxed number N of copies running concurrently (cid:107)i≤N, as well as an arbitrary number of copies
running concurrently (cid:107)i. For instance, we can express a (two-parties) key-exchange consisting
of an initiator I and a responder R with I(cid:107)R, the key exchange followed by a protocol using
the exchanged key (I; P I )(cid:107)(R; P R), as well as any number of copies of the resulting protocol
running in parallel: (cid:107)i((I; P I )(cid:107)(R; P R)). We can also consider an arbitrary iteration of a
protocol, “;i”, which could be used for expressing, for instance, key renewal.
We provide in Appendix B a full deﬁnition of the protocol algebra. For generality, the full
algebra is also parameterized by some atomic protocols, that can be used to easily extend the
syntax.
We allow terms inside a protocol to depend on some free variables and, in this case, we
denote P (x1, . . . , xn) a protocol, which depends on free variables x1, . . . , xn. P (t1, . . . , tn)
denotes the protocol obtained when instantiating each xi by the term ti.
We denote N (P ) (resp C(P )) the set of names (resp. channel names) of P .
Example 2.1. Given a randomized encryption function enc, we let P (c, x1, x2) be the protocol
in(c, x).out(c, enc(x, x1, x2)). Given names sk, r representing respectively a secret key and
a random seed, EN := (cid:107)i≤N P (ci, ri, sk) is then the protocol allowing the attacker to obtain
cyphertexts for an unknown secret key sk. Unfolding the deﬁnitions, we get:
EN := P (c1, r1, sk)(cid:107) . . .(cid:107)P (cn, rn, sk)
The generalization giving access to encryption for ﬁve secret keys is expressed with (cid:107)i(cid:107)j≤5P (cj,i, rj,i, skj).
8
elementary protocols:
Pel
::= let x = t in Pel
|
in(c, x).Pel
|
out(c, m).Pel
|
if s = t then Pel else Pel
|
0
| ⊥
protocols:
P, P (cid:48)
::= Pel
|
|
|
|
Pel; P
P(cid:107)P (cid:48)
(cid:107)i≤N P
(cid:107)iP
variable binding
input
output
conditional
success
failure
sequential composition
parallel composition
bounded replication
unbounded replication
Figure 1: The protocol algebra
φ, (P, σ) −→A φ(cid:48), (P (cid:48), σ(cid:48))
φ, (P ; Q, σ) −→A φ(cid:48), (P (cid:48); Q, σ(cid:48)) φ, (0; Q, σ) −→A φ, (Q, σ)
φ, (P, σ) −→A φ(cid:48), (P (cid:48), σ(cid:48))
φ, (P, σ)(cid:107)E −→A φ(cid:48), (P (cid:48), σ(cid:48))(cid:107)E
Figure 2: Operational Semantics (excerpt)
2.3 Semantics of the protocols
We give here some essential features of the formal execution model, which we need to formalize
our composition results.
A (global) state of a protocol consists in a frame, which is a sequence of bit-strings mod-
elling the current attacker knowledge, and a ﬁnite multiset of pairs (P, σ), where P is a protocol
and σ is a local binding of variables. Intuitively, each of the components of the multiset is the
current state of a running thread. We write such global states φ, (P1, σ1)(cid:107)···(cid:107)(Pn, σn).
The transition relation between global states is parameterized by an attacker A who inter-
acts with the protocol, modelled as a PPTM with its dedicated random tape ρr. The attacker
chooses which of the threads is going to move and computes, given φ, the input to that thread.
In the following, the conﬁguration of the protocol and the security parameter are (also) always
given to the attacker, which we do not make explicit for simplicity.
We give some of the rules describing the Structural Operational Semantics in Figure 2. The
full semantics can be found in Appendix B. The transition relation −→A
between conﬁgurations
depends on the attacker A, the security parameter η and the random samplings ρs (to interpret
terms) and ρr (the randomness of the attacker). In P ; Q, P has to be executed ﬁrst. When it
is completed (state 0), then the process can move to Q, inheriting the variable bindings from
P . If P is not waiting for an input from the environment, it can move independently from
any of the other parallel processes.
9
The semantics of inputs (not detailed for simplicity) reﬂects the interactions with the
attacker. A computes the input to the protocol, given a frame φ and its own random tape
ρr. Therefore transitions depend not only on the attacker machines, but also2 on the name
samplings ρs (secret coins) and ρr (attacker’s coins).
Example 2.2. Continuing Example 2.1, the initial conﬁguration corresponding to E2 is
∅, (P (c1, r1, sk),∅)(cid:107)(P (c2, r2, sk),∅), where the attacker knowledge is empty and no local vari-
ables are bound. We consider one of the possible reductions, for some attacker A that ﬁrst
sends a message over channel c1 and then c2:
∅, (P (c1, r1, sk),∅)(cid:107)(P (c2, r2, sk),∅)
−→A ∅, (out(c1, enc(x, r1, sk),{x (cid:55)→ m})(cid:107)(P (c2r2, sk),∅)
m = A(∅, ρr) is the first input
message computed by the attacker
−→A φ, (P (c2, r2, sk),∅)
φ = [[enc(x, r1, sk)]]η,{x(cid:55)→m}
is the
interpretation of the output
received by the attacker
ρs
−→A φ, (out(c2, enc(x, r1, sk),{x (cid:55)→ m2})
m2 = A(φ, ρr) is the second input
message computed by the attacker
−→A (φ, [[enc(x, r2, sk)]]η,{x(cid:55)→m2}
ρs
), 0
We assume action determinism of the protocols [27]: given an input message on a given
channel, if the current state is
φ, (P1, σ1)(cid:107)···(cid:107)(Pn, σn),
at most one of the Pi may move to a non-abort state. This means that each thread checks
ﬁrst that it is the intended recipient of the message. This also means that each output has to
be triggered by an input signal: none of the Pi starts with an output action. We remark that
in practice, protocols are action determinate.
For replicated protocols (cid:107)i≤N P or (cid:107)iP , the names in P that are indexed by the variable i
are renamed as follows: (cid:107)i≤N P is the protocol P{i (cid:55)→ 1}(cid:107) . . .(cid:107)P{i (cid:55)→ N} and
φ, ((cid:107)iP, σ)(cid:107)E −→A φ, ((cid:107)i≤A(ρr,φ)P, σ)(cid:107)E.
In other words, the attacker chooses how many copies of P will be considered, which may
depend, in particular, on the security parameter. A(ρr, φ) must be a natural number in
unary.
2.4 Stateless Oracle Machines
For reasons that have been explained in the introduction, we wish to extend the semantics of
protocols and their indistinguishability to attackers that have access to an additional stateless
oracle. At this stage, we need stateless oracles in order to be compositional. Let us explain
2They actually also depend on the oracle’s coins, when A is interacting with an external oracle, which we
explain later.
10
this. Assume we wish to prove a property of R in the context P(cid:107)Q(cid:107)R. The idea would be to
prove R, interacting with an attacker that simulates P(cid:107)Q. This attacker is itself a composition
of an attacker that simulates P and an attacker that simulates Q. The protocols P , Q, R
share primitives and secrets, hence the simulation of P, Q requires access to an oracle that
holds the secrets. If such an oracle were to be stateful, we could not always build a simulator
for P(cid:107)Q from simulators of P, Q respectively, since oracle replies while simulating Q could
depend on oracle queries made while simulating P , for instance.
The oracles depend on a security parameter η (that will not always be explicit), (secret)
random values and also draw additional coins: as a typical example, a (symmetric key) en-
cryption oracle will depend on the key k and use a random number r to compute enc(m, r, k)
from its query m. Therefore, the oracles can be seen as deterministic functions that take two
random tapes as inputs: ρs for the secret values and ρO for the oracle coins.
Formally, oracles take as input tuples (m, r, s) where m is a ﬁnite sequence of bitstrings, r
is a handle for a random value and s is a handle for a secret value. r and s are respectively used
to extract the appropriate parts of ρO, ρs respectively, in a deterministic way: the randomness
extracted from ρO is uniquely determined by m, r, s and the extractions for diﬀerent values
do not overlap.
In what follows, we only consider oracles that are consistent with a given cryptographic
library Mf . Such oracles only access ρs through some speciﬁc names. This set of names is
called the support of the oracle.
Example 2.3. An encryption oracle for the key k (corresponding to the handle “1”), succes-
sively queried with (m, 1, 1), (m(cid:48), 2, 1), (m, 3, 1), (m, 1, 1), (m(cid:48), 2, 2), . . . will produce respec-
tively the outputs enc(m, r1, k), enc(m(cid:48), r2, k), enc(m, r3, k), enc(m, r1, k), ⊥,. . . Here r1, r2, r3
are non-overlapping parts of ρO (each of length η). The support of this oracle is {k}.
The formal deﬁnition of stateless oracles is a bit involved, notably to formally specify
the randomness extraction. This construction is required to ensure the determinism of the
oracles. Determinism is required to build a single simulator for two parallel protocols from
the individual simulators for the two protocols.
For instance, for an oracle performing randomized encryption, rather than always en-
crypting with a fresh nonce, this system allows multiple attackers to obtain an encryption of
a message with the same random.
Deﬁnition 1 ((Stateless) Oracle). An oracle O is a triple of functions that have the following
inputs
• a sequence of bitstrings w ∈ ({0, 1}∗)n and two bitstrings r, s: the query, consisting of
an input query w, an input tag r, an input key s;
• a random tape ρs for the (secret) random values;
• the security parameter η;
• a random tape ρO for the oracle’s coins.
The ﬁrst function assigns to each w, s, r an integer n(w, s, r) ∈ N and is assumed injective.
n(w, s, r) is used to extract a substring e1(n(w, s, r), η, ρO) from ρO, which is uniquely deter-
mined by the input. We assume that the length of the substring extracted by e1 only depends
on η, and substrings extracted with e1 are disjoint for diﬀerent values of n.
11
The second function e2 assigns to each s a sequence p(s) of natural numbers, that are used
to extract secret values from ρs: e2(s, η, ρs) is a sequence of bitstrings. It is also assumed to
be injective.
The third function takes η, w, r, s, e1(n(w, s, r), η, ρO), e2(s, η, ρs) as input and returns a
result (a bitstring) or a failure message.
Example 2.4. Expanding upon Example 2.3, the encryption oracle is given by the triple of
functions (e1, e2, e3) such that:
• e1(n(w, s, r), η, ρO) extracts the substring r at position range [n(w, s, r)× η, (n(w, s, r) +
1) × η] from ρO.
(cid:40)
• e2(s, η, ρs) =
if s = 1
[[k]]η
ρs
0 else
• e3(η, w, r, s, e1(n(w, s, r), η, ρO), e2(s, η, ρs)) = [[enc(y, r, x)]]η{y(cid:55)→w,r(cid:55)→r,x(cid:55)→e2(s,η,ρs)
Given η, and a sequence of bitstrings m, we call r1 the sequence of bitstrings at position range
[n(m, 1, 1)×η, (n(m, 1, 1)+1)×η] from ρO. Then, on input (m, 1, 1), e1(n(m, 1, 1), η, ρO) = r1,
e2(1, η, ρs) = [[k]]η
ρs
and the oracle returns e3(η, m, 1, 1, r1, [[k]]η
.
ρs) = [[enc(y, r, k)]]η
y(cid:55)→m,r(cid:55)→r1
An oracle machine (PPTOM) is a PPTM, equipped with an additional tape, on which the
queries to the oracle are written and from which the oracle replies are read. We often write
explicitly the machine inputs, as in AO(ρs,ρO)(ω, ρr), where ω is the input data of A, ρr is
its random tape and ρs, ρO are the random tapes accessible to the oracle. These deﬁnitions
extend to multiple oracles (cid:104)O1, . . . ,On(cid:105), preﬁxing the query with an index in {1, . . . , n}.
Deﬁnition 2. A Probabilistic Polynomial Time Oracle Machine (PPTOM) is a Turing ma-
chine denoted by AO and equipped with:
• an input/working/output tape (as usual; it is read/write);
• a read-only random tape ρr (attacker’s coins);
• an oracle input tape ρO;
• an oracle output tape, which is read-only.
• an oracle read-only random tape ρs (not accessible by the Turing Machine);
Note that once the oracle’s random tape is ﬁxed, we ensure that all our oracles are deter-
ministic.
2.5 Computational indistinguishability
To deﬁne the classical notion of indistinguishability, we describe how protocols may be seen
as oracles, that an attacker can interact with. Given a protocol P and a cryptographic library
Mf , the oracle OP is an extension of the previous oracles:
it takes as an additional input
an history tape that records the previous queries. Given a query m with history h (now the
components r, s are useless), the oracle replies what would be the output of P , given the
12
successive inputs h, m. It also appends the query m to the history tape. The formal deﬁnition
of protocol oracles can be found in Appendix B.3.
The machines that interact with OP are also equipped with the history tape that is read-
only: the history can only be modiﬁed by the oracle. Since P may use secret data, the oracle
may access a secret tape ρs; this will be explicit.
An oracle may implement multiple parallel protocols: the oracle O(cid:104)P1,...,Pn(cid:105) ﬁrst checks
which Pi is queried (there is at most one such i, by action determinism) and then replies as
OPi
.
Finally, we may consider oracles that combine protocols oracles and stateless oracles.
A(cid:104)O1,...,Om(cid:105),(cid:104)OP1 ,...,OPn(cid:105) is also written AO1,...,Om,OP1 ,...,OPn .
Deﬁnition 3. Given a cryptographic library Mf , an oracle O and protocols P1, . . . , Pn, Q1, . . . , Qn,
we write AO,OP1?Q1 ,...,OPn?Qn ≺  if for every polynomial time oracle Turing machine AO,
|Pρs,ρr,ρO{AO(ρs,ρO),OP1 (ρs),...,OPn (ρs)(ρr, 1η) = 1}
−Pρs,ρr,ρO{AO(ρs,ρO),OQ1 (ρs),...,OQn (ρs)(ρr, 1η) = 1}|
is negligible in η. We will write P ∼=O Q for AO,OP ?Q ≺ .
Example 2.5. For i ∈ {1, 2}, the protocol Pi is deﬁned with the single transition:
q,{x1, ..., xn} xn+1=(m1,m2)
−−−−−−−−−→ (q, enc(mi, sk),{x1, ..., xn, xn+1})
The protocol expects to receive a couple as input, and will output either the left message or
∼=O P2 then captures the fact that an attacker
the right message using some secret key. P1
with oracle O has a negligible probability to win the IND-CPA game.
By construction, indistinguishability is compatible with our constructions for protocols in
parallel and multiple protocol oracles. Indeed the oracle protocol for P(cid:107)Q behaves exactly the
same as the two oracle OP and OQ in parallel.
Lemma 4. For protocols P, Q, A, B, an oracle O, and a list Ol of protocol oracles,
AO,O(A(cid:107)P )?(B(cid:107)Q) ≺  ⇔ AO,Ol,OA?B,OP ?Q ≺ 
3 Simulatability
We deﬁne a notion of “perfect” simulation, where a protocol depends on some secrets that the
attacker can only access through an oracle, and an attacker must be able to produce exactly
the same message as the protocol. This means that an attacker, given access O but not to a
set of secrets n, can completely simulate the protocol P (using O to have a partial access to
the secrets), i.e., produce exactly the same distribution of message.
Formally, given a set of names n, an oracle O and a protocol P . We say that νn.P is
O-simulatable, if there exists a PTOM AO such that for any attacker BO, the sequences of
messages produced by BO,OP has exactly the same probability distribution as the on produced
by BO interacting with AO instead of OP .
Assume that Q ∼=O R and νn.P is O-simulatable, where n contains the secrets shared by