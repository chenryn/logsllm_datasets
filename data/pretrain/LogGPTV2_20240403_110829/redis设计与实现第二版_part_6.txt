2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示 rehash
1）为ht［1］分配空间，让字典同时持有ht［0］和ht［1］ 两个哈希表。
以下是哈希表渐进式rehash的详细步骤：
rehashidx
privdata
ht
type
dict
-1
ht[1]
ht[0],
，每次对字典执行添加、删除、查找或者更新操作时，程序除
sizemask
 sizemask
table
dictht
dictht
size
used
size
table
图4-12准备开始rehash
used
8
m
dictEntry*[8]
dictEntry*[4]
→NULL
→NULL
dictEntry
dictEntry
k1
k3
ko
dictEntry
k2
dictEntry
v1
v3
v2
第 4章 字 
→NULL
NULL
→NULL
→NULL
典·33
---
## Page 38
第一部分
rehashidx
privdata
rehashidx
 privdata
type
dict
type
ht
ht 
dict
数据结构与对象
\ht[1]
ht [0],
ht[1]
图4-14
sizemask
 sizemask
图 4-13
sizemask
 sizemask
dictht
table
table
dictht
table
dictht
used
size
size
table
dictht
size
used
3
size
used
used
8
3
3
4
4
rehash 索引1上的键值对
rehash 索引 O上的键值对
dictEntry*[8]
dictEntry*[4]
dictEntry*[8]
dictEntry*[4]
U
2
0
2
dictEntry
dictEntry
dictEntry
dictEntry
k0
dictEntry
dictEntry
k1
2
dictEntry
k0
dictEntry
2
2
3
NULL
NULL
NULL
v0
V2
v1
v3
v2
V3
0
→NULL
→NULL
→ NULL
→NULL
→NULL
→NULL
→NULL
→NULI
---
## Page 39
rehashidx
 privdata
rehashidx
privdata
t ype
ht
dict
t ype
3
ht
dict
\ht[1]
ht [0]
ht[1]
ht[0],
图4-16rehash 索引3上的键值对
 sizemask
 sizemask
图4-15
sizemask
dictht
dictht
sizemask
size
table
size
table
used
table
dictht
table
dictht
pasn
used
size
used
size
L
8
4
1
4
3
rehash 索引 2 上的键值对
dictEntry*[8]
dictEntry*[4]
dictEntry*[8]
dictEntry*[4]
k1
dictEntry
dictEntry
dictEntry
dictEntry
+
dictEntry
k2
k0
k2
dictEntry
k3
dictEntry
k1
dictEntry
k0
NULL
NULL
NULI
NULL
NULL
NULI
NULI
V1
v2
v3
v0
v3
V1
第 4 章 
→NULL
-→NULL
→NULL
→ NULL
→NULL
→NULL
→NULL
→NULL
学
·35
---
## Page 40
36.·第一部分数据结构与对象
4.6
增，并随着rehash 操作的执行而最终变成空表。
而 ht［0］则不再进行任何添加操作，这一措施保证了ht［0］包含的键值对数量会只减不
行查找，如果没找到的话，就会继续到 ht［1］里面进行查找，诸如此类。
会在两个哈希表上进行。例如，要在字典里面查找一个键的话，程序会先在ht［O］里面进
所以在渐进式 rehash 进行期间，字典的删除（delete）、查找（find）、更新（update）等操作
渐进式rehash执行期间的哈希表操作
dictGetRandomKey
dictFetchValue
dictReplace
dictAdd
dictcreate
另外，在渐进式 rehash 执行期间，新添加到字典的键值对一律会被保存到ht［1］里面，
因为在进行渐进式rehash 的过程中，字典会同时使用 ht[0］和ht[1］ 两个哈希表
表 4-1 列出了字典的主要操作 API。
rehashidx
函数
字典 API
privdata
type
dict
-1
ht
K101zu
存在于字典，那么用新值取代原有的值
ht[1]]
从字典中随机返回一个键值对
返回给定键的值
将给定的键值对添加到字典里面，如果键已经
将给定的键值对添加到字典里面
创建一个新的字典
sizemask
table
dictht
table
dictht
used
size
used
size
表 4-1字典的主要操作 API
。
图 4-17
作
rehash 执行完毕
用
NULL
dictEntry*[8]
5
一
0(1)
0(1)
0(1)
0(1)
0(1)
dictEntry
dictEntry
dictEntry
k1
k0
k3
dictEntry
k2
时间复杂度
v1
v2
v3
-→NULL
→NULL
→NULL
→NULL
---
## Page 41
4.7
dictRelease
dictDelete
口在对哈希表进行扩展或者收缩操作时，程序需要将现有哈希表包含的所有键值对
口
口
口 Redis 中的字典使用哈希表作为底层实现，每个字典带有两个哈希表，一个平时使
口字典被广泛用于实现 Redis 的各种功能，
rehash 到新哈希表里面，并且这个 rehash 过程并不是一次性地完成的，而是渐进式
一个单向链表。
哈希表使用链地址法来解决键冲突，被分配到同一个索引上的多个键值对会连接成
算法来计算键的哈希值。
重点回顾
当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2
用，另一个仅在进行rehash时使用。