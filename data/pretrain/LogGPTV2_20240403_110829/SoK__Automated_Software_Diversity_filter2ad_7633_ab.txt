### Control Flow and Function Call Obfuscation

Control transfers via branches and fall-through paths can be obfuscated, as can direct calls to functions, by replacing them with call functions that complicate the call graph. The first transformation involves permuting the code layout, which helps to break fine-grained code reuse attacks. All basic block transformations also complicate the code matching step in patch reverse engineering.

### Loop-Level Transformations

Loop-level transformations, as suggested by Forrest et al. [24], have not yet been evaluated.

### Function-Level Transformations

Transformations at the function level include:

1. **Stack Layout Randomization**:
   - **Buffer Overflows**: A classic attack vector on x86 processors is to overwrite the return address stored on the machine stack. To counter this, several randomizing transformations target the stack:
     - Stack frame padding
     - Stack variable reordering
     - Stack growth reversal
     - Non-contiguous stack allocation
   - The last transformation allocates a callee stack frame at a randomly chosen location, rather than adjacent to the calling function's stack frame.

2. **Function Parameter Randomization**:
   - This transformation permutes the existing formal parameters and may add new ones, ensuring all call-sites are rewritten to match the modified formal parameters. It is employed against tampering, code matching, and return-into-libc attacks.

3. **Inlining, Outlining, and Splitting**:
   - **Inlining**: A well-known compiler optimization that replaces a function call with the actual function code.
   - **Outlining**: The inverse of inlining, where one or more basic blocks are extracted and encapsulated in their own subroutine.
   - **Splitting**: A function is split into two, with all live variables at the point of the split passed as parameters to the second function. These transformations randomize the number of function calls and the amount of code duplication among program variants, complicating code matching.

4. **Control Flow Flattening**:
   - The control-flow graph of a function can be obscured by replacing direct jumps between basic blocks with indirect jumps through "jump tables." Each original basic block shares the same successor and predecessor blocks, further complicating code matching.

### Program-Level Transformations

Transformations at the program level include:

1. **Function Reordering**:
   - Functions can be laid out in any order within executables and libraries. For dynamically linked functions, the tables maintained by the dynamic linker (e.g., the GOT and PLT on Linux systems) can also be randomized.

2. **Base Address Randomization (ASLR)**:
   - Traditionally, the base of the code and data segments (stack, heap, and statically allocated data) were loaded at fixed virtual memory addresses. ASLR randomizes these starting addresses, complicating memory corruption, code injection, and code reuse attacks. However, it can be bypassed via information leaks [60], [9].

3. **Program Encoding Randomization**:
   - One encoding of a program can be substituted for another, as long as there is a way to reverse the process. This can be achieved using a virtual machine that interprets the randomized instructions or emulates a machine for the randomized encoding by translating fragments back to native code before execution. Various encodings can be used, such as exclusive-or operations with a randomly chosen key, known as Instruction Set Randomization [37], [5]. More complex encodings may compress the instruction stream or offer stronger encryption guarantees. Some encodings randomize the code layout [29] or code addresses [59], defending against both code injection and fine-grained code reuse attacks.

4. **Data Randomization**:
   - **Static Data Randomization**: Permute the layout of static variables and add padding via dummy variables.
   - **Constant Blinding**: Blind a constant \( c \) by applying an injective function \( f(c, x) = c' \), where \( x \) is a randomly chosen value. During execution, \( c \) is obtained by computing \( f^{-1}(c', x) \). Exclusive-or is a common choice for \( f \) and \( f^{-1} \).
   - **Structure Layout Randomization**: Randomize the layout of composite data structures like classes and structs.
   - **Heap Layout Randomization**: Randomize the layout of dynamically allocated objects by adding random padding. The memory allocator can also split the heap into multiple regions and store each object in a randomly chosen region.

5. **Library Entry Point Randomization**:
   - Library functions are identified by a standardized set of entry points. Each entry point can be duplicated, and the original entry points can be changed to perform arbitrary functionality. For example, `system` in `libc` could be cloned into `system_42`, and `system` could be changed to terminate the program. This breaks return-into-libc attacks. Legitimate programs must be updated to use the private set of entry points.

### System-Level Transformations

Some transformations are tailored towards system software, such as the operating system. For instance, **System Call Mapping Randomization** is a variant of function parameter diversification that targets the system call interface between processes and the operating system kernel. Without knowledge of the proper system call numbers, the effect of any attack is confined to the compromised process. Applications need to be customized before or after installation to use the correct system call mapping.

### Overview of Transformations

Table I provides an overview of the transformations used in the literature. An asterisk next to a checkmark indicates that the authors presented the transformation without an evaluation. The second column indicates the stage of the software life-cycle where diversification takes place (implementation, compilation, linking, installation, loading, execution, and updating). Pre-distribution approaches have been evaluated with a wider range of transformations, such as call graph and function parameter randomization, which have not been evaluated with post-distribution methods. This is likely because these transformations require inter-procedural analysis, which is supported by compilers but difficult to support in binary rewriters. Most authors combine at least two randomizing transformations or choose to randomize the program encoding itself.

### When to Diversify

The life-cycle of most software follows a similar trajectory: implementation, compilation, linking, installation, loading, executing, and updating. Variations arise because some types of software, typically scripts, are distributed in source form. Figure 1 shows how the surveyed approaches fit into the software life-cycle. Some approaches span multiple life-cycle events and are placed according to the earliest stage. We cover individual diversification techniques from the implementation phase to the update phase.

A diversification engine does not necessarily randomize the input program it processes. Several approaches defer diversification by making programs self-randomizing [6], [8], [29], [64], [27]. Deferred diversification is typically achieved by instrumenting programs to mutate one or more implementation aspects as the program is loaded by the operating system or as it runs. Instead of installing several programs instrumented to randomize themselves, the diversification functionality can be included in the operating system [48], [12].