can replace direct control transfers via branches and fall-through
paths. Similarly, direct calls to functions can be replaced by
call functions that obfuscate the call graph.
The ﬁrst transformation permutes the code layout and breaks
ﬁne-grained code reuse attacks. All basic block transformations
also complicate the code matching step in patch reverse
engineering.
7) Loop Level: Loop-level transformations are suggested
by Forrest et al. [24] but not evaluated.
8) Function Level: Transformations at
include:
this granularity
a) Stack Layout Randomization: Using a buffer overﬂow
to overwrite the return address stored on the machine stack
on x86 processors is a classic attack vector. As a result, many
randomizing transformations target the stack, including:
•
•
•
•
stack frame padding,
stack variable reordering,
stack growth reversal, and
non-contiguous stack allocation.
The last transformation allocates a callee stack frame at a
randomly chosen location rather than a location adjacent to the
stack frame of the calling function.
b) Function Parameter Randomization: This transfor-
mation permutes the existing formal parameters and may add
new ones as long as all call-sites can be rewritten to match the
actual parameters with the modiﬁed formal parameters. This
transformation is employed against tampering, code matching
and return-into-libc attacks.
c) Inlining, Outlining, and Splitting: Inlining the target
of a function call into the call-site is a well known compiler
optimization. Function outlining is the inverse of inlining: it
extracts one or more basic blocks and encapsulates them in
their own subroutine. As a special case of function outlining,
a function may be split into two; all live variables at the
point of the split are passed as parameters to the second
function. Together, these transformations randomize the number
of function calls and the amount of code duplication among
program variants to prevent code matching.
279
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:27 UTC from IEEE Xplore.  Restrictions apply. 
d) Control Flow Flattening: The topology of a func-
tion’s control-ﬂow graph can be obscured by replacing direct
jumps connecting basic blocks with indirect jumps that go
through “jump tables.” Rather than jumping directly to its
successor, each original basic block shares the same successor
and predecessor blocks. Again, this complicates code matching.
9) Program Level: Transformations at this level include:
a) Function Reordering: Functions can be laid out in
any order within executables and libraries. For dynamically
linked functions, the tables maintained by the dynamic linker
(e.g., the GOT and PLT dynamic linking structures on Linux
systems) can be randomized, too.
b) Base Address Randomization, ASLR: It used to be
the case that the base of the code and data segments (i.e.
the stack, heap, and statically allocated data) were always
loaded at ﬁxed virtual memory addresses. Since the virtual
address space of each process is private, the starting address
can be chosen at random. Address Space Layout Randomization
(ASLR) implements base address randomization and is currently
the only deployed probabilistic defense. ASLR complicates
memory corruption, code injection, and code reuse attacks, but
can be bypassed via information leaks [60], [9].
c) Program Encoding Randomization: It is possible to
substitute one encoding of a program for another as long as
there is a way to reverse the process. The encoding is reversed
by a virtual machine that either interprets the randomized
instructions, or emulates a machine for the randomized encoding
by translating fragments back to native code prior to execution.
Many types of encodings can be used for this purpose. For
instance, one of the simplest and fastest encodings computes
the exclusive-or of the original program bytes and a randomly
chosen key; applying the same transformation when the
instructions are about to execute recovers the original encoding.
This approach is known as Instruction Set Randomization [37],
[5]. More complex encodings may compress the instruction
stream or offer stronger encryption guarantees. Some encodings
are designed to randomize the code layout [29] or code
addresses [59]. These transformations can defend against both
code injection and ﬁne-grained code reuse attacks.
random padding to each object. The memory allocator
can also split the heap into multiple regions and pick
a region in which to store each object at random.
e) Library Entry Point Randomization: Library func-
tions are identiﬁed by a standardized set of entry points. Each
of these entry points can be duplicated and the original entry
points can be changed to perform arbitrary functionality, i.e.,
the system in libc could be cloned into system_42
and system could be changed to terminate the program.
This breaks return-into-libc attacks. To function correctly,
legitimate programs that use randomized libraries must be
updated to use the private set of entry points.
10)System Level: Some transformations are tailored towards
system software such as the operating system. System Call
Mapping Randomization, for instance, is a variant of function
parameter diversiﬁcation that targets the system call interface
between processes and the operating system kernel. Without
knowledge of the proper system call numbers, the effect of any
attack is conﬁned to the compromised process. Applications
need to be customized before or after they are installed on the
host system to use the correct system call mapping.
Table I gives an overview of the transformations used in
the literature. An asterisk next to a checkmark means that
the authors presented the transformation without an evaluation.
The second column indicates in which stage of the software
life-cycle diversiﬁcation takes place (the stages are: implemen-
tation, compilation, linking, installation, loading, execution, and
updating). Pre-distribution approaches (marked in Figure 1)
have been evaluated with a wider range of transformations—
call graph and function parameter randomization, for instance,
have not been evaluated with a post-distribution method. The
reason, we believe, is that these transformations require inter-
procedural analysis which is readily supported by compilers but
hard to support in binary rewriters. We see that most authors
combine at least two randomizing transformations or choose
to randomize the program encoding itself.
IV. WHEN TO DIVERSIFY
•
•
d) Data Randomization: These transformations aim to
stop memory corruption attacks with the exception of constant
blinding which defends against JIT-spraying. Several variations
are possible:
•
Static Data Randomization. The layout of static vari-
ables can be permuted and padding can be added via
dummy variables.
Constant Blinding. A constant c is blinded by applying
an injective function f (c, x) = c(cid:2) where x is a
randomly chosen value. During execution, c is obtained
by computing f−1(c(cid:2), x). The exclusive-or operation
is a common choice for f and f−1.
Structure Layout Randomization. Composite data struc-
tures such as classes and structs can have their
layout randomized similarly to static data randomiza-
tion.
• Heap Layout Randomization. The layout of dynami-
cally allocated objects can be randomized by adding
linking,
installation,
The life-cycle of most software follows a similar trajectory:
implementation, compilation,
loading,
executing, and updating. Variations arise because some types
of software, typically scripts, are distributed in source form.
Figure 1 on page 7 shows how the approaches that we
survey ﬁt into the software life-cycle. Some approaches are
staged and therefore span multiple life-cycle events; we place
these according to the earliest stage. We cover individual
diversiﬁcation techniques according to the software life-cycle
from the implementation phase to the update phase.
A diversiﬁcation engine need not randomize the input
program it processes. Several approaches defer diversiﬁcation
by making programs self-randomizing [6], [8], [29], [64], [27].
Deferred diversiﬁcation is typically achieved by instrumenting
programs to mutate one or more implementation aspects as the
program is loaded by the operating system or as it runs.
Instead of installing several programs instrumented to
randomize themselves, the diversiﬁcation functionality can be
included in the operating system [48], [12]. This is exactly how
280
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:27 UTC from IEEE Xplore.  Restrictions apply. 
l
a
u
n
a
M
(cid:2)
(cid:2)
Study
When
A
Randell [52]
Avizienis & Chen [11] A
C
Cohen [13]
C
Forrest et al. [24]
C, L
PaX Team [48]
C, L
Chew & Song [12]
I
Bhatkar et al. [6]
I
Kc et al. [37]
L, E
Barrantes et al. [5]
C
Bhatkar et al. [8]
B
Kil et al. [38]
C
Bhatkar et al. [7]
I
Jakob et al. [36]
B
De Sutter et al. [22]
L, E
Williams et al. [67]
E
Novark et al. [46]
C
Jackson et al. [35]
E
Wei et al. [66]
I
Pappas et al. [47]
I, E
Hiser et al. [29]
C, E
Giuffrida et al. [27]
I, L
Wartell et al. [64]
C
Collberg et al. [15]
L, E
Shioji et al. [59]
C
Jackson et al. [34]
C
Homescu et al. [31]
U
Coppens et al. [18]
I
Gupta et al. [28]
L
Davi et al. [21]
E
Homescu et al. [30]
TABLE I: Overview of randomizing transformations.
.
t
s
b
u
S
.
t
s
n
I
.
v
i
u
q
E
.
q
e
S
.
t
s
n
I
.
v
i
u
q
E
g
n
i
r
e
d
r
o
e
R
.
t
s
n
I
.
d
n
a
R
.
c
o
l
l
A
.
g
e
R
.
s
n
I
e
d
o
C
e
g
a
b
r
a
G
Transformations
g
n
i
p
p
i
l
F
h
c
n
a
r
B
.
d
n
o
C
g
n
i
n
e
t
t
a
l
F
w
o
l
F
l
o
r
t
n
o
C
g
n
i
r
e
d
r
o
e
R
n
o
i
t
c
n
u
F
.
s
n
I
e
t
a
c
i
d
e
r
P
e
u
q
a
p
O
.
s
n
I
.
n
u
F
l
l
a
C
/
h
c
n
a
r
B
.
d
n
a
R
.
m
a
r
a
P
n