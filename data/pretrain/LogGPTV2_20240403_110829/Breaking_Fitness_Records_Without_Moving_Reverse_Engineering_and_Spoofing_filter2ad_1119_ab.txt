with a section start sequence of bytes: c0 cd db dc; and end with a section
terminator byte: c0. If the byte c0 is required to be used within a data section,
it is escaped in a manner similar to RFC 1055.2
Message Header. The megadump header is very similar to the microdump
header, but contains a few diﬀerences. Figure 5 shows how this header is structured.
2 A Non-standard for transmission of IP Data-grams over Serial Lines: SLIP.
Breaking Fitness Records Without Moving
55
Fig. 4. Megadump frame in plain-text format as transmitted to the Fitbit server (main
window) and the human-readable JSON status response by the Fitbit Web API (top
right).
Data Sections. Following the header are one or more data sections. Each data
section contains various statistics in a particular format, and may even be blank.
As previously mentioned, each data sections start with c0 cd db dc, and are
terminated by a single c0 character. Therefore, the data sections are of variable
length. From the packets we have analyzed, it has been observed that there are
typically four data sections, which all appear in the following order, and have
the following format:
(1) Daily Summary: The ﬁrst data section contains activity information across
a number of diﬀerent absolute timestamps. This section contains a series of
ﬁxed-length records that begin with a little-endian timestamp, and end with
a section terminator byte (c0).
56
H. Fereidooni et al.
Fig. 5. Megadump header structure
Fig. 6. Per-minute summary
(2) Per-minute Summary: The next data section is a per-minute summary, com-
prising a series of records that indicate user activity on a per-minute granu-
larity. The structure of this data section is shown in Fig. 6.
The section begins with a timestamp (unlike other timestamps, this ﬁeld is
big-endian), which acts as the base time for this sequence of step counts. Each
step count record is then an increment of a time period (typically two minutes),
from this base time. Following the timestamp is a byte indicating the start of
the step count records. The full meaning of this byte is unclear, but we believe
it indicates the time period between each step count record. Following this, a
series of records consisting of four bytes state the number of steps taken per-
time period. The second byte indicates the number of steps taken, and the fourth
byte is either ff to indicate another record follows, or c0 (for the last record) to
terminate the data section.
(3) Overall Summary: This data section contains a summary of the previous
records, although as will be demonstrated later it is not validated against
“per-minute” or “per-day” data. The format of this section is shown in Fig. 7.
This section starts with a timestamp, indicating the base time for this sum-
mary data. Following this timestamp is a 16-bit value that holds the number of
Breaking Fitness Records Without Moving
57
Fig. 7. Megadump summary ﬁelds
Fig. 8. Megadump footer ﬁelds
calories burned. Following on from this is a 32-bit value containing the number of
steps taken, and a 32-bit value containing the distance travelled in millimeters.
Finally, the summary ends with elevation, ﬂoors climbed and active minutes—all
16-bit values.
(4) Alarms: The ﬁnal data section contains information about what alarms are
currently set on the tracker, and is typically empty unless the user has
instructed the tracker to create an alarm.
Message Footer. The megadump footer contains a checksum and the size of
the payload, as shown in Fig. 8.
4 Protocol-Based Remote Spooﬁng
This section shows that the construction of a megadump packet containing fake
information and the subsequent transmission to the Fitbit server is a viable
approach for inserting fake step data into a user’s exercise proﬁle. This attack
does not actually require the possession of a physical tracker, but merely a known
tracker ID to be associated with the user’s Fitbit account. This means that one
can fabricate fake data for any known and actively used tracker having a ﬁrmware
version susceptible to this vulnerability. In order to construct a forged packet,
however, the format of the message must be decoded and analyzed to determine
the ﬁelds that must be populated.
4.1 Submission of Fake Data
The Fitbit server has an HTTPS endpoint that accepts raw messages from track-
ers, wrapped in an XML description. The raw message from the tracker is Base64
encoded, and contains various ﬁelds that describe the tracker’s activity over a
period of time.
58
H. Fereidooni et al.
Fig. 9. The result of replaying data from another Fitbit tracker to a diﬀerent tracker
ID. (a) shows the Fitbit user activity screen before the replay attack, and (b) shows
the results after the message is formed by changing the tracker ID, and submitted to
the server.
The raw messages of the studied trackers may or may not be encrypted,
but the remote server will accept either. Even though the encryption key for a
particular tracker is unknown, it is possible to construct an unencrypted frame
and submit it to the server for processing, associating it with an arbitrary tracker
ID. Provided that all of the ﬁelds in the payload are valid and the checksum is
correct, the remote server will accept the payload and update the activity log
accordingly. In order to form such a message, the raw Fitbit frame must be
Base64 encoded and placed within an XML wrapper as shown in Listing 1.1:
5
6 de4df71 −17f9 −43ea−9854−67 f 8 4 2 0 2 1 e 0 5
Listing 1.1. Fitbit frame within an XML wrapper
1 
2 
3 
4 
6 
7 1 . 0 . 0 . 2 2 9 2
8 sync
9 
10 
t r a c k e r −i d="F0609A12B0C0">
11 
14 
The fabricated frame can be stored in a ﬁle, e.g. payload, and then submit-
ted with the help of an HTTP POST request to the remote server as shown in
Listing 1.2, after which the server will respond with a conﬁrmation message.
∗∗∗ BASE64 PACKET DATA ∗∗∗
Breaking Fitness Records Without Moving
59
Listing 1.2. Submitting fake payload to the server
1 $ c u r l −i −X POST h t t p s : / / c l i e n t . f i t b i t . com/ t r a c k e r / c l i e n t / message
2 −H" Content−Type :
3 −−data−b i n a r y @payload
t e x t /xml"
Impersonation Attack: In order to test the susceptibility of the server to this
attack, a frame from a particular tracker was captured and re-submitted to the
server with a diﬀerent tracker ID. The diﬀerent tracker ID was associated with
a diﬀerent Fitbit user account. The remote server accepted the payload, and
updated the Fitbit user proﬁle in question with identical information as for the
genuine proﬁle, conﬁrming that simply altering the tracker ID in the submis-
sion message allowed arbitrary unencrypted payloads to be accepted. Figure 9
shows the Fitbit user activity logs before and after performing the impersonation
attack. The fact that we are able to inject a data report associated to any of
the studied trackers’ IDs reveals both a severe DoS risk and the potential for
a paid rogue service that would manipulate records on demand. Speciﬁcally, an
attacker could arbitrarily modify the activity records of random users, or manip-
ulate the data recorded by the device of a target victim, as tracker IDs are listed
on the packaging. Likewise, a selﬁsh user may pay for a service that exploits this
vulnerability to manipulate activity records on demand, and subsequently gain
rewards.
Fig. 10. a shows the Fitbit user activity screen before fake data were submitted, and b
shows the screen after the attack. In this example, 10000 steps and 10 km were injected
for the date of Sunday, January 15th, 2017 by fabricating a message containing the
data shown in Table 1.
Fabrication of Activity Data: Using the information gained during the pro-
tocol analysis phase (see Sect. 3), we constructed a message containing a frame
with fake activity data and submitted it to the server, as discussed above. To
do this, the payload of a genuine message was used as a skeleton, and each data
60
H. Fereidooni et al.
section within the payload was cleared by removing all data bytes between the
delimiters. Then, the summary section was populated with fake data. Using only
the summary section was enough to update the Fitbit user proﬁle with fabri-
cated step count and distance traveled information. The format of the summary
section is shown in Table 1, along with the fake data used to form the fabricated
message.
Table 1. Data inserted into the packet summary section
Value
30 56 7b 58 15/01/17
64 00
Range Usage
00-03 Timestamp
04-05 Calories
06-09 Number of Steps 10 27 00 00 10000
0A-0D Distance in mm 80 96 98 00 10000000
0E-0F Elevation
00 00 00 00 0
100
Fig. 10 again shows a before and after view of the Fitbit user activity screen,
when the fake message is submitted. In this example, the packet is constructed
so that 10000 steps and a distance traveled of 10 km were registered for the 15th
of January 2017. This attack indicates that it is possible to create an arbitrary
activity message and have the remote server accept it as a real update to the
user’s activity log.
Exploitation of Remote Server for Field Deduction: A particular problem
with the unencrypted packets was that it was not apparent how the value of the
CRC ﬁeld is calculated (unlike the CRC for encrypted packets). However, if a
message is sent to the server containing an invalid CRC, the server responds
with a message containing information on what the correct CRC should be (see
Listing 1.3).
Listing 1.3. Response from the Fitbit server when a payload with an invalid checksum
is submitted.
1 $ c u r l −i −X POST  −−data−b i n a r y @payload
2 
3 
INVALID_DEVICE_DATA:com. f i t b i t . p r o t o c o l . s e r i a l i z e r .
IO e r r o r −&gt ;
D a t a P r o c e s s i n g E x c e p t i o n : P a r s i n g f i e l d
type CHECKSUM.
Remote checksum [ 2 2 4 6 | 0 x8c6 ] and l o c a l
[ s i g n a t u r e ] o f
the o b j e c t o f
checksum [ 6 0 4 4 1 | 0 xec19 ] do not match .
7 
4
5
6
This information can be used to reconstruct the packet with a valid CRC.
Such an exploit must be used sparingly, however, as the remote server will refuse
to process further messages if an error threshold is met, until a lengthy timeout
(on the order of hours) expires.
Breaking Fitness Records Without Moving
61
Fig. 11. Fitbit tear-down and connecting Fitbit micro-controller to the debugger.
5 Hardware-Based Local Spooﬁng
We now demonstrate the feasibility of hardware-based spooﬁng attacks focusing
on Fitbit Flex and Fitbit One devices. We ﬁrst conducted an analysis of the
Fitbit protocol as previously described in Sect. 3. However, since the newest
ﬁrmware (Fitbit 7.81) uses end-to-end encryption with a device-speciﬁc key, the
data cannot be manipulated using MITM attacks, as described in the previous
section. Therefore, we resort to a physical attack on the tracker’s hardware. We
reverse engineered the hardware layout of the devices to gain memory access,
which enabled us to inject arbitrary stepcount values into memory, which the
tracker would send as valid encrypted frames to the server.
5.1 Device Tear-Down
In order to understand how to perform the hardware attack, we needed to tear
down the devices. In the following section, we give an overview of the tools
required for this process.
Tools: The tools to perform the hardware attack were relatively inexpensive and
easy to purchase. To accomplish the attack, we used (i) a digital multimeter,
(ii) a soldering iron, thin gauge wire, ﬂux (iii) tweezers, (iv) a soldering heat
gun, (v) the ST-LINK/v2 in circuit debugger/programmer, and (vi) the STM32
ST-LINK utility.
The digital multimeter was used to locate the testing pins associated with
the debug interface of the microcontroller. However, attackers performing the
attack would not require a multimeter, as long as the layout of the testing pins
is known. The soldering heat gun and tweezers were utilized to perform the
62
H. Fereidooni et al.
mechanical tear-down of the device casing. The soldering iron and accessories
were used to solder wires to the identiﬁed testing pins. We used the ST-LINK/v2
and STM32 ST-LINK utilities to connect to the device in order to obtain access
to the device’s memory.
Costs: The required tools for performing the hardware attack are relatively
cheap. The STLINK/v2 is a small debugger/programmer that connects to the
PC using a common mini-USB lead and costs around $15. The corresponding
STM32 ST-LINK utility is a full-featured software interface for programming
STM32 microcontrollers, using a mini-USB lead. This is free Windows software
and that can be downloaded from ST3. General-purpose tools (e.g. hair dryer)
can be employed to tear-down the casing. Therefore the total costs make the
attack accessible to anyone who can aﬀord a ﬁtness tracker. We argue that
hardware modiﬁcations could also be performed by a third party in exchange of
a small fee, when the end user lacks the skills and/or tools to exploit hardware
weaknesses in order to obtain ﬁnancial gains.
Tear-Down Findings: According to our tear-down of the Fitbit trackers (Fitbit
Flex and Fitbit One), as shown in Fig. 11, the main chip on the motherboard
is an ARM Cortex-M3 processor. This processor is an ultra-low-power 32-bit
MCU, with diﬀerent memory banks such as 256 KB ﬂash, 32 KB SRAM and
8 KB EEPROM. The chip used for Fitbit Flex is STM32L151UC WLCSP63
and for Fitbit One STM32L152VC UFBGA100. The package technology used in
both micro-controllers is ball grid array (BGA) which is a surface-mount package
with no leads and a grid array of solder balls underneath the integrated circuit.
Since the required speciﬁcations of the micro-controller used in Fitbit trackers
are freely available, we were able to perform hardware reverse-engineering (RE).
5.2 Hardware RE to Hunt Debug Ports
We discovered a number of testing points at the back of the device’s main board.
Our main goal was to identify the testing points connected to debug interfaces.
According to the IC’s datasheet, there are two debug interfaces available for
STM32L: (i) serial wire debug (SWD) and (ii) joint test action group (JTAG).
Fig. 12. Connecting the tracker to the debugger.
3 http://www.st.com/en/embedded-software/stsw-link004.html.
Breaking Fitness Records Without Moving
63
We found that the Fitbit trackers were using the SWD interface. However,
the SWD pins were obfuscated by placing them among several other testing
points without the silkscreen identifying them as testing points. SWD technology
provides a 2-pin debug port, a low pin count and high-performance alternative to
JTAG. The SWD replaces the JTAG port with a clock and single bidirectional
data pin, providing test functionality and real-time access to system memory.
We selected a straightforward approach to ﬁnd the debug ports (other tools that
can be exploited include Arduino+JTAGEnum and Jtagulator). We removed
the micro-controller from the device printed circuit boards (PCBs). Afterward,
using the IC’s datasheet and a multimeter with continuity tester functionality,
we traced the debug ports on the device board, identifying the testing points
connected to them.
5.3 Connecting Devices to the Debugger
After discovering the SWD debug pins and their location on the PCB, we sol-
dered wires to the debug pins. We connected the debug ports to ST-LINK v2
pin header, according to Fig. 12.
Dumping the Firmware: After connecting to the device micro-controller, we