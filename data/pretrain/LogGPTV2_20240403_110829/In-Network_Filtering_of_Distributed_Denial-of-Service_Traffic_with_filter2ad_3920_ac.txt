multidimensional knapsack problem [36]. The rule selection prob-
lem is 0-1 because an offer can either be selected or not and cannot
be broken down into smaller offers, and it is multidimensional be-
cause it has multiple constraints. Similarly to the classic knapsack
problem, the objective of the rule selection problem is to select
items (i.e., offers) so that the total value of the items is maximized
(i.e., the amount of DDoS traffic filtered), while the weight of the
selected items (i.e., the price of all selected offers and the total
amount of collateral damage incurred) are within the constraints.
Note that no fully polynomial-time approximation scheme exists
for 0-1 multidimensional knapsack problem, unless P = N P [30].
However, the rule selection problem is N P -hard and may not be
in N P [41] due to the overlapping nature of offers. Offers from the
same filtering network or different filtering networks can overlap in
ASIA CCS ’20, June 1ś5, 2020, Taipei, Taiwan
Devkishen Sisodia, Jun Li, and Lei Jiao
No offers chosen yet:
A3 L2
L1
A2
A1
After offer at AS 1 chosen:
A3 L2
L1
A2
A1
1
2
1
2
Offer at AS 1 drops
A1, L1, and A2
Efﬁcacy = A1 + A2
CD = L1
Offer at AS 3 drops
A1, L1, A2, A3, and L2
Efﬁcacy = A1 + A2 + A3
CD = L1 + L2
3
If offer at AS 1 is selected:
3
Offer at AS 3 now
drops A3, and L2 
Efﬁcacy = A3
CD = L2
Figure 4: An example illustrating how offers are value-
dependent items. The term łefficacyž represents the amount
of DDoS traffic filtered, and łCDž, or collateral damage, rep-
resents the amount of legitimate traffic filtered.
terms of the traffic flows that they filter. For example, let us assume
there are two filtering networks, y and z, that are on the path of
flow f . Let us also assume that both filtering networks y and z
provide two separate offers that both contain a rule which filters
f , neither of which have been selected yet by the defense agent.
With overlapping offers, the selection of one item has an impact
on which other items may be selected (e.g., selecting the offer from
y decreases the efficacy ś if f is an attack flow ś or the collateral
damage ś if f is a legitimate flow ś of the offer from z). Each time
an item is considered for selection, one would need to check for
overlap among the item under consideration and all of the items
selected so far, in order to calculate the knapsack’s new value (i.e.,
efficacy) and weights (i.e., price and collateral damage) if the item
under consideration is chosen. Due to the existence of overlapping
rules, or, in other words, value-dependent items, the complexity of
the problem increases significantly.
Fig. 4 illustrates an example of value-dependency in two offers.
Offers from AS 1 and 3 both filter attack flows A1 and A2, and
legitimate flows L1. If the offer from AS 1 is selected, then the offer
at AS 3 no longer filters A1, A2, and L1. Therefore, both its efficacy
(value) and collateral damage (weight) correspondingly decrease.
The value-dependent and correlated offers of the rule selection
problem make it similar to the N P -hard 0-1 multidimensional knap-
sack problem with value-dependent items, and is unlikely to be
solved in pseudo-polynomial time [33, 41]. Polynomial and pseudo-
polynomial time heuristics must restrict the problem to a single
linear constraint which makes them impractical to directly apply to
the rule selection problem [20]. However, there are algorithms for
the general 0-1 knapsack problem that can be used as a basis to cre-
ate a unique, near-optimal solution for the rule selection problem,
one such being the ACO algorithm.
5 SOLUTION
5.1 Analysis of Classical Algorithms
We analyze several classical algorithms for the knapsack problem
and transform them for the rule selection problem. Many classical
algorithms, such as the branch-and-bound and dynamic program-
ming algorithms, cannot be directly applied to the rule selection
problem, and therefore we must modify them to handle the unique
properties of our problem. We provide a high-level overview of the
algorithms, as follows.
5.1.1 Greedy and Naive Algorithms: The greedy and naive algo-
rithms simply order the set of offers by a heuristic (the greedy
algorithm orders the offers by their value or the amount of attack
traffic filtered and the naive orders them by their value-to-weight
ratio or the ratio of amount of attack traffic filtered to collateral
damage incurred). These algorithms run in linear time, and there-
fore have the shortest runtimes among all other algorithms we
analyzed. Unfortunately, the ordering step favors certain offers
which may cause the algorithms’ failure to consider offers, that if
selected, may have lead to a better solution. As a result, the greedy
and naive algorithms perform relatively poorly in most cases.
5.1.2 Branch-and-Bound-Based Algorithm: The optimal branch-
and-bound algorithm can be adapted to the rule selection problem
with only slight modifications. This algorithm essentially enumer-
ates all candidate solutions by building and branching out a binary
tree, while estimating the bounds on the optimal solution at each
iteration. In the case of the rule selection problem, each node in
the tree represents a combination of selected offers, and each node
contains a value (the amount of attack traffic filtered), two weights
(collateral damage and price), and an upper bound (the maximum
amount of value that can be achieved at the current node if it were
to be completely branched out). This algorithm always returns the
optimal solution. However, its time complexity is exponential in the
number of offers. Therefore, running the branch-and-bound-based
algorithm for optimal rule selection is not feasible in a real-world
scenario for DDoS defense.
5.1.3 Dynamic Programming-Based Algorithm: The classical dy-
namic programming algorithm can optimally solve the 0-1 knapsack
problem, however it cannot solve the rule selection problem because
of its multiple constraints and the overlapping nature of offers. In
order to apply the classical dynamic programming algorithm to the
rule selection problem, we must handle the potential for overlap-
ping offers by performing a pre-processing step. In this step, if there
exists two overlapping offers, the algorithm removes the overlap-
ping attack sources from the offer with the lower value-to-weight
ratio, solely for the purpose of this algorithm (it does not actually
modify the offer). This required pre-processing step prevents the
dynamic programming-based algorithm from guaranteeing an op-
timal solution. Similarly to the greedy and naive algorithms, the
pre-processing step potentially eliminates offers from considera-
tion, that if selected, would lead to an optimal solution. However, in
most cases, it achieves significantly better efficacy than the greedy
and naive algorithms and significantly faster runtimes than the
branch-and-bound algorithm, due to its pseudo-polynomial time
complexity in the number of offers.
Due to the limitations of the greedy, naive, branch-and-bound-
based, and dynamic programming-based algorithms, we look into
the classical ACO framework. What follows is a detailed explana-
tion of the classical ACO framework, why it cannot be directly
applied to the rule selection problem, and our new algorithm which
overcomes the classical ACO framework’s fundamental limitations
to be applicable to the rule selection problem. We further analyze
the time complexity of our algorithm, and discuss various trust and
security considerations related to our algorithm.
In-Network Filtering of Distributed Denial-of-Service Traffic with Near-Optimal Rule Selection
ASIA CCS ’20, June 1ś5, 2020, Taipei, Taiwan
5.2 Overview of the ACO Framework
To address the rule selection problem, we employ the ACO frame-
work. The ACO framework is inspired by the foraging behavior of
some ant species, which deposit pheromone trails on the ground
in order to mark favorable paths that should be followed by other
members of the colony [17]. The ACO framework leverages this
behavior for solving optimization problems, such as the N P -hard
traveling salesman problem (TSP).
The ACO algorithm is an iterative algorithm. During each itera-
tion, or cycle, a number of ants traverse a graph (e.g., a graph of
cities for TSP). Each ant builds a solution (i.e., a sequence of nodes
that create a path from the first to the last visited node) by walking
from node to node on the graph. An ant chooses the next node in
its walk according to a stochastic mechanism that is biased by the
amount of pheromone between the current node and all possible
next nodes. For example, if an ant is on node i and there is a node j
adjacent to i, then the probability of the ant choosing j as its next
destination is proportional to the amount of pheromone associated
with edge (i, j).
At the end of a cycle, a certain amount of pheromone at each
edge is evaporated, based on the quality of the solutions constructed
by the ants ś more pheromone is evaporated between the nodes
that make up low quality solutions (for TSP, a solution represents
a route and its quality is indirectly proportional to the length of
the route). This causes ants in future cycles to be more attracted
to solutions similar to the best ones previously constructed. At the
end of the last cycle, the overall best solution is chosen.
There are many existing papers that tackle the multidimensional
knapsack problem using ACO algorithms [9, 19, 24, 29]. However,
like the classic solutions, the solutions from these papers cannot be
directly applied to the rule selection problem. This is again due to
the correlated nature of offers and their potential for overlapping.
The ACO-based algorithm presented in this paper accounts for this
property. Aside from transforming the rule selection problem into a
graph-based problem, we make two main changes to the traditional
ACO framework: we modify how ants traverse the graph, and how
pheromone is dropped onto the graph. To the best of our knowledge,
this is the first time the classical ACO framework has been adapted
and applied to the domain of in-network DDoS defense.
5.3 ACO-Based Rule Selection Algorithm
5.3.1 Graph Construction for Rule Selection. In order to apply the
ACO framework to tackle the rule selection problem, there are sev-
eral distinctions that need to be made between the rule selection
problem and other classical problems, such as TSP. For the rule
selection problem, the ant colony will traverse a complete graph,
where each node will represent an offer. Unlike in TSP, for the rule
selection problem an edge in the graph has no concrete real-world
representation. However, the amount of pheromone dropped along
an edge will impact the probability of choosing the offers that share
that edge. Also, this algorithm needs to take into account the po-
tential of overlapping offers. That is, if two offers filter the same
portion of traffic, choosing one offer should affect the probability
of choosing the other offer. Lastly, the way ants lay pheromone
throughout the graph will be unique to the rule selection prob-
lem. The process of laying pheromone in our ant colony system
Figure 5: Flow chart of the rule selection algorithm.
is explained in more detail later in this section. The rest of this
section will be devoted to detailing the ACO-based algorithm for
rule selection.
Input Parameters. Along with the aforementioned graph of
5.3.2
generated offers, G, the ACO-based rule selection algorithm will
take two main parameters as input: the total number of cycles,
Cmax , and the total number of ants per cycle, Amax . The total
number of cycles and ants per cycle are proportional to the quality
of the final solution and the runtime. Additionally, the algorithm
requires the tuning parameters, m, n, α , β, ρ, τc , τmax , and τmin ,
which will be explained later. These parameters will be based on
the victim’s needs. For example, the victim can decrease Cmax and
Amax , to keep the runtime fast while sacrificing efficacy, especially
if it has many offers to select (more offers translates to longer
runtimes). On the other hand, the victim can increase Cmax and
Amax , to increase efficacy while also slightly increasing the runtime,
especially if it only has a handful of offers to select.
Initialization. Now, let’s walk through the entire algorithm
5.3.3
from beginning to end. A summary of the algorithm’s work flow
is depicted in Fig. 5. The algorithm is outlined in Algorithm 1.
Each offer will have a value and two weights associated with it.
The value is the amount of attack traffic the offer can potentially
filter (Equation 2 shows the value of an offer r from an DDoS-
filtering network j). One weight represents the amount of collateral
damage potentially incurred by the offer (Equation 3), and the other
represents the offer’s price (Equation 4).
value(r ) = maxk ∈K
weiдhtc (r ) = u ∈U
ak max
j ∈ Jk ,r ∈Ij
{xr jbr jk }
{xr jbr ju }
au max
j ∈ Ju ,r ∈Ij
weiдhtb (r ) = Pr j
(2)
(3)
(4)
5.3.4 Traversing the Graph. At the beginning of each cycle c (ini-
tially, c = 1), the algorithm will instantiate an empty list, sl oc , to
store each solution obtained in that cycle (lines 1 and 2). Also,
ASIA CCS ’20, June 1ś5, 2020, Taipei, Taiwan
Devkishen Sisodia, Jun Li, and Lei Jiao
Algorithm 1: ACO-Based Rule Selection Algorithm
Input: G, Cmax , Amax , τmi n , τc and other tuning parameters
Output: ss ol
1 while c ≤ Cmax do
2
sl oc = ∅;
τx y = τmi n , ∀xy ∈ G;
while a ≤ Amax do
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
sa = ∅;
choose random offer x ;
add x to sa ;
update lav l ;
while lav l is not empty do
choose next offer y ∈ lav l based on px y ;
add y to sa ;
update lav l ;
update τx y by dropping τc between x and y;
end
add sa to sl oc ;
a = a + 1;
end
add sbs t ∈ sl oc to sдl o ;
update pheromone for each edge to τ new
x y ;
c = c + 1;
20
21 end
22 return ss ol ∈ sдl o
Solution S = a, b, c, d
a
e
d
Option 1:
a
c
e
b
d
Between successive pairs
c
b
Option 2:
a
c
e
b
d
Between all pairs
Figure 6: An ant choosing nodes a, b, c, and d as its solution
can drop pheromone in two different ways.
the importance of the attractiveness of an offer. The attractiveness
of offer y, or uy , is essentially the value-to-weight ratio of offer y,
given by Equation 6:
uy =
value(y)
weiдhtc (y)m + weiдhtb (y)n
(6)
The parameters m and n are set by the victim, depending on whether
collateral damage or price is of higher (or equal) concern. The
amount of pheromone τxy is initially set to some minimum value
τmin (line 3). However, τxy is updated after each cycle, as described