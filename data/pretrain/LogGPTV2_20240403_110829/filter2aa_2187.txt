# Speaking with Cryptographic Oracles
## Daniel “unicornFurnace” Crowley  
Application Security Consultant, Trustwave - SpiderLabs

### Introduction and Distinctions
**Copyright Trustwave 2010**  
**Confidential**

#### The Speaker
- **Daniel Crowley**
- Web application security expert
- IANAC (I am not a cryptographer)
- Contact: [PI:EMAIL](mailto:dan_crowley@trustwave.com) | [@dan_crowley](https://twitter.com/dan_crowley)

#### Presentation Topic
- **Finding and Exploiting:**
  - Encryption Oracles
  - Decryption Oracles
  - Padding Oracles
- With minimal cryptographic knowledge
- More crypto knowledge leads to more sophisticated attacks

#### Not the Presentation Topic
- **The Oracle (as in the company)**
  - We are not discussing the database company or any other unrelated "oracles"
- **Cryptographic Experts like Adi Shamir**
  - While relevant, they are not the focus
- **New Attacks on Old Crypto**
  - Implementation mistakes are common but not the main topic
- **How Padding Oracle Attacks Work**
  - There are already many good resources on this

### For the People Playing Drinking Games
- **Keywords: APT, iPad, China, Cyber-war, Cloud, Mobile, Botnet, RSA, HBGary, LulzSec, Twilight, Sun Tzu, Weeaboo**

### Primer on Cryptographic Terms and Basic Mistakes
- **Cipher**: A system for scrambling and unscarming data.
- **Key**: A variable used to permute the cipher.
- **Initialization Vector (IV)**: A second variable used to randomize the cipher.
- **Plaintext**: The data in readable form.
- **Ciphertext**: The data in unreadable form.
- **Encryption**: Converting plaintext to ciphertext.
- **Decryption**: Converting ciphertext to plaintext.

#### Stream and Block Ciphers
- **Stream Ciphers**:
  - Encrypt one character at a time.
  - Key generates pseudo-random numbers to transform plaintext to ciphertext.
- **Block Ciphers**:
  - Encrypt X characters at a time (block size).
  - Key directly transforms plaintext to ciphertext.

#### Basic Mistakes
- **Using a Keyless Cipher**: Insecure if the cipher is discovered.
- **Reusing Keys and/or IVs**: Makes oracle attacks more dangerous.
- **Leaking Data from Crypto Operations**: Foundation for oracle attacks.

### What is an Oracle?
- **Definition**: A system that takes queries and provides answers.
- **Queries**:
  - Plaintext
  - Ciphertext
- **Answers**:
  - Corresponding plaintext
  - Corresponding ciphertext
  - Information about the operation
  - Sample from PRNG

### Identifying Cryptographic Oracles
- **From a Black-Box Perspective**

#### Decryption Oracles: Identify Input
- **Identify Encrypted Input**:
  - Points of user input: GET, POST, URL, Cookie, headers.
  - Encoded data: Base64, ASCII hex, URL encoding.
  - Modification of values may result in decryption-related errors.

#### Decryption Oracles: Find Decrypted Output
- **Output Types**:
  - Reflected in normal output or errors.
  - Given in later responses.
  - Inferred from modified output.
  - Stored and not shown.
  - Additional vulnerabilities may reveal output.

#### Example: Decryption Oracle
- **Scenario**: `GetPage.php?file=`
  - Opens a file based on encrypted input.
  - Verbose errors.
- **Usage**: Feed the script some ciphertext and record the error message.

#### Encryption Oracles: Find Encrypted Data
- **Common Locations**:
  - Cookies
  - Hidden variables
  - Databases
  - File resident data

#### Encryption Oracles: Determine Point of Entry
- **Frequently Encrypted Data**:
  - Client-side state variables
  - Passwords
  - Financial data
- **Requirements**:
  - Ability to manipulate and see the ciphertext.

#### Example: Encryption Oracle
- **Scenario**: `auth` cookie, encrypted with `Username + ":" + password_hash + ":" + timestamp`.
- **Usage**: Register, log in, copy cookie value, and replace encrypted input.

### Padding Oracles
- **Input Must Be Encrypted**
- **Padded Block Cipher**
- **Valid vs. Invalid Padding Distinguishable**
- **Essentially Decryption Oracles**
- **CBC-R Technique**: Also encryption oracles, though the first block may be garbled.

### Exploiting Cryptographic Oracles
- **Against Bad Crypto and Usage**

#### Attack 0: Crypto Recon Examples
- **Check for Static Key, IV, and Deterministic Cipher**:
  - Encrypt the same plaintext twice.
  - Compare results.
- **Check for Stream vs. Block Ciphers**:
  - Encrypt plaintexts of various sizes.
  - Compare plaintext and ciphertext sizes.
- **Check for ECB Block Cipher Mode**:
  - Encrypt repeating plaintext blocks.
  - Look for repetitive ciphertext.

#### Attack 1: Bad Algorithms
- **Example**:
  - Characters replaced with unique selections.
  - Separated by "K".
  - "hello" might become "KqIKefKPrPKPrPKuJXK".

#### Attack 1.75: Simple XOR Ciphers
- **Properties**:
  - Encryption = Decryption.
  - Leaking output makes them useless.
  - Avoid using XOR.

#### Attack 2: Trusted Encrypted Input
- **Key and IV Reuse**:
  - If you can encrypt arbitrary data in one place, it may work in another.
  - Lack of sanitization.
- **Example**:
  - Encrypted password with MAC in a cookie.
  - Use encryption oracle to encrypt malicious data.
  - Plug into cookie.

#### Attack 3: Let the Client Have It, It’s Encrypted
- **Steps**:
  - Find a decryption oracle.
  - Find encrypted data.
  - Decrypt it.
- **Key/IV Reuse**:
  - Algorithm, padding, and cipher mode don't matter.

### Conclusion
- **If You Can Find**:
  - An encryption oracle.
  - A decryption oracle.
  - All encryption using the same key and IV is now useless.

### Questions?
- **Contact**: Daniel Crowley
- **Trustwave – SpiderLabs**
- **[@dan_crowley](https://twitter.com/dan_crowley)**
- **[PI:EMAIL](mailto:dan_crowley@trustwave.com)**

**Copyright Trustwave 2010**  
**Confidential**