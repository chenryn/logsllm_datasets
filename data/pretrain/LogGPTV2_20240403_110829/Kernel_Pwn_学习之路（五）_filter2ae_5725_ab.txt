     * On X8664 these traps do not use interrupt stacks as they can't work
     * before cpu_init() is invoked and sets up TSS. The IST variants are
     * installed after that.
     */
    void __init idt_setup_early_traps(void)
    {
        idt_setup_from_table(idt_table, early_idts, ARRAY_SIZE(early_idts), true);
        load_idt(&idt_descr);
    }
    // In /source/arch/x86/kernel/idt.c#L58
    /*
     * Early traps running on the DEFAULT_STACK because the other interrupt
     * stacks work only after cpu_init().
     */
    static const __initconst struct idt_data early_idts[] = {
        INTG(X86_TRAP_DB,        debug),
        SYSG(X86_TRAP_BP,        int3),
    #ifdef CONFIG_X86_32
        INTG(X86_TRAP_PF,        page_fault),
    #endif
    };
    // In /source/arch/x86/kernel/idt.c#L218
    static void idt_setup_from_table(gate_desc *idt, const struct idt_data *t, int size, bool sys)
    {
        gate_desc desc;
        for (; size > 0; t++, size--) {
            // 初始化 desc 的各个成员变量
            idt_init_desc(&desc, t);
            // 将 desc 填入 idt
            write_idt_entry(idt, t->vector, &desc);
            if (sys)
                set_bit(t->vector, system_vectors);
        }
    }
    // In /source/arch/x86/kernel/idt.c#L203
    static inline void idt_init_desc(gate_desc *gate, const struct idt_data *d)
    {
        unsigned long addr = (unsigned long) d->addr;
        gate->offset_low    = (u16) addr;
        gate->segment        = (u16) d->segment;
        gate->bits        = d->bits;
        gate->offset_middle    = (u16) (addr >> 16);
    #ifdef CONFIG_X86_64
        gate->offset_high    = (u32) (addr >> 32);
        gate->reserved        = 0;
    #endif
    }
在`idt_setup_from_table`中，首先调用了`idt_init_desc`初始化了一个表示 `IDT` 入口项的 `gate_desc`
类型的结构体。
然后把这个中断门通过 `write_idt_entry` 宏填入了 `IDT` 中。这个宏展开后是 `native_write_idt_entry`
，其将中断门信息通过索引拷贝到了 `idt_table` 之中
    // In /source/arch/x86/include/asm/desc.h#L128
    #define write_idt_entry(dt, entry, g)        native_write_idt_entry(dt, entry, g)
    // In /source/arch/x86/include/asm/desc.h#L141
    static inline void native_write_idt_entry(gate_desc *idt, int entry, const gate_desc *gate)
    {
        memcpy(&idt[entry], gate, sizeof(*gate));
    }
#### 关于 `gate_desc` 结构体
`gate_desc` 结构体是一个在 `x86` 中被称为门的 16 字节数组。它拥有下面的结构：
`gate_desc`在`/source/arch/x86/include/asm/desc_defs.h#L88`中定义
    typedef struct gate_struct gate_desc;
`gate_struct`在`/source/arch/x86/include/asm/desc_defs.h#L77`中定义
    struct gate_struct {
        u16        offset_low;
        u16        segment;
        struct idt_bits    bits;
        u16        offset_middle;
    #ifdef CONFIG_X86_64
        u32        offset_high;
        u32        reserved;
    #endif
    } __attribute__((packed));
    struct idt_bits {
        u16        ist    : 3,
                zero    : 5,
                type    : 5,
                dpl    : 2,
                p    : 1;
    } __attribute__((packed));
为了能从中断号得到对应的`IDT`，处理器把异常和中断向量分为 16 个级别。处理器处理异常和中断的发生就像它看到 `call`
指令时处理一个程序调用一样。处理器使用中断或异常的唯一的识别码(即中断号)作为索引来寻找对应的 `IDT` 的条目。
在`IDT`中的 `IDT` 条目由下面的域组成：
  * `0-15` bits – 段选择器偏移，处理器用它作为中断处理程序的入口指针基址。
  * `16-31` bits – 段选择器基址，包含中断处理程序入口指针。
  * `IST` – 在 `x86_64` 上的一个新的机制。
  * `Type` – 描述了 `IDT` 条目的类型。(即：中断门、任务门、陷阱门)
  * `DPL` – 描述符特权等级。
  * `P` – 段存在标志。
  * `48-63` bits – 中断处理程序基址的第二部分。
  * `64-95` bits – 中断处理程序基址的第三部分。
  * `96-127` bits – CPU 保留位。
## 0x03 异常处理前处理
我们在之前讨论了`IDT`的初始化过程，现在我们来详细的看一看异常处理究竟是如何执行的。
首先我们注意到给`idt_setup_from_table`传入的参数有一项为`early_idts`数组，其中定义了`DEBUG`、`INT3`(、`page_fault`)两种异常(`32`位架构时，额外定义`page_fault`异常)。也就是说，在`cpu_init()`执行前，内核就已经能够处理这两种异常，那么我们就以这两种异常为例进行分析。
###  调试异常和断点异常
第一个异常 —— `debug`异常(助记符为`#DB`)，通常在在调试事件发生异常时报告。
例如：尝试更改[调试寄存器](http://en.wikipedia.org/wiki/X86_debug_register)的内容。(调试寄存器是`x86`从[英特尔80386](http://en.wikipedia.org/wiki/Intel_80386)处理器开始出现在处理器中的特殊寄存器，从此它的名称可以确定这些寄存器的主要用途是调试)这些寄存器允许在代码上设置断点，并读取或写入数据以对其进行跟踪。
**调试寄存器只能在特权模式下访问，以任何其他特权级别执行时尝试读取或写入调试寄存器都会导致[一般保护错误异常(General_protection_fault)](https://en.wikipedia.org/wiki/General_protection_fault)。**因此使用`set_intr_gate_ist`初始化`#DB`异常，而不是`set_system_intr_gate_ist`。
`#DB`异常的`Verctor`编号为`1`(也称为`X86_TRAP_DB`），并且正如我们在规范中看到的那样，该异常没有错误代码
Verctor 编号 | 异常助记符 | 异常描述 | 异常类型 | 错误代码  
---|---|---|---|---  
1 | #DB | Reserved | F/T | NO  
第二个异常 —— `breakpoint`异常(助记符为`#BP`)，当处理器执行[int
3](http://en.wikipedia.org/wiki/INT_\(x86_instruction)#INT_3)指令时发生异常。与`DB`异常不同，该`#BP`异常可能发生在用户空间中。我们可以将其添加到代码中的任何位置，例如，让我们看一下简单的程序：
    // breakpoint.c
    #include 
    int main() {
        int i;
        while (i  0x0000000000400585 :    83 45 fc 01    add    DWORD PTR [rbp-0x4],0x1
    (gdb) c
    Continuing.
    i equal to: 1
    Program received signal SIGTRAP, Trace/breakpoint trap.
    0x0000000000400585 in main ()
    => 0x0000000000400585 :    83 45 fc 01    add    DWORD PTR [rbp-0x4],0x1
    (gdb) c
    Continuing.
    i equal to: 2
    Program received signal SIGTRAP, Trace/breakpoint trap.
    0x0000000000400585 in main ()
    => 0x0000000000400585 :    83 45 fc 01    add    DWORD PTR [rbp-0x4],0x1
    ...
    ...
    ...
###  异常处理程序调用前准备
`#DB`和`#BP`的异常处理程序位于`/source/arch/x86/include/asm/traps.h#L13`
    asmlinkage void divide_error(void);
    asmlinkage void debug(void);
    asmlinkage void nmi(void);
    asmlinkage void int3(void);
    asmlinkage void overflow(void);
    asmlinkage void bounds(void);
    asmlinkage void invalid_op(void);
    asmlinkage void device_not_available(void);
`asmlinkage`是[gcc](http://en.wikipedia.org/wiki/GNU_Compiler_Collection)的[特殊说明符](http://en.wikipedia.org/wiki/GNU_Compiler_Collection)。实际上，对于`C`从汇编码中调用的函数，我们需要显式声明函数调用约定。如果函数使用`asmlinkage`描述符创建，`gcc`将从堆栈中检索参数以编译该函数。
因此，两个处理程序都在带有`idtentry`宏的`/arch/x86/entry/entry_64.S`中定义：
    idtentry debug do_debug has_error_code=0 paranoid=1 shift_ist=IST_INDEX_DB ist_offset=DB_STACK_OFFSET
    idtentry int3 do_int3 has_error_code=0 create_gap=1
每个异常处理程序可以由两部分组成：
  * 第一部分是通用部分，所有异常处理程序都相同。异常处理程序应将[通用寄存器](https://en.wikipedia.org/wiki/Processor_register)保存在堆栈上，如果异常来自用户空间，则应切换到内核堆栈，并将控制权转移到异常处理程序的第二部分。
  * 异常处理程序的第二部分完成的工作取决于具体的异常。例如，页面错误异常处理程序应找到给定地址的虚拟页面，无效的操作码异常处理程序应发送`SIGILL` [信号](https://en.wikipedia.org/wiki/Unix_signal)等。
现在来分析`idtentry`宏的实现。如我们所见，该宏采用七个参数：
  * `sym` – 定义全局符号，该符号`.globl name`将作为异常处理程序的入口。
  * `do_sym` – 符号名称，这表示异常处理程序的辅助条目。
  * `has_error_code` – 异常是否存在错误代码。
最后四个参数是可选的：
  * `paranoid` – 非零表示可以使用用户`GSBASE`和/或用户`CR3`从内核模式调用此中断向量。
  * `shift_ist` – 如果内核模式下的中断条目使用`IST`堆栈，以便使得嵌套的中断条目获得新的中断栈，则置位。 (这是针对#DB的，它具有递归的逻辑。(这很糟糕！))
  * `create_gap` – 从内核模式进入此中断处理程序时，创建一个6字大小的堆栈间隙。
  * `read_cr2` – 在调用任何C代码之前，将CR2加载到第3个参数中
`.idtentry`宏的定义：(实现在`/source/arch/x86/entry/entry_64.S#L970`)
    /**
     * idtentry - Generate an IDT entry stub
     * @sym:        Name of the generated entry point
     * @do_sym:        C function to be called
     * @has_error_code:    True if this IDT vector has an error code on the stack
     * @paranoid:        non-zero means that this vector may be invoked from
     *            kernel mode with user GSBASE and/or user CR3.
     *            2 is special -- see below.
     * @shift_ist:        Set to an IST index if entries from kernel mode should
     *            decrement the IST stack so that nested entries get a
     *            fresh stack.  (This is for #DB, which has a nasty habit
     *            of recursing.)
     * @create_gap:        create a 6-word stack gap when coming from kernel mode.
     * @read_cr2:        load CR2 into the 3rd argument; done before calling any C code
     *
     * idtentry generates an IDT stub that sets up a usable kernel context,
     * creates struct pt_regs, and calls @do_sym.  The stub has the following
     * special behaviors:
     *
     * On an entry from user mode, the stub switches from the trampoline or
     * IST stack to the normal thread stack.  On an exit to user mode, the
     * normal exit-to-usermode path is invoked.
     *
     * On an exit to kernel mode, if @paranoid == 0, we check for preemption,
     * whereas we omit the preemption check if @paranoid != 0.  This is purely
     * because the implementation is simpler this way.  The kernel only needs
     * to check for asynchronous kernel preemption when IRQ handlers return.
     *
     * If @paranoid == 0, then the stub will handle IRET faults by pretending
     * that the fault came from user mode.  It will handle gs_change faults by
     * pretending that the fault happened with kernel GSBASE.  Since this handling
     * is omitted for @paranoid != 0, the #GP, #SS, and #NP stubs must have
     * @paranoid == 0.  This special handling will do the wrong thing for
     * espfix-induced #DF on IRET, so #DF must not use @paranoid == 0.
     *
     * @paranoid == 2 is special: the stub will never switch stacks.  This is for
     * #DF: if the thread stack is somehow unusable, we'll still get a useful OOPS.
     */
    .macro idtentry sym do_sym has_error_code:req paranoid=0 shift_ist=-1 ist_offset=0 create_gap=0 read_cr2=0
    SYM_CODE_START(sym)
        UNWIND_HINT_IRET_REGS offset=has_error_code*8
        /* Sanity check */
        .if shift_ist != -1 && paranoid != 1
        .error "using shift_ist requires paranoid=1"
        .endif
        .if create_gap && paranoid
        .error "using create_gap requires paranoid=0"
        .endif
        ASM_CLAC
        .if has_error_code == 0
        pushq    $-1                /* ORIG_RAX: no syscall to restart */
        .endif
        .if paranoid == 1
        testb    $3, CS-ORIG_RAX(%rsp)        /* If coming from userspace, switch stacks */
        jnz    .Lfrom_usermode_switch_stack_@
        .endif
        .if create_gap == 1
        /*
         * If coming from kernel space, create a 6-word gap to allow the
         * int3 handler to emulate a call instruction.
         */
        testb    $3, CS-ORIG_RAX(%rsp)
        jnz    .Lfrom_usermode_no_gap_@
        .rept    6
        pushq    5*8(%rsp)
        .endr
        UNWIND_HINT_IRET_REGS offset=8
    .Lfrom_usermode_no_gap_@:
        .endif
        idtentry_part do_sym, has_error_code, read_cr2, paranoid, shift_ist, ist_offset
        .if paranoid == 1
        /*
         * Entry from userspace.  Switch stacks and treat it
         * as a normal entry.  This means that paranoid handlers
         * run in real process context if user_mode(regs).
         */
    .Lfrom_usermode_switch_stack_@:
        idtentry_part do_sym, has_error_code, read_cr2, paranoid=0
        .endif
    _ASM_NOKPROBE(sym)
    SYM_CODE_END(sym)
    .endm
在分析`idtentry`宏的内部实现之前，首先明确，这是发生异常时的堆栈状态：
        +------------+
    +40 | %SS        |
    +32 | %RSP       |
    +24 | %RFLAGS    |
    +16 | %CS        |
     +8 | %RIP       |
      0 | ERROR CODE | <-- %RSP
        +------------+
然后结合`#DB`和`#BP`的异常处理程序定义来看`idtentry`宏的内部实现：