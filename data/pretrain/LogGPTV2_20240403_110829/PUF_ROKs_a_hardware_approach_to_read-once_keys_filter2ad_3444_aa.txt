title:PUF ROKs: a hardware approach to read-once keys
author:Michael S. Kirkpatrick and
Sam Kerr and
Elisa Bertino
PUF ROKs : A Hardware Approach to Read-Once Keys
Michael S. Kirkpatrick
Department of Computer
Science
Purdue University
Sam Kerr
Elisa Bertino
Department of Computer
Department of Computer
Science
Purdue University
Science
Purdue University
West Lafayette, IN 47907
PI:EMAIL
West Lafayette, IN 47907
PI:EMAIL
West Lafayette, IN 47907
PI:EMAIL
ABSTRACT
Cryptographers have proposed the notion of read-once keys
(ROKs) as a beneﬁcial tool for a number of applications,
such as delegation of authority. The premise of ROKs is
that the key is destroyed by the process of reading it, thus
preventing subsequent accesses. While the idea and the ap-
plications are well-understood, the consensus among cryp-
tographers is that ROKs cannot be produced by algorithmic
processes alone. Rather, a trusted hardware mechanism is
needed to support the destruction of the key. In this work,
we propose one such approach for using a hardware design
to generate ROKs. Our approach is an application of phys-
ically unclonable functions (PUFs). PUFs use the intrinsic
diﬀerences in hardware behavior to produce a random func-
tion that is unique to that hardware instance. Our design
consists of incorporating the PUF in a feedback loop to make
reading the key multiple times physically impossible.
Categories and Subject Descriptors
K.6.5 [MANAGEMENT OF COMPUTING AND IN-
FORMATION SYSTEMS]: Security and Protection—
physical security
General Terms
Security
Keywords
Physically Unclonable Functions, Applied Cryptography, Ac-
cess Control, Read-Once Keys, Hardware Design
1.
INTRODUCTION
The term read-once keys (ROKs) describes the abstract
notion that a cryptographic key can be read and used for
encryption and decryption only once. While it seems in-
tuitive that a trusted piece of software could be designed
that deletes a key right after using it, such a scheme na¨ıvely
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
depends on the proper execution of the program. This ap-
proach could be easily circumvented by running the code
within a debugging environment that halts execution of the
code before the deletion occurs. That is, the notion of a
ROK entails a stronger protection method wherein the pro-
cess of reading the key results in its immediate destruction.
ROKs could be applied in a number of interesting sce-
narios. One application could be to create one-time pro-
grams [18], which could be beneﬁcial for protecting the in-
tellectual property of a piece of software. A potential client
could download a fully functional one-time program for eval-
uation before committing to a purchase. A similar applica-
tion would be self-destructing email. In that case, the sender
could encrypt a message with a ROK; the message would
then be destroyed immediately after the recipient reads the
message. More generally, there is considerable interest in
self-destructing data, both commercially [3] and academ-
ically [17].
In addition, the use of trusted hardware to-
kens have been proposed for applications including program
obfuscation [29], monotonic counters [33], oblivious trans-
fer [27], and generalized secure computation [19]. ROKs can
provide the required functionality for these applications.
Another interesting application of PUF ROKs is to defend
against physical attacks on cryptographic protocols. For ex-
ample, consider fault injection attacks on RSA [11, 10, 9, 8,
30]. In these attacks, the algorithm is repeatedly executed
with the same key, using a controlled fault injection tech-
nique that will yield detectable diﬀerences in the output.
After enough such iterations, the attacker is able to recover
the key in full. Similarly, “freezing” is another class of phys-
ical attack that can extract a key if it was ever stored in
an accessible part of memory [5]. PUF ROKs oﬀer a unique
defense against all of these attacks because repeated execu-
tion with the same key cannot occur, and the key is never
actually present in addressable physical memory.
The ability to generate ROKs in a controlled manner could
also lead to an extension where keys can be generated and
used a multiple, but limited, number of times. For example,
consider the use of ROKs to encrypt a public key pk.
If
an identical ROK can be generated twice, the owner of pk
could ﬁrst use the key to create eROK(pk) (indicating the
encryption of pk under with the ROK). Later, an authorized
party could create the ROK a second time to decrypt the
key. Such a scheme could be used to delegate the authority
to cryptographically sign documents.
In a sense, a ROK is an example of a program obfus-
cator. An obfuscator O takes a program P as input and
returns O(P), which is functionally identical to P but inde-
cipherable. A ROK, then, involves an obfuscator that makes
only the key indecipherable. While ROKs are promising
ideals, the disheartening fact is that program obfuscators–
of which ROKs are one example–cannot be created through
algorithmic processes alone [7]. Instead, trusted hardware
is required to guarantee the immediate destruction of the
key [18]. However, we are aware of no work that has specif-
ically undertaken the task of designing and creating such
trusted hardware for the purpose of generating a ROK.
In this paper, we propose the creation of ROKs using
physically unclonable functions (PUFs) [15, 16]. A PUF
takes an input challenge Ci ∈ C, where C denotes the set
of all such possible challenges. The PUF then produces a
response Ri ∈ R, where R is the set of possible responses.
The function that maps each Ci to Ri is based on the in-
trinsic randomness that exists in hardware and cannot be
controlled. As such, an ideal PUF creates a mathemati-
cal function unique to each physical instance of a hardware
design; even if the same design is used for two devices, it is
physically impossible to make their PUFs behave identically.
Our insight for the design of such “PUF ROKs” is to in-
corporate the PUF in a feedback loop for a system-on-chip
(SoC) design.1 That is, our design is for the PUF to reside
on the same chip as the processor core that performs the
encryption. This integration of the PUF and the processor
core protects the secrecy of the key. An attempt to read the
key from memory (given physical access) will fail, because
the key never exists in addressable memory. Also, attempts
to learn the key from bus communication will be diﬃcult
or impossible, as each key is used to encrypt only a single
message, and the key is never transmitted across the bus.
The unpredictable nature of PUFs provides a high proba-
bility that each iteration of a ROK generation will produce a
unique, seemingly random key. Yet, to ensure that a key can
be generated to perform both encryption and decryption,
the PUF must be initialized repeatedly to some state, thus
providing the same sequence of keys. To accomplish this,
Alice could provide an initial seed to produce a sequence of
keys that are used to encrypt a set of secrets. Alice could
then reset the seed value before making the device available
to Bob. Bob, then, could use the PUF to recreate the keys
in order, decrypting the secrets. As Bob has no knowledge
of the seed value, he is unable to reset the device and cannot
recreate the key just used.
Astute readers will note the similarities between our ap-
proach and using a chain of cryptographic hashes to gener-
ate keys. That is, given a seed x0, the keys would be H(x0),
H(H(x0)), etc., where H denotes a cryptographic hash func-
tion. The insight of our approach is that a PUF, as a trusted
piece of hardware, can provide a hardware-based implemen-
tation that is analogous to a hash function, but is more
secure than software implementations of such algorithms.
The rest of this paper is organized as follows. Section 2
discusses PUFs and related works that employ them. Sec-
tion 3 formalizes the notion of a ROK. We continue this
formalization in Section 4, in which we prove that our de-
sign captures the essence of a ROK and describe extensions
of our approach for greater ﬂexibility. We present the de-
tails of our implementation in Section 5, and oﬀer a security
analysis in Section 6, before concluding in Section 7.
1Our design could also be made to work for application-
speciﬁc integrated circuits (ASICs), but we limit our discus-
sion to SoC designs for simplicity.
2. PUFS
Before we describe our design for PUF ROKs, we provide
some relevant background on the creation, properties, and
applications of PUFs. Research on PUFs [15, 16] arose from
the observation that distinct instances of hardware produce
unique behavioral characteristics [28]. That is, each copy
of the device, even if designed to be identical, will exhibit
slight variations that can be measured only during execution
of the circuit. The precise behavior that ensues can be nei-
ther controlled nor predicted. In addition to silicon-based
circuits, similar distinguishing techniques have been applied
to RFID devices [13, 12].
Mathematically, a PUF can be modeled as a function
P UF : C → R, where C denotes a set of input challenges
(usually encoded as a bit string) and R is a set of responses.
That is, for a single device, providing the same input Ci
to the PUF will yield approximately the same result Ri.
In practice, the PUF output consists of noisy data; error-
correcting codes, such as Reed-Solomon [31], can be applied
to ensure that the response is identical every time.
The deﬁnition of the function is determined exclusively by
the variations in the hardware. As a result, no properties
can be assumed about the function itself. That is, in general,
PUFs are neither linear nor injective nor surjective. Rather,
the function merely consists of a set of random pairs (Ci, Ri).
Furthermore, as the function is deﬁned by the hardware,
providing the same Ci as input to a diﬀerent device’s PUF
will produce a diﬀerent response R′
i 6= Ri.
i, where Ci and C ′
The unpredictable nature of the PUF behavior leads to a
complication for proofs of security. Speciﬁcally, it is possible
that the function approaches a degenerate case. For exam-
ple, it is possible that the challenge input Ci will produce
itself as the response. One way to counteract this problem is
to incorporate a hash function into the structure; that is, the
output of the PUF is immediately hashed, and the output of
the hash becomes Ri. To simplify our proofs later, we will
assume an ideal PUF, meaning that there is no predictable
connection between the challenges and responses. That is,
assume an observer has knowledge of (Ci, Ri) and another
challenge C ′
i diﬀer in only a single bit, the
observer can predict the corresponding R′
i with only negli-
gible probability. Furthermore, the ideal PUF assumption
means that Ci = Ri for any i with only negligible property.
As an example of a circuit-based PUF, consider the design
in Figure 1. In this design, the one-bit challenge input con-
trols the multiplexor (MUX) and redirects the output of an
oscillator to a diﬀerent counter. For instance, if Ci = 1, the
top oscillator will be directed to the top counter, while the
bottom counter captures the bottom oscillator’s frequency.
If Ci = 0, then the top counter captures the bottom oscil-
lator, and vice versa. The oscillators are allowed to run for
a certain duration (using the same Ci for the entire time),
after which the counters’ values are compared.
If the top
counter reports a larger value, the response Ri = 1. Other-
wise, Ri = 0. While this design produces only a single bit
of output, larger PUFs can generate longer bit strings.
In this PUF, the ring oscillators are designed to be iden-
tical. However, as a result of the manufacturing process,
the wire length and width will inevitably diﬀer. Hence, one
oscillator will switch between outputting a 1 and a 0 at a
faster rate. But without actually executing the circuit, it
is impossible to tell which oscillates faster. This is due to
the fact that the diﬀerence between the two oscillators is too
Informally, γi and qi describe the current instruction and
the contents of memory for a single execution of a program,
and capture the state of the system just before executing
the encrypt or decrypt primitive. That is, if the execution
of the program is suspended for a brief time, γi, qi would
describe a snapshot of the stack, the value stored in the in-
struction pointer (IP) register, the values of all dynamically
allocated variables (i.e., those on the heap), etc. In short,
it would contain the full software image for that process for
that precise moment in time. Once the program is resumed,
the symbol γi would be consumed, and the system would
transition to state qi+1. Given these primitives, we present
the following deﬁnition.
Deﬁnition: A read-once key (ROK) is a cryptographic
key K subject to the following conditions:
• Each execution of Enc(γi, qi, m) generates a new K and
yields a transition to a unique qi+1.
• The ﬁrst execution of Dec(γj, qj , e) returns m and tran-
sitions to qj+1. All subsequent executions return ∅ and
transitions to q′
j+1, even when executing the machine
 with e, except with negligible proba-
bility.
• The probability of successfully decrypting e without
the primitive Dec(γj, qj , e) is less than or equal to a
security parameter ǫ (0 < ǫ < 1), even when given
identical initial states. ǫ must be no smaller than the
probability of a successful attack on the cryptographic
algorithms themselves.
What these deﬁnitions say is that the ROK Turing ma-
chine is non-deterministic. Speciﬁcally, during the ﬁrst ex-
ecution of a program2 that encrypts a message m, δ will
deﬁne a transition from qi to qi+1 based on the primitive
Enc(γi, qi, m). However, the second time, the key will be dif-
ferent, and the state transition will be from qi to q′
i+1. Simi-
larly, the ﬁrst execution of a program that decrypts e(m) will
traverse the states q0, . . . , qj , qj+1, where qj+1 is the state
that results from a successful decryption. However, return-
ing the machine to its initial state q0, using the same instruc-
tions Γ, the state traversal will be q0, . . . , qj , q′
j+1 6= qj+1,
because the decryption fails. Thus, ROKs incorporate some
unpredictable element that does not exist in traditional Tur-
ing machines: the history of prior machine executions. That
is, for any given machine T , only the ﬁrst execution (assum-
ing either the encrypt or decrypt primitive is executed) will
use the transitions deﬁned by δ. The second (and subse-
quent) executions will use δ′, as the state after the primitive
is invoked will diﬀer.
Clearly, these deﬁnitions capture the intuitive notion of
a ROK. The key K is generated in an on-demand fashion
in order to encrypt a message. Later, K can be used to
decrypt the message, but only once. After the ﬁrst de-
cryption, the key is obliterated in some manner. Speciﬁ-