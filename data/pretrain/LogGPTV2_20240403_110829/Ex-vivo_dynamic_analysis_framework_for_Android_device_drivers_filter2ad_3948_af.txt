(2019)
https://github.com/google/syzkaller
device
and Z. Qian,
[29] S. M. S. Talebi, H. Tavakoli, H. Zhang, Z. Zhang, A. A.
analysis
Sani,
27th USENIX
of
Security
Baltimore, MD:
USENIX Association, 2018, pp. 291–307.
[Online]. Available:
https://www.usenix.org/conference/usenixsecurity18/presentation/talebi
[30] Unicorn engine. (2019) The ultimate CPU emulator. [Online]. Available:
Symposium (USENIX Security
“Charm:
of mobile
Facilitating
systems,”
dynamic
in
drivers
18).
https://www.unicorn-engine.org
[31] N. Voss. (2019) AFL-Unicorn: Fuzzing arbitrary binary code. [Online].
Available: https://hackernoon.com/aﬂ-unicorn-fuzzing-arbitrary-binary-
code-563ca28936bf
[32] J. Zaddach, L. Bruno, A. Francillon, and D. Balzarotti, “AVATAR: A
framework to support dynamic security analysis of embedded systems’
ﬁrmwares,” in 21st Annual Network and Distributed System Security
Symposium, NDSS 2014, San Diego, California, USA, February 23-26,
2014, 2014.
[33] M. Zalewski.
(2019) American fuzzy lop.
[Online]. Available:
http://lcamtuf.coredump.cx/aﬂ
LIST OF FUNCTIONS INTERCEPTED BY THE EVASION
APPENDIX A
KERNEL
https://github.com/trailofbits/manticore
(2019) Virtualised
breaking
[17] T. Mueller.
scapy.
and
usb
for
usb
fun
fuzzing
and
using
proﬁt.
qemu
[On-
In this appendix, we list functions that are intercepted by
the evasion kernel in order to evade hardware dependencies.
request_firmware
ioremap
ioremap_wc
of_iomap
clk_get
devm_clk_get
of_clk_get_by_name
clk_set_rate
i2c_smbus_write_byte_data
i2c_smbus_read_byte_data
wait_for_completion
request_threaded_irq
_raw_spin_lock
_raw_spin_unlock
wait_for_completion_timeout
Replaced with a stub that allo-
cates and returns 1024 bytes of
zeroed memory.
Replaced with kzalloc
Replaced with a stub that
returns clock “oscclk0” present
at virt board or “apb pclk”
present at vexepress board
Replaced with stub0
Replaced with stub0 to avoid
read/write to missing periphreal
Replaced with stub0 to avoid
waiting for interrupts from
missing peripheral
Replaced with stub1 to avoid
waiting for
from
missing peripheral
interrupts
APPENDIX B
IMPLEMENTATION DETAILS
A. Extracting kernel state snapshot
Once a driver is loaded and initialized and the corresponding
/dev/ ﬁlesystem entry is created in Qemu, EASIER executes
a user space program that opens that ﬁle and issues an IOCTL
system call. EASIER uses Qemu’s gdb interface to set a break-
point at the beginning of the corresponding system call entry in
the kernel: this address can be found in /proc/kallsyms.
Note that in order to distinguish the system call that reaches the
handler under test from system calls issued by other programs
(e.g. by the parent terminal) EASIER puts a unique value to
the list of arguments and uses a conditional breakpoint that
checks for this value (in our implementation we conveniently
reused the IOCTL cmd numbers which are usually sufﬁciently
unique).
Once the execution reaches the kernel, EASIER dumps
the guest memory and CPU registers values. Unfortunately,
Qemu’s control port command for dumping ARM guest mem-
ory, dump-guest-memory, only works if the host also
runs on the ARM architecture4. Due to this, we use the
gdb interface instead, which allows one to dump arbitrary
memory regions. In order to use this approach, EASIER needs
to know memory regions to dump in advance. While getting
the userspace memory mapping is trivial through the /proc
ﬁlesystem, getting the kernel space memory layout is a bit
more complicated for ARM32. On Intel and aarch64 architec-
tures the kernel mapping can be obtained through debugfs if
the kernel was compiled with the CONFIG_PTDUMP option.
Unfortunately, there is no such option for ARM32. Fortunately,
a corresponding patch was published at lwn.net that enables
similar functionality5. With a few tweaks we were able to
make it work for our case. For the guest CPU registers we
use Qemu’s QMP interface.
B. IOCTL recovery additional details
When
recovering
use
copy_from_user() and copy_to_user() functions
to learn the pointer value and the size of the corresponding
IOCTL
structures,
we
4https://lists.gnu.org/archive/html/qemu-devel/2015-11/msg04481.html
5https://lwn.net/Articles/572320/
memory region. To do this, we intercept and replace these
functions in dUnicorn. One of the difﬁculties is that these
functions are inlined which means that we cannot simply
put a code hook at one speciﬁc address (as with non-inlined
functions). Instead we need to ﬁnd all places inside the driver
that include the corresponding code. Fortunately, in Linux
kernel both functions are deﬁned using inline assembler
which means that they are always compiled into the same
type of instructions and with the same order. We use this
fact to statically search for the corresponding sequence of
instructions and redirect execution at those points.
C. Restoring coprocessor registers
When restoring the kernel state inside dUnicorn, we also
need to restore coprocessor registers. Unfortunately the Uni-
corn library does not support setting such registers directly. In
order to set them our framework automatically generates as-
sembly code (which uses mcr instructions to set the registers)
and executes it before starting IOCTL handler emulation.
DRIVER INITIALIZATION ADDITIONAL DETAILS
APPENDIX C
In this Appendix, we look further at how often stub func-
tions were used to satisfy software dependencies at various
stages of the driver initialization process. Table V shows the
number of stub invocations for 25 drivers from the MSM
kernel for which we were able to reach IOCTLs. To give
a rough measure of driver complexity, column 2 shows the
number of lines of code contained in the driver and column
3 speciﬁes how many undeﬁned functions the driver had (i.e.
those present in the Android kernel but absent in our evasion
kernel). Columns 4-7 specify how many times the evasion
kernel used stub functions to satisfy a dependency in each
step of the initialization process (including repeated calls to
a missing function). We can see that the total number of
invocations for most of the drivers is moderate and is often
less than 10, but could be as high as 50 in the case of
msm_cpp.ko.
In Table VI, we provide a breakdown of different loading
phases for MSM drivers. For each driver, the 3rd and 4th
columns specify if the driver’s init and probe functions
succeeded; n/a in the probe column means that the driver
does not have the corresponding function and all the initial-
ization happens inside init. Column “dev” file speciﬁes
whether during the initialization,
the driver succeeded in
creating the corresponding ﬁle in /dev; the open column
speciﬁes whether this ﬁle could be successfully opened.
APPENDIX D
KNOWN CVE’S: CASE STUDIES
In this appendix, we describe three existing vulnerabilities
that were reachable in the evasion kernel, CVE-2014-9786,
CVE-2014-9785 and CVE-2014-9783, in more detail. The
former demonstrates that our system is capable of reaching
deep bugs. The second, is an example of a bug that can
be reached even in case the driver is supposed to actively
Module
avtimer.ko
msm rotator.ko
adsprpc.ko
msm adc.ko
vidc venc.ko
msm led ﬂash.ko
msm.ko
msm gemini.ko
msm jpeg.ko
msm ispif.ko
msm cpp.ko
msm rmnet.ko
msm rmnet bam.ko
msm rmnet sdio.ko
msm rmnet smux.ko
qseecom.ko
diagchar.ko
msm actuator.ko
msm cci.ko
vidc vdec.ko
mdss rotator.ko
msm csid.ko
msm isp.ko
msm csiphy.ko
iris-radio.ko
LOC
369
1,850
1,287
1,533
4,149
273
1,056
2,399
2,303
1,085
1,951
841
1,013
713
934
3,391
8,781
907
1,149
2,691
3,085
669
3,747
774
4,561
Missing
Symbols
5
16
19
8
38
2
2
11
20
5
23
10
8
0
0
18
17
15
6
49
49
7
22
4
0
Stubs in
Init
0
0
3
0
2
0
0
0
0
0
0
0
0
0
0
0
1
0
0
1
0
0
0
0
0
Stubs in
Probe
Stubs in
open
Stubs in
close
Stubs total
0
12
-
1
-
2
0
0
3
0
19
-
-
-
0
10
-
0
1
-
6
0
6
0
0
2
0
5
0
5
0
0
0
0
0
10
-
-
-
-
0
0
0
0
5
0
0
1
0
0
4
0
5
0
1
0
0
-
-
0
21
-
-
-
-
0
0
0
0
3
0
0
0
0
0
6
12
13
1
8
2
0
0
3
0
50
-
-
-
-
10
1
0
1
9
6
0
7
0