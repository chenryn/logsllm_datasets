**指向函数的指针**
然后，反汇编视图将显示函数名称，而不仅仅是原始双字
如果我们想要彻底，我们可以向上滚动到看起来像查找表的开头，查看它是否在函数中引用，并分析该函数的作用。
向上滚动到查找表的开头是字符串`lan`，这是由我重命名为`parse_json`的函数引用的
`parse_json`函数非常大，但它引用`lan`字符串表明它是如何使用此查找表的
这个`do-while`循环从请求JSON中获取模块名称，并且从`lan`的地址开始
以`0x44`的增量循环每个相对偏移。每个循环，`strcmp`是用户提供的字符串，传递给`module`参数，字符串位于查找表中每个条目的开头，直到匹配为止。然后它调用相关的函数。我怀疑它看起来像开发人员实际编写的查找函数——但这就是它在反编译的伪代码中的样子。
## 回到bug
刚才有一些逆向的内容让人分析，让我们回到`API_webServer_function`，`Ghidra`为我们准备了一个非常好的切换语句供我们仔细阅读
提取用户提供的来自JSON请求的`action`值(来自`iVar1 + 0x14`)，并且`switch case`根据其值运行。
因此，如果我们发送包含`{"module":"webServer"，"action":0}`之类的请求，则`QCMAP_Web_CLIENT`进程将使用参数`uci
get webserver.user_config.language`调用函数`call_popen`
然后它创建一个JSON对象，并将从`call_popen`获得的值作为`language`值返回。
`call_popen`是我自己给这个函数的名字。它只是`popen`系统调用的一个简单的wrapper，带有一些错误检查和返回值处理。这是完整的：
`popen`调用本身是突出显示的
## 盛大的popening
`popen`字面上运行系统级命令。它很像`system`或`exec`。将不受信任的用户输入直接传递给它存在问题，但这正是二进制文件所做的。
如果操作为1，则`language`参数的值将传递给由`snprintf`函数构造的`shell`命令字符串，然后将其传递给`call_popen`
“但”——我听到你们齐声说 ——“SNPRINTF还有什么额外的参数？”
这真的是精明和敏锐的你，聪明的你。好吧，答案是，反编译器并不完美。我们期待看到：
    snprintf(char_array_204,200,"uci set webserver.user_config.language=%s;uci commit webserver", *(iVar1 + 0x10));
但我们没有。这就是我们所全部看到的。
## ARM中的函数调用
`ARM`中的函数调用类似于`x86_64`，因为参数存储在寄存器中
R0应包含第一个参数，R1表示第二个参数，R2表示第三个参数...等等
我们正在查看一个`snprintf`调用，如果要填充一些格式字符串，则应至少使用4个参数。而且`uci set
...`命令字符串中的`%s`绝对是格式字符串。
应以[下列格式](http://www.cplusplus.com/reference/cstdio/snprintf/)调用`snprintf`
    int snprintf(char* s，size_t n，const char* format，...)
我们分析`...`，它会将任意多个字符串格式化地填入，由于已经注意到了明确的格式化字符串，我们希望`R0,R1,R2,R3`包含这个函数调用的参数
事实上我们可以在反汇编中看到`R3`，我们希望指向用于控制的`language`参数的寄存器，而它 **正在被设置** ，让我们看看是怎么回事
首先，来自`cJSON_GetObjectItem`的返回值被赋予`R6`（返回值存储在R0中，但在此处标记为`language_val`，因为我在反编译器视图中将其重命名）
是的，我知道这是一个`SUBtract`指令，但有时在`ARM`反汇编中你会看到各种ADD或SUB的值为0x0，而不是直接MOV赋值，两者有一个关键的差异
它是`SUBS`而不仅仅是`SUB`的事实意味着根据操作的结果更新标志位flag。因此，如果SUBS指令导致R6等于零，则零标志（ZF）将被设置为1，并且将遵循下一个BEQ分支命令。
所以只需要几条指令就可以了。
我们也可以在伪代码中看到：
`iVar1 != 0`检查空返回值
回到汇编，从`cJSON_GetObjectItem`调用返回的对象的指针已移至`R6`，然后，*(ptr+0x10)的存储器中的值移动到R3。然后CMP指令检查它是否为空。
我们可以通过读取伪代码的其他部分进行有根据的猜测，即从`cJSON_GetObjectItem`返回的对象的偏移量0x10包含指向用户提供的字符串值的指针。然后有一个快速CMP，以确保指针不为空。再次，我们可以看到在伪代码中反映出来：
但是，由于某种原因，`Ghidra`反编译器没有考虑到R3仍然填充的事实，即使在CMP之后，并且不包括在伪代码中。那好吧。至少我们现在肯定知道它在那里。
## sry，回到刚刚的bug
现在它应该是不言而喻的，但是将`language`设置为shell命令将导致我们的shell命令被`snprintf`字面地包含在`uci set
...`字符串中。当该字符串传递给popen时，该命令将被执行。
我们现在知道伪代码应该是这样的：
因此，我们提供给`language`参数的值将替换`uci set
...`字符串中的`%s`格式字符串，该值存储在`acStack224`中，最后`popen`就被调用
因此，以下请求将生成`telnetd`。Pre-authentication
接着，我们可以登录设备，并准备接下来的“掠夺”
## 所以只是一个仅限局域网的RCE?
好吧，不完全是。蜂窝调制解调器连接到`APN`，`APN`就像电信公司提供的大规模局域网。配置`APN`不一定要求严格——例如，不实施客户端隔离。在这些情况下，任何非常顽皮的人都可以连接到相同的APN，因为您可以访问蜂窝调制解调器的Web配置界面。任何非常顽皮的访问电信`GGSN`的人也可能能够连接到路由器的Web界面——假设路由器不阻止通过蜂窝接口访问。
还有可能存在`drive-by`
JavaScript跨站点请求伪造攻击。在JavaScript中，很容易枚举路由器所在的位置，查看它是否存在漏洞，并伪造可能执行代码的请求。您可以[在我们的旧帖子中](https://www.pentestpartners.com/security-blog/lan-surfing-how-to-use-javascript-to-execute-arbitrary-code-on-routers/)看到此类攻击的示例。所以，一个讨厌的页面可以在您的路由器上执行任意代码。除了访问完全不相关但恶意的页面之外，您无需执行任何操作。
这是注入命令的JavaScript，等待500毫秒，并将语言设置为正常：
## 修复bug
TP-Link在固件更新190531中解决了这个问题。修复了什么？
使用了单引号转义格式化字符串，聪明。
# 结论
蜂窝调制解调器中的错误仍然很常见。这只是我们在M7350中发现的一个漏洞的例子。公平地说，我只花了一天左右的时间。因此，可能会有更不明显的问题。其他TP-Link设备可能会有更多。快乐狩猎！
TP-Link的回应：
26/02/2019 - 首次接触尝试。  
02/03/2019 - 第二次接触尝试。  
12/03/2019 - 第三次接触尝试。  
18/03/2019 - TP-Link终于回复了。  
18/03/2019 - 发送一个命令注入问题的详细信息。  
02/04/2019 - TP-Link确认收到电子邮件。  
18/04/2019 - TP-Link确认存在问题，表示他们正在努力解决问题。  
18/04/2019 - TP-Link提供用于测试的beta固件。  
25/04/2019 - 我有时间查看这个固件，找到另一个bug。  
29/04/2019 - TP-Link提供另一个更新的固件，修复了这个第二个错误。  
14/04/2019 - 我发现有更多时间再次查看此固件，确认修复。  
03/06/2019 - TP-Link发布固件版本190531
TP-Link曾表示此问题仅影响M7350硬件版本3，我不完全确定这是否属实。我一直希望，在收到命令注入漏洞报告后，他们会为其他非常类似的问题提供整个代码库的审计，但我猜TP-Link不会。