sentinels, into the file for detection purpose. This scheme is 
efficient,  but  only  supports  limited  times  of  verification,
which is not practical. 
Shacham and Waters introduced two frameworks in [12] 
for  both  public  and  private  verifiable  POR,  and  made  full 
proofs  of  the  security  of  their  frameworks  against  arbitrary 
adversaries. The  computation  efficiency  of  Shacham’s
private verifiable scheme is better than that of PDP proposed 
by Ateniese, and it supports limitless times of verification, so 
we take advantage of this framework in the PoR part of our 
scheme. 
329
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
Recent  years,  a  lot  of  PDP  and  PoR  schemes  were 
proposed  [13]–[23].  However,  very  few  of  them  took  both 
deduplication  and  proof  of  ownership  into  account.  Zheng 
and Xu [24] proposed a scheme called proof of storage with 
deduplication  (POSD)  which  considered  these  two  aspects. 
But  their  scheme  is  slightly  different  from  ours.  They 
employed  publicly-verifiable  PoR  for  both  the  proof  of 
ownership and the proof of retrievability. Every user is able 
to verify the retrievability of the files stored in cloud, which 
may leak the information about the files and their owners. 
Different  from  POSD,  we  provide  privately  verification 
so  that  only  the  owners  of  a  file  are  allowed  to  verify  the 
retrievability of the file. Besides, we utilize a method based 
on  Merkle  Tree  to  prove  the  ownership  so  that  the 
computation cost can be much smaller than POSD. And the 
process  of  retrievability  proving  in  our  scheme  can  be  run 
limitless times. 
III.
FRAMEWORK OF PROOFS OF OWNERSHIP AND 
RETRIEVABILITY 
A. System Model 
A  cloud  storage  system  contains  two  entities:  cloud 
storage server and cloud client. 
turn 
Cloud  storage  server  provides  cloud  storage  service.  Its 
storage  space  is  very  huge  so  that  all  kinds  of  clients  can 
store their data in it. However, although the clients have to 
make  the  cloud  server  to  store and  manage  their  files, they 
actually  do  not  trust  the  server.  The  cloud  storage  server 
sometimes  may 
into  an  adversary  from  clients’
perspective. That is because the cloud server may modify or
drop the data, which is not expected by the clients. So in our 
system  model,  the  cloud  storage  server  is  not  trusted  and 
proof of data retrievability must be executed. 
Cloud clients upload their files to the cloud storage and 
may remove their local copies. Then they can download the 
files belong to them from cloud servers whenever they want. 
We  consider  that  there  are  possibly  some  malicious  clients
who  want  to  obtain  other  users’  files.  They  may  collect 
information of the files they want and cheat the cloud servers 
with  some  methods.  As  a  result,  the  cloud  servers  cannot
completely trust clients either. 
In  the  cloud  storage  system  model,  there  are  several 
requirements  we  must  meet:  a  client  has  to  prove  to  the 
server  its  ownership  of  the  file  that  it  claims  it  have;  the 
server stores only a fixed number copies of each file in the 
cloud; whenever a client wants to check the retrievability of 
his  data,  the  server  must  respond  a  proof  to  him;  and  the 
scheme must be as efficient as possible.
B. Framework of  PoOR
We  describe  the  detail  of  PoOR  framework  in  this 
subsection. The PoOR scheme consists of three phases: pre-
process  phase,  ownership  proving  phase  and  retrievability 
proving  phase.  The  flow  charts  of  these  three  phases  are 
described in Fig 1. When a client attempts to upload a file, it 
executes the pre-process phase. And if the file exists in the 
server,  the  ownership  proving  phase  begins.  After  proving 
the ownership of the file successfully, the client can request 
330
the server to make a proof of retrievability whenever it wants.
The server has to respond to the request, otherwise the client 
may doubt that the file has been corrupted or dropped. The 
detailed descriptions are as follows.
x
x
x
including 
Pre-process phase: When a client wants to upload a 
file  F,  the  client  firstly  send  the  ID  (e.g.  the  hash 
value) of the file to the cloud server, and at the same 
time  encodes  file F and  generates  some  extra  data 
with the Encode algorithm. If the file’s ID does not
exist  in  the  server,  the  client  uploads  both  the 
encoded  file  and  the  extra  data  to  the  server. The 
extra data includes the tags used in the retrievability 
proving  phase.  If  the  ID  exists  in  the  cloud, the 
process  turns  to  ownership  proving  phase.  If  the 
client  proves  its  ownership  successfully,  it  only 
needs to send the extra data to the server. 
Ownership proving phase: This phase is based on a 
Merkle  Tree  protocol, 
three  steps: 
challenge, prove and  verify.  Firstly  the  server 
launches  a  challenge  C1  to  the  client  and  asks the 
user  to  prove  his  ownership  of  the  file.  After 
receiving  this  challenge,  the  client  executes  the 
CProve algorithm to generate the ownership proof 
ܲ1 with the challenge C1. The client then sends ܲ1
to  the  server.  Finally,  the  cloud  server  generates  a
ܲ1′ by  the  same  way  and  compares  these  two 
results. If ܲ1 is equal to ܲ1′, it means that the client 
proves its ownership successfully. 
Retrievability  proving  phase:  This  process  is  very 
similar  to  the  second  phase,  and  consists  of  the 
same three steps. When an owner of file F wants to 
verity the retrievability of the file in the server, he 
should  launch  a  challenge ܥ2 to  the  cloud  server. 
Then the cloud server generates a proof ܲ2 with ܥ2
and the data stored in cloud using SProve algorithm.
Receiving  the  proof,  the  client  can  verify  whether 
ܲ2 is  correct  with  the  secret  local  key.  This  phase 
can be executed as many times as the user wants. 
C. Syntax and Definitions 
x
x
Definition 1 (Proofs of Ownership and Retrievability): A
proofs  of  ownership  and  retrievability  scheme  PoOR =
(Encode, SChallenge,  CProve,  SVerify,  CChallenge,
SProve, CVerify) consists of the following seven algorithms: 
(ܨᇱ,ܶ,ݏ݇) (cid:277) Encode(ܨ) ,  the  encoding  algorithm 
which  takes  the  original  file  F and  some  security 
parameters  as  inputs,  and  outputs  the  encoded  file 
ܨᇱ and some metadata like tags ܶ and secret key  ݏ݇;
ܥ1(cid:277)SChallenge(), this is a probabilistic algorithm 
which takes no input and generates two numbers as 
the output ܥ1;
ܲ1 (cid:277) CProve (ܥ1,ܨ′) ,  the  client-side  proving 
algorithm  with  the  challenge ܥ1 and  the  original ܨ
as inputs and a proof of ownership ܲ1 as output;
0/1(cid:277)SVerify(ܥ1,ܲ1,ܨ′),  this  algorithm  is  run  by 
the server to verify the validity of ܲ1 with the inputs 
ܥ1 and ܨ′,  then  outputs  1  if ܲ1 is  validity  and  0 
otherwise;
x
x
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. The flow chart of PoOR
ܥ2(cid:277)CChallenge(), a probabilistic algorithm that is
similar  to  SChallenge,  it  takes  no  input  and 
generates several random parameters as outputs; 
ܲ2 (cid:277)SProve(ܥ2,ܨᇱ,ܶ),  the  proving  algorithm  in 
server side with the challenge ܥ2, the encoded file 
ܨᇱ and  the  tags  ܶ as  inputs,  and  a  proof  of 
possession ܲ2 as output;
0/1(cid:277)CVerify(ܥ2,ܲ2), this algorithm is run by the 
client, it takes the challenge ܥ2 and the proof ܲ2 as 
inputs, and output 1  if  verify  successfully  and 0 if 
not.
x
x
x
x
x
Definition  2  (Validity):  We  say  a  scheme  PoOR  = 
(Encode, SChallenge, CProve, SVerify, CChallenge, SProve, 
CVerify)  is  valid,  if  the  following  conditions  hold  with 
overwhelming  probability:  For  any  data  file ܨ ߳ {0,1}∗ and 
(ܨᇱ,ܶ,ݏ݇) ∶= Encode(ܨ), and any challenge ܥ1 and ܥ2, 
SVerify(ܥ1,CProve(ܥ1,ܨ′),ܨᇱ) = 1. 
CVerify൫ܥ2,SProve(ܥ2,ܨᇱ,ܶ)൯ = 1. 
IV. THE SCHEME
In  this  section, we  propose  a  PoOR  scheme  based  on 
Merkle tree and homomorphic verifiable tags. As shown in 
Definition  1,  the  implementation  of  PoOR  includes  seven 
algorithms, now we will describe them in detail. 
A. Building Blocks 
Before we describe our scheme, we briefly introduce the 
tools that we use.  
Erasure codes: An [݊,݇,݀] erasure code function ܧ(∗)
encodes a file with ݇ blocks into ݊ blocks (݊ > ݇), and the 
file can be recovered from any ݀ − 1 blocks. The parameter 
݀ is the minimum Hamming distance of the code.  
There are two purposes for which we use erasure code. 
One is to support data retrieve and the other is to satisfy the 
security  requirement.  As  we  mentioned  in  Section  II, a 
client  who  holds  a  file  A  similar  to  file  B can  cheat  the 
server with a great possibility. If we encode these two files 
with  erasure  code,  they  will  become  completely  different, 
and this kind of attack can be invalid. Note that the use of 
erasure  code  makes  the  size  of  a  file  become (௡
௞ − 1)|F|
larger,  which  increases  uploading  and  downloading  cost. 
But  we  think  it’s acceptable  because  the  file  needs  to  be 
uploaded only once. 
Merkle  Tree is a tree in  which every  non-leaf  node is 
labelled with the hash of the labels of its children nodes. It 
allows  efficient  and  secure  verification  of  the  contents  of 
larger data structures. A Merkle Tree has such character that 
even if there is only one leaf different between tree A and 
tree B, the roots of these two trees will be different. In our 
scheme, the Merkle Tree is not used in the way described in 
PoWs  because  the  computation  and  communication  costs 
are  large  as  we  explained  in  Section  II.  We  use  binary 
Merkle  Tree  and  set  hash  values  of  the  challenged  file 
blocks as the leaves of the tree, and use the root as a proof 
of ownership. 
the 
following  character:  Given  two  data  blocks ݉௜ and ݉௝,  we 
have ܶ௠೔ା௠ೕ = ܶ௠೔ ∗ ܶ௠ೕ .  Here  +  and  *  symbolize  some 
kinds of operations. Some algorithms are homomorphic on 
addition,  like  Paillier,  while  others  are  homomorphic  on 
multiplication,  like  RSA.  If  an  algorithm  is  homomorphic 
on both addition and multiplication, we say this algorithm is 
full  homomorphic.  However,  a  practical  full  homomorphic 
algorithm  has not been  found. In our  scheme,  we  generate 
tags using an algorithm homomorphic on addition because it 
is  efficient  in  computation.  With  homomorphic  verifiable 
tags, the data transferred during retrievability proving can be 
constant no matter how many blocks are challenged. 
Homomorphic  verifiable  tags  are 
tags  with 
a 
collision-resistant  hash 
Except  the  tools  mentioned  above,  we  also  use  a 
collision-resistant  hash  function  and  a  pseudo-random 
algorithm.  For 
function 
H:{0,1}∗ → {0,1}௟, it is extremely hard to find two values ݔ
and y that  satisfy H(ݔ) = H(ݕ).  This  function  is  used  in 
building Merkle Tree and the verification of data integrity. 
A  pseudo-random  function  is  a  deterministic  function  that 
takes  a  key ݇ and  an  input ݔ and  outputs  a  value ݕ that  is 
indistinguishable from a truly random function of the same 
input ݔ.(cid:3)
B. Construction of PoOR 
We present the construction of our PoOR scheme in this 