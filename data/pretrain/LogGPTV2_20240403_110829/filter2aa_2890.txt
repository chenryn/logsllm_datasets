# One Step Before Game Hackers: Instrumenting Android Emulators
## Defcon 26
### Presenter: nevermoe
#### © DeNA Co., Ltd.

---

### Self-Introduction
- **Name:** nevermoe (@n3v3rm03, i [at] nevermoe.com)
- **Nationality:** Chinese in Japan
- **Role:** Security Engineer at DeNA Co., Ltd.
- **Interests:** Playing and hacking games

#### © DeNA Co., Ltd.

---

### Agenda
1. **Background**
2. **Emulator Internal**
3. **Hooking**
4. **Demo**
5. **Conclusion**

#### © DeNA Co., Ltd.

---

### Background: Game Cheating Threat Model

| Users | Cheaters | Game Vendors |
|-------|----------|--------------|
| PC    | YES      | YES          | 
| Mobile| (Normally) No | YES | NO |

**Question:** Full Control?

#### © DeNA Co., Ltd.

---

### Background: Mobile Game Cheating Business Model
- **Is there an easy way to distribute cheating tools?**
  - **Answer:** Android emulators!
  - **Advantages:**
    - Unified environment
    - Already or easily rooted

#### © DeNA Co., Ltd.

---

### Background: Cheating on Emulators
- **Popular Method:** Touch simulation (e.g., Mobile Anjian)
- **Why no hooking tools?**
  - Game codes are usually native
  - Commercial emulators use Intel Houdini for arm-x86 translation in native code
- **Hooking solution is not obvious**

#### © DeNA Co., Ltd.

---

### Background: Purpose
- **Enable hooking on commercial Android emulators!**

#### © DeNA Co., Ltd.

---

### Emulator Internal: Targets

| Emulator | Client Version | Android Version | Houdini Version |
|----------|----------------|-----------------|-----------------|
| BlueStacks | 3.56.73.1817   | 4.4.2           | 4.0.8.45720     |
| NOX      | 6.0.5.2        | 4.4.2           | 4.0.8.45720     |
| NOX      | 6.0.5.2        | 5.5.1           | 5.0.7b_x.48396  |
| LeiDian  | 2.0.54         | 5.5.1           | 5.0.7b_x.48396  |
| MEmu     | 5.3.1          | 5.5.1           | 5.0.7b_x.48396  |

#### © DeNA Co., Ltd.

---

### Emulator Internal: Command Line Binary
```sh
# file: enable_nativebridge.sh
cd $binfmt_misc_dir
if [ -e register ]; then
  echo ':arm_exe:M::\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x00\\x00\\x00\\x00\
\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x28::'"/system/lib/arm/houdini:P" > register
  echo ':arm_dyn:M::\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x00\\x00\\x00\\x00\
\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x28::'"/system/lib/arm/houdini:P" > register
fi

# Hook it
LD_PRELOAD=libinject_arm.so ./target_exe_arm
ptrace(x86) target_pid
ptrace(arm) target_pid
```

#### © DeNA Co., Ltd.

---

### Emulator Internal: Java Application
- **Is LD_PRELOAD useful in Java application hooking?**

#### Normal Startup
- **Zygote** → fork → **Application** → loop → startup request from Activity Manager → init houdini

#### Start with “wrap” System Property
- `setprop wrap.com.nevermoe.example LD_PRELOAD=libinject.so`
- **Zygote** → fork → **Shell** → loop → startup request from Activity Manager → exec shell → fork → execv(app_process) → **Application** → init houdini

#### © DeNA Co., Ltd.

---

### Emulator Internal: Java Application
- **runOnce()** — frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java
- **forkAndSpecialize()** — frameworks/base/core/java/com/android/internal/os/Zygote.java
- **ForkAndSpecializeCommon()** — frameworks/base/core/jni/com_android_internal_os_Zygote.cpp
- **runSelectLoop()** — frameworks/base/core/java/com/android/internal/os/ZygoteInit.java
- **handleChildProc()** — frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java
- **execApplication()** — frameworks/base/core/java/com/android/internal/os/WrapperInit.java

```java
public static void execApplication(String invokeWith, String niceName, 
    int targetSdkVersion, FileDescriptor pipeFd, String[] args) { 
    StringBuilder command = new StringBuilder(invokeWith); 
    command.append(" /system/bin/app_process /system/bin --application"); 
    if (niceName != null) { 
        command.append(" '--nice-name=").append(niceName).append("'"); 
    } 
    command.append(" com.android.internal.os.WrapperInit "); 
    command.append(pipeFd != null ? pipeFd.getInt$() : 0); 
    command.append(' '); 
    command.append(targetSdkVersion); 
    Zygote.appendQuotedShellArgs(command, args); 
    Zygote.execShell(command.toString()); 
}
```

#### © DeNA Co., Ltd.

---

### Emulator Internal: Java Application
- **Start with "wrap" property**
  ```sh
  /system/bin/sh -c LD_PRELOAD=libinject_arm.so \  
  /system/bin/app_process /system/bin --application \  
  '--nice-name=com.nevermoe.myapp' \ 
  com.android.internal.os.WrapperInit 48 21 \ 
  'android.app.ActivityThread'
  ```
- **Won't do the trick** (x86 vs. arm)

#### © DeNA Co., Ltd.

---

### Emulator Internal: Init Houdini
- **main()** — frameworks/base/cmds/app_process/app_main.cpp
- **AndroidRuntime::start()** — frameworks/base/core/jni/AndroidRuntime.cpp
- **ZygoteInit::main()** — frameworks/base/core/java/com/android/internal/os/ZygoteInit.java
- **JNI_CreateJavaVM()** — art/runtime/jni_internal.cc
- **Runtime::Start()** — art/runtime/runtime.cc
- **AndroidRuntime::startVm()** — frameworks/base/core/jni/AndroidRuntime.cpp

#### © DeNA Co., Ltd.

---

### Emulator Internal: Init Houdini
- **(Android 5.1.1) Zygote fork process**
  - **runOnce()** — frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java
  - **forkAndSpecialize()** — frameworks/base/core/java/com/android/internal/os/Zygote.java
  - **callPostForkChildHooks()** — frameworks/base/core/java/com/android/internal/os/Zygote.java
  - **postForkChild()** — libcore/dalvik/src/main/java/dalvik/system/ZygoteHooks.java
  - **ZygoteHooks_nativePostForkChild()** — art/runtime/native/dalvik_system_ZygoteHooks.cc
  - **ForkAndSpecializeCommon()** — frameworks/base/core/jni/com_android_internal_os_Zygote.cpp
  - **Runtime::DidForkFromZygote** — art/runtime/runtime.cc
  - **InitializeNativeBridge** — system/core/libnativebridge/native_bridge.cc
  - **InitializeNativeBridge** — art/runtime/native_bridge_art_interface.cc
  - **runSelectLoop()** — frameworks/base/core/java/com/android/internal/os/ZygoteInit.java
  - **handleChildProc()** — frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java
  - **zygoteInit()** — frameworks/base/core/java/com/android/internal/os/RuntimeInit.java

#### © DeNA Co., Ltd.

---

### Emulator Internal: Native Bridge Interfaces
- **Android 5.1.1**
  ```cpp
  struct NativeBridgeCallbacks {
      uint32_t version;
      bool (*initialize)(const NativeBridgeRuntimeCallbacks* runtime_cbs, const char* private_dir,
      void* (*loadLibrary)(const char* libpath, int flag);
      void* (*getTrampoline)(void* handle, const char* name, const char* shorty, uint32_t len);
      bool (*isSupported)(const char* libpath);
      const struct NativeBridgeRuntimeValues* (*getAppEnv)(const char* instruction_set);
      bool (*isCompatibleWith)(uint32_t bridge_version);
      NativeBridgeSignalHandlerFn (*getSignalHandler)(int signal);   
  };
  ```

- **libhoudini.so**
  ```assembly
  .data:00379198  NativeBridgeItf  dd 2
  .data:0037919C                   dd offset sub_1BD070
  .data:003791A0                   dd offset sub_1BCC80
  .data:003791A4                   dd offset sub_1BCD60
  .data:003791A8                   dd offset sub_1BCEC0
  .data:003791AC                   dd offset sub_1BCF40
  .data:003791B0                   dd offset sub_1BCF90
  .data:003791B4                   dd offset sub_1BCFE0
  ```

#### © DeNA Co., Ltd.

---

### Emulator Internal: Init Houdini
- **Android 4.4.2**
  - **dvmLoadNativeCode()**
  - **houdini::hookDlopen()**
  - **houdini::hookJniOnload()**
  - **houdiniHookInit()**
  - **file: platform/dalvik/vm/Native.cpp**
  - **hookDlopen()**
  - **houdiniHookInit()**

```cpp
hookDlopen() {
    v3 = dlopen((const char *)this, (int)a2);
    if ( v3 )
        return v3;
    else
        houdiniHookInit();
}

houdiniHookInit() {
    v15 = dword_4F2F84;
    *(_DWORD *)(v15 + 8) = dlsym(handle, "dvm2hdDlopen");
    v16 = dword_4F2F84;
    *(_DWORD *)(v16 + 12) = dlsym(handle, "dvm2hdDlsym");
    v17 = dword_4F2F84;
    *(_DWORD *)(v17 + 20) = dlsym(handle, "dvm2hdNeeded");
    v18 = dword_4F2F84;
    *(_DWORD *)(v18 + 16) = dlsym(handle, "dvm2hdNativeMethodHelper");
    v19 = dword_4F2F84;
    *(_DWORD *)(v19 + 24) = dlsym(handle, "androidrt2hdCreateActivity");
}
```

#### © DeNA Co., Ltd.

---

### Emulator Internal: Houdini License
- **Genymotion:**
  - No Houdini provided
- **Bluestacks:**
  - `lib3btrans.so` == `libhoudini.so`
- **NOX:**
  - Packed `libdvm.so`

#### © DeNA Co., Ltd.

---

### Hooking: Existing Hooking Frameworks
- **Xposed:**
  - Only Java Layer
  - Substitute `app_process` to load its own JAR file
- **Frida:**
  - Omnipotent
  - "I'm afraid NOX is unsupported. Please use a stock emulator or real device, or help us fix this. It's not a priority for me personally so unless somebody helps out, NOX support will not happen. :-/"
- **Substrate (on Android):**
  - Fake `liblog.so`
  - Outdated

#### © DeNA Co., Ltd.

---

### Hooking: Normal Approach
- **ptrace attach**
- **ptrace call dlopen**
- **hook function**

```
tracer
└── tracee
    ├── libA.so
    ├── libB.so
    └── libinject.so
        └── hook function
```

#### © DeNA Co., Ltd.

---

### Hooking on Emulator: Utilize Houdini
- **ptrace attach**
- **ptrace call dlopen**
- **open arm lib by Houdini**

```
tracer
└── tracee
    ├── lib_x86.so
    ├── lib_arm.so
    └── libinject_x86.so
        └── hook function
            └── libinject_arm.so
                └── open arm lib by Houdini
```

#### © DeNA Co., Ltd.

---

### Hooking on Emulator: Utilize Xposed
- **Java Class: NativeHook**
  ```java
  public class NativeHook { 
      static{ 
          System.load("/path/to/libinject_arm.so"); 
      } 
      public native static void initNativeHook(); 
  }
  ```

- **Hook Method:**
  ```java
  findAndHookMethod("android.app.Application", lpparam.classLoader, 
      "onCreate", new XC_MethodHook() { 
      @Override 
      protected void beforeHookedMethod(MethodHookParam param) throws 
      Throwable { 
          NativeHook.initNativeHook(); 
      } 
      @Override 
      protected void afterHookedMethod(MethodHookParam param) throws 
      Throwable {      
      } 
  });
  ```

#### © DeNA Co., Ltd.

---

### Demo
- **Method A: github.com/nevermoe/EHook**
  - Stable with ptrace
- **Method B: github.com/nevermoe/XEHook**
  - Early trace
  - Does not trigger anti-debug mechanism

```c
void real_init_func() { 
    hook_by_addr(&h1, "nb/libc.so", target_addr, hook_target); 
    hook_by_name(&h2, "nb/libc.so", "recvfrom", hook_recvfrom); 
}
```

#### Usage:
- **GitHub Repositories:**
  - [EHook](https://github.com/nevermoe/EHook)
  - [XEHook](https://github.com/nevermoe/XEHook)

#### © DeNA Co., Ltd.

---

### Conclusion
- **Mobile games are becoming more popular, and so is cheating.**
- **Cheating patterns change as techniques develop.**
- **Questions for the future:**
  - Should we cooperate with emulator vendors?
  - Advertising on emulators and targeting emulator users?
  - Restricting emulator users?
  - Putting emulator users on a dedicated server?
- **Let's see what changes will come.**

#### © DeNA Co., Ltd.

---

### Thank You!

#### © DeNA Co., Ltd.