to simply allow reading the information.
Making the checks practical is only part of the solution,
since as it stands now, the overhead of our proposed method
would be extremely high. The added cost of several proce-
dure calls, each with several exceptional condition checks,
would only be comparatively small for complex functions
with long running times. But it is more often the case that
the functions which need protection from exceptions are
short and time critical. As such, even a few hundred
nanoseconds for a full exception check might take an unac-
ceptably long time.
To reduce the run-time cost of data validation, we pro-
pose the use of a software-implemented validation check
cache (Figure 2). It is a direct mapped, memory resident,
software managed cache.
The address of the data
structure to be validated
is used to index into the
cache. To repeat the em-
phasis, even though it
looks like a typical hard-
ware
implementation
technique, this is a purely
software-implemented
approach.
e
a
r
e
r
u
20.00%
40.00%
60.00%
l
i
a
f
t
r
o
b
A
t
80.00%
0.00%
Reference
Verification
Module
Result
Lookup
Store
Clear
Module
Invalidate
Cache Structure in Memory
Figure 2. Software implemented direct mapped robustness
check cache.
tional) of data validation so that in the event of a cache hit,
the checks are completely bypassed. The operation is
straightforward. After a data structure is successfully vali-
dated its address is entered into the cache. Any modifica-
tion to the structure or memory block that would potentially
cause it to become exceptional causes an invalidation of the
cache entry. Although this invalidation is currently in-
serted by hand, one can envision a compile time system by
which invalidations would be inserted automatically. Any
time a block or structure to be validated has a cache entry,
the checks can be bypassed.
Managing the cache in software and having it memory
resident in the user process memory space results in config-
uration benefits. First, it allows the developer to determine
how large to make the cache allowing balancing perfor-
mance vs memory footprint. Additionally, it gives the de-
veloper
the opportunity to have multiple caches for
different purposes if desired.
Of course the primary benefit of a completely software
solution is that it requires no hardware to operate, is porta-
ble, and can be implemented on any hardware platform. In
the past, commercial processor vendors have exhibited a re-
sistance to adding hardware features solely for the purpose
of improving software reliability. Previous research in the
area of detection of memory exceptions that require hard-
ware has languished unimplemented by the processor com-
munity.
Robustness of C Math Library
Robust Library
Stock Library
h
n
ata
s
co
sh
co
erf
xp
e
or
flo
m
a
g
a
m
g
lo
sin
h
sin
sqrt
h
n
ta
The cache is used to
exploit the temporal lo-
cality of data accesses by
caching the results (ex-
excep-
ceptional/non
s
co
a
Function
sh
co
a
h
sin
a
n
ata
Figure 3. Measure robustness of math libraries before (stock) and after (robust)
treatment. The robust version of the library has no measurable robustness failures.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:20:55 UTC from IEEE Xplore.  Restrictions apply. 
n
w
o
d
w
o
S
l
1.1
1.05
1
0.95
0.9
0.85
acos()
acos()
acosh()
asin h()
Slowdown Relative to Stock, 1M iterations
Stock
Robust
ata n()
ata n h()
cos()
cosh()
sin()
sin h()
ta n()
ta n h()
erf()
m a()
lo g()
sqrt()
flo or()
exp()
g a m
Figure 4. Slowdown of robust math library normalized to stock library performance.
Function
memchr
memcpy
memcmp
memset
memmove
sem_init
sem_destroy
sem_getvalue
sem_post
sem_wait
sem_trywait
Table 1. Average
overhead (in ns) for
hardening Linux.
22.3
2.1
7.1
4.9
5.7
10.9
7.3
9.8
7.4
6.2
6.4
Average
Overhead
performance of the hardened libraries normalized to that of
the stock libraries.
Performance was measured by
iteratively calling each function with valid data 1,000,000
times. The results reported are the average
of 10 complete runs. Because the math li-
braries are largely stateless, the use of a
check cache was forgone, and all checks
were performed for each function invoca-
tion.
In a few instances, the robust libraries
performance was better than stock. These
are instances, most notably in cos(), where
the pre-existing tests for exception condi-
tions could be folded into the added checks
and made more efficient.
Our next investigation was the analysis
and hardening of the Safe Fast I/O library
[25]. The library has been retreated with
techniques developed since [7] to remove all
detectable robustness failures. Summary
performance results are shown in Figure 5.
The average failure rate of the methods
within the untreated SFIO library was 4.5%.
The third system we investigated was ele-
ments of the Linux API. Although the LINUX developers
have been systematically removing robustness failures over
the course of the last several releases, a few critical areas
such as memory manipulation and process synchronization
Slowdown Normalized to
Untreated SFIO
Original SFIO
Robust SFIO
STDIO
4. Experimental Results
As a result of the feedback from develop-
ers, we choose to look at several software sys-
tems to determine if the robustness failures
could be removed in a practical fashion with-
out excessive sacrifices in performance.
This research occurred over the course of
several years, and thus some of the experi-
ments were carried out on systems which are
currently out of date. However, the fact that
even older systems could be improved with
these techniques indicates that there has been
no sudden reversal of situation that makes this
approach viable, but rather a steady accumula-
tion of hardware capabilities over time. The
important point to be made is that the tech-
niques presented are a general, practical appli-
cability of
a methodology to improve
robustness while yielding high performance,
and not simply improvements of any specific
module under treatment.
During our initial investigations with Ballista, we no-
ticed a number of robustness failures in the math libraries in
FreeBSD [24]. As an initial study, we chose to address
these issues and determine how robust the libraries could be
made, and at what
cost. The perfor-
the li-
mance of
braries
was
measured
a
Pentium-133 with
64 MB of main
memory
running
FreeBSD 3.0
n
w
o
d
w
o
S
on
l
1.40
1.30
1.20
1.10
1.00
0.90
0.80
0.70
Figure 3 shows
the measured ro-
bustness
the
math library before
and after treatment.
Figure 4 shows the
of
w rite
w rite 7 5 7
re a d
re a d 7 5 7
revrd
revrd 7 5 7
co pyrw
se ekrw
p utc
g etc
Figure 5. Performance of IO Benchmarks from [25]. Results represent slowdown
normalized to untreated SFIO.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:20:55 UTC from IEEE Xplore.  Restrictions apply. 
Failure rates for memory/process synchronization methods
75.2 75.2
57.8
31.3
Before Treatment After Treatment
59.5 64.7
64.7
35.3
41.2
0
0
7.3
0
0
0
0
0
0
0
)
%
(
e
t
a
R
e
r
u
l
i
80
60
40
20
0
y
p
m e m m o
e
v
m e m s
e t
s
e m _ i n it
e m _
s
e
s tr o
e m _
d
s
y
g
e t v