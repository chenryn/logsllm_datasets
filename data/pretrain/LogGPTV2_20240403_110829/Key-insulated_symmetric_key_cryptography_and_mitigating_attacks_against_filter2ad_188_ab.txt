• Device Key-Update. At the beginning of period t (1 ≤
t ≤ N ), Alice’s device sends fx3 (t) ⊕ fx4 (t) to her
computer, and Bob’s device sends fx2 (t) ⊕ fx4 (t) to
his computer.
• Computer Key-Update. The secret key for period t is
SKt = fx1 (t) ⊕ fx2 (t) ⊕ fx3 (t) ⊕ fx4 (t), which can be
derived by Alice’s computer and Bob’s computer.
• Encryption. For period t, set ESKt (t, M ) = ESKt (M ).
• Decryption. For period t, set DSKt (ht, Ci) = DSKt (C).
Theorem 1. Suppose (G, E, D) is a secure symmetric key
encryption scheme, and {fK } is a secure pseudorandom func-
tion family. Then, Π is (N − 1, N )-key-insulated with secure
key updates.
2.4 Integrating Key-Insulated Scheme with TVD
As illustrated in Figure 1(a), a TVD allows a customer
(Alice) to use multiple VMs running on top of multiple phys-
ical computers in the cloud. The communications between
the applications running in the same TVD should be pro-
tected from the environment outside the TVD.
As illustrated in Figure 1(b), where we consider two VMs
running on top of the same Virtual Machine Monitor (VMM)
for the sake of simplicity, key-insulated symmetric key cryp-
tography can mitigate the repeated exposures of secret keys.
More speciﬁcally, we can let each VM hold a master key
(called computer master key), and let the VMM hold a set of
master keys (called device master keys). At the beginning of
each time period, a VM receives from the device key-update
software module a partial secret key, which is derived from
the device master key. The computer key-update module will
derive a period secret key from the partial secret key and the
computer master key. The period secret key is the symmet-
ric key for protecting the communications between the two
VMs that belong to the same TVD. As a proof of concept, we
report our implementation of key-insulated symmetric key
scheme in the KVM environment as well as its performance
measurements. Since the diﬀerence between standard sym-
metric key cryptography and key-insulated symmetric key
cryptography is the key update operation at the beginning
of each time period, the performance metric we consider is
the key update time, which is dependent upon the number
of VMs one will communicate with, and is dependent upon
the number of VMs running on top of a single physical com-
puter.
As a proof of concept, we implemented the key-insulated
symmetric key scheme in the KVM environment. Our ex-
perimental system was a desktop computer. The hardware
was two x86 processors at 2.5 GHz with 2GB memory. The
Alice’s Trusted Virtual Domain (TVD)
Bob’s TVD
VMa1
VMa2
VM11
VM12
VM21
VM22
VMb1
VMb2
VMM
Hardware 
w/ TPM
VMM
VMM
Hardware w/ TPM
Hardware w/ TPM
(a) TVD in cloud environment
Secure Communication
VMM
Hardware 
w/ TPM
Message
Message
Symmetric Key 
En/Decryption
Symmetric Key 
En/Decryption
Period Secret Key12
Period Secret Key12
Computer 
Master Key1
Computer 
Master Key2
Computer 
Key-Update
Computer 
Key-Update
VM1
VM2
Communication Between VMs and VMM 
Partial Secret Key1
Partial Secret Key2
Device
Key-Update
Device Master Key1
Device Master Key2
VMM
(b) TVD with key-insulated symmetric key encryption
Figure 1: Key-insulated symmetric key cryptogra-
phy and TVD
Secure Communication
Period Secret Key
Period Secret Key
Computer 
Master Key
Computer 
Master Key
Computer 
Key-Update
Virtual 
CDROM
Virtual
CD
Computer 
Key-Update
Virtual 
CDROM
Virtual
CD
VM1
VM2
Partial Secret Key
Device Key-Update
Device Master Key
Host OS + KVM
(a) Implementation approach I
Secure Communication
Period Secret Key
Period Secret Key
Computer 
Master Key
Computer 
Master Key
Computer 
Key-Update
Computer 
Key-Update
VM1
VM2
Partial Secret Key
Device Key-Update
Host OS was Ubuntu 11.10. The guest OS was Ubuntu
10.04. The device in our formal model was implemented as
a small software module in KVM, called Device Key-Update,
which implements the Device Key-Update algorithm. Simi-
larly, we implemented a Computer Key-Update module in the
VM. We choose to implement the device in KVM because
we can modify the source code. Note that TPM does not
allow one to run any third-party code.
There are two approaches to realize key-insulation in KVM.
The diﬀerence between the two approaches is how the Device
Key-Update module and the Computer Key-Update module
communicate. Figure 2(a) demonstrates approach I, which
utilizes the virtual CDROM mechanism. Speciﬁcally, the
Device Key-Update module in KVM will write the key up-
dates to a virtual CD (in the format of ISO ﬁle), and then
“insert” the virtual CD into the CDROM device of the re-
spective VM. Figure 2(b) demonstrates approach II, which
utilizes KVM’s VirtioSerial feature that further allows the
Computer Key-Update module to acknowledge the receiving
of key updates from the Device Key-Update module.
Since the secure communications between VMs using the
period secret keys are the same as the standard use of sym-
metric key schemes, we want to demonstrate that the key
update operations do not incur any signiﬁcant performance
cost. This is justiﬁed by the fact that the cost for evalu-
ating pseudorandom functions, for which we used AES-128,
can be almost ignored in practice. The most signiﬁcant part
of the cost is the communication from the Device Key-Update
module to the Computer Key-Update module. Since one VM
Device Master Key
Host OS + KVM
(b) Implementation approach II
Figure 2: Two approaches for implementing key-
insulated symmetric key schemes
may need to conduct secure communications with multiple
or many other VMs, we measure the performance impact of
the number of key updates (i.e., the number of VMs with
which one VM communicates). Since a VMM needs to sup-
port multiple VMs simultaneously, we measure the perfor-
mance impact of the number of VMs running on top of a
physical machine.
Figure 3(a) compares the communication costs of the two
approaches with respect to the number of key updates. In
the experiments, we ran a single VM on top of KVM. Sup-
pose one VM needs to conduct secure communications with
up to 1,200 other VMs, which is possible with the TVD ab-
straction mentioned in the Introduction, the Computer Key-
Update module in the VM needs to receive up to 1,200 key
updates from the Device Key-Update module in the KVM. It
is clear that Approach II is two orders of magnitude faster
than Approach I. Because Approach II incurs very small
communication cost, we also plotted the zoomed-in version
of the curve. It is interesting to note that the communica-
tion cost of Approach I is roughly independent of the num-
ber of key updates; whereas, the communication cost of Ap-
400
300
10
)
s
m
(
e
m
T
i
200
100
0
0
5
0
0
1500
Approach I
Approach II
)
s
m
(
e
m
T
i
1000
500
200
200
400
400
600
600
800
800
Number of Keys Transferred
1000 1200
1000 1200
0
1
2
3
Number of VMs
Approach I
Approach II
4
(a) Impact of number of keys
(b) Impact of number of VMs
1. Both Alice’s computer and Bob’s computer com-
pute and hold SKt = fX1,t−1 (1) ⊕ fX2,t−1 (1) ⊕
fX3,t−1 (1) ⊕ fX4,t−1 (1), which is the secret key
for time period t.
2. Alice’s computer computes and holds the pair of
secrets (X1,t, X2,t), erases (SKt−1; X1,t−1, X2,t−1);
Bob’s computer computes and holds the pair of
secrets (X1,t, X3,t), erases (SKt−1; X1,t−1, X3,t−1).
Recall that Xi,t = fXi,t−1 (0).
Figure 3: Performance evaluation
• Encryption. For period t, set ESKt (t, M ) = ESKt (M ).
proach II is proportional to the number of key updates. This
phenomenon is inherent to the communication mechanisms.
Figure 3(b) compares the communication costs of the two
approaches with respect to the number of VMs running on
top of a single KVM. In our experiments, we ran 1, 2, 3, 4
VMs on the aforementioned desktop hardware platform, re-
spectively. In any case, each VM was allocated with 256MB
memory and ran Ubuntu 10.04. The curves correspond to
that each VM receives 1,200 key updates from the Device
Key-Update module.
In either case, we observe that the
communication cost is roughly proportional to the number
of VMs running on the hardware platform.
In summary,
we observe that Approach II is much more eﬃcient than
Approach I.
2.5 Augmented Key-Insulation Scheme
Augmented key-insulated symmetric key scheme oﬀers a
stronger security guarantee under certain circumstances. Its
deployment and device-to-computer communication cost are
essentially the same as the ones of the above key-insulated
symmetric key scheme, except that the key update algo-
rithms need to evaluate two more pseudorandom functions
(e.g., AES-128). This explains why we do not repeat the
implementation part. Let (G, E, D) be a secure symmet-
ric key cryptosystem. The augmented key-insulated sym-
metric key scheme for secure two party communication is
speciﬁed below. A key chain speciﬁed by Xi,0 is deﬁned as
Xi,t = fXi,t−1 (0) for 1 ≤ t ≤ N .
• Key Generation. This algorithm is executed in a se-
cure environment. Suppose {Xi,0}1≤i≤4 is a set of
secrets uniformly chosen from {0, 1}k. Alice stores
(X1,0, X2,0) on her computer, and (X3,0, X4,0) on her
device; Bob stores (X1,0, X3,0) on his computer, and
(X2,0, X4,0) on his device.
• Device Key-Update. At the beginning of time period t
(1 ≤ t ≤ N ), Alice’s device holds (X3,t−1, X4,t−1), and
Bob’s device holds (X2,t−1, X4,t−1). This algorithm
includes the following steps.
1. Alice’s device sends fX3,t−1 (1) ⊕ fX4,t−1 (1) to her
computer; Bob’s device sends fX2,t−1 (1)⊕fX4,t−1 (1)
to his computer.
2. Alice’s device computes and holds (X3,t, X4,t) and
erases (X3,t−1, X4,t−1); Bob’s device computes and
holds (X2,t, X4,t) and erases (X2,t−1, X4,t−1).
• Computer Key-Update. At the beginning of period t,
where 1 ≤ t ≤ N , Alice’s computer holds secrets
(SKt−1; X1,t−1, X2,t−1); Bob’s computer holds secrets
(SKt−1; X1,t−1, X3,t−1).
• Decryption. for period t, set DSKt (ht, Ci) = DSKt (C).
Theorem 2. If (G, E, D) is a secure symmetric encryp-
tion scheme and {fK } is a secure pseudorandom function
family, then Π is an augmented key-insulated symmetric key
scheme.
3. CONCLUSION
We presented the deﬁnition and constructions of key-insulated
symmetric key schemes, and reported an implementation in
the KVM environment.
Acknowledgement
We thank Jonathan Katz for discussions and suggestions.
4. REFERENCES
[1] R. Anderson, Invited Lecture, ACM CCS’97.
[2] M. Bellare and S. Miner, A Forward-Secure Digital
Signature Scheme, Crypto’99.
[3] M. Bellare and B. Yee. Forward-Security in
Private-Key Cryptography. RSA-CT’03.
[4] Y. Desmedt and Y. Frankel. Threshold Cryptosystems.
CRYPTO’89, pp 307-315.
[5] Y. Dodis, M. Franklin, J. Katz, A. Miyajo, and M.
Yung. Intrusion-Resilient Public-Key Encryption.
RSA-CT’03.
[6] Y. Dodis, M. Franklin, J. Katz, A. Miyajo, and M.
Yung. A Generic Construction for Intrusion-Resilient
Public-Key Encryption. RSA-CT’04.
[7] Y. Dodis, J. Katz, S. Xu, and M. Yung. Key-Insulated
Public Key Cryptosystems. Eurocrypt’02.
[8] Y. Dodis, J. Katz, S. Xu, and M. Yung. Key-Insulated
Signature Schemes. PKC’03.
[9] O. Goldreich, S. Goldwasser, and S. Micali, How to
Construct Random Functions, J. ACM, Vol. 33, No. 4,
1986, pp 210-217.
[10] G. Itkis and L. Reyzin. SiBIR: Signer-Base
Intrusion-Resilient Signatures. Crypto’02.
[11] J. Griﬃn, T. Jaeger, R. Perez, R. Sailer, L. van Doorn
and R. C-aceres, Trusted Virtual Domains: Toward
Secure Distributed Services, Proc. 2005 IEEE
Workshop on Hot Topics in System Dependability.
[12] J. Katz and M. Yung, Complete Characterization of
Security Notions for Probabilistic Private-Key
Encryption, STOC’00.
[13] B. Yee. Using secure coprocessors. PhD thesis,
Carnegie Mellon University, 1994.