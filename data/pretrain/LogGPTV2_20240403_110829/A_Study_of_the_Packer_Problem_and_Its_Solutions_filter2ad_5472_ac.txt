modiﬁes page protection attributes in ways that may diﬀer from the intentions
of these unpackers, sometimes it triggers their anti-emulation techniques and
results in program termination. For example, one unpacker detects if a page
is writeable by passing a buﬀer that is supposedly writeable and Justin marks
as non-writeable into the kernel as a system call argument. When the kernel
attempts to write to the buﬀer, a kernel-level protection exception occurs and
the program terminates. Justin never has a chance to handle this exception
because it is a kernel-level exception and never gets delivered to the user level.
To solve this problem, Justin intercepts this kernel-level protection exception,
modiﬁes the page protection attribute appropriately to allow it to continue, and
changes it back before the system call returns.
When Justin detects the end of unpacking, it treats the target address of the
control transfer instruction as the entry point of the embedded binary. However,
some packers obfuscate the original entry point by replacing the ﬁrst several
instructions at the main entry point with a jump instruction, say Y, to a separate
piece of code, which contains the original entry point instructions and a jump
back to the instruction following Y. Because an unpacker can only safely replace
the ﬁrst several instructions, Justin can single-step the ﬁrst several instructions
at the supposedly entry point to speciﬁcally detect this evasion technique.
Some packers signiﬁcantly transform an input binary before packing it. In
general, these transformations are not always safe, because it requires 100%
disassembly accuracy and coverage, which is generally not possible. Therefore,
although these packers may evade signature-based AV scanners after Justin cor-
rectly produces the unpacked binary, we generally consider these packers to be
too unreliable to be a real threat.
4 Evaluation
4.1 Eﬀectiveness of Justin
To assess the eﬀectiveness of Justin, we collect a set of known malware samples
that are not packed by any known packers, then use diﬀerent packers to pack
A Study of the Packer Problem and Its Solutions
109
Table 1. Eﬀectiveness comparison between Justin and manually created unpackers
from SymPack when they are used together with an AV scanner
Packers Packed Justin
Justin
Justin
SymPack
Justin
Unpack Detection Detection Detection Detection
Failure Failure
Improvement
ASPack
BeroPacker
Exe32Pack
Mew
PE-Pack
UPack
182
178
176
180
176
181
4
0
32
1
1
1
0
4
0
8
0
5
178
174
144
171
175
175
182
161
176
171
171
173
-4
13
-32
0
4
2
them, and run the packed binaries under Justin and Symantec’s AV scanner to
see if they together can detect these samples. As a comparison, we used the same
procedure but replaced Justin with Symantec’s SymPack library, which contains
a set of unpacker routines created manually by reverse engineering the logic
of known packer programs. This experiment tests if Justin can unpack packed
binaries to the extent that AV signatures developed for non-packed versions of
malware samples still work.
There are totally 183 malware samples used in this study. As shown in Table 1,
most packers cannot pack every malware program in the test suite successfully.
So only successfully packed malware programs are unpacked. The number of
successfully packed malware programs for each packer is listed in Column 2 of
Table 1.
Justin cannot unpack certain packed samples. By manually examining each
failure case, we identify two reasons. First, some samples simply cannot run any
more after being packed. Being a run-time detection technology, Justin cannot
unpack something that does not run. From malware detection’s standpoint, these
packed samples are no longer a threat as they won’t be able to cause any harm.
Second, the packer Exe32Pack sometimes doesn’t really modify the original bi-
nary when it produces a packed binary. For these packed binaries, no unpacking
occurs at run time and Justin does not have a chance to step in and trigger the
AV scan. From malware detection’s standpoint, these packed samples are not
a problem either. The original program in these samples are in plain-text and
AV scanner can detect them without Justin. The number of packed malware
programs that Justin fails to unpack is listed in Column 3 of Table 1.
Among those malware samples that Justin successfully unpacks, not all of
them can be detected. By manually analyzing these undetected samples, we ﬁnd
that most detection failures arise because signatures developed for non-packed
versions of malware programs do not work for their unpacked versions. Although
Justin can detect the end of unpacking, the unpacked result it produces is not
exactly the same as the original program. Because some AV signatures are too
stringent to accommodate these minor diﬀerences, they fail to detect Justin’s
outputs. For the same reasons, none of these undetected samples cannot be
110
F. Guo, P. Ferrie, and T.-c. Chiueh
detected by SymPack either. The number of unpacked but undetected samples
is listed in Column 4 of Table 1.
Overall, Justin’s detection rate (Column 5) is slightly higher than SymPack’s
(Column 6) among the malware samples that can be successfully unpacked,
because Justin relies on the unpackers embedded in the packed binaries, which
are generally more reliable than the manually created unpackers in SymPack, to
capture the execution state of a malware before it starts to run.
To test Justin’s generic unpacking capability, we select a set of 13 packers that
are not supported by SymPack. Justin can successfully unpack binaries packed
by 12 out of these 13 packers. The packer whose packed binaries Justin cannot
unpack detects Justin’s API call interception and terminates the packed binary’s
execution without unpacking the original program. We also test a set of malware
samples packed by a packer that is not well supported by SymPack against Justin
and an AV scanner. The number of these packed malware samples that can be
detected by Justin/AV scanner is almost twice the number of SymPack/AV
scanner.
To summarize, as long as a packed binary can run and requires unpacking at
run time, Justin can unpack it successfully. Moreover, for the same malware sam-
ples packed by packers supported in SymPack, the unpacked outputs produced
by Justin are more amenable to AV scanning than those produced by SymPack,
thus resulting in a higher detection rate than SymPack. Finally, Justin is able
to detect twice as many packed malware samples than SymPack when they are
packed by packers not supported in SymPack.
4.2 Number of Spurious End-of-Unpacking Detections
When Justin detects an end of unpacking during a packed binary’s execution,
it invokes the AV scanner to scan the process image at that instant. The main
heuristic that Justin uses to detect the end of unpacking is to monitor the ﬁrst
control transfer to a dirty page (called Dirty Page Execution). Unfortunately
this heuristic triggers many spurious end-of-unpacking detections for binaries
packed by certain packers and thus incurs a signiﬁcant AV scanning overhead
even for goodware packed by these packers. The same observation was made by
Martignoni et al. [18]. Their solution to this problem is to defer AV scanning
until the ﬁrst “dangerous” system call. Even though this technique drastically
decreases the number of spurious end-of-unpacking detections, it also loses the
entry-point information, which plays an important role for commercial signature-
based AV scanners.
Instead, Justin incorporates three addition heuristics to reduce the number of
spurious end-of-unpacking detections. Unpacker Memory Avoidance limits the
Dirty Page Execution technique to pages that are not likely to contain the un-
packer code. Stack Pointer Check checks if the current stack pointer at the time
of a ﬁrst control transfer to a dirty page during a packed binary’s run is the same
as that at the very start of the run. Command-Line Argument Access checks if
the command-line arguments supplied with a packed binary’s run is moved to
the stack at the time of a ﬁrst control transfer to a dirty page. Each of these
A Study of the Packer Problem and Its Solutions
111
Table 2. Comparison among four heuristics in their eﬀectiveness to detect the end
of unpacking, as measured by the number of times it thinks the packed binary run
reaches the end of unpacking. The last three heuristics, Unpacker Memory Avoidance,
Stack Pointer Check and Command-Line Argument Detection, are used together with
the ﬁrst heuristic, which monitors ﬁrst control transfers to dirty pages.
Packers
ACProtect
ASPack
ASProtect
Exe32Pack
eXPressor
FSG
Molebox
NsPack
Obsidium
PECompact
UPack
UPX
WWPack
Dirty Unpacker Stack Command-Line
Page Memory Pointer Argument
Execution Avoidance Check
Access
186
96
1633
394
15
12
3707
19
not work
16
442084
11
12
11
12
12
11
11
12
11
11
14
12
12
11
11
1
2
12
1
1
1
1
1
4
2
2
1
1
2
3
3
2
2
2
2
2
6
3
3