        int b;
        int c;
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        printf("func2, a = %d, b = %d, c = %d\n", a, b, c);
        printf("func2, rpb = %lx\n", rbp);
        printf("func2, rsp = %lx\n", rsp);
    }
    int main(void)
    {
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        printf("main, rpb = %lx\n", rbp);
        printf("main, rsp = %lx\n", rsp);
        func1();
        func2();
        return (0);
    }
### 获取变量的值
在之前的发现中，我们知道变量是通过rbp - 0xX的方式引用的：
  * a is at rbp - 0xc
  * b is at rbp - 0x8
  * c is at rbp - 0x4
因此，为了获得这些变量的值，我们需要解引用rbp。对于变量a：
  * 将变量rbp转换为char *：（char *）rbp
  * 减去正确的字节数以获取变量在内存中的地址：（char *）rbp - 0xc
  * 再次将它转换为指向int的指针，因为a是int类型变量：（int *）（（（char *）rbp） - 0xc）
  * 解引用以获取此地址内存中的值：*（int *）（（（char *）rbp） - 0xc）
### 保存的rbp值
查看上图，当前rbp直接指向保存的rbp，因此我们只需将变量rbp转换为指向unsigned long int的指针并解引用它：*（unsigned
long int *）rbp。
### 返回地址值
返回地址值就在栈上保存的先前rbp之前。rbp是8个字节长，所以我们只需要在rbp的当前值上加8，就获得该返回值在栈上的地址。这是我们的做法：
  * 将变量rbp转换为char *：（char *）rbp
  * 将8加到此值上：（（char *）rbp + 8）
  * 将它转换为指向unsigned long int的指针:( unsigned long int *）（（char *）rbp + 8）
  * 解引用以获取此地址内存中的值：*（unsigned long int *）（（char *）rbp + 8）
### 程序输出
    holberton$ gcc 2-main.c && ./a.out 
    main, rpb = 7ffc78e71b70
    main, rsp = 7ffc78e71b70
    a = 98, b = 972, c = 1070
    func1, rpb = 7ffc78e71b60
    func1, rsp = 7ffc78e71b50
    func1, a = 98
    func1, b = 972
    func1, c = 1070
    func1, previous rbp value = 7ffc78e71b70
    func1, return address value = 400697
    func2, a = 98, b = 972, c = 1070
    func2, rpb = 7ffc78e71b60
    func2, rsp = 7ffc78e71b50
    holberton$
可以看到：
  * 从func1我们可以通过rbp正确访问所有变量
  * 从func1我们可以得到main函数的rbp
  * 证实了func1和func2确实具有相同的rbp和rsp值
  * rsp和rbp之间的差异是0x10，如汇编代码中所示（sub rsp，0x10）
  * 在main函数中，rsp == rbp，因为main函数中没有局部变量
func1的返回地址是 **0x400697**
。让我们通过反汇编程序来验证一下。如果我们是正确的，那么这应该是在main函数中调用func1之后的指令的地址。
    holberton$ objdump -d -j .text -M intel | less
    0000000000400664 :
      400664:       55                      push   rbp
      400665:       48 89 e5                mov    rbp,rsp
      400668:       48 89 e8                mov    rax,rbp
      40066b:       48 89 c6                mov    rsi,rax
      40066e:       bf 3b 08 40 00          mov    edi,0x40083b
      400673:       b8 00 00 00 00          mov    eax,0x0
      400678:       e8 93 fd ff ff          call   400410 
      40067d:       48 89 e0                mov    rax,rsp
      400680:       48 89 c6                mov    rsi,rax
      400683:       bf 4c 08 40 00          mov    edi,0x40084c
      400688:       b8 00 00 00 00          mov    eax,0x0
      40068d:       e8 7e fd ff ff          call   400410 
      400692:       e8 96 fe ff ff          call   40052d 
      400697:       e8 7a ff ff ff          call   400616 
      40069c:       b8 00 00 00 00          mov    eax,0x0
      4006a1:       5d                      pop    rbp
      4006a2:       c3                      ret    
      4006a3:       66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]
      4006aa:       00 00 00 
      4006ad:       0f 1f 00                nop    DWORD PTR [rax]
yes! \o/
## Hack the stack!
既然我们知道了返回地址在栈上的位置，那么我们修改这个值会怎么样？
我们是否可以改变程序的流程并使func1返回到其他地方？在程序中添加一个名为bye的新函数（3-main.c）：
    #include 
    #include 
    void bye(void)
    {
        printf("[x] I am in the function bye!\n");
        exit(98);
    }
    void func1(void)
    {
        int a;
        int b;
        int c;
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        a = 98;
        b = 972;
        c = a + b;
        printf("a = %d, b = %d, c = %d\n", a, b, c);
        printf("func1, rpb = %lx\n", rbp);
        printf("func1, rsp = %lx\n", rsp);
        printf("func1, a = %d\n", *(int *)(((char *)rbp) - 0xc) );
        printf("func1, b = %d\n", *(int *)(((char *)rbp) - 0x8) );
        printf("func1, c = %d\n", *(int *)(((char *)rbp) - 0x4) );
        printf("func1, previous rbp value = %lx\n", *(unsigned long int *)rbp );
        printf("func1, return address value = %lx\n", *(unsigned long int *)((char *)rbp + 8) );
    }
    void func2(void)
    {
        int a;
        int b;
        int c;
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        printf("func2, a = %d, b = %d, c = %d\n", a, b, c);
        printf("func2, rpb = %lx\n", rbp);
        printf("func2, rsp = %lx\n", rsp);
    }
    int main(void)
    {
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        printf("main, rpb = %lx\n", rbp);
        printf("main, rsp = %lx\n", rsp);
        func1();
        func2();
        return (0);
    }
让我们看看这个函数的代码位于哪里：
    holberton$ gcc 3-main.c && objdump -d -j .text -M intel | less
    00000000004005bd :
      4005bd:       55                      push   rbp
      4005be:       48 89 e5                mov    rbp,rsp
      4005c1:       bf d8 07 40 00          mov    edi,0x4007d8
      4005c6:       e8 b5 fe ff ff          call   400480 
      4005cb:       bf 62 00 00 00          mov    edi,0x62
      4005d0:       e8 eb fe ff ff          call   4004c0 
现在让我们在func1函数中替换栈上的返回地址为bye函数的起始地址， **4005bd** （4-main.c）：
    #include 
    #include 
    void bye(void)
    {
        printf("[x] I am in the function bye!\n");
        exit(98);
    }
    void func1(void)
    {
        int a;
        int b;
        int c;
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        a = 98;
        b = 972;
        c = a + b;
        printf("a = %d, b = %d, c = %d\n", a, b, c);
        printf("func1, rpb = %lx\n", rbp);
        printf("func1, rsp = %lx\n", rsp);
        printf("func1, a = %d\n", *(int *)(((char *)rbp) - 0xc) );
        printf("func1, b = %d\n", *(int *)(((char *)rbp) - 0x8) );
        printf("func1, c = %d\n", *(int *)(((char *)rbp) - 0x4) );
        printf("func1, previous rbp value = %lx\n", *(unsigned long int *)rbp );
        printf("func1, return address value = %lx\n", *(unsigned long int *)((char *)rbp + 8) );
        /* hack the stack! */
        *(unsigned long int *)((char *)rbp + 8) = 0x4005bd;
    }
    void func2(void)
    {
        int a;
        int b;
        int c;
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        printf("func2, a = %d, b = %d, c = %d\n", a, b, c);
        printf("func2, rpb = %lx\n", rbp);
        printf("func2, rsp = %lx\n", rsp);
    }
    int main(void)
    {
        register long rsp asm ("rsp");
        register long rbp asm ("rbp");
        printf("main, rpb = %lx\n", rbp);
        printf("main, rsp = %lx\n", rsp);
        func1();
        func2();
        return (0);
    }
    holberton$ gcc 4-main.c && ./a.out
    main, rpb = 7fff62ef1b60
    main, rsp = 7fff62ef1b60
    a = 98, b = 972, c = 1070
    func1, rpb = 7fff62ef1b50
    func1, rsp = 7fff62ef1b40
    func1, a = 98
    func1, b = 972
    func1, c = 1070
    func1, previous rbp value = 7fff62ef1b60
    func1, return address value = 40074d
    [x] I am in the function bye!
    holberton$ echo $?
    98
    holberton$
bye函数成功执行了，并没有显示调用它:)