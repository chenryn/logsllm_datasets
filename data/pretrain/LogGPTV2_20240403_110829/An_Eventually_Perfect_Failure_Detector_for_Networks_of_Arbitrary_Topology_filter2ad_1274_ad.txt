p4
(p1, 2)
Figure 6. Graph G at time t3
Then, when neighbors of p1 suspect it, they do not include
in their bags permanently pairs labeled with p1. Thus, the
T T Lp1 stored in p4, p5 and p6 expires, and when one of
these processes receives a pair labeled with p1, it takes
this new value (second condition in line 30). A possible
execution is illustrated in Figure 5. At time t2, the longest
T T Lp1 that a process could have stored is n−2 = 7−2 = 5.
After pair (p1, 5) expires, the largest T T Lp1 that a process
can have stored is n − 3, as illustrated in Figure 6. Thus,
in the graph of Figure 7, processes p5, p6 and p7 keep a
T T Lp1 = 1, which means that they do not include in their
bags pairs labeled with p1. Therefore, p4 suspects p1, so
even if its T T Lp1 is greater than 1 it does not include a
∗ no process sends
pair labeled with p1. Then, by time t
271
(p1, 6)
(p1, 1)
p3
p2
(p1, 6)
p6
(p1, 1)
p5
(p1, 1)
p7
p4
(p1, 2)
Figure 7. Graph G at time t∗
The following lemma proves that the TTL of a crashed
process eventually disappears.
Lemma 8. After a process p crashes, there is a time t1 such
that for all t > t1 correct neighbors of p do not include in
their bags pairs labeled with p.
Proof: By Lemma 4, only processes that are neighbors
of p can have T T Lp = n − 1. Let td be the time where
the last message from p arrives to a correct neighboring
process q. By Lemma 6, there is a time t1 ≥ td when all
the correct neighbors of p suspect it. Therefore, for every
t ≥ t1, neighbors of p do not include any pair labeled with
p in their bags (line 13).
Observe that neighbors are the only processes that can
include the pair (p, n − 2) in their bags, because they have
set T T Lp = n − 1 permanently.
Lemma 9. After a process p fails, for every 1  0 (condition
in line 13). In case that q suspects p, this Lemma is true
because the ﬁrst condition in line 13 is not true. Thus we
have to prove the case where q does not suspect p. There
are two cases.
Case 1: k + 1 (cid:5)= n− 1. By the inductive hypothesis, there
is a time tk after which processes having T T Lp = n − k
do not send the pair (p, n − (k + 1)). Then, the T T Lp =
n − (k + 1) expires in every process in S k+1. When a HB
message arrives with a pair (p, m), only the second condition
of line 30 can be true, namely, a smaller T T Lp is stored.
This value is smaller than n − (k + 1) since by inductive
hypothesis, the maximum T T Lp that a process can have
stored is n − (k + 1). Therefore, at time tk+1 processes
in S k+1 do not include the pair (p, n − (k + 2)) and the
maximum T T Lp that a process can have stored is n−(k+2).
Case 2: k + 1 = n − 1. It is important to note that if a
process q has T T Lq[p] = 1 at any time, the second condition
in line 13 is not true, so q does not include in its bag a pair
labeled with p. Therefore, after time tk+1, correct processes
having T T Lp = 1 do not send a message to its neighbors
with a pair labeled with p.
Lemma 10. After some process p crashes, there is a time
∗
∗ after which every correct process in V (G(t
)) does not
t
send a pair labeled with p.
Proof: This lemma is direct consequence of Lemma 9.
(cid:4)
Let P tk
1 , ..., P tk
be the set of partitions of G(tk).
Lemma 11 shows that given two processes p and q at
different partitions, q eventually stops receiving pairs labeled
with p.
Lemma 11. Let p be a correct process such that at time tk,
p ∈ P tk
j ∈ G(tk) such that i (cid:5)= j. Then, there
is a time t after which all correct processes in P tk
j do not
send a pair labeled with p.
, and let P tk
i
Proof: Let td  td be the time when a pk ∈ π crashes
causing that p and q are in different partitions. Let P tk
j be
the partition where q is, and p(cid:4) ∈ P tk
the process that has
the largest T T Lp with T T Lp(cid:2) [p] = n − m.
Following the same argument of Lemma 9, there will be
a time when the timer for n − m expires and the maximum
j can have is at most n−(m+1).
T T Lp that a process in P tk
Therefore, we can conclude that there exists a time t when
all processes in the partition of q do not send any pair labeled
with p.
j
The following two theorems show the strong completeness
property: eventually every correct process suspects perma-
nently every faulty process or processes that are not in the
272
same partition.
Theorem 12 (Strong Completeness). Let p be a faulty
process. There is a time t after which all correct processes
suspect p permanently.
Proof: Let us consider td the time when p fails. By
∗ after which all correct processes
)) stops sending messages labeled with p.
Lemma 9, there is a time t
in V (G(t
Let r ∈ V (G(t
∗
∗
)). Process r only changes timeoutr[p]
when a message labeled with p arrives, so eventually
timeoutr[p] will stop changing.
Let t(cid:4) = max(timeoutr[p]) with r ∈ V (G(t
∗
)). By time
∗
+ t(cid:4), the timer for a message labeled with p expires and
t
every process r sets suspectr[p] to true (line 41). This is
permanent, since r only changes suspectr[p] if it receives a
pair labeled with p, but it will not receive any other pair.
permanently.
Recall that tf is the earliest time when all the failures
have occurred. Thus, if p is a process in a partition P tf
,
then p is correct.
Theorem 13 (Strong Completeness). Let P tf
be two
distinct partitions at time tf . Then, there is a time t ≥ tf
at which every (correct) process q ∈ P tf
suspects every
p ∈ P tf
i
Proof: The proof is similar to the proof of Theorem 12.
First we focus on the time when the messages of p fade
away in the network. Then, the proof is the same for both
cases. By Lemma 11, every q ∈ P tf
stops sending messages
∗∗. Following the same argument
labeled with p at time t
of Theorem 12, there is a time after which all processes
r ∈ P tf
Theorem 14. Algorithm 1 implements ♦P in an arbitrary
network using messages of O(n log n) size.
set suspectr[p] to true permanently (line 41).
, P tf
j
j
i
j
j
i
Proof: Strong completeness is given by Theorem 12
and Theorem 13. Eventual strong accuracy is given by
Theorem 5. Every time a process p sends a HB message,
it sends the variable HB Bag, which contains n integers
bounded by n, the number of identiﬁers in the network,
which can be represented by log n bits. Thus, the messages
used in the algorithm are bounded by O(n log n).
IV. FAILURE DETECTORS WITH UNKNOWN MEMBERSHIP
In the model proposed in Section II we assumed that
every process p knows the names of all the processes in
the network. This is because without this assumption, no
failure detector of the original hierarchy can be implemented
as shown in [22]. Recently, more general models have
been proposed, like dynamic networks, and networks with
unknown membership e.g. [12]. Such works had to adapt
the completeness and accuracy properties, and proposed a
new failure detector class called ♦S
M.
In a dynamic network, processes do not know the names
of all the participants in the network. They learn the names
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:55:15 UTC from IEEE Xplore.  Restrictions apply. 
dynamically, as processes show up and send HB messages
to their neighbors. Because of this, every process keeps a
list of processes it knows, namely, processes from which it
has received messages. To extend completeness and accuracy
for dynamic networks, we deﬁne these properties formally
as in [12].
(cid:2)
t∈N
Given an execution α, a process p is said to be known if
(cid:2) ≥ t,
there is a process q and a time t such that for all t
p is in the known list of q. We deﬁne known(α, t) as the
set of all processes that are known at time t. We deﬁne the
following sets:
crashed(α, t)
• CRASHED(α) =
• CORRECT (α) = Π − CRASHED(α)
• KN OW N (α) =
The failure detector class ♦S
known(α, t)
(cid:2)
t∈N
M for dynamic networks is
formally deﬁned in [12] as follows. For every execution α
and for every process p ∈ KN OW N ∩ CORRECT , there
is a time ta such that for every t > ta the failure detector
satisﬁes:
∈
q
KN OW N ∩ CRASHED, p suspects q at time t
∈
q
KN OW N ∩ CORRECT such that q is not suspected
by p at time t
• Eventual weak accuracy: There
completeness: For
every process
• Strong
exists
The algorithm proposed in Section III can be extended to
work in a network with unknown membership. We consider
the same model of Section II but now every process p only
knows the names of its neighbors.
In our original model, the network is partitionable, so we
have to give a new deﬁnition of completeness and accuracy
for partitionable and with unknown membership networks.
For this, let us deﬁne K(q) = {p| there exists a time t
in which p knows q}. ♦P
M for partitionable networks is
formally deﬁned as follows. For each execution α, there is
a time ta such that for every t > ta the failure detector
satisﬁes:
∈
CRASHED or q ∈ CORRECT that is not in the
same partition of p ∈ CORRECT ∩ K(q) in G(t), p
suspects q at time t
• Eventual strong accuracy: For every process q ∈
CORRECT in the same partition of p in G(t), p does
not suspect q at time t
completeness: For
every process
• Strong
q
Strong completeness means that if a process q has crashed
or if it is correct, but is in a different partition than a process
p that does know about q, eventually p suspects q. Eventual
strong accuracy means that if a process q is correct and is
in the same partition that p, eventually p does not suspect
q.
A. Implementing ♦P
Algorithm 1 can be modiﬁed for implementing ♦P
M,
M
with the changes described next.
As every process p knows nothing about the network but
only its neighbors, the longest path known by p initially is of