title:TRRespass: Exploiting the Many Sides of Target Row Refresh
author:Pietro Frigo and
Emanuele Vannacci and
Hasan Hassan and
Victor van der Veen and
Onur Mutlu and
Cristiano Giuffrida and
Herbert Bos and
Kaveh Razavi
2020 IEEE Symposium on Security and Privacy
TRRespass: Exploiting the Many Sides of
Target Row Refresh
Emanuele Vannacci∗† Hasan Hassan§ Victor van der Veen¶
Cristiano Giuffrida∗ Herbert Bos∗ Kaveh Razavi∗
Pietro Frigo∗†
Onur Mutlu§
∗Vrije Universiteit Amsterdam
§ETH Z¨urich
¶Qualcomm Technologies Inc.
†
Equal contribution joint ﬁrst authors
Abstract—After a plethora of high-proﬁle RowHammer at-
tacks, CPU and DRAM vendors scrambled to deliver what
was meant to be the deﬁnitive hardware solution against the
RowHammer problem: Target Row Refresh (TRR). A common
belief among practitioners is that, for the latest generation
of DDR4 systems that are protected by TRR, RowHammer
is no longer an issue in practice. However,
in reality, very
little is known about TRR. How does TRR exactly prevent
RowHammer? Which parts of a system are responsible for
operating the TRR mechanism? Does TRR completely solve the
RowHammer problem or does it have weaknesses?
In this paper, we demystify the inner workings of TRR and
debunk its security guarantees. We show that what is advertised
as a single mitigation mechanism is actually a series of different
solutions coalesced under the umbrella term Target Row Refresh.
We inspect and disclose, via a deep analysis, different existing
TRR solutions and demonstrate that modern implementations
operate entirely inside DRAM chips. Despite the difﬁculties of
analyzing in-DRAM mitigations, we describe novel techniques
for gaining insights into the operation of these mitigation mech-
anisms. These insights allow us to build TRRespass, a scalable
black-box RowHammer fuzzer that we evaluate on 42 recent
DDR4 modules.
TRRespass shows that even the latest generation DDR4 chips
with in-DRAM TRR, immune to all known RowHammer attacks,
are often still vulnerable to new TRR-aware variants of RowHam-
mer that we develop. In particular, TRRespass ﬁnds that, on
present-day DDR4 modules, RowHammer is still possible when
many aggressor rows are used (as many as 19 in some cases),
with a method we generally refer to as Many-sided RowHammer.
Overall, our analysis shows that 13 out of the 42 modules from all
three major DRAM vendors (i.e., Samsung, Micron, and Hynix)
are vulnerable to our TRR-aware RowHammer access patterns,
and thus one can still mount existing state-of-the-art system-level
RowHammer attacks. In addition to DDR4, we also experiment
with LPDDR4(X)1 chips and show that they are susceptible to
RowHammer bit ﬂips too. Our results provide concrete evidence
that the pursuit of better RowHammer mitigations must continue.
I. INTRODUCTION
Is RowHammer a solved problem? The leading DRAM
vendors have already answered this question with a resounding
“yes”, advertising the latest generation DDR4 systems as
RowHammer-free and using Target Row Refresh (TRR) as
the “silver bullet” that eradicates the vulnerability [63], [70].
Unfortunately, very little is known about the actual implemen-
tation or security of TRR on modern systems. Even the major
consumers of DRAM in the industry have to simply take the
DRAM vendors at their word as the vendors do not disclose
the details of the TRR schemes they implement. In this paper,
we question this security by obscurity strategy and analyze the
mechanisms behind TRR to bypass this prevalent mitigation.
Our results are worrisome, showing that RowHammer is not
only still unsolved, but also that the vulnerability is widespread
even in latest off-the-shelf DRAM chips. Moreover, once the
RowHammer mitigation mechanism is turned off,2 we observe
bit ﬂips with as few as 45K DRAM row activations, showing
that DDR4 and LPDDR4(X) chips are more vulnerable to
RowHammer than their DDR3 predecessors, which can tol-
erate much higher row activation counts (e.g., ∼139K [51]).
RowHammer. Within only ﬁve years since its discovery, ex-
ploits based on the RowHammer vulnerability [51] have spread
to almost every type of computing system [71], [72]. Personal
computers [14], [27], [28], [81], [88], cloud servers [23], [33],
[54], [77], [79], [89], [96], and mobile phones [25], [91], [92]
have all fallen victim to attacks with RowHammer bit ﬂips
triggered from native code [12], [23], [27], [33], [77]–[79],
[81], [96], JavaScript in the browser [14], [25], [28], [81]
and even remote clients across the network [66], [89]. From
an academic demonstration,
the RowHammer vulnerability
has evolved into a major security vulnerability for the entire
industry. In response, hardware vendors have scrambled to
address the RowHammer issue.
Target Row Refresh. Reliable solutions against RowHammer
simply do not exist for older hardware and stopgap solutions
such as using ECC and doubling (or even quadrupling) the
refresh rate have proven ineffective [7], [23], [51]. In the early
days of the DDR4 speciﬁcation, DRAM vendors announced
they would deploy the Target Row Refresh (TRR) mitigation
mechanism on newer-generation DDRx systems to eradicate
the RowHammer vulnerability [63], [70]. While reports of
bit ﬂips on DDR4 devices [27], [56], [66] suggest that the
deployment of such mitigation mechanisms may not have been
prompt, it is commonly assumed that TRR technology on re-
cent DDR4 systems has put an end to RowHammer attacks [2],
[3]. Nowadays, the leading DRAM vendors explicitly advertise
RowHammer-free modules [63], [70]. Our initial assessment
conﬁrms that none of the known RowHammer variants produce
bit ﬂips on 42 recent DDR4 modules. However, little is known
1We refer to both LPDDR4 and LPDDR4X chips as LPDDR4(X).
¶Victor contributed to the research on DDR4 modules.
2We turn off the in-DRAM RowHammer mitigation mechanism by dis-
abling REFRESH commands, as we explain in Section V.
© 2020, Pietro Frigo. Under license to IEEE.
DOI 10.1109/SP40000.2020.00090
747
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:55 UTC from IEEE Xplore.  Restrictions apply. 
about TRR beyond what its name suggests, namely that it
generates extra refreshes for rows targeted by RowHammer.
The many sides of TRR. In this paper, we take a closer look
at the TRR implementations on modern systems. In contrast
to what the literature suggests [66], we show that TRR is
not a single mitigation mechanism but rather a family of
solutions, implemented either in the CPU’s memory controller
or in the DRAM chips themselves. One of the best-known
implementations of TRR-like functionality, Intel’s pTRR [46],
appeared in the memory controllers of Intel CPUs as early as
2014 to protect vulnerable DDR3 modules. Interestingly, while
memory controller-based TRR implementations still exist in
modern DDR4 systems, we show that they are now mostly
dormant. This is presumably because such functionality is
considered superﬂuous now that the DRAM vendors advertise
RowHammer-free modules with in-DRAM TRR, i.e., TRR
implemented entirely inside the DRAM chips [63], [70].
Unfortunately, none of the in-DRAM TRR variants are well
documented. As a result, their security guarantees are buried
deep inside the DRAM chips that embed them. This poses a
major threat to the security of modern systems, if they turn
out to be vulnerable after all.
TRRespass. To compensate for the lack of information, we
investigate the mechanisms behind TRR and show that new
TRR-aware attacks can still exploit
the RowHammer vul-
nerability on modern DDR4 devices. We start our analysis
by investigating TRR variants implemented in the memory
controller and DRAM chips. We inspect memory controller-
based TRR mechanisms using timing side channels to analyze
when the memory controller performs a targeted refresh or
whether it refreshes the entire DRAM at
increased rate.
Inspecting more recent in-DRAM TRR mechanisms is more
challenging since these mechanisms operate transparently to
the memory controller, and thus the rest of the system (e.g.,
targeted refresh may or may not happen during the ﬁxed
tRFC refresh latency). To address this challenge, we use
SoftMC [31], an FPGA-based memory controller. SoftMC
provides us with ﬁne-grained control over the commands sent
to DRAM. Using RowHammer bit ﬂips and a careful selection
of DRAM commands, we gradually reconstruct the different
mitigations deployed on recent DDR4 modules, and uncover
how they track the rows being hammered and how they protect
the victim rows.
Our analysis shows that, while TRR implementations differ
across DRAM vendors, most TRR variations can be by-
passed by what we introduce as Many-sided RowHammer
(i.e., RowHammer with many aggressor rows). Building on
this insight, we present TRRespass to identify TRR-aware
RowHammer access patterns on modern systems. Our fuzzing
strategy generates many-sided RowHammer patterns in an
entirely black-box fashion, without relying on any implemen-
tation details of the memory controller or DRAM chips. We
show that relatively simple many-sided RowHammer patterns
identiﬁed by TRRespass can successfully trigger bit ﬂips on
DDR4 DRAM chips from all three major DRAM vendors,
namely Samsung, Micron, and Hynix (representing over 95%
of the DRAM market [1]), as well as on mobile phones
employing LPDDR4(X) DRAM chips. Overall, our analysis
provides evidence for signiﬁcant weaknesses in state-of-the-
art TRR implementations, showing they can be bypassed
to expose the vulnerable DDR4 substrate to state-of-the-art
system-level RowHammer attacks.
Contributions. We make the following contributions:
• We present the ﬁrst overview of different Target Row
Refresh (TRR) implementations available on modern sys-
tems, which have been publicized as an effective solution
to the RowHammer problem.
• We present TRRespass,
• We analyze the memory-controller-based and in-DRAM
TRR implementations by the leading hardware vendors.
a black-box RowHammer
fuzzer, which can automatically identify TRR-bypassing
RowHammer access patterns on 13 of 42 tested DDR4
modules from all three major DRAM manufacturers as
well as 5 of 13 tested mobile phones.
• We use the RowHammer access patterns that TRRes-
pass identiﬁes on modern TRR-protected DDR4 and
LPDDR4(X) DRAM chips to show how attackers can
use TRR-aware RowHammer access patterns to mount
state-of-the-art RowHammer attacks on these modules.
II. ROWHAMMER ON DDR4: STILL A PROBLEM?
Prior research has characterized [23], [51], [88], [91] and
exploited the RowHammer vulnerability of DRAM [23], [25],
[27], [28], [79], [89], [96]. While there has been systematic
research on the vulnerability on DDR3 systems [51], [88],
relatively little is known about the extent of RowHammer
on recent DDR4 systems. In this section, we ﬁrst provide
the necessary background on DRAM and RowHammer for
understanding the rest of the paper. We refer the reader to
prior work [18]–[21], [29], [30], [50], [51], [57]–[61], [67],
[68], [82]–[85], [97] for a more detailed description of DRAM
organization and operation. Then, we perform a preliminary
analysis on recent DDR4 systems using existing “hammering”
patterns in the literature [27], [51], [88] to investigate the
current status of the RowHammer vulnerability on DDR4.
A. DRAM Organization
Figure 1 depicts the high-level organization of a DRAM-
based main memory subsystem. The CPU communicates with
DRAM through the Memory Controller (from now on also
referred to as MC). The MC is responsible for issuing memory
requests to the corresponding DRAM channel. DRAM chan-
nels operate independently from each other and a single chan-
nel can host multiple memory modules (or DIMMs). DRAM
chips in a DIMM are organized as a single rank or multiple
ranks. The DRAM chips that form a rank operate in lock-
step, simultaneously receiving the same DRAM command but
operating on different data portions. Thus, a rank composed
of several DRAM chips appears as a single large memory to
the system. A DRAM chip contains multiple DRAM banks
that operate in parallel.
Inside a bank. A DRAM bank can be logically seen as a two-
dimensional array of DRAM cells (Figure 2). Cells that share
a wordline are referred to as a DRAM row. The row decoder
selects (i.e., activates) a row to load its data into the row buffer,
where data can be read and modiﬁed. A DRAM cell consists of
two components: (i) a capacitor and (ii) an access transistor.
The capacitor stores a single bit of information as electrical
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:55 UTC from IEEE Xplore.  Restrictions apply. 
748
(cid:1)(cid:2)(cid:3)
(cid:18)(cid:15)(cid:19)(cid:1)(cid:20)(cid:21)(cid:16)
(cid:7)
(cid:5)
(cid:4)
(cid:2)
(cid:1)
(cid:3)
(cid:6)(cid:7)(cid:7)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)
(cid:5)
(cid:2)
(cid:4)
(cid:1)(cid:2)(cid:9)(cid:10)(cid:10)(cid:15)(cid:16)(cid:17)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:5)(cid:7)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:5)(cid:12)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:5)(cid:13)
Fig. 1: High-level DRAM organization.
charge. During an access to a cell, the corresponding wordline
enables the access transistor of the cell, which connects the cell
capacitor to the bitline. Thus, to read/write data in a speciﬁc
DRAM row, the memory controller ﬁrst issues an ACTIVATE
command to bring the row’s data into the row buffer. The row
buffer consists of sense ampliﬁers, each connected to a bitline.
Because row activation destroys the data stored in the cell
capacitor, a sense ampliﬁer not only successfully determines
the bit stored in the cell, but also restores the charge back into
the capacitor. After the activated row of cells is fully restored,
the memory controller can issue a PRECHARGE command to
close the row and prepare the bank for activating a different
row.
(cid:1) (cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)
(cid:3)
(cid:8)
(cid:5)
(cid:8)
(cid:4)
(cid:7)
(cid:2)
(cid:2)
(cid:6)
(cid:13)
(cid:5)
(cid:8)
(cid:4)
(cid:17)
(cid:3)
(cid:1)
(cid:2)
(cid:2)
(cid:1)
(cid:9)
(cid:3)
(cid:4)
(cid:4)
(cid:12)
(cid:8)
(cid:7)
(cid:5)(cid:6)
(cid:11)
(cid:6)
(cid:10)
(cid:9)(cid:2)(cid:1) (cid:14)(cid:15)(cid:16) (cid:8)(cid:3)
(cid:9)(cid:2)(cid:1)
(cid:13)(cid:8)(cid:5)(cid:5)
(cid:12)(cid:13)(cid:13)(cid:8)(cid:19)(cid:19)
(cid:9)(cid:6)(cid:6)(cid:5)(cid:13)(cid:13)
(cid:9)(cid:6)(cid:6)(cid:5)(cid:13)(cid:13)
(cid:11)(cid:3)(cid:12)(cid:7)(cid:19)(cid:6)(cid:19)(cid:11)(cid:2)(cid:3)
(cid:12)(cid:8)(cid:9)(cid:14)(cid:13)(cid:11)(cid:13)(cid:12) (cid:2)(cid:8)
(cid:12)(cid:8)(cid:9)(cid:14)(cid:13)(cid:11)(cid:13)(cid:12) (cid:2)(cid:8)
(cid:3)
(cid:8)
(cid:8)
(cid:2)
(cid:2)
(cid:2)
(cid:11)
(cid:12)
(cid:12)
(cid:6)
(cid:11)
(cid:11)
(cid:6)
(cid:6)
(cid:13)
(cid:9)
(cid:9)
(cid:12)
(cid:10)
(cid:10)
(cid:18)
(cid:9)
(cid:9)
(cid:12)
(cid:6)
(cid:6)
(cid:13)
Fig. 2: DRAM bank organization (logical).
DRAM cell capacitors are not ideal and they gradually lose
their charge over time. Thus, the memory controller needs
to refresh the contents of all cells periodically (usually every
64 ms [40], [44], [67]) to prevent data loss.
B. RowHammer
RowHammer is a well-known DRAM vulnerability that has
been investigated since 2012 [8]–[10], [26], [51]. When a
particular DRAM row is repeatedly activated and precharged
many times (i.e., hammered), electro-magnetic interference
between the hammered row and its neighbor rows can cause
the cell capacitors in the neighbor rows to leak much faster
than under normal operation. Rows that are hammered are