    "0x0000000000000000000000000109dea8b64d87a26e7fe9af6400375099c78fdd"
    > eth.getStorageAt("0xc9fbe313dc1d6a1c542edca21d1104c338676ffd", 0)
    "0x0000000000000000000000000109dea8b64d87a26e7fe9af6400375099c78fdd"
第二种方式就是通过发送交易:
    # 调用test2
    > eth.getStorageAt("0xc9fbe313dc1d6a1c542edca21d1104c338676ffd", 1)
    "0x0000000000000000000000000000000000000000000000000000000000000005"
    > eth.sendTransaction({from: eth.accounts[0], to: "0xc9fbe313dc1d6a1c542edca21d1104c338676ffd", data: "0xcaf446830000000000000000000000000000000000000000000000000000000000000005"})
    > eth.getStorageAt("0xc9fbe313dc1d6a1c542edca21d1104c338676ffd", 1)
    "0x000000000000000000000000000000000000000000000000000000000000000a"
这两种调用方式的区别有两个:
  1. 使用call调用函数是在本地使用EVM执行合约的OPCODE，所以可以获得返回值
  2. 通过交易调用的函数，能修改区块链上的storage
一个调用合约函数的交易(比如
`https://ropsten.etherscan.io/tx/0xab1040ff9b04f8fc13b12057f9c090e0a9348b7d3e7b4bb09523819e575cf651`)的信息中，是不存在返回值的信息，但是却可以修改storage的信息(一个交易是怎么修改对应的storage信息，是之后的一个研究方向)
而通过call调用，是在本地使用EVM执行OPCODE，返回值是存在MEM中return，所以可以获取到返回值，虽然也可以修改storage的数据，不过只是修改你本地数据，不通过发起交易，其他节点将不会接受你的更改，所以是一个无效的修改，同时，本地调用函数也不需要消耗gas，所以上面举例中，在调用信息的字典里，不需要`from`字段，而交易却需要指定(设置`from`)从哪个账号消耗gas。
##### 调用函数
EVM是怎么判断调用哪个函数的呢？下面使用OPCODE来进行说明
每一个智能合约入口代码是有固定模式的，我们可以称为智能合约的主函数，上面测试合约的主函数如下:
PS: [Github](https://github.com/trailofbits/ida-evm
"Github")[5]上面有一个EVM反汇编的IDA插件
    [     0x0] | PUSH1                | ['0x80']
    [     0x2] | PUSH1                | ['0x40']
    [     0x4] | MSTORE               | None
    [     0x5] | PUSH1                | ['0x4']
    [     0x7] | CALLDATASIZE         | None
    [     0x8] | LT                   | None
    [     0x9] | PUSH2                | ['0x61']
    [     0xc] | JUMPI                | None
    [     0xd] | PUSH4                | ['0xffffffff']
    [    0x12] | PUSH29               | ['0x100000000000000000000000000000000000000000000000000000000']
    [    0x30] | PUSH1                | ['0x0']
    [    0x32] | CALLDATALOAD         | None
    [    0x33] | DIV                  | None
    [    0x34] | AND                  | None
    [    0x35] | PUSH4                | ['0x6b59084d']
    [    0x3a] | DUP2                 | None
    [    0x3b] | EQ                   | None
    [    0x3c] | PUSH2                | ['0x66']
    [    0x3f] | JUMPI                | None
    [    0x40] | DUP1                 | None
    [    0x41] | PUSH4                | ['0x8da5cb5b']
    [    0x46] | EQ                   | None
    [    0x47] | PUSH2                | ['0xa4']
    [    0x4a] | JUMPI                | None
    [    0x4b] | DUP1                 | None
    [    0x4c] | PUSH4                | ['0xcaf44683']
    [    0x51] | EQ                   | None
    [    0x52] | PUSH2                | ['0xb9']
    [    0x55] | JUMPI                | None
    [    0x56] | DUP1                 | None
    [    0x57] | PUSH4                | ['0xe3ac5d26']
    [    0x5c] | EQ                   | None
    [    0x5d] | PUSH2                | ['0xd3']
    [    0x60] | JUMPI                | None
    [    0x61] | JUMPDEST             | None
    [    0x62] | PUSH1                | ['0x0']
    [    0x64] | DUP1                 | None
    [    0x65] | REVERT               | None
反编译出来的代码就是:
    def main():
        if CALLDATASIZE >= 4:
            data = CALLDATA[:4]
            if data == 0x6b59084d:
                test1()
            elif data == 0x8da5cb5b:
                owner()
            elif data == 0xcaf44683:
                test2()
            elif data == 0xe3ac5d26:
                prize()
            else:
                pass
        raise
PS：因为个人习惯问题，反编译最终输出没有选择对应的Solidity代码，而是使用Python。
从上面的代码我们就能看出来，EVM是根据`CALLDATA`的前4字节来确定调用的函数的，这4个字节表示的是函数的sha3哈希值的前4字节:
    > web3.sha3("test1()")
    "0x6b59084dfb7dcf1c687dd12ad5778be120c9121b21ef90a32ff73565a36c9cd3"
    > web3.sha3("owner()")
    "0x8da5cb5b36e7f68c1d2e56001220cdbdd3ba2616072f718acfda4a06441a807d"
    > web3.sha3("prize()")
    "0xe3ac5d2656091dd8f25e87b604175717f3442b1e2af8ecd1b1f708bab76d9a91"
    # 如果该函数有参数，则需要加上各个参数的类型
    > web3.sha3("test2(uint256)")
    "0xcaf446833eef44593b83316414b79e98fec092b78e4c1287e6968774e0283444"
所以可以去网上找个[哈希表映射](https://github.com/trailofbits/ida-evm/blob/master/known_hashes.py "哈希表映射")[6]，这样有概率可以通过hash值，得到函数名和参数信息，减小逆向的难度
##### 主函数中的函数
上面给出的测试智能合约中只有两个函数，但是反编译出来的主函数中，却有4个函数调用，其中两个是公有函数，另两个是公有变量
智能合约变量/函数类型只有两种，公有和私有，公有和私有的区别很简单，公有的是能别外部调用访问，私有的只能被本身调用访问
对于变量，不管是公有还是私有都能通过`getStorageAt`访问，但是这是属于以太坊层面的，在智能合约层面，把公有变量给编译成了一个公有函数，在这公有函数中返回`SLOAD(slot)`，而私有函数只能在其他函数中特定的地方调用`SLOAD(slot)`来访问
在上面测试的智能合约中, `test1()`函数等同于`owner()`，我们可以来看看各自的OPCODE:
    ; test1()
    ; 0x66: loc_66
    [    0x66] | JUMPDEST             | None
    [    0x67] | CALLVALUE            | None
    [    0x68] | DUP1                 | None
    [    0x69] | ISZERO               | None
    [    0x6a] | PUSH2                | ['0x72']
    [    0x6d] | JUMPI                | None
    [    0x6e] | PUSH1                | ['0x0']
    [    0x70] | DUP1                 | None
    [    0x71] | REVERT               | None
    ; 0x72: loc_72
    [    0x72] | JUMPDEST             | None
    [    0x73] | POP                  | None
    [    0x74] | PUSH2                | ['0x7b']
    [    0x77] | PUSH2                | ['0xfa']
    [    0x7a] | JUMP                 | None
    ; 0xFA: loc_fa
    [    0xfa] | JUMPDEST             | None
    [    0xfb] | PUSH1                | ['0x0']
    [    0xfd] | SLOAD                | None
    [    0xfe] | PUSH20               | ['0xffffffffffffffffffffffffffffffffffffffff']
    [   0x113] | AND                  | None
    [   0x114] | SWAP1                | None
    [   0x115] | JUMP                 | None
    ; 0x7B: loc_7b
    [    0x7b] | JUMPDEST             | None
    [    0x7c] | PUSH1                | ['0x40']
    [    0x7e] | DUP1                 | None
    [    0x7f] | MLOAD                | None
    [    0x80] | PUSH20               | ['0xffffffffffffffffffffffffffffffffffffffff']
    [    0x95] | SWAP1                | None
    [    0x96] | SWAP3                | None
    [    0x97] | AND                  | None
    [    0x98] | DUP3                 | None
    [    0x99] | MSTORE               | None
    [    0x9a] | MLOAD                | None
    [    0x9b] | SWAP1                | None
    [    0x9c] | DUP2                 | None
    [    0x9d] | SWAP1                | None
    [    0x9e] | SUB                  | None
    [    0x9f] | PUSH1                | ['0x20']
    [    0xa1] | ADD                  | None
    [    0xa2] | SWAP1                | None
    [    0xa3] | RETURN               | None
和`owner()`函数进行对比:
    ; owner()
    ; 0xA4: loc_a4
    [    0xa4] | JUMPDEST             | None
    [    0xa5] | CALLVALUE            | None
    [    0xa6] | DUP1                 | None
    [    0xa7] | ISZERO               | None
    [    0xa8] | PUSH2                | ['0xb0']
    [    0xab] | JUMPI                | None
    [    0xac] | PUSH1                | ['0x0']
    [    0xae] | DUP1                 | None
    [    0xaf] | REVERT               | None
    ; 0xB0: loc_b0
    [    0xb0] | JUMPDEST             | None