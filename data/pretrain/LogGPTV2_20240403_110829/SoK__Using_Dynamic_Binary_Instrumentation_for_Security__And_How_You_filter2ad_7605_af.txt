### References

1. **Engineering (CCS '09).** ACM.
2. **Lorenzo Cavallaro, Prateek Saxena, and R. Sekar.** 2008. On the Limits of Information Flow Techniques for Malware Analysis and Containment (DIMVA '08). Springer.
3. **Sang Kil Cha, Maverick Woo, and David Brumley.** 2015. Program-Adaptive Mutational Fuzzing (SP '15). IEEE.
4. **Yue Chen, Mustakimur Khandaker, and Zhi Wang.** 2017. Pinpointing Vulnerabilities (ASIA CCS '17). ACM.
5. **Binlin Cheng, Jiang Ming, Jianmin Fu, Guojun Peng, Ting Chen, Xiaosong Zhang, and Jean-Yves Marion.** 2018. Towards Paving the Way for Large-Scale Windows Malware Analysis: Generic Binary Unpacking with Orders-of-Magnitude Performance Boost (CCS '18). ACM.
6. **Anton Chernoff, Mark Herdeg, Ray Hookway, Chris Reeve, Norman Rubin, Tony Tye, S. Bharadwaj Yadavalli, and John Yates.** 1998. FX!32: A Profile-Directed Binary Translator. IEEE Micro 18, 2 (March 1998).
7. **Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy.** 2011. ROPdefender: A Detection Tool to Defend Against Return-oriented Programming Attacks (ASIA CCS '11). ACM.
8. **Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee.** 2008. Ether: Malware Analysis via Hardware Virtualization Extensions (CCS '08). ACM.
9. **Brendan Dolan-Gavitt, Tim Leek, Michael Zhivich, Jonathon Giffin, and Wenke Lee.** 2011. Virtuoso: Narrowing the Semantic Gap in Virtual Machine Introspection (SP '11). IEEE.
10. **Manuel Egele, Theodoor Scholte, Engin Kirda, and Christopher Kruegel.** 2008. A Survey on Automated Dynamic Malware-analysis Techniques and Tools. ACM Comput. Surv. 44, 2, Article 6 (March 2008).
11. **S. J. Eggers, David R. Keppel, Eric J. Koldinger, and Henry M. Levy.** 1990. Techniques for Efficient Inline Tracing on a Shared-memory Multiprocessor (SIGMETRICS '90). ACM.
12. **Francisco Falcón and Nahuel Riva.** 2012. Dynamic Binary Instrumentation Frameworks: I know you’re there spying on me. Recon (2012).
13. **Tal Garfinkel.** 2003. Traps and pitfalls: Practical problems in system call interposition based security tools (NDSS '03).
14. **Tal Garfinkel, Keith Adams, Andrew Warfield, and Jason Franklin.** 2007. Compatibility is Not Transparency: VMM Detection Myths and Realities (HOTOS'07). USENIX Association.
15. **Tal Garfinkel and Mendel Rosenblum.** 2003. A Virtual Machine Introspection Based Architecture for Intrusion Detection (NDSS '03).
16. **Cosmin Gorgovan.** 2014. Escaping DynamoRIO and Pin. https://github.com/lgeek/dynamorio_pin_escape.
17. **Sean Heelan and Agustin Gianni.** 2012. Augmenting Vulnerability Analysis of Binary Code (ACSAC '12). ACM.
18. **Martin Hron and Jakub Jermář.** 2014. SafeMachine: Malware Needs Love, Too. Virus Bulletin (2014).
19. **Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and Jack W. Davidson.** 2012. ILR: Where’D My Gadgets Go? (SP '12). IEEE.
20. **Kangkook Jee, Vasileios P. Kemerlis, Angelos D. Keromytis, and Georgios Portokalidis.** 2013. ShadowReplica: Efficient Parallelization of Dynamic Data Flow Tracking (CCS '13). ACM.
21. **Kangkook Jee, Georgios Portokalidis, Vasileios P Kemerlis, Soumyadeep Ghosh, David I August, and Angelos D Keromytis.** 2012. A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware (NDSS '12).
22. **Karl Trygve Kalleberg and Ole André Vadla Ravnås.** 2016. Testing interoperability with closed-source software through scriptable diplomacy. (FOSDEM '16).
23. **James R. Larus and Eric Schnarr.** 1995. EEL: Machine-independent Executable Editing (PLDI '95). ACM.
24. **Julian Kirsch, Zhechko Zhechev, Bruno Bierbaumer, and Thomas Kittel.** 2018. PwIN – Pwning Intel piN: Why DBI is Unsuitable for Security Applications (ESORICS '18). Springer.
25. **Juanru Li, Zhiqiang Lin, Juan Caballero, Yuanyuan Zhang, and Dawu Gu.** 2018. K-Hunt: Pinpointing Insecure Cryptographic Keys from Execution Traces (CCS '18). ACM.
26. **Xiaoning Li and Kang Li.** 2014. Defeating the Transparency Features of Dynamic Binary Instrumentation. BlackHat USA (2014).
27. **Zhiqiang Lin, Xuxian Jiang, Dongyan Xu, and Xiangyu Zhang.** 2008. Automatic Protocol Format Reverse Engineering through Context-Aware Monitored Execution (NDSS '08).
28. **Daiping Liu, Mingwei Zhang, and Ravi Sahita.** 2018. XOM-switch: Hiding Your Code from Advanced Code Reuse Attacks In One Shot. BlackHat ASIA (2018).
29. **Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood.** 2005. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation (PLDI '05). ACM.
30. **Lorenzo Martignoni, Roberto Paleari, and Danilo Bruschi.** 2010. Conqueror: Tamper-Proof Code Execution on Legacy Systems (DIMVA '10). Springer.
31. **Mathias Payer and Thomas R. Gross.** 2011. Fine-grained User-space Security Through Virtualization (VEE '11). ACM.
32. **M. Payer and T. R. Gross.** 2013. Hot-patching a web server: A case study of ASAP code repair (ACSAC '13). IEEE.
33. **Nicholas Nethercote and Julian Seward.** 2007. Valgrind: A Framework for Heavy-weight Dynamic Binary Instrumentation (PLDI '07). ACM.
34. **Jiang Ming, Dongpeng Xu, Li Wang, and Dinghao Wu.** 2015. LOOP: Logic-Oriented Opaque Predicate Detection in Obfuscated Binary Code (CCS '15). ACM.
35. **Collin Mulliner, Jon Oberheide, William Robertson, and Engin Kirda.** 2013. PatchDroid: Scalable Third-party Security Patches for Android Devices (ACSAC '13). ACM.
36. **George C. Necula, Scott McPeak, Shree Prakash Rahul, and Westley Weimer.** 2002. CIL: Intermediate Language and Tools for Analysis and Transformation of C Programs (CC '02). Springer.
37. **Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and Zhendong Su.** 2014. X-force: Force-executing Binary Programs for Security Applications (SEC'14). USENIX Association.
38. **Theofilos Petsios, Vasileios P. Kemerlis, Michalis Polychronakis, and Angelos D. Keromytis.** 2015. DynaGuard: Armoring Canary-based Protections Against Brute-force Attacks (ACSAC '15). ACM.
39. **Jonas Pfoh and Sebastian Vogl.** 2017. rVMI: A New Paradigm for Full System Analysis. Black Hat USA (2017).
40. **Mario Polino, Andrea Continella, Sebastiano Mariani, Stefano D’Alessio, Lorenzo Fontana, Fabio Gritti, and Stefano Zanero.** 2017. Measuring and Defeating Anti-Instrumentation-Equipped Malware (DIMVA '17). Springer.
41. **Aravind Prakash, Xunchao Hu, and Heng Yin.** 2015. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. (NDSS '15).
42. **Gábor Pék, Boldizsár Bencsáth, and Levente Buttyán.** 2011. nEther: In-guest Detection of Out-of-the-guest Malware Analyzers (EUROSEC '11). ACM.
43. **Quarkslab.** 2019. QDBI. https://qbdi.quarkslab.com/.
44. **Nguyen Anh Quynh.** 2018. SKORPIO: Advanced Binary Instrumentation Framework. (OPCDE '18).
45. **Ted Romer, Geoff Voelker, Dennis Lee, Alec Wolman, Wayne Wong, Hank Levy, Brian Bershad, and Brad Chen.** 1997. Instrumentation and Optimization of Win32/Intel Executables Using Etch (NT'97). USENIX Association.
46. **K. Scott, N. Kumar, S. Velusamy, B. Childers, J. W. Davidson, and M. L. Soffa.** 2003. Retargetable and Reconfigurable Software Dynamic Translation (CGO '03). IEEE.
47. **A. Skaletsky, T. Devor, N. Chachmon, R. Cohn, K. Hazelwood, V. Vladimirov, and M. Bach.** 2010. Dynamic program analysis of Microsoft Windows applications (ISPASS '10). IEEE.
48. **Asia Slowinska, Istvan Haller, Andrei Bacs, Silviu Baranga, and Herbert Bos.** 2014. Data Structure Archaeology: Scrape Away the Dirt and Glue Back the Pieces! (DIMVA '14). Springer.
49. **Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski.** 2003. Exploiting and Protecting Dynamic Code Generation (NDSS '15).
50. **Amitabh Srivastava and Alan Eustace.** 1994. ATOM: A System for Building Customized Program Analysis Tools (PLDI '94). ACM.
51. **Ke Sun, Xiaoning Li, and Ya Ou.** 2016. Break Out of the Truman Show: Active Detection and Escape of Dynamic Binary Instrumentation. Black Hat Asia (2016).
52. **Cisco Talos.** 2017. PyREBox. https://github.com/Cisco-Talos/pyrebox.
53. **Rui Wang, XiaoFeng Wang, Kehuan Zhang, and Zhuowei Li.** 2008. Towards Automatic Reverse Engineering of Software Security Configurations (CCS '08). ACM.
54. **Tielei Wang, Chengyu Song, and Wenke Lee.** 2014. Diagnosis and Emergency Patch Generation for Integer Overflow Exploits (DIMVA '14). Springer.
55. **Xinran Wang, Yoon-Chan Jhi, Sencun Zhu, and Peng Liu.** 2009. Behavior Based Software Theft Detection (CCS '09). ACM.
56. **Z. Wang, X. Ding, C. Pang, J. Guo, J. Zhu, and B. Mao.** 2018. To Detect Stack Buffer Overflow with Polymorphic Canaries (DSN '18). IEEE.
57. **Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z. Snow, Fabian Monrose, and Michalis Polychronakis.** 2016. No-Execute-After-Read: Preventing Code Disclosure in Commodity Software (ASIA CCS '16). ACM.
58. **Yuan Xiao, Mengyuan Li, Sanchuan Chen, and Yinqian Zhang.** 2017. STACCO: Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in Secure Enclaves (CCS '17). ACM.
59. **Guanhua Yan, Nathan Brown, and Deguang Kong.** 2013. Exploring Discriminatory Features for Automated Malware Classification (DIMVA '13). Springer.
60. **Junyuan Zeng, Yangchun Fu, and Zhiqiang Lin.** 2015. PEMU: A Pin Highly Compatible Out-of-VM Dynamic Binary Instrumentation Framework (VEE '15). ACM.
61. **Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, and R. Sekar.** 2014. A Platform for Secure Static Binary Instrumentation (VEE '14). ACM.
62. **Xiaolan Zhang, Zheng Wang, Nicholas Gloy, J. Bradley Chen, and Michael D. Smith.** 1997. System Support for Automatic Profiling and Optimization (SOSP '97). ACM.
63. **Jingyu Zhou and Giovanni Vigna.** 2004. Detecting Attacks That Exploit Application-Logic Errors Through Application-Level Auditing (ACSAC '04). IEEE.

### Experimental Results

In this section, we present the experimental setup and results for assessing the performance impact of the stopgap measures implemented as a high-level library for analysis tools. We used the SPEC CPU2006 suite (Table 2) to measure the performance overhead.

#### Experimental Setup
- **Environment:**
  - **Host Machine:** Debian 9.6 Stretch with two Intel Xeon E5-4610 processors.
  - **Virtual Machine:** Windows 7 SP1 32-bit with 1 CPU core and 3 GB of RAM, hosted on VirtualBox 5.2.6.
  - **Tool:** Pin 3.5.
  - **Compiler:** Visual Studio 2010 in Release configuration.
  - **Trials:** Average value for 9 trials of each configuration.

#### Integer Benchmarks
- **Results:**
  - **Pointer Leak Mitigation:** Small impact, with a worst-case slowdown of 1.09x.
  - **NX Mitigation:** Overhead related to the number of indirect transfers, with a peak of 1.17x for benchmark `omnetpp`.
  - **RW Mitigation:** Overhead ranges from 2.31x to 5.02x.
  - **Full Configuration:** Overhead similar to RW, with some cases showing slightly lower overhead.

#### Floating-Point Benchmarks
- **Results:**
  - **Similar Trends:** Similar trends to integer benchmarks, with notable exceptions for `namd` and `sphinx3`.
  - **NX Mitigation:** Higher overhead for `namd` and `sphinx3`, likely due to high usage of indirect control transfers.

#### Comparison with PinShield
- **RW Mitigation:** At least one order of magnitude faster than the original implementation of PinShield.

#### Figures
- **Figure 2:** Slowdown for integer benchmarks.
- **Figure 3:** Slowdown for floating-point benchmarks.

### Tables

**Table 2: Integer and Floating-Point C/C++ Benchmarks**

| Suite | CINT | CFP |
|-------|------|-----|
| Name  | ID   |     |
| perlbench | 400 |    |
| bzip2     | 401 |    |
| gcc       | 403 |    |
| mcf       | 429 |    |
| gobmk     | 445 |    |
| hmmer     | 456 |    |
| sjeng     | 458 |    |
| h264ref   | 464 |    |
| omnetpp   | 471 |    |
| astar     | 473 |    |
| milc      | 433 |    |
| namd      | 444 |    |
| soplex    | 450 |    |
| povray    | 453 |    |
| lbm       | 470 |    |
| sphinx3   | 482 |    |

### Figures

**Figure 2: Slowdown for Integer Benchmarks**

| Benchmark | leak | nx | rw | full | paranoid |
|-----------|------|----|----|------|----------|
| 400       | 1.01 | 1.01 | 1.03 | 1.09 | 1.01 |
| 401       | 1.00 | 1.02 | 1.01 | 1.09 | 1.02 |
| 403       | 1.00 | 1.03 | 1.15 | 1.06 | 1.17 |
| 429       | 1.01 | 1.09 | 2.31 | 3.82 | 2.95 |
| 445       | 1.02 | 1.11 | 3.66 | 2.44 | 6.42 |
| 456       | 1.01 | 1.15 | 2.73 | 3.74 | 4.39 |
| 458       | 1.06 | 1.05 | 2.61 | 2.73 | 2.59 |
| 464       | 1.01 | 1.06 | 3.91 | 3.73 | 7.00 |
| 471       | 1.00 | 1.17 | 2.25 | 2.73 | 5.87 |
| 473       | 1.01 | 1.03 | 3.55 | 5.02 | 7.25 |

**Figure 3: Slowdown for Floating-Point Benchmarks**

| Benchmark | leak | nx | rw | full | paranoid |
|-----------|------|----|----|------|----------|
| 433       | 1.01 | 1.24 | 1.13 | 1.17 | 1.03 |
| 444       | 1.07 | 1.43 | 1.01 | 1.47 | 1.91 |
| 450       | 1.08 | 2.23 | 3.37 | 4.01 | 1.83 |
| 453       | 1.05 | 1.07 | 16.07 | 2.11 | 2.52 |
| 470       | 1.01 | 1.03 | 16.45 | 3.53 | 4.35 |
| 482       | 1.01 | 1.07 | 16.33 | 6.58 | 7.12 |

This revised version provides a more structured and professional presentation of the references and experimental results.