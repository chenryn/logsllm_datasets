engineering (CCS ’09). ACM.
[7] Lorenzo Cavallaro, Prateek Saxena, and R. Sekar. 2008. On the Limits of Infor-
mation Flow Techniques for Malware Analysis and Containment (DIMVA ’08).
Springer.
[8] Sang Kil Cha, Maverick Woo, and David Brumley. 2015. Program-Adaptive
[9] Yue Chen, Mustakimur Khandaker, and Zhi Wang. 2017. Pinpointing Vulnerabil-
Mutational Fuzzing (SP ’15). IEEE.
ities (ASIA CCS ’17). ACM.
[10] Binlin Cheng, Jiang Ming, Jianmin Fu, Guojun Peng, Ting Chen, Xiaosong Zhang,
and Jean-Yves Marion. 2018. Towards Paving the Way for Large-Scale Win-
dows Malware Analysis: Generic Binary Unpacking with Orders-of-Magnitude
Performance Boost (CCS ’18). ACM.
[11] Anton Chernoff, Mark Herdeg, Ray Hookway, Chris Reeve, Norman Rubin, Tony
Tye, S. Bharadwaj Yadavalli, and John Yates. 1998. FX!32: A Profile-Directed
Binary Translator. IEEE Micro 18, 2 (March 1998).
[12] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2011. ROPdefender: A
Detection Tool to Defend Against Return-oriented Programming Attacks (ASIA
CCS ’11). ACM.
[13] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee. 2008. Ether: Mal-
ware Analysis via Hardware Virtualization Extensions (CCS ’08). ACM.
[14] Brendan Dolan-Gavitt, Tim Leek, Michael Zhivich, Jonathon Giffin, and Wenke
Lee. 2011. Virtuoso: Narrowing the Semantic Gap in Virtual Machine Introspec-
tion (SP ’11). IEEE.
[15] Manuel Egele, Theodoor Scholte, Engin Kirda, and Christopher Kruegel. 2008. A
Survey on Automated Dynamic Malware-analysis Techniques and Tools. ACM
Comput. Surv. 44, 2, Article 6 (March 2008).
[16] S. J. Eggers, David R. Keppel, Eric J. Koldinger, and Henry M. Levy. 1990. Tech-
niques for Efficient Inline Tracing on a Shared-memory Multiprocessor (SIGMET-
RICS ’90). ACM.
[17] Francisco Falcón and Nahuel Riva. 2012. Dynamic Binary Instrumentation Frame-
works: I know you’re there spying on me. Recon (2012).
sition based security tools (NDSS ’03).
[19] Tal Garfinkel, Keith Adams, Andrew Warfield, and Jason Franklin. 2007. Com-
patibility is Not Transparency: VMM Detection Myths and Realities (HOTOS’07).
USENIX Association.
[20] Tal Garfinkel and Mendel Rosenblum. 2003. A Virtual Machine Introspection
[18] Tal Garfinkel. 2003. Traps and pitfalls: Practical problems in system call interpo-
[21] Cosmin Gorgovan. 2014. Escaping DynamoRIO and Pin. https://github.com/
Based Architecture for Intrusion Detection (NDSS ’03).
lgeek/dynamorio_pin_escape.
[22] Sean Heelan and Agustin Gianni. 2012. Augmenting Vulnerability Analysis of
[24] Martin Hron and Jakub Jermář. 2014. SafeMachine: Malware Needs Love, Too.
[23] Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and Jack W. David-
Binary Code (ACSAC ’12). ACM.
son. 2012. ILR: Where’D My Gadgets Go? (SP ’12). IEEE.
Virus Bulletin (2014).
[25] Kangkook Jee, Vasileios P. Kemerlis, Angelos D. Keromytis, and Georgios Por-
tokalidis. 2013. ShadowReplica: Efficient Parallelization of Dynamic Data Flow
Tracking (CCS ’13). ACM.
[26] Kangkook Jee, Georgios Portokalidis, Vasileios P Kemerlis, Soumyadeep Ghosh,
David I August, and Angelos D Keromytis. 2012. A General Approach for Effi-
ciently Accelerating Software-based Dynamic Data Flow Tracking on Commodity
Hardware (NDSS ’12).
with closed-source software through scriptable diplomacy. (FOSDEM ’16).
[27] Karl Trygve Kalleberg and Ole André Vadla Ravnås. 2016. Testing interoperability
[29] James R. Larus and Eric Schnarr. 1995. EEL: Machine-independent Executable
[28] Julian Kirsch, Zhechko Zhechev, Bruno Bierbaumer, and Thomas Kittel. 2018.
PwIN – Pwning Intel piN: Why DBI is Unsuitable for Security Applications
(ESORICS ’18). Springer.
Editing (PLDI ’95). ACM.
[30] Juanru Li, Zhiqiang Lin, Juan Caballero, Yuanyuan Zhang, and Dawu Gu. 2018.
K-Hunt: Pinpointing Insecure Cryptographic Keys from Execution Traces (CCS
’18). ACM.
[31] Xiaoning Li and Kang Li. 2014. Defeating the Transparency Features of Dynamic
Binary Instrumentation. BlackHat USA (2014).
[32] Zhiqiang Lin, Xuxian Jiang, Dongyan Xu, and Xiangyu Zhang. 2008. Auto-
matic Protocol Format Reverse Engineering through Context-Aware Monitored
Execution (NDSS ’08).
[33] Daiping Liu, Mingwei Zhang, and Ravi Sahita. 2018. XOM-switch: Hiding Your
Code from Advanced Code Reuse Attacks In One Shot. BlackHat ASIA (2018).
[34] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
Building Customized Program Analysis Tools with Dynamic Instrumentation
(PLDI ’05). ACM.
Tamper-Proof Code Execution on Legacy Systems (DIMVA ’10). Springer.
[35] Lorenzo Martignoni, Roberto Paleari, and Danilo Bruschi. 2010. Conqueror:
[41] M. Payer and T. R. Gross. 2013. Hot-patching a web server: A case study of ASAP
[40] Mathias Payer and Thomas R. Gross. 2011. Fine-grained User-space Security
[39] Nicholas Nethercote and Julian Seward. 2007. Valgrind: A Framework for Heavy-
[36] Jiang Ming, Dongpeng Xu, Li Wang, and Dinghao Wu. 2015. LOOP: Logic-
Oriented Opaque Predicate Detection in Obfuscated Binary Code (CCS ’15).
ACM.
[37] Collin Mulliner, Jon Oberheide, William Robertson, and Engin Kirda. 2013. Patch-
Droid: Scalable Third-party Security Patches for Android Devices (ACSAC ’13).
ACM.
[38] George C. Necula, Scott McPeak, Shree Prakash Rahul, and Westley Weimer. 2002.
CIL: Intermediate Language and Tools for Analysis and Transformation of C
Programs (CC ’02). Springer.
weight Dynamic Binary Instrumentation (PLDI ’07). ACM.
Through Virtualization (VEE ’11). ACM.
code repair (ACSAC ’13). IEEE.
Detection of Out-of-the-guest Malware Analyzers (EUROSEC ’11). ACM.
[43] Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and Zhendong
Su. 2014. X-force: Force-executing Binary Programs for Security Applications
(SEC’14). USENIX Association.
[44] Theofilos Petsios, Vasileios P. Kemerlis, Michalis Polychronakis, and Angelos D.
Keromytis. 2015. DynaGuard: Armoring Canary-based Protections Against Brute-
force Attacks (ACSAC ’15). ACM.
Analysis. Black Hat USA (2017).
[46] Mario Polino, Andrea Continella, Sebastiano Mariani, Stefano D’Alessio, Lorenzo
Fontana, Fabio Gritti, and Stefano Zanero. 2017. Measuring and Defeating Anti-
Instrumentation-Equipped Malware (DIMVA ’17). Springer.
for Virtual Function Calls in COTS C++ Binaries. (NDSS ’15).
[47] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection
[42] Gábor Pék, Boldizsár Bencsáth, and Levente Buttyán. 2011. nEther: In-guest
[45] Jonas Pfoh and Sebastian Vogl. 2017. rVMI: A New Paradigm for Full System
[48] Quarkslab. 2019. QDBI. https://qbdi.quarkslab.com/.
[49] Nguyen Anh Quynh. 2018. SKORPIO: Advanced Binary Instrumentation Frame-
work. (OPCDE ’18).
[50] Ted Romer, Geoff Voelker, Dennis Lee, Alec Wolman, Wayne Wong, Hank Levy,
Instrumentation and Optimization of
Brian Bershad, and Brad Chen. 1997.
Win32/Intel Executables Using Etch (NT’97). USENIX Association.
[51] K. Scott, N. Kumar, S. Velusamy, B. Childers, J. W. Davidson, and M. L. Soffa. 2003.
Retargetable and Reconfigurable Software Dynamic Translation (CGO ’03). IEEE.
[52] A. Skaletsky, T. Devor, N. Chachmon, R. Cohn, K. Hazelwood, V. Vladimirov, and
M. Bach. 2010. Dynamic program analysis of Microsoft Windows applications
(ISPASS ’10). IEEE.
[53] Asia Slowinska, Istvan Haller, Andrei Bacs, Silviu Baranga, and Herbert Bos. 2014.
Data Structure Archaeology: Scrape Away the Dirt and Glue Back the Pieces!
(DIMVA ’14). Springer.
Exploiting and Protecting Dynamic Code Generation (NDSS ’15).
Customized Program Analysis Tools (PLDI ’94). ACM.
[56] Ke Sun, Xiaoning Li, and Ya Ou. 2016. Break Out of the Truman Show: Active
Detection and Escape of Dynamic Binary Instrumentation. Black Hat Asia (2016).
[57] Cisco Talos. 2017. PyREBox. https://github.com/Cisco-Talos/pyrebox.
[58] Rui Wang, XiaoFeng Wang, Kehuan Zhang, and Zhuowei Li. 2008. Towards
Automatic Reverse Engineering of Software Security Configurations (CCS ’08).
ACM.
[59] Tielei Wang, Chengyu Song, and Wenke Lee. 2014. Diagnosis and Emergency
[54] Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski. 2003.
[55] Amitabh Srivastava and Alan Eustace. 1994. ATOM: A System for Building
[60] Xinran Wang, Yoon-Chan Jhi, Sencun Zhu, and Peng Liu. 2009. Behavior Based
[61] Z. Wang, X. Ding, C. Pang, J. Guo, J. Zhu, and B. Mao. 2018. To Detect Stack
Patch Generation for Integer Overflow Exploits (DIMVA ’14). Springer.
Software Theft Detection (CCS ’09). ACM.
Buffer Overflow with Polymorphic Canaries (DSN ’18). IEEE.
[62] Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z. Snow, Fabian
Monrose, and Michalis Polychronakis. 2016. No-Execute-After-Read: Preventing
Code Disclosure in Commodity Software (ASIA CCS ’16). ACM.
[63] Yuan Xiao, Mengyuan Li, Sanchuan Chen, and Yinqian Zhang. 2017. STACCO:
Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabili-
ties in Secure Enclaves (CCS ’17). ACM.
Features for Automated Malware Classification (DIMVA’13). Springer.
[65] Junyuan Zeng, Yangchun Fu, and Zhiqiang Lin. 2015. PEMU: A Pin Highly
Compatible Out-of-VM Dynamic Binary Instrumentation Framework (VEE ’15).
ACM.
[66] Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, and R. Sekar. 2014. A Platform for
[64] Guanhua Yan, Nathan Brown, and Deguang Kong. 2013. Exploring Discriminatory
Secure Static Binary Instrumentation (VEE ’14). ACM.
[67] Xiaolan Zhang, Zheng Wang, Nicholas Gloy, J. Bradley Chen, and Michael D.
Smith. 1997. System Support for Automatic Profiling and Optimization (SOSP
’97). ACM.
[68] Jingyu Zhou and Giovanni Vigna. 2004. Detecting Attacks That Exploit
Application-Logic Errors Through Application-Level Auditing (ACSAC ’04). IEEE.
SoK: Using Dynamic Binary Instrumentation for Security
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
Suite
CINT
CFP
Name
ID
perlbench
400
bzip2
401
403
gcc
429 mcf
gobmk
445
hmmer
456
sjeng
458
h264ref
464
omnetpp
471
473
astar
433 milc
444
namd
soplex
450
povray
453
lbm
470
482
sphinx3
Table 2: Integer and floating-point C/C++ benchmarks.
Figure 2: Slowdown for integer benchmarks.
Figure 3: Slowdown for floating-point benchmarks.
faster in the tests we conducted: while the guards we insert incur a
O(1) lookup inside an array, PinShield scans a linked list of known
memory ranges for every memory read or write access. As we
mentioned in Section 5.2, pointer leaks via x87 instructions and
NX/page guard conformance checking are not handled by PinShield.
A COMPLETE EXPERIMENTAL RESULTS
In the following we describe the experimental setup used for a
preliminary assessment of the performance impact of the stopgap
measures we implemented as a high-level library for analysis tools,
and present complete results for the corpus of C/C++ benchmarks
in the SPEC CPU2006 suite (Table 2) that we used to measure it.
We use Pin 3.5 running on a Windows 7 SP1 32-bit machine
with negligible background activity. For each experiment we use a
clean virtual machine with 1 CPU core and 3 GB of RAM hosted on
VirtualBox 5.2.6 running on a server with Debian 9.6 Stretch and two
Intel Xeon E5-4610 processors. Both the library and the benchmarks
are compiled using Visual Studio 2010 in Release configuration. We
consider the average value for 9 trials of each configuration.
For integer benchmarks we can see from Figure 2 that the impact
of the mitigation for pointer leaks is small, with a slowdown in
the worst case as high as 1.09x compared to an execution under
Pin with no instrumentation and analysis code. The overhead orig-
inates from spilling the x87 instruction pointer to a tool register
at every non-control FPU instruction, with the JIT compiler of Pin
taking care of register reallocation. The impact of the NX miti-
gation, which protects instruction fetching from non-executable
or guarded7 pages, is intuitively related to the number of indirect
transfers (call, ret, and jump operations) in the program, with a
peak of 1.17x for benchmark omnetpp (417). The overhead from
shepherding every read/write memory access to protect the code
cache and other regions of the runtime ranges from 2.31x to 5.02x.
Combining the three mitigations in the full configuration incurs
an overhead very similar to the one from RW, which unsurprisingly
is by far the most expensive on these benchmarks. However in
some cases the overhead of full might be slightly lower than having
the sole RW mitigation active. Once we ruled out noise in time
measurements, we believe the cause might lie in how the quality
of the JIT-ted code is affected by the guards inserted for NX and
RW as well as by the register re-allocation caused by spilling tool
registers in the implementation of the leak and RW mitigations.
The paranoid mode is clearly more expensive as it shepherds
every instruction fetch to enforce NX and page guard protection on
code that crosses the border of two pages with different permissions
with no intervening jumps, and verifies read/write permissions for
push and pop operations for when the stack pointer may be used
as a general-purpose register.
For floating-point benchmarks we can observe similar trends
as for the integer ones with two notable exceptions: namd (444)
and sphinx3 (482). We can see that for these two benchmarks the
NX mitigation incurs a overhead considerably higher than in the
other programs from the CINT and CFP sets. A first inspection of
the execution profiles seems to suggest that both programs make
a high usage of indirect control transfers, and the insertion of
guards for such transfers may affect the trace linking process inside
Pin or other aspects of the JIT compilation process. Unfortunately
we could not verify this claim by monitoring the code generation
process due to the closed-source nature of Pin.
Compared to the original implementation of PinShield8, the RW
mitigation from our library was at least one order of magnitude
7Pin by design already handles page guards for read and write operations correctly.
8https://github.com/Phat3/PINdemonium/.
012345678910400401403429445456458464471473Slowdown w.r.t. PinSPEC CPU2006 CINT benchmarksleaknxrwfullparanoid1.011.01.031.091.011.001.021.01.091.021.111.031.151.061.11.011.061.01.171.053.822.953.662.313.525.022.73.744.392.613.912.983.732.253.555.02.73.794.622.597.025.926.624.436.428.055.85.877.254.950.1110100433444450453470482Slowdown w.r.t. PinSPEC CPU2006 CFP benchmarksleaknxrwfullparanoid1.01.241.131.171.031.131.08.051.071.431.011.471.912.233.374.011.8316.072.112.523.534.351.9916.453.0816.336.587.12.8320.16