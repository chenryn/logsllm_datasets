server.cn7788.com(192.168.1.205) access to /run/client.cn7788.com [save]
Debug: Creating new connection for https://client.cn7788.com:8139
Debug:Finishing transaction 69854562006000
puppet/ssl]
Debug:
Debug:
Debug:
Debug:
listen = true
Debug:
Deb
bug:
:/File[/var/lib/puppet/preview]:Autorequiring File[/var/lib/puppet]
/File[/var/lib/puppet/ssl/certs]:Autorequiring File[/var/lib/puppet/ssl]
/File[/var/lib/puppet/ssl/crl.pem]:Autorequiring File[/var/lib/puppet/ssl
/File[/var/lib/puppet/ssl/private]:Autorequiring File[/var/lib/puppet/ssl]
/File[/var/lib/puppet/ssl/certs/ca.pem]:Autorequiring File[/var/lib/
/File[/var/lib/puppet/ssl/public_keys]:Autorequiring File[/var/lib
/File[/var/lib/puppet/facts.d]:Autorequiring File[/var/lib/puppet]
/File[/var/lib/puppet/ssl]:Autorequiring File[/var/lib/puppet]
/File[/var/lib/puppet/ssl/private_keys/server.cn7788.com.pem]:
 /File[/var/lib/puppet/ssl/private_keys]: Autorequiring File[/var/lib/
/File[/var/lib/puppet/ssl/certs/server.cn7788.com.pem]: Autorequiring
at:119
---
## Page 115
来了：
rsync 进程其实没有正确启动，所以我们还要用如下命令来检查下：
为 no，并重启xinetd 进程，如下所示：
以保证通过 rsync 同步过去的文件属性。我这里采用 xinetd 管理 rsync，将其中的 disable 改
并将/etc/rsyncd.pass复制到/etc/puppet/modules/wwwrsync/files 目录下，命令如下所示：
mkdir -p /etc/puppet/modules/wwwrsync/{manifests,files,templates}
（5）创建名为rsyncfile的模块，命令如下所示：
命令显示结果如下，这表明rsync 进程已经在监听 873 端口了，服务已经被正确启动起
到了这一步其实还要仔细检查一下，有时因为配置文件的错误或文件权限分配的错误，
cp/etc/rsyncd.pass/etc/puppet/modules/wwwrsync/files/
lsof -i:873
service xinetd restart
我们的Apache服务的属主和属组是www:www，
xinetd
COMMAND
secretsfile =/etc/rsyncd.password
auth users = test
hosts a11ow = 192.168.1.0/255.255.255.0
read only= no
path=/var/www/html/
（4）配置 Puppet服务器端的 rsync 服务，/etc/rsyncd.conf文件内容如下所示：
list=no
ignoreerrors
[MMM]
logfile=/var/log/rsyncd.1og
pidfile=/var/run/rsyncd.pid
timeout=600
gid=
test101
/etc/rsyncd.pass文件内容如下所示：
ock file=
test:test101
WwW
7008root
PID USER
/var/run/rsyncd.lock
5u
IPV424249
TYPE DEVICE SIZE/OFF NODE NAME
Oto
第4章集中配置管理工具Puppet
，让rsync也以www用户运行，这样可
TCP *:rSync (LISTEN)
6
---
## Page 116
默认节点，它会将wwwrsync类中的内容应用到所有主机上面，其内容如下所示：
生成/var/www/htnl目录；第二个是fle和exec命令，它会将/etc/puppet/modules/wwwrsync/
资源包，如果此服务没有安装的话，Puppet客户端会自行安装httpd服务，保证在本机自动
类，init.pp 文件内容如下所示：
192.168.1.205，这点请大家注意不要产生混淆。
100
（8）我们在 server.cn7788.com上面执行推送命令，命令如下所示：
（7）我们接着在/etc/puppet/manifetes/site.pp 中定义一个 default 的特殊节点，这是一个
注意
init.pp 文件包含了名为wwwrsync 的类，此类包含了三个资源，第一个是名为 httpd的
nodedefault{
path=>["/usr/bin"，"/usr/sbin","/bin","/bin/sh"],
user =>"root",
command=>"rsync-vzrtopg
exec{
mode=>"600",
group =>"root",
owner =>"root",
source =>"puppet://server.cn7788.com/modules/wwwrsync/rsyncd.pass",
"/etc/rsyncd.pass":
file{
ensure => present
package{httpd:
class wwwrsync{
include wwwrsync
-password-file=/etc/rsyncd.pass",
"autorsyncwebdirectory":
请注意多查看 Puppet 和系统日志。
在连接服务器端时会产生找不到wwwrsync 类名的报错，实验过程中如果遇到错误，
wwwrsync模块中定义的wwwrsync类要跟wwwrsync模块同名，不然Puppet客户端
运维前线：一线运维专家的运维方法、技巧与实践
-delete
PI:EMAIL::www
/var/www/html
达
---
## Page 117
cn7788.com机器的messages 日志，结果如下所示：
cn7788.com的/var/www/html目录同步了，从而实现了此需求，我们用tail命令观察testl.
我们观察名为client.cn7788.com的节点机器，它的/var/www/html文件立即就跟 server.
rsync web directoryl/returns) executed successfully
Nov
seconds
Nov
rsync web directory]/returns) executed successfully
Nov
fabric.cn7788.com
c1ient.cn7788.com
/etc/puppet/iplist.txt文件内容如下所示：
client.cn7788.com finished with exit code 0
status is success
Gettingstatus
Debug: Creating new connection for https://client.cn7788.com:8139
Debug:Finishing transaction69995814564700
Debug: /File[/var/lib/puppet/preview]: Autorequiring File[/var/lib/puppet]
puppet/ssl]
Debug: /File[/var/lib/puppet/ssl/public_keys]: Autorequiring File[/var/lib/
Debug:
Debug:
Debug:
Debug:
var/lib/puppet/ssl]
Debug:
Autorequiring File[/var/lib/puppet/ssl/private_keys]
Debug:
puppet/ssl]
Debug:/File[/var/lib/puppet/ssl/private_keys]: Autorequiring File[/var/lib/
Debug:/File[/var/lib/puppet/ssl/certs/server.cn7788.com.pem]: Autorequiring
Autorequiring File[/var/lib/puppet/ssl/public_keys]
Debug:
puppet/ssl/certs]
Debug:
for /var/lib/puppet/ssl/certs
Debug:/File[/var/lib/puppet/ssl/certs]/selrange: Found selrange default 's0
命令结果如下所示(反馈结果太长，这里只截取部分)：
puppetkick-d
5 03:41:50 client puppet-agent[28422]: (/Stage[main]/Wwwrsync/Exec[auto
5 03:26:46 client puppet-agent[27782]: (/Stage[main]/Wwwrsync/Exec[auto
5 03:26:47 client puppet-agent[27782]: Finished catalog run in 0.74
:/File[/var/lib/puppet/facts.d]: Autorequiring File[/var/lib/puppet]
/File[/var/lib/puppet/ssl/certs]:Autorequiring File[/var/lib/puppet/ssl]
/File[/var/lib/puppet/ssl]:
/File[/var/lib/puppet/ssl/crl.pem]:
/File[/var/lib/puppet/state]:Autorequiring File[/var/lib/puppet]
/File[/var/lib/puppet/ssl/certificate_requests]: Autorequiring File[/
/File[/var/lib/puppet/ssl/private_keys/server.cn7788.com.pem]:
/File[/var/lib/puppet/ssl/public_keys/server.cn7788.com.pem]
/File[/var/lib/puppet/ssl/certs/ca.pem]: Autorequiring File[/var/lib/
--host
cat
/etc/puppet/iplist.txt
Autorequiring File[/var/lib/puppet]
第4章集中配置管理工具Puppet101
---
## Page 118
用ERB模板的方案，我们在这里先以Apache为例来说明下，其模块的目录树结构如下：
不同的配置就可以考虑使用模板文件，例如Nginx和Apache的虚拟主机配置就可以考虑采
以“.erb”结尾的文件，Puppet模板主要用于文件，例如各种服务的配置文件，相同的服务，
达到几十台之多，这种情况下，如何能够方便快速地部署httpd.conf和虚拟主机配置文件呢？
4.7
102运维前线：一线运维专家的运维方法、技巧与实践
这里就需要用到 Puppet 的ERB 模板功能了，模板文件就是在模块下面 templates目录中
线上环境有不少Apache 主机需要增加基于域名的虚拟主机，特别是有的机器，虚拟主机
11 directories,9 files
/etc/puppet/
如何利用ERB模板自动配置Apache虚拟主机
seconds
rsync web directory]/returns)executed successfully
Nov
seconds
Nov5 04:11:52 client puppet-agent[28690]:Finished catalog run in 1.97
(syncd.pass]/content)
Nov
rsync web directory]/returns)executed successfully
Nov
seconds
Nov
504:14:25 client puppet-agent[27782]:(/Stage[main]/Wwwrsync/Exec[auto
504:14:17client puppet-agent[27782]:triggered run
504:11:50 client puppet-agent[28690]:
puppet.conf
auth.conf
5 04:11:50 client puppet-agent[28690]:(/Stage[main]/Wwwrsync/Exec[auto
5
modules
manifests
fileserver.conf
environments
503:41:51 client puppet-agent[28422]:Finished catalog run in 1.32
apache
site.pp
nodes
example_env
L
files
templates
README.environment
modules
manifests
manifests
nginx.pp
client.pp
-httpd.conf.erb
content
(/Stage[main]/Wwwrsync/File[/etc)
---
## Page 119
式来定义变量，我们可以检测一下模板是否存在语法问题，命令如下：
以可以被声明多次，并且每一个声明都会被求值。
够在一台主机节点机器上被包含多次，但是只会被求值一次；而定义因为能够接受参数，
点是能够在一台主机上被赋值多次，此外它还能接受参数。类在Puppet 中是单例的，它们能
erb -x -T'-'-P/etc/puppet/modules/apache/templates/httpd.conf.erb | ruby -c
在 httpd.conf.erb 中我们提前定义了两个变量 Ssitedomain、$port，Puppet 中使用这种格
（3）/etc/puppet/modules/apache/templates 中的 httpd.conf.erb 模板文件内容如下所示：
这里用到了Puppet中defind（定义）的概念，定义和类都属于资源容器，不过定义的特
define apache::vhost （ $sitedomain, $rootdir,$port ）{
(2）/etc/puppet/modules/apache/manifests/init.p 文件内容如下所示:
mkdir -p /etc/puppet/modules/apache/(files,manifests,templates}
（1）首先我们建立一个Apache模块，命令如下所示：
CustomLog logs/_access.log common
ErrorLog logs/_error.log
DocumentRoot/var/www/html/
ServerName
>
class apache
Apache模块的具体配置步骤如下。
>
file ( "/etc/httpd/conf.d/httpd_vhost_$(sitedomain).conf":
Allowfrom all
Orderallow,deny
AllowOverride None
 Options Indexes FollowSymLinks
#path
require
ensure
service{"httpd":
require =>Package["httpd"],
content => template("apache/httpd.conf.erb"),
ensure
=>'/etc/httpd/conf/httpd_vhost.conf',
=>Package["httpd"],
=>running,
=>present
第4章集中配置管理工具Puppet103
所
---
## Page 120
puppet/manifests/nodes/nginx.pp 文件内容如下：
104
node 'client.cn7788.com'{
另一台节点机器 client.cn7788.com的 client.pp 配置文件内容，如下所示:
apache::vhost ('webrsync.cn7788.com':
node 'nginx.cn7788.com'
其下目录 nodes 中有两个文件：一个为 client.pp，另一个为 nginx.pp。 server 机器的 /etc/
import 'nodes/*.pp'
（4）server 机器的 /etc/puppet/manifests/site.pp 内容如下：
结果显示如下，表示语法不存在任何问题：
SyntaxOK
sitedomain => "webtest.cn7788.com",
apache::vhost {'clienttest.cn7788.com':
port => 80,
sitedomain => "webmaster.cn7788.com",