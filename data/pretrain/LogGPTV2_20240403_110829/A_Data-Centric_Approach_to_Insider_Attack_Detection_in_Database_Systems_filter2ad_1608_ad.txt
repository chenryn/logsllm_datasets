attribute, this is likely to reﬂect in anomalous values for several S-Vector dimen-
sions; thus, the number of anomalous dimensions for the S-Vector is a parameter
that can be used for ranking potential query anomalies (i.e., queries with more
anomalous S-Vector dimensions rank high as likely candidates for possible at-
tacks). We utilize this approach for testing the custom-developed anomaly set
– normal Chair and Faculty queries are used to compute the mean values of S-
Vector attributes; three times the standard-deviation is again used as an anomaly
separator.
A typical performance result with two user roles (Chair and Faculty) and
corresponding anomalous query set is shown in Table 4.
With respect to the performance of the cluster-based outlier detection algo-
rithm, a few points are worth noticing. As expected, the syntax-based schemes
show poor performance (since they are essentially ‘blind’ by design to the Type
2b anomalies). The detection rate for the S-Vector (all) is reasonable (83.87%).
However, the Inital-k approximation’s accuracy suﬀers signiﬁcantly. Upon care-
ful inspection, we ﬁnd that many of the user queries make extensive use of the
SQL ORDER-BY clause, which makes the Initial-k statistics unrepresentative
of the overall result set statistics. This is ameliorated to some extent by the
Random-k variation (e.g., for random k = 20, the detection rate improves to
67.7%); however, there is still a marked decline in performance indicating that
the clustering scheme is sensitive to the approximation schemes and is aﬀected
negatively by them. Further analysis into the clustering reveals that this might
not be a good choice for this type of anomaly detection. Although anomalies
with signiﬁcant variations in multiple dimensions are easily detected by cluster-
ing (as is the case with type-1 and type-2a anomalies), this may not be true
with type-2b anomalies. Firstly, Euclidean distances in high-dimensional space
may be misleading indicators of anomalies because of the curse of dimensional-
ity. For example, it is possible to have a highly anomalous value along a single
dimension, which may not translate to a signiﬁcant Euclidean cluster-distance
(and vice-versa).
The results for Attrib-Deviation are much better. The syntax based schemes
still perform poorly as expected. The data-centric schemes are much better,
with detection rates close to 87%, better than the cluster-based schemes. The
more important ﬁnding is that the attribute-deviation schemes are remarkably
resilient to the approximation method. Both Inital-k and Random-k perform as
well as the full vector representation; and the Inital-k performs unexpectedly
well even with queries generating speciﬁc ordering of results.
The resiliency and accuracy of Attrib-Deviation can partially explained as
follows. First, note that a single anomalous attribute in the result corresponds
to variations in multiple dimensions of the S-Vector, each of which represents
a statistical measurement. Also the extent of the anomaly may vary between
result attributes (e.g., some attributes may have more atypical values). While a
selective ordering (e.g., by SQL ORDER-BY clauses) may oﬀer a skewed view
of overall result statistics, the Attrib-Deviation technique operates on a per-
attribute basis and is thus still able to identify anomalies. Secondly, many queries
have more than one anomalous attribute; hence selective ordering may mask
anomalies in some attributes, but not all of them. Thirdly, the selective ordering
may not aﬀect all statistical measurements of a single attribute equally (e.g., it
may aﬀect Max, but not Median). It is only when k is very low (k = 5) that
inital-k performance drops,however Random-k as expected still oﬀers reasonable
performace.
We believe that the good performance of the Inital-k approximation with
this detection technique has several practical implications. First, it indicates
that a fast online anomaly detector can perform well by considering just a few
(as long as it is not too few) initial output tuples. Randomized sampling of
query results may not be feasible in general, especially for queries generating
hundreds or thousands of output tuples (e.g., due to performance constraints),
but our results here indicate that accuracy may not have to be sacriﬁced always
in the process of giving up random sampling. Further, we also believe that the S-
Vector representation scheme and attribute-deviation based anomaly detection
algorithm are quite resilient to attacks designed to mislead or bypass detection.
It is very diﬃcult for an attacker to craft queries so that multiple statistical
measurements are controlled. A theoretical explanation of this intuition is an
interesting research problem.
On the minus side, the false positive rates are still too high for the Attrib-
Deviation schemes. Reducing the false-positive rates while maintaining/increasing
the accuracy (true positive rates) is an important research question, which we
plan to address in future works.
7 Concluding Remarks and Future Work
Queries: We construct the S-vectors by expressing the schema of each query
result in terms of the attributes of the base schema. For select-project-join
(SPJ) queries on base relations, the base schema is easily determined. When
SPJ queries are also expressed on top of views, then we employed the view un-
folding technique [30] to determine the base schema. View unfolding recursively
replaces references to a view in a query expression with its corresponding view
deﬁnition. For a class of queries larger than SPJ queries on base relations and
views, it is not clear if the base schema can be determined. For example, union
queries can map two diﬀerent attributes in base relations into a single one in the
query result, as the following example shows:
SELECT g.name, g.gpa
FROM GRADS g
UNION
SELECT u.name, u.gpa
FROM UGRADS u;
Here, there is no dimension in the S-vector to accommodate the ﬁrst attribute
of the query result. The same is true for computed attributes in results of com-
plex (aggregation, group-by) queries. To accommodate such cases, we plan to
investigate data provenance techniques [31] and revise the deﬁnition and the use
of the S-vector accordingly.
Databases: The framework proposed in this paper assumes that the under-
lying database is static, i.e., there are no updates. Although this assumption is
adequate for certain classes of databases (e.g., US census database), we plan to
extend our work to dynamic databases. The ﬁrst challenge is to determine if
and when updates shift the boundary between normal and abnormal queries. If
the database instance is updated signiﬁcantly, then the classiﬁers become obso-
lete and two things need to be done: (a) detect when a phase shift occurs and
re-train, and (b) adopt some form of reenforcement and/or online learing.
For relatively less dynamic databases where updates are less frequent, such
as OLAP databases that are heavily used for business intelligence and hence
are good targets for insider attacks, it is possible to still apply the data-centric
approach, depending on the relative frequency between re-training and data
updates. For instance, one can keep a history of legitimate user queries, re-
execute them on the new data when the data changes are suﬃciently heavy, and
use the new result sets to re-train the machine learning model.
Another approach is to separate parts of the schema where data does not
change very often and the part that does. Then, the data-centric approach can
be applied to the ”projection” of the data space which is static, and the syntax-
centric approach can be applied to the dynamic part of the data. This separation
can also be done automatically as one can keep track of the statistics of various
attributes in the universal table. For example, attributes with high variation
over time are more dynamic than others (E.g., Social security numbers, bank
accounts of existing customers, dates of births, addresses, and similar ﬁelds are
mostly static attributes).
Activity context: In our approach, the context of a user’s activity is a set of
query results generated in the past by the same user or the group in which she
belongs. We plan to investigate richer activity contexts and examine their eﬀec-
tiveness in detecting sophisticated attacks. Such contexts might include statistics
of a user’s session with the database, temporal and spatial correlations of the
query results, and so on.
Performance: In cases where user queries return a signiﬁcantly large number
of results, computing statistics over the entire query result for anomaly detection
is unacceptable from a performance standpoint. The initial-k approximation
proposed in Section 6 can help improve performance without sacriﬁcing too
much accuracy. One potential drawback of this approach is that the queries in
the training set might sort the results by a diﬀerent attribute or in diﬀerent
order (ascending, descending) than an otherwise normal user query, thus leading
to false positives. A possible solution to this problem is to choose one attribute
of each base relation as the default order by attribute. Then, for every query in
the training set add a designated ORDER BY clause that orders the result by
the chosen attribute of the ﬁrst base relation (alphabetically) used in the query.
When a user query is submitted, the system submits a “shadow query” with the
designated ORDER BY clause and uses this query result for detection.
Another source of performance improvement might be to design a new sta-
tistical model based on both the syntax-based and the data-centric approaches.
In cases where we are relatively conﬁdent that the syntax-based approach gives
a true prositive, we may want to skip the data-centric engine altogether to avoid
the database execution. In terms of accuracy, a good combined classiﬁer might
perform better too.
Although random-k does not markedly outperform initial-k in our experi-
ments, we expect random-k to perform consistently for a wider range of datasets
and queries. Of course, a problem that arises then is how to sample a query
result without computing the complete result, given that RDBMSs follow the
pipelined query execution model. For this hard problem, we plan to leverage
prior work on both SPJ queries [32, 33] and queries for data analytics in the area
of approximate query answering [34–36].
In conclusion, the techniques that we have presented and analyzed in this
paper show signiﬁcant potential as practical solutions for anomaly detection
and insider threat mitigation in database systems. Many open research issues
still remain. We aim to develop and present more eﬃcient and practical solutions
to these in future work.
References
1. : Owasp top 10 2007. http://www.owasp.org/index.php/Top 10 2007 (2007)
2. : Owasp-sql injection prevention cheat sheet. http://www.owasp.org/index.php/
SQL Injection Prevention Cheat Sheet (2008)
3. Schneier, B.: Secrets and Lies: Digital Security in a Networked World. John Wiley
and Sons, New York, NY (2000)
4. Bishop, M.: The insider problem revisited. In: Proc. of the 2005 Workshop on New
Security Paradigms (NSPW’05). (2005) 75–76
5. CSO Magazine, U.S. Secret Service, CERT, Microsoft: 2007 E-Crime Watch Survey
(2007)
6. Cappelli, D.: Preventing insider sabotage: Lessons learned from actual attacks
(2005)
7. Brackney, R., Anderson, R.: Understanding the Insider Threat: Proceedings of a
March 2004 Workshop. RAND Corp (2004)
8. Schonlau, M., DuMouchel, W., Ju, W., Karr, A., Theus, M., Vardi, Y.: Computer
intrusion: Detecting masquerades. Statistical Science 16(1) (2001) 58–74
9. Chung, C.Y., Gertz, M., Levitt, K.: Demids: a misuse detection system for database
systems. In: Integrity and Internal Control Information Systems: Strategic Views
on the Need for Control. Kluwer Academic Publishers, Norwell, MA (2000) 159–
178
10. Lee, S.Y., Low, W.L., Wong, P.Y.: Learning ﬁngerprints for a database intru-
sion detection system. In: Proc. of the 7th European Symposium on Research in
Computer Security (ESORICS’02). (2002) 264–280
11. Hu, Y., Panda, B.: Identiﬁcation of malicious transactions in database systems. In:
Proc. of the 7th International Database Engineering and Applications Symposium.
(2003) 329–335
12. Valeur, F., Mutz, D., Vigna, G.: A learning-based approach to the detection of
sql attacks. In: Proc. of the Conference on Detection of Intrusions and Malware &
Vulnerability Assessment (DIMVA ’05). (2005) 123–140
13. Spalka, A., Lehnhardt, J.: A comprehensive approach to anomaly detection in
relational databases. In: DBSec. (2005) 207–221
14. Kamra, A., Terzi, E., Bertino, E.: Detecting anomalous access patterns in relational
databases. The VLDB Journal 17(5) (2008) 1063–1077
15. Liu, P.: Architectures for intrusion tolerant database systems. In: Proc. of the 18th
Annual Computer Security Applications Conference (ACSAC ’02). (2002) 311
16. Wenhui, S., Tan, D.: A novel intrusion detection system model for securing web-
based database systems. In: Proc. of the 25th International Computer Software
and Applications Conference on Invigorating Software Development (COMPSAC
’01). (2001) 249
17. Lee, V.C., Stankovic, J., Son, S.H.: Intrusion detection in real-time database sys-
tems via time signatures. In: Proc. of the Sixth IEEE Real Time Technology and
Applications Symposium (RTAS’00). (2000) 124
18. Kruegel, C., Vigna, G.: Anomaly detection of web-based attacks.
In: Proc. of
the 10th ACM conference on Computers and Communications Security (CCS’03).
(2003) 251–261
19. Srivastava, A., Sural, S., Majumdar, A.K.: Database intrusion detection using
weighted sequence mining. Journal of Computers 1(4) (2006) 8–17
20. Roichman, A., Gudes, E.: Diweda – detecting intrusions in web databases. In: Proc.
of the 22nd annual IFIP WG 11.3 working conference on Data and Applications
Security. (2008) 313–329
21. Fonseca, J., Vieira, M., Madeira, H.: Online detection of malicious data access
using dbms auditing. In: Proc. of the 2008 ACM symposium on Applied Computing
(SAC’08). (2008) 1013–1020
22. Yao, Q., An, A., Huang, X.: Finding and analyzing database user sessions. In:
Proc. of Database Systems for Advanced Applications. (2005) 283–308
23. Ramasubramanian, P., Kannan, A.:
Intelligent multi-agent based database hy-
brid intrusion prevention system. In: Proc. of the 8th East European Conference
(ADBIS ’04). (2004)
24. Calvanese, D., Giacomo, G.D., Lenzerini, M.: On the decidability of query con-
tainment under constraints. In: Proc. of the ACM SIGMOD-SIGACT-SIGART
Symposium on Principles of Database Systems (PODS ’98). (1998) 149–158
25. Maier, D., Ullman, J.D., Vardi, M.Y.: On the foundations of the universal relation
model. ACM Trans. on Database Syst. 9(2) (1984) 283–308
26. Sandhu, R., Ferraiolo, D., Kuhn, R.: The nist model for role based access control.
In: Proc. of the 5th ACM Workshop on Role Based Access Control. (2000)
27. Agrawal, R., Srikant, R.: Privacy-preserving data mining. In: Proc. of the ACM
SIGMOD Conference on Management of Data (SIGMOD ’00). (2000) 439–450
28. Kenthapadi, K., Mishra, N., Nissim, K.: Simulatable auditing. In: Proc. of the
ACM Symposium on Principles of Database Systems (PODS ’05). (2005) 118–127
29. Bishop, C.M.: Pattern Recognition and Machine Learning. Springer (October
2007)
30. Stonebraker, M.: Implementation of integrity constraints and views by query mod-
iﬁcation. In: SIGMOD Conference. (1975) 65–78
31. Buneman, P., Khanna, S., Tan, W.C.: Why and where: A characterization of data
provenance. In: ICDT. (2001) 316–330
32. Olken, F., Rotem, D.: Simple random sampling from relational databases.
In:
VLDB. (1986) 160–169
33. Chaudhuri, S., Motwani, R., Narasayya, V.R.: On random sampling over joins. In:
SIGMOD Conference. (1999) 263–274
34. Haas, P.J., Hellerstein, J.M.: Ripple joins for online aggregation. In: SIGMOD
Conference. (1999) 287–298
35. Acharya, S., Gibbons, P.B., Poosala, V., Ramaswamy, S.: Join synopses for ap-
proximate query answering. In: SIGMOD Conference. (1999) 275–286
36. Babcock, B., Chaudhuri, S., Das, G.: Dynamic sample selection for approximate
query processing. In: SIGMOD Conference. (2003) 539–550