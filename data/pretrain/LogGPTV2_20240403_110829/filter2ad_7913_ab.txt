readNonProxyDesc方法中返回的ObjectStreamClass类型的desc变量，将会传递给readClassDesc，进而被readClassDesc传递给readOrdinaryObject
readOrdinaryObject、readClassDesc与readNonProxyDesc的调用关系如下：
readOrdinaryObject中调用readClassDesc:
    private Object readOrdinaryObject(boolean unshared) 
    throws IOException 
       {
    ...
    ObjectStreamClass desc = readClassDesc(false);
    ...
readClassDesc中调用readNonProxyDesc:
    private ObjectStreamClass readClassDesc(boolean unshared) 
    throws IOException 
       {
    byte tc = bin.peekByte();
    switch (tc) {
    ...
        case TC_CLASSDESC:
       return readNonProxyDesc(unshared);
因此，当readNonProxyDesc中ObjectStreamClass类型的desc变量返回后，途径readClassDesc方法的最终传递给readOrdinaryObject中的desc变量
接下来看看readOrdinaryObject方法中部分片段
    ObjectStreamClass desc = readClassDesc(false);
    ...
        obj = desc.isInstantiable() ? desc.newInstance() : null;
    ...
    if (desc.isExternalizable()) {
        readExternalData((Externalizable) obj, desc);
    } else {
        readSerialData(obj, desc);
    }
    handles.finish(passHandle);
    if (obj != null && 
        handles.lookupException(passHandle) == null &&
        desc.hasReadResolveMethod())
    {
        Object rep = desc.invokeReadResolve(obj);
上述代码中的第一行：
    ObjectStreamClass desc = readClassDesc(false);
代码中由readClassDesc(false)执行得到的desc，即是readNonProxyDesc中获取并返回的ObjectStreamClass类型的desc
    obj = desc.isInstantiable() ? desc.newInstance() : null;
代码中接下来的条件分支，即是在获取了ObjectStreamClass类型的desc后，readOrdinaryObject接着尝试调用类对象中的readObject、readResolve、readExternal等方法。
关于readObject、readResolve、readExternal等方法的调用，将其整理成流程图，有助于对其更好的理解，流程图如下：
在Weblogic从流量中的序列化类字节段通过readClassDesc-readNonProxyDesc-resolveClass获取到普通类序列化数据的类对象后，程序依次尝试调用类对象中的readObject、readResolve、readExternal等方法。
在这里提前透露下，CVE-2015-4852、CVE-2016-0638、CVE-2016-3510这三个漏洞，所利用的恰好依次是恶意类”sun.reflect.annotation.AnnotationInvocationHandler”中的readObject、”weblogic.jms.common.StreamMessageImpl”中的readExternal、以及”weblogic.corba.utils.MarshalledObject”中的readResolve方法
试想一下这个场景：在没有任何防护或防护不当的时候，攻击者通过流量中传入恶意类的序列化数据，weblogic将流量中的序列化数据还原为其对应的Class对象，并尝试执行恶意类中的readObject、readResolve、readExternal等方法。这就是CVE-2015-4852、CVE-2016-0638、CVE-2016-3510漏洞的核心。
## CVE-2015-4852
在分析过流程之后，这个漏洞呼之欲出。简单来说，在CVE-2015-4852漏洞爆发之前，weblogic对流量中的序列化数据没有任何的校验，长驱直入的恶意数据最终被还原出其Class对象，并被Weblogic调用了其Class对象中的readObject方法，结合CVE-2015-4852细节来说就是：
  1. 精心构造的ChainedTransformer恶意链（以下简称恶意数据）
  2. 将构造好的恶意数据包裹在AnnotationInvocationHandler类的memberValues变量中
  3. 在流量中构造并传入上述制作好的AnnotationInvocationHandler类的序列化数据
  4. Weblogic获取AnnotationInvocationHandler类的Class对象
  5. Weblogic尝试调用AnnotationInvocationHandler类的readObject方法
  6. AnnotationInvocationHandler类中readObject中存在一些有助于漏洞利用的操作（AnnotationInvocationHandler的readObject方法中对其memberValues的每一项调用了setValue方法进而调用了checkSetValue）
  7. 恶意数据存放在memberValues中伺机而动。恶意数据的原理我们就不细说了，简单来说就是，当恶意数据的checkSetValue被触发，就能造成命令执行
  8. 等到readObject方法对memberValues的每一项调用setValue方法执行时，setValue方法会进而调用并触发恶意数据的checkSetValue，造成命令执行
## Weblogic的防护机制
CVE-2015-4852这个漏洞利用出现之后，官方对Weblogic进行了一些改造，增加了一些安全防护。至于怎么防护，说起来很简单，以普通类为例，见下图：
resolveClass方法的作用是从类序列化描述符获取类的Class对象，在resolveClass中增加一个检查，检查一下该类的序列化描述符中记录的类名是否在黑名单上，如果在黑名单上，直接抛出错误，不允许获取恶意的类的Class对象。这样以来，恶意类连生成Class对象的机会都没有，更何况要执行恶意类中的  
readObject、readResolve、readExternal呢。
我们看一下具体是怎么实现的，见下图：
可见更新之后多出了一个if条件分支，通过isBlackListed校验传入的类名用来处理代理类的resolveProxyClass也是一样的方式，不再复述。
从整体上来看，检查模块主要在下图红框里
在修复过后，CVE-2015-4852已经不能成功利用了：CVE-2015-4852所使用到的AnnotationInvocationHandler在黑名单中，会直接报错而不能获取其Class对象，更不能执行其中的readObject。
## CVE-2016-0638
这个漏洞主要是找到了个黑名单之外的类"weblogic.jms.common.StreamMessageImpl"
简单来说，由于黑名单的限制，CVE-2015-4852利用链没法直接使用，这个漏洞像是整了个套娃，给CVE-2015-4852装进去了。
为什么使用StreamMessageImpl这个类呢？其实原理也很简单。StreamMessageImpl类中的readExternal方法可以接收序列化数据作为参数，而当StreamMessageImpl类的readExternal执行时，会反序列化传入的参数并执行该参数反序列化后对应类的readObject方法。我们动态调试一下，见下图
如果我们把序列化后的CVE-2015-4852利用链序列化之后丢进readExternal呢？
当我们给上图StreamMessageImpl类的readExternal中传入序列化后的CVE-2015-4852利用链，在readExternal被执行时，会将CVE-2015-4852利用链数据反序列化，并在上图864行处调用其readObject方法，也就是AnnotationInvocationHandler的readObject方法
好了，AnnotationInvocationHandler的readObject方法被调用了，CVE-2015-4852复活了。
但是StreamMessageImpl类的readExternal要怎么被执行呢?别忘了上文分析的Weblogic反序列化流程，在获取到StreamMessageImpl类的Class对象后，程序可不止调用其readObject方法，还会尝试调用readExternal的。
## CVE-2016-3510
这个漏洞与上一个几乎一致，也是做了个套娃给CVE-2015-4852利用链装进去了，从而绕过了黑名单限制。
这次找到的是weblogic.corba.utils.MarshalledObject
首先看一下这个类的构造方法
    public MarshalledObject(Object var1) throws IOException {
        if (var1 == null) {
            this.hash = 13;
        } else {
            ByteArrayOutputStream var2 = new ByteArrayOutputStream();
            MarshalledObject.MarshalledObjectOutputStream var3 = new MarshalledObject.MarshalledObjectOutputStream(var2);
            var3.writeObject(var1);
            var3.flush();
            this.objBytes = var2.toByteArray();
            int var4 = 0;
            for(int var5 = 0; var5 
## 总结
Weblogic的前三个反序列化漏洞并不复杂，但是对其的研究和分析是有一定的方式的，仅仅从单一的漏洞分析入手，很容易看不懂，反而把漏洞弄得复杂化。在了解了漏洞流程之后，再回头来看，这几个漏洞的原理便呼之欲出。