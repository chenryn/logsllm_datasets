使用`ReflectionConverter` convert处理`java.lang.ProcessBuilder`
，在`duUnmarshal()`方法获取`command`标签和comand标签下的String标签及其参数。（其中String标签下的参数是在下一层convert调用中获取的。）  
调用`this.reflectionProvider.writeField`方法，将参数值传入对象中。  
在按照获取target标签相同的流程获取action标签，最终将start方法存入对象中。  
回到`TreeMapConverter#populateTreeMap`方法中，上述过程中构造的object保存在sortedMap中。且其中的动态代理实现的接口是`java.lang.Comparable`，因此只要调用`java.lang.Comparable`接口中的`compareTo`方法，即可触发动态代理，进入`java.beans.EventHandler`实现类中的`invoke`方法。在`populateTreeMap`方法中调用`putAll`方法，将sortedMap中的对象写入result变量的过程中会调用到`compareTo`，调用链如下。  
进入`java.beans.EventHandler#invoke`方法中，通过反射执行对象中的方法。  
**3.1.2补丁分析**
XStream1.4.7版本中，在`com.thoughtworks.xstream.converters.reflection.ReflectionConverter`添加`type
!=
eventHandlerType`阻止`ReflectionConverter`解析`java.beans.EventHandler`类。从而防御了此漏洞。  
#### 4.2 XStream 远程代码执行漏洞
**1.漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：XStream Remote Code Execution Vulnerability
  * 漏洞编号：CVE-2019-10173
  * 漏洞类型：Remote Code Execution
  * CVSS评分：CVSS v2.0：7.3 ， CVSS v3.0：9.8
  * 漏洞危害等级：高危
**1.2 漏洞概述**
包含类型信息的流在`unmarshalling`时，会再次创建之前写入的对象。因此XStream会基于这些类型信息创建新的实例。攻击者可以操控XML数据，将恶意命令注入在在可以执行任意shell命令的对象中，实现漏洞的利用。
**1.3 漏洞利用条件**
无
**1.4 漏洞影响**
影响版本：  
XStream = 1.4.10  
**1.5 漏洞修复**
获取XStream最新版本，下载链接：
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 环境搭建**
基于Windows平台，使用`环境`目录下的`xstreamdemo`环境，拷贝后使用Idea打开`xstreamdemo`文件夹，下载maven资源，运行DemoApplication类，即可启动环境。效果如图。  
**2.4 漏洞复现**
运行`sniper`工具箱，填写表单信息，点击Attack，效果如图。  
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 代码分析**
CVE-2019-10173漏洞与CVE-2013-7285漏洞原理相同，由于在XStream的安全模式默认不启动，导致防御失效。
**Xstream 1.4.7对于漏洞的防御措施：**
通过在`com.thoughtworks.xstream.converters.reflection.ReflectionConverter`添加`type
!= eventHandlerType`阻止`ReflectionConverter`解析`java.beans.EventHandler`类  
**Xstream 1.4.10漏洞产生原因：**
在`com.thoughtworks.xstream.converters.reflection.ReflectionConverter`类中，canConvert方法中的`type
!= eventHandlerType`被删除了，使得原来的漏洞利用方式可以再次被利用。
由于在Xstream1.4.10中的`com.thoughtworks.xstream.XStream`类增加了`setupDefaultSecurity()`方法和`InternalBlackList`转换器，通过黑名单的形式对漏洞进行防御。但是安全模式默认不开启，必须在初始化后才可以使用，eg：`XStream.setupDefaultSecurity(xStream)`。导致防御失效，造成漏洞的第二次出现。  
**3.1.2补丁分析**
XStream1.4.11版本中，在`com.thoughtworks.xstream.XStream`更改安全模式初始化方法中的`securityInitialized`标志位。在调用`InternalBlackList`转换器中的`canConvert`方法时,可以进行黑名单匹配，从而防御了此漏洞。  
**漏洞防御**
在Xstream1.4.11中的`com.thoughtworks.xstream.XStream`类中`InternalBlackList`类会对`java.beans.EventHandler`进行过滤，`java.beans.EventHandler`执行`marshal`或者`unmarshal`方法时，会抛出异常终止程序。  
#### 4.3 XStream 远程代码执行漏洞
**1.漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：XStream Remote Code Execution Vulnerability
  * 漏洞编号：CVE-2020-26217
  * 漏洞类型：Remote Code Execution
  * CVSS评分：CVSS v2.0：无， CVSS v3.0：8.0
  * 漏洞危害等级：高危
**1.2 漏洞概述**
包含类型信息的流在`unmarshalling`时，会再次创建之前写入的对象。因此XStream会基于这些类型信息创建新的实例。攻击者可以操控XML数据，将恶意命令注入在在可以执行任意shell命令的对象中，实现漏洞的利用。
**1.3 漏洞利用条件**
  * 无
**1.4 漏洞影响**
影响版本：  
XStream = 1.4.13  
**1.5 漏洞修复**
获取XStream最新版本，下载链接：
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 环境搭建**
基于Windows平台，使用`环境`目录下的`xstreamdemo`环境，拷贝后使用Idea打开`xstreamdemo`文件夹，下载maven资源，运行DemoApplication类，即可启动环境。效果如图。  
**2.4 漏洞复现**
运行`sniper`工具箱，填写表单信息，点击Attack，效果如图。  
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 代码分析**
代码分析：传入的payload首先会在`com.thoughtworks.xstream.XStream`的`fromXML()`方法中处理，在进入`unmarshal()`方法中进行解集。  
在`com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy`类中的`unmarshal()`方法中调用`start()`方法进行Java对象转换。  
在`com.thoughtworks.xstream.core.TreeUnmarshaller`类中的`start()`方法通过调用`readClassType()`获取`type`类型。  
在`readClassType()`方法中调用`readClassAttribute`方法。  
进入`readClassAttribute`方法调用`aliasForSystemAttribute`方法获取别名。调用`getAttribute`方法，获取reader对象中记录的外部传入XML数据中是否存在对应的标签，如果不存在则返回null。  
回到`HierarchicalStreams#readClassType`方法中调用`realClass`方法，通过别名在wrapped对象中的Mapper中循环查找，获取与别名对应的类。  
在`DefaultMapper`中，通过反射，获取到string标签传入的class，并将类存入realClassCache对象中。  
回到`TreeUnmarshaller#start`方法，调用`convertAnother`方法。进入`convertAnother`方法后，调用`lookupConverterForType`方法，寻找对应类型的转换器。进入`lookupConverterForType`方法，循环获取转换器列表中的转换器，调用转换器类中的`canConvert`方法判断选出的转换器是否可以对传入的type类型进行转换。  
转换器`ReflectionConverter`中`canConvert`方法判断，传入的type非null，返回true，表示可以使用`ReflectionConverter`转换器进行转换。  
回到`DefaultConverterLookup#lookupConverterForType`方法，将选取的converter与对应的type存入typeToConverterMap。
回到`TreeUnmarshaller#convertAnother`方法中，调用`this.convert`方法。  
首先判断传入的xml数据中是否存在reference标签，如果不存在，则将当前标签压入parentStack栈中，并调用父类的`convert`方法。  
在`com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.duUnmarshal()`方法获取下面的节点元素`iter
java.util.ArrayList$Itr`。  
具体流程如下：调用`getFieldOrNull`方法，判断xml格式中传入的标签名在目标类中是否存在对应属性。  
在调用`reader.getNodeName()`方法获取标签名，并赋值给originalNodeName。  
调用`realMember`方法获取反序列化属性的名称。  
调用`readClassAttribute`方法获取iter标签中传入的类名  
调用`realClass`获取上述过程中类名对应的类，并调用`unmarshallField`方法进行解析。  
进入方法中，寻找对应type的转换器，使用选中的ReflectionConverter转换器进行解组。  
使用`ReflectionConverter` convert处理`java.util.ArrayList$Itr`
，在`duUnmarshal()`方法获取`cursor`标签和`cursor`标签下的参数。（调用`unmarshallField`方法，与上述流程相似）  
调用`this.reflectionProvider.writeField`方法，将参数值传入对象中。  
回到`AbstractReflectionConverter#doUnmarshal`方法中获取后续的标签及其参数（分别为lastRet，expectedModCount，outer-class）。  
按照同样的反序列化流程获取属性值，并写入对象。  
解析outer-class标签，由于type是`java.util.ArrayList`，选择转换器是`CollectionConverter`。  
调用`CollectionConverter#unmarshal`方法进行反序列化。  
调用`CollectionConverter#populateCollection` ->
`CollectionConverter#addCurrentElementToCollection`->`AbstractCollectionConverter#readItem`方法。最终调用realClass方法获取type类，获取过程中将outer-class标签下的子标签存入realClassCache中。  
回到`AbstractCollectionConverter#readBareItem`方法调用`convertAnother`方法，按照之前的流程进行反序列化，为属性赋值，并写入对象。  
最终返回`ProcessBuilder`对象，写入`FilterIterator`对象中。  
在按照获取`java.util.ArrayList$Itr`对象相同的流程获取`javax.imageio.ImageIO$ContainsFilter`对象，通过反序列化为其内部的method属性和name属性进行赋值。
在选择转换器的过程中，由于method属性的类型是`java.lang.reflect.Method`，因此选择对应的转换器为JavaMethodConverter。  
调用`JavaMethodConverter#unmarshal`方法进行xml数据解析，获取java.lang.processBuilder类中的start方法对象，写入到`javax.imageio.ImageIO$ContainsFilter`对象中。  
再按照相同的流程，将start方法名写入name属性中。  
最终在调用`ReflectionProvider#writeField`方法将`javax.imageio.ImageIO$ContainsFilter`对象写进`FilterIterator`对象的filter属性中。  
将`FilterIterator`对象返回给最初的`iterator`对象中。  
调用`iterator.next()`方法时，会调用其实现类`FilterIterator`中的next方法。  
进入调用advance方法，调用filter方法时，会通过反射执行ProcessBuilder对象中的start方法，从而造成代码执行。  
**3.1.2补丁分析**
XStream1.4.11版本中，在`com.thoughtworks.xstream.XStream`更改安全模式初始化方法中的`securityInitialized`标志位。在调用`InternalBlackList`转换器中的`canConvert`方法时,可以进行黑名单匹配，从而防御了此漏洞。  
**漏洞防御**
XStream1.4.14版本中，在`com.thoughtworks.xstream.XStream`的黑名单添加`java.lang.ProcessBuilder`和`javax.imageio.ImageIO$ContainsFilter`。从而防御了此漏洞。  
## 5.漏洞利用
### XStream 远程代码执行漏洞
漏洞利用视频，请转到原文观看，链接：
## 6.参考链接
1.  
2.  
3.  
4.
* * *