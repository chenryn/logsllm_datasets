1
1
36.23
Avg Value
Summary Size Total Time (s)
0.20
1.49
0.46
0.45
0.42
0.34
0.31
38.32
0.19
0.16
1.00
4.78
0.18
5176.90
5141.39
5148.17
4614.00
14970.46
4875.15
3912.44
8154.90
9305.51
1683.32
1.00
4.84
3433.11
0.52
Tag
0.02
Tag (NO)
70.74
Tag&Apply
0.02
Sort
0.01
Filter
-0.01
Aggregate
-0.02
Join
296.11
MapReduce
1.64
DecisionTree
0.0
HashTable
0.0
AES Encryption
-0.01
Neural Net Inference
TextSecure Server
0.02
Table 8: Performance evaluation result of each technique on the test algorithms. OSM refers to optimistic state merging, and ISU to iterative
state unmerging. LoC is the lines of code of each program. Branch refers to the number of branches encountered during a single execution. The
total time includes the execution time of the symbolic execution engine and the solver time of ObliCheck. The average value summary size is
the average length of the value summary, which reﬂects how efﬁciently state merging was done. OSM shows the best performance since it
merges everything and executes a program only once. ObliCheck with ISU has less than 1.64% of the overhead for the test algorithms except
for Tag&Apply and MapReduce. Two algorithms are a false positive and a true negative, which make ObliCheck iterates more.
1.37
2.23
1.43
1.60
1.58
1.61
1.61
2.09
1.01
1.39
1
1
1.44
ObliCheck (OSM + ISU)
Avg Value
Summary Size
1.37
2.23
1.42
1.60
1.58
1.61
1.61
2.20
1.01
1.39
1
1
1.44
Speed Up (×)
(vs MultiSE)
26548.16
3450.60
11167.40
10276.16
35900.39
14380.99
12620.77
212.79
50300.04
10520.75
1.00
1.03
19506.32
(a) Oblivious Tagging (True Negative)
(b) Oblivious Tag and Apply (False Positive)
(c) Non-oblivious Tagging (True Positive)
Figure 6: Total analysis time of MultiSE (conventional state merging) and ObliCheck (domain-speciﬁc merging followed by iterative state
unmerging) over Tag, Tag&Apply, and Tag (Non-oblivious). The total time of MultiSE grows exponentially until the input size 16 and fails to
ﬁnish due to out of memory error after then when it analyzes Tag and Tag&Apply. The total analysis time of ObliCheck grows linearly without
out of memory error. The total time of ObliCheck blows up exponentially when it checks the non-oblivious Tag algorithm. This is because state
merging is not possible after unmerging merged state and the size of state exponentially grows as MultiSE does.
The overhead of iterative state merging is marginal if the al-
gorithm is oblivious. If the algorithm is not oblivious (true
positive) or needs more iterations to turn out to be oblivious
(false positive) it becomes more signiﬁcant. In Tag&Apply, a
false-positive case, the overhead is 70.74%. The additional it-
eration of iterative state unmerging causes this extra execution
to report a correct result. The maximum overhead is 296%
for checking MapReduce in the benchmark suite. Although
iterative state unmerging costs some performance improve-
ment achieved by optimistic state merging for true-positive
cases, ObliCheck achieves a signiﬁcant improvement over
conventional symbolic execution. In MapReduce, ObliCheck
still achieves 212.79× of speedup. This is because ObliCheck
only unmerges the variables affecting the veriﬁcation condi-
tion instead of re-running a program without any merging.
We also demonstrate the scalability of ObliCheck com-
pared with conventional state merging techniques, by running
vanilla MultiSE and ObliCheck over Tag, Tag&Apply and
Non-oblivious Tag algorithms. The algorithms result in a true
negative, false positive and true positive respectively when
checked using optimistic state merging.
Figure 6 shows the results. ObliCheck boasts linear scala-
bility when it checks Tag, and Tag&Apply algorithms, which
are oblivious. In contrast, the runtime of MultiSE grows ex-
ponentially for non-oblivious Tag since it fails to merge the
states in the end. In this case, ObliCheck provides the informa-
tion regarding the program statements where state unmerging
has been applied so that an algorithm designer can manually
inspect and judge a given algorithm is truly non-oblivious.
Table 9 demonstrates the loop summarization performance
of ObliCheck. The number of loops only include ones summa-
rized by ObliCheck. For example, AES Encryption algorithm
contains multiple for loops but only one outermost loop has
the input length in its loop condition. All the other loops are
2232    30th USENIX Security Symposium
USENIX Association
0.010.11101001000020406080100120Total Time (s)Input SizeMultiSE runs outof memory0.010.11101001000020406080100120Total Time (s)Input SizeObliCheckMultiSEMultiSE runs outof memory0.010.111010010002468101214Total Time (s)Input SizeExample
MultiSE ObliCheck
∞
∞
∞
∞
∞
∞
∞
∞
∞
∞
∞
∞
∞
(cid:13) 
× 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
× 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
× 
# of Loops Total Time (s)
0.060
0.062
0.138
0.245
0.290
0.161
0.160
0.439
0.117
0.151
0.017
0.016
0.065
Tag
Tag (NO)
Tag&Apply
Sort
Filter
Aggregate
Join
MapReduce
DecisionTree
HashTable
AES Encryption
Neural Net Inference
TextSecure Server
Table 9: Loop invariant generation test result. The # of Loops col-
umn includes the number of loops summarized by ObliCheck. ∞
means the checking process runs inﬁnitely. MultiSE runs inﬁnitely
for all test algorithms because of input-dependent loops. ObliCheck
classiﬁes each algorithm correctly by summarizing the loops.
2
2
2
30
34
30
30
26
5
6
5
5
2
constants. As we discussed in §4.1, MultiSE runs inﬁnitely
when a given algorithm contains input-dependent loops and
thus cannot verify it. In contrast, ObliCheck generates loop
invariants automatically and classiﬁes every test algorithm
correctly within a second.
7.5 Case Study on the Applications
ObliCheck boasts the biggest speedup on the Decision Tree
application. The code in Listing 5 is from the application.
A decision tree compares a given input and intermediate de-
cision nodes to provide a prediction result. The oblivious
decision tree keeps accessing the rest of the layers even after
ﬁnding a leaf node to keep the visible access patterns the same
regardless of the input value. Regular symbolic execution suf-
fers from the path explosion since it diverges at every iteration
due to the branch statement. In contrast, ObliCheck merges
the branch statement and correctly judges the obliviousness
of a program with the orders of magnitude speedup.
if (privateData  layers[i][cur]) {
cur = cur * 2;
1 var cur = 0, found = 0;
2 for (var i = 0; i < layerLen; i++) {
3
4
5
6
7
8
9
10
11 }
found = cur;
cur = cur * 2;
cur = cur * 2 + 1;
} else {
}
Listing 5: A branch statement from Decision Tree.
ObliCheck accomplishes a speedup on the Hash Table ap-
plication similarly. In Listing 6 from Hash Table, ObliCheck
merges the if statement that calculates the index of a bucket.
The x variable is used to calculate the remainder based on the
length of the cache line. This modulo operation ﬁgures out
at which index privateData[i] should be inserted. This
merging prevents the path explosion problem.
1 for (var i = 0; i < cacheLineLen; i++) {
2
3
4
5
6
7
8
for (var j = 0; j < dataLen; j++) {
var x = readSecretInput();
if (x * cacheLineLen + i ==
privateData[j]) {
cacheLines[i][nextAvailableCache[i]] =
privateData[i];
nextAvailableCache[i] += 1;
} else {
cacheLines[i][dummySlot] =
privateData[i];
}
}
9
10
11 }
Listing 6: A branch statement from Hash Table
8 Discussion
8.1 Generalization for Checking Other Side Channels
ObliCheck proves the absence of the access pattern side-
channel by keeping the access sequence as a program state.
Based on the recorded state, ObliCheck checks whether the
predeﬁned veriﬁcation condition holds at the end of symbolic
execution. The oblivious property enforced by ObliCheck
guarantees the absence of the access pattern based side-
channel leakage at the algorithm level. In principle, other
types of side-channel leakage can also be veriﬁed similarly.
For example, one can model timing side-channels by record-
ing the number of steps of an algorithm while symbolically
executing an algorithm. In contrast to existing works that rule
out algorithms with secret dependent branches and memory
accesses entirely [15, 69], comparing the time it takes to ﬁn-
ish each execution path directly is a more precise approach.
By (1) modeling observable behavior of an algorithm as pro-
gram state during the symbolic execution, and (2) deﬁning
the veriﬁcation condition based on the state, one can prove
the side-channel leakage using the same technique used in
ObliCheck. We leave the generalization of our technique for
different types of side-channels as future work.
8.2 Checking Probabilistically Deﬁned Obliviousness
ObliCheck checks if a given algorithm has the same determin-
istic access sequence across all possible inputs. In contrast, the
original ORAM work deﬁnes obliviousness probabilistically.
To verify the obliviousness condition in this case, a checker
should keep the probability distribution of access sequences
and verify the distributions of any two inputs are indistin-
guishable. For this, a symbolic execution engine should be
able to capture how a variable with probability distribution is
transformed over the algorithm execution. Several techniques
have been proposed recently to automatically verify differ-
ential privacy, which certiﬁes the distance between any two
algorithm outputs is within a concrete bound [9, 13, 76]. For
example, LightDP [76] provides a language with a lightweight
dependent type incorporating probability distribution. Sim-
ilarly, ObliCheck can be extended with APIs or with a new
domain-speciﬁc language (DSL) to capture probability distri-
USENIX Association
30th USENIX Security Symposium    2233
bution, and its transformation during the execution. The ﬁnal
veriﬁcation condition checks the statistical distance of the
observable state for any two inputs. This interesting direction
requires further investigation and we leave it for future work.
8.3 Checking Algorithms in a Different Programming
Language
Although core techniques of ObliCheck can be implemented
in any other languages, we found Javascript is the right choice
as a modeling language in most cases. It is a dynamic lan-
guage that does not require static typing, compilation, and
explicit memory management. These characteristics facili-
tate rapid prototyping of an algorithm to quickly check its