title:A Systematic Evaluation of Transient Execution Attacks and Defenses
author:Claudio Canella and
Jo Van Bulck and
Michael Schwarz and
Moritz Lipp and
Benjamin von Berg and
Philipp Ortner and
Frank Piessens and
Dmitry Evtyushkin and
Daniel Gruss
A Systematic Evaluation of Transient Execution 
Attacks and Defenses
Claudio Canella, Graz University of Technology; Jo Van Bulck, imec-DistriNet, KU Leuven; 
Michael Schwarz, Moritz Lipp, Benjamin von Berg, and Philipp Ortner, Graz University 
of Technology; Frank Piessens, imec-DistriNet, KU Leuven; Dmitry Evtyushkin, College of 
William and Mary; Daniel Gruss, Graz University of Technology
https://www.usenix.org/conference/usenixsecurity19/presentation/canella
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.A Systematic Evaluation of Transient Execution Attacks and Defenses
Claudio Canella1, Jo Van Bulck2, Michael Schwarz1, Moritz Lipp1,
Benjamin von Berg1, Philipp Ortner1, Frank Piessens2, Dmitry Evtyushkin3, Daniel Gruss1
1 Graz University of Technology, 2 imec-DistriNet, KU Leuven, 3 College of William and Mary
Abstract
Research on transient execution attacks including Spectre
and Meltdown showed that exception or branch mispredic-
tion events might leave secret-dependent traces in the CPU’s
microarchitectural state. This observation led to a prolifera-
tion of new Spectre and Meltdown attack variants and even
more ad-hoc defenses (e.g., microcode and software patches).
Both the industry and academia are now focusing on ﬁnding
effective defenses for known issues. However, we only have
limited insight on residual attack surface and the completeness
of the proposed defenses.
In this paper, we present a systematization of transient
execution attacks. Our systematization uncovers 6 (new) tran-
sient execution attacks that have been overlooked and not
been investigated so far: 2 new exploitable Meltdown ef-
fects: Meltdown-PK (Protection Key Bypass) on Intel, and
Meltdown-BND (Bounds Check Bypass) on Intel and AMD;
and 4 new Spectre mistraining strategies. We evaluate the
attacks in our classiﬁcation tree through proof-of-concept im-
plementations on 3 major CPU vendors (Intel, AMD, ARM).
Our systematization yields a more complete picture of the
attack surface and allows for a more systematic evaluation of
defenses. Through this systematic evaluation, we discover that
most defenses, including deployed ones, cannot fully mitigate
all attack variants.
1 Introduction
CPU performance over the last decades was continuously
improved by shrinking processing technology and increasing
clock frequencies, but physical limitations are already hin-
dering this approach. To still increase the performance, ven-
dors shifted the focus to increasing the number of cores and
optimizing the instruction pipeline. Modern CPU pipelines
are massively parallelized allowing hardware logic in prior
pipeline stages to perform operations for subsequent instruc-
tions ahead of time or even out-of-order. Intuitively, pipelines
may stall when operations have a dependency on a previous
instruction which has not been executed (and retired) yet.
Hence, to keep the pipeline full at all times, it is essential to
predict the control ﬂow, data dependencies, and possibly even
the actual data. Modern CPUs, therefore, rely on intricate mi-
croarchitectural optimizations to predict and sometimes even
re-order the instruction stream. Crucially, however, as these
predictions may turn out to be wrong, pipeline ﬂushes may be
necessary, and instruction results should always be committed
according to the intended in-order instruction stream. Pipeline
ﬂushes may occur even without prediction mechanisms, as on
modern CPUs virtually any instruction can raise a fault (e.g.,
page fault or general protection fault), requiring a roll-back
of all operations following the faulting instruction. With pre-
diction mechanisms, there are more situations when partial
pipeline ﬂushes are necessary, namely on every misprediction.
The pipeline ﬂush discards any architectural effects of pend-
ing instructions, ensuring functional correctness. Hence, the
instructions are executed transiently (ﬁrst they are, and then
they vanish), i.e., we call this transient execution [50, 56, 85].
While the architectural effects and results of transient in-
structions are discarded, microarchitectural side effects re-
main beyond the transient execution. This is the foundation
of Spectre [50], Meltdown [56], and Foreshadow [85]. These
attacks exploit transient execution to encode secrets through
microarchitectural side effects (e.g., cache state) that can later
be recovered by an attacker at the architectural level. The
ﬁeld of transient execution attacks emerged suddenly and pro-
liferated, leading to a situation where people are not aware
of all variants and their implications. This is apparent from
the confusing naming scheme that already led to an arguably
wrong classiﬁcation of at least one attack [48]. Even more
important, this confusion leads to misconceptions and wrong
assumptions for defenses. Many defenses focus exclusively
on hindering exploitation of a speciﬁc covert channel, instead
of addressing the microarchitectural root cause of the leak-
age [45,47,50,91]. Other defenses rely on recent CPU features
that have not yet been evaluated from a transient security per-
spective [84]. We also debunk implicit assumptions including
that AMD or the latest Intel CPUs are completely immune to
USENIX Association
28th USENIX Security Symposium    249
Meltdown-type effects, or that serializing instructions miti-
gate Spectre Variant 1 on any CPU.
In this paper, we present a systematization of transient
execution attacks, i.e., Spectre, Meltdown, Foreshadow, and
related attacks. Using our decision tree, transient execution
attacks are accurately classiﬁed through an unambiguous nam-
ing scheme (cf. Figure 1). The hierarchical and extensible na-
ture of our taxonomy allows to easily identify residual attack
surface, leading to 6 previously overlooked transient execu-
tion attacks (Spectre and Meltdown variants) ﬁrst described in
this work. Two of the attacks are Meltdown-BND, exploiting
a Meltdown-type effect on the x86 bound instruction on Intel
and AMD, and Meltdown-PK, exploiting a Meltdown-type
effect on memory protection keys on Intel. The other 4 attacks
are previously overlooked mistraining strategies for Spectre-
PHT and Spectre-BTB attacks. We demonstrate the attacks
in our classiﬁcation tree through practical proofs-of-concept
with vulnerable code patterns evaluated on CPUs of Intel,
ARM, and AMD.1
Next, we provide a classiﬁcation of gadgets and their preva-
lence in real-world software based on an anaylsis of the Linux
kernel. We also give a short overview on current tools for
automatic gadget detection.
We then provide a systematization of the state-of-the-art
defenses. Based on this, we systematically evaluate defenses
with practical experiments and theoretical arguments to show
which work and which do not or cannot sufﬁce. This sys-
tematic evaluation revealed that we can still mount transient
execution attacks that are supposed to be mitigated by rolled
out patches. Finally, we discuss how defenses can be designed
to mitigate entire types of transient execution attacks.
Contributions. The contributions of this work are:
1. We systematize Spectre- and Meltdown-type attacks, ad-
vancing attack surface understanding, highlighting mis-
classiﬁcations, and revealing new attacks.
2. We provide a clear distinction between Meltdown/Spectre,
required for designing effective countermeasures.
3. We provide a classiﬁcation of gadgets and discuss their
prevalence in real-world software.
4. We categorize defenses and show that most, including
deployed ones, cannot fully mitigate all attack variants.
5. We describe new branch mistraining strategies, highlight-
ing the difﬁculty of eradicating Spectre-type attacks.
We responsibly disclosed the work to Intel, ARM, and AMD.
Experimental Setup. Unless noted otherwise, the experi-
mental results reported were performed on recent Intel Sky-
lake i5-6200U, Coffee Lake i7-8700K, and Whiskey Lake i7-
8565U CPUs. Our AMD test machines were a Ryzen 1950X
and a Ryzen Threadripper 1920X. For experiments on ARM,
an NVIDIA Jetson TX1 has been used.
Outline. Section 2 provides background. We systematize
Spectre in Section 3 and Meltdown in Section 4. We analyze
1https://github.com/IAIK/transientfail
in-place (IP) vs., out-of-place (OP)
mistraining
strategy
Cross-address-space
PHT-CA-IP 
PHT-CA-OP 
Same-address-space
PHT-SA-IP [48,50]
PHT-SA-OP 
BTB-CA-IP [13,50]
BTB-CA-OP [50]
BTB-SA-IP 
BTB-SA-OP [13]
RSB-CA-IP [52,59]
RSB-CA-OP [52]
RSB-SA-IP [59]
RSB-SA-OP [52,59]
microarchitec-
tural buffer
Spectre-type
prediction
Transient
cause?
Spectre-PHT
Spectre-BTB
Spectre-RSB
Cross-address-space
Spectre-STL [29]
Same-address-space
Cross-address-space
Same-address-space
fault
fault type
Meltdown-NM [78]
Meltdown-US [56]
Meltdown-type
Meltdown-AC 
Meltdown-DE 
Meltdown-PF
Meltdown-UD 
Meltdown-SS 
Meltdown-BR
Meltdown-P [85,90]
Meltdown-RW [48]
Meltdown-PK 
Meltdown-XD 
Meltdown-SM 
Meltdown-MPX [40]
Meltdown-GP [8,35]
Meltdown-BND 
Figure 1: Transient execution attack classiﬁcation tree with
demonstrated attacks (red, bold), negative results (green,
dashed), some ﬁrst explored in this work ( / ).2
and classify gadgets in Section 5 and defenses in Section 6.
We discuss future work and conclude in Section 7.
.
2 Transient Execution
Instruction Set Architecture and Microarchitecture. The
instruction set architecture (ISA) provides an interface be-
tween hardware and software. It deﬁnes the instructions that
a processor supports, the available registers, the addressing
mode, and describes the execution model. Examples of dif-
ferent ISAs are x86 and ARMv8. The microarchitecture then
describes how the ISA is implemented in a processor in the
form of pipeline depth, interconnection of elements, execution
units, cache, branch prediction. The ISA and the microarchi-
tecture are both stateful. In the ISA, this state includes, for
instance, data in registers or main memory after a success-
ful computation. Therefore, the architectural state can be ob-
served by the developer. The microarchitectural state includes,
for instance, entries in the cache and the translation lookaside
buffer (TLB), or the usage of the execution units. Those mi-
croarchitectural elements are transparent to the programmer
and can not be observed directly, only indirectly.
Out-of-Order Execution. On modern CPUs, individual in-
structions of a complex instruction set are ﬁrst decoded and
split-up into simpler micro-operations (µOPs) that are then
processed. This design decision allows for superscalar op-
timizations and to extend or modify the implementation of
speciﬁc instructions through so-called microcode updates.
Furthermore, to increase performance, CPU’s usually imple-
ment a so-called out-of-order design. This allows the CPU
to execute µOPs not only in the sequential order provided by
2An up-to-date version of the tree is available at http://transient.
fail/
250    28th USENIX Security Symposium
USENIX Association
the instruction stream but to dispatch them in parallel, utiliz-
ing the CPU’s execution units as much as possible and, thus,
improving the overall performance. If the required operands
of a µOP are available, and its corresponding execution unit
is not busy, the CPU starts its execution even if µOPs earlier
in the instruction stream have not ﬁnished yet. As immediate
results are only made visible at the architectural level when
all previous µOPs have ﬁnished, CPUs typically keep track
of the status of µOPs in a so-called Reorder Buffer (ROB).
The CPU takes care to retire µOPs in-order, deciding to either
discard their results or commit them to the architectural state.
For instance, exceptions and external interrupt requests are
handled during retirement by ﬂushing any outstanding µOP
results from the ROB. Therefore, the CPU may have executed
so-called transient instructions [56], whose results are never
committed to the architectural state.
Speculative Execution. Software is mostly not linear but
contains (conditional) branches or data dependencies between
instructions. In theory, the CPU would have to stall until a
branch or dependencies are resolved before it can continue
the execution. As stalling decreases performance signiﬁcantly,
CPUs deploy various mechanisms to predict the outcome of a
branch or a data dependency. Thus, CPUs continue executing
along the predicted path, buffering the results in the ROB
until the correctness of the prediction is veriﬁed as its depen-
dencies are resolved. In the case of a correct prediction, the
CPU can commit the pre-computed results from the reorder
buffer, increasing the overall performance. However, if the
prediction was incorrect, the CPU needs to perform a roll-
back to the last correct state by squashing all pre-computed
transient instruction results from the ROB.
Cache Covert Channels. Modern CPUs use caches to hide
memory latency. However, these latency differences can be ex-
ploited in side-channels and covert channels [24,51,60,67,92].
In particular, Flush+Reload allows observations across cores
at cache-line granularity, enabling attacks, e.g., on crypto-
graphic algorithms [26, 43, 92], user input [24, 55, 72], and
kernel addressing information [23]. For Flush+Reload, the
attacker continuously ﬂushes a shared memory address using
the clflush instruction and afterward reloads the data. If the
victim used the cache line, accessing it will be fast; otherwise,
it will be slow.
Covert channels are a special use case of side-channel at-
tacks, where the attacker controls both the sender and the
receiver. This allows an attacker to bypass many restrictions
that exist at the architectural level to leak information.
Transient Execution Attacks. Transient instructions reﬂect
unauthorized computations out of the program’s intended
code and/or data paths. For functional correctness, it is crucial
that their results are never committed to the architectural state.
However, transient instructions may still leave traces in the
CPU’s microarchitectural state, which can subsequently be
exploited to partially recover unauthorized results [50, 56, 85].
This observation has led to a variety of transient execution
Figure 2: High-level overview of a transient execution attack
in 5 phases: (1) prepare microarchitecture, (2) execute a trig-
ger instruction, (3) transient instructions encode unauthorized
data through a microarchitectural covert channel, (4) CPU
retires trigger instruction and ﬂushes transient instructions,
(5) reconstruct secret from microarchitectural state.
attacks, which from a high-level always follow the same ab-
stract ﬂow, as shown in Figure 2. The attacker ﬁrst brings
the microarchitecture into the desired state, e.g., by ﬂushing
and/or populating internal branch predictors or data caches.
Next is the execution of a so-called trigger instruction. This
can be any instruction that causes subsequent operations to
be eventually squashed, e.g., due to an exception or a mis-
predicted branch or data dependency. Before completion of
the trigger instruction, the CPU proceeds with the execution
of a transient instruction sequence. The attacker abuses the
transient instructions to act as the sending end of a microar-
chitectural covert channel, e.g., by loading a secret-dependent
memory location into the CPU cache. Ultimately, at the re-
tirement of the trigger instruction, the CPU discovers the
exception/misprediction and ﬂushes the pipeline to discard
any architectural effects of the transient instructions. How-
ever, in the ﬁnal phase of the attack, unauthorized transient
computation results are recovered at the receiving end of the
covert channel, e.g., by timing memory accesses to deduce
the secret-dependent loads from the transient instructions.
High-Level Classiﬁcation: Spectre vs. Meltdown. Tran-
sient execution attacks have in common that they abuse tran-
sient instructions (which are never architecturally committed)
to encode unauthorized data in the microarchitectural state.
With different instantiations of the abstract phases in Fig-
ure 2, a wide spectrum of transient execution attack variants
emerges. We deliberately based our classiﬁcation on the root
cause of the transient computation (phases 1, 2), abstracting
away from the speciﬁc covert channel being used to transmit
the unauthorized data (phases 3, 5). This leads to a ﬁrst im-
portant split in our classiﬁcation tree (cf. Figure 1). Attacks
of the ﬁrst type, dubbed Spectre [50], exploit transient exe-
cution following control or data ﬂow misprediction. Attacks
of the second type, dubbed Meltdown [56], exploit transient
execution following a faulting instruction.
Importantly, Spectre and Meltdown exploit fundamentally
different CPU properties and hence require orthogonal de-
fenses. Where the former relies on dedicated control or data
ﬂow prediction machinery, the latter merely exploits that data
from a faulting instruction is forwarded to instructions ahead
USENIX Association