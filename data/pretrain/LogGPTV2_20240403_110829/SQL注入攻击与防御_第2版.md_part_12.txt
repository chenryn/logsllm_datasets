### SQL注入测试

#### 1. SQL查询示例与错误处理
以下是一个SQL查询示例：
```sql
WHERE name='*dickens'
```
从上述SQL代码可以看出，该应用程序没有对`name`变量接收到的值进行任何验证。因此，下面的请求会导致PostgreSQL数据库产生一个错误：
```
http://www.victim.com/list_author.php?name=*
```
对于这个请求，PostgreSQL数据库将返回如下错误信息：
```
Query failed: ERROR: unterminated quoted string at or near "'"
```
在其他情况下，如果SQL代码由于其他原因（如缺少括号或子查询）执行失败，PostgreSQL数据库将返回常规错误：
```
Query failed: ERROR: syntax error at or near "="
```

#### 2. PostgreSQL JDBC Driver错误信息
在使用PostgreSQL JDBC Driver的Java项目中，从PostgreSQL数据库返回的错误信息与上述类似，并包含一些Java函数信息：
```java
org.postgresql.util.PSQLException: ERROR: unterminated quoted string at or near "='*'"
    at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:1512)
    at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1297)
    at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:88T:eAe)
    at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:430)
    at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:332)
    at org.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:231)
    at org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getTables(AbstractJdbc2DatabaseMetaData.java:2190)
```
上述代码展示了当PostgreSQL JDBC Driver处理缺少结束引号的字符串时返回的错误信息。

#### 3. 注意事项
并不存在完美的规则来确定某个输入是否会引发SQL注入漏洞，因为存在无数种可能的情况。因此，在侦查潜在的SQL注入时，必须坚持不懈并留心细节信息。建议使用Web代理，因为Web浏览器会隐藏诸如HTML源代码、HTTP重定向等细节信息。此外，在底层工作和查看HTML源代码时，可能会发现其他类型的漏洞。

#### 4. 应用程序响应
##### 4.1 常见错误
上一节介绍了当后台数据库执行查询失败时应用通常会返回的错误类型。如果看到这样的错误，可以非常肯定该应用易受到某种SQL注入攻击。然而，由于应用对数据库错误的处理方式不同，有时识别SQL注入漏洞并不容易。本节将介绍一些不直接在浏览器中显示错误的示例。

寻找SQL注入漏洞的过程包括识别用户数据输入、操纵发送给应用的数据以及识别服务器返回结果中的变化。请记住，操纵参数产生的错误可能与SQL注入无关。

##### 4.2 默认错误页面
有些应用在遇到错误时返回默认或自定义的错误页面。例如，默认的ASP.NET错误页面如下所示：
```
Server Error in Application
```
可以通过向参数中插入不会触发应用错误的SQL代码来进行测试。例如，假设SQL查询如下：
```sql
SELECT * FROM products WHERE category='[attacker's control]'
```
注入`'attacker'`会产生错误，因为末尾增加了多余的单引号。可以尝试注入不会产生错误的内容，例如：
```sql
SELECT * FROM products WHERE category='bikes' OR '1'='1'
```
上述语句不会返回任何结果，因为`WHERE`子句中的最后一个条件永远不会成立。但请注意，实际情况可能更为复杂。

##### 4.3 HTTP错误代码
HTTP包含许多返回给Web浏览器的代码，用于指定请求的结果或客户端需要执行的操作。常见的HTTP返回代码是HTTP 200，表示请求已成功接收。检测SQL注入漏洞时需要熟悉两个错误代码：HTTP 500和HTTP 302。

- **HTTP 500 Internal Server Error**
  ```http
  HTTP/1.1 500 Internal Server Error
  Date: Mon, 05 Jan 2009 13:08:25 GMT
  Server: Microsoft-IIS/6.0
  X-Powered-By: ASP.NET
  X-AspNet-Version: 1.1.4322
  Cache-Control: private
  Content-Type: text/html; charset=utf-8
  Content-Length: 3026
  [HTML content]
  ```

- **HTTP 302 Found**
  ```http
  HTTP/1.1 302 Found
  Connection: Keep-Alive
  Content-Length: 159
  Date: Mon, 05 Jan 2009 13:42:04 GMT
  Location: /index.aspx
  Content-Type: text/html; charset=utf-8
  Server: Microsoft-IIS/6.0
  X-Powered-By: ASP.NET
  X-AspNet-Version: 2.0.50727
  Cache-Control: private
  Object moved
  ```

在操纵发送给服务器的参数时收到HTTP 500或HTTP 302响应意味着我们已经以某种方式干预了应用的正常行为。接下来的步骤是构思有意义的注入。

##### 4.4 不同大小的响应
每个应用对用户发送的输入处理方式不同，有时很容易识别异常，有时则很难识别。在显示`SELECT`语句结果的脚本中，通常很容易区分合法请求与SQL注入行为之间的差异。但对于那些不显示任何结果或差异不明显的脚本，则需要特别注意。

例如，考虑一个跟踪访问者的脚本`tracking.asp`，其中包含`idvisitor`参数。如果发生SQL错误，脚本会捕获异常并将响应返回给用户。由于编程方式的差异，最终的响应会略有不同。

##### 4.5 SQL盲注
Web应用访问数据库有很多目的，常见的是访问信息并将其呈现给用户。在这种情况下，攻击者可能会修改SQL语句并显示数据库中的任意信息。然而，有时不可能显示数据库的所有信息，但这并不代表代码不会受到SQL注入攻击。

**示例：**
Victim公司允许用户通过`http://www.victim.com/authenticate.aspx`页面上的身份验证表单登录到Web站点。身份验证表单要求用户输入用户名和密码。如果任意输入用户名和密码，结果页面会显示“Invalid username or password”消息。但如果输入`user' or '1'='1`作为用户名，会显示不同的错误消息，这表明`username`字段易受SQL注入攻击。

进一步测试永假条件，例如输入`user' and '1'='2`，可以确认`username`字段确实易受SQL注入攻击，但`password`字段不易受到攻击且无法绕过身份验证表单。

这种情况被称为SQL盲注。第5章将专门讲解SQL盲注攻击技术。

**总结：**
SQL盲注是一种SQL注入漏洞，攻击者可以操纵SQL语句，应用会针对真假条件返回不同的值，但攻击者无法检索查询结果。