**作者：天融信阿尔法实验室  
原文链接：**
## Apache shiro简介
Apache
Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。
本文针对Shiro进行了一个原理性的讲解，从源码层面来分析了Shiro的认证和授权的整个流程，并在认证与授权的这个流程讲解冲，穿插说明rememberme的作用，以及为何该字段会导致反序列化漏洞。
## Apache shiro认证
在该小节中我们将会详细讲解Shiro是如何认证一个用户为合法用户的
Shiro漏洞环境测试代码修改自Vulhub中的CVE-2016-4437。
首先是Shiro的配置文件，代码如下所示
    @Configuration
    public class ShiroConfig {
        @Bean
        MainRealm mainRealm() {
            return new MainRealm();
        }
        @Bean
        RememberMeManager cookieRememberMeManager() {
            return (RememberMeManager)new CookieRememberMeManager();
        }
        @Bean
        SecurityManager securityManager(MainRealm mainRealm, RememberMeManager cookieRememberMeManager) {
            DefaultWebSecurityManager manager = new DefaultWebSecurityManager();
            manager.setRealm((Realm)mainRealm);
            manager.setRememberMeManager(cookieRememberMeManager);
            return (SecurityManager)manager;
        }
        @Bean(name = {"shiroFilter"})
        ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {
            ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();
            bean.setSecurityManager(securityManager);
            //设置登录页面uri
            bean.setLoginUrl("/login");
            //设置登录失败页面uri
            bean.setUnauthorizedUrl("/unauth");
            Map map = new LinkedHashMap<>();
            map.put("/doLogin", "anon");
            map.put("/doLogout", "authc");
            map.put("/user/add","perms[user:add]");
            map.put("/user/update","perms[user:update]");
            map.put("/user/delete","perms[user:delete]");
            map.put("/user/select","perms[user:select]");
            map.put("/**", "authc");
            bean.setFilterChainDefinitionMap(map);
            return bean;
        }
    }
然后是Controller的代码
    @Controller
    public class UserController {
        @PostMapping({"/doLogin"})
        public String doLoginPage(@RequestParam("username") String username, @RequestParam("password") String password, @RequestParam(name = "rememberme", defaultValue = "") String rememberMe) {
            Subject subject = SecurityUtils.getSubject();
            try {
                subject.login(new UsernamePasswordToken(username, password, rememberMe.equals("remember-me")));
            } catch (AuthenticationException e) {
                return "forward:/login";
            }
            return "forward:/";
        }
        @RequestMapping({"/doLogout"})
        public String doLogout() {
            Subject subject = SecurityUtils.getSubject();
            subject.logout();
            return "forward:/login";
        }
        @RequestMapping({"/"})
        public String helloPage() {
            return "hello";
        }
        @RequestMapping({"/unauth"})
        public String errorPage() {
            return "error";
        }
        @RequestMapping({"/login"})
        public String loginPage() {
            return "loginUser";
        }
        @RequestMapping({"/user/add"})
        public String add(){
            return "/user/add";
        };
        @RequestMapping({"/user/delete"})
        public String delete(){
            return "/user/delete";
        };
        @RequestMapping({"/user/update"})
        public String update(){
            return "/user/update";
        };
        @RequestMapping({"/user/select"})
        public String select(){
            Subject subject = SecurityUtils.getSubject();
            return "/user/select";
        };
    }
最后是Realm
    public class MainRealm extends AuthorizingRealm {
        @Autowired
        UserServiceImpl userService;
        /**该方法用来为登陆的用户进行授权*/
        @Override
        protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
            System.out.println("执行了=>授权doGetAuthorizationInfo");
            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
            Subject subject = SecurityUtils.getSubject();
            System.out.println(subject.isAuthenticated());
            System.out.println(subject.isRemembered());
            if(!subject.isAuthenticated()){
                return null;
            }
            Users users = (Users) subject.getPrincipal();
            if(users.getPerm()!=null){
                String[] prems = users.getPerm().split(";");
                info.addStringPermissions(Arrays.asList(prems));
            }
            return info;
        }
        /**该方法用来校验登陆的用户*/
        @Override
        protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
            System.out.println("执行了=>认证doGetAuthenticationInfo");