### 0.1, 0.2, and 0.3 (Shown in Figure 3)

In our experiments, we observed that with a 4KB page size, there is a high probability of at least one byte having a fault. This makes the Fail_Stop scheme less effective as it quickly decommissions pages within a short window of writes, leading to a rapid drop in the PCM's effective capacity. The impact is more pronounced at higher levels of process variation.

### B. Performance Impact

Our experimental results show that DRM can tolerate up to 160 faults in each page before decommissioning, which offers an extended lifetime improvement of approximately 0.13x to 22x over the Fail_Stop scheme. However, the main disadvantage of DRM is that it accelerates the aging process, reducing the PCM page's lifetime to zero. This effect is especially noticeable at higher levels of process variation.

The third scheme, ECP, can tolerate up to 6 faults in each 64 Byte block and a 4KB page. This allows ECP to achieve a lifetime improvement of 0.26x (variance=0.3) over the Fail_Stop scheme. RePRAM uses off-the-shelf components, making it a more flexible and cost-effective solution compared to ECP, which requires extensive hardware modifications.

### C. Experimental Setup

We evaluated the performance impact of RePRAM using 21 different memory-intensive and CPU-intensive applications from SPEC2006 [27], PARSEC-1.0 [1], and Splash-2 [30] benchmark suites. Our baseline system models an Intel Nehalem-like four-core processor running at 3GHz, with each core having a private 32KB, 8-way set-associative L1 cache and a shared 4MB, 16-way set-associative L2 cache. The block size is 64 Bytes, and the main memory consists of 4GB PCM with read access latency of 50ns and write access latency of 1Î¼s. We also included 16MB DRAM for storing write parity information during PRAM accesses.

To model RePRAM effects, every L2 access first queries a bloom filter with a three-cycle latency to determine if the page is faulty. We used 1024-entry CACHEMDR and CACHEpDR in our experiments, observing an average miss rate of 3% (and 8% worst case). For faulty pages, in Dim-1, we accessed both CACHEMDR and CACHEpDR simultaneously, each with a 2-cycle latency. In Dim-2, we only accessed CACHEpDR. On a mapping cache miss, we modeled an additional 500 cycles to perform a mapping lookup from lower levels of memory hierarchy and store it in the mapping cache for future use.

### D. Performance Overheads

We analyzed the performance overheads of RePRAM in two scenarios: average case and stress case.

- **Average Case**: We assumed that 50% of the PCM pages are randomly picked to be faulty, with a 50% probability that a randomly picked page is faulty. Therefore, 25% of the total pages are mapped under PDR (group size = 3), and 25% are under MDR in Dim-1 and under PDR (group size = 2) in Dim-2. The remaining 50% of the total pages are non-faulty.
  
- **Stress Case**: We assumed that all randomly picked pages are always faulty. 50% of the PCM pages are mapped under PDR (group size = 3) in Dim-1, and under PDR (group size = 2) in Dim-2. The remaining 50% are under MDR in Dim-1 and under PDR (group size = 2) in Dim-2.

### Results

- **Dim-1**: In the average case, the performance overhead was 1.87%, 0.8%, and 1.7% for SPEC2006, PARSEC, and Splash2, respectively. The highest overhead (6.2%) occurred in cactusADM. In the stress case, the overheads were 3.78%, 1.64%, and 2.65% for SPEC2006, PARSEC, and Splash2, respectively, with the highest (15.5%) in gcc.
  
- **Dim-2**: In the average case, the overheads were 0.8%, 0.8%, and 1.7% for SPEC2006, PARSEC, and Splash2, respectively. In the stress case, the overheads were 4.66%, 2.71%, and 2.65% for SPEC2006, PARSEC, and Splash2, respectively, with the highest (12.4%) in cactusADM.

### Area Overheads

We used Cacti 5.3 [13] to model the area overheads of our proposed RePRAM hardware. The on-chip area overhead for the bloom filter, CACHEpDR, and CACHEMDR is 0.92%, and the off-chip DRAM buffer overhead (16MB) is less than 0.5%. This shows that RePRAM can be easily integrated with minimal changes, making it a cost-effective solution compared to ECP, which incurs substantial area overheads for error-correcting circuitry.

### Conclusion

RePRAM schemes achieve better or comparable lifetime results to ECP at a small cost. In both dimensions, RePRAM gracefully degrades from PCM data to PDR and MDR, achieving good trade-offs between lifetime enhancement and hardware cost. The low-cost and flexibility of RePRAM make it a more attractive solution for users looking to upgrade their systems for improved PCM lifetime.