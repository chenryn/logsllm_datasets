这是一组数据参数，通常可以描述为“每Y时段内进行X次操作”。例
如，每分钟可以进行多少次认证操作。
Stress（压力）
压力测试需要衡量一个系统在一段特定的时间内如何进行大量的负
载增加、退出等操作。我经常在讲课时用一个ATM的例子帮助大家
理解这一概念。比如我们现在对一个火车站边上的ATM进行压力测
试。凌晨的时候火车站关闭着，系统的“加载"量为0。到了早高峰时
间，系统的“负载"大大增加；在午间的时候，又会有许多人使用
ATM；直到下班高峰的时候也许又出现一次“负载"的峰值。这些时
间段，就是对ATM进行了压力测试。我们需要保证ATM在这些高峰
的时候，仍然能保持稳定的运行。
Scalability（可伸缩性）
如果系统中的资源得到提升，或者增加一些新的资源，是否可以使
得系统的性能得到相应的提开？当然，系统性能的提升与增加的资
源无法构成完美的线性关系，但提开至少应该是一个合理的。
在实际工作中，我也会用上述的顺序对系统进行度量测试。但值得
注意的是，系统如果还没有一个确定的最大负载限制的时候，测试
小组最好可以慢点再开始压力测试因为稳定性方面的功能也许尚未
开发完毕。
一致性
在SLIM企测试的最后，是对于系统现存的所有功能和行为进行测
试。虽然从定义上看一致性测试和回归测试大致是一样的。但如果
用SLIMR（回归测试英文RegressionTesting的R）表示，好像不太好
记。
从定义上可以看出，这一环节需要测试的代码是那些与上一个版本
保持一致的部分。有变化的部分应该在“必要性"环节进行测试。正
2067
---
## Page 2069
因为如此，对于那些有变化的部分，在这一坏节可以快速略过。
从测试的机会成本上考虑，我推荐你为那些与上一版本保持一致的
代码增加更多的自动化测试，从而把更多的时间投入到对那些有变
化的部分进行测试上。在这一轮的测试中，你可以使用一些工具，
如Selenium或者Watir。
SLIM正是一个易记的单词，它可以指导你系统地进行测试。但你必
须注意到再好的方法也只是对你实际操作的一种启示，并不是说应
用了SLIM企方法后测试就会万无一失。假设一次产品发布的目的是
为了找出性能方面的问题，如果你在进入“度量"测试环节之前，还
能够完成其他三项（甚至是二项，也许你觉得那样更合适）测试环
节，一定会为整个项目组提供更加完备、高效的信息，帮助产品组
做出更加正确的决策。
脚本
当提及脚本的时候，大多数的测试人员会想起诸如QuickTestPro或者
Selenium等测试工具。尽管这些工具在各自的领域确实会给予测试者
一定的帮助，但为了提高测试的效率，它们还是不能和Python、Ruby
或Perl等脚本语言相提并论。
如果不需要顾及时间，你尽可仔细权衡使用哪一门语言。但对于测
试来说，时间成本总是需要考虑的。因此你必须尽快选择最适合你
的语言。以下是我平时选择语言时所考虑的问题：
我了解它吗？如果不是，我可以学习它吗？
它是否支持待测试产品的所有平台？
它是否可以与应用程序组件交互？（.NET库、JavaJAR）
它是否可以和我使用的其他工具交互？
它是否可以和数据库、LDAP或者其他服务器交互？
一旦我决定了使用哪一门语言，就开始为提高测试效率而着手开发
一些实用的脚本。
寻找开发人员的注释
2068
---
## Page 2070
我在不止一个场合听到开发人员对我说：“代码是不会撒谎的。”正
是由于代码是“不会撒谎的”，我们可以利用代码来得到很多软件质
量上的信息。但是，如今代码的数量都大得惊人。逐行阅读所有的
代码来找出你所感兴趣的部分是相当耗费时间的。取而代之的是，
你可以创建一个脚本来扫描代码，将你所感兴趣的东西高亮显示出
来。
通常你所“感兴趣”的代码并不是放之四海而皆准的。根据项目的不
同，你没有办法找到一个统一的扫描逻辑来找到问题。然而，我可
以给你提供一个列表帮助你找到一些潜在的问题：
TODO（以及类似的注释）
如今很多开发环境都会在代码中间自动地插入"TODO"关键词来提醒
开发者需要在此做一些后继的代码工作。然而，在有些情况下，这
些需要“做某事”的地方经常会被开发者疏忽而忘记了去“做某事”。
代码在提交的时候通常会把"TODO"等关键词一并提交到代码服务器
上。这些待完成的代码积少成多，就会成为影响软件开发进程的风
险。
FIXME（以及类似的注释）
FIXME是一个似于TODO的关键词，通常它是表明此处的代码存在的
问题已经被测试人员发现并且需要修复。我所见过的"FIXM企"关键
词出现的地方，有简单的（如“应该有个更好的变量名”），也有复
杂的（如"这一部分代码存在严重问题，此处功能须重新设计”）。
TODO和FIXME都是非常实用的关键词。在整个开发小组中，这类关
键词需要更加高的可见度。你可以将这些关键词的检查加入到bug
问题跟踪以及项目管理系统中以提高小组对这些关键词的重视程
度。
[1] http://en.wikipedia.org/wiki/Cross-site_scripting
[2] http://en.wikipedia.org/wiki/SQL_injection.
绝对必须要掌握的关于Unicode和字符集的最基础知识（没有借
！）"参见http://www.joelonsoftware.com/articles/Unicode.html。
图案化文字
2069
---
## Page 2071
在本章并头我曾谈到，语言测试是仅次于安全测试的重要测试环
节。但是，如果你只能看懂英语怎么办？你如何保证界面上其他语
言的文字是否正确？大多数人的回答是不能。但按照软件开发的流
程来说，你应该要相信那些为产品文字做翻译的人。如果你不能相
信，你就不得不换一个翻译人员。
然而，你还可以为此多做一些工作。至少，你能保证所有界面上的
文字都是被外部翻译人员所翻译过的而不是被硬编码的。例如，在
Java中，你需要确保所有界面上的文字全部都在资源文件之中。
图案化文字是网络聊关当中会被使用到的一种文字表达的方式。为
了将一个字符事进行图案化的表达，你需要用如下的方法来“翻译”
英文字符：
所有的字母必须大写。
第一个字母写成。
最后一个字母写成$。
一旦你将所有界面上的文字完成了图案化的表述，就可以在应用程
序中像往常一样进行交互式操作从而发现问题所在：
有一个字母没有大写。
·翻译不以开始。
翻译不以S结尾。
单词已经被图案化，但实际上并不应该被翻译，如商标和产品名
称。
一个句子被多次图案化，如一个单词中包含多个^、S等符号。通常
这些被多次翻译的字符串是由于它们是程序动态生成所导致的。尽
管从编程的角度来说，在系统中使用同一个关键词，然后引用到不
同的地方可以减少空间代价。然而，这会影响翻译人员在翻译的时
候对上下文的阅读。
当然，你也可以手工去那样做。想象一下，你也许不得不在整个产
品周期每周去检查10000行的资源文件。而且到下一个版本开发
2070
---
## Page 2072
时，又循环往复地做一遍。这当然不是对一个测试人员时间的合理
利用。任何人都会觉得这样很麻烦。
测试准则和测试数据生成
在测试的词典当中，测试准则指的是能帮助我们识别问题的一种原
则或方法（判断的标准）。而数据生成则恰恰相反。它并不是帮助
我们验证数据，而是产生数据。有时候测试准则和数据生成的规则
都是显而易见的。但有些时候它们是某种算法或者更加复杂的东
西。熟练地使用脚本语言将会帮助你在这两种情形下都能得心应
手。
我曾经在一家公司测试一个协助工作流的应用程序。该程序会在一
系列的系统下的诸多数据库中的数据表中生成记录。并且这些数据
都有不同的数据完整性，同时也具有不同的业务逻辑。我并没有手
工地检查这些生成的记录，而是用Python写了一个测试指引程序。该
程序读取一个指令ID，然后自动去各个表查询所有生成的数据的正
确性。这时候，你需要非常小心，因为你必须对业务逻辑非常清
楚，你才知道什么样的数据是对的，什么样的数据是错的。
此外，由于我所测试的产品是一个与个人财务信息相关的系统（与
汽车经销商有关），在生成正确的测试数据的时候，我还是遇到了
一些难点。我先尝试维护一张存储账户的电子表格，后来还尝试建
立了一个wiki。最后我发现这些方法都不是很靠谱。最后，脚本挽
救了我。我创建了一系列的脚本：这些脚本可以连接到应用程序数
据库，检索出那些信用合格的经销商，并从中提取出合理的测试数
据给测试程序使用。
事实上，我结合了测试准则和生成测试数据这两种方法。在前端，
我通过一段SeleniumRC脚本从数据库中生成合格的测试数据继而进
行U自动化测试。最后通过测试准则脚本来验证系统后端生成的数
据是否正确。
如果有人说一个成功的测试人员可以不必有良好的脚本编写能力，
我必定不会同意。脚本可以减少在庞大的代码集中收集信息的时
间，高效地为你的测试服务，而且它还不会忘记任何你给它定义的
步骤。
思维导图
2071
---
## Page 2073
在我学习测试的时候，或更准确地说在我学习如何开始为测试做准
备的时候，我以为测试是一个固守某种测试设计理论的工作。测试
用例一早就被拟定，接着逐步细化并在系统中进行实施。最后由厉
害的分析师批准使用。测试的修改非常少，而且需要进行正式的提
交。在此之后，当我踏上工作岗位，我被现实的测试方法震惊了。
计划永远赶不上变化，如果想做一个大而全的脚本库进行测试试图
一劳永逸是不可能的。直到最后我彻底动摇了我的想法，我逐渐发
现我所进行的测试缺少详细的文档和谨慎的思路。
后来我参加了各种测试的会议，我注意到那些我所钦佩的顶尖测试
人员拥有一个共同的习惯：为自己的事情记下笔记并且使用一门我
高中时曾接触过的技术来合理地组织他们的思维，那门技术就是“思
维导图”（mindmap）。许多年过去了，思维导图却很快成为我高效
测试的秘密武器。
思维导图是一个进行头脑风暴的思维整理工具。它将一个最原始的
想法放在图的中央，然后分支出很多新的想法。越是与中央距离远
的想法就越具体。它和传统的测试思维生成方法所不同的是，传统
的方法通常会按照等级来生成新的想法。后者的最大问题在于，它
往往重视了测试的名称，却忽略了告诉别人测试都做了些什么。虽
然思维导图仅仅可以告诉别人测试做了些什么，但往往这正是测试
人员和产品发布决策者们更想知道的东西。
如图17-1所示，思维导图是一种图形化的工具。该图演示了如何为
测试一个用户功能模块展开的思维导图。正如你所看到的，从最中
间的方块我已经分支出了三大用户模块功能测试的领域。其中，用
户注册项目已经被更加详细地进行了分解。尤其值得注意的是其中
的密码注册分支，你可以看到每一项细节的展开会变得越来越具
体。如果是传统的测试设计方法，它可能会列出一些实际的测试用
例，然而在思维导图中更多的是告诉测试者什么是正确的测试用
例。让真正执行测试的测试人员能有足够的想象空间。让测试人员
来决定真正使用哪些测试用例可以增加测试的广度，这样就如同布