# Improving Signal's Sealed Sender
**Authors:**
- Ian Martiny\*  
- Gabriel Kaptchuk†  
- Adam J. Aviv‡  
- Dan Roche§  
- Eric Wustrow\*

**Affiliations:**
- \*University of Colorado Boulder, {ian.martiny, ewust}@colorado.edu
- ‡George Washington University, PI:EMAIL
- †Boston University, PI:EMAIL
- §U.S. Naval Academy, PI:EMAIL

## Abstract
The Signal messaging service recently introduced a sealed sender feature that provides sender anonymity by cryptographically hiding the sender's identity from the service provider. We demonstrate both theoretically and empirically that this one-sided anonymity is compromised when two parties exchange multiple messages. Specifically, the promise of sealed sender does not hold over a conversation. Our attack, which falls under the category of Statistical Disclosure Attacks (SDAs), is particularly effective due to delivery receipts, which are enabled by default on Signal. Using theoretical and simulation-based models, we show that Signal could link sealed sender users in as few as five messages. Our attack operates at the application layer, making it effective even against users who employ Tor or VPNs for additional anonymity. We present a range of practical mitigation strategies and prove our protocols secure using a new simulation-based security definition for one-sided anonymity over any sequence of messages. The simplest provably-secure solution uses mechanisms already employed by Signal, indicating that it could be deployed with minimal overhead; we estimate the extra cryptographic cost for our most sophisticated solution in a system with millions of users to be less than $40 per month.

## 1. Introduction
Secure end-to-end encrypted messaging applications, such as Signal, protect the content of messages between users from potential eavesdroppers using protocols like off-the-record (OTR) messaging [6], [18]. These protocols ensure that even the service provider cannot read the communication between users. However, they do not protect metadata, including sender, recipient, and timing information. For example, if Alice sends a message to Bob, the server will learn that there is a relationship between these two users and when they communicated.

### Protecting Metadata
While leaking metadata may seem less severe than revealing message content, observing metadata can have serious consequences. Consider scenarios where Alice is a whistleblower communicating with a journalist [41] or a survivor of domestic abuse seeking confidential support [25]. In these cases, knowing to whom Alice is communicating, combined with other contextual information, can often infer the conversation content without reading the messages themselves. Former NSA and CIA director Michael Hayden emphasized the importance of metadata when he stated that the US government "kills people based on metadata" [29].

Signal's recent sealed sender feature aims to conceal this metadata by hiding the sender's identity. Instead of seeing a message from Alice to Bob, Signal observes a message to Bob from an anonymous sender. This message can only be decrypted by Bob, who then learns from the payload that the message originated from Alice. Ideally, using the sealed sender protocol breaks the link between the sender and the receiver, preventing Signal from recording sender-recipient pairs, even if compromised or compelled to do so.

While sealed sender is currently only deployed by Signal, Signal's design decisions are highly influential for other secure messaging platforms. Understanding and uncovering flaws in sealed sender is crucial not only for protecting the privacy of Signal's millions of users [23] but also for ensuring that the feature fully realizes its goal before being integrated into other services.

### A New SDA on Message Timings
We present a new statistical disclosure attack (SDA) applicable to messages in Signal's sealed sender, allowing the Signal service—if compelled by a government or compromised—to correlate senders and receivers even when using the sealed sender feature. SDAs have been studied since the 2000s to link senders and recipients in anonymous mix networks [14], [40], [44], [16], [37]. These attacks work by correlating sender and receiver behavior across multiple rounds of the mix.

It is not immediately obvious how SDAs could be applied in the context of sealed sender messages, as there is no mix network and the identities of senders are never revealed. However, by assuming that most messages receive a quick response, we can overcome these limitations and employ an SDA-style attack to de-anonymize sender-recipient pairs after passively observing enough messages. This quick-response assumption is guaranteed to be true in the presence of delivery receipts, a feature of Signal’s current implementation that cannot be disabled by the user. When Alice sends Bob a sealed sender message, Bob’s device automatically generates a delivery receipt acknowledging Alice’s message. Although this delivery receipt is also sent via sealed sender to Alice, the predictability of its timing makes our attack more effective.

The differences between sealed sender messaging and a general mix network allow us to develop a simple, tailored SDA-style attack, using ideas similar to [40], which can be used to de-anonymize a conversation between two parties. Compared to prior work, our attack is more limited in scope but more efficient: it runs in linear time in the amount of traffic observed, and we prove that the probability of success increases exponentially with the number of observations.

### Validation of the Attack
We validate the practicality of the timing attack in two ways. First, using a probabilistic model of communication, we prove a bound on the probability that Alice can be identified as communicating with Bob after a finite number of messages, independent of other users' activity. The probability also scales logarithmically with the number of active users. Second, we run simulations to estimate the effectiveness of the attack in practice. In the most basic simulation, Alice can be uniquely identified as communicating with Bob after fewer than ten messages. We also add complicating factors such as multiple simultaneous conversations with Alice and/or Bob and high-frequency users in the system, and show that these delay but do not prevent Alice from being de-anonymized.

### Sealed Sender Conversations
To address this problem, we provide a series of practical solutions that require only modest changes to Signal's existing protocol. We first define a simulation-based security model for sealed sender conversations (rather than just single messages) that allows the original recipient of the sealed sender message to be leaked but never the initiator of that message (sender) through the lifetime of the conversation. We then present three solutions that accomplish the goal of sealed sender conversations. Each is based on ephemeral identities, as opposed to long-term identifiers, such as the keys linked to your phone number in Signal. Each additional solution provides additional security protections.

Our first solution provably provides one-way sealed-sender conversations, a new security guarantee for which we provide a formal, simulation-based definition. In this protocol, Alice initiates a sealed-sender conversation by generating a new ephemeral public/secret key and anonymously registering the ephemeral public key with an anonymous mailbox via the service provider. Alice then uses a normal sealed sender message to the receiver Bob to send the anonymous mailbox identifier for his replies. Alice can retrieve Bob’s replies sent to that anonymous mailbox by authenticating with her ephemeral secret key, and the conversation continues using traditional sealed sender messages between Bob’s long-term identity and the anonymous mailbox Alice opened.

We show that this solution can be further enhanced if both Alice and Bob use ephemeral identities after the initial message is sent (using sealed sender) to Bob’s long-term identity. This protocol provides both sender and receiver anonymity for the length of a conversation if the server is unable to correlate Bob’s receipt of the initial message and his anonymous opening of a new mailbox, meaning the server has only one chance to deanonymize Bob. Importantly, even if the server is able to link these two events, this extension still (provably) provides one-way sealed-sender.

Neither of the above solutions offers authentication of anonymous mailboxes at the service provider, e.g., Signal. A malicious user could open large numbers of anonymous mailboxes and degrade the entire system. We offer an overlay solution of blind-authenticated anonymous mailboxes for either one-way or two-way sealed-sender conversations whereby each user is issued anonymous credentials regularly (e.g., daily) that can be “spent” (verified anonymously via a blind signature) to open anonymous new mailboxes. To evaluate the practicality of using anonymous credentials in this way, we run a series of tests to compute the resource overhead required to run this overlay. We estimate that running such a scheme on AWS would cost Signal approximately $40 each month to support 10 million anonymous mailboxes per day.

### Contributions
In this paper, we:
- Demonstrate the first attack on sealed sender to de-anonymize the initiator of a conversation in Signal.
- Validate the attack via theoretical bounds and simulations.
- Introduce a new security model that defines allowed leakage for sealed sender conversations.
- Present a set of increasingly secure solutions, that are either one-way or two-way anonymous, and/or provide anonymous abuse protections.
- Evaluate the resource overhead introduced by using blind signatures to prevent anonymous mailbox abuse and estimate its effective scalability to millions of users.
- Provide immediate stopgap strategies for Signal users to increase the difficulty of our attack.

We include related work and relevant citations in Section VIII. We also want to be clear about the limitations of our work and its implications:
- We do not consider network metadata such as leakage due to IP addresses. See Section II-C and the large body of existing work on anonymizing proxies such as Tor.
- We do not consider messaging with more than two parties, i.e., group messaging. This is important future work; see the discussion in Section VII-C.
- Our attack does not suggest that Signal is less secure than alternatives, or recommend that users discontinue using it. Other messaging services do not even attempt to hide the identities of message senders.
- We do not believe or suggest that Signal or anyone else is using this attack currently.
- While we have implemented the core idea of our solution to estimate the cost of wider deployment, we have not undergone the serious engineering effort to carefully and correctly integrate this solution with the existing Signal protocol software for practical, widespread deployment.

### Responsible Disclosure
We have notified Signal of our attack and solutions prior to publication, and Signal has acknowledged our disclosure.

## 2. Background
We now provide some background on the structure and types of messages in the Signal protocol [39], used in both the Signal and WhatsApp applications.

### 2.1 Sealed Sender Messages
Although secure end-to-end encrypted messaging applications like Signal protect the contents of messages, they reveal metadata about which users are communicating with each other. In an attempt to hide this metadata, Signal recently released a feature called sealed sender [36] that removes the sender from the metadata intermediaries can observe.

To send a sealed sender message to Bob, Alice connects to the Signal server and sends an encrypted message to Bob anonymously. Within the payload of this encrypted message, Alice includes her own identity, which allows Bob to authenticate the message. Importantly, Signal still learns Bob’s identity, which is needed to deliver the message. The structure of sealed sender messages is illustrated in Figure 1.

Due to sender anonymity, Signal cannot directly rate-limit users to prevent spam or abuse. Instead, Signal derives a 96-bit delivery token from a user’s profile key, and requires senders to demonstrate knowledge of a recipient’s delivery token to send them sealed sender messages. By only sharing this delivery token with his contacts, Bob limits the users who can send him sealed sender messages, thus reducing the risk of abuse.

### 2.2 Types of Messages
We manually reviewed and instrumented the Signal messenger Android 4.49.13 source code [42] to understand the types of messages Signal sends. In addition to the messages that contain content, there are several event messages that can be sent automatically. All of these messages are first padded to the next multiple of 160 bytes, then encrypted and sent using sealed sender (if enabled), making it difficult for the Signal service to distinguish events from normal messages based on their length.

- **Normal message:** A typical text message or multimedia image sent from Alice to Bob. A short (text) message will be padded to 160 bytes, and longer messages padded to a multiple of 160 bytes, before encryption.
- **Delivery receipt:** When Bob’s device receives a normal message, it automatically sends back a delivery receipt to the sender. When Alice receives the delivery receipt for her message, she knows that the message has been successfully delivered. This feature is enabled by default on Signal and plays a crucial role in our attack.

**Figure 1: Structure of Signal Messages**  
All messages Alice sends to Bob through Signal (receipts, text messages, or events) are first padded to the next multiple of 160 bytes. The padded message is then encrypted under the shared key between Alice and Bob and combined with 'To: Bob' and 'From: Alice' metadata to form a Signal Message. If both Alice and Bob have sealed sender enabled, Alice will then generate an ECDHE key pair and derive a new shared secret with Bob’s public key to encrypt the Signal Message and combine with 'To: Bob' and the public ephemeral key to form a sealed sender message that will be sent to Bob.

**Figure 2: Stages of a Signal Message**  
User Interface indicating message delivery status. One hollow check mark signifies that the message is en route. Two hollow check marks signify the receipt of a delivery receipt for the message. Finally, two filled check marks signify the receipt of a read receipt for the message.