title:Improving Signal's Sealed Sender
author:Ian Martiny and
Gabriel Kaptchuk and
Adam J. Aviv and
Daniel S. Roche and
Eric Wustrow
Improving Signal’s Sealed Sender
Ian Martiny∗, Gabriel Kaptchuk†, Adam Aviv‡, Dan Roche§, Eric Wustrow∗
∗University of Colorado Boulder, {ian.martiny, ewust}@colorado.edu
‡George Washington University, PI:EMAIL
†Boston University, PI:EMAIL
§U.S. Naval Avademy, PI:EMAIL
Abstract—The Signal messaging service recently deployed a
sealed sender feature that provides sender anonymity by crypto-
graphically hiding a message’s sender from the service provider.
We demonstrate, both theoretically and empirically, that this
one-sided anonymity is broken when two parties send multiple
messages back and forth; that is, the promise of sealed sender
does not compose over a conversation of messages. Our attack is
in the family of Statistical Disclosure Attacks (SDAs), and is made
particularly effective by delivery receipts that inform the sender
that a message has been successfully delivered, which are enabled
by default on Signal. We show using theoretical and simulation-
based models that Signal could link sealed sender users in as
few as 5 messages. Our attack goes beyond tracking users via
network-level
identiﬁers by working at the application layer
of Signal. This make our attacks particularly effective against
users that employ Tor or VPNs as anonymity protections, who
would otherwise be secure against network tracing. We present a
range of practical mitigation strategies that could be employed to
prevent such attacks, and we prove our protocols secure using a
new simulation-based security deﬁnition for one-sided anonymity
over any sequence of messages. The simplest provably-secure
solution uses many of the same mechanisms already employed by
the (ﬂawed) sealed-sender protocol used by Signal, which means
it could be deployed with relatively small overhead costs; we
estimate that the extra cryptographic cost of running our most
sophisticated solution in a system with millions of users would
be less than $40 per month.
I.
INTRODUCTION
Secure end-to-end encrypted messaging applications, such
as Signal, protect the content of messages between users from
potential eavesdroppers using protocols like off-the-record
(OTR) messaging [6], [18]. These protocols guarantee that
even the service provider itself is unable to read communi-
cation between users. However, these protocols do not protect
conversation metadata, including sender, recipient, and timing.
For instance, if Alice sends a message to Bob, the server will
learn that there is a relationship between those two users and
when they communicated.
Protecting metadata. While leaking metadata may appear
reasonable when compared to revealing the contents of the
messages, observing metadata can have serious consequences.
Consider that Alice may be a whistleblower communicating
with a journalist [41] or a survivor of domestic abuse seeking
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23180
www.ndss-symposium.org
conﬁdential support [25]. In these cases, merely knowing to
whom Alice is communicating combined with other contextual
information is often enough to infer conversation content with-
out reading the messages themselves. Former NSA and CIA
director Michael Hayden succinctly illustrated this importance
of metadata when he said the US government “kill[s] people
based on metadata” [29].
Signal’s recent sealed sender feature aims to conceal this
metadata by hiding the message sender’s identity. Instead of
seeing a message from Alice to Bob, Signal instead observes
a message to Bob from an anonymous sender. This message
can only be decrypted by Bob, who then learns from the
payload that the message originated with Alice. Ideally, using
the sealed sender protocol breaks the link between the sender
and the receiver, preventing Signal from recording sender-
recipient pairs, if ever compromised or compelled to do so.
While sealed sender is currently only deployed by Signal,
Signal’s design decisions are highly inﬂuential for other secure
messaging platforms as it is a leader in deploying cutting-
edge secure messaging features; the Signal protocol has been
integrated into other services like WhatsApp. Understanding
and uncovering ﬂaws in sealed sender is therefore not only
important to protecting the privacy of Signal’s millions1 of
users [23], but also helps make sure sealed sender fully realizes
its goal before it is integrated into other services with other
sets of users.
A new SDA on message timings. We present a new sta-
tistical disclosure attack (SDA) applicable to messages in
Signal’s sealed sender, that would allow the Signal service—
if compelled by a government or compromised—to correlate
senders and receivers even when using the sealed sender
feature. Previously, statistical disclosure attacks (SDAs) have
been studied since the 2000s to link senders and recipients
in anonymous mix networks [14], [40], [44], [16], [37]. These
attacks work by correlating sender and receiver behavior across
multiple rounds of the mix.
It is not immediately obvious how SDAs could be applied
in the context of sealed sender messages, since there is no mix
network and the identities of senders are (by design) never
revealed. Thus, it is not clear how even the server could apply
SDA attacks, since it only learns the destinations of messages,
and never sources.
In this paper, we observe that, by assuming that most
messages receive a quick response, we can overcome these
1Signal does not publicly disclose its user count, but the app has been
downloaded millions of times.
seeming limitations of sealed-sender messaging and employ a
SDA-style attack to de-anonymize sender-recipient pairs after
passively observing enough messages.
Moreover, and crucially, this quick-response assumption is
guaranteed to be true in the presence of delivery receipts,
a feature of Signal’s current implementation that cannot be
disabled by the user. When Alice sends Bob a sealed sender
message, Bob’s device will automatically generate a delivery
receipt
that acknowledges Alice’s message. Although this
delivery receipt is also sent via sealed sender to Alice, the
predictability of its timing makes our attack more effective.
The differences between sealed sender messaging and a
general mix network allow us to develop a simple, tailored
SDA-style attack, using ideas similar to [40], which can be
used to de-anonymize a conversation between two parties.
Compared to prior work, our attack is more limited in scope,
but is also more efﬁcient: it runs in linear-time in the amount
of trafﬁc observed, and we prove that the probability our
attack succeeds increases exponentially with the number of
observations.
We validate the practicality of the timing attack in two
ways. First, using a probabilistic model of communication, we
prove a bound on the probability that Alice can be identiﬁed
as communicating with Bob after a ﬁnite number of messages,
independent of other users’ activity. The probability also scales
logarithmically with the number of active users.
Second, we run simulations to estimate the effectiveness
of the attack in practice. In the most basic simulation, Alice
can be uniquely identiﬁed as communicating with Bob after
fewer than 10 messages. We also add complicating factors such
as multiple simultaneous conversations with Alice and/or Bob
and high-frequency users in the system, and show that these
delay but do not prevent Alice from being de-anonymized.
Sealed sender conversations. To ﬁx this problem, we provide
a series of practical solutions that require only modest changes
to Signal’s existing protocol. We ﬁrst deﬁne a simulation-based
security model for sealed sender conversations (rather than just
single messages) that allows the original recipient of the sealed
sender message to be leaked but never the initiator of that
message (sender) through the lifetime of the conversation. We
then present three solutions that accomplish the goal of sealed
sender conversations. Each is based on ephemeral identities,
as opposed to communicating with long-term identiﬁers, such
as the keys linked to your phone number in Signal. Each
additional solution provides additional security protections.
Our ﬁrst solution provably provides one-way sealed-sender
conversations, a new security guarantee for which we provide
a formal, simulation based deﬁnition. In this protocol, Alice
initiates a sealed-sender conversation by generating a new
ephemeral, public/secret key and anonymously registers the
ephemeral public key with an anonymous mailbox via the
service provider. Alice then uses a normal sealed sender
message to the receiver Bob to send the anonymous mailbox
identiﬁer for his replies. Alice can retrieve Bob’s replies sent to
that anonymous mailbox by authenticating with her ephemeral
secret key, and the conversation continues using traditional
sealed sender messages between Bob’s long-term identity and
the anonymous mailbox Alice opened.
We show that this solution can be further enhanced if
both Alice and Bob use ephemeral identities, after the ini-
tial message is sent (using sealed sender) to Bob’s long-
term identity. This protocol provides both sender and receiver
anonymity for the length of a conversation if the server is
unable to correlate Bob’s receipt of the initial message and
his anonymous opening of a new mailbox, meaning the server
has only one chance to deanonymize Bob. Importantly, even if
the server is able to link these two events, this extension still
(provably) provides one-way sealed-sender.
Neither of the above solutions offer authentication of
anonymous mailboxes at the service provider, e.g., Signal.
A malicious user could open large numbers of anonymous
mailboxes and degrade the entire system. We offer an overlay
solution of blind-authenticated anonymous mailboxes for ei-
ther one-way or two-way sealed-sender conversations whereby
each user is issued anonymous credentials regularly (e.g.,
daily) that can be “spent” (veriﬁed anonymously via a blind
signatures) to open anonymous new mailboxes. To evaluate
the practicality of using anonymous credentials in this way, we
run a series of tests to compute the resource overhead required
to run this overlay. We estimate that running such a scheme
on AWS would cost Signal approximately $40 each month to
support 10 million anonymous mailboxes per day.
Our contributions. In this paper, we will demonstrate
lation models (Section IV);
sender-anonymous communication;
initiator of a conversation in Signal (Section III);
• A brief analysis of how the Signal protocol sends mes-
sages and notiﬁcations based on source code review and
instrumentation (Section II-B);
• The ﬁrst attack on sealed sender to de-anonymize the
• Validation of the attack via theoretical bounds and simu-
• A new security model that deﬁnes allowed leakage for
• A set of increasingly secure solutions, that are either one-
two-way anonymous, and/or provide
• An evaluation of the resource overhead introduced by
using blind signatures to prevent anonymous mailbox
abuse, and estimates of its effective scalability to millions
of users (Section VI-E); and
• Immediate stopgap strategies for Signal users to increase
way anonymous,
anonymous abuse protections. (Section VI);
the difﬁculty of our attack (Section VII-A).
We include related work and the relevant citations in
Section VIII. We also want to be clear about the limitations
of our work and its implications:
• We do not consider network metadata such as leakage
due to IP addresses. See Section II-C and the large body
of existing work on anonymizing proxies such as Tor.
• We do not consider messaging with more than two parties,
i.e. group messaging. This is important future work; see
the discussion in Section VII-C.
• Our attack does not suggest that Signal is less secure than
alternatives, or recommend that users discontinue using it.
Other messaging services do not even attempt to hide the
identities of message senders.
• We do not believe or suggest that Signal or anyone else
is using this attack currently.
2
• While we have implemented the core idea of our solution
in order to estimate the cost of wider deployment, we have
not undergone the serious engineering effort to carefully
and correctly integrate this solution with the existing
Signal protocol software in order to allow for practical,
widespread deployment.
Responsible Disclosure. We have notiﬁed Signal of our attack
and solutions prior to publication, and Signal has acknowl-
edged our disclosure.
II. BACKGROUND
We now give some background on the structure and types
of messages in the Signal protocol [39], used in both the Signal
and WhatsApp applications.
A. Sealed Sender Messages
Although secure end-to-end encrypted messaging applica-
tions like Signal protect the contents of messages, they reveal
metadata about which users are communicating to each other.
In an attempt to hide this metadata, Signal recently released a
feature called sealed sender [36] that removes the sender from
the metadata intermediaries can observe.
To send a sealed sender message to Bob, Alice connects
to the Signal server and sends an encrypted message to Bob
anonymously2. Within the payload of this encrypted message,
Alice includes her own identity, which allows Bob to authenti-
cate the message. Importantly, Signal still learns Bob’s identity,
which is needed in order to actually deliver it. The structure
of sealed sender messages are illustrated in Figure 1.
Due to sender anonymity, Signal cannot directly rate-limit
users to prevent spam or abuse. Instead, Signal derives a 96-bit
delivery token from a user’s proﬁle key, and requires senders
demonstrate knowledge of a recipients’ delivery token to send
them sealed sender messages. By only sharing this delivery
token with his contacts, Bob limits the users who can send
him sealed sender messages, thus reducing the risk of abuse3.
B. Types of Messages
to be delivered to the receiver,
We manually reviewed and instrumented the Signal mes-
senger Android 4.49.13 source code [42] in order to understand
the types of messages Signal sends. In addition to the messages
that contain content
there
are several event messages that can be sent automatically, as
discussed below. All of these messages are ﬁrst padded to
the next multiple of 160 bytes, then encrypted and sent using
sealed sender (if enabled), making it difﬁcult for the Signal
service to distinguish events from normal messages based on
their length.
Normal message. A normal text message or multimedia image
sent from Alice to Bob is the typical message we consider. A
2As we note in our threat model, we do not consider the information leakage
from networking.
3There are a number of options available to Bob that can allow more ﬁne-
grained access control to his delivery token. Bob can opt to receive sealed
sender messages from anyone even without knowledge of his delivery token,
but this is disabled by default. Additionally, Bob can regenerate his delivery
token and share it only with a subset of his contacts to block speciﬁc users.
Fig. 1: Structure of Signal Messages — All messages Alice sends
to Bob through Signal (receipts, text messages, or events) are ﬁrst
padded to the next multiple of 160 bytes. The padded message is
then encrypted under the shared key between Alice and Bob and
then combined with ‘To: Bob’ and ‘From: Alice’ metadata to form
a Signal Message. If both Alice and Bob have sealed sender enabled
then Alice will then generate an ECDHE key pair and derive a new
shared secret with Bob’s public key to encrypt the Signal Message
and combine with ‘To: Bob’ and the public ephemeral key to form a
sealed sender message that will be sent to Bob.
Fig. 2: Stages of a Signal Message — User Interface indicating
message delivery status. One hollow check mark signiﬁes that the
message is en route. Two hollow check marks signiﬁes the receipt
of a delivery receipt for the message. Finally, two ﬁlled check mark
signiﬁes the receipt of a read receipt for the message.
short (text) message will be padded to 160 bytes, and longer
messages padded to a multiple of 160 bytes, before encryption.
Delivery receipt. When Bob’s device receives a normal mes-
sage, his device will automatically send back a delivery receipt
to the sender. When Alice receives the delivery receipt for her