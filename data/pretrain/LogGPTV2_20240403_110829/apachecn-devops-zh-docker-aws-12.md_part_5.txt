 Namespace: AWS/ECS
 Dimensions:
 - Name: ClusterName
 Value: !Ref ApplicationCluster
 MetricName: IdleHostCapacity
 Statistic: Maximum
 Period: 60
 EvaluationPeriods: 1
 Threshold: 1
 ComparisonOperator: GreaterThanThreshold
 TreatMissingData: ignore
  ...
  ...
```
在前面的示例中，您添加了两个 CloudWatch 警报–一个`ContainerCapacityAlarm`将用于在容器容量低于 1 时触发横向扩展操作，另一个`IdleHostCapacityAlarm`将用于在空闲主机容量大于 1 时触发横向扩展操作。每个警报的各种属性将在此进一步详细描述:
*   `AlarmActions`:定义警报违反其配置标准时应采取的措施。在这里，我们参考了我们将很快定义的 EC2 自动扩展策略资源，每当发出警报时，这些资源都会触发适当的自动扩展扩展或扩展操作。
*   `Namespace`:定义警报相关的度量的名称空间。
*   `Dimensions`:定义度量如何与给定命名空间内的资源相关联的上下文。在前面的示例中，上下文被配置为我们栈中的 ECS 集群。
*   `MetricName`:定义度量的名称。在这里，我们指定了上一节中发布的每个自定义指标的名称。
*   `Statistic`:定义应该评估的度量的统计。这实际上是一个非常重要的参数，例如，在容器容量警报的情况下，设置最大值可确保低于配置阈值 1 的瞬态指标不会不必要地触发警报，假设在每个评估期间至少有 1 个值超过配置阈值。这同样适用于空闲主机容量警报，但方向相反。
*   `Period`、`EvaluationPeriods`、`Threshold`和`ComparisonOperator`:这些定义了指标必须超出配置的阈值和比较运算符界限的时间范围。如果超过这些界限，将会发出警报。
*   `TreatMissingData`:该设置定义了您应该如何处理丢失的度量数据。在我们的用例中，丢失度量数据是常见的情况，因为我们只在 ECS 容器实例状态改变时发布度量，所以设置值`ignore`可以确保我们不会将丢失数据视为出错的指示。
# 创建 EC2 自动缩放策略
现在，您需要创建在每个 CloudWatch 警报资源中引用的 EC2 自动缩放策略资源。
下面的示例演示了向 todobackend 栈添加横向扩展和纵向扩展策略:
```
...
...
Resources:
  ...
  ...
 ApplicationAutoscalingScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      AutoScalingGroupName: !Ref ApplicationAutoscaling
      Cooldown: 600
  ApplicationAutoscalingScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      AutoScalingGroupName: !Ref ApplicationAutoscaling
      Cooldown: 600
  ...
  ...
  ApplicationAutoscaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - DmesgLogGroup
      - MessagesLogGroup
      - DockerLogGroup
      - EcsInitLogGroup
      - EcsAgentLogGroup
    CreationPolicy:
      ResourceSignal:
 Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        SuspendProcesses:
 - HealthCheck
 - ReplaceUnhealthy
 - AZRebalance
 - AlarmNotification
 - ScheduledActions        MinInstancesInService: 1
        MinSuccessfulInstancesPercent: 100
        WaitOnResourceSignals: "true"
        PauseTime: PT15M
    Properties:
      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration
      MinSize: 0
      MaxSize: 4
 DesiredCapacity: 1        ...
        ...
```
在前面的示例中，您定义了两个`SimpleScaling`类型的自动缩放策略，这是您可以实现的最简单的自动缩放形式。对各种自动缩放类型的讨论不在本书的讨论范围内，但是如果您有兴趣了解更多可用的选项，可以参考[https://docs . AWS . Amazon . com/autoscaling/ec2/user guide/as-scale-based-on-demand . html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html)。`AdjustmentType`和`ScalingAdjustment`属性被配置为将自动缩放组的大小增加或减少一个实例，而`Cooldown`属性提供了一种机制来确保在指定的持续时间内禁用进一步的自动缩放操作，这有助于避免自动缩放循环，在该循环中，您的集群会不断地向外扩展和向内扩展。
请注意，`ApplicationAutoscaling` `UpdatePolicy`设置已更新为包含`SuspendProcesses`参数，该参数将云信息配置为每当发生自动缩放滚动更新时禁用某些操作流程。这特别禁用了滚动更新期间的自动缩放操作，这很重要，因为您不希望自动缩放操作干扰 CloudFormation 协调的滚动更新。最后，我们还将`ApplicationAutoscaling`资源上的各种计数设置设置为固定值 1，因为自动缩放现在将管理我们的 ECS 集群的大小。
# 测试 ECS 集群-容量管理
现在，我们已经拥有了计算 ECS 集群容量、发布指标和触发警报的所有组件，这些组件将调用自动扩展操作，让我们部署我们的更改，并测试解决方案是否按预期工作。
# 测试横向扩展
要人工触发横向扩展操作，我们需要在`dev.cfg`配置文件中将`ApplicationDesiredCount`输入参数设置为 2，这将使我们的 ECS 服务的 ECS 任务计数增加到 2，并将导致 ECS 集群中的单个 ECS 容器实例不再有足够的资源来支持任何其他容器:
```
ApplicationDesiredCount=2
ApplicationImageId=ami-ec957491
ApplicationImageTag=5fdbe62
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
VpcId=vpc-f8233a80
```
该配置更改将导致`ContainerCapacity`度量低于配置的报警阈值`1`，我们现在可以通过运行`aws cloudformation deploy`命令将更改部署到云信息来测试该阈值。
部署完成后，如果您浏览到 CloudWatch 控制台并从左侧菜单中选择 Alarms，您应该会看到容器容量警报进入 alarm 状态(这可能需要几分钟时间)，如前所述:
![](img/3aedb0f1-0201-435f-b6b0-557d67d1ed07.png)
您可以在操作详细信息中看到，CloudWatch 警报触发了应用自动扩展扩展策略，请注意，在左侧的图表中，这是因为在单个 ECS 容器实例上运行的 ECS 任务增加，导致容器容量降至 0。
如果您现在导航到 EC2 控制台，从左侧菜单中选择**自动缩放组**，然后为 todobackend 自动缩放组选择**活动历史记录**选项卡，您可以看到自动缩放组中的当前实例计数为`2`，并且由于容器容量警报转换为报警状态而启动了新的 EC2 实例:
![](img/f9681a0f-4867-4e7c-adca-a75bc78fc5d7.png)
将新的 ECS 容器实例添加到 ECS 集群后，将进行新的容量计算，如果切换回 CloudWatch 控制台，您应该会看到 ContainerCapacity 警报最终会转换为 OK 状态，如下图所示:
![](img/4ae43aef-c5b7-4dc5-98b3-2fe6a3b832eb.png)
在右下角的图中，可以看到添加新的 ECS 容器实例的效果，将容器容量从`0`增加到`2`，将容器容量告警置为 OK 状态。
# 测试规模
现在，您已经成功测试了 ECS 群集容量管理解决方案的横向扩展行为，现在让我们通过将`dev.cfg`文件中的`ApplicationDesiredCount`减少到 1 并运行`aws cloudformation deploy`命令来部署修改后的计数，从而人工触发横向扩展行为:
```
ApplicationDesiredCount=1
ApplicationImageId=ami-ec957491
ApplicationImageTag=5fdbe62
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
VpcId=vpc-f8233a80
```
一旦部署了这一更改，在 CloudWatch 控制台中，您应该会看到空闲主机容量警报在几分钟后变为报警状态:
![](img/4121b365-3f94-4ed5-ba0e-e95ceb74cc1f.png)
在前面的截图中，空闲主机容量从 1.0 增加到 1.5，因为我们现在在集群中只有一个正在运行的 ECS 任务和两个 ECS 容器实例。这触发了策略中已配置的应用自动缩放比例，这将把 ECS 群集容量减少到单个 ECS 容器实例，最终空闲主机容量警报将转换为正常状态。
# 配置自动缩放服务
我们现在有了一个 ECS 集群容量管理解决方案，随着新的 ECS 任务在您的 ECS 集群中来来去去，该解决方案将在您的 ECS 集群中自动横向扩展和扩展。到目前为止，我们通过手动增加 todobackend ECS 服务的任务数来人工测试这一点，但是在您的实际应用中，您通常会使用 AWS 应用自动扩展服务，根据对您的应用最有意义的指标来动态地上下扩展 ECS 服务。
Another scenario that impacts ECS cluster capacity is the deployment of new applications, in the form of ECS task definition changes to your ECS services. The rolling-update mechanism of ECS will often temporarily increase the ECS task count, which can result in your ECS cluster scaling out for a short period of time, and then scaling back in. You can tune this behavior by adjusting the period of time the container capacity can fall below your configured minimum threshold before raising an alarm, and also increasing the minimum container capacity threshold that must be available at all times. This approach builds more spare capacity in your cluster, which allows you to respond less aggressively to capacity changes and absorb the transient capacity fluctuations caused by rolling deployments.
AWS 应用自动缩放比 EC2 自动缩放配置更复杂，至少需要几个组件:
*   **CloudWatch 警报**:这定义了您感兴趣的指标，并在您应该向外扩展或向内扩展时触发。
*   **自动缩放目标**:定义应用自动缩放将应用到的目标组件。对于我们的场景，这将被配置为 todobackend ECS 服务。
*   **自动缩放 IAM 角色**:您必须创建一个 IAM 角色，该角色授予 AWS 应用自动缩放服务权限，以管理您的 CloudWatch 警报、读取您的应用自动缩放策略以及修改您的 ECS 服务，从而增加或减少 ECS 服务任务数。
*   **横向扩展和纵向扩展策略**:这些定义了与横向扩展和纵向扩展您的 ECS 服务相关的行为。
# 配置云监控警报
让我们从添加 CloudWatch 警报开始，该警报将在 todobackand`stack.yml`模板中触发应用自动缩放:
```
...
...
Resources:
  ApplicationServiceLowCpuAlarm:
 Type: AWS::CloudWatch::Alarm
 Properties:
 AlarmActions:
 - !Ref ApplicationServiceAutoscalingScaleInPolicy
 AlarmDescription: Todobackend Service Low CPU 
 Namespace: AWS/ECS
 Dimensions:
 - Name: ClusterName
 Value: !Ref ApplicationCluster
 - Name: ServiceName
 Value: !Sub ${ApplicationService.Name}
 MetricName: CPUUtilization
 Statistic: Average
 Period: 60
 EvaluationPeriods: 3
 Threshold: 20
 ComparisonOperator: LessThanThreshold
 ApplicationServiceHighCpuAlarm:
 Type: AWS::CloudWatch::Alarm
 Properties:
 AlarmActions:
 - !Ref ApplicationServiceAutoscalingScaleOutPolicy
 AlarmDescription: Todobackend Service High CPU 