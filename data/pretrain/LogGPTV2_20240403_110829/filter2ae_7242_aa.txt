沙箱逃逸就是在在一个严格限制的python环境中，通过绕过限制和过滤达到执行更高权限，甚至getshell的过程 。
# 执行模块
## 执行命令的模块
    os
    timeit 
    plarform
    subprocess
    pty
    commands
os模块  
os，语义为操作系统，模块提供了访问多个操作系统服务的功能，可以处理文件和目录。
    os模块
    import os
    # 执行shell命令不会返回shell的输出
    os.system('whoami')
    # 会产生返回值，可通过read()的方式读取返回值
    os.popen("whoami").read()
    commands模块
timeit模块
    import timeit
    timeit.timeit("__import__('os').system('dir')",number=1)
plarform模块
    import platform
    print platform.popen('dir').read()
subprocess模块
    import subprocess
    subprocess.call('dir',shell=True)
    subprocess.Popen('dir', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read()
    #stdin, stdout, stderr： 分别表示程序标准输入、输出、错误句柄。
    python3
    import subprocess
    subprocess.run('dir',shell=True)
pty模块
    #仅限Linux环境
    import pty
    pty.spawn("ls")
commands模块  
commands模块会返回命令的输出和执行的状态位，仅限Linux环境
    import commands
    commands.getstatusoutput("ls")
    commands.getoutput("ls")
    commands.getstatus("ls")
## 文件读取的模块
    file
    open
    codecs
    fileinput
file()函数  
该函数只存在于Python2，Python3不存在
    file('/etc/passwd').read()
    file('test.txt','w').write('xxx')
open()函数
    open('text.txt').read()
codecs模块
    import codecs
    codecs.open('test.txt').read()
## 获取环境信息模块
sys模块
    import sys
    sys.version
    sys.path
    sys.modules
# 执行函数
exec()，eval()，execfile()，compile()函数
    eval('__import__("os").system("ls")')
    exec('__import__("os").system("ls")')
    eval()函数只能计算单个表达式的值，而exec()函数可以动态运行代码段。
    eval()函数可以有返回值，而exec()函数返回值永远为None。
    compile('a = 1 + 2', '', 'exec')
sys模块  
该模块通过modules()函数引入命令执行模块来实现：
    import sys
    sys.modules['os'].system('calc')
# 内联函数
    # 下面代码可列出所有的内联函数
    dir(__builtins__)
    # Python3有一个builtins模块，可以导入builtins模块后通过dir函数查看所有的内联函数
    import builtins
    dir(builtins)
    dir()函数
    在没有参数的时候返回本地作用域中的名称列表   
    在有参数的时候返回该对象的有效属性列表
# 魔术函数
python沙箱逃逸还是离不开继承关系和子父类关系，在查看和使用类的继承，魔法函数起到了不可比拟的作用。
    __class__ 返回一个实例所属的类
    __mro__ 查看类继承的所有父类，直到object
    __subclasses__() 获取一个类的子类，返回的是一个列表
    __bases__ 返回一个类直接所继承的类（元组形式）
    __init__ 类实例创建之后调用, 对当前对象的实例的一些初始化
    __globals__  使用方式是 函数名.__globals__，返回一个当前空间下能使用的模块，方法和变量的字典
    __getattribute__ 当类被调用的时候，无条件进入此函数。
    __getattr__ 对象中不存在的属性时调用
    __dict__ 返回所有属性，包括属性，方法等
例子
    class A(object):
        def __init__(self):
            self.name = "Bob"
            print('ok')
        def __getattribute__(self,item):
            print("getattribute")
        def __getattr__(self):
            print('getattr')
    class B(A):
        pass
    class C(A):
        pass
    class D(B, C):
        pass
    a=A()
    print(a.__class__)#__main__.A
    print(D.__mro__)
    print(B.__subclasses__())
    print(B.__base__)
    print(A.__init__.__globals__)
    print(a.name)
    print(a.age)
    result:
    ok
    getattribute
    None
    (, , , , )
    []
    {'A': , 'a': , 'C': , 'B': , 'D': , '__builtins__': , '__file__': 'G:\\ctf\\test.py', '__package__': None, '__name__': '__main__', '__doc__': None}
    getattribute
    None
    getattribute
    None
# builtin
在python中,我们知道,不用引入直接使用的内置函数称为 builtin 函数,随着`__builtin__`这一个module 自动被引入到环境中  
(在python3.x 版本中,`__builtin__`变成了builtins,而且需要引入)
因此,open(),int(),chr()这些函数,就相当于
    __builtin__.open()
    __builtin__.int()
    __builtin__.chr()
如果我们把这些函数从 **builtin** 中删除,那么就不能够再直接使用了
    >>> import __builtin__
    >>> del __builtin__.chr
    >>> chr(1)
    Traceback (most recent call last):
      File "", line 1, in 
    NameError: name 'chr' is not defined
同样,刚才的`__import__`函数,同样也是一个builtin函数,同样,常用的危险函数eval,exec,execfile也是`__builtin__`的,因此只要从`__builtin__`中删除这些东西,那么就不能再去使用了
`__builtin__`和 `__builtins__`之间是什么关系呢？
1、在主模块main中，`__builtins__`是对内建模块`__builtin__`本身的引用，即`__builtins__`完全等价于`__builtin__`，二者完全是一个东西，不分彼此。
2、非主模块main中，`__builtins__`仅是对`__builtin__.__dict__`的引用，而非`__builtin__`本身
**解决办法:**
`__builtins__`是一个默认引入的module  
对于模块,有一个函数reload用于重新从文件系统中的代码来载入模块
因此我们只需要
    reload(__builtins__)
就可以重新得到完整的`__builtins__`模块了
但是,reload也是`__builtins__`下面的函数,如果直接把它干掉,就没办法重新引入了
但可以使用
    import imp
    imp.reload(__builtins__)
# object类
>
> 对于支持继承的编程语言来说，其方法（属性）可能定义在当前类，也可能来自于基类，所以在方法调用时就需要对当前类和基类进行搜索以确定方法所在的位置。而搜索的顺序就是所谓的“方法解析顺序”（Method
> Resolution Order，或MRO）。
关于MRO的文章：
python的主旨是一切变量皆对象  
python的object类中集成了很多的基础函数，我们想要调用的时候也是需要用object去操作的，主要是通过`__mro__`和
`__bases__`两种方式来创建。  
`__mro__`属性获取类的MRO(方法解析顺序)，也就是继承关系。  
`__bases__`属性可以获取上一层的继承关系，如果是多层继承则返回上一层的东西，可能有多个。
通过`__mro__` 和`__bases__`两种方式创建object类
    ().__class__.__bases__[0]
    {}.__class__.__bases__[0]
    [].__class__.__mro__[1]
    python3
    ''.__class__.__mro__[1]
    python2
    ''.__class__.__mro__[2]
然后通过object类的`__subclasses__()`方法来获得当前环境下能够访问的所有对象，因为调用对象的 `__subclasses__()`
方法会返回当前环境中所有继承于该对象的对象.。Python2和Python3获取的结果不同。
    {}.__class__.__bases__[0].__subclasses__()
# 常见的逃匿思路
常见逃逸思路  
当函数被禁用时，就要通过一些类中的关系来引用被禁用的函数。一些常见的寻找特殊模块的方式如下所示:
    * __class__:获得当前对象的类
    * __bases__ :列出其基类
    * __mro__ :列出解析方法的调用顺序，类似于bases
    * __subclasses__()：返回子类列表