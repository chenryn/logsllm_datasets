等的被select的机会。增加前一个例子的buffer大小会使其输出变得不确定，因为当buffer既不
为满也不为空时，select语句的执行情况就像是抛硬币的行为一样是随机的。
下面让我们的发射程序打印倒计时。这里的select语句会使每次循环迭代等待一秒来执行退出
操作。
gopl.io/ch8/countdown3
func main() {
// ...create abort channel...
fmt.Println("Commencing countdown. Press return to abort.")
tick := time.Tick(1 * time.Second)
for countdown := 10; countdown > 0; countdown-- {
fmt.Println(countdown)
select {
case <-tick:
// Do nothing.
case <-abort:
fmt.Println("Launch aborted!")
return
}
}
launch()
}
time.Tick函数表现得好像它创建了一个在循环中调用time.Sleep的goroutine，每次被唤醒时发
送一个事件。当countdown函数返回时，它会停止从tick中接收事件，但是ticker这个goroutine
还依然存活，继续徒劳地尝试向channel中发送值，然而这时候已经没有其它的goroutine会从
该channel中接收值了--这被称为goroutine泄露(§8.4.4)。
Tick函数挺方便，但是只有当程序整个生命周期都需要这个时间时我们使用它才比较合适。否
则的话，我们应该使用下面的这种模式：
基于select的多路复用 324
gopl
ticker := time.NewTicker(1 * time.Second)
<-ticker.C // receive from the ticker's channel
ticker.Stop() // cause the ticker's goroutine to terminate
有时候我们希望能够从channel中发送或者接收值，并避免因为发送或者接收导致的阻塞，尤
其是当channel没有准备好写或者读时。select语句就可以实现这样的功能。select会有一个
default来设置当其它的操作都不能够马上被处理时程序需要执行哪些逻辑。
下面的select语句会在abort channel中有值时，从其中接收值；无值时什么都不做。这是一个
非阻塞的接收操作；反复地做这样的操作叫做“轮询channel”。
select {
case <-abort:
fmt.Printf("Launch aborted!\n")
return
default:
// do nothing
}
channel的零值是nil。也许会让你觉得比较奇怪，nil的channel有时候也是有一些用处的。因
为对一个nil的channel发送和接收操作会永远阻塞，在select语句中操作nil的channel永远都不
会被select到。
这使得我们可以用nil来激活或者禁用case，来达成处理其它输入或输出事件时超时和取消的
逻辑。我们会在下一节中看到一个例子。
练习 8.8： 使用select来改造8.3节中的echo服务器，为其增加超时，这样服务器可以在客户
端10秒中没有任何喊话时自动断开连接。
基于select的多路复用 325
gopl
8.8. 示例: 并发的字典遍历
在本小节中，我们会创建一个程序来生成指定目录的硬盘使用情况报告，这个程序和Unix里
的du工具比较相似。大多数工作用下面这个walkDir函数来完成，这个函数使用dirents函数来
枚举一个目录下的所有入口。
gopl.io/ch8/du1
// walkDir recursively walks the file tree rooted at dir
// and sends the size of each found file on fileSizes.
func walkDir(dir string, fileSizes chan<- int64) {
for _, entry := range dirents(dir) {
if entry.IsDir() {
subdir := filepath.Join(dir, entry.Name())
walkDir(subdir, fileSizes)
} else {
fileSizes <- entry.Size()
}
}
}
// dirents returns the entries of directory dir.
func dirents(dir string) []os.FileInfo {
entries, err := ioutil.ReadDir(dir)
if err != nil {
fmt.Fprintf(os.Stderr, "du1: %v\n", err)
return nil
}
return entries
}
ioutil.ReadDir函数会返回一个os.FileInfo类型的slice，os.FileInfo类型也是os.Stat这个函数的
返回值。对每一个子目录而言，walkDir会递归地调用其自身，并且会对每一个文件也递归调
用。walkDir函数会向fileSizes这个channel发送一条消息。这条消息包含了文件的字节大小。
下面的主函数，用了两个goroutine。后台的goroutine调用walkDir来遍历命令行给出的每一个
路径并最终关闭fileSizes这个channel。主goroutine会对其从channel中接收到的文件大小进行
累加，并输出其和。
示例: 并发的字典遍历 326
gopl
package main
import (
"flag"
"fmt"
"io/ioutil"
"os"
"path/filepath"
)
func main() {
// Determine the initial directories.
flag.Parse()
roots := flag.Args()
if len(roots) == 0 {
roots = []string{"."}
}
// Traverse the file tree.
fileSizes := make(chan int64)
go func() {
for _, root := range roots {
walkDir(root, fileSizes)
}
close(fileSizes)
}()
// Print the results.
var nfiles, nbytes int64
for size := range fileSizes {
nfiles++
nbytes += size
}
printDiskUsage(nfiles, nbytes)
}
func printDiskUsage(nfiles, nbytes int64) {
fmt.Printf("%d files %.1f GB\n", nfiles, float64(nbytes)/1e9)
}
这个程序会在打印其结果之前卡住很长时间。
$ go build gopl.io/ch8/du1
$ ./du1 $HOME /usr /bin /etc
213201 files 62.7 GB
如果在运行的时候能够让我们知道处理进度的话想必更好。但是，如果简单地把
printDiskUsage函数调用移动到循环里会导致其打印出成百上千的输出。
示例: 并发的字典遍历 327
gopl
下面这个du的变种会间歇打印内容，不过只有在调用时提供了-v的flag才会显示程序进度信
息。在roots目录上循环的后台goroutine在这里保持不变。主goroutine现在使用了计时器来每
500ms生成事件，然后用select语句来等待文件大小的消息来更新总大小数据，或者一个计时
器的事件来打印当前的总大小数据。如果-v的flag在运行时没有传入的话，tick这个channel会
保持为nil，这样在select里的case也就相当于被禁用了。
gopl.io/ch8/du2
var verbose = flag.Bool("v", false, "show verbose progress messages")
func main() {
// ...start background goroutine...
// Print the results periodically.
var tick <-chan time.Time
if *verbose {
tick = time.Tick(500 * time.Millisecond)
}
var nfiles, nbytes int64
loop:
for {
select {
case size, ok := <-fileSizes:
if !ok {
break loop // fileSizes was closed
}
nfiles++
nbytes += size
case <-tick:
printDiskUsage(nfiles, nbytes)
}
}
printDiskUsage(nfiles, nbytes) // final totals
}
由于我们的程序不再使用range循环，第一个select的case必须显式地判断fileSizes的channel
是不是已经被关闭了，这里可以用到channel接收的二值形式。如果channel已经被关闭了的
话，程序会直接退出循环。这里的break语句用到了标签break，这样可以同时终结select和for
两个循环；如果没有用标签就break的话只会退出内层的select循环，而外层的for循环会使之
进入下一轮select循环。
现在程序会悠闲地为我们打印更新流：
示例: 并发的字典遍历 328
gopl
$ go build gopl.io/ch8/du2
$ ./du2 -v $HOME /usr /bin /etc
28608 files 8.3 GB
54147 files 10.3 GB
93591 files 15.1 GB
127169 files 52.9 GB
175931 files 62.2 GB
213201 files 62.7 GB
然而这个程序还是会花上很长时间才会结束。无法对walkDir做并行化处理没什么别的原因，
无非是因为磁盘系统并行限制。下面这个第三个版本的du，会对每一个walkDir的调用创建一
个新的goroutine。它使用sync.WaitGroup (§8.5)来对仍旧活跃的walkDir调用进行计数，另一
个goroutine会在计数器减为零的时候将fileSizes这个channel关闭。
gopl.io/ch8/du3
func main() {
// ...determine roots...
// Traverse each root of the file tree in parallel.
fileSizes := make(chan int64)
var n sync.WaitGroup
for _, root := range roots {
n.Add(1)
go walkDir(root, &n, fileSizes)
}
go func() {
n.Wait()
close(fileSizes)
}()
// ...select loop...
}
func walkDir(dir string, n *sync.WaitGroup, fileSizes chan<- int64) {
defer n.Done()
for _, entry := range dirents(dir) {
if entry.IsDir() {
n.Add(1)
subdir := filepath.Join(dir, entry.Name())
go walkDir(subdir, n, fileSizes)
} else {
fileSizes <- entry.Size()
}
}
}
由于这个程序在高峰期会创建成百上千的goroutine，我们需要修改dirents函数，用计数信号
量来阻止他同时打开太多的文件，就像我们在8.7节中的并发爬虫一样：
示例: 并发的字典遍历 329
gopl
// sema is a counting semaphore for limiting concurrency in dirents.
var sema = make(chan struct{}, 20)
// dirents returns the entries of directory dir.
func dirents(dir string) []os.FileInfo {
sema <- struct{}{} // acquire token
defer func() { <-sema }() // release token
// ...
这个版本比之前那个快了好几倍，尽管其具体效率还是和你的运行环境，机器配置相关。
练习 8.9： 编写一个du工具，每隔一段时间将root目录下的目录大小计算并显示出来。
示例: 并发的字典遍历 330
gopl
8.9. 并发的退出
有时候我们需要通知goroutine停止它正在干的事情，比如一个正在执行计算的web服务，然
而它的客户端已经断开了和服务端的连接。
Go语言并没有提供在一个goroutine中终止另一个goroutine的方法，由于这样会导致goroutine
之间的共享变量落在未定义的状态上。在8.7节中的rocket launch程序中，我们往名字叫abort
的channel里发送了一个简单的值，在countdown的goroutine中会把这个值理解为自己的退出
信号。但是如果我们想要退出两个或者任意多个goroutine怎么办呢？
一种可能的手段是向abort的channel里发送和goroutine数目一样多的事件来退出它们。如果
这些goroutine中已经有一些自己退出了，那么会导致我们的channel里的事件数比goroutine还
多，这样导致我们的发送直接被阻塞。另一方面，如果这些goroutine又生成了其它的
goroutine，我们的channel里的数目又太少了，所以有些goroutine可能会无法接收到退出消
息。一般情况下我们是很难知道在某一个时刻具体有多少个goroutine在运行着的。另外，当
一个goroutine从abort channel中接收到一个值的时候，他会消费掉这个值，这样其它的
goroutine就没法看到这条信息。为了能够达到我们退出goroutine的目的，我们需要更靠谱的
策略，来通过一个channel把消息广播出去，这样goroutine们能够看到这条事件消息，并且在