using other machines with an up-to-date, standards-compliant web
browser and no additional software.
This is achieved by both the current Pico and n-Auth. For the
original Pico, the user must install a browser plugin and possibly a
hardware dongle for setting up a secure short range communication
between the browser and the Pico.
Mature. The scheme has been implemented and deployed on a
large scale for actual authentication purposes beyond research.
As the original Pico is but a concept is does not achieve this prop-
erty. We rate the current Pico as Quasi-Mature, given the recent
usability study that occurred in the wild in a cooperation with a
9Here we differ from the rating of Pico as given by Bonneau et al. [6]
Alexa top 500 website on an Android prototype, available to reg-
istered beta testers. We rate n-Auth as Mature, given that it has
reliable, publicly available Android and iOS applications. Further-
more, a preliminary user study was carried out in the wild (see
Appendix B) and it is currently being deployed on the central login
system of KU Leuven, a major European University.
Non-Proprietary. Anyone can implement or use the scheme for
any purpose without having to pay royalties to anyone else. The
relevant techniques are generally known, published openly and not
protected by patents or trade secrets.
This is a design goal of both the original Pico and the current
Pico. n-Auth only partially achieves this property.
7.3 Usability
Memorywise-Effortless. Users of the scheme do not have to re-
member any secrets at all.
This is achieved by both Pico approaches, the original by using
Pico Siblings, the current one by not having a database locking
mechanism. n-Auth only achieves Quasi-Memorywise-Effortless as
users have to remember one PIN for the database locking mecha-
nism. In future work, we foresee to also enable fingerprint recogni-
tion for the same purpose, thus achieving Memorywise-Effortless.
Scalable-for-Users. Using the scheme for hundreds of accounts
does not increase the burden on the user.
Both the original Pico and n-Auth are scalable-for-users. The
usability study on the current Pico seems to suggest that the Pico
prototype was build specifically for one account with this one
website, considerably simplifying the user interactions (as there is
no general enrolment).
Nothing-to-Carry. Users do not need to carry an additional phys-
ical object (electronic device, mechanical key, piece of paper) to use
the scheme.
The original Pico concept does not achieve this. Both the current
Pico and n-Auth Quasi- achieve this as the users need to carry their
mobile phones, which is something they would carry everywhere
at all time anyway.
Physically-Effortless. The authentication process does not require
physical (as opposed to cognitive) user effort beyond, say, pressing
a button.
This is achieved by all three approaches.
Easy-to-Learn. Users who don’t know the scheme can figure it
out and learn it without too much trouble, and then easily recall
how to use it.
The original Pico is possibly not Easy-to-Learn owing to the
complexity of the Pico Siblings management. For both the current
Pico and n-Auth, results suggest that these are Easy-to-Learn.
Efficient-to-Use. The time the user must spend for each authenti-
cation is acceptably short. The time required for setting up a new
association with a verifier, although possibly longer than that for
authentication, is also reasonable.
Infrequent-Errors. The task that users must perform to log in
usually succeeds when performed by a legitimate and honest user.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
R. Peeters et al.
For the scoring of the above two properties at least a prototype
is necessary, as such the original Pico is not scored10. With respect
to efficient to use, we score both the current Pico and n-Auth as
Quasi-Efficient-to-Use with average user timings for the former of
35 seconds (42 authentication events over 11 participants) and the
latter of 33 seconds (167 authentication events over 24 participants).
For the original Pico, the user has to select one of the two dedicated
buttons (login, create an account) to start the scanning of the QR
code. This approach is prone to errors, as the user might accidentally
hit the wrong button when scanning the QR code and does not
need to confirm his choice. The current Pico, not having a general
enrolment procedure, does not have this problem (as it can only
login after credentials were entered). For both the current Pico and
n-Auth, results suggest that these achieve Infrequent-Errors.
Easy-Recovery-from-Loss. A user can conveniently regain the
ability to authenticate if the token is lost or the credentials forgotten.
None of the three approaches achieves this property. From a
security point of view, Easy-Recovery-from-Loss usually implies a
security vulnerability that might get exploited by an attacker.
8 RELATED WORK
Since user authentication is researched from many different perspec-
tives such as, e.g., security, privacy and usability, many proposals
can be seen as related to our work. Therefore, we only focus on
user authentication systems that (can) make use of mobile phones.
Phoolproof Phishing Prevention [18] is one of the earliest works
on bringing authentication to a cellphone (back in 2006, far from
the current smart phones). A shared key is established between the
server and the app in an out-of-band manner. Later on when the
user wants to authenticate, a browser plugin outsources the TLS
client authentication (based on a pre-shared secret) to the app over
Bluetooth. The authors developed a prototype, which they used to
conduct a usability study.
In [26] a QR-code scheme is proposed to confirm a (banking)
transaction through an OTP (similar to [13] discussed further on).
Snap2Pass/Snap2Pay [9] authenticates the user through a chal-
lenge presented in the QR code on which a MAC is computed using
a symmetric key (shared between the app and server). At registra-
tion this shared key is transferred into the app by scanning a QR
code, making it vulnerable to physical observation at this time. As
it is the web service that generates these shared keys, these can
be assumed to be hard-to-guess and unlinkable. Note that there is
no protection against theft. Public key authentication is presented
as an option, and a logout from the app feature is discussed as
a security extension. They implemented a demonstrator Android
app and an OpenID provider. A 2015 usability study comparing
seven different web authentication systems[19] found that both
Snap2Pass and Google OAuth 2.0 are favorite by users, where the
former benefits from a coolness factor (participants loved that they
could use their smartphones and obviate the need for passwords)
and the latter from reputation ("I trust Google with my passwords").
In the case of Snap2Pass, the study also revealed that users are
concerned with theft and have some concerns about not being able
to login if they forget their smartphone.
10Contrary to Bonneau et al. [6] that scores it Quasi- and remarks that in order to give
it the full score, they first need to see it before they believe it.
tiqr[7] provides an open source (both apps and server) user
authentication system. They published robust Android and iOS
apps in the respective official stores. tiqr makes use of the OAuth
Challenge Response Algorithm (OCRA) [17], which generates a one-
time password based on the challenge and a shared secret (between
client and server, which is transferred from the client to the server
over TLS at enrolment). On the client, the shared secret is in turn
protected under a 4 digit PIN. The challenge is transferred from
the browser to the client in a QR code that also contains a server
identifier. Next the user is shown the URL and asked if he wants to
proceed (explicit consent), then prompted for the PIN, after which
the client authenticates by sending the response to the server over
TLS. tiqr does not have any kind of session management on the app
(one-shot authentication, no possibility to logout from the device)
and relies on symmetric key cryptography making the server more
vulnerable to attacks, even though no symmetric keys are directly
transmitted outside the enrolment procedure. It also misses some
flexibility with respect to the PIN.
QR-codes have been proposed as a method in physical access
control in [13]. This system is a simple extension of a RSA-based
one-time password (OTP) scheme to QR-codes. The paper does not
describe an implementation.
SQRL [10] derives a private key from a master secret and the
server’s domain name, which the client uses to sign a challenge
and log in to the server. The client can be either the browser itself
or a mobile app which obtains the challenge and domain name by
scanning a QR code. The whole system relies on TLS for secure
communication and server authentication. Several proof-of-concept
implementations for both server and client are available, but there
does not appear to be any production-ready software.
Loxin [28] makes use of a central Loxin server and central
PKI that certifies Loxin apps. After entering his identifier (user-
name) into the browser, a cryptographic hash value is shown in the
browser. The central Loxin server then sends a push message with
that hash to the mobile phone. After confirming in the app, the
app signs a random nonce, coming from the web service, using its
private key. After the signature is verified, the user gets logged in.
There exists an open source implementation of the Loxin Android
app (EasyChip) and backend server. While users in principle do
not have to scan a QR code, this approach still requires the user to
enter his username into the client. This also implies that anyone
that knows the username can trigger the Loxin app on the user’s
phone. The major security disadvantages of this approach are its
use of trusted third party, it is not resilient to theft and it is linkable
across different service providers as there is only one public key.
More recently, a comprehensive system (Knock x Knock) for web
authentication was proposed [11]. This work centers on managing
the user’s different accounts on an iPhone and basing security deci-
sions on some contextual information e.g. the location of the user.
This work does not consider the privacy issues of authentication
and is more like a general purpose password manager.
In the area of standardization the FIDO Alliance has proposed
the Universal Authentication Framework (UAF) standard [15] for a
passwordless experience. The standard specifies the interface that
authenticators offer, the authentication itself and also the resolv-
ing process, in which an appropriate authenticator with the right
n-Auth: Mobile Authentication Done Right
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
security capabilities is selected. Contrary to our approach, where
we try to rely as little as possible on the client, UAF is heavily
focused on the client device. For example, for a website, the authen-
tication would be started from the browser through a javascript
API, after which the browser would try to resolve an appropriate
authenticator on the client machine. UAF also lacks proper mutual
authentication, continuous authentication and log out functionality
as it relies on TLS and signatures from the authenticator.
9 CONCLUSION
We described n-Auth, a mobile authentication solution done right,
which is inspired by the original Pico concept. We provided a de-
tailed specification of the user interface and cryptographic protocols
with provisions for future security upgrades. Our robust Android
and iOS implementations demonstrate that our design is feasible,
deployable and allows to evaluate its usability at negligible cost.
The results of our preliminary usability study are encouraging and
show a positive trend towards n-Auth being a more secure and
convenient alternative for passwords.
ACKNOWLEDGEMENTS
The authors would like to thank the anonymous reviewers for
their constructive comments. Pieter Maene is an SB PhD fellow at
Research Foundation - Flanders (FWO).
REFERENCES
[1] Seb Aebischer, Claudio Dettoni, Graeme Jenkinson, Kat Krol, David Llewellyn-
Jones, Toshiyuki Masui, and Frank Stajano. 2017. Pico in the Wild: Replacing
Passwords, One Site at a Time. In 2nd European Workshop on Usable Security
(EuroUSEC 2017).
[2] Daniel J. Bernstein. 2006. Curve25519: New Diffie-Hellman Speed Records. In
Public Key Cryptography (Lecture Notes in Computer Science), Moti Yung, Yevgeniy
Dodis, Aggelos Kiayias, and Tal Malkin (Eds.), Vol. 3958. Springer, 207–228.
[3] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang.
2012. High-speed high-security signatures. Journal of Cryptographic Engineering
2, 2 (2012), 77–89.
[4] Daniel J. Bernstein, Tanja Lange, and Peter Schwabe. 2012. The security impact of
a new cryptographic library. In LatinCrypt (LNCS), Vol. 7533. Springer, 159–176.
[5] Joseph Bonneau, Cormac Herley, Paul C. van Oorschot, and Frank Stajano. 2012.
The Quest to Replace Passwords: a Framework for Comparative Evaluation of
Web Authentication Schemes. In IEEE Symposium on Security and Privacy. IEEE
Computer Society, 553–567.
[6] Joseph Bonneau, Cormac Herley, Paul C. van Oorschot, and Frank Stajano.
2012. The Quest to Replace Passwords: a Framework for Comparative Evaluation
of Web Authentication Schemes. Technical Report UCAM-CL-TR-817. Univer-
sity of Cambridge, Computer Laboratory. http://www.cl.cam.ac.uk/techreports/
UCAM-CL-TR-817.pdf
[7] SURFnet bv. 2010. tiqr. (2010). https://tiqr.org/
[8] Ran Canetti and Hugo Krawczyk. 2002. Security Analysis of IKE’s Signature-
Based Key-Exchange Protocol. In Advances in Cryptology – CRYPTO 2002. LNCS,
Vol. 2442. Springer Berlin Heidelberg, 143–161.
[9] Ben Dodson, Debangsu Sengupta, Dan Boneh, and Monica S Lam. 2010. Secure,
consumer-friendly web authentication and payments with a phone. In Inter-
national Conference on Mobile Computing, Applications, and Services. Springer,
17–38.
[10] Steve Gibson. 2013. Secure Quick Reliable Login. (2013). https://www.grc.com/
[11] Eiji Hayashi and Jason I Hong. 2015. Knock x knock: the design and evaluation
of a unified authentication management system. In ACM International Joint
Conference on Pervasive and Ubiquitous Computing. ACM, 379–389.
[12] Charanjit S. Jutla. 2001. Encryption Modes with Almost Free Message Integrity. In
Advances in Cryptology – EUROCRYPT 2001 (LNCS), Vol. 2045. Springer, 529–544.
[13] Yung-Wei Kao, Guo-Heng Luo, Hsien-Tang Lin, Yu-Kai Huang, and Shyan-Ming
Yuan. 2011. Physical access control based on QR code. In International Conference
on Cyber-enabled distributed computing and knowledge discovery. IEEE, 285–288.
[14] Hugo Krawczyk. 2003. SIGMA: The ’SIGn-and-MAc’ Approach to Authenticated
Diffie-Hellman and Its Use in the IKE-Protocols. In Advances in Cryptology –
sqrl/sqrl.htm
CRYPTO 2003 (LNCS), Vol. 2729. Springer, 400–425.
[15] Rolf Lindemann, Eric Tiffany, Davit Baghdasaryan, Dirk Balfanz, Brad Hill, and
Jeff Hod. 2017. FIDO Universal Authentication Framework Protocol. Version 1.1
id-20170202, FIDO Alliance, February (2017).
[16] Rolf Molich and Jakob Nielsen. 1990. Improving a human-computer dialogue.
Commun. ACM 33, 3 (1990), 338–348.
[17] D. M’Raihi, J. Rydell, S. Bajaj, S. Machani, and D. Naccache. 2011. OCRA: OATH
Challenge-Response Algorithm. RFC 6287. RFC Editor.
[18] Bryan Parno, Cynthia Kuo, and Adrian Perrig. 2006. Phoolproof Phishing Preven-
tion. Springer Berlin Heidelberg, 1–19.
[19] Scott Ruoti, Brent Roberts, and Kent Seamons. 2015. Authentication Melee: A
Usability Analysis of Seven Web Authentication Systems. In 24th International
Conference on World Wide Web (WWW ’15). International World Wide Web
Conferences Steering Committee, 916–926.
[20] J.H. Saltzer and M.D. Schroeder. 1975. The protection of Information in Computer
Systems. Proc. IEEE 63, 9 (1975), 1278–1308.
[21] Florian Schaub, Ruben Deyhle, and Michael Weber. 2012. Password Entry Usabil-
ity and Shoulder Surfing Susceptibility on Different Smartphone Platforms. In
11th International Conference on Mobile and Ubiquitous Multimedia (MUM ’12).
ACM, Article 13, 10 pages.
[22] Frank Stajano. 2011. Pico: No More Passwords!. In Security Protocols XIX - 19th
International Workshop (LNCS), Vol. 7114. Springer, 49–81.
[23] Frank Stajano, Bruce Christianson, T. Mark A. Lomas, Graeme Jenkinson, Jeunese
Payne, Max Spencer, and Quentin Stafford-Fraser. 2015. Pico Without Public
Keys. In Security Protocols XXIII - 23rd International Workshop (LNCS), Vol. 9379.
Springer, 195–211.
[24] Frank Stajano, Graeme Jenkinson, Jeunese Payne, Max Spencer, Quentin Stafford-
Fraser, and Chris Warrington. 2014. Bootstrapping Adoption of the Pico Password
Replacement System. In Security Protocols XXII - 22nd International Workshop
(LNCS), Vol. 8809. Springer, 172–186.
[25] Frank Stajano, Max Spencer, Graeme Jenkinson, and Quentin Stafford-Fraser.
2014. Password-Manager Friendly (PMF): Semantic Annotations to Improve the
Effectiveness of Password Managers. In Technology and Practice of Passwords:
International Conference on Passwords, PASSWORDS’14. Springer International
Publishing, 61–73.
[26] Guenther Starnberger, Lorenz Froihofer, and Karl M Göschka. 2009. QR-TAN:
Secure mobile transaction authentication. In Availability, Reliability and Security,
2009. ARES’09. International Conference on. IEEE, 578–583.
[27] Ka-Ping Yee. 2002. User Interaction Design for Secure Systems. In 4th International
Conference on Information and Communications Security (ICICS ’02) (Lecture Notes
in Computer Science), Vol. 2513. Springer, 278–290.
[28] B. Zhu, X. Fan, and G. Gong. 2014. Loxin: A solution to password-less universal
login. In IEEE Conference on Computer Communications Workshops (INFOCOM
WKSHPS). 488–493.
A QUESTIONNAIRE
Participants had to wait at least 12 hours between answering ques-
tions from one day to the next. Questions in italic are optional to
answer. An overview on the questions on a day by day basis, as
displayed in the survey, can be found at https://www.n-auth.com/
survey/questions.php.
scale from very difficult(1) to very easy(5)]
Day 1.
• How easy was it to start using the n-Auth method? [Likert
• What was your first impression? [open-ended question]
Day 2.
• What authentication methods are you currently using? [check
boxes authentication methods]
• Comments [open-ended question]
Participants chose from the following authentication methods: