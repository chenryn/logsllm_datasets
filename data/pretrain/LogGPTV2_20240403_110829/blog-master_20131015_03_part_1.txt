## Systemtap EXP: Trace PostgreSQL iostat per SQL statement 2  
### 作者                                                         
digoal                                                           
### 日期                                                                          
2013-10-15                                                      
### 标签                                                       
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                        
----                                                                 
## 背景          
```  
本例为上一篇blog的扩展, 可输出到块设备, 以及区分os cache的io请求操作.  
相当精细.  
stp文件如下 :   
global io_stat1%[120000] // 非cache读写字节数(单SQL)  
global io_stat11%[120000] // 非cache读写耗费时间(单SQL)  
global io_stat2%[120000] // cache读写字节数(单SQL)  
global io_stat22%[120000] // cache读写耗费时间(单SQL)  
global io_stat3%[120000] // 非cache读取字节数(总,只关心设备号)  
global io_stat33%[120000] // 非cache读写耗费时间(总,只关心设备号)  
global io_stat4%[120000] // cache读写字节数(总,只关心设备号)  
global io_stat44%[120000] // cache读写耗费时间(总,只关心设备号)  
global del%[120000] // 因为foreach中不允许修改本数组, 所以需要使用另一个数组来存储索引, 方便删除  
probe vfs.read.return {  
try {  
  if ($return>0) {  
    v_us=gettimeofday_us() - @entry(gettimeofday_us())  
    if (devname!="N/A" && execname()=="postgres") { /*skip read from cache, filter postgres otherwise*/  
      io_stat1[pid(),execname(),"R",devname] 0) {  
    v_us=gettimeofday_us() - @entry(gettimeofday_us())  
    if (devname!="N/A" && execname()=="postgres") { /*skip read from cache, filter postgres otherwise*/  
      io_stat1[pid(),execname(),"W",devname] <<< $return  
      io_stat11[pid(),execname(),"W",devname] <<< v_us  
      io_stat3["W",devname] <<< $return  
      io_stat33["W",devname] <<< v_us  
    }  
    if (devname=="N/A" && execname()=="postgres") {  
      io_stat2[pid(),execname(),"W",devname] <<< $return  
      io_stat22[pid(),execname(),"W",devname] <<< v_us  
      io_stat4["W",devname] <<< $return  
      io_stat44["W",devname] <<< v_us  
    }  
  }  
}  
catch(msg) {  
  printdln("---", pn(), msg)  
}  
}  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {  
try {  
  // SQL开始前, 先清除之前SQL的统计变量存储的信息.  
  // 清除非CACHE读写统计变量的信息.  
  // 因为foreach中不允许修改本数组, 所以需要使用另一个数组来存储索引, 方便删除, 这里就是del的用意.  
  foreach([a,b,c,d] in io_stat1) {  
    if (a==pid() && b==execname()) {  
      del[a,b,c,d]=1   //  将a,b,c,d作为索引存储任意一个值到del数组. a,b,c,d就是一会需要清除的io_stat1,io_stat11的索引值.  
    }  
  }  
  foreach([a,b,c,d] in del) {  
    delete io_stat1[a,b,c,d]  
    delete io_stat11[a,b,c,d]  
  }  
  delete del  // 用完del后, 记得清除del的值.  
  // 清除CACHE读写统计变量的信息.  
  foreach([a,b,c,d] in io_stat2) {  
    if (a==pid() && b==execname()) {  
      del[a,b,c,d]=1  
    }  
  }  
  foreach([a,b,c,d] in del) {  
    delete io_stat2[a,b,c,d]  
    delete io_stat22[a,b,c,d]  
  }  
  delete del  
}  
catch(msg) {  
  printdln("---", pn(), msg)  
}  
}  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__done") {  
try {  
  // 输出SQL语句  
  printf("query: %s\n", user_string($arg1))  
  // 非cache统计  
  println("非cache输出")  
  foreach([a,b,c,d] in io_stat1 @sum -) {  
    if (c == "R" && a==pid() && b==execname()) {  
      var1 = @count(io_stat1[a,b,c,d])  // 请求次数  
      var2 = @sum(io_stat1[a,b,c,d]) / 1024  // 请求K字节数  
      var3 = @sum(io_stat11[a,b,c,d])  // 请求时间, us  
      spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0)  // 请求次数每秒  
      spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)  
    }  
    if (c == "W" && a==pid() && b==execname()) {  
      var4 = @count(io_stat1[a,b,c,d])  // 请求次数  
      var5 = @sum(io_stat1[a,b,c,d]) / 1024  // 请求K字节数  
      var6 = @sum(io_stat11[a,b,c,d])  // 请求时间  
      spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0)  // 请求次数每秒  
      spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)  
    }  
    del[a,b,c,d]=1    // 使用a,b,c,d填充del数组, 用于清除io_stat1, io_stat11.  
  }  
  foreach([a,b,c,d] in del) {  
    delete io_stat1[a,b,c,d]  
    delete io_stat11[a,b,c,d]  
  }  
  delete del   // 用完清除del  
// 清除非cache统计用过的本地变量, 后面的cache统计需要继续使用.  
  delete var1  
  delete var2  
  delete var3  
  delete var4  
  delete var5  
  delete var6  
  delete spvar1  
  delete spvar2  
  delete spvar4  
  delete spvar5  
  // cache统计  
  println("cache输出")  
  foreach([a,b,c,d] in io_stat2 @sum -) {  
    if (c == "R" && a==pid() && b==execname()) {  
      var1 = @count(io_stat2[a,b,c,d])  // 请求次数  
      var2 = @sum(io_stat2[a,b,c,d]) / 1024  // 请求K字节数  
      var3 = @sum(io_stat22[a,b,c,d])  // 请求时间  
      spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0)  // 请求次数每秒  
      spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)  
    }  
    if (c == "W" && a==pid() && b==execname()) {  
      var4 = @count(io_stat2[a,b,c,d])  // 请求次数  
      var5 = @sum(io_stat2[a,b,c,d]) / 1024  // 请求K字节数  
      var6 = @sum(io_stat22[a,b,c,d])  // 请求时间  
      spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0)  // 请求次数每秒  
      spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)  
    }  
    del[a,b,c,d]=1  
  }  
  foreach([a,b,c,d] in del) {  
    delete io_stat1[a,b,c,d]  
    delete io_stat11[a,b,c,d]  
  }  
  delete del  
}  
catch(msg) {  
  printdln("---", pn(), msg)  
}  
}  
probe end{  
try {  
  println("----------END----------")  
  // 非cache, 按设备的读写统计输出.  
  println("非cache输出")  
  foreach([c,d] in io_stat3 @sum -) {  
    if (c == "R") {  
      var1 = @count(io_stat3[c,d])  // 请求次数  
      var2 = @sum(io_stat3[c,d]) / 1024  // 请求K字节数  
      var3 = @sum(io_stat33[c,d])  // 请求时间  
      spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0)  // 请求次数每秒  
      spvar2 = ((var3!=0) ? ((1000000*var2)/var3) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var1, var2, spvar1, spvar2)  
    }  
    if (c == "W") {  
      var4 = @count(io_stat3[c,d])  // 请求次数  
      var5 = @sum(io_stat3[c,d]) / 1024  // 请求K字节数  
      var6 = @sum(io_stat33[c,d])  // 请求时间  
      spvar4 = ((var6!=0) ? ((1000000*var4)/var6) : 0)  // 请求次数每秒  
      spvar5 = ((var6!=0) ? ((1000000*var5)/var6) : 0)  // 请求K字节数每秒  
      printf("-%s-devname:%s, reqs:%d, reqKbytes:%d, reqs/s:%d, reqKbytes/s:%d\n", c, d, var4, var5, spvar4, spvar5)  
    }  
  }  
  delete var1  
  delete var2  
  delete var3  
  delete var4  
  delete var5  
  delete var6  
  delete spvar1  
  delete spvar2  
  delete spvar4  
  delete spvar5  
  // cache, 按设备的读写统计输出.  
  println("cache输出")  
  foreach([c,d] in io_stat4 @sum -) {  
    if (c == "R") {  
      var1 = @count(io_stat4[c,d])  // 请求次数  
      var2 = @sum(io_stat4[c,d]) / 1024  // 请求K字节数  
      var3 = @sum(io_stat44[c,d])  // 请求时间  
      spvar1 = ((var3!=0) ? ((1000000*var1)/var3) : 0)  // 请求次数每秒  