# Robustness Testing and Hardening of CORBA ORB Implementations

**Authors:**
- Jiantao Pan
- Philip Koopman
- Daniel P. Siewiorek
- Yennun Huang
- Robert Gruber
- Mimi Ling Jiang

**Affiliations:**
- **Carnegie Mellon University, ECE Department & ICES, Pittsburgh, PA, USA**
  - Jiantao Pan, Philip Koopman, Daniel Siewiorek
  - Email: dps@cs.cmu.edu, {ipan, koopman}@cmu.edu
- **PreCache Inc., 555 Madison Ave., New York, NY, USA**
  - Yennun Huang
  - Email: yennunhuang@yahoo.com
- **AT&T Labs - Research, 4733 Mariposa St., I80 Park Ave., Florham Park, NJ, USA**
  - Robert Gruber, Mimi Ling Jiang
  - Email: gruber@research.att.com, PI:EMAIL

## Abstract

Before deploying Common Object Request Broker Architecture (CORBA) applications in mission-critical scenarios, it is essential to evaluate the robustness of the Object Request Broker (ORB) used as the platform for these applications. We have extended the Ballista robustness testing methodology to assess the exception-handling robustness of C++ ORB client-side application interfaces. Our tests covered two major versions of three ORB implementations on two operating systems, revealing robustness failure rates ranging from 26% to 42%. To enhance ORB robustness, we propose a probing method to harden object and pseudo-object related data types against exceptional inputs. Applying this method to omniORB 2.8 has effectively reduced some robustness failures. These results indicate that current CORBA implementations have significant robustness vulnerabilities, but these can be mitigated with improved exception-handling approaches.

## 1. Introduction

The development of CORBA has advanced the concept of component software, enabling diverse software modules implemented in different programming languages to be integrated into a distributed system using the CORBA interface. This allows for a plug-and-play interaction model, where an application can be built by assembling legacy, third-party, and custom-made software modules on a common CORBA platform, connected by ORBs. This approach reduces both development costs and time to market.

Many mission-critical systems, such as those in aerospace/defense, banking/finance, healthcare/insurance, e-commerce, and telecommunications, have adopted a distributed architecture based on CORBA. Enterprises and government agencies worldwide, including NASA, Boeing, Chase Manhattan Bank, Motorola, Ericsson, and Independence Blue-Cross, use CORBA in various applications, from web-based online banking to cellular phone management, patient care, and even the Hubble Space Telescope. The Object Management Group (OMG) has initiated a Space Domain Task Force to promote the use of CORBA technology in the space and satellite industry.

While cost and development time are important considerations for general-purpose systems, the robustness of software—its ability to function correctly under invalid inputs or stressful environmental conditions—is a critical concern for mission-critical applications. It is essential that these applications are resistant to failures caused by abnormal inputs.

CORBA applications used in critical scenarios must be robust. However, the heterogeneous environment, the use and reuse of commercial off-the-shelf, third-party, and legacy software modules, and their complex interactions can trigger exceptions. Therefore, the graceful handling of expected and unexpected exceptions is crucial for the robustness of CORBA-based systems.

## 2. Methodology

### 2.1 Metric

Previous Ballista work proposed a way to measure the robustness of software modules. In this study, we extend this approach to measure the exception-handling robustness of C++ ORB implementations. The CORBA standard defines a common API for ORB vendors to implement, specifying operations that a client or server object can request the ORB to perform. While the standard does not restrict how vendors implement these operations, it does require that ORBs handle abnormal input situations by raising appropriate exceptions.

Table 1 lists possible robust and non-robust behaviors that may occur during testing, mapped to the Ballista CRASH scale metric. Among the listed robustness failures, computer crashes, thread hangs, thread aborts, and unknown exceptions can be automatically detected by Ballista. False successes and misleading error returns cannot be discovered in an automated manner and are not measured in this study.

### 2.2 CORBA ORB Robustness Testing Architecture

We adapted the Ballista software robustness testing methodology to evaluate ORB implementation robustness. The Ballista testing framework is designed to test Commercial Off-The-Shelf (COTS) software modules for exception-handling robustness problems triggered by invalid inputs.

Figure 1 shows the CORBA ORB testing architecture using Ballista. The Ballista server performs client code generation and test case generation. The test manager of the Ballista client iterates through test cases, managing test case setup, response monitoring, and cleanup. The module-under-test communicates and interacts with the CORBA server object via the CORBA ORB interface.

For each test case, the test manager spawns a corresponding module-under-test thread and monitors its status. Figure 2 shows a generic module-under-test in pseudo-code form. The initialization part initiates the ORB and creates necessary variables. The parameter-instantiation procedure creates an instance of each parameter from the values specified in the test case database. The actual call to the operation under test appears in the ORB-operation-invocation section. Exceptions thrown by the ORB operation during testing are caught and analyzed by the exception-handling section.

### 2.3 Test Case Inheritance

A test case inheritance scheme is used to maximize the reuse of test cases. Most ORB operations use CORBA-specific data types, which are eventually mapped to C++ language data structures. For example, CORBA::Flags is mapped to unsigned long in C++. We have designed an inheritance hierarchy to structure CORBA data types. A child data type inherits test cases defined in its parent data type and expands the parent data type by providing specific test cases. As a general rule, a child data type usually expands its parent data type in value range or semantics.

## 3. Experimental Setup

### 3.1 ORB Platforms Under Test

We tested two major versions of three ORB implementations for the C++ language mapping on Solaris and Linux platforms. The ORBs chosen were Orbix, omniORB, and VisiBroker, based on popularity and availability. Specifically, the following ORBs were tested:

- Orbix 3.0.1 and Orbix 2000
- omniORB 2.8 and omniORB 3.0
- VisiBroker 3.3 and VisiBroker 4.0

Orbix and VisiBroker are commercial implementations, while omniORB is freely available under the GNU public license. Orbix 2000 and VisiBroker 4.0 were tested using evaluation downloads from the vendor websites, while earlier versions were tested using existing licensed copies. All ORBs were tested on a Sparc workstation running Solaris 5.6 to facilitate fair comparisons. Orbix 2000, omniORB 3.0, and VisiBroker 4.0 were also tested on a Pentium machine running RedHat Linux 6.2 (kernel version 2.2.14-5.0smp). Earlier versions of ORBs were not tested on the Linux platform because VisiBroker 3.3 and Orbix 3.0.1 do not have publicly available Linux releases.

### 3.2 Test Set

A subset of basic ORB operations defined in the CORBA 2.1 standard was chosen as the test set. The test set includes operations defined in basic interfaces such as CORBA::Request, CORBA::NVList, CORBA::Context, CORBA::ORB, and CORBA::Object, which appear in Chapters 4 and 5 of the standard.

---

This optimized version of the text aims to improve clarity, coherence, and professionalism.