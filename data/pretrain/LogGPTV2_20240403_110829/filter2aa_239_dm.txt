    finished task for 3, result: 10
    Task 4 is ready
    finished task for 0, result: 4
    Task 6 is ready
    finished task for 1, result: 6
    Task 5 is ready
    finished task for 2, result: 8
在一个类似的场景中，为了把一些工作分支到多个任务中，并在以后合并结果，使用
新的CountdownEvent类很有用。不需要为每个任务创建一个单独的事件对象，而只需要创
建一个事件对象。CountdownEvent类为所有设置了事件的任务定义一个初始数字，在到达
该计数后，就向CountdownEvent类发信号。
修改Calculator类，以使用CountdownEvent类替代ManualResetEvent类。不使用
Set（）方法设置信号，而使用CountdownEvent类定义Signal（）方法（代码文件
EventSampleWithCountdownEvent/Calculator.cs）。
    public class Calculator
    {
      private CountdownEvent _cEvent;
      public int Result { get; private set; }
      public Calculator(CountdownEvent ev
)
      {
        _cEvent = ev;
      }
      public void Calculation(int x, int y)
      {
        WriteLine($"Task {Task.CurrentId} starts calculation");
        Task.Delay(new Random().Next(3000)).Wait();
        Result = x + y;
        // signal the event-completed!
        WriteLine($"Task {Task.CurrentId} is ready");
        _cEvent.Signal();
      }
    }
Main（）方法现在可以简化，使它只需要等待一个事件。如果不像前面那样单独处
理结果，这个新版本就很不错。
    const int taskCount = 4;
    var cEvent = new CountdownEvent(taskCount);
    var calcs = new Calculator[taskCount];
    for (int i = 0; i  calcs[i1].Calculation, Tuple.Create(i1 + 1, i1 + 3));
    }
    cEvent.Wait();
    WriteLine("all finished");
    for (int i = 0; i  FillData(int size)
    {
      var r = new Random();
      return Enumerable.Range(0, size).Select(x => GetString(r));
    }
    private static string GetString(Random r)
    {
      var sb = new StringBuilder(6);
      for (int i = 0; i 。最后一个参
数是int锯齿数组，用于在任务执行过程中写出结果。
任务把处理放在一个循环中。每一次循环中，都处理IList[]的数组元素。每个
循环完成后，任务通过调用SignalAndWait方法，发出做好了准备的信号，并等待，直到
所有的其他任务也准备好处理为止。这个循环会继续执行，直到任务完全完成为止。接
着，任务就会使用RemoveParticipant（）方法从Barrier类中删除它自己。
    private static void CalculationInTask(int jobNumber, int partitionSize,
        Barrier barrier, IList[] coll, int loops, int[][] results)
    {
      LogBarrierInformation("CalculationInTask started", barrier);
      for (int i = 0; i (coll[i]);
        int start = jobNumber ＊ partitionSize;
        int end = start + partitionSize;
        WriteLine($"Task {Task.CurrentId} in loop {i}: partition " +
          $"from {start} to {end}");
        for (int j = start; j ();
      var data = new List[loops];
      for (int i = 0; i (FillData(partitionSize ＊ numberTasks);
      }
      var barrier = new Barrier(numberTasks + 1);
      LogBarrierInformation("initial participants in barrier", barrier);
      for (int i = 0; i  CalculationInTask(jobNumber, partitionSize,
          barrier, data, loops, taskResults[jobNumber]));
      }
      for (int loop = 0; loop  c1 + c2);
        char ch = 'a';
        int sum = 0;
        foreach (var x in resultCollection)
        {
        WriteLine($"{ch++}, count: {x}");
        sum += x;
        }
        LogBarrierInformation($"main task finished loop {loop}, sum: {sum}",
          barrier);
      }
      WriteLine("finished all iterations");
      ReadLine();
    }
  注意： 锯齿数组参见第7章，zip扩展方法参见第13章。
运行应用程序，输出如下所示。在输出中可以看到，每个AddParticipant调用都会增
加参与者的数量和剩下的参与者数量。只要一个参与者调用SignalAndWait，剩下的参与
者数就会递减。当剩下的参与者数量达到0时，所有参与者的等待就结束，开始下一个阶
段：
    Task : initial participants in barrier. 1 current and 1 remaining participant
s,
    phase 0.
    Main - starting task job 0
    Main - starting task job 1
    Task : main task, starting signaling and wait. 3 current and
    3 remaining participants, phase 0.
    Task 4: CalculationInTask started. 3 current and 2 remaining participants, ph
ase 0.
    Task 5: CalculationInTask started. 3 current and 2 remaining participants, ph
ase 0.
    Task 4 in loop 0: partition from 0 to 1000000
    Task 5 in loop 0: partition from 1000000 to 2000000
    Calculation completed from task 4 in loop 0. 38272 times a, 38637 times z
    Task 4: sending signal and wait for all. 3 current and
    2 remaining participants, phase 0.
    Calculation completed from task 5 in loop 0. 38486 times a, 38781 times z
    Task 5: sending signal and wait for all. 3 current and
    1 remaining participants, phase 0.
    Task 5: waiting completed. 3 current and 3 remaining participants, phase 1
    Task 4: waiting completed. 3 current and 3 remaining participants, phase 1
    Task : main waiting completed. 3 current and 3 remaining participants, phase 
1
    ...
22.12 ReaderWriterLockSlim类
为了使锁定机制允许锁定多个读取器（而不是一个写入器）访问某个资源，可以使用
ReaderWriterLockSlim类。这个类提供了一个锁定功能，如果没有写入器锁定资源，就允
许多个读取器访问资源，但只能有一个写入器锁定该资源。
ReaderWriterLockSlim类有阻塞或不阻塞的方法来获取读取锁，如阻塞的
EnterReadLock（）和不阻塞的TryEnterReadLock（）方法，还可以使用阻塞的
EnterWriteLock（）和不阻塞的TryEnterWriteLock（）方法获得写入锁定。如果任务先读
取资源，之后写入资源，它就可以使用EnterUpgradableReadLock（）或
TryEnterUpgradableReadLock（）方法获得可升级的读取锁定。有了这个锁定，就可以获
得写入锁定，而无须释放读取锁定。
这个类的几个属性提供了当前锁定的相关信息，如CurrentReadCount、
WaitingReadCount、WaitingUpgradableReadCount和WaitingWriteCount。
下面的示例程序创建了一个包含6项的集合和一个ReaderWriterLockSlim对象。
ReaderMethod方法获得一个读取锁定，读取列表中的所有项，并把它们写到控制台中。
WriterMethod（）方法试图获得一个写入锁定，以改变集合的所有值。在Main（）方法
中，启动6个任务，以调用ReaderMethod（）或WriterMethod（）方法（代码文件
ReaderWriterSample/Program.cs）。
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using static System.Console;
    namespace ReaderWriterLockSample
    {
      class Program
      {
        private static List _items = new List() { 0, 1, 2, 3, 4, 5};
        private static ReaderWriterLockSlim _rwl =
        new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
        public static void ReaderMethod(object reader)
        {
        try
        {
          _rwl.EnterReadLock();
          for (int i = 0; i < _items.Count; i++)
          {
            WriteLine($"reader {reader}, loop: {i}, item: {_items[i]}");
            Task.Delay(40).Wait();
          }
        }
        finally
        {
          _rwl.ExitReadLock();
        }
        }
        public static void WriterMethod(object writer)
        {
        try
        {
          while (! _rwl.TryEnterWriteLock(50))
          {
            WriteLine($"Writer {writer} waiting for the write lock");
            WriteLine($"current reader count: {_rwl.CurrentReadCount}");
          }
          WriteLine($"Writer {writer} acquired the lock");
          for (int i = 0; i < _items.Count; i++)
          {
            _items[i]++;
            Task.Delay(50).Wait();
          }
          WriteLine($"Writer {writer} finished");
        }
        finally
        {
          _rwl.ExitWriteLock();
        }
        }
        static void Main()
        {
        var taskFactory = new TaskFactory(TaskCreationOptions.LongRunning,
          TaskContinuationOptions.None);
        var tasks = new Task[6];
        tasks[0] = taskFactory.StartNew(WriterMethod, 1);
        tasks[1] = taskFactory.StartNew(ReaderMethod, 1);
        tasks[2] = taskFactory.StartNew(ReaderMethod, 2);
        tasks[3] = taskFactory.StartNew(WriterMethod, 2);
        tasks[4] = taskFactory.StartNew(ReaderMethod, 3);
        tasks[5] = taskFactory.StartNew(ReaderMethod, 4);
        Task.WaitAll(tasks);
        }
      }
    }
运行这个应用程序，可以看到第一个写入器先获得锁定。第二个写入器和所有的读取
器需要等待。接着，读取器可以同时工作，而第二个写入器仍在等待资源。
    Writer 1 acquired the lock
    Writer 2 waiting for the write lock