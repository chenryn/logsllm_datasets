how many of the remaining violations correspond to exploitable
vulnerabilities.
MiMoSA was able to ﬁnd all the known vulnerabilities and to
discover several new ones.
With regard to multi-module data-ﬂow vulnerabilities, we had
only one false positive. In fact, in the MyEasyMarket application,
the PHP variable REMOTE_ADDR is saved in the database and later
printed to the user. Even though the value of the variable is never
sanitized, it is automatically set to the IP address of the client’s
machine by the PHP engine. Therefore, it only has a limited range
5All the experiments were executed on a Pentium 4 3.6GHz with
2G of RAM.
of valid values (numbers and dots) that do not allow a user to mount
an attack against the application.
MiMoSA also reported several violations of the intended work-
ﬂow of the web applications. Even though in most of the cases they
corresponded only to anomalous paths into the application (e.g., di-
rectly jumping from the login to the logout page), we were also able
to conﬁrm that some of the reported violations correspond to actual
vulnerabilities that could be exploited to gain unauthorized access
to a restricted page.
While the inter-module analysis is the more time-consuming
phase, the intra-module analysis is certainly the more fragile, since
it is where the static analysis techniques that we use introduce most
of the approximations. Any imperfection in this phase can result
in an increasing number of both false positives and false negatives.
For instance, during the construction of the intended paths, we ob-
served that some of the views were isolated, with no connection
to any other part of the application6. This was probably caused by
an error in the view extraction, such as a missing link or a wrong
pre-condition predicate.
To better test the accuracy of our intra-module analysis and eval-
uate its impact on the ﬁnal results, we selected one of the appli-
cations in our test suite (i.e., SimpleCMS) and manually analyzed
the output of each step of the view extraction phase. The results
are shown in Table 4. MiMoSA achieves a high accuracy in the
extraction of database operations, links, post-conditions, and sinks.
Also the rate of unknown conditions, i.e., the pre-conditions that
MiMoSA was not able to correctly reconstruct, is reasonable, con-
sidering that we are using a static analysis technique.
In this application, the number of generated views is, instead,
considerably higher than the number of views actually present in
the application code. This happens because of two main reasons.
First, MiMoSA might generate views corresponding to paths that
are infeasible in the program, such as the ones that traverse nodes
with conﬂicting conditions. The presence of these views does not
affect the ﬁnal results since they are never entered during the detec-
tion phase. The second reason is that MiMoSA can generate dupli-
cate views, i.e., views with different but equivalent pre-conditions.
Even though this may lead to inaccuracy in the ﬁnal results, in most
of the cases its main effect is just to slow down the path generation
phase.
7. RELATED WORK
In the introduction, we brieﬂy mentioned some recent works in
the areas of intrusion detection and application ﬁrewalls that fo-
cus on detecting and blocking web-based attacks. Since our work
focuses on vulnerability analysis, and, consequently, deals with a
different class of problems than the detection of attacks at runtime,
we are not going to further review these works here.
There is a number of recent works in the area of vulnerability
analysis of web-based applications. Most of these approaches are
based on taint propagation analysis applied to application written
in PHP [7, 9, 10, 22] or Java [6, 14].
The WebSSARI tool [7] is one of the ﬁrst works that applies
static taint propagation analysis to ﬁnd security vulnerabilities in
PHP. WebSSARI targets three speciﬁc types of vulnerabilities:
cross-site scripting, SQL injection, and general script injection.
The tool uses ﬂow-sensitive, intra-procedural analysis based on a
lattice model and typestate. When the tool determines that tainted
data reaches sensitive functions, it automatically inserts runtime
6These views were not taken into consideration by our path explo-
ration algorithm since they could not provide any useful informa-
tion to the user.
Application Name
Aphpkb 0.71
BloggIt 1.01
MyEasyMarket 4.1
Scarf 2006-09-20
SimpleCms
PHP Files Description
Known Vulnerabilities
59
24
23
18
22
Knowledge-base management system –
Blog engine
On-line shop
CVE-2006-7014
–
Conference administration
CVE-2006-5909
Content management system
BID 19386
Table 2: PHP applications used in our experiments. Vulnerabilities are referenced by their Common Vulnerabilities and Exposures
ID (CVE) or their Bugtraq ID (BID).
Application
Aphpkb
BloggIt
MyEasyMarket
Scarf
SimpleCms
Intra-Module Analysis
Time
Views
4680
31:24m
Time DF Violations-(FP) DF Vulnerabilities WF Violations-(FP) WF Vulnerabilities
3:00h
-
17-(10)
0-(0)
0
Inter-Module Analysis
339
449
1721
417
2:12m
1:12:00h
7:30m
0:22m
0:31h
6:36h
1:10h
2:50h
14-(0)
2-(1)
3-(0)
8-(0)
14
1
3
8
3-(0)
1-(0)
3-(0)
5-(0)
a Detected through inspection of the entry point list, as discussed in Section 5.1.
-
1a
1
4
Table 3: Results of the experiments. DF: Data Flow, WF: Work Flow, FP: False Positives.
guards, i.e., sanitization routines, that, at runtime, remove mali-
cious content from user input.
Xie and Aiken [22] use intra-block, intra-procedural, and inter-
procedural taint propagation analysis to ﬁnd SQL injection vul-
nerabilities in PHP code. This approach uses symbolic execution
to model the effect of statements inside functions. These effects
are summarized into the pre- and post-condition sets for each ana-
lyzed function. The function pre-conditions contain a derived set of
memory locations that have to be sanitized before the function invo-
cation, while the post-conditions contain the set of parameters and
global variables that are sanitized inside the function. To model the
effects of sanitization routines, the approach uses a programmer-
provided set of possible sanitization functions, considers certain
forms of casting as a sanitization process, and, in addition, keeps a
database of sanitizing regular expressions, whose effects are speci-
ﬁed by the programmer.
Pixy [9,10], which we have described in Section 4.1, speciﬁcally
targets the identiﬁcation of intra-module XSS vulnerabilities. This
tool seems to be the most complete static PHP analyzer in terms
of the PHP features modeled. To the best of our knowledge, it
is the only publicly available tool for the analysis of PHP-based
applications.
None of the described approaches performs inter-module analy-
sis, that is, all the vulnerabilities identiﬁed by these approaches are
local to a single application module. Unlike our approach, these
techniques do not have any notion of the application’s extended
state, and, therefore, they are unable to capture the workﬂow vul-
nerabilities described in Section 2. By considering all inputs gen-
erated from outside of an application as being tainted, these ap-
proaches should be able to identify some types of multi-module
data-ﬂow vulnerabilities. However, because of the locality of the
analysis, they are incapable of tracing the origins of multi-steps at-
tacks, and, as a result, are subject to a much higher false positive
rate.
There is also a number of works that apply dynamic analysis
techniques to the analysis of web-based applications. For example,
approaches that use dynamic taint propagation analysis, conceptu-
ally similar to Perl’s taint mode but often with a more reﬁned granu-
larity, have been applied to other languages as well: Nguyen-Tuong
et al. [15] propose modiﬁcations of the PHP interpreter to dynami-
cally track tainted data in PHP programs, and Haldar et al. [5] apply
a similar approach to the Java Virtual Machine.
Pietraszek and Vanden Berghe [16] present a unifying view of
injection vulnerabilities and describe a general approach for de-
tecting and preventing injection attacks. This approach is based on
instrumenting the platform, such as the PHP interpreter, to track the
ﬂow of untrusted data inside the applications. A context-sensitive
string evaluation is then performed at each sensitive sink to detect
injection attacks.
All dynamic approaches described above either are able or, at
least in theory, can be extended to detect multi-module data-ﬂow
attacks. The main difference with our approach is that we are able
to detect such vulnerabilities statically, considering all the possi-
ble application’s paths. Also, none of these approaches can detect
workﬂow vulnerabilities because they do not model or take into
account the application’s intended workﬂow.
There are also several recent approaches that try to identify SQL
injection attacks by building models of legitimate queries that can
be performed by an application and comparing these models to
the dynamically-generated queries. Whenever these queries struc-
turally violate the static model, an attack is detected. For example,
the AMNESIA tool [6] targets SQL injection attacks in Java-based
applications. AMNESIA deﬁnes a SQL injection attack as the at-
tack in which the logic or semantics of a legitimate SQL statement
is changed due to malicious injection of new SQL keywords or op-
erators. Thus, to detect such attacks, the semantics of dynamically-
generated queries is checked against a derived model that repre-
sents the intended semantics of the query.
Su and Wassermann [20] propose another approach that uses the
syntactic structure of the program-generated output to identify in-
jection attacks, such as XSS, XPath injection, and shell injection
attacks. The current implementation, called SqlCheck is designed
to detect SQL injection attacks only. The approach works by track-
ing sub-strings from the user input through the program execution.
The tracking is implemented by augmenting input strings with spe-
cial characters, which mark the start and the end of each sub-string.
Views
Accuracy
Rate of
Extracted Optimal
47
417
DB Operations Links
96% 78%
Post-Conds
Sinks Unknown Conditions
15%
100% 100%
Table 4: Accuracy of the view extraction step for SimpleCMS.
Then, dynamically-generated queries are intercepted and checked
by a modiﬁed SQL parser. Using the meta-information provided by
the sub-string markers, the parser is able to determine if the query’s
valid syntactic form is modiﬁed by the sub-string derived from user
input, and, in that case, it blocks the query.
Both AMNESIA and SqlCheck can successfully detect SQL in-
jection attacks at the time of injection; however, without a sig-
niﬁcant implementation effort, none of them can detect data-ﬂow
vulnerabilities such as persistent XSS attacks. Obviously, both ap-
proaches, as being based on the syntactic structure of legitimate
output, are incapable of detecting workﬂow vulnerabilities/attacks.
8. CONCLUSIONS
As web applications that perform security-critical tasks become
more sophisticated, there is an increasing need for techniques and
tools that can address the novel security issues introduced by these
applications. In particular, because of the heterogeneous nature of
web applications, it is important to develop new techniques that are
able to analyze the interaction among multiple application modules
and different technologies.
In this paper, we presented a novel vulnerability analysis ap-
proach that takes into account the multi-module, multi-technology
nature of complex web applications. Our technique is able to model
both the intended workﬂow and the extended state of a web appli-
cation in order to identify both workﬂow and data-ﬂow attacks that
involve multiple modules.
We developed a prototype tool, called MiMoSA, that implements
our approach and we tested it on a number of real-world applica-
tions. The results show that by modeling explicitly the state and
workﬂow of a web application, it is possible to identify complex
vulnerabilities that existing state-of-the-art approaches are not able
to identify.
Future work will focus on two main directions. First, we will
include additional technologies so that we can cover a larger class
of applications. Second, we plan to leverage the ﬁndings of the
static analysis to automatically generate test drivers to reduce the
number of the false positives.
Acknowledgments
This research was partially supported by the National Science
Foundation, under grants CCR-0238492, CCR-0524853, and CCR-
0716095.
9. REFERENCES
[1] A. V. Aho, R. Sethi, and J.D. Ullman. Compilers: Principles,
Techniques, and Tools. Addison-Wesley Longman Publishing Co.,
Inc., 1986.
[2] M. Almgren, H. Debar, and M. Dacier. A Lightweight Tool for
Detecting Web Server Attacks. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), pages 157–170,
February 2000.
[3] C. Anley. Advanced SQL Injection in SQL Server Applications.
Technical report, Next Generation Security Software, Ltd, 2002.
[4] Common Vulnerabilities and Exposures.
http://www.cve.mitre.org/, 2006.
[5] V. Haldar, D. Chandra, and M. Franz. Dynamic Taint Propagation
for Java. In Proceedings of the Annual Computer Security
Applications Conference (ACSAC’05), pages 303–311, December
2005.
[6] W. Halfond and A. Orso. AMNESIA: Analysis and Monitoring for
NEutralizing SQL-Injection Attacks. In Proceedings of the
International Conference on Automated Software Engineering
(ASE’05), pages 174–183, November 2005.
[7] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. Lee, and S.-Y. Kuo.
Securing Web Application Code by Static Analysis and Runtime
Protection. In Proceedings of the International World Wide Web
Conference (WWW’04), pages 40–52, May 2004.
[8] N. Jovanovic, E. Kirda, and C. Kruegel. Preventing Cross Site
Request Forgery Attacks. In Proceedings of the IEEE International
Conference on Security and Privacy for Emerging Areas in
Communication Networks (Securecomm), pages 1–10, September
2006.
[9] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static Analysis
Tool for Detecting Web Application Vulnerabilities. In Proceedings
of the IEEE Symposium on Security and Privacy, pages 258–263,
May 2006.
[10] N. Jovanovic, C. Kruegel, and E. Kirda. Precise Alias Analysis for
Static Detection of Web Application Vulnerabilities. In Proceedings
of the ACM SIGPLAN Workshop on Programming Languages and
Analysis for Security (PLAS’06), pages 27–36, June 2006.
[11] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A
Client-Side Solution for Mitigating Cross Site Scripting Attacks. In
Proceedings of the ACM Symposium on Applied Computing (SAC),
pages 330–337, April 2006.
[12] A. Klein. Cross Site Scripting Explained. Technical report, Sanctum
Inc., 2002.
[13] C. Kruegel and G. Vigna. Anomaly Detection of Web-based
Attacks. In Proceedings of the ACM Conference on Computer and
Communication Security (CCS ’03), pages 251–261, October 2003.
[14] B. Livshits and M. Lam. Finding Security Vulnerabilities in Java
Applications with Static Analysis. In Proceedings of the USENIX
Security Symposium (USENIX’05), pages 271–286, August 2005.
[15] A. Nguyen-Tuong, S. Guarnieri, D. Greene, and D. Evans.
Automatically Hardening Web Applications Using Precise Tainting.
In Proceedings of the International Information Security
Conference (SEC’05), pages 372–382, May 2005.
[16] T. Pietraszek and C. Vanden Berghe. Defending against Injection
Attacks through Context-Sensitive String Evaluation. In
Proceedings of the International Symposium on Recent Advances in
Intrusion Detection (RAID’05), pages 372–382, 2005.
[17] I. Ristic. ModSecurity. http://www.modsecurity.org/,
November 2006.
[18] D. Scott and R. Sharp. Abstracting Application-Level Web
Security. In Proceedings of the International World Wide Web
Conference (WWW’02), pages 396–407, May 2002.
[19] M. Sharir and A. Pnueli. Two Approaches to Interprocedural Data
Flow Analysis. In N. Jones and S. Muchnick, editors, Program
Flow Analysis: Theory and Applications, chapter 7. Prentice Hall,
1981.
[20] Z. Su and G. Wassermann. The Essence of Command Injection
Attacks in Web Applications. In Proceedings of the Annual
Symposium on Principles of Programming Languages (POPL’06),
pages 372–382, January 2006.
[21] G. Vigna, W. Robertson, V. Kher, and R.A. Kemmerer. A Stateful
Intrusion Detection System for World-Wide Web Servers. In
Proceedings of the Annual Computer Security Applications
Conference (ACSAC 2003), pages 34–43, December 2003.
[22] Y. Xie and A. Aiken. Static Detection of Security Vulnerabilities in
Scripting Languages. In Proceedings of the USENIX Security
Symposium (USENIX’06), pages 271–286, August 2006.