### 6.5 无缓冲通道

在第35行到第65行的代码中，我们展示了如何使用无缓冲通道来同步多个goroutine之间的接力棒传递。以下是对这段代码的详细解释和优化后的版本。

#### 优化后的代码
```go
// Runner goroutine代表一个跑步者
func Runner(baton chan int, wg *sync.WaitGroup) {
    // 等待接力棒
    runner := <-baton

    // 开始绕着跑道跑步
    fmt.Printf("Runner %d Running With Baton\n", runner)

    // 创建下一位跑步者
    if runner != 4 {
        newRunner := runner + 1
        fmt.Printf("Runner %d To The Line\n", newRunner)
        go Runner(baton, wg)
    }

    // 围绕跑道跑
    time.Sleep(100 * time.Millisecond)

    // 比赛结束了吗？
    if runner == 4 {
        fmt.Printf("Runner %d Finished, Race Over\n", runner)
        wg.Done()
        return
    }

    // 将接力棒交给下一位跑步者
    fmt.Printf("Runner %d Exchange With Runner %d\n", runner, newRunner)
    baton <- newRunner
}
```

#### 运行结果
运行这个程序会得到如下输出：
```
Runner 1 Running With Baton
Runner 1 To The Line
Runner 1 Exchange With Runner 2
Runner 2 Running With Baton
Runner 2 To The Line
Runner 2 Exchange With Runner 3
Runner 3 Running With Baton
Runner 3 To The Line
Runner 3 Exchange With Runner 4
Runner 4 Running With Baton
Runner 4 Finished, Race Over
```

#### 代码解析
1. **创建无缓冲通道**：在`main`函数的第17行，创建了一个无缓冲的`int`类型的通道`baton`，用来同步传递接力棒。
2. **WaitGroup初始化**：在第20行，给`WaitGroup`加1，这样`main`函数就会等待最后一位跑步者完成比赛。
3. **启动第一个跑步者**：在第23行，创建了一个goroutine，表示第一位跑步者来到跑道。之后在第26行，将接力棒交给这个跑步者，比赛开始。
4. **阻塞等待**：在第29行，`main`函数阻塞在`WaitGroup`上，等候最后一位跑步者完成比赛。

在`Runner` goroutine中，可以看到接力棒是如何在跑步者之间传递的：
- 第37行，goroutine对`baton`通道执行接收操作，表示等待接力棒。
- 一旦接力棒传了进来，在第46行就会创建一位新跑步者，准备接力下一棒，直到goroutine是第四个跑步者。
- 第50行，跑步者围绕跑道跑100毫秒。
- 第55行，如果第四个跑步者完成了比赛，就调用`Done`，将`WaitGroup`减1，之后goroutine返回。
- 如果这个goroutine不是第四个跑步者，那么在第64行，接力棒会交到下一个已经在等待的跑步者手上。在这个时候，goroutine会被锁住，直到交接完成。

### 6.5.2 有缓冲的通道

有缓冲的通道（buffered channel）是一种在被接收前能存储一个或多个值的通道。这种类型的通道并不强制要求goroutine之间必须同时完成发送和接收。通道会阻塞发送和接收动作的条件也会不同：
- 只有在通道中没有要接收的值时，接收动作才会阻塞。
- 只有在通道没有可用缓冲区容纳被发送的值时，发送动作才会阻塞。

这导致有缓冲的通道和无缓冲的通道之间的一个很大不同：无缓冲的通道保证进行发送和接收的goroutine会在同一时间进行数据交换；有缓冲的通道没有这种保证。

#### 例子
让我们看一个使用有缓冲的通道的例子，这个例子管理一组goroutine来接收并完成工作。有缓冲的通道提供了一种清晰而直观的方式来实现这个功能，如代码清单6-24所示。

##### 代码清单6-24 `listing24.go`
```go
package main

import (
    "fmt"
    "math/rand"
    "sync"
    "time"
)

const (
    numberGoroutines = 4 // 要使用的goroutine的数量
    taskLoad         = 10 // 要处理的工作的数量
)

var wg sync.WaitGroup

func init() {
    rand.Seed(time.Now().Unix())
}

func main() {
    // 创建一个有缓冲的通道来管理工作
    tasks := make(chan string, taskLoad)

    // 启动goroutine来处理工作
    wg.Add(numberGoroutines)
    for gr := 1; gr <= numberGoroutines; gr++ {
        go worker(tasks, gr)
    }

    // 增加一组要完成的工作
    for post := 1; post <= taskLoad; post++ {
        tasks <- fmt.Sprintf("Task : %d", post)
    }

    // 当所有工作都处理完时关闭通道
    close(tasks)

    // 等待所有工作完成
    wg.Wait()
}

func worker(tasks chan string, worker int) {
    defer wg.Done()

    for {
        // 等待分配工作
        task, ok := <-tasks
        if !ok {
            fmt.Printf("Worker: %d : Shutting Down\n", worker)
            return
        }

        // 显示我们开始工作了
        fmt.Printf("Worker: %d : Started %s\n", worker, task)

        // 随机等一段时间来模拟工作
        sleep := rand.Int63n(100)
        time.Sleep(time.Duration(sleep) * time.Millisecond)

        // 显示我们完成了工作
        fmt.Printf("Worker: %d : Completed %s\n", worker, task)
    }
}
```

#### 运行结果
运行这个程序会得到如下输出：
```
Worker: 1 : Started Task : 1
Worker: 2 : Started Task : 2
Worker: 3 : Started Task : 3
Worker: 4 : Started Task : 4
Worker: 1 : Completed Task : 1
Worker: 1 : Started Task : 5
Worker: 4 : Completed Task : 4
Worker: 4 : Started Task : 6
Worker: 1 : Completed Task : 5
Worker: 1 : Started Task : 7
Worker: 2 : Completed Task : 2
Worker: 2 : Started Task : 8
Worker: 3 : Completed Task : 3
Worker: 3 : Started Task : 9
Worker: 1 : Completed Task : 7
Worker: 1 : Started Task : 10
Worker: 4 : Completed Task : 6
Worker: 4 : Shutting Down
Worker: 3 : Completed Task : 9
Worker: 3 : Shutting Down
Worker: 2 : Completed Task : 8
Worker: 2 : Shutting Down
Worker: 1 : Completed Task : 10
Worker: 1 : Shutting Down
```

由于程序和Go语言的调度器带有随机成分，这个程序每次执行得到的输出会不一样。不过，通过有缓冲的通道，使用所有4个goroutine来完成工作，这个流程不会变。从输出可以看到每个goroutine是如何接收从通道里分发的工作。

### 6.6 小结
- 并发是指goroutine运行的时候是相互独立的。
- 使用关键字`go`创建goroutine来运行函数。
- goroutine在逻辑处理器上执行，而逻辑处理器具有独立的系统线程和运行队列。
- 竞争状态是指两个或多个goroutine试图访问同一个资源。
- 原子函数和互斥锁提供了一种防止出现竞争状态的办法。
- 通道提供了一种在两个goroutine之间共享数据的简单方法。
- 无缓冲的通道保证同时交换数据，而有缓冲的通道不做这种保证。

### 第7章 并发模式
本章主要内容
- 控制程序的生命周期
- 管理可复用的资源池
- 创建可以处理任务的goroutine池

在第6章中，我们学习了什么是并发，通道是如何工作的，并学习了可以实际工作的并发代码。本章将通过学习更多代码来扩展这些知识。我们会学习3个可以在实际工程里使用的包，这3个包分别实现了不同的并发模式。每个包从一个实用的视角来讲解如何使用并发和通道。我们会学习如何用这个包简化并发程序的编写，以及为什么能简化的原因。

#### 7.1 `runner`包
`runner`包用于展示如何使用通道来监视程序的执行时间，如果程序运行时间太长，也可以用`runner`包来终止程序。当开发需要调度后台处理任务的程序的时候，这种模式会很有用。这个程序可能会作为cron作业执行，或者在基于定时任务的云环境（如iron.io）里执行。

让我们来看一下`runner`包里的`runner.go`代码文件，如代码清单7-1所示。

##### 代码清单7-1 `runner/runner.go`
```go
// Gabriel Aszalos协助完成了这个示例
// runner包管理处理任务的运行和生命周期
package runner

import (
    "errors"
    "os"
    "os/signal"
    "time"
)

// Runner在给定的超时时间内执行一组任务，并且在操作系统发送中断信号时结束这些任务
type Runner struct {
    // 定义结构体字段
}
```

以上是对原文的优化和整理，使其更加清晰、连贯和专业。希望对你有所帮助！