this trait stems from worms’ self-propagating nature. For
port-scanning worms, the exponential growth in the popu-
lation of infected hosts and attendant exponential growth in
infection attempt trafﬁc are well known [8]. As also noted
and exploited by Singh et al. [15], taken together, these two
traits of worm trafﬁc—content commonality and magnitude
of trafﬁc volume—suggest that analyzing the frequency of
payload content should be useful in identifying worm pay-
loads. During signature generation, Autograph measures the
frequency with which non-overlapping payload substrings
occur across all suspicious ﬂow payloads, and proposes the
most frequently occurring substrings as candidate signatures.
In the remainder of this section, we describe Autograph’s
two stages in further detail.
3.1 Selecting Suspicious Trafﬁc
In this work, we use a simple port-scanner detection tech-
nique as a heuristic to identify malicious trafﬁc; we clas-
sify all ﬂows from port-scanning sources as suspicious. Note
that we do not focus on the design of suspicious ﬂow clas-
siﬁers herein; Autograph can adopt any anomaly detection
technique that classiﬁes worm ﬂows as suspicious with high
probability. In fact, we deliberately use a port-scanning ﬂow
classiﬁer because it is simple, computationally efﬁcient, and
clearly imperfect; our aim is to demonstrate that Autograph
generates highly selective and speciﬁc signatures, even with
a naive ﬂow classiﬁer. With more accurate ﬂow classiﬁers,
one will only expect the quality of Autograph’s signatures to
improve.
Many recent worms rely on scanning of the IP address
If a
space to search for vulnerable hosts while spreading.
worm ﬁnds another machine that runs the desired service on
the target port, it sends its infectious payload. Probing a
non-existent host or service, however, results in an unsuc-
cessful connection attempt, easily detectable by monitoring
outbound ICMP host/port unreachable messages, or identify-
ing unanswered inbound SYN packets. Hit-list worms [18],
while not yet observed in the wild, violate this port-scanning
assumption; we do not address them in this paper, but com-
ment on them brieﬂy in Section 6.
Autograph stores the source and destination addresses of
each inbound unsuccessful TCP connection it observes. Once
an external host has made unsuccessful connection attempts
to more than s internal IP addresses, the ﬂow classiﬁer con-
siders it to be a scanner. All successful connections from an
IP address ﬂagged as a scanner are classiﬁed as suspicious,
and their inbound packets written to the suspicious ﬂow pool,
until that IP address is removed after a timeout (24 hours in
the current prototype).4 Packets held in the suspicious ﬂow
pool are dropped from storage after a conﬁgurable interval t.
Thus, the suspicious ﬂow pool contains all packets received
from suspicious sources in the past time period t.5
Autograph reassembles all TCP ﬂows in the suspicious
ﬂow pool. Every r minutes, Autograph considers initiating
signature generation. It does so when for a single destination
port, the suspicious ﬂow pool contains more than a threshold
number of ﬂows q
. In an online deployment of Autograph,
we envision typical r values on the order of ten minutes. We
continue with a detailed description of signature generation
in the next subsection.
3.2 Content-Based Signature Generation
Autograph next selects the most frequently occurring byte se-
quences across the ﬂows in the suspicious ﬂow pool as signa-
tures. To do so, it divides each suspicious ﬂow into smaller
content blocks, and counts the number of suspicious ﬂows in
which each content block occurs. We term this count a con-
tent block’s prevalence, and rank content blocks from most to
least prevalent. As previously described, the intuition behind
this ranking is that a worm’s payload appears increasingly fre-
quently as that worm spreads. When all worm ﬂows contain
a common, worm-speciﬁc byte sequence, that byte sequence
will be observed in many suspicious ﬂows, and so will be
highly ranked.
Let us ﬁrst describe how Autograph divides suspicious
ﬂows’ payloads into shorter blocks. One might naively di-
vide payloads into ﬁxed-size, non-overlapping blocks, and
compute the prevalence of those blocks across all suspicious
ﬂows. That approach, however, is brittle if worms even triv-
ially obfuscate their payloads by reordering them, or insert-
ing or deleting a few bytes. To see why, consider what oc-
curs when a single byte is deleted or inserted from a worm’s
payload; all ﬁxed-size blocks beyond the insertion or deletion
will most likely change in content. Thus, a worm author could
evade accurate counting of its substrings by trivial changes in
its payload, if ﬁxed-size, non-overlapping blocks were used
to partition payloads for counting substring prevalence.
c0
00  07  0f  2a  01  00  07  07 07 00  07  11  45  45 07  00  07  ae 12
c2
c1
c3
08  00  07  0f  2a  01  00  07  07 07 0a  00  07  11  45  45 07  00  07 
c3
c5
c4
c1
W
X
Figure 3: COPP with a breakmark of r(“0007”)
Instead, as ﬁrst done in the ﬁle system domain in
LBFS [10], we divide a ﬂow’s payload into variable-length
content blocks using COntent-based Payload Partitioning
(COPP). Because COPP determines the boundaries of each
block based on payload content, the set of blocks COPP gen-
erates changes little under byte insertion or deletion.
To partition a ﬂow’s payload into content blocks, COPP
computes a series of Rabin ﬁngerprints ri over a sliding k-byte
window of the ﬂow’s payload, beginning with the ﬁrst k bytes
in the payload, and sliding one byte at a time toward the end
of the payload. It is efﬁcient to compute a Rabin ﬁngerprint
over a sliding window [13]. As COPP slides its window along
the payload, it ends a content block when ri matches a prede-
termined breakmark, B; when ri ≡ B (mod a).6 The average
content block size produced by COPP, a, is conﬁgurable; as-
suming random payload content, the window at any byte po-
sition within the payload equals the breakmark B (mod a)
with probability 1/a.
Figure 3 presents an example of COPP, using a 2-byte win-
dow, for two ﬂows f0 and f1. Sliding a 2-byte window from
the ﬁrst 2 bytes to the last byte, COPP ends a content block
ci whenever it sees the breakmark equal to the Rabin ﬁnger-
print for the byte string “0007”. Even if there exist byte in-
sertions, deletions, or replacements between the two ﬂows,
COPP ﬁnds identical c1 and c3 blocks in both of them.
Because COPP decides content block boundaries proba-
bilistically, there may be cases where COPP generates very
short content blocks, or takes an entire ﬂow’s payload as a
single content block. Very short content blocks are highly
unspeciﬁc; they will generate many false positives. Taking
the whole payload is not desirable either, because long signa-
tures are not robust in matching worms that might vary their
payloads. Thus, we impose minimum and maximum content
block sizes, m and M, respectively. When COPP reaches the
end of a content block and fewer than m bytes remain in the
ﬂow thereafter, it generates a content block that contains the
last m bytes of the ﬂow’s payload. In this way, COPP avoids
generating too short a content block, and avoids ignoring the
end of the payload.
After Autograph divides every ﬂow in the suspicious ﬂow
pool into content blocks using COPP, it discards content
blocks that appear only in ﬂows that originate from a sin-
gle source IP address from further consideration. We found
early on when applying Autograph to DMZ traces that such
content blocks typically correspond to misconﬁgured or oth-
erwise malfunctioning sources that are not malicious; such
content blocks typically occur in many innocuous ﬂows, and
thus often lead to signatures that cause false positives. Singh
et al. [15] also had this insight—they consider ﬂow endpoint
address distributions when generating worm signatures.
Suppose there are N distinct ﬂows in the suspicious ﬂow
pool. Each remaining content block matches some portion of
these N ﬂows. Autograph repeatedly selects content blocks
as signatures, until the selected set of signatures matches a
conﬁgurable fraction w of the ﬂows in the suspicious ﬂow
pool. That is, Autograph selects a signature set that “covers”
at least wN ﬂows in the suspicious ﬂow pool.
We now describe how Autograph greedily selects content
blocks as signatures from the set of remaining content blocks.
Initially the suspicious ﬂow pool F contains all suspicious
ﬂows, and the set of content blocks C contains all content
blocks produced by COPP that were found in ﬂows origi-
nating from more than one source IP address. Autograph
measures the prevalence of each content block—the number
of suspicious ﬂows in F in which each content block in C
appears—and sorts the content blocks from greatest to least
prevalence. The content block with the greatest prevalence is
chosen as the next signature. It is removed from the set of
remaining content blocks C, and the ﬂows it matches are re-
moved from the suspicious ﬂow pool, F. This entire process
then repeats; the prevalence of content blocks in C in ﬂows
in F is computed, the most prevalent content block becomes
a signature, and so on, until wN ﬂows in the original F have
been covered. This greedy algorithm attempts to minimize
the size of the set of signatures by choosing the most preva-
lent content block at each step.
We incorporate a blacklisting technique into signature gen-
eration. An administrator may conﬁgure Autograph with a
blacklist of disallowed signatures, in an effort to prevent the
system from generating signatures that will cause false pos-
itives. The blacklist is simply a set of strings. Any sig-
nature Autograph selects that is a substring of an entry in
the blacklist is discarded; Autograph eliminates that content
block from C without selecting it as a signature, and con-
tinues as usual. We envision that an administrator may run
Autograph for an initial training period, and vet signatures
with human eyes during that period. Signatures generated
during this period that match common patterns in innocu-
ous ﬂows (e.g., GET /index.html HTTP/1.0) can be
added to the blacklist.
At the end of this process, Autograph reports the selected
set of signatures. The current version of the system publishes
signature byte patterns in Bro’s signature format, for direct
use in Bro. Table 1 summarizes the parameters that control
Autograph’s behavior.
Note that because the ﬂow classiﬁer heuristic is imperfect,
innocuous ﬂows will unavoidably be included in the signa-
ture generation process. We expect two chief consequences
)
%
(
e
c
n
e
r
u
c
c
O
 70
 60
 50
 40
 30
 20
 10
 0
 0
Average block size (a) = 64
from Nimda
m = 8
m = 16
m = 32
m = 40
m = 64
from Code-RedII
from Nimda (16 different payloads)
from WebDAV source
 20
 40
 60
 80
 100
Content Blocks (sorted)
Figure 4: Prevalence histogram of content blocks, a=64
bytes, ICSI2 DMZ trace, day 3 (24 hrs).
of their inclusion:
Prevalent signatures matching innocuous and malicious
ﬂows. One possible result is that the probabilistic COPP
process will produce content blocks that contain only pro-
tocol header or trailer data common to nearly all ﬂows car-
rying that protocol, whether innocuous or malicious. Such
blocks will top the prevalence histogram, but would clearly
be abysmally unspeciﬁc if adopted for trafﬁc ﬁltering. To
avoid choosing such unspeciﬁc content blocks, we can vary a
and m toward longer block sizes.
Non-prevalent signatures for innocuous ﬂows. Another
possibility is that Autograph chooses a content block com-
mon to only a few innocuous ﬂows. Such content blocks will
not be prevalent, and will be at the tail of the prevalence his-
togram. Two heuristics can exclude these signatures from
publication. First, by using a smaller w value, Autograph
can avoid generation of signatures for the bottom (1 − w)%
of the prevalence distribution, though this choice may have
the undesirable side effect of delaying detection of worms.
The second useful heuristic comes from our experience with
the initial COPP implementation. Figure 4 shows the preva-
lence histogram Autograph generates from a real DMZ trace.
Among all content blocks, only a few are prevalent (those
from Code-RedII, Nimda, and WebDAV) and the prevalence
distribution has a noticeable tail. We can restrict Autograph
to choose a content block as a signature only if more than p
ﬂows in the suspicious ﬂow pool contain it, to avoid publish-
ing signatures for non-prevalent content blocks.
4 Evaluation: Local Signature Detection
We now evaluate the quality of signatures Autograph gener-
ates. In this section, we answer the following two questions:
First, how does content block size affect the the sensitivity
Symbol
s
a
m
M
w
p
t
r
Description
Port scanner detection threshold
COPP parameter: average content block size
COPP parameter: minimum content block size
COPP parameter: maximum content block size
Target percentage of suspicious ﬂows to be represented
in generated signatures
Minimum content block prevalence for use as signature
Duration suspicious ﬂows held in suspicious ﬂow pool
Interval between signature generation attempts
Minimum size of suspicious ﬂow pool to allow
signature generation process
Table 1: Autograph’s signature generation parameters.
and speciﬁcity of the signatures Autograph generates? And
second, how robust is Autograph to worms that vary their
payloads?
Our experiments demonstrate that as content block size
decreases, the likelihood that Autograph detects commonal-
ity across suspicious ﬂows increases. As a result, as con-
tent block size decreases, Autograph generates progressively
more sensitive but less speciﬁc signatures. They also reveal
that small block sizes are more resilient to worms that vary
their content, in that they can detect smaller common parts
among worm payloads.
4.1 Ofﬂine Signature Detection on DMZ
Traces
We ﬁrst investigate the effect of content block size on the
quality of the signatures generated by Autograph. In this sub-
section, we use a suspicious ﬂow pool accumulated during an
interval t of 24 hours, and consider only a single invocation
of signature generation on that ﬂow pool. No blacklisting is
used in the results in this subsection, and ﬁltering of content
blocks that appear only from one source address before signa-
ture generation is disabled. All results we present herein are
for a COPP Rabin ﬁngerprint window of width k = 4 bytes.7
In our experiments, we feed Autograph one of three packet
traces from the DMZs of two research labs; one from Intel
Research Pittsburgh (Pittsburgh, USA) and two from ICSI
(Berkeley, USA). IRP’s Internet link was a T1 at the time our
trace was taken, whereas ICSI’s is over a 100 Mbps ﬁber to
UC Berkeley. All three traces contain the full payloads of all
packets. The ICSI and ICSI2 traces only contain inbound traf-
ﬁc to TCP port 80, and are IP-source-anonymized. Both sites
have address spaces of 29 IP addresses, but the ICSI traces
contain more port 80 trafﬁc, as ICSI’s web servers are more
frequently visited than IRP’s.
For comparison, we obtain the full list of HTTP worms
in the traces using Bro with well-known signatures for the
Code-Red, Code-RedII, and Nimda HTTP worms, and for an
Agobot worm variant that exploits the WebDAV buffer over-
ﬂow vulnerability (present only in the ICSI2 trace). Table 2
summarizes the characteristics of all three traces.
q
Measurement Period
Inbound HTTP packets
Inbound HTTP ﬂows
HTTP worm sources
scanned
not scanned
Nimda sources
CodeRed II sources
WebDav exploit sources
HTTP worm ﬂows
Nimda ﬂows
CodeRed ﬂows
WebDav exploit ﬂows
IRP
Aug 1-7
2003
1 week
70K
26K
72
56
16
18
54
-
375
303
72
-
ICSI
ICSI2
Jan 26 Mar 22-29
2004
1 week
6353K
825K
1582
1344
238
254
997
336
7127
5392
1365
370
2004
24 hours
793K
102K
351
303