title:Screen-off traffic characterization and optimization in 3G/4G networks
author:Junxian Huang and
Feng Qian and
Zhuoqing Morley Mao and
Subhabrata Sen and
Oliver Spatscheck
Screen-Off Trafﬁc Characterization and Optimization
in 3G/4G Networks
Junxian Huang
University of Michigan
Feng Qian
University of Michigan
Z. Morley Mao
University of Michigan
Subhabrata Sen
AT&T Labs - Research
Oliver Spatscheck
AT&T Labs - Research
ABSTRACT
Today’s cellular systems operate under diverse resource constraints:
limited frequency spectrum, network processing capability, and hand-
set battery life. We consider a novel and important factor, hand-
set screen status, i.e., whether the screen is on or off, which was
ignored by previous approaches for optimizing cellular resource
utilization. Based on analyzing real smartphone trafﬁc collected
from 20 users over ﬁve months, we ﬁnd that off-screen trafﬁc ac-
counts for 58.5% of the total radio energy consumption although
their trafﬁc volume contribution is much smaller. Such unexpected
results are attributed to the unique cellular resource management
policy that is not well understood by developers, leading to cellular-
unfriendly mobile apps. We then make a further step by propos-
ing screen-aware optimization, by leveraging the key observation
that screen-off trafﬁc is much more delay-tolerant than its screen-
on counterpart due to a lack of user interaction. Our proposal can
better balance the key tradeoffs in cellular networks. It saves up
to 60.92% of the network energy and reduces signaling and delay
overhead by 25.33% and 30.59%, respectively.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: wireless communica-
tion; C.4 [Performance of Systems]: design studies, performance
attributes
Keywords
Screen-off trafﬁc, cellular network, trafﬁc optimization, fast dor-
mancy, batching, LTE, radio resource optimization
1.
INTRODUCTION
Smartphones with cellular data access have become increasingly
popular across the globe, with the wide deployment of 3G and
emerging LTE [1] networks, and a plethora of applications of all
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.
kinds. Cellular networks are typically characterized by limited ra-
dio resources and signiﬁcant device power consumption for net-
work communications. The battery capacity of smartphones cannot
be easily improved due to physical constraints in size and weight.
Hence, battery life remains a key determinant of end-user expe-
rience. Given the limited radio resources in these networks and
device battery capacity constraints, optimizing the usage of these
resources is critical for cellular carriers and application developers.
In 3G and 4G cellular networks, the user equipment (UE) must
stay in a high-power state, occupying radio resources for some re-
quired time before the allocated resource is released by the net-
work, and then the UE enters a low power state. This required time
period, also known as the Radio Resource Control (RRC) tail [6],
is necessary and important for cellular networks to prevent frequent
state promotions (resource allocation), which can cause unaccept-
ably long delays for the UE, as well as additional processing over-
heads for the radio access network [4, 12]. Today’s cellular carriers
use a static and conservative setting of the tail time in the order of
many seconds, and previous studies have revealed this tail time to
be the root cause of energy and radio resource inefﬁciencies in both
3G [15, 6, 11, 7] and 4G networks [9]. Various optimization solu-
tions have been proposed to address this problem, e.g., the use of
fast dormancy [2, 3, 16] and client-side trafﬁc shaping and schedul-
ing [14, 18, 6]. In addition, specialized energy saving techniques
for mobile applications have been proposed for speciﬁc applica-
tions [21, 10] and for speciﬁc protocols [5].
In this paper we consider a novel angle to the above problem and
explore the impact of screen status, i.e., whether the screen is on
or off, on the device’s network trafﬁc patterns. The screen status is
easy to monitor for most mobile OSes. We propose that the screen-
off trafﬁc should not be treated the same as the screen-on trafﬁc
for trafﬁc optimization purposes, and the former can be optimized
more aggressively. The main intuition is that the user (and possibly
application) behavior have signiﬁcant differences when the screen
is on v.s. off, resulting in different trafﬁc patterns and different per-
formance requirements. When the screen is off, there is a much
higher chance that the user is not actively interacting with the de-
vice and the network trafﬁc is most likely to be more delay tolerant.
Hence we can be more aggressive in optimizing this trafﬁc using
techniques such as batching and fast dormancy. In contrast, when
the screen is on, it is harder to predict the delay sensitivity of the
network trafﬁc and aggressive optimizations may harm the user ex-
perience. To validate this intuition, we characterize the screen-off
trafﬁc for a real-world user data set and evaluate the beneﬁts of us-
357ing “screen-aware” optimization for balancing UE energy savings
and the resulting overheads in radio resource usage and response
delay.
The proposed screen-aware optimization focuses on the overall
device trafﬁc, and is complementary to other efﬁciency improve-
ment efforts, e.g., better application design. While it is important
for individual mobile applications to be better designed, the power
state on a device is a function of the trafﬁc pattern across all the
running applications. Another advantage is that the approach works
across both optimized and unoptimized (e.g., legacy) applications.
The main contributions of this study are as follows:
• We perform the ﬁrst characterization of screen-off trafﬁc us-
ing 20 smartphone users’ trafﬁc over a 5 month interval.
We compare the differences between screen-off and -on traf-
ﬁc patterns, both overall and for different individual applica-
tions.
• We ﬁnd that although the number of packets and total pay-
load for screen-off trafﬁc are smaller than that of screen-on
trafﬁc, the former accounts for a disproportionate majority of
the total network energy consumed by a device - 58.55% for
all users, and up to 73.53% for some user.
• Evaluating various optimization techniques using an LTE RRC
state machine energy model, we ﬁnd that fast dormancy, for
the same parameter settings, generates more energy savings
and less signaling/delay overhead for screen-off trafﬁc, com-
pared with that for screen-on trafﬁc. This can be attributed
to the different trafﬁc patterns for the two trafﬁc classes.
In total, the screen-aware optimization achieves 60.92% en-
ergy savings, 25.33% reduction in signaling overhead, and
30.59% reduction in channel scheduling delays, compared
with the default smartphone settings.
2. METHODOLOGY
We next describe the data set used in this study, the burst analysis
methodology, as well as the network and power simulation method-
ology.
2.1 UMICH data set
The UMICH data set [9] totals 118 GB and consists of ﬁve-
month (05/12/2011 ∼ 10/12/2011) data (both cellular and WiFi)
from 20 volunteers who used smartphones running Android 2.2.
There are three types of data: (i) packet traces in tcpdump for-
mat including both headers and payload, (ii) the process name re-
sponsible for sending or receiving each packet, using the method
described in [17] by correlating the socket, inode, and process ID
in Android in realtime, and (iii) screen on/off status data with a
sampling rate of 1Hz. We strictly follow an anonymous analysis
procedure to protect the users’ privacy.
In order to associate individual packets with their screen status,
we deﬁne a time window [t1, t2] to be a screen-on (or screen-off,
respectively) window if “all” the screen samples in this window
have screen-on (or screen-off) status. Then we classify a packet as
either screen-on or off if its timestamp falls respectively into any
screen-on or screen-off window, and unknown otherwise. One rea-
son for the occurrence of the unknown category is data collection
errors.
2.2 Burst Analysis Methodology
In order to understand the screen-off trafﬁc pattern and its impact
on radio resource and device energy, we use the following trafﬁc
model for burst analysis. Intuitively, a burst is a continuous data
transfer with preceding and succeeding idle times. For each user,
the trafﬁc trace is a sequence of network packets, Pi(1 ≤ i ≤ n).
Notice that Pi could be either downlink or uplink. If the times-
tamp of Pi is deﬁned to be ti, we have ti ≤ tj for any i  BT
and iii) tp − tp−1 > BT. We deﬁne the inter-burst time IBT for
burst B to be the time gap following this burst, i.e., tq+1 − tq. In
this paper, we empirically choose to use BT = 2 seconds, which is
validated to be larger than most packet gaps for 3G/4G networks
within a continuous data transfer, such as downloading a web ob-
ject.
2.3 LTE Network and Power Simulation
Methodology
For evaluating optimization performance, we rely on network
and power simulations. In this paper, we focus on the emerging
LTE cellular technology to understand the energy and radio re-
source overhead of a particular packet trace. However, since there
are important similarities in the network and power models for the
LTE and 3G UMTS networks [8, 13, 19], e.g., distinct energy states
with very different power consumptions, long tail times etc., the
overall conclusions apply to 3G as well.
Speciﬁcally, we use the LTE 4G network and power simulation
model, as well as three important performance metrics E, S and D,
detailed in our earlier work [9]. E is the total UE network energy -
the energy consumed by the device’s cellular network interface. A
previous study [20] indicates that this network energy typically ac-
counts for a third of the energy drain on the phone. Given that E is
larger when the allocated radio resource is occupied by the UE for a
longer duration, reducing E is aligned with reducing the total radio
resource occupation time. S is deﬁned to be the signaling overhead,
i.e., the number of RRC promotions from RRC_IDLE (the idle state
for LTE) to RRC_CONNECTED (the high-power state for LTE) trig-
gered by the packets in a speciﬁc trace. Such state transitions cause
signiﬁcant signaling loads on the RAN and reducing this overhead
is therefore important. D is the user-perceived channel schedul-
ing delay, including promotion delay, caused by state promotions
from RRC_IDLE to RRC_CONNECTED, and paging delay caused by
UE’s sleeping before checking the data channel (a mechanism in
the cellular network to save energy). Reducing D is desirable as it
improves user experience.
2.4 Trafﬁc Optimization Methodology
In this paper, we mainly focus on two trafﬁc optimization tech-
niques:
(i) Fast dormancy (FD) [2, 3] is a mechanism in 3G networks for
reducing the amount of tail time incurred by a device by quickly
demoting it to a low energy RRC state without waiting for the tail
timer to expire. In our simulations, we explore fast dormancy in an
LTE setting, motivated by the fact that LTE, like 3G, also suffers
from a serious tail problem [9]. Our fast dormancy-based optimiza-
tion works as follows: when the UE has not observed any network
activity for some idle time Ti, it sends a special RRC message to
358# of packets (million)
%
Total
Screen on
Screen off
Unknown
131.49
72.50
47.14
11.85
100%
55.13%
35.84%
9.02%
Table 1: Packet statistics of the UMICH data set.
the network to make the allocated radio resource be released ear-
lier, instead of occupying it for the whole RRC tail. After the ra-
dio resource is released, the UE switches to the low power idle
state (RRC_IDLE for LTE networks), saving energy. The setting of
Ti is important for balancing the tradeoffs among UE energy sav-
ing (∆E), signaling overhead (∆S) and channel scheduling delay
(∆D), i.e., a smaller Ti would results in a larger ∆E at the cost of
larger ∆S and ∆D, and vice versa.
(ii) Batching is a widely used trafﬁc shaping technique, which
has been discussed in previous studies [6, 14]. In this study, batch-
ing uses two parameters, source window size α (seconds) and tar-
get window size β (seconds), and α > β. For each α seconds long
time window [t, t + α], packets within [t, t + α − β] are delayed
and batched with those inside [t + α− β, t + α]. Notice that if α/β
is too large, the limited bandwidth of the cellular network could
become the bottleneck, making the batching impossible. So in this
study, we make sure that our choice of α and β results in acceptable
bandwidth usage for LTE networks.
3. CHARACTERISTICS OF SCREEN-OFF
TRAFFIC
In this section, we present packet characteristics and burst anal-
ysis of screen-off trafﬁc in the UMICH data set. Then we compare
screen-on and screen-off trafﬁc and scrutinize the top applications
generating screen-off trafﬁc.
3.1 Packet Characteristics of Screen-off
Trafﬁc
Using the methodology described in §2.1, we classify all packets
to be screen-on, screen-off or unknown. Table 1 lists the number
of packets in different categories. Among the total 131.49 mil-
lion packets, 55.12% of them are screen-on packets and 35.85% are
screen-off packets, with 9.02% unknown. The possible reasons for
unknown packets are multifold, including that voluntary users may
have accidentally killed the data collector. For the unknown cate-
gory, we conservatively choose not optimize it for either screen-on
or screen-off trafﬁc optimization.
The top section of Table 2 lists the packet characteristics of both
screen-on and screen-off trafﬁc. Packet payload size refers to the
size in bytes of an IP packet excluding the TCP/UDP and IP head-
ers, and payload for a given process is the sum of the packet pay-
load sizes of all packets corresponding to that process. We no-
tice that screen-off trafﬁc has far less packets (35.84% of total)
than screen-on trafﬁc (55.13% of total), much smaller total pay-
load (27.26% for screen-off and 64.31% for screen-on trafﬁc), and
smaller average downlink packet payload size.
To understand individual process behavior within screen-off traf-
ﬁc, we scrutinize the top processes sorted by the number of screen-
off packets, in the bottom section of Table 2. In the second column,
titled “Off payload”, we observe that some processes have most
of their payload transferred during screen-off sessions, e.g., Genie
Widget, Epicurious Recipe, etc. Especially for Yahoo! Sportacular,
80.45% of all its payload is transferred when the screen is off. This
is possibly due to the background behaviors of these processes, in-
volving either periodically pulling updates from servers or trafﬁc
triggered by server-initiated push notiﬁcations. In terms of the % of
downlink payload, compared to other processes, Skypekit, Gmail,
Sportacular and Facebook have smaller proportions of their respec-
tive total downlink payloads associated with the screen-off states.
These processes also have a smaller average downlink packet size
(2GB),
and >99% of the payload is downlink. Their average downlink
packet sizes are close to the MTU and average uplink packet sizes
are close to 0. Also, their ratio of downlink packets is close to
2/3. This is because TCP’s delayed ACK would generate one up-
link ACK packet for every two downlink data packets, resulting
in a ratio of 2/3 of downlink packets. These observations suggest
that Google Music is downloading large amount of data, as it can
run in the background allowing users to listen to the music with
the screen off. Similarly, although /system/bin/mediaserver
and android.process.media are not actual applications, they
are used by other applications, such as Pandora, to download con-
tents for users while the screen is off. However, this group of pro-
cesses does not necessarily have higher energy consumption com-
pared with the remaining processes, and we explore this in more
detail in latter sections.