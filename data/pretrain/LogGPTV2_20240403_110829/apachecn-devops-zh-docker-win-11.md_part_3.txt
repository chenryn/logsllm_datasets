RUN dotnet restore "./WebApi.NetCore.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "WebApi.NetCore.csproj" -c Release -o /app
FROM build AS publish
RUN dotnet publish "WebApi.NetCore.csproj" -c Release -o /app
FROM base AS final
WORKDIR /app
COPY --from=publish /app .
ENTRYPOINT ["dotnet", "WebApi.NetCore.dll"]
```
这是使用旧版本的.NET Core 基础图片，所以第一步是用`nanoserver-1809`替换`FROM`行中的`nanoserver-1803`标签。该扩展生成一个多阶段 Dockerfile，将 SDK 映像用于构建和发布阶段，将 ASP.NET 核心运行时用于最终映像。VS 代码在 Dockerfile 中生成的阶段比您实际需要的要多，但这是一个设计选择。
VS Code also generates a `.dockerignore` file. This is a useful feature that speeds up your Docker image builds. In the ignore file, you list any file or directory paths that aren't used in your Dockerfile, and these are excluded from the build context. Excluding all the `bin`, `obj`, and `packages` folders means that the Docker CLI sends a much smaller payload to the Docker Engine when you build the image, and that can make the build much faster.
您可以使用 F1 | docker 任务来构建映像和运行容器，但是没有像 Visual Studio 2017 那样生成 docker 编写文件的功能。
Visual Studio Code 有一个非常灵活的系统来运行和调试您的项目，因此您可以添加自己的配置来为运行在 Windows 容器中的应用提供调试支持。可以编辑`launch.json`文件，在 Docker 中添加新的调试配置。
在`ch11-webapi-vscode`文件夹中，我有一个样本.NET Core 项目设置为在 Docker 中运行应用并附加调试器。它使用与 Visual Studio 2017 相同的方法。的调试器.NET Core 被称为`vsdbg`，在 Visual Studio Code 中以 C#扩展名安装，因此我使用`docker-compose.debug.yml`文件将`vsdbg`文件夹从主机挂载到容器中，同时还有源位置:
```
volumes:
  - .\bin\Debug\netcoreapp2.2:C:\app
  - ~\.vscode\extensions\ms-vscode.csharp-1.17.1\.debugger:C:\vsdbg:ro
```
This setup uses a specific version of the C# extension. That's 1.17.1 in my case, but you may have a different version. Check for the location of `vsdbg.exe` in the `.vscode` folder in your user directory.
当您使用调试覆盖文件通过 Docker Compose 运行应用时，它会启动.NET Core 应用，并使来自主机的调试器可在容器中运行。这是为`launch.json`文件中 Visual Studio 代码的调试体验而配置的。`Debug Docker container`配置指定要调试的应用类型和要附加的进程名称:
```
 "name": "Debug Docker container",
 "type": "coreclr",
 "request": "attach",
 "sourceFileMap": {
    "C:\\app": "${workspaceRoot}"
 },
"processName": "dotnet"
```
此配置还将容器中的应用根映射到主机上的源代码位置，因此调试器可以将正确的源文件与调试文件相关联。此外，调试器配置指定如何通过在命名容器上运行`docker container exec`命令来启动调试器:
```
"pipeTransport": {
 "pipeCwd": "${workspaceRoot}",
 "pipeProgram": "docker",
 "pipeArgs": [
   "exec", "-i", "webapinetcore_webapi_1"
 ],
 "debuggerPath": "C:\\vsdbg\\vsdbg.exe",
 "quoteArgs": false
}
```
要调试我的应用，我需要在调试配置中构建和运行它，使用带有覆盖文件的 Docker Compose:
```
docker-compose -f .\docker-compose.yml -f .\docker-compose.debug.yml build docker-compose -f .\docker-compose.yml -f .\docker-compose.debug.yml up -d 
```
然后，我可以使用调试操作并选择调试 Docker 容器来激活调试器:
![](img/64e9ad65-f404-4292-a022-36536a415a3a.png)
Visual Studio 代码启动.NET Core 调试器`vsdbg`在容器内部，并将其附加到正在运行的`dotnet`进程。您将看到.NET Core 应用被重定向到 Visual Studio 代码中的调试控制台窗口:
![](img/c219df7a-a5ca-44a1-956d-acc2d5e697fe.png)
At the time of writing, Visual Studio Code doesn't fully integrate with the debugger running inside a Windows Docker container. You can place breakpoints in the code and the debugger will pause the process, but control does not pass to Visual Studio Code. This is a known issue with running the Omnisharp debugger inside a Nano Server container – it's being tracked on GitHub at: [https://github.com/OmniSharp/omnisharp-vscode/issues/1001](https://github.com/OmniSharp/omnisharp-vscode/issues/1001).
在容器中运行您的应用，并且能够从您的普通 IDE 中进行调试，这是一个巨大的好处。这意味着您的应用运行在相同的平台上，并且具有在所有其他环境中使用的相同部署配置，但是您可以像在本地运行一样单步执行代码。
IDEs 中的 Docker 支持正在迅速改进，因此我在本章中详细介绍的所有手动步骤都将很快内置到产品和扩展中。捷脑骑士是第三方的一个很好的例子.NET 集成开发环境，非常适合 Docker。它与 Docker API 集成，可以将自己的调试器附加到正在运行的容器上。
# Docker 化应用中的仪器仪表
当逻辑不像预期的那样工作时，调试你的应用就是你要做的事情，你要努力追踪出了什么问题。您不在生产中调试，因此您需要您的应用记录其行为，以帮助您跟踪发生的任何问题。
仪器经常被忽略，但是它应该是你开发的一个重要组成部分。这是了解您的应用在生产中的健康和活动的最佳方式。在 Docker 中运行您的应用为集中式日志记录和检测提供了新的机会，这样您就可以跨应用的不同部分获得一致的视图，即使它们使用不同的语言和平台。
向容器中添加工具可能是一个简单的过程。Windows 服务器核心容器已经在 Windows 性能计数器中收集了大量指标。用.NET 或 IIS 还将拥有来自这些栈的所有附加性能计数器。您可以通过向度量服务器公开性能计数器值来检测容器。
# 普罗米修斯仪器
Docker 周围的生态系统非常庞大且活跃，充分利用了平台的开放标准和可扩展性。随着生态系统的成熟，一些技术已经成为包含在几乎所有 Dockerized 应用中的强有力的候选者。
普罗米修斯是一个开源的监控解决方案。这是一个灵活的组件，可以以不同的方式使用，但是典型的实现是在 Docker 容器中运行 Prometheus 服务器，配置为读取您在其他 Docker 容器中提供的检测端点。
您将 Prometheus 配置为轮询所有容器端点，并将结果存储在时间序列数据库中。您可以通过简单地添加一个 REST API 向您的应用添加一个 Prometheus 端点，该 API 用您感兴趣收集的指标列表来响应来自 Prometheus 服务器的`GET`请求。
为了.NET 框架和.NET Core 项目中，有一个 NuGet 包可以为您做到这一点，即在您的应用中添加一个 Prometheus 端点。默认情况下，它公开了一组有用的指标，包括键值.NET 统计信息和 Windows 性能计数器。您可以将普罗米修斯支持直接添加到您的应用中，也可以在您的应用旁边运行普罗米修斯导出器。
您采取的方法将取决于您想要检测的应用类型。如果这是遗产.NET Framework 应用，您可以通过在 Docker 映像中打包一个 Prometheus 导出器来添加基本的工具，这将为您提供关于应用的指标，而无需更改代码。对于新的应用，您可以编写代码向普罗米修斯公开特定的应用指标。
# 暴露.NET 应用度量到普罗米修斯
`prometheus-net` NuGet 包提供了一组默认的度量收集器和一个`MetricServer`类，该类提供了普罗米修斯挂接的检测端点。这个包非常适合将普罗米修斯支持添加到任何应用中。这些指标由一个自托管的 HTTP 端点提供，您可以为您的应用提供自定义指标。
在`dockeronwindows/ch11-api-with-metrics`映像中，我将普罗米修斯支持添加到了一个网络应用编程接口项目中。配置和启动度量端点的代码在`PrometheusServer`类中:
```
public static void Start()
{
  _Server = new MetricServer(50505);
  _Server.Start();
}
```
这将启动一个新的`MetricServer`实例监听端口`50505`，并运行默认的.NET 统计和性能计数器收集器，由`NuGet`包提供。这些是按需收集器，这意味着当普罗米修斯服务器调用端点时，它们会提供指标。
`MetricServer`类还将返回您在应用中设置的任何自定义指标。普罗米修斯支持不同类型的指标。最简单的是计数器，它只是一个递增的计数器——普罗米修斯向你的应用查询度量值，应用为每个计数器返回一个数字。在`ValuesController`类中，我设置了一些计数器来记录对 API 的请求和响应:
```
private Counter _requestCounter = Metrics.CreateCounter("ValuesController_Requests", 
                                                         "Request count", "method", "url");
private Counter _responseCounter = Metrics.CreateCounter("ValuesController_Responses", 
                                                         "Response count", "code", "url");
```
当请求进入控制器时，控制器操作方法通过在计数器对象上调用`Inc()`方法来增加 URL 的请求计数和响应代码的状态计数:
```
public IHttpActionResult Get()
{
  _requestCounter.Labels("GET", "/").Inc();