# 零、前言
我观察软件交付过程已经很多年了。我写这本书是因为我知道有多少人在花了几天几夜的时间让他们的产品投入生产后，仍然在与发布做斗争并感到沮丧。尽管多年来已经开发了许多自动化工具和流程，但这一切还是发生了。当我第一次看到持续交付过程是多么简单有效之后，我再也不会回到繁琐的传统人工交付周期了。这本书是我的经验和我主持的一些持续交付研讨会的结果。我分享了使用 Jenkins，Docker 和安斯比的现代方法；然而，这本书不仅仅是工具。它展示了持续交付背后的想法和推理，最重要的是，我给我遇到的每个人的主要信息:持续交付过程很简单，使用它！
# 这本书涵盖了什么
[第 1 章](00.html)、*介绍持续交付*，介绍了公司传统上如何交付他们的软件，并解释了使用持续交付方法改进软件的想法。本章还讨论了介绍该过程的先决条件，并介绍了将在整本书中构建的系统。
[第 2 章](02.html)、*介绍 Docker* ，解释容器化的思想和 Docker 工具的基础。本章还展示了如何使用 Docker 命令、将应用打包为 Docker 映像、发布 Docker 容器的端口以及使用 Docker 卷。
[第 3 章](03.html)、*配置 Jenkins*，介绍如何安装、配置和扩展 Jenkins。本章还展示了如何使用 Docker 来简化 Jenkins 配置和启用动态从属配置。
[第 4 章](04.html)、*持续集成管道*，解释了管道化的思想，介绍了 Jenkinsfile 语法。本章还展示了如何配置完整的连续集成管道。
[第五章](05.html)、*自动化验收测试*，介绍验收测试的思路和实现。这几章还解释了工件存储库的含义，使用 Docker Compose 的编排，以及编写面向 BDD 的验收测试的框架。
[第 6 章](06.html)、*带 Ansible 的配置管理*，介绍了配置管理的概念及其使用 Ansible 的实现。本章还展示了如何与 Docker 和 Docker Compose 一起使用 Ansible。
[第 7 章](01.html)、*持续交付管道*，结合前面章节的所有知识，构建完整的持续交付流程。本章还讨论了各种环境和非功能测试的各个方面。
[第 8 章](08.html)、*用 Docker Swarm* 进行集群，解释了服务器集群的概念和使用 Docker Swarm 的实现。本章还比较了可选的集群工具(Kubernetes 和 Apache Mesos)，并解释了如何对动态 Jenkins 代理使用集群。
[第 9 章](09.html)、*高级持续交付*混合介绍了与持续交付流程相关的不同方面:数据库管理、并行管道步骤、回滚策略、遗留系统和零宕机部署。本章还包括持续交付流程的最佳实践。
# 这本书你需要什么
Docker 需要 64 位 Linux 操作系统。本书中的所有示例都是使用 Ubuntu 16.04 开发的，但是任何其他内核版本为 3.10 或更高版本的 Linux 系统都足够了。
# 这本书是给谁的
这本书是为那些想要改进他们的交付过程的开发人员和开发人员准备的。理解这本书不需要任何先验知识。
# 约定
在这本书里，你会发现许多区分不同种类信息的文本风格。以下是这些风格的一些例子，以及对它们的含义的解释。
文本中的码字、数据库表名、文件夹名、文件名、文件扩展名、路径名、伪 URL、用户输入和 Twitter 句柄如下所示:`docker info`
代码块设置如下:
```
      pipeline {
           agent any
           stages {
                stage("Hello") {
                     steps {
                          echo 'Hello World'
                     }
                }
           }
      }
```
当我们希望将您的注意力吸引到代码块的特定部分时，相关的行或项目以粗体显示:
```
 FROM ubuntu:16.04
 RUN apt-get update && \
 apt-get install -y python
```
任何命令行输入或输出都编写如下:
```
$ docker images
REPOSITORY              TAG     IMAGE ID         CREATED            SIZE
ubuntu_with_python      latest  d6e85f39f5b7  About a minute ago 202.6 MB
ubuntu_with_git_and_jdk latest  8464dc10abbb  3 minutes ago      610.9 MB
```
新术语和重要词汇以粗体显示。你在屏幕上看到的单词，例如在菜单或对话框中，出现在文本中，比如:“点击新项目”。
警告或重要提示会出现在这样的框中。
If your Docker daemon is run inside the corporate network, you have to configure the HTTP proxy. The detailed description can be found at [https://docs.docker.com/engine/admin/systemd/](https://docs.docker.com/engine/admin/systemd/).
提示和技巧是这样出现的。
The installation guides for all supported operating systems and cloud platforms can be found on the official Docker page, [https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/).
# 读者反馈
我们随时欢迎读者的反馈。让我们知道你对这本书的看法——你喜欢或可能不喜欢什么。读者反馈对我们开发您真正能从中获得最大收益的标题非常重要。
要给我们发送一般反馈，只需向`PI:EMAIL`发送电子邮件，并通过您的消息主题提及书名。
如果你对某个主题有专业知识，并且对写作或投稿感兴趣，请参阅我们在[www.packtpub.com/authors](http://www.packtpub.com/authors)上的作者指南。
# 客户支持
现在，您已经自豪地拥有了一本书，我们有许多东西可以帮助您从购买中获得最大收益。
# 下载示例代码
您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户中下载您购买的所有 Packt 书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  使用您的电子邮件地址和密码登录或注册我们的网站。
2.  将鼠标指针悬停在顶部的“支持”选项卡上。
3.  点击代码下载和勘误表。
4.  在搜索框中输入图书的名称。
5.  选择要下载代码文件的书籍。
6.  从您购买这本书的下拉菜单中选择。
7.  点击代码下载。
下载文件后，请确保使用最新版本的解压缩文件夹:
*   视窗系统的 WinRAR / 7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip / PeaZip
这本书的代码包也托管在 GitHub 上，网址为 https://GitHub . com/PacktPublishing/Continuous-Delivery-with-Docker-and-Jenkins。我们还有来自丰富的图书和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)获得。看看他们！>
# 下载这本书的彩色图片
我们还为您提供了一个 PDF 文件，其中包含本书中使用的截图/图表的彩色映像。彩色映像将帮助您更好地理解输出中的变化。您可以从[https://www . packtpub . com/sites/default/files/downloads/continuousdeliverywithouckrandjenkins _ color images . pdf](https://www.packtpub.com/sites/default/files/downloads/ContinuousDeliverywithDockerandJenkins_ColorImages.pdf)下载此文件。
# 正误表
尽管我们尽了最大努力来确保我们内容的准确性，但错误还是会发生。如果你在我们的某本书里发现了错误——可能是文本或代码中的错误——如果你能向我们报告，我们将不胜感激。通过这样做，你可以让其他读者免受挫折，并帮助我们改进这本书的后续版本。如果您发现任何勘误表，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书籍，点击勘误表`submission form`链接，并输入您的勘误表的详细信息。一旦您的勘误表得到验证，您的提交将被接受，勘误表将上传到我们的网站上，或添加到该标题的勘误表部分下的任何现有勘误表列表中。通过从[http://www.packtpub.com/support](http://www.packtpub.com/support)中选择您的标题，可以查看任何现有的勘误表。
# 海盗行为
互联网上版权材料的盗版是所有媒体的一个持续问题。在 Packt，我们非常重视版权和许可证的保护。如果您在互联网上遇到任何形式的我们作品的非法拷贝，请立即向我们提供位置地址或网站名称，以便我们寻求补救。
请通过[PI:EMAIL](mailto:PI:EMAIL)联系我们，获取疑似盗版材料的链接。
我们感谢您在保护我们作者方面的帮助，以及我们为您带来有价值内容的能力。
# 问题
如果您对本书的任何方面有问题，可以在`PI:EMAIL`联系我们，我们将尽最大努力解决。