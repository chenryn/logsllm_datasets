### The Unusual Danger of “localhost”  
**Page 152**

### Cookies and “Legitimate” DNS Hijacking  
**Page 153**

### Plug-in Security Rules  
**Page 153**

#### Adobe Flash  
**Page 154**

#### Microsoft Silverlight  
**Page 157**

#### Java  
**Page 157**

### Coping with Ambiguous or Unexpected Origins  
**Page 158**

#### IP Addresses  
**Page 158**

#### Hostnames with Extra Periods  
**Page 159**

#### Non–Fully Qualified Hostnames  
**Page 159**

#### Local Files  
**Page 159**

#### Pseudo-URLs  
**Page 161**

#### Browser Extensions and UI  
**Page 161**

#### Other Uses of Origins  
**Page 161**

### Security Engineering Cheat Sheet  
**Page 162**

- **Good Security Policy Hygiene for All Websites**  
- **When Relying on HTTP Cookies for Authentication**  
- **When Arranging Cross-Domain Communications in JavaScript**  
- **When Embedding Plug-in-Handled Active Content from Third Parties**  
- **When Hosting Your Own Plug-in-Executed Content**  
- **When Writing Browser Extensions**  

### Origin Inheritance  
**Page 165**

#### Origin Inheritance for about:blank  
**Page 166**

#### Inheritance for data: URLs  
**Page 167**

#### Inheritance for javascript: and vbscript: URLs  
**Page 169**

#### A Note on Restricted Pseudo-URLs  
**Page 170**

### Security Engineering Cheat Sheet  
**Page 172**

### Life Outside Same-Origin Rules  
**Page 173**

#### Window and Frame Interactions  
**Page 174**

- **Changing the Location of Existing Documents**  
- **Unsolicited Framing**  
- **Cross-Domain Content Inclusion**  
- **A Note on Cross-Origin Subresources**  
- **Privacy-Related Side Channels**  
- **Other SOP Loopholes and Their Uses**  

### Security Engineering Cheat Sheet  
**Page 186**

- **Good Security Hygiene for All Websites**  
- **When Including Cross-Domain Resources**  
- **When Arranging Cross-Domain Communications in JavaScript**  

### Other Security Boundaries  
**Page 187**

#### Navigation to Sensitive Schemes  
**Page 188**

#### Access to Internal Networks  
**Page 189**

#### Prohibited Ports  
**Page 190**

#### Limitations on Third-Party Cookies  
**Page 192**

### Security Engineering Cheat Sheet  
**Page 195**

- **When Building Web Applications on Internal Networks**  
- **When Launching Non-HTTP Services, Particularly on Nonstandard Ports**  
- **When Using Third-Party Cookies for Gadgets or Sandboxed Content**  

### Content Recognition Mechanisms  
**Page 197**

#### Document Type Detection Logic  
**Page 198**

- **Malformed MIME Types**  
- **Special Content-Type Values**  
- **Unrecognized Content Type**  
- **Defensive Uses of Content-Disposition**  
- **Content Directives on Subresources**  
- **Downloaded Files and Other Non-HTTP Content**  
- **Character Set Handling**  
- **Byte Order Marks**  
- **Character Set Inheritance and Override**  
- **Markup-Controlled Charset on Subresources**  
- **Detection for Non-HTTP Files**  

### Security Engineering Cheat Sheet  
**Page 212**

- **Good Security Practices for All Websites**  
- **When Generating Documents with Partly Attacker-Controlled Contents**  
- **When Hosting User-Generated Files**  

### Dealing with Rogue Scripts  
**Page 213**

#### Denial-of-Service Attacks  
**Page 214**

- **Execution Time and Memory Use Restrictions**  
- **Connection Limits**  
- **Pop-Up Filtering**  
- **Dialog Use Restrictions**  
- **Window-Positioning and Appearance Problems**  
- **Timing Attacks on User Interfaces**  

### Security Engineering Cheat Sheet  
**Page 224**

- **When Permitting User-Created Gadgets on Your Site**  
- **When Building Security-Sensitive UIs**  

### Extrinsic Site Privileges  
**Page 225**

#### Browser- and Plug-in-Managed Site Permissions  
**Page 226**

- **Hardcoded Domains**  
- **Form-Based Password Managers**  
- **Internet Explorer’s Zone Model**  
- **Mark of the Web and Zone.Identifier**  

### Security Engineering Cheat Sheet  
**Page 232**

- **When Requesting Elevated Permissions from Within a Web Application**  
- **When Writing Plug-ins or Extensions That Recognize Privileged Origins**  

### Part III: A Glimpse of Things to Come  
**Page 233**

### New and Upcoming Security Features  
**Page 235**

#### Security Model Extension Frameworks  
**Page 236**

- **Cross-Domain Requests**  
- **XDomainRequest**  
- **Other Uses of the Origin Header**  

#### Security Model Restriction Frameworks  
**Page 241**

- **Content Security Policy**  
- **Sandboxed Frames**  
- **Strict Transport Security**  
- **Private Browsing Modes**  
- **Other Developments**  
- **In-Browser HTML Sanitizers**  
- **XSS Filtering**  

### Security Engineering Cheat Sheet  
**Page 253**

### Other Browser Mechanisms of Note  
**Page 255**

#### URL- and Protocol-Level Proposals  
**Page 256**

#### Content-Level Features  
**Page 258**

#### I/O Interfaces  
**Page 259**

### Common Web Vulnerabilities  
**Page 261**

#### Vulnerabilities Specific to Web Applications  
**Page 262**

- **Problems to Keep in Mind in Web Application Design**  
- **Common Problems Unique to Server-Side Code**  

### Epilogue  
**Page 267**

### Notes  
**Page 269**

### Index  
**Page 273**

---

### Preface

Just fifteen years ago, the Web was as simple as it was unimportant: a quirky mechanism that allowed a handful of students, plus a bunch of asocial, basement-dwelling geeks, to visit each other’s home pages dedicated to science, pets, or poetry. Today, it is the platform of choice for writing complex, interactive applications (from mail clients to image editors to computer games) and a medium reaching hundreds of millions of casual users around the globe. It is also an essential tool of commerce, important enough to be credited for causing a recession when the 1999 to 2001 dot-com bubble burst.

This progression from obscurity to ubiquity was amazingly fast, even by the standards we are accustomed to in today’s information age—and its speed of ascent brought with it an unexpected problem. The design flaws and implementation shortcomings of the World Wide Web are those of a technology that never aspired to its current status and never had a chance to pause and look back at previous mistakes. The resulting issues have quickly emerged as some of the most significant and prevalent threats to data security today: As it turns out, the protocol design standards one would apply to a black-on-gray home page full of dancing hamsters are not necessarily the same for an online shop that processes millions of credit card transactions every year.

When taking a look at the past decade, it is difficult not to be slightly disappointed: Nearly every single noteworthy online application devised so far has had to pay a price for the corners cut in the early days of the Web. Heck, xssed.com, a site dedicated to tracking a narrow subset of web-related security glitches, amassed some 50,000 entries in about three years of operation. Yet, browser vendors are largely unfazed, and the security community itself has offered little insight or advice on how to cope with the widespread misery. Instead, many security experts stick to building byzantine vulnerability taxonomies and engage in habitual but vague hand-wringing about the supposed causes of this mess.

Part of the problem is that said experts have long been dismissive of the whole web security ruckus, unable to understand what it was all about. They have been quick to label web security flaws as trivial manifestations of the confused deputy problem* or of some other catchy label outlined in a trade journal three decades ago. And why should they care about web security, anyway? What is the impact of an obscene comment injected onto a dull pet-themed home page compared to the gravity of a traditional system-compromise flaw?

In retrospect, I’m pretty sure most of us are biting our tongues. Not only has the Web turned out to matter a lot more than originally expected, but we’ve failed to pay attention to some fundamental characteristics that put it well outside our comfort zone. After all, even the best-designed and most thoroughly audited web applications have far more issues, far more frequently, than their non-web counterparts.

We all messed up, and it is time to repent. In the interest of repentance, *The Tangled Web* tries to take a small step toward much-needed normalcy, and as such, it may be the first publication to provide a systematic and thorough analysis of the current state of affairs in the world of web application security. In the process of doing so, it aims to shed light on the uniqueness of the security challenges that we—security engineers, web developers, and users—have to face every day.

The layout of this book is centered on exploring some of the most prominent, high-level browser building blocks and various security-relevant topics derived from this narrative. I have taken this approach because it seems to be more informative and intuitive than simply enumerating the issues using an arbitrarily chosen taxonomy (a practice seen in many other information security books). I hope, too, that this approach will make *The Tangled Web* a better read.

For readers looking for quick answers, I decided to include quick engineering cheat sheets at the end of many of the chapters. These cheat sheets outline sensible approaches to some of the most commonly encountered problems in web application design. In addition, the final part of the book offers a quick glossary of the well-known implementation vulnerabilities that one may come across.

### Acknowledgments

Many parts of *The Tangled Web* have their roots in the research done for Google’s *Browser Security Handbook*, a technical wiki I put together in 2008 and released publicly under a Creative Commons license. You can browse the original document online at [http://code.google.com/p/browsersec/](http://code.google.com/p/browsersec/).

I am fortunate to be with a company that allowed me to pursue this project—and delighted to be working with a number of talented peers who provided excellent input to make the *Browser Security Handbook* more useful and accurate. In particular, thanks to Filipe Almeida, Drew Hintz, Marius Schilder, and Parisa Tabriz for their assistance.

I am also proud to be standing on the shoulders of giants. This book owes a lot to the research on browser security done by members of the information security community. Special credit goes to Adam Barth, Collin Jackson, Chris Evans, Jesse Ruderman, Billy Rios, and Eduardo Vela Nava for the advancement of our understanding of this field.

Thank you all—and keep up the good work.

### Security in the World of Web Applications

To provide proper context for the technical discussions later in the book, it seems prudent to first explain what the field of security engineering tries to achieve and then to outline why, in this otherwise well-studied context, web applications deserve special treatment. So, shall we?

#### Information Security in a Nutshell

On the face of it, the field of information security appears to be a mature, well-defined, and accomplished branch of computer science. Resident experts eagerly assert the importance of their area of expertise by pointing to large sets of neatly cataloged security flaws, invariably attributed to security-illiterate developers, while their fellow theoreticians note how all these problems would have been prevented by adhering to this year’s hottest security methodology. A commercial industry thrives in the vicinity, offering various non-binding security assurances to everyone, from casual computer users to giant international corporations.

Yet, for several decades, we have in essence completely failed to come up with even the most rudimentary usable frameworks for understanding and assessing the security of modern software. Save for several brilliant treatises and limited-scale experiments, we do not even have any real-world success stories to share. The focus is almost exclusively on reactive, secondary security measures (such as vulnerability management, malware and attack detection, sandboxing, and so forth) and perhaps on selectively pointing out flaws in somebody else’s code. The frustrating, jealously guarded secret is that when it comes to enabling others to develop secure systems, we deliver far less value than should be expected; the modern Web is no exception.

Let’s look at some of the most alluring approaches to ensuring information security and try to figure out why they have not made a difference so far.

##### Flirting with Formal Solutions

Perhaps the most obvious tool for building secure programs is to algorithmically prove they behave just the right way. This is a simple premise that intuitively should be within the realm of possibility—so why hasn’t this approach netted us much?

Well, let’s start with the adjective "secure" itself: What is it supposed to convey, precisely? Security seems like an intuitive concept, but in the world of computing, it escapes all attempts to usefully define it. Sure, we can restate the problem in catchy yet largely unhelpful ways, but you know there’s a problem when one of the definitions most frequently cited by practitioners* is this:

"A system is secure if it behaves precisely in the manner intended—and does nothing more."

This definition is neat and vaguely outlines an abstract goal, but it tells very little about how to achieve it. It’s computer science, but in terms of specificity, it bears a striking resemblance to a poem by Victor Hugo:

"Love is a portion of the soul itself, and it is of the same nature as the celestial breathing of the atmosphere of paradise."

One could argue that practitioners are not the ones to be asked for nuanced definitions, but go ahead and pose the same question to a group of academics and they’ll offer you roughly the same answer. For example, the following common academic definition traces back to the Bell-La Padula security model, published in the 1960s. (This was one of about a dozen attempts to formalize the requirements for secure systems, in this case in terms of a finite state machine;1 it is also one of the most notable ones.)

"A system is secure if and only if it starts in a secure state and cannot enter an insecure state."

* The quote is attributed originally to Ivan Arce, a renowned vulnerability hunter, circa 2000; since then, it has been used by Crispin Cowan, Michael Howard, Anton Chuvakin, and scores of other security experts.

Definitions along these lines are fundamentally true, of course, and may serve as the basis for dissertations or even a couple of government grants. But in practice, models built on these foundations are bound to be nearly useless for generalized, real-world software engineering for at least three reasons:

1. **There is no way to define desirable behavior for a sufficiently complex computer system.** No single authority can define what the "intended manner" or "secure states" should be for an operating system or a web browser. The interests of users, system owners, data providers, business process owners, and software and hardware vendors tend to differ significantly and shift rapidly—when the stakeholders are capable and willing to clearly and honestly disclose their interests to begin with. To add insult to injury, sociology and game theory suggest that computing a simple sum of these particular interests may not actually result in a beneficial outcome. This dilemma, known as "the tragedy of the commons," is central to many disputes over the future of the Internet.

2. **Wishful thinking does not automatically map to formal constraints.** Even if we can reach a perfect, high-level agreement about how the system should behave in a subset of cases, it is nearly impossible to formally express these constraints in a way that is both comprehensive and unambiguous. The complexity of real-world software systems often defies such efforts, leading to gaps and ambiguities that can be exploited by attackers.

3. **Formal verification is computationally infeasible for large, dynamic systems.** The computational resources required to verify the correctness of a large, dynamic system, such as a web browser, are currently beyond our reach. While formal methods have shown promise in smaller, more constrained environments, scaling them to the size and complexity of modern software systems remains a significant challenge.

These challenges highlight the need for a more pragmatic and flexible approach to security engineering, one that acknowledges the limitations of formal methods and focuses on practical, incremental improvements. In the context of web applications, this means adopting a combination of best practices, defensive coding techniques, and continuous monitoring and testing to mitigate the inherent risks and vulnerabilities.