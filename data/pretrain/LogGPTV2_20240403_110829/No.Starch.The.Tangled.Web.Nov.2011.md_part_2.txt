The Unusual Danger of “localhost”.............................................................152
Cookies and “Legitimate” DNS Hijacking....................................................153
Plug-in Security Rules.............................................................................................153
Adobe Flash............................................................................................154
Microsoft Silverlight..................................................................................157
Java.......................................................................................................157
Coping with Ambiguous or Unexpected Origins.......................................................158
IP Addresses............................................................................................158
Hostnames with Extra Periods....................................................................159
Non–Fully Qualified Hostnames.................................................................159
Local Files...............................................................................................159
Pseudo-URLs............................................................................................161
Browser Extensions and UI........................................................................161
Other Uses of Origins............................................................................................161
Security Engineering Cheat Sheet............................................................................162
Good Security Policy Hygiene for All Websites............................................162
When Relying on HTTP Cookies for Authentication.......................................162
When Arranging Cross-Domain Communications in JavaScript......................162
When Embedding Plug-in-Handled Active Content from Third Parties..............162
When Hosting Your Own Plug-in-Executed Content.......................................163
When Writing Browser Extensions.............................................................163
10
ORIGIN INHERITANCE 165
Origin Inheritance for about:blank..........................................................................166
Inheritance for data: URLs.......................................................................................167
Inheritance for javascript: and vbscript: URLs............................................................169
A Note on Restricted Pseudo-URLs...........................................................................170
Security Engineering Cheat Sheet............................................................................172
11
LIFE OUTSIDE SAME-ORIGIN RULES 173
Window and Frame Interactions.............................................................................174
Changing the Location of Existing Documents..............................................174
Unsolicited Framing..................................................................................178
Contents in Detail xiii
Cross-Domain Content Inclusion..............................................................................181
A Note on Cross-Origin Subresources.........................................................183
Privacy-Related Side Channels................................................................................184
Other SOP Loopholes and Their Uses......................................................................185
Security Engineering Cheat Sheet............................................................................186
Good Security Hygiene for All Websites.....................................................186
When Including Cross-Domain Resources....................................................186
When Arranging Cross-Domain Communications in JavaScript......................186
12
OTHER SECURITY BOUNDARIES 187
Navigation to Sensitive Schemes.............................................................................188
Access to Internal Networks....................................................................................189
Prohibited Ports.....................................................................................................190
Limitations on Third-Party Cookies............................................................................192
Security Engineering Cheat Sheet............................................................................195
When Building Web Applications on Internal Networks................................195
When Launching Non-HTTP Services, Particularly on Nonstandard Ports.........195
When Using Third-Party Cookies for Gadgets or Sandboxed Content.............195
13
CONTENT RECOGNITION MECHANISMS 197
Document Type Detection Logic...............................................................................198
Malformed MIME Types............................................................................199
Special Content-Type Values......................................................................200
Unrecognized Content Type......................................................................202
Defensive Uses of Content-Disposition.........................................................203
Content Directives on Subresources............................................................204
Downloaded Files and Other Non-HTTP Content......................................... 205
Character Set Handling.........................................................................................206
Byte Order Marks....................................................................................208
Character Set Inheritance and Override......................................................209
Markup-Controlled Charset on Subresources................................................209
Detection for Non-HTTP Files......................................................................210
Security Engineering Cheat Sheet............................................................................212
Good Security Practices for All Websites.....................................................212
When Generating Documents with Partly Attacker-Controlled Contents...........212
When Hosting User-Generated Files...........................................................212
14
DEALING WITH ROGUE SCRIPTS 213
Denial-of-Service Attacks........................................................................................214
Execution Time and Memory Use Restrictions...............................................215
Connection Limits.....................................................................................216
Pop-Up Filtering.......................................................................................217
Dialog Use Restrictions..............................................................................218
Window-Positioning and Appearance Problems........................................................219
Timing Attacks on User Interfaces............................................................................222
xiv Contents in Detail
Security Engineering Cheat Sheet............................................................................224
When Permitting User-Created  Gadgets on Your Site......................224
When Building Security-Sensitive UIs..........................................................224
15
EXTRINSIC SITE PRIVILEGES 225
Browser- and Plug-in-Managed Site Permissions........................................................226
Hardcoded Domains................................................................................227
Form-Based Password Managers.............................................................................227
Internet Explorer’s Zone Model...............................................................................229
Mark of the Web and Zone.Identifier.........................................................231
Security Engineering Cheat Sheet............................................................................232
When Requesting Elevated Permissions from Within a Web Application.........232
When Writing Plug-ins or Extensions That Recognize Privileged Origins..........232
PART III: A GLIMPSE OF THINGS TO COME 233
16
NEW AND UPCOMING SECURITY FEATURES 235
Security Model Extension Frameworks.....................................................................236
Cross-Domain Requests.............................................................................236
XDomainRequest......................................................................................239
Other Uses of the Origin Header...............................................................240
Security Model Restriction Frameworks....................................................................241
Content Security Policy..............................................................................242
Sandboxed Frames..................................................................................245
Strict Transport Security.............................................................................248
Private Browsing Modes............................................................................249
Other Developments..............................................................................................250
In-Browser HTML Sanitizers........................................................................250
XSS Filtering............................................................................................251
Security Engineering Cheat Sheet............................................................................253
17
OTHER BROWSER MECHANISMS OF NOTE 255
URL- and Protocol-Level Proposals............................................................................256
Content-Level Features............................................................................................258
I/O Interfaces.......................................................................................................259
18
COMMON WEB VULNERABILITIES 261
Vulnerabilities Specific to Web Applications.............................................................262
Problems to Keep in Mind in Web Application Design...............................................263
Common Problems Unique to Server-Side Code........................................................265
Contents in Detail xv
EPILOGUE 267
NOTES 269
INDEX 273
xvi Contents in Detail
P R E F A C E
Just fifteen years ago, the Web was as simple as it
was unimportant: a quirky mechanism that allowed a
handful of students, plus a bunch of asocial, basement-
dwelling geeks, to visit each other’s home pages dedi-
cated to science, pets, or poetry. Today, it is the platform
of choice for writing complex, interactive applications
(from mail clients to image editors to computer games)
and a medium reaching hundreds of millions of casual
users around the globe. It is also an essential tool of
commerce, important enough to be credited for caus-
ing a recession when the 1999 to 2001 dot-com bubble
burst.
This progression from obscurity to ubiquity was amazingly fast, even
bythe standards we are accustomed to in today’s information age—and its
speed of ascent brought with it an unexpected problem. The design flaws
and implementation shortcomings of the World Wide Web are those of a
technology that never aspired to its current status and never had a chance
topause and look back at previous mistakes. The resulting issues have quickly
emerged as some of the most significant and prevalent threats to data secu-
rity today: As it turns out, the protocol design standards one would apply to
a black-on-gray home page full of dancing hamsters are not necessarily the
same for an online shop that processes millions of credit card transactions
every year.
When taking a look at the past decade, it is difficult not to be slightly
disappointed: Nearly every single noteworthy online application devised so
far has had to pay a price for the corners cut in the early days of the Web.
Heck, xssed.com, a site dedicated to tracking a narrow subset of web-related
security glitches, amassed some 50,000 entries in about three years of opera-
tion. Yet, browser vendors are largely unfazed, and the security community
itself has offered little insight or advice on how to cope with the widespread
misery. Instead, many security experts stick to building byzantine vulnerabil-
ity taxonomies and engage in habitual but vague hand wringing about the
supposed causes of this mess.
Part of the problem is that said experts have long been dismissive of the
whole web security ruckus, unable to understand what it was all about. They
have been quick to label web security flaws as trivial manifestations of the
confused deputy problem* or of some other catchy label outlined in a trade jour-
nal three decades ago. And why should they care about web security, anyway?
What is the impact of an obscene comment injected onto a dull pet-themed
home page compared to the gravity of a traditional system-compromise flaw?
In retrospect, I’m pretty sure most of us are biting our tongues. Not only
has the Web turned out to matter a lot more than originally expected, but
we’ve failed to pay attention to some fundamental characteristics that put
itwell outside our comfort zone. After all, even the best-designed and most
thoroughly audited web applications have far more issues, far more frequently,
than their nonweb counterparts.
We all messed up, and it is time to repent. In the interest of repentance,
The Tangled Web tries to take a small step toward much-needed normalcy, and
as such, it may be the first publication to provide a systematic and thorough
analysis of the current state of affairs in the world of web application security.
In the process of doing so, it aims to shed light on the uniqueness of the secu-
rity challenges that we—security engineers, web developers, and users—have
to face every day.
The layout of this book is centered on exploring some of the most prom-
inent, high-level browser building blocks and various security-relevant topics
derived from this narrative. I have taken this approach because it seems to be
more informative and intuitive than simply enumerating the issues using an
* Confused deputy problem is a generic concept in information security used to refer to a broad
classof design or implementation flaws. The term describes any vector that allows the attacker
totrick a program into misusing some “authority” (access privileges) to manipulate a resource
in an unintended manner—presumably one that is beneficial to the attacker, however that
benefit is defined. The phrase “confused deputy” is regularly invoked by security researchers
inacademia, but since virtually all real-world security problems could be placed in this bucket
when considered at some level of abstraction, this term is nearly meaningless.
xviii Preface
arbitrarily chosen taxonomy (a practice seen in many other information
security books). I hope, too, that this approach will make The Tangled Web
abetter read.
For readers looking for quick answers, I decided to include quick engi-
neering cheat sheets at the end of many of the chapters. These cheat sheets
outline sensible approaches to some of the most commonly encountered
problems in web application design. In addition, the final part of the book
offers a quick glossary of the well-known implementation vulnerabilities that
one may come across.
Acknowledgments
Many parts of The Tangled Web have their roots in the research done for
Google’s Browser Security Handbook, a technical wiki I put together in 2008
andreleased publicly under a Creative Commons license. You can browse
the original document online at http://code.google.com/p/browsersec/.
I am fortunate to be with a company that allowed me to pursue this
project—and delighted to be working with a number of talented peers who
provided excellent input to make the Browser Security Handbook more useful
and accurate. In particular, thanks to Filipe Almeida, Drew Hintz, Marius
Schilder, and Parisa Tabriz for their assistance.
I am also proud to be standing on the shoulders of giants. This book owes
a lot to the research on browser security done by members of the informa-
tion security community. Special credit goes to Adam Barth, Collin Jackson,
Chris Evans, Jesse Ruderman, Billy Rios, and Eduardo Vela Nava for the
advancement of our understanding of this field.
Thank you all—and keep up the good work.
Preface xix
S E C U R I T Y I N T H E W O R L D
O F W E B A P P L I C A T I O N S
To provide proper context for the technical discus-
sions later in the book, it seems prudent to first of all
explain what the field of security engineering tries to
achieve and then to outline why, in this otherwise well-
studied context, web applications deserve special treat-
ment. So, shall we?
Information Security in a Nutshell
On the face of it, the field of information security appears to be a mature,
well-defined, and accomplished branch of computer science. Resident experts
eagerly assert the importance of their area of expertise by pointing to large
sets of neatly cataloged security flaws, invariably attributed to security-illiterate
developers, while their fellow theoreticians note how all these problems would
have been prevented by adhering to this year’s hottest security methodology.
A commercial industry thrives in the vicinity, offering various nonbinding
security assurances to everyone, from casual computer users to giant interna-
tional corporations.
Yet, for several decades, we have in essence completely failed to come up
with even the most rudimentary usable frameworks for understanding and
assessing the security of modern software. Save for several brilliant treatises
and limited-scale experiments, we do not even have any real-world success
stories to share. The focus is almost exclusively on reactive, secondary secu-
rity measures (such as vulnerability management, malware and attack detec-
tion, sandboxing, and so forth) and perhaps on selectively pointing out flaws
in somebody else’s code. The frustrating, jealously guarded secret is that when
it comes to enabling others to develop secure systems, we deliver far less value
than should be expected; the modern Web is no exception.
Let’s look at some of the most alluring approaches to ensuring informa-
tion security and try to figure out why they have not made a difference sofar.
Flirting with Formal Solutions
Perhaps the most obvious tool for building secure programs is to algorithmi-
cally prove they behave just the right way. This is a simple premise that intu-
itively should be within the realm of possibility—so why hasn’t this approach
netted us much?
Well, let’s start with the adjective secure itself: What is it supposed to convey,
precisely? Security seems like an intuitive concept, but in the world of comput-
ing, it escapes all attempts to usefully define it. Sure, we can restate the prob-
lem in catchy yet largely unhelpful ways, but you know there’s a problem
when one of the definitions most frequently cited by practitioners* is this:
A system is secure if it behaves precisely in the manner intended—
and does nothing more.
This definition is neat and vaguely outlines an abstract goal, but it tells
very little about how to achieve it. It’s computer science, but in terms of spec-
ificity, it bears a striking resemblance to a poem by Victor Hugo:
Love is a portion of the soul itself, and it is of the same nature as
the celestial breathing of the atmosphere of paradise.
One could argue that practitioners are not the ones to be asked for
nuanced definitions, but go ahead and pose the same question to a group of
academics and they’ll offer you roughly the same answer. For example, the
following common academic definition traces back to the Bell-La Padula secu-
rity model, published in the 1960s. (This was one of about a dozen attempts
to formalize the requirements for secure systems, in this case in terms of a
finite state machine;1 it is also one of the most notable ones.)
A system is secure if and only if it starts in a secure state and cannot
enter an insecure state.
* The quote is attributed originally to Ivan Arce, a renowned vulnerability hunter, circa 2000;
since then, it has been used by Crispin Cowan, Michael Howard, Anton Chuvakin, and scores
ofother security experts.
2 Chapter 1
Definitions along these lines are fundamentally true, of course, and may
serve as the basis for dissertations or even a couple of government grants. But
in practice, models built on these foundations are bound to be nearly useless
for generalized, real-world software engineering for at least three reasons:
 There is no way to define desirable behavior for a sufficiently complex
computer system. No single authority can define what the “intended
manner” or “secure states” should be for an operating system or a web
browser. The interests of users, system owners, data providers, business
process owners, and software and hardware vendors tend to differ sig-
nificantly and shift rapidly—when the stakeholders are capable and will-
ing to clearly and honestly disclose their interests to begin with. To add
insult to injury, sociology and game theory suggest that computing a sim-
ple sum of these particular interests may not actually result in a benefi-
cial outcome. This dilemma, known as “the tragedy of the commons,” is
central to many disputes over the future of the Internet.
 Wishful thinking does not automatically map to formal constraints.
Evenif we can reach a perfect, high-level agreement about how the sys-
tem should behave in a subset of cases, it is nearly impossible to formal-