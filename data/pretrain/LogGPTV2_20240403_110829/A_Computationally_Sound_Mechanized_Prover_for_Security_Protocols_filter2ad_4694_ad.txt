Otherwise, when x is not referred to at all after the transfor-
mation, we remove the deﬁnition of x. When x is referred
to only at the root of deﬁned tests, we replace its deﬁnition
with a constant. (The deﬁnition point of x is important, but
not its value.)
r).
m, mkgen(x(cid:2)
m, xmk, xma) becomes check (x(cid:2)
Example 2 In the process of Example 1,
the transfor-
mation RemoveAssign(xmk) substitutes mkgen(x(cid:2)
r) for
xmk in the whole process and removes the assignment
let xmk : Tmk = mkgen(x(cid:2)
After this substitu-
tion, mac(xm, xmk) becomes mac(xm, mkgen(x(cid:2)
r)) and
check (x(cid:2)
r),
xma), thus exhibiting terms required in Section 3.2. The
situation is similar for RemoveAssign(xk).
SArename(x): The transformation SArename (single as-
signment rename) aims at renaming variables so that each
variable has a single deﬁnition in the game; this is use-
ful for distinguishing cases depending on which deﬁni-
tion of x has set x[(cid:2)i]. This transformation can be ap-
plied only when x /∈ V . When x has m > 1 def-
initions, we rename each deﬁnition of x to a different
variable x1, . . . , xm. Terms x[(cid:2)i] under a deﬁnition of
xj[(cid:2)i] are then replaced with xj[(cid:2)i]. Each branch of ﬁnd
F B = (cid:2)u[(cid:2)i] ≤ (cid:2)n suchthat deﬁned (M (cid:2)
l(cid:2) ) ∧
M then P where x[M1, . . . , Ml]
is a subterm of
some M (cid:2)
is replaced with m branches
F B{xj[M1, . . . , Ml]/x[M1, . . . , Ml]} for 1 ≤ j ≤ m.
Simplify: The prover uses a simpliﬁcation algorithm, based
on an equational prover, using an algorithm similar to the
Knuth-Bendix completion [27]. This equational prover
uses:
k for k ≤ l(cid:2)
1, . . . , M (cid:2)
• User-deﬁned equations, of the form ∀x1 : T1, . . . ,
∀xm : Tm, M which mean that for all environments
E, if for all j ≤ m, E(xj) ∈ Iη(Tj), then E, M ⇓ 1.
For example, considering mac and stream ciphers as in
Deﬁnitions 1 and 2 respectively, we have:
∀r : Tmr, ∀m : bitstring,
check (m, mkgen(r), mac(m, mkgen(r))) = 1
(mac)
∀m : bitstring; ∀r : Tr, ∀r(cid:2) : T (cid:2)
r,
dec(enc(m, kgen(r), r(cid:2)), kgen(r)) = i⊥(m)
(enc)
We express the poly-injectivity of the function k2b of
Example 1 by
∀x : Tk, ∀y : Tk, (k2b(x) = k2b(y)) = (x = y)
∀x : Tk, k2b−1(k2b(x)) = x
(k2b)
where k2b−1 is a function symbol that denotes the in-
verse of k2b. We have similar formulas for i⊥.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
• Equations that come from the process. For example, in
the process if M then P else P (cid:2), we have M = 1 in
P and M = 0 in P (cid:2).
• The low probability of collision between random val-
ues. For example, when x is deﬁned by new x : T and
T is a large type, x[M1, . . . , Mm] = x[M (cid:2)
m]
implies M1 = M (cid:2)
m up to negligible
probability.
1, . . . , Mm = M (cid:2)
1, . . . , M (cid:2)
The prover combines these properties to simplify terms, and
uses simpliﬁed forms of terms to simplify processes. For
example, if M simpliﬁes to 1, then if M then P else P (cid:2)
simpliﬁes to P .
Proposition 1 Let Q0 be a process that satisﬁes Invari-
ants 1, 2, and 3, and Q(cid:2)
0 the process obtained from Q0 by
one of the transformations above. Then Q(cid:2)
0 satisﬁes Invari-
ants 1, 2, and 3, and Q0 ≈V Q(cid:2)
0.
3.2 Applying the Deﬁnition of Security of
Primitives
The security of cryptographic primitives is deﬁned using
observational equivalences given as axioms.
Importantly,
this formalism allows us to specify many different primi-
tives in a generic way. Such equivalences are then used by
the prover in order to transform a game into another, obser-
vationally equivalent game, as explained in the following of
this section.
The primitives are speciﬁed using equivalences of the
m) where G is deﬁned
form (G1, . . . , Gm) ≈ (G(cid:2)
by the following grammar, with l ≥ 0 and m ≥ 1:
1, . . . , G(cid:2)
G ::=
group of functions
!i≤nnew y1 : T1; . . . ; new yl : Tl; (G1, . . . , Gm)
(x1 : T1, . . . , xl : Tl) → F P function
replication, restrictions
F P ::=
M
functional processes
new x[(cid:2)i] : T ; F P
let x[(cid:2)i] : T = M in F P
if M then F P1 else F P2
ﬁnd (
term
random number
assignment
(cid:3)m
test
j=1 (cid:2)uj[(cid:2)i] ≤ (cid:4)nj suchthat
deﬁned (Mj1, . . . , Mjlj
) ∧ Mj then F Pj) else F P
array lookup
Intuitively, (x1 : T1, . . . , xl : Tl) → F P represents a func-
tion that takes as argument values x1, . . . , xl of types
T1, . . . , Tl respectively, and returns a result computed by
F P . The observational equivalence (G1, . . . , Gm) ≈
(G(cid:2)
m) expresses that the adversary has a negligi-
ble probability of distinguishing functions in the left-hand
1, . . . , G(cid:2)
[[(G1, . . . , Gm)]] = [[G1]]1 | . . . | [[Gm]]m
[[!i≤n
new y1 : T1; . . . ; new yl : Tl; (G1, . . . , Gm)]]ej
ei
!i≤ncej[(cid:2)i, i](); new y1 : T1; . . . ; new yl : Tl; cej[(cid:2)i, i](cid:5)(cid:6); ([[G1]]ej,1
= cej[(cid:2)i](x1 : T1, . . . , xl : Tl); [[F P ]]ej
[[(x1 : T1, . . . , xl : Tl) → F P ]]ej
ei
=
ei,i
ei
| . . . | [[Gm]]ej,m
ei,i
)
= cej[(cid:2)i](cid:5)M (cid:6)
[[M ]]ej
ei
[[new x[(cid:2)i] : T ; F P ]]ej
[[let x[(cid:2)i] : T = M in F P ]]ej
[[if M then F P1 else F P2]]ej
ei
ei
ei
= new x[(cid:2)i] : T ; [[F P ]]ej
ei
= let x[(cid:2)i] : T = M in [[F P ]]ej
= if M then [[F P1]]ej
ei
ei else [[F P2]]ej
ei
[[ﬁnd (
(cid:3)m
j=1 (cid:2)uj[(cid:2)i] ≤ (cid:4)nj suchthat deﬁned (Mj1, . . . , Mjlj
(cid:3)m
j=1 (cid:2)uj[(cid:2)i] ≤ (cid:4)nj suchthat deﬁned (Mj1, . . . , Mjlj
where cej are pairwise distinct channels,(cid:2)i = i1, . . . , il(cid:2), and (cid:2)j = j0, . . . , jl(cid:2).
ﬁnd (
) ∧ Mj then F Pj) else F P ]]ej
ei
) ∧ Mj then [[F Pj]]ej
ei
) else [[F P ]]ej
ei
=
Figure 2. Translation from functional processes to processes
side from corresponding functions in the right-hand side.
Formally, functions can be encoded as processes that in-
put their arguments and output their result on a channel,
as shown in Figure 2. The translation of !i≤nnew y1 :
T1; . . . ; new yl
: Tl; (G1, . . . , Gm) inputs and outputs
on channel cej so that the context can trigger the gener-
ation of random numbers y1, . . . , yl. The translation of
(x1 : T1, . . . , xl : Tl) → F P inputs the arguments of the
function on channel cej and translates F P , which outputs
the result of F P on cej.
(In the left-hand side, the result
F P of functions must simply be a term M.) The observa-
tional equivalence (G1, . . . , Gm) ≈ (G(cid:2)
m) is then
an abbreviation for [[(G1, . . . , Gm)]] ≈ [[(G(cid:2)
1, . . . , G(cid:2)
1, . . . , G(cid:2)
m)]].
For example, the security of a mac (Deﬁnition 1) is rep-
resented by the equivalence L ≈ R where:
L = !i(cid:2)(cid:2)≤n(cid:2)(cid:2)
new r : Tmr; (
!i≤n(x : bitstring) → mac(x, mkgen(r)),
!i(cid:2)≤n(cid:2) (m : bitstring, ma : Tms) →
check (m, mkgen(r), ma))
R = !i(cid:2)(cid:2)≤n(cid:2)(cid:2)
new r : Tmr; (
(cid:2)(x, mkgen
!i≤n(x : bitstring) → mac
!i(cid:2)≤n(cid:2) (m : bitstring, ma : Tms) →
ﬁnd u ≤ n suchthat deﬁned (x[u]) ∧ (m = x[u])
∧ check
(cid:2)(r), ma) then 1 else 0)
(cid:2)(m, mkgen
(cid:2)(r)),
(cid:2) are function symbols with
where mac(cid:2), check
the same types as mac, check, and mkgen respectively. (We
(cid:2), and mkgen
(maceq)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
use different function symbols on the left- and right-hand
sides, just to prevent a repeated application of the transfor-
mation induced by this equivalence. Since we add these
function symbols, we also add the equation
∀r : Tmr, ∀m : bitstring,
check
(cid:2)(m, mkgen
(cid:2)(r), mac
(cid:2)(m, mkgen
(cid:2)(r))) = 1
(mac(cid:2))
(cid:2), and
which restates Equation (mac) for mac(cid:2), check
(cid:2).) Intuitively, the equivalence L ≈ R leaves mac
mkgen
computations unchanged (except for the use of primed
function symbols in R), and allows one to replace a
mac checking check (m, mkgen(r), ma) with a lookup in
the array x of messages whose mac has been computed
with key mkgen(r):
if m is found in the array x and
check (m, mkgen(r), ma), we return 1; otherwise,
the
check fails (up to negligible probability), so we return 0.
(If the check succeeded with m not in the array x, the ad-
versary would have forged a mac.) Obviously, the form of
L requires that r is used only to compute or check macs, for
the equivalence to be correct. Formally, the following result
shows the correctness of our modeling. It is a fairly easy
consequence of Deﬁnition 1.
Proposition 2 Assuming (mkgen, mac, c) is a message au-
thentication code secure against existential forgery un-
(cid:2)) = Iη(mkgen),
der chosen message attack, Iη(mkgen
(cid:2)) = Iη(check ), then
Iη(mac(cid:2)) = Iη(mac), and Iη(check
[[L]] ≈ [[R]].
Similarly, we represent
the security of a IND-CPA
stream cipher (Deﬁnition 2) by the equivalence:
!i(cid:2)≤n(cid:2)
new r : Tr; !i≤n(x : bitstring) →