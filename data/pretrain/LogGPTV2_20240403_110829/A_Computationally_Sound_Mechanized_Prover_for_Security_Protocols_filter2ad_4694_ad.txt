### Variable Transformation and Simplification

1. **Variable Removal and Constant Substitution:**
   - If a variable \( x \) is not referenced after the transformation, its definition is removed.
   - If \( x \) is only referenced at the root of defined tests, its definition is replaced with a constant. The definition point of \( x \) is significant, but not its value.

   **Example 2:**
   In the process of Example 1, the transformation `RemoveAssign(xmk)` substitutes `mkgen(x(cid:2)r)` for `xmk` throughout the process and removes the assignment `let xmk : Tmk = mkgen(x(cid:2)r)`. After this substitution, `mac(xm, xmk)` becomes `mac(xm, mkgen(x(cid:2)r))`, and `check (x(cid:2)r, xma)` remains unchanged, thus exhibiting terms required in Section 3.2. A similar situation applies to `RemoveAssign(xk)`.

2. **Single Assignment Rename (SArename):**
   - The `SArename` transformation aims to rename variables so that each variable has a single definition in the game. This is useful for distinguishing cases based on which definition of \( x \) has set \( x[(cid:2)i] \).
   - This transformation can be applied only when \( x \notin V \). If \( x \) has \( m > 1 \) definitions, each definition of \( x \) is renamed to a different variable \( x1, \ldots, xm \).
   - Terms \( x[(cid:2)i] \) under a definition of \( xj[(cid:2)i] \) are then replaced with \( xj[(cid:2)i] \). Each branch of `find F B = (cid:2)u[(cid:2)i] ≤ (cid:2)n suchthat defined (M (cid:2)l(cid:2)) ∧ M then P where x[M1, . . . , Ml]` is a subterm of some \( M (cid:2) \), is replaced with \( m \) branches `F B{xj[M1, . . . , Ml]/x[M1, . . . , Ml]} for 1 ≤ j ≤ m`.

3. **Simplification:**
   - The prover uses a simplification algorithm based on an equational prover, similar to the Knuth-Bendix completion [27].
   - The equational prover uses:
     - **User-defined equations:** For example, considering `mac` and stream ciphers as in Definitions 1 and 2 respectively, we have:
       \[
       \forall r : Tmr, \forall m : \text{bitstring}, \text{check}(m, \text{mkgen}(r), \text{mac}(m, \text{mkgen}(r))) = 1
       \]
       \[
       \forall m : \text{bitstring}; \forall r : Tr, \forall r'(cid:2) : T (cid:2)r, \text{dec}(\text{enc}(m, \text{kgen}(r), r'(cid:2)), \text{kgen}(r)) = i\perp(m)
       \]
     - **Poly-injectivity of functions:** For example, the poly-injectivity of the function `k2b` in Example 1 is expressed by:
       \[
       \forall x : Tk, \forall y : Tk, (\text{k2b}(x) = \text{k2b}(y)) = (x = y)
       \]
       \[
       \forall x : Tk, \text{k2b}^{-1}(\text{k2b}(x)) = x
       \]
     - **Equations from the process:** For example, in the process `if M then P else P'`, we have \( M = 1 \) in \( P \) and \( M = 0 \) in \( P' \).
     - **Low probability of collision between random values:** For example, if \( x \) is defined by `new x : T` and \( T \) is a large type, \( x[M1, \ldots, Mm] = x[M'(cid:2)1, \ldots, M'(cid:2)m] \) implies \( M1 = M'(cid:2)1, \ldots, Mm = M'(cid:2)m \) up to negligible probability.

   - The prover combines these properties to simplify terms and processes. For example, if \( M \) simplifies to 1, then `if M then P else P'` simplifies to \( P \).

**Proposition 1:**
Let \( Q0 \) be a process that satisfies Invariants 1, 2, and 3, and \( Q0' \) be the process obtained from \( Q0 \) by one of the transformations above. Then \( Q0' \) satisfies Invariants 1, 2, and 3, and \( Q0 \approx_V Q0' \).

### Applying the Definition of Security of Primitives

The security of cryptographic primitives is defined using observational equivalences given as axioms. This formalism allows specifying many different primitives in a generic way. Such equivalences are used by the prover to transform a game into another, observationally equivalent game.

**Primitive Specification:**
Primitives are specified using equivalences of the form \((G1, \ldots, Gm) \approx (G'(cid:2)1, \ldots, G'(cid:2)m)\), where \( G \) is defined by the following grammar:
- **Group of functions:**
  \[
  G ::= !i≤n \text{new } y1 : T1; \ldots; \text{new } yl : Tl; (G1, \ldots, Gm)
  \]
- **Functional processes:**
  \[
  FP ::= M \mid \text{new } x[(cid:2)i] : T; FP \mid \text{let } x[(cid:2)i] : T = M \text{ in } FP \mid \text{if } M \text{ then } FP1 \text{ else } FP2 \mid \text{find } (\sum_{j=1}^m u_j[(cid:2)i] ≤ n_j \text{ suchthat defined } (M_{j1}, \ldots, M_{jlj}) ∧ M_j \text{ then } FP_j) \text{ else } FP
  \]

**Observational Equivalence:**
The observational equivalence \((G1, \ldots, Gm) \approx (G'(cid:2)1, \ldots, G'(cid:2)m)\) expresses that the adversary has a negligible probability of distinguishing functions in the left-hand side from corresponding functions in the right-hand side. Functions can be encoded as processes that input their arguments and output their result on a channel, as shown in Figure 2.

**Example:**
- **Security of MAC (Message Authentication Code):**
  The security of a MAC (Definition 1) is represented by the equivalence \( L \approx R \) where:
  \[
  L = !i≤n \text{new } r : Tmr; (!i≤n (x : \text{bitstring}) → \text{mac}(x, \text{mkgen}(r)), !i≤n (m : \text{bitstring}, ma : Tms) → \text{check}(m, \text{mkgen}(r), ma))
  \]
  \[
  R = !i≤n \text{new } r : Tmr; (!i≤n (x : \text{bitstring}) → \text{mac}'(x, \text{mkgen}'(r)), !i≤n (m : \text{bitstring}, ma : Tms) → \text{find } u ≤ n \text{ suchthat defined } (x[u]) ∧ (m = x[u]) ∧ \text{check}'(m, \text{mkgen}'(r), ma) \text{ then } 1 \text{ else } 0)
  \]
  - Intuitively, the equivalence \( L \approx R \) leaves MAC computations unchanged (except for the use of primed function symbols in \( R \)) and allows replacing a MAC check with a lookup in the array \( x \) of messages whose MAC has been computed with key \( \text{mkgen}(r) \).

- **Security of IND-CPA Stream Cipher (Definition 2):**
  The security of an IND-CPA stream cipher is represented by the equivalence:
  \[
  !i≤n \text{new } r : Tr; !i≤n (x : \text{bitstring}) → \text{enc}(x, \text{kgen}(r))
  \]

**Proposition 2:**
Assuming \((\text{mkgen}, \text{mac}, c)\) is a message authentication code secure against existential forgery under chosen message attack, and \( Iη(\text{mkgen}') = Iη(\text{mkgen}), Iη(\text{mac}') = Iη(\text{mac}), \) and \( Iη(\text{check}') = Iη(\text{check}) \), then \( [[L]] \approx [[R]] \).

This completes the detailed and coherent explanation of the transformations and simplifications, along with the application of the security definitions of cryptographic primitives.