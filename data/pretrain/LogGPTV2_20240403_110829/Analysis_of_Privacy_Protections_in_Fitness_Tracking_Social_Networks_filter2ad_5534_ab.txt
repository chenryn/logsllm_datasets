an additional activity reduces the space of possible EPZs to one.
truncated such that segments of the route are not visi-
ble within a certain radius of a sensitive location (Fig.
1b).2 Unfortunately, there are also disincentives to
leveraging the privacy zones. For example, Strava and
Garmin Connect users will not appear on leaderboards
for routes that are affected by their privacy zone.
F4 EPZ Radius Size: All three services (Strava, Garmin
Connect, Map My Tracks) that provide an EPZ fea-
ture, allow users the option of selecting a circular ob-
fuscation region from a ﬁxed set of radius size val-
ues. Different services provide different minimum and
maximum radius sizes with ﬁxed increments to in-
crease and decrease the size of EPZ radius. For ex-
ample, Garmin Connect allows users to select a mini-
mum and a maximum radius of 100 and 1000 meters
with 100 meters increments.
2These images are being used with the permission of the athlete
and do not leak any personally identiﬁable information as the pictured
activity took place on site at a conference.
USENIX Association
27th USENIX Security Symposium    499
xx3 You can run, but can you hide?
In this section, we set out to determine whether or not
ﬁtness tracking services’ users’ trust in the EPZ mecha-
nism is misplaced. To do so, we present an efﬁcient at-
tack methodology for identifying EPZs. As discussed in
Section 2, EPZs place a hidden circle around the user’s
private location in order to prevent route data within a
given radius of that location from appearing on activity
webpages. The hidden part of the route is only visible
to the owner of the activity. Moreover, the number of
allowed EPZ radius sizes are ﬁxed based on the ﬁtness
tracking service. For example, Strava provides a ﬁxed
set of EPZ radii of 1
8 of a mile.
It may be intuitive to the reader that, given a ﬁnite set
of possible circle radii and a handful of points that in-
tersect the circle, the center of the circle (i.e., a user’s
protected location) is at risk of being inferred. Figure
2 demonstrates this intuition for EPZs. When only one
route intersection point is known, there is a large space
of possible EPZ locations; however, given two intersec-
tion points, the number of possible EPZs is dramatically
reduced, with the only remaining uncertainty being the
radius of the circle (Figure 2a). Given three distinct in-
tersection points (Figure 2b), it should be possible to re-
liably recover the EPZ radius and center.
8, 1
4, 3
8, 1
2, or 5
In spite of this intuition, it is not necessarily the case
that EPZs are ineffective in practice; a variety of factors
may frustrate the act of EPZ identiﬁcation. First, services
that offer EPZ mechanisms do not indicate to users when
an EPZ is active on a route. Instead, as shown in Fig-
ure 1, the route is redrawn as if the activity started and
ﬁnished outside of the invisible EPZ. Even if an activ-
ity is known to intersect an EPZ, it is not obvious which
side of the route (beginning or end) the EPZ intersects.
Activity endpoints that intersect an EPZ are therefore in-
distinguishable from endpoints that do not, creating sig-
niﬁcant noise and uncertainty when attempting to infer
a protected location. Moreover, the GPS sampling ﬁ-
delity provided by ﬁtness tracking devices and services
may be such that the exact point where a route intersects
an EPZ may be irrecoverable. Alternately, it may also be
that EPZs are recoverable in only highly favorable condi-
tions, making the identiﬁcation of ﬁtness tracking service
users at scale impractical.
3.1 Threat Model
We consider an adversary that wishes to surreptitiously
identify the protected home or work locations of a tar-
get user on a ﬁtness tracking service. Through the use of
a dummy account, the adversary learns how the ﬁtness
tracking service protects private locations, as described
in Section 2. However, the attacker is unaware of the
target user’s protected location, and moreover is uncer-
tain if the target has even registered a protected location.
To avoid arousing suspicion, the attacker may surveil the
target user in any number of ways – by following the
user’s proﬁle from their own account, or querying the
target user’s data via a service API. Regardless of the
means, the singular goal of the adversary is to determine
the existence of an EPZ and recover the protected address
using only ﬁtness activities posted to the users’ account.
3.2 Breaking Endpoint Privacy Zones
Problem Formulation. We formulate our problem as
the EPZ Circle Search Problem in the Cartesian plane.
We convert GPS coordinates of the activities to Earth-
Centered Earth-Fixed (ECEF) coordinates in the Carte-
sian plane. The details of conversion can be found
in [57]. This is justiﬁed by the fact that both services
and protocols such as GPS cannot provide arbitrary ac-
curacy. Moreover, this makes the attack algorithm calcu-
lations easier without loss of important information. We
ﬁrst proceed to give a formal deﬁnition of EPZ and use
this deﬁnition for remainder of section.
Deﬁnition 1. Endpoint Privacy Zone. Let point ps =
(xs,ys) be a sensitive location in the Cartesian plane, and
a be an activity route of n points . EPZps,r
is a circle with center ps and radius r that is applied to
activity a if p1 or pn are within distance r of ps. If this is
the case, all points pi in a that are within distance r of ps
are removed from a.
With this in mind, the deﬁnition of the EPZ Circle
Search Problem is as follows:
Deﬁnition 2. EPZ Circle Search Problem. Let EPZps,r
be an active EPZ where r is in the set RS provided by
service S, and let Au be the set of activity routes for user
u of the form . In the EPZ search problem,
the goal is to guess (pg,rg ∈ RS) such that EPZpg,rg best
ﬁts endpoints p1 and pn for all activities in Au.
In order to identify a suitable algorithm for EPZ search
problem, we ﬁrst looked into circle ﬁt algorithms. Cir-
cle ﬁt algorithms take sets of Cartesian coordinates and
try to ﬁt a circle that passes through those points. The
most studied circle ﬁt algorithm is Least Squares Fit
(LSF) [40] of circle. This method is based on minimiz-
ing the mean square distance from the circle to the data
points. Given n points (xi , yi), 1 ≤ i ≤ n, the objective
function is deﬁned by
F =
n
∑
i=1
d2
i
(1)
500    27th USENIX Security Symposium
USENIX Association
where di is the Euclidean (geometric) distance from the
point (xi , yi) to the circle. If the circle satisﬁes equation
(x− a)2 + (y− b)2 = r2
where (a, b) is its center and r its radius, then
(xi − a)2 + (yi − b)2 − r
di =
(cid:113)
(2)
(3)
Limitations of LSF.
The minimization of equation 1
is a nonlinear problem that has no closed form solution.
There is no direct algorithm for computing the minimum
of F, all known algorithms are iterative and costly by na-
ture [32]. Moreover, the LSF algorithm also suffers from
several limitations when applied to EPZ Circle Search
Problem. The ﬁrst limitation is that the adversary is not
sure which points in an activity intersect the EPZ. There
can be up to 4 endpoints in a modiﬁed route, but at most
two of these points intersect the EPZ. Feeding one of the
non-intersecting points into LSF will lead to an inaccu-
rate result. Therefore, the adversary must run the LSF al-
gorithm with all possible combinations of endpoints and
then pick the result that minimizes F. However, we dis-
covered through experimentation that the LSF algorithm
is prohibitively slow for large sets of activities. The third
limitation is that LSF considers circles of all possible
radii. However, in the case of ﬁtness tracking services
context, the algorithm need only consider the small ﬁnite
set of radii RS.
In order to overcome above limitations, we devised a
simpler and more efﬁcient algorithm that ﬁts our needs.
We will ﬁrst give a strawman algorithm to search EPZ
then we will reﬁne this algorithm in various steps.
Given a set of activities
ALGORITHM STRAWMAN.
Au and possible radii RS, iterate through pairs of activ-
ities and perform pairwise inspection of each possible
combination of endpoints. For each pair of endpoints
(x1,y1), (x2,y2), solve the simultaneous equations:
(xc − x1)2 + (yc − y1)2 = r2
(xc − x2)2 + (yc − y2)2 = r2
(4)
(5)
where r is one of the radius from RS and (xc,yc) is
the center of a possible EPZ. Store each solution for the
simultaneous equations as a candidate EPZs in set SS.
When ﬁnished, return a randomly selected item in SS as
a guess for the protected location.
Reﬁnement #1 (Conﬁdence Score & Threshold):
The above algorithm is not deterministic – multiple EPZs
are predicted by the algorithm, but only one is the cor-
rect one for the given user u. Pruning these possibili-
ties requires the introduction of a metric to indicate that
one candidate EPZ is more likely to be correct than the
others. We observe that the correct EPZ prediction will
Algorithm 1: EPZ Search Algorithm
Inputs : Au, τd, τc, τi, RS
Output: KeyValueStore of EPZ, conﬁdence level
1 PossibleEPZs ← KeyValueStore()
2
foreach (A1, A2) ∈ Au do
/* 6 possible point pairs are generated.
PointPairs ← Pairs of start and end points from A1 and A2
foreach PointPair ∈ PointPairs do
/* For each possible EPZ radius.
foreach r ∈ RS do
end
SS ← Solve simultaneous eq. for r, PointPair
end
foreach EPZ ∈ SS do
PossibleEPZs[EPZ] ← 1
end
foreach EPZ ∈ PossibleEPZs do
foreach (A) ∈ Au do
3
4
5
6
7
8
9
10
11
12 end
13
14
15
16
17
18 end
19
20
21
22
23
24
25
26 end
27
end
end
/* Haversine formula calc. dist. between coords.
/* Reﬁnement #3
if EPZ.R − Haversine(EPZ,A) > τi then
Delete(PossibleEPZs[EPZ2])
foreach EPZ2 ∈ PossibleEPZs do
foreach EPZ1 ∈ PossibleEPZs do
if EPZ1 (cid:54)= EPZ2 then
/* Reﬁnement #2
if Haversine(EPZ1,EPZ2) < τd then
PossibleEPZs[EPZ1]+ = PossibleEPZs[EPZ2]
Delete(PossibleEPZs[EPZ2])
foreach key,value ∈ PossibleEPZs do
/* Reﬁnement #1
if value < τc then
28
29
30 end
31 return PossibleEPZs
Delete key from PossibleEPZs
*/
*/
*/
*/
*/
*/
occur most often; this is because all endpoint pairs that
intersect the EPZ will produce the same result, whereas
endpoint pairs that do not intersect the EPZ will produce
different results each time. Therefore, we introduce a
consensus procedure to select our prediction from the set
of candidate EPZs. A conﬁdence score is assigned to
each EPZ, where the value of this metric is the number
of activity start/end points that independently agree on
the location of the EPZ. To prevent our algorithm from
issuing a bad prediction when insufﬁcient information
(i.e., activities) is available, we also introduce a conﬁ-
dence threshold τc. τc represents the minimum conﬁ-
dence score needed to qualify as an EPZ prediction. If a
candidate EPZ is less than the conﬁdence threshold, then
it is removed from consideration. The ﬁnal prediction of
the algorithm, if any, is the candidate EPZ with the high-
est conﬁdence score exceeding tc, as shown in line 28 of
Algorithm 1.
Reﬁnement #2 (Distance Similarity Threshold):
Due to sampling noise and imprecision in the GPS
coordinates made available by ﬁtness tracking de-
vices/services, it may be that activity endpoints do not
lie exactly on the EPZ circle. As a result, our algorithm
USENIX Association
27th USENIX Security Symposium    501
will predict slightly different pg values for different end-
points pairs, even when considering endpoints that truly
intersect the EPZ. Our algorithm will not be able to accu-
mulate conﬁdence in a given prediction unless we can ac-
count for this noise. Therefore, we introduce a distance
similarity threshold τd. When comparing two candidate
EPZs to one another, the reﬁned algorithm considers two
circles as same if the distance between the centers is less
than or equal to this threshold. τd is used in the Algo-
rithm 1 from line 19 to line 26.
Reﬁnement #3 (Activity Intersection Threshold):
To reduce the space of candidate EPZs, we can lever-
age the knowledge that no endpoint from any activity in
the set Au should fall within the candidate EPZ’s circle,
as this necessarily implies that an EPZ was not active in
that area for user u. However, we must also account for
measurement error when performing this test – due to
noise in GPS sampling, there is a chance that an activity
passing nearby the area of the candidate EPZ could pro-
duce endpoints that appear to lie within the circle. This
would result in ruling out a candidate EPZ that may in
fact be the true EPZ. To mitigate this problem, we in-
troduce an activity intersection threshold τi. Our reﬁned
algorithm does consider an endpoint to intersect a candi-
date EPZ unless it falls more than τi within the EPZ cir-
cles, as shown in the Algorithm 1 from line 13 to line 18.
ALGORITHM REFINED.
Extending our original
strawman algorithm, our ﬁnal reﬁned algorithm is shown
in Algorithm 1. Given as input a set of activities for a
single user Au, distance similarity threshold τd, activity
intersection threshold τi, conﬁdence threshold τc, and set
of EPZ radii RS, the algorithm returns all the candidate
EPZs with their conﬁdence value, with the highest conﬁ-
dence point pg representing a prediction for u’s protected
location. Note that value of thresholds depend on the ﬁt-
ness tracking service and require training runs to param-
eterize. We will describe our procedure for ﬁnding these
threshold values in Section 5.
4 Data Collection3
To evaluate the plausibility of the above EPZ attack al-