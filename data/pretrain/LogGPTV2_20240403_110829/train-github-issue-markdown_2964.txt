### Bug report
**Bug summary**
When using the “WXAgg” backend, I’m unable to draw a zoom region on one of the
two axes of a matplotlib figure.
**Code for reproduction**
    # coding=utf-8
    import matplotlib
    matplotlib.use("WXAgg")
    import matplotlib.backends.backend_wx
    import matplotlib.backends.backend_wxagg
    import matplotlib.figure
    import matplotlib.pyplot
    import skimage.data
    import wx
    class App(wx.App):
        def OnInit(self):
            x = skimage.data.chelsea()
            y = skimage.data.chelsea()
            frame = Frame(x, y)
            frame.Show(True)
            return True
    class Frame(wx.Frame):
        def __init__(self, x, y):
            wx.Frame.__init__(self, None, -1, "…", size=(800, 600))
            self.x = x
            self.y = y
            self.figure, (a, b) = matplotlib.pyplot.subplots(
                figsize=(12, 6),
                ncols=2,
                sharex=True,
                sharey=True
            )
            a.imshow(self.x)
            b.imshow(self.y)
            self.canvas = matplotlib.backends.backend_wxagg.FigureCanvasWxAgg(self, -1, self.figure)
            self.sizer = wx.BoxSizer(wx.VERTICAL)
            self.toolbar = NavigationToolbar(self.canvas)
            self.toolbar.Realize()
            self.sizer.Add(self.toolbar, 0, wx.GROW)
            self.toolbar.update()
            self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
            self.SetSizer(self.sizer)
            self.Fit()
        def OnPaint(self, event):
            self.canvas.draw()
    class NavigationToolbar(matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg):
        def __init__(self, canvas):
            matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg.__init__(self, canvas)
    if __name__ == "__main__":
        app = App(0)
        app.MainLoop()
**Actual outcome**
![bug](https://user-
images.githubusercontent.com/315821/29936010-ae848284-8e4e-11e7-8f91-6f61fc8f26bb.png)
**Expected outcome**
The Jupyter backend, for example, works:
    %matplotlib notebook
    import matplotlib.pyplot
    import skimage.data
    figure, (a, b) = matplotlib.pyplot.subplots(
        figsize=(6, 3),
        ncols=2,
        sharex=True,
        sharey=True
    )
    image = skimage.data.chelsea()
    a.imshow(image)
    b.imshow(image)
    figure.show()
**Matplotlib version**
  * Operating System: macOS 10.11.6
  * Matplotlib Version: 2.0.2
  * Python Version: 2.7.13
  * Jupyter Version (if applicable):
  * Other Libraries:
cc: @RobinD42