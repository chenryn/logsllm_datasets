I am currently using NumPy version 1.12.0. Here is the code I executed and the results:

```python
import numpy as np

# Load the data from the .npy file
a = np.load('a.npy')

# Check the length of the array
print(len(a))  # Output: 1030703

# Compute the FFT for the first (len(a) - 3) elements
fft_result_partial = np.fft.fft(a[0:len(a)-3])
print(fft_result_partial)
# Output:
# array([-18765.00000000 +0.j        ,  11107.65388924+14875.98484147j,
#         -1335.17295525 +4724.62925166j, ...,
#          -386.13524067 +590.33225249j,  -1335.17295525 -4724.62925166j,
#         11107.65388924-14875.98484147j])

# Attempt to compute the FFT for the entire array
# This operation was interrupted after running for over an hour without returning a result
# fft_result_full = np.fft.fft(a)
```

The data used in this example can be found at:  
[http://home.wisewolf.org/static/a.npy](http://home.wisewolf.org/static/a.npy)

### Explanation:
- The `np.load` function loads the data from the `.npy` file into a NumPy array.
- The `len(a)` function returns the length of the array, which is 1,030,703.
- The `np.fft.fft` function is used to compute the Fast Fourier Transform (FFT) of the array. When applied to the first 1,030,700 elements (`a[0:len(a)-3]`), it completes successfully and returns the expected complex numbers.
- However, when attempting to compute the FFT for the entire array, the operation did not complete within a reasonable time (over an hour). This suggests that the full FFT computation may be too computationally intensive or there might be an issue with the data.

If you need to perform the FFT on the entire array, consider optimizing the process or using more powerful computational resources.