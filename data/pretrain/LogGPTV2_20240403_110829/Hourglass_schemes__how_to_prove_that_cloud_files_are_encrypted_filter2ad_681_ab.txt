read out data)—as they are the predominant storage
device in storage infrastructures today, they provide
one possible foundation for time-based protocols.
• An hourglass function: An hourglass function in-
volves an invertible transformation which imposes a
lower bound on the resources required to translate be-
tween coding domains, i.e., makes translation moder-
ately hard.
An example hourglass scheme. To gain intuition and
assuming a computational resource bound on the server,
we describe a simple, but somewhat impractical hourglass
scheme based on inversion of a small-image hash function.
Let F consist of n blocks, F1, F2, . . . , Fn, each of l bits. Sup-
pose that the client wishes to verify that the server applies
format-preserving encryption to F , to obtain a ciphertext G.
Let h : {0, 1}∗ → {0, 1}l denote a ﬁxed-length hash function.
Hourglass function. Consider then an hourglass
function deﬁned as follows. Transform G into H
by inverting each block of G under h; the server
computes and stores a pre-image Hi = h−1(Gi)
for every i ∈ {1, . . . , n}.1
A well-behaving server, then, stores the encapsulated ci-
phertext H (not the ciphertext G, nor, of course, the plain-
text F ). Note that recovery of G (and then F ) from H is
very practical for this hourglass function, by simply com-
puting the hash values Gi = h(Hi) for i ∈ [1, n].
Veriﬁcation of storage of H in the hourglass scheme here
will rely on the fact that even for fairly small values of l
(e.g., 35-bit or 40-bit blocks), the transformation from Gi to
Hi is computationally costly on average. In particular, we
might appeal to a simple, concrete resource bound, such as
the following:
Resource bound. The server can perform at most
2l−1 executions of h in time τ .
To verify that a server stores H, then, the client simply
selects a random block index i, and challenges the server to
furnish Hi. An honest server that has stored H just retrieves
and serves Hi—a quick operation. But a cheating server that
1Obviously, the server tries to ﬁnd the shortest possible such
pre-image, which will usually be of length close to l.
267has stored only the plaintext ﬁle F , has to compute Hi on
the ﬂy. It must compute ciphertext block Gi and then per-
form a costly computation of Hi which, on average, takes
time τ . In other words, because inversion of h is a moder-
ately hard computational task, it will delay the response of
a cheating server, by τ on average. A client can therefore use
the response time, r, to distinguish an honest server (r < τ )
from a dishonest one (r ≥ τ ).
While feasible, this hash-function-based hourglass func-
tion has some unattractive properties. First, a pre-image Hi
will, on average, be a little larger than its image Gi, resulting
in some degree of message expansion in the transformation
from G to H. Additionally, the full transformation from G
to H is quite costly, as it requires n inversions of h. And a
cheating server can easily parallelize the inversion of h.
The function h used here is a (compressed-range) one-
way function. Later in the paper, we consider the use of
a trapdoor one-way function, which removes these various
drawbacks.
Alternative approaches. Trusted computing oﬀers an al-
ternative approach to address the problem of verifying that
data at rest is encrypted. With trusted computing enabled
hardware, the client could require that the cloud provider
place all of its code that needs to access unencrypted data
inside of a trusted computing environment so that the client
can remotely attest that the code is correctly encrypting
data at rest. The main problem with this approach is that
trusted computing can easily be circumvented because the
cloud provider has physical access to the machines. Addi-
tionally, it would be diﬃcult and costly for a cloud provider
to move all of their cloud services into a trusted environ-
ment, especially since a large portion of their existing hard-
ware might not be capable of ensuring trusted execution.
2.2 Framework description
Let n denote the number of ﬁle blocks in a target ﬁle
F , where each block belongs in a domain B. We refer to
this original format as raw. We let Fi denote block i of F ,
and l(cid:48) denote the length (in bits) of a ﬁle block, i.e., Fi ∈
B = {0, 1}l(cid:48)
. We let G ∈ Ln be the block-by-block encoded
ﬁle, where blocks belong in a domain L, and let l denote
the length (in bits) of an encoded ﬁle block, i.e., Gi ∈ L =
{0, 1}l. For simplicity, we also let l be the security parameter
for our system (typically l = 128).
Framework encoding. First, the tenant speciﬁes as input
to the hourglass scheme an encoding algorithm deﬁned by
three operations:
• keygen-enc R→ κ1: A key-generation function that out-
puts a secret key κ1. To support publicly computable
encodings, κ1 could be the null string.
• encode(κ1, F ) → G: An encoding mapping that takes
a raw ﬁle F ∈ Bn and transforms it block by block
into an encoded ﬁle G ∈ Ln. We assume, as detailed in
Appendix B, that G is uniformly distributed in Ln.
• decode(κ1, G) → F : A decoding mapping that takes
an encoded ﬁle G ∈ Ln and transforms it into a raw
ﬁle F ∈ Bn.
While our framework is general in supporting arbitrary
encoding algorithms, we detail three speciﬁc encodings in
Appendix A.
Framework operations. Then, an hourglass scheme HG is
employed that consists of the following set of operations:
• An encoding algorithm given by keygen-enc, encode,
decode.
• keygen-hg R→ (κ2, κ3): A key generation function that
yields l-bit keys κ2, κ3 ∈ L, where κ3 is optional (only
used in our RSA-based construction in Section 4.3). If
κ3 is not used in a particular construction, its value is
set to the null string.
• hourglass(κ2, κ3, G) → H: An hourglass function en-
capsulates an encoded ﬁle G ∈ Ln in a format suitable
for proof of correct application of encode. The encapsu-
lation produces H ∈ Dn (where in general |D| ≥ |L|).
The function hourglass may be deterministic or prob-
abilistic.
• reverse-hourglass(κ2, H) → G: The inverse of the hour-
glass function reverses hourglass, reverting a storage-
formatted ﬁle H ∈ Dn back to an encoded ﬁle G ∈ Ln.
• challenge R→ c: A function that generates a challenge.
For simplicity, we assume a randomly selected block
index c ∈ {1, . . . , n} of H.
• respond(H, c) → r: An algorithm that operates over
an hourglass-encapsulated ﬁle H ∈ Dn to respond to
a challenge c ∈ {1, . . . , n}. For simplicity, we assume
r ∈ D.
• verify(H, c, r): Veriﬁes the response to a challenge c ∈
{1, . . . , n}. For simplicity, we assume that the veri-
ﬁer knows H. In practice, of course, this requirement
can be easily relaxed by, e.g., having the veriﬁer MAC
blocks of H or maintain a Merkle tree over blocks of
H (i.e., an authentication tree which itself can be out-
sourced to the cloud).
We say that an hourglass scheme HG is valid if for all keys
produced as output by keygen-enc R→ κ1 and keygen-hg R→
(κ2, κ3) the following three conditions hold with overwhelm-
ing probability in l:
1. decode(κ1, encode(κ1, F )) = F ;
2. reverse-hourglass(κ2, hourglass(κ2, κ3, G)) = G;
3. For all c ← challenge, verify(H, c, respond(H, c)) = 1.
Note that the second condition above implies that G can
be eﬃciently extracted from the encapsulated ﬁle H, i.e., G
can be recovered from H. Thus, veriﬁcation (by the client)
of challenged blocks of H implies that H is stored (by the
cloud) and that, thus, G is recoverable.
Appendix B presents the formal security deﬁnitions for
hourglass schemes. While an honest server will store repre-
sentation H in its storage, intuitively, the goal of an adver-
sarial server is to construct storage H(cid:48) with two properties:
(1) The adversary can respond to a large fraction of client
challenges by accessing blocks of H(cid:48); and (2) The adversary
leaks parts of the plaintext ﬁle F in H(cid:48). We make a simplify-
ing assumption about the adversary in the security analysis
of the three constructions described in Section 4. This parti-
tioning assumption detailed in Appendix B requires that the
268F (cid:107) H(cid:48)
adversary separates its storage H(cid:48) into H(cid:48) = (H(cid:48)
G),
where H(cid:48)
F is derived from the plaintext ﬁle F (representing
what the adversary leaks about ﬁle F ) and H(cid:48)
G is computed
over G (and used to answer client challenges). In our the-
orem statements in Section 4 we give lower bounds on the
amount of extra storage s(cid:48) = |HG| imposed on a cheating
server trying to leak part of the plaintext ﬁle and to achieve
success probability α in the challenge-response protocol.
We give three concrete instantiations of hourglass func-
tions in Section 4 along with their security analysis. (These
are based on either storage bounds—in particular bounds on
hard drive access time and throughput—or computational
bounds). But ﬁrst, we next show how an encoding algorithm
and an hourglass function with appropriate properties can
be combined in a generic protocol, thus overall supporting
a rich class of hourglass schemes.
3. GENERIC HOURGLASS PROTOCOL
To review our discussion thus far, the goal of an hour-
glass protocol is to provide assurance to a client that its
data outsourced to a server is stored in a desired, encoded
format G. The encoded format is computed by applying the
encode algorithm to the original ﬁle F . For most ﬁle encod-
ings of interest (e.g., encryption, watermarking), the output
of encode is fast to compute given ﬁle F . As such, the client
cannot challenge the server directly on encoding G to ensure
the application of encode to F : The server can store ﬁle F
and compute G on-the-ﬂy when challenged!
To resolve this issue, an hourglass protocol encapsulates
the encoding G into another format H suitable for remote
format veriﬁcation. The transformation from G to H is per-
formed with an hourglass function that enforces a resource
bound (e.g., minimum amount of time, storage or computa-
tion). This function is easily reversible: Knowledge of H im-
plies that G can be easily retrieved and, in turn, that blocks
of the original ﬁle F can only be obtained with access to
the decode algorithm. To ensure storage of format H, the
client challenges the server on randomly selected blocks of
H. By the correctness and speed of the response, the client
gets guarantees about the fact that the server stores the ﬁle
in hourglass-encapsulated format H.
Accordingly, our framework considers a generic hourglass
protocol that consists of three phases. Phase 1 performs the
ﬁle encoding, where the ﬁle F is encoded into G by the server
and a proof of correct encoding is generated and sent back
to the client. Phase 2 performs the hourglass encapsulation,
where the hourglass transformation is applied to G to obtain
ﬁle H, stored by the server. Finally, Phase 3 performs for-
mat checking, where the client checks that the server indeed
stores H by challenging the server with randomly chosen
blocks of H. The ﬁrst two phases are executed only once,
whereas the third one is executed periodically, in unpre-
dicted (e.g., randomized) intervals. Below we elaborate on
each one of the three phases of our generic hourglass protocol
which is formally presented in Figure 1.
3.1 Phase 1: ﬁle encoding
A generic hourglass protocol performs the initial trans-
formation from the original ﬁle F provided by the client to
the target encoding G using the encode algorithm. Given G,
the original ﬁle F can be retrieved using the corresponding
decode algorithm. In particular, in Phase 1 the server ap-
plies encode to the original ﬁle F (received from the client)
to obtain G. The encoding G, as well as a proof of correct
encoding, is sent to the client—G is needed by the client
in order to apply the hourglass transformation in Phase 2.
At the end of this phase, the client is assured (with high
probability) that encode has been applied correctly to F .
Overall, by appropriately instantiating this pair of algo-
rithms (encode, decode), our framework can support proto-
cols for ensuring storage of the following three ﬁle encod-
ings (these are detailed in Appendix A):
1. Encryption: We present a protocol by which a client
(or third party, e.g., auditor) can verify that a storage
provider stores a ﬁle F in encrypted form. As men-
tioned before, we consider a natural (and technically
challenging) model in which the provider manages the
encryption key, and never divulges it to the veriﬁer.
(This protocol is the main focus of the paper.)
2. Watermarking: We show how a server can prove that
a ﬁle F is encoded with an embedded provenance tag
τ : If F is leaked, τ identiﬁes the server as the source,
and thus the responsible/liable entity. We describe an
encoding such that it is infeasible to learn F without
learning τ , i.e., learning the ﬁle implies learning its
provenance tag. The major challenge in implementing
an hourglass scheme for this encoding is enabling the
server to prove to the client that τ is embedded in F
without revealing τ itself. This is important, as a client
(or third party) that learns τ could frame the storage
provider, falsely furnishing τ as evidence that F has
leaked.
3. File bindings: We show how a server can prove that
a pair of ﬁles (F1, F2) are stored in such a way that
retrieval of one ﬁle implies retrieval of the other. For
instance, F1 might be a piece of software and F2 an
accompanying license agreement: Binding the two to-
gether ensures that any entity retrieving F1 also gets
F2 and thus cannot claim failure to receive critical legal
information governing software usage.
Above we highlight only three concrete encodings that are
useful in practice, but these applications are by no means ex-
haustive. They just represent examples of ﬁle encodings for
which we can construct hourglass protocols. We believe an
interesting area of research is ﬁnding other classes of encod-
ings that could be embedded into an hourglass protocol.
Note that this phase involves more than just outsourc-
ing of ﬁle F to the server. While function hourglass is always
computable by the client, function encode is not always avail-
able to the client.2 We thus remove this obstacle by requir-
ing the server to send in this phase G to the client along
with a proof that G is a correct encoding. Once this proof
is veriﬁed, the client can then apply in the next phase the
hourglass transformation on G to obtain H. These protocols
appear in Appendix A.
3.2 Phase 2: hourglass encapsulation
The hourglass protocol additionally performs the trans-
formation from G to the hourglass format H that involves
applying the hourglass function hourglass on the encoded ﬁle
G. In particular, in Phase 2 the client and, in some cases,
2Recall that in the case of proving correct at-rest ﬁle en-
cryption, the client does not know the ﬁle encryption key.
269Client / Veriﬁer
Server / Prover
Phase 1: Generate ﬁle encoding
Input: ﬁle F = F1 . . . Fn
F−→ κ ← keygen-enc
G,π←−
G = encode(κ, F )
π ← Proof correct encoding
Phase 2: Hourglass encapsulation
H ← hourglass(G)
Generate integrity checks IH on H
Phase 3: Format checking
{ci ← challenge}t
Start timer
i=1
Stop timer, τ : elapsed time
Accept iﬀ {verify(H, ci, ri) = true}t
(using IH ) [and τ ≤ T ]
i=1
IH [,H]−→
{ci}t
i=1−→
{ri}t
i=1←−
[H ← hourglass(G)]
{ri = respond(H, ci)}t
i=1
Figure 1: Generic hourglass protocol
the server applies hourglass to encoding G to compute the
encapsulation H for storage on the server. This is a block-
by-block transformation that produces n hourglass blocks
H1, . . . , Hn. Note that if hourglass does not use a secret key,
then both parties can compute H directly from G. This ob-
servation saves one round of n-block communication in our
butterﬂy and permutation constructions from Section 4.
An issue arising in the design of an hourglass protocol is
the fact that the client needs to verify responses from the