def square_sum(n):
s = 0
for i in range(n):
s += i**2
return s
""")
import py_compile
py_compile.compile("tmp.py")
下面调用decompile_pyc将tmp.pyc显示为源代码：
with open("tmp.pyc", "rb") as f:
decompile_pyc(f)
def square_sum(n):
s = 0
for i in range(n):
s += (i ** 2)
return s
llvmpy模块
LLVM是一个动态编译器，llvmpy则可以通过Python调用LLVM动态地创建机器码。直接通过llvmpy
创建机器码是比较繁琐的，例如下面的程序创建一个计算两个整数之和的函数，并调用它计算结
果。
from llvm.core import Module, Type, Builder
from llvm.ee import ExecutionEngine, GenericValue
## Create a new module with a function implementing this:
#
## int add(int a, int b) {
## return a + b;
## }
#
my_module = Module.new('my_module')
ty_int = Type.int()
ty_func = Type.function(ty_int, [ty_int, ty_int])
f_add = my_module.add_function(ty_func, "add")
f_add.args[0].name = "a"
f_add.args[1].name = "b"
bb = f_add.append_basic_block("entry")
## IRBuilder for our basic block
builder = Builder.new(bb)
tmp = builder.add(f_add.args[0], f_add.args[1], "tmp")
builder.ret(tmp)
## Create an execution engine object. This will create a JIT compiler
## on platforms that support it, or an interpreter otherwise
ee = ExecutionEngine.new(my_module)
## Each argument needs to be passed as a GenericValue object, which is a kind
## of variant
arg1 = GenericValue.int(ty_int, 100)
arg2 = GenericValue.int(ty_int, 42)
## Now let's compile and run!
retval = ee.run_function(f_add, [arg1, arg2])
## The return value is also GenericValue. Let's print it.
print "returned", retval.as_int()
returned 142
f_add就是一个动态生成的机器码函数，我们可以把它想象成C语言编译之后的函数。在上面的程序
中，我们通过ee.run_function调用此函数，而实际上我们还可以获得它的地址，然后通过Python的
ctypes模块调用它。
首先通过ee.get_pointer_to_function获得f_add函数的地址：
addr = ee.get_pointer_to_function(f_add)
addr
2975997968L
然后通过ctypes.PYFUNCTYPE创建一个函数类型：
import ctypes
f_type = ctypes.PYFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_int)
最后通过f_type将函数的地址转换为可调用的Python函数，并调用它：
f = f_type(addr)
f(100, 42)
142
numba所完成的工作就是：解析Python函数的ast语法树并加以改造，添加类型信息；将带类型信
息的ast语法树通过llvmpy动态地转换为机器码函数，然后再通过和ctypes类似的技术为机器码函数
创建包装函数供Python调用。
7.6 新一代的调试神器：PySnooper
对于每个程序开发者来说，调试几乎是必备技能。
代码写到一半卡住了，不知道这个函数执行完的返回结果是怎样的？调试一下看看
代码运行到一半报错了，什么情况？怎么跟预期的不一样？调试一下看看
调试的方法多种多样，不同的调试方法适合不同的场景和人群。
如果你是刚接触编程的小萌新，对很多工具的使用还不是很熟练，那么 print 和 log 大法好
如果你在本地（Win或者Mac）电脑上开发，那么 IDE 的图形化界面调试无疑是最适合的；
如果你在服务器上排查BUG，那么使用 PDB 进行无图形界面的调试应该是首选；
如果你要在本地进行开发，但是项目的进行需要依赖复杂的服务器环境，那么可以了解下
PyCharm 的远程调试
除了以上，今天明哥再给你介绍一款非常好用的调试工具，它能在一些场景下，大幅度提高调试的
效率， 那就是 PySnooper ，它在 Github 上已经收到了 13k 的 star，获得大家的一致好评。
有了这个工具后，就算是小萌新也可以直接无门槛上手，从此与 print 说再见~
1. 快速安装
执行下面这些命令进行安装 PySnooper
$ python3 -m pip install pysnooper
## 
$ conda install -c conda-forge pysnooper
## 
$ yay -S python-pysnooper
2. 简单案例
下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新
它，最后返回。
代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。
import pysnooper
@pysnooper.snoop()
def demo_func():
profile = {}
profile["name"] = ""
profile["age"] = 27
profile["gender"] = "male"
return profile
def main():
profile = demo_func()
main()
现在我使用终端命令行的方式来运行它
[root@iswbm ~]# python3 demo.py
Source path:... demo.py
17:52:49.624943 call 4 def demo_func():
17:52:49.625124 line 5 profile = {}
New var:....... profile = {}
17:52:49.625156 line 6 profile["name"] = ""
Modified var:.. profile = {'name': ''}
17:52:49.625207 line 7 profile["age"] = 27
Modified var:.. profile = {'name': '', 'age': 27}
17:52:49.625254 line 8 profile["gender"] = "male"
Modified var:.. profile = {'name': '', 'age': 27, 'gender': 'male'}
17:52:49.625306 line 10 return profile
17:52:49.625344 return 10 return profile
Return value:.. {'name': '', 'age': 27, 'gender': 'male'}
Elapsed time: 00:00:00.000486
可以看到 PySnooper 把函数运行的过程全部记录了下来，包括：
代码的片段、行号等信息，以及每一行代码是何时调用的？
函数内局部变量的值如何变化的？何时新增了变量，何时修改了变量。
函数的返回值是什么？
运行函数消耗了多少时间？
而作为开发者，要得到这些如此详细的调试信息，你需要做的非常简单，只要给你想要调试的函数
上带上一顶帽子（装饰器） -- @pysnooper.snoop() 即可。
3. 详细使用
2.1 重定向到日志文件
@pysnooper.snoop() 不加任何参数时，会默认将调试的信息输出到标准输出。
对于单次调试就能解决的 BUG ，这样没有什么问题，但是有一些 BUG 只有在特定的场景下才会出
现，需要你把程序放在后面跑个一段时间才能复现。
这种情况下，你可以将调试信息重定向输出到某一日志文件中，方便追溯排查。
@pysnooper.snoop(output='/var/log/debug.log')
def demo_func():
...
2.2 跟踪非局部变量值
PySnooper 是以函数为单位进行调试的，它默认只会跟踪函数体内的局部变量，若想跟踪全局变
量，可以给 @pysnooper.snoop() 加上 watch 参数
out = {"foo": "bar"}
@pysnooper.snoop(watch=('out["foo"]'))
def demo_func():
...
如此一来，PySnooper 会在 out["foo"] 值有变化时，也将其打印出来
watch 参数，接收一个可迭代对象（可以是list 或者 tuple），里面的元素为字符串表达式，什么意
思呢？看下面例子就知道了
@pysnooper.snoop(watch=('out["foo"]', 'foo.bar', 'self.foo["bar"]'))
def demo_func():
...
和 watch 相对的， pysnooper.snoop() 还可以接收一个函数 watch_explode ，表示除了这几个参
数外的其他所有全局变量都监控。
@pysnooper.snoop(watch_explode=('foo', 'bar'))
def demo_func():
...
2.3 设置跟踪函数的深度
当你使用 PySnooper 调试某个函数时，若该函数中还调用了其他函数，PySnooper 是不会傻傻的跟
踪进去的。
如果你想继续跟踪该函数中调用的其他函数，可以通过指定 depth 参数来设置跟踪深度（不指定
的话默认为 1）。
@pysnooper.snoop(depth=2)
def demo_func():
...
2.4 设置调试日志的前缀
当你在使用 PySnooper 跟踪多个函数时，调试的日志会显得杂乱无章，不方便查看。
在这种情况下，PySnooper 提供了一个参数，方便你为不同的函数设置不同的标志，方便你在查看
日志时进行区分。
@pysnooper.snoop(output="/var/log/debug.log", prefix="demo_func: ")
def demo_func():
...
效果如下
2.5 设置最大的输出长度
默认情况下，PySnooper 输出的变量和异常信息，如果超过 100 个字符，被会截断为 100 个字
符。
当然你也可以通过指定参数 进行修改
@pysnooper.snoop(max_variable_length=200
def demo_func():
...
您也可以使用max_variable_length=None它从不截断它们。
@pysnooper.snoop(max_variable_length=None
def demo_func():
...
2.6 支持多线程调试模式
PySnooper 同样支持多线程的调试，通过设置参数 thread_info=True ，它就会在日志中打印出是
在哪个线程对变量进行的修改。
@pysnooper.snoop(thread_info=True)
def demo_func():
...
效果如下
2.7 自定义对象的格式输出
pysnooper.snoop() 函数有一个参数是 custom_repr ，它接收一个元组对象。
在这个元组里，你可以指定特定类型的对象以特定格式进行输出。
这边我举个例子。
假如我要跟踪 person 这个 Person 类型的对象，由于它不是常规的 Python 基础类型，PySnooper
是无法正常输出它的信息的。
因此我在 pysnooper.snoop() 函数中设置了 custom_repr 参数，该参数的第一个元素为 Person，
第二个元素为 print_persion_obj 函数。
PySnooper 在打印对象的调试信息时，会逐个判断它是否是 Person 类型的对象，若是，就将该对
象传入 print_persion_obj 函数中，由该函数来决定如何显示这个对象的信息。
class Person:pass
def print_person_obj(obj):
return f""
@pysnooper.snoop(custom_repr=(Person, print_person_obj))
def demo_func():
...
完整的代码如下
import pysnooper
class Person:pass
def print_person_obj(obj):
return f""
@pysnooper.snoop(custom_repr=(Person, print_person_obj))
def demo_func():
person = Person()
person.name = ""
person.age = 27
person.gender = "male"
return person
def main():
profile = demo_func()
main()
运行一下，观察一下效果。
如果你要自定义格式输出的有很多个类型，那么 custom_repr 参数的值可以这么写
@pysnooper.snoop(custom_repr=((Person, print_person_obj), (numpy.ndarray, print_ndar
ray)))
def demo_func():
...
还有一点我提醒一下，元组的第一个元素可以是类型（如类名Person 或者其他基础类型 list等），
也可以是一个判断对象类型的函数。
也就是说，下面三种写法是等价的。
## 
@pysnooper.snoop(custom_repr=(Person, print_persion_obj))
def demo_func():
...
## 
def is_persion_obj(obj):
return isinstance(obj, Person)
@pysnooper.snoop(custom_repr=(is_persion_obj, print_persion_obj))
def demo_func():
...
## 
@pysnooper.snoop(custom_repr=(lambda obj: isinstance(obj, Person), print_persion_obj
))
def demo_func():
...
以上就是明哥今天给大家介绍的一款调试神器（ PySnooper ） 的详细使用手册，是不是觉得还不
错？
7.7 比open更好用、更优雅的读取文件
使用 open 函数去读取文件，似乎是所有 Python 工程师的共识。
今天明哥要给大家推荐一个比 open 更好用、更优雅的读取文件方法 -- 使用 fileinput
fileinput 是 Python 的内置模块，但我相信，不少人对它都是陌生的。今天我把 fileinput 的所有的
用法、功能进行详细的讲解，并列举了一些非常实用的案例，对于理解和使用它可以说完全没有问
题。
1. 从标准输入中读取
当你的 Python 脚本没有传入任何参数时，fileinput 默认会以 stdin 作为输入源
## demo.py
import fileinput
for line in fileinput.input():
print(line)
效果如下，不管你输入什么，程序会自动读取并再打印一次，像个复读机似的。
$ python demo.py
hello
hello
python
python
2. 单独打开一个文件
单独打开一个文件，只需要在 files 中输入一个文件名即可
import fileinput
with fileinput.input(files=('a.txt',)) as file:
for line in file:
print(f'{fileinput.filename()} {fileinput.lineno()}: {line}', end='')
其中 a.txt 的内容如下
hello
world
执行后就会输出如下
$ python demo.py
a.txt 1: hello
a.txt 2: world
需要说明的一点是， fileinput.input() 默认使用 mode='r' 的模式读取文件，如果你的文件是
二进制的，可以使用 mode='rb' 模式。fileinput 有且仅有这两种读取模式。
3. 批量打开多个文件
从上面的例子也可以看到，我在 fileinput.input 函数中传入了 files 参数，它接收一个包含多
个文件名的列表或元组，传入一个就是读取一个文件，传入多件就是读取多个文件。
import fileinput
with fileinput.input(files=('a.txt', 'b.txt')) as file:
for line in file:
print(f'{fileinput.filename()} {fileinput.lineno()}: {line}', end='')
a.txt 和 b.txt 的内容分别是
$ cat a.txt
hello
world
$ cat b.txt
hello
python
运行后输出结果如下，由于 a.txt 和 b.txt 的内容被整合成一个文件对象 file ，因此
fileinput.lineno() 只有在读取一个文件时，才是原文件中真实的行号。
$ python demo.py
a.txt 1: hello
a.txt 2: world
b.txt 3: hello
b.txt 4: python
如果想要在读取多个文件的时候，也能读取原文件的真实行号，可以使用
fileinput.filelineno() 方法
import fileinput
with fileinput.input(files=('a.txt', 'b.txt')) as file:
for line in file:
print(f'{fileinput.filename()} {fileinput.filelineno()}: {line}', end='')
运行后，输出如下
$ python demo.py
a.txt 1: hello
a.txt 2: world