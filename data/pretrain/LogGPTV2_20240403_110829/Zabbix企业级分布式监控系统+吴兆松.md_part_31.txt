Priority
Age
OvervevISettings
enZabbix
图10-17
gig>tec Zabbix Notifier: Settings
ZabbixBase
http//19216815326/zabbix
ZabbixUser
admin
ZabbixPass.
Update Interval (s)
60
Play Sound
YesNo
SaveCancel
Overview|Setings|OpenZabbix
图10-18
注：图10-18的ZabbixBase文本框中的内容为访问的路径。
249
---
## Page 266
Zabbix企业级分布式监控系统
K
192.168.153.26/zab
/dashboard.php
ZABBIX
laWel
Parameter
图10-19
iet/ikejjbmpddnkaeejokgifioccbcijfo/related
gig>tecZabbixNotifier:Overview
System
Description
Priority
Age
Zabbix server
Slave isstopped onZabbix server
High
31d.3h.5m
Zabbix server
Zabbix discoverer processesmore than75%busy
Average
51d.2h.53m
Oveniew|Settings| Open Zabbix
图10-20
不同的告警等级，其颜色不同，而且告警会有声音提示。使用ZabbixNotifie
插件的不足之处是需要打开Chrome浏览器。
10.6
数据图断图
在使用Zabbix的过程中，某些场合会出现图像数据无法完整显示的情况，如
图10-21所示，原因可能有以下几种。
805
40
20
最新
最小
平均
最大
cPU idle time
[平均]
91.09
3.51
87.45
93.41
cPU user time
[平均]
6.495
3.03
6.6
36.27
CPU systen time
[平均]
2615
2.33
5.89
33.25
cpu iowait time
[平均]
0.0086
0
5200
0.35
cPUnice time
[平均]
0
05
0
0
cPU interrupt time
[平均]
0.045
0.045
0.15
28
cPU softirq time
0.24
0.19
1.08
23.42
[平均]
cPU steal time
[平均]
05
40
05
05
图10-21
250
---
## Page 267
第10章使用的经验和技巧
·系统负载高。
·TCP连接数过多。
·网络问题。
·无法获取到数据。
·数据库无法存储数据。
对这些故障的处理方法是对系统进行调优。有关的内容请读者参考第12章。
251
---
## Page 268
第11章监控案例
本章将介绍Zabbix监控的大量实例，通过这些实例的学习，读者可以更深入
地理解Zabbix强大的自定义功能。希望读者通过本章的学习，做到举一反三，能
更好地应用Zabbix来监控自己的业务。
11.1监控TCP连接数
在服务器的性能监控中，有一项很重要的指标，即TCP的连接状态。从TCP
的连接状态中可以看到网络的连接情况、服务器的压力情况，对服务器的并发有
一个很好的直观反应，所以监控显得特别重要。
对TCP的监控可以采用ss、netstat、/proc/net/tcp这三个不同的方法来实现，
从性能上说，ss 是最快的，按照实际经验，netstat在并发数高于2万个的情况下
会出现严重的卡顿现象，如果用netstat来采集数据，会出现在高并发的情况下无
法采集到数据的情况，从而使监控造成数据无法采集的情况出现。
（1）ss命令
s%s\n",a,S[a]}}'
（2）netstat命令
f"%11-s %s\n", a,S[a] )}'
（3）/proc/net/tcp文件
监控TCP连接状态，可读取/proc/net/tcp文件，其中第四列为TCP连接的各
个状态，如图11-1所示。
roe/netreep
st
图11-1
各状态代表的意思如下。
OO"ERROR STATUS"
01"TCP_ESTABLISHED",
---
## Page 269
第11章
监控案例
02
"TCP_SYN_SENT",
03
"TCP SYN RECV",
04
"TCPFIN WAIT1",
05
"TCPFINWAIT2",
06
"TCP TIMEWAIT",
07
"TCP_CLOSE",
08
"TCP_CLOSE_WAIT"
09
"TCP LAST ACK",
OA
"TCP LISTEN",
OB
"TCPCLOSING"
（4）各种方法的性能比较
netstat运行的时间为0.398s，如图11-2所示。
anlawk
TIMEWAIT
CLOSE _WAIT11
ESTABLISHED 2400
SYN RECV
LAST_ACK
LISTEN
34
0m0.398s
0m0.061s
Om0.3679
图11-2
ss运行的时间为0.035s，如图11-3所示。
root@h
1#tim
ess state alllawk {++S[s1]] END (for（a in S) (printf “s1l-s &s\n",a,S[a])]
LAST-ACK
SYN-RECV
ESTAB
2405
TIME-WAIT
CLOSE-WAIT
11
LISTEN
34
real
0m0.0353
user
0m0.0143
ay3
0m0.020s
图11-3
/proc/net/tcp运行的时间为4.034s，最慢，如图11-4所示。
2401
26
0m4.0343
user
0m0.059s
aya
0m3.9898
图11-4
253
---
## Page 270
Zabbix企业级分布式监控系统
当然，以上的测试与使用awk有关系。另外，还与并发数量有很大关系，当
前并发数为2400个左右。
这里以/proc/net/tcp为例，展示如何监控TCP的连接数（如果使用ss命令，
其实现过程与之类似）。
shell# vim /etc/zabbix/zabbix_agentd.conf.d/tcp_connect.conf
userparameter=tcp_connect.errorstatus,awk'($4 =="o0")(print $4)
/proc/net/tcplawk'{++S[$NF]}END{for(ain S){printf"%s",S[a])}'
userparameter=tcp_connect.established,awk'($4 =="01") (print $4)
/proc/net/tcplawk{++S[$NF]}END(for(ain S){printf"s",S[a]}}'
userparameter=tcp_connect.synsent,awk
'($4=="02")(print$4}
userparameter=tcp_connect.synrecv,awk
（$4=="03"）{print$4}
/proc/net/tcplawk{++S[$NF]) END {for(a in S) (printf "%s", S[a])}*
userparameter=tcp_connect.finwaitl,awk
($4 =="04"){print $4}
/proc/net/tcplawk'{++S[$NF]) END (for(a
inS)
(printf "%s", S[a]}}'
userparameter=tcp_connect.finwait2,awk
'($4 == "05") {print $4}
/proc/net/tcplawk'{++S[$NF]} END (for(a
(printf"%s", S[a]}}'
inS）
userparameter=tcp connect.timewait,awk
($4 =="06") (print $4)
/proc/net/tcplawk'{++S[$NF]}END(for(a
in S)(printf"%s",S[a]}}'
userparameter=tcp_connect.close,awk
'($4=="07")(print$4）}'
/proc/net/tcplawk'{++S[$NF]}END(for(a
inS)
{printf“%s",S[a]}}'
userparameter=tcp_connect.closing,awk
（$4=="0B"）(print $4}
]) ( ) a (++), 
userparameter=tcp_connect.close wait,awk
（$4 =="08")(print $4)
]) ( (++
'($4==
"09") (print $4}
userparameter=tcp_connect.last_ack,awk
'/proc/net/tcplawk '{++S[$NF]} END (for(a in S) (printf "%s", S[a]}}'
userparameter=tcp connect.listen,awk
'($4 =="0A") (print $4}′
 ( +
在Web界面中添加Key，如图11-5所示。
wizardNane
Triogers
Key
Intery
tcp_connect.closewait
tcp_connect.closewait
120
tcp_connect.established
lect.established
120
tcp connect.finwait1
120
tcp connect.finwait2
tcp_connect.finwait2
120
口
tcp connectlisten
tcp_connect.isten
120
tc connectsynrecy
tcp_connect.synrecv
120
tcp connect.synsent
120
120
口
120
图11-5
监控Nginx
11.2
在nginx.conf中添加如下内容。
254
---
## Page 271
第11章监控案例
server{
listen 127.0.0.1:80;
server_name 127.0.0.1;
location /nginxstatus
stub_status on;
access_log off;
a11ow 127.0.0.1;
a11ow192.168.11.0/24；#这里是允许的1P地址
deny all;
如果Nginx通过Puppet、SaltStack等配置管理工具进行统一管理，则需要在
模板中统一加上这段配置。
关于Nginx状态的更多解释，请读者参考以下网址中的内容。
http://nginx.org/en/docs/http/ngx_http_status_module.html#status
监控Nginx的脚本语句如下。
shell# vim /etc/zabbix/scripts/nginx_status
#!/bin/bash
# function:monitor nginx from zabbix
#License: GPL
# mail:PI:EMAIL
# version 1.0 date:2012-12-09
# version 1.0 date:2013-01-15
# Functions to return nginx stats
function active {
ve/(print $3)'
function reading 
curl
din/ {print $2}'
function writing {
ing/ {print $4}
了
function waiting {
curl
1 "http://127.0.0.1/nginxstatus" 1 awk '/Wait
ing/ (print $6)
function accepts {
curl
lawk'(print $l}'
function handled {
curl"http://127.0.0.1/nginxstatus" 1 awk NR==3
lawk'(print $2}
function requestst
255
---
## Page 272
Zabbix企业级分布式监控系统
curl"http://127.0.0.1/nginxstatus"1awk NR==31
awk'(print$3)'
case "s1" in
active)
active
reading)
reading
writing)
writing
waiting)
waiting
accepts)
accepts
handled)
handled
requests)
requests
*)
echo "Usage: $0 (nginx_site_dicovery)"
[   o  
|waiting[host]laccepts[host]lhandled [host]lrequests[host]}"
esac
Key的配置文件如下：
shell# vim /etc/zabbix/zabbix_agentd.conf.d/
monitor_ningx.conf
UserParameter=nginx.accepts,/etc/zabbix/scripts/nginx_status accepts
UserParameter=nginx.handled,/etc/zabbix/scripts/nginx_status handled
UserParameter=nginx.requests,/etc/zabbix/scripts/nginx_status requests
UserParameter=nginx.connections.active,/etc/zabbix/scripts/nginx
status active
UserParameter=nginx.connections.reading,/etc/zabbix/scripts/ngin
x_status reading
UserParameter=nginx.connections.writing,/etc/zabbix/scripts/ngin
x_status writing
UserParameter=nginx.connections.waiting,/etc/zabbix/scripts/ngin
x status waiting
11.3!
监控PHP-FPM
PHP-FPM工作模式通常与Nginx结合使用。
修改/etc/php-fpm.conf的语句如下。
256
---
## Page 273
第11章监控案例
shell# vim /etc/php-fpm.conf
pm.status_path =/phpfpmstatus
shell#/etc/init.d/php-fpm restart
修改/etc/nginx/nginx.conf 的配置文件，通过Nginx访问PHP-FPM的状态。
server
listen 127.0.0.1:80;
server_name 127.0.0.1;
location /nginxstatus 
stub_status on;
access_log off;
al1ow 127.0.0.1;
deny all;
location~~/(phpfpmstatus)s(
include fastcgi_params;
fastcgi_pass unix:/tmp/fpm.sock;
fastcgi_param SCRIPT_FILENAME Sfastcgi_script_name;
上
PHP-FPM监控的脚本语句如下：
shell# vim /etc/zabbix/scripts/monitor_phpfpm_status
#!/bin/bash
# function:monitor php-fpm status from zabbix
#License:GPL
# mail:PI:EMAIL
#date:2013-05-30
source /etc/bashrc >/dev/null 2>&l
source /etc/profile >/dev/null 2>&1
LOG_FILE=/var/log/zabbix/phpfpmstatus.log
curl http://127.0.0.1/phpfpmstatus >$(L0G_FILE)
pool() (
awk'/pool/ (print $NF)' $(LOG FILE)
process_manager() {
start_since(){
awk '/start since:/ (print $NF)' ${LOG_FILE)
accepted_conn(){
listen_queue(){
awk'/listen queue:/(print $NF)' ${LOG_FILE)
max_listen_queue(){
257
---
## Page 274