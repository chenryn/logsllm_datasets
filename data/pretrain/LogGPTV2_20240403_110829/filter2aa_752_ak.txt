pthread_create  
之后，主线程不断输出 o 到标准错误输出。 
列表 4.1 (thread-create.c) 创建线程 
#include  
#include  
/* 打印 x 到错误输出。没有使用参数。不返回数据。*/ 
void* print_xs (void* unused) 
{ 
  while (1) 
    fputc ('x', stderr); 
  return NULL; 
} 
/* 主程序 */ 
int main () 
{ 
  pthread_t thread_id; 
  /* 传教新线程。新线程将执行 print_xs 函数。*/ 
  pthread_create (&thread_id, NULL, *print_xs, NULL); 
  /* 不断输出 o 到标准错误输出。*/ 
  while (1) 
    fputc ('o', stderr); 
  return 0; 
} 
使用以下命令编译链接这个程序： 
% cc -o thread-create thread-create.c -lpthread 
试着执行看看会发生什么。注意这个没有规律的 x 和 o 的交替输出，这表示 Linux 不
断调度两个线程。 
在一般状况下，一个线程有两种退出方式。一种方式，如先前所示，是从线程函数中返
回以退出线程。线程函数的返回值也被作为线程的返回值。另一种方式则是线程显式调用 
pthread_exit。这个函数可以直接在线程函数中调用，也可以在其它直接、间接被线程函数
调用的函数中调用。调用 pthread_exit 的参数就是线程的返回值。 
4.1.1 给线程传递数据 
线程参数提供了一种为新创建的线程传递数据的简便方式。因为参数是 void*，你无法
www.AdvancedLinuxProgramming.com 
51
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
通过参数本身直接传递大量数据，而应使用线程参数传递一个指向某个数据结构或数组的指
针。一个常用的技巧是给线程函数定义一个结构以包含线程函数所期待的实际参数序列。 
利用线程参数可以很轻易地重用一个线程函数创建许多线程。所有这些线程可以针对不
同的数据执行相同的操作。 
列表 4.2 中的程序与前一个例子非常相似。这个程序会创建两个新线程，一个输出 x
而另一个输出 o。不同于之前的不停输出，每个线程输出固定的字符数之后就从线程函数中
返回以退出线程。同一个函数 char_print 在两个线程中均被执行，但是程序为每个线程指
定不同的 struct char_print-parms 实例作为参数。 
代码列表 4.2 (thread-create2) 创建两个线程 
#include  
#include  
/* print_function 的参数 */ 
struct char_print_parms 
{ 
  /* 用于输出的字符 */ 
  char character; 
  /* 输出的次数 */ 
  int count; 
}; 
/* 按照 PARAMETERS 提供的数据，输出一定数量的字符到 stderr。 
    PARAMETERS 是一个指向 struct char_print_parms 的指针 */ 
void* char_print (void* parameters) 
{ 
  /* 将参数指针转换为正确的类型 */ 
  struct char_print_parms* p = (struct char_print_parms*) parameters; 
  int i; 
  for (i = 0; i count; ++i) 
    fputc (p->character, stderr); 
  return NULL; 
} 
/* 主程序 */ 
int main () 
{ 
  pthread_t thread1_id; 
  pthread_t thread2_id; 
www.AdvancedLinuxProgramming.com 
52
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  struct char_print_parms thread1_args; 
  struct char_print_parms thread2_ars; 
  /* 创建一个线程输出 30000 个 x */ 
  thread1_args.character = 'x'; 
  thread1_args.count = 30000; 
  pthread_create (&thread1_id, NULL, &char_print, &thread1_args); 
  /* 创建一个线程输出 20000 个 o */ 
  thread2_args.character = 'o'; 
  thread2_args.count = 20000; 
  pthread_create (&thread2_id, NULL, &char_print, &thread2_args); 
  return 0; 
} 
不过，且慢！列表 4.2 中的程序有一个严重的错误。主线程（就是执行 main 函数的
线程）将线程参数结构（thread1_args 和 thread2_args）创建为局部变量，然后将指向它们
的指针传递给创建的线程。如何防止 Linux 调度这三个线程，使 main 在另外两个线程结束
之前结束？没有办法！一旦这个情况发生，包含线程参数结构的内存将在被两个线程访问的
同时被释放。 
4.2.2 等待线程 (原文：Joining Threads) 
一个解决办法是强迫 main 函数等待另外两个线程的结束。我们需要一个类似 wait 的函
数，但是等待的是线程而不是进程。这个函数是 pthread_join。它接受两个参数：线程 ID，
和一个指向 void*类型变量的指针，用于接收线程的返回值。如果你对线程的返回值不感兴
趣，则将 NULL 作为第二个参数。 
前面提到，列表 4.2 中的程序有错误；而现在列表 4.3 展示了正确的版本。在这个版本
中，main 在输出 x 和 o 的两个线程完成——因此不会再引用参数——之后才会退出。 
列表 4.3 主函数修订版 thread-create2.c 
int main () 
{ 
  pthread_t thread1_id; 
  pthread_t thread2_id; 
  struct char_print_parms thread1_args; 
  struct char_print_parms thread2_args; 
  /* 创建一个输出 30000 个 x 的线程 */ 
  hread1_args.character = 'x'; 
  thread1_args.count = 30000; 
  prhread_create (&thread1_id, NULL, &char_print, &thread1_args); 
www.AdvancedLinuxProgramming.com 
53
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  /* 创建一个输出 20000 个 o 的线程 */ 
  thread2_args.character = 'o'; 
  thread2_args.count = 20000; 
  pthread_create (&thread2_id, NULL, &char_print, &thread2_args); 
  /* 确保第一个线程结束 */ 
  pthread_join (thread1_id, NULL); 
  /* 确保第二个线程结束 */ 
  pthread_join (thread2_id, NULL); 
  /* 现在我们可以安全地返回 */ 
  return 0; 
} 
这个故事的教训：一旦你将对某个数据变量的引用传递给某个线程，务必确保这个变量
在不会被释放（甚至在其它线程中也不行！），直到你确定这个线程不会再使用它。这对于局
部变量（当生命期结束的时候自动释放）和堆上分配的对象（通过 free 或者 C++的 delete
手工释放）同样适用。 
4.1.3 线程返回值 
如果传递给pthread_join的第二个参数不是 NULL，则线程返回值会被存储在这个指针
指向的内存空间中。线程返回值，与线程变量一样，也是void*类型。如果你想要返回一个
int或者其它小数字，你可以简单地把这个数值强制转换成void*指针并返回，并且在调用
pthread_join之后把得到的结果转换回相应的类型
１。 
列表 4.4 中的程序在一个单独线程中计算第 n 个质数。这个线程会将得到的质数作为
返回值传回主线程。与此同时，主线程可以执行其它的代码。注意，compute_prime 函数中
使用的连续进行除法的算法是非常低效的；如果你需要在你的程序中计算很多质数，请参考
有关数值算法的书。 
列表 4.4 (primes.c) 在线程中计算质数 
#include  
#include  
/*（非常低效地）计算连续的质数。返回第 N 个质数。N 是由 *ARG 指向的参数。*/ 
void* compute_prime (void* arg) 
{ 
  int candidate = 2; 
  int n = *((int*) arg); 
www.AdvancedLinuxProgramming.com 
54
１ 注意，这样的代码是不可移植的，并且你必须自己保证所传递的数据类型在与 void* 之间来回转换不
会导致位的丢失。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  while (1) { 
    int factor; 
    int is_prime = 1; 
    /*用连续除法检测是否为质数。*/ 
    for (factor = 2; factor < candidate; ++factor) 
      if (candidate % factor == 0) { 
        is_prime = 0; 
        break; 
      } 
    /*这个质数是我们寻找的么？ */ 
    if (is_prime) { 
      if (--n == 0) 
        /*将所求的质数作为线程返回值传回。*/ 
        return (void*) candidate; 
    } 
    ++candidate; 
  } 
  return NULL; 
} 
int main () 
{ 
  pthread_t thread; 
  int which_prime = 5000; 
  int prime; 
  /*开始计算线程，求取第 5000 个质数。*/ 
  pthread_create (&thread, NULL, &compute_prime, &which_prime); 
  /*在这里做其它的工作……*/ 
  /*等待计算线程的结束，并且取得结果。*/ 
  pthread_join (thread, (void*) &prime); 
  /*输出所求得的最大质数。*/ 
  printf("The %dth prime number is %d.\n", which_prime, prime); 
  return 0; 
} 
4.1.4 关于线程 ID 的更多信息 
有时候，一段代码需要确定是哪个线程正在执行到这里。可以通过 pthread_self 函数获
取调用线程 ID。所得到的线程 ID 可以用 pthread_equal 函数与其它线程 ID 进行比较。 
这些函数可以用于检测当前线程 ID 是否为一特定线程 ID。例如，一个线程利用
pthread_join 等待自身是错误的。
（在这种情况下，pthread_join 会返回错误码 EDEADLK。）
www.AdvancedLinuxProgramming.com 
55
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 