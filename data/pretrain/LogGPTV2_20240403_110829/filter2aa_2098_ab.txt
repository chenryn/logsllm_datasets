this case, decimal values such as “0.01”, “0.51”, or “0.996” can be tested to see if they have any effects 
on the final price. This method can be more dangerous when used on items which are not normally 
manually reviewed. 
2.2.4 Shipping Address and Post Method Manipulation 
Changing the shipping address and the posting method may change the cost of items. Therefore, it is 
important to test this manipulation during the last stage of the payment process to check whether it 
changes the cost. It is sometimes possible to change the shipping address after placing an order and 
before receiving the invoice, by changing the user’s profile address, so this needs to be tested as well. 
This can also be a TOCTOU issue – see the section above. 
The tax value can also be based on the address. This should be tested to ensure that it is not easy for 
an attacker to avoid required taxes, such as VAT or import fees, by manipulating the address in the 
process. 
2.2.5 Additional Costs Manipulation 
Any additional parameter that can affect the final cost of a product, such as delivery at a specific time 
or adding a gift wrap should also be tested, to ensure it is not possible to add them for free at any 
stage of the payment process. 
2.2.6 Response Manipulation 
Sometimes application payment processes, application license checks, or in-app asset purchases can 
also be bypassed by manipulating the server’s response. This threat normally occurs when the 
application does not verify the response of a third party and the response has not been 
cryptographically signed. 
NCC Group | Page 8 
© Copyright 2019 NCC Group 
As an example, there are applications with a time-restricted trial version which do not cryptographically 
validate the server’s response upon purchasing a license. As a result, it is possible to activate the 
application without paying any money, by intercepting and manipulating its server’s response to a 
license purchase request. 
Other examples include mobile games which download user settings from a server after opening an 
app. For vulnerable applications it can be possible to manipulate the server’s response to use non-
free or locked items without paying any money. 
2.2.7 Repeating an Input Parameter Multiple Times 
This is very rare, but repeating an input parameter within a request that goes to the application or to 
the payment gateway may cause logical issues, especially when the application uses different 
codebases or different technology to parse the inputs on the server side.  
Different technologies may behave differently when they receive repetitive input parameters. This 
becomes especially important when the application sends server-side requests to other applications 
with different technologies, or when customised code to identify the inputs is in place. 
For example, the “amount” parameter was repeated in the following URL: 
/page.extension?amount=2&amount=3&amount[]=4 
This has different meaning for code written in ASP, ASP.Net, or PHP, as shown below: 
ASP  amount = 2, 3 
ASP.Net  amount = 2,3 
PHP (Apache)  amount = Array 
This test shows a classic example of HTTP parameter pollution [10]. However, repeating input 
parameters is not only limited to normal GET or POST parameters, and could be used in other 
scenarios such as repeating a number of XML tags and attributes in an XML request, or another JSON 
object within the original JSON objects. 
2.2.8 Omitting an Input Parameter or its Value 
Similar to repeating input parameters, omitting parameters may also cause logical issues when the 
application cannot find an input or sees a null character as the value. 
The following cases can be tested for sensitive inputs to bypass certain protection mechanisms: 
 Removing the value 
 Replacing the value by a null character 
 Removing the equals-sign character after the input parameter 
 Removing the input parameter completely from the request 
2.2.9 Mass Assignment, Autobinding, or Object Injection 
This occurs when an application accepts additional parameters when they are included in a request. 
This can occur in a number of languages or frameworks such as Ruby on Rails, NodeJS, Spring MVC, 
ASP NET MVC, and PHP. 
This can be problematic for a financial application when cost-related data can be manipulated.  
As an example, this was exploited on a real website in order to change the shipping address and the 
“due to” date of an invoice to make it almost unpayable as it was set to date that was far in the future.  
2.2.10 Monitor the Behaviour while Changing Parameters to Detect Logical Flaws 
Just as when testing non-financial applications, all input parameters within the payment process should 
be tested separately in order to detect logical flaws. In the example below, the payment process flow 
could be changed by manipulating certain parameters: 
NCC Group | Page 9 
© Copyright 2019 NCC Group 
In a web application, there was a parameter which was used to tell the server to use the 3D-Secure 
mechanism, which could be manipulated to circumvent this checking process. 
Sometimes web applications contain a parameter which shows the current page number or stage. A 
user may be able to bypass certain stages or pages by manipulating this parameter in the next request. 
It is not normally recommended to change more than one parameter during a limited time frame of 
testing; however, some logical flaws can be found only by changing more than one parameter at a 
time. This is useful when an application detects parameter manipulation for parameters such as the 
price field. Although it may not be feasible to test different combinations of all input parameters, it is 
recommended to modify at least a couple of the interesting inputs at the same time. In order to 
automate this test, the target field such as the price or the quantity parameter can be set to a specific 
amount that is not normally allowed, and then other parameters can be changed one by one to detect 
any possible bypass of current validation mechanisms when the application accepts the manipulated 
items. 
The following shows an example of this kind of vulnerability.  
Suppose the server-side code is as follows:  
1: 
Try 
2: 
' Delivery type should be an integer 
3: 
deliveryType = Int(deliveryType) 
4: 
' Quantity should be an integer 
5: 
quantity = Int(quantity) 
6: 
Catch ex As Exception 
7: 
' Empty catch! 
8: 
End Try 
9: 
' Continue ... 
This code makes sure that the “deliveryType” variable contains an integer number, then does the same 
thing for the “quantity” variable. Therefore, if decimal numbers are sent, they will be converted to 
integer values to prevent a security issue in which a user may pay less by changing the “quantity” 
parameter to a decimal value such as “0.1”. However, due to an empty Catch section in line 7, the 
“quantity” parameter can still contain a decimal number such as “0.1” when the “deliveryType” 
parameter contains a string such as “foobar”. In this case, the application jumps to the Catch section 
due to an error in converting a string value to an integer in line 3, before converting the “quantity” 
parameter to an integer. 
2.3 Replay Attacks (Capture-Replay) 
A replay attack occurs when all or part of a message between the client and the server are copied and 
replayed later. The parameters can also be changed when no parameter manipulation prevention 
technique such as message signature validation is present on the server side. Although a message 
can be signed or encrypted to prevent parameter manipulation, this will not stop replay of a message 
which was originally created by a trusted party. 
An application can be vulnerable to serious security issues when it trusts replayed requests without 
performing any further validation to check whether they have already been received or sent in the right 
order. 
2.3.1 Replaying the Call-back Request 
It is quite normal for payment systems to redirect the user to a specific page when a payment has 
successfully been processed or failed. Sometimes it is possible to replay a request which was for a 
successful payment, to authorise a transaction which has not yet been processed.  
For example, a website signed all the input parameters except the “transaction-id” parameter in a 
successful callback request. This parameter could be replaced with a new transaction-id to complete 
a payment without spending any money. 
NCC Group | Page 10 
© Copyright 2019 NCC Group 
2.3.2 Replaying an Encrypted Parameter 
Sometimes websites encrypt some of the important parameters without creating a mechanism to 
detect replay attacks. For example, there was a website which encrypted price values on the server 
side to include them in hidden input fields. Although direct price manipulation was not possible when 
price parameters were encrypted, it was still possible to use the encrypted price parameter of cheaper 
items to buy more expensive items (individual prices were encrypted, but not the entire request). 
2.4 Rounding Errors  
CWE: 187 and 681 
Numerical values can be stored in integer or float variables. Although float variables can contain 
numbers with some digits after the decimal point, the number of digits is still finite and based on the 
variable type and its precision. Integer variables can only contain numerical values which do not have 
any digits after the decimal point. 
When a mathematical value is stored in a numerical variable, it needs to be rounded based on the 
precision of the variable type. As a result, the new stored number can be slightly greater or smaller 
than the original value. This normal behaviour can sometimes be abused by attackers.  
2.4.1 Currency Rounding Issues 
The following images show an example of exchange rates (USD to/from GBP) in Google at one time: 
Figure 4: Exchange rate from USD to GBP in Google (rounded by two digits after the decimal point) 
Figure 5: Exchange rate from GBP to USD in Google (rounded by two digits after the decimal point) 
As Google rounds the numbers to two digits after the decimal point, someone could convert $0.20 to 
£0.14 (something like £0.1352 before rounding) and then convert £0.14 to $0.21 (something like 
£0.2070 before rounding) with a profit of $0.01. By doing this a hundred times, a dollar could be 
created. However, the following images show the exchange rate with four digits after the decimal point 
in another website at the same time (LikeForex.com): 
NCC Group | Page 11 
© Copyright 2019 NCC Group 
Figure 6: Exchange rate from USD to GBP in LikeForex (rounded by four digits after the decimal point) 
Figure 7: Exchange rate from GBP to USD in LikeForex (rounded by four digits after the decimal point) 
Figure 8: Exchange rate from GBP to USD in LikeForex (rounded by four digits after the decimal point) 
In this case, someone could exchange $0.20 for £0.1352 and then exchange £0.1352 for $0.2004, 
giving a small profit of $0.0004. These exchanges need to be executed 2500 times to create one dollar. 
If a real financial application converts different currencies to each other without a commission fee or 
without different buy and sell rates in favour of the company, this can lead to a financial gain for an 
attacker [2]. 
Shopping applications that support multiple currencies can also become victims of currency rounding 
issues, when a user can buy an item with one currency and refund it with another. 
In addition, applications in which users can deposit money into their accounts (such as banks, 
international calling card companies, or gambling websites), can become vulnerable if they support 
multiple currencies with different exchange rates and a user can withdraw the deposited money from 
their accounts immediately without any cost. Changing the currency of the account after the first 
deposit can also lead to this vulnerability. This can be more problematic when the application uses a 
different exchange rate than the payment gateway (see the “Currency Arbitrage in Deposit/Buy and 
Withdrawal/Refund” section). 
2.4.2 Generic Rounding Issues 
Rounding issues are not always limited to currency exchange. Even shopping applications which only 
support one type of currency can be affected by inconsistencies between different parts of the 
application.  
The following is an example of this type of inconsistency, which should be tested: 
The user chooses to deposit £10.0049 to a website that can hold the user’s balance; the website keeps 
this money in the database to authorise it and adds it to the user’s balance when the money transfer 
from the bank is completed. However, the banking API only accepts numbers with two digits after the 
decimal pointer based on its standard. Therefore, the application converts the money to £10.00 and 
waits for the user and the payment gateway to complete this transaction. After the transaction is 
completed, £10.00 will be deducted from the user’s bank account but £10.0049 will be deposited into 
the site’s balance. After repeating this process 205 times, the user can gain £1.00. 
The same problem arises when the monetary calculation within the same application is done by 
different applications or different codes. One example can be the use of database stored procedures 
NCC Group | Page 12 
© Copyright 2019 NCC Group 
for some of the calculations (for example money transfer) and C# code with different rules for other 
monetary calculations (such as money withdrawal or cancelling the money transfer). 
2.5 Numerical Processing 
CWE: 189 
Obviously numbers play an important role in financial systems [4]. Manipulating numbers for e-
commerce applications can lead to different logical issues and money loss in severe cases. Therefore, 
different test-cases should be designed to test numerical parameter manipulation in numerical fields 
such as price, quantity, voucher codes and so on. 
2.5.1 Negative Numbers 
Negative numbers can lead to a number of logical issues. Most of the time, they reverse the application 
logic so, for example, a user may be able to deposit “£100” by refunding “-£100” from the system. Any 
associated parameter value such as the quantity parameter can also be used for this purpose. 
As the application logic is reversed, transferring “-£100” into another account can be like transferring 
money from the target account to steal their money. The same logical issue applies to reward points 
or within gaming applications in which chips or other virtual currencies are used instead of money to 
buy virtual items. 
Although using negative numbers in different parameters does not always reverse the application logic, 
it can cause other useful logical flaws and it should always be tested. 
The “-1” value should also be tested separately, as it can have a specific meaning for the application, 
as developers often use it to initialise numerical parameters or when a condition has not been met. 
2.5.2 Decimal Numbers 
In addition to the rounding issues which were discussed earlier, decimal numbers can cause logical 
issues for applications, especially when a parameter such as quantity should only accept integer 
values. Decimal values can also be used to exploit rounding issues – see the section above. An 
additional use of decimal values is to create the same transactions multiple times when there is a 
restriction on uniqueness of items in an order; in this case, it can be used in numerical id parameters 
to point to the same item multiple times by having values such as “1234”, “1234.00”, or 
“01234.000001”, which can have the same meaning when processed by the payment system or the 
database. 
2.5.3 Large or Small Numbers 
Range validation check is an important test, which should be done using a value slightly larger or 
smaller than the maximum and minimum values (decimal numbers can be used here as well). 
2.5.4 Overflows and Underflows 
A numeric overflow or underflow can occur when a value or the result of a calculation is bigger or 
smaller than what can be stored for that variable type in the memory or the database. 
For example, in Java or C# (not VB.NET), if an integer value reaches the maximum value (“231-1 = 
2147483647”) and is incremented, an overflow occurs, without causing any error, which causes the 
value to roll-over into the smallest minimum value (“-231 = -2147483648”). These numbers can be used 
to bypass some validations. A similar behaviour may occur in other programming languages. 
2.5.5 Zero, Null, or Subnormal Numbers 
“0”, “NaN”, or null characters can be used in different contexts, especially for price manipulation. 
Non-zero numbers with magnitude smaller than the smallest normal number and which are nearly 
equal to zero, such as “0.0000000000000000000000000000000001” or “1e-50”, should also be 
tested. 
NCC Group | Page 13 
© Copyright 2019 NCC Group 
2.5.6 Exponential Notation 
Exponential notations are quite useful for bypassing length restrictions in which the numerical values 
cannot contain certain number of digits. 
For instance, when only four characters are allowed, the following notation can bypass the “9999” 
restriction as the maximum value: 
9e99 = 9 * 10^99  100 digits 
Another example is when the dot character (“.”) is not allowed to create decimal numbers: 
1e-1 = 0.1 
2.5.7 Reserved Words 
The following reserved words can be used in Java and C# applications to represent a number, which 
can cause serious logical issues: 
NaN 
Infinity 
-NaN 
-Infinity 
2.5.8 Numbers in Different Formats 
Numbers in different technologies can be written in different formats to bypass validation mechanisms. 
For instance, when sending “0” as a value is restricted, “0.00”, “-0.00”, or even “$0” or “£0” could be 
allowed. 
The following table shows response of different functions within ASP Classic (VBScript), C# .NET, 
Java, and PHP to several presentations of numbers. 
Columns Description: 
A. VBScript – ASP Classic IsNumeric function 
B. C# – .NET IsNumeric function 
C. C# – .NET Double.TryParse function + result value 
D. Java – Float.valueOf function + result value 
E. PHP – is_numeric function 
F. PHP– floatval function + result value 
String 
A 
B 
C 
D 
E 
F 
Comment 
001.0000 
True 
True 
True  
(1) 
True  
(001.0000) 
True 
True  
(1) 
Decimal 
symbol 
with 
leading 
zeros based on the regional 
settings of the server 
$10 
False 
True 