进行 demangle），可以使用c++filt命令（或者 nm的-c选项）。
另外，要从被mangle后的符号（mangled symbol）中恢复源代码中的函数原型（即
00000000400508 T_ZN3f004funcEii
# nm foo I grep foo
之后的符号名依赖于具体实现。
如，上述代码中的foo:func在 ELF 文件中被变换成下面的符号。此外，mangle
们之间没有任何区别。但是，C++函数在编译时会经过函数名变换（mangle）。例
在编译后的ELF文件中，不论是C++函数还是C函数，甚至是汇编语言函数，它
www.TopSage.com
foo::func()的 mangle过的符号
---
## Page 89
查看一下参数。可以看到，栈上传递的首先是实例地址，然后是源代码上的参数。
[HACK#11]中讲过，i386中参数基本上通过栈来传递。我们使用与刚才同样的方法
在i386中查看参数
中传递的是源代码中②对应的对象实例的地址。
的是f1的地址。让我们来继续执行。接下来 foo::func()被调用时，可以看到 rdi
可知源代码中的第1、第 2个参数是通过 rsi和rdx传递的。也就是说，rdi 中传递
在x86_64 中，C语言函数会依次使用 rdi、rsi、rdx传递参数（参见[HACK#10]),
exbf9874e0:
θxbf9874e0:
f1: Oxbf9874fc, f2: 0xbf9874f4
(gdb) run
Breakpoint 1 at 0x8048454
(gdb) b *_ZN3foo4funcEii
(gdb) i r
(gdb) c
t 1 1
3.
2
：
(gdb) i r 
(gdb) x/3 $esp+4
(gdb)c
(gdb) x/3 $esp+4
ox7fffa34c3aa0
oxfffffffc
θx2
0x7fffa34c3ab0140735933070000
0x5
0x1
Oxbf9874f4
θxbf9874fc
2
一
exfffffc
0x00000005
140735933069984
4294967292
HACK#12 函数调用时的参数传递方法（C++篇)）
www.TopSage.com
0x00002
[0000000X0
f1和f2的实例地址
1 71
---
## Page 90
75
编译环境为32位Fedora8，gcc版本为4.1.2，objdump版本为2.17.50.0.18-1。
本hack要看一看，简单的C语言程序是如何变成汇编语言的。编译下述 assemble.c，
“HACK#8Intel架构的基本知识”。
要理解汇编语言，就必须了解CPU的寄存器和机器语言。寄存器相关内容请参见
查看反汇编的输出结果
何制作测试程序和直观地学习汇编语言的方法。
汇编语言的学习的确很难下手。本hack并不会分析Intel的架构手册，而是介绍如
的汇编代码。而最终，必须在由C语言等写成的源代码中找出问题的所在。
析coredump或kernel dump时，通过gdb、crash等调试工具可以看到反汇编之后
用GCC编译源代码，就能生成由机器语言（指令代码）构成的二进制文件。在分
#13
同点是，除了参数之外，对象指针也会被传递。
本hack说明了C++程序中参数是怎样传递给被调用的函数的。与C语言函数的不
总结
72|第2章调试前的必知必会
void func(void)
int func_op（void）{return 0;}
intglobal;
#include
$cat assemble.c
global=0x5555;
val64=0xffffeeeeddddccc;
unsigned long long val64=0;
人们认为汇编语言很难理解，但对测试程序进行反汇编，就能很容易理解。
怎样学习汇编语言
www.TopSage.com
8
红网
—大和一洋
---
## Page 91
--no-show-raw-insn选项，使其不输出机器语言。
gcc 的优化选项（-00：横线、英文字母O、数字0)，还给 objdump 加上了
接下来进行编译，再用 objdump 反汇编。为了让汇编代码更容易理解，这里禁用了
了代表性的if语句②、while语句④和函数调用等。
这样赋十进制数，而是赋十六进制数，以方便阅读汇编代码。而且，main()中书写
为了让汇编代码更容易理解，该测试程序花了一些心思。①、③、③没有像“i=θ"
$ objdump -d --no-show-raw-insn assemble
$ gcc -Wall -00 assemble.c -0 assemble
int main(void)
#define MAX_wORD 16
return 0; -
for (i=0; i:
80483ca:
80483a4:
0804839e :
804844b:
8048446:
8048443:
8048441:
804843a:
8048437:
8048435:
8048432:
804842d:
804842b:
8048427:
8048423:
8048421:
804841a:
8048418:
804840a:
80483da:
80483d9:
80483d7:
80483d6:
80483d3:
80483d0:
80483cc:
80483cb:
80483c0:
80483b9:
80483b2:
80483ab:
80483al:
804839f:
804839e:
第 2 章调试前的必知必会
lea
push
mov
movzbl
mov
ysno
pushl
and 
ret
leave
movl
3
mov
%al,-0x9(%ebp)-
-0x20(%ebp,&eax,1),%eax
-0x10(%ebp),%eax —
8048452 
$0x0,-0x10(%ebp)
*%eax—
-0x8(%ebp),%eax
804839e
8048423 
$0x0,-0x10(%ebp) -
$0x1,-0x10(%ebp) -
8048427 
$0x0,-0x10(%ebp) —
8048427 
$0x1234, -0x10(%ebp)
$0xabcd,-0x10(%ebp)
$0x24,%esp
Psecx
&esp,%ebp
Psebp
-0x4(%ecx)
$oxfffffo,%esp
seax, -0x10(%ebp)
0x4(%esp),%ecx
$0x5555,0x80496c4-
$oxffffeee,-0x4(%ebp)
$0xddddccc, ~0x8(%ebp)
$0x0,-0x4(%ebp)
$0x0, -0x8(%ebp)
$0x10,sesp 
%esp,&ebp
&ebp
www.TopSage.com
0-1
?
①-3
@-2
①-1
4-2
④-1
2.3
?
?
8
L
人
while()
for()
if()
---
## Page 93
je指令在ZF 标志为1（即i=0x1234）时执行跳转。
①-1。cmpl 命令比较变量i和 θx1234，如果为真，则设置 CPU 的 ZF 寄存器为 1。
为如果“i = Ox1234”就不执行“i = θ”（③)，用 je 指令（jump equal）跳转到
-1为 cmpl 指令，比较（compare）0x1234与-0x10(%ebp）（变量i)。接下来的@-2
用if语句比较变量：cmpl指令
的=。后面也继续使用了变量 i，后面的-0x10(%ebp)就是变量i。
其后的值（0xabcd）赋给寄存器（-θx10(%ebp))，因此可知movl 指令相当于C语言
的值赋给%esp。但是，看了测试程序就能知道，开头的汇编指令（movl）是将紧随
只看◎的“mov
的地址值为0x801000，那么变量i的地址为0x801000－0x10，即0x800ff0。
-0x10(%ebp)表示从 ebp寄存器中的地址值减去 0x10 后的地址值。假如 ebp 寄存器中
oxabcd的值赋给-0x10(%ebp)。这里使用了0xabcd，可知0对应于①的变量初始化。
源代码中的带圈数字和汇编代码中的黑圈数字是一一对应的。●用movl 指令将
设置变量的值：movl 指令
须的栈知识”。
汇编代码开头几行用 push等指令生成栈帧。详细内容请参见“HACK#9调试时必
8048465:
8048462:
8048461:
8048460:
804845d:
8048458:
8048456:
8048452:
804844e:
有的反汇编器会将-θx1θ显示成θxfffffffθ。
t
%
.
addl
%esp，%ebp”是无法理解到底是将%esp 的值赋给%ebp，还是将%ebp
-0x4(%ecx),%esp
sebp
secx
$0x24,%esp
$0x0,$eax-
8048443 
$0xe,-0x10(%ebp) --
$0x1, -0x10(%ebp)
www.TopSage.com
HACK#13  怎样学习汇编语言1  75 
0-3J
@·2
 for()
78
---
## Page 94
79
存器的低8比特。由于是 char类型的变量，所以只需8 比特。
个位置上的1字节赋给 eax寄存器，也就是 word = words[i]。①-3的%al 是 eax寄
①-1将变量i 赋给 eax寄存器。至于 ①-2,其含义是将 words(-0x20%ebp)的第i(%eax)
数组操作：movzbl指令
加上*号。
调用函数指针 func_op()的代码如?所示。函数指针保存在 eax中，要像*%eax这样
函数指针调用
func()函数处理结束后，返回main()的6。
移量来表示，值写进了栈内的地址。而全局变量则使用“0x80496c4”这样的地址值
③给全局变量赋值。到目前为止的局部变量都像-0x10(%ebp)这样以 ebp 寄存器的偏
long”和64比特变量，其汇编代码就会成为这样。
处两次执行 movl 指令，赋予 32 比特的值。在 32位操作系统上定义“unsigned long
函数。
call 指令可以跳转到函数后再返回。从@可见，从处控制权转移到了func()
函数调用：call指令
①-2，用 addl 指令执行i++（@)；如果i!=θ，就不跳转到-2，而是执行@。
①-1的 cmpl 指令判断 while语句的条件表达式。如果 i = 0，则用 je指令跳转到
while语句的汇编代码
76 1 第2章调试前的必知必会
如果是int（4字节）数组，其代码如下。
件跳转到0-3，0-3比较变量i和MAX_WORD-1。如果继续，for语句则跳转到0-1,
接下来依次分析的for语句和①。首先，for语句的 i=0就是-1。接下来无条
来表示。
804842b:
8048427:
mov
mov
%eax,-0xc(%ebp}
-0x50(%ebp,%eax,4),%eax
www.TopSage.com
---
## Page 95
?
注2：
的经验技巧。
本 hack以Linux内核版本2.6.19的journal_commit_transaction（)为例，介绍相关
都需要通过汇编代码定位相应的源代码。
不论是调查用户应用程序，还是调查内核，抑或是调查core dump和kernel dump，
#
A中
参考文献注?
分必要知识。
的汇编语言也会变得容易理解。还能学到分析 core dump或kermel dump时的大部
像本 hack这样，测试程序有助于理解汇编语言。通过-00学习之后，被-02优化过
则要将返回值放到eax中，是以eax寄存器为通用寄存器的。
@为return语句，给返回值赋0。return语句的返回值为int等4字节以下的情况，