          output[9 * (i + 5) + i + 5 - m] = output[9 * (i + 5) + i + 5 - (m + 1)];
    output[72] = v6;
    ## cpuid==0xCAFEBABE
    ## for i in range(10):
    ##     table[i] ^= t1[i]
    ## invd(0x4437)
    ## cpuid==0xDEADBEEF
    for i in range(10):
        table[i] ^= t2[i]
    invd(0x4437)
    read_msr(372)
    read_msr(374)
    invd(0x4433)
    vmcall(0x30133403);
    vmcall(0x3401CC01);
    vmcall(0x36327A09);
    vmcall(0x3300CC00);
    vmcall(0x3015CC04);
    vmcall(0x35289D07);
    vmcall(0x3027CC06);
    vmcall(873647107);
    vmcall(807849222);
    vmcall(872947457);
    vmcall(856802050);
    vmcall(908446725);
    vmcall(959499271);
    vmcall(925144069);
    vmcall(872575488);
    vmcall(958622468);
    vmcall(875655944);
    vmcall(923061250);
    invd(0x4434);
    vmcall(944971537);
    vmcall(875940873);
    vmcall(943901706);
    vmcall(892914443);
    vmcall(928041997);
    vmcall(910258445);
    vmcall(945146895);
    vmcall(928500752);
    vmcall(926941196);
    vmcall(826736911);
    vmcall(826723339);
    vmcall(927138318);
    vmcall(909512458);
    vmcall(827509774);
    vmcall(877960210);
    vmcall(877728016);
    vmcall(877186060);
    vmcall(909364232);
    invd(0x4437);
    vmcall(813747223);
    vmcall(930360342);
    vmcall(846318612);
    vmcall(964938777);
    vmcall(880982807);
    vmcall(895990805);
    vmcall(830997530);
    vmcall(0x3965CC12);
    vmcall(0x32869C19);
    vmcall(0x3785CC1A);
    vmcall(0x3281CC18);
    vmcall(0x3262DC14);
    vmcall(0x3573CC15);
    vmcall(0x37566613);
    vmcall(0x3161CC11);
    vmcall(0x3266CC13);
    vmcall(0x39844818);
    vmcall(0x3777CC16);
    ## print(output)
    ## check = [4, 5, 6, 7, 8, 21, 23, 39, 55]
    check = [0, 1, 2, 3, 18, 19, 20, 35, 36, 4, 5, 6, 7, 8, 21, 23, 39, 55, 16, 32, 48, 49, 64, 80, 81, 82, 96, 17, 33, 34, 50, 51, 52, 53, 65, 66, 22, 37, 38, 54, 67, 68, 69, 70, 84, 24, 40, 56, 72, 88, 103, 104, 120, 136, 71, 85, 86, 87, 101, 102, 118, 119, 135, 83, 98, 99, 100, 114, 116, 117, 133, 134, 97, 112, 113, 115, 128, 129, 130, 131, 132]
    for j in range(9):
        v5 = [0 for i in range(9)]
        for i in range(9):
            v5[i] = output[((check[i+9*j]&0xf0)>>4)*9 + (check[i+9*j]&0xf)]
        print(v5)
        final_check(v5)
    print(s.check())
    ## 去重并求出所有解
    while(s.check()==sat):
        m = s.model()
        flag2 = ""
        for i in a:
            flag2 += chr(m[i].as_long())
        print(flag2)
        exp = []
        for val in a:
            exp.append(val!=m[val])
        s.add(Or(exp))
### LuckyStar
在TlsCallback中实现了GetProcAddressByHash进行反调试  
下文通过lstrcmpW比较进程名来反调试  
全部跳过以后以0x61616161作为种子，然后用随机数来解sub_401780的SMC
直接通过即可  
另外值得一提的是绕过反调试的时候不知道为什么导致了栈中有了16个字节的偏移，需要自己修复
然后在sub_401780中开启了一个线程播放音乐，主线程会通过Sleep阻塞住等待音乐播放完毕  
之后再次用随机数来解sub_4015E0的SMC  
在接收29个字节的输入以后，送入sub_4015E0中进行运算，最后跟0x403520处的数组进行比较
这里跟了几次，sub_4015E0都解码失败  
这说明中间可能还有某个地方偷偷做了rand()或者srand()
于是进行动调，跑起来以后在rand()和srand()中下断，果然断到
    if ( (_BYTE)v4 )
        v5 = 0x10001165;
      else
        v5 = 0x68637466;
      v2 = v1 - 17044;
      (*(void (__cdecl **)(signed int))(v1 - 17044))(v5);
      (*(void (**)(void))(v2 - 4))();
`sub_402510`处还分别调用了一次srand和rand，这里的v4显然是反调，调试状态下会使得种子为`0x10001165`，于是我们令其等于`0x68637466`也就是`hctf`，即可解码sub_4015E0
前半段显然是一个base64，看了一下表只是大小写互换了  
后半段则又是调用了rand()，每次取低2位，然后逐个填充字符  
这里动调令output为0x00，然后直接dump数据即可
最后求解就是输出内容和随机数据异或后解b64  
另外由于输入只要29个字符，导致b64解时出现了不足位的问题，尝试补了等于号都不行，于是就删了一个字符，最后明文补'}'即可  
目测dump的时候多拿点数据、到32个字节时应该也能解出吧
    xor = [0x08, 0x81, 0x39, 0x8D, 0x40, 0x09, 0x42, 0x14, 0xD0, 0xF2,
      0x98, 0x66, 0x33, 0xD6, 0xC9, 0xB2, 0xC1, 0x95, 0xB6, 0x1E,
      0xC7, 0x2D, 0x1C, 0xEF, 0xD2, 0xB2, 0x5F, 0x66, 0x8C]
    ori = [ 0x49, 0xE6, 0x57, 0xBD, 0x3A, 0x47, 0x11, 0x4C, 0x95, 0xBC,
      0xEE, 0x32, 0x72, 0xA0, 0xF0, 0xDE, 0xAC, 0xF2, 0x83, 0x56,
      0x83, 0x49, 0x6E, 0xA9, 0xA6, 0xC5, 0x67, 0x3C, 0xCA, 0xC8,
      0xCC, 0x05]
    import string
    from base64 import b64decode
    flag2 = ""
    for i in range(29):
        v = (chr(ori[i]^xor[i]))
        if(v in string.ascii_uppercase):
            v = v.lower()
        elif(v in string.ascii_lowercase):
            v = v.upper()
        flag2 += v
    print(flag2)
    print(b64decode(flag2.encode()[:-1]))
### Seven
这是一个64位的驱动，代码量相对不大  
从DriverEntry进去各个函数看一下，只有sub_140001210里有一些引人注意的东西
    v7[-1].CompletionRoutine = (PIO_COMPLETION_ROUTINE)sub_1400012F0;
这个成员是完成例程，查了一下大体上是有事件的时候交给它处理  
第一个参数没有引用直接忽略，第二个参数多次调用，于是搜了一下，发现是Irp指针，按Y指定类型以后可以识别出很多成员名帮助分析  
然而有一个地方，`AssociatedIrp`这个union，IDA的结构体和msdn的不同，有点没搞明白，之后有空再调试学习一下
这个其实问题不大，可以之后再说  
主逻辑代码量也不大，比较清晰
根据input_pointer的值来修改l_index，分别有-1、+1、-0x10、+0x10四种情况，还有一些边界处理，可以忽略  
那么根据上下移动的大小为0x10可以猜出地图宽度为0x10，于是扒出0x140003000处的地图并重绘
    ****************
    o..............*
    **************.*
    ************...*
    ***********..***
    **********..****
    *********..*****
    ********..******
    *******..*******
    ******..********
    *****..*********
    ****..**********
    ****7***********
    ****************
通过提示字符串显然要求终点为7  
其他部分可以看出来，所在点是o，碰到*就gameover，离开的地方会重绘为.  
那么很容易可以得到移动路径：
    14*→ + 2*↓ + ← + 9*(← + ↓)
下一个问题就是怎么处理得到输入  
判定值分别为0x11, 0x1e, 0x1f, 0x20，显然不是输入的ASCII  
这里就要重新回到驱动的部分了
input_pointer每次后移12个字节（默认IDA是作为Word*来考虑，因此会显示+6），那么显然这是一个12个字节的结构，程序只要通过第一个字节就能识别出输入
思考了一阵子没有得到结果，于是Google一下  
用`驱动IRP 0xc AssociatedIrp`的关键词搜到了键盘驱动的文章
> 一个KEYBOARD_INPUT_DATA 的大小为0xc，所以Irp->AssociatedIrp.SystemBuffer ...
很显然，这里是通过KEYBOARD_INPUT_DATA来获取输入的  
又查了一下它的值，发现每个键是有两个字节的，不过第一个字节就足够区分按键，分别是`wasd`的INPUT_DATA
于是
    print(14*"d"+2*"s"+"a"+9*"as")
得到flag
### PolishDuck
跟Pwnhub血月归来中的Re一题完全一样  
用hex2bin转换成二进制，然后IDA装载  
根据RESET函数中的`(r31<<8)+r30`找到RAM段，`(0xf0<<8)+r17-0x100`找到长度，dump出来或者直接用IDA读文件即可
关键部分在sub_9A8中，恢复出delay和print两个函数以后，根据print的参数依次打印、eval并转hex，tostring即可  
其中print的参数为RAM段的偏移
    with open(r"PolishDuck (1).bin", "rb") as f:
        data = f.read()
    table = data[0x1a50:0x1a50+0x4f0-0x100]
    def p(x):
        x -= 0x100
        buff = ""
        while(table[x]!=0):
            buff += chr(table[x])
            x += 1
            ## print(table[x])
        return buff
    exp = ""
    ## exp += (p(0x140 ))
    exp += (p(0x14C ))
    exp += (p(0x153 ))
    exp += (p(0x162 ))
    exp += (p(0x177 ))
    exp += (p(0x18B))
    exp += (p(0x1A9))
    exp += (p(0x1C8))
    exp += (p(0x1D3))
    exp += (p(0x1EB))
    exp += (p(0x1FE))
    exp += (p(0x25E ))
    exp += (p(0x207))
    exp += (p(0x21C))
    exp += (p(0x227 ))
    exp += (p(0x246 ))
    exp += (p(0x261 ))
    exp += (p(0x270 ))
    exp += (p(0x28B))
    exp += (p(0x298))
    exp += (p(0x2A3))
    exp += (p(0x2B1))
    exp += (p(0x25C ))
    exp += (p(0x2BA))
    exp += (p(0x2C5))
    exp += (p(0x2D0))
    exp += (p(0x2D7))
    exp += (p(0x2F2))
    exp += (p(0x307))