# Client-Side HTTP Cookie Security: Attack and Defense

## Presenter
David Wyde  
DEF CON 22

## Overview
- **Why are HTTP cookies valuable to attackers?**
- **How do popular web browsers store cookies?**
- **How can cookies be stolen?**
- **How can cookies be protected?**

## Disclaimers
- The opinions in this presentation are the presenter's and not those of his employer.
- The security issues discussed are not specific to any one website and are not conventional vulnerabilities.

## What is an HTTP Cookie?
- Cookies are transmitted as HTTP headers.
- They consist of name-value pairs.
- HTTP clients use cookies to maintain state, such as trading credentials for a session cookie.

## Cookies in Action
### User-Readable Data
- Any process running as the user can read:
  - Private keys
  - Passwords stored in plaintext by some software
  - Web browser cookies
- Damage can be done without privilege escalation.

## Why Are Cookies Valuable to Attackers?
- Cookies can be more valuable than passwords:
  - **Gmail:** Bypass two-factor authentication.
  - **Facebook:** Do not warn of login from a new device.
- Counterpoints:
  - "Please re-enter your password."
  - Cookies expire.

### Examples
- **Gmail: Two-Factor Authentication**
- **Facebook: New Login Email**

## Browser Cookie Storage
### Introduction
- Almost all browsers store cookies as plaintext.
- The `HttpOnly` and `Secure` flags apply inside browsers, but malware may ignore them.

### Firefox
- Stores cookies in an SQLite database.
- Cookies can be read using tools like `sqlite3` or Python.

#### Reading Firefox Cookies
```bash
$ sqlite3 ~/Library/Application\ Support/Firefox/Profiles/*/cookies.sqlite
SQLite version 3.7.13 2012-07-17 17:46:21
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite> .schema
CREATE TABLE moz_cookies (id INTEGER PRIMARY KEY, baseDomain TEXT, appId INTEGER DEFAULT 0, inBrowserElement INTEGER DEFAULT 0, name TEXT, value TEXT, host TEXT, path TEXT, expiry INTEGER, lastAccessed INTEGER, creationTime INTEGER, isSecure INTEGER, isHttpOnly INTEGER, CONSTRAINT moz_uniqueid UNIQUE (name, host, path, appId, inBrowserElement));
CREATE INDEX moz_basedomain ON moz_cookies (baseDomain, appId, inBrowserElement);
sqlite> SELECT value FROM moz_cookies WHERE name='GX';
DQAAAPEAAABWYmsr2PFvwQi4XhQWYcw_5coZVfjh-efmKTNeLjyLx04sHi_Ih-xMOsSRaZ6J38QzDGyCt5v6DKYkkoc6TeX8QKuaOPSAqqGTEo4v2Y6kvmzlS-SvdU4zTcuJ-z4uCf7uiZ7Ic-H6U5Mt7leqmsDhQeEoL01z5OF6iLoxUeCHU_91eWrA2bOpU8ppqVjutpi4WVhyqLV7WX6hgSnEkWnpsN-XwcDF84V7u0DrlKCQFupzmCfa3nt_tARY-SxbyNrmY_0rH4YF-xBVvPFXBQpKqUZrW_zMdGmWgmPER_7mBTGXtlh9PM5nCP_bw09oIqXrQb_OhHe7c3AnnIg2EIqg
```

### Internet Explorer
- Stores cookies as text files.
- The folder varies depending on the IE version.
- Filenames are random, requiring file reading to access cookies.

### Opera and Safari
- Use custom binary formats.
- Can be parsed using free software tools.
  - **Safari:** `Cookies.binarycookies`
  - **Opera:** `cookies4.dat`

#### Reading Safari Cookies
```bash
$ python ~/Desktop/BinaryCookieReader.py ~/Library/Cookies/Cookies.binarycookies | grep yahoo
Cookie : hpc=d=ItIKgZXDu9Pkv2_sEb7ygoVyN9bHZ2mmjnr8eBC8z9Ynw88Tayw7ixgQfT4vleMQ56bGUussxMNmYBusbq3RHgXIkea3DhM.Yzckc.y6GAQEiJoPoK1DzyvYg1cyBoMWlZccOkvv7wvPUmDHnNk1uyiJwon3_YjfMMyCXstKdmUKmePy_Wn04tFoVbui1wlLTuSpqTw-&v=2; domain=.www.yahoo.com; path=/; expires=Wed, 15 Jul 2015;
Cookie : B=2b26v3t9s955p&b=3&s=oh; domain=.yahoo.com; path=/; expires=Fri, 15 Jul 2016;
Cookie : CRZY=%7B%221048616551%22%3A%7B%22expires%22%3A1405564858541%2C%22data%22%3A%7B%22nv%22%3A1%2C%22bn%22%3A0%7D%7D%7D; domain=.yahoo.com; path=/; expires=Thu, 17 Jul 2014;
```

#### Reading Opera Cookies
```bash
$ python opera_reader.py ~/.opera/cookies4.dat
file_version_number 4096
app_version_number 8193
idtag_length 1
length_length 2
domain record
 [('0x1e', 'name of the domain part', 3, 'org')]
 end of path record
 domain record
 [('0x1e', 'name of the domain part', 8, 'slashdot')]
 cookie record
 [('0x10', 'name of the cookie', 6, '__gads'), ('0x11', 'value of the cookie', 69, 'ID=2628549bf6c27042:T=1405392507:S=ALNI_Maix2zTTIQ4159AfUM0tHp7h_ODgQ'), ('0x12', 'expiry', 8, '2016-07-13 21:48:27'), ('0x13', 'last used', 8, '2014-07-14 21:49:28'), ('0x28', 'unknown cookie data id', 8, '\x00\x00\x00\x00\x00\x00\x00\x00'), ('0xa9', 'unknown cookie data id', 0, '')]
```

### Chromium
- Encrypts cookies in recent versions.
- Implementation and security vary by platform.
- Stores cookies in an SQLite database with a BLOB field for encrypted cookie values.

#### Chromium on Linux
- Uses AES encryption with a hard-coded key and salt.
- Can be decrypted on any machine by linking against Chromium libraries and calling decryption code.

#### Reading Chromium Cookies: Linux
```bash
[david@localhost Desktop]$ python chromium_b64_cookie_linux.py
djEwXgab42ZPnVqGRirZqEHsvEN8bC/chT84CbmJxMSJDr6XA7mQLZdCuLwYSNA6srVf7NDn7rHdBOFJf8SX4jdCxlQhcrUGH+0KzFz+hUxUcgRzy6jWEZyAe4QDegh1YGtfdCGiZ2TgHkEifJ0Mojf4VpuKhFw7SVpCzCorz86JFczNpco7LZwM/xng7UPmVEY4sIQwAGlTXoY9ThgaliP8HGviwkK0ozW9/FMUiGaxBIqDD+FSfsGszckv9zRbK8XL2PbHVslRmG2ENQ8wESu2Czajb20BQ+L3dMRvOcVbW+gwt+H/cBG23dnjnhFxGcvm9DSDyz87o5ssILocgMT+kddTBCG8ohvy7iNE3njT6WOFktK8Hd/+rhSUarnCtZt9UB1EZtikWbpqn0PKrVCKn0wVpO4oyeDIe96xEesn/IM=
david@computer /d/code/snickerdoodle/chromium-linux $ LD_LIBRARY_PATH=/d/code/lib/chromium/src/out/Release/lib ./base64_reader $(cat fedora-cookie.txt)
DQAAANMAAAD55DvOAnmlugeHzwGKs0asFxYtMfXl-Xdg7MtLYmdj5GDI3iyPh70Ds6OKgogfATna2KV9d7JqZxJ5e7SA-sbH1oxvQFs1WsFo_9WzEfj9VamEV5C0uml6tVuzhIGzrrKM0__0SI6QANb-y-qyM3QJSKCB7QrXR_Ug7lFzjibDW7Fsfg15SUCTmfQz9YLBP4oYSOt_pJRVf5XZgbN_2JKQzBqtZznZwKVE4TatBaAucT-R9jXnjM5aMdoJvr7ubghi0p1m7yvPevqNNRItPkeB5aV_cPXHKRMjwhAAk6_2w
```

#### Chromium on Windows
- Uses `CryptProtectData` for encryption.
- `CryptUnprotectData` is used for decryption and must be called by the same user on the same machine.

#### Chromium on Mac
- Stores an encryption key in the system keychain.
- Uses AES for encryption and decryption.
- Keychain prompts when accessed from unsigned apps.

#### Reading Chromium Cookies: Mac

### Summary
- **Chromium:**
  - Encrypts cookies on Windows and Mac.
  - Obfuscates cookies on Linux.
- **Other Browsers:**
  - Store cookies as plaintext.

## Attack Vectors
### Physical Access
- Most browsers leave cookies vulnerable to physical access.
- **Chromium** provides protection on Windows and Mac.

### Social Engineering
- Excel/Word macros
- Malicious executables
- No need to install anything; just run once.

### Malware
- Drop and run an executable to extract cookies.
- Use tools like Metasploit.
- Any process running as the user can post cookies to a malicious server.

### Proof of Concept
- **Login Example:**

## Defenses
### Disk Encryption
- Protects against physical access to plaintext cookies.

### Application Firewalls
- Block/allow (server, port) pairs for each application.
- **Examples:**
  - **Mac:** Little Snitch
  - **Windows:** NetLimiter
  - **Linux:** ?

#### Little Snitch
- Controls network traffic for applications.

#### SELinux
- Security-Enhanced Linux.
- Separates from standard Unix permissions.
- Isolates a user’s applications from each other.

### Idea: Master Password for Cookies
- Type in a password to decrypt cookies.
- **Firefox** uses this for protecting passwords.

### Server-Side Defenses
- Tie a session cookie to the login IP.
- **Example:** cPanel web hosting tool.
- Warn users instead of forcing re-login: “You’ve logged in from X and Y countries this month.”

## Conclusions
- Cookies should be handled with care.
- Client-side cookie security is still an unsolved problem.

## References
- **Opera reader:** [GitHub Gist](https://gist.github.com/gwarser/1324501#file-readcookies-py)
- **Safari reader:** [SecurityLearn.net](http://www.securitylearn.net/2012/10/27/cookies-binarycookies-reader/)
- **Firefox master password:** [Mozilla KB](http://kb.mozillazine.org/Master_password)
- **cPanel cookie IP validation:** [cPanel KB](http://www.cpanelkb.net/cpanel-security-settings-checklist/)
- **CryptProtectData (Microsoft documentation):** [MSDN](http://msdn.microsoft.com/en-us/library/aa922939.aspx)