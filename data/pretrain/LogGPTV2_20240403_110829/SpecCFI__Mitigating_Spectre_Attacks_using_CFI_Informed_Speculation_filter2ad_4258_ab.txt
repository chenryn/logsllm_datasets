Speciﬁcally, we assume adversaries can inject arbitrary branch
targets into BTB in an attempt to control the predicted branch
target in the victim protection domain.
Meltdown style attacks [46], [50], [61], [62], [70], [73]
are outside the threat model since they occur due to spec-
ulation on the value to be used within the execution of the
same instruction; privileged kernel memory [46], L1 cache
contents [70], ﬁll buffer [62], in-ﬂight data in modern CPUs
(for example: Re-Order Buffer and Line Fill Buffers) [73],
and store buffer [50], [61]. Moreover, misspeculation through
the direction predictor (which leads to Spectre-PHT) does
not result in a control ﬂow violation, since both conditional
branch directions are legal control ﬂow paths. Luckily, existing
works have already developed protections against Spectre-
PHT, primarily by limiting speculation around conditional
branches that can lead to dangerous misspeculation [19], [33],
[49], [67], [74]. Similarly, Spectre-STL is out-of-scope but
can be mitigated by disabling speculative store bypass [5],
[9], [36]. To the best of our knowledge, SPECCFI is the
ﬁrst hardware design that targets the more dangerous Spectre-
BTB and Spectre-RSB attacks even when they use different
side-channels (e.g., contention-based side-channel
in SMT
processors [13]).
We further assume that target software is protected with
hardware-enforced CFI, which marks valid indirect control
transfer targets (e.g., ENDBRANCH in CET). Although the target
software may contain memory vulnerabilities (e.g., buffer
overﬂows) that could be exploited to achieve arbitrary read and
write (i.e., the traditional threat model for CFI), such attacks
are out-of-scope of this work.
B. Instruction Set Architecture (ISA) Extension
Most hardware CFI extensions [11], [20]–[22], [38] use
target labeling to enforce forward-edge CFI, and a shadow
stack to enforce backward-edge CFI. Without
the loss of
generality, we assume two modiﬁcations to the ISA to inform
the hardware of the labels from the CFG analysis:
• Extending the indirect jmp and call instructions to
include CFI labels. For coarse-grained CFI enforcement
(e.g., Intel CET [38] and ARM BTI [11]), the label at
jump and call sites can be omitted.
• Adding a new instruction to mark legitimate indirect
branch targets with corresponding labels. For coarse-
grained CFI enforcement, the label can be omitted (e.g.,
the case of Intel CET) or collapsed to two labels: one for
jump targets and the other for call targets (e.g., the case
of ARM BTI).
The shadow stack is generally transparent to the program and
will not be directly manipulated. However, certain language
features such as exception handling, setjmp/longjmp, re-
quire manipulation of the shadow stack. To support these
features, additional instructions are needed, but since they
do not interact with SPECCFI, we omit their details. The
Intel CET speciﬁcations [38] provide an example of such
instructions. Table II summarizes required ISA changes.
TABLE II: ISA Extensions to support CFI.
Instruction
call [dest],label
jmp [dest],label
cfi_lbl
Description
Target class-aware call
Target class-aware jump
Verify CFI integrity
C. Compiler Modiﬁcation
SPECCFI relies on the compiler to mark valid indirect
control transfer targets with labels. Fortunately, because these
required modiﬁcations are the same as CFI, they are already
available as part of commodity compilers. For example, both
LLVM and GCC include support for (1) software-enforced
ﬁne-grained forward-edge CFI [68], (2) Intel CET, and (3)
ARM BTI. Therefore, SPECCFI requires little or no modi-
ﬁcations to the compilers. SPECCFI is compatible with any
label based CFI implementation.
IV. FORWARD-EDGE DEFENSE
In this section, we describe the component of SPECCFI
responsible for preventing both misspeculation as well as
control-ﬂow that breaks CFI on the forward-edge (i.e., on
indirect calls and indirect jumps). This defense is responsible
for preventing Spectre-BTB (v2) both within the same address
space and across different address spaces. It is also responsible
for maintaining CFI integrity on committed instructions (the
traditional use of CFI).
A. Preventing Spectre-BTB (within the same address space)
In this attack, the attacker pollutes the target BTB entry
by repeatedly executing an indirect branch in its own address
space that hashes into the same entry. The attacker can use
script engines like the JavaScript engine in browsers and the
BPF JIT engine in the kernel. When the victim branch is
executed speculatively, the polluted entry will direct the victim
to a malicious gadget. Our goal is to prevent the victim from
jumping speculatively to the malicious gadget.
Our ﬁrst design considers augmenting the BTB to hold
a CFI label for the target. This design extends indirect
call/jmp instruction execution to update the BTB to add
the CFI label of the branch. Later in the speculation path, all
indirect calls and jumps are indexed to the BTB to predict
their target as before, but with an additional check against the
inserted CFI label. This defense prevents attacker-controlled
misspeculation since the label of the attacker’s instruction
does not match the true target. For benign programs, such
misspeculation is likely to occur only when the BTB is cold
(has not been initialized yet), or when branch aliasing causes
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
42
collisions in the BTB structure. While these cases should be
rare, in both cases the value in the BTB is not the correct
target. Limiting such erroneous speculation might result in
performance improvement since we do not waste time on
fetching instructions from what is likely to be the wrong path.
Since only committed indirect branches update the BTB,
possible targets that may be used by attackers are limited to
gadgets starting with a cfi_lbl instruction with an identical
label to that of the call/jmp instructions label. Note that a
label may be shared by multiple locations in the code in CFI,
and misspeculation among these locations is still possible (i.e.,
control ﬂow bending [17]); as known from CFI solutions, this
set is much smaller than the potential targets set without CFI.
B. Preventing Spectre-BTB (cross-address-spaces)
0x09: load rax, 0x25
0x10: call *rax, L1
...
0x25: cfi_lbl L1
0x26: add rbx,1
0x09: load rax, 0x50
0x10: call *rax,L1
...
0x25: load rbx,[secret]
0x50: cfi_lbl L1
(Attacker)
(Victim)
Fig. 2: Example attack across address spaces
Storing CFI labels in BTB entries mitigates attacks within
the same address space, but not those across address spaces,
when attackers pollute the globally shared BTB from another
program. In this case, if attackers know the label used by
the victim program (e.g., through ofﬂine analysis), they can
craft an entry in the BTB with the same label and bypass
the protection. Consider the example in Figure 2. The attacker
inserts L1 and 0x25 in the 0x10 index of BTB, by selecting
the label and location of a branch. When the CPU context
switches to the victim space, the victim call at location 0x10
is indexed to BTB and uses the BTB entry, inserted by the
attacker to predict its target. Since the label matches, the CPU
continues speculative execution of the malicious gadget from
0x25, and the attacker successfully redirects the control ﬂow
and executes the malicious gadget to reveal the secret.
To prevent cross-address-space attacks, one possibility is to
randomize the mapping of addresses to the BTB (e.g., similar
to the CASESAR solution for caches [59]) to make it difﬁcult
for attackers to guess the label or the location associated with
the target branch. However, as this approach only provides
probabilistic guarantees against attacks, we decided to use
an alternative implementation that avoids using labels in the
BTB. Speciﬁcally, our implementation enforce the CFI check
by ensuring that the ﬁrst speculatively executed instruction
after an indirect branch is a legal cfi_lbl instruction with
a matching label, guaranteeing that the speculation target is a
legal target in the program’s Control Flow Graph. We note that
this is the standard implementation of hardware acceleration of
CFI. However, since we are using CFI to constrain speculation
(not just the committed instructions), this approach requires
matching labels
indirect call/jmp
waiting
cﬁ_lbl
check label
initial
any instruction(cid:2)
except cﬁ_lbl
not matching labels
any instruction 
except indirect call/jmp
insert fences
Fig. 3: State machine for forward edge protection
pushing the check earlier in the pipeline to the decode stage
of the ﬁrst instruction on the speculative path. However, as our
experimental analysis shows, this change results in negligible
impact on performance legal speculation is not delayed.
With respect to performance, the two implementations op-
erate differently, but are likely to perform similarly. The ﬁrst
implementation requires modiﬁcations to the critical BTB
structure and can potentially slow down the execution pipeline,
favoring the target label-checking implementation. A small
disadvantage of the second implementation is that the target
instructions have to be speculatively fetched (if not cached) to
be able to check the label, which could be avoided if the label-
mismatch is detected by the BTB in the ﬁrst implementation.
The state machine implementing the check in the decode
stage of the pipeline is shown in Figure 3. Starting at the initial
state, any indirect call/jmp instruction in the decode stage
sets the CFI_REG register with its own CFI label and causes
the CPU to wait for a cfi_lbl instruction. The decode
stage makes sure that the next instruction is a cfi_lbl
instruction. This restricts potential gadgets to those starting
with a cfi_lbl instruction. Moreover, the CPU will conﬁrm
that
the CFI_REG value and the label of the cfi_lbl
instruction are equal. In this way, potential gadgets are further
restricted to those with a matching label. When the instruction
following the call/jmp is not a cfi_lbl instruction or
when the label of the cfi_lbl instruction does not match the
label of the call/jmp, an lfence micro-op is inserted into
the pipeline to guarantee prevent execution from the wrong
speculative path.
C. Enforcing CFI for Committed Instructions
SPECCFI is essentially hardware-supported CFI, but with
CFI enforcement during speculation. Thus, given the similarity
in the hardware support to traditional CFI, we also extend
the design to support standard CFI to enforce the CFI rules
on committed instructions and defend against control ﬂow
hijacking attacks. This support is achieved by enforcing the
CFI check during the commit stage of the pipeline: if an
indirect call/jmp instruction is not followed by a cfi_lbl
instruction with a matching label,
the CPU raises a CFI
violation exception.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
43
V. BACKWARD-EDGE DEFENSE
The backward-edge defense component of SPECCFI pro-
tects misspeculation on return instructions. Return instructions
typically obtain their predicted addresses from a hardware
stack called the Return Stack Buffer (RSB). The RSB has
been shown to be vulnerable to a range of Spectre attacks [45],
[47]. To provide protection for the backward-edge, hardware
CFI proposals use a Shadow Call Stack (SCS), which is
protected from normal memory reads and writes, and can
only be manipulated through special instructions [38]. Similar
to RSB, the SCS is used to retain the return addresses of
previously executed calls. The differences are: (1) SCS is in
memory, so it is saved and restored across context-switch;
while RSB is a special cache in the CPU and its content is
shared across different context. (2) SCS is only used for CFI
enforcement and its size is conﬁgurable; while RSB is only
used for speculation, and since misspeculation was thought to
be only a performance problem, RSB is a best effort structure
that is not maintained precisely and has a limited size.
A. Combined Speculation-consistent RSB/SCS: Overview
To provide defenses against Spectre-RSB attacks, we com-
bine the traditional RSB and SCS into a uniﬁed structure
RSB/SCS acting as both RSB and call stack. Conceptually,
RSB in our design can be viewed as the in-processor cache
for the in-memory SCS. We note that this is different from
other SCS implementations that retain the RSB separately. By
getting speculation targets from the precisely maintained SCS,
consistent with the philosophy of SPECCFI, we move the CFI
guarantees to the speculation stage, closing the Spectre-RSB
vulnerability.
The overall design of RSB/SCS has additional requirements
from the design of conventional SCS. Speciﬁcally, since we
have to be able to use it to obtain speculation targets, it
must track additional speculative state without affecting the
committed state of the SCS. We describe the overall design in
the remainder of this section.
When a context switch occurs, the committed RSB/SCS
entries must be saved such that they can be restored when
the program runs again. To be able to keep the state of
this structure consistent, we extend the reorder buffer (ROB,
which is the structure in the CPU used to track speculative
instructions and their register values before they commit) to
track this state. Speciﬁcally, we add a logical register OLD_RS
which (is subject to renaming and) holds the return address
that is pushed to the RSB/SCS by a call instruction, or popped
by a return instruction from the RSB/SCS. In addition, we
keep track of a pointer to the last committed entry (LCP) of
the RSB/SCS so as to save and restore the state of committed
entries in this structure in the case of context switch or a spill
overﬂow to memory. At the decode stage, If the instruction
is a call, the next address is “speculatively” pushed to the
RSB/SCS structure. When this instruction commits, the LCP is
updated to point to the last committed entry. If the instruction
is decoded as a return it “speculatively” pops a return value
from the RSB/SCS structure into OLD_RS (without changing
LCP) and sets the program counter to this address. To support
conventional CFI, when the return instruction reaches the
commit stage, the value of the OLD_RS register is compared
with the top of the traditional software stack. If these two
values do not match, a CFI violation exception is raised.
We considered the need to provision the stack with ad-
ditional ports since it is used not only to serve committed
instructions, but also to handle speculative calls and returns.
However, we found that additional ports do not result
in
performance beneﬁts because the speculative SCS state is held
primarily in the port-rich reorder buffer. When the in-processor
cache (RSB) overﬂows or the current thread is about to be
swapped out, we spill it over to the hardware-protected in-
memory SCS. When the RSB underﬂows or a new thread is
swapped in, we load entries from the SCS. We did not explore
optimization to prefetch values from the SCS when RSB is
close to empty, or to push some values proactively to memory
when RSB gets close to full.
B. Misprediction Recovery
Every ret instruction utilizes the RSB/SCS to predict
its jump target. Since the state of RSB/SCS is modiﬁed by
speculative call and ret instructions, in case of misspeculation,
the CPU has to recover the correct state of the structure.
When misspeculation is detected, we need to ﬂush all
the speculated instructions from the pipeline. As a part of
this process, we have to annul all the corresponding entries
from the ROB. During annulment, for every call or return
instruction, we not only remove the ROB entry but also update
the RSB/SCS to preserve the consistent state of the structure. If
the instruction is a call, the top of the RSB/SCS is be popped.
In the case of a ret instruction, the value of OLD_RS will
be pushed back to the RSB/SCS.
C. RSB/SCS Work Flow
To clarify how this structure works, we step through the
example code sample presented in Figure Figure 5.
Assume both calls to function1 and function2 have pushed
their return values to the RSB/SCS. By committing these
instructions at , the LCP is updated to point to the last
committed value and then the corresponding entries are evicted
from ROB. In the second step , the return instruction from
the ﬁrst call is being executed speculatively, saving the return
address in the ROB, and eventually getting committed. The
following speculative call to function3 at , will push its
return address to RSB/SCS. At step , the execution of the
return instruction and the following call to function4, change
the RSB/SCS state. Assume that a misspeculation on the
jz instruction has been detected at  and every instruction
executed after the branch has to be ﬂushed. Therefore, the
recovery process starts annulling instructions from the last
entry in ROB until the misspeculated instruction has been
reached. Annulling the last call in the ROB at , the value at
the top of RSB/SCS is popped and at , annulling the return,
the OLD RES value of the instruction saved in ROB is pushed
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
44

0x25
0x10



0x10








0x26


 

 
!