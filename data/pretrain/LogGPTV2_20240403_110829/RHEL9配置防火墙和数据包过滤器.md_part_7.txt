    ``` literallayout
    # firewall-cmd --permanent --set-target=default
    ```
2.  删除 `ICMP`{.literal} 请求的所有添加的块：
    ``` literallayout
    # firewall-cmd --remove-icmp-block=
    ```
3.  删除 `ICMP`{.literal} block inversion：
    ``` literallayout
    # firewall-cmd --remove-icmp-block-inversion
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-the-icmp-filter-using-gui_managing-icmp-requests}使用 GUI 配置 ICMP 过滤器 {.title}
:::
::: itemizedlist
-   要启用或禁用 `ICMP`{.literal} 过滤器，请启动
    [**[firewall-config]{.application}**]{.strong}
    工具,并选择其消息要被过滤的网络区。选择 `ICMP Filter`{.literal}
    选项卡，再选中您要过滤的每种 `ICMP`{.literal}
    消息的复选框。清除复选框以禁用过滤器。这个设置按方向设置，默认允许所有操作。
-   若要启用反向 `ICMP Filter`{.literal}，可点击右侧的
    `Invert Filter`{.literal} 复选框。现在只接受标记为 `ICMP`{.literal}
    的类型，所有其他的均被拒绝。在使用 DROP 目标的区域里它们会被丢弃。
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#setting-and-controlling-ip-sets-using-firewalld_using-and-configuring-firewalld}使用 `firewalld`{.literal} 设置和控制 IP 集 {.title}
:::
要查看 `firewalld`{.literal} 所支持的 IP 集设置类型列表，请以 root
用户身份输入以下命令。
``` screen
~]# firewall-cmd --get-ipset-types
hash:ip hash:ip,mark hash:ip,port hash:ip,port,ip hash:ip,port,net hash:mac hash:net hash:net,iface hash:net,net hash:net,port hash:net,port,net
```
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-ip-set-options-using-cli_setting-and-controlling-ip-sets-using-firewalld}使用 CLI 配置 IP 设置选项 {.title}
:::
IP 集可以在 `firewalld`{.literal} 区中用作源，也可以用作富规则中的源。在
Red Hat Enterprise Linux 中，首选的方法是使用在直接规则中使用通过
`firewalld`{.literal} 创建的 IP 集。
::: itemizedlist
-   要列出 permanent 环境中 `firewalld`{.literal} 已知的 IP 集，请以
    `root`{.literal} 用户身份运行以下命令：
    ``` literallayout
    # firewall-cmd --permanent --get-ipsets
    ```
-   要添加新的 IP 集，请以 `root`{.literal} 用户身份使用 permanent
    环境来运行以下命令：
    ``` literallayout
    # firewall-cmd --permanent --new-ipset=test --type=hash:net
    success
    ```
    上述命令为 `IPv4`{.literal} 创建了一个名为 [*test*]{.emphasis} ，
    类型为 `hash:net`{.literal} 的新的 IP 集。要创建用于
    `IPv6`{.literal} 的 IP 集，请添加 `--option=family=inet6`{.literal}
    选项。要使新设置在运行时环境中有效，请重新加载
    `firewalld`{.literal}。
-   使用以下命令，以 `root`{.literal} 用户身份列出新的 IP 集：
    ``` screen
    # firewall-cmd --permanent --get-ipsets
    test
    ```
-   要获取有关 IP 集的更多信息，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --info-ipset=test
    test
    type: hash:net
    options:
    entries:
    ```
    请注意，IP 集目前没有任何条目。
-   要在 [*test*]{.emphasis} IP 集中添加一个条目，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --add-entry=192.168.0.1
    success
    ```
    前面的命令将 IP 地址 [*192.168.0.1*]{.emphasis} 添加到 IP 集合中。
-   要获取 IP 集中的当前条目列表，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --get-entries
    192.168.0.1
    ```
-   生成包含 IP 地址列表的文件，例如：
    ``` screen
    # cat > iplist.txt 
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#prioritizing-rich-rules_using-and-configuring-firewalld}丰富规则的优先级 {.title}
:::
默认情况下，富规则是根据其规则操作进行组织的。例如，`deny`{.literal}
规则优先于 `allow`{.literal} 规则。富规则中的 `priority`{.literal}
参数可让管理员对富规则及其执行顺序进行精细的控制。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#how-the-priority-parameter-organizes-rules-into-different-chains_prioritizing-rich-rules}priority 参数如何将规则组织为不同的链 {.title}
:::
您可以将富规则中的 `priority`{.literal} 参数设置为 `-32768`{.literal} 和
`32767`{.literal} 之间的任意数字，值越小优先级越高。
`firewalld`{.literal} 服务会根据其优先级的值将规则组织到不同的链中：
::: itemizedlist
-   优先级低于 0：规则被重定向到带有 `_pre`{.literal} 后缀的链中。
-   优先级高于 0：规则被重定向到带有 `_post`{.literal} 后缀的链中。
-   优先级等于 0：根据操作，规则将重定向到带有
    `_log`{.literal}、`_deny`{.literal} 或 `_allow`{.literal} 的链中。
:::
在这些子链中，`firewalld`{.literal} 会根据其优先级的值对规则进行排序。
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#setting-the-priority-of-a-rich-rule_prioritizing-rich-rules}设置丰富的规则的优先级 {.title}
:::
该流程描述了如何创建一个富规则的示例，该规则使用 `priority`{.literal}
参数来记录其他规则不允许或拒绝的所有流量。您可以使用此规则标记意非预期的流量。
::: orderedlist
**流程**
1.  添加一个带有非常低优先级的丰富规则来记录未由其他规则匹配的所有流量：
    ``` literallayout
    # firewall-cmd --add-rich-rule='rule priority=32767 log prefix="UNEXPECTED: " limit value="5/m"'
    ```
    命令还将日志条目的数量限制为每分钟 `5`{.literal} 个。
2.  另外，还可显示上一步中命令创建的 `nftables`{.literal} 规则：
    ``` literallayout
    # nft list chain inet firewalld filter_IN_public_post
    table inet firewalld {
      chain filter_IN_public_post {
        log prefix "UNEXPECTED: " limit rate 5/minute
      }
    }
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-firewall-lockdown_using-and-configuring-firewalld}配置防火墙锁定 {.title}
:::
如果本地应用或服务以 `root`{.literal} 身份运行（如
[**[libvirt]{.application}**]{.strong}），则可以更改防火墙配置。使用这个特性，管理员可以锁定防火墙配置，从而达到没有应用程序或只有添加到锁定白名单中的应用程序可以请求防火墙更改的目的。锁定设置默认会被禁用。如果启用，用户就可以确定，防火墙没有被本地的应用程序或服务进行了不必要的配置更改。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-lockdown-using-CLI_configuring-firewall-lockdown}使用 CLI 配置锁定 {.title}
:::
这个流程描述了如何使用命令行来启用或禁用锁定。
::: itemizedlist
-   要查询是否启用了锁定，请以 `root`{.literal} 用户身份运行以下命令：
    ``` literallayout
    # firewall-cmd --query-lockdown
    ```
    如果启用了锁定，该命令将打印 `yes`{.literal}，且退出状态为
    `0`{.literal}。否则，将打印 `no`{.literal} ，且退出状态为
    `1`{.literal}。
-   要启用锁定，请以 `root`{.literal} 用户身份输入以下命令：
    ``` literallayout
    # firewall-cmd --lockdown-on
    ```
-   要禁用锁定，请以 `root`{.literal} 用户身份使用以下命令：
    ``` literallayout
    # firewall-cmd --lockdown-off
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-lockdown-allow-list-options-with-the-command-line-client_configuring-firewall-lockdown}使用 CLI 配置锁定允许列表选项 {.title}
:::
锁定允许名单中可以包含命令、安全上下文、用户和用户
ID。如果允许列表中的命令条目以星号\"\*\"结尾，则以该命令开头的所有命令行都将匹配。如果没有
\"\*\"，那么包括参数的绝对命令必须匹配。
::: itemizedlist
-   上下文是正在运行的应用程序或服务的安全（SELinux）上下文。要获得正在运行的应用程序的上下文，请使用以下命令：
    ``` screen
    $ ps -e --context
    ```
    该命令返回所有正在运行的应用程序。通过
    [**[grep]{.application}**]{.strong}
    工具管道输出以便获取您感兴趣的应用程序。例如：
    ``` screen
    $ ps -e --context | grep example_program
    ```
-   要列出允许列表中的所有命令行，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-commands
    ```
-   要在允许列表中添加命令 [*command*]{.emphasis} ，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
-   要从允许列表中删除命令 [*command*]{.emphasis} ，请以
    `root`{.literal} 用户身份输入以下命令：