mid(@name,1)
ang
mid(@name,2,3)
yangjianrong
 substring(@name,1)
ang
 substring(@name,2,3)
6
right(@name,1)
Y
left(@name,1)
一
1
name[1:4:2]
name[1:4]
name[-1]
select
 select mid(@name,1);
-----
i
如下：
left(@name,1);
一十
---
## Page 455
可扩展性更好。
MySQL 的方案则更为丰富。
Query OK,
mysql> set @s=' abc ';
（6）字符串长度
mysql> select concat (insert (@name,1,4,'yangjianrong'),insert (@alias,1,5,
mysql> select ltrim(@s);
（7）字符串空格处理
小结：字符串长度的功能比较固定，两者没有优劣差别。
>>>
>>>ba
小结：通过对比测试，Python 和 MySQL 中对于字符串匹配，Python 的方案更为简洁，
>>>
当然在字符串拼接方面，Python 还有join 的用户，可以和 MySQL 用法继续比对：
>>>'{name},{alias}'
（5）字符串格式化，匹配
>>
18
comm
a*b*c'
abc'
小结：通过对比测试，Python 和 MySQL 中对于字符串匹配，Python 的方案更为简洁，
abc
abc'
a,b，c，d,e
yang
comm
s.strip()
len(ba)
s.rstrip()
*'.join(l)
0 rows affected (0.00 sec)
.format (name='yangjianrong',alias='jeanron100') 
'jeanron100')） comm;
第11章运维开发基础”433
---
## Page 456
434丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
式是字符串。
'ttbbcc'"
>>>
（9）字符串复制
小结：对于字符串拆分，Python 的输出是基于数据结构的方式，而 MySQL 的输出方
mysql> select replace(@s,' ',',');
mysql> set @s='a b c d e '; 
['a',
pα，=s select trim(@s);
1 row in set (0.00 sec)
mysql> select rtrim(@s);
1 row in set (0.00 sec)
replace(@s,'aa','tt')
trim(@s)
Itrim(@s)
ttbbcc
'q
replace(@s,
abc
rtrim(@s)
abc
abc
s.replace('aa','tt')
1
0 rows affected (0.0o sec)
(0.00 sec)
'd'，
]
---
## Page 457
归来处理了。
考值，则在左侧存放。这样一来，三个数，四个数都是如此的思路。我们就可以使用递
用思维来考虑，设定一个参考值，如果大于参考值，则在右侧由数组存放，如果小于参
爱上它的，我确切的说是属于第三种。
适的方法却很难，我们来看一个经典的算法：快速排序。
11.3.3
件的特点来选用。
有句话说的好：递归将人分为三个截然不同的阵营：恨它的、
def quicksort(array):
能执行的程序很短，内容如下：
如果是一个数，则返回，如果是两个数，直接比较很快就能出结果，我们用一个通
使用循环，程序的性能可能而更好，但是使用递归，程序会更容易理解。
算法是程序员的一大利器，做一件事情实现的方式有很多，但是如何平衡找到最合
案例11-1：使用递归实现快速排序的小例子
至此，我们完成了一些较为详细地对比测试，后续在工作中也可以根据每个工具/软
mysql> SELECT LOCATE('aa',@s,1);
对于快速排序，算法的思考方式就是由简到难。
小结：对于字符串开始字符的匹配，两者没有优劣差别。
>>>s.startswith('aa')
（11）判断字符串开始匹配的字符
小结：对于字符串编码，两者没有优劣差别。
mysql> select 
>>>s.encode('utf8')
LOCATE（'aa'，@s，1)
aabbcc
（10）字符串编码
小结：对于字符串复制，两者没有优劣差别。
Python 实现快速排序
convert(@s using utf8);
、爱它的和恨了几年又
第11章运维开发基础”435
---
## Page 458
436丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
D:\programs\python2.7\python.exe C:/python/kmp/db_ops/quicksort.py
生成的日志如下：
def quicksort(array) :
这种方式对于分析问题还是大有帮助。程序本身不长，算是最精炼的快排程序了。
Process finished with
如果给程序打上日志，
print quicksort([5,11,3,5,8,2,6,7])
('pivot:',
greater'
less:'
'greater'
sum:',
greater'
'pivot:',
'greater'
pivot:
sum:'
'greater'
sum:
else:
else:
if len(array) pivot]
2：
for
less)
exit code0
,pivot)
11]
7]）
in array[l:] if i'if
start_response):
OK
OK
n in urlpatterns:
[('Content-Type','text/html')])
response):
，能够提高我们开发的效率，就跟我们使用
("/login/'，login),
RunServer)
name
name
==
httpd.serve_forever()
httpd.serve_forever()
text/html')])
：
---
## Page 461
现复杂的需求。