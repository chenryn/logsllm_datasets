### 14.2 Shell变量

#### 14.2.1 设置本地变量
要设置一个本地变量，可以使用以下格式：
```bash
variable_name=value
```
或
```bash
${variable_name=value}
```
注意，等号两边可以有空格。如果值包含空格，必须用双引号括起来。Shell变量可以使用大小写字母。

**表14-1 变量设置时的不同模式**

| 模式                | 描述                                                         |
|---------------------|--------------------------------------------------------------|
| `variable_name=value` | 设置实际值到 `variable_name`                                 |
| `variable_name+value` | 如果设置了 `variable_name`，则重设其值                       |
| `variable_name:?value` | 如果未设置 `variable_name`，显示用户错误信息                  |
| `variable_name?value` | 如果未设置 `variable_name`，显示系统错误信息                  |
| `variable_name:=value` | 如果未设置 `variable_name`，设置其值                          |
| `variable_name:-value` | 如果未设置 `variable_name`，取默认值，但不设置到 `variable_name` |

#### 14.2.2 显示变量
使用 `echo` 命令可以显示单个变量的值，并在变量名前加 `$`，例如：
```bash
echo $LOGNAME
```
可以结合使用多个变量，如下所示：
```bash
error_msg="Error: User $LOGNAME not found"
echo $error_msg
```
上面的例子中，Shell首先显示文本，然后查找变量 `$LOGNAME`，最后扩展变量以显示整个变量值。

#### 14.2.3 清除变量
使用 `unset` 命令清除变量。
```bash
unset variable_name
```

#### 14.2.4 显示所有本地Shell变量
使用 `set` 命令显示所有本地定义的Shell变量。
```bash
set
```
`set` 输出可能很长。查看输出时可以看出Shell已经设置了一些用户变量以使工作环境更加容易使用。

#### 14.2.5 结合变量值
将变量并排可以使变量结合在一起：
```bash
combined_variable="${variable1}${variable2}"
```

#### 14.2.6 测试变量是否已经设置
有时需要测试是否已设置或初始化变量。如果未设置或初始化，就可以使用另一值。此命令格式为：
```bash
${variable:-value}
```
意即如果设置了变量值，则使用它；如果未设置，则取新值。例如：
```bash
colour=blue
echo ${colour:-red}  # 输出 "blue"
unset colour
echo ${colour:-red}  # 输出 "red"
```
下面是一个更实用的例子。查询工资清单应用的运行时间及清单类型。在运行时间及类型输入时，敲回车键表明用户并没有设置两个变量值，将使用缺省值（03:00和Weekly），并传入`at`命令中以按时启动作业。
```bash
run_time=${run_time:-03:00}
list_type=${list_type:-Weekly}
at $run_time -f script.sh
```

#### 14.2.7 使用变量来保存系统命令参数
可以用变量保存系统命令参数的替换信息。下面的例子使用变量保存文件拷贝的文件名信息。变量 `source` 保存 `passwd` 文件的路径，`dest` 保存 `cp` 命令中的目标文件。
```bash
source=/etc/passwd
dest=/home/user/passwd
cp $source $dest
```
下面例子中，变量 `device` 保存磁带设备路径，然后用于在 `mt` 命令中倒带。
```bash
device=/dev/st0
mt -f $device rewind
```

#### 14.2.8 设置只读变量
如果设置变量时，不想再改变其值，可以将其设置为只读方式。如果有人包括用户本人想要改变它，则返回错误信息。格式如下：
```bash
variable_name=value
readonly variable_name
```
下面的例子中，设置变量为系统磁带设备之一的设备路径，将其设为只读，任何改变其值的操作将返回错误信息。
```bash
TAPE_DEVICE=/dev/st0
readonly TAPE_DEVICE
```
要查看所有只读变量，使用命令 `readonly` 即可。
```bash
readonly
```

### 14.3 环境变量
环境变量用于所有用户进程（经常称为子进程）。登录进程称为父进程。Shell中执行的用户进程均称为子进程。不像本地变量（只用于当前的Shell），环境变量可用于所有子进程，这包括编辑器、脚本和应用。

环境变量可以在命令行中设置，但用户注销时这些值将丢失，因此最好在 `.profile` 文件中定义。系统管理员可能在 `/etc/profile` 文件中已经设置了一些环境变量。将之放入 `profile` 文件意味着每次登录时这些值都将被初始化。

传统上，所有环境变量均为大写。环境变量应用于用户进程前，必须用 `export` 命令导出。环境变量与本地变量设置方式相同。

#### 14.3.1 设置环境变量
```bash
VARIABLE_NAME=value
export VARIABLE_NAME
```
在两个命令之间是一个分号，也可以这样写：
```bash
VARIABLE_NAME=value
export VARIABLE_NAME
```

#### 14.3.2 显示环境变量
显示环境变量与显示本地变量一样，例子如下：
```bash
echo $VARIABLE_NAME
```
使用 `env` 命令可以查看所有的环境变量。
```bash
env
```

#### 14.3.3 清除环境变量
使用 `unset` 命令清除环境变量：
```bash
unset VARIABLE_NAME
```

#### 14.3.4 嵌入Shell变量
Bourne shell有一些预留的环境变量名，这些变量名不能用作其他用途。通常在 `/etc/profile` 中建立这些嵌入的环境变量，但也不完全是，这取决于用户自己。以下是嵌入Shell变量列表。

1. **CDPATH**
   改变目录路径变量，保留一系列由冒号隔开的路径名，用于 `cd` 命令。如果设置了 `CDPATH`，`cd` 一个目录时，首先查找 `CDPATH`，如果 `CDPATH` 指明此目录，则此目录成为当前工作目录。
   ```bash
   CDPATH=:/home/dave/bin:/usr/local
   cd apps
   ```

2. **EXINIT**
   `EXINIT` 变量保存使用 `vi` 编辑器时的初始化选项。例如，调用 `vi` 时，要显示行号，且在第10个空格加入 `tab` 键，命令为：
   ```bash
   EXINIT='set nu tab=10'
   export EXINIT
   ```

3. **HOME**
   `HOME` 目录，通常定位于 `passwd` 文件的倒数第2列，用于保存用户自身文件。设置了 `HOME` 目录，可以简单使用 `cd` 命令进入它。
   ```bash
   cd $HOME
   ```

4. **IFS**
   `IFS` 用作Shell指定的缺省域分隔符。原理上讲域分隔符可以是任意字符，但缺省通常为空格、新行或 `tab` 键。`IFS` 在分隔文件或变量中各域时很有用。下面的例子将 `IFS` 设置为冒号，然后 `echo PATH` 变量，给出一个目录分隔开来的可读性很强的路径列表。
   ```bash
   IFS=:
   echo $PATH
   ```
   要设置其返回初始设置：
   ```bash
   IFS=' \t\n'
   export IFS
   ```

5. **LOGNAME**
   此变量保存登录名，应该为缺省设置，但如果没有设置，可使用下面命令完成它：
   ```bash
   LOGNAME=$(whoami)
   ```

6. **MAIL**
   `MAIL` 变量保存邮箱路径名，缺省为 `/var/spool/mail/`。Shell周期性检查新邮件，如果有了新邮件，在命令行会出现一个提示信息。如果邮箱并不在以上指定位置，可以用 `MAIL` 设置。
   ```bash
   MAIL=/usr/mail/dave
   export MAIL
   ```

7. **MAILCHECK**
   `MAILCHECK` 缺省每60秒检查新邮件，但如果不想如此频繁检查新邮件，比如设为每2分钟，使用命令：
   ```bash
   MAILCHECK=120
   export MAILCHECK
   ```

8. **MAILPATH**
   如果有多个邮箱要用到 `MAILPATH`，此变量设置将覆盖 `MAIL` 设置。
   ```bash
   MAILPATH=/var/spool/dave:/var/spool/admin
   export MAILPATH
   ```
   上面的例子中，`MAIL` 检测邮箱 `dave` 和 `admin`。

9. **PATH**
   `PATH` 变量保存进行命令或脚本查找的目录顺序，正确排列这个次序很重要，可以在执行命令时节省时间。你一定不想在已知命令不存在的目录下去查找它。通常情况，最好首先放在 `HOME` 目录下，接下来是从最常用到一般使用到不常用的目录列表次序。如果要在当前工作目录下查询，无论在哪儿，均可以使用句点操作。目录间用冒号分隔，例如：
   ```bash
   PATH=$HOME/bin:.:/bin:/usr/bin
   export PATH
   ```
   使用上面的例子首先查找 `HOME/bin` 目录，然后是当前工作目录，然后是 `/bin`，最后是 `/usr/bin`。
   `PATH` 可以在系统目录下 `/etc/profile` 中设置，也可以使用下面方法加入自己的查找目录。
   ```bash
   PATH=$PATH:$HOME/bin:.
   export PATH
   ```
   这里使用了 `/etc/profile` 中定义的 `PATH`，并加入 `$HOME/bin` 和当前工作目录。一般来说，在查找路径开始使用当前工作目录不是一个好办法，这样很容易被其他用户发现。

10. **PS1**
    基本提示符包含Shell提示符，缺省对超级用户为 `#`，其他为 `$`。可以使用任何符号作提示符，以下为两个例子：
    ```bash
    PS1='\u@\h:\w\$ '
    export PS1
    ```

11. **PS2**
    `PS2` 为附属提示符，缺省为符号 `>`。`PS2` 用于执行多行命令或超过一行的一个命令。
    ```bash
    PS2='> '
    export PS2
    ```

12. **SHELL**
    `SHELL` 变量保存缺省Shell，通常在 `/etc/passwd` 中已设置，但是如有必要使用另一个Shell，可以用如下方法覆盖当前Shell：
    ```bash
    SHELL=/bin/bash
    export SHELL
    ```

13. **TERMINFO**
    终端初始化变量保存终端配置文件的位置。通常在 `/usr/lib/terminfo` 或 `/usr/share/terminfo`。
    ```bash
    TERMINFO=/usr/lib/terminfo
    export TERMINFO
    ```

14. **TERM**
    `TERM` 变量保存终端类型。设置 `TERM` 使应用获知终端对屏幕和键盘响应的控制序列类型，常用的有 `vt100`、`vt200`、`vt220-8` 等。
    ```bash
    TERM=vt100
    export TERM
    ```

15. **TZ**
    时区变量保存时区值，只有系统管理员才可以更改此设置。例如：
    ```bash
    TZ=GMT
    export TZ
    ```

#### 14.3.5 其他环境变量
还有一些预留的环境变量。其他系统或命令行应用将用到它们。以下是最常用的一些，注意这些值均未有缺省设置，必须显式说明。

1. **EDITOR**
   设置编辑器，最常用。
   ```bash
   EDITOR=vi
   export EDITOR
   ```

2. **PWD**
   当前目录路径名，用 `cd` 命令设置此选项。
   ```bash
   PWD=$(pwd)
   ```

3. **PAGER**
   保存屏幕翻页命令，如 `pg`、`more`，在查看 `man` 文本时用到此功能。
   ```bash
   PAGER='pg -f -p%d'
   export PAGER
   ```

4. **MANPATH**
   保存系统上 `man` 文本的目录。目录间用冒号分隔。
   ```bash
   MANPATH=/usr/man:/usr/local/man
   export MANPATH
   ```

希望这些优化后的文本能帮助您更好地理解和使用Shell变量和环境变量。