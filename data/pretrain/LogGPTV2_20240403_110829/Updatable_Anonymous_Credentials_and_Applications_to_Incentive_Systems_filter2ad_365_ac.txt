learn anything from this bit of information, we make this part of the simulation: SReceive actually
simulates a protocol Receive0, which behaves like Receive, but after the interaction sends a bit b to
the issuer, indicating whether or not Receive outputs the error symbol or a credential. Analogously,
SUpdRcv simulates UpdRcv0.
Deﬁnition 5 (Simulation Anonymity). A UACS Πuacs has simulation anonymity if there exist ppt
simulators SSetup, SReceive, SShowPrv, SUpdRcv such that for all (unrestricted) adversaries A and all
pp ∈ [G(1λ)]: If (cpp, td) ∈ [SSetup(pp)], then
• Pr[Setup(pp) = cpp] = Pr[SSetup(pp) = (cpp,·)]
• outputA[SReceive(td, pk, ψ) ↔ A] is distributed exactly like outputA[Receive0(cpp, pk, ψ, α) ↔
A] for all pk, α∈ {0, 1}∗, and ψ ∈ Ψ with ψ(⊥, α) 6=⊥.
• outputA[SUpdRcv(td, pk, ψ) ↔ A] is distributed exactly like outputA[UpdRcv0(cpp, pk, ψ, α,
cred) ↔ A] for all pk, ψ ∈ Ψ and cred, ~A such that ValidCred(cpp, pk, cred, ~A) = 1 and
ψ( ~A, α) 6=⊥.
• outputA[SShowPrv(td, pk, φ) ↔ A] is distributed exactly like outputA[ShowPrv(cpp, pk, φ, α,
cred) ↔ A] for all pk, φ ∈ Φ and cred, ~A, α such that ValidCred(cpp, pk, cred, ~A) = 1 and
(cid:5)
φ( ~A, α) = 1
3.2.2 Soundness
Informally, soundness should enforce that users cannot show or update credentials they have not
obtained from the issuer. Soundness protects issuers and veriﬁers against malicious users. The
9
challenge in deﬁning soundness is that because of anonymity in UACS, issuers and veriﬁers do not
know what attributes result from Issue and Update operations, so they cannot easily check whether or
not security was broken. For this reason, we intuitively say that soundness is broken if an adversary
can run a series of issue/update/verify protocols, for which there is no reasonable explanation given
the update functions for which the issuer has issued/updated credentials.
The soundness deﬁnition is game-based: an adversary A is run through an experiment (cf. Figure 1).
The experiment simulates an honest issuer and honest veriﬁer. A can ask to be issued credentials,
to have them updated, or to show them, choosing the update functions ψ and show-predicates
φ that the issuer/veriﬁer shall use. Eventually, A halts. Now, to judge whether or not A won,
the experiment runs an extractor E (whose existence we require from sound UACS). E outputs an
explanation list L, which conjectures what hidden parameters A used in each issue/update/verify
protocol. If E fails to produce an explanation list L that is consistent with what we’ve observed
during the experiment, then A wins. Consistency mainly hinges on the bit output by ShowVrfy and
Update: If ShowVrfy(cpp, pk, φ) outputs 1, then we expect that L shows a series of issue/update
operations that explains why A possesses a credential with attributes ~A for which there exists an α
that satisﬁes φ( ~A, α). Similarly, if Update(cpp, pk, ψ, sk) outputs 1, then L should show that A has
a credential with attributes ~A for which there exists an α with ψ( ~A, α) 6=⊥.
Formally, an explanation list L contains one entry per operation that A requested during the
experiment.
• For ShowVrfy or Update operations, the ith entry is a tuple ( ~Ai, αi).
• For Issue operations, the entry is some hidden parameter αi.
These entries naturally induce sets Ei of attribute vectors that we expect A to have after the ith
operation. Initially, E0 = ∅. Then inductively:
• if the ith operation is ShowVrfy, no credentials are issued, i.e. Ei = Ei−1.
• if the ith operation is Issue(cpp, pk, ψ, sk), we expect A to now have a credential with attributes
ψ(⊥, αi), i.e. Ei = Ei−1 ∪ {ψ(⊥, αi)} if ψ(⊥, αi) 6=⊥.
• if the ith operation is Update(cpp, pk, ψ, sk) (and Update output 1), we expect A to now have
a credential with attributes ψ( ~Ai, αi), i.e. Ei = Ei−1 ∪ {ψ( ~Ai, αi)} if ψ( ~Ai, αi) 6=⊥. If Update
output 0, we expect no new credential to have been issued, i.e. Ei = Ei−1.
We say that an explanation list L is consistent if it explains all the instances where ShowVrfy or
Update output 1:
• if the ith operation was ShowVrfy(cpp, pk, φ) with output 1, then the list’s ( ~Ai, αi) fulﬁlls φ
(i.e. φ( ~Ai, αi) = 1) and ~Ai is the result of an earlier issue/update operation (i.e. ~Ai ∈ Ei−1).
• if the ith operation was Update(cpp, pk, ψ, sk) with output 1, then the list’s ( ~Ai, αi) fulﬁlls ψ
(i.e. ψ( ~Ai, αi) 6=⊥) and ~Ai is the result of an earlier issue/update operation (i.e. ~Ai ∈ Ei−1).
Deﬁnition 6 (Soundness). We say that Π is sound if there exists an expected polynomial time
algorithm E (probability for runtime is over A’s randomness rA and E’s randomness), such that for
all ppt adversaries A, there exists a negligible function negl with
Pr[Expsound(Π,A,E, λ) = 1] ≤ negl(λ)
for all λ.
(cid:5)
10
Expsound(Π,A,E, λ):
cpp ← Setup(G(1λ)), (1n, st) ← A(cpp), for some n ∈ N
(pk, sk) ← IssuerKeyGen(cpp, 1n)
Run AIssue(cpp,pk,·,sk),Update(cpp,pk,·,sk),ShowVrfy(cpp,pk,·)(pk, st)
Let rA be the randomness of A
Let rIssue, rUpdate, rShowVrfy be the oracles’ randomness.
Run L ← EA(cpp, rA, rIssue, rUpdate, rShowVrfy).
Output 0 if L is consistent, otherwise output 1
Figure 1: Soundness experiment for UACS
A few technical notes: the randomness rA, rIssue, rUpdate, and rShowVrfy together with oracle access
to A can be used by E to eﬀectively re-run the experiment exactly as it happened before. It can then
use, for example, forking techniques to extract relevant witnesses from A. The requirement that
E must be eﬃcient (expected polynomial time) is somewhat arbitrary at this point: the deﬁnition
would still make sense if E’s runtime were unrestricted, since E is just a way to express that there
must exist a consistent explanation. However, for constructions that use UACS as a primitive (such
as in Section 3.3 and in our incentive system later), E must often be eﬃcient so that an eﬃcient
reduction can run E to obtain A’s hidden values. This eﬀectively implies that in a sound UACS, A
must know (in the sense of an argument of knowledge) the values ~A, α it uses for issue/update/show.
3.3 A Note on User Secrets and Pseudonyms
Usually, users in a credential system have a personal key usk that is embedded in their credentials.
They can derive any number of unlinkable pseudonyms N from usk. UACS generalize this: usk and
pseudonyms are not immediate part of the deﬁnition, but because UACS naturally supports hidden
attribute issuing, usk can be seen as just another UACS attribute.
To implement user keys and pseudonyms in UACS, one can use the following template: The user
chooses usk randomly from a superpolynomial-size domain. Pseudonyms N are commitments to usk,
i.e. (N, o) ← Commit(pp, pk, usk). The user privately stores the open value o for the pseudonym.
Assume the user identiﬁed himself with the pseudonym N. To receive a credential on attributes
~A, the user sets his hidden parameter to α = (usk, o) and the update function (1) checks if N opens
to usk using o and then (2) embeds usk as an attribute into the credential:
((usk, ~A) if Vrfy(pp, pk, N, o, usk) = 1
ψ(⊥, α) =
⊥ otherwise
This ensures that only the user who created N can receive the credential and that the usk embedded
into it is consistent with N.
Similarly, show predicates φ can be modiﬁed such that the user supplies the additional hidden
parameter α = o and φ additionally checks that the commitment N opens to the user secret
embedded in the credential (ensuring that the credential actually belongs to the user behind N).
When updating a credential, the update function ψ should always leave the usk attribute intact.
As a technical note on security, if the commitment is computationally hiding, then simulation
anonymity can be used to argue that anonymity is preserved: the protocols can be simulated without
usk or o. This also motivates why we chose a simulation-based anonymity deﬁnition: a reduction to
the commitment hiding property would have to embed a challenge commitment N into some UACS
11
protocol, which it then needs to be able to simulate because without an open value, it cannot run
the protocol honestly. If the commitment is computationally binding, then soundness implies that E
can extract an open value o. For example, in a scenario where a user can use the same pseudonym
for two diﬀerent usk, a consistent explanation would contain two open values to break the binding
property of the commitment. This motivates the choice of restricting the UACS extractor E to
(expected) polynomial time, as otherwise, the reduction to the commitment binding property would
not be eﬃcient.
4 Generic Construction of UACS
An UACS can be generically constructed from any blind signature scheme Πsig = (KeyGensig,
Commitsig, BlindSignsig, BlindRcvsig) (Deﬁnition 1) as follows:
Keys The public parameters cpp of the UACS are the public parameters of Πsig plus a zero-
knowledge argument common reference string (this will later allow us to simulate zero-knowledge
arguments). For the issuer, IssuerKeyGen(cpp, 1n)] generates the key pair (pk, sk) by running the
blind signature scheme’s key generation KeyGensig(pp, 1n) to get a key for blocks of n messages.
Showing credentials A credential cred with attributes ~A is simply a signature σ on ~A under the
issuer’s pk. Showing a credential (ShowPrv(cpp, pk, φ, α, cred = σ) ↔ ShowVrfy(cpp, pk, φ)) simply
has the user run a zero-knowledge argument of knowledge
ZKAK[( ~A, α, σ); Vrfysig(pp, pk, ~A, σ) = 1 ∧ φ( ~A, α) = 1]
proving that he is in possession of a valid signature on hidden attributes ~A and knows α such that φ
is satisﬁed. ShowVrfy outputs 1 if and only if the proof is accepted.
Updating and issuing credentials For Update(cpp, pk, ψ, sk) ↔ UpdRcv(cpp, pk, ψ, α, cred), the
user has a credential cred = σ, which is a signature on ~A, and wants a signature on ~A∗ := ψ( ~A, α).
He computes a commitment c to ~A∗. He proves that c is well-formed and that he possesses a
signature σ on ~A:
ZKAK[( ~A, σ, α, r); c = Commitsig(pp, pk, ψ( ~A, α), r)
∧ Vrfysig(pp, pk, ~A, σ) = 1 ∧ ψ( ~A, α) 6=⊥].
If the proof is rejected, the issuer outputs 0 and aborts (this ensures that the user can only update
if he possesses an old credential with ψ( ~A, α) 6=⊥). Otherwise, the issuer will output 1 after the rest
of the protocol. The issuer runs BlindSignsig(pp, pk, sk, c), while the user runs BlindRcvsig(pp, pk, ~A∗,
r). For the user, BlindRcvsig outputs a new signature σ∗. The user checks that σ∗ is valid signature
Vrfysig(pp, pk, ~A∗, σ∗) != 1. If so, he knows that σ∗ is a valid credential on his expected attributes
and outputs cred∗ = σ∗. Otherwise, he outputs ⊥.
Issuing a credential (Issue(cpp, pk, ψ, sk) ↔ Receive(cpp, pk, ψ, α)) works similarly, but the user
commits to ψ(⊥, α) and he omits the part about σ in the ZKAK (only proves that c is well-formed
and ψ(⊥, α) 6=⊥).
Construction 7. Let Πsig be a blind signature scheme. We deﬁne an updatable credential system
Πuacs as described above.
A full formal description can be found in Appendix B.
12
Correctness and security Correctness of the above construction follows immediately from
correctness of the underlying blind signature scheme Πsig. For security, we have the following two
theorems:
Theorem 8. If the underlying blind signature scheme has perfect message privacy (Deﬁnition 18),
then Construction 7 has simulation anonymity (Deﬁnition 5).
Theorem 9. If the underlying blind signature scheme is unforgeable (Deﬁnition 17), then Construc-
tion 7 is sound (Deﬁnition 6).
The proofs of the above theorems are straight-forward reductions to the corresponding blind
signature properties. They are presented in Appendix C.
5 Eﬃcient Instantiation of UACS
Since there exist zero-knowledge arguments of knowledge for all of NP, almost arbitrary update
functions are supported by this construction. Because those generic zero-knowledge arguments are
not necessarily considered practically eﬃcient, in practice one usually wants to restrict the class of
update functions. For example, a large class of statements is supported by Sigma protocols (such as
generalizations of Schnorr’s protocol), which are very eﬃcient (see, for example, [BBB+18]). The
blind signature scheme by Pointcheval and Sanders [PS16] is a good candidate to use in conjunction
with Sigma protocols. If the update function is suﬃciently “simple” (i.e. the check ψ( ~A, α) != ~A∗
can be eﬃciently implemented as a Sigma protocol), our construction is eﬃcient.
6 Incentive Systems
In an incentive system, there are two roles: users and the provider. The provider operates a point
collection system in order to incentivize certain user behavior. Users gain points for certain actions
(e.g., buying something), which they later want to redeem for some bonus item (e.g., a frying pan).
A user privately stores his points in a token. We will usually talk about multiple users and a single
provider.
6.1 Structure of an Incentive System
An incentive system Πinsy consists of the following ppt algorithms Setup, KeyGen, IssuerKeyGen,
Link, VrfyDs, Trace, as well as interactive protocols Issue ↔ Join, Credit ↔ Earn, and Spend ↔ Deduct.
We explain them in the following.
Setup and key generation We assume that a trusted party has already generated public
parameters pp ← G(1λ) (like in UACS). To set up an incentive system, a trusted party generates
incentive-system-speciﬁc parameters ispp ← Setup(pp). We assume that some maximum point score
vmax is encoded in ispp and that this limit is large enough never to be hit in practice.
To join the system, a provider runs IssuerKeyGen(ispp) to obtain a key pair (pk, sk). He publishes
pk and distributes sk to all store terminals that can issue points to users (these can be, for example,
distributed over multiple physical stores). For the sake of this explanation, we will distinguish the
provider and individual store terminals.
When users want to join the system, they run KeyGen(ispp) and store the resulting key pair
(upk, usk) (e.g., on their smartphone).
13
Obtaining a token To obtain a token with balance 0 from the provider (or store terminal), the
user sends his upk to the provider and identiﬁes himself (this is out of the scope of the incentive
system. For example, the user could sign upk with some signature key stored on their digital
passport). The provider associates upk to the user’s real identity (so that in case of dispute, the
user can be identiﬁed from upk). Then, the provider runs Issue(ispp, pk, upk, sk) interacting with the
user running Join(ispp, pk, upk, usk). Afterwards, Join outputs a token token and a double-spending
identiﬁer dsid to the user (these are hidden from the provider). The user stores his current token
token, its current dsid and value v (for this fresh token, v = 0, i.e. no points have been collected yet).
dsid can be seen as a random ID for the token, which will play a role in preventing double-spending.
Earning and spending points After obtaining a token token from the provider, the user can
start collecting points. Assume the user buys something in a store, for which he should receive k
points. To grant the points, the store terminal runs Credit(ispp, pk, k, sk) interacting with the user
running Earn(ispp, pk, k, usk, token). Afterwards, Earn outputs a new token token∗ to the user. If