# pwnable.kr alloca详细分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近在刷`pwnable.kr [Rookiss]`，题目都好有意思，其中一题`alloca`虽然分值不高，但分析过程很值得学习。
## 题目描述
    Let me give you a lesson: "How to prevent buffer overflow?"
    ssh PI:EMAIL -p2222 (pw:guest)
先用ssh登陆进去看看
    alloca@ubuntu:~$ ls -al
    total 36
    drwxr-x---  5 root alloca     4096 Mar 29  2018 .
    drwxr-xr-x 93 root root       4096 Oct 10 22:56 ..
    d---------  2 root root       4096 Sep 20  2015 .bash_history
    dr-xr-xr-x  2 root root       4096 Jul 13  2016 .irssi
    drwxr-xr-x  2 root root       4096 Oct 23  2016 .pwntools-cache
    -r-xr-sr-x  1 root alloca_pwn 7804 Mar 29  2018 alloca
    -rw-r--r--  1 root root       1942 Mar 29  2018 alloca.c
    -rw-r-----  1 root alloca_pwn   64 Sep 24  2015 flag
题目提供了一个`alloca`二进制文件，以及程序的源码
    #include 
    #include 
    #include 
    void callme(){
            system("/bin/sh");
    }
    void clear_newlines(){
            int c;
            do{
                    c = getchar();
            }while (c != 'n' && c != EOF);
    }
    int g_canary;
    int check_canary(int canary){
            int result = canary ^ g_canary;
            int canary_after = canary;
            int canary_before = g_canary;
            printf("canary before using buffer : %dn", canary_before);
            printf("canary after using buffer : %dnn", canary_after);
            if(result != 0){
                    printf("what the ....??? how did you messed this buffer????n");
            }
            else{
                    printf("I told you so. its trivially easy to prevent BOF :)n");
                    printf("therefore as you can see, it is easy to make secure softwaren");
            }
            return result;
    }
    int size;
    char* buffer;
    int main(){
            printf("- BOF(buffer overflow) is very easy to prevent. here is how to.nn");
            sleep(1);
            printf("   1. allocate the buffer size only as you need itn");
            printf("   2. know your buffer size and limit the input lengthnn");
            printf("- simple right?. let me show you.nn");
            sleep(1);
            printf("- whats the maximum length of your buffer?(byte) : ");
            scanf("%d", &size);
            clear_newlines();
            printf("- give me your random canary number to prove there is no BOF : ");
            scanf("%d", &g_canary);
            clear_newlines();
            printf("- ok lets allocate a buffer of length %dnn", size);
            sleep(1);
            buffer = alloca( size + 4 );    // 4 is for canary
            printf("- now, lets put canary at the end of the buffer and get your datan");
            printf("- don't worry! fgets() securely limits your input after %d bytes :)n", size);
            printf("- if canary is not changed, we can prove there is no BOF :)n");
            printf("$ ");
            memcpy(buffer+size, &g_canary, 4);      // canary will detect overflow.
            fgets(buffer, size, stdin);             // there is no way you can exploit this.
            printf("n");
            printf("- now lets check canary to see if there was overflownn");
            check_canary( *((int*)(buffer+size)) );
            return 0;
    }
程序模仿`canary`的原理，使用`alloca`开辟栈空间后，在`buffer`后面加4字节的`g_canary`，同时在`check_canary`中检查栈中的`canary`是否被修改。程序里面也预留了一个`callme`的后门，方便我们getshell。
## alloca函数
先看一下本题关键函数`alloca`是什么东东。先在Ubuntu里面看看函数描述`man alloca`
    ALLOCA(3)                                  Linux Programmer's Manual                                  ALLOCA(3)
    NAME
           alloca - allocate memory that is automatically freed
    SYNOPSIS
           #include 
           void *alloca(size_t size);
    DESCRIPTION
           The  alloca()  function  allocates size bytes of space in the stack frame of the caller.  This temporary
           space is automatically freed when the function that called alloca() returns to its caller.
`alloca`跟`malloc/calloc/realloc`类似，都是内存分配函数，但是它是在当前函数的栈帧上分配存储空间，而不是在堆中。当函数返回时会自动释放它所使用的栈帧，不必为释放空间而费心。
## 程序分析
先看一下程序开了什么保护
    [*] '/home/kira/pwn/pwnable.kr/alloca'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
可以看到基本没开保护，我们把下载下来的二进制文件拖入ida看一下伪代码
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      void *v3; // esp
      void *retaddr; // [esp+Ch] [ebp+4h]
      puts("- BOF(buffer overflow) is very easy to prevent. here is how to.n");
      sleep(1u);
      puts("   1. allocate the buffer size only as you need it");
      puts("   2. know your buffer size and limit the input lengthn");
      puts("- simple right?. let me show you.n");
      sleep(1u);
      printf("- whats the maximum length of your buffer?(byte) : ");
      __isoc99_scanf("%d", &size);
      clear_newlines();
      printf("- give me your random canary number to prove there is no BOF : ");
      __isoc99_scanf("%d", &g_canary);
      clear_newlines();
      printf("- ok lets allocate a buffer of length %dnn", size);
      sleep(1u);
      v3 = alloca(16 * ((size + 34) / 0x10u));
      buffer = (char *)(16 * (((unsigned int)&retaddr + 3) >> 4));
      puts("- now, lets put canary at the end of the buffer and get your data");
      printf("- don't worry! fgets() securely limits your input after %d bytes :)n", size);
      puts("- if canary is not changed, we can prove there is no BOF :)");
      printf("$ ");
      *(_DWORD *)&buffer[size] = g_canary;
      fgets(buffer, size, stdin);
      putchar(10);
      puts("- now lets check canary to see if there was overflown");
      check_canary(*(_DWORD *)&buffer[size]);
      return 0;
    }
IDA的伪代码几乎与源码一致，唯一有点差别的就是原来的`buffer = alloca( size + 4 );`变成了
      v3 = alloca(16 * ((size + 34) / 0x10u));
      buffer = (char *)(16 * (((unsigned int)&retaddr + 3) >> 4));
这应该是ida的识别问题，我们还是直接看汇编吧
    .text:08048742 ; 19:   v3 = alloca(16 * ((size + 34) / 0x10u));
    .text:08048742                 add     esp, 10h