### Hardware Backdooring: A Practical Demonstration

**Author:**
Jonathan Brossard  
- Security Research Engineer & CEO, Toucan System, France and Australia  
- Presented at Black Hat Briefings and Defcon Conferences, Las Vegas, 2012

**Abstract:**
This article demonstrates that permanent backdooring of hardware is practical. We have developed a proof-of-concept malware for the Intel architecture, named Rakshasa, capable of infecting over a hundred different motherboards. The primary effect of Rakshasa is to disable NX (No eXecute) protection permanently and remove SMM (System Management Mode) related fixes from the BIOS, UEFI (Unified Extensible Firmware Interface) firmware, or PCI (Peripheral Component Interconnect) firmware. This results in a permanent reduction in the security of the backdoored computer, even after complete erasure of hard disks and reinstallation of a new operating system.

We will also show that existing work on MBR (Master Boot Record) subversions, such as bootkitting and pre-boot authentication software bruteforce or faking, can be easily embedded into Rakshasa. Additionally, Rakshasa is built using open-source software, including Coreboot, SeaBIOS, and iPXE, making its source code publicly available and non-malicious, thus extremely difficult to detect.

Finally, we will demonstrate that backdooring the BIOS or PCI firmware to allow silent booting of a remote payload via an HTTP(S) connection is equally practical and undermines all hope of detecting the infection using current antivirus and forensic tools. Our aim is to raise awareness in the industry regarding the dangers associated with the PCI standard, particularly questioning the use of non-open-source firmware shipped with any computer and challenging their integrity and intended purpose. This will also lead to the upgrading of best practices in companies regarding forensics and post-intrusion analysis by including the aforementioned firmware as part of their scope of work.

**Keywords:**
Hardware backdooring, PCI firmware, BIOS, EFI, ROMkitting, remote boot, botnet.

---

### Table of Contents
1. Introduction
2. Related Work
3. Overview of the IBM PC and Its Legacy Problems
4. Designing the Perfect Backdoor: Scope of Work
5. Implementation Details: Rakshasa
6. Inner Working of Rakshasa
7. Embedded Features of Rakshasa
8. How to Properly Build a Botnet from the BIOS: BIOSBotnets
9. Why (Possibly Hardware-Assisted) Encryption Won't Solve the Problem
10. Remediation
11. Conclusion
12. Acknowledgments

---

### 1. Introduction
A recent report from the US-China Economic and Security Review Commission by Northrop Grumman Corp, titled "Occupying the Information High Ground: Chinese Capabilities for Computer Network Operations and Cyber Espionage," concluded that:

"This close relationship between some of China's—and the world's—largest telecommunications hardware manufacturers creates a potential vector for state-sponsored or state-directed penetrations of the supply chains for microelectronics supporting U.S. military, civilian government, and high-value civilian industries such as defense and telecommunications, though no evidence for such a connection is publicly available."

In other words, since China has become the de facto manufacturer of most IT equipment globally, it can backdoor any computer at will. Any party in the supply chain can do so. We believe this is an understatement: we will demonstrate the practicality of such backdooring using existing open-source software, lowering the bar for such an attack from state-level or large corporations to any 16-bit assembly expert, and show that installing such a backdoor remotely is equally practical.

### 2. Related Work
The first known virus, Brain, was allegedly created in Romania in the early 1980s. It targeted the Master Boot Record (MBR) of the first bootable hard drive to gain early execution and used floppy disks to propagate. This attack vector was replicated by thousands of viruses during the 1980s and 1990s until the advent of the internet, when viruses shifted to userland to benefit from internet access as a propagation vector.

Gaining early execution has long been considered the best way to achieve maximum privileges on IBM PCs. In 2009, at CanSecWest, Anibal Saco and Alfredo Ortega demonstrated how they managed to patch a Phoenix-Award BIOS to embed malicious features, such as modifying the shadow file on Unix-like systems or patching Microsoft Windows binaries. In 2007, John Heasman showed that infecting the Extensible Firmware Interface (EFI) bootloader would lead to similar results. While the former targeted a specific BIOS, the latter could be mitigated by reinstalling a clean bootloader. Modifying the file system is not stealthy and leaves clear forensic evidence.