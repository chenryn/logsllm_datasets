## 配置 pgcat for PolarDB 读写分离连接池  
### 作者  
digoal  
### 日期  
2022-12-02  
### 标签  
PostgreSQL , PolarDB , connection pool , balance , pgcat , pgbouncer   
----  
## 背景  
PolarDB 开源数据库支持云原生存算分离分布式架构, 一份存储支持多个计算节点, 目前是一写多读的架构. 内核已经很强大了, 怎么实现业务透明的读写分离, 还缺一个连接池, pgcat是不错的选择.    
pgcat支持连接池、sharding、读写负载均衡等, 更多功能请参考其官网 https://github.com/levkk/pgcat   
## pgcat部署例子  
这个例子直接在PolarDB容器中部署pgcat.  
PolarDB部署请参考:  
- [《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB简单部署》](../202209/20220908_02.md)  
进入PolarDB环境  
```  
docker exec -it 67e1eed1b4b6 bash  
```  
安装rust  
```  
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  
source "$HOME/.cargo/env"  
```  
下载pgcat  
```  
git clone --depth=1 https://github.com/levkk/pgcat  
```  
安装pgcat  
```  
cd pgcat/  
cargo build --release  
```  
配置pgcat, 修改为PolarDB数据库连接串  
```  
vi pgcat.toml  
pgcat.toml  
#  
# PgCat config example.  
#  
#  
# General pooler settings  
[general]  
# What IP to run on, 0.0.0.0 means accessible from everywhere.  
host = "0.0.0.0"  
# Port to run on, same as PgBouncer used in this example.  
port = 6432  
# Whether to enable prometheus exporter or not.  
enable_prometheus_exporter = true  
# Port at which prometheus exporter listens on.  
prometheus_exporter_port = 9930  
# How long to wait before aborting a server connection (ms).  
connect_timeout = 5000  
# How much time to give the health check query to return with a result (ms).  
healthcheck_timeout = 1000  
# How long to keep connection available for immediate re-use, without running a healthcheck query on it  
healthcheck_delay = 30000  
# How much time to give clients during shutdown before forcibly killing client connections (ms).  
shutdown_timeout = 60000  
# For how long to ban a server if it fails a health check (seconds).  
ban_time = 60 # seconds  
# If we should log client connections  
log_client_connections = false  
# If we should log client disconnections  
log_client_disconnections = false  
# Reload config automatically if it changes.  
autoreload = false  
# TLS  
# tls_certificate = "server.cert"  
# tls_private_key = "server.key"  
# Credentials to access the virtual administrative database (pgbouncer or pgcat)  
# Connecting to that database allows running commands like `SHOW POOLS`, `SHOW DATABASES`, etc..  
admin_username = "admin_user"  
admin_password = "admin_pass"  
# pool  
# configs are structured as pool.  
# the pool_name is what clients use as database name when connecting  
# For the example below a client can connect using "postgres://sharding_user:sharding_user@pgcat_host:pgcat_port/sharded_db"  
[pools.sharded_db]  
# Pool mode (see PgBouncer docs for more).  
# session: one server connection per connected client  
# transaction: one server connection per client transaction  
pool_mode = "transaction"  
# If the client doesn't specify, route traffic to  
# this role by default.  
#  
# any: round-robin between primary and replicas,  
# replica: round-robin between replicas only without touching the primary,  
# primary: all queries go to the primary unless otherwise specified.  
default_role = "any"  
# Query parser. If enabled, we'll attempt to parse  
# every incoming query to determine if it's a read or a write.  
# If it's a read query, we'll direct it to a replica. Otherwise, if it's a write,  
# we'll direct it to the primary.  
query_parser_enabled = true  
# If the query parser is enabled and this setting is enabled, the primary will be part of the pool of databases used for  
# load balancing of read queries. Otherwise, the primary will only be used for write  
# queries. The primary can always be explicitly selected with our custom protocol.  
primary_reads_enabled = true  
# So what if you wanted to implement a different hashing function,  
# or you've already built one and you want this pooler to use it?  
#  
# Current options:  
#  
# pg_bigint_hash: PARTITION BY HASH (Postgres hashing function)  
# sha1: A hashing function based on SHA1  
#  
sharding_function = "pg_bigint_hash"  
# Automatically parse this from queries and route queries to the right shard!  
automatic_sharding_key = "id"  
# Credentials for users that may connect to this cluster  
[pools.sharded_db.users.0]  
username = "sharding_user"  
password = "sharding_user"  
# Maximum number of server connections that can be established for this user  
# The maximum number of connection from a single Pgcat process to any database in the cluster  
# is the sum of pool_size across all users.  
pool_size = 9  
# Maximum query duration. Dangerous, but protects against DBs that died in a non-obvious way.  
statement_timeout = 0  
[pools.sharded_db.users.1]  
username = "other_user"  
password = "other_user"  
pool_size = 21  
statement_timeout = 15000  
# Shard 0  
[pools.sharded_db.shards.0]  
# [ host, port, role ]  
servers = [  
    [ "127.0.0.1", 5432, "primary" ],  
    [ "localhost", 5433, "replica" ],  
    [ "localhost", 5434, "replica" ]  
]  
# Database name (e.g. "postgres")  
database = "shard0"  
[pools.sharded_db.shards.1]  
servers = [  
    [ "127.0.0.1", 5432, "primary" ],  
    [ "localhost", 5433, "replica" ],  
    [ "localhost", 5434, "replica" ]  
]  
database = "shard1"  
[pools.sharded_db.shards.2]  
servers = [  
    [ "127.0.0.1", 5432, "primary" ],  
    [ "localhost", 5433, "replica" ],  
    [ "localhost", 5434, "replica" ]  
]  
database = "shard2"  