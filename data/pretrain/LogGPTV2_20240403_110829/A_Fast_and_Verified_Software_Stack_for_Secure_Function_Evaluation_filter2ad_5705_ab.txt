the input-privacy goals of SFE. Also, Bob cannot reveal information
that would allow Alice to encode anything other than x1, since
this would reveal more than f (x1, x2). To solve this problem, Yao
proposed the use of an oblivious transfer (OT) protocol. This is a
(lower-level) SFE protocol for a very simple functionality that allows
Alice to obtain the labels that encode x1 from Bob, without revealing
anything about x1 and learning nothing more than the labels she
requires.7 The protocol is completed by Alice evaluating the circuit,
recovering the output, and providing the output value back to Bob.
Excellent descriptions of Yao’s SFE protocol with slightly different
security proofs can be found in [12, 44].
A modular proof of security. Our starting point for producing a
formally verified implementation of Yao’s protocol is to transpose
to EasyCrypt the modular security proof by Bellare, Hoang and
Rogaway [12] (BHR). The central component in this proof is a new
abstraction called a garbling scheme that captures the functionality
and security properties of the circuit garbling technique that is
central to Yao’s SFE protocol. This new abstraction was used by
BHR to make precise the different security notions that could apply
to this garbling step. This permits separating the design and analysis
of efficient garbling schemes from higher level protocols, which may
rely on different security properties of the garbling component.8
Figure 2 shows the structure of the proof of security for Yao’s
protocol given in [12] (we focus only on the result that is relevant
for this paper). We depict constructions as rectangles with grey
captions and primitives (i.e., cryptographic abstractions with a well-
defined syntax and security model) as rounded rectangles with
black captions. Security proofs are represented by dashed arrows
and implications between notions as solid arrows. A construction
enclosing a primitive in the diagram indicates that the primitive is
used as an abstract building block in its security proof. For example,
arrow (1) indicates that the first step in the proof is the construction
of a dual key cipher (DKC) using a standard PRF security assumption
via a construction that we call dual masking. The same primitive
is also constructed from an ideal cipher via the double encryption
construction.
7Luckily, efficient protocols for the OT functionality exist, thereby eliminating what
could otherwise be a circular dependency.
8Garbled circuits are used in Yao’s SFE protocol, but have found many other applica-
tions in cryptography.
A DKC is a tweakable deterministic encryption scheme that can
be used to lock secret keys (corresponding to gate output wire
labels) and is keyed by two other independent keys (corresponding
to gate input wire labels). Informally, the dual masking construction
applies two masks to the encrypted key, computed as PRFKi (T ) for
i = 1, 2, where T is the tweak. The DKC security model is designed
in an ad hoc way to be just strong enough for constructing garbling
schemes from a wide range of assumptions, including interesting
instantiations such as double encryption. DKC security is a real-
or-random notion, where the attacker has an unbounded number
of keys to choose from, both for posing as encryption keys and
as encrypted keys. One of these secret keys is singled out as the
challenge secret key, and it can never be encrypted nor revealed
to the attacker (who may see all the other keys). The model also
captures the fact that it is convenient to leak the least significant
bit of such keys in order to encode the topology of a circuit.
The second step in the proof (2) is to construct a garbling scheme
from a (DKC). There are two security definitions for garbling schemes:
indistinguishability-based (IND) and simulation-based (SIM). The
former is used as a stepping stone (hence its dashed presentation
in the diagram) to proving SIM-security. Indeed, the two notions
are proven to be equivalent for certain classes of garbling schemes
(this is shown as step 3 in the diagram). Proving that a concrete
construction called Garble1 achieves IND security is the most chal-
lenging part of the proof: it involves a hybrid argument over those
wires in the circuit that are not visible to an attacker (the security
model allows the attacker to observe the opening of the circuit for
one concrete input).
The final step (4) in the proof is to show that Yao’s technique
of combining an oblivious transfer protocol— two-party passively
(2PPP) secure—with a SIM-secure garbling scheme yields a 2PPP se-
cure SFE protocol. This step consists of a game-based argument with
two relatively simple transitions, but involving simulation-based
definitions and combined universal and existential quantifications
over adversarial algorithms.
Our Proof. We show in Figure 3 the structure of our EasyCrypt
formalization. It is visible in the figure that the main structure of
the proof, steps 1-4 are very close to the original proof of [12]. The
only deviation here is that we simplify the Dual Key Cipher security
game to a slightly stronger variant that is still satisfied by the dual
masking instantiation, but which has an internal structure that
makes the proof of security of the garbling scheme significantly
easier. Intuitively, the difference is that one imposes that the tweak
effectively makes encryptions of the same value indistinguishable
from each other. This excludes some secure DKC instantiations that
we do not consider in this paper. To further simplify our proofs,
our DKC security definition is also parametrized by two integer
parameters c and pos. The first parameter provides an upper-bound
on the number of keys in the game, so that they can all be sampled
at the beginning of the security experiment. The second parameter
specifies an index in the range [1..c] that will be used in oracle
queries as the index for the hidden secret key.
Figure 3 also shows three additional proof steps (5, 7 and 8, shown
in blue). These correspond to instantiation (i.e., restricted forms of
composition) steps that are often implicit in hand-written crypto-
graphic proofs. For example, suppose construction C
is proven
P2
1
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1992Yao’s Protocol
SomeOT
DDH
Entropy Smoothing
Dual Masking
1
PRF
SomeGarble
Dual Key Cipher’
7
4
Implementation
8
SFE
2PPP Secure
6
5
2
Oblivious Transfer
2PPP Secure
Garbling Scheme
SIM Secure
3
Garbling Scheme
IND Secure
Figure 3: Structure of our verified security proof of an im-
plementation of Yao’s protocol.
P3
2
C2
1
to be a valid instantiation for primitive P1 under the assumption
that instantiations for abstract primitive P2 exist. Suppose also that
construction C
is proven to be a valid instantiation of primitive
P2, assuming the existence of a valid instantiation for (lower level)
primitive P3. Then, this implies that C
is also a valid instantiation
of P1 under assumption P3.
Such steps are critical in making our main Theorem (Theorem 2.1
below) apply to a concrete and efficient implementation of Yao’s
protocol that can readily be extracted in to OCaml code from its
EasyCrypt description. To obtain such a result our formalization
needs to explicitly include theorems that instantiate abstract secu-
rity results into concrete security bounds for the implementation.
More precisely, one needs to prove i. that the implementation is
functionally equivalent to the composition of a concrete oblivious
transfer and garbling schemes; and ii. that this implies that the secu-
rity bound for the generic SFE security theorem (4 in the figure) can
be instantiated into a concrete overall bound by plugging in secu-
rity bounds obtained by instantiating all intermediate results all the
way down to the PRF, DDH and entropy smoothing assumptions.
EasyCrypt enables formalizing both the complex abstract secu-
rity proofs and the instantiation steps (with very little overhead
in the case of the latter). The main theorem in our formalization
states the following, for any upper bound c on the total number of
wires in the circuit and any upper bound n on the number of input
wires in the circuit.
Theorem 2.1. For all SFE adversaries A against the EasyCrypt
implementation Impl of Yao’s protocol, there exist efficient simulator S
and adversaries BDDH, BES and Bi
(BES)
AdvSFE
where εPRF = max1≤i ≤c (Adv(Bi
PRF)), and AdvPRF, AdvDDH and
AdvES represent the advantages against the PRF, the Diffie-Hellman
group and entropy smoothing hash function used as primitives.
PRF for i ∈ [1..c], such that:
(BDDH) + n · AdvES
Impl,S(A) ≤ c · εPRF + n · AdvDDH
Using Generic Lemmas. In Cryptography, it is common to repeat
proof techniques in different proofs or even inside the same proof.
As a side contribution of our work, we formalize a generic hybrid
argument that is included as part of EasyCrypt’s library of veri-
fied transformations. The objective of this library is to formalize
often-used proof techniques once and for all, enabling the user to
perform proofs “by a hybrid argument”, or “by eager sampling”,
whilst formally checking that all side conditions are fulfilled at the
time the lemma is applied.
We now describe the generic hybrid argument.
type input, output, inleaks, outleaks.
module type Orcl = { proc o(_:input) : output }.
module type Orclb = {
proc leaks(_:inleaks): outleaks
proc oL (_:input) : output
proc oR (_:input) : output
}.
module type AdvHy (Ob :Orclb , O:Orcl) = {
proc main () : bool
}.
module Ln (Ob :Orclb , A:AdvHy) = {
module O: Orcl = {
(∗ increment C.c and call Ob .oL ∗)
}
module A' = A(Ob , O);
proc main () : bool = {
C.c = 0; return A'.main();
}
}.
module Rn (Ob :Orclb , A:Adv) = {
(∗ Same as Ln but use Ob .oR ∗)
}.
op q : int.
module B(A:AdvHy, Ob :Orclb, O:Orcl) = {
module LR = {
var l, l0 : int
proc orcl(m:input):output = {
var r : output;
if (l0 < l) r = Ob .oL (m);
else if (l0 = l) r = O.orcl(m);
else r = Ob .oR (m);
l = l + 1; return r;
}
}
module A' = A(Ob ,LR)
proc main():outputA = {
var r:outputA;
LRB.l0 ←$
[0..q−1]; LRB.l = 0;
return A'.main();
}
}.
lemma Hybrid: ∀ (Ob :Orclb {C,B}) (A:AdvHy {C,B,Ob }),
Pr[Ln(Ob ,A): res∧ C.c ≤ n] − Pr[Rn(Ob ,A): res∧ C.c ≤ n] =
q ∗ (Pr[Ln(Ob ,B(A)): res∧ B.l ≤ n ∧ C.c ≤ 1] −
Pr[Rn(Ob ,B(A)): res∧ B.l ≤ n ∧ C.c ≤ 1]).
Figure 4: Hybrid argument lemma.
As described in Figure 4, consider an adversary parameterized
by two modules. The first parameter Ob, implementing the module
type Orclb, provides a leakage oracle, a left oracle oL and right oR.
The second parameter O, implementing module type Orcl, provides
a single oracle o. The goal of an adversary implementing type AdvHy
is to guess, in at most n queries to O.o, if it is implementing the left
oracle Ob .oL or the right oracle Ob .oR. To express the advantage of
such an adversary, we write two modules: the first one, Ln, defines
a game where the adversary is called with O.o equal to Ob .oL, the
second one, Rn, uses Ob .oR instead. Both Ln and Rn use a variable C.c
to count the number of queries made to their oracle by the adversary.
We define the advantage of an adversary A in distinguishing Ob .oL
from Ob .oR as the difference of the probability of games Ln(Ob ,A)
and Rn(Ob ,A) returning 0. Given any distinguishing adversary A,
we construct a distinguishing adversary B that may use A but
always makes at most one query to oracle O.o.
The Hybrid lemma relates the advantages of any adversary A
with the advantage of its constructed adversary B when A is known
to make at most q queries to O.o. Note that the validity of the
Hybrid lemma is restricted to adversaries that do not have a direct
access to the counter C.c, or to the memories of B and Ob; this
is denoted by the notation AdvHy{C,B,Ob } in the EasyCrypt code.
Other lemmas shown in this paper also have such restrictions in
their formalizations, but they are as expected (that is, they simply
enforce a strict separation of the various protocols’, simulators’
and adversaries’ memory spaces) and we omit them for clarity.
The construction of B is generic in the underlying adversary A,
which can remain completely abstract. We underline that, for all
A implementing module type AdvHy, the partially-applied module
B(A) implements AdvHy as well and can therefore be plugged
in anywhere a module of type AdvHy is expected. This ability to
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1993generically construct over abstract schemes or adversaries is central
to handling modularity in EasyCrypt.
Finally, we observe that the Hybrid lemma applies even to an
adversary that may place queries to the individual Ob .oL and Ob .oR
oracles. It is of course applicable (and is in fact often applied) to
adversaries that do not place such queries.
An application example of the generic hybrid argument is our
proof of security of the oblivious transfer protocol. In Figure 5, we
describe the concrete two-party OT protocol in a purely functional
manner, making explicit local state shared between the various
stages of each party. For example, step1 outputs the sender’s local
state sts, later used by step3.
op step1 (m:(msg ∗ msg) array) (r:int array ∗ G) =
let (c,hkey) = r in
let sts = (m,дc ,hkey) in
let m1 = (hkey,дc ) in
(sts ,m1).
op step2 (b:bool array) (r:G array) m1 =
let (hkey,gc) = m1 in
let stc = (b,hkey,r) in
let m2 = if b then gc / дr else дr in
(stc ,m2).
op step3 sts (r:G) m2 =
let (m,gc,hkey) = sts in
let e = (H(hkey,m2
let m3 = (дr,e) in
m3.
r) ⊕ m0,
H(hkey,(gc/m2)r) ⊕ m1) in
op finalize stc m3 =
let (b,hkey,x) = stc in
let (gr,e) = m3 in
let res = H(hkey,grx ) ⊕ eb in
res.
clone OTProt as SomeOT with
type rand1 = G array,
type rand2 = (G array ∗ G) ∗ G,
op prot (b:input1) (rc :rand1) (m:input2) (rs :rand2) =
let (sts ,m1) = step1 m (fst rs ) in
let (stc ,m2) = step2 b rc m1 in
let m3 = step3 sts (snd rs ) m2 in
let res = finalize stc m3 in
let conv = (m1,m2,m3) in
(conv,(res,())).
Figure 5: A Concrete Oblivious Transfer Protocol.
We prove this protocol secure in the standard model via a reduc-
tion to the decisional Diffie-Hellman assumption and an entropy-
(A)
smoothing assumption on the hash function. We let AdvDDH
(A) be the advantage of an adversary A breaking the
and AdvES
DDH and the Entropy Smoothing assumptions, respectively.
Theorem 2.2 (OT-security of SomeOT). For all i ∈ {1, 2} and
OTi adversary Ai of type AdvOT
against the SomeOT protocol, we
can construct two efficient adversaries DDDH and DES, and a efficient
simulator S such that
i
AdvOTi
SomeOT,S (Ai ) ≤ n · AdvDDH
(DDDH
) + n · AdvES
(DES
).
In the proof of Theorem 2.2, both reductions first go to n-ary
versions of the DDH and Entropy-Smoothing hypotheses before
reducing these further to standard assumptions using the generic
hybrid argument lemma.
Extraction and Micro Benchmarks. Our verified implementa-
tion of Yao’s protocol is obtained via the extraction mechanism
included in recent versions of EasyCrypt. The only exceptions to
this are the low-level operations left abstract in the formalisation,
namely: i. abstract core libraries for randomness generation, the
cyclic group algebraic structure, a PRF relying on AES and the
entropy-smoothing hash of SomeOT. These are implemented using
Table 1: Timings (ms): P1 and P2 denote the parties, S1 and
S2 the SFE protocol stage; TTime denotes total time, OT the
time for OT computation, GT the garbling time and ET the
evaluation time.
Circuit NGatesTTimeP2 S1 GTP2 S1 OTP1 S1 OTP2 S2 OTP1 S2 OTP1 S2 ET
COMP32 301
408
ADD32
ADD64