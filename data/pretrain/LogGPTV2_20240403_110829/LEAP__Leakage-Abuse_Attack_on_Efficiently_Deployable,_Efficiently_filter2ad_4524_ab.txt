### 1. Introduction

Consider the following bit-strings:
- Column 3: 10110
- Row 4: 011001

Column 3 is unique, as are rows 2, 3, and 5. The sum of the bits in column 3 is 1 + 0 + 1 + 1 + 0 = 3, and the sum of the bits in row 2 is 1 + 0 + 0 + 1 + 1 + 0 = 3.

### 2.2 Background

#### 2.2.1 General Description of Searchable Encryption (SE)

In a searchable encryption (SE) scheme, a user encrypts her documents and uploads them to an untrusted server. Later, the user can issue a query containing a keyword (or a set of keywords) by generating and sending a query token to the server. The server then searches the stored encrypted documents and returns the documents (or their identifiers) that contain the queried keyword(s).

The setting we focus on is similar to the ones discussed in [5, 39] for Encrypted Document and Encrypted Search (EDESE) schemes. In this setting, keywords are encrypted using a keyed pseudorandom function and appended to the encrypted documents stored on the server. The process of querying a keyword involves the user deterministically generating a query token from the keyword and sending it to the server. The server then returns the encrypted documents associated with the query token.

An adversarial server could obtain:
1. The universe of encrypted documents and query tokens.
2. The relationship between each encrypted document and each query token, i.e., whether a query token is contained in an encrypted document.

LEAP relies on such leakage. Similar to [5, 21, 39], we consider only the "one-to-one" setting, where a query token corresponds to a single keyword. The "one-to-many" setting, where one query token may contain multiple keywords, is left for future work.

#### 2.2.2 Document-Keyword Matrix

Let \( F = \{d_1, \ldots, d_n\} \) denote a set of plaintext documents of a target user. Each document \( d_i \) is represented by a set of keywords \( W_i = \{w_{i,1}, \ldots, w_{i,m_i}\} \), which can be extracted using an extraction algorithm. Let \( W = \{w_1, \ldots, w_m\} \) denote the set of all keywords appearing in \( F \). The relationship between \( F \) and \( W \) is encoded in a document-keyword matrix \( A = [A_{ij}]_{m \times n} \), where \( A_{ij} = 1 \) if document \( d_j \) contains keyword \( w_i \), and \( A_{ij} = 0 \) otherwise. The matrix is illustrated as follows:

\[
\begin{pmatrix}
A_{1,1} & A_{1,2} & \cdots & A_{1,n} \\
A_{2,1} & A_{2,2} & \cdots & A_{2,n} \\
\vdots & \vdots & \ddots & \vdots \\
A_{m,1} & A_{m,2} & \cdots & A_{m,n}
\end{pmatrix}
\]

where:
- Column \( j \) represents document \( d_j \).
- Row \( i \) represents keyword \( w_i \).
- The sum of column \( j \) (column \( j \)-sum) captures the number of keywords in document \( d_j \).
- The sum of row \( i \) (row \( i \)-sum) captures the number of documents containing keyword \( w_i \).

#### 2.2.3 Encrypted Document-Query Token Matrix

Let \( E = \{ed_1, \ldots, ed_n\} \) be the encrypted document set corresponding to \( F \), and let \( Q = \{q_1, \ldots, q_m\} \) be the query token set corresponding to \( W \). We define an encrypted document-query token matrix \( B = [B_{ij}]_{m \times n} \), where \( B_{ij} = 1 \) if query token \( q_i \) is attached to encrypted document \( ed_j \), and \( B_{ij} = 0 \) otherwise. The matrix is illustrated as follows:

\[
\begin{pmatrix}
B_{1,1} & B_{1,2} & \cdots & B_{1,n} \\
B_{2,1} & B_{2,2} & \cdots & B_{2,n} \\
\vdots & \vdots & \ddots & \vdots \\
B_{m,1} & B_{m,2} & \cdots & B_{m,n}
\end{pmatrix}
\]

where:
- Column \( j \) represents encrypted document \( ed_j \).
- Row \( i \) represents query token \( q_i \).
- The sum of column \( j \) (column \( j \)-sum) captures the number of query tokens attached to \( ed_j \).
- The sum of row \( i \) (row \( i \)-sum) captures the number of encrypted documents where the sets of attached query tokens contain \( q_i \).

If column \( j \) of \( B \) matches column \( j' \) of \( A \), then \( ed_j \) is the encrypted version of \( d_{j'} \). Similarly, if row \( i \) of \( B \) matches row \( i' \) of \( A \), then the underlying keyword of \( q_i \) is \( w_{i'} \).

This matrix representation generalizes the inverted index used in most high-efficiency SE schemes.

### 3. Attack Model

#### 3.1 Attacker Type

As defined in [5, 21, 39], the attacker is an adversarial server who stores the encrypted documents and the corresponding query tokens. The attacker is passive, meaning it faithfully follows the EDESE schemes but attempts to learn more information than allowed by examining the observable information. This type of attacker is weaker than the active attacker addressed in [44], which can trick a user into adding a document chosen by the attacker. Additionally, the attacker has no access to any encryption or decryption oracles.

#### 3.2 Attacker Knowledge

The attacker's knowledge includes the leakage from the EDESE schemes and prior knowledge of the target user’s documents. The leakage from the EDESE schemes allows the attacker to determine the relationship between each encrypted document and each query token. In terms of prior knowledge, the attacker may know a subset of the plaintext documents of the target user, such as widely-distributed emails known to the attacker, as described in [5].

#### 3.3 Objective of Attacker

The main objective of the attacker is keyword recovery, which is to recover the underlying keywords of the user’s query tokens. Another objective is document recovery, which is to recover the relationship between known documents and encrypted documents.

### 4. LEAP

#### 4.1 Knowledge of Attacker

Let \( F = \{d_1, \ldots, d_n\} \) denote the full document set and \( W = \{w_1, \ldots, w_m\} \) denote the corresponding set of keywords. Let \( F' = \{d_{y_1}, \ldots, d_{y_{n'}}\} \) be the partial knowledge of the document set known to the attacker, and \( W' = \{w_{x_1}, \ldots, w_{x_{m'}}\} \) be the keyword set corresponding to \( F' \), where \( \{y_1, \ldots, y_{n'}\} \subset [n] \) and \( \{x_1, \ldots, x_{m'}\} \subset [m] \). Since each document consists of a set of keywords, \( W' \) can be easily derived from \( F' \) by the attacker.

With \( F' \) and \( W' \), the attacker can derive the following \( m' \times n' \) document-keyword matrix \( A' \):

\[
\begin{pmatrix}
A'_{1,1} & A'_{1,2} & \cdots & A'_{1,n'} \\
A'_{2,1} & A'_{2,2} & \cdots & A'_{2,n'} \\
\vdots & \vdots & \ddots & \vdots \\
A'_{m',1} & A'_{m',2} & \cdots & A'_{m',n'}
\end{pmatrix}
\]

where \( A'_{i,j} = 1 \) if keyword \( w_{x_i} \) is in document \( d_{y_j} \) and \( A'_{i,j} = 0 \) otherwise.

Additionally, the attacker obtains an \( n' \times n' \) d-occurrence matrix \( M' \):

\[
\begin{pmatrix}
M'_{1,1} & M'_{1,2} & \cdots & M'_{1,n'} \\
M'_{2,1} & M'_{2,2} & \cdots & M'_{2,n'} \\
\vdots & \vdots & \ddots & \vdots \\
M'_{n',1} & M'_{n',2} & \cdots & M'_{n',n'}
\end{pmatrix}
\]

where \( M'_{i,j} \) is the number of keywords that appear in both documents \( d_{y_i} \) and \( d_{y_j} \).

Let \( E = \{ed_1, \ldots, ed_n\} \) be the encrypted document set of \( F \), and \( Q = \{q_1, \ldots, q_m\} \) be the query token set corresponding to \( W \). From the encrypted documents and the attached query tokens stored on the server, the attacker can derive the following \( m \times n \) encrypted document-query token matrix \( B \):

\[
\begin{pmatrix}
B_{1,1} & B_{1,2} & \cdots & B_{1,n} \\
B_{2,1} & B_{2,2} & \cdots & B_{2,n} \\
\vdots & \vdots & \ddots & \vdots \\
B_{m,1} & B_{m,2} & \cdots & B_{m,n}
\end{pmatrix}
\]

where \( B_{i,j} = 1 \) if query token \( q_i \) is attached to encrypted document \( ed_j \), and \( B_{i,j} = 0 \) otherwise.