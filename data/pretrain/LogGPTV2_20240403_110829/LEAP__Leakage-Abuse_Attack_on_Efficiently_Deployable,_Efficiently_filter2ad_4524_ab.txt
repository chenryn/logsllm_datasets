1
0
0
1
1
3
1
0
1
1
0
4
0
1
0
0
1
5
0
1
0
0
1
6
1
0
0
1
1
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
(1)
the bit-string of column3 is 10110, and the bit-string of row4 is
011001. Column3 is unique, and so are row2, row3, row5. The
column3-sum is 1 + 0 + 1 + 1 + 0 = 3, and the row2-sum is
1 + 0 + 0 + 1 + 1 + 0 = 3.
2.2 Background
We first give a general description of SE. In a SE scheme, a user
encrypts her documents and uploads the encrypted documents to
a (untrusted) server. Later, the user can issue a query containing
a keyword (or a set of keywords) by generating and sending a
query token to the server to retrieve the documents containing
this keyword (or these keywords). Based on the query token, the
server searches the stored encrypted documents and returns the
encrypted documents (or the document identifiers) containing the
queried keyword to the user.
The setting that we focus on is similar to the settings discussed
in [5, 39] for EDESE schemes. In this setting, the keywords are
encrypted with keyed pseudorandom function as the query tokens
and appended to the encrypted documents stored on the server side.
Similar to [5, 39], we assume the query of a keyword is processed
as follows: the user first deterministically generates a query token
from the keyword and sends a query request containing the query
token to the server; with the query token, the server returns the
encrypted documents which are attached with the query token in
the query request. Since the encrypted documents and the attached
query tokens are stored on the server, an adversarial server could
obtain (1) the encrypted document universe and the query token
universe, and (2) the relationship between each encrypted document
and each query token, i.e., whether a query token is contained in
an encrypted document. LEAP relies on such leakage. Similar to
[5, 21, 39], only the “one-to-one” setting is considered for simplicity,
where a query token corresponds to a single keyword. We leave the
“one-to-many” setting where one query token may contain multiple
keywords as our future work.
Let F = {d1, . . . ,dn} denote a set of (plaintext) documents of
a target user. Each document di is represented by a set of key-
words, Wi = {wi,1, . . . ,wi,mi }, which can be extracted using an
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2309extraction algorithm. Let W = {w1, . . . ,wm} denote the set of key-
words appear in F. The relation between F and W is encoded in a
document-keyword matrix A = [Aij]m×n, where Ai,j equals 1 iff
document dj contains keyword wi, and 0 otherwise. The matrix is
illustrated as follows:
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
d1
d2
A1,1
A1,2
A2,1
A2,2
...
...
Am,1 Am,2
w1
w2
...
wm
· · ·
dn
· · · A1,n
· · · A2,n
· · ·
...
· · · Am,n
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
(2)
where document dj is associated with columnj, and keyword wi is
associated with rowi. Columnj-sum of A captures the number of
keywords that are contained in document dj, and rowi-sum of A
captures the number of documents that contain keyword wi.
Let E = {ed1, ...,edn} be the encrypted document set correspond-
ing to F, and let Q = {q1, ...,qm} be the query token set correspond-
ing to W. We further define an encrypted document-query token
matrix B = [Bij]m×n with entry Bi,j equals 1 iff query token qi is
attached to encrypted document edj, and 0 otherwise. Matrix B is
illustrated as follows:
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
ed2
ed1
B1,2
B1,1
B2,2
B2,1
...
...
Bm,1 Bm,2
q1
q2
...
qm
· · ·
· · ·
· · ·
· · ·
· · ·
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
edn
B1,n
B2,n
...
Bm,n
(3)
where edj is an encrypted document associated with columnj, and
qi is a query token associated with rowi. Columnj-sum of B cap-
tures the number of query tokens that are attached to encrypted
document edj, and rowi-sum of B captures the number of encrypted
documents where the sets of attached query tokens contain qi.
If columnj of B matches columnj′ of A, then we say edj is
the encrypted version of dj′, and we can thus obtain a mapping
(edj ,dj′ ), where edj is the encrypted document corresponding to
columnj of B, and dj′ is the document corresponding to columnj′
of A; similarly, if rowi of B matches rowi′ of A, then we say the
underlying keyword of qi is wi′, and we can thus obtain a mapping
(qi ,wi′ ), where qi is the query token corresponding to rowi of B,
and wi′ is the keyword corresponding to rowi′ of A.
The matrix representation above is similar to that of [5, 21],
which generalises the inverted index used in most high efficiency
SE schemes.
We then define an n × n d-occurrence matrix whose (i, j)-th entry
captures the number of keywords that appear in both di and dj.
We also define an n × n ed-occurrence matrix whose (i, j)-th entry
captures the number of query tokens that are attached to both edi
and edj.
3 ATTACK MODEL
3.1 Attacker Type
As defined in [5, 21, 39], the attacker is an adversarial server who
stores the encrypted documents and the corresponding query to-
kens. The attacker we consider in this paper is passive in the sense
that it faithfully follows the EDESE schemes but attempts to learn
more information than is allowed by examining the information
it can observe. Intuitively, this type of attacker is weaker than the
active attacker addressed in [44], which can trick a user into adding
a document that is (deliberately) chosen by the attacker. In addition,
the attacker has no access to any encryption or decryption oracles.
3.2 Attacker Knowledge
The knowledge of attacker includes the leakage of the EDESE
schemes and the prior knowledge of a target user’s documents.
For the leakage of the EDESE schemes, we consider the informa-
tion leakage from the stored encrypted documents and the attached
query tokens as described in Section 2. In particular, the attacker can
utilize the information leaked by EDESE scheme to obtain the rela-
tionship between each encrypted document and each query token,
i.e., which query token is attached to which encrypted document.
In terms of prior knowledge, we consider partially-known docu-
ment set, which means that a subset of the (plaintext) documents
of a target user is known to the attacker. For example, a set of
widely-distributed emails may exist in the repository of a user and
is known to the attacker, as articulated in [5]. The following is a
scenario cited in [39] which is likely to happen in the real world.
Suppose a user has a large corpus of documents stored on a service
like Gmail, who decides to have all the documents encrypted with
EDESE and uploaded to the server. Clearly, the server has perfect
knowledge of the old plaintext corpus. Over time, new encrypted
documents are uploaded to the server. In this scenario, the server
has partial knowledge of the user’s documents.
Unlike previous inference attacks, our attack does not require
(1) any priori knowledge of the query requests, (2) any prior knowl-
edge of the distribution of queries, and (3) any prior knowledge on
the underlying keywords of any query tokens, i.e., the mapping
between a (plaintext) keyword and the corresponding query token.
3.3 Objective of Attacker
The main objective of the attacker is keyword recovery, which is to
recover the underlying keywords of a user’s query tokens. Another
objective is document recovery, which is to recover the relationship
between known documents and encrypted documents.
4 LEAP
We now present LEAP, a new leakage-abuse attack against EDESE
schemes with partial knowledge of a target user’s document set.
4.1 Knowledge of Attacker
Let F = {d1, ...,dn} denote the full document set and W = {w1, ...,wm}
denote the corresponding set of keywords. Let F′ = {dy1 , ...,dyn′}
be the partial knowledge of the document set known to the attacker,
and W′ = {wx1 , ...,wxm′} be the keyword set corresponding to F′,
where {y1, ...,yn′} ⊂ [n] and {x1, ...,xm′} ⊂ [m]. Since each docu-
ment consists of a set of keywords, W′ can be easily derived from
F′ by the attacker.
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2310With F′ and W′, the attacker can derive the following m′ × n′
document-keyword matrix A′:
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
· · ·
· · ·
· · ·
· · ·
· · · A′
dy2
A′
1,2
A′
2,2
...
m′,2
wx1
wx2
...
wxm′
is 1 if wxi
dy1
A′
1,1
A′
2,1
...
A′
m′,1 A′
where A′
is a keyword in document dyj
i,j
and j ∈ [n′], and 0 otherwise.
M′ as follows:
for i ∈ [m′]
In addition, the attacker obtains an n′ × n′ d-occurrence matrix
dyn′
A′
1,n′
A′
2,n′
...
m′,n′
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
(4)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
dy1
dy2
M′
1,1 M′
dy1
1,2
M′
2,1 M′
dy2
2,2
...
...
...
n′,1 M′
dyn′ M′
n′,2
is the number of keywords that appear in both dyi
· · ·
dyn′
· · · M′
1,n′
· · · M′
2,n′
· · ·
...
· · · M′
n′,n′
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
where M′
and
i,j
for i, j ∈ [n′].
dyj
Let E = {ed1, ...,edn} be the encrypted document set of F, and
Q = {q1, ...,qm} be the query token set corresponding to W. From
the encrypted documents and the attached query tokens stored on
the server, the attacker can derive the following m × n encrypted
document-query token matrix B:
ed2
ed1
B1,2
B1,1
B2,2
B2,1
...
...
Bm,1 Bm,2
edn
B1,n
B2,n
...
Bm,n
· · ·