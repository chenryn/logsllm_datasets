I knew I could do it!
撇开这个程序糟糕的算法不谈，我们先选择一个数字。注意，每次输入
n 时，程序打印了两条消息。这是由于程序读取n作为用户否定了数字1，然
后还读取了一个换行符作为用户否定了数字2。
一种解决方案是，使用while循环丢弃输入行最后剩余的内容，包括换
行符。这种方法的优点是，能把no和no way这样的响应视为简单的n。程序
清单8.4的版本会把no当作两个响应。下面用循环修正
char response;这个问题：
while (getchar() != 'y')  /* 获取响应，与 y 做对比*/
{
printf("Well, then, is it %d?\n", ++guess);
while (getchar() != '\n')
continue;     /* 跳过剩余的输入行 */
}
使用以上循环后，该程序的输出示例如下：
Pick an integer from 1 to 100. I will try to guess it.
Respond with a y if my guess is right and with
an n if it is wrong.
Uh...is your number 1?
n
519
Well, then, is it 2?
no
Well, then, is it 3?
no sir
Well, then, is it 4?
forget it
Well, then, is it 5?
y
I knew I could do it!
这的确是解决了换行符的问题。但是，该程序还是会把f被视为n。我们
用if语句筛选其他响应。首先，添加一个char类型的变量储存响应：
修改后的循环如下：
while ((response = getchar()) != 'y') /* 获取响应 */
{
if (response == 'n')
printf("Well, then, is it %d?\n", ++guess);
else
printf("Sorry, I understand only y or n.\n");
while (getchar() != '\n')
520
continue; /* 跳过剩余的输入行 */
}
现在，程序的运行示例如下：
Pick an integer from 1 to 100. I will try to guess it.
Respond with a y if my guess is right and with
an n if it is wrong.
Uh...is your number 1?
n
Well, then, is it 2?
no
Well, then, is it 3?
no sir
Well, then, is it 4?
forget it
Sorry, I understand only y or n.
n
Well, then, is it 5?
y
I knew I could do it!
521
在编写交互式程序时，应该事先预料到用户可能会输入错误，然后设计
程序处理用户的错误输入。在用户出错时通知用户再次输入。
当然，无论你的提示写得多么清楚，总会有人误解，然后抱怨这个程序
设计得多么糟糕。
8.5.2 混合数值和字符输入
假设程序要求用 getchar()处理字符输入，用 scanf()处理数值输入，这两
个函数都能很好地完成任务，但是不能把它们混用。因为 getchar()读取每个
字符，包括空格、制表符和换行符；而 scanf()在读取数字时则会跳过空格、
制表符和换行符。
我们通过程序清单8.5来解释这种情况导致的问题。该程序读入一个字
符和两个数字，然后根据输入的两个数字指定的行数和列数打印该字符。
程序清单8.5 showchar1.c程序
/* showchar1.c -- 有较大 I/O 问题的程序 */
#include 
void display(char cr, int lines, int width);
int main(void)
{
int ch;        /* 待打印字符  */
int rows, cols;    /* 行数和列数 */
printf("Enter a character and two integers:\n");
while ((ch = getchar()) != '\n')
522
{
scanf("%d %d", &rows, &cols);
display(ch, rows, cols);
printf("Enter another character and two integers;\n");
printf("Enter a newline to quit.\n");
}
printf("Bye.\n");
return 0;
}
void display(char cr, int lines, int width)
{
int row, col;
for (row = 1; row 
void display(char cr, int lines, int width);
int main(void)
{
int ch;        /* 待打印字符*/
int rows, cols;    /* 行数和列数 */
printf("Enter a character and two integers:\n");
while ((ch = getchar()) != '\n')
{
if (scanf("%d %d", &rows, &cols) != 2)
break;
display(ch, rows, cols);
while (getchar() != '\n')
continue;
printf("Enter another character and two integers;\n");
printf("Enter a newline to quit.\n");
}
525
printf("Bye.\n");
return 0;
}
void display(char cr, int lines, int width)
{
int row, col;
for (row = 1; row = 0)     // 检测不在范围内的值
{
// 处理n
scanf("%ld", &n); // 获取下一个值
}
另一类潜在的陷阱是，用户可能输入错误类型的值，如字符 q。排除这
种情况的一种方法是，检查scanf()的返回值。回忆一下，scanf()返回成功读
取项的个数。因此，下面的表达式当且仅当用户输入一个整数时才为真：
scanf("%ld", &n) == 1
结合上面的while循环，可改进为：
long n;
while (scanf("%ld", &n) == 1 && n >= 0)
528
{
//处理n
}
while循环条件可以描述为“当输入是一个整数且该整数为正时”。
对于最后的例子，当用户输入错误类型的值时，程序结束。然而，也可
以让程序友好些，提示用户再次输入正确类型的值。在这种情况下，要处理
有问题的输入。如果scanf()没有成功读取，就会将其留在输入队列中。这里
要明确，输入实际上是字符流。可以使用getchar()函数逐字符地读取输入，
甚至可以把这些想法都结合在一个函数中，如下所示：
long get_long(void)
{
long input;
char ch;
while (scanf("%ld", &input) != 1)
{
while ((ch = getchar()) != '\n')
putchar(ch); // 处理错误的输入
printf(" is not an integer.\nPlease enter an ");
printf("integer value, such as 25, -178, or 3: ");
}
529
return input;
}
该函数要把一个int类型的值读入变量input中。如果读取失败，函数则进
入外层while循环体。然后内层循环逐字符地读取错误的输入。注意，该函
数丢弃该输入行的所有剩余内容。还有一个方法是，只丢弃下一个字符或单
词，然后该函数提示用户再次输入。外层循环重复运行，直到用户成功输入
整数，此时scanf()的返回值为1。
在用户输入整数后，程序可以检查该值是否有效。考虑一个例子，要求
用户输入一个上限和一个下限来定义值的范围。在该例中，你可能希望程序
检查第1个值是否大于第2个值（通常假设第1个值是较小的那个值），除此
之外还要检查这些值是否在允许的范围内。例如，当前的档案查找一般不会
接受 1958 年以前和2014年以后的查询任务。这个限制可以在一个函数中实
现。
假设程序中包含了stdbool.h 头文件。如果当前系统不允许使用_Bool，
把bool替换成int，把true 替换成 1，把 false 替换成 0 即可。注意，如果输入
无效，该函数返回 true，所以函数名为bad_limits()：
bool bad_limits(long begin, long end,long low, long high)
{
bool not_good = false;
if (begin > end)
{
printf("%ld isn't smaller than %ld.\n", begin, end);
not_good = true;
530
}
if (begin  high || end > high)
{
printf("Values must be %ld or less.\n", high);