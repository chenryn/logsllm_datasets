Mount crypto-volume
cryptsetup open /dev/sda1 backup
Then you mount it:
mount /dev/mapper/backup /media/username/back
Create your of filesystem
In some cases it might be useful to create your own disk. Maybe for attaching to a virtual machine, or
maybe to facilitate a backup. It is just a easy nice little container to have. It just requires two easy
steps.
Create a chunk in memory
truncate -s 100MB nameOfFile
Attach a filesystem to file
mkfs.ext4 ./nameOfFile
Mount it to your filesystem
sudo mount ./nameOfFile /mnt/blabla
10. Controlling services
Systemctl
Systemctl can be used to enable and disable various services on your linux machine.
Start ssh
systemctl start ssh
systemctl status ssh
systemctl stop ssh
You can verify that the service is listening for connection by running network status.
netstat -apnt
Make ssh start upon boot
systemctl enable ssh
systemctl enable apache2
Init.d
Init.d is just a wrapper around Systemctl. I prefer it.
/etc/init.d/cron status
21
Basics of Linux
/etc/init.d/cron start
/etc/init.d/cron stop
rcconf
This is a tool to control services more easily, what is running upon boot and so on.
11. Kernel
The Kernel is responsible for talking between the hardware and the software, and to manage the
systems resources.
The Linux Kernel is a monolithic kernel, unlike the OSX and the Windows kernels which are hybrid.
You can find the kernel file in /boot. It might look like something like thisvmlinuz-4.4.0-57-
generic. In the beginning of time the kernel was simply called linux. But when Virtual Memory
was introduced they changed the name to vmlinux to reflect that the kernel could handle virtual
memory. When the kernel later became too big it was compressed using zlib , therefore the name was
changed to vmlinuz.
The Linux Kernel differs from Windows in that it contains drivers by default. So you don't have to go
around looking for drivers like you do on windows when you want to install a printer, or something
like that.
It is really easy to upgrade to the latest Linux kernel, all you have to do tis this:
sudo apt-get update && sudo apt-get dist-upgrade
# or
sudo apt-get update && sudo apt-get upgrade
If you are using a distro that is Long Term Supported (LTS). You will not get the latest Kernel
version, but you will get the latest Long Term Supported version.
14. Logging
Logs can be viewed here on debian distros /var/log/
16. Network basics
If you use standard desktop installation for Ubuntu or Debian you get NetworkManager included,
which handles your network connections, wire and wireless. NetworkManager is made to be easy to
use, and "just work". And most of the time it does. But sometimes when you want to configure stuff
on your own, for whatever reason, it can be a hassle. So for the rest of this chapter I am just going to
assume that you have stopped, removed or disabled NetworkManager.
# Stop NetworkManager
sudo systemctl stop NetworkManager.service
# Start NetworkManager
sudo systemctl start NetworkManager.service
# Disable it so it won't start at boot
sudo systemctl disable NetworkManager
22
Basics of Linux
#Enable it so it will start at boot
sudo systemctl disable NetworkManager
Network cards (NIC) are identified by their mac address, hosts by theirip address andapplications by
their port number.
In a nutshell what you need to know
Things you really need to know are:
# Configuration files
/etc/network/interfaces
/etc/resolve.config
# Tools
ip
ip route
dhclient
wpa_supplicant
iptables
netstat
dnsmasq
Configure Network Interface Cards (NIC)
On debian NIC:s are defined and configured in /etc/network/interfaces.
# automatically start eth0 on boot
auto eth0
# give the eth0 an ip through dhcp
iface eth0 inet dhcp
# start up the loopback interface
auto lo
iface lo inet loopback
# A bridge called br1 - can be called whatever.
# This bridge has a static ip
auto br1
iface br1 inet static
address 192.168.55.1
netmask 255.255.255.0
broadcast 192.168.55.255
bridge_ports none
Take a interface up and down / start and stop
It is recommended to take a interface down before configuring it.
#
ifup eth0
ifdown eth0
23
Basics of Linux
# You can also use ip
sudo ip link set dev eth0 down
sudo ip link set dev eth0 down
# You can also use ifconfig to bring an interface up and down. The difference is that ifconfig
# will use the current configuration, and not take into account changes from /etc/network/interfaces.
# So use ifup and ifdown!
ifconfig eth0 up
ifconfig eth0 down
Configure an interface with ip or ifconfig
If you want to configure an interface only temporarly you can use ipand ifconfig. The changes
will not survive a reboot.
Ifconfig is old and deprecated on some systems. So use ip instead. But they do basically the
same thing.
Route
Where packets are send in a network depends on the routing of the routing. Every node that the
packet passes in its travel to its destination has a routing table defined, that says where the packet
should be directed next. The most simple example is how the traffic of a home network is sent to the
router, and then from there forwarded on to somewhere else on the internet. How every host should
forward the packets are defined in the linux kernel routing table. You can see the routing table by
running this command:
route
ip route
netstat -r
I think that the most useful of these commands is route, since it includes the column names of the
table. Here is an example of the output:
Destination Gateway Genmask Flags Metric Ref Use Iface
default 192.168.55.1 0.0.0.0 UG 0 0 0 ens3
192.168.55.0 0.0.0.0 255.255.255.0 U 0 0 0 ens3
So let's image that we don't have any routing rules at all. It is completely empty. Like this:
Destination Gateway Genmask Flags Metric Ref Use Iface
But we have network interface connected, called eth0. If we now try to ping the router (the gateway)
on the network, we get this result:
~ ping 192.168.55.1
connect: Network is unreachable
At this point we can't even add a route to the gateway. Because the network is unreacheable. So we
need to hook outselfs up to the network first.
route add -net 192.168.55.0 netmask 255.255.255.0 dev eth0
Now our table looks like this:
24
Basics of Linux
Destination Gateway Genmask Flags Metric Ref Use Iface
192.168.55.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0
We still can't ping anything out in the internetz- That's because we are not reaching our gateway
(router), since we haven't configured it yet.
route add default gw 192.168.55.1
or
ip route add default via 192.168.55.1
Remember that these routes will only be temporary.
Example - Man in the middle a host
It is often useful to man in the middle all traffic from a machine, to see what requests and stuff it does.
Let's say that the scenario is that the victim-machine is connected to the mitm-machine by ethernet
cable. This can be either a physical cable or thought a virtual machine.
Victim machine
On the victim machine we don't have network-manager installed. And out
/etc/network/interfaces has nothing in it except for:
auto lo
iface lo inet loopback
When we run ip addrwe get the following result:
root@deb64:~# ip a
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: ens3:  mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000
link/ether 52:54:00:a9:fc:4a brd ff:ff:ff:ff:ff:ff
So our network interface ens3 does not have an ip-address and it is down. So let's first give it an ip-
address, now remember that this ip-address will only be temporary, and will disappear on next reboot.
If you want to make it permanent you need to define it in /etc/network/interface
Give interface an ip-address
ip addr add 192.168.150.2/24 dev ens3
# Here we give it the ip-address 192.168.150.2 with netmask 255.255.255.0 (/24), and we
# give it to the device/interface ens3
Now we can start the interface, or "bring it up" as it is called:
ip link set ens3 up
# ifup and ifdown will not work
25
Basics of Linux
When we bring up the interface the routing table will automatically get populated.
root@deb64:~# ip r
192.168.150.0/24 dev ens3 proto kernel scope link src 192.168.150.2
Add default gateway
But we are still not able to reach the internet since we have not defined a default gateway yet. So let's
do that.
ip route add default via 192.168.150.1 dev ens3
If we look at the routing table now we can see our new default gateway.
root@deb64:~# ip route
default via 192.168.150.1 dev ens3
192.168.150.0/24 dev ens3 proto kernel scope link src 192.168.150.2
Now we are done setting up the victim machine.
Attacking machine
First we need to give our machine the ip-address of the default gateway, so that the victim will
connect to the attacking machine.
ip addr add 192.168.150.1/24 dev ens3
Now we just need to configure the NATing.
iptables -t nat -A POSTROUTING -j ACCEPT
This is all we have to do. If we now do a curl icanhazip.com from our victim machine, we can
see the traffic flying by with tcpdump in our attacker-machine.
However, we might want to inspect the traffic in burp-suite, or some other proxy tool. In ordet to do
that we can redirect specific traffic into our proxy with the help of our friend iptables.
iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 8080
iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080
iptables -t nat -A PREROUTING -i ens3 -s 192.168.150.2 -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 53
Now we just have to configure burp-suite a little bit.
Go to Proxy > Options > Proxy Listeners > Edit > Binding > All
interfaces
Go to: Proxy > Options > Proxy Listeners > Edit > Request handling >
Support invisible proxy
Now if you do the following from the victim machine:
curl icanhazip.com
You will see the request in burp suite.
If you want to mitm windowsyou just need to change the ip and gateway to 192.168.15.2 and
26
Basics of Linux
192.168.150.1.
Wireless - wpa_supplicant
So if you manage to disable networkManager you can connect to a wireless network using
wpa_supplicant instead. I think that is what NetworkManager actually uses underneith.
First we need to list all Access Points.
sudo iwlist wlan0 scan
Then we need to create a config-file for our specific access-point. We can do that with
wpa_passphrase, after running the command we are asked to write the password, which also gets
stored in the config file. In plaintext.
wpa_passphrase NameOfWIfi > wpa.conf
Now we just connect to the AP:
wpa_supplicant -Dwext -iwlan0 -c/etc/wpa_supplicant/wpa.conf
After this you do not have an IP-address, or you might not have a updated dhcp lease. So first you
need to release the current lease.
sudo dhclient wlan0 -r
# Then get a new dhcp lease
sudo dhclient wlan0
Now you should be able to surf the internetz.
Netstat - Find outgoing and incoming connections
Netstat is a multiplatform tool. So it works on both mac, windows and linux.
$ netstat -antlp
Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
tcp 0 0 mymachine:domain *:* LISTEN -
tcp 0 0 localhost:ipp *:* LISTEN -
tcp 0 0 localhost:27017 *:* LISTEN -
tcp 0 0 localhost:mysql *:* LISTEN -
tcp 0 0 192.168.0.15:44013 ec2-54-85-27-14.c:https ESTABLISHED 6604/slack --disabl
tcp 0 0 192.168.0.15:51448 ec2-50-16-193-3.c:https ESTABLISHED 3120/chrome
tcp 0 0 192.168.0.15:43476 104.27.152.203:https TIME_WAIT -
tcp 0 0 192.168.0.15:59380 149.154.175.50:https ESTABLISHED 5068/Telegram
tcp 0 0 192.168.0.15:53840 149.154.175.50:http ESTABLISHED 5068/Telegram
tcp 0 0 192.168.0.15:47158 176.32.99.76:https ESTABLISHED 3120/chrome
tcp 0 0 192.168.0.15:47161 176.32.99.76:https ESTABLISHED 3120/chrome
tcp 0 0 localhost:27017 localhost:44196 ESTABLISHED -
tcp 0 0 192.168.0.15:46910 a104-114-242-25.d:https ESTABLISHED 3120/chrome
tcp 0 0 localhost:44196 localhost:27017 ESTABLISHED 6903/node
tcp 0 0 192.168.0.15:36280 cb-in-f101.1e100.:https ESTABLISHED 3120/chrome
tcp 0 0 192.168.0.15:47160 176.32.99.76:https ESTABLISHED 3120/chrome
tcp 0 1 192.168.0.15:59285 149.154.175.50:https LAST_ACK -
udp 0 0 *:35733 *:* -
27
Basics of Linux
udp 0 0 mymachine:domain *:* -
udp 0 0 *:bootpc *:* -
udp 0 0 *:33158 *:* -
udp 0 0 *:ipp *:* -
udp 0 0 *:mdns *:* 3120/chrome
udp 0 0 *:mdns *:* 3120/chrome
udp 0 0 *:mdns *:* -
udp 0 0 192.168.0.15:55065 ce-in-f189.1e100.:https ESTABLISHED 3120/chrome
A few interesting things to observe here is that my machine is using any port over 1024 to connect to
the outside. So it is not like just because we communicate with https and connect to port 443 that we
use that port on our machine. On our machine it can be any port (over 1024) and usually any port over
10000.
Find out what services are listening for connection on your machine
Flags
-a # All
-n # show numeric addresses
-p # show port
-t # tcp
netstat -anpt
To easily check out what process is using lots of bandwidth you can use nethogs.
sudo apt-get install nethogs
nethogs
Or you can use tcpdump, or iptables.
Every listening process of course has a PID, but unless you are root you can't might not see them all.
Firewall - Iptables
Iptables is a firewall tool in linux. A firewall is basically a tool that scans incoming and/or outgoing
traffic. You can add rules to the iptables to filter for certain traffic.
Types of chains
So you can filter traffic in three different ways input, forward, and output. These are called three
different chains.
INPUT
This is for incoming connections. If someone wants to ssh into your machine. Or a web-server
responds to your request.
FORWARD
This chain is used for traffic that is not aimed at your machine. A router for example usually just
passes information on. Most connections are just passing through. As you can see this will probably
not be used so much on your machine, as a normal desktop or a server doesn't router that much traffic.
OUTPUT
This chain is used for outgoing traffic.
28
Basics of Linux
Active rules
To view your active rules you do
iptables -L
# It will output something like this
Chain INPUT (policy ACCEPT)
target prot opt source destination
Chain FORWARD (policy ACCEPT)
target prot opt source destination
Chain OUTPUT (policy ACCEPT)
target prot opt source destination
So as we can see the current policy is to accept all traffic in all directions.
If you for some reason has been tampering with the iptables and maybe fucked up. This is how you
return it to the default setting, accepting all connections
iptables --policy INPUT ACCEPT
iptables --policy OUTPUT ACCEPT
iptables --policy FORWARD ACCEPT
If you instead want to forbid all traffic you do
iptables --policy INPUT DROP
iptables --policy OUTPUT DROP
iptables --policy FORWARD DROP
Okay, so let's block out some connections. To do that we want to add/append a new rule. We want to
block all connections from our enemy 192.168.1.30.
# A for append, and S for source.
iptables -A INPUT -s 192.168.1.30 -j DROP
# Block an entire range
iptables -A INPUT -s 192.168.1.0/24 -j DROP
Now if we want to see our current rules we just do
iptables -L
And we can now see our new rule.
To add line-numbers for each rule, so that you can then specify which rule you want to reset or
change or something you can output the rluels with line-numbers
iptables -L -v --line-numbers
Remove/delete a rule
To remove a rule you just do
# Remove one specific rule
iptables -D INPUT 2
29