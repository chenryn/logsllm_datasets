and then the one-bit bases are compared, which results in a
one base match and generates a yellow pixel.
We also uncovered the following facts about one-to-one
comparisons that were necessary in our subsequent attacks.
5
•
•
•
•
GEDmatch ﬁlters out most SNPs with a low minor
allele frequency (MAF) — the frequency of the second
most common SNP variant.
GEDmatch ignores SNPs containing non-standard
bases (like I/D or – –) in either of the compared kits.
Only SNPs present in both compared kits are used in
the comparison. In other words, only the SNPs that
are in the intersection of the two kits are compared.
The marker indication pixel bar on any chromosome
is displayed at a lower resolution if generates more
than ˜32,000 pixels.
VI. GENETIC MARKER EXTRACTION USING
CHROMOSOME VISUALIZATIONS
Here, we experimentally explore whether an adversary
could use direct comparisons as an oracle to extract the DNA
proﬁle (raw SNPs) of another user of that service.
A. Generating Targets
We created a second GEDmatch user account (represent-
ing a targeted user) and constructed and then uploaded ﬁve
different genetic data ﬁles using the procedure described in
Section V-A. We denote these ﬁles as target(1)-kit-
target(5)-kit. The adversary’s goal was to extract the
genotype of as many SNPs as possible from the ﬁve target
proﬁles using another GEDmatch account.
B. Extraction Overview
Our goal was to discover whether the genotype of a
target could be extracted using just marker indication pixels
from one-to-one comparisons. This attack is broken up into a
number of phases, which are described in detail below.
To begin, the binary genotype of the target can be extracted
by making a small number of one-to-one comparisons with
˜10–20 specially designed extraction kits. The resulting marker
indication pixels leak too much information about the target’s
SNPs; an adversary can use the pixels to infer the underlying
raw genotype of the target kit. However, recall that GEDmatch
compares kits in a binary form, so in this case, the adversary
can only extract the binary genotype of the target. In our
experiments, we recovered the binary genotype for 61.0% of
the SNPs in the target.
Next, the adversary can decompress the binary genotype
into normal DNA bases using known allele frequency data. We
were able to convert the binary genotype of the compressed
SNPs 90.1% of the time. Finally, the adversary can ﬁll in many
of the missing SNPs using a well known genetic technique
called imputation. After imputation, we extracted a total of
92.6% of the SNPs with 98.4% accuracy from our ﬁve targets.
C. Binary Genotype Extraction: Determining the Correspon-
dence Between Pixels and SNPs
At full resolution, each marker indication pixel corresponds
to the comparison of a single SNP. Therefore, if we know both
which SNP corresponds to which pixel and a method to convert
from pixel color to binary genotype, we can extract the binary
genotype of each corresponding SNP. (See Figure 3 for an
overview of the binary genotype extraction procedure.) In this
section, we show how to ﬁnd the pixel-to-SNP correspondence.
Recall from Section V that when two kits are compared,
SNPs may be ignored for a number of reasons, including: the
SNP is pre-ﬁltered by GEDmatch (e.g., the SNP has a low
MAF); the SNP is missing in one of the two kits; or the
genotype of the SNP in one of the kits has a non-standard base,
e.g., a dash or I/D. In all these cases, the pixel corresponding
to ignored SNPs will be missing in the marker indication bar
because that SNP was never used in the comparison. In some
of these cases, the adversary does not directly know which
SNPs are present or have non-standard bases in the target kit.
Therefore, our goal is to infer the pixel-to-SNP correspondence
for the SNPs that are compared given that the genotype of the
target kit is unknown.
To begin, we uploaded a new kit to GEDmatch, called
ext-kit, which is a standard experimental kit except for
three changes. First, all SNPs with a MAF less than 1% were
removed. Second, any SNP with a genotype that was binary
encoded as 01 (e.g., AC, AG, CT, GT) was rewritten to AA (00
in binary encoding). Finally, every other SNP was removed on
chromosomes 1, 2, 3, and 6 to prevent more than 32,000 pixels
from being generated, which lowers the marker indication
bar resolution. The resulting kit contained 363,164 autosomal
SNPs and resulted in 347,511 unﬁltered SNPs when uploaded
to GEDmatch, which left a substantial number of SNPs that
were still being ﬁltered.
We can identify the pixel corresponding to speciﬁc SNPs
by making small modiﬁcations to ext-kit. If the genotype
of any SNP is replaced with AC (01 in binary), then the
color of the corresponding pixel will change in a one-to-
one comparison with any other kit. To understand why the
pixel color always changes, consider the following: the binary
genotype of the other kit is (1) homozygous (00 or 11), or (2)
heterozygous (01). In case (1), every SNP in the unmodiﬁed
ext-kit is 00 or 11, so 00/11 will be compared to 00/11,
which results in a green or red pixel. However, when the
SNP is modiﬁed to 01, 01 is compared to 00/11, which
always produces in a yellow pixel. Similarly, in case (2),
00/11 compared to 01 results in a yellow pixel, but when the
SNP is changed to 01, 01 is compared 01, which results in a
green pixel. We leverage this insight to ﬁnd the correspondence
between a large number of pixels and SNPs.
We created a new kit, called extmod(n)-kit, which
is the same as ext-kit except on each chromosome the
genotype of every nth SNP is replaced with AC; we refer
to these altered SNPs as modiﬁed SNPs. If we separately
compare ext-kit and extmod(n)-kit to any other kit,
the resulting marker indication bars will be identical except
for the pixels that correspond to the SNPs that were changed
to AC in extmod(n)-kit; we refer to the pixels that differ
between the marker indication bars as changed pixels.
At a high level, we can estimate the pixel-to-SNP corre-
spondence for the changed pixel by counting the number of
intervening pixels between the changed pixels. We can repeat
this for differing values of n to ﬁnd the correspondence for
a large number of SNPs. Since the details of our method,
while involved, are not critical to understanding the rest of
6
(A): One-to-one comparison of extraction kits to the target kit. (B): Theoretical comparison when no SNPs are ignored. Changed pixels are at multiples
Fig. 3.
of n. SNP indexes are listed above ext-kit. (C) Comparison when SNPs at indexes 3, 18, 19, and 26-30 are ignored. The correspondence could be determined
for the SNPs at indexes shown in red. (D): Extraction of the target kit binary genotype from the ext-kit marker indication pixels. Workﬂow to extract
compressed genotype from a targeted kit. Step (1): Compare each extraction kit to the target with a one-to-one comparison. Step (2): Gather the resulting 22
marker indication bars from each comparison. Step (3): Use the number of intervening pixels between changed pixels to inductively compute the correspondence
between changed pixels and SNPs. Step (4): Recursively infer the SNP correspondences for more changed pixels if less than half the intervening pixels are
missing. Step (5): Compute the binary genotype of the target kit with the ext-kit comparison pixels for every SNP that has a known corresponding pixel.
this paper, we leave a detailed description of the pixel-to-SNP
correspondence algorithm to Appendix D.
We generated a total of 9 kits based on ext-kit us-
ing n = {2, 4, 8, 16, 32, 64, 128, 256, 512}, resulting in kits
extmod(2)-kit,..., extmod(512)-kit. Recall that when
constructing ext-kit, half of the SNPs were removed on
chromosomes 1, 2, 3, and 6 to ensure the marker indication
pixel bar was at full resolution. Therefore, we had to repeat
this procedure by constructing a different ext-kit where we
alternated which SNPs were removed on chromosomes 1, 2,
3, and 6; we did this to ﬁnd the correspondence of all SNPs
on those chromosomes. In total, we constructed and uploaded
20 kits to GEDmatch.
These 20 kits were all compared to target(1)-kit,
and, using the pixel-to-SNP correspondence algorithm, we
found the corresponding pixel for 374,418 of the SNPs. We
next show how the binary genotype can be extracted for each
of these SNPs.
D. Binary Genotype Extraction: Pixel Color to Binary Geno-
type
Recall that ext-kit is homozygous in the binary geno-
type encoding at every SNP (i.e., it is 00 or 11 at every SNP). If
ext-kit were compared to any other kit, we could use the
color of the resulting marker indication pixels to determine
the binary genotype of SNPs in the other kit. For simplicity,
assume all SNPs in ext-kit have a binary genotype of 00
(the experiment will work similarly when a SNP has a binary
genotype of 11). If the pixel is green, then the binary genotype
of the matching SNP in the other kit must also be 00, since
00 vs 00 is the only way to generate a green pixel. Similarly,
if the pixel is yellow, then the matching SNP must be 01 (00
vs 01), and, if red, the matching SNP must be 11 (00 vs 11).
To test this extraction method, we attempted to extract
the binary genotype of SNPs from target(1)-kit. In the
previous section, we already compared the 20 extraction kits
to target(1)-kit and identiﬁed 374,418 pixel-SNP pairs.
Using the same method, we extracted the binary genotype of
these SNPs. We predicted the binary genotype of all SNPs in
target(1)-kit directly from the normal base-2 genotype
and used this information to conﬁrm that the binary genotypes
from all of these SNPs were extracted correctly.
E. Decompress the Binary Genotype
Previously, we extracted the compressed binary genotype
of over 374,418 SNPs in target(1)-kit. However, our
objective is to extract the uncompressed, normal genotype.
The 1-bit compression is lossy, so we cannot directly infer the
genotype of any SNP. However, we can use allele frequency
data to infer certain SNPs. Depending on the binary genotype
of a SNP, there some situations where each bit only corre-
sponds to a single allele. For example, if a SNP were known
to have only alleles A (0 in binary) and C (1 in binary), then
we know that a binary genotype of 01 corresponds to AC.
7
ext-kittarget-kitA1112B1ext-kitextmod(2)-kitextmod(4)-kitextmod(8)-kitextmod(16)-kitextmod(32)-kit023456789101112131415161718192021222324252627282930313210245678910111213141516172021222324253132ext-kitextmod(2)-kitextmod(4)-kitextmod(8)-kitextmod(16)-kitextmod(32)-kit10245678910111213141516172021222324253132ext-kit comparison00000000000000000000010101010101011111111111target-kit binary genotypeChanged PixelUnchanged PixelCD314extmod(2)-kitextmod(4)-kitextmod(512)-kit15If a SNP has only two alleles that each correspond to
different bits, then all binary genotypes can be decompressed.
This situation is common because the least common single
base pair mutations in the human population are A/T and
C/G substitutions, which together account for only around
16.5% of all possible single base pair substitutions [39].
Such substitutions are the only ones that lead to ambiguous
decompression; therefore, we expected to be able to decom-
press many SNPs. Of the 374,418 binary SNPs we extracted
from target(1)-kit, over 90.1% (337,468 SNPs) could
be unambiguously decompressed. We decompressed each of
these SNPs into the normal DNA bases and compared them
to bases in the target(1)-kit, which conﬁrmed that all
these SNPs were predicted correctly.
Of the 9.9% of SNPs that could not be decompressed, all
but one corresponded to a SNP with three or more alleles.
Therefore, we suspected that GEDmatch was additionally
ﬁltering two-allele SNPs with genotypes that were inherently
ambiguous (i.e., A/T and C/G). This is sensible because these
SNPs would not vary, in binary, between individuals and are
thus not useful for comparisons.
F.
Impute the Remaining SNPs
At this stage, we have inferred 337,468 of the 613,878
SNPs in the target(1)-kit. The last step is to predict
the remaining SNPs in the target kit. To do this, we used
a statistical technique called imputation which is designed
to predict missing genotypes [28]. Imputation works more
effectively when more data is available, and, since we already
extracted a large number of SNPs, we expected it to work well.
We used the Sanger Imputation service to impute the
missing SNPs in the target(1)-kit [29]; we pre-phased
the SNPs with EAGLE2 and used the Haplotype Reference
Consortium (r1.1) as the reference panel [27]. This imputed
231,126 additional SNPs with 96.0% accuracy.
G. Experiments with the Targets
To study the efﬁcacy of this attack against targeted users,
we extracted the ﬁve target kits from different accounts; the
extraction kits were uploaded to one account and compared
to the target kits uploaded to a different account. We ran the
end-to-end extraction procedure on the ﬁve kits: we extracted
55.0% deterministically with 100% accuracy by decompress-
ing the binary genotype (Sections VI-C, VI-D, and VI-E), then
predicted an additional 37.7% of the SNPs using imputation
with 96.0% accuracy (Section VI-F). In total, we extracted an
average of 92.6% of the SNPs with 98.4% accuracy.
After the extraction kits have been uploaded (a one time
cost), the extraction takes around 10-20 seconds of comparison
time on GEDmatch. Therefore, this attack could easily be
scaled up to extract the genotype from large numbers of kits,
which would only be limited by the kit identiﬁers that could
be scraped.
Finally, we quantiﬁed the risk of genotype extraction
to medically relevant SNPs. Using the ClinVar archive — a
dataset that links human genetic variants and phenotypes —
we selected all SNPs from the target(1)-kit that were
categorized as either ”pathogenic” or ”likely pathogenic”. The
privacy risks were indeed signiﬁcant: of the 608 medically
relevant SNPs in the target(1)-kit, we were able to
correctly extract 264 of these.
VII. GENETIC MARKER EXTRACTION USING MATCHING
SEGMENTS
We previously described how the marker indication bar can
be used to extract the genotype of a large number of SNPs
from some target kit. One defensive response might be simply
to remove that bar. Anticipating that possible response, in this
section we explore how other information revealed in one-to-
one comparisons, like the matching segments bar and matching
segments table, leak enough information to extract speciﬁc
SNPs of interest. (See Figure 2, and note the signiﬁcantly
lower resolution of the Matching Segments bar compared to
the Marker Indications bar that we used in Section VI.)
Take matching DNA segments as an example. If an ad-
versary can construct a matching segment around a speciﬁc
SNP, then by changing the genotype of that SNP, the matching
segment may split or disappear. This happens because the SNP
will no longer match in the two kits, which cuts the matching
segment in half. Therefore, an adversary may be able to use
the presence or absence of a matching segment as an oracle to
extract individual SNPs. Here, we show how this can be done
on GEDmatch.
A. Constructing Matching DNA Segments
Recall that GEDmatch uses a 1-bit compression scheme
when comparing SNPs. A segment, or run of SNPs, is con-
sidered a matching segment in GEDmatch if it contains a
long enough run of half- or full-matching SNPs (i.e., one or
both bits match in each SNP). The precise parameters, like
minimum segment length, are conﬁgurable by the user when
running a one-to-one comparison.
We know that a run of SNPs where every SNP has a
genotype of AC will half- or full-match any other kit (see
Section VI-C for an explanation). Therefore, we can construct
a matching segment
in any given chromosome region by
setting all SNPs in that region to AC.
B. Using DNA Matches to Extract Individual SNPs
We can conﬁgure the one-to-one comparison so that a
single mismatched SNP will break a matching segment; in
other words, the matching segment must be a contiguous run
of half- or fully-matched SNPs. Assume a SNP of interest
called Si. The adversary can extract the compressed genotype
of Si in a target kit by uploading an extraction kit where
Si−j, Si−j+1, ..., Sj, ..., Si+j−1, Si+j are all set to AC; j is