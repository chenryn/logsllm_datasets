### 2.8.6 Refund Abuse
The refund process must be rigorously tested to prevent users from exploiting it to accumulate free points. If a user buys and refunds items, they may spend the points in between these transactions. In such cases, the user might not have sufficient points in their reward card at the time of the refund. An appropriate policy should be in place to recover any lost points. Additionally, any free items received during the initial purchase should be returned when a refund or cancellation is processed.

### 2.8.7 Buy-X-Get-Y-Free
Promotions like "buy-one-get-one-free" can be abused if users can obtain inapplicable items for free or pay for cheaper items to get more expensive ones for free. Here are some logical issues that might arise:
- **Incorrect Discount Application:** Not discounting the cheapest item in a "3-for-2" offer can result in buying an expensive item for less. For example, if the discount is applied to the last item added to the basket, or if the cheapest item is not alphabetically the last one in the list.
- **Miscalculated Offers:** A "3-for-2" offer can become a "2-for-1" if a free item is included by purchasing another item and the free item is counted as one of the three.
- **Overall Basket Discount:** A "3-for-2" offer can turn into a 33% discount on the entire basket. This can occur due to human error or software bugs, allowing users to add an expensive item and two cheap items to the basket and buy the expensive item at a reduced price.
- **Excessive Free Items:** Adding four items instead of three can result in a "4-for-2" offer.
- **Severe Miscalculation:** A "3-for-2" offer can become a "3-for-1" due to a software bug. Although this is often a human error, it can still be exploited.

### 2.8.8 Ordering Out of Stock or Unreleased Items
Some websites reduce the prices of out-of-stock items to attract customers. This can be abused if orders can still be processed for these items, even though they are marked as out of stock. Users might also exploit this by adding an out-of-stock item to their basket to receive a special discount or offer. Additionally, this issue can be exploited by ordering and then canceling all of a specific item to create a temporary out-of-stock situation while the website processes the cancellations.

### 2.8.9 Bypassing Other Restrictions
Additional tests should be conducted to ensure that restrictions such as limited quantities of sale items, customer-specific offers, and one-time vouchers are not bypassed. This includes testing for scenarios where multiple uses of a one-time voucher are attempted or where the system allows more than the specified quantity of a limited item to be purchased.

### 2.8.10 Point Transfer
Users who receive reward points through referrals or first-time registrations can abuse the point transfer functionality. While this feature may not be directly accessible, it can be available when closing an account or if a loyalty card is lost or stolen. The point transfer functionality should be tested for race condition issues to prevent exploitation.

### 2.9 Cryptography Issues (CWE: 310)
Cryptographic methods such as encryption, encoding, signing, and hashing are common in payment systems. However, design errors and implementation mistakes, often due to human error or lack of knowledge about attack vectors, are frequent. Applications that implement their own cryptographic methods rather than using well-known libraries are particularly vulnerable. For example, using a short and insecure secret key for hashing can be easily brute-forced if the algorithm is known. 

Another vulnerability is the length-extension attack, where the hash of a secret key concatenated with other values can be exploited to add data to the original request by padding the original data and calculating a new hash. Concatenated values in a signature hash should use unforgeable delimiters to prevent manipulation. 

For instance, a signature hash based on concatenated parameters without delimiters can be vulnerable:
```plaintext
HMAC_SHA256(SecretKey, Other Parameters + ReferenceString + NumericalAmount)
```
If "ReferenceString" can contain arbitrary strings, "NumericalAmount" can be manipulated to create the same signature hash:
```plaintext
OtherParams=OtherValues&...&ReferenceString=SomeStringHere&NumericalAmount=89
OtherParams=OtherValues&...&ReferenceString=SomeStringHere8&NumericalAmount=9
```

When encrypted values are used in multiple places (e.g., cookies, POST/GET requests), the application often decrypts them in multiple places. This can allow users to decrypt unknown values to understand how the application works. If a user can shape and encrypt arbitrary data, they can replace the current encrypted parameters, leading to severe security issues.

As discussed in the "Replay Attacks" section, sometimes there is no need to break the cryptographic methods; they can simply be replayed.

### 2.10 Downloadable and Virtual Goods (CWE: 425)
E-commerce applications selling virtual goods such as application files, MP3s, streaming videos, or PDFs can be vulnerable to direct object reference attacks. An attacker can download or use non-free materials for free by guessing or finding the actual URLs of the virtual products.

### 2.11 Hidden and Insecure Backend APIs (CWE: 656)
Backend APIs used by electronic point of sale systems or payment servers are often old and insecure, as they are not directly accessible to users. Even mobile or tablet application APIs can be insecure if developers do not consider server-side security. These APIs and web services may lack protection against many attack techniques and can suffer from access control issues, allowing attackers to perform administrative tasks such as balance adjustments.

### 2.12 Using Test Data in Production Environment (CWE: 531)
To test e-commerce applications, developers often use test payment methods and dummy card data in testing or staging environments. However, code meant for the testing environment is sometimes left in the production environment. This can allow users to change parameters in the request to force the live application to use test data. Additionally, e-commerce applications may not display all payment methods, especially if they are not fully implemented or enabled for specific users. Debugging functions and test pages can put the website at risk if discovered by an attacker.

For example, changing the payment type to a numerical value can force the application to use the test payment gateway, allowing an attacker to complete a transaction without spending real money. The destination page and all input data in a payment request should be thoroughly examined and tested to prevent this.

### 2.13 Currency Arbitrage in Deposit/Buy and Withdrawal/Refund
If an e-commerce application supports different payment methods with different currencies, users can potentially deposit money in one currency and withdraw it in another, taking advantage of inconsistent exchange rates. For instance, if Bank A has a USD-to-EUR exchange rate of 3/2 (giving $3 for €2) and Bank B has an EUR-to-USD exchange rate of 3/4 (giving €3 for $4), a user can deposit 8 Euros using Bank A, receive 12 Dollars, and then withdraw those 12 Dollars using Bank B to receive 9 Euros, gaining 1 Euro. This arbitrage can be more complex in financial applications supporting multiple-currency transfers, such as triangular arbitrage.

While banking and trading applications are less likely to be vulnerable due to high-speed computer networks, e-commerce applications with slow exchange rate updates can be exploited.

### 3. Conclusions
This paper discusses various attack methods and testing methodologies for e-commerce, payment, and trading applications, including:
- Time-of-Check-Time-of-Use (TOCTOU) and race condition issues
- Parameter manipulation
- Replay attacks
- Rounding issues
- Numerical processing
- Credit card and other payment card related issues
- Dynamic prices, referral schemes, and discount codes
- Cryptography issues
- Downloadable and virtual goods
- Hidden and insecure backend APIs
- Using test data in production environments
- Currency arbitrage

These attack methods can also be applied to similar applications such as betting and gambling platforms or other financial services. Web applications should be tested for common vulnerabilities to ensure comprehensive coverage. Organizations like OWASP provide guidance on what to cover and how to achieve this coverage. Understanding the business process and specific threats is crucial for identifying certain vulnerabilities, which often require human and manual testing in dynamic application environments.

### 4. References and Further Reading
1. Research Insights Volume 1 - Sector Focus: Financial Services
   - [Link](https://www.nccgroup.trust/media/481879/research-insights-vol-1_sector-focus-financial-services-mar2015-online.pdf)
2. Is Your Online Bank Vulnerable To Currency Rounding Attacks?
   - [Link](http://blog.acrossecurity.com/2012/01/is-your-online-bank-vulnerable-to.html)
3. Currency Arbitrage
   - [Link](http://www.investopedia.com/terms/c/currency-arbitrage.asp)
4. Corsaire Whitepaper: Breaking the Bank
   - [Link](http://lists.owasp.org/pipermail/webappsec/2008-July/000634.html)
5. Ron Bowes – Crypto: You’re Doing It Wrong
   - [Link](https://www.youtube.com/watch?v=j3wXitDweC4#t=1411)
6. Flickr API Signature Forgery
   - [Link](http://netifera.com/research/flickr_api_signature_forgery.pdf)
7. Don’t trust a string based on TryParse or IsNumeric result
   - [Link](https://soroush.secproject.com/blog/2012/10/dont-trust-a-string-based-on-tryparse-or-isnumeric-result-netvbscript/)
8. The PCI Security Standards Council Website
   - [Link](https://www.pcisecuritystandards.org/)
9. Test Card Details for Your Test Transactions
   - [Link](http://www.sagepay.co.uk/support/12/36/test-card-details-for-your-test-transactions)
10. Common Weakness Enumeration
    - [Link](https://cwe.mitre.org/)
11. Online shoplifting – exploiting e-commerce basket and voucher faults for five-finger discount
    - [Link](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/april/online-shoplifting-exploiting-e-commerce-basket-and-voucher-faults-for-five-finger-discount/)