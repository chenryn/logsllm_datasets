2.8.6 Refund Abuse 
The refund process should also be tested to ensure that a user cannot earn free points by buying and 
refunding items. The points might be spent in between buying and refunding items; in this case, users 
may not have enough points in their reward cards when refunding an item, and an appropriate policy 
should be in place to recover the lost points. Any collected free items should also be considered to be 
returned when a refund or cancellation is due to happen. 
2.8.7 Buy-X-Get-Y-Free 
Offer schemes such as buy-one-get-one-free in which the user only pays for the most expensive item 
can also be abused to buy inapplicable items for free or to pay for the cheapest items to get the more 
expensive ones for free.  
The following logical issues show a series of examples that might occur here: 
 Not discounting the cheapest item in 3-for-2. This can result in buying an expensive item for 
less. For example, when the discount is applied on the last item added to the basket or when 
the cheapest item is not alphabetically the last one in the list of items in a basket.  
 3-for-2 can become 2-for-1 when a free item is added by buying another item and the free item 
is counted as one of 3. 
 3-for-2 can become 33% off the whole basket. Although this might be a human error, some 
applications might have a software bug to allow this when different items are mixed and 
matched. As a result, it is possible to add an expensive and two cheap items to the basket to 
buy the expensive item cheaper. 
 3-for-2 can become 4-for-2 when adding 4 items to the list rather than 3. 
 3-for-2 can become 3-for-1 when there is a software bug. Although this type of issue is 
common, it is highly likely that it is based on human error. 
2.8.8 Ordering Out of Stock or Unreleased Items 
Some websites may reduce their out of stock items’ prices in order to attract more customers. This 
might be abused if an order can be made using out of stock items when it can still go through to their 
warehouse while the items still exist despite being selected as out of stock on the website. 
This can also be abused in order to receive free or discounted items by adding an out of stock item to 
the basket as part of a special discount or offer.  
It should be noted that this issue might also be exploited by ordering and then cancelling all of a specific 
item in a website in order to create a temporary out of stock item while the website is processing the 
cancellation requests. 
2.8.9 Bypassing Other Restrictions 
Additional tests need to be performed to bypass any available restrictions such as limited quantity of 
specific items in sale, use of customer specific offers, or using one time vouchers multiple times. 
NCC Group | Page 18 
© Copyright 2019 NCC Group 
2.8.10 Point Transfer 
If users receive reward points by referring someone else to register or by registering themselves for 
the first time, they can abuse the reward point scheme by using point transfer functionality. Although 
point transfer functionality may not be directly accessible to the users in an application, it can be 
available upon closing an account or when a loyalty card has been lost or stolen. The point transfer 
functionality should also be tested for the previously explained race condition issues. 
2.9 Cryptography Issues 
CWE: 310 
Cryptographic methods such as encryption, encoding, signing, and hashing are often seen within 
payment systems. However, design errors and implementation mistakes, due to human error, or the 
lack of attack vector knowledge, are quite commonly seen in this area, especially in applications which 
implement their own cryptography methods rather than using well-known pre-implemented libraries. 
For example, when an application hashes some of the known parameters with a short and insecure 
secret key, this key can easily be brute-forced when the algorithm is known.  Sometimes applications 
do not use long and strong secret keys when the implementation does not enforce it. 
Another example is length-extension attack, in which the hash of a secret key which is concatenated 
with other values can be exploited to add data to the original request by padding the original data and 
calculating a new hash (see [5] and [6] for more details). 
Concatenated values in a signature hash should also use unforgeable delimiters. Otherwise, it might 
be possible to move part of a parameter’s value to another parameter’s value without changing the 
signature as the concatenated string remains the same.  
The following example shows a signature hash based on concatenated parameters without any 
delimiters which could leave the application vulnerable: 
HMAC_SHA256(SecretKey, Other Parameters + ReferenceString + NumericalAmount) 
When the “ReferenceString” parameter could contain an arbitrary string, the “NumericalAmount” 
parameter could be manipulated as shown below to create the same signature hash:  
OtherParams=OtherValues&...&ReferenceString=SomeStringHere&NumericalAmount=89 
OtherParams=OtherValues&...&ReferenceString=SomeStringHere8&NumericalAmount=9 
When the encrypted values are used in multiple places within the input parameters (in cookies, or 
POST/GET requests), the application often decrypts them in multiple places as well. The user may be 
able to use those pages to decrypt unknown encrypted values in order to understand how the 
application works. The problem can be severe if a user can shape and encrypt arbitrary data by using 
the provided input parameters in order to replace the current encrypted parameters. 
As was discussed in the “Replay Attacks” section, sometimes there is also no need to break the 
cryptography methods, as they can be replayed. 
2.10 Downloadable and Virtual Goods 
CWE: 425 
E-commerce applications which sell virtual goods such as application files, MP3s, streaming videos, 
or PDF and document files can often be vulnerable to direct object reference attacks. In this case, an 
attacker can download or use non-free materials for free just by guessing or finding the actual URLs 
of the virtual products. 
2.11 Hidden and Insecure Backend APIs  
CWE: 656 
NCC Group | Page 19 
© Copyright 2019 NCC Group 
Backend APIs which are used by electronic point of sale systems or payment servers are often old 
and insecure, as they are not directly accessible to the users. Sometimes even mobile or tablet 
application APIs are also insecure, as the developer did not think about security in the server side 
application layer when implementing them. 
Some of these APIs and web services do not have any protection against many of the described attack 
techniques, and some of them even suffer from access control issues, allowing an attacker to perform 
administrative tasks such as balance adjustment. 
2.12 Using Test Data in Production Environment 
CWE: 531 
In order to implement an e-commerce application, test payment methods and dummy card data are 
normally used in the testing or staging environments to prevent sending test requests to the live 
payment APIs or banks. Developers often miss removing a code from the production environment that 
is supposed to be only available in the testing environment. As a result, it is sometimes possible to 
change some of the parameters in the request to force a live application to use the test data. In 
addition, an e-commerce application may not show all of its payment methods, especially when they 
are not enabled for a specific user or when they are not fully implemented. Some of the test pages 
with which developers test and debug the functionality of third party APIs to ensure they work in the 
right way can also be available on e-commerce websites. These debugging functions and test pages 
can put the website in danger when found by an attacker. 
The following shows an example of this vulnerability: 
A website sent a numerical payment type to the server, alongside the other parameters which were 
needed to complete a transaction. However, changing the payment type to other numerical values 
could force the application to use the test payment gateway that used testing accounts to simulate the 
live environment. This allowed an attacker to complete a transaction without spending real money, just 
by connecting the application to its testing environment. 
The destination page and all the input data in a payment request should be examined and tested to 
make sure that is not possible to force a live application to use test data. For instance, sometimes 
changing the “HOST” header in the HTTP request to a known internal hostname that is used for testing 
can trigger this vulnerability. 
In addition, payment-specific testing data should also be tested in order to make sure that it is not 
possible to use it in the live environment. For instance, in one application it was possible to use the 
Sage Pay test card data [9] in a real transaction. 
2.13 Currency Arbitrage in Deposit/Buy and Withdrawal/Refund 
If an e-commerce application supports different payment methods with different currencies, someone 
can potentially deposit money in one currency and withdraw it with another. Arbitrage occurs when the 
deposit and the withdrawal methods are different (such as using a credit card company to deposit 
money and PayPal for money withdrawal) and they use inconsistent exchange rates. 
For instance, imagine a third party website supports two different payment types (let’s call them Bank 
A and B) to deposit or withdraw money in or from the website. The USD-to-EUR exchange rate with 
the commission is 3/2 (giving $3 for €2) using Bank A, and the EUR-to-USD exchange rate is 3/4 using 
Bank B (giving €3 for $4). By depositing 8 Euros in the website using Bank A, 12 Dollars will be 
deposited (exchange rate = 3/2). Now, by withdrawing this 12 Dollars from the website and depositing 
them into Bank B, 9 Euros will be deposited for the user (exchange rate = 3/4). This gives one 
additional Euro to the user who only had deposited 8 Euros to the website originally. 
NCC Group | Page 20 
© Copyright 2019 NCC Group 
Figure 9: Exploiting currency arbitrage 
A more sophisticated issue can be found when a financial application supports money transfer with 
different currencies, as multiple-currency arbitrage (such as triangular arbitrage) can be exploited 
when the commission fees are negligible. 
It is rare to see this vulnerability among banking and trading applications, due to the use of high-speed 
computer networks which can alarm them to close the gap whenever arbitrage can happen [3]. 
However, an e-commerce application that updates its exchange rate slowly can be a victim of this 
exploitation technique. 
NCC Group | Page 21 
© Copyright 2019 NCC Group 
3 
Conclusions 
In this paper, the following attack methods and testing methodologies were discussed against e-
commerce, payment, and trading applications: 
• 
Time-of-Check-Time-of-Use (TOCTOU) and race condition issues 
o 
Transferring money/points or buying items simultaneously 
o 
Changing the order upon payment completion 
o 
Changing the order after payment completion 
• 
Parameter manipulation 
o 
Price manipulation 
o 
Currency manipulation 
o 
Quantity manipulation 
o 
Shipping address and post method manipulation 
o 
Additional costs manipulation 
o 
Response manipulation 
o 
Repeating an input parameter multiple times 
o 
Omitting an input parameter or its value 
o 
Mass assignment, autobinding, or object injection 
o 
Monitor the behaviour while changing parameters to detect logical flaws 
• 
Replay attacks 
o 
Replay the call-back request 
o 
Replay an encrypted parameter 
• 
Rounding issues 
o 
Currency rounding issues 
o 
Generic rounding issues between different applications 
• 
Numerical processing 
o 
Negative numbers 
o 
Decimal numbers 
o 
Large or small numbers 
o 
Overflows and underflows 
o 
Zero, null, or subnormal numbers 
o 
Exponential notation 
o 
Reserved words 
o 
Numbers in different formats 
• 
Credit card and other payment card related issues 
o 
Showing a saved card number during the payment process 
o 
Card number enumeration via registering duplicate cards 
• 
Dynamic prices, prices with tolerance, or referral schemes 
• 
Discount codes, vouchers, offers, reward points, and gift cards 
o 
Enumeration and guessing 
o 
Vouchers and offers stacking 
o 
Earning more points or cash return than the price when buying an item 
o 
Using expired, invalid, or other users’ codes 
o 
State and basket manipulation 
o 
Refund abuse 
o 
Buy-x-get-y-free 
o 
Ordering out of stock or unreleased items 
o 
Bypassing other restrictions 
o 
Point transfer 
• 
Cryptography Issues 
• 
Downloadable and virtual goods  
• 
Hidden and insecure backend APIs 
• 
Using test data in production environment 
• 
Currency arbitrage in deposit/buy and withdrawal/refund 
These attack methods can also be used against other similar applications such as betting and 
gambling applications, or other financial services platforms. 
NCC Group | Page 22 
© Copyright 2019 NCC Group 
In addition to the items which were discussed in this research, web applications should also be tested 
for common vulnerabilities to ensure comprehensive coverage. Organisations such as OWASP 
provide good advice on what to cover, and how to gain this coverage. 
It is clear that while there are common factors in all web applications, understanding the supporting 
business process and thus specific threats is imperative in order to tease out certain vulnerabilities. It 
is for this reason that today humans can provide a more complete picture than automated tooling 
alone. In the future we can expect approaches such as expert systems to go some way to make up 
this ground, however today certain vulnerability classes, and thus threats, can only reliably be 
discovered by humans and manual tests within dynamic application environments.  
NCC Group | Page 23 
© Copyright 2019 NCC Group 
4 
References and Further Reading 
The following references were used in the production of this whitepaper. 
1. Research Insights Volume 1 - Sector Focus: Financial Services 
https://www.nccgroup.trust/media/481879/research-insights-vol-1_sector-focus-financial-
services-mar2015-online.pdf 
2. Is Your Online Bank Vulnerable To Currency Rounding Attacks? 
http://blog.acrossecurity.com/2012/01/is-your-online-bank-vulnerable-to.html 
3. Currency Arbitrage 
http://www.investopedia.com/terms/c/currency-arbitrage.asp 
4. Corsaire Whitepaper: Breaking the Bank 
http://lists.owasp.org/pipermail/webappsec/2008-July/000634.html 
5. Ron Bowes – Crypto: You’re Doing It Wrong 
https://www.youtube.com/watch?v=j3wXitDweC4#t=1411  
6. Flickr API Signature Forgery 
http://netifera.com/research/flickr_api_signature_forgery.pdf  
7. Don’t trust a string based on TryParse or IsNumeric result 
https://soroush.secproject.com/blog/2012/10/dont-trust-a-string-based-on-tryparse-or-
isnumeric-result-netvbscript/  
8. The PCI Security Standards Council Website 
https://www.pcisecuritystandards.org/ 
9. Test Card Details for Your Test Transactions 
http://www.sagepay.co.uk/support/12/36/test-card-details-for-your-test-transactions 
10. Common Weakness Enumeration 
https://cwe.mitre.org/ 
11. Online shoplifting – exploiting e-commerce basket and voucher faults for five-
finger discount 
https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/april/online-
shoplifting-exploiting-e-commerce-basket-and-voucher-faults-for-five-finger-discount/