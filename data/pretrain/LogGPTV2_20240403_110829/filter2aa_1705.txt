# Unraveling SCADA Protocols: Using Sulley Fuzzer
## Ganesh Devarajan

### Agenda
1. **Introduction to SCADA Networks**
   - Overview
   - SCADA Protocols
     - Modbus
     - DNP3
     - ICCP
     - UCA 2.0 and IEC 61850 Standards
2. **SCADA Security**
   - Attack Scenarios
   - Past Known Attacks
3. **SCADA Fuzzer**
   - Demo
4. **Conclusion**
5. **Future Work**

### SCADA Definition
**SCADA (Supervisory Control and Data Acquisition)**
- A common process control application that collects data from sensors in various locations and sends it to a central computer for management and control.
- A large-scale, distributed measurement and control system (North America).
- A system that performs SCADA functions, regardless of size and geographical distribution (Rest of the World).

**SCADA Use**
- Vital component of many critical infrastructures, used for real-time sensing and managing:
  - Water
  - Gas
  - Electricity
  - Refineries
  - Nuclear plants
  - Other manufacturing operations

### SCADA Infrastructure
#### SCADA System Components
- **Operator (Human)**
  - Responsible for making supervisory control decisions.
  - Can be present at local or remote sites.
- **Human Machine Interface (HMI)**
  - Presents data to the user/operator.
  - GUIs, schematics, and windows.
- **Master Terminal Unit (MTU)**
  - Processes data and presents it to the HMI.
  - Collects data from remote sites.
  - Sends queries and instructions to remote nodes.
- **Communication Channel**
  - Internet, wireless, switched network, etc.
- **Remote Terminal Unit (RTU)**
  - Sends abstracted data to the MTU.
  - Sends control signals to sensors and collects data values.

#### Traditional SCADA Networks
- Motors, drives, actuators, robotics, sensors, and other input/output devices.
- Programmable Logic Controllers (PLC)
- Human Machine Interface (HMI)
- PC-based controllers
- Back-office mainframes and servers (ERP, MES, CAPP, PDM, etc.)
- Control network gateway
- Office applications, internetworking, data servers, storage
- Corporate IT network
- Control level network
- Device level network
- Information level network (Ethernet)

#### Current/Future SCADA Networks
- Enhanced integration with Ethernet and corporate IT networks.
- Improved security and communication protocols.

### Need for SCADA Security
- **Initial Security**: Proprietary and isolated from the outside world.
- **Current Exposure**: With improved communication, SCADA systems are more exposed to the internet, lacking inbuilt security features.
- **Risks**:
  - Large-scale blackouts.
  - Smaller-scale disruptions (e.g., cooling systems in server rooms, false reports at manufacturing plants).
- **Current Security Scenario**:
  - Poor authentication and verification.
  - Lack of implemented authentication schemes.
  - Easy introduction of malicious nodes.
  - Platform vulnerabilities (Windows & Linux).
  - Infrequent patching due to uptime requirements.
  - Misconceptions about security (vendors and asset owners).

### SCADA Attack Scenarios
- **Providing False Data**: Compromised RTUs can write false data into the server (e.g., water pollutant sensors, temperature sensors in server rooms).
- **Denial of Service (DoS) Attack**: Continuous reboot commands.
- **Protocol Anomalies**: Exploiting protocol weaknesses.

### SCADA Attacks
- **Al Qaeda Cyber-Attacks**: Feared attacks on SCADA systems (Washington Post, June 27, 2002).
- **Vitek Boden Incident**: Released millions of liters of sewage into drinking water using knowledge of control systems.
- **Slammer Worm**: Affected the Davis-Besse nuclear plant, disabling a safety monitoring system for nearly five hours (January 2003).
- **Gazprom Pipeline Hack**: Hacker took control of gas pipelines for 24 hours (1999, Russia).

### SCADA Protocols
- **Modbus**
  - Developed in the late 1970s by Modicon, Inc.
  - Commonly used in industrial environments.
  - Free and open-source.
  - Variants: Modbus RTU, Modbus ASCII, Modbus/TCP.
- **DNP3 (Distributed Network Protocol 3)**
  - Mainly used in utility companies.
  - Features: Disable spontaneous messages, internal indication flags.
- **ICCP (Inter-Control Center Communications Protocol)**
  - Developed by EPRI and Northern States Power (NSP).
  - Used for communication between control centers and WANs.
  - Utilizes TASE, ACSE, and COTP.
- **UCA 2.0 and IEC 61850 Standards**
  - Modern standards for utility communications.

### SCADA Fuzzer
- **Detection Capabilities**:
  - Protocol anomalies.
  - Unauthorized client/server communication.
  - Unauthorized command execution.
  - Possible DoS attacks.
- **Covered Protocols**:
  - MODBUS
  - DNP3
  - ICCP
  - TPKT
  - COTP

#### Fuzzer Components
- `__init__.py`: Defines all aliases.
- `blocks.py`: Defines blocks and block helpers.
- `pedrpc.py`: Communication purposes and interface with the main fuzzer.
- `primitives.py`: Fuzzer primitives (string, static, etc.).
- `sessions.py`: Functionality for building and executing sessions.
- `sex.py`: Sulley’s exception handler.
- **Agents**:
  - `network_monitor.py`: Monitors network communications and logs pcap files.
  - `process_monitor.py`: Detects faults.
  - `vmcontrol.py`: Interfaces with VM images for start, stop, suspend, and reset operations.

### SCADA Fuzzer Architecture
- **Sulley Fuzzer**: Web GUI available at [www.fuzzing.org](http://www.fuzzing.org).

### Code Snippets
- **Modbus Code Snippet**:
  ```python
  s_initialize("MODBUSFUNCCODE01")
  # Transaction ID
  s_static("\x00\x01")
  # Modbus Protocol Identifier
  s_static("\x00\x00")
  # Length bytes
  s_sizer("modlength", length=2, name="length", endian=">", fuzzable=False)
  if s_block_start("modlength"):
      # Unity Identifier
      s_static("\x0D")
      # Function Code
      s_byte(0x01)
      # Data or Sub function Code
      s_dword(0x00000000)
  s_block_end()
  ```

- **DNP3 Code Snippet**:
  ```python
  s_initialize("DNP3StaticLength")
  if s_block_start("header"):
      s_static("\x05\x64") # Start Sync Bytes.
      # Length Bytes we are having it as a constant length at first
      s_static("\x12")
      # Control Byte   
      s_byte(0xc4, full_range=True)
      # Destination Address
      s_short(0x0400)
      # Source Address
      s_short(0x300)
  s_block_end()
  # Checksum of the DNP Header.   
  s_checksum("header", algorithm=dnp_crc16, length=2)
  # The Data Portion of the Packet
  if s_block_start("Data"):
      # Transport Layer Chunk
      s_byte(0xc2, full_range=True)
      # Application Chunk
      s_byte(0xc2, full_range=True)
      # Function Code
      s_byte(0x0d, full_range=True)
      # Static Data for now..
      s_static("AAAAAAA")
      # This will fuzz a huge array of string cases..
  s_block_end()
  s_checksum("Data", algorithm=dnp_crc16, length=2)
  s_string("A") + Chunkdnp3(data)
  ```

- **ICCP – TPKT Code Snippet**:
  ```python
  s_initialize("ICCP-TPKT")
  if s_block_start("header"):
      s_byte(0x03, full_range=True) # Version
      s_byte(0x00, full_range=True) # Reserved
      s_short(0x0000) # Length
  s_block_end()
  # This length includes the header and data information from other layers
  ```

- **ICCP – COTP Code Snippet**:
  ```python
  s_initialize("ICCP-COTP")
  s_sizer("header", length=1, name="length", fuzzable=True)
  # Length
  if s_block_start("header"):
      s_byte(0xE0, full_range=True) # PDU Type
      s_short(0x0000) # Destination Reference
      s_short(0x0000) # Source Reference
      s_byte(0x00, full_range=True) # Class/Options
      s_byte(0xc1) # Parameter Code Source TSAP
      s_sizer("Param1", length=1, name="ParamLength1", fuzzable=True)
      if s_block_start("Param1"):
          s_string("A")
      s_block_end()
      s_byte(0xc2) # Parameter Code Destination TSAP
      s_sizer("Param2", length=1, name="ParamLength2", fuzzable=True)
      if s_block_start("Param2"):
          s_string("A")
      s_block_end()
      s_byte(0xc0) # Parameter Code TPDU Size
      s_sizer("Param3", length=1, name="ParamLength3", fuzzable=True)
      if s_block_start("Param3"):
          s_byte(0x0b)
      s_block_end()
  s_block_end()
  # Source TSAP, Destination TSAP, TPDU Size
  ```

### Conclusion
- Basic SCADA network architecture.
- Importance of security in SCADA networks.
- Details of SCADA protocols.
- Overview of the fuzzer and its components.

### Future Work
- Exploration of other SCADA protocols.
- Two-way fuzzing.

### References
- **SCADA Architecture and Implementation**: *Securing SCADA Systems* by Ronald L. Krutz, PhD.
- **Modbus**: [www.modbus.org](http://www.modbus.org)
- **DNP3**: [www.dnp3.org](http://www.dnp3.org)
- **ICCP**: [www.iccp.org](http://www.iccp.org)
- **Attack Details**: [www.digitalbond.com](http://www.digitalbond.com)
- **Modbus Protocol Details**: [http://www.modbustools.com/PI_MBUS_300.pdf](http://www.modbustools.com/PI_MBUS_300.pdf)
- **DNP3 Protocol Primer**: [http://www.dnp.org/About/DNP3%20Primer%20Rev%20A.pdf](http://www.dnp.org/About/DNP3%20Primer%20Rev%20A.pdf)
- **DNP3 User and Reference Manual**: [https://dg.controlmicrosystems.com/Technical%20Support/Software,%20Manuals%20and%20Release%20Notes/Protocols/DNP3%20Protocol/Manuals/DNP3_User_and_Reference_Manual.pdf](https://dg.controlmicrosystems.com/Technical%20Support/Software,%20Manuals%20and%20Release%20Notes/Protocols/DNP3%20Protocol/Manuals/DNP3_User_and_Reference_Manual.pdf)
- **ICCP Guide**: [www.sisconet.com/downloads/usrguid5.doc](http://www.sisconet.com/downloads/usrguid5.doc)
- **Matt Franz Wiki**: [http://www.scadasec.net/secwiki/SecProducts](http://www.scadasec.net/secwiki/SecProducts)
- **Wikipedia**
- **SCADA Architecture Slides**: [Source]

### Acknowledgements
- **Pedram Amini, Aaron Portnoy, and Cody Pierce** for their work on the Sulley Fuzzing Framework.
- **Rohit Dhamankar and Dinesh Sequeira** for their enthusiasm about SCADA systems.
- **Matt Franz** for support and guidance.

### Questions?
Thank you,
Ganesh Devarajan  
Email: [Your Email]