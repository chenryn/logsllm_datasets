34 statusCode, checkMark)
35 } else {
36 t.Errorf("\t\tShould receive a \"%d\" status. %v %v",
37 statusCode, ballotX, resp.StatusCode)
38 }
39 }
40 }
41 }
在代码清单 9-7 的第 32 行，会将响应返回的状态码和我们期望收到的状态码进行比较。我
们再次声明了期望测试返回的结果是什么。如果状态码匹配，我们就使用t.Logf方法输出信息；
否则，就使用t.Errorf方法。因为t.Errorf方法不会停止当前测试函数的执行，所以，如
果在第38行之后还有测试，单元测试就会继续执行。如果测试函数执行时没有调用过t.Fatal
或者t.Error方法，就会认为测试通过了。
如果再看一下测试的输出（如图9-2所示），你会看到这段代码组合在一起的效果。
图9-2 基础单元测试的输出
在图 9-2 中能看到这个测试的完整文档。下载给定的内容，当检测获取 URL 的内容返回的
状态码时（在图中被截断），我们应该能够成功完成这个调用并收到状态 200。测试的输出很清
晰，能描述测试的目的，同时包含了足够的信息。我们知道具体是哪个单元测试被运行，测试通
过了，并且运行消耗的时间是435毫秒。
9.1.2 表组测试
如果测试可以接受一组不同的输入并产生不同的输出的代码，那么应该使用表组测试的方法
进行测试。表组测试除了会有一组不同的输入值和期望结果之外，其余部分都很像基础单元测试。
测试会依次迭代不同的值，来运行要测试的代码。每次迭代的时候，都会检测返回的结果。这便
于在一个函数里测试不同的输入值和条件。让我们看一个表组测试的例子，如代码清单9-8所示。
代码清单9-8 listing08_test.go
01 // 这个示例程序展示如何写一个基本的表组测试
02 package listing08
03
04 import (
05 "net/http"
06 "testing"
07 )
08
09 const checkMark = "\u2713"
10 const ballotX = "\u2717"
11
12 // TestDownload确认http包的Get函数可以下载内容
13 // 并正确处理不同的状态
14 func TestDownload(t *testing.T) {
15 var urls = []struct {
16 url string
17 statusCode int
18 }{
19 {
20 "http://www.goinggo.net/feeds/posts/default?alt=rss",
21 http.StatusOK,
22 },
23 {
24 "http://rss.cnn.com/rss/cnn_topstbadurl.rss",
25 http.StatusNotFound,
26 },
27 }
28
29 t.Log("Given the need to test downloading different content.")
30 {
31 for _, u := range urls {
32 t.Logf("\tWhen checking \"%s\" for status code \"%d\"",
33 u.url, u.statusCode)
34 {
35 resp, err := http.Get(u.url)
36 if err != nil {
37 t.Fatal("\t\tShould be able to Get the url.",
38 ballotX, err)
39 }
40 t.Log("\t\tShould be able to Get the url",
41 checkMark)
42
43 defer resp.Body.Close()
44
45 if resp.StatusCode == u.statusCode {
46 t.Logf("\t\tShould have a \"%d\" status. %v",
47 u.statusCode, checkMark)
48 } else {
49 t.Errorf("\t\tShould have a \"%d\" status %v %v",
50 u.statusCode, ballotX, resp.StatusCode)
51 }
52 }
53 }
54 }
55 }
在代码清单9-8中，我们稍微改动了之前的基础单元测试，将其变为表组测试。现在，可以
使用一个测试函数来测试不同的URL以及http.Get方法的返回状态码。我们不需要为每个要
测试的 URL 和状态码创建一个新测试函数。让我们看一下，和之前相比，做了哪些改动，如代
码清单9-9所示。
代码清单9-9 listing08_test.go：第12行到第27行
12 // TestDownload确认http包的Get函数可以下载内容
13 // 并正确处理不同的状态
14 func TestDownload(t *testing.T) {
15 var urls = []struct {
16 url string
17 statusCode int
18 }{
19 {
20 "http://www.goinggo.net/feeds/posts/default?alt=rss",
21 http.StatusOK,
22 },
23 {
24 "http://rss.cnn.com/rss/cnn_topstbadurl.rss",
25 http.StatusNotFound,
26 },
27 }
在代码清单 9-9 中，可以看到和之前同名的测试函数 TestDownload，它接收一个指向
testing.T类型的指针。但这个版本的TestDownload略微有些不同。在第15行到第27行，
可以看到表组的实现代码。表组的第一个字段是 URL，指向一个给定的互联网资源，第二个字
段是我们请求资源后期望收到的状态码。
目前，我们的表组只配置了两组值。第一组值是 goinggo.net 的 URL，响应状态为 OK，第
二组值是另一个URL，响应状态为NotFound。运行这个测试会得到图9-3所示的输出。
图9-3 表组测试的输出
图9-3所示的输出展示了如何迭代表组里的值，并使用其进行测试。输出看起来和基础单元
测试的输出很像，只是每次都会输出两个不同的URL及其结果。测试又通过了。
让我们看一下我们是如何让表组测试工作的，如代码清单9-10所示。
代码清单9-10 listing08_test.go：第29行到第34行
29 t.Log("Given the need to test downloading different content.")
30 {
31 for _, u := range urls {
32 t.Logf("\tWhen checking \"%s\" for status code \"%d\"",
33 u.url, u.statusCode)
34 {
代码清单9-10 的第31 行的for range 循环让测试迭代表组里的值，使用不同的URL运
行测试代码。测试的代码与基础单元测试的代码相同，只不过这次使用的是表组内的值进行测试，
如代码清单9-11所示。
代码清单9-11 listing08_test.go：第35行到第55行
35 resp, err := http.Get(u.url)
36 if err != nil {
37 t.Fatal("\t\tShould be able to Get the url.",
38 ballotX, err)
39 }
40 t.Log("\t\tShould be able to Get the url",
41 checkMark)
42
43 defer resp.Body.Close()
44
45 if resp.StatusCode == u.statusCode {
46 t.Logf("\t\tShould have a \"%d\" status. %v",
47 u.statusCode, checkMark)
48 } else {
49 t.Errorf("\t\tShould have a \"%d\" status %v %v",
50 u.statusCode, ballotX, resp.StatusCode)
51 }
52 }
53 }
54 }
55 }
代码清单9-11的第35行中展示了代码如何使用u.url字段来做URL调用。在第 45 行中，
u.statusCode 字段被用于和实际的响应状态码进行比较。如果以后需要扩展测试，只需要将
新的URL和状态码加入表组就可以，不需要改动测试的核心代码。
9.1.3 模仿调用
我们之前写的单元测试都很好，但是还有些瑕疵。首先，这些测试需要访问互联网，才能保
证测试运行成功。图9-4展示了如果没有互联网连接，运行基础单元测试会测试失败。
图9-4 由于没有互联网连接导致测试失败
不能总是假设运行测试的机器可以访问互联网。此外，依赖不属于你的或者你无法操作的服
务来进行测试，也不是一个好习惯。这两点会严重影响测试持续集成和部署的自动化。如果突然
断网，导致测试失败，就没办法部署新构建的程序。
为了修正这个问题，标准库包含一个名为 httptest 的包，它让开发人员可以模仿基于
HTTP 的网络调用。模仿（mocking）是一个很常用的技术手段，用来在运行测试时模拟访问不
可用的资源。包httptest可以让你能够模仿互联网资源的请求和响应。在我们的单元测试中，
通过模仿http.Get的响应，我们可以解决在图9-4中遇到的问题，保证在没有网络的时候，我
们的测试也不会失败，依旧可以验证我们的 http.Get 调用正常工作，并且可以处理预期的响
应。让我们看一下基础单元测试，并将其改为模仿调用goinggo.net网站的RSS列表，如代码清
单9-12所示。
代码清单9-12 listing12_test.go：第01行到第41行
01 // 这个示例程序展示如何内部模仿HTTP GET调用
02 // 与本书之前的例子有些差别
03 package listing12
04
05 import (
06 "encoding/xml"
07 "fmt"
08 "net/http"
09 "net/http/httptest"
10 "testing"
11 )
12
13 const checkMark = "\u2713"
14 const ballotX = "\u2717"
15
16 // feed模仿了我们期望接收的XML文档
17 var feed = `
18 
19 
20 Going Go Programming
21 Golang : https://github.com/goinggo
22 http://www.goinggo.net/
23 
24 Sun, 15 Mar 2015 15:04:00 +0000
25 Object Oriented Programming Mechanics
26 Go is an object oriented language.
27 http://www.goinggo.net/2015/03/object-oriented
28 
29 
30 `
31
32 // mockServer返回用来处理请求的服务器的指针
33 func mockServer() *httptest.Server {
34 f := func(w http.ResponseWriter, r *http.Request) {
35 w.WriteHeader(200)
36 w.Header().Set("Content-Type", "application/xml")
37 fmt.Fprintln(w, feed)
38 }
39
40 return httptest.NewServer(http.HandlerFunc(f))
41 }
代码清单 9-12 展示了如何模仿对 goinggo.net 网站的调用，来模拟下载 RSS 列表。在第 17
行中，声明了包级变量feed，并初始化为模仿服务器返回的RSS XML文档的字符串。这是实
际RSS文档的一小段，足以完成我们的测试。在第33行中，我们声明了一个名为mockServer
的函数，这个函数利用 httptest 包内的支持来模拟对互联网上真实服务器的调用，如代码清
单9-13所示。
代码清单9-13 listing12_test.go：第32行到第41行
32 // mockServer返回用来处理调用的服务器的指针
33 func mockServer() *httptest.Server {
34 f := func(w http.ResponseWriter, r *http.Request) {
35 w.WriteHeader(200)
36 w.Header().Set("Content-Type", "application/xml")
37 fmt.Fprintln(w, feed)
38 }
39
40 return httptest.NewServer(http.HandlerFunc(f))
41 }
代码清单 9-13 中声明的 mockServer 函数，返回一个指向 httptest.Server 类型的指
针。这个 httptest.Server 的值是整个模仿服务的关键。函数的代码一开始声明了一个匿名
函数，其签名符合http.HandlerFunc函数类型，如代码清单9-14所示。
代码清单9-14 golang.org/pkg/net/http/#HandlerFunc
type HandlerFunc func(ResponseWriter, *Request)
HandlerFunc类型是一个适配器，允许常规函数作为HTTP的处理函数使用。如果函数f具有合适的签名，
HandlerFunc(f)就是一个处理HTTP请求的Handler对象，内部通过调用f处理请求
遵守这个签名，让匿名函数成了处理函数。一旦声明了这个处理函数，第 40 行就会使用这
个匿名函数作为参数来调用 httptest.NewServer 函数，创建我们的模仿服务器。之后在第
40行，通过指针返回这个模仿服务器。
我们可以通过http.Get调用来使用这个模仿服务器，用来模拟对goinggo.net网络服务器
的请求。当进行 http.Get 调用时，实际执行的是处理函数，并用处理函数模仿对网络服务器
的请求和响应。在第 35 行，处理函数首先设置状态码，之后在第 36 行，设置返回内容的类型
Content-Type，最后，在第 37 行，使用包含 XML 内容的字符串 feed 作为响应数据，返回
给调用者。
现在，让我们看一下模仿服务器与基础单元测试是怎么整合在一起的，以及如何将
http.Get请求发送到模仿服务器，如代码清单9-15所示。
代码清单9-15 listing12_test.go：第43行到第74行
43 // TestDownload确认http包的Get函数可以下载内容
44 // 并且内容可以被正确地反序列化并关闭
45 func TestDownload(t *testing.T) {
46 statusCode := http.StatusOK