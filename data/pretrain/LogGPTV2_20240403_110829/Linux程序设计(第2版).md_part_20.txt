# 文件操作系统调用与标准I/O库

## 1. lseek 系统调用
```c
#include <unistd.h>
off_t lseek(int fildes, off_t offset, int whence);
```
`lseek` 系统调用用于设置文件描述符 `fildes` 的读写指针。可以将指针定位到文件中的绝对位置，或相对于当前位置或文件尾的相对位置。

- `offset` 参数指定新位置。
- `whence` 参数定义 `offset` 的参考点：
  - `SEEK_SET`: `offset` 是从文件开头算起的绝对位置。
  - `SEEK_CUR`: `offset` 是从当前位置算起的相对位置。
  - `SEEK_END`: `offset` 是从文件尾部算起的相对位置。

`lseek` 返回的是从文件头到新位置的字节偏移值；如果失败则返回 `-1`。`offset` 类型 `off_t` 在 `sys/types.h` 中定义。

## 2. fstat、stat 和 lstat 系统调用
```c
#include <sys/stat.h>
#include <unistd.h>

int fstat(int fildes, struct stat *buf);
int stat(const char *path, struct stat *buf);
int lstat(const char *path, struct stat *buf);
```
- `fstat` 返回与打开的文件描述符关联的文件状态信息，并将其存储在 `struct stat` 结构中。
- `stat` 和 `lstat` 返回通过文件名获取的文件状态信息。如果文件是符号链接，`lstat` 返回链接本身的信息，而 `stat` 返回链接指向的文件信息。

`struct stat` 包含以下字段：
- `st_mode`: 文件权限和类型信息。
- `st_ino`: 与文件关联的 inode 编号。
- `st_dev`: 文件所在设备。
- `st_uid`: 文件所有者的用户 ID。
- `st_gid`: 文件所有者的组 ID。
- `st_atime`: 最后访问时间。
- `st_mtime`: 最后修改时间。
- `st_ctime`: 元数据最后更改时间。
- `st_nlink`: 硬链接数。

`st_mode` 标志包括：
- `S_IFBLK`: 块设备文件。
- `S_IFDIR`: 目录。
- `S_IFCHR`: 字符设备文件。
- `S_IFIFO`: FIFO 设备（命名管道）。
- `S_IFREG`: 普通文件。
- `S_IFLNK`: 符号链接。

其他标志：
- `S_ISUID`: 设置 setuid 位。
- `S_ISGID`: 设置 setgid 位。

掩码：
- `S_IFMT`: 文件类型。
- `S_IRWXU`: 所有者读/写/执行权限。
- `S_IRWXG`: 组读/写/执行权限。
- `S_IRWXO`: 其他用户读/写/执行权限。

## 3. dup 和 dup2 系统调用
```c
#include <unistd.h>

int dup2(int fildes, int fildes2);
int dup(int fildes);
```
- `dup` 复制文件描述符 `fildes` 并返回一个新的描述符。
- `dup2` 将 `fildes` 复制为 `fildes2`。

这些调用在多进程间通信时非常有用。

## 4. 标准 I/O 库
标准 I/O 库提供了一套面向底层 I/O 系统调用的操作界面，包含在 `stdio.h` 中。

### 4.1 fopen 函数
```c
#include <stdio.h>

FILE *fopen(const char *filename, const char *mode);
```
- `fopen` 打开文件并返回一个 `FILE*` 指针。
- `mode` 可以是 `"r"`, `"w"`, `"a"`, `"r+"`, `"w+"`, `"a+"` 等。

### 4.2 fread 函数
```c
#include <stdio.h>

size_t fread(void *ptr, size_t size, size_t nitems, FILE *stream);
```
- 从文件流 `stream` 读取数据到缓冲区 `ptr`。
- 返回成功读取的记录数。

### 4.3 fwrite 函数
```c
#include <stdio.h>

size_t fwrite(const void *ptr, size_t size, size_t nitems, FILE *stream);
```
- 将数据从缓冲区 `ptr` 写入文件流 `stream`。
- 返回成功写入的记录数。

### 4.4 fclose 函数
```c
#include <stdio.h>

int fclose(FILE *stream);
```
- 关闭文件流 `stream`，并将缓冲区内容写入文件。

### 4.5 fflush 函数
```c
#include <stdio.h>

int fflush(FILE *stream);
```
- 将文件流 `stream` 中的数据立即写入文件。

### 4.6 fseek 函数
```c
#include <stdio.h>

int fseek(FILE *stream, long int offset, int whence);
```
- 设置文件流 `stream` 的读写位置。
- `offset` 和 `whence` 与 `lseek` 相同。

### 4.7 fgetc、getc、getchar 函数
```c
#include <stdio.h>

int fgetc(FILE *stream);
int getc(FILE *stream);
int getchar();
```
- 从文件流 `stream` 读取下一个字符。
- `getchar` 从标准输入读取下一个字符。

### 4.8 fputc、putc、putchar 函数
```c
#include <stdio.h>

int fputc(int c, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c);
```
- 将字符 `c` 写入文件流 `stream`。
- `putchar` 将字符 `c` 写入标准输出。

以上是对文件操作系统调用和标准 I/O 库的基本介绍。