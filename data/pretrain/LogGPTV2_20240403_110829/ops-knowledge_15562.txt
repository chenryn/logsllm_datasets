To automate the deployment of various server applications, such as web, socket, and daemon services, that utilize different technologies like databases and programming languages, you can leverage a combination of configuration management and continuous integration/continuous deployment (CI/CD) tools.

In your case, where you use Python, Java, and Ruby, and may expand to other languages in the future, here are some recommendations:

1. **Configuration Management:**
   - **Puppet:** As you have already discovered, Puppet is an excellent choice for managing server setup, configurations, and deployments. It ensures that your infrastructure is consistent and easily reproducible.
   - **Ansible:** Another popular tool, Ansible, is known for its simplicity and agentless architecture, making it easy to manage and deploy applications across different environments.

2. **Build and Deployment Tools:**
   - **Jenkins:** Jenkins is a widely used CI/CD tool that supports a wide range of build, test, and deployment tasks. It integrates well with various version control systems and can trigger builds and deployments based on code changes.
   - **GitLab CI/CD:** If you are using GitLab for version control, GitLab CI/CD provides a seamless and integrated solution for continuous integration and deployment.

3. **Deployment Scripts:**
   - **Python Fabric:** As you mentioned, Python Fabric scripts can be used to trigger the deployment of new versions. Fabric allows you to write Python scripts to automate SSH-based tasks, making it a good fit for deployment automation.

4. **Build Automation:**
   - **Maven:** For Java projects, Maven is a powerful build automation tool that manages dependencies, builds, and testing.
   - **Ant:** Another option for Java projects, Ant is a more flexible but less opinionated build tool compared to Maven.
   - **Gradle:** Gradle is a modern build automation tool that offers flexibility and performance, suitable for both Java and other languages.

5. **Environment Abstraction:**
   - **Properties Files:** Use properties files to abstract environment-specific configurations such as database URLs, ports, and other settings. This allows you to build once and deploy across multiple environments by simply changing the properties file.
   - **Environment Variables:** Store paths to properties files and other environment-specific configurations as environment variables. This approach ensures that your application remains flexible and can be easily configured for different environments.

By combining these tools and practices, you can create a robust and flexible deployment pipeline that supports a variety of server applications and technologies.