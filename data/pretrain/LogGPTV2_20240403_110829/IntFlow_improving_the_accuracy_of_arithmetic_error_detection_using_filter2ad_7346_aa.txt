title:IntFlow: improving the accuracy of arithmetic error detection using
information flow tracking
author:Marios Pomonis and
Theofilos Petsios and
Kangkook Jee and
Michalis Polychronakis and
Angelos D. Keromytis
IntFlow: Improving the Accuracy of Arithmetic Error
Detection Using Information Flow Tracking
Marios Pomonis
Columbia University
PI:EMAIL
Theoﬁlos Petsios
Columbia University
theoﬁPI:EMAIL
Kangkook Jee
Columbia University
PI:EMAIL
Michalis Polychronakis
Columbia University
PI:EMAIL
Angelos D. Keromytis
Columbia University
PI:EMAIL
ABSTRACT
Integer overﬂow and underﬂow, signedness conversion, and
other types of arithmetic errors in C/C++ programs are
among the most common software ﬂaws that result in ex-
ploitable vulnerabilities. Despite signiﬁcant advances in au-
tomating the detection of arithmetic errors, existing tools
have not seen widespread adoption mainly due to their in-
creased number of false positives. Developers rely on wrap-
around counters, bit shifts, and other language constructs
for performance optimizations and code compactness, but
those same constructs, along with incorrect assumptions and
conditions of undeﬁned behavior, are often the main cause
of severe vulnerabilities. Accurate diﬀerentiation between
legitimate and erroneous uses of arithmetic language intri-
cacies thus remains an open problem.
As a step towards addressing this issue, we present Int-
Flow, an accurate arithmetic error detection tool that com-
bines static information ﬂow tracking and dynamic program
analysis. By associating sources of untrusted input with the
identiﬁed arithmetic errors, IntFlow diﬀerentiates between
non-critical, possibly developer-intended undeﬁned arithmetic
operations, and potentially exploitable arithmetic bugs. Int-
Flow examines a broad set of integer errors, covering almost
all cases of C/C++ undeﬁned behaviors, and achieves high
error detection coverage. We evaluated IntFlow using the
SPEC benchmarks and a series of real-world applications,
and measured its eﬀectiveness in detecting arithmetic error
vulnerabilities and reducing false positives. IntFlow success-
fully detected all real-world vulnerabilities for the tested ap-
plications and achieved a reduction of 89% in false positives
over standalone static code instrumentation.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection; D.2.5
[Software Engineering]: Testing and Debugging
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from Permissions@acm.org.
ACSAC ’14, December 08–12 2014, New Orleans, LA, USA
Copyright 2014 ACM 978-1-4503-3005-3/14/12 . . . $15.00
http://dx.doi.org/10.1145/2664243.2664282 .
General Terms
Security, Reliability
Keywords
Static analysis, information ﬂow tracking, arithmetic errors
1.
INTRODUCTION
When developing programs in the C and C++ languages,
programming practices that involve undeﬁned arithmetic
operations often constitute a well-established status quo.
Compilers tolerate the use of undeﬁned behavior, as this
enables code optimizations that greatly increase the perfor-
mance of critical code segments. Consequently, program-
mers often purposely rely on undeﬁned language constructs
due to empirical certainty for certain expected outcomes.
This ﬂexibility comes at a cost: arithmetic operations con-
stitute a major source of errors, often leading to serious se-
curity breaches when erroneous values directly or indirectly
aﬀect sensitive system calls or memory operations.
The root of the problem is fundamentally bound to the
diﬀerences between the mathematical and machine repre-
sentations of numbers: although integer and ﬂoating point
numbers are inﬁnite, their machine representations are re-
stricted by their respective type-speciﬁc characteristics (e.g.,
signedness and bit-length). Furthermore, not all arithmetic
operations are well-deﬁned by the language standards, to al-
low for a number of compiler optimizations. For instance,
the standard does not specify what the value of a signed
integer that overﬂows (or underﬂows) should be.
As it is non-trivial to determine whether a particular arith-
metic operation resulting in undeﬁned behavior is benign or
not, bugs due to integer errors are prevalent. Integer errors
are listed among the 25 most dangerous software bugs [3],
and are often the root cause of various vulnerabilities such
as buﬀer overﬂows [25] and memory disclosures [2]. During
the past years, numerous attempts have been made towards
their automatic detection and prevention. Such eﬀorts in-
clude static [23] and dynamic [7] analysis solutions, tools
based on symbolic execution and dynamic test generation [8,
17], as well as compiler extensions [25] that resolve ambigu-
ities at compilation time.
Despite numerous suggested solutions, there is no generic
tool that provides eﬀective and complete detection and san-
itization of integer bugs. One reason is that tools that focus
on coverage typically generate a large amount of false posi-
tives (due to the inaccuracy of static analysis) [25, 23, 16],
while those that focus on accuracy provide poor coverage
(as they rely on dynamic analysis or dynamic test genera-
tion) [10, 17, 19, 20]. Furthermore, existing tools typically
focus only on certain integer error classes (mainly overﬂows
and underﬂows) and as a result they do not provide broad
spectrum protection. The most crucial reason, however,
is the inherent diﬃculty of prevention mechanisms to dif-
ferentiate between critical integer errors that may lead to
exploitable vulnerabilities, from intentional uses of wrap-
around behavior, type castings, bit shifts, and other con-
structs that serve application-speciﬁc purposes.
As a step towards addressing these issues, in this paper we
propose an approach that combines static code instrumen-
tation with information ﬂow tracking to improve the accu-
racy of arithmetic error detection, focusing on reducing the
number of false positives, i.e., developer-intended code con-
structs that violate language standards. Our tool, IntFlow,
uses information ﬂow tracking to reason about the severity
of arithmetic errors by analyzing the information ﬂows re-
lated to them. The main intuition behind this approach is
that arithmetic errors are critical when i) they are triggered
by or depend on values originating from untrusted locations,
or ii) a value aﬀected by an arithmetic error propagates to
sensitive locations, such as the arguments to functions like
malloc() and strcpy().
To demonstrate the eﬀectiveness of our approach, we eval-
uated IntFlow with real world programs and vulnerabilities
and veriﬁed that it successfully identiﬁes all the real world
vulnerabilities for the applications of our testbed, generating
89% less false positives compared to IOC [10], our reference
arithmetic error detection tool.
Our work makes the following contributions:
• We present an accurate arithmetic error detection ap-
proach that combines static information ﬂow tracking
and dynamic program analysis.
• We present IntFlow, our prototype implementation for
this approach, which operates as an LLVM add-on.
IntFlow is freely available as an open source project.1
• We evaluate IntFlow using real-world programs and
vulnerabilities. Our results demonstrate that IntFlow
achieves improved detection accuracy compared to pre-
vious solutions, as it suppressed more than 89% of the
false positives reported by IOC [10].
2. BACKGROUND
To eﬀectively deal with integer errors in real world appli-
cations, it is necessary to ﬁrst deﬁne what is considered an
error. Doing so is not trivial, as apart from the mere exam-
ination of conformance to the language standard, we must
also examine whether pieces of seemingly erroneous code—
from the perspective of the language speciﬁcation—are ex-
plicitly written in that way due to the developer’s intention,
typically for performance, convenience, or other reasons.
In this section, we discuss how the C/C++ language stan-
dards deﬁne correctness for arithmetic operations, and ex-
amine why developers often write code that deviates from
the language speciﬁcation. We also present examples of ex-
ploitable vulnerabilities caused by integer errors, and demon-
strate the importance of good programming practices.
1http://nsl.cs.columbia.edu/projects/intﬂow/
2.1
Integer Errors and Undeﬁned Behavior
Although the C and C++ language standards explicitly
deﬁne the outcome of most integer operations, a number of
corner cases are left undeﬁned. As an example, the C11
standard considers an unsigned integer overﬂow as a well-
deﬁned operation, whose result is the minimum value ob-
tained after the wrap-around, while leaving signed integer
overﬂows undeﬁned. This choice facilitates compiler imple-
mentations to handle them in a way that produces optimized
binaries [24]. For instance, signed integer overﬂows (or un-
derﬂows) enable compiler developers to implement an opti-
mization that infers invariants from expressions such as i+1
> i and replaces them with a constant Boolean value [5].
Table 1 lists special cases of integer operations and their
deﬁnedness.
It should be noted that although more in-
stances of undeﬁned behavior (not necessarily restricted to
integer operations) are declared in the language speciﬁca-
tion, we only consider those relevant to this work.
Arithmetic Operation
Unsigned overﬂow (underﬂow)
Singed overﬂow (underﬂow)
Signedness conversion
Implicit type conversion
Oversized/negative shift
Division by zero
∗if value cannot be represented by the new type
Deﬁnedness
deﬁned
undeﬁned
undeﬁned∗
undeﬁned∗
undeﬁned
undeﬁned
Table 1: Summary of deﬁned and undeﬁned arithmetic op-
erations according to the C/C++ language speciﬁcation.
As in practice not all cases of undeﬁned behavior neces-
sarily result in actual errors, the diﬃculty of dealing with
these types of bugs lies in distinguishing critical integer er-
rors from developer-intended violations of the standard. The
intention of a developer, however, cannot be formally de-
ﬁned or automatically derived, as the code patterns used in
a piece of code are deeply related to the author’s knowledge,
preference, and programming style.
Although writing code that intentionally relies on unde-
ﬁned operations is generally considered a bad programming
practice (as the outcome of those operations can be arbi-
trary, depending on the architecture and the compiler), there
are several cases in which the community has reached con-
sensus on what is the expected behavior of the compiler in
terms of the generated code, mainly due to empirical evi-
dence. This explains why idioms that take advantage of un-
deﬁned behavior are still so prevalent: although according to
the standard the result of an operation is undeﬁned, develop-
ers have an empirically derived expectation that compilers
will always handle such cases in a consistent manner.
This expectation creates serious complications whenever
developers check the validity of their code with state-of-the-
art static analysis tools. These tools evaluate code based on
strict conformance to the language speciﬁcation, and conse-
quently generate a large amount of false positives. Thus, the
generated reports are often overlooked by developers who
struggle to spot which of the reported bugs are actual er-
rors. Unfortunately, tools based on dynamic code analysis
also do not provide strong guarantees in these cases, as they
suﬀer from low code coverage.
UINT MAX = (unsigned) −1;
INT MAX = 1 << (INT WIDTH − 1) − 1;
1
2
Listing 1: Widely used idioms that according to the stan-
dard correspond to undeﬁned behavior.
1 /∗ struct containing image data, 10KB each ∗/
2 img t ∗table ptr;
3 unsigned int num imgs = get num imgs();
4 ...
5 unsigned int alloc size = sizeof(img t) ∗ num imgs;
6 ...
7 table ptr = (img t∗) malloc(alloc size);
8 ...
9 for (i = 0; i < num imgs; i++)
10
{ table ptr[i] = read img(i); } /∗ heap overﬂow ∗/
Listing 2: An unsigned integer overﬂow as a result of a mul-
tiplication (line 5), which results in an invalid memory allo-
cation (line 7) and unintended access to the heap (line 10).
To further illustrate the complexity of this issue, in the
following we present two characteristic integer error exam-
ples and discuss the complications introduced by the use of
undeﬁned operations.
2.2
Integer Error Examples
While the task of automatically detecting undeﬁned arith-
metic operations is relatively easy, the true diﬃculty lies in
identifying the developer’s intention behind the use of con-
structs that violate the language standard.
As an example, Listing 1 presents two C statements in
which developers intentionally rely on undeﬁned behavior,
mainly to achieve persistent representation across diﬀerent
system architectures. Both are based on assumptions on
the numerical representation used by the underlying system
(two’s complement). Line 1 shows a case of signedness cast-
ing in which the original value cannot be represented by the
new type. In Line 2, a shift operation of INT_WIDTH - 1 is
undeﬁned2 but it conventionally returns the minimum value
of the type, while the subtraction operation incurs a signed
underﬂow which is also undeﬁned. Although these cases
are violations of the language standard, the desirable oper-
ation of an integer overﬂow checker would be to not report
them, as they correspond to developer-intended behavior—
otherwise, such cases are considered false positives [10].
In contrast, in the example of Listing 2, the unsigned
integer variable (alloc_size) might overﬂow as a result
of the multiplication operation at line 5. This behavior is