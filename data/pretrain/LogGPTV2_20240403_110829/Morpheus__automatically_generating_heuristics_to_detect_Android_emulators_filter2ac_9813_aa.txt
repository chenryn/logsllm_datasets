title:Morpheus: automatically generating heuristics to detect Android emulators
author:Yiming Jing and
Ziming Zhao and
Gail-Joon Ahn and
Hongxin Hu
Morpheus: Automatically Generating Heuristics
to Detect Android Emulators
Yiming Jing†, Ziming Zhao†, Gail-Joon Ahn†, and Hongxin Hu‡
†Arizona State University
‡Clemson University
{ymjing,zmzhao,gahn}@asu.edu, PI:EMAIL
ABSTRACT
Emulator-based dynamic analysis has been widely deployed
in Android application stores. While it has been proven
eﬀective in vetting applications on a large scale, it can be
detected and evaded by recent Android malware strains that
carry detection heuristics. Using such heuristics, an applica-
tion can check the presence or contents of certain artifacts
and infer the presence of emulators. However, there ex-
ists little work that systematically discovers those heuristics
that would be eventually helpful to prevent malicious ap-
plications from bypassing emulator-based analysis. To cope
with this challenge, we propose a framework called Mor-
pheus that automatically generates such heuristics. Mor-
pheus leverages our insight that an eﬀective detection heuris-
tic must exploit discrepancies observable by an application.
To this end, Morpheus analyzes the application sandbox and
retrieves observable artifacts from both Android emulators
and real devices. Afterwards, Morpheus further analyzes the
retrieved artifacts to extract and rank detection heuristics.
The evaluation of our proof-of-concept implementation of
Morpheus reveals more than 10,000 novel detection heuris-
tics that can be utilized to detect existing emulator-based
malware analysis tools. We also discuss the discrepancies in
Android emulators and potential countermeasures.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—In-
vasive software; D.2.5 [Software Engineering]: Testing
and Debugging—Emulators
Keywords
Android, emulator, malware
1.
INTRODUCTION
Recent years have witnessed an explosive growth of mo-
bile applications. According to the Gartner report [18], there
were 64 billion application downloads worldwide in 2012 and
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’14, December 08 - 12, 2014, New Orleans, LA, USA
Copyright 2014 ACM 978-1-4503-3005-3/14/12 ...$15.00.
http://dx.doi.org/10.1145/2664243.2664250.
it was increased to 102 billion in 2013. The growth should
partially give credit to application stores such as Apple App-
Store and Google Play. With these services, users enjoy a
centralized and trusted source for browsing and purchas-
ing applications. Meanwhile, developers also get chances
to reach a wider audience and more proﬁts. Unfortunately,
such advantages also make application stores an appealing
place for distributing malicious mobile applications. To in-
fect more unsuspecting users, adversaries would attempt to
publish their malware in application stores without being
detected.
To eﬀectively mitigate such attempts, the security com-
munity and the application stores have deployed emulator-
based dynamic analysis. Compared with static analysis that
can be thwarted by obfuscation and encryption [15], emulator-
based dynamic analysis can vet runtime behaviors of ap-
plications on a large scale. As a result, researchers have
launched such systems [3, 4, 6, 23] to inspect ﬁle, network,
and cellphone operations. Moreover, Google Bouncer [17]
vets applications using QEMU-based emulators in its cloud
infrastructure [20]. And Bouncer helped drop the number
of malware downloads in Google Play by 40% in 2011 [17].
Despite the apparent success, a ﬂaw of emulator-based dy-
namic analysis lies in the discrepancies between emulators
and real devices. Such discrepancies, if observable by appli-
cations, may lead to detection heuristics (a.k.a., “red pills”)
that indicate the fabricated reality of Android emulators.
Taking advantage of these heuristics, Android malware can
build split personalities and circumvent dynamic analysis as
previously observed in PC malware [8]. Indeed, the security
community has already discovered Android malware samples
that use such heuristics to evade dynamic analysis [9, 11].
The heuristics in newly discovered Android malware sam-
ples, unlike their ancestors in PC malware, exploit the pe-
culiarities of Android. Such heuristics check the presence or
contents of certain artifacts (e.g., ﬁles, APIs) in Android em-
ulators. They do not depend on native code because native
code has been of particular interest to some malware analysis
systems [30]. Furthermore, they can be integrated into An-
droid applications with simple algorithms. For example, the
presence of a ﬁle /sys/qemu_trace indicates QEMU-based
emulators [19]. A full-zero string returned by the Android
API getDeviceId indicates Android SDK emulators [21].
Meanwhile, researchers have demonstrated the eﬀectiveness
of similar heuristics [21, 25]. This alarming trend calls for a
comprehensive study of these detection heuristics to better
understand their magnitude and accuracy.
Regrettably, all known detection heuristics that target
Android emulators are discovered piece by piece in an ad-
hoc fashion. For example, some heuristics are discovered
through dissecting malware samples [9, 11]. Such a reactive
approach cannot predict unknown heuristics. Other known
heuristics are derived from manual analysis on speciﬁc com-
ponents of Android emulators [19, 24, 25]. Even though this
approach is proactive, manual analysis inevitably cannot ad-
dress the multitude of components in Android emulators.
To convey the severity of the problem and get ahead of ma-
licious adversaries, we propose a framework called Morpheus
that proactively and automatically generates Android emu-
lator detection heuristics. Unlike existing approaches, Mor-
pheus retrieves and analyzes Android system artifacts ob-
servable by Android applications in their sandboxes, called
observable artifacts.
In particular, Morpheus starts from
an analysis of the current Android application sandbox to
identify sources of observable artifacts. Afterwards, Mor-
pheus employs a probe application to automatically retrieve
observable artifacts from both Android emulators and real
devices. Morpheus then analyzes the artifacts and their con-
tents to produce candidate heuristics. Finally, Morpheus
ranks the candidates as its output.
We evaluate Morpheus with two steps. First, we apply
Morpheus against widely deployed QEMU-based Android
emulators and emerging VirtualBox-based emulators. The
results are more than 10,000 novel detection heuristics that
can be used to detect both types of emulators as a whole or
either of them. We also investigate them to reveal and char-
acterize the discrepancies between Android emulators and
real devices. Second, we assemble a group of the top-ranked
detection heuristics and evaluate their accuracies against 9
emulator-based Android malware analysis tools and 128 real
devices. This group of heuristics could accurately detect the
evaluated emulators and real devices. To better mitigate
threats of emulator detection, we will release our discovered
heuristics to the security community at http://honeynet.
asu.edu/morpheus/1.
We summarize the contributions of this paper as follows:
• New techniques. We develop new techniques that make
the ﬁrst step towards proactive and automated gener-
ation of Android emulator detection heuristics. We in-
tegrate these techniques into a framework, called Mor-
pheus, to systematically generate heuristics that oﬀer
low false-positives and low false-negatives.
• New ﬁndings. We discover a large number of novel de-
tection heuristics and reveal the underlying discrepan-
cies between Android emulators and real devices. Our
experiments against existing malware analysis tools
and a large number of real devices demonstrate high
accuracy of our discovered heuristics.
The remainder of this paper proceeds as follows. Sec-
tion 2 provides the background of emulator detection and
the threat model for our work. Section 3 describes the de-
sign of Morpheus and its components. Section 4 elaborates
our discovered heuristics and their exploited discrepancies.
Section 5 presents our experiments with a group of the top-
ranked detection heuristics. Section 6 discusses countermea-
sures and limitations of our approach. Section 7 describes
the related work. Section 8 concludes this paper.
1To prevent misuse, we may require verifying user identi-
ties before the dataset can be downloaded. Please visit our
project website for further information.
2. BACKGROUND AND THREAT MODEL
In this section, we ﬁrst describe the background of emu-
lator detection in Android malware. We then present the
attack model that this work is based on.
2.1 Detection Heuristics
Due to the peculiarities of Android, we argue that An-
droid malware would be reluctant to reuse previous PC em-
ulator detection heuristics. First, Android malware faces a
uniﬁed runtime environment whose underlying implementa-
tion details (e.g., hardware diﬀerences) are concealed by the
Android middleware and APIs. At the same time, Android
malware has been deprived of many capabilities that allow
accessing low-level system artifacts by the Android appli-
cation sandbox. In addition, Android malware would pre-
fer detection heuristics implemented with Java code rather
than native code. As native code is used by only a small
fraction of benign Android applications but most malicious
root exploits [30], native code would draw attention of anal-
ysis tools, breaking a detection heuristic’s basic purpose of
evading analysis.
The detection heuristics found in newly discovered mal-
ware samples seem to be in line with our argument. They
allow an application to detect emulators without bypassing
the application sandbox and without the assistance of native
code. For example, a popular detection heuristic involves
an Android API getDeviceId that returns the IMEI of an
Android device. This heuristic calls getDeviceId and tests
whether “000000000000000” is a substring of the returned
value of getDeviceId. It can be implemented with only two
lines of Java code and thus leaves relatively small footprints.
Despite that researchers have discovered similar detection
heuristics and evaluated their eﬀectiveness against Android
SDK emulators, the magnitude and accuracy of such heuris-
tics remain unknown, which results in an impediment to the
development of comprehensive countermeasures.
2.2 Threat Model
In our threat model, we assume emulators that run An-
droid with default conﬁgurations. We also assume the pres-
ence of passive anti-detection techniques, which do not proac-
tively instrument the application to suppress the execution
of detection heuristics. This is also the common setup of the
existing deployed emulator-based dynamic analysis systems.
In addition, we assume a malicious Android application
that does not bypass the application sandbox or carry any
native code. Meanwhile, we allow this application to request
any Android permission. In other words, this application’s
capabilities are no more than those of the benign applica-
tions in application stores. Afterwards, it applies detection
heuristics that check the presence or contents of certain ar-
tifacts. Based on the result, it determines whether it is
running in an emulator or not.
Once this application detects emulators, it could stay dor-
mant or exhibit legitimate behaviors. Furthermore, this ap-
plication can use dynamic external code loading to evade
both static and dynamic analysis, because it only downloads
the malicious payload when it is in a real device. Alter-
natively, it can perform reconnaissance within the emulator
and phone home to facilitate generation of up-to-date detec-
tion heuristics for future attacks. We attempt to understand
whether the detection heuristics can be successful in terms
of detecting Android emulators and real devices.
Sandbox Analysis
Artifact Retrieval
Heuristic Extraction
Heuristic Selection
SELinux
Policy
Sandbox
Analyzer
Security 
Attributes of
Objects
Sources of 
Observable 
Artifacts
Artifact
Retriever
Observable
Artifacts in 
Emulators
Observable
Artifacts in 
Real Devices
E-Pool
Heuristic 
Extractor
Candidate
Detection 
Heuristics
D-Pool
Heuristic
Selector
Ranked
Detection 
Heuristics
Figure 1: Morpheus: System Architecture
3. DESIGN AND SYSTEM COMPONENTS
In this section, we describe our framework Morpheus which
is equipped with a suite of techniques for supporting auto-
matic generation of detection heuristics. Despite the fact
that Android emulators may contain plenty of discrepan-
cies, a malicious application cannot exploit them unless it
can observe them from within the application sandbox. Here
we deﬁne observable artifacts as artifacts (e.g., ﬁles, APIs)
whose presence can be probed or whose contents can be
read by any Android application in its sandbox. For exam-
ple, suppose a ﬁle is not readable but its parent directory is
listable, this ﬁle is still an observable artifact. The key idea
of Morpheus is to retrieve and analyze observable artifacts.
As depicted in Figure 1, Morpheus consists of four compo-
nents. The sandbox analyzer analyzes the default conﬁgura-
tions of the Android application sandbox to identify sources
of observable artifacts. For respective sources, the artifact
retriever enumerates observable artifacts and retrieves their
contents. The retrieved observable artifacts are uploaded to
two pools for both emulators and real devices, respectively.
The heuristic extractor then analyzes the pools by ﬁnding
the artifacts or substrings of their contents that appear in
most emulators but a small fraction of real devices, and vice
versa. These artifacts and substrings constitute candidate
detection heuristics. Finally, the heuristic selector ranks the
candidates as the output of Morpheus. We next describe
each component in detail.
3.1 Sandbox Analyzer
Applications’ accesses on artifacts are regulated by the
Android application sandbox, which is based on discretionary
and mandatory access control (DAC and MAC). The Linux
kernel provides DAC, which grants accesses by checking per-
missions of objects. Security-Enhanced Linux (SELinux)
adds MAC over DAC starting from Android 4.3. SELinux
grants accesses by checking domains of subjects (e.g., un-
trusted_app), types of objects (e.g., wallpaper_files), and
SELinux permissions (e.g., open, read)2.
To identify sources of observable artifacts, we need to ac-
cess all the objects in the Android OS. However, it is in-
feasible to do so in oﬀ-the-shelf Android devices due to the
application sandbox and lack of root privileges.
Instead,
we propose the sandbox analyzer that analyzes the refer-
ence SELinux policy in Android and the security attributes
(e.g., owners, permissions, xattr) of objects in rooted ref-
erence Android devices (e.g., Nexus devices). Speciﬁcally,
2We ignore users, roles, and security levels for brevity be-
cause they are rarely used in the context of Android.
we attempt to identify the objects whose security attributes
expose themselves to third-party applications. Given that
third-party applications are automatically assigned into the
untrusted_app domain during installation, we simulate DAC
and MAC checks to identify the following objects:
(1) ob-
jects that are world-readable or under world-listable direc-
tories; and (2) objects that are accessible by untrusted_app
using read-like SELinux permissions (e.g., read, recv_msg,
ioctl). From such objects, we then distill the sources of ob-
servable artifacts based on their owners and SELinux types,
along with proper methods to retrieve them. For exam-
ple, /dev/binder has the SELinux type binder_device. Its
SELinux type indicates that it belongs to the Binder IPC
subsystem that allows an application to access remote arti-
facts in system services. Such artifacts would require Binder-
speciﬁc methods to retrieve. As variations in the hierarchy
of objects across diﬀerent Android versions are insigniﬁcant,
the sources of observable artifacts derived from the reference
inputs should be applicable in emulators and real devices.
We stress that the sandbox analyzer is much more conser-
vative compared with the current Android application sand-
box. SELinux in Android 4.3 is conﬁgured to permit every
access. Even in Android 4.4, SELinux only protects several
critical system daemons and does not conﬁne third-party ap-
plications (i.e., untrusted_apps). With that said, the true
amount of observable artifacts in current Android devices
could be much larger. However, considering the possibility
that SELinux may extend its coverage in the upcoming ver-
sions of Android, we choose to be conservative for the future
eﬀectiveness of our detection heuristics.
3.2 Artifact Retriever
The artifact retriever is essentially a probe application.
It requests all the available Android permissions to maxi-
mize its capabilities within the conﬁnement of the applica-
tion sandbox. Based on the identiﬁed sources of observable
artifacts, we implement the corresponding methods in the
artifact retriever to automatically retrieve the observable ar-
tifacts as well as their contents.
To address the various sources of observable artifacts, we
propose three foundation modules in the artifact retriever:
a directory walker, a Java function caller, and a Binder IPC
caller. They are tailored to the peculiarity of Android and
can be easily adapted and combined. Speciﬁcally, the direc-
tory walker traverses ﬁle-like artifacts. The Java function
caller enumerates and manipulates both public and hidden
Android APIs. The Binder IPC caller directly triggers re-
mote system services (e.g., TelephonyManagerService) with
dynamically constructed Binder IPC messages.
We launch the artifact retriever into both Android emula-
tors and real devices. It probes the surrounding observable
artifacts with its carried modules.
It technically captures
the ﬁrst 1KB of each artifact’s contents if readable. Upon
explicit errors (e.g., denied access), it records the error mes-
sages as the retrieved contents. Upon implicit errors (e.g.,
blocking read), it uses a timeout to ensure that it does not
hang there inﬁnitely. We note that, the artifact retriever
must upload artifacts to the correct pool according to where
the artifacts are observed. For example, artifacts collected
from emulators should never go into D-Pool. This is critical
for the heuristic extractor to work eﬀectively, because arbi-
trary noises could make the problem of heuristic generation
NP-hard [16].
3.3 Heuristic Extractor
The inputs of the heuristic extractor are two pools, namely
E-Pool and D-Pool, which contain instances of observed em-
ulators and real devices, respectively. Each instance is a
collection of key-value pairs that map retrieved artifacts to
their contents. A key (artifact) occurs in an instance once
at most, although it can occur in multiple instances. And
a value (content) can be null if the artifact retriever fails to
read the contents. Next, we describe two categories of detec-
tion heuristics that generate decisions based on the artifacts
and their contents, respectively.
3.3.1 Artifact-based Heuristics
We start from a category of heuristics that make decisions
based on the presence of artifacts. First, we attempt to dis-
cover the artifacts that are exclusively used by emulators,
such as emulator-speciﬁc hardware, software, and conﬁgura-
tions. As we use their presence to imply emulators, we refer
to them as Type E artifacts. Furthermore, we also look for
the artifacts that appear in most real devices, which become
our Type D artifacts.
We propose two metrics, COVE(a) and COVD(a) to de-
note the fractions of instances in E-Pool or D-Pool that con-
tain artifact a, i.e., COVE(a) = |Ea|
|E| , and COVD(a) = |Da|