### Core Module
- **Code Coverage Analysis Module**
- **Manual Network Module**
- **Shared Memory Fuzzer**
- **Volatile Paths Detection**

### Run & Calibrate
- **Volatile Paths Detection (Run 56, 57, 58)**
  - **Run 56: ABAAAAAAA**
  - **Run 57: ABAAAAAAA**
  - **Run 58: ACAAAAAAA**

### Parallel Fuzzing with Python Multiprocessing
- **Main Process**
  - **Corpus:**
    - **Instance #1**
    - **Instance #2**
    - **Instance #3**
- **Remote Instances**
  - **Main Process**
  - **Remote Instance #1**
  - **Remote Instance #2**

### Global Shared Memory
- **Target:**
  - **SHM (Global shared memory)**

### Third-Party Mutators
- **AFL Strategy (ported to Python) and Radamsa (as a shared library)**
- **Custom Python Mutator:**
  - `def init(fuzzer_id)`
  - `def mutate(data_to_mutate)`

### Network Application Fuzzing (Experimental)
- **Manul**
  - **Target: TCP/UDP**
  - **Test Case: TCP/UDP**
  - **Modes: Client mode, Server mode**

### Blackbox Binaries Fuzzing
- **Windows: DynamoRIO (~x30 overhead)**
- **Linux:**
  - **Intel Pin (~x45 overhead)**
  - **DynamoRIO (~x20 overhead)**

### Manul
- **Target Binary**
- **Instrumentation Library**
- **SHM (Coverage)**
- **Test**

### Interface & Logo
- **Command Line Arguments**
- **DEMO (Manul)**

### Case Study I: Poppler
- **Poppler** is an open-source library for rendering PDF documents on GNU/Linux.
  - **Millions of users worldwide. Default package on Ubuntu.**
  - **Integrated with Evince, LibreOffice, Inkscape, and many other applications.**
  - **Written in C++.**
  - **Participates in the OSS-Fuzz program (tough target).**

#### Fuzzing Setup
- **491 PDF files (same corpus used by OSS-Fuzz)**
- **24 hours, 78 parallel jobs**
- **AFL ver. 2.52b & Manul ver. 0.2**
- **Hardware: Intel Xeon CPU E5-2698 v4 @2.20GHz, 1TB RAM**

#### Execution Speed
- **Paths Found**
- **Why Manul Outperformed AFL:**
  - **Better performance on large targets due to Manul's corpus parallelization algorithm.**
  - **Radamsa + AFL is better than only AFL.**
  - **Volatile paths suppression works effectively.**

#### Manul Findings
- **CVE-2019-9631 (Critical, 9.8): Heap-based buffer over-read in CairoRescaleBox.cc.**
- **CVE-2019-7310 (High, 8.8): Heap-based buffer over-read in XRef::getEntry function.**
- **CVE-2019-9959 (High, X.X): No check for negative values in JPXStream::init.**
- **Non-security related:**
  - **Division by zero in CairoRescalBox::downScaleImage.**
  - **Null-pointer dereference in ExtGState.**
  - **Stack-overflow (recursion) in libcairo.**

### Case Study II: Zeek IDS
- **Zeek (formerly Bro) is a powerful open-source network analysis framework.**
  - **Thousands of companies use Zeek as an IDS.**
  - **JA3 plugin for Zeek is a powerful tool to detect suspicious connections of malware with C2.**
  - **BroCon happens in Arlington, VA every October.**
  - **Written in C++, very high-quality code, fuzzed using libfuzzer by the development team in the past.**

#### Zeek Fuzzing Wrapper Example
- **Implemented for HTTP, IRC, KRB, DNP3, SSH, DNS, ICMP, LOGIN, FTP, IMAP.**

#### Findings
- **CVE-2018-17019 (High, 7.5): DoS in IRC protocol names command parsing.**
- **CVE-2018-16807 (High, 7.5): Memory leak potentially leading to DoS in Kerberos protocol parser.**
- **CVE-2019-12175 (High, X.X): DoS in Kerberos protocol parser.**

### List of Bugs Found
- **Poppler for Linux: CVE-2019-6931, CVE-2019-7310, CVE-2019-9959**
- **Zeek for Linux: CVE-2018-17019, CVE-2018-16807, CVE-2019-12175**
- **7-Zip 19.00 for Windows: CVE-2019-XXXX, CVE-2019-XXXX (Awaiting assignment from MITRE and fix from maintainer)**
- **p7zip 16.02 for Linux: CVE-2019-XXXX, CVE-2019-XXXX (Awaiting assignment from MITRE and fix from maintainer)**
- **Unarchiver for MacOS: CVE-2019-XXXX, CVE-2019-XXXX (Awaiting assignment from MITRE and fix from maintainer)**

### Discussion & Future Work
- **AFLâ€™s forkserver is strongly required.**
- **Add Intel PTrace support.**
- **More mutation algorithms.**
- **Structure-aware fuzzing.**
- **Better MacOS support.**
- **Better network fuzzing support.**
- **CLANG-based instrumentation.**

### Conclusion
- **Fuzzing is the top technique for vulnerability research in memory-unsafe languages.**
- **Manul is a fully functional tool for efficient coverage-guided fuzzing.**
  - **Features: Multiple third-party mutators, volatile paths suppression, efficient parallelization algorithm, blackbox binaries fuzzing.**
- **13 new bugs in 4 widely-used open-source projects.**
- **Try it out! [GitHub](https://github.com/mxmssh/manul)**
- **Installation: `pip install psutil` and `git clone https://github.com/mxmssh/manul`**

### Thank You!
- **GitHub: [mxmssh/manul](https://github.com/mxmssh/manul)**
- **Twitter: [MShudrak](https://twitter.com/MShudrak)**
- **LinkedIn: [MShudrak](https://www.linkedin.com/in/mshudrak/)**