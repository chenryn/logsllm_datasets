将返回g r e p命令错误代码'No such file or directory'。
上述结果表明输入文件名不存在，使用g r e p命令- s开关，可屏蔽错误信息。
返回命令提示符，而没有文件不存在的错误提示。
如果g r e p命令不支持- s开关，可替代使用以下命令：
脚本含义是匹配命令输出或错误（ 2 > $ 1），并将结果输出到系统池。大多数系统管理员称
/ d e v / n u l l为比特池，没关系，可以将之看成一个无底洞，有进没有出，永远也不会填满。
上述两个例子并不算好，因为这里的目的只想知道查询是否成功。本书后面部分将讨论
g r e p命令的e x i t用法，它允许查询并不成功返回。
如要保存g r e p命令的查询结果，可将命令输出重定向到一个文件。
脚本将输出重定向到目录/ t m p下文件p a s s w d . o u t中。
8.4.3 使用ps命令
使用带有ps x命令的g r e p可查询系统上运行的进程。ps x命令意为显示系统上运行的所有
进程列表。要查看D N S服务器是否正在运行（通常称为n a m e d），方法如下：
输出也应包含此g r e p命令，因为g r e p命令创建了相应进程，ps x将找到它。在g r e p命令中
使用- v选项可丢弃p s命令中的g r e p进程。
加入java编程群：524621833
64
第二部分 文本过滤
下载
如果ps x不适用于用户系统，替代使用ps -ef。
8.4.4 对一个字符串使用grep
g r e p不只应用于文件，也可应用于字符串。为此使用 e c h o字符串命令，然后对g r e p命令使
用管道输入。
匹配成功实现。
因为没有匹配字符串，所以没有输出结果。
8.5 egrep
e g r e p代表e x p r e s s i o n或extended grep，适情况而定。e g r e p接受所有的正则表达式，e g r e p
的一个显著特性是可以以一个文件作为保存的字符串，然后将之传给 e g r e p作为参数，为此使
用- f开关。如果创建一个名为g r e p s t r i n g s的文件，并输入4 8 4和4 7：
上述脚本匹配d a t a . f中包含4 8 4或4 7的所有记录。当匹配大量模式时，- f开关很有用，而在
一个命令行中敲入这些模式显然极为繁琐。
如果要查询存储代码3 2 L或2 C C，可以使用（|）符号，意即“|”符号两边之一或全部。
可以使用任意多竖线符“ |”，例如要查看在系统中是否有帐号 l o u i s e、m a t t y或pauline ，
使用w h o命令并管道输出至e g r e p。
还可以使用^符号排除字符串。如果要查看系统上的用户，但不包括 m a t t y和p a u l i n e，方
法如下：
如果要查询一个文件列表，包括s h u t d o w n、s h u t d o w n s、r e b o o t和r e b o o t s，使用e g r e p可容
易地实现。
加入java编程群：524621833
65
第8章 g rep 家 族
下载
8.6 小结
希望大家已经理解了g r e p的灵活性，它是一个很强大而流行的工具，像其他许多 U N I X工
具一样，已经被使用在D O S中。如果要通过文件快速查找字符串或模式， g r e p是一个很好的
选择。简单地说，g r e p是s h e l l编程中很重要的工具，在本书后面部分使用其他 U N I X工具和进
行变量替换时将发现这一点。
加入java编程群：524621833
下载
第9章 AWK 介 绍
如果要格式化报文或从一个大的文本文件中抽取数据包，那么 a w k可以完成这些任务。它
在文本浏览和数据的熟练使用上性能优异。
整体来说，a w k是所有s h e l l过滤工具中最难掌握的，不知道为什么，也许是其复杂的语法
或含义不明确的错误提示信息。在学习 a w k语言过程中，就会慢慢掌握诸如 Bailing out 和
a w k : c m d . L i n e :等错误信息。可以说a w k是一种自解释的编程语言，之所以要在s h e l l中使用a w k
是因为a w k本身是学习的好例子，但结合a w k与其他工具诸如g r e p和s e d，将会使s h e l l编程更加
容易。
本章没有讲述a w k的全部特性，也不涉及a w k的深层次编程，（这些可以在专门讲述a w k的
书籍中找到）。本章仅注重于讲述使用a w k执行行操作及怎样从文本文件和字符串中抽取信息。
本章内容有：
• 抽取域。
• 匹配正则表达式。
• 比较域。
• 向a w k传递参数。
• 基本的a w k行操作和脚本。
本书几乎所有包含a w k命令的脚本都结合了s e d和g r e p，以从文本文件和字符串中抽取信
息。为获得所需信息，文本必须格式化，意即用域分隔符划分抽取域，分隔符可能是任意字
符，在以后讲述a w k时再详细讨论。
a w k以发展这种语言的人A h o . We n i n b e rg e r和K e r n i g h a m命名。还有n a w k和g a w k，它们扩
展了文本特性，但本章不予讨论。
a w k语言的最基本功能是在文件或字符串中基于指定规则浏览和抽取信息。 a w k抽取信息
后，才能进行其他文本操作。完整的a w k脚本通常用来格式化文本文件中的信息。
9.1 调用awk
有三种方式调用a w k，第一种是命令行方式，如：
这里，c o m m a n d s是真正的a w k命令。本章将经常使用这种方法。
上面例子中，[ - F域分隔符]是可选的，因为a w k使用空格作为缺省的域分隔符，因此如果
要浏览域间有空格的文本，不必指定这个选项，但如果要浏览诸如 p a s s w d文件，此文件各域
以冒号作为分隔符，则必须指明- F选项，如：
第二种方法是将所有a w k命令插入一个文件，并使a w k程序可执行，然后用a w k命令解释
器作为脚本的首行，以便通过键入脚本名称来调用它。
第三种方式是将所有的a w k命令插入一个单独文件，然后调用：
加入java编程群：524621833
67
第9章 AWK 介 绍
下载
- f选项指明在文件a w k _ s c r i p t _ f i l e中的a w k脚本，i n p u t _ f i l e ( s )是使用a w k进行浏览的文件
名。
9.2 awk脚本
在命令中调用a w k时，a w k脚本由各种操作和模式组成。
如果设置了- F选项，则a w k每次读一条记录或一行，并使用指定的分隔符分隔指定域，但
如果未设置- F选项，a w k假定空格为域分隔符，并保持这个设置直到发现一新行。当新行出现
时，a w k命令获悉已读完整条记录，然后在下一个记录启动读命令，这个读进程将持续到文件
尾或文件不再存在。
参照表9 - 1，a w k每次在文件中读一行，找到域分隔符（这里是符号 #），设置其为域n，直
至一新行（这里是缺省记录分隔符），然后，划分这一行作为一条记录，接着 a w k再次启动下
一行读进程。
表9-1 awk读文件记录的方式
域1 分隔符 域2 分隔符 域3 分隔符 域4及换行
P. B u n n y (记录1 ) # 0 2 / 9 9 # 4 8 # Yellow \n
J . Tr o l l (记录2 ) # 0 7 / 9 9 # 4 8 4 2 # Brown-3 \n
9.2.1 模式和动作
任何a w k语句都由模式和动作组成。在一个 a w k脚本中可能有许多语句。模式部分决定动
作语句何时触发及触发事件。处理即对数据进行的操作。如果省略模式部分，动作将时刻保
持执行状态。
模式可以是任何条件语句或复合语句或正则表达式。模式包括两个特殊字段 B E G I N和
E N D。使用B E G I N语句设置计数和打印头。B E G I N语句使用在任何文本浏览动作之前，之后
文本浏览动作依据输入文件开始执行。 E N D语句用来在a w k完成文本浏览动作后打印输出文
本总数和结尾状态标志。如果不特别指明模式，a w k总是匹配或打印行数。
实际动作在大括号{ }内指明。动作大多数用来打印，但是还有些更长的代码诸如 i f和循环
（l o o p i n g）语句及循环退出结构。如果不指明采取动作，a w k将打印出所有浏览出来的记录。
下面将深入讲解这些模式和动作。
9.2.2 域和记录
a w k执行时，其浏览域标记为$ 1，$ 2 . . . $ n。这种方法称为域标识。使用这些域标识将更容
易对域进行进一步处理。
使用$ 1 , $ 3表示参照第1和第3域，注意这里用逗号做域分隔。如果希望打印一个有 5个域
的记录的所有域，不必指明$ 1 , $ 2 , $ 3 , $ 4 , $ 5，可使用$ 0，意即所有域。Aw k浏览时，到达一新
行，即假定到达包含域的记录末尾，然后执行新记录下一行的读动作，并重新设置域分隔。
注意执行时不要混淆符号$和s h e l l提示符$，它们是不同的。
为打印一个域或所有域，使用p r i n t命令。这是一个a w k动作（动作语法用圆括号括起来）。
加入java编程群：524621833
68
第二部分 文本过滤
下载
1. 抽取域
真正执行前看几个例子，现有一文本文件 g r a d e . t x t，记录了一个称为柔道数据库的行信
息。
此文本文件有7个域，即（1）名字、（2）升段日期、（3）学生序号、（4）腰带级别、（5）
年龄、（6）目前比赛积分、（7）比赛最高分。
因为域间使用空格作为域分隔符，故不必用- F选项划分域，现浏览文件并导出一些数据。
在例子中为了利于显示，将空格加宽使各域看得更清晰。
2. 保存a w k输出
有两种方式保存s h e l l提示符下a w k脚本的输出。最简单的方式是使用输出重定向符号 >文
件名，下面的例子重定向输出到文件w o w。
使用这种方法要注意，显示屏上不会显示输出结果。因为它直接输出到文件。只有在保
证输出结果正确时才会使用这种方法。它也会重写硬盘上同名数据。
第二种方法是使用t e e命令，在输出到文件的同时输出到屏幕。在测试输出结果正确与否
时多使用这种方法。例如输出重定向到文件 d e l e t e _ m e _ a n d _ d i e，同时输出到屏幕。使用这种
方法，在a w k命令结尾写入 | tee delete_me_and_die。
3. 使用标准输入
在深入讲解这一章之前，先对a w k脚本的输入方法简要介绍一下。实际上任何脚本都是从
标准输入中接受输入的。为运行本章脚本，使用a w k脚本输入文件格式，例如：
也可替代使用下述格式：
使用重定向方法：
或管道方法：
4. 打印所有记录
a w k读每一条记录。因为没有模式部分，只有动作部分 {print $0}(打印所有记录)，这个动
作必须用花括号括起来。上述命令打印整个文件。
加入java编程群：524621833
69
第9章 AWK 介 绍
下载
5. 打印单独记录
假定只打印学生名字和腰带级别，通过查看域所在列，可知为 f i e l d - 1和f i e l d - 4，因此可以
使用$ 1和$ 4，但不要忘了加逗号以分隔域。
6. 打印报告头
上述命令输出在名字和腰带级别之间用一些空格使之更容易划分，也可以在域间使用 t a b
键加以划分。为加入t a b键，使用t a b键速记引用符 \ t，后面将对速记引用加以详细讨论。也可
以为输出文本加入信息头。本例中加入 n a m e和b e l t及下划线。下划线使用\ n，强迫启动新行，
并在\ n下一行启动打印文本操作。打印信息头放置在 B E G I N模式部分，因为打印信息头被界
定为一个动作，必须用大括号括起来。在a w k查看第一条记录前，信息头被打印。
7. 打印信息尾
如果在末行加入end of report信息，可使用E N D语句。E N D语句在所有文本处理动作执行
完之后才被执行。E N D语句在脚本中的位置放置在主要动作之后。下面简单打印头信息并告
之查询动作完成。
8. awk错误信息提示
几乎可以肯定，在使用a w k时，将会在命令中碰到一些错误。 a w k将试图打印错误行，但
由于大部分命令都只在一行，因此帮助不大。
系统给出的显示错误信息提示可读性不好。使用上述例子，如果丢了一个双引号， a w k将
返回：
加入java编程群：524621833
70
第二部分 文本过滤
下载
当第一次使用a w k时，可能被错误信息搅得不知所措，但通过长时间和不断的学习，可总
结出以下规则。在碰到a w k错误时，可相应查找：
• 确保整个a w k命令用单引号括起来。
• 确保命令内所有引号成对出现。
• 确保用花括号括起动作语句，用圆括号括起条件语句。
• 可能忘记使用花括号，也许你认为没有必要，但a w k不这样认为，将按之解释语法。
如果查询文件不存在，将得到下述错误信息：
9. awk键盘输入
如果在命令行并没有输入文件g r a d e . t x t，将会怎样？
B E G I N部分打印了文件头，但a w k最终停止操作并等待，并没有返回s h e l l提示符。这是因
为a w k期望获得键盘输入。因为没有给出输入文件， a w k假定下面将会给出。如果愿意，顺序
输入相关文本，并在输入完成后敲键。如果敲入了正确的域分隔符，a w k会像第一个
例子一样正常处理文本。这种处理并不常用，因为它大多应用于大量的打印稿。
9.2.3 awk中正则表达式及其操作
在g r e p一章中，有许多例子用到正则表达式，这里将不使用同样的例子，但可以使用条
件操作讲述a w k中正则表达式的用法。
这里正则表达式用斜线括起来。例如，在文本文件中查询字符串 G r e e n，使用/ G r e e n /可以
查出单词G r e e n的出现情况。