# 二、使用 Docker 容器
在本章中，我们将介绍以下食谱:
*   列出/搜索映像
*   绘制映像
*   列出映像
*   启动容器
*   列出容器
*   查看容器日志
*   停止容器
*   移除容器
*   移除所有停止的容器
*   在容器上设置重启策略
*   获得容器内部的特权访问
*   访问容器内的主机设备
*   将新流程注入运行中的容器
*   读取容器的元数据
*   标签和过滤容器
*   阅读容器内的僵尸
# 介绍
在前一章中，在安装了 Docker 之后，我们提取了一个映像，并从中创建了一个容器。Docker 的主要目标是运行容器。在本章中，我们将看到我们可以对容器执行的不同操作，例如启动、停止、列出、删除等等。这将有助于我们将 Docker 用于不同的用例，例如测试、CI/CD、设置 PaaS 等等，我们将在后面的章节中介绍。在开始之前，让我们通过运行以下命令来验证 Docker 安装:
```
 $ docker version 
```
![](img/dbd34249-e33c-4e6e-9ffd-59c4c83ebe30.png)
这将给出 Docker 客户端和服务器版本，以及其他细节。
I am using Ubuntu 18.04 as my primary environment in which to run these recipes. They should also work with the other environments.
# 列出/搜索映像
我们需要一个映像来启动容器。让我们看看如何在 Docker 注册表中搜索映像。正如我们在[第 1 章](01.html)、*介绍和安装*中看到的，注册表保存 Docker 映像，可以是公共的也可以是私有的。默认情况下，搜索在默认的公共注册中心进行，该注册中心是 Docker Hub，位于[https://hub.docker.com/](https://hub.docker.com/.)。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
`docker search`命令允许您在 Docker 注册表中搜索映像。以下是其语法:
```
    docker search [OPTIONS] TERM 
```
以下是搜索`alpine`映像的示例:
```
 $ docker search --limit 5 alpine 
```
![](img/3d03cdbf-273a-4c93-862f-355721b32f7e.png)
前面的截图列出了该图片的名称、描述和星星数量。它还指出映像是否是官方的和自动化的:
*   `STARS`表示有多少人喜欢给定的映像。
*   `OFFICIAL`栏帮助我们识别映像是否是从可信来源构建的。
*   `AUTOMATED`列是一种方式，告诉你当一个映像被推入 GitHub 或 Bitbucket 存储库时，它是否是自动构建的。关于`AUTOMATED`的更多细节可以在下一章找到。
The convention for an image name is `/`, but it can be anything.
# 它是如何工作的...
Docker 在 Docker 公共注册中心搜索映像，该注册中心在[https://index.docker.io/v1/](https://index.docker.io/v1/.)有一个映像存储库。
我们也可以配置我们的私有注册表，这样它也可以在那里搜索映像。
# 还有更多...
*   要列出获得超过`20`星并且是自动的映像，运行以下命令:
```
    $ docker search \
          --filter is-automated=true \
          --filter stars=20 alpine
```
![](img/0368b784-b5b8-4d2d-9857-233219cfdb40.png)
在[第 3 章](03.html)、*使用 Docker Images* 中，我们将看到如何设置自动化构建。
从 Docker 1.3 开始，为 Docker 守护程序提供了`--insecure-registry`选项，它允许我们从不安全的注册表中搜索/提取/提交映像。更多详情，请看[https://docs.docker.com/registry/insecure/](https://docs.docker.com/registry/insecure/)。
# 请参见
通过运行以下命令查看 Docker `search`上的帮助:
```
    $ docker search --help  
```
这个的文档在 Docker 网站上:https://docs . Docker . com/edge/engine/reference/command line/search/。
# 绘制映像
搜索完映像后，我们可以通过运行 Docker 守护程序将其拉至系统。让我们看看如何做到这一点。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
要从 Docker 注册表中提取映像，您可以运行以下命令:
```
 docker image pull [OPTIONS] NAME[:TAG|@DIGEST]
```
或者传统命令:
```
 docker pull [OPTIONS] NAME[:TAG|@DIGEST]
```
以下是拉动`ubuntu`映像的示例:
```
    $ docker image pull ubuntu
```
![](img/e01c8e35-baf7-44d5-a555-7bcb634f44bf.png)
# 它是如何工作的...
`pull`命令从 Docker 注册表下载本地创建该映像所需的所有图层。我们将在下一章看到关于层的细节。
# 还有更多...
映像标签将相同类型的映像分组。例如，CentOS 可以有带有标签的映像，如`centos6`、`centos7`等。例如，要提取带有特定标签的映像，请运行以下命令:
```
    $ docker image pull centos:centos7
```
默认情况下，带有最新标记的映像会被拉取。要拉取所有标签对应的所有映像，请使用以下命令:
```
    $ docker image pull --all-tags alpine  
```
从 Docker 1.6([https://blog.docker.com/2015/04/docker-release-1-6/](https://blog.docker.com/2015/04/docker-release-1-6/))中，我们可以通过称为`digest`的新内容可寻址标识符来构建和引用映像。当我们想要处理特定的映像而不是标签时，这是一个非常有用的特性。要提取具有特定摘要的映像，我们可以使用以下语法:
```
    $ docker image pull @sha256:
```
以下是使用上述命令的示例:
```
    $ docker image pull nginx@sha256:788fa27763db6d69ad3444e8ba72f947df9e7e163bad7c1f5614f8fd27a311c3 
```
只有 Docker 注册表的版本 2 支持摘要。
一旦映像被提取，它就驻留在本地缓存(存储)中，因此后续的提取将非常快。这个特性在构建 Docker 分层映像中起着非常重要的作用。
# 请参见
查看`docker image pull`的`help`选项:
```
$ docker image pull --help
```
*   Docker 网站上的相关文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/image _ pull/](https://docs.docker.com/engine/reference/commandline/image_pull/)。
# 列出映像
我们可以通过运行 Docker 守护程序来列出系统上可用的映像。这些映像可能是从注册表中提取的，通过`docker image pull`命令导入的，或者通过 Dockerfile 创建的。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
运行以下任一命令来列出映像:
```
    $ docker image ls
    $ docker images
```
![](img/157c6232-67c0-459b-8c64-a93d6cad2a4f.png)
# 它是如何工作的...
Docker 客户端与 Docker 引擎对话，并获得下载(拉)到 Docker 主机的映像列表。
# 还有更多...
下载所有同名但不同标签的图片。这里要注意的有趣的事情是，它们有相同的名称，但不同的标签。同样的`IMAGE ID`有两个不同的标签，分别是`7328f6f8b418`。
# 请参见
查看`docker image ls`的`help`选项:
```
    $ docker image ls --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/image _ ls/](https://docs.docker.com/engine/reference/commandline/image_ls/)。
# 启动容器
一旦我们有了映像，我们就可以用它们来启动容器。在这个食谱中，我们将以`ubuntu:latest`映像开始一个容器，看看幕后发生了什么。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
我们可以使用以下任一语法启动容器:
```
    docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
    docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]
```
The `docker container run` command is recommended over `docker run` because, in version 1.13, Docker logically grouped container operations under the `docker container management` command, and so `docker run` might be obsolete in the future.
下面是使用`docker container run`命令的一个例子:
```
    $ docker container run -i -t --name mycontainer ubuntu /bin/bash
```
默认情况下，Docker 选取带有最新标签的映像:
*   通过保持`STDIN`打开，`-interactive`或`-i`选项以交互模式启动容器
*   `--tty`或`-t`选项分配一个`pseudo-tty`并将其附加到标准输入
因此，使用前面的命令，我们可以从`ubuntu:latest`映像开始一个容器，附加`pseudo-tty`，将其命名为`mycontainer`，并运行`/bin/bash`命令。如果未指定名称，则将随机分配一个字符串作为名称。
此外，如果映像在本地不可用，则它将首先从注册表中下载，然后运行。
# 它是如何工作的...
在引擎盖下，Docker 将:
*   合并所有的层，组成使用 UnionFS 的映像。
*   为容器分配一个唯一的标识，称为容器标识。
*   为容器分配文件系统并安装读/写层。该层上的任何更改都是临时的，如果没有提交，将被丢弃。
*   分配一个网桥网络接口。
*   为容器分配一个 IP 地址。
*   执行用户指定的过程。
同样，使用默认的 Docker 配置，它会创建一个目录(容器的 ID 在`/var/lib/docker/containers`内)，其中包含容器的特定信息，如主机名、配置详细信息、日志和`/etc/hosts`。
# 还有更多...
要退出容器，请按 *Ctrl* + *D* 或键入`exit`。这类似于从外壳中退出，但这将停止容器。或者，按下*Ctrl*+*P*+*Q*从容器上拆下。被分离的容器将自己从终端上分离，将控制权交还给 Docker 主机外壳，并等待`docker container attach`命令重新连接到容器。
`run`命令创建并启动容器。使用 Docker 1.3 或更高版本，可以只使用`create`命令创建容器，然后使用`start`命令运行它，如下例所示:
```
    $ ID=$(docker container create -t -i ubuntu /bin/bash)
    $ docker container start -a -i $ID
```
容器可以在后台启动，然后我们可以随时附加到它。我们需要使用`-d`选项在后台启动容器:
```
    $ docker container run -d -i -t ubuntu /bin/bash 
    0df95cc49e258b74be713c31d5a28b9d590906ed9d6e1a2dc75672aa48f28c4f
```
前面的命令返回容器的容器标识，我们可以稍后附加到它，如下所示:
```
    $ ID=$(docker container run -d -t -i ubuntu /bin/bash)`
    $ docker attach $ID
```
在前一种情况下，我们选择`/bin/bash`在容器内运行。如果我们连接到容器，我们将获得一个交互式外壳。我们可以运行一个非交互的进程，并在后台运行它来制作一个去监控的容器，如下所示:
```
    $ docker container run -d  ubuntu \
           /bin/bash -c  \
           "while [ true ]; do date; sleep 1; done"
```
要在容器退出后将其取出，请使用`--rm`选项启动容器，如下所示:
```
    $ docker run --rm ubuntu date
```
一旦`date`命令退出，容器将被移除。
`run`命令的`--read-only`选项将在`read-only`模式下挂载根文件系统:
```
    $ docker container run --read-only --rm \
          ubuntu touch file
    touch: cannot touch 'file': Read-only file system
```
您还可以为容器设置自定义标签，这可用于根据标签对容器进行分组。详见本章*标签和过滤容器*配方。
A container can be referred to in three ways: by name, by its short container ID (`0df95cc49e25`), and by its container ID (`0df95cc49e258b74be713c31d5a28b9d590906ed9d6e1a2dc75672aa48f28c4f`).