title:Using graphic turing tests to counter automated DDoS attacks against
web servers
author:William G. Morein and
Angelos Stavrou and
Debra L. Cook and
Angelos D. Keromytis and
Vishal Misra and
Dan Rubenstein
Using Graphic Turing Tests To Counter Automated DDoS
Attacks Against Web Servers∗
William G. Morein∗
Angelos D. Keromytis∗
Angelos Stavrou † Debra L. Cook∗
Dan Rubenstein†
Vishal Misra∗
∗Department of Computer Science †Department of Electrical Engineering
Columbia University in the City of New York
{wgm2001,angel,dcook,angelos,misra,danr}@cs.columbia.edu
ABSTRACT
We present WebSOS, a novel overlay-based architecture that pro-
vides guaranteed access to a web server that is targeted by a denial
of service (DoS) attack. Our approach exploits two key character-
istics of the web environment: its design around a human-centric
interface, and the extensibility inherent in many browsers through
downloadable “applets.” We guarantee access to a web server for a
large number of previously unknown users, without requiring pre-
existing trust relationships between users and the system.
Our prototype requires no modiﬁcations to either servers or brow-
sers, and makes use of graphical Turing tests, web proxies, and
client authentication using the SSL/TLS protocol, all readily sup-
ported by modern browsers. We use the WebSOS prototype to con-
duct a performance evaluation over the Internet using PlanetLab, a
testbed for experimentation with network overlays. We determine
the end-to-end latency using both a Chord-based approach and our
shortcut extension. Our evaluation shows the latency increase by a
factor of 7 and 2 respectively, conﬁrming our simulation results.
Categories and Subject Descriptors
C.2.0 [Security and Protection]: Denial of Service; C.2.1 [Network
Topology]: Overlay Networks
General Terms
Security, Reliability.
Keywords
Graphic Turing Tests, Web Proxies, Java.
∗
This work is supported in part by DARPA contract No. F30602-
02-2-0125 (FTN program) and by the National Science Foundation
under grant No. ANI-0117738 and CAREER Award No. ANI-
0133829, with additional support from Cisco and Intel Corpora-
tion. Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do not nec-
essarily reﬂect the views of the National Science Foundation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
1.
INTRODUCTION
The Web is increasingly being used for different kinds of ser-
vices and interactions with, and between humans. Beyond display-
ing static content such as home pages or academic papers, the web
is actively used for such diverse tasks as e-mail, banking, consumer
purchasing, marketing, stock-quote dissemination and trading, and
real-time communication. The wide availability of high-quality
browsers and servers, as well as programmers’ and users’ famil-
iarity with the tools and concepts behind web browsing ensure that
ongoing creation of additional services.
Such an environment provides a rich set of targets for motivated
attackers. This has been demonstrated by the large number of vul-
nerabilities and exploits against web servers, browsers, and applica-
tions. Traditional security considerations revolve around protecting
the network connection’s conﬁdentiality and integrity, protecting
the server from break-in, and protecting the client’s private infor-
mation from unintended disclosure. To that end, several protocols
and mechanisms have been developed, addressing these issues in-
dividually. However, one area that has long been neglected is that
of service availability in the presence of denial of service (DoS)
attacks, and their distributed variants (DDoS).
Previous approaches that address the general network DoS prob-
lem [15, 9, 31] are reactive: they monitor trafﬁc at a target location,
waiting for an attack to occur. Once the attack is identiﬁed, typi-
cally via analysis of trafﬁc patterns and packet headers, ﬁlters may
be established in an attempt to block the offenders. The two main
problems with this approach are the accuracy with which legitimate
trafﬁc can be distinguished from the DoS trafﬁc, and the robustness
of the mechanism for establishing ﬁlters deep enough in the net-
work so that the effects of the attack are minimized.
We introduce WebSOS, an adaptation of the Secure Overlay Ser-
vices (SOS) architecture [20]. Our intent is to prevent congestion-
based DDoS attacks from denying any user’s access to web servers
targeted by those attacks. The novel aspects of WebSOS are (a) its
use of graphic Turing tests in lieu of strong client authentication
(as was proposed in SOS) to distinguish between human users and
automated attack zombies, and (b) its transparency to browsers and
servers, by taking advantage of browser extensibility.
In WebSOS, the portion of the network immediately surround-
ing attack targets (i.e., the web servers) to be protected is protected
by high-performance routers that aggressively ﬁlter and block all
incoming connections from hosts that are not approved, as shown
in Figure 1. These routers are “deep” enough in the network (typ-
ically in an ISP’s POP, as we discuss in Section 3) that the attack
trafﬁc does not adversely impact innocuous trafﬁc. The identities
of the small set of nodes that are approved at any particular time
8is kept secret so that attackers cannot try to impersonate them to
pass through the ﬁlter. These nodes are picked from a set of nodes
that are distributed throughout the wide area network. This super-
set forms a secure overlay: any transmissions that wish to traverse
the overlay must ﬁrst be validated at any of the entry points of the
overlay using a Graphic Turing test to distinguish humans from at-
tack scripts [10]. Once inside the overlay, the trafﬁc is tunneled
securely to one of the approved (and secret from attackers) loca-
tions that can then forward the validated trafﬁc through the ﬁltering
routers to the target. Thus, there are two main principles behind
our design. The ﬁrst principle is the elimination of communication
pinch-points, which constitute attractive DoS targets, via a combi-
nation of ﬁltering and overlay routing to obscure the identities of
the sites whose trafﬁc is permitted to pass through the ﬁlter. The
second is the ability to recover from random or induced failures
within the forwarding infrastructure or the secure overlay nodes.
WebSOS is the ﬁrst instantiation of the SOS architecture. We
use this instantiation to evaluate the performance of the underlying
overlay routing mechanism both in a local area scenario and over
the Internet using the PlanetLab testbed [27]. The results show that
the average increase in end-to-end latency is a factor of 2 beyond
what is achieved using the standard web infrastructure. We believe
this modest increase is an acceptable alternative to providing no
service. Such a service can be used on an as-needed basis, and
hence need not impact performance when no attack is in progress.
These results validate our simulation analyses, where we used real
ISP topologies to determine the added average latency imposed by
the WebSOS mechanism.
1.1 WebSOS Architectural Scope
DoS attacks can take many forms, depending on the resource the
attacker is trying to exhaust. For example, an attacker can try to
cause the web server to perform excessive computation, or exhaust
all available bandwidth to and from the server. In all forms, the at-
tacker’s goal is to deny use of the service to other users. Apart from
the annoyance factor, such an attack can prove particularly damag-
ing for time- or life-critical services (e.g., tracking the spread of
an real-world epidemic), or when the attack persists over several
days1. Of particular interest are link congestion attacks, whereby
attackers identify “pinch” points in the communications substrate
and render them inoperable by ﬂooding them with large volumes
of trafﬁc. An example of an obvious attack point is the location (IP
address) of the destination that is to be secured, or the routers in
its immediate network vicinity; sending enough attack trafﬁc will
cause the links close to the destination to be congested and drop all
other trafﬁc. It is such attacks that WebSOS was designed to ad-
dress. Solving the much harder general denial-of-service problem
where attackers could potentially have enough resources to phys-
ically partition a network is not addressed in this paper. Further-
more, we do not consider algorithmic denial of service attacks [8].
We assume that attackers are smart enough to exploit features
of the architecture that are made publicly available, such as the
set of nodes that form the overlay. However, we do not speciﬁ-
cally consider how to protect the architecture against attackers who
can inﬁltrate the security mechanism that distinguishes legitimate
trafﬁc from (illegitimate) attack trafﬁc: we assume that commu-
nications between overlay nodes remain secure so that an attacker
cannot send illegitimate communications, masking them as legiti-
mate. In addition, it is conceivable that more intelligent attackers
could monitor communications between nodes in the overlay and,
1In one instance of a persistent DoS attack, a British ISP was
forced out of business because it could not provide service to its
customers.
based on observed trafﬁc statistics, determine additional informa-
tion about the current conﬁguration. We leave it as future work
to explore how WebSOS can be used to protect against attacks by
such highly specialized and sophisticated attackers. Some work in
that direction can be found in [21].
1.2 Paper Organization
The remainder of this paper is organized as follows. Section 2
gives an overview of Secure Overlay Services (SOS) and graphic
Turing tests, and discusses the speciﬁcs of the WebSOS architec-
ture.
In Section 3 we present our simulation results, using real
ISP topologies. Section 4 presents details of our prototype imple-
mentation, while Section 5 contains our performance evaluation.
Section 6 discusses other work in DoS detection, prevention, and
mitigation. Finally, Section 7 concludes the paper.
2. THE WEBSOS ARCHITECTURE
Because our approach is based on the Secure Overlay Services
(SOS) [20] architecture, we ﬁrst highlight its important aspects.
We also brieﬂy describe Graphic Turing tests, which implement
human-to-overlay authentication. We close this section with a de-
scription of WebSOS.
2.1 Overview of SOS
Fundamentally, the goal of the SOS infrastructure is to distin-
guish between authorized and unauthorized trafﬁc. The former is
allowed to reach the destination, while the latter is dropped or is
rate-limited. Thus, at a very basic level, SOS requires the func-
tionality of a ﬁrewall “deep” enough in the network that the access
link to the target is not congested. This imaginary ﬁrewall performs
access control by using protocols such as IPsec [19]. This gener-
ally pre-supposes the presence of authentication credentials (e.g.,
X.509 [5] certiﬁcates) that a user can use to gain access to the over-
lay. We consider this one of the the largest drawbacks to SOS, as it
precludes casual access to a web server by anonymous, yet benign
users.
Beacon
Beacon
Beacon
overlay
nodes
Source
Point
SOAP
SOAP
Secret
Servlet
Secret
Servlet
Secret
Servlet
Target
Filtered region
Figure 1: Basic SOS architecture. SOAP stands for Secure Overlay
Access Point, and represents an entry point to the SOS overlay. SOS
nodes can serve any of the roles of SOAP, Beacon, or Secret Servlet.
Since traditional ﬁrewalls themselves are susceptible to DoS at-
tacks, what is really needed is a distributed ﬁrewall [3, 16]. To
avoid the effects of a DoS attack against the ﬁrewall connectivity,
instances of the ﬁrewall are distributed across the network. Expen-
sive processing, such as cryptographic protocol handling, is farmed
out to a large number of nodes. However, ﬁrewalls depend on topo-
logical restrictions in the network to enforce access-control poli-
cies. In what we have described so far, an attacker can launch a
DoS attack with spoofed trafﬁc purporting to originate from one of
these ﬁrewalls, whose identity cannot be assumed to remain forever
secret. The insight of SOS is that, given a sufﬁciently large group of
such ﬁrewalls, one can select a very small number of these as the
designated authorized forwarding stations: only trafﬁc forwarded
from these will be allowed through the ﬁltering router.
In SOS,
these nodes are called secret servlets. All other ﬁrewalls must for-
ward trafﬁc for the protected site to these servlets. Figure 1 gives
a high-level overview of a SOS infrastructure that protects a target
node or site so that it only receives legitimate transmissions. Note
that the secret servlets can change over time, and that multiple sites
can use the same SOS infrastructure.
30
1
25
22
17+1: 22
17
:
:
16
12
16+1: 17
16+2: 22
16+4: 22
16+8: 25
16+16: 1
7+1 : 10
7+2:  10
7+4:  12
7+8: 16
7+16: 25
3
7
10
m = 5
Figure 2: Chord-based overlay routing.
To route trafﬁc inside the overlay, SOS uses Chord [34], which
can be viewed as a routing service that can be implemented atop
the existing IP network fabric, i.e., as a network overlay. Consis-
tent hashing [17] is used to map an arbitrary identiﬁer to a unique
destination node that is an active member of the overlay.
In Chord, each node is assigned a numerical identiﬁer (ID) via
a hash function in the range [0, 2m] for some pre-determined value
of m. The nodes in the overlay are ordered by these identiﬁers. The
ordering is cyclic (i.e., wraps around) and can be viewed conceptu-
ally as a circle, where the next node in the ordering is the next node
along the circle in the clockwise direction.
Each overlay node maintains a table that stores the identities of
m other overlay nodes. The ith entry in the table is the node whose
identiﬁer x equals or, in relation to all other nodes in the over-
lay, most immediately follows x + 2i−1( (mod 2m)), as shown
in Figure 2. When overlay node x receives a packet destined for
ID y, it forwards the packet to the overlay node in its table whose
ID precedes y by the smallest amount. In the example, if node 7
receives a packet whose destination is the identiﬁer 20, the packet
will route from 7 to 16 to 17. When the packet reaches node 17, the