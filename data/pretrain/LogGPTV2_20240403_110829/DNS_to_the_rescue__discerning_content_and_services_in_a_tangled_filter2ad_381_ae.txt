fers the largest values.
Interestingly, in all traces, for about 5% of cases the ﬁrst
ﬂow delay is higher than 10s, with some cases larger than
300s. This is usually a result of aggressive pre-fetching per-
formed by applications (e.g., web browsers) that resolve all
FQDNs found in the HTML content before a new resource is
actually accessed. Tab. 9 quantiﬁes the fraction of “useless”
DNS responses, i.e., DNS queries that were not followed by
any TCP ﬂow. Surprisingly, about half of DNS resolutions
are useless. Mobile terminals are less aggressive thus result-
ing in lower percentage of useless responses.
Trace
Useless DNS
EU1-ADSL1
EU1-ADSL2
EU1-FTTH
EU2-ADSL
US-3G
46%
47%
50%
47%
30%
Table 9: Fraction of useless DNS resolution.
 0 5 10 15 20 25 30 35 40 4501/0403/0405/0407/0409/0411/0413/0415/0417/04idtime 0 0.2 0.4 0.6 0.8 1 0.01 0.1 1 10 300 1800 3600 7250CDFtime [s]EU1-ADSL1EU1-ADSL2EU1-FTTHUS-3GEU2-ADSL423Trace
US-3G
EU2-ADSL
EU1-ADSL1
EU1-ADSL2
EU1-FTTH
Total Test Generic coll. Severe Coll
1.3M
11.9M
4.9M
2.6M
680k
0.7%
0.7%
0.01%
0.1%
1.6%
0.6%
0.3%
0.004%
0.05%
0.9%
Table 10: DN-Hunter Collision Ratio
up to 16 serverIP s are returned when querying any Google
FQDN. The maximum number exceeds 30 in very few cases.
6.1 Collision probability in practice
Now we consider the possibility of collisions when the
same clientIP is accessing two or more FQDNs hosted at
the same serverIP . DN-Hunter would return the last ob-
served FQDN, thus possibly returning incorrect labels. We
call this event a “collision”. We examined the traces to see
how frequently such situation occurs. We observed was that
the most common reason for this is due to HTTP redirec-
tion, e.g., google.com being redirected to www.google.com
and then to www.google.it, all FQDNs being served by the
same serverIP . Hence, two types of collisions are possi-
ble: (i) generic collision, and (ii) severe collision. The latter
accounts for the cases in which the two conﬂicting FQDNs
have diﬀerent second level domain names, e.g., google.com
and youtube.com.
Collisions can occur in DN-Hunter when the same clientIP
address contacts the same serverIP address several times
during the period of our traces.
In the second column of
Tab. 10 we report the total number of ﬂows that are po-
tential candidates for collision in DN-Hunter. If the domain
name that DN-Hunter return for the two successive ﬂow
from the same  pair is the same, then
we declare that there is no collision. If the returned domain
name is diﬀerent, then we declare that a collision has oc-
curred. If a collision occurs, then we examine the domain
names to determine if the collision is a generic one or a severe
one. The second column of Tab. 10 reports the total number
of potential candidate ﬂows for collision. The third and the
fourth columns report the percentage of the potential colli-
sion candidates that translate into generic and severe colli-
sions respectively. As we can clearly see, the collision rate is
extremely low in all the traces used for evaluation. In fact,
we observe that more than 70% of collisions occur within a
1 second interval, suggesting that these collisions could be
a result of HTTP redirection. Although, these are collisions
might not impact the accuracy of DN-Hunter, in Tab. 10 we
still consider them to be collisions and give a conservative
estimate. In summary, the problem of collisions has minimal
impact on the operational value of DN-Hunter.
Finally, note that it is possible to extend DN-Hunter to
return all possible labels associated to a ﬂow instead of only
the latest one, thus giving the network administrator the
ability to resolve the collisions using more advanced policies
than by strictly using the latest FQDN.
6.2 Deployment issue
DN-Hunter is a passive sniﬀer which assumes to observe
DNS and data traﬃc generated by the end-users. The nat-
ural placement of the sniﬀer is at the network boundaries,
where end-users’ traﬃc can be observed. The Flow Sniﬀer
and the DNS Response Sniﬀer may also be placed at diﬀer-
ent vantage points, e.g., the latter may be located in front of
Figure 13: Time elapsed between a DNS response
and any TCP ﬂow associated to it.
Figure 14: DNS responses observed during a day by
intervals of 10 minutes in EU1-ADSL1.
Fig. 13 shows the CDF of the time elapsed between the
DNS response and any subsequent TCP ﬂow the client es-
tablishes to any of the serverIP addresses that appeared
in the answer list. It reﬂects the impact of caching lifetime
at the local DNS resolver at clients. The initial part of the
CDF is strictly related to the ﬁrst ﬂow delay (Fig. 12); sub-
sequent ﬂows directed to the same FQDN exhibit larger time
gaps. Results show that the local resolver caching lifetime
can be up to few hours. For instance, to resolve about 98%
of ﬂows for which a DNS request is seen, Clist must handle
an equivalent caching time of about 1 hour.
Fig. 14 shows the total number of DNS responses observed
in 10m time bins. As we can see, at the peak time about
350,000 requests in EU1-ADSL1 dataset. In this scenario,
considering a desired caching time of 1h, L should be about
2.1M entries to guarantee that the DNS resolver has an ef-
ﬁciency of 98%.
We have also checked the number of serverIP addresses
returned in each DNS response. Since the clientIP can
choose any one of the serverIP addresses to open the data
connection, all of the serverIP addresses must be stored in
the DNS resolver. The results from all the datasets are very
similar with about 40% of responses returning more than one
serverIP address. About 20-25% of responses include 2-10
diﬀerent ip-addresses. Most of these are related to servers
managed by large CDNs and organizations. For example,
 0 0.2 0.4 0.6 0.8 1 0.01 0.1 1 10 300 1800 3600 7200CDFtime [s]EU1-ADSL1EU1-ADSL2EU1-FTTHUS-3GEU2-ADSL 0 50000 100000 150000 200000 250000 300000 35000008:0010:0012:0014:0016:0018:0020:0022:0000:0002:0004:0006:0008:00# DNS responsesTimeEU1-ADSL1EU1-ADSL2EU1-FTTHUS-3GEU2-ADSL424(or integrated into) the internal DNS server to intercept all
DNS queries. Considering DNS traﬃc sniﬃng, DNSSEC [3]
poses no challenge since it does not provide conﬁdentiality
to DNS traﬃc. DNSCrypt [4], a recent proposal to encrypt
DNS traﬃc, on the contrary, would make the DNS Response
Sniﬀer ineﬀective. DNSCrypt is not yet widely deployed and
it requires signiﬁcant DNS infrastructure [4] changes to be
pragmatic in the near future [5].
DN-Hunter labels TCP ﬂows using (clientIP, serverIP )
pair as the key.
In scenarios where the same clientIP is
shared by multiple end-hosts via NAT/connection sharing
tools, DN-Hunter may associate the wrong FQDN to the
ﬂow,causing a possible collision. Notice that this can hap-
pen only if the end-hosts are initiating connection at almost
the same time to the same serverIP (which has been re-
turned when requesting two diﬀerent FQDN). This can also
happen when a end-user is using multiple applications (e.g.,
multiple browsers windows/tabs opened at the same time)
to access diﬀerent services running on the same serverIP
at the same time. We cannot quantify how probable these
events are in practice in our traces, and given the very low
collision probability (see Sec. 6.1), we expect this to be a
marginal problem in the considered scenarios. We argue
that in access scenarios where single households are allowed
to share the internet connection among few terminals, the
collision probability is still marginal. However, in the sce-
nario where there are several hundreds (or thousands) of
users behind NAT and the monitoring point for DN-Hunter
is after the NAT, DN-Hunter will be severely impaired. De-
ploying DN-Hunter before the NAT will result in accurate
results.
7. RELATED WORK
DNS has been a popular area of research over the past few
years. I this section we will highlight the main diﬀerences
between DN-Hunter and some of the other related works.
The ﬁrst set of related work focusses on exploring the
relationship between CDNs and DNS mainly to study the
performance and load balancing strategies in CDNs [6–8].
Ager et al. [9] complement this by proposing an automatic
classiﬁer for diﬀerent types of content hosting and delivery
infrastructures. DNS traces actively collected and provided
by volunteers are analyzed, in an eﬀort to provide a compre-
hensive map of the whole Internet. DN-Hunter is similar in
spirit, but leverages DNS information in a completely pas-
sive manner and focuses on a broader set of analytics.
Similar to our work, [10, 11] focus on the relationship be-
tween FQDNs and the applications generating them mainly
in the context of botnet detection. However, in DN-Hunter,
we mainly focus on identifying and labeling various appli-
cations in the Internet. Furthermore, we focus on some ad-
vanced analytics to shed light on problems that are critical
for untangling the web.
[12] analyze the DNS structure using available DNS in-
formation on the wire. The authors deﬁne 3 classes of DNS
traﬃc (canonical, overloaded and unwanted), and use the
“TreeTop” algorithm to analyze and visualize them in real-
time, resulting in a hierarchical representation of IP traﬃc
fractions at diﬀerent levels of domain names. DN-Hunter
goes beyond the visualization of DNS traﬃc as the set of do-
main names being used by users in a network, and provides
a much richer information to understand today’s Internet.
The same authors above extend their analysis on DNS
traﬃc in [13]. Their proposal is similar to the DN-Hunter
Sniﬀer goal, even if not designed to work in real time: ﬂows
are labeled with the original resource name derived from the
DNS (as in the Flow Database). Then, ﬂows are classiﬁed in
categories based on the labels of the DNS associated entries.
This allows to recover the “volume” of traﬃc, e.g., going to
.com domain, or to apple.com, etc. Authors then focus on
the study of breakdown of traﬃc volumes based on DNS
label categories. As presented in the paper, DN-Hunter An-
alyzer performs much more advanced information recovery
out of DNS traﬃc.
In [14], the authors focus on security issues related to DNS
prefetching performed by modern Internet browsers, spe-
cifically the fact that someone inspecting DNS traﬃc can
eventually reconstruct the search phrases users input in the
search boxes of the browser. Their methodology is some-
what similar to the one DN-Hunter uses to associate tags to
network ports, but the objective is completely diﬀerent.
Note CDN content discovery and mapping the geograph-
ical locations of servers is a topic that could have been ad-
dressed without the introduced approach. Yet, the major
plus of DN-Hunter is that it is completely passive, and very
simple. It provides information to the ISP that naturally re-
ﬂects its end-users habits along with the conﬁguration CDNs
adopt for serving traﬃc generated by ISP’s end-users.
In
other words, it reﬂects the “current” usage of the network
with respect to the traﬃc and external events (like CDN
policy changes).
8. CONCLUSIONS
In this work we have introduced DN-Hunter, a novel tool
that links the information found in DNS responses to traﬃc
ﬂows generated during normal Internet usage. Explicitly
aimed at discerning the tangle between the content, content
providers, and content hosts (CDNs and cloud providers),
DN-Hunter unveils how the DNS information can be used to
paint a very clear picture, providing invaluable information
to network/security operators. In this work, we presented
several applications of DN-Hunter, ranging from automated
network service classiﬁcation to dissecting content delivery
infrastructures.
As notable examples, we have shown how DN-Hunter is
helpful (i) in providing a ﬁne-grained traﬃc visibility even
when the traﬃc is encrypted (i.e., TLS/SSL ﬂows), (ii) in
identifying ﬂows even before the ﬂows begin, thus provid-
ing superior network management capabilities to adminis-
trators, (iii) in observing and tracking how CDNs and cloud
providers host content for a particular resource over time,
and (iv) in discerning the services/contents hosted by a CDN
or cloud provider. We believe that the applications of DN-
Hunter the Analyzer in particular, are not limited to the
ones presented in this work, and novel applications can lever-
age the information exposed by the labeled ﬂows database.
DN-Hunter has been deployed in actual ISP networks,
providing network administrators enhanced traﬃc visibility
and the ability to perform detailed forensics if required. A
key challenge for the future is to devise automatic algorithms
to mine the amount of data exposed by DN-Hunter and by
network monitoring tools in general. We believe that this
challenge is common to the network monitoring and mea-
surement community, and modern tools have to be devised
to dig into this enormous volume of data.
425Acknowledgments
The research leading to these results has received funding
from Narus Inc. and from the European Commission un-
der the Seventh Framework Programme (FP7 2007-2013)
with the Grant Agreement n. 318627 - Integrated Project
“mPlane - an Intelligent Measurement Plane for Future Net-
work and Application Management”.
9. REFERENCES
[1] V. Gehlen, A. Finamore, M. Mellia, and M. Munaf`o.
Uncovering the big players of the web. In TMA
Workshop, pages 15–28, Vienna, AT, 2012.
[2] A. Finamore, M. Mellia, M. Meo, M.M. Munafo, and
D. Rossi. Experiences of internet traﬃc monitoring
with tstat. Network, IEEE, Vol.25, N.3, pages 8–14,
May 2011.
[3] R. Arends et. Al. RFC 4033 - DNS Security
Introduction and Requirements, March 2005.
[4] Introducing DNSCrypt (Preview Release), February
2011.
http://www.opendns.com/technology/dnscrypt/
[5] B. Ager, H. Dreger, and A. Feldmann. Predicting the
DNSSEC Overhead using DNS Traces. In 40th Annual
Conference on Information Sciences and Systems,
pages 1484–1489. IEEE, 2006.
[6] S. Triukose, Z. Wen, and M. Rabinovich. Measuring a
Commercial Content Delivery Network. In ACM
WWW, pages 467–476., Hyderabad, IN, 2011.
[7] A.J. Su, D.R. Choﬀnes, A. Kuzmanovic, and F.E.
Bustamante. Drafting Behind Akamai: Inferring
Network Conditions Based on CDN Redirections.
IEEE/ACM Transactions on Networking, Vol.17, N. 6,
pages 1752–1765, 2009.
[8] C. Huang, A. Wang, J. Li, and K.W. Ross. Measuring
and Evaluating Large-scale CDNs. In ACM IMC,
pages 15–29, Vouliagmeni, GR, 2008.
[9] B. Ager, W. M¨uhlbauer, G. Smaragdakis, and
S. Uhlig. Web Content Cartography. ACM IMC, pages
585–600, Berlin, DE, 2011.
[10] H. Choi, H. Lee, H. Lee, and H. Kim. Botnet
Detection by Monitoring Group Activities in DNS
Traﬃc. In IEEE CIT , pages 715–720., Fukushima,
JP, 2007.
[11] S. Yadav, A.K.K. Reddy, AL Reddy, and S. Ranjan.
Detecting Algorithmically Generated Malicious
Domain Names. In ACM IMC, pages 48–61.,
Melbourne, AU, 2010.
[12] D. Plonka and P. Barford. Context-aware Clustering
of DNS Query Traﬃc. In ACM IMC, pages 217–230.,
Vouliagmeni, GR, 2008.
[13] D. Plonka and P. Barford. Flexible Traﬃc and Host
Proﬁling via DNS Rendezvous. In Workshop SATIN,
2011.
[14] S. Krishnan and F. Monrose. An Empirical Study of
the Performance, Security and Privacy Implications of
Domain Name Prefetching. In IEEE/IFIP DSN,
Boston, MA, 2011.
426