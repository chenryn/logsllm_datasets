# Network Preferences and Disk Management

## Network Preferences

### Listing Port Information
- **List all port names with their Ethernet (MAC) addresses:**
  ```bash
  $ sudo networksetup -listallhardwareports
  ```
- **List hardware port information by port configuration:**
  ```bash
  $ sudo networksetup -listallnetworkservices
  ```
  An asterisk (*) in the results marks an inactive configuration.

- **View the default (en0) Ethernet (MAC) address of the server:**
  ```bash
  $ serversetup -getMacAddress
  ```

- **View the Ethernet (MAC) address of a particular port:**
  ```bash
  $ sudo networksetup -getmacaddress (devicename|"portname")
  ```

- **Scan for new hardware ports:**
  ```bash
  $ sudo networksetup -detectnewhardware
  ```
  This command checks the computer for new network hardware and creates a default configuration for each new port.

### Viewing or Changing MTU Values
- **View the MTU value for a hardware port:**
  ```bash
  $ sudo networksetup -getMTU (devicename|"portname")
  ```

- **List valid MTU values for a hardware port:**
  ```bash
  $ sudo networksetup -listvalidMTUrange (devicename|"portname")
  ```

- **Change the MTU value for a hardware port:**
  ```bash
  $ sudo networksetup -setMTU (devicename|"portname") <MTU_value>
  ```

### Viewing or Changing Media Settings
- **View the media settings for a port:**
  ```bash
  $ sudo networksetup -getMedia (devicename|"portname")
  ```

- **List valid media settings for a port:**
  ```bash
  $ sudo networksetup -listValidMedia (devicename|"portname")
  ```

- **Change the media settings for a port:**
  ```bash
  $ sudo networksetup -setMedia (devicename|"portname") <subtype> [option1] [option2] [...]
  ```

### Network Port Configurations
- **List existing port configurations:**
  ```bash
  $ sudo networksetup -listallnetworkservices
  ```

- **Create a port configuration:**
  ```bash
  $ sudo networksetup -createnetworkservice <configuration> <hardwareport>
  ```

- **Duplicate a port configuration:**
  ```bash
  $ sudo networksetup -duplicatenetworkservice <configuration> <newconfig>
  ```

- **Rename a port configuration:**
  ```bash
  $ sudo networksetup -renamenetworkservice <configuration> <newname>
  ```

- **Delete a port configuration:**
  ```bash
  $ sudo networksetup -removenetworkservice <configuration>
  ```

- **Check if a port configuration is active:**
  ```bash
  $ sudo networksetup -getnetworkserviceenabled <configuration>
  ```

- **Enable or disable a port configuration:**
  ```bash
  $ sudo networksetup -setnetworkserviceenabled <configuration> (on|off)
  ```

- **List the configuration order:**
  ```bash
  $ sudo networksetup -listnetworkserviceorder
  ```

- **Change the order of the port configurations:**
  ```bash
  $ sudo networksetup -ordernetworkservices config1 config2 [config3] [...]
  ```

### TCP/IP Settings
- **Change a server’s IP address:**
  1. Run the `changeip` tool:
     ```bash
     $ changeip [(directory|-)] <old-ip> <new-ip> [old-hostname new-hostname]
     ```
     - `directory`: Path to the directory domain (for Open Directory master/replica or connected to a directory system). Use "-" for standalone servers.
     - `old-ip`: Current IP address.
     - `new-ip`: New IP address.
     - `old-hostname` (optional): Current DNS host name.
     - `new-hostname` (optional): New DNS host name.

  2. Use `networksetup` or `serversetup` to change the server’s IP address in its network settings.
  3. Restart the server.

- **List TCP/IP settings for a configuration:**
  ```bash
  $ sudo networksetup -getinfo "configuration"
  ```

- **View TCP/IP settings for a particular port or device:**
  ```bash
  $ serversetup -getInfo (devicename|"portname")
  ```

- **Change TCP/IP settings for a particular port or device:**
  ```bash
  $ sudo serversetup -setInfo (devicename|"portname") <ipaddress> <subnetmask> <router>
  ```

- **Set manual TCP/IP information for a configuration:**
  ```bash
  $ sudo networksetup -setmanual "configuration" <ipaddress> <subnetmask> <router>
  ```

- **Validate an IP address:**
  ```bash
  $ serversetup -isValidIPAddress <ipaddress>
  ```
  Displays `0` if the address is valid, `1` if it isn’t.

- **Validate a subnet mask:**
  ```bash
  $ serversetup -isValidSubnetMask <subnetmask>
  ```

- **Set a configuration to use DHCP:**
  ```bash
  $ sudo networksetup -setdhcp "configuration" [clientID]
  ```

- **Set a configuration to use DHCP with a manual IP address:**
  ```bash
  $ sudo networksetup -setmanualwithdhcprouter "configuration" <ipaddress>
  ```

- **Set a configuration to use BootP:**
  ```bash
  $ sudo networksetup -setbootp "configuration"
  ```

### DNS Servers
- **View the DNS servers for a particular port or device:**
  ```bash
  $ serversetup -getDNSServer (devicename|"portname")
  ```

- **Change the DNS servers for a particular port or device:**
  ```bash
  $ sudo serversetup -setDNSServer (devicename|"portname") <server1> [server2] [...]
  ```

- **List the DNS servers for a configuration:**
  ```bash
  $ sudo networksetup -getdnsservers "configuration"
  ```

- **View the DNS search domains for a particular port or device:**
  ```bash
  $ serversetup -getDNSDomain (devicename|"portname")
  ```

- **Change the DNS search domains for a particular port or device:**
  ```bash
  $ sudo serversetup -setDNSDomain (devicename|"portname") <domain1> [domain2] [...]
  ```

- **List the DNS search domains for a configuration:**
  ```bash
  $ sudo networksetup -getsearchdomains "configuration"
  ```

- **Set the DNS servers for a configuration:**
  ```bash
  $ sudo networksetup -setdnsservers "configuration" <dns1> [dns2] [...]
  ```

- **Set the search domains for a configuration:**
  ```bash
  $ sudo networksetup -setsearchdomains "configuration" <domain1> [domain2] [...]
  ```

- **Validate a DNS server:**
  ```bash
  $ serversetup -verifyDNSServer <server1> [server2] [...]
  ```

- **Validate DNS search domains:**
  ```bash
  $ serversetup -verifyDNSDomain <domain1> [domain2] [...]
  ```

### Enabling TCP/IP
- **Enable TCP/IP on a particular port:**
  ```bash
  $ serversetup -EnableTCPIP [(devicename|"portname")]
  ```
  If no interface is provided, `en0` is assumed.

- **Disable TCP/IP on a particular port:**
  ```bash
  $ serversetup -DisableTCPIP [(devicename|"portname")]
  ```
  If no interface is provided, `en0` is assumed.

### AppleTalk Settings
- **Enable AppleTalk on a particular port:**
  ```bash
  $ serversetup -EnableAT [(devicename|"portname")]
  ```
  If no interface is provided, `en0` is assumed.

- **Disable AppleTalk on a particular port:**
  ```bash
  $ serversetup -DisableAT [(devicename|"portname")]
  ```
  If no interface is provided, `en0` is assumed.

- **Enable AppleTalk on en0:**
  ```bash
  $ serversetup -EnableDefaultAT
  ```

- **Disable AppleTalk on en0:**
  ```bash
  $ serversetup -DisableDefaultAT
  ```

- **Make AppleTalk active or inactive for a configuration:**
  ```bash
  $ sudo networksetup -setappletalk "configuration" (on|off)
  ```

- **Check AppleTalk state on en0:**
  ```bash
  $ serversetup -getDefaultATActive
  ```

- **See if AppleTalk is active for a configuration:**
  ```bash
  $ sudo networksetup -getappletalk
  ```

### Proxy Settings
- **View FTP proxy information for a configuration:**
  ```bash
  $ sudo networksetup -getftpproxy "configuration"
  ```

- **Set FTP proxy information for a configuration:**
  ```bash
  $ sudo networksetup -setftpproxy "configuration" <domain> <portnumber>
  ```

- **View FTP passive setting for a configuration:**
  ```bash
  $ sudo networksetup -getpassiveftp "configuration"
  ```

- **Enable or disable FTP passive mode for a configuration:**
  ```bash
  $ sudo networksetup -setpassiveftp "configuration" (on|off)
  ```

- **Enable or disable the FTP proxy for a configuration:**
  ```bash
  $ sudo networksetup -setftpproxystate "configuration" (on|off)
  ```

- **View web proxy information for a configuration:**
  ```bash
  $ sudo networksetup -getwebproxy "configuration"
  ```

- **Set web proxy information for a configuration:**
  ```bash
  $ sudo networksetup -setwebproxy "configuration" <domain> <portnumber>
  ```

- **Enable or disable the web proxy for a configuration:**
  ```bash
  $ sudo networksetup -setwebproxystate "configuration" (on|off)
  ```

- **View secure web proxy information for a configuration:**
  ```bash
  $ sudo networksetup -getsecurewebproxy "configuration"
  ```

- **Set secure web proxy information for a configuration:**
  ```bash
  $ sudo networksetup -setsecurewebproxy "configuration" <domain> <portnumber>
  ```

- **Enable or disable the secure web proxy for a configuration:**
  ```bash
  $ sudo networksetup -setsecurewebproxystate "configuration" (on|off)
  ```

- **View streaming proxy information for a configuration:**
  ```bash
  $ sudo networksetup -getstreamingproxy "configuration"
  ```

- **Set streaming proxy information for a configuration:**
  ```bash
  $ sudo networksetup -setstreamingproxy "configuration" <domain> <portnumber>
  ```

- **Enable or disable the streaming proxy for a configuration:**
  ```bash
  $ sudo networksetup -setstreamingproxystate "configuration" (on|off)
  ```

- **View gopher proxy information for a configuration:**
  ```bash
  $ sudo networksetup -getgopherproxy "configuration"
  ```

- **Set gopher proxy information for a configuration:**
  ```bash
  $ sudo networksetup -setgopherproxy "configuration" <domain> <portnumber>
  ```

- **Enable or disable the gopher proxy for a configuration:**
  ```bash
  $ sudo networksetup -setgopherproxystate "configuration" (on|off)
  ```

- **View SOCKS firewall proxy information for a configuration:**
  ```bash
  $ sudo networksetup -getsocksfirewallproxy "configuration"
  ```

- **Set SOCKS firewall proxy information for a configuration:**
  ```bash
  $ sudo networksetup -setsocksfirewallproxy "configuration" <domain> <portnumber>
  ```

- **Enable or disable the SOCKS firewall proxy for a configuration:**
  ```bash
  $ sudo networksetup -setsocksfirewallproxystate "configuration" (on|off)
  ```

- **List the proxy bypass domains for a configuration:**
  ```bash
  $ sudo networksetup -getproxybypassdomains "configuration"
  ```

- **Set the proxy bypass domains for a configuration:**
  ```bash
  $ sudo networksetup -setproxybypassdomains "configuration" [domain1] domain2 [...]
  ```

### AirPort Settings
- **Check if AirPort power is on or off:**
  ```bash
  $ sudo networksetup -getairportpower
  ```

- **Turn AirPort power on or off:**
  ```bash
  $ sudo networksetup -setairportpower (on|off)
  ```

- **Display the name of the current AirPort network:**
  ```bash
  $ sudo networksetup -getairportnetwork
  ```

- **Join an AirPort network:**
  ```bash
  $ sudo networksetup -setairportnetwork <network> [password]
  ```

### Computer, Host, and Rendezvous Name
- **Display the server’s computer name:**
  ```bash
  $ sudo systemsetup -getcomputername
  ```
  or
  ```bash
  $ sudo networksetup -getcomputername
  ```
  or
  ```bash
  $ serversetup -getComputername
  ```

- **Change the computer name:**
  ```bash
  $ sudo systemsetup -setcomputername <computername>
  ```
  or
  ```bash
  $ sudo networksetup -setcomputername <computername>
  ```
  or
  ```bash
  $ sudo serversetup -setComputername <computername>
  ```

- **Validate a computer name:**
  ```bash
  $ serversetup -verifyComputername <computername>
  ```

- **Display the server’s local host name:**
  ```bash
  $ serversetup -getHostname
  ```

- **Change the server’s local host name:**
  ```bash
  $ sudo serversetup -setHostname <hostname>
  ```

- **Display the server’s Rendezvous name:**
  ```bash
  $ serversetup -getRendezvousname
  ```

- **Change the server’s Rendezvous name:**
  ```bash
  $ sudo serversetup -setRendezvousname <rendezvousname>
  ```
  The command displays `0` if the name was changed.

  **Note:** If you use the Server Admin GUI application to connect to a server using its Rendezvous name, then change the server’s Rendezvous name, you will need to reconnect to the server the next time you open the Server Admin application.

## Working With Disks and Volumes

### Mounting and Unmounting Volumes
- **Mount volumes:**
  You can use the `mount` command with parameters appropriate to the type of file system you want to mount, or use one of these file-system-specific mount commands:
  - `mount_afp` for Apple File Protocol (AppleShare) volumes
  - `mount_cd9660` for ISO 9660 volumes
  - `mount_cddafs` for CD Digital Audio format (CDDA) volumes
  - `mount_hfs` for Apple Hierarchical File System (HFS) volumes
  - `mount_msdos` for PC MS-DOS volumes
  - `mount_nfs` for Network File System (NFS) volumes
  - `mount_smbfs` for Server Message Block (SMB) volumes
  - `mount_udf` for Universal Disk Format (UDF) volumes
  - `mount_webdav` for Web-based Distributed Authoring and Versioning (WebDAV) volumes

- **Unmount volumes:**
  ```bash
  $ umount <volume>
  ```

### Checking for Disk Problems
- **Check the physical condition and file system integrity of a volume:**
  ```bash
  $ diskutil verifyVolume <volume>
  ```
  or
  ```bash
  $ fsck_hfs <volume>
  ```

### Monitoring Disk Space
- **Enable diskspacemonitor:**
  ```bash
  $ sudo diskspacemonitor on
  ```
  You may be prompted for your password. For more information, type `man diskspacemonitor`.

- **Configuration file:**
  - The configuration file is `/etc/diskspacemonitor/diskspacemonitor.conf`.
  - By default, disks are checked every 10 minutes, an alert script is executed when disks are 75% full, and a recovery script is executed when disks are 85% full.
  - To edit the configuration file, log in as an administrator and use a text editor to open the file. See the comments in the file for additional information.

- **Default action scripts:**
  - The default alert script is `/etc/diskspacemonitor/action/alert`. It sends email to recipients you specify.
  - The default recovery script is `/etc/diskspacemonitor/action/recover`.
  - You can provide your own alert and recovery scripts by placing them in `/etc/diskspacemonitor/action/alert.local` and `/etc/diskspacemonitor/action/recovery.local`, respectively.

- **Configure scripts remotely:**
  - Open a Terminal window and log in to the remote server using SSH.

### Reclaiming Disk Space Using Log Rolling Scripts
- **Predefined scripts:**
  - Three predefined scripts are executed automatically to reclaim space used on your server for log files generated by various services.
  - The scripts use values in the following configuration files to determine whether and how to reclaim space:
    - `/etc/periodic/daily/600.daily.server` (runs daily, configuration file: `/etc/diskspacemonitor/daily.server.conf`)
    - `/etc/periodic/weekly/600.weekly.server` (intended to run weekly, currently empty, configuration file: `/etc/diskspacemonitor/weekly.server.conf`)
    - `/etc/periodic/monthly/600.monthly.server` (intended to run monthly, currently empty, configuration file: `/etc/diskspacemonitor/monthly.server.conf`)

- **Define thresholds in the configuration files:**
  - The number of megabytes a log file must contain before its space is reclaimed.
  - The number of days since a log file’s last modification that need to pass before its space is reclaimed.

- **Configure scripts remotely:**
  - Open a Terminal window and log in to the remote server using SSH. Then open a text editor and edit the scripts.

### Managing Disk Journaling
- **Check if journaling is enabled:**
  ```bash
  $ mount
  ```
  Look for `journaled` in the attributes in parentheses following a volume.

- **Enable journaling:**
  ```bash
  $ diskutil enableJournal <volume>
  ```
  **Important:** Always check the volume for disk errors using the `fsck_hfs` command before enabling journaling.

- **Enable journaling when erasing a disk:**
  ```bash
  $ newfs_hfs -J -v <volname> <device>
  ```

- **Disable journaling:**
  ```bash
  $ diskutil disableJournal <volume>
  ```

### Erasing, Partitioning, and Formatting Disks
- **Partition, erase, or format a disk:**
  ```bash
  $ diskutil <command> <parameters>
  ```
  For more information, see the man page.

- **Format a Mac OS Extended volume as case-sensitive HFS+:**
  ```bash
  $ sudo diskutil eraseVolume "Case-sensitive HFS+" <newvolname> <volume>
  ```

  **Parameters:**
  - `newvolname`: The name given to the reformatted, case-sensitive volume.
  - `volume`: The path to the existing volume to be reformatted (e.g., `/Volumes/HFSPlus`).

### Imaging and Cloning Volumes Using ASR
- **Copy a disk image onto a volume or prepare existing disk images with checksum information for faster copies:**
  - ASR can perform file copies (individual files are restored unless an identical file is already there) and block copies (restores entire disk images).
  - You must run ASR as the root user or with `sudo` root permissions. You cannot use ASR on read/write disk images.

- **Image a boot volume:**
  1. Install and configure macOS on the volume as desired.
  2. Restart from a different volume.
  3. Ensure the volume has permissions enabled.
  4. Use `hdiutil` to make a read-write disk image of the volume.

  ```bash
  $ hdiutil create -src /path/to/volume -format UDRW -o /path/to/image
  ```

This comprehensive guide should help you manage your network preferences and disk management tasks effectively.