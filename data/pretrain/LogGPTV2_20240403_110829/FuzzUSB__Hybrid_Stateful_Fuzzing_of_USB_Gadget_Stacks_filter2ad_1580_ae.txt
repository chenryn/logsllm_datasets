### USB Stack Emulation and Fuzzing System

#### Introduction
USB stacks typically lack a software-emulated bridge between the host and gadget stacks. To address this, we developed a hardware bridge emulation from scratch to handle underlying UDC (USB Device Controller) hardware and establish a virtual connection from the USB host. This setup enabled us to apply our fuzzing system, equipped with a stateful input mutation engine, to FreeBSD gadgets.

#### Experimental Setup
Using 7 different gadgets, we conducted experiments under the same mutation ruleset as described in §VI-B. Notably, there is no explicit user-side input channel for FreeBSD gadget drivers, as they are self-contained without user-specified configurations. Therefore, our focus was on host channel fuzzing, guided by the extracted gadget state machines. We achieved this by adjusting the algorithm to recognize FreeBSD-specific transition and gadget entry functions, such as `usb_request_callback()`.

For comparison, we designed a basic FreeBSD gadget fuzzer as a baseline, using typical code coverage instead of stateful fuzzing, similar to G-FUZZER.

#### Evaluation
We evaluated several aspects of FUZZUSB on FreeBSD, specifically focusing on bug-finding efficiency and coverage. Similar to §A, we measured the detection time of a given bug (crash) compared to the baseline. Since there are no available bug reports for the FreeBSD gadgets in testing [47], we introduced a known memory corruption security bug by reverting a commit that fixed it (i.e., a safety check against invalid memory access [43]).

As shown in Table VIII, FUZZUSB quickly led the executions to the bug, while the baseline could not discover the bug due to its stateless nature, which limits the exploration of deep code paths. Additionally, we conducted 50-hour fuzzing campaigns and collected execution coverage. The results, presented in Figure 16, show that FUZZUSB outperformed the baseline, achieving a 2.2× improvement in coverage. This performance improvement was particularly significant for large codebase gadgets, such as `eth`. These results highlight the advantage of state-aware fuzzing in FUZZUSB.

To further illustrate the impact of stateful input mutation, we demonstrated the coverage improvement rate during the first 5 minutes of execution. Figure 17 shows the mass gadget as an example and the average result for our targeted 7 FreeBSD USB gadgets. As expected, each state change contributed to a higher coverage increase, especially during the early stages of execution.

#### Takeaways
The evaluation demonstrates that FUZZUSB can be applied to other operating system kernels for USB gadget stack fuzzing, provided a software bridge is available to establish a virtual USB connection. The fact that no USB gadget bugs have been reported for FreeBSD, and our fuzzing did not find any, suggests efficient ways to reduce the attack surface of USB gadget stacks, such as:
1. Limiting the number of gadgets.
2. Simplifying the implementation of each gadget.
3. Disabling user-space configurations.

### Discussion

#### Bug Reproducibility
Among our new bug findings, many were race condition bugs. Approximately 30% of these could be reproduced deterministically, while the rest could not due to the non-deterministic nature of race conditions. This is a known issue with syzkaller, where reproducing programs often fail to reproduce bugs. One possible way to increase bug reproducibility is to record and replay the runtime state of a gadget driver within the kernel, which requires a unified design and implementation of a gadget state.

#### Optimal Mutation Strategy
As mentioned in §VI, we used fixed rules for stateful mutation in FUZZUSB by default, assuming they would maximize coverage extension. However, the optimal mutation strategy might be gadget-dependent and need to be adjusted over time based on the gadget's status. For example, complex gadgets with a large codebase, such as `mass_storage`, should be extensively targeted and fuzzed in the data communication phase to be more effective. We plan to explore this in future work.

#### Android USB Gadget Fuzzing
To fuzz Android-specific gadget drivers, we manually examined Android kernels from different OEMs and ported the unique drivers into the corresponding mainline kernels. Ideally, fuzzing an Android kernel directly within QEMU without any changes would be the best approach. Unfortunately, due to hardware diversity, we could not find one emulation environment supporting all different Android kernels. Consequently, existing Android USB fuzzing still relies on physical Android devices [48].

#### USB Gadget Stack Coverage
Although our focus has been on USB gadget drivers such as CDC, HID, and MSC, FUZZUSB covers the entire USB gadget stack, except for UDC drivers. To fuzz UDC drivers in a scalable manner, we need to emulate the physical layer of UDC hardware in QEMU, which currently only provides basic HCD hardware (e.g., xHCI) evaluation. Thus, current UDC driver fuzzing requires the corresponding hardware, such as a Raspberry Pi Zero or an Android phone [20].

#### USB Gadget Stacks in Other OSes
The USB gadget stack in the Linux kernel is widely used due to its adoption in Android and Embedded Linux. Besides Linux, we evaluated FUZZUSB with the USB gadget stack in the FreeBSD kernel to demonstrate the generality of our approach. We believe FUZZUSB is also applicable to other open-source gadget stacks, such as Zephyr [49] and Mbed [50], although it may require an emulation environment for the corresponding OS, a USB host environment, a virtual USB connection, and a means to collect code coverage from within the target OS.

#### Imprecise Static Analysis
Static analysis can potentially cause imprecise results, including false positives and false negatives. In our experiments, we did not observe specific problems caused by imprecise static analysis, as its scope is bounded within explicit gadget entry and transition points. We can mitigate these limitations by leveraging existing techniques aimed at reducing false positives [52, 53] or false negatives [54]. Symbolic analysis can also compensate for these limitations, as our path exploration is achieved through symbolic execution, allowing us to handle indirect branches as long as the corresponding function pointers are symbolically tainted.

### Related Work

#### USB Vulnerability Detection
Despite consistent efforts to reveal USB vulnerabilities, USB remains vulnerable to various attacks. Some approaches rely on hardware-based methods, while others use software emulated USB devices. Existing USB fuzzers, however, are not well-suited for fuzzing USB gadget stacks, as they do not account for the key features of USB protocols, such as multiple input channels and statefulness. FirmUSB [56] uses symbolic execution but does not tackle statefulness and multiple channel challenges effectively.

#### Stateful Fuzzing
Modern fuzzers often increase efficiency by considering the statefulness of programs under test. Commonly, OS kernel fuzzers try to resolve dependencies of system calls to generate better test cases. Despite these efforts, they cannot accurately represent the internal states of the target system, making stateful fuzzing less efficient. Known network protocol fuzzers or mobile application fuzzers also rely on stateful communication but require network traces or mobile communication logs to infer state machines. Our approach leverages USB states as an oracle specialized in USB gadget fuzzing, which existing works have not accomplished.

### Conclusion
In this paper, we present FUZZUSB, the first USB fuzzing technique for USB gadget systems. FUZZUSB achieves state-guided fuzzing upon gadget-specific state machines, effectively addressing the multi-channel and stateful nature of USB communication. FUZZUSB found 34 previously unknown vulnerabilities with security impacts in the latest Linux and Android kernels, outperforming baseline fuzzers with 3× higher code coverage, 50× improved bug-finding efficiency for Linux USB gadget stacks, 2× higher code coverage for FreeBSD USB gadget stacks, and reproducing known bugs that the baseline fuzzers could not detect.

### Acknowledgments
We thank the anonymous reviewers for their valuable comments and suggestions. This work was supported in part by ONR, NSF, and AFRL. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of our sponsors.

### References
[1]–[51] (References listed as in the original document)