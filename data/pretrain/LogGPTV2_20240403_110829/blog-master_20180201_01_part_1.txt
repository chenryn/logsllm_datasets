## PostgreSQL 11 preview - parallel hash (含hash JOIN , hash agg等) 性能极大提升  
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-02-01                                                             
### 标签                                                               
PostgreSQL , 并行哈希join , parall hash join    
----                                                               
## 背景     
两张较大的表做JOIN，并且经过WHERE条件筛选出来的量依旧很大时，通常PostgreSQL会选择HASH JOIN，提高JOIN的性能。  
PostgreSQL 11增加了一个重量级特性：  
并行哈希JOIN。  
https://commitfest.postgresql.org/16/871/  
拥有了这个特性，大表JOIN，或者过滤结果依旧很大的表JOIN，性能有了很大的提升。  
## 例子1 - 1000万 JOIN 1000万  
1、部署PostgreSQL 11，极简命令如下  
```  
wget https://ftp.postgresql.org/pub/snapshot/dev/postgresql-snapshot.tar.bz2  
tar -jxvf postgresql-snapshot.tar.bz2  
cd postgresql-11devel  
./configure --prefix=/home/digoal/pg11  
make world -j 128  
make install-world  
```  
2、一些参数  
```  
port = 9999     
max_connections = 1000  
unix_socket_directories = '.'  
tcp_keepalives_idle = 60  
tcp_keepalives_interval = 10  
tcp_keepalives_count = 10  
shared_buffers = 32GB  
dynamic_shared_memory_type = posix  
bgwriter_delay = 10ms  
effective_io_concurrency = 0  
max_worker_processes = 128  
max_parallel_workers_per_gather = 32  
parallel_leader_participation = on  
max_parallel_workers = 128  
synchronous_commit = off  
wal_buffers = 128MB  
wal_writer_delay = 10ms  
max_wal_size = 64GB  
min_wal_size = 16GB  
checkpoint_completion_target = 0.1  
random_page_cost = 1.0  
log_destination = 'csvlog'  
logging_collector = on  
log_directory = 'log'  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'  
log_file_mode = 0600  
log_truncate_on_rotation = on  
log_min_duration_statement = 0  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose             
log_lock_waits = on  
log_statement = 'ddl'  
log_timezone = 'PRC'  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'  
lc_monetary = 'C'  
lc_numeric = 'C'  
lc_time = 'C'  
default_text_search_config = 'pg_catalog.english'  
```  
3、测试，新建测试表。  
```  
create table tbl(id int, c1 int);  
```  
4、写入1000万数据。  
```  
insert into tbl select generate_series(1,10000000), random()*99;  
```  
5、自关联，统计。  
```  
alter table tbl set (parallel_workers =16);  
set parallel_tuple_cost =0;  
set parallel_setup_cost =0;  
set min_parallel_index_scan_size =0;  
set min_parallel_table_scan_size =0;  
set work_mem='64MB';  
```  
执行计划如下，可以明显的看到使用了并行HASH JOIN  
```  
postgres=# explain select t1.c1,count(*) from tbl t1 join tbl t2 using (id) group by t1.c1;  
                                                 QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=114753.97..114766.97 rows=100 width=12)  
   Group Key: t1.c1  
   ->  Sort  (cost=114753.97..114757.97 rows=1600 width=12)  
         Sort Key: t1.c1  
         ->  Gather  (cost=114667.82..114668.82 rows=1600 width=12)  
               Workers Planned: 16  
	       ->  Partial HashAggregate  (cost=114667.82..114668.82 rows=100 width=12)  
                     Group Key: t1.c1  
                     -- 并行HASH join  
		     ->  Parallel Hash Join  (cost=58310.47..111542.83 rows=624999 width=4)  
                           Hash Cond: (t1.id = t2.id)  
                           ->  Parallel Seq Scan on tbl t1  (cost=0.00..50497.99 rows=624999 width=8)  
                           ->  Parallel Hash  (cost=50497.99..50497.99 rows=624999 width=4)  
                                 ->  Parallel Seq Scan on tbl t2  (cost=0.00..50497.99 rows=624999 width=4)  
(13 rows)  
```  
执行耗时1.08秒。  
```  
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 using (id) group by t1.c1;  
 c1 | count    
----+--------  
  0 |  50362  
  1 | 101199  
  2 | 101405  
  3 | 100999  
......  
 96 | 100938  
 97 | 100857  
 98 | 101143  
 99 |  50964  
(100 rows)  
Time: 1083.172 ms (00:01.083)  
```  
### 对比PostgreSQL 10  
PostgreSQL 10未使用并行hash join。  
```  
postgres=# explain select t1.c1,count(*) from tbl t1 join tbl t2 using (id) group by t1.c1;  
                                              QUERY PLAN                                                
------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=421591.59..421604.59 rows=100 width=12)  
   Group Key: t1.c1  
   ->  Sort  (cost=421591.59..421595.59 rows=1600 width=12)  
         Sort Key: t1.c1  
         ->  Gather  (cost=421505.44..421506.44 rows=1600 width=12)  
               Workers Planned: 16  
               ->  Partial HashAggregate  (cost=421505.44..421506.44 rows=100 width=12)  
                     Group Key: t1.c1  
                     -- 普通HASH JOIN  
		     ->  Hash Join  (cost=308310.48..418380.44 rows=624999 width=4)  
                           Hash Cond: (t1.id = t2.id)  
                           ->  Parallel Seq Scan on tbl t1  (cost=0.00..50497.99 rows=624999 width=8)  
                           ->  Hash  (cost=144247.77..144247.77 rows=9999977 width=4)  
                                 ->  Seq Scan on tbl t2  (cost=0.00..144247.77 rows=9999977 width=4)  
(13 rows)  
```  
PostgreSQL 10耗时，5.39秒。  
```  
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 using (id) group by t1.c1;  
 c1 | count    
----+--------  
  0 |  50362  
  1 | 101199  
  2 | 101405  
  3 | 100999  
......  
 96 | 100938  
 97 | 100857  
 98 | 101143  
 99 |  50964  
(100 rows)  
Time: 5388.591 ms (00:05.389)  
```  
### 附录，完整执行计划  
1、PostgreSQL 11  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select t1.c1,count(*) from tbl t1 join tbl t2 using (id) group by t1.c1;  
                                                                             QUERY PLAN                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=114753.97..114766.97 rows=100 width=12) (actual time=1156.061..1156.476 rows=100 loops=1)  
   Output: t1.c1, count(*)  
   Group Key: t1.c1  
   Buffers: shared hit=5537  
   ->  Sort  (cost=114753.97..114757.97 rows=1600 width=12) (actual time=1156.050..1156.215 rows=1700 loops=1)  
         Output: t1.c1, (PARTIAL count(*))  
         Sort Key: t1.c1  
         Sort Method: quicksort  Memory: 128kB  
         Buffers: shared hit=5537  
         ->  Gather  (cost=114667.82..114668.82 rows=1600 width=12) (actual time=1148.423..1155.699 rows=1700 loops=1)  
               Output: t1.c1, (PARTIAL count(*))  
               Workers Planned: 16  
               Workers Launched: 16  
               Buffers: shared hit=5537  
               ->  Partial HashAggregate  (cost=114667.82..114668.82 rows=100 width=12) (actual time=1122.889..1122.905 rows=100 loops=17)  
                     Output: t1.c1, PARTIAL count(*)  
                     Group Key: t1.c1  
                     Buffers: shared hit=88544  
                     Worker 0: actual time=1120.803..1120.819 rows=100 loops=1  
                       Buffers: shared hit=5267  
                     Worker 1: actual time=1120.839..1120.855 rows=100 loops=1  
                       Buffers: shared hit=5161  
                     Worker 2: actual time=1128.183..1128.206 rows=100 loops=1  
                       Buffers: shared hit=5127  
                     Worker 3: actual time=1120.921..1120.937 rows=100 loops=1  
                       Buffers: shared hit=5235  
                     Worker 4: actual time=1120.903..1120.919 rows=100 loops=1  
                       Buffers: shared hit=5128  
                     Worker 5: actual time=1120.841..1120.857 rows=100 loops=1  
                       Buffers: shared hit=5093  
                     Worker 6: actual time=1120.843..1120.860 rows=100 loops=1  
                       Buffers: shared hit=5175  
                     Worker 7: actual time=1120.838..1120.854 rows=100 loops=1  
                       Buffers: shared hit=5214  
                     Worker 8: actual time=1120.897..1120.913 rows=100 loops=1  
                       Buffers: shared hit=5138  
                     Worker 9: actual time=1120.780..1120.797 rows=100 loops=1  
                       Buffers: shared hit=5225  
                     Worker 10: actual time=1120.862..1120.878 rows=100 loops=1  
                       Buffers: shared hit=5160  
                     Worker 11: actual time=1121.021..1121.037 rows=100 loops=1  
                       Buffers: shared hit=5188  
                     Worker 12: actual time=1120.787..1120.803 rows=100 loops=1  
                       Buffers: shared hit=5247  
                     Worker 13: actual time=1120.927..1120.943 rows=100 loops=1  
                       Buffers: shared hit=5244  
                     Worker 14: actual time=1120.854..1120.870 rows=100 loops=1  
                       Buffers: shared hit=5166  
                     Worker 15: actual time=1121.003..1121.019 rows=100 loops=1  
                       Buffers: shared hit=5239  
                     ->  Parallel Hash Join  (cost=58310.47..111542.83 rows=624999 width=4) (actual time=485.581..1006.858 rows=588235 loops=17)  
                           Output: t1.c1  
                           Hash Cond: (t1.id = t2.id)  
                           Buffers: shared hit=88544  
                           Worker 0: actual time=483.955..1002.826 rows=595058 loops=1  
                             Buffers: shared hit=5267  
                           Worker 1: actual time=483.904..1006.660 rows=583532 loops=1  
                             Buffers: shared hit=5161  
                           Worker 2: actual time=483.905..1013.057 rows=582628 loops=1  
                             Buffers: shared hit=5127  
                           Worker 3: actual time=483.992..1003.798 rows=594784 loops=1  
                             Buffers: shared hit=5235  
                           Worker 4: actual time=484.062..1004.845 rows=581724 loops=1  
                             Buffers: shared hit=5128  
                           Worker 5: actual time=483.918..1006.055 rows=576074 loops=1  
                             Buffers: shared hit=5093  
                           Worker 6: actual time=484.048..1005.659 rows=586470 loops=1  
                             Buffers: shared hit=5175  
                           Worker 7: actual time=483.994..1001.889 rows=592346 loops=1  
                             Buffers: shared hit=5214  
                           Worker 8: actual time=484.006..1003.867 rows=583306 loops=1  
                             Buffers: shared hit=5138  
                           Worker 9: actual time=483.960..1003.685 rows=593250 loops=1  
                             Buffers: shared hit=5225  
                           Worker 10: actual time=483.950..1002.386 rows=584210 loops=1  