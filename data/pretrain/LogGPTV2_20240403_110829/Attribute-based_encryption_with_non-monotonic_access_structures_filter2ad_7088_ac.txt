=
=
=
= e (g2, g)sλi
Finally, the decryption is obtained by computing
E(1)Q
i∈I Z ωi
i
=
M e(g2, g)sα
e(g2, g)sα = M
Note on Eﬃciency. We note that encryption requires
only a single pairing, which may be pre-computed, regardless
of the number of attributes associated with a ciphertext.
We also note that decryption requires two or three pairings
per share utilized in decryption, depending on whether the
share corresponds to a non-negated attribute or a negated
attribute, respectively.
3.2 Amortizing the Cost of Multiple Systems
In practice we might actually have several diﬀerent
Attribute-Based Encryption systems run by diﬀerent au-
thorities.
In this setting we might want to minimize the
size of the public key material that users need to maintain,
since each authority will need to post its public key. We can
mitigate this cost by using a shared trusted party and apply-
ing a similar technique to that of the Broadcast Encryption
scheme of Boneh, Gentry, and Waters [8].
We ﬁrst observe that once the public key material is pub-
lished an authority only needs to know α in order to create
In addition, only one element, g1 = gα de-
private keys.
pends upon α. Therefore, a trusted party then can create
all public key material except g1. This public key material
will be shared across several diﬀerent systems. An authority
X that wishes to create his own system simply chooses his
own αX private key and creates a public key g1,X = gαX . A
user encrypting a ciphertext under this authority’s system
will use g1,X in addition to the shared public key material.
The added public key material for a whole new system is
just one group element.
3.3 Removing Fixed Attribute Restriction
The drawback of using our main construction directly in
a system is that it imposes a “one size ﬁts all” restriction
in that each ciphertext must have exactly d attributes. We
describe how to get around these restrictions and maintain
eﬃcient performance.
First, we note that a ciphertext will often be associated
with s attributes where s is less than d, the maximum num-
ber of attributes in our construction. A simple technique is
for the encryption algorithm to create d−s “ﬁller” attributes
for strings that have no semantic meaning in the system. For
a ciphertext with s real attributes, the encryption algorithm
can just add the attributes “Filler:1”,“Filler:2”,“Filler:
d − s”.
A more problematic issue is that a system will need to ac-
commodate ciphertexts that might have a large maximum,
n, number of attributes. This will mean that ciphertexts
with a relatively small number of attributes will have un-
necessarily high ciphertext overhead. To mitigate this issue
in a system we can use k diﬀerent constructions that respec-
tively accommodate d1, . . . , dk attributes. When encrypting
a ciphertext with s attributes the decryption algorithm will
simply use the encryption system with the smallest di such
that di ≥ s, and then only di − s ﬁller attributes will be
necessary.
Consider the case when there are a maximum of n at-
tributes for any ciphertext. For simplicity we assume n = 2k
for some k. Then we can create a system that uses k parallel
encryption systems, where encryption system i is set up for
di = 2i attributes. The aggregate system has performance
that compares favorably with existing systems: ciphertexts
for s attributes will have O(s) group elements, the public
key material will consist of O(n) group elements, and the
private keys for an access structure of t shares will have
O(t · lg(n)) group elements (a copy for each encryption sys-
tem) is kept. We point out that all these eﬃciency param-
eters, other than the private key size, are identical to the
less-expressive scheme of Goyal et al.4
3.4 Realizing Any Access Formula
Our main construction shows how to create private keys
that can be represented by any linear secret-sharing scheme
that uses both negative and non negative attributes. It is a
relatively straightforward exercise to show that these tech-
niques are powerful enough to express any access formula.
To do so, we ﬁrst use repeated applications of DeMorgan’s
law to transform any access formula into a monotonic one
with negative attributes. Then, we can represent the access
formula in terms of a secret-sharing scheme in a way simi-
lar to [16]. We leave the details of this transformation to
Appendix A.
3.5 Ciphertext-Policy ABE
We also note that our techniques can be applied to the
Ciphertext-Policy Attribute-Based Encryption (CP-ABE)
scheme of Bethencourt, Sahai, and Waters [4]. The pri-
mary modiﬁcation is that the polynomial for the revocation
scheme will be embedded by the encryptor in the negated
nodes of the encryption policy. The attributes will then be
represented in the tree.
One disadvantage of the BSW scheme is that its proof is in
the generic group model. This stems from the fact that their
scheme allows for arbitrary access formulas in the ciphertext
policy. Since the challenge ciphertext policy may be bigger
than the public parameters, it is diﬃcult to “program” the
challenge ciphertext into the public parameters. However,
for more restricted CP-ABE schemes that are less expressive
there exists schemes proved on concrete assumptions. The
original threshold scheme of Sahai and Waters [21] was writ-
ten before the distinction of Key-Policy versus Ciphertext-
4This claim applies to the Large Universe scheme of Goyal
et al. that does not use the random oracle heuristic. The
authors noted that in the random oracle model they can
reduce the public parameter size.
Policy was made explicit; however, it can be interpreted
in either way. Using the Sahai-Waters large-universe con-
struction we can realize a non-monotonic CP-ABE scheme
with k-of-n threshold policies, where n is ﬁxed and k can be
determined by the encryptor by using “dummy attributes”.
Pirretti et al. [19] show tradeoﬀs that can be made between
key and ciphertext sizes.
4. PROOF OF SECURITY
We prove that the security of our main construction in the
attribute-based selective-set model reduces to the hardness
of the Decisional BDH assumption.
Theorem 1. If an adversary can break our scheme with
advantage  in the attribute-based selective-set model of se-
curity, then a simulator can be constructed to play the De-
cisional BDH game with advantage /2.
Proof:
Suppose there exists a polynomial-time adversary A that
can attack our scheme in the selective-set model with advan-
tage . We build a simulator B that can play the Decisional
BDH game with advantage /2. The simulation proceeds as
follows:
We ﬁrst let the challenger set the groups G and GT with an
eﬃcient bilinear map, e. The challenger ﬂips a fair binary
coin µ, outside of B’s view.
If µ = 0, the challenger sets
(g, A, B, C, Z) = (g, ga, gb, gc, e(g, g)abc); otherwise, it sets
(g, A, B, C, Z) = (g, ga, gb, gc, e(g, g)z) for random a, b, c, z.
Init The simulator B runs A. A chooses the challenge set,
γ, a set of d members of Z∗
p.
Setup The simulator assigns the public parameters g1 = A
and g2 = B, thereby implicitly setting α = a and β = b. It
then chooses a random degree d polynomial f (x) and ﬁxes
a degree d polynomial u(x) as follows: set u(x) = −xd for
all x ∈ γ and u(x) 6= −xd for some (arbitrary) other x /∈ γ.
Because −xd and u(x) are two degree d polynomials, they
will have at most d points in common or they are the same
polynomial. This construction ensures that ∀x, u(x) = −xd
if and only if x ∈ γ.
The simulator will now implicitly set the polynomials h
and q as follows: First, h(x) = βu(x) + f (x). Now, let’s
write γ = {x1, x2, . . . , xd}. Then, the simulator chooses d
points θx1 , . . . , θxd uniformly at random from Zp, and im-
plicitly sets q(x) such that q(0) = β, while q(xi) = θxi for
i = 1, 2, . . . , d. Thus, the simulator outputs the following
group elements for the public key: For i = 1, . . . , d, it sets
outputs gq(i) by interpolation in the exponent using {θxi}
and B. For i = 0, 1, . . . , d, it sets gh(i) = gu(i)
gf (i). Observe
that these values are (jointly) distributed identically to their
distribution in the actual scheme. Note that implicitly we
have T (x) = gxd+u(x)
Phase 1 A adaptively makes requests for several access
structures such that γ passes through none of them. Suppose
A makes a request for the secret key for an access structure
˜A where ˜A(γ) = 0. Note that by assumption, ˜A is given as
N M (A) for some monotonic access structure A, over a set P
of parties (whose names will be attributes), associated with
a linear secret-sharing scheme Π.
gf (x).
2
2
Let M be the share-generating matrix for Π: Recall, M
is a matrix over Zp with ‘ rows and n + 1 columns. For
all i = 1, . . . , ‘, the i’th row of M is labeled with a party
named ˘xi ∈ P, where xi is the attribute underlying ˘xi. Note
that ˘xi can be primed (negated) or unprimed (non-negated).
When we consider the column vector v = (s, r1, r2, . . . , rn),
where s is the secret to be shared, and r1, . . . , rn ∈ Zp are
randomly chosen, then M v is the vector of ‘ shares of the
secret s according to Π.
We make use of the following well-known observation about
linear secret-sharing schemes (see, e.g. [2]5): If S ⊂ P is a
set of parties, then these parties can reconstruct the secret iﬀ
the column vector (1, 0, 0, . . . , 0) is in the span of the rows
of MS, where MS is the submatrix of M containing only
those rows that are labeled by a party in S. Note that since
˜A(γ) = 0, we know that A(γ0) = 0, where γ0 = N (γ). Thus,
we know that (1, 0, . . . , 0) is linearly independent of the rows
of Mγ0 .
During key generation, a secret sharing of the secret α = a
is supposed to be selected. In this simulation, however, we
will choose this sharing (implicitly) in a slightly diﬀerent
manner, as we describe now: First, we pick a uniformly
random vector v = (v1, . . . , vn+1) ∈ Zn+1
. Now, we make
use of the following simple proposition [1, 20] from linear
algebra:
p
Proposition 1. A vector π is linearly independent of a
set of vectors represented by a matrix N if and only if there
exists a vector w such that N w = ~0 while π · w = 1.
Since (1, 0, . . . , 0) is independent of Mγ0 , there exists a vec-
tor w = (w1, . . . , wn+1) such that Mγ0 w = ~0 and (1, 0, . . . , 0)·
w = w1 = 1. Such a vector can be eﬃciently computed [1,
20]. Now we deﬁne the vector u = v + (a − v1)w. (Note
that u is distributed uniformly subject to the constraint that
u1 = a.) We will implicitly use the shares ~λ = M u. This
has the property that for any λi such that ˘xi ∈ γ0, we have
that λi = Miu = Miv has no dependence on a.
Now that we have established how to distribute shares to
“parties”, which map to negated or non negated attributes,
we need to show how to generate the key material.
corresponding to negated parties ˘xi = x0
deﬁnition, ˘xi ∈ γ0 if and only if xi /∈ γ.
We ﬁrst describe how to generate decryption key material
i. Note that by
• If xi ∈ γ, then since ˘xi /∈ γ0, we have that λi may
depend linearly on a. However, by the simulator’s
choices at setup, recall that q(xi) = θxi . The simu-
i ∈ Zp at random, and implicitly
lator now chooses r0
sets ri = −λi + r0
i = gr0
Di = (D(3)
i. Thus, it outputs the following:
i = gθxi·(−λi+r0
2 , D(4)
i), D(5)
i = g
−λi+r0
i )
i
Note that the simulator can compute the latter two of
these elements using A.
• If xi /∈ γ, then since ˘xi ∈ γ0, we have that λi is inde-
pendent of any secrets and is completely known to the
simulator. In this case, the simulator chooses ri ∈ Zp
at random, and outputs the following:
Di = (D(3)
i = gλi+ri
2
, D(4)
i = V (xi)ri , D(5)
i = gri )
5Here, we are essentially exploiting the equivalence between
linear secret-sharing schemes and monotone span programs,
as proven in [2]. The proof in [2] is for a slightly diﬀerent
formulation, but applies here as well.
Note that the simulator can compute the second ele-
ment using B; indeed V () is publicly computable given
the public parameters already produced by the simu-
lation.
We now describe how to give key material corresponding
to non negated parties ˘xi = xi. The simulated key construc-
tion techniques for non negated parties is similar to previous
work [16, 21].
• If xi ∈ γ, then since λi has no dependence on any
unknown secrets, we simply choose ri ∈ Zp, and output
Di = (D(1)
2 · T (xi)ri , D(2)
i = gri ).
i = gλi
• If xi /∈ γ, then we work as follows: Let g3 = gλi .
Note that the simulator can compute g3 using A and g.
i ∈ Zp at random, and output the components
Choose r0
of Di as follows:
−f(xi)
xd
+u(xi)
i
3
−1
+u(xi)
= g
= g
xd
i
3
D(1)
i
D(2)
i
gf (xi))r0
i
i +u(xi)
2
(gxd
gr0
i
The proof of the following claim can be found in Ap-
pendix B.
Claim 1. The simulation above produces valid decryption
keys, that are furthermore distributed identically to the de-
cryption keys that would have been produced by the ABE
scheme for the same public parameters.