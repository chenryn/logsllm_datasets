Figure7: (a)PerformancenumbersforC-Storebyqueryflightwithvariousoptimizationsremoved. Thefourlettercodeindicates
theC-Storeconfiguration: T=tuple-at-a-timeprocessing, t=blockprocessing; I=invisiblejoinenabled, i=disabled; C=compression
enabled,c=disabled;L=latematerializationenabled,l=disabled.(b)AverageperformancenumbersforC-Storeacrossallqueries.
sionsthatuse“getNext”. Weonlynoticedasignificantdifference orderstogetthefulladvantageofcompression(onlyonecolumn–
intheperformanceofselectionoperationsusingthismethod. theorderdatecolumn–issorted,andtwootherssecondarilysorted
Figure7(a)showsdetailed,per-queryresultsofsuccessivelyre- –thequantityanddiscountcolumns). Thecolumnsinthefactta-
movingtheseoptimizationsfromC-Store,withaveragesacrossall blethatareaccessedbytheSSBMqueriesarenotverycompress-
SSBM queries shown in Figure 7(b). Block-processing can im- ible if they do not have order to them, since they are either keys
proveperformanceanywherefromafactorofonly5%to50%de- (whichhavehighcardinality)orarerandomvalues.Thefirstquery
pendingonwhethercompressionhasalreadybeenremoved(when flight,whichaccesseseachofthethreecolumnsthathaveorderto
compressionisremoved, theCPUbenefitsofblockprocessingis them,demonstratestheperformancebenefitsofcompressionwhen
not as significant since I/O becomes a factor). In other systems, queriesaccesshighlycompressibledata. Inthiscase,compression
suchasMonetDB/X100,thataremorecarefullyoptimizedforblock- resultsinanorderofmagnitudeperformanceimprovement. This
processing[9],onemightexpecttoseealargerperformancedegra- isbecauserunsofvaluesinthethreeorderedcolumnscanberun-
dationifthisoptimizationwereremoved. lengthencoded(RLE).Notonlydoesrun-lengthencodingyielda
Theinvisiblejoinimprovesperformanceby50-75%. SinceC- goodcompressionratioandthusreducedI/Ooverhead,butRLEis
Storeusesthesimilar“late-materializedjoin”techniqueintheab- alsoverysimpletooperateondirectly(forexample,apredicateor
sence of the invisible join, this performance difference is largely anaggregationcanbeappliedtoanentirerunatonce).Theprimary
due to the between-predicate rewriting optimization. There are sortcolumn, orderdate, onlycontains2405uniquevalues, andso
manycasesintheSSBMwherethebetween-predicaterewritingop- theaveragerun-lengthforthiscolumnisalmost25,000. Thiscol-
timizationcanbeused.Inthesuppliertable,theregion,nation,and umntakesuplessthan64Kofspace.
citycolumnsareattributesofincreasinglyfinergranularity,which, The other significant optimization is late materialization. This
as described in Section 5.4, result in contiguous positional result optimizationwasremovedlastsincedataneedstobedecompressed
setsfromequalitypredicateapplicationonanyofthesecolumns. inthetupleconstructionprocess,andearlymaterializationresults
The customer table has a similar region, nation, and city column in row-oriented execution which precludes invisible joins. Late
trio.Theparttablehasmfgr,category,andbrandasattributesofin- materializationresultsinalmostafactorofthreeperformanceim-
creasinglyfinergranularity.Finally,thedatetablehasyear,month, provement. Thisisprimarilybecauseoftheselectivepredicatesin
anddayincreasingingranularity. EveryqueryintheSSBMcon- someoftheSSBMqueries. Themoreselectivethepredicate,the
tainoneormorejoins(allbutthefirstqueryflightcontainsmore morewastefulitistoconstructtuplesatthestartofaqueryplan,
thanonejoin),andforeachquery,atleastoneofthejoinsiswith sincesucharetuplesimmediatelydiscarded.
adimensiontablethathadapredicateononeofthesespecialtypes Notethatoncealloftheseoptimizationsareremoved,thecolumn-
ofattributes. Hence,itwaspossibletousethebetween-predicate storeactslikearow-store. Columnsareimmediatelystitchedto-
rewritingoptimizationatleastonceperquery. getherandafterthisisdone,processingisidenticaltoarow-store.
Clearly,themostsignificanttwooptimizationsarecompression Since this is the case, one would expect the column-store to per-
and late materialization. Compression improves performance by form similarly to the row-oriented materialized view cases from
almostafactoroftwoonaverage. However,asmentionedinSec- Figure5(bothinSystemXandinC-Store)sincetheI/Orequire-
tion5, wedonotredundantlystorethefacttableinmultiplesort ments and the query processing are similar – the only difference
12
50
40 )sdnoces(
30
20
emiT
10
0
1.1 1.2 1.3 2.1 2.2 2.3 3.1 3.2 3.3 3.4 4.1 4.2 4.3 AVG
Base 0.4 0.1 0.1 5.7 4.2 3.9 11.0 4.4 7.6 0.6 8.2 3.7 2.6 4.0
PJ, No C 0.4 0.1 0.2 32.9 25.4 12.1 42.7 43.1 31.6 28.4 46.8 9.3 6.8 21.5
PJ, Int C 0.3 0.1 0.1 11.8 3.0 2.6 11.7 8.3 5.5 4.1 10.0 2.2 1.5 4.7
PJ, Max C 0.7 0.2 0.2 6.1 2.3 1.9 7.3 3.6 3.9 3.2 6.8 1.8 1.1 3.0
Figure8:ComparisonofperformanceofbaselineC-StoreontheoriginalSSBMschemawithadenormalizedversionoftheschema.
Denormalizedcolumnsareeithernotcompressed(“PJ,NoC”),dictionarycompressedintointegers(“PJ,IntC”),orcompressedas
muchaspossible(“PJ,MaxC”).
is the necessary tuple-construction at the beginning of the query this(the“PJ,IntC”caseinFigure8),theperformancedifference
plans for the column store. Section 6.1 cautioned against direct between the baseline and the denormalized cases became much
comparisonswithSystemX,butbycomparingthesenumberswith smaller. Nonetheless, for quite a few queries, the baseline case
the“CSRow-MV”casefromFigure5,weseehowexpensivetuple stillperformedfaster.Thereasonsforthisaretwofold.First,some
constructioncanbe(itaddsalmostafactorof2).Thisisconsistent SSBM queries have two predicates on the same dimension table.
withpreviousresults[5]. Theinvisiblejointechniqueisabletosummarizetheresultofthis
doublepredicateapplicationasasinglepredicateontheforeignkey
attributeinthefacttable. However,forthedenormalizedcase,the
6.3.3 ImplicationsofJoinPerformance
predicatemustbecompletelyappliedtobothcolumnsinthefact
In profiling the code, we noticed that in the baseline C-Store table(rememberthatfordatawarehouses,facttablesaregenerally
case,performanceisdominatedinthelowerpartsofthequeryplan muchlargerthandimensiontables,sopredicateapplicationsonthe
(predicate application) and that the invisible join technique made facttablearemuchmoreexpensivethanpredicateapplicationson
joinperformancerelativelycheap. Inordertoexplorethisobser- thedimensiontables).
vationfurtherwecreatedadenormalizedversionofthefacttable Second,manyquerieshaveapredicateononeattributeinadi-
where the fact table and its dimension table are pre-joined such mensiontableandgroupbyadifferentattributefromthesamedi-
that instead of containing a foreign key into the dimension table, mensiontable.Fortheinvisiblejoin,thisrequiresiterationthrough
thefacttablecontainsallofthevaluesfoundinthedimensiontable theforeignkeycolumnoncetoapplythepredicate,andagain(af-
repeatedforeachfacttablerecord(e.g., allcustomerinformation terallpredicatesfromalltableshavebeenappliedandintersected)
is contained in each fact table tuple corresponding to a purchase toextractthegroup-byattribute. ButsinceC-Storeusespipelined
made by that customer). Clearly, this complete denormalization execution,blocksfromtheforeignkeycolumnwillstillbeinmem-
would be more detrimental from a performance perspective in a oryuponthesecondaccess.Inthedenormalizedcase,thepredicate
row-storesincethiswouldsignificantlywidenthetable. However, columnandthegroup-bycolumnareseparatecolumnsinthefact
inacolumn-store,onemightthinkthiswouldspeedupread-only tableandbothmustbeiteratedthrough,doublingthenecessaryI/O.
queriessinceonlythosecolumnsrelevantforaqueryneedtoread Infact,manyoftheSSBMdimensiontablecolumnsthatareac-
in,andjoinswouldbeavoided. cessedinthequerieshavelowcardinality,andcanbecompressed
Surprisingly, we found this often not to be the case. Figure 8 into values that are smaller than the integer foreign keys. When
comparesthebaselineC-Storeperformancefromtheprevioussec- usingcompleteC-Storecompression,wefoundthatthedenormal-
tion(usingtheinvisiblejoin)withtheperformanceofC-Storeon izationtechniquewasusefulmoreoften(shownasthe“PJ,MaxC”
thesamebenchmarkusingthreeversionsofthesingledenormal- caseinFigure8).
izedtablewherejoinshavebeenperformedinadvance.Inthefirst Theseresultshaveinterestingimplications.Denormalizationhas
case, complete strings like customer region and customer nation longbeenusedasatechniqueindatabasesystemstoimprovequery
areincludedunmodifiedinthedenormalizedtable. Thiscaseper- performance, by reducing the number of joins that must be per-
formsafactorof5worsethanthebasecase. Thisisbecausethe formed at query time. In general, the school of wisdom teaches
invisiblejoinconvertspredicatesondimensiontableattributesinto thatdenormalizationtradesqueryperformanceformakingatable
predicatesonfacttableforeignkeyvalues. Whenthetableisde- wider,andmoreredundant(increasingthesizeofthetableondisk
normalized,predicateapplicationisperformedontheactualstring and increasing the risk of update anomalies). One might expect
attributeinthefacttable.Inbothcases,thispredicateapplicationis thatthistradeoffwouldbemorefavorableincolumn-stores(denor-
thedominantstep.However,apredicateontheintegerforeignkey malizationshouldbeusedmoreoften)sinceoneofthedisadvan-
canbeperformedfasterthanapredicateonastringattributesince tagesofdenormalization(makingthetablewider)isnotproblem-
theintegerattributeissmaller. aticwhenusingacolumn-orientedlayout. However,theseresults
Of course, the string attributes could have easily been dictio- showtheexactopposite: denormalizationisactuallynotveryuse-
naryencodedintointegersbeforedenormalization. Whenwedid
13
fulincolumn-stores(atleastforstarschemas).Thisisbecausethe [5] D.J.Abadi,D.S.Myers,D.J.DeWitt,andS.R.Madden.
invisible join performs so well that reducing the number of joins Materializationstrategiesinacolumn-orientedDBMS.In
viadenormalizationprovidesaninsignificantbenefit. Infact, de- ICDE,pages466–475,2007.
normalization only appears to be useful when the dimension ta- [6] A.Ailamaki,D.J.DeWitt,M.D.Hill,andM.Skounakis.
ble attributes included in the fact table are sorted (or secondarily Weavingrelationsforcacheperformance.InVLDB,pages
sorted)orareotherwisehighlycompressible. 169–180,2001.
[7] D.S.Batory.Onsearchingtransposedfiles.ACMTrans.
7. CONCLUSION DatabaseSyst.,4(4):531–544,1979.
[8] P.A.BernsteinandD.-M.W.Chiu.Usingsemi-joinsto
Inthispaper,wecomparedtheperformanceofC-Storetoseveral
solverelationalqueries.J.ACM,28(1):25–40,1981.
variantsofacommercialrow-storesystemonthedatawarehous-
[9] P.Boncz,M.Zukowski,andN.Nes.MonetDB/X100:
ing benchmark, SSBM. We showed that attempts to emulate the
Hyper-pipeliningqueryexecution.InCIDR,2005.
physicallayoutofacolumn-storeinarow-storeviatechniqueslike
vertical partitioning and index-only plans do not yield good per- [10] P.A.BonczandM.L.Kersten.MILprimitivesforquerying
afragmentedworld.VLDBJournal,8(2):101–119,1999.
formance. Weattributethisslownesstohightuplereconstruction
costs,aswellasthehighper-tupleoverheadsinnarrow,vertically [11] G.Graefe.Volcano-anextensibleandparallelquery
partitionedtables.Webrokedownthereasonswhyacolumn-store evaluationsystem.6:120–135,1994.
isabletoprocesscolumn-orienteddatasoeffectively,findingthat [12] G.Graefe.Efficientcolumnarstorageinb-trees.SIGMOD
latematerializationimprovesperformancebyafactorofthree,and Rec.,36(1):3–6,2007.
thatcompressionprovidesaboutafactoroftwoonaverage,oran [13] A.Halverson,J.L.Beckmann,J.F.Naughton,andD.J.
order-of-magnitudeonqueriesthataccesssorteddata.Wealsopro- Dewitt.AComparisonofC-StoreandRow-Storeina
posedanewjointechnique,calledinvisiblejoins,thatfurtherim- CommonFramework.TechnicalReportTR1570,University
provesperformancebyabout50%. ofWisconsin-Madison,2006.
The conclusion of this work is not that simulating a column- [14] S.Harizopoulos,V.Liang,D.J.Abadi,andS.R.Madden.
store in a row-store is impossible. Rather, it is that this simu- Performancetradeoffsinread-optimizeddatabases.In
lation performs poorly on today’s row-store systems (our experi- VLDB,pages487–498,2006.
mentswereperformedonaveryrecentproductreleaseofSystem [15] S.Harizopoulos,V.Shkapenyuk,andA.Ailamaki.QPipe:a
X).Asuccessfulcolumn-orientedsimulationwillrequiresomeim- simultaneouslypipelinedrelationalqueryengine.In
portantsystemimprovements, suchasvirtualrecord-ids, reduced SIGMOD,pages383–394,2005.
tupleoverhead,fastmergejoinsofsorteddata,run-lengthencoding
[16] S.Khoshafian,G.Copeland,T.Jagodis,H.Boral,and
acrossmultipletuples,andsomecolumn-orientedqueryexecution
P.Valduriez.Aqueryprocessingstrategyforthe
techniqueslikeoperatingdirectlyoncompresseddata,blockpro- decomposedstoragemodel.InICDE,pages636–643,1987.
cessing,invisiblejoins,andlatematerialization.Someoftheseim-
[17] P.O’NeilandG.Graefe.Multi-tablejoinsthrough
provementshavebeenimplementedorproposedtobeimplemented
bitmappedjoinindices.SIGMODRec.,24(3):8–11,1995.
invariousdifferentrow-stores[12,13,20,24];however,buildinga
[18] P.E.O’Neil,X.Chen,andE.J.O’Neil.AdjoinedDimension
completerow-storethatcantransformintoacolumn-storeonwork-
ColumnIndex(ADCIndex)toImproveStarSchemaQuery
loadswherecolumn-storesperformwellisaninterestingresearch
Performance.InICDE,2008.
problemtopursue.
[19] P.E.O’Neil,E.J.O’Neil,andX.Chen.TheStarSchema
Benchmark(SSB).http:
8. ACKNOWLEDGMENTS //www.cs.umb.edu/∼poneil/StarSchemaB.PDF.
WethankStavrosHarizopoulosforhiscommentsonthispaper, [20] S.Padmanabhan,T.Malkemus,R.Agarwal,and
andtheNSFforfundingthisresearch, undergrants0704424and A.Jhingran.Blockorientedprocessingofrelationaldatabase
0325525. operationsinmoderncomputerarchitectures.InICDE,2001.
[21] R.Ramamurthy,D.Dewitt,andQ.Su.Acaseforfractured
9. REPEATABILITYASSESSMENT mirrors.InVLDB,pages89–101,2002.
[22] M.Stonebraker,D.J.Abadi,A.Batkin,X.Chen,
Allfigurescontainingnumbersderivedfromexperimentsonthe
M.Cherniack,M.Ferreira,E.Lau,A.Lin,S.R.Madden,
C-Storeprototype(Figure7a,Figure7b,andFigure8)havebeen
E.J.O’Neil,P.E.O’Neil,A.Rasin,N.Tran,andS.B.
verifiedbytheSIGMODrepeatabilitycommittee. WethankIoana
Zdonik.C-Store:AColumn-OrientedDBMS.InVLDB,
Manolescuandtherepeatabilitycommitteefortheirfeedback.
pages553–564,2005.
[23] A.Weininger.Efficientexecutionofjoinsinastarschema.
10. REFERENCES InSIGMOD,pages542–545,2002.
[24] J.ZhouandK.A.Ross.Bufferingdatabseoperationsfor
[1] http://www.sybase.com/products/
enhancedinstructioncacheperformance.InSIGMOD,pages
informationmanagement/sybaseiq.
191–202,2004.
[2] TPC-HResultHighlightsScale1000GB.
[25] M.Zukowski,P.A.Boncz,N.Nes,andS.Heman.
http://www.tpc.org/tpch/results/
MonetDB/X100-ADBMSInTheCPUCache.IEEEData
tpch result detail.asp?id=107102903.
EngineeringBulletin,28(2):17–22,June2005.
[3] D.J.Abadi.Queryexecutionincolumn-orienteddatabase
[26] M.Zukowski,S.Heman,N.Nes,andP.Boncz.Super-Scalar
systems.MITPhDDissertation,2008.PhDThesis.
RAM-CPUCacheCompression.InICDE,2006.
[4] D.J.Abadi,S.R.Madden,andM.Ferreira.Integrating
compressionandexecutionincolumn-orienteddatabase
systems.InSIGMOD,pages671–682,2006.
14