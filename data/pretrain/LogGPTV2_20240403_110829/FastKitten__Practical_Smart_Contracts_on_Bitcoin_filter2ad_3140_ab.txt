ecution using TEEs. While Ekiden focuses on solutions
over Ethereum, it does not require a powerful scripting lan-
guage of the underlying blockchain technology – just like
FASTKITTEN. Despite the conceptual similarities of Ekiden
and FASTKITTEN, the goals of these systems are orthogonal.
Ekiden aims at moving heavy smart contract execution off
the chain in order to reduce the cost of executing complex
contract functions. In contrast, FASTKITTEN focuses on efﬁ-
cient off-chain execution of multi-round contracts between a
set of parties. Importantly, we require our system to natively
handle coins of the underlying blockchain. A joint goal of
both systems is to provide state privacy of the contracts.
Ekiden considers clients (contract parties) and computing
nodes which have a similar task as FASTKITTEN’s TEE oper-
ator since they also execute contracts inside a TEE. In contrast
to FASTKITTEN, Ekiden sends the encryption of the resulting
contract state to the blockchain after every function call. If
a client requests another function call, a selected computing
node takes the state from the blockchain, decrypts it inside
its enclave and performs the contract execution. This implies
that reactive multi-round contracts are very costly even in the
standard case when all participating parties are honest (c.f.
column “Minimal # TX” in Table 1).
Ekiden relies on multiple TEEs and guarantees service avail-
ability as long as at least one TEE is controlled by an honest
computing node. We note in Section 9.2 that fault tolerance
can be integrated into FASTKITTEN in a straightforward way.
Additionally, Ekiden aims to achieve forward secrecy even if a
small fraction of TEEs gets corrupted via, e.g., a side-channel
attack. Their strategy is to secret-share a long-term secret key
between the TEEs and use it to generate a short-term secret
key every “epoch”. Hence, an attacker learning the short-term
key can only decrypt state from the current epoch. While
side-channel attacks are out of scope of this work, note that
FASTKITTEN can achieve forward secrecy of states in case
of side-channel attacks using the same mechanism as Ekiden.
An important part of the FASTKITTEN construction is the
fair distribution of coins through the enclave. Ekiden does
neither model nor discuss the handling of coins. It is not
straightforward to add this feature to their model since the
contract state is encrypted and hence the money cannot be
unlocked automatically on-chain.
3 Design
FASTKITTEN allows a set of n users P1, . . . ,Pn to execute an
arbitrary complex smart contract over a decentralized cryp-
tocurrency that only supports very simple scripts. Concretely,
FASTKITTEN considers cryptocurrencies that, in addition to
supporting simple transactions between users, offer so-called
time-locked transactions. A transaction is time-locked if it
is only processed and integrated into the blockchain after a
certain amount of time has passed. Moreover, FASTKITTEN
requires that transactions contain space for storing arbitrary
raw data. We emphasize that these are very mild require-
ments on the underlying cryptocurrency that, for instance,
are satisﬁed by the most prominent cryptocurrency Bitcoin.1
FASTKITTEN leverages these properties together with the
power of trusted execution environments to provide an efﬁ-
cient general-purpose smart contract execution platform.
As discussed in the introduction, a contract is a program
that handles coins according to some—possibly complex—
program logic. In this work, we consider n-party contracts,
which are run among a group of parties P1, . . . ,Pn and have
the following structure. During the initialization phase, the
contract receives coins from the parties and some initial in-
1Bitcoin transactions can store up to 97 KB of data [44]; multiple trans-
actions can be used for bigger payloads.
USENIX Association
28th USENIX Security Symposium    803
puts. Next, it runs for m reactive rounds, where in each round
the contract can receive additional inputs from the parties Pi,
and produces an output. Finally, after the m-th round is com-
pleted the contract pays out the coins to the parties according
to its ﬁnal state and terminates.
A key feature of FASTKITTEN is very low execution cost and
high performance compared to contract execution over cryp-
tocurrencies such as Ethereum. This is achieved by not exe-
cuting contracts by all parties maintaining the cryptocurrency
but instead running the contract within a TEE which could,
e.g., be owned and operated by a single service provider which
we call the operator Q. In the standard case when all parties
are honest, FASTKITTEN runs the entire contract off-chain
within the enclave and only needs to touch the blockchain dur-
ing contract initialization and ﬁnalization. More concretely,
during initialization, the parties transfer their coins to the en-
clave by time-locking coins with deposit transactions, while
at the end of ﬁnalization the enclave produces transactions
that transfer coins back to the users according to the results of
the contract execution. These transactions are called output
transactions and can be published by the users of the system
to receive their coins.
3.1 Design Challenges of FASTKITTEN
Leveraging TEEs for building a general-purpose contract
execution platform requires us to resolve the following main
challenges.
Protection against malicious operator. The operator runs
the TEE and hence controls its interaction with the environ-
ment (e.g., with other parties or the blockchain). Thus, the
operator can abort the execution of the TEE, delay and change
inputs, or drop any ingoing or outgoing message. To protect
honest users from such an operator, the enclave program run-
ning inside the TEE must identify such malicious behavior
and punish the operator. In particular, we require that even
if the TEE execution is aborted, all parties must be able to
get their coins refunded eventually. To achieve this, we let the
operator create a so-called penalty transaction: the penalty
transaction time-locks coins of the operator, which in case of
misbehavior can be used to refund the users and punish the
operator.
Note that designing such a scheme for punishment is highly
non-trivial. Consider a situation where party Pi was supposed
to send a message x to the contract. From the point of view
of the enclave that runs the contract, it is not clear whether
the operator was behaving maliciously and did not forward
a message to the enclave, or, e.g., party Pi did not send the
required message to the operator. To resolve this conﬂict,
we leverage a challenge-response mechanism carried out via
the blockchain. We emphasize that this challenge-response
mechanism is only required when parties are malicious, and
typically will not be executed often due to the high ﬁnancial
costs for an adversary.
Veriﬁcation of blockchain evidence. To ensure that a ma-
licious operator cannot make up false blockchain evidence,
we need to design a secure blockchain validation algorithm
which can efﬁciently be executed inside a TEE. We achieve
this by simplifying the veriﬁcation process typically carried
out by full blockchain nodes by using a checkpoint block to
serve as the initial starting point for veriﬁcation. This drasti-
cally reduces blockchain veriﬁcation time in comparison to
veriﬁcation starting from the genesis block. To further speed
up the transaction veriﬁcation, we only validate correctness of
block headers. Finally, when the TEE needs to verify whether
a certain transaction was integrated into a block, we set a mini-
mum number of blocks that must conﬁrm a transaction as part
of the security parameter within our protocol. This guarantees
that faking a valid-looking chain is computationally infea-
sible for a malicious operator. Finally, it is computationally
infeasible for a malicious operator to load a fake (but valid-
looking) chain into the enclave before the penalty transaction
is published on the blockchain.
Minimizing blockchain interaction. Since blockchain in-
teractions are expensive, FASTKITTEN only requires interac-
tion with the blockchain in the initialization and ﬁnalization
phases if all parties follow the protocol. As already discussed
above, however, in case of malicious behavior FASTKITTEN
may require additional interaction with the blockchain for con-
ﬂict resolution. This is required to allow the TEE to attribute
malicious behavior either to the operator or to some other
participant Pi that provides input to the contract. We achieve
this through a novel challenge-response protocol, where the
TEE will ask the operator to challenge Pi via the blockchain.
The operator can then either deliver a proof that he challenged
Pi via the blockchain but did not receive a response, in which
case Pi will get punished; or the operator receives Pi’s input
and can continue with the protocol.
Of course, this challenge-response protocol adds to the worst-
case execution time of our system, and additionally will result
in fees for blockchain interaction. To address the latter, our
protocol ensures that both parties involved in the challenge-
response mechanism have to split the fees resulting from
blockchain interaction equally.2 This incentivizes honest be-
havior if parties aim to maximize their personal proﬁts.
Preventing denial of service attacks. Complex smart con-
tracts may take a very long time to complete, and in the
worst case not terminate. Hence, a malicious party may carry
out a denial-of-service attack against the contract execution
platform, where the platform is asked to execute a contract
that never halts. It is well known that determining whether a
program terminates is undecidable. Hence, general-purpose
contract platforms, such as Ethereum, mitigate this risk by
letting users pay via fees for every step of the contract execu-
tion. This effectively limits the amount of computation that
2In the cryptocurrency community, this is often referred to as grieﬁng
factor 1 : 1, meaning that for every coin spent by the honest users on fees the
adversary is required to also spend one coin.
804    28th USENIX Security Symposium
USENIX Association
per with it. Further, the enclave will sign and hash all code
and data as part of its attestation towards parties, so they
can verify correctness of the setup before placing deposits.
To support arbitrary contract functionality, FASTKITTEN in-
cludes a scripting engine inside the enclave and several helper
libraries, such as the Crypto library to generate and verify
transactions, and an Interface library to pass data between
host process and enclave. The individual contracts are loaded
into the FASTKITTEN enclave during the initialization of
our protocol by the underlying host process and participants
can verify that contracts are loaded correctly. Our protocol
then proceeds in three phases, which we call setup phase,
round computation, and ﬁnalization phase. Figure 1 depicts
the architecture of the FASTKITTEN framework.
During the setup phase (Steps 1 – 3 ) the contract is loaded
into the enclave. Using the TEE’s attestation functionality,
all parties P1, . . . ,Pn can verify that this step was completed
correctly. Then the operator and all parties block their coins
for the contract execution. If any party aborts in this phase, the
money is refunded to all parties that deposited money and the
protocol stops. Otherwise, all parties receive a time-locked
penalty transaction, needed in case Q aborts the protocol.
Afterwards, the round computation phase (Step 4 ) starts, in
which Q sends the previous round’s output to all parties. If
a party Pi receives such an output, which is correctly signed
by the enclave, it signs and sends the input for the following
round to Q. If all parties behave honestly, Q will forward
the received round inputs to the enclave, which computes the
outputs for the next round. In case that the enclave does not
receive an input from party Pi the enclave needs to determine
whether Pi failed to send its input or if Q behaved maliciously
(e.g., by dropping the message). Therefore, the enclave will
punish Q unless it can prove, that it sent the last round output
to Pi but did not receive a response. This proof is generated via
the blockchain: Q publicly challenges Pi to respond with the
input for the next round by posting the output of the previous
round to the blockchain. As soon as this challenge transaction
is conﬁrmed, Pi needs to respond publicly by spending the
coins of the challenge transaction and include its input for
the next round. If Pi responds, Q can extract Pi’s input and
continue with the protocol execution. If Pi did not respond, Q
forwards the respective blocks as a transcript to the enclave,
to prove that Pi misbehaved.3 So, while a malicious party (or
the operator) can force this on-chain challenge-response pro-
cedure without direct punishment, posting these transactions
will also act against its own ﬁnancial interests by extending
the time lock of its own coins and leading to transaction fees.
Nevertheless, such malicious behavior cannot prevent the fair
termination of our protocol.
The last phase of the protocol is the payout phase (Step 5 ). In
3Alternatively, we could allow the operator to spend the challenge transac-
tion after a timeout has passed. While this would result in easier veriﬁcation
for the TEE, the operator would need to publish an additional transaction,
increasing both fees and the overall time for the challenge-response phase.
Figure 1: Architecture of the FASTKITTEN Smart Contract
Execution Platform. Dashed arrows indicate interaction with
the blockchain and non-dashed arrows depict communication
between parties.
can be carried out by the contract. Since FASTKITTEN allows
multiple parties to provide input to the contract in the same
round, it might be impossible to decide which party (parties)
caused the denial of service and should pay the fee. To this
end, FASTKITTEN protects against such denial-of-service at-
tacks using a time-out mechanism. As all users of the system
(including the operator) have to agree on the contract to be ex-
ecuted, we assume that this agreement includes a limit on the
maximum amount of execution steps that can be performed
inside the enclave per one execution round. See Section 6.5
for more details.
3.2 Architecture and Protocol
To enable secure off-chain contract execution, our architecture
builds on existing TEEs, which are widely available through
commercial off-the-shelf hardware. In particular, our archi-
tecture can be implemented using Intel’s Software Guard
Extensions (SGX) [4, 29, 45] which is a prominent TEE in-
stantiation built into most recent Intel processors. SGX in-
corporates a set of new instructions to create, control and
communicate with enclaves. While enclaves are part of a
legacy host process, SGX enforces strict isolation of compu-
tation and memory between enclave and host process on the
hardware level. Another prominent instantiation of the TEE
concept is ARM TrustZone [6], which provides similar func-
tionality for mobile devices. We note that only the operator Q
is required to own TEE-enabled hardware.
As depicted in Figure 1, our FASTKITTEN Execution Facility
is run by the operator Q and consists of a host process and an
enclave. The untrusted host process takes care of setting up
the enclave with an initial conﬁg, handles the participant con-
nections, and blockchain communication over the network.
While this means that Q has complete control over these parts,
the inﬂuence of a malicious operator on a running enclave
is limited: he can interrupt enclave execution, but not tam-
USENIX Association
28th USENIX Security Symposium    805
FASTKITTEN Execution PlatformEnclavejSmartContract1FASTKITTEN2CryptoInterface ParticipantsTEEScripting Engine534OperatorGrapheneHost ProcessInitial ConfigParticipantConnection BlockchainB0BlockB1Blockthis phase the enclave returns the output transaction generated