原文 : 
# 介绍
这篇博文详细介绍了Ruby编程语言的任意反序列化漏洞，并公开发布了第一个通用工具链来实现Ruby
2.x的任意命令执行。下面将详细介绍反序列化问题和相关工作，发现可用的漏洞利用链，最后利用ruby序列化。
# 背景
[序列化](https://en.wikipedia.org/wiki/Serialization)是将对象转换成一系列字节的过程，这些字节可以通过网络传输，也可以存储在文件系统或数据库中。这些字节包括重构原始对象所需的所有相关信息。这种重建过程称为反序列化。每种编程语言都有自己独特的序列化格式。有些编程语言使用序列化/反序列化之外的名称来引用这个过程。在Ruby中，常用的术语是marshalling和unmarshalling。
Marshal类具有"dump"和"load"的类方法，可以使用如下方式:
图一:Marshal.dump和Marshal.load的用法:
    $ irb
    >> class Person
    >>   attr_accessor :name
    >> end
    => nil
    >> p = Person.new
    => #
    >> p.name = "Luke Jahnke"
    => "Luke Jahnke"
    >> p
    => #
    >> Marshal.dump(p)
    => "\x04\bo:\vPerson\x06:\n@nameI\"\x10Luke Jahnke\x06:\x06ET"
    >> Marshal.load("\x04\bo:\vPerson\x06:\n@nameI\"\x10Luke Jahnke\x06:\x06ET")
    => #
# 不可信数据反序列化的问题
当开发人员错误地认为攻击者无法查看或篡改序列化的对象(因为它是不透明的二进制格式)时，就会出现常见的安全漏洞。这可能导致向攻击者公开对象中存储的任何敏感信息，例如凭证或应用程序密钥。在序列化对象具有实例变量的情况下，它还经常导致特权升级，实例变量随后用于权限检查。例如，一个用户对象，它包含一个用户名实例变量，该变量是序列化的，可能会被攻击者篡改。修改序列化数据并将username变量更改为更高特权用户的用户名(如"admin")是很容易的。虽然这些攻击可能很强大，但它们对上下文非常敏感，从技术角度看也不令人兴奋，本文将不再对此进行进一步讨论。
代码重用攻击也可能发生在已经可用的代码片段(称为gadget)被执行以执行不想要的操作(如执行任意系统命令)时。由于反序列化可以将实例变量设置为任意值，因此攻击者可以控制gadget操作的一些数据。这还允许攻击者使用一个gadget
chain调用第二个gadget chain，因为经常调用存储在实例变量中的对象。当一系列的小玩意以这种方式连在一起时，就叫做工具链。
# 以前的payloads
不安全反序列化在OWASP的2017年十大最关键的Web应用程序安全风险排行榜上排名第八，但是关于为Ruby构建工具链的详细信息却很少公布。然而，在攻击Ruby
on Rails应用程序的Phrack论文中可以找到一个很好的参考，Phenoelit的joernchen在2.1节中描述了一个由Charlie
Somerville发现的工具链，它可以实现任意的代码执行。为了简洁起见，这里不再介绍该技术，但是前提条件如下。
  * 必须安装并加载ActiveSupport gem
  * 标准库中的ERB必须加载(默认情况下Ruby不加载)
  * 反序列化之后，必须在反序列化对象上调用不存在的方法
虽然这些先决条件几乎肯定会在任何Ruby on Rails web应用程序的上下文中实现，但其他Ruby应用程序很少能实现这些先决条件。
所以，挑战已经被扔出来了。我们可以绕过所有这些先决条件，并实现任意代码执行吗?
# 寻找gadgets
由于我们想要创建一个没有依赖关系的gadget链，gadget只能从标准库中获取。应该注意的是，不是所有的标准库都默认加载。这大大限制了我们可以使用的利用链的数量。例如，对Ruby
2.5.3进行了测试，发现默认情况下加载了358个类。虽然这似乎很多，但仔细观察发现，这些类中有196个没有定义任何自己的实例方法。这些空类中的大多数都是用于区分可捕获异常的
**Exception** 的唯一命名继承。
可用类的数量有限，这意味着找到能够增加加载的标准库数量的gadget或技术是非常有益的。一种技术是查找在调用时需要另一个库的gadget。这很有用，因为即使require似乎在某个模块和/或类的范围内，它实际上也会影响全局命名空间。
图二:调用require方法的示例(lib/rubygems.rb)
    module Gem
    ...
      def self.deflate(data)
        require 'zlib'
        Zlib::Deflate.deflate data
      end
    ...
    end
如果上面的Gem.deflate方法包含在gadget链中，那么将加载Ruby标准库中的Zlib库，如下所示:
图三:全局名称空间被污染的演示
    $ irb
    >> Zlib
    NameError: uninitialized constant Zlib
    ...
    >> Gem.deflate("")
    => "x\x9C\x03\x00\x00\x00\x00\x01"
    >> Zlib
    => Zlib
虽然标准库动态加载标准库的其他部分的例子有很多，但有一个实例指出，如果在系统上安装了第三方库，就会尝试加载它，如下所示:
图4:从加载第三方RBTree库(lib/set.rb)的标准库中分类的集合
    ...
    class SortedSet < Set
    ...
      class << self
    ...
        def setup
    ...
              require 'rbtree'
下面的图显示了在需要未安装的库(包括其他库目录)时要搜索的位置的示例。
图5:当Ruby试图在没有安装RBTree的默认系统上加载RBTree时，strace的输出示例:
    $ strace -f ruby -e 'require "set"; SortedSet.setup' |& grep -i rbtree | nl
         1  [pid    32] openat(AT_FDCWD, "/usr/share/rubygems-integration/all/gems/did_you_mean-1.2.0/lib/rbtree.rb", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 ENOENT (No such file or directory)
         2  [pid    32] openat(AT_FDCWD, "/usr/local/lib/site_ruby/2.5.0/rbtree.rb", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 ENOENT (No such file or directory)
         3  [pid    32] openat(AT_FDCWD, "/usr/local/lib/x86_64-linux-gnu/site_ruby/rbtree.rb", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 ENOENT (No such file or directory)
    ...
       129  [pid    32] stat("/var/lib/gems/2.5.0/gems/strscan-1.0.0/lib/rbtree.so", 0x7ffc0b805710) = -1 ENOENT (No such file or directory)
       130  [pid    32] stat("/var/lib/gems/2.5.0/extensions/x86_64-linux/2.5.0/strscan-1.0.0/rbtree", 0x7ffc0b805ec0) = -1 ENOENT (No such file or directory)
       131  [pid    32] stat("/var/lib/gems/2.5.0/extensions/x86_64-linux/2.5.0/strscan-1.0.0/rbtree.rb", 0x7ffc0b805ec0) = -1 ENOENT (No such file or directory)
       132  [pid    32] stat("/var/lib/gems/2.5.0/extensions/x86_64-linux/2.5.0/strscan-1.0.0/rbtree.so", 0x7ffc0b805ec0) = -1 ENOENT (No such file or directory)
       133  [pid    32] stat("/usr/share/rubygems-integration/all/gems/test-unit-3.2.5/lib/rbtree", 0x7ffc0b805710) = -1 ENOENT (No such file or directory)
       134  [pid    32] stat("/usr/share/rubygems-integration/all/gems/test-unit-3.2.5/lib/rbtree.rb", 0x7ffc0b805710) = -1 ENOENT (No such file or directory)
       135  [pid    32] stat("/usr/share/rubygems-integration/all/gems/test-unit-3.2.5/lib/rbtree.so", 0x7ffc0b805710) = -1 ENOENT (No such file or directory)
       136  [pid    32] stat("/var/lib/gems/2.5.0/gems/webrick-1.4.2/lib/rbtree", 0x7ffc0b805710) = -1 ENOENT (No such file or directory)
    ...
一个更有用的gadget是通过攻击者控制的参数来要求的。这个gadget将支持在文件系统上加载任意文件，从而提供标准库中的任何gadget的使用，包括查理•萨默维尔gadget链中使用的ERB
gadget。虽然没有识别出允许完全控制require参数的gadget，但是下面可以看到一个允许部分控制的gadget示例
图6:允许控制部分require参数的gadget(ext/digest/lib/digest.rb)
    module Digest
      def self.const_missing(name) # :nodoc:
        case name
        when :SHA256, :SHA384, :SHA512
          lib = 'digest/sha2.so'
        else
          lib = File.join('digest', name.to_s.downcase)
        end
        begin
          require lib
    ...
上面的示例无法使用，因为标准库中的任何Ruby代码都不会显式调用const_missing。这并不奇怪，因为const
_missing是一个hook方法，在定义时，当引用未定义的常量时将调用它。比如@object.\_ _send__(@method,
@argument)，允许用任意参数对任意对象调用任意方法，显然允许调用上面的const_missing方法。但是，如果我们已经有了这样一个强大的gadget，我们就不再需要增加可用gadget的集合，因为它只允许执行任意的系统命令。
const_missing方法也可以作为调用const_get的结果调用。Gem::Package类的摘要方法在文件lib/rubygems/
Package.rb文件中是一个合适的gadget，因为它在Digest模块上调用const_get(尽管任何上下文也可以工作)来控制参数。但是，const_get的默认实现对字符集执行严格的验证，从而防止在digest目录之外进行遍历。
另一种调用const_missing的方法是隐式地使用Digest::SOME_CONSTANT等代码。然而,Marshal.load不会以调用const_missing的方式执行常量解析。更多细节可以在Ruby问题[3511](https://bugs.ruby-lang.org/issues/3511)和[12731](https://bugs.ruby-lang.org/issues/12731)中找到。
另一个gadget也提供了对传递给require的参数的部分控制，如下所示：
    class Gem::CommandManager
      def [](command_name)
        command_name = command_name.intern
        return nil if @commands[command_name].nil?
        @commands[command_name] ||= load_and_instantiate(command_name)
      end
      private
      def load_and_instantiate(command_name)
        command_name = command_name.to_s
    ...
            require "rubygems/commands/#{command_name}_command"
    ...
        end
      end
    ...
由于"_command"后缀以及没有识别出允许截断(即使用空字节)的技术，上面的示例也无法利用。"_command"后缀确实存在一些文件中，但由于发现了增加可用gadgets的不同技术，因此没有进一步探讨这些文件。然而，一个感兴趣的研究者可能会发现在探索这个话题时进行的调查是很有趣的。
如下图所示，Rubygem库广泛使用了autoload方法：
图8:对autoload方法(lib/rubygems.rb)的大量调用
    module Gem
    ...
      autoload :BundlerVersionFinder, 'rubygems/bundler_version_finder'
      autoload :ConfigFile,         'rubygems/config_file'
      autoload :Dependency,         'rubygems/dependency'
      autoload :DependencyList,     'rubygems/dependency_list'
      autoload :DependencyResolver, 'rubygems/resolver'
      autoload :Installer,          'rubygems/installer'
      autoload :Licenses,           'rubygems/util/licenses'
      autoload :PathSupport,        'rubygems/path_support'
      autoload :Platform,           'rubygems/platform'
      autoload :RequestSet,         'rubygems/request_set'
      autoload :Requirement,        'rubygems/requirement'
      autoload :Resolver,           'rubygems/resolver'
      autoload :Source,             'rubygems/source'
      autoload :SourceList,         'rubygems/source_list'
      autoload :SpecFetcher,        'rubygems/spec_fetcher'
      autoload :Specification,      'rubygems/specification'
      autoload :Util,               'rubygems/util'
      autoload :Version,            'rubygems/version'
    ...
    end
autoload的工作方式与require类似，但只在首次访问已注册的常量时加载指定的文件。由于这种行为，如果这些常量中的任何一个包含在反序列化payload中，相应的文件将被加载。这些文件本身还包含require和autoload语句，进一步增加了可以提供有用gadget的文件数量。
虽然autoload预计不会在Ruby 3.0的未来版本中[继续使用](https://bugs.ruby-lang.org/issues/5653)，但是随着Ruby 2.5的发布，标准库中的使用增加了。在这个[git
commit](https://github.com/ruby/ruby/commit/ec7c76c446fcb7fafae2fa2f7eda78c2387fac23)中引入了使用autoload的新代码，可以在下面的代码片段中看到:
图9:Ruby 2.5中引入的自动加载的新用法(lib/uri/generic.rb)
    ObjectSpace.each_object do |clazz|
      if clazz.respond_to? :const_get
        Symbol.all_symbols.each do |sym|
          begin
            clazz.const_get(sym)
          rescue NameError
          rescue LoadError
          end
        end
      end
    end
在运行了上面的代码之后，我们对提供gadget的可用类数量进行了新的评估，发现加载了959个类，比之前的值358增加了658个。在这些类中，至少定义了511实例方法，这些改进为显著的改进了加载这些额外类的能力，我们可以开始搜索有用的gadgets了。
# 初始化/启动 gadgets
每个gadget链的开始都需要一个gadget，该gadget将在反序列化期间或反序列化之后自动调用。这是执行下一步gadget的初始入口点，最终目标是实现任意代码执行或其他攻击。
理想的初始gadget是由Marshal.load在反序列化时自动调用的。这消除了在反序列化后执行的代码进行防御检查和保护以防止恶意对象攻击的任何机会。我们怀疑在反序列化期间自动调用gadget是可能的，因为它是PHP等其他编程语言中的一个特性。在PHP中，如果类具有__wakeup定义的[魔术方法](https://secure.php.net/manual/en/language.oop5.magic.php#object.wakeup)，那么在反序列化此类对象时，它将立即被调用。阅读相关的[Ruby文档](https://ruby-doc.org/core-2.5.0/Marshal.html#module-Marshal-label-marshal_dump+and+marshal_load)可以发现，如果一个类定义了一个实例方法marshal_load，那么这个方法将在该类对象的反序列化时被调用。
使用此信息，我们检查每个加载的类，并检查它们是否具有marshal_load实例方法。这是通过以下代码编程实现的。
图10：用于查找所有定义了marshal_load的类的ruby脚本
    ObjectSpace.each_object(::Class) do |obj|
      all_methods = obj.instance_methods + obj.protected_instance_methods + obj.private_instance_methods
      if all_methods.include? :marshal_load
        method_origin = obj.instance_method(:marshal_load).inspect[/\((.*)\)/,1] || obj.to_s
        puts obj
        puts "  marshal_load defined by #{method_origin}"
        puts "  ancestors = #{obj.ancestors}"
        puts
      end
    end
# 剩余的gadgets
在研究过程中发现了许多gadget，但是在最终的gadget链中只使用了一小部分。为了简短起见，下面总结了一些有趣的内容:
图12：结合一个调用缓存方法的gadget链，这个gadget允许任意代码执行(lib/rubygems/source/gb.rb)
    class Gem::Source::Git < Gem::Source