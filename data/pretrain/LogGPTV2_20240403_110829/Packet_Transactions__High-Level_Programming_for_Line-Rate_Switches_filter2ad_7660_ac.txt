same state variable, e.g.,
the node
pair pkt.last_time
last_time[pkt.id] and
=
last_time[pkt.id] = pkt.arrival. Because of
preprocessing, all stateful operations are paired up as
read and write ﬂanks. Hence, there is no risk of a
“stranded” stateful operation.
3. Now, add stateless dependencies by adding an edge
from any node that writes a packet variable to any node
that reads the same packet variable, e.g., from pkt.tmp
= pkt.arrival - pkt.last_time to pkt.tmp2 =
pkt.tmp > THRESH in Figure 10a. We only check
read-after-write dependencies because write-after-read
and write-after-write dependencies don’t exist after
SSA, and we eliminate control dependencies [32]
5Conditional operations alone have four arguments.
through branch removal.
4. Generate strongly connected components (SCCs) of
this dependency graph and condense them into a di-
rected acyclic graph (DAG). This captures the notion
that all operations on a state variable must be conﬁned
to one codelet/atom because state cannot be shared be-
tween atoms. Figure 10b shows the DAG produced by
condensing Figure 10a.
5. Schedule the resulting DAG by creating a new pipeline
stage when one node depends on another. This results
in the codelet pipeline shown in Figure 3b.6
4.3 Code generation
To determine if a codelet pipeline can be compiled to a
Banzai machine, we consider two constraints speciﬁed by
any Banzai machine (§2.4). Resource limits specify the
number of atoms in a stage (pipeline width) and number of
stages (pipeline depth), while computational limits specify
the atom templates provided by a Banzai machine.
Resource limits. To handle resource limits, we scan each
pipeline stage in the codelet pipeline starting from the ﬁrst
to check for pipeline width violations.
If we violate the
pipeline width, we insert as many new stages as required and
spread codelets evenly across these stages. We continue un-
til the number of codelets in all stages is under the pipeline
width, rejecting the program if we exceed the pipeline depth.
Computational limits. Next, we determine if each codelet
in the pipeline can be mapped to atoms provided by the
Banzai machine. In general, codelets have multiple three-
address code statements that need to execute atomically. For
instance, updating the state variable saved_hop in Figure 3b
requires a read followed by a conditional write. It is not ap-
parent whether such codelets can be mapped to an available
atom. We develop a new technique to determine the imple-
mentability of a codelet, given an atom template.
Each atom template has a set of conﬁguration parameters,
where the parameters determine the atom’s behavior. For in-
stance, Figure 2a shows an atom that can perform stateful
addition or subtraction, depending on the conﬁguration pa-
rameters choice and constant. Each codelet can be viewed
as a functional speciﬁcation of the atom. With that in mind,
the mapping problem is equivalent to searching for values of
the atom’s conﬁguration parameters that result in the atom
implementing the codelet.
We use the SKETCH program synthesizer [59] for this
purpose, as the atom templates can be easily expressed us-
ing SKETCH. SKETCH also provides efﬁcient search algo-
rithms and has been used for similar purposes in other do-
mains [29, 30]. As an illustration, assume we want to map
the codelet x=x+1 to the atom template shown in Figure 2b.
SKETCH will search for possible parameter values so that
the resulting atom is functionally identical to the codelet,
for all possible input values of x up to a certain bound. In
this case, SKETCH ﬁnds the solution with choice=0 and
6We refer to this both as a codelet and an atom pipeline be-
cause codelets map one-to-one atoms (§4.3).
21
if (pkt.arrival - last_time[pkt.id] > THRESH) {
saved_hop [ pkt . id ] = pkt . new_hop ;
=⇒
}
pkt.tmp = pkt.arrival - last_time[pkt.id] > THRESH;
saved_hop [ pkt . id ] = pkt.tmp
// Rewritten
? pkt . new_hop
: saved_hop [ pkt . id ];
Figure 6: Branch removal
pkt . id = hash2 ( pkt . sport ,
pkt . dport )
% NUM_FLOWLETS ;
...
last_time[pkt.id] = pkt.arrival;
...
=⇒
pkt . id = hash2 ( pkt . sport ,
pkt . dport )
% NUM_FLOWLETS ;
// Read flank
pkt . last_time = last_time [ pkt . id ];
...
pkt.last_time = pkt.arrival;
...
last_time [ pkt . id ] = pkt . last_time ;
// Read flank
// Rewritten
// Write flank
Figure 7: Rewriting state variable operations
pkt.id = hash2 ( pkt . sport ,
pkt . dport )
% NUM_FLOWLETS ;
pkt.last_time = last_time [pkt.id];
...
pkt.last_time = pkt . arrival ;
last_time [pkt.id] = pkt.last_time;
=⇒
pkt.id0 = hash2 ( pkt . sport ,
pkt . dport )
% NUM_FLOWLETS ;
pkt.last_time0 = last_time [pkt.id0];
...
pkt.last_time1 = pkt . arrival ;
last_time [pkt.id0] = pkt.last_time1;
// Rewritten
// Rewritten
// Rewritten
// Rewritten
Figure 8: Converting to static single-assignment form
1
2
3
4
5
6
7
8
9
= hash2 ( pkt . sport , pkt . dport ) % NUM_FLOWLETS ;
pkt . id
= saved_hop [ pkt . id ];
pkt . saved_hop
= last_time [ pkt . id ];
pkt . last_time
= hash3 ( pkt . sport , pkt . dport , pkt . arrival ) % NUM_HOPS ;
pkt . new_hop
= pkt . arrival - pkt . last_time ;
pkt . tmp
= pkt . tmp > THRESH ;
pkt . tmp2
pkt . next_hop
= pkt . tmp2 ? pkt . new_hop : pkt . saved_hop ;
saved_hop [ pkt . id ] = pkt . tmp2 ? pkt . new_hop : pkt . saved_hop ;
last_time [ pkt . id ] = pkt . arrival ;
Figure 9: Flowlet switching in three-address code. Lines 1 and 4 are ﬂipped relative to Figure 3a because pkt.id is an array
index expression and is moved into the read ﬂank.
=⇒
(a) Stateless dependencies in black, stateful in gray.
(b) DAG after condensing SCCs.
Figure 10: Dependency graphs before and after condensing strongly connected components
22
pkt.next_hop = pkt.tmp2 ?                         pkt.new_hop :                         pkt.saved_hopsaved_hop[pkt.id] = pkt.tmp2?                                pkt.new_hop :                                pkt.saved_hoppkt.id = hash2(pkt.sport,                        pkt.dport)             % NUM_FLOWLETSpkt.last_time = last_time[pkt.id]pkt.tmp = pkt.arrival -pkt.last_timelast_time[pkt.id] = pkt.arrivalpkt.tmp2 = pkt.tmp > THRESHpkt.new_hop = hash3(pkt.sport,                                    pkt.dport,                                    pkt.arrival)                         % NUM_HOPSpkt.saved_hop = saved_hop[pkt.id]pkt.next_hop = pkt.tmp2 ?                         pkt.new_hop :                         pkt.saved_hopsaved_hop[pkt.id] = pkt.tmp2?                                pkt.new_hop :                                pkt.saved_hoppkt.id = hash2(pkt.sport,                        pkt.dport)             % NUM_FLOWLETSpkt.last_time = last_time[pkt.id]pkt.tmp = pkt.arrival -pkt.last_timelast_time[pkt.id] = pkt.arrivalpkt.tmp2 = pkt.tmp > THRESHpkt.new_hop = hash3(pkt.sport,                                    pkt.dport,                                    pkt.arrival)                         % NUM_HOPSpkt.saved_hop = saved_hop[pkt.id]Technique
Conversion to
straight-line
code
SSA
Strongly Con-
nected Compo-
nents
gener-
Code
ation
using
program syn-
thesis
Prior Work
If-
Conversion [23]
Differences
No backward control ﬂow (go-
tos, break, continue)
Cytron
al. [32]
Lam [48]
et
SSA runs on straight-line code
with no branches
Scheduling in space vs. time
Chlorophyll [53],
technology
mapping [49],
instruction
selection [20]
Optimal vs.
best-effort map-
ping, One-to-one mapping vs.
one-to-many mapping
Table 2: Domino’s compiler in relation to prior work
constant=1. In contrast, if the speciﬁcation is the codelet
x=x*x, SKETCH will return an error as no parameters exist.
Using program synthesis for code generation frees the
compiler developer from implementing custom code gener-
ators for different Banzai machines. Instead, the compiler
developer only has to express the Banzai machine’s atom
templates using SKETCH, and the SKETCH synthesizer au-
tomatically maps codelets to atoms.
4.4 Related compiler techniques
Table 2 shows the relationship between Domino’s compi-
lation techniques and prior work. The use of Strongly Con-
nected Components (SCCs) is inspired by software pipelin-
ing for VLIW architectures [48]. The size of the largest SCC
affects the maximum throughput of the pipelined loop in
software pipelining. For Domino, it affects the circuit area
of the atom required to run a program at line rate. Domino
trades off an increase in space for line-rate performance.
Program synthesis was used for code generation in
Chlorophyll [53]. Code generation for Domino also shares
similar goals to technology mapping [49] and instruction se-
lection [20]. However, prior work maps a code sequence to
multiple instructions/tiles, using heuristics to minimize in-
struction count. Domino’s problem is simpler: we map each
codelet to a single atom using SKETCH. The simpler prob-
lem allows a non-heuristic solution: if there is any way to
map the codelet to an atom, SKETCH will ﬁnd it.
Branch removal resembles If-Conversion [23], a tech-
nique used in vectorizing compilers. This procedure is eas-
ier in Domino because there is no backward control transfer
(goto, break, continue).
5. EVALUATION
We evaluate Domino’s expressiveness by using it to pro-
gram several data-plane algorithms (Table 3), and comparing
it to writing them in P4 (§5.1). To validate that these algo-
rithms can run at line rate, we design a concrete set of Banzai
machines (Table 4) as compiler targets for Domino (§5.2).
We estimate that these machines are feasible in hardware be-
cause their atoms incur modest chip area overhead. We use
the Domino compiler to compile the algorithms in Table 3 to
the targets in Table 4 (§5.3). We conclude with some lessons
for programmable switch design (§5.4).
23
5.1 Expressiveness
We program several data-plane algorithms (Table 3) us-
ing Domino. These algorithms encompass data-plane traf-
ﬁc engineering, in-network congestion control, active queue
management, network security, and measurement. We also
used Domino to express the priority computation for pro-
gramming scheduling using push-in ﬁrst-out queues [58].
In all these cases, the algorithms are already available
as blocks of imperative code from online sources; translat-
ing them to Domino syntax was straightforward.
In con-
trast, expressing any of them in P4 requires manually teasing
out portions of the algorithm that can reside in independent
match-action tables and then chaining these tables together.
Of the algorithms in Table 3, only ﬂowlet switching has a
publicly available P4 implementation [9] that we can com-
pare against. This implementation requires 231 lines of un-
commented P4, compared to only 37 lines of Domino code
in Figure 3a. Not only that, using P4 also requires the pro-
grammer to manually specify tables, the actions within ta-
bles, and how tables are chained—all to implement a sin-
gle data-plane algorithm. The Domino compiler automates
this process; to demonstrate this, we developed a backend
for Domino that generates the equivalent P4 code. We list
the number of lines of code for these auto-generated P4 pro-
grams in Table 3.
5.2 Compiler targets
We design a set of compiler targets for Domino based on
the Banzai machine model (§2). First, we describe how to
assess the feasibility of atoms: whether they can run at a 1
GHz clock frequency, and what area overhead they incur in
silicon. Next, we discuss the design of stateless and stateful
atoms separately. Finally, we discuss how these stateless and
stateful atoms are combined together in our compiler targets.
Atom feasibility. We synthesize a digital circuit correspond-
ing to an atom template by writing the atom template in Ver-
ilog, and using the Synopsys Design Compiler [7] to compile
the Verilog code. The Design Compiler checks if the result-
ing circuit meets timing at 1 GHz in a 32-nm standard-cell
library, and outputs its gate area. We use this gate area, along
with the area of a 200 mm2 baseline switching chip [40], to
estimate the area overhead for provisioning a Banzai ma-
chine with multiple instances of this atom.
Designing stateless atoms. Stateless atoms are easier to
design because arbitrary stateless operations can be broken
up into multiple pipeline stages without violating atomic-
ity (§2.3). We design a stateless atom that can support sim-
ple arithmetic (add, subtract, left shift, right shift), logical
(and, or, xor), relational (>=, <=, ==, !=), and conditional in-
structions (C’s “?” operator) on a pair of packet ﬁelds. Any
packet ﬁeld can also be substituted with a constant operand.
This stateless atom meets timing at 1 GHz and occupies an
area of 1384 µm2 (Table 4).
Designing stateful atoms. The choice of stateful atoms de-
termines the algorithms a line-rate switch can support. A
more complex stateful atom can support more data-plane al-
Algorithm
Stateful operations
Test/Set membership bit on every packet.
Bloom ﬁlter
(3 hash functions)
Heavy Hitters [63]
(3 hash functions)
Flowlets [57]
Increment Count-Min Sketch [31] on every
packet.
Update saved next hop if ﬂowlet threshold
is exceeded.
Accumulate RTT sum if
RTT is under maximum allowable RTT.
Sample a packet if packet count reaches N;
Reset count to 0 when it reaches N.
Update counter for virtual queue.
RCP [60]
Sampled
NetFlow [17]
HULL [22]
Adaptive
Virtual Queue [47] Update virtual queue size and virtual ca-
Priority
computa-
tion for weighted
fair queueing [58]
DNS TTL change
tracking [26]