title:Panoply: Low-TCB Linux Applications With SGX Enclaves
author:Shweta Shinde and
Dat Le Tien and
Shruti Tople and
Prateek Saxena
PANOPLY: Low-TCB Linux Applications
with SGX Enclaves
Shweta Shinde
National University of Singapore
PI:EMAIL
Dat Le Tien†
University of Oslo
dattl@iﬁ.uio.no
Shruti Tople
Prateek Saxena
National University of Singapore
National University of Singapore
PI:EMAIL
PI:EMAIL
Abstract—Intel SGX, a new security capability in emerging
CPUs, allows user-level application code to execute in hardware-
isolated enclaves. Enclave memory is isolated from all other
software on the system, even from the privileged OS or hypervi-
sor. While being a promising hardware-rooted building block,
enclaves have severely limited capabilities, such as no native
access to system calls and standard OS abstractions. These OS
abstractions are used ubiquitously in real-world applications.
In this paper, we present a new system called PANOPLY which
bridges the gap between the SGX-native abstractions and the
standard OS abstractions which feature-rich, commodity Linux
applications require. PANOPLY provides a new abstraction called a
micro-container (or a “micron”), which is a unit of code and data
isolated in SGX enclaves. Microns expose the standard POSIX
abstractions to application logic, including access to ﬁlesystems,
network, multi-threading, multi-processing and thread synchro-
nization primitives. Further, PANOPLY enforces a strong integrity
property for the inter-enclave interactions, ensuring that the
execution of the application follows the legitimate control and
data-ﬂow even if the OS misbehaves. Thus, commodity Linux
applications can enhance security by splitting their application
logic in one or more microns, or by importing micron-libraries,
with little effort. In contrast to previous systems that enable
comparable richness, PANOPLY offers two orders of magnitude
lower TCB (about 20 KLOC in total), more than half of which
is boiler-plate and can be automatically veriﬁed in the future.
We demonstrate how PANOPLY enables much stronger security
in 4 real-world applications — including Tor, OpenSSL, and web
services — which can base security on hardware-root of trust.
I.
INTRODUCTION
Privilege separation and isolation are cornerstones in de-
sign of secure computer systems. Machine isolation is used
for designing fault-tolerant network services, virtualization
for isolating OSes, library OSes and containers for isolat-
ing applications. However, these primitives trust a privileged
software component (e.g. a hypervisor or OS) for ensuring
their claimed security guarantees. For several decades, malware
†This work was done while the author was a visiting graduate intern at
National University of Singapore.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page.  Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23500
has been a threat to privileged software layer, often targeting
vulnerabilities in privileged code such as the OS. In this paper,
we envision providing the beneﬁts of privilege separation and
isolation based on a strong line of defense against OS-resident
malware. Such a defense is based on a new trusted computing
primitive, which can isolate a sensitive user-level application
from a compromised OS. Hardware support for this primitive
has become available in commodity CPUs in the form of
Intel SGX, which can run such hardware-isolated application
instances in enclaves [40]. Intel SGX provides a hardware-
isolated memory region which can be remotely attested. SGX
hardware supports execution of many enclaves simultaneously.
Recent research has demonstrated how to enforce useful
low-level guarantees using SGX — for instance, protection
of certain cryptographic keys in memory [30], [32], [42],
[44], [47], veriﬁable execution of code snippets [51], and
authenticated data delivery [56]. While these properties are
useful, their applicability has been limited to small, selected
pieces of application logic rather than end-to-end applications.
For larger, richer applications, the best known approache has
been to use library OSes [21], [52]. In such architectures, the
application is bundled together with a large TCB of millions
of lines of code, emulating the OS logic inside the enclave.
In this paper, we propose a new system called PANOPLY,
designed with an eye towards minimizing TCB and yet offering
rich OS abstractions to enclaved code. PANOPLY introduces
a new abstraction we call a micro-container (or “micron”
for short). A micron is a unit of application logic which
runs on the Intel SGX hardware enclaves — thus it offers
a strong isolation against an adversarial OS. Microns expose
the rich gamut of standard Linux abstractions to application
logic, much more expressiveness in enclave-bound code than
several previous systems (e.g. Haven). For instance, micron-
enabled logic can readily use multi-processing (fork-exec),
multi-threading, event registration / callbacks (e.g. signals), in
addition to supporting the standard Linux system calls.
PANOPLY prioritizes a minimal TCB over performance
as a goal. It uses a simple design philosophy of delegate-
rather-than-emulate that contrasts previous systems (e.g. li-
brary OSes). PANOPLY delegates the implementation of OS
abstractions to the underlying OS itself, rather than emulating
it inside the enclave. PANOPLY microns implement a small
set of checks which enables them to detect malicious re-
sponse from the OS, and abort if so. In line with this design
choice, unlike library OSes, PANOPLY does not “virtualize”
microns by giving them each their own namespace. This choice
eliminates a massive amount of namespace management logic
that emulates the underlying OS from the enclave TCB. With
these simple design principles, we show that the total TCB
of PANOPLY can be about 20 KLOC (apart from the original
application logic), which is 2 orders of magnitude smaller than
previous LibraryOS systems. We believe such TCB is within
realm of automated veriﬁcation in the near future.
A second feature of PANOPLY is that it enables a plug-
and-play architecture, wherein security architects can create
as many microns as needed and host them across multiple
OS processes. Such a design keeps compatibility with multi-
process and multi-threaded application designs — several
applications such as servers inherently use multiple processes
for security (e.g. for privilege separation), performance, as well
as for isolating crash failures (better availability). Security
architects can split monolithic applications across multiple
microns easily, or import security-sensitive libraries that are
implemented as microns. The PANOPLY architecture allows
analysts to partition application by adding modest amount
of annotation to source code and compiling with PANOPLY’s
infrastructure. PANOPLY instruments each micron to ensure
that all
inter-micron control and data-ﬂow interactions are
secured against the OS. In effect, PANOPLY ensures that an
application partitioned into multiple microns will either exe-
cute with the same control and data-ﬂow as the unpartitioned
original application, even under adversarial inﬂuence, or abort.
To achieve such a guarantee, we propose defenses that extend
beyond simple data tampering attacks (e.g. Iago attacks [26])
— our defenses enforce control and data-ﬂow integrity for
inter-enclave transitions, with freshness and authentication
guarantees built-in.
PANOPLY microns expose expressive OS abstractions to ap-
plication logic. To support these, we make several conceptual
advances in its design that are not offered by off-the-shelf Intel
SDKs for SGX [8]. First, microns expose the POSIX abstrac-
tion of creating threads on demand, dynamically requesting
as many threads as the application needs. Previous systems
have limited this design to a pre-determined number of static
threads executable in an enclave. PANOPLY runtime library
multiplexes a dynamic number of threads over multiple under-
lying enclaves. Second, PANOPLY proposes several designs for
supporting the semantics of fork-exec. PANOPLY allows
microns to be hosted across multiple OS processes. Third,
PANOPLY supports the pthreads synchronization interfaces,
which includes mutexes, barriers, and so on using SGX-
speciﬁc abstractions. Finally, as explained earlier, PANOPLY
automatically embeds checks at the micron interfaces, ensuring
that inter-enclave control and data-ﬂow conforms to that of the
original code.
Results. We show 4 case studies of real applications that
use expressive features. The ﬁrst case study is Tor, a popular
distributed anonymous communication service [11]. We show
how Tor can leverage PANOPLY micron to provide a strong
security for its directory service protocol, basing security on
the SGX hardware-root-of-trust. The second case study is on
a web-server called H2O, which can self-attest the correctness
/
integrity of the served content (e.g., such as in CDNs,
serving static content over HTTPS). We also support two case
studies of popular libraries, OpenSSL and FreeTDS, that can
be imported as microns in other host application. The libraries
can be secured to protect secret keys and provide higher-
level protocol guarantees for their host application beyond
key-protection. In all of our case studies, the porting effort
is modest, incurring average 905 lines of code changes.
We have compared PANOPLY application to a state-of-
the-art Linux library-OS called Graphene-SGX [3], [52] that
supports SGX hardware. First, PANOPLY applications have two
order of magnitude smaller TCB. Second, we ﬁnd that the
performance of the two on our case studies is comparable. We
provide a detailed breakdown of the performance overheads
on real hardware in both systems. We ﬁnd that most source
of overhead is from the Intel’s SDK, incurred for creating and
initializing empty enclaves. PANOPLY-speciﬁc code introduces
an additional average CPU overhead of 24%.
Contributions. In summary, we make the following contribu-
tions in this paper:
•
•
•
PANOPLY System. PANOPLY is the ﬁrst system which
supports applications with multi-threading, multi-
processing, event management in enclaves. Our inter-
micron ﬂow integrity ensures that
the applications
preserve the high-level guarantees.
Usage in real-world Applications. We retroﬁt 4 appli-
cations into PANOPLY architecture that require on an
average 905 lines of code changes.
Evaluation. After porting to PANOPLY, we report a
performance overhead of 24% and an average TCB in-
crease of 19.62 KLOC per application. In comparison
to previous systems, PANOPLY reduces the TCB by 2
orders of magnitude while lowering the performance
overhead by 5 − 10%.
II. PROBLEM
A. Background: Intel SGX Enclaves
Existing hardware-based / hypervisor-based defenses
against compromised OSes provide an isolated execution space
for executing user-level applications. In the case of SGX,
these are referred to as enclaves, and a single application
process can comprise of one or more enclaves. SGX assures
the conﬁdentiality and integrity of all the sensitive code and
data contained within an enclave. The Intel SGX SDK provides
a function call mechanism for SGX applications via ECALL
and OCALL. Speciﬁcally, an ECALL is a trusted function call
that enters an enclave and OCALL is an untrusted function call
that leaves an enclave [17]. Thus, a user-level application can
invoke code inside an enclave via an Enclave Call (ECALL)
and get the return values. The enclave can invoke an Outer
Call (OCALL) to execute a function in the untrusted portion of
the application and receive a return value. The enclave code
can access all the application memory outside whereas, the
non-enclave code cannot access the enclave’s memory. SGX
CPU supports local and remote attestation, so as to check if
the enclave has loaded the correct code. To this end, the CPU
computes a measurement by securely hashing the enclaves
initial state. Thus an entity can attest the measurement to verify
the initial state of the enclave conﬁrming that the initial state
is “clean” [18], [23]. The enclave is created and loaded as
expected without OS tampering.
2
1 session_t session;
2 certificate_credentials_t xcred;
3 /* Specify the callback function to be used*/
4 #begin privilege_enclave
5 certificate_set_verify_function (xcred, _callback);
6 #end privilege_enclave
7 /* Initialize TLS session */
8 init (&session, TLS_CLIENT);
9 /* Set non-default priorities */
10 if(non-default)
11 #begin privilege_enclave
12 priority_set_direct (session, "%UNSAFE_RENEGO");
13 #end privilege_enclave
14 err = handshake(session);
15 ... }
16
17 static int _callback (session_t session) {
18 x509_crt_t cert;
19 const char *hostname;
20 ...
21 #begin privilege_enclave
22
23 #end privilege_enclave
24 if (!ret)
25
26 ...
27 /* Validation successful, continue handshake */
28 return 0;
29 }
30
31 static SSL_CTX *tds_init_ssl(void)
32 {...
33
34
35
36
37
38
39 ...}
}
tds_mutex_unlock(&tls_mutex);
tds_mutex_lock(&tls_mutex);
if (!tls_initialized) {
SSL_library_init();
tls_initialized = 1;
ret = x509_crt_check_hostname (cert, hostname);
return CERTIFICATE_ERROR;
Fig. 1. Code snippet from FreeTDS application for certiﬁcate validating of
remote database server’s certiﬁcate using OpenSSL. The #pragmas are added
while porting the application to PANOPLY.
B. Attacks & Challenges
To enable end-to-end security guarantees in real applica-
tions, we aim to address three main challenges: (1) support for
rich OS abstractions, (2) secure interactions between multiple
enclaves, and (3) a minimal additional TCB. We demonstrate
the gap in existing abstractions to meet these challenges with
an example, for ensuring higher-level security properties.
Example. Consider FreeTDS [2], an application that imple-
ments a streaming protocol (TDS [9]) for remote databases.
Figure 1 shows a FreeTDS code snippet, which shows that the
application uses the OpenSSL SSL/TLS library to establish a
secure channel with a remote database. Each time it connects
to a remote database, FreeTDS checks if the remote database
is an authorized service and has a valid SSL certiﬁcate, by
connecting to trusted certiﬁcate manager service. Our goal is
to fortify the FreeTDS application against a compromised OS,
ensuring a key end-to-end security property — the FreeTDS
application accepts a certiﬁcate as valid if and only if the
original application would have accepted it as is valid. The
assumption is that the original application is bug-free, but the
system administrators wish to secure it against the hosting
service provider’s infrastructure, which may be infected. We
can achieve such a defense by using Intel SGX enclaves.
(a) Call dropping, b) call spooﬁng and c) call replay attacks perpetrated
Fig. 2.
by the OS during inter-enclave interactions.
the OS can subvert
Interactions. Note that
SGX enclaves. The trusted certiﬁcate manager service is shared
across many applications, and by principle of least privilege,
is the only service with access to the “root certiﬁcate”. As
can be seen in Figure 1, the FreeTDS application validates a
presented certiﬁcate by invoking the trusted certiﬁcate manager
via standard OpenSSL interfaces. Speciﬁcally, the FreeTDS
application does this in 3 steps: it registers a callback with
the trusted certiﬁcate manager (Line 5), passes conﬁguration
options (Line 12), and invokes the certiﬁcate check (Line 22).
Attacks on Inter-Enclave
the
FreeTDS application enclave invokes the certiﬁcate manager
enclave several times, passing rich data. Such communication
necessarily goes through an adversarial channel under the OS
control (e.g. an IPC call or control transfer in unprotected
code). The OS knows the standard OpenSSL interfaces and
the semantics of its interfaces. If enclaves use the standard
interfaces of the Intel SDK,
the ap-
plication’s guarantee by causing FreeTDS to accept invalid
certiﬁcates. We show concrete attacks on this interface in
Figure 2. First, the OS can drop the call on Line 5, thereby
disallowing the application to register a callback. The attack
is powerful because abort fails silently, with the effect that