# 相关资源
## PNG文件格式文档
    http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html
    https://www.myway5.com/index.php/2017/11/10/png%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90%E4%B8%8E%E5%8E%8B%E7%BC%A9%E5%8E%9F%E7%90%86/
## 源码下载
    http://78.108.103.11/MIRROR/ftp/png/src/history/libpng12/
## 测试样本
    https://gitee.com/hac425/data/tree/master/libpng
# CVE-2004-0597
## 分析
漏洞代码
    void /* PRIVATE */
    png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
    {
       png_byte readbuf[PNG_MAX_PALETTE_LENGTH]; // 0x100
       ..........................
       ..........................
       png_crc_read(png_ptr, readbuf, (png_size_t)length);
          png_ptr->num_trans = (png_uint_16)length;
readbuf 是一个 0x100字节的缓冲区， length从 png 文件中读取，最大可以为 0x7fffffff , 典型的栈溢出。
测试用例:
    trns_stack_bof.png
## 修复
对 length进行校验避免大于 PNG_MAX_PALETTE_LENGTH.
# [CVE-2007-5266](https://www.cvedetails.com/cve/CVE-2007-5266/)
补丁地址
    https://sourceforge.net/p/png-mng/mailman/png-mng-implement/thread/PI:EMAIL/
iCCP 的格式
    iccp_name字符串+"\x00" + "\x00" + zlib压缩后的数据 endata
endata 解压后的格式
    profile_size： 4个字节
## iCCP chunk 处理堆越界（基本无影响）
### 分析
调试环境
    ubuntu 16.04 64bit
测试用例
    附件\libpng\iccp_memleak*.png
漏洞代码
    #if defined(PNG_iCCP_SUPPORTED)
    void PNGAPI
    png_set_iCCP(png_structp png_ptr, png_infop info_ptr,
                 png_charp name, int compression_type,
                 png_charp profile, png_uint_32 proflen)
    {
       new_iccp_name = (png_charp)png_malloc_warn(png_ptr, png_strlen(name)+1);
       png_strncpy(new_iccp_name, name, png_sizeof(new_iccp_name));  //当 name 大于 8 字节时， strncpy 拷贝字符串不会再末尾添0 ， 可能内存泄露
strncpy 的工作为
    char* strncpy(char *dest, const char *src, size_t n){
        size_t i;
        for (i = 0 ; i name = (png_charp)png_malloc_warn(png_ptr,png_strlen(from->name) + 1);
    png_strncpy(to->name, from->name, png_strlen(from->name));
假设 `from->name` 为 8 字节
### 修复
    png_strncpy(to->name, from->name, png_strlen(from->name)+1);
# [CVE-2007-5269](https://www.cvedetails.com/cve/CVE-2007-5269/)
公告地址
    https://sourceforge.net/p/png-mng/mailman/png-mng-implement/thread/PI:EMAIL/
## zTXt
### 分析
测试用例
    附件\libpng\ztxt.png
漏洞代码
    void /* PRIVATE */
    png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
    {
       png_crc_read(png_ptr, (png_bytep)chunkdata, slength);
       if (png_crc_finish(png_ptr, 0))
       {
          png_free(png_ptr, chunkdata);
          return;
       }
       chunkdata[slength] = 0x00;
       for (text = chunkdata; *text; text++)
          /* empty loop */ ;
       /* zTXt must have some text after the chunkdataword */
       if (text == chunkdata + slength - 1)
       {
          png_warning(png_ptr, "Truncated zTXt chunk");
          png_free(png_ptr, chunkdata);
          return;
       }
首先读取 chunkdata ， 然后末尾填 '\x00'， 然后会在 chunkdata 开始位置找字符串
    for (text = chunkdata; *text; text++)
          /* empty loop */ ;
后面的判断条件出现了问题
    if (text == chunkdata + slength - 1)
当`chunkdata` 中的字符全部都不是'`\x00`' 时， `text` 会等于 `chunkdata + slength`
后面就会越界读了。
### 修复
    /* zTXt must have some text after the chunkdataword */
       if (text >= chunkdata + slength - 2)
       {
          png_warning(png_ptr, "Truncated zTXt chunk");
          png_free(png_ptr, chunkdata);
          return;
       }
总结：用 == 号来判断是否出现数组越界是不安全的
## sCAL
测试用例
    附件\libpng\scal.png
### 分析
漏洞代码
    png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
    {
       png_crc_read(png_ptr, (png_bytep)buffer, slength);
       buffer[slength] = 0x00; /* null terminate the last string */
       ep = buffer + 1;        /* skip unit byte */
       width = png_strtod(png_ptr, ep, &vp);
       if (*vp)
       {
           png_warning(png_ptr, "malformed width string in sCAL chunk");
           return;
       }
       for (ep = buffer; *ep; ep++)
          /* empty loop */ ;
       ep++;
当 buffer 里面的每个字符都不是 \x00 时， 最后会执行这一部分代码后， ep 会超过分配的内存块的大小，造成越界访问。
### 修复
在后面增加校验
    if (buffer + slength unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
        png_ptr->unknown_chunk.size = (png_size_t)length;
        png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
在处理 `unknown`类型的 `chunk` 时， 如果 `length` 为`0` ， `png_malloc`会返回`0` ，
然后后面的代码没有校验`png_malloc`的返回值直接使用，导致空指针引用。
## 修复
对 `length` 进行校验
    if (length == 0)
             png_ptr->unknown_chunk.data = NULL;
           else
           {
             png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
             png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
           }
PS: 对1.2.19 用测试样本跑时，会触发栈溢出，溢出在 strncpy 函数内部，很神奇。
# [CVE-2008-3964](https://www.cvedetails.com/cve/CVE-2008-3964/)
测试用例
    ztxt_off_by_one.png
## 分析
漏洞代码
    void /* PRIVATE */
    png_push_read_zTXt(png_structp png_ptr, png_infop info_ptr)
    {
             if (!(png_ptr->zstream.avail_out) || ret == Z_STREAM_END)
             {
                if (text == NULL)
                {
                   text = (png_charp)png_malloc(png_ptr,
                         (png_uint_32)(png_ptr->zbuf_size