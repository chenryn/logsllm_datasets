}
if (n > 0)
{
printf("Average of %d scores is %0.1f.\n", n, total / n);
455
printf("Low = %0.1f, high = %0.1f\n", min, max);
}
else
printf("No valid scores were entered.\n");
return 0;
}
在程序清单7.9中，while循环读取输入，直至用户输入非数值数据。循
环中的if语句筛选出无效的分数。假设输入 188，程序会报告：188 is an
invalid value。在本例中，continue 语句让程序跳过处理有效输入部分的代
码。程序开始下一轮循环，准备读取下一个输入值。
注意，有两种方法可以避免使用continue，一是省略continue，把剩余部
分放在一个else块中：
if (score  100)
/* printf()语句 */
else
{
/* 语句*/
}
另一种方法是，用以下格式来代替：
if (score >= 0 && score 
int main(void)
{
float length, width;
printf("Enter the length of the rectangle:\n");
while (scanf("%f", &length) == 1)
{
printf("Length = %0.2f:\n", length);
printf("Enter its width:\n");
if (scanf("%f", &width) != 1)
break;
printf("Width = %0.2f:\n", width);
printf("Area = %0.2f:\n", length * width);
printf("Enter the length of the rectangle:\n");
}
461
printf("Done.\n");
return 0;
}
可以这样控制循环：
while (scanf("%f %f", &length, &width) == 2)
但是，用break可以方便显示用户输入的值。
和continue一样，如果用了break代码反而更复杂，就不要使用break。例
如，考虑下面的循环：
while ((ch = getchar()) != '\n')
{
if (ch == '\t')
break;
putchar(ch);
}
如果把两个测试条件放在一起，逻辑就更清晰了：
while ((ch = getchar() ) != '\n' && ch != '\t')
putchar(ch);
break语句对于稍后讨论的switch语句而言至关重要。
在for循环中的break和continue的情况不同，执行完break语句后会直接执
行循环后面的第1条语句，连更新部分也跳过。嵌套循环内层的break只会让
462
程序跳出包含它的当前循环，要跳出外层循环还需要一个break：
int p, q;
scanf("%d", &p);
while (p > 0)
{
printf("%d\n", p);
scanf("%d", &q);
while (q > 0)
{
printf("%d\n", p*q);
if (q > 100)
break; // 跳出内层循环
scanf("%d", &q);
}
if (q > 100)
break; // 跳出外层循环
scanf("%d", &p);
}
463
7.7 多重选择：switch和break
使用条件运算符和 if else 语句很容易编写二选一的程序。然而，有时程
序需要在多个选项中进行选择。可以用if else if...else来完成。但是，大多数
情况下使用switch语句更方便。程序清单7.11演示了如何使用switch语句。该
程序读入一个字母，然后打印出与该字母开头的动物名。
程序清单7.11 animals.c程序
/* animals.c -- 使用switch语句 */
#include 
#include 
int main(void)
{
char ch;
printf("Give me a letter of the alphabet, and I will give ");
printf("an animal name\nbeginning with that letter.\n");
printf("Please type in a letter; type # to end my act.\n");
while ((ch = getchar()) != '#')
{
if ('\n' == ch)
continue;
if (islower(ch))  /* 只接受小写字母*/
464
switch (ch)
{
case 'a':
printf("argali, a wild sheep of Asia\n");
break;
case 'b':
printf("babirusa, a wild pig of Malay\n");
break;
case 'c':
printf("coati, racoonlike mammal\n");
break;
case 'd':
printf("desman, aquatic, molelike critter\n");
break;
case 'e':
printf("echidna, the spiny anteater\n");
break;
case 'f':
printf("fisher, brownish marten\n");
465
break;
default:
printf("That's a stumper!\n");
}        /* switch结束    */
else
printf("I recognize only lowercase letters.\n");
while (getchar() != '\n')
continue;   /* 跳过输入行的剩余部分 */
printf("Please type another letter or a #.\n");
}          /* while循环结束   */
printf("Bye!\n");
return 0;
}
篇幅有限，我们只编到f，后面的字母以此类推。在进一步解释该程序
之前，先看看输出示例：
Give me a letter of the alphabet, and I will give an animal name
beginning with that letter.
Please type in a letter; type # to end my act.
a [enter]
466
argali, a wild sheep of Asia
Please type another letter or a #.
dab [enter]
desman, aquatic, molelike critter
Please type another letter or a #.
r [enter]
That's a stumper!
Please type another letter or a #.
Q [enter]
I recognize only lowercase letters.
Please type another letter or a #.
# [enter]
Bye!
该程序的两个主要特点是：使用了switch语句和它对输出的处理。我们
先分析switch的工作原理。
7.7.1 switch语句
要对紧跟在关键字 switch 后圆括号中的表达式求值。在程序清单 7.11
中，该表达式是刚输入给 ch的值。然后程序扫描标签（这里指，case 'a' :、
case 'b' :等）列表，直到发现一个匹配的值为止。然后程序跳转至那一行。
如果没有匹配的标签怎么办？如果有default 
:标签行，就跳转至该行；否
则，程序继续执行在switch后面的语句。
467
break语句在其中起什么作用？它让程序离开switch语句，跳至switch语
句后面的下一条语句（见图7.4）。如果没有break语句，就会从匹配标签开
始执行到switch末尾。例如，如果删除该程序中的所有break语句，运行程序
后输入d，其交互的输出结果如下：
468
图7.4 switch中有break和没有break的程序流
Give me a letter of the alphabet, and I will give an animal name
469
beginning with that letter.
Please type in a letter; type # to end my act.
d [enter]
desman, aquatic, molelike critter
echidna, the spiny anteater
fisher, a brownish marten
That's a stumper!
Please type another letter or a #.
# [enter]
Bye!