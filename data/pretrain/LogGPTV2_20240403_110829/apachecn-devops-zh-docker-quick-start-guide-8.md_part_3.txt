现在，我们准备更新我们的 Jenkins 配置，以支持我们的 Dockerized 构建代理。我们要做的第一个配置更改是关闭默认的构建代理。为此，请登录您的 Jenkins 服务器，然后单击“管理 Jenkins”菜单链接。这将带您进入您可以管理的各种配置组，例如系统、插件和命令行界面设置。现在，我们需要转到配置系统管理组:
![](img/ca007e0f-82ae-4c3e-a93a-cd1c22f5d9d4.png)
一旦您进入配置系统管理组，您将把执行人数量的值更改为`0`。它应该如下所示:
![](img/930fbb65-4fa9-4fd7-b80e-7166516f870c.png)
当您将“执行者数量”值更改为`0`时，您可以点击屏幕左下角的“保存”按钮来保存设置。此时，在进行此更改后，您的 Jenkins 服务器将无法运行任何作业，因为没有配置 Jenkins 代理来运行它们。所以让我们快速进入下一步，安装 Docker 插件。
# 为 Jenkins 安装 Docker 插件
现在我们需要为 Jenkins 安装 Docker 插件。您可以像其他插件安装一样完成这个任务。单击管理 Jenkins 菜单链接，从配置组列表中，单击管理插件组的链接:
![](img/b844e146-e6c0-45f3-9795-d35802f31383.png)
进入“管理插件”配置组后，选择“可用插件”选项卡，然后在过滤器框中，键入`docker`将可用插件列表缩小到与 Docker 相关的插件:
![](img/8ac3ae3c-383f-4ec3-8cfe-de0d89fe93f2.png)
即使有过滤列表，仍然有很多插件可供选择。找到并选中 Docker 插件的复选框。它看起来如下:
![](img/a78b0276-360d-4e6c-aaeb-686e4b69ef4e.png)
选中 Docker 插件复选框后，向下滚动并单击不重启安装按钮。这将为您下载并安装插件，然后一旦 Jenkins 重启就启用它。在安装屏幕上，一旦插件安装完毕，您可以选择执行重启。为此，请选中安装完成且没有作业运行时重新启动 Jenkins 复选框:
![](img/df355ed4-fc95-4e7d-90f8-7ad906a74f02.png)
由于我们在几分钟前将执行器的数量设置为`0`，现在不会有任何作业运行，所以插件一安装好，Jenkins 就会重启。Jenkins 一上线，插件就会被安装。我们需要重新登录 Jenkins 并设置我们的云。
# 创建一个新的云来支持我们的文档化构建代理
现在我们将告诉 Jenkins 使用我们的定制 Docker 映像来运行容器，作为 Jenkins 构建代理。再次单击管理 Jenkins 菜单链接。从配置组列表中，您将再次单击配置系统组的链接。您会在配置选项底部发现云配置。点击添加新云下拉菜单，选择`Docker`:
![](img/85ccfde1-560f-4fcd-8957-d8bb1409904d.png)
屏幕将会更新，您将拥有两个新的配置组:Docker Cloud 详细信息...和 Docker 代理模板...：
![](img/bd8072d5-822e-4414-9048-d83ba0de2a74.png)
让我们首先处理 Docker 云的细节。现在点击那个按钮。您可以将名称值保留为`docker`的默认值。在 Docker 主机 URI 字段中，输入`unix:///var/run/docker.sock`。您可以通过单击问号帮助图标并将其复制粘贴到输入字段中来找到该值。接下来，单击测试连接按钮，您应该会看到一个版本行出现，类似于您将在下面的截图中看到的。记下应用编程接口版本号，因为高级版需要它...设置。单击高级...按钮，并在 Docker API 版本字段中输入 API 版本号。您需要选中“已启用”复选框来启用此功能，因此请务必这样做。最后，您可能希望更改系统可以并发运行的容器数量。默认值为 100。举个例子，我把价值降低到`10`。完成后，您的配置应该如下所示:
![](img/f2e0d7ea-7952-4496-a6d5-fd3a9cf456a7.png)
接下来，单击 Docker 代理模板...按钮，然后单击出现的“添加 Docker 模板”按钮，以便我们可以配置 Jenkins 代理设置。在这里，您需要单击代理的“已启用”复选框来启用我们的新代理模板。您可以指定一个名称作为由 Jenkins 作为构建代理运行的容器的前缀，也可以将该名称留空，将使用`docker`前缀。接下来，输入要用于生成代理容器的映像的存储库和名称标签。我们创建了自定义映像，对其进行标记，并使用`ubuntu-node01:5000/jenkins-agent:latest`映像名称将其推送到我们的 Jenkins 栈应用 repo，因此将该值输入 Docker Image 字段。将实例容量值设置为`1`，将远程文件系统根值设置为`/home/jenkins/agent`。确保使用值设置为`Use this node as much as possible`，并使用`Attach Docker container`值进行连接。将用户设置为`root`。将拉动策略值更改为`Pull once and update latest`:
![](img/79d3e2f7-bed3-4876-8839-acd362836905.png)
最后，我们需要配置一些容器设置...，因此单击展开该部分。我们需要在这里输入的值是容器运行时要使用的命令。您在 Docker 命令字段中需要的值是`java -jar /usr/share/jenkins/slave.jar`。您在“卷”字段中需要的值是`/var/run/docker.sock:/var/run/docker.sock`:
![](img/91b7b76b-f375-4e9a-96dd-fc80c59193a3.png)
最后，选中分配伪 TTY 复选框:
![](img/2361d7a1-efdd-4143-a14a-91c14c5be184.png)
向下滚动到配置屏幕的底部，单击保存按钮保存所有云设置。那是一些严肃的配置功夫——干得好！但是，万一您想要快速引用所有输入的值，这里是所有输入的自定义(或非默认)值，用于配置我们示例中的 Docker Cloud:
| **字段名** | **使用的数值** |
| URI 主机对接器 | `unix:///var/run/docker.sock` |
| docker api 版本 | `1.38`(匹配连接测试中显示的版本) |
| 启用 Docker 云 | 检查 |
| 容器盖 | `10` |
| 已启用 Docker 代理 | 检查 |
| Docker 代理模板名称 | `agent` |
| Docker 映像 | `ubuntu-node01:5000/jenkins-agent:latest` |
| 实例容量 | `1` |
| 远程文件系统根目录 | `/home/jenkins/agent` |
| 使用 | `Use this node as much as possible` |
| 连接方法 | `Attach Docker container` |
| 用户 | `root` |
| 拉动战略 | `Pull once and update latest` |
| Docker 司令部 | `java -jar /usr/share/jenkins/slave.jar` |
| 卷 | `/var/run/docker.sock:/var/run/docker.sock` |
| 分配一个伪 TTY | 检查 |
现在一切都配置好了，让我们给新定义的 Jenkins 代理一个测试。
# 测试我们的新构建代理
回到 Jenkins 仪表盘，点击“为我们的`hello-docker-test`工作安排一个构建”按钮。这将为我们的工作开始一个新的构建，这又将创建一个新的 Dockerized 构建代理。它使用我们设置的配置来执行`docker container run`命令，以基于我们指定的映像运行新的容器。最初，当容器旋转时，执行器将离线:
![](img/5ef3cfa0-9f85-4bd8-9f0d-8033edc1ab22.png)
请注意，执行者名称有我们指定的代理前缀。一旦容器运行，Jenkins 作业将在其中启动，基本上使用`docker container exec`命令。Jenkins 作业开始后，将显示正常的作业进度图形，执行者将不再显示为脱机。状态将如下所示:
![](img/fe9dfbb5-5374-4b37-8847-010948778f6f.png)
如果单击正在执行的作业的进度条，您可以查看作业的控制台输出，过一会儿，作业将显示“已完成:成功”状态，如下所示:
![](img/5b261ded-6411-40af-affc-42214a2e25ed.png)
干得好！让我们检查最后一个示例 Jenkins 作业，以显示具有更多阶段的管道脚本，并表示 Docker 作业的真实示例。你准备好了吗？继续读。
# 在文档化的构建节点中构建、测试和推送 Docker 映像
为了结束关于 Docker 和 Jenkins 的这一章，让我们逐步完成为现实世界的 Docker 化节点应用创建模板的步骤。以下是我们将要做的事情:
准备我们的申请:
*   在 GitHub 上创建新的回购
*   将报告复制到我们的开发工作站
*   创建我们的应用文件
*   将我们的应用文件推送到 GitHub
创建并测试将构建我们的 Dockerized 节点应用的 Jenkins 作业:
*   创建一个新的 Jenkins 工作，利用 GitHub 回购
*   测试我们的 Jenkins 工作，它将拉动回购，构建应用，测试它，并发布映像
*   庆祝我们的成功！
让我们从准备申请开始。
我们要做的第一件事是在 GitHub 上创建我们的应用 repo。浏览并登录[github.com](http://www.github.com)，转到您的存储库页面，然后单击创建新回购按钮。输入新存储库的名称。举个例子，我用了`dqs-example-app`。输入适当的描述。你可以让你的回购公开或私人。对于本例，我将其公开是为了简单起见，以后拉回购时不需要进行身份验证。选中初始化存储库复选框，以便您可以立即在工作站上克隆空的 repo。创建`.gitignore`文件时，可以选择要使用的项目类型。我选择了`Node`。当您输入并选择了所有这些内容后，它将看起来非常像以下内容:
![](img/48bc3985-be57-41e8-a45e-e19d7f4998e0.png)
单击创建存储库按钮创建新的应用报告。现在它是在 GitHub 上创建的，您将希望将其克隆到您的工作站上。使用“克隆”或“下载”按钮，然后使用“复制”按钮复制克隆步骤的报告网址:
![](img/44409c48-3703-4a37-a8ef-bb67901d05a2.png)
现在，返回您的工作站，在您保存本地回购的位置，克隆新的(大部分)空回购。然后将目录更改到新 repo 的文件夹中。对我来说，这看起来像下面这样:
![](img/983a1f97-6082-47e2-85df-40b296775617.png)
现在我们要创建应用的支架。这将包括创建一个`Dockerfile`、`Jenkinsfile`、`main.js`和`test.js`文件以及`package.json`文件。使用您最喜欢的编辑器在应用文件夹中创建这些文件。以下是这些文件的内容:
以下是`Dockerfile`文件的内容:
```
FROM node:10-alpine
COPY . .
RUN npm install
EXPOSE 8000
CMD npm start
```
以下是`Jenkinsfile`文件的内容:
```
node {
   def app
   stage('Clone repository') {
      /* Clone the repository to our workspace */
      checkout scm
   }
   stage('Build image') {
      /* Builds the image; synonymous to docker image build on the command line */
      /* Use a registry name if pushing into docker hub or your company registry, like this */
      /* app = docker.build("earlwaud/jenkins-example-app") */
      app = docker.build("jenkins-example-app")
   }
   stage('Test image') {
      /* Execute the defined tests */