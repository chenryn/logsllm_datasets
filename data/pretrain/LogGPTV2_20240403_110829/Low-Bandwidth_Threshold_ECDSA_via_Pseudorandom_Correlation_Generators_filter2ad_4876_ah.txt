the elements (di, zi)i∈S,i(cid:54)=ι are indistinguishable from 2|S|−2
random elements in R. That ends the proof of the claim.
We are now ready to prove both correctness and secu-
rity in one go. We do it by strengthening Claim 2.3.
Speciﬁcally, for every subset of party S ⊆ [n], we show
that no PPT adversary provided with the PCG seeds of
the parties not
in S can distinguish between the real
(αi, ski, xi, (Mi,j, Kj,i)j(cid:54)=i, yi, zi, di)i∈S and the correspond-
ing tuples in which xi and yi are substituted with random
elements in R and (Mi,j, Kj,i)j(cid:54)=i, zi and di are substituted
with random elements (M(cid:48)
i subject to
i and d(cid:48)
i,j, K(cid:48)
(cid:88)
(cid:88)
i,j = K(cid:48)
M(cid:48)
d(cid:48)
(cid:88)
i +
i(cid:54)∈S
zi =
i∈S
z(cid:48)
i +
j,i)j(cid:54)=i, z(cid:48)
i,j + αj · xi,
di = sk · (cid:88)
(cid:17) ·(cid:16)(cid:88)
(cid:16)(cid:88)
i∈[n]
yi,
xi
i(cid:54)∈S
i∈[n]
j∈[n]
(cid:88)
i∈S
(cid:17)
.
yj
(2)
(3)
(4)
i,j, K(cid:48)
i and d(cid:48)
j,i)j(cid:54)=i, z(cid:48)
We achieve this goal by a series of 2|S| + 2 hybrids. In
the initial stage, we provide the adversary with the PCG seeds
of the parties not in S, the original (αi, ski, xi, yi)i∈S and the
randomly sampled (M(cid:48)
i. Observe that the
adversary cannot distinguish this stage from the situation in
which it receives the real outputs of the PCG. This is due to
Claim 2.3.
In the subsequent stage, for every i (cid:54)∈ S and j ∈ S,
we substitute the DSPF keys (U r,0
j,i )r∈[c] and
(C r,s,0
)r,s∈[c] in the PCG seeds of the parties not in S
with keys generated using Sim. This hybrid is indistinguish-
able from the previous one, due to the security of the 2-party
DSPF.
i,j , V r,1
j,i , V r,0
i,j , U r,1
, C r,s,1
i,j
j,i
i,j, K(cid:48)
i and d(cid:48)
j,i)j(cid:54)=i, z(cid:48)
We now describe the subsequent stages. Let j be the index
of the i-th party in S. The 2i-th hybrid is obtained from the
(2i − 1)-th one, by substituting xj with a random element in
R before sampling the fake (M(cid:48)
i. In a
similar way, the (2i + 1)-th hybrid is obtained from the 2i-th
one, by substituting yj with a random element in R.
We show that any adversary A distinguishing between
two consecutive hybrids can be converted into a successful
Module-LPN attacker A(cid:48). Without loss of generality, we can
assume that A distinguishes between the (2l − 1)-th and the
2l-th hybrid. Let ι be the index of the l-th party in S.
Upon activation A(cid:48) generates the PCG seeds of the parties
not
in S sampling random key material, random special
positions and non-zero elements and simulating the DSPF keys
using Sim whenever the other key is addressed to a party in
S. Then, A(cid:48) samples random ski and αi in Fq for every i ∈ S
and random xi and yi in R for every i ∈ S with i  ι and j ≥ ι, samples
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
172570
j (X)
i (X), vr
i,j, K(cid:48)
i and d(cid:48)
j,i)j(cid:54)=i, z(cid:48)
$← HW t. As
random t-sparse polynomials ur
a last step, it computes xi ← (cid:104)a, ui(cid:105) and yj ← (cid:104)a, vj(cid:105)
for every i, j ∈ S with i > ι and j ≥ ι, generates the
i for every i ∈ S sampling
values (M(cid:48)
them randomly subject to (2), (3) and (4) and provides A
in S, a and the
with the PCG seeds of the parties not
tuples (αi, ski, xi, (M(cid:48)
i,j, K(cid:48)
j,i)j(cid:54)=i, yi, z(cid:48)
i, d(cid:48)
i)i∈S. At the end,
A(cid:48) outputs the same bit as A.
Observe that when the Module-LPN challenger generates
xι using the uniform distribution, the view of A is identical
to the 2l-th hybrid. If instead xι is generated using t-sparse
polynomials, the view of A is perfectly indistinguishable from
the (2l − 1)-th hybrid. Hence, if A wins with non-negligible
advantage, A(cid:48) breaks the Module-LPN assumption, reaching a
contradiction. In a totally analogous way, we are able to show
that no PPT adversary can distinguish between the 2l-th and
the (2l + 1)-th hybrid.
Observe that in the last hybrid of the sequence, the values
(xi, yi)i∈S are all sampled randomly in R, however, the DSPF
keys in the seeds of the parties not in S are still generated
using Sim. In the last stage, we revert to the original DSPF
keys. Indistinguishability is guaranteed by the DSPF security.
This ends the proof of correctness and security of the PCG.
The second part of the theorem is a mere computation, which
is easily checkable.
APPENDIX C
PROOF OF THEOREM 3
We present here the security proof of the preprocessing
protocol ΠR
Proof:
Prep.
Theorem 5] to ΠR
Prep.
This is an adaptation of the proof of [AS21,
Consider the simulator S R
Prep described in Figure 10. We
prove that no PPT adversary is able to distinguish between
Prep.
the protocol ΠR
Clearly, the simulation of the initialisation is perfectly secure.
We therefore focus our attention the the generation of ECDSA
tuples.
Prep and the composition of F R
Prep with S R
It is immediate to see that ΠR
Prep aborts with negligible
probability if all
the parties are honest. Indeed, an abort
happens only if the non-zero element of a DPF execution is
actually equal to zero, and therefore if and only if αj = 0 or
skj = 0 for any j ∈ [n], or there exist i ∈ [n], r ∈ [c] and
l ∈ [t] such that βr
i [l] = 0. All these elements
are uniformly distributed over Fq, therefore, since q ∼ 2λ, the
probability of such event is negligible.
i [l] = 0 or γr
The simulation is unconditionally secure until the outputs
are revealed. Moreover, if the adversary chose αj = 0, or
j [l] = 0 for some r ∈ [c] and l ∈ [t]
skj = 0, or βr
and corrupted party Pj, both the protocol and the simulation
abort during an execution of 2-DSPF.
j [l] = 0 or γr
Before proceeding with our analysis, we deﬁne the random
i∈[n] xi and y :=
i∈[n] ski, x := (cid:80)
variables sk := (cid:80)
(cid:80)
i∈[n] yi.
Claim 3.1: In the protocol, we have the following relations
(cid:88)
i∈[n]
(cid:88)
i∈[n]
di := sk · y,
zi = x · y,
Mi,j = Ki,j + αj · xi.
Proof of the claim: The proof strictly resembles the one
of Claims 2.1 and 2.2.
j,ι
j,ι
(X) and wc−1,c−1,0
j (cid:54)= ι, the polynomials(cid:101)vc−1,0
Claim 3.2: Consider the protocol and let Pι be an honest
party. The values (dj, zj)j∈H\{ι} are uniformly distributed in
R and independent of the remaining outputs and the view of
the adversary. Moreover, if Pi and Pj are both honest, Ki,j
and Mi,j are random subject to Mi,j = Ki,j + αj · xi.
Proof of the claim: Observe that for every j ∈ H with
(X) are both
random in R and independent of the view of the adversary and
of the honest parties (Pi)i∈H\{j,ι}. This is due to the behaviour
of 2-DPF when the targeted parties are both honest. Actually,
we are implicitly relying on the fact that the polynomials in
Fq[X] of degree less than 2N form a vector space and the
reduction modulo F (X) is a Fq-linear operation from this
space to R. As a consequence, every element in R has the
same number of preimages, therefore, the reduction modulo
F (X) maps the uniform distribution over the polynomials of
degree less than 2N into the uniform distribution over R.
(X)
j,ι
(X) respectively, we understand that the latter are
(X) are terms of(cid:101)vc−1
Since(cid:101)vc−1,0
To conclude the ﬁrst part of the claim, observe that(cid:101)vc−1
is multiplied by ac−1 = 1 when computing dj = (cid:104)a,(cid:101)vj(cid:105).
Pj are both honest, (cid:101)K c−1
of 2-DPF. Since (cid:101)K c−1
computing Ki,j = −(cid:104)a,(cid:102)Ki,j(cid:105), Ki,j is random. The fact that
For the second part of the claim, notice that when Pi and
is random, due to the behaviour
is multiplied by ac−1 = 1 when
(X)
(X) is multiplied by ac−1 · ac−1 = 1 when
and wc2−1
random in R and independent.
Moreover, wc2−1
computing zj = (cid:104)a ⊗ a, wj(cid:105).
(X) and wc−1,c−1,0
Mi,j = Ki,j + αj · xi is a consequence of Claim 3.1.
j,ι
i,j
i,j
j
j
j
j
Claim 3.3: By the Rc-LPNt assumption with static leakage,
no PPT adversary can distinguish between the procedure Tuple
and its simulation.
Proof of the claim: Let the random variables (cid:98)d and (cid:98)z
represent the sum of the shares of the corrupted parties, deﬁned
as in S R
We proceed by a series of 2|H| hybrids. In the initial stage,
we consider the protocol execution in which, for every i ∈ H,
the values di and zi are substituted with random elements in
Prep.
R, subject to(cid:88)
di +(cid:98)d = sk · y,
i∈H
(cid:88)
i∈H
zi +(cid:98)z = x · y
and (Mi,j, Kj,i)j(cid:54)=i are sampled randomly under the condition
Mi,j = Ki,j + αj · xi. Observe that by Claims 3.1 and 3.2,
the initial stage is perfectly indistinguishable from ΠR
Consider now an integer i ≤ |H| and let j be the index of
the i-th honest party. In the 2i-th hybrid, we will substitute
Prep.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
182571
The Simulator S R
Prep
a) INITIALISATION: The simulator waits for (αi)i∈C from the adversary and forwards them to the functionality. Upon
receiving PK as a reply, the simulator forwards it to the adversary. At the end, S R
$← Fq for every
i ∈ H.
b) ECDSA TUPLE: The simulator runs the protocol with the adversary simulating the honest parties:
Prep samples αi, ski
1) If the simulation aborts, the simulator sends Abort to the functionality.
2) At the end, the simulator reconstructs the sum of the outputs of the corrupted parties
(cid:98)x ←(cid:88)
xi,
(cid:98)y ←(cid:88)
i∈C
yi,
(cid:98)z ←(cid:88)
i∈C
zi,
(cid:98)d ←(cid:88)
di.
i∈C
i∈C
Furthermore, it computes the pair (Mi,j, Kj,i) for every i ∈ C and j ∈ H. Observe that S R
Prep can perform this
operation. Indeed, in the initialisation, it learnt (αi)i∈C. Moreover, at the beginning of the procedure, it received
i for every i ∈ C and r ∈ [c]. Finally, in every execution of 2-DSPF involving corrupted parties, the
βr
i , γr
adversary sends to the simulator the shares that the corrupted parties selected for the output.
for every i ∈ C \ {ι}, S R
3) Let ι be the index of a corrupted party. The simulator sets (cid:98)xι ← (cid:98)x, (cid:98)yι ← (cid:98)y, (cid:98)zι ← (cid:98)z and (cid:98)dι ← (cid:98)d. Moreover,
((cid:98)xi, (Mi,j, Kj,i)j∈H,(cid:98)yi,(cid:98)di,(cid:98)zi)i∈C to the functionality.
Prep sets (cid:98)xi ← 0, (cid:98)yi ← 0, (cid:98)zi ← 0 and (cid:98)di ← 0. Finally,
the simulator sends
i , ωr
i , ηr
Fig. 10. The simulator SR
Prep
For every k ∈ H with k < j, it substitutes xk and yk with
random elements in R. Finally, it generates (Mi,j, Kj,i)j(cid:54)=i, di
and zi for every i ∈ H as in the simulation.
Observe that when the challenger replies with random ele-
ments in R, the view of A is indistinguishable from the view
in the 2i-th hybrid. If instead the challenger computes xj using
sparse polynomials in R, the view of A is indistinguishable
from the view in the (2i − 1)-th hybrid.
So, if A distinguished between the (2i− 1)-th and the 2i-th
hybrid with non-negligible advantage, then A(cid:48) would break the
Rc-LPNt hardness. In a totally analogous way, we can prove
that the same holds if A distinguished between the 2i-th and
the (2i + 1)-th hybrid.
the ﬁnal output xj with a random element in R, keeping all
the rest as in the previous stage. In the (2i + 1)-th hybrid, we
will do the same with yj. Observe that in the last stage, the
execution is identical to the simulation.
We show that any PPT adversary A distinguishing between
two consequent hybrids can be converted into an efﬁcient
attacker A(cid:48) against the Rc-LPNt assumption.
Suppose that A distinguishes between the (2i − 1)-th and
the 2i-th hybrid. Let Pj be the i-th honest party. Observe
that the only difference between the two stages is that xj
is computed as in the protocol in the former and randomly
sampled in the latter. We construct the Module-LPN attacker
A(cid:48) as follows. Upon activation A(cid:48) initialises an internal copy
of A and runs the protocol simulating the honest parties.
During the generation of ECDSA tuples, A(cid:48) lets its challenger
select the non-zero values βr
j for
j and special positions ωr
every r ∈ [c]. When A tries to guess a special position ωr
j [l]
for some r ∈ [c] and l ∈ [t] by specifying a set I ⊆ [N ]
during 2-DSPF, A(cid:48) issues a query (r, l, I) to its challenger
and forwards the reply to A. Moreover, when A tries to guess
k[h] for some k ∈ [n],
a special position ζ r,s
r, s ∈ [c] and l, h ∈ [t] by specifying a set I(cid:48) ⊆ [2N ] during
2-DSPF, A(cid:48) computes the set
j,k[lt+h] = ωr
j [l]+ηs
I(cid:48)(cid:48) ←(cid:8)χ − ηs
k[h] | χ ∈ I(cid:48)(cid:9),
issues the query (r, l, I(cid:48)(cid:48)) to its challenger and forwards the
reply to A. Observe that A(cid:48) knows ηs
k[h] so I(cid:48)(cid:48) can always be
computed.
Finally, A(cid:48) waits for (a, xj) from its challenger. We recall
that xj is computed as in the protocol with probability 1/2.
In the other cases, it is uniformly sampled in R. A(cid:48) models
O by sending a to A. At the end, the attacker A(cid:48) computes
(Mi,j, Kj,i)i∈C,j∈H, (cid:98)d,(cid:98)z and the outputs of the honest parties.
192572
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply.