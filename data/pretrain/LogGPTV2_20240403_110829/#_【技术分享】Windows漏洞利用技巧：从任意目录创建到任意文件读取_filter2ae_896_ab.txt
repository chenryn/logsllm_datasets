Windows支持许多不同的语言，为了支持非unicode编码，Windows同样也支持代码页（Code
Pages）。Windows通过区域语言支持（National Language
Support，NLS）库提供了各种接口，你可能会认为这些库全部运行在用户模式下，但如果你查看内核后，你会发现其中存在某些系统调用来支持NLS。本文最为感兴趣的是NtGetNlsSectionPtr这个系统调用。该系统调用会将代码页从System32目录映射到某个进程的内存中，这样NLS库就能访问代码页数据。我们不是完全清楚为什么该调用需要处于内核模式下，这样处理可能只是想让同一台主机上的所有进程都能共享数据。让我们来研究一下简化版的代码，代码篇幅并不大：
    NTSTATUS NtGetNlsSectionPtr(DWORD NlsType, DWORD CodePage, PVOID *SectionPointer, PULONG SectionSize) { 
    UNICODESTRING sectionname; OBJECTATTRIBUTES sectionobjattr; 
    HANDLE sectionhandle; 
    RtlpInitNlsSectionName(NlsType, CodePage, &sectionname); 
    InitializeObjectAttributes(&sectionobjattr, &sectionname, OBJKERNELHANDLE | OBJOPENIF | OBJCASEINSENSITIVE | OBJPERMANENT);
    // Open section under NLS directory. 
    if (!NTSUCCESS(ZwOpenSection(&sectionhandle, SECTIONMAPREAD, &sectionobjattr))) { // If no section then open the corresponding file and create section. UNICODESTRING filename; OBJECT_ATTRIBUTES objattr; HANDLE filehandle;
    RtlpInitNlsFileName(NlsType, CodePage,  &file_name);
    InitializeObjectAttributes(&obj_attr, &file_name, OBJ_KERNEL_HANDLE | OBJ_CASE_INSENSITIVE);
    ZwOpenFile(&file_handle, SYNCHRONIZE, &obj_attr, FILE_SHARE_READ, 0);
    ZwCreateSection(&section_handle, FILE_MAP_READ,  &section_obj_attr, NULL, PROTECT_READ_ONLY, MEM_COMMIT, file_handle);
    ZwClose(file_handle);
    }
    // Map section into memory and return pointer. 
    NTSTATUS status = MmMapViewOfSection( sectionhandle, SectionPointer, SectionSize); 
    ZwClose(sectionhandle); 
    return status; 
    }
首先需要注意的是，代码会尝试使用CodePage参数生成的名称，在 **NLS** 目录下打开一个命名内存区对象（named section
object）。为了弄清具体的名字，我们需要列出这个目录信息：
命名内存区的格式为NlsSectionCP,其中NUM是需要映射的代码页的编号。你还可以注意到这里存在一个内存区用于规范化数据集（normalization
data
set）。哪个文件会被映射取决于第一个NlsType参数，此时此刻我们还不用去考虑规范化数据集。如果代码找不到内存区对象，那么就会创建指向代码页文件的一个文件路径，使用ZwOpenFile打开该路径，然后调用ZwCreateSection来创建一个只读的命名内存区对象。最后，内存区会被映射到内存中，返回给调用者。
这里我们需要注意两件非常重要的事情。首先，对于open调用来说，OBJFORCEACCESSCHECK标志并没有被设置。这意味着即使调用者无法访问某个文件，也可以通过该调用打开该文件。最重要的是，ZwOpenFile的最后一个参数是0，这意味着FILEDIRECTORYFILE或者FILENONDIRECTORYFILE标志都没有被设置。这些标志没有被设置就能够满足我们前面提到的条件，open调用会遵循挂载点的重定向方式，以某个文件为目标，而不会产生任何错误。那么具体的文件路径被设置成什么了呢？我们可以通过反汇编RtlpInitNlsFileName来找到问题的答案。
    void RtlpInitNlsFileName(DWORD NlsType, DWORD CodePage, PUNICODE_STRING String) { 
    if (NlsType == NLS_CODEPAGE) { RtlStringCchPrintfW(String, L"\SystemRoot\System32\c_%.3d.nls", CodePage);
     } else { 
     // Get normalization path from registry. 
     // NOTE about how this is arbitrary registry write to file. 
     } 
     }
该文件名称的格式为“c_.nls”，位于System32目录中。需要注意的是，它使用了一种特殊的符号链接“SystemRoot”，通过设备路径格式指向Windows目录。这样就能防止通过重定向驱动器号来滥用这段代码，但同时也使其满足我们的利用场景。我们还需要注意的是，如果我们请求规范化路径，那么程序就会从主机注册表项中读取相关信息，因此，如果我们掌握注册表任意写入漏洞，我们有可能能利用这个系统调用获得另一个任意读取漏洞，但这个任务就留给有兴趣的读者去做了。
现在我们要做的事情就非常清楚了，那就是在System32中创建一个目录，目录名为c_.nls，设置其重解析数据，将其指向一个任意文件，然后使用NLS系统调用来打开以及映射这个文件。选择合适的代码页编号不是件难事，直接指定一个没用过的编号即可，比如1337。但是我们应该读取哪个文件呢？通常情况下，我们可以选择读取SAM注册表hive文件，该文件包含本地用户的登录信息。然而，访问SAM文件通常会被系统阻拦，因为该文件不可共享，即使以管理员权限以读取方式打开该文件也会遇到共享冲突错误。我们可以使用多种方法来绕过这个限制，我们可以使用注册表备份功能（这需要管理员权限），或者我们可以通过卷影复制（Volume
Shadow Copy）功能获取SAM的一个备份（Windows
10中默认不启用该功能）。因此，我们还是放弃这个任务吧。稍等一下！看起来我们的运气不错，事情有所转机。
Windows文件能否共享取决于我们正在发起的访问请求。比如，如果调用者请求读取权限，但文件没有以读取权限进行共享，那么请求就会失败。然而，我们有可能可以通过特定的无内容权限（non-content
rights）打开这类文件，比如读取安全描述符或者同步文件对象，系统在检查已有的文件共享设置时并不会检查这些权限。如果我们回过头来看NtGetNlsSectionPtr的代码，你会发现代码只向文件发起了SYNCHRONIZE访问权限的请求，因此，即使文件没有共享访问权限，代码依然可以打开目标文件。
但这种方式为什么能够成功？难道ZwCreateSection不需要一个可读的文件句柄来执行只读文件的映射操作吗？答案是肯定的，同时也是否定的。Windows文件对象实际上并不会去在意某个文件是否是可读的或者可写的。当文件被打开时，所创建的句柄就与相应的访问权限相关联。当我们在用户模式下调用ZwCreateSection时，该调用最终会尝试将句柄转化为指向文件对象的一个指针。为了做到这一点，调用者必须指定该句柄需要关联什么访问权限，对于只读映射而言，内核所请求的句柄具备读取数据（Read
Data）访问权限。然而，与对文件的访问权限检查类似，如果内核调用了ZwCreateSection，那么访问权限检查就会被禁用，当将文件句柄转化为文件对象指针时，访问权限检查同样处于禁用状态。这样一来，当文件句柄只具备SYNCHRONIZE访问权限时，ZwCreateSection依然能够执行成功。这意味着我们可以打开系统中的任意文件，无需在意文件的共享模式，SAM文件也不例外。
因此，让我们来完成这一任务吧。我们创建了一个“SystemRootSystem32c_1337.nls”目录，将其转化为一个挂载点，挂载点重定向至“SystemRootSystem32configSAM”。然后我们调用NtGetNlsSectionPtr，请求代码页1337，这样代码就能创建内存区，并将指向内存区的指针返回给我们。最后，我们只需要将已映射的文件内存拷贝到一个新的文件中，就能完成任务。
    $dir = "SystemRootsystem32c_1337.nls" 
    New-Directory $dir
    $targetpath = "SystemRootsystem32configSAM" 
    Use-NtObject($file = Get-NtFile $dir ` -Options OpenReparsePoint,DirectoryFile) { $file.SetMountPoint($targetpath, $target_path) }
    Use-NtObject($map = [NtApiDotNet.NtLocale]::GetNlsSectionPtr("CodePage", 1337)) { 
    Use-NtObject($output = [IO.File]::OpenWrite("sam.bin")) { $map.GetStream().CopyTo($output) Write-Host "Copied file" } 
    }
在16进制编辑器中加载我们创建的文件，根据文件内容，我们的确窃取到了SAM文件。
为了使攻击过程更加完整，我们需要清理整个战场。我们可以使用“Delete On
Close”标志打开这个目录文件，然后关闭文件，这样就能删掉这个目录（请确保以文件重解析点（reparse
points）的方式打开它，否则我们需要再次打开SAM文件）。对于内存区而言，由于对象是在我们的安全上下文中创建的（与目录类似），这里没有明确可用的安全描述符，因此我们可以使用DELETE访问权限打开它，然后调用ZwMakeTemporaryObject来删除永久性的引用计数，该计数由原始的创建者使用OBJ_PERMANENT标志进行设置。
    powershell Use-NtObject($sect = Get-NtSection nlsNlsSectionCP1337 ` -Access Delete) { # Delete permanent object. $sect.MakeTemporary() }
**六、总结**
****
我在这篇文章中介绍技术的并不属于一种漏洞，虽然这种技巧的应用并不是系统所希望看到的。所涉及的系统调用从Windows
7以来就已经存在，也没有发生变化，因此，如果我们发现了一个任意目录创建漏洞，我们就可以使用这种技巧来读取系统上的任意文件，无论这些文件处于被打开或者被共享的状态都可以。我将最终的脚本放在了Github上，你可以阅读相关代码了解更多细节。
当我们在逆向分析某个产品时，我们可以记录下任何存在异常的行为，这种异常点有可能会变成一个可以利用的点，正如我们在这篇文章中看到的那样。在许多情况下，我发现代码本身并没有存在漏洞，但代码拥有一些非常有用的属性，我们可以利用这些属性来构建漏洞利用链。