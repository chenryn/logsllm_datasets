WEAVE(P, Q) is a woven program P (cid:3) ‚àà WOVEN such that
P (cid:3) is a weaving of P (Defn. 1) and T (P (cid:3)) ‚äÜ Q.
WEAVE is undecidable in general; it can be shown that
any algorithm that could solve WEAVE could decide if a
program in a Turing-complete language satisÔ¨Åes an arbitrary
safety property. capweave uses a sound but incomplete
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
solver for WEAVE, described in ¬ßIII-B.
B. Solving the Policy Weaving Problem via Automata Games
capweave reduces WEAVE to Ô¨Ånding a winning strategy
to a two-player safety game, played by an Attacker and a
Defender. capweave uses an existing automata-theoretic
weaver-generator algorithm [15] as its core engine. To
make the paper self-contained, this section summarizes that
algorithm, and describes how capweave applies the weaver
generator to weave practical programs for Capsicum.
The weaver generator solves a version of the policy-
weaving problem in which an input program, a policy, and
the operating system are all modeled as automata. The
weaver generator solves such a problem by reducing it to
Ô¨Ånding a modular winning strategy to a two-player safety
game. Intuitively, a two-player safety game is an automaton
in which the set of states is partitioned into a set of Attacker
states and a set of Defender states. When the game is in an
Attacker state, the Attacker can transition the state to any
adjacent state, and analogously for the Defender. The goal
of the Attacker is to eventually transition the game to an
accepting state, and the goal of the Defender is to prevent
the Attacker from doing so. A winning Attacker (Defender)
strategy is a function that reads the transitions chosen by
both the Attacker and Defender and outputs a transition for
the Attacker (Defender) such that if the Attacker (Defender)
always chooses the transition output by the strategy, then
the Attacker (Defender) always wins the game. For a game
deÔ¨Åned by a pushdown automaton, a modular Attacker
(Defender) strategy is a strategy that chooses transitions
independently from the transitions chosen before the most
recent unmatched push transition. If a game deÔ¨Åned by
a restricted classes of pushdown automata, called Visibly
Pushdown Automata (VPA) [17], has a winning modular
Attacker or Defender strategy, then the strategy can be found
efÔ¨Åciently [14].
Our policy weaver capweave soundly reduces a policy-
weaving problem WEAVE(P, Q) to the problem of Ô¨Ånding a
winning Defender strategy to a game deÔ¨Åned by a VPA.
Intuitively, capweave constructs a game in which the
choices of an Attacker correspond to instructions that a
program can execute, the choices of a Defender correspond
to Capsicum primitives that can be invoked, and accepting
states are reached when the program violates the policy. A
winning Defender strategy for the game thus corresponds
to a weaving that ensures that the woven program never
violates the policy. The problem of Ô¨Ånding a winning
Defender strategy is NP-complete in general, but in practice
capweave Ô¨Ånds a winning strategy to a game efÔ¨Åciently
by applying heuristics introduced in previous work ( [15],
Sec. 4).
Fig. 7 illustrates how capweave applies the weaver
generator. The weaver generator takes as input a program
and policy, both represented as VPA‚Äôs, and an operating
	


	

	

			


















	
	
	
	
Figure 7. Architecture of capweave. Items in the box labeled ‚ÄúCapsicum
Arch.‚Äù are deÔ¨Åned by the Capsicum architect. ‚ÄúInit. state‚Äù denotes the initial
Capsicum state, ‚ÄúDesc. interp.‚Äù denotes the interpretation of Capsicum
program statements, ‚ÄúPrim. interp‚Äù denotes the interpretation of Capsicum
primitives, and ‚ÄúPolicy abs.‚Äù denotes the policy abstraction.
system (e.g., Capsicum) modeled as a visibly-pushdown
transducer. Thus, to apply the weaver generator, capweave
must soundly model its input program, policy, and Cap-
sicum as VPA‚Äôs. capweave models the program as a
VPA constructed directly from the program‚Äôs interprocedural
control-Ô¨Çow graph, which is a standard technique in program
analysis [17]. However, in principle, the program can be
modeled by any VPA that overapproximates the possible
executions of the program (e.g., models constructed via
predicate abstraction [18]). Each policy that capweave
takes as input
is a regular language, so the policy can
be represented as a Ô¨Ånite-state automaton, and thus as a
visibly-pushdown automaton [17]. capweave constructs
the transducer model of Capsicum from the space of capa-
bility states and Capsicum interpretations (¬ßIII-A3). Details
of this construction are given in an extended version of this
paper [19].
The weaver generator produces an instrumentation strat-
egy represented as a transducer that reads a sequence of pro-
gram instructions and outputs the next Capsicum primitive
that a woven program should execute. capweave compiles
such an instrumentation transducer to a woven program by
representing the transition function of the instrumentation
transducer using a state variable and instructions in the
language capinstr (Fig. 4). capweave weaves the input
program to consult the state variable to determine which
Capsicum primitive to invoke next as the program exe-
cutes, and then update the state variable. This compilation
scheme is described further in the extended version of this
paper [19].
If a programmer provides a program P and policy Q for
26
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
which capweave cannot Ô¨Ånd a solution to WEAVE(P, Q),
then capweave can, in principle, provide useful diagnostic
information to the programmer. There are multiple reasons
why capweave may not be able to Ô¨Ånd a solution to a
weaving problem WEAVE(P, Q): (1) WEAVE(P, Q) may not
have a solution. (2) WEAVE(P, Q) may have a solution, but
capweave may not Ô¨Ånd a solution because either (a) when
capweave constructs a VPA model of P , the resulting
model allows P to perform more executions than P can
actually perform, or (b) the solution does not correspond
to a modular winning Defender strategy [15]. In all cases
except (b), the weaver generator produces a winning Attacker
strategy that describes the executions that P can perform
to violate Q, no matter what Capsicum primitives are
invoked by any weaving. From such an Attacker strategy
and the Capsicum semantics, capweave could construct
an unweavable policy Q(cid:3) that is no more restrictive than Q
(i.e., Q(cid:3) ‚äá Q). capweave could then either validate that
Q(cid:3) is truly unsatisÔ¨Åable and provide Q(cid:3) to the user as an
explanation of capweave‚Äôs failure, or use Q(cid:3) to reÔ¨Åne its
model of the input program. In case (b), capweave could
still apply various heuristics to iteratively weaken the input
policy, check if the weakened policy has a weaving, and
provide this information as diagnostics to the programmer.
We have not implemented support for handling failures in
capweave, and do not evaluate capweave‚Äôs usability
in the face of such failures. We plan to explore failure
diagnostics in future work.
C. Weaving Practical Programs
In ¬ßIII-A4, we deÔ¨Åned the policy-weaving problem for a
simple imperative language. However, the weaving problem
and our policy weaver can be extended to handle programs
written in practical programming languages, such as C, in
which programs may have multiple recursive procedures, or
manipulate compound datatypes. In particular, capweave
weaves programs in the LLVM intermediate language [16].
A key strength of Capsicum is that a program that runs
on Capsicum may run code injected by an attacker (e.g.,
via a stack-smashing attack [20]), and yet can still satisfy
a non-trivial security policy. Thus, in practice it is critical
that our policy weaver be able to correctly weave programs
that can run injected code. We could implement such a
weaver by extending the language semantics and policy-
weaving problem described in ¬ßIII-A2 and ¬ßIII-A4 in a
straightforward way. The only change we would need to
make is that the policy weaver would not be able to choose
what Capsicum primitives the woven program will execute
after it executes speciÔ¨Åed program points at which the
program might run injected code.
A programmer who uses capweave must understand his
program sufÔ¨Åciently well to deÔ¨Åne a correct policy in terms
of program actions paired with capabilities. Furthermore, in
practice, the size of a policy may not differ signiÔ¨Åcantly
from the size of the code required to instrument the policy.
However, the key utility of capweave is that it allows
the programmer to reason purely in terms of capabilities
that the program must hold over its execution. Because
a programmer‚Äôs ultimate goal is to write a program that
holds desired capabilities, this reasoning is strictly easier
than determining desired capabilities and then rewriting the
program to use the intricate Capsicum primitives to induce
the capabilities.
More sophisticated programming tools could further ease
the burden of using capweave by, e.g., inferring a likely
policy from the callsites of system calls that manipulate
descriptors. Such a tool need only determine the capabilities
that the program requires as it executes, and discharge to
capweave the problem of instrumenting the program to
hold the required capabilities. To evaluate fully the utility of
capweave and related tools would require a comprehensive
programmer study. We leave this as future work.
IV. PRACTICAL EXPERIENCE AND EXPERIMENTS
We carried out a set of experiments to evaluate the prac-
tical utility of capweave. The experiments were designed
to answer the following questions:
1) Does capweave allow a programmer to rewrite a
program with less effort and with higher assurance
than if he manually rewrote the program to invoke
Capsicum‚Äôs primitives?
2) Does capweave rewrite real-world programs to en-
force practical policies efÔ¨Åciently?
3) Do programs produced by capweave behave compa-
rably, both in terms of correctness and performance,
to programs manually modiÔ¨Åed by an expert to satisfy
the same policy?
To answer these questions, we applied capweave to a set
of UNIX utilities‚Äîall of which had previously demonstrated
security vulnerabilities‚Äîso that the instrumented program
satisÔ¨Åed a policy that
thwarted the vulnerabilities. The
programs and policies were derived from either previous
work done in developing Capsicum [10], discussions with
Capsicum system and application developers on the Cap-
sicum mailing list [13], or collaborative work with security
researchers at MIT Lincoln Laboratory (MITLL).
The capweave implementation is 35k lines of OCaml,
and uses the LLVM OCaml API, which corresponds closely
to the LLVM API provided for C and C++. capweave takes
as input programs in the LLVM intermediate representation
(called bitcode), and outputs instrumented programs as bit-
code as well. As a result, it can be inserted into any compiler
toolchain that compiles a source program to LLVM bitcode
in some intermediate phase.
capweave generates instrumentation code as a multi-
dimensional array that deÔ¨Ånes what Capsicum primitive
should be called as each program point is executed. While
the generated code likely cannot be understood easily by a
27
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:01 UTC from IEEE Xplore.  Restrictions apply. 
programmer, the instrumentation transducer (¬ßIII-B) can be
recovered from the generated array. The transducer could
perhaps be used by a programmer to more easily understand
the instrumentation.
The
results of our
that
capweave is useful for rewriting programs for Capsicum.
In particular:
experiments demonstrate
1) For each of our subject programs, a programmer could
apply capweave by annotating their program with
only 4‚Äì11 lines of code, and writing a policy, ex-
pressed purely in terms of Capsicum capabilities, that
could be represented with 35‚Äì114 lines of our policy
language. Thus, capweave can be applied to rewrite
programs to satisfy explicit, declarative policies with
minimal effort.
2) capweave wove all programs in less than Ô¨Åve min-
utes, except for the PHP CGI interpreter, which took
46 minutes Thus, capweave is efÔ¨Åcient enough to
be applied to programs in, say, a nightly build system,
and in many cases could be integrated into a compiler
toolchain used in an edit-compile-run cycle.
3) Programs rewritten by capweave to satisfy a given
policy match programs manually written by an ex-
pert to satisfy the same policy, and run with over-
head within 4% of unwoven programs on practical
workloads. Thus, in practice, capweave produces
programs that behave comparably to those written by
an expert programmer.
A. Methodology
To answer the experimental questions presented in ¬ßIV,
we applied capweave to weave a set of UNIX utilities
as security and performance benchmarks. In this section,
we describe each of the benchmarks, and then describe the
experiments that we performed on each benchmark.
1) Benchmark Programs and Policies: We now describe
each of the benchmark programs and policies used, including
its role as a security-critical application, and the source of
its policy. While each policy used was inspired by a known
vulnerability in the benchmark, each policy restricts the
capabilities of large portions of its program‚Äôs execution. For
example, the policies for bzip2 and gzip strongly limit
the capabilities of both programs while they execute their
compression and decompression functions. Each policy thus
potentially mitigates a large class of vulnerabilities that may
be unknown when the policy was written. The policy also
explicitly describes the limitations of any program rewritten
to satisfy the policy, and thus the limits on any attacker who
compromises the rewritten program.
bzip2 and gzip: The compression programs bzip2
and gzip can be used by a trusted user to compress data
from an untrusted source. On BSD systems, they are often
used by root to decompress application packages. The
compression and decompression functions of bzip2 and
gzip are heavily optimized and quite complex, and have
exhibited security vulnerabilities in the past [3], [4]. An
attacker who can control the inputs to bzip2 and gzip
can craft an input that allows him to execute arbitrary code
with the privileges of the user who invoked bzip2 or gzip.