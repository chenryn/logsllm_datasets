siderations are explicitly outside the scope of our project
and will have to be dealt with using techniques such as ran-
domized clock speeds, etc.
3. Hybrid Analysis and Enforcement
Our hybrid information ﬂow technique ﬁnds a synergy
between static and dynamic approaches. It is primarily a
dynamic technique that tracks the ﬂow of information at
runtime, but it uses static analysis annotations to make safe
decisions about implicit information ﬂows.
In particular,
these annotations enable us to consider ﬂows in alternative
paths of control without having to actually execute those
paths. Our analysis is safe while retaining the ﬂexibility of
a purely dynamic approach, namely the ability to change
the policy while the program is executing.
Another important feature of our approach is that we did
not change the Java class ﬁle format in any manner. We
remain fully backward-compatible with the vast amounts
of Java bytecode that already exists. Our system does not
require program source code or annotations from the pro-
grammer. This makes our system useful in many scenarios
where the source code many not be accessible.
We have implemented our analysis using bytecode in-
strumentation with very little changes to the underlying Java
virtual machine. This makes our implementation easily
portable across many JVMs. In the remainder of this sec-
tion, we will give an overview of our implementation.
3.1. Terminology
• security label is a runtime entity that indicates the se-
curity level of a value. Each ﬁeld and local has a label
associated with it that indicates the label of the value
stored. For conciseness, a label for a local or ﬁeld
named x is represented as x.
• a! b represents the label of a value derived from a
and b. It is at least as restrictive as a and b. In a lattice
of labels it is the least upper bound (LUB) of the two
labels.
• pc is the label of the information implicit in the control
ﬂow at any point. It is also called the “program counter
label”.
• declassiﬁcation of pc is a process of reducing the
value of pc. This may happen when there is reduc-
tion of information in the control ﬂow, which happens
at control-ﬂow joins.
3.2. Security Labels
Security labels track the sensitivity of the information
in an entity. Our analysis tracks information at the level
466466
of ﬁelds (instance variables) and local variables, which is a
very ﬁne level of granularity.
A label hierarchy deﬁnes the labels for a policy and the
relationship between them. Our analysis supports label hi-
erarchies that are ﬁnite total ordered set with respect to an
ordering relationship ≤. Such a fully ordered label hierar-
chy is similar to the DoD clearance level structure. We use a
fully ordered label hierarchy instead of a more generic lat-
tice structure for reasons of efﬁciency. Since our analysis
dynamically calculates labels for each value computed, ef-
ﬁcient implementation of all label operations is critical for
the overall performance of the analysis. Many of our im-
plementation decisions are inﬂuenced heavily by efﬁciency
issues. Throughout the paper, we will be discussing the im-
plementation decisions we made for performance reasons.
We implement labels using integers in which the position
of the most signiﬁcant 1 deﬁnes the value of the label. This
scheme helps us implement the operations ≤ and! very
efﬁciently. Since Java integers are 32 bits, we can currently
have only 32 labels. However, this can be easily be extended
to 64 bits if we use long-integers instead.
Our analysis is dependent on the precision of the under-
lying static analysis. This was mentioned in our discussion
of Figure 3. Our current implementation of the static anal-
ysis represents objects by their allocation sites. This means
that one static object can potentially represent many runtime
objects simultaneously (for example, consider a new state-
ment inside a loop). The resulting loss of precision stems
from the points-to analysis that we use. Similar limitations
are typical for most points-to analysis algorithms. This is
not a limitation of our information-ﬂow analysis, but of the
underlying points-to analysis. Any improvements to the
points-to analysis will directly beneﬁt our information-ﬂow
analysis.
In order for many runtime objects to share a common la-
bel, we need to maintain the labels of ﬁelds separate from
the corresponding objects, in a global array. There are ac-
tually two global arrays, one for static ﬁelds and one for
instance ﬁelds. Since a static ﬁeld is shared between all in-
stances of a class, we need only one label per static ﬁeld.
Static ﬁelds are resolved at compile time and hence access-
ing the label of a static ﬁeld is a simple lookup into the static
label array at runtime.
The instance ﬁeld array stores the labels of instance
ﬁelds of allocation objects. Every object has an object offset
number, which is the index in the instance ﬁeld array from
where the labels of its ﬁelds are stored. Each ﬁeld in a class
also has a ﬁeld offset number to indicate the offset from the
beginning of the object where its label is stored. Hence, the
label of an instance ﬁeld whose object offset number is 10
and ﬁeld number is 2 is stored at the (10+2) location in the
array. To reduce the overhead of instance ﬁeld label look up,
we statically determine the ﬁeld offset. Due to Java’s poly-
467467
morphism, this is complicated since a reference can point
to an object of a derived class. We overcome this problem
by laying out the ﬁelds in the array in ways similar to how
compilers handle dynamic dispatch of ﬁelds in polymorphic
languages.
Even though the ﬁeld offset within the object can be de-
termined statically, the actual object that the reference is
pointing to is not known until runtime. Hence to access the
label of a ﬁeld, say foo .pub1, we ﬁrst need to know the
offset of foo in the instance ﬁeld array. To do this, we in-
strument all classes to have an additional ﬁeld that stores
this offset. We call this ﬁeld mac obj off . The value of
the offset ﬁeld is determined at runtime by the allocation
site instantiating the object. We instrument all allocation
sites so that they appropriately pass the allocation number
to the appropriate constructors. We also instrument all the
constructors in a class to initialize the mac obj off
to a
value communicated by the allocation site. We use a global
class, which we describe later, to communicate the alloca-
tion number between the allocation site and the construc-
tor. Hence the runtime address calculation for the label of
foo .pub1, is foo . mac obj off + ﬁeld no . Therefore to
access the label of an instance ﬁeld requires a ﬁeld access
and an array access.
To make this calculation more amenable to optimization,
we declare mac obj off as final. A ﬁnal ﬁeld, once ini-
tialized, is guaranteed to have the same value always. Hence
the just-in-time compiler can treat the calculation for the la-
bel as a constant. Our experiments have shown that this has
a signiﬁcant effect on the run-time performance of instance
ﬁeld accesses.
3.3. Security Policy Speciﬁcation
The security policy is responsible for specifying sources,
sinks, and declassiﬁers for labels.
“Sources” are the
sources of sensitive information in the program. The pol-
icy speciﬁes them as entities whose labels will always be as
strict as some label constant. For example, a policy may
specify that the label of the return value of the method
getPassword() is always at least as strict as secret .
Typically, sources are return values of methods but they can
also be ﬁelds in a class. Sources seed the system with labels
of sensitive information, which are then propagated to other
parts of the system. A policy also deﬁnes the default label
used by the system at initialization.
Sinks are methods whose side effects may be observable
externally to the program, such as a ﬁle read/write. A policy
speciﬁes all such methods and also the most restrictive label
that is allowed to be passed into such a method as a parame-
ter. Any call to a sink with a parameter more restrictive than
the speciﬁed label is blocked by runtime mechanisms.
Bear in mind that our system retroﬁts information-ﬂow
constraints on existing bytecode after the fact.
In prac-
tice, this is done by explicitly specifying labels only on rel-
atively few data sources and sinks, most of which will be
associated with library classes. Our system will then auto-
matically prevent information ﬂows that violate the current
policies. For example, it can prevent passwords obtained as
a result of calling getPassword() to be written to the
ﬁle system—without any modiﬁcation or recompilation of
the program on which this policy is being enforced.
Policies are also responsible for specifying declassiﬁers.
Declassiﬁers are places in the program at which a policy
dictates to lower the label of a variable. This may lead to a
leak of information, but in some circumstances the leak of
information is desirable. For example, in a password check-
ing program, the return value of the program depends on the
actual password, and hence transmitting the information is a
leak of information. However, returning this small amount
of information whether or not the password matches is actu-
ally the purpose of the program, and hence a policy should
speciﬁcally allow it. The policy speciﬁes such declassiﬁca-
tion points. Such declassiﬁers are different from automatic
declassiﬁcation points, in which the analysis determines au-
tomatically that is safe to lower the program counter label.
Our method of policy speciﬁcation is different from pro-
gram annotations in systems such as Myers’ Jﬂow and
Jif [30, 31] since it is centralized and cleanly separated from
the code. Also, a well speciﬁed policy can be independent
of a program. For example, in the Java core libraries there
are only very few methods that directly access the ﬁle sys-
tem. If a policy can specify this narrow funnel, then any pro-
gram accessing ﬁles can use this policy. Currently we spec-
ify policy by writing code in Java itself. This gives us a lot
of ﬂexibility to experiment with many policies. However, in
the future we want to deﬁne a declarative policy speciﬁca-
tion language which the instrumentation code understands,
so that it can automatically instrument the classes.
3.4. Dynamic Analysis
Dynamic analysis uses runtime labels to track explicit
ﬂows of information throughout the execution of a program.
It also tracks implicit ﬂows by raising the value of pc on
every conditional jump to as high as the label of the condi-
tion. It however needs static analysis annotations to lower
the value of pc. Without static analysis, our approach would
be too conservative as once the value of pc were raised, it
would never be lowered. The aim of the dynamic analysis
is to create runtime entities for storing labels for each lo-
cal variable and ﬁeld and tracking the ﬂow of information
through the execution of a program.
The dynamic analysis instrumentation is intra-method,
i.e. it does not need information about other methods. The
instrumentation is divided into two phases. The ﬁrst phase
instruments all reachable methods from the main method
with instructions to track the ﬂow of information. The sec-
ond phase instruments the sources, sinks, and declassiﬁers
appropriately to initialize tags, stop illegal ﬂows, and to
lower the values of labels.
During the instrumentation phase, we do not try to opti-
mize redundant label computations. We leave optimizations
for a later phase, where we rely on common compiler opti-
mization techniques. We tailor our instrumentation so that
the compiler can easily discover optimizations opportuni-
ties.
In the rest of this section we will describe how we
instrument various types of statements to track information
ﬂow using labels.
3.4.1 Method Calls
Method calls present a challenge as we have to communi-
cate labels between the caller and callee. For every method
call, the following three communications are required be-
tween the caller and callee: (1) pass the value of pc to the
callee method, (2) pass the labels of all the parameters to
the callee method, and (3) get the label of the return value
from the callee method.
For the purpose of sharing information between the
caller and callee methods, we deﬁne a public class. We call
this class as the “global class”. The class consists of a num-
ber of public ﬁelds with each ﬁeld being used to store the
label of a formal parameter in a method call. The number of
ﬁelds in the class is determined during the analysis, i.e. the
number of ﬁelds in the global class is equal to the maximum
number of parameters in any method that we analyse. This
ensures that our global class remains as small as possible.
Since method calls are frequent, it is desirable that the class
remains in the processor’s data cache. The pc is passed in a
similar fashion using the ﬁeld pcTag.
We instrument every call site during the analysis to as-
sign labels of actual parameters to appropriate ﬁelds in the
global class. If a method returns a value, then the label of
the return value is assigned the value in the pcTag ﬁeld of
the global class. It is the responsibility of the callee method
to have assigned the correct label in the pcTag ﬁeld before
returning to the caller.
3.4.2 Method Entry
At a method entry, the analysis has the following tasks to
perform: (1) create labels for all the locals in the method,
and (2) initialize all labels for the parameters. We create a
label for each local in the method by adding the same num-
ber of integer locals to the method, with each new integer
local acting as a label. Once the labels have been added,
we instrument the method entry to initialize the labels of
the parameters using the global class. This procedure is just
the opposite of when the method is called. We initialize the
468468
labels with the respective ﬁelds in the global class. We also
initialize the pc appropriately.
We instrument constructors slightly differently from
other methods. A constructor is also responsible for ini-
tializing the mac nodeNo ﬁeld of a class. This ﬁeld has
the index in the instance ﬁeld array where the labels of
the instance ﬁelds of the object are stored. The value of
mac nodeNo depends on the allocation site that the con-
structor is called from. The allocation site at runtime com-
municates this by assigning the value to the nodeNo ﬁeld
in the global class. The constructor then appropriately uses
this to initialize the mac nodeNo in the object.
3.4.3 Array Label
We label arrays at the granularity of an entire array i.e. we
have one label for the entire array. The value of the label
is at least as restrictive as the most restrictive label of any
element in the array. This means if an array has an ele-
ment with label secret , then the label for the array will
also be secret , and all the elements in the array will be
treated as having label secret . The coarser labeling leads to
a loss of resolution, making the analysis less precise than
if we had tracked the label of each element in the array
separately. However, it is not statically possible, in a gen-
eral case, to determine which element in the array was ac-
cessed for an array access. Just consider the statement a =
foo[random(seed)% foo.length]. In order to be
conservative, we need to assume that an array access can re-
fer to any element in the array, and hence have to work with
the strictest label of all the elements assigned to the array.
3.4.4 Assignments