exists a unique θ0 satisfying condition (i).
Indeed, xiθ0 is
computed from (i) by induction on i. Thus, given condi-
tion (1), and provided that the word problem for =R is
decidable, it is easy to check whether a given θ is a solution.
An intruder constraint system is satisﬁable iﬀ it admits at
least one solution. Two (R,Y)-intruder constraint systems
are equivalent iﬀ they have the same set of solutions. We
emphasize that, given our deﬁnition of solutions, equivalence
of systems does not depend on the exact values of ﬁrst-order
variables. This is crucial for the applications described in
Section 3.
Using the same notations as above, an (R,Y)-intruder
constraint system Σ is (X, Y )-standard iﬀ X = Xm−1 and
Y = Xm are two ﬁxed distinct variables of maximal arity in
Y (i.e. am−1 = am), Σ contains the equation xm−1 =R xm
and xm−1, xm occur in no other equation sj =R s0
A rewriting system R is subterm iﬀ: for each rule l → r
in R, r is either a proper subterm of l or a closed public
R-reduced term. In Section 4 we prove the following result:
Theorem 1. Let R be a convergent subterm rewriting
system and Y a ﬁnite set of second-order variables. The
satisﬁability of (R,Y)-intruder constraint systems is decid-
able. Assume that X, Y are two distinct variables of max-
imal arity in Y. The equivalence between (X, Y )-standard
(R,Y)-intruder constraint systems is decidable.
j of Σ.
We leave open the question if it is decidable whether two
(non necessarily standard) intruder constraint systems are
equivalent. On the other hand, the equivalence problems
useful for the applications (Section 3) only involve standard
constraint systems.
Following Delaune and Jacquemard [12], a rewriting sys-
tem R is public-collapsing iﬀ for every rule l → r ∈ R, the
following two conditions hold:
1. r 6= l and either r ∈ var(l) or r is a public R-reduced
term;
2. if l = f (l1 . . . ln) and f ∈ Fpub, then for all proper
subterms of l of the form g(t1 . . . tm) with g ∈ Fpub,
we have that either g(t1 . . . tm) is a closed public R-
reduced term, or there exists j such that tj = r.
Thus in particular, every public-collapsing rewriting system
is subterm according to our deﬁnition.
3. APPLICATION TO SECURITY
In this section we illustrate how to use the intruder con-
straint systems of Section 2 for analyzing cryptographic pro-
tocols w.r.t. trace properties and, more remarkably, resis-
tance to oﬀ-line guessing attacks.
Let us consider the following example, called the Hand-
shake protocol [15, 13]:
0. A → B :
{N}kAB
1. B → A : {f (N )}kAB
The goal of these two messages is to authenticate B from A’s
point of view, provided that they share an initial secret kAB.
This is done by a simple challenge-response transaction: A
sends a random number (a nonce) encrypted with the secret
key kAB; B decrypts this number, applies a given function
(e.g. f (N ) = N + 1) to it, and sends the result back, also
encrypted with kAB; ﬁnally A checks the validity of the
result, e.g. by decrypting the message and checking the
decryption against f (N ).
We model this protocol using the sets of public symbols
Fpub = {senc(2), sdec(2), f(1), a, b, i, c1, c2 . . .} and private
symbols Fpriv = {k(2), n, n1, n2 . . .} where the numbers in
parentheses denote the arities of non-constant symbols. We
may write {x}y or senc(x, y) equivalently. The symbols
c1, c2 . . . and n, n1, n2 . . . are pools of public, resp. private
constants used to model nonces. We equip terms with the
following convergent subterm rewriting system R, so as to
model a symmetric, deterministic, length-preserving encryp-
tion scheme (that is a cipher ):
sdec(senc(x, y), y) → x
senc(sdec(x, y), y) → x
The second rule states that any message x is a valid cipher-
text for any key y. This characteristic property of ciphers is
useful for preventing the trivial guessing attack on any mes-
sage encrypted by a weak key, which arises when decryption
fails whenever it is given a wrong decryption key.
More generally, we refer the reader to previous work [3, 6,
1, 10] for classical examples on how to model pairs, public-
key encryption, hash functions, signatures. . . using conver-
gent subterm rewriting systems.
3.1 Symbolic Traces
Informally, a symbolic trace (e.g. [19, 20, 8, 12]) is an
execution trace of the protocol where the messages sent by
the intruder (the sizes of which are unbounded) are replaced
by fresh variables xi. Each symbolic trace is associated to
a constraint system which accounts for the conditions that
the messages xi must satisfy for the trace to be feasible.
Importantly, we also keep track of the computations Xi done
by the attacker to compute the xi. This makes it possible
to deﬁne a suitable notion of equivalence between traces.
Suppose that we want to prove the authentication prop-
erty for one session on our example protocol. This boils
down to asking whether the intruder I can emulate B in the
normal session. The intruder constraint system correspond-
ing to this problem is:
∃x1, X1[{n}k(a,b)] =? x1
sdec(x1, k(a, b)) =?R f(n)
The ﬁrst equation means that x1, the answer of the intruder,
must be computable from the message sent by A using a
(public) context X1. The second one is the test done by A
upon receiving the second message. This system is easily
showed unsatisﬁable, either manually or using the proce-
dure of Section 4. (Recall that k is a private symbol so it
may not be used in X1.) Hence, there exists no attack on
authentication using only one session.
More generally, trace properties on security protocols are
veriﬁed by checking that no symbolic trace corresponding
to an attack is satisﬁable. This is possible indeed because a
bounded number of sessions of a protocol may only generate
ﬁnitely many symbolic traces [19, 20, 8, 12].
3.2 Off-line Guessing Attacks
A more interesting problem arises if the key k(a, b) is a
weak secret, that is, vulnerable to brute-force oﬀ-line test-
ing. In [10], Corin et al. give a general deﬁnition of oﬀ-line
guessing attacks using static equivalence [3, 1].
Static equivalence usually relates frames [3, 1], meant to
represent sequences of messages sent on the network.
In
our setting, a frame is a tuple of ﬁrst-order terms written
Φ = {w1  t1 . . . wn  tn} (this notation will prove useful
in the next sections). Φ is closed iﬀ all the ti are closed
terms. Two closed frames Φ = {w1  t1 . . . wn  tn} and
n} are statically equivalent, written
Φ0 = {w1  t0
Φ ≈R Φ0, iﬀ for all n-ary closed (public) contexts C1 and C2,
C1[t1 . . . tn] =R C2[t1 . . . tn] ⇔ C1[t0
n].
Let Σ be an intruder constraint system modeling the sat-
isﬁability of a given symbolic trace τ of the protocol, involv-
ing a weak secret s. Using the same notation as before, Σ is
written
1 . . . wn  t0
n] =R C2[t0
1 . . . t0
1 . . . t0
8>>>>>><>>>>>>:
X1[t1 . . . ta1 ] =?
. . .
Xm[t1 . . . tam ] =?
x1
xm
s1 =?R s0
sn =?R s0
. . .
n
1
∃x1 . . . xm,
Let Φ = {w1  t1, . . . , wam
 tam}.
The idea behind Corin et al. [10]’s deﬁnition for oﬀ-line
guessing attacks is the following. Assume that the intruder
is given an additional message tam+1 ∈ {s, s0} where s0 is a
fresh private constant. Let θ be a solution to Σ and θ0 its
(unique) extension to ﬁrst-order variables as before. There
is an oﬀ-line guessing attack on s at the end of the concrete
trace τ θ iﬀ intuitively it is possible for the intruder to dis-
tinguish (oﬀ-line) whichever tam+1 = s (correct guess) or
tam+1 = s0 (wrong guess), that is, in terms of static equiva-
lence:
0 ∪ {wam+1  s} 6≈R Φθ
0 ∪ {wam+1  s
0}
Φθ
(1)
In terms of intruder constraint systems, we model oﬀ-line
guessing attacks as follows. Let X, Y be fresh second-order
variables of arity am + 1 and x, y fresh ﬁrst-order variables.
For any term t, we deﬁne the (X, Y )-standard intruder con-
straint system Σ[t]:
∃x1 . . . xm, x, y,
8>>>>>>>>>>>><>>>>>>>>>>>>:
x1
X1[t1 . . . ta1 ] =?
. . .
Xm[t1 . . . tam ] =?
X[t1 . . . tam , t] =?
Y [t1 . . . tam , t] =?
xm
x
y
s1 =?R s0
sn =?R s0
n
x =?R y
. . .
1
Let s0 be a fresh private constant.
Fact 1. There exists a solution θ to Σ such that θ0 ful-
ﬁlls equation (1) iﬀ the two systems Σ[s] and Σ[s0] are not
equivalent.
Proof. Assume for instance that θ1 is a solution to Σ[s]
but not to Σ[s0].
(The other case is similar.) We let θ
be the restriction of θ1 to {X1 . . . Xm}, C1 = Xθ1, and
C2 = Y θ1. Let θ0 be the extension of θ to the ﬁrst-order
variables x1 . . . xm in Σ as before. In the case of Σ[s], the ex-
1 = θ0 {x 7→ C1[t1θ0 . . . tnθ0, s], y 7→
tension of θ1 is written θ0
C2[t1θ0 . . . tnθ0, s]}, whereas in the case of Σ[s0], it is written
1 = θ0 {x 7→ C1[t1θ0 . . . tnθ0, s0], y 7→ C2[t1θ0 . . . tnθ0, s0]}.
θ00
Since θ1 is a solution to Σ[s], θ is a solution to Σ and we
have C1[t1θ0 . . . tnθ0, s] =R C2[t1θ0 . . . tnθ0, s]. Besides, θ1
may only fail on the last equation of Σ[s0], thus we deduce
C1[t1θ0 . . . tnθ0, s0] 6=R C2[t1 . . . tn, s0].
Conversely, let θ be a solution to Σ such that θ0 satis-
ﬁes (1). By assumption, there exist two contexts C1 and C2
such that e.g. C1[t1θ0 . . . tnθ0, s] =R C2[t1θ0 . . . tnθ0, s] but
C1[t1θ0 . . . tnθ0, s0] 6=R C2[t1θ0 . . . tnθ0, s0]. Let θ1 = θ{X 7→
C1, Y 7→ C2}. Then, θ1 is a solution to Σ[s] but not to
Σ[s0].
As an application, the intruder constraint system Σ cor-
responding to the main session of our example protocol is
written:
∃x1, x2,8<:
X1[{n}k(a,b)] =?
X2[{n}k(a,b), {f(sdec(x1, k(a, b)))}k(a,b)] =?
x1
x2
sdec(x2, k(a, b)) =?R f(n)
with ar(X1) = 1, ar(X2) = 2. One solution θ to this system
is given by the normal run of the protocol1:
X1θ = w1 i.e. x1θ
X2θ = w2 i.e. x2θ
0
0
= {n}k(a,b)
= {f(sdec({n}k(a,b), k(a, b)))}k(a,b)
=R {f(n)}k(a,b)
Let us deﬁne the two systems Σ[k(a, b)] and Σ[s0] as above
and extend θ by
Xθ = f(sdec(w1, w3)) and Y θ = sdec(w2, w3).
1In this sense, the simple example presented here only in-
volves a passive attacker. More complex oﬀ-line guessing
attacks may be found in [15, 13].
Then θ is a solution to Σ[k(a, b)] but not to Σ[s0]. This cor-
responds to the classical guessing attack on the Handshake
protocol [15]: by decrypting both messages of the protocols
with the guess x and checking the relation
f(sdec({n}k(a,b), x)) = sdec({f(n)}k(a,b), x)
it is possible to test whether x = k(a, b) and thus to recover
the weak secret k(a, b) by brute-force testing.
4. DECISION PROCEDURE
We now describe a decision procedure for the satisﬁability
and the equivalence of (standard) intruder constraint sys-
tems. We begin by introducing extended constraint systems.
These can be seen as some syntax for representing (generally
inﬁnite) sets of solutions to the initial problem. We then de-
scribe a set of transformation rules on the extended systems
that is sound and complete for every convergent rewriting
system. Finally we show how to enforce termination in the
case of convergent subterm rewriting systems, and conclude
the proof of Theorem 1.
Due to lack of space, most proofs have been omitted. De-
tailed proofs are available in the extended version [4].
4.1 Extended Constraint Systems
Let R be a convergent rewriting system and Y a ﬁnite
set of second-order variables. An (R,Y)-extended constraint
system (or simply constraint system in this section) is a tuple
Σ = Φ; Ψ;C; σ where
• Φ is a ﬁnite set of expressions ∀β.M  t, called frame
rules (or simply rules) of Σ, where β ranges over ﬁnite
sets of second-order variables;
• Ψ is a ﬁnite set of expressions ∀β.M ./ N , called equa-
tions of Σ;
• C is a ﬁnite set of constraints of the form t1 =?R t2 and