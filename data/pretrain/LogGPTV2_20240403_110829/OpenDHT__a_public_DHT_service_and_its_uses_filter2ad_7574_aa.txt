# OpenDHT: A Public DHT Service and Its Uses

**Authors:**  
Sean C. Rhea, Brighten Godfrey, Brad Karp, John Kubiatowicz, Sylvia Ratnasamy, Scott Shenker, Ion Stoica, and Harlan Yu  
*UC Berkeley and Intel Research*

## Abstract
Deploying large-scale distributed systems, including distributed hash tables (DHTs), is a complex task. To reduce the barriers for DHT-based applications, we have developed OpenDHT, a public DHT service. Designing a DHT that can be shared among untrusting clients and diverse applications presents two main challenges: ensuring fair storage allocation and providing a versatile yet simple interface. This paper outlines our solutions to these challenges, reports on our initial deployment experiences with OpenDHT, and describes the various applications already using the system.

### Categories and Subject Descriptors
C.2 [Computer Communication Networks]: Distributed Systems

### General Terms
Algorithms, Design, Experimentation, Performance, Reliability

### Keywords
Peer-to-peer, distributed hash table, resource allocation

## 1. Motivation
Large-scale distributed systems are notoriously difficult to design, implement, and debug. Research has focused on simplifying their construction by providing basic primitives, such as distributed hash tables (DHTs), which offer a simple put/get interface with enhanced capacity and availability through key space partitioning and data replication across peers.

While the DHT field is still evolving, several well-debugged DHT implementations [1-3] are now available, and numerous DHT-based applications [15, 20, 26] are in daily use. However, maintaining a DHT requires significant operational effort. As DHT-based applications proliferate, it is natural to consider whether a shared DHT deployment could amortize this effort across multiple applications. Many applications access DHTs through a narrow interface, suggesting they might benefit from a shared infrastructure.

In this paper, we report on the design and implementation of OpenDHT, a shared DHT deployment. Our goal is to provide a free, public DHT service running on PlanetLab [5]. We envision that this free service could evolve into a competitive commercial market for DHT services.

## 2. Overview of Design
### 2.1 Interface
Designing OpenDHT involves balancing generality and ease-of-use. There are three broad classes of DHT interfaces, each with different levels of generality and simplicity:

1. **Routing:** Provides general access to the DHT node responsible for the input key and each node along the routing path.
2. **Lookup:** Provides general access to the DHT node responsible for the input key.
3. **Storage:** Supports the put(key, value) and get(key) operations but exposes no other interface.

The routing model is the most general, allowing arbitrary code invocation at each node. The lookup model allows code invocation only at the endpoint. The storage model is the least flexible, providing only put/get primitives. For OpenDHT, we prioritize simplicity, choosing the storage model. To enhance flexibility, we introduce Recursive Distributed Rendezvous (ReDiR), a client library that provides a lookup interface equivalent for any set of machines.

### 2.2 Storage Allocation
OpenDHT must manage storage allocation fairly without requiring clients to monitor load. Our goals are:

1. **Definite Time-to-Live (TTL):** Clients should know exactly when to re-store their data.
2. **Fair Allocation:** Upon overload, each client should have equal access to storage.
3. **Prevent Starvation:** Ensure a minimal rate at which puts can be accepted at all times.

We present an algorithm that meets these goals in Section 4.

## 3. Interface
### 3.1 The put/get API
OpenDHT's put/get interface supports a range of applications, from file systems to naming and rendezvous. The design goals are:

1. **Simplicity:** Simple applications should be easy to write.
2. **Key Choice Flexibility:** No restrictions on key choice.
3. **Authentication:** Optional support for authentication.

The current OpenDHT deployment meets the first two goals and has some support for the third. Table 1 summarizes the put/get interface.

| Procedure | Functionality |
| --- | --- |
| put(k, v, H(s), t) | Write (k, v) for TTL t, can be removed with secret s |
| get(k) | Read all v stored under k, returned value(s) unauthenticated |
| remove(k, H(v), s, t) | Remove (k, v) put with secret s, t > than TTL remaining for put |
| put-immut(k, v, t) | Write (k, v) for TTL t, immutable (k = H(v)) |
| get-immut(k) | Read v stored under k, returned value immutable |
| put-auth(k, v, n, t, KP, σ) | Write (k, v), expires at t, public key KP; private key KS, can be removed using nonce n, σ = {H(k, v, n, t)}KS |
| get-auth(k, H(KP)) | Read v stored under (k, H(KP)), returned value authenticated |
| remove-auth(k, H(v), n, t, KP, σ) | Remove (k, v) with nonce n, parameters as for put-auth |

## 4. Storage Allocation Algorithm
[Details of the storage allocation algorithm will be provided in Section 4.]

## 5. Deployment Experience
[Details of the deployment experience, performance, and usage will be provided in Section 5.]

## 6. Conclusion
[Discussion of economic concerns and future directions will be provided in Section 6.]