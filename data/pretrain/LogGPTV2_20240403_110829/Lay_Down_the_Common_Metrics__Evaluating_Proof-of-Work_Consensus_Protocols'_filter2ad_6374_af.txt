computational power (draft),” arXiv preprint arXiv:1312.7013, 2013.
[8] Ethereum white paper: Modiﬁed Ghost
[Online].
Available: https://github.com/ethereum/wiki/wiki/White-Paper(cid:93)modiﬁed
-ghost-implementation
implementation.
[9] E. Heilman, “One weird trick to stop selﬁsh miners: Fresh Bitcoins,
a solution for the honest miner.” Cryptology ePrint Archive, Report
2014/007, 2014, https://eprint.iacr.org/2014/007.
[10] Y. Lewenberg, Y. Sompolinsky, and A. Zohar, “Inclusive block chain
protocols,” in Financial Cryptography and Data Security, 2015, pp. 528–
547.
to scale Bitcoin and
[Online]. Available:
[11] P. R. Rizun,
“Subchains: A technique
improve the user experience,” Ledger, 2016.
https://www.ledgerjournal.org/ojs/index.php/ledger/article/view/40
[12] S. D. Lerner. (2015) DECOR+HOP: A scalable blockchain protocol.
[Online]. Available: https://scalingbitcoin.org/papers/DECOR-HOP.pdf
[13] R. Zhang and B. Preneel, “Publish or Perish: A backward-compatible
defense against selﬁsh mining in Bitcoin,” in CT-RSA 2017: The Cryp-
tographers’ Track at the RSA Conference, 2017, pp. 277–292.
[14] Y. Sompolinsky, Y. Lewenberg, and A. Zohar. (2016) SPECTRE: Seri-
alization of proof-of-work events: Conﬁrming transactions via recursive
elections. [Online]. Available: https://eprint.iacr.org/2016/1159.pdf
[15] I. Bentov, P. Hub´acek, T. Moran, and A. Nadler, “Tortoise and Hares
consensus: the Meshcash framework for incentive-compatible, scalable
cryptocurrencies,” IACR Cryptology ePrint Archive, 2017.
[16] Y. Sompolinsky and A. Zohar, “PHANTOM: A scalable blockdag
protocol,” IACR Cryptology ePrint Archive, 2018. [Online]. Available:
https://eprint.iacr.org/2018/104.pdf
[17] S. D. Lerner. (2015) RSK white paper overview. [Online]. Available:
https://zh.scribd.com/document/371006520/RSK-White-Paper-Overview
[18] E. K. Kogias, P. Jovanovic, N. Gailly, I. Khofﬁ, L. Gasser, and B. Ford,
“Enhancing Bitcoin security and performance with strong consistency
via collective signing,” in Proc. 25th conference on USENIX Security
Symposium, 2016.
[19] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and
B. Ford, “Omniledger: A secure, scale-out, decentralized ledger via
sharding,” Proc. 38th IEEE Symposium on Security and Privacy, 2018.
[20] R. Pass and E. Shi, “Fruitchains: A fair blockchain,” in Proceedings
the ACM Symposium on Principles of Distributed Computing,
[Online]. Available:
of
ser. PODC ’17. ACM, 2017, pp. 315–324.
http://doi.acm.org/10.1145/3087801.3087809
[21] P. Camacho and S. D. Lerner. (2016) DECOR+LAMI: A scalable
blockchain protocol. [Online]. Available:
https://scalingbitcoin.org/papers/DECOR-LAMI.pdf
[22] G. Bissias and B. N. Levine, “Bobtail: A proof-of-work target that min-
imizes blockchain mining variance (draft),” CoRR, vol. abs/1709.08750,
2017. [Online]. Available: http://arxiv.org/abs/1709.08750
[23] W. Martino, M. Quaintance, and S. Popejoy.
(2018) Chainweb:
A proof-of-work parallel-chain architecture for massive throughput.
[Online]. Available: http://kadena.io/docs/chainweb-v15.pdf
[24] C. Natoli and V. Gramoli, “The balance attack against proof-of-work
blockchains: The R3 testbed as an example,” 2016.
[25] A. Kiayias and G. Panagiotakos, “On trees, chains and fast transactions
in the blockchain.” IACR Cryptology ePrint Archive, vol. 2016, p. 545,
2016.
[26] R. Zhang and B. Preneel, “On the necessity of a prescribed block
validity consensus: Analyzing bitcoin unlimited mining protocol,” in
Proceedings of the 13th International Conference on emerging Network-
ing EXperiments and Technologies. ACM, 2017, pp. 108–119.
[27] H. Nguyen. (2018) Proof-of-stake & the wrong engineering mindset.
[Online]. Available: https://medium.com/@hugonguyen/proof-of-stake-
the-wrong-engineering-mindset-15e641ab65a2
[28] S. Bano, A. Sonnino, M. Al-Bassam, S. Azouvi, P. McCorry,
S. Meiklejohn,
age of
blockchains,” CoRR, vol. abs/1711.03936, 2017. [Online]. Available:
http://arxiv.org/abs/1711.03936
and G. Danezis,
“Consensus
in the
[29] J. Brown-Cohen, A. Narayanan, C.-A. Psomas, and S. M. Wein-
berg, “Formal barriers to longest-chain proof-of-stake protocols,” arXiv
preprint arXiv:1809.06528, 2018.
[30] A. Miller.
(2013) Feather-forks: enforcing a blacklist with sub-
50[Online]. Available: https://bitcointalk.org/index.php?topic=312668.0
[31] A. Gervais, G. O. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf,
and S. Capkun, “On the security and performance of proof of work
blockchains,” in Proc. the 2016 ACM SIGSAC Conference on Computer
and Communications Security, ser. CCS ’16. ACM, 2016, pp. 3–16.
[Online]. Available: http://doi.acm.org/10.1145/2976749.2978341
[32] Y. Sompolinsky and A. Zohar, “Bitcoin’s security model revisited,” arXiv
preprint arXiv:1605.09193, 2016.
[33] ——, “Secure high-rate transaction processing in Bitcoin,” in Financial
Cryptography and Data Security, 2015, pp. 507–527.
[34] J. Bonneau, A. Miller, J. Clark, A. Narayanan, J. A. Kroll, and E. W.
Felten, “Sok: Research perspectives and challenges for Bitcoin and
cryptocurrencies,” in IEEE Symposium on Security and Privacy (S&P).
IEEE, 2015, pp. 104–121.
[35] M. Carlsten, H. Kalodner, S. M. Weinberg, and A. Narayanan,
the block reward,” in Proc.
“On the instability of Bitcoin without
2016 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’16. ACM, 2016, pp. 154–167. [Online]. Available:
http://doi.acm.org/10.1145/2976749.2978408
[36] A. Narayanan, J. Bonneau, E. Felten, A. Miller, and S. Goldfeder,
Princeton University Pres,
Bitcoin and Cryptocurrency Technologies.
2016.
[37] Decred Developers. (2018) Decred - autonomous digital currency.
[Online]. Available: https://www.decred.org/
[38] J. Bonneau, “Why buy when you can rent? bribery attacks on Bitcoin-
style consensus,” in BITCOIN workshop, Financial Cryptography and
Data Security. Springer, 2016.
[39] D. Meshkov, A. Chepurnoy, and M. Jansen, “Revisiting difﬁculty
control for blockchain systems,” in DPM/CBT@ESORICS 2017, 2017.
[Online]. Available: https://eprint.iacr.org/2017/731.pdf
[40] I. Eyal, “The miner’s dilemma,” in IEEE Symposium on Security and
Privacy (S&P).
IEEE, 2015, pp. 89–103.
[41] Y. Kwon, D. Kim, Y. Son, E. Vasserman, and Y. Kim, “Be selﬁsh and
avoid dilemmas: Fork after withholding (faw) attacks on bitcoin,” in
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2017, pp. 195–209.
[42] I. Tsabary and I. Eyal, “The gap game,” in Proceedings of the 11th ACM
International Systems and Storage Conference. ACM, 2018.
[43] R. Pass and E. Shi, “Thunderella: Blockchains with optimistic in-
stant conﬁrmation,” in Advances in Cryptology – EUROCRYPT 2018.
Springer International Publishing, 2018, pp. 3–33.
[44] I. Bentov, C. Lee, A. Mizrahi, and M. Rosenfeld, “Proof of activity:
Extending bitcoin’s proof of work via proof of stake [extended abstract],”
ACM SIGMETRICS Performance Evaluation Review, vol. 42, no. 3, pp.
34–37, 2014.
[45] T. Duong, A. Chepurnoy, L. Fan, and H.-S. Zhou, “Twinscoin: A
cryptocurrency via proof-of-work and proof-of-stake,” in Proceedings
of
the 2Nd ACM Workshop on Blockchains, Cryptocurrencies, and
Contracts, ser. BCC ’18. ACM, 2018, pp. 1–13. [Online]. Available:
http://doi.acm.org/10.1145/3205230.3205233
[46] V. Buterin. (2014) Ethereum: A next-generation smart contract and
decentralized application platform. [Online]. Available:
https://github.com/ethereum/wiki/wiki/White-Paper
[47] I. Eyal, A. E. Gencer, E. G. Sirer, and R. V. Renesse, “Bitcoin-
NG: A scalable blockchain protocol,” in 13th USENIX Symposium
on Networked Systems Design and Implementation (NSDI 16).
Santa Clara, CA: USENIX Association, 2016, pp. 45–59.
[On-
line]. Available: https://www.usenix.org/conference/nsdi16/technical-
sessions/presentation/eyal
188
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
[48] (2018) Waves platform. [Online]. Available: https://wavesplatform.com/
[49] (2018) Aeternity blockchain. [Online]. Available: https://aeternity.com/
[50] A. Back, M. Corallo, L. Dashjr, M. Friedenbach, G. Maxwell,
A. Miller, A. Poelstra,
“Enabling
blockchain innovations with pegged sidechains,” URL: http://www.
opensciencereview.
com/papers/123/enablingblockchain-innovations-
with-pegged-sidechains, 2014.
and P. Wuille,
J. Tim´on,
[51] R. Pass, L. Seeman, and A. Shelat, “Analysis of the blockchain protocol
in asynchronous networks,” in Annual International Conference on the
Theory and Applications of Cryptographic Techniques. Springer, 2017,
pp. 643–673.
[52] A. Kiayias, E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis,
“Blockchain mining games,” in Proceedings of the 2016 ACM Con-
ference on Economics and Computation. ACM, 2016, pp. 365–382.
[53] K. Liao and J. Katz, “Incentivizing blockchain forks via whale trans-
Springer
actions,” in Financial Cryptography and Data Security.
International Publishing, 2017, pp. 264–279.
[54] Wolfram Research,
Inc.
(2018) Newton-Pepys problem.
[Online].
Available: http://mathworld.wolfram.com/Newton-PepysProblem.html
[55] C. Decker and R. Wattenhofer, “Information propagation in the Bitcoin
network,” in 13th IEEE International Conference on Peer-to-Peer Com-
puting (P2P), 2013.
[56] Bitcoin stats - data propagation. [Online]. Available:
http://bitcoinstats.com/network/propagation/
[57] T. Rufﬁng, A. Kate, and D. Schr¨oder, “Liar,
liar, coins on ﬁre!:
Penalizing equivocation by loss of Bitcoins,” in Proceedings of the 22Nd
ACM SIGSAC Conference on Computer and Communications Security,
ser. CCS ’15. New York, NY, USA: ACM, 2015, pp. 219–230.
[Online]. Available: http://doi.acm.org/10.1145/2810103.2813686
[58] J. Poon and T. Dryja, “The Bitcoin lightning network: Scalable off-chain
instant payments,” 2016.
[59] J. Garay, A. Kiayias, and N. Leonardos, “The Bitcoin backbone protocol
with chains of variable difﬁculty,” in Annual International Cryptology
Conference. Springer, 2017, pp. 291–323.
[60] J. A. Garay, A. Kiayias, and G. Panagiotakos, “Proofs of work for
blockchain protocols,” Cryptology ePrint Archive, Report 2017/775,
Tech. Rep., 2017.
[61] P. Wei, Q. Yuan, and Y. Zheng, “Security of the blockchain against long
delay attack,” in Advances in Cryptology–ASIACRYPT 2018, 2018.
[62] T. Duong, A. Chepurnoy, and H.-S. Zhou, “Multi-mode cryptocurrency
systems,” in Proceedings of the 2nd ACM Workshop on Blockchains,
Cryptocurrencies, and Contracts. ACM, 2018, pp. 35–46.
[63] L. Kiffer, R. Rajaraman et al., “A better method to analyze blockchain
consistency,” in Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2018, pp. 729–744.
APPENDIX A
SHTB MDP DESIGN
A. Properties of Deterministic Tie-Breaking Protocols
We can simplify the state representation in these protocols
by omitting two kinds of information that do not affect the
miners’ choices of parent blocks. First, we do not need to
encode the mining history, as “latecomer” blocks can still win
a tie. Second, we do not need to explicitly encode how many
attacker chain blocks are published, as it can be deduced from
the public chain length lc. As compliant miners always work
on the same chain in deterministic tie-breaking protocols, if the
attacker publishes enough blocks so that the compliant miners
switch to the attacker chain, the public chain is abandoned
and lc is updated to zero; otherwise as long as lc > 0 we
can safely assume the compliant miners are working on the
public chain, thus different numbers of published attacker
chain blocks make no difference to all miners. This analysis
also shows that compliant miners always work on the public
chain in deterministic tie-breaking protocols.
B. State Space
We use la and lc to denote the lengths of the attacker chain
and the public chain, respectively, excluding their common
blocks. The hash region of the public chain tip is denoted as
Hashc. If we normalize the space of valid block hash to [0, 1)
and split it into 10 regions, Hashc = h means the hash resides
in [0.1h, 0.1(h + 1)), where h is the region number, an integer
ranges from 0 to 9. Hash1
a represent the hash
regions of the last and the second last attacker chain blocks,
respectively. When la ≥ lc > 0, tie denotes whether the
public chain tip is smaller than its attacker chain competitor.
It has two possible values: aWin, meaning the attacker chain
competitor is smaller, and aLose, meaning the public chain tip
is smaller.
a and Hash2
a and Hash2
The state representation differs according to the length dif-
ference of the chains: (1) When la  lc + 1, a
state is a 4-tuple (la, lc, Hash1
a). Instead of encoding
the hash regions of all attacker blocks in the leading part, we
only encode the last two. The attacker is not allowed to orphan
the public chain by winning a tie when more than one block
ahead, which favors the compliant miners.
a, Hash2
C. Actions
The attacker can choose from four actions:
Adopt. Give up the attacker chain and mine on the public
chain. This action is always available.
OverrideWithTie. Publish until the lc-th attacker block to
orphan the public chain, and keep mining on the attacker chain
after publication. Available when tie = aWin.
OverrideWithMore. Publish until the (lc + 1)-th attacker
block to orphan the public chain, and keep mining on the
attacker chain. Available when la > lc.
Wait. Do not publish anything and keep mining on the
attacker chain. Always available.
We do not claim that this action set covers all optimal
actions. It is possible that in certain states, the optimal action
is to publish more than lc +1 blocks, which is not in our action
set. This constrained attacker action set favors the compliant
miners.
An interesting implication from this action set deﬁnition is
that we can assume the attacker always mines on the attacker
chain. Adopt can be considered as working on an empty
attacker chain. Note that this does not exclude the compliant
strategy from the strategy space. The compliant strategy is
equivalent to choosing Adopt when the last block is honest
189
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
and choosing OverrideWithMore when the last block is the
attacker’s. This implication applies to all our MDPs.
D. Reward Allocation and State Transition
The compliant miners get Rc = lc only after Adopt. The
attacker gets Ra = lc or lc + 1 after OverrideWithTie or
OverrideWithMore, respectively. After each of these three
actions, information regarding blocks that are permanently
abandoned or accepted by both miners will be cleared in the
new temporary state. No reward is allocated after Wait.
a: Hash2,new
a
a, the old Hash1
When a new block is mined, it has equal probability to
reside in every hash region. For example, when there are 10
valid hash regions, the probability that the compliant miners
ﬁnd the next block in region 3 is (1 − α)/10. Assuming the
new block’s hash region is Hashnew, if the new block’s chain
is longer than its competitor, Hashnew will be encoded in
the next state as Hash1
a or Hashc, depending on the miner.
Before replacing a non-empty Hash1
a is stored
a. If la = lc − 1 in the
as the new Hash2
post-publishing temporary state and the new block is mined