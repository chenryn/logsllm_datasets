Hello, I have some data where inadvertently the x and y data were of different
types, eventually after much troubleshooting I discovered that one was
`np.float32` and the other was `np.float64`. When trying to use least-squares
minimization to fit to the data, either `scipy.optimize.curve_fit` or
`scipy.optimize.leastsq` failed in a weird quasi-silent way. The failure mode
is that the parameters are barely changed from the initial guess and the
optimization returns even though the result is clearly not good. Below is a
minimum example demonstrating the bug (from a jupyter notebook):
### Reproducing code example:
    %pylab inline
    import numpy as np
    from scipy.optimize import curve_fit
    def gauss(x, A, mu, sigma):
        return A/(sigma*np.sqrt(2*np.pi))*np.exp(-(np.power(x-mu,2)/(2*np.power(sigma,2))))
    xdata = np.linspace(-1, 1, 20)
    p_act = [1.4, 0.2, 0.2]
    ydata = gauss(xdata, *p_act) + np.random.normal(loc=0, scale=0.05, size=len(xdata))
    p0 = [1, 0, 0.1]
    xdata = xdata.astype(dtype=np.float32)
    ydata = ydata.astype(dtype=np.float64)
    fit1, pcov1 = curve_fit(gauss, xdata, ydata, p0=p0)
    xdata = xdata.astype(dtype=np.float32)
    ydata = ydata.astype(dtype=np.float32)
    fit2, pcov2 = curve_fit(gauss, xdata, ydata, p0=p0)
    print(fit1)
    print(fit2)
    plot(xdata, ydata, 'bo')
    x2 = np.linspace(xdata[0], xdata[-1], 100)
    plot(x2, gauss(x2, *fit1), 'r--')
    plot(x2, gauss(x2, *fit2), 'm--')
The output of the print statements are:
    [1.         0.05021768 0.10987875]
    [1.37911003 0.19699727 0.19586094]
### Error message:
The only signature is that there is a covariance warning when fitting with the
different data types:
    /usr/local/lib/python3.7/site-packages/scipy/optimize/minpack.py:794: OptimizeWarning: Covariance of the parameters could not be estimated
      category=OptimizeWarning)
### Scipy/Numpy/Python version information:
    1.1.0 1.15.1 sys.version_info(major=3, minor=7, micro=1, releaselevel='final', serial=0)