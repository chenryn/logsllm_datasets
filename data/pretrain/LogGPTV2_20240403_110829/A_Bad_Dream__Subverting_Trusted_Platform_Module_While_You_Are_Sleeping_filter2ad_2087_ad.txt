### Detailed Process of Exploiting the DRTM Vulnerability Using Mutable Function Pointers

#### Overview
According to Intel's specification [14], the SINIT ACM (Authenticated Code Module) reads the MLE (Measured Launch Environment) header to obtain the loaded address, size, and entry point of an MLE. The MLE header must be placed within the loaded MLE and measured by the SINIT ACM to prevent unauthorized modifications. In the latest version of tboot (1.9.6 at the time of writing), the start and end of an MLE (`mle_start` and `mle_end`) are defined in the link script (Figure 12). This includes the `.text` and `.rodata` sections, ensuring that any alterations to these sections will be detected by the SINIT ACM.

In contrast, the `.data` and `.bss` sections, which contain writable data, are not measured. Our investigation revealed that certain variables (e.g., `g_tpm`, `tpm_12_if`, and `tpm_20_if`, as shown in Figure 13) exist in these unmeasured sections and can influence the control flow. These mutable variables are function pointers that are not measured. By hooking these pointers, we can manipulate the control flow and eventually forge dynamic PCRs, bypassing the protections provided by the SINIT ACM.

#### Exploitation Process

1. **Identify Unmeasured Sections:**
   - The `.data` and `.bss` sections are not measured by the SINIT ACM.
   - Variables such as `g_tpm`, `tpm_12_if`, and `tpm_20_if` are located in these sections and can be modified without detection.

2. **Hook Function Pointers:**
   - Hook the function pointers in the unmeasured sections with custom shellcode.
   - The hook functions reside in the data section of tboot in shellcode form.
   - The hooking must be performed before the platform enters the S3 sleep state.

3. **Forge Extended Values:**
   - After obtaining the normal digests, we can forge extended values after tboot takes control by hooking the exposed function pointers.
   - The hook functions are executed, and the measurements are extended to PCR #17.
   - When the platform wakes up, tboot and SINIT ACM are executed, and the dynamic PCRs are reset and extended with the hook functions.

4. **Replay Normal Digests:**
   - The final step is to reset the TPM state and replay the normal digests.
   - The measurements are extended in a designated order to replace the measurement of the customized kernel with the normal one.

#### Evaluation

We tested our exploits on various Intel-based platforms to determine the extent of exposure to these vulnerabilities. The tested devices are listed in Table 4. The host operating system used was Ubuntu 16.04.03, and the genuine kernel 4.13.0-21-generic was customized by removing the TPM SaveState() or TPM2 Shutdown() calls.

- **SRTM Attack:** For the SRTM attack, we used the source code of CoreOS GRUB 2.0 [5].
- **DRTM Attack:** For the DRTM attack, we used the source code from the tboot project [11].

The devices were UEFI booted from an external hard disk drive, where the customized system with exploits was installed. The customized bootloader and kernel were placed under the `/boot` directory with the same names.

TPM 2.0 supports multiple banks of PCRs, each implementing different hash algorithms. Although the reported vulnerabilities do not depend on a specific hash algorithm, we used SHA-1 in all evaluations because it is supported in both versions of the TPM.

#### Results

- **DRTM Exploit Requirements:** The DRTM exploit requires devices to support Intel TXT and tboot. Some devices do not support Intel TXT, and some TXT-supporting devices do not work with tboot. As a result, only a few devices could be exploited. The tested devices are listed in Table A.1 in the Appendix.

- **SRTM Attack: Grey Area Vulnerability**
  - Table 5 compares all normal PCR values and exploited PCR values, except for PCR #10, which is extended by IMA in the kernel.
  - Additional tables listing the PCR values obtained from the normal SRTM-based booting sequence on our tested devices are available in our GitHub repository [10].

- **Static PCRs:** The static PCR values differ according to the manufacturers and models, except for PCR #4 and PCR #9, where the measurements of the boot components are consistent.

#### Conclusion

The exploitation of the DRTM vulnerability using mutable function pointers involves identifying unmeasured sections, hooking function pointers, forging extended values, and replaying normal digests. Our evaluation on various Intel-based platforms indicates that while some devices are vulnerable, others are protected due to the lack of support for Intel TXT and tboot. Further details and results are provided in the accompanying tables and figures.

---

This optimized text provides a clear, professional, and coherent explanation of the process and results of exploiting the DRTM vulnerability using mutable function pointers.