```
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
```
规则是寻找符合两个特征的流量:
*   源 IP 地址必须与`docker0`网桥的 IP 地址空间相匹配
*   车辆没有通过`docker0`桥离开。也就是说，它通过另一个界面离开，如`eth0`或`eth1`
结尾的跳转语句指定了`MASQUERADE`的目标，它将根据路由表向主机的一个 IP 接口发送 NAT 容器流量。
接下来的两行粗体字提供了类似的功能，并提供了在每个容器上发布端口所需的 NAT。让我们检查其中一个:
```
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 32768 -j DNAT --to-destination 172.17.0.2:80
```
规则是寻找符合三个特征的流量:
*   车辆不通过`docker0`桥进入
*   流量是 TCP
*   交通的目的港为`32768`
结尾的跳转语句指定了`DNAT`的目标和容器的目的地及其真正的服务端口(`80`)。请注意，就 Docker 主机的物理接口而言，这两个规则都是通用的。正如我们前面看到的，端口发布和出站伪装都可以发生在主机上的任何接口上，除非我们特别限制范围。
我们要查看的下一个表是筛选器表:
```
user@docker1:~$ sudo iptables -t filter -S
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-ISOLATION
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
-A DOCKER-ISOLATION -j RETURN
user@docker1:~$
```
同样，您会注意到默认链的链策略设置为`ACCEPT`。就过滤表而言，它对功能的影响更大。这意味着一切都是允许的，除非在规则中被明确拒绝。换句话说，如果没有规则定义，一切都还会继续。如果您的默认策略未设置为`ACCEPT`，Docker 会插入这些规则。稍后，当我们手动创建规则时，我们将默认策略设置为`DROP`，以便您可以看到规则的影响。前面的规则需要多一点解释，尤其是如果你不熟悉`iptables`规则是如何工作的。让我们一次检查一行粗体字。
第一条加粗的线负责允许来自外部网络的流量返回容器。在这种情况下，该规则特定于容器本身正在向外部网络生成流量并期待来自外部网络的响应的情况:
```
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
```
规则是寻找符合两个特征的流量:
*   车辆正通过`docker0`桥离开
*   流量的连接状态为`RELATED`或`ESTABLISHED`。这将包括作为现有流程的一部分或与之相关的会话
结尾的跳转语句引用了`ACCEPT`的目标，这将允许流通过。
第二条加粗的线允许容器连接到外部网络:
```
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
```
规则是寻找符合两个特征的流量:
*   车辆正通过`docker0`桥进入
*   车辆没有通过`docker0`桥离开
这是一种非常通用的识别来自容器并通过除了 T0 桥以外的任何接口离开的流量的方法。结尾的跳转语句引用了`ACCEPT`的目标，这将允许流通过。该规则与第一个规则一起，将允许从容器向外部网络产生的流工作。
第三条粗线允许容器间连接:
```
-A FORWARD -i docker0 -o docker0 -j ACCEPT
```
规则是寻找符合两个特征的流量:
*   车辆正通过`docker0`桥进入
*   车辆正通过`docker0`桥离开
这是识别源自`docker0`桥上的容器以及去往`docker0`桥上的目标的流量的另一种通用方法。结尾的跳转语句引用了`ACCEPT`的一个目标，这将允许流通过。正如我们在前面章节中看到的，当你禁用 ICC 模式时，这个规则变成了`DROP`目标。
最后两行粗体字允许已发布的端口到达容器。让我们检查其中一个:
```
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
```
规则是寻找符合五个特征的流量:
*   运输的目的地是其港口已公布的容器
*   车辆不通过`docker0`桥进入
*   车辆正通过`docker0`桥离开
*   协议是 TCP
*   端口号为`80`
该规则通过允许访问容器的服务端口(`80`)特别允许公布的端口工作。结尾的跳转语句引用了`ACCEPT`的目标，这将允许流通过。
### 手动创建所需的 iptables 规则
现在我们已经看到了 Docker 如何自动处理规则生成，让我们来看一下如何自己构建这种连接的示例。为此，我们首先需要指示 Docker 不要创建任何`iptables`规则。为此，我们在 Docker 系统文件中设置`--iptables` Docker 选项为`false`:
```
ExecStart=/usr/bin/dockerd --iptables=false
```
我们需要重新加载 systemd drop in 文件，并重新启动 Docker 服务，以便 Docker 重新读取服务参数。为了确保您从一张白纸开始，如果可能的话，重新启动服务器或手动清除所有`iptables`规则(如果您不习惯管理`iptables`规则，最好的方法是重新启动服务器来清除它们)。在本例的其余部分，我们将假设我们正在使用一个空的规则集。一旦 Docker 重启，您可以重启您的两个容器，并确保系统上没有`iptables`规则:
```
user@docker1:~$ docker start web1
web1
user@docker1:~$ docker start web2
web2
user@docker1:~$ sudo iptables -S
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
user@docker1:~$
```
可以看到，目前没有定义`iptables`规则。我们还可以看到，我们在过滤表中的默认链策略设置为`ACCEPT`。现在让我们为每个链将过滤器表中的默认策略更改为`DROP`。除此之外，让我们还包括一个规则，允许 SSH 进出主机，以免破坏我们的连接:
```
user@docker1:~$ sudo iptables -A INPUT -i eth0 -p tcp --dport 22 \
-m state --state NEW,ESTABLISHED -j ACCEPT
user@docker1:~$ sudo iptables -A OUTPUT -o eth0 -p tcp --sport 22 \
-m state --state ESTABLISHED -j ACCEPT
user@docker1:~$ sudo iptables -P INPUT DROP
user@docker1:~$ sudo iptables -P FORWARD DROP
user@docker1:~$ sudo iptables -P OUTPUT DROP
```
现在让我们再次检查过滤器表，以确保规则被接受:
```
user@docker1:~$ sudo iptables -S
-P INPUT DROP
-P FORWARD DROP
-P OUTPUT DROP
-A INPUT -i eth0 -p tcp -m tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
-A OUTPUT -o eth0 -p tcp -m tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
user@docker1:~$
```
此时点，容器`web1`和`web2`将不再能够相互到达:
```
user@docker1:~$ docker exec -it web1 ping 172.17.0.3 -c 2
PING 172.17.0.3 (172.17.0.3): 48 data bytes
user@docker1:~$
```
### 注
根据您的操作系统，您可能会注意到`web1`此时实际上能够 ping 通`web2`。最可能的原因是`br_netfilter`内核模块没有被加载。如果没有这个模块，桥接的数据包将不会被 netfilter 检查。要解决这个问题，可以使用`sudo modprobe br_netfilter`命令手动加载模块。为了在每次引导时加载模块，您也可以将其添加到`/etc/modules`文件中。当 Docker 管理`iptables`规则集时，它负责为您加载模块。
现在，让我们开始构建规则集，以重新创建 Docker 之前为我们自动构建的连接。我们要做的第一件事是允许容器入站和出站访问。我们将用这两条规则来做到这一点:
```
user@docker1:~$ sudo iptables -A FORWARD -i docker0 ! \
-o docker0 -j ACCEPT
user@docker1:~$ sudo iptables -A FORWARD -o docker0 \
-m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
```
虽然这两个规则将允许容器生成和接收来自外部网络的流量，但此时连接仍然不起作用。为了做到这一点，我们需要应用`masquerade`规则，以便容器流量隐藏在`docker0`主机上的接口后面。如果我们不这样做，流量将永远不会返回，因为外部网络对容器所在的`172.17.0.0/16`网络一无所知:
```
user@docker1:~$ sudo iptables -t nat -A POSTROUTING \
-s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
```
有了这些，容器现在将能够到达外部网络上的网络端点:
```
user@docker1:~$ docker exec -it web1 ping 4.2.2.2 -c 2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
56 bytes from 4.2.2.2: icmp_seq=0 ttl=50 time=36.261 ms
56 bytes from 4.2.2.2: icmp_seq=1 ttl=50 time=55.271 ms
--- 4.2.2.2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 36.261/45.766/55.271/9.505 ms
user@docker1:~$
```
然而，容器仍然不能直接相互通信:
```
user@docker1:~$ docker exec -it web1 ping 172.17.0.3 -c 2
PING 172.17.0.3 (172.17.0.3): 48 data bytes
user@docker1:~$ docker exec -it web1 curl -S http://172.17.0.3
user@docker1:~$
```
我们需要添加最后一条规则:
```
sudo iptables -A FORWARD -i docker0 -o docker0 -j ACCEPT
```