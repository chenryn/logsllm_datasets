# 针对VestaCP的新型供应链攻击
##### 译文声明
本文是翻译文章，文章来源：welivesecurity.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
VestaCP是一个托管服务控制面板解决方案，最近几个月内，VestaCP的许多用户收到了服务商的警告，表明他们服务器的带宽使用量出现异常。现在我们知道这些服务器实际上被攻击者用来发起DDoS攻击。分析受影响的某台服务器后，我们发现攻击者会将恶意软件（我们称之为`Linux/ChachaDDoS`）安装到目标系统中。在本周同一时间，我们发现VestaCP已被攻击者攻陷，自2018年5月份以来新安装的VestaCP都会受供应链攻击影响。`Linux/ChachaDDoS`与`Xor.DDoS`有一些相似之处，但与后者不同的是，前者有多个攻击阶段，并且会使用Lua作为第二和第三阶段的攻击组件。
## 二、感染方式
根据VestaCP论坛上用户Razza的[描述](https://forum.vestacp.com/viewtopic.php?f=10&t=17641&p=73282)，攻击者会尝试通过SSH运行`Linux/ChachaDDoS`。目前我们尚不清楚攻击者如何将载荷释放到`/var/tmp`目录，但如果攻击者已经拥有管理员权限，那么这将易如反掌。在安装过程中，VestaCP会创建名为`admin`的一个用户，该用户具备`sudo`权限。那么攻击者如何获取该管理员用户的密码呢？
如何获得该凭据这个问题我们有各种猜测。我们首先怀疑VestaCP的Web界面存在漏洞。在查看代码时，我们发现未加密的[密码](https://github.com/serghey-rodin/vesta/blob/0.9.8-19/install/vst-install-debian.sh#L989)会保存在`/root/.my.cnf`文件中，但攻击者仍然需要[本地文件包含](https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Local_File_Inclusion)漏洞和权限提升漏洞才能读取该文件内容。用户Falzo也挖掘过代码，并在其中发现了一些更为有趣的[信息](https://forum.vestacp.com/viewtopic.php?f=10&t=17641&start=160#p73881)：某些版本的安装脚本会将`admin`密码以及服务器名泄露给`vestacp.com`，这也是VestaCP的官方网址。
用户L4ky也[提到过](https://forum.vestacp.com/viewtopic.php?f=10&t=17641&start=170#p73890)，我们可以在`vst-install-ubuntu.sh`文件的Git历史中找到相关线索。从2018年5月31日18:15:53（UTC +
3）开始（[a3f0fa1](https://github.com/serghey-rodin/vesta/commit/a3f0fa1501d424477786e3e7150bb05c0b99518f#diff-df8da0c91e9086454c60cd468849630dR1256)），到2016年6月13日17:08:36（[ee03eff](https://github.com/serghey-rodin/vesta/commit/ee03eff016e03cb76fac7ae3a0f9d1ef0f8ee35b#diff-df8da0c91e9086454c60cd468849630dL1270)）结束，`$codename`变量中会包含经过base64编码的密码以及服务器域名，这些信息会[发送](https://github.com/serghey-rodin/vesta/blob/a7e115fbb3e7237684e720a8e9bc78d869a5d994/install/vst-install-ubuntu.sh#L1299)至`http://vestacp.com/notify/`。Falzo声称他在Debian安装程序的第809行找到了攻击代码，但与Ubuntu的安装程序不同的是，我们无法在Git历史中找到相关信息。也许VestaCP的安装程序与GitHub上公开的版本有所区别。
正是由于这种密码泄露情况，我们建议所有VestaCP的管理员应赶紧更改`admin`密码，并且加固服务器的访问安全性。如果管理员更加严谨，可以考虑审计VestaCP的源代码。
虽然这一发现令人震惊，但没有证据表明这种密码泄露渠道是`Linux/ChachaDDoS`的传播方式，攻击者使用的可能是另一种方法。
VestaCP维护人员表示他们曾被攻击过，但为何恶意代码在Git树中消失仍尚未澄清。可能攻击者修改了服务器上的安装脚本，而该版本用来创建Git中下一个版本的文件，但仅适用于Ubuntu。这意味着服务商至少从2018年5月份开始就受到过攻击。
## 三、分析Linux/ChachaDDoS
释放到目标服务器上的这款恶意软件是新型DDoS恶意软件`ChachaDDoS`的一个变种，似乎从多款已有的恶意软件演化而来。恶意软件会在第一和第二攻击阶段将进程名设置为`[kworker/1:1]`，我们可以使用`ps`命令观察该进程名。
###  第一阶段
**持久化机制以及与Xor.DDoS的关系**
`Linux/ChachaDDoS`所使用的持久化机制实际上与`Linux/XorDDos`相同，但所使用的文件名（即`dhcprenew`）有所不同。持久化过程包含如下几个步骤：
1、将自身副本拷贝到`/usr/bin/dhcprenew`；
2、如果恶意软件已经在当前主机上设置了任何持久化机制，那么将删除已有的机制；
3、将新的服务添加到`/etc/init.d/dhcprenew`中；
    #!/bin/sh
    # chkconfig: 12345 90 90
    # description: dhcprenew
    ### BEGIN INIT INFO
    # Provides:     dhcprenew
    # Required-Start:
    # Required-Stop:
    # Default-Start: 1 2 3 4 5
    # Default-Stop:    
    # Short-Description: dhcprenew
    ### END INIT INFO
    case $1 in
    start)
       /usr/bin/dhcprenew
       ;;
    stop)
       ;;
    *)
       /usr/bin/dhcprenew
       ;;
    esac
4、在`/etc/rc[1-5].d/S90dhcprenew`以及`/etc/rc.d/rc[1-5].d/S90dhcprenew`中创建指向该服务的符号连接；
5、运行`chkconfig --add dhcprenew`以及`update-rc.d dhcprenew defaults`命令，启用服务。
**下载及解密第二阶段载荷**
一旦持久化机制创建成功，恶意软件就会从硬编码的URL定期下载第二阶段载荷。有趣的是，根据我们分析的不同样本，我们看到这些URL在结构上存在相似的特性：
1、使用的是8852端口；
2、所有的IP地址都属于`193.201.224.0/24`子网（AS25092, OPATELECOM PE Tetyana Mysyk,
Ukraine）；
3、第二阶段载荷的资源名虽然看上去是伪随机字符，但始终是包含6到8个字符的一个大写字符串（如`JHKDSAG`或者`ASDFRE`）。
URL满足`http://{C&C}:8852/{campaign}/{arch}`这种格式。我们发现第二阶段的二进制程序适用于多种架构，包括x86、ARM、MIPS、PowerPC甚至是[s390x](https://en.wikipedia.org/wiki/Linux_on_z_Systems)。下载匹配受害主机架构的ELF文件后，恶意软件会使用`ChaCha`加密算法解密载荷。`ChaCha`加密算法是[`Salsa20`](https://en.wikipedia.org/wiki/Salsa20)流密码的改进版，两个密码算法使用了相同的常量`expand
32-byte k`来设置初始状态。解密函数的起始内容如下图所示：
这两种算法的区别在于初始状态有所不同，`quarter-round`方面也经过修改。我们可以通过如下代码片段识别攻击者使用了`ChaCha`算法：
`ChaCha`解密所使用的密钥大小为256位，在我们收集的所有样本中，我们发现它们使用的都是相同的密码。为了避免不断重复实现解密算法，我们开发了一个基于[Miasm](https://github.com/cea-sec/miasm)的解密[脚本](http://link_to_script_on_github/)，用来模拟解密函数。
解密第二阶段载荷后，我们发现输出结果经过LZMA压缩，因此我们只需要使用`lzma -d 
second_stage.elf`命令就能提取二进制文件。
###  第二阶段
该二进制文件大小比第一阶段载荷大得多，这主要是因为其中嵌入了Lua解释器。之前我们已经在[`Linux/Shishiga`](https://www.welivesecurity.com/2017/04/25/linux-shishiga-malware-using-lua-scripts/)中看到使用Lua的恶意软件。第二阶段载荷的目的是执行硬编码的Lua载荷，用来定期下载任务。我们将任务当成第三阶段载荷，因为任务基本上为待解释执行的Lua代码。在我们观察到的所有变种中，第二阶段载荷与第一阶段载荷使用了相同的C&C服务器。第二阶段载荷嵌入了许多Lua库（如[LuaSocket](https://github.com/diegonehab/luasocket)），用来与硬编码的C&C服务器进行通信，该服务器与第一阶段载荷所使用的服务器相同。
二进制文件中绑定了一些原生函数，这样就可以从Lua代码中调用这些函数。某些函数（如ChaCha加密函数）的绑定情况如下图所示：
Lua载荷所下载的任务会使用ChaCha进行解密（使用的是不同的加密密钥），交由Lua解释器执行。与第二阶段载荷相似，用来下载任务的URL似乎也遵循特定的模式，我们可以从如下代码片段中一窥究竟：
此外，载荷应该会使用上图中指定的URL地址来发送关于任务执行情况的某些统计信息。然而在实际环境中，攻击载荷只发送了MAC地址以及其他一些信息：