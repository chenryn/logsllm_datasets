> 翻译自Jirairya,译者水平有限，有错误和不当之处，望大佬指出。
>
> 原文出处：[Attacking JavaScript Engines: A case study of JavaScriptCore and
> CVE-2016-4622](http://www.phrack.org/papers/attacking_javascript_engines.html)
### 0 简介
本文力图以特定漏洞为例，介绍JavaScript引擎的利用，着重阐述JavaScriptCore，WebKit中的引擎。出现这个漏洞问题的是[CVE-2016-4622](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4622)。在2016年初的[ZDI-16-485](http://www.zerodayinitiative.com/advisories/ZDI-16-485/)[1]被披露，它允许攻击者注入错误的Javascript对象到引擎使地址溢出。利用这些，将导致在渲染器进程内部执行远程代码。但是该Bug已经在650552a版本修复。本文中的代码片段来自于已经提交了的320b1fc版本，这个版本是最后一个容易受攻击的版本。早在一年前的2fa4973版本发现了漏洞。所有的攻击代码都在Safari9.1.1上测试过。
对所述脆弱性的利用需要各种引擎内部构件的知识，当然，其本身也是很有趣的。因此，我们将通过一部分Javascript引擎的知识片段来讨论，此处所讲概念对于其他语言的引擎也适用。
不过，整体而言，Javascript语言的熟练度不会影响本文的阅读。
### 1 Javascript引擎的概述
通常，Javascript引擎的架构：
  * 在编译器的基本结构上，至少包含一个即时(JIT,just-in-time)编译器
  * 能对JavaScript值操作的虚拟机
  * 在运行时，能提供一组内置对象和函数
我们不会太关注的编译器基础结构的内部工作，因为它们大多与本文讨论的Bug无关。我们的目标，是从给定的源码中将编译器视为一个能发出字节码的黑盒(在JIT编译器下的本地代码)
#### 1.1 值,VM和Nan-boxing
通常，虚拟机(VM)具有可以直接执行发出字节码的解释器，VM通过基于堆栈的机器和围绕堆栈的值实现(与基于寄存器的机器相反)。特定操作码处理程序的实现类似于：
    CASE(JSOP_ADD)
    {
        MutableHandleValue lval = REGS.stackHandleAt(-2);
        MutableHandleValue rval = REGS.stackHandleAt(-1);
        MutableHandleValue res = REGS.stackHandleAt(-2);
        if (!AddOperation(cx, lval, rval, res))
            goto error;
        REGS.sp--;
    }
    END_CASE(JSOP_ADD)
注意，这个例子实际上来自Firefox的JavaScriptCore——Spidermonkey引擎(这以后就统称为JSC)，这是使用汇编语言形式编写的解释器，因此上面例子不是那么直观。但感兴趣的读者可以在LowLevellnterpreter64.asm中找到JSC的低级解释器(llint)的实现。
通常，第一级JIT编译器（有时称为基线JIT）负责消除解释器的一些调度开销，而高级JIT编译器执行复杂的优化，类似于我们习惯用的预编译器。优化JIT编译器一般要预判，意味着它们将基于一些预测来执行优化，类似于“这个变量将总是包含一个数字“。如果猜测是不正确的，代码将通常跳到一个较低的层。有关不同执行模式的更多信息，读者可参考[[2]](https://webkit.org/blog/3362/introducing-the-webkit-ftl-jit/)和[[3]](http://trac.webkit.org/wiki/JavaScriptCore)。
JavaScript是一种动态类型语言。因此，类型信息与运行时的值有关，而不是编译时的变量和相关联。
[JavaScript类型系统[4]](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-data-types-and-values)定义了原始类型（数字，字符串，布尔，空，未定义，符号）和对象（包括数组和函数）。特别地，在JavaScript语言中没有如在其他语言中存在的类的概念。相反，JavaScript使用所谓的“基于原型的继承”，其中每个对象都有一个（可能为空）对原型对象的引用，它的属性在继承父对象的基础上扩展。感兴趣的读者参考[JavaScript规范[5]](http://www.ecma-international.org/ecma262/6.0/#sec-objects)了解更多信息。
出于性能原因，所有主要的JavaScript引擎都表示不超过8个字节的值（快速复制，适合64位体系结构上的寄存器）。有些浏览器，如Google的v8引擎就是使用带标记的指针来表示值。其中最低有效位指示值是指针，还有可能是某种形式的立即数(如整数或定义过的符号特定值)。另外，Firefox中的JavaScriptCore（JSC）和Spidermonkey使用一个名为NaN-boxing的技术。 NaN-boxing利用多位模式呈现，因此这些位中的其他值可以被编码。具体来说，每个IEEE
754(IEEE二进制浮点数算术标准)规定了浮点数所有指数位用不等于零的分数表示Nan-boxing。对于双精度值[6]，这就由2 ^
51个不同的位模式（忽略符号位并将第一个小数位设置为1，所以这也可以表示nullptr）。在64位平台上，目前只有48位用于寻址，其余32位整数和指针也就可以进行编码。
JSC使用的方案在JSCJSValue.h中有很好的解释，读者可以阅读。 重要的相关部分引用如下：
        * 前16位表示已编码的JSValue的类型：
        *
        *     Pointer {  0000:PPPP:PPPP:PPPP
        *              / 0001:****:****:****
        *     Double  {         ...
        *              \ FFFE:****:****:****
        *     Integer {  FFFF:0000:IIII:IIII
        *
        *
        * 我们实现的方案通过对数值执行64位整数加法来对双精度值进行编码。这个                               
        * 操作之后，没有编码的双精度值将以模式0x0000或0xFFFF开始。在执行浮 
        * 点运算之前，必须通过反转该操作来解码值。
        *
        * 
        * 用16位标志0xFFFF标记有符号位的32位整数。
        *
        * 用标志0x0000表示指针或者其他标志的立即数。而布尔值，空值和未定义 
        * 值由特定的、无效的指针值表示：
        *     False:     0x06
        *     True:      0x07
        *     Undefined: 0x0a
        *     Null:      0x02
        *
有趣的是，0x0不是有效的JSValue，这会导致内部引擎崩溃。
#### 1.2 对象和数组
JavaScript中的对象本质上是作为（键，值）对存储的属性的集合，可以使用点运算符（foo.bar）或通过方括号（foo
['bar']）访问属性。至少在理论上，用作键的值在执行查找之前要转换为字符串。
数组被规定为特殊（“异常”）对象，如果属性名称由32位整数表示，其属性也称为[元素[7]](http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects)。如今的大多数引擎将这个概念扩展到所有对象,然后数组变成具有特殊“length”属性的对象，其值总是等于最高元素的索引加1。所有这些对象都有共同的属性，都可以通过字符串、符号键、整数索引访问。
在内部，JSC将属性和元素存储在同一个内存区域中，并在对象本身中存储指向该区域的指针。这个指针指向区域的中间，属性存储在它的左边（低地址），元素存储在它的右边，
还有一个小标题位于指向包含元素向量长度的地址之前。值向左向右扩展，类似于蝴蝶的翅膀 ，所以这个表现形式被称为“Butterfly”
，在下文，我们将指针和指针指向的存储器区域称为“Butterfly”，之后注意这一点，会使文章的理解更加轻松一些。
    --------------------------------------------------------    .. | propY | propX | length | elem0 | elem1 | elem2 | ..
    --------------------------------------------------------                                ^
                                |
                +---------------+
                |
      +-------------+
      | Some Object |
      +-------------+
虽然一般情况下，元素不必被线性地存储在存储器中。但特别地，诸如
        a = [];
        a[0] = 42;
        a[10000] = 42;
这段代码将可能导致数组以某种稀疏模式存储，其执行从给定索引到索引后备存储器中的附加映射步骤。这样的数组就不需要10001个索引值。数组不仅有许多存储模型，还用使用许多不同的方法来存储数据。例如，32位整数的数组可用本地形式存储，以避免在Nanboxing操作时的解包和重新开始进程的情况，也节约了内存。因此，JSC在
_IndexingType.h_ 定义了一组不同的索引类型。最重要的是：
        ArrayWithInt32      = IsArray | Int32Shape;
        ArrayWithDouble     = IsArray | DoubleShape;
        ArrayWithContiguous = IsArray | ContiguousShape;
这段代码中，最后一段代码存储的是JSValues，而前两段代码存储的是它们本机类型。在这一点上，读者可能想知道如何在这个模型中执行属性查找，这点将在后面深入讨论这一点。但在JSC中被称为“结构”的特殊元对象只与每个对象提供的从属性名称到索引值的映射相关联。
#### 1.3 函数
函数在Javascript语言中非常重要，在此我们有必要讨论一下。
当执行函数主体时，两个特殊的变量变得可用。其中一个变量是'arguments'，提供对函数的参数（和调用程序）的访问，从而使得能够创建具有参数的函数。
另一个是“this”，它可以根据函数的调用来引用不同的对象：
  * 如果调用的函数为一个构造函数（'new func（）'类型），'this'指向新创建的对象。在函数定义期间设置了一个新对象的时候，构造的函数已经为函数对象设置了.prototype的属性。
  * 如果调用的函数是某个对象的方法（'obj.func（）'类型），那么'this'将指向引用对象。
  * 否则'this'只是指向当前的全局对象。因为它不属于任何函数。
由于函数是JavaScript中的第一类对象，它们也可以具有属性。 我们已经看到了上面的.prototype属性。
另外还有每个非常有趣的函数（实际上是函数原型）是.call和.apply函数，它们允许使用给定的“this”对象和参数调用它们。
例如，用它们实现装饰器功能：
    function decorate(func) {
        return function() {
            for (var i = 0; i argument(0).toNumber(exec);
            double arg2 = exec->argument(1).toNumber(exec);
            return JSValue::encode(JSValue(operationMathPow(arg, arg2)));
        }
我们可以看到：
  1. JavaScript本地函数的签名
  2. 如何使用参数方法提取参数（如果没有提供足够的参数，则返回未定义的值）
  3. 如何将参数转换为其所需类型？有一组转换规则控制数组转换成将要使用的数字。(稍后还有更多关于这点的内容)
  4. 如何对本地数据类型执行实际操作
  5. 如何将结果返回给调用者？在这种情况下，只需将基本数字编码为值即可。
这里还有一个显而易见的地方：各种核心功能（operationMathPow()）都用分离开的函数操作，这样就可以方便地从JIT编译了的代码调用函数，实现功能模块化的操作。
### 2 Bug