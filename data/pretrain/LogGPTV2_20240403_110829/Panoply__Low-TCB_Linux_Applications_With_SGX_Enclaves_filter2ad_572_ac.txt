oper annotations provided in the source code. If the micron is
created successfully, the hardware returns an identiﬁer which
is a unique value for that instance of micron. The OS assigns a
5
Linux	Kernel	Non-enclave	Logic	Untrusted	SDK	Lib		Panoply	Shim	Lib	Trusted	SDK	Lib		Enclave-bound	Logic	SGX	Driver	libc.so	Micron Linux User-level Process Enclave PanoplySource Code Programmer Annotations           CompilerInstrumentation       CreatingMicronsPanoplyApplicationM1 PL M2 E1 E2 12							Add	calls	to		Panoply	API	Add	Flow	Checks								Intel	SGX	SDK	Panoply	Shim	Enclave-bound	Code	Message Freshness: The OS can replay a previously cap-
tured message to arbitrarily invoke functions of the receiver
microns (for e.g., line 25 in Figure 1). To prevent against
replay attacks, PANOPLY ensures that every call message
from one micron to another is distinctly identiﬁable. This
allows us to maintain the freshness guarantees for every valid
message exchanged between microns. To achieve this,
the
sender micron generates a 128-bit fresh nonce using Intel
SGX’s random number generator (RDRAND)1 at the start of
session with each micron, as a session-id between a pair of
microns. The nonce is incremented as a counter / sequence
number in all
the subsequent messages and authenticated-
encrypted to prevent the OS from tampering it. Each micron
stores a mapping of micron-id (cid:55)→ session-id for ev-
ery micron it communicates with. Figure 5 shows the protocol
for communicating between three microns. The sender attaches
this nonce in the ﬁrst call message. The receiver veriﬁes if the
incoming message is from an authorized sender. On validating
the authenticity of the sender, it checks if it is the ﬁrst message
from the particular sender during the application execution.
If it is the ﬁrst message of a session, the receiver sets the
nonce value as the session-id for communicating with the
sender micron. For other subsequent messages, the receiver
micron checks if the session-id is in the expected sequence.
For all valid incoming call messages,
the receiver micron
executes the requested function and increments the session-id
on successful execution of the function (Figure 5 (b), (c)). The
sender micron waits for the receiver micron to complete the
execution and return (Figure 5 (a), (b)). Thus, the application
executes sequentially and proceeds in lock steps.
Reliable Delivery: When delivering a message from one
micron to another, the OS can arbitrarily drop the call messages
(for e.g., line 4 in Figure 1). This results in silent abort / failure
of the communication between two microns. To avoid this,
PANOPLY introduces an acknowledgment message similar to
ACK in the TCP protocol. After the receiver micron executes
the requested function in the call message, it appends the
session-id with an ACK message to the sender micron and
increments the session-id. The sender micron checks whether
the session-id attached with the ACK is valid. If the check
is successful, the sender micron increments its own session-id
and is ready to make the next call message to the receiver
micron (Figure 5 (a), (b)). If the sender fails to receive
an acknowledgment, it successfully detects that the OS has
silently dropped its messages. The sender micron aborts its
execution if the ACK is either not received or contains an
invalid session-id.
B. Expressiveness with Low TCB
Enclaves are limited in terms of the programming ex-
pressiveness they support. Speciﬁcally, standard C primitives
such as system calls, networking APIs, ﬁle system operations,
multi-threading, multi-processing and event handling do not
work out-of-the-box within enclaves. As a recourse, PANOPLY
addresses each of these limitations by creating microns.
System Calls. Enclave code cannot directly make a system
call to the OS. Therefore, PANOPLY redirects all the system
1This number is passed through an extractor to generate a cryptographically
secure random number.
Fig. 5.
(a) Micron A is a sender micron that makes a call to foo function
in micron B. (b) Micron B is both a sender as well as receiver micron that
executes function foo and invokes function bar in micron C. (c) Micron C is
a receiver micron that executes function bar.
handle for this identiﬁer, however PANOPLY does not trust the
OS handles. Instead, PANOPLY shim library assigns a micron-
identity for each micron instance and internally maintains a
mapping of this name and the hardware identiﬁer returned
by SGX. PANOPLY uses this micron-identity for all further
inter-micron interactions. Before starting any interactions, the
PANOPLY shim code attests other microns by the processor
for an attestation quote and veriﬁes the measurement from the
public attestation service [33].
Inter-micron Flow Integrity. Inter-micron ﬂow integrity en-
sures that the application exhibits the same control and data
ﬂow across multi-micron execution, as intended in the orig-
inal application. In our design, we consider the interaction
between multiple microns as a communication protocol where
the adversarial OS acts as a mediator between the microns.
PANOPLY guarantees that micron execution is protected against
attacks such as silent aborts or message replay from the
underlying OS. For this purpose, PANOPLY enforces a secure
and authenticated inter-micron protocol with the following
design.
is exchanged between the microns. Moreover,
Conﬁdentiality & Integrity: During inter-micron commu-
nication, the (mediator) OS can observe all the information
that
it can
change the values of the incoming and outgoing messages from
the microns. To block this capability of the OS, PANOPLY
performs authenticated encryption of every incoming and
outgoing message of the micron.
Sender / Receiver Authentication: When a micron is ex-
ecuting, the OS can impersonate to be a sender micron and
spoof spurious calls to a receiver micron (for e.g., Line 13 in
Figure 1). It can also impersonate to be a receiver and hijack all
the micron-bound calls. To prevent such spurious messaging
from the OS, PANOPLY ensures that only a pre-deﬁned set of
authorized microns included in the application interact with
each other. For this, it makes use of the secure mapping of
micron identities to its instance which is established during
the micron initialization phase. PANOPLY shim code checks the
authenticity of each micron-identity for all call-rets points
— only legitimate call sites can invoke the respective functions
and return back. Further, it also checks if a particular micron is
authorized to perform a given interaction. PANOPLY discards
messages from unauthorized microns and aborts execution.
6
Call fooi()Micron AMicron CSend Ack_barjSend Ack_fooiMicron BCall barj()Execute bar()Execute foo()Wait forAck_barjExecute foo()Wait forAck_fooiB	i	A	i	C	j	B	j	j = j+1j = j+1i = i+1i = i+1(a)(b)(c)calls from the enclave code to our custom wrappers in the
PANOPLY shim library. The shim library is responsible to make
the correct OCALL and ECALL to invoke these calls in the
OS. It is in-charge of exiting out of the enclave, executing the
system call in the untrusted component and relaying the return
values back to the enclave.
Inside the shim, PANOPLY performs custom checks on
the system call return values inside the enclave to defend
against well-known class of Iago attacks [26]. Nearly two third
(205/309) of the system calls return 0 or error, and another one
third (104/309) return an integer. In addition to return values,
system calls can also return data via parameters passed by
reference. Most of the parameters are data structures which
contain control ﬁelds. After checking the speciﬁcations of
all the system calls, we identify 50 system calls (16%) that
write information into 20 distinct structures. Most of them
(18 structures) only have integer ﬁeld types, similar to return
values. Other structures contain structure pointers or function
pointers. Speciﬁcally, we add sanitization code to ensure that
return values are consistent with the POSIX semantics.
For return values that have static data types such as integer
ﬁelds with 0 or error calls, PANOPLY compares the return value
with 0 and a set of valid error numbers per system call. If it
detects return values such as invalid error numbers, then the
check reports failure. For return values that lie within a range,
PANOPLY checks that the return value conforms to a valid
range depending on the return type. For e.g., the read system
call in Linux has an integer return type as shown below.
size_t read(int fd, void *buf, size_t len);
The shim code knows the input length (len) requested
by the application to read. Thus, it checks that the system call
return value and pass-by-reference parameter (buf) is less than
or equal to the requested length. This check limits the return
value within a much smaller range than the original range of
variable type. Similar to return values, PANOPLY sanitization
logic checks all the structures with integer ﬁelds returned by
the system call. The policy is similar to the check on return
values — based on the ﬁeld type, the code ensures that the
value is within a valid range.
Few of the system calls return structure pointers or function
pointers which are handled specially in our system. For e.g.,
connect system call returns a pointer to a structure of
sockaddr type as shown below. For such dynamic data types,
PANOPLY library needs developer assistanace for performing
deep checks for such structures. For example, PANOPLY can
check the ﬁelds of sa_family_t structure which itself is a
ﬁeld of sockaddr that is returned by the connect system
call with developer annotations for the correct bounds.
int connect(int sockfd,
const struct sockaddr *serv_addr,
socklen_t addrlen);
struct sockaddr {
sa_family_t sa_family;
char
sa_data[14]; }
Note that PANOPLY’s checks do not protect against any
vulnerabilities such as buffer overﬂow that are present within
the original application. For example, in the read call if the
len is not provided, then a check for the buf variable is
Fig. 6. Design for on demand multi-threading in PANOPLY.
not performed by PANOPLY since the buffer size is not known
statically. The developer can provide an upper bound based
on the maximum ﬁle size. However, since there is no concrete
check on the size of buf, the original code itself is susceptible
to buffer overﬂow attacks.
Multi-threading. Enclaves have a limited support for thread-
ing — there is a gap between program abstractions in UNIX
and that provided by SGX. In SGX SDK, the application
has to statically determine how many and where the threads
are initialized. Intel SGX ensures that all
the thread-local
memory (such as thread stack) is isolated from each other.
It also provides a Thread Control Structure (TCS), a data
structure to hold thread-speciﬁc information such as program
counter, stack pointer, register values, and execution context
state of the thread. Since the enclave has to know the total
size to be allocated for saving TCS structures, the enclave
has a statically pre-speciﬁed number (say, k) of TCS data
structures. Thus, it can only support maximum k concurrent
threads during the entire execution of the enclave. Thus, SGX
does not allow to dynamically execute arbitrary threads on-
demand. Although the application can create threads outside
the enclave, the number of concurrent threads executing in the
enclave at a given time is limited to the pre-determined value.
Many applications do not ﬁt in this regime of thread usage.
For instance, number of concurrent threads in a web server is
a function of number of requests that the server has to serve.
On-demand Threading: PANOPLY gives the abstraction of
arbitrary number of threads by supporting POSIX threading
(pthread) API. Applications can dynamically create threads
by calling the standard pthread API. To support this abstrac-
tion, PANOPLY realizes the notion of virtual threads for the
applications. Figure 6 shows an overview of PANOPLY design
to support on-demand multi-threading. Under the hood,
it
multiplexes these virtual threads on the underlying enclave
threads and uses the TCS structure and SGX threading APIs.
Speciﬁcally, PANOPLY threading API creates TCS structures
for a pre-determined pool of threads per micron (say k).
When a speciﬁc thread wants to enter an enclave, PANOPLY
ﬁrst checks if the host-enclave can accommodate the thread
concurrently. If so, PANOPLY sets the correct micron id, thread
arguments, and redirects the thread execution to enter the
micron. The challenge is when a micron has already reached
its maximum concurrent thread limit. At this point, there are
two design choices: (a) evict an executing thread and schedule
7
Panoply	Shim	Lib	Panoply	Shim	Lib	TCS1	TCS2	TCS3	TCS4	Thread Control ManagerShared Variables Virtual Threads TCS1	TCS2	TCS3	TCS4	Micron AMicron A’the execution of the new thread (b) spawn a new micron to
cater to the k + 1 thread. Although eviction is a clean solution,
it incurs additional operations of save-restore and scheduling
inside the enclave. PANOPLY does not adopt this design and
instead spawns a host enclave on-demand. Speciﬁcally, if the
micron reaches its maximum capacity of concurrent threads,
PANOPLY launches a new micron thus increasing the size of
threads from k to 2k. This design choice comes with a caveat
that all the shared memory between threads has to be accessible
across the two microns. To this end, PANOPLY introduces a
thread control manager for such global thread memory that
acts as a reference monitor. For supporting (k + 1)th thread,
PANOPLY launches a new micron and all the shared memory
operations are performed via the thread control manager, as
done in a write-through cache. The PANOPLY shim library
is responsible for redirecting the micron code to this thread
control manager if the total number of concurrent threads
running is greater than k. When the threads are less than k,
they access the local copy via shim within the host enclave.
Synchronization: SGX SDK only supports basic thread syn-
chronization primitives — spin locks and mutexes. However,
higher level synchronization primitives such as semaphores,
conditional variables, barriers, and read / write locks are not yet
supported in SGX. Thus, the programmer has to realize these
constructs by using mutexes available with the limited SGX
threading support. Instead, PANOPLY exposes the full suite
of pthread synchronization primitives inside the enclave.
It implements these operations using the SGX’s mutex syn-
chronization support. PANOPLY supports the POSIX threading
API pthread for semaphores, conditional variables, barriers,
and read / write locks operations based on SDK-supported
mutexes. For all synchronization operations which are local to
a micron’s code, PANOPLY keeps the synchronization objects
inside the micron. For global synchronizations across microns,
PANOPLY creates a notion of inter-micron locks. The thread
control manager micron holds and manages all such shared
objects and all global changes are synchronized via this
micron. Speciﬁcally, to either release or get hold of a lock,
a micron has to invoke the thread control manager. The value
of the global objects can only be changed by a well-deﬁned
set of microns, thus enforcing the right semantics of mutexes
for the objects.
Multi-processing. PANOPLY supports applications which use
the UNIX fork and exec APIs. For a fork system call,
PANOPLY library instructs the OS to launch a new untrusted
child process. This child process then creates a new micron
with the same code as the parent micron. The PANOPLY
shim library performs micron initialization step and assigns
a micron-identity to this micron instance. Next, PANOPLY
establishes a communication channel between the parent and
all the children microns for maintaining the inter-micron ﬂow
integrity. As per the POSIX fork semantics, the child must
replicate the data memory state of the parent micron. There
are three possible strategies to ensure that the child micron
has access to the parent’s data.
Strategy 1. A straightforward way is to do a full replica of
parent micron’s data and communicate it to the child micron
over a secure communication channel at the fork call. This
approach involves excessive micron-micron data copy and
slows down the application needlessly, even when the child
does not use all the parent data.
Strategy 2. A second alternative is a copy-on-demand
strategy, similar to copy-on-write optimization for fork calls
in model Linux implementations. To achieve this for microns,
we can implement a page-fault based on-demand data passing
from parent to child micron. Speciﬁcally, the parent replicates
and communicates its data to the child if and only if the
child accesses it. To achieve this, PANOPLY can mark all
the parent micron’s pages as read-only (copy-on-write) and
register custom page-fault handlers 2 inside both the microns.
Whenever the child faults on a data page, the custom handler
can request the parent to communicate the data. We point
out that the support for registering page fault handling within
enclaves is not currently enabled in the SGX hardware. To
overcome this limitation, we can modify the OS to notify the
micron on faults. The OS is not trusted to reliably uplift the
fault to the user level. However, even if the OS suppresses
faults, it does not weaken the security as the parent’s pages
will still be sealed.
Strategy 3. A ﬁnal strategy is to statically identify what data
is accessed by the forked child micron. When the application
performs a fork, the parent micron can replicate / communicate
these statically identiﬁed data values to the child micron. To
reason about the incompleteness of the static analysis, the
system can raise a run-time error to ﬂag any data values which
were not replicated. This way, the developer can add custom
code to replicate these values. In our experiment applications,
we observe that most of the data that
is required by the
child micron is small and does not need full data space
replication. Thus, PANOPLY can statically identify the variables
and communicate their values at fork and replicate them in
the child micron. Developer can additionally annotate data
variables that are shared between parent and children microns.
In many cases, strategy 3 is cleaner.
PANOPLY provides a generic implementation using strategy
1, such that any application which uses fork can continue to
execute without excessive developer efforts. In Section IV-D,
we discuss the details for implementing strategy 1 in existing
SGX SDK. In the future when the SGX2 hardware is available,
strategy 2 can also be integrated in PANOPLY, subject
to
speciﬁc design details of the SGX hardware. Currently for
cases where performance is critical, developers can chose to
resort to strategy 3.
In the case of exec, PANOPLY requests the OS to create
a new untrusted process which launches a new micron for
the exec-ed code. This micron code is attested by using the
SGX hardware primitive before the execution begins. The shim
library assigns a micron identity to this micron for further
interactions with other microns. For exec, static identiﬁcation
and copy-on-demand strategy saves a lot of redundant copy
operations, since the child micron doesn’t need access to parent
data. For cases where strategy 3 is not sufﬁcient, PANOPLY
resorts to using strategy 2.
Shared Memory. To support shared memory between two or
more microns, PANOPLY establishes a shared secret between