functionality without knowing the usermame and password. For this reason, we need
to conduct an attack surface analysis to identify the code that is vulnerable to attack
and focus on it.
For example, there are three attack surfaces of CS: GO client games: (1) setting up
a malicious server to communicate with the client; (2) using a malicious client to
play online games with other people, and then attacking the other client through
voice or chat; (3) uploading malicious maps, mods, plug-ins, etc. for others to
download to attack.
After the attack surface analysis, it can be found that there are not many points to
focus on. The first is the network communication protocol, the second is the client's
parsing of audio and chat messages, and the third is the loading and parsing of maps,
MODs, and other data. These parts of the code are the easiest to aftack. Sections such
as 3D computing, processing user input, etc. are of much lower priority.
After all of this prep work, the longest code audit/reverse engineering process
begins. Since the origin engine had a code leak more than a decade ago, the code has
changed a lot, but the overall architecture remains the same, so it is possible to
Unlike the CTF, which ended in 48 hours, my reverse engineering and vulnerability
combine source code and reverse engineering to do the vulnerability mining faster.
mining of CS: GO lasted about a month.
Usually, the time to reverse a PWN in a CTF is less than the time consumed by an
 n pp      s on   xa
vulnerability in actual vulnerability mining. Moreover, the challenges in CTF have
intended solutions, which can be exploited by following the ideas of the author, but
there are no intended solutions in actual vulnerability mining, which means that there
are unexploitable vulnerabilities, which may be that there is no way to execute the
vulnerability code in the default configuration, or there is no way to bypass the
protection mechanism. Especially in today*s environment of constantly updated
vulnerability mitigations, a single vulnerability is often impossible to exploit. It is
often necessary to combine several vulnerabilities to achieve remote code execution,
which is often referred to as an exploit chain in Oday attacks. I have found more than
10 vulnerabilities in the CS: GO code, but so far I have not been able to make up a
complete exploit chain for a stable remote attack on a CS: GO client in Windows 10.
Another obvious difference from CTF exploits is that realistically, exploits can
because there are often functions, constructs, etc. in a program that can help an
often refer to other researchers’ ideas on how to exploit vulnerabilities. This is
attacker to exploit an exploit. In this case, it can be very rewarding to refer to some
examples of exploits performed by previous researchers.
Although the actual vulnerability mining is very different from CTF, the exploit
philosophy, fundamentals, and reverse fundamentals will remain the same. With a
little adaptation and patience, I believe that readers will be able to harvest their Oday
exploits.
---
## Page 563
550
6PWN
6.11 Summary
The author’s exposure to binary vulnerabilities began at the CTF and, like many
others, he went through the process of attending the CTF and conducting actual
security research.
1. the difference between CTF and actual vulnerability mining
There are two main differences between participating in a CTF and digging for
actual vulnerabilities: platform and perspective.
First of all, the platfomms are different, and the vulnerability challenges in CTF
mainly focus on PWN under Linux, although from 2018 onwards, there have been
challenges that are closer to real vulnerabilities, Linux is still the main keynote. I
have also been asked why so few of the security researchers already working do
Linux PC security research. In fact, there is no superiority between Windows and
Linux platforms, but security research efforts need to consider the factors of reach
and impact. For the PC side, security researchers generally focus on the mainstream
products of Microsoft, Google, Apple, Adobe, and other companies, because these
products have many users, and if problems occur, the impact is more widespread.
Moreover, the most important thing to leam in CTF is not certain skills, but the
ability to learm quickly, or rather, it is more important to develop the ability to learm
quickly than to master certain skills. Moreover, this ability is present in most CTF
participants because CTF challenges are variable and often require participants to
quickly master something they have not been exposed to at all. Therefore, the
that prevents CTF participants from becoming security researchers.
Second, the perspective is different. Actual exploits may sometimes be simpler
than CTF. Because of the time constraint of the CTF competition, the vulnerability
challenge is more about exploits, for which the challenge author will often devise all
kinds of restrictions and deliberately design the code so that the players can
circumvent these restrictions through various techniques. In actual binary vulnera-
bility research work, exploits are a relatively small part of the research process. On
the one hand, actual binary vulnerabilities tend to have somewhat generic exploits.
More importantly, because of the sheer size and complexity of real software,
researchers need to invest a lot of time in code analysis and vulnerability mining.
There is very little in-depth analysis of vulnerabilities in CTFs, mainly because
the vulnerabilities in CTFs are designed by humans. Most of the code in a CTF
challenge is designed to construct vulnerabilities or to be exploitable. Therefore, in
the process of doing PWN challenges, there are very few cases where it takes a long
time to analyze the code to find the vulnerabilities, and to analyze more code to be
able to exploit the vulnerabilities.
Actual vulnerability mining is different. It often takes days or even months of
work to find a vulnerability. But it doesn’t end there. Vulnerabilities like heap
amy oi op o st apo aiou azjeue on oa yonu se annbu uao mogao
out the memory structure and arrange the memory in the way you need it.
---
## Page 564
6.11Summary
551
2. Actual Vulnerability Study
Be sure to follow up with each cycle of vulnerability disclosures. Chances are there
are new aftack surfaces that you are unaware of, and studying vulnerability
announcements is the most effective way to leam what your peers are digging
into, where they are vulnerable, and where it is not worth stepping back in.
In addition, some of the important conference topics, some of the authoritative
figures in the industry to share are also worthy of attention information.
---
## Page 565
Chapter7
Crypto
Besides the Web and binary, another important category of challenges in the CTF is
Crypto (cryptography). Cryptography is an ancient subject that has developed with
people’s growing pursuit of information confidentiality, and has become the foun-
dation of moderm cybersecurity. In recent years, the difficulty of cryptography
challenges in CTF has been increasing, and the percentage of these challenges is
also increasing. Compared with the Web and binary challenges, cryptography tests
the basic knowledge of the participants and requires high mathematical knowledge,
ige espeue pue Kiqe suqu [eio
The cryptography challenges in CTF are varied and include, but are not
limited to: providing a large number of secret messages for certain cryptosystems
and analyzing the plaintext using statistical pattems; providing a custom cryptosys-
tem with weaknesses and the participant needs to analyze the weaknesses and
recover the plaintext; or providing an interactive interface to a weak encryption/
decryption system and the participant needs to exploit the weaknesses of the
cryptosystem to reveal certain sensitive information.
This chapter begins with encoding, then introduces classical cryptosystems, then
introduces the most representative of moderm cryptosystems and the block ciphers,
stream ciphers, and public key cryptosystems ofen found in CTFs, and finally
introduces other common applications of cryptography in CTFs. (Some of the
relevant Wikipedia entries: https://wikipedia.org/.)
Due to space limitations, it is not possible to cover all the principles of
cryptosystems in this chapter, but rather to introduce the basic concepts and
problem-solving methods. The introductory knowledge required in this chapter
includes elementary mathematics, basic number theory, and abstract algebra.
C The Author(s), under exclusive license to Springer Nat
NulL Team, Handbook for CTFers,
ure Singapore Pte Lid. 2022
553
htps:/doi.org/10.10077978-981-19-0336-6_7
---
## Page 566
554
7Crypto
7.1 Encoding
7.1.1The Concept of Encoding
Kem jeusuepuny au Suaponu ordos peouq Xpey t si Supooap pue Supooug
computers process information. The most commonly used encoding is ASCII
(American Standard Code for Information Interchange), which contains intermation-
ally accepted upper and lower case leters, numbers, common punctuations, etc., and
is a universal encoding of the Intermet.
Another well known code is Morse code, which is an intermittent signal code that
was an early form of telecommunication. Unlike binary codes that use only two
states, O and 1, the Morse code consists of the following.
•Dot (*): the basic unit.
•Dash (—): the length of 3 dots.
Spacing between dots and dashes within a letter or digit: the length of 2 dots.
•Spacing between letters (or digits): the length of 7 dots.
This encoding scheme (Fig. 7.1) can tum written characters into signals, greatly
facilitating the communication of telegraph systems.
Generally, the purpose of encoding is to process the original information for
easier transmission, storage, etc. However, unlike encryption, encoding is not
intended to hide information, nor does it use additional information such as keys;
it is only necessary to know the encoding method to obtain the original content.
Fig 7.1 Morse code
M
---
## Page 567
7.1 Encoding
555
7.1.2Base EncodingFamily
1. Base64
Base64 is a method of representing binary data based on 64 printable characters. 2°
= 64, so every 6 bits is a unit, corresponding to a printable character. 3 bytes have
24 bits, corresponding to 4 Base64 units, which means that 4 printable characters can
represent 3 bytes of arbitrary binary data. In Base64, printable characters include the
letters A to Z, a to z and numbers 0 to 9, a total of 62 characters, as well as + and /
characters. Base64 is often used in situations where only text data can be processed,
to represent, transmit and store some binary data, including MIME e-mail, XML
complex data and so on.
At conversion, 3 bytes of data are placed in a 24-bit buffer one after the other,
with the first byte taking up the higher bit (see Fig 7.2, image from Wikipedia-
base64). For less than 3 bytes of data, the remaining bits in the buffer are padded
with zeros. 6 bits are fetched at a time and selected according to their value from
ABCD&FGHIJKLMNOPQRSTUVWXYZabcdefghiJk1mmopqrstuvwxyz0123456789+/
until all input data is converted. If the original data length is not a multiple of 3 and
there is 1 input data left, add 2 °” to the encoding result; if there are 2 input data
left, add 1 *" to the encoding result. So, one way to recognize Base64 encoding is
to see if there is a “=° at the end. However, this method is not universal; when the
length of the encoded characters is exactly a multiple of 3, there is no * at the end
of the encoding result.
2. Base32 and Base16
There are also Base32 and Base16 in the Base encoding family, but the purpose of
Base32/Base16 is the same as Base64, only the specific encoding rules are different.
Base32 encoding converts a binary file into text consisting of 32 ASCII
characters.
MNOPQRSTUVHXYZ234567
Text(ASCH)
Source
M
n
Octets
77 (0x4G)
97 (0x61)
110 (0x6e)
Bits
010011010110000101101110
Sextets
19
22
5
46
Base64
encoded
Character
T
W
F
Octets
84 (0x54)
87 (0x57)
70 (0x46)
117 (0x75)
Fig, 7.2 base64 encoding
---
## Page 568
556
7Crypte
Orginal characters
a
OrginaAsCIl, decima
67
97
116
ASCII, binary
New decimal values
16
54
5
52
+32
48
86
37
84
Uuencoded characters
0
V
%
T
Fig, 7.3 uuencode
M16%C:~1G2!0=71P=7088VAA) 30 ,>3318>9:71,W) [0X26
M921T :&488VAA<F%C=&5R (*=) R′ H05#24D88V]D92′ IR J (#, R*S0U2Xe
M2688=8&AE (&EN<* 5T (&ES (&Y0=*1E=F5N ; * De9&EV: 7I8FQE (&) Y (#0U+* 1T
M:&40; 8%S="1L:6YE (' =I: &PeSV]N=B%I : B1T:&4e<F5MS6EN: 6YG ($Xe; I5T
M<* 5T (&H87) ASW1E<G, L (* 1R96E985D (&) Y (* 1H921C: &%R86T97 (@=VA0
Fig, 7.4 The result of uuencode
Base16 encoding converts a binary file into a text consisting of 16 characters, which
are 0-9 and A-F, which is actually Hex encoding.
3. uuencode
uuencode is derived from “unix-to-unix encoding*, which was an encoding scheme
for UNIX systems to transfer binary data from UUCP mail systems. uuencode
encodes the input characters in units of 3 bytes. If there are less than 3 bytes of
characters left, the shorfall is padded with 0. As with Base64, uuencode divides the
3 bytes into four groups of decimal numbers, each of which has a number from O to
63 (see Fig. 7.3, image from Wikipedia-uuencode). Adding 32 to each number
produces a result that falls just within the range of ASCII printable characters.
Figure 7.4 shows the uuencode encoded characters, and you can see the charac-
teristic of uuencode: lots of special symbols.
4. xxencode
xxencode is similar to Base64, but uses a different conversion table.
+ - 0123456789ABCD&FGHIJKLMNOPQR.STUVWXYZabcde fghijk1mmopqrstuvwxyz
There is just an extra *" character and the */" character is removed, and xxencode
uses a °+° for padding at the end, unlike Base64 which uses the “
---
## Page 569
7.1 Encoding
557
7.1.3 Other Encodings
1. URL Encoding
URL encoding is also known as percent encoding. A URL encodes a character by
first representing the ASCII code of the character as two hexadecimal digits and then
placing the escape character *%" in front of it, if the character has a special meaning
in a particular context and must be used for some other purpose in the URI
Non-ASCII characters need to be converted to UTF-8 byte order, and then each
byte is represented as described above. For example, since “" is used as a delimiter
q pnous %, 0 ,d%, uo r a po juauoduoo qed e apsu eadde o1 spaou
used instead of “/".
2. jencode and aencode
Both jencode and aaencode are ways of encoding JavaScript code. The former
encodes JS code into symbol-only strings, while the latter encodes JS code into
common emoticons, which is essentially an obfuscation of JS code. Examples of
jencode and aaencode are shown in Figs. 7.5 and 7.6.
7.1.4EncodingSummary
This section introduces a lot of encoding schemes, and is only the tip of the iceberg
in the world of encoding schemes. However, there are very few CTFs that present a
wide variety of brain-teasing encoding challenges. Generally, CTF does not specif-
ically examine the ability to memorize various encoding schemes, so you do not
Fig, 7.5 The result of jencode
9
0-2
Fig, 7.6 The result of aaencode
---
## Page 570
558
7Crypto
need to waste time memorizing these, and when you do encounter them in CTF, you
can simply search on Google.
7.2 Classical Ciphers
Classical ciphers are a type of cryptography scheme in which most encryption is
done using shift or substitution, or sometimes a mixture of both. Classical ciphers
were commonly used throughout history, but have become less common in moderm
times. Generally, a classical cipher system consists of an alphabet (e.g., A-Z) and an
 sso as re so ss aap eado e o  ao
are almost untrustworthy today.
7.2.1Linear Mapping
1. Caesar Cipher
Among classical ciphers, the Caesar Cipher is one of the simplest and most widely
known encryption techniques. It is a substitution encryption scheme in which letter
in the plaintext is replaced by a letter some fixed number of offsets backward
(or forward) in the alphabet. For example, when the offset is 3, all letter As will be
replaced with Ds, Bs with Es, and so on. This encryption method is named after
Julius Caesar during the Roman Republic, who used it to communicate with his
generals.
The following is the formula for encrypting and decrypting in the Caesar cipher,
where x is the text to be manipulated and  is the key (ie., the offset).
En(x) = (x + n)mod26
Dx(x) = (x  n)mod26
The Caesar cipher is a very easy cipher to break, even with a ciphertext-only attack.
When we know (or guess) that a simple substitution is used in the ciphertext, but we
Caesar cipher or not by using methods such as frequency analysis or patterm words
are not sure whether it is a Caesar cipher or not, we can determine whether it is a
analysis.
The solution is even simpler when we know (or guess) that a secret message uses
Caesar cipher, but we don’t know its offset. Since the characters encrypted with
Caesar ciphers are generally letters, the possible offsets used in the cipher are also
25 (offset 26 equals offset 0, i.e., no transformation), so it can be easily cracked
limited. For example, English, which uses 26 letters, has a maximum offset of
by the exhaustive method.
---
## Page 571
7.2 Classical Ciphers
559
2. Vigenere Cipher
Vigenere Cipher is a cryptographic algorithm that encrypt alphabetic text uses a
series of Caesar ciphers, which is a simple form of multi-table substitution cipher. In
a Caesar cipher, each letter of the alphabet has a certain offset, e.g., at an offset of
3, A is converted to D and B to E. A Vigenere cipher consists of a series of Caesar
ciphers with different offsets.
The encryption process is very simple, assuming that the plaintext is
ATTACKATDAWN, and the key is LEMON. First, repeats the key and forms the
keystream so that it has the same length as the plaintext (LEMONLEMONLE).
K' = key'; + key2 + key's + --*
Then encrypt the plaintext according to each byte of secret key. If the first byte is L,
which is the 12th letter, then the offset is 12  111. For the first plaintext byte A,
the encrypted ciphertext should be(A + 11) mod 26, i.e. L. By repeating this step, we
can get the final ciphertext, LXFOPVEFRNHR.
Generally, there are some ways to crack the Virginia Code: you can look for a
substring of consecutive characters that appears several times in the cipher, and the
length of the key must be a factor of the interval between them, or you can look for
some common word such as *the”. Of course, there are some tools available (such as
https://atomcated.github.io/Vigenere/ which is in Chinese), and you can use these
online tools to crack the Vigenere Cipher directly when you encounter it.
7.2.2FixedSubstitution
1. Bacon’s Cipher
Bacon’s Cipher is a steganography invented by Francis Bacon, in which each letter
in plaintext is converted to a set of five leters when encrypted, as shown in Fig. 7.7.
国
AAAAA
AABBA
n
ABBAA
t
BAABA
b
AAAAB
h
AABBB
ABBAB
u-V
BAABB
AAABA
i-j
ABAAA
P
ABBBA
W
BABAA
d
AAABB
k