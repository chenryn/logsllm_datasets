                     Worker 9: actual time=0.005..751.844 rows=4007040 loops=1  
                       Buffers: shared hit=166960  
                     Worker 10: actual time=0.005..749.207 rows=3987408 loops=1  
                       Buffers: shared hit=166142  
                     Worker 11: actual time=0.006..757.084 rows=3986160 loops=1  
                       Buffers: shared hit=166090  
                     Worker 12: actual time=0.004..756.443 rows=4034760 loops=1  
                       Buffers: shared hit=168115  
                     Worker 13: actual time=0.005..756.966 rows=4031352 loops=1  
                       Buffers: shared hit=167973  
                     Worker 14: actual time=0.005..759.423 rows=3994056 loops=1  
                       Buffers: shared hit=166419  
                     Worker 15: actual time=0.004..756.996 rows=4033464 loops=1  
                       Buffers: shared hit=168061  
                     Worker 16: actual time=0.006..759.134 rows=3994512 loops=1  
                       Buffers: shared hit=166438  
                     Worker 17: actual time=0.006..758.454 rows=4007814 loops=1  
                       Buffers: shared hit=166993  
                     Worker 18: actual time=0.005..758.647 rows=3899520 loops=1  
                       Buffers: shared hit=162480  
                     Worker 19: actual time=0.005..756.724 rows=4031736 loops=1  
                       Buffers: shared hit=167989  
                     Worker 20: actual time=0.006..755.985 rows=3945672 loops=1  
                       Buffers: shared hit=164403  
                     Worker 21: actual time=0.004..755.998 rows=4030968 loops=1  
                       Buffers: shared hit=167957  
                     Worker 22: actual time=0.006..757.390 rows=4018968 loops=1  
                       Buffers: shared hit=167457  
                     Worker 23: actual time=0.006..756.996 rows=4026984 loops=1  
                       Buffers: shared hit=167791  
 Planning Time: 0.070 ms  
 Execution Time: 1172.569 ms  
(112 rows)  
```  
非并行  
```  
set max_parallel_workers_per_gather =0;  
 Aggregate  (cost=5416668.40..5416668.41 rows=1 width=8) (actual time=26976.475..26976.476 rows=1 loops=1)  
   Output: count(*)  
   Buffers: shared hit=4166668  
   ->  Seq Scan on public.test  (cost=0.00..5166668.32 rows=100000032 width=0) (actual time=0.011..17349.593 rows=100000000 loops=1)  
         Output: id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63, c64  
         Buffers: shared hit=4166668  
 Planning Time: 0.053 ms  
 Execution Time: 26976.515 ms  
(8 rows)  
```  
## 小结   
目前观察到bitcode的代码是每个worker都会产生一份，这个在实现bitcode cache后应该也是可以共用一份的。     
```
开启bc代码的DUMP
set jit_dump_bitcode =on;
注意清理，bc文件不会自动清理。
```
```
cd $PGDATA
-rw------- 1 digoal digoal 126K Apr  4 12:59 34026.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34021.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34019.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34024.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34023.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34017.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34015.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34013.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34020.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34016.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34033.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34031.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34018.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34014.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34036.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34035.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34030.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34028.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34032.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34029.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34022.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34025.0.optimized.bc
-rw------- 1 digoal digoal 126K Apr  4 12:59 34027.0.optimized.bc
```
使用llvm-bcanalyzer可以查看bitcode的内容   
https://www.llvm.org/docs/CommandGuide/llvm-bcanalyzer.html  
```
/usr/local/llvm6.0.0/bin/llvm-bcanalyzer ./40818.7.bc
Summary of ./40818.7.bc:
         Total size: 1069440b/133680.00B/33420W
        Stream type: LLVM IR
  # Toplevel Blocks: 4
Per-block Summary:
  Block ID #0 (BLOCKINFO_BLOCK):
      Num Instances: 1
         Total Size: 672b/84.00B/21W
    Percent of file: 0.0628%
      Num SubBlocks: 0
        Num Abbrevs: 16
        Num Records: 3
    Percent Abbrevs: 0.0000%
        Record Histogram:
                  Count    # Bits     b/Rec   % Abv  Record Kind
                      3        60      20.0          SETBID
  Block ID #8 (MODULE_BLOCK):
      Num Instances: 1
         Total Size: 18530b/2316.25B/579W
    Percent of file: 1.7327%
      Num SubBlocks: 67
        Num Abbrevs: 3
        Num Records: 129
    Percent Abbrevs: 2.3256%
        Record Histogram:
                  Count    # Bits     b/Rec   % Abv  Record Kind
                     86     11904     138.4          FUNCTION
                     38      4813     126.7    2.63  GLOBALVAR
                      1        21            100.00  SOURCE_FILENAME
                      1        35            100.00  VSTOFFSET
                      1       465                    DATALAYOUT
                      1       303                    TRIPLE
                      1        21                    VERSION
........
```
## 参考  
http://blog.jobbole.com/113684/  
https://www.postgresql.org/docs/devel/static/jit-extensibility.html  
https://www.postgresql.org/docs/devel/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS  
https://www.postgresql.org/docs/devel/static/runtime-config-client.html#GUC-JIT-PROVIDER  
https://www.postgresql.org/docs/devel/static/runtime-config-query.html#GUC-JIT-ABOVE-COST  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/jit/README;h=6271677163ac8acf9767370f3fff39b45f575dc2;hb=refs/heads/master  
[Using LLVM For Program Transformation](20180403_04_pdf_001.pdf)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")