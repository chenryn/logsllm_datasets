}
```
### .isEmpty property
```swift
var emptySet = Set()
print(emptySet.isEmpty)     // print: true
var populatedSet: Set = [1, 2, 3]
print(populatedSet.isEmpty) // print: false
```
### .count property
```swift
var band: Set = ["Peter", "Denial", "Jame"]
print("The band has \(band.count) players.")
// print: Band has 4 players.
```
### .intersection() Intersection
```swift
var setA: Set = ["A", "B", "C", "D"]
var setB: Set = ["C", "D", "E", "F"]
var setC = setA.intersection(setB)
print(setC) // print: ["D", "C"]
```
### .union()
```swift
var setA: Set = ["A", "B", "C", "D"]
var setB: Set = ["C", "D", "E", "F"]
var setC = setA.union(setB)
print(setC) 
// print: ["B", "A", "D", "F", "C", "E"]
```
### .symmetricDifference() Symmetric difference
```swift
var setA: Set = ["A", "B", "C", "D"]
var setB: Set = ["C", "D", "E", "F"]
var setC = setA.symmetricDifference(setB)
print(setC)
// print: ["B", "E", "F", "A"]
```
### .subtracting() Subtraction
```swift
var setA: Set = ["A", "B", "C", "D"]
var setB: Set = ["C", "D"]
var setC = setA.subtracting(setB)
print(setC) 
// print: ["B", "A"]
```
dictionary
---
### Base Dictionary
```swift
var dictionaryName = [
  "Key1": "Value1",
  "Key2": "Value2",
  "Key3": "Value3"
]
```
An `unordered` collection of pairs of data or key-value pairs
### Keys
```swift
var fruitStand = [
  "Coconuts": 12,
  "Pineapples": 12,
  "Papaya": 12
]
```
Each `key` is `unique` even if they all contain the same `value`
### Type Consistency
```swift
var numberOfSides = [
  "triangle": 3,
  "square": 4,
  "rectangle": 4
]
```
Contains only `String` keys and `Int` values
### Initialize and populate the dictionary
```swift
var employeeID = [
  "Hamlet": 1367,
  "Horatio": 8261,
  "Ophelia": 9318
]
```
### Initialize an empty dictionary
```swift
// initializer syntax:
var yearlyFishPopulation = [Int: Int]()
// Empty dictionary literal syntax:
var yearlyBirdPopulation: [Int: Int] = [:]
```
### add to dictionary
```swift
var pronunciation = [
  "library": "lai·breh·ree",
  "apple": "a·pl"
]
// new key: "programming", new value: "prow gra"
pronunciation["programming"] = "prow·gra"
```
### Delete key-value pair {.row-span-2}
```swift
var bookShelf = [
  "Goodnight": "Margaret Wise Brown",
  "The BFG": "Roald Dahl",
  "Falling Up": "Shel Silverstein",
  "No, David!": "David Shannon"
]
// remove value by setting key to nil
bookShelf["The BFG"] = nil
// remove value using .removeValue()
bookShelf. removeValue(forKey: "Goodnight")
// remove all values
bookShelf. removeAll()
```
### Modify the key-value pair {.row-span-2}
```swift
var change = [
  "Quarter": 0.29,
  "Dime": 0.15,
  "Nickel": 0.05
]
// Change the value using subscript syntax
change["Quarter"] = .25
// Change the value using .updateValue()
change. updateValue(.10, forKey: "Dime")
```
To change the value of a key-value pair, use the `.updateValue()` method or the subscript syntax by appending brackets `[ ]` with the existing keys within to the name of the dictionary, then adding the assignment operator _(`= `)_ followed by the modified value
### .isEmpty property
```swift
var bakery = [String:Int]()
// check if the dictionary is empty
print(bakery.isEmpty) // prints true
bakery["Cupcakes"] = 12
// check if the dictionary is empty
print(bakery.isEmpty) // print false
```
### .count property
```swift
var fruitStand = [
  "Apples": 12,
  "Oranges", 17
]
print(fruitStand.count) // print: 2
```
### Assigning values to variables
```swift
var hex = [
  "red": "#ff0000",
  "yellow": "#ffff00",
  "blue": "#0000ff",
]
print("Blue hexadecimal code \(hex["blue"])")
// print: blue hex code Optional("#0000ff")
if let redHex = hex["red"] {
  print("red hexadecimal code \(redHex)")
}
// print: red hex code #ff0000
```
Assigning the value of a key-value pair to a variable will return an optional value. To extract values, use the optional expansion
### Traversing the dictionary
```swift
var emojiMeaning = [
  "🤔": "Thinking Face",
  "😪": "Sleepy Face",
  "😵": "Dizzy Face"
]
// loop through keys and values
for (emoji, meaning) in emojiMeaning {
  print("\(emoji) is called '\(meaning)Emoji'")
}
// iterate through keys only
for emoji in emojiMeaning. keys {
  print(emoji)
}
// iterate through values only
for meaning in emojiMeaning. values {
  print(meaning)
}
```
function
---
### Basic functions
```swift
func washCar() -> Void {
  print("Soap")
  print("Scrub")
  print("Rinse")
  print("Dry")
}
```
### Call functions
```swift
func greetLearner() {
 print("Welcome to QuickRef.ME!")
}
// function call:
greetLearner()
// print: Welcome to QuickRef.ME!
```
### return value
```swift
let birthYear = 1994
var currentYear = 2020
func findAge() -> Int {
  return currentYear-birthYear
}
print(findAge()) // prints: 26
```
### Multiple parameters {.col-span-2}
```swift
func convertFracToDec(numerator: Double, denominator: Double) -> Double {
  return numerator / denominator
}
let decimal = convertFracToDec(numerator: 1.0, denominator: 2.0)
print(decimal) // prints: 0.5
```
### Omit parameter labels
```swift
func findDiff(_ a: Int, b: Int) -> Int {
  return a -b
}
print(findDiff(6, b: 4)) // prints: 2
```
### return multiple values {.col-span-2}
```swift
func smartphoneModel() -> (name: String, version: String, yearReleased: Int) {
  return ("iPhone", "8 Plus", 2017)
}
let phone = smartphoneModel()
print(phone.name)         // print: iPhone
print(phone.version)      // print: 8 Plus
print(phone.yearReleased) // print: 2017
```
### Parameters & Arguments
```swift
func findSquarePerimet(side: Int) -> Int {
  return side *4
}
let perimeter = findSquarePerimet(side: 5)
print(perimeter) // print: 20
// Parameter: side
// Argument: 5
```
### Implicit return
```swift
func nextTotalSolarEclipse() -> String {
  "April 8th, 2024 🌎"
}
print(nextTotalSolarEclipse())
// print: April 8th, 2024 🌎
```
### Default parameters
```swift
func greet(person: String = "guest") {
  print("Hello \(person)")
}
greet() // Hello guest
greet(person: "Aliya") // Hello Aliya
```
### Input and output parameters {.row-span-2}
```swift
var currentSeason = "Winter"
func season(month: Int, name: inout String) {
  switch month {
    case 1...2:
      name = "Winter ⛄️"
    case 3...6:
      name = "Spring 🌱"
    case 7...9:
      name = "Summer ⛱"
    case 10...11:
      name = "Autumn 🍂"
    default:
      name = "Unknown"
  }
}
season(month: 4, name: &currentSeason)
print(currentSeason) // Spring 🌱
```
### variable parameter
```swift
func totalStudent(data: String...) -> Int {
  let numStudents = data.count
  return numStudents
}
print(totalStudent(data: "Denial", "Peter"))
// print: 2
```
### Optional parameters
```swift
func getFirstInitial(from name: String?) -> String? {
  return name?.first
}
```
Functions can accept optional types and return optional types. When a function cannot return a reasonable instance of the requested type, it should return `nil`
structure
----
### Structure Creation
```swift
struct Building {
  var address: String
  var floors: Int
  init(address: String, floors: Int) {
    self.address = address
    self. floors = floors
  }
}
```
Structs or structs are used to programmatically represent real-life objects in code. A structure is created using the `struct` keyword, followed by its name, followed by a body containing its properties and methods
### Default property values
```swift
struct Car {
  var numOfWheels = 4
  var topSpeed = 80
}
var reliantRobin = Car(numOfWheels: 3)
print(reliantRobin.numOfWheels) // prints: 3
print(reliantRobin.topSpeed)    // print: 80
```
### Structural instance creation
```swift
struct Person {
  var name: String
  var age: Int
  init(name: String, age: Int) {
    self.name = name
    self. age = age
  }
}
// Person instance:
var morty = Person(name: "Peter", age: 14)
```
### init() method {.row-span-2}
```swift
struct TV {
  var size: Int
  var type: String
  init(size: Int, type: String) {
    self.size = size
    self.type = type
  }
}
```
Using the `TV` class
```swift
var newTV = TV(size: 65, type: "LED")
```
### Check type
```swift
print(type(of: "abc")) // print: String
print(type(of: 123))   // print: 123
```
### Mutation method (mutating) {.row-span-2}
```swift
struct Menu {
  var menuItems = ["Fries", "Burgers"]
  mutating func addToMenu(dish: String) {
    self.menuItems.append(dish)
  }
}
```
Using the `Menu` class
```swift
var dinerMenu = Menu()
dinerMenu.addToMenu(dish: "Toast")
print(dinerMenu.menuItems)
// prints: ["Fries", "Burgers", "Toast"]
```
### Structural methods
```swift
struct Dog {
  func bark() {
    print("Woof")
  }
}
let fido = Dog()
fido.bark() // prints: Woof
```
class
----
### reference type (class) {.row-span-2}
```swift
class Player {
  var name: String
  init(name: String) {
    self.name = name
  }
}
var player1 = Player(name: "Tomoko")
var player2 = player1
player2.name = "Isabella"
print(player1.name) // Isabella
print(player2.name) // Isabella
```
### instance of the class
```swift
class Person {
  var name = ""
  var age = 0
}
var sonny = Person()
// sonny is now an instance of Person
```
### init() method {.row-span-2}
```swift
class Fruit {
  var hasSeeds = true
  var color: String
  init(color: String) {
    self.color = color
  }
}
```
Using the Fruit class
```swift
let apple = Fruit(color: "red")
```
A class can be initialized using the `init()` method and the corresponding initialization properties. In the `init()` method, the `self` keyword is used to refer to the actual instance of the class assigning property values
### Class Attributes
```swift
var ferris = Student()
ferris.name = "Ferris Bueller"
ferris.year = 12
ferris.gpa = 3.81
ferris.honors = false
```
### Inherit {.row-span-2}
Suppose we have a BankAccount class:
```swift
class BankAccount {
  var balance = 0.0
  func deposit(amount: Double) {
    balance += amount
  }
  func withdraw(amount: Double) {
    balance -= amount
  }
}
```
`SavingsAccount` extends `BankAccount` class
```swift
class SavingsAccount: BankAccount {
  varinterest = 0.0
  func addInterest() {
    let interest = balance *0.005
    self. deposit(amount: interest)
  }
}
```
The new `SavingsAccount` class (subclass) automatically gets all the characteristics of the `BankAccount` class (superclass). Additionally, the `SavingsAccount` class defines an `.interest` property and an `.addInterest()` method.
### Example
use data type
```swift
class Student {
  var name: String
  var year: Int
  var gpa: Double
  var honors: Bool
}
```
Use default property values
```swift
class Student {
  var name = ""
  var gpa = 0.0
  var honors = false
}
```
### This is an example of a struct definition and a class definition
```swift
struct Resolution {
  var width = 0
  var height = 0
}
class VideoMode {
  var resolution = Resolution()
  var interlaced = false
  var frameRate = 0.0
  var name: String?
}
```
The `Resolution` structure definition and the `VideoMode` class definition only describe the appearance of `Resolution` or `VideoMode`, create an instance of the structure or class:
```swift
let resolution = Resolution(width: 1920)
let someVideoMode = VideoMode()
```
Enumerate
----
### Define the enumeration
```swift
enum Day {
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday
}
let casualWorkday: Day = .friday
```
### Switch statement
```swift
enum Dessert {
  case cake(flavor: String)
  case vanillaIceCream(scoops: Int)
  case brownie
}
let customerOrder: Dessert = .cake(flavor: "Red Velvet")
switch customerOrder {
  case let .cake(flavor):
    print("You ordered a \(flavor) cake")
  case .brownie:
    print("You ordered a chocolate cake")
}
// prints: "You ordered a red velvet cake"
```
### CaseIterable
```swift
enum Season: CaseIterable {
  case winter
  case spring
  case summer
  case falls
}
for season in Season.allCases {
  print(season)
}
```
Add conformance to the `CaseIterable` protocol to access the `allCases` property, which returns an array of all cases of the enumeration
### Original value
```swift
enum Beatle: String {
  case john paul george ringo
}
print("The Beatles are \(Beatle.john.rawValue).")
// print: The Beatles are john.
```
### Related values
```swift
enum Dessert {
  case cake(flavor: String)
  case vanillaIceCream(scoops: Int)
  case brownie
}
let order: Dessert = .cake(flavor: "Red Velvet")
```
### instance method {.row-span-2}
```swift
enum Traffic {
  case light
  case heavy
  mutating func reportAccident() {
    self = .heavy
  }
}
var currentTraffic: Traffic = .light
currentTraffic. reportAccident()
// currentTraffic is now .heavy
```
Just like classes and structs, enumerations can have instance methods. If an instance method mutates the value of the enum, it needs to be marked `mutating`
### Initialize from primitive value
```swift
enum Hello: String {
  case english = "Hello"
  case japanese = "Hello!"
  case emoji = "👋"
}
let hello1 = Hello(rawValue: "Hello!")
let hello2 = Hello(rawValue: "Привет")
print(hello1) // Optional(Hello.japanese)
print(hello2) // nil
```
### Computed properties
```swift
enum ShirtSize: String {
  case small = "S"
  case medium = "M"
  case large = "L"
  case extraLarge = "XL"
  var description: String {
    return "The size of this shirt is \(self.rawValue)"
  }
}
```
Also See
----
- [Swift Documentation (Official)](https://www.swift.org/documentation/) _(swift.or)_
- [Swift Programming Language (Official)](https://docs.swift.org/swift-book/) _(swift.or)_
- [One-Stop Quick Reference for Swift Developers](https://swiftly.dev/) _(swiftly.dev)_