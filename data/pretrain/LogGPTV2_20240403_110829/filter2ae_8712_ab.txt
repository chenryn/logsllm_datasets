cobalt strike基本的内置编码语法与编码存放设置(cs官方称为 termination statements 感觉不太好贴切理解):
使用`termination statements`可以将数据存放header、http参数、body中等。特别提示print语句是`http-get.server.output、http-post.server.output,、and http-stager.server.output`的预期位置，设置为body中。
当然在这里你也可以在请求添加一些无关痛痒的头或者参数:
    http-get {
        server {
            header "API-URI" "aliyun";
    http-get {
        client {
            parameter "qing" "good";
### server
在`server`块里我们除了定义上面数据传输部分的解码操作以外，同样可以对于C2中的相应内容进行定义。
在响应头中添加了 Vary、Server 、Content-Type 等"正常网站服务"字段, 在响应内容的前后可以加上一些看似""正常""的
比如这里的数据 jQuery 代码, 最后进行 base64 编码并响应在 HTTP Body 里。
    server {
                    header "Server" "Apache/2.4.39 (Unix)";
                    header "Content-Type" "application/javascript; charset=utf-8";
                    header "Vary" "Accept-Encoding";
                    header "Server" "Microsoft-IIS/8.5";
                    header "Connection" "close";
           output {
                       base64;
                       prepend "/*! * jquery.base64.js 0.1 - https://github.com/yckart/jquery.base64.js * Makes Base64 en & -decoding simpler as it is. * * Based upon:";
                       append "r64 = [256],r256 = [256],i = 0;var UTF8 = {/***Encode multi-byte Unicode string into utf-8 multiple single-byte characters* (BMP / basic multilingual plane only)";
                        print;
                    }
            }
    }
#### 转义字符定义
以及在Beacon's Profile中的可以使用的特殊转义字符:
上面都是设置http中get和post中的定义，而在Beacon 与 C2 的通信过程中，当 Beacon 被执行后, 会在 C2 上下载载荷执行, 即
Stage 过程, Stageless
则省去了这一步(你可以理解为第一种只是先传了一个小的下载器，下载器在后面会传输真正执行的载荷)，在C2_profile中同样可以对Stage过程进行规则定义。
### http-stage
例子:
    http-stager {
        server {
            header "Cache-Control" "private, max-age=0";
            header "Content-Type" "text/html; charset=utf-8";
            header "Vary" "Accept-Encoding";
            header "Server" "Microsoft-IIS/8.5";
            header "Connection" "close";
        }
    }
这里http-stager块中可以通过header等语句来定义Stage通信中C2响应的http头内容。
以及可以配置定义uri来模糊通信时请求的url(uri_x86选项设置URI下载x86的payload,uri_x64选项设置URI下载64位的payload):
    set uri_x86 "/favicon1.ico";
    set uri_x64 "/favicon2.ico";
    set uri "/jquery.min.js";
当然如果你想对于C2建立和Beacon通信过程与Stage过程都自定义C2服务器的响应的话，可以设置http-config块,以及可以使用到`set
headers 、set trust_x_forwarded_for`来定义头的顺序和配置重定向:
    http-config {
        set headers "Date, Server, Content-Length, Keep-Alive, Connection, Content-Type";
        header "Server" "Apache";
        header "Keep-Alive" "timeout=5, max=100";
        header "Connection" "Keep-Alive";
        set trust_x_forwarded_for "false";
    }
#### Self-signed Certificates
在HTTPS建立的Beacon中也可以通过`https-certificate`设置唯一、“正常”的证书
    https-certificate {
        set CN       "bobsmalware.com";
        set O        "Bob's Malware";
    }
#### Valid SSL Certificates
上面的证书是我们自签名的，还可以更"正常一些"，在profile中指定Java密钥库文件(必须包含证书的私钥、根证书、任意中间证书以及SSL证书供应商提供的域证书)和密码,`keystore`的值指定密钥文件，`password`为密码：
    https-certificate {
        set keystore "domain.store";
        set password "mypassword";
    }
而上面所说的keystore里，包含的数据是分情况的，对称加密和非对称加密的情况不同密钥库文件的内容是不同的:
> 对称加密时包含密钥实体和密钥
>
> 非对称加密时(例如RSA)包含私钥和配对公钥
keytools来生成此证书:
    keytool
    密钥和证书管理工具
    命令:
     -certreq            生成证书请求
     -changealias        更改条目的别名
     -delete             删除条目
     -exportcert         导出证书
     -genkeypair         生成密钥对
     -genseckey          生成密钥
     -gencert            根据证书请求生成证书
     -importcert         导入证书或证书链
     -importpass         导入口令
     -importkeystore     从其他密钥库导入一个或所有条目
     -keypasswd          更改条目的密钥口令
     -list               列出密钥库中的条目
     -printcert          打印证书内容
     -printcertreq       打印证书请求的内容
     -printcrl           打印 CRL 文件的内容
     -storepasswd        更改密钥库的存储口令
    qing@ubuntu:~/cs_server$ keytool -genkey -alias qing -keyalg RSA -validity 36500 -keystore qing.store
    Enter keystore password:
    What is your first and last name?
      [Unknown]:  qing
    What is the name of your organizational unit?
      [Unknown]:  qing
    What is the name of your organization?
      [Unknown]:  qing
    What is the name of your City or Locality?
      [Unknown]:  qing
    What is the name of your State or Province?
      [Unknown]:  qing
    What is the two-letter country code for this unit?
      [Unknown]:  qing
    Is CN=qing, OU=qing, O=qing, L=qing, ST=qing, C=qing correct?
      [no]:  yes
    Enter key password for 
            (RETURN if same as keystore password):
    Re-enter new password:
    Warning:
    The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using "keytool -importkeystore -srckeystore qing.store -destkeystore qing.store -deststoretype pkcs12".
这里仅测试，选项的值实战中尽量趋近于正常便于伪装，可以拿公开的证书信息进行""仿制",qing.store为新生成的keystore文件，-alias
指定别名，-storepass pass 和 -keypass pass 指定密钥，-keyalg RSA 指定主体公共密钥算法，-dname
指定所有者信息。
profile设置相应选项:
    https-certificate {
        set CN       "qing";
        set O        "qing";
        set C        "qing";
        set L        "qing";
        set OU       "qing";
        set ST       "qing";
        set validity "365";
    }
    #证书名称和证书密码
    code-signer{
        set keystore "qing.store";
        set password "123456";
        set alias "qing";
    }
##### c2lint检查profile
Cobtalt Strike自带的c2lint程序，可以用来检查profile的语法格式:
    ./c2lint [path/to/my.profile]
`qing@ubuntu:~/cs_server$ ./c2lint qing.profile`
在我们学会了自定义编写c2_profile规则后启动teamserver就可以配合各种环境下的C2配置规则文件了,如果在拥有自己域名并解析server后的情况下可以使用@killswitch-GUI的profile:
**Links** :