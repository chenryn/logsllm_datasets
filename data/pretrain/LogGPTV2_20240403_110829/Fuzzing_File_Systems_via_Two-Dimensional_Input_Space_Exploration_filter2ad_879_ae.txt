### 优化后的文本

#### 图8：使用Syzkaller和JANUS对八个文件系统镜像进行12小时模糊测试的整体路径覆盖率
- **Y轴**：表示在模糊测试过程中每个文件系统访问的独特代码路径数量。
- **JANUSi与Syzkalleri**：仅对种子镜像的字节进行变异，并在变异后的镜像上执行固定的系统调用序列。JANUSi的表现优于Syzkalleri，最高可达4.17倍。
- **JANUSs与Syzkallers**：生成随机系统调用并在固定种子镜像上执行，其中JANUSs的覆盖率比Syzkallers高出最多2.24倍。
- **JANUS与Syzkaller**：同时对镜像字节和文件操作进行模糊测试，JANUS访问的独特路径最多可达4.19倍。

实际上，`syz_mount_image()`可以在Syzkaller生成的程序中的任何位置被多次调用。与Syzkaller不同，JANUS为每个镜像单独使用一个干净的LKL实例。如果挂载变异后的镜像成功，执行器将随后执行上下文感知的工作负载并以`umount()`终止。如§V-B所述，由于Syzkaller处理密集镜像的局限性，XFS的比较部分不公平。此外，JANUS利用较少的CPU和内存资源来运行LKL实例，但仍优于依赖于虚拟机（VM）的Syzkaller。

**结果**：
- JANUS在所有八个文件系统上的代码覆盖率均高于JANUSs和JANUSi，这证明了在文件系统模糊测试中同时变异镜像和操作的重要性。
- 特别是，在具有极其复杂设计的Btrfs文件系统上，JANUS的最大表现优于Syzkaller达4.19倍。
- 我们的评估结果显示，通过探索文件系统的二维输入空间，JANUS在模糊测试文件系统方面非常有效。

#### E. 重现崩溃
为了评估JANUS使用的库操作系统（即LKL）是否比虚拟机更有效地重现发现的崩溃，我们对最终实验中两种类型输入都进行变异后收集的所有崩溃输入进行了测试（见§V-D）。首先，我们使用PoC生成器解析出镜像和特定系统调用序列。然后，我们重新挂载镜像并在挂载点下再次执行系统调用，以查看内核是否会崩溃。根据崩溃PC值，我们还统计了可重现崩溃中的独特崩溃数量。表IV总结了JANUS和Syzkaller发现的崩溃及其可重现的数量。

| 文件系统 | Syzkaller | JANUS | 独特崩溃数 |
|----------|-----------|-------|------------|
| ext4 (com.) | 0/7 (0%) | 16/16 (100%) | 6 |
| ext4 | 0/3 (0%) | 196/196 (100%) | 8 |
| XFS v4 | 0/2517 (0%) | 24/24 (100%) | 2 |
| XFS v5 | 0/6 (0%) | 67/67 (100%) | 2 |
| Btrfs | 0/0 (0%) | 1793/2054 (88%) | 18 |
| F2FS | 0/1288 (0%) | 2390/2458 (97%) | 28 |
| GFS2 | 0/916 (0%) | 1030/1080 (95%) | 12 |
| HFS+ | 0/8 (0%) | 815/815 (100%) | 6 |
| ReiserFS | 0/2535 (0%) | 1800/1800 (100%) | 20 |
| VFAT | 0/0 (-) | 0/0 (-) | 0 |

**表IV**：使用KVM实例和基于LKL的执行器分别对Syzkaller和JANUS进行模糊测试时的崩溃重现性。表中的每个X/Y对中，X表示在§V-D实验期间由模糊器触发的崩溃数量，Y表示可以使用保存的崩溃输入重新触发的崩溃数量。列#Unique报告了基于崩溃PC值在实验中由JANUS找到的独特崩溃数量。

| 操作 | VM | LKL |
|------|----|-----|
| 重启VM | 14.5秒 | - |
| 回滚快照 | 1.4秒 | 10.7毫秒 |

**表V**：基于VM（即KVM）的模糊器和JANUS在非老化操作系统和文件系统上的平均时间成本。总时间包括重新加载一个干净的操作系统和挂载镜像的时间。

由于使用老化操作系统的基本限制，Syzkaller在挂载不同镜像并调用系统调用时没有初始化，因此无法重现其发现的任何崩溃。相反，JANUS能够在大多数文件系统中重现超过95%的崩溃，除了Btrfs。Btrfs启动多个内核线程并行完成不同的事务，导致内核执行的非确定性。此外，F2FS和GFS2也生成少量工作线程来完成特定任务，如垃圾收集、日志记录等。理论上，如果我们能够控制线程调度，则可以100%重现崩溃，但这超出了本工作的范围。

我们还估计了为VM中的模糊器测试每个生成的输入而重新启动一个干净的操作系统副本（非老化操作系统）的性能开销。具体来说，我们评估了一个KVM实例（两个核心和2GB内存）在重新启动VM或回滚现有快照并测试输入镜像上花费的总时间，并将其与我们的LKL执行器所需的时间进行比较。表V展示了评估结果。通过简单地调用`fork()`来启动一个新的LKL实例，我们的基于LKL的执行器在设置干净的操作系统和新的文件系统方面所花费的时间几乎可以忽略不计，相比之下，KVM实例则需要更多时间。

**结果**：
- 依赖于LKL的JANUS提供了一个比在VM中运行的操作系统更稳定且可重现崩溃的干净操作系统。特别是在12小时的模糊测试期间，JANUS至少能够重现88%的崩溃。
- 相比之下，基于VM的模糊器（即Syzkaller）无法重现其发现的任何崩溃。此外，在VM中重新初始化操作系统状态会带来不可接受的开销。

#### F. 其他贡献
除了发现未知的漏洞外，JANUS还为文件系统开发社区做出了以下重要贡献：

- **恶意镜像样本**：包括Btrfs、F2FS在内的几个文件系统的开发社区已经将JANUS生成的一些损坏镜像添加到他们的存储库中，用于内部模糊测试和未来的回归测试。目前，开发者认为这些镜像是代表性的恶意样本，涉及各种元数据字段中的多样化错误字节，用于测试文件系统的功能。
- **文件系统加固的一般补丁**：F2FS的开发者不仅修复了我们在内核模块中报告的漏洞，还将相应的安全检查扩展到了用户空间工具（即`fsck.f2fs`），帮助用户在Linux内核挂载包含关键错误字节的镜像之前检测这些镜像损坏。

#### VI. 讨论
我们已经展示了JANUS如何有效地探索代码路径并发现Linux内核中磁盘文件系统的未知漏洞。现在讨论JANUS的局限性和未来方向。

- **基于库操作系统的执行器**：JANUS依赖于LKL来测试内核文件系统。实际上，其他操作系统模糊器也可以使用它来测试其他内核子系统，但不能测试依赖MMU的组件。例如，JANUS无法直接模糊文件系统的DAX模式[31]，除非对LKL进行修改。我们还可以使用用户模式Linux（UML），就像Oracle的内核模糊器[48]一样。然而，UML受到其多进程设计的限制，这使得在每次迭代中难以识别内核崩溃并终止所有进程。因此，UML不支持将内核作为用户应用程序进行模糊测试。
- **最小PoC生成器**：理想的PoC应包含只有必要错误字节的镜像和最少文件操作的程序。为此，JANUS目前采用暴力方法来回滚每个变异字节，并尝试移除每个调用的文件操作，以检查内核是否仍会在预期位置崩溃。尽管这种方法并不理想，但我们可以通过某些文件系统工具（如`fsck`和`debugfs`）以及系统调用跟踪提炼技术[22, 49]来定位根本原因字节和系统调用。另一种可能性是对内核应用污点跟踪。
- **模糊FUSE驱动程序**：目前，JANUS不支持依赖于FUSE（用户空间文件系统）[32]的文件系统（如NTFS[70]、GVfs[67]、SSHFS[55]等）。只要这些文件系统将用户数据存储在磁盘镜像中并支持某些文件操作供用户交互，我们可以轻松扩展JANUS的模糊引擎来模糊这些文件系统。
- **模糊文件系统实用工具**：开发者严重依赖系统实用工具（如`mkfs`、`fsck`等）来管理文件系统。例如，Linux会在系统突然崩溃后自动启动`fsck`来恢复磁盘数据。此外，用户在挂载不受信任的磁盘镜像之前也会使用`fsck`来检查其一致性。因此，开发者希望这些工具无漏洞。我们相信，开发者可以轻松扩展JANUS的镜像变异器来生成损坏的镜像，从而提高这些工具的鲁棒性。事实上，我们使用JANUS发现了`fsck.ext4`中的两个未知漏洞，其中一个已经被修复。
- **扩展到其他操作系统的文件系统模糊测试**：如果存在相应的库操作系统解决方案，将JANUS扩展到其他操作系统的内核文件系统将是直接的。例如，Drawbridge[52]使Windows能够高效地在进程中运行。此外，我们还可以将JANUS的核心模糊引擎与其他通用内核模糊框架（如基于QEMU和KVM构建的kAFL[61]）集成，以模糊其他商用操作系统（如Windows和macOS）中使用的文件系统。
- **改进其他文件系统测试工具**：JANUS的目标是发现文件系统中的通用安全漏洞，这与旨在检查崩溃一致性[6, 73]和语义正确性[36, 58]的其他工具的目标不同。然而，这些工具也需要文件操作序列。因此，JANUS可以成为其他工具依赖的一站式解决方案。

#### VII. 相关工作
- **结构化输入模糊测试**：许多方法已被提出用于模糊高度结构化的输入，如文件系统镜像。与JANUS不同，一些生成型模糊器（[14, 23, 41, 42, 50]）基于手动描述的输入规范从头开始构建语法正确的输入。此外，EXE[7]依赖符号执行来构建满足深层路径约束的有效输入。更高级的方法如[3, 16, 24]从一组样本中学习输入结构。另一方面，变异型模糊器[4, 5, 10, 15, 18, 34, 76]通过对有效样本进行变异来生成新输入。生成的输入具有正确的结构并带有轻微错误，有望触发漏洞。考虑到文件系统镜像的复杂性和不同文件系统之间镜像格式的多样性，JANUS采用了变异策略来模糊镜像。类似于文件系统镜像，许多文件格式涉及校验和以进行完整性检查。JANUS特别利用专业知识修复元数据校验和。然而，一些校验和感知的模糊器[33, 71]通过动态污点分析来识别校验和字段并在运行时绕过校验和检查。
- **操作系统内核模糊器**：为了在操作系统中发现安全漏洞，已经提出了许多通用内核模糊框架[20, 43, 46, 61]和特定于操作系统的内核模糊器[22, 25, 44, 45, 47]。与JANUS不同，所有这些模糊器都基于预定义的语法规则生成随机系统调用，这在文件系统模糊测试中效果不佳。最近的一些操作系统模糊器，如IMF[22]和MoonShine[49]专注于种子提炼，与本工作正交。不过，JANUS可以通过利用它们的方法来开始高质量的种子程序。
- **文件系统语义正确性检查器**：JUXTA[36]和SibylFS[58]是其他类型的文件系统检查器，旨在通过静态分析和文件系统行为的高层建模来检查文件系统的实现是否完全符合标准（如POSIX标准、man页面等）。它们在目的和方法上与JANUS正交。类似地，JANUS可以生成有意义的系统调用来发现崩溃一致性漏洞[6, 73]。
- **文件系统抽象**：一些研究[65, 66]提出了通用接口，使文件系统实用工具能够通过高层抽象访问和操作各种文件系统的磁盘元数据。通过利用这些接口，JANUS可以以更通用的方式压缩磁盘镜像，而无需为每个目标文件系统实现镜像解析器。

#### VIII. 结论
在这项工作中，我们提出了JANUS，一种进化型文件系统模糊器，通过探索其二维输入空间（即镜像和文件操作）来探索内核文件系统。与现有的文件系统模糊器不同，JANUS高效地变异输入镜像的元数据块，同时在镜像上发出上下文感知的工作负载。与传统的虚拟机不同，JANUS依赖于支持快速重装的库操作系统来测试操作系统功能，从而避免不稳定执行和不可重现的漏洞。我们在上游内核中报告了JANUS发现的90个漏洞，其中43个已修复，并分配了32个CVE编号。在对流行文件系统进行12小时模糊测试时，JANUS最多比Syzkaller多探索了4.19倍的代码路径，并能够重现88-100%的发现崩溃。我们将开源JANUS的实现，这已被多个文件系统开发社区因我们的显著成果而请求。我们认为，JANUS将成为文件系统测试的一站式解决方案，因为JANUS可以作为设计新的语义和崩溃一致性检查器的基础基础设施。

#### IX. 致谢
感谢匿名评审者和我们的导师Thorsten Holz提供的宝贵反馈。还要感谢所有文件系统开发者，包括Theodore Ts’o、Darrick J. Wong、Dave Chinner、Eric Sandeen、Chao Yu、Wenruo Qu和Ernesto A. Fernández处理我们的漏洞报告。本研究得到了NSF奖CNS-1563848、CNS-1704701、CRI-1629851和CNS-1749711的支持，以及ONR资助N000141512162、DARPA TC（编号DARPA FA8650-15-C-7556）和ETRI IITP/KEIT[B0101-17-0644]的支持，以及来自Facebook、Mozilla和Intel的礼物。

#### 参考文献
[1] N. Agrawal, W. J. Bolosky, J. R. Douceur, and J. R. Lorch. A Five-year Study of File-system Metadata. In Proceedings of the ACM Transactions on Storage (TOS), 2007.
[2] Apple Inc. macOS High Sierra. https://www.apple.com/macos/high-sierra, 2018.
[3] O. Bastani, R. Sharma, A. Aiken, and P. Liang. Synthesizing program input grammars. In ACM SIGPLAN Notices, pages 95–110. ACM, 2017.
[4] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based greybox fuzzing as markov chain. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS), Vienna, Austria, Oct. 2016.
[5] M. Böhme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury. Directed greybox fuzzing. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS), Dallas, TX, Oct.–Nov. 2017.
[6] J. Bornholt, A. Kaufmann, J. Li, A. Krishnamurthy, E. Torlak, and X. Wang. Specifying and checking file system crash-consistency models. In Proceedings of the 21st ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Atlanta, GA, Apr. 2016.
[7] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler. EXE: automatically generating inputs of death. ACM Transactions on Information and System Security (TISSEC), 12(2):10, 2008.
[8] M. Cao, S. Bhattacharya, and T. Ts’o. Ext4: The next generation of ext2/3 filesystem. In USENIX Linux Storage and Filesystem Workshop, 2007.
[9] H. Chen, D. Ziegler, A. Chlipala, M. F. Kaashoek, E. Kohler, and N. Zeldovich. Specifying Crash Safety for Storage Systems. In 15th USENIX Workshop on Hot Topics in Operating Systems (HotOS) (HotOS XV), Kartause Ittingen, Switzerland, May 2015.
[10] P. Chen and H. Chen. Angora: Efficient Fuzzing by Principled Search. In Proceedings of the 39th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2018.
[11] J. Corbet. Improving ext4: bigalloc, inline data, and metadata checksums. https://lwn.net/Articles/469805, 2011.
[12] J. Corbet. Filesystem mounts in user namespaces. https://lwn.net/Articles/652468, 2015.
[13] J. Dike. User-mode Linux. In Annual Linux Showcase Conference, 2001.
[14] I. Fratric. DOM fuzzer. https://github.com/googleprojectzero/domato, 2018.
[15] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen. CollAFL: Path Sensitive Fuzzing. In Proceedings of the 39th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2018.
[16] P. Godefroid, H. Peleg, and R. Singh. Learn&fuzz: Machine learning for input fuzzing. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), Champaign, IL, Oct. 2017.
[17] Google. KernelAddressSanitizer, a fast memory error detector for the Linux kernel. https://github.com/google/kasan, 2016.
[18] Google. OSS-Fuzz - Continuous Fuzzing for Open Source Software. https://github.com/google/oss-fuzz, 2018.
[19] Google. syzbot. https://syzkaller.appspot.com, 2018.
[20] Google. syzkaller is an unsupervised, coverage-guided kernel fuzzer. https://github.com/google/syzkaller, 2018.
[21] S. Grubb. fsfuzzer-0.7. http://people.redhat.com/sgrubb/files/fsfuzzer-0.7.tar.gz, 2009.

---

以上是经过优化后的文本，使其更加清晰、连贯和专业。