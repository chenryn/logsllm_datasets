title:Multisketches: Practical Secure Sketches Using Off-the-Shelf Biometric
Matching Algorithms
author:Rahul Chatterjee and
M. Sadegh Riazi and
Tanmoy Chowdhury and
Emanuela Marasco and
Farinaz Koushanfar and
Ari Juels
Multisketches: Practical Secure Sketches
Using Off-the-Shelf Biometric Matching Algorithms
Rahul Chatterjee
M. Sadegh Riazi
Tanmoy Chowdhury
GMU
UW–Madison
UCSD
Emanuela Marasco
GMU
Farinaz Koushanfar
UCSD
Ari Juels
Cornell Tech
ABSTRACT
Biometric authentication is increasingly being used for large scale
human authentication and identification, creating the risk of leak-
ing the biometric secrets of millions of users in the case of database
compromise. Powerful “fuzzy” cryptographic techniques for bio-
metric template protection, such as secure sketches, could help in
principle, but go unused in practice. This is because they would
require new biometric matching algorithms with potentially much
diminished accuracy.
We introduce a new primitive called a multisketch that general-
izes secure sketches. Multisketches can work with existing biometric
matching algorithms to generate strong cryptographic keys from
biometric data reliably. A multisketch works on a biometric database
containing multiple biometrics — e.g., multiple fingerprints — of a
moderately large population of users (say, thousands). It conceals
the correspondence between users and their biometric templates,
preventing an attacker from learning the biometric data of a user
in the advent of a breach, but enabling derivation of user-specific
secret keys upon successful user authentication.
We design a multisketch over tenprints — fingerprints of ten fin-
gers — called TenSketch. We report on a prototype implementation
of TenSketch, showing its feasibility in practice. We explore several
possible attacks against TenSketch database and show, via simula-
tions with real tenprint datasets, that an attacker must perform a
large amount of computation to learn any meaningful information
from a stolen TenSketch database.
CCS CONCEPTS
• Security and privacy → Biometrics;
ACM Reference Format:
Rahul Chatterjee, M. Sadegh Riazi, Tanmoy Chowdhury, Emanuela Marasco,
Farinaz Koushanfar, and Ari Juels. 2019. Multisketches: Practical Secure
Sketches Using Off-the-Shelf Biometric Matching Algorithms. In Proceedings
of 2019 ACM SIGSAC Conference on Computer and Communications Security,
London, United Kingdom, November 11–15, 2019 (CCS ’19), 16 pages.
https://doi.org/10.1145/3319535.3363208
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363208
1 INTRODUCTION
Human authentication to computers has traditionally relied mainly
on passwords. In recent years, the usability and security short-
comings of passwords have prompted a rise in the popularity of
biometric authentication. Biometrics, however, presents a big chal-
lenge: It is hard to store biometric data in databases securely.
The problem is that biometric measurements are noisy. Two scans
of the same physiological feature (finger, eye, etc.) almost always
differ due to changes in reading conditions. Also, biometric features
change subtly over time. Biometric matching in practice, therefore,
involves measuring the similarity between a template, an explicit,
registered set of biometric features, and a biometric measurement
taken during authentication. A conventionally presented password,
in contrast, is only accepted if it exactly matches a registered one.
Passwords can therefore be hashed to protect against capture in a
breach, but biometrics cannot.
To protect biometrics in a manner similar to hashing, researchers
have long explored various forms of fuzzy cryptography [27, 28, 40].
In [28], Dodis et al. present the notion of secure sketches and fuzzy
extractors, which attempt to extract high entropy keys reliably from
noisy sources of data such as biometrics, but fall short in practice
for two reasons. First, individual biometrics often have low effective
entropy; e.g., TouchID claims 1:50,000 false acceptance rate, which
implies at most 16 bits of entropy per finger, and maybe lower [34].
Second, a fuzzy extraction system must be custom-built for a partic-
ular distance metric. Doing so for the complicated distance metrics
associated with many biometrics in practice, e.g., fingerprints, and
achieving both rigorous security properties and good matching
accuracy, remains an open challenge [38, 51]. To the best of our
knowledge, despite almost two decades of research, nowhere is
fuzzy cryptography used to protect biometrics in practice.
Techniques such as secure function evaluation and secure multi-
party computation have been proposed for private queries against
a biometric database [31, 53, 64], but do not protect against a data-
base breach. Secure hardware, such as hardware security modules
(HSMs)1 and trusted execution environments (TEEs) can, in the-
ory, offer strong protection for biometrics: They permit templates
to be stored in a database in encrypted form and decrypted only
in hardware to perform matching. Recent attacks against Intel
SGX [42, 45, 59], however, highlight the fact that trusted hardware
is far from bulletproof, and other security approaches are needed.
Happily, the techniques we present in this paper are complementary
to and usable in concert with trusted hardware as well as secure
function evaluation.
1Mobile devices, for which biometric authentication is popular today, generally protect
templates using trusted hardware [4, 9].
In this work, we introduce and formalize a new generalization of
secure sketches called multisketches. A conventional secure sketch
operates on individual biometric templates (e.g., a single finger-
print). In contrast, a multisketch operates on a batch of templates
belonging to multiple users. While in secure sketches biometric
data is concealed by performing lossy compression of a template, in
a multisketch system unmodified templates are used, and security
is achieved by concealing the correspondence between templates
and users.
We present a specific multisketch construction that can use off-
the-shelf biometric matching algorithms. Our multisketch construc-
tion thus realizes a long-elusive goal: Secure, practical derivation
of strong cryptographic keys from users’ biometric data.
Two notable requirements of multisketches are that they require
registration of multiple biometrics by individual users and that
they can only protect databases containing the biometrics of many
users. Because individual biometrics lack adequate usable entropy
to derive strong cryptographic keys, such use of multiple biometric
readings is unavoidable in any biometric fuzzy-extraction system.
Providing multiple biometrics for everyday authentication can be
cumbersome, but for high security (and infrequent) operations, such
as credential recovery or border crossing, they can be deployed.
Tenprints, in particular, are commonly enrolled today in border
control [6, 18], law enforcement [1], and social-service delivery
databases [3]. These databases often have millions of users, as in
India’s Aadhaar system, with its over one billion enrolled users [3].
Data compromise is a serious concern for such databases contain-
ing sensitive biometric data of millions of users. The pressing need
for protecting templates in such systems, and failure of existing
fuzzy cryptographic schemes to provide it, motivate our work.
Main idea. In our multisketch construction, as applied to a data-
base D, each user u registers with a set of n distinct biometric
templates w = w1 . . . wn. The goal is to be able to recover w from
D by providing new biometric readings ˜w = ˜w1 . . . ˜wn, as long as
most of ˜w matches with w.
To prevent an adversary that breaches D from learning w, our
construction conceals which templates are associated with which
user and randomly orders all templates of all users in D. This is
the pivotal idea in our construction. This randomization means
an adversary cannot easily pick out sets of associated templates,
but must attempt to reconstruct w via brute-force search over all
possible conjectured sets w′. Given enough users (say, thousands),
such search is computationally infeasible in practice.
To reconstruct her set of templates w, a user u presents a set
of fresh biometric readings ˜w = ˜w1 . . . ˜wn. An (off-the-shelf) bio-
metric matching algorithm is then used to match each ˜wi to its
corresponding, most similar template w′
i in D, yielding a conjec-
tured template set w′. Assuming that enough matches are successful
(even if some are erroneous), i.e., w ∆ w′ = |w ∪ w′ − w ∩ w′| is
small, u can recover w.
A secure sketch — and thus our multisketch scheme — can easily
be converted into a fuzzy extractor, allowing w to be converted into
a strong cryptographic key κ that can then be used for authentica-
tion, signing, or any other purpose.
The performance of multisketch largely depends on that of
the underlying biometric matching algorithm. During recovery,
the matching algorithm might need to be applied to all templates
present in D to identify the closest matches. This can be expensive
for large D. However, the search process can easily be parallelized
by virtually any factor. For instance, a recent study shows how to
perform 9 million matches per second using a single graphics pro-
cessing unit (GPU) [19]. Similarly, matching accuracy can also be
enhanced by using more accurate (proprietary) biometric matching
algorithms. Being able to use any biometric matching algorithm as
per the need of the application is one of the key contributions of
multisketches. For scientific reproducibility, one of our key method-
ological choices for this paper and its proof-of-concept is to rely on
an open-source matching algorithm, standard fingerprint datasets,
and commodity hardware to measure matching accuracy and per-
formance. We elaborate on the performance and limitations of our
implementation of multisketch in Section 4.2.
The problem of correlations. If the templates in w are uncorre-
lated, i.e., an adversary cannot tell which sets of templates belong
to the same user with probability better than random guessing,
then the attacker must search all possible conjectured templates
w′. However, one major challenge in practice is that biometric tem-
plates from the same user might be correlated. As a simple example,
gender correlates significantly with the appearance of fingerprint
templates [49]. Conversely, it is not reasonable to expect that an
adversary can directly determine the joint probabilities of biometric
tuples, given the complexity of the distribution from which they are
drawn. Much of our work in this paper evaluates empirically how
effectively an adversary can correlate the fingerprint templates of
individual users in practice. We experimentally explore plausible
strategies for attacking our multisketch construction. Even with the
best attack, we show that TenSketch with N = 104 users provides
security equivalent to 70-bits in practice, assuming (pessimistically)
that the attacker already knows one of the user fingerprints.
Contribution. Our contributions are as follows.
• We introduce and formalize multisketches, a generalization of
• We construct TenSketch, a multisketch for tenprints that works
• We study correlations among users’ fingerprint templates and
analyze the security of TenSketch given classifiers that can iden-
tify these correlations.
Finally, we report on the security and matching functionality of
TenSketch, demonstrating its practicality.
with off-the-shelf biometric matching algorithms.
secure sketches.
•
We will open-source our prototype implementation of TenSketch
with the final version of the draft.
2 OVERVIEW OF MULTISKETCH
In this section, we present a simple example to illustrate how mul-
tisketches may be used in the biometric database setting. This ex-
ample is a simplification. It does not reflect the detailed mechanics
of our full multisketch scheme (given in Section 4), but is meant to
convey the basic intuition. Consider a database with N = 3 users,
each with n = 5 fingerprints. Templates corresponding to these
fingerprints are shown conceptually in Figure 1.
A finger may match against the wrong template (belonging to a dif-
ferent user) for its corresponding position. Thus, some form of error
correction is required to recover the key. As we explain in Section 4,
we accomplish this in our complete multisketch scheme using an
existing set distance secure sketch construction [29].
Correlations. The second problem is our simplistic security analy-
sis above that assumes templates are uncorrelated, i.e., the templates
of a given user are no more similar to one another than to those of
other users. In practice, this isn’t true; as just one example noted
above, fingerprint appearance correlates with gender [49].
It is hard to obtain a principled upper bound on these corre-
lations. However, for our construction, there is strong empirical
evidence that the correlations among the templates of a user are
relatively weak. In Section 6, we explore a variety of adversarial
classifier constructions based on deep neural networks (DNNs) to
classify pairs (and tuples) of fingerprint templates as belonging
to the same user or not. The performance of these DNNs — false
positive and false negative rates — is too poor to advantage an ad-
versary significantly, as we show in Section 7. (The adversary gains
a 9-bit advantage against a conservatively parameterized version
of our TenSketch construction.)
When our multisketch construction is made error-tolerant and
correlations are taken into account, we find that users can con-
struct keys with relatively high entropy using fingerprints alone
— achieving, e.g., 58-bit security in a version of TenSketch (which
can be significantly boosted via a standard key-derivation func-
tion [21]). Of course, it is also possible to add additional biometrics
(iris codes, voiceprint, etc.) to achieve stronger security and hedge
against better correlation techniques.
3 PRELIMINARIES
We begin our discussion with some preliminary discussion of the
notations and background on secure sketches.
Message spaces. We refer to the data in a biometric reading as
a message. We denote a message space using capital letters and
its members using lowercase letters. For example, W is a set of
messages, while w denotes an element in W . We denote a vector
or tuple using bold fonts; the ith entry in a tuple is denoted by
subscript i. For instance, a tuple of messages is denoted by w, and
the ith entry in that tuple by wi. We use wi ...j to denote a subset
of the tuple w, for 1 ≤ i ≤ j ≤ |w|.
We explore settings in which users authenticate utilizing multiple
biometric readings. These readings may be multimodal, i.e., involve
different physiological feature types (e.g., fingerprint, iris scan,
hand geometry, etc.), or may involve multiple instances of the same
feature type (e.g., multiple fingerprints, two iriscodes, etc.). It is
helpful to view such instances as distinct physiological features; for
example, index fingers look different, in general, than thumbs, i.e.,
they are drawn from different distributions. Thus, we treat each
such reading as coming from a distinct space Wi with probability
distribution pi. We denote a multi-template message-space by W ⊆
W1 × . . .Wn and a message tuple in this space by w = w1 . . . wn.
Let p(w) denote the joint probability of a message tuple w ∈ W.