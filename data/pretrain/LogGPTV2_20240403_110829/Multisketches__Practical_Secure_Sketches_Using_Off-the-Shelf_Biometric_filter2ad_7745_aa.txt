# Title: Multisketches: Practical Secure Sketches Using Off-the-Shelf Biometric Matching Algorithms

## Authors:
- Rahul Chatterjee
- M. Sadegh Riazi
- Tanmoy Chowdhury
- Emanuela Marasco
- Farinaz Koushanfar
- Ari Juels

## Affiliations:
- GMU (George Mason University)
- UW–Madison (University of Wisconsin–Madison)
- UCSD (University of California, San Diego)
- Cornell Tech

## Abstract
Biometric authentication is increasingly being used for large-scale human authentication and identification, creating the risk of leaking biometric secrets in the event of a database compromise. While powerful "fuzzy" cryptographic techniques, such as secure sketches, could help protect biometric templates, they are not widely used because they require new biometric matching algorithms that may have diminished accuracy.

We introduce a new primitive called a multisketch, which generalizes secure sketches. Multisketches can work with existing biometric matching algorithms to generate strong cryptographic keys from biometric data reliably. A multisketch operates on a biometric database containing multiple biometrics (e.g., multiple fingerprints) of a moderately large population (e.g., thousands of users). It conceals the correspondence between users and their biometric templates, preventing an attacker from learning the biometric data in the event of a breach, but enabling the derivation of user-specific secret keys upon successful authentication.

We design a multisketch over tenprints (fingerprints of ten fingers) called TenSketch. We report on a prototype implementation of TenSketch, demonstrating its feasibility in practice. We explore several possible attacks against the TenSketch database and show, via simulations with real tenprint datasets, that an attacker must perform a large amount of computation to learn any meaningful information from a stolen TenSketch database.

## CCS Concepts
- Security and privacy → Biometrics

## ACM Reference Format
Rahul Chatterjee, M. Sadegh Riazi, Tanmoy Chowdhury, Emanuela Marasco, Farinaz Koushanfar, and Ari Juels. 2019. Multisketches: Practical Secure Sketches Using Off-the-Shelf Biometric Matching Algorithms. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, London, United Kingdom, November 11–15, 2019 (CCS '19), 16 pages. https://doi.org/10.1145/3319535.3363208

## Permission
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## Introduction
Human authentication to computers has traditionally relied on passwords. However, the usability and security shortcomings of passwords have prompted a rise in the popularity of biometric authentication. Biometrics present a significant challenge: it is difficult to store biometric data securely in databases. Biometric measurements are noisy, and two scans of the same physiological feature almost always differ due to changes in reading conditions. Additionally, biometric features change subtly over time. Biometric matching involves measuring the similarity between a template (an explicit, registered set of biometric features) and a biometric measurement taken during authentication. Unlike passwords, which can be hashed, biometric data cannot be protected in the same way.

To address this, researchers have explored various forms of fuzzy cryptography, such as secure sketches and fuzzy extractors. These techniques aim to extract high-entropy keys reliably from noisy sources like biometrics. However, they fall short in practice for two reasons: individual biometrics often have low effective entropy, and custom-built distance metrics for biometrics are complex and challenging to achieve both rigorous security and good matching accuracy. Despite decades of research, fuzzy cryptography is not used to protect biometrics in practice.

Techniques like secure function evaluation and secure multi-party computation have been proposed for private queries against biometric databases but do not protect against a database breach. Secure hardware, such as hardware security modules (HSMs) and trusted execution environments (TEEs), can offer strong protection, but recent attacks highlight their vulnerabilities. The techniques we present in this paper are complementary to and usable in concert with trusted hardware and secure function evaluation.

In this work, we introduce and formalize a new generalization of secure sketches called multisketches. A conventional secure sketch operates on individual biometric templates, while a multisketch operates on a batch of templates belonging to multiple users. In a multisketch system, unmodified templates are used, and security is achieved by concealing the correspondence between templates and users.

We present a specific multisketch construction that can use off-the-shelf biometric matching algorithms, thus realizing the long-elusive goal of secure, practical derivation of strong cryptographic keys from biometric data. Our construction requires the registration of multiple biometrics by individual users and can only protect databases containing the biometrics of many users. This is necessary because individual biometrics lack adequate usable entropy to derive strong cryptographic keys.

Tenprints, in particular, are commonly enrolled in border control, law enforcement, and social-service delivery databases. These databases often have millions of users, such as India’s Aadhaar system with over one billion enrolled users. Data compromise is a serious concern, and the need to protect templates in such systems motivates our work.

### Main Idea
In our multisketch construction, each user \( u \) registers with a set of \( n \) distinct biometric templates \( w = w_1, \ldots, w_n \). The goal is to recover \( w \) from the database \( D \) by providing new biometric readings \( \tilde{w} = \tilde{w}_1, \ldots, \tilde{w}_n \), as long as most of \( \tilde{w} \) matches with \( w \).

To prevent an adversary from learning \( w \) if the database is breached, our construction conceals which templates are associated with which user and randomly orders all templates in \( D \). This randomization means an adversary cannot easily pick out sets of associated templates and must attempt to reconstruct \( w \) via brute-force search over all possible conjectured sets \( w' \). Given enough users (say, thousands), such a search is computationally infeasible in practice.

To reconstruct her set of templates \( w \), a user \( u \) presents a set of fresh biometric readings \( \tilde{w} = \tilde{w}_1, \ldots, \tilde{w}_n \). An off-the-shelf biometric matching algorithm is then used to match each \( \tilde{w}_i \) to its corresponding, most similar template \( w'_i \) in \( D \), yielding a conjectured template set \( w' \). Assuming enough matches are successful, even if some are erroneous, \( u \) can recover \( w \).

A secure sketch—and thus our multisketch scheme—can easily be converted into a fuzzy extractor, allowing \( w \) to be converted into a strong cryptographic key \( \kappa \) that can be used for authentication, signing, or other purposes.

The performance of the multisketch largely depends on the underlying biometric matching algorithm. During recovery, the matching algorithm might need to be applied to all templates in \( D \) to identify the closest matches, which can be expensive for large \( D \). However, the search process can be parallelized, and recent studies show how to perform millions of matches per second using GPUs. For scientific reproducibility, we rely on open-source matching algorithms, standard fingerprint datasets, and commodity hardware to measure matching accuracy and performance.

### Problem of Correlations
If the templates in \( w \) are uncorrelated, an adversary cannot tell which sets of templates belong to the same user with probability better than random guessing. However, in practice, biometric templates from the same user might be correlated. For example, gender correlates significantly with the appearance of fingerprint templates. Conversely, it is not reasonable to expect that an adversary can directly determine the joint probabilities of biometric tuples, given the complexity of the distribution from which they are drawn. We evaluate empirically how effectively an adversary can correlate fingerprint templates in practice. Even with the best attack, TenSketch with \( N = 10^4 \) users provides security equivalent to 70-bits in practice, assuming (pessimistically) that the attacker already knows one of the user's fingerprints.

### Contributions
- **Introduction and Formalization**: We introduce and formalize multisketches, a generalization of secure sketches.
- **Construction**: We construct TenSketch, a multisketch for tenprints that works with off-the-shelf biometric matching algorithms.
- **Security Analysis**: We study correlations among users' fingerprint templates and analyze the security of TenSketch given classifiers that can identify these correlations.
- **Practicality**: We report on the security and matching functionality of TenSketch, demonstrating its practicality.
- **Open-Source Implementation**: We will open-source our prototype implementation of TenSketch with the final version of the draft.

## Overview of Multisketch
In this section, we present a simple example to illustrate how multisketches may be used in the biometric database setting. This example is a simplification and does not reflect the detailed mechanics of our full multisketch scheme (given in Section 4), but is meant to convey the basic intuition. Consider a database with \( N = 3 \) users, each with \( n = 5 \) fingerprints. Templates corresponding to these fingerprints are shown conceptually in Figure 1.

### Error Correction
A finger may match against the wrong template (belonging to a different user) for its corresponding position. Thus, some form of error correction is required to recover the key. As we explain in Section 4, we accomplish this in our complete multisketch scheme using an existing set distance secure sketch construction [29].

### Correlations
The second problem is our simplistic security analysis that assumes templates are uncorrelated. In practice, this isn't true; for example, fingerprint appearance correlates with gender [49]. It is hard to obtain a principled upper bound on these correlations. However, for our construction, there is strong empirical evidence that the correlations among the templates of a user are relatively weak. In Section 6, we explore a variety of adversarial classifier constructions based on deep neural networks (DNNs) to classify pairs (and tuples) of fingerprint templates as belonging to the same user or not. The performance of these DNNs—false positive and false negative rates—is too poor to advantage an adversary significantly, as we show in Section 7. (The adversary gains a 9-bit advantage against a conservatively parameterized version of our TenSketch construction.)

When our multisketch construction is made error-tolerant and correlations are taken into account, we find that users can construct keys with relatively high entropy using fingerprints alone—achieving, e.g., 58-bit security in a version of TenSketch (which can be significantly boosted via a standard key-derivation function [21]). Of course, it is also possible to add additional biometrics (iris codes, voiceprints, etc.) to achieve stronger security and hedge against better correlation techniques.

## Preliminaries
We begin our discussion with some preliminary notations and background on secure sketches.

### Message Spaces
We refer to the data in a biometric reading as a message. We denote a message space using capital letters and its members using lowercase letters. For example, \( W \) is a set of messages, while \( w \) denotes an element in \( W \). We denote a vector or tuple using bold fonts; the \( i \)-th entry in a tuple is denoted by subscript \( i \). For instance, a tuple of messages is denoted by \( \mathbf{w} \), and the \( i \)-th entry in that tuple by \( w_i \). We use \( w_{i...j} \) to denote a subset of the tuple \( \mathbf{w} \), for \( 1 \leq i \leq j \leq |\mathbf{w}| \).

We explore settings in which users authenticate utilizing multiple biometric readings. These readings may be multimodal, i.e., involve different physiological feature types (e.g., fingerprint, iris scan, hand geometry, etc.), or may involve multiple instances of the same feature type (e.g., multiple fingerprints, two iriscodes, etc.). It is helpful to view such instances as distinct physiological features; for example, index fingers look different, in general, than thumbs, i.e., they are drawn from different distributions. Thus, we treat each such reading as coming from a distinct space \( W_i \) with probability distribution \( p_i \). We denote a multi-template message-space by \( W \subseteq W_1 \times \ldots \times W_n \) and a message tuple in this space by \( \mathbf{w} = w_1 \ldots w_n \). Let \( p(\mathbf{w}) \) denote the joint probability of a message tuple \( \mathbf{w} \in W \).