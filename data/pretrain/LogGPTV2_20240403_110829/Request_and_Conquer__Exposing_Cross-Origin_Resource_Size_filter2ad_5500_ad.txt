the attack scenario against WebMD, a single iteration of
this technique, i.e., including the medical condition on a
compressed resource with other known content, reduces
the average group size to 18.73. By applying multiple
iterations, each with slighly different content, it becomes
possible to uniquely identify the user’s medical condition
in most cases.
6https://healthmanager.webmd.com/
7When a resource is included as a  element,
the
Accept-Encoding header will be either absent or set to identity,
causing most web servers to send it without compression.
456  25th USENIX Security Symposium 
USENIX Association
100.0
G
s
t
n
u
o
c
c
a
f
t
o
e
g
a
n
e
c
r
e
P
10.0
1.0
0.1
G
G
G
G
G
G
G
0
No compression
G all resources
follow{ing+ers}
followers
following
likes
G
100
50
Group size
Gzip compression
G all resources
follow{ing+ers}
followers
following
likes
100.0
G
s
t
n
u
o
c
c
a
f
t
o
e
g
a
n
e
c
r
e
P
10.0
1.0
0.1
G
0
G
100
200
Group size
300
400
Figure 4: Percentage of Twitter accounts that share the same resource length with a group of varying size.
4.3 Search-Oriented Information Leakage
Many web applications allow their users to search the
data they (in)directly entered. For instance, web-based e-
mail clients provide the functionality to search for certain
messages. In a recent study, Gelernter et al. show that
this functionality can be abused by attackers to disclose
sensitive information, such as the user’s identity and
credit-card numbers [20]. In their attacks, the researchers
leverage the fact that in certain cases query parameters
are reflected in the results. Consequently, when a search
query has several matches, the resulting resource size
will be considerably larger than with an empty result-
set, allowing an adversary to resort to timing attacks to
determine whether a certain search query yielded results.
Several service providers that were shown to be vulnera-
ble to these attacks implemented a mitigation by prevent-
ing query parameters to be reflected in the search results.
Although these measures effectively thwart the above-
mentioned attacks, the web services remain vulnerable to
the size-exposing attacks proposed in this paper, as these
disclose the size of a resource with 1-byte precision.
4.4 Cross-Origin Cache Operations
Telegram is a popular cloud-based instant messaging ser-
vice, particularly known for its security and encryption
features. Not surprisingly, these features have attracted
terrorist organizations to use the service as a secure com-
munication channel [53]. This, in turn, makes Telegram
a valuable target for intelligence agencies to find mem-
bers of terrorist groups. Since all exchanged messages
are encrypted using MTProto, which was shown to only
suffer from minor theoretical attacks, plaintext-recovery
is considered to be unlikely [30].
Next to the mobile and desktop versions of the Tele-
gram application, a web-based version is provided as
well8. An interesting feature of this web-based version
is that when a photo is shared in a group, the web appli-
8https://web.telegram.org
cation will use the File API [46] to cache two thumbnails
of the photo. Because the storage used by the File API
counts towards the global cache quota, it is possible to in-
fer whether a resource is being cached as per the attacks
discussed in Section 3.4.2 and Section 3.4.3.
In an attack scenario where the adversary tries to
determine group membership of the victim,
the at-
tacker first lures the victim to his malicious web page.
On this web page,
the adversary includes the page
of the target group in an iframe. Telegram does not
use the X-Frame-Options header, but instead makes
the content invisible by default through CSS, and uses
JavaScript to make it visible in case no framing is de-
tected (a popular Clickjacking defense proposed by Ryd-
stedt et al. [51]). As a result, the page’s content will be
loaded, but remains invisible, and impossible to interact
with9. If the user is member of the targeted group, the
Telegram website will download and cache thumbnails
of the latest media items that have been shared in the
group, resulting in a change of the available quota. Oth-
erwise, a message is shown stating that the user is not a
member of the group. As an additional verification step,
the adversary could post another photo in the group, and
witness a change in the available quota. By leveraging
our novel size-exposing techniques, we found it was triv-
ial to detect group membership. Because the MTProto
scheme only provides very limited padding, group mem-
bership can also easily be detected by analyzing the size
of HTTP responses.
5 Defense Mechanisms
In this section we discuss various mechanisms that can be
used to thwart size-exposing attacks. Due to space limi-
tations, we only focus on a limited set of defense mecha-
nisms, which were selected on the basis of completeness,
novelty, amount of overhead and ease of adoption.
9The  element should have a sandbox attribute set to
"allow-scripts allow-same-origin" to prevent top level navi-
gation, while ensuring the page is loaded properly.
USENIX Association  
25th USENIX Security Symposium  457
5.1 Hardening Browser Storage
As was shown in Section 3.4, several features related to
the storage operations in browsers can be abused to ex-
pose the size of cross-origin resources. At the time of
writing, there exists no universal specification that stan-
dardizes these operations. However, the Storage API
specification is being developed with the purpose of de-
signing a unified definition that will be adopted by all
browsers. In its current state, the Storage API consoli-
dates the current browsers behavior regarding the quota
limit per website. Furthermore, it incorporates the func-
tionalities offered by the Quota Management API.
We propose a countermeasure that extends the Storage
API. To make adoption by browsers feasible, we aim to
provide a usable solution, i.e., normal application behav-
ior should not be jeopardized. As a result of the feed-
back provided by the communication with specification
editors and browser vendors, we opted for an approach
where “virtual padding” is applied to resources. To pre-
vent an adversary from learning the size of a resource,
either by abusing the storage limit or by requesting the
available quota, this size should be masked with a ran-
dom value. However, it is a well-known fact that by
adding a random value, the mechanism becomes subject
to statistical attacks. Because resources can be added to
the cache extremely fast, an adversary is able to obtain
a large number of observations in a limited amount of
time, putting him in a very strong position.
Inspired by a mitigation for web-based timing side-
channels proposed by Schinzel [52], and by making the
observation that in contrast to caching operations, down-
loading a resource takes a considerable amount of time,
we propose the following defense. When a resource is
downloaded as the result of a fetch() operation, we as-
sociate a unique identifier, uid, with the Response ob-
ject. Next, we compute q = (cid:31)size +hash(secret +uid)(cid:30)∆,
where size is the size of the resource, hash() a uniformly
distributed hash function yielding integers in the range
[0, pmax], and secret a cryptographic random number that
is associated to a single browsing session10. The total
size q is then rounded up towards the nearest multiple
of ∆ to prevent an attacker from learning the bounds of
the added padding. When the Response is added to the
cache, the per-site and global quota will be increased
by q. This value should also be stored as part of the
Response object to ensure that for each cache opera-
tion the same value is either added or subtracted from the
quota. As a result, the only way for an adversary to ob-
tain a new observation is to download the same resource
again. It should be noted that the padding that is added
for each cache operation is virtual, in the sense that these
10To prevent an adversary from linking two browser sessions, secret
is changed whenever the browser session changes.
bytes are not actually written to the disk, but are just kept
as a type of bookkeeping.
It is clear that the overhead on the quota and the se-
curity guarantees provided by this defense method are
directly related to the values of pmax and ∆. In fact, this
provides a trade-off between security/privacy and usabil-
ity, for instance, the larger the value of pmax, the harder it
will be for an adversary to uncover the size of resources
(within certain boundaries), but on the other hand, a large
pmax will entail a smaller storage capacity due to the
amount of padding. We argue that with an analysis on
the typical use-cases of caching operations, these val-
ues could be defined to accommodate legitimate behavior
while preventing attacks. Furthermore, it could be taken
into account that this mechanism generates a virtual loss
in storage capacity, and therefore the quota could be in-
creased to account for this.
In addition, it is possible
to apply a rate-limiting approach to limit the amount of
observations that can be made by an adversary. For in-
stance, if the reported quota is only updated once every
minute, statistical attacks can be largely mitigated, which
in turn allows for smaller values of pmax, and restricts the
(already virtual) overhead.
Given the generality of the defense, its strong security
guarantees, and the low overhead, we feel confident that
this approach, or a similar derivative thereof, will be in-
corporated into the HTML specification, and encourage
browser vendors to mitigate the attacks presented in Sec-
tion 3.4 in this manner.
5.2 Detecting Illicit Requests
In essence, the size-exposing techniques presented in this
paper require the ability to initiate authenticated cross-
origin requests, and rely on the targeted web service to
handle the request in the same way it would for legiti-
mate requests. This means that when either part is re-
moved, i.e., either authenticated cross-origin requests are
disabled, or the web server answers with a static error
message, the complete class of size-exposing techniques
will be mitigated. To accomplish this, it is possible to
resort to existing, and well-established techniques in re-
lated research fields. For instance, by blocking third-
party cookies, which is typically used to prevent track-
ing on the web [50], the cross-origin requests initiated
by the adversary will be sent without the cookie. As a
result, the website will handle the request as if the user
was not logged in, preventing the adversary from learn-
ing anything about the user’s state at the website. Mozilla
and the Tor Browser project are working on minimizing
the limitations imposed by blocking third-party cookies,
by implementing a feature name double-keyed cookies,
which binds cookies to the origin pair (first-party, third-
party), and aims to prevent the risks of breaking sites
458  25th USENIX Security Symposium 
USENIX Association
caused by blocking cookies [9, 59]. Similarly, certain
browsers provide the ability to attach third-party cookies
only if these were set during top-level navigation, and
block these otherwise. While this technique can be used
to prevent tracking by unknown parties, it does not ade-
quately prevent the attacks presented in this paper as the
targeted third-party services are the ones that are actually
used by the victim.
On the side of the server, solutions similar to those
that prevent Cross-Site Request Forgery (CSRF) attacks
could be applied. A well-known method, as proposed by
Barth et al., to accomplish this, is to analyze the Origin
and/or Referer headers and only allow requests from
trusted origins [2].
5.3 Network-based Countermeasures
Padding can be used to hide the length of resources dur-
ing their transmission. Since general-purpose padding
schemes are already well-studied, we do not discuss
them further. Instead, we focus on countermeasures that
fit our use-case, where only the size of sensitive dynami-
cally generated resources must be protected. This allows
us to provide a countermeasure with low overhead and
high security guarantees, at the cost of requiring some
effort on the web administrator’s part.
Our idea is to add an amount of padding based on the
hash of the session cookie, the URL, and any parame-
ters that affect the generation of the resource. More for-
mally, padding = hash(cookie + url + params).
If the
user is not logged in, no padding is added. For each re-
source, the parameters that influence the generation of
the resource must be manually specified. Other parame-
ters should not be included, otherwise an adversary can
add bogus parameters to obtain a new padding value for
the same resource. This construction assures that sensi-
tive resources, for any specific user, receive an amount
of padding that is unpredictable by an attacker. How-
ever, this padding remains identical over several requests,
meaning it even guarantees protection against statisti-
cal attacks.
Information can only be leaked if the re-
source changes over time. This can happen when the
attacker was able to affect the generation of the resource
on the server, or simply because the information con-
tained in the resource has changed over time. In this sit-
uation an observer can learn the difference in resource
size. If the resource does not contain variable content,
such as dynamic advertisements, this attack can be miti-
gated by including the content of the resource in the hash
function. Similar to hardening the browser (see Sec-
tion 5.1), the security guarantees depend on the value
of pmax. Provided the hash function is uniformly dis-
tributed, this countermeasure introduces on average pmax
2
bytes of overhead.
For wireless networks, where we assume Wi-Fi en-
cryption is used on top of TLS, we can rely on the previ-
ously mentioned techniques to protect the TLS connec-
tion. Additionally, an identifier-free wireless protocol
can be used, making it more difficult for an attacker to
attribute Wi-Fi packets to specific clients [23, 18, 3, 8].
6 Related Work
Size-exposing techniques have surfaced in several re-
search areas, ranging from timing attacks, to network
traffic analysis, to browser-based and cross-VM side-
channel leaks. As part of an in-depth analysis, which
lead to the discovery of multiple novel attack methods,
we already touched upon a variety of related work, as
discussed in Section 3. In this section, we give a brief
overview of the most relevant work, and discuss it in the
context of our findings.
Prior research that analyses methods that can expose
the size of an attacker-specified resource, is mainly fo-