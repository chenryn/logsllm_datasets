trol model in which access rights are speciﬁed in terms of
roles. CI generalizes RBAC by specifying more parameters
by roles, containing a notion of attribute and data subject,
and including temporal conditions. RBAC can express poli-
cies about arbitrary actions, whereas CI, as currently formu-
lated, is concerned solely with communication actions. CI
replaces the “object” of RBAC with a recipient principal,
enabling the “actee” (object or recipient) to be speciﬁed by
a role. RBAC rules are positive and negative norms of the
following forms, respectively:
Allow:
Deny:
inrole(p1, ˆr1) ∧ (p2 = ˆp2)
inrole(p1, ˆr1) ∧ (p2 = ˆp2) → ⊥
Notice RBAC lacks the subject q and attribute t. Temporal
conditions are also absent. “Deny” rules are expressible in
CI by negative norms with ⊥, the unsatisﬁable formula.
The key reason RBAC is insufﬁcient for privacy is it
lacks the notion of an attribute. Suppose a doctor reads a
patient’s medical ﬁle and then sends an email to his bro-
ker. From an RBAC perspective, nothing untoward has oc-
curred. Both actions, reading the ﬁle and sending the email,
are (presumably) permitted by the policy. However, a pri-
vacy breach has occurred if the doctor includes sensitive
medical information about another patient in his email. To
distinguish the appropriate from the inappropriate, it is es-
sential to recognize the attributes communicated by each
action. In other words, RBAC is insufﬁcient for privacy be-
cause it lacks the “contains” relation.
Several access control languages, such as Binder [19]
and RT [28], extend RBAC using Datalog. Typically, these
languages use only positive rules and contain neither tem-
poral conditions nor a notion of the subject of a piece of
information. Cassandra [11], a sophisticated access control
language with denying rules, has been applied to electronic
health records in the United Kingdom. In that study, consent
was captured through role activation: a patient consents to
treatment by activating a “consent-to-treatment” role. Fu-
ture temporal constraints, as well as notions of computing
attributes, are absent.
6.2 Extensible Access Control Markup
Language
The Extensible Access Control Markup Language [5]
is a ﬂexible language for expressing access control poli-
cies. XACML’s extension mechanism enables XACML to
capture a wide variety of access control constructs. To
make meaningful statements about the expressiveness of
XACML, we restrict our attention to policies expressible by
simple extensions to the base XACML language. In partic-
ular, we abstract XACML’s targets as elements of a Boolean
algebra over a set of requests and consider only the built-in
combination algorithms.
XACML lacks ﬁrst-class temporal conditions. When an
XACML policy reaches a policy judgment, it can include in
its response an “obligation,” a symbol to be interpreted at
the point of policy enforcement. These uninterpreted sym-
bols can be used to represent future requirements. Obliga-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:00 UTC from IEEE Xplore.  Restrictions apply. 
Subject Attributes
Future Combination
Sender
Role
Model
RBAC
XACML Flexible
Fixed
EPAL
P3P
Fixed
CI
Role
Recipient
Identity
Flexible
Role
Role
Role
×
Flexible
Fixed
Fixed
Role
×
◦
•
•
•
Past
×
×
×
◦
•
×
◦
◦
×
•
•
•
×
◦
•
Figure 5. Comparison of various privacy languages. The symbol × indicates the feature is absent
from the language, ◦ indicates partial or limited functionality, and • indicates the feature is fully
functional. Note, [6] gives an extension of EPAL that is closed under combination.
tions, however, prevent the semantics of an XACML policy
from being fully speciﬁed by the policy itself (as the policy
relies on the surrounding environment to give the obliga-
tions meaning). Past conditions can also be expressed in
XACML by encoding state information into the “request
context,” additional information passed to the policy eval-
uation engine. However, using this feature to capture state
more complex than “opt-in” and “opt-out” is awkward.
XACML is unable to correctly capture attributes [4], es-
pecially in connection with denying rules (negative norms).
The difﬁculty arises because XACML conceives of a policy
as a function from requests to responses. XACML policies
are structured as combinations of simple subpolicies, where
combination is computed point-wise on the functions repre-
sented by the subpolicies. This fails for attributes because
the effect of combination can be non-local (due to “upward”
inheritance). The combined response for two policies on a
request is not necessarily determined by the responses of the
subpolicies on that request. CI avoids this by representing
and combining policies logically.
6.3 The Enterprise Privacy Authorization
Language
The Enterprise Privacy Authorization Language is ex-
pressly designed for expressing enterprise privacy poli-
cies [8, 38]. EPAL policies are concerned with a single
sender (the enterprise itself) and a single subject role [27].
EPAL has the same limitations as XACML on its temporal
conditions.
EPAL requests are elements of a Cartesian product of
trees representing roles, attributes, purposes, and actions.
The “role” coordinate represents the role of the recipient.
The “purpose” coordinate is not captured directly in CI.
However, these purposes can be simulated in CI (see be-
low). Finally, EPAL policies are concerned with general
actions, not just with communication actions, as in RBAC.
With the exception of purposes and non-communication ac-
tions, CI captures EPAL policies using positive and negative
norms of the following forms, respectively:
(p1 = ˆp1) ∧ inrole(p2, ˆr2) ∧ (t ∈ ˆt) ∧ ˆo
(p1 = ˆp1) ∧ inrole(p2, ˆr2) ∧ (t ∈ ˆt) → ⊥
The sender agent ˆp1 is ﬁxed for every norm in a single pol-
icy. The symbol ˆo is a propositional letter that represents
an uninterpreted future “obligation,” similar to those found
in XACML. EPAL structures these obligations with a sub-
sumption relation.
CI improves on EPAL obligations in two respects. First,
obligations are expressed in temporal logic (as in [26]), the
same logic as the policy itself. Thus, tools can interpret
temporal conditions, and determine, for example, whether
or not it is possible for an agent to discharge his or her fu-
ture obligations while adhering to the policy. Second, our
temporal conditions can speak about the past as well as the
future, enabling policies which permit information ﬂows in
virtue of past actions. In CI, the subsumption relation on
temporal conditions arises naturally as logical implication
of temporal formulas. Future obligations in the form of a list
of future actions that must be performed are present in the
policy speciﬁcation language Ponder [17]. These obliga-
tions are richer than EPAL’s uninterpreted obligations, but
are restricted to
conditions, failing to capture the reac-
tive
condition in COPPA norm (8), for example.
EPAL policy authors can attach obligations to denying
rules. However, the semantics of such obligations are dubi-
ous: the policy engine responds that a contemplated action
is both denied and incurs an obligation, but is the obligation
incurred if the requesting agent does not perform the con-
templated action? CI resolves this difﬁculty by weakening
the notion of a denying rule to that of a negative norm, a
formula of the form ϕ → ψ. Negative norms do not forbid
actions described by ϕ, but instead forbid actions described
by ϕ that violate the temporal condition ψ. Complete pro-
hibitions can be expressed by instantiating ψ with ⊥.
EPAL purposes in CI.
In EPAL, each action is conducted
for some purpose. An EPAL policy can permit an action for
a particular purpose and also deny the same action for a dif-
ferent purpose. For example, a health web site might be
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:00 UTC from IEEE Xplore.  Restrictions apply. 
permitted to analyze visitor health information for medical
purposes, but might not be permitted to analyze the same
health information for marketing purposes. CI can capture
this notion by decomposing large agents into several smaller
agents, one for each purpose. For example, the monolithic
health web site could be decomposed into a medical agent
and a marketing agent. EPAL purposes could then be ex-
pressed in CI by restricting communication among the con-
stituent agents.
6.4 Platform for Privacy Preferences
The Platform for Privacy Preferences (P3P) is a privacy
language intended for use by web site operators in inform-
ing their visitors of their data practices [16, 34]. P3P con-
tains only positive norms and very restricted temporal con-
ditions. Additionally, a single P3P policy is restricted to a
single sender (the web site) and a single subject role (a web
site visitor). These restrictions impair the use of P3P as a
general-purpose privacy language. For example, P3P is un-
able to directly express that a web site conforms to COPPA.
To make such a statement, a web site operator must employ
a P3P extension [15] and make the policy statement COPPA
status="compliant". Temporal conditions in P3P are
limited to opt-in, opt-out, and true. P3P statements
correspond to positive norms of the following form:
(p1 = ˆp1) ∧ inrole(p2, ˆr2) ∧ inrole(q, visitor) ∧ (t ∈ ˆt) ∧ ψ
where ψ represents “opt-in,” “opt-out,” or no temporal con-
dition. The lack of negative norms simpliﬁes P3P at the cost
of expressiveness. The ﬁxed form of the opt-in and opt-out
conditions is restrictive, preventing even minor variations
such as the parental “grant-consent” and “revoke-consent”
idiom found in COPPA.
P3P provides for privacy preference languages that a
web surfer can use to ﬁlter out web sites with unwanted
data practices. These preferences languages highlight an-
other difference between P3P and CI: all P3P policies in-
habit a single global context. A web surfer cannot specify
different preferences for medical web sites than for ﬁnan-
cial web sites. This forces web surfers to resort to a “low-
est common denominator” preference. Both the preference
languages APPEL [16] and XPref [2] can express negative
preferences, but such preferences are not respected in the
full P3P system [9].
7 Conclusions and Future Work
We present a logical framework for expressing and rea-
soning about norms of transmission of personal informa-
tion. This framework formalizes some central ideas of con-
textual integrity, a conceptual framework for understanding
privacy expectations that has been developed in the litera-
ture on law and public policy. Privacy norms are expressed
as LTL formulas and interpreted over traces in which the ba-
sic actions include communication of the form “Alice gives
Bob a certain type of information about Charlie.” A ba-
sic premise of contextual integrity is that appropriateness
depends on the context, the role, and the subject of per-
sonal information, and cannot be captured accurately using
a DRM-style “ownership of information” model or a simple
partitioning of information into “public information” and
“private information.” We illustrate the use of the frame-
work by showing how to express several privacy provisions
of HIPAA, COPPA, and GLBA as temporal logic formulas
about the transmission of personal information.
We show that questions of policy consistency, compli-
ance, combination, and reﬁnement reduce to well-studied
problems in LTL. Policy combination, which has proven
problematic in EPAL, is formulated easily using logical
conjunction and disjunction, and policy reﬁnement simi-
larly reduces to logical implication.
In deciding compli-
ance, we are given a sequence of past communications
and wish to determine whether a possible next commu-
nication will violate the privacy policy. This has both
weak and strong formulation: weak compliance requires
only that the next action satisﬁes all necessary present con-
ditions, whereas strong compliance requires, in addition,
that there is an achievable sequence of future actions that
meets all requirements about the future. Weak compliance
can be checked in polynomial time using results from run-
time veriﬁcation, whereas strong compliance checks require
PSPACE complexity.
We compare our framework to previous access control
and privacy policy languages including RBAC, XACML,
EPAL, and P3P. Our results are summarized in Fig. 5. In
particular, the two central concepts of our framework—
temporal conditions and separation between positive and
negative norms—seem to capture essential features used in
writing privacy policies. Speciﬁcally, temporal conditions
improve on the uninterpreted future obligations of XACML
and EPAL, and the use of negative norms obviates the prob-
lems with obligations attached to denying rules in previous
frameworks.
Future Work.
In future work, we hope to apply the model
by using a model checker to analyze whether privacy norms
contained in the HIPAA privacy rule are consistent with
certain purposes and entail speciﬁc desired properties. We
also hope to apply the model in a system for handling elec-
tronic health records to ensure that the system complies with
HIPAA.
Currently, our framework assumes that norms are based
only on the type of information (rather than actual data val-
ues) and that information is about a single individual (rather
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:00 UTC from IEEE Xplore.  Restrictions apply. 
than about a group of individuals). We plan to extend the
formalization by relaxing these restrictions, enabling norms
to depend on speciﬁc data values and information to de-
scribe groups of individuals. In this extended framework,
we hope to develop precise connections with research on
data privacy and aggregation.
We also plan to extend the framework to include parame-
terized roles. These parameterized roles would enable CI to
capture certain norm more precisely. For example, norm (7)
could be expressed more precisely with a parameterized
parent role, ensuring that the consenting parent is actually
the child’s parent. Parameterized roles are present in other