### 6.1 Role-Based Access Control (RBAC) and Contextual Integrity (CI)

Role-Based Access Control (RBAC) is a widely used access control model where access rights are defined in terms of roles. Contextual Integrity (CI) generalizes RBAC by introducing additional parameters, such as attributes and data subjects, and incorporating temporal conditions. While RBAC can express policies for arbitrary actions, CI, as currently formulated, focuses solely on communication actions.

In RBAC, the "object" is replaced with a recipient principal in CI, allowing the "actee" (object or recipient) to be specified by a role. RBAC rules can be expressed as positive and negative norms:
- **Allow:**
  \[
  \text{inrole}(p_1, \hat{r}_1) \land (p_2 = \hat{p}_2)
  \]
- **Deny:**
  \[
  \text{inrole}(p_1, \hat{r}_1) \land (p_2 = \hat{p}_2) \rightarrow \bot
  \]

RBAC lacks the concepts of a subject \( q \) and attribute \( t \), as well as temporal conditions. "Deny" rules in CI can be expressed using negative norms with \( \bot \), the unsatisfiable formula.

The primary reason RBAC is insufficient for privacy is its lack of an attribute concept. For example, if a doctor reads a patient's medical file and then sends an email to a broker, from an RBAC perspective, both actions are permitted. However, a privacy breach occurs if the email contains sensitive medical information about another patient. To distinguish appropriate from inappropriate actions, it is essential to recognize the attributes communicated by each action. In other words, RBAC is inadequate for privacy because it lacks the "contains" relation.

Several access control languages, such as Binder [19] and RT [28], extend RBAC using Datalog. These languages typically use only positive rules and do not include temporal conditions or a notion of the subject of a piece of information. Cassandra [11], a sophisticated access control language with denying rules, has been applied to electronic health records in the United Kingdom. In this application, consent was captured through role activation, but future temporal constraints and computing attributes were absent.

### 6.2 Extensible Access Control Markup Language (XACML)

The Extensible Access Control Markup Language (XACML) is a flexible language for expressing access control policies. XACML's extension mechanism allows it to capture a wide variety of access control constructs. To evaluate XACML's expressiveness, we focus on policies expressible by simple extensions to the base XACML language. Specifically, we abstract XACML's targets as elements of a Boolean algebra over a set of requests and consider only the built-in combination algorithms.

XACML lacks first-class temporal conditions. When an XACML policy reaches a policy judgment, it can include an "obligation," a symbol to be interpreted at the point of policy enforcement. These uninterpreted symbols can represent future requirements. However, obligations prevent the semantics of an XACML policy from being fully specified by the policy itself, as the policy relies on the surrounding environment to give the obligations meaning. Past conditions can be expressed in XACML by encoding state information into the "request context," but this feature is awkward for capturing complex state beyond "opt-in" and "opt-out."

XACML struggles to correctly capture attributes, especially in connection with denying rules (negative norms). This difficulty arises because XACML conceives of a policy as a function from requests to responses. XACML policies are structured as combinations of simple subpolicies, where combination is computed point-wise on the functions represented by the subpolicies. This approach fails for attributes due to "upward" inheritance, making the combined response for two policies on a request not necessarily determined by the responses of the subpolicies on that request. CI avoids this issue by representing and combining policies logically.

### 6.3 The Enterprise Privacy Authorization Language (EPAL)

The Enterprise Privacy Authorization Language (EPAL) is designed for expressing enterprise privacy policies [8, 38]. EPAL policies are concerned with a single sender (the enterprise) and a single subject role [27]. EPAL has similar limitations to XACML regarding temporal conditions.

EPAL requests are elements of a Cartesian product of trees representing roles, attributes, purposes, and actions. The "role" coordinate represents the recipient's role, and the "purpose" coordinate is not directly captured in CI but can be simulated. EPAL policies are concerned with general actions, not just communication actions, as in RBAC.

With the exception of purposes and non-communication actions, CI captures EPAL policies using positive and negative norms:
- **Positive Norm:**
  \[
  (p_1 = \hat{p}_1) \land \text{inrole}(p_2, \hat{r}_2) \land (t \in \hat{t}) \land \hat{o}
  \]
- **Negative Norm:**
  \[
  (p_1 = \hat{p}_1) \land \text{inrole}(p_2, \hat{r}_2) \land (t \in \hat{t}) \rightarrow \bot
  \]

The sender agent \( \hat{p}_1 \) is fixed for every norm in a single policy. The symbol \( \hat{o} \) represents an uninterpreted future "obligation," similar to those in XACML, structured with a subsumption relation.

CI improves on EPAL obligations in two ways:
1. Obligations are expressed in temporal logic, enabling tools to interpret temporal conditions and determine whether an agent can discharge future obligations while adhering to the policy.
2. Temporal conditions can speak about the past and future, allowing policies to permit information flows based on past actions. In CI, the subsumption relation on temporal conditions arises naturally as logical implication of temporal formulas.

EPAL policy authors can attach obligations to denying rules, but the semantics of such obligations are ambiguous. CI resolves this by weakening the notion of a denying rule to a negative norm, a formula of the form \( \phi \rightarrow \psi \). Negative norms do not forbid actions described by \( \phi \) but instead forbid actions that violate the temporal condition \( \psi \). Complete prohibitions can be expressed by instantiating \( \psi \) with \( \bot \).

### 6.4 Platform for Privacy Preferences (P3P)

The Platform for Privacy Preferences (P3P) is a privacy language intended for web site operators to inform visitors about their data practices [16, 34]. P3P contains only positive norms and very restricted temporal conditions. A single P3P policy is limited to a single sender (the web site) and a single subject role (a web site visitor). These restrictions limit P3P's use as a general-purpose privacy language. For example, P3P cannot directly express that a web site conforms to COPPA; a P3P extension [15] and the policy statement `COPPA status="compliant"` are required.

Temporal conditions in P3P are limited to opt-in, opt-out, and true. P3P statements correspond to positive norms:
\[
(p_1 = \hat{p}_1) \land \text{inrole}(p_2, \hat{r}_2) \land \text{inrole}(q, \text{visitor}) \land (t \in \hat{t}) \land \psi
\]
where \( \psi \) represents "opt-in," "opt-out," or no temporal condition. The lack of negative norms simplifies P3P but reduces its expressiveness. The fixed form of the opt-in and opt-out conditions is restrictive, preventing minor variations like the parental "grant-consent" and "revoke-consent" idiom in COPPA.

P3P provides privacy preference languages that web surfers can use to filter out web sites with unwanted data practices. All P3P policies inhabit a single global context, forcing web surfers to use a "lowest common denominator" preference. Preference languages like APPEL [16] and XPref [2] can express negative preferences, but these are not respected in the full P3P system [9].

### 7. Conclusions and Future Work

We present a logical framework for expressing and reasoning about norms of personal information transmission. This framework formalizes central ideas of contextual integrity, a conceptual framework for understanding privacy expectations developed in law and public policy literature. Privacy norms are expressed as Linear Temporal Logic (LTL) formulas and interpreted over traces where basic actions include communication of the form "Alice gives Bob a certain type of information about Charlie." A key premise of contextual integrity is that appropriateness depends on the context, the role, and the subject of personal information, and cannot be accurately captured using a DRM-style "ownership of information" model or a simple partitioning of information into "public" and "private."

We illustrate the use of the framework by showing how to express several privacy provisions of HIPAA, COPPA, and GLBA as temporal logic formulas about the transmission of personal information. We show that questions of policy consistency, compliance, combination, and refinement reduce to well-studied problems in LTL. Policy combination, which has proven problematic in EPAL, is easily formulated using logical conjunction and disjunction, and policy refinement reduces to logical implication.

In deciding compliance, we are given a sequence of past communications and wish to determine whether a possible next communication will violate the privacy policy. This has both weak and strong formulations: weak compliance requires only that the next action satisfies all necessary present conditions, whereas strong compliance also requires an achievable sequence of future actions that meet all future requirements. Weak compliance can be checked in polynomial time using runtime verification results, while strong compliance checks require PSPACE complexity.

We compare our framework to previous access control and privacy policy languages, including RBAC, XACML, EPAL, and P3P. Our results are summarized in Figure 5. The two central concepts of our framework—temporal conditions and separation between positive and negative norms—capture essential features used in writing privacy policies. Specifically, temporal conditions improve on the uninterpreted future obligations of XACML and EPAL, and the use of negative norms addresses the problems with obligations attached to denying rules in previous frameworks.

### Future Work

In future work, we hope to apply the model using a model checker to analyze whether privacy norms in the HIPAA privacy rule are consistent with certain purposes and entail specific desired properties. We also plan to apply the model in a system for handling electronic health records to ensure compliance with HIPAA.

Currently, our framework assumes that norms are based only on the type of information (rather than actual data values) and that information is about a single individual (rather than a group of individuals). We plan to extend the formalization by relaxing these restrictions, enabling norms to depend on specific data values and information to describe groups of individuals. In this extended framework, we aim to develop precise connections with research on data privacy and aggregation.

We also plan to extend the framework to include parameterized roles. These parameterized roles would enable CI to capture certain norms more precisely. For example, norm (7) could be expressed more precisely with a parameterized parent role, ensuring that the consenting parent is actually the child’s parent. Parameterized roles are present in other models and will enhance the precision and flexibility of our framework.