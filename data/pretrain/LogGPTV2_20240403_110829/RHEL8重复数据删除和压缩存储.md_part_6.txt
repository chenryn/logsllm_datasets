当在一个非干净的关闭后重启一个 VDO 卷时，VDO 会执行以下操作：
::: itemizedlist
-   验证卷元数据的一致性。
-   重建一部分元数据以在需要时进行修复。
:::
重建是自动的，不需要用户干预。
VDO 可能会重建不同的写入模式，具体取决于活跃的写入模式：
::: variablelist
[`sync`{.literal}]{.term}
:   如果 VDO 在同步存储上运行，且写入策略被设置为
    `同步`{.literal}，则写入卷的所有数据都会被完全恢复。
[`async`{.literal}]{.term}
:   如果写入策略 `是异步`{.literal}
    的，如果没有持久化，一些写入可能无法被恢复。这可以通过发送 VDO
    `FLUSH`{.literal} 命令或带有 FUA（强制单元访问）标记的写入 I/O
    来实现。您可以通过调用 `fsync、fdatasync、sync`{.literal}
    或``{=html} ``{.literal} `umount`{.literal}
    等数据完整性操作从用户模式完成此操作。
:::
在任一模式中，某些未确认或未刷新的写入也可能重新构建。
#### []{#maintaining-vdo_deduplicating-and-compressing-storage.html#_automatic_and_manual_recovery}自动和手动恢复
当 VDO 卷进入 `恢复`{.literal} 操作模式时，VDO
会在重新上线后自动重建未清除 VDO 卷。这叫做 [*在线恢复*]{.emphasis}。
如果 VDO 无法成功恢复 VDO 卷，它会将卷置于卷重启后保留的
`只读`{.literal} 操作模式。您需要强制重新构建来手动解决这个问题。
::: itemizedlist
**其它资源**
-   有关自动和手动恢复以及 VDO 操作模式的更多信息，请参阅 ["VDO
    操作模式"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#vdo-operating-modes_recovering-a-vdo-volume-after-an-unclean-shutdown "VDO 操作模式"){.xref}。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#vdo-operating-modes_recovering-a-vdo-volume-after-an-unclean-shutdown}VDO 操作模式 {.title}
:::
本节论述了指示 VDO 卷是否正常运行或者正在从错误中恢复的模式。
您可以使用 `vdostats --verbose device`{.literal} 命令显示 VDO
卷的当前操作模式。请参阅输出中的 [*Operating mode*]{.emphasis} 属性。
::: variablelist
[`Normal`{.literal}]{.term}
:   这是默认的操作模式。VDO 卷始终处于 `正常`{.literal}
    模式，除非以下状态之一强制使用不同的模式。新创建的 VDO 卷以
    `常规`{.literal} 模式启动。
[`恢复`{.literal}]{.term}
:   当 VDO 卷在关闭前没有保存其所有元数据时，它会在下次启动时自动进入
    `恢复`{.literal}
    模式。进入这个模式的典型原因是电源丢失或者基础存储设备出现问题。
    在 `恢复`{.literal} 模式中，VDO
    正在修复该设备中每个物理块的引用计数。恢复通常不需要非常长。时间取决于
    VDO 卷的大小、基础存储设备的速度以及其它请求 VDO 同时处理的速度。VDO
    卷通常具有以下例外：
    ::: itemizedlist
    -   最初，在卷中写入请求的空间量可能会有所限制。当恢复了更多元数据后，更多的可用空间就会可用。
    -   如果数据处于尚未恢复的卷的一部分，在 VDO
        卷恢复过程中写入的数据可能会无法对崩溃前写入的数据进行重复删除。VDO
        可在恢复卷时压缩数据。您仍然可以读取或覆盖压缩的块。
    -   [*在线恢复期间，某些统计数据不可用：例如，使用块和 []{.emphasis}
        空闲块*]{.emphasis}。重建完成后就可使用这些统计数据。
    -   由于正在进行恢复工作，读取和写入的响应时间可能比通常要慢
    :::
    您可以在 `恢复`{.literal} 模式中安全地关闭 VDO
    卷。如果恢复在关闭前没有完成，则该设备将在下一次启动时再次进入
    `恢复`{.literal} 模式。
    当 VDO 卷修复了所有引用计数时，VDO 卷会自动退出 `恢复`{.literal}
    模式，并进入 `常规`{.literal} 模式。不需要管理员操作。详情请查看
    ["在线恢复 VDO
    卷"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#recovering-a-vdo-volume-online_recovering-a-vdo-volume-after-an-unclean-shutdown "在线恢复 VDO 卷"){.xref}。
[`read-only`{.literal}]{.term}
:   当 VDO 卷遇到严重内部错误时，它进入 `只读`{.literal} 模式。可能导致
    `只读`{.literal}
    模式的事件可能包括元数据崩溃或支持的存储设备变为只读事件。这个模式是一个错误状态。
    在 `只读`{.literal}
    模式下，数据读取通常会正常工作，但数据写入始终失败。VDO 卷会
    `处于只读`{.literal} 模式，直到管理员解决了这个问题。
    您可以使用 `只读`{.literal} 模式安全地关闭 VDO 卷。VDO
    卷重启后通常会保留这个模式。在个别情况下，VDO 卷无法将
    `只读状态记录到`{.literal} 后备存储设备中。在这种情况下，VDO
    会尝试进行恢复。
    当一个卷处于只读模式后，就无法保证卷中的数据不会被丢失或损坏。在这种情况下，红帽建议从只读卷中复制数据，并可能从备份中恢复卷。
    如果数据崩溃的风险可以接受，则可以强制离线重新构建 VDO
    卷元数据，以便将该卷重新在线并可用。无法保证重建数据的完整性。详情请查看
    ["强制 VDO
    卷元数据离线重建"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#forcing-an-offline-rebuild-of-a-vdo-volume-metadata_recovering-a-vdo-volume-after-an-unclean-shutdown "强制 VDO 卷元数据离线重建"){.xref}。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#recovering-a-vdo-volume-online_recovering-a-vdo-volume-after-an-unclean-shutdown}在线恢复 VDO 卷 {.title}
:::
此流程在一个 VDO 卷上执行在线恢复，以在未清除关闭后恢复元数据。
::: orderedlist
**流程**
1.  如果 VDO 卷还没有启动，请启动它：
    ``` screen
    # vdo start --name=my-vdo
    ```
    不需要额外的步骤。恢复在后台运行。
2.  如果您依赖卷统计，比如 [*使用中的块*]{.emphasis}
    [*和块空闲*]{.emphasis}，请等待这些数据可用。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#forcing-an-offline-rebuild-of-a-vdo-volume-metadata_recovering-a-vdo-volume-after-an-unclean-shutdown}强制 VDO 卷元数据离线重建 {.title}
:::
此流程对 VDO 卷元数据执行强制离线重新构建，以便在未清除关闭后恢复。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
此过程可能会导致卷的数据丢失。
:::
::: itemizedlist
**先决条件**
-   已启动 VDO 卷。
:::
::: orderedlist
**流程**
1.  检查卷是否处于只读模式。查看命令输出中的 [*操作模式*]{.emphasis}
    属性：
    ``` screen
    # vdo status --name=my-vdo
    ```
    如果卷不处于只读模式，则不需要强制离线重建。执行在线恢复，如
    ["在线恢复 VDO
    卷"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#recovering-a-vdo-volume-online_recovering-a-vdo-volume-after-an-unclean-shutdown "在线恢复 VDO 卷"){.xref}
    所述。
2.  如果卷正在运行，请停止：
    ``` screen
    # vdo stop --name=my-vdo
    ```
3.  使用 `--forceRebuild`{.literal} 选项重启卷：
    ``` screen
    # vdo start --name=my-vdo --forceRebuild
    ```
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#removing-an-unsuccessfully-created-vdo-volume_recovering-a-vdo-volume-after-an-unclean-shutdown}删除失败创建的 VDO 卷 {.title}
:::
此流程清理处于中间状态的 VDO
卷。如果在创建卷时发生故障，则卷处于中间状态。这可能会在以下情况发生，例如：
::: itemizedlist
-   系统崩溃
-   电源失败
-   管理员中断了 running `vdo create`{.literal} 命令
:::
::: itemizedlist
**流程**
-   要清理，请使用 `--force`{.literal} 选项删除创建失败的卷：
    ``` screen
    # vdo remove --force --name=my-vdo
    ```
    需要 `--force`{.literal}
    选项，因为管理员可能会通过更改系统配置造成冲突，因为卷创建失败。
    如果没有 `--force`{.literal} 选项，`vdo remove`{.literal}
    命令会失败并显示以下信息：
    ``` screen
    [...]
    A previous operation failed.
    Recovery from the failure either failed or was interrupted.
    Add '--force' to 'remove' to perform the following cleanup.
    Steps to clean up VDO my-vdo:
    umount -f /dev/mapper/my-vdo
    udevadm settle
    dmsetup remove my-vdo
    vdo: ERROR - VDO volume my-vdo previous operation (create) is incomplete
    ```
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#optimizing-the-uds-index_maintaining-vdo}优化 UDS 索引 {.title}
:::
您可以配置特定的 UDS 索引设置以便在您的系统中优化它。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在[*创建 VDO 卷后*]{.emphasis}，您无法更改 UDS 索引的属性。
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#components-of-a-vdo-volume_optimizing-the-uds-index}VDO 卷的组件 {.title}
:::
VDO
使用块设备作为后备存储，它包括由一个或多个磁盘、分区甚至平面文件组成的物理存储聚合。当存储管理工具创建
VDO 卷时，VDO 为 UDS 索引和 VDO 卷保留卷空间。UDS 索引和 VDO
卷会一起交互，以提供重复的块存储。
::: figure
[]{#maintaining-vdo_deduplicating-and-compressing-storage.html#idm139671978503088}
**图 2.2. VDO 磁盘机构**
::: figure-contents
::: mediaobject
![VDO 磁盘机构](images/vdo-disk-organization.png)
:::
:::
:::
VDO 解决方案包括以下组件：
::: variablelist
[`kvdo`{.literal}]{.term}
:   载入 Linux
    设备映射器层的内核模块提供删除重复数据的、压缩和精简置备的块存储卷。
    `kvdo`{.literal} 模块公开块设备。您可以直接访问块存储或通过 Linux
    文件系统（如 XFS 或 ext4）访问此块设备。
    当 `kvdo`{.literal} 收到从 VDO
    卷中读取数据的逻辑块的请求时，它会将请求的逻辑块映射到底层物理块，然后读取并返回请求的数据。
    当 `kvdo`{.literal} 收到向 VDO 卷写入数据的请求时，它首先检查请求是
    DISCARD 还是 TRIM 请求，或者数据是否统一为零。如果其中任何一个条件为
    true，`kvdo`{.literal} 会更新其块映射并确认请求。否则，VDO
    会处理并优化数据。
[`uds`{.literal}]{.term}
:   与卷上的通用重复数据服务(UDS)索引通信的内核模块，并分析重复数据。对于每个新的数据，UDS
    可以快速地判断该数据是否与之前存储的数据相同。如果索引发现匹配项，则存储系统可在内部引用现有项，以避免多次保存相同的信息。
    UDS 索引作为 the `uds 内核模块在`{.literal} 内核中运行。
[命令行工具]{.term}
:   用于配置和管理优化的存储。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#the-uds-index_optimizing-the-uds-index}UDS 索引 {.title}
:::
VDO 使用名为 UDS 的高性能 deduplication 索引来检测正在存储的数据重复块。
UDS 索引提供了 VDO
产品的基础。对于每个新的数据，它会快速确定该部分是否与之前存储的数据相同。如果索引发现匹配项，则存储系统可在内部引用现有项，以避免多次保存相同的信息。
UDS 索引作为 the `uds 内核模块在`{.literal} 内核中运行。
[*deduplication 窗口是索引记住的之前写入的块的数量*]{.emphasis}。可配置
deduplication 窗口的大小。对于给定窗口大小，索引需要特定大小的 RAM
和特定大小的磁盘空间。窗口的大小通常通过使用 `--indexMem=size`{.literal}
选项指定索引内存的大小来确定。然后，VDO 决定自动使用的磁盘空间量。
UDS 索引由两个部分组成：
::: itemizedlist
-   在内存中使用紧凑表示，每个唯一块最多包含一个条目。
-   记录在索引发生时的相关块名称的磁盘组件，按顺序记录。
:::
UDS 在内存中为每个条目使用平均 4 字节，包括缓存。
磁盘上的组件维护传递到 UDS 的有界数据历史记录。UDS 为属于这个
deduplication
窗口内的数据提供重复数据删除建议，其中包含最新看到块的名称。重复数据删除窗口允许
UDS 尽可能高效地索引数据，同时限制索引大型数据存储库所需的内存量。尽管
deduplication
窗口具有无限性质，但大部分具有大量重复数据删除的数据集也表现出高度的时序位置 -
换句话说，大多数重复数据删除发生在大约同时编写的块集合中。另外，通常要写入的数据通常可能会与最近写入的数据重复。因此，对于给定时间间隔的工作负载，重复数据删除率通常相同，无论
UDS 仅索引了最新的数据还是所有数据。
由于重复数据往往会呈现时序本地化，因此很少需要对存储系统中的每个块进行索引。否则，索引内存的成本会耗尽导致复制性能降低的存储成本。索引大小要求与数据刷新率紧密相关。例如，假设存储系统的总容量为
100 TB，但每周达到 1 TB 的速度。UDS 窗口的 deduplication 窗口为 4TB，UDS
可探测到上个月写入的数据的最大冗余度。
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#recommended-uds-index-configuration_optimizing-the-uds-index}推荐的 UDS 索引配置 {.title}