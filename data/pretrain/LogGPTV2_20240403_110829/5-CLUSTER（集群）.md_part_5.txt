notification_email_from ka@localhost //设置发件人
smtp_server 127.0.0.1 //定义邮件服务器
smtp_connect_timeout 30
router_id web1 //设置路由ID号（实验需要修改）
}
vrrp_instance VI_1 {
state MASTER //主服务器为MASTER（备服务器需要修改为BACKUP）此
处不能决定主备,只能确定初始状态
interface eth0 //定义网络接口,将给这个网卡配VIP(192.168.4.80)
virtual_router_id 50 //主备服务器VRID号必须一致,不管默认是多少
priority 100 //服务器优先级,优先级高优先获取VIP（实验需要修改）
> 如果没修改,默认比较网卡MAC地址定义主备
advert_int 1 //每隔一秒,主备进行优先级对比
authentication {
auth_type pass
auth_pass 1111 //主备服务器密码必须一致
}
virtual_ipaddress { 192.168.4.80 }
//谁是主服务器谁获得该VIP（实验需要修改）
}
### 2）修改web2服务器Keepalived配置文件
\[root@web2 \~\]# vim /etc/keepalived/keepalived.conf
global_defs {
notification_email {
PI:EMAIL //设置报警收件人邮箱
}
notification_email_from ka@localhost //设置发件人
smtp_server 127.0.0.1 //定义邮件服务器
smtp_connect_timeout 30
router_id web2 //设置路由ID号（实验需要修改）
}
vrrp_instance VI_1 {
state BACKUP //备服务器为BACKUP（实验需要修改）
interface eth0 //定义网络接口
virtual_router_id 50 //主辅VRID号必须一致
priority 50 //服务器优先级（实验需要修改）
advert_int 1
authentication {
auth_type pass
auth_pass 1111 //主辅服务器密码必须一致
}
virtual_ipaddress { 192.168.4.80 }
//谁是主服务器谁配置VIP（实验需要修改）
}
### 3）启动服务
\[root@web1 \~\]# systemctl start keepalived
#启动之后一定要处理防火墙规则
\[root@Web1111 \~\]# ip a s eth0
2: eth0: \ mtu 1500 qdisc pfifo_fast
state UP qlen 1000
link/ether 52:54:00:29:3a:7d brd ff:ff:ff:ff:ff:ff
inet 192.168.4.100/24 brd 192.168.4.255 scope global eth0
valid_lft forever preferred_lft forever
inet 192.168.4.80/32 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::db00:b29f:e4b8:2bf8/64 scope link
valid_lft forever preferred_lft forever
#此时192.168.4.80是在web1上
\[root@web2 \~\]# systemctl start keepalived
\[root@Web222 \~\]# ip a s eth0
2: eth0: \ mtu 1500 qdisc pfifo_fast
state UP qlen 1000
link/ether 52:54:00:f3:9a:04 brd ff:ff:ff:ff:ff:ff
inet 192.168.4.200/24 brd 192.168.4.255 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::308e:8e8b:6edb:7507/64 scope link
valid_lft forever preferred_lft forever
### 4）配置防火墙和SELinux
启动keepalived会自动添加一个drop的防火墙规则，需要清空！
\[root@web1 \~\]# iptables -F #不清空是ping不通192.168.4.80
\[root@web1 \~\]# setenforce 0
\[root@web1 \~\]# ipvsadm -Ln #查看LVS规则
\[root@web2 \~\]# iptables -F #不清空是ping不通192.168.4.80
\[root@web2 \~\]# setenforce 0
\[root@web2 \~\]# ipvsadm -Ln #查看LVS规则
## 步骤四：测试
### 1）登录两台Web服务器查看VIP信息
\[root@web1 \~\]# ip addr show
\[root@web2 \~\]# ip addr show
\[root@Web1111 \~\]# systemctl stop keepalived #关闭web1上的keepalived
\[root@Web1111 \~\]# ip a s eth0
2: eth0: \ mtu 1500 qdisc pfifo_fast
state UP qlen 1000
link/ether 52:54:00:29:3a:7d brd ff:ff:ff:ff:ff:ff
inet 192.168.4.100/24 brd 192.168.4.255 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::db00:b29f:e4b8:2bf8/64 scope link
valid_lft forever preferred_lft forever
\[root@Web222 \~\]# ip a s eth0
2: eth0: \ mtu 1500 qdisc pfifo_fast
state UP qlen 1000
link/ether 52:54:00:f3:9a:04 brd ff:ff:ff:ff:ff:ff
inet 192.168.4.200/24 brd 192.168.4.255 scope global eth0
valid_lft forever preferred_lft forever
inet 192.168.4.80/32 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::308e:8e8b:6edb:7507/64 scope link
valid_lft forever preferred_lft forever
#此时192.168.4.80浮动到web2上了
### 2) 客户端访问
客户端使用curl命令连接http://192.168.4.80，查看Web页面；关闭Web1服务器的网卡，客户端再次访问http://192.168.4.80，验证是否可以正常访问服务。
# 2 案例3：Keepalived+LVS服务器
2.1 问题
使用Keepalived为LVS的调度器提供高可用功能，防止调度器单点故障，为用户提供Web服务：
LVS1调度器真实IP地址为192.168.4.5
LVS2调度器真实IP地址为192.168.4.6
服务器VIP地址设置为192.168.4.15
真实Web服务器地址分别为192.168.4.100、192.168.4.200
使用加权轮询调度算法，真实web服务器权重不同
2.2 方案
使用5台虚拟机，1台作为客户端主机、2台作为LVS调度器、2台作为Real
Server，实验拓扑环境结构如图-2所示，基础环境配置如表-2所示。
![image002](media/image18.png){width="4.384027777777778in"
height="2.158333333333333in"}
图-3
表-2
![table002](media/image19.png){width="4.759027777777778in"
height="1.2166666666666666in"}
注意：所有主机都需要配置IP地址与有效的YUM源。
2.3 步骤
实现此案例需要按照如下步骤进行。
## 步骤一：配置网络环境
### 1）设置Web1服务器的网络参数
\[root@web1 \~\]# nmcli connection modify eth0 ipv4.method manual \\
ipv4.addresses 192.168.4.100/24 connection.autoconnect yes
\[root@web1 \~\]# nmcli connection up eth0
接下来给web1配置VIP地址
注意：这里的子网掩码必须是32（也就是全255），网络地址与IP地址一样，广播地址与IP地址也一样。
\[root@web1 \~\]# cd /etc/sysconfig/network-scripts/
\[root@web1 \~\]# cp ifcfg-lo{,:0}
\[root@web1 \~\]# vim ifcfg-lo:0
DEVICE=lo:0
IPADDR=192.168.4.15
NETMASK=255.255.255.255
NETWORK=192.168.4.15
BROADCAST=192.168.4.15
ONBOOT=yes
NAME=lo:0
注意：这里因为web1也配置与调度器一样的VIP地址，默认肯定会出现地址冲突。
写入这四行的主要目的就是访问192.168.4.15的数据包，只有调度器会响应，其他主机都不做任何响应。
\[root@web1 \~\]# vim /etc/sysctl.conf
#手动写入如下4行内容
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.lo.arp_ignore = 1
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
#当有arp广播问谁是192.168.4.15时，本机忽略该ARP广播，不做任何回应
#本机不要向外宣告自己的lo回环地址是192.168.4.15
重启网络服务，设置防火墙与SELinux
\[root@web1 \~\]# systemctl restart network
\[root@web1 \~\]# ifconfig
\[root@web1 \~\]# systemctl stop firewalld
\[root@web1 \~\]# setenforce 0
### 2）设置Web2服务器的网络参数
\[root@web2 \~\]# nmcli connection modify eth0 ipv4.method manual \\
ipv4.addresses 192.168.4.200/24 connection.autoconnect yes
\[root@web2 \~\]# nmcli connection up eth0
接下来给web2配置VIP地址
注意：这里的子网掩码必须是32（也就是全255），网络地址与IP地址一样，广播地址与IP地址也一样。
\[root@web2 \~\]# cd /etc/sysconfig/network-scripts/
\[root@web2 \~\]# cp ifcfg-lo{,:0}
\[root@web2 \~\]# vim ifcfg-lo:0
DEVICE=lo:0
IPADDR=192.168.4.15
NETMASK=255.255.255.255
NETWORK=192.168.4.15
BROADCAST=192.168.4.15
ONBOOT=yes
NAME=lo:0
注意：这里因为web2也配置与代理一样的VIP地址，默认肯定会出现地址冲突。
写入这四行的主要目的就是访问192.168.4.15的数据包，只有调度器会响应，其他主机都不做任何响应。
\[root@web2 \~\]# vim /etc/sysctl.conf
#手动写入如下4行内容
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.lo.arp_ignore = 1
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
#当有arp广播问谁是192.168.4.15时，本机忽略该ARP广播，不做任何回应
#本机不要向外宣告自己的lo回环地址是192.168.4.15
重启网络服务，设置防火墙与SELinux
\[root@web2 \~\]# systemctl restart network
\[root@web2 \~\]# ifconfig
\[root@web2 \~\]# systemctl stop firewalld
\[root@web2 \~\]# setenforce 0
### 3）配置proxy1主机的网络参数(不配置VIP，由keepalvied自动配置)
\[root@proxy1 \~\]# nmcli connection modify eth0 ipv4.method manual \\
ipv4.addresses 192.168.4.5/24 connection.autoconnect yes
\[root@proxy1 \~\]# nmcli connection up eth0
### 4）配置proxy2主机的网络参数(不配置VIP，由keepalvied自动配置)
注意：按照前面的课程环境，默认没有该虚拟机，需要重新建一台虚拟机proxy2。
\[root@proxy2 \~\]# nmcli connection modify eth0 ipv4.method manual \\
ipv4.addresses 192.168.4.6/24 connection.autoconnect yes
\[root@proxy2 \~\]# nmcli connection up eth0
## 步骤二：配置后台web服务
### 1）安装软件，自定义Web页面（web1和web2主机）
\[root@web1 \~\]# yum -y install httpd
\[root@web1 \~\]# echo \"192.168.4.100\" \> /var/www/html/index.html
\[root@web2 \~\]# yum -y install httpd
\[root@web2 \~\]# echo \"192.168.4.200\" \> /var/www/html/index.html
### 2）启动Web服务器软件(web1和web2主机)
\[root@web1 \~\]# systemctl start httpd ; systemctl enable httpd
\[root@web2 \~\]# systemctl start httpd ; systemctl enable httpd
## 步骤三：调度器安装Keepalived与ipvsadm软件
注意：两台LVS调度器执行相同的操作（如何已经安装软件，可用忽略此步骤）。
安装软件
\[root@proxy1 \~\]# yum install -y keepalived
\[root@proxy1 \~\]# systemctl enable keepalived
\[root@proxy1 \~\]# yum install -y ipvsadm
\[root@proxy1 \~\]# ipvsadm -C
\[root@proxy2 \~\]# yum install -y keepalived
\[root@proxy2 \~\]# systemctl enable keepalived
\[root@proxy2 \~\]# yum install -y ipvsadm
\[root@proxy2 \~\]# ipvsadm -C
## 步骤四：部署Keepalived实现LVS-DR模式调度器的高可用
### 1）LVS1调度器设置Keepalived，并启动服务
\[root@proxy1 \~\]# vim /etc/keepalived/keepalived.conf
global_defs {