### 优化后的文本

#### 1. 刷新速率
系统中的不同组件可能以不同的速率刷新。

#### 2. (2, n) 方案的升级
我们展示了如何将 (2, n) 阈值 Schnorr 类签名方案升级为具有主动安全性的方案，特别适用于阈值钱包。该方案利用发布到区块链上的交易进行同步。我们在第 IV-B 节中论证了账本对于此任务的重要性。我们的刷新协议不增加额外假设，与运行阈值签名相比几乎没有开销，并且完全符合前一节中描述的理想通信模式。

#### 3. 主动乘法
我们构建了一种机制来使 OT 扩展状态具备主动性。这使得即使复杂的阈值 ECDSA 协议（由于非线性签名方程）也能实现主动性。我们通过实现证明了构造的效率：具体来说，在 Doerner 等人的 ECDSA 协议 [7] 中，刷新过程的计算时间开销约为 24%，而在 Gennaro 和 Goldfeder 的协议 [5] 中，这一开销为 14%；在两种情况下，通信轮次的开销均为零。

#### 4. (3, n) 及以上在线不诚实多数的不可能性
直观上，人们可能会认为任何 (t, n) 阈值方案都可以通过足够的密码学手段在存在在线不诚实多数的情况下升级为主动安全性。然而，令人惊讶的是，我们证明了这种直觉是错误的；即，即使假设有任意可信设置/随机预言机，也必须有一个在线的诚实多数才能刷新系统。我们通过开发新的优雅技术来推理这种设置下的安全性，从而证明了这一结果。

因此，我们提出了离线刷新的问题，并解决了最紧迫的实际和理论问题：在线诚实多数的情况很简单，(2, n) 情况允许使用账本的新颖高效协议，而 t > 2 的 (t, n) 情况则必须有在线的诚实多数参与者。

#### 更广泛的影响
我们的结果可以被解释为对小规模去中心化的积极影响，例如个人设备上的双因素认证。特别是 (2, n) 刷新协议与现有的阈值钱包实现兼容，基本上只需实现前向安全通道的成本。然而，我们的不可能性结果排除了大规模系统的强形式的安全性，在这些系统中，许多服务器持有高重构阈值的秘密份额。在这种情况下，希望实现主动安全性的系统设计者必须考虑要么让一个诚实多数上线，要么等待所有参与方响应后再进行周期更新的成本。

#### D. 我们的技术
下面简要介绍我们 (2, n) 构造背后的想法，随后讨论一般的 (t, n) 情况并展示其不可能性。回想一下 (t, n) 表示在任何给定时间最多 t-1 个参与方可能是腐败的（无论是在线还是离线），因为按定义，任何 t 个参与方应联合拥有足够的信息来访问密钥。

1. **(2, n) 构造**：
   - 大致上，我们的方法是使用私有通道来传达候选刷新包，并使用公共账本来达成共识。请注意，为了执行“支出”交易，钱包已经需要在交易中发布签名到账本上；我们利用这一事实，使用相同的签名来协调刷新，无需修改其内容。
   - 让每个参与方 Pi 拥有共享多项式 f 上的点 f(i)，其中 f(0) = sk（即标准 Shamir 密钥共享）。当他们签署消息时，我们让他们生成候选刷新多项式 f'，将每个签名与 f' 关联，并在相应的签名出现在区块链上时应用刷新（即将 f(i) 替换为 f'(i)）。
   - 尽管这处理了协调部分，但验证地将 f'(j) 传达给离线参与方 Pj 仍然是一个挑战。为了解决这个问题，我们让在线刷新参与方共同生成本地阈值签名，用于验证 f' 传达给每个离线参与方；这样的签名只能由两个合作的参与方产生，因此任何离线接收到的候选 f' 必须得到了诚实参与方的批准。

2. **一般 (t, n) 不可能性**：
   - 我们开发了一种新技术来推理容忍移动腐败的协议的安全性。首先，我们证明任何容忍在线不诚实多数的刷新协议都必须具有以下属性：少数在线参与方持有的信息足以使任何离线参与方刷新。随后，我们表明移动对手可以利用这一属性，在先前腐败的离线参与方被解除腐败后，推导出其刷新后的私有状态。该证明基于这一基本见解，详细讨论见第 X 节。

#### E. 相关工作
Ostrovsky 和 Yung [12] 首次引入了移动对手的概念及其对应的主动多方计算实现。Herzberg 等人 [16] 设计了主动秘密共享技术，随后 Herzberg 等人 [17] 将其应用于主动签名方案。Cachin 等人 [18] 展示了如何在一个异步网络中实现共享秘密的主动安全性。Maram 等人 [19] 构建了一个支持动态委员会的主动秘密共享方案，其中一部分通信通过区块链完成。对于更全面的综述，读者可以参考 Maram 等人 [19] 和 Nikov 与 Nikova [20] 的工作。

Canetti 等人 [21] 解决了离线节点在遭受入侵后重新获得通信认证能力的问题。然而，他们的设置与我们的设置不可比较；我们的网络模型更强，因为我们假设了经过认证的通信（详情见第 IV 节），但在另一个维度上较弱，因为我们不依赖于在线参与方中的诚实多数。我们对账本的使用仅作为被动的公共信号机制，而不是交互式的特定参与方存储（例如，不对个别参与方颁发证书）。

如前所述，包括自上述综述以来的所有现有工作都假设所有参与方上线 [22]、诚实多数参与方协作以使系统主动化 [23]、[24]，或腐败是被动的 [25]。此外，它们要求这个诚实多数参与方同时在预设的时间点上线以运行刷新协议。由于整个 (t, n) 阈值签名设置的前提是只需要 t 个参与方同时在线即可使用系统，

- 对于 (2, n) 情况，我们严格要求只有两个参与方就足以使系统主动化。因为在两个参与方之间没有诚实多数的意义，我们不能直接应用之前工作的技术。据我们所知，我们的协议概念核心——系统内部的阈值签名与出现在区块链上的阈值签名交织在一起，是新颖的。
- 对于一般 t > 2 情况，我们证明了最弱的不诚实多数主动化概念，即 2t - 1 个在线参与方刷新是不可能实现的。

因此，我们全面处理了具有在线不诚实多数的主动化问题，这是文献中尚未研究的主题。

#### F. 组织结构
我们在第 II 节中首先呈现我们使用的定义。然后在第 III 节中给出我们对移动对手和离线刷新的形式化，随后在第 V 节中详细介绍我们的阈值签名抽象。我们从第 VI 节开始介绍简单的 (2,2) 密钥刷新协议，然后在第 VII 节中给出扩展到 (2, n) 主动阈值签名。接下来，在第 VIII 节中，我们展示了如何使最近的更复杂的 ECDSA 协议的每个组件主动化。我们通过实现来展示协议的实用性，增强两种不同的 ECDSA 协议，并在第 IX 节中呈现结果。最后，我们在第 X 节中证明了较大阈值下在线不诚实多数的离线刷新不可能性。

#### II. 基础知识
在整个论文中，我们将腐败阈值固定为 t = 1，并因此在假设单个恶意对抗性腐败的情况下制定所有定义。

a) **网络模型**：我们假设一个同步网络，这已经是最近的阈值签名方案 [5]、[6]、[7] 所要求的。对于区块链模型，我们遵循 Kiayias 等人 [26] 的同步功能。在这个功能中，区块链只在所有参与方完成当前轮次后才进展，因此在协议运行期间，参与方总是同步的。

此外，我们还假设了支持向离线参与方传递消息的主动通道，详见第 IV-A 节。

b) **(2, n) 设置的协议输入/输出符号**：本文中的 (2, n) 协议针对任何一对索引为 i, j ∈ [n] 的参与方描述。特别是，任何两个参与方 Pi, Pj 从一组 n 个参与方 (cid:126)P 中可以运行协议 π，分别得到他们的私有输出 yi, yj。为了简化符号，由于我们所有的协议对每个参与方都有相同的指令，我们选择描述它们由 Pb 运行，P1-b 作为对方。通用格式为
   ```
   yb ← π(1 − b, xb)
   ```
   表示 Pb 通过运行协议 π 并以 P1-b 为对方，输入 xb 得到输出 yb。例如，如果 π 在 P2 和 P6 之间运行，则从 P6 的角度来看，协议被解释为 b ≡ 6 和 1 − b ≡ 2。

c) **理想功能**：我们假设可以访问一些标准的理想功能：FCom（承诺）、F RDL Com-ZK（已提交的知识证明离散对数）、FCoin（掷硬币）、FMUL（两方乘法），具体定义见附录 C。

d) **对手模型**：我们在 Canetti [14] 的通用可组合性 (UC) 框架中证明了我们的协议是安全的。我们在第 III 节中给出了我们建模的具体细节。

#### A. 区块链模型
我们在这里详细说明 (2, n) 协议所需的底层区块链系统的相关方面。

a) **交易账本功能**：交易账本可以看作是一个公共公告板，用户可以在上面发布和读取交易。正如 [27] 所示，账本功能必须直观地保证持久性和活性，我们将在下面非正式地讨论这些特性。

- **持久性**：一旦系统中的诚实用户宣布某个特定交易为最终交易，所有其他用户在查询时要么报告交易在账本中的相同位置，要么不会报告任何其他冲突交易为稳定。
- **活性**：如果系统中的任何诚实用户试图将其交易包含在其账本中，那么经过一段时间后，所有诚实用户在查询时都会报告该交易为稳定。

我们将账本封装在一个受 [26] 功能启发的功能 GLedger 中。

b) **支持的账本类型**：为了简单起见，我们在一个同步的公共交易账本（例如比特币 [28] 或以太坊 [29]）上展示我们的结果，其中消息传递有一个已知的延迟。然而，我们注意到账本的同步并不是我们协议的必要假设。实际上，任何满足 [27] 中定义的标准持久性和活性属性的账本都可以被我们的协议使用。正如 [27] 所示，在网络同步的假设下，比特币在诚实多数挖矿算力的情况下满足这两个属性。然而，如果愿意用部分同步网络替换诚实多数假设，部分同步的 Byzantine Fault Tolerant (BFT) 账本（如 Algorand [33]）也可以被我们的协议使用，因为我们定义的腐败模型中，对手会在完全刷新后改变腐败。

不失一般性，我们假设所有包含在链中的交易都将最终确定并且不会回滚。有关更多详细讨论，请参阅 [34]。由于我们的协议对 GLedger 的使用非常直接（只是提交和读取交易），我们将 GLedger 的正式定义推迟到完整版本的论文中。

**全局功能**：我们协议的模拟器无法代表 GLedger 行动。特别是，模拟器只能以与运行实际协议的参与方相同的权限使用该功能。

#### B. 杂项
我们使用 (G, G, q) 表示曲线群；曲线 G 由 G 生成，阶为 q。全文中我们使用加法表示曲线群操作。

a) **拉格朗日系数**：λj
j(x) 是用于在位置 x 插值度为 1 的多项式 f 的值的拉格朗日系数，使用 f 在点 i 和 j 处的评估。具体来说，
   ```
   λi
   i (x) · f (i) + λi
   j(x) · f (j) = f (x)
   ∀x, i, j ∈ Zq
   ```
   一旦指定了 i, j, x，计算每个 λj
   i (x) 是容易的。