13:
14:
15:
16:
17:
18:
19:
20:
21: end procedure
end if
page(cid:48) := AddCookie(Acookie)
(α(cid:48)
id,α(cid:48)
result := ¬α(cid:48)
end if
return result
state
if τ = logout then
logoutFromRP(u)
else
IV. EXPERIMENTS & RESULTS
In this section we detail our experimental evaluation and findings.
Experimental setup. We use our framework for two main
objectives: 1) quantifying SSO support and obtaining insight into the
relationship of RPs and IdPs, and 2) performing compliance tests on
RPs. Initially, SAAT takes a hostname and a rank number (to create a
unique id) as input and finds the potential login URLs which will be
used by the various modules and testing workflows. We use SAAT’s
SSO Detection and Login modules for quantifying SSO support and
provide the results and detailed examination in §IV-A. For auditing
workflows and compliance tests, we leverage SAAT’s components
to independently identify non-compliant RPs. For instance, for the
revocation test (Algorithm 2), we use the Login module to log into all
RPs using SSO (line 5) then remove the RPs from Facebook using
Revoke module (line 11), and finally use Detection module (line 17)
to identify the current state of the accounts when authentication cook-
ies are present (i.e., logged in vs logged out). Separating each step
and running them in parallel allow us to 1) find and repeat incomplete
steps due to errors and 2) prevent our system from getting banned
for sending too many requests particularly to the IdP in a short time.
Experimental analysis. We note that Single Sign-On is a
volatile ecosystem where RPs may drop SSO support or completely
change their authentication workflow over short periods of time.
Given our extensive set of experiments conducted at a large-scale,
and to account for these changes, the results and statistics for each
experiment will only include the websites that were available and
supported SSO at the time of each given experiment. Finally, we
have tuned our process to optimize for precision (i.e., minimize false
positives) which may impact recall (i.e., increase false negatives).
Manual verification. In §IV-B and §IV-C, we manually verify
the state-detection results described in §III-A to ensure the accuracy
of SAAT’s state-detection and measure its performance. When we
perform an action that can change the state of an account (e.g.,
log in/out), we take screenshot images of the page before and after
taking the state-change action and save them along with the result
we receive from our Detection module. Then, we manually go
through the images and assess the state-detection results.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1780
A. Single Sign-On Support
RPs often change in a short time period, which can render prior
data on SSO support stale. Therefore, continuous observation is nec-
essary for building an accurate picture. Here we present our study of
SSO support and provide insight into this ever-changing ecosystem.
Methodology. We select the top 100K sites from Majestic [30]
and identify their login pages. Majestic ranks websites based on the
number of unique IP subnets that refer to the website and has been
used in several recent studies [31], [32], [33], [34]. Nonetheless, our
approach is agnostic to the top list used. After identifying the login
page, we detect support for Facebook SSO and initiate the login pro-
cess using our injected Facebook cookies. During the login process,
we record instances of RPs that do not accept Facebook cookies and
explicitly ask for Facebook credentials. We use two separate Face-
book accounts with names that are distinguishable from common
names and English words. This facilitates differential analysis during
the state detection process. We also collect IdP-generated errors that
may appear during login. Such errors may occur if the RP is not con-
figured correctly or is currently in development mode. This allows us
to filter out non-functional RPs that would pollute our measurements.
After logging into each RP, we collect the cookies. We repeat this
process to ensure that unexpected errors, due to network disruptions,
are minimal. One of the practical challenges that we faced during our
crawling process was sending too many and frequent requests, which
trigger Facebook’s bot detection system. To avoid overwhelming
the servers (and potentially getting banned), we limited our crawl
to 10k websites per day. However, this created a gap between when
we logged into each RP and later performed the revocation tests
which could affect the results (e.g., RP cookies expire prior to our
revocation test). Therefore, after the second crawl, we repeat the
login process for all detected RPs with a 40-60 second sleep time
in between. To speed up the process, we use GNU Parallel [35] to
run 5-6 processes at a time, thus requiring approximately 1 day to
complete. All large-scale data collections were done on an Ubuntu
18.04 server with an Intel(R) Xeon(R) Silver 4110 CPU and 32GB
RAM, and manual inspections were done on a personal computer.
Results. We identified and initiated the login process for 2,689
websites that supported SSO with Facebook. Of those, 669 either
had a null App ID or returned an error, and 120 did not complete the
login process due to either freezing from SSO misconfigurations or
not loading correctly in headless Chrome. In total, we successfully
logged into 1,900 websites through Facebook SSO. To further
ensure the reliability of our results, we filtered websites based on
whether the login URL’s domain (via search engines) matched their
corresponding Majestic record, which left us with 1,622 websites
with matching domains. While this filtering process can also
remove legitimate websites such as shelfari.com (merged
with goodreads.com), we believe that it provides a more
accurate dataset for our experiments and eliminates false positives.
To become a Facebook RP a site must first create an application
in Facebook, where it will be assigned a unique App ID. We extract
the App IDs during the SSO login process (from the app_id
or client_id URL parameters) and match them to the data
collected from Facebook’s “Apps and Websites” portal. After
completing the login process, we collected applications from both
Facebook accounts and selected the matching App IDs associated
with those 1,622 websites. In total, we collected 1,494 unique apps
from Facebook’s portal. We note that the relationship between
App IDs and websites can be one-to-one or one-to-many; in the
case of one-to-many the app owner must explicitly whitelist those
websites otherwise Facebook throws errors. An example is shown in
Table III (Appendix) where the “JotFrom Login” App ID is shared
between multiple websites with some of them not being whitelisted.
We found 36 App IDs that had one-to-many relationships, with
19 having similar second-level domains (e.g. yelp.com and
yelp.ca) and 17 cases with different second-level domains.
For
instance, cancer.gov, interiordesign.net and
submittable.com use Submittable, an online platform for
collecting and reviewing submissions and applications. Figure 9
(Appendix) visualizes the one-to-many relationships between
App IDs and the websites in our data. Generally, having the same
second-level domain can be an indicator that the RP is managed by
the same organization as the websites. However, the opposite is not
necessarily true. This has three implications: (1) if the entity behind
the shared App ID gets compromised then all RPs that outsourced
their account management will be affected, (2) the entity in charge
of the App ID can track users between the different RPs, and (3) the
RP becomes a “front”, obscuring the actual entity users have to trust.
Takeaway 1: The relationship between IdP-side applications
and the websites can be one-to-one or one-to-many. Outsourcing
account management to a third-party application creates a single
point of failure and an environment where users can be tracked
across disjoint RPs without their knowledge.
SSO permissions. In addition to the App IDs, we collected the
permissions requested by RPs from Facebook’s portal. Facebook
relies on an app review process for applications that request
more than the public_profile and email permissions.
As can be seen in Table IV (Appendix), public_profile
and email are the most prevalent permission combinations we
observed throughout the apps collected from the applications
and business_tools sections. Business_tools apps
request a different set of permissions and are used for managing
business assets like pages, events, and groups. However, both use
SSO as a login method. Figures 10, 11 (Appendix) illustrate the
distribution of requested permissions in the business_tools
and applications sections
respectively. Our manual
investigation of 54 apps that did not request
the email
permission revealed that for the majority of the apps (33) SSO
cannot be used for account creation and can only be added to existing
accounts. The rest of the apps only need profile info (e.g., to enforce
age restriction) or allow for an email address to be added after SSO.
Longitudinal Single Sign-On support. We tracked changes in
Single Sign-On support across two rounds of data collection that
were 50 days apart. We found that Single Sign-On support was
dropped in 119 websites. We also tracked IdP-side apps through
Facebook’s portal and noted that after 50 days, 41 apps switched
the development mode flag (on/off) at least once. Interestingly, we
observed that if an app goes into development mode, it disappears
from Facebook’s portal, thus preventing users from modifying its
access permissions. However, while apps in development mode are
not shown in the app portal, their access can still be revoked through
Facebook’s recovery process. This requires the user to go through the
recovery process that is different from visiting the applications page
and removing the apps, which may not be obvious to average users.
Our findings also show that many RPs had non-functional SSO
implementations. Out of 669 unsuccessful SSO logins, 407 were
due to errors; these were narrowed down to 348 through our afore-
mentioned domain-filtering process. We manually categorized the
errors based on the received descriptions and found that the majority
1781
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 5: Number of Relying Party errors and success cases (left) and
error to success ratio (right) per website rank.
of errors are caused by apps being in development mode. Figure 5
illustrates the counts of successful and erroneous SSO logins as well
as their ratio per website rank. Figure 6 depicts the percentage of
error categories correlated with the website rank. As can be observed
from the two figures, while the absolute number of erroneous apps
is comparable across all bins, the error-to-success ratio is dispropor-
tionately lower for the most popular websites (i.e., top 10K).
Takeaway 2: SSO support is dynamic and often changes in a
short time window. Such changes can be temporary (development
mode) or permanent. The login process for 17.6% of Relying
Parties resulted in errors, demonstrating that an accurate
assessment of the ecosystem requires interactive measurements.
Re-authentication enforcement. During the Single Sign-On
support test, we collected the list of RPs that explicitly ask the
Identity Provider to re-authenticate the user even if the user’s
IdP identity is verified via existing authentication cookies. This
additional step is particularly useful for ensuring that having access
to the hijacked cookies without knowledge of the password is not
sufficient for completing authentication (i.e., it can prevent IdP
cookie hijackers from obtaining access to the user’s RP accounts [6]).
Facebook supports two ways for mandating re-authentication. The
first method is performed on the client side, by sending a query string
containing auth_type=reauthenticate [36]. The second
method requires enabling the Force Web OAuth Reauthentication
option in Facebook’s client OAuth settings. We observed a total of 24
RPs requesting re-authentication enforcement. Alarmingly, however,
11 RPs only request re-authentication on the client side; we found
that by simply removing the auth_type parameter, we were
able to bypass re-authentication enforcement and authenticate using
the IdP cookies. In other words, only 13 (0.8%) of the 1,622 RPs
adequately protect user accounts from IdP cookie hijackers. Interest-
ingly, while Google (the second most prevalent IdP) also follows the
RFC and allows the RP to decide [37] [38], Apple follows a more
secure approach and always requires reauthentication. Obviously, if
the attacker knows the user’s IdP password (e.g., through phishing)
this mechanism will not prevent the attacker from gaining access.
Facebook SDK. RPs should regularly check the SSO access
token’s validity, as highlighted by Facebook after their 2018 breach,
when they stated that leveraging the official SDK would protect
RPs [39]. Facebook also recommends using its JavaScript SDK for
protecting against traffic redirection [40]. While not using the SDK
is not inherently bad practice, we are interested in understanding how
many RPs use it and are considered protected per Facebook’s guide-
lines. To use the SDK, the RP needs to include JavaScript code that
1782
Fig. 6: Error type distribution by website rank.
loads and initializes the SDK. The SDK’s URL is a variation of https:
//connect.facebook.net/en US/sdk.js, and once the SDK is fetched it
creates a JavaScript object called FB. The initialization is completed
by passing RP-specific configuration options to FB.init(),
which is generally wrapped in the window.fbAsyncInit()
function. Due to the asynchronous nature of this call, we observed
that fbAsyncInit() is a more accurate proxy for measuring
SDK-initialization across RPs. To measure SDK usage, we visited
each RP and inspected outgoing requests for the SDK’s URL as well
as checking for the existence of the FB object. We also recorded
calls to the fbAsyncInit() and FB.getLoginStatus()
functions by overriding the functions prior to page_load, which
makes our approach resilient to obfuscation.
Additionally, FB.getLoginStatus() allows the RP to
query Facebook whether the user is currently logged into Face-
book and whether they have logged into the RP website in
the past. Each of these attributes indicates a different level of
SDK usage. For instance, websites can include the SDK URL
which also creates the FB JavaScript object, but never use any
functions from the SDK. Our findings show that 49.5% (of
1360) RPs included the SDK in their website, of which 81%
initialized the SDK using fbAsyncInit() and 4.3% called
FB.getLoginStatus(). According to Facebook, any SDK
functions must be called after SDK initialization. In other words,
an absence of SDK initialization can be a strong indication that RP
does not actually use the SDK’s functions. For comparison, we also
measured SDK usage for two other popular IdPs, Apple and Google.
Both offer official SDKs and provide easy-to-follow documentations
for RPs. Our findings show that Google and Apple SDKs have com-
parable SDK usage, with 45% (of 727) and 40% (217) respectively.
Takeaway 3: Re-authentication enforcement is extremely low
among RPs (1.4%), and can be bypassed in 45.8% of the RPs
that enable it. Despite best practice guidelines and three years
having passed from the Facebook data breach, only 40% of the
observed RPs include and properly initialize the official SDK.
B. Access Revocation
Methodology. We investigate the impact of revoking RP per-
mission from within Facebook and explore the functionality of RPs’
cookies in the aftermath of access revocation. We visit the RP’s login
page in two separate flows, with only one of them including the
cookies in its requests. Using our state-detection method (see §III-A),
we compare the two pages and detect the RP’s state via observable
side-effects. Note that the state detection’s goal is to detect whether
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1 - 10k10k - 20k20k - 30k30k - 40k40k - 50k50k - 60k60k - 70k70k - 80k80k - 90k90k - 100kRank0100200300400500FrequencySuccessError1 - 10k10k - 20k20k - 30k30k - 40k40k - 50k50k - 60k60k - 70k70k - 80k80k - 90k90k - 100kRank0%5%10%15%20%25%30%35%40%Percentage (Error/Success)the cookies affect the website’s state and not to infer the level of
access that the cookies provide. We also take screenshots of the login
pages to manually verify the results. During our manual analysis,
we inspected all the screenshots and compared the visual differences
with what was detected by our system (i.e., personal info, logout but-
tons, images, etc.) to verify the results of our state-detection method.
We conduct two experiments: (i) an initial experiment where
we log into RPs, revoke their access and wait for 10 days, and
(ii) an extended experiment where we log into RPs and wait for
a month. The additional time for the control group is to obtain a
more extensive cookie-expiration timeline. To prevent being flagged
as automated bots, we randomly wait 20-60 seconds between each
login attempt, increasing the duration of the entire login process to
two days. For the first experiment, we collect the state-change results
and take screenshots of the login pages before revocation to ensure
that the cookies still work. We continue collecting daily state-change
data and the screenshots for the next 10 days. Apart from the revo-
cation step, we follow the same steps for the second experiment and
continue to obtain daily screenshots for a month. In both experiments,
we collect two sets of state-change data: one with RP cookies as-is,
and another where we extend the expiration dates to study the impact
of client-side and server-side cookie expiration checks. Finally, we
investigate whether RPs correctly terminate sessions after logging
out. We use the following order of actions for this experiment: first
we log into an RP using SSO and collect the RP’s cookies. Next, we
inject the collected (valid) cookies in a fresh browser and log into
the RP again and look for the logout button in the main page and the
login pages. The heuristics we use are very similar to our SSO button
detection. If the logout is successful, we use the (invalidated) cookies
in a fresh browser and visit the RP and invoke our state detection
process. If it detects that we are successfully logged in, we flag the
RP as non-compliant. Similar to previous experiment, we collect
screenshots at each step to later verify our state-detection results.
Results. We consider 1,107 RPs that were successfully pro-
cessed and found in both the initial and extended groups, and their
domain matched the login URL. Initially, we identified 470 RPs
where the presence of RP cookies resulted in detectable changes
to the RP’s state after the SSO login. We manually checked the