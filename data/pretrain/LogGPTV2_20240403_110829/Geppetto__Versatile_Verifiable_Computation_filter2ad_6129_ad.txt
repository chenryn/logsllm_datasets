= Digest(EKb,χ(t)
b
,o(t)
b
b
b
b
b
b
))∧
The proof of Theorem 1 can be found in the full paper [23].
Intuitively, it follows from extracting valid digest openings from
all subproofs, and leveraging the binding property of the bus
digests to guarantee consistency across subproofs.
4 Geppetto’s CP Protocol
We now construct an efﬁcient commit-and-prove protocol for
}λ∈N (see §3.1) deﬁned by a MultiQAP Q(cid:3)
(cid:2)-ary relations {RQ(cid:3)
derived from multiple QAPs Qi, as described in §2.1.3.
λ
Deﬁnition 4 (Knowledge Soundness) The commit-and-prove
scheme P is knowledge sound for (cid:2)-ary relations {R λ}λ∈N, if
for all efﬁcient A there is an efﬁcient extractor E taking the
random tape of A such that, for any R ∈ R λ,
4.1 MultiQAPs as Polynomials
We use Pinocchio’s technique (which originated with Gennaro
et al. [29]) to lift quadratic programs to polynomials.
259259
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
Given MultiQAP Q(cid:3), of size ρ(cid:3) and degree d(cid:3), we ﬁrst de-
ﬁne a set D of d(cid:3) “root values” of the form r ∈ {2i}d(cid:3)
i=1,5 and
we deﬁne the polynomial δ(x) as the polynomial with all r ∈ D
as roots. Recalling §2.1.3, we then deﬁne a set V of ρ(cid:3) poly-
nomials vk(x) by interpolation over the roots in D such that for
k ∈ [ρ(cid:3)],r ∈ D: vk(r) = vr,k. Each of the k polynomials es-
sentially summarizes the effect one of χχχ’s variables has on the
computation. We deﬁne similar sets W and Y using the vectors
wr and yr.
We say that the polynomial MultiQAP is satisﬁed by χ if δ(x)
(cid:3)
divides p(x), where:
(cid:2)
∑ρ
k=0
χk · vk(x)
(cid:3)·(cid:2)
∑ρ
k=0
p(x) =
χk · wk(x)
(cid:3)−(cid:2)
∑ρ
k=0
χk · yk(x)
.
We use MultiQAPs to prove statements about shared state.
To achieve this, the polynomials corresponding to bus values
need to fulﬁll an additional condition. We say that a bus bank
Bb is commitment compatible if (i) the polynomials in each set
{yk(x)}k∈Bb are linearly independent, meaning that no linear
combination of them cancels all coefﬁcients, and (ii) all poly-
nomials in the set {vk(x),wk(x)}k∈Bb are 0. The ﬁrst property
is crucial for commitments to be binding, while the second im-
proves performance and facilitates zero-knowledge when using
externally generated commitments.
By inspection of Equation (5), the buses in our MultiQAP
construction in §2.1.3 are commitment compatible. Concretely,
continuing our example from that section, Equation (5) will be
encoded as the QAP equation:
(0 +··· + 0)(0 +··· + 0) = (1· z0 + 1· z1 + (−1)· ˆz).
4.2 Commit-and-Prove Scheme for MultiQAPs
Geppetto’s protocol inherits techniques from Pinocchio [46];
the key differences are starting with MultiQAPs instead of
QAPs, and splitting the prover’s efforts into separate digest and
proof computations.
1 or gx
We present our protocol in terms of a generic quadratic en-
coding E [29].
In our implementation, we use an encoding
based on bilinear groups. Speciﬁcally, let e be a non-trivial bi-
linear map [13] e : G1 × G2 → GT and let g1, g2 be generators
of G1 and G2 respectively. To simplify notation, we deﬁne the
encoding E(x) to be either gx
2 depending on whether it
appears on the left or the right side of a product ∗.
Below, each Bb ∈ B represents a subset of [ρ(cid:3)], and we use
the commit-and-prove message χ(t)
to represent the values of
b
bank instance B(t)
b .
Protocol 1 (Geppetto)
• τ ← KeyGen1(1λ):
Choose s,{αv,b,αw,b,αy,b}b∈[(cid:2)],rv,rw
(τS ,τE ) = (s,{αv,b,αw,b,αy,b}b∈[(cid:2)],rv,rw), (rv,rw).
• (EK,VK) ← KeyGen2(τ,RQ(cid:3)):
Choose {γb,βb}b∈[(cid:2)]
R← F. Set ry = rv·rw. To simplify nota-
tion, deﬁne Ev(x) = E(rvx) (and similarly for Ew and Ey).
R← F. Construct τ as
5Choosing roots of this form enables our C++ library to implement an efﬁ-
cient d(cid:3) logd(cid:3) algorithm [15] for the prover’s polynomial division.
260260
For the MultiQAP Q(cid:3) = (ρ(cid:3),d(cid:3),B,V ,W ,Y ,δ(x)), con-
struct the public evaluation key EK as:
(EKb)b∈[(cid:2)],
(cid:2)
where each bank’s digest key EKb is deﬁned as:
Ey(yk(s))
(E(si))i∈[d] , Ev(δ(s)),Ew(δ(s)),Ey(δ(s))
Ev(vk(s)),
Ev(αv,bvk(s)), Ew(αw,bwk(s)), Ey(αy,byk(s)),
Ew(wk(s)),
E(βb(rvvk(s) + rwwk(s) + ryyk(s))),
(cid:3)
k∈Bb
Ev(αv,bδ(s)),
Ev(βbδ(s)),
Ew(αw,bδ(s))
Ew(βbδ(s)),
Ey(αy,bδ(s)),
Ey(βbδ(s)).
Construct the public veriﬁcation key VK as:
(VKb)b∈[(cid:2)], E(1), Ey(δ(s)) ,
where each bank’s digest veriﬁcation key VKb is:
VKb = E(αv,b),E(αw,b),E(αy,b),E(γb),E(βbγb) .
Additionally VK includes digest keys EKb for digests that
the veriﬁer computes (e.g., for IO banks). Since EK and
VK are public, the split into prover and veriﬁer keys is pri-
marily designed to reduce the veriﬁer’s storage overhead.
• D(t)
← Digest(EKb,χ(t)
b
b as (ov,ow,oy).
b
Parse o(t)
If Bb is an IO bank, simply return:
,o(t)
b
):
Ev(v(b)(s)), Ew(w(b)(s)), Ey(y(b)(s)),
χkvk(s) + ovδ(s) (and similarly for
where v(b)(s) = ∑k∈Bb
w(b)(s) and y(b)(s)). Since the veriﬁer typically computes
these digests, ov is typically 0. Note that all of these terms
can be computed using the values in VKb, thanks to the
linear homomorphism of the encoding E.
For any other bank, compute:
Ey(y(b)(s)),
Ew(w(b)(s)),
Ev(v(b)(s)),
Ev(αv,bv(b)(s)), Ew(αw,bw(b)(s)), Ey(αy,by(b)(s)),
E(βb(rvv(b)(s) + rww(b)(s) + ryy(b)(s)))
.
Note that all of these terms can be computed using the
values in EKb. The values above constitute an extractable
digest of the χ(t)
b . For
b
commitment-compatible buses, this digest is also binding.
Furthermore,
for all commitment-compatible buses,
v(b)(s),w(b)(s),ov,ow are all 0, so the digest above
simpliﬁes to:
values, perfectly hidden via o(t)
Ey(y(b)(s)),Ey(αy,by(b)(s)),E(βb(ryy(b)(s))) ;
• π ← Prove(EK,χ,o): Parse each ob ∈ o as (ob,v,ob,w,ob,y)
and use the coefﬁcients χ to calculate:
χkvk(x) + ∑
b∈[(cid:2)]
v(x) = ∑
k∈[ρ(cid:3)]
ob,vδ(x),
and similarly for w(x), and y(x).
Just as in a standard QAP proof [29], calculate h(x) such
that h(x)δ(x) = v(x)w(x) − y(x), that is, the polynomial
that proves that δ(x) divides v(x)w(x)− y(x). Compute the
proof as π ← E(h(s)) using the E(si) terms in EK.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
• {0,1} ← Verify(VKb,D(t)
b
): Verify digest D(t)
b by checking
Ev(v(b)(s))∗ E(αv,b) = Ev(αv,bv(b)(s))∗ E(1) (6)
Ew(w(b)(s))∗ E(αw,b) = Ew(αw,bw(b)(s))∗ E(1) (7)
Ey(y(b)(s))∗ E(αy,b) = Ey(αy,by(b)(s))∗ E(1) (8)
and the β check:
(cid:4)
βb(rvv(b)(s) + rww(b)(s) + ryy(b)(s))
(cid:5)
E
(cid:4)
Ev(v(b)(s))+Ey(y(b)(s))
(cid:5)
(9)
∗E(βbγb)+E(βbγb)∗ Ew(w(b)(s)).
∗ E(γb) =
(For buses, we do not require the checks in Equations (6)
and (7), and we can simplify the β check (Eqn (9)).)
• {0,1} ← Verify(VK,D0, . . . ,D(cid:2)−1,π): Combine the di-
gests and perform the divisibility check on the proof term
E(h(s)) in π:
(cid:4)
∑b∈[(cid:2)] Ev(v(b)(s))
(cid:4)
∑b∈[(cid:2)] Ey(y(b)(s))
(cid:5)
(cid:5)
(cid:5)
(cid:4)
∑b∈[(cid:2)] Ew(w(b)(s))
∗
∗ E(1) = E(h(s))∗ Ey(δ(s)) .
−
(10)
As described,
the protocol supports non-interactive zero-
knowledge proofs, in addition to veriﬁable computation. For
applications that only desire the latter, the multiples of δ(s) in
the EK and the use of digest randomizations o may be omitted.
Theorem 2 Protocol 1 has binding digests, as deﬁned by Deﬁ-
nition 3 under the d-SDH assumption.
Theorem 3 Protocol 1 is a knowledge-sound commit-and-
prove scheme, as deﬁned by Deﬁnition 4.
Theorem 4 Protocol 1 is a perfectly zero-knowledge commit-
and-prove scheme.
We refer to the full paper [23] for the proofs of these theorems
and the deﬁnition of their assumptions. Like the protocol, the
proofs inherit their techniques from Pinocchio.
5 Veriﬁable Crypto Computations
Background Pinocchio, along with the systems built atop it,
instantiates its cryptographic protocol using pairing-friendly el-
liptic curves. Such curves ensure good performance and com-
pact keys and proofs. An elliptic curve E deﬁnes a group of
prime order p(cid:7) where each element in the group is an (x,y)
point, with x and y drawn from a second ﬁeld Fp of large prime
characteristic p. When Pinocchio is instantiated with such a
curve, the QAPs (and hence all veriﬁable computations) are de-
ﬁned over Fp(cid:7), and hence code that compiles naturally to oper-
ations on Fp(cid:7) is cheap.
Approach At a high-level, we choose the curve E we use to
instantiate Geppetto such that the group order “naturally sup-
ports” operations on a second curve ˜E, which we can use for any
cryptographic scheme built on ˜E, e.g., anything from signing
with ECDSA to the latest attribute-based encryption scheme.
261261
In more detail, suppose we want to verify ECDSA signatures
over an elliptic curve ˜E built from points chosen from Fq. If
we instantiate Geppetto using a pairing-friendly elliptic curve
E with a group of prime order p(cid:7) = q, then operations on points
from ˜E embed naturally into our QAPs, meaning that basic op-
erations like adding two points cost only a handful of crypto-
graphic operations, rather than hundreds or thousands required
if p(cid:7) did not align with q.
Bootstrapping As described in §2.2, proof bootstrapping is
a particularly compelling example of verifying cryptographic
operations, since it allows us to condense a long series of proofs
and digests into a single proof and digest.
Remarkably, Karabina and Teske [35] show that it is possi-
ble to generate two MNT curves [45] E and ˜E that are pairing
friendly and, more importantly, ˜E can be embedded in E, and E
can be embedded in ˜E.
Ben-Sasson et al. [9] recently instantiated and implemented
such curves to bootstrap the veriﬁcation of individual CPU in-
structions. Geppetto can use a similar approach to achieve un-
bounded bootstrapping of entire QAPs. Speciﬁcally, we could
instantiate two versions of Geppetto, one built on E that con-
denses proofs consisting of points from ˜E and another built on ˜E
that condenses proofs consisting of points from E.
Unfortunately, there are drawbacks to using the curves Ben-
Sasson et al. found. First, they were only able to ﬁnd a pair of
curves that provide 80 bits of security. Finding cycles of perfor-
mant curves for the more standard 128-bit setting appears non-
trivial, since just ﬁnding 80-bit curves required over 610,000
core-hours of computation. Second, the MNT curve family
is not the most efﬁcient family at higher security levels, and
achieving a cycle requires larger-than-usual ﬁelds, creating ad-
ditional inefﬁciency [9].
To estimate the costs of using MNT curves at the 128-bit se-
curity level used by Pinocchio, we coded up all of the relevant
curve operations in Magma [14] and counted the group opera-
tions required. We made very optimistic assumptions about the
optimal implementation of the curves, e.g., by assuming that
the operations employ all available EC tricks within the pairing
computation, even though the actual curves may not allow for