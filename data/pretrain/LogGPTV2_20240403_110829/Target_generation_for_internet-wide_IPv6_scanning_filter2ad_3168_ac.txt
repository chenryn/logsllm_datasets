from any further scans.
Figure 3: The distribution of seed addresses, filtered aliased
hits, and hits after dealiasing across ASNs. We collected hits
from active scans of targets generated by 6Gen run with a
budget of 1 M probes per routed prefix.
6.1 Seed Collection
We collected seed addresses by extracting AAAA records from the
Rapid7 Forward DNS ANY dataset [26]. The dataset consists of
DNS responses to DNS ANY requests for fully-qualified domain
names seen in Rapid7’s Project Sonar scans [27]. We specifically
used the August 11, 2017 snapshot that contained 2.96 M unique
IPv6 addresses. We grouped seeds by BGP origin routed prefix. The
seeds resided in 10,038 routed prefixes in 7,350 ASes. In Figure 3,
we observe that the distribution of seed addresses is not heavily
skewed towards any particular ASes; we show the top ten ASes in
Table 1a.
6.2 Dealiasing
During our evaluation, we found that address aliasing has a pro-
found effect on IPv6 address generation and that large-scale IPv6
aliasing is more common than previously discussed. While preva-
lence varied slightly across different scan parameters, we found that
more than 98% of active addresses belonged to large aliased regions
in many experiments. In one example, all addresses in a single /56
prefix belonging to Akamai responded to probes on TCP/80. In
this section, we discuss how we filter out these prefixes from our
analysis.
Existing techniques to dealias IPv6 addresses focus on
routers [22–24] or identifying IPv4 and IPv6 addresses that be-
long to the same dual-stack host [29]. Although these approaches
might generalize, they are limited by the features supported on the
investigated hosts. For example, SpeedTrap [22] is an IPv6 alias
resolution method that uses IP fragmentation information as a side-
channel to detect identical hosts at multiple addresses. However, the
authors reported only being able to use this side-channel for approx-
imately a third of routers they measured. Scheitle et. al. [29] used
variable clock skew to associate IPv4 and IPv6 address pairs with
101102103104105106Number of Seeds in a Routed Prefix10-210-1100101102103104105106Time (in Seconds)CPU Computation TimeWall Clock Time100101102103104Number of ASNs (Ordered bythe Number of Addresses Per ASN)0.00.20.40.60.81.0CDF (of Addresses)Aliased HitsNon-Aliased HitsSeed AddressesTarget Generation for Internet-wide IPv6 Scanning
IMC ’17, November 1-3, 2017, London, UK
AS Name
Linode
Amazon
HostEurope
DTAG ISP
home.pl
Masterhost
Hurricane
Cloudflare
TuxBox
OneAndOne
ASN
63949
16509
20773
3320
12824
25532
6939
13335
47490
8560
% Seeds
8.6%
8.1%
6.6%
5.8%
5.4%
5.2%
4.4%
3.7%
3.0%
2.4%
AS Name
Akamai
Amazon
CenturyLink
GTT
Fastly
Google
Masterhost
Cloudflare
XO Comms
Lidero
ASN
20940
16509
209
3257
54113
15169
25532
13335
2828
13189
% Hits
52.0%
36.0%
2.5%
1.8%
1.8%
1.8%
1.0%
0.8%
0.4%
0.3%
(a) Seed Addresses
(b) Aliased Hits
AS Name
Amazon
Amazon
OVH
Hetzner
HostEurope
RH-TEC
Globe
GoDaddy
Uvensys
DigitalOcean
ASN
14618
16509
16276
24940
20773
25560
25234
26496
58010
14061
(c) Non-Aliased Hits
% Hits
12.9%
7.7%
7.1%
5.7%
5.3%
5.3%
4.3%
3.5%
3.2%
3.1%
Table 1: The top 10 ASes and the percent of addresses within each, for our seed addresses, aliased hits, and hits after dealiasing.
dual-stack hosts. They found that 31% of responsive IPv6 addresses
did not offer the TCP Timestamp option necessary to assess clock
properties. Furthermore, the prior works have only demonstrated
that these methods scale to several thousand addresses, which is
orders of magnitude smaller than the large aliased networks we
have observed.
As a best-effort attempt at identifying aliased regions, we per-
formed active probing of /96 address prefixes that contained respon-
sive scan targets (e.g., hits). For each prefix, we randomly generated
three addresses and sent three TCP SYN probes on port 80 to each
address. If all three addresses within a prefix responded to at least
one of the probes, we considered the prefix aliased. Given the size
of a /96 prefix (232 addresses), the probability of randomly select-
ing three responsive addresses in a non-aliased prefix is negligible.
Even if a prefix is non-aliased and has a million responsive ad-
dresses, the likelihood of our experiment falsely flagging aliasing
is less than 10−10. Our method will reliably detect prefix aliasing at
the /96 (or larger/shorter) granularity, modulo extensive network
outages. We chose to operate at the /96 granularity as it is a rela-
tively small prefix but the number of probe packets required proved
manageable.
In total, our responsive target addresses resided in 10.2 M /96
prefixes, of which 10.0 M (98%) were aliased on TCP/80. These /96
prefixes corresponded to 205 routed prefixes in 138 ASes. After
filtering out hits in aliased /96 prefixes, we additionally clustered
our remaining hits by AS, and manually investigated the top 10 ASes
for aliasing at a granularity smaller than /96 prefixes. We found that
the top two ASes (Cloudflare (13335) and Mittwald (15817)) were
aliased at a /112 prefix granularity, while the remaining 8 ASes did
not exhibit signs of large-scale aliasing. We further excluded those
two ASes (37% of remaining hits).
In general, IP aliasing is heavily concentrated in a small number
of ASes. Of the 7,421 ASes in our seed and hit address datasets, only
140 (1.9%) ASes exhibited extensive aliasing. Akamai accounted for
over half of the aliased hits and Amazon accounted for over one
third (Table 1b). This skew of aliased hits towards a few ASes is also
visible in Figure 3, as nearly 95% of all aliased hits were localized
in five ASes. For these networks, 6Gen did find large numbers of
aliased hits that may not meaningfully represent distinct hosts or
network services—a limitation of the algorithm’s design. However,
Figure 4: The number of TCP/80 hits for targets generated
by 6Gen, for varying budgets.
as aliasing is concentrated to relatively few networks, 6Gen can still
be effective on other networks. Unless noted otherwise, we count
removed /96s as zero hits to provide as close as possible to a lower
bound on the number of addresses we found in the remainder of
the section.
6.3 Design Decision: Tight versus Loose Ranges
As discussed in §5.3, 6Gen can generate clusters at the nybble speci-
ficity granularity (“tight” ranges) or can use the fully undetermined
nybble wildcard granularity (“loose” ranges). A loose range em-
phasizes more extensive exploration of early-formed clusters with
higher densities, as these clusters are fully expanded by the loose
range, consuming more of the budget early on. In contrast, a tight
range results in exploring more or larger clusters, as each cluster’s
range is tightened. To understand the tradeoff, we compared the
raw number of hits found using both approaches. With a budget of
1 M probes per routed prefix, 6Gen with loose ranges found 56.7 M
hits on TCP/80 whereas tight ranges resulted in 55.9 M hits. The
pattern held after filtering out aliased hits with 1.0 M versus 973 K
hits and we use loose ranges in our later experiments.
01002003004005006007008009001000Budget per Routed Prefix (in Thousands of Probes)104105106107108Number of HitsW/o DealiasingW/ DealiasingIMC ’17, November 1-3, 2017, London, UK
Murdock et al.
(a) Singleton Clusters
(b) Grown Clusters
Figure 5: CDFs of the number of singleton and grown clusters that 6Gen outputs for routed prefixes with varying number of
seeds. We bucket routed prefixes by the number of seeds, and plot a curve for each bucket. Note we elide routed prefixes with
more than 100 K seeds as the population size is too small for a meaningful distribution.
6.4 Selecting the Budget Parameter
In our analysis, we treat destination networks independently and do
not consider how to share scan budget across networks. However,
even within a single network, scan budget can drastically change
the patterns that are uncovered. To explore the effect of the budget
size, we evaluate 6Gen’s predictions on TCP/80 at varying budgets.
From Figure 4, we observe a plateau in the increase in the number
of dealiased hits as the budget approaches 1 M probes per routed
prefix. This suggests that for many prefixes, meaningful clustering
has halted as the last grown clusters were not useful for generating
hits. Increasing the budget further may have diminishing returns,
thus we chose to operate by default with a budget of 1 M probes
for each routed prefix.
6.5 6Gen’s Clusters
We find that 6Gen grows at least one cluster for the vast majority
of routed prefixes: only 3% of routed prefixes with 10 or more seeds
had no grown clusters and likewise for only 12% of prefixes with
2–10 seeds (Figure 5b). There are also few clusters (both singleton
and grown) relative to the number of seeds in each routed prefix.
For example, all seeds were part of a grown cluster for half of the
routed prefixes with 10–100 seeds and 80% of those routed prefixes
had five or fewer singletons. Half of the prefixes with 100–1000
seeds had 10 or less grown clusters. In other words, 6Gen clustered
the majority of seeds together and formed only a small number of
clusters rather than a large number of small clusters.
We also characterize our clusters by the location of dynamic
nybbles. As can be seen in Figure 6, there are two modes in the
frequency of dynamic nybbles across routed prefixes. The first mode
is from the 9th to the 16th nybble. This behavior is likely due to
addresses conforming to RFC 2460 [9], which specifies using the
first 64 bits of the address (or the first 16 nybbles) as a network
identifier. The second mode is after the 29th nybble. This behavior
is likely explained by RFC 7707 [17], which describes that using
Figure 6: For each nybble (with an index between 1 and 32),
we plot the portion of routed prefixes that have any cluster
ranges with that nybble dynamic.
the least significant bits of the address (e.g., the highest nybbles
indexes) is common practice.
6.6 Address Analysis
6Gen generated 5.8 B scan targets when run with a budget of 1 M
probes per routed prefix. Of those, 56.7 M responded on TCP/80.
However, as discussed in §6.2, the vast majority (98%) are located in
extensively aliased regions. Here we explore the 1.0 M responsive
addresses 6Gen discovered in non-aliased regions.
6Gen was able to find meaningful targets in 2,840 routed prefixes
associated with 2,368 ASes. This is 28% of the routed prefixes and
32% of the ASes that contained non-aliased seeds in our input set.
We show the distribution of hits across ASes in Figure 3 and list
the top ten ASes in Table 1c. We observe that the dealiased hits
0100101102103104105Number of Singleton Clusters0.00.20.40.60.81.0CDF (of Routed Prefixes)Num. Seedsper Prefix[2;10)[10;102)[102;103)[103;104)[104;105)0100101102103104105Number of Grown Clusters0.00.20.40.60.81.0CDF (of Routed Prefixes)Num. Seedsper Prefix[2;10)[10;102)[102;103)[103;104)[104;105)51015202530Nybble Index0.00.10.20.30.40.50.60.7Portion of Routed PrefixesTarget Generation for Internet-wide IPv6 Scanning
IMC ’17, November 1-3, 2017, London, UK
Downsampling Level
1%
10%
25%
100%
W/o Dealiasing
W/ Dealiasing
225 K
713 K
825 K
1.0 M
Num. Hits % vs All Num. Hits % vs All
22.5%
71.3%
82.5%
100.0%
1.3%
23.5%
48.2%
100.0%
758 K
13.3 M
27.3 M
56.7 M
Table 2: For each downsampling level, both before and after
dealiasing, we list the number of hits 6Gen discovered and
what percentage that number is compared to the number of
hits 6Gen found using all seeds. In all experiments, the bud-
get was 1 M probes per routed prefix.
identified name server hosts as those addresses in DNS NS records.
We fed these 61 K seeds into 6Gen, ran it with a budget of 1 M
probes per routed prefix, and scanned the outputted predictions on
TCP/80.
In total, we found 1.2M responsive addresses, of which 308K were
in non-aliased regions. While the number of discovered addresses
is drastically smaller when only using name server addresses, the
input seed dataset is also significantly reduced. Compared to the
name server seed set, 6Gen was able to find five times as many
non-aliased addresses and 19 times as many hits overall, indicating
that using seeds of one host type may be fruitful still in discovering
other hosts. However, we acknowledge this is an initial exploration,
and some host types may prove less useful as seeds.
6.7.2 Downsampling Seeds. As 6Gen executes faster with fewer
seeds, one may wish to downsample a seed dataset to improve
performance. To investigate the effect of downsampling, we explore
6Gen’s performance when run on 1%, 10%, and 25% of our full seed
dataset. For each downsampled seed input, we executed 6Gen with