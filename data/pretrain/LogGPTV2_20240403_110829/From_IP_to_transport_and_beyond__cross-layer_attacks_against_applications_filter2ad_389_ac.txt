✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Proxies
1: Depends on the attack scenario. 2: Requires a third-party application to trigger queries.
direct
Table 1: Evaluation of attacks against popular systems leveraging a poisoned DNS cache.
how the application uses the injected records, and (4) the outcome
of the attack.
4.1 Methodology for Selecting Applications
We select the applications according to the following considera-
tions: application category, usage of DNS by the application and
the impact of DNS cache poisoning on the application.
4.1.1 Category. We categorise the applications to groups, cover-
ing most of the popular applications and security mechanisms in
the Internet (left most column in Table 1). Within each category
we selected a few representative protocols and systems for that
category, see column ‘Protocol’ in Table 1.
4.1.2 Usage of DNS. One of the considerations for selecting the
applications is how the application uses DNS: how the queries are
sent by the application to the DNS resolver and how the results
from the lookups are processed. The column ‘Use-Case’ in Table
1 describes the usage scenarios of the DNS by the application. We
defined the following types:
Location (loc): DNS is used to locate a direct communication
partner, typically in form of a hostname-to-ip (A, AAAA) mapping.
Federation (fed): DNS is used to locate a user’s home-server based
on the domain part of a user address of the form user@domain.
Authorisation (auth): DNS is used to authorise a certain action
or host in the name of the domain’s owner.
4.1.3 Queries. Applications differ in flexibility in allowing external
entities to trigger queries. Our selection of applications aims to
cover the variety of options for triggering queries. To initiate the
attack, our adversary needs to cause the victim resolver to issue the
target query or to predict when the query will have been issued.
Some applications enable the attacker to send arbitrary queries,
e.g., in systems which use DNS for peer discovery in federated
systems like Radius, XMPP and SMTP. This is because in these
systems, the queried domains are part of the user’s ID. This user
ID can be controlled by the attacker to trigger a query to a domain
of its choice. The same applies to all (sub-)systems used as part
of web browsing, like HTTP, DANE and OCSP, since the attacker
can establish direct connection from the victim client to arbitrary
web servers which will trigger a DNS lookup that way. Setting
the domain name is not always possible, e.g., in NTP the query is
selected by the resolver based on the hostname that it receives from
the local NTP server.
We evaluated popular appliances and systems for their query
triggering behaviour. We list some selected systems in Table 2. As
can be seen, some allow external adversaries to trigger queries (in-
dicated with "on-demand" in column Trigger query). Other devices
use timers for issuing queries. Hence the adversaries can often
predict when the query is issued.
Impact of poisoning on applications. We select applications
4.1.4
to demonstrate the impact that cache poisoning on applications
can create: DoS (Denial of Service), downgrade of security or inter-
ception attacks.
4.2 Methodology for Attacking Applications
We developed cross-layer attacks that leverage DNS cache poison-
ing to attack applications listed in Table 1. The steps underlying all
our cross-layer attacks against applications are:
(1) Use the application to send to the victim DNS resolver a
query. In addition to the traditional ways of triggering queries,
such as with a script or Email, we also developed new ways to
trigger queries which were not known prior to our work. Some
of these techniques are specific to appliances and platforms, see
Table 2, while others are application-independent methodologies
for triggering queries. We explain our methodologies for triggering
queries in Section 4.3.
(2) Inject malicious records to poison the cache of the victim
DNS resolver. We use the methodologies in Section 3 for injecting
malicious records into the cache of the victim DNS resolver. In
840
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner
Type
Firewall
Load
balancer
CDN
Managed
DNS
(ALIAS)
Provider
pfSense
Sophos UTM
Kemp Technologies
F5 Networks
Trigger
query
timer
timer
timer
timer
Stackpath on-demand
timer
Fastly
AWS on-demand
Cloudflare on-demand
DNSimple on-demand
Oracle Cloud on-demand
Cloudflare on-demand
DNS Made Easy
timer
Caching Websites in
Alexa 100K
-
-
-
-
79
1,143
11,057
17,393
248
1,192
1,382
20,027
time
500s
240s
1h
1h
TTL
TTL
TTL
TTL
TTL
∼35min
TTL
TTL
Table 2: Query triggering behaviour at middleboxes. Last col-
umn shows the number of websites in 100K-top Alexa which
use that provider.
Table 1 we summarise the applicability of the cache poisoning
methodologies for cross-layer attacks against each application, and
explain this in Section 4.4.
(3) Exploit the poisoned records to cause a victim application
to divert from the expected behaviour. The outcomes of our cross-
layer attacks against applications range from downgrading security
to denial of service attacks and to more traditional impersonation
attacks, explained in Section 4.5.
4.3 Methodologies for Triggering Queries
4.3.1 Common ways for triggering queries. The most challenging
aspect of cross layer attacks that use DNS cache poisoning is the
ability to trigger or predict DNS requests. Typically an external
adversary does not have access to internal services, such as the DNS
resolver, and hence should not be able to cause the DNS resolver to
issue arbitrary DNS requests. Adversaries can trigger queries via
bounce. For instance, by sending an Email to a non existing recipient
in the target domain the adversary will cause the Email server to
return an error message with Delivery Status Notification. To send
the error the Email server requires the IP address and hostname of
the MX server in the domain that sent the Email message which
triggered the error. This causes queries to the domain specified by
the attacker.
The adversary can also set up a web server and lure clients to
access it, this is a direct query triggering. The clients download the
web objects from the adversary’s domain, and send DNS requests to
the DNS resolvers on their networks. When resolvers receive DNS
requests from servers or clients on their networks they initiate DNS
resolution. However, these approaches are limited. For instance,
only about 18% of the Email servers trigger DNS requests when
receiving Emails, [53]. The limitation with web clients is that the
adversary must wait until the target client visits the malicious web
page. Furthermore, web clients cannot be used to poison resolvers
that are used only by servers, such as Email or NTP. In this section
we develop new approaches for triggering queries.
4.3.2 Cross-applications DNS caches. The adversary may be able to
use one application to trigger queries to inject a record that is meant
841
to be used for cross-layer attack against a different application that
uses the same DNS cache. For instance, when an adversary cannot
trigger queries via an application that it wishes to attack, it may
often be able to trigger queries via a different application, that
uses the same DNS cache. The adversary may also choose to inject
into such cross-applications caches an application agnostic records;
for instance, a malicious NS record, mapping the nameserver of a
domain of the target application to the attacker’s IP address, is an
example of an application agnostic record.
Such cross-applications DNS cache scenario is not uncommon.
The DNS resolvers often serve multiple applications and the net-
works use the caching of the resolver to reduce traffic and latency for
all the applications. We use open resolvers to check how common
cross-applications DNS caches are. We perform our measurements
against a list of open resolvers from censys [32] and probe their
caches for the well-known domain(s) used by the applications on
our list in Table 1, e.g., pool.ntp.org for NTP. For each application
for which the records are in the cache we consider that the resolver
is used by that application or by the clients of that application. We
found that 69% of the open resolvers are shared between two or
more of the applications on our list.
A recent study [45] analysed how an attacker can find third-party
SMTP servers to trigger queries at typically closed forwarders used
by web clients. By scanning the /24 network block of the resolver’s
outbound IP address, the study found that an adversary could find
an SMTP server which allows triggering queries from the same
resolver in 11.3% of the cases. Additionally 2.3% of the resolvers
were open resolvers in the first place.
4.3.3 Triggering queries via forwarders. In this section we show
how to trigger queries with resolvers when this is not possible from
the target application.
DNS forwarders make up the majority of open resolvers in the
internet. Finding an open forwarder which forwards to the resolver
of choice whose cache the adversary wishes to poison is not difficult.
We explore the prevalence of forwarders through which one can
force a given recursive DNS resolver to trigger a query. We perform
a two step measurement: we first collect the forwarders used by
open DNS resolvers and then which of these forwarders are used
by random clients in the Internet.
In our measurement we use the list of all open DNS resolvers
from Censys [32] (which performs a full IPv4 scan for open re-
solvers). We query all the resolvers for a custom query with a
randomised subdomain under a domain which we control. This al-
lows us upon the arrival of the DNS requests to our nameservers to
map the open resolver’s IP address to the recursive forwarder that
it uses. This forwarder is determined by the outbound IP address
in the DNS query that arrives at our nameserver.
In the second step we run a web ad-based study against random
clients in the Internet that download our object. We trigger DNS
requests via those clients to our own domain. We use a random
subdomain associated with each client. Per client, we then obtain
the list of recursive resolvers’ IP addresses that arrived at our name-
server. We search them in the list of recursive resolvers IP addresses
from our dataset of open resolvers.
Our results are as follows: focusing only on the IP addresses of
the recursive resolvers, we find 4146 addresses out of which 3275
From IP to Transport and Beyond:
Cross-Layer Attacks Against Applications
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
(79%) addresses are in the open resolver database. Consequently,
assuming that an adversary targets a DNS resolver used by a typical
web client (represented by the ad-net clients in our study), there is a
high probability (79%) that it can find an open forwarder which can
be used to poison the cache of the target victim recursive resolver
used by that web client.
4.4 Applicability to Applications
In this section we explore which cache poisoning methodology is
applicable to which of the applications listed in Table 1.
For all methodologies, the attacker requires the knowledge of
the domain which is queried. In cases where the domain is pre-
configured in the applications configuration ("config" in Table 1),
this information needs to be fetched out of band.
4.4.1 HijackDNS. The adversary can hijack a sub-prefix or same-
prefix of the victim AS. We explain the success probability of cache
poisoning through both methods.
Sub-prefix hijack. The attacker can advertise a sub-prefix of
the victim. The routers prefer more specific IP prefixes over less
specific ones, hence this announcement will redirect all traffic for
that sub-prefix to the attacker.
Same-prefix hijack. Same-prefix hijack occurs when the at-
tacker hijacks a route to an existing IP prefix of the victim. The
attacker can advertise the same prefix as the victim AS and depend-
ing on the local preferences of the ASes will intercept traffic from
all the ASes that have less hops (shorter AS-PATH) to the attacker
than to the victim AS. The success of the hijack depends on the
topological relationship between the attacking AS and the domain
and the victim resolver.
4.4.2 SadDNS. The attack is probabilistic since it depends on the
ability of the adversary to win the race, by correctly guessing the
randomised TXID before the timeout event. A prerequisite to a
successful attack is the ability to trigger a large volume of queries.
Typically, this is the case when the query domain can be set by the
attacker ("target" in Table 1, Column "query name") or when a third
party application is used to trigger the queries (marked with ✓2 in
Table 1, see Section 4.3.3).
4.4.3 FragDNS. FragDNS is also a probabilistic attack since its
success depends on correctly guessing the IP ID value in the spoofed
IP fragment. This is easy when systems have large IP defragmenta-
tion buffers, such as old linux versions which allows the adversary
to send multiple fragments with different IP ID values, or when
systems use incremental IP ID counters which can be predicted. A
successful poisoning with FragDNS typically requires more packets
than with prefix hijacks but less than with SadDNS attack.
4.5 Exploiting Poisoned Caches for Attacks
Applications that use DNS resolvers with poisoned caches are ex-
posed to a range of attacks. In this section we explain the possible
outcomes of the attacks via DNS cache poisoning.
Downgrade attacks. In downgrade attacks the attacker makes
the security mechanism not available, as a result, causing the pro-
cessing of the data to be performed without the additional informa-
tion provided by the security mechanism. For instance, by poisoning
the responses to queries for SPF or DKIM records the attacker can
trick the victim Email server into accepting phishing Emails or
Emails with malicious attachments. Similarly, by causing the RPKI
validation to fail, the adversary can make a network, that filters
bogus BGP announcements with route origin validation, to accept
hijacked prefixes as authentic. This is due to the fact that RPKI
validation will result in status ‘unknown’ and hence will not be
used.
The attacker can also trick a security mechanism via DNS cache
poisoning. For instance, the attacker can bypass domain validation,
by redirecting the validation to run against attacker’s host [24], and
hence can issue fraudulent certificates.
Hijack attacks. In hijack attacks the victims are redirected to
attacker’s host which impersonates a genuine service in the Inter-
net. Network adversaries can hijack traffic to take over Internet
resources, such as SSO accounts at public providers. For instance,
the adversaries can take over the SSO accounts at Regional Inter-
net Registries (RIRs), by exploiting a combination of DNS cache
poisoning with password recovery [14]. The idea is to poison the
cache of the RIR, and to inject a record that maps the victim LIR to
the host of the attacker. Running a password recovery procedure
causes the password for the victim SSO account to be sent to the