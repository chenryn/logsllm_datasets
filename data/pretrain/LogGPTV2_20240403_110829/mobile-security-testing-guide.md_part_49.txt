$ brew install ios-deploy
After the installation, go into the directory of the IPA you want to install and unzip it as ios-deploy installs an app by
using the bundle.
$ unzip Name.ipa
$ ios-deploy --bundle 'Payload/Name.app' -W -d -v
After the app is installed on the iOS device, you can simply start it by adding the -m flag which will directly start
debugging without installing the application again.
$ ios-deploy --bundle 'Payload/Name.app' -W -d -v -m
Xcode
It is also possible to use the Xcode IDE to install iOS apps by doing the following steps:
1. Start Xcode
2. Select "Window/Devices and Simulators"
3. Select the connected iOS device and click on the "+" sign in "Installed Apps".
Allow Application Installation on a Non-iPad Device
358
Setting up a Testing Environment for iOS Apps
Sometimes an application can require to be used on an iPad device. If you only have iPhone or iPod touch devices
then you can force the application to accept to be installed and used on these kinds of devices. You can do this by
changing the value of the property UIDeviceFamily to the value 1 in the Info.plist file.
UIDeviceFamily
1
It is important to note that changing this value will break the original signature of the IPA file so you need to re-sign the
IPA, after the update, in order to install it on a device on which the signature validation has not been disabled.
This bypass might not work if the application requires capabilities that are specific to modern iPads while your iPhone
or iPod is a bit older.
Possible values for the property UIDeviceFamily can be found in the Apple Developer documentation.
Information Gathering
One fundamental step when analyzing apps is information gathering. This can be done by inspecting the app package
on your workstation or remotely by accessing the app data on the device. You'll find more advance techniques in the
subsequent chapters but, for now, we will focus on the basics: getting a list of all installed apps, exploring the app
package and accessing the app data directories on the device itself. This should give you a bit of context about what
the app is all about without even having to reverse engineer it or perform more advanced analysis. We will be
answering questions such as:
Which files are included in the package?
Which Frameworks does the app use?
Which capabilities does the app require?
Which permissions does the app request to the user and for what reason?
Does the app allow any unsecured connections?
Does the app create any new files when being installed?
Listing Installed Apps
When targeting apps that are installed on the device, you'll first have to figure out the correct bundle identifier of the
application you want to analyze. You can use frida-ps -Uai to get all apps ( -a ) currently installed ( -i ) on the
connected USB device ( -U ):
$ frida-ps -Uai
PID Name Identifier
---- ------------------- -----------------------------------------
6847 Calendar com.apple.mobilecal
6815 Mail com.apple.mobilemail
- App Store com.apple.AppStore
- Apple Store com.apple.store.Jolly
- Calculator com.apple.calculator
- Camera com.apple.camera
- iGoat-Swift OWASP.iGoat-Swift
359
Setting up a Testing Environment for iOS Apps
It also shows which of them are currently running. Take a note of the "Identifier" (bundle identifier) and the PID if any
as you'll need them afterwards.
You can also directly open passionfruit and after selecting your iOS device you'll get the list of installed apps.
Exploring the App Package
Once you have collected the package name of the application you want to target, you'll want to start gathering
information about it. First, retrieve the IPA as explained in "Basic Testing Operations - Obtaining and Extracting Apps".
You can unzip the IPA using the standard unzip or any other zip utility. Inside you'll find a Payload folder contaning
the so-called Application Bundle (.app). The following is an example in the following output, note that it was truncated
for better readability and overview:
$ ls -1 Payload/iGoat-Swift.app
rutger.html
mansi.html
splash.html
about.html
LICENSE.txt
Sentinel.txt
README.txt
URLSchemeAttackExerciseVC.nib
CutAndPasteExerciseVC.nib
RandomKeyGenerationExerciseVC.nib
KeychainExerciseVC.nib
CoreData.momd
archived-expanded-entitlements.xcent
SVProgressHUD.bundle
Base.lproj
Assets.car
PkgInfo
_CodeSignature
PI:EMAIL
Frameworks
embedded.mobileprovision
Credentials.plist
Assets.plist
Info.plist
iGoat-Swift
The most relevant items are:
Info.plist contains configuration information for the application, such as its bundle ID, version number, and
display name.
360
Setting up a Testing Environment for iOS Apps
_CodeSignature/ contains a plist file with a signature over all files in the bundle.
Frameworks/ contains the app native libraries as .dylib or .framework files.
PlugIns/ may contain app extensions as .appex files (not present in the example).
iGoat-Swift is the app binary containing the appâ€™s code. Its name is the same as the bundle's name minus the
.app extension.
Various resources such as images/icons, *.nib files (storing the user interfaces of iOS app), localized content
( .lproj ), text files, audio files, etc.
The Info.plist File
The information property list or Info.plist (named by convention) is the main source of information for an iOS app. It
consists of a structured file containing key-value pairs describing essential configuration information about the app.
Actually, all bundled executables (app extensions, frameworks and apps) are expected to have an Info.plist file.
You can find all possible keys in the Apple Developer Documentation.
The file might be formatted in XML or binary (bplist). You can convert it to XML format with one simple command:
On macOS with plutil , which is a tool that comes natively with macOS 10.2 and above versions (no official
online documentation is currently available):
$ plutil -convert xml1 Info.plist
On Linux:
$ apt install libplist-utils
$ plistutil -i Info.plist -o Info_xml.plist
Here's a non-exhaustive list of some info and the corresponding keywords that you can easily search for in the
Info.plist file by just inspecting the file or by using grep -i  Info.plist :
App permissions Purpose Strings: UsageDescription (see "iOS Platform APIs")
Custom URL schemes: CFBundleURLTypes (see "iOS Platform APIs")
Exported/imported custom document types: UTExportedTypeDeclarations / UTImportedTypeDeclarations (see "iOS
Platform APIs")
App Transport Security (ATS) configuration: NSAppTransportSecurity (see "iOS Network APIs")
Please refer to the mentioned chapters to learn more about how to test each of these points.
App Binary
iOS app binaries are fat binaries (they can be deployed on all devices 32- and 64-bit). In contrast to Android, where
you can actually decompile the app binary to Java code, the iOS app binaries can only be disassembled.
Refer to the chapter "Reverse Engineering and Tampering on iOS" for more details.
Native Libraries
iOS native libraries are known as Frameworks.
You can easily visualize them from Passionfruit by clicking on "Modules":
361
Setting up a Testing Environment for iOS Apps
And get a more detailed view including their imports/exports:
They are available in the Frameworks folder in the IPA, you can also inspect them from the terminal:
$ ls -1 Frameworks/
Realm.framework
libswiftCore.dylib
libswiftCoreData.dylib
libswiftCoreFoundation.dylib
or from the device with objection (as well as per SSH of course):
OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls
NSFileType Perms NSFileProtection ... Name
------------ ------- ------------------ ... ----------------------------
Directory 493 None ... Realm.framework
Regular 420 None ... libswiftCore.dylib
Regular 420 None ... libswiftCoreData.dylib
Regular 420 None ... libswiftCoreFoundation.dylib
...
362
Setting up a Testing Environment for iOS Apps
Please note that this might not be the complete list of native code elements being used by the app as some can be
part of the source code, meaning that they'll be compiled in the app binary and therefore cannot be found as
standalone libraries or Frameworks in the Frameworks folder.
For now this is all information you can get about the Frameworks unless you start reverse engineering them. Refer to
the chapter "Tampering and Reverse Engineering on iOS" for more information about how to reverse engineer
Frameworks.
Other App Resources
It is normally worth taking a look at the rest of the resources and files that you may find in the Application Bundle
(.app) inside the IPA as some times they contain additional goodies like encrypted databases, certificates, etc.
Accessing App Data Directories
Once you have installed the app, there is further information to explore. Let's go through a short overview of the app
folder structure on iOS apps to understand which data is stored where. The following illustration represents the
application folder structure:
363
Setting up a Testing Environment for iOS Apps
On iOS, system applications can be found in the /Applications directory while user-installed apps are available
under /private/var/containers/ . However, finding the right folder just by navigating the file system is not a trivial task
as every app gets a random 128-bit UUID (Universal Unique Identifier) assigned for its directory names.
In order to easily obtain the installation directory information for user-installed apps you can follow the following
methods:
Connect to the terminal on the device and run the command ipainstaller (IPA Installer Console) as follows:
iPhone:~ root# ipainstaller -l
...
OWASP.iGoat-Swift
iPhone:~ root# ipainstaller -i OWASP.iGoat-Swift
...
Bundle: /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67
Application: /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app
Data: /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693
Using objection's command env will also show you all the directory information of the app. Connecting to the
application with objection is described in the section "Recommended Tools - Objection".
OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # env
Name Path
----------------- -------------------------------------------------------------------------------------------
BundlePath /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app
CachesDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches
DocumentDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents
LibraryDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library
As you can see, apps have two main locations:
The Bundle directory ( /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/ ).
The Data directory ( /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/ ).
364
Setting up a Testing Environment for iOS Apps
These folders contain information that must be examined closely during application security assessments (for
example when analyzing the stored data for sensitive data).
Bundle directory:
AppName.app
This is the Application Bundle as seen before in the IPA, it contains essential application data, static content
as well as the application's compiled binary.
This directory is visible to users, but users can't write to it.
Content in this directory is not backed up.
The contents of this folder are used to validate the code signature.
Data directory:
Documents/
Contains all the user-generated data. The application end user initiates the creation of this data.
Visible to users and users can write to it.
Content in this directory is backed up.
The app can disable paths by setting NSURLIsExcludedFromBackupKey .
Library/
Contains all files that aren't user-specific, such as caches, preferences, cookies, and property list (plist)
configuration files.
iOS apps usually use the Application Support and Caches subdirectories, but the app can create custom
subdirectories.
Library/Caches/
Contains semi-persistent cached files.
Invisible to users and users can't write to it.
Content in this directory is not backed up.
The OS may delete this directory's files automatically when the app is not running and storage space is
running low.
Library/Application Support/
Contains persistent files necessary for running the app.
Invisible to users and users can't write to it.
Content in this directory is backed up.
The app can disable paths by setting NSURLIsExcludedFromBackupKey .
Library/Preferences/
Used for storing properties that can persist even after an application is restarted.
Information is saved, unencrypted, inside the application sandbox in a plist file called [BUNDLE_ID].plist.
All the key/value pairs stored using NSUserDefaults can be found in this file.
tmp/
Use this directory to write temporary files that do not need to persist between app launches.
Contains non-persistent cached files.
Invisible to users.
Content in this directory is not backed up.
The OS may delete this directory's files automatically when the app is not running and storage space is
running low.
Let's take a closer look at iGoat-Swift's Application Bundle (.app) directory inside the Bundle directory
( /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app ):
OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls
NSFileType Perms NSFileProtection ... Name
------------ ------- ------------------ ... --------------------------------------
Regular 420 None ... rutger.html
365
Setting up a Testing Environment for iOS Apps
Regular 420 None ... mansi.html
Regular 420 None ... splash.html
Regular 420 None ... about.html
Regular 420 None ... LICENSE.txt
Regular 420 None ... Sentinel.txt
Regular 420 None ... README.txt
Directory 493 None ... URLSchemeAttackExerciseVC.nib
Directory 493 None ... CutAndPasteExerciseVC.nib
Directory 493 None ... RandomKeyGenerationExerciseVC.nib
Directory 493 None ... KeychainExerciseVC.nib
Directory 493 None ... CoreData.momd
Regular 420 None ... archived-expanded-entitlements.xcent
Directory 493 None ... SVProgressHUD.bundle
Directory 493 None ... Base.lproj
Regular 420 None ... Assets.car
Regular 420 None ... PkgInfo
Directory 493 None ... _CodeSignature
Regular 420 None ... PI:EMAIL
Directory 493 None ... Frameworks
Regular 420 None ... embedded.mobileprovision
Regular 420 None ... Credentials.plist
Regular 420 None ... Assets.plist
Regular 420 None ... Info.plist
Regular 493 None ... iGoat-Swift
You can also visualize the Bundle directory from Passionfruit by clicking on "Files" -> "App Bundle":
Including the Info.plist file:
366
Setting up a Testing Environment for iOS Apps
As well as the Data directory in "Files" -> "Data":
Refer to the "Testing Data Storage" chapter for more information and best practices on securely storing sensitive data.
Monitoring System Logs
Many apps log informative (and potentially sensitive) messages to the console log. The log also contains crash
reports and other useful information. You can collect console logs through the Xcode "Devices" window as follows:
1. Launch Xcode.
2. Connect your device to your host computer.