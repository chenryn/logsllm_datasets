### Installing and Deploying iOS Applications

#### Using `ios-deploy` for Installation
1. **Install `ios-deploy`**:
   ```sh
   $ brew install ios-deploy
   ```

2. **Unzip the IPA File**:
   Navigate to the directory containing the IPA file you want to install and unzip it.
   ```sh
   $ unzip Name.ipa
   ```

3. **Deploy the Application**:
   Use `ios-deploy` to install the application on your iOS device.
   ```sh
   $ ios-deploy --bundle 'Payload/Name.app' -W -d -v
   ```

4. **Start the Application in Debug Mode**:
   To start the application in debug mode, add the `-m` flag.
   ```sh
   $ ios-deploy --bundle 'Payload/Name.app' -W -d -v -m
   ```

#### Using Xcode for Installation
1. **Launch Xcode**.
2. **Select "Window/Devices and Simulators"**.
3. **Select the Connected iOS Device** and click on the "+" sign in "Installed Apps".

### Allowing Application Installation on Non-iPad Devices
If you need to install an iPad-specific application on an iPhone or iPod touch, you can modify the `Info.plist` file.

1. **Change the `UIDeviceFamily` Value**:
   Set the `UIDeviceFamily` value to `1` in the `Info.plist` file.
   ```xml
   <key>UIDeviceFamily</key>
   <array>
       <integer>1</integer>
   </array>
   ```

2. **Re-sign the IPA**:
   After modifying the `Info.plist`, re-sign the IPA to ensure it can be installed on the device.

   **Note**: This method may not work if the application requires capabilities specific to modern iPads that are not available on older iPhone or iPod touch devices.

### Information Gathering
Information gathering is a crucial step in app analysis. It involves inspecting the app package and accessing app data on the device.

#### Listing Installed Apps
To list all installed apps on a connected USB device, use the following command:
```sh
$ frida-ps -Uai
```
This will display the PID, name, and bundle identifier of each app. Note down the bundle identifier and PID for further analysis.

Alternatively, you can use Passionfruit to get the list of installed apps by selecting your iOS device.

#### Exploring the App Package
1. **Retrieve the IPA**:
   Follow the steps in "Basic Testing Operations - Obtaining and Extracting Apps" to obtain the IPA.

2. **Unzip the IPA**:
   ```sh
   $ unzip Name.ipa
   ```

3. **Inspect the Payload Folder**:
   The `Payload` folder contains the Application Bundle (`.app`). For example:
   ```sh
   $ ls -1 Payload/iGoat-Swift.app
   ```
   Key items include:
   - `Info.plist`: Contains configuration information such as bundle ID, version number, and display name.
   - `_CodeSignature/`: Contains a plist file with a signature over all files in the bundle.
   - `Frameworks/`: Contains native libraries as `.dylib` or `.framework` files.
   - `iGoat-Swift`: The app binary containing the appâ€™s code.

#### The `Info.plist` File
The `Info.plist` file is a structured file containing key-value pairs describing essential configuration information about the app.

- **Convert to XML Format**:
  On macOS:
  ```sh
  $ plutil -convert xml1 Info.plist
  ```
  On Linux:
  ```sh
  $ apt install libplist-utils
  $ plistutil -i Info.plist -o Info_xml.plist
  ```

- **Common Keys**:
  - **App Permissions**: `UsageDescription`
  - **Custom URL Schemes**: `CFBundleURLTypes`
  - **Exported/Imported Custom Document Types**: `UTExportedTypeDeclarations`, `UTImportedTypeDeclarations`
  - **App Transport Security (ATS) Configuration**: `NSAppTransportSecurity`

#### App Binary and Native Libraries
- **iOS App Binaries**:
  iOS app binaries are fat binaries and can only be disassembled, unlike Android apps which can be decompiled to Java code.

- **Native Libraries (Frameworks)**:
  - **Visualize Frameworks**:
    Use Passionfruit to visualize frameworks by clicking on "Modules".
  - **List Frameworks**:
    ```sh
    $ ls -1 Frameworks/
    ```
  - **Inspect on Device**:
    Use objection or SSH to list frameworks on the device.
    ```sh
    OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls
    ```

#### Other App Resources
- **Application Bundle (.app)**:
  Contains various resources such as images, icons, `.nib` files, localized content, text files, audio files, etc.

### Accessing App Data Directories
After installing the app, you can explore its data directories.

#### Directory Structure
- **System Applications**:
  Located in `/Applications`.

- **User-Installed Apps**:
  Located in `/private/var/containers/`. Each app has a unique 128-bit UUID for its directory names.

#### Methods to Obtain Directory Information
- **Using `ipainstaller`**:
  ```sh
  iPhone:~ root# ipainstaller -l
  iPhone:~ root# ipainstaller -i OWASP.iGoat-Swift
  ```

- **Using Objection**:
  ```sh
  OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # env
  ```

#### Main Locations
- **Bundle Directory**:
  - Path: `/var/containers/Bundle/Application/UUID/`
  - Contains: Essential application data, static content, and the application's compiled binary.
  - Not writable by users.
  - Not backed up.

- **Data Directory**:
  - Path: `/var/mobile/Containers/Data/Application/UUID/`
  - Contains: User-generated data, caches, preferences, and other files.
  - Subdirectories: `Documents/`, `Library/`, `tmp/`.

#### Example Directory Contents
- **Bundle Directory**:
  ```sh
  OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls
  ```

- **Data Directory**:
  Use Passionfruit to visualize the Data directory by navigating to "Files" -> "Data".

### Monitoring System Logs
Many apps log informative messages to the console log, which can be useful for debugging and security analysis.

1. **Launch Xcode**.
2. **Connect Your Device** to your host computer.
3. **View Console Logs**:
   Open the "Devices" window in Xcode to view and collect console logs.

For more detailed information and best practices, refer to the "Testing Data Storage" chapter.