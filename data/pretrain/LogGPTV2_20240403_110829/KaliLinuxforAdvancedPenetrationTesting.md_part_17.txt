Exploiting Wireless Communications
4. If you reconfirm with ifconfig, you will see that there is now a monitoring
or mon0 address in use. Now, use airodump to confirm the available wireless
networks, as given in the following command:
root@kali:~# airodump-ng mon0
As you can see, the first network's ESSID is identified only as . No other
name or designation is used. The length of the hidden ESSID is identified as being
composed of nine characters; however, this value may not be correct because the ESSID
is hidden. The true ESSID length may actually be shorter or longer than nine characters.
What is important is that there may be clients attached to this particular network.
If clients are present, we will deauthenticate the client, forcing them to send the
ESSID when they reconnect to the access point.
Rerun airodump, and filter out everything but the target access point. In this
particular case, we will focus on collecting data from the hidden network on
channel six using the following command:
root@kali:~# airodump-ng -c 6 mon0
Executing the command removes the output from the multiple wireless sources, and
allows the attacker to focus on the target ESSID, as shown in the following screenshot:
The data that we get when the airodump command is executed indicates that there
is one station (00:0E:2E:CF:8C:7C) connected to the BSSID (00:18:39:D5:5D:61)
which is in turn associated with the hidden ESSID.
[ 210 ]
Chapter 8
To capture the ESSID as it is being transmitted, we have to create a condition where
we know it will be sent—during the initial stage of the connection between a client
and the access point.
Therefore, we will launch a deauthentication attack against both the client and the
access point by sending a stream of packets that breaks the connection between them
and forces them to reauthenticate.
To launch the attack, open a new command shell and enter the command as shown
in the following screenshot (0 indicates that we are launching a deauthentication
attack, 10 indicates that we will send 10 deauthentication packets, -a is the target
access point, and c is the client's MAC address):
After all the deauthentication packets have been sent, return to the original window
that monitors the network connection on channel six, as shown in the following
screenshot. You will now see the ESSID in the clear.
Knowing the ESSID helps an attacker to confirm that they are focused on the correct
network (because most ESSIDs are based on the corporate identity) and facilitates the
logon process.
Bypassing the MAC address
authentication
The Media Access Control (MAC) address uniquely identifies each node in a
network. It takes the form of six pairs of hexadecimal digits (0 to 9 and the letters
A to F) that are separated by colons or dashes and usually appears like this:
00:50:56:C0:00:01.
[ 211 ]
Exploiting Wireless Communications
The MAC address is usually associated with a network adaptor or a device with
networking capability; for this reason, it's frequently called the physical address.
The first three pairs of digits in the MAC address are called the Organizational
Unique Identifier, and they serve to identify the company that manufactured or
sold the device. The last three pairs of digits are specific to the device and can be
considered to be a serial number.
Because a MAC address is unique, it can be used to associate a user to a particular
network, especially a wireless network. This has two significant implications—it can
be used to identify a hacker or a legitimate network tester who has tried to access a
network, and it can be used as a means of authenticating individuals and granting
them access to a network.
During penetration testing, the tester may prefer to appear anonymous to a network.
One way to support this anonymous profile is to change the MAC address of the
attacking system.
This can be done manually using the ifconfig command. To determine the existing
MAC address, run the following from a command shell:
root@kali:~# ifconfig wlan0 down
root@kali:~# ifconfig wlan0 | grep HW
To manually change the IP address, use the following commands:
root@kali:~# ifconfig wlan0 hw ether 38:33:15:xx:xx:xx
root@kali:~# ifconfig wlan0 up
Substitute different hexadecimal pairs for the "xx" expressions. This command will
allow us to change the attacking system's MAC address to one that is used is accepted
by the victim network. The attacker must ensure that the MAC address is not already
in use on the network, or the repeated MAC address may trigger an alarm if the
network is monitored.
The wireless interface must be brought down before
changing the MAC address.
Kali also permits the use of an automated tool, macchanger. To change the attacker's
MAC address to a MAC address of a product produced by the same vendor, use the
following macchanger command from a terminal window:
root@kali:~# macchanger wlan0 -e
[ 212 ]
Chapter 8
To change the existing MAC address to a completely random MAC address, use the
following command:
root@kali:~# macchanger wlan0 -r
Some attackers use automated scripts to change their MAC addresses on a frequent
basis during testing to anonymize their activities.
Many organizations, particularly large academic groups such as colleges and
universities, use MAC address filtering to control who can access their wireless
network resources. MAC address filtering uses the unique MAC address on the
network card to control access to network resources; in a typical configuration,
the organization maintains a whitelist of the MAC addresses that are permitted
to access the network. If an incoming MAC address is not on the approved access
list, it is restricted from connecting to the network.
Unfortunately, MAC address information is transmitted in the clear. An attacker
can use airodump to collect a list of accepted MAC addresses and then manually
change their MAC address to one of the addresses that is accepted by the target
network. Therefore, this type of filtering provides almost no real protection to a
wireless network.
The next level of wireless network protection is provided using encryption.
Compromising a WEP encryption
Wireless Equivalent Privacy (WEP) originated in 1999 as a means of providing
a degree of confidentiality to 802.11 wireless networks that was comparable to
what was available on a wired network. Multiple flaws were quickly discovered
in its implementation of cryptography, and by 2004 it was superseded by the WiFi
Protected Access (WPA) protocol.
WEP remains in use today, particularly in the older networks
that can't support the resource requirements of the new wireless
routers. In a recent wireless survey of a major metropolitan
centre, almost 25 percent of the encrypted wireless networks
continued to use WEP. Many of these networks were associated
with financial companies.
[ 213 ]
Exploiting Wireless Communications
One of primary flaws of WEP was first identified in the reuse of the initialization
vector (IV). WEP relies on the RC4 encryption algorithm, which is a stream
cipher—the same encryption key cannot be repeated. IVs were introduced to
guard against key reuse by introducing an element of randomness into the
encrypted data. Unfortunately, the 24-bit IV is too short to prevent repetition;
furthermore, there is a 50 percent probability that the same IV will repeat after
only 5,000 packets have been transmitted.
An attacker can eavesdrop or intercept WEP-encrypted traffic. Depending on the
number of intercepted packets available for inspection, key recovery can occur quickly.
In practice, most WEP keys can be recovered, or cracked, within three minutes.
To make WEP cracking work, you will also need to know the following information
about the target:
• The name of the wireless network or ESSID
• The MAC address of the access point, BSSID
• The wireless channel used
• A MAC address of the wireless client
The most common attack against WEP can be done by performing the
following steps:
1. First, identify the available wireless network interfaces using the
following command:
root@kali:~# airmon-ng
2. Stop the interface to change the MAC address to the address that is being
used by an existing client already associated with the target network.
You can also use macchanger for this step. When the MAC address has
been changed, restart airmon-ng. Use the following commands to perform
these steps:
root@kali:~# airmon-ng stop
root@kali:~# ifconfig wlan0 down
root@kali:~# ifconfig wlan0 hw ether (mac address)
root@kali:~# airmon-ng start wlan0
Using a known and accepted MAC address simplifies the attack. However,
this is not always the case. This attack assumes that you do not know the
MAC address. Instead, we will make a fake association with the network.
[ 214 ]
Chapter 8
3. Use the following airodump command to locate the target wireless network:
root@kali:~# airodump-ng wlan0
When airodump locates the target, press Ctrl + C to stop the search. Copy the
MAC address in the BSSID, and note the channel. When airodump locates the
target, press Ctrl + C to stop the search. Copy the MAC address in the BSSID,
and note the channel; in the example shown in the following screenshot, the
target network dd_wep is operating on channel six at a speed of 11 MB.
4. Start airodump-ng to sniff wireless traffic and collect IVs using the following
command, where --bssid allows us to select the target's BSSID, -c indicates
the channel, and -w allows us to write the name of the output file (wep_out):
root@kali:~# airodump-ng --bssid 00:06:25:9A:A9:C6 -c 6 -w
wep_out wlan0
5. Now we have to increase the number of transmitted IV packets. Open a
second terminal window (do not close the first) and enter the following
command to fake an authentication to the targeted wireless access point:
root@kali:~# aireplay-ng -1 0 -a 00:06:25:9A:A9:C6 -h
00:11:22:33:44:55 -e dd_wep wlan0
Here,-1 signals a fake authentication and 0 is the reassociation timing in
seconds (a setting of 0 might alert the defender, so an attacker might set it to
30 or even higher).
6. With the fake authentication in place, we will generate traffic that appears
to come from a trusted MAC address and route it to the target wireless
access point.
root@kali:~# aireplay-ng -3 -b 00:06:25:9A:A9:C6 -h
00:11:22:33:44:55 wlan0
This attack is known as an ARP injection or ARP replay attack. Normally,
the target access point will rebroadcast the ARP packets and generate a new
IV each time; therefore, this is a quick way to cultivate the necessary IVs.
[ 215 ]
Exploiting Wireless Communications
The execution of the previous command is shown in the
following screenshot:
7. Let's generate some additional packets while the ARP injection continues.
Open another terminal window, and start an interactive packet replay attack
by entering the following command:
root@kali:~# aireplay-ng -2 -p 0841 -c FF:FF:FF:FF:FF:FF
- b (mac address) -h (mac address) wlan0
Here, -2 indicates that we are using an interactive replay attack, -p 0841
sets the Frame Control field of the packet to make it appear as if it is being
sent from a wireless client, -c FF:FF:FF:FF:FF:FF sets the destination
(in this case, the FF notation sends the packet to all the hosts on the network),
-b is the MAC address of the BSSID, and -h is the MAC address of the
packets being transmitted that should match the tester's MAC address.
The execution of the previous command is shown in the
following screenshot:
8. Another technique to make the network appear busy is to open multiple
command shells on the attacking system, and enter the following command
replacing (IP address) with the target's IP address:
root@kali:~# ping -T -L 6500 (IP address)
[ 216 ]
Chapter 8
9. After enough packets have been collected and saved, the following
aircrack-ng command can be used to crack the WEP key, where -a 1
forces the attack mode to be static WEP, -b is the BSSID, and dd_wep.cap is
the capture file containing the captured IVs.
root@kali:~# aircrack-ng -a 1 -b 00:06:25:9A:A9:C6 -n 64
dd_wep.cap
As you can see in the following screenshot, the attack was successful, and the key
was identified. (Although it appears as a hexadecimal number, you can simply enter
it to log onto the WEP network.)
Although this demonstration focused on a 64-bit key, longer keys do not take
significantly more time to crack once you have harvested the IVs from the access point.
The aircrack-ng suite of tools is the "gold standard" and provides the most reliable
and effective way to gain access. However, Kali comes with several other tools that
can assist you in compromising encrypted wireless networks.
One of these is the Fern WiFi Cracker, which is a Python GUI that incorporates
aircrack-ng. It can automatically scan for wireless networks and identify WEP,
WPA, and WPA2 networks. Once the networks are identified, an attacker can take
advantage of several features, including the following:
• WEP cracking using a variety of attacks, including fragmentation, Chop
Chop, Caffe Latte, Hirte, ARP request replay, or WPS attack
• WPA and WPA2 cracking using dictionary or WPS-based attacks
• Automatic saving of the key in a database following a successful crack
• Internal man-in-the-middle engine supports session hijacking
• Brute-force attacks against HTTP, HTTPS, Telnet, and FTP
[ 217 ]
Exploiting Wireless Communications
The interface of Fern is very clean, and the setup directs the user to select the
interface and scan for an access point. It will report the access points for WEP
and WPA/WPA2; from this point onwards, it is just a matter of clicking on the
appropriate button to launch the attack. The initial launch screen for Fern is shown
in the following screenshot:
Although Fern is an excellent tool, most testers do not rely on it exclusively—if there
is a failure to identify a key or gain access to a network, the reason for this failure can
remain hidden behind the GUI, making troubleshooting difficult.
A similar application is the Wifite wireless auditor, which presents a text-based
interface to support testing. It has proven to be very effective during field testing,
and it takes advantage of features that include the following:
• Wifite supports anonymity by changing the attacker's MAC address to a
random MAC address before attacking and then changing it back when all
the attacks are complete
• It sorts targets by signal strength (in dB) to crack the closest access points first
• It automatically deauthenticates clients of hidden networks to reveal
the SSIDs
• It supports multiple attack types
[ 218 ]
Chapter 8
In the example shown in the following screenshot, a single target, dd_wep, was
selected for attack. No other interaction with the application was required; it
completed the full compromise and saved the cracked key to a database by itself.
Although the vulnerability of the deprecated WEP is well known and has been
proven by some basic tools available on Kali, how well does the stronger WPA
encryption protocol stand up to attack?
Attacking WPA and WPA2
WiFi Protected Access (WPA) and WiFi Protected Access 2 (WPA2) are wireless
security protocols that were intended to address the security shortcomings of
WEP. Because the WPA protocols dynamically generate a new key for each packet,
they prevent the statistical analysis that caused WEP to fail. Nevertheless, they are
vulnerable to some attack techniques.
WPA and WPA2 are frequently deployed with a pre-shared key (PSK) to secure
communications between the access point and the wireless clients. The PSK should
be a random passphrase of at least 13 characters in length; if not, it is possible to
determine the PSK using a brute-force attack by comparing the PSK to a known
dictionary. This is the most common attack. (Note that if configured in the Enterprise
mode, which provides authentication using a RADIUS authentication server, WPA is
"unbreakable" from our perspective!)
Brute-force attacks
Unlike WEP, which can be broken using a statistical analysis of a large number of
packets, WPA decryption requires the attacker to create specific packet types that
reveal details, such as the handshake between the access point and the client.
[ 219 ]
Exploiting Wireless Communications
To attack a WPA transmission, the following steps should be performed:
1. Start the wireless adaptor and use the ifconfig command to ensure that the
monitor interface is created.
2. Use airodump-ng –wlan0 to identify the target network.
3. Start capturing traffic between the target access point and the client using the
following command:
root@kali:~# airodump-ng --bssid 28:10:7B:61:20:32 -c 11
--showack -w dd_wpa2 wlan0
Set -c to monitor a specific channel, the --showack flag to ensure that the
client computer acknowledges your request to deauthenticate it from the
wireless access point, and -w to write the output to a file for a dictionary attack
later. A typical output from this attack is shown in the following screenshot:
4. Leave this terminal window open, and open a second terminal window to
launch a deauthentication attack; this will force a user to reauthenticate to
the target access point and re-exchange the WPA key. The deauthentication
attack command is shown as follows:
root@kali:~# aireplay-ng -0 10 –a 28:10:7B:61:20:32
-c 00:1D:60:7D:55:5A wlan0
[ 220 ]
Chapter 8
The execution of the previous command is shown in the following screenshot:
A successful deauthentication attack will show ACKs, which indicate that the
client who was connected to the target access point has acknowledged the
deauthentication command that was just sent.
5. Review the original command shell that was kept open to monitor the
wireless transmission, and ensure that you capture the 4-way handshake.
A successful WPA handshake will be identified in the top-right hand
corner of the console . In the following example, the data indicates the
WPA handshake value is 28:10:7B:61:20:32:
6. Use aircrack to crack the WPA key using a defined wordlist. The filename
defined by the attacker for collecting handshake data will be located in the
root directory, and the -01.cap extension will be appended to it.
In Kali, wordlists are located in the /usr/share/wordlists directory.
Although several wordlists are available, it is recommended that you
download lists that will be more effective in breaking common passwords.
[ 221 ]
Exploiting Wireless Communications
In the previous example, the key was preplaced in the password list. Undertaking a
dictionary attack for a long, complex password can take several hours depending on
the system configuration. The following command uses words as the source wordlist.
root@kali:~# aircrack-ng wpa-01.cap /usr/share/wordlists
The following screenshot shows the results from a successful cracking of the WPA key;
the key to the network gaffer was found to be princessmouse after testing 44 keys.
If you don't have a custom password list at hand or wish to rapidly generate a list,
you can use the crunch application in Kali. The following command instructs crunch
to create a wordlist of words with a minimum length of 5 characters and a maximum
length of 25 characters using the given character set:
root@kali:~# crunch 05 25
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX
YZ0123456789 | aircrack-ng --bssid (MAC address)
-w capture-01.cap
You can also improve the effectiveness of the brute-force attack using GPU-based
password cracking tools (oclHashcat for AMD/ATI graphics cards and cudaHashcat