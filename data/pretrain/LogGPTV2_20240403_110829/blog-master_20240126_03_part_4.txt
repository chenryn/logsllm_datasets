│ id          │ BIGINT      │ YES     │         │         │       │  
│ info        │ VARCHAR     │ YES     │         │         │       │  
│ crt_time    │ TIMESTAMP   │ YES     │         │         │       │  
└─────────────┴─────────────┴─────────┴─────────┴─────────┴───────┘  
D DESCRIBE t2 ;  
┌─────────────┬─────────────┬─────────┬─────────┬─────────┬───────┐  
│ column_name │ column_type │  null   │   key   │ default │ extra │  
│   varchar   │   varchar   │ varchar │ varchar │ varchar │ int32 │  
├─────────────┼─────────────┼─────────┼─────────┼─────────┼───────┤  
│ cid         │ BIGINT      │ YES     │         │         │       │  
│ info        │ VARCHAR     │ YES     │         │         │       │  
│ crt_time    │ TIMESTAMP   │ YES     │         │         │       │  
└─────────────┴─────────────┴─────────┴─────────┴─────────┴───────┘  
D DESCRIBE t3 ;  
┌─────────────┬─────────────┬─────────┬─────────┬─────────┬───────┐  
│ column_name │ column_type │  null   │   key   │ default │ extra │  
│   varchar   │   varchar   │ varchar │ varchar │ varchar │ int32 │  
├─────────────┼─────────────┼─────────┼─────────┼─────────┼───────┤  
│ gid         │ INTEGER     │ YES     │         │         │       │  
│ cid         │ INTEGER     │ YES     │         │         │       │  
│ c1          │ INTEGER     │ YES     │         │         │       │  
│ c2          │ INTEGER     │ YES     │         │         │       │  
│ c3          │ INTEGER     │ YES     │         │         │       │  
│ c4          │ INTEGER     │ YES     │         │         │       │  
│ c5          │ INTEGER     │ YES     │         │         │       │  
└─────────────┴─────────────┴─────────┴─────────┴─────────┴───────┘  
.quit    
```  
编译duckdb_fdw插件  
```  
git clone --depth 1 https://github.com/digoal/duckdb_fdw  
cd duckdb_fdw  
mkdir libduckdb     
cd libduckdb  
wget https://github.com/duckdb/duckdb/releases/download/v0.9.2/libduckdb-src.zip  
sudo apt-get install -y unzip  
unzip libduckdb-src.zip    
unalias cp    
cp -f duckdb.h ../    
cp -f duckdb.hpp ../    
clang++ -c -fPIC -std=c++11 -D_GLIBCXX_USE_CXX11_ABI=0 duckdb.cpp -o duckdb.o     
clang++ -shared -o libduckdb.so *.o     
cp -f libduckdb.so $(pg_config --libdir)     
cp -f libduckdb.so ../   
cd ../     
USE_PGXS=1 make uninstall    
USE_PGXS=1 make clean    
USE_PGXS=1 make distclean    
USE_PGXS=1 make      
USE_PGXS=1 make install    
```  
加载duckdb_fdw插件    
```    
create extension duckdb_fdw;    
```     
创建foreign server  
```      
CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS   
  (database '/home/postgres/db');    
```  
导入foreign table  
```
-- 一次性导入所有duckdb的表到foreign table
IMPORT FOREIGN SCHEMA public FROM SERVER DuckDB_server INTO public;
-- 或 挨个创建foreign table
create foreign table t1 (id int8, info text, crt_time timestamp) 
  server duckdb_server OPTIONS (table 't1');
create foreign table t2 (cid int8, info text, crt_time timestamp) 
  server duckdb_server OPTIONS (table 't2');
create foreign table t3 (gid int, cid int, c1 int, c2 int, c3 int, c4 int, c5 int) 
  server duckdb_server OPTIONS (table 't3');  
postgres=# \det    
     List of foreign tables    
 Schema | Table |    Server    
--------+-------+---------------    
 public | t1    | duckdb_server    
 public | t2    | duckdb_server    
 public | t3    | duckdb_server    
(3 rows)    
```  
为duckdb_fdw安装parquet插件   
```
postgres=# SELECT duckdb_execute('duckdb_server', 'install parquet');
 duckdb_execute 
----------------
(1 row)
postgres=# SELECT duckdb_execute('duckdb_server', 'load parquet');
 duckdb_execute 
----------------
(1 row)
```
查询parquet数据性能  
```  
postgres=# explain verbose select count(distinct gid) from t3;    
                         QUERY PLAN    
-------------------------------------------------------------    
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)    
   Output: (count(DISTINCT gid))    
   SQLite query: SELECT count(DISTINCT "gid") FROM main."t3"    
(3 rows)    
postgres=# \timing    
Timing is on.    
select count(distinct gid) from t3;    
 count    
-------    
   100    
(1 row)    
Time: 13.556 ms    
select count(distinct gid),count(*) from t3;    
 count |  count    
-------+---------    
   100 | 1000000    
(1 row)    
Time: 21.836 ms    
explain verbose select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id;    
                                                            QUERY PLAN    
-----------------------------------------------------------------------------------------------------------------------------------    
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)    
   Output: (count(DISTINCT t3.gid)), (count(*))    
   SQLite query: SELECT count(DISTINCT r1."gid"), count(*) FROM (main."t3" r1 INNER JOIN main."t1" r2 ON (((r1."gid" = r2."id"))))    
(3 rows)    
select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id;    
 count |  count    
-------+---------    
   100 | 1000000    
(1 row)    
Time: 15.536 ms    
select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id join t2 on t3.cid=t2.cid;    
 count |  count    
-------+---------    
   100 | 1000000    
(1 row)    
Time: 18.570 ms    
explain verbose select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.id join t2 on t3.cid=t2.cid;    
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)    
   Output: (count(DISTINCT t3.gid)), (count(*))    
   SQLite query: SELECT count(DISTINCT r1."gid"), count(*) FROM ((main."t3" r1 INNER JOIN main."t1" r2 ON (((r1."gid" = r2."id")))) INNER JOIN main."t2" r4 ON (((r1."cid" = r4."cid"))))    
(3 rows)    
```    
将数据导入PolarDB本地, 做同样的查询看一下时间.    
```    
postgres=# create table lt1 as select * from t1;    
SELECT 100    
postgres=# create table lt2 as select * from t2;    
SELECT 100    
postgres=# create table lt3 as select * from t3;    
SELECT 10000000    
postgres=# \timing    
Timing is on.    
postgres=# select count(distinct gid) from lt3;    
 count    
-------    
   100    
(1 row)    
Time: 1142.800 ms (00:01.143)    
```    
duckdb_fdw+Parquet 比PolarDB本地行存储表快了近100倍.    
更多用法请参考   
- [《DuckDB 对比 PolarDB for PostgreSQL 全文检索功能》](../202306/20230614_01.md)    
- [《PolarDB-PG | PostgreSQL + duckdb_fdw + 阿里云OSS 实现高效低价的海量数据冷热存储分离》](../202303/20230308_01.md)    
- [《PolarDB 开源版通过 duckdb_fdw 支持 parquet 列存数据文件以及高效OLAP》](../202212/20221209_02.md)    
如果遇到问题可以提issue给duckdb_fdw或PolarDB开源项目  
### 7、读写分离工具: pgpool-II
开源项目地址: https://www.pgpool.net/  
pgpool-II 是一款开源的支持读写分离的连接池, 通过pgpool-II, 应用程序访问PolarDB 时, 可以根据SQL的特征自动路由到RW, RO节点, 实现对应用透明的读写分离功能.   
用法举例.  
部署pgpool-II 软件   
```    
cd ~    
wget https://www.pgpool.net/mediawiki/download.php?f=pgpool-II-4.4.5.tar.gz -O pgpool-II-4.4.5.tar.gz    
tar -zxvf pgpool-II-4.4.5.tar.gz    
cd pgpool-II-4.4.5    
./configure --prefix=/usr/local/pgpool4.4.5 --with-openssl    
make -j 4   
sudo make install    
```    
配置动态库和默认路径    
```    
sudo vi /etc/ld.so.conf    
# addd    
/usr/local/pgpool4.4.5/lib    
# 更新动态链接库  
sudo ldconfig    
# 设置shell环境变量初始化文件  
echo "export PATH=/usr/local/pgpool4.4.5/bin:\$PATH" >>  ~/.bashrc   
# 设置当前环境变量  
. ~/.bashrc  
```    
配置pgpool-II    
polardb 3节点配置如下:    
```    
[postgres@1373488a35ab ~]$ psql -p 5432 -c "select pg_is_in_recovery();"    
 pg_is_in_recovery     