intrusion detection model in 1987 that detected intrusions
by monitoring the audit records of a particular system.[26]
For each subject (user), the system kept an audit record of
particular services such as access to the ﬁlesystem, executa-
bles, and system calls. Denning’s model provided a means
380380
of detecting intrusive behavior by examining anomalies in
the audit records for particular single computer systems.
In contrast
to an anomaly detection model, Kumar
described a means of detecting attacks using misuse
detection.[27] Kumar described a model of misuse detec-
tion, which encoded attacks as well deﬁned patterns and
monitors for those speciﬁc patterns. As processing power
increased, further techniques automated intrusion detection
to reduce human intervention. Gosh and Schwartzbard in-
troduced the use of artiﬁcial neural networks in order to de-
tect novel attacks.[28] Their work also combined the con-
cept of using both anomaly and misuse detection models to
create a hybrid system.
Open source developers have created several popular
IDS tools. Roesch created SNORT as a lightweight net-
work intrusion detection tool.[29] The design of SNORT
included a packet decoder, preprocessor, and detection en-
gine. SNORT used the libpcap packet sniffer and logger to
capture and decode packets. Snort provided the capability
to decode and detect intrusive behavior in Ethernet, SLIP,
and raw (PPP) data link-protocol packets.[29] The system
contained a rules based logging and content pattern match-
ing engine to detect a variety of attacks and probes.
Recent works have discussed the necessity for a wire-
less intrusion detection system. Intrusion detection in wire-
less networks proves challenging since wireless IDSs can-
not use the same architecture as a network IDS. Lim et.
al proposed a wireless IDS that detected threats on the
802.11 protocol.[24] Additionally, the system included the
ability for an active response to wireless attackers.[24] In
2004, the US Army awarded a multi-million dollar con-
tract to AirFortress to protect 802.11 networks in use by
the military.[30]
4.2 Wireless and Mobile Threat Modeling
Recent works have classiﬁed the threats posed against
mobile devices. Welch provided an overview and created a
taxonomy of wireless threats.[31] Biermann and Cloette ex-
amined the necessity for prevention and detection of threats
against mobile devices.[32] Finally, Cache and Liu pro-
vided a comprehensive source of several wireless threat
models, attacks, and implementations.[33]
Several works examined particular Bluetooth attacks and
demonstrated the necessity for a Bluetooth intrusion de-
tection system. Most notably,
the Triﬁnite Group has
implemented and released details of several Bluetooth
attacks.[34, 19, 20] Additionally, A. Wool provided a means
of compromising the encryption scheme of Bluetooth.[15,
16] Haataja provided a comprehensive model for exam-
ining Bluetooth attacks.[35] Finally, the National Institute
of Standards and Technology (NIST) documented several
ﬂaws in the security design of the Bluetooth protocol.[18]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
Two recent works have addressed the modeling and de-
tection of speciﬁc Bluetooth attacks. Yan et al. developed a
model for the growth of Bluetooth worms that relied upon
Markov Chains.[36] Buennemeyer et al. provided a means
of detecting Bluetooth battery depletion attacks using an
anomaly detection system that measured the power levels
of a particular Bluetooth device.[23]
4.3 Current Related Tools
To capture and decode Bluetooth trafﬁc, Spill and Bit-
tau have developed a cost-effective means of recording
Bluetooth trafﬁc, utilizing the Universal Software Deﬁned
Radio.[37] Further, they have also provided the means to
write ﬁrmware for Bluetooth dongles that perform custom
snifﬁng. A custom ﬁrmware solution would prove valu-
able in the further development of a Bluetooth IDS. Haataja
demonstrated the ability for the Lecroy Bluetooth proto-
col analyzer to record unencrypted and encrypted Bluetooth
trafﬁc.[35]
Combs developed Wireshark (formerly Ethereal) as a
utility to capture and analyze packets.[38] Over 500 au-
thors currently maintain the utility and it allows for the dis-
section and decoding of hundreds of protocols, including
the 802.11 wireless protocols. It also uses the same libp-
cap decoding library as SNORT. The current maintainers
of the tool have begun working on integrating and translat-
ing Bluetooth Host Controller Interface (HCI) packets into
a libpcap format.
Tools to assess the Bluetooth security of an organization
exist; an example is AirDefense BlueWatch.[39] This tool
assesses the overall Bluetooth security; however, it provides
no means of intrusion detection or active response. The sys-
tem proposed in this paper does both, and can be integrated
with existing tools to increase the overall security of an or-
ganization. The next section describes the design of the im-
plemented Bluetooth IDS.
5 Design
5.1 Overview
Figure 1 shows the design of the system. The imple-
mented network IDS examines decoded Bluetooth trafﬁc to
detect malicious behavior through the use of pattern match-
ing, and a set of plug-in modules. Additionally, the IDS
provides alert, visualization, and response systems based on
the output of the IDS engine. Each of these key components
is described in detail below. Following that is a discussion
of the reconnaissance, denial of service, and information
theft attack signatures needed to detect particular Bluetooth
attacks.
Figure 1. Design of Bluetooth Intrusion De-
tection System
5.2 Packet Decoding and Preprocessing
The packet decoder captures Bluetooth packets and pre-
pares the packets for the preprocessor prior to usage by the
IDS engine. The packet decoder listens to either a speciﬁc
frequency, or a speciﬁc piconet, in order to capture pack-
ets. By synchronizing with the master device on a piconet,
the decoder follows the hopping sequence of a particular
piconet and exports decoded packets to the preprocessor.
Figure 2. Packet Reassembly by the Prepro-
cessor
The preprocessor reassembles fragmented packets, and
modiﬁes the data packets to prevent signature evasion tech-
niques. Figure 2 depicts the reassembly of two packet frag-
ments back into one logical packet. In addition to reassem-
bly, the preprocessor discards several of the baseband and
radio layer packets such as the Null, Polling, and Device
ID packets. These packets ensure the radio and baseband
layer are established but provide no helpful information to
identify known attacks. By reducing these packets, the pre-
processor decreases the workload of the IDS engine.
Also, the preprocessor handles reassembly and stateful
inspection of streams of Bluetooth trafﬁc, similar to the
Stream4 preprocessor employed by SNORT.[29] By assem-
bling packets into a particular Bluetooth trafﬁc stream, the
IDS engine can detect more complex attacks through the
use of plug-in modules. The preprocessor uses a sliding
window to manage the length of the stream exported. The
system currently uses a ﬁxed-length sliding window whose
381381
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
Packet DecoderPreprocessorIDS EngineAlert InterfaceResponse SystemBluetoothTrafﬁcVisualization Interfacelength is determined by the time required to detect most at-
tacks.
5.3
IDS Engine
The method includes a pattern matching engine similar
to that of conventional IDS systems, such as SNORT. It has
the capability to do pattern matching as well as a set of plug-
in modules to analyze and detect more-complex Bluetooth
attacks.[29] A grammar has been deﬁned for specifying the
rules checked by the IDS Engine.
5.3.1 Pattern Matching
Figure 3. Rule to Detect Malicious L2CAP
Header Overﬂow Attack
The system uses a pattern matching scheme to match ma-
licious packets against a set of user-conﬁgurable rules. By
matching signatures of known patterns of malicious trafﬁc,
the system efﬁciently detects attacks. Signatures can match
a packet against a particular protocol layer, device, and spe-
ciﬁc ﬁelds of each packet.
For example, a signature can match the Signal Length
ﬁeld of an L2CAP layer packet. Figure 3 demonstrates a
rule to identify a Bluetooth Header Overﬂow Attack. In this
attack, a L2CAP layer packet originating from a Bluetooth
master device has a Signal Length of 1. This Signal Length
value causes some Bluetooth devices to reference an invalid
memory address.
Although signatures can only detect known attacks, the
user can update signatures when new types of Bluetooth
attacks are discovered. The IDS provides an interface for
writing new rules to detect Bluetooth attacks. Further, the
rules allow the user to alert, log, or perform actions in re-
sponse to a matched signature.
5.3.2 Plug-in Modules
The IDS uses plug-in modules to detect more-complex at-
tacks that require a stateful inspection of the stream of Blue-
tooth trafﬁc. Due to the fact that data is organized into a
382382
stream by the preprocessor, the plug-in modules can ﬁnd at-
tacks that use multiple Bluetooth packets. Plug-in modules
therefore extend the system.
For example, the user can write a plug-in module to de-
tect if any unauthenticated connections to a particular ser-
vice or channel occurred by examining the stream for the
appropriate packets. The user can write a plug-in module
to monitor the count of a particular packet type in a stream
of trafﬁc. By aggregating the functions of several modules
that have similar characteristics, the system increases the
efﬁciency of the IDS engine.
5.4 Visualization Interface
The visualization interface of the system provides the ad-
ministrator with the ability to observe events, trafﬁc, and
alerts in a convenient way. Visualization helps an admin-
istrator to distinguish between malicious activity and be-
nign trafﬁc. Within the ﬁeld of intrusion detection, previous
works have shown the beneﬁt of utilizing visualization to
detect attacks. [40, 41] Since the system detects only known
attacks, visualization is useful in spotting anomalous, po-
tentially malicious behavior. The implemented graphical
interface provides details about the deviation between pro-
tocol layers, the speciﬁc operation codes for the LMP and
L2CAP layers, and the activity on the RFCOMM and PSM
channels. Figure 4 provides an example from the graphical
user interface (GUI) of the implemented system.
Figure 4 depicts the trafﬁc deviation between protocol
layers during an RFCOMM scan attack on a Bluetooth tar-
get. The repeated pattern of trafﬁc may give an administra-
tor cause for inspection, by looking at the speciﬁc distribu-
tion of signaling codes on the L2CAP layer. By examining
the speciﬁc L2CAP signaling codes, the administrator can
detect an attacker attempting to repeatedly connect to RF-
COMM channels.
Figure 4 additionally shows the RFCOMM channel ac-
tivity of Bluetooth trafﬁc captured during that period. In the
previous 60 seconds, the attacker made 9 RFCOMM con-
nection attempts, which is evidence of an active RFCOMM
scan of a potential Bluetooth target.
5.5 Signature Development
Intrusion detection signatures for exploits can range
from simple means, such as checking the header value of
a ﬁeld, to a highly complex stateful inspection or proto-
col analysis. Many Bluetooth attacks or exploits include
purposely modiﬁed headers that violate the Bluetooth Core
Speciﬁcations. Bluetooth protocol stack implementers have
often assumed that the speciﬁcations would not be violated;
hence the stacks are vulnerable to attack. The IDS signature
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
alert L2CAP M (SigLen=1; msg="Nokia HeaderOverﬂow Attack";)actionlayerdbitruledisrupt, and deny detected attacks.
5.6.1 Reconnaissance Response
For responding to a reconnaissance attack,
this paper
presents a method of deploying decoys or honeypots. By
standing up honeypot targets, the system distracts attack-
ers from more valuable machines on the network.[42] For
a wireless IDS, the system should employ honeypots ran-
domly in different locations so as not to give an attacker
obvious knowledge of the boundaries of the wireless intru-
sion detection system. This work implements the response
system on a separate machine; a deployed system would use
multiple separate response nodes.
Upon detection of reconnaissance probes, the system re-
sponds by creating an array of fake devices to overwhelm
and distract the attacker. The system creates false targets
by randomly generating a name and physical address and
ﬂashing the information on a USB Bluetooth dongle. Once
the device contains the new address, it responds to inquiries
and name requests before burning a new randomly gener-
ated name and physical address onto the chipset. By uti-
lizing a limited set of USB dongles, a low-cost system can
create a mirage of many active Bluetooth devices to distract
the attacker from legitimate Bluetooth devices.
5.6.2 Denial of Service Response
Denial of service attacks are responded to by terminating
the connection between the attacker and target. A. Wool
originally proposed the idea of using a false message to ter-
minate legitimate Bluetooth trafﬁc.[15] However, this work
uses a similarly crafted message to terminate an attacker’s
trafﬁc. Upon discovery of a denial of service attack, the IDS
forges a message to disrupt communication between the at-
tacker and the target. By sending the attacker an L2CAP
CMD REJ message with a forged address of the target, the
IDS disrupts ongoing denial of service by the attacker.
5.6.3
Information Theft Response
Lastly, the system can respond actively to an information
theft attack. Upon detection of such an attack, the response
node stands up a false target device with the same physical
address as the vulnerable device. Doing so provides a phony
target device with services similar to the vulnerable device.
Thus, the IDS slows down the the attacker who is attempting
to connect to vulnerable targets, providing time for attacker
identiﬁcation and defensive measures.
Figure 4. Visualization of RFCOMM Scan At-
tack and Bluetooth Channel Activity
can look at speciﬁc header ﬁelds or combinations of values
to detect such attacks.
For more complex stateful inspections, the signatures use
characteristics of an attack that are not easily evaded by an
attacker. Unusual (legitimate, but suspicious) packets are
best used in combination with other values to detect an at-
tack. For an example, if a particular pattern of legitimate
Bluetooth trafﬁc causes a known failure on a particular de-
vice, then the IDS signature must take into account the de-
vice type of the intended target. Since Bluetooth devices
respond to requests for their supported feature set, the IDS
has this information at its disposal. An example is the Helo-
Moto attack, which plants a particular ﬁle on affected Mo-
torola devices. By verifying that the intended target is a
phone with certain feature characteristics, the signature can
reduce but not necessarily eliminate false positives.
5.6 Response System
Once the system detects an attack signature, it has the
capability to respond. This section examines different re-
sponses for each attack classiﬁcation, including reconnais-
sance, denial of service, and information theft attacks. Di-
recting responses requires careful consideration to avoid po-
tential reﬂection attacks. This work does not address the se-
curity of responses but rather suggests methods to prevent,
383383
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
problems and limitations faced when constructing the ﬁrst
network-based Bluetooth intrusion detection system.
6.2 Bluetooth IDS Testbed
Figure 6. Testbed Used for Bluetooth Intru-
sion Detection
The testbed for this work consisted of a defense node, a
response node, an attack node, and vulnerable target nodes.
Figure 6 shows the testbed. The defense node was respon-
sible for recording trafﬁc, and identifying attacks initiated
by the attack node on the target nodes. The response node
attempted to disrupt, deny, and prevent Bluetooth attacks,
as directed by the defense node.
6.2.1 Attack Node
The attack node consisted of a notebook computer run-
ning the BackTrack2 live Linux distribution from remote-
exploit.org. Built on the Linux 2.6.20 kernel, the distribu-
tion includes more than 300 different security tools. Hack-
ers employ BackTrack2 in order to penetrate computer se-
curity. The latest release includes existing support for 11
unique Bluetooth attacks. In addition, the testbed software
included the Bluediving (next-generation Bluetooth secu-
rity tool) available from bluediving.sourceforge.net. The
Bluediving tool includes applications capable of spoof-
ing Bluetooth addresses, generating L2CAP packets, and
launching several of the attacks outlined previously. Fur-
thermore, the attack software included the tools available
from triﬁnite.org, an organization that hosts a large repos-
itory of Bluetooth attack tools. To augment the existing
tools, the authors wrote several small programs to test the
timing and frequency of differing reconnaissance probes for
discoverable and non-discoverable devices. In addition to
the Bluetooth radio included with the notebook computer,
the attack node included ﬁve Bluetooth USB dongles and a
modiﬁed Linksys USB110 Bluetooth dongle running in par-
allel to increase the probability of successful attacks. The
attacks targeted all layers of the Bluetooth protocol stack.
Figure 5. Discrete Finite Automata and Corre-
sponding Regular Expression for HIDAttack
5.7 Deterministic Finite Automata and