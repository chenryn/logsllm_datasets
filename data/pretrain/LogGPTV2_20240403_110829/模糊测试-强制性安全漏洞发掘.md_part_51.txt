·访问违规异常（EXCEPTION_ACCESS_VIOLATION）.一个访问违规的发生通常是由于
试图从一个无效的内存地址进行读取或写人而导致的。
·新点异常（EXCEPTION_BREAKPOINT）。由于遇到了一个断点而触发了一个异常。
·单步执行异常（EXCEPTION_SINGLE_STEP）.单步陷阱是可用的，并且一个单步指令
被执行。
·栈溢出异常（EXCEPTION_STACK_OVERFLOW）。违规的线程耗尽了其栈空间。这是
一个典型的失控递归的指示符，并且通常只局限于一个DoS。
我们可以推断出希望采用什么样的逻辑来处理不同的调试事件和异常。一旦我们对所报告
的事件进行了处理，那么通过调用ContinueDebugEvent（）就可以允许违规的线程继续运行。
20.4将其整合在一起
到此阶段为止，我们已经讨论了Windows内存空间布局的基本知识，列出了我们的需求，
选择了所需要的开发语言，阐述了ctypes模块的基本概念，并且涉足了Windows调试API的基础
知识。在这其中，有几个突出的问题如下：
·如何在特定点将“钩子”植人目标进程的需求？
·如何处理进程快照和恢复？
·如何选择植人钩子的点？
·如何对目标内存空间进行定位和变异？
 http://msdn.microsoft.com/library/default.asp?url=/library/en-us/debug/base/exception_record_str.asp
---
## Page 241
226
第二部分目标和自动化
20.4.1如何在特定点将“钩子”植入目标进程
我们在本章前面已经提及，可以通过使用调试器断点来在我们所选择的方法中实现对进程
的钩住。在我们所给定的平台上有两种支持的断点类型，即硬件断点和软件断点。与80x86相
兼容的处理器支持4个硬件断点。这些断点可以分别被设定以触发读、写、或者执行任意的1字
节，2字节或4字节区域。为了设置硬件断点，我们必须要修改目标进程的上下文环境，用从
DR3到DR7的调试寄存器来修改DR0寄存器。前4个寄存器包含硬件断点的地址。DR7寄存器包
含若干标志，用以指定哪些断点是活动的，在什么区城是活动的以及对何种类型的访问（读，
写或者执行）是活动的。硬件断点是非侵入的，并且不会改变你的代码。另一方面，为了实现
软件断点，我们必须要修改目标进程，井且使用单字节指令INT3来实现，该指令在十六进制中
被表示为0xCC。
我们既可以使用硬件断点也可以使用软件断点来实现给定的任务。如果我们可能会在某些
地方需要多于4个的钩子点的话，那么就要决定利用软件断点了，为了更好的理解该处理过程，
让我们来分析一个在地址OxDEADBEEF处的一个构想的程序中设置一个软件断点所需要的步
骤。首先，我们的调试器必须要使用前面提到的ReadProcessMemoryAPi调用来读取并保存存
储在目标地址中的原始字节，如图20-3所示。
K
DYNEANRRRP
）
个
OxDEADBEF1
55
pash ebp
OxDBADBEF2
C
nov ebp.esp
站单
出
9的数的典个
来出人
图20-3保存断点地址处的原始字节
合其OS
注意目标地址处的第一条指令实际上有两个字节。下一步是使用也是在前面提到的
WriteProcessMemoryAPI在目标地址处写人INT3指令，如图20-4所示。
但对前一条指令将会发生什么情况呢？插入的0xCC被作为单字节INT3指令来解析。而mov
edi，edi指令的第二个字节（0xFF），与前面所展示的pushebp指令的字节（Ox55）以及mov
ebp，esp指令的第一个字节（0x8B）组合在一起被解析为ca11[ebp-75]指令，剩余的字节
0xEC则被解析为单字节指令ina1，dx。这时，当执行到地址OxDEADBEEF时，INT3指令将触
发一个带有一个EXCEPTION_BREAKPOINT异常代码的EXCEPTION_DEBUG_EVENT调试事
件，我们的调试器将在调试事件循环中捕获该代码（还记得艾格尼丝的故事吗？）.图20-5显
现了此时的进程状态。
---
## Page 242
第20章内存数据的模测试：自动化
调试器
*
OxDEADBEEP
cC
IBT3
OXDEADBEFO
&8
55
ca11 [ebp-75]
OxDEADBEF3
in al, dx
图20-4写人INT3操作码
调试器
8B
cal1[ebp-75]
图20-5捕获的EXCEPTION_BREAKPOINT代码
因此我们现在已经成功地插入并捕获了一个软件断点，但这只完成了一半的工作，注意我
们的原始指令仍然没有发挥作用。另外，指令指针（即EIP，它使CPU知道从哪里获取，解析
并执行下一条指令）位于OXDEADBEFO面不是OXDEADBEEF，这是由于我们在地址
0XDEADBEEF插入的单字节INT3指令被成功执行，从而导致EIP被更新为0XDEADBEEF+1
在我们可以继续执行之前，必须要纠正EIP的值，并且恢复地址OXDEADBEEF处的原始值，如
图20-6所示。
恢复地址OXDEADBEEF处的字节是我们已经熟悉的一项工作。然而，改变指令指针的值，
即寄存器EIP的值则是一项不同的任务。我们在本章前面曾提到过线程的上下文环境包含不同
的特定于处理器的寄存器数据，例如我们现在所关注的指令指针（EIP）。我们可以通过调用
GetThreadContext（）APIé来为任意给定的线程检索上下文，井向其传递当前线程的句柄以及
一个指向CONTEXT结构的指针。然后，我们就可以修改CONTEXT结构的内容，并调用
SetThreadContext（）API，再一次传递当前线程的句柄以修改上下文：
③htt:/msdn.microsoft.com/library/default.asp7url=/library/en-us/debug/base/setthreadcontext.asp
---
## Page 243
228
第二部分目标和自动化
context.ContextF1ags - CONTEXT_FULL
context=CONTEXT)
kerne132.GetThreadContext(h_thread,byref(context))
context.Eip -=1
kerne132.SetThreadContext(h_thread, byref(context))
调试器
OXDEADBEE.
8B
FF
aov edi, edi
OxDBADBEFO
55
dqqend
OxDEADBEF3
0B
deadqa Ao
EIP
图20-6调整EIP
这时，原始的执行上下文环境被恢复，并且我们已经做好了让进程继续执行的准备。
20.4.2如何处理进程快照和恢复
为了回答这个问题，我们必须首先考虑另外一个问题：当一个进程正在运行时，什么会发
生改变呢？答案是有许多内容都会发生变化.新线程被创建并销毁：针对文件、socket、窗口
以及其他元素的句柄被打开和关闭。内存被分配和释放，被读取和写人。在单个线程上下文环
境中的不同寄存器具有高度的不稳定性，并且经常被改变。我们可以使用一个虚拟机技术如
VMWare来完成我们的任务，VMWare允许我们获得井恢复完整的系统快照。然面，该处理
过程非常缓慢，并且要求虚拟机客户和虚拟主机上某种形式的仲裁器之间进行通信。相反，我
们借鉴于前面所讨论的一种技术，并且只考虑线程上下文环境和内存的变化。我们的快照过
程将需要两个步骤。
在第一步中，我们将目标进程内部的每个线程的上下文加以保存。我们已经看到对单个线
程的上下文环境进行获取和设置是非常简单的。现在我们将在该代码中加人处理逻辑，以枚举
出属于目标进程的系统线程。为此，我们要依赖于工具帮助函数。首先，我们通过指定
TH32CS_SNAPTHREAD标志来获取所有系统线程的一个列表：
14
thread_entry-THREADENTRY32O
contexts
□-
A
http://www.vmware.com
Greg Hoglund运行时反汇编BlackHat会议
③http://msdn2.microsoft.com/en-us/library/ms686832.aspx
---
## Page 244
第20章内存数据的模测试：自动化229
snapshot -kerne132.CreateToo1he1p32Snapshot（\
TH32CS_SNAPTHREAD,
Co
接下来，我们从该列表中检索第一个线程项。然而在开始这项操作之前，Thread32First（）
API有一个强制性的要求，即要将线程项结构内部的dwSize变量进行初始化。我们将前面获得
的快照以及指向线程项结构的一个指针作为参数传递给Thread32First（）API：
thread_entry.dwS1ze = sizeof(thread_entry)
success = kerne132.Thread32FirstC\
byref(thread_entry))
snapshot,
1
最后，我们循环遍历线程列表，以寻找属于目标进程的进程ID（pid）的那些线程。如果
存在一些这样的线程，我们就使用OpenThread（）API来检索一个线程句柄，并且像前面那样检
索上下文环境，然后将其追加到列表中：
while success:
if thread_entry.th320wnerProcessID -= pid:
context-CONTEXTO
context.ContextFlags - CONTEXT_FULL
h_thread -kerne132.0penThreadC\
THREAD_ALL_ACCES5,
None,
kerne132.GetThreadContext（\
h_thread,
byref(context)
contexts.append(context)
kerne132.C1oseHand1e(h_thread)
success = kerne132.Thread32Next(\
snapshot,
byref(thread_entry))
在保存了属于我们的进程的每个线程的上下文环境之后，就可以通过再次循环遍历所有的
系统线程，并恢复所保存的在前面所看到的任意线程的上下文，为了以后恢复我们的进程快照。
在第二步中，我们保存了每个可变内存块的内容。回忆一下上一章中所讲的，每个在32位
x86Windows平台上的进程可以“看到”它自己的4GB内存空间。在这4GB空间中，通常是底
层的一半空间（0x00000000-0x7FFFFFFF）被留作我们的进程来使用。该内存空间进一步被划
分为单独的页，通常每个页的大小是4096字节。最后，内存许可被应用在这些单独页的每个
页的最细粒度上，不是将每个被单独使用的内存页的内容加以存储，而是通过将快照限制于那
些我们认为是可变的内存页来把时间和资源同时加以保存。我们将忽略那些具有限制性的许可，
即阻止写入的所有页。这包括带有如下标记的页：
---
## Page 245
230
第二部分
目标和自动化
·只读页（PAGE_READONLY）