the trace subsystem due to its automation characteristic.
Performance overhead of the debugging subsystem is not
noticed by an analyst in front of the command console,
and the debugging system is designed with human inter-
action.
To learn the performance overhead on the Linux bi-
naries, we build an executable that using an open source
π calculation algorithm provided by the GNU Multiple
Precision Arithmetic Library [46] to calculate 1 million
digits of the π for 30 times with the tracing functions dis-
abled and enabled, and the time consumption is shown
in Table 2. Since we leverage ETM to achieve the in-
struction tracing and system call tracing, the experiment
result shows that the ETM-based solution has negligible
overhead — less than 0.1%. In the Android API tracing,
the overhead is about 70x. This overhead is mainly due
to the frequent domain switch during the execution and
bridging the semantic gap. To reduce the overhead, we
44    26th USENIX Security Symposium
USENIX Association
(a) Reading ETM Memory Region.
(b) EL3 Output in the Secure Console.
Figure 8: Memory Mapped Interface.
Table 3: The TS Performance Evaluation with CF-Bench [16].
Native Scores
Base: Tracing disabled
Instruction tracing
System call tracing
Android API tracing
Mean
25380
25364
25360
6452
STD
1023
908
774
24
Slowdown
Mean
Java Scores
STD
Slowdown
∼ 1x
∼ 1x
∼ 4x
18758
18673
18664
122
1142
1095
1164
4
∼ 1x
∼ 1x
∼ 154x
Overall Scores
Mean
21407
21349
21342
2654
STD
1092
1011
911
11
Slowdown
∼ 1x
∼ 1x
∼ 8x
can combine ETM instruction trace with data trace, and
leverage the trace result to rebuild the semantic informa-
tion and API usage ofﬂine.
To measure the performance overhead on the Android
applications, we use CF-Bench [16] downloaded from
Google Play Store. The CF-Bench focuses on measur-
ing both the Java performance and native performance
in Android system, and we use it to evaluate the over-
head for 30 times. The result in Table 3 shows that the
overheads of instruction tracing and system call tracing
are sufﬁciently small to ignore. The Android API tracing
brings 4x slowdown on the native score and 154x slow-
down on the Java score, and the overall slowdown is 8x.
Note that we make these benchmarks to be executed only
on Cortex-A57 core 0 by setting their CPU afﬁnity mask
to 0x1 since NINJA only stays in that core.
7.5 Skid Evaluation
In this subsection, we evaluate the inﬂuence of the skid
problem to NINJA. Since the instruction tracing, system
call tracing, and memory read/write do not involve PMI,
these functionalities are not affected by the skid prob-
lem. In ART, each bytecode is interpreted as an array of
machine code. Our bytecode stepping mechanism rec-
ognizes the corresponding bytecode once it is executing
any machine code in the array, i.e., the skid problem af-
fects the bytecode stepping if and only if the instruction
shadow covers all the machine code for a bytecode. We
evaluate the listed 218 bytecode opcode [24] on the An-
droid ofﬁcial website, and it shows that the shadow re-
gion cannot cover the machine code for any of them.
Thus, the bytecode stepping does not suffer from the skid
problem. For a similar reason, the skid problem has no
inﬂuence on the Android API tracing.
However, the native code stepping and the breakpoint
Table 4: Instructions in the Skid Shadow with Represen-
tative PMU Events.
Event Number
Event Description
0x81-0x8F
0x11
0x08
Exception related events that ﬁr-
ing after taking exceptions
CPU cycle event that ﬁring after
each CPU cycle
Instruction retired event that ﬁr-
ing after executing each instruc-
tion
# of Instructions
Mean
STD
0
2.73
6.03
0
2.30
4.99
are still affected, and both of them use instruction retired
event to overﬂow the counter. Since the skid problem is
due to the delay between the interrupt request and the in-
terrupt arrival, we ﬁrst use PMU counter to measure this
delay by CPU cycles. Similar with the instruction step-
ping, we make the PMU counter to count CPU CYCLES
event and initialize the value of the counter to its maxi-
mum value. Then, the counter value after switching into
EL3 is the time delay of the skid in CPU cycles. The
results of 30 experiments show that the delay is about
106.3 CPU cycles with a standard deviation 2.26. As
the frequency of our CPU is 1.15GHz, the delay is about
0.09µs. We also evaluate the number of instructions in
the skid shadow with some representative PMU events.
For each event, we trigger the PMI for 30 times and
calculate the mean and standard deviation of the num-
ber of instructions in the shadow. Table 4 shows the
result with different PMU events. Unlike the work de-
scribed in [42], the exception related events exhibits no
instruction shadow in our platform, and we consider it is
caused by different ARM architectures. It is worth not-
ing that the number of instructions in the skid shadow
of the CPU cycle event is less than the instruction re-
tired event. However, using the CPU cycle event may
lead to multiple PMIs for a single instruction since the
USENIX Association
26th USENIX Security Symposium    45
execution of a single instruction may need multiple CPU
cycles, which introduces more performance overhead but
with more ﬁne-grained instruction-stepping. In practice,
it is a trade off between the performance overhead and
the debugging accuracy, and we can use either one based
on the requirement.
over, since the instruction skid is caused by the delay
of the PMI, similar hardware component like Local Ad-
vanced Programmable Interrupt Controller [54] on x86
which handles interrupt locally may help to mitigate the
problem by reducing the response time.
8 Discussion
NINJA leverages existing deployed hardware and is com-
patible with commercial mobile devices. However, the
secure domain on the commercial mobile devices is man-
aged by the Original Equipment Manufacturer (OEM).
Thus, it requires cooperation from the OEMs to imple-
ment NINJA on a commercial mobile device.
The approach we used to ﬁll the semantic gaps re-
lies on the understanding of the kernel data structures
and memory maps, and thus is vulnerable to the privi-
leged malware. Patagonix [33] leverages a database of
whitelisted applications binary pages to learn the seman-
tic information in the memory pages of the target applica-
tion. However, this approach is limited by the knowledge
of the analyzer. Currently, how to transparently bridge
the semantic gap without any assumption to the system
is still an open research problem [27].
The protection mechanism mentioned in Section 6.1
helps to improve transparency when the attackers try
to use PMU or ETM registers, and using shadow reg-
isters [35] can further protect the critical system regis-
ters. However, if an advanced attacker intentionally uses
PMU or ETM to trace CPU events or instructions and
checks whether the trace result matches the expected one,
the mechanism of returning artiﬁcial or shadow register
values may not provide accurate result and thus affects
NINJA’s transparency. To address this problem, we need
to fully virtualize the PMU and ETM, and this is left as
our future work.
Though NINJA protects the system-instruction inter-
face access to the registers, the mechanism we used to
protect the memory mapped interface access maybe vul-
nerable to advanced attacks such as directly manipulat-
ing the memory-mapping, disabling MMU to gain phys-
ical memory access, and using DMA to access memory.
Note that these attacks might be difﬁcult to implement in
practice (e.g., disabling MMU might crash the system).
To fully protect the memory-mapped region of ETM and
PMU registers, we would argue that hardware support
from TrustZone is needed. Since the TZASC only pro-
tects the DRAM, we may need additional hardware fea-
tures to extend the idea of TZASC to the whole physical
memory region.
Although the instruction skid of the PMI cannot be
completely eliminated, we can also enable ETM between
two PMIs to learn the instructions in the skid. More-
9 Conclusions
In this paper, we present NINJA, a transparent malware
analysis framework on ARM platform. It embodies a se-
ries of analysis functionalities like tracing and debugging
via hardware-assisted isolation execution environment
TrustZone and hardware features PMU and ETM. Since
NINJA does not involve emulator or framework modiﬁ-
cation, it is more transparent than existing analysis tools
on ARM. To minimize the artifacts introduced by NINJA,
we adopt register protection mechanism to protect all in-
volving registers based on hardware traps and runtime
function interception. Moreover, as the TrustZone and
the hardware components are widely equipped by OTS
mobile devices, NINJA can be easily transplanted to ex-
isting mobile platforms. Our experiment results show
that performance overheads of the instruction tracing and
system call tracing are less than 1% while the Android
API tracing introduces 4 to 154 times slowdown.
10 Acknowledgements
We would like to thank our shepherd, Manuel Egele, and
the anonymous reviewers for their valuable comments
and feedback. Special thanks to He Sun, who offers early
discussion about the project. We also appreciate Saeid
Mofrad, Leilei Ruan, and Qian Jiang for their kindly re-
view and helpful suggestions.
References
[1] ABERA, T., ASOKAN, N., DAVI, L., EKBERG, J.-E., NYMAN,
T., PAVERD, A., SADEGHI, A.-R., AND TSUDIK, G. C-FLAT:
Control-ﬂow attestation for embedded systems software. In Pro-
ceedings of the 23rd ACM SIGSAC Conference on Computer and
Communications Security (CCS’16) (2016).
[2] ANUBIS.
Analyzing Unknown Binaries.
//anubis.iseclab.org.
http:
[3] ARM LTD.
ARM CoreLink NIC-400 Network In-
http:
Reference Manual.
Technical
terconnect
//infocenter.arm.com/help/index.jsp?topic=
/com.arm.doc.ddi0475g/index.html.
[4] ARM LTD. ARM Dual-Timer Module (SP804) Technical Ref-
erence Manual. http://infocenter.arm.com/help/topic/
com.arm.doc.ddi0271d/DDI0271.pdf.
[5] ARM LTD.
tecture Speciﬁcation.
index.jsp?topic=/com.arm.doc.ihi0048b/index.html.
ARM Generic Interrupt Controller Archi-
http://infocenter.arm.com/help/
[6] ARM LTD. ARM PrimeCell Real Time Clock Technical Ref-
erence Manual. http://infocenter.arm.com/help/topic/
com.arm.doc.ddi0224b/DDI0224.pdf.
46    26th USENIX Security Symposium
USENIX Association
[7] ARM LTD. ARM Trusted Firmware. https://github.com/
ARM-software/arm-trusted-firmware.
[8] ARM LTD.
ARMv8-A Reference Manual.
//infocenter.arm.com/help/index.jsp?topic=
/com.arm.doc.ddi0487a.k/index.html.
http:
[9] ARM
LTD.
Components
Technical
http://
infocenter.arm.com/help/topic/com.arm.doc.ddi0314h/
DDI0314H coresight components trm.pdf.
CoreSight
Reference
Manual.
[10] ARM LTD. CoreSight Trace Memory Controller Technical Ref-
erence Manual. http://infocenter.arm.com/help/topic/
com.arm.doc.ddi0461b/DDI0461B tmc r0p1 trm.pdf.
[11] ARM LTD.
Speciﬁcation.
index.jsp?topic=/com.arm.doc.ihi0014q/index.html.
Embedded Trace Macrocell Architecture