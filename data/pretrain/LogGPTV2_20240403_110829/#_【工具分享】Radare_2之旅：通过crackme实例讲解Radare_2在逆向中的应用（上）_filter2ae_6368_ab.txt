在等我们给它下一步的命令，当前它输出了一个地址 (0x08048370)，这就是它自动识别的程序入口点，我们来验证一下：
    [0x08048370]> ie
    [Entrypoints]
    vaddr=0x08048370 paddr=0x00000370 baddr=0x08048000 laddr=0x00000000 haddr=0x00000018 type=program1 entrypoints
我们用 ie 命令可以打印出程序的入口点， ie 的意思就是 info >>
entrypoint，是不是很好记，当然我们不需要刻意去记住它，因为我们可以在任何一个命令后面添加 ? 来获得更多的子命令信息：
    [0x08048370]> i?
    |Usage: i Get info from opened file (see rabin2’s manpage)
    | Output mode:
    | ‘*’                Output in radare commands
    | ‘j’                Output in json
    | ‘q’                Simple quiet output
    | Actions:
    | i|ij               Show info of current file (in JSON)
    | iA                 List archs
    | ia                 Show all info (imports, exports, sections..)
    | ib                 Reload the current buffer for setting of the bin (use once only)
    | ic                 List classes, methods and fields
    | iC                 Show signature info (entitlements, …)
    | id                 Debug information (source lines)
    | iD lang sym        demangle symbolname for given language
    | ie                 Entrypoint
    | iE                 Exports (global symbols)
    | ih                 Headers (alias for iH)
    | iHH                Verbose Headers in raw text
    | ii                 Imports
    | iI                 Binary info
    | ik [query]         Key-value database from RBinObject
    | il                 Libraries
    | iL                 List all RBin plugins loaded
    | im                 Show info about predefined memory allocation
    | iM                 Show main address
    | io [file]          Load info from file (or last opened) use bin.baddr
    | ir|iR              Relocs
    | is                 Symbols
    | iS [entropy,sha1]  Sections (choose which hash algorithm to use)
    | iV                 Display file version info
    | iz                 Strings in data sections
    | izz                Search for Strings in the whole binary
    | iZ                 Guess size of binary program
i 开头的命令主要是用来获取各种信息。  
**分析**
radare2 不会主动去分析一个文件，因为这样做的代价太大了，它需要花费很多的时间，尤其是大文件，有关分析的操作或者设置启动时不分析可以去 radare2
的博客看看 [this post](http://radare.today/posts/analysis-by-default/).
当然分析是一个必要的功能，r2 也提供了很多与之相关的功能，就像之前说的，我们可以在 'a' 后面加 '?' 来探索这个系列的命令：
    [0x08048370]> a?
    |Usage: a[abdefFghoprxstc] […]
    | ab [hexpairs]    analyze bytes
    | abb [len]        analyze N basic blocks in [len] (section.size by default)
    | aa[?]            analyze all (fcns + bbs) (aa0 to avoid sub renaming)
    | ac[?] [cycles]   analyze which op could be executed in [cycles]
    | ad[?]            analyze data trampoline (wip)
    | ad [from] [to]   analyze data pointers to (from-to)
    | ae[?] [expr]     analyze opcode eval expression (see ao)
    | af[?]            analyze Functions
    | aF               same as above, but using anal.depth=1
    | ag[?] [options]  output Graphviz code
    | ah[?]            analysis hints (force opcode size, …)
    | ai [addr]        address information (show perms, stack, heap, …)
    | ao[?] [len]      analyze Opcodes (or emulate it)
    | aO               Analyze N instructions in M bytes
    | ar[?]            like ‘dr’ but for the esil vm. (registers)
    | ap               find prelude for current offset
    | ax[?]            manage refs/xrefs (see also afx?)
    | as[?] [num]      analyze syscall using dbg.reg
    | at[?] [.]        analyze execution traces
    Examples:
    f ts @ S*~text:0[3]; f t @ section..text
    f ds @ S*~data:0[3]; f d @ section..data
    .ad t t+ts @ d:ds
通常我会使用 'aa' 命令来分析文件，当然使用 'aa?'可以获得更多的用法，这里由于文件很小的原因，我选择用 'aaa'
来尽可能的分析出更多更细致的信息，当然你也可以在运行 radare2的使用 -A 参数来直接分析一个文件(例如 r2 -A megabeets_0x1)
    [0x08048370]> a?
    [x] Analyze all flags starting with sym. and entry0 (aa)
    [0x08048370]> aaa
    [x] Analyze all flags starting with sym. and entry0 (aa)
    [x] Analyze len bytes of instructions for references (aar)
    [x] Analyze function calls (aac)
    [*] Use -AA or aaaa to perform additional experimental analysis.
    [x] Constructing a function name for fcn.* and sym.func.* functions (aan)
**Flags**
分析完成之后， r2会将所有有用的信息和特定的名字绑定在一起，比如区段、函数、符号、字符串，这些都被称作 'flags', flags 被整合进 ，一个 flag 是所有类似特征的集合，展示所有的 flag ，用 'fs' 命令：
    [0x08048370]> fs
    0    4 . strings
    1   35 . symbols
    2   82 . sections
    3    5 . relocs
    4    5 . imports
    5    1 . functions
我们可以使用 'fs ' 加 'f' 来打印出 这个 flags
下面包含的信息，使用分号来间隔多条命令(‘cmd1;cmd2;cmd3;…’).
    [0x08048370]> fs imports; f
    0x08048320 6 sym.imp.strcmp
    0x08048330 6 sym.imp.strcpy
    0x08048340 6 sym.imp.puts
    0xffffffff 16 loc.imp.__gmon_start__
    0x08048350 6 sym.imp.__libc_start_main
我们看到 r2 列出了这个二进制文件的导出表–熟悉的 ‘strcmp’, ‘strcpy’,
‘puts’,等函数，并和它们的真实地址相关联，同样我们可以列出 字符串 flagspace:
**  
**
**Strings**
我们看到 r2 标记出了 字符串的偏移地址、变量名.现在我们来看看字符串吧，这里有几种方式可以查看文件的字符串，你可以根据自己的需要来选择.
iz – 列出数据段里的字符串
izz – 在整个二进制文件中搜索字符串.
    [0x08048370]> iz
    vaddr=0x08048700 paddr=0x00000700 ordinal=000 sz=21 len=20 section=.rodata type=ascii string=n .:: Megabeets ::.
    vaddr=0x08048715 paddr=0x00000715 ordinal=001 sz=23 len=22 section=.rodata type=ascii string=Think you can make it?
    vaddr=0x0804872c paddr=0x0000072c ordinal=002 sz=10 len=9 section=.rodata type=ascii string=Success!n
    vaddr=0x08048736 paddr=0x00000736 ordinal=003 sz=22 len=21 section=.rodata type=ascii string=Nop, Wrong argument.n
还记得吗，在之前运行程序的时候就见过这些字符串了，看到 ‘success’
了没，它可能就是我们最终成功后想要见到的字符串，现在我们知道了这个字符串的名字，那我们来看看在哪里调用了它：
    [0x08048370]> axt @@ str.*
    data 0x8048609 push str._n__.::_Megabeets_::. in main
    data 0x8048619 push str.Think_you_can_make_it_ in main
    data 0x8048646 push str._n_tSuccess__n in main
    data 0x8048658 push str._n_tNop__Wrong_argument._n in main
这条命令又给我们展示了另一个 r2 的功能，'axt' 命令用来在 data/code段里找寻某个地址相关的引用（更多的操作，请看
'ax?'）.'@@'就像一个迭代器，用来在地址空间里不断地匹配后面一系列相关的命令（更多操作，请看 '@@?'）， 'str.*'
是一个通配符，用来标记所有以 'str.'开头的信息，这个不光会列出字符串标志，同时也包括函数名，找到它们到底在哪里以及何处被调用。
未完待续…