if the scheme could be broken only by intercept-
ing input or eavesdropping cleartext more than,
say, 10–20 times. This penalizes schemes that are
not replay-resistant, whether because they send
a static response or because their dynamic re-
sponse countermeasure can be cracked with a few
observations. This beneﬁt assumes that general-
purpose devices like software-updatable personal
computers and mobile phones may contain mal-
ware, but that hardware devices dedicated exclu-
sively to the scheme can be made malware-free.
We grant Quasi-Resilient-to-Internal-Observation
to two-factor schemes where both factors must
be malware-infected for the attack to work. If
infecting only one factor breaks the scheme, we
don’t grant the beneﬁt.
Resilient-to-Leaks-from-Other-Veriﬁers: Nothing
that a veriﬁer could possibly leak can help an
attacker impersonate the user to another veriﬁer.
This penalizes schemes where insider fraud at one
provider, or a successful attack on one back-end,
endangers the user’s accounts at other sites.
Resilient-to-Phishing: An attacker who simulates
a valid veriﬁer (including by DNS manipulation)
cannot collect credentials that can later be used
to impersonate the user to the actual veriﬁer. This
penalizes schemes allowing phishers to get victims
to authenticate to lookalike sites and later use
the harvested credentials against the genuine sites.
It is not meant to penalize schemes vulnerable
to more sophisticated real-time man-in-the-middle
or relay attacks, in which the attackers have one
connection to the victim prover (pretending to be
the veriﬁer) and simultaneously another connection
to the victim veriﬁer (pretending to be the prover).
Resilient-to-Theft: If the scheme uses a physical
object for authentication, the object cannot be used
for authentication by another person who gains
S5
S6
S7
S8
556
S9
S10
possession of it. We still grant Quasi-Resilient-to-
Theft if the protection is achieved with the modest
strength of a PIN, even if attempts are not rate-
controlled, because the attack doesn’t easily scale
to many victims.
No-Trusted-Third-Party: The scheme does not rely
on a trusted third party (other than the prover
and the veriﬁer) who could, upon being attacked
or otherwise becoming untrustworthy, compromise
the prover’s security or privacy.
Requiring-Explicit-Consent: The
authentication
process cannot be started without
the explicit
consent of the user. This is both a security and
a privacy feature (a rogue wireless RFID-based
credit card reader embedded in a sofa might charge
a card without user knowledge or consent).
S11 Unlinkable: Colluding veriﬁers cannot determine,
from the authenticator alone, whether the same
user is authenticating to both. This is a privacy
feature. To rate this beneﬁt we disregard linkability
introduced by other mechanisms (same user ID,
same IP address, etc).
We emphasize that it would be simple-minded to rank
competing schemes simply by counting how many beneﬁts
each offers. Clearly some beneﬁts deserve more weight than
others—but which ones? Scalable-for-Users, for example,
is a heavy-weight beneﬁt if the goal is to adopt a single
scheme as a universal replacement; it is less important if one
is seeking a password alternative for only a single account.
Providing appropriate weights thus depends strongly on the
speciﬁc goal for which the schemes are being compared,
which is one of the reasons we don’t offer any.
overall ranking by rating scheme i as Si = (cid:80)
Having said that, readers wanting to use weights might
use our framework as follows. First, examine and score each
individual scheme on each beneﬁt; next, compare (groups
of) competing schemes to identify precisely which beneﬁts
each offers over the other; ﬁnally, with weights that take into
account the relative importance of the beneﬁts, determine an
j Wj · bi,j.
Weights Wj are constants across all schemes in a particular
comparison exercise, and bi,j ∈ [0, 1] is the real-valued
beneﬁt rating for scheme i on beneﬁt j. For different
solution environments (scenarios k), the relative importance
of beneﬁts will differ, with weights Wj replaced by W (k)
.
In this paper we choose a more qualitative approach:
we do not suggest any weights W (k)
and the bi,j ratings
we assign are not continuous but coarsely quantized. In
Section V-D we discuss why. In our experience, “the journey
(the rating exercise) is the reward”: the important technical
insights we gained about schemes by discussing whether our
ratings were fair and consistent were worth much more to
us than the actual scores produced. As a take-home message
for the value of this exercise, bringing a team of experts to
j
j
a shared understanding of the relevant technical issues is
much more valuable than ranking the schemes linearly or
reaching unanimous agreement over scoring.
III. EVALUATING LEGACY PASSWORDS
We expect that the reader is familiar with text passwords
and their shortcomings, so evaluating them is good exercise
for our framework. It’s also useful
to have a baseline
standard to refer to. While we consider “legacy passwords”
as a single scheme, surveys of password deployment on the
web have found substantial variation in implemention. A
study of 150 sites in 2010 [13], for example, found a unique
set of design choices at nearly every site. Other studies
have focused on implementations of cookie semantics [15],
password composition policies [16], or use of TLS to protect
passwords [17]. Every study has found both considerable
inconsistency and frequent serious implementation errors in
practical deployments on the web.
We remind readers of our Section II assumption of best
practice by implementers—thus in our ratings we do not
hold against passwords the many weak implementations
that their widespread deployment includes, unless due to
inherent weaknesses; while on the other hand, our ratings
of passwords and other schemes do assume that poor user
behavior is an inherent aspect of ﬁelded systems.
The difﬁculty of guessing passwords was studied over
three decades ago [2] with researchers able to guess over
75% of users’ passwords; follow-up studies over the years
have consistently compromised a substantial fraction of
accounts with dictionary attacks. A survey [3] of corporate
password users found them ﬂustered by password require-
ments and coping by writing passwords down on post-it
notes. On the web, users are typically overwhelmed by the
number of passwords they have registered. One study [18]
found most users have many accounts for which they’ve
forgotten their passwords and even accounts they can’t re-
member registering. Another [19] used a browser extension
to observe thousands of users’ password habits, ﬁnding on
average 25 accounts and 6 unique passwords per user.
Thus, passwords, as a purely memory-based scheme,
clearly aren’t Memorywise-Effortless or Scalable-for-Users
as they must be remembered and chosen for each site.
While they are Nothing-to-Carry, they aren’t Physically-
Effortless as they must be typed. Usability is otherwise
good, as passwords are de facto Easy-to-Learn due to years
of user experience and Efﬁcient-to-Use as most users type
only a few characters, though typos downgrade passwords
to Quasi-Infrequent-Errors. Passwords can be easily reset,
giving them Easy-Recovery-from-Loss.
Their highest scores are in deployability, where they
receive full credit for every beneﬁt—in part because many
of our criteria are deﬁned based on passwords. For example,
passwords are Accessible because we deﬁned the beneﬁt
with respect to them and accommodations already exist for
most groups due to the importance of passwords. Pass-
words are Negligible-Cost-per-User due to their simplicity,
and are Server-Compatible and Browser-Compatible due to
their incumbent status. Passwords are Mature and Non-
Proprietary, with turnkey packages implementing password
authentication for many popular web development platforms,
albeit not well-standardized despite their ubiquity.
Passwords score relatively poorly on security. They
aren’t Resilient-to-Physical-Observation because even if
typed quickly they can be automatically recovered from
high-quality video of the keyboard [20]. Perhaps gener-
ously, we rate passwords as Quasi-Resilient-to-Targeted-
Impersonation in the absence of user studies establishing
acquaintances’ ability to guess passwords,
though many
users undermine this by keeping passwords written down in
plain sight [3]. Similarly, users’ well-established poor track
record in selection means passwords are neither Resilient-to-
Throttled-Guessing nor Resilient-to-Unthrottled-Guessing.
that users
As static tokens, passwords aren’t Resilient-to-Internal-
Observation. The fact
reuse them across
sites means they also aren’t Resilient-to-Leaks-from-Other-
Veriﬁers, as even a properly salted and strengthened hash
function [21] can’t protect many passwords from dedicated
cracking software. (Up to 50% of websites don’t appear to
hash passwords at all [13].) Passwords aren’t Resilient-to-
Phishing as phishing remains an open problem in practice.
Finally, their simplicity facilitates several security bene-
ﬁts. They are Resilient-to-Theft as they require no hardware.
There is No-Trusted-Third-Party; having to type makes them
Requiring-Explicit-Consent; and, assuming that sites add salt
independently, even weak passwords are Unlinkable.
IV. SAMPLE EVALUATION OF REPLACEMENT SCHEMES
We now use our criteria to evaluate a representative
sample of proposed password replacement schemes. Table I
visually summarizes these and others we explored. Due to
space constraints, we only explain in detail our ratings for at
most one representative scheme per category (e.g. federated
login schemes, graphical passwords, hardware tokens, etc.).
Evaluation details for all other schemes in the table are
provided in a companion technical report [1].
We introduce categories to highlight general trends, but
stress that any scheme must be rated individually. Contrary
to what the table layout suggests, schemes are not uniquely
partitioned by the categories; several schemes belong to mul-
tiple categories, and different groupings of the schemes are
possible with these same categories. For example, GrIDsure
is both cognitive and graphical; and, though several of the
schemes we examine use some form of underlying “one-
time-passwords”, we did not group them into a common
category and indeed have no formal category of that name.
We emphasize that, in selecting a particular scheme for
inclusion in the table or for discussion as a category rep-
resentative, we do not necessarily endorse it as better than
557
alternatives—merely that it is reasonably representative, or
illuminates in some way what the category can achieve.
A. Encrypted password managers: Mozilla Firefox
The Firefox web browser [22] automatically offers to
remember passwords entered into web pages, optionally
encrypting them with a master password. (Our rating as-
sumes that this option is used; use without the password
has different properties.) It then pre-ﬁlls the username and
password ﬁelds when the user revisits the same site. With its
Sync facility the passwords can be stored, encrypted, in the
cloud. After a once-per-machine authentication ritual, they
are updated automatically on all designated machines.
This scheme is Quasi-Memorywise-Effortless (because
of the master password) and Scalable-for-Users:
it can
remember arbitrarily many passwords. Without Sync, the
solution would have required carrying a speciﬁc computer;
with Sync, the passwords can be accessed from any of
the user’s computers. However it’s not more than Quasi-
Nothing-to-Carry because a travelling user will have to
carry at least a smartphone: it would be quite insecure to
sync one’s passwords with a browser found in a cybercafé.
It is Quasi-Physically-Effortless, as no typing is required
during authentication except for the master password once
per session, and Easy-to-Learn. It is Efﬁcient-to-Use (much
more so than what it replaces) and has Infrequent-Errors
(hardly any, except when entering the master password). It
does not have Easy-Recovery-from-Loss: losing the master
password is catastrophic.
The scheme is backwards-compatible by design and thus
scores quite highly on deployability: it fully provides all
the deployability beneﬁts except for Browser-Compatible,
unavoidably because it requires a speciﬁc browser.
It is Quasi-Resilient-to-Physical-Observation and Quasi-
Resilient-to-Targeted-Impersonation because an attacker
could still target the infrequently-typed master password
(but would also need access to the browser). It
is not
Resilient-to-Throttled-Guessing nor Resilient-to-Unthrottled-
Guessing: even if the master password is safe from such
attacks, the original web passwords remain as vulnerable as
before.4 It is not Resilient-to-Internal-Observation because,
even if TLS is used, it’s replayable static passwords that ﬂow
in the tunnel and malware could also capture the master
password. It’s not Resilient-to-Leaks-from-Other-Veriﬁers,
because what happens at the back-end is the same as with
passwords. It’s Resilient-to-Phishing because we assume
that sites follow best practice, which includes using TLS
for the login page. It is Resilient-to-Theft, at least under
4Security-conscious users might adopt truly random unguessable pass-
words, as they need no longer remember them, but most users won’t. If
the scheme pre-generated random passwords it would score more highly
here, disregarding pre-existing passwords. Similarly, for Resilient-to-Leaks-
from-Other-Veriﬁers below, this scheme makes it easier for careful users to
use a different password for every site; if it forced this behaviour (vs. just
allowing it), it would get a higher score on this particular beneﬁt.
558
our assumption that a master password is being used. It
offers No-Trusted-Third-Party because the Sync data is pre-
encrypted locally before being stored on Mozilla’s servers.
It offers Requiring-Explicit-Consent because it pre-ﬁlls the
username and password ﬁelds but the user still has to press
enter to submit. Finally, it is as Unlinkable as passwords.
B. Proxy-based: URRSA
Proxy-based schemes place a man-in-the-middle between
the user’s machine and the server. One reason for doing so,
employed by Impostor [23] and URRSA [5] is to enable
secure logins despite malware-infected clients.
URRSA has users authenticate to the end server using
one-time codes carried on a sheet of paper. At registration
the user enters the password, Pj, for each account, j, to be
visited; this is encrypted at the proxy with thirty different
keys, Ki, giving Ci = EKi(Pj). The Ci act as one-time
codes which the user prints and carries. The codes are
generally 8-10 characters long; thirty codes for each of six
accounts ﬁt on a two-sided sheet. The keys, but not the
passwords, are stored at the proxy. At login the user visits
the proxy, indicates which site is desired, and is asked for the
next unused code. When he enters the code it is decrypted
and passed to the end login server: E−1
(Ci) = Pj. The
proxy never authenticates the user, it merely decrypts with
an agreed-upon key, the code delivered by the user.
Ki
Since it
requires carrying one-time codes URRSA
is Memorywise-Effortless, but not Scalable-for-Users or
Nothing-to-Carry. It is not Physically-Effortless but is Easy-
to-Learn. In common with all of the schemes that
in-
volve transcribing codes from a device or sheet it is not
Efﬁcient-to-Use. However, we do consider it to have Quasi-
Infrequent-Errors, since the codes are generally 8-10 charac-
ters. It does not have Easy-Recovery-from-Loss: a revocation
procedure is required if the code sheet is lost or stolen. Since
no passwords are stored at the proxy the entire registration
must be repeated if this happens.
In common with other paper token schemes it is not
Accessible. URRSA has Negligible-Cost-per-User. Rather
than have a user change browser settings, URRSA relies on a
link-translating proxy that intermediates trafﬁc between the
user and the server; this translation is not ﬂawless and some
functionality may fail on complex sites, thus we consider
it only Quasi-Server-Compatible. It is, however, Browser-
Compatible. It is neither Mature nor Non-Proprietary.
In common with other one-time code schemes it
is
not Resilient-to-Physical-Observation, since a camera might
capture all of the codes on the sheet. Since it merely inserts
a proxy it inherits many security weaknesses from the legacy
password system it serves: it is Quasi-Resilient-to-Targeted-
Impersonation and is not Resilient-to-Throttled-Guessing or
Resilient-to-Unthrottled-Guessing. It is Quasi-Resilient-to-
Internal-Observation as observing the client during authenti-
cation does not allow passwords to be captured, but breaking
the proxy-to-server TLS connection does. It inherits from
passwords the fact that it is not Resilient-to-Leaks-from-
Other-Veriﬁers, but the fact that it is Resilient-to-Phishing
from other one-time schemes. It is not Resilient-to-Theft nor
No-Trusted-Third-Party: the proxy must be trusted. It offers
Requiring-Explicit-Consent and is Unlinkable.
C. Federated Single Sign-On: OpenID
Federated single sign-on enables web sites to authenticate
a user by redirecting them to a trusted identity server which
attests the users’ identity. This has been considered a “holy
grail” as it could eliminate the problem of remembering dif-
ferent passwords for different sites. The concept of federated
authentication dates at least to the 1978 Needham-Schroeder
key agreement protocol [24] which formed the basis for
Kerberos [25]. Kerberos has inspired dozens of proposals
for federated authentication on the Internet; Pashalidis and
Mitchell provided a complete survey [26]. A well-known
representative is OpenID,5 a protocol which allows any web
server to act as an “identity provider” [27] to any server
desiring authentication (a “relying party”). OpenID has an
enthusiastic group of followers both in and out of academia,
but it has seen only patchy adoption with many sites willing
to act as identity providers but few willing to accept it as
relying parties [28].
In evaluating OpenID, we note that in practice identity
providers will continue to use text passwords to authenticate
users in the forseeable future, although the protocol itself
allows passwords to be replaced by a stronger mechanism.
Thus, we rate the scheme Quasi-Memorywise-Effortless in
that most users will still have to remember one master
password, but Scalable-for-Users as this password can work
for multiple sites. OpenID is Nothing-to-Carry like pass-
words and Quasi-Physically-Effortless because passwords
only need to be typed at the identity provider. Similarly,
we rate it Efﬁcient-to-Use and Infrequent-Errors in that
it is either a password authentication or can occur auto-
matically in a browser with cached login cookies for the
identity provider. However, OpenID has found that selecting
an opaque “identity URL” can be a signiﬁcant usability
challenge without a good interface at
the relying party,
making the scheme only Quasi-Easy-to-Learn. OpenID is
Easy-Recovery-from-Loss, equivalent to a password reset.
OpenID is favorable from a deployment standpoint, pro-
viding all beneﬁts except for Server-Compatible, includ-
ing Mature as it has detailed standards and many open-
source implementations. We do note however that it requires
identity providers yield some control over trust decisions