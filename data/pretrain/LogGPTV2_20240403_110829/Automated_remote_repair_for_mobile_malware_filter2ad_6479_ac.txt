Depending on the value of u, the user ID identiﬁed in the
previous step, the Airmid software initiates one or more of
the following repair actions: creation of kernel-protected lo-
cal ﬁrewall rules to block the malicious traﬃc, termination
of processes running under u, removal of the application
package (apk) owned by u, and removal of all ﬁles owned
by u. If u < 10000, then it is a system user ID correspond-
ing to a core service whose benign functionality may have
been subverted. Airmid will only block the malicious traﬃc
by creating appropriate ﬁrewall rules. If u ≥ 10000, then
u is an application user ID. Airmid will terminate all pro-
cesses running with ID u and will remove the application
package owned by u. We identify applications for removal
by parsing the ﬁle containing all installed application pack-
ages and the user IDs given to them Android at install-time
(/data/system/packages.xml). Finally, Airmid scans the
list of running processes to see if any native ARM processes
are executing with user ID u. If so, it scans the full storage
of the device to purge all ﬁles owned by u.
To ﬁrewall malicious traﬃc, the client interfaces with the
Android kernel’s netﬁlter [35] hooks to provide lightweight
packet ﬁltering. We add rules that prohibit traﬃc destined
HardwareHardenedkernelUser spaceMaliciousappAirmidPortsFile descriptorsStatic extensionsAppAppMalicious network trafﬁcFigure 4: Traversal of data structures to perform malicious traﬃc provenance of the mobile device.
Table 2: Average Command Execution Time (95%
conﬁdence interval)
Command
Factory Reset
Device Status (Process List)
Process Termination
File Removal
Device-Side Filtering Rule
Application Removal
1504
2991
6537
6115
7149
9174
Mean (µs) C.I. (µs)
± 38
± 48
± 1423
± 31
± 826
± 1123
for the IP addresses actively in use by processes owned by
u. Additional provenance checks determine all active IP ad-
dresses if more than one process is running under u. To pre-
vent observation or alteration of rules from userland, Airmid
does not register its rules with ip_tables but rather main-
tains its own shadow ip_tables data structure.
5.3 Performance evaluation
We characterize the overheads associated with the Airmid
architecture through a performance analysis. We measured
each operation 100 times and provide 95% conﬁdence inter-
vals.
We measured each of the operations discussed in Sec-
tion 4.2 and recorded very modest overheads for all proposed
functions. Table 2 summarizes our experiments. While
seemingly surprising, the factory reset function takes the
least time with an average of 1504 µs (±38µs). However, a
factory reset can be performed simply by deleting a single
conﬁguration ﬁle (data.img). The most expensive opera-
tion, application removal, requires the most time with an
average of 9174 µs (±1123µs). This result was also some-
what expected as it includes the costs of both process ter-
mination and deletion of multiple ﬁles.
These results demonstrate the lightweight nature of Air-
mid. Unlike more traditional anti-virus architectures, which
require regular scanning of all of the contents of the phone
(an operation taking on the order of 10s of seconds), our
approach attributes malicious behavior directly to an appli-
cation and allows a targeted response to be implemented.
This makes our approach more conscious of the power con-
straints associated with mobile devices.
6. DISCUSSION
The concept of automating remote infection identiﬁcation
and local device repair raises natural questions over the or-
ganizational control of remediation and the security of the
required on-device software.
6.1 Airmid control
Airmid provides a powerful architecture to respond to the
growing problem of mobile malware. While we believe that
this approach can help the vast majority of individual users,
we recognize that there exist numerous parties that may not
trust a cellular network provider to perform these opera-
tions. For instance, phones used by members of government
agencies or employees of a rival company may not wish to
outsource their malware remediation. We do not intend Air-
mid to be a “one size ﬁts all” solution and discuss how such
systems can be deployed in reality.
Our architecture is general enough such that the functions
described in this paper can be implemented by a separate en-
tity or cloud service. Many companies already require data
traﬃc from their corporate phones to be proxied via VPN
through their network.3 Such entities could simply deploy
3We note that the Blackberry BES provides VPN service
and oﬀers to limit the applications allowed to run on mo-
bile devices. Our architecture is more ﬂexible and does not
derive its protections from the explicit speciﬁcation of ap-
ﬁleProcesses:Ports:inet_hashinfotask_structtask_structtask_structﬁles_structfdtableﬁlehlist_nodesockhlist_headhlist_headhlist_headhlist_nodehlist_nodeMatchReturn:Process informationfrom task_structﬁleArray iterationArray iterationLinked list iterationLinked list iterationan Airmid-speaking service in their network and then con-
ﬁgure their devices (e.g., by changing keying material on
the device) to only accept commands from that server. In-
dividuals not wanting such control could similarly alert the
provider, perhaps through an out-of-band resource such as a
web interface or when the device/service plan is purchased.
We leave the debate over opt-in/opt-out strategies to the
policy community, but note that a range of economic incen-
tives could be provided to sway customers towards the use
of Airmid regardless of the chosen approach.
Airmid does not tie a device’s security to arbitrary cel-
lular providers. For instance, when traveling abroad, mo-
bile phones running the modiﬁed Airmid kernel would be
able to receive roaming telephony and data service as nor-
mal without providing their “visited” network with control
over Airmid’s functionality. We believe that this approach
is necessary as laws potentially protecting customers from
abuse by their provider domestically are unlikely to apply
internationally. While this means that misbehaving roaming
devices are more likely to simply be denied service by their
visited network (as is currently the practice), we believe that
this tradeoﬀ is ultimately more secure.
Lastly, the guarantees provided by Airmid are only as
good as the detection mechanisms used by the network sen-
sor. For instance, policies enacted against traﬃc from or
destined for known malicious domains or bots are likely to
be eﬀective. However, a system relying on an IDS reporting
any “anomalous” traﬃc will produce false positives. Accord-
ingly, these mechanisms must be selected carefully. We leave
this selection to future work, where we intend to observe and
further characterize the network traﬃc of large amounts of
mobile malware.
6.2 Device hardening
The correct operation of our architecture requires that the
device is able to protect the Airmid software. We chose to
do this in our proof of concept implementation by harden-
ing the stock Android Linux kernel through steps including
disabling dynamic loading of kernel modules. Given that
a signiﬁcant proportion of traditional malware abuses this
mechanism and that mobile devices generally do not take
advantage of this capability, we believe that this is a ﬁrst
strong step in preventing kernel compromise. However, we
recognize that deploying Airmid on real systems may require
additional hardening. An increasingly popular approach is
the use of virtualization. While a number of virtualization
solutions are evolving for mobile devices [29], we believe that
such mechanisms are relatively expensive and may them-
selves not yet be ready for widespread deployment. As our
threat model indicates, it is necessary to identify a protec-
tion layer with reasonable tradeoﬀs in which Airmid can
run. We believe that our approach is reasonable given cur-
rent mechanisms, but note that best practices for device
hardening are still an active research area.
7. CONCLUSION
As mobile devices begin to see an increasing volume of
malicious applications, the ability of application markets to
identify and remove such applications in a timely manner
will be lost. We respond to this problem by developing
Airmid, an automated system for the remote remediation
plications.
of mobile malware. Upon the detection of malicious traf-
ﬁc, the cellular network interacts directly with the source
device to identify the provenance of that traﬃc. The de-
vice can then perform remediation ranging from ﬁltering
the oﬀending traﬃc to uninstalling the application. We
then demonstrate that Airmid has very low overhead.
In
so doing, we demonstrate that the detection and removal of
malicious applications can scalably be outsourced to cellu-
lar providers and applications markets, ultimately providing
faster responses to infection.
Acknowledgments
We would like to thank Michael Iannacone, Ferdinand Schober
and our anonymous reviewers for their helpful comments in
the completion of this paper. This work was supported in
part by the US National Science Foundation (CNS-0916047).
Any opinions, ﬁndings, conclusions or recommendations ex-
pressed in this publication are those of the authors and
do not necessarily reﬂect the views of the National Science
Foundation.
8. REFERENCES
[1] 3rd Generation Partnership Project. General packet radio
service (GPRS). Technical Report 3GPP TS 23.060 v8.0.0.
[2] Airscanner AntiVirus for Windows Mobile, Accessed 2011.
http://www.airscanner.com/downloads/av/av.html.
[3] C. Albanesius. Google pulls malware-infected apps from
Android market. PCmag.com, June 2011.
[4] Android Developers. Security and permissions, Accessed
2011. http://developer.android.com/guide/topics/
security/security.html.
[5] V. Balasubramaniyan, A. Poonawalla, M. Ahamad,
M. Hunter, and P. Traynor. PinDr0p: Using Single-Ended
Audio Features to Determine Call Provenance. In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS), 2010.
[6] P. Biondi. Scapy.
http://www.secdev.org/projects/scapy/, Accessed 2011.
[7] A. Bose, X. Hu, K. G. Shin, and T. Park. Behavioral
detection of malware on mobile handsets. In Proceedings of
the International Conference on Mobile Systems,
Applications, and Services (MobiSys), June 2008.
[8] A. Bose and K. Shin. Proactive security for mobile
messaging networks. In Proceedings of the ACM Workshop
on Wireless Security (WiSe), Sept. 2006.
[9] Bullguard mobile antivirus, Accessed 2011.
http://www.bullguard.com/why/bullguard-mobile-
antivirus.aspx.
[10] R. E. Calem. Scam costs net users thousands in
transatlantic telephone bills. New York Times, Feb. 11,
1997.
[11] R. Cannings. Exercising our remote application removal
feature. Android developers blog, June 2010.
http://android-developers.blogspot.com/2010/06/
exercising-our-remote-application.html.
[12] R. Cannings. An update on Android market security.
Google Mobile blog, Mar. 2011.
http://googlemobile.blogspot.com/2011/03/
update-on-android-market-security.html.
[13] X. Chen, J. Andersen, Z. Mao, M. Bailey, and J. Nazario.
Towards an understanding of anti-virtualization and
anti-debugging behavior in modern malware. In
Proceedings of the IEEE International Conference on
Dependable Systems and Networks (DSN), June 2008.
[14] D. Dagon, T. Martin, and T. Starner. Mobile phones as
computing devices: The viruses are coming! IEEE
Pervasive Computing, 3(4):11–15, 2004.
[15] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS:
[30] L. Liu, G. Yan, X. Zhang, and S. Chen. Virusmeter:
Detecting privacy leaks in iOS applications. In Proceedings
of the ISOC Networking & Distributed Systems Security
Symposium (NDSS), Feb. 2011.
Preventing your cellphone from spies (sic). In Proceedings
of the Symposium on Recent Advances in Intrusion
Detection (RAID), Sept. 2009.
[16] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
[31] McAfee Labs. McAfee threats report: First quarter 2011,
P. McDaniel, and A. N. Sheth. TaintDroid: An
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. In Proceedings of the USENIX
Symposium on Operating Systems Design and
Implementation (OSDI), Oct. 2010.
[17] F-Secure mobile security, Accessed 2011. http://www.
f-secure.com/en_US/products/mobile/mobile-security/.
June 2011.
[32] D. Moore, G. M. Voelker, and S. Savage. Inferring Internet
denial-of-service activity. In Proceedings of the USENIX
Security Symposium, Aug. 2001.
[33] My Weather, Accessed 2011.
http://island.byu.edu/unclass/content/android-web-
service-app-my-weather-running-and-full-source-code.
[18] F-Secure Corporation. F-Secure computer virus
descriptions: Cabir, Dec. 2004.
http://www.f-secure.com/v-descs/cabir.shtml.
[19] F-Secure Corporation. F-Secure computer virus
descriptions: Mabir.A, Apr. 2005.
http://www.f-secure.com/v-descs/mabir.shtml.
[20] F-Secure Corporation. F-Secure computer virus
descriptions: Skulls.A, Jan. 2005.
http://www.f-secure.com/v-descs/skulls.shtml.
[21] F-Secure Corporation. F-Secure malware information
pages: Worm:SymbOS/Commwarrior, 2008.
http://www.f-secure.com/v-descs/commwarrior.shtml.
[34] Nanotweeter, Accessed 2011.
http://code.google.com/p/nanotweeter/.
[35] Netﬁlter/iptables project, Accessed 2011.
http://netfilter.org/.
[36] P. Porras, H. Saidi, and V. Yegneswaran. An analysis of
the iKee.B (Duh) iPhone botnet. Technical report, SRI
International, Dec. 2009.
[37] R. Schlegel, K. Zhang, X. Zhou, M. Intwala, A. Kapadia,
and X. Wang. Soundcomber: A stealthy and context-aware
sound trojan for smartphones. In Proceedings of the ISOC
Network and Distributed Systems Security (NDSS)
Symposium, Feb. 2011.
[22] T. Garﬁnkel, K. Adams, A. Warﬁeld, and J. Franklin.
[38] SecurityWeek News. New malware jumps to 73,000 samples
Compatibility is not transparency: VMM detection myths
and realities. In Proceedings of the Workshop on Hot
Topics in Operating Systems (HotOS), May 2007.
[23] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee.
BotHunter: Detecting malware infection through
IDS-driven dialog correlation. In Proceedings of the 16th
USENIX Security Symposium, Aug. 2007.
[24] C. Guo, H. J. Wang, and W. Zhu. Smart phone attacks
and defenses. In Proceedings of Third ACM Workshop on
Hot Topics in Networks (HotNets), Nov. 2004.
[25] Hack Forums. Windows botnet source, Accessed 2011.
http://www.hackforums.net/showthread.php?tid=108411.
[26] InfoSecurity.com. Premium rate calling Android malware
spotted in the wild, May 2011.
http://www.infosecurity-us.com/view/18301/
premium-rate-calling-android-malware-spotted-
in-the-wild/.
[27] Kaspersky mobile security, Accessed 2011.
http://www.kaspersky.com/mobile_downloads.
[28] H. Kim, J. Smith, and K. Shin. Detecting energy-greedy
anomalies and mobile malware variants. In Proceedings of
the International Conference on Mobile Systems,
Applications, and Services (MobiSys), June 2008.
[29] L4Android - Android on top of L4, Accessed 2011.
http://l4android.org/.
every day, says PandaLabs, Mar. 2011.
http://www.securityweek.com/
new-malware-jumps-73000-samples-every-day-says-
pandalabs.
[39] M. Shipman. Enter the hacker: New DroidKungFu
malware is bad news for Androids. The Abstract blog,
June 2011. http:
//web.ncsu.edu/abstract/technology/wms-droidkungfu/.
[40] A. Srivastava and J. Giﬃn. Tamper-resistant,
application-aware blocking of malicious network ﬂows. In
Recent Advances in Intrusion Detection (RAID),
Cambridge, Massachusetts, Sept. 2008.
[41] P. Traynor, M. Lin, M. Ongtang, V. Rao, T. Jaeger, T. La
Porta, and P. McDaniel. On cellular botnets: Measuring
the impact of malicious devices on a cellular network core.
In Proceedings of the ACM Conference on Computer and
Communications Security (CCS), Nov. 2009.
[42] T. Wimberly. Cyanogenmod in trouble? Android and Me
blog, Sept. 2009. http://androidandme.com/2009/09/
hacks/cyanogenmod-in-trouble/.
[43] N. Xu, F. Zhang, Y. Luo, W. Jia, D. Xuan, and J. Teng.
Stealthy video capturer: A new video-based spyware in 3G
smartphones. In Proceedings of the ACM Conference on
Wireless Network Security (WiSec), Mar. 2009.