5.1 Limitations and Improvements
During the evaluation phase, we discovered some limitations of
LibreCAN. First, not all possible values of a kinematic-related sig-
nal will be "exercised" with normal driving behavior. For instance,
RPM values over 3000 are unlikely due to the nature of automatic
transmissions, except in cases of aggressive acceleration. We tried
to compensate for this in Phase 0 by classifying signals as correct
even if we missed 20% of the Most Significant Bits (MSBs).
Second, for Phase 2, not all vehicles may have the 53 events de-
fined in Table 10. We conducted experiments on newer vehicles, but
cannot guarantee that older vehicles will have the same functional-
ities. These events are present on the IVN, but cannot be accessed
via the OBD-II port. A possible solution to this problem would be to
physically tap into the CAN bus by opening compartments. How-
ever, this voids the vehicle’s warranty, and hence is not feasible for
average drivers.
Third, our accuracy evaluations are somewhat subjective (as
discussed earlier) despite their reflection of inputs from multiple
other researchers. The only way to address this subjectivity would
be to involve the vehicle OEMs.
One can also make some improvements to LibreCAN. For in-
stance, a fine-grained analysis could be performed in Phase 2 to
identify the correct regions of the events within a CAN ID. Signal
extraction in Phase 0 could also be enhanced by leveraging the
Data Length Code (DLC) field in the CAN header (see Fig. 1). Fi-
nally, we could construct additional d signals that are not directly
available on SAE J/1979 or mobile phones. For example, steering
wheel angle (SWA) is a popular signal (especially in AVs) that we
could reconstruct using the gyroscope readings from a phone [34].
5.2 Other Use-Cases of LibreCAN
The main use-case of LibreCAN is as a tool for security researchers
or (white-hat) hackers. It can help them lower the car-hacking
barrier and allow vulnerabilities to be exploited faster. Another
potential use-case we envision for LibreCANis as a utility to enable
the development of apps for vehicles, both in industry and academia.
Big data generation and sharing will lead to the monetization of
driving data and create an additional source of revenue for OEMs
and services. According to PwC, by 2022 the connected car space
could grow to $155.9 billion, up from an estimated $52.5 billion in
2017 [50]. OEM-independent, universal access to data by third-party
service providers can make the latter a major player in automotive
data monetization. Third-parties already offer OBD-II dongles that
can access the in-vehicular network and obtain publicly available
data (OBD-II PIDs [13]). In particular, usage-based insurance (UBI)
companies [4, 5, 8, 11] are known to distribute dongles to track
driving behavior, allowing them to adjust insurance premiums.
As mentioned previously, CAN data contains richer information
Session 10A: Cyberphysical SecurityCCS ’19, November 11–15, 2019, London, United Kingdom2294than OBD-II PIDs and can be leveraged to build more powerful
third-party apps. This also encompasses academic research, which
usually has limited knowledge about vehicular data collection.
5.3 Countermeasures
Our point of entry to vehicles was the OBD-II port. Although we
only read data from this port (OBD-II and raw CAN data), it is
possible to inject CAN data into the vehicle via this port, as shown
by [33, 40, 42]. A very simple and intuitive, but also powerful,
solution to this attack would be to implement access control into
the vehicular gateway that the OBD-II port attaches to (see Fig. 3).
Recently, there have been efforts to secure IVNs from outside
attacks. For instance, the Society of Automotive Engineers (SAE)
is planning to harden the OBD-II port [12]. In the corresponding
SAE standard [10], data access via OBD-II (SAE J/1979) and Uni-
fied Diagnostic Services (ISO 14229-1) is categorized as intrusive
and non-intrusive, respectively. Nevertheless, this standard does
not classify how intrusive the actions of reading data via OBD-II
(Service 0x01 of J1979) or reading raw CAN data are.
In any case, these changes are only possible with an improved
vehicular gateway. This topic has been discussed since 2015 [26],
when coverage of car hacking by news outlets increased signifi-
cantly [9]. [7] also suggests enhancing existing gateway designs by
adding additional security measures, such as a firewall. The afore-
mentioned SAE standard [10] even hints that some OEMs might
want to continue without a gateway at all, primarily due to cost.
Finally, we want to point out existing academic work in this
area. Automotive gateways have many advantages for vehicle cy-
bersecurity as summarized in [36, 47]. In addition to traditional
functions such as routing, gateways can also be used for secure
CAN or Automotive Ethernet communications through the use of
authenticated ECUs [28, 36] or via access control/firewalls [35, 45].
6 RELATED WORK
6.1 Manual CAN Reverse Engineering
[21] extracted CAN messages using the OBD-II port, interpreted
those messages by examining how different bytes changed over
time given different actions being performed on/by the vehicle, and
then replayed these messages to manipulate their corresponding
functions. However, the experiment they performed is limited be-
cause it requires prior knowledge of the implementation details of
the vehicle — the paper mentions in several places that it is impor-
tant to have an understanding the specific car being hacked. They
also discuss the proprietary nature of the CAN bus and in-vehicle
E/E architecture, meaning that there could be differing numbers or
locations of CAN buses across different vehicle models, and thus
the functions of each bus could be split up differently. In order to
gain knowledge about the car they evaluated, they purchased a sub-
scription to an online data service that provided this information.
Other automotive attacks, such as [40, 42], require that the E/E
architecture be analyzed and that the CAN message format be
manually reverse-engineered before data can be injected. This is a
tedious process that can require days to weeks to reverse-engineer
a targeted portion of CAN data and is not scalable to other vehicles.
Additionally, several tools exist that can help manually reverse-
engineer CAN data. For instance, [23] demonstrates how Wireshark
can be leveraged to capture CAN traffic and visualize changing bits
in real time when an event is executed, as in our Phase 2.
6.2 Automating CAN Reverse-Engineering
[38] built an anomaly detection system to split CAN messages into
different fields/signals without prior knowledge of the message
format. Their classifier identified the boundaries and types of the
fields (Constant, Multi-Value, or Counter/Sensor).
READ [37] proposed an algorithm to split synthetic and recorded
CAN messages into signals, comparable to Stages 1 and 3 of our
Phase 0. They present methods to isolate counters and CRCs, with
all other values marked as physical signals, the type of signal we
seek to evaluate in Phase 1 of LibreCAN. Although they reported
high precision values (see Table 7), it is important to note that
their experiments were conducted on an older vehicle (confirmed
by e-mail to the authors), with less signals available in its DBC.
Along with LibreCAN, we report the best results of READ in the
aforementioned table.
ACTT [51] proposes a simple algorithm to extract signals from
CAN messages and label them using OBD-II PIDs. Their signal
extraction only considers signals that do not consist of contiguous
sets of constant bits. Furthermore, they do not distinguish between
signal types as we did. The authors find that roughly 70% of the
CAN traffic consists of constant bits (comparable to constant signals
in LibreCAN), matching only 16.8% of the present bits to OBD-II
PIDs. The paper also lacks an extensive evaluation, only showing
some examples of matched signals. Furthermore, they evaluated
their framework on an older vehicle from 2008 such as READ.
7 CONCLUSION
In this paper, we propose LibreCAN, an automated CAN bus reverse
engineering framework. To the best of our knowledge, this is the
first complete tool to reverse-engineer both kinematic- and body-
related data. LibreCAN has been tested extensively on four real
vehicles, showing similarly good results on all of them. It consists of
three phases: extracting signals from raw CAN recordings, finding
kinematic signals, and reducing body events to a minimal candidate
set by 10x. Besides the very high accuracy of the novel Phase 2, we
demonstrated that Phase 1 can achieve better precision than prior
related work.
In addition to achieving considerably good accuracy, LibreCAN re-
duces the tedious manual effort required to reverse-engineer CAN
bus messages to around 40 minutes on average. Since CAN reverse-
engineering is a crucial step in numerous automotive attacks, we
pride ourselves in overcoming the car hacking barrier and high-
lighting the importance of automotive security. The security by
obscurity paradigm that automotive OEMs follow by keeping CAN
translation tables proprietary needs to be overcome and replaced by
more advanced security paradigms. Finally, we also proposed some
countermeasures to mitigate attacks on vehicles if the aforemen-
tioned CAN translation tables are made public through frameworks
such as LibreCAN.
Session 10A: Cyberphysical SecurityCCS ’19, November 11–15, 2019, London, United Kingdom2295Table 7: Comparison to Related Work
Phase 0
LibreCAN
Phase 1
Phase 2
36.4%
82.6%
95.1%
Phase 0
97.1%
READ [37]
Phase 1
Phase 2
Phase 0
ACTT [51]
Phase 1
Phase 2
-
-
16.8%
47.7%
-
Precision (Phase 0 & 1)
Accuracy (Phase 2)
ACKNOWLEDGMENTS
The work reported in this paper was supported in part by NSF under
Grant CNS-1646130. Assistance from undergraduate researcher
Alice C. Ying is also gratefully acknowledged.
REFERENCES
[1] [n.d.]. AUTOSAR XML Schema. https://automotive.wiki/index.php/AUTOSAR_
XML_Schema
[2] [n.d.]. Barometric Formula. https://www.math24.net/barometric-formula/
[3] [n.d.]. Diagnostic Port Index.
https://teslamotorsclub.com/tmc/threads/
diagnostic-port-index.98663/
[4] [n.d.].
Drivewise - Allstate.
drivewise-device.aspx
https://www.allstate.com/drive-wise/
[5] [n.d.]. Esurance Insurance Company. https://www.esurance.com/drivesense
[6] [n.d.]. Power vs. Torque.
https://x-engineer.org/automotive-engineering/
internal-combustion-engines/performance/power-vs-torque/
[7] [n.d.].
data.
Steps-carmakers-need-to-make-to-secure-connected-car-data
Steps carmakers need to make to secure connected car
https://internetofthingsagenda.techtarget.com/blog/IoT-Agenda/
[8] [n.d.]. What is Snapshot and How You Can Save. https://www.progressive.com/
auto/discounts/snapshot/
[9] 2018. A Brief History of Car Hacking 2010 to the Present. https://smart.gi-de.
com/2017/08/brief-history-car-hacking-2010-present/
[10] . 2018. Diagnostic Link Connector Security. https://doi.org/10.4271/J3138_201806
[11] 2018. Drive Safe & Save™ – State Farm®. https://www.statefarm.com/insurance/
auto/discounts/drive-safe-save
[12] 2018. Sharpening the focus on OBD-II security. https://www.sae.org/news/2017/
02/sharpening-the-focus-on-obd-ii-security
[13] 2019. OBD-II PIDs. https://en.wikipedia.org/wiki/OBD-II_PIDs
[14] 2019. On-board diagnostics.
https://en.wikipedia.org/wiki/On-board_
diagnostics#OBD-II_diagnostic_connector
[15] Gabriel Brindusescu.
2015.
Through Its OnStar System.
darpa-hacked-a-chevy-impala-through-its-onstar-system-video-92194.html
DARPA Hacked a Chevy Impala
https://www.autoevolution.com/news/
[16] Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, Stefan Savage, Karl Koscher, Alexei Czeskis, Franziska Roesner, Ta-
dayoshi Kohno, et al. 2011. Comprehensive experimental analyses of automotive
attack surfaces. In Proceedings of the 20th USENIX Security Symposium (USENIX
Security ’11). USENIX, 77–92.
[17] Dongyao Chen, Kyong-Tak Cho, Sihui Han, Zhizhuo Jin, and Kang G Shin. 2015.
Invisible sensing of vehicle steering with smartphones. In Proceedings of the 13th
Annual International Conference on Mobile Systems, Applications, and Services.
ACM, 1–13.
[18] Kyong-Tak Cho and Kang G Shin. 2016. Fingerprinting electronic control units
for vehicle intrusion detection. In 25th {USENIX} Security Symposium ({USENIX}
Security 16). 911–927.
[19] Clemson Vehicular Electronic Laboratory. [n.d.]. Clemson Vehicular Electronics
Laboratory: Automotive Electronic Systems. https://cecas.clemson.edu/cvel/
auto/systems/auto-systems.html
[20] CSS Electronics. [n.d.]. CAN Bus Explained - A Simple Intro (2019).
//www.csselectronics.com/screen/page/simple-intro-to-can-bus/language/en
[21] R Currie. 2017. Hacking the can bus: basic manipulation of a modern automobile
https:
through can bus reverse engineering. SANS Institute (2017).
[22] Ebroecker. [n.d.]. ebroecker/canmatrix. https://github.com/ebroecker/canmatrix/
wiki/signal-Byteorder
[23] CSS Electronics. [n.d.].
hicle Data (Wireshark).
reverse-engineering-can-bus-messages-with-wireshark/language/en
CAN Bus Sniffer - Reverse Engineering Ve-
https://www.csselectronics.com/screen/page/
[24] CSS Electronics.
[n.d.].
Time (Wireshark, J1939).
dbc-database-can-bus-conversion-wireshark-j1939-example/language/en
CAN DBC File - Convert Data in Real
https://www.csselectronics.com/screen/page/
[25] Elm Electronics, Inc. [n.d.]. OBD. https://www.elmelectronics.com/products/
ics/obd/
[26] Equipment and Tool Institute. 2015. The case for a Vehicle Gateway. url: http:
//www.eti-home.org/TT-2015/Presos/ETI-ToolTech_2015_Gateway.pdf.
[27] Arun Ganesan, Jayanthi Rao, and Kang Shin. 2017. Exploiting consistency among
heterogeneous sensors for vehicle anomaly detection. Technical Report. SAE Tech-
nical Paper.
[28] Kyusuk Han, André Weimerskirch, and Kang G Shin. 2014. Automotive cyberse-
curity for in-vehicle communication. In IQT QUARTERLY, Vol. 6. 22–25.
[29] Julietkilo. 2017. julietkilo/kcd. https://github.com/julietkilo/kcd
[30] Min-Joo Kang and Je-Won Kang. 2016. Intrusion detection system using deep
neural network for in-vehicle network security. PloS one 11, 6 (2016), e0155781.
[31] Kalwinder Kaur. 2019. Accelerator Pedal Position Sensors vs. Throttle Position
Sensors. https://www.azosensors.com/article.aspx?ArticleID=51
[32] Auguste Kerckhoffs. 1883. La cryptographie militaire. Journal des sciences
militaires 9 (1883), 5–38.
[33] Karl Koscher, Alexei Czeskis, Franziska Roesner, Shwetak Patel, Tadayoshi Kohno,
Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, et al. 2010. Experimental security analysis of a modern automobile. In
Security and Privacy (SP), 2010 IEEE Symposium on. IEEE, 447–462.
[34] Xinhua Liu, Huafeng Mei, Huachang Lu, Hailan Kuang, and Xiaolin Ma. 2017.
A vehicle steering recognition system based on low-cost smartphone sensors.
Sensors 17, 3 (2017), 633.
[35] Feng Luo and Shuo Hou. 2019. Security Mechanisms Design of Automotive
Gateway Firewall. In WCX SAE World Congress Experience. SAE International.
https://doi.org/10.4271/2019-01-0481
[36] Feng Luo and Qiang Hu. 2018. Security Mechanisms Design for In-Vehicle
Network Gateway. In WCX World Congress Experience. SAE International. https:
//doi.org/10.4271/2018-01-0018
[37] Mirco Marchetti and Dario Stabili. 2019. READ: Reverse Engineering of Automo-
tive Data Frames. IEEE Transactions on Information Forensics and Security 14, 4
(April 2019), 1083–1097. https://doi.org/10.1109/TIFS.2018.2870826
[38] Moti Markovitz and Avishai Wool. 2017. Field classification, modeling and
anomaly detection in unknown CAN bus networks. Vehicular Communications 9
(2017), 43–52.
[39] Kirsten Matheus and Thomas Königseder. 2017. Automotive ethernet. Cambridge
[40] Charlie Miller and Chris Valasek. 2014. Adventures in Automotive Networks and
University Press.
Control Units.
[41] Charlie Miller and Chris Valasek. 2014. A survey of remote automotive attack
surfaces. black hat USA 2014 (2014), 94.
[42] Charlie Miller and Chris Valasek. 2015. Remote exploitation of an unaltered
passenger vehicle. Black Hat USA 2015 (2015), 91.
[43] Jose Pagliery. 2014. Tesla car doors can be hacked. https://money.cnn.com/2014/
03/31/technology/security/tesla-hack/
[44] Mert D. Pesé, Arun Ganesan, and Kang G. Shin. 2017. CarLab: Framework
for Vehicular Data Collection and Processing. In Proceedings of the 2Nd ACM
International Workshop on Smart, Autonomous, and Connected Vehicular Systems
and Services (CarSys ’17). ACM, New York, NY, USA, 43–48. https://doi.org/10.