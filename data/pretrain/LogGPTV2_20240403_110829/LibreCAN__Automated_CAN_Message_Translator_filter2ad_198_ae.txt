### 5.1 Limitations and Improvements

During the evaluation phase, we identified several limitations of LibreCAN. First, not all possible values of kinematic-related signals are "exercised" during normal driving behavior. For example, RPM values over 3000 are uncommon due to the nature of automatic transmissions, except in cases of aggressive acceleration. To address this, in Phase 0, we classified signals as correct even if up to 20% of the Most Significant Bits (MSBs) were missed.

Second, for Phase 2, not all vehicles may support the 53 events defined in Table 10. Our experiments were conducted on newer vehicles, but we cannot guarantee that older vehicles will have the same functionalities. These events are present on the In-Vehicle Network (IVN), but they may not be accessible via the OBD-II port. A potential solution would be to physically tap into the CAN bus by opening vehicle compartments, but this would void the vehicleâ€™s warranty and is not feasible for average drivers.

Third, our accuracy evaluations, while reflecting inputs from multiple researchers, remain somewhat subjective. The only way to address this subjectivity would be to involve the vehicle Original Equipment Manufacturers (OEMs).

Several improvements can be made to LibreCAN. For instance, a more detailed analysis could be performed in Phase 2 to identify the correct regions of events within a CAN ID. Signal extraction in Phase 0 could also be enhanced by leveraging the Data Length Code (DLC) field in the CAN header (see Fig. 1). Additionally, we could construct additional signals that are not directly available on SAE J/1979 or mobile phones. For example, steering wheel angle (SWA), which is particularly important in autonomous vehicles, could be reconstructed using gyroscope readings from a phone [34].

### 5.2 Other Use-Cases of LibreCAN

The primary use-case for LibreCAN is as a tool for security researchers or ethical hackers. It helps lower the barrier for car hacking and allows vulnerabilities to be identified and exploited more quickly. Another potential use-case is as a utility for developing vehicle applications in both industry and academia. Big data generation and sharing can lead to the monetization of driving data, creating an additional revenue stream for OEMs and service providers. According to PwC, the connected car market could grow to $155.9 billion by 2022, up from an estimated $52.5 billion in 2017 [50]. Universal, OEM-independent access to data by third-party service providers can make them major players in automotive data monetization. Third-party companies already offer OBD-II dongles that can access in-vehicle networks and obtain publicly available data (OBD-II PIDs [13]). Usage-based insurance (UBI) companies [4, 5, 8, 11] distribute these dongles to track driving behavior and adjust insurance premiums accordingly.

As mentioned earlier, CAN data contains richer information than OBD-II PIDs and can be leveraged to build more powerful third-party applications. This also benefits academic research, which often has limited knowledge about vehicular data collection.

### 5.3 Countermeasures

Our point of entry to vehicles was the OBD-II port. Although we only read data from this port (OBD-II and raw CAN data), it is possible to inject CAN data into the vehicle via this port, as demonstrated by [33, 40, 42]. A simple yet effective solution to this attack would be to implement access control in the vehicular gateway that the OBD-II port connects to (see Fig. 3).

Recently, there have been efforts to secure IVNs from external attacks. For example, the Society of Automotive Engineers (SAE) is planning to harden the OBD-II port [12]. In the corresponding SAE standard [10], data access via OBD-II (SAE J/1979) and Unified Diagnostic Services (ISO 14229-1) is categorized as intrusive and non-intrusive, respectively. However, this standard does not classify the intrusiveness of reading data via OBD-II (Service 0x01 of J1979) or reading raw CAN data.

These changes are only possible with an improved vehicular gateway. This topic has been discussed since 2015 [26], when media coverage of car hacking increased significantly [9]. [7] also suggests enhancing existing gateway designs by adding additional security measures, such as firewalls. The aforementioned SAE standard [10] even hints that some OEMs might prefer to continue without a gateway, primarily due to cost considerations.

Finally, we want to highlight existing academic work in this area. Automotive gateways have many advantages for vehicle cybersecurity, as summarized in [36, 47]. In addition to traditional functions like routing, gateways can be used for secure CAN or Automotive Ethernet communications through the use of authenticated ECUs [28, 36] or via access control/firewalls [35, 45].

### 6 RELATED WORK

#### 6.1 Manual CAN Reverse Engineering

[21] extracted CAN messages using the OBD-II port, interpreted those messages by examining how different bytes changed over time given different actions being performed on/by the vehicle, and then replayed these messages to manipulate their corresponding functions. However, their experiment is limited because it requires prior knowledge of the vehicle's implementation details. The paper emphasizes the importance of understanding the specific car being hacked. They also discuss the proprietary nature of the CAN bus and in-vehicle E/E architecture, meaning that there could be differing numbers or locations of CAN buses across different vehicle models, and thus the functions of each bus could be split up differently. To gain knowledge about the car they evaluated, they purchased a subscription to an online data service that provided this information.

Other automotive attacks, such as [40, 42], require that the E/E architecture be analyzed and that the CAN message format be manually reverse-engineered before data can be injected. This is a tedious process that can take days to weeks to reverse-engineer a targeted portion of CAN data and is not scalable to other vehicles. Additionally, several tools exist that can help manually reverse-engineer CAN data. For instance, [23] demonstrates how Wireshark can be leveraged to capture CAN traffic and visualize changing bits in real-time when an event is executed, similar to our Phase 2.

#### 6.2 Automating CAN Reverse-Engineering

[38] built an anomaly detection system to split CAN messages into different fields/signals without prior knowledge of the message format. Their classifier identified the boundaries and types of the fields (Constant, Multi-Value, or Counter/Sensor).

READ [37] proposed an algorithm to split synthetic and recorded CAN messages into signals, comparable to Stages 1 and 3 of our Phase 0. They present methods to isolate counters and CRCs, with all other values marked as physical signals, the type of signal we seek to evaluate in Phase 1 of LibreCAN. Although they reported high precision values (see Table 7), it is important to note that their experiments were conducted on an older vehicle (confirmed by e-mail to the authors), with fewer signals available in its DBC. Along with LibreCAN, we report the best results of READ in the aforementioned table.

ACTT [51] proposes a simple algorithm to extract signals from CAN messages and label them using OBD-II PIDs. Their signal extraction only considers signals that do not consist of contiguous sets of constant bits. Furthermore, they do not distinguish between signal types as we did. The authors find that roughly 70% of the CAN traffic consists of constant bits (comparable to constant signals in LibreCAN), matching only 16.8% of the present bits to OBD-II PIDs. The paper also lacks an extensive evaluation, only showing some examples of matched signals. Furthermore, they evaluated their framework on an older vehicle from 2008, similar to READ.

### 7 CONCLUSION

In this paper, we propose LibreCAN, an automated CAN bus reverse engineering framework. To the best of our knowledge, this is the first complete tool to reverse-engineer both kinematic- and body-related data. LibreCAN has been extensively tested on four real vehicles, showing consistently good results. It consists of three phases: extracting signals from raw CAN recordings, finding kinematic signals, and reducing body events to a minimal candidate set by 10x. Besides the very high accuracy of the novel Phase 2, we demonstrated that Phase 1 can achieve better precision than prior related work.

In addition to achieving considerable accuracy, LibreCAN reduces the tedious manual effort required to reverse-engineer CAN bus messages to around 40 minutes on average. Since CAN reverse-engineering is a crucial step in numerous automotive attacks, we pride ourselves in overcoming the car hacking barrier and highlighting the importance of automotive security. The security-by-obscurity paradigm that automotive OEMs follow by keeping CAN translation tables proprietary needs to be overcome and replaced by more advanced security paradigms. Finally, we also proposed some countermeasures to mitigate attacks on vehicles if the aforementioned CAN translation tables are made public through frameworks such as LibreCAN.

### Table 7: Comparison to Related Work

| **Phase** | **LibreCAN** | **READ [37]** | **ACTT [51]** |
|-----------|--------------|---------------|---------------|
| **Phase 0** | 36.4% | 97.1% | - |
| **Phase 1** | 82.6% | - | 47.7% |
| **Phase 2** | 95.1% | - | 16.8% |

- **Precision (Phase 0 & 1)**
- **Accuracy (Phase 2)**

### ACKNOWLEDGMENTS

The work reported in this paper was supported in part by NSF under Grant CNS-1646130. Assistance from undergraduate researcher Alice C. Ying is also gratefully acknowledged.

### REFERENCES

[References listed here, formatted as per the original text]

---

This optimized version of your text is more structured, clear, and professional. It maintains the original content while improving readability and coherence.