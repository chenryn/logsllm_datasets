by some another linear expression as
Ah(b, s) =
wN (h)
wL(h)
kibi ⊕
i=1
j=1
lj sj,
kj , li ∈ F2.
(3)
In the case of Grain the function h(·) is as follows.
zt =h(b, s) = bt + bt+63 + st+25 + st+3st+64 + st+46st+64
+ st+64bt+63 + st+3st+25st+46 + st+3st+46st+64
+ st+3st+46bt+63 + st+25st+46bt+63 + st+46st+64bt+63
We have found eight appropriate approximations that will
be used in our attack later.
Ah(b, s) = bt + st+25 + st+64 + n1
Ah(b, s) = bt + st+25 + st+46 + st+64 + n2
Ah(b, s) = bt + st+3 + st+25 + n3
Ah(b, s) = bt + st+3 + st+25 + st+64 + n4
Ah(b, s) = bt + st+3 + st+25 + st+46 + n5
Ah(b, s) = bt + st+3 + st+25 + st+46 + st+64 + n6
Ah(b, s) = bt + st+3 + st+46 + st+64 + n7
Ah(b, s) = bt + st+3 + st+64 + n8
additionally introduce wN (Ah) noise variables ng. Accumu-
lating all above and following to the Pilling-up Lemma [15],
the ﬁnal correlation of such a sum (of the linear expression
on s) is given in the following Theorem.
Theorem 1. For the class of “Grain” family of stream
ciphers, there always exist a linear relation in terms of bits
from the state of the LFSR and the keystream, which have
the bias
 = 2(wN (Ah)+wN (Ag )−1) · wN (Ah)
g
· wN (Ag )
h
,
where Ag(·) and Ah(·) are linear approximations of the func-
tions g(·) and h(·), respectively, and
Pr{Ag(·) = g(·)} = 1/2+g,
Pr{Ah(·) = h(·)} = 1/2+h.
Theorem above shows that a proper choice of the functions
g(·) and h(·) is important, since they are directly connected
to the correlation between the keystream and the state of the
LFSR. To show how this Theorem works we derive a biased
relation for the stream cipher Grain below. This expression
is achieved from the expressions (2) and (5) as follows.
zt + zt+80
bias=(2−3)2
=
(4)
=
(st+25 + st+64 + bt) + (st+80+25
+ st+80+64 + bt+80)
(st + st+25 + st+64 + st+105 + st+144)
+ (bt + bt+80 + st)
(2)⇒bias=22·2−6·40·2−11
=
st + st+25 + st+64 + st+105 + st+144
where
Pr{n2i+1 = 0} = 1/2 + 2−3
Pr{n2i+2 = 0} = 1/2 − 2−3
for i = 0, 1, 2, 3.
where
f (x)
=
st+j,
j∈A
For further investigation we, for simplicity, consider only
the ﬁrst approximation. Then, to avoid any ambiguity,
the approximated expression for the output bit can now be
rewritten as
(p= 1
2 +2−3)
=
zt
p
Recall, zt
st+25 + st+64 + bt.
(5)
3.3 Deriving the Final Correlation Expressions
= Ah(·)t with some probability p. Having the
expressions (1) and (3), one can sum up together wN (Ag(·))
expressions of Ah(·) at diﬀerent time instances t, such that
all terms b will be eliminated (just because the terms b
will be cancelled due to the parity check function Ag(·)),
remaining the terms s and noise variables only. Note also
that any linear combination of Ah(·)t is a linear combination
of the keystream bits zt.
The sum of wN (Ag(·)) approximations Ah(·) will intro-
duce wN (Ag(·)) independent noise variables due to the ap-
proximation nh : h(·) → Ah(·) at diﬀerent time instances.
Moreover, the cancellation of the terms b in the sum will
be done by the parity check property of the approximation
Ag(·).
If the function Ah(·) contains wN (Ah) number of
terms from b, then the parity cancellation expression Ag(·)
will be applied wN (Ah) times. Each application of the can-
cellation expression Ag(·) will introduce another noise vari-
able due to the approximation ng : g(·) → Ag(·). Therefore,
the wN (Ah) times application of the expression Ag(·) will
A = {5, 13, 15, 23, 25, 26, 29, 31, 33, 34, 36, 38, 41,
51, 56, 59, 60, 62, 68, 69, 75}.
In this expression, eg = −5 · 2−8, eh = 2−3, wN (Ag) =
2, wN (Ah) = 1, therefore, the ﬁnal bias for this linear rela-
tion is
 = −22 · 5 · 2−8 · (2−3)2 ≈ −2−9.678.
Theorem 1 also gives us criteria for a proper choice of the
functions g(·) and h(·). The biases g and h are related to
nonlinearity of Boolean functions, and the values wN (Ag)
and wN (Ah) are related to the correlation immunity prop-
erty; however, there is a well-known trade-oﬀ between these
two properties [16]. Unfortunately, in the case of Grain the
functions g(·) and h(·) were chosen improperly.
4. GENERAL DECODING PROBLEM AND
A KEY-RECOVERING ATTACK
In the general decoding problem (DP) (see Figure 2) we
are given an LFSR with known generating polynomial f (·).
The output bits of the LFSR are passing through the binary
symmetric channel (BSC), where the probability the symbol
to be corrupted is p = 1/2 − , and the bias  > 0 is usually
small. Then, observing the output from the BSC u1, u2, . . .,
one has to recover the initial state of the LFSR.
From simple coding arguments [17] there is a well-known
fact that to recover the initial state uniquely, one have to

LFSR
BSC
u1, u2, . . .
Figure 2: General decoding problem.
observe the output sequence of length at least
L ≈
n
1 − h(p)
,
where n is the length of the LFSR, and h(p) is the binary
entropy function. I.e., the initial state of the stream cipher
Grain could theoretically be recovered if L ≈ 18604655 ≈
224.2 bits of the keystream are available. It has also been
shown that the decoding problem is hard. However, for some
special cases diﬀerent decoding algorithms can be applied,
that can recover the initial state much faster than exhaustive
search. These techniques are usually called fast correlation
attacks, some of them are introduced in, e.g. [18, 19, 20, 21,
22], and other literature.
In this section we show that cryptanalysis of the “Grain”
family of stream ciphers can easily be converted to the gen-
eral decoding problem, with the same bias, the one derived
in the previous section.
Let St = (st, . . . , st+n−1) be the state of the LFSR at
time instance t. I.e., the initial state is S0. It is well-known
that any state St can be expressed via the initial state S0
by the multiplication on some n × n matrix R several times
as follows.
St = S0 × Rt.
(6)
In the previous section we have shown how to ﬁnd a lin-
ear relation between the keystream bits zt, zt+1, . . ., and the
output bits produces from the LFSR st, st+1, . . ., for any
time instance t. This relation can also be expressed as
ut =
zt+i
p
=
st+j,
i∈B
j∈A
where A and B are some sets of indices, and u is another
stream directly derived from z. We apply the formula (6)
to derive the relation to the decoding problem as follows.
Ut = (ut, . . . , ut+n−1)
p
=
S0 × Rt+j
j∈A
= (S0 ×
j∈A
Rj ) × Rt = Y0 × Rt.
I.e., we have shown that the sequence u is the sequence from
the same LFSR, but with another initial state Y0, which is
uniquely related to the original initial state S0. The proba-
bility p is the correlation probability derived in the previous
section, and it remains unchanged. We state this result in
the form of the following Theorem.
Theorem 2. Key-recovering cryptanalysis of the “Grain”
family of stream ciphers can be converted to analysis of the
general decoding problem. Therefore, the strengthness of the
ciphers in this class is based on the diﬃculty to solve the
general DP.
For the stream cipher Grain, a new sequence u is deﬁned
as (B = {0, 80})
ut = zt + zt+80.

The matrix Q = j∈A
Rj is of full rank (which is not nec-
essary always the case). Therefore, observing the sequence
u we actually observe the output from the LFSR with the
same generating polynomial f (x), but another initial state
Y0 = S0 × Q.
5. DISTINGUISHING ATTACK ON GRAIN
In a linear distinguishing attack one observes the keystream
and collects the samples from it. These samples form the
type PType, or empirical distribution.
If the observed se-
quence is from the cipher, then the type will converge to
the cipher distribution PCipher. If, otherwise, the stream is
from a truly random generator, then the type will converge
to the random distribution PRandom. The convergence is as
close to the original distribution as the number of samples
N goes to inﬁnity.
A distinguisher is a decision function δ, which distin-
guishes the type between the distributions PCipher and PRandom,
and can be deﬁned as follows.
δ(PType) =
0,
1,
if PCipher ← PType,
if PRandom ← PType.
The number of samples N is strongly related to the dis-
tance ∆ between PCipher and PRandom
∆ = |P1 − P2| =
|P1(x) − P2(x)|.