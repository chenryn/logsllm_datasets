mismatch or match based on the matching results.
• Searching: Search function takes an array of length 𝑛 whose
elements are encrypted 0 or 1 (𝑛 is the number of elements) as
input, outputs the encrypted indexes of all non-zero elements
in the array entered.
• Output: According to the output of the searching step, the
server returns ciphertext corresponding to the index. After
the client decrypts it with the private key (𝑠𝑘), the required
plaintext can be obtained.
This gives a single round protocol with low communication, the
client only needs to input the encrypted lookup value, and the
server will return matched encrypted items to the client, as shown in
Figure 2. Specifically, the communication complexity is proportional
only to the sizes of the input and output ciphertexts, while using
prior secure multi-party computation (MPC) techniques (see [18,
19, 32]), the cost is proportional to the size of the search function.
It should be noted that this protocol can easily be extended to
multi-client and multi-server situation. All clients should have ac-
cess to the private key, and thus can upload their encrypted lookup
value and decrypt returned results. We can apply our algorithm on
every server, then gather the outputs together.
In the matching step, matching function refers to determining
whether two plaintexts corresponding to two ciphertexts satisfy
the certain condition when given two ciphertexts. There’s a lot of
research on matching function, see Section 9 for details. In this
paper, we mainly focus on improving the searching part.
Intuitively, the whole process seems very simple, however, due to
the inefficient operation of homomorphic multiplication, there are
still many difficulties and requirements in the design of a specific
algorithm. Specifically, since the time that homomorphic multiplica-
tion costs are absolutely dominant compared with other operations,
the goal of our algorithm design is to reduce the number of multi-
plications as much as possible.
At the same time, when utilizing the leveled fully homomorphic
algorithm, we must consider the depth parameter 𝐿 of the algorithm.
Because choosing a larger depth parameter will increase the time
consumption of a single homomorphic operation as mentioned
before, we need to reduce the depth required by the entire algorithm
as much as possible while reducing the multiplication number.
Note that we may describe the searching polynomial in terms
of its (multiplicative) depth or degree depending on the context.
One should not be confused with these two notions, and in gen-
eral depth ≈ log degree for bounded fan-in circuits. That is, for
AND gates with fan-in bounded by 𝐵, the depth of Π𝑑𝑒𝑔𝑟𝑒𝑒
𝑥𝑖 is
minimized using the balanced 𝐵-ary tree evaluation such that
depth ≈ log𝐵 degree, where 𝐵 is a small constant (typically 2) and
thus often omitted, see Figure 10 in Appendix B as an example.
We now show the most relevant works: Secure Search on FHE En-
crypted Data, which addresses the same formulation as considered
in our work:
Folklore: This is the most direct and intuitive solution for secure
search on FHE encrypted data. For an encrypted array 𝑣 ∈ {0, 1}𝑛
to be searched, the search polynomial is (𝑝 > 𝑛):
𝑖=1
Folklore(𝑣) =
(1 − 𝑣[ 𝑗]) · 𝑖 mod 𝑝
𝑛
𝑖=1
𝑣[𝑖] · 𝑖−1
𝑗=1
This method will iterate through each item, resulting in ineffi-
cient server runtime due to evaluating 𝑂(𝑛) degree polynomials,
in addition, the protocol also requires 𝑂(𝑛2) multiplications, for 𝑛
the number of items.
SPiRiT: A breakthrough work by Akavia, Feldman, and Shaul ap-
peared in CCS18 [1], only needs to evaluate a polynomial of de-
gree 𝑂(log3 𝑛). The authors use Fermat’s theorem as a normalized
function which leads to a high degree. This algorithm requires
post-processing and requires 𝑂(𝑛 log2 𝑛) multiplications.
AGHL: The prior state-of-the-art for secure search on FHE en-
crypted data appeared in a recent work of Akavia, Gentry, Halevi
and Leibovich [2], where the server can evaluate a polynomial only
with logarithmic degree 𝑂(log 𝑛) to get the results without post-
processing and can be implemented on 𝐺𝐹(2). Their work uses a
low-degree polynomial to compute the OR operations of the first
𝑖 items, and put the result in the 𝑖-th item. Their work requires
𝑂(𝑛 log 𝑛) multiplications.
In this paper, our main motivation is to find a more efficient
search algorithm which reduces the number of multiplications and
computational depth as much as possible.
2.2 Overview of Our Techniques
As described in Section 2.1, the search algorithm will receive an
array of which elements are 0 or 1 as input and output all non-
zero elements’ indexes and corresponding contexts. Without loss
of generality, we will only consider returning the first non-zero
item’s coordinate in this paper as previous works [1, 2]. In summary,
𝑢
0
1
0
0
0
0
1
0
1
0
1
0
0
0
0
1
0
𝑣[𝑖] = RS-OR(𝑢[1], 𝑢[2], . . . , 𝑢[𝑖])
𝑣
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
𝑜𝑢𝑡 [𝑖] = 𝑣[𝑖] − 𝑣[𝑖 − 1]
𝑜𝑢𝑡
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
Figure 3: Schematic diagram of AGHL algorithm, first we
change the value of each number in the array to the OR re-
sult of this number and all the numbers before this number
in the array to obtain a stepped array, then calculate pairwise
difference to get the pulse array.
our goal is to find the first non-zero item in an unsorted FHE en-
crypted array in the searching step, while minimizing the number
of multiplications and required depth.
At present, the prior state-of-the-art algorithm (AGHL) is pro-
posed by Akavia et al.[2], the schematic diagram of their algorithm
is shown in Figure 3. Roughly speaking, AGHL algorithm’s key idea
is changing the value of each element in the array to the OR result
of this element and all the elements before this element in the array.
Since any number OR 1 will result in 1, thus if the first non-zero
element appears, all the elements after this element will be changed
to 1, then compute pairwise differences of adjacent indexes, we
can obtain a pulse array containing only one 1 without revealing
any information, which could lead to a binary representation of
the first non-zero item’s coordinate. To reduce the depth, a low-
degree approximation method for OR called RS-OR (see definition
in Section 3.3) is applied.
In this paper, we utilize the Localization, Extraction and Recon-
struction techniques to propose a more efficient algorithm, whose
multiplication complexity is consistent with plaintext search asymp-
totically, more precisely, reduce the number of multiplications from
𝑂(𝑛 log 𝑛) to 𝑂(𝑛).
10
0
0
0
0
1
0
1
0
1
0
0
0
0
1
0
Step:Localization
0
1
0
0
Step:Extraction
0
Step:Reconstruct
0
0
0
0
0
1
1
0
1
0
0
0
0
0
0
0
0
0
0
Figure 4: The basic framework of LEAF, after the localiza-
tion step, it is determined the interval in which the target
item is located, then applied extraction step to extract this
interval, and finally the reconstruction step is used to obtain
the array we need.
Key Intuition: We derive the intuition behind our algorithm from
two observed facts:
(1) In AGHL algorithm, RS-OR operation is the main source of
multiplication.
the operation is 1, the result of the operation is 1.
(2) In OR operation, if at least one of the elements involved in
According to (1), to improve the efficiency of the algorithm, we
hope to reduce RS-OR operations as much as possible. Utilizing
(2), we can locate the first non-zero item to a smaller interval and
thus reduce RS-OR operations on the non-target interval. Then we
use AGHL algorithm to find the first non-zero item in this small
interval. Combining the above two position information, we can
obtain the position information of the first non-zero item in the
original array.
For the sake of easy understanding, we take Figure 4 as an ex-
ample: the length of the array is 16 (𝑛 = 16), and we divide it into
four equal length intervals, each with a length of 4, we create a
new array of length 4, where the 𝑖-th item of the array indicates
whether the 𝑖-th interval of the original array contains the first
non-zero item, the second element of the array in the figure is 1,
indicating that the first non-zero item in the original array appears
in the interval of 5 to 8. Next, we extract the interval containing
the first non-zero item, and use AGHL algorithm to get the offset of
the first non-zero item in this interval which is 2. Combined with
the previous position information, we can get the coordinate of the
first non-zero item in the original array, which is 4 + 2 = 6.
One major difficulty is how to extract the target interval while
don’t increase degree too much. In plaintext case, we can directly
utilize indexes to get the target interval, however, it will not work
in ciphertext case since the indexes are encrypted. PIR could be
applied to solve this problem without further interaction, but will
introduce additional 𝑂(log 𝑛) function degree, even worse, PIR can
only retrieve one item at a time, we have to utilize PIR several times,
which will be time-consuming.
In this paper, we propose a technique call Extraction to solve
this problem, while only increasing a constant to the depth of the
circuit. The key idea behind this technique is that we can obtain
more position information in our protocol compared with only
know the encrypted indexes.
Later in this paper, to complete our protocol, we propose a re-
trieval algorithm that will not further increase our full protocol’s
depth, by adjusting the multiplication structure.
We also provide some suggestions on algorithm optimization, so
that the efficiency could be further improved in the implementation,
see details in Section 8.
3 PRELIMINARIES
In this section, we introduce notations, security model and neces-
sary building blocks for establishing our algorithm in Section 4.
3.1 Notations
Denote [𝑛] = {1, . . . , 𝑛}. For an array 𝑣, we denote 𝑣[𝑖] the 𝑖-th ele-
ment in 𝑣. We enumerate array entries starting from entry number
1, unless stated otherwise.
We use 𝑥 to represent the ciphertext of 𝑥 with some homomor-
phic encryption scheme. For a field F, vectors 𝑣, 𝑢 ∈ F𝑛 and 𝑘 ∈ [𝑛],
denote ⟨𝑣, 𝑢⟩ =𝑛
𝑖=1 𝑣[𝑖] · 𝑢[𝑖] mod 2, prefix𝑘(𝑣) = (𝑣1, . . . , 𝑣𝑘) ∈
F𝑘, suffix𝑘(𝑣) = (𝑣𝑘+1, . . . , 𝑣𝑛) ∈ F𝑛−𝑘, and |𝑣| the size of 𝑣.
In this paper, RS-OR refers to Razborov-Smolenski method as de-
scribed in definition 3.1, and PPT denotes probabilistic polynomial
time. We define pulse array as an array in which only one element
is 1 and the others are 0. Stepped array is defined as an array where
elements are all 0 before the first 1 appears, and others are all 1
after the first 1 appears.
3.2 Security Model
In our scenario, the server is compromised by a semi-honest and
computationally bounded adversary who will not deviate from the
protocol but try to learn additional information in polynomial-time.
The use of semantically secure homomorphic encryption ensures
that the adversary learns nothing substantial more than the scale
of computation and length of ciphertext.
Since the protocol itself returns all matches, allowing the server
to know the number of matches, we can let the client decides
whether to continue the next match search after finding a cer-
tain number of matches in the subsequent interaction design to
solve this problem.
3.3 Razborov-Smolenski Method
The Razborov-Smolenski method [26, 29] is a low-degree approxi-
mation algorithm for OR, which reduces the degree of OR from 𝑛
to log( 𝑛
𝜀 ) by introducing an error parameter 𝜀. This technique is
applicable in 𝐺𝐹(𝑞) for any 𝑞 ≥ 2, but we only consider the case of
𝑞 = 2 in this paper.
Definition 3.1 (Razborov-Smolenski Method). For any 𝑘-bit
prefix (𝑣[1], . . . , 𝑣[𝑘]) ∈ {0, 1}𝑘 of the vector of 𝑛 binary indica-
tor values, we can calculate the approximation OR result of these 𝑘
values in the following way: Select 𝑁 (𝜀) = ⌈log( 𝑛
𝜀 )⌉ independent
uniformly random 𝑟1, . . . , 𝑟𝑁 (𝜀) ∈ {0, 1}𝑛, compute the parity of the
corresponding random subset of entries,
𝑘
𝑖=1
𝑝(𝑟 𝑗) =
𝑟 𝑗 [𝑖] · 𝑣[𝑖] mod 2
Next, compute the OR of these parity values using the standard degree
𝑁 (𝜀) polynomial for the logical-OR of 𝑁 (𝜀) binary values:
RS-OR(𝑣[1], . . . , 𝑣[𝑘]) = OR(cid:0)𝑝(𝑟1), . . . , 𝑝(𝑟𝑁 (𝜀))(cid:1)
(cid:0)1 − 𝑝(𝑟 𝑗)(cid:1) mod 2
𝑁 (𝜀)