title:SPOKE: Scalable Knowledge Collection and Attack Surface Analysis
of Access Control Policy for Security Enhanced Android
author:Ruowen Wang and
Ahmed M. Azab and
William Enck and
Ninghui Li and
Peng Ning and
Xun Chen and
Wenbo Shen and
Yueqiang Cheng
SPOKE: Scalable Knowledge Collection and Attack
Surface Analysis of Access Control Policy for Security
Enhanced Android
Ruowen Wang1 Ahmed M. Azab1 William Enck2
Ninghui Li3
Peng Ning1
Xun Chen1
Wenbo Shen1 Yueqiang Cheng1
{ruowen.wang, a.azab, peng.ning, xun.chen, wenbo.s, y.cheng}@samsung.com
1Samsung Research America
2North Carolina State University
PI:EMAIL
3Purdue University
PI:EMAIL
ABSTRACT
SEAndroid is a mandatory access control (MAC) framework
that can conﬁne faulty applications on Android. Neverthe-
less, the eﬀectiveness of SEAndroid enforcement depends on
the employed policy. The growing complexity of Android
makes it diﬃcult for policy engineers to have complete do-
main knowledge on every system functionality. As a result,
policy engineers sometimes craft over-permissive and ineﬀec-
tive policy rules, which unfortunately increased the attack
surface of the Android system and have allowed multiple
real-world privilege escalation attacks.
We propose SPOKE, an SEAndroid Policy Knowledge En-
gine, that systematically extracts domain knowledge from
rich-semantic functional tests and further uses the knowl-
edge for characterizing the attack surface of SEAndroid pol-
icy rules. Our attack surface analysis is achieved by two
steps: 1) It reveals policy rules that cannot be justiﬁed by
the collected domain knowledge. 2) It identiﬁes potentially
over-permissive access patterns allowed by those unjustiﬁed
rules as the attack surface. We evaluate SPOKE using 665
functional tests targeting 28 diﬀerent categories of function-
alities developed by Samsung Android Team. SPOKE suc-
cessfully collected 12,491 access patterns for the 28 cate-
gories as domain knowledge, and used the knowledge to re-
veal 320 unjustiﬁed policy rules and 210 over-permissive ac-
cess patterns deﬁned by those rules, including one related to
the notorious libstagefright vulnerability. These ﬁndings
have been conﬁrmed by policy engineers.
Keywords
Mandatory Access Control; Android; SELinux; SEAndroid;
1.
INTRODUCTION
Security-Enhanced Android (SEAndroid), also known as
SELinux in Android, is a framework to enforce a Mandatory
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052991
Access Control (MAC) policy on native access operations in
an Android system [7]. SEAndroid is capable of limiting
the impact of attacks by conﬁning malicious and compro-
mised applications. However, the protection is only as good
as the SEAndroid policy. Ideally, SEAndroid strives to de-
ﬁne a least-privilege [35] policy for subjects. However, in
reality, policy engineers deﬁne the policy in a more conser-
vative manner, meaning the policy is deﬁned to allow access
patterns that could be unnecessary to the functionality re-
quired by the Android system. Unfortunately, allowing un-
necessary access patterns increases the attack surface of the
SEAndroid policy and the target Android system.
This conservative policy development is the result of mul-
tiple factors: 1) policy engineers have incomplete domain
knowledge of knowing what exact access patterns are re-
quired by the system; and 2) the consequences of breaking
functionality or mistakenly impacting user experience are
signiﬁcant. Designing a good SEAndroid policy requires do-
main knowledge of the entire set of various Android function-
alities, which also continuously grow in their complexity. As
a result, it becomes increasingly diﬃcult for particular indi-
viduals, or teams, to possess the domain knowledge required
for developing an eﬀective policy. Policy engineers, who are
responsible for writing the policy, cannot obtain the domain
knowledge on every system functionality. At the same time,
functionality developers usually lack SEAndroid and secu-
rity expertise to write policy rules on their own. In other
words, there is a knowledge gap between policy engineers
and functionality developers.
The impact of this knowledge gap on the policy attack
surface was recently demonstrated by two real-world attacks
on Android. Both resulted from policy rules that were de-
ﬁned to allow unnecessary access patterns. In the ﬁrst ex-
ample, a pre-installed keyboard app in a popular Android
device was mistakenly over-granted unnecessary access per-
mission, which caused privilege escalation (CVE-2015-4640,
CVE-2015-4641). In the second example, a vulnerability in
a system daemon was successfully exploited via an access
pattern that was mistakenly allowed by an outdated unnec-
essary policy rule (CVE-2015-3825). These two examples
show that policy engineers lack proper knowledge about the
required access patterns of system functionality. This result
is also conﬁrmed by a recent study [34] that showed multiple
Android devices have vendor-modiﬁed policies that are less
strict and have wider attack surface than Google’s baseline
policy.
1
In this paper, we propose SPOKE, an SEAndroid POlicy
Knowledge Engine that identiﬁes potentially unnecessary at-
tack surface in SEAndroid policy by bridging the knowledge
gap between policy engineers and functionality developers.
To achieve this goal, SPOKE provides three capabilities.
First, SPOKE constructs a knowledge base of functionality-
required access patterns extracted from semantically rich
functional tests. Second, SPOKE uses the knowledge base
to identify potentially unnecessary access patterns but al-
lowed by certain policy rules. Finally, SPOKE analyzes the
attack surface of these policy rules by generating a bipartite
graph depicting the access patterns between subjects and
objects. It further aids policy engineers to triage potentially
unnecessary access patterns and corresponding policy rules
by highlighting areas of high risk.
We implemented a prototype of SPOKE for Samsung An-
droid Team, and evaluated it by taking inputs of 665 func-
tional tests for 28 diﬀerent categories of functionalities in
Android framework, including application installation, blue-
tooth/WiFi/location/ﬁrewall management, etc. SPOKE suc-
cessfully collected 12,491 low-level access patterns correlated
with 1,492 high-level functionality traces of rich-semantic
APIs as the domain knowledge. With this knowledge base,
SPOKE ﬁrst identiﬁed 1,036 rules out of a total of 1,356
relevant policy rules that are necessary (or partially so) to
corresponding functionalities. In the remaining 320 poten-
tially unnecessary policy rules, SPOKE further identiﬁed
210 over-permissive access patterns, including an access pat-
tern related to the libstagefright vulnerability [5]. Policy
engineers have conﬁrmed the ﬁndings and revised the policy.
In summary, this work makes three contributions:
1. We propose SPOKE, a novel knowledge collection and
analysis engine that bridges the knowledge gap be-
tween policy engineers and functionality developers.
2. We implement SPOKE by ﬁrst building a knowledge
extraction platform that systematically and scalably
collects domain knowledge from rich semantic func-
tional tests, and second, creating an analysis engine
to identify potentially unnecessary policy rules, which
can aid attack surface analysis of a policy.
3. We evaluate SPOKE using 665 functional tests tar-
geting security functionalities provided by Samsung
Android Team. SPOKE successfully collects 12,491
access patterns and 1,492 functionality trace as the
domain knowledge. SPOKE further uses this knowl-
edge to identify 210 over-permissive access patterns.
SPOKE’s ﬁndings help policy engineers identify and
ﬁx the risky policy rules.
We note that SPOKE’s performance is directly related to
the coverage of functional tests used to deﬁne the knowl-
edge base. However, a perfect set of functional tests is not
required to beneﬁt from SPOKE. Even using functional tests
with low coverage, SPOKE can still work. As test coverage
increases, the value of SPOKE linearly increases by collect-
ing more domain knowledge and analyzing more policy rules
iteratively. Thus, we design SPOKE as a dynamic and scal-
able system for continuous operation. Empirically, with rea-
sonable test suites used in the industry, SPOKE can provide
valuable insights and new ﬁndings for policy engineers and
functionality developers, as we show in Section 5.
denied
{ write } for pid=4685
type=1400 audit(1445635785.573:220):
avc:
comm="ContactsProvide" name="contacts.db"
path="/data/data/contacts_app/contacts.db"
scontext=u:r:untrusted_app:s0
tcontext=u:object_r:app_data_file:s0
tclass=file
type=1300 audit(1445635785.573:220):
syscall=25 success=yes exit=0 pid=4685
uid=10024 gid=10024 comm="ContactsProvide"
exe="/system/bin/app_process64"
subj=u:r:untrusted_app:s0
Listing 1: A simpliﬁed access event example recorded at the epoch
time 1445635785.573 in an audit log, with two entries: subject &
object with labels and permission (1400), syscall info (1300).
2. BACKGROUND AND DEFINITIONS
2.1 SEAndroid Basics
SEAndroid is a port of SELinux [38] to Android with ex-
tensions to support Android-speciﬁc features, such as Binder
IPC [37]. The goal of SEAndroid is to reduce attack sur-
face and contain damage if any vulnerability is exploited
for privilege escalation, via MAC enforcement on native ac-
cesses (i.e., system calls) between subjects (e.g., processes)
and objects (e.g., ﬁles, sockets) in Android system.
An SEAndroid policy has two parts. The ﬁrst part is
a mapping that assigns security labels to concrete subjects
(or objects) sharing the same semantics. Traditionally, a
subject label is called a domain. An object label is called
a type. The second part is a set of rules that deﬁne which
domain of subjects can access which class and type of objects
with a set of permissions [28]. For example,
allow app app_data_file:file {read write}
allows processes with app domain to read and write ﬁle ob-
jects with app_data_file type. Since SEAndroid policy
is a whitelist-based policy, allow rules are the rules used
for runtime enforcement.
In the rest of this work, we re-
fer to allow rules as major policy rules. Apart from allow
rules, to avoid malicious accesses being mistakenly allowed,
neverallow rules encode malicious accesses that should not
be allowed and are checked against allow rules at compile
time. During runtime, if no allow rule can match an access
event, the access event will be denied and logged [8] (Section
4.1.2 introduces a new way of logging access events).
An access event usually has two entries1 as shown in List-
ing 1. The ﬁrst entry (type=1400) records the access opera-
tion between speciﬁc subject (by comm) and file object (by
path), with their security labels untrusted_app,app_data-
_file and permission write. The second entry (type=1300)
captures more details of the related system call and the sub-
ject information such as uid,gid.
Traditionally, policy engineers develop and reﬁne policy
rules by manually analyzing the access events. Only a few
basic tools (e.g., setools [9]) previously in SELinux can be
used for SEAndroid. Such tools can only perform manual
and syntactic analysis with no domain knowledge. Particu-
larly, a tool called audit2allow can directly transform se-
curity labels in type=1400 entry of an access event into an
allow rule. However, it could cause coarse-grained security
1
Previously, there was an object entry, which is merged into 1400.
2
labels to be used inappropriately, which is one security issue
mentioned in [34].
2.2 SEAndroid Deﬁnitions
To clarify the concepts of SEAndroid, we present the fol-
lowing deﬁnitions. We ﬁrst introduce the deﬁnition of access
pattern, which is one of the key concepts used in this work.
Definition 1
(Access Pattern). An access pattern is
a 4-tuple a = (s, o, c, p). It denotes a concrete subject ‘s’ ac-
cesses a concrete object ‘o’ of class ‘c’ with permission ‘p’.
An access pattern can be either extracted from corre-
sponding items in a raw access event, or deﬁned in the set of
allowed accesses by a policy rule. In the ﬁrst case, s is a ﬁne-
grained concrete value extracted from scontext, comm (com-
mand), exe (executable) and pid in an access event. Simi-
larly, o is extracted from tcontext, name and path. c is from
tclass and p is the permission. For example, the access pat-
tern of Listing 1 is (‘contacts_app’, ‘/data/data/con-
tacts_app/contacts.db’, ‘file’,‘write’). The second
case is explained as following.
Definition 2
(SEAndroid Policy). A policy is P =
(Ls, Lo, M, S, O, R), where Ls, Lo are the set of security la-
bels of subjects and objects, M : Ls ∪ Lo (cid:55)→ S ∪ O is a
mapping that assigns security labels to concrete subjects S
and objects O, R = {r} is the set of policy allow rules.
In SPOKE, we parse the compiled SEAndroid policy and
store each element in P as a database table. Concrete sub-
jects and objects are collected from devices that are either in
a clean state (e.g., after factory-reset) or running functional
tests (test-only temporary subjects/objects are excluded).
Now given a policy rule r ∈ R: “allow ls lo : cr Pr”, we
further deﬁne it as the following.
Definition 3
(Policy Rule). A policy rule is a tuple
r = (ls, lo, Sr, Or, cr, Pr, Ar), where subject label ls ∈ Ls,
object label lo ∈ Lo. Sr = M (ls) and Or = M (lo) are
the sets of concrete subjects and objects mapped with the
labels, respectively. cr is the class of the objects, Pr is the