Current approaches: existing isolation mechanisms are
either too coarse-gained or too costly to resolve all
the
logical/performance interferences. For example, network seg-
mentation mechanisms (e.g.vLAN) cannot support ﬁne-grained
isolation at a subnet
level [73], e.g., host1 and host2 in
Figure 2 cannot be isolation as they share the same subnet.
Fig. 3: A typical APT attack: ﬁrewall and IPS lacks the
context and visibility to prevent internal exploit and data
exﬁltration.
Then to provide isolation using distributed Firewall/IPS tech-
niques would require costly distributed Firewall/IPS hardware
deployed for each device and rewiring the network.
Context: By deﬁnition, enforcing security intents as discussed
in §II-A requires taking into account the context of devices.
To illustrate why this is challenging in practice, Figure 3
shows an advanced persistent threat (APT) [10] in the example
network. The goal of the attacker is to compromise server2
and exﬁltrate sensitive data. To do so, the attacker can use a
stealthy strategy: exploiting several blind spots in the defense
(F W1, IP S1 and vLAN at s2 and s3). In the ﬁrst step, the
attacker compromises a laptop in a loosely protected home
network with malware. Then, the attacker uses the laptop (as
a BYOD device) to access other enterprise network devices.
Unfortunately,
that BYOD laptop is accessing
server1 is not visible to F W1 and IP S1 for enforcing more
stringent policies. Next, the attacker compromises server1
from the laptop with internal scan and exploits, uses it to
get through the segmented vLANs between s2 and s3, and
exﬁltrate data from server1.
the context
Current approaches: Perimeter defenses (F W1, IP S1)
lack visibility and context about devices inside the network.
Similarly, vLAN are coarse and lack context about server1
across two subnets. Even if we use distributed Firewall/IPS
and deploy two IPSes at s2 and s3, the fact that server1
is accessed by a BYOD laptop is hidden from IPS at s2
(could be access from host3?). This is because DHCP may
dynamically assigns IPs to laptop and host3, and the IPS
cannot distinguish them by IP address (i.e., hidden context);
Ideally, we want the enforcement mechanism to be logically
deep inside the network and have ﬁne-grained visibility into
the security relevant context of individual devices.
Fig. 4: Does defense system have the agility to mitigate a
multistage attack [5]?
Agility: Security postures need to be updated as the context of
3
laptop	server1	host3	server2	1.	2.	3.	4.	1.	Malware	2.	BYOD	3.	Internal	scan	&	exploit	4.	data	exﬁltra?on	AAacker	FW1	IPS1	s3	DHCP	s2	s0	!me	0:	Zero-day		exploits	Flash		host1		IPS1	a+acker	!me	1:	User	ini!ated	Exploit	Kit	download	host1		IPS1	www.drovemee5ng.in	host1		host2		!me	2:	Inside	a>ack		with	Exploit	Kit	legi5mate	web	request?(cid:1)new	security	posture?(cid:1)signatures?(cid:1)a device may change. Figure 4 describes a multi-stage attack on
our example network similar to those seen in recent incidents
[5]. At time 0, host1 receives a phishing mail containing a
zero-day attack exploiting a Flash Player vulnerability. At
time 1, the host1 contacts a drive-by-download website and
install a powerful toolkit Magnitude EK [11]. The infected
host1 initiates the download (so the defender does not block
the outgoing request), the attacker uses a short-lived name for
the download (so the site is not blacklisted). The (dynamic)
context here is host1 is accessing a suspicious website and
getting infected. At time 2, host1 contacts and infects host2
using the toolkit, bringing it under the botnet’s control. Note
that the attacker dynamically adjusted the attack posture by
using different techniques at each step, as described in § II-B,
which makes it hard for static defenses to mitigate.
Current approaches: To address such dynamic attacks, we
need to change the network defenses across different stages.
For example, from time 0 to time 1, the administrator would
need to reconﬁgure the defense mechanisms from checking
for malicious destination IPs in packet headers to checking
for suspicious ﬁle download with DPI. From time 1 to time
2, having determined that host1 might have been compro-
mised, the administrator would want to subject host1’s trafﬁc
to heavier intrusion prevention to prevent potential exploits
against critical resources such as host2. However, adjusting the
behavior of existing systems, such as distributed Firewall/IPS,
is difﬁcult as they are constrained by topology; e.g., placing
an IPS ﬁlter in inline mode on demand requires rewiring the
network topology and routing. In addition, changes need to
happen at the time scale of minutes or seconds. Unfortunately,
current approaches are not designed to evolve at such ﬁne
timescales.
In summary, these motivating scenarios highlight that isola-
tion, context, and agility are fundamental requirements that any
enterprise network security strategy should provide. However,
existing approaches exhibit key shortcomings on one or all
of these dimensions, as they are constrained by the network
topology, the use of ﬁxed hardware-based defenses, and by
static policy abstractions. Our goal in designing PSI is to
address these pain points.
III. SYSTEM OVERVIEW
In this section, we begin with an idealized approach to
address the above problems and highlight why realizing it with
current techniques may incur high cost and complexity. Then,
we describe the PSI architecture and show how PSI leverages
recent advances in SDN/NFV to realize this ideal approach.
We conclude by highlighting key technical challenges that we
address in designing PSI.
Idealized solution: Let us consider an ideal solution that can
provide the desired isolation, context, and agility. We start with
a collection of integrated “omnipotent” security appliances that
can perform any of the necessary security functions; e.g., Layer
3 ﬁrewall, DPI, anti-virus, and application-level ﬁrewalling. We
ensure that each device has one of these appliances physically
connected as its immediate “next hop”. Finally, we employ
a global policy enforcement algorithm that can dynamically
conﬁgure these appliances in real-time to add/drop processing
modules as needed and change the conﬁguration; e.g., invoking
Fig. 5: A high-level view of the PSI.
the DPI module on-demand for TCP ﬂows to suspicious
destinations.
By construction,
this design addresses the pain points
mentioned earlier. First, since we have a dedicated processing
appliance per-device, the policy applied is logically isolated
and there is no cross-device performance interference due
to multiplexing. Second, because this appliance is directly
connected to the device it is protecting, it has all the relevant
processing context needed to apply a given security posture.
Finally, the rules and modules can be added/dropped dynami-
cally to provide the necessary agility to change the posture.
Challenges with the idealized solution: Unfortunately, the
approach described above is impractical on several fronts.
First, in terms of deployment complexity, we need a dedicated
hardware appliance attached to every device. Even ignoring
the complexity of rewiring the network, this is an uphill task
given the number of wireless, mobile, and virtualized devices.
The second issue is cost; adding as many physical hardware
appliances as there are devices is a non-starter for medium-
to-large scale enterprise networks with tens of thousands of
devices. Third, such an omnipotent device that can dynamically
reconﬁgure its trafﬁc processing does not exist today. While
future solutions (e.g., [59]) may offer such a consolidated
appliance, we have to embrace the practical concern that
security functions are fragmented across different vendors with
diverse capabilities. Finally, even if we had the appliances,
the policy abstractions offered by current frameworks are not
expressive enough to capture agile security postures.
The obvious question then is whether we can realize the
ideal solution with low cost, without requiring changes to the
existing network topology, and by using existing appliance
capabilities? In a nutshell, this is the practical problem that
PSI solves.
PSI approach: To address this problem, PSI decouples the
deployment of security appliances from topological constraints
by tunneling a device’s trafﬁc to a server cluster ψcluster.2
This ψcluster can provide an appropriate appliance for any
2PSI read as the Greek symbol ψ.
4
PSI	ψcluster(cid:1)					Orchestra0on(cid:1)Policy	Engine(cid:1)tunneling	policy		Detect	Scan	DPI		Detect	Scan	ψmboxes(cid:1)events	launch/conﬁgure	context	intent	PSI	Controller	Control	Plane(cid:1)Data	Plane(cid:1)Scan		Detector	DPI	Exﬁltra2on	Detector	Original	Enterprise	Network	trafﬁc, on demand. To address the cost issue, PSI leverages
NFV to build “tiny” virtualized appliances (ψmbox in Fig-
ure 5) to share commodity hardware and reduce cost. Note
that one commodity server can support up to hundreds of such
appliances [46]. To address the lack of dynamic omnipotent
appliances, PSI uses SDN capabilities to compose existing
appliances (e.g., Snort or Bro) to dynamically steer the trafﬁc
within the ψcluster.
Incremental deployability: To deploy PSI, the enterprise
needs to add a pool of commodity server machines. Each
device’s ﬁrst-hop edge switch is conﬁgured to tunnel packets
to/from the device to the gateway switch of the ψcluster. Note
that this tunneling capability is supported even in commodity
non-SDN switches. Note that we need SDN and NFV capa-
bilities only inside the ψcluster, which is easy to deploy [14].
PSI walkthrough: Next, we conceptually walk through the
various components of PSI. The PSI PolicyEngine takes as
input the high-level security posture from the administrator and
translates these into per-device intents. The Orchestration mod-
ule enforces these intents by launching/conﬁguring ψmboxes
and switches. Each device’s trafﬁc is tunneled to/from, and
processed, in the ψcluster. Event from the ψmbox or switch
are sent to the Orchestration module and passed to Policy
Engine. The logic in PolicyEngine will update the intent based
on the context, and the Orchestration module dynamically
launches and/or reconﬁgures the ψmboxes (and switches)
based on the updated intent.
Isolation, context and agility provided by PSI: Now let’s
brieﬂy explain how PSI framework provides the isolation,
context and agility desired. For isolation, the Orchestration
module will assign a number of dedicated ψmboxes to each
device, and by default allocate a ﬁxed amount of CPU cores
and memory to each ψmbox. To isolate the logic, each device
has dedicated policies enforced by its dedicated ψmboxes so
that updating the policies will not effect the other devices. For
context, PSI attaches the detection and mitigation ψmboxes to
the device’s next-hop switches with tunneling, so the trafﬁc
from/to the device can not bypass the security enforcements.
Therefore, PSI has full visibility to all the context of a device
and there is no “blind spot” that attackers can exploit. For
agility, PSI simpliﬁes and speeds up the procedure to update
security postures. Deploying new security function is as simple
as launching a few virtualized instances, avoiding the high cost
of deploying hardwares. Similarly, the network conﬁguration
is simpliﬁed as PSI automatically translates the security policy
to context-based forwarding on switches and ψmboxes.
Challenges: Given this overview, two key challenges remain:
• Expressive policy abstractions (§IV): Traditional policy ab-
stractions (e.g., in ﬁrewall, IDS, ACL) that rely on a simple
if-match-then-action paradigm are not sufﬁcient for the
agile and context-aware defenses we envision. To this end,
we develop an expressive policy abstraction based on an
intuitive combination of ﬁnite state machines to capture
the security state and directed acyclic graphs to capture
context-based security actions. We design a Policy Engine
that interpret the policy abstraction and computes the real-
time security intent updates for each device based on the
current context.
• Scalable and responsive orchestration (§V): Naive orchestra-
tion schemes to realize PSI would cause several scalability
and responsiveness problems. For instance, naively send-
ing the ﬁrst packet of every context change to a central
controller introduces new control plane attacks [29], [64].
Naive scheme to launch new ψmboxes instances at every
context change wastes time and resources (CPU/memory).
Finally, if the orchestration cannot scale out, the attacker can
easily overload the system of PSI. To address these issues,
we develop a scalable orchestration platform using a com-
bination of proactive orchestration, pre-fetched installation
of ψmboxes, and horizontal scaling.
IV. PSI POLICY ABSTRACTION
In this section, we identify key expressiveness requirements
that PSI policies should satisfy and then describe our solution.
A. Requirements
We begin by highlighting three key requirements that the
PSI policy abstraction should meet to help the administrator
to express intents that govern how the devices’ trafﬁc should
be processed/forwarded.:
• Context-based forwarding & processing: The administrator
should be allowed to deﬁne a set of context for each device,
and express forwarding & processing based on the context.
For example, if a host is sending oversized DNS packets
(detected by header checker), the administrator should be
allowed to deﬁne a context to note that a host is suspicious
for data exﬁltration (DNS-based), and speciﬁes that
the
oversized DNS packets should be forwarded to a DPI for
payload check to prevent potential data exﬁltration.
• Agile intent evolution: The administrator’s intent over a
device’s trafﬁc may evolve over time as the context changes.
For instance, if a host initiated a HTTP connection to a
suspicious website, the context is changed from host is
normal to host is suspicious, and the inbound trafﬁc to this
host should be put under deeper scrutiny (e.g., DPI) to stop
malicious downloads.
• Supporting legacy aggregate policies: Given that existing
deployments use security functions that monitor many de-
vices, there may be legacy policies that an administrator
may want to deﬁne over aggregated views of the trafﬁc,
e.g., per department policies or global policies [18]. The
PSI policy abstraction should also be able to express such
legacy policies.
A natural question then is whether prior policy abstrac-
tions can satisfy the requirements. We evaluated a num-
ber of existing approaches including distributed Firewall/IPS
conﬁgurations (Cisco’s PIX [9],Bro [51]) and more recent
SDN policy languages (Kinetic [43], Merlin [67], Group-based
Policies (GBP) [18], PGA [52]), and found that they cannot
meet the ﬁrst two requirements. For distributed Firewall/IPS
conﬁgurations, the context and agility that can be expressed
is limited to one type of tools, e.g., a ﬁrewall cannot tell
a oversized packet to be forwarded to a IPS for DPI. We
qualitatively evaluated distributed Firewall/IPS conﬁgurations
in the coverage test in Section VII-A, and the result shows
that the context-based and agile policies prevented 35% more
potential attacks than distributed Firewall/IPS conﬁgurations.
5
Fig. 6: Express context-based intent with ψDAG.
Similarly, SDN policy languages are largely limited to switch
contexts (packet header attributes), and their agility is limited
to static forwarding capabilities.
Our goal in designing the PSI policy abstraction is not to
claim a novel theoretical or programming language contribu-
tion (e.g., [31], [54]). Rather, it is a practical abstraction for
capturing context-dependent and agile processing.
B. High-Level Ideas
Context-based processing: To enable administrator to ex-
press trafﬁc forwarding and processing based on context,