# 七、使用 Weave 网络
在本章中，我们将介绍以下食谱:
*   安装和配置 Weave
*   运行 Weave 连接的容器
*   理解 Weave IPAM
*   使用 Weave 域名系统
*   Weave 安全
*   使用 Weave 网络插件
# 简介
Weave Net(简称 Weave)是 Docker 的第三方网络解决方案。在早期，它为用户提供了 Docker 固有功能之外的附加网络功能。例如，在 Docker 开始支持用户定义的覆盖网络和嵌入式 DNS 之前，Weave 就提供了覆盖网络和 **WeaveDNS** 。然而，随着最新版本的发布，Docker 已经开始从网络角度与 Weave 实现功能对等。话虽如此，Weave 仍然有很多可以提供的，并且是第三方工具如何与 Docker 交互以提供容器网络的一个有趣的例子。在本章中，我们将介绍安装和配置 Weave 的基础知识，以便与 Docker(T2)一起工作，并从网络的角度描述 Weave 的一些功能。虽然我们将花一些时间演示 Weave 的一些特性，但这并不是整个 Weave 解决方案的操作指南。Weave 有许多特性，本章不做介绍。我建议您查看他们的网站，了解关于特性和功能的最新信息([https://www.weave.works/](https://www.weave.works/))。
# 安装和配置 Weave
在本食谱中，我们将介绍 Weave 的安装以及如何在 Docker 主机上提供 Weave 服务。我们还将展示 Weave 如何处理连接希望加入 Weave 网络的主机。
## 做好准备
在本例中，我们将使用我们在[第 3 章](03.html "Chapter 3. User-Defined Networks")、*用户定义网络*中使用的相同实验室拓扑，其中我们讨论了用户定义的覆盖网络:
![Getting ready](img/B05453_07_01.jpg)
您将需要两台主机，最好其中一些位于不同的子网。假设本实验中使用的 Docker 主机处于默认配置。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
Weave 是通过 Weave 命令行界面工具安装和管理的。下载后，它不仅管理与 Weave 相关的配置，还管理 Weave 服务的供应。在要配置的每台主机上，只需运行以下三个命令:
*   将 Weave 二进制文件下载到您的本地系统中:
    ```
    user@docker1:~$ sudo curl -L git.io/weave -o \
    /usr/local/bin/weave
    ```
*   使文件可执行:
    ```
    user@docker1:~$ sudo chmod +x /usr/local/bin/weave
    ```
*   运行 Weave:
    ```
    user@docker1:~$ weave launch
    ```
如果所有这些命令成功完成，您的 Docker 主机现在可以使用 Weave 进行 Docker 联网了。要验证，您可以使用`weave status`命令检查 Weave 状态:
```
user@docker1:~$ weave status
        Version: 1.7.1 (up to date; next check at 2016/10/11 01:26:42)
        Service: router
       Protocol: weave 1..2
           Name: 12:d2:fe:7a:c1:f2(docker1)
     Encryption: disabled
  PeerDiscovery: enabled
        Targets: 0
    Connections: 0
          Peers: 1
 TrustedSubnets: none
        Service: ipam
         Status: idle
          Range: 10.32.0.0/12
  DefaultSubnet: 10.32.0.0/12
        Service: dns
         Domain: weave.local.
       Upstream: 10.20.30.13
            TTL: 1
        Entries: 0
        Service: proxy
        Address: unix:///var/run/weave/weave.sock
        Service: plugin
     DriverName: weave
user@docker1:~$ 
```
该输出为您提供了有关 Weave 的所有五种网络相关服务的信息。分别是`router`、`ipam`、`dns`、`proxy`和`plugin`。此时，您可能想知道所有这些服务都在哪里运行。与 Docker 主题保持一致，它们都在主机上的容器内运行:
![How to do it…](img/B05453_07_02.jpg)
如您所见，主机上运行着三个与 Weave 相关的容器。运行`weave launch`命令产生了所有三个容器。每个容器都提供独特的服务，Weave 使用这些服务来网络容器。`weaveproxy`容器充当垫片层，允许直接从 Docker CLI 利用 Weave。`weaveplugin`容器为 Docker 实现了一个定制的网络驱动程序。“`weave`”容器通常被称为 Weave 路由器，并提供与 Weave 网络相关的所有其他服务。
每个容器都可以独立配置和运行。使用`weave launch`命令运行 Weave 假设您想要使用所有三个容器，并使用一组合理的默认值来部署它们。但是，如果您希望更改与特定容器相关的设置，您需要独立启动容器。这可以通过以下方式实现:
```
weave launch-router
weave launch-proxy
weave launch-plugin
```
如果您希望随时清理特定主机上的 Weave 配置，您可以发出`weave reset`命令，该命令将清理所有与 Weave 相关的服务容器。首先，我们将只使用 Weave 路由器容器。让我们清除 Weave 配置，然后在我们的主机上启动那个容器`docker1`:
```
user@docker1:~$ weave reset
user@docker1:~$ weave launch-router
e5af31a8416cef117832af1ec22424293824ad8733bb7a61d0c210fb38c4ba1e
user@docker1:~$
```
Weave 路由器(Weave 容器)是我们提供大部分网络功能所需的唯一容器。让我们看看默认情况下通过检查 Weave 容器配置传递给 Weave 路由器的配置选项:
```
user@docker1:~$ docker inspect weave
……
        "Args": [
            "--port",
            "6783",
            "--name",
            "12:d2:fe:7a:c1:f2",
            "--nickname",
            "docker1",
            "--datapath",
            "datapath",
            "--ipalloc-range",
            "10.32.0.0/12",
            "--dns-effective-listen-address",
            "172.17.0.1",
            "--dns-listen-address",
            "172.17.0.1:53",
            "--http-addr",
            "127.0.0.1:6784",
            "--resolv-conf",
            "/var/run/weave/etc/resolv.conf" 
…… 
user@docker1:~$
```
在前面的输出中有一些项目值得指出。IP 分配范围给出为`10.32.0.0/12`。这与我们习惯在`docker0`桥上默认处理的`172.17.0.0/16`有很大不同。此外，还有一个定义为的 IP 地址用作 DNS 监听地址。回想一下，Weave 还提供了 WeaveDNS，可用于通过名称解析 Weave 网络上其他容器的名称。请注意，该 IP 地址是主机上`docker0`网桥接口的地址。
现在，让我们将另一台主机配置为 Weave 网络的一部分:
```
user@docker2:~$ sudo curl -L git.io/weave -o /usr/local/bin/weave
user@docker2:~$ sudo chmod +x /usr/local/bin/weave
user@docker2:~$ weave launch-router 10.10.10.101
48e5035629b5124c8d3bedf09fca946b333bb54aff56704ceecef009b53dd449
user@docker2:~$
```
请注意，我们以与之前相同的方式安装了 Weave，但是当我们启动路由器容器时，我们是通过指定第一台 Docker 主机的 IP 地址来完成的。在 Weave 中，这是我们将多个主机对等在一起的方式。您希望连接到 Weave 网络的任何主机只需指定 Weave 网络上任何现有节点的 IP 地址。如果我们在这个新连接的节点上检查 Weave 的状态，我们应该看到它显示为已连接:
```
user@docker2:~$ weave status
        Version: 1.7.1 (up to date; next check at 2016/10/11 03:36:22)
        Service: router
       Protocol: weave 1..2
           Name: e6:b1:90:cd:76:da(docker2)
     Encryption: disabled
  PeerDiscovery: enabled
        Targets: 1
 Connections: 1 (1 established)
 Peers: 2 (with 2 established connections)
 TrustedSubnets: none
……
user@docker2:~$
```
安装 Weave 后，我们可以继续以相同的方式连接其余两个节点:
```
user@docker3:~$ weave launch-router 10.10.10.102
user@docker4:~$ weave launch-router 192.168.50.101
```
在每种情况下，我们将先前加入的 Weave 节点指定为我们尝试加入的节点的对等节点。在我们的例子中，我们的连接模式如下图所示:
![How to do it…](img/B05453_07_03.jpg)
但是，我们可以让每个节点加入任何其他现有节点，并获得相同的结果。也就是说，将节点`docker2`、`docker3`和`docker4`连接到`docker1`会产生相同的结束状态。这是因为 Weave 只需要与现有的节点进行对话，就可以获得有关 Weave 网络当前状态的信息。因为所有现有的成员都有这些信息，所以为了将新节点加入 Weave 网络，他们与哪个成员交谈并不重要。如果我们现在检查任何一个 Weave 节点的状态，我们应该看到我们总共有四个对等节点:
```
user@docker4:~$ weave status
        Version: 1.7.1 (up to date; next check at 2016/10/11 03:25:22)
        Service: router
       Protocol: weave 1..2
           Name: 42:ec:92:86:1a:31(docker4)
     Encryption: disabled
  PeerDiscovery: enabled
        Targets: 1
 Connections: 3 (3 established)
 Peers: 4 (with 12 established connections)
 TrustedSubnets: none 
…… 
user@docker4:~$
```
我们可以看到这个节点有三个连接，一个连接到其他每个连接的节点。这使我们总共有四个对等体，有十二个连接，每个 Weave 节点三个。因此，尽管只配置了三个节点之间的对等，但我们最终得到了一个完整的网格，用于所有主机之间的容器连接:
![How to do it…](img/B05453_07_04.jpg)