Lets ﬁrst approximate the average reputation score of different
types of relays. Since we use a binary rating system (see equation
(2)), we can approximate the average reputation score of different
types of relays using the following equations:
RT = Pr(+vef b)target − Pr(−vef d)target
RC = Pr(+vef b)compromised − Pr(−vef d)compromised
RO = Pr(+vef b)other − Pr(−vef d)other
Here the probabilities represent the fraction of the feedbacks that
are positive and negative. RT , RC and RO refers to the reputation
score of relays belonging to the targeted, compromised and non-
targeted honest set respectively. From Table 2, we see that for c >
t, the reputation score of a compromised relay is greater than that
of a targeted relay. But both of their reputation score are much
lower than that of a non-targeted honest relay, i.e., RO > RC >
RT . If we assume that c is still a minority group, we can use this
discrepancy to ﬁlter out the malicious relays from the selection.
A client starts by ignoring a fraction γ of the relays with the
lowest reputation and then computes the average and standard de-
viation of the remaining reputation scores. If c  0) becomes a losing pro-
posal with Re3 deployed.
6. EXPERIMENTAL EVALUATION
In this section, we present a series of simulation and real-world
experimental results, all of which highlight the effectiveness of
Re3 in ﬁltering unreliable/compromised relays under real-world
settings. We ﬁrst look at the false positive and false negative er-
rors of our ﬁltering scheme. Next, we evaluate the probability of
selecting a compromised circuit. Finally, we run experiments over
the live Tor network and ﬁnd that there is signiﬁcant difference in
the application and network level reliability of individual Tor re-
lays. All these ﬁndings help us conclude that Re3 can assist users
in selecting more reliable and well-behaved Tor relays.
6.1 Simulation Results
6.1.1 Simulation Setup
We implemented a simulator that emulates the basic function-
ality of Tor circuit construction and active circuit dropping. We
collected actual relay information (such as IP address, advertised
bandwidth and probability of the relay being selected for entry,
middle and exit position) from the Tor compass project [4] and
randomly tagged 20% of the bandwidth to be controlled by an ad-
versary; i.e., in our threat model we assume c = 0.2. For our
experimental setup we consider 3 guards, 23 middle relays and 23
exits where all relays belong to a distinct /16 IP subnet. The reason
behind using 23 middle and exit relays is that we assume a user
uses Tor for three hours continuously6 and since a given circuit is
alive for only 10 minutes, a user would need 18 circuits in a 3 hour
period, i.e., at most 18 different middle and exit relays. Since we
assume 20% of the available bandwidth is controlled by a malicious
entity, on average we need 18/0.8 ≈ 23 relays to build 18 non-
compromised circuits.7 We create a total of 3× 23× 23 = 1587
circuits (each tested exactly once) to determine the reputation score
of the selected relays.
Table 5 summarizes the parametric settings for our simulation.
We vary two environmental parameters (g, d) to analyze the ro-
bustness and effectiveness of Re3 against active circuit dropping
attacks. Here, 100% drop rate refers to selective DoS and 0% drop
means no dropping at all. In the following evaluations we again
give more emphasis to results for g = 1/3, 2/3, as g = 0, 1
are trivial scenarios. Regarding guard selection strategy, our de-
fault strategy is to use all guards that are not outliers (i.e., strategy
1 as described in Section 4). To approximate the circuit failure rate
present in the current Tor network we use scripts from the TorFlow
project [8]. The TorFlow project measures the performance of Tor
network by creating Tor circuits and recording their failure rate. We
run TorFlow’s buildtime.py [8] python-script to generate 10 000 Tor
circuits and record their failure rate. We found the average failure
rate over 10 runs to be approximately 21%. Thus, we set the cir-
cuit failure rate, f to 0.21 in all our simulations. All simulation
results are averaged over 100 000 runs with 95% conﬁdence inter-
vals shown on all graphs (though they are sometimes too small to
see).
6Tor users download the Tor consensus data every three hours so it would make sense
to refresh the relay list every three hours.
7Due to uneven bandwidth allocation, the actual number of honest relays could be
signiﬁcantly different.
3 standard deviations away from the average (i.e., k =
6.1.2 Filtering Compromised Relays
To compare the ranking score of honest relays with that of com-
promised relays, we set d = 1 and compute the ranking score of
all the relays by varying g. Figure 4 shows the ranking score of
both honest and compromised relays for different numbers of com-
promised guards. As discussed in Section 4, we set cutoffs based
on the average ranking score of the top 80% (= 1 − c) ranked
√
√
relays. To ﬁlter outliers we exclude relays that are further than
3;
we analyze the sensitivity of k in Appendix C). The dotted/dashed
lines in the ﬁgure represent the boundaries for acceptable region
(µ − kσ, µ + kσ). Figure 4 shows that as the number of com-
promised guards increases the distinction between honest and com-
promised relay shrinks. This is understandable because as the num-
ber of compromised guards increase, the ranking score for compro-
mised relays also start to increase because more and more circuits
with compromised guards are created. However, since honest re-
lays dominate the total population, the average reputation score of
the system lies close to the average reputation score of the honest
relays. As a result, even with g = 2/3 we can successfully ﬁlter
out a signiﬁcant portion of the compromised relays.
Table 5: Simulation Parameters
Parameter
Description
Value/Range
Computation
Setting
Environment
Setting
Kp
µ
ν
β
g
d
f
Proportional gain
Rewarding factor
Punishment factor
Conﬁdence co-efﬁcient
Fraction of compromised guards
Drop rate for compromised relays
Transient network failure
0.5
2
1
0.5
{0, 1/3, 2/3, 1}
0 ≤ d ≤ 1
0.21
6.1.3 Evaluating Robustness
In this section we present results that show the robustness of our
reputation model in the presence of compromised relays. First, we
look at false positive and false negative errors of our ﬁltering pro-
tocol, and then we evaluate the probability of constructing a com-
promised circuit under different strategic scenarios.
False errors of our ﬁltering scheme: We deﬁne false negative
(FN) and false positive (FP) error as follows:
• FN: Fraction of compromised relays in the accepted list.
• FP: Fraction of honest relays in the discarded list.
Figure 5 highlights the calculated FN and FP errors. Ideally you
want both false errors to be low but since compromised relays are