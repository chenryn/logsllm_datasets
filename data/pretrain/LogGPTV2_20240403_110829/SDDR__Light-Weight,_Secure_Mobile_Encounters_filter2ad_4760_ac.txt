bits to set to 1, where K is the number of hash functions
used in creating the Bloom ﬁlter.
4.4
Identiﬁcation and mutual authentication are not required
by all applications, and hence are not a part of the basic
SDDR protocol. However, identiﬁcation and authentica-
tion can be achieved easily on top of SDDR as follows:
Identiﬁcation Identiﬁcation allows a user to associate
a principal (e.g., “Bob”) to a speciﬁc encounter through
the use of out-of-band (OOB) mechanisms. As part of
the identiﬁcation procedure, the users agree on the link
identiﬁer (corresponding to the shared encounter) for the
purpose of selective linkability.
If Alice wishes to be
recognizable by Bob in the future, she will insert the link
identiﬁer into her advertiseIDs; likewise, if she wishes
to recognize Bob in the future, she will insert the link
identiﬁer into her listenIDs. However, choosing to enable
(or revoke) recognizability is not part of the identiﬁcation
procedure, and can be performed any time by the user
after the initial, one-time identiﬁcation has taken place.
It is well known that achieving secure identiﬁcation,
resistant to man-in-the-middle (MITM) attacks, requires
either an a priori shared secret or an OOB channel. Any
manual authentication technique [32,41,42,53] (e.g., dis-
playing and comparing pictures on both devices, gener-
ated from the link identiﬁers) allows Alice to securely
identify Bob’s device free of MITM attacks. Addition-
ally, a technique not relying on OOB mechanisms has
been proposed by Gollakota et al. [34] for 802.11, using
tamper-evident messaging to detect and avoid MITM at-
tacks. Note that many applications do not require identi-
ﬁcation, such as when users wish to (anonymously) share
photos with other event participants.
Mutual authentication Mutual authentication boot-
straps a secure and authenticated session between two
peers using an a priori shared secret (e.g., the link iden-
tiﬁer agreed upon as part of the identiﬁcation proce-
dure). Suppose that in a previous encounter, Alice and
Bob participated in the identiﬁcation procedure; addi-
tionally, both Alice and Bob elected to add the shared
link identiﬁer to both their advertiseIDs and listenIDs.
Thus, in future encounters, Alice and Bob can now au-
thenticate each other (free of MITM attacks). While
the basic SDDR protocol does not provide authenti-
cation,
it can easily be achieved by sending an ex-
plicit veriﬁcation message. For example, a user can
prove to a remote peer that they know the common link
identiﬁer L by simply sending the veriﬁcation message
(cid:28)nonce,H3(L||nonce||dhk)(cid:27).
Alternatively, a user can execute a standard authenti-
cated key exchange (AKE) protocol; however, in the case
of SDDR, since a DH key is already exchanged, an ex-
plicit veriﬁcation message is sufﬁcient and cheaper than
a standard AKE protocol. Mutual authentication only
needs to be performed when requested by an application
(or user), and thus is not part of the base SDDR protocol.
4.5 Suppressing Bloom ﬁlter false positives
The false positive probability of a Bloom ﬁlter, denoted
as Pfp, is computed as a function of: the number of ele-
ments inserted (N), the size (in bits) of the Bloom ﬁlter
(M), and the number of hash functions per element (K).
Although Bose et al. [47] provide a more accurate (yet
not closed form) solution, Pfp is closely approximated by
the following formula:
Pfp =(cid:31)1−(cid:30)1−
1
M(cid:29)KN(cid:28)K
In the SDDR protocol, these false positives manifest
themselves as selectively linkable principals associated
with the remote device (and their current shared en-
counter). By default, false positives are not reduced over
the course of an epoch, and only mutual authentication
(see Section 4.4) will allow two peers to check if they are
selectively linkable (resolving any false positives). Ide-
ally, we want to provide a way for the matching set (Mj in
the protocol) to converge towards the exact intersection
of the remote peer’s advertiseIDs and the user’s listenIDs
over time.
If one creates multiple Bloom ﬁlters, each using a
unique set of hash functions (or salt value(s)), the inter-
section of the matching sets for the Bloom ﬁlters results
in an overall matching set with a reduced false positive
rate. Within a single epoch, a device can compute and
distribute beacons with unique Bloom ﬁlters that evolve
over time. Since beacons within the same epoch use
the same DH public key, we modify Step 2 within the
GenBeacon algorithm to additionally use an increment-
ing counter count as part of the salt:
BFi := BF{H1(gαi||x||count) : x ∈ ASi}
count increments each time a beacon is broadcast, and
is reset to 0 at the start of every epoch. We use this ex-
tension as part of our implementation, as described in
Section 5.
5 SDDR on Android
We have implemented the SDDR protocol on the An-
droid platform as part of a system service. The codebase
is written in C++ and runs with root privileges1 . For
development and evaluation, we use Samsung Galaxy
1SDDR requires root privileges to handle address changes, as well
as to support efﬁcient communication through Extended Inquiry Re-
sponse (EIR) payloads.
USENIX Association  
23rd USENIX Security Symposium  931
Nexus phones running Android 4.1.2 2 with the android-
omap-tuna-3.0-jb-mr0 kernel. For our implementation,
we selected to use Bluetooth for short-range radio com-
munication; other short-range radios (e.g. WiFi, Zig-
Bee) could also be used for this purpose. We selected
Bluetooth 2.1 (BT2.1) over BT4 because a BT2.1 im-
plementation closely mirrors the protocol as described;
however, we designed a BT4 implementation for use in
EnCore [17]. We use elliptic curve cryptography (ECC)
due to the smaller key sizes relative to RSA, selecting the
192-bit curve as recommended by NIST [4].
We ﬁrst describe the implementation of the major
components of the SDDR protocol: discovery, hand-
shake, and epoch change. Afterwards, we brieﬂy de-
scribe the system service that we developed to allow all
applications running on the device to take advantage of
SDDR, without each independently managing discover-
ies. Finally, we discuss our integration of the system ser-
vice with the open-source Haggle framework [8].
5.1 SDDR Protocol Components
Discovery
In the protocol, a single beacon is broadcast
throughout each epoch. In our implementation, since de-
vices must wake up to discover nearby devices and re-
ceive their beacon messages, we break down each epoch
into multiple discovery intervals. Using the protocol ex-
tension described in Section 4.5 to reduce Bloom ﬁlter
false positives, we generate and broadcast a new beacon
during every discovery interval.
There are two roles that devices can take on within
the Bluetooth 2.1 discovery protocol: discoverable and
inquirer. Every device always plays the role of discov-
erable, responding to incoming inquiry scans with infor-
mation on how the inquirer can establish a connection
(e.g., MAC address). By using the extended inquiry re-
sponse (EIR) feature present in BT2.1, which includes an
additional 240 byte payload added to the response, dis-
coverable devices can transmit their beacon to the dis-
coverer during the inquiry scan itself.
At the start of each discovery interval, a device ad-
ditionally takes on the role of inquirer, performing an
inquiry scan in order to collect and process beacon mes-
sages from nearby devices. In addition, the device will
update its EIR payload with a new beacon message; this
payload will be used as a response while discoverable.
Devices must only wake up when acting as a inquirer.
Otherwise, while simply discoverable, only the Blue-
tooth controller (and not the main CPU) must be active;
the controller wakes up every 1.28 seconds to listen and
respond to inquiry scans from nearby devices.
2The Android 4.4 release would provide additional energy savings
with respect to suspend and wakeup transitions due to the updated Alar-
mManager API.
Compute keys and recognize When a inquirer detects
a new device, which could also be an epoch change by
an existing device, it computes the shared secret for the
current epoch using the local DH private key and the
remote device’s DH public key (embedded in the bea-
con). For each device: 1) for its ﬁrst beacon, the inquirer
queries the Bloom ﬁlter contained in the beacon using
H1(gαi||x||count) for each x in its set of listenIDs; 2) for
subsequent beacons, the inquirer queries the Bloom ﬁlter
only for each x previously determined to be in the inter-
section.
Periodic MAC address change SDDR ensures that the
discovery and recognition protocol does not leak linkable
information. However, the underlying Bluetooth packets
have a static MAC address that can be used to track the
device (and the user). As part of our Bluetooth imple-
mentation, we choose a random Bluetooth MAC address
at the start of every epoch. BT2.1 does not provide a na-
tive interface for changing MAC addresses “on-the-ﬂy”;
therefore, we reset the Bluetooth controller each time the
address is changed (once per epoch, nominally ﬁfteen
minutes). Unfortunately, this reset closes ongoing con-
nections and invalidates existing device pairings; how-
ever, the BT4 speciﬁcation supports changing the public
(random) address for the device while maintaining the
private address for paired devices.
5.2 SDDR Integration
We chose to implement the SDDR protocol as part of a
system service on Android. The centralized service al-
lows for greater energy efﬁciency as it can broadcasts
discovery information to all applications via IPC mecha-
nisms, as opposed to each application performing its own
discovery. Currently, we allow applications to connect
to the service via local Unix sockets. Applications re-
ceive messages for each discovered device, along with
the shared secret and identity information (if selectively
linkable) for SDDR-aware devices.
Haggle Haggle is a mobile communication platform
for device-to-device radio communication, and supports
a number of content sharing apps. A photo sharing app,
for instance, shares with nearby devices photos whose
textual attributes match a user’s speciﬁed interests.
To demonstrate some of SDDR’s capabilities, we have
modiﬁed Haggle to use SDDR. This enables Haggle and
its applications to communicate securely with nearby de-
vices, without revealing any linkable information and
without the risk of tracking by third parties. We have
modiﬁed Haggle’s photo sharing app to take advantage
of SDDR’s features. Users can add a special attribute to
a photo, which narrows its visibility to a speciﬁed set of
linkable user(s). If a photo carries this attribute, it is el-
igible for sharing only with devices of linkable users in
932  23rd USENIX Security Symposium 
USENIX Association
this set. Finally, when a photo is shared, it is encrypted
with the shared key established by SDDR.
6 Experimental Results
In order to evaluate the design and implementation of
SDDR, we ﬁrst perform a comparison to the strawman
protocol by focusing on the PSI portion in comparison
to our Bloom ﬁlter-based approach. Secondly, we look
at energy consumption both at the level of benchmark-
ing individual operations within the SDDR (and other)
protocols, as well as battery life consumption over the
course of a day. Additionally, we attempt to analyze the
scalability (and DoS resistance) of the SDDR protocol
by extrapolating energy consumption results to a large
number of devices. For a more application-level evalu-
ation, we refer the reader to our work on EnCore [17],
which includes a deployment with 35 users, using a BT4
implementation of SDDR.
6.1 Comparison with PSI
We measure the SDDR discovery protocol computation
time while varying the number of linkable identiﬁers,
and compare the elapsed time to that required for a PSI
protocol. We use an implementation [11] of the JL10
scheme [38], one of the fastest schemes known-to-date.
JL10 is secure and can be modiﬁed to achieve unlinka-
bility across sessions. Both protocols are executed using
a single core on the 1.2 GHz ARM Cortex-A9 processor.
Figure 2 shows the run times for each protocol; each
bar is an average of 50 runs, with error bars denoting
the 5th and 95th percentile values. We divide SDDR
into two separate trials, varying the number of adver-
tisements in order to achieve the speciﬁed false positive
rates for each trial. Additional advertisements do not re-
quire much computation time because SDDR only uses
the complete set of listen IDs for the ﬁrst Bloom ﬁlter;
afterwards, SDDR uses the matching set of listen IDs,
which quickly converges towards the actual intersection.
Results show that SDDR is up to four orders of magni-
tude faster than standard PSI. The gain in performance is
crucial for practical deployment, as these computations
take place for every discovered device. In order to pre-
serve user privacy against tracking, large maximum set
sizes (128 to 256 entries) with random entry padding
must be used with typical PSI protocols; alternatively, a
size-hiding PSI scheme [18] can be used, but the perfor-
mance in practice is worse than the scheme we used [10].
6.2 Energy Consumption
SDDR runs on resource-constrained devices, therefore
we evaluate its energy consumption in detail. First, we
look at microbenchmarks for the individual components
of the protocol (e.g., discovery), as well as various idle
states, which provide a baseline for energy consumption.
l
)
e
a
c
s
g
o
l
(
i
e
m
T
n
o
i
t
a
t
u
p
m
o
C
SDDR (1 Disc, Pfp = 3.03%)
SDDR (2 Disc, Pfp = 0.09%)
PSI
10s
1s
100ms
10ms
1ms
100µs
10µs
1
2
4
8
16
32
64
128
256
Size of Advertised Set
Figure 2: Protocol execution times of PSI versus SDDR
for an encounter with varying sizes of advertised sets of
link values. The “# disc” represents the number of dis-
covery beacons used to compute the matching set, with
Pfp as the associated false positive probability.
Second, we collect and analyze power traces of our pro-
tocol over several epochs in order to determine the bat-
tery life cost of frequently running our handshake proto-
col over the course of a day. Third, we estimate the re-
duction in battery consumption when in densely crowded
areas, or under denial of service attacks, a device discov-
ers the speciﬁcation maximum of 255 devices per inquiry
scan [3]. In order to monitor energy consumption over
time, we use the BattOr [49] power monitor.
Microbenchmarks
In Table 2, we outline the results
from the microbenchmark experiments. We collect 25
data points for each experiment, and present the aver-
age values in the table above. We enable airplane mode