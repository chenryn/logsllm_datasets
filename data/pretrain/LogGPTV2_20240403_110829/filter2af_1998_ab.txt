### 优化后的文本

---

#### 目录
1. 初始化和启动 PostgreSQL 数据库
2. 固件分析方案
    - 方案 1: 使用 Firmadyne
    - 方案 2: 使用 firmware-analysis-plus
    - 方案 3: 使用 AttifyOS
3. 模拟执行固件
4. 调试固件
5. 解密固件
6. 修复固件运行环境
7. 结束语

---

### 1. 初始化和启动 PostgreSQL 数据库

```bash
sudo chmod o+w /data
su - postgres
mkdir -p /data/postgresql/data
# 使用 postgres 用户初始化数据库
/usr/lib/postgresql/13/bin/initdb -D /data/postgresql/data
# 启动数据库
/usr/lib/postgresql/13/bin/pg_ctl -D /data/postgresql/data -l logfile start
# 查看是否监听了端口（结果应类似下图）
netstat -nlp | grep 5432
```

参考：[PostgreSQL 初始化与启动](https://www.cnblogs.com/0x200/p/14026460.html)

接下来可以按照官方的使用说明进行操作（未测试）：[firmadyne: Platform for emulation and dynamic analysis of Linux-based firmware](https://github.com/firmadyne/firmadyne#usage)

### 2. 固件分析方案

#### 方案 1: 使用 Firmadyne

直接使用 Firmadyne 进行调试较为麻烦，因此推荐使用其他工具。

#### 方案 2: 使用 firmware-analysis-plus

由于 Firmadyne 的调试复杂性，我们采用了 [firmware-analysis-plus](https://github.com/liyansong2018/firmware-analysis-plus) 项目。这是一个中文项目，详细信息见链接。

在安装作者提供的 binwalk 时遇到了问题（kali2021 和 ubuntu18 均报错），导致卡在提取固件的步骤。对此，我已提交了一个 issue。

#### 方案 3: 使用 AttifyOS

AttifyOS 是一个相对稳定的方法，但自行部署比较繁琐。密码是 `attify`。

### 3. 模拟执行固件

通过 IP 地址 `192.168.0.50` 访问固件。

### 4. 调试固件

此部分使用了 [Damn Vulnerable Router Firmware (DVRF)](https://github.com/praetorian-inc/DVRF) 项目，大小超过 400MB，建议从 gitee 克隆。

#### 安装工具

```bash
sudo apt install gdb-multiarch
wget -q -O- https://github.com/hugsy/gef/raw/master/scripts/gef.sh | sh
sudo pip3 install capstone unicorn keystone-engine
```

#### 提取并调试漏洞程序

1. 进入 `DVRF/Firmware/` 目录，用 binwalk 提取 `DVRF_v03.bin`。
2. 在提取出的目录中找到 `pwnable` 文件夹，选择 `stack_bof_01` 程序进行实验。源代码位于 `DVRF/Pwnable Source/Intro/`。
3. 使用 `readelf` 查看程序架构。
4. 拷贝 `qemu-mipsel-static` 到固件根目录：

    ```bash
    cp $(which qemu-mipsel-static) .
    ```

5. 以调试方式启动程序，并在端口 1234 上进行监听：

    ```bash
    sudo chroot . ./qemu-mipsel-static -g 1234 ./pwnable/Intro/stack_bof_01
    ```

6. 打开新的 shell 并运行以下命令：

    ```bash
    gdb-multiarch pwnable/Intro/stack_bof_01
    set architecture mips
    target remote 127.0.0.1:1234
    ```

7. 创建模式触发溢出：

    ```bash
    pattern create 300
    ```

8. 重新调试并继续运行程序，触发漏洞。

#### 注意事项

- 如果直接跳转到后门函数 `dat_shell` 的起始地址 `0x400950` 会触发异常。
- 通过调试发现，当执行到 `0x400970` 时，`gp` 寄存器指向不可访问的地址。
- 使用 Ghidra 进行 MIPS 程序分析比 IDA 更方便。

### 5. 解密固件

访问 D-Link 的 FTP 服务器获取 DIR-882 的固件（时间跨度为 2017~2020 年）：

```
ftp://ftp2.dlink.com/PRODUCTS/DIR-882/REVA/
```

解压固件并查看版本说明。

#### 加密固件发布方案

1. 出厂时未加密，解密例程在高版本固件 v1.1 中给出。
2. 出厂时已加密，供应商更改高版本固件的加密方式，并发布了包含解密例程的未加密中间版本 v1.2。
3. 出厂时已加密，供应商更改高版本固件的加密方式，并发布了包含解密例程的使用原加密方式加密的过渡版本 v1.3。

DIR-882 的固件发布方案为第一种。

#### 解密过程

1. 用 binwalk 分析最新和最早的两个固件。
2. 提取存在解密程序的中间版本固件 `FW104B02`。
3. 使用 binwalk 提取该固件：

    ```bash
    binwalk -eM DIR882A1_FW104B02_Middle_FW_Unencrypt.bin
    ```

4. 在最终目录下搜索 `imgdecrypt`，这是下一个版本固件的解密例程。
5. 可以静态分析解密算法，也可以直接运行程序对加密固件进行解密。
6. 在本地运行时需要借助 `qemu-mipsel-static` 模拟器。

### 6. 修复固件运行环境

某些固件因硬件依赖等原因无法被 QEMU 或 Firmadyne 正确模拟。例如：

```
ftp://ftp2.dlink.com/PRODUCTS/DIR-605L/REVA/DIR-605L_FIRMWARE_1.13.ZIP
```

#### 尝试运行固件

1. 用 binwalk 提取固件，进入文件系统目录 `squashfs-root-0`。
2. 找到 Web 服务程序 Boa，路径为 `/bin/boa`。
3. 用 `qemu-mips-static` 运行 Boa，结果产生段错误。

#### 分析错误并修复

1. 由于没有 flash，导致读 MIB 失败。
2. 使用反编译工具分析，定位字符串 “Initialize AP MIB failed!”，并在其前的调用处设置断点。
3. 通过调试发现，程序进入 APMIB 初始化函数后将返回值赋给 `v0`，返回后对返回值进行判断。
4. 通过修改指令来修复错误：
    - 使用二进制编辑器将 `benz` (0x14) 改为 `beqz` (0x10)。
    - 使用 Ghidra 将 `bne` 改为 `beq`。

#### 补丁方法

1. 下载 Python 脚本 [ghidra_SavePatch](https://github.com/schlafwandler/ghidra_SavePatch) 并放入 Ghidra 的 Python 脚本目录。
2. 导入脚本并应用补丁。
3. 重新运行固件，检查并修复新的错误。

### 7. 结束语

本文档由初学者编写，如有不足或错误之处，请指正。感谢阅读！

---