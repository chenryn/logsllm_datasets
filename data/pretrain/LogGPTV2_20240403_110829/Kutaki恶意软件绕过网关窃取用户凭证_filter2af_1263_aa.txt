# Kutaki恶意软件绕过网关窃取用户凭证
|
##### 译文声明
本文是翻译文章，文章原作者 cofense，文章来源：cofense.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这是一个恶意软件在用户眼皮底下进行攻击的案例。最近我们发现了一起网络钓鱼攻击活动，该活动通过将Kutaki恶意软件隐藏在合法的应用程序中来绕过电子邮件网关，从而获取用户凭据信息。
虽然Kutaki窃密软件使用的反沙箱和反调试技术略显落后，但不要小看它。它对未硬件化虚拟机及其他一些分析工具具有很好的对抗性。可以绕过很多常规的检测手段。
可以通过点击这里了解[Cofense Intelligence](https://cofense.com/product-services/phishing-intelligence/)的IT团队如何在诸如此次活动在内的网络钓鱼活动和恶意软件威胁方面处于行业领先地位。
## 细节
Cofense Intelligence最近发现了一起小范围的网络钓鱼活动，这起活动在合法的[Visual
Basic](https://github.com/marifrahman/RMS/tree/master/CODE)应用中隐藏Kutaki窃取软件和键盘记录器，将其作为OLE包放置在Offic文档中来完成分发。
Kutaki使用了一系列反虚拟化和反分析技术，但看起来这些技术都是从2010年至2011年的一些博客中借鉴而来。Kutaki
窃密软件可以从键盘，鼠标，剪贴板，麦克风和屏幕（以屏幕截图形式）等途径来收集用户输入的信息。我们还发现
Kutaki通过在Windows中执行[cURL](https://curl.haxx.se/windows/)来检索目标主机是否带有SecurityXploded推出的[BrowserPasswordDump](https://securityxploded.com/browser-password-dump.php)工具。
虽然它使用的逃避检测技术不够先进，但在对抗检测和分析方面，仍有不少亮点。
## 藏在眼皮底下：混淆
这个Kutaki变种将恶意内容隐藏在Visual Basic培训应用中。试图通过隐藏在看似正常的Visual
Basic培训应用中这种手段来使自己处于白名单，并且轻而易举的绕过静态签名检测。
图1：项目详情
图2：项目代码块
即使不是专业的程序员，也看的出这里有些程序看起来似乎放在了错误的分支下，除此之外还可以看到到表单（GUI元素）和控制它们的程序之间存在紧密关联。图3展现了他们的映射关系。
图3:表单元素与其代码相对应
通过对程序进行检查，可以发现应用被安装了后门。如图4，将合法程序结构和被注入了后门的程序进行了对比。
图4：”ff”和”frmLogin”是原生程序，而”chee”、”saamneao”、”dewani”以及”ende”是注入的后门
我们不仅看出命名上的差异（大部分合法程序以”frm“开头），还可推断出注入程序采用的随机命名的方式。除此之外，那些被注入了后门的函数，函数名无法解析，只是由解码器临时分配。
注入这种后门时使用了混淆技术，通过 rtcStrReverse函数可以解码经反转的二进制字符串。如图5，即为一个混淆实例。
图5：3个使用rtcStrReverse对混淆字符串进行解码的实例
在隐藏可疑API调用时，使用了很多类似的字符串混淆。图6展示了对于[Sleep](https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-sleep)和
[ShellExecuteA](https://docs.microsoft.com/en-us/windows/desktop/api/shellapi/nf-shellapi-shellexecutea)字符串的混淆。
图6：Sleep和ShellExecuteA字符串
这些字符串是DllFunctionCall（Visual Basic应用中，一种可以特定DLL文件从检索函数地址的方法）中一个很小的结构体。如下所示：
    typedef struct _DllFunctionCallDataStruct {
    void * lpLibName;
    void * lpExportName;
    } DllFunctionCallDataStruct;
在图6中，我们可以看到这些结构是如何进行映射的。对于DLLFunctionCall的调用，封装在类似的代码段中，如图7所示。
图7：典型封装：DllFunctionCall调用
通过仔细分析，我们找到了18个以这种方法进行混淆的API，详见图8：
图8：对Kutaki执行恶意行为时调用的API进去去混淆
## 反虚拟化
Kutaki使用了一些基本的检测和对比来验证自身是否运行在虚拟化环境中。首先它会读取注册表值`HKLMSystemCurrentControlSetServicesDiskEnum`,并将返回结果与“undesirable”字符串进行比较。图9为读取注册表代码。
图9：Kutaki从注册表读取磁盘信息
这个注册表表值中包含了当前计算机的磁盘信息。第一个磁盘对应的值为“0”，第二个磁盘对应的值为“1”，依此类推。在该分析VM的实例中，值0包含图10中观察到的数据。如图10，为分析反VM功能时，该计算机注册表值为0的实例。
图10：DisksEnum注册表值实例
上图中突出显示的部分说明了该磁盘属于[VirtualBox
VM](https://www.virtualbox.org/)。图11和图12对两种用来识别不同类型虚拟机的进行了比较。而图13展示了Kutaki使用的所有虚拟化检测字符串。
图11：检测注册表值中是否包含“VIRTUAL”字符串
图12：检测注册表值中是否包含“VBOX”字符串
图13：进行虚拟化检测的字符串
图12中的字符串比较结果将与图10中注册表值进行匹配。匹配成功后，Kutaki不会立刻退出，而是继续进行其他虚拟化检测。只有当所有检测完成后，它才会判断是否继续运行。图14展示了该机制的执行流程，有关检测器的细节将在后文进行详细说明。
图14：反分析/虚拟化流程
为了完善磁盘检测。Kutaki 将[CreateToolhelp32Snapshot](https://docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot),
[Module32First ](https://docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/nf-tlhelp32-module32first)和
[Module32Next](https://docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/nf-tlhelp32-module32next)结合，来确定沙盒及调试工具相关模块是否已经注入到内存地址中。这些API会对正在运行的进程进行快照（包括堆、模块等），找到第一个模块后，会对已经映射到进程的后续模块进行迭代。图15展示了Kutaki设置快照并对指向第一个模块的指针进行检索。
图15：Kutaki建立模块识别循环
Kutaki
会对sbiedll.dll和dbghelp.dll这两个分别属于[Sandboxie](https://www.sandboxie.com/SBIE_DLL_API)和[Microsoft](https://docs.microsoft.com/en-us/windows/desktop/debug/debug-help-library)的dll文件进行检测，图16展示了对dbghelp.dll的去混淆及对比检测。
图16：对Windows Debug DLL的去混淆及对比检测
对比的结果将保存在数据结构体中，之后由_check_anti_analysis进行检测。
在最终的反虚拟化检测之前，Kutaki会再次读取注册表值`HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersion`，来检查CurrentVersion项中是否存在一些特殊的
ProductID值。图17展示了该技术。
图17：打开注册表项进行值比较
Kutaki尝试寻找名为“ProductID”的值。如果找到一个具有该值的键，会将其与三个字符串进行比较，来识别当前环境为哪种沙箱平台。以下为大致描述此过程的伪代码：
    p_id = RegQueryValueExA(“ProductID”)
    if (p_id)){
    if (p_id == ‘76487-337-8429955-22614’) {
    return “Anubis”
    }