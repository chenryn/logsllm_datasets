string）对象的内容。
HAB会递归调用这种方法，将ASN.1对象的内容复制到以参数形式传递进来的一个输出缓冲区中。这个函数的一个特殊之处在于，它没有使用任何一个输入参数来保存输出缓冲区的值。相反，当调用者将NULL指针作为输出缓冲区传递给该函数时，函数就会返回所需的缓冲区大小，这一点与Windows
API非常类似。
在使用asn1_extract_bit_string函数时，首先我们得先传入一个NULL参数，获得所需的缓冲区大小，再使用malloc分配所需的内存，然后使用新分配的缓冲区再次调用这个函数。
X.509规范将keyUsage扩展描述为一个位串对象，包含如下9个位：
    KeyUsage ::= BIT STRING {
      digitalSignature		(0),
      nonRepudiation       	(1),
      keyEncipherment         	(2),
      dataEncipherment       	(3),
      keyAgreement            	(4),
      keyCertSign            		(5),
      cRLSign                 		(6),
      encipherOnly            	(7),
      decipherOnly            	(8) }
当设备解析证书扩展属性时，如果证书中包含keyUsage字段，那么设备就会将一个指针指向栈上的一个32位整数，将其作为输出缓冲区，然后直接调用asn1_extract_bit_string函数。
然后keyUsage扩展属性中的一个大于4字节的位串对象就会导致栈缓冲区溢出。
当asn1_extract_bit_string函数返回时，bootrom代码发现返回的大小值没有大于4字节，但此时复制操作已经完成。之后调用函数返回，将其返回地址从栈中弹出，这样攻击者就可以重定向PC寄存器，执行任意代码。
攻击者可以控制写入栈中的数据的大小及内容（即证书所包含的位串的大小及内容）。
负责解析X.509证书扩展属性的存在漏洞的代码如下图所示：
**3.2 SDP恢复模式中的缓冲区溢出漏洞（CVE-2017-7936）**
WRITE FILE命令处理程序中的内存检查过程存在漏洞，攻击者可以利用该漏洞实现任意代码执行。
对于USB报文，串行下载协议（SDP）使用了如下几个字段：
1、type（命令类型）
2、address（读取或写入的内存地址）
3、format（用于READ REGISTER以及WRITE REGISTER，其大小以比特表示）
4、data_count（用于WRITE FILE以及DCD WRITE，其大小以字节表示）
5、data（WRITE REGISTER所使用的数据）
在信任模式下，当处理DCD WRITE以及WRITE
FILE命令时，hab_check_target函数（位于0x753C处）会检查位于address以及address +
data_count之间的内存区域。
这个函数有3个参数：
1、内存的类型（0x0F表示内存，0Xf0表示硬件寄存器，0x55表示其他类型的内存）。
2、待检查的内存的基址。
3、内存区域的大小（以字节表示）。
根据待检查的内存的不同类型，函数会使用一份包含安全内存区域的白名单来检查该内存区域。
然而，这个函数并没有被正确调用，原因在于内存大小参数（来自于data_count字段）会被除以8，设备认为这是一个以比特来表示的大小值，而实际上data_count字段是以字节来表示的，这样一来，该函数只会检查目标内存中的一小部分区域。
之所以存在这个问题，原因可能是设备在处理这些命令时，逻辑上与处理READ/WRITE
REGISTER命令时混淆了，后者所使用的format字段恰好是用比特来表示的。
因此，bootrom会检查[ address : address + data_count / 8 ]这个范围的内存是否正确，而实际上数据被复制到[
address, address + data_count ]这个范围的内存中。
当主机通过USB发送数据时，这个错误就会导致缓冲区溢出。
存在漏洞的代码片段如下所示：
**  
**
**四、时间线**
****
2016年9月1日：向NXP报告漏洞。
2016年9月2日：NXP表示已收到漏洞报告。
2016年9月8日：NXP请求X.509漏洞的PoC代码。
2016年9月9日：将i.MX6 bootrom X.509的漏洞利用代码发送给NXP。
2016年9月16日：NXP请求SDP漏洞的PoC代码。
2016年9月16日：将i.MX6 USB恢复模式的漏洞利用代码发送给NXP。
2017年2月20日：向高通移动安全峰会2017提交Quarkslab的演讲摘要文档。
2017年3月11日：高通询问Quarkslab是否愿意与NXP一起联合演讲，我们给出了肯定的答复。
2017年3月21日：在QMSS2017演讲摘要文档中简要提及了i.MX处理器安全启动特性中存在的漏洞。
2017年3月22日：InversePath向Quarkslab通告部分漏洞信息。
2017年3月22日：发邮件给NXP PSIRT、CERT-FR（法国）、CERT-NL（荷兰）、CERT-Bund（德国）以及ICS-CERT（美国），通告漏洞情况及部分细节。
2017年3月23日：InversePath确认i.MX53中存在x.509漏洞，并公布了一份安全公告[草案](https://github.com/inversepath/usbarmory/blob/master/software/secure_boot/Security_Advisory-Ref_QBVR2017-0001.txt)。
2017年3月23日：QMSS 2017演讲摘要文档从网站上移除，进行细节上的修正。
2017年3月24日：InversePath撤销已发布的安全公告。
2017年3月23日：NXP向QMSS发送一份修正摘要文档，其中没有提及i.MX处理器。
2017年3月24日：QMSS 2017网站上公布了修正版的摘要文档。
2017年3月24日：Quarkslab向InversePath、CERTs以及NXP发送邮件，以协调后续的公告事宜。Quarkslab告知各方会在5月19日的QMSS演讲之后，将细节公布在博客中，但如果漏洞信息已公开，这个时间点有可能会提前。
2017年5月1日：ICS-CERT询问Quarkslab是否原因推迟60天发布公告，因为他们想通过国土安全信息网络发布NXP的安全公告，时间上希望协调一致。
2017年5月2日：Quarkslab认为，这些问题向上千个私人团体公告后再推迟60天向公众公告貌似没有任何好处。询问ICS-CERT推迟公告的具体目的。
2017年5月5日：ICS-CERT回复说NXP希望给客户更多的时间调整受影响的产品，同时漏洞的公布过程也会变得更加可控。
2017年5月10日：Quarkslab回复ICS-CERT，认为推迟60天公布对受影响的组织降低安全风险而言没有任何好处，计划于5月19日（QMSS
2017上发表联合演讲）后的1周内发布文章介绍漏洞细节。
2017年5月19日：Quarkslab与NXP在QMSS 2017发表联合演讲。
2017年5月19日：在QMSS
2017的面对面会议上，NXP要求Quarkslab推迟60天公布漏洞细节。NXP表示这是客户的请求，并告诉Quarkslab他们已经通告所有客户，通告中涉及所有受影响的i.MX产品。Quarkslab要求NXP提供通告文档以及他们通知客户的具体证据，以评估是否需要落实该请求。此外，Quarkslab要求NXP向其转发NXP客户延迟公告的请求。
2017年5月22日：NXP表示，他们于4月27日向客户发布了公告，于4月21日向Auto ISAC组织公布了一个安全公告，帮助ICS
CERT制作用于国土安全信息网络的安全公告。NXP提供了通知客户的截图以及本文中提到过的工程简报以及勘误文档。
2017年5月30日：收到所有文档后，Quarkslab同意本文推迟到2017年7月18日再发表，并向所有组织（CERTs、NXP以及InversePath）通报了这一决定。
2017年6月5日：InversePath重新发布了之前于3月23日发布过的初步安全公告。
2017年6月6日：ICS-CERT为这些漏洞分配了CVE编号。
2017年7月19日：本文发表。
**五、参考资料**
****
[1]
[2][https://qct-qualcomm.secure.force.com/QCTConference/GenericSitePage?eventname=2017Security&page=Summit%20Information](https://qct-qualcomm.secure.force.com/QCTConference/GenericSitePage?eventname=2017Security&page=Summit%20Information)
[3]
[4]
[5]
[6]
[7]