false, false
false, false
false, false
false, false
true
Num.
Str.
Num.
Str.
Any
Num.
false
false
true
true
true
false
TABLE II: The examples of typed operation rules described in DIE:
addition and array indexing. The rules are used to statically infer the
type of every AST node of a seed input and also guide the generation
of new typed AST nodes.
inputs for testing. To build new AST nodes for mutation while
keeping the validity of a generated input, DIE retrieves the
type and binding information of every seed ﬁle at the ﬁrst
stage. In particular, for each node of the AST retrieved from a
seed ﬁle, DIE extends it with (1) its potential type(s) reﬁned by
DIE (see §IV-A) at runtime and (2) a set of declared variables
available within its scope. We name such an extended AST that
contains the type and binding information for every AST node
as a typed AST. DIE maintains the typed AST for every saved
input in the corpus and mutates the typed AST to generate
new JavaScript ﬁles.
As JavaScript is a weak- and dynamic- typed language, DIE
aims to infer all the possible types that an AST node may have
at runtime. DIE achieves this through heterogeneous approaches.
First, DIE dynamically collects the type(s) of every AST node
that represents an identiﬁer, namely, a reference to a particular
variable, in a seed ﬁle. After parsing out the AST of a seed,
DIE instruments the seed by adding a trampoline right before
the statement that references an identiﬁer node. The trampoline
jumps to a type proﬁling function that retrieves the type of the
identiﬁer at the moment. Note that the function traverses an
Array and iterates all the members of an Object for a reﬁned
type enforced by DIE. DIE then runs the instrumented seed
ﬁle and deduplicates the record types of an identiﬁer output at
runtime for an eventual type set. With the determined types of
all the leaf nodes (i.e., identiﬁers and literals), DIE statically
infers the type(s) of other AST nodes from bottom to top in
an unambiguous manner. Particularly, DIE refers to ECMA-
262 [9], which speciﬁes the types of arguments used in a
particular expression or built-in API. In addition, DIE statically
reducts the types of arguments and return value of a custom
Function for its legitimate invokings in newly built AST nodes.
For the sake of completeness, DIE also labels the statement not
having a deﬁned value type with its corresponding descriptive
type, such as if statements, function declarations, etc. DIE
also performs traditional scope analysis for every identiﬁer
node in order to build an available variable set at each code
point in the typed AST.
C. Building Typed AST Nodes
DIE relies on its builder to build new nodes for mutating
the typed AST of an input. Basically, DIE invokes the builder
with a desired type and a context (i.e., the code point of a
typed AST node where node mutation is to occur). The builder
17:
18:
19:
20:
21:
22:
23:
Algorithm 1 presents the algorithm of the builder that returns
the root of a new typed AST. Given a targeted value type, the
builder iterates all the abstract rules of the supported JavaScript
operations such as the ones described in §IV-A (Line 12-16).
The builder randomly selects one that has a matched value
type (Line 17) and ensures a l-value if necessary (Line 15).
After that, the builder recursively builds the argument nodes
required by the operation based on their expected value types
(Line 18-22). During the construction, the builder maintains
the exact value type for every newly created node during the
construction. The builder limits the depth of a new AST and
terminates the construction with leaf nodes, including variables
and literals (Line 7-11). To fully exploit the semantic aspect of
the current seed, the builder tends to reuse the constant values
(e.g., numbers, strings, and regular expressions) that appear in
the ﬁle for building literals; also, the builder references existing
variables available within the scope for constructing leaf nodes.
D. Mutating Typed ASTs
Given a selected input, DIE mutates its typed AST in an
aspect-preserving manner in order to utilize its properties that
targetedly test speciﬁc code paths in the underlying component
of a JavaScript engine. Generally, the aspects of a test case
largely depend on its structure and type information. Therefore,
during the mutation, DIE particularly avoids removing the entire
if statements, loop statements, custom function deﬁnitions
Algorithm 2 Mutating the typed AST of an input ﬁle and
testing the mutated input.
1: Input: t_ast: the typed AST of an input ﬁle.
2: procedure FUZZ_ONE(t_ast)
3:
4:
type ← SELECT_MUTATION_TYPE()
if type == M utation then
(cid:2) Mutating a typed
sub-AST.
old ← RANDOM_EXP(t_ast)
new ← BUILD_EXP(old.context, old.type)
REPLACE_NODE(t_ast, old, new)
SAVE_FILE(t_ast.toString())
REPLACE_NODE(t_ast, new, old)
ref ← RANDOM_EXP_STMT(t_ast)
if type == Insert_Statement then (cid:2) Inserting
else
a statement.
else
new ← BUILD_EXP_STMT(ref.context)
new ← BUILD_VAR_DECL(ref.context)
(cid:2) Introducing a new variable.
INSERT_BEFORE(t_ast, ref, new)
SAVE_FILE(t_ast.toString())
REMOVE_NODE(t_ast, new)
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
and invocations, etc., which determine the structure of an
existing JavaScript program. Also, DIE avoids redeﬁning an
existing variable with a different type. The mutated AST is then
translated into JavaScript code for testing. After processing
the execution result, DIE reverts the changes made to the AST
for the next round of mutation. If a generated JavaScript ﬁle
discovers new code paths of the targeted JavaScript engine,
its typed AST is saved along with the code. Algorithm 2
presents how DIE fuzzes an existing JavaScript ﬁle through
aspect-preserving mutation.
Particularly, DIE adopts the following approaches to mutate
the typed AST of a JavaScript ﬁle, sorted by their priorities:
Mutating a typed sub-AST. DIE randomly selects a sub-
AST that serves no structural purpose (i.e., an expression or a
sub-expression) (Line 4). The sub-AST is then replaced with
a new one built by the builder that has a matched type (Line
5-6).
Inserting a statement. DIE locates a statement block (e.g.,
the body of an if statement, a function or simply the global
region) and randomly selects a code point inside the block
for insertion (Line 10). Next, DIE generates a new expression
statement by using the existing variables declared at the point.
Here, the expression statement is simply an expression of any
value type followed by a semicolon, which can also be built
by the builder. DIE grows the old input by inserting the new
statement at the end (Line 15).
Introducing a new variable.
Instead of inserting statements,
DIE also manages to insert the declarations of new variables at
random code points in a typed AST. A new variable is always
initialized by an expression built by the builder with a random
type (Line 14).
In order to fully exploit the existing aspects of a seed, DIE
prefers sub-AST mutation and new statement insertion when
selecting the mutation approach (Line 3). DIE introduces new
variables into the input only if no new code path is discovered
for a long time. The newly generated input through any of the
three approaches is stored (Line 7 and 16) for further execution
by the target JavaScript engine. Then DIE reverts the changes
made to the typed AST that will be reused for further mutation
in the subsequent rounds (Line 8 and 17).
E. Feedback-driven Fuzzing in Distributed Environment
Even with DIE’s aspect-preserving mutation, ﬁnding new
bugs in a JavaScript engine is still challenging because (1) input
space is still enormous due to the high dimensions of freedom
in JavaScript and (2) the re-execution cost is too high to be
handled in a single machine. To overcome these issues, DIE
uses coverage-driven fuzzing in a distributed environment. In
particular, DIE uses classical feedback-driven fuzzing inspired
by AFL, but with a reﬁned code coverage that is the same as
Fuzzilli [17]. The original AFL’s code coverage represents
each edge in a byte to record hit counts for ﬁnding overﬂows.
However, hit counts are pointless in JavaScript because they
can be arbitrarily controllable by modifying a range in the for
statement. Thus, DIE records an edge in a bit by discarding hit
counts. As a result, DIE can store eight times more branches
within the same size of memory compared to the original AFL’s
design.
Furthermore, to make multiple machines collaborate in a
distributed environment, DIE develops its own code-coverage
synchronization mechanism. While maintaining its local cov-
erage map, an instance of DIE synchronizes its map with a
global map if it discovers a locally interesting test case; it
introduces a new bit according to the instance’s local map.
Then, the instance uploads the test case if it is still interesting
after the synchronization. This is similar to EnFuzz’s Globally
Asynchronous Locally Synchronous (GALS) mechanism [6],
but is different in two aspects. First, DIE synchronizes code
coverage itself instead of interesting test cases like EnFuzz.
Unlike EnFuzz, which needs to re-evaluate test cases because
of the heterogeneity of fuzzers, DIE can avoid this re-execution,
which is expensive in JavaScript engines, by synchronizing
code coverage directly thanks to identical fuzzers. Second, DIE
can support multiple machines, not just multiple processes in
a single machine.
V. IMPLEMENTATION
Broadly, DIE is implemented as an AFL variant that can
also run in a distributed environment. First, DIE introduces
a pre-processing phase into AFL. Starting with existing test
suites and PoCs, DIE leverages its type analyzer to construct
their typed ASTs and save them along with the source ﬁles into
the input corpus. More importantly, DIE replaces the AFL’s
mutator for binary input with its own mutation engine. The
mutation engine uses the typed-AST builder to build random
sub-ASTs for mutating or growing a typed-AST selected from
the corpus. DIE reuses most of the other components of the
Component
Fuzzing engine
Type analyzer
Instrumentation tool
Typed-node builder
Mutation engine
AFL modiﬁcation
LoC
Language
3,677
222
10,545
2,333
453
TypeScript
Python
TypeScript
TypeScript
C
Distributed fuzzing harness
Coordinator
Local agent
Crash reporter
205
1,419
492
TypeScript
Python, Shell script
Python
TABLE III: Implementation complexity of DIE including core fuzzing
engine, AFL modiﬁcation, and necessary harnesses for distributed
fuzzing. Since we reuse a few components (e.g., the fork-server, seed
scheduler, and coverage collector) in the original AFL, we omit their
code sizes.
AFL, including the fork-server, seed scheduler, and coverage
collector. Nevertheless, DIE disables the trimming phase in the
original AFL, which destructs the aspects from a seed input.
Note that DIE heavily utilizes Babel [28], a popular JavaScript
transpiler, to complete all the tasks at the AST level of a
JavaScript ﬁle. To support DIE to run in a distributed manner,
we implement several harnesses: (1) a centralized coordinator
that synchronizes discovered test cases across the DIE instances
running on different machines and collects crashes, (2) a local
agent that manages the execution of DIE on a single machine,
and (3) a crash reporter that deduplicates found crashes and
reports the coordinator.
Table III presents the lines of code (LoC) of each component
of DIE. We explain the implementation details of several non-
trivial ones in this section.
Type analyzer. The type analyzer constructs a corresponding
typed-AST for every seed ﬁle (see §IV-B). First, it leverages
Babel to get the original AST of a seed ﬁle. Note that Babel also
provides the binding information of every variable along with
the AST by scope analysis. Then it instruments the seed ﬁle
with the invokings of the typing function on every occurrence
of a variable (i.e., an identiﬁer) with the help of the Babel
APIs for AST manipulation. Then the seed ﬁle is executed
and the runtime types of an identiﬁer are collected at runtime
and used for bottom-up type analysis on the AST afterward.
To implement a typed-AST, we simply introduce a new type
ﬁeld into the original Node structure that represents a node in
the AST implementation of Babel, where the inferred type is
stored.
Mutation engine and typed-node builder. Given an input
typed-AST from the corpus, the mutation engine queries the
typed-AST builder for a randomly built sub-AST. The built
sub-AST is a substitute for an existing subtree or is simply
inserted into the input typed-AST (see §IV-D). Since our typed-
AST is a simple extension of the Babel’s AST, we leverage
various Babel APIs for (1) building new ASTs of JavaScript
expressions and statements in the typed-node builder and (2)
removing existing nodes or adding new nodes in an AST in
the mutation engine. Also, we gather the literals (i.e., numbers,
strings and regular expressions) used in all the seed programs
in our corpus for the builder to choose from when building a
new code segment. The builder also works with the binding
information provided by the original AST in Babel and thereby
only uses declared variables within the scope in order to avoid
ReferenceError.
Integration with AFL. We build a single fuzzing executor
of DIE on the basic infrastructure of AFL [49] (version
2.52b), including the forkserver, coverage feedback routine, and
execution scheduling. Instead of classic byte mutation in AFL,
we integrate our fuzzing engine for mutation with AFL and let
it communicate with the AFL infrastructure. After generating
input by the core engine, AFL executes a target engine with
the generated input. Libraries, including wrapper functions to
resolve compatibility issues (see §VI-A), are executed together
with the generated input. To build an instrumented binary for
code coverage, we directly reuse AFL-Clang as a compiler
and slightly modify the LLVM pass to use the custom code
coverage described in §IV-E.
Distributed fuzzing engine. To launch our fuzzing executor in
a distributed environment, we implement harnesses, including
executor written in Python and Shell script, coordinator, and
crash reporter. To execute the shell command in a distributed
environment, we use fabric [10], which is a Python library
supporting the execution of shell commands remotely. The
harness includes functionalities such as installing dependencies
and deploying, launching, and terminating the AFL instances.
After launching them in a distributed environment, diverse
intermediate data such as seed corpora should be synchronized.
For fast and reliable data access in a distributed environment,
we use a well-known open source and in-memory database,
redis [35]. The coordinator communicates with the redis server
and synchronizes and distributes intermediate data (e.g., code
coverage and input introduced new paths) among the distributed
AFL instances. We also implement crash reporter to report the
found crashes and ﬁlter them to eliminate duplicates. Once
the crash reporter gets crashes from the database, it tests them
with the JavaScript engine and notiﬁes the user if it ﬁnds a
new unique crash.
VI. EVALUATION
In this section, we evaluate the effectiveness of DIE regarding
its ability to ﬁnd new bugs in the latest JavaScript engines using
aspect-preserving mutation. Moreover, we compare DIE with
existing JavaScript engine fuzzers based on diverse metrics to
present various advantages of DIE.
Q1 Can DIE ﬁnd new bugs in real-world JavaScript engines?
(§VI-B)
Q2 Do the preserved aspects from the corpus play a key role
in triggering the bugs found by DIE? (§VI-C)
Q3 Does DIE fully preserve the aspects presented by the
corpus? (§VI-D)
Q4 Can DIE generate correct JavaScript code, both syntacti-
cally and semantically? (§VI-E)
Q5 How does DIE perform in terms of code coverage and bug
ﬁnding ability against state-of-the-art fuzzers? (§VI-F)
§VI-A explains the environment for the experiments. §VI-B
describes the bugs, including security vulnerabilities found
by DIE. §VI-C evaluates the effectiveness of utilizing the
aspects of the seed corpus by analyzing the results of DIE.
§VI-D evaluates whether the aspects of the seed corpus are
well maintained in the test cases generated by DIE. §VI-E
evaluates the validity of the generated input by DIE based
on syntactic and semantic errors raised by JavaScript engines.
§VI-F compares the performance of DIE with other state-of-
the-art fuzzers.
A. Experimental Setup
Environment. We evaluate DIE on Intel Xeon E7-4820 (64