• on vote(id, v) ∈ (I × V) from E:
b0 ← Vote(id, v); b1 ← Vote(id, v
if Valid(BB1, b1) then BB0 ← BB0(cid:10)b0, BB1 ← BB1(cid:10)b1,
BB2 ← BB2(cid:10)(id, v) and return (id, ack) to the simulator.
• on ballot(b) ∈ (I × {0, 1}∗
if Valid(BB1, b) then BB0 ← BB0(cid:10)b, BB1 ← BB1(cid:10)b;
(id, v) ← Extract(sk, b); BB2 ← BB2(cid:10)(id, v).
);
∗
):
As a result from these changes, every time a ballot is added
to BB0 and BB1, a corresponding vote is added on BB2: this
is just the vote submitted in clear in the case of a vote query,
or the extracted vote in the case of a ballot query, using
the Extract algorithm resulting from the strong consistency
guarantee. The view of the adversary is not modiﬁed in any
way for the moment.
512512
When A issues tally, Game 2 checks that the content of
BB2 coincides with the votes extracted from BB0.8 If this
is not the case the game aborts the execution, otherwise the
result provided to the adversary is computed as in Game 1.
Formally, the tally step in Game 2 is as follows:
• on tally from A:
if BB2 (cid:8)= Extract(sk, BB0) output ⊥ and halt;
run (r, Π) ← TallyGlobalSetup(sk, BB0);
run Π1 ← SimProof(r, BB1); return (r, Π1) to the
adversary.
Here, the view of the adversary can differ from Game 1
only if the test BB2 (cid:8)= Extract(sk, BB0) succeeds. We claim
that this can only happen with negligible probability, thanks
to the properties of Extract guaranteed by strong consistency
(Item 1. of Def. 8).
Indeed, we show how to build an adversary B that breaks
strong consistency with a probability identical to the proba-
bility that BB2 (cid:8)= Extract(sk, BB0) in Game 2.
B starts by emulating Game 2 internally, running by itself
the roles of the administrator, adversary, environment, . . . and
inspects whether, in the end, BB2 (cid:8)= Extract(sk, BB0). If it is
the case, B extracts the query that makes those boards differ.
This query can certainly not be a setup, read or tally
query, since these queries do not modify any board. It can also
not be a ballot query, since the vote that is added on BB2
in that case is, by deﬁnition, the extraction of the ballot added
on BB0. Eventually, if it is a vote(id, v) query, then B found
a situation where the extraction of Vote(id, v) (which appears
on BB0) differs from (id, v) (which appears on BB2). But,
from the ﬁrst item of the deﬁnition of strong consistency, this
can only happen with negligible probability, and so does the
BB2 (cid:8)= Extract(sk, BB0) property.
4) Game 3: This game is identical to the one above, with
the difference that, during vote queries, we check whether
the b0 ballot is valid with respect to BB0 and trigger an
error othewise. Formally, we make the following changes
(underlining the changes compared to Game 2, as before).
• on vote(id, v) ∈ (I × V) from E:
b0 ← Vote(id, v); b1 ← Vote(id, v
if not Valid(BB0, b0) then output ⊥ and halt.
if Valid(BB1, b1) then BB0 ← BB0(cid:10)b0, BB1 ← BB1(cid:10)b1,
BB2 ← BB2(cid:10)(id, v) and return (id, ack) to the simulator.
A difference between Game 2 and Game 3 only appears
when Valid(BB0, b0) is false. However, this would immedi-
ately violate the strong correctness property (Def. 9.)
);
∗
Indeed, an adversary against strong correctness can start
emulating Game 3 internally, using a honestly generated public
key provided as in the strong correctness experiment, up to a
guess on which vote(id, v) query would result in falsifying
Valid(BB0, b0). Then, it can submit (id, v, BB0) as output to
the strong correctness experiment and, if the guess is correct
(which happens with non negligible probability since there
are at most a polynomial number of vote queries), it wins the
8Applying Extract to a list of ballots means apply it component-wise.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:30 UTC from IEEE Xplore.  Restrictions apply. 
experiment. But, since our voting scheme is strongly correct,
this can only happen with negligible probability.
5) Game 4: This game is identical to the one above, with
the difference that, during vote and ballot queries, we check
whether ballots satisfy the ValidInd predicate (deﬁned as part
of strong consistency) after having tested ballots with Valid.
Formally, we make the following changes to these queries:
∗
);
• on vote(id, v) ∈ (I × V) from E:
b0 ← Vote(id, v); b1 ← Vote(id, v
if not Valid(BB0, b0) then output ⊥ and halt.
if not ValidInd(b0) then output ⊥ and halt.
if Valid(BB1, b1) then BB0 ← BB0(cid:10)b0, BB1 ← BB1(cid:10)b1,
BB2 ← BB2(cid:10)(id, v) and return (id, ack) to the simulator.
• on ballot(b) ∈ (I × {0, 1}∗
if not ValidInd(b) then output ⊥ and halt, else
BB0 ← BB0(cid:10)b, BB1 ← BB1(cid:10)b;
Extract(sk, b); BB2 ← BB2(cid:10)(id, v).
): if Valid(BB1, b) then
(id, v) ←
A difference between Game 3 and Game 4 can only appear
if one of the ValidInd tests fails while the Valid test on the
same ballot succeeds. However, such an event would lead to a
contradiction of the second requirement of strong consistency,
which requires that a ballot that is Valid for any board should
also be ValidInd. An adversary could indeed emulate Game 4
internally and, as soon as a ValidInd test fails while the Valid
test on the same ballot succeeds for a speciﬁc board, it would
output that board and ballot, which would be in contradiction
with Item 2. of the deﬁnition of strong consistency.
6) Game 5: This game is identical to the one above with
the difference that, instead of running Tally on BB0 in order
to obtain the result r, the ρ function is evaluated on BB2.
Formally, we modify the tally query as follows:
• on tally from A:
if BB2 (cid:8)= Extract(sk, BB0) output ⊥ and halt;
run (r, Π) ← TallyGlobalSetup(sk, BB0);
r = ρ(BB2).
run Π1 ← SimProof(r, BB1); return (r, Π1) to the
adversary.
We claim that if V is strongly consistent (Deﬁnition 8) then
the outputs of Game 4 and Game 5 are indistinguishable.
Consider a reduction B against Property 3. of strong con-
sistency. Reduction B obtains pk, then simulates the execution
in Game 5 up to the point where A issues tally. At this point
B outputs BB0 and halts. Since BB2 = Extract(sk, BB0),
the output distributions of Games 4 and 5 only differ if
R(Tally(sk, BB0)) (cid:8)= ρ(Extract(sk, BB0)), where R(r, Π) :=
r extracts the result from a tally. Furthermore, the tests added
in Game 4 guarantee that BB0 only contains ballots that satisfy
ValidInd. So, if a difference happens, the reduction B wins
against the strong consistency property of V.
7) Game 6: This game is identical to the one above with
the difference that we remove:
• The test on BB2 added in Game 2;
• The Valid test added in Game 3;
• The ValidInd tests added in Game 4.
these tests only make a
We proved in those games that
difference with negligible probability, and we can use those
same arguments to justify that a difference between Game 5
and Game 6 will only appear with negligible probability.
)
∗
To sum up, the queries in Game 6 are treated as follows:
• on vote(id, v) ∈ (I × V) from E:
b0 ← Vote(id, v); b1 ← Vote(id, v
if Valid(BB1, b1) then BB0 ← BB0(cid:10)b0, BB1 ← BB1(cid:10)b1,
BB2 ← BB2(cid:10)(id, v) and return (id, ack) to the simulator.
• on ballot(b) ∈ ({0, 1}∗
if Valid(BB1, b) then BB0 ← BB0(cid:10)b; BB1 ← BB1(cid:10)b;
(id, v) ← Extract(sk, b) and BB2 ← BB2(cid:10)(id, v).
• on read from A:
) from A:
return Publish(BB1) to the adversary.
• on tally from A:
run r ← ρ(BB2); run Π1 ← SimProof(r, BB1); return
(r, Π1) to the adversary and halt.
8) Ideal adversary: Finally, we construct a simulator S for
which the output in idealexec(E||S||Fvoting(ρ)) is distributed
identically to the output of Game 6, thus completing the proof.
The simulator runs SimGlobalSetup.init to obtain an en-
vironment SimGlobalSetup (if needed), runs Setup to obtain
(pk, sk) and initializes a board BB1. It then starts running A
internally and answers queries as follows:
∗
• When S receives (id, ack) from Fvoting(ρ), it produces
b ← Vote(id, v
). If Valid(BB1, b) returns true, then S
executes BB1 ← BB1(cid:10)b.
• When A issues ballot(b), S runs Valid(BB1, b). If this
returns false, then S does nothing. Otherwise, S runs
BB1 ← BB1(cid:10)b and (id, v) ← Extract(sk, b) and sends
(id, v) to Fvoting.
• When A issues query read, S returns Publish(BB1).
• When A issues query tally, S issues tally to Fvoting
and obtains r, calculates Π1 ← SimProof(r, BB1) and
returns (r, Π1) to the adversary.
The claim is that the view of A and E in the above game
is identical to their view in Game 6. Indeed:
• The read queries from the adversary are answered from
the board BB1 in both cases;
• The tally query applies ρ to the sequence of votes
received by the functionality, votes that precisely match
those posted on BB2 in Game 6.
(cid:3)
VI. APPLICATION TO HELIOS
Helios [37] is a remote voting protocol aimed at providing
both privacy and veriﬁability. Helios builds on Cramer et
al [38] and Benaloh [29]. The attractiveness of Helios resides
on its open-source nature, simplicity and that it consists of
well-known cryptographic building blocks. Furthermore, it has
been used several times to run binding elections, including
the election of the president of the University of Louvain-
La-Neuve and the election of the board directors of the
International Association for Cryptographic Research (on a
regular basis since 2010) [39] and of the ACM. As such, Helios
513513
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:30 UTC from IEEE Xplore.  Restrictions apply. 
is the ideal candidate to test any new cryptographic model
for electronic voting. It is not surprising then that Helios has
been shown to ensure ballot privacy in the past [13], [27],
[12], [19]. However, as we have seen in the previous sections,
those analysis use unsatisfactory vote privacy deﬁnitions or do
not apply directly to Helios.
We show that our BPRIV and strong consistency deﬁ-
nitions can be realized by Helios, which implies the ﬁrst
simulation-based vote privacy proof for Helios. Speciﬁcally,
we analyze what could be considered the standard version
of Helios nowadays, that uses strong Fiat-Shamir proofs [19],
implements duplicate weeding [27] and homomorphic tallying.
With respect to the threat model, we consider an honest single
trustee and an honest bulletin board. Except for the single
trustee, the other adversarial assumptions are similar to those
used in previous ballot privacy analyses of Helios. Adapting
our proof to a multi-authority scenario is expected to carry
over in a similar manner as in [20], by extending BPRIV to a
multi-trustee scenario.
More explicitly,
the ElGamal
the Helios version that we analyze
IND-CPA cryptosystem D =
uses
[40]
(KeyGen, Enc, Dec) in a given group G where the Decisional
Difﬁe-Hellman assumption holds; the NIZK proof system [41],
H (g, pk, R, S) to prove in zero-knowledge that
[42] DisjProof
(R, S) encrypts g0 or g1 (with proof builder DisjProve and
proof veriﬁer DisjVerify); and the NIZK proof system [41]
vk =
EqDl
logR c for g, R, vk, c ∈ G (with proof builder ProveEq and
proof veriﬁer VerifyEq). H and G are hash functions mapping
to Zq.
G(g, R, vk, c) to prove in zero-knowledge that logg
Helios allows both “referendum” style votes (a single yes/no
question) and more complex ballots; in addition it allows for
several revote policies. The result function in Helios is ﬁxed to
return the number of votes that each option received (since it
tallies homomorphically). We formalise Helios for referendum
style votes and the “only your last vote counts” revote policy.
Theorem 13: Helios is BPRIV, strongly consistent, and
strongly correct under the DDH assumption in the Random
Oracle Model.
Our BPRIV proof is largely inspired by [19]: we make use
of the fact that Vote(id, v) produces non-malleable ciphertexts
(when interpreted as a public key encryption algorithm) and
that
tallying proofs are in fact zero-knowledge proofs of
decryption correctness. Details can be found in the full version
of this paper [35].
VII. CONCLUSION
We have reviewed the literature in order to ﬁnd a game-
based cryptographic deﬁnition of vote privacy suitable for
remote voting protocols, in particular compatible with veriﬁ-
ability. We have identiﬁed shortcomings in several previous
such deﬁnitions, and concluded that none of the existing
deﬁnitions was satisfactory. Based on our ﬁndings, we have
proposed a new deﬁnition, BPRIV, that avoids the existing
limitations. In particular, BPRIV provides a more precise
514514
model of the tally function, with a revote policy and explicit
auxiliary data.
We have additionally introduced the notions of strong
consistency and strong correctness, and we have been able to
show that together with BPRIV, they imply simulation-based
privacy. More precisely, we showed that a single-pass protocol
for computing some result function ρ, that is secure in the
BPRIV game-based sense and strongly correct and consistent,
achieves at least the same level of privacy as the ideal protocol
for ρ. One immediate interpretation of this result is that from
a scheme secure in the BPRIV sense the adversary can extract
as much information as it can extract from only seeing the
result and nothing more. This is a very desirable and intuitively
appealing property as it reduces understanding the level of
privacy of a protocol to that of understanding the level of
privacy of a corresponding ideal protocol. Furthermore proofs
using game-based deﬁnitions are more standard and easier
to construct than those using the simulation-based notions.
Whenever possible, proving game-based privacy is desirable.
We have shown that BPRIV can indeed be realized by a
real-scale protocol, namely Helios [2]. Since Helios satisﬁes
BPRIV and is strongly consistent, it immediately follows that
Helios is secure for a simulation-based notion of privacy.
We can see several directions for future work. Like previous
papers in the same area we model a single, trusted talling
functionality (and assume that this could be implemented via a
threshold scheme). It would be useful to spell out the required
arguments and verify this assumption. A detailed treatment of
mixnets (with more than one mixer) would also be interesting.
Another extension could be to consider dishonest ballot boxes
where, among other things, honest ballots could get “lost”.
On a similar note, the use of voter credentials to prevent
ballot stufﬁng by the ballot box has gained some interest
recently (there is also a Helios variant called Belenios that
implements this [43]) and we think it would be interesting to
model credentials in a privacy notion too.
ACKNOWLEDGMENT
The research leading to these results has received funding
from the European Research Council under the European
Union’s Seventh Framework Programme (FP7/2007-2013) /