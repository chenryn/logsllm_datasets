style='font-family:"Arial",sans-serif'> מתחילת השורה).
&nbsp;
אתגר 5 – Protocol (קטגוריית Networking, 30 נקודות)
&nbsp;
הוראות האתגר:
```
Hi there!
We need to extract secret data from a special file server.
We don't have much details about this server, but we did manage to intercept traffic containing communication with the server.
We also know that this secret file's path is: /usr/7Op_sECreT.txt
You can find the sniff file here.
Please tell us what the secret is!
Good luck!
```
&nbsp;
הקובץ שמתקבל הוא
קובץ pcap שמשמש
להצגת תעבורת רשת וניתן לפתיחה באמצעות תוכנת WireShark.
מעבר זריז על
ההודעות השונות ועיון ב-payload מגלה הודעה מעניינת:
ה-HELLO קופץ מיד לעין.
ניתן לעקוב אחרי כל
ההודעות של החיבור הזה באמצעות קליק ימני ובחירה ב-Follow TCP Stream:
&nbsp;
נראה שמדובר
בפרוטוקול בסיסי שבו המשתמש מבקש קובץ ומקבל אותו מקודד. ה-XOR במהלך ההתקשרות
מרמז שכנראה צריך להפעיל פעולת XOR באמצעות המפתח שמתקבל מהשרת על תוכן הקובץ כדי לקבל את ה-plaintext.
ננסה לחקות את
הפרוטוקול בעצמנו  (הקוד מצורף בשלמותו בעמוד הבא) ונקבל
את התוצאה הבאה:
&nbsp;
את הקוד אפשר לכתוב
בצורה הרבה יותר קצרה, אבל זאת הזדמנות טובה לראות Context Manager בפעולה על מנת
לשלוט בצורה נקייה בפתיחה ובסגירה של ה-Socket.
מחלקת Protocol מממשת את פרוטוקול
התקשורת עם השרת (עם כמה הנחות בפונקציית recv). פונקציית decode_msg מפענחת את ההודעה על ידי מעבר על ההודעה בחלקים (כל חלק הוא שישה
בתים – תחילית של 0x וארבעה בתים של מידע) וביצוע XOR עם המפתח שהתקבל
בשלב הקודם.
```python
import socket, re
class Protocol(object):
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        self.msg_id = 0
        self.recv_reg = 
           re.compile('^(?P\d+) (?P\d+) (?P.+)$')
    def __enter__(self):
        self.socket = socket.socket()
        self.socket.connect((self.ip, self.port))
        return self
    def __exit__(self, *args):
        self.socket.close()
    def log(self, msg):
        print(msg)
    def send(self, msg):
        self.log(">> {}".format(msg))
        self.msg_id += 1
        full_msg = "{} {} {}\n".format(self.msg_id, len(msg), msg)
        self.socket.send(full_msg.encode('UTF-8'))
    def recv(self):
        msg = self.socket.recv(1024)
        match = self.recv_reg.match(msg.decode('UTF-8'))
        if match:
            assert(int(match.group("id")) == self.msg_id)
            assert(int(match.group("len")) == len(match.group("payload")))
            self.log("אתגר 6 – PNG++ (קטגוריית Logic, 30 נקודות)
&nbsp;
הוראות האתגר:
```
This image was encrypted using a custom cipher.
We managed to get most of its code here
Unfortunately, while moving things around, someone spilled coffee all over key_transformator.py.
Can you help us decrypt the image?
```
הקוד להצפנת התמונה
הוא:
```python
import key_transformator
import random
import string
key_length = 4
def generate_initial_key():
    return ''.join(random.choice(string.ascii_uppercase) for _ in range(4))
def xor(s1, s2):
    res = [chr(0)]*key_length
    for i in range(len(res)):
        q = ord(s1[i])
        d = ord(s2[i])
        k = q ^ d
        res[i] = chr(k)
    res = ''.join(res)
    return res
def add_padding(img):
    l = key_length - len(img)%key_length
    img += chr(l)*l
    return img
with open('flag.png', 'rb') as f:
    img = f.read()
img = add_padding(img)
key = generate_initial_key()
enc_data = ''
for i in range(0, len(img), key_length):
    enc = xor(img[i:i+key_length], key)
    key = key_transformator.transform(key)
    enc_data += enc
with open('encrypted.png', 'wb') as f:
    f.write(enc_data)
```
כאשר אנחנו רואים