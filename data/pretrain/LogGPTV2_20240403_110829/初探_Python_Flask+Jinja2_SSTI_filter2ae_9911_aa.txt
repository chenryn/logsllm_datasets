# 初探 Python Flask+Jinja2 SSTI
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## SSTI简介
SSTI主要是因为某些语言的框架中使用了渲染函数，比如Python中的Flask框架用jinjia2模块内的渲染函数，在不规范的代码中，导致用户可以控制变量并构造恶意的表达式，比如`{{98-2}}`，恶意的表达式未经严格的过滤直接带入模板中渲染执行使得攻击者可以读取文件，远程代码执行等等。现在最多的还是在CTF中遇到该漏洞，最多的也是Python+flask+jinja2，通过绕过过滤规则成功命令执行+读取文件拿到flag，本文也会从0开始一点点剖析该漏洞的成因与利用。
## Flask
###  Flask简介
**Flask** 是一个用Python编写的 **Web应用程序框架**
优点是提供给用户的扩展能力很强，框架只完成了简单的功能，有很大一部分功能可以让用户自己选择并实现。
**WSGI**
**Web Server Gateway Interface（Web服务器网关接口，WSGI）** 已被用作Python Web应用程序开发的标准。
WSGI是Web服务器和Web应用程序之间通用接口的规范。而Flask类的实例就是WSGI应用程序。
**Werkzeug**
它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。
Flask框架使用Werkzeug作为其基础之一。也就是Flask的URL规则也是基于此。
###  Flask安装
    pip3 install flask  # 获取最新版本flask
###  创建Flask项目
可以根据下图创建一个基于python3的flask项目
###  Flask e.g.
样例代码：
`app = Flask(__name__)`
：Flask类必须指定一个参数，即主模块或包的名字。这里`__name__`为系统变量，指的是当前py文件的文件名。
`[@app](https://github.com/app "@app").route()`：
路由与视图函数。从client发送的url通过web服务器传给flask实例对象时，因为该实例需要知道对于每个url要对应执行哪部分的函数所以保存了一个url和函数之间的映射关系，处理url和函数之间关系的程序称为路由，在flask中用的是app.route路由装饰器，把装饰的函数注册为路由。简单理解就是`[@app](https://github.com/app
"@app").route(url)`装饰器告诉Flask什么url触发什么函数，而通过装饰器将函数与url绑定在一起就称为路由。  
`app.run()`：样例为 `run_simple(host, port, self, **options)`
当不设置时，默认监听127.0.0.1:5000,
监听0.0.0.0的话则任意IP都可访问。该函数作用为开启flask集成的web服务，服务开启后会一直监听5000端口并处理请求知道程序停止。
    from flask import Flask
    app = Flask(__name__)
    @app.route('/')
    def index():
        return 'hello Zh1z3ven'
    if __name__ == '__main__':
        app.run()
运行一下当前的py文件，控制台出现如下图所示的日志，flask默认监听在5000端口，访问一下看看。
###  Flask中的路由
上面我们也提到了，简单理解就是`[@app](https://github.com/app
"@app").route(url)`装饰器告诉Flask什么url触发什么函数，而通过装饰器将函数与url绑定在一起就称为路由。
这里看一下路由的几个基本操作
**0x01 指定访问路径为/**
    @app.route('/')
    def index():
        return 'hello Zh1z3ven'
**0x02 传递参数**
这里可以实现url的动态获取并在页面输出username
    @app.route('/user/')
    def hi_user(username):
        return 'hi %s' % username
**0x03 限定请求方式**
在`[@app](https://github.com/app
"@app").route`中，可以通过如下设置：`[@app](https://github.com/app
"@app").route('/user/', methods=['GET', 'POST'])`
设置参数`user_id`的数据类型，以及http请求方式。
    @app.route('/user/', methods=['GET', 'POST'])
    def hi_userid(user_id):
        return 'hello %d' % user_id
###  main入口
在Flask官方文档也提到最好用 `if __name__ == '__main__'` 来作为程序入口 python中的main入口也就是 `if
__name__ == '__main__'`
当运行py文件时因为 当前 **文件名** (`__name__`)与 **顶层代码作用域**
(`__main__`)是相等的，所以会执行后面的代码块，而当该文件作为一个模块被import到别的文件时，此时并不会执行该文件，而是类似于php中include函数那样将该文件包含到其他文件中去。
到此Flask的工作流程
大致就已经清晰了，首先是当程序运行时，app.run()被调用执行并监听相应的host和port（默认为127.0.0.1:5000），当客户端有http请求通过浏览器发送至服务器端时时，服务端会根据request中的url对照路由找到相应需要执行的函数，并将函数返回值生成response反馈给客户端。
## Jinja2渲染模板
###  简介
jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。
###  基本语法
0x01 `{%%}`
主要用来声明变量或用在条件语句或循环语句
注意条件和循环需要多一层 {%endif%} 或 {%endfor%}用作结尾
    {% set c = 'Zh1z3ven' %}
    {% if 1==1 %}Zh1z3ven{%endif%}
    {% for i in [1, 2, 3] %}Zh1z3ven{%endfor%}
0x02 `{{}}`
将大括号内的表达式执行并输出结果到模板内
    {{98-2}} # 96
0x03 `{##}`
注释
###  存在漏洞的Demo
在jinja2中存在一个模板类`Tempalte`，`Template`类中的`render()`方法可以实现渲染的作用。而在jinja2中存在三种语法，针对CTF的话遇到的就是`{{}}`和`{%%}`，`{{}}`代表变量取值，是一种特殊的占位符，当我们传入的是一个表达式或方法，则会执行并返回他们的结果传入客户端，比如看下面这段代码我们执行后构造一个表达式去访问查看页面结果：
    from flask import Flask, request
    from jinja2 import Template
    app = Flask(__name__)
    @app.route('/')
    def test1():
        name = request.args.get('name')
        t = Template('''
        Zh1z3ven
          Hello, %s !
        '''% (name))
        return t.render()
    if __name__ == '__main__':
        app.run()
这里可以看到是存在SSTI注入的，因为在`{{98-2}}`中的表达式被执行了，也就是漏洞成因：当在不规范的代码中，直接将用户可控参数`name`在模板中直接渲染并将结果带回页面回显。所以在name参数输入`{{98-2}}`会输出`{{96}}`
###  不存在漏洞的Demo
而在flask中常用的渲染方法为`render_template()` 、 `render_template_string()`
当使用 `render_template()` 时，扩展名为 `.html` 、 `.htm` 、 `.xml` 和 `.xhtml`
的模板中开启自动转义。
当使用 `render_template_string()` 时，字符串开启 自动转义。
简单示例如下：
        {{title}} - Zh1z3ven
        Hello, {{user.name}}
        This is {{user.name}} information:{{user.info}}
其中`{{title}}`、`{{user.name}}`、`{{user.info}}`即为需要渲染的对象，我们在app.py里对其进行渲染。
    from flask import Flask
    from flask import render_template
    app = Flask(__name__)
    @app.route('/')
    @app.route('/index')
    def index():
        user = {
            'name' : 'Zh1z3ven',
            'info' : 'I am Zh1z3ven'
        }
        return render_template("index.html", title='Home', user=user)
    if __name__ == '__main__':
        app.run()
运行app.py 下面我们看一下页面结果：
上面就是一个简单且正常通过渲染的页面，因为需要渲染的参数我们都在app.py中写死了，并未交给用户控制，所以不存在SSTI注入。但是CTF或开发人员写好的代码将渲染的参数交给用户可控，并且没有对参数进行过滤那么可能会导致SSTI注入漏洞的产生。
通过两个例子也可以大致感受到漏洞的成因了
1、存在用户可控参数。
2、参数可被带入渲染函数内直接执行，即{{}}可被带入代码中让jinja2模块识别并解析。
## SSTI思路
在CTF中，python的ssti大多是依靠某些继承链：基类—>子类—>危险方法来实现命令执行+文件读取，这里有点类似于java的反序列化漏洞寻找调用链的意思。其实主要还是依据python中的内置类属性和方法通过寻找可以读文件或执行命令的模块与函数达到我们的目的。
###  内置类属性和方法
Python中的类和对象有许多内置属性以及相关函数，下面记录一些经常会用到的，可能会不全，遇到了再补充。
**0x01`__class__`**
python中一切皆对象，该方法返回当前对象所属的类，比如字符串对象则返回``
    >>> "".__class__
**0x02`__bases__`**
以元组的形式返回一个类所直接集成的类。大多是用来获取到基类(object)，比如：
    >>> "".__class__.__bases__
    (,)
**0x03`__base__`**