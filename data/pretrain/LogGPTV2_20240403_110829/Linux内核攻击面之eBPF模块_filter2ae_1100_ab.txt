        u64 umax_value;
        struct bpf_reg_state *parent;
        u32 frameno;
        s32 subreg_def;
        enum bpf_reg_liveness live;
        bool precise;
可以看到对于每一个操作数，它的类型，值，取值范围都有详细的变量在追踪。常见的操作类型有PTR指针类型，或者Scalar这种常量类型的数据，为了防止越界，Verifier禁止了很多类型的操作，比如禁止两个PTR类型的操作数运算，但是允许PTR类型与Scalar类型的操作数运算。即使允许PTR类型与Scalar类型操作，也不能保证安全性，因为如果Scalar比较大的话，还是可以导致OOB，所以Verifier通过设置取值范围的方式来进行校验，如果操作数在运算后超过了被设定的最大最小值范围，也会被禁止。  
我们可以看到`bpf_reg_state`还定义了一个tnum变量，这个变量注释说是获得操作数各个位的信息的情况的，value，mask两个字段一起表达操作数各个位的0,1，或者未知的三种状态的。
####  tnum数据结构的逻辑意义
tnum是为了描述那些不能有明确值的操作数，那么什么情况下操作数的值是不能确定的呢，例如从一个packet中读取一个half
word，这个值就是不能确定。而如果直接读取一个立即数，这种值就是确定的。对于这种不能确定的操作数，就可以用umax,umin,smax,smin这几种变量表示有符号和无符号的最大最小值，tnum描述他们的每个位的信息。总之配合最大最小值，tnum可以尽可能的对一个未知的变量进行预测。并且伴随着eBPF指令的执行，还会对tnum，最大最小值进行更新，举个例子
    if reg_0 var_off = tnum_intersect(reg->var_off,
                          tnum_range(reg->umin_value,
                             reg->umax_value));
    }
`__reg_bound_offset32`是一种特殊情况，只有当操作数已经明知是32位的才会执行，而对于一般的是默认执行`__reg_bound_offset`操作，我们可以先从`__reg_bound_offset`去推测
__reg_bound_offset32的大概意义。  
`tnum_intersect`函数的输入是两个tnum的变量，根据名字和源码我们可以简要总结：当有两个tnum对同一个操作数进行描述的时候，可以结合两个tnum的信息，这样可以对这个操作数的描述更加精确，结合的规则就是，如果一个tnum的某个位已知，另外一个tnum的对应位为未知，那么结合后新tnum对应位则是已知的。
`tnum_range`
函数作用是，根据一个更新后的最大最小值得到一个tnum。这个tnum可以与目标操作数的tnum进行tnum_intersect，相当于融合了最大最小值的信息，这样可以实现对原来的操作数进行更准确的预测更新。
所以根据`__reg_bound_offset`的作用，我们知道了主要目的就是根据最大最小值对原来操作数的tnum进行更加准确的预测。那么`__reg_bound_offset32`又有什么不同呢？
`__reg_bound_offset32` 源码如下:
    static void __reg_bound_offset32(struct bpf_reg_state *reg)
    {
        u64 mask = 0xffffFFFF;
        struct tnum range = tnum_range(reg->umin_value & mask,
                           reg->umax_value & mask); // ----->1
        struct tnum lo32 = tnum_cast(reg->var_off, 4);
        struct tnum hi32 = tnum_lshift(tnum_rshift(reg->var_off, 32), 32);
        reg->var_off = tnum_or(hi32, tnum_intersect(lo32, range));
    }
我们利用理解`tnum_range`函数的方法，可以推得`tnum_cast`，`tnum_lshift`，`tnum_or`的作用，可以感觉出整个函数的目的是同样根据最大最小值对已有的tnum值进行更新。而且，相比于`__reg_bound_offset`函数，`__reg_bound_offset32`还有一个隐藏的信息可以对操作数进行更加准确的预测：  
 **32位数的最大最小值不会超过0xFFFFFFFF**
这个隐藏条件的表达就是
标注1所做的工作，漏洞代码尝试用截断低32位的方式来表达32位数的最大最小值不会超过0xFFFFFFFF，但是实际上这个语句并不能表达这个功能。准确的表达是
    new_umin_value = min(0xffffffff,umin_value)
    new_umax_value = min(0xffffffff,umax_value)
     range  = tnum_range(new_umin_value, new_umax_value)
上面两句话是笔者自己理解的实现32位隐藏条件的代码。
####  漏洞根因
正是`struct tnum range = tnum_range(reg->umin_value & mask,  
reg->umax_value & mask);` 这一条语句导致的漏洞，这句话实现的是截断功能，而不是对于超出32位的数直接取值为0xffff
ffff的功能。
由于这个错误的实现导致Veifier并不能正确的验证eBPF指令的执行情况，所以对一些本应该禁止的OOB操作，Verifier还是通过了检查，最终可以实现对内核数据的越界读写。
## 0x03 小结
这个漏洞的Root
Cause是和漏洞函数的业务功能逻辑强相关的，如果不理解代码的目的，很难对这个漏洞的根本原因理解，而由于eBPF的执行流程又比较特别，需要对背景知识，设计架构，运行机理有一定的了解才能够推理出漏洞函数的功能。为了能够让不熟悉eBPF的同学能够更加快速的了解eBPF，接触eBPF这一个理想的内核攻击面。eBPF程序由用户定义，但是在内核中执行，这是eBPF模块是一个值得重视的内核攻击面的根本原因。希望本文提供的思维路线，能够帮助到大家。
## 0x04 参考
1   
2   
3   
4
[https://colorlight.github.io/2020/10/10/捉虫日记漏洞总结/](https://colorlight.github.io/2020/10/10/%E6%8D%89%E8%99%AB%E6%97%A5%E8%AE%B0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/)