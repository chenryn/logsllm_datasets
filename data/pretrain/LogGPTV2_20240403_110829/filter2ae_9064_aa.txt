**本文翻译自：[Hack the Virtual Memory: drawing the VM
diagram](https://blog.holbertonschool.com/hack-the-virtual-memory-drawing-the-vm-diagram/)**
# Hack the Virtual Memory: drawing the VM diagram
## Hack虚拟内存之第2章：虚拟内存图解
我们之前讨论过进程的虚拟内存中的内容。今天，我们将通过编写程序打印出各个元素的地址来“重建”（部分）下图。  
## 前提
为了完全理解本文，你需要知道：
  * C语言的基础知识
  * 汇编的基础知识（非必需）
  * Linux文件系统和shell的基础知识
  * 我们将用到/proc/[pid]/maps文件（查阅 **man proc** 或阅读本系列的第一篇文章： [第0章：C字符串和/proc](https://xz.aliyun.com/t/2478 "第0章：C字符串和/proc")）
## 环境
所有脚本和程序都已经在以下系统上进行过测试：
  * Ubuntu 14.04 LTS
    * Linux ubuntu 4.4.0-31-generic #50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
    * **下文描述均基于此系统，在其他系统上不一定成功**
使用工具：
  * gcc
    * gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
  * objdump
    * GNU objdump (GNU Binutils for Ubuntu) 2.24
  * udcli
    * udis86 1.7.2
  * bc
    * bc 1.06.95
## 栈
我们想要在图中找到的第一个东西是栈。我们知道在C语言中，局部变量位于栈中。因此，如果我们打印局部变量的地址，那么我们就应该能知道栈在虚拟内存中的位置。让我们使用这个程序（main-1.c）来找出栈的位置：
    #include 
    #include 
    #include 
    /**
     * main - print locations of various elements
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        int a;
        printf("Address of a: %p\n", (void *)&a);
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm2$ gcc -Wall -Wextra -pedantic -Werror main-0.c -o 0
    julien@holberton:~/holberton/w/hackthevm2$ ./0
    Address of a: 0x7ffd14b8bd9c
    julien@holberton:~/holberton/w/hackthevm2$
当我们比较其他元素地址时，这将是我们的第一个参考点。
## 堆
当使用malloc为变量分配空间时，将会使用到堆。添加一行代码使用malloc分配空间并查看malloc返回的内存地址位置（main-1.c）：
    #include 
    #include 
    #include 
    /**
     * main - print locations of various elements
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        int a;
        void *p;
        printf("Address of a: %p\n", (void *)&a);
        p = malloc(98);
        if (p == NULL)
        {
            fprintf(stderr, "Can't malloc\n");
            return (EXIT_FAILURE);
        }
        printf("Allocated space in the heap: %p\n", p);
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm2$ gcc -Wall -Wextra -pedantic -Werror main-1.c -o 1
    julien@holberton:~/holberton/w/hackthevm2$ ./1 
    Address of a: 0x7ffd4204c554
    Allocated space in the heap: 0x901010
    julien@holberton:~/holberton/w/hackthevm2$
很明显堆地址（0x901010）远小于栈地址（0x7ffd4204c554）。此时我们可以画出草图（堆与栈）：  
## 可执行代码区域
程序代码也在虚拟内存中。如果我们打印main函数的地址，我们可以知道程序代码与栈和堆的相对位置。看一下能否在堆下面找到程序代码（main-2.c）：
    #include 
    #include 
    #include 
    /**
     * main - print locations of various elements
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        int a;
        void *p;
        printf("Address of a: %p\n", (void *)&a);
        p = malloc(98);
        if (p == NULL)
        {
            fprintf(stderr, "Can't malloc\n");
            return (EXIT_FAILURE);
        }
        printf("Allocated space in the heap: %p\n", p);
        printf("Address of function main: %p\n", (void *)main);
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm2$ gcc -Wall -Wextra -Werror main-2.c -o 2
    julien@holberton:~/holberton/w/hackthevm2$ ./2 
    Address of a: 0x7ffdced37d74
    Allocated space in the heap: 0x2199010
    Address of function main: 0x40060d
    julien@holberton:~/holberton/w/hackthevm2$
似乎我们的程序地址（0x40060d）正如预期般位于堆地址（0x2199010）下面。  
但是，让我们确保这是我们程序的实际代码，而不是某种指向另一个位置的指针。用objdump反汇编我们的程序2并查看main函数的“内存地址”：
    julien@holberton:~/holberton/w/hackthevm2$ objdump -M intel -j .text -d 2 | grep ':' -A 5
    000000000040060d :
      40060d:   55                      push   rbp
      40060e:   48 89 e5                mov    rbp,rsp
      400611:   48 83 ec 10             sub    rsp,0x10
      400615:   48 8d 45 f4             lea    rax,[rbp-0xc]
      400619:   48 89 c6                mov    rsi,rax
**000000000040060d**
->我们找到完全相同的地址（0x40060d）。如果仍不确定，可以打印位于此地址的第一个字节，以确保它们与objdump的输出匹配（main-3.c）：
    #include 
    #include 
    #include 
    /**
     * main - print locations of various elements
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        int a;
        void *p;
        unsigned int i;
        printf("Address of a: %p\n", (void *)&a);
        p = malloc(98);
        if (p == NULL)
        {
            fprintf(stderr, "Can't malloc\n");
            return (EXIT_FAILURE);
        }
        printf("Allocated space in the heap: %p\n", p);
        printf("Address of function main: %p\n", (void *)main);
        printf("First bytes of the main function:\n\t");
        for (i = 0; i :' -A 5
    000000000040064d :
      40064d:   55                      push   rbp
      40064e:   48 89 e5                mov    rbp,rsp
      400651:   48 83 ec 10             sub    rsp,0x10
      400655:   48 8d 45 f0             lea    rax,[rbp-0x10]
      400659:   48 89 c6                mov    rsi,rax
    julien@holberton:~/holberton/w/hackthevm2$ ./3 
    Address of a: 0x7ffeff0f13b0
    Allocated space in the heap: 0x8b3010
    Address of function main: 0x40064d
    First bytes of the main function:
        55 48 89 e5 48 83 ec 10 48 8d 45 f0 48 89 c6 
    julien@holberton:~/holberton/w/hackthevm2$ echo "55 48 89 e5 48 83 ec 10 48 8d 45 f0 48 89 c6" | udcli -64 -x -o 40064d
    000000000040064d 55               push rbp                
    000000000040064e 4889e5           mov rbp, rsp            
    0000000000400651 4883ec10         sub rsp, 0x10           
    0000000000400655 488d45f0         lea rax, [rbp-0x10]     
    0000000000400659 4889c6           mov rsi, rax            
    julien@holberton:~/holberton/w/hackthevm2$
->可以看到程序打印出（和objdump）相同的地址和相同的内容。现在可以十分确定这是main函数地址。  
[可以在此处下载Udis86反汇编程序库](http://udis86.sourceforge.net/ "可以在此处下载Udis86反汇编程序库")  
以下是基于我们刚刚所了解的知识更新后的图表：  
## 命令行参数和环境变量
main函数可以带参数：
  * 命令行参数
    * main函数的第一个参数（通常命名为argc或ac）是命令行参数的数量
    * main函数的第二个参数（通常命名为argv或av）是一个指针数组指向输入的参数（C字符串）
  * 环境变量
    * main函数的第三个参数（通常命名为env或envp）是一个指针数组指向环境变量（C字符串）
让我们看看这些元素在进程的虚拟内存中的位置（main-4.c）：
    #include 
    #include 
    #include 
    /**