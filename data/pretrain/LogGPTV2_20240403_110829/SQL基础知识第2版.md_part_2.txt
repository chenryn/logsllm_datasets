请注意
删除表格中的记录时要小心！
注意SQL DELETE 语句中的 WHERE 子句！
WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录
都将被删除！
示例数据库
以下是 "Customers" 表中的数据：
9.3 DELETE 实例
在删除之前我们还是先建立一个临时表，将Customers表中的数据放到临时表中
SELECT * #Customers FROM Customers;
这样#Customers中的表结构和数据和Customers表中的一模一样了。
假设我们想从"#Customers" 表中姓名为“张三”的客户。
我们使用以下SQL语句：
DELETE FROM #Customers WHERE 姓名='张三';
现在，"#Customers" 表如下所示：
我们看到姓名为张三的客户已经被删除了。
9.4删除所有数据
您可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将
保持不变：
DELETE FROM table_name;
我们将#Customers表中的剩余数据全部删除
DELETE FROM #Customers;
结果如下：
我们看到表里面所有数据都被删除了。
9.5 批注
DELETE 就是将不需要的那些数据按给定的条件(WHERE)删除掉，如果想删除表中
的所有数据就不需要带 WHERE 了。DELETE 不带 WHERE 进行删除也是很危险的
操作，虽然可以还原，但是过程会很复杂。所有在进行删除操作之前一定要检查清
楚。
第十章 LIKE 的用法
10.1 LIKE 作用
在WHERE子句中使用LIKE运算符来搜索列中的指定模式。
有两个通配符与LIKE运算符一起使用：
• ％ - 百分号表示零个，一个或多个字符
• _ - 下划线表示单个字符
注意： MS Access使用问号（?）而不是下划线（_）。
百分号和下划线也可以组合使用！
10.2 LIKE 语法
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;
提示：您还可以使用AND或OR运算符组合任意数量的条件。
下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：
LIKE 运算符 描述
WHERE 地址 LIKE 'a%' 查找以“a”开头的任何值
WHERE 地址 LIKE '%a' 查找以“a”结尾的任何值
WHERE 地址 LIKE '%or%' 在任何位置查找任何具有“or”的值
WHERE 地址 LIKE '_r%' 在第二个位置查找任何具有“r”的值
WHERE 地址 LIKE 'a_%_%' 查找以“a”开头且长度至少为3个字符的值
WHERE 地址 LIKE 'a%o' 找到以"a"开头，以"o"结尾的值
示例数据库
以下是"Customers"表中的数据：
10.3 LIKE 运算符实例
以下SQL语句选择以“花”开头的“地址”的所有客户：
代码示例：
SELECT * FROM Customers WHERE 地址 LIKE '花%';
结果：
以下SQL语句选择客户省份以“省”结尾的所有客户：
代码示例：
SELECT * FROM Customers WHERE 省份 LIKE '%省';
结果：
以下SQL语句选择客户地址在第三位具有"路"的所有客户：
代码示例：
SELECT * FROM Customers WHERE 地址 LIKE '__路%';
注意：这里路前面有两个_
结果：
以下SQL语句选择客户地址以“花”开头且长度至少为3个字符的所有客户：
代码示例：
SELECT * FROM Customers WHERE 地址 LIKE '花__%';
结果：
以下SQL语句选择联系人地址以“北”开头并以“号”结尾的所有客户：
代码示例：
SELECT * FROM Customers WHERE 地址 LIKE '北%号';
结果：
以下SQL语句选择客户地址不以“北”开头的所有客户：
代码示例：
SELECT * FROM Customers WHERE 地址 NOT LIKE '北%'
结果
10.4 批注
LIKE关键字主要作用就是模糊匹配，把你不是太明确的数据通过%，_进行组合来搜
索到大概的数据。通过分析大概的数据进一步找到你需要的数据。在查找数据中经
常用到，而且用法也很灵活。
第十一章 IN 的用法
11.1 IN的作用
IN运算符允许您在WHERE子句中指定多个值。
IN运算符是多个OR条件的简写。
11.2 IN的语法
SELECT column_name(s) FROM table_name
WHERE column_name IN (value1, value2, ...);
或者
SELECT column_name(s) FROM table_name
WHERE column_name IN (SELECT STATEMENT);
示例数据库
以下数据选取自"Customers" 表：
11.3 IN的实例
以下SQL语句选择省份位于“上海市”，“北京市”和“广东省”的所有客户：
代码示例：
SELECT * FROM Customers
WHERE 省份 IN ('上海市', '北京市', '广东省');
结果：
可以看到省份那一列都是IN里面的数据
以下SQL语句选择不在“浙江省”，“上海市”或“北京市”中的所有客户：
代码示例：
SELECT * FROM Customers
WHERE 省份 NOT IN ('浙江省', '上海市', '北京市');
结果：
可以看到省份那一列排除了 IN里面的那些数据，因为这里是NOT，就是排除的意
思。
以下SQL语句选择来自同一城市的所有客户作为供应商"Suppliers"：
我们先看一下供应商"Suppliers"表里的内容:
代码示例：
SELECT * FROM Customers
WHERE 城市 IN (SELECT 城市 FROM Suppliers);
结果：
我们看到，供应商Suppliers表里只有城市为上海，才与客户Customers表里城市
也为上海的数据能对应上。所以这里 IN 的作用是取两个表都有的数据才会被查询
出来。
11.4 批注
IN的作用就是将需要查找的内容列出来放在后面的括号里，也可以将子查询的结果
放在括号内，这样IN就只找符合括号里的内容，从而起到筛选的作用。另外IN里
面可以放多种数据类型，常见的包括日期，字符，数值等类型。
第十二章 BETWEEN 的用法
12.1 BETWEEN的作用
BETWEEN 操作符用于选取介于两个值之间的数据范围内的值。
12.2 BETWEEN的边界
BETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。
BETWEEN运算符是包含性的：包括开始和结束值，等价于>= AND <=
12.3 BETWEEN的语法
SELECT column_name(s) FROM table_name
WHERE column_name BETWEEN value1 AND value2;
示例数据库
以下是"Products"表中的数据：
12.4 BETWEEN 实例
以下SQL语句选择价格在30到60之间的所有产品：
实例
SELECT * FROM Products
WHERE 价格 BETWEEN 30 AND 60;
结果：
可以看到 价格 那一列的数据都是介于30(包含)和60(包含)之间的
12.5 NOT BETWEEN 实例
要显示前面示例范围之外的产品，请使用NOT BETWEEN：
实例
SELECT * FROM Products
WHERE 价格 NOT BETWEEN 30 AND 60;
或
SELECT * FROM Products
WHERE NOT 价格 BETWEEN 30 AND 60;
这里的NOT位置可以在列的前面或者后面，结果都是一样的，只是个人写法习惯
结果：
价格那一列就会显示排除了在30到60之间的数了。
12.6 带有 IN 的 BETWEEN 操作符实例
以下SQL语句选择价格在10到60之间但名称不是大米和香蕉的所有产品：
实例
SELECT * FROM Products
WHERE (价格 BETWEEN 10 AND 60)
AND 名称 NOT IN ('大米','香蕉');
因为大米和香蕉都是字符类型，所以要用单引号('')
结果：
可以看到价格一列均满足10到60之间，名称一列香蕉(45.00)的价格本来也符合，
但是因为我们用NOT IN把他排除了，所以也不显示出来。
12.7 带有文本值的 BETWEEN 操作符实例
以下SQL语句选择所有带有名称 BETWEEN'面包'和'香蕉'的产品：
实例
SELECT * FROM Products
WHERE 名称 BETWEEN '面包' AND '香蕉'
结果：
你注意到了吗？
为什么会出现苹果呢？
这是因为数据库在进行筛选时是按照名称拼音首字母的 ASCII 进行排序的，面包的
首字母是M，香蕉的首字母是X，而苹果的首字母是P正好介于他们之间，所以被
包含了。
那为什么又没有雪梨呢？雪梨的首字母也是X啊？
数据库在首字母相同时会继续比较第二个字母，如果第二个也相同依次往下比较，
直到全部对比完。这里香蕉的全拼是XIANGJIAO，而雪梨的全拼是XUELI，很明显
按升序排列第二个字母 U 比字母 I 大，它已经超出了字母 I 这个上限的范围，所以
雪梨被排除了。
12.8 带有文本值的 NOT BETWEEN 操作符实例
以下SQL语句选择名称不是BETWEEN'面包'和'香蕉'的所有产品：
实例
SELECT * FROM Products
WHERE 名称 NOT BETWEEN '面包' AND '香蕉'
结果
排除掉面包和香蕉之间的数就剩下大米和雪梨了。
12.9 日期边界问题
示例表Orders
下面是选自 "Orders" 表的数据：
12.10 带有日期值的 BETWEEN 操作符实例
以下 SQL 语句选取 订单日期 介于 '2018-06-28' 和 '2018-09-28' 之间的所有
订单：
实例
SELECT * FROM Orders
WHERE 订单日期 BETWEEN '2018-06-28' AND '2018-09-28';
结果：
请注意，BETWEEN AND在处理日期可能会有你意向不到的结果
SQL 中 between and 是包括边界值的，not between 不包括边界值，不过如
果使用between and 限定日期需要注意，如果and后的日期是到天的，那么默
认为 00:00:00 例如：and 后的日期为 2018 年 09 月 28 日，就等价于 2018-0
9-28 00:00:00 ，那么 2018-09-28 11:24:54.000 的数据就查不到了，如果要
查到2018-09-28这一整天的数据，那么在取值的时候需要加1天，即BETWE
EN '2018-06-28' AND '2018-09-29'，这样返回的就是6月28日(含)到9月2
8日(含)的所有数据了。
第十三章 JOIN 连接的用法
13.1 JOIN连接的作用
JOIN 连接用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。
最常见的 JOIN 类型：INNER JOIN（简单的 JOIN）。 INNER JOIN 从多个表
中返回满足 JOIN 条件的所有行。
示例数据库
让我们看看选自 "Orders" 表的数据：
然后，看看选自 "Customers" 表的数据：
请注意，"Orders" 表中的 "客户 ID" 列指向 "Customers" 表中的客户 ID。上面
这两个表是通过 "客户ID" 列联系起来的。
13.2 JOIN实例
我们想知道每个订单ID都是哪些客户订购的，以及具体的订单时间。我们运行下面
的 SQL 语句（包含 INNER JOIN）：
SELECT o.订单ID, c.姓名, o.订单日期
FROM Orders o
INNER JOIN Customers c
ON o.客户ID=c.客户ID;
运行结果如下所示：
13.3不同的 JOIN
在我们继续讲解实例之前，我们先列出您可以使用的不同的 SQL JOIN 类型：
• INNER JOIN：如果表中有至少一个匹配，则返回行
• LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行
• RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行
• FULL JOIN：只要其中一个表中存在匹配，则返回行
13.4 INNER JOIN
内部链接INNER JOIN关键字选择两个表中具有匹配值的记录。
INNER JOIN 语法
SELECT column_name(s)FROM table1
INNER JOIN table2 ON
table1.column_name = table2.column_name;
注释：INNER JOIN 与 JOIN 是相同的，上面的示例就是INNER JOIN
13.5 LEFT JOIN
SQL 左链接 LEFT JOIN 关键字返回左表（表 1）中的所有行，即使在右表（表 2）
中没有匹配。如果在正确的表中没有匹配，结果是NULL。
LEFT JOIN 语法
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name=table2.column_name;
或：
SELECT column_name(s)
FROM table1
LEFT OUTER JOIN table2
ON table1.column_name=table2.column_name;
注释：在一些数据库中，LEFT JOIN称为LEFT OUTER JOIN。
LEFT JOIN示例
我们想看看客户 Customers 表中的所有用户是否都有下单，可以使用如下查询语
言：
SELECT c.姓名,o.订单ID, o.订单日期
FROM Customers c
LEFT JOIN Orders o
ON o.客户ID=c.客户ID;
结果：
我们发现刘二，李四，赵七没有对应的订单ID和订单日期，是因为他们没有在订单
表 Orders 中存在，没有匹配上他们的信息。但是由于是左连接，就把主表
Customers的信息全部显示出来了，就是对应上图的table1。
13.6 RIGHT JOIN
SQL右链接 RIGHT JOIN 关键字返回右表（table2）的所有行，即使在左表（table1）
上没有匹配。如果左表没有匹配，则结果为NULL。
RIGHT JOIN 语法
SELECT column_name(s) FROM table1
RIGHT JOIN table2 ON
table1.column_name = table2.column_name;
注释：在一些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。
右连接与左连接的主表刚好相反，会将 table2 中的数据完全显示，如果 table1 中
没有匹配上的就不显示。
13.7 FULL OUTER JOIN
当左（表1）或右（表2）表记录匹配时，FULL OUTER JOIN关键字将返回所有记
录。
注意： FULL OUTER JOIN可能会返回非常大的结果集！
FULL OUTER JOIN 语法
SELECT column_name(s) FROM table1
FULL OUTER JOIN table2 ON
table1.column_name = table2.column_name;
全连接就是将 table1 和 table2 的内容完全显示，不管有没有匹配上。
13.8 批注
JOIN 在 SQL 中占有重要的地位，通过 JOIN 我们可以将有匹配关系的两张表或更
多表进行关联，来获取我们想要的数据。关联的方式也比较灵活，常用的就是INNER
JOIN，请务必掌握它。
第十四章 UNION 的用法
14.1 UNION的作用
UNION运算符用于组合两个或更多SELECT语句的结果集。
14.2 UNION使用前提
UNION中的每个SELECT语句必须具有相同的列数
• 这些列也必须具有相似的数据类型
• 每个SELECT语句中的列也必须以相同的顺序排列
14.3 UNION 语法
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;
注释：默认情况下，UNION 运算符选择一个不同的值。如果允许重复值，请使用
UNION ALL。
14.4 UNION ALL 语法
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;
※ 注释：UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列
名。
示例数据库
以下是"Customers" 表中的数据：
选自 "Suppliers" 表的数据：
14.5 UNION 实例
以下SQL语句从 "Customers" 和"Suppliers" 表中选择所有不同的城市（只有不同
的值）：
实例
SELECT 城市 FROM Customers
UNION
SELECT 城市 FROM Suppliers
结果：
※ 注释：不能用 UNION 来列出两个表中的所有城市。如果一些客户和供应商来
自同一个城市，每个城市将只被列入一个列表。UNION将只选择不同的值，即会排
除重复数据只保留一个。请使用UNION ALL选择重复值!
14.6 UNION ALL 实例
以下 SQL 语句使用 UNION ALL 从 "Customers"和"Suppliers" 表中选择所有城