但是VOPS已经将数据改为瓦片式存储（在一个瓦片中存储了原有的多条记录的某列的值），那么如何才能对瓦片数据创建索引呢？  
我们当然不能将瓦片先解开，再来创建索引，这样无法取得好的效果，但是我们可以结合瓦片的特点，创建BRIN索引。  
BRIN索引用于记录某些连续的数据块中的元数据，最大值，最小值，平均值，多少空值等。非常适合瓦片数据，因为瓦片本身就是个聚集。  
另外BRIN更适合于存储顺序，与实际的逻辑值 线性相关的数据，比如递增字段。流式数据的递增字段，实际字段，序列字段等。。  
关于BRIN索引的原理和应用场景，可以参考  
[《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)  
[《PostgreSQL 9.5 new feature - lets BRIN be used with R-Tree-like indexing strategies For "inclusion" opclasses》](../201505/20150526_01.md)  
[《PostgreSQL 9.5 new feature - BRIN (block range index) index》](../201504/20150419_01.md)  
为了让PostgreSQL支持瓦片，我们需要将每个瓦片内的最大值和最小值取出，使用函数的方式，返回scalar类型，然后对scalar类型创建BRIN索引。  
VOPS提供4个函数，可以将瓦片内的最大值，最小值取出  
```  
当VOPS表按某个字段排序存储时（即物理存储于逻辑值 完全线性相关），使用first, last函数，取出该字段的 最小值和最大值。  
当VOPS表没有按某个字段排序存储时，则需要使用high和low，取出该字段的 最大值和最小值。  
```  
注意high, low需要额外的排序操作，效率略低。  
first和last不需要排序，因为瓦片内的内容已经排序，所以效率很高。  
例子  
```  
create index low_boundary on trades using brin(first(day)); -- trades table is ordered by day  
create index high_boundary on trades using brin(last(day)); -- trades table is ordered by day  
```  
first, last, high, low返回的是PostgreSQL原生boolean，而不是vops_boolean，所以不需要加filter，可以直接写在where表达式中。  
那么下面这个QUERY可以用到以上索引  
```  
select sum(price) from trades where first(day) >= '2015-01-01' and last(day) =1) | (x<=0)，这个括号也不需要了。  
7\. 如果查询包含了向量聚合操作，count(```*```)会自动转换为countall(```*```)。而不会报错。  
8\. 当我们在瓦片类型的操作符后吗传入STRING时，目前还需要使用显示转换。  
例如  
```  
l_shipdate如果是瓦片类型，那么以下必须加显示转换  
l_shipdate <= '1998-12-01'  
加显示转换  
l_shipdate <= '1998-12-01'::date  
```  
因为有两个一样的重载操作符  
```  
vops_date <= vops_date  
vops_date <= date  
```  
### post parse analyze hook使用注意 - 首次使用，需通过vops_initialize载入或者配置shared_preload_libraries  
由于VOPS使用的是post parse analyze hook，并且通过 _PG_init 函数加载。  
如果你没有将vops.so配置进shared_preload_libraries，那么 _PG_init 函数是在会话使用到它是才会被载入，然而他的载入是晚于parse analyze的，因为一次调用QUERY，parse analyze就结束了。所以这种情况QUERY可能得到错误的结果。  
因此你要么将vops.so配置进shared_preload_libraries，让数据库启动时就加载钩子。  
要么，你可以在执行QUERY前，先执行一下vops_initialize()函数，人为的载入钩子。  
## VOPS 使用例子  
既然VOPS 向量计算是为OLAP而生的，所以自然，我需要测试的是OLAP领域的TPC-H。  
tpc-h包含了21个QUERY，接下来的例子测试的是Q1和Q6，没有使用JOIN，前面说了VOPS目前还不支持JOIN。  
代码如下  
```  
-- Standard way of creating extension  
create extension vops;  
-- Original TPC-H table  
create table lineitem(  
   l_orderkey integer,  
   l_partkey integer,  
   l_suppkey integer,  
   l_linenumber integer,  
   l_quantity real,  
   l_extendedprice real,  
   l_discount real,  
   l_tax real,  
   l_returnflag char,  
   l_linestatus char,  
   l_shipdate date,  
   l_commitdate date,  
   l_receiptdate date,  
   l_shipinstruct char(25),  
   l_shipmode char(10),  
   l_comment char(44),  
   l_dummy char(1)); -- this table is needed because of terminator after last column in generated data  
-- Import data to it  
copy lineitem from '/mnt/data/lineitem.tbl' delimiter '|' csv;  
-- Create VOPS projection  
create table vops_lineitem(  
   l_shipdate vops_date not null,  
   l_quantity vops_float4 not null,  
   l_extendedprice vops_float4 not null,  
   l_discount vops_float4 not null,  