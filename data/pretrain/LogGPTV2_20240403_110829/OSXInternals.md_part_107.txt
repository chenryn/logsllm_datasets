Chapter 8. Memory Page 121 of 135
 A regular file's mapping is backed by swap space if MAP_PRIVATE was specified in the flags
argument. This means that any modifications made to the mapping are private.
Let us discuss the implementation of mmap() by looking at the sequence of operations that take place
when a program maps a regular file. First, the program must acquire a file descriptor for the file in
question. Figure 848 shows the relevant activity that occurs because of the open() system call. In this
case, a preexisting regular file residing on an HFS Plus volume is being opened for the first time.
Figure 848. Setting up the vnode pager during the open() system call
[View full size image]
The vnode structure (struct vnode [bsd/sys/vnode_internal.h]) corresponding to a regular file
contains a pointer to a UBC information structure (struct ubc_info [bsd/sys/ubc_internal.h]). The
ubc_info structure contains a pointer to the pagerin this case, the vnode pager, as represented by a
vnode_pager structure (struct vnode_pager [osfmk/vm/bsd_vm.c]). Figure 849 shows how these
structures are connected when the vnode is created.
Figure 849. Setting up of the vnode pager for a newly created vnode
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 122 of 135
[View full size image]
Suppose a user program calls mmap() to map the file descriptor obtained in Figure 848. Figure 850 shows
the ensuing kernel activity. mmap() calls mach_vm_map() [osfmk/vm/vm_user.c], which, in our case of a
regular file, will call vm_object_enter() [osfmk/vm/vm_object.c]. Since no VM object will be
associated with the given pager yet, vm_object_enter() will create a new VM object. Moreover, it will
initialize the pager, which includes allocating a control port and passing it as an argument to
memory_object_init(). Finally, the call to vm_map_enter() [osfmk/vm/vm_map.c] will result in a
virtual address range being allocated in the task's virtual address space.
Figure 850. Kernel processing of the mmap() system call
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 123 of 135
When the program attempts to access an address of the mapped memory for reading, it will cause page-in
activity if the corresponding page is not resident yet (to begin with, no pages will be resident). Since the
program mapped the file with PROT_READ | PROT_WRITE as the protection value and MAP_SHARED
specified in the flags, it will also eventually cause page-out activity if it modifies the mapped memory.
Figures 851 and 852 show an overview of the steps involved in a page-in operation, with the latter
showing details of paging in from a vnode. Figures 853 and 854 show the analogous overview for a page-
out operation.
Figure 851. An overview of a page-in operation
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 124 of 135
Figure 852. Paging in from a vnode
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 125 of 135
Figure 853. An overview of a page-out operation
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 126 of 135
Figure 854. Paging out to a vnode
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 127 of 135
8.18. 64-bit Computing
When introduced in 1991, the MIPS R4000 was the world's first 64-bit processor. The term 64-bit meant
several things when applied to the R4000, for example:
A 64-bit virtual address space (although the maximum user process size was limited to 40 bits on
the R4000)
A 64-bit system bus
The 64-bit general-purpose (integer) registers
A 64-bit ALU and a 64-bit on-chip FPU
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 128 of 135
A 64-bit natural mode of operation, with support for 32-bit operation with integer registers acting as
32-bit registers
A processor is informally considered a 64-bit processor if it has 64-bit general-purpose registers and can
support 64-bit (or at least "much more" than 32-bit) virtual memory. Moreover, the operating system must
explicitly make use of the processor's 64-bit capabilities for 64-bit computing to materialize.
The introduction and evolution of 64-bit computing with Mac OS X can be summarized as follows:
The G5 (PowerPC 970, specifically) was the first 64-bit processor to be used in a Macintosh
computer.
Mac OS X 10.3 was the first Apple operating system to support more than 4GB of physical memory
on 64-bit hardware. User virtual address spaces were still 32-bit-only.
Mac OS X 10.4 was the first Apple operating system to support 64-bit user virtual address spaces
on 64-bit hardware.
How Many Bits?
The G4, which is a 32-bit processor, contains 64-bit and even 128-bit registers. We saw in
Chapter 3 that the floating-point registers are 64 bits wide and the vector registers are 128
bits wide on both the G4 and the G5. What makes the G5 a 64-bit processor is that it has 64-
bit general-purpose registers, and it can use 64-bit virtual addressing. A 64-bit-wide C data
type such as a long long resides in a single register when the G5 is operating as a 64-bit
processor; however, on the G4 (or the G5 operating as a 32-bit processor), a long long is split
into two 32-bit quantities, occupying two registers. Consequently, integer math and logical
operations require more instructions and more registers.
8.18.1. Reasons for 64-bit Computing
Often 64-bit computing is (incorrectly) understood to be invariably conducive to performance. Although
in some cases this may be true, usually only programs with very specific needs benefit from 64-bit
computing. Whether a program performs better just by virtue of being 64-bit depends on whether the
processor performs better in its 64-bit mode, perhaps because its 64-bit instructions operate on more data
at the same time. Another, more important reason for justifying 64-bit computing is the substantially
larger address space it provides. Let us look at some of these reasons in the context of Mac OS X on the
G5.
8.18.1.1. 32-bit Execution on 64-bit PowerPC
In general, 64-bit processors and operating systems allow simultaneous coexistence of 32-bit and 64-bit
programs. However, architectures differ in how a 64-bit processor performs when in 32-bit mode. As we
saw in Chapter 3, the PowerPC began life with a 64-bit architecture that had a 32-bit subset. When a 64-
bit PowerPC implementation (such as the G5) operates in 32-bit computation mode, there is no great
performance penalty as is the case with some other processor architectures. In particular, the following
aspects are noteworthy about the 32-bit operation of a 64-bit PowerPC.
All 64-bit instructions are available.
All 64-bit registers are available.
The processor's use of busses, caches, data paths, execution units, and other internal resources is the
same regardless of the operating mode.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 129 of 135
The current computation mode is determined by bit 0the SF (Sixty Four) bitof the Machine State Register
(MSR). The processor runs in 64-bit mode when this bit's value is 1.
However, there are important differences between the two computation modes.
An effective address is treated as a 32-bit address in 32-bit mode. 32-bit load/store instructions
ignore the upper 32 bits of memory addresses. Note that the address computations actually produce
64-bit addresses in 32-bit modethe upper 32 bits are ignored as a software convention.
Condition codes (such as carry, overflow, and zero bits) are set per 32-bit arithmetic in 32-bit mode.
When branch conditional instructions test the Count Register (CTR), they use 32-bit conventions in
32-bit mode.
The available instructions, the number of available registers, and the width of these registers all remain the
same in both 64-bit and 32-bit computation modes. In particular, you can perform hardware-optimized 64-
bit integer arithmetic in 32-bit programs, albeit with some caveats. However, the 32-bit ABI will use the
same conventions for passing parameters, saving nonvolatile registers, and returning values, regardless of
which instructions are used. Consequently, using full 64-bit registers from a nonleaf function (one that
calls at least one other function) in a 32-bit program is not safe.
Let us consider an example. The cntlzd instruction is a 64-bit-only instruction that counts the number of
consecutive zero bits starting at bit 0 of its second operand, placing the count in the first operand.
Consider the program shown in Figure 855. The main function causes this instruction to execute in two
ways: first, by calling another function, and second, by using inline assembly.
Figure 855. Using a 64-bit-only instruction
; cntlzd.s
.text
.align 2
#ifndef __ppc64__
.machine ppc970
#endif
.globl _cntlzd
_cntlzd:
cntlzd r3,r3
blr
// cntlzd_main.c
#include 
#include 
extern uint64_t cntlzd(uint64_t in);
int
main(void)
{
uint64_t out;
uint64_t in = 0x4000000000000000LL;
out = cntlzd(in);
printf("%lld\n", out);
__asm("cntlzd %0,%1\n"
: "=r"(out)
: "r"(in)
);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 130 of 135
printf("%lld\n", out);
return 0;
}
We can attempt to compile the source shown in Figure 855 in several ways, as shown in Table 89.
Table 89. Compiling for a 64-bit PowerPC Target
Compiler Options Description Result
No special options Compile normally, as a 32- Will not compile.
bit program.
-force_cpu_subtype_ALL Compile as a 32-bit Will run only on 64-bit
program, but force 64-bit hardware, but both uses of
instructions to be accepted cntlzd will produce
by the compiler. undesirable results.
-mpowerpc64 -mcpu=G5 Compile as a 32-bit Will run only on 64-bit
program, with explicit hardware. The inline usage
support for 64-bit of cntlzd will produce the
instructions on 64-bit desired result, but the
hardware. function call version will
not, because main() will
pass the 64-bit argument to
cntlzd() as two 32-bit
quantities in two GPRs.
-arch ppc64 Compile as a 64-bit Will run only on 64-bit
program. hardware and produce the
desired result in both uses
of cntlzd.
Let us look at some examples of using the information in Table 89.
[View full width]
$ gcc -Wall -o cntlzd_32_32 cntlzd_main.c cntlzd.s
/var/tmp//ccozyb9N.s:38:cntlzd instruction is only for 64-bit implementations (not
allowed without -force_cpusubtype_ALL option)
cntlzd.s:6:cntlzd instruction is only for 64-bit implementations (not allowed without
-force_cpusubtype_ALL option)
$ gcc -Wall -force_cpusubtype_ALL -o cntlzd cntlzd_main.c cntlzd.s
$ ./cntlzd
141733920768
141733920768
$ gcc -Wall -mpowerpc64 -mcpu=G5 -o cntlzd cntlzd_main.c cntlzd.s
$ ./cntlzd
141733920768
1
$ gcc -Wall -arch ppc64 -o cntlzd cntlzd_main.c cntlzd.s
$ ./cntlzd
1
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 131 of 135
1
Enabling 64-bit instructions in a 32-bit PowerPC program sets the CPU subtype in the Mach-O header to
ppc970, which prevents execve() from running it on 32-bit hardware.
8.18.1.2. Need for Address Space
The need for more than 4GB of virtual address space is perhaps the most justifiable reason for 64-bit
computing on the PowerPC. That said, even 32-bit Mac OS X programs can benefit from 64-bit hardware
with more than 4GB of physical memory. Such systems are supported beginning with Mac OS X 10.3. A
32-bit program could use mmap() and munmap() to switch between multiple windows of disk-backed
memory. The sum of all the window sizes could be larger than 4GB, even though the program would not
be able to address more than 4GB of virtual memory at any given time. Since the Mac OS X buffer cache
is greedy, it will consume all available physical memory, keeping as much data as possible resident,
provided the file descriptors corresponding to the various mappings are kept open. This approach is
tantamount to a program handling its own paging, whereas in the case of a 64-bit address space, the kernel
would handle the paging.
This approach, although workable, is still a compromise. Depending on the specific needs of a memory-
hungry program, the approach may be merely inconvenient, or it may be unacceptable.
8.18.1.3. Large-File Support
One aspect sometimes associated with 64-bit computing is large-file supportthat is, the operating system's
ability to use file offsets larger than 32 bits wide. A 32-bit signed offset can address only up to 2GB of
data in a file. Besides support from the file system to house large files, you need larger offsetssay, 64 bits
wide, for convenienceto use such files. However, large-file support does not require 64-bit hardware:
Numbers larger than a hardware register can be synthesized using multiple registers on 32-bit hardware.
Many operating systems, including Mac OS X, provide large-file support on 32-bit and 64-bit hardware
alike.
The off_t data type, which is used by relevant system calls, is a 64-bit signed integer on Mac OS X,
allowing file-system-related calls to handle 64-bit offsets in 32-bit programs. The size_t data type is
defined to be an unsigned long integer, which is 32 or 64 bits wide, respectively, in the 32-bit and 64-bit
environments.
8.18.2. Mac OS X 10.4: 64-bit User Address Spaces
The primary user-visible aspect of 64-bit computing in Mac OS X 10.4 is that you can have a user-space
program with a 64-bit virtual address space, which allows the program to conveniently/concurrently use
more than 4GB of virtual memory. The PowerPC version of Mac OS X explicitly supports binaries for
two architectures: ppc and ppc64, with respective executable formats (Mach-O and Mach-O 64-bit).
When a ppc64 binary runs, the corresponding process can concurrently address more than 4GB of virtual
memory.
Both ppc64 and ppc versions of an executable can be contained in a single file and executed transparently
by using fat files. On 64-bit hardware, the execve() system call selects the ppc64 executable from a fat
file that contains both ppc64 and ppc executables.
8.18.2.1. Data Model
The Mac OS X 64-bit environment uses the LP64 data model, as do most other 64-bit operating systems.
The letters L and P in LP64 mean that the long and pointer data types are 64 bits wide. The integer data
type remains 32 bits wide in this model. LP64 is also known as 4/8/8 for this reason. ILP64 (8/8/8) and
LLP64 (4/4/8) are alternative modelsthe I in ILP64 represents the integer data type. Table 810 shows the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 132 of 135
models used by 64-bit versions of several operating systems. As seen in the table, the pointer data type is
64 bits wide in all models. In contrast, the 32-bit Mac OS X environment uses the ILP32 data model, in
which the integer, long, and pointer data types all are 32 bits wide. In both the LP64 and ILP32 models,
the following relationship holds:
sizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)
Table 810. A Sampling of Abstract Data Models in 64-bit-Capable Operating Systems
Operating System/Platform Data Model
Mac OS X 10.4 LP64
AIX LP64
Cray (various operating systems) ILP64
Digital UNIX LP64
HP-UX LP64
IRIX LP64
Linux LP64
NetBSD (alpha, amd64, sparc64) LP64
Solaris LP64
Tru64 LP64
Windows LLP64 (also known as P64)
z/OS LP64
8.18.2.2. Implementation
Although Mac OS X 10.4 supports 64-bit user programs, the kernel is still 32-bit.[26] Although the kernel
manages as much physical memory as the system can support, it does not directly address more than 4GB
of physical memory concurrently. To achieve this, the kernel uses appropriately sized data structures to
keep track of all memory, while itself using a 32-bit virtual address space with 32-bit kernel pointers.
Similarly, device drivers and other kernel extensions remain 32-bit. Figure 856 shows a conceptual view
of 64-bit support in Mac OS X 10.4.
[26] In fact, a given version of Mac OS uses the same kernel executable for all supported
Apple computer models.
Figure 856. An overview of 64-bit support in Mac OS X
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 133 of 135
The kernel uses addr64_t, defined to be a 64-bit unsigned integer, as the basic effective address type. An
addr64_t is passed and returned as two adjacent 32-bit GPRs, regardless of the register width of the
underlying processor. This data type is used in the kernel for common code that is used unchanged on 32-
bit and 64-bit machines. For example, the pmap interface routines use addr64_t as the address data type.
The kernel also uses the 64-bit long long data type (equivalent to addr64_t) for various VM subsystem
entities. It internally converts between long long (or addr64_t) parameters and single 64-bit register
values.
// osfmk/mach/memory_object_types.h