# 一、欢迎来到 DockerSwarm
众所周知，Docker 是当今最具吸引力的开源技术之一。原因很容易理解，Docker 让所有人都可以使用容器技术，并且它附带了一个可拆卸的内置电池，受到充满活力的社区的祝福。
在早期，用户在被这个易于使用的工具迷住后开始使用 Docker，这使他们能够解决许多挑战:拉、打包、隔离，并使应用几乎没有负担地跨系统移植。
![Welcome to Docker Swarm](img/image_01_001.jpg)
*简化的 Docker 生态系统*
你可能会注意到这里有一群鲸鱼在和其他鲸鱼嬉戏。然而，自从容器出现以来，人们一直在寻找工具来高效地编排大量容器。Docker 团队通过在 2015 年发布 Docker Swarm(以下简称 Swarm，Docker 生态系统的一部分)以及 Docker Machine 和 Docker Compose 解决了这一需求。上图显示了简化的 Docker 生态系统，它由 Docker Machine 提供一台新的 Docker 就绪机器组成，然后一组机器将组成一个 Docker Swarm 集群。稍后，我们将能够使用 Docker Compose 向集群部署容器，就像它是一个普通的 Docker 引擎一样。
2014 年初，作为一个名为*束*的通信协议项目，Docker 开始计划在本地制作一个集群管理系统。后来，它被实现为一个守护进程，用 Docker API 控制异构分布式系统。该项目已被重命名为`libswarm`，`Swarmd`是它的守护进程。保持允许任何 Docker 客户端连接到 Docker Engines 池的相同概念，项目的第三代被重新设计为使用相同的 Docker 远程 API 集，并于 2014 年 11 月更名为“Swarm”。基本上，Swarm 最重要的部分是它的远程 APIs 维护人员努力工作，以保持他们与 Docker Engine 的每个版本 100%兼容。我们将第一代 Swarm 称为“Swarm v1”。
2016 年 2 月，核心团队发现集中式服务的扩展限制后，Swarm 再次内部重新设计为`swarm.v2`。这一次，考虑了分散的集群设计。2016 年 6 月，toolkit 作为任何规模的分布式服务的编排工具包发布。Docker 宣布，在 2016 年 DockerCon 上，SwarmKit 被合并到 Docker Engine 中。我们将这个版本的 Swarm 称为“Swarm v2”或“Swarm 模式”。
正如我们将在后面看到的，这三个火枪手(Docker Swarm、Docker Machine 和 Docker Compose)在一起时运行得最好，它们彼此无缝地交织在一起，以至于几乎不可能将它们视为单件。
然而，尽管这台机器和 Compose 的目标很直接，也很容易使用和理解，Swarm 是一个工具，它本身确实值得一本书。
使用 Docker Machine，您可以在多个云平台上调配虚拟机和物理机，以及裸机来运行 Docker 容器。使用 Docker Compose，您可以通过用 YAML 简单而强大的语法描述行为来定义 Docker 文件，并通过“组合”这些文件来启动应用。Swarm 是一个强大的聚类工具，需要进行更深入的研究。
在本章中，我们将了解以下主题:
*   什么是容器编排
*   Docker Swarm 基础和架构
*   与其他开源编排器的区别
*   “旧”Swarm，v1
*   “新”群体，群体模式
# 聚类工具和容器管理器
集群工具是一种软件，允许操作员与单个端点对话，并命令和编排一组资源，在我们的例子中是容器。不是在集群上手动分配工作负载(容器)，而是使用集群工具来自动化这个任务和许多其他任务。正是聚类工具将决定*在哪里*启动作业(容器)*如何*存储它们，*何时*最终重新启动它们，等等。操作员只需配置一些行为，决定集群拓扑和大小，调整设置，以及启用或禁用高级功能。Docker Swarm 是容器聚类工具的一个例子。
除了集群工具，还有容器管理器平台可供选择。它们不提供容器托管，但与一个或多个现有系统交互；这类软件通常提供良好的 web 界面、监控工具和其他可视化或更高级别的功能。容器管理器平台的例子有 Rancher 或 Tutum(2015 年被 Docker Inc .收购)。
# 群体目标
Docker 本身将 Swarm 描述为:
> *Docker Swarm 是 Docker 的原生聚类。它将一个 Docker 主机池转变为一个虚拟的 Docker 主机。*
Swarm 是一个工具，它给你一种错觉，让你可以管理一个由多个 Docker 主机组成的单个巨大的 Docker 主机，就像它们是一个主机一样，只有一个命令入口点。它允许您使用常规的 docker 工具，使用 Docker 本机或 python-docker 客户端，甚至使用 Docker 远程 API，在这些主机上编排和操作一定数量的容器。
这就是生产环境中最小的 Swarm 集群的样子:
![Swarm goals](img/image_01_002.jpg)
# 为什么使用 Swarm
对容器使用集群解决方案有很多原因。随着应用的增长，您将面临新的强制性要求，例如可扩展性、可管理性和高可用性。
有很多可用的工具；选择 Docker Swarm 给了我们一些立竿见影的优势:
*   **原生集群** : Swarm 是 Docker 中的原生，由 Docker 团队和社区制作。它的最初创建者是 Andrea Luzzardi 和 Victor Vieux，他们是 Docker 引擎远程 API 本身的早期实现者。Swarm 集成了机器、合成和生态系统中的其他工具，没有额外的要求。
*   **生产等级** : Swarm v1 于 2015 年 11 月宣布成熟，准备投入生产使用。该团队已经证明了 Swarm 可以扩展到控制多达 1000 个节点的引擎。Swarm v2 允许形成具有数千个节点的集群，因为它使用分散的发现。
*   **开箱即用** : Swarm 不需要你重新设计你的应用来适应另一个编排工具。您可以在不做任何更改的情况下使用 Docker 映像和配置，并进行大规模部署。
*   **易于设置和使用** : Swarm 易于操作。自 Docker 1.12 以来，只需向 Machine 命令添加一些标志或使用 Docker 命令，就可以实现有效的部署。发现服务被集成到 Swarm Mode 中，使其快速安装:不需要设置外部 Consul、Etcd 或 Zookeeper 集群。
*   **活跃社区** : Swarm 是一个充满活力的项目，社区非常活跃，正在大力开发中。
*   **在 Hub** 上可用:你不需要安装 Swarm，它作为 Docker 镜像(Swarm v1)准备好了，所以你只需要从 Hub 中拉出并运行它，或者集成到 Docker Engine 中。而群模式已经集成到 Docker 1.12+中。仅此而已。
# 真实世界用例示例
Docker Swarm 是几个项目的选择，例如:
*   Rackspace Carina 构建在 Docker Swarm 之上:Rackspace 提供托管容器环境，内部基于 Docker Swarm
*   Zenly 正在谷歌云平台和裸机服务器上使用 Swarm
*   ADP 使用 Docker 和 Swarm 为其遗留部署提供速度
*   集群可以使用亚马逊 AWS 和微软 Azure 模板直接部署在其公共云上
## 宠物对牛模型
在创建和利用基础设施时，有两种相反的方法:宠物和牛。
在*宠物*模型中，管理员部署服务器或虚拟机，或者，在我们的例子中，部署容器并处理它们。她或他登录，安装软件，配置软件，并确保一切正常。因此，这是她或他的宠物。
相比之下，管理员并不真正关心他的基础设施组件的命运，当他们认为它们是*牛*的时候。她或他不会登录到每个单元或手动处理它，而是使用批量方法，部署、配置和管理都是通过自动化工具完成的。如果一个服务器或容器死了，它会自动复活，或者生成另一个来替换失效的。结果，操作员正在处理牛。
在本书中，我们将使用第一章中的宠物模型向读者介绍一些基本概念。但是我们以后会遵循牛的模式，那时将是做严肃事情的时候。
# 群体特征
Swarm 的主要目的已经确定，但是它是如何实现目标的呢？以下是它的主要特点:
*   Swarm v1 支持 1.6.0 或更高版本的 Docker Engine。自 1.12 版本以来，Swarm v2 已经内置于 Docker 引擎中。
*   Swarm 每个版本的 API 都将与同一个版本系列上的 Docker APIs 兼容。向后一个版本保持 API 兼容性。
*   在 Swarm v1 中，使用领导库为多个 Swarm 主机实现了领导选举机制(仅在部署带有发现服务的 Swarm 时受支持，如 Etcd、Consul 或 Zookeeper)。
*   在 Swarm v2 中，已经使用分散机制构建了领导者选举。Swarm v2 不再需要一组专用的发现服务，因为它集成了 Etcd，一种 Raft 共识算法的实现(参见[第 2 章](02.html "Chapter 2. Discover the Discovery Services")、*发现发现服务*)。
*   在 Swarm v1 术语中，领导者 Swarm 主节点称为主节点，其他节点称为副本节点。在 Swarm v2 中，有一个主节点和工作节点的概念。而引导节点由集群使用 Raft 自动管理。
*   基本和高级计划选项。调度器是一种算法，它决定容器必须物理放置在哪些主机上。Swarm 附带了一组内置的调度程序。
*   让操作员对调度做出决策的约束和密切关系；例如，人们希望保持数据库容器在地理位置上靠近，并建议调度程序这样做。约束和亲缘关系使用 Docker Swarm 标签。
*   在 Swarm v2 中，集群内负载平衡是通过内置的 DNS 循环来实现的，而它通过路由网状机制来支持外部负载平衡，该机制是通过 IPVS 实现的。
*   高可用性和故障转移机制意味着您可以创建一个具有多个主机的 Swarm 所以如果他们倒下了，会有其他主人准备好控制。默认情况下，当我们形成至少 3 个节点的集群时，Swarm v2 是可用的。所有节点都可以是主节点。另外，Swarm v2 包含健康指标信息。
# 类似项目
我们有不止一个 Docker Swarm 来聚集容器。为了完整起见，在完全进入 Swarm 之前，我们将简要回顾一下最广为人知的开源替代方案。
## 立方结构
**Kubernetes**([http://Kubernetes . io](http://kubernetes.io))又名 **k8s** ，目标与 Docker Swarm 相同；它是一个容器集群管理器。最初在谷歌实验室作为 Borg 项目启动，后来开源并于 2015 年作为稳定版本发布，支持**谷歌云平台**、 **CoreOS** 、 **Azure** 、**vs sphere**。
到目前为止，Kubernetes 在 Docker 中运行容器，Docker 是由一个名为 Kubelet 的服务通过 API 命令的，kube let 是一个注册和管理 Pods 的服务。在架构上，Kubernetes 从逻辑上来说，不是将集群划分为裸容器，而是划分为 Pods。Pod 是最小的可部署单元，在物理上是由一个或多个容器组成的应用的表示，这些容器通常是并置的，共享存储和网络等资源(用户可以使用 Compose 在 Docker 中模拟 Pod，并从 Docker 1.12 开始创建 Docker **DABs** ( **分布式应用捆绑包**)。
Kubernetes 包括一些预期的基本集群功能，如标签、健康检查器、Pods 注册表、可配置的调度程序，以及大使或负载平衡器等服务。
实际上，Kubernetes 用户利用 Kubernetes 客户端与 Kubernetes 主节点接口，后者是集群控制单元，命令 Kubernetes 节点做一些工作，称为奴才。奴才运行 Pods，所有东西都被 Etcd 粘在一起。
在一个 Kubernetes 节点上，你会发现一个正在运行的 Docker Engine，它运行一个 kube-api 容器，以及一个名为`kubelet.service`的系统服务。
有许多 kubectl 命令非常直观，例如
*   `kubectl cluster-info`、`kubectl get pods`和`kubectl get nodes`检索有关集群及其运行状况的信息
*   `kubectl create -f cassandra.yaml`和任何衍生的 Pod 命令，用于创建、管理和销毁 Pod
*   `kubectl scale rc cassandra --replicas=2`扩展 Pods 和应用
*   `kubectl label pods cassandra env=prod`配置 Pod 标签
这只是 Kubernetes 的高级全景。Kubernetes 和 Docker Swarm 之间的主要区别是:
*   Swarm 有一个更简单易懂的架构。Kubernetes 需要更多的专注，只是为了把握它的基本面。但是学习总是好的！
*   再来说说架构:Kubernetes 基于 Pods，Swarm 基于容器，DABs。
*   你需要安装 Kubernetes。通过在 GCE 上部署，使用 CoreOS，或者在 OpenStack 之上，您必须处理好它。您必须部署和配置一个 Kubernetes 集群，这需要一些额外的努力。Swarm 集成到 Docker 中，不需要额外的安装。
*   Kubernetes 有一个复制控制器的附加概念，这是一种确保某些模板描述的所有 Pods 在给定时间运行的技术。
*   Kubernetes 和 Swarm 都使用 Etcd。但在 Kubernetes 中，它被视为外部设施服务，而在 Swarm 中，它被集成并在管理器节点上运行。
Kubernetes 和 Swarm 之间的性能比较可能采取圣战的形式，我们想减去这种做法。有一些基准显示 Swarm 启动容器的速度，还有一些基准显示 Kubernetes 运行其工作负载的速度。我们认为，必须始终取得基准结果。也就是说，Kubernetes 和 Swarm 都适合运行大型、快速和可扩展的容器集群。
## 韩国舰队
**舰队**([https://github.com/coreos/fleet](https://github.com/coreos/fleet))是容器乐队的另一个可能选择。它来自 CoreOS 容器产品家族(包括 CoreOS、Rocket 和 Fronf)，与 Swarm、Kubernetes 和 Mesos 的基本不同之处在于它是作为系统的扩展而构建的。机群通过调度器在集群节点间分配资源和任务。因此，它的目标不仅仅是提供一个纯容器集群化，而是成为一个分布式的更通用的精化系统。例如，在 Fleet 的顶部运行 Kubernetes 是可能的。
机群由负责调度作业、其他管理操作的引擎和运行在每台主机上的代理组成，这些代理物理执行分配给它们的作业，并不断向引擎报告状态。Etcd 是一种发现服务，可以让一切都粘在一起。
您可以通过舰队集群的主命令`fleetctl`与列表、启动和停止容器和服务选项进行交互。
综上所述，舰队不同于 DockerSwarm:
*   它是分配任务的更高层次的抽象，而不仅仅是一个容器编排器。
*   可以把 Fleet 看作是集群的分布式初始化系统。Systemd 代表一台主机，Fleet 代表一组主机。
*   Fleet 专门将一堆 CoreOS 节点聚集在一起
*   您可以在 Fleet 之上运行 Kubernetes，以利用 Fleet 的弹性和高可用性功能
*   没有已知的稳定和健壮的方法来自动集成 Fleet 和 Swarm v1。
*   目前，fleet 没有被测试为运行具有超过 100 个节点和 1000 个容器的集群([https://github . com/coreos/Fleet/blob/master/Documentation/Fleet-scaling . MD](https://github.com/coreos/fleet/blob/master/Documentation/fleet-scaling.md))，而我们能够运行具有 2300 个节点和更高的 4500 个节点的 Fleet。
## 阿帕奇月
无论您是否可以将 Fleet 视为集群的分布式初始化系统，您都可以将 Mesos([https://mesos.apache.org/](https://mesos.apache.org/))视为一个*分布式内核*。使用 Mesos，您可以将所有节点资源当作一个资源来使用，并且在本书的范围内，在它们上面运行容器集群。
Mesos 最初于 2009 年在伯克利大学启动，是一个成熟的项目，已经成功用于生产，例如通过推特。
它甚至比 Fleet 更通用，是多平台的(您可以在 Linux、OS X 或 Windows 节点上运行它)，并且能够运行异构作业。除了纯大数据作业(Hadoop 或 Spark)和其他作业(包括持续集成、实时处理、网络应用、数据存储等)之外，您通常可以在 Mesos 上运行容器集群。
一个 Mesos 集群由一个主、从和框架组成。如您所料，主服务器在从服务器上分配资源和任务，负责系统通信并运行发现服务(ZooKeeper)。但是什么是框架呢？框架就是应用。一个框架由一个调度器和一个执行器组成，第一个分配任务，第二个执行任务。
出于我们的兴趣，容器通常通过一个名为 Marathon([https://meso sphere . github . io/Marathon/docs/native-docker . html](https://mesosphere.github.io/marathon/docs/native-docker.html))的框架在 Mesos 上运行。
Mesos 和 Docker Swarm 之间的比较在这里没有意义，因为它们可能非常互补地运行，也就是说 Docker Swarm v1 可以在 Mesos 上运行，Swarm 源代码的一部分只是专门用于此。相反，Swarm Mode 和 SwarmKit 非常类似于 Mesos，因为它们将任务中的作业抽象出来，并将其分组到服务中，以在集群上分配负载。我们将在[第 3 章](03.html "Chapter 3. Meeting Docker Swarm Mode")、*会议 DockerSwarm 模式*中讨论更好的群工具包特性。
## Kubernetes 对舰队对介子
Kubernetes、Fleet 和 Mesos 试图解决类似的问题；它们为您的资源提供了一个抽象层，并允许您连接到集群管理器。然后你可以启动工作和任务，你选择的项目会把它整理出来。这种差异可以从提供的现成功能以及您可以在多大程度上定制资源和作业的分配和扩展精度中看出。三者中，Kubernetes 更自动化，Mesos 更可定制，所以从某个角度来看，功能强大(当然，如果你需要所有这些功能的话)。
Kubernetes 和 Fleet 抽象并默认了许多需要为 Mesos 配置的细节，例如调度器。在 Mesos 上，你可以使用马拉松或 Chronos 调度程序，甚至可以自己编写。如果你不要求、不想甚至不能深入挖掘这些技术细节，你可以选择 Kubernetes 斯或舰队。这取决于您的实际和/或预测工作量。
## 群体对抗所有人
那么，你应该采用什么解决方案呢？像往常一样，你有一个问题，开源足够慷慨，可以提供许多技术，这些技术经常可以相互交叉，帮助你成功地达到一个目标。问题是如何以及选择什么来解决你的问题。Kubernetes、Fleet 和 Mesos 都是强大而有趣的项目，Docker Swarm 也是如此。
假设理解这四个人是多么自动和简单，Swarm 就是赢家。这并不总是一个优势，但在本书中，我们将展示 Docker Swarm 如何帮助您让真实的事情发挥作用，请记住，在 DockerCon 主题演讲之一中，Docker 的首席技术官兼创始人所罗门·海克斯(Solomon Hykes)建议 *Swarm 将是一个层，可以为许多编排和调度框架*提供一个公共接口。
# Swarm v1 架构
本节讨论 Docker Swarm 的概述体系结构。Swarm 的内部结构如图 3 所示。
![The Swarm v1 architecture](img/image_01_003.jpg)
*Docker Swarm v1 的内部结构*
从**管理器**部分开始，您将在图的左侧看到一个标有 *Docker Swarm API* 的块。如前所述，Swarm 公开了一组类似于 Docker 的远程 API，允许您使用任何 Docker 客户端连接到 Swarm。然而，Swarm API 与标准的 Docker 远程 API 略有不同，因为 Swarm API 也包含与集群相关的信息。例如，对 Docker Engine 运行`docker info`会给你单个 Engine 的信息，但是当我们对 Swarm 集群调用`docker info`时，我们也会得到集群中节点的数量以及每个节点的信息和健康状况。
Docker Swarm API 旁边的块是*集群抽象*。它是一个抽象层，允许不同类型的集群实现为 Swarm 的后端，并共享同一套 Docker 远程 API。目前我们有两个集群后端，内置的 Swarm 集群实现和 Mesos 集群实现。 *Swarm Cluster* 和*内置调度器*块代表内置 Swarm Cluster 实现，而 *Mesos Cluster* 表示的块是 Mesos 集群实现。
Swarm 后端的*内置调度器*带有多个*调度策略*。两个策略是*扩散*和 *BinPack* ，后面章节会解释。如果你熟悉 Swarm，你会注意到这里缺少了 Random 策略。随机策略被排除在解释之外，因为它仅用于测试目的。
除了调度策略，Swarm 还使用了一组*调度过滤器*来帮助筛选出未满足条件的节点。目前过滤器有六种，分别是*健康*、*端口*、*容器槽*、*依赖*、*亲和*、*约束*。当一个人按照这个顺序调度新创建的容器时，它们被应用于过滤器。
在**代理**部分，有 Swarm 代理试图将它们的引擎地址注册到发现服务中。
最后，集中的部分 **DISCOVERY** 是在 AGENTS 和 MANAGER 之间协调引擎的地址。基于代理的发现服务目前使用 LibKV，它将发现功能委托给您的键值存储选择、咨询、Etcd 或 ZooKeeper。相比之下，我们也可以只使用 Docker Swarm 管理器，而不使用任何键值存储。这种模式称为无代理发现*、*，它们是文件和节点(在命令行上指定地址)。
我们将在本章后面使用无代理模型来创建一个最小的本地 Swarm 集群。我们将在[第 2 章](02.html "Chapter 2. Discover the Discovery Services")、*中遇到其他发现服务，在[第 3 章](03.html "Chapter 3. Meeting Docker Swarm Mode")、*中遇到发现服务*和群模式架构*。
## 术语
在继续其他部分之前，我们回顾一些与 Docker 相关的术语，以回忆 Docker 概念并介绍 Swarm 关键字。