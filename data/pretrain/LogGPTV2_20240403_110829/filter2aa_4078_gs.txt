改进项 目 管理和软件编码， 以便开发更有效的软件。 随着编程和管理能力得到改善， 软件的实际生
成大小应当更小。
20.1 .5 变更和配置管理
一旦软件发布到生产环境， 用户必然会请求增加新功能、 修正 bug 以及对代码的其他更改。 正
像组织开发软件的严密过程一样， 同样也必须以有组织的方式管理所请求的更改。 这些变更必须被
记录到 中 央存储库 ， 以 支持将来的 审计 、 调查和分析需求。
将变更管理作为 安全工具
在受控的数据 中 心环境中监视系统时， 豆豆管理(又称为控制管理)扮演 了 重要的 角 色。 本书 的
一位作者最近与一个组织一起工作， 将变更管理作为一种能够检测对计算系统进行非投权史改的主
要组件来使用 。
在本章中， 你将会了解到文件完整性监控工具(例如， Tripwire)女口何允许监控系 统的变化。 这个
组织使用 Tripwire 来监控数百 台 生产服务器。 然而， 该组织很快发现难以应付由 于正常活动导致的
文件修改警告。 该作者与组织一起工作， 希望调整 Tripwire监控策略并集成它们到 支史管理流程中 。
此时， 所有的 Tripwire 警告都被集中 至监控中心， 监控中 心的管理员 将这些警告与 支史许可联系 在
一起。 只有在安全团 队确 定某个变更并不关联任何认可的变更请求时， 系 统管理员 才会接收到警告。
这种方式大大减少 了 管理员检查文件完整性所花费的时间， 并且为安全管理员 改进了 安全工具
的有效性。
第 20 章 软件开发安全
这种变更管理流程有三个基本组件:
请求控制 请求控制过程提供了 一个有组织的框架， 在这个框架内， 用户 可以请求变更， 管理
者可 以进行成本/效益分析 ， 开发人员可 以优化任务。
变更控制 开发人员使用变更控制过程来重新创建用户遭遇的特定情况并且分析能够进行弥补
的适当变更。 变更控制过程也提供了 一个有组织的框架。 在这个框架内 ， 多个开发人员可 以在部署
到生产环境之前创建和测试某个解决方案。 变更控制包括: 遵守质量控制约束， 开发用于更新或更
改部署的工具， 正确记录任何编码变化， 以及将新代码对安全性的 负面影响最小化。
发布控制 一旦完成变更， 它们就必须通过发布控制过程来进行发布认可。 发布控制过程中一
个必不可少的步骤是: 复核并确保更改过程中作为编程辅助设计插入的任何代码(例如， 调试代码和
/或后门)， 在发布新软件产品之前都已被删除。 发布控制还应当包括验收测试， 从而确保对终端用
户 工作任务的任何更改都是可理解的和有用 的 。
除了更改控制过程之外， 安全管理员还应当意识到配置管理的重要性。 配置管理过程用于控制
整个组织范围内使用 的软件版本， 并且正式跟踪和控制对软件配置的更改。 这个过程具有下列 4 个
主要组件 :
配置标识 在配置标识过程中， 管理员记录整个组织范围 内 的软件产 品 的配置。
配置控制 配置控制确保对软件版本的更改要与更改控制和配置管理策略一致。 只 有符合这些
策略的授权分发才能够执行更新操作 。
配置状态统计 用 于跟踪所有发生 的授权更 改的正规过程。
配置审计 进行定期的配置审计能够确保实际的生产环境与统计记录一致， 以及确保没有发生
未授权的配置变更。
总之， 变更控制与配置管理技术一起构成了 软件工程体系的重要部分， 并且能够防止组织遭遇
与开发相关的安全性 问题。
20. 1 .6 DevOps 方法
最近， 许多技术专业人士意识到， 在软件开发、 质量保证和技术操作这些主要的 IT 职能之间存
在脱节的情况。 这些职能， 通常配备给不同类型的个人， 并且还位于不同 的组织， 通常彼此冲突。
这种冲突导致在创建代码、 测试和部署到生产环境中 的长时间延迟。 当 问题出现时， 团 队不是一起
合作解决 问题 ， 而是经常 " 踢皮球 "， 这导致官僚作风。
DevOps 方法通过将三种职能集中在一个操作模型中来解决这些问题。 DevOps 这个词是开发
(Development)和操作(Op巳:rations)的组合， 表示这些功能必须合井和合作才能满足业务需求。 图 20.6
中 的模型说 明 了 软件开发、 质量保证和 IT 操作的重叠性。
DevOps模型与敏捷开发方法紧密配合， 旨在显著地缩短开发、 测试和部署软件更改所需的时间。
虽然传统方法常常导致主要软件部署很少， 或许每年一次， 但是使用DevOps模型的组织通常每天部
署代码多次 。 一些组织甚至努力实现连续部署的 目 标， 其中代码可以每天部署几十甚至几百次。
注意 :
如果有兴趣学 习 关于 DevOps 更多 的内容， 作者极力推荐一本书给大家， 书名叫作 ThePhoenix
P吨iect: A Novel αbout JT，DevOps，and Helping Your Business Wìn (IT Revolution Press，2013)。 这本书 以 引
人入胜的 小说形 式呈现 了 DevOps 案 例 ， 分享 了 DevOps 战略。
601
602
CISSP 官方学习指南(第 7 版)
π 操作
图 20.6 DevOps 模型
20.1 .7 应用编程接 口
尽管早期的 Web 应用程序通常是处理用户请求和提供输出 的独立系统， 但现代的 Web 应用程
序越来越复杂， 它们通常包括多个不同的 Web 服务之间 的交互。 例如， 一个零售网站可能会利用一
个外部信用卡处理服务， 允许用户在社交媒体上分享他们的采购信息， 与运输供应网站集成， 并在
其他网站上提供推荐计划 。
为 了使这些跨站点功能正确工作， 网站必须相互交互。 许多组织为了 这个 目标提供应用编程接
口 (API)0 API 允许应用程序开发人员绕过传统的网页， 井通过函数调用直接与底层服务进行交互。
例如， 一个社交媒体 API 可能包括 以下一些 API 函数调用 :
• 发布状态
• 关注用 户
• 取消关注的用户
• 喜欢/喜爱的发布
提供和使用 API 为服务提供商创造了 巨大的机会， 但也带来了一些安全风险。 开发人员必须意
识到这些挑战， 并在创建和使用 API 时解决这些挑战。
首先， 开发人员必须考虑认证要求。 一些 APL 比如允许检查天气预报或产品库存的 APL 可
以 向公众提供， 并且不需要任何认证就可以使用 。 其他 APL 例如那些允许修改信息、 下订单或访
问敏感信息的 APL 只 限于特定用户并且依赖于安全认证。 API 开发人员必须知道何时需要身份认
证， 并确保他们认证每个 API 调用 的凭据和授权。 这种认证通常通过为授权的 API 用户提供一个被
每一个 API 调用通过的复杂 API 密钥来完成。 后端系统在处理请求之前验证此 API 密钥， 确保进行
请求的系统被授权进行特定的 API 调用 。
警告 :
API 密钥就像密码， 应该被视为 非常敏感的信息。 它们应该总是存储在安全位直， 并且仅在加
密的通信信道上传输。 如果有人获得对 API 密钥的访问权限， 他们就可以 与 Web 服务进行交互， 就
像他们是你一样 !
API 也必须彻底测试安全缺陷， 就像任何 Web 应用程序一样。 将在下一节中 了 解更多信息。
第 20 章 软件开发安全
20. 1 .8 软件测试
作为开发过程的一部分， 组织在内部分发(或市场发布)任何软件之前都应当对其进行彻底测试。
进行测试的最佳时间是设计模块之时。 换句话说， 用 于测试某个产品 的机制和用于研究该产品的数
据集应当与产 品本身同时进行设计。 编程团队应当开发特殊的数据测试组以及预先知道正确的输出
结果， 通过这些数据测试组能够测试软件所有可能的执行路径。
应该执行的多个测试的其中一个是合理性检查。 合理性检查确保匹配的符合指定指标的返回值
在合理的范围内。 例如， 一个手自予计算一个人的最佳体重， 并返回 612 磅的值， 这肯定是一次失败
的 合理性检查 !
此外 ， 在进行软件测试时， 应该测试软件产品如何处理正常和有效的输入数据、 不正确的类型、
越界值以及其他界限和/或条件。 真实的工作量可能提供最佳的压力测试。 但是， 因为一个缺陷或错
误就会导致违背测试数据的完整性或机密性， 所以不应该使用真实的或实际的现场数据进行测试，
在早期开发阶段尤其如此。
测试软件时， 应该应用与组织其他方面所使用 的相同的责任分离规则 。 换句话说， 应当指定编
程人员 以外的人员进行软件测试， 从而避免利益冲突， 并且能够保证最后的产品更成功。 在第三方
测试软件时， 必须确保第三方执行客观的和无偏见的检查。 第三方测试允许更广泛和更彻底的测试，
并且能够防止 由于编程人员 的偏见和爱好而影响测试结果。
可 以使用 下列三种软件测试方法:
自盒测试 白盒测试检查程序的内部逻辑结构并逐行执行代码， 从而分析手里字是否存在潜在的
错误。
黑盒测试 通过提供广泛的输入场景和查看输出 ， 黑盒测试从用户的角度检查程序。 黑盒测试
人员并不访问内 部的代码。 在提交系统之前进行的最终验收测试就是黑盒测试的常见示例 。
灰盒测试 灰盒测试组合了上述两种测试方式， 并且是一种流行的软件验证方式。 在这种测试
方式中 ， 测试人员着手从用户的角度处理软件， 分析输入和输出。 测试人员也会访问源代码， 并且
使用源代码来帮助设计测试。 不过， 测试人员在测试期间 并不分析程序的内部工作原理。
除了评估软件的质量， 程序员和安全专业人员应仔细评估软件的安全性， 以确保满足组织的安
全要求。 这对于暴露给公众的 Web 应用程序尤其关键。 有两种专门用于评估应用程序安全性的测试
类别 :
静态测试 静态测试通过分析源代码或编译的应用程序来评估软件的安全性， 而不需要运行软
件。 静态分析通常涉及使用 自 动化工具来检测常见的软件缺陷， 如缓冲区溢出(关于缓冲区溢出的更
多 内容， 请参见第 2 1 章 "恶意代码与应用攻击 " )。 在成熟的开发环境中 ， 应用程序开发人员可以
访 问静态分析工具 ， 并在整个设计/构建/测试过程中 使用它们。
动态测试 动态测试在运行时环境中评估软件的安全性， 并且通常是部署了 由其他人编写的应
用程序的组织的唯一选择。 在这些情况下 ， 测试人员通常无法访问基础的源代码。 动态软件测试的
常见示例是使用 Web 应用程序扫描工具来检测是否存在跨站脚本、 SQL 注入或 Web 应用程序中的
其他缺陷 。 在 生产环境下 的动态测试应始终仔细考虑 以避免意外中断服务。
正确地实施软件测试是项 目 开发过程中的一个关键要素。 通常在商业和内 部软件中发现的许多
常见错误和疏忽都可 以消除。 保持测试计划和结果作为系统永久性文档 的一部分。
603
CISSP 官方学 习 指南(第 7 版)
20. 1 .9 代码仓库
软件开发需要共同的努力 ， 大型软件项 目 需要开发人员 团队可以同时承担代码的不同部分的工
作 。 使情况进一步复杂化的事实是 ， 这些开发者可能在地理上分散在世界各地。