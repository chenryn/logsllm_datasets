### 优化后的文本

#### 改进项目管理和软件编码
为了开发更有效的软件，我们需要改进项目管理和软件编码。随着编程和管理能力的提升，软件的实际生成大小应变得更小。

#### 20.1.5 变更和配置管理
一旦软件发布到生产环境，用户通常会请求增加新功能、修正bug以及其他代码更改。就像在软件开发过程中需要严格的流程一样，变更请求也必须以有组织的方式进行管理。这些变更必须记录在中央存储库中，以便支持未来的审计、调查和分析需求。

##### 将变更管理作为安全工具
在受控的数据中心环境中监视系统时，变更管理（又称控制管理）扮演了重要角色。最近，本书的一位作者与一个组织合作，将变更管理作为一种能够检测对计算系统未经授权修改的主要组件来使用。

在本章中，你将了解到文件完整性监控工具（例如Tripwire）如何允许监控系统的变更。该组织使用Tripwire监控数百台生产服务器，但很快发现难以处理由于正常活动导致的大量文件修改警告。作者与该组织合作，调整了Tripwire的监控策略，并将其集成到支持管理流程中。这样一来，所有Tripwire警告都被集中到监控中心，由管理员将这些警告与支持许可关联起来。只有当安全团队确定某个变更不关联任何认可的变更请求时，系统管理员才会收到警告。这种方法大大减少了管理员检查文件完整性的时间，并提高了安全工具的有效性。

#### 第20章 软件开发安全
这种变更管理流程包括三个基本组成部分：
- **请求控制**：提供了一个有组织的框架，在这个框架内，用户可以请求变更，管理者可以进行成本/效益分析，开发人员可以优化任务。
- **变更控制**：开发人员使用变更控制过程来重现用户遇到的具体情况，并分析适当的变更。变更控制过程还提供了另一个有组织的框架，在此框架下，多个开发人员可以在部署到生产环境之前创建并测试解决方案。变更控制包括遵守质量控制约束、开发用于更新或更改部署的工具、正确记录任何编码变化以及最小化新代码对安全性的影响。
- **发布控制**：完成变更后，它们必须通过发布控制过程获得批准。发布控制的一个关键步骤是复核并确保在编程辅助设计中插入的所有调试代码或后门在新软件产品发布前已被删除。此外，发布控制还应包括验收测试，以确保对终端用户工作任务的任何更改都是可理解和有用的。

除了变更控制过程外，安全管理员还应意识到配置管理的重要性。配置管理过程用于控制整个组织范围内的软件版本，并正式跟踪和控制对软件配置的更改。这一过程包含以下四个主要部分：
- **配置标识**：在此过程中，管理员记录整个组织范围内的软件产品的配置。
- **配置控制**：确保对软件版本的更改符合变更控制和配置管理策略。只有经过授权的分发才能执行更新操作。
- **配置状态统计**：用于正式跟踪所有已发生的授权更改。
- **配置审计**：定期进行配置审计，以确保实际的生产环境与记录一致，且未发生未经授权的配置变更。

总之，变更控制和配置管理技术构成了软件工程体系的重要部分，有助于防止与开发相关的安全问题。

#### 20.1.6 DevOps方法
近年来，许多技术专业人士注意到，在软件开发、质量保证和技术运营这三大IT职能之间存在脱节。这些职能通常分配给不同类型的个人，且往往位于不同的组织，彼此间常常产生冲突。这种冲突导致从创建代码、测试到部署到生产环境的过程出现长时间延迟。当问题出现时，团队不是一起合作解决问题，而是经常“踢皮球”，从而导致官僚作风。

DevOps方法通过将这三种职能整合到一个操作模型中来解决这些问题。DevOps这个词是由开发（Development）和运营（Operations）组合而成，表示这些功能必须合并和协作才能满足业务需求。图20.6展示了软件开发、质量保证和IT运营之间的重叠关系。

DevOps模型与敏捷开发方法紧密结合，旨在显著缩短开发、测试和部署软件变更所需的时间。传统方法可能导致每年仅几次主要软件部署，而采用DevOps模型的组织则可能每天多次部署代码。有些组织甚至努力实现持续部署的目标，其中代码每天可以部署数十次甚至数百次。

**注意**：
如果你有兴趣了解更多关于DevOps的内容，强烈推荐一本书《The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win》（IT Revolution Press，2013）。这本书以引人入胜的小说形式呈现了DevOps案例，并分享了DevOps战略。

#### 20.1.7 应用编程接口
尽管早期的Web应用程序通常是独立系统，处理用户请求并提供输出，但现代的Web应用程序越来越复杂，通常涉及多个不同Web服务之间的交互。例如，一个零售网站可能会利用外部信用卡处理服务，允许用户在社交媒体上分享购物信息，与运输供应商集成，并在其他网站上提供推荐计划。

为了使这些跨站点功能正常工作，网站必须相互交互。为此，许多组织提供了应用编程接口（API）。API允许应用程序开发人员绕过传统的网页，并通过函数调用直接与底层服务进行交互。例如，一个社交媒体API可能包括以下一些API函数调用：
- 发布状态
- 关注用户
- 取消关注用户
- 喜欢/喜爱发布

提供和使用API为服务提供商创造了巨大的机会，但也带来了一些安全风险。开发人员必须意识到这些挑战，并在创建和使用API时解决这些问题。

首先，开发人员必须考虑认证要求。某些API（如天气预报或产品库存查询）可以向公众开放，无需认证即可使用。而其他API（如修改信息、下单或访问敏感信息）则仅限于特定用户，并依赖于安全认证。API开发人员必须知道何时需要身份认证，并确保每个API调用的凭据和授权都得到验证。这种认证通常通过为授权的API用户提供一个复杂的API密钥来完成。后端系统在处理请求之前会验证此API密钥，以确保请求的系统被授权进行特定的API调用。

**警告**：
API密钥类似于密码，应被视为非常敏感的信息。它们应始终存储在安全位置，并仅通过加密通信通道传输。如果有人获得了API密钥，他们就可以像你一样与Web服务进行交互！

API也必须彻底测试安全缺陷，就像任何Web应用程序一样。我们将在下一节中了解更多信息。

#### 20.1.8 软件测试
作为开发过程的一部分，组织应在内部发布或市场发布任何软件之前对其进行彻底测试。最佳测试时间是在设计模块时。换句话说，用于测试产品的机制和数据集应与产品本身同时设计。编程团队应开发特殊的数据测试组，并预先知道正确的输出结果，以便测试软件的所有可能执行路径。

应执行的多个测试之一是合理性检查。合理性检查确保返回值在合理的范围内。例如，一个手写程序计算一个人的最佳体重并返回612磅，显然是一次失败的合理性检查！

此外，在进行软件测试时，应测试软件产品如何处理正常和有效的输入数据、不正确的类型、越界值以及其他边界和条件。真实的工作负载可能提供最佳的压力测试。然而，由于一个缺陷或错误就可能导致测试数据的完整性和机密性受损，因此不应使用真实的现场数据进行测试，特别是在早期开发阶段。

测试软件时，应应用与组织其他方面相同的职责分离规则。即，应指定编程人员以外的人员进行软件测试，以避免利益冲突，并确保最终产品更加成功。第三方测试软件时，必须确保其执行客观且无偏见的检查。第三方测试允许更广泛和更彻底的测试，并防止因编程人员的偏见和偏好而影响测试结果。

以下是三种常用的软件测试方法：
- **白盒测试**：检查程序的内部逻辑结构并逐行执行代码，以分析潜在的错误。
- **黑盒测试**：从用户的角度检查程序，提供广泛的输入场景并查看输出。黑盒测试人员不访问内部代码。提交系统之前的最终验收测试就是一个典型的黑盒测试示例。
- **灰盒测试**：结合了上述两种测试方法，是一种流行的软件验证方式。在这种测试中，测试人员从用户的角度处理软件，分析输入和输出，并访问源代码以帮助设计测试。然而，测试人员在测试期间并不分析程序的内部工作原理。

除了评估软件的质量，程序员和安全专业人员还应仔细评估软件的安全性，以确保满足组织的安全要求。这对于面向公众的Web应用程序尤为重要。有两种专门用于评估应用程序安全性的测试类别：
- **静态测试**：通过分析源代码或编译的应用程序来评估软件的安全性，而不需要运行软件。静态分析通常涉及使用自动化工具来检测常见的软件缺陷，如缓冲区溢出（更多内容请参见第21章“恶意代码与应用攻击”）。在成熟的开发环境中，应用程序开发人员可以访问静态分析工具，并在整个设计/构建/测试过程中使用它们。
- **动态测试**：在运行时环境中评估软件的安全性，通常是部署由他人编写的应用程序的组织的唯一选择。在这种情况下，测试人员通常无法访问基础源代码。动态软件测试的一个常见示例是使用Web应用程序扫描工具来检测是否存在跨站脚本、SQL注入或其他缺陷。在生产环境下的动态测试应始终谨慎进行，以避免意外中断服务。

正确实施软件测试是项目开发过程中的一个关键要素。许多商业和内部软件中常见的错误和疏忽都可以通过这种方式消除。保持测试计划和结果作为系统永久文档的一部分。

#### 20.1.9 代码仓库
软件开发需要共同的努力，大型软件项目需要开发团队同时承担代码的不同部分。进一步复杂化的是，这些开发者可能分布在世界各地。