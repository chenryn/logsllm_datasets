title:Blacksheep: detecting compromised hosts in homogeneous crowds
author:Antonio Bianchi and
Yan Shoshitaishvili and
Christopher Kruegel and
Giovanni Vigna
Blacksheep: Detecting Compromised Hosts in
Homogeneous Crowds
Antonio Bianchi, Yan Shoshitaishvili, Christopher Kruegel, Giovanni Vigna
{antoniob,yans,chris,vigna}@cs.ucsb.edu
UC Santa Barbara
Santa Barbara, CA, USA
ABSTRACT
The lucrative rewards of security penetrations into large organi-
zations have motivated the development and use of many sophis-
ticated rootkit techniques to maintain an attacker’s presence on a
compromised system. Due to the evasive nature of such infections,
detecting these rootkit infestations is a problem facing modern or-
ganizations. While many approaches to this problem have been
proposed, various drawbacks that range from signature generation
issues, to coverage, to performance, prevent these approaches from
being ideal solutions.
In this paper, we present Blacksheep, a distributed system for
detecting a rootkit infestation among groups of similar machines.
This approach was motivated by the homogenous natures of many
corporate networks. Taking advantage of the similarity amongst
the machines that it analyses, Blacksheep is able to efﬁciently and
effectively detect both existing and new infestations by comparing
the memory dumps collected from each host.
We evaluate Blacksheep on two sets of memory dumps. One
set is taken from virtual machines using virtual machine introspec-
tion, mimicking the deployment of Blacksheep on a cloud comput-
ing provider’s network. The other set is taken from Windows XP
machines via a memory acquisition driver, demonstrating Black-
sheep’s usage under more challenging image acquisition condi-
tions. The results of the evaluation show that by leveraging the
homogeneous nature of groups of computers, it is possible to de-
tect rootkit infestations.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Invasive software
Keywords
computer security, rootkit detection, kernel-based rootkits
1.
INTRODUCTION
Over the past several years, computer security has taken the cen-
ter stage, as several high-proﬁle organizations have suffered costly
intrusions. Oftentimes, as in the case of the 2011 RSA compromise,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
such intrusions begin as a foothold on a single infected machine
and spread out from that foothold to infect a larger portion of the
enterprise. In the case of the 2010 Stuxnet attack on Irani nuclear
reactors, this infection took the form of a kernel-based rootkit.
Rootkits are pieces of software designed to stealthily modify the
behavior of an operating system in order to achieve malicious goals,
such as hiding user space objects (e.g., processes, ﬁles, and network
connections), logging user keystrokes, disabling security software,
and installing backdoors for persistent access. Although several
detection and prevention techniques have been developed and de-
ployed, all have considerable drawbacks, and as a result, rootkits
remain a security threat: according to recent estimates, the percent-
age of rootkits among all anti-virus detections is in the range of
7-10% [17, 32].
The situation is further complicated by the fact that rootkit eva-
sion techniques are continuously evolving [17]. One recent devel-
opment that has greatly complicated rootkit detection is the emer-
gence of rootkits that work solely by modifying data, rendering
tools that focus on detecting code changes (such as the System Vir-
ginity Veriﬁer [27]) ineffective. This drawback applies to most cur-
rent detection techniques, rendering them ineffective against memory-
only rootkits.
The goal of our work is to detect kernel rootkits, a broad class
of rootkits that operate by modifying kernel code or kernel data
structures. We focus on the Windows operating system, since it is
both the most widespread and the most targeted platform. How-
ever, most of the concepts and techniques used are applicable to
any operating system.
The observation that motivates our approach to the detection of
rootkits is the fact that modern organizations rely on large networks
of computers to accomplish their daily workﬂows. In order to sim-
plify maintenance, upgrades, and replacement of their computers,
organizations tend to utilize a standard set of software and settings
for the conﬁguration of these machines. For example, a large com-
pany might make a standard image for employee workstations, an-
other image for servers, a third image for virtualized deployments,
and so forth. At the same time, such nearly-identical computers
are treated as unique entities when enforcing security policies and
scanning for malware. We believe that by leveraging the similari-
ties between these computers, rootkits can be detected with higher
accuracy and without the limitations of modern rootkit detection
techniques.
Therefore, we propose a novel technique for detecting kernel
rootkits, based on the analysis of physical memory dumps taken
from running operating systems. In our approach, a set of memory
dumps from a population of computers with identical (or similar)
hardware and software conﬁgurations are taken. These dumps are
then compared with each other to ﬁnd groups of machines that are
341similar. Finally, these groups are further analyzed to identify the
kernel modiﬁcations introduced by a potential rootkit infection. In
particular, we look for outliers that are different than the rest. Our
insight is that these differences are an indication of a malware in-
fection.
We implemented our approach in a tool, called Blacksheep, and
validated it by analyzing memory dumps taken from two sets of
computers. From each set, Blacksheep is able to detect kernel mod-
iﬁcations introduced by all the kernel rootkits that we tested and
can successfully discriminate between memory dumps taken from
non-infected and infected computers.
Blacksheep has several advantages over the state of the art. First
of all, Blacksheep can detect stealthy rootkit infection techniques,
such as data-only modiﬁcations of kernel memory. Additionally,
Blacksheep does not need to be conﬁgured to detect speciﬁc modi-
ﬁcations, because it relies on the identiﬁcation of anomalies among
a group of similar hosts. This means that Blacksheep does not use
or rely on signatures, and can detect 0-days as effectively as it can
detect long-known threats.
Since Blacksheep bases its analysis off of a crowd of similarly-
conﬁgured machines, the system can be used on groups of ma-
chines in which some instances are already infected with malware.
As long as a viable memory dump can be obtained, and as long as
the majority of the machines comprising the crowd are not com-
promised, Blacksheep will be able to identify infections by com-
paring the memory dumps of the involved machines. In contrast,
prior tools that utilize comparative techniques on data from a single
machine cannot be safely deployed onto infected computers, since
they would then have no safe baseline against which to compare.
Finally, because Blacksheep detects the differences among the
computers in a crowd, anti-virus software that modiﬁes the ker-
nel (often producing false positives for other rootkit detection tech-
niques) can be properly accommodated, as such software would
be deployed on all machines. Unstable sections of the Windows
kernel, such as pages that contain self-modifying code for secu-
rity purposes, can also be handled, since such sections will differ
on each member of the crowd, and Blacksheep will not regard the
differences as suspicious.
Note that while we have implemented Blacksheep for Windows
XP and Windows 7, the approach that we take can be generalized
to any operating system with kernel memory.
In summary, our contributions are:
1. Forensics: We detail our forensic investigation into the Win-
dows kernel and describe the considerations that must be
taken into account to successfully compare memory dumps
from two machines and to obtain a meaningful similarity
measure.
2. Detection: We present and implement an approach utilizing
memory similarities to detect anomalies in a group of similar
machines. Our approach can detect rootkits that use stealthy
techniques to evade detection.
As part of our investigation into Windows kernel rootkits, much
research needed to be done on the internals of the Windows kernel
itself. Part of our contribution is the summary of this research,
hoping that it will be useful to other researchers.
The rest of this paper is structured as follows. Section 2 details
the prior work in the ﬁeld. Section 3 covers a high-level overview
of our approach. Section 4 covers the technical details of our imple-
mentation. We present our evaluation in Section 5, and a discussion
of our system and its limitations in Section 6. Finally, we conclude
the paper in Section 7.
2. RELATED WORK
A considerable amount of research has been done towards de-
tecting and defending against rootkit infections. In this section, we
will discuss the state of the art and show where and how Blacksheep
improves on such approaches.
2.1 Signature-based detection
The traditional method to detect malware is to match a suspected
piece of malware against a database of byte-level signatures de-
scribing invariant content of known malicious software [14, 20].
Although this technique is still widely used, it suffers from sev-
eral major limitations. To begin with, the number of signatures that
are required to detect currently known malware infections is ex-
ponentially increasing. Even taking into account only kernel-based
malware, it is still difﬁcult to generate signatures that describe poly-
morphic software. Additionally, writing such signatures takes time,
and a completely new piece of malware often enjoys precious un-
hindered time while new signatures for it are manually generated.
Furthermore, signature-based approaches generally utilize hooks
in order to scan software as it is written to disk or loaded for ex-
ecution. This is often accomplished by hooking system calls and
other kernel entry points; however, these methods can be evaded
by adequately sophisticated software. For instance, some malware
programs avoid saving themselves using the ﬁlesystem API and in-
stead write themselves to disk by accessing it directly. Other mal-
ware samples utilize undocumented and unmonitored mechanisms
to execute themselves, thus evading detection by signature-based
antivirus software.
Because Blacksheep functions by detecting anomalous memory
dumps collected from a group of machines instead of looking for
speciﬁc signatures of infection, it does not require the use of signa-
tures. As such, it is well-built to handle previously-unseen malware
threats.
2.2 Behavioral heuristic analysis
To overcome the limitations of signature-based detection, anti-
virus software often combines signatures with heuristic behavioral
analysis [16]. With this approach, a process is analyzed during run-
time and its behavior is monitored for signs of maliciousness. For
instance, a process that calls some particular security-critical sys-
tem calls with certain parameters (e.g., modifying ﬁle access per-
missions or adding boot entries) might be classiﬁed as suspicious,
and the responsible process might be halted.
Behavior-based analyses are very hard to execute properly. Any
framework performing this analysis must have a very good under-
standing of the direct and indirect effects of monitored events. Such
understanding is often imperfect, allowing malware to evade de-
tection, by performing "mimicry attacks", similar to the ones de-
scribed in [33]. Blacksheep’s approach is based on the analysis of
the memory footprint of malware as opposed to its behavior, and,
therefore, such concerns do not apply.
2.3 Sandbox execution
Certain malware detection schemes execute programs in a virtual
environment, isolated from the rest of the operating system, and log
the actions performed, looking for the side-effects of an infection,
such as the creation of ﬁles, or the modiﬁcation of the registry. This
method is a good solution to polymorphic malware, since it does
not depend on a signature of the ﬁle being analyzed. It can also be
combined with behavioral heuristics for a more in-depth analysis.
342The two biggest drawbacks of this detection method are perfor-
mance and evasion. Such systems must wait until the sandbox ex-
ecution has yielded a classiﬁcation before starting the program on
an actual system. This causes a noticeable delay in startup, affect-
ing the perceived performance of the system. Additionally, many
techniques allow malware to detect the presence of an emulated
environment and, if one is detected, to modify its execution ﬂow.
Blacksheep does not rely on sandbox execution, but rather exam-
ines the modiﬁcations that the malware does to kernel memory. As
such, the startup speed of applications is not relevant, and evasion
is considerably more difﬁcult.
2.4 System integrity checking
In the process of subverting normal system behavior, rootkits
must modify critical system code and/or data structures [15]. For
this reason, one method for detecting rootkits is the checking of the
critical components of an operation system to ensure that they are
in an expected state.
64-bit versions of the Windows kernel implement a feature called
Kernel Patch Protection (KPP) [24]. KPP comprises an obfuscated
kernel function that is periodically executed to check the integrity
of critical components. [26, Chapter 3.14] contains further infor-
mation as to which kernel components are checked by KPP.
A similar approach has been implemented in the System Virgin-
ity Veriﬁer [27]. This tool is based on the idea that, excluding some
speciﬁc locations (e.g., relocated pointers, data sections), the image
in memory of a kernel module should be equal to the content of the
ﬁle from which it is loaded.
Other approaches, speciﬁcally designed as a defense against func-
tion pointer hijacking in kernel memory, have also been devel-
oped [35, 37].
Yet more solutions have been proposed that are based on the
hardware virtualization features in modern processors [23,31]. The
idea behind these approaches is to take advantage of hardware vir-
tualization to perform integrity veriﬁcation at a higher privilege
level than the one at which the kernel code (and the rootkit) are
executed.
One fundamental challenge with these systems is the fact that
they must identify a baseline with which to compare the current
state of the system that they are protecting. In the case of the Sys-
tem Virginity Veriﬁer, the baseline is deﬁned to be the actual ﬁles
on disk from which the kernel is loaded. However, malware that
is motivated enough could also modify these ﬁles, thus corrupt-
ing the baseline. In other cases, the state of the system when the
software was loaded is used. If the system is already infected when
such software is loaded, however, this can also provide an improper
baseline. Blacksheep’s contribution over these existing systems is
the fact that a baseline does not have to be deﬁned. Working on
the intuition that a malware infestation begins on a subset of ma-
chines, Blacksheep can determine a baseline that is unrelated to the
integrity of individual machines. Additionally, while most integrity
checkers analyze the code of a system, Blacksheep also carries out
a data analysis. This allows Blacksheep to detect rootkits that do
not analyze code.
2.5 Cross-view detection
Cross-view detection is another popular rootkit detection tech-
nique that is implemented by several detection tools [1, 6, 9]. This
approach relies on the fact that the same information about the
state of a system can be obtained in different ways. For instance,
the presence of a ﬁle is commonly detected by utilizing user-level
APIs. The information returned by such APIs can be easily altered
by a rootkit to hide the presence of ﬁles. However, scanning ﬁle
systems using low-level primitives can often reveal a ﬁle hidden by
a rootkit. Comparing several sets of similar information obtained
by different means can often bring such inconsistencies to light,
and reveal the presence of a rootkit.
This approach can be undertaken not only with hidden ﬁles, but
with unlinked processes, network connections, and other such sys-
tem artifacts. Unfortunately, the number of such possible intersec-
tion points is very large, and the checks must, in general, be de-
veloped manually. Thus, missing a modiﬁcation done by a rootkit
is very likely. Since Blacksheep examines the entire contents of
kernel memory, it does not suffer from this requirement for manual
test development.
2.6 Invariant-based detection
The problem of kernel integrity veriﬁcation is similar to the prob-
lem of discovering and verifying invariant properties within kernel
memory. In particular, research has been conducted into the detec-
tion of such invariants in kernel data structures and the subsequent
veriﬁcation of kernel memory to ensure that it has not been violated
by a rootkit.
Petroni et al. propose an architecture to manually specify kernel
data invariants and to check them automatically [25]. This archi-
tecture allows one to easily declare properties that must hold inside
an uncompromised machine. However, manually specifying such
properties requires a deep knowledge of operating system internals,
and it is particularly difﬁcult when no source code is available.
Even if such source code is present, the size of modern operat-
ing systems makes manually specifying such invariants extremely
difﬁcult. Additionally, even if source code were present and invari-
ants are automatically speciﬁed, the ability to load kernel-resident
drivers in modern operating systems makes this task impossible, as
the contents of the kernel cannot always be known ahead of time
with complete certainty. Blacksheep does not require such knowl-
edge, and will function as long as the kernel modules in question
are present in a sizeable part of the machine crowd.
Other invariant-enforcing frameworks are Hello RootKitty [12]
and HyperForce [11]. However, these systems rely on a predeter-
mined list of invariants. Blacksheep has no such requirement.