(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
Keys
0
20
40
60
(cid:1)
(cid:1)
(cid:1)
0
200
Size of neighborhood
400
600
Figure 9: Number of keys in the certiﬁcates versus numbers
of certiﬁcates seen for a label.
with sureserver.com itself.
All certiﬁcates on the line extending from the origin to this
certiﬁcate share the characteristic that all members of their
neighborhoods have their own unique keys. However, for all
certiﬁcates to the right of this line, one or more certiﬁcates in
their neighborhood share the key. The three certiﬁcates on
the very right of the graph, with over 600 known certiﬁcates
and about 40 known keys, belong to Google. Indeed, for the
5,409 certiﬁcates that we see from the Google intermediate
CA, we only observe 206 diﬀerent keys. Their most common
key is shared between 230 certiﬁcates. All Google certiﬁcates
that share keys will expire at exactly the same second on June
7, 2013, but do not exhibit a uniform start validity unlike
other certiﬁcates sharing a key: they diﬀer by a few minutes ,
presumably because the Google intermediate CA signed all
of them in short sequence. The start times between the
diﬀerent sets of certiﬁcates vary wildly, with no clear pattern,
such as a correlation between IP ranges and keys. There also
are IPs that serve diﬀerent certiﬁcates with diﬀerent keys.
The color of the individual dots in Figure 9 shows the
number of certiﬁcates in the neighborhood that share a
key with the new one. As the color coding indicates, hav-
ing a large neighborhood size does not propagate to new
certiﬁcates. For example, we encounter a new certiﬁcate
for *.fiftyflowers.com while already knowing 60 other
certiﬁcates for that domain, all at least 5 months from ex-
piry. FiftyFlowers is again hosted by Cloudﬂare and the
60 certiﬁcates have 5 diﬀerent keys. Besides the Cloudﬂare
certiﬁcates, one of the certiﬁcates is issued by the UTN-
USERFirst-Hardware CA (owned by Comodo). The new
certiﬁcate has a diﬀerent key and is issued by GoDaddy.
There are other cases like this, and hence we conclude that
key sharing does not generalize to not yet seen certiﬁcates.
5. DISCUSSION
We now discuss the impact of our results on eﬀorts to
increase the security of the CA ecosystem. Our main focus
here concerns the challenges that the frequent benign changes
impose on approaches aiming to exploit structural properties.
5.1 User-Side Change Monitoring
A number of eﬀorts aim to improve SSL security by com-
paring server certiﬁcates against records of what a browser
186
received in the past [7]. However, the volume and diversity
of changes that we observe suggests that any such approach
will frequently need to fall back to the user to decide whether
proceeding is safe. Unfortunately, for many of the changes
that we encounter doing so will not constitute a promising
path, as often not even experts will be able to distinguish
malicious from benign certiﬁcates. Given that actual attacks
remain rare, users will quickly learn to click-through any
warnings, just as they do today. Soghoian and Stamm [36]
present a similar argument, yet proceed by suggesting that
warning the user just for CA country changes might strike
an acceptable balance. However, our analysis shows that
that even these occur much more frequently than the authors
seem to expect.
5.2 Certiﬁcate Transparency
Certiﬁcate Transparency (CT) represents a more promis-
ing proposal to improve the current state by generating
accountability for CAs. CT aims to thwart MITM attacks by
creating a publicly accessible, append-only log of all existing
certiﬁcates in the Internet. Users or the issuing CA submit
new certiﬁcates to the log, which records the addition by
creating a new signature. This signature (either embedded in
the certiﬁcate or sent by the server through a TLS extension)
proves presence of a certiﬁcate in the global log. Everyone
can monitor the log for malicious changes and directly notify
site operators and CAs. While today there is no way for the
public to know to which sites CAs have issued certiﬁcates,
CT will force them to publish that information in a set of
public, audible logs; clients will eventually reject certiﬁcates
that they cannot ﬁnd there.
Conceptually, our data set provides a similar global per-
spective of the certiﬁcate ecosystem as CT will once it be-
comes operational. While our collection lacks the authori-
tativeness of CAs directly providing input, it nevertheless
allows to understand the challenges of monitoring changes to
the trust graph by independent 3rd parties. In other words,
organizations monitoring CT will encounter similar eﬀects
as we do in this study.
One of the main motivations for CT concerns its ability to
detect fraudulent certiﬁcates for domains that get added to
the public logs in preparation for a MITM attack. For large
corporations like Google or Facebook, this indeed solves the
problem as they will have the resources to monitor the logs
continuously and react swiftly to any unauthorized certiﬁ-
cates that might appear for their domains. In principle, any
other domain owner could do the same. However, we believe
that in practice many smaller sites will lack the capabilities,
expertise, and probably also the incentive to watch CT on a
ongoing basis. With that, it will be left to external parties
to monitor the public logs for suspicious changes. These
however will face just the same ambiguous situations that
our discussion in the previous section highlights. Indeed, not
even CAs can take the role of CT monitors as they typically
will not know further certiﬁcates that their customers might
have purchased from the competition. On top of that, it
seems plausible to assume that they do not have much of
an interest in taking on such a role as otherwise they could
have long devised an information sharing initiative between
themselves.
To the best of our knowledge, this aspect of CT has not
yet received much attention. The CT RFC draft states that
“the logs do not themselves detect misissued certiﬁcates, they
rely instead on interested parties, such as domain owners, to
monitor them and take corrective action when a misissue is
detected” [22]. While CT will clearly present an immense
step forward for protecting today’s fragile trust relationships,
it will not provide a silver bullet.
5.3 Possible Remedies
There are several possible remedies to the problems that
we point out in this section. Assuming CT gets adopted,
there are several easy ways in which the current actors of
the system could make it safer. CAs could leverage CT to
improve the trust into the certiﬁcate systems. For example,
a CA could search the logs for already existing certiﬁcates
before issuing a new certiﬁcate for a domain.
If it ﬁnds
existing certiﬁcates, it can ask for proof that the private
keys indeed belong to the requester. This could potentially
eliminate attacks of the type mentioned in §3.2.6, where a
CA issued a live.com certiﬁcate to a non-authorized user.
Also, we can imagine 3rd-party services emerging that
interact directly with domain owners. Rather than all web
sites directly following the CT logs, they would contract
an external entity, providing it with regular updates on
legitimate certiﬁcate changes regarding their domain. These
services would thus know what to watch for. Still, this
approach requires an awareness of the problem space on the
side of the server operator, as well as a ﬁnancial incentive to
enter such a relationship.
Another mechanism to allow external parties to assess new
certiﬁcates could involve an X.509 extension to prove that
the certiﬁcate creator possesses the keys for the domain’s
existing certiﬁcates. This approach should work well for
smaller sites as typically they just would have to include
proof for their single existing key. While this approach poses
more implementation challenges particularly for CDNs, it
might work well in combination with CT. CDNs might use
alternative, more complex methods like additionally pin-
ning certiﬁcate keys or allowable CAs to their domain using
DANE [17], TACK [26] or other pinning proposals [12]. This
would signiﬁcantly raise the bar for attackers on the sys-
tem and allow CAs and external entities to verify that new
certiﬁcate (requests) are indeed legitimate.
6. RELATED WORK
Studies. The Electronic Frontier Foundation (EFF) pop-
ularized the study of X.509 certiﬁcate infrastructure by pub-
lishing the results of active scans of the full IPv4 address
space in 2010 [11]. Holz et al. [18] compare the 2010 EFF
data set with active and passive measurements of their own.
Their two passive data sets span periods of approximately
two weeks. Vratonjic et al. [39] and Mishari et al. [27] study
X.509 certiﬁcates from the Alexa Top 1 million list, and from
randomly scanning domains respectively. Heninger et al. [15]
present a weak key study of TLS and SSH keys retrieved
by an IPv4 address space scan. Devdatta el al. [2] present
a study of SSL error codes and their reasons on the web.
Durumeric et al. [10] present a study of SSL certiﬁcates re-
trieved by 110 scans of the IPv4 address space. To the best
of our knowledge, our SSL monitoring eﬀort is the only eﬀort
that is continually monitoring a signiﬁcant part of the global
SSL landscape, and can thus facilitate a ﬁne-granular change
classiﬁcation.
Deep Infrastructure Changes. The community pro-
posed several new standards and ideas to increase the security
of SSL. The DNS-based Authentication of Named Entities
(DANE) [17] RFC proposes to embed certiﬁcate informa-
tion into DNS using DNSSEC. DANE can either replace or
complement the current CA system, providing a secondary
trust anchor. DNS Certiﬁcation Authority Authorization
(CAA) [14] has a similar scope and goal. The Trust Asser-
tions for Certiﬁcate Keys (TACK) [26] standard proposal
aims to reduce the dependency on CA providers by creating
a separate PKI layer to only sign the public keys of servers.
TACK operates in a trust-on-ﬁrst-use (TOFU) mode, where
a client connecting to a server initially relies on the existing
PKI to validate the server’s certiﬁcate. In the response, the
server also sends its TACK public keys. For subsequent
connections, the TACK keys are used to verify the server’s
public key directly.6 The IETF standard proposal Certiﬁcate
Transparency (CT) [22] has received a tremendous amount
of support from the community; see §5.2 for more. Clark
et al. [8] systemize and evaluate these and several further
approaches. While potentially eliminating some of the prob-
lems of the global CA system, wide-scale adoption of these
proposals seems generally unlikely, due to the required deep
client-side and server-side changes. For example, Chrome
was the only major browser which supported DANE for a
while, but has dropped support in recent versions.
Client-Side. Soghoian and Stamm [36] present the threat
of compelled certiﬁcate creation attacks, in which govern-
ments may force a CA under their jurisdiction to issue mali-
cious certiﬁcates for MITM attacks. The authors evaluate
several theoretical scenarios in which such man in the mid-
dle attacks might be carried out and propose to solve the
problem by displaying a warning if the CA is situated in a
diﬀerent country than the entity for which the certiﬁcate
was generated. Similar in intention but wider in scope, the
Firefox extension Certiﬁcate Patrol [7] records certiﬁcate
information for all websites that a user visits. The extension
alerts the user when, on a later visit, the site certiﬁcate has
changed. The user can then examine the certiﬁcate change
and decide to accept or reject the new certiﬁcate. Google
introduced hard-coded certiﬁcate pinning to Chrome [23]
for a certain subset of certiﬁcates belonging to Google and
large sites. This approach requires no server-side changes,
but neither scales nor allows users to modify the internal
certiﬁcate list.
Server-Side. HTTP Strict Transport Security [16] allows
a site to specify that it is only accessible using HTTPS. When
a site uses the extensions, supporting browsers will refuse
clear-text connections and those not presenting a valid, non-
selfsigned certiﬁcate chain in the future. A proposed pinning
extension to HSTS [12] has similar intentions to TACK and
allows a server to tie certiﬁcate keys to its domains.
Notaries. Notaries represent an alternative approach
to improve the existing state without architectural changes
by maintaining a third-party database of server certiﬁcates
and/or connecting to the server from diﬀerent parts of the In-
ternet. When clients encounter a certiﬁcate, they can match
it against the notary’s version. Perspectives [40] pioneered
this method and Convergence [1] provides an improved im-
plementation. Similar in intention, but for research purposes,
Crossbear [19] operates as a MITM origin detector which
uses distributed sensors to pinpoint the attack location.
The ICSI SSL Notary [3] is our own DNS-based notary
6Theoretically TACK keys can also be shared between clients.
However, this needs a separate trusted infrastructure.
187
service, which makes a subset of the data set used in this
paper available to the public. It allows to query when and how
often our data providers have encountered speciﬁc certiﬁcates.
7. CONCLUSION
Certiﬁcate changes prove frequent and manifold within the
SSL ecosystem. We compare routine changes seen throughout
the global certiﬁcate trust graph with recent attacks, and
we ﬁnd the two to share many properties, including some
that have previously been proposed to separate benign from
malicious certiﬁcates. We discuss a range of examples that we
discover in an extensive data set collected over about a year
at the border gateways of 8 large-scale institutions, totaling
about 17 billion SSL sessions. Generally, we conclude that
without further context it remains impractical to identify
malicious certiﬁcates from structural properties alone.
8. ACKNOWLEDGMENTS
This research was supported by a fellowship within the
Postdoc-Programme of the German Academic Exchange Ser-
vice (DAAD); by the National Science Foundation under
grant number ACI-1032889; and by the U.S. Army Research
Laboratory and the U.S. Army Research Oﬃce under MURI
grant number W911NF-09-1-0553. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this mate-
rial are those of the author(s) and do not necessarily reﬂect
the views of the DAAD, the NSF, the ARL, or the ARO.
9. REFERENCES
[1] Convergence. http://www.convergence.io.
[2] Akhawe, D., Amann, B., Vallentin, M., and Sommer, R.
Here’s My Cert, So Trust Me, Maybe? Understanding TLS
Errors on the Web.
[3] Amann, B., Vallentin, M., Hall, S., and Sommer, R.
Extracting Certiﬁcates from Live Traﬃc: A Near Real-Time
SSL Notary Service. Tech. Rep. TR-12-014, International
Computer Science Institute, Nov. 2012.
[4] Axelsson, S. The Base-Rate Fallacy and Its Implications for
the Diﬃculty of Intrusion Detection. In ACM CCS (1999).
[5] Biddle, R., van Oorschot, P. C., Patrick, A. S., Sobey,
J., and Whalen, T. Browser Interfaces and Extended
Validation SSL Certiﬁcates: An Empirical Study. In ACM
CCSW (2009).
[6] Bro NSM. http://www.bro.org.
[7] Certiﬁcate Patrol. http://patrol.psyced.org/.
[8] Clark, J., and van Oorshot, P. C. SoK: SSL and HTTPS:
Revisiting past challenges and evaluating certiﬁcate trust
model enhancements. In IEEE Security and Privacy (2013).
[9] Comodo Report of Incident on 15-MAR-2011. http:
//comodo.com/Comodo-Fraud-Incident-2011-03-23.html.
[10] Durumeric, Z., Kasten, J., Bailey, M., and Halderman,
J. A. Analysis of the HTTPS Certiﬁcate Ecosystem. In
Internet Measurement Conference (2013).
[11] EFF. SSL Observatory. https://www.eff.org/observatory.
[12] Evans, C., and Palmer, C. Certiﬁcate Pinning Extension
for HSTS. IETF Internet-Draft, Sept. 2011.
[13] Goodin, D. How is SSL hopelessly broken? Let us count the
ways, 2011. http://www.theregister.co.uk/2011/04/11/
state_of_ssl_analysis/.
[14] Hallam-Baker, P., Stradling, R., and Laurie, B. DNS
Certiﬁcation Authority Authorization (CAA) Resource
Record. IETF Internet-Draft, May 2011.
[15] Heninger, N., Durumeric, Z., Wustrow, E., and
Halderman, J. A. Mining Your Ps and Qs: Detection of
Widespread Weak Keys in Network Devices. In USENIX
Security (2012).
[16] Hodges, J., Jackson, C., and Barth, A. HTTP Strict
Transport Security (HSTS). RFC 6797, Nov. 2012.
[17] Hoffman, P., and Schlyter, J. The DNS-Based
Authentication of Named Entities (DANE): TLS Protocol.
RFC 6698, Aug. 2012.
[18] Holz, R., Braun, L., Kammenhuber, N., and Carle, G.
The SSL Landscape: A Thorough Analysis of the X.509 PKI
Using Active and Passive Measurements. In ACM
SIGCOMM (2011).
[19] Holz, R., Riedermaier, T., Kammenhuber, N., and
Carle, G. X.509 Forensics: Detecting and Localising the
SSL/TLS Men-in-the-Middle. In ESORICS (2012).
[20] Jackson, C., Simon, D. R., Tan, D. S., and Barth, A. An
Evaluation of Extended Validation and Picture-in-Picture
Phishing Attacks. In USEC (2007).
[21] Kaminsky, D., Patterson, M. L., and Sassaman, L. PKI
Layer Cake: New Collision Attacks against the Global X.509
Infrastructure. In Financial Cryptography (2010).
[22] Langley, A. ImperialViolet – Certiﬁcate Transparency, Nov.
2011. http://imperialviolet.org/2011/11/29/
certtransparency.html.
[23] Langley, A. ImperialViolet – Public key pinning, May 2011.
http://imperialviolet.org/2011/05/04/pinning.html.
[24] Langley, A. Google Online Security Blog – Enhancind
Digital Certiﬁcate Security, Jan. 2013.
http://googleonlinesecurity.blogspot.com/2013/01.
[25] Marlinspike, M. More Tricks for Defeating SSL in Practice.
Black Hat USA Talk, 2009.
[26] Marlinspike, M., and Perrin, T. Trust Assertions for
Certiﬁcate Keys. IETF Internet-Draft, Jan. 2013.
[27] Mishari, M. A., Cristofaro, E. D., Defrawy, K. M. E.,
and Tsudik, G. Harvesting SSL Certiﬁcate Data to Mitigate
Web-Fraud. CoRR abs/0909.3688 (2009).
[28] Mozilla Bug 369357 – Add DigiNotar EV Root CA
Certiﬁcates, 2012. https://bugzil.la/369357.
[29] Mozilla Bug 433845 – Add T ¨URKTRUST Root CA, 2012.
https://bugzil.la/433845.
[30] Mozilla Bug 724929 – Improper Character Escaping and
Unescaping in alg1485.c & secname.c, 2012.
https://bugzil.la/480509.
[31] Mozilla Bug 724929 – Remove Trustwave Certiﬁcate(s) from
Trusted Root Certiﬁcates, 2012. https://bugzil.la/724929.
[32] Nightingale, J. Mozilla Security Blog: DigiNotar Removal
Follow Up. http://blog.mozilla.org/security/2011/09.
[33] Paxson, V. Bro: A System for Detecting Network Intruders
in Real-Time. Computer Networks 31, 23-24 (1999).
[34] Prins, J. R. DigiNotar Certiﬁcate Authority Breach
“Operation Black Tulip”. Interim Report, Fox-IT, Sept. 2012.
[35] Sobey, J., Biddle, R., Oorschot, P. C., and Patrick,
A. S. Exploring User Reactions to New Browser Cues for
Extended Validation Certiﬁcates. In ESORICS (2008).
[36] Soghoian, C., and Stamm, S. Certiﬁed Lies: Detecting and
Defeating Government Interception Attacks against SSL.
Financial Cryptography (2012).
[37] Sotirov, A., Stevens, M., Appelbaum, J., Lenstra, A.,
Molnar, D., Osvik, D. A., and de Weger, B. MD5
Considered Harmful Today – Creating a Rogue CA
Certiﬁcate, Dec. 2008.
http://www.win.tue.nl/hashclash/rogue-ca/.
[38] Sotirov, A., and Zusman, M. Breaking the Myths of
Extended Validation SSL Certiﬁcates. Black Hat USA Talk,
2009.
[39] Vratonjic, N., Freudiger, J., Bindschaedler, V., and
Hubaux, J.-P. The Inconvenient Truth about Web
Certiﬁcates. In WEIS (2011).
[40] Wendlandt, D., Andersen, D. G., and Perrig, A.
Perspectives: Improving SSH-style Host Authentication with
Multi-Path Probing. In USENIX Annual Technical
Conference (2008).
[41] Zusman, M. Criminal Charges are not pursued: Hacking
PKI. DEFCON 17 Talk, 2009.
188