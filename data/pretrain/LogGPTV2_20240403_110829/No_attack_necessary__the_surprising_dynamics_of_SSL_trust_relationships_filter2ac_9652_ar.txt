### Figure 9: Number of Keys in Certificates vs. Number of Certificates for a Label

The figure shows the relationship between the number of unique keys and the number of certificates observed for a given label. The x-axis represents the size of the neighborhood (number of certificates), and the y-axis represents the number of unique keys.

- **Unique Keys per Certificate**: Certificates on the line extending from the origin to the point where the number of keys equals the number of certificates indicate that each member of their neighborhood has a unique key.
- **Shared Keys**: For certificates to the right of this line, one or more certificates in their neighborhood share the same key. 

**Example: Google Certificates**
- The three certificates on the far right of the graph, with over 600 known certificates and about 40 known keys, belong to Google.
- For the 5,409 certificates issued by the Google intermediate CA, only 206 different keys are observed.
- The most common key is shared among 230 certificates.
- All Google certificates sharing a key expire at the same second on June 7, 2013, but their start validity times differ by a few minutes, likely due to the Google intermediate CA signing them in quick succession.
- There is no clear pattern in the start times, and IP ranges do not correlate with specific keys. Some IPs serve different certificates with different keys.

**Color Coding in Figure 9**
- The color of the dots in the figure indicates the number of certificates in the neighborhood that share a key with the new certificate.
- A large neighborhood size does not necessarily mean that new certificates will also share keys. For example, a new certificate for `*.fiftyflowers.com` was encountered while already knowing 60 other certificates for that domain, all at least 5 months from expiry. These 60 certificates have 5 different keys.
- The new certificate for `*.fiftyflowers.com` has a different key and is issued by GoDaddy, despite 60 existing certificates with 5 different keys, including one issued by UTN-USERFirst-Hardware CA (owned by Comodo).

### 5. Discussion

#### 5.1 User-Side Change Monitoring
Several efforts aim to improve SSL security by comparing server certificates against records of what a browser received in the past [7]. However, the volume and diversity of changes we observe suggest that such approaches will frequently need to rely on user judgment to decide whether proceeding is safe. Unfortunately, even experts may struggle to distinguish malicious from benign certificates, and users may become desensitized to warnings, leading to click-through behavior. Soghoian and Stamm [36] propose warning users only for CA country changes, but our analysis shows that these changes occur more frequently than expected.

#### 5.2 Certificate Transparency
Certificate Transparency (CT) aims to improve accountability by creating a publicly accessible, append-only log of all existing certificates. Users or CAs submit new certificates to the log, which records the addition with a new signature. This signature, embedded in the certificate or sent via a TLS extension, proves the presence of the certificate in the global log. Everyone can monitor the log for malicious changes and notify site operators and CAs. While CT will force CAs to publish information in public logs, clients will eventually reject certificates not found there.

- **Global Perspective**: Our dataset provides a similar global perspective as CT will once it becomes operational, allowing us to understand the challenges of monitoring changes by independent third parties.
- **Challenges for Smaller Sites**: Large corporations like Google and Facebook can continuously monitor the logs and react swiftly to unauthorized certificates. However, smaller sites may lack the resources, expertise, and incentive to do so, leaving external parties to monitor the logs for suspicious changes. These external monitors face the same ambiguous situations highlighted in our discussion.

#### 5.3 Possible Remedies
- **CA Verification**: CAs could search the CT logs for existing certificates before issuing a new one for a domain, potentially eliminating attacks where unauthorized users obtain certificates.
- **Third-Party Services**: Third-party services could interact directly with domain owners, providing regular updates on legitimate certificate changes. This approach requires awareness and a financial incentive for server operators.
- **X.509 Extensions**: An X.509 extension could be used to prove that the certificate creator possesses the keys for the domainâ€™s existing certificates. This would work well for smaller sites and could be combined with CT. CDNs might use more complex methods like pinning certificate keys or allowable CAs using DANE [17], TACK [26], or other pinning proposals [12].

### 6. Related Work
- **Studies**: The Electronic Frontier Foundation (EFF) popularized the study of X.509 certificate infrastructure with active scans of the full IPv4 address space in 2010 [11]. Other studies include comparisons of passive and active measurements [18], studies of X.509 certificates from the Alexa Top 1 million list [39], and weak key studies [15].
- **Deep Infrastructure Changes**: Proposals like DANE [17], CAA [14], TACK [26], and CT [22] aim to increase SSL security. While these proposals have potential, wide-scale adoption seems unlikely due to the required client-side and server-side changes.
- **Client-Side**: Efforts like displaying warnings for CA country changes [36] and recording certificate information for websites [7] aim to improve security. Hard-coded certificate pinning in Chrome [23] is another approach.
- **Server-Side**: HTTP Strict Transport Security (HSTS) [16] and proposed pinning extensions [12] aim to ensure secure connections.
- **Notaries**: Notary services like Perspectives [40] and Convergence [1] maintain third-party databases of server certificates, allowing clients to match certificates against the notary's version.

### 7. Conclusion
Certificate changes in the SSL ecosystem are frequent and diverse. We compare routine changes with recent attacks and find that they share many properties, making it impractical to identify malicious certificates from structural properties alone without further context.

### 8. Acknowledgments
This research was supported by a fellowship within the Postdoc-Programme of the German Academic Exchange Service (DAAD), the National Science Foundation under grant number ACI-1032889, and the U.S. Army Research Laboratory and the U.S. Army Research Office under MURI grant number W911NF-09-1-0553.

### 9. References
[References listed as in the original text]

---

This optimized version clarifies the content, improves readability, and maintains a professional tone.