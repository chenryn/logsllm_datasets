完成后，将Juan写入控制台。之后在集合中添加4个新名称，再次进行迭代。
    var names = new List { "Nino", "Alberto", "Juan", "Mike", "Phil" };
    var namesWithJ = from n in names
                      where n.StartsWith("J")
                      orderby n
                      select n;
    WriteLine("First iteration");
    foreach (string name in namesWithJ)
    {
      WriteLine(name);
    }
    WriteLine();
    names.Add("John");
    names.Add("Jim");
    names.Add("Jack");
    names.Add("Denny");
    WriteLine("Second iteration");
    foreach (string name in namesWithJ)
    {
      WriteLine(name);
    }
因为迭代在查询定义时不会进行，而是在执行每个foreach语句时进行，所以可以看到
其中的变化，如应用程序的结果所示：
    First iteration
    Juan
    Second iteration
    Jack
    Jim
    John
    Juan
当然，还必须注意，每次在迭代中使用查询时，都会调用扩展方法。在大多数情况
下，这是非常有效的，因为我们可以检测出源数据中的变化。但是在一些情况下，这是不
可行的。调用扩展方法ToArray（）、ToList（）等可以改变这个操作。在示例中，ToList
遍历集合，返回一个实现了IList的集合。之后对返回的列表遍历两次，在两次迭
代之间，数据源得到了新名称。
    var names = new List { "Nino", "Alberto", "Juan", "Mike", "Phil" };
    var namesWithJ = (from n in names
                      where n.StartsWith("J")
                      orderby n
                      select n).".ToList()
; "
    WriteLine("First iteration");
    foreach (string name in namesWithJ)
    {
      WriteLine(name);
    }
    WriteLine();
    names.Add("John");
    names.Add("Jim");
    names.Add("Jack");
    names.Add("Denny");
    WriteLine("Second iteration");
    foreach (string name in namesWithJ)
    {
      WriteLine(name);
    }
在结果中可以看到，在两次迭代之间输出保持不变，但集合中的值改变了：
    First iteration
    Juan
    Second iteration
    Juan
13.2 标准的查询操作符
Where、OrderByDescending和Select只是LINQ定义的几个查询操作符。LINQ查询为
最常用的操作符定义了一个声明语法。还有许多查询操作符可用于Enumerable类。
表13-1列出了Enumerable类定义的标准查询操作符。
表13-1
标准查询操作符
说明
Where
OfType
筛选操作符定义了返回元素的条件。在Where查询操作符中
可以使用谓词，例如，lambda表达式定义的谓词，来返回布
尔值。OfType根据类型筛选元素，只返回TResult
类型的元素
Select
SelectMany
投射操作符用于把对象转换为另一个类型的新对象。Select
和SelectMany定义了根据选择器函数选择结果值的投射
OrderBy
ThenBy
OrderByDescending
ThenByDescending
Reverse
排序操作符改变所返回的元素的顺序。OrderBy按升序排
序，OrderByDescending按降序排序。如果第一次排序的结
果很类似，就可以使用ThenBy和ThenBy Descending操作符
进行第二次排序。Reverse反转集合中元素的顺序
Join
GroupJoin
连接操作符用于合并不直接相关的集合。使用Join操作符，
可以根据键选择器函数连接两个集合，这类似于SQL中的
JOIN。GroupJoin操作符连接两个集合，组合其结果
GroupBy
ToLookup
组合操作符把数据放在组中。GroupBy操作符组合有公共键
的元素。ToLookup通过创建一个一对多字典，来组合元素
Any
All
Contains
如果元素序列满足指定的条件，限定符操作符就返回布尔
值。Any、All和Contains都是限定符操作符。Any确定集合
中是否有满足谓词函数的元素；All确定集合中的所有元素
是否都满足谓词函数；Contains检查某个元素是否在集合中
Take
Skip
TakeWhile
SkipWhile
分区操作符返回集合的一个子集。Take、Skip、TakeWhile
和SkipWhile都是分区操作符。使用它们可以得到部分结
果。使用Take必须指定要从集合中提取的元素个数；Skip跳
过指定的元素个数，提取其他元素；TakeWhile提取条件为
真的元素，SkipWhile跳过条件为真的元素
Distinct
Union
Intersect
Except
Zip
Set操作符返回一个集合。Distinct从集合中删除重复的元
素。除了Distinct之外，其他Set操作符都需要两个集合。
Union返回出现在其中一个集合中的唯一元素。Intersect返回
两个集合中都有的元素。Except返回只出现在一个集合中的
元素。Zip把两个集合合并为一个
First
FirstOrDefault
Last
LastOrDefault
ElementAt
ElementAtOrDefault
Single
SingleOrDefault
这些元素操作符仅返回一个元素。First返回第一个满足条件
的元素。FirstOrDefault类似于First，但如果没有找到满足条
件的元素，就返回类型的默认值。Last返回最后一个满足条
件的元素。ElementAt指定了要返回的元素的位置。Single只
返回一个满足条件的元素。如果有多个元素都满足条件，就
抛出一个异常。所有的XXOrDefault方法都类似于以相同前
缀开头的方法，但如果没有找到该元素，它们就返回类型的
默认值
Count
Sum
Min
Max
Average
Aggregate
聚合操作符计算集合的一个值。利用这些聚合操作符，可以
计算所有值的总和、所有元素的个数、值最大和最小的元
素，以及平均值等
ToArray
AsEnumerable
ToList
ToDictionary
Cast
这些转换操作符将集合转换为数组：IEnumerable、IList、
IDictionary等。Cast方法把集合的每个元素类型转换为泛型
参数类型
Empty
Range
Repeat
这些生成操作符返回一个新集合。使用Empty时集合是空
的；Range返回一系列数字；Repeat返回一个始终重复一个
值的集合
下面是使用这些操作符的一些例子。
13.2.1 筛选
下面介绍一些查询的示例。
使用where子句，可以合并多个表达式。例如，找出赢得至少15场比赛的巴西和奥地
利赛车手。传递给where子句的表达式的结果类型应是布尔类型：
    var racers = from r in Formula1.GetChampions()
                where r.Wins > 15 &&
                      (r.Country == "Brazil" || r.Country == "Austria")
                select r;
    foreach (var r in racers)
    {
      WriteLine($"{r:A}");
    }
用这个LINQ查询启动程序，会返回Niki Lauda、Nelson Piquet和Ayrton Senna，如
下：
    Niki Lauda, Austria, Starts: 173, Wins: 25
    Nelson Piquet, Brazil, Starts: 204, Wins: 23
    Ayrton Senna, Brazil, Starts: 161, Wins: 41
并不是所有的查询都可以用LINQ查询语法完成。也不是所有的扩展方法都映射到
LINQ查询子句上。高级查询需要使用扩展方法。为了更好地理解带扩展方法的复杂查
询，最好看看简单的查询是如何映射的。使用扩展方法Where（）和Select（），会生成
与前面LINQ查询非常类似的结果：
    var racers = Formula1.GetChampions().
        Where(r => r.Wins > 15 &&
              (r.Country == "Brazil" || r.Country == "Austria")).
        Select(r => r);
13.2.2 用索引筛选
不能使用LINQ查询的一个例子是Where（）方法的重载。在Where（）方法的重载
中，可以传递第二个参数——索引。索引是筛选器返回的每个结果的计数器。可以在表达
式中使用这个索引，执行基于索引的计算。下面的代码由Where（）扩展方法调用，它使
用索引返回姓氏以A开头、索引为偶数的赛车手（代码文件
EnumerableSample/Program.cs）：
    var racers = Formula1.GetChampions().
        Where((r, index) => r.LastName.StartsWith("A") && index % 2 ! = 0);
    foreach (var r in racers)
    {
      WriteLine($"{r:A}");
    }
姓氏以A开头的所有赛车手有Alberto Ascari、Mario Andretti和Fernando Alonso。因为
Mario Andretti的索引是奇数，所以他不在结果中：
    Alberto Ascari, Italy; starts: 32, wins: 10
    Fernando Alonso, Spain; starts: 252, wins: 32
13.2.3 类型筛选
为了进行基于类型的筛选，可以使用OfType（）扩展方法。这里数组数据包含string
和int对象。使用OfType（）扩展方法，把string类传送给泛型参数，就从集合中仅返回字
符串（代码文件EnumerableSample/Program.cs）：
    object[] data = { "one", 2, 3, "four", "five", 6 };
    var query = data.OfType();
    foreach (var s in query)
    {
      WriteLine(s);
    }
运行这段代码，就会显示字符串one、four和five。
    one
    four
    five
13.2.4 复合的from子句
如果需要根据对象的一个成员进行筛选，而该成员本身是一个系列，就可以使用复合
的from子句。Racer类定义了一个属性Cars，其中Cars是一个字符串数组。要筛选驾驶法拉
利的所有冠军，可以使用如下所示的LINQ查询。第一个from子句访问从Formula1.Get
Champions（）方法返回的Racer对象，第二个from子句访问Racer类的Cars属性，以返回所
有string类型的赛车。接着在where子句中使用这些赛车筛选驾驶法拉利的所有冠军（代码
文件EnumerableSample/Program.cs）。
    var ferrariDrivers = from r in Formula1.GetChampions()
                        from c in r.Cars
                        where c == "Ferrari"
                        orderby r.LastName
                        select r.FirstName + " " + r.LastName;
这个查询的结果显示了驾驶法拉利的所有一级方程式冠军：
    Alberto Ascari
    Juan Manuel Fangio
    Mike Hawthorn
    Phil Hill
    Niki Lauda
    Kimi Räikkönen
    Jody Scheckter
    Michael Schumacher
    John Surtees
C#编译器把复合的from子句和LINQ查询转换为SelectMany（）扩展方法。
SelectMany（）方法可用于迭代序列的序列。示例中SelectMany（）方法的重载版本如下
所示：
    public static IEnumerable SelectMany 
(
        this IEnumerable source,
        Func> collectionSelector,
        Func resultSelector);
第一个参数是隐式参数，它从GetChampions（）方法中接收Racer对象序列。第二个
参数是collectionSelector委托，其中定义了内部序列。在lambda表达式r => r.Cars中，应返
回赛车集合。第三个参数是一个委托，现在为每个赛车调用该委托，接收Racer和Car对
象。lambda表达式创建了一个匿名类型，它有Racer和Car属性。这个SelectMany（）方法
的结果是摊平了赛车手和赛车的层次结构，为每辆赛车返回匿名类型的一个新对象集合。
这个新集合传递给Where（）方法，筛选出驾驶法拉利的赛车手。最后，调用
OrderBy（）和Select（）方法：
    var ferrariDrivers = Formula1.GetChampions()
        .SelectMany(r => r.Cars, (r, c) => new { Racer = r, Car = c })
        .Where(r => r.Car == "Ferrari")
        .OrderBy(r => r.Racer.LastName)
        .Select(r => r.Racer.FirstName + " " + r.Racer.LastName);
把SelectMany（）泛型方法解析为这里使用的类型，所解析的类型如下所示。在这个
例子中，数据源是Racer类型，所筛选的集合是一个string数组，当然所返回的匿名类型的
名称是未知的，这里显示为TResult：
    public static IEnumerable SelectMany (
        this IEnumerable source,
        Func> collectionSelector,
        Func resultSelector);
因为查询仅从LINQ查询转换为扩展方法，所以结果与前面的相同。
13.2.5 排序
要对序列排序，前面使用了orderby子句。下面复习一下前面使用的例子，但这里使
用orderby descending子句。其中赛车手按照赢得比赛的次数进行降序排序，赢得比赛的次
数用关键字选择器指定（代码文件EnumerableSample/Program.cs）：
    var racers = from r in Formula1.GetChampions()
                where r.Country == "Brazil"
                orderby r.Wins descending
                select r;
orderby子句解析为OrderBy（）方法，orderby 
descending子句解析为
OrderByDescending（）方法：
    var racers = Formula1.GetChampions()
        .Where(r => r.Country == "Brazil")
        .OrderByDescending(r => r.Wins)
        .Select(r => r);
OrderBy（）和OrderByDescending（）方法返回IOrderEnumerable。这个接
口派生自IEnumerable接口，但包含一个额外的方法
CreateOrderedEnumerable（）。这个方法用于进一步给序列排序。如果根据关
键字选择器来排序，其中有两项相同，就可以使用ThenBy（）和ThenByDescending （）