the
.br ctime (),
.br gmtime (),
and
.br localtime ()
functions all take
an argument of data type \fitime_t\fp, which represents calendar time.
when interpreted as an absolute time value, it represents the number of
seconds elapsed since the epoch, 1970-01-01 00:00:00 +0000 (utc).
.pp
the
.br asctime ()
and
.br mktime ()
functions both take an argument
representing broken-down time, which is a representation
separated into year, month, day, and so on.
.pp
broken-down time is stored
in the structure \fitm\fp, which is defined in \fi\fp as follows:
.pp
.in +4n
.ex
struct tm {
    int tm_sec;    /* seconds (0\-60) */
    int tm_min;    /* minutes (0\-59) */
    int tm_hour;   /* hours (0\-23) */
    int tm_mday;   /* day of the month (1\-31) */
    int tm_mon;    /* month (0\-11) */
    int tm_year;   /* year \- 1900 */
    int tm_wday;   /* day of the week (0\-6, sunday = 0) */
    int tm_yday;   /* day in the year (0\-365, 1 jan = 0) */
    int tm_isdst;  /* daylight saving time */
};
.ee
.in
.pp
the members of the \fitm\fp structure are:
.tp 10
.i tm_sec
the number of seconds after the minute, normally in the range 0 to 59,
but can be up to 60 to allow for leap seconds.
.tp
.i tm_min
the number of minutes after the hour, in the range 0 to 59.
.tp
.i tm_hour
the number of hours past midnight, in the range 0 to 23.
.tp
.i tm_mday
the day of the month, in the range 1 to 31.
.tp
.i tm_mon
the number of months since january, in the range 0 to 11.
.tp
.i tm_year
the number of years since 1900.
.tp
.i tm_wday
the number of days since sunday, in the range 0 to 6.
.tp
.i tm_yday
the number of days since january 1, in the range 0 to 365.
.tp
.i tm_isdst
a flag that indicates whether daylight saving time is in effect at the
time described.
the value is positive if daylight saving time is in
effect, zero if it is not, and negative if the information is not
available.
.pp
the call
.bi ctime( t )
is equivalent to
.bi asctime(localtime( t )) \fr.
it converts the calendar time \fit\fp into a
null-terminated string of the form
.pp
.in +4n
.ex
"wed jun 30 21:49:08 1993\en"
.ee
.in
.pp
the abbreviations for the days of the week are "sun", "mon", "tue", "wed",
"thu", "fri", and "sat".
the abbreviations for the months are "jan",
"feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", and
"dec".
the return value points to a statically allocated string which
might be overwritten by subsequent calls to any of the date and time
functions.
the function also sets the external
variables \fitzname\fp, \fitimezone\fp, and \fidaylight\fp (see
.br tzset (3))
with information about the current timezone.
the reentrant version
.br ctime_r ()
does the same, but stores the
string in a user-supplied buffer
which should have room for at least 26 bytes.
it need not
set \fitzname\fp, \fitimezone\fp, and \fidaylight\fp.
.pp
the
.br gmtime ()
function converts the calendar time \fitimep\fp to
broken-down time representation, expressed in coordinated universal time
(utc).
it may return null when the year does not fit into an integer.
the return value points to a statically allocated struct which might be
overwritten by subsequent calls to any of the date and time functions.
the
.br gmtime_r ()
function does the same, but stores the data in a
user-supplied struct.
.pp
the
.br localtime ()
function converts the calendar time \fitimep\fp to
broken-down time representation,
expressed relative to the user's specified timezone.
the function acts as if it called
.br tzset (3)
and sets the external variables \fitzname\fp with
information about the current timezone, \fitimezone\fp with the difference
between coordinated universal time (utc) and local standard time in
seconds, and \fidaylight\fp to a nonzero value if daylight savings
time rules apply during some part of the year.
the return value points to a statically allocated struct which might be
overwritten by subsequent calls to any of the date and time functions.
the
.br localtime_r ()
function does the same, but stores the data in a
user-supplied struct.
it need not set \fitzname\fp, \fitimezone\fp, and \fidaylight\fp.
.pp
the
.br asctime ()
function converts the broken-down time value
\fitm\fp into a null-terminated string with the same format as
.br ctime ().
the return value points to a statically allocated string which might be
overwritten by subsequent calls to any of the date and time functions.
the
.br asctime_r ()
function does the same, but stores the string in
a user-supplied buffer which should have room for at least 26 bytes.
.pp
the
.br mktime ()
function converts a broken-down time structure, expressed
as local time, to calendar time representation.
the function ignores
the values supplied by the caller in the
.i tm_wday
and
.i tm_yday
fields.
the value specified in the
.i tm_isdst
field informs
.br mktime ()
whether or not daylight saving time (dst)
is in effect for the time supplied in the
.i tm
structure:
a positive value means dst is in effect;
zero means that dst is not in effect;
and a negative value means that
.br mktime ()
should (use timezone information and system databases to)
attempt to determine whether dst is in effect at the specified time.
.pp
the
.br mktime ()
function modifies the fields of the
.ir tm
structure as follows:
.i tm_wday
and
.i tm_yday
are set to values determined from the contents of the other fields;
if structure members are outside their valid interval, they will be
normalized (so that, for example, 40 october is changed into 9 november);
.i tm_isdst
is set (regardless of its initial value)
to a positive value or to 0, respectively,
to indicate whether dst is or is not in effect at the specified time.
calling
.br mktime ()
also sets the external variable \fitzname\fp with
information about the current timezone.
.pp
if the specified broken-down
time cannot be represented as calendar time (seconds since the epoch),
.br mktime ()
returns
.i (time_t)\ \-1
and does not alter the
members of the broken-down time structure.
.sh return value
on success,
.br gmtime ()
and
.br localtime ()
return a pointer to a
.ir "struct\ tm" .
.pp
on success,
.br gmtime_r ()
and
.br localtime_r ()
return the address of the structure pointed to by
.ir result .
.pp
on success,
.br asctime ()
and
.br ctime ()
return a pointer to a string.
.pp
on success,
.br asctime_r ()
and
.br ctime_r ()
return a pointer to the string pointed to by
.ir buf .
.pp
on success,
.br mktime ()
returns the calendar time (seconds since the epoch),
expressed as a value of type
.ir time_t .
.pp
on error,
.br mktime ()
returns the value
.ir "(time_t)\ \-1" .
the remaining functions return null on error.
on error,
.i errno
is set to indicate the error.
.sh errors
.tp
.b eoverflow
the result cannot be represented.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br asctime ()
t}	thread safety	t{
mt-unsafe race:asctime locale
t}
t{
.br asctime_r ()
t}	thread safety	t{
mt-safe locale
t}
t{
.br ctime ()
t}	thread safety	t{
mt-unsafe race:tmbuf
race:asctime env locale
t}
t{
.br ctime_r (),
.br gmtime_r (),
.br localtime_r (),
.br mktime ()
t}	thread safety	t{
mt-safe env locale
t}
t{
.br gmtime (),
.br localtime ()
t}	thread safety	t{
mt-unsafe race:tmbuf env locale
t}
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001.
c89 and c99 specify
.br asctime (),
.br ctime (),
.br gmtime (),
.br localtime (),
and
.br mktime ().
posix.1-2008 marks
.br asctime (),
.br asctime_r (),
.br ctime (),
and
.br ctime_r ()
as obsolete,
recommending the use of
.br strftime (3)
instead.
.pp
posix doesn't specify the parameters of
.br ctime_r ()
to be
.ir restrict ;
that is specific to glibc.
.sh notes
the four functions
.br asctime (),
.br ctime (),
.br gmtime (),
and
.br localtime ()
return a pointer to static data and hence are not thread-safe.
the thread-safe versions,
.br asctime_r (),
.br ctime_r (),
.br gmtime_r (),
and
.br localtime_r (),
are specified by susv2.
.pp
posix.1-2001 says:
"the
.br asctime (),
.br ctime (),
.br gmtime (),
and
.br localtime ()
functions shall return values in one of two static objects:
a broken-down time structure and an array of type
.ir char .
execution of any of the functions may overwrite the information returned
in either of these objects by any of the other functions."
this can occur in the glibc implementation.
.pp
in many implementations, including glibc, a 0 in
.i tm_mday
is interpreted as meaning the last day of the preceding month.
.pp
the glibc version of \fistruct tm\fp has additional fields
.pp
.in +4n
.ex
long tm_gmtoff;           /* seconds east of utc */
const char *tm_zone;      /* timezone abbreviation */
.ee
.in
.pp
defined when
.b _bsd_source
was set before including
.ir  .
this is a bsd extension, present in 4.3bsd-reno.
.pp
according to posix.1-2001,
.br localtime ()
is required to behave as though
.br tzset (3)
was called, while
.br localtime_r ()
does not have this requirement.
.\" see http://thread.gmane.org/gmane.comp.time.tz/2034/
for portable code,
.br tzset (3)
should be called before
.br localtime_r ().
.sh see also
.br date (1),
.br gettimeofday (2),
.br time (2),
.br utime (2),
.br clock (3),
.br difftime (3),
.br strftime (3),
.br strptime (3),
.br timegm (3),
.br tzset (3),
.br time (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2011, hewlett-packard development company, l.p.
.\" written by stephen m. cameron 
.\"
.\" %%%license_start(gplv2_oneline)
.\" licensed under gnu general public license version 2 (gplv2)
.\" %%%license_end
.\"
.\" shorthand for double quote that works everywhere.
.ds q \n'34'
.th cciss 4 2021-03-22 "linux" "linux programmer's manual"
.sh name
cciss \- hp smart array block driver
.sh synopsis
.nf
modprobe cciss [ cciss_allow_hpsa=1 ]
.fi
.sh description
.\" commit 253d2464df446456c0bba5ed4137a7be0b278aa8
.br note :
this obsolete driver was removed from the kernel in version 4.14,
as it is superseded by the
.br hpsa (4)
driver in newer kernels.
.pp
.b cciss
is a block driver for older hp smart array raid controllers.
.ss options
.ir "cciss_allow_hpsa=1" :
this option prevents the
.b cciss
driver from attempting to drive any controllers that the
.br hpsa (4)
driver is capable of controlling, which is to say, the
.b cciss
driver is restricted by this option to the following controllers:
.pp
.nf
    smart array 5300
    smart array 5i
    smart array 532
    smart array 5312
    smart array 641
    smart array 642
    smart array 6400
    smart array 6400 em
    smart array 6i
    smart array p600
    smart array p400i
    smart array e200i
    smart array e200
    smart array e200i
    smart array e200i
    smart array e200i
    smart array e500
.fi
.ss supported hardware
the
.b cciss
driver supports the following smart array boards:
.pp
.nf
    smart array 5300
    smart array 5i
    smart array 532
    smart array 5312
    smart array 641
    smart array 642
    smart array 6400
    smart array 6400 u320 expansion module
    smart array 6i
    smart array p600
    smart array p800
    smart array e400
    smart array p400i
    smart array e200
    smart array e200i
    smart array e500
    smart array p700m
    smart array p212
    smart array p410
    smart array p410i
    smart array p411
    smart array p812
    smart array p712m
    smart array p711m
.fi
.ss configuration details
to configure hp smart array controllers,
use the hp array configuration utility
(either
.br hpacuxe (8)
or
.br hpacucli (8))
or the offline rom-based configuration utility (orca)
run from the smart array's option rom at boot time.
.sh files
.ss device nodes
the device naming scheme is as follows:
.pp
major numbers:
.pp
    104     cciss0
    105     cciss1
    106     cciss2
    105     cciss3
    108     cciss4
    109     cciss5
    110     cciss6
    111     cciss7
.pp
minor numbers:
.pp
.ex
    b7 b6 b5 b4 b3 b2 b1 b0
    |\-\-\-\-+\-\-\-\-| |\-\-\-\-+\-\-\-\-|
         |           |
         |           +\-\-\-\-\-\-\-\- partition id (0=wholedev, 1\-15 partition)
         |
         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- logical volume number
.ee
.pp
the device naming scheme is:
.ts
li l.
/dev/cciss/c0d0	controller 0, disk 0, whole device
/dev/cciss/c0d0p1	controller 0, disk 0, partition 1
/dev/cciss/c0d0p2	controller 0, disk 0, partition 2
/dev/cciss/c0d0p3	controller 0, disk 0, partition 3
/dev/cciss/c1d1	controller 1, disk 1, whole device
/dev/cciss/c1d1p1	controller 1, disk 1, partition 1
/dev/cciss/c1d1p2	controller 1, disk 1, partition 2
/dev/cciss/c1d1p3	controller 1, disk 1, partition 3
.te
.ss files in /proc
the files
.i /proc/driver/cciss/cciss[0\-9]+
contain information about
the configuration of each controller.
for example:
.pp
.in +4n
.ex
$ \fbcd /proc/driver/cciss\fp
$ \fbls \-l\fp
total 0
-rw\-r\-\-r\-\- 1 root root 0 2010\-09\-10 10:38 cciss0
-rw\-r\-\-r\-\- 1 root root 0 2010\-09\-10 10:38 cciss1
-rw\-r\-\-r\-\- 1 root root 0 2010\-09\-10 10:38 cciss2
$ \fbcat cciss2\fp
cciss2: hp smart array p800 controller
board id: 0x3223103c
firmware version: 7.14
irq: 16
logical drives: 1
current q depth: 0