# Efficient Hierarchical Management for Reconfiguration of Networked Information Systems

**Authors:**
- Jonathan C. Rowanhill
- Philip E. Varner
- John C. Knight

**Affiliation:**
Department of Computer Science, University of Virginia  
151 Engineer’s Way, Charlottesville, VA 22904-4740  
Emails: {rowanhill | varner | knight}@cs.virginia.edu

## Abstract
The management of modern distributed systems is complicated by their scale and dynamic nature. Scalable, decoupled communication establishes flexible, loosely coupled component relationships, which help meet the current demands on management. However, traditional decoupled addressing mechanisms often focus on only one party involved in communication, while a communication relationship typically involves a sender, communicated content, and receivers. The state of all three elements is simultaneously relevant to the correctness of a management relationship and its communications.

We introduce Selective Notification, a scalable, decoupled event dissemination architecture that supports simultaneous and combined addressing of senders, receivers, and events. We demonstrate its application to programming dynamic, scalable management relationships, discuss its implementation, and present measurements of its effective capabilities.

## 1. Introduction
Very large networked information systems, comprising millions of components, have become crucial for many organizations, both military and civilian. These systems are inevitably exposed to a wide variety of traumas, including extreme environmental conditions, failures of operating software, and losses of available resources due to malicious or accidental damage. To provide dependable service, such networks must respond to these changes with explicit management, as without response, dependability would be limited by entropy. The required responses may be large and complex, necessitating a sophisticated management service architecture.

In this paper, we introduce a communication mechanism, Selective Notification, for facilitating the distributed management of networked information systems. This mechanism provides symmetrically addressed, decoupled event dissemination, allowing reconfiguration to be commanded quickly, efficiently, and in a highly scalable manner. This type of reconfiguration can be used for error recovery. When coupled with a sense/analysis error-detection capability, it yields an architecture for hierarchical management in support of general fault tolerance mechanisms for networked information systems.

Researchers are exploring more dynamic and less hierarchical management structures. However, there is still merit in the hierarchical approach due to its ability to respond in a coordinated way to geographically diverse damage or attacks. The combination of hierarchical and widely distributed management has significant potential in complex systems, and more generally, management hierarchy must apply to increasingly large and dynamic information systems [10].

The elements of a hierarchical management approach with increased dynamics can be found in the form of a loosely coupled system [5]. Our proposed mechanism is a general architecture, illustrated by the intentionally general example in Figure 1. A very large collection (millions) of nodes of type A (e.g., those requiring management) operate in coordination with a smaller collection of nodes of type B (e.g., those determining management actions). The hierarchical relationships between them are established dynamically, based on the current state of participants and third parties such as trust authorities. In this example, nodes interact with those of the same shade, where shade indicates some aspect of a node’s state. As their modeled state (shade in the figure) changes, their management relationships are automatically updated to reflect appropriate connections, ensuring that these relationships remain current and appropriate over highly dynamic system states. This occurs transparently, without any node needing to know the state of another.

Consider the nodes in Figure 1 to be managers over a large distributed system. In general, the appropriateness of their intercommunication might involve any combination of the state of senders, content, and receivers. This requires a communication service addressing all three elements. It is in their simultaneous combination that loosely coupled management relationships may be achieved. By contrast, existing scalable services such as publish/subscribe support asymmetric addressing. The questions we address are: (1) whether a symmetrically addressed mechanism can scale with reasonable performance; and (2) whether it can be used effectively for expressing management relationships.

Selective Notification is a symmetrically addressed, decoupled event service that addresses both of these questions. In this paper, we present Selective Notification’s core concept, symmetric indirect addressing, and then demonstrate its utility through application in a hypothetical management scenario. This is followed by an exposition of its implementation as data transforms and modifications and extensions to Siena [2], a scalable publish/subscribe architecture.

Our assessment of feasibility is based on experiments with a full implementation. The results of these experiments allow us to model its performance for systems far larger than we can implement directly. We conclude that symmetrically addressed decoupled communication scales for hierarchical, loosely coupled management.

## 2. Selective Notification
Clients of decoupled communication interact without having knowledge of one another. More specifically, spatially decoupled communication [5] allows clients to interact despite not knowing each other's location, quantity, distribution, or state. Property-based communication is a particularly useful form that allows otherwise decoupled components to communicate by describing—rather than explicitly naming—relevant objects in communication relationships. Communication in this form involves two key elements:

- **Property-addressable objects**: Some objects advertise a model of their properties to the communications service. An object’s properties constitute its address.
- **Descriptive, indirect addresses**: Clients communicate by describing (often through constraints) properties of addressable objects. A description forms an indirect address of the relevant targets for communication.

Several forms of property-based addressing are in use today, and they differ in which objects are addressable and which objects perform addressing. Three common forms are summarized in Table 1: content-based publish/subscribe [3, 4], intentionally addressed one-to-many messaging [1], and sender-qualified messaging. If these decoupled addressing mechanisms were used by a loosely coupled hierarchy such as that illustrated in Figure 1, several requirements might arise. For example, a node undertaking reconfiguration might apply intentional addressing to indirectly target an event to managed nodes by describing the states of their internal security alarms. Similarly, managed nodes might apply sender qualification to describe necessary properties of high-level managers from which they will receive commands, requiring proper authority. However, the architectures in Table 1 do not support delivery of communication events based upon simultaneous consideration of all three addressing mechanisms.

### 2.1 The Concept of Selective Notification
Selective Notification combines content, sender, and receiver addressing in a unified, simultaneously applied addressing mechanism, permitting a scalable implementation. We refer to the mechanism as the Selective Notification service or simply Selective Notification. Events using this mechanism are called Selective Notification events. Selective Notification event delivery is illustrated in Figure 2. A message-sending client is shown on the left, and an array of potential receiver clients is shown on the right. Both senders and receivers advertise their local state to form their respective addresses. In the figure, each client’s advertised state is represented by an attached “puzzle-piece.” Sender addresses are lightly shaded, while receiver addresses are white. Sender qualification is shown by sender puzzle pieces attached to receivers, and intentional addressing is shown with receiver puzzle pieces attached to senders. The characteristics that define receiver content of interest are depicted by a black puzzle-piece at each receiver.

Senders push events to the communications system. Figure 2 shows a sender emitting an event. Its content is a U-shaped black puzzle-piece. In the notation of this figure, an address matches an indirect address when their respective puzzle-pieces “fit together.” The Selective Notification service delivers an event to a receiver if and only if intentional addressing, sender qualification, and content addressing match. In this example, the sender’s event will be delivered to receivers 1 and 4. The remaining receivers mismatch in one or more elements of addressing.

## 3. Related Work
Several research groups have applied decoupled communication for the purpose of management, including Software Dock [7] and Astrolabe [13]. To our knowledge, the importance of symmetry in establishing loosely coupled management relationships has not been discussed.

Skarmeas et al. [11] describe a symmetrically addressed, decoupled communication mechanism in the form of an agent blackboard, but it was not designed as a scalable architecture. Overlap in potential between intentional addressing and publish/subscribe has been applied in many applications, including sensor networks [9] and the control of robots [6]. Designers of scalable communication mechanisms have also noted this potential. For example, Siena has been modified to support intentional addresses [8], while the authors of the Astrolabe system have proposed using Bloom filters to achieve publish/subscribe [12].

## 4. Example Application
An example application for Selective Notification might be defending against a worm. Returning to the illustration in Figure 1, we assume on the order of a million low-level managers embedded within a global distribution of Internet Web servers and several thousand high-level managers run by service providers. We also assume that the Web servers are owned by a fictitious corporation, “Macrocorp,” which obtains security services from a second fictitious corporation, “Intellimune,” and cooperates with government emergency response activities.

Our hypothesized scenario assumes the spread of a worm that, like most worms, exploits a bug in network code to self-replicate (in this case, in Web servers). Unchecked, the worm might undermine Macrocorp’s global application. Fortunately, Intellimune and government systems monitor for attacks against common software applications. Detecting the attack, they manage systems such as Macrocorp’s through symmetrically addressed decoupled communication policies. Our implementation uses an XML syntax, but in this example, a more human-readable syntax is used.

### 4.1 Modelling System State
Our model of Web servers, i.e., the state that Web servers advertise as their address, is:
```plaintext
WebServer = {
  String application;
  String application_version;
  String serviceIPAddress;
  int servicePort;
  DomainedSet{docs, cgi, xml} services;
  float load
}
```
Models are named elements consisting of typed, named attributes. Every Web service in our example application presents an instance of this model to Selective Notification, with an assignment of a value to each model attribute, such as:
```plaintext
WebServer = {
  application = "IIS";
  application_version = "2.4.0";
  serviceIPAddress = "128.142.55.55";
  servicePort = 8080;
  services = {docs, cgi};
  load = 0.39
}
```
This Web server is free to change its attribute values at any time, such as periodically updating its load attribute with the latest calculation. Changes can also include servers joining and leaving the system. All such changes are handled automatically by the decoupled communications aspect of Selective Notification.

Now suppose that Macrocorp agrees to respond to government regional fault-response systems. Such high-level systems are not allowed to define their own region of command or trustworthiness. Instead, these are assigned to fault-response systems by authorized third parties, such as a regulated trust manager. For example, a Northwest regional controller might be assigned the following sender qualifications by authorized third parties:
```plaintext
Controller = {
  String _command_region = "northwest";
  int _trust_level = 4
}
```
Restricted sender qualification within Selective Notification allows a tiered-authority model of sender state enforcement, so that increasingly critical state can be managed by increasingly trustworthy elements.

### 4.2 Connectivity Policies
Web servers describe the messages they will receive and the clients from which they will receive messages through the definition of connectivity policies. For example, the Web servers in our hypothetical application might register the following policy:
```plaintext
{
  (alert AND (threat_level >= 4)) AND
  (sender: (_command_region == "northwest" AND _trust_level >= 2))
} OR
{
  (command AND (sender: (entity == "Intellimune" AND _command_region == "national")))
}
```
This translates to: "Observes command events from any national Intellimune control system as well as alerts greater than or equal to threat-level 4 from Northwest controllers."

---

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)**  
0-7695-2052-9/04 $ 20.00 © 2004 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 11:50:41 UTC from IEEE Xplore. Restrictions apply.