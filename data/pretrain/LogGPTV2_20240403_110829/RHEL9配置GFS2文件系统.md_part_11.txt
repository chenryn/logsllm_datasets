**表 8.1. Glock 模式和 DLM 锁定模式**
::: table-contents
  Glock 模式   DLM 锁定模式   备注
  ------------ -------------- -----------------------------------------------------------------
  UN           IV/NL          未锁定（没有与 glock 相关的 DLM 锁定，或 NL 锁定取决于 I 标记）
  SH           PR             共享（读保护）锁定
  EX           EX             专用锁定
  DF           CW             用于直接 I/O 和文件系统停止的延迟（并性写）
:::
:::
Glocks
会一直保留在内存中，直到其被解锁（根据另一个节点的请求，或虚拟机的请求）或不再有本地用户。此时它们会从
glock 哈希表中移除并释放。当 glock 创建时，DLM 锁定不会立即与 glock
关联。当对 DLM 第一次请求时，DLM 锁定与 glock
关联，如果这个请求成功，那么会在 glock 中设定 \'I\'（初始）标记。[glock
debugfs
接口](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_gfs2_file_systems/con_gfs2-tracepoints-configuring-gfs2-file-systems#ap-glock-debugfs-gfs2){.link}
中的 \"Glock Flags\" 表显示不同 glock 标记的含义。当 DLM 与 glock
关联后，DLM 锁定将始终保持至少为 NL（Null）锁定模式，直到 glock
被释放。当 DLM 锁从 NL 变为解锁状态始终是 glock
生命周期中的最后一个操作。
每个 glock
都有多个与它关联的\"拥有者（holder）\"，每个都代表来自更高层的一个锁定请求。与来自
glock 队列的 GFS2 queue 和 dequeue holder
相关的系统调用，用来保护代码的关键部分。
glock 状态机器基于一个工作队列。出于性能的原因，可能会首选
tasklets；但是，在当前的实施中，我们需要从那些禁止他们使用的情况下提交
I/O。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
Workqueue 有自己的追踪点，它们可与 GFS2 追踪点结合使用。
:::
下表显示了每个 glock
模式下可能会缓存哪些状态，以及缓存的状态是否为脏数据。这适用于内节点和资源组锁定，尽管资源组锁中没有数据组件，只有元数据。
::: table
[]{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#tb-table-glockmode-data}
**表 8.2. Glock 模式和数据类型**
::: table-contents
  Glock 模式   缓存数据   缓存元数据   脏数据   脏元数据
  ------------ ---------- ------------ -------- ----------
  UN           否         否           否       否
  SH           是         是           否       否
  DF           否         是           否       否
  EX           是         是           是       是
:::
:::
:::
::: section
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#ap-glock-debugfs-gfs2}glock debugfs 接口 {.title}
:::
glock `debugfs`{.literal} 接口允许视觉化 glocks
的内部状态和拥有者，并包括了在一些情况下被锁定的对象的一些概述详情。文件的每一行都以
G: 开头，没有缩进（代表 glock
本身），或者以不同的字母开始，使用单个空格缩进，代表在文件中立即与 glock
关联的结构（H: 是拥有者、I: 是一个内节点、R: 资源组）。下面是一个示例：
``` literallayout
G:  s:SH n:5/75320 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:EX n:3/258028 f:yI t:EX d:EX/0 a:3 r:4
 H: s:EX f:tH e:0 p:4466 [postmark] gfs2_inplace_reserve_i+0x177/0x780 [gfs2]
 R: n:258028 f:05 b:22256/22256 i:16800
G:  s:EX n:2/219916 f:yfI t:EX d:EX/0 a:0 r:3
 I: n:75661/219916 t:8 f:0x10 d:0x00000000 s:7522/7522
G:  s:SH n:5/127205 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:EX n:2/50382 f:yfI t:EX d:EX/0 a:0 r:2
G:  s:SH n:5/302519 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:SH n:5/313874 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:SH n:5/271916 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:SH n:5/312732 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
```
上面的例子是一系列摘录（来自由命令
`cat /sys/kernel/debug/gfs2/unity:myfs/glocks >my.locks >my.locks >my.lock`{.literal}
在单一节点 GFS2 文件系统运行基准的大约 18MB 文件）图中的 glocks
已选择，以便显示一些更值得关注的 glock 转储特性。
glock 状态是 EX（专用）、DF（推迟）、SH（共享）或
UN（未锁定）。这些状态与 DLM 锁定模式直接对应，但 UN 可能代表 DLM null
锁定状态，或者 GFS2 没有包含 DLM 锁定（取决于上面解释的 I 标记）。glock
的 s:
字段显示锁定的当前状态，拥有者中的同一字段指示请求的模式。如果准许了锁定，则拥有者将在标记（f:
field）中带有 H 位。否则，它将设置 W wait 位。
n: 字段（数字）表示与每个项目关联的数字。对于 glocks，这是类型号后接
glock 号，在上例中第一个 glock 是 n:5/75320;，它代表了一个
`iopen`{.literal} glock，它与内节点 75320 相关。在内节点和
`iopen`{.literal} glocks 中，glock 号始终与内节点的磁盘块号相同。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
debugfs glocks 文件中的 glock 号(n:
field)以十六进制表示，而追踪点输出以十进制表示。这是因为历史原因造成的；glock
数字使用十六进制，但追踪点使用十进制数字以便可轻松地与其他追踪点输出（例如
`blktrace`{.literal}）和来自 `stat`{.literal}(1 的输出进行比较。
:::
holder 和 glock 标记的完整列表包括在以下的 \"Glock Flags\" 表中，以及
[Glock
holders](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_gfs2_file_systems/con_gfs2-tracepoints-configuring-gfs2-file-systems#ap-glock-holders-gfs2){.link}
的 \"Glock Holder Flags\" 表中。目前无法通过 glock `debugfs`{.literal}
接口获取锁定值块的内容。
下表显示了不同 glock 类型的含义。
::: table
[]{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#tb-glock-types-ap}
**表 8.3. Glock 类型**
::: table-contents
  类型号   锁定类型   使用
  -------- ---------- -----------------------------
  1        trans      事务锁定
  2        inode      内节点元数据和数据
  3        rgrp       源组群元数据
  4        meta       超级块
  5        iopen      内节点最近探测
  6        flock      `flock`{.literal}(2)syscall
  8        quota      配额操作
  9        journal    Journal mutex
:::
:::
更重要的 glock 标记之一就是 l (locked)
标记。这是执行状态更改时用于识别对 glock
状态的访问的位锁定。当状态机器要通过 DLM
发送远程锁定请求时设置它，只有在执行完操作时才会清除它。有时这意味着已发送了多个锁定请求，不同时间发生各种无效请求。
下表显示了不同 glock 标记的含义。
::: table
[]{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#tb-glock-flags-ap}
**表 8.4. Glock 标记**
::: table-contents
  标记   名称                     含义
  ------ ------------------------ -------------------------------------------------------------------------------------------------------------------------
  d      Pending demote           推迟（远程）降级请求
  D      Demote                   降级请求（本地或者远程）
  f      Log flush                释放这个 glock 前需要提交该日志
  F      Frozen                   回复忽略的远程节点 \-- 恢复正在进行。
  i      Invalidate in progress   这个 glock 下无效页面的进程中
  I      Initial                  设定何时将 DLM 锁定与这个 glock 关联
  l      Locked                   这个 glock 处于更改状态中
  L      LRU                      设置什么时候 glock 出现在 LRU 列表中
  o      Object                   设置 glock 何时与对象关联（即类型为 2 glocks 的内节点，以及类型为 3 的 glock 的资源组）
  p      Demote in progress       glock 正在响应降级请求
  q      Queued                   设定当拥有者排队到 glock 时，并在 glock 保留时清除，但没有剩余所有者。作为算法的一部分使用，计算 glock 的最小保留时间。
  r      Reply pending            从远程节点接收的回复正在等待过程中
  y      Dirty                    释放这个 glock 前需要冲刷到磁盘中的数据
:::
:::
当从节点收到远程回调时，希望获得锁定时，与本地节点上保留的冲突，然后设置两个标志
D（降级）或
d（降级待处理）冲突。为了防止在特定锁定竞争时出现不足的情况，可以为每个锁定分配一个最少的时间。在时间间隔到期前，允许最小保留锁定的节点保留这个锁定。
如果时间间隔已过期，那么将设置
D（demote）标志，并记录所需状态。在这种情况下，在拥有者队列中没有允许的锁定，锁定将被降级。如果时间间隔没有过期，则将设置
d（降级待处理）标记。这也会调度状态机器清除
d（降级待处理）并在最小的静默时间已过期时设置 D（降级）。
当为 glock 分配 DLM 锁定时，会设定 I（初始）标记。当 glock
首次被使用，而且 I 标签将会一直被设置，直到 glock 最终被释放（DLM
锁定被解锁）。
:::
::: section
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#ap-glock-holders-gfs2}Glock 拥有者（holder） {.title}
:::
下表显示了不同 glock 拥有者标记的含义。
::: table
[]{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#tb-glock-holderflags-ap}
**表 8.5. Glock Holder Flags**
::: table-contents
  标记   名称        含义
  ------ ----------- -------------------------------------
  a      Async       不要等待 glock 结果（以后轮询结果）
  A      Any         接受任意兼容锁定模式
  c      No cache    取消锁定时，立即降级 DLM 锁定
  e      No expire   忽略随后的锁定取消请求
  E      Exact       必须有准确的锁定模式
  F      First       设定赋予这个锁定的第一个拥有者
  H      Holder      表示赋予请求的锁定
  p      Priority    在队列头启用 ENQUEUE 拥有者
  t      Try         \"try\" 锁定
  T      Try 1CB     发送回调的 \"try\" 锁定
  W      Wait        等待请求完成的设置
:::
:::
如前面提到的，最重要的拥有者标志是 H（拥有者）和
W（等待），因为它们分别被设置在赋予的锁定请求和锁定请求中。在队列中的拥有者的顺序非常重要。如果有被允许的所有者，则他们将总位于队列的前头，后接其他进入队列的所有者。
如果没有被允许的所有者，列表中的第一个拥有者就是触发下一个状态更改的拥有者。因为降级请求总是被认为比文件系统的请求具有更高的优先级，所以可能并不总是直接导致请求的状态改变。
glock 子系统支持两种类型的 \"try\"
锁定。这两类都比较有用，因为它们允许把锁定移出正常的顺序（使用适当的
back-off 和 retry），且它们可以被用来帮助避免资源被其他节点使用。正常的
t(try) 锁定如其名字所示，它是一个
\"try\"锁定，不会做任何特殊操作。相反，T（`try 1CB`{.literal}）锁定和 t
锁基本一样，唯一的不同是 DLM
会向当前不兼容的锁定拥有者发送一个回调。T（`try 1CB`{.literal}）锁定的一个用法是带有
`iopen`{.literal} 锁定，它用于在内节点的 `i_nlink`{.literal}
计数为零时，在节点间进行判断，并确定哪些节点将负责取消内节点的事务。`iopen`{.literal}
glock 通常处于共享状态，但如果 `i_nlink`{.literal} 计数为零，并调用了
`→evict_inode`{.literal}()，它将请求一个带有
T（`try 1CB`{.literal}）设置的专用锁定。如果允许了锁定，它将继续取消内节点的配置。如果没有允许的锁定，则会导致阻止锁定的节点使用
D(demote)标记标记它们的 glock，该标记会在 `→drop_inode`{.literal}()
时检查以确保取消分配不会被忘记。
这意味着，具有零个链接计数但仍打开的内节点，将在最终 `close`{.literal}()
发生时被节点取消分配。另外，当内节点的链接计数降为 0
时，内节点被标记为处于具有零链路计数的特殊状态，但仍在资源组位映射中使用。这和
ext3
文件系统的孤立列表类似，它可让位图的任意后续读者知道有可能会回收的空间，并尝试重新声明它。
:::
::: section
::: titlepage
# []{#con_gfs2-tracepoints-configuring-gfs2-file-systems.html#ap-glock-tracepoints-gfs2}Glock 追踪点 {.title}
:::
追踪点也被设计为能够通过将缓存控制与 `blktrace`{.literal}
输出合并，并了解磁盘布局来确认缓存控制的正确性。然后可以检查是否在正确锁定下发布并完成任意给定的
I/O，并且没有竞争。
`gfs2_glock_state_change`{.literal} 追踪点是要理解的最重要的一点。它跟踪
glock 每次从初始创建到最终降级的状态更改，该演示以
`gfs2_glock_put`{.literal} 结束，最终 NL 被解锁转换。l (locked) glock
标志总是在状态更改发生前设置，且只有在完成更改后才会清除。在状态更改过程中，不会有未允许的拥有者（H
glock 拥有者标志）。如果有排队的拥有者，他们将总是处于
W（等待）状态。当完成了状态更改后，允许拥有者可能是清除 l glock
标签前的最后操作。
`gfs2_demote_rq`{.literal}
追踪点会跟踪降级请求，包括本地和远程的降级请求。假设节点上有足够的内存，本地降级请求将很少出现，最常见的是由
`umount`{.literal}
创建，或者偶尔内存被重新声明。远程降级请求数量是节点针对特定内节点或资源组间争用的指标。
`gfs2_glock_lock_time`{.literal} 追踪点提供了请求到 DLM
所需时间的信息。阻塞(`b`{.literal})标志被加入到 glock
中，专门用于与这个追踪点结合使用。
当为拥有者授予锁定时，会调用
`gfs2_promote`{.literal}，这是作为状态更改的最后阶段，或者请求锁定时，可能会因为
glock 状态已缓存合适的模式而立即授予该拥有者。如果拥有者是授予这个 glock
的第一个拥有者，那么就会在该拥有者中设定
f（第一个）标记。目前，这只由资源组使用。