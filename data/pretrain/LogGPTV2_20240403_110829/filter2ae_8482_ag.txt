                KongTouBot tmp = new KongTouBot(0x006b9bc418e43e92cf8d380c56b8d4be41fda319,msg.sender);
                //tmp.kill();
            }
        }
    }
`victimContract.settleBet(47080097);`这里需要稍微理解commit-reveal机制，从庄家开奖的交易中找参数，因为这里没有限制只能开奖一次（不过注意，转账是从调用开奖这个函数的人那里转给下注的人）。
然后，疯狂跑就是了，建议用geth接入测试网络，然后web3.js来直接批量操作，不然，如果使用metamask，你会很绝望，要一个一个交易确认。
## ez2win
    pragma solidity ^0.4.24;
    /**
     * @title ERC20 interface
     * @dev see https://github.com/ethereum/EIPs/issues/20
     */
    interface IERC20 {
      function totalSupply() external view returns (uint256);
      function balanceOf(address who) external view returns (uint256);
      function allowance(address owner, address spender)
        external view returns (uint256);
      function transfer(address to, uint256 value) external returns (bool);
      function approve(address spender, uint256 value)
        external returns (bool);
      function transferFrom(address from, address to, uint256 value)
        external returns (bool);
      event Transfer(
        address indexed from,
        address indexed to,
        uint256 value
      );
      event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
      );
      event GetFlag(
        string b64email,
        string back
      );
    }
    /**
     * @title SafeMath
     * @dev Math operations with safety checks that revert on error
     */
    library SafeMath {
      /**
      * @dev Multiplies two numbers, reverts on overflow.
      */
      function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
          return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
      }
      /**
      * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
      */
      function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0); // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
      }
      /**
      * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
      */
      function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b = a);
        return c;
      }
    }
    /**
     * @title Standard ERC20 token
     *
     * @dev Implementation of the basic standard token.
     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
     * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
     */
    contract ERC20 is IERC20 {
      using SafeMath for uint256;
      mapping (address => uint256) public _balances;
      mapping (address => mapping (address => uint256)) public _allowed;
      mapping(address => bool) initialized;
      uint256 public _totalSupply;
      uint256 public constant _airdropAmount = 10;
      /**
      * @dev Total number of tokens in existence
      */
      function totalSupply() public view returns (uint256) {
        return _totalSupply;
      }
      /**
      * @dev Gets the balance of the specified address.
      * @param owner The address to query the balance of.
      * @return An uint256 representing the amount owned by the passed address.
      */
      function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
      }
      // airdrop
      function AirdropCheck() internal returns (bool success){
         if (!initialized[msg.sender]) {
                initialized[msg.sender] = true;
                _balances[msg.sender] = _airdropAmount;
                _totalSupply += _airdropAmount;
            }
            return true;
      }
      /**
       * @dev Function to check the amount of tokens that an owner allowed to a spender.
       * @param owner address The address which owns the funds.
       * @param spender address The address which will spend the funds.
       * @return A uint256 specifying the amount of tokens still available for the spender.
       */
      function allowance(
        address owner,
        address spender
       )
        public
        view
        returns (uint256)
      {
        return _allowed[owner][spender];
      }
      /**
      * @dev Transfer token for a specified address
      * @param to The address to transfer to.
      * @param value The amount to be transferred.
      */
      function transfer(address to, uint256 value) public returns (bool) {
        AirdropCheck();
        _transfer(msg.sender, to, value);
        return true;
      }
      /**
       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
       * Beware that changing an allowance with this method brings the risk that someone may use both the old
       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
       * @param spender The address which will spend the funds.
       * @param value The amount of tokens to be spent.
       */
      function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        AirdropCheck();
        _allowed[msg.sender][spender] = value;
        return true;
      }
      /**
       * @dev Transfer tokens from one address to another
       * @param from address The address which you want to send tokens from
       * @param to address The address which you want to transfer to
       * @param value uint256 the amount of tokens to be transferred
       */
      function transferFrom(
        address from,
        address to,
        uint256 value
      )
        public
        returns (bool)
      {
        require(value  10000000);
          emit GetFlag(b64email, "Get flag!");
      }
    }
给了源码。  
拿去部署下，很容易发现_transfer函数可以直接访问，即可以指定任意地址向某地址转账。  
直接在交易中找创始人，调用该函数向自己的地址转题目要求i的金额就是。