used (LRU) policy even for the locked data: in case of a cache hit,
normal cache access is performed. This introduces a subtle timing
side channel that can be exploited by extending the Percival attack
(described in Section 6.3.1). This shows that even the foremost secu-
rity experts can create mitigation strategies that have flaws that go
undiscovered for more than a decade. And even worse, the designer
is now stuck with developing a new strategy to fix this flaw. In this
work, we show how we use VeriSketch to synthesize a cache which
is provably resilient against the described attack model.
3 THE VERISKETCH FRAMEWORK
VeriSketch synthesizes incomplete hardware designs that adhere
to the specified security and functional properties. It targets de-
signs at the register transfer level (RTL) abstraction. RTL remains
the prevalent way of specifying hardware designs and it has the
required information to precisely analyze timing-sensitive infor-
mation flow properties and identify timing side channels. We first
give an overview of the main components of VeriSketch and then
describe the details of the language design.
3.1 Main Components
Fig. 1 describes the VeriSketch framework, which converts an RTL
sketch and a set of hard and soft constraints into a complete Verilog
design. All inputs are written in the VeriSketch language, which ex-
tends Verilog with sketch and IFT specification syntax (see Table 1).
As we show in the rest of this section, the VeriSketch language
facilitates the modeling of security properties and a partial descrip-
tion of the hardware. The sketch is first translated to a Verilog
design which contains synthesis parameters. The Verilog design is
then instrumented with IFT analysis logic. This step (discussed in
Section 4) enables reasoning about security properties alongside
the functional ones. The instrumented design is given to the syn-
thesis engine (described in Section 5) which uses constraint-based
synthesis to resolve the parameters. If the synthesis succeeds (i.e.,
a parameter is found), the post-processor fills out the initial sketch
based on the parameters values and discards the IFT instrumenta-
tion. Otherwise, the programmer has to repeat the process after
relaxing the specifications or modifying the sketch.
3.2 VeriSketch Language
VeriSketch extends the standard Verilog language [13] with sketch
constructs and security property specifications. The formal syntax
is shown in Table 1.
Sketch Syntax. Sketches are language constructs that facil-
3.2.1
itate writing partial programs [43]. VeriSketch enables users to
describe a partial hardware design by combining low-level and
high-level sketch constructs with the original Verilog syntax. With
low-level sketches, the designer can define unknown n-bit con-
stants (n(??)), operation select (e1 (bop1, . . . , bopm) e2), operand
select (sel(e1, . . . , em)), or choose the value of a variable from any
of n previous cycles (step?(v, n)). To facilitate higher level sketch-
ing, VeriSketch introduces hardware-specific sketch constructs for
describing arbitrary combinational (y = comb(x1, . . . , xm)) and
sequential circuits (y = seq(x1, . . . , xm)) with inputs x1, . . . , xm,
and procedural statements with unknown control flow (v ?= e0).
The original Verilog language supports two types of assignments:
continuous and procedural assignments. Continuous assignments
::= assign v = e;
::=v = e; | v ⇐ e; | if (e) s1 else s2 |
Continuous
Assignment
Procedural
begin s1 ...sm end | for (v = n1 : n2) s; Assignment
v ?= e0 [e1, . . . , em]
::= posedge clk | negedge clk | * | (cid:174)v
::= always @ (γ) s | a
γ
B
M ::= B1 . . . Bm
::= M1 . . . Mm
S
::= vs | vt
::= v | uop v | v1 bop v2 |
L | uop L | L1 bop L2 |
v ↛ v | v ↛t v
C ::= assume (p) | assert (p) | try (p)
Trigger
Block
Module
Sketch
Label
Property
Spec.
e
a
s
L
p
are specified by the keyword assign and are used to specify com-
binational logic. Procedural assignments are only activated when
they are triggered (e.g., by each rising edge of the clock signal)
and are used to describe complex timing behaviour. Procedural
assignments can be either blocking (=) or non-blocking (<=) which
indicates if the statements are executed sequentially or in parallel.
VeriSketch allows sketches of procedural assignments with un-
specified control logic using the v ?= e0 [e1, ..., em] syntax. This
is synthesized to a blocking or non-blocking assignment where a
function of [e1, ..., em] signals is used as the control logic. The list
of control variables [e1, ..., em] can be defined separately for each
statement or for the whole design.
3.2.2 Pre-Processing. Sketch constructs are compiled to synthesis
parameters in the pre-processing round. The unknown constants
are directly replaced by parameters. Operand and operation selects
are modeled as multiplexers where control lines are parameters.
step?(v, n) is mapped to a shift-register where one of its n slots
is selected by a synthesis parameter. v ?= e0 [e1, . . . , em] is trans-
lated into a block where assignment of e0 to v is guarded with
an unknown control signal defined by comb(e1, . . . , em). The comb
construct is compiled to a Binary Decision Diagram (BDD) tem-
plate where the nodes are the inputs to the comb function. The
leaves of the tree are replaced by synthesis parameters. Hence,
y = comb (x1, . . . , xm) is translated to y = (p1 ∧ x1 ∧ . . . xm) ∨
. . . ∨ (p2m ∧ ¬x1 ∧ . . . ¬xm) where {p1, . . . , p2m} are synthesis pa-
rameters. The seq construct generates a finite state machine with
binary encoded states where all state transitions are parameters
driven by the inputs. Thus, seq (x1, . . . , xm) is mapped to an FSM
where transitions from any state si to unknown state pij are con-
ditioned on “{x1, . . . , xm} = qj” where pij and qj are synthesis
parameters. The template FSM receives its caller reset and clock
signals.
While high-level constructs (i.e., comb, seq and ?=) greatly sim-
plify sketching by providing generic templates for combinational
and sequential circuits and procedural statements, they adversely
affect synthesis time since the parameter size grows exponentially
according to the number of data and control inputs. Consequently,
these templates should be used sparingly if possible, e.g., to synthe-
size small but critical parts of the design.
Specification Syntax. Property specifications are logical for-
3.2.3
mulas which express an implementation-agnostic relationship be-
tween design variables and describe a desired invariant in the de-
sign’s behavior. VeriSketch introduces syntax for specifying proper-
ties using an information flow model and also supports properties
written in the System Verilog Assertion language. VeriSketch uses
two labels (s and t) corresponding to logical and timing flows for
specifying information flow properties. These labels are binary
values similar to design variables (i.e., L ∈ {Low, Hiдh}). Security
properties are expressed by initializing labels of the input variables
and constraining the labels of the output or intermediate variables.
Alternatively, information flow properties can be more abstractly
stated by ↛ and ↛t operators. These operators indicate absence of
logical and timing flows from left hand-side to right hand-side. Prop-
erties written over the security labels or the design variables form
the specification using assume, assert, or try keywords. assume
restricts the analysis to cases where the inner expression is true
Table 1: VeriSketch Syntax.
v ∈ V ars
n ∈ Nums
::= v | n | uop e | e1 bop e2 |
n (??) | step? (v, n) |
sel (e1, ..., em) |
e1 (bop1, ..., bopm) e2 |
(uop1, ..., uopm) e |
comb (e1, ..., em) | seq (e1, ..., em)
Variable
Constant
Expression
while assert causes the verification to fail once the inner expres-
sion is false. try is unique to VeriSketch and is used to model soft
constraints.
Figure 2: Sketching the control logic for a modified and se-
cure version of PLCache. (a) A high-level sketch written in
VeriSketch. comb denotes a combinational circuit where the
implementation is totally unspecified. (b) Another sketch
for the same design with more provided details.
Example 3.1 (Sketching a Secure Cache). Fig. 2 shows two exam-
ple sketches for designing the locking strategy similar to PLCache
but eliminating the metadata timing side channel (and any other
security flaws). We define the structural connections between the
elements of the secure cache similar to a “normal cache” and leave
the tricky control and arbitration logic for VeriSketch to decide. One
major aspect of the partitioning mitigation technique is specifying
the logic for the skip signal which we leave as undefined. skip
module Sketch_Cache(…); assign skip = comb(rd_rq,wr_rq,hit,lru_block[m]);  assign lru_update = comb(rd_rq,wr_rq,lock,stall,waiting);   always @ (posedge clk)  if(!skip)    //cache rd/wr         if(lru_update)       //update LRU  else    //direct memory accessendmodule(a)module Sketch_Cache(…); assign skip = !hit & comb(rd_rq,wr_rq,lru_block[m]);  assign lru_update = (c_rd | c_wr)   && lock == ?? && stall ==??; always @ (posedge clk)  if(!skip)   //cache rd/wr       if(lru_update)     //update LRU  else   //direct memory accessendmodule(b)makes the decision about whether to follow a normal cache access
or perform a direct memory access. We also add sketch constructs
to decide when the cache LRU bits are updated. We manually ex-
tend the cache blocks to store the lock status of the stored data
similar to PLCache. The difference between the sketches in Fig. 2 is
the amount of detail provided by the designer and conversely that
which is left to be determined by VeriSketch. Fig. 2(a) is a high-level
sketch; it states that the skip signal should be some combinational
function of the signals rd_rq, wr_rq, hit and lru_block[m]. Here,
lru_block is the cache block selected for eviction according to
the replacement policy and m is the index of the bit which stores
the lock status of the block. The sketch for determining how the
LRU bits are updated is a combinational function depending on
the signals rd_rq, wr_rq, lock, stall and waiting. Here, lock
is the incoming lock request and waiting shows if the cache is
accessing the memory. The sketch in Fig. 2(b) has more detail; here
the designer provided additional information that the skip signal is
low when there is a cache hit and the structure of the logic driving
the lru_update signal is given. The ?? syntax assumes one bit if
not specified.
4 INFORMATION FLOW TRACKING
Traditional HDLs like Verilog and VHDL lack a framework for cap-
turing security traits. Information flow models enable the analysis
of a wide range of hardware security properties such as confiden-
tiality, integrity, isolation, and timing side channels. IFT tools define
labels which convey security attributes of design variables (e.g.,
whether or not that variable contains sensitive or untrusted infor-
mation). IFT models capture how data moves through the system,
enabling an analysis of security behaviors of the hardware design.
For instance, in order to assess unintended data leakage in a design,
secret inputs are initialized with a High label. Next, the design is
analyzed to ensure that public outputs maintain a Low label, which
indicates that no secret data has reached these ports.
4.1 VeriSketch IFT Framework
VeriSketch tracks information flow by annotating each design vari-
able (wire or register) v with two different security labels, vs and
vt , where the s-labels track logical flows and t-labels track timing
flows. Inference rules for propagating these labels are formalized
in Table 2. VeriSketch defines the propagation rule for each as-
signment within the same block by using the same syntax as of
the original assignment. For instance, label of a register which is
updated in a non-blocking procedural assignments is defined via a
non-blocking procedural assignments while label of a wire which is
driven by combinational logic is defined using combinational logic
as well. This ensures that variables and their labels are updated
simultaneously. VeriSketch performs precise label propagation, i.e.,
all label updates take into account the exact Boolean values of the
design at the given time. This is enabled by modeling labels and
inference rules with standard Verilog syntax and leveraging EDA
tools to reason about the IFT labels and design variables at once.
Example 4.1. Fig. 3 shows the IFT instrumentation for a snippet
of Verilog code implementing a cache unit. Lines 1 − 3 and 7 − 16
show how instrumentation for combinational and sequential blocks
are done within the same block following the syntax of the original
Table 2: VeriSketch Label Inference Rules.
Γ ⊢ e :: (s, t)
Γ ⊢ uop e :: (uopift (e, s), t)
Γ ⊢ e1 :: (s1, t1), e2 :: (s2, t2)
T-uop
Γ ⊢ e1 bop e2 :: ( bopift (e1, s1, e2, s2), t1 ⊔ t2)
Γ ⊢ e :: (s, t), assign v = e T-assign
ci ∈ Ctrl(v) :: (si , ti)
Γ ⊢ e :: (s, t), v=ηe,
Γ ⊢ v :: (s, t)
Γ ⊢ v :: (s ⊔ si , t ⊔ ti ⊔ (¬Bal(v) ⊓ si))
ci ∈ Ctrl(v) :: (si , ti)
Γ ⊢ e :: (s, t), v ⇐η e,
Γ ⊢ v :: (s ⊔ si , t ⊔ ti ⊔ (¬Bal(v) ⊓ si))
T-bop
T-blocking