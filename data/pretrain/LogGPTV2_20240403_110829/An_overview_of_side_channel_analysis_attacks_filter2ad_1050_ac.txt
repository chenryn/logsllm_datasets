i.e., side-channel attacks that
only require the execution of software. This clearly represents
an immense threat as these attacks (1) do not exploit any
obvious software vulnerabilities, (2) do not rely on speciﬁc
privileges or permissions, and (3) can be conducted remotely
via seemingly harmless apps or even websites.
B. Software-only Side-Channel Attacks
Irrespective of whether a physical property (e.g., execution
time [6] and power consumption [13]) or a logical property
(e.g., memory footprint [25] and data-usage statistics [14],
[26]) are exploited, many of these information leaks can be
exploited by means of software-only attacks. More speciﬁcally,
software-only attacks exploit leaking information without ad-
ditional equipment, which was required for traditional side-
channel attacks. For example, an oscilloscope is necessary to
measure the power consumption of a smart card during its
execution, or an EM probe is necessary to measure the EM em-
anation. In contrast, today’s smartphones allow an impressive
number of side-channel leaks to be exploited via software-only
attacks. Besides, an attack scenario that requires the user to
install an (unprivileged) application—i.e., an addictive game—
is entirely reasonable in an appiﬁed ecosystem.
For side-channel attacks in general,
it does not matter
whether the leaking information is collected via dedicated
equipment or whether an unprivileged app collects the leaking
information directly on the device under attack (software-only
attacks). Interestingly, however, the immense amount of infor-
mation published on purpose also allows to observe physical
properties of the device as well as physical interactions with
the device. Consequently, software-only side channel attacks
have gained increasing attention in the last few years and
impressive attacks are being continuously published.
Runtime-Information Gathering Attacks. Zhang et
al. [16] coined the term runtime-information gathering (RIG)
attack, which refers to attacks that require a malicious app
to run side-by-side with a victim app on the same device in
order to collect runtime information of the victim. According
to Zhang et al. [16, p. 1] “(RIG) here refers to any mali-
cious activities that involve collecting the data produced or
received by an app during its execution, in an attempt to
directly steal or indirectly infer sensitive user information”.
The crucial point in their deﬁnition is the distinction between
directly stealing and indirectly inferring sensitive information.
Inferring sensitive information indirectly is done by means
of side-channel attacks. Hence, this generic class of attacks
SW-only side-channel attacks
Physical
attacks
RIG
attacks
Logical
attacks
Fig. 5. SW-only side-channel attacks allow to exploit physical as well as
logical properties.
also includes a subset of side-channel attacks, especially side-
channel attacks that can be launched via software-only attacks.
However, RIG attacks also include attacks that we do not
consider as side-channel attacks, i.e., attacks that directly steal
sensitive information. For example, RIG attacks also include
attacks where apps request permissions which are exploited
for (more obvious) attacks such as requesting the permission
to access the microphone in order to eavesdrop on phone
conversations.
Screenmilker [47]—an attack exploiting ADB2 capabilities
to take screenshots programmatically—is also considered be-
ing a RIG attack. We do not consider such attacks as side-
channel attacks because these attacks exploit implementation
ﬂaws, i.e., the exploited screenshot tool does not implement
any authentication mechanism and hence any application can
take screenshots programmatically. Similarly, we do not con-
sider buffer overﬂow attacks as side-channel attacks because
buffer overﬂow attacks represent a software vulnerability and
allow to access the main channel directly, for example, by
reading the main memory directly. Side-channel attacks, how-
ever, attack targets that are secure from a software perspective
and still leak information unintentionally.
Figure 5 illustrates the new type of software-only side-
channel attacks that allow to exploit both, physical proper-
ties as well as software features (logical properties), without
additional equipment. Attacks exploiting information leaks
resulting from hardware components, e.g., the power consump-
tion, are classiﬁed as (physical) attacks exploiting physical
properties. Attacks exploiting information leaks resulting from
software components, e.g., statistics about network trafﬁc, are
classiﬁed as (logical) attacks exploiting logical properties.
As software-only attacks also rely on software being exe-
cuted side-by-side with the victim application, software-only
attacks are a sub-category of RIG attacks. It should be noted
that physical attacks on smartphones might still rely on dedi-
cated hardware and some logical attacks can also be conducted
without running software on the device under attack. Such
attacks are covered by the non-overlapping areas of “physical
attacks” and “logical attacks” in Figure 5. However, physical
attacks that cannot be conducted by running software on the
device are more targeted attacks as they require attackers to
be in physical presence of the device.
2The Android Debug Bridge (ADB) is a command line tool that allows to
execute privileged commands on devices where USB debugging is activated.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
7
,Side-channel attacks
,Passive
,Active
,Physical
,Logical
,Physical
,Logical
,Local: Chip, Device
(surveyed in Section IV-A)
,Local: Chip, Device
(surveyed in Section IV-A)
,Local: Chip, Device
(surveyed in Section IV-B)
,Local: Chip, Device
(surveyed in Section IV-B)
,Vicinity: Wire/Communication
(surveyed in Section V-A)
,Vicinity: Wire/Communication
(surveyed in Section V-A)
,Vicinity: Wire/Communication
(surveyed in Section V-B)
,Vicinity: Wire/Communication
(surveyed in Section V-B)
,Remote: Software, Web
(surveyed in Section VI-A)
,Remote: Software, Web
(surveyed in Section VI-A)
,Remote: Software, Web
(surveyed in Section VI-B)
,Remote: Software, Web
(surveyed in Section VI-B)
Fig. 6. Proposed classiﬁcation system for side-channel attacks: (1) passive vs active, (2) physical properties vs logical properties, (3) local attackers vs vicinity
attackers vs remote attackers.
C. Adversary Model and Attack Scenario
In contrast to traditional attacks that require an attacker to
have the device under physical control or to be physically
present with the victim, the adversary model for most (ex-
isting) side-channel attacks on smartphones shifted the scope
to remote software execution by means of apps or websites.
This also increases the scale of these attacks. While traditional
side-channel attacks targeted only a few devices, modern side-
channel attacks target possibly millions of devices or users at
the same time. With this general overview of the adversary
model in mind, most software-only attacks usually consider
the following two-phase attack scenario for passive attacks.
Training Phase. In the training phase, the attacker “pro-
ﬁles” actions or events of interest, either during an online
phase on the attacked device or during an ofﬂine phase in ded-
icated environments. Sometimes the training phase includes
the training of a machine-learning model such as a supervised
classiﬁer. More abstractly,
the attacker builds “templates”
based on events of interest. In addition, the attacker crafts an
app (or website) that ideally does not require any permissions
or privileges in order to avoid raising the user’s suspicion. This
app is used in the attack phase to gather leaking information.
Attack Phase. The attack phase usually consists of three
steps. (1) A malicious application—that is hidden inside a pop-
ular app—is spread via existing app markets. After installation,
this malicious app waits in the background until the targeted
app/action/event starts and then (2) it observes the leaking
side-channel information. Based on the gathered information,
(3) it employs the previously established model or templates
to infer secret information. Depending on the complexity of
the inference mechanism, e.g., the complexity of the machine-
learning classiﬁer, the gathered side-channel information could
also be sent to a remote server, which then performs the heavy
computations to infer the secret information.
D. A New Categorization System
1) Passive vs active: This category distinguishes between
attackers who passively observe leaking side-channel
information and attackers who also actively inﬂuence the
target via any side channel. For instance, an attacker can
manipulate the target, its input, or its environment via
any side channel in order to subsequently observe leaking
information via abnormal behavior of the target (cf. [4])
or to bypass security mechanisms.
2) Physical properties vs logical properties: This category
classiﬁes side-channel attacks according to the exploited
information, i.e., depending on whether the attack ex-
ploits physical properties (hardware) or logical properties
(software features). Physical properties include the power
consumption, the electromagnetic emanation, or the phys-
ical movements of a smartphone during the operation.
Logical properties include usage statistics provided by
the operating system, such as the data-usage statistics or
the memory footprint of an application.
least
3) Local attackers vs vicinity attackers vs remote attackers:
Side-channel attacks are classiﬁed depending on whether
or not the attacker must be in physical proximity/vicinity
of the target. Local attackers clearly must be in (tem-
porary) possession of the device or at
in close
proximity. Depending on whether the adversary also
needs to remove the package in order to access the chip,
we classify local attackers into attackers that need access
to the chip or only the device itself. Vicinity attackers are
able to wiretap or eavesdrop the network communication
of the target or to be somewhere in the vicinity of the
target. Remote attackers only rely on software execution
on the targeted device, e.g., either by means of executing
software on the targeted device or by means of websites.
Clearly, the scale increases signiﬁcantly for these three
attackers as a local attacker relies on stronger assumptions
than a remote attacker. Especially the immense number of
software-only attacks (that allow to conduct side-channel
attacks remotely) stress the need for this category.
Based on our observations we propose a new categorization
system as depicted in Figure 6. More speciﬁcally, we classify
side-channel attacks along three axes.
Subsequently, we brieﬂy survey existing attacks according
to our new classiﬁcation system. Although the focus of this
paper is on side-channel attacks against mobile devices, we
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
8
also discuss attacks that have been applied in the smart card or
desktop/cloud setting, as today’s smartphones are vulnerable to
(all or most of the) existing side-channel attacks against these
platforms as well. As mentioned before, we do not explicitly
focus on Android devices, but the majority of existing papers
investigate side-channel attacks on Android.
We start with local side-channel attacks in Section IV,
continue with vicinity side-channel attacks in Section V, and
ﬁnally we discuss remote side-channel attacks in Section VI.
Each of these sections is further divided into passive at-
tacks and active attacks. Note that
this structure reﬂects
our proposed classiﬁcation system. However, for the sake of
readability the structure of the subsections does not reﬂect the
categorization of physical properties and logical properties.
IV. LOCAL SIDE-CHANNEL ATTACKS
In this section, we survey side-channel attacks that require
a local adversary. Some of these attacks will show that the
transition between local attacks and vicinity attacks is seamless
as the distance between the victim (device) and the attacker
can be increased, especially in case of some passive attacks.
A. Passive Attacks
We start with traditional side-channel attacks that aim to
break insecure cryptographic implementations (of mathemati-
cally secure primitives). Besides, we discuss attacks that target
the user’s interaction with the device as well as the user’s input
on the touchscreen, i.e., attacks that result from the inherent
nature of mobile devices.
Power Analysis Attacks. The actual power consumption
of a computing device or implementation depends on the
processed data and the executed instructions. Power analysis
attacks exploit this information leak to infer sensitive informa-
tion. As the name suggests, the power consumption, typically
measured as the voltage drop across a resistor inserted in
the supply line, serves as the side channel. State-of-the-art
printed circuit board designs (PCB-designs), including multi-
layer routing as well as surface mounted devices (SMD), and
packaging techniques (e.g., ball-grid array) make it hard to ac-
cess the appropriate power supply lines in modern smartphones
without permanent modiﬁcations. Therefore, in contrast to
smart cards, measuring the power consumption became less
relevant for side-channel attacks targeting smartphones.
Depending on whether a single measurement trace or mul-
tiple traces are required, we distinguish between simple power
analysis (SPA) attacks and differential power analysis (DPA)
attacks, as deﬁned by Kocher et al. [2]. SPA attacks rely on the
interpretation of power traces in order to reveal, for example,
the sequence of executed instructions, which allows to break
implementations where the executed instructions depend on
secret data. However, the power consumption also depends on
the processed data, although the variations are smaller. There-
fore, DPA attacks rely on statistical investigations of multiple
traces in order to infer information about the processed data.
Attacks. Messerges and Dabbish [48] exploited the power
consumption of a smart card to attack the Data Encryption
Standard (DES) algorithm. Hardly any side-channel attacks
using a similar setup for measuring the power consumption
targeting smartphones are published. Nevertheless, a coarse-
grained power-consumption monitoring of smartphones allows
to identify running apps, as demonstrated by Yan et al. [49].
Electromagnetic Analysis Attacks. Another way to at-
tack the leaking power consumption of computing devices
is to exploit electromagnetic emanations, which are usually
easier to obtain since the power line cannot be accessed
directly in general. Irrespective of whether the power trace
is obtained directly via the power line or via electromagnetic
emanations, these attacks are usually denoted as differential
power analysis attacks. In this context it is also worth to
mention that depending on the used equipment (EM probes for
capturing the electromagnetic emanation), targeting a speciﬁc
location above the chip can improve the signal-to-noise ratio
of the measurements. As a result of taking advantage of
spatial information, the number of required measurements for
a successful attack can be decreased.
Attacks. Traditional side-channel attacks exploiting the elec-
tromagnetic emanations of smart cards have also been applied
on mobile devices. Gebotys et al. [50] demonstrated attacks
on software implementations of the Advanced Encryption
Standard (AES) and Elliptic Curve Cryptography (ECC) on
Java-based PDAs. Later on, Nakano et al. [51] attacked ECC
and RSA implementations of the default crypto provider (JCE)
on Android smartphones, Goller and Sigl [52] attacked RSA
implementations on Android, and Belgarric et al. [53] attacked
the Elliptic Curve Digital Signature Algorithm (ECDSA) im-
plementation of Android’s Bouncy Castle. In a similar manner,
Genkin et al. [54] attacked the OpenSSL implementation of
ECDSA on Android and the CommonCrypto implementation
of ECDSA on iOS, respectively.
Differential Computation Analysis. The basic idea of
white-box crypto implementations is to embed the secret key
into the software implementation in a way that prevents an
attacker from extracting the key, even in case the adversary
has access to the source code itself. Therefore, the key and
the algorithm itself are merged such that the key is hidden
inside the code and cannot be easily separated. The white-box
attack model assumes that the adversary has full control over
the device and the execution environment.
Attacks. Bos et al. [55] showed that binary instrumentation
can be used to observe and control the intermediate state
of white-box crypto implementations. Thereby,
the instru-
mentation allows to precisely monitor the execution of the
program and the observation of, e.g., the intermediate state
and read/write accesses to memory, allow to proﬁle program
behavior. Based on the similarity to DPA attacks, Bos et
al. denoted these attacks as differential computation analysis
(DCA) attacks. Nevertheless, in contrast to DPA attacks, DCA
attacks do not need to deal with any measurement noise.
Although attacks against white-box crypto implementations
have not been applied on mobile devices so far, such an attack
scenario works for these devices as well.
Smudge Attacks. The most common input method on
mobile devices is the touchscreen, i.e., users tap and swipe
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
9
on the screen with their ﬁngers. Due to the inherent nature
of touchscreens, users always leave residues in the form of
ﬁngerprints and smudges on the screen.