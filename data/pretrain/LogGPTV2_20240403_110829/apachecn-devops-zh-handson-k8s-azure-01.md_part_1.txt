# 一、容器和 Kubernetes 介绍
Kubernetes 已经成为容器编排的领先标准。自 2014 年成立以来，Kubernetes 获得了巨大的人气。它已被初创企业和大型企业采用，所有主要的公共云供应商都提供托管的 Kubernetes 服务。
Kubernetes 基于 Docker 容器革命的成功。Docker 既是一家公司，也是一项技术的名称。Docker 作为一种技术是创建和运行软件容器最常见的方式，称为 Docker 容器。容器是一种打包软件的方式，可以让您在任何平台上轻松运行该软件，从笔记本电脑到数据中心的服务器，再到公共云中运行的集群。
尽管核心技术是开源的，但 Docker 公司专注于通过大量商业产品来降低开发人员的复杂性。
Kubernetes 将容器带到了下一个层次。Kubernetes 是一个容器指挥者。容器编排器是一个软件平台，它使得在成千上万台机器上运行成千上万个容器变得容易。它自动化了部署、运行和扩展应用所需的大量手动任务。编排者负责安排合适的容器在合适的机器上运行。它还负责运行状况监控和故障转移，以及扩展您部署的应用。
Docker 使用的容器技术和 Kubernetes 都是开源软件项目。开源软件允许来自许多公司的开发者在一个软件上合作。Kubernetes 本身也有来自微软、谷歌、红帽、VMware 和许多其他公司的贡献者。
三大公共云平台——Azure、**亚马逊网络服务** ( **AWS** )、**谷歌云平台**(**GCP**)——都提供托管的 Kubernetes 服务。它们在市场上引起了很大的兴趣，因为几乎无限的计算能力和这些托管服务的易用性使得构建和部署大规模应用变得非常容易。
**Azure Kubernetes 服务** ( **AKS** )是 Azure 为 Kubernetes 提供的托管服务。它降低了构建和管理 Kubernetes 集群的复杂性。在这本书里，你将学习如何使用 AKS 来运行你的应用。每章都将介绍新概念，你将通过本书中的许多例子来应用这些新概念。
然而，作为一个用户，理解支撑 AKS 的技术仍然非常有用。我们将在本章探讨这些基础。您将了解 Linux 进程以及它们与 Docker 和容器的关系。您将看到各种过程如何很好地适应容器，以及容器如何很好地适应 Kubernetes。
本章介绍了基本的 Docker 概念，以便您可以开始您的 Kubernetes 之旅。本章还简要介绍了帮助您构建容器、实现集群、执行容器编排以及对 AKS 上的应用进行故障排除的基础知识。粗略了解本章内容将会揭开在 AKS 上构建经过身份验证、加密且高度可扩展的应用所需的大量工作。在接下来的几章中，您将逐步构建可扩展且安全的应用。
本章将涵盖以下主题:
*   把我们带到这里的软件进化
*   容器的基本原理
*   Kubernetes 的基本原理
*   AKS 的基本原理
本章的目的是介绍要点，而不是提供描述 Docker 和 Kubernetes 的完整信息源。首先，我们先来看看软件是如何进化到现在这个地步的。
## 把我们带到这里的软件进化
有两个主要的软件开发进化使得容器和 Kubernetes 流行起来。一个是采用微服务架构风格。微服务允许应用从一组小服务中构建，每个小服务都服务于一个特定的功能。启用容器和 Kubernetes 的另一个演进是 DevOps。DevOps 是一套文化实践，允许人们、流程和工具更快、更频繁、更可靠地构建和发布软件。
虽然您可以在不使用微服务或 DevOps 的情况下同时使用容器和 Kubernetes，但是这些技术被最广泛地用于使用 DevOps 方法部署微服务。
在本节中，我们将从微服务开始讨论这两种演进。
### 微服务
随着时间的推移，软件开发发生了巨大的变化。最初，软件是在单个系统上开发和运行的，通常是大型机。客户端可以通过终端连接到主机，并且只能通过该终端。当客户机-服务器编程模式出现时，计算机网络变得普遍，这种情况发生了变化。客户端可以远程连接到服务器，甚至在自己的系统上运行部分应用，同时连接到服务器以检索应用所需的数据。
客户机-服务器编程模型已经向分布式系统发展。分布式系统不同于传统的客户机-服务器模型，因为它们有运行在多个不同系统上的多个不同应用，所有这些应用都是互连的。
如今，微服务架构在开发分布式系统时很常见。基于微服务的应用由一组服务组成，这些服务共同组成应用，而各个服务本身可以彼此独立地构建、测试、部署和扩展。这种风格有很多好处，但也有几个缺点。
微服务体系结构的一个关键部分是每个单独的服务只服务一个核心功能。每个服务都服务于单个绑定的业务功能。不同的服务协同工作形成完整的应用。这些服务通过网络通信协同工作，通常使用 HTTP REST APIs 或 gRPC:
![Evolution from mainframe to client-server, to distributed systems to microservices](img/B17338_01_01.jpg)
图 1.1:标准微服务架构
使用容器和 Kubernetes 运行的应用通常采用这种体系结构方法。容器被用作各个服务的打包格式，而 Kubernetes 是部署和管理一起运行的不同服务的编排者。
在我们深入研究容器和 Kubernetes 的细节之前，让我们先探讨一下采用微服务的好处和坏处。
### 运行微服务的优势
运行基于微服务的应用有几个优点。第一个事实是，每个服务都独立于其他服务。这些服务被设计得足够小(因此是微的)来处理业务领域的需求。因为它们很小，所以它们可以是独立的和可独立测试的，因此是可独立发布的。
这也带来了每个微服务都可以独立扩展的好处。如果应用的某个部分获得了更多的需求，那么应用的该部分可以独立于应用的其余部分进行扩展。
服务是可独立扩展的这一事实也意味着它们是可独立部署的。微服务有多种部署策略。最受欢迎的是滚动部署和蓝色/绿色部署。
通过滚动升级，服务的新版本只部署到应用的一部分。如果服务保持健康，这个新版本会受到仔细监控，并逐渐获得更多流量。如果出了问题，以前的版本还在运行，流量很容易被切断。
通过蓝色/绿色部署，您可以独立部署新版本的服务。一旦部署并测试了新版本的服务，您就可以将 100%的生产流量削减到新版本。这允许服务版本之间的干净转换。
微服务架构的另一个好处是，每个服务都可以用不同的编程语言编写。这被描述为多语种——理解和使用多种语言的能力。比如前端服务可以用流行的 JavaScript 框架开发，后端可以用 C#开发，机器学习算法可以用 Python 开发。这允许您为正确的服务选择正确的语言，并允许开发人员使用他们最熟悉的语言。
### 运行微服务的缺点
每个硬币都有反面，微服务也是如此。虽然基于微服务的架构有多种优势，但这种架构也有其缺点。
微服务设计和架构需要高度的软件开发成熟度才能正确实现。非常了解领域的架构师必须确保每个服务都是有界限的，并且不同的服务是有凝聚力的。由于服务彼此独立，版本独立，因此这些不同服务之间的软件契约对于正确实现非常重要。
微服务设计的另一个常见问题是在监控和排除此类应用的故障时会增加复杂性。由于不同的服务组成一个应用，并且这些不同的服务运行在多个服务器上，因此记录和跟踪这样的应用是一项复杂的工作。
与前面提到的缺点相关联的是，通常在微服务中，您需要在应用中构建更多的容错能力。由于应用中不同服务的动态特性，故障更有可能发生。为了保证应用的可用性，在组成应用的不同微服务中构建容错是很重要的。实现重试逻辑或断路器等模式对于避免导致应用宕机的单一故障至关重要。
在本节中，您了解了微服务、其优点和缺点。通常与微服务联系在一起，但另一个单独的主题是 DevOps 运动。我们将在下一节探讨 DevOps 的含义。
### DevOps
DevOps 字面意思是开发和运营的结合。更具体地说，DevOps 是人员、流程和工具的结合，以更快、更频繁、更可靠地交付软件。DevOps 更多的是一套文化实践，而不是任何特定的工具或实现。通常，DevOps 跨越软件开发的四个领域:规划、开发、发布和操作软件。
#### 注意