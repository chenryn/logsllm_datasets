real proofs in 1–4 ms, depending on the depth of delegation.
2 WAVE Overview
WAVE runs as a service that can be logically divided into
three layers (Fig. 1a) each providing an API (Fig. 1b).
2.1 Global Authorization Graph
Recall that the global authorization graph consists of enti-
ties, which are bundles of public and private keys, and at-
testations, which are the permission grants between them.
The client (representing a user, device, or service) inter-
USENIX Association
28th USENIX Security Symposium    1377
Subsystem API
CreateEntity() =⇒ (privEnt, pubEnt)
Delegate(issuer:privEnt, subject:pubEnt, policy) =⇒ attestation
CreateProof(subject:privEnt, policy) =⇒ (proof)
VerifyProof(proof) =⇒ (subject:pubEnt, policy)
NewName(issuer: privEnt, subject:pubEnt, name) =⇒ (nameDecl)
ResolveName(resolver: privEnt, name) =⇒ (nameDecl)
Revoke(issuer:privEnt, object:attestation/pubEnt)
EncryptAttest(attestation, partition) =⇒ attCiphertext
DecryptAttest(perspective:privEnt, attCiphertext) =⇒ attestation
Put(object, server) =⇒ hash
Get(hash, server) =⇒ object
Enqueue(list:hash, entry:hash, server)
IterQueue(list:hash, cursor) =⇒ (entry:hash, newCursor)
Application
Encryption
Storage
(a) The WAVE stack
(b) The API provided by WAVE’s stack.
Figure 1: An overview of WAVE
acts through the WAVE service with the global authorization
graph. Clients can create new entities (e.g., for a service they
are deploying).
another entity,
To grant permissions to other entities, clients use the
WAVE service to construct an attestation signed by the grant-
ing entity containing a policy describing the permissions. An
attestation A consists of:
• A.issuer: the entity that wishes to grant permissions to
• A.subject: the entity receiving the permissions,
• A.policy: an expression of permissions, for example,
RTree described in §2.4, and
• a revocation commitment described in §6.1
• signature(s) from the issuer.
When accessing a service or controlling a device, clients
request a proof from the WAVE service; the WAVE service
will search for a path through the global authorization graph
from the authority for the service or device in question to the
client’s entity, where each edge grants a superset of the re-
quired permissions. The representation of this path is a self-
standing proof of authorization that can be veriﬁed without
communication with the proving entity. The receiving ser-
vice or device can use the WAVE service to validate a proof,
yielding the authorization policy it permits.
The WAVE service also allows for mapping human read-
able names to entity public keys to make the system more
usable, as we elaborate in §6.2.
2.2 Reverse-Discoverable Encryption (RDE)
To ensure the privacy of permissions, the WAVE service uses
our protocol, Reverse-Discoverable Encryption (described in
§4) to encrypt the attestations. The encryption layer is trans-
parent to clients: the WAVE service will discover and de-
crypt the portion of the global graph that concerns the client
automatically. The only time a client interacts with the en-
cryption layer is when they use RDE to encrypt messages for
application-level end-to-end encryption, which is beyond the
scope of this paper.
2.3 Scalable Untrusted Storage
When the client instructs the WAVE service to create an en-
tity or an attestation, the WAVE service will place the public
keys (for entities) or RDE ciphertext (for attestations) into
the scalable untrusted storage (§5). As with RDE, the place-
ment into storage is transparent to clients: clients operate
only at the level of granting permissions, creating proofs
and verifying proofs. The WAVE client will interact with
the storage to discover and decrypt the portion of the global
graph necessary for performing those actions without the
client manually publishing or retrieving objects.
2.4 Resource Tree Authorization Policy
Although WAVE’s design is agnostic to the speciﬁc mecha-
nism used for expressing the authorization policy (i.e., it is
compatible with existing policy languages such as [10, 12]),
in our IoT deployments we use a simple yet widely appli-
cable model: a resource tree (RTree) modelled roughly after
SPKI’s pkpfs tags [24].
An RTree policy manages permissions on a hierarchically
organized set of resources. A resource is denoted by a URI
pattern such as company-entity/building/device or
user-entity/albums/holiday/*. The ﬁrst element of
a URI (e.g. company-entity) is called the namespace au-
thority or just namespace, which speciﬁes the entity who is
the root of authorization for that resource (the entity who has
permission on that policy without having received permis-
sion from someone else). The global authorization graph has
many different RTrees with namespace authorities, ideally
with one per intrinsic authority, e.g. homeowner or company.
This lets the system be as decentralized as the naturally oc-
curring authority structure, unlike the single-authority-per-
vendor model, used in most systems today, which forces cen-
tralization. Depending on the structure of a given resource
1378    28th USENIX Security Symposium
USENIX Association
WAVE overview - Untitled(1)RootGlobal authorization graph (§2)Proof pathProverReverse-discoverable encryption (§4)DecryptGrantScalable untrusted storage (§5)logmaploglogmaploglogmaplogApplicationsApplication APIEncryption APIStorage APIhierarchy, there may be a minimum length for the resource
URI. This often occurs where the ﬁrst few elements are used
to capture boundaries that exist naturally, such as a depart-
ment, building or project. These elements that can be relied
upon to exist, if present for a given RTree, are called the re-
source preﬁx. An RTree policy consists of:
• A set of permissions (strings such as “schema::read”)
• A URI pattern describing a set of resources
• A time range describing when the grant is valid
• An indirections ﬁeld, which limits re-delegation
For example, a building manager entity might grant hvac::
actuate on bldgnamespace/floor4/* over a time range
corresponding with the lease terms, allowing further delega-
tion, to a tenant entity.
2.5 How WAVE Meets the Requirements
WAVE’s global authorization graph, RDE, and storage layer
allow it to achieve the requirements established in §1.3:
No reliance on central trust. WAVE achieves decentral-
ization via three design features. First, the permission dele-
gations are cryptographically enforced without a verifying
authority. Secondly, any participant can create an RTree
namespace, mimicking the natural ownership of resources.
Finally, our Unequivocable Log Derived Map §5 allows par-
ticipants to detect if the untrusted storage servers violate in-
tegrity. Although the storage server is centralized for avail-
ability, it is not a point of central trust as its behavior is cryp-
tographically enforced.
Transitive Delegation.
The graph-based authorization
model efﬁciently captures transitive delegation. To delegate
permissions, any entity can create an attestation that cap-
tures which subset of their permissions they wish to delegate.
Since a proof is represented by a path through the graph, if
an entity higher up in the delegation tree is revoked, all en-
tities beneath it will no longer be able to prove they have
permissions, even though the party revoking the entity may
have been unaware of the delegations lower in the tree. This
gives us the transitive delegation property.
Protected permissions. Through the Reverse-Discoverable
Encryption scheme in §4, no party can decrypt attestations
that are not potentially relevant to them. In our example, the
property manager cannot decrypt attestations that the tenant
makes, and the party running the storage servers cannot read
any of the attestations.
Decentralized veriﬁcation. WAVE proofs can be veriﬁed
by anyone, unlike in SDSI/SPKI [49] or Macaroons [12].
This enables an IoT device to verify all messages it receives
without communicating with an external service (with the
exception of revocation checks, as detailed in §6.1).
No ordering constraints. An entity can grant any permis-
sions at any time, including those that it has not yet received
(although the recipient won’t be able to form a proof yet).
Consequently, attestations can be replaced anywhere in the
hierarchy without requiring re-issue of subsequent delega-
tions. Furthermore, our privacy mechanism preserves this
property because an attestation can be encrypted under a
policy-speciﬁc key before the issuer has been granted the
permissions corresponding to the policy.
Ofﬂine participants. Attestations are disseminated through
the ULDM storage tier (§5) which allows for entities to dis-
cover permissions they have been granted while they were
ofﬂine and removes the need for any out-of-band online com-
munication between entities.
3 Security Guarantees and Roadmap
WAVE must fulﬁll three security goals (§1.2). Regarding
Security Goal #1, WAVE guarantees the following:
Guarantee 1. An attacker Adv can form a proof of autho-
rization on a policy if and only if the authority for that pol-
icy is compromised or has delegated access, directly or indi-
rectly, to a compromised entity.
This guarantee follows directly from the fact that each
attestation is signed by its issuer. A WAVE proof can be
thought of as a certiﬁcate chain. Given that existing systems
like SDSI/SPKI [49] use a similar construction, we do not
explore this further.
To achieve the other two security goals, WAVE introduces
two new techniques: Reverse-Discoverable Encryption (§4)
to satisfy Security Goal #2, and Unequivocable Log-Derived
Maps (§5) to satisfy Security Goal #3. The following sec-
tions introduce these techniques and state formal security
guarantees.
4 Encrypting Attestations
We encrypt attestations such that entities can decrypt attes-
tations they can use in a valid proof. Entities cannot learn
the policy (i.e., what permissions are granted) or the issuer
(i.e., who created the attestation) of most other attestations.
Our technique, reverse-discoverable encryption (RDE), does
not require out-of-band communication between entities and
works even if attestations are created out of order.
We present our solution incrementally: §4.1 formalizes the
problem that RDE solves. §4.2 presents a simpliﬁed design
of RDE, based on traditional public-key encryption, that pro-
vides a weak but useful security guarantee called “structural
security.” §4.3 augments the simpliﬁed RDE with policy-
aware encryption to provide a signiﬁcantly stronger notion
of security, at the expense of making discoverability of at-
testations inefﬁcient. §4.4 presents our ﬁnal protocol, which
provides both efﬁcient discovery of attestations and a signif-
icantly stronger guarantee than structural security.
For all the security guarantees stated in this section, we as-
sume that the attacker Adv is computationally-bounded, and
that standard cryptographic assumptions hold.
4.1 Graph-based Formalization
We formalize the problem in terms of the global authoriza-
tion graph; an example is shown in Fig. 2. For correctness,
we require that each entity can decrypt all attestations that
USENIX Association
28th USENIX Security Symposium    1379
Figure 2: The number to the left of each colon indicates
when the attestation was created. The string to the right de-
notes the resource on which it grants permission.
it can use to form a valid proof where it is the subject. In
Fig. 2, entity D should be able to see attestations #1, #4, and
#3. Correctness does not require D to be able to see attes-
tation #2, as there is no path from B to D granting access to
file1. Similarly, correctness does not require D to be able
to see attestation #5, as there is no path from C to D granting
access to file2. For security, we would like each entity to
see as few additional attestations as possible.
4.2 Structural RDE
This section explains a simpliﬁed (yet weaker) version of
RDE that is helpful to understand the main idea behind our
technique. For this version alone, assume there are no re-
voked/expired attestations.
Each entity has an additional public-private keypair used
only for encrypting/decrypting attestations, separate from
the keys used to sign attestations. This keypair is governed
by two rules: when an entity grants an attestation, it (1) at-
taches its private key to the attestation, and (2) encrypts the
attestation, including the attached private key, using the pub-
lic key of the attestation’s subject (recipient). For example,
in Fig. 2, #3 contains skC and is encrypted under pkD (i.e.,
Enc(pkD; #3||skC)).
This meets the correctness goal; D can decrypt #3 as #3 is
encrypted under pkD. In decrypting #3, it obtains skC, which
it can use to decrypt #4. This works even though attestation
#4 was issued after #3. In decrypting #4, it obtains skA,
which it can use to decrypt #1. Essentially, each entity can
see the attestations it can use in a proof by decrypting them
in the reverse order as they would appear in a proof.
This achieves a simple security guarantee called struc-
tural security, which allows an entity e to see any attestation
A for which there exists a path from A.subject to e. We call it
“structural” security because only the structure of the graph,
not the policies in attestations, affects whether A is visible to
e. While structural RDE uses traditional public-key encryp-
tion, it differs from systems like PGP in that entities include
their long-lived private keys in the attestations they encrypt.
4.3 Policy-Aware RDE
Structural security only takes into account the structure of the
graph, not the policy of each attestation (i.e., the resources
and the expiry). For example, structural RDE allows D to
decrypt #5, though this is not necessary to meet the correct-
ness goal; D cannot form a valid proof containing #5 because
its policy differs from #4’s (they delegate access to different
ﬁles). With policy-aware RDE, we achieve a stronger notion
of security that prevents D from decrypting #5 by making
two high-level changes to structural RDE.
First, whereas structural RDE encrypts each attestation
A according to only A.subject, policy-aware RDE encrypts
each attestation A according to both A.subject and A.policy.
Second, whereas structural RDE includes a key in A that can
decrypt all attestations immediately upstream of A, policy-
aware RDE includes a key in A that can only decrypt up-
stream attestations with policies compatible with A.policy.
Choosing a suitable encryption scheme. Because the pol-
icy of an attestation determines how it is encrypted, the en-
cryption scheme must be policy-aware. In particular, tradi-
tional public-key encryption is insufﬁcient for policy-aware
encryption (except for a boolean policy). We use the RTree
policy type to explain our policy-aware RDE, although the
technique applies to other policy types.
We
identify Wildcard
Identity-Based Encryption
(WIBE) [5] as a suitable policy-aware encryption scheme
to implement RDE for the RTree policy type. Typically,
IBE [16] (or an IBE variant such as WIBE) is instantiated
with a single centralized Private Key Generator (PKG) that
issues private keys to all participants. This does not meet
the goals of WAVE, because the PKG is a central trusted
party. In RDE, however, our insight is to instantiate a WIBE
system for every entity, so there is no central PKG.
A WIBE system consists of a master secret and pub-
A message m
lic key pair (WIBE.msk,WIBE.mpk).
is encrypted using the master public key WIBE.mpk
and a ﬁxed-length vector of
called an ID:
WIBE.Enc(WIBE.mpk, ID;m). Using msk, one can gener-
ate a secret key for a set of IDs. This set is expressed as an
ID with some components replaced by wildcards, denoted
ID∗. The secret key skID∗ can decrypt an encrypted mes-
sage, WIBE.Enc(WIBE.mpk, ID;m), if ID∗ and ID match in
all non-wildcard components.
strings,
Every policy p has an associated WIBE ID called a
partition. The partition corresponding to policy p is de-
noted P(p). When issuing an attestation A, an entity
encrypts it using P(A.policy),
in the WIBE system of
A.subject: WIBE.Enc(WIBE.mpkA.subject,P(A.policy);A).
Furthermore,
the issuing entity generates secret keys in
its own WIBE system, suitable to decrypt messages en-
crypted under P(A.policy), and includes them in the at-
testation. Let Q(A.policy) = {ID∗
i}i represent the set of
IDs suitable for decrypting attestations encrypted under
P(p) for p compatible with A.policy, then A includes W =
{WIBE.KeyGen(WIBE.mskIssuer; ID∗
i∈Q(A.policy). Be-
low, we develop the partition map for RTree, which derives
a partition from an RTree policy (i.e., functions P and Q).
Partition map for RTree. To deﬁne P, consider that an
RTree policy consists of a resource preﬁx as deﬁned in §2.4
(matching multiple resources) and a time range during which