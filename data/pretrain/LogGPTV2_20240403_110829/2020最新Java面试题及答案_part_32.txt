安全性是用于保证每个节点都执行相同序列的安全机制如当某个Follower在当前Leader commit
Log时变得不可用了，稍后可能该Follower又会倍选举为Leader，这时新Leader可能会用新的
Log覆盖先前已committed的Log，这就是导致节点执行不同序列；Safety就是用于保证选举出
来的Leader一定包含先前 commited Log的机制；
选举安全性（Election Safety）：每个Term只能选举出一个Leader
Leader 完整性（Leader Completeness）：这里所说的完整性是指 Leader 日志的完整性，
Raft 在选举阶段就使用 Term 的判断用于保证完整性：当请求投票的该 Candidate 的 Term 较大
或Term相同Index更大则投票，该节点将容易变成leader。
20.1.3.5. raft协议和zab协议区别
相同点
 采用quorum来确定整个系统的一致性,这个quorum一般实现是集群中半数以上的服务器,
 zookeeper里还提供了带权重的quorum实现.
 都由leader来发起写操作.
 都采用心跳检测存活性
13/04/2018 Page 227 of 283
 leader election都采用先到先得的投票方式
不同点
 zab用的是epoch和count的组合来唯一表示一个值, 而raft用的是term和index
 zab的follower在投票给一个leader之前必须和leader的日志达成一致,而raft的follower
则简单地说是谁的term高就投票给谁
 raft协议的心跳是从leader到follower, 而zab协议则相反
 raft协议数据只有单向地从leader到follower(成为leader的条件之一就是拥有最新的log),
而zab协议在discovery阶段, 一个prospective leader需要将自己的log更新为quorum里面
最新的log,然后才好在synchronization阶段将quorum里的其他机器的log都同步到一致.
20.1.4. NWR
N：在分布式存储系统中，有多少份备份数据
W：代表一次成功的更新操作要求至少有w份数据写入成功
R： 代表一次成功的读数据操作要求至少有R份数据成功读取
NWR值的不同组合会产生不同的一致性效果，当W+R>N的时候，整个系统对于客户端来讲能保
证强一致性。而如果R+Wcache A2 ； objec2->cache A1 ； objec3->cache C1 ； objec4->cache C2 ；
因此对象 object1 和 object2 都被映射到了 cache A 上，而 object3 和 object4 映射到了 cache
C 上；平衡性有了很大提高。
引入“虚拟节点”后，映射关系就从 { 对象 -> 节点 } 转换到了 { 对象 -> 虚拟节点 } 。查询物体所
在 cache 时的映射关系如下图 所示。
13/04/2018 Page 230 of 283
13/04/2018 Page 231 of 283
21. JAVA 算法
21.1.1. 二分查找
又叫折半查找，要求待查找的序列有序。每次取中间位置的值与待查关键字比较，如果中间位置
的值比待查关键字大，则在前半部分循环这个查找的过程，如果中间位置的值比待查关键字小，
则在后半部分循环这个查找的过程。直到查找到了为止，否则序列中没有待查的关键字。
public static int biSearch(int []array,int a){
int lo=0;
int hi=array.length-1;
int mid;
while(lo a[j]){//前面的数字大于后面的数字就交换
//交换a[j-1]和a[j]
int temp;
temp = a[j-1];
a[j-1] = a[j];
a[j]=temp;
}
}
}
}
21.1.3. 插入排序算法
通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入。
插入排序非常类似于整扑克牌。在开始摸牌时，左手是空的，牌面朝下放在桌上。接着，一次从
桌上摸起一张牌，并将它插入到左手一把牌中的正确位置上。为了找到这张牌的正确位置，要将
它与手中已有的牌从右到左地进行比较。无论什么时候，左手中的牌都是排好序的。
如果输入数组已经是排好序的话，插入排序出现最佳情况，其运行时间是输入规模的一个线性函
数。如果输入数组是逆序排列的，将出现最坏情况。平均情况与最坏情况一样，其时间代价是(n2)。
public void sort(int arr[])
13/04/2018 Page 233 of 283
{
for(int i =1; i=0&&insertVal从后往前比较的索引，结束第一次循环，此时，对于基准值
来说，左右两边就是有序的了。
public void sort(int[] a,int low,int high){
int start = low;
int end = high;
13/04/2018 Page 234 of 283
int key = a[low];
while(end>start){
//从后往前比较
while(end>start&&a[end]>=key)
//如果没有比关键值小的，比较下一个，直到有比关键值小的交换位置，然后又从前往后比较