Both cases return the same key so we must have a match!
The next client message is similar to a SOCKS "Client connection request":
| |	VER |	CMD |	RSV |	DSTADDR |	DSTPORT |
|---|---|---|---|---|---|
|Byte Count |	1 |	1 |	1 |	Variable |	2 |
* SOCKS version
* Command Code (0x01: establish a TCP/IP stream connection)
* Reserved, must be 0x00
* Destination address
  * Type of the address (0x01: IPv4 address)
  * The address (4 bytes for IPv4 address)
* Port number, 2 bytes
This fits our message, making this a request for Address c0:a8:ad:0a, port 0x50, a.k.a. 192.168.173.10:80.
| |	VER |	CMD |	RSV |	DSTADDR |	DSTPORT |
|---|---|---|---|---|---|
|Contents |	0x5a |	1 |	0 |	0x1, [0xc0, 0xa8 0xad 0x0a] |	0x50 |
The response in the SOCKS protocol is:
| | 	VER |	STATUS |	RSV |	BNDADDR |	BNDPORT |
|---|---|---|---|---|---|
|Byte Count |	1 |	1 |	1 |	variable |	2 |
* SOCKS version
* Status code (0x00: request granted)
* Reserved, must be 0x00
* Server bound address
* Server bound port number
In this case we have a partial match for the response, since the bound address and port in the response we've received are 0 (perhaps that's ok?).
| | 	VER |	STATUS |	RSV |	BNDADDR |	BNDPORT |
|---|---|---|---|---|---|
|Contents |	0x5a |	0 |	0 |	0 |	0 |
Now to the long packets. If we decode them as ASCII we get an HTTP request and response:
```console
root@kali:/media/sf_CTFs/checkpoint/Shoes# tshark -nr capture.pcapng -Y "frame.number == 77" -T fields -e tcp.payload 2>/dev/null | xxd -r -p
GET / HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36
Host: www.tutorialspoint.com
Accept-Language: en-us
Connection: Keep-Alive
root@kali:/media/sf_CTFs/checkpoint/Shoes# tshark -nr capture.pcapng -Y "frame.number == 79" -T fields -e tcp.payload 2>/dev/null | xxd -r -p
HTTP/1.1 200 OK
Date: Wed, 22 Apr 2020 11:21:50 GMT
Server: Apache/2.4.29 (Ubuntu)
Last-Modified: Wed, 22 Apr 2020 10:49:56 GMT
ETag: "9d-5a3dee491da72"
Accept-Ranges: bytes
Content-Length: 157
Vary: Accept-Encoding
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: text/html
Files in server:
index.html
Arbok.jpg
Blastoise.jpg
Bulbasaur.jpg
Butterfree.jpg
Charizard.jpg
Flag.jpg
Metapod.jpg
Rattata.jpg
Squirtle.jpg
Wartortle.jpg
```
The client is sending an HTTP GET request for "`www.tutorialspoint.com/`" and receiving a list of files, including `Flag.jpg`. We probably want to download that file ourselves.
Let's try to replicate this behavior.
We start from implementing classes for the different SHOES messages we've reversed earlier:
```python
# shoes.py
from ctypes import *
import binascii, ipaddress
SHOES_PROTOCOL_VERSION = 0x5A
SHOES_AUTH_TYPE_XOR = 0xFE
SHOES_ADDRESS_TYPE_IPV4 = 0x1
SHOES_COMMAND_ESTABLISH_TCP_IP = 0x1
SHOES_STATUS_SUCCESS = 0x0
class ShoesStruct(BigEndianStructure):
    _pack_ = 1
    CHECKSUM_LENGTH = 4
    def to_bytes(self, include_checksum = True):
        res = bytes(self)
        if include_checksum:
            res += self.calculate_checksum(res)
        return res
    @classmethod
    def from_bytes(cls, buf, callback = None):
        buf_without_checksum, checksum = cls.split_checksum(buf)
        obj = cls.from_buffer_copy(buf_without_checksum)
        initial_len = len(obj.to_bytes(include_checksum = False))
        if callback:
            obj = callback(obj, buf_without_checksum, initial_len)
        calc_checksum = cls.calculate_checksum(obj.to_bytes(include_checksum = False))
        if (checksum != calc_checksum):
            raise ValueError("Calculated checksum (0x{}) different from provided checksum (0x{})"
                                .format(calc_checksum.hex(), checksum.hex()))
        return obj
    @classmethod
    def split_checksum(cls, buf):
        if len(buf) < cls.CHECKSUM_LENGTH:
            raise ValueError("Provided buffer too short to contain checksum")
        buf_without_checksum = buf[:-1 * cls.CHECKSUM_LENGTH]
        checksum = buf[-1 * cls.CHECKSUM_LENGTH:]
        return (buf_without_checksum, checksum)
    @classmethod
    def calculate_checksum(cls, buf):
        return binascii.crc32(buf).to_bytes(cls.CHECKSUM_LENGTH, byteorder='big')
class ClientGreeting(ShoesStruct):
    _fields_ = [('version', c_uint8),
                ('num_auth', c_uint8)]
    _auth_list = (c_ubyte * 0)()
    def __init__(self, version = None, auth_list = None):
        super().__init__()
        if version is not None:
            self.version = version
        if auth_list is not None:
            self.auth_list = auth_list
    @property
    def auth_list(self):
        return list(bytes(self._auth_list))
    @auth_list.setter
    def auth_list(self, auth_list):
        self.num_auth = len(auth_list)
        self._auth_list = (self._auth_list._type_ * len(auth_list))()
        al = bytes(auth_list)
        assert(len(al) == len(auth_list))
        memmove(self._auth_list, al, len(auth_list))
    @classmethod
    def from_bytes(cls, buf):
        try:
            def handle_auth_list_callback(obj, buf_without_checksum, initial_len):
                if len(buf_without_checksum) != initial_len:
                    obj.auth_list = buf_without_checksum[initial_len:]
                if (len(obj._auth_list) != obj.num_auth):
                    raise ValueError("Declared number of authentication methods does not match provided number")
                return obj
            obj = super().from_bytes(buf, handle_auth_list_callback)
            return obj
        except Exception:
            raise
    def to_bytes(self, include_checksum = True):
        res = super().to_bytes(include_checksum = False) + memoryview(self._auth_list)
        if include_checksum:
            res += self.calculate_checksum(res)
        return res
from abc import ABC, abstractmethod, ABCMeta
class ShoesAuthBase(ShoesStruct):
    @property