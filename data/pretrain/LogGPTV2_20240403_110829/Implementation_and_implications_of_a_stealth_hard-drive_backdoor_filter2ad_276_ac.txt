challenges that we address next.
Data Encoding.
The character encoding chosen by the application should
match the one the backdoor expects. The backdoor may
try diﬀerent character encodings on the content of incoming
write requests, looking for the magic value in the data. By
knowing the encoded magic value under diﬀerent encodings,
the backdoor can identify which encoding is being used and
encode the data to be exﬁltrated such that it can be read
back without conﬂicts by the application.
Caching.
Caching at any layer between the attacker and the storage
device will cause delay, potentially both in the reception of
the malicious command and the reply from the device. The
delay corresponds to the time taken to evict the malicious
command from caches above the storage device. Therefore,
this delay depends on the load of the web server and can be
inﬂuenced by the attacker.
Magic Value Alignment.
It is diﬃcult to predict the alignment of the magic value
at speciﬁc boundaries. This results in considerable over-
head when searching for the magic value in a write buﬀer.
Searching for a 4-byte magic value in a 512-byte sector, for
instance, would require examining 509 byte sequences. As
discussed in the next section, we mitigate this by repeating
the magic value multiple times in a request, such that the
overhead of searching for it becomes negligible. At the same
time, these repeated sequences form a suitable space for the
exﬁltrated data to be written to by the ﬁrmware backdoor.
While the above challenges are certainly signiﬁcant and
render the exploitation of the backdoor more complicated,
they do not prevent the use of DEBs in the general case.
Our implementation provides adequate solutions to all the
above complications.
3.3 Solutions Implemented
(cid:5)
(cid:2)
(cid:3)(cid:4)
(cid:5)
(cid:2)
(cid:3)(cid:4)
(cid:2) cmd
When a write request at a block number Y with a to-
be-written buﬀer B is received, the backdoor checks for a
magic value in buﬀer B. In our implementation the magic
value is a sequence of bytes (magic), and followed by a se-
quence of bytes (cmd) specifying the malicious command to
be executed. As we now focus on data exﬁltration, cmd
contains only the hex-encoded block number to be read. It
would be easy to extend this encoding, for example, to sup-
port other operations, such as appending data to existing
blocks, tampering with stored data, or injecting malicious
code into executables. Here, the attacker submits writes of
length 2 · bkdr bs, formatted in the following way, with (cid:2)
being the concatenation operation:
magic(cid:2) . . .(cid:2)magic
repeated count times
(cid:2) cmd (cid:2) magic(cid:2) . . .(cid:2)magic
repeated count times
count = (bkdr bs − length(cmd))/length(magic)
Typically, there are layers (such as the ﬁlesystem) between
the attacker and the disk that split all writes into blocks
of at least bkdr bs size at an arbitrary oﬀset. Thus, the
blocks created have at least one bkdr bs-sized chunk exclu-
sively containing the repeated magic sequences followed by
the command (modulo a byte-level circular permutation on
the chunk, i.e., a “wrap around”). This allows the backdoor
(i) to make sure the bkdr bs-sized chunk can be safely re-
placed by an equal-size exﬁltrated data chunk, and (ii) to
check eﬃciently for the magic value. More precisely, the
backdoor checks only the ﬁrst length(cmd) +length( magic)
bytes of the chunk, because of the possible length(magic)
alignments of the magic value and the possibility of the
chunk starting with cmd. Note that increasing the length of
the magic value increases the performance overhead of the
backdoor. We chose a 4-byte magic value which results in a
low performance overhead.
Algorithm 1 backdoor(blocks, magic, cmd size, bkdr bs)
bkdr count ← length(magic) +cmd size
for blk in blocks do
if magic present in ﬁrst bkdr count bytes of blk then
if blk does not contain count successive magics then
continue loop at next iteration
end if
cmd ← cmd size bytes after last magic, wrap around
if required
block num ← hex decode(cmd)
buf ← read block(block num)
base64 encode(buf )
blk ← buf
end if
end for
If the magic value is present in B, the malicious behavior
of the DEB is triggered: The backdoor extracts the com-
mand from the request data, such as “read data at sector
X” for data exﬁltration from the storage device, as shown
from
in Algorithm 1. The backdoor reads data buﬀer B
(cid:4)
284
(cid:4)
3 , and writes B
sector X, encodes it using base64, which increases its size
by 1
. To ensure that the encoded data can
be successfully exﬁltrated, the backdoor checks for the pres-
ence of at least bkdr bs ∗ 4
3 bytes of consecutive magic val-
ues in a sequence of blocks and then replaces these by the
base64-encoded data. At this point, a future read request at
address Y will return the modiﬁed content, allowing unau-
thorized data exﬁltration of the contents at address X from
the device to a remote attacker.
Valid magic sequences could occur during normal, non-
malicious use of the storage device. Such a false-positive
would result in the storage device to detect the magic se-
quence and write faulty data to a sector, possibly under-
mining the stability of the system. However, such a false
positive can only occur with negligible probability, as the
backdoor always checks for about two blocks of successive
magic values before attempting a replacement.
Also note that the ﬁrmware can write B
to Y possibly af-
ter modiﬁcations through cryptographic and steganographic
operations to prevent easy detection by the administrator of
the target machine.
3.4 DEB Evaluation
(cid:4)
As we mentioned in the previous section, our backdoor in
the oﬀ-the-shelf disk drive it is not stable enough to per-
form multiple arbitrary reading operations from the disk,
which is required for implementing the complete DEB. In
this section, we therefore report on experiments performed
on a QEMU-based prototype.
We implemented the DEB inside QEMU’s storage device
functionality, which is used when using virtual IDE drives in
system-virtualization software such as KVM and Xen. This
provided us with an easy-to-use platform to develop, test,
debug, and evaluate the backdoor.
In this case, we evaluate the data exﬁltration latency from
an attacker’s point of view. In addition, we perform a ﬁle
exﬁltration test to show the feasibility of retrieving sensible
remote ﬁles without needing to exﬁltrate the entire disk. We
base this evaluation on the scenario described in Section 3.1.
We have conducted experiments on a virtual machine with
1 GB of memory running on a modiﬁed QEMU contain-
ing the backdoor. This is the attacker’s target host. Our
tests were performed on the emulated IDE disk with write-
back caching. The target host runs Ubuntu and an Apache
web server with two PHP scripts providing web forum (or
blog) functionality. The forum shows all (recently) made
comments (or “posts”) using the ﬁrst PHP script, and also
allows the submission of new comments, using the second
script. These comments are written to and read from a table
in a MySQL database which runs atop an ext3 ﬁlesystem.
We emphasize here that the results of this second set of
experiments highly depend on the application, the workload
on the machine, and the total available system memory –
and do not depend much on the caracteristics of the disk or
ﬁrmware backdoor. Indeed, because the Linux page cache1 is
essentially an LRU-like cache, forcing the eviction of pages
from main memory requires generating accesses for about
as much data as there is free available memory for buﬀers
and caches on the system (and the more eager the operat-
ing system is to swap pages, the higher the memory that
1The page cache caches blocks read from and written to
block devices, and is integrated with the ﬁlesystem cache
(or buﬀer cache).
285
Table 2: Data exﬁltration performance
Mean (s)
95% CI
Insert
Latency
File exﬁltration
10.7
9.7
40.0
[10.65; 10.71]
[9.55; 9.82]
[39.6; 40.4]
is available). For a single block, the time to generate that
workload largely dominates the transfer time from and to
the disk for a single block (even in our setup where rela-
tively little memory is available).
We perform 30 iterations for all tests, with a 30 second
pause between successive iterations. For each set of values
measured, we compute 95%-conﬁdence intervals using the
t-distribution.
Latency Test.
Because of caching, the inserted comments are not im-
mediately updated with the exﬁltrated data.
In fact, the
malicious blocks are temporarily stored in the page cache —
from where they are retrieved when they are immediately
accessed by the attacker. Therefore, the presence of a cache
forces the attacker to wait until the blocks are evicted from
the cache. In our scenario, this can be forced by the attacker
as well, namely by inserting dummy comments to quickly ﬁll
up the cache and thus force eviction of least recently accessed
data.
The insert time in Table 2 shows the time taken to in-
sert 500 8-KB comments sequentially, using the PHP form.
As described in Section 3.3, the backdoor replaces each of
these comments with 3 KB of exﬁltrated data starting at
the sector number included in the comment. The latency
time in Table 2 shows the update latency in seconds for the
500 comments inserted during the insert test — during this
time, the attacker sends many other dummy comments to
speed up cache eviction. It follows that an attacker is able
to exﬁltrate 3000 sectors in 10.7 + 9.7 = 20.4 seconds in our
setup, achieving a read bandwidth of 74 KB/s. In practice,
an attacker may limit bandwidth to avoid detection. In addi-
tion, those values will diﬀer depending on the characteristics
of the system (mainly, more physical memory will cause the
comments to persist longer in cache, and more load on the
server will cause the opposite). Hence, these results show
that the latency is likely to be suﬃciently low, and that an
attacker can realistically use this technique.
Exﬁltration Test.
Let’s now consider a typical case in which an attacker
attempts to exﬁltrate the /etc/shadow ﬁle on the target
host.
To that end, we created a python program that succes-
sively (a) retrieves the partition table in the MBR of the
disk, (b) retrieves the superblock of the ext3 partition, (c) re-
trieves the ﬁrst block group descriptor, (d ) retrieves the in-
ode contents of the root directory / (always at inode number
2) in the inode table, and (e) retrieves the block correspond-
ing to the root directory, therefore ﬁnding the inode number
of /etc. By repeating the last two steps for /etc, the at-
tacker retrieves the /etc/shadow ﬁle on the target host.
Table 2, row 3, shows that /etc/shadow can be exﬁltrated
in less than a minute. Because the process of retrieving the
ﬁle requires nine queries for a few sectors, each of them de-
pending on the results returned by the preceding query, this
ﬁgure is mainly dominated by the time taken to evict com-
ments from the cache. This means that the actual latency
for a single sector is about 4 seconds (for a comparison, note
that the latency ﬁgure in row 2 also includes the retrieval
time of the 3000 sectors).
4. DETECTION AND PREVENTION
We ﬁrst discuss the applicability of existing standard tech-
niques for defeating or mitigating DEBs, including encryp-
tion of data at rest, signed ﬁrmware updates, and intrusion
detection systems. Subsequently, we propose two new tech-
niques speciﬁcally targeting the detection of DEBs: OS page
cache integrity checks and ﬁrmware integrity veriﬁcation.
4.1 Encryption of Data at Rest
The use of encryption of data at rest is still an exception,
both on servers and desktop computers. When used, it is
often for the purpose of regulatory compliance or to pro-
vide easy storage-device disposal and theft protection (by
securely deleting the encryption key associated with a lost
disk). Under some conditions, encryption of data at rest
mitigates the possibility of data-exﬁltration backdoors on
storage devices: it renders establishing a covert communica-
tion channel more diﬃcult for remote attackers and prevents
the untrusted storage device from accessing the data in the
ﬁrst place.
Hardware-Based Disk Encryption.
Hardware-based disk-encryption mechanisms commonly
rely on the hard disk drive to encrypt data itself. Decryption
is only possible after a correct password has been provided
to the drive. In such a setup, as data is encrypted and de-
crypted within the drive, a backdoor would only have to
hook into the ﬁrmware before the encryption component.
Thereafter, the hard-disk will encrypt and decrypt data for
the backdoor.
Software-Based (Filesystem and Partition) Encryption.
Other hard-disk encryption systems, among them Bit-
Locker, FileVault, and TrueCrypt, encrypt full partitions
over arbitrary storage devices. Such mechanisms often rely
on a minimal system to be loaded from a non-encrypted
partition whose integrity is veriﬁed by a trusted boot mech-
anism. A trusted boot mechanism relies on a TPM to pre-
vent a modiﬁed system, e.g., modiﬁed by the drive itself, to
access a protected key sealed by the TPM. However, with-
out an IOMMU, the backdoor on a hard drive can launch a
DMA attack [13] to read arbitrary locations from the main
memory. This allows the backdoored hard disk to obtain the
encryption key. Recently, it has been shown that even mech-
anisms to protect encryption keys against DMA attacks [24]
can be circumvented [7].
In conclusion, neither hardware-based nor software-based
encryption oﬀer full protection against DEBs in all cases.
Disk encryption can prevent DEBs as presented in this paper
when keys are not managed by the disk itself and when the
disk is not able to use DMA to access main memory. This
corresponds to setups in which:
• system-level encryption is used and disks are attached
to the computer (e.g., desktops or laptops) and an
IOMMU (e.g., Intel VT-d or AMD SVM) is present
and properly conﬁgured;
• system-level encryption and remote storage are used,
for example, servers with a Network Attached Storage
(NAS) or Storage Area Network (SAN). Such a remote
storage must not support remote DMA capabilities,
like Inﬁniband or Myrinet protocols does.
We believe that both setups are uncommon. While IOM-
MUs are present in many computers, they are rarely acti-
vated because of their signiﬁcant performance overhead [6].
On the other hand, servers that rely on a SAN or NAS are
typically not using software disk encryption because of its
signiﬁcant performance impact.
4.2 Signed Firmware Updates
To protect a device from malicious ﬁrmware updates, cryp-
tographic integrity checks can be used. The use of asym-
metric signatures is preferable in this case, and each device
would be manufactured with the public key of the entity per-
forming the ﬁrmware updates. Although the idea of signing