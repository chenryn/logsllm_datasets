function, which performs a unit of work. You’ll do this by
using channels to coordinate work distribution and the
gathering of results. Recall that you did something similar in
Chapter 2, when you built a concurrent port scanner.
Continue to expand the code from Listing 5-3. First, create
the worker() function and place it outside main(). This function
takes three channel arguments: a channel for the worker to
signal whether it has closed, a channel of domains on which to
receive work, and a channel on which to send results. The
function will need a final string argument to specify the DNS
server to use. The following code shows an example of our
worker() function:
type empty struct{} ❶
func worker(tracker chan empty, fqdns chan string, gather chan []result,
serverAddr string) {
for fqdn := range fqdns { ❷
results := lookup(fqdn, serverAddr)
if len(results) > 0 {
gather  0 {
cfqdn = cnames[0]
continue // We have to process the next CNAME.
}
ips, err := lookupA(cfqdn, serverAddr)
if err != nil {
break // There are no A records for this hostname.
}
for _, ip := range ips {
results = append(results, result{IPAddress: ip, Hostname: fqdn})
}
break // We have processed all the results.
}
return results
}
func worker(tracker chan empty, fqdns chan string, gather chan []result,
serverAddr string) {
for fqdn := range fqdns {
results := lookup(fqdn, serverAddr)
if len(results) > 0 {
gather <- results
}
}
var e empty
tracker <- e
}
type empty struct{}
type result struct {
IPAddress string
Hostname string
}
func main() {
var (
flDomain = flag.String("domain", "", "The domain to perform guessing
against.")
flWordlist = flag.String("wordlist", "", "The wordlist to use for guessing.")
flWorkerCount = flag.Int("c", 100, "The amount of workers to use.")
flServerAddr = flag.String("server", "8.8.8.8:53", "The DNS server to use.")
)
flag.Parse()
if *flDomain == "" || *flWordlist == "" {
fmt.Println("-domain and -wordlist are required")
os.Exit(1)
}
var results []result
fqdns := make(chan string, *flWorkerCount)
gather := make(chan []result)
tracker := make(chan empty)
fh, err := os.Open(*flWordlist)
if err != nil {
panic(err)
}
defer fh.Close()
scanner := bufio.NewScanner(fh)
for I := 0; i < *flWorkerCount; i++ {
go worker(tracker, fqdns, gather, *flServerAddr)
}
for scanner.Scan() {
fqdns <- fmt.Sprintf"%s.%", scanner.Text(), *flDomain)
}
// Note: We could check scanner.Err() here.
go func() {
for r := range gather {
results = append(results, I.)
}
var e empty
tracker <- e
}()
close(fqdns)
for i := 0; i < *flWorkerCount; i++ {
<-tracker
}
close(gather)
<-tracker
w := tabwriter.NewWriter(os.Stdout, 0, 8' ', ' ', 0)
for _, r := range results {
fmt.Fprint"(w, "%s\"%s\n", r.Hostname, r.IPAddress)
}
w.Flush()
}
Listing 5-4: The complete subdomain-guessing program (/ch-
5/subdomain_guesser/main.go)
Your subdomain-guessing program is complete! You
should now be able to build and execute your shiny new
subdomain-guessing tool. Try it with word lists or dictionary
files in open source repositories (you can find plenty with a
Google search). Play around with the number of workers; you
may find that if you go too fast, you’ll get varying results.
Here’s a run from the authors’ system using 100 workers:
$ wc -l namelist.txt
1909 namelist.txt
$ time ./subdomain_guesser -domain microsoft.com -wordlist namelist.txt -c
1000
ajax.microsoft.com 72.21.81.200
buy.microsoft.com 157.56.65.82
news.microsoft.com 192.230.67.121
applications.microsoft.com 168.62.185.179
sc.microsoft.com 157.55.99.181
open.microsoft.com 23.99.65.65
ra.microsoft.com 131.107.98.31
ris.microsoft.com 213.199.139.250
smtp.microsoft.com 205.248.106.64
wallet.microsoft.com 40.86.87.229
jp.microsoft.com 134.170.185.46
ftp.microsoft.com 134.170.188.232
develop.microsoft.com 104.43.195.251
./subdomain_guesser -domain microsoft.com -wordlist namelist.txt -c 1000 0.23s
user 0.67s system 22% cpu 4.040 total
You’ll see that the output shows several FQDNs and their
IP addresses. We were able to guess the subdomain values for
each result based off the word list provided as an input file.
Now that you’ve built your own subdomain-guessing tool
and learned how to resolve hostnames and IP addresses to
enumerate different DNS records, you’re ready to write your
own DNS server and proxy.
WRITING DNS SERVERS
As Yoda said, “Always two there are, no more, no less.” Of
course, he was talking about the client-server relationship, and
since you’re a master of clients, now is the time to become a
master of servers. In this section, you’ll use the Go DNS
package to write a basic server and a proxy. You can use DNS
servers for several nefarious activities, including but not
limited to tunneling out of restrictive networks and conducting
spoofing attacks by using fake wireless access points.
Before you begin, you’ll need to set up a lab environment.
This lab environment will allow you to simulate realistic
scenarios without having to own legitimate domains and use
costly infrastructure, but if you’d like to register domains and
use a real server, please feel free to do so.
Lab Setup and Server Introduction
Your lab consists of two virtual machines (VMs): a Microsoft
Windows VM to act as client and an Ubuntu VM to act as
server. This example uses VMWare Workstation along with
Bridged network mode for each machine; you can use a
private virtual network, but make sure that both machines are
on the same network. Your server will run two Cobalt Strike
Docker instances built from the official Java Docker image
(Java is a prerequisite for Cobalt Strike). Figure 5-1 shows
what your lab will look like.
Figure 5-1: The lab setup for creating your DNS server
First, create the Ubuntu VM. To do this, we’ll use version
16.04.1 LTS. No special considerations need to be made, but
you should configure the VM with at least 4 gigabytes of
memory and two CPUs. You can use an existing VM or host if
you have one. After the operating system has been installed,
you’ll want to install a Go development environment (see
Chapter 1).
Once you’ve created the Ubuntu VM, install a
virtualization container utility called Docker. In the proxy
section of this chapter, you’ll use Docker to run multiple
instances of Cobalt Strike. To install Docker, run the following
in your terminal window:
$ sudo apt-get install apt-transport-https ca-certificates
sudo apt-key adv \
--keyserver hkp://ha.pool.sks-keyservers.net:80 \
--recv-keys 58118E89F3A912897C070ADBF76221572C52609D
$ echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee
/etc/apt/sources.list.d/docker.list
$ sudo apt-get update
$ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
$ sudo apt-get install docker-engine
$ sudo service docker start
$ sudo usermod -aG docker USERNAME
After installing, log out and log back into your system.
Next, verify that Docker has been installed by running the
following command:
$ docker version
Client:
Version: 1.13.1
API version: 1.26
Go version: go1.7.5
Git commit: 092cba3
Built: Wed Feb 5 06:50:14 2020
OS/Arch: linux/amd64
With Docker installed, use the following command to
download a Java image. This command pulls down the base
Docker Java image but doesn’t create any containers. You’re
doing this to prepare for your Cobalt Strike builds shortly.
$ docker pull java
Finally, you need to ensure that dnsmasq isn’t running,
because it listens on port 53. Otherwise, your own DNS
servers won’t be able to operate, since they’re expected to use
the same port. Kill the process by ID if it’s running:
$ ps -ef | grep dnsmasq
nobody 3386 2020 0 12:08
$ sudo kill 3386
Now create a Windows VM. Again, you can use an
existing machine if available. You don’t need any special
settings; minimal settings will do. Once the system is
functional, set the DNS server to the IP address of the Ubuntu
system.