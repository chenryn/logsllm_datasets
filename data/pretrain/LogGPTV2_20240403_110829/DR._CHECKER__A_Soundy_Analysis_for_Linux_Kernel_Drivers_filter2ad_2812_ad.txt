### Entering Kernel Space

#### Code Snippet
```c
#define MLOG_STR_LEN
...
int mlogdoread(char *buf, size_t len) {
    ...
    buf += size;
    i += size;
}
```

#### Buffer Overflow Detection
An example of a previously unknown buffer overflow detected via ITDUD is shown in the code snippet above.

### Tainted Arithmetic Detector (TAD)
The Tainted Arithmetic Detector (TAD) checks for tainted data used in operations that could cause an overflow or underflow (e.g., add, sub, or mul). An example of a zero-day vulnerability detected by TAD is provided in Listing 3.

### Invalid Cast Detector (ICD)
The Invalid Cast Detector (ICD) tracks the allocation sizes of objects and checks for any casts into an object of a different size.

### Tainted Loop Bound Detector (TLBD)
The Tainted Loop Bound Detector (TLBD) checks for tainted data used as a loop bound (i.e., a loop guard in which at least one of the values is tainted). These bugs can lead to a denial of service or even an arbitrary memory write. The example in Listing 3 shows a real-world bug that also triggered on TAD.

### Information Leak via Padded Fields
Listing 4: An information leak bug via padded fields detected by our ULD in Mediatekâ€™s FM driver, where a struct's memory is not sanitized before being copied back to user space, leaking kernel stack data.

```c
s32 fmgetaudioinfo(fm_audio_info_t *data) {
    if (fm_low_ops.bi.getaudioinfo) {
        return fm_low_ops.bi.getaudioinfo(data);
    } else {
        data->audpath = FM_AUD_ERR;
        data->i2sinfo.mode = FM_I2S_MODE_ERR;
        data->i2sinfo.status = FM_I2S_STATE_ERR;
        data->i2sinfo.rate = FM_I2S_SR_ERR;
        return 0;
    }
}

...

case FM_IOCTL_GET_AUDIO_INFO:
    fm_audio_info_t aud_data;
    // No memset of aud_data
    // Not all fields of aud_data are initialized
    ret = fmgetaudioinfo(&aud_data);
    if (ret) {
        WCN_DBG(FM_ERR|MAIN, "fmgetaudioinfo err\n");
    }
    // Copying from padding and uninitialized fields
    if (copy_to_user((void *)arg, &aud_data, sizeof(fm_audio_info_t))) {
        WCN_DBG(FM_ERR|MAIN, "copy_to_user error\n");
        ret = -EFAULT;
        goto out;
    }
    ...
```

### Tainted Pointer Dereference Detector (TPDD)
The Tainted Pointer Dereference Detector (TPDD) detects pointers that are tainted and directly dereferenced. This bug arises when a user-specified index into a kernel structure is used without checking.

### Tainted Size Detector (TSD)
The Tainted Size Detector (TSD) checks for tainted data used as a size argument in any of the copy to or copy from functions. These types of bugs can result in information leaks or buffer overflows since the tainted size is used to control the number of copied bytes.

### Uninitialized Data Leak Detector (ULD)
The Uninitialized Data Leak Detector (ULD) keeps track of which objects are initialized and will raise a warning if any src pointer for a userspace copy function (e.g., `copy_to_user`) can point to any uninitialized objects. It also detects structures with padding and will raise a warning if `memset` or `kzalloc` has not been called on the corresponding objects, as this can lead to an information leak. An example of a previously unknown bug detected by this detector is shown in Listing 4.

### Global Variable Race Detector (GVRD)
The Global Variable Race Detector (GVRD) checks for global variables accessed without a mutex. Since the kernel is reentrant, accessing globals without synchronization can result in race conditions that could lead to time-of-check to time-of-use (TOCTOU) bugs.

## Implementation

DR. CHECKER is built on top of LLVM 3.8 [30]. LLVM was chosen for its flexibility in writing analyses, applicability to different architectures, and excellent community support. We used integer range analysis as implemented by Rodrigues et al. [42], which is used by our vulnerability detectors to verify certain properties (e.g., checking for an invalid cast).

We implemented DR. CHECKER as an LLVM module pass, which consumes: a bitcode file, an entry function name, and an entry function type. It then runs our SDT analysis, employing the various analysis engines and vulnerability detectors. Depending on the entry function type, certain arguments to the entry functions are tainted before invoking the SDT (See Section 5.3).

Because our analysis operates on LLVM bitcode, we must first identify and build all of the driver's bitcode files for a given kernel (Section 5.1). Similarly, we must identify all of the entry points in these drivers (Section 5.2) to pass them to our SDT analysis.

### Identifying Vendor Drivers
To analyze the drivers independently, we must first differentiate driver source code files from the core kernel code. Unfortunately, there is no standard location in the various kernel source trees for driver code. Additionally, some driver source files omit vendor copyright information, and some vendors modify existing sources directly to implement their own functionality. Thus, we employ a combination of techniques to identify the locations of the vendor drivers in the source tree. First, we perform a diff against the mainline sources and compare those files with a referenced vendor's configuration options to search for file names containing the vendor's name. Each vendor has a code-name used in all of their options and most of their files (e.g., Qualcomm configuration options contain the string MSM, Mediatek is MTK, and Huawei is either HISI or HUAWEI), which helps us identify the various vendor options and file names. We do this for all of the vendors and save the locations of the drivers relative to the source tree.

Once the driver files are identified, we compile them using clang [51] into both Advanced RISC Machine (ARM) 32-bit and 64-bit bitcode files. This necessitated a few non-trivial modifications to clang, as there are numerous GNU C Compiler (GCC) compiler options used by the Linux kernel that are not supported by clang (e.g., the `-fno-var-tracking-assignments` and `-Wno-unused-but-set-variable` options used by various Android vendors). We also added additional compiler options to clang (e.g., `-target`) to aid our analysis. Building the Linux kernel using LLVM is an ongoing project [52], suggesting that considerable effort is still needed.

Finally, for each driver, we link all of the dependent vendor files into a single bitcode file using `llvm-link`, resulting in a self-contained bitcode file for each driver.

### Driver Entry Points
Linux kernel drivers interact with userspace programs through three main operations: file [20], attribute [35], and socket [37].

- **File Operations**: The most common way of interacting with userspace. The driver exposes a file under a known directory (e.g., `/dev`, `/sys`, or `/proc`) for communication. During initialization, the driver specifies the functions to be invoked for various operations by populating function pointers in a structure, which will handle specific operations (e.g., read, write, or ioctl). There are at least 86 different types of structures in Android kernels (e.g., `struct snd_pcm_ops`, `struct file_operations`, or `struct watchdog_ops` [3]). The entry functions can be at different offsets in each of these structures. For example, the `ioctl` function pointer is at field 2 in `struct snd_pcm_ops` and at field 8 in `struct file_operations`. Even for the same structure, different kernels may implement the fields differently, resulting in the location of the entry function being different for each kernel. For example, `struct file_operations` on Mediatek's `mt8163` kernel has its `ioctl` function at field 11, whereas on Huawei, it appears at field 9 in the structure.

To handle these eccentricities in an automated way, we used `c2xml` [11] to parse the header files of each kernel and find the offsets for possible entry function fields (e.g., read or write) in these structures. Given a bitcode file for a driver, we locate the different file operation structures being initialized and identify the functions used to initialize the different entry functions.

**Listing 5: Initialization of a File Operations Structure in the mlog Driver of Mediatek**
```c
static const struct file_operations proc_mlog_operations = {
    .owner = NULL,
    .llseek = NULL,
    .read = mlog_read,
    .poll = mlog_poll,
    .open = mlog_open,
    .release = mlog_release,
    .llseek = generic_file_llseek,
};
```
These serve as our entry points for the corresponding operations. For example, given the initialization as shown in Listing 5, and the knowledge that the `read` entry function is at offset 2 (zero-indexed), we mark the function `mlog_read` as a read entry function.

- **Attribute Operations**: These operations are usually exposed by a driver to read or write certain attributes of that driver. The maximum size of data read or written is limited to a single page in memory.

- **Socket Operations**: Exposed by drivers as a socket file, typically a UNIX socket, which is used to communicate with userspace via various socket operations (e.g., send, recv, or ioctl).

There are also other drivers in which the kernel implements a main wrapper function, which performs initial verification of the user parameters and partially sanitizes them before calling the corresponding driver function(s). An example of this can be seen in the V4L2 Framework [66], which is used for video drivers. For our implementation, we consider only `struct v4l2_ioctl_ops`, which can be invoked by userspace via the wrapper function `video_ioctl2`.

### Tainting Entry Point Arguments
An entry point argument can contain either directly tainted data (i.e., the argument is passed directly by userspace and never checked) or indirectly tainted data (i.e., the argument points to a kernel location, which contains the tainted data). All of the tainted entry point functions can be categorized into six categories, which are shown in Table 1, along with the type of taint data that their arguments represent.

**Table 1: Tainted Arguments for Each Driver Entry Function Type**

| Entry Type | Argument(s) | Taint Type |
|------------|-------------|------------|
| Read (File) | `char *buf, size_t len` | Direct |
| Write (File) | `char *buf, size_t len` | Direct |
| Ioctl (File) | `long arg` | Direct |
| DevStore (Attribute) | `const char *buf` | Indirect |
| NetDevIoctl (Socket) | `struct *ifreq` | Indirect |
| V4Ioctl | `struct v4l2_format *f` | Indirect |

**Listing 6: Example of Directly Tainted Data**
```c
// tc_client_ioctl is an ioctl entry function, so argument 2 (arg) is directly tainted.
char c = (char *)arg;  // Dereferencing tainted data, flagged as a warning.

// Alternatively, argument 2 (ctrl) in iris_s_ext_ctrls is a V4Ioctl and is indirectly tainted.
data = (ctrl->controls[0]).string;  // Safe, but taints data.
```

In this snippet, `tc_client_ioctl` is an `ioctl` entry function, so argument 2 (`arg`) is directly tainted. Thus, the statement `char c = (char *)arg` would be dereferencing tainted data and is flagged as a warning. Alternatively, argument 2 (`ctrl`) in `iris_s_ext_ctrls` is a V4Ioctl and is indirectly tainted. As such, the dereference `(data = (ctrl->controls[0]).string)` is safe, but it taints `data`.

---

This revised text is more structured, coherent, and professional, making it easier to understand and follow.