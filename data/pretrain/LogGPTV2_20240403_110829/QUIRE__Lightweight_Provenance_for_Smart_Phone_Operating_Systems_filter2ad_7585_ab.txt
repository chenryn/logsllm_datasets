deputies, that is they resolve and check the user-id and
permission set of a calling application that triggers the
callee app to issue a request for a sensitve resource be-
fore issuing the request to the resource.
An app that protects a sensitive resource and blindly
handles requests from callees to the protected resource
is said to be acting as a confused deputy because it is
unaware that it is doing dangerous actions on behalf of
a caller who doesn’t have the necessary permissions. In
reality, app developers rarely intend to create a confused
deputy; instead, they may simply fail to consider that a
dangerous operation is in play, and thus fail to take any
precautions.
The goal of the IPC extensions in Quire are to provide
enough additional security context to prevent confused
deputy attacks while still enabling an application to act
as an intentional deputy if it chooses to do so. To defeat
confused deputy attacks, we simply check if any one of
the principals in the call chain is not privileged for the
action being taken; in these cases, permission is denied.
Figure 1 shows this in the context of an evil application,
lacking ﬁne-grained location privileges, which is trying
to abuse the privileges of a trusted mapping program,
which happens to have that privilege. The mapping ap-
plication, never realizing that its helpful API might be a
security vulnerability, naïvely and automatically passes
along the call chain along to the location service. The
location service then uses the call chain to prove (or dis-
prove) that the request for ﬁne-grained location show be
allowed.
As with traditional stack inspection,
there will be
times that an app genuinely wishes to exercise a priv-
ilege, regardless of its caller’s lack of the same privi-
lege. Stack inspection solves this with an enablePriv-
ilege primitive that, in the ABLP logic, simply doesn’t
pass along the caller’s call stack information. The callee,
after privileges are enabled, gets only the immediate
caller’s identity. (In the example of Figure 1, the trusted
mapper would drop the evil app from the call chain, and
the location provider would only hear that the trusted
mapper application wishes to use the service.)
Our design is, in eﬀect, an example of the “security
passing style” transformation [35], where security be-
liefs are passed explicitly as an IPC argument rather than
passed implicitly as annotations on the call stack. One
beneﬁcial consequence of this is that a callee might well
save the statement made by its caller and reuse them at
a later time, perhaps if they queue requests for later pro-
cessing, in order to properly modulate the privilege level
of outgoing requests.
Security analysis. While apps, by default, will pass
along call chain information without modiﬁcation, Quire
allows a caller to forge the identities of its antecedent
callers. They are simply strings passed along from caller
to callee. Enabling this misrepresentation would seem
to enable serious security vulnerabilities, but there is no
incentive for a caller to lie, since the addition of any an-
tecedent principals strictly reduces the privileges of the
caller. Of course, there will be circumstances when a
caller wants to take an action that will result in increased
privileges for a downstream callee. Toward that end,
Quire provides a mechanism for veriﬁable statements
(see Section 2.3).
In our design, we require the callee to learn the caller’s
identity in an unforgeable fashion. The callee then
prepends the “Caller says” tokens to the statement it
hears from the caller, using information that is available
as part of every Android Binder IPC, any lack of privi-
leges on the caller’s part will be properly reﬂected when
the privileges for the trusted operation are later evaluated.
Furthermore, our design is lightweight; we can con-
struct and propagate IPC call chains with little impact on
IPC performance (see Section 5).
2.3 Veriﬁable statements
Stack inspection semantics are helpful, but are not suf-
ﬁcient for many security needs. We envision a variety
of scenarios where we will need semantics equivalent to
digital signatures, but with much better performance than
public-key cryptographic operations.
is
statement
Deﬁnition. A veriﬁable
a 3-tuple
[P, M, A(M)P] where P is the principal that said message
M, and A(M)P is an authentication token that can be
used by the Authority Manager OS service to verify P
said M. In ABLP, this tuple represents the statement “P
says M.”
In order to operate without requiring slow public-key
cryptographic operations, we have two main choices. We
could adopt some sort of central registry of statements,
perhaps managed inside the kernel. This would require a
context switch every time a new statement is made, and
it would also require the kernel to store these statements
in a cache with some sort of timeout strategy to avoid a
memory use explosion.
The alternative is to adopt a symmetric-key cryp-
tographic mechanism, such as message authentication
codes (MAC). MAC functions, like HMAC-SHA1, run
several orders of magnitude faster than digital signature
functions like DSA, but MAC functions require a shared
key between the generator and veriﬁer of a MAC. To
avoid an N2 key explosion, we must have every appli-
cation share a key with a central, trusted authority man-
ager. As such, any app can produce a statement “App
says M”, purely by computing a MAC with its secret
key. However, for a second app to verify it, it must send
the statement to the authority manager. If the authority
manager says the MAC is valid, then the second app will
believe the veracity of the statement.
There are two beneﬁts of the MAC design over the
kernel statement registry. First, it requires no context
switches when statements are generated. Context switch-
ing is only necessary when a statement is veriﬁed, which
we expect to happen far less often. Second, the MAC
design requires no kernel-level caching strategy. Instead,
signed statements are just another element in the mar-
shaled data being passed via IPC. The memory used for
them will be reclaimed whenever the rest of the message
buﬀer is reclaimed. Consequently, there is no risk that
an older MAC statement will become unveriﬁable due to
cache eviction.
2.4 RPC attestations
When moving from on-device IPCs to Internet RPCs,
some of the properties that we rely on to secure on-device
communication disappear. Most notably, the receiver of
a call can no longer open a channel to talk to the author-
ity manager, even if they did trust it1. To combat this,
Quire’s design requires an additional “network provider”
system service, which can speak over the network, on be-
half of statements made on the phone. This will require it
to speak with a cryptographic secret that is not available
to any applications on the system.
One method for getting such a secret key is to have
the phone manufacturer embed a signed X.509 certiﬁ-
cate, along with the corresponding private key, in trusted
storage which is only accessible to the OS kernel. This
certiﬁcate can be used to establish a client-authenticated
TLS connection to a remote service, with the remote
server using the presence of the client certiﬁcate, as en-
dorsed by a trusted certiﬁcation authority, to provide con-
ﬁdence that it is really communicating with the Quire
phone’s operating system, rather than an application at-
tempting to impersonate the OS. With this attestation-
carrying encrypted channel in place, RPCs can then carry
a serialized form of the same statements passed along in
Quire IPCs, including both call chains and signed state-
ments, with the network provider trusted to speak on be-
half of the activity inside the phone.
All of this can be transmitted in a variety of ways,
such as a new HTTP header. Regular Quire applica-
tions would be able to speak through this channel, but
the new HTTP headers, with their security-relevant con-
1Like it or not, with NATs, ﬁrewalls, and other such impediments
to bi-directional connectivity, we can only reliably assume that a phone
can make outbound TCP connections, not receive inbound ones.
textual information, would not be accessible to or forge-
able by the applications making RPCs. (Quire RPCs are
analogous to the HTTP origin header [2], generated by
modern web browsers, but Quire RPCs carry the full call
chain as well as any MAC statements, giving signiﬁcant
additional context to the RPC server.)
The strength of this security context information is
limited by the ability of the device and the OS to pro-
tect the key material.
If a malicious application can
extract the private key, then it would be able to send
messages with arbitrary claims about the provenance of
the request. This leads us inevitably to techniques from
the ﬁeld of trusted platform measurement (TPM), where
stored cryptographic key material is rendered unavailable
unless the kernel was properly validated when it booted.
TPM chips are common in many of today’s laptops and
could well be installed in future smartphones.
Even without TPM hardware, Android phones gen-
erally prohibit applications from running with full root
privileges, allowing the kernel to protect its data from
malicious apps. Of course, there may well always be se-
curity vulnerabilities in trusted applications. These could
be exploited by malicious apps to amplify their privi-
leges; they’re also exploited by tools that allow users
to “root” their phones, typically to work around carrier-
instituted restrictions such as forbidding phones from
freely relaying cellular data services as WiFi hotspots.
Once a user has “rooted” an Android phone, apps can
then request “super user” privileges, which if granted
would allow the generation of arbitrary signed state-
ments.
While this is far from ideal, we note that Google and
other Android vendors are already strongly incentivized
to ﬁx these security holes, and that most users will never
go to the trouble of rooting their phones. Consequently,
an RPC server can treat the additional context informa-
tion provided by Quire as a useful signal for fraud pre-
vention, but other server-side mechanisms (e.g., anomaly
detection) will remain a valuable part of any overall de-
sign.
Privacy. An interesting concern arises with our design:
Every RPC call made from Quire uses the unique pub-
lic key assigned to that phone. Presumably, the public
key certiﬁcate would contain a variety of identifying in-
formation, thus making every RPC personally identify
the owner of the phone. This may well be desirable
in some circumstances, notably allowing web services
with Android applications acting as frontends to com-
pletely eliminate any need for username/password di-
alogs. However, it’s clearly undesirable in other cases.
To address this very issue, the Trusted Computing Group
has designed what it calls “direct anonymous attesta-
tion”2, using cryptographic group signatures to allow the
caller to prove that it knows one of a large group of re-
lated private keys without saying anything about which
one [8]. This will make it impossible to correlate multi-
ple connections from the same phone. A production im-
plementation of Quire could certainly switch from TLS
client-auth to some form of anonymous attestation with-
out a signiﬁcant performance impact.
An interesting challenge, for future work, is being able
to switch from anonymous attestation, in the default case,
to classical client-authentication, in cases where it might
be desirable. One notable challenge of this would be
working around users who will click aﬃrmatively on any
“okay / cancel” dialog that’s presented to them without
ever bothering to read it. Perhaps this could be ﬁnessed
with an Android privilege that is requested at the time
an application is installed. Unprivileged apps can only
make anonymous attestations, while more trusted apps
can make attestations that uniquely identify the speciﬁc
user/phone.
2.5 Drawbacks and circumvention
The design of Quire makes no attempt to prevent a mali-
cious deputy from circumventing the security constructs
introduced in Quire. For example a malicious attacker
could create two collaborating applications, one with in-
ternet permission and one with GPS permission, to cir-
cumvent Chinese Wall-style policies [5] that might re-
quire that the GPS provider never deliver GPS informa-
tion to an app with internet permission. Such malicious
interactions can be detected and averted by systems like
TaintDroid [13] and XManDroid [6]. We are primarily
concerned with preventing benign applications from act-
ing as confused deputies while still enabling apps to ex-
ercise their full permission sets as intentional deputies
when needed.
3
Implementation
Quire is implemented as a set of extensions to the exist-
ing Android Java runtime libraries and Binder IPC sys-
tem. The authority manager and network provider are
trusted components and therefore implemented as OS
level services while our modiﬁed Android interface def-
inition language code generator provides IPC stub code
that allows applications to propagate and adopt an IPC
call-stack. The result, which is implemented in around
1300 lines of Java and C++ code, is an extension to
the existing Android OS that provides locally veriﬁ-
able statements, IPC provenance, and authenticated RPC
2http://www.zurich.ibm.com/security/daa/
for Quire-aware applications and backward compatibil-
ity for existing Android applications.
3.1 On- and oﬀ-phone principals
The Android architecture sandboxes applications such
that apps from diﬀerent sources run as diﬀerent Unix
users. Standard Android features also allow us to resolve
user-ids into human-readable names and permission sets,
based on the applications’ origins. Based on these fea-
tures, the prototype Quire implementation deﬁnes prin-
cipals as the tuple of a user-id and process-id. We include
the process-id component to allow the recipient of an IPC
method call to stipulate policies that force the process-id
of a communication partner to remain unchanged across
a series of calls. (This feature is largely ignored in the
applications we have implemented for testing and evalu-
ation purposes, but it might be useful later.)
While principals deﬁned by user-id/process-id tuples
are suﬃcient for the identiﬁcation of an application on
the phone, they are meaningless to a remote service.
However, the Android system requires all applications
to be signed by their developers. The public key used
for signing the application can be used as part of the
identity of the application. Quire therefore resolves the
user-id/process-id tuples used in IPC call-chains into an
externally meaningful string consisting of the marshaled
chain of application names and public keys when RPC
communication is invoked to move data oﬀ the phone.
This lazy resolution of IPC principals allows Quire to re-
duce the memory footprint of statements when perform-
ing IPC calls at the cost of extra eﬀort when RPCs are
performed.