stores and manages the database to be protected against in-
sider attacks. The ADE stores the application program pro-
ﬁle and performs the anomaly detection task. The Query
Interceptor intercepts the query, before it is sent to the T-
DBMS, and forwards it to the ADE for anomaly detection.
The Response Router checks the response policies in order
to take appropriate response to anomalies detected by the
ADE. Note that this architecture is designed so that no re-
strictions are imposed on the T-DBMS as a result of adding
the anomaly detection functionality since the T-DBMS al-
ways receives SQL queries and responds with their result set
which is the normal operation of a DBMS.
3.2 Phases of Operation
The proposed system operates in two phases: Proﬁle-
Creation phase and Detection phase. Details on each phase
are given in what follows.
3.2.1 Proﬁle-Creation phase
In this phase, the binary of the application program is
given as input to a proﬁler that analyzes the program stat-
ically. The proﬁler ﬁrst ﬁnds statements in the program
that issue SQL queries to the DBMS. It then computes the
combined backward data slices of the variables used to com-
pose the query strings. The result of this operation is a
sub-program of the original one for which the proﬁler con-
structs and outputs a variation of the Symbolic Execution
Tree which we refer to as Extended Symbolic Execution
Figure 2: Example
Figure 3: Detection Algorithm
            Static Analysis of the program – Profile-Creation Phase     Anomaly Detection Engine Program Binary (P) Profiler Modified Program Binary (P*) Extended Symbolic Execution Tree of P Query Interceptor Application Program (P*) Query Query Response Response Router T-DBMS Query Result Alert Query Input Concretization of E-SET of P* Query Result  0. 1. 2. 3. 4. 5. 6. 7. 8. 9.  10. 11.     input char: x     input integer: y                            1.1 Send input to ADE      q1 = “SELECT salary FROM employees WHERE id = ” + y      send q1 to the DBMS      salary  = extract salary from resultset of q1      if (salary > 1000)          salary = salary + 200     else          salary = salary * 1.2     q2 = “UPDATE employees SET salary = ” + salary                                             + “WHERE id = ” + y ;          send q2 to the DBMS      ….           1. y = sym_y 2. q1 = “SELECT salary FROM employees WHERE id = ” + sym_y 3. send q1 to DBMS 4. salary = sym_z ** 5. salary = sym_z + 200 PC = sym_z = 1000 7. q2 = UPDATE employees SET salary = ” + salary + “WHERE id = ” + (sym_z + 200) ; 9. send q2 to DBMS 10. send q2 to DBMS 8. q2 = UPDATE employees SET salary = ” + salary + “WHERE id = ” + (sym_z * 1.2) ;  Algorithm of Detection phase                  1. 2. 3.  4.  5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. Monitor () {     if (currNode.type == ‘Wait-For-Query’) {         Expected = ‘Q’;          ExpectedQuery                   = getExpectedQueryString(currNode);         Wait();     } else if (currNode.type == ‘Wait-For-Input’) {         Expected = ‘I’         Wait();         Save received input to correct variables;      } else if (currNode.type == ‘Computation’) {         Perform Computations in currNode;     }     currNode = currNode.next;     Monitor(); } 1. 2. 3.  4. 5. 6. 7. 8. 9. 10. 11. Signal() {     if (Expected == ‘Q’ && receivedType = ‘Q’) {         if(ExpectedQuery == receivedQuery) {             return BENIGN;         }     } else if (Expected == ‘I’ && receivedType = ‘I’) {         Use received as input;         return BENIGN;     }      RAISE ANOMALY; } 1494Tree (E-SET). The proﬁler also instruments the program
by adding statements to send input values to the ADE; the
result is a modiﬁed version of the program which will be
used in production instead of the original.
Unlike the normal Symbolic Execution Tree, the E-SET
diﬀerentiates between three types of nodes: Computation,
Wait-For-Query, and Wait-For-Input nodes. “Computation”
nodes are nodes that contain expressions for variables in the
program as functions of inputs. “Wait-For-Query” nodes in-
dicate locations in the execution paths of the application
program where input should be provided by the user. “Wait-
For-Input” nodes are locations where the program sends
queries to the DBMS. Figure 2 shows an example program,
and its corresponding E-SET and instrumentation. During
Proﬁle-Creation, Statements 3 and 10 are identiﬁed by the
proﬁler to be accessing the DBMS. The proﬁler then com-
putes the backward data slices of the query strings: q1 and
q2. The resulting sub-program (P’) will contain all state-
ments except 0 and 11. Since Statement 1 has a user input,
a new statement (1.1) is added to P’ to compose program
P* that will be run by users.
3.2.2 Detection Phase / Concrete Execution of the
program
At program run-time, whenever the program opens a new
connection to the DBMS during a user session, the Query
Interceptor, which is listening on the communication line
between the DBMS and the program, notiﬁes the ADE of the
new connection. As a result, the ADE creates a new process
that would be responsible for any further communication
between the ADE and the Query Interceptor. Based on the
user-input and the E-SET of the program, the process will
know the path the program P* should follow and queries
expected to be issued by the program. This operation is
referred to as concretizing the Symbolic Execution Tree.
The ADE compares queries actually sent by the program
and those it generated as explained next.
The newly-created process runs the algorithms in Fig-
ure 3. It starts by setting the variable currNode to the root
node of the E-SET and then calls the function Monitor().
Monitor() checks the type of node currNode is pointing to. If
it is ‘Wait-For-Query’ or ‘Wait-For-Input’, the process sleeps
waiting for external input from either the Query Interceptor
or T-DBMS (lines 2:9). Otherwise (the node type should
be a ‘computation’), the process performs the computations
indicated in the node, moves currNode to the next node in
the tree and calls Monitor() again (lines 11, 13, 14).
The function Signal() is called when the process receives
It checks that the type of input it is
an external input.
expecting is the same as what it received (lines 2 and 6).
In case the process is waiting for a query, the query string
it is expecting is compared to the one it received too; if
they are similar, the process returns from Signal() (lines
2:5) and continues processing nodes. All other scenarios are
rejected and an anomaly is raised. Note that additional
synchronization between P* and the ADE process has to be
performed for the algorithm to work properly. For instance,
in case P* is done with a computation which has not yet
been ﬁnished by the ADE process, input can be sent to the
ADE process while it is not waiting for it; Signal() then
has to check that P* is ahead of it and choose to defer the
processing of the input accordingly.
3.3 Implementation
We have developed an initial solution based on tools which
perform Symbolic Execution of the program. JPF[5] and
CUTE[6] are well-known tools whose source codes are avail-
able for modiﬁcation.
An important implementation issue to mention is that the
program ﬂow and values of variables may depend on the re-
sult sets of SQL queries as in line 4 in the example code in
Figure 2. In our solution, we consider the result as input.
However, this approach is problematic if the result set of a
query is large and therefore needs long time to be processed.
One solution to this problem, that we are currently investi-
gating, is to instrument the program to directly send values
of some variables to the ADE so that the ADE does not need
to perform all the computation.
Another important issue concerns securing all the anomaly
detection system components, such as the ADE and the
Query Interceptor, as well as all the communications be-
tween these components and the T-DBMS and application
programs. Currently available security tools can be com-
bined and deployed to address this issue.
4. CONCLUSION
In this paper, we presented a system for protecting against
data exﬁltration attacks based on source-code modiﬁcation.
As part of future work, we will extend our system along
several directions. For example, as currently the system
only deals with desktop applications, we will investigate its
application to web-based ones. We also believe that the
technique described can be used for tracking user behaviour
at the OS level and therefore it can be used for collecting and
using data provenance. The idea of integrating the Proﬁle-
Creation phase with a testing technique that uses Symbolic
Execution of the program is also another direction of future
work.
5. REFERENCES
[1] E. Bertino. Data Protection from Insider Threats.
Synthesis Lectures on Data Management. Morgan and
Claypool Publishers, 2012.
[2] E. Bertino and G. Ghinita. Towards mechanisms for
detection and prevention of data exﬁltration by insiders:
keynote talk paper. ASIACCS, pages 10–19, 2011.
[3] P. Godefroid, N. Klarlund, and K. Sen. Dart: Directed
automated random testing. PLDI, 2005.
[4] A. Kamra, E. Terzi, and E. Bertino. Detecting
anomalous access patterns in relational databases.
VLDB, 2008.
[5] C. S. Pasareanu, W. Visse, D. Bushnell, J. Geldenhuys,
P. Mehlitz, and N. Rungta. Symbolic pathﬁnder:
Integrating symbolic execution with model checking for
java bytecode analysis. ASE, 2010.
[6] K. Sen, D. Marinov, and G. Agha. Cute: A concolic
unit testing engine for c. ESEC-FSE, 2005.
1495