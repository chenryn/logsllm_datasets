1 = t′′
The prover xor’s the single bit message with a single bit of gp
and sends it back as a sound message. The veriﬁer receives the
sound message at time t2. As described above the veriﬁer uses the
time difference t2 − t1 to calculate the (upper bound) distance to
the prover. The distance is calculated as d = vs(t2 − t1), where
vs is the speed of sound in meat (approximately 1500m/s). If this
distance is less than some predeﬁned value, say, 5cm the protocol
continues, otherwise the veriﬁer will terminate the session. After
all the bits of Nv and Nv ⊕gp have been exchanged, and passed the
time-veriﬁcation, the message is accepted and the DH contribution
is assumed to originate from a very close reader.
After the prover has veriﬁed that the reader is within the required
distance, the veriﬁer picks v and computes gv. A similar distance
bounding step, i.e., a rapid bit exchange with radio challenges and
response via the sound channel, is then repeated from the veriﬁer
to the prover to ensure that the reader is talking to a device in it’s
proximity. This is needed to prevent a (possibly far away) attacker
from impersonating a device.
Finally, in order to let the device know that a key was success-
fully established, the prover sends a ﬁnal message to the veriﬁer
containing a message authentication code (MAC) of the two nonces
Np and Nv. At this point, the veriﬁer knows that a key has been
established and data transfer can continue encrypted.
3.2 Security Analysis
Central to our device pairing protocol is the unforgeable assur-
ance of proximity. That assurance comes from tying the DH key
contributions from each party to the distance between them, by
transmitting gv and gp over the sound channel. In this section we
will go through the protocols resilience to attacks from outside the
security range. Note that since there is no notion of identity in this
protocol the reader is considered authorized if it is within a speci-
ﬁed distance, thus the attackers we are looking at here are attacking
from further away. We further assume that the attacker cannot send
data on the sound channel faster than the speed of sound1.
One possible attack is for the attacker to guess Nv and then gen-
erate the sound messages in advance. If the attacker is able to gen-
erate all the sound messages and send them at the appropriate times,
the attacker could pretend to be close to the veriﬁer while actually
being far away. That means that the nonce Nv must be sufﬁciently
random to make guessing infeasible.
The nonce Nv is sent in the clear since it is the timing of the
sound message that proves the proximity of the reader. An attacker
who is further away than the allowed distance will receive the nonce
at more or less the same time (the propagation time of radio signals
is negligible when compared to the speed of sound) but, because
he has to wait for Nv before he can create a valid sound message,
his sound message will not be able to reach the prover in time, i.e.,
the prover will be able to measure the distance to the attacker and
conclude that he is too far away.
A similar distance bounding step is repeated in the opposite di-
rection. This proves to the reader that the IMD is also within the
speciﬁed distance, eliminating impersonation attacks. Since the
two DH contributions are sent over the sound channel they are di-
rectly linked to the distance between the reader and IMD, which
also makes the key k = gvp directly linked to the distance as well.
In order to limit the effectiveness of battery draining attacks the
IMD only generates its public DH contribution after the distance to
the reader has been veriﬁed. That way only the initial nonce must
be generated at the start of each session.
The ﬁnal message from the prover to the veriﬁer conﬁrms the
key. After executing this protocol the veriﬁer knows that a valid
key has been generated with a prover and that this prover is within
the allowed distance. At this point the veriﬁer can start transmit-
ting data using the generated key k or send another message to the
prover conﬁrming the key.
3.3 Side Channel Attack Protection
One of the most important assumptions in our security analy-
sis is that the attacker cannot send data on the sound channel with
a signal that propagates faster than the speed of sound. This is a
common assumption and it is made in most, if not all, the sonic
and ultrasonic distance bounding protocols in the literature, includ-
ing [16, 27, 3, 19].
While this assumption sounds perfectly reasonable there are pit-
falls that an attacker might utilize. While ﬁne tuning our imple-
1In Section 3.3 we discuss some interesting and novel ways a pow-
erful attacker might be able to get around this assumption.
412/
/
o
o
/
/
/
o
/
o
/
o
/
o
/
o
/
o
/
o
o
o
/
o
/
o
/
o
/
o
/
o
/
/
/
which is about three times the speed through air. Because IMDs are
implanted inside human tissue we have to assume a speed of sound
of 1500m/s when deﬁning the maximum distance from which
the device can be accessed. Any distance the signal has to travel
through air to get to the reader will be counted three times because
the signal travels three times slower. That means that any addi-
tional distance to an attacker outside the allowed access radius is
ampliﬁed thus making it even harder to cheat the system.
4. PROTOCOL EXTENSIONS
In this section we will present several extensions to our proxim-
ity aware device pairing protocol.
4.1 Combining Proximity and Credential-Based
Solutions
As we describe in more detail in Section 6, it is very likely that
patients will be provided some form of credential (a smart card,
USB stick or password) that shares a secret with the implanted
medical device. This credential would be used by the doctor to
actually get access the IMD when necessary.
This solution is actually quite attractive since it solves the au-
thorization and authentication issues. In fact, by physically giving
the credential to the doctor, the patient is explicitly authorizing the
doctor to get access to his IMD. Furthermore since the credential
shares a secret with the IMD, it can be used by the reader to get
access to the IMD (access control) and bootstrap a key that is used
to securely exchange data. A patient might feel safer if the security
of his IMD is based on some secret credential in his possession,
rather than on a proximity-based solution.
However the credential-based approach has several drawbacks
that our scheme can help solve. First, if the credential gets stolen or
duplicated, any attacker can get remote access to the IMD. Second,
the doctor does not have the insurance that his reader is actually
communicating with the patient’s IMD. In fact, nothing prevents
the patient from borrowing the credential of a friend and have the
doctor’s reader communicate with the friend’s IMD, who is sitting
next door. This attack could be, for example, used for Medicare or
insurance fraud purposes. Third, if the patient does not carry his
credential, no one can access the IMD even in case of emergency.
This is clearly not acceptable since this can put the patient’s life in
danger.
We believe that our scheme can nicely complement the credential-
based solutions to solve these three issues. We consider two modes
of operation. In the normal mode of operation, the patient carries
the credential token and provides it to the doctor that needs to ac-
cess the IMD. In the emergency mode of operation, the doctor does
not have access to the credential token, either because the patient
has lost/forgotten it or the token is out of order.
Normal Mode of Operation
The patient carries an authorization credential token (USB token,
smart card, password, etc.) that shares a secret key kshared with
the IMD. When a doctor needs to access the IMD, he gets the cre-
dential from the patient and provides it to the reader. The same
proximity aware device pairing protocol shown in Figure 1 is run
between the reader and the IMD except the shared key kshared is
included in the MAC in the ﬁnal message. Once the protocol has
been executed, each party has the assurance that the other party is
within its security range and has derived a key k that is used to
secure their future communication.
By verifying that the IMD is in the proximity of the reader, the
doctor has the assurance that his reader is communicating with the
patient’s IMD.
Figure 2: The propagation times and processing delays in-
volved in an ultrasonic distance bounding challenge-response.
(Not to scale). Tr is the propagation time of the radio signal, δp
is the prover’s processing delay and Ts is the propagation time
of the sound signal.
mentation we found that it is possible to send a radio signal to the
IMD that will induce a current in the audio receiver circuit just as
if the IMD received a sound signal. This was possible even though
the prototype was not designed to receive RF at all, just the fact that
there where two small wires going from the reception circuit to the
piezo element (working as a microphone) was enough to pick up
a radio signal of about the same order of magnitude as the audio
transmission.
The only countermeasure to this is effective RF shielding. This
is arguably an engineering problem but one that is very easily over-
looked. If proper shielding is not in place, a strong attacker can
effectively send an ‘audio’ transmission at the speed of light!
3.4 Propagation Time and Processing Delay
In the description of the protocol we state that the propagation
time of the radio signal and the delay at the prover is negligible.
More precisely we claim that t1 = t′
1 . In this section we will
show that the error resulting from this assumption makes little to
no practical difference.
1 = t′′
The potential time-error sources are shown in Figure 2. Our
above mentioned assumption corresponds to the following two as-
sumptions Tr = 0 and δp ≪ Ts and allows the veriﬁer to compute
an upper bound on the distance to the prover as dvp = Ttotal · vs,
where vs is the speed of sound in meat. We will look at the two
assumptions one at a time.
The true value of Tr is dvp · c where c is the speed of light. For
a distance of 30m (which is about 100 times the intended opera-
tion distance of the protocol) the true value of Tr is 0.1µs with
corresponds to an error in the distance measurement of 34µm (as-
suming a speed of sound 340m/s). That is way below the distance
granularity of our measurement setup and we therefore consider it
irrelevant.
The delay at the prover δp is the time it takes from the prover
receives the ﬁrst bit of the radio signal until the ﬁrst bit of the ul-
trasound signal is in the air. The actual delay will vary depending
on the speed of the prover’s hardware and the details of the im-
plementation. δp measurements from our setup are described in
Section 5.2; using the average delay we have that δp = 412ns.
This delay corresponds to an error in the distance measurement of
140µm (assuming a speed of sound 340m/s). This error is also
way below our distance granularity.
There is one ﬁnal important point regarding timing. The speed
of sound is higher when the sound propagates through the human
body than when the sound propagates through air. According to [18]
the speed of sound through the human body is approximately 1500m/s
413P (Reader)
V (Device)
Pick Np
hello-cc
Pick Nv
— Start rapid bit exchange —
(t′
1)
(t′′
1 )
Nv
Nv ⊕Np
(t1)
(t2)
— End rapid bit exchange —
cmdkMACk(cmd,Nv ,Np)
Verify t2 − t1
Verify MACk(cmd, Nv, Np)
Figure 4: Message proximity veriﬁcation. With this protocol
the veriﬁer V can verify that the command cmd came from the
distance deﬁned by t2 − t1, or closer.
The second type of operation is clearly more critical and requires
stronger security, since it can potentially threaten the life of the pa-
tient. The ﬁrst type would only violate privacy if performed by a
non-authorized user. It is therefore reasonable to apply different
security policies for each of these operations. We propose that as
long as the implanted medical device is in the normal mode of op-
eration, critical commands are only processed if issued by a reader
that is in its proximity as shown in Figure 3.
This proposal authorizes remote monitoring of an IMD via a se-
cured channel but excludes remote reconﬁguration of an IMD. We
believe this is a reasonable approach and provides an acceptable
security/usability trade-off.
In order to verify the proximity of the reader when it sends a
command we propose the command proximity veriﬁcation proto-
col, illustrated in Figure 4. It is assumed that the reader and the
IMD share a secret key, k, i.e., that both devices have been securely
paired already.
When a reader wants to send a critical command to an IMD, it
starts by sending a ’hello-cc’ to initiate the protocol. The IMD
picks a nonce Nv and replies with the ﬁrst bit of Nv. The IMD
also starts a timer so the time-of-ﬂight of the sound message can
be measured. The reader responds immediately with a single bit
of its own nonce xor’ed with Nv and this continues until there are
no more bits in the nonces, or until the IMD aborts the protocol
because the estimated distance is outside the security range.
Once the distance bounding phase of the protocol is over the
reader sends the command cmd along with a MAC of the command
and the nonces. If the IMD is able to verify the MAC it knows that
cmd came from within the security distance and will process the
command.
Although it is assumed in the proximity-based command proto-
col that the two devices share a secret key, this protocol could still
be useful in scenarios where the only policy for being able to issue
command is to be close the device. The modiﬁcation to the proto-
col would then be to replace the MAC function with a regular hash
function. The security would, of course, be lower but could still be
acceptable for some applications.
Figure 3: Security Regions. Different types of operations have
different security requirements, and therefore security regions.
Critical operations, such as IMD reconﬁguration, should use
a small security region. Monitoring operations, with are not
life threatening can use a larger security region, in order to
improve usability.
Note that since, in this mode of operation, the IMD and the
reader share a secret, the Difﬁe-Hellman key exchange could eas-
ily be avoided if necessary. In fact, both parties could derive a key
k from the shared secret kshared and the exchanged nonces. How-
ever, the ephemeral Difﬁe-Hellman key exchange protocol provides
forward security, which can be a valuable property.
Emergency Mode of Operation
In this mode of operation, it is assumed that the authorization token