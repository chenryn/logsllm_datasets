listFirst
listLength
口通过为链表设置不同的类型特定函数，
口
0 4
口
表实现是无环链表。
因为链表表头节点的前置节点和表尾节点的后置节点都指向 NULL，所以 Redis 的链
以及链表长度等信息。
每个链表使用一个 1ist 结构来表示，这个结构带有表头节点指针、表尾节点指针
置节点的指针，所以 Redis 的链表实现是双端链表。
每个链表节点由一个 listNode 结构来表示，每个节点都有一个指向前置节点和后
器等。
链表被广泛用于实现 Redis 的各种功能，比如列表键、发布与订阅、慢查询、监视
重点回顾
函数
点插人到链表的表头，成为新的表头节点
的之前或者之后
将一个包含给定值的新节点添加到给定节点
的表尾
将一个包含给定值的新节点添加到给定链表
的表头
释放给定链表，以及链表中的所有节点
复制一个给定链表的副本
将链表的表尾节点弹出，然后将被弹出的节
从链表中删除给定节点
返回链表在给定索引上的节点
查找并返回链表中包含给定值的节点
将一个包含给定值的新节点添加到给定链表
创建一个不包含任何节点的新链表
返回给定节点目前正在保存的值
返回给定节点的后置节点
返回给定节点的前置节点
返回链表的表尾节点
返回链表的表头节点
返回链表的长度（包含了多少个节点）
作用
Redis 的链表可以用于保存各种不同类型的值。
属性直接获得，0(1)
属性直接获得，0(1)
属性直接获得，O(1)
属性直接获得，0(1)
属性直接获得，O(1)
属性直接获得，O(1)
O(M)，N为链表长度
O(M),N 为链表长度
O(N),N为链表长度
O(M)，N 为链表长度
O(N)，N为链表长度
0(1)
0(1)
节点值可以通过节点的value
后置节点可以通过节点的 next
前置节点可以通过节点的 prev
表尾节点可以通过链表的tail
表头节点可以通过链表的 head
0(1)
0(1)
0(1)
链表长度可以通过链表的len
时间复杂度
（续）
---
## Page 27
数据库的名字，而键的值就是数据库的主页网址：
的底层实现。
对比较多，又或者键值对中的元素都是比较长的字符串时，Redis 就会使用字典作为哈希键
是保存在代表数据库的字典里面的。
对数据库的增、删、查、改操作也是构建在对字典的操作之上的。
没有内置这种数据结构，因此 Redis 构建了自己的字典实现。
过键来更新值，又或者根据键来删除整个键值对，等等。
这些关联的键和值就称为键值对。
一种用于保存键值对（key-value pair）的抽象数据结构。
举个例子，
在字典中，一个键（key）可以和一个值（value）进行关联（或者说将键映射为值),
除了用来表示数据库之外，字典还是哈希键的底层实现之一，当一个哈希键包含的键值
字典在 Redis 中的应用相当广泛，比如 Redis 的数据库就是使用字典来作为底层实现的
字典经常作为一种数据结构内置在很多高级编程语言里面，但 Redis所使用的C语言并
字典中的每个键都是独一无二的，程序可以在字典中根据键查找与之关联的值，或者通
在数据库中创建一个键为"msg"，值为"helloworld"的键值对时，这个键值对就
举个例子，当我们执行命令：
字典，又称为符号表（symbol table）、关联数组（associative array）或映射（map），是
1)"Redis"
redis> HGETALL website
(integer) 10086
redis> HLEN website
redis> SET msg "hello world"
website是一个包含10086个键值对的哈希键，这个哈希键的键都是一些
第4章
典
---
## Page 28
24·第一部分数据结构与对象
4.1.1哈希表
个哈希表节点就保存了字典中的一个键值对。
4.1字典的实现
不会对字典的基本定义和基础算法进行介绍，如果有需要的话，可以参考以下这些资料：
会不断地看到字典在 Redis 中的各种不同应用。
接下来的三个小节将分别介绍 Redis 的哈希表、哈希表节点以及字典的实现。
Redis 的字典使用哈希表作为底层实现，
本章接下来的内容将对 Redis 的字典实现进行详细介绍，并列出字典的操作 API。本章
table 属性是一个数组，数组中的每个元素都是一个指向 dict.h/dictEntry结构
typedef struct dictht {
Redis字典所使用的哈希表由 dict.h/dictht 结构定义:
《算法导论（第三版)》一书的第11章。
《算法：C语言实现（第1～4部分）》一书的第14章。
 维基百科的 Associative Array 词条（ http://en.wikipedia.org/wiki/Associative_array
除了用来实现数据库和哈希键之外，Redis 的不少功能也用到了字典，在后续的章节中
）dictht;
键值对的键为"MariaDB"，值为"MariaDB.org";
 键值对的键为"Redis"，值为“Redis.io"。
website 键的底层实现就是一个字典，字典中包含了10086个键值对，例如：
6) "MongoDB.org"
3)"MariaDB"
2)"Redis.io"
和 Hash Table 词条 ( http://en.wikipedia.org/wiki/Hash_table ）)。
S
unsigned long used;
//该哈希表已有节点的数量
unsigned long sizemask;
unsigned long size;
1/哈希表大小
dictEntry **table;
/！哈希表数组
一个哈希表里面可以有多个哈希表节点，而每
---
## Page 29
接在一起。
连接在一次，以此来解决键冲突（collision）的问题。
以是一个指针，或者是一个uint64_t整数，又或者是一个int64_t整数。
4.1.2
（没有包含任何键值对）。
table 数组的哪个索引上面。
个属性和哈希值一起决定一个键应该被放到
sizemask属性的值总是等于size-l，这
了哈希表目前已有节点（键值对）的数量。
是table 数组的大小，而 used 属性则记录
的指针，每个 dictEntry 结构保存着一个键值对。size 属性记录了哈希表的大小，也即
举个例子，图 4-2 就展示了如何通过 next 指针，将两个索引值相同的键 k1和 k0 连
next 属性是指向另一个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对
图4-1展示了一个大小为4 的空哈希表
key属性保存着键值对中的键，
哈希表节点使用dictEntry结构表示，每个 dictEntry结构都保存着一个键值对：
dictEntry;
typedef struct dictEntry {
sizemask
table
dictht
哈希表节点
used
size
struct dictEntry *next;
/！指向下个哈希表节点，形成链表
unionf
1/值
void *key;
11键
3
int64_ts64;
uint64_tu64;
void *val;
dictEntry*[4]
图 4-2连接在一起的键 K1 和键 KO
，而属性则保存着键值对中的值，其中键值对的值可
+
￥
NULL
dictEntry
NULL
NULL
v1
 sizemask
table
dictht
used
size
next
图4-1一个空的哈希表
dictEntry
k0
dictEntry*[4]
2
0
next  NULL
第 4 章
字
TINN 
→NULL
—→→ NULL
典·25
---
## Page 30
26·第一部分数据结构与对象
rehash 目前的进度，如果目前没有在进行rehash，那么它的值为-1。
4.1.3字典
除了ht[1］之外，另一个和rehash有关的属性就是rehashidx，它记录了
，字典只使用 ht［[0］ 哈希表，ht[1］哈希表只会在对 ht[0］哈希表进行 rehash 时使用。
ht 属性是一个包含两个项的数组，数组中的每个项都是一个 dictht 哈希表，一般情况
口 而 privdata 属性则保存了需要传给那些类型特定函数的可选参数。
type 属性是一个指向 dictType 结构的指针，每个 dictType 结构保存了一簇用
type 属性和 privdata 属性是针对不同类型的键值对，为创建多态字典而设置的：
typedef struct dict {
Redis中的字典由 dict.h/dict结构表示：
I dictType;
typedef struct dictType {
dict;
于操作特定类型键值对的函数，Redis 会为用途不同的字典设置不同的类型特定函数。
void (*valDestructor) (void *privdata, void *obj);
// 销毁值的函数 
void (*keyDestructor) (void *privdata, void *key);
//销毁键的函数
int (*keyCompare) (void *privdata, const void *keyl, const void *key2):
1/对比键的函数
yoid *(*valDup) (void *privdata, const void *obj);
// 复制值的函数
//复制键的函数
unsigned int (*hashFunction) (const void *key);
/1计算哈希值的函数
in trehashidx; /*rehashing not in progress'if rehashidx == -1 */ 
//rehash索引
dictht ht[2];
//哈希表
void *privdata;
1/私有数据
//类型特定函数
不在进行时，值为-1
---
## Page 31
典里面，那么程序会先使用语句：
索引值，然后再根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。
4.2
举个例子，对于图 4-4 所示的字典来说，如果我们要将一个键值对 k0 和v0 添加到字
index = hash & dict->ht[x].sizemask;
hash = dict->type->hashFunction(key) ;
#使用字典设置的哈希函数，计算键key 的哈希值
Redis计算哈希值和索引值的方法如下：
当要将一个新的键值对添加到字典里面时，程序需要先根据键值对的键计算出哈希值和
图4-3展示了一
哈希算法
rehashidx
 privdata
ht
t ype
dict
-1
rehashidx
 privdata
ht
type
dict
ht[1】
-个普通状态下（没有进行 rehash）的字典。
ht[0]
Kht[1]
ht[0],
sizemask
 sizemask
table
dictht
table
dictht
used
size
used
size
图4-3普通状态下的字典
N
3
4
 sizemask
table
dictht
used
图4-4空字典
size
3
dictEntry*[4]
→NULL
dictEntry*[4]
3
k1
dictEntry
-→NULL
k0
dictEntry
NULL
v1
v0
NULL
NULL
NULL
第 4章 字 
→NULL
→NULL
典·27
---
## Page 32
28◆第一部分数据结构与对象
总是将新节点添加到链表的表头位置（复杂度为O(1)），排在其他已有节点的前面。
针将键k2 和k1 所在的节点连接起来，如图 4-7 所示。
得出 k2 的索引值为 2，那么键k1 和 k2 将产生冲突，而解决冲突的办法就是使用 next 指
引上的多个节点可以用这个单向链表连接起来，这就解决了键冲突的问题。
一个 next 指针，多个哈希表节点可以用 next 指针构成一个单向链表，被分配到同一个索
生了冲突（collision）。
4.3 
于MurmurHash算法的更多信息可以参考该算法的主页：http://code.google.com/p/smhasher/。
输人的键是有规律的，算法仍能给出一个很好的随机分布性，并且算法的计算速度也非常快。
算法来计算键的哈希值。
的索引0 位置上，如图4-5所示。