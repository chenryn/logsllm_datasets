 Fill-physical-first将线程连接到同一个槽位中的物理核，直到用尽所有物理核，然
后移动到下一个槽位。当所有物理核用尽时，该过程再次从超线程核开始。
 None禁用任何亲和配置，并让系统调度程序确定每个线程调度在哪个核上运行。
 lazy_load_chunk_directory=true
设置块目录模式，用于内存块查找。
Lazy模式将块目录设置为按需加载部分目录，从而减少初始内存占用（大约从1GB减
少到1MB）。然而，这可能会导致轻微的性能损失和极端情况下的内存损坏。相反，使用
non-lazy块目录会额外分配1GB的初始内存，产生略高的性能，并确保在内存损坏期间避
免块目录错误。
 reserve_memory_mode=virtual
设置内存预留模式（取值为physical或virtual）。
每当从内核分配内存时，都会参考此配置值来确定所分配的内存是常驻（physical）还
是非常驻（virtual）。这主要与预分配有关，但也可能影响运行时分配。对于physical保留
模式，通过强制内存区域所跨越的所有页出现页错误，使整个分配的内存区域常驻。配置
virtual内存预留可加速内存分配（特别是在预分配期间），但可能在初始访问期间出现页错
误（因此导致轻微的性能影响），并在物理内存不可用时出现更多服务器错误。相反，物理
内存分配速度较慢，但后续访问速度更快且有保障。
 store_memory_policy=compact
设置内存存储策略（取值为compact或expanding）。
当定义了compact策略时，未使用的内存会释放回内核，直到达到内存下限（请参见下
面的min_mot_memory）。在expanding策略中，未使用的内存存储在MOT引擎中，以便
后续再使用。compact存储策略可以减少MOT引擎的内存占用，但偶尔会导致性能轻微下
降。此外，在内存损坏时，它还可能导致内存不可用。相反，expanding模式会占用更多的
内存，但是会更快地分配内存，并且能够更好地保证在解分配后能够重新分配内存。
南大通用数据技术股份有限公司
458
GBase 8s V8.8开发者手册
 chunk_alloc_policy=auto
设置全局内存的块分配策略。
MOT内存以2MB的块为单位组织。源NUMA节点和每个块的内存布局会影响表数据
在NUMA节点间的分布，因此对数据访问时间有很大影响。在特定NUMA节点上分配块
时，会参考分配策略。
可用值包括auto、local、page-interleaved、chunk-interleaved、native。
 Auto策略根据当前硬件情况选择块分配策略。
 Local策略在各自的NUMA节点上分配每个数据块。
 Page-interleaved策略从所有NUMA节点分配由交插内存4千字节页组成的数据块。
 Chunk-interleaved策略以轮循调度方式从所有NUMA节点分配数据块。
 Native策略通过调用原生系统内存分配器来分配块。
 chunk_prealloc_worker_count=8
设置每个NUMA节点参与内存预分配的工作线程数。
 max_mot_global_memory=80%
设置MOT引擎全局内存的最大限制。
指定百分比值与postgresql.conf中max_process_memory定义的总量有关。
MOT引擎内存分为全局（长期）内存，主要用于存储用户数据，以及本地（短期）内
存，主要用于用户会话，以满足本地需求。
任何试图分配超出此限制的内存的尝试将被拒绝，并向用户报告错误。请确保
max_mot_global_memory 与 max_mot_local_memory 之和不超过 postgresql.conf 中配置的
max_process_memory。
 min_mot_global_memory=0MB
设置MOT引擎全局内存的最小限制。
指定百分比值与postgresql.conf中max_process_memory定义的总量有关。
此值用于启动期间的内存预分配，以及确保MOT引擎在正常运行期间有最小的内存可
用量。当使用compact存储策略时（参阅上文store_memory_policy），该值指定了下限，超
过下限的内存不会释放回内核，而是保留在MOT引擎中以便后续重用。
南大通用数据技术股份有限公司
459
GBase 8s V8.8开发者手册
 max_mot_local_memory=15%
设置MOT引擎本地内存的最大限制。
指定百分比值与postgresql.conf中max_process_memory定义的总量有关。
MOT引擎内存分为全局（长期）内存，主要用于存储用户数据，以及本地（短期）内
存，主要用于用户会话，以满足本地需求。
任何试图分配超出此限制的内存的尝试将被拒绝，并向用户报告错误。请确保
max_mot_global_memory 与 max_mot_local_memory 之和不超过 postgresql.conf 中配置的
max_process_memory。
 min_mot_local_memory=0MB
设置MOT引擎本地内存的最小限制。
指定百分比值与postgresql.conf中max_process_memory定义的总量有关。
此值用于在启动期间预分配内存，以及确保MOT引擎在正常运行期间有最小的可用内
存。当使用compact存储策略时（参阅上文store_memory_policy），该值指定了下限，超过
下限的内存不会释放回内核，而是保留在MOT引擎中以便后续重用。
 max_mot_session_memory=0MB
设置MOT引擎中单个会话的最大内存限制。
指定百分比值与postgresql.conf中max_process_memory定义的总量有关。
通常，MOT引擎中的会话可以根据需要分配尽可能多的本地内存，只要没有超出本地
内存限制即可。为了避免单个会话占用过多的内存，从而拒绝其他会话的内存，通过该配置
项限制小会话的本地内存分配（最大1022KB）。
请确保该配置项不影响大会话的本地内存分配。
0表示不会限制每个小会话的本地分配，除非是由max_mot_local_memory配置的本地
内存分配限制引起的。
 min_mot_session_memory=0MB
设置MOT引擎中单个会话的最小内存预留。
指定百分比值与postgresql.conf中max_process_memory定义的总量有关。
此值用于在会话创建期间预分配内存，以及确保会话有最小的可用内存量来执行其正常
操作。
南大通用数据技术股份有限公司
460
GBase 8s V8.8开发者手册
 session_large_buffer_store_size=0MB
设置会话的大缓冲区存储。
当用户会话执行需要大量内存的查询时（例如，使用许多行），大缓冲区存储用于增加
此类内存可用的确定级别，并更快地为这个内存请求提供服务。对于超过1022KB的会话，
任何内存分配都是大内存分配。如果未使用或耗尽了大缓冲区存储，则这些分配将被视为直
接从内核提供的巨大分配。
 session_large_buffer_store_max_object_size=0MB
设置会话的大分配缓冲区存储中的最大对象大小。
大缓冲区存储内部被划分为不同大小的对象。此值用于对源自大缓冲区存储的对象设置
上限，以及确定缓冲区存储内部划分为不同大小的对象。
此大小不能超过session_large_buffer_store_size的1/8。如果超过，则将其调整到最大可
能。
 session_max_huge_object_size=1GB
设置会话单个大内存分配的最大尺寸。
巨大分配直接从内核中提供，因此不能保证成功。
此值也适用于全局（非会话相关）内存分配。
垃圾收集（MOT）
 enable_gc=true
是否使用垃圾收集器（GarbageCollector，GC）。
 reclaim_threshold=512KB
设置垃圾收集器的内存阈值。
每个会话管理自己的待回收对象列表，并在事务提交时执行自己的垃圾回收。此值决定
了等待回收的对象的总内存阈值，超过该阈值，会话将触发垃圾回收。
一般来说，这里是在权衡未回收对象与垃圾收集频率。设置低值会使未回收的内存保持
在较少的水平，但会导致频繁的垃圾回收，从而影响性能。设置高值可以减少触发垃圾回收
的频率，但会导致未回收的内存过多。此设置取决于整体工作负载。
 reclaim_batch_size=15432
设置垃圾回收的批次大小。
南大通用数据技术股份有限公司
461
GBase 8s V8.8开发者手册
垃圾收集器从对象中批量回收内存，以便限制在一次垃圾收集传递中回收的对象数量。
此目的是最小化单个垃圾收集传递的操作时间。
 high_reclaim_threshold=8MB
设置垃圾回收的高内存阈值。
由于垃圾收集是批量工作的，因此会话可能有许多可以回收的对象，但这些对象不能回
收。在这种情况下，为了防止垃圾收集列表变得过于膨胀，尽管已经达到批处理大小限制，
此值继续单独回收对象，直到待回收对象小于该阈值，或者没有更多符合回收条件的对象。
JIT（MOT）
 enable_mot_codegen=true
指定是否对计划查询使用JIT查询编译和执行。
JIT查询执行为在计划阶段准备好的查询准备了JIT编译的代码。每当调用准备好的查
询时，都会执行生成的JIT编译函数。JIT编译通常以LLVM的形式进行。在原生不支持LLVM
的平台上，MOT提供了基于软件的回退（TinyVirtualMachine，TVM）。
 force_mot_pseudo_codegen=false
当前平台支持LLVM时，是否使用TVM（伪LLVM）。
在原生不支持LLVM的平台上，MOT自动默认为TVM。
在原生支持LLVM的平台上，默认使用LLVM。该配置项允许在支持LLVM的平台上
使用TVM进行JIT编译和执行。
 enable_mot_codegen_print=false
指定是否为JIT编译的查询打印发出的LLVM/TVMIR代码。
 mot_codegen_limit=100
限制每个用户会话允许的JIT查询数。
默认MOT.conf文件
最小设置和配置指定将postgresql.conf文件指向MOT.conf文件的位置：
postgresql.conf
mot_config_file='/tmp/gauss/MOT.conf'
确保max_process_memory设置的值足够包含MOT的全局（数据和索引）和本地（会
话）内存。
南大通用数据技术股份有限公司
462
GBase 8s V8.8开发者手册
MOT.conf的默认内容满足开始使用的需求。设置内容后续可以优化。
13.2.4 MOT 使用
使用MOT非常简单，以下几个小节将会进行描述。
GBase8s允许应用程序使用MOT和基于标准磁盘的表。MOT适用于最活跃、高竞争
和对吞吐量敏感的应用程序表，也可用于所有应用程序的表。
以下命令介绍如何创建MOT，以及如何将现有的基于磁盘的表转换为MOT，以加速应
用程序的数据库相关性能。MOT尤其有利于已证明是瓶颈的表。
工作流程概述
以下是与使用MOT相关的任务的简单概述：
本小节还介绍了如何执行各种与MOT相关的附加任务，以及MOTSQL覆盖和限制。
13.2.4.1 授予用户权限
以授予数据库用户对MOT存储引擎的访问权限为例。每个数据库用户仅执行一次，通
常在初始配置阶段完成。
MOT通过外部数据封装器（ForeignDataWrapper，FDW）机制与GBase8s数据库集成，
所以需要授权用户权限。
要使特定用户能够创建和访问MOT（DDL、DML、SELECT），以下语句只执行一次：
GRANTUSAGEONFOREIGNSERVERmot_serverTO;
所有关键字不区分大小写。
南大通用数据技术股份有限公司
463
GBase 8s V8.8开发者手册
13.2.4.2 创建/删除 MOT
创建MOT非常简单。只有MOT中的创建和删除表语句与GBase8s中基于磁盘的表的
语句不同。SELECT、DML和DDL的所有其他命令的语法对于MOT表和GBase8s基于磁
盘的表是一样的。
 创建MOT：
createFOREIGNtabletest(xint)[servermot_server];
 以上语句中：
 始终使用FOREIGN关键字引用MOT。
 在创建MOT表时，[servermot_server]部分是可选的，因为MOT是一个集成的引
擎，而不是一个独立的服务器。
 上文以创建一个名为test的内存表（表中有一个名为x的整数列）为例。在下一节
（创建索引）中将提供一个更现实的例子。
 如果postgresql.conf中开启了增量检查点，则无法创建MOT。因此请在创建MOT
前将enable_incremental_checkpoint设置为off。
 删除名为test的MOT：
dropFOREIGNtabletest;
有关MOT的功能限制（如数据类型），请参见MOTSQL覆盖和限制。
13.2.4.3 为 MOT 创建索引
支持标准的PostgreSQL创建和删除索引语句。
例如：
createindex text_index1ontest(x);
创建一个用于TPC-C的ORDER表，并创建索引：
createFOREIGNtablebmsql_oorder(
o_w_id integer notnull,
o_d_id integer notnull,
o_id integer notnull,
o_c_id integernotnull,
o_carrier_idinteger,
o_ol_cnt integer,
南大通用数据技术股份有限公司
464
GBase 8s V8.8开发者手册
o_all_local integer,
o_entry_d timestamp,
primarykey(o_w_id,o_d_id,o_id)
);
createindex bmsql_oorder_index1onbmsql_oorder(o_w_id,o_d_id,o_c_id,o_id);
在MOT名字之前不需要指定FOREIGN关键字，因为它仅用于创建和删除表的命令。
有关MOT索引限制，请参见MOTSQL覆盖和限制的索引部分内容。
13.2.4.4 将磁盘表转换为 MOT
磁盘表直接转换为MOT尚不能实现，这意味着尚不存在将基于磁盘的表转换为MOT
的ALTERTABLE语句。
下面介绍如何手动将基于磁盘的表转换为MOT，如何使用gs_dump工具导出数据，以
及如何使用gs_restore工具导入数据。
前置条件检查
检查待转换为MOT的磁盘表的模式是否包含所有需要的列。
检查架构是否包含任何不支持的列数据类型，具体参见MOTSQL覆盖和限制中的不支
持的数据类型。
如果不支持特定列，则建议首先创建一个更新了模式的备磁盘表。此模式与原始表相同，
只是所有不支持的类型都已转换为支持的类型。
使用以下脚本导出该备磁盘表，然后导入到MOT中。
转换
要将基于磁盘的表转换为MOT，请执行以下步骤：
(1) 暂停应用程序活动。
(2) 使用gs_dump工具将表数据转储到磁盘的物理文件中。请确保使用dataonly。
(3) 重命名原始基于磁盘的表。
(4) 创建同名同模式的MOT。请确保使用创建FOREIGN关键字指定该表为MOT。
(5) 使用gs_restore将磁盘文件的数据加载/恢复到数据库表中。
(6) 浏览或手动验证所有原始数据是否正确导入到新的MOT中。下面将举例说明。
南大通用数据技术股份有限公司
465
GBase 8s V8.8开发者手册
(7) 恢复应用程序活动。
由于表名称保持不变，应用程序查询和相关数据库存储过程将能够无缝访问新的MOT，
而无需更改代码。请注意，MOT目前不支持跨引擎多表查询（如使用Join、Union和
子查询）和跨引擎多表事务。因此，如果在多表查询、存储过程或事务中访问原始表，
则必须将所有相关的磁盘表转换为MOT，或者更改应用程序或数据库中的相关代码。
转换示例
假设要将数据库benchmarksql中一个基于磁盘的表customer迁移到MOT中。将customer
表迁移到MOT，操作步骤如下：
(1) 检查源表列类型。验证MOT支持所有类型，详情请参阅MOTSQL覆盖和限制中的不
支持的数据类型。
benchmarksql-#\d+customer
Table"public.customer"
Column| Type |Modifiers|Storage|Statstarget|Description
--------+---------+-----------+---------+--------------+-------------
x |integer| |plain | |
y |integer| |plain | |
HasOIDs:no
Options:orientation=row,compression=no
(2) 请检查源表数据。
benchmarksql=#select*fromcustomer;
x|y
---+---
1|2
3|4
(2rows)
(3) 只能使用gs_dump转储表数据。
$gs_dump-Fcbenchmarksql-a--tablecustomer-fcustomer.dump-p16000
gs_dump[port='15500'][benchmarksql][2020-06-0416:45:38]:dumpdatabasebenchmarksql
successfully
gs_dump[port='15500'][benchmarksql][2020-06-0416:45:38]:totaltime:332 ms
(4) 重命名源表。
benchmarksql=#altertablecustomerrenametocustomer_bk;
南大通用数据技术股份有限公司
466
GBase 8s V8.8开发者手册
ALTERTABLE
(5) 创建与源表完全相同的MOT。