title:One more bit is enough
author:Yong Xia and
Lakshminarayanan Subramanian and
Ion Stoica and
Shivkumar Kalyanaraman
One More Bit Is Enough
Yong Xia∗ Lakshminarayanan Subramanian+
Ion Stoica+ Shivkumar Kalyanaraman∗
∗ ECSE Department
Rensselaer Polytechnic Institute
{xiay@alum, shivkuma@ecse}.rpi.edu
ABSTRACT
Achieving eﬃcient and fair bandwidth allocation while min-
imizing packet loss in high bandwidth-delay product net-
works has long been a daunting challenge. Existing end-
to-end congestion control (e.g., TCP) and traditional con-
gestion notiﬁcation schemes (e.g., TCP+AQM/ECN) have
signiﬁcant limitations in achieving this goal. While the re-
cently proposed XCP protocol addresses this challenge, XCP
requires multiple bits to encode the congestion-related infor-
mation exchanged between routers and end-hosts. Unfortu-
nately, there is no space in the IP header for these bits,
and solving this problem involves a non-trivial and time-
consuming standardization process.
In this paper, we design and implement a simple, low-
complexity protocol, called Variable-structure congestion
Control Protocol (VCP), that leverages only the existing two
ECN bits for network congestion feedback, and yet achieves
comparable performance to XCP, i.e., high utilization, low
persistent queue length, negligible packet loss rate, and rea-
sonable fairness. On the downside, VCP converges signiﬁ-
cantly slower to a fair allocation than XCP. We evaluate the
performance of VCP using extensive ns2 simulations over a
wide range of network scenarios. To gain insight into the be-
havior of VCP, we analyze a simple ﬂuid model, and prove
a global stability result for the case of a single bottleneck
link shared by ﬂows with identical round-trip times.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Protocols
General Terms
Algorithms, Design, Experimentation, Performance, Theory
Keywords
Congestion Control, Protocol, TCP, AQM, ECN, XCP
1.
INTRODUCTION
The Additive-Increase-Multiplicative-Decrease (AIMD) [10]
congestion control algorithm employed by TCP [25] is known
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’05, August 22–26, 2005, Philadelphia, Pennsylvania, USA.
Copyright 2005 ACM 1-59593-009-4/05/0008 ...$5.00.
+ EECS Department
University of California, Berkeley
{lakme, istoica}@cs.berkeley.edu
to be ill-suited for high Bandwidth-Delay Product (BDP)
networks. With rapid advances in the deployment of very
high bandwidth links in the Internet, the need for a viable
replacement of TCP in such environments has become in-
creasingly important.
Several research eﬀorts have proposed diﬀerent approaches
for this problem, each with their own strengths and limita-
tions. These can be broadly classiﬁed into two categories:
end-to-end and network feedback based approaches. Pure
end-to-end congestion control schemes such as HighSpeed
TCP [15], FAST [31] and BIC [67, 59], although being at-
tractive solutions for the short-term (due to a lesser deploy-
ment barrier), may not be suitable as long-term solutions.
Indeed, in high BDP networks, using loss and/or delay as
the only congestion signal(s) poses fundamental limitations
on achieving high utilization and fairness while maintain-
ing low bottleneck queue length and minimizing congestion-
induced packet drop rate. HighSpeed TCP illustrates the
limitations of loss-based approaches in high bandwidth opti-
cal links with very low bit-error rates [15]. Similarly, Bullot
and Cottrell show that delay-based approaches are highly
sensitive to minor delay variations [7], a common case in
today’s Internet.
To address some of the limitations of end-to-end con-
gestion control schemes, many researchers have proposed
the use of explicit network feedback. However, while tra-
ditional congestion notiﬁcation feedback schemes such as
TCP+AQM/ECN proposals [18, 2, 42, 57] are successful
in reducing the loss rate and the queue size in the network,
they still fall short in achieving high utilization in high BDP
networks [24, 49, 35]. XCP [35] addresses this problem by
having routers estimate the fair rate and send this rate back
to the senders. Congestion control schemes that use explicit
rate feedback have been also proposed in the context of the
ATM Available Bit Rate (ABR) service [40, 9, 33, 27, 34].
However, these schemes are hard to deploy in today’s Inter-
net as they require a non-trivial number of bits to encode
the rate, bits which are not available in the IP header.
In this paper, we show that it is possible to approximate
XCP’s performance in high BDP networks by leveraging
only the two ECN bits (already present in the IP header)
to encode the congestion feedback. The crux of our algo-
rithm, called Variable-structure congestion Control Proto-
col (VCP), is to dynamically adapt the congestion control
policy as a function of the level of congestion in the net-
work. With VCP, each router computes a load factor [27],
and uses this factor to classify the level of congestion into
three regions:
low-load, high-load and overload [28]. The
37router encodes the level of congestion in the ECN bits. As
with ECN, the receiver sends the congestion information to
the sender via acknowledgement (ACK) packets. Based on
the load region reported by the network, the sender uses
one of the following policies: Multiplicative Increase (MI) in
the low-load region, Additive Increase (AI) in the high-load
region, and Multiplicative Decrease (MD) in the overload
region. By using MI in the low-load region, ﬂows can ex-
ponentially ramp up their bandwidth to improve network
utilization. Once high utilization is attained, AIMD pro-
vides long-term fairness amongst the competing ﬂows.
Using extensive packet-level ns2 [52] simulations that cover
a wide range of network scenarios, we show that VCP can
approximate the performance of XCP by achieving high uti-
lization, low persistent queue length, negligible packet drop
rate and reasonable fairness. One limitation of VCP (as is
the case for other end-host based approaches including TCP
and TCP+AQM) is that it converges signiﬁcantly slower to
a fair allocation than XCP.
To better understand the VCP’s behavior, we use a simple
ﬂuid model that approximates the behavior of VCP. For the
case of a single bottleneck link shared by ﬂows with identical
round-trip delays, we prove that the model asymptotically
achieves global stability independent of the link capacity, the
feedback delay and the number of ﬂows. For more general
multiple-bottleneck topologies, we show that the equilibrium
rate allocation of this model is max-min fair [4]. While this
model may not accurately reﬂect VCP’s dynamics, it does
reinforce the stability and fairness properties that we observe
in our simulations and provides a good theoretical grounding
for VCP.
From a practical point of view VCP has two advantages.
First, VCP does not require any modiﬁcations to the IP
header since it can reuse the two ECN bits in a way that is
compatible with the ECN proposal [57]. Second, it is a sim-
ple protocol with low algorithmic complexity. The complex-
ity of VCP’s end-host algorithm is similar to that of TCP.
The router algorithm maintains no per-ﬂow state, and it has
very low computation complexity. We believe that these
beneﬁts largely oﬀset VCP’s limitation of having a much
slower fairness convergence speed than XCP.
The rest of the paper is organized as follows. In Section 2,
we describe the guidelines that motivate the design of VCP
and in Section 3, we provide a detailed description of VCP.
In Section 4, we evaluate the performance of VCP using ex-
tensive simulations. In Section 5, we develop a ﬂuid model
that approximates VCP’s behavior and characterize its sta-
bility, fairness and convergence properties (with the detailed
proofs presented in a technical report [66]). Section 6 ad-
dresses concerns on the stability of VCP under heteroge-
neous delays and the inﬂuence of switching between MI, AI
and MD on eﬃciency and fairness. We review related work
in Section 7 and summarize our ﬁndings in Section 8.
2. FOUNDATIONS
In this section, we ﬁrst review why XCP scales to high
BDP networks while TCP+AQM does not. Then, we present
two guidelines that form the basis of the VCP design.
2.1 Why XCP outperforms TCP+AQM?
There are two main reasons of why TCP does not scale
to high BDP networks. First, packet loss is a binary con-
gestion signal that conveys no information about the degree
of congestion. Second, due to stability reasons, relying only
on packet loss for congestion indication requires TCP to use
a conservative window increment policy and an aggressive
window decrement policy [25, 35]. In high BDP networks,
every loss event forces a TCP ﬂow to perform an MD, fol-
lowed by the slow convergence of the AI algorithm to reach
high utilization. Since the time for each individual AIMD
epoch is proportional to the per-ﬂow BDP, TCP ﬂows re-
main in low utilization regions for prolonged periods of time
thereby resulting in poor link utilization. Using AQM/ECN
in conjunction with TCP does not solve this problem since
the (one-bit) ECN feedback, similar to a packet loss, is not
indicative of the degree of congestion either.
XCP addresses this problem by precisely measuring the
fair share of a ﬂow at a router and providing explicit rate
feedback to end-hosts. One noteworthy aspect of XCP is the
decoupling of eﬃciency control and fairness control at each
router. XCP uses MIMD to control the ﬂow aggregate and
converge exponentially fast to any available bandwidth and
uses AIMD to fairly allocate the bandwidth among compet-
ing ﬂows. XCP, however, requires multiple bits in the packet
header to carry bandwidth allocation information (∆cwnd)
from network routers to end-hosts, and congestion window
(cwnd) and Round-Trip Time (RTT) information (rtt) from
the end-hosts to the network routers.
2.2 Design Guidelines for VCP
The main goal of our work is to develop a simple con-
gestion control mechanism that can scale to high BDP net-
works. By “simple” we mean an AQM-style approach where
routers merely provide feedback on the level of network con-
gestion, and end-hosts perform congestion control actions
using this feedback. Furthermore, to maintain the com-
patibility with the existing IP header format, we restrict
ourselves to using only two bits to encode the congestion in-
formation. To address these challenges, our solution builds
around two design guidelines:
#1, Decouple eﬃciency control & fairness control.
Like XCP, VCP decouples eﬃciency and fairness control.
However, unlike XCP where routers run the eﬃciency and
fairness control algorithms and then explicitly communicate
the rate to end-hosts, VCP routers compute only a con-
gestion level, and end-hosts run one of the two algorithms
as a function of the congestion level. More precisely, VCP
classiﬁes the network utilization into diﬀerent utilization re-
gions [28] and determines the controller that is suitable for
a given region. Eﬃciency and fairness have diﬀerent levels
of relative importance in diﬀerent utilization regions. When
network utilization is low, the goal of VCP is to improve
eﬃciency more than fairness. On the other hand, when
utilization is high, VCP accords higher priority to fairness
than eﬃciency. By decoupling these two issues, end-hosts
have only a single objective in each region and thus need
to apply only one congestion response. For example, one
such choice of congestion response, which we use in VCP,
is to perform MI in low utilization regions for improving ef-
ﬁciency, and to apply AIMD in high utilization regions for
achieving fairness. The goal then is to switch between these
two congestion responses depending on the level of network
utilization.
#2, Use link load factor as the congestion signal.
XCP uses spare bandwidth (the diﬀerence between capac-
Figure 1: The throughput dynamics of two ﬂows of the
same RTT (80ms). They share one bottleneck with the
capacity bouncing between 10Mbps and 20Mbps. This
simple example unveils VCP’s potential to quickly track
changes in available bandwidth (with load-factor guided
MIMD) and thereafter achieve a fair bandwidth alloca-
tion (with AIMD).
ity and demand) as a measure of the degree of congestion.
In VCP, we use load factor as the congestion signal, i.e., the
relative ratio of demand and capacity [27].
While the load factor conveys less information than spare
bandwidth, the fact that the load factor is a scale-free pa-
rameter allows us to encode it using a small number of bits
without much loss of information. In this paper, we show
that a two-bit encoding of the load factor is suﬃcient to
approximate XCP’s performance. Note that in comparison
to binary congestion signals such as loss and one-bit ECN,
the load factor conveys more information about the degree
of network congestion.
2.3 A Simple Illustration
In this subsection, we give a high level description of VCP
using a simple example. A detailed description of VCP is
presented in Section 3. Periodically, each router measures
the load factor for its output links and classiﬁes the load
factor into three utilization regions: low-load, high-load or
overload. Each router encodes the utilization regions in the
two ECN bits in the IP header of each data packet. In turn,
the receiver sends back this information to the sender via
the ACK packets. Depending on this congestion informa-
tion, the sender applies diﬀerent congestion responses.
If
the router signals low-load, the sender increases its sending
rate using MI; if the router signals high-load, the sender in-
creases its sending rate using AI; otherwise, if the router
signals overload, the sender reduces its sending rate using
MD. The core of the VCP protocol is summarized by the
following pseudo code.
1) Each router periodically estimates a load factor, and
encodes this load factor into the data packets’ IP header.
This information is then sent back by the receiver to the
sender via ACK packets.
2) Based on the load factor it receives, each sender per-
forms one of the following control algorithms:
2.1) For low-load, perform MI;
2.2) For high-load, perform AI;
2.3) For overload, perform MD.
Figure 1 shows the throughput dynamics of two ﬂows shar-