      Object.defineProperty(this, i, {
        set: () => null,
        get: () => new __dombasedxssfinder_String(this.str[i], this)
      });
    }
    Object.defineProperty(this, '__dombasedxssfinder_string', {
      set: () => null,
      get: () => true
    });
  };
  __dombasedxssfinder_String.prototype = String.prototype;
  function __dombasedxssfinder_plus(left, right) {
    left = __convert_to_dombasedxssfinder_string_if_location(left);
    right = __convert_to_dombasedxssfinder_string_if_location(right);
    if (__is_dombasedxssfinder_string(left) || __is_dombasedxssfinder_string(right)) {
      const sources = [];
      if (__is_dombasedxssfinder_string(left)) {
        left.sources.forEach(e => sources.push(e));
      }
      if (__is_dombasedxssfinder_string(right)) {
        right.sources.forEach(e => sources.push(e));
      }
      return new __dombasedxssfinder_String('' + left + right, { sources });
    }
    try {
      return left + right;
    } catch (e) {
      return left.toString() + right.toString();
    }
  }
  function __dombasedxssfinder_get(object, key) {
    // if (object === null || object === undefined) {
    //   console.trace({object, key});
    // }
    if (object === window.location) {
      if (key === 'hash') {
        console.debug('hash',object,key);
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('window.location.hash')],
        });
      } else if (key === 'href') {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('window.location.href')],
        });
      } else if (key === 'pathname') {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('window.location.pathname')],
        });
      } else if (key === 'search') {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('window.location.search')],
        });
      }
    } else if (object === document) {
      if (key === 'documentURI') {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('document.documentURI')],
        });
      } else if (key === 'baseURI') {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('document.baseURI')],
        });
      } else if (key === 'URL') {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('document.URL')],
        });
      } else if (key === 'referrer' && object[key]) {
        return new __dombasedxssfinder_String(object[key], {
          sources: [__dombasedxssfinder_get_source('document.referrer')],
        });
      }
    }
    return object[key];
  }
  function __dombasedxssfinder_put(object, key, value) {
    // if (object === null || object === undefined) {
    //   console.trace({object, key, value});
    // }
    if (object[key] === window.location && __is_dombasedxssfinder_string_script(value)) 
{
      // __dombasedxssfinder_vulns_push(value.sources, 'window.location');
      // kill navigation
      return;
    } else if (object === window.location && key === 'href' && 
__is_dombasedxssfinder_string_script(value) && value.toString() !== object[key]) {
      // __dombasedxssfinder_vulns_push(value.sources, 'window.location.href');
      // kill navigation
      return;
    } else if (object instanceof Element && key === 'innerHTML' && 
__is_dombasedxssfinder_string_html(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'Element.innerHTML');
    } else if (object instanceof Element && key === 'outerHTML' && 
__is_dombasedxssfinder_string_html(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'Element.outerHTML');
    } else if (object instanceof HTMLScriptElement && key === 'src' && 
__is_dombasedxssfinder_string_url(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLScriptElement.src');
    } else if (object instanceof HTMLEmbedElement && key === 'src' && 
__is_dombasedxssfinder_string_url(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLEmbedElement.src');
    } else if (object instanceof HTMLIFrameElement && key === 'src' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLIFrameElement.src');
    } else if (object instanceof HTMLAnchorElement && key === 'href' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLAnchorElement.href');
    } else if (object instanceof HTMLFormElement && key === 'action' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLFormElement.action');
    } else if (object instanceof HTMLInputElement && key === 'formAction' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLInputElement.formAction');
    } else if (object instanceof HTMLButtonElement && key === 'formAction' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLButtonElement.formAction');
    } else if (object instanceof HTMLObjectElement && key === 'data' && 
__is_dombasedxssfinder_string_data_html(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLObjectElement.data');
    } else if (object instanceof HTMLScriptElement && key === 'text' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLScriptElement.text');
    } else if (object instanceof HTMLScriptElement && key === 'textContent' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLScriptElement.textContent');
    } else if (object instanceof HTMLScriptElement && key === 'innerText' && 
__is_dombasedxssfinder_string_script(value)) {
      __dombasedxssfinder_vulns_push(value.sources, 'HTMLScriptElement.innerText');
    }
    return object[key] = value;
  }
  function __dombasedxssfinder_new_Function() {
    const f = new Function(...arguments);
    if (__is_dombasedxssfinder_string_script(arguments[arguments.length - 1])) {
      __dombasedxssfinder_vulns_push(arguments[arguments.length - 1].sources, 'new 
Function()');
      f.__dombasedxssfinder_str = arguments[arguments.length - 1];
    }
    return f;
  }
  function __dombasedxssfinder_equal(left, right) {
    if (__is_dombasedxssfinder_string(left)) {
      left = left.toString();
    }
    if (__is_dombasedxssfinder_string(right)) {
      right = right.toString();
    }
    return left == right;
  }
  function __dombasedxssfinder_notEqual(left, right) {
    if (__is_dombasedxssfinder_string(left)) {
      left = left.toString();
    }
    if (__is_dombasedxssfinder_string(right)) {
      right = right.toString();
    }
    return left != right;
  }
  function __dombasedxssfinder_strictEqual(left, right) {
    if (__is_dombasedxssfinder_string(left)) {
      left = left.toString();
    }
    if (__is_dombasedxssfinder_string(right)) {
      right = right.toString();
    }
    return left === right;
  }
  function __dombasedxssfinder_strictNotEqual(left, right) {
    if (__is_dombasedxssfinder_string(left)) {
      left = left.toString();
    }
    if (__is_dombasedxssfinder_string(right)) {
      right = right.toString();
    }
    return left !== right;
  }
  function __dombasedxssfinder_typeof(o) {
    if (__is_dombasedxssfinder_string(o)) {
      return 'string';
    }
    return typeof o;
  }
  function __is_dombasedxssfinder_string(o) {
    return o && o.__dombasedxssfinder_string;
  }
  function __is_dombasedxssfinder_string_html(o) {
    // 
    o = __convert_to_dombasedxssfinder_string_if_location(o);
    return __is_dombasedxssfinder_string(o);
  }
  function __is_dombasedxssfinder_string_data_html(o) {
    // data:text/html,
    o = __convert_to_dombasedxssfinder_string_if_location(o);
    return __is_dombasedxssfinder_string(o);
  }
  function __is_dombasedxssfinder_string_script(o) {
    // alert()
    // javascript:alert()
    o = __convert_to_dombasedxssfinder_string_if_location(o);
    return __is_dombasedxssfinder_string(o);
  }
  function __is_dombasedxssfinder_string_url(o) {
    // //14.rs
    o = __convert_to_dombasedxssfinder_string_if_location(o);
    return __is_dombasedxssfinder_string(o);
  }
  function __dombasedxssfinder_property_call(object, key, ...arguments) {
    // if (object === null || object === undefined || typeof object[key] !== 
'function') {
    //   console.trace({object, key, arguments});
    // }
    if (object[key] === window.location.assign) {
      // cannot overwrite, replace it when called.
      return (function(url) {
        if (__is_dombasedxssfinder_string_script(url)) {
          // __dombasedxssfinder_vulns_push(url.sources, 'window.location.assign()');
          // kill navigation
          return;
        }
      }).apply(object, arguments);
    } else if (object[key] === window.location.replace) {
      // cannot overwrite, replace it when called.
      return (function(url) {
        if (__is_dombasedxssfinder_string_script(url)) {
          // __dombasedxssfinder_vulns_push(url.sources, 'window.location.replace()');
          // kill navigation
          return;
        }
      }).apply(object, arguments);
    } else if (object instanceof Element && key === 'setAttribute') {
      const elementSetAttribute = object[key];
      return (function(qualifiedName, value) {
        if (qualifiedName.startsWith('on') && 
__is_dombasedxssfinder_string_script(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
`Element.setAttribute('${qualifiedName}')`);
        } else if (this instanceof HTMLScriptElement && qualifiedName === 'src' && 
__is_dombasedxssfinder_string_url(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLScriptElement.setAttribute(\'src\')');
        } else if (this instanceof HTMLEmbedElement && qualifiedName === 'src' && 
__is_dombasedxssfinder_string_url(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLEmbedElement.setAttribute(\'src\')');
        } else if (this instanceof HTMLIFrameElement && qualifiedName === 'src' && 
__is_dombasedxssfinder_string_script(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLIFrameElement.setAttribute(\'src\')');
        } else if (this instanceof HTMLAnchorElement && qualifiedName === 'href' && 
__is_dombasedxssfinder_string_script(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLAnchorElement.setAttribute(\'href\')');
        } else if (this instanceof HTMLFormElement && qualifiedName === 'action' && 
__is_dombasedxssfinder_string_script(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLFormElement.setAttribute(\'action\')');
        } else if (this instanceof HTMLInputElement && qualifiedName === 'formaction' 
&& __is_dombasedxssfinder_string_script(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLInputElement.setAttribute(\'formaction\')');
        } else if (this instanceof HTMLButtonElement && qualifiedName === 'formaction' 
&& __is_dombasedxssfinder_string_script(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLButtonElement.setAttribute(\'formaction\')');
        } else if (this instanceof HTMLObjectElement && qualifiedName === 'data' && 
__is_dombasedxssfinder_string_data_html(value)) {
          __dombasedxssfinder_vulns_push(value.sources, 
'HTMLObjectElement.setAttribute(\'data\')');
        }
        elementSetAttribute.apply(this, arguments);
      }).apply(object, arguments);
    } else if (object instanceof Element && key === 'addEventListener') {
      const elementAddEventListener = object[key];
      return (function(type, listener) {
        if (type === 'click' && listener && listener.__dombasedxssfinder_str && 
__is_dombasedxssfinder_string_script(listener.__dombasedxssfinder_str)) {
          __dombasedxssfinder_vulns_push(listener.__dombasedxssfinder_str.sources, 
'Element.addEventListener(\'click\')');
        }
        elementAddEventListener.apply(this, arguments);
      }).apply(object, arguments);
    }
    return object[key](...arguments);
  }
  function __dombasedxssfinder_call(func, ...arguments) {
    // if (typeof func !== 'function') {
    //   console.trace({func, arguments});
    // }
    if (func === window.location.assign) {
      // cannot overwrite, replace it when called.
      func = function(url) {
        if (__is_dombasedxssfinder_string_script(url)) {
          // __dombasedxssfinder_vulns_push(url.sources, 'window.location.assign()');
          // kill navigation
          return;
        }
      };
    } else if (func === window.location.replace) {
      // 上书きできないので呼び出し时に差し替える
      func = function(url) {
        if (__is_dombasedxssfinder_string_script(url)) {
          // __dombasedxssfinder_vulns_push(url.sources, 'window.location.replace()');
          // kill navigation
          return;
        }
      };
    }
    return func(...arguments);
  }
  function __convert_to_dombasedxssfinder_string_if_location(o) {
    if (o === window.location) {
      o = new __dombasedxssfinder_String(o.toString(), {
        sources: [__dombasedxssfinder_get_source('window.location')],
      });
    }
    return o;
  }
  function __dombasedxssfinder_get_stacktrace() {
    const o = {};
    Error.captureStackTrace(o);
    // console.debug(o.stack.replace(/^Error\n/, '').replace(/^\s+at\s+/mg, ''));
    const regExp = /(https?:\/\/\S+):(\d+):(\d+)/;
    return o.stack.replace(/^Error\n/, '').replace(/^\s+at\s+/mg, '').split('\n')
        .filter(e => regExp.test(e))
        .map(e => {
          const m = e.match(regExp);
          const url = m[1];
          const line = m[2]; // start from 1
          const column = m[3]; // start from 1
          return { url, line, column, code: null };
        });
  }
  function __dombasedxssfinder_vulns_push(sources, sinkLabel) {
    if (!document.body) {
      setTimeout(() => __dombasedxssfinder_vulns_push(sources, sinkLabel), 500);
      return;
    }
    let container = document.getElementById('#__dombasedxssfinder_result_container');
    if (!container) {
      container = document.createElement('div');
      container.style.display = 'none';
      container.id = '__dombasedxssfinder_result_container';
      document.body.appendChild(container);
    }
    if (container) {
      for (const source of sources) {
        const row = document.createElement('div');
        row.style.display = 'none';
        row.classList = '__dombasedxssfinder_result';
        const result = {
          url: location.href,
          source,
          sink: __dombasedxssfinder_get_sink(sinkLabel)
        };
调⽤栈获取
在每个sink和source的hook触发函数中执⾏以下代码，即可获得当前的调⽤堆栈信息。
⼀个⼩demo
        row.textContent = JSON.stringify(result);
        container.appendChild(row);
        console.debug('result', result);
      }
    }
  }
  function __dombasedxssfinder_get_source(label) {
    return { label, stacktrace: __dombasedxssfinder_get_stacktrace() };
  }
  function __dombasedxssfinder_get_sink(label) {
    return { label, stacktrace: __dombasedxssfinder_get_stacktrace() };
  }
  console.debug(`preload at ${location.href}`);
}
  function __dombasedxssfinder_get_stacktrace() {
    const o = {};
    Error.captureStackTrace(o);
    // console.debug(o.stack.replace(/^Error\n/, '').replace(/^\s+at\s+/mg, ''));
    const regExp = /(https?:\/\/\S+):(\d+):(\d+)/;
    return o.stack.replace(/^Error\n/, '').replace(/^\s+at\s+/mg, '').split('\n')
        .filter(e => regExp.test(e))
        .map(e => {
          const m = e.match(regExp);
          const url = m[1];
          const line = m[2]; // start from 1
          const column = m[3]; // start from 1
          return { url, line, column, code: null };
        });
  }
最后
这个插件是动态js调⽤，实现了动态hook查找sink和source的dom-xss查找⽅法，是基于chrome扩展的最好实现
⽅式了，是⾃动化xss很好的⼀种参考⽅式。⽤这种⽅式，加上之前的chromium爬⾍，结合起来进⾏⾃动化xss发
现，会是⼀种很好玩的⾃动化⽅式～
参考
https://lorexxar.cn/2019/11/22/chrome-ext-1/
https://paper.seebug.org/1078/