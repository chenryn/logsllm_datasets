---
## Page 377
362
第17章创建函数
新函数会用echo语句来显示计算的结果。该脚本会获取db1函数的输出，面不是查看退出状
态码。
这个例子中演示了一个不易察觉的技巧。你会注意到db1函数实际上输出了两条消息。read
命令输出了一条简短的消息来向用户询问输人值。bash shell脚本非常聪明，并不将其作为STDOUT
输出的一部分，并且忽略掉它。如果你用echo语句生成这条消息来向用户查询，那么它会与输
出值一起被读进shell变量中。
说明通过这种技术，你还可以返回浮点值和宇符串值。这使它成为一种获取函数返回值的强
大方法。
17.3在函数中使用变量
你可能已经注意到，在17.2.3节的test5例子中，我们在函数里用了一个叫作Svalue的变量
来保存处理后的值。在函数中使用变量时，你需要注意它们的定义方式以及处理方式。这是shell
脚本中常见错误的根源。本节将会介绍一些处理shell脚本函数内外变量的方法。
17.3.1向函数传递参数
我们在17.2节中提到过，bashshell会将函数当作小型脚本来对待。这意味着你可以像普通脚
本那样向函数传递参数（参见第14章）。
函数可以使用标准的参数环境变量来表示命令行上传给函数的参数。例如，函数名会在S0
变量中定义，函数命令行上的任何参数都会通过s1、$2等定义。也可以用特殊变量$#来判断传
给函数的参数数目。
在脚本中指定函数时，必须将参数和函数放在同一行，像这样：
funcl $valuel 10
然后函数可以用参数环境变量来获得参数值。这里有个使用此方法向函数传值的例子。
$ cat test6
#1 /bin/bash
 passlng paraneters to a functlon
function addem (
f [  S# -eq 0 111[  S#-gt  2 ]
then
echo -1
[ bo-  #$ 1 1T[8
then
[Ts + s 1$ ouoe
else
2$ +1$ 1$ 008
f1
---
## Page 378
17.3在函数中使用变量
363
value=$ (adden 10 15)
.+5t pue ot buippv。 u- oqoe
echo $value
value=S(adden 10)
。=tequmu auo 18n[ 6uppe Ax1 8,4e[ u- oqo8
echo Svalue
-=stequmu ou 6uTppe futAxq noN u oqo8
value=S (adden)
17
echo $value
[0z 5T 0T ueppe)s=enTeA
echo -n *Finally, try adding three nunbers:
echo $value
Adding 10 and 15: 25
$-/test6
Leta try adding juat one number: 20
Finally, try adding three numbers: -1
[- :8xequmt ou 6uTppe 6uTAxq RoN
texi6脚本中的addem函数首先会检查脚本传给它的参数数目。如果没有任何参数，或者参数
多于两个，addem会返回值-1。如果只有一个参数，addem会将参数与自身相加。如果有两个参
数，addem会将它们进行相加。
由于函数使用特殊参数环境变量作为自己的参数值，因此它无法直接获取脚本在命令行中的
参数值。下面的例子将会运行失败。
$ cat badtest1
#tzying to access scrlpt parameters Lnside a function
#1/bin/ba.sh
functIon badfuncl{
[zs ▪ Is 1s ou09
r [ s# -eq 2 ]
then
echo *The reault la Svalue*
value=$ (badfunc1)
else
echo *Usage: badtestl a b*
f1
Usage: badtest1 a b
$./badtest1
$ -/badtest1 10 15
./badtestl: *
: symtax error: oper
ed (errox token ia **
The reault 18
---
## Page 379
364
第17章创建函数
尽管函数也使用了$1和s2变量，但它们和脚本主体中的s1和s2变量并不相同。要在函数中
使用这些值，必须在调用函数时手动将它们传过去。
$ cat test7
1/bin/bash
+ trying to access script paraneters inside a function
function fune? (
echo $[$1 * $2 )
if [ s -eq 2 ]
then.
value=$(func7 $1 $2)
else
echo *Usage1 badtestl a b*
fi
$./test7
Usage: badtest1 a b
The result is 150
$ ./test7 10 15
通过将s1和s2变量传给函数，它们就能跟其他变量一样供函数使用了。
17.3.2在函数中处理变量
给shell脚本程序员带来麻烦的原因之一就是变量的作用域。作用域是变量可见的区域。函数
中定义的变量与普通变量的作用域不同。也就是说，对脚本的其他部分而言，它们是隐藏的。
函数使用两种类型的变量：
口全局变量
口局部变量
下面几节将会介绍这两种类型的变量在函数中的用法。
1.全局变量
全局变量是在shell脚本中任何地方都有效的变量。如果你在脚本的主体部分定义了一个全局
变量，那么可以在函数内读取它的值。类似地，如果你在函数内定义了一个全局变量，可以在脚
本的主体部分读取它的值。
默认情况下，你在脚本中定义的任何变量都是全局变量。在函数外定义的变量可在函数内正
常访间。
$ cat test8
+ using a global variable to pass a value
+1/bin/bash
function db1 {
---
## Page 380
17.3在函数中使用变量
365
value=$ [ $value * 2 ]
entea . :ontea t xoqug. d- pee.
db1
6-/test8
Enter a value: 450
006 =8T 9nT1A 片9u 9qL
17
$value变量在函数外定义并被赋值。当db1函数被调用时，该变量及其值在函数中都依然有
效。如果变量在函数内被赋予了新值，那么在脚本中引用该变量时，新值也依然有效。
但这其实很危险，尤其是如果你想在不同的shel脚本中使用函数的话。它要求你清清楚楚地
知道函数中具体使用了哪些变量，包括那些用来计算非返回值的变量。这里有个例子可说明事情
是如何搞硬的。
$ cat badtest2
1/bin/bash
# Gemonstrating a bad use of varlables
function funcl {
temp=S[ $value + 5 1
result=SI Stenp * 2 1
tenp=4
value=6
echo *The result la Sresult*
func1
[on[ens 16- duon$ 13T
then
else
echo *tenp ia largex*
echo *tenp la smallex*
$./badtest2
The result ig 22
tenp is larger
由于函数中用到了Stemp变量，它的值在脚本中使用时受到了影响，产生了意想不到的后果。
有个简单的办法可以在函数中解决这个问题，下节将会介绍。
2.局部变量
无需在函数中使用全局变量，函数内部使用的任何变量都可以被声明成局部变量。要实现这
一点，只要在变量声明的前面加上local关键字就可以了。
1oca1 temp
---
## Page 381
366
第17章创建函数
也可以在变量赋值语句中使用1oca1关键字：
Loca] terp=[ $value + 5 ]
loca1关键字保证了变量只局限在该函数中。如果脚本中在该函数之外有同样名字的变量，
那么shell将会保持这两个变量的值是分离的。现在你就能很轻松地将函数变量和脚本变量隔离开
了，只共享需要共享的变量。
$ cat test9
 denonstrating the local keyrord
+1 /bin/bash
function funel (
local tenp=$[ $value + 5 ]
result=$[ Stenp * 2 ]
temp=4
value=6
echo *The result is $result*
func1
[an[es 46- dua$ ] 31
then
else
echo *tenp is larger*
echo *tenp is smaller*
fi
$
The result is 22
$./test9
tenp is smaller
现在，在funcl函数中使用stemp变量时，并不会影响在脚本主体中赋给stemp变量的值。
17.4数组变量和函数
第6章讨论了使用数组来在单个变量中保存多个值的高级用法。在函数中使用数组变量值有
点麻烦，而且还需要一些特殊考虑。本节将会介绍一种方法来解决这个问题。
17.4.1向函数传数组参数
向脚本函数传递数组变量的方法会有点不好理解。将数组变量当作单个参数传递的话，它不
会起作用。
$ cat badtest3
+ 1/bin/bash
trying to pass an array variable
---
## Page 382
17.4数组变量和函数
367
function testit(
[[]e.xesua)s 8TAe.xe pe8xo。o29
thisarray=1
echo *The orlginal array 1a: $(nyarray [*1) *
myazray= (1 2 3 4 5)
teetit Sayarray
17
$./badtest3
The
original array is: 1 2 3 4 5
The parameters are: 1
The received array 18 1
如果你试图将该数组变量作为函数参数，函数只会取数组变量的第一个值。
要解决这个问题，你必须将该数组变量的值分解成单个的值，然后将这些值作为函数参数使
用。在函数内部，可以将所有的参数重新组合成一个新的变量。下面是个具体的例子。
$ cat test10
 array variable to function test
#1/bin/bash
function testit (
local nevarray
($。 oqpe, )=Aexxemeu
echo *The new azray value ia: $ (nevarray [*1) *
echo *The orlginal array iα ${myarray[*1)*
myazray= (1 2 3 4 5)
testit $[myaxzay [*]]
$./test10
The
originalarray ia 1 2 34 5
The new array value is: 1 2 3 4 5
该脚本用smyarray变量来保存所有的数组元素，然后将它们都放在函数的命令行上。该函
数随后从命令行参数中重建数组变量。在函数内部，数组仍然可以像其他数组一样使用。
$ cat test11
#1/bin/bash
aSding values in an azray
funet ion addarray [
1ocal sun=0
newarray= ($ (echo *$e*))
local newarray
[[Aexxemeu)s uT en[es 20]
So
gum=S↑ Saun + Svalue 1
---
## Page 383
368
第17章创建函数
done
echo $aun
nyarray= (1 2 3 4 5)
axg1=$ (echo ${nyazray [ *1)1
echo *The orlginal array ls: S(nyarray [*1) *
result=(addarray $argl)
echo *The reault la Sresult*
$./test11
The orlginal array is: 1 2 3 4 5
The result 1a 15
addarray函数会遍历所有的数组元素，将它们累加在一起。你可以在myarray数组变量中
放置任意多的值，addarry函数会将它们都加起来。
17.4.2从函数返回数组
从函数里向shell脚本传回数组变量也用类似的方法。函数用echo语句来按正确顺序输出单个
数组值，然后脚本再将它们重新放进一个新的数组变量中。
$ cat test12
1/bin/bash
 returning an array value
functlon arraydb1x (
local orlgarray
local nevarray
local elements
11e$。 ouoo)$) =(exxef 1.xo
local 1
1<= 。 ouo] s) =Ae.xereu
[ - #$ 1s=squuo0
for (( 1 = 0; 1 <= Selenents; 1++ 1)
newarray [$1]=S[ $(oxlgarray[S11) * 2 ]
echo $(newarray [*1)
myarray= (1 2 3 4 5)
echo *The orlginal array ls: S(myarray [*I) *
result= ($(arraydblr $arg111