title:Marlin: making it harder to fish for gadgets
author:Aditi Gupta and
Sam Kerr and
Michael S. Kirkpatrick and
Elisa Bertino
POSTER: Marlin - Making it Harder to Fish for Gadgets
Aditi Gupta
Purdue University
West Lafayette, IN
PI:EMAIL
Michael S. Kirkpatrick
James Madison University
Harrisonburg, VA
PI:EMAIL
ABSTRACT
Code-reuse attacks, including return-oriented programming
(ROP) and jump-oriented programming, bypass defenses
against code injection by repurposing existing executable
code in application binaries and shared libraries toward a
malicious end. A common feature of these attacks is the
reliance on the knowledge of the layout of the executable
code. We propose a ﬁne grained randomization based ap-
proach that modiﬁes the layout of executable code and hin-
ders code-reuse attack. Our solution consists solely of a
modiﬁed dynamic loader that randomizes the internal struc-
ture of the executable code, thereby denying the attacker the
necessary apriori knowledge for constructing the desired se-
quence of gadgets. Our approach has the advantage that
it can be applied to any ELF binary and every execution
of this binary uses a diﬀerent randomization. We describe
the initial implementation of Marlin, a customized loader
for randomization of executable code. Our work shows that
such an approach is feasible and signiﬁcantly increases the
level of security against code-reuse attacks.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—ac-
cess controls
General Terms
Security
Keywords
return-oriented programming, security, malware
1.
INTRODUCTION
The history of malware defense shows a clear pattern as
an arms race between attackers and defenders. Attackers
propose new techniques and defenders respond by ﬁnding
methods to stymie exploits. While these defensive tools
are being deployed, creative attackers ﬁnd ways to bypass
the schemes. Consider the history of buﬀer overﬂows and
string format vulnerabilities. The evolution of these attacks
started with basic stack smashing then extended to other
Copyright is held by the author/owner(s).
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
ACM 978-1-4503-1651-4/12/10.
Sam Kerr
Purdue University
West Lafayette, IN
PI:EMAIL
Elisa Bertino
Purdue University
West Lafayette, IN
PI:EMAIL
forms of corruption, such as heap-based code injection. At
every step of the way, defenders found ways to violate an
invariant of the attack behavior [3, 5, 1].
While earlier exploits involved the injection of malicious
code, the recent trend has been to reuse executable code
that already exists, primarily in the application binary and
shared libraries such as libc. In a basic return-into-libc at-
tack [9], for instance, a buﬀer overﬂow corrupts the return
address to jump to a libc function, such as system. This
type of attack then evolved into return-oriented program-
ming (ROP) [7]. In ROP, the attacker identiﬁes small se-
quences of binary instructions, called gadgets, that end in a
ret instruction. By placing a sequence of carefully crafted
return addresses on the stack, the attacker can use these
gadgets to perform arbitrary computation. These attacks
continued to evolve, with newer techniques using gadgets
that end in jmp or call instructions [2].
Early solutions to the problem of code-reuse based exploits
focused on the introduction of randomness into the memory
image of a process. Speciﬁcally, by randomizing the start
address of the code segment, a single exploit packet would
not be eﬀective on all running instances of an application.
That is, two diﬀerent running instances would have a diﬀer-
ent base address, so the addresses that an attacker needed
to jump to in one instance would not be the same as the
addresses in the other instance. Although randomization
initially seemed promising, these solutions suﬀered from the
small amount of randomization possible [8]. Recent work has
demonstrated that an attacker can use information leakage
to discover the randomization parameters, thus negating the
promised beneﬁts [6].
As a defense against code reuse attacks, we re-examine
the granularity at which the randomization is performed.
In considering a new defensive technique, we start with two
observations. First, the main shortcoming of earlier ran-
domization based techniques was insuﬃcient entropy, thus
making brute-force attacks feasible. Second, executable code
can naturally be broken into many basic blocks that can po-
tentially be shuﬄed. Consequently, the amount of possi-
ble randomization generated can be signiﬁcantly increased
by permuting the code blocks within the executable. For
instance, if an application has 500 code blocks, there are
500! ≈ 23767 possible permutations of the code blocks which
signiﬁcantly increases the brute force eﬀort required from an
attacker.
Our system, Marlin,
introduces a randomization tech-
1016run-time. Once this address is known, the attacker can con-
struct a code-reuse attack using the known relative oﬀsets.
Marlin’s randomization technique aims at breaking these as-
sumptions by shuﬄing the code blocks in the binary’s .text
section. This signiﬁcantly increases the diﬃculty of such at-
tacks. Marlin generates a random permutation of the set
of symbols (functions) in application binary. The resulting
permutation determines the order in which the mmap sys-
tem calls are issued, which changes the order of the mapped
symbols in memory. Randomization is done by the dynamic
loader just before the control is passed over to the applica-
tion for execution. Thus, every execution of the program
results in a diﬀerent process memory image. Figure 1 illus-
trates how shuﬄing the code results in a sequence of gadgets
that is not expected by the attacker.
Shuﬄing the code blocks in an application binary changes
the relative oﬀsets between instructions that may aﬀect jump
instructions. These jumps may be either absolute jumps or
relative jumps. Relative jumps modify the program counter
by a constant value as opposed to absolute jump that di-
rectly jump to a ﬁxed address. When the code blocks are
shuﬄed, these jumps will no longer point to the desired loca-
tion and must be corrected to point to the proper locations.
We achieve this by performing jump patching.
Algorithm 1: Code Randomization algorithm
Input : A non-shuﬄed program, P
Output: A shuﬄed program, PS
PS = P
L = All symbols in P .
F = A list of forbidden symbols that should not be
shuﬄed
L = L ∩ F
/* Swapping stage */
for Every symbol S ∈ L do
R = Randomly select another symbol in L
Swap S and R in PS
S.A = The previous location of R
R.A = The previous location of S
/* Jump patching stage */
for Every symbol S ∈ L do
for Every jump J ∈ S do
J.A = S.A + the oﬀset of the jump from the
start of S
J.D = The destination address of the jump
J.S = The symbol that J is jumping into
if J.D is a relative jump to within S then
/* No action needed */
else if J.D is a relative jump to outside S then
J.D = J.D - S.A + (J.S).A
PatchJump(J.A, J.D)
else if J.D is an absolute jump then
PatchJump(J.A, J.D)
The jumps are patched in a two stage process. In the ﬁrst
stage, the function blocks are shuﬄed according to a certain
random permutation. While shuﬄing the blocks, padding
is added when necessary to ensure that the resulting binary
is page aligned. During this shuﬄing, we keep a record of
Figure 1: Failure of ROP attacks due to Marlin
nique that shuﬄes the code blocks in an application binary.
This technique is designed to be incorporated into a cus-
tomized loader that would randomize the binary at load
time just before execution. This randomization approach
has many beneﬁts. First, as stated above, for any decent-
sized code base with a large number of blocks, the number
of possible randomized results clearly makes brute-force ap-
proaches infeasible. Second, this approach can be applied
to Marlin-compatible binaries without requiring the source
code of an application. Third, the randomization is per-
formed at load time which means that potentially every ex-
ecution of the binary results in a diﬀerent address layout.
Finally, our scheme oﬀers an alternative to approaches that
dynamically monitor critical data like return addresses. Al-
though these schemes are eﬀective, they distribute the per-
formance cost throughout the execution life-time of the pro-
cess.
In our solution, the entire performance cost is paid
once during process setup, and is quite reasonable; after the
execution begins, the code runs as originally designed.
2. THREAT MODEL
Marlin is aimed to protect a vulnerable application against
code reuse attacks, such as return-oriented-programming.
This application may have a buﬀer overﬂow or string for-
mat vulnerability that can be leveraged by an attacker to
inject an exploit payload. The system is assumed to be pro-
tected using W ⊕ X policy and the attacker can not inject
arbitrary executable code in the stack or the heap. The at-
tacker is assumed to have access to the target binary that has
not yet undergone Marlin processing. However, the attacker
can not examine the memory dump of the running process
and is unaware of how exactly the code is randomized for
the currently executing process image. Our approach pro-
tects against both remote and local exploits as long as the
attacker is not able to examine the memory of the target
process. For instance, in this threat model, a local attacker
can not attach a debugger to a process that is running as
root and obtain its memory dump.
3. MARLIN
Code-reuse attacks make certain assumptions about the
address layout of application’s executable code and shared
libraries. It was shown in [6] that information leakage al-
lows an attacker to learn the randomized base address at
1017the original address of the function and also the new address
where the function will reside after the binary has been com-
pletely randomized. This information is stored in a jump
table. In the second stage, the actual jump patching is done
where the jump table is examined for every jump that needs
to be patched. Whenever a relative jump is encountered, it
is overwritten to redirect the jump to point to the correct
address in the binary.
The run-time shuﬄing of the code blocks would prevent
multiple instances of the same program from having the
same address layout. Speciﬁcally, there are n! possible per-
mutations for n symbols, making a brute-force attack on
the randomized binary infeasible. Furthermore, the target
application may crash after each failed brute force attempt
and will restart with a new randomized layout. This further
strengthens our system against brute force attempts. Thus,
to defeat Marlin, an attacker would need to dynamically
construct a new exploit for every instance of every applica-
tion which is not possible since the randomized layout is not
accessible to attacker.
4. EVALUATION
We have built a proof-of-concept implementation of Mar-
lin that consists of an oﬀ-line tool to randomize the binary
image of an executable. We evaluated the eﬀectiveness and
overhead of Marlin by performing experiments using a Linux
Machine with Intel Core i7 3.40GHz CPU and 8GB RAM.
We used ROPGadget tool v3.3.3 [4] to automatically craft an
exploit payload by searching for gadgets in an application’s
executable section. The test application had 162 unique
gadgets and was successfully attacked using this attack tool.
However, this attack failed after shuﬄing the binary.
Next, we estimated the brute force eﬀort required to cir-
cumvent the protection oﬀered by Marlin. An application
with n number of symbols would typically require an order
of n! brute force attempts. However, an application may
crash when a brute force attack fails and will be restarted
with a diﬀerent address layout, thus signiﬁcantly increasing
the eﬀort beyond n!. We noticed that around 80% of SPEC
benchmarks have more than 80 symbols (indicating an eﬀort
of 80! attempts). We observed an average of 1496 symbols
and a median of 502 symbols present in these applications.
Thus, the number of brute force attempts in a general case
can be approximated to 500! ≈ 23767 attempts which is quite
signiﬁcant.
Finally, we evaluated the time to randomize compiled bi-
naries of the SPEC CPU2006 benchmark suite. When an
application is loaded, Marlin identiﬁes the function blocks
and records information about them to be used later in jump
patching. This computation is independent of the individ-
ual randomizations and referred to as preprocessing phase.
Next phase involves shuﬄing the code blocks and patch-
ing the jumps. This computation is referred to as startup
processing phase. The average time taken by preprocess-
ing phase was 4.2 seconds, while average time taken by the
startup processing phase was 3.3 seconds. Since preprocess-
ing phase is independent of individual randomizations, it can
be executed just once per application and the results can be
stored in database.
5. DISCUSSION
As a defense against code-reuse attacks, Marlin increases
the entropy by randomizing the code blocks. One may apply
this randomization technique at various levels of granularity
- function, block or gadget level. The level of granularity
to choose is a trade oﬀ between security and performance.
In our implementation, we implemented the randomization
at the function level which is the most coarse granularity
amongst the three mentioned above. We show that even
this coarse level of granularity provides substantial random-
ization to make brute force attacks infeasible.
Our prototype implementation requires the binary disas-
sembly to contain symbol names, i.e. a non-stripped binary.
In practice however, binaries may be stripped and not con-
tain the symbol information. This can be addressed by ran-
domizing at the level of basic blocks since they don’t require
symbol information to be identiﬁed.
6. CONCLUSION
In this work, we propose a ﬁne-grained approach to ran-
domizing the application code as defense against code-reuse
attacks. The cost of our defensive technique occurs as a sin-
gle performance hit when the application loads; once the ap-
plication is running, no additional overhead is expected. We
evaluated the eﬀectiveness of our approach and showed that
the brute force eﬀort to attack Marlin is signiﬁcantly high.
Based on the results of our analysis and implementation, we
argue that ﬁne-grained randomization is both feasible and
practical as a defense against these pernicious code-reuse
based attack techniques.
7. ACKNOWLEDGMENTS
The work reported in this paper has been partially sup-
ported by a grant by Sypris Electronics.
8. REFERENCES
[1] E. Bhatkar, D. C. Duvarney, and R. Sekar. Address
obfuscation: an eﬃcient approach to combat a broad
range of memory error exploits. In Proc. of the 12th
USENIX Security Symposium, pages 105–120, 2003.
[2] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-oriented
programming without returns. In CCS ’10. ACM, 2010.
[3] C. Cowan, S. Beattie, J. Johansen, and P. Wagle.
Pointguard: Protecting pointers from buﬀer overﬂow
vulnerabilities. In Proc. of the 12th Usenix Security
Symposium, 2003.
[4] Jonathan Salwan. ROPgadget tool.
http://shell-storm.org/project/ROPgadget/.
[5] PaX Team. PaX. http://pax.grsecurity.net/.
[6] G. Roglia, L. Martignoni, R. Paleari, and D. Bruschi.
Surgically returning to randomized lib(c). In ACSAC
’09, pages 60 –69, dec. 2009.
[7] H. Shacham. The geometry of innocent ﬂesh on the
bone: return-into-libc without function calls (on the
x86). In CCS ’07, pages 552–561. ACM, 2007.
[8] H. Shacham, M. Page, B. Pfaﬀ, E.-J. Goh,
N. Modadugu, and D. Boneh. On the eﬀectiveness of
address-space randomization. In CCS ’04, pages
298–307. ACM, 2004.
[9] Solar Designer. Getting around non-executable stack
(and ﬁx). August 1997.
1018