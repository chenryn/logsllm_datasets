---
## Page 473
Preg函数接口
447
PHP特有的修饰符列表最上端的4个模式修饰符属于标准修饰符，在第3章（110）已
经讨论过。修饰符e只能在preg_replace中使用，详细的讨论见对应的小节（459)。
模式修饰符u告诉preg引擎，以UTF-8编码处理正则表达式和目标字符串。此模式修饰符
不会修改数据，只是更改正则引擎处理数据的方式。默认（也就是未使用模式修饰符u）的
情况下，preg引擎认为接收的数据都是8位编码的（87)。如果用户知道数据是UTF-8编
码的，请使用此修饰符，否则请不要使用。在UTF-8编码中，非ASCII学符以多个学节来
存储，使用u修饰符能够确保多个字节会被作为单个字符来处理。
模式修饰符X启用PCRE的“额外功能（extrastuf)”，目前它只有一个效果：如果出现了
无法识别的反斜线序列，就报告错误。例如，默认情况下，\k在PCRE中没有特殊意义，
就等价于k（因为这不是一个已知的元序列，所以反斜线会被忽略）。如果使用了模式修饰
符X，就会报告“unrecognizedcharacterfollows\”。
未来版本的PHP可能包含更高版本的PCRE，其中当前没有特殊意义的反斜线组合可能被
赋予新的意义，所以为了保持未来的兼容性（以及般可读性），最好是不要转义不需要的
字母，除非它们现在有特殊意义。从这个意义上说，模式修饰符X意义重大，因为它可以
发现这样的错误。
模式修饰符S调用PCRE的“study（研究）”特性，预先分析正则表达式，在某些顺利的情
况下，在尝试匹配时速度会大大提升。本章中关于效率的内容将对此有介绍，请参考第478
页。
剩下的模式修饰符实用价值不大，也不常用：
模式修饰符A把匹配锚定在第一次尝试的位置，就等于整个正则表达式以\G开头。
如果用第4章的汽车的类比，这就是关闭传动机构的“驱动过程”（148）。
·模式修饰符D会把每个's替换为\z（112)，即'S匹配字符串的末尾，而不是字符
串之内的换行符。
·模式修饰符U交换元字符的匹配优先含义：和*？交换，+和'+？交换，等等。我
猜这个模式修饰符的主要作用在于制造混乱，所以我完全不推荐使用它。
---
## Page 474
448
第10章：PHP
“UnknownModifier”错误
有时候，手头程序忽然会报告“UnknownModifier”错误。我绞尽脑汁希望找到问题
所在，最终恍然大悟，原来自己在创建模式参数时忘了添加分隔符。
例如，我可能希望这样匹配HTMLtag：
preg_match(']*)>', $html)
我的本意是，‘]*）>”，
其中的正则表达式以灰色标注，模式修饰符以下画线标注。
在正则表达式中，（\W+）（[个是不合法的，但是在发现并报告错误之前，正则引擎会试
图将“*）>’解释为一串模式修饰符。但它们全都不是合法的模式修饰符，所以，当
然会报告错误。
Warning: Unknown modifier ']*
显然，我需要使用分隔符：
preg_match(*//`,$html)
除非我知道这里的modifier指的是PHP的pattern修饰符，否则此错误报告中给出的修
饰符并不能让人明白，所以有时候我得花点时间才能找到问题所在。每次遇到这样的
问题，我都觉得自己很傻，但幸运的是，没人知道我会犯这种低级的错误。
幸好，PHP5最近版本的报错信息改成了这样：
Warning: preg_match() : Unknown modifier *}'
因为出现了函数名，我立刻就能反应过来。不过，有时候仍然需要花很多时间来查找
漏写分隔符的问题，因为不是每次都会报错。比如下面这段程序：
preg_match('',$html)
尽管我忘了写分隔符，但（\w+）（.*？）仍然是合法的正则表达式。唯一的毛病在于它
不能匹配我期望的结果。这种错误不易察觉，非常棘手。
---
## Page 475
Preg函数罗列
449
Preg函数罗列
The Preg Functions
preg_match
使用方法
preg_match(pattern, subject[, matches[, flags [. offset]]])
参数简介
patterm分隔符包围起来的正则表达式，可能出现修饰符（444）。
subject需要搜索的目标字符串。
matches非强制出现，用来接受匹配数据。
flags
非强制出现，此标志位会影响整个函数的行为。这里只容许出现一个标志位，
PREG_OFFSET_CAPTURE(452)。
offset
非强制出现，从0开始，表示匹配尝试开始的位置（453）。
返回值
如果找到匹配，就返回true，否则返回false。
讲解
最简单的用法是：
preg_match($pattern, $subject)
如果Spattern在$subject中能找到匹配，就会返回true。下面有几个简单的例子：
if(preg_match(/\.(jpe?glpnglgif1bmp)$/i'，$url9）{
/*围片的URL*/
if(preg_match('(^https?://}',$uri)）{
/*URI是http或https*/
if(preg_match('/\b MSIE \b/x',$_SERVER['HTTP_USER_AGENT'])）(
/*浏览器是IE*/
---
## Page 476
450
第10章：PHP
捕获匹配数据
Dreg_match的第3个参数如果出现，则会用来保存匹配结果的信息。用户可以照自己的意
愿使用任何变量，不过最常用的名字是Smatches。在本书中，如果我在特定的例子之外提
到smatches，指的就是“preg_match接收的第3个参数”。
匹配成功之后，preg_match返回true，并按如下规则设置$matches；
Smatches[o]是正则表达式匹配的所有文本
Smatches[1]是第1组捕获型括号捕获的文本
Smatches[2]是第2组捕获型括号捕获的文本
如果使用了命名分组，Smatches中也会保存对应的元素（下一节有这样的例子）。
第5章中（191）曾出现过这个简单的例子：
/*输入完整路径，分离出文件名*/
if(preg_match('(/([^/）+）$)x'，$wholePath,$matches))
$FileName = $matches[1];
会返回false，或者错误（例如模式错误或函数标志位设置错误）。有的错误发生之后，
Smatches是空数组，但也有时候它的值不会变化，所以我们不能认为，$matches不为空
就表示匹配功。
下面这个例子使用了3组捕获型括号：
/*从URL中提取协议、主机名和端口号*/
if(preg_match(′(~(https？)://（[/:}+）(?:：(\d+）)？}x'，$ur1,$matches）)
Sproto = $matches[1];
Shost= $matches[2];
Sport=$matches[3]?$matches[3]:（$proto =="http"? 80:443);
print "Port:：Sport\n*;
数组结尾“未参与匹配”的元素会被忽略
如果一组捕获型括号没有参与最终匹配，它会在对应的Smatches中生成一个空字符串（注
2)。需要说明的是，$matches末尾的空字符串都会被忽略。在前面那段程序中，如果（\d+）：
参与了匹配，$matches[3]会保存一个数值，否则，$matches[3]根本就不会存在。
注2：如果希望用NULL取代空宇符串，请参考第454页的补充内容。
---
## Page 477
Preg函数罗列
451
命名捕获
如果我们用命名捕获（?138）重写之前的例子，正则表达式会长一些，不过代码更容易阅
读：
/*从URL中提取协议、主机名和端口号*/
if (preg_match(*(^(?Phttps？）://
(?P[^/:]+)
（？：：（?P\d+）)？}x'，$url，$matches）)
Sproto =$matches['proto'];
Shost
=
Smatches['host'];
$port
=Smatches['port']? $matches['port']:（$proto=="http"?80：443);
print
"Protocol:Sproto\n";
print
"Host
：
Shost\n";
print
"Port
：$port\n";
命名捕获看起来更清晰，这样我们不需要把Smatches的内容复制给各个变量，就能直接使
用变量名，而不是Smatches，例如这样：
/*从URL中提取协议、主机名和端口号*/
if (preg_match(*{^(?Phttps？）://
（?P[~/：]+)
（？:：（?P\d+））?}x'，$url，$UrlInfo）)
if (! $UrlInfo['port'])
$Ur1Info['port']=（$UrlInfo['proto']=="http"? 80:443）;
echo“Protocol:"，$UrlInfo['proto']，"\n";
echo"Host
：",$UrlInfo['host'],
"\n*;
echo"Port
："，$UrlInfo['port'],
"\n";
如果使用了命名捕获，按数字编号的捕获仍然会插人Smatches。例如，在匹配Sur1（值为
‘http：//regex.info'）之后，之前例子中的sUrlInfo包含：
array
(
0
=>
'http://regex.info'
'proto'
=>
'http',
1
=>
'http',
'host'
=>
'regex.info'
2
=>
'regex.info'
）
这样的重复有点浪费，但这是获得命名捕获的便捷和清晰所必须付出的代价。为清晰起见，
我不推荐同时使用命名和数字编号来访问$matches的元素，当然用smatches[0]表示全局
匹配例外。
请注意，数组中不包括编号为3和名称为port’的入口（entry），因为这一组捕获型括号
没有参与到最终匹配中，而且处于最后（因此会被忽略450）。
---
## Page 478
452
第10章：PHP
还要提一点，尽管现在使用例如（？P）之类的数字命名并不会出错，但这种做法并不
以最好还是不要使用数字来命名捕获分组。
更多的匹配细节：PREG_OFFSET_CAPTURE
如果设置了preg_match的第4个参数flags，而且包含PREG_OFFSET_CAPTURE（这也是
preg_match目前能够接受的唯一标志位），则smatches的每个元素不再是普通字符串，而
是由两个元素构成的子数组，其中第1个元素是匹配的文本，第2个元素是这段文本在目
标字符串中的偏移值（如果没有参与匹配，则为-1）。
偏移值从0开始，表示这段文本相对目标字符串的偏移值，即使设置了第5个参数soffset，
偏移值的计算也不会变化。它们通常按照字节来计数，即使使用了模式修饰符u也是如此
(447)。
来看个从tag中提取HREF属性的例子。HTML的属性值两边可能是双引I号、单引I号，或者
干脆没有引号，这样的值在下面这个正则表达式的第1组、第2组和第3组捕获型括号中
被捕获：
,x/（（+[
匹配成功之后，$matches的内容是：
array
/*全局匹配的数据*/
./boq/oguxba//:du.=. 17 ),
/*第1组括号的匹配数据*/
1 => array( 0 =>*,
1 => -1 ),
/*第2组括号的匹配数据*/
2=>array(0=>*http://regex.info/blog/
1=> 23)
$matches[0][0]包含正则表达式匹配的所有文本，$matches[0][1]表示匹配文本在目标
字符串中的偏移值，按字节计数。
---
## Page 479
Preg函数罗列
453
为了清晰起见，另一种获得$matches[0][0]的办法是：
substr($tag, $matches[0][1], strlen(Smatches[0][0]));
Smatches[1][1]是-1，表示第1组捕获括号没有参与匹配。第3组也没有参与，但是因为
之前提到的理由（450），结尾未参与匹配的捕获括号匹配的文本不会包含在Smatches中。
offset参数
如果preg_match中设置了ofset参数，引擎会从目标字符串的对应位置开始（如果ofset
是负数，则从字符串的末尾开始倒数）。默认情况下，offset是0（也就是说，从目标字符串
的开头开始）。
请注意，offset是按字节计数的，即使使用了模式修饰符u也是这样。如果设置不正确（例