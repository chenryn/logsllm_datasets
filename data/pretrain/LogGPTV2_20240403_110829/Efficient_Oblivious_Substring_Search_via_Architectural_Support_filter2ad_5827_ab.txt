owner and the untrusted server. Nonetheless, these solutions leak
1A Circuit DORAM was employed in the experimental results of ZeroTrace [40], but
its design was not reported in the paper
Efficient Oblivious Substring Search via Architectural Support
ACSAC 2020, December 7–11, 2020, Austin, USA
Figure 1: BWT L and SA Suf of the string alfalfa
the access patterns of the queries on the outsourced full-text index.
When this information is combined with the background knowl-
edge coming from the application domain, the confidentiality of the
document collection is compromised [9, 38]. These attacks pushed
for the availability of efficient PPSS protocols avoiding this infor-
mation leakage. In many of the existing solutions [22, 27, 42, 48]
the low leakage comes at the cost of making the computation cost
on server side linear in the document collection size. The PPSS
protocol described in [30] allows to reduce such cost to polyloga-
rithmic; however, it requires O(m+oq) communication rounds and
a polylogarithmic bandwidth cost.
Regarding SGX based solutions, privacy-preserving search in-
dexes, such as Oblix [29], Bunker [2] or HardIDX [15], do not allow
to search arbitrary substrings but only a given set of keywords.
2 PRELIMINARIES
In this section, we describe the building blocks of ObSQRE: back-
ward search algorithm [14] and ORAM protocols.
2.1 Backward Search Algorithm
Given a text, or string, s with n characters over an alphabet Σ
and a substring q ∈ Σ∗ with m characters, the backward search
algorithm employs a full-text index built from the Burrows-Wheeler
Transform (BWT) [8] and the Suffix Array (SA) [28] of s to retrieve
the positions of all the oq repetitions of q in s. To construct the full-
text index, a symbol $, preceding any character of Σ in any ordering
relation (e.g., alphabetical) over Σ∪{$}, is used to mark the end of
the string s. For the string s, the i-th, i=0, . . . , n, suffix of s is the
substring s[i, . . . , n]; the integer i is referred to as the index of the
suffix. The SA stores the indexes of all suffixes of the string sorted in
lexicographical order and can be built in O(n) time complexity [31].
The BWT L of s is a permutation of the original string that yields
better compression ratio with run-length encoding techniques; it
can be built in O(n) time from the SA Suf as L[i]=s[Suf [i]−1 mod
n+1], i = 0, . . . , n. Figure 1 shows the computation of the SA and
the BWT for the string alfalfa.
The backward search algorithm employs three data structures:
the SA of the string s, the dictionary C that binds a character
c∈Σ to the number of characters smaller than c in the string s
(according to the order relation employed to sort suffixes in the
SA), and the full-text index ˜L constructed from the BWT L of the
string s. A fundamental building block in this algorithm is the
computation of the function Rank, which, given a character c∈Σ
and an integer i∈{0, . . . , n}, employs the full-text index ˜L to com-
pute the number of occurrences of c in the prefix L[0, . . . , i] of L,
i.e., Rank(c, i) = |{j∈{0, . . . , i} s.t. L[j]=c}|. We will show different
Algorithm 1: Backward search for a string s of length n
Input: q: a substring with length 1 ≤ m ≤ n
Output: Rq: set of positions in s with leading character of occurrences of q
˜L: full-text index constructed from the BWT of s required by Rank
Data:
C: dictionary storing ∀c∈Σ the number of chars in s smaller than c
Suf : the SA with length n+1 of the string s
1 α ← C(q[m−1]), β ← α + Rank(q[m−1], n), Rq ← ∅
2 for i ← m − 2 downto 0 do
c ← q[i], r ← C(c)
α ← r + Rank(c, α − 1)
β ← r + Rank(c, β − 1)
6 for i ← α to β − 1 do
Rq ← Rq ∪ {Suf [i]}
3
4
5
7
8 return Rq
methods to implement this procedure, each employing its own
full-text index ˜L, in our oblivious substring search algorithms.
We provide an operative description of the backward search
algorithm in Alg. 1, pointing the reader interested in the detailed
correctness analysis to [14, 27]. Given a string q with m characters,
Alg. 1 first computes the number oq of occurrences of q in the string
s (lines 2-5) processing the characters of the substring backwards;
at the end of this loop, the number of occurrences oq =β−α. Then,
it retrieves the positions of all these occurrences as the oq con-
secutive entries {Suf [α], . . . , Suf [β−1]} of the SA (lines 6-7). The
two loops in Alg. 1 perform m−1 and oq iterations, respectively; as
each iteration costs O(Tr ank), where Tr ank denotes the computa-
tional cost of the Rank procedure, and O(1), respectively, Alg. 1
has O(m·Tr ank +oq) cost.
Backward Search in a Document Collection. Given a document
collection D with z≥1 documents D1, . . . , Dz, we bind to the i-
th character of the j-th document the pair (doc, o f f ), with doc=j
and o f f =i−1; then, we build a single string s by appending the
delimiter $ to each document and concatenating all the documents,
i.e. s=D1$D2$ . . . Dz$. We replace the index of each suffix of s with
the pair (doc, o f f ) bound to the first character of the suffix at hand.
Given a substring q with m characters, Alg. 1 employs the full-text
index ˜L, the dictionary C and the SA for the string s to compute the
set Rq with oq pairs (doc, o f f ); by grouping all the pairs with the
same document id doc, we obtain, for each document in D, the set of
positions of all the occurrences of q in the document at hand. This
algorithm finds all and only the occurrences of q over D: indeed,
any occurrence of q in a document of D is found in s too; conversely,
each occurrence of q in s identifies m characters with no delimiter
$, which correspond to an occurrence of q in a document of D.
2.2 ORAM Protocols
We now describe in detail Path ORAM [44] and then we sketch the
differences introduced in Ring [36] and Circuit [49] ORAMs.
Path ORAM. Path ORAM splits a dataset of L bits in blocks of B
bits and assigns to each one of them a unique identifier, referred
to as block id (bid). Although l=⌈ L
B ⌉ blocks are sufficient to store
the dataset, Path ORAM increases the number of blocks to N·Z,
where N =2⌊log2(l)⌋+1−1 and Z≥1; these additional blocks, called
dummy, allow to hide how the l real blocks are scrambled inside
the ORAM. The id of dummy blocks is set to a special value ⊥ to
distinguish them from real ones. All the N·Z blocks are partitioned
EfficientObliviousSubstringSearchviaArchitecturalSupportACSAC2020,December7–11,2020,Austin,USAStringIndexa1l1f1a2l2f2a3$0l1f1a2l2f2a3$1f1a2l2f2a3$2a2l2f2a3$3l2f2a3$4f2a3$5a3$6$7𝐹StringSuf$7a3$6a2l2f2a3$3a1l1f1a2l2f2a3$0f2a3$5f1a2l2f2a3$2l2f2a3$4l1f1a2l2f2a3$1𝐿𝑎3𝑓2𝑓1$𝑙2𝑙1𝑎2𝑎1sortingBWTFigure1:BWTLandSASufofthestringalfalfatheaccesspatternsofthequeriesontheoutsourcedfull-textindex.Whenthisinformationiscombinedwiththebackgroundknowl-edgecomingfromtheapplicationdomain,theconfidentialityofthedocumentcollectioniscompromised[9,38].TheseattackspushedfortheavailabilityofefficientPPSSprotocolsavoidingthisinfor-mationleakage.Inmanyoftheexistingsolutions[22,27,42,48]thelowleakagecomesatthecostofmakingthecomputationcostonserversidelinearinthedocumentcollectionsize.ThePPSSprotocoldescribedin[30]allowstoreducesuchcosttopolyloga-rithmic;however,itrequiresO(𝑚+𝑜𝑞)communicationroundsandapolylogarithmicbandwidthcost.RegardingSGXbasedsolutions,privacy-preservingsearchin-dexes,suchasOblix[29],Bunker[2]orHardIDX[15],donotallowtosearcharbitrarysubstringsbutonlyagivensetofkeywords.2PRELIMINARIESInthissection,wedescribethebuildingblocksofObSQRE:back-wardsearchalgorithm[14]andORAMprotocols.2.1BackwardSearchAlgorithmGivenatext,orstring,𝑠with𝑛charactersoveranalphabetΣandasubstring𝑞∈Σ∗with𝑚characters,thebackwardsearchalgorithmemploysafull-textindexbuiltfromtheBurrows-WheelerTransform(BWT)[8]andtheSuffixArray(SA)[28]of𝑠toretrievethepositionsofallthe𝑜𝑞repetitionsof𝑞in𝑠.Toconstructthefull-textindex,asymbol$,precedinganycharacterofΣinanyorderingrelation(e.g.,alphabetical)overΣ∪{$},isusedtomarktheendofthestring𝑠.Forthestring𝑠,the𝑖-th,𝑖=0,...,𝑛,suffixof𝑠isthesubstring𝑠[𝑖,...,𝑛];theinteger𝑖isreferredtoastheindexofthesuffix.TheSAstorestheindexesofallsuffixesofthestringsortedinlexicographicalorderandcanbebuiltin𝑂(𝑛)timecomplexity[31].TheBWT𝐿of𝑠isapermutationoftheoriginalstringthatyieldsbettercompressionratiowithrun-lengthencodingtechniques;itcanbebuiltinO(𝑛)timefromtheSASufas𝐿[𝑖]=𝑠[Suf[𝑖]−1mod𝑛+1],𝑖=0,...,𝑛.Figure1showsthecomputationoftheSAandtheBWTforthestringalfalfa.Thebackwardsearchalgorithmemploysthreedatastructures:theSAofthestring𝑠,thedictionaryCthatbindsacharacter𝑐∈Σtothenumberofcharacterssmallerthan𝑐inthestring𝑠(accordingtotheorderrelationemployedtosortsuffixesintheSA),andthefull-textindex˜𝐿constructedfromtheBWT𝐿ofthestring𝑠.AfundamentalbuildingblockinthisalgorithmisthecomputationofthefunctionRank,which,givenacharacter𝑐∈Σandaninteger𝑖∈{0,...,𝑛},employsthefull-textindex˜𝐿tocomputethenumberofoccurrencesof𝑐intheprefix𝐿[0,...,𝑖]of𝐿,i.e.,Rank(𝑐,𝑖)=|{𝑗∈{0,...,𝑖}s.t.𝐿[𝑗]=𝑐}|.Wewillshowdifferentmethodstoimplementthisprocedure,eachAlgorithm1:Backwardsearchforastring𝑠oflength𝑛Input:𝑞:asubstringwithlength1≤𝑚≤𝑛Output:Rq:setofpositionsin𝑠withleadingcharacterofoccurrencesof𝑞Data:˜𝐿:full-textindexconstructedfromtheBWTof𝑠requiredbyRankC:dictionarystoring∀𝑐∈Σthenumberofcharsin𝑠smallerthan𝑐Suf:theSAwithlength𝑛+1ofthestring𝑠1𝛼←C(𝑞[𝑚−1]),𝛽←𝛼+Rank(𝑞[𝑚−1],𝑛),Rq←∅2for𝑖←𝑚−2downto0do3c←𝑞[𝑖],r←C(c)4𝛼←r+Rank(c,𝛼−1)5𝛽←r+Rank(c,𝛽−1)6for𝑖←𝛼to𝛽−1do7Rq←Rq∪{Suf[𝑖]}8returnRqemployingitsownfull-textindex˜𝐿,inouroblivioussubstringsearchalgorithms.WeprovideanoperativedescriptionofthebackwardsearchalgorithminAlg.1,pointingthereaderinterestedinthedetailedcorrectnessanalysisto[14,27].Givenastring𝑞with𝑚characters,Alg.1firstcomputesthenumber𝑜𝑞ofoccurrencesof𝑞inthestring𝑠(lines2-5)processingthecharactersofthesubstringbackwards;attheendofthisloop,thenumberofoccurrences𝑜𝑞=𝛽−𝛼.Then,itretrievesthepositionsofalltheseoccurrencesasthe𝑜𝑞con-secutiveentries{Suf[𝛼],...,Suf[𝛽−1]}oftheSA(lines6-7).ThetwoloopsinAlg.1perform𝑚−1and𝑜𝑞iterations,respectively;aseachiterationcostsO(𝑇𝑟𝑎𝑛𝑘),where𝑇𝑟𝑎𝑛𝑘denotesthecomputa-tionalcostoftheRankprocedure,andO(1),respectively,Alg.1hasO(𝑚·𝑇𝑟𝑎𝑛𝑘+𝑜𝑞)cost.BackwardSearchinaDocumentCollection.GivenadocumentcollectionDwith𝑧≥1documents𝐷1,...,𝐷𝑧,webindtothe𝑖-thcharacterofthe𝑗-thdocumentthepair(𝑑𝑜𝑐,𝑜𝑓𝑓),with𝑑𝑜𝑐=𝑗and𝑜𝑓𝑓=𝑖−1;then,webuildasinglestring𝑠byappendingthedelimiter$toeachdocumentandconcatenatingallthedocuments,i.e.𝑠=𝐷1$𝐷2$...𝐷𝑧$.Wereplacetheindexofeachsuffixof𝑠withthepair(𝑑𝑜𝑐,𝑜𝑓𝑓)boundtothefirstcharacterofthesuffixathand.Givenasubstring𝑞with𝑚characters,Alg.1employsthefull-textindex˜𝐿,thedictionaryCandtheSAforthestring𝑠tocomputethesetRqwith𝑜𝑞pairs(𝑑𝑜𝑐,𝑜𝑓𝑓);bygroupingallthepairswiththesamedocumentid𝑑𝑜𝑐,weobtain,foreachdocumentinD,thesetofpositionsofalltheoccurrencesof𝑞inthedocumentathand.Thisalgorithmfindsallandonlytheoccurrencesof𝑞overD:indeed,anyoccurrenceof𝑞inadocumentofDisfoundin𝑠too;conversely,eachoccurrenceof𝑞in𝑠identifies𝑚characterswithnodelimiter$,whichcorrespondtoanoccurrenceof𝑞inadocumentofD.2.2ORAMProtocolsWenowdescribeindetailPathORAM[44]andthenwesketchthedifferencesintroducedinRing[36]andCircuit[49]ORAMs.PathORAM.PathORAMsplitsadatasetof𝐿bitsinblocksof𝐵bitsandassignstoeachoneofthemauniqueidentifier,referredtoasblockid(bid).Although𝑙=⌈𝐿𝐵⌉blocksaresufficienttostorethedataset,PathORAMincreasesthenumberofblocksto𝑁·𝑍,where𝑁=2⌊log2(𝑙)⌋+1−1and𝑍≥1;theseadditionalblocks,calleddummy,allowtohidehowthe𝑙realblocksarescrambledinsidetheORAM.Theidofdummyblocksissettoaspecialvalue⊥todistinguishthemfromrealones.Allthe𝑁·𝑍blocksarepartitionedACSAC 2020, December 7–11, 2020, Austin, USA
N. Mainardi, D. Sampietro, A. Barenghi, G. Pelosi
in N buckets, each one containing Z blocks; then, the buckets are
arranged as a balanced complete binary tree with N nodes, each
storing one bucket. Each bucket is encrypted with a semantically
secure scheme; a bucket is full if it contains Z real blocks. The
leaves of the tree are labeled with a leaf id lid, a log2(N +1)−1
N +1
2
bits-wide integer that identifies the path of the tree to reach the leaf
at hand; specifically, the i-th bit of lid (i=0 is the least significant
bit) is 0 (resp. 1) if the leaf belongs to the left (resp. right) subtree
of the i-th node in the path from the root to the leaf at hand.
To retrieve real blocks from the ORAM, each of them is mapped
to a lid, which identifies the path of the tree where the block must
reside; this mapping is stored in a data structure called position map.
Any modification of the tree must preserve this mapping, otherwise
blocks cannot be retrieved any longer. All real blocks store their
corresponding lid in order to be placed in the proper path. Another
data structure, called stash, stores the accessed real blocks that have
not been pushed back to the ORAM tree yet. The stash analysis of
Path ORAM [44] proves that for Z≥4 the number of blocks in the
stash, denoted with S, is O(1) with overwhelming probability; thus,
the stash can be stored at client side to conceal it from the server.
The Access procedure retrieves the content of a specific block
from the ORAM. Given a block id bid, the procedure obtains the
leaf id lid corresponding to block bid from the position map, and up-
dates the corresponding entry with a randomly sampled leaf id lid′.
Then, it invokes two other procedures: FindBlock(bid, lid, lid′)
and Eviction(lid). The former starts by retrieving from the server
the whole path containing the leaf with id lid. The client decrypts
the fetched path, appends all the real blocks to the stash and looks
for the bid block in it. If the block is found, its leaf id is replaced with
lid′. FindBlock returns the content of the block, if found, ⊥ other-
wise. The Eviction procedure writes back the fetched path, with
id lid, to the ORAM tree, filling the buckets with as many blocks
as possible from the stash. The client computes, for each block in
the stash, the deepest bucket of the evicted path that can store the
block at hand and, if found, it moves the block from the stash to
this bucket. A bucket can store a block with leaf id lid′ if it is not
full and it belongs to both the evicted path, with id lid, and the path
with id lid′ (to preserve the property that a block is found on the
path corresponding to its leaf id). The eviction stops when no more
blocks in the stash can be moved to the evicted path; thus, the client
re-encrypts the path and writes it back to the ORAM. Both proce-
dures cost O(log(N)·Z·B) on server side and O(B(S + log(N)·Z))
on client side, while their bandwidth is O(log(N)·Z·B), as the client
and the server exchange a whole path.
Path ORAM allows to hide the accessed block only if the secret
mapping between block ids and leaf ids, stored in the position map,
is concealed from the server; nonetheless, as the position map has
l entries, each of log(N) bits, it cannot be stored by a client with
limited storage capabilities. To overcome this issue, another ORAM,
denoted as ORAM1, is employed to store the position map: indeed,
if each block of ORAM1 contains up to C entries of the position map,
C ⌉ entries, thus reducing the size
the position map of ORAM1 has ⌈ l
of the position map by a factor of C. By recursively applying this
strategy to store the position maps of smaller ORAMs, eventually
the position map becomes compact enough to be stored at client side.
Indeed, by employing Θ(logC(l)) recursive ORAMs, the size of the
position map of the smallest ORAM becomes O(1). This recursive
strategy introduces a logarithmic factor in both the bandwidth and
the computational cost, which become O(C·B·log2(N)·Z).
Ring ORAM. Ring ORAM improves over Path ORAM in two ways:
the FindBlock procedure achieves a bandwidth of O(B·log(N)) by
fetching from the server a single block per bucket instead of the
entire bucket; the Eviction procedure is performed once every
A≥1 accesses to the ORAM instead of being performed for each
access. To reduce the bandwidth of FindBlock procedure, each
bucket is enriched with some metadata; instead of fetching entire
buckets along the path lid, the FindBlock procedure retrieves
only their metadata. Then, for each bucket, FindBlock invokes the
SelectOffset procedure which selects the offset of the block bid,
if found in the bucket, or the offset of a dummy block otherwise. To
ensure that there are enough dummy blocks in each bucket to be
chosen by the SelectOffset procedure, buckets in the Ring ORAM
have Z +D blocks, where the additional D slots always store dummy
blocks. To prevent the adversary from learning if SelectOffset
chooses a real or dummy block, all of them are randomly shuffled.
The offsets computed by SelectOffset are sent to the server, which
retrieves the corresponding blocks from the ORAM tree.
The only real block fetched from the ORAM in the FindBlock
procedure is appended to the stash, thus making an Eviction after
each FindBlock unnecessary. Indeed, an eviction happens every
A≥1 accesses, a parameter of Ring ORAM that depends on Z. In
order to maximize the average number of blocks evicted from the
stash, the paths to be evicted are chosen according to a deterministic
schedule, following the ids of the paths in increasing order. This
guarantees that the overlap between two consecutive evicted paths
is limited to the bucket stored in the root node of the ORAM tree,
as a bucket at level i of the tree belongs to the evicted path every
2i consecutive evictions.
Circuit ORAM. Circuit ORAM is a refinement of Path ORAM tai-
lored for hardware implemented clients, where the server is a large
memory on the same machine (or even on the same die). There-
fore, this ORAM trades off a low bandwidth for the compactness of
the circuit implementing the ORAM client. This is achieved with a
simplified Eviction procedure that evicts at most one block from
the stash. The stash growth is limited as FindBlock appends at
most the block with id bid to the stash, if found in the fetched
path. This path, with the block bid replaced by a dummy one, is
re-encrypted and written back to the ORAM tree. The path to be
evicted is chosen with the same deterministic schedule of Ring
ORAM to minimize the probability that no block can be evicted
from the stash. To avoid a monotonic growth of the stash in case no