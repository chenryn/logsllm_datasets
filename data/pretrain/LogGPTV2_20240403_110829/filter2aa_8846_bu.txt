序问题自定义
代码分析；
B. 为代码审核建
立发布关卡。
评估 ✦大多数的项目
团队是否拥有基
于普遍问题的审
核清单列表？
✦项目团队是否
通常针对选择的
高风险代码执行
审核？
✦大多数项目团
队是否可以使用
自动的代码分析
工具去查找安全
问题？
✦大多数项目业
务拥有者是否持
续要求并审核来
自代码审核的结
果？
✦项目团队是否
根据应用程序特
定的编码标准，使
用自动化的方式
去检查代码？
✦常规项目审核
是否需要一个为
发布代码审核结
果的最低线？
结果 ✦检验普通代码
中可能被发现或
导致攻击的漏洞；
✦为导致严重安
全影响的编码错
误而进行的简便
审核；
✦为安全保证的
基础代码级审慎
调查。
✦开发过程实现
了代码级安全漏
洞的持续自我检
查；
✦将常规分析的
结果，以对每个团
队安全编码习惯
的历史数据进行
编译；
✦利益相关者注
意到没有缓和的
漏洞，从而做出更
好的权衡分析。
✦增加对代码分
析的准确性和适
用性的信心结果；
✦整个组织对安
全编码期望的基
线；
✦项目团队为判
断代码级安全设
立了目标。
63
代码审核 CR1
随机查找基本的代码级漏洞和其他高风险安全问题
措施
A. 根据已知安全需求建立审核检查列表
根据项目已知的安全需求，推导出针对安全性的简便
代码检查列表。这些检查可以具体到围绕功能需求的安全
问题的检测，或针对基于执行语言、平台、代表性技术堆
栈等的安全编码最佳实践的检测。由于这些变化，往往需
要一套检查列表以覆盖在组织内部不同类型的软件开发。
不论是用公开可用的资源进行创建或者购买，技术利
益相关者，比如：开发经理、架构师、开发人员和安全审
计员，应审核清单列表的有效性和可行性。重要的是要保
持列表简短并且简单，以通过对于代码的人工或者简单搜
索工具查找高优先级问题。自动化代码分析工具也可以用
来实现同一目标，但为了使扫描和审核过程更加有效，也
应该对分析工具进行定制，以将总体安全检查的整体集合
缩小为一个有价值的小集合。
开发人员应为他们的工作职能大概了解列表清单的目
标。
B. 为高风险代码执行定点审核
由于代码级的漏洞在关系到软件安全性的关键部分发
生，会带来明显的影响，项目团队应针对常见漏洞进行高
风险模块的审核。高风险的功能的常见例子包括：身份验
证模块、访问控制增强点、会话管理模块、外部界面、输
入校验器和数据解析器等。
利用代码审核检查列表，该分析可作为开发流程的一
个普通部分执行，但进行更改时，项目团队成员会被分配
给要审核的模块。安全审计员和自动审核工具也可以被用
于进行审核处理。
在更改和审核高风险代码的开发周期中，开发经理应
当在其他项目利益相关者的介入下，将找到的结果进行分
类，并适当的将修复工作进行优先级排序。
结果
✦检验普通代码中可
能被发现或导致攻击
的漏洞；
✦为导致严重安全影
响的编码错误而进行
的简便审核；
✦为安全保证的基础
代码级审慎调查。
成功指标
✦>80％的项目在过去
6个月里大概了解了相
关代码审核检查表；
✦>50％的项目在过去
6个月里对高风险代码
执行了代码审核；
✦开发团队代码审核
列表的有用性值，大于
3.0 Likert值。
成本
✦扩充或者许可代码
审核检查列表；
✦高风险代码审核活
动的项目持续开销。
人员
✦开发人员（2－4天/
年）
✦架构师（1－2天/年）
✦经理（1－2天/年）
✦业务拥有者（1天/
年）
相关等级
✦安全需求－1
 64
代码审核 CR2
通过自动化方式在开发过程中使代码审核更加准确和有效
措施
A. 使用自动化的代码分析工具
很多代码级的安全漏洞因复杂而非常难以理解，往往
需要仔细检查才能被发现。但是，有很多有用的自动化解
决方案，可针对bug和漏洞进行自动得代码分析。
有商业的和开源的产品覆盖了常见的编程语言和框
架。对于选择一个适当的代码分析解决方案，需要根据以
下一些要素，包括：检查的深度和准确性、产品的可用性
和使用模型、可扩展性和自定义功能、组织架构和技术堆
栈的适用性等。
在选择过程中，由通晓安全知识的技术人员以及开发
人员和开发管理人员介入，并与利益相关者一起审核总体
结果。
B. 将代码分析集成到开发流程当中
一旦选中代码分析解决方案后，它必须被纳入到开发
过程中，以鼓励项目团队利用它的功能。要做到这一点的
一个有效方法是设置基础架构，在代码开发时直接进行自
动扫描；或是从项目代码库获取代码进行自动扫描。这样，
可以及早获得结果，从而使开发团队能够在发布以前进行
自我检查。
在旧系统或正在进行的大型项目中，一个潜在的问题
是，代码扫描器通常会报告发布以前尚未更新模块的结果。
如果自动扫描设置为定期运行，避免审核开销的有效策略
是：考虑限制那些已被添加、删除、或自上次扫描后发生
的改变。如果不能忽略剩下的结果，那么开发经理应当与
安全审计员、利益相关者和项目团队合作，制订一个针对
其他结果的解决计划。
如果在发布以前仍然存在代码审核未能解决的结果，
那么项目利益相关者必须审核并接受这些结果。
结果
✦开发过程实现了代
码级安全漏洞的持续
自我检查；
✦将常规分析的结果，
以对每个团队安全编
码习惯的历史数据进
行编译；
✦利益相关者注意到
没有缓和的漏洞，从而
做出更好的权衡分析。
额外成功指标
✦>50％的项目在过去
6个月里进行了代码审
核并由利益相关者认