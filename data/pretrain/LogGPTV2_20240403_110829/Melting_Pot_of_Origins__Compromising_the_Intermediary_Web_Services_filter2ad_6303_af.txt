### Transition from Traditional to Modern Web Security Threats

Lerner et al. [38] propose an attack that rewrites pages on the Wayback Machine, a major web archive. The Wayback Machine rewrites URLs in archived content to point to archived versions of the same domain. However, when a URL is dynamically generated by JavaScript, the URL rewriting fails, and the browser makes requests to the live web. If the response from the live web contains malicious JavaScript, the entire archival page can be compromised due to the ineffectiveness of the Same-Origin Policy (SOP). This attack requires a target website to refer to a third-party URL with an expired domain name that the attacker can obtain. In contrast, our attacks are more feasible; they are triggered simply by a victim user visiting rehosted malicious pages.

### Abusable Browser Resources

Browser resources introduced with HTML5, such as service workers and AppCache, as well as traditional resources like cookies, can be abused for various malicious purposes.

#### Service Worker

The Progressive Web App (PWA) is designed to provide native app-like experiences even when the browser is offline. The service worker, a key component of PWA, is an event-driven worker script implemented in JavaScript [23]. It has the ability to intercept network requests from the corresponding website. Concerns have been raised [13], [66] about the potential for abuse in web hosting services that share a single domain name for different users. However, the possibility of abusing service workers has been overlooked in web rehosting, as evidenced by the fact that our attack works even on major services provided by top companies. We have demonstrated that an attacker can deploy malicious content and scripts on web rehosting services by exploiting rehosting rules, similar to deploying them on web hosting services.

Recent studies have suggested other advanced attack scenarios. Lee et al. demonstrated cryptocurrency mining using malicious service workers, successfully mining Monero coins through 225K verified transactions in a day [36]. Additionally, Papadopoulos et al. developed a monitoring framework to allow malicious service workers to abuse browser resources, identifying harmful operations such as DDoS attacks, distributed password cracking, malicious data hosting, proxies for hidden networks, and cryptocurrency mining [47].

#### Application Cache (AppCache)

AppCache, a feature of HTML5, allows web applications to cache content in the browser's storage for offline access. Similar to service workers, AppCache has also been known to be exploitable on web hosting services that share a single domain for different users [42]. Lee et al. demonstrated a timing side-channel attack using AppCache, allowing a third-party attacker to identify cross-origin resource status, such as the login status of a victim's browser [37]. Goethem et al. also showed that an attacker can reveal personally identifiable information of a target, such as social accounts, by inspecting the response time and size of the cross-origin resource stored in AppCache [18], [64].

#### Password Manager

Password managers provide useful functionalities, including generating unique and strong passwords, securely storing passwords, and auto-filling forms. Silver et al. examined auto-fill policies in browser-built-in password managers and found that several policies enable an attacker on a malicious website to extract passwords from the user's password manager without any user interaction [54]. Stock and Johns mentioned the risk of XSS-based credential stealing from auto-filled login forms [59]. Our credential theft attack (Section III-B3) also exploits this vulnerable auto-fill behavior of password managers.

#### Cookies

It is well-known that HTTP cookies can be stolen via cross-site scripting (XSS) and eavesdropping. If a user's cookie is stolen, an attacker with the stolen cookie can gain access to personal information or account functionalities on the corresponding website. The HttpOnly attribute prevents attackers from remotely obtaining cookies through malicious scripts (i.e., XSS), while HTTPS-protected websites can safeguard cookies against eavesdropping. The HTTP Strict Transport Security (HSTS) mechanism [27] enforces browsers to use only HTTPS communication. Although many studies have revealed partial deployment of HttpOnly, HSTS, and HTTPS on websites [34], [57], [71], both academic and industrial efforts promote and increase their adoption. Unfortunately, regardless of whether these technologies are deployed, an attacker can still perform session hijacking and injection (Section III-B5) by leveraging the properties of web proxies (i.e., cookie relaying).

### Conclusion

In this work, we explored the security flaws of web rehosting services. These services typically offer a single origin to unify multiple different origins, creating a "melting pot of origins" that can violate the SOP if not carefully managed. Based on the intrinsic vulnerabilities of these services, we derived five attacks targeting users of web rehosting services. Notably, these attacks exploit several browser resources, including service workers, AppCache, browser permissions, password managers, localStorage, and cookies. We argue that these modern and traditional resources enable attackers to track both past and future activities of victims. Through extensive analyses of 21 web rehosting services, we demonstrated that these five attacks are feasible and need to be prevented.

Web rehosting, which aims to enhance web access openness, paradoxically deviates from end-to-end integrity and provides opportunities for third-party attackers to compromise communication. We are currently working with vulnerability coordinators and web rehosting providers to deploy countermeasures. While we have revealed the flaws in web rehosting, further unexpected flaws in the web ecosystem may exist and will be exacerbated by the evolution of web features like HTML5 and PWAs. Identifying these flaws and developing countermeasures are essential areas for future security research. We hope that our work fosters the development of more secure solutions to ensure web security and maintain the openness of web access.