location \~\* \\.(mp4)\$ { #可添加多个
expires 30d; //定义客户端缓存时间为30天
}
说明:location \~\* \\.(jpg\|jpeg\|gif\|png\|css\|js\|ico\|xml)\$
,定义缓存类型,
\[root@proxy \~\]# cp /usr/share/backgrounds/day.jpg
/usr/local/nginx/html
\[root@proxy \~\]# nginx -s reload
\[root@proxy lnmp_soft\]# firefox http://192.168.4.5/day.jpg
访问之后,再去about:cache查看缓存信息
## 步骤六：日志切割
> 日志文件越来越大怎么办？单个文件10G? 如何切割？（非常常见的面试题）
步骤：1. 把旧的日志重命名 2. kill USR1 PID(nginx的进程PID号)
可查询进程命令: ps pgrep ss cat nginx.pid
\[root@proxy \~\]# ps aux \|grep nginx
\[root@proxy \~\]# pgrep nginx
\[root@proxy \~\]# ss -lnp \|grep nginx
\[root@proxy \~\]# pidof nginx
**kill命令**：向进程发送控制信号，以实现对进程管理，不单是杀死进程
显示当前系统可用信号：
\# kill -l 列出kill支持能发出的信号
常用信号：1) SIGHUP:
无须关闭进程让其重读配置文件，就是不重启就让修改的配置生效；
2\) SIGINT: 中止正在运行的进程；相当于Ctrl+c；
9\) SIGKILL: 杀死正在运行的进程；
15\) SIGTERM：终止正在运行的进程，温柔的关闭；
18\) SIGCONT：进程继续态
19\) SIGSTOP：进程暂停态
指定信号的方法：(1) 信号的数字标识；1, 2, 9
\(2\) 信号完整名称；SIGHUP
\(3\) 信号的简写名称；HUP，就是把前面的SIG去掉就行
向进程发信号：kill \[-SIGNAL\] PID\...
Kill 发送一个信号给进程,不填参数就是 -15
Kill 9031 === kill -15 9031 #告诉9031自杀
Kill -9 9031 #告诉9031 必须死,
kill -USR2 9031 ==kill -12 9031 #告诉9031进程,日志被删除,等于是-12参数
Kill -19 进程号 暂停进程
kill -18 进程号 继续进程
1）手动执行
备注：/usr/local/nginx/logs/nginx.pid文件中存放的是nginx的进程PID号。
\[root@proxy \~\]# mv access.log access2.log
\[root@proxy \~\]# kill -USR1 \$(cat /usr/local/nginx/logs/nginx.pid)
2）自动完成
每周5的03点03分自动执行脚本完成日志切割工作。
\[root@proxy \~\]# vim /usr/local/nginx/logbak.sh
\-\-\-\--脚本\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#!/bin/bash
date=\`date +%Y%m%d\`
logpath=/usr/local/nginx/logs
mv \$logpath/access.log \$logpath/access-\$date.log
mv \$logpath/error.log \$logpath/error-\$date.log
kill -USR1 \$(cat \$logpath/nginx.pid)
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\[root@proxy \~\]# crontab -e
03 03 \* \* 5 /usr/local/nginx/logbak.sh
## 步骤七：对页面进行压缩处理
1）修改Nginx配置文件
\[root@proxy \~\]# cat /usr/local/nginx/conf/nginx.conf
http {
.. ..
gzip on; //开启压缩
gzip_min_length 1000; //小文件不压缩
gzip_comp_level 4; //压缩比率
gzip_types text/plain text/css application/json application/x-javascript
text/xml application/xml application/xml+rss text/javascript;
//对特定文件压缩，类型参考mime.types
.. ..
}
MP3本身就是压缩文件,
查看文件类型:\[root@proxy \~\]# vim /usr/local/nginx/conf/mime.types
所有的浏览器都是自带解压器
## 步骤八：服务器内存缓存
1）如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。
http {
open_file_cache max=2000 inactive=20s;
open_file_cache_valid 60s;
open_file_cache_min_uses 5;
open_file_cache_errors off;
//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
//文件句柄的有效时间是60秒，60秒后过期
//只有访问次数超过5次会被缓存
//缓存报错关闭,缓存出错不报警
}
如果a文件被缓存到内存,20s内无访问即被删掉,60s后将被删掉,如a又被访问了5次将被重新缓存到内存,
# 已安装好的nginx添加模块
## 1 查看当前nginx编译参数
\[root@lnmp01 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx -V
#查看已有模块
nginx version: nginx/1.12.2
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)
built with OpenSSL 1.0.2k-fips 26 Jan 2017
TLS SNI support enabled
configure arguments: \--with-http_ssl_module \--with-stream
## 2 添加未编译安装模块（停掉服务）
\[root@lnmp01 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx -s stop
\[root@lnmp01 nginx-1.12.2\]# netstatu -unltp\|grep 80
重新编译
\[root@lnmp01 nginx-1.12.2\]# ./configure \--with-http_ssl_module
\--with-stream \--with-http_stub_status_module
checking for OS
注意：千万不要make install，否则就是覆盖安装
## 3 替换nginx二进制文件 
当前nginx文件最好备份下，避免出问题。
停止nginx服务
\[root@lnmp01 nginx-1.12.2\]# cp /usr/local/nginx/sbin/nginx
/usr/local/nginx/sbin/nginx.bak
\[root@lnmp01 nginx-1.12.2\]# pwd
/root/lnmp_soft/nginx-1.12.2
\[root@lnmp01 nginx-1.12.2\]# cp objs/nginx /usr/local/nginx/sbin/
重启下nginx服务，重新查看模块加载情况：
\[root@lnmp01 objs\]# /usr/local/nginx/sbin/nginx -V
nginx version: nginx/1.12.2
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)
built with OpenSSL 1.0.2k-fips 26 Jan 2017
TLS SNI support enabled
configure arguments: \--with-http_ssl_module \--with-stream
\--with-http_stub_status_module
# Nginx的location基础配置
=开头表示精确匹配，优先级最高。如果找到了这个精确匹配，则停止查找
如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。
\^\~ 开头表示uri以某个常规字符串开头，不是正则匹配
\~ 开头表示区分大小写的正则匹配;
\~\* 开头表示不区分大小写的正则匹配
/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到
优先级为： = \> 完整路径 \> \^\~ \> \~、\~\* \> 部分起始路径 \> /
location = / {
\# 精确匹配 / ，主机名后面不能带任何字符串，匹配到后，停止继续匹配
\[ configuration A \]
}
location / {
\# 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求
\# 但是正则和最长字符串会优先匹配
\[ configuration B \]
}
location /documents/ {
\# 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索
\# 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
\[ configuration C \]
}
location \~ /documents/Abc {
\# 正则匹配，区分大小写。
\# 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索
\# 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
\[ configuration CC \]
}
location \^\~ /images/ {
\# 匹配任何以 /images/
开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。
\[ configuration D \]
}
location \~\* \\.(gif\|jpg\|jpeg)\$ {
\# 匹配所有以 gif,jpg或jpeg 结尾的请求
\# 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 \^\~
到达不了这一条正则
\[ configuration E \]
}
location /images/ {
\# 字符匹配到 /images/，继续往下，会发现 \^\~ 存在
\[ configuration F \]
}
location /images/abc {
\# 最长字符匹配到 /images/abc，继续往下，会发现 \^\~ 存在
\# F与G的放置顺序是没有关系的
\[ configuration G \]
}
location \~ /images/abc/ {
\# 只有去掉 config D 才有效：先最长匹配 config G
开头的地址，继续往下搜索，匹配到这一条正则，采用
\[ configuration H \]
}
location \~\* /js/.\*/\\.js
按照以上的location配置，如下列举部分实际匹配的情况：
/ -\> config A 精确完全匹配，即使/index.html也匹配不了
/downloads/download.html -\> config B 匹配B以后，往下没有任何匹配，采用B
/images/1.gif -\> configuration D 匹配到F，往下匹配到D，停止往下
/images/abc/def -\> config D 最长匹配到G，往下匹配D，停止往下
#你可以看到
任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序
/documents/document.html -\> config C 匹配到C，往下没有任何匹配，采用C
/documents/1.jpg -\> configuration E 匹配到C，往下正则匹配到E
/documents/Abc.jpg -\> config CC
最长匹配到C，往下正则顺序匹配到CC，不会往下到E
所以实际使用中，个人觉得至少有三个匹配规则定义，如下：
#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。
#这里是直接转发给后端应用服务器了，也可以是一个静态首页
\# 第一个必选规则
location = / {
proxy_pass http://tomcat:8080/index
}
\# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项
\# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用
location \^\~ /static/ {
root /webroot/static/;
}
location \~\* \\.(gif\|jpg\|jpeg\|png\|css\|js\|ico)\$ {
root /webroot/res/;
}
#第三个规则就是通用规则，用来转发动态请求到后端应用服务器
#非静态文件请求就默认是动态请求，自己根据实际把握
#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了
location / {
proxy_pass http://tomcat:8080/
}
# Nginx if指令
if判断指令
语法为if(condition){\...}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：
当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false
直接比较变量和内容时，使用=或!=
\~正则表达式匹配，\~\*不区分大小写的匹配，!\~区分大小写的不匹配
-f和!-f用来判断是否存在文件
-d和!-d用来判断是否存在目录
-e和!-e用来判断是否存在文件或目录
-x和!-x用来判断文件是否可执行
案例：
if (\$http_user_agent \~ MSIE) {
rewrite \^(.\*)\$ /msie/\$1 break; #break :
停止执行当前虚拟主机的后续rewrite指令集
} //如果UA包含\"MSIE\"，rewrite请求到/msid/目录下
if (\$http_cookie \~\* \"id=(\[\^;\]+)(?:;\|\$)\") {
set \$id \$1;
} //如果cookie匹配正则，设置变量\$id等于正则引用部分
if (\$request_method = POST) {
return 405;
} //如果提交方法为POST，则返回状态405（Method not
allowed）。return不能返回301,302
if (\$slow) {
limit_rate 10k;
} //限速，\$slow可以通过 set 指令设置