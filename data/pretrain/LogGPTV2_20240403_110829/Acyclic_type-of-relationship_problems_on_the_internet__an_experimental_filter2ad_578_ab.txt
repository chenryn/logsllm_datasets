and prolongated with the number of the sending AS as the
new leftmost AS number in the path.
3.2 The Valley-Free Path Model
Valley-freeness is a graph-theoretical consequence of the Se-
lective Export Rule. Let G = (V, E) be an undirected (sim-
ple) graph. We assume that (u, v) ∈ E ⇔ (v, u) ∈ E. An
orientation ϕ of G is a mapping from E to T where T de-
notes the set of possible edge-types, which are taken from:
→ indicating a customer-to-provider relationship
← indicating a provider-to-customer relationship
−− indicating a peer-to-peer relationship
↔ indicating a sibling-to-sibling relationship
Throughout this paper, we only consider orientations ϕ that
are consistent with respect to →. That is, for all (u, v) ∈
E, ϕ(u, v) =← ⇔ ϕ(v, u) =→. Thus, if we allow → as
a possible edge type, then we immediately allow ← as a
Instead of ϕ(u, v) =→ for an
possible edge type as well.
edge (u, v) ∈ E we also write u → v.
We extend ϕ from edges to walks. Let (v0, v1, . . . , vm) be
any walk in a graph G. Then ϕ(v0, v1, . . . , vm) is deﬁned
to be ϕ(v0, v1)ϕ(v1, v2) . . . ϕ(vm−1, vm), i.e., in our setting a
word in {←,→,−−,↔}∗. We typically use regular expres-
sions to describe walk types given an orientation. An im-
portant property of orientations is valley-freeness, which is
stated here in terms of regular patterns of paths.
Figure 2: Non-isomorphic triads. All triads in the upper row
are forbidden and all triads in the lower row are allowed.
4. THE MAXIMUM ACYCLIC TYPE-OF-
RELATIONSHIP PROBLEM
An algorithm for ﬁnding an acyclic and valley-free orien-
tation of an AS graph for a given path set is presented in
[14]. We modify this algorithm to ﬁnd an acyclic orienta-
tion which is valley-free for a large part of the AS paths (even
when there is no valley-free orientation including all paths)
followed by some improvements. Formally, we consider the
following optimization problem (see [2] for notation):
Definition 1
([8]). Let G be a graph and let ϕ(G) be
an orientation of G. A loopless path (v0, . . . , vm) is said to
be valley-free in ϕ(G) if and only if ϕ(v0, . . . , vm) belongs to
{→,↔}∗{←,↔}∗ ∪ {→,↔}∗ −−{←,↔}∗
.
The valley-freeness of paths abstracts the condition that
ASes never route data from one of their providers to another
of their providers because instead of earning money, they
would have to pay twice for these data streams.
P ⊆S
Theorem 2
([8]). Let G = (V, E) be an AS graph and
let P be a set of AS paths of all BGP routing tables, i.e.,
v∈V R(v). If all ASes export their routes according to
the Selective Export Rule, then there is an orientation of P
such that all paths in P are valley-free.
3.3 The Acyclicity Assumptions
Following [14], we summarize reasonable acyclicity struc-
tures within a connectivity graph, i.e., patterns of oriented
cycles which are forbidden to be contained in the graph. An
oriented cycle (in its simplest form) can be interpreted as
someone being its own provider and customer. The follow-
ing deﬁnition of an oriented cycle has been proposed in [14].
Definition 3
([14]). Let G be any graph, and let ϕ(G)
be an orientation of G. Let C be any minimal cycle of G,
i.e., a cycle that does not contain a vertex twice. C is said
to be an oriented cycle of ϕ(G) if and only if ϕ(C) lies in
{−−,↔}∗ → {→,−−,↔}∗ ∪
{−−,↔}∗ ← {←,−−,↔}∗ ∪ ↔∗ −− ↔∗
.
To exemplify the deﬁnition, Figure 2 shows the 16 non-
isomorphic triads of the 64 possible orientations of a com-
plete graph on three vertices. Half of them are oriented
cycles according to Deﬁnition 3 and half of them are not.
Note that in the case that ϕ does not exhaust the full type
set {→,−−,↔}, the patterns of oriented cycles simplify. For
instance, if the type set is {→}, then we obtain that a min-
imal cycle C is an oriented cycle if and only if ϕ(C) belongs
to →∗ or ←∗ which is the usual understanding of a cycle.
We call an orientation acyclic if it contains no oriented cy-
cles. Testing whether an orientation is acyclic can be done
fastly by standard techniques (see, e.g., [3, 14]).
AS path set P and induced AS Graph
Problem: Maximum Acyclic ToR
Input:
Solution: A subset P 0 ⊆ P allowing an acyclic
Measure: The cardinality kP 0k of the subset P 0
and valley-free orientation
We mention some theoretical results showing that this
problem is computationally diﬃcult. All proofs can be found
in the full version [11] of the paper.
Theorem 4. Unless P = NP, there is no polynomial-
time approximation scheme for Maximum Acyclic ToR.
The decision version of Maximum Acyclic ToR consists
of all instances (P, k) such that P is a (multi)set of AS paths
containing a subset P 0 ⊆ P which has at least k paths and
which allows an acylic and valley-free orientation.
Corollary 5. The
decision version of Maximum
Acyclic ToR is NP-complete.
On the positive side, we do not know any non-trivial
bound on the approximation quality of Maximum Acyclic
ToR. However, if we restrict path lengths, then we obtain
a constant approximation ratio.
Theorem 6. Maximum Acyclic ToR limited to paths
of length at most k ∈ N+ can be approximated within a factor
of
(k+1)! of the optimum in polynomial time.
2k
3 ≈ 33.3%, for length 4 it is
3 ≈ 66.7%, for length 3 it is 1
Unfortunately, these fractions decrease very quickly as
path length increases, e.g., for path length 2 the fraction
is 2
15 ≈ 13.3%, and for length 5 it is already 2
2
4.1 The Basic Heuristic
The algorithm from [14] for testing whether a path set allows
acyclic and valley-free orientations is based on the observa-
tion that a leaf AS (i.e., one that itself has no customers)
cannot be in the middle of any AS path. We describe it com-
bined with the extension for discarding an interfering path,
but before digging into the details we ﬁx some notation.
45 ≈ 4.4%.
ACBACBABCABCABCABCABCABCABCABCABCABCABCABCABCABCAlgorithm 1 Heuristic “AHeu”
1: Input: AS path set P , AS graph G = (V, E) for P
2: Output: set N of discarded paths, an acyclic orientation of
G with → edges (valley-free for all paths in P \ N )
while F 6= ∅ do
R := R ∪ {u}
if R = V then done := true
else
v := argminu∈V \R count(u)
foreach path p ∈ P with v ∈ p do
remove vertex u from F
foreach v ∈ V \ R with {u, v} ∈ E do
orient {u, v} as customer-to-provider
foreach p ∈ P with u and v as neighbors do
if v is inner node of p relative to R then
count(v) := count(v) − 1
if count(v) = 0 then F := F ∪ {v}
3: count(v) := number of paths for which v is an inner node
4: F := {v ∈ V | count(v) = 0}, R = ∅, N = ∅, done := false
5: while ¬ done do
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: return N
count(u) := count(u) − 1
if count(u) = 0 then F := F ∪ {u}
if v is an inner node of p relative to R then
N := N ∪ {p}
foreach inner node u of p relative to R do
During its execution the algorithm removes ASes which
have been ﬁnished. To avoid having to change all the paths,
we manage a set R of removed nodes. Given such a set, a
node v in a path p is called inner node of p relative to R if
it is surrounded in p by nodes u and w with u, w /∈ R. A
node not in R that is not an inner node for all paths of the
paths set is called free.
In the algorithm (details in Algorithm 1) we count for each
node v in count(v) the number of paths for which v is an
inner node. The set F of free nodes is then easily initialized
by all nodes with count = 0. The main loop (lines 5–23) can
be separated into two phases. The ﬁrst phase (lines 6–14) is
taken from the algorithm in [14]. While there is a free node
u in F we interpret it as a leaf AS and thus orient the edges
to its neighbors (not yet in R) as customer-to-provider. As it
is removed afterwards (i.e., put into R) we adjust the count
variables accordingly to ﬁnd nodes which are now freed. If
we can remove all ASes this way (R = V ) we know that
the orientation is valley-free and acyclic, as the nodes have
been removed in topologically sorted order (each node had
indegree 0 when it was removed).
If the ﬁrst phase ran out of free nodes before all ASes
could be removed, we need to create additional free nodes
by discarding paths (starting from line 15). As we want to
discard as little paths as possible, we select a node v which is
an inner node for the minimal number of paths (as indicated
by count(v)). By removing all those paths, v becomes a free
node and we continue with the ﬁrst phase.
We want to point out that the algorithm can easily be
modiﬁed to work for a weighted path set, where the goal con-
sists of minimizing the overall weight of the dropped paths.
4.2 Handling Pre-knowledge
If we already have partial information on the AS relation-
ships we would like to incorporate this knowledge thereby
improving the results of the algorithm.
In [14] the inﬂu-
ence of pre-knowledge on the complexity of testing whether
an acyclic and valley-free orientation consistent with the
pre-knowledge exists is discussed and an extension for the
acyclic inference algorithm for handling known customer-to-
provider edges is presented. As our heuristic is a modiﬁca-
tion of the algorithm given there, we can easily transfer this
extension.
The idea is to introduce for each known customer-to-pro-
vider edge u → v a new path (u, v,⊥), where ⊥ is an ar-
tiﬁcial AS with count(⊥) = ∞. So the only way to make
v a free node is to remove u which includes the introduc-
tion of an edge u → v as desired. Of course these new AS
paths need not be constructed explicitly, but can be handled
implicitly by modifying the heuristic above.
As the heuristic is allowed to drop paths hindering a con-
sistent orientation, interpreting known edges as paths also
allows dropping these edges in case of a conﬂict. Often how-
ever the pre-knowledge is trusted more than the set of AS
paths. For this case we can increase the weight of these (vir-
tual) paths introduced in this step. In our implementation
all AS paths are weighted with 1 and all paths originating
from known edges are assigned the same weight W . Thus a
customer-to-provider edge may only be discarded, if we can
“save” at least W AS paths instead. For the results shown
later, W was set to 10.
4.3 Re-adding
After ﬁnding an AS path set which can be oriented valley-
free, the DPP* heuristic from [4] enters a second phase where
paths which had to be dropped before are re-added to the
path set if possible. Two approaches for this are considered
there. One is a voting process, the other one is for each
single path to add it to the path set and only keep it if a
valley-free orientation is still possible.
As the re-adding stage reduces the number of invalid paths
we adapted this method for our heuristic. Unfortunately
the simple and fast voting strategy does not work for our
case as it does not necessarily preserve the global acyclicity.
The alternative approach of adding paths one by one and
retesting orientability works but is quite expensive if the
number of dropped paths is high (as already observed by
[4]). Therefore we adjusted re-adding as follows.
The ﬁrst run of the heuristic returns a set N of discarded