```c
char g[100];
short h[100];
long i[100];
```
数组定义的数据类型，也表示一次能够读写的内存大小，char、short、long 分别以 1、2、4 个字节为例进行内存的读写。
数组是内存的实现，数组和内存的物理结构是完全一致的，尤其是在读写 1 个字节的时候，当字节数超过 1 时，只能通过逐个字节来读取，内存的读写过程如下图
### 栈
栈(stack) 是一种很重要的数据结构，栈采用 LIFO(Last In First Out)即后入先出的方式对内存进行操作，最先放入的数据在栈的最下面，最后放入的数据在栈的最上面，如果要拿数据，要从栈顶开始取，否则无法去除最下面的数据。
栈的数据结构就是这样，你把数据压入栈的操作叫做入栈(push),你把数据从栈取出的操作叫做出栈(pop)，模型图如下:
入栈相当于是增加操作，出栈相当于是删除操作，只不过叫法不一样。栈和内存不同，它不需要指定元素的地址，使用类似如下
```c
//压入数据
Push(123);
Push(456);
Push(789);
//弹出数据
j=Pop();
k=Pop();
l=Pop();
```
在栈中，LIFO 方式表示栈的数组中所保存的最后面的数据会被最先读取出来.
### 队列
**顺序队列**
队列和栈相似但又不同，队列也不需要指定元素的地址，但队列是 FIFO 即先入先出的数据结构。就像排队干饭,先到的人先干到饭，使用类似如下
```c
//往队列中写入数据
EnQueue(123);
EnQueue(456);
EnQueue(789);
//从队列中读出数据
m=DeQueue();
n=DeQueue();
o=DeQueue();
```
向队列中写入数据称为 EnQueue() 入列，从队列中读出数据称为 DeQueue()
与栈相同，FIFO的方式表示队列中最先保存的数据会被优先读取。
**循环队列**
循环队列一般是以环状缓冲区(ring buffer)的方式实现的，它是一种用于表示一个固定尺寸、头尾相连的缓冲区的数据结构，适合缓存数据流。假如我们要用6个元素的数组来实现一个环形缓冲区，这时可以从起始位置开始有序的存储数据，然后按存储时的顺序把数据读出，在数组的末尾写入数据后，后一个数据就会从缓冲区的头部开始写。这样，数组的末尾和头部就连接起来了。
### 链表
通过使用链表，可以高效的对数据元素进行删除和添加操作。
在实现数组的基础上，除了数据的值之外，通过为其附带上下一个元素的索引，即可实现链表。数据的值和下一个元素的地址 (索引) 就构成了一个链表元素。
对链表的添加和删除都是非常高效的，如果要删除地址为 p\[2] 的元素，链表变化如下
删除地址为 p\[2] 的元素后，直接将链表剔除，并把 p\[2] 前一个位置的元素 p\[1] 的指针域指向 p\[2] 下一个链表元素的数据区即可。
对于新添加进来的链表，需要确定插入位置，比如要在 p\[2] 和 p\[3] 之间插入地址为 p\[6] 的元素，需要将 p\[6] 的前一个位置 p\[2] 的指针域改为 p\[6] 的地址，然后将 p\[6] 的指针域改为 p\[3] 的地址即可。
链表的添加不涉及数据的移动，所以链表的添加和删除很快，而数组的添加涉及到数据的移动，所以比较慢，通常用数组来检索数，使用链表来进行添加和删除操作。
### 二叉树
使用二叉树可以高效的对数据进行检索。
二叉树是一种检索效率非常高的数据结构，二叉树是指在链表的基础上往数组追加元素时，考虑到数组的大小关系，将其分为左右两个方向的表现形式，假如保存一个中间值，那么接下来要进行值的写入，就需要和中间值进行比较，确认大小，大的放右边，小的放左边。
---
### 虚拟内存
计算机中的程序都需要通过内存运行，如果占用内存巨大就会耗尽内存，windows 系统使用虚拟内存技术，通过使用一部分硬盘空间当作内存使用，来确保程序耗尽内存也依然可以有存储空间，虚拟内存在硬盘上的存在形式就是 pagefile.sys 页面文件。
虚拟内存是内存和磁盘交互的第二个媒介，虚拟内存是指把磁盘的一部分作为假象内存使用。是内存管理技术的一种，它使得应用程序认为它拥有连续可用的内存 (一个完整的地址空间)，实际上，它通常被分割成多个物理碎片，还有部分存储在外部磁盘管理器上，必要时进行数据交换。
通过借助虚拟内存，在内存不足时依然可以运行程序，例如只剩 5MB 内存空间的情况下运行 10MB 程序，由于 CPU 只能执行加载到内存中的程序，因此，虚拟内存的空间就需要和内存中的空间进行置换 (swap)，然后运行程序。
**虚拟内存与内存的交换方式**
虚拟内存的方法有分页式和分段式两种。windows 采用的是分页式。该方式指在不考虑程序构造的情况下，把运行的程序按照一定大小的页进行分割，并以页为单位进行置换。在分页式中，我们把磁盘的内存读到内存中称为 Page In，把内存的内容写入磁盘称为 Page Out.Windows 计算机的页大小为 4KB，所以要把应用程序按照 4KB 的页来划分，以页为单位放到磁盘进行 swap.
为实现内存功能，windows 在磁盘上提供了虚拟内存使用的分页文件，该文件由 window 生成和管理，大小一般是内存的 1~2 倍。
---
### 节约内存
windows 使用虚拟内存可以一定程度上解决内存不足的问题，但治标不治本，性能上的损失很大。所以一些优化应用程序的技术也非常关键
**通过 DLL 实现函数共有**
DLL(Dynamic Link Library, 动态链接库) 文件在程序运行时可以动态加载 Library 文件，多个应用可以共有同一个 DLL 文件，进而节约内存使用。
例如，编写一个具有某些处理功能的函数 Func(), 应用 A 和 B 都使用这个函数，然后再各自应用中内置 Func() 后同时运行，那么内存中就存在了 Func() 两次。而DLL文件内容可以在运行时被多个应用共有，因此内存中存在 Func() 的程序只有一个。
Windows 系统包含大量的 DLL 文件，有些应用在安装时，DLL 文件也会被追加，应用程序通过这些 DLL 文件运行，节约内存，有些应用更新时，甚至仅更新 DLL 文件。
**通过调用_stdcall 来减少程序文件的大小**
_stdcall 是 standard call(标准调用) 的缩写。windows 提供的 DLL 文件内的函数，基本上都是通过 _stdcall 调用方式完成的，主要可以节约内存。
C 语言特有的调用方法称为 C 调用，默认编写的程序不使用 _stdcall，因为 C 语言所对应的函数传入参数是可变的，只有函数调用方才能知道到底有多少个参数，在这种情况下，栈的清理作业无法进行，不过当函数的参数和数量固定时，指定 _stdcall 是没有任何问题的。
C语言中，调用完函数后，需要人为执行栈清理指令，把不需要的数据从接收和传递函数的参数时使用的内存上的栈区域中清理出去的操作叫做栈清理处理。例如
```c
//函数调用方