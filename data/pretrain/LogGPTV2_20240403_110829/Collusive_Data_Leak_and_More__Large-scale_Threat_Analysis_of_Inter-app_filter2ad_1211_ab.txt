39,080
Failed
123
83
DroidBench 3.0
Failed
IC3
Ours
0
0
Intents
found
27
27
Time
151s
138s
3.2 Dataﬂow Analyzer
We considered the three state-of-the-art static analysis tools for
Android apps, 1) FlowDroid [3], 2) Amandroid [35], and 3) Droid-
Safe [15], to build a dataﬂow analyzer. While DroidSafe [15] claims
to be the most precise static analysis tool, it is 20 to 50 times slower
compared to FlowDroid and Amandroid. While both the FlowDroid
and the Amandroid offered similar runtime performances, we found
that FlowDroid rarely failed to analyze an app. Therefore, we build
our Dataﬂow analyzer based on the FlowDroid, but make several
pragmatic improvements.
1) Number of sources / sinks: Static taint analysis requires a set of
sources (e.g., originating methods of sensitive data, such as API
calls to retrieve a user’s location) and a set of sinks (e.g., methods
through which data can exit the application or device). The number
of sources / sinks in an app impacts the taint analysis time. To
manage the number of sources and sinks, the dataﬂow analyzer
analyzes an app in two steps. First, for each of the ICC exit points,
we investigate if the intents sent through that point can potentially
include any sensitive information (i.e., determine the ICC exit leaks).
The dataﬂow analyzer labels the sensitive API calls identiﬁed by
SuSi [31] as sources and labels all the methods that initiate ICCs as
sinks. Second, for each of the ICC entry points, we investigate if
the data extracted from intents can potentially ﬂow out of the appli-
cation (i.e., determine the ICC entry leaks). The dataﬂow analyzer
labels the methods to access intent data (e.g., getIntent, and
onActivityResult) as sources and labels all sinks identiﬁed
by SuSi [31] as sinks.
2) Retry with a less precise conﬁguration: We used two types of
conﬁguration for the dataﬂow analyzer.
High precision conﬁguration: This conﬁguration supports a context-
sensitive algorithm with an access path length = 3. In this conﬁgu-
ration, the dataﬂow analyzer builds the complete taint paths. (An
access path is of the form a.b.c, where a is a local variable or pa-
rameter and b and c are ﬁelds. The variable a.b.c has an access path
length = 2. An access path length = 0 means a simple local variable
or parameter (i.e., in this case a) [3].)
Low precision conﬁguration: This conﬁguration supports a context
insensitive algorithm, which does not consider calling context. It is
signiﬁcantly faster, but may have false positives. In this conﬁgura-
tion, the access path length is set to 1 and the dataﬂow analyzer only
identiﬁes the sources and sinks, but skips building the complete taint
paths.
By default, the dataﬂow analyzer runs with the high precision
conﬁguration. However, if a precision-analysis fails to complete
within our speciﬁed time (i.e., 5 minutes), DIALDroid abandons
the analysis, and retries with the low precision conﬁguration. To
recover from possible deadlocks, we limit the analysis time for each
app to 20 minutes (i.e., if the analysis for an app does not complete
within 20 minutes, DIALDroid abandons that analysis).
3.3 Data Module and ICC Leak Calculator
The data module of DIALDroid aggregates the attributes of an
app extracted by the ICC entry / exit point extractor (Section 3.1)
and the dataﬂow analyzer (Section 3.2). The data module stores
the aggregated data in a MySQL database. DIALDroid leverages
the power of relational databases to overcome scalability issues.
Relational databases provide efﬁcient data storage. More impor-
tantly, modern relational database management systems facilitate
powerful query capabilities to easily transform and retrieve data.
DIALDroid uses a highly normalized database schema to efﬁciently
store data and uses indexes on the comparison attributes to support
efﬁcient query computation. Our database is composed of 42 tables
with a total of 161 attributes. A supplementary website9 provides a
detailed diagram of the database schema.
Algorithm 1 A SQL query to detect inter-app ICC based collusive
data leaks.
SELECT sender.app AS senderapp, idl.method,
idl.leak_path AS sender_app_path, receiver.app AS
receiverapp, entryLeaks.leak_path AS
receiver_app_path, entryLeaks.leak_receiver,
icc_type FROM SensitiveChannels
INNER JOIN Applications sender ON
SensitiveChannels.fromapp=sender.id
INNER JOIN Applications receiver ON
SensitiveChannels.toapp=receiver.id
INNER JOIN EntryPoints ep ON
ep.class_id=SensitiveChannels.entryclass
INNER JOIN ICCEntry_DataLeaks entryLeaks ON
entryLeaks.entry_point_id=ep.id
INNER JOIN ICCExit_DataLeaks idl ON
idl.exit_point_id=SensitiveChannels.exitpoint
LEFT JOIN Intent_Extras ON
Intent_Extras.intent_id=SensitiveChannels.intent_id
-- either no data is passed via putExtra
WHERE (Intent_Extras.id IS NULL) or
-- OR data is passed via putExtra and receiver path
also contains the key
(Intent_Extras.extra IS NOT NULL AND
entryLeaks.leak_path LIKE CONCAT
(’%’,Intent_Extras.extra,’%’))
1
2
3
4
5
6
7
8
9
10
11
We implement the key calculateSensitiveChannels
procedure inside the database as a SQL stored procedure. This de-
sign minimizes potential data transmission delays and leverages the
speed, optimization, and efﬁcient queries provided by the database
management systems. Because all the inter-app ICC threats in our
attack model concern sensitive ICC channels (speciﬁcally, requir-
ing ICC exit leaks in sender apps), it is unnecessary to compute
ICC links for the intents that cannot possibly contain any sensitive
information. It drastically reduces the computation complexity.
While matching explicit intents are straightforward, the resolu-
tion of an implicit intent involves matching the action, category
and data ﬁelds with compatible IntentFilter, known in the
Android development guide as action test, category test, and data
test, respectively. We write SQL queries to compute all the sen-
sitive ICC links originating via implicit intent from a speciﬁc
app. Due to the complex matching rules, we create two SQL
procedures: categorytest(intent_id,filter_id) and
datatest(intent_id,filter_id), which implement the
category test and data test, respectively. Queries to compute ICC
channels via explicit intents are much simpler. Algorithm 3 in the ap-
pendix shows the pseudocode for calculating sensitive ICC channels
to and from an app.
For computing privilege escalations, we test if the receiver app in a
sensitive ICC channel has permissions to access the data transmitted
via the carried intent. For computing collusive data leaks, we check
if a sensitive ICC channel is joining an ICC exit leak in an app
9
https://github.com/dialdroid-android/dialdroid-db
with an ICC entry leak in another app. We show an example query
for detecting collusive data leaks in Algorithm 1. In addition, our
supplementary website provides scripts to generate all the SQL
procedures and the SQL queries.
The intent resolution in DIALDroid is based on the libraries
provided by IC3. However, in some cases, string analysis in IC3
cannot accurately determine possible values and therefore generates
safe over-approximated sets (e.g., ‘.*’, a regular expression matching
any string constant) [28]. A recent study found that 95% of the
ICC links generated by the intents with attributes (i.e., package,
component, action, or category) resolved as ‘.*’ were infeasible [26].
Therefore, the strict intent matching rules implemented by our ICC
leak calculator ignores such over-approximated regular expressions.
While this modiﬁcation may introduce a few false negatives, it
greatly reduces the number of false positives in the subsequent
detection.
4. EVALUATION AND FINDINGS
Our evaluation aims to answer the following questions.
1. How does DIALDroid compare with other inter-app ICC anal-
ysis tools (namely IccTA+ApkCombiner and COVERT), in
terms of both detection accuracy and runtime over benchmark
apps? (In Section 4.1) Similarly, for conventional intra-app
ICC analysis? (In Section B.1 in the appendix)
2. Are there explicit-intent based privilege escalation or collusive
data leak pairs? How many cases are via implicit intent based
ICCs? Which threat is more common, privilege escalation or
collusive data leak? (In Section 4.2)
3. What are the detected app pairs and what do they leak? (Case
studies in Section 4.3)
4. How many apps have ICC exit leaks? How many apps have
the ICC entry leaks? What is the distribution of sensitive ICC
channels across app categories? (In Sections 4.4 and 4.5)
5. What are the top 10 leaked permissions in privilege escalation
cases? What categories of Google Play apps cause the most
collusive data leaks? (In Section 4.6)
6. What are the reasons for unintended ICCs with mismatched
data types? (In Section 4.7)
7. How long does DIALDroid take to analyze hundreds of thou-
sands of real-world Android apps? (In Section 4.8)
In addition, we also released a benchmark consisting of real-
world apps for comparing the detection capabilities for collusive
data leaks. Unless speciﬁed, experiments were conducted on a
Dell Tower Precision 7810 workstation running Ubuntu 14.04LTS
64bit with 16 core Intel Xeon 2.4GHz CPU, 64GB RAM, and an
SSD drive. We enlisted four virtual machines for the large-scale
experiment in 4.8.
three datasets are described below.
We evaluate both real-world apps and benchmark suites. Our
• Dataset I (Benchmarks). We evaluate benchmarks below.
DroidBench 3.0: DroidBench is the most comprehensive
benchmark suite to evaluate the effectiveness of Android taint
analysis tools. Among the 174 test cases provide by the
DroidBench 3.0 10, 10 test-cases aim to evaluate intra-app
leaks and 11 test-cases aims to evaluate inter-app collusions.
10
https://github.com/secure-software-engineering/DroidBench/
tree/develop
DroidBench (IccTA): IccTA introduced 23 test cases for
intra-app leaks and 6 test-cases for inter-app leaks and are
available in the IccTA branch 11 of the DroidBench.
ICC-Bench: ICC-Bench 12, introduced by Amandroid [35],
provides 11 test cases for Intra-app leaks. While ICC-Bench
did not mention about inter-app leaks, we found and veriﬁed
9 inter-app leaks in ICC-Bench.
For inter-app ICC analysis, our comparison is on 21 inter-app
ICC test cases from these benchmark suites. We also evaluate
44 intra-app ICC test cases for completeness. A test case may
contain multiple ICC leaks.
• Dataset II (Google Play apps). Dataset II consists of 100,206
most downloaded Android apps (as of June, 2015) belong-
ing to 16 popular categories from Google Play. Table 7 in
the appendix shows the distribution of the apps across the
categories.
• Dataset III (All real-world apps). Dataset III (total 110,150
apps) consists of all apps from Dataset II as well as 9,944
malware apps from Virus Share.
4.1
Inter-app ICC Benchmark
Table 2 shows the benchmark comparison results of our inter-app
ICC analysis. DIALDroid has the highest precision 13 (100%), the
highest recall 14 (91.2%), and the highest F-measure (0.95) among
the three tools. IccTA performed poorly (12.5% recall), mainly
because ApkCombiner was unable to combine the majority of the
app pairs (62%). For the successfully combined apks, IccTA can
only detect the inter-app leaks that are in DroidBench-IccTA (i.e.,
the benchmark that was developed by the same authors). Due to
inaccurate intent resolutions, COVERT reported a high number of
false positives (323). COVERT failed to detect all inter-app leaks
from the DroidBench 3.0.
We performed manual inspection on our failed cases. Among the
21 inter-app pairs, nine lead to privilege escalation. DIALDroid was
able to detect ﬁve of those with a 100% precision and 55.5% recall.
DIALDroid failed to report transitive (indirect) privilege escalations
(i.e., data leaked via an intermediate component with the same level
of permissions as the source component). In contrast, COVERT
failed to report any of those nine privilege escalations.
We compare the inter-app analysis runtime of COVERT, Ic-
cTA+ApkCombiner, and DIALDroid, with 57 randomly selected
apps from Google Play Market. Out of the 1,596 pairs, ApkCom-
biner was able to combine only 501 pairs (31%) and IccTA took
203 hours to complete on the combined apps. COVERT ran for 26
hours and then crashed during the formal model generation step [4].
In comparison, DIALDroid took 6.1 hours to complete. It only
abandoned two apps, as DIALDroid was unable to ﬁnish within 20
minutes during those two cases.
For completeness, benchmark evaluation on intra-app ICCs is
described in Section B.1 in the appendix.
4.2 Threat Breakdown for Dataset II
We break down the threats into six disjoint categories, which are
listed as threat types I to VI in Table 3. The categories are disjoint in
that an inter-app ICC belongs to one and only one category. Some
11
https://github.com/secure-software-engineering/DroidBench/
tree/iccta
https://github.com/fgwei/ICC-Bench
Precision is the percentage of identiﬁed cases that are true leaks.
12
13
14 Recall is the percentage of present leaks that are detected.
DroidBench 3.0
DIALDroid
(Ours)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Incorrect app pairings
Source App
Destination App
# ICC Exit
Leaks (Dest.)
# ICC Entry
Leaks (Sink)
Privilege
Escalation
startActivity1_source
startSevice1_source
sendbroadcast1_source
(cid:2)(cid:2) P(cid:2)
(cid:2)(cid:2) (cid:2)(cid:2) P(cid:2)
(cid:2)(cid:2) P(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)
(cid:2)(cid:2) (cid:2)(cid:2) P(cid:2)
(cid:2)(cid:2) (cid:2)(cid:2) P(cid:2)
(cid:2)
Echoer
Echoer
Collector
Collector
Collector
Collector
Collector
Collector
Collector
SendSMS
StartActivityForResult1
DeviceId_Broadcast1
DeviceId_ContentProvider1
DeviceId_OrderedIntent1
DeviceId_Service1
Location1
Location_Broadcast1
Location_Service1
Table 2: Comparisons on inter-app ICC analysis with DroidBench 3.0, DroidBench (IccTA branch), and ICC-Bench. Multiple circles in one
row means multiple inter-app collusions expected. An all-empty row: no inter-app collusions expected and none reported. †indicates the tool
crashed on that test case.
(cid:2)(cid:2)= a correct warning, *= a false warning, (cid:2)= a missed leak, P(cid:2)= a privilege escalation reported, ‡= did not test or N/A.
IccTA +
ApkCombiner
(cid:2)
(cid:2)(cid:2)
(cid:2)†
(cid:2)†
(cid:2)†
(cid:2)†
(cid:2)(cid:2)†
(cid:2)(cid:2)†
(cid:2)†
‡
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
‡
(cid:2)†
(cid:2)
(cid:2)†
(cid:2)†
(cid:2)
(cid:2)
(cid:2)
(cid:2)†
(cid:2)
‡
COVERT
(cid:2)
(cid:2)(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)
(172 *)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(104 *)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(47 *)