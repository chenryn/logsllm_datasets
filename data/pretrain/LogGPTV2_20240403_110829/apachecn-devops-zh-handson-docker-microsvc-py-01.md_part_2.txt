我第一次使用 Docker 容器时，它们在我看来就像一种*轻型虚拟机*；不需要模拟硬件运行的小型操作系统。但是过了一会儿，我意识到这不是正确的方法。
描述容器的最佳方式是将*想象成一个被自己的文件系统*包围的进程。你运行一个进程(或者几个相关的进程)，它们*看到*一个完整的文件系统，不被任何人共享。
这使得容器极其便携，因为它们与底层硬件和运行它们的平台是分离的；它们非常轻量级，因为只需要包含最少量的数据，而且它们是安全的，因为容器暴露的攻击面非常小。您不需要应用像在传统服务器(如`sshd`服务器)或配置工具(如 Puppet)上一样管理它们。它们是专门设计的，体积小，用途单一。
In particular, try to keep your containers small and single-purpose. If you end up adding several daemons and a lot of configuration, it's likely that you are trying to include too much; maybe you need to split it into several containers.
使用 Docker 容器有两个步骤。首先，我们构建容器，在文件系统上执行一层又一层的更改，例如添加将要执行的软件和配置文件。然后，我们执行它，启动它的主命令。我们将在[第 3 章](03.html)、*服务文档化*中看到如何做到这一点。
微服务架构非常符合 Docker 容器的一些特征——通过 HTTP 调用进行通信的小型、单一用途的元素。这就是为什么，尽管这不是一个硬性要求，但这些天它们通常会一起出现。
十二因素应用原则([https://12factor.net/](https://12factor.net/))是开发网络应用中已被证明成功的实践的集合，也非常符合 Docker 容器和微服务架构。Docker 非常容易遵循其中的一些原则，我们将在本书的后面对它们进行深入的评论。
An important factor for dealing with containers is that containers should be stateless (Factor VI—[https://12factor.net/processes](https://12factor.net/processes)). Any state needs to be stored in a database and each container stores no persistent data. This is one of the key elements for scalable web servers that, when dealing with a couple of servers, may not be done. Be sure to keep it in mind.
Docker 的另一个优势是有很多现成的容器。docker Hub([https://hub.docker.com/](https://hub.docker.com/))是一个公共注册中心，里面充满了有趣的容器，可以在开发或生产中继承或直接使用。这有助于您为自己的服务提供示例，并快速创建几乎不需要配置的小型服务。
# 容器编排和 Kubernetes
虽然 Docker 介绍了如何处理每个单独的微服务，但是我们需要一个协调器来处理整个服务集群。为此，我们将在整本书中使用 Kubernetes 斯([https://kubernetes.io/](https://kubernetes.io/))。这是主要的编排项目，它得到了主要云供应商的大力支持。我们将在[第 5 章](05.html)、*中详细讨论使用 Kubernetes 来协调微服务*。
# 并行部署和开发速度
最重要的因素是独立部署的能力。创建成功的微服务系统的第一条规则是确保每个微服务能够尽可能独立于其他微服务运行。这包括开发、测试和部署。
这是允许不同团队之间并行开发的关键因素，允许他们扩展工作。这增加了复杂系统的变化速度。
负责特定微服务的团队需要能够部署新版本的微服务，而不中断任何其他团队或服务。目标是增加部署的数量和速度。
The microservice architecture is strongly related to Continuous Integration and Continuous Deployment principles. Small services are easy to keep up to date and to continuously build, as well as to deploy without interruption. In that regard, a CI/CD system tends to be microservices due to the increase in parallelization and the speed of delivery.
由于部署微服务对于依赖服务来说应该是透明的，因此应该特别注意向后兼容性。一些变更需要升级并与其他团队协调，以在不中断系统的情况下移除旧的、不正确的功能。
虽然从理论上讲，完全断开服务是可能的，但在实践中这是不现实的。有些服务之间会有依赖关系。微服务系统会强迫你定义服务之间的强边界，任何需要跨服务通信的特性都会带来一些开销，甚至可能需要跨不同团队协调工作。
当转移到微服务架构时，这种转移不仅仅是技术上的，还意味着公司工作方式的巨大变化。微服务的开发将需要自主性和结构化的通信，这需要在规划系统的总体架构时付出额外的努力。在单块系统中，这可能是临时的，可能已经演变成一个不那么分离的内部结构，增加了混乱的代码和技术债务的风险。
The need to clearly communicate and define owners cannot be stressed enough. Aim to allow each team to make their own decisions about their code and formalize and maintain the external APIs where other services depend on them.
然而，这种额外的规划增加了长期交付带宽，因为团队能够做出更自主的决策，包括大型决策，如使用哪种操作系统或哪种编程语言，但也包括无数小型决策，如使用第三方包、框架或模块结构。这加快了日常运营的发展速度。
微服务也可能影响团队在组织中的结构。一般来说，现有的团队应该受到尊重。他们会有非常有用的专业知识，引发一场彻底的革命将会打破这种局面。但是一些调整可能是必要的。一些概念，比如理解 web 服务和 RESTful 接口，需要出现在每个微服务中，以及如何部署自己的服务的知识。
A traditional way of dividing teams is to create an operations team that is in charge of infrastructure and any new deployments because they are the only ones allowed to have access to the production servers. The microservices approach interferes with this as it needs teams to be able to have control over their own deployments. In [Chapter 5](05.html), *Using Kubernetes to Coordinate Microservices*, we'll see how using Kubernetes helps in this situation, detaching the maintenance of the infrastructure from the deployment of services.
它还允许创造一种强烈的主人翁意识，因为团队被鼓励在他们自己的王国里以他们自己喜欢的方式工作，同时他们在明确定义和结构化的边界内与其他团队一起玩游戏。微服务架构可以允许在系统的小部分进行实验和创新，一旦得到验证，就可以在整个系统中传播。
# 挑战和危险信号
我们已经讨论了微服务架构相对于整体架构的许多优势，但是迁移是一项不可低估的巨大任务。
系统以单片开始，因为它更简单，并且允许在小代码库中更快的迭代。在任何一家新公司，旋转和改变代码，寻找一个成功的商业模式是至关重要的。这比清晰的结构和建筑分隔更有优势——这是应该的方式。
然而，一旦系统成熟，公司就会成长。随着越来越多的开发人员参与进来，整体的优势开始变得不那么明显，对长期战略和结构的需求变得更加重要。更多的结构并不一定意味着向微服务架构发展。一个结构良好的整体可以实现很多目标。
转向微服务也有其自身的问题。其中一些如下:
1.  迁移到微服务需要付出大量努力，积极改变组织的运营方式，并且需要大量投资，直到开始有回报。过渡可能是痛苦的，因为需要务实的方法，需要做出妥协。它还将涉及大量设计文档和会议来规划迁移，所有这些都是在业务继续运营的同时进行的。这需要充分的投入和对所涉及内容的理解。
2.  不要低估文化的变化——组织是由人组成的，人们不喜欢变化。微服务的许多变化都与不同的操作方式和不同的做事方式有关。虽然这赋予了不同的团队权力，但也迫使他们澄清自己的接口和 API，并正式确定通信和边界。这可能会导致团队成员的沮丧和抵制。
There's an adage called Conway's law ([http://www.melconway.com/Home/Conways_Law.html](http://www.melconway.com/Home/Conways_Law.html)) that states that *organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.* For microservices, this means that divisions between teams should reflect the different services. Having multiple teams working in the same microservice will blur the interfaces. We will discuss Conway's law in detail in [Chapter 12](12.html), *Collaborating and Communicating across Teams*.
3.  学习工具和程序也有一个学习曲线。管理集群的方式不同于单个整体，开发人员需要了解如何在本地测试中互操作不同的服务。同样，这种部署也将不同于传统的本地开发。特别是，学习 Docker 需要一些时间来适应。做好相应的计划，并向所有相关人员提供支持和培训。
4.  调试跨服务移动的请求比调试单一系统更困难。监控请求的生命周期是很重要的，一些细微的错误在开发中很难复制和修复。
5.  将一个整体分成不同的服务需要仔细考虑。一条不好的分割线会让两个服务紧密耦合，不允许独立部署。这种情况下的一个危险信号意味着几乎任何对一个服务的改变都需要对另一个服务的改变，即使它通常可以独立完成。这造成了工作的重复，因为常规的单一功能工作需要更改和部署多个微服务。微服务可以在以后变异，重新定义边界，但是这是有代价的。在添加新服务时，也应该同样小心。
6.  创建微服务会有开销，因为有些工作会在每个服务上复制。这种开销通过允许独立和并行开发得到补偿。但是，要充分利用这一点，你需要数字。一个多达 10 人的小型开发团队可以非常高效地协调和处理一个整体。只有当规模增长和独立团队形成时，迁移到微服务才开始有意义。公司越大，越有意义。
7.  自由和允许每个团队做出自己的决定以及标准化一些共同的元素和决定之间的平衡是必要的。如果团队的方向太少，他们会一遍又一遍地重新发明轮子。他们还会最终形成知识孤岛，公司某个部门的知识对另一个团队来说是完全不可转移的，使得集体学习课程变得困难。团队之间需要稳固的沟通，以便达成共识并重用共同的解决方案。允许有控制的实验，给它贴上这样的标签，并全面吸取经验教训，以便其他团队受益。共享的、可重用的想法和独立的、多实现的想法之间会有矛盾。
Be careful when introducing shared code across services. If the code grows, it will make services dependent on each other. This can reduce the independence of the microservices.
8.  遵循敏捷原则，我们知道工作软件比大量文档更重要。然而，在微服务中，最大化每个单个微服务的可用性以减少团队之间的支持量是很重要的。这涉及到一定程度的文档。最好的方法是创建自我记录的服务。我们将在本书后面看一些关于如何使用工具来记录如何用最少的努力使用服务的例子。
9.  对另一个服务的每次调用，例如内部微服务之间的相互调用，都会增加响应的延迟，因为需要涉及多个层。这会产生延迟问题，外部响应需要更长时间。它们还会受到连接微服务的内部网络的性能和容量的影响。
迁移到微服务应该小心谨慎，并仔细分析其利弊。在成熟的系统中完成迁移可能需要数年时间。但是对于一个大系统来说，由此产生的系统将更加敏捷和易于更改，允许您有效地解决技术债务，并授权开发人员完全拥有和创新，构建通信并提供高质量、可靠的服务。
# 分析当前系统
正如我们之前定义的，从单块迁移到微服务集合的第一步是理解当前的系统。这个阶段不容小觑。很可能没有一个人对整块石头的不同组成部分有很好的理解，尤其是如果有些部分是遗留下来的。
此阶段的目标是确定对微服务的更改是否真正有益，并初步了解迁移的结果是什么。正如我们已经讨论过的，采取行动是一项巨大的投资，不应该掉以轻心。在这个阶段不可能对所需的工作量进行详细的评估；在这一点上，不确定性会很大，但千里之行始于足下。
所涉及的努力将在很大程度上取决于整块石头的结构。这可能会有所不同，从一堆没有太多方向的有机增长的意大利面条代码，到一个结构良好的模块化代码库。
我们将在这本书中使用一个示例应用——一个名为 MyThoughts 的微博网站，一个允许我们发布和阅读短信或想法的简单服务。该网站允许我们登录，发布新的想法，查看我们的想法，并在系统中搜索想法。
![](img/9169859c-18ea-4693-8c23-c0d91fc9aaab.png)
作为第一步，我们将画出整块建筑的建筑图。将当前系统简化为相互作用的块列表。
The code for our example is available here: [https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter01/Monolith](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter01/Monolith). It is a Django application that uses Bootstrap for its HTML interface. See the `README` for instructions on how to run it.
在我们的示例中，下面的图表描述了 MyThoughts 模型:
![](img/db5b3617-82b8-4ffd-b2fc-5e01ba308c01.png)