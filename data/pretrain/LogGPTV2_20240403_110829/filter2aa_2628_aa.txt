# Trace Me If You Can: Bypassing Linux Syscall Tracing

## Presenters
- **Dr. Rex Guo, Lacework**
  - Principal Engineer at Lacework
  - Expertise in behavior anomaly detection (Polygraph)
  - Experience with CSPM (Cloud Security Posture Management)
  - Former Engineering Manager at startups, including Confluera (XDR) and Tetration (CWPP, now part of Cisco)
  - Conference speaker at Black Hat, DEFCON, and other security events
  - Twitter: @Xiaofei_REX

- **Dr. Junyuan Zeng, LinkedIn**
  - Senior Software Engineer at LinkedIn, focusing on Kubernetes
  - Previous roles include:
    - Staff Security Architect/Engineer for cloud-native security at JD.com
    - Staff Security Software Engineer/Researcher for mobile security at Samsung Research America and FireEye

## An Incident - An Attacker’s View
1. **Log4shell RCE on joe-box**:
   - Executed a reverse shell.
2. **Privilege Escalation Using Sudo**:
   - Exploited CVE-2021-3156.
3. **Read /etc/shadow**:
   - Accessed sensitive system files.
4. **Read SSH Process Environment Variable**:
   - Gathered additional information.
5. **Lateral Movement to alice-box with SSH Hijacking**:
   - Gained access to another machine.

## Incident Response
### Detection Rule Example
- **Rule**: Untrusted program reads /etc/shadow
- **Condition**:
  - `syscall == open(at)`
  - Has read permission
  - `filename == /etc/shadow`
  - Program is not in the allowlist

## Agenda
1. **Syscall Tracing**
2. **Vulnerabilities**
3. **Exploitations**
4. **Mitigations**
5. **Takeaways**

## System Call Tracing
### Tracing Programs
- **Tracing Programs**:
  - Collect system call data, such as arguments.
  - Attach to different hooks like tracepoints, kprobes, and ptrace.
- **Implementations**:
  - Linux native mechanisms: ftrace, perf_events.
  - Kernel modules, eBPF probes, and user space programs.

### Tracepoint
- **Static Hook**:
  - Provided by the Linux kernel.
  - Uses `sys_enter` and `sys_exit`.
  - Low overhead but only static interceptions.

### Kprobe
- **Dynamic Hook**:
  - Registers tracing programs on instructions in the syscall code path.
  - Dynamic but slower compared to tracepoints.
  - Requires knowledge of stack and register data placement.

### Ptrace
- **Static Hook**:
  - No need for kernel modules or eBPF programs.
  - High performance overhead.
  - Can be combined with seccomp to reduce overhead.

## Cloud Workloads
- **Virtual Machines**:
  - AWS EC2 instances
  - Google VM instances
- **Containers on Customer-Managed VMs**:
  - AWS EC2 tasks
  - Standard GKE workloads (e.g., DaemonSet)
  - AKS workloads
- **Serverless Containers**:
  - No access to the host.
  - AWS Fargate tasks
  - GCP Cloud Run services
- **Others**:
  - AWS Lambda

## System Call Tracing for Cloud Workloads
- **VMs**:
  - Hooks: tracepoint, kprobe, ptrace
  - Tracing Programs: kernel programs (eBPF, kernel module), user programs
  - Tools: Falco eBPF/kernel module, Falco pdig
- **Containers**:
  - Hooks: tracepoint, kprobe, ptrace
  - Tracing Programs: kernel programs (eBPF, kernel module), user programs
  - Tools: Falco eBPF/kernel module, Falco pdig
- **Serverless Containers**:
  - Hooks: ptrace
  - Tracing Programs: user programs
  - Tools: Falco pdig

## Open Source Projects
- **Falco**:
  - Open source endpoint security monitoring project in CNCF.
  - 5K+ GitHub stars.
  - Supports syscall tracing techniques:
    - tracepoint + kernel module
    - tracepoint + eBPF probe
    - pdig: ptrace + userspace program
- **Falco pdig**:
  - Supports syscall tracing of serverless workloads.

## TOCTOU in Syscall Tracing
- **TOC (Time-Of-Check)**:
  - Tracing programs dereference this user space pointer.
- **TOU (Time-Of-Use)**:
  - The kernel dereferences this user space pointer.

### Example: Connect
- **User Space Pointer**:
  - Points to "socket address".
- **Kernel Pointer**:
  - Points to "socket address".

### Execution Flow
- **ptrace_report_syscall(regs, message)**
- **__secure_computing(struct seccomp_data{regs…})**
- **trace_sys_enter(regs, regs->orig_ax)**
- **syscall enter**
- **trace_sys_exit(regs, regs->ax)**
- **ptrace_report_syscall(regs, message)**
- **syscall exit**

### Syscall Table (x86_64)
- **42 sys_connect**
- **43 sys_accept**
- **44 sys_sendto**

### TOU by Linux Kernel
- **Function: __sys_connect**
  - Moves the address from user space to kernel space.
  - If successful, calls `__sys_connect_file`.

```c
long __sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen) {
  struct filename *tmp;
  ret = move_addr_to_kernel(uservaddr, addrlen, &address);
  if (!ret)
    ret = __sys_connect_file(f.file, &address, addrlen, 0);
}
```

This presentation provides an in-depth look at bypassing Linux syscall tracing, covering various aspects of tracing, vulnerabilities, and mitigations.