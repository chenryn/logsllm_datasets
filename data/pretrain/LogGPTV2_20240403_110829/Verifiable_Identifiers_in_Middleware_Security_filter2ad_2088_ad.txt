from
the  object  reference,  which  is  used  by  the  underlying
operating  system to  establish  the  connection  to  the  tar-
get.  GlOP 
Protocol 
used  as  the  underlying  protocol. 
In  particular, 
mapping  specifies  the  encoding  of  IORs  with 
main  components:  the  RepositoryID, 
formation 
the  object  key.
is
this
three
the  endpoint  in-
(i.e.  TCP /IP  addressing  information),  and
is  mapped  onto  the  Internet-Inter-ORB-
for  environments  where  TCP /IP 
(IIOP) 
In  addition, 
the  abstraction 
Due  to  their  connectionless  and  stateless  nature,
ORB  level  message descriptors  are  no  useful  security
attributes. 
layering  dis-
cussed in  this  paper  is  irrelevant  here  because the  no-
tion  of  messages does not  even appear  on  the  applica-
tion  level.  In  security  policies,  messages are  generally
not  expressed without  any  reference  to  the  caller  and
target7.
In  the  following,  we will  explore  the  usefulness of the
GlOP  message header  (the  message content  is  opaque
on the  ORB  layer}  as caller  and  target  descriptors:
Request 
id
The  requestjd 
is  generally  an  unpredictable  number
which  cannot  be  used effectively  as a caller  descriptor
in  security  policies  -two 
separate  requests  from  the
same  client  will  have  different  and  non-correlated  re-
questjds.
Request 
header 
(object 
reference)
The  request  message  header 
from 
get  servant 
(as  discussed 
information 
the  object 
reference)  accurately  describes 
in  section  3.2),  but 
(which  comes
the  tar-
it  uses
7Firewall  rules could be an exception  to that,  but  are consid-
ered beyond the  scope of our  discussion
~
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
some  location  attributes  which  are  resident  on  lower
layers  in  the  abstraction  stack.
Operation
The  message header  contains  the  name  of  the  invoked
operation,  which  can be used for  more  fine-grained  se-
curity  enforcement.
Underlying 
transport
transport 
therefore  contains  some  endpoint 
layer  is  connection-oriented
The  underlying 
and 
information
which  can  be  used  to  describe  the  client  and  target
applications.  However,  as  illustrated 
in  figure  8,  the
granularity  on the  transport 
layer  can be too  coarse to
effectively  describe  the  application  objects.
Conclusion 
-Messages
In  addition  to  the  descriptors  already  discussed in  3.1
and  3.2,  ORB  level  messages provide  the  name  of  the
invoked  operation.  This  is  useful  for  fine-grained  as-
sociation  of  target-side  policies  with  individual  opera-
tions  on  target-side  objects.
4.  MICOSec:  CORBA  Security  in  Prac-
tice
As  a proof  of  concept,  ObjectSecurity  Ltd.  has de-
veloped  MICOSec  [7],  an  OpenSource  CORBA  secu-
rity  services implementation.  MICOSec  is based on the
MICO  ORB  [3], a C++  implementation  of the  CORBA
specifications.  MICO  was  chosen  for  its  transparent
structure  and  its  high  degree  of  conformance  to  the
CORBA  standard.  The  free  availability  of  the  MICO
source  code  was  also  an  important 
for  the
integration  of the  security  services into  the  ORB.
facilitator 
In  the  current  version,  MICOSec  uses MICO's  built-
in  SSL support  for  its  authentication  and message pro-
tection  services.  Both  client-side  user  identities  and
target-side  object  identities  are based on X.509  certifi-
cates, which  can be managed by a public  key infrastruc-
ture.  In  addition  to  the  basic security  functionality,  we
have implemented  access control  and security  auditing
on  the  middleware  layer,  which  use domain  names  ( as
described  in  section  3.2.)  to  represent  target  objects  in
the  security  policy.
The  mapping  of  target  objects  to  domains  is  not
done inside the  ORB,  but  by a separate Object  Domain
Mapper  (ODM),  which  is  described  as part  of  the  up-
coming  OMG  Security  Domain  Membership  Manage-
ment  Service  (SDMM) 
[10].  MICOSec's  ODM  is based
on  an  earlier  SDMM  draft  (published  in  2000),  which
to  support  sev-
uses the  following  mapping  information 
erallevels  of  granularity: 
the  server's  X.509  identity,  a
pointer  to  the  target  object's  POA,  and  the  target  ob-
ject's  ObjectId. 
In  MICOSec's  ODM,  it  was  decided
to  use POA  names instead  of POA  pointers,  which  has
the  following  advantages:
I.  POA  names can be manually  chosen, which  allows
the  definition  of  a static  mapping.
2.  POA  names  are  normally  known  before  the  ap-
plication  server starts,  which  allows  the  definition
of  the  mapping  in  a  configuration 
file  before  the
application 
is  launched.  This  way,  the  mapping
can be defined  easily  for  security-unaware  applica-
tions.
3.  POAs  are  arranged  hierarchically,  which  can  be
reused  well  to  represent  the  hierarchical  domain
name  structure.
As MICOSec  is based on SSL, clients  are represented
by  their  corrrsponding  X.509  distinguished  name  (as
described  in  section  3.1).  However,  SSL  does not  pro-
vide  groups  or  roles,  which  makes  it  necessary  to  ad-
minister  granted  rights  individually 
for  each user.  For
scalability  reasons, it  is preferable  to  cluster  users into
groups,  and  then  grant  rights  to  these user groups.  As
a  simple  workaround,  in  MICOSec  the  OU  (organiza-
tional  unit)  attribute  of the  X.509  certificate  is mapped
to  the  CORBASec  "group"  attribute.
MICOSec  can  be  used  both  for  security-aware  and
security-unaware  applications.  For  security-aware  ap-
plications, 
the  X.509  certificates  of  client  and  server ,
the  policies  for  setting  up  the  security  association  be-
tween  client  and  server,  the  access control  and  audit
policies,  as  well  as  the  ODM,  are  all  defined  in  the
application  source code.  For  security-unaware  applica-
tions,  everything  is set using  command  line  arguments
and configuration  files, so that  the  application  code can
remain  unmodified.  This  way,  the  security  adminis-
tration 
is segregated from  the  application  development
process,  which  is  one  of  the  main  advantages  of  the
CORBASec  architecture.
5. Summary
This  paper  analyses  the  difficulties  of  describing
callers and target  applications  accurately  for  expressing
middleware  layer  security  policies.  For  the  discussion,
CORBA  and  CORBASec  were  used  as an  exemplary
architecture,  but  the  basic  problem  applies  to  object-
oriented  middleware  in  general.
The  first  part  of  this  paper  defines  the  boundaries
of the  middleware  layer,  which  in  CORBA  is called  the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
References
Information 
10181-4. 
Interconnection 
[1]  ISO/IEC 
Systems 
for  Open  Systems:  Non-Repudiation 
-Part 
4.  ISO/IEC, 
1997.
Technology-  Open
-Security 
Frameworks
Framework
[2]  ISO  7498/2.  Basic  Reference  Model,  Security  Ar-
chitecture. 
ISO,  1989.
[3}  MICO  Group.  MICO  User's  Guide.  2000.
[4}  P. Humenn.  Summary  of MDI  Discussions.  OMG
SecSIG Mailinglist,  1999.
[5]  J.  Kohl  and  C.  Neumann.  RFC  1510:  The  Ker-
heros  Network  Authentication 
Service  V5.  1993.
[6]  J.  Linn.  RFC  2078:  Generic  Security  Service  Ap-
plication  Program 
Interface, 
Version  2.  1997.
[7]  ObjectSecurity 
Ltd. 
MICOSec 
User's  Guide.
2001.
[8]  OMG. 
CORBA 
Architecture 
and  Specification.
OMG,1998.
[9]  OMG. 
CORBA 
vl.8.  OMG,2000.
Security 
Services 
Specification,
[10]  OMG.  Security  Domain  Membership  Management
Service,  Final  Submission.  OMG,  2001.
[11]  T.  Parker 
and  D.  Pinkas
SESAME  V 4  -
Overview.  1995.
ORB  layer,  and  showed how  it  fits  between  the  layers
below  and  above.  It  also  defines  an  ORB  layer  model
with  the  components  caller,  message, and  target.  We
then  look  at  different  ways of describing  caller  and tar-
get in  an accurate,  trustworthy  manner  and at  the  right
granularity. 
It  turns  out  that  there  is  no  information
available  on  the  ORB  layer  of  abstraction 
to  describe
the  caller  and  target  "identity"  ,  therefore  we  explore
from  underlying  layers, in partic-
the  use of information 
ular  mechanism-specific  identities  and  transport 
layer
from  the  object  reference,  and
endpoint 
from  layers  above,  in  particular 
the  interface  type  and
operation  name.
information 
The  analysis  presented  in  this  paper  suggests that,
whilst  there  is  no  information  available  on  the  ORB
layer  to  describe  the  caller  and  target,  it  is possible  in
practice  to  use descriptors  from  other  layers.  In  COR-
BASec,  the  mechanism-specific  identity  on  the  caller
side and  the  information 
from  the  object  reference  on
the  target  side  turn  out  to  be  most  appropriate  and
for  describing  client  and  target  applica-
trustworthy 
tion  objects  at  the  right  granularity 
in  the  target-side
security  policy.
The  paper  also  gives a  brief  overview  of  MICOSec,
our  OpenSource  CORBA  security  services implementa-
tion,  to  demonstrate  how the  observations  of this  paper
can be  applied  in  practice.  In  particular,  MICOSec  il-
lustrates  how  the  target  information 
from  the  object
reference  can  be  mapped  to  domain  names,  and  how
client  identities  can be mapped  to  groups.
6.  Conclusion
CORBASec  tries  to  solve  the  middleware  security
problem  on  several  layers.  Both  authentication  and
message protection  are implemented  by widely  used se-
curity  mechanisms,  which  reside below  the  ORB  layer ,
e.g.  SSL  and  Kerberos,  and  their  exact  nature  is  ab-
stracted  by  CORBASec.  The  two  other  main  func-
tional  components,  namely  access control  and  audit,
are implemented  on the  ORB  layer  and -because  there
is no suitable  notion  available  on  the  middleware  layer
-rely  on the  security  attributes  established  by  the  un-
derlying  security  mechanisms,  in particular  the  authen-
ticated 
for  the  caller  and  the  target.  Of-
ten  the  granularity  and semantics  of these identities  do
not  match  with  the  representations  required  to  express
effective  ORB  layer  access control  and  audit  policies.
Therefore  the  whole  concept  of  ORB  level  separation
from  the  underlying  security  technology  breaks:  intro-
ducing  the  middleware  layer  not  only  separates the  ap-
plication  from  the  underlying  network,  it  also separates
the  security  problem  from  the  security  solution.
identifiers 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply.