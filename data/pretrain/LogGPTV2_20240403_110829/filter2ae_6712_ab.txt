uid | 用户ID | 8 | 八进制表示的文件所有者用户ID  
gid | 群组ID | 8 | 八进制表示的文件所有者群组ID  
size | 文件大小 | 12 | 八进制表示的文件大小  
mtime | 文件修改时间 | 12 | 从1970年1月1日到文件修改时间的秒数，八进制表示  
**checksum** （划重点） | 头的校验和 | 8 |
**为六个ASCII八进制数字后面跟一个空（0x00）和一个空格（0x20）若计算头的校验和，需要先将512字节头中的校验和字段的每个字节全部设置为空格（0x20），然后再将所有头部字节全部相加，输出为无符号整型，转换成八进制填充到前6字节中**  
typeflag | 存档文件类型 | 1 | 类型指示作用，早期版本为linkflag，0为常规文件，1为硬链接，2为符号连接、3为字符特殊文件等  
linkname | 链接名 | 100 | 链接文件名，常规文件为空`0x00`  
magic | 魔术头 | 6 | 固定为`ustar`跟一个空格`0x20`（版本不同会有所不同）  
version | 版本 | 2 | 固定为空格`0x20`后面跟一个空`0x00`（版本不同会有所不同）  
uname | 用户名 | 32 | 以空值结尾的字符串，用来表示用户名  
gname | 群组名 | 32 | 以空值结尾的字符串，用来表示群组名  
devmajor | 设备主编号 | 8 | 字符设备或块设备输入的主要编号  
devminor | 设备次编号 | 8 | 字符设备或块设备输入的次要编号  
prefix | 前缀 | 155 |
路径名前缀，如果第一部分name中的路径名过长，大于100字节，可以将其以任意`/`字符拆分，放置于此处。解析器应将其拼接获取完整路径名  
pad | 填充 | 12 | 为了凑完整的512字节，填充12个字节的`0x00`  
那么我们可以把上面的文件分解如下：
字段 | 值 | 值（ASCII表示）  
---|---|---  
name | 0x2E 0x2F 0x31 0x2E 0x74 0x78 0x74 0x00…… | ./1.txt  
mode | 0x30 0x30 0x30 0x30 0x36 0x34 0x34 0x00 | 0000644  
uid | 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x00 | 00000000  
gid | 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x00 | 00000000  
size | 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x32 0x30 0x00 |
00000000020  
mtime | 0x31 0x34 0x30 0x32 0x31 0x31 0x32 0x34 0x32 0x31 0x30 0x00 |
14021124210  
checksum | 0x30 0x31 0x30 0x35 0x36 0x35 0x00 0x20 | 010565  
typeflag | 0x30 | 0  
linkname | 0x00 0x00…… | ——  
magic | 0x75 0x73 0x74 0x61 0x72 0x20 | ustar  
version | 0x20 0x00 |  
uname | 0x72 0x6F 0x6F 0x74 0x00 0x00…… | root  
gname | 0x72 0x6F 0x6F 0x74 0x00 0x00…… | root  
devmajor | 0x00 0x00…… | ——  
devminor | 0x00 0x00…… | ——  
prefix | 0x00 0x00…… | ——  
pad | 0x00 0x00…… | ——  
filecontent | 0x68 0x61 0x63 0x6B 0x65 0x64 0x5F 0x62 0x79 0x5F 0x74 0x75 0x6E
0x61 0x6E 0x00 0x00…… | hacked_by_tunan  
再次看一下刚才那个文件在HAX编辑器下的截图是不是瞬间就不那么懵了？
**那么详细说一下刚才划重点的checksum**
，这个位置是整个头部的校验和，想计算它的值，需要先把这checksum这八位填充为空格（0x20）然后再把整个头部字节相加成无符号整型，然后再换算成八进制，填充到checksum字段的前六位，第七位和第八位分别填充空（0x00）和空格（0x20），即组成了完整的文件头部。
所以我读tar的各种实现的时候可以看到这样的代码：
    def calc_chksums(buf):
        """Calculate the checksum for a member's header by summing up all
           characters except for the chksum field which is treated as if
           it was filled with spaces. According to the GNU tar sources,
           some tars (Sun and NeXT) calculate chksum with signed char,
           which will be different if there are chars in the buffer with
           the high bit set. So we calculate two checksums, unsigned and
           signed.
        """
        unsigned_chksum = 256 + sum(struct.unpack_from("148B8x356B", buf))
        signed_chksum = 256 + sum(struct.unpack_from("148b8x356b", buf))
        return unsigned_chksum, signed_chksum
    # …… #
    buf = struct.pack("%ds" % BLOCKSIZE, b"".join(parts))
            chksum = calc_chksums(buf[-BLOCKSIZE:])[0]
            buf = buf[:-364] + bytes("%06o\0" % chksum, "ascii") + buf[-357:]
    # …… #
还有这样的代码：
    unsigned int calculate_checksum(struct tar_t * entry){
        // use spaces for the checksum bytes while calculating the checksum
        memset(entry -> check, ' ', 8);
        // sum of entire metadata
        unsigned int check = 0;
        for(int i = 0; i  block[i];
        }
        snprintf(entry -> check, sizeof(entry -> check), "%06o0", check);
        entry -> check[6] = '\0';
        entry -> check[7] = ' ';
        return check;
    }
还有我手写的计算已生成文件头部校验和的代码
    const fs = require('fs');
    fs.readFile('test.tar', function (err, data) {
      if (err) throw err;
      const headers = data.slice(0, 512);
      const body = data.slice(512);
      let sum = 8 * 0x20
      for (let i = 0; i < 148; i++)
        sum += headers[i]
      for (let i = 156; i < 512; i++)
        sum += headers[i]
      console.log(sum.toString(8));
    })
**那么刚才的数据包是真的不能手动改么？非也！** 同时修改文件名部分和校验和即可。以下是数学题：
假如我们将`./1.txt`修改为`../1.txt`使其进入`/tmp`目录下，已知`.` **十六进制** 表示为`0x2E`，原校验和为 _八进制_
`10565`。 原始数据包`name`字段去掉一位空字节（0x00）补上`.`（0x2E），然后重新计算校验和。换算 _八进制_ 原校验和`10565`到
**十六进制**`0x1175`加 **十六进制**`0x2E`得`0x11A3`，再换算成 _八进制_ `10643`……很快啊，新的校验和出来了！
大胆修改数据包吧！
那么关于在macOS上使用自带tar软件打包后修改包失败问题，也是校验和错误的问题。他们都遵守了相同的规范，自行调试下即可。
## 0x03 总结&尾巴
这个漏洞从原理到复现都不算难，所以文章本身没有什么创新的，更像是我的一点研究笔记并想办法将我研究的内容讲出来讲明白，或者能帮助大家解答一些之前复现时候的疑问让大家看了能恍然大明白也算这篇文章的一点贡献。通过这篇文章，我也想传递一种观点，漏洞研究其实不应该只盯着漏洞本身，漏洞可以扩展的知识点太多了：  
**偏应用一点：** 了解这个软件/组件/中间件是干什么的的、尝试搭建起来写点代码看看他们跑起来的样子。  
**偏底层一点：**
研究漏洞接触到的相关知识点，可能是Linux/Windows相关的，文件相关的，甚至是某个协议规范、某个算法的实现、某个数据结构、某种设计思想。  
**偏攻击一点：** 漏洞如何EXP化、如何回显搞定不出网的环境、如何让内网设备无感知攻击的存在、如何加载内存马等。  
**偏漏洞挖掘：** 去找一下类似的利用点，或者这个新的软件/组件/中间件是否能带给你一些新的漏洞挖掘思路。  
…… 总之太多知识和事情可以从一个漏洞扩展出来，学海无涯，技术无边，学无止境，你我共勉。
* * *