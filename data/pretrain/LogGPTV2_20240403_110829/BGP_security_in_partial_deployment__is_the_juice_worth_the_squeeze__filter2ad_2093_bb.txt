the algorithm “ﬁxes” to an insecure legitimate route in S is
also ﬁxed to a legitimate route in T . There are two cases:
(a) if s is ﬁxed to a secure route in T , it uses a legitimate
route, (b) otherwise, an inductive argument shows that the
algorithm computes the same next hop Nxt(s) for s in both
deployments T and S, and since the route was legitimate in
S, it will be legitimate in T as well.
H. SIMULATIONS
Our simulations compute the following for each destina-
tion d:
1. The S*BGP routing outcome for each of our 3 S*BGP
routing models and for every deployment set S consid-
ered in the paper (to enable computations that quantify
protocol downgrade attacks );
2. The BGP routing outcome with respect to every possi-
ble pair (m, d) and with S = ∅ (to compute partitions
into doomed/immune/protectable ASes, and to deter-
mine which ASes where happy in the baseline scenario
where S = ∅);
3. The S*BGP routing outcome for every possible (m, d)
in each of our 3 S*BGP routing models and for every
deployment set S considered in the paper (to compute
the happy ASes, to detect phenomena like collateral
beneﬁts and damages, and as part of computations that
quantify protocol downgrade attacks );
To do this, we use the algorithms in Appendix B.2-B.4,
where the we execute the FCR, FSCR, FPeeR, FSPeeR,
FPrvR, and FSPrvR subroutines using breath-ﬁrst searches.
The overall complexity of our simulations is therefore O(|M||D|(|V |+
|E|) for each deployment S. We optimize the running time
of our simulations in two ways:
Re-using information.
Instead of running multiple com-
putations “from scratch” our simulations often re-use infor-
mation and pass it on from one computation to the next
(e.g., an AS that is doomed with respect to a speciﬁc attacker-
destination pair (m, d) will not route to d regardless of the
deployment scenario S, etc.).
Parallelization. We run these computations in parallel
across all destinations d. Our code was written in C++ and
Figure 18: Reduction
parallelization was achieved with MPI on a BlueGene and
Blacklight supercomputers.
I. HARDNESS RESULTS
We prove Theorem 5.1, that shows that the “Max-k-Security”
problem is NP-hard in each of our three routing models.
Recall from Section 5.1, in the “Max-k-Security” problem,
we are given an AS graph, G = (V, E), a speciﬁc attacker-
destination pair (m, d), and a parameter k > 0, ﬁnd a set of
ASes S of size k that maximizes the total number of happy
ASes.
To prove Theorem 5.1, we consider a slightly diﬀerent
problem that we will call the “Decisional-k-(cid:96)-Security” prob-
lem (Dk(cid:96)SP): Given an AS graph, a speciﬁc attacker-destination
pair (m, d), and parameters k > 0 and 1 ≤ (cid:96) ≤ |V |, deter-
mine if there is a set of secure ASes S of size k that results
in at least (cid:96) happy ASes. Notice that this problem is in NP
(since we can check the number of happy ASes in polynomial
time given the algorithms discussed in Appendix B) and is
certainly poly-time reducible to “Max-k-Security”. There-
fore, the following theorem implies Theorem 5.1:
Theorem I.1. Dk(cid:96)SP is NP-Complete in each of our three
routing policy models.
Proof. We present a poly-time reduction from the Set
Cover Decisional Problem (SCDP). In SCDP, we are given
a set N with n elements, a family F of w subsets of N and
an integer γ ≤ w, and we must decide if there exist γ subsets
in the family F that can cover all the elements in N .
Our reduction is shown in Figure 18. For each element
ei ∈ N in the SCDP instance, we create an AS ei in our
Dk(cid:96)SP instance and connect it to the attacker via a provider-
to-customer edge. For each subset sj ∈ F , we create an AS
sj in our our Dk(cid:96)SP instance and connect it to the desti-
nation d via a provider-to-customer edge. We connect AS
ei to AS sj via a provider-to-customer edge if ei ∈ sj in
the SCDP problem. Moreover, we require that every ei’s
has a tiebreak criteria TB that prefers the route through m
over any route through any sj. Notice that the perceivable
routes at every ei are of the same length and type; namely,
two-hop customer routes. Finally, we let (cid:96) = n + w + 1, and
let k = n + γ + 1.
Suppose that our SCDP instance has a γ-cover. We argue
that this implies that our corresponding Dk(cid:96)SP should be
able to choose a set S of k secure ASes that ensure that
at least (cid:96) ASes are happy. The following set S of secure