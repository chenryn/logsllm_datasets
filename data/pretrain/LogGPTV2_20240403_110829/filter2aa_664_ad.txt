1
-
0.05
0.00695
0.01834
15
FR-EN
1,2
0
-
0.05
0.00696
0.01834
16
FR-EN
1,2
∞
(1)
0.05
0.00551
0.01486
17
FR-EN
1,2
∞
(2)
0.05
0.00264
0.00721
18
FR-EN
1,2
2
(2)
0.05
0.00521
0.01401
19
FR-EN
1,2
1
(1)(2)
0.00
0.00818
0.02158
Fig. 3. Bitrates for the diﬀerent conﬁgurations. Engine 1 is Google [16], Engine
2 is Linguatec [19]. SS-W lists the threshold for the number of witnesses in
semantic substitution (∞ for no semantic substitutions). The error-passes are
(1) articles and (2) prepositions. The quality limit is the lower limit for the
relative estimated translation quality (see Section 6.3). The BR columns give
the bitrate for plaintext and compressed text, counting only the size of the
generated translation (excluding the text in the source language).
In order to give an idea of the generated translations for the diﬀerent settings
(see Figure 3) we give translations for a German sentence (translated to English)
and a French sentence (also translated to English). The original German sen-
tences were“Gleich in den ersten Tagen nach der Katastrophe wies Unicef darauf
16
C. Grothoﬀ, K. Grothoﬀ, L. Alkhutova, R. Stutsman, M. Atallah
hin, dass die Kinder unter den Opfern des Seebebens am schwersten betroﬀen
sind. Wir sind heute in einem Maß von einer funktionierenden Infrastruktur ab-
h¨angig, wie es nie zuvor der Fall war.”, which in English would be “Already in
the ﬁrst days after the disaster, Unicef pointed out that children were hit worst
among the victims of the seaquake. Today, the extent of our dependency on a
working infrastructure is larger than ever.”.
Google [16] translates this sentence as follows: “Directly in the ﬁrst days
after the disaster Unicef pointed out that the children among the victims of
the sea-quake are most heavily concerned. We depend today in a measure on
a functioning infrastructure, as it was the case never before.”. The Linguatec
engine returns “Is Unicef pointed out after the catastrophe within the ﬁrst days
that the children are aﬀected most heavily under the victims of the seaquake.
We are dependent in a measure of an operating infrastructure today how it the
case never was before.”
If we add errors with the article substitution (1), we could translations such as
“Directly in the ﬁrst days after the disaster Unicef pointed out that the children
among the victims of an sea-quake are most heavily concerned. We depend today
in a measure on a functioning infrastructure, as it was an case never before.” For
prepositions, a possible result is “Directly in the ﬁrst days behind the disaster
Unicef pointed out that the children among the victims of the sea-quake are
most heavily concerned. We depend today in a measure above a functioning
infrastructure, as it was the case never before.”
6
Discussion
This section discusses various attacks on the steganographic encoding and pos-
sible defences against these attacks. The discussion is informal, as the system is
based on MT imperfections that are hard to analyze formally (which is one of
the reasons why MT is such a hard topic).
6.1
Future Machine Translation Systems
A possible problem that the presented steganographic encoding might face in
the future is signiﬁcant progress in machine translation. If machine translation
were to become substantially more accurate, the possible margin of plausible
mistakes might get smaller. However, one large category of machine translation
errors today results from the lack of context that the machine translator takes
into consideration.
In order to signiﬁcantly improve existing machine translation systems one
necessary feature would therefore be the preservation of context information
from one sentence to the next. Only with that information will it be possible to
eliminate certain errors. But introducing this context into the machine transla-
tion system also brings new opportunities for hiding messages in translations.
Once machine translation software starts to keep context, it would be possible
for the two parties that use the steganographic protocol to use this context as a
Translation-Based Steganography
17
secret key. By seeding their respective translation engines with k-bits of context
they can make deviations in the translations plausible, forcing the adversary to
potentially try 2k possible contextual inputs in order to even establish the pos-
sibility that the mechanism was used. This is similar to the idea of splitting the
corpus based on a secret key, with the diﬀerence that the overall quality of the
per-sentence translations would not be aﬀected.
6.2
Repeated Sentence Problem
A general problem with any approach to hiding messages in the translation is
that if the text in the source language contains the same sentence twice it might
be translated into two diﬀerent sentences depending on the value of the bit that
was hidden. Since machine translation systems (that do not keep context) would
always produce the same sentence this would allow an attacker to suspect the use
of steganography. The solution to this problem is to not use repeated sentences
in the source text to hide data, and always output the translation that was used
for the ﬁrst occurence of the sentence.
This attack is similar to an attack in image steganography. If an image is dig-
itally altered, variations in the colors in certain implausible areas of the picture
might reveal the existence of a hidden message. Solving the problem is easier for
text steganography since it is easier to detect that two sentences are identical
than to detect that a series of pixels in an image belong to the same digitally
constructed shape and thus must have the same color.
6.3
Statistical Attacks
Statistical attacks have been extremely successful at defeating steganography of
images, audio and video (see, e.g., [13,20,25]). An adversary may have a sta-
tistical model (e.g. a language model) that translations from all available MT
systems obey. For example, Zipf’s law [21] states that the frequency of a word
is inversely proportional to its rank in the sorted-by-frequency list of all words.
Zipf’s law holds for English, and in fact holds even within individual categories
such as nouns, verbs, adjectives, etc.
Assuming that all plausible translation engines generally obey such a sta-
tistical model, the steganographic encoder must be careful not to cause telltale
deviations from such distributions. Naturally, this is an arms race. Once such a
statistical law is known, it is actually easy to modify the steganographic encoder
to eliminate translations that deviate signiﬁcantly from the required distribu-
tions. For example, Golle and Farahat [15] point out (in the diﬀerent context
of encryption) that it is possible to extensively modify a natural language text
without straying noticeably from Zipf’s law. In other words, this is a very man-
ageable diﬃculty, as long as the steganographic system is made “Zipf-aware”.
We cannot preclude the existence of yet-undiscovered language models for
translations that might be violated by our existing implementation. However,
we expect that discovering and validating such a model is a non-trivial task
for the adversary. On the other hand, given such a model (as we pointed out
18
C. Grothoﬀ, K. Grothoﬀ, L. Alkhutova, R. Stutsman, M. Atallah
above) it is easy to modify the steganographic system so as to eliminate devi-
ations by avoiding sentences that would be ﬂagged. Section 7 sketches various
statistical models for attacks that might be useful against the existing prototype
implementation.
6.4
Use for Watermarking
The technique of this paper can be used for watermarking, in a manner that
does not require the original text (or any reference translation) for reading the
mark. The idea for not requiring the original in order to recover the message,
which was mentioned in Section 3.3, is now sketched in more detail.
We begin with a fragile version of the scheme. Let the bits of the mark be de-
noted by b1, . . . , bn. Let k ∈ N be a parameter that will be determined later. The
technique consists of using a (secret) random seed s as key for determining those
places where the n bits of the mark will be embedded. Let the random sequence
generated by the seed consist of numbers r1, . . . , rk·n and let the corresponding
places in the text where the bits of the mark will be embedded be p1, . . . , pk·n
(with pi denoting the spot for the i-th bit). Of course pi is determined by ri.
The pi’s are partitioned into groups of size k each. Let the resulting groups
be C1, . . . , Cn (C1 consists of p1, . . . , pk). In what follows Pj will denote the
concatenation of the contents of the k positions pi that are in group Cj (so Pj
changes as the algorithm modiﬁes those k positions – e.g., when the algorithm
replaces “cat” by “feline” that replacement is reﬂected within Pj). Each Cj is
associated with sj which is deﬁned to be the least signiﬁcant bit of Hs(Pj)
where Hs is a keyed cryptographic one-way hash function having s as key (recall
that s is the secret seed that determined the ri).
As a result, sj changes with 50% probability as Pj is modiﬁed. In order to
embed bj in Cj the algorithm“tortures Cj until it confesses”: Cj is modiﬁed until
its sj equals bj. Every one of the k possible changes made within Cj has a 50%
change of producing an sj that equals the target bj, and the probability that we
fail e times is 2−e. A large choice for k will give the algorithm more room for
modiﬁcations and thus ensure that the embedding will fail with reasonably low
probability. It is possible to choose a small k and use an error-correcting code in
order to correct bits that could not be embedded properly.
The advantage of the scheme is that the receiver can receive all of the sj from
the seed s without needing the original text or any reference baseline translation
of it: the received message and the seed are all that is required to retrieve the
mark.
More robust versions of the scheme can be obtained by using the techniques
described in [4], which include the use of markers (a marker is a sentence that
merely indicates that the group of contiguous sentences that immediately follow
it are watermark-carrying, so the marker is not itself watermark-carrying). One
of the ways of determining markers is by a secret (because keyed) ordering of the
sentences, the markers being the sentences that are lowest in that secret ordering
– see [4] for details, and for an analysis that quantiﬁes the scheme’s resilience
against diﬀerent kinds of attacks.
Translation-Based Steganography
19
6.5
Other applications
While we have explored the possibility of using the inherent noise of natural
language translation to hide data, we suspect that there may be other areas
where transformation spaces exist which exhibit a similar lack of rigidity. For
example, compilers doing source translation have a variety of possible output
possibilities that still preserve semantics. Finding a way to hide information with
these possibilities while still mimicking the properties of various optimization and
transformation styles is a possibility for future work.
7
Statistical Attack Vectors
Statistical attacks fall into two categories. The ﬁrst attacks the translation. The
translation models look at both the source and the target text. The second
category, language models, only look at the generated translations and try to
ﬁnd inconsistencies within that text, without reference to the original text.
7.1
Translation Models
Word Count The average word count may yield a diﬀerent ratio between
the source and target languages when steganography is in use. The rationale is
that the steganographic engine will discard words more readily than inserting
them (though, insertion of more words can occur in the current engine through
preposition substitution). An unmodiﬁed translation would then yield a higher
ratio of average number of words in the source language to the average number
of words in the target language compared to a text that had information hidden
in it.
Engine Errors Certain engines are given to certain types of errors. If a text
is translated by an engine and has no information hidden in it it should make
the errors characteristic to that engine 100% of the time. Taking the ratio of
the number of errors characteristic to one engine over the number of errors
characteristic to another should always yield a 0 or 1 (tolerance can be allowed in
case the user hand corrected some errors). If the ratio yields something outside
of that tolerance it can be seen that there are a mixture of error types, and
therefore a mixture of engines being used. Automatic classiﬁcation of engine-
speciﬁc errors is likely to be rather diﬃcult. Also, if the translation engines used
by the encoder are unknown to the attacker this attack cannot be used.
7.2
Language Model
Character Count The idea here is quite similar to the previous model. An
untouched translation will yield a lower ratio of average number of characters in
the source language to the average number in the target language. The rationale
here is when substitution occurs the substituted word is more likely to be more
complex and longer than the original translation.
20
C. Grothoﬀ, K. Grothoﬀ, L. Alkhutova, R. Stutsman, M. Atallah
Nouns Without Articles Since the current steganographic engine discards
articles for nouns on occasion and never inserts new ones (since it does not
have enough semantic knowledge to detect nouns) the total percentage of nouns
without articles should be higher for a text containing hidden information.
Witness Count When a semantic substitution is made by our system the word
that is chosen for replacement is likely to be more speciﬁc or complex than the
word that it is replacing. With that in mind the number of witnesses for the
word selected to hide information should ordinarily be lower than the word that
it is replacing. A normal translation should thus yield a higher ratio between