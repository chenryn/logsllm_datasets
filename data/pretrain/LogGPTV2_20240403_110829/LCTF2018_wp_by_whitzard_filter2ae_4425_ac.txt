    .cinit:0000C40F                 .byte  30h ; 0
于是可以猜测前四位即为LCTF，生成的4个byte替换掉0000。（用地址偏移也可以计算，不过比较繁琐，能猜就猜）
然后enc_flag中就进行了RC4加密：
    .text:0000C036 enc_flag:      
    .text:0000C036                 mov.w   #8, 0(SP)
    .text:0000C03A                 mov.w   &index, R15
    .text:0000C03E                 mov.w   #300h, R12
    .text:0000C042                 mov.w   #364h, R13
    .text:0000C046                 mov.w   #3A6h, R14
    .text:0000C04A                 call    #RC4_code
    .text:0000C04E                 clr.w   R15
    .text:0000C050                 jmp     $C$L9
参数R13为key，R14为flag，R15为长度。
加密之后的一段代码将密文转换为16进制输出。
于是我们可以枚举可能的key尝试解密（这里猜测key是可打印的，不过全试一遍也没差多少）：
    enc='2db7b1a0bda4772d11f04412e96e037c370be773cd982cb03bc1eade'.decode('hex')
    key='LCTF'
    def rc4(data, key):
        x = 0
        box = range(256)
        for i in range(256):
            x = (x + box[i] + ord(key[i % len(key)])) % 256
            box[i], box[x] = box[x], box[i]
        x = y = 0
        out = []
        for char in data:
            x = (x + 1) % 256
            y = (y + box[x]) % 256
            box[x], box[y] = box[y], box[x]
            out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
        return ''.join(out)
    for i in range(256):
        k = [(i 0 || bot_health  0 )
      {
        puts("put the words you want to talk");
        __isoc99_scanf("%4s", &format);
        printf(&format, &format);
      }
可以看到要退出while循环，玩家生命必须小于0，因此无法触发最后一个if分支。
然后继续找其他漏洞，发现一个可以读文件的函数：
    unsigned __int64 print_flag()
    {
      int fd; // ST0C_4
      int v2; // [rsp+8h] [rbp-68h]
      int v3; // [rsp+8h] [rbp-68h]
      int v4; // [rsp+8h] [rbp-68h]
      char file[4]; // [rsp+10h] [rbp-60h]
      char buf[60]; // [rsp+20h] [rbp-50h]
      unsigned __int64 v7; // [rsp+68h] [rbp-8h]
      v7 = __readfsqword(0x28u);
      if ( !user_num )
      {
        file[1] = fl4g[1];
        file[2] = fl4g[2];
        file[3] = fl4g[3];
        v2 = 233;
        file[0] = 233 * fl4g[0];
        while ( v2 != 240 )
        {
          if ( file[0] & 1 )
          {
            file[0] = 3 * file[0] + 1;
            v2 *= 6;
          }
          else
          {
            file[0] /= 2;
            v2 = (v2 + 39) % 666;
          }
        }
        file[0] += 126;
        v3 = 233;
        file[2] *= 233;
        while ( v3 != 144 )
        {
          if ( file[2] & 1 )
          {
            file[2] = 3 * file[2] + 1;
            v3 *= 6;
          }
          else
          {
            file[2] /= 2;
            v3 = (v3 + 39) % 666;
          }
        }
        file[2] = (char)(211 * file[2] + 97) / 13;
        v4 = 233;
        file[3] *= 233;
        while ( v4 != 240 )
        {
          if ( file[3] & 1 )
          {
            file[3] = 3 * file[3] + 1;
            v4 *= 6;
          }
          else
          {
            file[3] /= 2;
            v4 = (v4 + 39) % 666;
          }
        }
        file[3] += 102;
        fd = open(file, 0);
        read(fd, buf, 0x3CuLL);
        puts("congrantualtions!");
        puts(buf);
      }
      return __readfsqword(0x28u) ^ v7;
    }
但是要满足user_num为0，而这个user_num是在登录时赋值的：
    unsigned __int64 signin()
    {
      int i; // [rsp+Ch] [rbp-24h]
      char name[9]; // [rsp+10h] [rbp-20h]
      unsigned __int64 v3; // [rsp+28h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      getchar();
      name[8] = 1;
      puts("input your name");
      __isoc99_scanf("%9s", name);
      for ( i = name[8]; i  health )
      {
        puts("you have to throw you e_card!");
        throw_cnt = card_cnt - health;
        while ( 1 )
        {
          while ( idx < card_cnt )
          {
            switch ( cards[idx] )
            {
              case 97:
                printf("%d Attack ", (unsigned int)++idx);
                break;
              case 103: