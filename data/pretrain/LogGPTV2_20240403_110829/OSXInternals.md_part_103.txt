Old value = 1
New value = 2
main () at test_malloc.c:22
22 free(ptr2);
At this point, we expect the header bitmap to remain unchanged, but bits 18 and 80corresponding to ptr1
and ptr3should have been cleared in the in-use bitmap.
(gdb) x/4x 0x400000
0x400000: 0x25920400 0x00000200 0x00000100 0x00800000
(gdb) x/4x 0x400000+0x2004
0x402004: 0x25920000 0x00000200 0x00000000 0x00800000
Moreover, the memory contents of ptr1 and ptr3 should have been populated to convert the
corresponding blocks to free blocks.
(gdb) x/4x ptr1
0x300120: 0x0030307b 0x00300500 0x00000000 0x001f0000
(gdb) x/4x ptr3
0x300500: 0x0030345b 0x00000000 0x00300120 0x001f0000
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 93 of 135
Recall that the free block begins with a checksum, which is followed by pointers to previous and next free
blocks, with a trailing unsigned short value specifying the size of the block in units of quanta. We see that
the freed blocks are chained on the same free listptr1's previous pointer points to ptr3, whereas ptr3's
next pointer points to ptr1. This is expected, as both blocks have the same number of quanta (0x1f, or
31). Moreover, we can verify that the two checksums are correct by XOR'ing the relevant pointers with
the magic number we saw earlier (0x357B).
Let us continue the program again, which will free ptr2 and ptr4 before the next watchpoint is hit.
(gdb) cont
Continuing.
Hardware watchpoint 1: watch
Old value = 2
New value = 3
main () at test_malloc.c:26
26 return 0;
(gdb) x/4x 0x400000
0x400000: 0x25920400 0x00000200 0x00000000 0x00800000
(gdb) x/4x 0x400000+0x2004
0x402004: 0x25920000 0x00000200 0x00000000 0x00800000
(gdb) x/4x ptr2
0x300310: 0x00000000 0x00000000 0x00000000 0x00000000
(gdb) x/4x ptr4
0x3006f0: 0x00000000 0x00000000 0x00000000 0x00000000
(gdb)
We see that although ptr2 and ptr4 have been freed, the corresponding bits in both the header and in-use
bitmaps are unchanged. Moreover, there is no free block information in the contents of ptr2 and ptr4.
This is so because the allocator has coalesced the four adjacent free blocks into a single big free block
starting at ptr1. Examining ptr1's contents should confirm this.
(gdb) x/4x ptr1
0x300120: 0x0000357b 0x00000000 0x00000000 0x007c0000
The free block at ptr1 is now the only block on its free list, as both its previous and next pointers contain
zeros. Moreover, the number of quanta in this free block is 0x7c (124), which is as expected.
8.15.2.2. Small Allocations
Small allocations are handled in a manner conceptually similar to tiny allocations. Figure 834 shows the
key data structures involved in small allocations. Besides the larger quantum size of a small region, the
metadata area following the region is structured differently from the tiny region metadata area: Instead of
the header and in-use bitmaps, the small region metadata area is an array of 16-bit quantities. The ith
element of this array provides two pieces of information about the ith quantum in the small region. If the
most significant bit of the array element is set, the corresponding quantum is the first quantum of a free
block. The remaining 15 bits, which are nonzero only in a first quantum (whether of a free block or an
allocated block), represent the number of quanta contained in the block. Like the set of tiny free lists,
there are 32 small free lists, each of which is used for referring to free objects of the corresponding
quantum size.
Figure 834. Internal bookkeeping of small malloc allocations (32-bit)
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 94 of 135
8.15.2.3. Large Allocations
Large allocations are described by large_entry_t structures. As shown in Figure 831, a large_entry_t
structure is an alias for a compact_range_t, which contains a single field called
address_and_num_pages that represents both an address (high bits) and the number of pages allocated at
that address (low bits). Since the maximum large allocation is 4095 pages, the low 12 bits are used to
specify the number of pages. Large allocations are performed through vm_allocate(), which always
returns a page-aligned addressthat is, the low 12 bits of the address are always zero. Therefore, it can be
OR'ed with the number of pages to yield address_and_num_pages with no loss of information. The
allocator tracks large entries by hashing their addresses in a table referenced by the large_entries field
of the szone_t structure. An entry's hash index is its address modulo the total number of entries. If there
is a hash collision, the index is incremented by one, and so onwhen the index becomes equal to the size of
the table, it wraps around to zero. If the number of large allocations in use becomes higher than
approximately 25% of the number of entries in the hash table, the table's density is deemed too high, and
the allocator grows the hash table.
8.15.2.4. Huge Allocations
Huge allocations have a relatively simpler bookkeeping. For each huge allocation, the allocator maintains
a huge_entry_t structure. These structures are kept in the array referenced by the huge_entries field of
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 95 of 135
the szone_t structure. Upon a huge entry allocation, which is performed through vm_allocate(), the
allocator grows this array by internally allocating memory, copying the old entries to the grown array, and
freeing the old array. As shown in Figure 831, huge_entry_t is an alias for vm_range_t, which contains
an address and a size.
8.15.3. The malloc() Routine
The various malloc API functions, such as malloc() and free(), are simple wrappers around internal
functions that in turn call the scalable zone functions through the function pointers in the malloc_zone_t
structure corresponding to the default zone. To use any other zone than the default, the malloc_zone_*
functions from Figure 829 must be used directly.
Figure 835 shows the processing of the malloc() library function, which simply calls
malloc_zone_malloc(), with the return value from inline_malloc_default_zone() being the zone to
allocate from. The inline function checks the value of the global variable malloc_num_zones to determine
whether it is being called for the first time. If so, it first initializes the malloc package by creating a
scalable zone, which will be used as the default malloc zone. It calls malloc_create_zone(), which first
checks for the presence of several environment variables that affect malloc's behavior. These variables are
documented in the malloc(3) manual page, and a summary of the available variables can be printed by
running any program that uses malloc() with the MallocHelp environment variable set.
$ MallocHelp=1 /usr/bin/true
(10067) malloc: environment variables that can be set for debug:
- MallocLogFile  to create/append messages to file  instead of stderr
- MallocGuardEdges to add 2 guard pages for each large block
- MallocDoNotProtectPrelude to disable protection (when previous flag set)
- MallocDoNotProtectPostlude to disable protection (when previous flag set)
...
- MallocBadFreeAbort  to abort on a bad free if  is non-zero
- MallocHelp - this help!
Figure 835. Processing of the malloc() function in the system library
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 96 of 135
Once the default zone is available, malloc_zone_malloc() calls the malloc() function exported by the
scalable malloc layer. The latter functionszone_malloc()calls the szone_malloc_should_clear()
internal function with the cleared_request Boolean parameter set to false. In contrast, the
szone_calloc() function calls szone_malloc_should_clear() with cleared_request set to true. As
shown in Figure 835, szone_malloc_should_clear() classifies the allocation request based on size and
dispatches it to the appropriate handler.
While changing the size of an allocation because of a realloc() call, the allocator first attempts to
reallocate in place. If that fails, a new buffer is allocated, into which the allocator copies the contents of
the old buffer. If the old buffer had at least VM_COPY_THRESHOLD bytes (defined to be 40KB) of memory,
the allocator uses vm_copy() for copying. If the old buffer had less memory, or if vm_copy() fails, the
allocator uses memcpy().
8.15.4. The Largest Single Allocation (32-bit)
Depending on a program's needs, it may be affected by the most amount of contiguous memory it can
allocate. Given the size of a 64-bit virtual address space, a 64-bit program is highly unlikely to face this
issue. However, a 32-bit address space is limited to 4GB of virtual memory, not all of which is available
to the program. As we saw in Table 84, several virtual address ranges are unavailable for the program's
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 97 of 135
use as the system uses these ranges for predefined mappings.
The program shown in Figure 836 can be used to determine the maximum size of a single allocation,
which can be no larger than the largest free contiguous virtual address range. Note that the exact number
is likely to differ across operating system versions and even across specific installations of the same
version, although the difference may not be great.
Figure 836. Determining the size of the largest single malloc() allocation
// large_malloc.c
#include 
#include 
#include 
#include 
#define PROGNAME "large_malloc"
int
main(int argc, char **argv)
{
void *ptr;
unsigned long long npages;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
if ((npages = strtoull(argv[1], NULL, 10)) == ULLONG_MAX) {
perror("strtoull");
exit(1);
}
if ((ptr = malloc((size_t)(npages 
#include 
#include 
#include 
#include 
#define PROGNAME "max_vm_allocate"
int
main(int argc, char **argv)
{
kern_return_t kr;
unsigned long long nbytes;
mach_vm_address_t address;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
if ((nbytes = strtoull(argv[1], NULL, 10)) == ULLONG_MAX) {
fprintf(stderr, "invalid number of bytes specified\n");
exit(1);
}
kr = mach_vm_allocate(mach_task_self(), &address,
(mach_vm_size_t)nbytes, TRUE);
if (kr == KERN_SUCCESS) {
printf("allocated %llu bytes at %p\n", nbytes, (void *)address);
mach_vm_deallocate(mach_task_self(), address, (mach_vm_size_t)nbytes);
} else
mach_error("mach_vm_allocate:", kr);
exit(0);
}
$ gcc -arch ppc64 -Wall -o max_vm_allocate max_vm_allocate.c
$ ./max_vm_allocate 2251793095786496
allocated 2251793095831552 bytes at 0x8feb0000
$ ./max_vm_allocate 2251793095786497
mach_vm_allocate: (os/kern) no space available
8.15.6. Enumerating All Pointers
The scalable zone implementation provides several functions for debugging and analysis. The malloc
layer exports some of this functionality to user programs through functions such as
malloc_zone_from_ptr(), malloc_zone_get_all_zones(), malloc_zone_print(),
malloc_zone_print_ptr_info(), malloc_zone_statistics(), and malloc_zone_log(). Moreover,
those scalable zone functions that have function pointers in the malloc_zone_t structure or the szone_t
structure can also be called by a user program, although doing so would be a layering violation since the
szone_t structure is meant to be opaque in the malloc layer.
Note that we cannot use printf(3) in our program since printf()'s implementation itself uses malloc
(). We will use a custom printf()-like functionlet us call it nomalloc_printf()that does not use
printf() and in turn does not use malloc(). Figure 838 shows the implementation of nomalloc_printf
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 99 of 135
(). We will also use this function in other examples that follow.
Figure 838. Implementing a version of the printf() function without using malloc()
// nomalloc_printf.h
#ifndef _NOMALLOC_PRINTF_H
#define _NOMALLOC_PRINTF_H
#include 
extern void _simple_vdprintf(int, const char *, va_list);
inline void
nomalloc_printf(const char *format, ...)
{
va_list ap;
va_start(ap, format);
_simple_vdprintf(STDOUT_FILENO, format, ap);
va_end(ap);
}
#endif
The program shown in Figure 839 calls a pointer enumeration function implemented by the scalable zone
layer. The function is available to the malloc layer through the enumerator field of the
malloc_introspection_t substructure within the malloc_zone_t structure. One of the arguments to the
function is a pointer to a recorder functiona callback invoked for each allocated range encountered. The
function also accepts a type mask that limits the enumeration to specific types of memory.
Figure 839. Enumerating all malloc()-allocated pointers in a program
// malloc_enumerate.c
#include 
#include 
#include 
#include 
#include 
#include 
#include "nomalloc_printf.h"
struct recorder_args {
const char *label;
unsigned type_mask;
} recorder_args[] = {
{ "Allocated pointers\n", MALLOC_PTR_IN_USE_RANGE_TYPE },
{ "\nRegions containing pointers\n", MALLOC_PTR_REGION_RANGE_TYPE },
{ "\nInternal regions\n", MALLOC_ADMIN_REGION_RANGE_TYPE },
};
void
my_vm_range_recorder(task_t task, void *context, unsigned type_mask,
vm_range_t *ranges, unsigned range_count)
{
vm_range_t *r, *end;
for (r = ranges, end = ranges + range_count; r address, r->size);
}
int
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 100 of 135
main(int argc, char **argv)
{
int i;
void *ptr = NULL;
unsigned long long size;
malloc_zone_t *zone;
if (!(zone = malloc_default_zone()))
exit(1);
if (argc == 2) { // allocate the requested size
if ((size = strtoull(argv[1], NULL, 10)) == ULLONG_MAX) {
fprintf(stderr, "invalid allocation size (%s)\n", argv[1]);
exit(1);
}
if ((ptr = malloc((size_t)size)) == NULL) {
perror("malloc");
exit(1);
}
}
for (i = 0; i introspect->enumerator(mach_task_self(), // task
NULL, // context