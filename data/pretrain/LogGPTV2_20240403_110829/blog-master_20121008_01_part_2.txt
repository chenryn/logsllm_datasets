 user #5  | 2012-10-08 15:39:19.892516+08 |      8442981    
 user #5  | 2012-10-08 15:37:09.860516+08 |     70260530    
 user #5  | 2012-10-08 15:36:11.626916+08 |     31693867    
 user #6  | 2012-10-08 15:35:00.865316+08 |     73969641    
 user #6  | 2012-10-08 15:32:59.818916+08 |     93242875    
 user #6  | 2012-10-08 15:31:04.474916+08 |     19057377    
 user #6  | 2012-10-08 15:28:27.572516+08 |     32746489    
 user #6  | 2012-10-08 15:28:15.562916+08 |     53467567    
 user #7  | 2012-10-08 15:45:52.753316+08 |     87485440    
 user #7  | 2012-10-08 15:44:07.172516+08 |     79248597    
 user #7  | 2012-10-08 15:37:00.961316+08 |     42857958    
 user #7  | 2012-10-08 15:31:24.519716+08 |     95801165    
 user #7  | 2012-10-08 15:24:51.572516+08 |     68538811    
 user #8  | 2012-10-08 15:47:58.810916+08 |     72727414    
 user #8  | 2012-10-08 15:46:36.903716+08 |     31336421    
 user #8  | 2012-10-08 15:46:19.364516+08 |     41223414    
 user #8  | 2012-10-08 15:41:28.974116+08 |     65943069    
 user #8  | 2012-10-08 15:41:17.223716+08 |     50431652    
 user #9  | 2012-10-08 15:49:09.658916+08 |     32979344    
 user #9  | 2012-10-08 15:47:22.350116+08 |     78366412    
 user #9  | 2012-10-08 15:45:29.511716+08 |     12629410    
 user #9  | 2012-10-08 15:43:49.201316+08 |     97705953    
 user #9  | 2012-10-08 15:40:07.930916+08 |     30183886    
```    
## lateral语法  
https://www.postgresql.org/docs/devel/static/sql-select.html  
lateral可以在FROM ITEM中，也可以在JOIN ITEM中。LATERAL后面可以是子查询、函数名。LATERAL中的子查询可以直接引用LATERAL左边的ITEM进行JOIN（类似exists, not exists子句中的引用用法）。  
A LATERAL item can appear at top level in the FROM list, or within a JOIN tree.   
In the latter case it can also refer to any items that are on the left-hand side of a JOIN that it is on the right-hand side of.  
如果后面是函数名，那么可以不写lateral，因为JOIN中的函数会隐式使用lateral cross join.   
Table functions appearing in FROM can also be preceded by the key word LATERAL, but for functions the key word is optional;   
the function's arguments can contain references to columns provided by preceding FROM items in any case.  
```  
    [ LATERAL ] ( select ) [ AS ] alias [ ( column_alias [, ...] ) ]  
    with_query_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
    [ LATERAL ] function_name ( [ argument [, ...] ] )  
                [ WITH ORDINALITY ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
    [ LATERAL ] function_name ( [ argument [, ...] ] ) [ AS ] alias ( column_definition [, ...] )  
    [ LATERAL ] function_name ( [ argument [, ...] ] ) AS ( column_definition [, ...] )  
    [ LATERAL ] ROWS FROM( function_name ( [ argument [, ...] ] ) [ AS ( column_definition [, ...] ) ] [, ...] )  
                [ WITH ORDINALITY ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ]  
```  
## 带有LATERAL的SQL的计算步骤  
1、逐行提取被lateral子句关联（引用）的FROM或JOIN中的ITEM（也叫source table）的记录(s)中的column(s)  
for each row of the FROM item providing the cross-referenced column(s),   
or set of rows of multiple FROM items providing the columns,   
2、使用以上提取的column(s), 关联计算lateral子句中的ITEM  
the LATERAL item is evaluated using that row or row set's values of the columns.   
3、lateral的计算结果row(s)，与所有from, join ITEM(s)正常的进行JOIN计算  
The resulting row(s) are joined as usual with the rows they were computed from.   
4、从1到3开始循环，直到所有source table的行都取尽。  
This is repeated for each row or set of rows from the column source table(s).  
## LATERAL在OUTER JOIN中的使用限制（或定义限制）  
由于lateral的计算步骤是从source table逐条展开的，所以在OUTER JOIN时只能使用source table作为whole端，LATERAL内的ITEM不能作为WHOLE端。  
因此lateral只能在left join的右边。或者right join的左边。因为它不能是WHOLE端。  
```  
The column source table(s) must be INNER or LEFT joined to the LATERAL item,   
else there would not be a well-defined set of rows from which to compute each set of rows for the LATERAL item.   
Thus, although a construct such as X RIGHT JOIN LATERAL Y is syntactically valid,   
it is not actually allowed for Y to reference X.  
```    
## lateral 举例  
https://www.postgresql.org/docs/devel/static/queries-table-expressions.html#QUERIES-LATERAL  
1、  
LATERAL is primarily useful when the cross-referenced column is necessary for computing the row(s) to be joined. A common application is providing an argument value for a set-returning function.   
For example, supposing that vertices(polygon) returns the set of vertices of a polygon, we could identify close-together vertices of polygons stored in a table with:   
```  
SELECT p1.id, p2.id, v1, v2  
FROM polygons p1, polygons p2,  
     LATERAL vertices(p1.poly) v1,  
     LATERAL vertices(p2.poly) v2  
WHERE (v1  v2)  v2) < 10 AND p1.id != p2.id;  
```  
2、  
It is often particularly handy to LEFT JOIN to a LATERAL subquery, so that source rows will appear in the result even if the LATERAL subquery produces no rows for them.   
For example, if get_product_names() returns the names of products made by a manufacturer, but some manufacturers in our table currently produce no products, we could find out which ones those are like this:  
```  
SELECT m.name  
FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true  
WHERE pname IS NULL;  
```  
## 参考    
1\. performance tuning case :use cursor or trigger replace group by and order by    
http://blog.163.com/digoal@126/blog/static/16387704020128142829610/    
2\. table or row variable :     
http://blog.163.com/digoal@126/blog/static/1638770402012989219190/    
3\. http://www.depesz.com/2012/10/05/getting-top-n-rows-per-group/    
4\. http://www.postgresql.org/docs/devel/static/queries-table-expressions.html    
5\. https://github.com/postgres/postgres/downloads    
6\. http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=5ebaaa49445eb1ba7b299bbea3a477d4e4c0430b    
7\. SRC :     
```    
doc/src/sgml/keywords.sgml    
doc/src/sgml/queries.sgml    
doc/src/sgml/ref/select.sgml    
doc/src/sgml/xfunc.sgml    
src/backend/catalog/information_schema.sql    
src/backend/catalog/sql_features.txt    
src/backend/nodes/outfuncs.c    
src/backend/optimizer/path/allpaths.c    
src/backend/optimizer/path/costsize.c    
src/backend/optimizer/path/indxpath.c    
src/backend/optimizer/path/joinpath.c    
src/backend/optimizer/path/joinrels.c    
src/backend/optimizer/path/tidpath.c    
src/backend/optimizer/plan/analyzejoins.c    
src/backend/optimizer/plan/createplan.c    
src/backend/optimizer/plan/initsplan.c    
src/backend/optimizer/plan/planagg.c    
src/backend/optimizer/plan/planner.c    
src/backend/optimizer/prep/prepjointree.c    
src/backend/optimizer/README    
src/backend/optimizer/util/placeholder.c    
src/backend/optimizer/util/var.c    
src/backend/parser/analyze.c    
src/backend/parser/gram.c    
src/backend/parser/gram.h    
src/backend/parser/gram.y    
src/backend/parser/parse_agg.c    
src/backend/parser/parse_clause.c    
src/backend/parser/parse_relation.c    
src/backend/utils/adt/ruleutils.c    
src/bin/psql/sql_help.c    
src/include/nodes/parsenodes.h    
src/include/nodes/relation.h    
src/include/parser/gram.h    
src/include/parser/kwlist.h    
src/include/parser/parse_node.h    
src/interfaces/ecpg/preproc/ecpg.addons    
src/interfaces/ecpg/preproc/preproc.c    
src/interfaces/ecpg/preproc/preproc.h    
src/interfaces/ecpg/preproc/preproc.y    
src/test/regress/expected/join.out    
src/test/regress/sql/join.sql    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")