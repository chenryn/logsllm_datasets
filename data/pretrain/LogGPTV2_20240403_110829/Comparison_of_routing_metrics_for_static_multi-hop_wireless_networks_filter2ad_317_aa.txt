title:Comparison of routing metrics for static multi-hop wireless networks
author:Richard Draves and
Jitendra Padhye and
Brian Zill
Comparison of Routing Metrics for Static Multi-Hop
Wireless Networks
Richard Draves
Jitendra Padhye
Brian Zill
Microsoft Research
{richdr, padhye, bzill}@microsoft.com
ABSTRACT
Routing protocols for wireless ad hoc networks have tradi-
tionally focused on ﬁnding paths with minimum hop count.
However, such paths can include slow or lossy links, leading
to poor throughput. A routing algorithm can select better
paths by explicitly taking the quality of the wireless links
into account. In this paper, we conduct a detailed, empirical
evaluation of the performance of three link-quality metrics—
ETX, per-hop RTT, and per-hop packet pair—and compare
them against minimum hop count. We study these metrics
using a DSR-based routing protocol running in a wireless
testbed. We ﬁnd that the ETX metric has the best per-
formance when all nodes are stationary. We also ﬁnd that
the per-hop RTT and per-hop packet-pair metrics perform
poorly due to self-interference. Interestingly, the hop-count
metric outperforms all of the link-quality metrics in a sce-
nario where the sender is mobile.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Wireless
Networks
General Terms
Measurement, Performance, Experimentation
Keywords
Wireless multi-hop networks, Routing
1.
INTRODUCTION
Routing in ad hoc wireless networks has been an active
area of research for many years. Much of the original work
in the area was motivated by mobile application environ-
ments, such as battleﬁeld ad hoc networks. The primary fo-
cus in such environments is to provide scalable routing in the
presence of mobile nodes. Recently, interesting commercial
applications of multi-hop wireless networks have emerged.
One example of such applications is “community wireless
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.
networks” [27, 26, 16, 6].
In such networks, most of the
nodes are either stationary or minimally mobile. The focus
of routing algorithms in such networks is on improving the
network capacity or the performance of individual transfers.
Most current ad hoc routing protocols select paths that
minimize hop count [15, 24, 23, 22]. In static ad hoc wireless
networks, minimal hop count paths can have poor perfor-
mance because they tend to include wireless links between
distant nodes. These long wireless links can be slow or lossy,
leading to poor throughput [9]. A routing algorithm can se-
lect better paths by explicitly taking into account the quality
of wireless links.
Researchers have proposed many metrics to measure wire-
less link quality, but to our knowledge, the relative perfor-
mance of these metrics for the purpose of routing in static
ad hoc wireless networks has not been investigated. In this
paper, we study the performance of three link-quality met-
rics, and compare them against minimum hop-count routing.
The ﬁrst metric is called “Expected Transmission Count”
(ETX). This metric is based on measuring the loss rate of
broadcast packets between pairs of neighboring nodes [9].
The second metric is called “Per-hop Round Trip Time”
(RTT). This metric is based on measuring the round trip
delay seen by unicast probes between neighboring nodes [1].
The third metric is called “Per-hop Packet Pair Delay” (Pk-
tPair). This metric is based on measuring the delay be-
tween a pair of back-to-back probes to a neighboring node.
We incorporated these metrics in an ad hoc routing proto-
col based on DSR. We deployed this protocol on a 23-node
wireless testbed, and experimented with various traﬃc sce-
narios such as long-lived TCP ﬂows, multiple simultaneous
data transfers and simulated web traﬃc. We also considered
a scenario involving some mobility.
The main contributions of the paper are the following: (i)
We describe a routing protocol that incorporates the notion
of link quality metrics. (ii) We present detailed experimental
results to show that in scenarios with stationary nodes, the
ETX metric out-performs hop-count although it uses longer
paths. This is in contrast with the results in [9], in which
the authors saw little or no gain from ETX in a DSR-based
routing protocol. (iii) We show that the one-hop RTT and
one-hop packet-pair metrics perform poorly, because their
load-sensitivity leads to self-interference. (iv) We show that
in a scenario involving a mobile sender, minimum hop-count
routing performs considerably better than link-quality rout-
ing because the metrics do not react suﬃciently quickly.
Session 4: Wireless and Delay-Tolerant Networks2. LINK QUALITY METRICS
We consider three wireless link quality metrics in this pa-
per. We also support minimum hop-count routing by deﬁn-
ing a “HOP” metric. Each of these metrics represents a
diﬀerent notion of what constitutes good link quality.
In
Section 7, we will discuss other link quality metrics that we
have not included in this study. The process of link discov-
ery (i.e. neighbor discovery) is a separate issue, which we
will discuss in in Section 3.
2.1 Hop Count (HOP)
This metric provides minimum hop-count routing. Link
quality for this metric is a binary concept; either the link
exists or it doesn’t.
The primary advantage of this metric is its simplicity.
Once the topology is known, it is easy to compute and min-
imize the hop count between a source and a destination.
Moreover, computing the hop count requires no additional
measurements, unlike the other metrics we will describe in
this section.
The primary disadvantage of this metric is that it does
not take packet loss or bandwidth into account. It has been
shown [9] that a route that minimizes the hop count does not
necessarily maximize the throughput of a ﬂow. For example,
a two-hop path over reliable or fast links can exhibit better
performance than a one-hop path over a lossy or slow link.
The HOP metric, however, will prefer the one-hop path.
2.2 Per-hop Round Trip Time (RTT)
This metric is based on measuring the round trip delay
seen by unicast probes between neighboring nodes. Adya
et al. [1] proposed this metric. To calculate RTT, a node
sends a probe packet carrying a timestamp to each of its
neighbors every 500 milliseconds. Each neighbor immedi-
ately responds to the probe with a probe acknowledgment,
echoing the timestamp. This enables the sending node to
measure round trip time to each of its neighbors. The node
keeps an exponentially weighted moving average of the RTT
samples to each of its neighbors. Our implementation gives
10% weight to the current sample while calculating the aver-
age. If a probe or a probe response packet is lost, the average
is increased by 20% to reﬂect this loss. Similar penalty is
taken if loss of a data packet is detected on the link. We
also increase the average if we detect a loss of data packet.
The routing algorithm selects the path with the least total
sum of RTTs.
The RTT metric measures several facets of link quality.
First, if either the node or the neighbor is busy, the probe or
the probe-ack packet will experience queuing delay, result-
ing in high RTT. Second, as shown in [1], if other nodes in
the vicinity are busy, the probe or the probe-ack packet will
experience delays due to channel contention, again resulting
in high RTT. Third, if link between the nodes is lossy, the
802.11 ARQ mechanism may have to retransmit the probe
or the probe-ack packet several times to get it delivered cor-
rectly. This increases the RTT along that hop. Finally, if
despite the ARQ mechanism, a probe or a probe-ack packet
is lost, the sender node detect the loss, and increases the
moving average as described earlier. In short, the RTT met-
ric is designed to avoid highly loaded or lossy links.
Since RTT is a load-dependent metric, it can lead to route
instability. This is a well-known problem in wired net-
works
[18, 2]. We call this phenomenon self-interference.
The route instability is made worse by the fact that due
to limitations of our implementation, we are unable to in-
sert the probe packets at the head of the queue maintained
by the driver. This queuing delay signiﬁcantly distorts the
RTT value on that hop. The authors of [1] have also re-
ported this problem. This metric has other disadvantages as
well. First, there is the overhead of measuring the round trip
time. We reduce this overhead by using small probe packets
(137 bytes). Second, the metric doesn’t explicitly take link
data rate into account. We may be able to take impact of
link data rate into account by using larger probe packets.
However, larger probes would impose an even greater mea-
surement overhead. Finally, this measurement technique re-
quires that every pair of neighboring nodes probe each other.
Thus, the technique might not scale to dense networks.
2.3 Per-hop Packet Pair Delay (PktPair)
This metric is based on measuring the delay between a
pair of back-to-back probes to a neighboring node.
It is
designed to correct the problem of distortion of RTT mea-
surement due to queuing delays. The packet-pair technique
is well-known in the world of wired networks [17].
To calculate this metric, a node sends two probe pack-
ets back-to-back to each neighbor every 2 seconds. The
ﬁrst probe packet is small, and the next one is large. The
neighbor calculates the delay between the receipt of the ﬁrst
and the second packets. It then reports this delay back to
the sending node. The sender maintains a exponentially
weighted moving average of these delays for each of its neigh-
bors. The objective of the routing algorithm is to minimize
the sum of these delays.
Like the RTT metric, this metric also measures several
facets of link quality. If, due to high loss rate, the second
probe packet requires retransmissions by 802.11 ARQ, the
delay measured by the neighbor will increase.
If the link
from the node to its neighbor has low bandwidth, the second
packet will take more time to traverse the link, which will
result in increased delay.
If there is traﬃc in the vicinity
of this hop, it will also result in increased delay, since the
probe packets have to contend for the channel.
The primary advantage of this metric over RTT is that it
isn’t aﬀected by queueing delays at the sending node, since
both packets in a pair will be delayed equally. In addition,
using a larger packet for the second probe makes the metric
more sensitive to the link bandwidth than the RTT metric.
This metric has several disadvantages. First, it is subject
to overheads even greater than those of the RTT metric,
since two packets are sent to each neighbor, and the sec-
ond packet is larger. Second, we discovered that the met-
ric is not completely immune to the phenomenon of self-
interference. To understand self-interference for packet-pair
measurements, consider three wireless nodes A, B, and C
forming a two-hop chain topology. Assume that A is send-
ing data to C via B. If a queue builds up on the link from
A to B, the PktPair measurements on that link won’t be
aﬀected because both the probe packets would be delayed
equally. Now consider the link from B to C. Node B can not
simultaneously receive a packet from A and send a probe to
C. This means that the probe packet is contending with the
data packet for the wireless channel. This increases the met-
ric from B to C, increasing the total metric along the path
from A to C. However, this self-interference is less severe
than that experienced by RTT.
IPv4
IPv6
IPX, etc.
Mesh Connectivity Layer (with LQSR)
Ethernet
802.11
802.16, etc.
Figure 1: Our architecture multiplexes multiple
physical links into a single virtual link.
2.4 Expected Transmission Count (ETX)
This metric estimates the number of retransmissions needed
to send unicast packets by measuring the loss rate of broad-
cast packets between pairs of neighboring nodes. De Couto
et al. [9] proposed ETX. To compute ETX, each node broad-
casts a probe packet every second. The probe contains the
count of probes received from each neighboring node in the
previous 10 seconds. Based on these probes, a node can
calculate the loss rate of probes on the links to and from
its neighbors. Since the 802.11 MAC does not retransmit
broadcast packets, these counts allow the sender to esti-
mate the number of times the 802.11 ARQ mechanism will
retransmit a unicast packet.
To illustrate this, consider two nodes A and B. Assume
that node A has received 8 probe packets from B in the pre-
vious 10 seconds, and in the last probe packet, B reported
that it had received 9 probe packets from A in the previous
10 seconds. Thus, the loss rate of packets from A to B is
0.1, while the loss rate of packets from B to A is 0.2. A
successful unicast data transfer in 802.11 involves sending
the data packet and receiving a link-layer acknowledgment
from the receiver. Thus, the probability that the data packet
will be successfully transmitted from A to B in a single at-
tempt is (1 − 0.1) × (1 − 0.2) = 0.72. If either the data or
the ack is lost, the 802.11 ARQ mechanism will retransmit
the packet. If we assume that losses are independent, the
expected number of retransmissions before the packet is suc-
cessfully delivered is 1/0.72 = 1.39. This is the value of the
ETX metric for the link from A to B. The routing protocol
ﬁnds a path that minimizes the sum of the expected number
of retransmissions.
Node A calculates a new ETX value for the link from A to
B every time it receives a probe from B. In our implementa-
tion of the ETX metric, the node maintains an exponentially
weighted moving average of ETX samples. There is no ques-
tion of taking 20% penalty for lost probe packets. Penalty
is taken only upon loss of a data packet.
ETX has several advantages. Since each node broadcasts
the probe packets instead of unicasting them, the probing
overhead is substantially reduced. The metric suﬀers little
from self-interference since we are not measuring delays.
The main disadvantage of this metric is that since broad-
cast probe packets are small, and are sent at the lowest
possible data rate (6Mbps in case of 802.11a), they may not
experience the same loss rate as data packets sent at higher
rates. Moreover, the metric does not directly account for
link load or data rate. A heavily loaded link may have very
low loss rate, and two links with diﬀerent data rates may
have the same loss rate.
3. AD HOC ROUTING ARCHITECTURE
We implement ad hoc routing and link-quality measure-
ment in a module that we call the Mesh Connectivity Layer
(MCL). Architecturally, MCL is a loadable Windows driver.
It implements a virtual network adapter, so that to the rest
of the system the ad hoc network appears as an additional
(virtual) network link. MCL routes using a modiﬁed ver-
sion of DSR [15] that we call Link-Quality Source Routing
(LQSR). We have modiﬁed DSR extensively to improve its
behavior, most signiﬁcantly to support link-quality metrics.
In this section, we brieﬂy review our architecture and im-
plementation to provide background for understanding the
performance results. More architectural and implementa-
tion details are available in [10].
The MCL driver implements an interposition layer be-
tween layer 2 (the link layer) and layer 3 (the network layer).
To higher-layer software, MCL appears to be just another
ethernet link, albeit a virtual link. To lower-layer software,
MCL appears to be just another protocol running over the
physical link. See Figure 1 for a diagram.
This design has two signiﬁcant advantages. First, higher-
layer software runs unmodiﬁed over the ad hoc network. In
our testbed, we run both IPv4 and IPv6 over the ad hoc
network. No modiﬁcations to either network stack were re-
quired. Second, the ad hoc routing runs over heterogeneous
link layers. Our current implementation supports ethernet-
like physical link layers (eg 802.11 and 802.3). The virtual
MCL network adapter can multiplex several physical net-
work adapters, so the ad hoc network can extend across
heterogeneous physical links.
In the simple conﬁguration shown in Figure 1, the MCL
driver binds to all the physical adapters and IP binds only
to the MCL virtual adapter. This avoids multi-homing at
the IP layer. However other conﬁgurations are also possible.
In our testbed deployment, the nodes have both an 802.11
adapter for the ad hoc network and an ethernet adapter
for management and diagnosis. We conﬁgure MCL to bind
only to the 802.11 adapter. The IP stack binds to both
MCL and the ethernet adapter. Hence the mesh nodes are
multi-homed at the IP layer, so they have both a mesh IP
address and a management IP address. We prevent MCL
from binding to the management ethernet adapter, so the ad
hoc routing does not discover the ethernet as a high-quality
single-hop link between all mesh nodes.
The MCL adapter has its own 48-bit virtual ethernet ad-
dress, distinct from the layer-2 addresses of the underlying
physical adapters. The mesh network functions just like an
ethernet, except that it has a smaller MTU. To allow room
for the LQSR headers, it exposes a 1280-byte MTU instead
of the normal 1500-byte ethernet MTU. Our 802.11 drivers
do not support the maximum 2346-byte 802.11 frame size.
The MCL driver implements a version of DSR that we call
Link-Quality Source Routing (LQSR). LQSR implements
all the basic DSR functionality,
including Route Discov-
ery (Route Request and Route Reply messages) and Route
Maintenance (Route Error messages). LQSR uses a link
cache instead of a route cache, so fundamentally it is a link-
state routing protocol like OSPF [20]. The primary changes
in LQSR versus DSR relate to its implementation at layer
2.5 instead of layer 3 and its support for link-quality metrics.
Due to the layer 2.5 architecture, LQSR uses 48-bit vir-
tual ethernet addresses. All LQSR headers, including Source
Route, Route Request, Route Reply, and Route Error, use
48-bit virtual addresses instead of 32-bit IP addresses.
We have modiﬁed DSR in several ways to support routing
according to link-quality metrics. These include modiﬁca-
tions to Route Discovery and Route Maintenance plus new
mechanisms for Metric Maintenance. Our design does not
assume that the link-quality metric is symmetric.
First, LQSR Route Discovery supports link metrics. When
a node receives a Route Request and appends its own ad-
dress to the route in the Route Request, it also appends the
metric for the link over which the packet arrived. When a
node sends a Route Reply, the reply carries back the com-
plete list of link metrics for the route.
Once Route Discovery populates a node’s link cache, the
cached link metrics must be kept reasonably up-to-date for
the node’s routing to remain accurate.
In Section 5.2 we
show that link metrics do vary considerably, even when
nodes are not mobile. LQSR tackles this with two separate
Metric Maintenance mechanisms.
LQSR uses a reactive mechanism to maintain the metrics
for the links which it is actively using. When a node sends
a source-routed packet, each intermediate node updates the
source route with the current metric for the next (outgoing)
link. This carries up-to-date link metrics forward with the
data. To get the link metrics back to the source of the packet
ﬂow (where they are needed for the routing computation),
we have the recipient of a source-routed data packet send
a gratuitous Route Reply back to the source, conveying the
up-to-date link metrics from the arriving Source Route. This
gratuitous Route Reply is delayed up to one second waiting
for a piggy-backing opportunity.
LQSR uses a proactive background mechanism to main-
tain the metrics for all links. Occasionally each LQSR node
send a Link Info message. The Link Info carries current met-
rics for each link from the originating node. The Link Info
is piggy-backed on a Route Request, so it ﬂoods throughout