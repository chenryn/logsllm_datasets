title:KASR: A Reliable and Practical Approach to Attack Surface Reduction
of Commodity OS Kernels
author:Zhi Zhang and
Yueqiang Cheng and
Surya Nepal and
Dongxi Liu and
Qingni Shen and
Fethi A. Rabhi
KASR: A Reliable and Practical
Approach to Attack Surface Reduction
of Commodity OS Kernels
Zhi Zhang1,2(B), Yueqiang Cheng3, Surya Nepal1, Dongxi Liu1, Qingni Shen4,
and Fethi Rabhi2
1 Data61, CSIRO, Sydney, Australia
{zhi.zhang,surya.nepal,dongxi.liu}@data61.csiro.au
2 University of New South Wales, Sydney, Australia
PI:EMAIL, PI:EMAIL
3 Baidu XLab, Sunnyvale, CA, USA
PI:EMAIL
4 Peking University, Beijing, China
PI:EMAIL
Abstract. Commodity OS kernels have broad attack surfaces due to
the large code base and the numerous features such as device drivers.
For a real-world use case (e.g., an Apache Server), many kernel ser-
vices are unused and only a small amount of kernel code is used. Within
the used code, a certain part is invoked only at runtime while the rest
are executed at startup and/or shutdown phases in the kernel’s lifetime
run. In this paper, we propose a reliable and practical system, named
KASR, which transparently reduces attack surfaces of commodity OS
kernels at runtime without requiring their source code. The KASR sys-
tem, residing in a trusted hypervisor, achieves the attack surface reduc-
tion through a two-step approach: (1) reliably depriving unused code
of executable permissions, and (2) transparently segmenting used code
and selectively activating them. We implement a prototype of KASR
on Xen-4.8.2 hypervisor and evaluate its security eﬀectiveness on Linux
kernel-4.4.0-87-generic. Our evaluation shows that KASR reduces the
kernel attack surface by 64% and trims oﬀ 40% of CVE vulnerabilities.
Besides, KASR successfully detects and blocks all 6 real-world kernel
rootkits. We measure its performance overhead with three benchmark
tools (i.e., SPECINT, httperf and bonnie++). The experimental results
indicate that KASR imposes less than 1% performance overhead (com-
pared to an unmodiﬁed Xen hypervisor) on all the benchmarks.
Keywords: Kernel attack surface reduction
Reliable and practical systems · Hardware-assisted virtualization
1 Introduction
In order to satisfy various requirements from individuals to industries, commod-
ity OS kernels have to support numerous features, including various ﬁle systems
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 691–710, 2018.
https://doi.org/10.1007/978-3-030-00470-5_32
692
Z. Zhang et al.
and numerous peripheral device drivers. These features inevitably result in a
broad attack surface, and this attack surface becomes broader and broader with
more services consolidated into the kernel every year. As a consequence, the cur-
rent kernel attack surface gives an adversary numerous chances to compromise
the OS kernel and exploit the whole system. Although we have moved into the
virtualization and cloud era, the security threats are not being addressed. Instead
it becomes even worse with the introduction of additional software stacks, e.g., a
hypervisor layer. Recent years have witnessed many proposed approaches which
realized the severity of this issue and made an eﬀort to reduce the attack sur-
face of the virtualized system. Speciﬁcally, schemes like NoHype [32], XOAR [7]
HyperLock [35] and Min-V [24] are able to signiﬁcantly reduce the attack sur-
face of the hypervisor. In addition, several other schemes have been proposed to
reduce the huge kernel attack surface, which are summarized into the following
three categories.
Build from Scratch. The ﬁrst category attempts to build a micro-kernel with
a minimal attack surface [1,11,12,14], among which Sel4 [14] is the ﬁrst OS
that achieves a high degree of assurance through formal veriﬁcation. Although
such micro-kernel schemes retroﬁt security, they are incompatible with legacy
applications.
Re-construction. The second category makes changes to current monolithic
kernel. Nooks [31], and LXFI [21] isolate buggy device drivers to reduce the
attack surface of the kernel. Considering that the reduced kernel is still large,
Nested Kernel [9] places a small isolated kernel inside the monolithic kernel,
further reducing the attack surface. Besides, strict access-control policies [8,28]
and system call restrictions [26] also contribute a lot. A common limitation of
these approaches is that they all require modiﬁcations of the kernel source code,
which is usually not applicable.
Customization. The last category manages to tailor existing kernels without
modiﬁcations. Tartler [33], Kernel Tailoring [18] and Lock-in-Pop [19] require
the Linux source code of either the kernel or core libraries (i.e., glibc) to restrict
user’s access to the kernel. They lack the OS distribution support due to the
requirement of source code re-compiling. Ktrim [17] and KRAZOR [16] rely
on speciﬁc kernel features (i.e., kprobes) to binary-instrument kernel functions
and remove unused ones. Face-Change [10] is a hypervisor-based technique to
tailor the kernel code. It supports neither the Kernel Address Space Layout
Randomization (KASLR) [8] nor multiple-vCPU for the target kernel. Besides,
it induces a worst-case overhead of 40%, impeding its deployment in practice.
Overview. In this paper, we propose a reliable and practical virtualized system,
named KASR, which is able to transparently reduce the attack surface of a
commodity OS kernel at runtime.
Consider a speciﬁed application workload (e.g., an Apache server), whose
operations do not necessarily need all kernel services. Instead, only a subset
of the services are invoked to support both the target Apache process and the
A Reliable and Practical Approach to Kernel Attack Surface Reduction
693
kernel. For example, both of them always require code blocks related to mem-
ory management (e.g., kmalloc, kfree, get page) and synchronization mechanisms
(e.g., spin lock). Apart from that, certain used kernel functions are only used
during a speciﬁc period of kernel’s lifetime and remain unused for the rest of
the time. For instance, the initialization (e.g., kernel init) and power-oﬀ actions
(e.g., kernel power oﬀ ) will only be taken when the kernel starts up and shuts
down, respectively. In contrast to these used kernel code, many other kernel ser-
vices are never executed. We call them unused kernel code in this paper. The
unused kernel code resides in the main memory, contributing to a large portion
of the kernel attack surface. For example, a typical kernel vulnerability, e.g.,
CVE-2013-2094, is exploited via a crafted system call perf event open that is
unused or never invoked in the Apache workload.
Motivated by the above observation, KASR achieves the kernel attack surface
reduction in two steps. The ﬁrst step is to reliably deprive unused code of exe-
cutable permissions. Commodity OS kernels are designed and implemented to
support all kinds of use cases (e.g., the Apache server and Network File System
service), and therefore there will be a large portion of kernel code (e.g., system
call handlers) unused for a given use case. By doing so, this step could eﬀectively
reduce a large portion of the attack surface. The second step transparently seg-
ments used code and selectively activates it according to the speciﬁc execution
demands of the given use case. This segmentation is inspired by the observation
that certain kernel code blocks (e.g., kernel init) only execute in a particular
period, and never execute beyond that period. As a result, KASR dramatically
reduces the attack surface of a running OS kernel.
We implement a KASR prototype on a private cloud platform, with Xen 4.8.2
as the hypervisor and Ubuntu Server 16.04.3 LTS as the commodity OS. The
OS kernel is unmodiﬁed Linux version 4.4.0-87-generic with KASLR [8] enabled.
KASR only adds about 1.2K SLoC to the hypervisor code base. We evaluate
its security eﬀectiveness under the given use cases (e.g., Linux, Apache, MySQL
and PHP (LAMP)-based server). The experimental results indicate that KASR
reduces more than 64% kernel attack surface at the granularity of code pages.
Also, we trims oﬀ 40% of Common Vulnerabilities and Exposures (CVEs), since
the CVE reduction indicates the number of CVEs that KASR could avoid. In
addition, KASR successfully detects and blocks all 6 real-world kernel rootkits.
We also measure the performance overhead using several popular benchmark
tools as given use cases, i.e., SPECint, httperf and bonnie++. The overall per-
formance overheads are 0.23%, 0.90% and 0.49% on average, respectively.
Contributions. In summary, we make the following key contributions:
– Propose a novel two-step approach to reliably and practically reduce the
kernel attack surface with being agnostic to the particular OS.
– Design and implement a practical KASR system on a recent private cloud
platform. KASR transparently “ﬁngerprints” used kernel code and enables
them to execute according to their execution phases.
– Evaluate the security eﬀectiveness of the KASR system by the reductions of
kernel attack surface, CVE and the mitigation of real-world rootkits.
694
Z. Zhang et al.
– Measure the performance overhead of the KASR system using several popular
benchmark tools. The low overhead makes KASR reasonable for real-world
deployment.
Organization. The rest of the paper is structured as follows. In Sect. 2, we
brieﬂy describe our system goals and a threat model. In Sect. 3, we present the
kernel attack surface, its measurement and the rationale of its reduction. We
introduce in detail the system architecture of KASR in Sect. 4. Sections 5 and 6
present the primary implementation of KASR and its performance evaluation,
respectively. In Sects. 7 and 8, we discuss limitations of KASR, and compare it
with existing works, respectively. At last, we conclude this paper in Sect. 9.
2 Threat Model and Design Goals
Before we describe our design, we specify the threat model and the design goals.
2.1 Threat Model
In this paper, we focus on reducing the attack surfaces of commodity OS kernels
in a virtualized environment. Currently, most personal computers, mobile phones
and even embedded devices are armed with the virtualization techniques, such
as Intel [13], AMD [2] and ARM virtualization support [3]. Thus, our system
can work on such devices.
We assume a hypervisor or a Virtual Machine Monitor (VMM) working
beneath the OS kernel. The hypervisor is trusted and secure as the root of trust.
Although there are vulnerabilities for some existing hypervisors, we can leverage
additional security services to enhance their integrity [4,6,34] and reduce their
attack surfaces [7,32]. As our system relies on a training-based approach, we
also assume the system is clean and trusted in the training stage, but it could
be compromised at any time after that.
We consider threats coming from both remote adversaries and local adver-
saries. A local adversary resides in user applications, such as browsers and email
clients. The kernel attack surface exposed to the local adversary includes system
calls, exported virtual ﬁle system (e.g., Linux proc ﬁle system) for user applica-
tions. A remote adversary stays outside and communicates with the OS kernel
via hardware interfaces, such as a NIC. The kernel attack surface for the remote
adversary usually refers to device drivers.
2.2 Design Goals
Our goal is to design a reliable, transparent and eﬃcient system to reduce the
attack surfaces of commodity OS kernels.
G1: Reliable. The attack surface should be reliably and persistently reduced.
Even if kernel rootkits can compromise the OS kernel, they cannot enlarge the
reduced attack surface to facilitate subsequent attacks.
A Reliable and Practical Approach to Kernel Attack Surface Reduction
695
G2: Transparent. The system should transparently work for the commodity
OS kernels. Particularly, it neither relies on the source code nor breaks the kernel
code integrity through binary instrumentation. Source code requirement is diﬃ-
cult to be adopt in practice. And breaking the code integrity raises compatibility
issues against security mechanisms, such as Integrity Measurement Architecture.
G3: Eﬃcient. The system should minimize the performance overhead, e.g., the
overall performance overhead on average is less than 1%.
Among these goals, G1 is for security guarantee, while the other two goals
(G2 and G3) are for making the system practical. Every existing approach has
one or more weaknesses: they either are unreliable (e.g., Lock-in-Pop [19] as
per G1), or depend on the source code (e.g., SeL4 [14]), or break the kernel
code integrity (e.g., Ktrim [17]), or incur high performance overhead (e.g., Face-
Change [10]). Our KASR system is able to achieve all the above goals at the
same time.
3 Design Rationale
We ﬁrst present how to measure the attack surface of a commodity OS kernel,
and then illustrate how to reliably and practically reduce it.
3.1 Attack Surface Measurement
To measure the kernel attack surface, we need a security metric that reﬂects
the system security. Generally, the attack surface of a kernel is measured by
counting its source line of code (SLoC). This metric is simple and widely used.
However, this metric takes into account all the source code of a kernel, regardless
of whether it is eﬀectively compiled into the kernel binary. To provide a more
accurate security measurement, Kurmus et al. [18] propose a ﬁne-grained generic
metric, named GENSEC, which only counts eﬀective source code compiled into
the kernel. More precisely, in the GENSEC metric, the kernel attack surface is
composed of the entire running kernel, including all the Loadable Kernel Modules
(LKMs).
However, the GENSEC metric only works with the kernel source code, rather
than the kernel binary. Thus it is not suitable for a commodity OS with only
a kernel binary that is made of a kernel image and numerous module binaries.
To ﬁx this gap, we apply a new KASR security metric. Speciﬁcally, instead of
counting source lines of code, the KASR metric counts all executable instruc-
tions.