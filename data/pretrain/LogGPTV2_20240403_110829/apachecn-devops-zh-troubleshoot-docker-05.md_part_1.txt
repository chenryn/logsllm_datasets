# 五、围绕容器化应用移动
在最后一章中，我们在 Docker 容器的帮助下介绍了微服务应用架构部署。在本章中，我们将探讨 Docker 注册表以及如何在公共和私有模式下使用它。我们还将深入探讨使用公共和私有 Docker 注册表时的故障排除问题。
我们将研究以下主题:
*   通过 docker registry 重新分发
*   公共 Docker 登记处
*   私人 Docker 注册处
*   确保映像的完整性-签名映像
*   **DTR** 可信注册 Docker
*   通用控制平面
# 通过 Docker 登记处重新分配
Docker 注册表是允许用户存储和分发 Docker 映像的服务器端应用。默认情况下，公共 Docker 注册表(Docker Hub)可用于托管多个 Docker 映像，这些映像提供免费使用、零维护以及自动构建和组织帐户等附加功能。让我们详细看看公共和私有 Docker 注册中心。
## Docker 公共存储库(Docker 中心)
如前所述，Docker Hub 允许个人和组织与其内部团队和客户共享 Docker 映像，而无需维护基于云的公共存储库。它提供集中的资源映像发现和管理。它还为开发管道提供团队协作和工作流自动化。除了映像存储库管理之外，Docker Hub 的一些附加功能如下:
*   **自动化构建**:每当 GitHub 或 Bitbucket 存储库中的代码发生变化时，它都有助于创建新的映像
*   **WebHooks** :这是一个新特性，允许在映像成功推送至存储库后触发一个动作
*   **用户管理**:它允许创建工作组来管理组织的用户对映像存储库的访问
可以使用 Docker Hub 登录页面创建帐户，以便托管 Docker 映像；每个帐户都将链接到一个基于用户的唯一标识 Docker ID。基本功能，例如 Docker 映像搜索和从 Docker Hub 中拉出*，可以在不创建 Docker Hub 帐户的情况下执行。可以使用以下命令浏览 Docker Hub 中存在的映像:*
```
$ docker search centos
```
它将根据匹配的关键字在 Docker Hub 中显示现有映像。
也可以使用`docker login`命令创建 Docker 标识。以下命令将提示创建一个 Docker ID，该 ID 将是用户公共存储库的公共命名空间。系统会提示输入一个`Username`，还会提示输入`Password`和`Email`以完成注册流程:
```
$ sudo docker login 
Username: username 
Password: 
Email: PI:EMAIL 
WARNING:login credentials saved in /home/username/.dockercfg. 
Account created. Please use the confirmation link we sent to your e-mail to activate it.
```
为了注销，可以使用以下命令:
```
$ docker logout
```
## 私人 Docker 登记处
私有 Docker 注册表可以部署在本地组织内部；它在 Apache 许可下是开源的，易于部署。
使用私有 Docker 注册表，您有以下优势:
*   该组织可以控制和监视 Docker 映像的存储位置
*   完整的映像分发管道将归该组织所有
*   映像存储和分发对于内部开发工作流以及与其他 DevOps 组件(如 Jenkins)的集成非常有用
# 将映像推送到 Docker 中心
我们可以创建一个定制的映像，然后可以使用标签在 Docker Hub 上推送。让我们用一个基于终端的小应用创建一个简单的映像。创建包含以下内容的 Dockerfile:
```
FROM debian:wheezy 
RUN apt-get update && apt-get install -y cowsay fortune 
```
转到包含 Dockerfile 的目录，并执行以下命令来构建映像:
```
$ docker build -t test/cowsay-dockerfile . 
Sending build context to Docker daemon 2.048 kB 
Sending build context to Docker daemon 
Step 0 : FROM debian:wheezy 
wheezy: Pulling from debian 
048f0abd8cfb: Pull complete 
fbe34672ed6a: Pull complete 
Digest: sha256:50d16f4e4ca7ed24aca211446a2ed1b788ab5e3e3302e7fcc11590039c3ab445 
Status: Downloaded newer image for debian:wheezy 
 ---> fbe34672ed6a 
Step 1 : RUN apt-get update && apt-get install -y cowsay fortune 
 ---> Running in ece42dc9cffe
```
或者，如下图所示，我们可以首先创建一个容器并对其进行测试，然后创建一个标记的**Docker 映像**，该映像可以轻松地推送到**Docker 中心**:
![Pushing images to Docker Hub](img/image_05_002.jpg)
从 Docker 容器创建 Docker 映像并将其推送到公共 Docker 中心的步骤
我们可以使用以下命令检查映像是否已创建。如您所见，`test/cowsay-dockerfile`映像被创建:
```
$ docker images
REPOSITORY                  TAG                 IMAGE ID
CREATED             VIRTUAL SIZE
test/cowsay-dockerfile      latest              c1014a025b02        33
seconds ago      126.9 MB
debian                      wheezy              fbe34672ed6a        2
weeks ago         84.92 MB
vkohli/vca-iot-deployment   latest              35c98aa8a51f        8
months ago        501.3 MB
vkohli/vca-cli              latest              d718bbdc304b        9
months ago        536.6 MB
```
为了将映像推送到 Docker Hub 帐户，我们必须使用映像 ID 以下列方式用 Docker 标签/Docker ID 对其进行标记:
```
$ docker tag c1014a025b02 username/cowsay-dockerfile
```
由于标记的用户名将与 Docker Hub ID 帐户相匹配，我们可以轻松地推送映像:
```
$ sudo docker push username/cowsay-dockerfile 
The push refers to a repository [username/cowsay-dockerfile] (len: 1) 
d94fdd926b02: Image already exists 
accbaf2f09a4: Image successfully pushed 
aa354fc0b2b2: Image successfully pushed 
3a94f42115fb: Image successfully pushed 
7771ee293830: Image successfully pushed 
fa81ed084842: Image successfully pushed 
e04c66a223c4: Image successfully pushed 
7e2c5c55ef2c: Image successfully pushed
```
![Pushing images to Docker Hub](img/image_05_003.jpg)
Docker 集线器屏幕截图
### 类型
可以预先检查的一个故障排除问题是，自定义 Docker 映像上标记的用户名应该符合 Docker Hub 帐户的用户名，以便成功推送映像。推送至 Docker Hub 的自定义映像将公开提供。Docker 免费提供了一个私有存储库，应该用来推送私有映像。Docker 客户端版本 1.5 和更低版本将无法将映像推送到 Docker Hub 帐户，但仍能拉取映像。仅支持版本 1.6 或更高版本。因此，总是建议保持 Docker 版本最新。
如果向 Docker Hub 的推送因 **500 内部服务器错误**而失败，问题与 Docker Hub 基础架构有关，重新推送可能会有所帮助。如果在推送 Docker 映像时问题仍然存在，应在`/var/log/docker.log in`参考 Docker 日志，以便详细调试。
## 安装私有本地 Docker 注册表
可以使用存在于 Docker 集线器上的映像来部署私有 Docker 注册表。映射到访问私有 Docker 注册表的端口将是`5000`:
```
$ docker run -p 5000:5000 registry
```
现在，我们将前面教程中创建的相同映像标记到`localhost:5000/cowsay-dockerfile`中，以便匹配的存储库名称和映像名称可以很容易地推送到私有 Docker 注册表中:
```
$ docker tag username/cowsay-dockerfile localhost:5000/cowsay-dockerfile
```
将映像推送到私有 Docker 注册表:
```
$ docker push localhost:5000/cowsay-dockerfile
```
推送指的是一个存储库(`localhost:5000/cowsay-dockerfile` ) (len: 1):
```
Sending image list 
Pushing repository localhost:5000/cowsay-dockerfile (1 tags) 
e118faab2e16: Image successfully pushed 
7e2c5c55ef2c: Image successfully pushed 
e04c66a223c4: Image successfully pushed 
fa81ed084842: Image successfully pushed 
7771ee293830: Image successfully pushed 
3a94f42115fb: Image successfully pushed 
aa354fc0b2b2: Image successfully pushed 
accbaf2f09a4: Image successfully pushed 
d94fdd926b02: Image successfully pushed 
Pushing tag for rev [d94fdd926b02] on {http://localhost:5000/v1/repositories/ cowsay-dockerfile/tags/latest}
```
图片 ID 可以通过浏览浏览器中的链接或者使用推送图片后出现的`curl`命令查看。
## 在主机之间移动映像
将映像从一个注册表移动到另一个注册表需要从互联网推送和拉出映像。如果需要将映像从一台主机移动到另一台主机，那么只需借助`docker save`命令即可实现，无需上传和下载映像的开销。Docker 提供了两种不同类型的方法来将容器映像保存到 tar ball 中:
*   `docker export`:这将容器的运行或暂停状态保存到 tar 文件中
*   `docker save`:这将非运行的容器映像保存到一个文件中
让我们借助以下教程来比较一下`docker export`和`docker save`命令:
使用导出，从 Docker Hub 中提取基本映像:
```
$ docker pull Ubuntu 
latest: Pulling from ubuntu 
dd25ab30afb3: Pull complete 
a83540abf000: Pull complete 
630aff59a5d5: Pull complete 
cdc870605343: Pull complete
```
让我们从前面的映像运行 Docker 容器后创建一个示例文件:
```
$ docker run -t -i ubuntu /bin/bash 
root@3fa633c2e9e6:/# ls 
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root 
run  sbin  srv  sys  tmp  usr  var 
root@3fa633c2e9e6:/# touch sample 
root@3fa633c2e9e6:/# ls 
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root 
run  sample  sbin  srv  sys  tmp  usr  var
```
在另一个 shell 中，我们可以看到正在运行的 Docker 容器，然后可以使用以下命令将其导出到 tar 文件中:
```
$  docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED
         STATUS              PORTS               NAMES
3fa633c2e9e6        ubuntu              "/bin/bash"         45 seconds
ago      Up 44 seconds                           prickly_sammet
$ docker export prickly_sammet | gzip > ubuntu.tar.gz
```