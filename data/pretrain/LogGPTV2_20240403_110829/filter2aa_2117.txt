# Return to Sender: Detecting Kernel Exploits with eBPF
**Guillaume Fournier**  
**August 2022**

## About Me
- **Cloud Workload Security (CWS)**
- **Leverage eBPF to detect threats**
- **Embedded in the Datadog Agent**

**Blackhat 2022**  
Guillaume Fournier, Senior Security Engineer @Datadog

---

### Agenda
1. Context and Threat Model
2. Why eBPF?
3. KRIe
   - SMEP & SMAP on a Budget
   - Kernel Security Configuration
   - Kernel Runtime Alterations
   - Control Flow Integrity
   - Enforcement
4. Performance

---

## Context and Threat Model
- **Critical CVEs** are regularly discovered in the Linux Kernel.
- **Security Administrators** worry about:
  - Keeping up with security updates
  - Deploying security patches
  - Monitoring and protecting vulnerable hosts

- **Hundreds of ways** to exploit the Linux kernel.
- This talk targets **three types of vulnerabilities**:
  - Execution flow redirection
  - Logic bugs
  - Post-compromise kernel runtime alterations

**Goal**: Detect (and potentially prevent) these attacks using eBPF.

---

## What is eBPF?
- **Run sandboxed programs** in the Linux kernel.

## Why eBPF?
- **Wide kernel support** (4.1+), depending on eBPF features.
- **System safety and stability** assurances.
- **Rich feature set** with easy-to-use introspection capabilities.
- **Some write access and enforcement** capabilities.

### Challenges
- **Post-compromise detection** is often a lost battle.
- **Dozens of ways** to disable an eBPF program.
- **Performance impact** in the kernel can be significant.

### Benefits
- **Script kiddies and OOTB rootkits**.
- **Increase difficulty** in exploiting flaws.
- **Pre-compromise detection and blocking** is sometimes possible.

---

## Kernel Runtime Integrity with eBPF (KRIe)
- **Open source project**
- **Compile Once, Run Everywhere**
- **Compatible with kernels 4.15+**
- **First version released today!**

**GitHub Repository**: [https://github.com/Gui774ume/krie](https://github.com/Gui774ume/krie)

### KRIe: SMEP & SMAP on a Budget
- **Scenario 1**: The attacker controls the address of the next instruction executed by the kernel.
- **Textbook use case for ROP attacks**.
- **Supervisor Mode Access Prevention (SMAP)** and **Supervisor Memory Execute Protection (SMEP)**.

#### Example
- **Kernel Executable Code** and **User Space Memory**.
- **Attacker jumps to** user space memory, which is not possible with SMAP.
- **ROP Chain** eventually calls `commit_creds(prepare_kernel_cred(0))`.

**Mitigation**: Place a kprobe on `prepare_kernel_cred` and check if the Stack pointer, Frame pointer, or Instruction pointer registers point to user space memory.

### KRIe: Kernel Security Configuration
- **Global switch** that disarms all kprobes on a machine.
- **ROP chain** can be updated to call `write_enabled_file_bool(NULL, “0”, 1, NULL)`.

**Mitigation**: 
- **Kprobe** on `write_enabled_file_bool`.
- **Booby trap** the function at random offsets.
- **Periodically check** sensitive kernel parameters using BPF_PROG_TYPE_PERF_EVENT.
- **Monitor sysctl commands** using BPF_PROG_TYPE_CGROUP_SYSCTL (kernels 5.2+).

### KRIe: Kernel Runtime Alterations
- **Insert a rogue kernel module**.
- **Hook syscalls** to hide tracks.
- **BPF filters** to capture network traffic.
- **eBPF programs** for implementing rootkits.

**Mitigation**:
- **Monitor bpf() operations** and insertion of BPF filters.
- **Monitor kernel module load/deletion events**.
- **Monitor k(ret)probe registration/deletion/enable/disable/disarm events**.
- **Monitor ptrace events and sysctl commands**.
- **Periodically check syscall tables** using BPF_PROG_TYPE_PERF_EVENT.

### KRIe: Control Flow Integrity (CFI)
- **Lock down execution flows** in the kernel by controlling call sites at runtime.
- **Usually added at compile time or implemented in hardware**.
- **Great way to prevent ROP attacks**.

**Mitigation**:
- **Lock down jumps between control points**.
- **Check both hook points and parameters**.

### KRIe: Enforcement
- **Enable blocking features** when available:
  - `bpf_override_return` helper (4.16+)
  - `BPF_PROG_TYPE_CGROUP_SYSCTL` programs (5.2+)
  - `bpf_send_signal` helper (5.3+)
  - `LSM` programs (5.7+)

- **Configurable detections**:
  - Log
  - Block
  - Kill
  - Paranoid

### Performance
- **Benchmark** run on a 5.15.0 kernel, 11th Gen Intel(R) Core(TM) i9-11950H @ 2.60GHz, 32GB of RAM, average on 10 iterations.

| Metric | Without KRIe | With KRIe (all features) | With KRIe (syscall hook check disabled) |
|--------|--------------|-------------------------|----------------------------------------|
| User space CPU time | 4,320s (88%) | 4,517s (68%) | 4,380s (88%) |
| Kernel space CPU time | 568s (12%) | 2,097s (32%) | 585s (12%) |
| Total elapsed time | 5:53.14 | 8:15.76 (+40%) | 5:58.36 (+1%) |

### Conclusion
- **Powerful defensive tools** can be implemented with eBPF.
- **eBPF is not ideal** for detecting kernel exploits.
- **KRIe is a last resort**, not a bulletproof strategy.

**GitHub Repository**: [https://github.com/Gui774ume/krie](https://github.com/Gui774ume/krie)

---

**Thank you!**