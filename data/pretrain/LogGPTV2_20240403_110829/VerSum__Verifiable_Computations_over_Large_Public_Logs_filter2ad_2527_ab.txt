because a SEQHASH is a functional data structure.
4. COMPUTATION HISTORIES
VERSUM’s computation histories help clients decide which server
performed a computation correctly. This section describes the struc-
ture of a computation history, how a computation history allows
clients to verify computations, and how parts of a computation
history can be reused among different computations.
4.1 Structure
VERSUM runs deterministic, side-effect-free functional programs.
A computation history is a log of the evaluation of such a program: a
computation history is a sequence of steps which are either function
calls or returns. Each function call is annotated with the function
name and arguments, and each function return contains the return
3
Figure 1: An overview of VERSUM. VERSUM computes over
an input known to both client and server, the log at the top of
the image. Three independent servers all compute F(). How-
ever, server 3 has been compromised, and instead computes
G(). Each server stores a computation history describing the
computation in a SEQHASH. The client, which knows both the
input and F(), detects that server 3 has a different outcome
than the other servers, and performs conflict resolution. After
finding the longest common prefix (using binary search), the
client discovers that server 3 made a mistake, and accepts the
output from servers 1 and 2.
history. In Figure 1, all servers perform a computation F over an
input log. Each server has a copy of the input, the computation,
and the computation history. All should be identical on all servers.
However, because server 3 has been compromised by an adversary,
its computation and computation history are different.
VERSUM uses computation histories as the state of a computation.
To advance this state, VERSUM uses a simple algorithm, called
DetermineNext, that computes the next record from an unfinished
computation history. DetermineNext reconstructs the evaluation
state at the end of the unfinished computation history, and from that
efficiently computes the next record. The algorithm is explained in
detail in §4.
Using DetermineNext, VERSUM’s conflict resolution protocol
is similar to Quin’s: when two servers disagree, a client performs a
binary search to find the longest (unfinished) computation history
that two servers agree on, and two computation histories one record
longer that the servers disagree on. Then, using DetermineNext,
the client can determine which server was honest. In Figure 1, VER-
SUM performs conflict resolution between servers 2 and 3, as their
computation histories abcde and abxyz are different. The client
finds the longest common prefix, ab, as well as two conflicting
DEF1...124A...Input:log in a linked listDEF1...124A...C92D...C92D...New entry:Log head:Server 1:Server 2:Server 3:F()F()G()Computation:Computation histories(in SeqHash):abcdeabcdeabxyzClientServer 1 and 2 agree; both disagree with server 3.Client performs conflict resolution:Binary search to findlongest common prefix:F()C92D...abxyzTry length 2:ababAgreed; try length 4:Disagreed; try length 3:abcdabxyabcdeabcabcabxababcabxResolve disagreement byverifying next step:ababcFound disagreementafter 2 steps:modified byadversary!DetermineNext(prefix):
index := length(prefix) - 1
expected := []
while prefix[index].type != call:
// store already-known answer to nested
// function call
ret := prefix[index]
call := prefix[index-ret.length+1]
expected = call .. ret .. expected
// move index to right before this
// function call
index -= ret.length
// it must be that prefix[index].type == call
innermost = prefix[index]
run innermost until expected is finished
return Concat(prefix, innermost’s next step)
Figure 3: The algorithm to extend a history prefix by one step.
value as well as the number of steps inside the function. VERSUM
runs functions with call-by-value evaluation. An example program
containing three functions F, G, and H, and a computation history for
F(5) can be found in Figure 2. The trace shows all calls, but does
not show computations performed inside the functions: while the
computation history shows that F called G and H, which returned 22
and 6 respectively, it does not show how F used those values.
This history has two important properties. First, a server can
efficiently prove that it extended an unfinished computation history
correctly, which is used by VERSUM’s conflict resolution protocol.
Second, (parts of) a computation history can be reused in a new
computation history, used by VERSUM’s computations over logs.
4.2 Extending computation histories
During conflict resolution VERSUM must extend computation
histories. When two servers have different computation histories,
a VERSUM client first finds the longest prefix common to the two
histories. Then, the client asks both servers to prove that their
version of the history correctly extended the prefix.
Such a proof can be constructed with the DetermineNext algo-
rithm, which takes in a computation history, determines the next
step, appends it to the history, and returns this new history. This
proof is an ADS proof (as described in §2), and works by letting a
client perform the computation locally. This proof should be small
to keep conflict resolution fast, and so DetermineNext must not
perform any unnecessary work.
The idea behind the algorithm is that the function that will per-
form the next step (the innermost incomplete, meaning not yet
returned, function call) can efficiently be run on the client up to
the point where it performs the next step, because any nested func-
tion calls made by the innermost incomplete function have their
results already available in the computation history. For example,
consider the prefix of the example history ending at step 4 in Fig-
ure 2. The innermost incomplete function call is G(5) at step 2.
DetermineNext can efficiently compute the result of G(5), as it
can use the result of H(10) at step 4 in the history.
Pseudocode for the DetermineNext algorithm can be found in
Figure 3. The DetermineNext algorithm determines the innermost
incomplete function call and the results of finished nested calls by
jumping from function return to call in the computation history using
the function lengths stored at each return step. DetermineNext
starts at the last step of the log. If this last step is a function call,
DetermineNext has found the innermost incomplete function call
and can continue to the next phase. Otherwise it has found the return
record of a completed nested call. It records the result of the nested
call and jumps to the location right before the corresponding call,
and repeats until it finds a call record.
In the example from Figure 2, DetermineNext starts by looking
at step 4, which is a return record. It stores the result of H(10)
= 11. Then, using the number of steps stored in the return record,
DetermineNext jumps to the record right before the start of H(10),
which is call G(5). This is the innermost incomplete function call
for this prefix.
Once DetermineNext has found the innermost incomplete call
and the results of already-completed nested calls, DetermineNext
can run the innermost incomplete function without recomputing the
already-known nested functions. Once the innermost incomplete
function executes past all of the already-known nested function
calls, it will either return or make a new call not yet in the history.
In both cases, DetermineNext obtains the next step of the inner-
most incomplete function without computing any other functions.
DetermineNext proofs remain short, even for highly recursive calls
over long linked lists.
4.3 Reusing computation histories
To support incremental updates, computation histories can be
reused. If a new computation calls a function with the same ar-
guments as in a previous computation, VERSUM can reuse that
invocation’s computation history from the previous computation.
For example, if a server had previously computed G(5) before
computing F(5), then it could copy the 4 steps describing G(5)
from the previous computation history, and concatenate it to F(5)’s
computation history, without performing the computation of G(5)
again.
For VERSUM, reusing computation histories is especially useful
when computing over growing logs. For example, consider a log
structured as a linked list. First, the server processes the entire log
with a recursive function. Then, the log gains a new entry, pointing
to the previous latest entry. Now the server can process this new
log efficiently by reusing the computation history for processing
the old log. To do so, the server starts by performing the new com-
putation as normal: it creates a new computation history, calls the
recursive processing function on the head of the new log, and adds
a corresponding call record to the computation history. Then, the
processing function recursively calls itself on the previous log head
to process the log up to the new entry. Now the server can reuse its
previous computation, as that computation already processed the
previous log; instead of performing the computation again, VER-
SUM can look up the cached result of the function. However, the
result by itself is not enough; the server must also construct a valid
computation history. To do so, it concatenates the entire cached
computation history of the previous invocation, including all inter-
nal call and return records. Afterwards, the processing function
can continue processing the new entry, and finish the computation.
In the end, the server has constructed a complete computation his-
tory for the entire new log, though it only had to actually perform
computation to process the new log entry.
Computation history reuse relies on VERSUM’s programming
model of side-effect-free functional programs: because a function
cannot access global state, its computation history for fixed argu-
ments must always be the same, and can safely be copied into a new
computation history.
4.4 Discussion
Not all function calls need to be part of the computation history,
and it is up to the developer to determine which calls to include in
the log. In practice, a short function like H should not be in the log,
as it will not significantly decrease DetermineNext proof sizes.
4
The size of a DetermineNext proof is determined by the number
of calls made by the innermost unfinished function: for each of
those, the proof must include the result of the function. It is up to
the developer to keep the number of calls made by each function
reasonably small. Note that if a function becomes too long, it can
always be split in two parts, with the first part passing local variables
to the second part as arguments.
VERSUM efficiently supports incremental updates to the input
data structure if it can reuse previous computation histories. Func-
tions processing unchanged data should not have their arguments
changed. That is, computations should be structured in a memoization-
friendly way. For example, to compute a sum over a list, the running
total should not be passed as an argument, but should instead be
kept and later added by the calling function.
5. SEQHASH
VERSUM stores computation histories in SEQHASH, a novel
hash-tree structure for storing sequences. SEQHASH supports fast
positional indexing, fast concatenation, and is efficiently comparable
thanks to its deterministic structure. This section describes and
motivates SEQHASH.
5.1 Goals
To hold computation histories for VERSUM, SEQHASH needs
several properties:
Efficient lookup and concatenation. To keep DetermineNext
proofs small, SEQHASH must support fast lookups. When VERSUM
reuses (parts of) a computation history, the corresponding SEQHASH
must be efficiently concatenable to the new computation history.
Note that SEQHASH must support general concatenation (that
is, a SEQHASH will be constructed in different orders): at the end
of DetermineNext, SEQHASH must support concatenation with a
single step. However, when reusing computations, SEQHASH must
support concatenation with a large number of steps.
Efficient comparison. During conflict resolution, VERSUM
must determine if two SEQHASH’s are equal. Computation his-
tories are too large to transmit in their entirety, so a SEQHASH is
stored as an ADS. To efficiently test for equality, two SEQHASH’s
representing identical computation histories must have the same
root hashes. This means that a SEQHASH’s internal structure must
be deterministic for given a computation history; it cannot depend
on the order in which the SEQHASH was constructed.
Resistance to adversarial inputs. A deterministic structure
comes with a risk: there might be a set of inputs that leads to an
unbalanced internal structure, so that operations on the SEQHASH
become slow (see §10.2). If an adversary could cause operations on
a SEQHASH to take linear time by modifying the input, they could
easily cause a VERSUM server to become unavailable. Constructing
such an adversarial input must be hard.
5.2 Structure
A SEQHASH is a forest of balanced binary trees that is con-
structed over several merge rounds. At the start of construction, all
of the elements making up the sequence that the SEQHASH holds
are placed as leaves at the bottom of the SEQHASH. Then, as long
as at least one node remains, SEQHASH performs a merge round.
The input and output of each round is the current sequence of nodes
representing the roots of SEQHASH’s trees. Each round merges
several adjacent pairs of input nodes, forming new trees as input for
the next round. Each merged node contains hashes of the merged
children, much like a Merkle tree [13]. SEQHASH keeps running un-
til no more nodes remain. Figure 4 contains an example SEQHASH,
where the leaf nodes a-k are the SEQHASH’s elements.
5
Figure 4: A SEQHASH constructed over the sequence of leaf
nodes a-k. The digits on top of each node represent the output
bits of the hash of each node. Dashed squares indicate roots of
trees that might be merged when another SEQHASH is concate-
nated to this SEQHASH.
Since SEQHASH produces a forest containing a variable num-
ber of trees, we summarize the entire forest at the end by hashing
together the roots of all trees, from left to right, to produce a sin-
gle final hash value. In VERSUM, all these hashes are computed
automatically by the ADS code.
5.3 Merge round
The idea behind SEQHASH’s merge round is to use a crypto-
graphic hash function to determine which nodes to merge.
The input to SEQHASH’s round function is a sequence of nodes.
The first round starts with all sequence elements as individual nodes
as input; in the case of a computation history, these nodes store
individual steps in the history.
Using the hash function, each input node is hashed to construct an
infinite sequence of bits. The round then proceeds one bit at a time,
considering the output of all nodes at the same time. SEQHASH
merges each adjacent pair of unmerged nodes when the left node
generated a 1 and the right node generated a 0 (with the exception
of nodes on the side of the sequence). The round function continues
until no two unmerged adjacent nodes exist. The tree has a determin-
istic shape because the bit sequence is deterministically generated
by each node.
Consider the first round in the example SEQHASH from Figure 4,
ignoring nodes a and k. While processing the first bit, nodes b and c
are merged, as well as i and j. Nodes d and e are not merged because
d’s first bit is not a 1, nor is e’s bit a 0. After several more bits, all
nodes except h are merged. Because h is between two merged nodes,
it will never merge during this round no matter how many bits are
considered, and so the round ends.
The nodes on the side represent a challenge because we do not
yet know their neighbor nodes; for example, node a might end up
adjacent to another node that generates 1 for the second bit of round
1, but it might also end up to a node that is merged during the first
bit of round 1. We say that in this example SEQHASH the fate of
node a is unknown, and so we keep it as its own tree in the final
SEQHASH.
During the merge round function, any nodes on the side whose
fate cannot yet be decided are marked as unknown. This happens
Round 1Round 2Round 3110000110111100010010101101000abcdefgijklmnopqrhto the leftmost node if it generates a 0, and to the rightmost node
if it generates a 1. Multiple nodes can be marked as unknown on
the same side during a single round. For example, nodes q and r are
both marked as unknown in round 3, as q might merge with a node
to its left based on the first bit, or it might not, and so r might merge
with q, or it might not.
5.4 SeqHash characteristics
During each round, the number of unmerged nodes is limited by
the fact that each round continues until no two adjacent nodes are
both unmerged. Consider all nodes continuing to the next round
(and thus ignoring unknown nodes). Each unmerged node must have
at least two merged nodes to its left, so the fraction of unmerged
nodes can be at most 1/3 of the total nodes. Because of that, the
total number of rounds is bounded by O(log3/2(n)).
The length of each round is limited, as we will prove formally in
Appendix A. Intuitively, two adjacent nodes will merge after 4 bits
in expectation, because the bits used during merging are indistin-
guishable from random, and 1 out of 4 possible bit combinations
results in merging. For adversarially constructed input sequences,
the number of bits consumed in a round is bounded by a constant κ
(which is the security parameter, roughly the log of the amount of at-
tacker’s computational resources), because the difficulty of coming
up with random bit sequences that do not merge for at least κ bits is
exponential in κ. The number of unknown nodes is bounded by 2κ,
as after κ bits any remaining nodes not yet marked as unknown will
have either merged or have two merged neighbors.
One detail is the possibility of identical nodes with the same
hash value that will never merge. To solve this problem, SEQHASH
merges all identical adjacent nodes at the beginning of each round.
5.5 Achieving SeqHash’s goals
Fast lookup. By storing the total number of elements under each