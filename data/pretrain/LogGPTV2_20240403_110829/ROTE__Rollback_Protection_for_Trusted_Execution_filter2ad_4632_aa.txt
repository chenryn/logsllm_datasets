# ROTE: Rollback Protection for Trusted Execution

## Authors
- Sinisa Matetic, ETH Zurich
- Mansoor Ahmed, ETH Zurich
- Kari Kostiainen, ETH Zurich
- Aritra Dhar, ETH Zurich
- David M. Sommer, ETH Zurich
- Arthur Gervais, ETH Zurich
- Ari Juels, Cornell Tech
- Srdjan Capkun, ETH Zurich

## Abstract
Security architectures like Intel SGX require protection against rollback attacks, where an adversary compromises the integrity of a protected application state by replaying old, persistently stored data or by starting multiple instances of the same application. Such attacks can have severe consequences, particularly in applications such as financial services. This paper introduces a new approach to rollback protection for SGX. The core idea is that while a single platform may struggle to prevent rollbacks, multiple processors can be enrolled to assist each other. We design and implement ROTE, a distributed rollback protection system. Our model captures the adversarial ability to schedule enclave execution, and we demonstrate that ROTE achieves a strong security property: the only way to violate integrity is to reset all participating platforms to their initial state. We show that ROTE outperforms previously known solutions based on local non-volatile memory.

## 1. Introduction
Intel Software Guard Extensions (SGX) enables the execution of security-critical code, called enclaves, in isolation from untrusted system software. SGX ensures that a malicious OS cannot read or modify enclave memory at runtime. To protect enclave data across executions, SGX provides sealing, which allows enclaves to encrypt and authenticate data for persistent storage. SGX-enabled processors also have certified cryptographic keys for remote attestation, verifying the software configuration of enclaves.

Despite these protections, rollback attacks remain a threat. In a rollback attack, a malicious OS replaces the latest sealed data with an older, authenticated version, which the enclave cannot easily detect. Another method is to create two instances of the same enclave and route update requests to one instance and read requests to the other, making them indistinguishable to remote clients performing attestation.

### Implications of Rollback Attacks
Rollback attacks can have severe implications, especially in financial applications. For example, if an adversary reverts an enclave to a previous state, the maintained account balance or transaction history will not match the executed transactions.

### Existing Approaches
Two primary approaches are known to address rollback attacks:
1. **Local Non-Volatile Memory**: Storing the persistent state of enclaves in non-volatile memory on the same platform. However, this has performance limitations and a limited number of write operations.
2. **Trusted Server**: Maintaining integrity information on a separate trusted server. This approach is vulnerable to attacks, and server replication using Byzantine consensus protocols requires high communication overhead and multiple replicas.

### Proposed Approach
In this paper, we propose a new approach to protect SGX enclaves from rollback attacks. The intuition is that while a single SGX platform may not efficiently prevent rollbacks, multiple processors can assist each other. Our approach realizes rollback protection as a distributed system. When an enclave updates its state, it stores a counter in a set of enclaves running on assisting processors. During state recovery, the enclave verifies the latest version using counter values from assisting enclaves.

We consider a powerful adversary who controls the OS on the target and assisting platforms, can break SGX protections on some assisting processors, and control all network communication. Our adversary model combines commonly considered network control and Byzantine faults, and captures the ability to restart trusted processes and run multiple instances of the same process.

### ROTE System
We design and implement ROTE, a rollback protection system. The main components include an optimized state update mechanism based on consistent broadcast protocols, a recovery mechanism to obtain lost counters upon enclave restart, and a session key update mechanism to address attacks based on multiple enclave instances.

ROTE achieves a strong security property called "all-or-nothing rollback." Although the attacker can freely restart enclaves, they cannot roll back any single enclave to a previous state. The only way to violate data integrity is to reset the entire group to its initial state.

### Performance Evaluation
We implemented ROTE on SGX and evaluated its performance on four SGX machines. Our evaluation shows that state updates in ROTE are very fast (1-2 ms), and the number of counter increments is unlimited. Compared to Byzantine consensus protocols, our approach requires fewer replicas (f + 1 instead of 3f + 1). Enclave developers can use ROTE through a simple API, and the TCB increment is moderate (1100 LoC).

### Contributions
- **New Security Model**: We introduce a new security model for reasoning about the integrity and freshness of SGX applications, identifying potential weaknesses in existing systems.
- **SGX Counter Experiments**: We show that SGX counters have severe performance limitations.
- **Novel Approach**: We propose a novel way to protect SGX enclaves using a distributed system of collaborative enclaves.
- **ROTE Implementation**: We implement ROTE, which effectively protects against rollback attacks and ensures integrity and freshness of application data.
- **Experimental Evaluation**: We demonstrate that distributed rollback protection incurs only a small performance overhead, with state update overhead of 1-2 ms over a low-latency network.

## 2. Problem Statement
In this section, we define models for the SGX architecture and the adversary, explain rollback attacks, and discuss the limitations of known solutions. Appendix A provides a summary of the SGX architecture for readers unfamiliar with it.

### 2.1 SGX Model
Our SGX model includes enclaves and the operating system, capturing the main functionalities available on all SGX platforms.

#### Scheduling Operations
- **Create(code)**: The OS creates an enclave by providing its code, generating a unique enclave identifier.
- **Start(e)**: The OS starts a created enclave, generating a unique instance identifier.
- **Suspend(i)** and **Resume(i)**: The OS can suspend and resume enclave execution.
- **Terminate(i)**: The OS terminates enclave execution, erasing the runtime memory.

#### Storage Operations
- **Seal(data)**: An enclave saves data for local persistent storage, creating an encrypted, authenticated data structure.
- **OfferSeal(i, s)**: The OS offers sealed data, which the enclave can verify.

#### Communication Operations
- **Write(me, i)**: The OS writes a message to an enclave instance.
- **Read(i)**: The OS reads a message from an enclave instance.

### 2.2 Local Adversary Model
We consider a powerful adversary who, after an initial trusted setup phase, controls all system software on the target platform, including the OS. The adversary can schedule enclaves, start multiple instances, offer the latest and previous versions of sealed data, and block, delay, read, and modify messages sent by enclaves. The adversary cannot read or modify enclave runtime memory or learn secrets held in enclave data.

### 2.3 Rollback Attacks
The goal of the adversary is to violate the integrity of the enclaveâ€™s state. This is possible with a simple rollback attack. After an enclave has sealed at least two states, the adversary can replace the latest sealed data with an older version, causing the enclave to revert to a previous state.