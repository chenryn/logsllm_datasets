            if (num == 1) {
                $('#login-message').html(_("Incorrect password."));
            } else {
                // window.location.href = "/main.html"; //解决android系统下360浏览器不能正常登陆问题
                window.location.reload(true);
            }
这里我们就明白了登陆过程中前端是如何向后端发送数据的了。
#### 分析R7WebsSecurityHandler()
这个函数是路由器的安全处理函数，无论访问什么url，都会经过这个函数，登录后台的验证，以及访问各种接口时的cookie验证都在这个函数进行处理。
我们直接先访问http://ip，但是实际上的url会是http://ip/，其会先经过R7WebsSecurityHandler()，遍历一些接口，发现都不是，然后就会return
0，下面这些资源，都是可直接访问的，不需要验证。
      v12 = strncmp(a5, "/public/", 8);
      v13 = 4521984;
      if ( !v12 )
        goto LABEL_24;
      v14 = strncmp(a5, "/lang/", 6);
      v13 = 4521984;
      if ( !v14 )
        goto LABEL_24;
      if ( strstr(a5, "img/main-logo.png") )
        goto LABEL_24;
      if ( strstr(a5, "reasy-ui-1.0.3.js") )
        goto LABEL_24;
      if ( !strncmp(a5, "/favicon.ico", 12) )
        goto LABEL_24;
      v13 = 4521984;
      if ( !*(_DWORD *)&wp->type[22] )
        goto LABEL_24;
      v15 = strncmp(a5, "/kns-query", 10);
      v13 = 4521984;
      if ( !v15 )
        goto LABEL_24;
      if ( !strncmp(a5, "/wdinfo.php", 11) )
        goto LABEL_24;
      v16 = strlen((int)a5);
      v13 = 4521984;
      if ( v16 == 1 && *a5 == 47 )
        goto LABEL_24;
      v17 = strncmp(a5, "/redirect.html", 14);
      v13 = 4521984;
      if ( !v17 || !strncmp(a5, "/goform/getRebootStatus", 23) )
      {
    LABEL_24:
        puts("------ don't need check user -------", v13);
        return 0;
      }
      if ( dword_4697F8 && !memcmp(v56, "/login.html", 10) )
      {
        dword_4697F8 = 0;
        return 0;
      }
      if ( i == 4 && !strncmp(a5, "/loginerr.html", 14) )
        return 0;
      if ( (unsigned int)strlen((int)v56) >= 4 )
      {
        v19 = strchr(v56, 46);
        if ( v19 )
        {
          v20 = v19 + 1;
          if ( !memcmp(v19 + 1, "gif", 3)
            || !memcmp(v20, "png", 3)
            || !memcmp(v20, "js", 2)
            || !memcmp(v20, "css", 3)
            || !memcmp(v20, "jpg", 3)
            || !memcmp(v20, "jpeg", 3) )
          {
            memset(v58, 0, 128);
            snprintf(v58, 128, "/www%s", v56);
            if ( !access(v58, 0) )
              return 0;
          }
        }
      }
发现没有处理'/'的条件后，会交给websHomePageHandler来处理，其会根据程序初始化中定义好的websDefaultPage，也就是main.html，然后重定向到main.html。
紧接着，又会经过R7WebsSecurityHandler()，然后经过遍历，最后会到到达这个位置LABEL_149，又将会重定向到login.html，login.html是不需要身份验证的，继续调试下去就会出现登录界面。
接下来我们将断点打在，190行的/login/Auth，这就对应了前端的那个接口，我们随便输入密码进行测试。
断点断下来后，分析过程，先获取username和password，然后和保存在全局变量中的用户名和密码进行比较。
这里先看密码不正确的处理流程，这里会到达LABEL_86，调用websWrite向WebRec结构体写了些东西，然后调用了webDone()函数，结束这次请求，websWrite((int)wp,
"%s", "1");，我猜测这应该是传给前面login.js的str，使得num=1，从而显示密码错误。
接着再来看正确密码的处理流程，经过一些if判断后，对loginUserInfo进行赋值，也就是访问者的ip地址，最后会跳转到LABEL_118。
LABEL_118，这个地方就是在生成cookie，然后发送到前端了，并且其cookie的组成是有一种固定的方式的。
为了搞明白cookie的生成过程，进入websRedirectOpCookie分析。
所以实际上cookie就是3部分组成password+3个a到z的随机数+3个字符(由访问者的ip地址决定是哪三个)。
接下来就是再次访问main.html，但和之前不同的是，这次loginUserInfo有值了，其会导致i!=4，执行这样的流程，其实就是在验证cookie是否有效。
验证cookie是否有效，然后跳转到对应的界面，访问其他接口也一样，都需要验证cookie的有效性。
登录和cookie验证的分析就差不多了，其实还有很多地方可以继续分析，比如说我这个浏览器登录了，换个浏览器会怎么样，或者换个ip访问会怎么样，根据其cookie的生成过程来说，同一个ip访问时，最多只有一个有效cookie，换一个浏览器登录，就会造成之前浏览器的cookie失效，从而需要重新登录。
### CSRF恢复出厂设置
大部分Tenda的设备的CSRF漏洞都是一些接口直接提供system命令，这里我也找到一个Tenda
Ax12下还未提交过的，也就是/goform/SysToolRestoreSet。
攻击也很简单，在经过身份验证后 Get访问这个接口，即可让整个路由器恢复出厂设置。
### CSRF删除修改密码，修改WiFi名称
这个漏洞发生在/goform/fast_setting_wifi_set接口下，这个接口实际上是设备恢复出厂设置后，重新设置WiFi名称，和密码的接口。
我们可以控制传入的web参数，来达到修改WiFi名称，修改密码的效果，并且在这个函数中，由于是重新设置的函数，所以并不会和先前的密码进行对比。
正常情况下，我们在恢复出厂设置后，其会让我们输入WiFi名称，无线密码，以及5-32位的管理员密码，抓包如下。
可以看到一些参数，如果选择无须密码，对应参数的值就是空。
  * ssid代表WiFi名称
  * WrlPassword代表连WiFi的密码
  * loginPwd代表管理员密码，被md5加密了。
然后在来分析这个接口对应的处理函数sub_4335C0。
先是获取ssid，判断是否为空，然后如果WiFi密码不为空，默认以psk-mixed方式加密，然后将WiFi名，加密方式，密码给到v17，然后调用tapi_set_wificfg，猜测应该是在设置WiFi密码吧，然后以同样的方式设置5g。
然后就是设置管理员密码了，先获取前端传入的参数loginPwd，然后设置到/etc/config/admin文件中，下面是一些无关紧要的if判断，感觉没什么作用，而且管理员密码已经写入到了admin文件中。
后序就是timeZone的设置，一些webWrite，以及一些重新启动的过程。
所以如果在有一次有效cookie的前提下，我们完全可以构造参数，来达到修改WiFi名称密码，以及管理员密码的目的。
    POST /goform/fast_setting_wifi_set HTTP/1.1
    Host: 192.168.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0
    Accept: */*
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    X-Requested-With: XMLHttpRequest
    Content-Length: 10
    Origin: http://192.168.0.1
    Connection: close
    Cookie: password=xxxxxxxxxx
    Referer: http://192.168.0.1/main.html
    ssid=xxx&WrlPassword=xxx&power=high&loginPwd=(md5(xxx))
### 未成功的XSS
Tenda
Ax12设备的WiFi名称和接入的设备名称都是可以设置的，这可能会导致xss，我对WiFi名称和设备名称都进行了测试，遗憾的是未能触发攻击，但是我感到很疑惑，因为名字都显示出来了，卡了好久最后才找到原因。
这里以设备名称为例，首先我们需要绕过前端长度验证，抓包修修改即可。
然后查看显示也是正常，html也正常，就有点奇怪为什么没弹窗。
卡了一会，最后将整个html下载下来才发现，其对<>字符进行了转义。
        &lt;script&gt;alert("The_Itach1")&lt;/script&gt;
接着我尝试#" onclick="alert(/xss/)，发现“也被转义。
    #"&nbsp;onclick="alert(/xss/)
    ---
遗憾的是这种xss没法利用，不然和已有的csrf配合，加上一点社会工程，或者修改自己设备名称，就可以到达比较不错的攻击效果。
### DOS，堆栈溢出
同样也是在/goform/fast_setting_wifi_set的ssid参数，其经过的sprintf函数，未对长度进行限制，这将导致堆栈溢出，而达到Dos拒绝服务的攻击效果。
### 老固件版本的一个命令注入
在参考老固件版本时，我看到了一个函数疑似存在命令注入，但是由于我的Tenda
Ax12设备固件已经升级，貌似无法回退，于是就打算qemu模拟下，但毕竟是模拟环境，和实体设备不太一样，而且和网上其他的Tenda设备的模拟方式也不同。
在网上下载好[老固件版本](\[https://www.tenda.com.cn/download/detail-3170.html\]\(https://www.tenda.com.cn/download/detail-3170.html
"https://www.tenda.com.cn/download/detail-3170.html"\))后，readelf确定好是mips大端序架构后，直接先尝试直接qemu启动。
可以正常启动，但是实际上其监听的ip实际上有点问题，虽然对这个命令注入漏洞测试验证没什么影响，但是这个ip实际上我们是可以控制的。
通过之前启动部分的分析，我们可以在binwalk解析出来的文件系统中，在/etc/config目录下新建一个network文件，添加以下内容。
    config interface 'loopback'
            option ifname 'lo'
            option proto 'static'
            option ipaddr '127.0.0.1'
            option netmask '255.0.0.0'
    config globals 'globals'
    config interface 'lan'
            option type 'bridge'
            option proto 'static'
            option ipaddr '192.168.112.131'
            option netmask '255.255.255.0'
只要我们想修改listen的ip，就去修改ipaddr的值就行了，重新qemu启动效果如下。
可以看到监听ip就变成了我们设置的ip了，环境就差不多模拟好了，虽然和真实设备有差别，但是能正常接收http请求。
我是在fast_setting_internet_set接口的处理函数sub_431AD8中的一个子函数sub_42581发现了这个命令注入漏洞。
其先是从websRec结构体a1，调用websGetVar函数获取到了staticIp的值，然后用sprintf将其给到v5，然后调用doSystemCmd_route执行命令，我们可以通过控制传入staticIp的值来达到命令注入的效果。
开始编写exp，攻击效果如下，我的exp是将装有密码的admin配置文件给copy到了tmp目录下 并命名为hack。
### 新固件的一个命令注入
这个漏洞发生在/goform/setMacFilterCfg接口，其对应的处理函数为sub_424334，本来这是一个存在栈溢出的函数，但是我偶然发现，其可能会存在命令注入。
在这个函数的最下面，有这样的代码。
可以看到，其很危险的调用了doSystemCmd函数，只为了输出一段话到/tmp/macfilter文件，仔细观察后，v2是传入的macFilterType参数，根据printf的那句话，&v14[2]是不是就是指向上一次macFilterType的值呢，如果能控制这个参数，就有可能造成命令注入。
这个接口对应了后台管理界面->高级功能->MAC地址过滤，macFilterType参数就是对应了白名单和黑名单，也就是write和black。先进行一次访问，但是我将macFilterType的值修改为test。
紧接着，继续再正常随便访问一次，发现&v14[2]的值就是test。
这意味着，确实存在命令注入。
根据这个我尝试编写脚本进行攻击，主要是重启命令，恢复出厂设置命令，和/bin/sh命令，攻击效果如下。
重启命令和恢复出厂设置，都起了效果，但是/bin/sh却未成功，但是经过调试发现，确实进入dosystemcmd函数前的参数是/bin/sh，但不知道为什么没成功getshell。
无论怎样，这个地方确实存在着命令注入，虽然需要一次身份验证，但是危害性还是较强。
## 参考
《揭秘家用路由器0day漏洞挖掘技术》
[Yaseng](https://yaseng.org/)
[H4lo-github](https://github.com/H4lo/IOT_Articles_Collection/blob/master/Collection.md)
[物联网终端安全入门与实践之玩转物联网固件上](https://www.freebuf.com/articles/endpoint/335030.html)
[物联网终端安全入门与实践之玩转物联网固件下](https://www.freebuf.com/articles/endpoint/344858.html)
[Tenda AC15 AC1900 Vulnerabilities Discovered and Exploited | by Sanjana Sarda
| Independent Security Evaluators](https://blog.securityevaluators.com/tenda-ac1900-vulnerabilities-discovered-and-exploited-e8e26aa0bc68)
[路由器web服务架构](https://tttang.com/archive/1777/)
[Tenda Ax12系列分析](https://www.anquanke.com/post/id/255290)
* * *