It seems that reloading or including a file or package causes multiple,
duplicate method listings to be stored and/or displayed. When I'm working on a
package or file that defines types and methods, I find that if I load changes
with `reload` or `include` and then call `methods` on one of my methods, I get
multiple listings of the same method/signature. It also seems that when I call
the method, I don't necessarily get the most recent version.
The code below is a minimal example of this behavior. I have observed this
behavior with julia 0.3.4, 0.3.5, and 0.3.6 on OSC Mavericks (10.9.5).
Create this file:
# File: "dup.methods.jl"
    module Dups                                                                                                                                                                                                                                 
    import Base: splice!
    export splice!
    type Foo
         thing::Int
    end
    function splice!(x::Foo,i,item)
             Foo.thing = 5
    end
    end
Then reload it a few times and list the methods on `splice!`.
    julia> include("dup.methods.jl")
    julia> include("dup.methods.jl")
    Warning: replacing module Dups
    julia> include("dup.methods.jl")
    Warning: replacing module Dups
    julia> include("dup.methods.jl")
    Warning: replacing module Dups
    julia> methods(splice!)
    #12 methods for generic function "splice!":
    splice!(a::Array{T,1},i::Integer) at array.jl:598
    splice!(a::Array{T,1},i::Integer,ins::AbstractArray{T,N}) at array.jl:598
    splice!{T 
Note the one entry of `splice!(x::Foo,i,item)` for each `include` call. This
happens with proper packages and with `reload` as well. I believe that using
`reload` is what is recommended in the "workflow" section of the
documentation. Please correct me if I'm just doing it wrong.