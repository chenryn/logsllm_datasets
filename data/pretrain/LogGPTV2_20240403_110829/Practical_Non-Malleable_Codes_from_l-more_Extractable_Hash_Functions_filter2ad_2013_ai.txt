– A is given z and outputs x,x(cid:48).
– If x (cid:54)= x(cid:48) and hz(x) = hz(x(cid:48)) output 1, otherwise output 0.
Deﬁnition A.2 (Hardness of the discrete logarithm problem [49]). For any k ∈ N and any
group-generation algorithm G, we say that the discrete logarithm problem is hard relative to G,
if for all PPT algorithms A there exists a negligible function negl such that
where,
Pr[DLogA,G(k) = 1] ≤ negl(k),
DLogA,G(k) :
(G, g, p) ← G(1k), |G| = p
s(cid:48) $← Zp, w := gs(cid:48)
s ← A(G, g, p, w)
If gs = w, return 1
otherwise, return 0
Next we recall the deﬁnitions of coding schemes and non-malleability (cf. [35]).
Deﬁnition A.3 (Coding scheme [35]). A (κ, ν)-coding scheme, κ, ν ∈ N, is a pair of algorithms
(Enc, Dec) such that: Enc : {0, 1}κ → {0, 1}ν is an encoding algorithm, Dec : {0, 1}ν → {0, 1}κ ∪
{⊥} is a decoding algorithm, and for every s ∈ {0, 1}κ, Pr[Dec(Enc(s)) = s] = 1, where the
probability runs over the randomness used by (Enc, Dec).
Note that, the encoder may also receive 1k, where k denotes the security parameter, and is
independent of κ, still for brevity, we omit 1k from the input of Enc.
Deﬁnition A.4 (Non-Malleability [35]). Let (Enc, Dec) be a (κ, ν)-coding scheme and F be a
family of functions f : {0, 1}ν → {0, 1}ν. For every f ∈ F and s ∈ {0, 1}κ, deﬁne the tampering
experiment
(cid:26) c ← Enc(s), ˜c ← f (c), ˜s = Dec(˜c)
(cid:27)
Tamperf
s
def=
Output : ˜s.
which is a random variable over the randomness of Enc and Dec. A coding scheme (Enc, Dec) is
non-malleable with respect to the function family F, if for each f ∈ F, there exists a distribution
Df over {0, 1}κ ∪ {⊥, same∗}, such that for all s ∈ {0, 1}κ, we have:
(cid:26)
Tamperf
s ≈
˜s ← Df
Output s if ˜s = same∗, and ˜s otherwise.
(cid:27)
and Df is eﬃciently samplable given oracle access to f . Here, “≈” may refer to statistical, or
computational, indistinguishability.
27
Next we provide the deﬁnition of a one-time secure message authentication codes (MAC).
Deﬁnition A.5 (One-time MAC). Let k be the security parameter. A message authentication
code Π = (Gen, Mac, Vrfy) is one-time -secure if for all algorithms A = (A1,A2),
where,
Pr[Mac − forgeA,Π(k) = 1] ≤ ,
Mac − forgeA,Π(k) :
sk ← Gen(1k)
(s, st) ← A1(1k)
t ← Macsk(s)
(s(cid:48), t(cid:48)) ← A2(t, st)
Output 1 if Vrfysk(s(cid:48), t(cid:48)) = 1 and s(cid:48) (cid:54)= s.
The deﬁnition of leakage-resilient one-time MAC follows.
Deﬁnition A.6 (One-time MAC against leakage). Let k be the security parameter and L be a
function class. A message authentication code Π = (Gen, Mac, Vrfy) is one-time -secure against
L if for all algorithms A = (A1,A2,A3),
where,
Pr[LRMac − forgeA,Π(k) = 1] ≤ ,
LRMac − forgeA,Π(k) :
sk ← Gen(1k)
g ← A1(1k), g ∈ L
(s, st) ← A2(1k, g(sk))
t ← Macsk(s)
(s(cid:48), t(cid:48)) ← A3(t, st)
Output 1 if Vrfysk(s(cid:48), t(cid:48)) = 1 and s(cid:48) (cid:54)= s.
A.2 Randomness extractors and universal hash function families
Using extractors [55] we can extract randomness from sources that produce weakly-random
values, assuming those values have suﬃcient min-entropy. Here, we follow the deﬁnition given
by [33], that uses average conditional min-entropy ˜H∞(·).
Deﬁnition A.7 (Randomness Extractor [33]). A polynomially time computable function Ext :
M × {0, 1}n → {0, 1}k is an average case, strong, (m, )-extractor, if for all random variables
S, Z, where S is a variable over M and ˜H∞(S|Z) ≥ m, it holds that
∆(Ext(S; R), Uk | (R, Z)) ≤ ,
where R denotes the random coins of Ext. The value L = m− k is called the entropy loss of Ext,
and n is the seed length of Ext.
Universal hash functions are good randomness extractors, and they are deﬁned as follows:
Deﬁnition A.8 (ρ-Universal Hashing [17]). A family H of deterministic functions h : M →
{0, 1}k is called a ρ-universal hash family, if for any s1 (cid:54)= s2 ∈ M, Prh←H[h(s1) = h(s2)] ≤ ρ.
If ρ = 1/2k, H is called universal.
Now we state the leftover-hash lemma [47], following the deﬁnition given in [7].
Lemma A.9 (Leftover-Hash Lemma [7, 47]). Assume that the family H of functions h : M →
{0, 1}k is a 1+γ
2k -universal hash family. Then, the extractor Ext(s; h) = h(s), where h is sampled
2L and L = m−k
according to H, is an average case, strong (m, )-extractor, where  = 1
is the entropy loss.
2 ·(cid:113)
γ + 1
28
Below, we deﬁne the inner product hash function family and in Lemma A.11 we prove that
it is universal.
Deﬁnition A.10 (The inner product hash function family). Let Fp be a ﬁnite ﬁeld of prime order
p, where p is a k-bit integer. For any t ∈ N, the inner-product function family Hip = (Gen, h),
for messages over Ft
p is deﬁned as follows:
• Gen(1k): sample (r1, . . . , rt) $← Ft
p and set z = (r1, . . . , rt).
• Hash computation: on input message s = (s1, . . . , st) ∈ Ft
i=1 si·ri,
where the summation refers to the addition operation, and · is the multiplication operation,
over Fp.
p, compute hz(s) =(cid:80)t
Lemma A.11. The function family Hip of Deﬁnition A.10 is universal.
Proof. For any k in N, let Fp be any ﬁeld of order p, where p is a k-bit integer, and let s =
(s1, . . . , st), ¯s = (¯s1, . . . , ¯st) be two distinct messages, i.e., s and ¯s diﬀer in at least one coordinate.
Without loss of generality, we assume that s1 (cid:54)= ¯s1. Then,
(cid:35)
(cid:34)
−(cid:80)t
i=2 ri · (si − ¯si)
(s1 − ¯s1)−1
(cid:35)
Pr
hz←Hip
[hz(s) = hz(¯s)] = Pr
ri · (si − ¯si) = 0
= Pr
r1 =
(cid:34) t(cid:88)
i=1
Hence, for any choice of r2, . . . , rt, there is a unique r1 for which hz(s) = hz(¯s). Since r1 is
random over Fp, we have that Pr[hz(s) = hz(¯s)] ≤ 1/p ≤ 1/2k.
(cid:4)
A.3 Instantiating authenticated, semantically secure symmetric encryption,
against one time leakage
In the following we present a one-time leakage-resilient, authenticated, semantically secure sym-
metric encryption (Deﬁnition 2.9), against λ bits of leakage.
Lemma A.12. Any -secure one-time message authentication code Π = (Gen, Mac, Vrfy) is
2λ-secure against λ bits of leakage.
Proof. (proof sketch) Towards contradiction, assume an attacker A = (A1,A2,A3), issuing a
single leakage query g ∈ Lλ against the secret key sk of Π, and breaking its security with
probability greater than 2λ. We build an attacker A(cid:48) that acts as follows: it samples g ← A1(1k),
makes a guess g on g(sk), and executes the rest of the LRMAC − forge experiment with (A2,A3).
Clearly, the probability of wining is equal to the probability of making a correct guess on g(sk),
say p1, times the probability that A breaks Π in the presence of leakage, say p2, which by
assumption is greater then 2λ. Assuming H∞(g(sk)) = λ, the winning probability of A(cid:48) is
p1 · p2 > , which is a contradiction.
(cid:4)
Construction A.13 (One-time MAC). Let Hpi be a pair-wise independent hash function family,
Hpi = {h : K × M → T }. A one-time message authentication code (Gen, Mac, Vrfy) is deﬁned
as follows:
• Gen: sample z ← K, and output hz.
• Mac(z,·): on input message s, output t := hz(s).
• Vrfy(z,·): on input s, t, if hz(s) = t, output 1, otherwise output 0.
It is not hard to see that by instantiating the above construction with ha,b(s) = a · s + b
mod p, where p is a k-bit prime, (a, b) is a 2k-bit key and M = T = Zp, we receive an 1/2k-
secure message authentication code (this is standard one-time information theoretic MAC).
By combining that code with a semantically secure, leakage resilient encryption scheme, we
construct an authenticated, semantically secure encryption scheme against λ-bits of leakage.
29
Construction A.14. (Authenticated one-time LR-encryption against λ-bits of leak-
age) Let ¯H be a hash function family, that outputs k bits, let PRG be a pseudo-random generator,
PRG : {0, 1}k → {0, 1}|s|, where |s| denotes the length of the message. We deﬁne a symmetric
encryption scheme (KGen, E, D), as follows:
• KGen(1k): sample r $← {0, 1}(k+log2 k+λ), and two random integers a, b, over {0, 1}k+λ,
and output sk = (r, a, b).
• Esk(·): On input message s, the encryption algorithm computes ¯h $← ¯H, e = PRG(¯h(r))+s,
t = ha,b(¯h||e) and outputs (¯h, e, t), where ha,b(s) := as + b mod p and p is a k + log2 k +
λ + |s|-bit prime.
• Dsk(·): On input (¯h, e, t), if t = ha,b(¯h||e) output s = PRG(¯h(r)) − e, otherwise output ⊥.
Theorem A.15. Assuming ¯H is a universal hash function family, H is pairwise independent
(ha,b ∈ H), and one-way functions, Construction A.14 is a one-time leakage-resilient, semanti-
cally secure, authenticated encryption scheme against Lλ.
Proof. (proof sketch)
Clearly, the above scheme satisﬁes correctness. Regarding semantic security, by construction we
have H∞(r|g(sk)) ≥ k + log2 k, for any g ∈ Lλ. Thus, by the LeftOver Hash Lemma (Lemma
A.9), ¯h(r) is statistically close to uniform over {0, 1}k, and PRG(h(r)) + s, is computationally
indistinguishable from a uniform element in {0, 1}|s|. Since the tag, t, is computed over (¯h, e),
it does not reveal any information about the message s, and semantic security follows.
Since ha,b belongs to a pairwise independent hash function family (see above), any attacker
without leakage access on (a, b), makes a forgery against the above scheme with probability
at most 1/2(k+λ). Thus, by Lemma A.12 unforgeability against λ bits of leakage breaks with
probability 2λ · 1/2(k+λ) = negl(k), and the unforgeability property of the scheme breaks with
(cid:4)
negligible probability in k, even given λ bits of leakage.
In the above construction, the length of the secret key is 3k +3λ+log2 k bits while the length
of the ciphertext is 2k + 2 log2 k + 2λ + 2|s| bits, giving a total of l(λ, s) := 5k + 5λ + 3 log2 k + 2|s|
bits.
Clearly, the above scheme is not suﬃcient for getting a rate-1 non-malleable code, thus we
combine the above scheme with the following authenticated encryption scheme for which we do
not require leakage resilience.
Construction A.16 (Authenticated encryption). Let PRG be a pseudo-random generator,
PRG : {0, 1}k → {0, 1}|s|+k, where |s| denotes the length of the message, and let (Gen, Mac, Vrfy)
be a CBC message authentication code that outputs tags of length k (cf. [49]). We deﬁne a
symmetric encryption scheme (KGen(cid:48), E(cid:48), D(cid:48)), as follows:
• KGen(cid:48)(1k): sample r $← {0, 1}k, and output sk = r.
• E(cid:48)
sk(·): On input message s, the encryption algorithm computes (r0, r1) = PRG(sk), where
|r0| = |s| and |r1| = k, e = r0 + s, t = Macr1(e), and outputs (e, t).
sk(·): On input (e, t), compute (r0, r1) = PRG(sk), and if Vrfyr1(e, t) = 1, output s =
e − r0, otherwise output ⊥.
• D(cid:48)
It is not hard to see that the above construction is secure: r0 is indistinguishable from
random, thus e is indistinguishable from random over the message space. Moreover, the un-
forgeability property of the message authentication code guarantees the authenticity of the
encryption scheme. In the above construction the length of secret key and ciphertext is 2k +|s|.
The ﬁnal construction is a combination between constructions A.16 and A.14, for λ = 2k +
log2 k bits of leakage. In order to encrypt a message s, we execute sk(cid:48) ← KGen(cid:48)(1k) and sk ←
30
(cid:54)= ⊥, output D(cid:48)
KGen(1k) and we output (e1 = Esk(sk(cid:48)), e2 = E(cid:48)
sk(cid:48)(s)), i.e., we encrypt the secret key of an
authenticated encryption scheme using leakage-resilient authenticated encryption, and then we
encrypt the message using the former scheme. The decryption procedure is straightforward: if
sk(cid:48)(cid:48)(e2), otherwise, output ⊥. Correctness and semantic security
Dsk(e1) = sk(cid:48)(cid:48)
follow directly by the correctness and semantic security of the underlying schemes. Now, if the