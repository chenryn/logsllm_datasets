2.2.2.1 URL Authority Obfuscation
Obfuscating with Userinfo
By default, Internet Explorer versions (after patch 832894)
do not support userinfo any longer (within URLs with
schema HTTP or HTTPS).
Google Chrome and Opera allow this behavior silently!
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.33
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host
Obfuscating the host subcomponent is part of old school
hacking. There are multiple ways in which a common host name
can be represented.
Internet names are translated to IP addresses. For example,
google.com is translated to 173.194.35.23 via Dot-decimal
notation. But there are also other ways to represent the same
"number“, such as: Dword, Octal, Hexadecimal.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.34
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host: DWORD – google.com
DWord or Double Word is also known as Integer IP.
Essentially, the IP address is translated in an equivalent
16bit number.
So, one of Google's IP address, 216.58.215.78, can be
translated to 3627734862 and it can be accessed using an
internet browser as http://3627734862.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.35
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host: OCTAL – google.com
An IP address can also be represented in Octal form. The
result is as follows: http://0330.0072.0327.0116
The IP address with each number is translated to base 8.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.36
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host: OCTAL – google.com
We can also "feed" each number by adding leading zeroes
without break the original value as follows:
http://0000000330.0000000072.0000000327.000000116
This extra case, however, does not work in Internet Explorer.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.37
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host: HEXADECIMAL – google.com
Another representation is Hexadecimal. Resembling the
previous technique, each IP number is converted to Base
16, and the result for the Google's IP is: http://0xd83ad74e
Each number can also be separated like this:
http://0xd8.0x3a.0xd7.0x4e
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.38
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host: HEXADECIMAL – google.com
Even with Hexadecimal representation it is possible to add
leading zeroes.
However, as in previous examples, it does not work Internet
Explorer:
http://0x000000d8.0x0000003a.0x000000xd7.0x0000004e
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.39
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host
These are the basic techniques; however, it is also possible
to mix these and create a hybrid!
Let’s see some examples.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.40
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host: HYBRID – google.com
The 173.194.35.23 IP address can be also represented as:
0xAD.194.35.23 0xAD.0302.35.23
0xAD.0xC2.35.23 0xAD.0302.0043.23
0xAD.0xC2.0x23.23 0xAD.0302.8983
0xAD.0xC2.0x23.0x17 0xAD.12722967
Legend:
Hexadecimal ~ Octal ~ Dword ~ Decimal
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.41
2.2.2.1 URL Authority Obfuscation
Obfuscating with Host
If you want to play some with IP addresses, this online tool
can be very useful:
http://www.silisoftware.com/tools/ipconverter.php
It converts IP addresses using the techniques we just
discussed.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.42
2.3
Java Obfuscation
Techniques
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.43
2.3 JavaScript Obfuscation Techniques
In this chapter, we will analyze how to use the
flexibility of JavaScript to obfuscate code.
We’ll start with background information on different
JavaScript encoding types and some examples. Then, we’ll
introduce techniques to compress code such as minifying
and packing.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.44
2.3.1 JavaScript Encoding – Non-Alphanumeric
Among the many ways of encoding JavaScript, there is an
interesting technique you should know called Non-
alphanumeric JavaScript Encoding.
This technique first appeared on the sla.ckers forum in late
2009 by Yosuke Hasegawa, a Japanese security
researcher.
http://web.archive.org/web/20111128054051/http://sla.ckers.org/forum/ WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.45
read.php?2,15812,page=14
2.3.1 JavaScript Encoding – Non-Alphanumeric
_=[]|[];$=_++;__=(_<<_);___=(_<<_)+
Basically, Hasegawa
_;____=__+__;_____=__+___;$$=({}+""
showed a way to encode
)[_____]+({}+"")[_]+({}[$]+"")[_]+(
($!=$)+"")[___]+(($==$)+"")[$]+(($=
JavaScript code by using
=$)+"")[_]+(($==$)+"")[__]+({}+"")[
only non-alphanumeric
_____]+(($==$)+"")[$]+({}+"")[_]+((
$==$)+"")[_];$$$=(($!=$)+"")[_]+(($
characters. Take a look at
!=$)+"")[__]+(($==$)+"")[___]+(($==
the following code.
$)+"")[_]+(($==$)+"")[$];$_$=({}+""
)[_____]+({}+"")[_]+({}+"")[_]+(($!
=$)+"")[__]+({}+"")[__+_____]+({}+"
")[_____]+({}+"")[_]+({}[$]+"")[__]
+(($==$)+"")[___];
($)[$$][$$]($$$+"('"+$_$+"')")();
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.46
2.3.1 JavaScript Encoding – Non-Alphanumeric
This "magic" is strongly related to the loosely typed nature
of JavaScript! So, let’s start analyzing some interesting
JavaScript behaviors.
NOTE: The explanation of this technique probably requires
a dedicated module and could be boring if you are not
interested in it. As a result, we will simply analyze some key
concepts and put links in the references if you want to go
in-depth.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.47
2.3.1.1 String Casting
In JavaScript, you can cast a variable to String as follows:
"" + 1234 or 1234 + "" //returns "1234"
[] + 1234 or 1234 + [] //returns "1234"
Here is something a little bit complex:
x = "hello"
[1,"a",x] //returns [1, "a", "hello"]
[1,"a",x]+"" //returns "1,a,hello"
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.48
2.3.1.2 Booleans
Booleans
There are many ways to return a Boolean value using
non-alphanumeric characters. Here are some examples:
![] !![]
FALSE TRUE
!{} !!{}
!!"" !""
[]=={} []==""
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.49
2.3.1.2 Booleans
If you need to extract the TRUE and FALSE string, you can
construct them combining our previous examples, as
follows:
[!![]]+"" //returns "true"
[![]]+"" //returns "false"
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.50
2.3.1.3 Numbers
Numbers can also be "created”. For example, 0 can be
created as follows:
+"" +[] ![]+![]
-"" -[] ![]+!{}
-+-+"" -+-+[] ![]+!!""
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.51
2.3.1.3 Numbers
Remember, TRUE is 1 while False is 0; therefore, to
generate the number 1, we can do TRUE+FALSE and 2 is
TRUE+TRUE…
Number Non-alphanumericrepresentations
0 +[], +"", ![]+![]
1 +!![], ![]+!"", ![]+!![], ~[]*~[], ++[[]][+[]]
2 !![]+!![], ++[++[[]][+[]]][+[]]
3 !![]+!![]+!![]
4 !![]+!![]+!![]+!![], (!![]+!![])*(!![]+!![])
5 !![]+!![]+!![]+!![]+!![]
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.52
2.3.1.4 String
After numbers, we need to know how to generate custom
stings. As we have seen with Booleans, it is possible to
extract the TRUE and FALSE strings but, what if we want to
generate the alert string? We need to generate each
character separately and then put them together.
Let’s look at an example.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.53
2.3.1.4.1 Generate ‘alert’ String
To generate the required alpha characters, we need to use
the string output of native JavaScript objects and extract
the characters required.
For example:
_={}+[] //is "[object Object]"
[]/[]+"" //is "NaN"
!![]/![]+"" //is "Infinity"
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.54
2.3.1.4.1 Generate ‘alert’ String
So, to extract the alpha char a we use the NaN string and
access the position 1.
Remember, strings can be accessed like arrays:
([]/[]+"")[![]+!![]] // "a"
"NaN" 1
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.55
2.3.1.4.1 Generate ‘alert’ String
The remaining alpha characters can be generated using the
following messages:
l false
e , or
true false [object Object]
r true
t or
true infinity
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.56
2.3.1 JavaScript Encoding – Non-Alphanumeric
There are some interesting encodings based on this
technique, JJencode and Aaencode. These are from
Hasegawa and "an esoteric and educational programming
style" called JSFuck.
Let’s briefly see their main differences.
http://utf-8.jp/public/jjencode.html http://www.jsfuck.com/ WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.57
http://utf-8.jp/public/aaencode.html
2.3.1.5 JJencode
JJencode is the way by which Hasegawa encodes
JavaScript code using only symbols. It uses a customizable
global variable name and from that encodes the payload.
$=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$]
,$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++
$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$
+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"
")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.
$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+$.$_$_+(![]+"")[$._$_]+$.$$$_+"\\"+$.__$+$
.$$_+$._$_+$.__+"(\\\"\\"+$.__$+$.__$+$.___+$.$$$_+(![]+"")[$._$_]+(![]+"")[$._$_]
+$._$+",\\"+$.$__+$.___+"\\"+$.__$+$.__$+$._$_+$.$_$_+"\\"+$.__$+$.$$_+$.$$_+$.$_$
_+"\\"+$.__$+$._$_+$._$$+$.$$__+"\\"+$.__$+$.$$_+$._$_+"\\"+$.__$+$.$_$+$.__$+"\\"
+$.__$+$.$$_+$.___+$.__+"\\\"\\"+$.$__+$.___+")"+"\"")())();
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.58