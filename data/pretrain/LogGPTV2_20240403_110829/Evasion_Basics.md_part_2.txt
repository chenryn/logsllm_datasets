### 2.2.2.1 URL Authority Obfuscation

#### Obfuscating with Userinfo
By default, Internet Explorer versions (after patch 832894) no longer support the userinfo subcomponent in URLs with the HTTP or HTTPS schema. However, Google Chrome and Opera silently allow this behavior.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.33**

#### Obfuscating with Host
Obfuscating the host subcomponent is a common technique in older hacking practices. There are multiple ways to represent a common hostname. For example, internet names can be translated into IP addresses. The domain `google.com` can be translated to `173.194.35.23` using dot-decimal notation. Other representations include DWord, Octal, and Hexadecimal.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.34**

##### Obfuscating with Host: DWord – google.com
DWord, also known as Integer IP, translates an IP address into a 32-bit number. One of Google's IP addresses, `216.58.215.78`, can be converted to `3627734862` and accessed via a browser as `http://3627734862`.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.35**

##### Obfuscating with Host: Octal – google.com
An IP address can also be represented in Octal form. For example, `216.58.215.78` can be written as `http://0330.0072.0327.0116`. Each octet is converted to base 8.

Additionally, leading zeroes can be added without changing the value, such as `http://0000000330.0000000072.0000000327.000000116`. However, this does not work in Internet Explorer.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.36-37**

##### Obfuscating with Host: Hexadecimal – google.com
Another representation is Hexadecimal. Each IP number is converted to Base 16. For Google's IP `216.58.215.78`, the hexadecimal representation is `http://0xd83ad74e`. This can also be separated as `http://0xd8.0x3a.0xd7.0x4e`.

Leading zeroes can also be added, but this does not work in Internet Explorer:
`http://0x000000d8.0x0000003a.0x000000xd7.0x0000004e`

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.38-39**

##### Hybrid Obfuscation – google.com
It is possible to mix these techniques to create hybrid obfuscations. For example, the IP address `173.194.35.23` can be represented in various ways:

- `0xAD.194.35.23`
- `0xAD.0302.35.23`
- `0xAD.0xC2.35.23`
- `0xAD.0302.0043.23`
- `0xAD.0xC2.0x23.23`
- `0xAD.0302.8983`
- `0xAD.0xC2.0x23.0x17`
- `0xAD.12722967`

**Legend:**
- Hexadecimal
- Octal
- DWord
- Decimal

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.40-41**

For further experimentation with IP addresses, the following online tool can be useful:
- [IP Converter](http://www.silisoftware.com/tools/ipconverter.php)

This tool allows you to convert IP addresses using the techniques discussed.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.42**

### 2.3 JavaScript Obfuscation Techniques

In this chapter, we will explore how to use the flexibility of JavaScript to obfuscate code. We will start with background information on different JavaScript encoding types and provide some examples. Then, we will introduce techniques to compress code, such as minifying and packing.

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.43-44**

#### 2.3.1 JavaScript Encoding – Non-Alphanumeric

Among the many ways to encode JavaScript, there is an interesting technique called Non-alphanumeric JavaScript Encoding. This technique was first introduced by Yosuke Hasegawa, a Japanese security researcher, on the sla.ckers forum in late 2009.

**Reference:**
- [Non-alphanumeric JavaScript Encoding](http://web.archive.org/web/20111128054051/http://sla.ckers.org/forum/read.php?2,15812,page=14)

Hasegawa demonstrated a way to encode JavaScript code using only non-alphanumeric characters. Here is an example:

```javascript
_=[]|[];$=_++;__=(_<<_);___=(_<<_)+_;
____=__+__;_____=__+___;$$=({}+"")[_____]+({}+"")[_]+({}[$]+"")[_]+(($!=$)+"")[___]+(($==$)+"")[$]+(($===$)+"")[_]+(($==$)+"")[__]+({}+"")[_____]+(($==$)+"")[$]+({}+"")[_]+(($==$)+"")[_];$$$=(($!=$)+"")[_]+(($!=$)+"")[__]+(($==$)+"")[___]+(($===$)+"")[_]+(($==$)+"")[$];$_$=({}+"")[_____]+({}+"")[_]+({}+"")[_]+(($!=$)+"")[__]+({}+"")[__+_____]+({}+"")[_____]+({}+"")[_]+({}[$]+"")[__]+(($==$)+"")[___];
($)[$$][$$]($$$+"('"+$_$+"')")();
```

This "magic" is strongly related to the loosely typed nature of JavaScript. Let’s analyze some key concepts:

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.45-47**

##### 2.3.1.1 String Casting
In JavaScript, you can cast a variable to a string as follows:

```javascript
"" + 1234 // returns "1234"
1234 + "" // returns "1234"
[] + 1234 // returns "1234"
1234 + [] // returns "1234"

x = "hello";
[1, "a", x] // returns [1, "a", "hello"]
[1, "a", x] + "" // returns "1,a,hello"
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.48**

##### 2.3.1.2 Booleans
There are many ways to return a Boolean value using non-alphanumeric characters. Here are some examples:

- `![]` // FALSE
- `!![]` // TRUE
- `!{}` // FALSE
- `!!{}` // TRUE
- `!!""` // TRUE
- `!""` // FALSE
- `[] == {}` // FALSE
- `[] == ""` // FALSE

To extract the "true" and "false" strings, you can combine these examples:

```javascript
[!![]] + "" // returns "true"
[![]] + "" // returns "false"
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.49-50**

##### 2.3.1.3 Numbers
Numbers can also be "created" using non-alphanumeric characters. For example, 0 can be created as follows:

- `+""`
- `+[]`
- `![] + ![]`
- `-""`
- `-"[]`
- `![] + !{}`
- `-+-+""`
- `-+-+[]`
- `![] + !!""`

Remember, `TRUE` is `1` while `FALSE` is `0`. Therefore, to generate the number `1`, you can do `TRUE + FALSE` and `2` is `TRUE + TRUE`.

**Number Representations:**
- `0`: `+[], +"", ![] + ![]`
- `1`: `+!![], ![] + !" ", ![] + !![], ~[] * ~[], ++[[]][+[]]`
- `2`: `!![] + !![], ++[++[[]][+[]]][+[]]`
- `3`: `!![] + !![] + !![]`
- `4`: `!![] + !![] + !![] + !![], (!![] + !![]) * (!![] + !![])`
- `5`: `!![] + !![] + !![] + !![] + !![]`

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.51-52**

##### 2.3.1.4 Strings
After numbers, we need to know how to generate custom strings. As seen with Booleans, it is possible to extract the "true" and "false" strings. To generate the "alert" string, we need to generate each character separately and then put them together.

**Example:**

To generate the required alpha characters, we can use the string output of native JavaScript objects and extract the characters needed:

```javascript
_ = {} + [] // is "[object Object]"
[] / [] + "" // is "NaN"
!![] / ![] + "" // is "Infinity"
```

To extract the character 'a' from "NaN":

```javascript
([] / [] + "")[![] + !![]] // "a"
```

The remaining characters can be generated using the following messages:

- `l`: `false`
- `e`: `,` or `true false [object Object]`
- `r`: `true`
- `t`: `or true infinity`

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.53-56**

##### 2.3.1.5 JJencode
JJencode is a method by which Hasegawa encodes JavaScript code using only symbols. It uses a customizable global variable name and encodes the payload from that. Here is an example:

```javascript
$=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$],$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+$.$_$_+(![]+"")[$._$_]+$.$$$_+"\\"+$.__$+$.$$_+$._$_+$.__+"(\\\"\\"+$.__$+$.__$+$.___+$.$$$_+(![]+"")[$._$_]+(![]+"")[$._$_]+$._$+",\\"+$.$__+$.___+"\\"+$.__$+$.__$+$._$_+$.$_$_+"\\"+$.__$+$.$$_+$.$$_+$.$_$_+"\\"+$.__$+$._$_+$._$$+$.$$__+"\\"+$.__$+$.$$_+$._$_+"\\"+$.__$+$.$_$+$.__$+"\\\""+$.__$+$.$$_+$.___+$.__+"\\\"\\"+$.$__+$.___+")"+"\"")())();
```

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 | p.57-58**