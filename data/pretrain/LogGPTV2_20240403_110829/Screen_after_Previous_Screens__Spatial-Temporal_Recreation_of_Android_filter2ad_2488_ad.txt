121630
402536
199290
360607
313068
448535
263850
245094
335323
147428
175394
59284
238227
125085
206146
225245
205661
197316
584587
190847
382522
235973
86829
200196
93971
137978
131876
468258
98662
231891
211518
321229
Metrics for Evaluating Selective Reanimation
New C/C++
Structures
79119
106168
49322
45420
80808
86319
21027
25311
58291
18902
30753
41815
27450
24730
65818
72944
127337
105004
88949
239711
104391
82077
61210
51769
24995
63007
48496
80672
72310
67789
102642
266965
71578
95516
129804
42037
52097
45085
43209
65377
149372
49902
98571
69587
104216
Allocated
Java Objects
930
1905
928
1432
826
482
790
333
460
367
1072
314
763
638
1373
665
1843
1184
1892
1353
489
1458
422
652
202
914
183
860
1293
884
732
2091
723
1451
929
433
832
287
562
353
1232
185
924
901
1571
JNI
Invocations
4699
9318
4606
7928
4185
5191
4450
2004
4273
1632
5256
3488
3461
2823
8186
4193
8436
6289
10038
6148
5097
7599
3077
4189
1291
4914
2452
4388
5296
4548
3675
12591
4023
8629
5366
2078
4510
1950
3249
2599
9817
1989
5268
4836
7075
Runtime
(seconds)
502
1610
369
1059
487
672
674
276
637
259
486
664
450
831
1390
478
1731
430
1413
1248
446
709
303
375
335
382
297
381
632
466
749
850
380
1128
1128
399
547
493
456
403
890
291
488
723
573
Table 1: Overall Results of RetroScope Evaluation.
and 5,047 JNI function invocations are required to re-
draw all of the screens for a single app. This yields an
average of 41,078 byte-code instructions and 894 JNI
function invocations per screen. Higher than our ini-
tial expectations, these numbers attest to the complexity
of the screen drawing implementation and robustness of
RetroScope’s IRE.
and an average of 158 Java objects and 13,535 C/C++
structures per screen. These numbers conﬁrm the claim
in GUITAR [35] that each screen is made of “thousands
of GUI data structures.” Most importantly, as also shown
in [35], only the structures for Screen 0 may still exist in
a memory image, whereas RetroScope actively triggers
the rebuilding of the lost data for Screens 0, -1, -2, ... -N.
Another metric above our expectation was the number
of data structures that had to be newly allocated to re-
draw each screen. While redrawing all previous screens
of each app, the reanimated code allocated an average of
891 Java objects and 76,397 C/C++ structures per app,
4.1 Spatial-Temporal Evidence Recovery
Ground Truth. We now evaluate how accurately Ret-
roScope recreates the screens displayed during our last
USENIX Association  
25th USENIX Security Symposium  1145
(a) Screen -6.
(b) Screen -5.
(c) Screen -4.
(d) Screen -3.
(e) Screen -2.
(f) Screen -1.
(g) Screen 0.
Figure 5: LG G3 Facebook Recovery.
interaction session with each app. However, obtain-
ing the ground truth (how many previous screens Retro-
Scope should recover) is not straightforward because the
screens’ recoverability is decided by the availability of
the app’s internal data in the memory image. Therefore,
to identify the recoverable previous screens, we instru-
mented each app to log any non-GUI-related data allo-
cations and accesses performed by each screen-drawing
function. We then compared this log to the content of
the ﬁnal memory image to identify which screens’ en-
tire app-internal data still existed4. This gives us a strict
lower bound on the number of screens that RetroScope
should recover (i.e., all the internal data for those screens
exist in the memory image). Without app-speciﬁc reverse
engineering efforts, it is impossible to know the upper
bound that the app’s internal data could support. But as
we discuss later, screen redrawing is often “all or noth-
ing” and adheres closely to this lower bound.
Highlights of Results. RetroScope recovered a total of
254 screens for the 45 apps, from a low of 3 to a high of
11 screens — ironically for the privacy sensitive Chase
Banking app on the HTC One phone (Figure 6). Overall,
Table 1 shows that RetroScope recovers an average of
5.64 screens per app, with the majority of the test cases
(33 out of 45) having 5 or more screens.
Table 1 highlights the depth of temporal evidence that
RetroScope makes available to forensic investigators, but
even more intriguing is the clear progression of user-app
interaction portrayed by the recovered screens. Figure 5
shows the 7 screens recovered for the Facebook app on
the LG G3 phone. From these screens we can infer the
“suspect’s” progression: from his own proﬁle (Screen
-6), to search results for “hitman” (Screen -5), to the
Facebook proﬁle (Screen -4), Photos screen (Screen -3),
a photo album (Screen -2) of the Hitman movie, to a
single photo (Screen -1), and lastly to that photo’s com-
ments (Screen 0). Such powerful spatial-temporal recov-
4Note that RetroScope did not have access to nor could beneﬁt from
this ground truth information. Further, we utilized in-place binary in-
strumentation (which does not interact nor interfere with the app’s ex-
ecution or memory management) to ensure the accuracy of our experi-
ments.
ery — from a single memory image — is not possible via
any existing memory forensics technique.
Another interesting observation from Table 1 is that,
although RetroScope’s recovery is app-agnostic,
the
apps’ diverse implementations lead to very different re-
drawing procedures. For example, for both Skype and
Facebook apps on the Samsung S4, RetroScope repro-
duced all 6 screens from each app. However, Facebook’s
redrawing implementation appears much more complex,
requiring 338,195 byte-code instructions and 7,928 JNI
invocations, compared to Skype’s 236,213 byte-code in-
structions and 5,256 JNI invocations. This also leads to
varied RetroScope run times: from the shortest, Samsung
S4’s MyChart, at 259 seconds to the longest, LG G3’s
Chase Banking, at 1731 seconds. The average runtime
across all apps is 655 seconds (10 minutes, 55 seconds).
Lastly, Table 1 shows that in two cases (Rows 26 and
34), RetroScope missed a single screen. Manual investi-
gation of these cases revealed that the app-speciﬁc draw-
ing functions for the missed screens had thrown unhan-
dled Java exceptions. For the HTC One device’s Face-
book case, we found that the app had stored a pointer
to the Thread object which handled its user interface
and during redrawing the app failed on a check that the
current Thread (handled by RetroScope during reanima-
tion) is the same as the previously stored Thread (from
the memory image). For the LG G3 Skype case, when
drawing the “video call” screen, a saved timer value
(in the memory image) was compared against the sys-
tem’s current time, which also failed during reanimation.
These were addressed by reverse engineering to deter-
mine which ﬁeld/condition in the app caused the fault,
and RetroScope can be instructed to set/avoid them dur-
ing interleaved execution. Also of note, several cases re-
quired recovering on-screen elements (e.g., user avatars)
which were cached on persistent storage until they are
loaded on the screen. Currently, RetroScope attempts to
detect (e.g., via the unhandled exception) but can not au-
tomatically correct such implementation-speciﬁc seman-
tic constraints. We leave this as future work.
1146  25th USENIX Security Symposium 
USENIX Association
USENIX Association  