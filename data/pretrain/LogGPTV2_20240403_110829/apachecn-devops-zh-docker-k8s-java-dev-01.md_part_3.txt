![](img/856470ef-1715-4d4c-9cc5-2204ad2e8eb9.png)
*   如果你是一个勇敢的灵魂，你也可以切换到 beta 频道获取更新。通过这种方式，您可以始终拥有最新和最棒的 Docker 功能，但有降低稳定性的风险，测试版软件也是如此。还要注意的是，切换到测试版频道将卸载你当前稳定版本的 Docker，并销毁你所有的设置和容器。Docker 会就此警告你，以确保你真的想这么做:
![](img/212c996c-7b4f-4e55-9eab-7c44920f637e.png)
*   偏好设置的“文件共享”面板...将为您提供一个选项，将您机器上的 macOS 目录标记为绑定装载到稍后要运行的 Docker 容器中。我们将在本书后面详细解释挂载目录。目前，让我们有一组默认的选择目录:
![](img/f8d30c17-26a6-4330-983a-425910ab4c45.png)
*   “高级”面板有一些选项可用于调整 Docker 可用的计算机资源，即处理器数量和内存量。如果您从 macOS 上的 Docker 开始，默认设置通常是一个好的开始:
![](img/82d34e3d-2324-40ab-bee2-b1c8fffabf21.png)
*   “代理”窗格为您提供了设置代理的可能性，如果您的计算机上需要它的话。您可以选择使用系统或手动设置，如下图所示:
![](img/55d57532-f7a9-4d34-a586-628a5ca7ad1c.png)
*   在下一页，您可以编辑一些 Docker 守护程序设置。这将包括添加注册表和注册表镜像。Docker 在拉图片时会用到它们。“高级”选项卡包含一个文本字段，您可以在其中输入包含守护程序配置的 JSON 文本:
![](img/37a3e360-2fe1-49fe-8156-2aec154ab7e1.png)
*   在守护程序窗格中，您还可以关闭 Docker 实验特性。一段时间以来，默认情况下已经启用了实验特性。Docker 的新版本不时会带来新的实验特性。在撰写本书时，它们将包括，例如，检查点和恢复(一个允许您通过检查点来冻结正在运行的容器的功能)、Docker 图形驱动程序插件(使用外部/进程外图形驱动程序与 Docker 引擎一起使用，作为使用内置存储驱动程序的替代)以及其他一些。看到 Docker 的新版本中包含了哪些新功能总是很有趣。单击 Daemon 页面中的链接将带您进入 GitHub 页面，该页面列出并解释了所有新的实验特性。
*   最后的偏好...窗格是重置。如果您发现您的 Docker 无法启动或表现不佳，您可以尝试将 Docker 安装重置为出厂默认值:
![](img/be959e9f-35c1-4cfc-bc10-edaa484c7299.png)
但是，应该警告您，将 Docker 重置为出厂状态也将删除您机器上所有下载的映像和容器。如果您有尚未推送至任何地方的映像，首先进行备份总是一个好主意。
Docker 菜单中的 Open Kitematic 是打开我们前面提到的 Kitematic 应用的便捷快捷方式。这是一个在 Windows 和 Mac OS X 上使用 Docker 的桌面实用程序。如果您尚未安装 Kitematic，Docker 将为您提供安装包的链接:
![](img/5014fd95-9691-4cb8-93cd-500606e75316.png)
*   如果您运行 Kitematic，它将首先显示 Docker Hub 登录屏幕。您现在可以注册 Docker Hub，然后提供您的用户名和密码登录:
![](img/fda9fab6-fb52-4c72-a0c6-80c7342edc03.png)
单击“立即跳过”将带您进入映像列表，而无需登录 Docker Hub。让我们通过拉取和运行一个映像来测试我们的安装。我们来搜索`hello-java-world`，如下图截图所示:
![](img/710060ae-902d-4e66-be70-97d3d4007336.png)
从注册表中取出映像后，启动它。Kitematic 将呈现正在运行的容器日志，这将是著名的`hello world`消息，来自一个容器化的 Java 应用:
![](img/2316838e-d4a3-439e-8f63-4c19c133555f.png)
这就是在 Kitematic 中运行容器的原因。让我们试着从外壳开始做同样的事情。在终端中执行以下操作:
```
$ docker run milkyway/java-hello-world 
```
因此，您将看到同样的问候，来自一个容器化的 Java 应用，这次是在 macOS 终端:
![](img/53f4c18f-fc90-401b-8fd7-fa1bb32f230a.jpg)
就是这样，我们有一个本地 Docker 在我们的 macOS 上运行。让我们也在 Linux 上安装它。
# 在 Linux 上安装
有很多不同的 Linux 发行版，每个 Linux 发行版的安装过程可能会有所不同。我将在最新的 16.04 Ubuntu 桌面上安装 Docker:
1.  首先，我们需要允许`apt`包管理器使用 HTTPS 协议上的存储库。从外壳执行:
```
$ sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates curl software-properties-common
```
2.  接下来我们要做的是将 Docker 的`apt`存储库`gpg`键添加到我们的`apt`来源列表中:
```
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add –
```
3.  如果成功，一个简单的`OK`将是响应。使用以下命令设置稳定的存储库:
```
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
```
4.  接下来，我们需要更新`apt`包索引:
```
$ sudo apt-get update  
```
5.  现在我们需要确保`apt`安装程序将使用正式的 Docker 存储库，而不是默认的 Ubuntu 存储库(可能包含 Docker 的旧版本):
```
$ apt-cache policy docker-ce  
```
6.  使用此命令安装最新版本的 Docker:
```
$ sudo apt-get install -y docker-ce
```