(SHigh)
T <: HL
keyl(T) <: l
′
T <: T
{T}k <: {T
′}k
(SKey)
(SAenc)
Figure 5: Subtyping Rules
(e.g., taking the left branch in P and the right branch in P′ in two
conditionals with the same guard). POr is the elimination rule for
union types, which requires the continuation process to be well-
typed with both types.
To ensure that the destructor application fails or succeeds equally
in the two processes, we allow only the same destructor to be ap-
plied to the same variable in both processes (PLet). As usual, we
then type-check the then as well as the else branch and then take
the union of the corresponding constraints. The typing rules for
destructors are presented in Figure 7. These are mostly standard:
for instance, after decryption, the type of the payload is determined
by the one of the decryption key, as long as this is of high integrity
(DDecH). We can as well exploit strong types for ciphertexts, typ-
ically introduced by verifying a surrounding signature (see, e.g.,
the types for Helios) to derive the type of the payload (DDecT). In
the case of public key encryption, we have to be careful, since the
public encryption key is accessible to the attacker: we thus give
the payload type T ∨ LL (rule DAdecH). For operations involving
corrupted keys (label LL) we know that the payload is public and
hence give the derived message type LL.
In the special case in which we know that the concrete value of
the argument of the destructor application is a nonce or constant
due to a refinement type, and we know statically that any destructor
application will fail, we only need to type-check the else branch
(PLetLR). As for destructor applications, the difficulty while typing
conditionals is to make sure that the same branch is taken in both
processes (PIfL). To ensure this we use a trick: We type both the
left and the right operands of the conditional with type LL and add
both generated sets of constraints to the constraint set. Intuitively,
this means that the attacker could perform the equality test himself,
since the guard is of type LL, which means that the conditional must
take the same branch on the left and on the right. In the special case
in which we can statically determine the concrete value of the terms
in the conditional (because the corresponding type is populated by
a singleton), we have to typecheck only the single combination of
branches that will be executed (PIfLR). Another special case is if
the messages on the right are of type HH and the ones on the left
of type LL. As a secret of high integrity can never be equal to a
public value of low integrity, we know that both processes will take
the else branch (PIfS). This rule is crucial, since it may allow us to
prune the low typing branch of asymmetric decryption. The last
special case for conditionals is when we have a refinement type
with replication for both operands of the equality check (PIfLR*).
Although we know that the nonces on both sides are of the same
type and hence both are elements of the same set, we cannot assume
that they are equal, as the sets are infinite, unlike in rule PIfLR. Yet,
concrete instantiations of nonces will have the same index for the
left and the right process. This is because we check for a variant
of diff-equivalence. This ensures that the equality check always
yields the same result in the two processes. All these special cases
highlight how a careful treatment of names in terms of equivalence
classes (statically captured by types) is a powerful device to enhance
the expressiveness of the analysis.
Finally, notice that we do not have any typing rule for replication:
this is in line with our general idea of typing a bounded number of
sessions and then extending this result to the unbounded case in
the constraint checking phase, as detailed in Section 6.
5 CONSISTENCY OF CONSTRAINTS
Our type system guarantees trace equivalence of two processes
only if the generated constraints are consistent. In this section we
give a slightly simplified definition of consistency of constraints
and explain how it captures the attacker’s capability to distinguish
processes based on their outputs.
To define consistency, we need the following ingredients:
• ϕ l(c) and ϕ r(c) denote the frames that are composed of the
left and the right terms of the constraints respectively (in
the same order).
• ϕΓ
denotes the frame that is composed of all low confiden-
LL
tiality nonces and keys in Γ, as well as all public encryption
keys and verification keys in Γ. This intuitively corresponds
to the initial knowledge of the attacker.
• Let EΓ be the set of all nonces occurring in Γ.
• Two ground substitutions σ , σ ′ are well-formed in Γ if they
preserve the types for variables in Γ (i.e., Γ ⊢ σ(x) ∼ σ ′(x) :
Γ(x) → cx ).
Definition 5.1 (Consistency). A set of constraints c is consistent
in an environment Γ if for all substitutions σ,σ ′ well-typed in Γ
LL ∪ ϕ r(c)σ ′) are
the frames new EΓ .(ϕΓ
statically equivalent. We say that (c, Γ) is consistent if c is consistent
in Γ and that a constraint set C is consistent in Γ if each element
(c, Γ) ∈ C is consistent.
LL ∪ ϕ l(c)σ) and new EΓ .(ϕΓ
We define consistency of constraints in terms of static equivalence,
as this notion exactly captures all capabilities of our attacker: to
distinguish two processes, he can arbitrarily apply constructors
and destructors on observed messages to create new terms, on
which he can then perform equality tests or check the applicability
of destructors. We require that this property holds for any well-
typed substitutions, to soundly cover that fact that we do not know
the content of variables statically, except for the information we
get by typing. In Section 6.3 we introduce an algorithm to check
consistency of constraints.
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA416Γ ⊢ ⋄
Γ ⊢ P ∼ Q → C
Γ ⊢ M ∼ N : LL → c
Γ ⊢ out(M).P ∼ out(N).Q → C∪∀c
Γ, n : τ l,a
n
Γ ⊢ new n : τ l,a
Γ does not contain union types
Γ ⊢ 0 ∼ 0 → (∅, Γ)
(POut)
⊢ P ∼ Q → C
n .P ∼ new n : τ l,a
(PPar)
′
(PZero)
(PNew)
Γ, x : LL ⊢ P ∼ Q → C
Γ ⊢ in(x).P ∼ in(x).Q → C
(PIn)
Γ, x : T
′ ⊢ P ∼ Q → C
′
(POr)
Γ ⊢ P ∼ Q → C
Γ ⊢ P | P
′ ∼ Q | Q
Γ ⊢ P ∼ Q → C
Γ ⊢ if M = M
Γ ⊢ P
′
Γ ⊢ P
Γ ⊢ d(y) : T
Γ ⊢ P
′ ∼ Q
′ → C
′
Γ, x : T ⊢ P ∼ Q → C
′ ∼ Q
Γ ⊢ P
′ → C∪×C
′ → C
′
′ ⊢ P ∼ Q → C ∪ C
′ → C
′ → C ∪ C
′
′ (PLet)
n .Q → C
Γ, x : T ⊢ P ∼ Q → C
Γ, x : T ∨ T
′ ∼ Q
′ ∼ let x = d(y) in Q else Q
Γ ⊢ let x = d(y) in P else P
Γ(y) =(cid:74)τ l,a
m (cid:75)
n ; τ l′,a
′ (PLetLR)
′ ∼ let x = d(y) in Q else Q
Γ ⊢ let x = d(y) in P else P
′ →(cid:0)C ∪ C
′(cid:1) ∪∀(c ∪ c
′ → C
′ ∼ Q
′
′ ∼ N
′ : LL → c
′ ∼ if N = N
′ then P else P
′)
(cid:75) → ∅
Γ ⊢ M1 ∼ N1 :(cid:74)τ l,1
n (cid:75) → ∅
m ; τ l′,1
′ = (τ l′,1
= τ l′′,1
?
Γ ⊢ Pb ∼ Qb′ → C
m′ )
Γ ⊢ if M1 = M2 then P⊤ else P⊥ ∼ if N1 = N2 then Q⊤ else Q⊥ → C
′ : HH → c
′ → C
′
′
′ ∼ N
Γ ⊢ P
′ then P else P
′ → C
′
Γ ⊢ if M = M
(cid:75) → ∅
Γ ⊢ M2 ∼ N2 :(cid:74)τ l,∞
(cid:75) → ∅
Γ ⊢ M1 ∼ N1 :(cid:74)τ l,∞
m ; τ l′,∞
′ → C
′ ∼ Q
Γ ⊢ P ∼ Q → C
′ → C ∪ C
′ ∼ if N1 = N2 then Q else Q
Γ ⊢ if M1 = M2 then P else P
Γ ⊢ M ∼ N : LL → c
′ then Q else Q
Γ ⊢ M2 ∼ N2 :(cid:74)τ l′′,1
m′
= τ l′′′,1
?
n′
Γ ⊢ M
′ then Q else Q
m ; τ l′,∞
′
Γ ⊢ M ∼ N : LL → c
′ ∼ if N = N
′ → C
Γ ⊢ M
b = (τ l,1
m
; τ l′′′,1
n′
(PIfLR)
(PIfS)
′ ∼ Q
b
n
Γ ⊢ P
)
n
n
′ (PIfLR*)
′
(PIfL)
Figure 6: Rules for processes
6 MAIN RESULTS
In this section, we state our two main soundness theorems, entailing
trace equivalence by typing for the bounded and unbounded case,
and we explain how to automatically check consistency.
6.1 Soundness of the type system
Our type system soundly enforces trace equivalence: if we can
typecheck P and Q then P and Q are equivalent, provided that the
corresponding constraint set is consistent.
Theorem 6.1 (Typing implies trace eqivalence). For all P,
Q, and C, for all Γ containing only keys, if Γ ⊢ P ∼ Q → C and C is
consistent, then P ≈t Q.
To prove this theorem, we first show that typing is preserved by
reduction, and guarantees that the same actions can be observed on
both sides. More precisely, we show that if P and Q are multisets
of processes that are pairwise typably equivalent (with consistent
constraints), and if a reduction step with action α can be performed
to reduce P into P′, then Q can be reduced in one or several
steps, with the same action α, to some multiset Q′ such that the
processes in P′ and Q′ are still typably equivalent (with consistent
constraints). This is done by carefully examining all the possible
typing rules used to type the processes in P and Q. In addition we
show that the frames of messages output when reducing P and Q
are typably equivalent with consistent constraints; and that this
entails their static equivalence.
This implies that if P and Q are typable with a consistent con-
straint, then for each trace of P, by induction on the length of
the trace, there exists a trace of Q with the same sequence of ac-
tions, and with a statically equivalent frame. That is to say P ⊑t Q.
Similarly we show Q ⊑t P, and we thus have P ≈t Q.
Since we do not have typing rules for replication, Theorem 6.1
only allows us to prove equivalence of protocols for a finite num-
ber of sessions. An arguably surprising result, however, is that,
thanks to our infinite nonce types, we can prove equivalence for
an unbounded number of sessions, as detailed in the next section.
6.2 Typing replicated processes
For more clarity, in this section, without loss of generality we
consider that for each infinite nonce type τ l,∞
m appearing in the
processes, the set of names BN contains an infinite number of
fresh names {mi
| i ∈ N} which do not appear in the processes
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA417Γ(k) = keyHH(T)
Γ(x) = LL
Γ ⊢ dec(x, k) : T
Γ(k) = keyLL(T)
Γ(x) = LL
(DDecH)
(DDecL)
Γ ⊢ dec(x, k) : LL
Γ(x) = (T)k
Γ ⊢ dec(x, k) : T
(DDecT)
Γ(k) = keyHH(T)
Γ(x) = LL
Γ ⊢ adec(x, k) : T ∨ LL
Γ(k) = keyLL(T)
Γ(x) = LL
(DAdecH)
(DAdecL)
Γ ⊢ adec(x, k) : LL
Γ(x) = {T}k
Γ ⊢ adec(x, k) : T
(DAdecT)
Γ(k) = keyHH(T)
Γ(x) = LL
Γ ⊢ checksign(x, vk(k)) : T
Γ(k) = keyLL(T)
Γ(x) = LL
Γ ⊢ checksign(x, vk(k)) : LL
we define its expansion to n sessions, denoted [ T ]n, as follows.
[ l ]n = l
[ T ∗ T ′ ]n = [ T ]n ∗ [ T ′ ]n
[ T + T ′ ]n = [ T ]n + [ T ′ ]n
= keyl([ T ]n)
(cid:104) keyl(T)(cid:105)n
(cid:3)n = ([ T ]n)k
(cid:2) (T)k
(cid:3)n = {[ T ]n}k
(cid:2) {T}k
(cid:75)(cid:105)n
(cid:104)(cid:74)τ l,1