at instruction [10] is ignored by Howard in light of the
ﬁeld accesses at instructions [14] and [15], leading to
the correctly recovered type for the heap structure. However,
Howard employs a number of heuristics to tolerate the var-
ious code patterns induced by compiler optimizations. For
example,
it does not consider rsp+0x8 as a valid base
address. As such, Howard mis-classiﬁes offsets rsp+0x8
and rsp+0x10 as two separate variables local_8 and
local_10 as in Figure 2. This illustrates the difﬁculty of
devising generally applicable deterministic heuristics due to
the complex behaviors of modern compilers. A heuristic rule
being general in one case may become too strict in another
case.
Angr [11] is a state-of-the-art open-sourced binary analysis
infrastructure, which is widely used in academia and indus-
try. Its variable recovery does not rely on either static or
dynamic analysis. Instead, it leverages its built-in concolic
execution engine which combines symbolic execution [76]
and forced execution [77], [78] to recover variables and their
data-ﬂow. Despite the more precise basic information (e.g.,
data-ﬂow), Angr’s variable recovery and type inference are
not as aggressive as a few other techniques, especially in the
presence of conﬂicting results. Hence, in Figure 2, the current
implementation of Angr cannot recognize the structure on the
heap or on the stack. In our experiment (Section VI), Angr
achieves 33.04% precision and 59.27% recall.
B. Example for Primitive Analysis Facts Collected by BDA
the ﬁrst
Consider the motivation example in Figure 1b and as-
sume the function huft_build was sampled 10 times.
Thus,
instruction [01] was executed 10 times. As rsp
region Shuft_build, we have
stores the base address of
Access(01,(cid:104)(cid:104)Shuft_build, 8(cid:105) , 8(cid:105) , 10) for
instruc-
instruction [08], malloc is called to re-
tion. At
represented by Malloced-
quest 16 bytes of memory,
Size(08, 16). After
that, malloc returns the base ad-
dress of heap region H08 and stores it
to rax. Instruc-
tion [09] further stores this address to [rsp]. Hence
we get PointsTo((cid:104)(cid:104)Shuft_build, 0(cid:105) , 8(cid:105) ,(cid:104)H08, 0(cid:105)). Instructions
[10] and [11] copy value from rsp+0x8 to rax,
generating MemCopy((cid:104)(cid:104)Shuft_build, 8(cid:105) , 16(cid:105) ,(cid:104)(cid:104)H08, 0(cid:105) , 16(cid:105)).
Instruction [15] accesses rcx+0x8 where rcx is the
(cid:104)H08, 0(cid:105), we have
base register holding the value of
BaseAddr(15,(cid:104)(cid:104)H08, 8(cid:105) , 8(cid:105) ,(cid:104)H08, 0(cid:105)).
C. Example for Deterministic Inference
In Figure 15, we use a customized string copy function
to demonstrate the deterministic reasoning procedure, with
the source code in Figure 15a. Lines 1-4 deﬁne a struct
(a) Source code
(b) Memory regions (boxes), chunks (entries in box), and relations (arrows)
Fig. 15: Example for deterministic reasoning
str_t that consists of an int ﬁeld n and a char *
ﬁeld buf, indicating the string’s length and memory loca-
tion, respectively. Lines 6-10 deﬁne a my_print() func-
tion that prints a str_t structure to stdout. Function
my_strcpy() copies src to a heap-allocated dst (lines
12-16), and then prints the two strings (lines 17-18). Note
that we use source code to illustrate for easy understanding,
while OSPREY works on stripped binaries.
the lower green box, and all
Assume BDA samples my_strcpy() 3 times, and
src->n equals to 1, 2, and 3,
in the respective sample
runs. Assume sizeof (char)=8. Figure 15b illustrates the
regions (denoted by the colored boxes), the memory chunks
in regions from all three runs (denoted by the entries inside
the colored boxes), and the derived relations (denoted by
the arrows). For example,
the lower-right
relation Access(13,(cid:104)(cid:104)Hs, 0(cid:105) , 8(cid:105) , 3).
a
indicates
corner
Observe that all
the accessed ﬁelds of src locate in
region Hs,
the accessed
elements in src->buf locate in region Hb,
the upper
line 12, function malloc’s parameter is
green box. At
leading to relation ConstantAllocSize(12, 16).
always 16,
line 13 only accesses a memory
Expression src->n at
chunk (cid:104)Hs, 0(cid:105),
In
contrast,
accessed addresses src->buf[i]
from the
AccessMultiChunks(16,Hb),
at
line
16, we
HiAddrAccessed(16,Hb,(cid:104)Hb, 16(cid:105)),
LoAddrAc-
cessed(16,Hb,(cid:104)Hb, 0(cid:105)),
and MostFreqAddAccessed(16,
Hb, (cid:104)Hb, 0(cid:105), 3) denoting the most frequent accessed address
is (cid:104)Hb, 0(cid:105), i.e., src->buf[0] (accessed three times in the
three sample runs).
leading to AccessSingleChunk(13,Hs).
the arrow at
have
and
Consider the my_print() function, where line 7 ac-
cesses both (cid:104)Hs, 0(cid:105) and (cid:104)H12, 0(cid:105), with H12 the heap re-
gion allocated at 12, and line 8 accesses both (cid:104)Hs, 8(cid:105) and
(cid:104)H12, 8(cid:105) that have the same offset, indicating UniﬁedAccessP-
ntHint((cid:104)Hs, 0(cid:105), (cid:104)H12, 0(cid:105), 8). Intuitively,
the corresponding
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
828
01. typedef struct {02.   intn;03.   char*buf;04. } str_t;05.  06. voidmy_print(str_t*s) {07.   size_tn=s->n;08.   char*buf=s->buf;09.   write(1, buf, n);10. }11. str_t*my_strcpy(str_t*src) {12.   str_t*dst= malloc(sizeof(str_t));13.   intn = dst->n = src->n;14.   dst->buf= malloc(sizeof(char) * n);15.   for(inti= 0; ibuf[i] = src->buf[i];17.   my_print(src);18.   my_print(dst);19.   returndst;20. }*src():  ROUND 1 {.n = , .buf= }ROUND 2 {.n = , .buf= }ROUND 3 {.n = , .buf= }01. typedef struct {02.   intn;03.   char*buf;04. } str_t;05.  06. voidmy_print(str_t*s) {07.   size_tn = s->n;08.   char*buf= s->buf;09.   write(stdout, buf, n);10. }11. str_t*my_strcpy(str_t*src) {12.   str_t*dst= malloc(sizeof(str_t));13.   intn = dst->n = src->n;14.   dst->buf= malloc(sizeof(char) * n);15.   for(inti= 0; ibuf[i] = src->buf[i];17.   my_print(src);18.   my_print(dst);19.   returndst;20. }, 8>, 8>, 8>, 8>, 8>k=3i=13 Accessi=16 Accessk=3k=2k=1, 8>, 8>, 8>, 8>, 8>MemCopyMemCopyMemCopyi=07 Accessi=08AccessAccessMemCopyPointsTo𝓗14 (dst->buf)𝓗12 (dst)𝓗b (src->buf)𝓗s (src)𝑛𝑏𝑢𝑓𝑏𝑢𝑓[0]𝑏𝑢𝑓[1]𝑏𝑢𝑓[2]well. OSPREY also works well, but may misidentify very few
variables due to the infeasible paths produced by BDA.
Missing Data Structures. We ﬁnd that missing data structures
are mainly due to stack-nested structs that are never used
outside their stack frames. Consider the code snippet from
sha256sum in Figure 16a, where a stack-nested structure
SHA256 ctx is allocated on stack and used exclusively
within the function. As such, OSPREY cannot gather any
valuable hints about ctx. That is also the major reason that
OSPREY has relatively large tree difference for those hashing
binaries (e.g., sha256sum) in Figure 20 in Appendix.
Misidentiﬁed Data Structures. In our benchmarks, custom
heap allocators are a major source of misidentiﬁed data struc-
tures by OSPREY. Consider a simpliﬁed xmalloc from grep
in Figure 16b. Its basic allocation unit is called my_chunk,
consisting of a buffer buf and a pointer next. Different
from common pointers, my_chuck.next uses its last bit
to indicate whether this chunk is in use (in normal case,
the last bit is always zero due to memory alignment). Thus,
at line 5, xmalloc ﬁnds the ﬁrst chunk whose in-use bit
is not set, sets the bit, and returns the chunk. As a result,
my_struct.next can point to a struct my_struct
or char my_struct.buf[1] (both are common cases).
These confusing PointsTo hints misled OSPREY to falsely
recover unions. Other reasons include insufﬁcient hints.
and PrimitiveVar(v(cid:48)),
E. Example for Transforming A Probabilistic Constraint to A
Factor Graph
Let boolean variables x1, x2, and x3 denote PrimitiveVar(v),
PrimitiveAccess(i, v),
respectively.
p↑−→ x2, which denotes
Rules CA04 is transformed to x1
the probability function in Figure 17a. The probability
function for CA05 is similar. The two form a factor graph
in Figure 17b, which could be solved by belief propagation
algorithms with passing messages on it. For example, assume
the prior probabilities of CA04 and CA05 are both 0.8, and
we want to compute the marginal probability p(x3 = 1), that
is, the probability of v being of primitive type. As the factor
graph is a tree, we can call x3 the root node. Then message
passing starts from the leaf node x1. After messages reach the
root ﬁnally, the marginal probability of x3 can be computed.
The deﬁnition and computation of each message is shown as
follows.
F. Harden Stripped Binary
Exposing potential memory bugs is very important for
vulnerability detection. Address sanitizer (ASAN) [47], a
tripwire-based memory checker, can be used to increase the
likelihood of triggering a crash when a memory corruption
occurs. The principle of ASAN is to insert redzones at
the border of variables. Program crashes whenever an out-
of-bound access touches the redzone. The effectiveness of
ASAN is determined by the accuracy of identifying the
variable borders, which is very challenge if source code
or debugging information is not available. The state-of-the-
art binary-level ASAN solution (RetroWrite [48]) conducts
(a) Missing data structures
(b) Misidentiﬁed data structures
Fig. 16: Examples for missing and misidentiﬁed data structures
x1
x2
fCA04
0
0
1
1
0
1
0
1
p
p
1 − p
p
(a) Probability function for CA04
(b) Factor graph for CA04 and
CA05
Fig. 17: Factor graph example.
ﬁelds of two structures dst and src are accessed by the
same instructions, which implies the presence of structure.
Inside function my_strcpy(), we acquire a data-ﬂow hint
due to the copies from src to dst. Speciﬁcally, we have
DataFlowHint((cid:104)Hb, 0(cid:105), (cid:104)H14, 0(cid:105), 16). From the invocation
interface between my_strcpy() and my_print(), we
have PointsToHint((cid:104)Hs, 0(cid:105), (cid:104)H12, 0(cid:105), 16) because both the
base addresses of src and dst have been stored to the same
function parameter of my_print().
x1
fCA04 (x1, 0) ∗ mx1→fCA04
fCA04 (x1, x2) ∗ mx1→fCA04
(cid:88)
(cid:88)
(cid:88)
0.8 + 0.8 + 0.2 + 0.8 ∗ 1 =
(cid:88)
fCA04 (x1, 1) ∗ mx1→fCA04
fCA04 (x1, x2) ∗ mx1→fCA04
0.8 + 0.2
1
2.6
x1 ,x2
x1
x1 ,x2
(x1)
(x1)
(x1)
(x1)
=
1.6
2.6
0.8 + 0.8
0.8 + 0.8 + 0.2 + 0.8 ∗ 1 =
(cid:88)
=mfCA04
(cid:88)
→x2 (x2)
fCA05 (x2, 1) ∗ mx2→fCA05
fCA05 (x2, x3) ∗ mx2→fCA05
x2
(x2)
(x2)
x2 ,x3
= 0.65
1(cid:13) : mx1→fCA04
(x1)
= 1
2(cid:13) : mfCA04
→x2 (x2 = 0) =
=
mfCA04
→x2 (x2 = 1) =
3(cid:13) : mx2→fCA05
(x2)
4(cid:13) : mfCA05
→x3 (x3 = 1) =
D. Case Studies
Cases Where Ghidra and IDA Pro Do Better. There are few
cases where Ghidra and IDA Pro achieve better performance.
Further inspection reveals that those are very simple programs
without complex structures (e.g., struct or in-stack array),
where no conﬂict will occur during deterministic reasoning.
Hence, approaches like Ghidra and IDA Pro can handle them
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
829
unsigned longsha256(char *msg) {structSHA256 ctx; char *c = msg;... while(c) {ctx.S0= calculate0(ctx.S0, ctx.S1, c);ctx.S1 = calculate0(ctx.S0, ctx.S1, c);c = get_next_chunk(c);}returnfini(ctx.S0, ctx.S1);}  structmy_chunk{ charbuf[0x80]; structmy_chunk*next;}struct my_chunk*xmalloc() {structmy_chunk*cur = HEAD;while(cur->next & 1) cur = (cur->next ^ 1);   cur->next ^= 1;returnp;}  !"!#!$%&'()%&'(*1234TABLE II: Analysis results of Howard benchmark
Metric Program
Osprey
e
l
b
a
i
r