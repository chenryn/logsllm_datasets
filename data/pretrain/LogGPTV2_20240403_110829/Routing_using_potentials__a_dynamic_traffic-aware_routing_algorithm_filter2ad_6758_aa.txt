title:Routing using potentials: a dynamic traffic-aware routing algorithm
author:Anindya Basu and
Alvin Lin and
Sharad Ramanathan
Routing Using Potentials:
A Dynamic Trafﬁc-Aware Routing Algorithm
Anindya Basu
Bell Laboratories
Alvin Lin
MIT
Sharad Ramanathan
Bell Laboratories
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
We present a routing paradigm called PB-routing that utilizes steep-
est gradient search methods to route data packets. More speciﬁcally,
the PB-routing paradigm assigns scalar potentials to network elements
and forwards packets in the direction of maximum positive force. We
show that the family of PB-routing schemes are loop free and that
the standard shortest path routing algorithms are a special case of
the PB-routing paradigm. We then show how to design a potential
function that accounts for trafﬁc conditions at a node. The resulting
routing algorithm routes around congested areas while preserving the
key desirable properties of IP routing mechanisms including hop-by-
hop routing, local route computations and statistical multiplexing. Our
simulations using the ns simulator indicate that the trafﬁc aware rout-
ing algorithm shows signiﬁcant improvements in end-to-end delay and
jitter when compared to standard shortest path routing algorithms. The
simulations also indicate that our algorithm does not incur too much
control overheads and is fairly stable even when trafﬁc conditions are
dynamic.
Categories & Subject Descriptors: C.2.2 Routing Protocols.
General Terms: Algorithms.
Keywords: Congestion, Potential, Routing, Steepest Gradient, Trafﬁc
Aware.
1.
Introduction
Routing mechanisms in the Internet have typically been based on
shortest-path routing for best effort trafﬁc. This often causes trafﬁc
congestion, especially if bottleneck links on the shortest path severely
restrict the effective bandwidth between the source and the destination.
Traditionally, congestion control in the Internet has been provided
by end-to-end mechanisms. An example is the TCP congestion con-
trol mechanism that works by adjusting the sending rate at the source
when it detects congestion at a bottleneck link (for details, see [25]). If
multiple trafﬁc streams share the same bottleneck link, each gets only
a fraction of the bottleneck link bandwidth even though there may be
bandwidth available along alternate paths in the network. Moreover,
queueing delays at the bottleneck link can add signiﬁcantly to end-to-
end delays. Finally, varying trafﬁc conditions can make this queueing
delay variable, thereby adding to jitter.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
One way to address the problem of end-to-end delay and jitter is
to use trafﬁc engineering (TE) techniques in conjunction with circuit-
based routing. In this case, the routing process assumes that the trafﬁc
demands between source-destination pairs are known apriori and com-
putes end-to-end paths (circuits) satisfying the trafﬁc demands. End-
to-end circuits are then set up along the computed paths using a re-
source reservation protocol such as RSVP [13]. Data packets are now
source routed along these pre-computed paths.
There are some drawbacks to this kind of circuit-based routing.
First, if trafﬁc sources are bursty (which is mostly the case in the
Internet — see, for example, [21]), resources may be reserved un-
necessarily, thereby negating the beneﬁts of statistical multiplexing.
Second, trafﬁc demands between network nodes are hard to estimate
apriori. Also, if trafﬁc patterns change, it is possible that a global re-
computation is necessary to determine the most optimal routing. Third,
when future demands are unpredictable, it is difﬁcult to route current
demands such that a future demand has the maximum chance of be-
ing routed successfully without requiring the rerouting of existing de-
mands. Indeed, it can be shown that this problem is NP-hard even for
the simplest cases [12].
In this paper, we present an alternate methodology for trafﬁc-aware
routing that is based on steepest gradient search methods. We call this
methodology potential based routing, or PB-routing. It preserves the
hop-by-hop routing philosophy of the Internet, and does not require a
priori knowledge of trafﬁc demands between network nodes. At the
same time, PB-routing is able to route packets around the congested
hot-spots in the network by utilizing alternate routes that may be non-
optimal. This reduces end-to-end delays and jitter and increases the
bandwidth utilization in the network. Since packets are not source
routed, PB-routing can adapt to changes in trafﬁc conditions without
requiring any global recomputation of routes. Furthermore, end-to-end
resource reservation is not required — hence, the beneﬁts of statistical
multiplexing are still available. Note that PB-routing can only pro-
vide performance improvements of a statistical nature, and not explicit
worst-case bounds on delay and jitter (as opposed to TE techniques).
However, our simulations indicate that there is signiﬁcant improve-
ment in delay and jitter for most trafﬁc streams when PB-routing is
used.
The key idea in PB-routing is to deﬁne a scalar ﬁeld on the network,
which is used to deﬁne a potential on every network element (NE).
The routing algorithm at each NE now computes the route to the des-
tination as the direction (i.e., the next hop) in which the potential ﬁeld
decreases fastest (direction of maximum force or steepest gradient).
We show that by assigning the NE potentials differently, a whole fam-
ily of routing algorithms can be designed. For example, the standard
shortest path algorithm can be shown to be a special case of PB-routing
if the potential at each NE is set to be a linear, monotonically increas-
ing function of the shortest distance from the NE to the destination.
The routing algorithm can be made trafﬁc-aware by setting the poten-
tial at each NE to be a weighted sum of the shortest path potential and
a metric that represents the trafﬁc potential at the NE. We show how to
deﬁne such a metric later in the paper.
More intuitively, the PB-routing algorithm views the entire network
as a terrain, with many negotiable obstacles created by congestion.
The high obstacles represent areas of the network with high congestion
(and therefore, high potential). The idea is to ﬁnd a path from the
source to the destination by avoiding the high obstacles as much as
possible.
Since PB-routing depends on trafﬁc information at the various NEs,
it is necessary that this information be disseminated efﬁciently without
compromising end-to-end packet delays and jitter. In our simulations,
we adapt a link-state routing protocol for this purpose. We also de-
scribe an optimization that signiﬁcantly reduces the control overheads
of this protocol without sacriﬁcing the performance of the routing al-
gorithm.
The main contributions of this paper are as follows. While steep-
est gradient search methods have been well-studied, the novel idea
in this paper is the design of a potential ﬁeld for trafﬁc-aware rout-
ing that guarantees desirable properties such as loop-free routing. We
demonstrate that our design of a potential function, which is a hybrid
of trafﬁc metrics and link costs, ensures that packets avoid congested
areas but do not traverse the network using random walks.
In fact,
how far the path of a packet deviates from the standard shortest path
can be controlled by a conﬁgurable parameter. In our simulations, we
have observed signiﬁcant improvements in end-to-end delay and jit-
ter over a variety of networks and trafﬁc conditions without requiring
too much control overheads. We believe that the general framework
of PB-routing could be adapted for optimizing various other metrics
through careful design of potential functions. This is especially true
of overlay networks (see, for example, [2]) where application speciﬁc
metrics that require optimization could be converted into appropriate
potential functions.
The rest of the paper is organized as follows. In the next section,
we describe the PB-routing model in greater detail and prove some
of its properties analytically. This is followed by Sections 3 and 4
where we describe our implementation of trafﬁc-aware routing using
the PB-routing paradigm and evaluate its performance. We then de-
scribe related work in Section 5 and conclude in Section 6.
2. The PB-routing Paradigm
In this section, we present the key theoretical ideas underlying the
PB-routing paradigm. We emphasize here that the PB-routing paradigm
represents a family of network routing algorithms. Hence, we ﬁrst
provide a description of the generic PB-routing algorithm. Using this
generic formulation, we prove the key properties that are common to
all the algorithms in the PB-routing family. We then describe two spe-
ciﬁc instantiations of the PB-routing paradigm. The ﬁrst instantiation
is the standard shortest path algorithm — we refer to this as SPP. We
then show how SPP can be modiﬁed to be trafﬁc-aware (called the
PBTA algorithm) and analyze its desirable properties.
System Model. In order to describe the PB-routing paradigm, we
ﬁrst need to deﬁne some terminology and a system model. We model
a network of nodes connected by bidirectional links as a directed graph
G = (N; E). The set of nodes in the network is represented by the
set of vertices N in G. Similarly, the set of edges E in G corresponds
to the set of links in the network, where euv is a directed edge from
vertex u to vertex v with cost metric cuv that is strictly positive. Since
the network links represented by the edges in E are bidirectional, it
is easy to see that if edge euv  E, then evu  E. For the rest of
this paper, we shall use the terms nodes (links) and vertices (edges)
interchangeably. Each node v can act as a trafﬁc source and/or sink.
Furthermore, every node v has a set of Z(v) neighbors denoted by
nbr(v). Thus, the indegree and outdegree of any node v are both equal
to Z(v).
2.1 Routing with Potentials
The PB-routing paradigm deﬁnes a scalar ﬁeld on the network over
which packets are routed. The potential at any node v is a function of
v and the destination d for which we need to ﬁnd a route. More for-
mally, with each node v (and destination d), we associate a potential
V d(v) that is single-valued. Note that if the destination d changes, the
potential function for v changes as well. We prove all the properties
of PB-routing assuming that the destination d is ﬁxed. Since the po-
tential functions for different destinations are independently deﬁned, it
follows that our assumption about a ﬁxed destination is not restrictive.
For the rest of this paper, we shall use V (v) to denote the potential at
a node v when the destination is clear from the context.
Now consider a packet p at a node v whose destination is node d.
In order to reach d, p must be forwarded to one of the Z(v) neighbors
of v. To determine this “next hop” neighbor, we deﬁne a “force” on
the packet p at v based on the potentials at v and its neighbors. For a
neighbor w  nbr(v), we can deﬁne the force Fv!w as the discrete
derivative of V with respect to the link metric as
Fv!w =
(V (v) (cid:0) V (w))
cvw
(1)
The packet p is now directed to the neighbor x  nbr(v) for which the
force Fv!x is maximum and positive. In other words, each packet fol-
lows the direction of the steepest gradient downhill to reach its destina-
tion. We now prove the following general property of the PB-routing
paradigm.
THEOREM 2.1. The PB-routing paradigm is loop-free if the poten-
tial function V (v) is time invariant.
Proof: We prove this by contradiction. Consider a packet p that is
routed along a closed loop on the network, beginning and ending at
node v. Let this closed loop be the directed path v = v  ! v !
v ! (cid:1) (cid:1) (cid:1) ! vk(cid:0) ! v  = v. For p to be routed along this path,
the work done deﬁned by the forces in equation (1) must be strictly
positive. This is because the routing algorithm always directs packets
in the direction of the maximum positive force. More formally,
k(cid:0)
Xi= 
Fvi!v(i+) mod k (cid:1) cvi v(i+) mod k >  
Using equation (1), we get
k(cid:0)
Xi= 
V (vi) (cid:0) V (v(i+) mod k) >  
(2)
(3)
Since V (v) is a time invariant, single valued function of v, the LHS of
equation (3) must be identically zero, which is a contradiction. Hence,
the PB-routing paradigm is loop-free as long as the potential function
is single-valued and time invariant.
Now consider any packet p at a node v. Since p always moves in
the direction of the maximum positive force, p will be forwarded to a
neighbor w that satisﬁes the following
V (v) (cid:0) V (w) >  
However, this is not possible if v is a local minima,1 i.e., we have
w  nbr(v) V (v) (cid:0) V (w)   , is a single-valued, monotonically in-
creasing, linear function of x. To reach destination d, a packet p at
node v selects the next hop w  nbr(v) such that the force
Fv!w =
V (Dvd) (cid:0) V (Dwd)
cvw
(7)
is maximum and positive. It is now easy to see that SPP is loop-free
by Theorem 2.1 in the absence of topology changes since the potential
function V is single-valued and time invariant everywhere.
To show that each packet p eventually gets to its destination if SPP
is used, we ﬁrst prove the following lemma.
LEMMA 2.3. The potential function V has no local minima.
Proof: The proof is by contradiction. Let v be a node that has a local
minima. In other words, we have
cvu + Dud = Dvd (cid:20) cvw + Dwd
Dvd (cid:0) Dwd
cvw
(cid:20) 
Dvd (cid:0) Dud
cvu
= 
and
Using equations (13) and (14), we get
Dvd (cid:0) Dud
cvu
(cid:21)
Dvd (cid:0) Dwd
cvw
Using equation (15) and the fact that V (x) is a monotonically increas-
ing linear function of x, we conclude that
V (Dvd) (cid:0) V (Dud)
cvu
(cid:21)
V (Dvd) (cid:0) V (Dwd)
cvw
(16)
In other words, the force in the direction of u is maximum and positive.
Therefore, SPP chooses u as the next hop. Note that we make the
implicit assumption here that if there are multiple paths with the same
minimum cost, both algorithms use the same deterministic procedure
to break ties.
COROLLARY 2.5. Let V be of the form V (x) = ax + b; a >  .
Then, for any node v, and a node u  nbr(v), we have V (Dvd)(cid:0)V (Dud)
a.
cvu
(cid:20)
It is now easy to see that SPP simulates the standard shortest path
routing. We know that both the algorithms compute the same next hop
at every node for every packet with destination d. Thus, every packet
from source s to destination d follows the same sequence of links in
both cases. Therefore, we have the following property
w  nbr(v) V (Dvd) < V (Dwd)
(8)
THEOREM 2.6. SPP correctly simulates the standard shortest path
Since v is a monotonic increasing function of Dwd, equation (8) im-
plies that
w  nbr(v) Dvd < Dwd
(9)
Now let u be the next hop on the shortest path from v to d. Then, using
the properties of the shortest path computation algorithms, we have
Dvd = cvu + Dud
(10)
where cvu represents the cost metric for the link evu. However, since
u  nbr(v), using equation (9), we have
Dvd < Dud
(11)
Using equations (10) and (11), we conclude that cvu <   which con-
tradicts the assumption that link metrics are strictly positive.
Now consider the destination d. Using the fact that link metrics are
strictly positive, and that V is a monotonically increasing function, we
have V (Ddd) = V ( ) < V (Dvd), where v  N and v = d. We
therefore conclude that the potential function has a minimum at the
destination, and no other local minima. Using Lemma 2.2, we assert
that every packet p is guaranteed to eventually reach its destination.
Finally, we show that SPP does indeed route using the shortest path.
To prove this property, we use the following lemma.
LEMMA 2.4. For any node v, and destination d, if the next hop
computed by the shortest path algorithm is u, then the next hop com-