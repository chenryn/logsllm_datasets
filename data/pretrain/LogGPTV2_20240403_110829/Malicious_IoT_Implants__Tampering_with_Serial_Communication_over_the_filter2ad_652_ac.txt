similar goals for ﬁnancial and political proﬁt. All these groups are likely to be
experienced in covert operations, and have the potential to access target devices
in the supply chain.
4 Malicious IoT Implant
4.1 Design Criteria
To achieve its objectives, the attacker has certain design criteria regarding the
malicious IoT implant: 1 Small Dimensions: Size is a constraint as the implant
has to be hidden inside the enclosure of the target device. In addition, small
dimensions of an implant make detection harder. 2 Wireless Connectivity: If
the implant should be remotely controlled, it requires a radio transceiver. This
transceiver should provide a communication interface to an LPWAN infrastruc-
ture such that physical presence of the attacker is not required. 3 Access to
Serial Communication: The implant acts as a legitimate participant on the serial
bus and is able to eavesdrop on legitimate transactions and to insert malicious
transactions. 4 Invisibility: The implant does not inﬂuence the normal mode of
operation except during an active attack. 5 Low-Power: The implant is either
Malicious IoT Implants
543
powered by an external power source, i.e., battery or accumulator, or supplied
with power from the target device. To increase the lifetime of the implant as
well as the target device, the implant should consume as less energy as possible.
6 Low-Cost: The implant should be designed in a low-cost way using mainly
oﬀ-the-shelf components.
To the best of our knowledge, we are the ﬁrst (in a scientiﬁc context) that
design and implement an implant, which fulﬁlls all of these design criteria.
4.2 Attack Procedures
To achieve the attacker’s high-level objectives, we propose hardware-level attacks
that interfere with the communication on the serial bus. To perform these pro-
cedures, the implant must be connected to the SDA and SCL signal lines of the
target device.
Eavesdropping. Eavesdropping is a passive attack in which the implant
observes and stores data that is transmitted on the I2C bus. This data can
then be relayed to the attacker via the wireless interface of the implant.
Denial-of-Service. A DoS disables all communication on the I2C bus. A mali-
cious IoT implant can perform such an active attack by permanently pulling
the SDA and SCL lines to a low voltage state. As a result, no further data
can be transmitted on the bus. All other bus participants have to wait until
the implant releases the signal lines.
Injection of Transactions. In this active attack, the implant acts as additional
master on the bus. Most implementations oﬀer time gaps between transac-
tions, in which the masters and slaves are in idle state. The implant has the
chance to execute own transactions on the bus during this period of time. The
injection of own transactions allows to perform further implicit attacks: (a)
Read out memory and conﬁgurations: The implant can read out data from
memory chips as well as the conﬁgurations of slaves. These information can
then be exﬁltrated to the attacker via the wireless interface. (b) Reconﬁgura-
tion: The implant can send commands to modify the conﬁguration of slaves
consistently. For example, a pre-conﬁgured threshold can be altered or, in
some cases, a slave could be completely disabled. This ultimately allows for
slave impersonation attacks, in which the implant responds to messages of
the legitimate master instead of the disabled slave.
On-The-Fly Bit Modiﬁcation. Whenever a logical 1 is sent on the I2C bus,
the transmitting IC releases the SDA signal. A pull-up resistor connected to
SDA then pulls the voltage of the signal to high level and the next clock
signal carries the bit value. As an active attack, the implant can utilize this
idle state to pull the SDA signal to low level, which results in the transmission
of a logical 0 instead of the sent logical 1 on the bus. Due to the electronic
characteristics of the I2C bus, a modiﬁcation of logical 0 to logical 1 is not
possible.
544
P. Morgner et al.
Fig. 2. Components of the malicious IoT implant: (1) indicator LED, (2) power con-
verter, (3) I/O interface for serial bus signals (SDA, SCL) and power supply (VCC,
GND), (4) removable programming and debug interface, (5) MCU, (6) wired monopole
antenna, (7) LoRa radio transceiver.
4.3
Implementation
Wireless Connectivity. We use the LoRa technology (cf. Sect. 2.1) as wireless
communication interface for the implant. Competing LPWAN standards to LoRa
[1] exist, such as SigFox, Weightless, and LTE Narrowband IoT, but they are
currently not supported by such a large community of industrial and private
partners as LoRa. However, the presented attacks could also be facilitated using
one of these LPWAN technologies.
TTN acts as service provider to connect the implant to the Internet using
LoRa communication. Application builder can register an account at the TTN
website and get access to the network infrastructure in order to connect to their
deployed IoT nodes via LoRaWAN. An account can be created easily using a
user name, email address and password. The purpose of the application is not
checked by TTN.
Hardware Architecture. The hardware architecture of the implant consists of a
PCB that is equipped with various ICs as shown in Fig. 2. The implant can be
connected to a power source that provides an input voltage between 3.3 V and
16 V. Power can be supplied via the VCC and GND pads, either from the target
device or using a battery.
The front side of the implant features a power converter, an I/O interface, an
MCU, a number of capacitors, as well as an optional indicator LED. This LED
is activated when the implant is supplied with power and blinks each time a
LoRa message is sent or received. The MCU STM32F303CBT6 [39] contains an
ARM Cortex-M4 core and 128 Kbytes of Flash memory. The radio transceiver
RFM95W-868S2 [14] is mounted on the backside of the implant. This mod-
ule supports the LoRa technology and uses the 868 MHz frequency band. We
soldered a simple wired monopole antenna of length 86.4 mm (quarter of the
868 MHz wave length) to the transceiver.
For programming and debugging of the implant, a serial wire debug (SWD)
interface is added to the implant. This interface can be physically removed
Malicious IoT Implants
545
(through breaking or cutting oﬀ) after the ﬁnal version of ﬁrmware is installed
on the implant.
Software Architecture. The software architecture is based on the STM32CubeMX
platform [40] that includes the hardware abstraction layer and the link layer
for the MCU. The real-time operating system FreeRTOS builds on top of this
vendor-speciﬁc platform. A number of libraries is installed: The board support
package provides drivers for the interfaces of the implant. The LMiC library [21]
implements the LoRaWAN stack, and communicates with the LoRa module. The
Arduino JSON library is used to decode and encode messages received within
the payload of the LoRa messages. On top, so-called ‘tasks’ are deﬁned. For
example, the ‘attack task’ implements the attack procedures, while an ‘LED task’
deﬁnes the state of the indicator LED. The implant is registered as application
belonging to the TTN account of the attacker and can be operated via the TTN
web console.
5 Evaluation
Dimensions. Small dimensions are crucial in order to insert the implant into
arbitrary target systems, and furthermore, to avoid visual detection. The implant
has a size of 19.5× 17.8 mm and a height of 4.5 mm. We measured the weight
of the implant to be 3 g. Note that these dimensions are measured without the
debug header, antenna, and wires connected to the target. We assert that the
dimensions of the implant are small enough for many threat scenarios, in which
the enclosure provides a suitable amount of space. We assume that the layout
of malicious IoT implants can be further minimized if we waive the usage of
oﬀ-the-shelf hardware components.
Power Consumption. The malicious IoT implant has to be powered either by the
power supply of the target device, or using an external battery. We determined
that the power consumption of the implant during sleep mode (i.e., radio is duty
cycling) is 110 µA for 3.3 V input voltage, while the implant consumes around
42 mA in attack mode (i.e., radio listens continuously). For comparison: a regular
3.7 V Lithium polymer battery with a capacity of 2000 mAh supplies an implant
in sleep mode for more than two years, or 176 h in attack mode. Thus, attackers
can wake a sleepy implant even months after the insertion into the target device.
Wireless Range. The wireless range determines from which distance an attacker
is able to remotely control a malicious IoT implant. Also, it indicates in which
areas the implant has coverage by an LPWAN. The implant utilizes the LoRa
technology, which achieves a wireless range of 2–5 km in urban areas and up to
15 Km in sub-urban areas [1]. It is hard to make general statements about the
wireless range of the implant as the propagation of radio waves depends on many
variables, e.g., the enclosure of the target device, building structures and walls,
nearby electrical installations, as well as other deployed wireless networks that
interfere with the LoRa frequency bands.
546
P. Morgner et al.
Cost. Once we have the ﬁnal schematics, we are able to build a batch of 10
implants for the hardware costs of approximately 194 Euros. The cost per unit
decrease with an increasing batch size: For a batch size of 100 units, the hardware
cost add up to around 1075 Euros. Thus, we can build a malicious IoT implant
using mainly oﬀ-the-shelf components for less than 11 Euros per unit (assuming
a batch size of 100 units). These costs comprise the customized PCB as well as all
electronic components including MCU, radio transceiver, LED, power converter,
and capacitors. Not included are laboratory equipment, labor costs, shipping
costs, and consumable materials.
5.1 Eﬀort of Insertion
The procedure of implanting malicious hardware into the target device consists of
three steps: identifying access points on the PCB, analyzing the communication
on the bus, and inserting the implant into the device.
In the ﬁrst step, we open the case of the target device and look whether there
is enough space to insert the implant. If so, we identify the PCBs and list the
descriptors of all ICs. Then, we search for the datasheets of these ICs on the
Internet. The identiﬁcation of ICs on a PCB can also be automated using image
recognition [19]. A datasheet usually contains a feature description as well as a
pin layout, which we use to identify ICs that support I2C. After we conﬁrm that
an IC supports I2C, we check whether the I2C pins are used. Optical indications
are signal lines on the PCB that are connected to these pins. Then, we look for
suitable solder points on the PCB where we can later attach the wires to the
implant. It is not advisable to directly solder the wires onto the pins of an IC
since this requires a very precise way of working and can easily lead to damages
or electrical shorts with neighboring pins. Good access points are larger solder
joints, for example, at surface-mounted capacitors or at through-hole connec-
tions. As second step, we use a logic analyzer to inspect the communication
on the bus. Using logic diagrams, we identify the ICs that communicate with
each other, the bus frequency, and the transmitted data (datasheets might help
again). As a result, we conﬁgure the software of the implant accordingly. In
the third step, we solder wires onto the access points after we have removed
the power supply and batteries. Then, we attach the wires to the implant. If
required, we ﬁxate the implant within the target device such that the antenna
does not touch other electronic parts. We supply the target device with power
again, and if the insertion was successful, the indicator LED on the implant
turns on. In addition, we test whether the implant can be remotely controlled.
Finally, we close the casing of the target device and try to remove all traces of
this modiﬁcation procedure.
The danger of damaging the PCB boards during the insertion of the implant
is low if we take standard precautions: The process of insertion should be per-
formed in an electrostatic discharge protected area. In this area, all conductive
materials and workers are grounded and mechanisms to prevent the build-up of
electrostatic charges should be in place. Furthermore, the power supply needs
to be safely removed to prevent electrical shorts. Then, the danger of damaging
Malicious IoT Implants
547
the target device is mainly reduced to the threat of thermal inﬂuences on the
ICs from the soldering process and physical damages.
In the physical distribution process, time is crucial. Thus, the time to insert
the implant into the target system should be appropriate. If we want to insert
the implant into a large batch of similar target devices, the customization of the
implant is only required once. From our experience, the process of customization
can add up to a few hours. The insertion process needs to be performed for each
target device. In our experiments, the manual inserting of the implants takes a
few minutes, in some cases we were even able to insert the implant within less
than a minute.
5.2 Feasibility of Attacks
We demonstrate the feasibility of the attacks outlined in Sect. 4.2 through insert-
ing the malicious IoT implant into three exemplarily target devices: One eval-
uation board and two real-world products. We selected the real-world products
through searching online in databases of disassembled products, e.g., iFixit, for
security- and safety-relevant devices that indicate the usage of I2C communica-
tion.
Evaluation Board. The ﬁrst hardware platform is an evaluation board that was
speciﬁcally designed to test the implementation of the implant. It imitates a mon-
itoring application that observes the temperature of an industrial manufacturing
process. If the temperature exceeds or undercuts a preconﬁgured threshold, an
alarm is triggered and the light of an LED diode warns the operator. From a
technical perspective, the MCU reads temperature sensor data from the regis-
ters of the sensor via I2C, and shows the value on an LCD display. The lower
and upper bounds of the temperature threshold are stored in the registers of the
temperature sensor.
After attaching the implant to the SDA and SCL solder pads of the evaluation
board, we are able to perform all attacks described in Sect. 4.2. During sleep
mode, the implant does not interfere with the normal operation of the evaluation
board. In attack mode, the implant eavesdrops the current temperature values
as well as the threshold conﬁguration, which both are requested multiple times
per second by the MCU. The implant then relays these values to the attacker’s
operator interface. Upon receiving the DoS command from the attacker, the
implant disables all communication on the bus. On the target device, the MCU
cannot read data from the sensor anymore and throws an exception, which results
in a bus error message on the display. Furthermore, the implant can inject own
transactions to read the data stored in the registers of the sensor, and to write
new values to the registers. This way, the attacker is able to reconﬁgure the
threshold that triggers the alarm. Finally, we are able to manipulate legitimate
temperature values on the bus by performing the on-the-ﬂy bit modiﬁcation
attack. Exemplary, we changed one bit of a temperature value byte such that the
bus transferred 0x0F instead of 0x8F. As a result, the MCU reads a temperature
of 15.9 ◦C instead of 28.9 ◦C.
548
P. Morgner et al.
(a) Cash box
(b) Drone (implant with debug header)
Fig. 3. Malicious IoT implant (green PCB) inserted into exemplary devices.
Cash Box. As a second hardware platform, we inserted the implant into a First
Alert 3040DFE cash box that allows access by entering a pin into an electronic
pin pad. Each time a pin is entered into the pin pad, the MCU uses I2C com-
munication to read the master pin stored in an EEPROM. If the entered pin
matches the master pin, the content of the cash box can be accessed. The mas-
ter pin is set by pushing a red button that is located inside the cash box, and
then entering the new master pin two times into the pin pad. Assuming that
the attacker inserts the implant at some point during the physical distribution
process, the attacker is later able to eavesdrop and set the master pin, and thus,
to access the content of the box. As shown in Fig. 3a, we attached the SDA and
SCL wires of the implant to solder points of a pull-up resistor and the reset
button, respectively. To supply the implant with power, we attached the VCC
and GND wires to solder points connected to the batteries of the cash box. The
enclosure of the cash box provides plenty of space for the implant and a wired
monopole antenna. Controlling the implant from the operator interface, we per-
formed eavesdropping, DoS, and the injection of transactions. First, the attacker
is able to monitor the bus to retrieve the master pin that is requested by the
MCU each time a pin is entered into the pin pad. The implant then exﬁltrates
the master pin via the wireless interface. In addition, the implant can disable all
I2C communication upon receiving a DoS command from the attacker. Then, the
MCU cannot read the master pin from the EEPROM anymore, and thus, does
not unlock the cash box. Through the injection of own commands, the attacker
can then read the master pin from the EEPROM and also set this pin to an
arbitrary value. During sleep mode, the implant does not inﬂuence the normal
operation of the cash box.
Drone. We used a Syma X5C-1 drone as third hardware platform to evaluate the
malicious IoT implant. The drone features a gyroscope and accelerometer sensor
that stabilizes the drone during ﬂights. An MCU reads data from this sensor
every 3 ms using I2C communication, and subsequently adjusts the individual
speed of the four rotors according to its ﬂight position. As depicted in Fig. 3b, we
attached the SDA and SCL wires of the implant to a pin of the MCU as well as
Malicious IoT Implants
549
a pin of the sensor. Also, we attached the GND and VCC wires to solder points
that are connected to the battery power supply of the drone. The body of the
drone provides enough space for the implant and its antenna. Also, the drone is
capable of carrying the implant without any eﬀects on its ﬂight characteristics.
During sleep mode, the implant does not aﬀect the normal operation of the
drone. We performed eavesdropping and DoS attacks on the drone. Using the
implant, the attacker can eavesdrop on the sensor data that is requested by the
MCU. This sensor data contains triple-axis angular rates as well as triple-axis
accelerometer data. Parts of these aggregated information can be sent to the
attacker in regular intervals. Upon receiving a DoS command from the attacker,
the implant blocks the I2C bus through pulling both lines to low. The MCU of
the drone cannot read data from the gyroscope and accelerometer, and thus, the
speed of the rotors is not adjusted anymore. In consequence, the ﬂight position