  undefined (*pbIV) [16];
  undefined (*pbOutput) [16];
  undefined (*pauVar2) [16];
  undefined (*pauVar3) [16];
  uint local_res18 [2];
  uint local_res20 [2];
  ULONG local_58;
  ULONG local_54;
  BCRYPT_HANDLE local_50;
  BCRYPT_KEY_HANDLE local_48 [2];
  pbIV = (undefined (*) [16])0x0;
  local_50 = (BCRYPT_HANDLE)0x0;
  local_48[0] = (BCRYPT_KEY_HANDLE)0x0;
  local_res20[0] = 0;
  local_54 = 0;
  local_58 = 0;
  local_res18[0] = 0;
  pauVar3 = (undefined (*) [16])0x0;
  pauVar2 = (undefined (*) [16])0x0;
  NVar1 = BCryptOpenAlgorithmProvider(&local_50,L"AES",(LPCWSTR)0x0,0);
  pbOutput = pbIV;
  pbKeyObject = pbIV;
  if (-1 
  C Code
```c
#include 
#define WIN32_NO_STATUS
#include 
#undef WIN32_NO_STATUS
#include 
#include 
#include 
#include 
#include 
#include 
#pragma comment(lib, "bcrypt.lib")
#define SECRET "whothefuckisalice"
void
ReportError(
    _In_	DWORD       dwErrCode
)
{
    wprintf(L"Error: 0x%08x (%d)\n", dwErrCode, dwErrCode);
}
int main()
{
    NTSTATUS            Status;
    BCRYPT_ALG_HANDLE   AesAlgHandle = NULL;
    SIZE_T              NumberOfBytes = 0;
    PUCHAR              KeyObject = NULL;
    SIZE_T              Size;
    BCRYPT_KEY_HANDLE   KeyHandle = NULL;
    UCHAR               secret[32] = { 0 };
    DWORD               PlainTextLength = 0;
    PUCHAR              PlainText = NULL;
    memset(secret, 0, sizeof(secret));
    strncpy_s(secret, sizeof(SECRET), SECRET, sizeof(secret));
    BYTE IV[] =
    {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    };
    BYTE CipherText[] =
    {
        0x74, 0xF8, 0x14, 0x89, 0x7D, 0x5A, 0xC9, 0xC0, 0x53, 0x01, 0xFD, 0x99, 0x22, 0xC3, 0xAC, 0x84, 0xFD, 0xFB,
        0x43, 0x12, 0xFF, 0x39, 0xAB, 0x49, 0xEE, 0x39, 0xE5, 0x80, 0xC1, 0xF5, 0x16, 0x0C
    };
    Status = BCryptOpenAlgorithmProvider(
        &AesAlgHandle,              // Alg Handle pointer
        BCRYPT_AES_ALGORITHM,       // Cryptographic Algorithm name (null terminated unicode string)
        NULL,                       // Provider name; if null, the default provider is loaded
        0);                         // Flags
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    Status = BCryptGetProperty(
        AesAlgHandle,               // Handle to a CNG object
        BCRYPT_OBJECT_LENGTH,       // Property name (null terminated unicode string)
        (PBYTE)&NumberOfBytes,      // Addr of the output buffer which recieves the property value
        sizeof(NumberOfBytes),      // Size of the buffer in the bytes
        (char*)&NumberOfBytes + 4,  // Number of bytes that were copied into the buffer
        0);                         // Flags
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    KeyObject = malloc((unsigned int)NumberOfBytes);
    Status = BCryptGetProperty(
        AesAlgHandle,               // Handle to a CNG object
        BCRYPT_BLOCK_LENGTH,        // Property name (null terminated unicode string)
        (PBYTE)&Size,               // Addr of the output buffer which recieves the property value
        sizeof(NumberOfBytes),      // Size of the buffer in the bytes
        (char*)&NumberOfBytes + 4,  // Number of bytes that were copied into the buffer
        0);                         // Flags
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    Status = BCryptSetProperty(
        AesAlgHandle,               // Handle to a CNG object          
        BCRYPT_CHAINING_MODE,       // Property name(null terminated unicode string)
        BCRYPT_CHAIN_MODE_CBC,      // Address of the buffer that contains the new property value 
        32,                         // Size of the buffer in bytes
        0);                         // Flags
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    Status = BCryptGenerateSymmetricKey(
        AesAlgHandle,                // Algorithm provider handle
        &KeyHandle,                  // A pointer to key handle
        KeyObject,                   // A pointer to the buffer that recieves the key object;NULL implies memory is allocated and freed by the function
        (unsigned int)NumberOfBytes, // Size of the buffer in bytes
        (PBYTE)secret,               // A pointer to a buffer that contains the key material
        32,                          // Size of the buffer in bytes
        0);                          // Flags
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    Status = BCryptDecrypt(
        KeyHandle,                  // Handle to a key which is used to encrypt 
        CipherText,                 // Address of the buffer that contains the ciphertext
        sizeof(CipherText),         // Size of the buffer in bytes
        NULL,                       // A pointer to padding info, used with asymmetric and authenticated encryption; else set to NULL
        IV,                         // Address of the buffer that contains the IV. 
        sizeof(IV),                 // Size of the IV buffer in bytes
        NULL,                       // Address of the buffer the recieves the plaintext
        0,                          // Size of the buffer in bytes
        &PlainTextLength,           // Variable that recieves number of bytes copied to plaintext buffer 
        BCRYPT_BLOCK_PADDING);      // Flags; Block padding allows to pad data to the next block size
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    PlainText = malloc(PlainTextLength);
    Status = BCryptDecrypt(
        KeyHandle,                  // Handle to a key which is used to encrypt 
        CipherText,                 // Address of the buffer that contains the ciphertext
        sizeof(CipherText),         // Size of the buffer in bytes
        NULL,                       // A pointer to padding info, used with asymmetric and authenticated encryption; else set to NULL
        IV,                         // Address of the buffer that contains the IV. 
        sizeof(IV),                 // Size of the IV buffer in bytes
        PlainText,                  // Address of the buffer the recieves the plaintext
        PlainTextLength,            // Size of the buffer in bytes
        &PlainTextLength,           // Variable that recieves number of bytes copied to plaintext buffer 
        BCRYPT_BLOCK_PADDING);      // Flags; Block padding allows to pad data to the next block size
    if (!NT_SUCCESS(Status))
    {
        ReportError(Status);
        goto cleanup;
    }
    printf("PlainText: %s", PlainText);
cleanup:
    if (AesAlgHandle != NULL)
    {
        BCryptCloseAlgorithmProvider(AesAlgHandle, 0);
    }
    if (KeyHandle != NULL)
    {
        BCryptDestroyKey(KeyHandle);
    }
    if (KeyObject != NULL) {
        free(KeyObject);
    }
    if (PlainText != NULL) {
        free(PlainText);
    }
}
````
Or just decrypt it with Python:
```python
>>> AES.new(b'whothefuckisalice'.ljust(32, b'\0'), AES.MODE_CBC, b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f').decrypt(b'\x74\xf8\x14\x89\x7d\x5a\xc9\xc0\x53\x01\xfd\x99\x22\xc3\xac\x84\xfd\xfb\x43\x12\xff\x39\xab\x49\xee\x39\xe5\x80\xc1\xf5\x16\x0c').decode()
'INTENT{0ff_w1th_7h31r_H34ds}\x00\x03\x03\x03'
```