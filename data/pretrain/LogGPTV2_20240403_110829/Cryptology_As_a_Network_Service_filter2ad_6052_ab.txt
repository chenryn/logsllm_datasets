Untrusted(cid:13)
 Network(cid:13)
Cryptography Server(cid:13)
Figure 1. Cryptoserver Network Architecture
Cryptographic Accelerator(cid:13)
Cryptographic Accelerator(cid:13)
Cryptographic Accelerator(cid:13)
Cryptographic Accelerator(cid:13)
parallel.
2. Symmetric cryptographic acceleration hardware
would be useful to speed encryption of client –
cryptoserver communications, particularly if DES or
triple-DES is desired. Faster block ciphers can be
effectively accommodated in software.
3. Multiple public key accelerators would be used, for
a dramatic throughput increase.
While these enhancements would undoubtingly increase
performance, our present system, with very modest hard-
ware, already performs acceptably well. Our software has
been architected with scalability in mind, as discussed be-
low.
3. It must be easy to incorporate additional crypto-
graphic acceleration capacity, and to take maximal
advantage of different types of cryptographic accel-
erators.
4. It must be easy to plug in different mechanisms for
negotiating security associations and protecting re-
quests on the network.
There are many possible choices for the software to
meet the goals described above. We explain our choice of
a communications substrate for the implementation. We
describe the interface that the cryptoserver presents to its
clients. Finally, we explain our choice of software archi-
tecture.
4.2. Software Architecture
4.2.1. Middleware
Our architecture was designed to meet a number of im-
portant goals:
1. It must scale effectively with the following factors:
(a) the number of client requests
(b) the amount of cryptographic hardware available
(it should keep all useful cryptographic capac-
ity busy at all times given sufﬁcient requests)
(c) the number of individual clients (security asso-
ciations) being managed and used
2. Individual client requests must have very low over-
head, both in terms of network operations and secu-
rity association management; infrequent operations
(security association negotiation) may be more ex-
pensive to compensate.
Our architecture places several fundamental requirements
on the messaging middleware we choose. In order to build
a server that will scale to support a number of highly paral-
lel cryptographic coprocessors, the middleware layer must
cope well with a multi-threaded server. Our basic design
rests on the idea of being able to leverage one potentially
expensive cryptographic operation on the client into many
on the server, by using that one expensive client opera-
tion to establish a long-term security association between
client and server. The middleware platform we use must
support the establishment and maintenance of such asso-
ciations, preferably via a choice of protocols. Finally, the
middleware platform must allow for either a connection-
less transport (e.g., UDP), or if it relies on a connection-
oriented transport layer (e.g., TCP), it must be able to ei-
ther maintain long-term security associations across mul-







tiple sequential TCP connections from the same client ma-
chine or manage a large number of dormant TCP connec-
tions from clients who may not be constantly active but
want to maintain their security associations.
We chose to implement our system on top of Sun’s
Transport Independent Remote Procedure Call (TI-RPC)
middleware. We chose TI-RPC because it supported:
1. multithreaded applications,
building a scalable service;
for a simple path to
2. through RPCSEC GSS [13] it supports the Generic
Security Service (GSS) API [21], so we could use
multiple authentication and encryption technologies
and negotiate long-term security associations
3. and it supported datagram (e.g., UDP) transports.
We preferred to use UDP because datagrams are a
much more natural match for the RPC paradigm than
connection-oriented transports (such as TCP), and be-
cause a UDP-based solution obviated the need for compli-
cated connection pool management logic, as we desire to
scale the number of clients past the number of socket de-
scriptors available in a single UNIX process (typically on
the order of 1024). UDP also minimizes transport-related
overhead for clients who may make infrequent calls to
the cryptoserver. Other middleware choices, most notably
CORBA, had one or more substantial gaps in supporting
multithreaded applications over encrypted datagram trans-
ports.
A major advantage of this choice of middleware is the
availability of RPCSEC GSS, an interface to the GSS-
API. GSSAPI is a pluggable security API, allowing a con-
sistent interface to a variety of different authentication
and encryption technologies.
It is one of the few secu-
rity technologies to explicitly support negotiation of se-
curity associations over connectionless transports (though
we could negotiate security associations out-of-band over
a connected transport), and which is capable of securing
communications over such transports. Most importantly,
RPCSEC GSS naturally supports the most central idea in
this paper: that of leveraging long-term security associ-
ations to secure RPC-based requests with a minimum of
per-request overhead.
Another substantial advantage of TI-RPC is that it is
compatible on the wire with Sun’s ONC RPC, a widely
deployed RPC protocol that is at the heart of NFS. As
such, ONC RPC implementations are available on a wide
variety of platforms. Sun recently made TI-RPC source
code available under a liberal license, and as NFS v4 will
be built on TI-RPC, we hope it will be widely ported over
the next few years.
4.2.2. Security Association Negotiation
There are a variety of approaches to generating security
associations between client and cryptoserver. The very
simplest is a pure key exchange (e.g., Difﬁe-Hellman) in
order to produce a shared symmetric key used to encrypt
further communication between client and server. This
is the approach we took in our initial implementation, as
we are not measuring key exchange performance.
In a
production server, we anticipate that session keys will be
generated every 1–24 hours per client in actual use.
If
one uses a little care to make sure that keys expire uni-
formly across an hour, even with 10,000 clients and 1
hour session expirations, this implies 3 key agreements
(i.e., modular exponentiations) per second, or 1% of the
capacity of a single AXL200. For a potential client, the
value of using a cryptoserver will be determined by the
cost of negotiating a security association in combination
with the number of modular exponentiations across which
that association can be amortized (which will be deter-
mined by the lifetime of the association and the rate of
operations performed by the client). Even a client who
performs only a very small number of cryptographic oper-
ations may ﬁnd it worthwhile to use such a server in order
to be able to choose when to perform that costly cryptog-
raphy – at the time of security association negotiation, not
at the time when the cryptographic operations themselves
are required (which may be a time when the client is sub-
ject to many other demands).
To produce the performance numbers given below, we
used the 192-bit Difﬁe-Hellman key agreement mecha-
nism available with the distribution of TI-RPC. While
this provides woefully inadequate security for production
use [19], it is sufﬁcient for the demonstration presented
here.
For our symmetric cipher, we are using triple-DES. The
performance of our overall system depends on the choice
of symmetric cipher. Using triple DES is a very conser-
vative choice as almost all other ciphers will offer better
performance. The choice of symmetric cipher is deter-
mined by the GSS mechanism used. It would therefore be
simple change to use of AES instead. Separating out the
wire encryption in this way also allows us to consider use
of bulk symmetric cryptographic accelerator hardware to
handle communication on the server.
A variety of more interesting approaches to negotiating
security associations are open to us. In the minimal case,
a client would like to have assurance that the machine it is
communicating with is indeed a trustworthy cryptoserver.
Therefore, the server must be able to authenticate itself to
the client. If the service is freely available, the client need
not authenticate itself to the server (and indeed may want
to remain anonymous). In order to provide this base level
of functionality, we intend to use a public-key based GSS
program QCS_RPC_PROG
version QCS_RPC_VERS
QCS_value_res RPCMODEXP(QCS_mod_exp_coef, QCS_bignum) = 1;
QCS_val_array_res RPCMODEXPARRAY(QCS_mod_exp_coef, QCS_bignum_array) = 2;
QCS_value_res RPCRSAPCRTEXP(QCS_rsa_private_key, QCS_bignum) = 3;
QCS_val_array_res RPCRSACRTARRAY(QCS_rsa_private_key,
QCS_val_array_res RPCMULTIMODEXPARRAY(QCS_mod_exp_coef_array,
QCS_bignum_array) = 5;
int RPCGETMAXMODULUSLEN(void) = 7;
QCS_bignum_array) = 4;
 = 1;
 = 0x20000105;
Figure 2. RPC Interface to the cryptoserver
mechanism (such as SPKM [1]) and use a Certiﬁcation
Authority trusted by all clients to certify cryptoservers as
such.
Further variants on authentication mechanisms would
use client authentication to control access to a cryp-
toserver. PKI-based or Kerberos-based authentication
mechanisms could be used to identify clients authorized
to use the cryptoserver. Forms of digital cash could be
used to allow clients to pay for cryptographic operations
by both number of operations or quality of service (e.g.,
speed, latency, etc) – clients could set up an account as
part of security association negotiation, or could include
payment tokens on a per-request basis.
4.2.3. Client Interface to the Cryptoserver
The client interface to the cryptoserver is designed to both
allow sophisticated clients to most effectively use one
or more such servers while minimizing network-related
overhead, and to make it easy to incorporate cryptoserver
support into legacy client packages such as OpenSSL and
Microsoft’s CryptoAPI with no changes required by pro-
grams which then in turn use those packages. The in-
terface is also designed to allow requests to be passed
through to the cryptographic hardware with a minimum
of copying, and to be broken up in a variety of ways to
most efﬁciently use any sort of accelerator hardware we
may incorporate in the cryptoserver. We have packaged
this interface as a C API implemented in a shared C++
library.
The interface to the cryptoserver is written in Sun’s
In Figure 2, we
rpcgen RPC speciﬁcation language.
show a slimmed down version of speciﬁcation; non-
essential details about data types and benchmarking sup-
port have been removed. RPCMODEXP is a simple mod-
ular exponentiation. RPCMODEXPARRAY provides a
more efﬁcient way to encrypt multiple values with the
same key. RPCRSAPCRTEXP and RPCRSACRTAR-
RAY are the corresponding calls, but using Chinese re-
maindered exponentiation. Finally, RPCMULTIMOD-
EXPARRAY provides a more communication efﬁcient
mechanism for raising multiple bases to multiple pow-
ers (modulo the corresponding moduli). RPCMODEX-
PARRAY and RPCRSACRTARRAY are particularly use-
ful for non-RSA operations where there are no security
issues with different keys and shared plaintext.
4.2.4. Server Program
We implemented the cryptoserver in C++. From a security
point of view, we would prefer to implement the server in
a safe language, such as Java. Unfortunately, there are
four problems with this:
1. Lack of suitable middleware;
2. Poor performance of present Java compilers;
3. Difﬁculty of efﬁcient interfacing to vendor libraries
written in C;
4. Lack of a complete Unix system call interface.
These restrictions narrowed the choice of language to C
or C++.
The server architecture can be seen in Figure 3. A con-
ﬁgurable number of threads are responsible for decrypting
and decoding incoming requests. As each request is de-
crypted, it is placed into a work item, which is moved onto
the work queue. A pool of worker threads are preallocated
to take requests from the work queue and hand them to
a cryptographic accelerator for processing. Once the ac-
celerator has ﬁnished processing that request, the worker
thread moves the request onto the reply queue, and waits
for the next request to appear on the work queue. There is
a pool of replier threads (again, conﬁgurable in size) that
takes work items off the reply queue, encrypts them, and
returns the encrypted results to the requester. Empty work


Internet(cid:13)
Reply(cid:13)
Request(cid:13)
Request Handler Threads(cid:13)
Reply Handler Threads(cid:13)
Idle(cid:13)
Work(cid:13)
Reply(cid:13)
Worker Threads(cid:13)
Cryptographic Accelerator(cid:13)
Figure 3. Cryptoserver Software Architecture
items are then placed in an idle queue to allow for object
reuse.
Our software includes one additional important opti-
mization:
the RPCs that take array arguments are bro-
ken into multiple work items as they are placed on the
work queue. This enables the separate operations to oc-
cur in parallel given our current cryptographic hardware.
Of course, the RPC cannot return until all the results are
available. This is implemented by making one work item
be canonical per RPC request, and not moving the canoni-
cal work item onto the reply queue until all the operations
are ﬁnished. The only time such automatic parallelization
might be a disadvantage is if a hardware accelerator was
able to take advantage of repeated use of the same key
in order to speed up a group of operations. None of the
accelerators we have worked with to date take advantage
of any such options, but as the latencies of the individual
cryptographic processors on these accelerator boards go
down (see below), and the fraction of time spent in host-
side preprocessing and copying of data goes up, such op-
timizations may become very important. Our architecture
is ﬂexible enough to take advantage of these optimizations
when they become important.
4.2.5. Hardware Interface
In order to simplify the server, we use “shim” libraries
to normalize the interface the server sees to each type of
cryptographic hardware accelerator present in the system.
Each individual hardware “shim” is responsible for any
initialization required by the hardware it manages, and can
provide information to the server about the capabilities of
that hardware (e.g., supported modulus lengths, whether
the hardware driver supports features like negative num-
bers directly or the shim is providing that feature, etc.).
Such information could be used by the server for more so-
phisticated scheduling of work items on particular accel-