title:Methuselah Flash: Rewriting Codes for Extra Long Storage Lifetime
author:Georgios Mappouras and
Alireza Vahid and
A. Robert Calderbank and
Daniel J. Sorin
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Methuselah Flash: Rewriting Codes for Extra Long Storage Lifetime
Georgios Mappouras, Alireza Vahid, Robert Calderbank, Daniel J. Sorin 
 Department of Electrical and Computer Engineering 
Duke University 
{georgios.mappouras, alireza.vahid, robert.calderbank, sorin}@duke.edu
Abstract—Motivated by embedded systems and datacenters 
that  require  long-life  components,  we  extend  the  lifetime  of 
Flash  memory  using  rewriting  codes  that  allow  for  multiple 
writes  to  a  page  before  it  needs  to  be  erased.  Although 
researchers  have  previously  explored  rewriting  codes  for  this 
purpose,  we  make  two  significant  contributions  beyond  prior 
work.  First,  we  remove  the  assumption  of  idealized—and 
unrealistically  optimistic—Flash  cells  used  in  prior  work  on 
endurance codes. Unfortunately, current Flash technology has a 
non-ideal interface, due to its underlying physical design, and 
does not, for example, allow all seemingly possible increases in 
a cell’s level. We show how to provide the ideal multi-level cell 
interface, by developing a virtual Flash cell, and we evaluate its 
impact on existing endurance codes. Our second contribution is 
our development of novel endurance codes, called Methuselah 
Flash Codes (MFC), that provide better cost/lifetime trade-offs 
than previously studied codes.  
Keywords—Flash memory; Coding; Lifetime; Endurance 
I.  INTRODUCTION 
Flash  memory  is  being  increasingly  used,  due  to  its 
increasing capacity and the narrowing of the cost differential 
between Flash and other storage technologies (especially hard 
drives).  NAND  Flash  is  the  dominant  technology  of  solid-
state  drives  (SSDs)  and  numerous  other  storage  devices. 
Typical storage devices use multi-level cells with 2 (SLC), 4 
(MLC) or 8 (TLC) levels per cell. MLCs and TLCs are usually 
preferred  because  they  provide  better  storage  density  than 
SLCs. 
One drawback to using Flash is that its cells wear out after 
a number of program/erase (P/E) cycles. That is, we can only 
erase a Flash cell a given number of times before that cell can 
no longer retain information. The number of P/E cycles that a 
cell can tolerate is the lifetime of the cell and it depends on the 
type  of  the  cell  used  (SLC,  MLC  or  TLC)  and  the  Flash 
technology node size. The node size is decreasing rapidly as 
Flash cells continue to shrink at each generation in order to 
provide  greater  density.  However  smaller  node  sizes  can 
endure fewer P/E cycles. 
We seek to improve Flash’s endurance and, in doing so, it 
is important to understand when and where endurance needs 
to be improved. Solid state drives (SSDs) in typical personal 
computers  are  an  example  where  lifetime  extension  is 
unnecessary, because the expected lifetime of an SSD exceeds 
the 3-5 year lifetime of the computer itself. Because coding 
techniques to extend the lifetime incur a cost—in terms of the 
extra raw capacity required to provide a given amount of host-
visible  capacity—we  do  not  wish 
that  cost 
unnecessarily.  
to  pay 
Figure 1. Host-visible capacity as function of lifetime, with fixed cost 
(in raw capacity). 
In Figure 1, we illustrate the trade-off between lifetime and 
cost in the context of a baseline that is today’s Flash with no 
modifications  to  extend  its  lifetime.    The  x-axis  is  lifetime, 
normalized  to L,  the  lifetime  of  the  baseline.    The  y-axis  is 
host-visible  capacity,  normalized  to  C,  the  host-visible 
capacity of the baseline. The figure contains rectangles which 
represent  equal-cost  (in  terms  of  raw  capacity)  trade-offs 
between lifetime and host-visible capacity. The baseline has a 
rectangle of C host-visible capacity at L lifetime, which has 
the  same  cost  as  the  replication  scheme  (C/2  at  2L)  and  a 
coding scheme (C/6 at 12L) we describe later.  Note that equal 
cost does not necessarily imply equal rectangle area. 
Figure 1 also contains two dotted vertical lines that denote 
target lifetimes for different applications. These dotted lines 
are  not  meant  to  represent  exact  lifetimes  for  specific 
applications, but rather to illustrate big-picture differences in 
application lifetime needs.  For example, we draw the dotted 
line  for  personal  computers  to  the  left  of  L  on  the  x-axis, 
meaning that the baseline Flash suffices (This line could shift 
to  the  right  over  time,  as  L  decreases  in  each  technology 
generation). The dotted line for certain embedded systems that 
require  long  life  (e.g.,  space  probes,  embedded  sensor 
platforms, etc.) and SSDs in datacenters is far to the right of L 
and  requires  a  lifetime  extension  scheme  even  if  it  incurs  a 
reduction  in  host-visible  capacity  (at  the  same  cost  as  the 
baseline) and/or an increase in cost (to achieve the same host-
visible capacity as the baseline). 
For  those  scenarios  in  which  Flash  lifetime  needs  to  be 
extended, there are two primary and largely complementary 
approaches: endurance codes and wear-leveling. In this work, 
we focus on endurance codes, in which we encode datawords 
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.25
180
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:41 UTC from IEEE Xplore.  Restrictions apply. 
to codewords before writing them to the Flash, so as to extend 
the Flash’s lifetime. 
the 
We make two contributions in this work. First, we bridge 
the  gap  between 
idealized—and  unrealistically 
optimistic—Flash cells used in the prior work on endurance 
codes.  Prior endurance codes show promise [1, 2, 3, 4, 5, 6, 
7], in theory, but they are incompatible with the current Flash 
interface.  The codes expect “ideal” multi-level cells, in which 
each cell has some number of levels, L, and each cell can be 
increased from level i to level j as long as i<j. Unfortunately, 
current Flash technology has a non-ideal interface, due to its 
underlying physical design, and does not, for example, allow 
all seemingly possible increases in a cell’s level.  In this paper, 
we show how to provide the ideal multi-level cell interface, 
by developing what we refer to as a virtual Flash cell, and we 
evaluate  its  impact  on  existing  endurance  codes.  We 
demonstrate  how  to  create  virtual  cells  with  any  number  of 
levels independently of the Flash type and technology used. 
Our  second  contribution  is  our  development  of  novel 
endurance codes, called Methuselah Flash Codes (MFC), that 
provide  far  better  cost/lifetime  trade-offs  than  previously 
studied  codes.  We  start  with  the  general  concept  of  coset 
coding [8, 9], in which each dataword to be written maps to a 
unique  coset  of  codewords.  Coset  coding  provides  multiple 
options for which codeword to write, and our contribution is 
the  development  of  new  heuristics  for  choosing  codewords 
from cosets so as to maximize the lifetime of Flash. 
II.  FLASH BACKGROUND 
In this section, we describe how NAND Flash is organized 
and operates, we discuss its endurance issues, and we explain 
some important details of its interface that have a large impact 
on  coding.  We  consider  only  NAND  Flash,  because  of  its 
ubiquity, and we use the term Flash to refer to it.  
  Flash memory organization 
A  Flash  chip  consists  of  some  number  of  blocks,  where 
each block contains some number (128-256) of pages. Page 
sizes are typically on the order of 4-16KB, and pages are the 
smallest units in Flash that can be read or written. Blocks are 
the smallest units that can be erased, and thus a block erase 
causes many pages to be erased at the same time.   
To  minimize  block  erases—which  is  important  for 
endurance,  as  we  discuss  later—Flash  updates  are  not 
performed “in place.”  A write to update a page of data already 
on the chip is performed to a clean page, and the page that held 
the previous data is marked as invalid.  The Flash Translation 
Layer  (FTL)  software  maintains  the  mapping  from  each 
logical page to the location of its most recently updated data, 
and it also performs garbage collection to free up blocks with 
many invalid pages.  To free a block, the FTL copies out any 
valid  pages  to  new  free  pages  (in  another  block)  and  then 
erases the block. 
  Flash Cells and Wearout 
Flash  SSDs  consist  of  NAND  Flash  cells,  and  each  cell 
can be interpreted as having two or more distinct levels. Flash 
chips  are  often  classified  based  on  whether  the  cells  are 
interpreted as storing one bit per cell (SLCs), 2 bits per cell 
(MLCs) or 3 bits per cell (TLCs).  The name “single-level cell 
(SLC)”  is  a  historical  misnomer;  an  SLC  actually  has  two 
levels, 0 and 1. Also, while MLC stands for multi-level cell it 
actually refers to a cell of 4 levels. TLCs (triple level cells) 
refer to 8 level cells.   
  Without loss of generality, we will assume MLCs (i.e., 
each cell has 4 levels L0, L1, L2, and L3) in this discussion, 
for  the  purposes  of  making  the  examples  and  explanations 
concrete. 
Writing to a Flash cell involves adding charge to the cell.  
The  amount  of  charge  depends  on  the  level  desired;  that  is, 
more charge is required when changing the level from L0 to 
L2 than when changing the level from L0 to L1.  Erasing a 
cell removes all of its charge and sets its level to L0.  (There 
is no way to decrease a cell’s level except for erasing back to 
level  L0.)    We  assume  that  the  Flash  cells  support  what  is 
known as “program without erase” (PWE), i.e., a cell’s value 
can be changed without being erased first, as long as the value 
is being incremented [10]. We have experimentally tested that 
we  can  perform  PWE  on  reasonably  modern  Flash  chips,  a 
Samsung K9LCG08U1M and a Hynix H27QDG8VEBIR SK. 
Flash cells can be erased only so many times before they 
wear  out  (i.e.,  cannot  be  written  again),  and  this  is  the 
fundamental problem we address in this work. Mohan et al. 
[11] show how Flash cells may recover from wearout, to some 
extent, but the fundamental problem of wearout remains. 
  Important Issues in Flash Interface 
The interface provided by Flash chips has two important—
and  often  overlooked—quirks  that  impact  how  one  might 
develop coding techniques for Flash. 
First, one might expect that the level of an MLC can be 
increased arbitrarily.  That is, one might expect to be able to 
change a MLC’s level from L0 to L1, L2, or L3, from L1 to 
L2  or  L3,  and  from  L2  to  L3.  Unfortunately,  this  is  not  the 
case.  At  the  physical  level,  a  MLC’s  level  can  be  changed 
from L0 to L1 or L2 (but not L3), from L1 to L3 (but not L2), 
and  from  L2  to  L3.  Furthermore,  the  interface  provided  to 
Flash does not even provide access to cells of any kind; rather, 
the interface currently provided by the FTL software is simply 
pages of bits. A Flash chip can be accessed by reading/writing 
bits on pages, but not by reading/modifying levels of cells. A 
code  that  assumes  the  naïve  interface—ideal  multi-level 
cells—will not work on today’s Flash chips. 
Second,  one  might  expect  that  a  single  MLC  represents 
two bits on a given page. However, that is not the interface 
provided  by  today’s  chips. Instead  a  single  MLC  represents 
one bit on one page (let us name that “page x”) and one bit on 
another page (let us name that “page y”) in the same block.  
Once again, a code that assumes the naïve interface will not 
work on today’s Flash chips. 
Figure  2  describes  those  limitations  schematically.  We 
observe that a transition from L1 to L2 implies that a bit in 
page  x  should  flip  from  1  to  0.  This  however  is  not  a  legal 
transition and the FTL will not allow it to occur. Additionally 
the transition from L0 to L3 cannot be performed in a single 
program request as that would require programing both pages 
x and y. 
181
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:41 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. An MLC with its allowed transitions. 
Although some researchers have identified these interface 
quirks [12, 13], we are unaware of any prior work on rewriting 
codes that accounts for these quirks. 
III.  THEORY OF ENDURANCE CODING 
Methuselah  Flash  builds  upon  a  coding  technique 
developed  by  Jacobvitz  et  al.  [6].    We  start  by  describing  a 
technique known as waterfall coding [14], which Jacobvitz et 
al. use to connect the concept of coset coding with the use of 
multi-level cells.  All of the work described in this section is 
prior  work;  our  contributions  are  in  the  next  three  sections, 
where we apply this prior theory to realistic Flash. 
  Waterfall Coding 
 We  assume,  for  purposes  of  explanation,  that  pages 
consist of ideal 4-level cells.  However, instead of using the 4 
levels of the cell to hold 2 bits of data (as is typical), waterfall 
coding [14] uses the 4 levels to hold 1 bit of data, as illustrated 
in Figure 3.  Levels L0 and L2 correspond to a bit value of 0, 
and  Levels  L1  and  L3  correspond  to  a  bit  value  of  1.    An 
erased cell is at Level L0 (bit value 0).  Subsequent writes to 
the cell add charge to it to increase its level.  Thus, an erased 
cell can progress from bit value 0 (L0) to 1 (L1) to 0 (L2) and 
back to 1 (L3).  At Level L3, the cell is saturated with charge 
and may not be programmed again, so a subsequent write to 
change the bit value to 0 requires the cell to be erased.  Using 
a  4-level  cell  in  this  way  enables  a  single  cell  to  be  written 
multiple times before it needs to be erased.  Throughout this 
paper,  we  leverage  waterfall  coding  when  we  consider 
(virtual) cells with more than 2 levels. 
  Write Once Memory (WOM) codes 
The  idea  of  reusing  a  “write-once”  memory  was  first 
presented by Rivest and Shamir [15]. Since then WOM codes 
(and variations of them) have been extensively used in order 
to enhance Flash’s lifetime [2, 3, 4, 5, 7, 16, 17]. The general 
idea  is  to  represent  a  number  of  bits  (b)  with  a  number  of 