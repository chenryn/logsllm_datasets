      public HomeController(ISampleService service)
      {
        _service = service;
      }
      public async Task Index(HttpContext context)
      {
        var sb = new StringBuilder();
        sb.Append("");
        sb.Append(string.Join("", _service.GetSampleStrings().Select(
          s => $"{s}").ToArray()));
        sb.Append("");
        await context.Response.WriteAsync(sb.ToString());
        return 200;
      }
    }
  注意： 这个示例控制器直接返回HTML代码。最好把用户界面和功能分开，
通过另一个类（视图）创建HTML代码。对于这种分离最好使用ASP.NET MVC框架。
这个框架参见第41章。
40.7.4 调用控制器
为了通过依赖注入来实例化控制器，可使用IServiceCollection服务注册
HomeController类。这次不使用接口，只需要服务类型的具体实现和AddTransient方法调
用（代码文件WebSampleApp/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddTransient();
      services.AddTransient();
      // etc.
    }
包含路由信息的Configure方法现在改为检查/ home路径。如果这个表达式返回true，
就在注册的应用程序服务上调用GetService方法，通过依赖注入实例化HomeController。
IApplicationBuilder接口定义了ApplicationServices属性，它返回一个实现了IserviceProvider
的对象。这里，可以访问所有已注册的服务。使用这个控制器，通过传递HttpContext来调
用Index方法。状态代码被写入响应对象：
    public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
    {
      app.Run(async (context) =>
      {
        // etc.
        if (context.Request.Path.Value.ToLower() == "/home")
        {
        HomeController controller =
          app.ApplicationServices.GetService();
        int statusCode = await controller.Index(context);
        context.Response.StatusCode = statusCode;
        return;
        }
      });
      // etc.
    }
图40-16显示用主页地址的URL运行应用程序时的无序列表的输出。
图40-16
40.8 使用映射的路由
在前面的代码片段中，当URL的路径是/home时调用HomeController类。没有注意查
询字符串或子文件夹。当然，为此可以检查字符串的一个子集。然而，有一个更好的方
法。ASP.NET通过IApplicationBuilder的扩展（Map方法）支持子应用程序。
下面的代码段定义了一个到/ 
home2路径的映射，运行HomeController的Invoke方法
（代码文件WebSampleApp/Startup.cs）：
    public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
    {
      // etc.
      app.Map("/home2", homeApp =>
      {
        homeApp.Run(async context =>
        {
        HomeController controller =
          app.ApplicationServices.GetService();
        int statusCode = await controller.Index(context);
        context.Response.StatusCode = statusCode;
        });
      });
      // etc.
    }
除了使用Map方法之外，还可以使用MapWhen。在下面的代码片段中，当路径
以/configuration开头时，应用MapWhen管理的映射。剩下的路径被写入remaining变量，可
用于使方法调用有差异：
    PathString remaining;
    app.MapWhen(context =>
      context.Request.Path.StartsWithSegments("/configuration", out remaining),
        configApp =>
        {
        configApp.Run(async context =>
        {
          // etc.
        }
        });
除了使用路径之外，还可以访问HttpContext的任何其他信息，例如客户端的主机信息
（context.Request.Host）或通过身份验证的用户（context.User.Identity.IsAuthenticated）。
40.9 使用中间件
ASP.NET 
Core很容易创建在调用控制器之前调用的模块。这可以用于添加标题信
息、验证令牌、构建缓存、创建日志跟踪等。一个中间件模块链接另一个中间件模块，直
到调用所有连接的中间件类型为止。
使用Visual Studio项模板Middleware Class可以创建中间件类。有了这个中间件类型，
就可以创建构造函数，接收对下一个中间件类型的引用。RequestDelegate是一个委托，它
接收HttpContext作为参数，并返回一个Task。这就是Invoke方法的签名。在这个方法中，
可以访问请求和响应信息。HeaderMiddleware类型给HttpContext的响应添加一个示例标
题。在最后的动作中，Invoke方法调用下一个中间件模块（代码文件
WebSampleApp/Middleware/HeaderMiddleware.cs）：
    public class HeaderMiddleware
    {
      private readonly RequestDelegate _next;
      public HeaderMiddleware(RequestDelegate next)
      {
        _next = next;
      }
      public Task Invoke(HttpContext httpContext)
      {
        httpContext.Response.Headers.Add("sampleheader",
        new string[] { "addheadermiddleware"});
        return _next(httpContext);
      }
    }
为便于配置中间件类型，UseHeaderMiddleware扩展方法扩展接口IApplicationBuilder
来调用UseMiddleware方法：
    public static class HeaderMiddlewareExtensions
    {
      public static IApplicationBuilder UseHeaderMiddleware(
        this IApplicationBuilder builder) =>
        builder.UseMiddleware();
    }
另一个中间件类型是Heading1Middleware。这种类型类似于前面的中间件类型；它只
是把heading 1写入响应（代码文件WebSampleApp/Middleware/Heading1Middleware.cs）：
    public class Heading1Middleware
    {
      private readonly RequestDelegate _next;
      public Heading1Middleware(RequestDelegate next)
      {
        _next = next;
      }
      public async Task Invoke(HttpContext httpContext)
      {
        await httpContext.Response.WriteAsync("From Middleware");
        await _next(httpContext);
      }
    }
    public static class Heading1MiddlewareExtensions
    {
      public static IApplicationBuilder UseHeading1Middleware(
        this IApplicationBuilder builder) =>
        builder.UseMiddleware();
    }
现在，Startup类和Configure方法负责配置所有的中间件类型。扩展方法已经准备好调
用了（代码文件WebSampleApp/Startup.cs）：
    public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
    {
      // etc.
      app.UseHeaderMiddleware();
      app.UseHeading1Middleware();
      // etc.
    }
运行应用程序时，可以看到返回给客户端的标题（使用浏览器的开发人员工具）。无
论使用之前创建的哪个链接，每个页面都显示了标题（参见图40-17）。
图40-17
40.10 会话状态
使用中间件实现的服务是会话状态。会话状态允许在服务器上暂时记忆客户端的数
据。会话状态本身实现为中间件。
用户第一次从服务器请求页面时，会启动会话状态。用户在服务器上使页面保持打开
时，会话会继续到超时（通常是10分钟）为止。用户导航到新页面时，为了仍在服务器上
保持状态，可以把状态写入一个会话。超时后，会话数据会被删除。
为了识别会话，可在第一个请求上创建一个带会话标识符的临时cookie。这个cookie
与每个请求一起从客户端返回到服务器，在浏览器关闭后，就删除cookie。会话标识符也
可以在URL字符串中发送，以替代使用cookie。
在服务器端，会话信息可以存储在内存中。在Web场中，存储在内存中的会话状态不
会在不同的系统之间传播。采用粘性的会话配置，用户总是返回到相同的物理服务器上。
使用粘性会话，同样的状态在其他系统上不可用并不重要（除了一个服务器失败时）。不
使用粘性会话，为了处理失败的服务器，应选择把会话状态存储在SQL Server数据库的分
布式内存内。将会话状态存储在分布式内存中也有助于服务器进程的回收；如果只使用一
个服务器进程，则回收处理会删除会话状态。
为了与ASP.NET一起使用会话状态，需要添加NuGet包Microsoft.AspNet.Session。这
个包提供了AddSession扩展方法，它可以在Startup类的ConfigureServices方法中调用。该
参数允许配置闲置超时和cookie选项。cookie用来识别会话。会话也使用实现了
IDistributedCache接口的服务。一个简单的实现是进程内会话状态的缓存。方法
AddCaching添加以下缓存服务（代码文件WebSampleApp/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddTransient();
      services.AddTransient();
      services.AddCaching();
      services.AddSession(options =>
        options.IdleTimeout = TimeSpan.FromMinutes(10));
    }
  注意： 在NuGet包Microsoft.Extensions.Caching.Redis和Microsoft.Extensions.
Caching.SqlServer中，IDistributedCache的其他实现是RedisCache和SqlServerCache。
为了使用会话，需要调用UseSession扩展方法配置会话。在写入任何响应之前，需要
调用这个方法，例如用UseHeaderMiddleware和UseHeading1Middleware完成，因此
UseSession在其他方法之前调用。使用会话信息的代码映射到/session路径（代码文件
WebSampleApp/Startup.cs）：
    public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
    {
      // etc.
      app.UseSession();
      app.UseHeaderMiddleware();
      app.UseHeading1Middleware();
      app.Map("/session", sessionApp =>
      {
        sessionApp.Run(async context =>
        {
        await SessionSample.SessionAsync(context);
        });
      });
      // etc.
    }
使用Setxxx方法可以编写会话状态，如SetString和SetInt32。这些方法用ISession接口
定义，ISession接口从HttpContext的Session属性返回。使用Getxxx方法检索会话数据（代
码文件WebSampleApp/SessionSample.cs）：
    public static class SessionSample
    {
      private const string SessionVisits = nameof(SessionVisits);
      private const string SessionTimeCreated = nameof(SessionTimeCreated);
      public static async Task SessionAsync(HttpContext context)
      {
        int visits = context.Session.GetInt32(SessionVisits) ? ? 0;
        string timeCreated = context.Session.GetString(SessionTimeCreated) ? ?
        string.Empty;
        if (string.IsNullOrEmpty(timeCreated))
        {
        timeCreated = DateTime.Now.ToString("t", CultureInfo.InvariantCulture);
        context.Session.SetString(SessionTimeCreated, timeCreated);
        }
        DateTime timeCreated2 = DateTime.Parse(timeCreated);
        context.Session.SetInt32(SessionVisits, ++visits);
        await context.Response.WriteAsync(
        $"Number of visits within this session: {visits} " +
        $"that was created at {timeCreated2:T}; " +
        $"current time: {DateTime.Now:T}");
      }
    }
  注意： 示例代码使用不变的区域性来存储创建会话的时间。向用户显示的时
间使用了特定的区域性。最好使用不变的区域性把特定区域性的数据存储在服务器
上。不变的区域性和如何设置区域性参见第28章。
40.11 配置ASP.NET
在Web应用程序中，需要存储可以由系统管理员改变的配置信息，例如连接字符串。
下一章会创建一个数据驱动的应用程序，其中需要连接字符串。
ASP.NET 
Core 
1.0的配置不再像以前版本的ASP.NET那样基于XML配置文件
web.config和machine.config。在旧的配置文件中，程序集引用和程序集重定向是与数据库
连接字符串和应用程序设置混合在一起的。现在不再是这样。project.json文件用来定义程
序集引用，但没有定义连接字符串和应用程序设置。应用程序设置通常存储在
appsettings.json中，但是配置更灵活，可以选择使用几个JSON或XML文件和环境变量进
行配置。
默认的ASP.NET配置文件appsettings.json从ASP.NET 
Configuration 
File项模板中添
加。项模板会自动创建DefaultConnection设置；随后添加AppSettings（代码文件
WebSampleApp/appsettings. json）：
    {
      "AppSettings": {
        "SiteName": "Professional C# Sample"
      },
      "Data": {
        "DefaultConnection": {
        "ConnectionString":
      "Server=(localdb)\\MSSQLLocalDB; Database=_CHANGE_ME; Trusted_Connection=Tr
ue; "
        }
      }
    }
需要配置所使用的配置文件。这在Startup类的构造函数中完成。ConfigurationBuilder
类用于通过配置文件构建配置。可以有多个配置文件。
示例代码使用扩展方法AddJsonFile把appsettings.json添加到ConfigurationBuilder中。
配置设置完成后，使用Build方法读取配置文件。返回的IConfigurationRoot结果被分配给
只读属性Configuration，以便于以后读取配置信息（代码文件
WebSampleApp/Startup.cs）：
    public Startup(IHostingEnvironment env)
    {
      var builder = new ConfigurationBuilder()
        .AddJsonFile("appsettings.json");
      // etc.
      Configuration = builder.Build();
    }
    public IConfigurationRoot Configuration { get; }
    // etc.
在配置中，可以使用方法AddXmlFile添加XML配置文件，使用
AddEnvironmentVariables添加环境变量，使用AddCommandLine添加命令行参数。
对于配置文件，默认使用Web应用程序的当前目录。如果需要更改目录，可以在调用
AddJsonFile方法之前调用SetBasePath方法。为了检索Web应用程序的目录，可以在构造函
数中注入IApplicationEnvironment接口并使用ApplicationBasePath属性。
40.11.1 读取配置
映射/configuration/appsettings、/configuration/database和/configuration/secret链接，读
取不同的配置值（代码文件WebSampleApp/Startup.cs）：
    PathString remaining;
    app.MapWhen(context =>
      context.Request.Path.StartsWithSegments("/configuration", out remaining),
        configApp =>
        {