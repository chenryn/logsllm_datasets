# 一次对WPS漏洞挖掘的尝试

##### 译文声明
本文为翻译文章，具体内容表达及含义以原文为准。
作者：[houjingyi](https://twitter.com/hjy79425575)

年初时，我对WPS软件进行了漏洞挖掘研究。尽管发现了一些漏洞，但由于个人在漏洞利用方面的知识有限，未能及时向厂商报告。幸运的是，这些漏洞后来已被修复。现在我将这一过程分享出来，希望能帮助大家了解如何对大型软件进行漏洞挖掘。

含有漏洞的版本：W.P.S.10314.12012.2019.exe  
已修复的版本：W.P.S.10356.12012.2019.exe

## 1. 历史漏洞研究

通常，在开始挖掘新目标的漏洞之前，我会先查看其历史漏洞记录，相信大部分安全研究人员也会采取相同的做法。我们可以通过多种渠道来获取这些信息，例如安全客、玄武实验室的[sec.today](https://sec.today)、[cve.mitre.org](https://cve.mitre.org)以及金山办公安全应急响应中心的公告等。经过一番调查后，我发现过去一两年内WPS主要出现了一些与公式编辑器相关的漏洞和一个PNG图片解析漏洞。

考虑到公式编辑器已经被多个团队深入研究过（如GeekPwn 2020上的演示以及极光无限发布的相关文章），我认为再去寻找该领域的漏洞机会不大。此外，根据极光无限的文章所述，与Office不同的是，WPS不会自动加载公式编辑器组件，而是需要用户手动激活，这意味着即使成功利用了此类漏洞，也无法实现真正的“零点击”攻击。因此，我决定转向探索图片解析漏洞的可能性。

在正式着手于图片解析功能之前，我还尝试查找是否存在类似于Office曾经遇到过的DLL劫持问题，以便直接远程代码执行（参考：[CVE-2016-0018: DLL Planting Leads to a Remote Code Execution Vulnerability](https://www.mcafee.com/blogs/other-blogs/mcafee-labs/cve-2016-0018-dll-planting-leads-to-a-remote-code-execution-vulnerability/)）。遗憾的是，并未发现类似情况。

## 2. fuzz图片解析函数

接下来，让我们来看看那个PNG图片解析漏洞：[CVE-2020-25291 – Kingsoft WPS Office Remote Heap Corruption Vulnerability](http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html)。虽然原作者没有提供具体的POC，但给出了堆栈跟踪信息，这对于我们的分析已经足够了。

通过调试分析得知，图片解析逻辑位于QtCore4.dll中，其中第一个被调用的函数是QImageReader::read。对于有fuzz经验的人来说，使用winafl等工具对该段代码进行模糊测试应该是轻车熟路的事情。这里分享一下我当时编写的测试脚本。

运行一段时间后，winafl确实找到了几个崩溃点。进一步研究表明，这些问题源于WPS使用了一个非常老旧版本的libtiff库。无论是qt4自带还是WPS自行添加的，这种做法无疑增加了安全隐患。之后，我查阅了一些针对libtiff发布的POC，部分确实在WPS环境中能够触发，主要是由于堆溢出所致。然而，由于缺乏关于WPS内部堆布局的知识以及其他现成的EXP可供参考，原本打算后续继续研究，但随着WPS更新至qt5并移除了libtiff库，这个计划也就搁置了。

## 3. 使用winafl时需注意的问题

此处仅提供了代码示例而未详细解释编写过程，因为我认为这相对简单。另外，关于如何实现实际利用的问题，则留给感兴趣的读者作为练习。在此我想强调几点使用winafl时需要注意的地方：

1. 不要更改被fuzz DLL的名字。
2. 目标函数应返回0而不是调用exit()（winafl无法捕获post_fuzz_handler）。
3. 不要直接使用GitHub上预编译好的二进制文件（Windows 7环境下可能仍可工作），建议自行基于最新版DynamoRIO重新构建。
4. 在目标函数内打开并关闭文件句柄。
   - 正常情况下，您会看到前面展示的代码已经正确关闭了qfile对象；如果不这样做，则可能会遇到如下所示的问题。
5. 在正式启动winafl前，请先用drrun确认一切正常。
   - 如果一切顺利的话，日志文件应该看起来像下面这样。

最后一点与winafl无关的小贴士：为了防止某些应用程序在崩溃后自动生成并上传dump文件给开发者，从而导致潜在漏洞被提前修复，强烈建议在整个fuzz过程中断开网络连接并在虚拟机环境中操作。

## 4. 结语

令人惊讶的是，WPS居然还在依赖几乎十年前的老版libtiff库，这可能是造成PNG漏洞的原因之一。一方面，软件供应商应当加强对所使用的开源库的管理，避免长期采用存在已知缺陷的版本；另一方面，对于漏洞猎手而言，在进行审计时也应特别关注此类情况。如果您有任何疑问或想进一步交流，请随时联系我。