获取/存储
取测试用例
的机器吗
测试（或组）
测试结果
合
配置兼容性
测试的机器
查询可用的
测试对当前
部署和运行
获取/存储
测试机器配置
配置可用吗
是
测试（或组）
测试结果
否
重新配置
测试机器
图8-2测试分配流程图
根据实现，第一步是查一下清单看测试用例或配置是否对测试可
用。当由测试用例开始时，下一步是开始在测试机器上部署操作系
统和应用程序配置。当由可用的配置开始时，第二步是将没有运行
的测试用例与当前的一组机器配置进行匹配。总的来说，前者在当
测试进行在一组已知的比较少的配置上时比较好，而后者在处理一
个比较多的配置时会稍微方便一些。
一台或更多的机器（有时称为测试控制器）在负责把测试分配给测
试实验室中等待的机器。这些机器实现了一个用套接字、消息队列
或者另一个多机器感知同步机制的连接系统。
一旦测试电脑的准备完成了，系统把测试复制到了目标机器，然后
测试执行。一个测试控制器等待测试完成（挂起或崩溃），然后从
测试电脑中获取日志文件。这个测试控制器可以直接把日志文件解
析出结果，但是更通常的是它把日志文件发回给测试用例管理器或
另一台电脑来解析和分析。
在自动化系统中的另一件要考虑的事情是一个可以知道测试什么时
候完成的机制。等一段固定的时间是危险的，因为测试在不同的系
统上会花不同的时间来完成。另一方面，简单地给一个测试大量的
时间来完成往往意味着测试机器将会不同程度地闲置。对于通过的
测试，简单的解决方案是让测试插件当测试进程退出的时候给控制
器发信号。此外，如果测试在指定的时间内没有完成（例如，插件
1937
---
## Page 1939
没有发送完成的信号），那么把一个最大时间长度和一个测试相关
联会触发控制器去从测试机器获取结果和崩溃时的日志信息。
失败分析
如果你测试全部感兴趣的地方，那么它们中的一些注定会失败。一
些失败可能是因为产品的bug，其他一些则可能是测试里的错误引起
的。在相关方面的一些失败可能是由相同的bug引起的。如果你在多
个配置上运行一个单一测试，那么它可能在多个（或者所有的）配
置上失败。如果相同的测试（例如，“验证widget控件激活菜单项”）
会同时在WindowsXP和WindowsVista上失败，失败分析可以分析日
志文件或其他测试辅助。如果它决定了是由同一个问题引起了这两
个失败，那么它就会仅仅汇报一个失败。
如果一个团队有许多测试和相当大的失败数目，这个测试团队将会
以花费一大堆时间在调查失败的测试上而告终一—如此多的时间，
实际上，以致他们只剩下很少的时间来进行实际的测试。不幸的替
代这个分析无力的方法就是简单地掩饰失败调查和报最好的希望
（实践经验往往就是以一个重大的bug在客户手中发现而告终）。
解决这一困境的方法就是把分析和测试失败的调查自动化。使分析
能有效进行的首要事情是对所有的测试有一致的日志实现。失败分
析系统实现的匹配算法能在失败测试的日志中查找相似点和识别可
能被同一个原因触发的失败。失败分析系统还可以为任何造成前溃
的测试自动分析调用栈或者其他调试信息。
当测试失败了，系统能创建一个新的bug报告或者更新一个已有的报
告，这取决于这个失败是一个新的问题或是已知的（见图8-3）。一
个对大规模测试自动化极好的投资回报要求自动化所有阶段的集
成、登记和bug跟踪系统。一个成功的解决方案大大地减少了对人工
干预分析测试结果和失败的需求。
报告
从管理层的角度来看，测试结果可能是测试团队最重要的工件了。
当前的和相关的测试结果是一个自动化系统的另一个主要方面，并
且测试结果是当前的、准确的和能简单得到的是很关键的。
1938
---
## Page 1940
自动化系统在报告中的角色是保证前面讨论的那些项目是可能的。
测试结果的跟踪和标记是必要的。对任何新的失败（自动失败分析
应该能过滤出之前测试中发现的错误），关于错误的信息（诸如调
用栈和日志文件）需要能随时准备和快速地获取到，才可以使测试
人员可能有效地诊断问题。
自动测试
用例
被测的
应用程序
测试失败？
已知错误
创建新的
更新已有的
bug报告
bug报告
bug数据库
图8-3自动失败分析
关于测试结果的真相
我知道的每一个运行自动化测试的团队都紧密地跟踪测试结果。这
些团队的大部分都有要达到或超过的目标，以及一个里程碑结束或
发布时候特定的通过率。例如，他们可能会对他们的测试有一个
95%通过率的目标，或者“优先级为1"的测试用例的通过率为100%。
当这些团队告诉我这些，我总是接着问如果他们没有达到他们的目
标他们会怎么做。我问，“如果你在一个里程碑阶段结束的时候，而
你的通过率仅有94%，你会做什么？”他们不可避免地回答，“噢，
这要看失败来定了。如果阻碍我们达到目标的错误不满足我们的门
槛，我们就让它过去了。"我想，这比告诉我他们就停止运行那个测
试（不幸的是，这是我曾经在我的职业生涯中听到过的）要好些。
1939
---
## Page 1941
所以，什么是合理的测试通过率目标呢？答案就在你的面前。与其
去定一个神奇的数字，你真正需要的是100%的失败调研并确保那些
失败中没有一个严重到阻碍发布。当然，如果你有一个高的通过
率，你将会有较少的失败需要调查，但是我没有从达到一个神奇的
通过率数字或让那个数字来驱使你的测试中看到任何特别的东西。
整合
一旦一整套东西放在了一起，测试自动化就真正开始对测试有帮
助。测试人员可以只把注意力集中在一件事情上：写奇妙的自动化
测试。这些测试不需要持续的维护，并且总是生成有意义的可操作
的结果。
图8-4显示了这里描述的一个完整的自动化系统。
测试用例管理或
测试用例数据库
测试结果
测试台
测试结果分析
图8-4大规模测试自动化
当然，如果你的自动化系统不处于这样的成熟度，你就不应该指望
它可以立刻达到这个样子。细节的实现和相关的文化变化，不可能
在一夜之间发生。对于任何大规模的改变来说，每次改变和增长一
点点是把一个没效率的系统变成一个漂亮的系统的最好方法。从一
开始就要写更好的测试：不好的测试自动化是自动化成功中一个最
大的障碍。此外要保证测试脚本和代码是源代码控制系统的一部
1940
---
## Page 1942
分，并且测试要通过一些持续的集成过程来确保具有一定程度的测
试质量和一致性。
然后，建立一个测试实验室来运行自动化测试。从想出一个方法来
分配测试给这些机器和执行测试并始。然后，开始收集和总结简单
的高层次的测试结果。接着，找到一个在bug数据库中记录测试失败
的方法。之后，调研你怎么能自动地调查失败并把新的失败和已知
的失败区分出来。最后，寻找任何其他测试人员会投入大量时间和
精力来使系统运行的那些地方，并找一个方法来自动化那些任务。
在你意识到以前，你将会有一个美的系统。随着它得到改善，你的
团队的测试人员将会有越来越多的时间去做他们最擅长的，并且是
他们当初（希望）从一开始就被雇用来做的事：测试软件。不然，
尽管有上千的自动测试和测试人员永远在忙，你可能实际上还是得
不到一个被好好测试过的产品。并且这可能成为一个本该是个美好
故事的悲伤结尾。
第9章美比丑好
Neal Norwitz
Michelle Levesque
Jeffrey Yasskin
注意
“美比丑好”，这是《TheZenofPython》（Python之禅）凹l这本书的
开头语。此书概括了Python领域在语言开发以及完美软件设计的指导
思想。
想象一下，你在写一段代码时，碰到一个奇怪的错误。你花了半天
去跟踪问题所在，却发现你并没有错。你的代码运行得完美无缺。
事实上，问题不在于代码，而是你使用的编译器或解释器有一个错
误。喉！要知道错在使用了一种整脚的程序语言，你可能早就放弃
这种语言去找一种稳定可靠的编程语言了。我们大多数人总以为编
程语言的稳定性是理所当然的，但实际上它并不是无代价地自动发
生的。Python解释器是由像其他软件一样的普通代码组成，它对失误
和错误同样的脆弱。那么如何保持稳定的编程语言，以便这些类型
1941
---
## Page 1943
的问题不再发生？此外，你如何确保在有机环境下正确的语言将不
可避免地发展和变化？当补丁程序可能来自世界上的任何人时，如
果没有一套全面的测试手段和一个强大的测试理念，结果不堪设
想。这也就难怪Python同时拥有两者。由于Python的不断成长，并
变得更为复杂，所以它的测试方法也在演变，以处理日益复杂的问
题。我们现在可以使用更先进的技术，如参考泄漏检测，自动连续
的构建，运用静态分析工具Valgrind3]，与Coverity④]或Klocwork]
来补充标准测试。上述的每一个测试环节都有助于确保每一个版本
的Python至少和上一个版本同样稳定，并使开发社区的贡献者能更容
易更有信心地提交新的程序。
稳定性的价值
Python是一种开源的面向开发社区的软件项目。它的成长、演化和提
高完全由志愿贡献者能够提交补丁的速度来决定。补丁可以小到
对于一个在线文件的某一行代码的修改。当一些人离开该项目，新
人进来替补，这种新的开发者和休闲提交者循环不断加入的模式维
持着Python的活力。口因此，该项目的生存依赖于保持较低的入门
标准，这样使那些对Python兴趣有限但又想尝试的人不会望而生畏。
综合测试不仅能防范新的Python贡献者由于对代码库不熟悉而可能出
的错误，而且还有助于降低这些新的责献者的入门标准。这种综合
测试体系能给一个复杂的代码库带来更多的保证，因为开发者能针
对修改的代码运行测试程序套件，以保证新的修改不导致任何错