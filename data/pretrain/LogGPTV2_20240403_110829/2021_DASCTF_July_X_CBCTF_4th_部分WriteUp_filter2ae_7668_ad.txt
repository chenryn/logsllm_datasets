            } else {
                window.location.href = 'login'
            }
        })
        .catch(function (error) { // 请求失败处理
            console.log(error);
        });
然后 hex 解码一下就完事了。
另外，可以根据数据库版本的语句来判断数据库类型：
Mysql `version()`、Sqlserver `@[@VERSION](https://github.com/VERSION
"@VERSION")`、Sqlite `sqlite_version()`
提示 hacker 可能是后端执行出错了，而 `sqlite_version()` 成功执行，说明是 sqlite，版本是 3.27.2。
唔，其实不用 hex 也可以的……
* * *
## Misc
###  red_vs_blue
> 红队和蓝队将开展66轮对抗，你能预测出每轮对抗的结果吗？
发现他这个记录在一个 session 里是固定不变的，写个脚本记录一下，错了重试就完事了。
（就是有点麻烦，脚本写的有点丑，还调了老半天……还是太菜了，唉
    """
    MiaoTony
    """
    from pwn import *
    import re
    from time import sleep
    # context.log_level = 'debug'
    context.timeout = 10
    # sh = remote('node4.buuoj.cn', 25451)
    sh = remote('117.21.200.166', 25451)
    choices = ['']*100
    cnt = 0
    c = 0
    sh.recvuntil(
        'To get the flag if you predict the results of all games successfully!\n')
    retry = False
    while True:
        sh.recvuntil('Game ')
        n = int(sh.recvuntil('\n').strip())
        print('===> n:', n)
        sh.recvuntil('choose one [r] Red Team,[b] Blue Team:\n')
        choice = choices[n]
        if choice:
            retry = True
        else:
            choice = 'b'
            retry = False
        sh.sendline(choice)
        for _ in range(2):
            sh.recvline()
        x = sh.recvline().decode()
        # print('====> x:', x)
        if 'successful' in x:
            c = re.findall(r'The number of successful predictions (\d+)', x)
            c = int(c[0])
            print('=====> successful cnt:', c)
            cnt += 1
            choices[n] = choice
            # if not retry:
            #     choices += choice
            print('=====------------------>>> choices:', ''.join(choices))
        elif 'Sorry!You are wrong!' in x:
            sh.sendlineafter('Play again? (y/n): ', 'y')
            choice = 'b' if choice == 'r' else 'r'
            choices[n] = choice
            print('=====-------->>> choices:', ''.join(choices))
            cnt = 0
        if cnt == 66:
            break
        # sleep(0.01)
    sh.interactive()
###  问卷题
`DASCTF{79f3bb47a2e2d46def82c052eccb7b80}`
###  ezSteganography
又是开局一张图。
Red 0 有线索
Green 平面一看就有隐写
提取得到一张图
qim quantization
> 利用 VoIP 编码器的码本编码特性划分码本来隐藏信息的方法叫做量化索引调制QIM
> 隐写：按照语音编码本来的原则将码本以某种规则划分并选择次优参数来嵌入秘密信息。
参考了 GitHub 上的
[QuantizationIndexModulation](https://github.com/pl561/QuantizationIndexModulation)
稍微改了一下
    """Implementation of QIM method from Data Hiding Codes, Moulin and Koetter, 2005"""
    from __future__ import print_function
    import sys
    import os
    # HOME = os.environ["HOME"]
    import numpy as np
    from PIL import Image
    import matplotlib.pyplot as plt
    class QIM:
        def __init__(self, delta):
            self.delta = delta
        def embed(self, x, m):
            """
            x is a vector of values to be quantized individually
            m is a binary vector of bits to be embeded
            returns: a quantized vector y
            """
            x = x.astype(float)
            d = self.delta
            y = np.round(x/d) * d + (-1)**(m+1) * d/4.
            return y
        def detect(self, z):
            """
            z is the received vector, potentially modified
            returns: a detected vector z_detected and a detected message m_detected
            """
            shape = z.shape
            z = z.flatten()
            m_detected = np.zeros_like(z, dtype=float)
            z_detected = np.zeros_like(z, dtype=float)
            z0 = self.embed(z, 0)
            z1 = self.embed(z, 1)
            d0 = np.abs(z - z0)
            d1 = np.abs(z - z1)
            gen = zip(range(len(z_detected)), d0, d1)
            for i, dd0, dd1 in gen:
                if dd0  小明去日本旅游时，发现了一张被核废水污染过的二维码，你能从中发现什么信息吗。
写个脚本提取出每个像素的颜色，可以发现 rgb 中只有一个通道有数值。
`chr` 读一下。
    from typing import Counter
    from PIL import Image
    img = Image.open('Nuclear wastewater.png')
    print(img.size)
    # (230, 230)
    w, h = img.size
    data = []
    for i in range(0, w):
        for j in range(0, h):
            r, g, b = img.getpixel((i, j))
            if (r, g, b) == (255, 255, 255):
                continue
            else:
                # print(r, g, b)
                for x in (r, g, b):
                    if x != 0:
                        data.append(chr(x))
    # print(''.join(data))
    r = Counter(data)
    info = r.most_common()
    print(''.join([x[0] for x in info]))
    # theKEYis:#R@/&p~! 后面有一堆乱码
得到压缩包密码 `#R@/&p~!`，里面内容为
    OIENKMAJOLEOKMAJOHECLHBCPGFDLNBIPAFFLPBKPIFNLEBBPPFKLFBAPEFBLJBMPHFCLEBBPMFJLEBBPLFOLHBCPCFHLNBIPDFGLHBCPPFKLIBNPHFCLDBGPGFDLBBEPPFKLHBCPPFKLMBJPDFGLCBHPHFCLBBEPIFNLNBIPOFLLMBJPDFGLBBEPEFBLBBEPPFKLGBDPOFLLABFPMFJLABFPCFHLNBIPDFGLMBJPEFBLIBNPHFCLLBOPOFLLBBEPIFNLDBGPAFFKAAFOPEKKDAGOGEDKJAMOAEFKLAOOIENLIBNPEFBLLBOPJFMLFBAPLFOLFBAPNFILEBBPLFOLFBAPAFFLJBMPHFCLJBMPBFELIBNPHFCLIBNPNFILBBEPPFKKPAKOHECKMAJOAEFKKAPOIENKFAAOLEOKHACOPEKKAAFOPEKKAAFOFEAKJAMOHECKLAOODEGKMAJOAEFKPAKONEIKBAEOIENKAAFODEGKAAFOPEKKLAOOOELKJAMOAEFKGADOFEAKEABOLEOKOALOLEOKJAMOAEFKIANOLEOKIANOEEBKFAAOHECKBAEOIENKJAMOKEPKMAJPMFJLCBHPEFBLNB
可以发现有零宽字符隐写，包含了 200c 200d 200e
Citrix CTX1 decode
* * *
## Crypto
###  Yusa的密码学签到——BlockTrick
题目源码
    from Crypto.Cipher import AES
    import os
    def pad(a):
        size = (16-len(a)%16)%16
        a += chr(size)*size
        return a
    iv = os.urandom(16)
    key = os.urandom(16)
    enc = AES.new(key,AES.MODE_CBC,iv)
    print(iv.encode('hex'))
    for _ in range(2):
        try:
            trick = raw_input("")
            trick = pad(trick.decode('hex'))
            cipher = enc.encrypt(trick)
            if trick == cipher and trick != "" :
                with open("flag.txt") as f:
                    print(f.read())
                    exit()
            else:
                print(cipher.encode('hex'))
                print("Try again")
        except:
            exit()
AES MODE_CBC，需要加密前后的结果相同且不为空。可以参考 [CBC
的原理框图](https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F)。
这里就是两轮 CBC，只需要把发过来的再返回去两次就完事了。
原理大概是，第一次将初始向量 IV 与自己进行异或，得到一组零向量，把经过 CBC 后得到的 cipher
再与本身异或也是得到零向量，而这个加密器可以看作一种输入到输出的映射，对于同样的零向量输入，结果就一样了。
* * *
## 小结
这篇写得好累啊……
其实还是挺有味道的，学到了不少。
喵喵是 fw，喵呜呜呜（
欢迎各位大师傅来 [咱博客](https://miaotony.xyz/?utm_source=anquanke) 逛逛喵
_（溜了溜了喵_