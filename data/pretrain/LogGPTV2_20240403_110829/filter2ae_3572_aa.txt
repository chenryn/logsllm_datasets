一篇以前写的文，现在修改补充了些许，发了上来
## 前言
以太坊中的智能合约蜜罐相对于互联网蜜罐的目的有着本质的区别：后者着重在于诱导攻击,然后做检测分析，来收集攻击手法与漏洞；而前者更像是一场赌博的骗局，利用种种方法，诱导目标转账进入合约，完成韭菜收割。但是这个蜜罐的名词也是挺恰当的，就也这么叫了。
有趣的是智能合约蜜罐其目标锁定在智能合约开发者，智能合约代码审计人员，略懂区块链技术的信息安全人员(emmmm)
通常而言智能合约蜜罐的欺骗性在于区块链漏洞，逻辑漏洞；又或是赌博合约。  
此处介绍的是利用第三方组件导致的智能合约蜜罐。
## 智能合约蜜罐的奇特组件——区块链浏览器
蜜罐合约地址：[0xcEA86636608BaCB632DfD1606A0dC1728b625387](https://etherscan.io/address/0xcEA86636608BaCB632DfD1606A0dC1728b625387)
我们可以通过Etherscan浏览器看到该合约的外部交易，内部调用，代码，代码abi等信息
### 智能合约代码分析
先来看关键的智能合约代码
    pragma solidity ^0.4.20;
    contract QUESTION
    {
        //玩家 输入答案字符串开始玩游戏
        function Play(string _response)
        external
        payable
        {
            //需要该玩家地址不为智能合约地址
            require(msg.sender == tx.origin);
            //如果答案的sha256哈希=答案hash 并且 传入的押金超过1ether
            if(responseHash == keccak256(_response) && msg.value>1 ether)
            {
                //给该玩家转账该智能合约所有的钱
                msg.sender.transfer(this.balance);
            }
        }
        string public question;
        address questionSender;
        bytes32 responseHash;
        //开始游戏，传入题目和答案的字符串
        function StartGame(string _question,string _response)
        public
        payable
        {
            //如果答案hash没有被赋值
            if(responseHash==0x0)
            {
                //计算sha256赋值答案hash
                responseHash = keccak256(_response);
                //赋值题目字符串
                question = _question;
                //赋值题目发送者的地址，为调用者的地址
                questionSender = msg.sender;
            }
        }
        function StopGame()
        public
        payable
        {
            //需要调用者等于题目发送者
           require(msg.sender==questionSender);
           //给调用者转账所有eth
           msg.sender.transfer(this.balance);
        }
        //更新一个新的问题，传入题目字符串，答案hash
        function NewQuestion(string _question, bytes32 _responseHash)
        public
        payable
        {
            //需要调用者等于题目发送者
            require(msg.sender==questionSender);
            //更新题目
            question = _question;
            //更新答案hash
            responseHash = _responseHash;
        }
        //该智能合约fallback函数可以接受钱
        function() public payable{}
    }
很简单的一个合约，大致就是猜答案:hash符合就给所有钱
这是明显存在漏洞的智能合约：
  1. 在区块链上的交易调用都是可见的，我们可以在区块链浏览器中看到（相当于是默认允许中间人攻击的监听）。在Etherscan中可以直接解密。而在函数的StartGame函数中，response是直接明文传入然后再进行hash存储，即问题设置的答案完全可以被知道
  2. Play()只允许由用户账户调用，而不允许由合约账户调用（require(msg.sender == tx.origin);）。这意味着当答题者发布交易调用Play()，问题的部署者可能会在交易池中一直监听。当监听到Play()交易时，问题部署者用更高的gasprice提交newQuestion函数去修改答案。从而使答题者的答案错误，完成欺骗。但是这种攻击较为繁琐，也具有一定风险。
也有一些奇怪的地方。
**疑点1** ：
  * NewQuestion(string _question, bytes32 _responseHash)是用responseHash设置答案。
  * StartGame(string _question,string _response)却是用respon明文设置答案
既然有函数知道用responseHash传入，也就代表着开发者应该是意识到了这个问题。这里是故意为之还是萌新犯蠢？
**疑点2** ：
  * if(responseHash==0x0) 其他地方用require作为异常抛出，唯独这里用if做判断，将会不抛出异常。代码风格有点不统一。
### Etherscan区块链浏览器上的交易分析
由于这是一个已经收网成功的蜜罐合约，我们队区块链浏览器上已经产生的交易进行分析，看看这个蜜罐钓鱼的过程。
Etherscan上的交易记录：[0xCEA86636608BACB632DFD1606A0DC1728B625387](https://etherscan.io/address/0xCEA86636608BACB632DFD1606A0DC1728B625387)
包括：4个外部交易，1个内部交易
> 在2020.02.14去看Etherscan，会发现交易不会直接帮我们解析出调用过程的参数，但是可以用下面介绍了另一种方法得到解析。
**按照时间线排序分析**
外部交易0xf9f25d... 0x8F1F6FEb78BA90ad003E1B7408caA164aD90830d地址创建合约(创建合约)
外部交易0x41365... 创建者使用交易调用合约函数Startgame(),带上1.03Ether（部署问题和答案，从结果来看，这应该是一个抛饵行为）
外部交易0xcb589e... 受害者使用交易调用合约函数Play(),没有value，即没有带钱（受害者试探，由于没有带钱是不会通过if判断的）
外部交易0x8486f4...
受害者使用交易调用合约函数Play(),带上1.05Ether的钱（受害者上钩，提交了1Ether以上的钱，讲道理按照逻辑这里应该获得合约返回的亲，但是并没有这笔交易）
内部调用0xb68f60...
合约把所有钱转账给了另一个合约0x4B2838d9326bD5126F0573D9b5c71C0626Ab28f2（创建者收网，暴露出了一个合约地址）
我们得到两个地址，我们给他取个别名：  