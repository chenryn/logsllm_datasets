>>> state.solver.eval_atleast(x + y, 5) # 给出至少 5 个
结果，否则抛出异常
[16L, 13L, 8L, 9L, 17L]
>>> state.solver.eval_exact(x + y, 5) # 有正好 5 个结
果，否则抛出异常
>>> state.solver.min(x + y) # 给出最小的结果
7L
>>> state.solver.max(x + y) # 给出最大的结果
17L
>>> state.solver.eval(x + y, extra_constraints=[x + y  5]) # 额外添加临时限制条件
8L
>>> state.solver.eval(x + y, cast_to=str) # 指定输出格式
'\x00\x00\x00\x00\x00\x00\x00\x08'
>>> state.solver.add(x - y > 10) # 添加不可满足的
限制条件
[ 0xa>]
>>> state.satisfiable() # 无法求解
False
786
5.3.1 angr
angr 使用 z3 作为约束求解器，而 z3 支持 IEEE754 浮点数的理论，所以我们也可
以使用浮点数。使用 FPV 和 FPS 即可创建浮点数值和浮点符号：
>>> state = proj.factory.entry_state() # 刷新状态
>>> a = state.solver.FPV(3.2, state.solver.fp.FSORT_DOUBLE) # 浮
点数值
>>> a
>>> b = state.solver.FPS('b', state.solver.fp.FSORT_DOUBLE) # 浮
点符号
>>> b
>>> a + b
>>> a + 1.1
>>> a + 1.1 > 0
>>> b + 1.1 > 0
>>> state.solver.add(b + 2 ]
>>> state.solver.add(b + 2 > -1)
[]
>>> state.solver.eval(b)
-2.4999999999999996
bitvectors 和浮点数的转换使用 raw_to_bv 和 raw_to_fp ：
787
5.3.1 angr
>>> a.raw_to_bv()
>>> b.raw_to_bv()
>>> state.solver.BVV(0, 64).raw_to_fp()
>>> state.solver.BVS('x', 64).raw_to_fp()
或者如果我们需要指定宽度的 bitvectors，可以使用 val_to_bv 和
val_to_fp ：
>>> a
>>> a.val_to_bv(12)
>>> a.val_to_bv(12).val_to_fp(state.solver.fp.FSORT_FLOAT)
程序状态
state.step() 用于模拟执行的一个 basic block 并返回一个 SimSuccessors 类
型的对象，由于符号执行可能产生多个 state，所以该对象的 .successors 属性
是一个列表，包含了所有可能的 state。
程序状态 state 是一个 SimState 类型的对
象， angr.factory.AngrObjectFactory 类提供了创建 state 对象的方法：
.blank_state() ：返回一个几乎没有初始化的 state 对象，当访问未初始化
的数据时，将返回一个没有约束条件的符号值。
.entry_state() ：从主对象文件的入口点创建一个 state。
.full_init_state() ：与 entry_state() 类似，但执行不是从入口点开始，
而是从一个特殊的 SimProcedure 开始，在执行到入口点之前调用必要的初始
化函数。
.call_state() ：创建一个准备执行给定函数的 state。
788
5.3.1 angr
下面对这些方法的参数做一些说明：
所有方法都可以传入参数 addr 来指定开始地址
可以通过 args 传入参数列表， env 传入环境变量。类型可以是字符串，
也可以是 bitvectors
通过传入一个符号 bitvector 作为 argc ，可以将 argc 符号化
对于 .call_state(addr, arg1, arg2, ...) ， addr 是希望调用的函数
地址， argN 是传递给函数的 N 个参数，如果希望分配一个内存空间并传递
指针，则需要使用 angr.PointerWrapper() ；如果需要指定调用约定，可
以传递一个 SimCC 对象作为 cc 参数
创建的 state 可以很方便地复制和合并：
789
5.3.1 angr
>>> s = proj.factory.blank_state()
>>> s1 = s.copy() # 复制 st
ate
>>> s2 = s.copy()
>>> s1.mem[0x1000].uint32_t = 0x41414141
>>> s2.mem[0x1000].uint32_t = 0x42424242
>>> (s_merged, m, anything_merged) = s1.merge(s2) # 合并将
返回一个元组
>>> s_merged # 表示合
并后的 state
>>> m # 描述 st
ate flag 的符号变量
[, ]
>>> anything_merged # 描述是
否全部合并的布尔值
True
>>> aaaa_or_bbbb = s_merged.mem[0x1000].uint32_t # 此时的
值需要根据 state flag 来判断
>>> aaaa_or_bbbb
 at 0x1000>
我们已经知道使用 state.mem 可以很方便的操作内存，但如果你想要对内存进
行原始的操作时，可以使用 state.memory 的 .load(addr, size) 和
.store(addr, val) ：
790
5.3.1 angr
>>> s = proj.factory.blank_state()
>>> s.memory.store(0x4000, s.solver.BVV(0x0123456789abcdef, 128)
) # 默认大端序
>>> s.memory.load(0x4008, 8)
# 默认大端序
>>> s.memory.load(0x4008, 8, endness=angr.archinfo.Endness.LE)
# 小端序
>>> s.mem[0x4008].uint64_t.resolved
# 与 mem 对比
>>> s.memory.store(0x4000, s.solver.BVV(0x0123456789abcdef, 128)
, endness=angr.archinfo.Endness.LE) # 小端序
>>> s.memory.load(0x4000, 8)
# 默认大端序
>>> s.memory.load(0x4000, 8, endness=angr.archinfo.Endness.LE)
# 小端序
>>> s.mem[0x4000].uint64_t.resolved
# 与 mem 对比
可以看到默认情况下 store 和 load 都使用大端序的方式，但可以通过指定参数
endness 来使用小端序。
通过 state.options 可以对 angr 的行为做特定的优化。我们既可以在创建
state 时将 option 作为参数传递进去，也可以对已经存在的 state 进行修改。例
如：
791
5.3.1 angr
>>> s = proj.factory.blank_state(add_options={angr.options.LAZY_
SOLVES}) # 启用 options
>>> s = proj.factory.blank_state(remove_options={angr.options.LA
ZY_SOLVES}) # 禁用 options
>>> s.options.add(angr.options.LAZY_SOLVES) # 启用 option
>>> s.options.remove(angr.options.LAZY_SOLVES) # 禁用 option
SimState 对象的所有内容（包括 memory 、 registers 、 mem 等）都是以插件
的形式存储的，这样做的好处是将代码模块化，如果我们想要在 state 中存储其他
的数据，那么直接实现一个插件就可以了。
state.globals ：实现了一个标准的 Python dict 的接口，通过它可以在一
个 state 上存储任意的数据。
state.history ：存储了一个 state 在执行过程中的路径历史数据，它是一
个链表，每个节点表示一个执行，通过像 history.parent.parent 这样的
方式进行遍历。为了得到 history 中某个具体的值，可以使用迭代器
history.NAME ，这样的值保存在 history.recent_NAME 。如果想要快速
得到这些值的一个列表，可以查看 .hardcopy 。
history.descriptions ：对 state 每次执行的描述的列表。
history.bbl_addrs ：state 每次执行的 basic block 的地址的列表，每
次执行可能多于一个地址，也可能是被 hook 的 SimProcedures 的地址。
history.jumpkinds ：state 每次执行时改变控制流的操作的列表。
history.guards ：state 执行中遇到的每个分支的条件的列表。
history.events ：state 执行中遇到的可能有用的事件的列表。
history.actions ：通常是空的，但如果启用了 options.refs ，则
会记录程序执行时访问的所有内存、寄存器和临时变量。
state.callstack ：用于记录函数调用堆栈，它是一个链表，可以直接遍历
state.callstack 获得每个调用的 frame。
callstack.func_addr ：当前正在执行的函数的地址。
callstack.call_site_addr ：调用当前函数的 basic block 的地址。
callstack.stack_ptr ：从当前函数开头开始计算的堆栈指针的值。
callstack.ret_addr ：当前函数的返回地址。
模拟管理器
792
5.3.1 angr
模拟管理器（Simulation Managers）是 angr 最重要的控制接口，它允许同时对各
组状态的符号执行进行控制，同时应用搜索策略来探索程序的状态空间。states 会
被整理到 stashes 里，从而进行各种操作。
我们用一个小程序来作例子，它有 3 种可能性，也就是 3 条路径：
#include 
#include 
int main() {
int num = 0;
scanf("%d", &num);
if (num > 50) {
if (num >> proj = angr.Project('a.out', auto_load_libs=False)
>>> state = proj.factory.entry_state()
>>> simgr = proj.factory.simgr(state) # 创建 Simulati
onManager
>>> simgr
>>> simgr.active # active stash
[]
>>> while len(simgr.active) == 1: # 一直执行到 act
ive stash 中有不止一个 state
... simgr.step()
...
...
>>> simgr.active # 有 2 个 activ
e state
[, ]
>>> simgr.step() # 同时推进 2 个
state
>>> simgr.active # 得到 3 个 sta
te
[, , ]
>>> simgr.run() # 一直执行到程序
结束
>>> simgr.deadended # deadended st
ash
[, , ]
于是我们得到了 3 个 deadended 状态的 state。这一状态表示一个 state 一直执行
到没有后继者了，那么就将它从 active stash 中移除，放到 deadended stash 中。
794
5.3.1 angr
stash 默认的类型有下面几种，当然你也可以定义自己的 stash：
active ：默认情况下存储可以执行的 state。
deadended ：当 state 无法继续执行时会被放到这里，包括没有更多的有效
指令，没有可满足的后继状态，或者指令指针无效等。
pruned ：当启用 LAZY_SOLVES 时，除非绝对必要，否则是不会在执行中
检查 state 的可满足性的。当某个 state 被发现是不可满足的，则 state 会被回
溯上去，以确定最早是哪个 state 不可满足。然后这之后所有的 state 都会被
放到 pruned stash 中。
unconstrained ：如果在 SimulationManager 创建时启用了
save_unconstrained ，则那些没有约束条件的 state 会被放到
unconstrained stash 中。
unsat ：如果在 SimulationManager 创建时启用了 save_unsat ，则那些
被认为不可满足的 state 会被放到 unsat stash 中。
另外还有一个叫做 errored 的列表，它不是一个 stash。如果 state 在执行过程
中发生错误，则该 state 会被包装在一个 ErrorRecord 对象中，该对象包含 state
和引发的错误，然后这个对象被插入到 errored 中。
可以使用 .move() ，将 filter_func 筛选出来的 state 从 from_stash 移动
到 to_stash ：
>>> simgr.move(from_stash='deadended', to_stash='more_then_50',
filter_func=lambda s: '100' in s.posix.dumps(1))
每个 stash 都是一个列表，可以用列表的操作来遍历它，同时 angr 也提供了一些
高级的方法，例如在 stash 名称前面加上 one_ ，表示该 stash 的第一个 state；
在名称前加上 mp_ ，将得到一个 mulpyplexed 版本的 stash：
795
5.3.1 angr
>>> for s in simgr.deadended + simgr.more_then_50:
... print hex(s.addr)
...
0x1000068L
0x1000020L
0x1000068L
>>> simgr.one_more_then_50
>>> simgr.mp_more_then_50
MP([, ])
>>> simgr.mp_more_then_50.posix.dumps(0)
MP(['-2424202024@', '+0000000060\x00'])
最后再介绍一下模拟管理器所使用的探索技术（exploration techniques）。默认策
略是广度优先搜索，但根据目标程序或者需要达到的目的不同，我们可能需要使用
不同的探索技术，通过调用 simgr.use_technique(tech) 来实现，其中 tech
是一个 ExplorationTechnique 子类的实例。angr 内置的探索技术在