within a small constant factor of the other resources of
A plus the time to run the setup algorithm.
Intuitively, Theorem 6.2 follows from the fact
that
KR-FSPRG runs SBG backward, which means that if
an adversary A against KR-FSPRG in possession of the
ﬁrst i member states can distinguish a key Kl, l > i,
from random, then an adversary B against SBG in pos-
session of the (MW − i)-th state output of next could
distinguish the (MW − l)-th key output of next from
random. The actual proof involves B guessing the num-
ber of WindO oracle queries that A will make. The full
proof is in [24].
7 Key regression from standard PRGs
We proceed by showing how to build secure key re-
gression schemes from standard (not forward-secure)
pseudorandom bit generators; we call our PRG-based
construction KR-PRG. Our approach capitalizes on a
method from Bellare and Yee [10] for building FSPRGs
from standard PRGs; we recall the Bellare-Yee method
in Section 7.1. As with KR-FSPRG from Section 6, we
believe that KR-PRG will be of independent interest.
7.1 FSPRGs from pseudorandom bit genera-
tors
Pseudorandom bit generators. A pseudorandom bit
generator (PRG) [10, 11, 51] is a function G: {0, 1}k →
{0, 1}k+l that takes as input a k-bit seed and returns a
string that is longer than the seed by l bits, k, l ≥ 1. The
standard security notion for a PRG is as follows. If A is
an adversary, we let
Advprg
F,A
= Prh K
−Prh x
$← {0, 1}k ; x ← G(K) : A(x) = 1 i
$← {0, 1}k+l
: A(x) = 1 i
denote the PRG-advantage of A in attacking G. Under
the concrete security approach, G is said to be a “secure
PRG” if the PRG-advantage of all adversaries A using
reasonable resources is “small.”
A PRG-based FSPRG. Bellare and Yee [10] show
how to construct an FSPRG from a standard PRG.
We dub their scheme FSPRG-PRG and recall it in
Construction 7.1 below. The FSPRG-PRG’s seed algo-
rithm selects a random k-bit initial seed. The next algo-
rithm, on input a k-bit string stg, computes the (k+l)-bit
string G(stg) and outputs the ﬁrst k bits of G(stg) as the
next state and the remaining l bits as the key.
Construction 7.1 [FSPRG-PRG, Construction 2.2 of
[10].] Given a PRG G : {0, 1}k → {0, 1}k+l we can
construct a FSPRG SBG = (seed, next) as shown below
Alg. seed
$← {0, 1}k
stg0
return stg0
Alg. next(stgi)
$← G(stgi)
r
stgi+1 ← ﬁrst k bits of r
K ← last l bits of r
return (stgi+1, K)
The output space of SBG is OutSpSBG = {0, 1}l and
MaxLenSBG = ∞.
and we allow the trivial case that q = 0. Lemma 7.2
states that if G is a secure PRG, then the stateful bit gen-
erator FSPRG-PRG built from G via Construction 7.1
will also be secure. Speciﬁcally, if G is a secure PRG,
then Advprg
G,B must be small for all adversaries B using
reasonable resources. Further, if an adversary A against
FSPRG-PRG uses reasonable resources, then the num-
ber of oracle queries q that it makes must also be small
and B must also use reasonable resources. These prop-
erties, coupled with Equation (2), means that the advan-
tage of all adversaries A against FSPRG-PRG that use
reasonable resources must be small; i.e., FSPRG-PRG
must be FSPRG-secure.
Lemma 7.2 [Theorem 2.3 of [10].] Let G : {0, 1}k →
{0, 1}k+l be a PRG, and let SBG be the FSPRG built
using G according to Construction 7.1. Given an adver-
sary A attacking SBG that makes at most q queries to
its oracle, we can construct an adversary B such that
Advfsprg
SBG,A ≤ 2q · Advprg
G,B
(2)
where B uses within a small constant factor of the re-
sources of A and computes G up to q times.
7.2 A PRG-based key regression scheme
Combining KR-FSPRG and FSPRG-PRG in the nat-
ural way yields a key regression scheme that we call
KR-PRG. For concreteness we describe KR-PRG in de-
tail below.
Construction 7.3 [KR-PRG.]
Let G: {0, 1}k →
{0, 1}k+l be a pseudorandom bit generator. We
can construct a key regression scheme KR-PRG =
(setup, wind, unwind, keyder) from G as follows. MW
is a positive integer and a parameter of the construction.
Alg. setup
stmMW
For i = MW downto 2 do
$← {0, 1}k
stmi−1 ← unwind(stmi)
stp ← h1, stm1, . . . , stmMWi
Return stp
Alg. wind(stp)
If stp = ⊥ then return (⊥, ⊥)
Parse stp as hi, stm1, . . . , stmMWi
If i > MW return (⊥, ⊥)
stp0 ← hi + 1, stm1, . . . , stmMWi
Return (stp0, stmi)
Alg. unwind(stm)
x ← G(stm) ; stm0 ← ﬁrst k bits of x
Return stm0
Alg. keyder(stm)
The following lemma comes from Bellare and Yee [10]
except that we treat q as a parameter of the adversary
x ← G(stm) ; K ← last l bits of x
Return K
The derived key space for KR-PRG is DK = {0, 1}l.
In order for setup and wind to be “efﬁcient,” we assume
that MW has some “reasonable” value like 220; in the
asymptotic setting we would require that MW be poly-
nomial in some security parameter.
Security. The theorem below states that if G is a secure
PRG, then the resulting key regression scheme KR-PRG
built from G via Construction 7.3 will be KR-secure.
Speciﬁcally, Theorem 7.4 says that given an adversary
A against KR-PRG that uses reasonable resources, and
assuming that MW is small, one can construct an adver-
sary B against G such that B uses reasonable resources
and Equation (3) in the theorem statement holds; q is the
minimum of MW and the maximum number of wind and
key derivation oracle queries that A makes. These prop-
erties imply security for KR-PRG since, if G is PRG-
secure and since A uses reasonable resources, Advprg
G,B
and q must both be small, which means that Advkr
KR,A,
the advantage of A in attacking KR-PRG, must be small
as well.
Theorem 7.4 If G: {0, 1}k → {0, 1}k+l is a secure
PRG, then the key regression scheme KR built from
G via KR-PRG (Construction 7.3) is KR-secure. Con-
cretely, given an adversary A attacking KR, we can
construct an adversary B attacking G such that
KR,A ≤ 2 · (q + 1)2 · Advprg
Advkr
(3)
G,B
where q is the minimum of MW and the maximum num-
ber of queries A makes to its WindO and KeyderO ora-
cles. Adversary B uses within a small constant factor of
the resources of A, plus the time to compute setup and
G MW times.
Proof of Theorem 7.4: Construction 7.3 is exactly
Construction 6.1 built from the forward secure pseudo-
random bit generator deﬁned by Construction 7.1. The
theorem statement therefore follows from Theorem 6.2
and Lemma 7.2.
8 The security of KR-AES
Having shown how to construct secure key regres-
sion schemes from secure pseudorandom bit genera-
tors (KR-PRG and Construction 7.3), we are now able
to prove the security of KR-AES (Construction 5.2) by
observing that KR-AES is exactly KR-PRG with k =
l = 128 and with the PRG G deﬁned as G(X) =
AESX (0128)kAESX (1128) for all X ∈ {0, 1}128. Be-
fore stating our formal result for KR-AES, we ﬁrst re-
call the standard notion of a pseudorandom permuta-
tion [8, 35].
Pseudorandom permutations.
Let E: {0, 1}k ×
{0, 1}l → {0, 1}l be a block cipher and let Perm(l) de-
note the set of all permutations on {0, 1}l. If A is an
adversary with access to an oracle, we let
Advprp
E,A
= Prh K
−Prh g
$← {0, 1}k : AEK (·) = 1 i
$← Perm(l) : Ag(·) = 1 i
denote the PRP-advantage of A in attacking E. Under
the concrete security approach, E is said to be a “secure
PRP” if the PRP-advantage of all adversaries A using
reasonable resources is “small.”
Instantiating KR-AES from KR-PRG.
As noted
above, it is straightforward to instantiate KR-AES from
KR-PRG. Numerous other instantiations exist, e.g., to
use a block cipher E with k > l, one might deﬁne G
as G(X) = EX (α1)kEX (α2)k . . . where α1, α2, . . .
are distinct l-bit strings. Since KR-AES is one of our
preferred constructions, we state the following theorem
speciﬁcally for KR-AES; it is straightforward to extend
our result to other natural instantiations of KR-PRG.
The security proof for KR-AES is in the standard model
and assumes that AES is a secure pseudorandom permu-
tation.
Theorem 8.1 If AES is a secure PRP, then KR-AES
(Construction 5.2) is KR-secure. Concretely, given an
adversary A attacking KR-AES, we can construct an
adversary B attacking AES such that
Advkr
KR,A ≤ 2 · (q + 1)2 ·(cid:16)Advprp
AES,B + 2−128(cid:17) (4)
where q is the minimum of MW and the maximum num-
ber of queries A makes to its WindO and KeyderO or-
acles. Adversary B makes 2 oracle queries and uses
within a small constant factor of the resources of A, plus
the time to compute setup and AES 2MW times.
We interpret Theorem 8.1 as follows. Suppose A is
an adversary against KR-AES that uses reasonable re-
sources, and in particular makes at most a reasonable
number of queries q to its wind and key derivation or-
acles. Then we can construct an adversary B against
AES that also uses reasonable resources when MW is
small. Because of the resource restrictions on B and un-
der the assumption that AES is a secure PRP, it follows
that Advprp
are small, then by Equation (4) Advkr
small, meaning that KR-AES must be KR-secure.
AES,B must be small. If both q and Advprp
AES,B
KR,A must also be
As a concrete example of the bound in Theorem 8.1,
consider the case where MW and q are both 220. Then
Equation (4) becomes
Advkr
KR,A ≤ 242 · Advprp
AES,B + 2−86 ,
which means that unless A exploits a property of AES
itself, A will not be able to break the security of KR-AES
with probability better than 2−86. Since it is widely be-
lieved that AES is secure, Theorem 8.1 tells us that it is
reasonable to assume that KR-AES is secure for reason-
able choices of MW.
the
To prove Theorem 8.1 we use Theorem 7.4,
and
relationship between KR-AES and KR-PRG,
the fact
the function G deﬁned as G(X) =
AESX (0128)kAESX (1128), X ∈ {0, 1}128, is a secure
PRG if AES is a secure PRP. Details in [24].
that
9 The security of KR-SHA1
Although we derived KR-SHA1 from the key ro-
tation scheme in Figure 3, we ﬁnd that one can
also view KR-SHA1 as an instantiation of KR-PRG
with k = l = 160 and G deﬁned as G(X) =
SHA1(X)kSHA1(08kX) for all X ∈ {0, 1}160. If we
view SHA1 as a random oracle, then G is a secure PRG
in the random oracle model, and we can use this observa-
tion and Theorem 7.4 to prove the security of KR-SHA1
in the random oracle model.
Here we give a direct proof of security for KR-SHA1
in order to obtain a tighter bound. The tightness is-
sue with using KR-PRG and Theorem 7.4 to prove the
security of KR-SHA1 rests in the fact that the advan-
tage of an adversary in attacking G in the random oracle
model must be upper bounded by a function of the num-
ber of random oracle queries that the adversary makes,
and this function will percolate through the bound in
Theorem 7.4.
In what follows we view SHA1(·) in KR-SHA1’s
unwind algorithm and SHA1(08k·) in KR-SHA1’s
keyder algorithm as two different random oracles.
Construction 9.1, KR-RO, makes this generalization of
KR-SHA1 concrete. We choose not to model SHA1(·)
and SHA1(08k·) as a single random oracle because we
do not wish to restrict our analysis to the case where
keyder must preﬁx its inputs to the random oracle with
the zero byte.
Construction 9.1 [KR-RO.]
Let H1: {0, 1}k →
{0, 1}k and H2: {0, 1}k → {0, 1}l be random or-
acles. We can construct a key regression scheme
KR-RO = (setup, wind, unwind, keyder) from H1
and H2 as shown below. MW is a positive integer and a
parameter of the construction.
Alg. setupH1,H2
$← {0, 1}k
stmMW
For i = MW downto 2 do
stmi−1 ← unwindH1,H2(stmi)
stp ← h1, stm1, . . . , stmMWi
Return stp
Alg. windH1,H2(stp)
If stp = ⊥ then return (⊥, ⊥)
Parse stp as hi, stm1, . . . , stmMWi
If i > MW return (⊥, ⊥)
stp0 ← hi + 1, stm1, . . . , stmMWi
Return (stp0, stmi)
Alg. unwindH1,H2 (stm)
stm0 ← H1(stm) ; Return stm0
Alg. keyderH1,H2 (stm)
K ← H2(stm) ; Return K
The derived key space for KR-RO is DK = {0, 1}l.
In order for setup and wind to be “efﬁcient,” we assume
that MW has some “reasonable” value like 220; in the
asymptotic setting we would require that MW be poly-
nomial in some security parameter.
The following theorem states that Construction 9.1 is
secure in the random oracle model for adversaries that
make a reasonable number of queries to their random
oracles.
scheme
regression
Theorem 9.2 The
in
key
secure in the random oracle
Construction 9.1 is
model. Formally,
let H1: {0, 1}k → {0, 1}k and
H2: {0, 1}k → {0, 1}l be random oracles and let KR
be the key regression scheme built from H1, H2 via
KR-RO (Construction 9.1). Then for any adversary A
we have that
Advkr
KR,A ≤
(MW)2
2k+1 +
q · MW
2k − MW − q
,
(5)
where q is the maximum number of queries total that A
makes to its H1 and H2 random oracles.
As a concrete example of the bound in Theorem 9.2,
consider the case where MW = 220 and an adversary
A makes at most q = 240 queries to its random ora-
cles. Then Equation (5) tells us that the advantage of
A in attacking KR-RO is upper bounded by 2−98. Al-
though SHA1 is not a random oracle, Theorem 9.2 gives
us conﬁdence that KR-SHA1 may provide a reasonable
level of security in practice; see Section 5 for additional
discussion.
We prove Theorem 9.2 in [24], but remark that we
could simplify the proof if, instead of deﬁning KR-RO
as in Construction 9.1, we include the indices i in the
member states, and hence in the inputs to H1 and H2.
We choose to omit the indices i from the member states
in KR-RO because we view KR-RO and KR-SHA1 as
closer to what developers might wish to implement in
practice.
We remark that in addition to viewing KR-SHA1 as
an instantiation of KR-PRG, one could view KR-AES as
an instantiation of KR-RO with k = l = 128 and, for
all X ∈ {0, 1}128, with H1(X) deﬁned as AESX (0128)
and H2(X) deﬁned as AESX (1128); Difﬁe and Hell-
man suggest using a block cipher as a hash function in
this manner in [16]. We choose to prove the security
of KR-AES directly in Section 8, rather than instanti-
ate KR-RO, because we desire a proof of security for
KR-AES in the standard model.