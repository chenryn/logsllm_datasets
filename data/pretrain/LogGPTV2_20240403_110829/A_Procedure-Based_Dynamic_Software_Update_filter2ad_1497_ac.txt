we set a watched area by sending a  "PCWATCH" control 
message  with  operands,  which  are  the  starting  address 
(pr-vaddr),  size (pr-size)  and  the watch  type (pr-wflags). 
Then,  we  set 
trap  by  sending  a 
"PCSFAULT" control message. 
the  watchpoint 
Once a watchpoint trap is set, the old version procedure 
is modified  such that  it jumps to the  mapped  new version 
procedure  when  it  is  called.  (In  reality,  we  check  again 
whether  the  target  procedure  is  activated  after  setting  a 
watched  area to ensure atomicity;  if  it  is  activated,  we go 
back  to  the  previous  step.)  This jump  operation  can  be 
implemented using a combination of the "sethi"  and "jmpl" 
instructions. 
The contents of a  process  address space  are  located  at 
the  disk,  main  memory,  and  cache  memory,  and  all  of 
these  copies  must  be  updated.  Note that  the  disk  copy  is 
~  ~- 
A write-only  tile to wliicli structured  messages are written 
directing the system lo change some aspect of the process's 
state or coiitiol its beIia\.ioi  111 soiiie way 
open("/proc/pidlctI"): 
I* open ctl  file to set watchpoint trap 
* ctl 
* 
* 
* 
*f 
write(void* (PCWATCH striict prwatch  prwatcli-t).  size-t  size). 
I* PCWATCH 
* 
* 
* typedef striict prwatcli: 
* 
uiiitptr-t  pr-vaddr.  I* \ w i d  address of watched  area  * J  
* 
size-t 
* 
*, 
int 
*)prwatcli-t. 
set or cleai- a watched area  in the controlled  process from 
a prwatch striictitre operand 
pr-size:  I* size ofwatched area in bytes */ 
pr-wflags.  I* watch type  flags  *I 
write(void* (PCSFAULT FLTWATCH).  S I Z C - ~  size). 
I" PCSFAULT 
* 
* FLTWATCH  watchpoint trap 
*I 
define a set of hardware  faults to  be  traced  in the process 
Fig 7: Watchpoint trap in Solaris 
updated  first,  which  is  followed  by  memory  update  and 
then  cache  update.  This  is  because  if  the  contents  of  a 
higher  level  storage  device  is  updated  first,  it  can  be 
inadvertently  updated  by  the  contents  of  a  lower  level 
storage device which still contains old version. 
Disk update  is performed  by  modifying the old  version 
executable  file  using  the  write  system  call.  The  write 
system call  can  also be used  to update the main  memory; 
in  Solaris, we can  update the main  memory  by  writing to 
the  "as" file of the target  process. An  altemative  approach 
to update the  main  memory  is to use the memcntl  system 
call 
that 
corresponds  to  the  target  procedure  area.  An  invalidated 
page  is  read  from  a  disk  when  it  is  accessed  next  time, 
which results  in memory update [14]. 
invalidates  all  main  memory  pages 
that 
C 
the  sync-instruction-memory 
We  can  consider  two  possibilities  for  cache update.  If 
the  cache  contents  are  automatically  updated  when  the 
corresponding  main  memory  area  is  modified,  we  do not 
need  to update  the  cache  memory  separately.  Otherwise, 
we  can  use 
library 
function  to explicitly synchronize  the  cache  and  the  main 
memory.  The  function  invalidates  the  instruction  cache 
entries that correspond to a specific address range of main 
memory.  The  invalidated  entries  will  be  read  from  main 
memory, which  is  already updated,  when they are needed. 
Once  the  cache  update  is  finished,  the  watched  area  is 
released  by sending a  "PCWATCH" control  message with 
the starting address of the watched area and the watch type 
"clear." 
The 
the 
sync-instruction-memory 
their 
operations  only  within  the  address  space  of the  process 
which  calls  them,  just  like  the  mmap  system  call  does. 
function  can  perform 
memcntl 
system 
call 
and 
275 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:53 UTC from IEEE Xplore.  Restrictions apply. 
Therefore,  calls  to  these  functions  are  made  from  signal 
handlers  as  discussed  before.  If  the  operating  system 
allows these  functions  to  be  called  by  external  processes, 
we do not have  to change the target  program  for dynamic 
update.  Our method, in  principle, can be used for updating 
a  set of procedures  all  together. This can be  done by  first 
setting  multiple  watched  areas,  updating  multiple  old 
version  procedures,  and  then  releasing all  watched  areas. 
This  means  that  the method  can  be  used  when  we  add  a 
new  procedure or delete  an  existing procedure or when  a 
procedure's  external  interface  is  changed.  However,  our 
method  is basically  a low level  method  and  is more useful 
when changes are small. 
3.3. Correction of external symbol references 
An  external  symbol  reference  represents  a  procedure's 
access  to  a  symbol  located  outside  the  procedure  in  the 
process  address  space.  There  are  two  types  of  external 
symbols: locations  in  the  code area (e.g., starting location 
of a procedure) and  locations in the data area. Locations in 
the data area can represent static variables (e.g., local static 
and global  variables), the stack area, or the heap area. 
What  we  have  to  do  is  to  correct  all  external  symbol 
references  in  the  new  version  procedure  so  that  the 
procedure  can  work  correctly  in  the  old  version  address 
space.  We can  focus on  references to  static variables  and 
external  code  symbols.  (We will  discuss  why  we  do  not 
have  to  consider the accesses to the  stack  and  heap  areas 
later.)  Such  corrections  must  be  performed  at 
the 
machine-code  level  because only the old and new version 
executable  files  are  available.  This  section  discusses 
the  context  of  SPARC 
details  of  the  correction 
architecture [ 1.51 and the GNU C compiler. 
in 
To  perform  the  correction,  we  must  first  identify  the 
sections  of  machine  code  that  deal  with  the  addresses of 
external symbols. (From now on, an external symbol refers 
to a  static variable  or  an  external  code  location.) We can 
focus on only those  sections that  initialize such addresses. 
(This  is  because,  once  we  correct  the  initialization of an 
address, then it  doesn't matter how it  is used later; the code 
will  work  correctly.)  In  Solaris, the  code  area starts  at  an 
address  of 0x10000,  and  therefore  the  initialization  of an 
external  symbol address takes more than  16 bits (Figure I). 
Since  the  field  for  an  immediate  value  in  a  SPARC 
instruction is  limited  to  13 bits  (except  for the  "branch," 
"call,"  and  "sethi" 
instructions  which  are  discussed 
separately), the initialization of an external  symbol address 
appears  in  the  machine  code  as  a  full  32-bit  register 
assignment,  which 
two  machine 
instructions. The register is then used to access the external 
symbol.  Therefore,  the  first  step  for  the  correction  is  to 
identify all 32-bit register initializations. 
typically 
takes 
Now  let's  discuss why  we  do not  have  to  consider the 
accesses to the stack and  heap areas. First,  an access to an 
automatic variable in the stack area is  actually a procedure 
intemal  access.  More  specifically, when  we  initialize  the 
address  of  an  automatic  variable  in  stack, we  always  use 
the  stack  pointer  or  frame  pointer  for  the  initialization. 
That is, we do not use a full 32-bit register initialization for 
this  purpose  and  thus  do not  have  to  be  concerned  about 
the  address  correction.  Similarly,  an  access  to  dynamic 
data,  which  is  created  in  the  heap  area  and  accessed  by 
pointers while a procedure is activated,  is  also an  internal 
reference.  Specifically, when  we  create  dynamic  data  in 
the heap area, a pointer  to the created data is  initialized  in 
the form of move  between  registers. Therefore, we do not 
again see a full 32-bit register initialization. 
that,  given  a  32-bit 
to  perform 
is 
Once we identify  a full  32-bit register  initialization,  our 
the  correction.  One 
focus 
is  on  how 
complication  here 
register 
initialization,  the  32-bit  number  can  represent  a  constant, 
not  the  address  of an  extemal  symbol.  (For  example,  we 
can use  a large integer constant to initialize a variable in  a 
C  program  or  a  compiler  can  use  a  large  constant  for 
address  calculation.)  Note  that  a  constant  must  not  be 
changed  while  an  external  symbol  address  must  be 
corrected.  However,  given  a  32-bit  register  initialization, 
we  cannot  determine  whether the number  is  a constant or 
an address by just looking at the machine code. 
ignoring 
We  first  investigate the  correction  of  extemal  symbol 
references  by 
large  constants.  Then  we 
investigate what  kinds  of restrictions a  large constant can 
pose to the correction method and how a compiler can help. 
Before  we 
identify  and  correct  full  32-bit  register 
initializations,  we  will  consider  the  "call"  instruction  in 
SPARC.  This  is  because the  instruction  accesses  external 
code  locations  but  it  initializes  a  32-bit  target  address 
differently. 
The  "call"  instruction  uses  the  PC-relative  addressing 
mode.  A  "call"  instruction  consists  of  2-bit  opcode  and 
30-bit  displacement.  The  target  address  for  a  "call" 
instruction is  determined  by  left-shifting the  displacement 
logically by 2 bits and then adding it to the PC value. Since 
the  location  of  a  "call"  instruction  (i.e.,  the  PC  value)  in 
the new  version  procedure  is  generally  different  from  the 
location  of the corresponding instruction in old version, we 
must adjust the displacement field  of the "call"  instruction 
so that it jumps to a correct location. The correct value for 
the  displacement  field  can  be  determined  by  subtracting 
the  location  of  the  "call"  instruction  in  new  version 
procedure  from  the  location  of  the  target  symbol  in  old 
version  process  address  space,  and  then  right-shifting the 
result  of  subtraction  logically  by  2  bits.  The  "branch" 
instruction  handles jumps  within  a  procedure  and  is  not 
related  to external symbols. 
276 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:53 UTC from IEEE Xplore.  Restrictions apply. 
Now  let's  discuss  how  to  identify  a  32-bit  register 
initialization  in  the  machine  code.  Such  an  initialization 
can be represented  in register transfer level as follows: 
rl  tOx21d40 
immediate 
Since  the  right-hand-side  shows  a  32-bit 
number,  it  represents  the  address  of  an  external  symbol 
and  must  be  corrected.  The  above  register  transfer 
representation can be translated into two different forms in 
the SPARC machine code: 
Pattern  1: 
Pattern 2: 
sethi  %hi(Ox21cOO), %ol 
or 
Yo0 1,  OX 140, %00 
sethi  %hi(Ox2 1 COO), %oO 
%ol, rho0 + 3201 
st 
In  the  first  pattern,  the  "sethi"  instruction  is  used  to 
initialize the upper 22 bits  and the  "or"  instruction  is used 
to  initialize  the  lower  I O   bits.  In  the  second  pattern,  the 
lower  10 bits  are  included  as an  offset  in  the  subsequent 
instruction  using  the  register  indirect  addressing  mode. 
The second pattern can  show up in  only three  instructions 
in SPARC: "ld(load)," "st(store)," and "jmpl." In  summary, 
we  can  identify  the  code  sections  to  correct  by  first 
searching for the "sethi" instruction, and then by checking 
whether the value of the 32-bit immediate number belongs 
to the external symbol area in the process address space. 
Once we identify the code sections to correct, the 32-bit 
immediate number,  which  points  to  a  symbol  in  the  new 
version address space, must be corrected so that it points to 
the  same  symbol  in  the  old  version  address  space.  The 
correct  address value can  be determined  firom  the  symbol 
tables of the old and new version executable files. 
Now let's go back to the problem of large constants. We 
will  illustrate the issue using two examples. First, consider 
the code that stores a constant value of 0x20000 to a global 
variable  "a,"  which  is symbolically represented  as follows 
(the address of the global variable "a" is Ox21d40): 
rl  tOx21d40 
r2 t 0x20000 
store r2,(rl) 
(1) 
( 2 )  
(3) 
Here, the part (1) assigns the address of the global variable 
"a" to the register "rl," which  is then used  in part  (3). The 
part  (1)  must  be  corrected,  but  part  (2)  must  not  be 
changed. 
The second  example to consider  is the  code that  stores 
the  address  of  a  global  variable  "a"  to  a  global  pointer 
variable "p" (that is, p = &a; the address of "p" is 0x21d40 
and the address of "a" is Ox21d58): 
rl  tOx21d40 
r2 t 0x21d.58 
store r2,(rl) 
"rl" gets the address  value  of a  global 
(4) 
(5) 
(6) 
Here,  the  register 
pointer  variable  "p"  in  part  (4), and  the  register  "r2"  gets 
the address value of a global variable "a" in part (5). In  this 
case, we must correct both parts (4) and (5). 
Note that  the part  (2) in the first example should not  be 
changed,  while  part  (5)  in  the  second  example must  be 
corrected.  However, by just  looking at the machine code, 
we  cannot  separate  the  two  cases.  In  other  words,  we 
cannot tell whether a large immediate number represents  a 
constant or the address of an external symbol. This poses a 
restriction  in our update method. The restriction  is that we 
cannot use large constants whose values correspond to the 
range  of address for  code and  static variables.  In  Solaris, 
the  code  area  always  starts  at  an  address  of  Ox10000 
(65536  in  decimal),  and  the  highest  address  in  the  static 
data  area  can  be  extracted  from  the  symbol  table  of  an 
executable file. 
Note that, if we do not  use constants larger than  65536, 
we  can  differentiate  the  above  two  cases.  We  may 
eliminate the restriction by composing a constant, which is 
than  65536,  using  a  combination  of  several 