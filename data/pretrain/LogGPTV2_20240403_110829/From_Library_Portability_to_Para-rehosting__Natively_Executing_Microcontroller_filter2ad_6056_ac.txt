### Table III: Accumulated Coverage Rate in Comparison with HALucinator

| Firmware | Halucinator | Para-rehosting | WYCINWYC |
|----------|-------------|----------------|-----------|
| Atmel lwIP HTTP (Ethernet) | 25.99% | 70.51% | 25.05% |
| Atmel lwIP HTTP (TCP) | 47.65% | 6.26% | 40.66% |
| STM UDP Server | 6.21% | 32.82% | 24.96% |
| STM UDP Client | 28.37% | 38.22% | 54.43% |
| STM TCP Server | 29.55% | 48.60% | - |
| STM TCP Client | 40.31% | 56.88% | - |
| STM ST-PLC | 41.90% | - | - |
| NXP TCP Server | 3.19% | - | - |
| NXP UDP Server | 27.31% | - | - |
| NXP HTTP Server | 24.35% | - | - |

### Speed (#/sec)

| Speed (#/sec) | Value |
|---------------|-------|
| 1,107 | 647.86 |
| 69 | 902.95 |
| 621 | 1,318.31 |
| 599 | 902.31 |
| 1,013 | 1,245.03 |
| 1,222 | 1,466.71 |
| 323 | 1,092.41 |
| 448 | 2,552.81 |
| 264 | 884.50 |
| 1,101 | 837.65 |
| 909 | 1,443.22 |

### Test-Case Feeding and Program Execution Overhead

The overhead of test-case feeding and program execution was estimated using the pyOCD [39] to control an NXP FRDM-K64F development board. A Python script writes a known test-case into a reserved memory region of the board 1,000 times. The program on the board terminates after the iteration is finished. Transferring a test-case of 1 KB takes about 0.23 seconds per transfer. 

Comparing the execution speed of the same workload, we found:
- The FRDM-K64F board is 14 times slower than QEMU.
- The FRDM-K6CTF board is 287 times slower than para-rehosting.

In summary, the fuzzing speed on real devices is significantly lower compared to both our approach and emulation-based approaches.

### CVE Analysis

We discovered 28 previously-unknown bugs, as shown in Table IV. Five of these were confirmed by CVE. For the remaining, 19 have been confirmed by manufacturers or vendors at the time of writing. All the bugs were caused by memory errors and captured by ASAN, highlighting the importance of memory checker support in finding these bugs.

#### CVE-2019-13120
**Description:** The MQTT library lacks length checking for the received publish message. Attackers can manipulate this field, triggering out-of-range memory access. This leads to a two-byte information leakage.

#### CVE-2019-18178
**Description:** The file handler freed by the function `ffconfigFREE()` is reused by the function `FF_FlushCache()`. This bug can be immediately discovered using any test-case with the help of ASAN. However, this library had never been executed against ASAN before, leading to the long-term undetected bug.

#### CVE-2019-17210
**Description:** The MQTT message can be manipulated so that an if statement is invalidated, leaving the default value of `mqttstring->lenstring.data` (NULL) unchanged. This pointer is later used, causing issues.

#### CVE-2019-17212
**Description:** The CoAP message is linearly parsed by the function `sn_coap_parser_options_parse()` inside a while loop. However, the boundary of the message is not properly checked within the loop.

#### CVE-2019-17211
**Description:** Two variables of type `uint16_t` are added. The result is used to allocate a buffer. If the addition wraps around the maximum, less memory is allocated than expected, leading to potential buffer overflows.

### Table IV: Previously-Unknown Bugs Found

| RTOS/Library | Bug Type | Number | Status | CVE ID |
|--------------|----------|--------|--------|--------|
| FreeRTOS | Buffer Overflow | 1 | Confirmed | CVE-2019-13120 |
| FreeRTOS | Use After Free | 2 | Confirmed | CVE-2019-18178 |
| FreeRTOS | Integer Underflow | 3 | Confirmed | CVE-2019-17210 |
| FreeRTOS/Mbed OS | Buffer Overflow | 4 | Confirmed | CVE-2019-17212 |
| Mbed OS | Buffer Overflow | 5 | Confirmed | CVE-2019-17211 |
| Mbed OS | Integer Overflow | 6 | Submitted | - |
| Mbed OS | Off by One | 7 | Submitted | - |
| Mbed OS | Use After Free | 8 | Submitted | - |
| Mbed OS | Buffer Overflow | 9 | Confirmed | - |
| LiteOS | Buffer Overflow | 10 | Confirmed | - |
| LiteOS | Use After Free | 11 | Confirmed | - |
| LiteOS | Buffer Overflow | 12 | Confirmed | - |
| Bare-metal | Buffer Overflow | 13 | Confirmed | - |
| Bare-metal | Null Pointer Dereference | 14 | Confirmed | - |
| Bare-metal | Integer Overflow | 15 | Confirmed | - |
| Bare-metal | Buffer Overflow | 16 | Confirmed | - |
| Bare-metal | Double Free | 17 | Confirmed | - |
| Bare-metal | Use After Free | 18 | Confirmed | - |
| Bare-metal | Format String | 19 | Confirmed | - |

### Identifying the Gap

Due to architectural differences, results obtained from rehosted programs may not be reproducible on real MCU devices. To address this, we developed a dataset of vulnerable MCU OS libraries and tested different behaviors when running them para-rehosted and on the real device.

#### Dataset
We crafted a corpus of code snippets with both real and artificial bugs. The dataset includes:
- Nine reproducible bugs in the FreeRTOS+TCP library (part 1).
- 28 new bugs discovered in this work (part 2).
- Eight types of classic bugs manually inserted in an empty RTOS task (part 3).

#### Bug Re-producibility
We manually fed test-cases that trigger bugs on rehosted programs to the NXP FRDM-K64F board and observed if the bugs could be triggered. Using the on-board CMSIS-DAP debug interface, we verified that all 28 bugs in part 2 of our dataset influenced the real device. However, the firmware did not crash immediately, indicating that injected memory errors were not critical enough to trigger observable hard faults. These bugs would cause non-deterministic crashes in the long run, depending on the execution context.

#### Understanding the Bug Observability Gap
The bug observability issue on embedded systems was first explained by Muench et al. [43]. This poses a significant challenge in fuzzing, as the execution terminates immediately at exit points, making it difficult to observe memory corruptions. Due to architectural differences (e.g., ISA and stack layout), a working proof of exploitation (PoE) on rehosted firmware might not work on real devices.

### Table V: Dataset and Bug Observability

| ID | RTOS/Library | Bug Type | Observability (Para-rehosting) | Observability (Real Board) |
|----|--------------|----------|--------------------------------|----------------------------|
| 1  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 2  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 3  | FreeRTOS+TCP | Integer Underflow | Y | N |
| 4  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 5  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 6  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 7  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 8  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 9  | FreeRTOS+TCP | Buffer Overflow | Y | N |
| 10 | FreeRTOS MQTT | Buffer Overflow | Y | N |
| 11 | FATFS | Use After Free | Y | N |
| 12 | FreeRTOS | Buffer Overflow | Y | N |
| 13 | uTasker Modbus | Buffer Overflow | Y | N |
| 14 | uTasker Modbus | Buffer Overflow | Y | N |
| 15 | uTasker Modbus | Buffer Overflow | Y | N |
| 16 | uTasker Modbus | Buffer Overflow | Y | N |
| 17 | lwip | Buffer Overflow | Y | N |
| 18 | lwip | Buffer Overflow | Y | N |
| 19 | FreeRTOS | Buffer Overflow | Y | N |
| 20 | MbedOS MQTT | Buffer Overflow | Y | N |
| 21 | MbedOS CoAP Parser | Buffer Overflow | Y | N |
| 22 | MbedOS CoAP Builder | Buffer Overflow | Y | N |
| 23 | MbedOS Client-Cli | Buffer Overflow | Y | N |
| 24 | MbedOS Client-Cli | Buffer Overflow | Y | N |
| 25 | MbedOS Client-Cli | Buffer Overflow | Y | N |
| 26 | MQTT | Buffer Overflow | Y | N |
| 27 | MQTT | Buffer Overflow | Y | N |
| 28 | LWM2M | Buffer Overflow | Y | N |
| 29 | LWM2M | Buffer Overflow | Y | N |
| 30 | STM-PLC | Buffer Overflow | Y | N |
| 31 | STM-PLC | Buffer Overflow | Y | N |
| 32 | STM-PLC | Buffer Overflow | Y | N |
| 33 | STM-PLC | Buffer Overflow | Y | N |
| 34 | STM-PLC | Buffer Overflow | Y | N |
| 35 | STM-PLC | Buffer Overflow | Y | N |
| 36 | STM-PLC | Buffer Overflow | Y | N |
| 37 | STM-PLC | Buffer Overflow | Y | N |
| 38 | FreeRTOS | Div By Zero | Y | N |
| 39 | MbedOS | Div By Zero | Y | N |
| 40 | FreeRTOS | Integer Overflow | Y | N |
| 41 | MbedOS | Integer Overflow | Y | N |
| 42 | FreeRTOS | Stack Overflow | Y | N |
| 43 | MbedOS | Stack Overflow | Y | N |
| 44 | FreeRTOS | Heap Overflow | Y | N |
| 45 | MbedOS | Heap Overflow | Y | N |
| 46 | FreeRTOS | NULL Pointer | Y | N |
| 47 | MbedOS | NULL Pointer | Y | N |
| 48 | FreeRTOS | Double Free | Y | N |
| 49 | MbedOS | Double Free | Y | N |
| 50 | FreeRTOS | Use After Free | Y | N |
| 51 | MbedOS | Use After Free | Y | N |
| 52 | FreeRTOS | Format String | Y | N |
| 53 | MbedOS | Format String | Y | N |

This structured and detailed presentation should make the text more clear, coherent, and professional.