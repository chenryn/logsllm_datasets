 **Glide Version** : 4.3.1
**Integration libraries** : None
**Device/Android Version** : LG G4, 6.1
**Issue details / Repro steps / Use case background** :  
Previously in Glide v3.7.0 the signature of the `encode` method in `Encoder`
interface was:
    boolean encode(T data, OutputStream os)
And in Glide v4.X it became:
    public boolean encode(InputStream data, File file, Options options)
I understand that mostly, encoders will use `File` as a parameter that will be
used for the encoding, but there's an exception when it comes to encryption
encoding:  
For instance, Conceal library uses cipher `OutputStream`s to write encrypted
data.  
In Glide v3.X My custom Encoder has created a ciphered `OutputStream` and then
use the built-in `BitmapEncoder` to do the encoding work with the ciphered
`OutputStream` it generated,  
In Glide v4.X, `BitmapEncoder` accepts a `File` and not `OutputStream` as
before, so my encoder cannot make use of the `BitmapEncoder` class to do the
encoding work unfortunately, which means that my custom `Encoder` has to be
responsible for the encryption + encoding process by itself, instead of just
the encryption like in Glide v3.X.
I think that `Encoder` interface should accept also `OutputStream` and not
just `File` objects to handle these kind of situations.
Here's an example usage in Glide 3.X:
    OutputStream outputStream = crypto.getCipherOutputStream(new BufferedOutputStream(os), Entity.create("cache_entity"));
                encoded =  new BitmapEncoder().encode(data, outputStream);
**Glide load line /`GlideModule` (if any) / list Adapter code (if any)**:
    Glide.with...
**Layout XML** :
    <FrameLayout xmlns:android="...
**Stack trace / LogCat** :
    paste stack trace and/or log here