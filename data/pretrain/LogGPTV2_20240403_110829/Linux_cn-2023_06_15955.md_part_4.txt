在本教程中，我将创建一个副本，使用它代替原始的配置文件，因此首先我们要创建一个目录来存储配置文件的副本：
```
mkdir ~/.config/i3blocks
```
现在，创建一个原始配置文件的副本：
```
sudo cp /etc/i3blocks.conf ~/.config/i3blocks/
```
最后，使用 `chown` 命令更改文件的所有者，以便你进行所需的更改：
```
sudo chown $USER:$USER ~/.config/i3blocks/i3blocks.conf
```
要启用 i3blocks，在 i3 配置文件中进行一些更改：
```
nano ~/.config/i3/config
```
进入 `bar {...}` 部分，在这里，你需要将 `status_command` 更改为 `i3blocks` 并添加 i3blocks 配置文件的路径，如下所示：
![在 i3 窗口管理器中启用 i3blocks](/data/attachment/album/202306/30/103019tz822cr0znt03zcr.png)
完成后，使用 `Mod + Shift + r` 重新启动 i3 窗口管理器，整个状态栏都会被更改，并显示如下：
![i3 窗口管理器中 i3blocks 的默认外观](/data/attachment/album/202306/30/103020ulb4p4tco5cplcce.png)
不要担心，你将很快使状态栏比以前的 i3bar 更有价值和好看。
#### 添加磁盘块
如果你想要显示磁盘剩余空间，可以添加此块。
在这里，我将使用 `nano` 创建并打开用于磁盘块的配置文件。
```
nano ~/.config/scripts/disk
```
然后粘贴以下行：
```
#!/usr/bin/env sh
DIR="${DIR:-$BLOCK_INSTANCE}"
DIR="${DIR:-$HOME}"
ALERT_LOW="${ALERT_LOW:-$1}"
ALERT_LOW="${ALERT_LOW:-10}" # color will turn red under this value (default: 10%)
LOCAL_FLAG="-l"
if [ "$1" = "-n" ] || [ "$2" = "-n" ]; then
    LOCAL_FLAG=""
fi
df -h -P $LOCAL_FLAG "$DIR" | awk -v label="$LABEL" -v alert_low=$ALERT_LOW '
/\/.*/ {
	# full text
	print label $4
	# short text
	print label $4
	use=$5
	# no need to continue parsing
	exit 0
}
END {
	gsub(/%$/,"",use)
	if (100 - use  0) {
		pct=used/total*100
	}
	# full text
	if (percent == "true" ) {
		printf("%.1fG/%.1fG (%.f%%)\n", used, total, pct)
	} else {
		printf("%.1fG/%.1fG\n", used, total)
	}
	# short text
	printf("%.f%%\n", pct)
	# color
	if (pct > 90) {
		print("#FF0000")
	} else if (pct > 80) {
		print("#FFAE00")
	} else if (pct > 70) {
		print("#FFF600")
	}
}
' /proc/meminfo
```
保存更改并从文本编辑器中退出。
现在，要使其生效，你需要使用以下命令将此文件设置为可执行：
```
sudo chmod +x ~/.config/scripts/memory
```
接下来，打开 i3blocks 配置文件：
```
nano ~/.config/i3blocks/i3blocks.conf
```
并将以下内容粘贴到你希望在状态栏中显示内存使用情况的位置：
```
[memory]
command=/home/$USER/.config/scripts/memory
label=
interval=30
```
保存更改并从文本编辑器中退出。重新启动 i3 以使更改生效！
#### 添加更新指示块
这是最有帮助的指示器，它显示需要更新的旧软件包数量。
首先，使用以下命令安装依赖项以使其正常工作：
```
sudo pacman -S pacman-contrib
```
现在，创建一个新文件来存储脚本：
```
nano ~/.config/scripts/arch-update
```
然后粘贴以下内容：
```
#!/usr/bin/env python3
import subprocess
from subprocess import check_output
import argparse
import os
import re
def create_argparse():
    def _default(name, default='', arg_type=str):
        val = default
        if name in os.environ:
            val = os.environ[name]
        return arg_type(val)
    strbool = lambda s: s.lower() in ['t', 'true', '1']
    strlist = lambda s: s.split()
    parser = argparse.ArgumentParser(description='Check for pacman updates')
    parser.add_argument(
        '-b',
        '--base_color',
        default = _default('BASE_COLOR', 'green'),
        help='base color of the output(default=green)'
    )
    parser.add_argument(
        '-u',
        '--updates_available_color',
        default = _default('UPDATE_COLOR', 'yellow'),
        help='color of the output, when updates are available(default=yellow)'
    )
    parser.add_argument(
        '-a',
        '--aur',
        action = 'store_const',
        const = True,
        default = _default('AUR', 'False', strbool),
        help='Include AUR packages. Attn: Yaourt must be installed'
    )
    parser.add_argument(
        '-y',
        '--aur_yay',
        action = 'store_const',
        const = True,
        default = _default('AUR_YAY', 'False', strbool),
        help='Include AUR packages. Attn: Yay must be installed'
    )
    parser.add_argument(
        '-q',
        '--quiet',
        action = 'store_const',
        const = True,
        default = _default('QUIET', 'False', strbool),
        help = 'Do not produce output when system is up to date'
    )
    parser.add_argument(
        '-w',
        '--watch',
        nargs='*',
        default = _default('WATCH', arg_type=strlist),
        help='Explicitly watch for specified packages. '
        'Listed elements are treated as regular expressions for matching.'
    )
    return parser.parse_args()
def get_updates():
    output = ''
    try:
        output = check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # checkupdates exits with 2 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []
    updates = [line.split(' ')[0]
               for line in output.split('\n')
               if line]
    return updates
def get_aur_yaourt_updates():
    output = ''
    try:
        output = check_output(['yaourt', '-Qua']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # yaourt exits with 1 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 1 and not exc.output):
            raise exc
    if not output:
        return []
    aur_updates = [line.split(' ')[0]
                   for line in output.split('\n')
                   if line.startswith('aur/')]
    return aur_updates
def get_aur_yay_updates():
    output = check_output(['yay', '-Qua']).decode('utf-8')
    if not output:
        return []
    aur_updates = [line.split(' ')[0] for line in output.split('\n') if line]
    return aur_updates
def matching_updates(updates, watch_list):
    matches = set()
    for u in updates:
        for w in watch_list:
            if re.match(w, u):
                matches.add(u)
    return matches
label = os.environ.get("LABEL","")
message = "{0}{2}"
args = create_argparse()
updates = get_updates()
if args.aur:
    updates += get_aur_yaourt_updates()
elif args.aur_yay:
    updates += get_aur_yay_updates()
update_count = len(updates)
if update_count > 0:
    if update_count == 1:
      info = str(update_count) + ' update available'
      short_info = str(update_count) + ' update'
    else:
      info = str(update_count) + ' updates available'
      short_info = str(update_count) + ' updates'
    matches = matching_updates(updates, args.watch)
    if matches:
        info += ' [{0}]'.format(', '.join(matches))
        short_info += '*'
    print(message.format(label, args.updates_available_color, info))
    print(message.format(label, args.updates_available_color, short_info))
elif not args.quiet:
    print(message.format(label, args.base_color, 'system up to date'))
```
保存更改并从文本编辑器中退出。
现在，使用以下命令将此文件设置为可执行：
```
sudo chmod +x ~/.config/scripts/arch-update
```
接下来，打开 i3blocks 配置文件：
```
nano ~/.config/i3blocks/i3blocks.conf
```
并将以下内容粘贴到所需的位置：
```
[arch-update]
command=/home/$USER/.config/scripts/arch-update
interval=3600
markup=pango
LABEL=
```
保存更改并重新加载 i3 窗口管理器，它将显示需要更新的软件包数量。