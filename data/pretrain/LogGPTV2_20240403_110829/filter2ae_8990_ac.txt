        stack_pointer = f->f_stacktop;
        assert(stack_pointer != NULL);
        f->f_stacktop = NULL;       /* remains NULL unless yield suspends frame */
    #ifdef LLTRACE
        lltrace = PyDict_GetItemString(f->f_globals, "__lltrace__") != NULL;
    #endif
    #if defined(Py_DEBUG) || defined(LLTRACE)
        filename = PyString_AsString(co->co_filename);
    #endif
        why = WHY_NOT;
        err = 0;
        x = Py_None;        /* Not a reference, just anything non-NULL */
        w = NULL;
        if (throwflag) { /* support for generator.throw() */
            why = WHY_EXCEPTION;
            goto on_error;
        }
        for (;;) {
          // 循环解释执行 Python 字节码
        }
Low Level Trace 一方面需要编译时启用，另一方面也需要在运行时当前栈帧定义了全局变量`__lltrace__`。
还是实践出真知，先写个简单的测试文件:
    # test.py
    __lltrace__ = 1
    def add(a, b):
        return a + b - 42
    a = 3
    c = add(a, 4)
使用 Debug 编译的 Python 运行结果如下:
    $ /cpython_dbg/bin/python2.7 test.py
    0: 124, 0
    push 3
    3: 124, 1
    push 4
    6: 23
    pop 4
    7: 100, 1
    push 42
    10: 24
    pop 42
    11: 83
    pop -35
    ext_pop 4
    ext_pop 3
    ext_pop 
    push -35
    33: 90, 3
    pop -35
    36: 100, 4
    push None
    39: 83
    pop None
打印的数字从下面的代码而来:
            if (lltrace) {
                if (HAS_ARG(opcode)) {
                    printf("%d: %d, %d\n",
                           f->f_lasti, opcode, oparg);
                }
                else {
                    printf("%d: %d\n",
                           f->f_lasti, opcode);
                }
            }
其中 push/pop 相关的输出来源是如下栈追踪相关的函数:
    #ifdef LLTRACE
    static int
    prtrace(PyObject *v, char *str)
    {
        printf("%s ", str);
        if (PyObject_Print(v, stdout, 0) != 0)
            PyErr_Clear(); /* Don't know what else to do */
        printf("\n");
        return 1;
    }
    #define PUSH(v)         { (void)(BASIC_PUSH(v), \
                              lltrace && prtrace(TOP(), "push")); \
                              assert(STACK_LEVEL() co_stacksize); }
    #define POP()           ((void)(lltrace && prtrace(TOP(), "pop")), \
                             BASIC_POP())
    #define STACKADJ(n)     { (void)(BASIC_STACKADJ(n), \
                              lltrace && prtrace(TOP(), "stackadj")); \
                              assert(STACK_LEVEL() co_stacksize); }
    #define EXT_POP(STACK_POINTER) ((void)(lltrace && \
                                    prtrace((STACK_POINTER)[-1], "ext_pop")), \
                                    *--(STACK_POINTER))
    #else
    #define PUSH(v)                BASIC_PUSH(v)
    #define POP()                  BASIC_POP()
    #define STACKADJ(n)            BASIC_STACKADJ(n)
    #define EXT_POP(STACK_POINTER) (*--(STACK_POINTER))
    #endif
上面的 lltrace 输出可以记录每条字节码的执行，并且会打印堆栈的变化，因此在追踪和调试字节码上非常有用。
> 更多 LLTRACE 相关内容见:
> 
# Python VMP
现在有了 LLTRACE 的功能，但是要实现 `ether_v2.py` 的追踪还需要解决几个问题:
  1. LLTRACE 的启用需要在当前栈帧上定义全局变量 `__lltrace__`；
  2. LLTRACE 输出的字节码过于简略，缺乏可读性；
  3. LLTRACE 输出的字节码是运行的代码，也就是循环展开后(flatten)的代码，进一步影响逆向分析；
所以我使用了一个简单粗暴的方法，即直接修改 CPython 源代码。首先在判断 lltrace 启用的地方修改判断从`f->f_globals`
改为递归搜索 `f->f_back->f_globals`，这样只要在我们的调用栈帧定义变量即可；对于字节码的输出，最好是可以有类似 dis
模块的显示效果，至于平坦化的控制流，可以根据指令 index 再重新进行组合。
## Dynamic Trace
在 LLTRACE 的基础上，我们可以比较简单地修改出一版具有可读性的 Trace 代码，以下面的源码为例:
    # test.py
    __pztrace__ = 1
    def validate(s):
        if len(s) != 4:
            return False
        cc = 0
        for i in s:
            cc ^= ord(i)
        if cc == 0:
            return True
        return False
    s = raw_input('Your input: ')
    if validate(s):
        print 'ok'
    else:
        print 'failed'
其中`__pztrace__`是我新定义的全局跟踪触发标记，在没有源码的前提下，运行上述字节码可实时打印字节码如下:
    $ /build/cpython/build/bin/python2.7 test.py
    Your input: helloworld
    === pztrace test.py ===
       0 LOAD_GLOBAL 0; push 
       3 LOAD_FAST 0; push 'helloworld'
       6 CALL_FUNCTION 1
    ext_pop 'helloworld'
    ext_pop 
    push 10
       9 LOAD_CONST 1; push 4
      12 COMPARE_OP 3 (!=) ; pop 4
      15 POP_JUMP_IF_FALSE 22; pop True
      18 LOAD_GLOBAL 1; push False
      21 RETURN_VALUE; pop False
    ext_pop 'helloworld'
    ext_pop 
    push False
      36 POP_JUMP_IF_FALSE 47; pop False
      47 LOAD_CONST 4; push 'failed'
      50 LOAD_BUILD_CLASS; pop 'failed'
    failed  51 YIELD_FROM;
      52 LOAD_CONST 5; push None
      55 RETURN_VALUE; pop None
将每条字节码后对应的栈操作以及实时数据输出，更加有利于对代码的理解。从上面的字节码输出中可以基本看出实际的操作，而且打印出来的是已经执行到的分支，通过调整输入可以触达不同的分支，如下为输入`abab`的跟踪流程:
    $ /build/cpython/build/bin/python2.7 test.py
    Your input: abab
    === pztrace test.py ===
       0 LOAD_GLOBAL 0; push 
       3 LOAD_FAST 0; push 'abab'
       6 CALL_FUNCTION 1
    ext_pop 'abab'
    ext_pop 
    push 4
       9 LOAD_CONST 1; push 4
      12 COMPARE_OP 3 (!=) ; pop 4
      15 POP_JUMP_IF_FALSE 22; pop False
      22 LOAD_CONST 2; push 0
      25 STORE_FAST 1; pop 0
      28 SETUP_LOOP 30
      31 LOAD_FAST 0; push 'abab'
      34 GET_ITER
      35 FOR_ITER 22; push 'a'
      38 STORE_FAST 2; pop 'a'
      41 LOAD_FAST 1; push 0
      44 LOAD_GLOBAL 2; push 
      47 LOAD_FAST 2; push 'a'
      50 CALL_FUNCTION 1
    ext_pop 'a'
    ext_pop 
    push 97
      53 INPLACE_XOR; pop 97
      54 STORE_FAST 1; pop 97
      57 JUMP_ABSOLUTE 35
      35 FOR_ITER 22; push 'b'
      38 STORE_FAST 2; pop 'b'
      41 LOAD_FAST 1; push 97
      44 LOAD_GLOBAL 2; push 
      47 LOAD_FAST 2; push 'b'
      50 CALL_FUNCTION 1
    ext_pop 'b'
    ext_pop 
    push 98
      53 INPLACE_XOR; pop 98
      54 STORE_FAST 1; pop 3
      57 JUMP_ABSOLUTE 35
      35 FOR_ITER 22; push 'a'
      38 STORE_FAST 2; pop 'a'
      41 LOAD_FAST 1; push 3
      44 LOAD_GLOBAL 2; push 
      47 LOAD_FAST 2; push 'a'
      50 CALL_FUNCTION 1
    ext_pop 'a'
    ext_pop 
    push 97
      53 INPLACE_XOR; pop 97
      54 STORE_FAST 1; pop 98
      57 JUMP_ABSOLUTE 35
      35 FOR_ITER 22; push 'b'
      38 STORE_FAST 2; pop 'b'
      41 LOAD_FAST 1; push 98
      44 LOAD_GLOBAL 2; push 
      47 LOAD_FAST 2; push 'b'
      50 CALL_FUNCTION 1
    ext_pop 'b'
    ext_pop 
    push 98
      53 INPLACE_XOR; pop 98
      54 STORE_FAST 1; pop 0
      57 JUMP_ABSOLUTE 35
      35 FOR_ITER 22; pop 
      60 POP_BLOCK
      61 LOAD_FAST 1; push 0
      64 LOAD_CONST 2; push 0
      67 COMPARE_OP 2 (==) ; pop 0
      70 POP_JUMP_IF_FALSE 77; pop True
      73 LOAD_GLOBAL 3; push True
      76 RETURN_VALUE; pop True
    ext_pop 'abab'
    ext_pop 
    push True
      36 POP_JUMP_IF_FALSE 47; pop True
      39 LOAD_CONST 3; push 'ok'
      42 LOAD_BUILD_CLASS; pop 'ok'
    ok
        43 YIELD_FROM;
      44 JUMP_FORWARD 5
      52 LOAD_CONST 5; push None
      55 RETURN_VALUE; pop None
由于是实时跟踪，因此上面的字节码是循环展开之后的。对于不熟悉的字节码，比如`FOR_ITER`等，可以辅助参考[Python dis
模块](https://docs.python.org/2.7/library/dis.html)的解释加以理解。
## Get The ETH！
回到我们最初的挑战，使用修改后的 trace 功能去跟踪`ether_v2.pyc`，结果如下:
    --------------------------------------------------------------------------------    Python version: 2.7.16
    Magic code: 03f30d0a
    Timestamp: Fri Mar 10 21:08:20 2017
    Size: None
    === pztrace pyprotect.angelic47.com ===
       0 JUMP_ABSOLUTE 2764
    2764 LOAD_CONST 1; push -1