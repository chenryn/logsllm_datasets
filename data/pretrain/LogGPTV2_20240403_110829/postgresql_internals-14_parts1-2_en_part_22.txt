Once the scheduler decides to flush the accumulated data,this data is moved to
thecacheofastoragedevice(likean).Storagedevicescanalsodeferwriting,
forexample,togroupofadjacentpagestogether.Acontrolleraddsonemore
cachinglevelbetweenthediskandtheoperatingsystem.
Unless special measures are taken, the moment when the data is reliably stored
ondiskremainsunknown.Itisusuallynotsoimportantbecausewehavethe,
1 postgresql.org/docs/14/wal-reliability.html
207
Chapter11. WALModes
butentriesthemselvesmustbereliablysavedondiskrightaway.1 Itisequally
truefortheasynchronousmode—otherwise,itisimpossibletoguaranteethat
entriesgetdodiskaheadofthemodifieddata.
Thecheckpointerprocessmustalsosavethedatainareliableway,ensuringthat
dirtypagesmakeittodiskfromthecache.Besides,ithastosynchronizeallthe
fileoperationsthathavebeenperformedbyotherprocesses(suchaspagewrites
orfiledeletions): whenthecheckpointcompletes,theresultsofalltheseactions
mustbealreadysavedondisk.2
Therearealsosomeothersituationsthatdemandfail-safewriting,suchasexecut-
ingunloggedoperationsattheminimallevel.
Operatingsystemsprovidevariousmeanstoguaranteeimmediatewritingofdata
into a non-volatile storage. All of them boil down to the following two main ap-
proaches: eitheraseparatesynchronizationcommandiscalledafterwriting(such
asfsyncorfdatasync),ortherequirementtoperformsynchronization(orevendi-
rectwritingthatbypassescache)isspecifiedwhenthefileisbeingopenedor
writteninto.
Thepg_test_fsyncutilitycanhelpyoudeterminethebestwaytosynchronizethe
dependingonyourandfilesystem;thepreferredmethodcanbespecified
inthewal_sync_method parameter. Forotheroperations,anappropriatesynchro-
nizationmethodisselectedautomaticallyandcannotbeconfigured.3
Asubtle aspect here is that in each particular case the most suitable method de-
pendsonthehardware.Forexample,ifyouuseacontrollerwithabackupbattery,
youcantakeadvantageofitscache,asthebatterywillprotectthedataincaseof
apoweroutage.
Youshouldkeepinmindthattheasynchronouscommitandlackofsynchroniza-
on tion are two totally different stories. Turning off synchronization (by the fsync
parameter)boostssystemperformance,yetanyfailurewillleadtofataldataloss.
The asynchronous mode guarantees crash recovery up to a consistent state, but
someofthelatestdataupdatesmaybemissing.
1 backend/access/transam/xlog.c,issue_xlog_fsyncfunction
2 backend/storage/sync/sync.c
3 backend/storage/file/fd.c,pg_fsyncfunction
208
11.2. FaultTolerance
Data Corruption
Technicalequipmentisimperfect,anddatacangetdamagedbothinmemoryand
ondisk,orwhileitisbeingtransferredviainterfacecables.Sucherrorsareusually
handledatthehardwarelevel,yetsomecanescape.
Tocatchissuesingoodtime,Postgrealwaysprotectsentriesbychecksums.
Checksumscanbecalculatedfordatapagesaswell.1 Itisdoneeitherduringcluster
initializationorbyrunningthepg_checksums2utilitywhentheserverisstopped.3 v.
Inproductionsystems,checksumsmustalwaysbeenabled,despitesome(minor)
calculation and verification overhead. It raises the chance of timely corruption
discovery,eventhoughsomecornercasesstillremain:
• Checksum verification is performed only when the page is accessed,so data
corruptioncangounnoticedforalongtime,uptothepointwhenitgetsinto
allbackupsandleavesnosourceofcorrectdata.
• Azeroedpageisconsideredcorrect,soifthefilesystemzeroesoutapageby
mistake,thisissuewillnotbediscovered.
• Checksumsarecalculatedonlyforthemainforkofrelations;otherforksand
files(suchastransactionstatusin)remainunprotected.
Let’s take a look at the read-only data_checksums parameter to make sure that
checksumsareenabled:
=> SHOW data_checksums;
data_checksums
−−−−−−−−−−−−−−−−
on
(1 row)
Nowstoptheserverandzerooutseveralbytesinthezeropageofthemainforkof
thetable:
1 backend/storage/page/README
2 postgresql.org/docs/14/app-pgchecksums.html
3 commitfest.postgresql.org/27/2260
209
Chapter11. WALModes
=> SELECT pg_relation_filepath('wal');
pg_relation_filepath
−−−−−−−−−−−−−−−−−−−−−−
base/16391/16562
(1 row)
postgres$ pg_ctl stop
postgres$ dd if=/dev/zero of=/usr/local/pgsql/data/base/16391/16562 \
oflag=dsync conv=notrunc bs=1 count=8
8+0 records in
8+0 records out
8 bytes copied, 0,00595535 s, 1,3 kB/s
Starttheserveragain:
postgres$ pg_ctl start -l /home/postgres/logfile
In fact, we could have left the server running—it is enough to write the page to
diskandevictitfromcache(otherwise,theserverwillcontinueusingitscached
version).Butsuchaworkflowishardertoreproduce.
Nowlet’sattempttoreadthetable:
=> SELECT * FROM wal LIMIT 1;
WARNING: page verification failed, calculated checksum 20397 but
expected 57148
ERROR: invalid page in block 0 of relation base/16391/16562
Ifthedatacannotberestoredfromabackup,itmakessensetoatleasttrytoread
the damaged page (risking to get garbled output). For this purpose,you have to
off enabletheignore_checksum_failureparameter:
=> SET ignore_checksum_failure = on;
=> SELECT * FROM wal LIMIT 1;
WARNING: page verification failed, calculated checksum 20397 but
expected 57148
id
−−−−
2
(1 row)
Everythingwentfineinthiscasebecausewehavedamagedanon-criticalpartof
thepageheader(theofthelatestentry),notthedataitself.
210
11.2. FaultTolerance
Non-AtomicWrites
A database page usually takes  k, but at the low level writing is performed by
blocks,whichareoftensmaller(typicallybytesork). Thus,ifafailureoc-
curs,apagemaybewrittenonlypartially. Itmakesnosensetoapplyregular
entriestosuchapageduringrecovery.
Toavoidpartialwrites,Postgresavesafullpageimage()inthewhen p.
thispageismodifiedforthefirsttimeafterthecheckpointstart. Thisbehavioris
controlledbythefull_page_writesparameter,butturningitoffcanleadtofataldata on
corruption.
Iftherecoveryprocesscomesacrossaninthe,itwillunconditionallywrite
ittodisk(withoutcheckingits);justlikeanyentry,sareprotectedby
checksums,sotheirdamagecannotgounnoticed.Regularentrieswillthenbe
appliedtothisstate,whichisguaranteedtobecorrect.
Thereisnoseparateentrytypeforsettinghintbits: thisoperationisconsid- p.
erednon-criticalbecauseanyquerythataccessesapagewillsettherequiredbits
anew. However,anyhintbitchangewillaffectthepage’schecksum. Soifcheck-
sumsareenabled(orifthe wal_log_hintsparameterison),hintbitmodifications off
areloggedass.1
Eventhoughtheloggingmechanismexcludesemptyspacefroman,2 thesize
ofthegeneratedfilesstillsignificantlyincreases.Thesituationcanbegreatly
improvedifyouenablecompressionviathewal_compressionparameter. off
Let’srunasimpleexperimentusingthepgbenchutility. Wewillperformacheck-
pointandimmediatelystartabenchmarktestwithahard-setnumberoftransac-
tions:
=> CHECKPOINT;
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/438320B0
(1 row)
1 backend/storage/buffer/bufmgr.c,MarkBufferDirtyHintfunction
2 backend/access/transam/xloginsert.c,XLogRecordAssemblefunction
211
Chapter11. WALModes
postgres$ /usr/local/pgsql/bin/pgbench -t 20000 internals
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/44EBC468
(1 row)
Hereisthesizeofthegeneratedentries:
=> SELECT pg_size_pretty('0/44EBC468'::pg_lsn - '0/438320B0'::pg_lsn);
pg_size_pretty
−−−−−−−−−−−−−−−−
23 MB
(1 row)
Inthisexample,stakemorethanhalfofthetotalsize. Youcanseeitfor
yourselfinthecollectedstatisticsthatshowthenumberofentries(N),thesize
ofregularentries(Recordsize),andthesizeforeachresourcetype(Type):
postgres$ /usr/local/pgsql/bin/pg_waldump --stats \
-p /usr/local/pgsql/data/pg_wal -s 0/438320B0 -e 0/44EBC468
Type N (%) Record size (%) FPI size (%)
−−−− − −−− −−−−−−−−−−− −−− −−−−−−−− −−−
XLOG 1844 ( 1,51) 90356 ( 1,13) 14834120 ( 96,91)
Transaction 20001 ( 16,37) 680114 ( 8,53) 0 ( 0,00)
Storage 1 ( 0,00) 42 ( 0,00) 0 ( 0,00)
CLOG 1 ( 0,00) 30 ( 0,00) 0 ( 0,00)
Standby 2 ( 0,00) 96 ( 0,00) 0 ( 0,00)
Heap2 20221 ( 16,55) 1282346 ( 16,09) 16384 ( 0,11)
Heap 80039 ( 65,53) 5916795 ( 74,22) 274120 ( 1,79)
Btree 41 ( 0,03) 2376 ( 0,03) 183020 ( 1,20)
−−−−−− −−−−−−−− −−−−−−−−
Total 122150 7972155 [34,24%] 15307644 [65,76%]
Thisratiowillbesmallerifdatapagesgetmodifiedbetweencheckpointsseveral
times.Itisyetanotherreasontoperformcheckpointslessoften.
Wewillrepeatthesameexperimenttoseeifcompressioncanhelp.
=> ALTER SYSTEM SET wal_compression = on;
=> SELECT pg_reload_conf();
=> CHECKPOINT;
212
11.3. WALLevels
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/44EBC518
(1 row)
postgres$ /usr/local/pgsql/bin/pgbench -t 20000 internals
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/45975008
(1 row)
Hereisthesizewithcompressionenabled:
=> SELECT pg_size_pretty('0/45975008'::pg_lsn - '0/44EBC518'::pg_lsn);
pg_size_pretty
−−−−−−−−−−−−−−−−
11 MB
(1 row)
postgres$ /usr/local/pgsql/bin/pg_waldump --stats \
-p /usr/local/pgsql/data/pg_wal -s 0/44EBC518 -e 0/45975008
Type N (%) Record size (%) FPI size (%)
−−−− − −−− −−−−−−−−−−− −−− −−−−−−−− −−−
XLOG 1860 ( 1,52) 94860 ( 1,19) 2908763 ( 98,32)
Transaction 20001 ( 16,38) 680114 ( 8,53) 0 ( 0,00)
Storage 1 ( 0,00) 42 ( 0,00) 0 ( 0,00)
CLOG 1 ( 0,00) 30 ( 0,00) 0 ( 0,00)
Standby 3 ( 0,00) 150 ( 0,00) 0 ( 0,00)
Heap2 20230 ( 16,57) 1285372 ( 16,12) 244 ( 0,01)
Heap 80012 ( 65,52) 5911849 ( 74,15) 38797 ( 1,31)
Btree 14 ( 0,01) 860 ( 0,01) 10681 ( 0,36)
−−−−−− −−−−−−−− −−−−−−−−
Total 122122 7973277 [72,94%] 2958485 [27,06%]
Tosumitup,whenthereisalargenumberofscausedbyenabledchecksumsor
full_page_writes(thatis,almostalways),itmakessensetousecompressiondespite
someadditionaloverhead.
11.3. WAL Levels
Themainobjectiveofwrite-aheadloggingistoenablecrashrecovery. Butifyou
extendthescopeofloggedinformation,acanbeusedforotherpurposestoo.
213
Chapter11. WALModes
Postgreprovidesminimal,replica,andlogicallogginglevels.Eachlevelincludes
everythingthatisloggedonthepreviousoneandaddssomemoreinformation.
replica Thelevelinuseisdefinedbythewal_level parameter; itsmodificationrequiresa
serverrestart.
Minimal
The minimal level guarantees only crash recovery. To save space,the operations
on relations that have been created or truncated within the current transaction
are not logged if they incur insertion of large volumes of data (like in the case
of   and  commands).1 Insteadofbeinglogged,
all the required data is immediately flushed to disk,and system catalog changes
becomevisiblerightafterthetransactioncommit.
Ifsuchanoperationisinterruptedbyafailure,thedatathathasalreadymadeit
todiskremainsinvisibleanddoesnotaffectconsistency. Ifafailureoccurswhen
theoperationiscomplete,allthedatarequiredforapplyingthesubsequent
entriesisalreadysavedtodisk.
v. The volume of data that has to be written into a newly created relation for this
2MB optimizationtotakeeffectisdefinedbythewal_skip_thresholdparameter.
Let’sseewhatgetsloggedattheminimallevel.
v. By default, a higher replica level is used,which supports data replication. If you
choose the minimal level, you also have to set the allowed number of walsender
10 processestozerointhemax_wal_sendersparameter:
=> ALTER SYSTEM SET wal_level = minimal;
=> ALTER SYSTEM SET max_wal_senders = 0;
Theserverhastoberestartedforthesechangestotakeeffect:
postgres$ pg_ctl restart -l /home/postgres/logfile
Notethecurrentposition:
=> SELECT pg_current_wal_insert_lsn();
1 include/utils/rel.h,RelationNeedsWALmacro
214
11.3. WALLevels
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/459772F0
(1 row)
Truncatethetableandkeepinsertingnewrowswithinthesametransactionuntil
thewal_skip_thresholdisexceeded:
=> BEGIN;
=> TRUNCATE TABLE wal;
=> INSERT INTO wal
SELECT id FROM generate_series(1,100000) id;
=> COMMIT;
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/45977498
(1 row)
Instead of creating a newtable,I run the command as it generates fewer
entries.
Let’sexaminethegeneratedusingthealreadyfamiliarpg_waldumputility.
postgres$ /usr/local/pgsql/bin/pg_waldump \
-p /usr/local/pgsql/data/pg_wal -s 0/459772F0 -e 0/45977498#
rmgr: Storage len (rec/tot): 42/ 42, tx: 0, lsn:
0/459772F0, prev 0/459772B8, desc: CREATE base/16391/24784
rmgr: Heap len (rec/tot): 123/ 123, tx: 133853, lsn:
0/45977320, prev 0/459772F0, desc: UPDATE off 45 xmax 133853 flags
0x60 ; new off 48 xmax 0, blkref #0: rel 1663/16391/1259 blk 0
rmgr: Btree len (rec/tot): 64/ 64, tx: 133853, lsn:
0/459773A0, prev 0/45977320, desc: INSERT_LEAF off 176, blkref #0:
rel 1663/16391/2662 blk 2
rmgr: Btree len (rec/tot): 64/ 64, tx: 133853, lsn:
0/459773E0, prev 0/459773A0, desc: INSERT_LEAF off 147, blkref #0:
rel 1663/16391/2663 blk 2
rmgr: Btree len (rec/tot): 64/ 64, tx: 133853, lsn:
0/45977420, prev 0/459773E0, desc: INSERT_LEAF off 254, blkref #0:
rel 1663/16391/3455 blk 4
rmgr: Transaction len (rec/tot): 54/ 54, tx: 133853, lsn:
0/45977460, prev 0/45977420, desc: COMMIT 2022−08−16 19:34:58.930526
MSK; rels: base/16391/24783
215
Chapter11. WALModes
p. Thefirstentrylogscreationofanewrelation(sincevirtuallyrewritesthe
table).
Thenextfourentriesareassociatedwithsystemcatalogoperations. Theyreflect
thechangesinthepg_classtableanditsthreeindexes.