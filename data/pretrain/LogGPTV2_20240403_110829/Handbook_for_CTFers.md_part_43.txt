ment variables can be used to detect WinDbg.
In CTFs, when we encounter similar suspicious methods, we should first learm how
 ssedq o mo no angy ueo am u pue guuoun ame o
---
## Page 391
5.5 Binary Code Protection and Obfuscation
377
7. Architecture Switch
64-bit Windows can still run 32-bit applications. In fact, 32-bit applications are
running on WoW64, a compatibility layer provided by Windows, and an architecture
switch is necessary for applications running on WoW64. A 32-bit application
running on a 64-bit Windows system needs to complete the architecture switch
before it can do system calls. The switch is often done through a routine inside
wow64cpu.dll commonly known as the Heaven’s Gate. Its logic is very simple and
can be described as the following.
// x86 a.sm
push0x33
// cs : 0x33
Push
retf
x64_insn_addr
In the real world, this is done by an fword jmp, which is similar to a retf.
Similarly, to switch the CPU from a 64-bit execution state back to a 32-bit state,
the following instructions can be used.
 / x64 asm
push 0x23
/ / cs : 0x23
pushx86_insn_addr
bg1ax
For more details about the implementation of WoW64, interested readers can
check it out using search engines. Strictly speaking, this approach cannot be an
called anti-debugging technique, but most user-state debuggers in Windows can’t
technique.
trace the code after an architecture switch, hence we still consider it an anti
We recommend using WinDbg(x64) for debugging arch switching instructions.
Set a breakpoint at retf, and when the breakpoint is triggered, step-in, the debugger
will automatically switch to another architecture. After that, the debugger’s registers,
stack, address space, etc. are automatically adapted to the 64-bit mode. I used this
type of code in an RE challenge of the *Null Pointer" competition. Its name is
GatesXGame (https:/www.npointer.cn/question.html?id5). Interested readers can
practice, leam how to debug it, and capture the flag.
Windows ring3 level. In fact, there are many difrent anti-debugging techniques for
This section only lists a few common and simple anti-debugging techniques at 
different privilege levels and different operating systems. When we encounter them
in CTFs or in some actual reversing tasks, we should not be overwhelmed. Be
patient, understand how they work, then try to break them.
---
## Page 392
378
5Reverse Engineering
5.5.4Introduction to ollvm
OLLVM (Obfuscator-LLVM) is a control flow flattening obfuscation tool based on
the LLVM (Low-Level Virtual Machine) implementation from the 2010 paper
Obfuscating C++ Programs via Control Flow Flattening, the main idea is to disrupt
the control relationships between the basic blocks of a program and leave them to be
managed by a unified distributor. For example, Fig. 5.80 shows the control flow
diagram of a normal program, while Fig. 5.81 shows the control flow diagram after
control flow flattening.
As you can see, the flattening of the control flow is very obvious, as the entire
execution flow of the program is controlled by a master distributor that updates the
state variable at the end of each basic block according to its current state, thus
determining the next basic block to be executed. The structure of the distributor is
similar to that of the VM Handler, and distinguishing between the two requires a
closer look at the key variables that control the flow of program execution. To
resolve the control flow flattening obfuscation, simply extract the state variables and
trace them according to the distributor’s distribution rules to restore the control flow
of the original program. Detailed implementations of OLLVM deobfuscation can be
found  indeffat.py(https://security.tencent.com/index.php/blog/msg/112)
HexRaysDeob (https://www.hex-rays.com/blog/hex-rays-microcode-api-vs-obfus-
and
cating-compiler/) open-source tools.
int a=0;
int b=0;
scanf(=%d",&a);
true
if (a <= 0 )
false
b =1;
b =2;
printf(*%d",b);
ret;
Fig, 5.80 The control flow
uesSord eu
---
## Page 393
5.6 High-level Progran
ng Language Reverse
379
int a =0;
int b=0;
printf(²%d",b];
int state = 1;
ret;
case 5
switch(state)
case 1
case 2
case 3
scanf("%d",&a);
if [a <= 0 ] state = 3;
b =1;
b = 2;
state = 2;
else state = 4;
state =5;
state = 5;
Fig, 5.81 The control flow diagram after control flow flattening
These generic open-source deobfuscation tools address only a portion of the
standard control-flow flatening obfuscation, however, the original OLLVM was
discontinued in 2017, and existing modified versions of OLLVM are mostly
maintained by individuals.
Generally, some new functions are added or new implementations are used
instead of the original version, such as (1) adding fake state variables or storing
control flow relationships between basic blocks elsewhere to interfere with script
analysis; (2) adding many basic blocks that will not be executed to make analysis
odaox) susuou uss uesado epoads aos Sussn (e) ngp aou
nqnsp ueu at aoedau on (sa susuqau Sueuss “gupue
For these reasons, we cannot always count on using some kind of generic
deobfuscation script to restore the program logic in the real-world reverse engineer-
ing process. A better approach is to set breakpoints of memory read/write for some
critical data (such as the flag), and then locate the logic in the program that operates
on the critical data or use trace-like tools to extract the basic blocks that the program
has executed, and then focus on analyzing the logic of those basic blocks. Of course,
if possible, we should still try to write deobfuscating scripts to get the exact logic of
the program and complete the solution.
5.6High-level Programming Language Reverse
In CTF competitions there are some other reverse challenges written in a high-level 
Ianguage, such as Rust, Python, Go, C#, etc., and sometimes some specific libraries,
such as MFC, are involved. Rust, Go, etc. are high-level languages without virtual
---
## Page 394
380
5 Reverse Engineering
machines, while Python, C#, etc. are high-level languages based on virtual
machines. This section describes their analysis ideas and explains the general
approach to analyzing C++ MFC programs.
5.6.1Rust and Go
This section will explain how to analyze the Rust program using Insomni'*hack teaser
2019s beginner_reverse as an example. When the program is loaded with IDA (see
Fig. 5.82),there are some strange function names in the left pane and some strings in
the right pane that look like std:rt:lang_ start_internal::, which can be guessed to be
a program written in some high-level language. Search the string on the Intermet and
gets some information about the Rust language, which leads to the inference that it is
a Rust program. Of course, this is an analysis when there are symbols in the program,
but if the program is stripped, you can search for Rust strings such as main.rs in IDA
and infer whether the program is a Rust program or not.
o sjooi sos unm s uesod o pqm u aenue[ a Suguusap 1ay
be used to optimize IDA's analysis of the program to facilitate the analysis. A public
script tool called rust-reversing-helper has been released on GitHub, of which
tutorials can be found on htps:/kong.re.kr/?p=71. 5 functions are implemented
by this tool, including the signature loading, which is the most important, optimizes
the identification of Rust functions, thus reducing analysis time.
The result of the rust-reversing-helper optimization is shown in Fig. 5.83. You
can see that the function name in the left Function name panel has been optimized,
and we can start to analyze it now. As a general rule of thumb, we tend to analyze the
std__rt__lang_start_internal function. However, unlike the regular challenges,
std__t__lang_start_internal is Rust's initialization function, which functions as the
start function, and the function beginer_reverse_ _main function can be found above
call std__rt_lang_start_intermal, so in Rust, the main function is used as an
Fig, 5.82 IDA load Rust program
---
## Page 395
5.6 High-level Programming Language Reverse
381
megu,ct
U1540
Lie59.04
Fig, 5.83 The result of the rust-reversing-helper optimization
argument of initialization function and is loaded and executed after the program is
initialized.
To continue the analysis of beginer_reverse__main, see Fig. 5.84, the logic of this
function is relatively intuitive: after loading some data, the program begins to read
the input, but the location of the input data is not known. Thus, despite the
optimization of the script tool, it is still difficult to restore the program flow in its
entirety. Here it is necessary to manually fix some recognition errors, such as the
read_line) function without a parameter and without assignment of its return value,
which is impossible. There are many ways to fix this, such as taking dynamic
debugging, placing a breakpoint at read_line(, observing the stack, or analyzing
the read_line function to determine how many arguments it will have, or consulting
 xg o eep oq
Now that we have a good idea of how to analyze Rust, subsequent analyses can be
solved with the usual static and dynamic analysis methods, which we will not
repeat here.
The following is an example of the reverse of Golang programs using
INCTF2018s ultimateGo as an example target. Figure 5.85 shows how it looks
when it was loaded by IDA. The start function is obviously different from the start
function of general ELF programs, from which we can infer that this program may
not be compiled by the conventional C/C++ compiler. Execute strings command,
output the visible strings contained in the program, and soon find some strings with
“.go" (see Fig. 5.86), we can infer that the program is written in Go language.
Likewise, to facilitate the analysis, Golang’s optimization analysis scripting tools
are available on Github as golang_loader_assist and IDAGolangHelper. To recover
function names using IDAGolangHelper, see Fig. 5.87.
As you can see, the function name has been restored on the left side of the form, 
and the main function is visible on the right side. As with Rust, the Go main function
---
## Page 396
382
5Reverse Engineering
int64 v38; //[rap+8on][rbp-38h]
rror())
)(vo
+16)
+321
51010
3
（ET+OA）（
205299436797011
v34
fOA
28
IL;
rd_51080;
std::ioiistdioiistdin();
29
=OL)
v27=v1y
if (v35 ==(void **)6bitseIm )
coretiresultitunwrap_falled(aErrorReadingzm, 19LL, 6v30);
v30=v36;
(!_InterlockedSub64(v27,1uLL))
v28
11sync1Are_iidrop_slow(av27,&v27))
*）6v29+1）)
*)Ev29+1）;
BYTE*)（*（(_QMORD*)v29+1）+v28-1）
ORD*)4v29+1)+v28;
=0)
7
94=（t+6Z△9（.GNO））+=
Y4
A=（T+6ZA（
goto LABsL_23j
f (v28 ==v4 - 1 )
v10 =0;
Fig, 5.84 beginer_reverse__main function
Fig, 5.85 Start function
public start
start prog near
irg_o= byte ptr
Lea
rnl,
rdi,
+dux]
lea
rax,
1oc_458420
[rsp+0]
jp
rax
---
## Page 397
5.6 High-level Progra
nguage Reverse
383
Fig, 5.86 The visible
program
strings contained in the
local
qo/src
/usr/local/go/src/context/context.go
/usr/ocal/go/src/nath/btg/artth.go
/usr/local/go/src/nath/btg/natconv.go
/usr/local/go/src/nath/btts/btts.go
usr/local/oo/scc/nath/cand/cand.oi
fien
_
reiect_an_noeawar
eet_R_unc
TipeFoedMLtler
Fig, 5.87 To recover function names us
asing IDAGolangHelper
runtime_check（v15，a3，（
int64)v3，v9,
runtime_args(（
int64)v3，v9，v18,v19,
V1
runtime_osinit();
V2
runtime_schedinit();
V27=0LL;
V28=&off_54A470;
runtime_newproc((char)v3,
v9，v22，v23,v2
result=runtime_mstart（(
int64)v3,v9);
Fig, 5.88 "main° function code
---
## Page 398
384
5  Reverse Engineering
runtime_unlockosThread（al,a2);
if（1byte_5FD303&&1byte_5FD304）
main_main（a1,a2,（_int64)off_53BAA0）;
if（dword_5FD360)
for（i=0LL;i<1000;i=v27+1）
v19=（unsigned int)dword_5FD360;
if（1dword_5FD360）
break;
Fig, 5.89 *main° function code
is taken as an argument and executed after initialization (see Fig. 5.88). off_54A470
is actually runtime_main. analyzing runtime_main reveals the main_main function
(see Fig. 5.89). At this point, Go's main function is located completely, and then you
can start analyzing the main function.
Note that functions prefixed with runtime_, fimt_, etc. are the package names of
the go programs and can be understood from the function name, while functions
prefixed with main_ are functions written by the programmer himself, which need to
be analyzed in detail, and subsequent analysis can be done using general analysis
methods, which have been described in the previous article.
In short, whether it is Rust or Golang, such high-level language programs without
a virtual machine can be treated as C programs with a high level of abstraction and
some extra operations, and one should always look for features such as strings,
function names, symbolic variables, magic numbers, etc. to determine the language
to which they belong, to know what corrections to make. After the correction, it can
be analyzed as a C program.
5.6.2C#andPython
C# and Python are high-level languages based on virtual machines. The bytecode
contained in the executable program or file is not the machine code of traditional
assembly instructions, but the bytecode of its virtual machine instructions, so it is not
suitable to use IDA analysis for such programs or files.
NET Reflector, ILSpy/dnSpy, Telerik JustDecompile, JetBrains dotPeek, etc. are
tools to analyze C#(.NET) programs. To analyze a C# program, just open it with
these tools and get the source code. Of course, this is if the C# program is
unprotected. For protected (packed) C# programs, you need to unpack them before
analyzing them using tools like de4dot. Since C# is not very common in CTF
competitions, we won't explain it here with examples, but readers can do their
research if they are interested.
---
## Page 399
5.6 High-level Programming Language Reverse
385
In the CTF competitions, the reverse engineering of Python is often the reverse
analysis of its PYC file, which is a bytecode file generated after the compilation of
the PYC file; for some unobfuscated PYC iles, Python's uncompyle2 can restore
them to PY files; for obfuscated PYC files, if they cannot be deobfuscated, only the
virtual machine instructions can be analyzed.
Here is an example of Python 2.7. Before analyzing its virtual machine instruc-
tions, it is important to understand the Python PyCodeObject object, which is
defined in the following excerpt.
/ * Bytecode object */
typedef struct 
Pyobject_HRAD
int co_kwonlyaxgcount ;
int co_argcount ;
/+ #keyword only arguments */
/+ #arguments, except *args */
int co_nlocals;
/* #local variables +/
int co_stacksize;
int co_flags;
/+ #entries needed for evaluation stack */
/+ Co_-.., see belov */
Pyobject *co_code ;
/* instruction opcodes */
Pyobject *co_consts;
/+ list of strings (names used) */
/+ list (constants used) */
Pyobject *co_names;
PyObject *co_varnames;
/* tuple of strings (local variable names) +/
Pyobject +co_freevars;
/* tuple of stxings (free variable names) +/
PyObject *co_cellvars;
/* tuple of stzings (cell variable names) +/
/+ The rest dcesn't count for hash or comparisons */
unsigned char
+co_ce112arg;
/+ Maps cell vars which are arguments . */
Pyobject *co_filename;
/* unicode (where it was loaded fzom) */
The description follows.
• co_nlocals: number of local variables in Code Block, including their position
parameters.
• co_stacksize: the amount of stack space needed to execute this Code Block.
* co_code: Bytecode instruction sequence compiled from this Code Block, in the
form of a PyStringObject.
• co_consts: PyTupleObject, stores all constants in Code Block.
co_names: PyTupleObject, stores all symbols in Code Block.
co_vamames: collection of local variable names in Code Block.
* co_freevars: Python's implementation of closure storage.
• co_cellvars: collection of local variable names referenced by nested functions
within Code Block.
• co_filename: The full path to the -py file corresponding to the Code Block