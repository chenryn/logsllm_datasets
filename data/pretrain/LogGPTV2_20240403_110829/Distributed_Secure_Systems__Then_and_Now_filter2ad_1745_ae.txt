### Synchronization and Security in TNIU Communications

To synchronize sequence numbers or timestamps between each pair of TNIUs, a specialized TNIU-to-TNIU protocol is required. This protocol must be resistant to spoofing but cannot use sequence numbers or timestamps for this purpose. Instead, a challenge-response technique, first proposed by Needham and Schroeder [9], can be employed.

### Integration and Construction of TNIUs

Integrating a TNIU between a host and its LAN station raises questions about the placement of various protocol functions. The issue of assigning functions to layers in a protocol hierarchy becomes complex, especially with encryption. Standard functions like checksums and sequence numbering are duplicated, albeit in a more sophisticated manner, by protection and security mechanisms. Therefore, TNIUs should not operate below the normal protocol layering hierarchy but must be integrated with it. We propose that TNIUs take over all protocol functions except those at the highest level. This approach allows TNIUs to act as network front ends, offloading low-level network tasks from their hosts and enhancing overall performance.

### Top-Level Protocol and Datagrams

The top-level protocol of the Newcastle Connection provides a remote procedure call (RPC) service, requiring a reliable datagram service from lower levels of its protocol hierarchy. This datagram service serves as the interface between host machines and their TNIUs. Individual datagrams form the message units encrypted and protected by the TNIUs. Most RPCs and their results can be encoded into a single datagram, but file read and write operations, which can transfer large amounts of data, are broken into multiple datagrams by a sub-protocol of the host machines' RPC protocol.

### Cryptographic Techniques and Denial of Service

TNIUs employ cryptographic techniques to counter the threat of information disclosure. The remaining risk is denial of service caused by the destruction of genuine LAN traffic or the injection of large quantities of garbage. While TNIUs cannot prevent or defeat such attacks, they must continue to provide reliable (though degraded) service. Additionally, TNIUs must recover safely from crashes, including power failures.

### Hardware and Verification

Constructing and verifying TNIUs that perform all described functions present significant challenges. However, they are similar to the cryptographic front ends of wide-area networks, some of which have been built and verified. Modern 16-bit microprocessors provide a suitable hardware base, and single-chip implementations of the DES algorithm can perform CBC-mode encryption at LAN speeds. A separation kernel enforces cleartext/ciphertext (red/black) separation within each TNIU, with basic physical protection provided by memory management chips. Since no disks are needed (software can be held in ROM), a complete TNIU can fit on a single board and cost less than a thousand dollars.

### Unclassified Hosts and TNIUs

Unclassified hosts can generally be considered part of the same security partition as the outside world. They do not need to be separated, so their TNIUs do not need to use encryption for communication. In such cases, TNIUs are not necessary for unclassified hosts, providing a cost-saving measure in systems where most hosts are unclassified. This also allows a standard, unpartitioned Unix system to be upgraded to a securely partitioned one by adding a limited number of TNIUs.

### Multilevel Secure File Store

The initial design imposes a very restrictive security policy, isolating security partitions with no information flow across different levels. To extend this design for multilevel secure information flow, we introduce a secure file store. This allows information to flow from Secret to Top Secret levels, but not vice versa.

#### Secure Information Flow

Simply modifying the TNIU policy to allow Top Secret machines to receive communications from Secret machines is flawed because the communication cannot be truly one-way. A Secret machine must confirm that the Top Secret machine can accept and has received the information correctly, necessitating bidirectional communication, which conflicts with the multilevel security policy.

#### Trustworthy Intermediary

A better approach is to use a trustworthy intermediary that provides an independent and useful service. We have chosen files as the only objects allowed to cross security boundaries, with the secure file store providing multilevel secure storage and retrieval. When a Secret-level host wants to make a file available to higher levels, it "publishes" the file by sending it to the secure file store. A Top Secret host can then acquire a copy of this file.

#### Logical Position and Role

Conceptually, the secure file store is a Unix system that returns exceptions to all system calls except those related to files. It will be associated with a directory, say SFS, in the Unix United directory structure. The SFS directory will contain subdirectories for each security partition. A simple Unix United directory structure with the secure file store and two ordinary hosts is shown in Figure 4.

#### Secure File Manager (SFM)

The secure file store is partitioned into trusted and untrusted components. The trusted component, the Secure File Manager (SFM), enforces the security policy, while untrusted components provide file storage. These untrusted components are standard Unix systems dedicated to a single security partition. An enhanced TNIU for the SFM contains the encryption keys of all security partitions, managing simultaneous communications using different keys.

#### Remote Procedure Calls (RPCs)

Host machines send RPCs to the SFM. The TNIU of the SFM determines the sender's security partition and passes this information along with the decrypted RPC. The SFM checks if the requested operation complies with the security policy and forwards the RPC to the appropriate file storage machine for processing, relaying the results back to the caller.

#### Security Weakness

There is a potential flaw: since the Unix file storage machines cannot be trusted, they can be used to convey Top Secret information to lower-level machines. For example, a corrupt Top Secret host could request specific files in a pattern that encodes a secret message. This machine could then legitimately copy these files, leading to a security breach.

By addressing these issues, the secure file store ensures that information flows securely and reliably across different security levels.