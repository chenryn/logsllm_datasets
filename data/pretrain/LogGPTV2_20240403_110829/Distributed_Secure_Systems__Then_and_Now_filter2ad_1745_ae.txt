between  messages 
that  share  a  common  prefix. 
Synchronizing  the  sequence  numbers  or  time  stamps 
used  between  each  pair  of  TNIUs  requires  a  special 
TNIU-to-TNIU  protocol.  This  protocol  must  be 
resistant  to  spoofs,  but  it  obviously  cannot  use 
sequence  numbers  or  time  stamps  itself  for  this 
purpose. A challenge-response technique first proposed 
by Needham and Schroeder[9] can be used instead. 
The  integration  and  construction  of  TNIUs.  The 
interposition  of  a  TNIU  between  a  host  and  its  LAN 
station  raises  interesting  questions  concerning  the 
location of various protocol functions. The whole issue 
of assigning function to layers in a protocol hierarchy 
can  become  quite  complex 
the  presence  of 
in 
encryption  because  standard 
functions  such  as 
checksums and sequence numbering, for example, are 
duplicated  – 
in  a  different  and  more 
sophisticated  way  –  by  the  protection  and  security 
mechanisms.  For  this  reason,  TNIUs  should  not 
operate  below  the  normal  protocol  layering  hierarchy 
but must be integrated with it. In fact, we propose that 
TNIUs take over all protocol functions, except those at 
the  highest  level.  The  benefit  of  this  approach  is  that 
the  TNIUs  act  as  network  front  ends,  relieving  their 
hosts  of  the  low-level  network  load  and  thereby 
boosting overall performance. 
though 
The top-level protocol of the Newcastle Connection 
provides a remote procedure call, or RPC, service and 
requires  a  fairly  reliable  datagram  service  from  the 
lower  levels  of  its  protocol  hierarchy.  We  use  this 
datagram  service  as 
interface  between  host 
machines and their TNIUs; individual datagrams form 
the message units that  are encrypted  and protected by 
the  TNIUs.  Most  RPCs  and  their  results  can  be 
encoded  into  a  single  datagram,  but  those  concerned 
with file reads and writes, which can transfer arbitrarily 
large  amounts  of  data,  are  broken  into  as  many 
separate  datagrams  as  necessary  by  a  subprotocol  of 
the host machines’ RPC protocol. 
The  cryptographic  techniques  employed  by  TNIUs 
counter  the  threat  of  information  disclosure.  The 
remaining  danger  is  denial  of  service  caused  by  the 
destruction of genuine  LAN  traffic or  the  injection of 
large  quantities  of  garbage.  Although  they  can  do 
nothing to prevent or defeat such attacks, TNIUs must, 
as  a  correctness  requirement,  continue  to  provide 
reliable (though necessarily degraded) service  in spite 
the 
It 
and 
is  also  a  correctness 
of  such  occurrences. 
requirement  of  TNIUs  that  they  recover  from  crashes 
safely. (Of course, verified software does not crash, but 
we must allow for the possibility of a power failure.) 
construction 
of  TNIUs, 
TNIUs  that  perform  all  the  functions  described 
certainly  present  a  challenge  in  both  construction  and 
verification.  We  argue,  however,  that  they  are  very 
similar  to  the  cryptographic  front  ends  of  wide-area 
networks,  and  examples  of  these  have  already  been 
built  and,  in  some  cases,  verified,4  Modern  16-bit 
microprocessors  provide  a  suitable  hardware  base  for 
the 
single-chip 
implementations  of  the  DES  algorithm  are  available 
that  can  perform  CBC-mode  encryption  at  LAN 
speeds.  A  separation  kernel  must  be  used  to  enforce 
cleartext/ciphertext  (so-called  red/black)  separation 
within  each  TNIU,  with  the  basic  physical  protection 
provided  by 
chips 
appropriate to the chosen processor. Since no disks are 
needed (the software can be held in ROM), a complete 
TNIU should fit on a single board and cost less than a 
thousand dollars. 
the  memory  management 
Unclassified  hosts  can  generally  be  considered  to 
belong  to  the  same  security  partition  as  the  outside 
world.  They  need  not  be  separated  from  it,  and 
therefore  their  TNIUs  need  not  use  encryption  to 
protect their communications. In this  case,  there  is no 
need to provide TNIUs to Unclassified hosts, and this 
provides a worthwhile economy in systems where the 
majority  of  hosts  are  Unclassified.  It  also  permits  a 
standard,  unpartitioned  Unix  United  system  to  be 
smoothly upgraded to a securely partitioned one by the 
addition of a limited number of TNIUs. 
A multilevel secure file store 
The  design  introduced  so  far  imposes  a  very 
restrictive  security  policy.  The  security  partitions  are 
isolated from one another with no flow of information 
possible  across  different  levels  or  compartments.  We 
will  now  explain  how  to  extend  this  design  to  permit 
information to cross security partitions in a multilevel 
secure  manner.  This  will  allow  information  to  flow 
from the Secret to the Top Secret levels, for example, 
but not vice versa.  
It  might  seem  that  multilevel  secure  information 
flow could be provided by simply modifying the policy 
enforced at the TNIUs so that, for example, Top Secret 
machines  could  receive  communications  from  Secret 
machines  as  well  as  Top  Secret  ones.  Top  Secret 
TNUIS  would  be  provided  with  the  Secret  as  well  as 
the  Top  Secret  encryption  keys  and  would  permit 
incoming  but  not  outgoing  communications  with 
Secret-level machines. The flaw in this scheme is that 
187187
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
the  communication  could  not  be  truly  one  way;  a 
Secret  machine  cannot  reliably  send  information  to  a 
Top  Secret  one  without  first  obtaining  confirmation 
that  the  Top  Secret  machine  is  able  to  accept  it  and, 
later,  that  it  has  received  it  correctly.  The  Secret 
machine must therefore be able to receive information 
from the Top Secret machine as well as send to it. This 
conflicts with the multilevel security policy.  
Figure 4. The naming structure of a simple 
Unix United system incorporating a secure file 
store. 
Certainly the trustworthy TNIUs in the system could 
be  enhanced  to  undertake  reliable  delivery  of  data 
across security partitions, but this misses  the point. If 
one  host  sends  a  file  to  another,  the  sender  needs  to 
know  that  the  receiver  has  been  able  to  store  the  file 
correctly,  not  merely  that 
its  TNIU  received  it 
correctly.  Notice,  too,  that  this  scheme  would  only 
provide  for  unsolicited  communications;  a  Secret 
machine  could  send  information  to  a  Top  Secret 
machine  of  its  own  volition,  but  the  Top  Secret 
machine could not request that the information be sent 
because  its  request  would  constitute  an  insecure 
information flow. 
The  best  way  to  provide  secure  information  flow 
across  security  boundaries  is  through  a  trustworthy 
intermediary  that  provides  an  independent  and  useful 
service.  The  complexity  of  such  an  intermediary  will 
depend  on  the  generality  of  that  service.  Combining 
simplicity  with  the  most  useful  function,  we  have 
selected  files  as  the  only  objects  allowed  to  cross 
security boundaries, and we have chosen the multilevel 
secure  storage  and  retrieval  of  files  as  the  service 
provided  by  the  trustworthy  intermediary.  This  is 
achieved  by  adding  to  the  system  a  secure  file  store 
with  the  ability  to  communicate  with  hosts  of  all 
security  classifications.  The  idea  is  that  when  a 
Secret-level  host  wishes  to  make  one  of  its  files 
available to higher levels, it “publishes” it by sending it 
to  the  secure  file  store.  A  Top  Secret  host  can 
subsequently acquire a copy of this file from the secure 
file store. 
Before  describing  the  mechanism  of  the  secure  file 
store,  we  need  to  outline  its  logical  position  and  role 
within  the  overall  Unix  United  system.  Conceptually, 
the  secure  file  store  is  just  an  ordinary  Unix  system 
that  returns  exceptions  to  all  system  calls  except 
certain  ones  concerned  with  files.  As  with  any  other 
component,  it will be associated with a directory, say 
SFS,  in  the  Unix  United  directory  structure.  The  SFS 
directory  will  contain  subdirectories  for  each  security 
partition  in  the overall  system. A  simple Unix United 
directory structure containing just the secure file store 
and two ordinary hosts is shown in Figure 4. 
other’s 
existence, 
The ordinary hosts are associated with the directories 
TSUnix and SUnix and are allocated to the Top Secret 
and Secret security partitions, respectively. Of course, 
from within SUnix, the TSUnix branch of the directory 
tree is invisible, and vice versa. Even if the Newcastle 
Connections  within  TSUnix  and  SUnix  are  aware  of 
each 
attempted 
intercommunication will be stopped by their TNIUs. If 
the Secret-level user John of SUnix wishes to make his 
“paper” file available to the Top Secret user Brian, he 
does  so  by  simply  copying  it  into  a  directory  that  is 
subordinate to the SFS directory. For example: 
publish <paper/ ../SFS/SECRET/john/paper. 
(We explain later why this command uses “publish” 
and a  later one uses  “acquire”  instead of  the standard 
Unix  command  “cp.”)  This  command  will  cause  the 
secure file store machine to receive a remote procedure 
call from SUnix requesting it to create and write a file 
called  paper  located  as  a  sibling  of  the  file  “c.  “  The 
secure file store will consult  its record of the security 
policy to determine whether such a machine is allowed 
to  create  Secret-level  files.  Assuming  that  it  is,  the 
requested file operation will be allowed to proceed and 
the copy of the file will be created. Similarly, when the 
Top  Secret  user  Brian  attempts  to  print  a  copy  of  the 
paper by issuing the command 
any 
acquire /../SFS/SECRET/john/paper|lpr 
the  secure  file  store  will  receive  a  remote  procedure 
call from the machine TSUnix requesting a copy of the 
file.  Once  again,  it  can  consult  the  security  policy, 
where it will see that the request should be allowed to 
proceed.  The  secure  file  store  will,  however,  refuse 
requests from TSUnix to write into this “paper” file, or 
to delete it, since these contravene the requirements of 
multilevel security. Similarly, John will not be allowed 
to read the “salaries” file held under the TOPSECRET 
directory. 
We  now  move  from  the  services  provided  by  the 
secure file store to its construction. A multilevel secure 
Unix  file  system  might  seem  to  demand  a  substantial 
number  of  provably 
trustworthy  mechanisms  – 
virtually a secure Unix. With careful design, however, 
188188
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
we  can  reduce  the  number  of  trusted  mechanisms 
considerably. 
The basic idea is to partition the secure file store into 
trusted and untrusted components housed in physically 
separate  machines.  The  trusted  component,  called  the 
secure  file  manager,  or  SFM,  is  a  reference  monitor 
concerned  with  enforcing  the  security  policy;  its  file 
storage  is  provided  by  the  untrusted  components. 
These  untrusted  components  can  be  thought  of  as 
separate,  standard  Unix  systems  connected  directly  to 
the  SFM.  Each  untrusted  file  storage  machine  is 
dedicated to a single security partition and is identified 
with one of the subdirectories of the SFS directory (see 
Figure 5). 
Communicating  with  hosts  in  different  security 
partitions requires an enhanced TNIU for the SFM, one 
that  contains  the  encryption  keys  of  all  security 
partitions.  The  internal  structure  of  a  TNIU  with 
multiple encryption keys will be slightly more complex 
than  that  of  one  with  just  a  single  key,  particularly  if 
in 
communications  using  different  keys  can  be 
progress 
simultaneously.  Cleartext  belonging 
to 
logically  separate  channels  should  be  managed  by 
separate  virtual  machines,  and  temporal  separation 
must  be  provided  for  different  uses  of  its  single  DES 
chip. These are not significant complications, however, 
and  the  responsibility  for  correctly  managing  more 
than  one  encryption  key  is  a  small  additional  burden 
for the trusted mechanism of a TNIU. 
Host machines requiring  access to secure files  send 
remote  procedure  calls,  or  RPCs,  to  the  SFM.  The 
TNIU  of  the  SFM  determines  the  sender’s  security 
partition and passes this information to the SFM along 
with the decrypted RPC. The SFM can then inspect the 
RPC to check if the requested operation complies with 
its security policy. If it does, the SFM simply forwards 
the  RPC  to  the  appropriate  file  storage  machine  for 
processing  and  relays  the  results  (suitably  encrypted) 
back to the original caller. 
There  is  an  obvious  flaw  in  this  scheme,  however. 
Because  the  Unix  file  storage  machines  cannot  be 
trusted,  they  constitute  a  security  weakness  –  even 
though  each  holds  files  belonging  to  only  a  single 
security  partition.  A  host  machine  in  the  Top  Secret 
partition  could  modulate  its  legitimate  requests  for 
reading secure files belonging to the Secret partition to 
convey Top Secret information to the Secret-level file 
storage machine. For example, suppose  the secret file 
storage  machine  contains  a  group  of  26  files,  each  a 
different length. If a corrupt Top Secret host requests, 
as 
the  fifth, 
fourteenth, ninth, seventh, thirteenth, and first shortest 
files 
the  Top  Secret  string 
E-N-I-G-M-A  will  have  been  communicated  to  the 
Secret  file  storage  machine.  This  machine  could  then 
legitimately  do,  copies  of 