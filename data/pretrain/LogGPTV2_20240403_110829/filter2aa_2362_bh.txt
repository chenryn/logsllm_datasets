### 8.8.1 Multiple Fuzzers Outperform Single Fuzzer
The data in Figure 8.4 highlights that using multiple fuzzers can significantly enhance bug detection. In fact, running all available fuzzers, on average, uncovers over 50% more bugs than using the most effective fuzzer alone. This is an important consideration when deciding which fuzzer(s) to use.

### 8.8.2 Generational-Based Approach Is Superior
While it may be surprising that multiple fuzzers outperform a single one, it is not unexpected that generational-based fuzzers find more bugs than mutation-based fuzzers. In the three tests conducted, the best generational-based fuzzer performed over 15% better than the best mutation-based fuzzer. The detailed comparison is provided in Figure 8.5.

### 8.8.3 Initial Test Cases Matter
Another key observation from the data is the importance of the quality of initial test cases. Consider the two initial packet captures used during FTP testing, summarized in Figure 8.6. The full packet capture, which leveraged protocol knowledge and required some upfront work, resulted in 66% more bugs being found by GPF. For the other two fuzzers, no bugs were found with the partial packet capture, while three bugs were discovered with the full capture. However, obtaining such "protocol complete" initial inputs may not always be feasible.

### 8.8.4 Protocol Knowledge
Unsurprisingly, the amount of protocol information a fuzzer understands strongly correlates with its effectiveness. Figure 8.7 shows data from the SNMP fuzzing tests. ProxyFuzz, which injects random anomalies into valid SNMP transactions without understanding the protocol, found the fewest bugs. The GPF generic tokAid, which dissects binary protocols using generic techniques, performed better but still did not fully understand SNMP. The GPF fuzzer with a custom-written SNMP tokAid, which understood the specific packets it replayed, did even better. Finally, the two commercial generational-based fuzzers, which comprehensively understood every aspect of SNMP, achieved the best results.

### 8.8.5 Real Bugs
Throughout the testing, the fuzzers aimed to find simulated bugs added to the applications. However, one fuzzer, Codenomicon, discovered a real DoS vulnerability in Net-SNMP. This bug was reported to the developers and has been fixed in the latest source snapshot. No other fuzzers found this real bug, and code coverage analysis showed that Codenomicon had significantly higher code coverage for this application.

### 8.8.6 Does Code Coverage Predict Bug Finding?
To determine if high code coverage correlates with finding the most bugs, we analyzed the relationship between code coverage and bugs found. The graphs in Figure 8.8 show a positive relationship between these two variables. Using statistical software (SYSTAT), we found that a 1% increase in code coverage corresponds to a 0.92% increase in the number of bugs found. The regression coefficient is significant at the 0.02 level, indicating a strong predictive relationship. However, the model explains only about 46% of the variance, suggesting that other factors also play a role.

### 8.8.7 How Long to Run Fuzzers with Random Elements
Generational-based fuzzers, like the commercial ones tested, are straightforward to run as they have predefined inputs and order. Mutation-based fuzzers, which involve randomness, can theoretically run indefinitely. Figure 8.9 shows the timing of bug discoveries by ProxyFuzz during DNS testing. There are discrete jumps in the times when bugs are found, with some easy-to-find bugs discovered quickly and others taking much longer. This highlights the challenge of determining when a fuzzer has run long enough.

### 8.8.8 Random Fuzzers Find Easy Bugs First
Figure 8.10 illustrates that bugs found quickly by random fuzzers are also the most frequently discovered. The last two bugs in the DNS testing were found only once, emphasizing that some bugs require more time and effort to uncover.

### 8.9 Summary
In this chapter, we discussed the various functions provided by different fuzzers and evaluated their effectiveness. We compared the performance of several fuzzers by adding security vulnerabilities to open-source applications and measuring how many bugs each fuzzer could detect. We also analyzed code coverage. Our findings indicate that using multiple fuzzers in combination is the best practice for finding the most bugs. Additionally, the quality of initial test cases and the amount of protocol knowledge a fuzzer possesses are critical factors. Finally, we concluded that code coverage can be used to predict the performance of fuzzers.

### Chapter 9: Fuzzing Case Studies
This chapter describes common use cases for fuzzing, drawing from real-life deployments. We will not disclose the names of the organizations to protect their anonymity. Fuzzing is about black-box testing and should be deployed according to a test plan based on risk assessment. Fuzzing tools can be categorized into file, web, network, and wireless fuzzing. Each category requires specialized tools, and organizations often deploy fuzzing in one category at a time.

#### 9.1 Enterprise Fuzzing
The primary goal of enterprise fuzzing is to test services and interfaces exposed to the public Internet, such as HTTP, email, and VoIP. After addressing external interfaces, internal interfaces, which include communications within the organization, should also be tested. Internal interfaces can be exploited by insiders or after an external breach.

To identify attack vectors, you can:
- Conduct a port scan from the Internet.
- Use a network analyzer at various points in the network.
- Analyze perimeter defense rule sets.

Port scanning and network analysis can reveal critical open services and help detect client-side fuzzing needs. Enterprises often discover a large number of exposed interfaces during this process.

#### 9.1.1 Firewall Fuzzing
Firewalls integrate various gateway components and act as application-level gateways (ALGs) or back-to-back user agents (B2BUAs). They need to parse and understand numerous communication protocols, making them susceptible to security vulnerabilities. Fuzzing firewalls can help identify and mitigate these vulnerabilities.