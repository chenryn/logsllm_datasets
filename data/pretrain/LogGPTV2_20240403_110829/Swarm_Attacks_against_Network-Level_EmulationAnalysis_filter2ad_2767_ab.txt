the original exploit where both the decoder and the encoded payload appear in
the same attack traﬃc). However, this is not a serious diﬃculty; we can construct
our last attack instance by modifying the original self-contained exploit so that
the encoded payload is placed at where the decoder will have appeared in the
original case. As such, the decoder can locate the payload based on how we direct
the hijacked control to the right location in our original attack. If a hardcoded
address is used in the original exploit, the decoder in the swarm attack will
locate the payload using this same hardcoded value. If the original attack used a
register spring, the address of the payload will be found in the register involved
(remember that the last attack instance is constructed from the original attack
by replacing the decoder with the encoded payload; if the register points to the
beginning of the decoder in the old attack, it will point to the encoded payload
in the new one).
Now let’s consider the design of the attack instances responsible for building
the decoder. If the vulnerability exploited allows writing arbitrary value to arbi-
trary address (e.g. a format string vulnerability), our task is trivial: we only have
to build exploits to write the right value to the right place. Also, in this case,
we can avoid putting any executable code into traﬃc generated, and it would
be quite impossible for a detector based on network-level emulation/analysis to
identify this attack. However, care must be taken to have some of the attack
instances write to slightly overlapping addresses; otherwise, the attack instances
responsible for building up the decoder may become easy target for signature
matching. For example, suppose the vulnerability allows us to overwrite 4 bytes
at a time, and the ﬁrst four bytes of the decoder we are building are b1b2b3b4; if
we build the decoder by always writing to non-overlapping bytes, we will always
have an attack instance that contains the bytes b1b2b3b4. To avoid this problem,
Swarm Attacks against Network-Level Emulation/Analysis
181
we can have one attack instance writing b1r1r2r3 to address i, and the next in-
stance writing b2r4r5r6 to address i+1, so on so forth. Since we know r1r2r3 will
be overwritten by the second attack instance, we can put random values there.
Of course, the byte b1 will still appear in the ﬁrst attack instance of every swarm
attack that employs the same decoder, but this property that involves only one
byte will not be very useful to the defender.
If the exploited vulnerability only allows direct control hijacking (e.g. stack
based buﬀer overﬂow), the design of the attack instances which build up the
decoder is much more interesting. In this case, we will need to put some exe-
cutable code into each attack instance, and have each instance hijack the control
to execute its attached code and write the correct value to the right address. As
opposed to the previous case, the attack traﬃc will now contain some executable
code. In order to evade detection by network-level emulation/analysis systems,
we need to craft the code visible to these systems carefully. Nonetheless, we note
that the task to be performed by this code snippet is very simple, and should not
involve much behavior that is typically considered “decoder-like” (e.g. no GetPC
or self-modiﬁcation, minimal read/write). Thus the design should be quite easy.
We have also taken care to have a design that is easily polymorphed, and does
not have long sequence of bytes that remains constant over diﬀerent attack in-
stances, or always appears in an instance responsible for writing a particular part
of the decoder. This precludes using the bytes we want to write as immediate
operands or reading it directly from the attack traﬃc; i.e. we have to somehow
“generate” what we are writing as a product of executing some instructions, and
we used the xor operation for this purpose. We note that this design also allows
us to use decoder that contains bytes forbidden for successful exploitation of the
vulnerability (e.g. the presence of byte 0x00 is not allowed in many exploits).
Similar constraints apply to the target of the write operations, and the same ap-
proach can be used for “generating” it in our attack. The code we have designed
for building the decoder is given in Fig. 1.
As we can see on the left of Fig 1, we assume the initial value of ebp is under
our control, which is true for almost all stack-based buﬀer overﬂows. Also, as
shown in the right part of Fig. 1, by using some very simple metamorphism (re-
placing registers, using slightly diﬀerent instructions and randomizing exxOﬀset,
exxMask, ebpMask and ebpOﬀset) , we can achieve such degree of polymorphism
that no two instances of the code we have for building the decoder will share
any common byte sequence that is more than one byte long. Further polymor-
phism/metamorphism is possible by re-ordering some of the instructions, or
inserting junk instructions. Finally, note that the last instruction in our code
snippet will put the execution into a dead-loop. This is only necessary when
we cannot crash the attacked thread without killing the entire process. In case
we are attacking a serve-type process that handles thread failure gracefully, we
can simply put some junk bytes after the instructions that write the value to
the right location. This way, the code snippet will look even more innocuous
to network-level emulation/analysis systems, since they all assume the attacker
will not crash the target.
182
S.P. Chung and A.K. Mok
sub ebp, ebpMask
mov ecx, [esp+ecxOﬀset]
xor ecx, ecxMask
mov [ebp+ebpOﬀset], ecx
jmp -2
add ebp, ebpMask
mov ebx, [esp+ebxOﬀset]
xor ebx, ebxMask
mov [ebp+ebpOﬀset], ebx
jnz -2
\x81\xed ebpMask (6 bytes)
\x8b\x4c\x24 ecxOﬀset (4 bytes)
\x81\xf1 ecxMask (5 bytes)
\x89\x4d ebpOﬀset (3 bytes)
\xeb\xfe (2 bytes)
\x81\xc5 ebpMask (6 bytes)
\x8b\x5c\x24 ecxOﬀset (4 bytes)
\x81\xf3 ecxMask (5 bytes)
\x89\x5d ebpOﬀset (3 bytes)
\x75\xfe (2 bytes)
Fig. 1. Two possible versions of the attack code for building the decoder. All ebpMask,
exxOﬀset, exxMask and ebpOﬀset are variable. The binary representation of the code
are given on the right, with bytes that remain the same despite the use of diﬀerent
registers/operations highlighted. Note that condition used in the “jnz -2” is set by the
xor. Since we know the result of that xor operation, we can choose the right kind of
conditional branch, and there are many diﬀerent condition codes that we can use in
this branch instruction.
We have tested our swarm attack by modifying an exploit against a stack
based buﬀer overﬂow in the Savant web server [11]. In our experiments, we used
as our decoder a simple 27-byte routine which xor each DWORD of the encoded
payload with a ﬁxed key, and this requires 7 attack instances to build up the
decoder, and one last instance to execute it. As for the real payload, we used
a 198 byte shellcode that starts notepad.exe. More complicated shellcode are
easily accommodated, we only choose this one for its very visible result (which
makes it easy to determine that the attack is successful). As of the location of
the decoder, we choose to build it at the end of Savant’s data area. This makes
our attack quite portable across machines running diﬀerent versions of Windows,
as long as Savant is loaded at the same place. However, since the address of this
data area starts with 0x00, we cannot use a hardcoded address in the last attack
instance to jump to the decoder. Instead, we execute a small (2-instruction, 8-
byte long) code snippet in this last attack instance to “generate” the address of
the decoder in some register (the same way we “generate” the target address for
the write in the instances responsible for building the decoder) and jump to this
address using a register indirect control transfer. By transferring the hijacked
control to the decoder using a small, easily poly/meta-morphed payload in the
last attack instance, we can also avoid the hardcoded address for the decoder
from appearing in every swarm attack and being used as a signature. We believe
this “trampoline” payload in the last attack instance is necessary if we cannot
have too much variation in the location where we place the decoder. Finally, we
report that all our experiments successfully lead to the execution of the decoded
payload and launch notepad as expected.
Swarm Attacks against Network-Level Emulation/Analysis
183
4 Practical Concerns
In this section, we will address some possible diﬃculties that may arise during
the implementation of the swarm attack. Our main focus is, given an exploit
that allows us to execute arbitrary code on the attacked machine, what are the
extra problems that we will have to face in order to build a swarm attack based
on this exploit?
4.1 Multiple Exploitations
The biggest constraint in implementing a swarm attack is that we need a vulner-
ability that can be exploited multiple times, with the eﬀect of each exploitation
being persistent and visible to all later exploitations until the actual payload
execution starts. The above constraint is automatically satisﬁed if the target is
a multi-threaded program that will continue to function (i.e. accept further traf-
ﬁc/input) while under attack, and we note that many network servers have this
nice property. We believe even the simplest of such servers will be multi-threaded
(especially true under the Windows environment), and it is very likely that the
port concerned will be freed to accept further traﬃc once the processing of the
incoming request starts. In case we are attacking a single-threaded program (or
one with only one thread performing the vulnerable processing), swarm attacks
are still possible if:
1. the vulnerable program processes multiple inputs that may cause the control
hijacking
2. we can have a way to continue the normal processing in the attacked process
after accomplishing the current step in the decoder construction process.
Since we believe the ﬁrst of the above conditions will be satisﬁed by many
programs (and there is very little we can do otherwise), we will focus on ways
to restore normal processing of the target program after each attack instance in
our swarm attack. Though it ﬁrst appears very complicated, we ﬁnd this task
quite achievable for the most common types of exploits.
If the targeted vulnerability is a stack buﬀer overﬂow, techniques similar to
the “error-virtualization” in [19] can be applied to “return to normal execution”
after an attack instance has accomplished its goal. The idea is to prevent the
attacked process from crashing by rolling the execution forward to the point
where some function x higher up in the “call tree” than the vulnerable function
returns a value that signiﬁes failure/error, with the caller of function x equipped
to handle the error. This technique should be feasible in many cases because the
attackers usually have very accurate knowledge of the size of the few activation
records on the top of the stack when the injected code starts execution, and
thus can properly adjust the stack for the return. Also note that such “recovery”
from the attack can be achieved with very few instructions; it only involves an
addition to esp, a single write (if we need to fake a return value) and a return.
Furthermore, since the return address used does not come with the attack traﬃc,
184
S.P. Chung and A.K. Mok
most network-level emulation/analysis systems will ignore the return (e.g. [3]),
considering it to have too high a chance of crashing the process to be any part of
a robust attack. The only system that may ﬁnd this recovery suspicious is [24],
which speciﬁcally looks for “push-call” patterns. However, two such patterns
are needed to trigger an alert in [24], and we will only have one in our attacks.
Another very favorable scenario appears when the control hijacking occurs within
code that handles exceptions; in this case, the attacker simply executes an invalid
instruction, and the attacked program will return to normal execution. Unlikely
as it may sound, there is indeed one real life example of this favorable situation:
the ANI vulnerability in Windows XP/Vista [16].
Format string vulnerabilities are also very suitable for a swarm attack: their
exploitations generally do not contaminate any of the target program’s data
structures “by accident”; once the vulnerable function has ﬁnished processing
the malicious format string, it will return properly. Thus the target program can
usually carry on with its normal execution after every attack instance in a swarm
attack built on top of a format string vulnerability (e.g. we have conﬁrmed that
it is possible to exploit the format string vulnerability in the wu-ftpd server [22]
multiple times, through a single connection to the server). Finally, we admit
that the feasibility of a swarm attack is more questionable in the case of a heap
buﬀer overﬂow; in many cases, the corruption in the heap will crash the attacked
program shortly. However, the technique in [9] may be improving the situation.
4.2 Where to Put the Decoder?
Another diﬃculty that we may face when implementing a swarm attack is that
we need to ﬁnd an area in the attacked process’ address space that: (1) will
be reliably writable in every instance of the program, even if it’s running on
diﬀerent OSs, using diﬀerent versions of libraries, and (2) will remain untouched
until the decoding of the real payload is completed.
In most scenarios, the ﬁrst condition can be easily satisﬁed given the original
exploit for control hijacking. In particular, if the original exploit used a register
spring to direct the hijacked control, we can easily derive an address within the
data area of the module which holds the exploited register spring instruction
(this is true even when some address space layout randomization is applied,
if only the base of a module is randomized). In this case, we will argue that
having to ﬁnd a writable location to place the decoder does not make the swarm
attack any more diﬃcult to implement than the original. However, if the original
exploit used a hardcoded address (which is less common nowadays), a diﬀerent
approach is needed. One solution is to use another hardcoded address (as we did
in our experiments on Savant). Given our success in ﬁnding register springs that
remain at the same address throughout various versions of OS/library, ﬁnding
hardcoded addresses that are writable across diﬀerent target machines should
be very feasible. Another possibility is to see if any register is pointing to some
global data area at the time of control hijacking.
As of storing the decoder in an area that will not be modiﬁed until we’ve
ﬁnished building it, we note that since memory protection is applied at the
Swarm Attacks against Network-Level Emulation/Analysis
185
granularity of a page, the last parts of many writable regions are never used (they
do not correspond to any variable/data structure in the underlying program).
Thus, the last part of all writable regions should be very good starting point
in our search for places to hold the decoder, and we can always test the target
program to “estimate” if it is safe to store the decoder at one of these candidate
areas. Some other possible locations for persistent storage of injected code have
been proposed in Sect. 3.1 of [12].
5 How Swarm Attacks Evade?
5.1 Sled-Detection Systems
To see how our swarm attack evades the sled-detection systems described in Sect.
2.1, we note that our attack against Savant used a register spring, and contains
no sled. Thus the only executable code that a sled-detection system can ﬁnd is
that for building the decoder or transferring the control to the decoder.
Recall that [21] considers incoming traﬃc malicious if it contains a valid se-
quence of 30 instructions or more. For the swarm attack against Savant, the
attack instances for building up the decoder consists of 6 instructions, with one
to jump over junk bytes (not shown in Fig. 1 since it is speciﬁc to the attack
against Savant), 4 for actually writing part of the decoder to the right place,
and one that puts the execution in dead loop. As for the last attack instance
that transfers control to the decoder we’ve built, it consists of one instruction to
jump over junk bytes, one for setting up the target of the jump and one for the
jump itself. Finally, note that [21] counts jumps targeting address outside the
attack traﬃc as two instructions; any other jump instructions will be counted
as one, and a jump targeting instructions that appear earlier in the instruction
sequence will mark the end of that sequence. Obviously, [21] will not be able
to discover any valid sequence that contains more than 6 instructions in all our
attack instances, and thus will pass them all as benign. Similarly, [1] tries to