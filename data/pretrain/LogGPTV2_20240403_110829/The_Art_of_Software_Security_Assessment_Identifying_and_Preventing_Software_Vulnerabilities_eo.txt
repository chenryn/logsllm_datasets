Date and time after which the entity is 
considered stale 
From 
Request 
E-mail address of the requester 
Host 
Request 
Host name and port number of the requested 
URI 
If-Match 
Request 
Used to make request conditional based on 
entity tags 
If-Modified-Since 
Request 
Used to make request conditional based on 
HTTP date 
If-None-Match 
Request 
Used to make request conditional based on 
entity tags 
If-Range 
Request 
Used to make a range request conditional 
based on entity tags 
If-Unmodified-Since 
Request 
Used to make request conditional based on 
HTTP date 
Last-Modified 
Entity 
Identifies the time the entity was last 
modified 
Location 
Response Supplies an alternate location for the 
requested URI 
Max-Forwards 
Request 
Mechanism for limiting the number of 
gateways in a TRACE or OPTIONS request 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1026 
Table 17-1. Request and Response Header Fields 
Header 
Type 
Description 
Message-Id 
Response Deprecated: globally unique message 
identifier 
Pragma 
General 
Used for implementation-specific headers 
Proxy-Authenticate 
Response Identifies that a proxy requires 
authentication 
Proxy-Authorization 
Request 
Presents credentials for HTTP proxy 
authentication 
Public 
Response Deprecated: lists publicly accessible methods 
Range 
Request 
Identifies a specific range of bytes needed 
from the requested URI 
Referer 
Request 
Client-provided URI responsible for initiating 
the request 
Retry-After 
Response Indicates how long a service is expected to 
be unavailable 
Server 
Response Server identification string 
TE 
Request 
Lists transfer encodings accepted by the 
client for a chunked transfer 
Trailer 
General 
Indicates header fields present in the trailer 
of a chunked message 
Transfer-Encoding 
General 
Identifies the encoding applied to the 
message 
Upgrade 
General 
Identifies additional protocols supported by 
the client 
URI 
Response Deprecated: superseded by Location header 
field 
User-Agent 
Request 
Contains general information about the client 
Vary 
Response Provided by the server to determine cache 
freshness 
Version 
Response Deprecated: version of requested URI 
Via 
General 
Used by gateways and proxies to identify 
intermediate hosts 
Warning 
General 
Provides additional message status 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1027 
Table 17-1. Request and Response Header Fields 
Header 
Type 
Description 
information 
WWW-Authenticate 
Response Initiates the HTTP authentication challenge 
required by a server 
WWW-Title 
Response Deprecated: document title 
WWW-Link 
Response Deprecated: external document reference 
Methods 
HTTP supports many methods, especially considering vendor extensions to the 
protocol. The three most important are GET, HEAD, and POST. GET is the most common 
method used by a client to retrieve a resource. HEAD is identical to GET, except it tells 
the server not to return the actual document contents. In other words, it tells the 
server to return only the response headers. POST is used to submit a block of data to 
a specified resource on the server. The difference between GET and POST is related to 
how developers use HTML forms and parameters (covered in "Parameters and Forms" 
later in this chapter). The following sections describe some less common methods. 
DELETE and PUT 
The DELETE and PUT methods allow files to be removed from and added to a Web 
server. Historically, these two methods have been seen little use in real sites; further, 
they have been associated with a number of vulnerabilities and are usually disabled. 
The notable exception is using these methods as a component of complete WebDAV 
support. 
TEXTSEARCH and SPACEJUMP 
The TEXTSEARCH and SPACEJUMP requests aren't methods, nor were they ever officially 
added to the HTTP specification. However, they were proposed methods, and the 
functionality they describe is supported in modern Web servers. To briefly see how 
they work, start by looking at the TEXTSEARCH request: 
GET /customers?John+Doe HTTP/1.0 
This request uses the ? character to terminate the request and contains a 
URL-encoded search string. This string causes the server to run a file at the supplied 
location and pass the decoded search string as a command line. Anyone familiar with 
common path traversal attacks should recognize this request type immediately. It's 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1028 
the form of request commonly used to pass parameters to an executable file via the 
query string, which makes it useful in exploiting a path traversal vulnerability. In all 
truth, this use might be the only remaining one for this request type. 
The following SPACEJUMP request represents another legacy request type: 
GET /map/1.1+2.7 HTTP/1.0 
This request is designed for handling server-side image maps. It provides the 
coordinates of a clicked point in an object. As server-side image mapping has 
disappeared, so has the SPACEJUMP request. It's interesting to note, however, that this 
request type has also been associated with a number of vulnerabilities. The classic 
handler for this request (on both Apache and IIS servers) is the htimage program, 
which has been the source of a number of high-risk vulnerabilities, ranging from data 
disclosure to stack buffer overflows. 
OPTIONS and TRACE 
The OPTIONS and TRACE methods provide information about a server. The OPTIONS 
request simply lists all methods the server accepts. This information is not 
particularly sensitive, although it does give a potential attacker details about the 
system. Further, this method is useful only for servers that support extended 
functionality, such as WebDAV. 
The HTTP TRACE method is quite simple, although its implications are interesting. This 
method simply echoes the request body to the client, ostensibly for testing purposes. 
Of course, the capability to have a Web site present arbitrary content can present 
some interesting possibilities for vulnerabilities, discussed in "Cross-Site Scripting(? 
[????.])" later in this chapter. 
CONNECT 
The HTTP CONNECT method provides a way for proxies to establish Secure Sockets 
Layer (SSL) connections with other servers. It's a reasonable method for use in 
proxies but is usually dangerous on application servers. 
WebDAV Methods 
Web Distributed Authoring and Versioning (WebDAV) is a set of methods and 
associated protocols for managing files over HTTP connections. It makes use of the 
standard GET, PUT, and DELETE methods for basic file access. WebDAV adds a number 
of methods for other file-management tasks, described in Table 17-2. 
Table 17-2. WebDAV Methods 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1029 
Method 
Description 
COPY 
Copies a resource from one URI to another 
MOVE 
Moves a resource from one URI to another 
LOCK 
Locks a resource for shared or exclusive use 
UNLOCK 
Removes a lock from a resource 
PROPFIND 
Retrieves properties from a resource 
PROPPATCH Modifies multiple properties atomically 
MKCOL 
Creates a directory (collection) 
SEARCH 
Initiates a server-side search 
Fortunately, most Web applications do not (and certainly should not) expose WebDAV 
functionality directly. However, you should keep a few points in mind when you 
encounter WebDAV systems. First, WebDAV uses HTTP as a transport protocol and 
uses the same basic security mechanisms of SSL and HTTP authentication, so the 
coverage of these standards also applies to WebDAV. Second, the specification for 
WebDAV access control is only in draft form and not widely implemented at the time 
of this writing, so access control capabilities can vary widely between products. 
Parameters and Forms 
A Web client transmits parameters (user-supplied input and variables) to a Web 
application through HTTP in three main ways, explained in the following sections. 
Embedded Path Information 
A URI path can contain embedded parameters as part of the path components. This 
embedded path information can be handled by server-based filtering such as path 
rewriting rules, which remap the received path and place the information into request 
variables. Path information may also be handled through the PATH_INFO environment 
variable common to most web application platforms. The PATH_INFO variable contains 
additional components appended to a URI resource path. For example, say you have 
a dynamic Web application at /Webapp, and a user submitted the following request: 
GET /webapp/blah/blah/blah HTTP/1.1 
Host: test.com 
The Web server calls the program or request handler corresponding to /webapp and 
indicates that extra information was passed through the appropriate mechanism. If 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1030 
the program gets information through CGI variables, the CGI program would see 
something like this: 
PATH_INFO=/blah/blah/blah 
SCRIPT_NAME= 
If the program is a Java servlet and calls request.getServletPath(), it receives 
/webapp. However, if the program calls request.getRequestURI(), it receives 
/webapp/blah/blah/blah. 
Auditing Tip 
If you see code performing actions or checks based on the request URI, make sure the 
developer is handling the path information correctly. Many servlet programmers use 
request.getRequestURI() when they intend to use request.getServletPath(), which 
can definitely have security consequences. Be sure to look for checks done on file 
extensions, as supplying unexpected path information can circumvent these checks 
as well. 
GET and Query Strings 
The second mechanism for transmitting parameters to a Web application is the query 
string. It's the component of a request URI that follows the question mark character 
(?). For example, if the http://test.com/webapp?arg1= URI is entered into a browser, 
the browser connects to the test.com server and submits a request similar to the 
following: 
GET /webapp?arg1=hi&arg2=jimbo HTTP/1.1 
Host: test.com 
This is the query string in the preceding request: 
arg1= 
Most dynamic Web technologies parse this query string into two separate variables: 
arg1 with a value of hi and arg2 with a value of jimbo. The & character is used to 
separate the arguments, and the = character separates the argument name from the 
argument value. 
The other possible form for a query string is the one mentioned for the TEXTSEARCH 
request. If the query string doesn't contain an = character, the Web server assumes 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1031 
the query is an indexed query, and the arguments represent command-line 
arguments. For example, the following code runs the CGI program mycgi.pl with the 
arguments hi and jimbo: 
GET /mycgi.pl?hi&jimbo HTTP/1.1 
Host: test.com 
HTML Forms 
Before you look at the third common way of transmitting parameters, take a look at 
HTML forms. Forms are an HTML construct that enables application designers to 
construct Web pages that request user input and then relay it back to the server. A 
basic HTML form has an action, a method, and variables. The action is a URI that 
corresponds to the resource handling the filled-out form. The method is GET or POST, 
and it determines which method the client uses to transmit the filled-out form. The 
variables are the actual content of the form, and designers can use a few basic types 
of variables. Here's a brief example of a form: 
Source Account:  
42424242 
82345678 
Destination Account:  
12345678 
82345678 
Amount:  
Figure 17-1 shows what this simple form would look like rendered in a client's browser. 
This form uses the GET method, and the results are submitted to the transfer.php 
page. There are drop-down list boxes for the source account and destination account 
and a simple text input field for the transfer amount. The last input is the submit 
button, which allows users to initiate the transmission of the form contents. 
Figure 17-1. Simple form 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1032 
When users submit this form, their browsers connect to test.com and issue a request 
similar to the following: 
GET /transfer.php?source=42424242&dest=12345678&value=123 HTTP/1.1 
Host: test.com 
In this request, you can see that the variables in the form have been turned into a 
query string. The source, dest, and value parameters are transmitted to the server 
and submitted via the GET method. 
POST and Content Body 
The third mechanism for transmitting parameters to a Web application is the POST 
method. In this method, the user's data is transferred by using the body of the HTTP 
request instead of embedding the data in the URI as the GET method does. Assume 
you changed the preceding form to use a POST method instead of a GET method by 
changing this line: 
To this: 
When users submit this form, a request from the Web browser similar to the following 
is issued: 
POST /transfer.php HTTP/1.0 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 40 
source= 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1033 
You can see that the parameters are encoded in a similar fashion to the GET request, 
but they are now in the request's content body. 
Parameter Encoding 
Parameters are encoded by using guidelines outlined in RFC 2396, which defines the 
URI general syntax. This encoding is necessary whether they are sent via the GET 
method in a query string or the POST method in the content body. All nonalphanumeric 
ASCII characters are encoded, which includes most Unicode characters and multibyte 
characters. This encoding is described in Chapter 8(? [????.]) "Strings and 
Metacharacters," but we will briefly recap it here. 
The URL encoding scheme is % hex hex, with a percent character starting the escape 
sequence, followed by a hexadecimal representation of the required byte value. For 
example, the character = has the value 61 in the ASCII character set, which is 0x3d in 