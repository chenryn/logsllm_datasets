P, Q and R. Any distinguisher against Q ∼=O R can also produce any message that would
produce P in this context, and can therefore be transformed into a distinguisher against
Q(cid:107)P ∼=O R(cid:107)P . In other terms, Q ∼=O R and νn.P is O-simulatable implies that Q(cid:107)P ∼= R(cid:107)P .
13
3.1 Protocol Simulation
The goal in the rest of the paper is to use this notion of simulatability to obtain composability
results. Suppose one wants to prove P(cid:107)Q ∼= P(cid:107)R, knowing that Q ∼=O R and P is O-
simulatable. The way to obtain a distinguisher for Q ∼=O R from one on P(cid:107)Q ∼= P(cid:107)R is to
“push” the (simulated version) of P within the distinguisher. A protocol P is then simulatable
if there exists a simulator AO that can be “pushed “ in any distinguisher D. We formalize this
construction below, where a protocol is simulatable if and only if any distinguisher D behaves
in the same way if the protocol oracle OP is replaced by its simulator AO. We deﬁne formally
D[AO]O the replacement of OP in DO,OP .
Deﬁnition 5. Given an oracle O, a cryptographic library Mf, a protocol P , PTOMs DO,OP (ρrD , 1η)
and AO(··· , 1η), we deﬁne D[AO]O(ρr, 1η) as the PTOM that:
1. Splits its random tape ρr into ρr1, ρr2
2. Simulates DO,OP (ρr2, 1η) by replacing every call to OP with a computation of AO: each
time D enters a state corresponding to a call to OP , D[AO] appends the query m to a
history θ (initially empty), executes the subroutine AO(ρs,ρO)(ρr1, θ, 1η) and behaves as
if the result of the subroutine was the oracle reply.
3. Preﬁxes each random handle of an oracle call of D with 0 and random handle of an
oracle call of A with 1.
(playing the role of ρO) and ρr2
4. Outputs the ﬁnal result of D.
D[AO]O must simulate AO and D so that they do not share randomness. To this end,
D[AO]O ﬁrst splits its random tape ρr into ρr1
(playing the
role of ρD). The oracle queries are preﬁxed by distinct handles for the same reason. DO,OP
has access to the shared secrets via both O and OP , while D[AO]O only has access to them
through the oracle O . Remark that if AO and DO,OP has a run-time polynomially bounded,
so does D[AO]O.
To deﬁne the central notion of O-simulatability, the distribution produced by any distin-
guisher interacting with the simulator must be the same as the distribution produced when it
is interacting with the protocol. However, as we are considering a set of shared secrets n that
might be used by other protocols, we need to ensure this equality of distributions for any ﬁxed
concrete value v of the shared secrets. Then, even if given access to other protocols using the
shared secrets, no adversary may distinguish the protocol from its simulated version.
Deﬁnition 6. Given an oracle O with support n, a cryptographic library Mf , a protocol P ,
a sequence of names n, then, νn.P is O-simulatable if and only if there exists a PTOM AO
such that for every PTOM DO,OP , for every η, every v ∈ ({0, 1}η)|n|, c ∈ {0, 1}(cid:63),
P
Pρs,ρr,ρO{DO,OP (ρr, 1η) = c | [[n]]η
ρs = v}
P ]O(ρr, 1η) = c | [[n]]η
= Pρs,ρr,ρO{D[AO
ρs = v}
Note that our deﬁnition of simulatability is a very strong one as it requires a perfect
equality of distributions, as opposed to computational indistinguishability. This is intuitively
what we want: O-simulation expresses that P only uses the secrets in n as O does. This
notion is not intended to capture any security property.
14
P
P ]O,OQ and D[AO
In practice, let us consider the security property P(cid:107)Q ∼= P(cid:107)Q(cid:48), where P is simulatable
by AO
. The idea of the later composition result is that an attacker D that distinguishes
between DO,OP ,OQ and DO,OP ,OQ(cid:48) can be turned into an attacker that distinguishes between
P ]O,OQ(cid:48) . Notice that here, Q and P may share some secrets, and their
D[AO
distributions are not independent. The intuition is that Q is ﬁxing a speciﬁc value for the
shared name between P and Q, and P then needs to be simulatable for this ﬁxed value. This
is why the notion of simulatability asks that a protocol is simulatable for any ﬁxed value of
a set of secret names. The formalization of this proof technique is given by the following
Proposition.
Proposition 7. Given an oracle O with support n, a cryptographic library Mf , protocols P, Q
such that N (P )∩N (Q) ⊆ n, then, for any PTOM AO
P if and
only if for every PTOM DO,OP ,OQ, for every η, every v ∈ ({0, 1}η)|n|, c ∈ {0, 1}(cid:63),
P , νn.P is O-simulatable with AO
Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c | [[n]]η
ρs = v}
P ]O,OQ(ρr, 1η) = c | [[n]]η
= Pρs,ρr,ρO{D[AO
ρs = v}
It then implies that:
Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c} = Pρs,ρr,ρO{D[AO
P ]O,OQ(ρr, 1η) = c}
While this Deﬁnition intuitively captures the proof technique used to allow composition, it
does not provide insight about how to prove the simulatability. Another equivalent deﬁnition
states that a protocol is simulatable if there exists a simulator that can produce exactly the
same distribution of messages as the protocol interacting with any attacker. We formalize in
the following this second Deﬁnition, and prove that the two Deﬁnitions are equivalent, which
also yields the proof of Proposition 7.
For this second Deﬁnition of simulation to be realizable, we need to ensure that simulator’s
oracle calls and attacker’s oracle calls use a disjoint set of random coins for the oracle random-
ness. We thus assume, w.l.o.g., that the random handles r of simulator’s queries are preﬁxed
by 1. This ensures that, as long as adversaries only make oracle calls preﬁxed by 0 (this
can be assumed w.l.o.g. since it only constrains the part of the oracle’s random tape where
the randomness is drawn) the oracle randomness used by the simulator is not used by the
adversary. We provide later in Example 3.2 a complete example illustrating both simulation
and the need of the preﬁx and a formal deﬁnition of preﬁxed models.
Deﬁnition 8. Given a cryptographic library Mf , a sequence of names n, an oracle O and
a protocol P , we say that νn.P is O-simulatable if the support of O is n and there is a
PTOM AO (using random handles preﬁxed by 0) such that, for every c ∈ {0, 1}(cid:63), for every
v ∈ ({0, 1}η)|n|, for every m ≥ 1, for every PTOM BO (using random handles preﬁxed by 1),
Pρs,ρr1 ,ρr2 ,ρO{AO(ρs,ρO)(ρr1, θ1
= Pρs,ρr1 ,ρr2 ,ρO{OP (ρs, θ2
m, 1η) = c | [[n]]η
m) = c | [[n]]η
ρs = v}
ρs = v}
where
for 0 ≤ k < m and φ0 = ∅, θ0 = BO(ρs,ρO)(ρr2, η,∅).
φ2
k+1 = φ2
k,OP (ρs, θ2
k)
k,AO(ρs,ρO)(ρr1, θ1
k,BO(ρs,ρO)(ρr2, η, φi
φ1
k+1 = φ1
θi
k+1 = θi
15
k, η)
k+1)
The machine AO can be seen as the simulator, while B is an adversary that computes the
inputs: the deﬁnition states that there is a simulator, independently of the adversary. We
asks for equality of distributions, between the sequence of messages θ2, corresponding to the
interactions of BO with OP , and the sequence of messages θ1, corresponding to the interactions
of BO with AO.
Note that our deﬁnition of simulatability is a very strong one as it requires a perfect
equality of distributions, as opposed to computational indistinguishability. This is intuitively
what we want: O-simulation expresses that P only uses the shared secrets as O does. This
notion is not intended to capture any security property.
The two deﬁnitions are indeed equivalent. To prove this, a ﬁrst technical Lemma is re-
quired. It shows that O-simulation, whose deﬁnition implies the identical distributions of two
messages produced either by the simulator or by the oracle, implies the equality of distributions
of message sequences produced by either the oracle or the simulator. It is proved essentially
via an induction on the length of the sequence of messages. For any sequence of names n and
n = {[[n]]η
ρs|ρs ∈ {0, 1}ω} the set of possible interpretations of n. We
parameter η, we denote Dη
reuse the notations of Deﬁnition 8.
Lemma 9. Given a cryptographic library Mf , a sequence of names n, an oracle O with support
n and a protocol P , that is O-simulatable with AO, we have, for every x, y, c, r2, rB ∈ {0, 1}(cid:63),
every v ∈ Dη
n, for every m ≥ 1, for every PTOM BO (using tags preﬁxed by 1):
Pρs,ρr1 ,ρr2 ,ρO{θ1
m = y| [[n]]η
m = x, φ2
ρs = v, ρB
m = y| [[n]]η
O = rB, ρr2 = r2}
ρs = v, ρB
m = x, φ1
= Pρs,ρr1 ,ρr2 ,ρO{θ2
O = rB, ρr2 = r2}
where we split ρO into ρA
O (cid:93) ρB
O such that O called by B only accesses ρB
O and O called by
A only accesses ρA
O (which is possible thanks to the distinct preﬁxes).
We now prove that Deﬁnition 8 implies Deﬁnition 5, i.e that the simulatability implies
that we can replace a protocol oracle by its simulator.
Lemma 10. Given an oracle O (with support n), a cryptographic library Mf , a sequence of
names n , P, Q protocols, such that νn.P is O-simulatable in the sense of Deﬁnition 8 with
AO
P and N (P ) ∩ N (Q) ⊆ n then, for every PTOM DO,OP ,OQ (preﬁxed by 1), every η, every
v ∈ Dη
n and every c ∈ {0, 1}(cid:63),
Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c | [[n]]η
ρs = v}
P ]O,OQ(ρr, 1η) = c | [[n]]η
= Pρs,ρr,ρO{D[AO
ρs = v}
The idea is to use the deﬁnition of O-simulatability, using a PTOM BO that behaves exactly
as D when it computes the next oracle queries from the previous answers. The diﬃculty is
that D may call the oracle OQ, while B has no access to this oracle. We know however that
shared names are included in n, whose sampling can be ﬁxed at once (thanks to the deﬁnition
of O-simulation). The other randomness in Q can be drawn by B from ρr, without changing
the distribution of OQ’s replies.
Proof. Fix η and the interpretation [[n]]η
Given D, we let Dm be the machine that behaves as D, however halting after m calls to
OP (or when D halts if this occurs before the mth call) and returning the last query to OP .
ρs = v.
16
We have that Dm ﬁrst executes Dm−1, then performs the oracle call OP (ρs, θm−1), getting
um−1 and performs the computation of the next oracle call vm (if D makes another oracle call),
updates the history θm := (v1, . . . , vm) and returns vm if there is one or the output of D oth-
erwise. Dm[AO
P ] ﬁrst executes Dm−1[AO
m−1)
, computes the next oracle call v(cid:48)
of u(cid:48)
m) and
outputs either vm of the output of D.
We wish to use the deﬁnition of O-simulation in order to conclude. However, we cannot
directly use the O-simulation, as D has access to an extra oracle OQ.
P ], then performs the computation AO
(if one is performed), updates θ(cid:48)
P (Mf , ρr1, θ(cid:48)
1, . . . , v(cid:48)
m := (v(cid:48)
m
m
Part 1
We ﬁrst prove that, assuming AO
is a simulator of OP :
P
Pρs,ρr,ρO{DO,OP (ρr, 1η) = c} = Pρs,ρr,ρO{D[AO
P ]O(ρr, 1η) = c}
This is a straightforward consequence of Lemma 9. Writing respectively p1
c} and p2
1(c) = Pρs,ρr,ρO{D[AO
P ]O(ρr, 1η) = c}, Using ρr1, ρr2
Pρs,ρr,ρO{DO,OP (ρr, 1η) = c | ([[n]]η
as in Deﬁnition 5, we have
O, ρr2) = (v, rB, r2)}
ρs, ρB
1(c) = Pρs,ρr,ρO{DO,OP (ρr, 1η) =
(cid:88)
(cid:88)
rB,r2
rB,r2
p1
1(c) =
p2
1(c) =
×Pρs,ρr,ρO{([[n]]η
ρs, ρB
O, ρr2) = (v, rB, r2)}
Pρs,ρr,ρO{D[AO
P ]O(ρr, 1η) = c| ([[n]]η
ρs, ρB
O, ρr2) = (v, rB, r2)}
×Pρs,ρr,ρO{[[n]]η
ρs = v, ρB
O = rB, ρr2 = r2}
We let
and
2(rB, r2, ¯v, c) = Pρs,ρr,ρO{DO,OP (ρr, 1η) = c| ([[n]]η
p1
ρs, ρB
O, ρr2) = (v, rB, r2)}
2(rB, r2, ¯v, c) = Pρs,ρr,ρO{D[AO
p2
P ]O(ρr, 1η) = c| ([[n]]η
ρs, ρB
O, ρr2) = (v, rB, r2)}
We use Deﬁnition 8 with BO(ρr2, η, φ) as the machine that simulates Dm for m = |φ| and
using φ instead of querying the oracle. Let us deﬁne φi
for i = 1, 2 as in Deﬁnition 8.
m
Note that with the deﬁnition of D, B uses preﬁxes for oracle calls, disjoint from those used
in AP , hence randomness used for oracle calls in A and B are disjoint. Let vi
be the last
message of θi
. Choosing m such
m
that D makes less than m oracle calls, we have
Pρs,ρr1 ,ρr2 ,ρO{θi
2(rB, r2, ¯v, c) =(cid:80)
. By deﬁnition of D and B we have v1
O, ρr2) = (v, rB, r2)}.
m = vm and v2
m = y| ([[n]]η
m = v(cid:48)
m = x, φi
ρs, ρB
, θi
m
m
m
pi
Lemma 9 yields for all rB, r2, c that p2
¯x s.t. xm=c,¯y
2(rB, r2, c) = p1
2(rB, r2, c), which concludes part 1.
Part 2
We now prove that:
∀D. Pρs,ρr,ρO{DO,OP (ρr, 1η) = c} = Pρs,ρr,ρO{D[AO
∀D. Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c} = Pρs,ρr,ρO{D[AO
⇒
P ]O(ρr, 1η) = c}
P ]O,OQ(ρr, 1η) = c}
(1)
17
We are thus going to show that, with the interpretation of n ﬁxed, we can simulate OQ in
some D(cid:48) by sampling in ρr instead of ρs. However, both computations of OP and OQ depend
on ρs. This is where we need the assumptions that n contains the shared secrets between P
and Q, as well as the splitting of ρr.
be the machine that executes M, simulating OQ
for a ﬁxed value v of n. The machine samples the names appearing in Q and not in n and
hard codes the interpretation of n.
For any machine MO,OQ, we let [M]O
for the sampling of other names in Q, and ρs2
n (ρr, 1η) is the machine that:
More precisely, we write OQ(ρs, θ) := OQ((ρs0, ρs1, ρs2), θ) where ρs0
pling of n, ρs1
Then [M]O
• Splits ρr into two inﬁnite and disjoints ρsQ, ρrM and initializes an extra tape θ to zero.
• Simulates M(ρrM , 1η) but every time M calls OQ with input u, the machine adds u to
is used for the sam-
for the reminder.
n
θ, and produces the output of OQ((v, ρrQ, 0), θ).
Such a machine runs in deterministic polynomial time (w.r.t. η). For any machine MO,OQ,OP ,
O,OP
we similarly deﬁne [M]
. Now, we have that, for any c, by letting, for any X and U,
n
ρs = v}:
X (U ) := PX{U = c | [[n]]η
Pc,v
ρs,ρr,ρO (DO,OP (ρs0 ,ρs1 ,ρs2 ),OQ(ρs0 ,ρs1 ,ρs2 )(ρr, 1η))
Pc,v
=1 Pc,v
=2 Pc,v
=3 Pc,v