# zeratool：基于 angr 的CTF pwn 自动化利用工具介绍
## 前言
[Zeratool](https://github.com/ChrisTheCoolHut/Zeratool) 实现了针对 CTF 中的 pwn
题的自动化利用生成（Automatic Exploit Generation）以及远程获取 flag。
它基于 angr, 探索程序未约束的状态，继而分析状态的寄存器信息和内存布局，设定约束，对约束进行求解，结合
[pwntools](https://github.com/Gallopsled/pwntools) 编写脚本，提交 payload 到远程 CTF
服务器获得 flag。
本篇文章结合源码对 zeratool 的实现思路进行分析。通过阅读该文，可以对angr 和 pwn的自动化利用进一步认识。
注：zeratool 基于 angr7 ，不兼容当前的 angr8
## 使用
Zeratool 主要针对栈溢出和格式化字符串漏洞，实现的漏洞利用方式如下：
  * 栈溢出漏洞——修改 pc：`win function / shellcode / rop chain /one gadget`
  * 格式化字符串——修改 got 表项: `win function / shellcode`
`zeratool` 接收 `binary` 作为参数，同时可以配置其他选项：
    [chris:~/Zeratool] [angr] python zeratool.py -h
    usage: zeratool.py [-h] [-l LIBC] [-u URL] [-p PORT] [-v] file
    positional arguments:
      file                  File to analyze
    optional arguments:
      -h, --help            show this help message and exit # 帮助信息
      -l LIBC, --libc LIBC  libc to use                     # 指定 libc 
      -u URL, --url URL     Remote URL to pwn               # 远程 Url 
      -p PORT, --port PORT  Remote port to pwn              # 远程端口
      -v, --verbose         Verbose mode                    # 设置调试模式
使用示例：
    #!/bin/bash
    #Buffer Overflows with win functions 
    python zeratool.py challenges/ret -u ctf.hackucf.org -p 9003
    python zeratool.py challenges/bof3 -u ctf.hackucf.org -p 9002
    #Format string leak
    python zeratool.py challenges/easy_format
    #Format string point to win function
    python zeratool.py challenges/medium_format
    #Format string point to shellcode
    python zeratool.py challenges/hard_format #有时需要运行两遍 
    #Buffer overflow point to shellcode
    python zeratool.py challenges/demo_bin
接下来，我将结合源码介绍 zeratool 的思想。
## 源码分析
### 目录
    zeratool.py #顶层模块
    lib
        - formatDetector.py               #检测格式化字符串漏洞
        - formatExploiter.py              #利用格式化字符串漏洞
        - formatLeak.py                   # 检查信息泄露
        - inputDetector.py                # 检查输入类型
        - overflowDetector.py             # 检查缓冲区溢出
        - overflowExploitSender.py        # 发送 exploit
        - overflowExploiter.py            # 利用缓冲区溢出
        - protectionDetector.py           # 检查保护机制
        - winFunctionDetector.py          # 检查目标函数
lib 下包含各个模块，实现了漏洞自动化利用的相关接口，zeratool.py 负责顶层调用。lib
模块可以粗略分为三类：信息检测/漏洞检测/漏洞利用。接下来分模块介绍
### 顶层接口
#### **zeratool**
zeratool 调用顶层接口，总体逻辑大致如下：
zeratool 关于利用的属性会存储在 `properties` 字典中，如以下属性
    properties['pwn_type']['position'] 
    properties['pwn_type']['length'] 
    properties['pwn_type']['input'] # 输入字符串
    properties['pwn_type']['type'] # 漏洞类型，分为 Overflow / Format
    properties['pwn']['exploit']
    properties['input_type']     #输入方式
    properties['win_functions']  #如有目标函数，存在这里
    properties['win_functions'][func]['fcn_addr']
    properties['protections']['got']
    properties['libc']
首先读取二进制程序，调用接口检测漏洞类型：
    properties['pwn_type'] = overflowDetector.checkOverflow(args.file,inputType=properties['input_type'])
        if properties['pwn_type']['type'] is None:
            print("[+] Checking for format string pwn type...")
            properties['pwn_type'] = formatDetector.checkFormat(args.file,inputType=properties['input_type'])
  * `overflowDetector.checkOverflow` 检测缓冲区溢出漏洞
  * `formatDetector.checkFormat` 检测格式化字符串漏洞
这个两个接口均会返回一个字典存储在 `properties['pwn_type']` 下，包含漏洞的一些信息
包含的信息如下：
  * 栈溢出情况：`type / input`
  * 格式化字符串情况：`type / position / length / input`
获得保护机制信息：
    properties['protections'] = protectionDetector.getProperties(args.file)
接下来，为漏洞利用部分，如果是格式化字符串漏洞，检查是否可以直接通过泄露获得 flag，如果获得 flag 则直接结束。
    if properties['pwn_type']['type'] == "Format":
            properties['pwn'] = formatLeak.checkLeak(args.file,properties) # 检测 flag 泄露
            if properties['pwn']['flag_found'] and args.url is not "":     # 连接远程服务器
                properties['pwn']['exploit'] = formatLeak.checkLeak(args.file,properties,remote_server=True,remote_url=args.url,port_num=int(args.port))
            if properties['pwn']['flag_found']:   # 找到 flag, 直接退出
                exit(0)
检查程序中是否有目标函数（利用时直接劫持控制流到该函数即可）
    properties['win_functions'] = winFunctionDetector.getWinFunctions(args.file)
接下来，如果是缓冲区溢出漏洞，调用 `exploitOverflow` ，通过约束求解获得 `input` 值，发送
`expoit`。若是格式化字符串漏洞，则调用 `exploitFormat` 接口。如果可以成功利用并提供了 url，则连接远程服务器。无法利用则输出
`[-] Can not determine vulnerable type`
    if properties['pwn_type']['type'] == "Overflow":
            properties['pwn_type']['results'] = overflowExploiter.exploitOverflow(args.file, properties, inputType=properties['input_type'])  # 利用缓冲区溢出漏洞
            if properties['pwn_type']['results']['input']:
                properties['send_results'] = overflowExploitSender.sendExploit(args.file,properties)  # 如果可以成功利用
                if properties['send_results']['flag_found'] and args.url is not "":
                    properties['remote_results'] = overflowExploitSender.sendExploit(args.file,properties,remote_server=True,remote_url=args.url,port_num=int(args.port))  # 连接远程服务器利用
        elif properties['pwn_type']['type'] == "Format":
            properties['pwn_type']['results'] = formatExploiter.exploitFormat(args.file,properties) # 利用格式化字符串漏洞
            if properties['pwn_type'] is not None and 'flag_found' in  properties['pwn_type'].keys() and properties['pwn_type']['results']['flag_found'] and args.url is not "":  # 如果可以成功利用
                properties['pwn_type']['send_results'] = formatExploiter.getRemoteFormat(properties,remote_url=args.url,remote_port=int(args.port))   # 连接远程服务器利用
        else:
            print("[-] Can not determine vulnerable type")
以上就是 zeratool 自动化解题的顶层逻辑，接下来深入介绍各个模块。
### 信息检测
#### 检查保护机制
[protectionDetector.py](https://github.com/ChrisTheCoolHut/Zeratool/blob/master/lib/protectionDetector.py)
检测 binary 信息/保护机制，获取相关属性保存在 `properties` 中，如下
    binary = ELF(binary_name)
    properties['aslr'] = binary.aslr
    properties['arch'] = binary.arch
    properties['canary'] = binary.canary
    properties['got'] = binary.got
    properties['nx'] = binary.nx
    properties['pie'] = binary.pie
    properties['plt'] = binary.plt
    properties['relro'] = binary.relro
#### 检查输入类型
[inputDetector.py](https://github.com/ChrisTheCoolHut/Zeratool/blob/master/lib/inputDetector.py)
分为三种 `stdin /arg /libpwnable`
通过判断是否存在 `'fgets','gets','scanf','read'`函数确定是否从 `stdin` 获取输入。
    reading_functions = ['fgets','gets','scanf','read']
    binary_functions = p.loader.main_object.imports.keys()
    #Match reading functions against local functions
    if any([x in reading_functions for x in binary_functions]):
        return "STDIN"
    return "ARG"
文中会针对 STDIN 的情况进行讲解，这也是一般情况，ARG 和 LIBPWNABLE
两种输入类型会选择性忽略，不过利用思想大致相似，只是一些数据处理逻辑不同。
#### 检查目标函数
[winFunctionDetector.py](https://github.com/ChrisTheCoolHut/Zeratool/blob/master/lib/winFunctionDetector.py)
检测 binary 是否有目标函数(`winFunction`), 分为两种: 一种为调用 `system(/bin/sh)`，另一种为读取
`flag.txt`
使用 r2 进行分析
    r2 = r2pipe.open(binary_name)
     r2.cmd('aaa')
  * 检测 `system` 函数调用
    functions = [func for func in json.loads(r2.cmd('aflj'))] # 获得函数列表
        #Check for function that gives us system(/bin/sh)
        for func in functions:
            if 'system' in str(func['name']):
                system_name = func['name']
                #获得交叉引用
                refs = [func for func in json.loads(r2.cmd('axtj @ {}'.format(system_name)))]
                for ref in refs:
                    if 'fcn_name' in ref:
                        winFunctions[ref['fcn_name']] = ref #存储函数信息及引用
通过 r2 命令：`aflj` 获得 `json` 格式的函数列表，遍历该列表，找到函数名包含 `system` 的函数，使用 `axt [addr]`
命令获得代码段和数据段对函数的引用。将引用函数的信息存储在 `winFunctions[ref['fcn_name']]` 中。
  * 检测 flag 读取
    known_flag_names = ["flag","pass"] # 标志字符串
        strings = [string for string in json.loads(r2.cmd('izj'))] #获得 data 段的字符串
        for string in strings:
            value = string['string']
            decoded_value = base64.b64decode(value)
            if any([x in decoded_value for x in known_flag_names]): # 查看字符串是否包含 flag/ pass
                address = string['vaddr'] # 获得字符串的地址
                #获得交叉引用信息
                refs = [func for func in json.loads(r2.cmd('axtj @ {}'.format(address)))]
                for ref in refs:
                    if 'fcn_name' in ref:
                        winFunctions[ref['fcn_name']] = ref
通过r2 的 `izj` 命令获得数据段的字符串（in JSON)，遍历字符串，查看是否包含 “flag” 或 “pass" 字符串，如果包含，通过访问
`vaddr` 属性，获得字符串的地址，再通过 axtj 命令获取有关该地址的引用信息，将信息存储在
`winFunctions[ref['fcn_name']]` 中。
> 注：any() 函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True。
### 漏洞检测
#### 检查溢出漏洞
[overflowDetector.py](https://github.com/ChrisTheCoolHut/Zeratool/blob/master/lib/overflowDetector.py)
检查是否有溢出漏洞。
探索路径:
    try:
        @timeout_decorator.timeout(120) # 设置 timeout 
        def exploreBinary(simgr):
            # 探索程序状态
            simgr.explore(find=lambda s: 'type' in s.globals,step_func=overflow_filter)
       exploreBinary(simgr)
        if 'found' in simgr.stashes and len(simgr.found):   # 如果找到目标状态
            end_state = simgr.found[0]                      # 探索到的可利用状态
            run_environ['type'] = end_state.globals['type'] # 漏洞类型
调用模拟管理器的 `explore` 接口探索程序状态，直到找到 state 的 globals 包含 `type` 信息。（type
代表漏洞类型，说明找到漏洞）， 指定 `step_function` 为 `overflow_filter` 。每次 stash 中的状态 step
forward 时都运行该函数。
我们来看一下 `overflow_filter` 的实现。
    for path in simgr.unconstrained:  # 检查 unconstrained 状态是否满足约束
                state = path.state 
                eip = state.regs.pc   # 获取 eip 的访问