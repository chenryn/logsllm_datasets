            Downloading Minikube ISO
            36.00 MB / 36.00 MB
    		[==============================================] 
            100.00% 0s
    ```
6.  我们可以设置 kubectl 来使用一个 Minikube 上下文，如果需要的话，可以稍后切换:
    ```
     $ kubectl config use-context minikube 
            switched to context "minikube".
    ```
7.  我们将能够列出 Kubernetes 集群的节点:
    ```
     $ kubectl get nodes
            NAME       STATUS    AGE
            minikube   Ready     39m 
    ```
8.  创建一个`hello-minikube` pod 并将其作为服务公开:
    ```
     $ kubectl run hello-minikube --
              image=gcr.io/google_containers/echoserver:1.4 --port=8080
            deployment "hello-minikube" created
            $ kubectl expose deployment hello-minikube --type=NodePort
            service "hello-minikube" exposed 
    ```
9.  我们可以使用以下命令获得`hello-minikube`吊舱状态:
    ```
     $  kubectl get pod
         NAME                           READY   STATUS    RESTARTS   AGE          hello-minikube-3015430129-otr7u   1/1    running       0          36s
            vkohli-m01:~ vkohli$ curl $(minikube service hello-minikube --url)
            CLIENT VALUES:
            client_address=172.17.0.1
            command=GET
            real path=/
            query=nil
            request_version=1.1
            request_uri=http://192.168.99.100:8080/
            SERVER VALUES:
            server_version=nginx: 1.10.0 - lua: 10001
            HEADERS RECEIVED:
            accept=*/*
            host=192.168.99.100:30167
            user-agent=curl/7.43.0 
    ```
10.  We can open the Kubernetes dashboard using the following command and view details of the deployed pod:
    ```
     $ minikube dashboard
            Opening kubernetes dashboard in default browser... 
    ```
    ![Deploying Kubernetes using Minikube](img/image_08_002.jpg)
    Kubernetes ui showcasing hello-miniku pod
# 在 AWS 上部署 Kubernetes
让我们开始在 AWS 上部署 Kubernetes 集群，这可以通过使用 Kubernetes 代码库中已经存在的配置文件来完成。
1.  登录 AWS 控制台([http://aws.amazon.com/console/](http://aws.amazon.com/console/))
2.  打开 IAM 控制台([https://console.aws.amazon.com/iam/home?#home](https://console.aws.amazon.com/iam/home?))
3.  选择 IAM 用户名，选择**安全凭证**选项卡，然后单击**创建访问密钥**选项。
4.  创建密钥后，下载它们并将其保存在安全的地方。下载的 CSV 文件将包含访问密钥 ID 和秘密访问密钥，用于配置 AWS CLI。
5.  安装并配置 AWS 命令行界面。在本例中，我们使用以下命令在 Linux 上安装了 AWS CLI:
    ```
    $ sudo pip install awscli
    ```
6.  要配置 AWS-CLI，请使用以下命令:
    ```
    $ aws configure
    AWS Access Key ID [None]: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    AWS Secret Access Key [None]: YYYYYYYYYYYYYYYYYYYYYYYYYYYY
    Default region name [None]: us-east-1
    Default output format [None]: text
    ```
7.  配置完 AWS CLI 后，我们将创建一个配置文件，并为其附加一个角色，使其能够完全访问 S3 和 EC2。
    ```
    $ aws iam create-instance-profile --instance-profile-name Kube
    ```
8.  The role can be attached above the profile, which will have complete EC2 and S3 access, as shown in the following screenshot. The role can be created separately using the console or AWS CLI with the JSON file, which will define the permissions the role can have:
    ```
    $ aws iam create-role --role-name Test-Role --assume-role-policy-
              document /root/kubernetes/Test-Role-Trust-Policy.json
    ```
    ![Deploying Kubernetes on AWS](img/image_08_003.jpg)
    在 Kubernetes 部署期间在 AWS 中附加策略
9.  创建角色后，可以使用以下命令将其附加到策略中:
    ```
    $ aws iam add-role-to-instance-profile --role-name Test-Role --
              instance-profile-name Kube
    ```
10.  该脚本使用默认配置文件；我们可以更改如下:
    ```
    $ export AWS_DEFAULT_PROFILE=Kube
    ```
11.  可以使用一个命令轻松部署 Kubernetes 集群，如下所示；
    ```
    $ export KUBERNETES_PROVIDER=aws; wget -q -O - https://get.k8s.io | bash
    Downloading kubernetes release v1.1.1 to /home/vkohli/kubernetes.tar.gz
    --2015-11-22 10:39:18--  https://storage.googleapis.com/kubernetes-
            release/release/v1.1.1/kubernetes.tar.gz
    Resolving storage.googleapis.com (storage.googleapis.com)... 
            216.58.220.48, 2404:6800:4007:805::2010
    Connecting to storage.googleapis.com 
            (storage.googleapis.com)|216.58.220.48|:443... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 191385739 (183M) [application/x-tar]
    Saving to: 'kubernetes.tar.gz'
    100%[======================================>] 191,385,739 1002KB/s   
            in 3m 7s
    2015-11-22 10:42:25 (1002 KB/s) - 'kubernetes.tar.gz' saved 
            [191385739/191385739]
    Unpacking kubernetes release v1.1.1
    Creating a kubernetes on aws...
    ... Starting cluster using provider: aws
    ... calling verify-prereqs
    ... calling kube-up
    Starting cluster using os distro: vivid
    Uploading to Amazon S3
    Creating kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a
    make_bucket: s3://kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a/
    +++ Staging server tars to S3 Storage: kubernetes-staging-
            e458a611546dc9dc0f2a2ff2322e724a/devel
    upload: ../../../tmp/kubernetes.6B8Fmm/s3/kubernetes-salt.tar.gz to 
            s3://kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a/devel/kubernetes-
            salt.tar.gz
    Completed 1 of 19 part(s) with 1 file(s) remaining
    ```
12.  前面的命令将使用`config-default.sh`脚本调用`kube-up.sh`并依次调用`utils.sh`，该脚本包含具有四个节点的`k8s`集群的基本配置，如下所示:
    ```
    ZONE=${KUBE_AWS_ZONE:-us-west-2a}
    MASTER_SIZE=${MASTER_SIZE:-t2.micro}
    MINION_SIZE=${MINION_SIZE:-t2.micro}
    NUM_MINIONS=${NUM_MINIONS:-4}
    AWS_S3_REGION=${AWS_S3_REGION:-us-east-1}
    ```
13.  实例在 Ubuntu 上运行。这个过程需要 5 到 10 分钟，之后会列出主服务器和从属服务器的 IP 地址，并可以用来访问 Kubernetes 集群。
# 在虚拟空间部署 Kubernetes
Kubernetes 可以在`govc`的帮助下安装在 vs sphere 上(一个建立在 govmomi 之上的 vSphere CLI):
1.  在开始设置之前，我们必须安装 golang，这可以通过以下方式在 Linux 机器上完成:
    ```
     $ wget https://storage.googleapis.com/golang/go1.7.3.linux- 
     amd64.tar.gz
            $ tar -C /usr/local -xzf go1.7.3.linux-amd64.tar.gz
            $ go
            Go is a tool for managing Go source code.
            Usage:
              go command [arguments] 
    ```
2.  设置开始路径:
    ```
    $ export GOPATH=/usr/local/go
    $ export PATH=$PATH:$GOPATH/bin
    ```
3.  Download the pre-built Debian VMDK, which will be used to create the Kubernetes cluster on vSphere:
    ```
            $ curl --remote-name-all https://storage.googleapis.com/
            govmomi/vmdk/2016-01-08/kube.vmdk.gz{,.md5}
     % Total    % Received % Xferd  Average Speed   Time    Time     Time  
            Current
     Dload  Upload   Total   Spent    Left  
            Speed
            100  663M  100  663M   0   0  14.4M      0  0:00:45  0:00:45 --:--:-- 
            17.4M
            100    47  100    47   0   0     70      0 --:--:-- --:--:-- --:--:--   
            0
            $ md5sum -c kube.vmdk.gz.md5
            kube.vmdk.gz: OK
            $ gzip -d kube.vmdk.gz
    ```
# Kubernetes 设置故障排除
我们需要设置适当的环境变量来远程连接到 ESX 服务器，以部署 Kubernetes 集群。应设置以下环境变量，以便在虚拟空间上进行 Kubernetes 设置:
```
export GOVC_URL='https://[USERNAME]:[PASSWORD]@[ESXI-HOSTNAME-IP]/sdk'
export GOVC_DATASTORE='[DATASTORE-NAME]'
export GOVC_DATACENTER='[DATACENTER-NAME]'
#username & password used to login to the deployed kube VM
export GOVC_RESOURCE_POOL='*/Resources'
export GOVC_GUEST_LOGIN='kube:kube' 
export GOVC_INSECURE=true
```
### 注
在本教程中，请使用 ESX 和 vSphere 版本 5.5。
将`kube.vmdk`上传到 ESX 数据存储。VMDK 将存储在`kube`目录中，该目录将通过以下命令创建:
```
 $ govc datastore.import kube.vmdk kube