embedded objects (pictures, videos, etc.). We assume that one
or more adversaries may perform blocking, whole-page alteration,
and/or partial alteration attacks against some fraction of the prox-
ies. In addition, the web server may intentionally serve inconsistent
contents to different proxies. If a majority of the proxies are able to
retrieve an accurate version of the targeted URL, then the user can
construct a “consensus” version from the returned results that more
accurately reﬂects the URL’s actual contents.
System model.
Figure 1 presents an overview of the Senser sys-
tem. Senser consists of a client running on the user’s machine, and
a pool of proxies distributed across the Internet. The client com-
municates with the proxies using a secure communication channel
(e.g., through SSL/TLS). As with the Perspectives system [30], we
assume that the list of proxies and their public keys is preloaded
with the Senser client software (or securely retrieved using a trusted
directory) and that no PKI is required to authenticate the proxies.
Finally, we assume that a subset of the proxies may be disconnected
or compromised by an adversary.
Consider the example scenarios shown in Figure 1 in which the
adversary modiﬁes the content of a requested web page. In Fig-
ure 1a, the client uses three proxies: P1, P2, and P3. Here, AS2
modiﬁes responses from foo.com, causing the client to receive a
modiﬁed webpage from P2 (since the path from P2 to foo.com tra-
verses AS2). On the other hand, proxies P1 and P3 will be able to
retrieve the unmodiﬁed webpage, as their routes to the web server
avoid AS2. Senser leverages the responses received at these prox-
ies to circumvent the attack.
Similarly, Figure 1b shows an attack scenario due a compro-
mised proxy. The use of multiple proxies enables the client to form
a consensus and construct an accurate view of the requested URL.
We explain this process in more detail below.
System execution. Upon receiving a URL request from the user,
Senser takes the following steps to generate a response:
• The client forwards the URL request to a selected subset of
proxies via secure communication. Note that proxies located
in different ASes may still share part of their routes to the
web server. A malicious AS may therefore affect the re-
sponses received by different proxies. To mitigate the po-
341
IP Lookup
Your IP is 10.0.0.1
Figure 2: Example HTML document.
tential damage due to a malicious AS, we deploy a proxy
selection module to maximize the diversity of the AS-level
paths from the chosen proxies to the website.
• Each selected proxy sends an HTTP request to the web server,
and passes the received HTTP response to the summary con-
struction module. The module crafts a concise summary of
the requested object (e.g., HTML page) and returns the sum-
mary to the client, again via secure communication. To pro-
duce compact summaries, we construct Merkle Hash Trees
(MHTs) over retrieved web content, because HTML has a
hierarchical structure that can be treated as a tree.
• The client compares the summaries collected from the prox-
ies to identify inconsistencies, and uses a consensus con-
struction module to resolve the inconsistencies. The consen-
sus version contains the elements agreed upon by a majority
of the proxies (for example, the elements present in a ma-
jority of the summaries of HTML documents). Rather than
doing a fuzzy comparison, we require elements to match ex-
actly since even the change of a single word can signiﬁcantly
alter the meaning of a webpage.
• Finally, the Senser client retrieves the consensus version’s
content from one or more proxies. The retrieved contents
are compared against the reported summaries for consistency
(i.e., to ensure that the retrieved content hashes to the correct
value in the consensus version MHT), and the result is re-
turned to the browser for rendering.
3.2 Summary Construction
Upon receiving a client’s request for a particular URL, the proxy
forwards that request to the requested web server. In the case of
HTML documents, the retrieved webpage is normalized using an
HTML parser (e.g., Jsoup1). The proxy then creates an MHT of the
retrieved content.
We ﬁrst describe the case in which the client requests an HTML
document: The MHT is constructed using the (normalized) HTML’s
structure such that each node in the MHT corresponds to either an
HTML tag (e.g., ) or the text inside a tag (e.g., the con-
tent in content). Basing the MHT’s structure on
the structure of the HTML document may create imbalanced trees,
but the construction allows us to quickly identify the structural and
contextual differences across multiple MHTs (see Section 3.3).
Importantly, the MHTs we use differ from traditional MHTs in
which each internal node contains only a hash over its children and
pointers to those children. In Senser, an internal node consists of
(i) a hash over the corresponding HTML tag name and, if applica-
ble, its attributes (the tag-hash), (ii) a hash of the node and all of
its children (the full-hash), and (iii) pointers to its children. A leaf
node sets its tag-hash as NULL and its full-hash based on a hash
over its corresponding content (which could be a string, a URL, a
picture, or some other object type).
To illustrate, consider the example HTML document in Figure 2
which shows the IP address of the visiting user. Figure 3 shows the
corresponding MHT-based summary of the example HTML docu-
ment. Note that the root of the MHT contains the tag-hash (“TH”)
1http://jsoup.org/
TH1 = HASH (  )
FH1 = HASH (TH1 + FH2 + FH3)
TH2 = HASH (  )
FH2 = HASH (TH2 + FH4)
TH3 = HASH (  )
FH3 = HASH (TH3 + FH5 + FH6)
TH4 = NULL
FH4 = HASH (“IP Lookup”)
TH5 = NULL
FH5 = HASH (“Your IP is ”)
TH6 = HASH (  )
FH6 = HASH (TH6 + FH7)
TH7 = NULL
FH7 = HASH (“10.0.0.1”)
Figure 3: The corresponding MHT-based summary of the example HTML
document depicted in Figure 2.
count_fullhash[node->fullhash]++
count_taghash[node->taghash]++
Algorithm 1 Consensus Construction
1: proc consensus(nNodes, MHT_roots[])
2: root ← an empty leaf node
3: nodes_queue ← an empty queue
4: nodes_queue.push_back(root)
5: candidates_queue ← an empty queue
6: candidates_queue.push_back(MHT_roots)
7: while nodes_queue (cid:3)= empty do
currentNode ← nodes_queue.pop_front()
8:
candidates ← candidates_queue.pop_front()
9:
10:
for all node in candidates do
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
end if
32:
end if
33: end while
34: return root
else
else
newNode ← an empty leaf node
currentNode.addChild(newNode)
nodes_queue.push_back(newNode)
candidates.push_back(node.child[i])
candidates_queue.push_back(candidates)
end for
currentNode ← a node marked NON-CONSENSUS
end for
if maxF ← MAX(count_fullhash) > nNodes/2 then
ﬁnd node, s.t. count_fullhash[node.fullhash]=maxF
currentNode ← clone(node)
if maxT ← MAX(count_taghash) > nNodes/2 then
ﬁnd taghash, s.t. count_taghash[taghash]=maxT
currentNode.taghash ← taghash
numChildren ← MAX(node.numChildren), for all node where
node.taghash=taghash
for 0  )
FH1 = HASH (...)
TH1 = HASH (  )
FH1 = HASH (...)
TH1 = HASH (  )
FH1 = HASH (...)
TH2 = HASH (  )
FH2 = HASH (...)
TH3 = HASH (  )
FH3 = HASH (...)
TH2 = HASH (  )
FH2 = HASH (...)
TH3 = HASH (  )
FH3 = HASH (...)
TH2 = HASH (  )
FH2 = HASH (...)
TH3 = HASH (  )
FH3 = HASH (...)
TH4 = NULL
FH4 = HASH (“IP Lookup”)
TH5 = NULL
FH5 = HASH (“Your IP is ”)
TH6 = HASH (  )
FH6 = HASH (...)
TH4 = NULL
FH4 = HASH (“IP Lookup”)
TH5 = NULL
FH5 = HASH (“Censored”)
TH4 = NULL
FH4 = HASH (“IP Lookup”)
TH5 = NULL
FH5 = HASH (“Your IP is ”)
TH6 = HASH (  )
FH6 = HASH (...)
TH7 = NULL
FH7 = HASH (“10.0.0.3”)
TH7 = NULL
FH7 = HASH (“10.0.0.4”)
(a) Summary at P1
(b) Summary at P2
(c) Summary at P3
Figure 4: An example scenario of consensus construction. The three returned summaries are shown in Figure (a) - (c), where Figure (a) and (c) correspond to
cases where the original document (Figure 2) is received without manipulation; Figure (b) corresponds to a censorship case. The full-hashes of the internal
tree nodes are omitted for brevity.
TH1 = HASH (  )
FH1 = HASH (...)
text “Your IP is”, but no consensus can be drawn for the IP address
part, as this “proﬁle-based” content varies amongst the proxies.
TH2 = HASH (  )
FH2 = HASH (...)
TH3 = HASH (  )
FH3 = HASH (...)
TH4 = NULL
FH4 = HASH (“IP Lookup”)
TH5 = NULL
FH5 = HASH (“Your IP is ”)
TH6 = HASH (  )
FH6 = HASH (...)
NON-CONSENSUS
Figure 5: The consensus result for the example scenario shown in Figure 4.
The consensus version accurately reﬂects the original document, with the
exception of the proﬁle-based content.
tent comparison based on metrics such as edit distance (see Sec-
tion 2), they usually impose a signiﬁcant overhead that is too ex-
pensive for online processing. We adopt a simple and efﬁcient tree
alignment that employs breadth ﬁrst search.
The algorithm starts from the roots of the MHTs, and traverses
recursively through the MHTs in a top-down fashion. For each
tree node, we compute the majority consensus for the full-hashes
and tag-hashes (lines 10-13): if a majority of the proxies agree on
the same full-hash, which indicates that a majority consensus has
been reached for the complete subtree rooted by that tree node, then
the whole subtree is copied into the ﬁnal consensus tree (lines 14-
16); otherwise, if the corresponding tree nodes in a majority of the
summaries have the same tag-hash, we heuristically assume that
these tree nodes correspond to the same fragment in the HTML but
disagree on the contents, in which case, that tree node is copied
into the ﬁnal consensus tree (lines 18-20), and the BFS algorithm
will construct the consensus version of the corresponding subtree
when the children nodes are visited (lines 21-28). If neither a tree
node’s full-hash nor its tag-hash are present in a majority of the
MHTs, no consensus can be drawn, and the node is marked as
NON-CONSENSUS (lines 29-31).
To illustrate, Figure 4 presents an example scenario of consensus
construction in which the client wants to construct a consensus ver-
sion based on the summaries returned by proxies P1, P2, and P3.
Figure 4(a)-(c) corresponds to the summaries returned by the three
proxies, where P1 and P3 managed to retrieve the original webpage
(shown in Figure 2) with slight variations according to their current
IP addresses, and P2 received a partially altered version.
Figure 5 shows the result of executing the consensus construc-
tion algorithm (Algorithm 1). The three roots share the same tag-
hash, yet their full-hashes differ from each other. Therefore, the
root of the consensus MHT is assigned a tag-hash of html, and
the BFS construction continues to the children nodes. For the left
branch, the three summaries have the identical full-hash, indicat-
ing a consensus on the complete title element. In contrast, for the
right branch, a majority consensus (2 out of 3) is reached for the
3.4 Proxy Selection
The quality of the ﬁnal consensus relies on the summaries re-
turned from the selected proxies. To achieve reasonable perfor-
mance, a Senser client needs to select a relatively small number of
proxies from the pool of all available proxies. Rather than selecting
the proxies at random, we discuss in this section methods for proxy
selection that mitigate the potential damage caused by a malicious
AS. Conceptually, this is achieved by maximizing the diversity of
the AS-level paths from the proxies to the destination web server.
DNS consensus.
To determine the AS-level paths, we need to
know the IP address of the destination web server. This task is more
complex than it appears: we cannot rely on the DNS resolution
results retrieved locally, since doing so would create a single point-
of-failure (i.e., an adversary can poison the DNS server or hijack
the DNS request/response to point the client to a fake destination).
To resolve this issue, our approach takes into account the DNS
resolution results at the proxies collectively. Based on the assump-
tion that a majority of the proxies are benign and are not subject
to a man-in-the-middle attack, the client forwards DNS requests
through secure communication channels to q randomly selected
proxies to perform the DNS resolution on its behalf. If (cid:10)q/2(cid:11) + 1
proxies return the same IP address, then that IP is accepted.
One source of complication comes from the use of a reverse
proxy, at companies such as Google, for performance optimization
and load balancing purposes. These companies deploy a large num-
ber of servers with different IP addresses to handle the requests for
popular web content. However, given the nature of reverse proxies,
these IP addresses often reside within the same AS, and hence users
would be likely to observe the same AS-level path when accessing
the web content from these IP addresses (though the content may