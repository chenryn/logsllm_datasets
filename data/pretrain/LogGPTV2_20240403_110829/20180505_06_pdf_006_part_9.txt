• Check constraints cannot perform validation on columns of other tables.
• Check constraints cannot work with functions that not deterministic (e.g. ).
CURRENT_DATE
• Check constraints cannot work with user-defined functions.
• Check constrains cannot work with pseudo columns such as: or
CURRVAL, NEXTVAL, LEVEL,
.
ROWNUM
Example
Create an inline check constraint that uses a regular expression to validate that the email suffix of inserted
rows contains “ ”.
@aws.com
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25)
CHECK(REGEXP_LIKE (EMAIL, '^[A-Za-z]+@aws.com?{1,3}$')),
DEPARTMENT_ID NUMBER);
Not Null Constraint
The not null constraint prevents a column from containing any null values. In order to enable the not null
constraint, the keywords must be specified during table creation (inline only). Permitting null
NOT NULL
values is the default if is not specified.
NOT NULL
Example
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20) NOT NULL,
LAST_NAME VARCHAR2(25) NOT NULL,
101
EMAIL VARCHAR2(25),
DEPARTMENT_ID NUMBER);
REF Constraint
REF constraints define a relationship between a column of type and the object it references. The REF
REF
constraint can be created both inline and out-of-line. Both methods permit you to define a scope constraint, a
rowid constraint, or a referential integrity constraint based on the REF column.
Example
1. Create a new Oracle type object:
SQL> CREATE TYPE DEP_TYPE AS OBJECT (
DEP_NAME VARCHAR2(60),
DEP_ADDRESS VARCHAR2(300));
2. Create a table based on the previously created type object:
SQL> CREATE TABLE DEPARTMENTS_OBJ_T OF DEP_TYPE;
3. Create the table with a reference to the previously created table that is
EMPLOYEES DEPARTMENTS
based on the object:
DEP_TYPE
SQL> CREATE TABLE EMPLOYEES (
EMP_NAME VARCHAR2(60),
EMP_EMAIL VARCHAR2(60),
EMP_DEPT REF DEPARTMENT_TYP REFERENCES DEPARTMENTS_OBJ_T);
Special Constraint States
Oracle provides granular control of database constraint enforcement. For example, you can disable constraints
temporarily while making modifications to table data.
Constraint states can be defined using the / statements. The following
CREATE TABLE ALTER TABLE
constraint states are supported:
• DEFERRABLE: Enables the use of the clause in subsequent transactions until a
SET CONSTRAINT
statement is submitted.
COMMIT
• NOT DEFERRABLE: Disables the use of the clause.
SET CONSTRAINT
• INITIALLY IMMEDIATE: Checks the constraint at the end of each subsequent SQL statement (this state
is the default).
• INITIALLY DEFERRED: Checks the constraint at the end of subsequent transactions.
• VALIDATE | NO VALIDATE: These parameters depend on whether the constraint is ENABLED or
DISABLED.
• ENABLE | DISABLE: Specifies if the constraint should be enforced after creation (ENABLE by default).
Several options are available when using ENABLE | DISABLE:
- ENABLE VALIDATE: Enforces that the constraint applies to all existing and new data.
- ENABLE NOVALIDATE: Only new data complies with the constraint.
- DISABLE VALIDATE: A valid constraint is created in disabled mode with no index.
102
- DISABLE NOVALIDATE: The constraint is created in disabled mode without validation of new or
existing data.
Example
1. Create a unique constraint with a state of :
DEFERRABLE
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25) CONSTRAINT UNIQ_EMP_EMAIL UNIQUE DEFERRABLE,
DEPARTMENT_ID NUMBER);
2. Modify the state of the constraint to :
ENABLE NOVALIDATE
SQL> ALTER TABLE EMPLOYEES
ADD CONSTRAINT CHK_EMP_NAME CHECK(FIRST_NAME LIKE 'a%')
ENABLE NOVALIDATE;
Using Existing Indexes to Enforce Constraint Integrity (using_index_clause)
Primary key and unique constraints can be created based on an existing index to enforce the constraint
integrity instead of implicitly creating a new index during constraint creation.
Example
Create a unique constraint based on an existing index:
SQL> CREATE UNIQUE INDEX IDX_EMP_ID ON EMPLOYEES(EMPLOYEE_ID);
SQL> ALTER TABLE EMPLOYEES
ADD CONSTRAINT PK_CON_UNIQ
PRIMARY KEY(EMPLOYEE_ID) USING INDEX IDX_EMP_ID;
Required Privileges for Creating Constraints
You must have privileges on the table in which constrains are created and, in case of foreign key constraints,
you must have the privilege on the referenced table.
REFERENCES
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28286/clauses002.htm#SQLRF52163
https://docs.oracle.com/database/121/SQLRF/clauses002.htm#SQLRF52180
103
Migration to: PostgreSQL Table Constraints
[Back to TOC]
Overview
PostgreSQL supports the following types of table constraints:
•
PRIMARY KEY
•
FOREIGN KEY
•
UNIQUE
•
CHECK
•
NOT NULL
• (specific to PostgreSQL)
EXCLUDE
Note: PostgreSQL does not support Oracle’s REF constraint.
Similar to constraint deceleration in Oracle, PostgreSQL allows creating constraints in-line or out-of-line during
table column specification.
PostgreSQL constraints can be specified using . Views are not supported.
CREATE / ALTER TABLE
Privileges
You must have privileges on the table in which constrains will be created. With foreign key constraints, you
must also have the privilege.
REFERENCES
Primary Key Constraint
• Uniquely identifies each record and cannot contain a value.
NULL
• Uses the same ANSI SQL syntax as Oracle.
• Can be created on a single column or on multiple columns (“composite primary keys”) as the only
in a table.
PRIMARY KEY
• Create a constraint creates a unique B-Tree index automatically on the column or
PRIMARY KEY
group of columns marked as the primary key of the table.
• Constraint names can be generated automatically by PostgreSQL or explicitly specified during
constraint creation.
Examples
1. Create an inline primary key constraint with a system-generated constraint name:
demo=> CREATE TABLE EMPLOYEES (
EMPLO YEE_ID NUMER IC PRI MARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25));
104
2. Create an inline primary key constraint with a user-specified constraint name:
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC CONSTRAINT PK_EMP_ID PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25));
3. Create an out-of-line primary key constraint:
demo=> CREATE TABLE EMPLOYEES(
EMPLOYEE_ID NUMERIC,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25));
CONSTRAINT PK_EMP_ID PRIMARY KEY (EMPLOYEE_ID));
4. Add a primary key constraint to an existing table:
demo=> ALTER TABLE SYSTEM_EVENTS
ADD CONSTRAINT PK_EMP_ID PRIMARY KEY (EVENT_CODE, EVENT_TIME);
5. Drop the primary key:
demo=> ALTER TABLE SYSTEM_EVENTS
DROP CONSTRAINT PK_EMP_ID;
Foreign Key Constraint
• Enforces referential integrity in the database. Values in specific columns or group of columns must
match the values from another table (or column).
• Creating a constraint in PostgreSQL uses the same ANSI SQL syntax as Oracle.
FOREIGN KEY
• Can be created in-line or out-of-line during table creation.
• Use the clause to specify the table referenced by the foreign key constraint.
REFERENCES
• When specifying in absence of a column list in the referenced table, the
REFERENCES PRIMARY
of the referenced table is used as the referenced column or columns.
KEY
• A table can have multiple constraints to describe its relationships with other tables.
FOREIGN KEY
• Use the clause to handle cases of parent records deletions (such as
ON DELETE FOREIGN KEY
cascading deletes).
• Foreign key constraint names are generated automatically by the database or specified explicitly during
constraint creation.
Foreign Key and the clause
ON DELETE
PostgreSQL provides three main options to handle cases where data is deleted from the parent table and a
child table is referenced by a constraint. By default, without specifying any additional options,
FOREIGN KEY
PostgreSQL will use the method and raise an error if the referencing rows still exist when the
NO ACTION
constraint is verified.
•
ON DELETE CASCADE
Any dependent foreign key values in the child table are removed along with the referenced values
from the parent table.
105
•
ON DELETE RESTRICT
Prevents the deletion of referenced values from the parent table and the deletion of dependent
foreign key values in the child table.
•
ON DELETE NO ACTION
Performs no action (the default action). The fundamental difference between and
RESTRIC NO
is that allows the check to be postponed until later in the transaction;
ACTION NO ACTION
does not.
RESTRICT
Foreign Key and the clause
ON UPDATE
Handling updates on columns is also available using the clause, which shares
FOREIGN KEY ON UPDATE
the same options as the clause:
ON DELETE
•
ON UPDATE CASCADE
•
ON UPDATE RESTRICT
•
ON UPDATE NO ACTION
Note: Oracle does not provide an clause.
ON UPDATE
Examples
1. Create an inline foreign key with a user-specified constraint name:
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25),
DEPARTMENT_ID NUMERIC REFERENCES DEPARTMENTS(DEPARTMENT_ID));
*PostgreSQL foreign key columns must have a specified data type while Oracle doesn’t
2. Create an out-of-line foreign key constraint with a system-generated constraint name:
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25),
DEPARTMENT_ID NUMERIC,
CONSTRAINT FK_FEP_ID
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID));
3. Create a foreign key using the clause:
ON DELETE CASCADE
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25),
DEPARTMENT_ID NUMERIC,
CONSTRAINT FK_FEP_ID
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
ON DELETE CASCADE); 106
4. Add a foreign key to an existing table:
demo=> ALTER TABLE EMPLOYEES
ADD CONSTRAINT FK_FEP_ID
FOREIGN KEY(DEPARTMENT_ID)
REFERENCES DEPARTMENTS(DEPARTMENT ID);
UNIQUE Constraints
• Ensures that a value in a column, or a group of columns, is unique across the entire table.
• PostgreSQL constraint syntax is ANSI SQL compatible.
UNIQUE
• Automatically creates a B-Tree index on the respective column, or a group of columns, when creating a
constraint.
UNIQUE
• If duplicate values exist in the column(s) on which the constraint was defined during
UNIQUE
constraint creation, the constraint creation fails, returning an error message.
UNIQUE
• constraints in PostgreSQL will accept multiple NULL values (similar to Oracle).
UNIQUE
• constraint naming can be system-generated or explicitly specified.
UNIQUE
Example
Create an inline unique constraint ensuring uniqueness of values in the email column:
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25) CONSTRAINT UNIQ_EMP_EMAIL UNIQUE,
DEPARTMENT_ID NUMERIC);
CHECK Constraint
• constraints enforce that values in a column satisfy a specific requirement.
CHECK
• constraints in PostgreSQL use the same ANSI SQL syntax as Oracle.
CHECK
• Can only be defined using a Boolean data type to evaluate the values of a column.
• constraints naming can be system-generated or explicitly specified by the user during
CHECK
constraint creation.
Example
Create an inline constraint, using a regular expression, to enforce that the email column contains
CHECK
email addresses with an “ ” suffix.
@aws.com
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(25),
EMAIL VARCHAR(25) CHECK(EMAIL ~ '(^[A-Za-z]+@aws.com$)'),
DEPARTMENT_ID NUMERIC);
107
NOT NULL Constraints
• constraints enforce that a column cannot accept NULL values. This behavior is different
NOT NULL
from the default column behavior in PostgreSQL where columns can accept NULL values.
• constraints can only be defined inline, during table creation (similar to Oracle).
NOT NULL
• constraints in PostgreSQL use the same ANSI SQL syntax as Oracle.
NOT NULL
• You can explicitly specify names for constraints when used with a constraint.
NOT NULL CHECK
Example
Define two not null constraints on the and columns. Define a check
FIRST_NAME LAST_NAME
constraint (with an explicitly user-specified name) to enforce not null behavior on the column.
EMAIL
demo=> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMERIC PRIMARY KEY,
FIRST_NAME VARCHAR(20) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
EMAIL VARCHAR(25) CONSTRAINT CHK_EMAIL
CHECK(EMAIL IS NOT NULL));
Constraint States
Similarly to Oracle, PostgreSQL provides controls for certain aspects of constraint behavior:
•
DEFERRABLE | NOT DEFERRABLE
Using the PostgreSQL statement, constraints can be defined as:
SET CONSTRAINTS
-
DEFERRABLE
Allows you to use the statement to set the behavior of constraint
SET CONSTRAINTS
checking within the current transaction until transaction commit.
-
IMMEDIATE
Constraints are enforced only at the end of each statement.
Note: Each constraint has its own or mode (same as Oracle)
IMMEDIATE DEFERRED
-
NOT DEFERRABLE
This statement always runs as and is not affected by the
IMMEDIATE SET CONSTRAINTS
command.
PostgreSQL SET CONSTRAINTS Synopsis
SET CONSTRAINTS { ALL | name [, ...] } { DEFERRED | IMMEDIATE }
•
VALIDATE CONSTRAINT | NOT VALID
-
VALIDATE CONSTRAINT
Validates foreign key or check constraints (only) that were previously created as .
NOT VALID
This action performs a validation check by scanning the table to ensure that all records satisfy
the constraint definition.
108
-
NOT VALID
Can be used only for foreign key or check constraints. When specified, new records are not
validated with the creation of the constraint. Only when the state
VALIDATE CONSTRAINT
is applied does the constraint state is enforced on all records.
Example
demo=> ALTE R TABLE EMPLOYEES ADD CONSTRAINT FK_DEPT
FOR EIGN KEY (department_id)
REFERENCES DEPARTMENTS (department_id) NOT VALID;
demo=> ALTER TABLE EMPLOYEES VALIDATE CONSTRAINT FK_DEPT;
Using Existing Indexes During Constraint Creation (table_constraint_using_index)
PostgreSQL can add a new primary key or unique constraints based on an existing unique Index . All the index
columns are included in the constraint. When creating constraints using this method, the index is owned by
the constraint. When dropping the constraint, the index is also dropped.
Example
Use an existing unique Index to create a primary key constraint:
demo=> CREATE UNIQUE INDEX IDX_EMP_ID ON EMPLOYEES(EMPLOYEE_ID);
demo=> ALTER TABLE EMPLOYEES
ADD CONSTRAINT PK_CON_UNIQ PRIMARY KEY USING INDEX IDX_EMP_ID;
109
Oracle Constraints Comparison to PostgreSQL
Oracle PostgreSQL
Constraint / Parameter Constraint / Parameter
PRIMARY KEY PRIMARY KEY
FOREIGN KEY FOREIGN KEY
UNIQUE UNIQUE
CHECK CHECK
NOT NULL NOT NULL
REF Not Supported
DEFERRABLE DEFERRABLE
NOT DEFERRABLE NOT DEFERRABLE
SET CONSTRAINTS SET CONSTRAINTS
INITIALLY IMMEDIATE INITIALLY IMMEDIATE
INITIALLY DEFERRED INITIALLY DEFERRED
ENABLE Default, not supported as keyword
DISBALE Not supported as keyword, NOT VALID can use instead
ENABLE VALIDATE Default, not supported as keyword
ENABLE NOVALIDATE NOT VALID
DISABLE VALIDATE Not supported
DISABLE NOVALIDATE Not supported
USING_INDEX_CLAUSE table_constraint_using_index
View Constraints Not Supported
Metadata: Metadata:
DBA_CONSTRAINTS PG_CONSTRAINT
For additional details:
https://www.postgresql.org/docs/9.6/static/ddl-constraints.html
https://www.postgresql.org/docs/9.6/static/sql-set-constraints.html
https://www.postgresql.org/docs/9.6/static/sql-altertable.html
110
Migrating from: Oracle Table Partitioning
[Back to TOC]
Overview
The purpose of database partitioning is to provide support for very large tables and indexes by splitting them
into smaller pieces, known as partitions. Each partition has its own name and definitions and can be managed