\fIparameter\fP 自身的值。这也称为 \fIindirect expansion\fP(间接扩展).
例外情况是下面讲到的 ${!\fIprefix\fP*}。
.PP
下面的每种情况中，\fIword\fP 都要经过波浪线扩展，参数扩展，命令替换和
算术扩展。如果不进行子字符串扩展，\fBbash\fP 测试一个没有定义或值为空的
参数；忽略冒号的结果是只测试未定义的参数。
.PP
.PD 0
.TP
${\fIparameter\fP\fB:\-\fP\fIword\fP}
\fBUse Default Values\fP(使用默认值)。如果
.I parameter
未定义或值为空，将替换为
.I word
的扩展。否则，将替换为
.I parameter
的值。
.TP
${\fIparameter\fP\fB:=\fP\fIword\fP}
\fBAssign Default Values\fP(赋默认值)。如果
.I parameter
未定义或值为空，
.I word
的扩展将赋予
.IR parameter .
.I parameter
的值将被替换。位置参数和特殊参数不能用这种方式赋值。
.TP
${\fIparameter\fP\fB:?\fP\fIword\fP}
\fBDisplay Error if Null or Unset\fP(显示错误，如果未定义或值为空)。如果
.I parameter
未定义或值为空，\fIword\fP (或一条信息，如果
.I word
不存在) 的扩展将写入到标准错误；shell 如果不是交互的，则将退出。否则，
\fIparameter\fP 的值将被替换。
.TP
${\fIparameter\fP\fB:+\fP\fIword\fP}
\fBUse Alternate Value\fP(使用可选值)。如果
.I parameter
未定义或值为空，不会进行替换；否则将替换为
.I word
扩展后的值。
.TP
${\fIparameter\fP\fB:\fP\fIoffset\fP}
.PD 0
.TP
${\fIparameter\fP\fB:\fP\fIoffset\fP\fB:\fP\fIlength\fP}
.PD
\fBSubstring Expansion\fP(子字符串扩展)。
扩展为\fIparameter\fP 的最多 \fIlength\fP 个字符，从 \fIoffset\fP 
指定的字符开始。如果忽略了 \fIlength\fP，扩展为 \fIparameter\fP 的子字符串，
从 \fIoffset\fP 指定的字符串开始。\fIlength\fP 和 \fIoffset\fP 是算术表达式
(参见下面的
.SM
.B ARITHMETIC EVALUATION 算术求值
段落)。
\fIlength\fP 必须是一个大于等于 0 的数值。如果 \fIoffset\fP 求值结果小于 0，
值将当作从 \fIparameter\fP 的值的末尾算起的偏移量。如果 \fIparameter\fP
是 \fB@\fP，结果是 \fIlength\fP 个位置参数，从 \fIoffset\fP 开始。
如果 \fIparameter\fP 是一个数组名，以 @ 或 * 索引，结果是数组的
\fIlength\fP 个成员，从 ${\fIparameter\fP[\fIoffset\fP]} 开始。
子字符串的下标是从 0 开始的，除非使用位置参数时，下标从 1 开始。
.TP
${\fB!\fP\fIprefix\fP\fB*\fP}
扩展为名称以 \fIprefix\fP 开始的变量名，以特殊变量
.SM
.B IFS
的第一个字符分隔。
.TP
${\fB#\fP\fIparameter\fP}
替换为 \fIparameter\fP 的值的长度 (字符数目)。如果
.I parameter
是
.B *
或者是 
.BR @ ,
替换的值是位置参数的个数。如果
.I parameter
是一个数组名，下标是
.B *
或者是
.BR @ ,
替换的值是数组中元素的个数。
.TP
${\fIparameter\fP\fB#\fP\fIword\fP}
.PD 0
.TP
${\fIparameter\fP\fB##\fP\fIword\fP}
.PD
.I word
被扩展为一个模式，就像路径扩展中一样。如果这个模式匹配
.IR parameter
的值的起始，那么扩展的结果是将
.I parameter
扩展后的值中，最短的匹配 (``\fB#\fP'' 的情况) 或者最长的匹配
(``\fB##\fP''的情况) 删除的结果。如果
.I parameter
是
.B @
或者是
.BR * ,
则模式删除操作将依次施用于每个位置参数，最后扩展为结果的列表。如果
.I parameter
是一个数组变量，下标是
.B @
或者是
.BR * ,
模式删除将依次施用于数组中的每个成员，最后扩展为结果的列表。
.TP
${\fIparameter\fP\fB%\fP\fIword\fP}
.PD 0
.TP
${\fIparameter\fP\fB%%\fP\fIword\fP}
.PD
\fIword\fP 被扩展为一个模式，就像路径扩展中一样。如果这个模式匹配
.IR parameter 
扩展后的值的尾部，那么扩展的结果是将
.I parameter
扩展后的值中，最短的匹配 (``\fB%\fP'' 的情况) 或者最长的匹配
(``\fB%%\fP''的情况) 删除的结果。如果
.I parameter
是
.B @
或者是
.BR * ,
则模式删除操作将依次施用于每个位置参数，最后扩展为结果的列表。如果
.I parameter
是一个数组变量，下标是
.B @
或者是
.BR * ,
模式删除将依次施用于数组中的每个成员，最后扩展为结果的列表。
.TP
${\fIparameter\fP\fB/\fP\fIpattern\fP\fB/\fP\fIstring\fP}
.PD 0
.TP
${\fIparameter\fP\fB//\fP\fIpattern\fP\fB/\fP\fIstring\fP}
.PD
\fIpatterm\fP 被扩展为一个模式，就像路径扩展中一样。\fIparameter\fP
被扩展，其值中最长的匹配 \fIpattern\fP 的内容被替换为 \fIstring\fP。
在第一种形式中，只有第一个匹配被替换。第二种形式使得 \fIpattern\fP
中所有匹配都被替换为 \fIstring\fP。
如果 \fIpattern\fP 以 \fB#\fP 开始，它必须匹配 \fIparameter\fP 扩展后
值的首部。如果 \fIpattern\fP 以 \fB%\fP 开始，它必须匹配 \fIparameter\fP
扩展后值的尾部。如果 \fIstring\fP 是空值，\fIpattern\fP 的匹配都将被删除，
\fIpattern\fP 之后的 \fB/\fP 将被忽略。如果
.I parameter
是
.B @
或者是
.BR * ,
则替换操作将依次施用于每个位置参数，最后扩展为结果的列表。如果
.I parameter
是一个数组变量，下标是
.B @
或者是
.BR * ,
模式删除将依次施用于数组中的每个成员，最后扩展为结果的列表。
.SS Command Substitution
.PP
命令替换 (\fICommand substitution\fP) 允许以命令的输出替换命令名。有
两种形式：
.PP
.RS
.PP
\fB$(\fP\fIcommand\fP\|\fB)\fP
.RE
还有
.RS
\fB`\fP\fIcommand\fP\fB`\fP
.RE
.PP
.B Bash
进行扩展的步骤是执行 \fIcommand\fP，以它的标准输出替换它，并且将所有后续的
新行符删除。内嵌的新行符不会删除，但是它们可能会在词的拆分中被删除。
命令替换 \fB$(cat \fIfile\fP)\fR 可以用等价但是更快的方法
\fB$((\fP\fIlist\^\fP\fB)\fP。
进程 \fIlist\fP 运行时的输入或输出被连接到一个 \fIFIFO\fP 或者 \fB/dev/fd\fP
中的文件。文件的名称作为一个参数被传递到当前命令，作为扩展的结果。
如果使用 \fB>(\fP\fIlist\^\fP\fB)\fP 形式，向文件写入相当于为 \fIlist\fP
提供输入。如果使用 \fB ,
那么
.SM
.B IFS
字符的任何序列都将作为分界之用。如果
.SM
.B IFS
的值是默认之外的值，那么词开头和结尾的空白字符
.B space
和
.B tab
都将被忽略，只要空白字符在
.SM
.BR IFS
的值之内 (即，
.SM
.B IFS
包含空白字符)。
任何在
.SM
.B IFS
之中但是不是
.SM
.B IFS
空白的字符，以及任何相邻的
.SM
.B IFS
空白字符，将字段分隔开来。
.SM
.B IFS
空白字符的序列也被作为分界符。如果
.SM
.B IFS
的值是空，不会发生词的拆分。
.PP
显式给出的空值参数 (\^\f3"\^"\fP 或 \^\f3'\^'\fP\^) 将被保留。
隐含的空值参数，来自于空值的参数扩展，如果没有引用则将被删除。
如果空值的参数在双引号引用中扩展，结果是空值的参数，将被保留。
.PP
注意如果没有发生扩展，不会进行词的拆分。
.SS Pathname Expansion
.PP
词的拆分之后，除非设置过
.B \-f
选项，
.B bash
搜索每个词，寻找字符
.BR * ,
.BR ? ,
和
.BR [ .
如果找到了其中之一，那么这个词被当作一个
.IR pattern (模式)，
被替换为匹配这个模式的文件名以字母顺序排列的列表。如果没有找到匹配的文件名，
并且 shell 禁用了
.B nullglob
选项，这个词将不发生变化。如果设置了
.B nullglob
选项并且没有找到匹配，这个词将被删除。如果启用了
.B nocaseglob
选项，匹配时将不考虑字母的大小写。当模式用作路径名扩展时，字符
.B ``.''
如果在一个名称的开始或者紧随一个斜杠之后，那么它必须被显式地匹配，除非设置了
.B dotglob
shell 选项。当匹配一个路径名时，斜杠符必须被显式地匹配。其他情况下，字符
.B ``.''
不会被特殊对待。参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
中对
.B shopt
的介绍，其中有 shell 选项
.BR nocaseglob ,
.BR nullglob ,
和
.B dotglob
的描述。
.PP
环境变量
.SM
.B GLOBIGNORE
可以用来限制匹配
.IR pattern 
的文件名集合。如果设置了
.SM
.B GLOBIGNORE，
每个匹配的文件名如果匹配
.SM
.B GLOBIGNORE
中任何一个模式的话将从匹配的列表中删除。文件名
.B ``.''
和
.B ``..''
总是被忽略，即使设置了
.SM
.B GLOBIGNORE。
但是，设置
.SM
.B GLOBIGNORE
和启用 shell 选项
.B dotglob
效果是相同的，因此所有其他以
.B ``.''
开头的文件名将被匹配。要得到原来的行为 (忽略所有以
.BR ``.'' 
开头的文件名)，可以将
.B ``.*''