title:Identification of Bot Commands by Run-Time Execution Monitoring
author:Young Hee Park and
Douglas S. Reeves
2009 Annual Computer Security Applications Conference
Identiﬁcation of Bot Commands By Run-time Execution Monitoring
Younghee Park, Douglas S. Reeves
Cyber Defense Laboratory, Computer Science Department
North Carolina State University, Raleigh, NC, USA
{ypark3, reeves}@ncsu.edu
Abstract—Botnets pose serious threats to the Internet. In
spite of substantial efforts to address the issue, botnets are
dramatically spreading. Bots in a botnet execute commands
under the control of the botnet owner or controller. A ﬁrst step
in protecting against botnets is identiﬁcation of their presence,
and activities.
In this paper, we propose a method of identifying the
high-level commands executed by bots. The method uses run-
time monitoring of bot execution to capture and analyze run-
time call behavior. We ﬁnd that bots have distinct behavior
patterns when they perform pre-programmed bot commands.
The patterns are characterized by sequences of common API
calls at regular intervals. We demonstrate that commands
aiming to achieve the same result have very similar API call
behavior in bot variants, even when they are from different
bot families. We implemented and evaluated a prototype of
our method. Run-time monitoring is accomplished by user-level
hooking. In the experiments, the proposed method successfully
identiﬁed the bot commands being executed with a success rate
of 97%. The ability of the method to identify bot commands
despite the use of execution obfuscation is also addressed.
Keywords-Intrusion detection, Malware, Botnet
I. INTRODUCTION
A botnet is a system that remotely controls malicious
programs running on compromised hosts. Botnets are now
a major source of network threats, including DDoS, spam,
identity theft, click frauds, etc. [1]–[3]. Botnets are still
rapidly proliferating, and communicate using a variety of
protocols, such as IRC, HTTP, peer-to-peer, etc. The cumu-
lative size of botnets is estimated to be in the millions of
hosts [2], [4], [5]. Due to the huge number of botnets, and
evolving botnet protocols, it appears difﬁcult to block and/or
remove all bots on the Internet. Therefore, a ﬁrst line of
defense is (at a minimum) to recognize bots and the actions
they are taking.
As described in [3], bots are typically activated by bot
commands through a communication and control channel
(C&C channel) opened by attackers (i.e. botmasters) from
remote sites. The issued bot commands may be simultane-
ously performed by a group of bots in the botnet, as they
This material is based upon work supported by the National Science
Foundation under Grant Numbers 0627505 and 0831081. Any opinions,
ﬁndings, and conclusions or recommendations expressed in this material
are those of the author(s) and do not necessarily reﬂect the views of the
National Science Foundation.
have been programmed. The study of bot behavior in re-
sponse to issued commands is important for the development
of effective countermeasures, for tracing botnet growth, and
for protecting the vulnerable infrastructure that bots target.
Identiﬁcation of the victims targeted by botnets may also be
facilitated by a thorough analysis of bot commands.
Much of the research on botnets has focused on detecting
bots and C&C channels by analysis of network trafﬁc [1],
[2], [6]–[8]. These approaches have been very successful,
but will have problems if trafﬁc is encrypted, or if the
botnet protocols are changed (e.g., using P2P protocols
instead of IRC). In contrast, several papers have focused
on analyzing bot behavior on the host [9], [10], using
such common bot characteristics as remote initiation, C&C
channel establishment, etc. However,
these papers have
only focused on bot detection, rather than on identifying
speciﬁcally the actions that the bot is taking. Moreover, after
establishment of a C&C channel, bots are often inactive until
receipt and execution of bot commands [10]. Although the
quick removal of bots and their communication channel are
important, it is also important to identify the purpose of
the bot, and the intended target, through monitoring of bot
execution.
In this paper, we propose a method for monitoring and
analyzing bot execution to identify the bot commands that
are being executed. This method, called BotTee, is designed
to recognize the characteristic behavior triggered by each
command, independent of superﬁcial differences in the syn-
tax of various bot protocols. This task is difﬁcult since bots
of different families are independently programmed, and
the creator may intentionally obfuscate command execution.
However, we demonstrate that bot commands with the same
purpose (designed to accomplish the same results) result in
run-time behavior that is highly correlated, across all types
of bots.
This similarity in run-time behavior may be due to several
reasons. First, bot software of different types may have
common origins; true (breakthrough) innovation in malware
is rare [3], [9]–[11]. Second, bots inevitably use existing
system libraries to successfully perform bot commands. The
programming effort and execution overhead to implement
these functions in the application otherwise may be too high,
and/or privileged information may not be available directly
to the application. Third, the major bot commands are well
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.37
321
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply. 
known, and their number is limited. Speciﬁcally, several
important malicious activities that many bots are used for,
such as DDoS, spam, etc., are repeatedly seen in bot variants,
regardless of their origin.
BotTee works by intercepting Windows API system calls
on the ﬂy, for a set of popular calls. As a bot executes,
the API call trace is compared to a set of call patterns,
or templates. These templates are derived from previously-
monitored execution of bot programs. Construction of the
templates, and comparison of a template with an in-progress
bot call trace, both make use of subsequence matching and
statistical correlation techniques.
In experiments, BotTee was evaluated by executing real
bot instances in a private network. The results show that
syntactically different bot commands with the same purpose
have behavior that
is highly correlated. This holds true
whether the bots are taken from the same, or different, bot
families. The results demonstrate that bot commands can be
accurately identiﬁed during execution.
The contribution of this work is the following. A tech-
nique for accurately identifying bot commands is presented.
This method requires neither analysis of network trafﬁc,
nor reverse engineering of bot protocols or languages. It
is demonstrated that bot commands with the same purpose
(either in the same, or different families) exhibit very similar
call behavior. The method requires intercepting a core set of
popular system calls commonly used by bot programs, and
has a modest performance impact on application execution.
The paper is organized as follows. Section II describes
a new method for identifying bot commands, through run-
time execution monitoring. Section III presents the results of
experimentally evaluating this method. Section IV discusses
the application of the proposed method, and section V
compares the proposed method to previous approaches.
Section VI summarizes the method.
II. THE PROPOSED METHOD
BotTee is a system that monitors program execution to
recognize bot commands. The execution of these commands
is in response to control signals sent from a remote bot
master. Monitoring involves “hooking” system API calls
which are typically invoked during bot command execution.
The steps in the proposed method are as follows (refer to
Figure 1). Firstly, a template must be created for each bot
command to be identiﬁed. This template is a pattern based
on a common subsequence of API calls, and information
about the timing of those calls. The template generator has
two components: a bot command identiﬁer, and a correlation
engine. The command identiﬁer intercepts API calls when
a command is executed. The intercepted call traces from
multiple bots are then processed by the correlation engine
to generate a semantic template for one bot command. This
process is repeated for as many different bot commands as
are desired.
General Commands
login/logout, reconnect, id
alias, action, join, part
privmsg, mode, cmdlist
about/version, disconnect
nick, rndnick, status, quit
Network Control Commands
server, netinfo,
download, update, dns
redirect, httpd/httpserver
scan, visit
Host Control Commands
remove/die, clone, open, delete
sysinfo, shutdown, listprocess
passwords, killthread, killprocess
execute, sendkey/getcdkey
keylogger, threads, opencmd
Attack Commands
synﬂood, updﬂood
httpﬂood, pingﬂood
email
Table I
CLASSIFICATION FOR BOT COMMANDS
Secondly, the derived set of templates is used to identify
the commands that are executed by a bot. A pattern matcher
recognizes a command by comparing the runtime execution
trace to the set of templates. This process uses the same
basic techniques for comparison as are used for template
construction. The following sections explain the proposed
method in more detail.
A. Bot behavior classiﬁcation through bot commands
Table I shows a variety of bot commands which have been
identiﬁed in actual botnets.1 A bot command corresponds
to a speciﬁc, programmed action to be taken by a bot
program. Based on [3], we have classiﬁed bot commands
into several groups. One group are general commands,
invoked by the attacker to manage the botnet. Examples
are obtaining a bot nickname (e.g. ‘nick’ in Table I), or
making a bot terminate operation (e.g. ‘disconnect’, ‘quit’
in Table I). A second group are host control commands.
These are used to obtain host information and/or cause some
(malicious) actions on the host. Examples are application
execution (e.g. ‘execute’), and information extortion (e.g.
‘sysinfo’). A third group are network control commands.
These are used to obtain information about the host network
(e.g. ‘netinfo’, ’scan’), and/or to control network behavior.
Examples of the latter include changing the C & C server
(e.g. ‘server’), or redirecting trafﬁc (e.g. ‘redirect’). A last
group of attack commands will launch attacks on intended
victims. Examples include denial of service, or spam.
B. Hooking API calls
BotTee employs user-level hooking to intercept call traces
on a host. Hooking is a powerful technique to understand
how an application interacts with an operating system [12].
In addition, hooking can be used to change program ex-
ecution. Hooking is useful to monitor bot behavior and
gain control over a bot running on a compromised host,
without requiring access to source code. Interception and
1A description of the function of each bot command is given in [3].
Table I includes only one command of each type; in practice, different bots
have different command syntaxes.
322
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply. 
C. Bot Command Identiﬁer
Once the selected set of the API calls are hooked, it
is necessary to decide what sequence of system calls may
correspond to a bot command. The proposed method for
identifying the start and end of execution of a bot command
in the intercepted system call trace, is as follows. Commands
are sent to the bot by the bot master, and typically generate a
response by the bot back to the master. These correspond to
the system calls recv and send with a socket descriptor.
An execution trace that is delimited by these system calls is
a candidate for identiﬁcation as a bot command.2
This initial step determines the start and end of each
execution trace that may correspond to a bot command.
Following this, each such trace must be further processed
to improve the results of bot command identiﬁcation. It was
found in practice that one bot command may repeatedly
execute the same API call many times (even hundreds of
times). For purposes of bot command identiﬁcation, it is not
useful to know the number of repetitions of a speciﬁc API
call; rather, the occurrence of a API call, and the sequence in
which different API calls occur, is more likely to be useful
for command identiﬁcation. Therefore, repeated consecutive
occurrences of the same API call in a trace are eliminated,
under control of a parameter denoted γ. In processing the
trace, if a single API call is intercepted more than γ times in
a row, only the ﬁrst γ occurrences are retained in the trace.
For example, if the 4 system calls A, B, C, and D were
intercepted in the length 14 sequence AAABCCAAAADDDA,
after removal of consecutive repetitions with γ = 2 the result
would be the length 10 sequence AABCCAADDA.
The result of this step is a set of execution traces, each
corresponding to the execution of one bot command. Such
a trace is termed a semantic unit. For instance, a semantic
unit for the ‘synﬂood’ command in Table I, after removal
of duplicate consecutive calls, is socket, TLSGetValue,
InterlockedDecrement, ioctlsocket, connect,
WaitForSingleObject, etc. These semantic units are
processed by a correlation engine to derive templates, and
to identify bot commands at runtime.
D. Correlation Engine
In this section, we discuss the correlation engine illus-
trated in Figure 1. This engine is used to create command
templates, and to match captured system call traces to these
templates. Semantic units, described in the previous section,
are input to this process.
Generating templates for bot commands makes use of
a longest common subsequence algorithm (LCS) [14], and
2The two calls, NtDeviceIoControlFile and URLDownloadToFile can
be an alternative way to notice the arrival of the commands, along with
the Winsock API calls. In our experiments, these two calls are always
followed immediately by Winsock API calls. The proposed method focuses
on identifying speciﬁc bot behaviors for bot commands by using a ﬁxed set
of user-level ComAPI only. Adding other (native) APIs can be considered
as future work if needed.
Figure 1. A system architecture for BotTee. It has two large parts: a
semantic template generator and a semantic behavior matcher for a dynamic
bot behavior identiﬁcation.
analysis of the OS API calls is unaffected by instruction-
level obfuscations of bot code, or by differences in bot
command syntax.
The majority of bots today execute on PCs running the