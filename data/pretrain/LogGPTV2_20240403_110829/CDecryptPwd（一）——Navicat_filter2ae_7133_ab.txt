    #include 
    #define BLOCK_SIZE 8
    #define KEYLENGTH 256
    void XorText(unsigned char left[],unsigned char right[],unsigned char result[],unsigned long r_length);
    unsigned long CharConvertLong(unsigned char Text[],short Len);
    void LongConvertChar(unsigned long num,unsigned char Text[],short Len);
    void Navicat_Encrypt(unsigned char PlainText[],unsigned char CipherText[]);
    void Navicat_Decrypt(unsigned char CipherText[],unsigned char PlainText[]);
该文件包含了`NavicatPart.c`与`NavicatPartMain.c`文件中要使用到的头文件；定义了两个全局符号常量`BLOCK_SIZE`和`KEYLENGTH`，分别是分组长度与最大键值长度；以及`NavicatPart.c`中的函数原型声明。
### 0x05.3 XorText() & CharConvertLong() & LongConvertChar() of
`NavicatPart.c`
`void XorText(unsigned char left[],unsigned char right[],unsigned char
result[],unsigned long
r_length)`接受4个参数：左操作字符串、右操作字符串、结果字符串、右操作字符串长度，功能是左操作字符串与右操作字符串的异或运算。之所以使用右操作字符串长度控制何时结束，是因为考虑到模式的剩余分组可能会小于分组长度(8字节)。
    void XorText(unsigned char left[],unsigned char right[],unsigned char result[],unsigned long r_length)
    {
        int i;
        for(i=0;i>`unsigned long T = CharConvertLong(Test, 4)=
0xA4379856`)
    unsigned long CharConvertLong(unsigned char Text[],short Len)
    {
        unsigned long result=0;
        short i;
        for(i=0;i>`unsigned char Test[5] = LongConvertChar(T,Test,4) =
{0xA4,0x37,0x98,0x56,''};`)
    void LongConvertChar(unsigned long num,unsigned char Text[],short Len)
    {
        short i;
        for(i=Len-1;i>=0;--i)
        {
            Text[i]=(unsigned char)(num & 0xFF);
            num >>=8;
        }
    }
### 0x05.4 Navicat_Encrypt() of `NavicatPart.c`
    void Navicat_Encrypt(unsigned char PlainText[],unsigned char CipherText[])
    {
        unsigned long l,r,TextLength,block,remain,l_temp,r_temp;
        unsigned char IV[BLOCK_SIZE] = "";
        unsigned char c_temp[BLOCK_SIZE + 1] = "";
        int i;
        BLOWFISH_CTX ctx;
        //Initialize Initial Vector
        l=0xFFFFFFFF;
        r=0xFFFFFFFF;
        Blowfish_Init(&ctx,Key,20);
        Blowfish_Encrypt(&ctx,&l,&r);
        for(i=3; i>=0; --i)
        {
            IV[i]=(unsigned char)(l & 0xFF);
            l >>=8;
            IV[i+4]=(unsigned char)(r & 0xFF);
            r >>=8;
        }
        //Encrypt PlainText
        TextLength=strlen(PlainText);
        block=TextLength/BLOCK_SIZE;
        remain=TextLength%BLOCK_SIZE;
        for(i=0;i=0; --i)
        {
            IV[i]=(unsigned char)(l & 0xFF);
            l >>=8;
            IV[i+4]=(unsigned char)(r & 0xFF);
            r >>=8;
        }
        //Decrypt CipherText
        TextLength=strlen(CipherText);
        block=TextLength/BLOCK_SIZE;
        remain=TextLength%BLOCK_SIZE;
        for(i=0;i<block;++i)
        {
            memcpy(c_temp1, CipherText + i * BLOCK_SIZE, BLOCK_SIZE);
            c_temp1[BLOCK_SIZE] = '';
            memcpy(c_temp2, CipherText + i * BLOCK_SIZE, BLOCK_SIZE);
            c_temp2[BLOCK_SIZE] = '';
            l_temp=CharConvertLong(c_temp1,4);
            r_temp=CharConvertLong(c_temp1+4,4);
            Blowfish_Decrypt(&ctx,&l_temp,&r_temp);
            LongConvertChar(l_temp,c_temp1,4);
            LongConvertChar(r_temp,c_temp1+4,4);
            XorText(IV,c_temp1,c_temp1,BLOCK_SIZE);
            memcpy(PlainText+i*BLOCK_SIZE, c_temp1, BLOCK_SIZE);
            XorText(IV,c_temp2,IV,BLOCK_SIZE);
        }
        if(remain)
        {
            l_temp=CharConvertLong(IV,4);
            r_temp=CharConvertLong(IV+4,4);
            Blowfish_Encrypt(&ctx,&l_temp,&r_temp);
            LongConvertChar(l_temp,IV,4);
            LongConvertChar(r_temp,IV+4,4);
            memcpy(c_temp1, CipherText + i * BLOCK_SIZE, remain);
            c_temp1[remain] = '';
            XorText(IV,c_temp1, c_temp1,remain);
            memcpy(PlainText + i * BLOCK_SIZE, c_temp1, remain);
        }
    }
解密过程可参照下图理解：
除了多一步密文分组的拷贝，其余都是加密过程的逆过程，不再赘述。
### 0x05.6 main() of `NavicatPartMain.c`
主程序功能：
  * 遍历注册表，路径前缀`计算机HKEY_CURRENT_USERSoftwarePremiumSoft`不变，变化的是与其拼接的字符串，可根据Navicat写入注册表时创建路径的规律来进行拼接：
`Data`与`NavicatPremium`子项均与存储数据库相关信息无关，不包含`Servers`，而存储数据库相关信息的`Navicat`与`NavicatPG`子项均包含`Servers`，所以可进行这一判断来决定是否要用`RegEnumKeyEx()`遍历`Servers`下的子项。
  * 使用`RegEnumValue()`遍历`Servers`子项中的键值对，主要是Host、UserName、Pwd、Port四项。在读取Pwd值之后传递给`Navicat_Decrypt()`进行解密。需要说明一点：在读取Port之前，读取类型要从`REG_SZ`转为`REG_DWORD`，否则读出的值无意义。
运行效果图：  
## 0x06 参考
  * [Wikipedia](https://en.wikipedia.org/wiki/Blowfish_\(cipher)
  * [圆周率小数部分](http://www.super-computing.org/pi-hexa_current.html)
  * 《图解密码技术(第三版)》
  * [how-does-navicat-encrypt-password](https://github.com/DoubleLabyrinth/how-does-navicat-encrypt-password)