title:AuDroid: Preventing Attacks on Audio Channels in Mobile Devices
author:Giuseppe Petracca and
Yuqiong Sun and
Trent Jaeger and
Ahmad Atamli
AuDroid: Preventing Attacks on Audio Channels
in Mobile Devices
Giuseppe Petracca, Yuqiong Sun, and
Trent Jaeger
Dept. of Computer Science and Engineering
The Pennsylvania State University
{gxp18, yus138, tjaeger}@cse.psu.edu
Ahmad Atamli
Dept. of Computer Science
University of Oxford
PI:EMAIL
ABSTRACT
Voice control is a popular way to operate mobile devices,
enabling users to communicate requests to their devices.
However, adversaries can leverage voice control to trick mo-
bile devices into executing commands to leak secrets or to
modify critical information. Contemporary mobile operat-
ing systems fail to prevent such attacks because they do
not control access to the speaker at all and fail to control
when untrusted apps may use the microphone, enabling au-
thorized apps to create exploitable communication channels.
In this paper, we propose a security mechanism that tracks
the creation of audio communication channels explicitly and
controls the information ﬂows over these channels to pre-
vent several types of attacks. We design and implement
AuDroid, an extension to the SELinux reference monitor in-
tegrated into the Android operating system for enforcing
lattice security policies over the dynamically changing use
of system audio resources. To enhance ﬂexibility, when in-
formation ﬂow errors are detected, the device owner, system
apps and services are given the opportunity to resolve infor-
mation ﬂow errors using known methods, enabling AuDroid
to run many conﬁgurations safely. We evaluate our approach
on 17 widely-used apps that make extensive use of the micro-
phone and speaker, ﬁnding that AuDroid prevents six types
of attack scenarios on audio channels while permitting all
17 apps to run eﬀectively. AuDroid shows that it is possible
to prevent attacks using audio channels without compro-
mising functionality or introducing signiﬁcant performance
overhead.
Categories and Subject Descriptors
D.4 [Operating Systems]; D.4.6 [Security and Protec-
tion]: Access Controls, Information Flow Controls.
Keywords
Mobile Systems Security, Authorization, Information Flow.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07-11, 2015, Los Angeles, CA, USA
c(cid:13) 2015 ACM. ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818005
1.
INTRODUCTION
Smartphones and wearable devices have changed the way
people interact with computers. Where PCs require the key-
board and mouse to communicate, smartphones and wear-
ables enable interaction using other inputs, such as voice
control. For example, voice-activated ”personal assistants”
oﬀer to help us with basic tasks in a hands-free way, includ-
ing Siri and Google Now. Other apps leverage the speaker
and microphone on such devices for other purposes, such as
voice messaging, phone call recording, and voice notes.
Unfortunately, adversaries may leverage access to the mi-
crophone or speaker to launch a variety of attacks against
apps and system services. Unauthorized voice recording has
long been known to be a serious security issue. For example,
a malicious app may try to steal secret information commu-
nicated to the smartphone [16] (e.g., passwords entered by
voice) or generated by the smartphone [17] (e.g., text con-
verted to speech) by recording such information surrepti-
tiously using the smartphone’s microphone [4]. In addition,
a malicious app may replay recorded or generated informa-
tion using the device’s speaker to gain access to other secret
information (e.g., through manufactured ”voice” commands)
or otherwise control the behavior of the device [4, 24]. Fi-
nally, even external adversaries, such as a user diﬀerent from
the device owner or in proximity mobile devices, may attack
the smartphone by submitting commands, tricking smart-
phone apps and services into releasing secret information or
modifying the device in an unauthorized way.
Researchers have explored a variety of possible solutions
to prevent these attacks, but none of them is suﬃcient to
completely prevent exploitation of mobile devices. Research-
ers have proposed modifying individual apps to prevent at-
tacks from untrusted input to the microphone, such as the
Google Voice Search app [4], but such techniques are app-
speciﬁc and lack visibility into the system necessary to de-
termine whether an attack is possible. SemaDroid [5] en-
ables users to control the quality of sensor data collected
and/or replace sensor data with mock data to prevent pri-
vacy leaks, but such countermeasures may impact the ef-
fectiveness of apps. Researchers have also enhanced smart-
phones with access control systems that enforce mandatory
access control [18, 28] (MAC), reason about trusted paths
with users [3, 6], and enable app-aware MAC [1], but these
systems do not reason about the communication channels
created by individual accesses, failing to prevent the attacks
above.
The aim of this work is to control communication chan-
nels created when apps and services use the microphone and
speaker to prevent system apps (including services) from
leaking secret information or being used as a confused deputy
[26]. In theory, these attacks can be prevented by enforcing
lattice security policies over these channels [11]. By enforc-
ing simple two-level lattices for secrecy and integrity, we can
prevent data in system apps and services from being leaked
to untrusted parties (e.g., third-party apps) and prevent sys-
tem apps and services from using data from untrusted par-
ties, respectively.
However, there are two major challenges in enforcing such
policies. First, processes may take ownership of the micro-
phone and/or speaker dynamically, creating communication
channels that may enable exploitation. We identify three
distinct types of communication channels that must be con-
trolled: (1) a channel from the device’s speaker to its micro-
phone; (2) a channel from the device’s speaker to external
parties who may be eavesdropping on the device; and (3) a
channel from external parties, who may be trying to trick
the device, to the device’s microphone. Any defense must
track the creation and deletion of such channels and rea-
son about the information ﬂows created by such channels
to prevent exploits. Second, enforcing a lattice policy may
be too strict for some apps, such as where users want to al-
low data to be captured by third-party apps. In such cases,
we take two distinct approaches, depending on whether the
channel may compromise the security of a system app/ser-
vice or the device owner. For system apps and services, we
leverage available methods to resolve information ﬂow errors
in audio channels by declassifying or endorsing unsafe com-
munications, which we collectively call (information ﬂow)
resolvers. However, the eﬀectiveness of resolvers may be
application-speciﬁc, so we propose a method for negotiating
the choice of resolvers using callbacks, motivated by the use
of callbacks to enforce access control from Android Secu-
rity Modules [1]. For users, we construct a trusted path to
the Android operating system to notify the user of unsafe
ﬂows and obtain user approval of such ﬂows, motivated by
the creation of trusted paths for individual applications in
user-driven access control [3, 6].
In this paper, we design and implement AuDroid, an ex-
tension to the SELinux reference monitor integrated into
the Android OS to enforce lattice policies over the dynami-
cally changing use of system audio resources, and enlist in-
put from system apps and services to evaluate options for
resolving unsafe communication channels. Speciﬁcally, we
have integrated AuDroid into the Android Media Server to
enable it to control access to the microphone and speaker
to enforce a simple lattice policy that aims to protect sys-
tem apps from third-party apps and external attackers. We
evaluate AuDroid on six types of attack scenarios described
in section 2.2, including both previously published and new
attacks. We evaluate AuDroid on 17 widely-used apps that
leverage audio to verify that AuDroid, when enhanced with
available resolvers, prevents exploits without impairing the
normal functionality of such system apps and services. We
ﬁnd that, as discussed in Section 6, AuDroid provides such
defense for less than 4 µs for the speaker and less than 25µs
for the microphone, even including visual notiﬁcation, lead-
ing to insigniﬁcant overhead during app usage.
In summary, we make the following contributions:
• We classify six types of attack scenarios that may lever-
age system audio resources to exploit system apps and
services or the device owner, two of which are new
Figure 1: Android OS Architecture
types of attacks we identify in this paper.
• To prevent these types of attacks, we propose Au-
Droid, an extension to the SELinux reference monitor
to enforce lattice security policies over three types of
dynamically-created, audio communication channels.
AuDroid adapts prior research that callbacks to apps
and trusted paths to leverage available methods for re-
solving information ﬂow errors, which we call resolvers,
to permit restricted use of unsafe audio channels and
prevent exploitation.
• We evaluate our approach on 17 widely-used apps that
make extensive use of the microphone and speaker,
ﬁnding that AuDroid prevents all the discussed attack
scenarios on audio channels while permitting all 17 ap-
plications to run eﬀectively.
2. PROBLEM DEFINITION
Contemporary mobile operating systems do not provide
mechanisms to manage audio streams securely. The main
reason is because accesses to microphone and speaker, by dif-
ferent processes, are not considered security-sensitive. Cur-
rently, such operating systems only control access to the
microphone, allowing authorized apps to access the micro-
phone at any time, even when a privileged app may be using
the speaker or the user may be speaking a sensitive passcode
to the device. Consequently, current mobile operating sys-
tems fail in enforcing information ﬂow control through the
microphone and speaker, resulting in putting the users’ data
conﬁdentiality and device integrity at risk.
In this paper, we focus on Android OS due to its open
source availability and its wide adoption in the mobile de-
vice market [19]. Without lack of generality, these observa-
tions could be extended to other mobile operating systems,
currently adopted by millions of users worldwide, such as
iOS and Windows Phone.
2.1 Audio Stream Management in Android OS
Figure 1 shows the architecture of the Android system
and how Android apps request access to audio devices. Both
Android system apps (distributed with the OS) and market
apps (installed by the device owner) obtain access to An-
droid system resources through requests via the SDK API
to the system services in the Android System Services layer.
In general, such system services use the Android Hardware
Abstraction Layer (HAL) to obtain control of devices from
the Linux kernel. For example, through the HAL library
the Android Media Server directly communicates with the
underlying Linux kernel to read and write Linux device (i.e.,
/dev) ﬁles. SELinux rules on the Android system are conﬁg-
ured to permit only the Media Server to access the speciﬁc
using the device’s microphone into acting as a confused
deputy [26].
• Attack Scenario 2. A malicious process uses the
device’s microphone to eavesdrop on the output from
the device’s speaker, produced by a benign process,
and record security-sensitive information.
• Attack Scenario 3. A malicious process uses the
device’s speaker to send input to external parties, such
as another mobile device or the user, to trick them into
acting as a confused deputy.
• Attack Scenario 4. In this scenario both ends are
malicious. A malicious process sends secret informa-
tion from the device’s speaker that may be received by
a malicious external party listening to the device.
• Attack Scenario 5. A malicious external party pro-
duces input, such as malicious voice commands, to
trick a benign process using the device’s microphone
into acting as a confused deputy.
• Attack Scenario 6. A malicious process uses the
device’s microphone to eavesdrop on external parties,
such as the device owner.
These six types of attack scenarios represent one eavesdrop-
ping and one confused deputy attack for each of the three
types of audio channels. Researchers have previously identi-
ﬁed how some of these attacks may be realized. Diao et al.
[4] demonstrate how a malicious app bypasses the Touch-
less Voice Authentication, a mechanism that authenticates
the user, to unlock the screen and start the Google Voice
Search (GVS) app by using voice commands (Scenario 1).
Jang et al.
[3] show how a keylogger installed on the tar-
get device eavesdrops on the keyboard inputs and steal se-
crets, such as passwords, when typed by the device owner
and spoken out by the TalkBack assistive technology [16]
(Scenario 2). Furthermore, a malicious app could use the
microphone to eavesdrop on the external party to collect
security-sensitive information, such as private conversations
and phone calls. Schlegel et al. [14] show that apps with the
RECORD_AUDIO permission can selectively extract conﬁden-
tial data (e.g., credit card numbers) and stealthily deliver
them to the adversary (Scenario 6).
Table 1: Security-sensitive Voice Command Examples
Device
S
O
d
i
o
r
d
n
A
S
O
i
n
o
z
a
m
A
o
h
c
E
Voice Command
When’s my next meeting?
Video call Jane using Hangouts
Listen to voicemail
Activate Speak Passwords in accessibility settings
Show me my flights
Send an email to Kristin, subject ..., message, ...
Open my Facebook
Call 800 600 1234
What’s going on Twitter?
Read my last email
Show me my pictures
Cancel my morning alarm for tomorrow
Alexa, buy this song
Alexa, what’s my commute?
Alexa, turn off Bedroom Switch.
Alexa, send this Voicecast on Sarah’s tablet
In addition, we show that the other three types of at-
tack scenarios listed are also possible. For example, as de-
scribed in Section 6, we developed a malicious app that
plays voice commands (such as those listed in Table 1) to
external parties, speciﬁcally other devices, such as other
smartphones, tablets, thermostats, home security systems,
or voice-controlled automobile systems (Scenario 3). We also
developed an app that stealthy eavesdrops voice and sound
Figure 2: Six diﬀerent types of attack scenarios
Linux device ﬁles for the speaker (/dev/snd/pcmC0D15p) and
the microphone (/dev/snd/pcmC0D0c). Therefore, the pro-
cess running the Media Server is the only one allowed to
directly access the microphone and speaker.
Currently, the Android system only controls apps’ ac-
cess to the microphone device, not the speaker. The Media
Server uses the Android permission mechanism to authorize
access to system resources. To access the microphone, apps
need to declare the following security permission, , in their AndroidManifest.xml ﬁle [25]. This per-
mission is validated by the Package Manager, a module of
the Android framework, both at app installation time and
each time the app requests access to the microphone. If an
app attempts to access the microphone without specifying
the permission in the manifest ﬁle, the Package Manager
throws a security exception and terminates the app execu-
tion. On the other hand, to access the speaker no speciﬁc
security permission needs to be declared by apps, so any app
can use the speaker any time it is available.
2.2 Audio Channels and Attack Scenarios
Audio channels enable one principal who is sending audio
signals to communicate with another principal who receives
these signals. Normally, apps and services use audio chan-
nels to communicate with external parties. For example,
apps and services may use the microphone to receive com-
mands from the device owner and may use the speaker to
play music or produce sounds directed to the device owner.
Given that smartphones have a microphone and a speaker
and communicate with external parties, we identify the fol-
lowing three types of audio channels that may be created:
• Channel Type 1 - from the device’s speaker to the
device’s microphone.
• Channel Type 2 - from the device’s speaker to an
external party (e.g., user or other device).
• Channel Type 3 - from an external party (e.g., user
or other device) to the device’s microphone.
Unfortunately, audio channels may also be misused to
compromise the secrecy of the device owner or trick the de-
vice into performing unauthorized operations (i.e., use the
Media Server as a confused deputy [26]). Figure 2 shows
six diﬀerent ways that audio channels may be exploited, as
detailed below1.
• Attack Scenario 1. A malicious process uses the
device’s speaker to produce input, such as malicious
voice commands, to trick a benign (victim) process
1Scenarios where other devices are the external parties can
be reduced to one of the six attack scenarios identiﬁed.
through the microphone to collect security-sensitive infor-
mation such as private conversations, successively leaked
to an adversary through the speaker as soon as the device
owner, victim of the attack, is distant from the device (Sce-
nario 4). This is essentially a Trojan horse attack from the
device. Finally, attacks due to a misplaced trust in exter-
nal party’s input are possible whenever a malicious user is
able to send malicious voice commands to system apps or
services (Scenario 5).
2.3 Challenges in Protecting Audio Channels
While researchers have identiﬁed the possibility of such
attacks, systematic defenses to prevent such attacks have
not been developed yet. We identify three challenges in pro-
tecting communications via audio channels:
• Mobile devices enable dynamic creation of audio chan-
nels that might not comply with information ﬂow re-
quirements, enabling both eavesdropping and confused
deputy attacks.
• The functional requirements of some apps may violate
information ﬂow requirements, causing errors when tra-
ditional information ﬂow control defenses are used.
• Audio channels may enable communication with ex-
ternal parties, such as other devices and users, whose
identity and intentions may not be known.
Proposed security mechanisms do not address these chal-
lenges. First, several proposed security mechanisms are app-
speciﬁc. Researchers propose removing vulnerabilities from
system apps and services, such as Google Voice Search (GVS)
[4], but there are several such system apps and services. Re-
searchers have proposed blocking access to the speaker while
a system service is actively listening for voice commands [4,
3], but this solution may impact usability (prevent playing
of ring tones or notiﬁcation sounds) and does not address
control of external parties. Researchers have proposed solu-
tions to protect secrecy of sensor information by returning
fake or fuzzed sensor data to apps [5]. While this approach
works reasonably for some sensors, such as GPS and the ac-
celerometer, it does not suﬃce for audio data as apps require
accurate audio data to perform their tasks. The Android
permission mechanism [25] and Security Enhanced Linux for
Android (SE Android) [18, 28] cannot prevent such attacks.
As discussed above, neither controls access to the speaker
at present. In addition, neither considers audio channels as
objects in need of control. As a result, a malicious app that
has been granted access to the microphone may use that
privilege whenever the microphone is available.
An interesting research proposal is to leverage app-speciﬁc
information to augment access control. For example, re-
searchers have proposed using callbacks to app-trusted mod-