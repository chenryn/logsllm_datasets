to a server with a USB interface, and communicate with the
stand-alone chips via serial communication. Thus, Arduino
helps transfer data from the stand-alone chips to the server.
We used a breadboard to arrange the accelerometer chip
and the vibrator motor as an evaluation unit. The connections
between various components on the breadboard and the
Arduino are made with jump wires. We also attached a
small piece of acrylic board under the breadboard to make
the weight of this evaluation unit comparable to that of a
smartphone. The on-board vibrator motor generated stim-
ulation to the accelerometer chip. We chose a lightweight
vibrator motor similar to the model used in a majority
of our experimental smartphones. This motor was ﬁrmly
soldered to the breadboard and connected to one of the
digital pins of the Arduino board. The only removable
component in this setup was the accelerometer chip. Because
the accelerometer is tiny and difﬁcult to operate, we procured
the chips mounted on breakout boards [25] so that we can
access the pins of the chip through the header pins soldered
with the breakout board. This setup is shown in Fig. 3.
2) Smartphone Setup: We have experimented with 25
Android phones of ﬁve different models and 2 tablets: i)
8 Nexus One; ii) 7 Samsung Galaxy Nexus; iii) 6 Samsung
Galaxy S3 iv) 2 Nexus S; v) 1 HTC Incredible Two; and vi) 1
HTC MyTouch vii) 2 Samsung Galaxy Tab 2. The sampling
mode is set to “Fastest”, and to stimulate the accelerometer,
we use internal vibration motor of the devices.
3) Data Collection Setup: Using each of the chips and
devices, we have conducted experiments in our lab to gather
sensor readings. Either the internal vibration motors or the
stand-alone motor is used to stimulate the accelerometer for
2 seconds and the accelerometer readings are recorded with
the sampling mode set to “Fastest” by default. We refer to
this 2 seconds of accelerometer data as trace.
To exclude any possibility that the ﬁngerprints may be an
outcome of a unique physical arrangement of the motor and
stand-alone chips, we collect traces in a round robin manner.
In the ﬁrst round, we collect 10 traces from each chip and
smartphone. Once 10 traces from each device are collected,
then we move to the next round and similarly collect 10
traces from each device. Thus, in total, it takes 5 rounds to
collect 50 traces from each and every device.
To obtain statistically signiﬁcant results, we evaluate our
system under each setting 10 times. Unless speciﬁed, each
time we randomly chose 15 traces out of 50 traces as our
training sample set, and used the rest as the testing sample
set. Thus, in total 3745 randomly chosen traces were used
for testing and 1605 traces were used for training each time.
B. Performance Metrics
Let k be the total number of devices or classes. Given an
accelerometer trace, AccelPrint classiﬁes it as belonging
to one of these classes. Then, based on the ground truth, for
each class i, we deﬁne T Pi as the true positives for class i,
i.e., the number of traces that are correctly classiﬁed as i.
Similarly, F Ni, and F Pi, respectively refer to the number
of traces that are wrongly rejected, and wrongly classiﬁed as
i. Now, we can deﬁne the standard multi-class classiﬁcation
metrics, precision, and recall, as follows.
precisioni =
(T Pi)
(T Pi + F Pi)
recalli =
(T Pi)
(T Pi + F Ni)
Then, we can compute the average precision and recall.
average precision = Pk
average recall = Pk
i=1 precisioni
i=1 recalli
k
k
To evaluate the overall performance of the multi-class
classiﬁcation in the presence of alien devices (untrained
devices), we use accuracy as the metric. Given that a multi-
class classiﬁer is trained by n classes and is tested by n
classes and m aliens, we deﬁne accuracy as below.
accuracy =
(Pn
i=1 T Pi +Pm
N
j=1 T Nj)
where N is the total number of testing traces, T Pi is the true
positive for class i and T Nj as the true negative for alien
class j, i.e., alien class j being rejected by the classiﬁer.
C. Overall Performance
In the ﬁrst set of experiments, we trained the system
with 15 traces and tested it with the rest 35 traces from
each of the 107 chips/phones/tablets. The resulting average
classiﬁcation score for each device is shown on a heat map
(aka. a confusion matrix) in Figure 7. In the confusion matrix
plot, the darker the shade, the higher the classiﬁcation score.
Evidently, the diagonal cells are the darkest, implying that
the traces from device i were indeed classiﬁed as class
i. While there are a few gray cells appearing outside the
diagonal cells, instances of misclassiﬁcation are rare. This
is because the classiﬁer picks the device with the maximum
score, as long as the score is greater than a predeﬁned
threshold (used for segregating alien phones).
8
r
e
b
m
u
N
e
c
v
e
D
i
l
a
u
t
c
A
 100
 80
 60
 40
 20
 0
 0
 20
 40
 60
 80
 100
Classified Device Number
Fig. 7: Overall performance: confusion matrix.
The confusion matrix contains some clusters, e.g, a clus-
ter of devices numbered from 0 to 49. Note that the device
numbers 0 to 79 represent the standalone chips whereas the
device numbers 80 to 104 map to the 25 smartphones, and
the last two devices correspond to the two tablets used in this
experiment. In particular, the devices numbered from 0 to 49
represent the standalone chips of the same brand, the same
model, and the same manufacturing company (i.e., MPU
6050). Therefore, they are more likely to be confused with
each other than another device. Still, the following results
show that a device can be identiﬁed with high precision.
Zooming into the results, we compute the precisioni
and recalli for each class i, and plot the CDF of their
distributions in Figures 8a, 8b, 9a and 9b for chips and
smartphones. Even with 5 training traces (amounting to
10 seconds of training) for both chips and smartphones,
both precision and recall are above 75% for all classes.
The tail for both precision and recall gets shortened as the
training size increases to 10, with none of the classes having
precision below 85%. This is true for the smartphones as
well as the MEMS chips. With training size 15, the worst
case precision improves to 87%, while the average precision
and recall are both above 99%. Since 30 seconds of training
traces are not unreasonable (a malware in a phone could
silently collect data from time to time and accumulate up to
30 second traces when an incoming call rings the phone),
we set the number of training traces to 15 in the rest of the
evaluation.
Next, we consider several factors that could affect our
ability to model ﬁngerprints and classify devices. The rate at
which an app samples the accelerometer readings depends on
the conﬁgured mode as well as the CPU load. The surface on
which the phone is placed may inﬂuence the vibration sensed
by the accelerometer. In view of operations in uncontrolled
environments, we study the impact of these factors on the
ﬁngerprint classiﬁcation performance.
 1
 0.8
 0.6
F
D
C
 0.4
 0.2
Training Traces: 5
Training Traces: 10
Training Traces: 15
 1
 0.8
 0.6
F
D
C
 0.4
 0.2
Training Traces: 5
Training Traces: 10
Training Traces: 15
 0
 0.75
 0.8
 0.85
 0.9
Precision
 0.95
 1
 0
 0.75
 0.8
 0.85
 0.9
Precision
 0.95
 1
 1
 0.8
 0.6
F
D
C
 0.4
 0.2
Training Traces: 5
Training Traces: 10
Training Traces: 15
 1
 0.8
 0.6
F
D
C
 0.4
 0.2
Training Traces: 5
Training Traces: 10
Training Traces: 15
 0
 0.75
 0.8
 0.85
 0.9
Recall
 0.95
 1
 0
 0.75
 0.8
 0.85
 0.9
Recall
 0.95
 1
Fig. 8: Overall performance for chips: (a) precision; (b)
recall.
Fig. 9: Overall performance for smartphones: (a) precision;
(b) recall.
D. Signiﬁcance of Sampling Rate
The Android OS allows four different sampling rates for
the accelerometer. These with decreasing rates are: i) Fastest;
ii) Game; iii) UI; and iv) Normal. The sampling rate of the
Fastest mode on our devices varies from around 100 Hz to
20 Hz, depending upon the hardware/software speciﬁcation
and the activity level. However, the rate of the Normal mode
remains the same for all the devices (around 4 Hz).
To study the effect of sampling rates on ﬁngerprinting,
we conduct experiments with each of the four modes. The
results of these experiments are shown in Fig. 10, from
which we observed that the faster the sampling rate is, the
higher the precision and recall are. Nevertheless, even at the
slowest rate (i.e., the Normal mode at 4 Hz), precision and
recall are both above 80%. This indicates that with only
4 accelerometer samples per second, different devices can
be distinguished with reasonable amount of precision. Of
course, a faster sampling rate does improve the likelihood
to distinguish devices, and subtle differences between ac-
celerometers can be discerned with a higher precision.
E. Impact of CPU Load
To understand the impact of CPU load on the ﬁngerprints
of devices, we create a background process using Android
l
l
/
a
c
e
R
n
o
s
c
e
r
P
i
i
 1
 0.8
 0.6
 0.4
 0.2
 0
Precision
Recall
Normal
UI
Sampling Mode
Game
Fastest
Fig. 10: Performance with different sampling rates
IntentService class to control the CPU load and measure its
effect on AccelPrint. The background process works in
a duty cycle and alternates between awaken and sleeping
status. For the ease of discussion, we deﬁne the percentage
of time that the background service remains awake as “load
level”. To measure the impact of load, we ﬁrst train our
system with 0 load level. Then we test it with traces collected
at four different load levels (0%, 20%, 40% and 60%). Sim-
ilarly, we trained the classiﬁer with traces collected at 20%,
40% and 60% load levels, respectively, and tested on the rest
of load levels. We depicted the precision of AccelPrint
in all training-testing scenarios as a heat diagram (shown
9
in Figure 11). In the heat diagram, the darker the region
is, the higher the precision is. We observed that when we
trained and tested the system with the traces collected at
the same CPU load (diagonal region), we achieve a high
precision, whereas as we increased the load level difference
between train and test cases, the precision reduced. This is
because at higher loads, some of the accelerometer readings
get skipped, yielding different set of features. Nevertheless,
the precision is above 80% when the load difference is within
40%. Overall, these results show that when the difference
of load levels at the time of training and testing is similar,
AccelPrint can distinguish devices with a high precision.
That is, modest load difference does not signiﬁcantly affect
the performance of AccelPrint.
without cases and then the testing is done with the phones
with cases, and vice versa, the precision and recall is below
80%. Thus, a phone’s case does inﬂuence its accelerometer’s
response to vibration and change the ﬁngerprints of the
phone. However, when the system is trained and tested
on traces that were collected on the phones with a case,
AccelPrint’s performance is not affected, which means
having the case itself did not affect the classiﬁcation of a
phone. Furthermore, when the system is trained on a mix
of traces that were collected on phones with and without
cases, AccelPrint can classiﬁed all phones with high
precision and recall. Considering that people do not change
their phone’s case often, the ﬁngerprint of its accelerometer
remains the same and can be utilized to identify the phone.
0.7448!
0.8017!
0.8498!
0.9498!
G. Impact of Surface
0.7951!
0.8574!
0.9470!
0.8702!
0.8600!
0.9608!
0.8511!
0.8101!
0.9500!
0.8617!
0.8071!
0.7331!
Fig. 11: Precision with varying CPU loads
F.
Impact of Smartphone Casing
People typically use cases for phones and hence it is
pertinent to understand how a smartphone’s case affects its
accelerometer’s response to vibration. Commonly used cases
include two types: the hard covers made of plastic and the
soft covers made of rubber/leather. We conducted experi-
ments using both types of covers and collected accelerometer
readings of phones with and without
those covers. The
results of the experiments are shown in Figure 12.
 1
 0.8
l
l
Precision
Recall
/
a
c
e
R