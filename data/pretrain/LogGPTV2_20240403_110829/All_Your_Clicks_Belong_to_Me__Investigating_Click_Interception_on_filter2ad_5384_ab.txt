28th USENIX Security Symposium    943
user clicks, we do not consider them as malicious, because
they have the full privilege to control their own applications.
Nevertheless, OBSERVER can comprehensively collect all
data related to click interception.
3.2 Recording Accesses to HTML Anchor El-
ements
Modifying a hyperlink in a web page is one of the most
explicit methods to intercept and navigate a user click into a
different URL rather than the original one. OBSERVER aims
to record any accesses to all hyperlinks in a web page to
detect any such attempts. In HTML, a hyperlink is defined
with an anchor element (i.e., an  tag), and its href attribute
specifies the associated destination URL. Thus, by monitoring
and recording which script modifies the href attribute of an
 tag, OBSERVER is able to recognize a script’s potential
click interception.
JavaScript can modify the href attribute through DOM
APIs in several ways. We use the keyword a to represent an
HTML Anchor Element object and the keyword url to repre-
sent a URL string in the following examples. First, a script can
directly assign a new value to the attribute as in a.href = url
;, or in a.attributes["href"] = url;. Second, it may also
call the setAttribute() API as in a.setAttribute("href"
, url) to perform a similar operation. Note that developers
may leverage APIs defined in some third-party JavaScript
libraries, e.g., jQuery, to change the attribute. OBSERVER can
cover all these wrapper libraries because they would still need
to call the above APIs defined in the DOM standard, which is
implemented by all browsers to ensure cross-browser compat-
ibility.
OBSERVER hooks all these DOM APIs to monitor modifi-
cations to the href attribute of  tags in the DOM. Specifi-
cally, it intercepts any call to such an API. Once intercepted,
it inspects the current JavaScript call stack to reason about
the origin of API invocation. It locates the bottom JavaScript
frame in the call stack to find the JavaScript function that
initiates the API call.
Script Identification. To attribute the API access to a spe-
cific script, we need to obtain the identity of the accessing
JavaScript code. OBSERVER assigns a scriptID to each
script object to uniquely identify it in the JavaScript run-
time. In HTML, JavaScript code is usually enclosed between
 tags as an inline script, or stored in
an external JavaScript file and loaded with  tags as
an external script. Each  tag is compiled into an in-
dividual JavaScript object in the JavaScript engine. There
are also other types of inline JavaScript code. For example,
JavaScript code can be written as the on-event listener at-
tributes of HTML elements. This kind of inline scripts that
are not wrapped within a  tag are also compiled into
separate JavaScript objects, which are identified by the unique
scriptIDs.
OBSERVER associates the scriptID of a script with its
sourceURL, which is the URL the browser uses to load the
remote JavaScript code. The sourceURL of an inline script,
however, is empty. Instead, we use the URL of the embedding
frame, i.e., the URL that the browser uses to load the HTML
document into the embedding frame, as the sourceURL of
static inline scripts. However, inline scripts can also be created
on-the-fly by JavaScript. We will discuss how we attribute
a DOM access to a dynamic inline script in §3.3.2. Besides
the scriptID, we also record the row number, column number,
and name of the function in the accessing script in a shadow
data store associated with the element. It is worth noting that
JavaScript code cannot modify the shadow data store because
it is a C++ data structure that is not writable on the JavaScript
side.
3.3 Tracking Dynamic Element Creation
Dynamically creating a new hyperlink in a web page is an-
other method to intercept a user click. In short, OBSERVER
considers direct and indirect approaches that a script can ex-
ploit to achieve this goal: 1) creating a hyperlink and 2) creat-
ing a script that creates a hyperlink.
3.3.1 HTML Anchor Elements
JavaScript code can dynamically create any HTML elements,
including an anchor element, in a web page. Specifically,
JavaScript can insert a new  tag into the DOM tree of a
web page through APIs such as document.write("...") and document.createElement("a"). A script can even
replace the entire element with a new element by changing the
outerHTML attribute of it, e.g., a.outerHTML = '...'. These techniques could be exploited
by scripts as another way to intercept user clicks instead of
modifying existing hyperlinks. Thus, OBSERVER needs to
track the dynamic creation of  tags in the browser.
OBSERVER attaches a shadow initiator attribute to each
anchor element in the DOM tree to represent the creator
of the object. The initiator attribute is the scriptID of the
script that creates the corresponding element. OBSERVER as-
signs a special initiator value—0, which represents the owner
of a document—to all static elements that are built by the
browser parser. The static  tags are the first-party hyper-
links. OBSERVER intercepts all the element creation APIs
in the web browser to find the initiating JavaScript frame in
the call stack. The scriptID of the initiating script is used as
the initiator of the dynamically created elements (hyperlinks).
OBSERVER would also record any accesses to the href at-
tribute of the dynamically created anchor elements.
3.3.2
JavaScript
JavaScript code can also be dynamically generated in web ap-
plications, just like HTML elements. Specifically, as one class
944    28th USENIX Security Symposium
USENIX Association
of HTML elements, new  elements can be dynami-
cally created by JavaScript using the same APIs for creating
elements. OBSERVER aims to assign unique identifies to all
of such dynamically created scripts. If an external script file is
loaded from a remote host into a dynamically inserted 
element, getting its identity is not different from getting the
sourceURL of one static  element. Some strings can
also be dynamically parsed as inline JavaScript code if they
are defined as inline event handlers or passed in the call of
APIs like window.eval("...").
However, it is not straightforward to tell the identity of a
dynamically generated inline script because its sourceURL
is blank. To overcome this difficulty, OBSERVER hooks the
APIs that are used to generate dynamic scripts. It saves the
sourceURL of the JavaScript code that calls the script gen-
eration API as the sourceURL of the newly generated inline
script. To distinguish the dynamically generated script, or the
child script (either an inline script or an external script), from
the generating script, or the parent script (the one that gener-
ates the script), OBSERVER records the scriptID of the parent
script as the parentScriptID attribute of the child script.
The parentScriptID of all scripts that are initially statically
embedded by the document owner is set to 0. This allows us
to construct a script dependency graph in the analysis.
OBSERVER also logs all accesses to any inline on-event
handlers of any DOM object as it does with the href attribute
of  elements. It finds the last script that sets an inline on-
event handler as its parent script and derives the sourceURL
from it. If no such an entry can be found, OBSERVER sets the
script that creates the receiver object as its parent script.
3.4 Monitoring JavaScript Event Listeners
Instead of modifying or creating hyperlinks, a script can reg-
ister an event listener or handler to an HTML element. The
event handler is asynchronously executed whenever there is
a user click on the element. In particular, a script may open
an arbitrary URL in a new browser window/tab, or send an
HTTP request in the background, when a user clicks any el-
ement it listens for. Therefore, OBSERVER aims to monitor
all event listeners registered by JavaScript code in a page to
identify whether they will navigate a user to a different URL
according to a user click.
OBSERVER first monitors event listener registration by
hooking the addEventListener() API and monitoring ac-
cesses to the on-event listeners, to identify the scripts that
are interested in user interactions. It then intercepts any click-
related user events (e.g., click and mousedown) when they
are fired in the web browser and detects the event target el-
ement in the DOM tree. Since a script may not necessarily
initiate a page navigation in its event handler (e.g., an analytic
script), OBSERVER filters those scripts by hooking several
APIs that can be used for starting a navigation, e.g., window.
open('...'), window.location = '...';, etc. OBSERVER
detects the bottom frame in the JavaScript call stack and fur-
ther constructs and logs the navigation URL in these APIs in
the shadow data store of the target element.
One challenge we met in our design is that one event
handler can be activated multiple times. In the DOM, the
events are propagated in three phases: capturing, target, and
bubbling. For example, in the capturing phase, an event
is propagated from the root node in the DOM tree—the
 node, then through any intermediate parent nodes,
before finally reaching the target node. An event handler
registered in the capturing phase at the  tag will al-
ways be triggered whenever any of its child elements is
clicked1. To avoid activating such event listeners multiple
times, OBSERVER would skip calling an event listener at a
node if the Event.currentTarget object (i.e., the current
node) is different from the Event.target object in event
propagation. We further set a flag in OBSERVER to abort all
page navigations, including those caused by clicking the 
tags, after the navigation URLs are saved in the logs. This
enables us to efficiently interact with all elements in a web
page without really visiting the linked URLs.
Implementation
3.5
We implement a prototype of OBSERVER in the Chromium
browser (version 64.0.3282.186). We will release our pro-
totype implementation as an open source software. We im-
plement OBSERVER in a full-fledged browser to escape any
artificial result that might be caused by using a simpler and
uncommon user agent. We add several custom attributes (e.g.,
initiator, accessLog, scriptID, parentScriptID, sourceURL)
to the Node2 objects to save the monitoring data. All these
custom attributes can be read but not written by JavaScript
for further analysis. For performance concerns, we imple-
ment a lazy update mechanism for setting the above attributes.
The values of these attributes are kept in the hidden attribute
members of the modified C++ classes. They are updated in
the DOM tree only when the attributes are first accessed by
JavaScript.
We hook the above DOM APIs by inserting custom mon-
itoring code in the C++ implementation of the V8 binding
layer between the V8 JavaScript engine and the DOM imple-
mentation in WebKit. The custom monitoring code identifies
the JavaScript caller by fetching the scriptID of the bottom
frame in the JavaScript call stack. It appends the logs of ac-
cesses to the href attribute and the inline on-event handlers to
the hidden accessLog attribute of the corresponding DOM
object. The code sets the initiator attribute of an anchor
element when it is created by either JavaScript code or the
browser parser. Furthermore, the sourceURL and parentScrip-
1An event handler registered in the bubbling phase at a parent node may
not be activated because the event propagation can be stopped by some other
event handler registered at its child node.
2Node is the base class of HTML elements in WebKit.
USENIX Association
28th USENIX Security Symposium    945
tID of all scripts are stored with a  object. We further
store the scriptID in the sourceURL dictionary at the global
Document object.
The prototype of OBSERVER can comprehensively log
all click-interception-related events. In the browser, a click-
driven navigation can be started by the built-in default event
handler of anchor elements (hyperlinks) and the developer-
defined event handlers, which we have introduced in §3.2
and §3.4. OBSERVER ensures complete mediation of element
accesses and event handler registrations in the C++ imple-
mentation of the corresponding DOM APIs (including the
built-in default event handler), which cannot be bypassed by
any JavaScript code. In other words, the browser must go
through the underlying C++ APIs and our monitoring code
when JavaScript code accesses any hyperlink or registers an
EventListener to any HTML element.
4 Methodology
In order to study the click interception problems in the wild,
we perform a large-scale data crawling of the Alexa top 250K
websites. We describe our data collection method in §4.1, how
we determine the owner and privilege of JavaScript code as
well as HTML elements in §4.2, and finally how we detect
three classes of click interception in §4.3.
4.1 Data Collection
We use the OBSERVER prototype to collect data for investi-
gating the click interception problem. In particular, we aim to
identify all hyperlinks and scripts that react on user clicks, and
the destination URLs that the browser would visit after the
clicks. We leverage the Selenium WebDriver Python binding
to automatically drive OBSERVER and interact with the web
page it renders. To this end, we run our analysis framework on
a 64 core CPU Linux server and collect data from the Alexa
top 250K websites.
We collect data in two phases for each web page: 1) collect-
ing default data right after page rendering; and 2) collecting
reaction data by interacting with a rendered page. In each
page navigation, we first asks OBSERVER to wait for a page
to be completely rendered by the browser for up to 45 sec-
onds. After that, we insert a script into the page to traverse
the DOM tree in pre-order to collect all the data OBSERVER
has logged with each element. In addition, we log for each el-
ement several display properties (e.g., width, height, position,
opacity, etc.) to study additional tricks that may be used to
intercept user clicks (e.g., some third-party contents overlap
with or appear similar to first-party contents). We then save a
snapshot of the current DOM tree into an external HTML file
as well as a full-page screenshot for further analysis.
Next, we interact with a rendered page to collect data about
how the page reacts to our clicks, such as navigation and DOM
modification. We disable the navigation flag in OBSERVER
to deactivate real navigations that may be caused by event
handlers or hyperlinks. We then automatically click all ele-
ments in the DOM tree through Selenium to trigger the click
event listeners and hyperlink navigations to collect navigation
logs. For each navigation triggered by a click, we log the in-
formation regarding the navigation URL, the clicked element,
and, if exist, the corresponding event listeners and scripts that
initiate the navigation. In addition, we traverse the DOM tree
again, as we do in the first phase, to identify whether scripts
update the DOM elements due to user clicks.
4.2 Third-party Content Detection
In this section, we explain our techniques to distinguish first-
party scripts/contents from third-party scripts/contents, which
is necessary to detect click interceptions driven by third-party
scripts. A naïve technique that merely relies on the exact
origin of scripts is not enough because a website frequently
loads its own scripts from its subdomains, its different do-
mains, and domains operated by others such as content deliv-
ery network (CDN) services. For example, the main page of
https://www.google.com/ includes scripts from its subdomain
apis.google.com and its CDN domain gstatic.com. If we use
only origin information, we may misidentify these scripts
as third-party scripts. We aim to solve this problem using
domain substring matching and DNS record matching.
Domain substring matching is a heuristic technique to infer
that a remote script is a first-party script if the remote script’s
domain name is similar to the current page’s domain name.
It first checks whether the main domain names of a remote
script and the current page are the same while excluding
domain suffixes. For example, a script loaded from https://
apis.google.com/ on https://www.google.co.jp/ is determined as a
first-party script because its main domain name excluding the
suffix com is google, which is identical to that of the current
page excluding the suffix co.jp. Second, it tests whether the
proper subdomain name of a remote script consists of the
main domain name of the current page without suffixes, to
come up with CDN practices that maintain custom subdomain
names for individual websites. For example, a script loaded
from https://static-global-s-msn-com.akamaized.net/ on https://
www.msn.com/ are inferred as a first-party script because the
proper subdomain name static-global-s-msn-com contains the
main domain name msn. We do realize that our technique has
limitations, which we will discuss in §6.
DNS record matching leverages several DNS records to
decide whether two distinct domains are operated by the same
organization. Specifically, we inspect the DNS SOA records
[36] and the DNS NS records [34] of the two hostnames
(domain names). An SOA record includes the email address
used to register the domain. Many organizations would use the
same email address to register multiple domains. For instance,
the SOA email addresses of google.com and gstatic.com are both