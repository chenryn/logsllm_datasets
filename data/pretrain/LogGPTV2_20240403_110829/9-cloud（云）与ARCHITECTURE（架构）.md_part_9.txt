(1)、连接插件connection plugins：负责和被监控端实现通信；
(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；
(3)、各种模块核心模块、command模块、自定义模块；
(4)、借助于插件完成记录日志邮件等功能；
(5)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。
ansible是一款IT自动化和DevOps软件,柔和很多老运维工具的优点,实现了批量操作系统配置,批量程序部署,批量运行命令等功能
ansible可以实现:
自动化部署APP
自动化管理配置项
自动化持续交付
自动化(AWS)云服务管理
ansible优点
只需要ssh和python即可使用
无客户端
功能强大,上手容易,门槛低
基于python开发,做二次开发更容易
使用公司多,社区活跃
ansible特性
模块化设计,调用特定的模块完成特定任务
基于python语言实现
> paramiko
>
> PyYAML(半结构化语言)
>
> Jinja2
其模块支持json 等标准输出格式,可以采用任何编程语言重写
部署简单
主从模式工作
支持自定义模块
支持playbook
易于使用
支持多层部署
支持异构IT环境
ansible 三座大山:json PyYAML(半结构化语言) 看懂英语
ansible两个集合:主机集合 命令集合 所有主机执行相同命令,
共创建6台机器分别是:
192.168.1.10 ansible
192.168.1.11 web1
192.168.1.12 web2
192.168.1.21 db1
192.168.1.22 db2
192.168.1.33 cache
配置IP地址模板
DEVICE=\"eth0\"
ONBOOT=\"yes\"
TYPE=\"Ethernet\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.1.10\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.1.254\"
# 创建yum源并安装ansible
\[root@ansible \~\]# ls #解压后
ansible_soft ansible_soft.tar.xz eip
\[root@ansible \~\]# cd ansible_soft
\[root@ansible ansible_soft\]# createrepo . #创建yum源
\[root@ansible ansible_soft\]# ls
ansible-2.4.2.0-2.el7.noarch.rpm python-passlib-1.6.5-2.el7.noarch.rpm
python2-jmespath-0.9.0-3.el7.noarch.rpm repodata
python-httplib2-0.9.2-1.el7.noarch.rpm sshpass-1.06-2.el7.x86_64.rpm
python-paramiko-2.1.1-4.el7.noarch.rpm
创建后源之后,在本地挂载这个源
\[ansible\]
name=ansible
baseurl=file:///ansible/ansible_soft
enabled=1
gpgcheck=0
\[root@room9pc01 ansible_soft\]# yum install ansible #安装ansible
\[root@room9pc01 ansible_soft\]# ansible \--version #查看版本
ansible 2.4.2.0
创建yum源扩展:
\[root@ansible ansible_soft\]# createrepo \--update . #放入了新包,更新包
# 主机定义与分组
![LINUXNSD_V01ARCHITECTUREDAY01_021](media/image89.png){width="5.373611111111111in"
height="2.657638888888889in"}
![LINUXNSD_V01ARCHITECTUREDAY01_022](media/image90.png){width="6.081944444444445in"
height="3.475in"}
## 定义ansible.cfg配置文件
\[root@ansible ansible\]# vim /etc/ansible/ansible.cfg
14 inventory = /etc/ansible/hosts
61 host_key_checking = False
## 分组
\[root@ansible \~\]# cd /etc/ansible/
\[root@ansible ansible\]# ls
ansible.cfg hosts roles
\[root@ansible ansible\]# vim hosts
\[web\] #格式1 web为分组名
web1
web2
\[db\] #格式2 表示有db1 db2
db\[1:2\]
\[other\]
cache
\[root@ansible ansible\]# ansible web1 \--list-hosts #列出要执行的主机
hosts (1):
web1
\[root@ansible ansible\]# ansible web1,db2 \--list-hosts
#列出要执行的主机
hosts (2):
web1
db2
\[root@ansible ansible\]# ansible all \--list-hosts #列出要执行的主机
hosts (5):
web1
web2
cache
db1
db2
## 扩展参数测试:
**修改db组所有主机的ssh端口为222**
\[root@db1 \~\]# vim /etc/ssh/sshd_config
Port 222
\[root@db1 \~\]# systemctl restart sshd
修改端口
\[root@ansible ansible\]# ansible db -m ping -k #此时连接连不上
SSH password:
db2 \| UNREACHABLE! =\> {
\"changed\": false,
\"msg\": \"Failed to connect to the host via ssh: ssh: connect to host
db2 port 22: Connection refused\\r\\n\",
\"unreachable\": true
}
db1 \| UNREACHABLE! =\> {
\"changed\": false,
\"msg\": \"Failed to connect to the host via ssh: ssh: connect to host
db1 port 22: Connection refused\\r\\n\",
\"unreachable\": true
}
\[root@ansible ansible\]# ls
ansible.cfg hosts roles
\[root@ansible ansible\]# vim hosts
\[db\]
db\[1:2\]
\[db:vars\]
ansible_ssh_port=222 #将db组的ssh连接端口改为222
\[root@ansible ansible\]# ansible db -m ping -k #连接成功,
SSH password:
db2 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
db1 \| SUCCESS =\> {
\"changed\": false,
\"ping\": \"pong\"
}
**将web组和db组两个再组合成一个新组:app**
\[app:children\]
web
db
\[root@ansible ansible\]# ansible app \--list
#查看app组合就可看见两个组的所有主机
hosts (4):
web1
web2
db1
db2
## inventory常用参数说明
定义ansible.cfg配置文件
\[root@ansible ansible\]# vim /etc/ansible/ansible.cfg
14 inventory = /etc/ansible/hosts
61 host_key_checking = False
inventory 定义的主机文件,里面可以写很多参数,例如此案例的hosts文件
ansible_ssh_host=\*\*\*
说明:将要连接的远程主机名与你想要设定的主机别名不同,可以通过此变量设置
ansible_ssh_port=\*\*\*
说明:ssh端口号.如果不是默认端口号22,通过此变量设置,例如上面案例db组的主机已经全部改成了222,所以在这添加ansible_ssh_port=222
ansible_ssh_user=\*\*\*
说明:默认的ssh用户名
ansible_ssh_pass
说明:ssh密码(这种方式并不安全,强烈建议用\--ask-pass 或者 ssh秘钥)
ssh 免密登录()
\[root@ansible ansible\]# ssh-keygen
\[root@ansible ansible\]# ssh-copy-id 192.168.1.111
详情可参考本文后面的:批量部署证书文件
ansible_sudo_pass
sudo密码
\...还有未写完,待续补充
# 自定义配置文件和主机组
新建一个目录,在这个目录里面创建ansible.cfg配置文件和myhost(主机组文件)
\[root@ansible \~\]# cd /var/
\[root@ansible var\]# mkdir ooxx
\[root@ansible var\]# cd ooxx
\[root@ansible ooxx\]# vim ansible.cfg
\[defaults\]
inventory = myhosts #定义托管主机地址配置文件为当前目录下的myhosts文件
host_key_checking = False
#新建的ansible.cfg文件只需这三行.inventory 定义托管主机地址配置文件
\[root@ansible ooxx\]# vim myhosts #在myhosts文件中添加主机组
\[web\] #格式1
web1
web2
\[db\] #格式2 表示有db1 db2
db\[1:2\]
\[other\]
cache
只能在进入ooxx目录ansible.cfg 和 myhost 才生效.
# 动态主机
json
一种基于文本独立于语言的轻量级数据交换格式
# ansible命令基础
![LINUXNSD_V01ARCHITECTUREDAY01_037](media/image91.png){width="7.264583333333333in"
height="4.3125in"}
列出要执行的主机
ansible all \--list-host
批量检测主机
ansible all -m ping
## 批量执行命令
ansible all -m command -a 'id' -k
\[root@ansible ansible\]# ansible all -m command -a \'id\' -k
SSH password:
cache \| SUCCESS \| rc=0 \>\>
uid=0(root) gid=0(root) 组=0(root)
web1 \| SUCCESS \| rc=0 \>\>
uid=0(root) gid=0(root) 组=0(root)
db2 \| SUCCESS \| rc=0 \>\>
uid=0(root) gid=0(root) 组=0(root)
db1 \| SUCCESS \| rc=0 \>\>
uid=0(root) gid=0(root) 组=0(root)
web2 \| SUCCESS \| rc=0 \>\>
uid=0(root) gid=0(root) 组=0(root)
-m 模块名称 -a 模块参数
\[root@ansible ansible\]# echo \${HOSTNAME}
ansible
\[root@ansible ansible\]# ansible cache -m command -a \"echo
\${HOSTNAME}\" -k
SSH password:
cache \| SUCCESS \| rc=0 \>\>
ansible #输出的是ansible
\[root@ansible ansible\]# ansible cache -m command -a \'echo
\${HOSTNAME}\' -k
SSH password:
cache \| SUCCESS \| rc=0 \>\>
\${HOSTNAME} #输出的是\${HOSTNAME}
\[root@ansible ansible\]# ansible cache -m command -a \"echo
\${HOSTNAME}\" -k
远程收到命令是:echo ansible
\[root@ansible ansible\]# ansible cache -m command -a 'echo
\${HOSTNAME}' -k
远程收到的命令是:echo \${HOSTNAME}
改成shell即解决
\[root@ansible ansible\]# ansible cache -m shell -a \'echo
\${HOSTNAME}\' -k
SSH password:
cache \| SUCCESS \| rc=0 \>\>
cache33
## 批量部署证书文件
\[root@ansible ansible\]# ssh-keygen -t rsa -b 2048 -N \'\'
#可用另一种方式产生密钥对文件
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:cMsmcCxyIVna/I4sb4eQmX3J5HkoSFvCLFnLpOzQk/A root@ansible
The key\'s randomart image is:
+\-\--\[RSA 2048\]\-\-\--+
\| .oo \|
\|. += o \|
\|.%oo\* + . \|
\|=.Eo.=.+ . \|
\|oo @ +o+S \|
\| .B.ooBo. \|
\| ..o+.. \|
\| oo . \|
\| \... \|
+\-\-\--\[SHA256\]\-\-\-\--+
\[root@ansible ansible\]# ls /root/.ssh/
id_rsa id_rsa.pub known_hosts
\[root@ansible ansible\]# ansible all -m authorized_key -a \"user=root
exclusive=true manage_dir=true key=\'\$(\< /root/.ssh/id_rsa.pub)\'\" -k
#传送公钥
SSH password:
\.....
# ansible 模块
大约有1300个
![LINUXNSD_V01ARCHITECTUREDAY01_043](media/image92.png){width="7.264583333333333in"
height="4.35in"}
## command模块
![LINUXNSD_V01ARCHITECTUREDAY01_045](media/image93.png){width="7.264583333333333in"
height="4.031944444444444in"}
command模块为默认模块,但是很多缺陷,基本不用
## 使用ping模块
\[root@room9pc01 \]# ansible all -m ping
## 使用shell模块
通过/bin/sh 进行执行命令.可以执行任意命令
在web1 db2两主机上添加用户nb 密码为123,要求第一次登录必须修改密码