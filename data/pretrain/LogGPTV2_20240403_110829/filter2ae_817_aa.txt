作者：binjo
CVE-2017-11826是360捕获的一个在野0day，当时的announcement信息较少，随着研究人员在VirusTotal之类平台发现真实样本后，陆续有分析文章面世，然而对于漏洞本身似乎并没有文章进行深入分析。遂成此文，记录及分享之。
笔者的分析平台基于Windows 7 + Office 2010。笔者假设读者已经阅读过其它分析文章，对该漏洞样本有个大致了解。
#### Crash现场
真实样本中内嵌了两个docx，一个负责spray
heap，一个负责触发漏洞，为了方便调试，我们可以利用oletools工具，先dump出来再单独加载、调试。dump的文件包含OLE头部，使用二进制编辑软件如010Editor去除。
打开该docx文件后，Office崩溃场景如下:
    (97c.438): Access violation - code c0000005 (!!! second chance !!!)
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Program Files\Microsoft Office\Office14\wwlib.dll -    eax=088888ec ebx=00000000 ecx=03d50f00 edx=00000004 esi=012b42b0 edi=0128c1dc
    eip=5b38962a esp=002f3134 ebp=002f319c iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202
    wwlib!DllGetClassObject+0xf2e3a:
    5b38962a 8b08            mov     ecx,dword ptr [eax]  ds:0023:088888ec=????????
引用寄存器eax时产生异常，查看该语句上下文，可以发现0x088888ec从某个对象+44h处取得，而设置其值就在上面不远处。
    5b38960b 8b06            mov     eax,dword ptr [esi]
    5b38960d 8b10            mov     edx,dword ptr [eax]
    5b38960f 4a              dec     edx
    5b389610 4a              dec     edx
    5b389611 8bce            mov     ecx,esi
    5b389613 e8ee70d4ff      call    wwlib!DllMain+0x3b15 (5b0d0706) // 关键call
    5b389618 8b4044          mov     eax,dword ptr [eax+44h]
    5b38961b 8b4044          mov     eax,dword ptr [eax+44h]
    5b38961e 8b4f44          mov     ecx,dword ptr [edi+44h]
    5b389621 894144          mov     dword ptr [ecx+44h],eax        // [[edi+44h]+44h] = [[eax+44h]+44h]
    5b389624 8b4744          mov     eax,dword ptr [edi+44h]
    5b389627 8b4044          mov     eax,dword ptr [eax+44h]        // eax = [[edi+44h]+44h]
    5b38962a 8b08            mov     ecx,dword ptr [eax]  ds:0023:088888ec=????????
    5b38962c 50              push    eax
    5b38962d ff5104          call    dword ptr [ecx+4]              // 飞向光明之巅！
5b389613(wwlib!DllGetClassObject+0xf2e23)处的call
wwlib!DllMain+0x3b15就是关键，其取得的某个对象+44h处应该是个指针，指针指向的对象+44h处便是0x088888ec了。
#### 倒撵猴
为了验证，我们先attach windbg到winword.exe，对其设断，然后再打开触发文件。
    (8fc.aa4): Break instruction exception - code 80000003 (first chance)
    eax=7ffaf000 ebx=00000000 ecx=00000000 edx=7725ec4b esi=00000000 edi=00000000
    eip=771f3c8c esp=01a9fe30 ebp=01a9fe5c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!DbgBreakPoint:
    771f3c8c cc              int     3
    0:012> bp wwlib!DllGetClassObject+0xf2e23
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Program Files\Microsoft Office\Office14\wwlib.dll -    0:012> g
    Breakpoint 0 hit
    eax=039f7800 ebx=00000000 ecx=012b4450 edx=00000004 esi=012b4450 edi=039f79dc
    eip=5b389613 esp=00120c40 ebp=00120ca8 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    wwlib!DllGetClassObject+0xf2e23:
    5b389613 e8ee70d4ff      call    wwlib!DllMain+0x3b15 (5b0d0706)
这时单步进入，慢慢调戏，哦不，调试之。当然看官也可同时在IDA中查看。
    .text:318D0706 xxx_retrieve_obj_ptr proc near          ; CODE XREF: sub_318CFA51+2A9↑p
    .text:318D0706                                         ; sub_318D0659+1E↑p ...
    .text:318D0706                 mov     ecx, [ecx]
    .text:318D0708                 mov     eax, [ecx]
    .text:318D070A                 cmp     edx, eax
    .text:318D070C                 jb      short loc_318D0710
    .text:318D070E                 mov     edx, eax
    .text:318D0710
    .text:318D0710 loc_318D0710:                           ; CODE XREF: xxx_retrieve_obj_ptr+6↑j
    .text:318D0710                 mov     eax, [ecx+8]
    .text:318D0713                 imul    eax, edx
    .text:318D0716                 add     eax, [ecx+0Ch]
    .text:318D0719                 add     eax, ecx
    .text:318D071B                 retn
    .text:318D071B xxx_retrieve_obj_ptr endp
它逻辑很简单，edx是某个index值，ecx经过两次defer后指向一个结构体，返回的是edx对应index值对应的结构体(某个对象)指针。查看内存，可以推断当前存在6个对象，在内存中的大小为0x5c。
    0:000> dd poi(ecx) l10/4
    039f7800  00000006 00000019 0000005c 00000010
    0:000> dd poi(ecx)+10+5c*0 l5c/4
    039f7810  0000007d 00000096 0000002e 00000027
    039f7820  00000000 00000000 00000000 00000000
    039f7830  ffff0000 ffffffff 0000ffff 00000000
    039f7840  ffff0000 0000ffff 00000000 00000000
    039f7850  00000000 00000000 00000000 00000000
    039f7860  00000000 00000000 00000000
    0:000> dd poi(ecx)+10+5c*1 l5c/4
    039f786c  00000132 00000030 0000002e 00000027
    039f787c  00000000 00000000 00000000 00000000
    039f788c  ffff0000 ffffffff 0000ffff 00000000
    039f789c  ffff0000 0000ffff 00000000 00000000
    039f78ac  00000000 00000000 00000000 00000000
    039f78bc  00000000 00000000 00000000
    0:000> dd poi(ecx)+10+5c*2 l5c/4
    039f78c8  000001c7 000001ca 0000002e 00000027
    039f78d8  00000000 00000000 00000000 00000000
    039f78e8  ffff0000 ffffffff 0000ffff 00000000
    039f78f8  ffff0000 0000ffff 00000000 00000000
    039f7908  00000000 00000000 00000000 00000000
    039f7918  00000000 00000000 00000000
    0:000> dd poi(ecx)+10+5c*3 l5c/4
    039f7924  0000ffff 0000ffff 0000001a 0000001a
    039f7934  00000001 00000000 00000000 00000000
    039f7944  ffff0000 ffffffff 0000ffff 00000000
    039f7954  ffff0000 0000ffff 00000000 00000000
    039f7964  00000000 015006e0 5b694a29 00000000
    039f7974  00000000 00000000 00000000
    0:000> dd poi(ecx)+10+5c*4 l5c/4
    039f7980  0000020a 000000e0 0000002e 00000027
    039f7990  00000000 00000000 00000000 00000000
    039f79a0  ffff0000 ffffffff 0000ffff 00000000
    039f79b0  ffff0000 0000ffff 00000000 00000000
    039f79c0  00000000 0148d300 5b2acb04 00000000
    039f79d0  00000000 00000000 00000000
    0:000> dd poi(ecx)+10+5c*5 l5c/4
    039f79dc  0000ffff 0000ffff 0000001a 0000001a