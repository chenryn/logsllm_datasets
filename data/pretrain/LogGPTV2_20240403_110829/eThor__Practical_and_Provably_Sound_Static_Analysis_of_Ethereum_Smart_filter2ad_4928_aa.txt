# eThor: Practical and Provably Sound Static Analysis of Ethereum Smart Contracts

**Authors:**
- Clara Schneidewind
- Ilya Grishchenko
- Markus Scherer
- Matteo Maffei

**Affiliation:**
TU Wien
{clara.schneidewind, ilya.grishchenko, markus.scherer, matteo.maffei}@tuwien.ac.at

## Abstract
Ethereum has become the leading platform for smart contract development, with hundreds of thousands of contracts deployed on the blockchain, covering various applications such as auctions, trading platforms, and more. Given their financial nature, security vulnerabilities in these contracts can have catastrophic consequences, and once deployed, they are immutable. Therefore, automated security analysis is crucial but technically challenging due to the transaction-oriented programming mechanisms and the dynamic nature of blockchain data.

In this work, we introduce eThor, the first sound and automated static analyzer for Ethereum Virtual Machine (EVM) bytecode. eThor is based on an abstraction of EVM bytecode semantics using Horn clauses and supports reachability properties, which are sufficient for capturing important security and functional properties. Our analysis is proven sound against a complete EVM bytecode semantics, and a large-scale evaluation on real-world contracts demonstrates that eThor is practical and outperforms state-of-the-art static analyzers. Specifically, eThor provides soundness guarantees, terminates on 95% of a representative set of real-world contracts, and achieves an F-measure of 89%.

## 1. Introduction
Smart contracts have introduced a paradigm shift in distributed computation, promising security through consensus algorithms. Ethereum, with its quasi-Turing-complete language, has enabled a wide range of use cases, including auctions, data management, financial contracts, and more. However, bugs and vulnerabilities in these contracts can lead to significant financial losses, and due to the immutability of the blockchain, such issues cannot be fixed once deployed.

A rigorous security analysis of smart contracts is essential, but it is challenging due to the specific transaction-oriented mechanisms, the low-level EVM bytecode, and the dynamic nature of blockchain data. While effective bug-finding tools exist, there is currently no automated security analysis for EVM bytecode that provides formal guarantees. This paper addresses this gap by presenting eThor, a sound and automated static analyzer for EVM bytecode.

### 1.1 State-of-the-Art in Security Analysis of Smart Contracts
Existing approaches to smart contract analysis can be categorized into interactive frameworks for machine-checked proofs and automated, heuristic-driven bug-finding tools. Recent works aim to combine the best of both worlds, providing automated yet sound static analysis. However, our investigation reveals that none of these tools provide the intended soundness guarantees.

- **Semantic Foundations:** Most tools lack a formal connection with a semantic model of smart contract execution. For example, ZEUS translates Solidity code into LLVM bitcode, but without a complete formal semantics of Solidity, it is impossible to prove the translation's correctness.
- **Formal Security Properties:** Tools like Securify and NeuCheck define security properties informally or syntactically, which does not provide soundness and completeness guarantees.
- **Correct Control Flow Reconstruction:** Analyzing EVM bytecode is challenging due to dynamic jump destinations. Many tools reconstruct control flow, but the correctness of these reconstructions is often not discussed.
- **Practicality:** A useful tool must be performant and precise, which is difficult to achieve while maintaining soundness.
- **Benchmarking and Testing:** There is a lack of reliable benchmarking and testing infrastructure for Ethereum smart contract analysis tools, making it hard to assess their performance accurately.

### 1.2 Our Contributions
- **Provable Soundness:** We design the first provably sound static analyzer for EVM bytecode, eThor, which uses reachability analysis via Horn clause resolution.
- **Soundness Proof:** We prove the soundness of our static analysis technique against the formal semantics of EVM bytecode.
- **HoRSt Framework:** We develop HoRSt, a framework for specifying and implementing static analyses based on Horn clause resolution. HoRSt takes a pen-and-paper-like specification of Horn clauses and produces an SMT-LIB encoding suitable for z3.
- **Implementation and Evaluation:** We implement eThor using HoRSt and evaluate it on real-world contracts. eThor outperforms ZEUS in terms of recall (100% vs. 11.4%) and achieves an F-measure of 89%.

## 2. Ethereum Background
### 2.1 Overview
Ethereum is a transaction-based state machine where transactions alter the global state, consisting of accounts. Accounts can be external (owned by users) or contract accounts (distributed programs). Contract accounts include persistent storage and code. Transactions can create new contract accounts or call existing ones, executing the contract code and potentially performing internal transactions. The EVM characterizes the quasi-Turing-complete execution model, limited by gas, which bounds the number of execution steps.

### 2.2 EVM Bytecode Semantics
The EVM bytecode is a stack-based, low-level code. The execution model includes components such as the callstack, machine states, and account states. The callstack represents the sequence of function calls, while the machine state includes the program counter, stack, memory, and storage. The account state includes the balance, nonce, code, and storage.

## 3. Static Reachability Analysis
We present our static reachability analysis, which is based on Horn clause resolution. We show that reachability analysis is sufficient to verify various security and functional properties of smart contracts. The analysis requires careful abstractions of EVM components, such as the stack-based execution model, gas, and memory, as well as an over-approximation of the dynamic blockchain data.

## 4. HoRSt Specification Language
HoRSt is a framework for specifying and implementing static analyses based on Horn clause resolution. It takes a high-level specification of the Horn clauses and produces an optimized SMT-LIB encoding suitable for z3.

## 5. Implementation and Evaluation
We use HoRSt to implement eThor and evaluate it on real-world contracts. We compare eThor with ZEUS, which claims to provide soundness guarantees. Our results show that eThor outperforms ZEUS in terms of recall and achieves a higher F-measure.

## 7. Conclusion
We conclude by discussing future research directions and the potential impact of eThor on the security of Ethereum smart contracts. The source code of eThor and HoRSt, along with the dataset used in the evaluation, is available online [6].

**Appendix:**
The appendix provides detailed proofs and additional material.