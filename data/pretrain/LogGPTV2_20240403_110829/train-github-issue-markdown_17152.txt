When parsing multiple variants of an item from a single page, where only a few fields differ, a common approach is to create a base item containing all the shared fields. Then, for each variant, you can instantiate a new `ItemLoader` and pass the base item to it. However, I've encountered an issue where the `ItemLoader.load_item()` method modifies the base item, which can lead to unexpected behavior, especially if the variants have different fields that get added to the base item.

Here's an example of the problem:

```python
In [5]: item = Item()
In [7]: item['url'] = 'foo'
In [8]: item
Out[8]: {'url': 'foo'}
In [9]: l = ItemLoader(item)
In [12]: l.add_value('category', 'bar')
In [13]: item
Out[13]: {'url': 'foo'}
In [14]: item_copy = l.load_item()
In [15]: item_copy
Out[15]: {'category': 'bar', 'url': 'foo'}
In [16]: item
Out[16]: {'category': 'bar', 'url': 'foo'}
In [17]: id(item)
Out[17]: 49468304
In [18]: id(item_copy)
Out[18]: 49468304
```

As you can see, the `load_item()` method modifies the original `item` object, and `item` and `item_copy` end up being the same object.

To work around this issue, I currently use the following approach:

```python
loader = ItemLoader(selector=sel)
# Add common fields
...
item = loader.load_item()

for variant in variants:
    item_copy = item.copy()
    loader = ItemLoader(item_copy)
    # Add variant-specific fields
    ...
    yield loader.load_item()
```

This ensures that each variant is based on a copy of the base item, preventing the base item from being modified.

### Suggestion

I propose that `ItemLoader` should by default create a copy of the item when `load_item()` is called. This would prevent the base item from being modified and would make the behavior more intuitive and less error-prone. 

What are your thoughts on this approach?