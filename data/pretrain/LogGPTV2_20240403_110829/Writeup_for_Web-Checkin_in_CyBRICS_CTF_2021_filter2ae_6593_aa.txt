# Writeup for Web-Checkin in CyBRICS CTF 2021
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这是 CyBRICS CTF 2021 中的一个难度为 Hard 的 Web 题（其实是 Crypto
密码题）。由于作者的某些原因，这个题目在比赛结束都是零解。在比赛结束之后，跟主办方 battle
了半天，作者终于意识到这个题目有问题，在原题正常的情况下，只有 **理论上** 才有解…于是，主办方在比赛结束后也承认了自己的错误：”looks like
we’ve shit our
pants”，也在直播解题的时候对于此题无解进行了解释，并放出了一个修复的版本，而且为了表示自己的诚意，主办方也表示前三个能够解决这个问题的人可以获得
bounty 。
于是，我跟我的密码学小伙伴努力了两天，终于最后成功地解决了这个题目拿到了二血，也是仅有的两支获得奖励的队伍之一。以下是这个题目修复后版本的 WriteUp
。
## TL;DR
Padding Oracle Attack + Bit Flip Attack + XSS
## Reconnaissance
这个题目模拟了一个航班预订网站，我们可以在那里根据用户信息生成机票，并上传机票进行登记。
题目主要有三个 API 接口：
  * /order：填表单的一个界面，只有做前端页面展示，表单数据提交到下面这个 API
  * /finalize：根据传入的参数生成 Aztec Code （一个类似二维码的码）。通过在线识别的工具可以知道得到的是一串密文，密文大概长这样：GLESujRnvL1DfBzExFRDKQ0ZjTrqQgOPuDHKWyu5qhlOpFzn2hw3Dc5dsGLT1jMdwzo24z8h8f2vW6sNINRZa70MLB+mrqY5JVPg5DFygnDmVIUEI6yqkiqaB3fg5RCGeTE6gApiuxZSneallm7kCzIt+au5fZG/f9XXypDLWqM= , base64 解码不能直接得到 ASCII 明文，从密文格式来看暂时没有其他更多信息。
  * /upload：用来上传得到的 Aztec Code ，正常情况下如果成功就返回 “ _you are now registered_ “ 的响应，表示成功注册。
后来，我们通过改变 base64 编码数据的一些字节后发现了一些有意思的现象，比如我们通过修改数据的某个字节得到了一个 _“PADDING_ERROR”_
的响应。所以我们立即想到，这个题目很可能考的是 Padding Oracle Attack (以下简称 POA )。
为了证实我们的想法，我们随便使用题目生成的一个 Aztec Code ，用 base64 解码成密文，在倒数第二个密码文本块的最后一个字节中 XOR
每一个可能的字节值（0~256），后用 base64 编码这些修改后的密文，并用 Aztec Code 生成图片上传到题目的 upload 接口（
python 可以用 aztec_code_generator lib ）。在我们收到的 256 个响应中，255 个的状态码是 200
，只有一个响应的状态码是 500 。并且在这 255 个响应中，在最后一个字节中用`x00`进行 XOR 得到一个 “ _Success_ “
的响应，其余254个都是 “ _PADDING_ERROR_ “ 的响应。
所以这意味着只有 “ _Success_ “ 的响应和 500 的响应在服务器端解密后得到了正确填充的明文。响应 “ _Success_ “
是因为得到的明文是未经修改的原始明文，而返回 500
的响应则是因为解密后的明文经过一定程度的修改而被正确填充，我们可以通过利用这一点获得原始明文的最后一个字节。
通过不断向服务器发送修改的密码文本，然后区分服务器是否回应 “PADDING_ERROR”，我们可以逐个恢复整个明文。这也就是所谓的 [Padding
Oracle Attack](https://en.wikipedia.org/wiki/Padding_oracle_attack)。
## Padding Oracle Attack
我们简单回顾一下 POA 攻击的相关知识。
* * *
首先，我们需要了解什么是 Padding 。
众所周知，分组加密可以将一个明文/密文分成多个等长的block进行加密/解密操作。在 AES 的情况下， 16
个字节的数据为一个block。使用一些分组加密的操作模式，我们可以重复使用分组密码的加密/解密操作一些长度超过一个块的数据。例如，AES-CBC模式可以加密/解密长度为16的倍数的数据。但是如果数据的长度不是分组长度的倍数呢？我们可以使用某种填充方法（padding
method），在最后一个块的末尾添加一些数据，使其成为一个完整的块。
[PKCS#7](https://en.wikipedia.org/wiki/Padding_\(cryptography)#PKCS#5_and_PKCS#7)就是最广泛使用的一种填充方法。
PKCS#7 首先计算要填充的字节数（pad_length），然后将 pad_length 个字节附加到最后一个明文块中，每个字节值都是
pad_length 。解除填充后，解密结果的最后一个字节被提取并解析为 pad_length ，并根据 pad_length
来截断最后一个组的字节数。这里简单举个例子，在 “aaaab\x03\x03\x03” 当中，解除填充后为 “aaaab” 。下面是一个 PKCS#7
填充和解填充的Python实现。
    def pad(pt):
        pad_length = 16 - len(pt)%16
        pt += bytes([pad_length]) * pad_length
        return pt
    def unpad(pt):
        pad_length = pt[-1]
        if not 1  另一点要注意的是，即使明文的长度是区块大小的倍数，仍然需要填充。在这种情况下，将追加 0x10 个字节，每个字节值为`b"x10"`。
另外，我们还需要与熟悉一下 **AES-CBC** ，这是POA最常见的攻击场景。
在 CBC 模式下，明文填充后被分成若干个明文块，每个明文块在 AES 加密前都会与前一个密码文本块进行 XOR
，第一个明文块与一个随机生成的初始化向量（IV）进行 XOR ，最后的加密结果是以IV为首、其他密文块连接而成的密文，解密只是逆序进行了这些操作。
AES-CBC 的一个重要缺点是， **它并不提供完整性保护**
。换句话说，攻击者可以通过某种方式（如字节翻转）修改密文并将修改后的密码文本发送到服务器而不被发现，这就为 POA 攻击提供了条件。
* * *
现在，我们可以深入了解 POA 是如何具体进行攻击的。
假设攻击者拥有一个密码文本，它可以分为一个 IV 和 3 个密码文本块 c1 、 c2 、 c3 ，攻击者的目的是要解密最后一个密码文本块 c3 。
攻击者可以改变 c2 的最后一个字节（XOR 上一些字节值），然后将其发送给服务器，我们应当可以得到两种响应，一种是 200 响应，内容为 “
_PADDING_ERROR_ “ ，另一种是 500 响应。如果我们得到一个 500
的响应，说明我们就成功了，这意味着解除填充的检查通过了，最后一个纯文本块必须以`b"\x01"`结尾，因为这是 16 种有效的填充格式之一。
在恢复了最后一个字节后，我们可以继续解密最后一个明文块之前所有的字节。例如，为了解密倒数第二个字节，我们可以利用`b"\x02\x02"`的填充格式。由于我们已经知道了明文的最后一个字节，我们可以通过在`c2`中
XOR
一些字节值将最后一个字节修改成我们想要的任何值。目前，我们想让最后一个字节变成`b"\x02"`，我们将`c2`的最后一个字节与明文的最后一个字节进行
XOR ，使其变成`b"\x00"`，然后再 XOR 上`b"\x02"`，结果就是`b"\x02"`。随后，尝试每一个可能的 255
个字节值`guess_byte XOR b"\x02"`（除了`b"\x00"`）与`c2`的倒数第二个字节进行XOR，并将修改后的密码文本发送到
Padding Oracle ，直到得到 500 响应，从而恢复最后第二个明文字节，这正好是`guess_byte`。
以下是Python代码，可用于解密最后一个明文块。
    import requests
    import base64
    import aztec_code_generator
    # padding_oracle recovers the last 16 plaintext bytes of the given ciphertext
    def padding_oracle(cipher):
        plaintext = b""
        for index in range(1, 17):