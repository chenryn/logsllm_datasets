where n is the fan-out of the split.
CFC (a)= 2fan-out(a)-1
OR-split
This means that when a designer is constructing a process he needs to
consider and analyze 2n-1 states that may arise from the execution of an
OR-split construct.
Figure 6. OR-split control-flow complexity
Mathematically, it would appear more obvious that 2n states can be
reached after the execution of an OR-split. But since a process that has
started its execution has to finish, it cannot be the case where after the
execution of an OR-split no transition is activated, i.e. no Web service or
workflow task is executed. Therefore, this situation or state cannot happen.
12
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
Definition 7 (AND-split Control-flow Complexity). For an AND-split, the
complexity is simply 1.
CFC (a)= 1
AND-split
The designer constructing a process needs only to consider and analyze one
state that may arise from the execution of an AND-split construct since it is
assumed that all the outgoing transitions are selected and followed.
Figure 7. AND-split control-flow complexity
The higher the value of CFC (a), CFC (a), and CFC (a), the
XOR-split OR-split AND-split
more complex is a process’s design, since developers have to handle all the
states between control-flow constructs (splits) and their associated outgoing
transitions and activities. Each formula to calculate the complexity of a
split construct is based on the number of states that follow the construct.
CONTROL-FLOW COMPLEXITY OF PROCESSES
Mathematically, control-flow complexity metric is additive. Thus, it is very
easy to calculate the complexity of a process, by simply adding the CFC of
all split constructs. The control-flow complexity is calculated as follows,
where p is a Web process or workflow.
CFC(p)= ∑CFC (ws)+ ∑CFC (ws)+ ∑CFC (ws)
XOR−split OR−split AND−split
ws∈{xor−splits∈p} ws∈{or−splits∈p} ws∈{and−splits∈p}
The greater the value of the CFC, the greater the overall architectural
complexity of a process. CFC analysis seeks to evaluate complexity without
direct execution of processes.
Example of CFC Calculation
As an example, let us take the Web process shown in Figure 8 and
calculate its CFC. The process has been developed by a bank that has
adopted a workflow management system (WfMS) to support its business
processes. Since the bank supplies several services to its customers, the
adoption of a WfMS has enabled the logic of bank processes to be captured
in Web processes schema. As a result, all the services available to
customers are stored and executed under the supervision of the workflow
system. One of the services supplied by the bank is the loan application
13
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
process depicted in Figure 8. The Web process is composed 21 Web
services, 29 transitions, three XOR-splits (Check Loan Type, Check Home
Loan, Check Car Loan), one OR-split (Archive Application) and one AND-
split (Check Education Loan).
Figure 8. The Loan Application Process
It was decided that before placing the Web process in a production
environment, a process complexity analysis was required to evaluate the
risk involved with the reengineering effort. The results of the control-flow
complexity analysis carried out are shown in
Table 1.
Table 1. CFC metrics for the Web process from Figure 8
Split CFC
CFC (Check Loan Type) 3
XOR-split
CFC (Check Home Loan) 3
XOR-split
CFC (Check Car Loan) 2
XOR-split
CFC (Archive Application) 23-1
OR-split
CFC (Check Education Loan) 1
AND-split
CFC(Loan Application) =16
14
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
From these values the control-flow complexity can be easily calculated. It is
sufficient to mathematically add the CFC of each split. Thus, the resulting
CFC value is 16 (i.e., 3+3+2+23-1+1).
Since the results of the CFC analysis gave a value considered to be low, it
was determined that the Web process has a low complexity and therefore
its implementation presented a low risk for the bank. Therefore, the Web
process was deployed and implemented in a production environment. The
CFC is a good indicator of the complexity of a process. As further research
is conducted in this area it will become clear that in many cases it is
necessary to limit CFC of Web process applications. Overly complex
processes are more prone to errors and are harder to understand, test, and
adapt.
One important question that needs to be investigated and answered is what
is both the meaning of a given metric (for example, what is the significance
of the CFC of 16 obtained in our example) and the precise number to use as
a CFC limit in a process development. This answer will be given from
empirical results only when organizations have successfully implemented
complexity limits as part of their process development projects. For
example, when using McCabe complexity metrics, the original limit of 10
indicates a simple program, without much risk, a complexity metric
between 11 and 20 designates a more complex program with moderate risk,
a metric between 21 and 50 denote a complex program with high risk.
Finally, a complexity metric greater than 50 denotes an untestable program
with a very high risk. We expect that limits for CFC will be obtained and set
in the same way, using empirical and practical results from research and
from real world implementation.
Verification
To test the validity of our metric, we have designed a small set of processes.
A group of students has rated each process according to their perceived
complexity. The students had previously received a 15-hour course on
process design and implementation. We have then used our CFC
measurement to calculate the complexity of each process design.
Preliminary data analysis performed on the collected data led to some
interesting results. A correlation was found between the perceived
complexity and the control-flow complexity measure.
Based on these preliminarily interesting results, we are now starting a
project that will have as an objective the development of a large set of
empirical experiments involving process designs. The purpose is to find the
degree of correlation between the perceived complexity that designers and
business engineers have when studying and designing a process and the
results obtained from applying our control-flow complexity measure.
CONCLUSIONS AND FUTURE WORK
Business Process Management Systems (BPMS)(Smith & Fingar, 2003)
provide a fundamental infrastructure to define and manage business
processes, Web processes and workflows. BPMS, such as Workflow
15
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
Management Systems (Cardoso, Bostrom, & Sheth, 2004) become a serious
competitive factor for many organizations.
Our work presents an approach to carry out process complexity analysis.
We have delineated the first steps towards using a complexity measurement
to provide concrete Web process and workflow design guidance. The
approach and the ideas introduced are worth exploring further since Web
processes are becoming a reality in e-commerce and e-business activities.
In this chapter we propose a control-flow complexity measurement to be
used during the design of processes. Process control-flow complexity is a
design-time measurement. It can be used to evaluate the difficulty of
producing a Web process design before implementation. When control-flow
complexity analysis becomes part of the process development cycle, it has a
considerable influence in the design phase of development, leading to
further optimized processes. The control-flow complexity analysis can also
be used in deciding whether to maintain or redesign a process. As known
from software engineering, it is a fact that it is cost-effective to fix a defect
earlier in the design lifecycle than later. To enable this, we introduce the
first steps to carry out process complexity analysis.
Future directions of this work are to validate the complexity measurement
to ensure that clear and confident conclusions can be drawn from its use.
In addition to this, although the validity of the proposed complexity
measurement was tested using a few empirical studies that formed the
basis for its development, further work is required to validate its usability
in contexts other than the ones in which the method was developed. In
order to achieve these goals, it is necessary to evaluate a variety of
processes and produce automated tools for measuring complexity features.
REFERENCES
Aalst, W. M. P. v. d., & Hofstede, A. H. M. t. (2003). YAWL: Yet Another
Workflow Language (Revised Version). (QUT Technical report FIT-TR-2003-
04). Brisbane: Queensland University of Technology2003.
Anyanwu, K., Sheth, A., Cardoso, J., Miller, J. A., & Kochut, K. J. (2003).
Healthcare Enterprise Process Development and Integration. Journal of
Research and Practice in Information Technology, Special Issue in Health
Knowledge Management, 35(2), 83-98.
Azuma, M., & Mole, D. (1994). Software Management Practice and Metrics
in the European Community and Japan: Some Results of a Survey. Journal
of Systems and Software, 26(1), 5-18.
BPEL4WS. (2002). Web Services. IBM. Retrieved, from the World Wide Web:
http://www-106.ibm.com/developerworks/webservices/
BPML. (2004). Business Process Modeling Language. Retrieved, 2004, from
the World Wide Web: http://www.bpmi.org/
Card, D., & Agresti, W. (1988). Measuring Software Design Complexity.
Journal of Systems and Software, 8, 185-197.
16
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
Cardoso, J., Bostrom, R. P., & Sheth, A. (2004). Workflow Management
Systems and ERP Systems: Differences, Commonalities, and Applications.
Information Technology and Management Journal. Special issue on Workflow
and E-Business (Kluwer Academic Publishers), 5(3-4), 319-338.
Cardoso, J., Miller, J., Sheth, A., Arnold, J., & Kochut, K. (2004). Quality of
service for workflows and web service processes. Web Semantics: Science,
Services and Agents on the World Wide Web Journal, 1(3), 281-308.
Cardoso, J., Sheth, A., & Miller, J. (2002). Workflow Quality of Service.
Paper presented at the International Conference on Enterprise Integration
and Modeling Technology and International Enterprise Modeling
Conference (ICEIMT/IEMC’02), Valencia, Spain.
Curtis, B. (1980). Measurement and Experimentation in Software
Engineering. Proceedings of the IEEE, 68(9), 1144-1157.
Fenton, N. (1991). Software Metrics: A Rigorous Approach. London:
Chapman & Hall.
Halstead, M. H. (1977). Elements of Software Science, Operating, and
Programming Systems Series (Vol. 7). New York, NY: Elsevier.
Henry, S., & Kafura, D. (1981). Software Structure Metrics Based On
Information-Flow. IEEE Transactions On Software Engineering, 7(5), 510-
518.
IEEE. (1992). IEEE 610, Standard Glossary of Software Engineering
Terminology. New York: Institute of Electrical and Electronic Engineers.
Lanning, D. L., & Khoshgoftaar, T. M. (1994). Modeling the Relationship
Between Source Code Complexity and Maintenance Difficulty. Computer,
27(9), 35-41.
Leymann, F. (2001). Web Services Flow Language (WSFL 1.0). IBM
Corporation. Retrieved, from the World Wide Web: http://www-
4.ibm.com/software/solutions/webservices/pdf/WSFL.pdf
McCabe, T. (1976). A Complexity Measure. IEEE Transactions of Software
Engineering, SE-2(4), 308-320.
McCabe, T. J., & Watson, A. H. (1994). Software Complexity. Crosstalk,
Journal of Defense Software Engineering, 7(12), 5-9.
Miller, G. (1956). The Magical Number Seven, Plus or Minus Two: Some
Limits on Our Capacity for Processing Information. The Psychological
Review.
Sheth, A. P., Aalst, W. v. d., & Arpinar, I. B. (1999). Processes Driving the
Networked Economy. IEEE Concurrency, 7(3), 18-31.
Smith, H., & Fingar, P. (2003). Business Process Management (BPM): The
Third Wave: Meghan-Kiffer Press.
Tsai, W. T., Lopex, M. A., Rodriguez, V., & Volovik., D. (1986). An approach
measuring data structure complexity. Paper presented at the COMPSAC 86.
Ward, W. (1989). Software Defect Prevention Using McCabe’s Complexity
Metric. Hewlett Packard Journal, 40(2), 64-69.
17
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
Zuse, H. (1990). Software Complexity Measures and Models. New York, NY:
de Gruyter & Co.
Zuse, H. (1997). A Framework of Software Measurement. Berlin: Walter de
Gruyter Inc.
INDEX
complexity, 2 Web process, 1
complexity of processes, 1 Web service, 2
control-flow complexity, 1 workflow, 1
process complexity analysis, 4
18