### Initialization Stage and Library Interception

During the initialization stage, libraries are not intercepted. This implies that if a benign application's library is replaced with a low-integrity version, a malicious library could be silently loaded into a high-integrity process. Our current defense mechanism relies on the inability of untrusted applications to replace high-integrity files. However, subtle attacks may still be possible. For instance, an application might load a DLL from the current directory if it is present; otherwise, it starts normally. A more robust solution would be to develop a kernel driver to enforce a no-read-down policy on file loads.

### Inter-Process Communication (IPC) via COM and Windows Messages

Our prototype does not address IPC that occurs through COM and Windows messages. COM supports Access Control Lists (ACLs), making it relatively straightforward to handle. However, Windows messages cannot be protected using user IDs because any process with a handle to the desktop can send messages to any other process on the desktop. This vulnerability, known as a shatter attack, allows an untrusted process to send Windows messages to a benign process.

To mitigate this issue, there are two potential solutions:
1. **Job Control**: Apply job control in Windows to prevent untrusted processes from accessing handles of benign processes. By setting the `JOB_OBJECT_ULIMIT_HANDLES` restriction, a process cannot access handles outside of its job.
2. **Low WIM Integrity Processes**: Run untrusted processes as low WIM integrity processes. WIM already prevents lower integrity processes from sending messages to higher integrity processes.

### Untrusted Software Installation

Our prototype does not support untrusted software whose installation phase requires administrative privileges. Enforcing the no-read-down policy would prevent such installations, while waiving it would allow malicious software to run without confinement, potentially damaging system integrity. Techniques for secure software installation [41] can be applied to solve this problem, but they need to be implemented for Windows.

## Experimental Evaluation

In this section, we discuss the implementation complexity of Spif and evaluate its performance, functionality, and security.

### Implementation Complexity

Spif consists of 4000 lines of C++ and 1500 lines of header code. The small size of the codebase is a testament to the design choices made, which typically translates to a higher level of assurance regarding safety and security.

### Performance

All performance evaluation results were obtained on Windows 8.1. Figure 3 shows that on the CPU-intensive SPEC2006 benchmark, Spif has negligible overhead. This is expected, as the overhead of Spif is proportional to the number of intercepted Windows API calls, and SPEC benchmarks make very few of these.

We also evaluated Spif with Postmark [18], a file I/O intensive benchmark. To better model the Windows environment, we tuned the parameters to reflect typical file sizes and operations. The results, presented in Figure 4, show that the system exhibits higher overhead for small files due to frequent file creation and deletion operations intercepted by Spif. For larger files, more time is spent on reads and writes, which are not intercepted by Spif.

Additionally, we benchmarked Spif with Firefox, specifically measuring the time required to load webpages. Using a standard test suite [31], we fetched the Alexa top 1000 pages locally to eliminate network variances. Figure 5 shows the correlation between unprotected page load times and those protected by Spif. The overheads for benign Firefox and untrusted Firefox are 3.32% and 3.62%, respectively.

### Functionality Evaluation

Figure 6 lists unmodified applications that can run successfully at both high- and low-integrity levels in Spif. These applications span a wide range of categories, including document readers, editors, web browsers, email clients, media players, media editors, maps, and communication software.

#### World-Writable Files

Some applications intentionally leave certain directories and files writable by everyone. Spif prevents low-integrity processes from writing to these locations by revoking write permissions. This is achieved by explicitly denying writes in ACLs.

#### System Files and Digital Signatures

Some system files are writable by all users but are protected by digital signatures. Spif currently does not consider digital signatures as integrity labels and grants benign processes exceptions to read these "untrusted" files. A better approach would be to incorporate signatures into integrity labels, eliminating the need for exceptions.

#### Other World-Writable Resources

Apart from files, there are other world-writable resources such as named pipes and devices for system-wide services. Spif grants exceptions for these resources as they cannot be controlled by low-integrity processes and do not carry low-integrity information.

#### Reading and Editing Files

- **Reading Both High and Low Integrity Files**: Applications that only read, but do not modify files, can start as low-integrity processes, allowing them to consume both high and low integrity files.
- **Editing Both High and Low Integrity Files**: Spif does not allow a process to edit files of different integrity simultaneously, as this could compromise high-integrity files. However, Spif allows files to be edited in different processesâ€”high-integrity files in high-integrity processes and low-integrity files in low-integrity processes. Since these processes run as different users, multiple instances of the same application can run simultaneously in Spif.

#### User Intent and File Opening

When users intend to open low-integrity files, Spif opens them with low-integrity processes. If users do not expect to open low-integrity files, such actions are denied. Spif infers user intent through interactions like double-clicking on files, selecting files from a file-dialog box, or typing file names. When intent is inferred, Spif runs the applications as low-integrity processes.

#### Low-Integrity Processes Writing High-Integrity Files

Applications like OpenOffice maintain runtime information in user profile directories. These files must be both readable and writable for the applications to function. Having these files as high-integrity would prevent low-integrity processes from being usable, while making them low-integrity would break the availability of high-integrity processes. Spif shadows accesses to these files, allowing both high- and low-integrity processes to run without significant usability issues. However, profiles for high and low integrity sessions are isolated, and there is no safe way to automatically merge the shadowed files.

### Security Evaluation

We evaluated the security of Spif against malware from Exploit-DB [34] on Windows XP, 7, and 8.1. We selected local exploits targeting the Windows platform, mostly released between January and October 2014. Figure 7 summarizes the CVE/OSVDB-ID, vulnerable applications, and attack vectors. Attacks are classified into three types: data input attacks, preference/configuration file attacks, and code attacks.

By design, Spif protects high-integrity processes against all these attacks. Since high-integrity processes cannot open low-integrity files, only low-integrity applications can input any malware-related files. Attackers can only compromise low-integrity processes, and there is no mechanism for low-integrity processes to escalate their privilege to become high-integrity processes. As low-integrity processes can only modify files within the shadow directory, they cannot affect any user or system files. Therefore, Spif stopped all the attacks shown in Figure 7.

Both data and preference/configuration file attacks involve inputs to applications. When applications fail to sanitize malicious inputs, attackers can exploit vulnerabilities and take control. Data input attacks involve everyday files like documents (e.g., wps, ppsx, xps), which can be exploited by tricking users into opening them. Preference/configuration file attacks are typically hidden from users and are more challenging to exploit directly. These exploits are often chained together with other vulnerabilities.