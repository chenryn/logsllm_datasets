sis provides a general approach to target speciﬁc regions
of speech samples and extract precise and relevant infor-
mation for improved analysis and minimal transmission re-
quirements of such data. More speciﬁcally, the identiﬁed re-
gions go through a tone/speech recognition, which is tuned
to identifying digits and therefore very efﬁcient. Once the
credit card digits have been extracted, it is sent by the trans-
mitter component to the adversary in one of several ways. In
the case of a restricted security conﬁguration, the transmit-
ter has several available options: it can leverage an existing
application such as the web browser by directly invoking it
to load a URL to a malicious website, thereby transmitting
sensitive information with relative ease; alternatively, it can
use one of several covert channels on the Android platform,
when a paired malicious application with network access is
present. In Section 4.2.1, we discuss several ways to ensure
such a paired application is installed.
In the follow-up sections, we elaborate our designs of
the collector and the transmitter, and our implementation
of Soundcomber on an Android phone. We also show that
the threat posed by the malware can be mitigated using
a context-sensitive reference monitor, which blocks audio
recording when certain numbers are being called.
Video Demonstration. We have uploaded a video demon-
stration of Soundcomber that shows the entire process from
calling a real credit-card company, to the (fake) credit
card number being extracted through audio analysis, trans-
ferred to a paired Trojan application via a covert chan-
nel, and then to the (pretend) Malware master’s server (lo-
cated in another country). We point the reader to our
video demo at http://www.youtube.com/watch?
v=_wDhzLuyR68.
3 Context-Aware Information Collection
The collector is designed to monitor the phone state to
identify and record phone conversations of interest, then de-
code the recording to perform a lightweight analysis, which
uses tone/speech recognition and the proﬁle of the call to
locate and extract high-value information. This process is
illustrated in the right part in Figure 1. Here we elaborate
its design and implementation.
3.1 Audio recording
We now describe how Soundcomber can acquire an au-
dio recording of a phone call along with the number that was
dialed, which is later used for proﬁle-based data extraction.
When to record. The ﬁrst step to extract high-value infor-
mation such as credit-card numbers, is to record the user’s
phone conversation. To this end, Soundcomber monitors
the phone state and starts recording whenever the user ini-
tiates a phone call. This step is performed in a completely
unobtrusive and stealthy fashion — Soundcomber does not
even have to be running prior to the phone conversation, as
it will be started automatically by the Android OS.
Recording in the background. Once Soundcomber is
invoked when a phone conversation is initiated, it starts
recording the audio input from the microphone. This
recording is done in the background and no indication is
given to alert the user that the call is being recorded. Sound-
comber stops recording when the call has ended or after a
pre-deﬁned maximum recording length. Since one’s sensi-
tive information, such as credit-card number, social security
number, etc., is often required at the beginning of a phone
conversation with an IVR, the recording can be short, typi-
cally a few minutes.
Determining the number called. After a call has ended,
Soundcomber needs to decide whether the recording de-
serves analysis. Soundcomber makes this decision based
on proﬁles speciﬁc to the number called. For example, if a
credit-card customer service line is detected, Soundcomber
knows that the recording could include a credit card num-
ber and therefore starts working on it using the proﬁle of the
service. While Android offers a special permission, inter-
cept outgoing phone calls, that allows to easily determine
the called number, this is deemed an unusually high privi-
lege with signiﬁcant security implications. A less obtrusive
path to retrieve the called phone number is by going through
a call list and extracting the number of the most recent call.
The permission needed to access the call list is less sen-
sitive and is shown as read contact data (it is conceivable
that voice dialer and memo apps would beneﬁt from access
to the contact data). Nevertheless, to reduce the permis-
sions necessary for Soundcomber we decided to determine
the number called without any additional permissions by us-
ing the data already collected by Soundcomber, namely the
audio recording.
By analyzing the beginning of a recording, Sound-
comber checks whether it matches an internal database of
service hotlines and if that is the case, the recording is pro-
cessed further. Speciﬁcally, the analysis consists of look-
ing at the ﬁrst segment in the recording, which for a ser-
vice hotline is typically a greeting or introduction. Sound-
comber will run speech recognition on the ﬁrst segment and
compare the extracted words to an internal database of key-
words for different hotlines.
If a match is detected, the
recording is processed further as described in Section 3.2,
using the proﬁle of the detected hotline. To pick the deﬁn-
ing keywords for each hotline, we wrote a program which
analyzes several samples of hotlines and determines the rel-
evant, non-overlapping keywords for each hotline. As an
example, the hotline of HSBC in America greets a user with
“Thank you for calling HSBC, the world’s local bank.” Our
tool determined that the keywords which were recognized
consistently and which did not overlap with other hotlines
were for, calling, local and banking. In fact, banking is not
contained in the recording, but the speech recognition con-
sistently returned banking as one of the keywords (in fact
“misrecognizing” bank), and as such it became a relevant
and reliable keyword.
The advantage of analyzing the beginning of a recording
is that the permissions necessary for Soundcomber can be
kept to a minimum. In return, Soundcomber has to spend
more time analyzing recordings to detect service hotlines.
Using either of the other two methods above (intercept call
or go through the call list) would be less expensive in terms
of computation required and would also be more accurate,
but would require Soundcomber to declare an additional
permission (intercept outgoing phone calls or read contact
data) potentially looking suspicious. In summary, with lim-
ited permissions to 1) read phone state and 2) record au-
dio, Soundcomber can record outgoing phone calls. Work-
ing under these permissions, Soundcomber does not know
the number of an ongoing call, and thus needs to make and
analyze a short (e.g.,  γthr,j the fre-
quency j is assumed to be present in the current frame. In
our prototype we used a value of β = 2 so the thresholds
used were twice the average signal energy per frequency.
Those thresholds were found to be effective at identifying
tone signals (see Section 6).
After detecting the peaks, Soundcomber checks each
frame to see whether the peaks exceed the thresholds. Ide-
ally, if a DTMF tone is present in the recording, exactly two
frequencies are detected and the corresponding tone can be
determined. Noise in the recording can lead to the detection
of more than two frequencies. When this happens, all de-
tected frequencies except the two with the highest peaks are
eliminated. In the following, we present a visual example
of this detection process. In the example, three peaks are
detected (corresponding to the 1’s in the peak vector). The
lowest peak is eliminated to yield two peaks, which corre-
spond to the DTMF tone for “4”.
?
> γthr,1
?
> γthr,i
γ1
.
.
.
γi
9>>>=
>>>;
→
peak
detection
→
0
BBBBB@
1
0
.
.
.
1
1
1
CCCCCA
→
peak
elimination
→
0
BBBBB@
1
0
.
.
.
1
0
1
CCCCCA
→
tone
detection
→ “4”
Moreover, a tone is deemed to be identiﬁed only after the
combination of its two frequencies has been found consis-
tently in multiple frames in a row, typically at least 2 frames.
3.2.2 Speech recognition
To perform the speech recognition part for Soundcomber we
ﬁrst looked at the available options. The Android platform
contains speech recognition functionality using a Google
service, but the functionality is not usable for Soundcomber
audio signal
]
V
[
e
d
u
t
i
l
p
m
a
Goertzel’s
algorithm
2
|
)
k
(
X
|
2
|
)
k
(
X
|
threshold
threshold
time
time
852Hz
time
1477Hz
Figure 3. The audio signal shown in the left part is analyzed using Goertzel’s algorithm that generates
the two spectra on the right (for two different frequencies). Each frequency has a custom thresh(cid:173)
old (dotted line).
In this example, the spectral energy of both frequencies is above the threshold
simultaneously for several frames in a row, indicating that the digit “9” was pressed.
for several reasons. First, Google’s speech processing can-
not detect tones for tone recognition. Second, it can only
do speech recognition interactively by prompting the user,
and cannot be run in the background on an already recorded
audio ﬁle.7 In addition, the voice application ofﬂoads the
processing to Google by uploading the recorded audio over
the Internet, which is easily noticeable and thus not suited
for Soundcomber.
We instead ported PocketSphinx developed by the
Carnegie Mellon University8 to Android using the Native