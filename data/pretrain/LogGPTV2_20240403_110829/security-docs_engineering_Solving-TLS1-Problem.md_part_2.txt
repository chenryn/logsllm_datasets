    enumerated type values commonly used in TLS hardcoding:
    1. SecurityProtocolType
    2. SSLv2, SSLv23, SSLv3, TLS1, TLS 10, TLS11
    3.  WINHTTP\_FLAG\_SECURE\_PROTOCOL\_
    4. SP\_PROT\_
    5. NSStreamSocketSecurityLevel
    6. PROTOCOL\_SSL or PROTOCOL\_TLS
The recommended solution in all cases above is to remove the hardcoded protocol version selection and defer to the operating system default. If you are using [DevSkim](https://github.com/Microsoft/DevSkim/), [click here](https://github.com/Microsoft/DevSkim/blob/4ac9214f84f517fb2d83c362720fa33fe93e6dc8/rules/default/security/cryptography/protocol.json) to see rules covering the above checks which you can use with your own code.
## Update Windows PowerShell scripts or related registry settings
Windows PowerShell uses .NET Framework 4.5, which does not include TLS 1.2 as an available protocol.  To work around this, two solutions are available:
1. Modify the script in question to include the following:
   ```powershell
   [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;
   ```
2. Add a system-wide registry key (e.g. via group policy) to any machine that needs to make TLS 1.2 connections from a .NET app. This will cause .NET to use the "System Default" TLS versions which adds TLS 1.2 as an available protocol AND it will allow the scripts to use future TLS Versions when the OS supports them. (e.g. TLS 1.3)  
      reg add HKLM\SOFTWARE\Microsoft\.NETFramework\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:64
      reg add HKLM\SOFTWARE\Microsoft\.NETFramework\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:32
Solutions (1) and (2) are mutually-exclusive, meaning they need not be implemented together. 
## Rebuild/retarget managed applications using the latest .Net Framework version
Applications using .NET framework versions prior to 4.7 may have limitations effectively capping support to TLS 1.0 regardless of the underlying OS defaults. Refer to the below diagram and [Transport Layer Security (TLS) best practices with the .NET Framework](/dotnet/framework/network-programming/tls) for more information.
![Rebuild managed applications](./media/solving-tls1-problem/DOTNETTLS.png)
SystemDefaultTLSVersion takes precedence over app-level targeting of TLS versions.  The recommended best practice is to always defer to the OS default TLS version.  It is also the only crypto-agile solution that lets your apps take advantage of future TLS 1.3 support.
If you are targeting older versions of .NET Framework such as 4.5.2 or 3.5, then by default your application will use the older and not recommended protocols such as SSL 3.0 or TLS 1.0. It is strongly recommended that you upgrade to newer versions of .NET Framework such as .NET Framework 4.6 or set the appropriate registry keys for 'UseStrongCrypto'.
## Testing with TLS 1.2+
Following the fixes recommended in the section above, products should be
regression-tested for protocol negotiation errors and compatibility with
other operating systems in your enterprise.
  - The most common issue in this regression testing will be a TLS
    negotiation failure due to a client connection attempt from an
    operating system or browser that does not support TLS 1.2.
      - For example, a Vista client will fail to negotiate TLS with a
        server configured for TLS 1.2+ as Vista's maximum supported TLS
        version is 1.0. That client should be either upgraded or
        decommissioned in a TLS 1.2+ environment.
  - Products using certificate-based Mutual TLS authentication may
    require additional regression testing as the certificate-selection
    code associated with TLS 1.0 was less expressive than that for TLS
    1.2.
      - If a product negotiates MTLS with a certificate from a
        non-standard location (outside of the standard named certificate
        stores in Windows), then that code may need updating to ensure
        the certificate is acquired correctly.
  - Service interdependencies should be reviewed for trouble spots.
      - Any services which interoperate with 3rd-party
        services should conduct additional interop testing with those
        3rd parties.
      - Any non-Windows applications or server operating systems in use
        require investigation / confirmation that they can support TLS
        1.2. Scanning is the easiest way to determine this.
A simple blueprint for testing these changes in an online service
consists of the following:
1. Conduct a scan of production environment systems to identify
    operating systems which do not support TLS 1.2.
2. Scan source code and online service configuration files for
    hardcoded TLS as described in "[Finding and fixing TLS 1.0
    dependencies in
    code](#finding-and-fixing-tls-1.0-dependencies-in-code)"
3. Update/recompile applications as required:
    1. Managed apps
        1. Rebuild against the latest .NET Framework version.
        2. Verify any usage of the
            [SSLProtocols](https://msdn.microsoft.com/library/system.security.authentication.sslprotocols\(v=vs.110\).aspx)
            enumeration is set to SSLProtocols.None in order to use OS
            default settings.
    2. WinHTTP apps â€“ rebuild with
        [WinHttpSetOption](https://msdn.microsoft.com/library/windows/desktop/aa384114\(v=vs.85\).aspx)
        to support TLS 1.2
4. Start testing in a pre-production or staging environment with all
    security protocols older than TLS 1.2 disabled [via
    registry](https://support.microsoft.com/help/245030/how-to-restrict-the-use-of-certain-cryptographic-algorithms-and-protocols-in-schannel.dll).
5. Fix any remaining instances of TLS hardcoding as they are
    encountered in testing. Redeploy the software and perform a new
    regression test run.
## Notifying partners of your TLS 1.0 deprecation plans
After TLS hardcoding is addressed and operating system/development
framework updates are completed, should you opt to deprecate TLS 1.0 it
will be necessary to coordinate with customers and partners:
  - Early partner/customer outreach is essential to a successful TLS 1.0
    deprecation rollout. At a minimum this should consist of blog
    postings, whitepapers or other web content.
  - Partners each need to evaluate their own TLS 1.2 readiness through
    the operating system/code scanning/regression testing initiatives
    described in above sections.
## Conclusion
Removing TLS 1.0 dependencies is a complicated issue to drive end to
end. Microsoft and industry partners are taking action on this today to
ensure our entire product stack is more secure by default, from our OS
components and development frameworks up to the applications/services
built on top of them. Following the recommendations made in this
document will help your enterprise chart the right course and know what
challenges to expect. It will also help your own customers become more
prepared for the
transition.
## Appendix A: Handshake Simulation for various clients connecting to [www.microsoft.com](https://www.microsoft.com), courtesy SSLLabs.com
![Results of Handshake Simulation](./media/solving-tls1-problem/image1.png)
## Appendix B: Deprecating TLS 1.0/1.1 while retaining FIPS Mode
Follow the steps below if your network requires FIPS Mode but you also
want to deprecate TLS 1.0/1.1:
1. Configure TLS versions [via the
    registry](https://support.microsoft.com/help/245030/how-to-restrict-the-use-of-certain-cryptographic-algorithms-and-protocols-in-schannel.dll),
    by setting "Enabled" to zero for the unwanted TLS versions.
2. Disable Curve 25519 (Server 2016 only) via Group Policy.
3. Disable any cipher suites using algorithms that aren't allowed by
    the relevant FIPS publication. For Server 2016 (assuming the default
    settings are in effect) this is means disabling RC4, PSK and NULL
    ciphers.
#### Contributors/Thanks to
Mark Cartwright  
Bryan Sullivan  
Patrick Jungles  
Michael Scovetta  
Tony Rice  
David LeBlanc  
Mortimer Cook  
Daniel Sommerfeld  
Andrei Popov  
Michiko Short  
Justin Burke  
Gov Maharaj  
Brad Turner  
Sean Stevenson