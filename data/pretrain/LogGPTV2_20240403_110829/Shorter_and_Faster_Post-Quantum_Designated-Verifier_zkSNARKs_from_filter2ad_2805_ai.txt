tion via Multi-key FHE. In EUROCRYPT. 735–763.
[86] Anca Nitulescu. 2019. Lattice-Based Zero-Knowledge SNARGs for Arithmetic
Circuits. In LATINCRYPT. 217–236.
[87] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. 2013. Pinocchio:
Nearly Practical Verifiable Computation. In IEEE Symposium on Security and
Privacy. 238–252.
[88] Chris Peikert. 2016. A Decade of Lattice Cryptography. Found. Trends Theor.
Comput. Sci. 10, 4 (2016), 283–424.
[89] Chris Peikert, Vinod Vaikuntanathan, and Brent Waters. 2008. A Framework
for Efficient and Composable Oblivious Transfer. In CRYPTO. 554–571.
[90] Charles M Rader. 1968. Discrete Fourier transforms when the number of data
samples is prime. Proc. IEEE 56, 6 (1968), 1107–1108.
[91] Oded Regev. 2005. On lattices, learning with errors, random linear codes, and
cryptography. In STOC. 84–93.
1253–1298.
[92] Omer Reingold, Guy N. Rothblum, and Ron D. Rothblum. 2016. Constant-round
interactive proofs for delegating computation. In STOC. 49–62.
[93] Jacob T. Schwartz. 1980. Fast Probabilistic Algorithms for Verification of Poly-
nomial Identities. J. ACM 27, 4 (1980).
[94] SCIPR Lab. 2021. libfqfft: C++ library for FFTs in finite fields. https://
[95] SCIPR Lab. 2021. libiop: a C++ library for IOP-based zkSNARKs. https:
[96] SCIPR Lab. 2021. libsnark: a C++ library for zkSNARK proofs. https://
[97] Srinath Setty. 2020. Spartan: Efficient and General-Purpose zkSNARKs Without
github.com/scipr-lab/libfqfft/.
//github.com/scipr-lab/libiop.
github.com/scipr-lab/libsnark/.
Trusted Setup. In CRYPTO. 704–737.
[98] Srinath T. V. Setty, Benjamin Braun, Victor Vu, Andrew J. Blumberg, Bryan
Parno, and Michael Walfish. 2013. Resolving the conflict between generality
and plausibility in verified computation. In EuroSys. 71–84.
[99] Srinath T. V. Setty and Jonathan Lee. 2020. Quarks: Quadruple-efficient trans-
parent zkSNARKs. IACR Cryptol. ePrint Arch. 2020 (2020), 1275.
[100] Srinath T. V. Setty, Victor Vu, Nikhil Panpalia, Benjamin Braun, Andrew J.
Blumberg, and Michael Walfish. 2012. Taking Proof-Based Verified Computation
a Few Steps Closer to Practicality. In USENIX. 253–268.
[101] StarkWare Team. 2021. ethSTARK Documentation. IACR Cryptol. ePrint Arch.
2021 (2021), 582.
ethSTARK.
CRYPTO. 71–89.
[102] StarkWare Team. 2021. ethSTARK. https://github.com/starkware-libs/
[103] Justin Thaler. 2013. Time-Optimal Interactive Proofs for Circuit Evaluation. In
[104] Llewellyn H Thomas. 1963. Using a computer to solve problems in physics.
Applications of digital computers (1963), 44–45.
[105] Riad S. Wahby, Srinath T. V. Setty, Zuocheng Ren, Andrew J. Blumberg, and
Michael Walfish. 2015. Efficient RAM and control flow in verifiable outsourced
computation. In NDSS.
[106] Riad S. Wahby, Ioanna Tzialla, Abhi Shelat, Justin Thaler, and Michael Walfish.
2018. Doubly-Efficient zkSNARKs Without Trusted Setup. In IEEE Symposium
on Security and Privacy. 926–943.
[107] Michael Walfish and Andrew J. Blumberg. 2015. Verifying computations without
reexecuting them. Commun. ACM 58, 2 (2015), 74–84.
[108] Tiancheng Xie, Jiaheng Zhang, Yupeng Zhang, Charalampos Papamanthou, and
Dawn Song. 2019. Libra: Succinct Zero-Knowledge Proofs with Optimal Prover
Computation. In CRYPTO. 733–764.
[109] Jiaheng Zhang, Weijie Wang, Yinuo Zhang, and Yupeng Zhang. 2020. Doubly
Efficient Interactive Proofs for General Arithmetic Circuits with Linear Prover
Time. IACR Cryptol. ePrint Arch. 2020 (2020), 1247.
[110] Jiaheng Zhang, Tiancheng Xie, Yupeng Zhang, and Dawn Song. 2020. Trans-
parent Polynomial Delegation and Its Applications to Zero Knowledge Proof.
In IEEE Symposium on Security and Privacy. 859–876.
[111] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and
Charalampos Papamanthou. 2017. A Zero-Knowledge Version of vSQL. IACR
Cryptol. ePrint Arch. 2017 (2017), 1146.
[112] Richard Zippel. 1979. Probabilistic algorithms for sparse polynomials. In EU-
ROSAM.
A ADDITIONAL PRELIMINARIES
In this section, we recall additional preliminaries.
Lemma A.1 (Schwartz-Zippel [93, 112]). Let 𝑓 ∈ F[𝑥1, . . . , 𝑥𝑛]
be a multivariate polynomial of total degree at most 𝑑 over F, not
identically zero. Then for any set 𝑆 ⊆ F,
Pr[𝑓 (𝛼1, . . . , 𝛼𝑛) = 0 | 𝛼1, . . . , 𝛼𝑛
r← 𝑆] ≤ 𝑑/|𝑆| .
Lemma A.2 (Smudging Lemma). Let 𝐵, 𝐵′ be integers. Fix any value
|𝑒1| ≤ 𝐵′ and sample 𝑒2
r← [−𝐵, 𝐵]. The statistical distance between
the distributions of 𝑒1 + 𝑒2 and 𝑒2 is at most 𝐵′/𝐵.
Discrete Gaussians and tail bounds. We also recall some prelimi-
naries on the discrete Gaussian distribution. We refer to Peikert’s
survey [88] for additional details and references. For a real value
𝑠 > 0, the Gaussian function 𝜌𝑠 : R → R+ with width 𝑠 is the func-
tion 𝜌𝑠(𝑥) := exp(−𝜋𝑥2/𝑠2). The discrete Gaussian distribution
𝐷Z,𝑠 over Z with mean 0 and width 𝑠 is the distribution where
Pr[𝑋 = 𝑥 : 𝑋 ← 𝐷Z,𝑠] =
(A.1)
𝑦∈Z 𝜌𝑠(𝑦) .
𝜌𝑠(𝑥)
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea226A real random variable 𝑋 is subgaussian with parameter 𝑠 if for
every 𝑡 ≥ 0, Pr[|𝑋| > 𝑡] ≤ 2 exp(−𝜋𝑡2/𝑠2). The following two facts
will be useful in our analysis.
• If 𝑋 is subgaussian with parameter 𝑠 and 𝑎 ∈ R, then 𝑎𝑋 is
• If 𝑋1, . . . , 𝑋𝑚 are independent subgaussian random variables with
parameters 𝑠1, . . . , 𝑠𝑚, respectively, then𝑖∈[𝑚] 𝑋𝑖 is subgaus-
subgaussian with parameter |𝑎| 𝑠.
sian with parameter ∥s∥2 where s = (𝑠1, . . . , 𝑠𝑚).
Rank-1 constraint satisfiability. We recall the definition of the
R1CS language introduced implicitly by Gennaro et al. [64] and
formalized explicitly in [20, 21, 98]:
Definition A.3 (Rank-1 Constraint Satisfiability [21, 64, 98]). A
rank-1 constraint satisfiability (R1CS) system over a finite field F
is specified by a tuple CS = (cid:0)𝑛, 𝑁𝑔, 𝑁𝑤, {a𝑖, b𝑖, c𝑖}𝑖∈[𝑁𝑔](cid:1) where
𝑛, 𝑁𝑔, 𝑁𝑤 ∈ N, 𝑛 ≤ 𝑁𝑤, and a𝑖, b𝑖, c𝑖 ∈ F𝑁𝑤+1. The system CS is
satisfiable for a statement x ∈ F𝑛 if there exists a witness w ∈ F𝑁𝑤
such that
• x = (𝑤1, . . . , 𝑤𝑛) and
• [1 | wT]a𝑖 · [1 | wT]b𝑖 = [1 | wT]c𝑖 for all 𝑖 ∈ [𝑁𝑔].
We denote this by writing CS(x, w) = 1, and refer to 𝑛 as the state-
ment size, 𝑁𝑤 as the number of variables, and 𝑁𝑔 as the number of
constraints. Given an R1CS system CS, we define the correspond-
ing relation RCS = {(x, w) ∈ F𝑛 × F𝑁𝑤 : CS(x, w) = 1}.
Remark A.4 (Boolean and Arithmetic Circuit Satisfiability). As
shown in [20, 64], the language of R1CS capture Boolean and arith-
metic circuit satisfiability as special cases. Namely, a Boolean circuit
satisfiability instance for a Boolean circuit 𝐶 : {0, 1}𝑛 × {0, 1}ℎ →
{0, 1} with 𝛼 wires and 𝛽 bilinear gates yields an R1CS instance
with 𝑁𝑤 = 𝛼 variables and 𝑁𝑔 = 𝛽 + ℎ + 1 constraints. Similarly,
an arithmetic circuit 𝐶 : F𝑛 × Fℎ → Fℓ with 𝛼 wires and 𝛽 bilinear
gates corresponds to an R1CS instance with 𝑁𝑤 = 𝛼 variables and
𝑁𝑔 = 𝛽 + ℓ constraints. In this work, we focus exclusively on linear
PCPs and SNARKs for R1CS.
A.1 Linear PCPs
We now recall the notion of a linear PCP (LPCP) from [30, 76]. In
this work, we only consider linear PCPs for R1CS systems, so we
specialize all of our definitions to this setting:
Definition A.5 (Linear PCP [30, 76, adapted]). Let 𝑝 be a polyno-
mial and let CS = {CS𝜅}𝜅∈N be a family of R1CS systems over a
has size at most |CS𝜅| ≤ 𝑝(𝜅). In the following, we write 𝑛 = 𝑛(𝜅)
to denote a polynomially-bounded function where 𝑛(𝜅) = 𝑛𝜅 for
all 𝜅 ∈ N. We define 𝑁𝑔 = 𝑁𝑔(𝜅) and 𝑁𝑤 = 𝑁𝑤(𝜅) similarly. A
𝑘-query input-independent linear PCP for CS with query length
ℓ = ℓ(𝜅) and knowledge error 𝜀 = 𝜀(𝜅) is a tuple of algorithms
ΠLPCP = (QLPCP, PLPCP,VLPCP) with the following properties:
• QLPCP(1𝜅) → (st, Q): The query-generation algorithm takes
as input the system index 𝜅 ∈ N and outputs a query matrix
Q ∈ Fℓ×𝑘 and a verification state st.
• PLPCP(1𝜅, x, w) → 𝝅: On input the system index 𝜅 ∈ N, a state-
ment x ∈ F𝑛, and a witness w ∈ F𝑁𝑤 , the prove algorithm
outputs a proof 𝝅 ∈ Fℓ.
finite field F where CS𝜅 =(cid:0)𝑛𝜅, 𝑁𝑔,𝜅, 𝑁𝑤,𝜅, {a𝑖,𝜅, b𝑖,𝜅, c𝑖,𝜅}𝑖∈[𝑁𝑔,𝜅 ](cid:1)
(cid:21)
(st, Q) ← QLPCP(1𝜅),
𝝅 ← PLPCP(1𝜅, x, w)
= 1.
• VLPCP(st, x, a): On input the verification state st, the statement
x ∈ F𝑛, and a vector of responses a ∈ F𝑘, the verification algo-
rithm outputs a bit 𝑏 ∈ {0, 1}.
In addition, ΠLPCP should satisfy the following properties:
• Completeness: For all 𝜅 ∈ N, x ∈ F𝑛, and w ∈ F𝑁𝑤 where
(cid:20)
CS𝜅(x, w) = 1,
VLPCP(st, x, QT𝝅) = 1(cid:12)(cid:12)
Pr
• Knowledge: There exists an efficient extractor ELPCP such that
for all 𝜅 ∈ N, x ∈ F𝑛, and 𝝅∗ ∈ Fℓ, if
Pr[VLPCP(st, x, QT𝝅∗) = 1 | (st, Q) ← QLPCP(1𝜅)] > 𝜀,
then
{(st, Q, QT𝝅)} ≡ {((cid:101)st, ˜Q, ˜a)},
Pr[CS𝜅(x, w) = 1 | w ← E⟨𝝅∗,·⟩
LPCP (1𝜅, x)] = 1.
We refer to 𝜀 as the knowledge error of the linear PCP.
• Perfect honest-verifier zero knowledge (HVZK): There ex-
ists an efficient simulator SLPCP = (S1,S2) such that for all
𝜅 ∈ N and all instances (x, w) where CS𝜅(x, w) = 1,
where (st, Q) ← QLPCP(1𝜅), 𝝅 ← PLPCP(1𝜅, x, w), ((cid:101)st, ˜Q, stS) ←
CS𝜅 =(cid:0)𝑛𝜅, 𝑁𝑔,𝜅, 𝑁𝑤,𝜅, {a𝑖,𝜅, b𝑖,𝜅, c𝑖,𝜅}𝑖∈[𝑁𝑔,𝜅 ](cid:1). We write 𝑛 = 𝑛(𝜅)
S1(1𝜅), and ˜a ← S2(stS, x).
Linear PCPs for R1CS. The quadratic arithmetic programs (QAPs)
introduced by Gennaro et al. [64] immediately imply a 4-query
linear PCP for R1CS [20]. Note that Ben-Sasson et al. [20] described
the construction as a 5-query linear PCP with statistical HVZK (over
large fields); however, it is straightforward to adapt the construction
to obtain a 4-query LPCP with perfect HVZK (over any field). These
changes incur a slight increase in the verification complexity and
the knowledge error. We state the main result below and describe
the construction from [20] and our modifications in Appendix B.
Claim A.6 (Linear PCPs for R1CS [20, 64, adapted]). Let CS =
{CS𝜅}𝜅∈N be a family of R1CS instances over a finite field F, where
to denote a function where 𝑛(𝜅) = 𝑛𝜅 for all 𝜅 ∈ N; we define
𝑁𝑔 = 𝑁𝑔(𝜅) and 𝑁𝑤 = 𝑁𝑤(𝜅) correspondingly. Then, there exists
a 4-query linear PCP for CS with knowledge error 2𝑁𝑔/(|F| − 𝑁𝑔),
query length 4 + 𝑁𝑤 + 𝑁𝑔 − 𝑛, and satisfying perfect HVZK.
Remark A.7 (Knowledge Amplification for Linear PCPs). Claim A.6
gives a 4-query linear PCP for any R1CS system with 𝑁𝑔 con-
straints that has knowledge error 𝜀 = 2𝑁𝑔/(|F| − 𝑁𝑔). To achieve
negligible knowledge error, this necessitates working over a field
of super-polynomial size. In our lattice-based instantiation, it is
more efficient to work over smaller fields. To amplify knowledge,
we use standard parallel repetition. Namely, for a 𝑘-query LPCP
with query length 𝑚 and knowledge error 𝜀, we can obtain a (𝑘𝜌)-
query LPCP with the same query length and knowledge error 𝜀𝜌.
In more detail, the setup algorithm samples 𝜌 independent sets
of queries Q1, . . . , Q𝜌 ∈ F𝑚×𝑘 and constructs its query matrix Q
as Q = [Q1 | · · · | Q𝜌] ∈ F𝑚×𝑘𝜌. The verifier accepts a response
a = [a1 | · · · | a𝜌] only if all 𝜌 sets of responses are valid.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea227A.2 Succinct Non-Interactive Arguments
We recall the definitions of a succinct non-interactive argument of
knowledge (SNARK) for R1CS:
Definition A.8 (Succinct Non-Interactive Argument of Knowl-
edge). Let CS = {CS𝜅}𝜅∈N be a family of R1CS systems over a
finite field F, where |CS𝜅| ≤ 𝑠(𝜅) for some fixed polynomial 𝑠(·).
A succinct non-interactive argument (SNARK) in the preprocessing
model9 for CS is a tuple ΠSNARK = (Setup, Prove, Verify) with the
following properties:
• Setup(1𝜆, 1𝜅) → (crs, st): On input the security parameter 𝜆
and the system index 𝜅, the setup algorithm outputs a common
reference string crs and verification state st.
• Prove(crs, x, w) → 𝜋: On input a common reference string crs,
a statement x, and a witness w, the prove algorithm outputs a
proof 𝜋.
• Verify(st, x, 𝜋) → {0, 1}: On input the verification state st, a
statement x and a proof 𝜋, the verification algorithm outputs a
bit 𝑏 ∈ {0, 1}.
Moreover, ΠSNARK should satisfy the following properties:
• Completeness: For all security parameters 𝜆 ∈ N, system in-
dices 𝜅 ∈ N, and instances (x, w) where CS𝜅(x, w) = 1,
Pr[Verify(st, x, 𝜋) = 1] = 1,
where (crs, st) ← Setup(1𝜆, 1𝜅), 𝜋 ← Prove(crs, x, w).
• Knowledge: For all polynomial-size provers P∗, there exists
a polynomial-size extractor E such that for all security param-
eters 𝜆 ∈ N, system indices 𝜅 ∈ N, and auxiliary inputs 𝑧 ∈
{0, 1}poly(𝜆),
Pr[Verify(st, x, 𝜋) = 1 ∧ CS𝜅(x, w) ≠ 1] = negl(𝜆),
where (crs, st) ← Setup(1𝜆, 1𝜅), (x, 𝜋) ← P∗(1𝜆, 1𝜅, crs; 𝑧), and
w ← E(1𝜆, 1𝜅, crs, st, x; 𝑧).
• Efficiency: There exist a universal polynomial 𝑝 (independent
of CS) such that Setup and Prove run in time 𝑝(𝜆 + |CS𝜅|),
Verify runs in time 𝑝(𝜆 + |x| + log |CS𝜅|), and the proof size is
𝑝(𝜆 + log |CS𝜅|).
Remark A.9 (Public Verification vs. Designated Verifier). We say
a SNARK is publicly-verifiable if st can be efficiently computed from
crs (i.e., verification only depends on the public common reference
string). Otherwise, the SNARK is designated-verifier (i.e., only the
holder of the secret verification state st can check proofs). In this
work, we focus on designated-verifier SNARKs.
Definition A.10 (Zero Knowledge). A SNARK ΠSNARK = (Setup,
Prove, Verify) for an R1CS system CS = {CS𝜅}𝜅∈N is computa-
tional zero knowledge (i.e., a zkSNARK) if there exists an efficient
simulator SSNARK = (S1,S2) such that for all 𝜅 ∈ N and all efficient
and stateful adversaries A, we have that
Pr[ExptZKΠSNARK,A,SSNARK
(1𝜆, 1𝜅) = 1] ≤ 1/2 + negl(𝜆),
where the experiment ExptZKΠSNARK,A,SSNARK
follows:
9In the preprocessing model, we allow for a statement-independent setup algorithm that