100%, 0
100%, 0
100%, 0
96%, 0
0.04
96%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
0.05
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
0.06
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
0.07
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
0.08
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
0.09
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
0.1
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
100%, 0
Table 5: Detection Rates of Fine-Grained Detectors
Correlation and B-Sampling (P erExp = 0.05 and M = 3).
By using Flow-Correlation, ﬁne-grained detector to reduce
95% time to process oﬀ-line traces, indicating a great work-
load reduction in real time.
7. DISCUSSION
To answer the question “how high speed networks our ap-
proach can handle?”, we consider the performance of two key
components, B-Sampling and cross-epoch correlation. B-
Sampling is intended to be implemented with hardware sup-
port, where we can design the Counting-Sketch and Sampling-
Sketch in fast memory (e.g., SRAM) while the SID and
PSPC in slow memory (e.g., DRAM). The system can pe-
riodically but parallel read the data from SRAM to DRAM
for identifying synchronized hosts and computing sampling
probabilities, and then write the sets of IPs to SRAM. And
for Counting-Sketch, recent study has shown the hardware
implementation of a speciﬁc hash function with a through-
put of over 10Gbps [3], indicating the potential performance
of 10Gbps of B-Sampling with hardware implementation.
Given an expected time consumption of 2hr for cross-epoch
correlation, the linear model t = 0.0035x (in seconds) im-
plies 2M C-ﬂows.
If we assume the number of C-ﬂows is
proportional to the traﬃc volume (e.g., 200K C-ﬂows in our
experiment is corresponding to 200Mbps), 2M C-ﬂows corre-
spond to a network with speed of 2Gbps. Since 2Gbps is less
than the potential performance of 10Gbps of B-Sampling,
such results indicate that our approach can be used in 2Gbps
networks (e.g., campus backbone networks) and has the po-
tential to be deployed in faster network as the expected time
consumption of cross-epoch correlation increases.
Because of our assumptions on the persistent use of coor-
dinated C&Cs in a botnet, any evasion attempts that violate
our assumptions will likely succeed if the botmaster knows
our algorithms, similar to any evasion attacks against an
IDS. Bots may intentionally manipulate their communica-
tion patterns to decrease sampling probabilities or evade
cross-epoch correlation. For example, bots can randomize
communication patterns (e.g., number of packets per ﬂow)
to evade the syn-client/server detection. One potential so-
lution is to dynamically tune the parameters used for iden-
tifying syn-servers and syn-clients for each round (e.g., ran-
domly select 1
4 quantiles or medium value of variances
4 , 3
for identifying syn-server, and choose R and C from a pre-
deﬁned set of values/ranges for identifying syn-clients). An-
other solution is for B-Sampling to incorporate information
from other systems. For example, we can set a category of
IPs in rouge networks [16] or malicious fast-ﬂux networks,
which are likely related to botnets, to sample more related
packets. For cross-epoch correlation, we can incorporate
more detection features (e.g., using packet payload infor-
mation for some tight clusters to do light-weight content
checking) to make the evasion more diﬃcult. Due to the
nature of the arms race in existing intrusion detection and
evasion practice, we should always study better and more
robust techniques as a defender. Combining diﬀerent com-
plementary detection techniques to make the evasion harder
is one possible future direction. We leave a deeper and more
extensive study to handle these evasion attempts as future
work.
8. CONCLUSION
Botnet detection in high-speed and high-volume networks
is a challenging problem. Given the severity of botnets and
the growing interest from ISPs to defend against botnets,
research on botnet detection in high-speed and high-volume
networks is important.
In this paper, we have described
a solution to this problem, which includes a botnet-aware
adaptive packet sampling algorithm and a scalable spatial-
temporal ﬂow correlation approach. The adaptive packet
sampling technique uses network characteristics of botnet
C&Cs to capture more packets related to bots and adap-
tively tune the sampling probabilities to keep a target sam-
pling rate. The ﬂow correlation approach exploits the es-
sential properties of botnets and detects bots by identify-
ing hosts with persistently similar communication patterns.
Based on evaluation using real-world network traces shows
that our proposed solution yields good performance. The
sampling algorithm can capture more botnet packets in com-
parison to pre-deﬁned sampling rate and outperforms the
state-of-the-art adaptive sampling algorithms. Based on the
sampled packets, the correlation algorithm can successfully
and scalably pinpoint various types of bots (including IRC-
based, HTTP-based, and P2P-based). This approach will
help the ﬁne-grained botnet detectors to focus on inspect-
ing packets of a smaller amount of suspicious traﬃc, thus
Institute of Technology, Atlanta, GA, Nov. 2008.
[14] C. Livadas, R. Walsh, D. Lapsley, and W. T. Strayer.
Using machine learning techniques to identify botnet
traﬃc. In Proc. IEEE WoNS, 2006.
[15] A. Ramachandran, N. Feamster, and D. Dagon.
Revealing botnet membership using DNSBL
counter-intelligence. In Proc. USENIX SRUTI, 2006.
[16] B. Stone-Gross, A. Moser, C. Kruegel, E. Kirda, and
K. Almeroth. Fire: Finding rogue networks. In Proc.
ACSAC, 2009.
[17] W. T. Strayer, R. Walsh, C. Livadas, and D. Lapsley.
Detecting botnets with tight command and control. In
Proc. IEEE LCN, 2006.
[18] T.-F. Yen and M. K. Reiter. Are your hosts trading or
plotting? telling p2p ﬁle-sharing and bots apart. In
ICDCS, 2010.
[19] L. P. Wenjia Fang. Inter-as traﬃc patterns and their
implications. In IEEE Global Internet Symposium,
1999.
[20] X. Hu, M. Knysz and K. Shin. Rb-seeker:
Auto-detection of redirection botnets. In Proc. NDSS,
2009.
[21] Y. Zhang, S. Singh, S. Sen, N. Duﬃeld and C. Lund.
Online identiﬁcation of hierarchical heavy hitters:
Algorithms, evaluation, and applications. In Proc.
ACM IMC, 2004.
[22] Y. Zhao and Y. Xie and F. Yu and Q. Ke and Y. Yu.
Botgraph: Large scale spamming botnet detection. In
Proc. USENIX NSDI, 2009.
[23] T.-F. Yen and M. K. Reiter. Traﬃc aggregation for
malware detection. In Proc. DIMVA, 2008.
[24] T. Zhang, R. Ramakrishnan, and M. Livny. Birch: An
eﬃcient data clustering method for very large
databases. In Proc. ACM SIGMOD. ACM Press, 1996.
allowing them to operating on increasingly more high-speed
networks.
Acknowledgments
We thank Anirudh Ramachandran for providing the code
for FlexSample and Chris Lee for the help in providing the
code for Rubot. We also wish to thank the anonymous re-
viewers for their insightful comments and feedback. This
material is based upon work supported in part by the Na-
tional Science Foundation under grants No. 0831300 and No.
CNS-0954096, the Department of Homeland Security under
contract No. FA8750-08-2-0141, and the Oﬃce of Naval Re-
search under grants No. N000140710907, No. N000140911042
and No. N000140910776. Any opinions, ﬁndings, and con-
clusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views
of the National Science Foundation, the Department of Home-
land Security, or the Oﬃce of Naval Research.
9. REFERENCES
[1] A. Kumar and J. Xu. Sketch guided sampling – using
on-line estimates of ﬂow size for adaptive data
collection. In Proc. IEEE Infocom, 2006.
[2] A. Ramachandran, S. Seetharaman, and N. Feamster.
Fast monitoring of traﬃc subpopulations. In Proc.
ACM IMC, 2008.
[3] R. K. B. Yang and D.A.McGrew. Divide and
concatenate: An architectural level optimization
technique for universal hash functions. In Proc. of the
Design Automation Conference, 2004.
[4] J. R. Binkley and S. Singh. An algorithm for
anomaly-based botnet detection. In Proc. USENIX
SRUTI, 2006.
[5] G. Gu, J. Zhang, and W. Lee. Botsniﬀer: Detecting
botnet command and control channels in network
traﬃc. In Proc. NDSS, 2008.
[6] G. Gu, P. Porras, V. Yegneswaran, M. Fong, W. and
Lee. Bothunter: Detecting malware infection through
IDS-driven dialog correlation. In Proc. USENIX
Security, 2007.
[7] G. Gu, R. Perdisci, J. Zhang, and W. Lee. Botminer:
Clustering analysis of network traﬃc for protocol- and
structure-independent botnet detection. In Proc.
USENIX Security, 2008.
[8] J. Goebel and T. Holz. Rishi: identify bot
contaminated hosts by irc nickname evaluation. In
Proc. USENIX HotBots, 2007.
[9] C. Hu, S. Wang, J. Tian, B. Liu, Y. Cheng, and
Y. Chen. Accurate and eﬃcient traﬃc monitoring
using adaptive non-linear sampling method. In Proc.
IEEE Infocom, 2008.
[10] Infosecurity. Storm deadnet reanimates as waledac
botnet. http://infosecurity.us/?p=6262, 2009.
[11] B. Kang, E. C. Tin, and C. P. Lee. Towards complete
node enumeration in a peer-to-peer botnet. In Proc.
ACM AISACCS, 2009.
[12] A. Karasaridis, B. Rexroad, and D. Hoeﬂin.
Wide-scale botnet detection and characterization. In
Proc. USENIX HotBots, 2007.
[13] C. P. Lee. FRAMEWORK FOR BOTNET
EMULATION AND ANALYSIS. PhD thesis, Georgia
APPENDIX
A. TABLES
vars = 1
conditions = 1
var 1 := srcip.srcport.dstip.dstport.prot
counter var 1 := 8, 1000000, 0.01, 30
var 1 in (0, 20]: 0.95
Table 7: Condition for FlexSample
SRT
0.025
0.05
SRI−A/B
0.003/0.01
0.006/0.018
SRH−A/B/C
0.013/0.011/0.01
0.023/0.019/0.017
SRStorm SRW aledac
0.006
0.012
0.008
0.015
Table 8: Sampling Rate using condition in Figure 10 in FlexSample [2]
C, stepup
10, 0.8
10, 0.5
10, 1.2
5, 1
15, 1
SRActual
0.051
0.051
0.052
0.052
0.052
SRI−A/B
0.97/0.96
0.96/0.95
0.96/0.96
0.96/0.96
0.96/0.96
SRH−A/B/C
0.71/0.96/0.96
0.61/0.96/0.95
0.77/0.96/0.96
0.74/0.96/0.96
0.74/0.96/0.96
SRStorm SRW aledac
0.50
0.51
0.46
0.46
0.48
0.49
0.51
0.46
0.46
0.48
Table 9: Sampling Rate using Diﬀerent Parameters
SRT
0.01
0.025
0.05
0.075
0.1
For each P erExp, TP(bots/23), FP(noises/1460)
0.04
0.05
0.06
0.03
0.02
0.01
22%, 0.6% 30%, 2% 30%, 2% 39%, 3% 52%, 4% 52%, 5%
22%, 0.6% 39%, 1% 52%, 2% 87%, 3% 87%, 3% 87%, 5%
17%, 0.6% 43%, 1% 70%, 2% 87%, 3% 87%, 4% 87%, 4%
30%, 0.4% 57%, 1% 83%, 2% 87%, 3% 87%, 3% 87%, 4%
22%, 0.3% 65%, 1% 83%, 2% 96%, 2% 96%, 3% 100%, 4% 100%, 5% 100%, 6% 100%, 7% 100%, 8%
0.07
52%, 6%
87%, 6%
87%, 5%
87%, 6%
0.08
52%, 7%
87%, 7%
87%, 7%
96%, 6%
0.09
52%, 8%
87%, 7%
87%, 7%
96%, 7%
0.1
52%, 8%
87%, 8%
87%, 7%
96%, 8%
Table 10: Detection Rates of Cross-Epoch Correlation using FlexSample
SRT
0.01
0.025
0.05
0.075
0.1
1
For each P erExp, Percentage of Packets
0.02
0.03
0.09
0.06
0.05
0.04
0.1
1.5% 1.7% 3.3% 3.5% 4.1% 4.2% 5%
4.2% 6%
0.01
0.1% 0.4% 1%
0.2% 0.7% 1.2% 2.6% 2.9% 3.5% 3.8% 4%
0.6% 0.6% 1%
0.6% 0.6% 2%
0.2% 0.9% 1.3% 3.7% 4.3% 4.3% 4.6% 4.6% 5.5% 6.2%
0.7% 0.6% 1%
1.7% 1.9% 3.4% 3.3% 3.3% 4.9% 6.1%
1.8% 2.1% 2.2% 2.7% 2.7% 3.3% 3.5%
3%
3.2% 3.8% 4.5% 4.5% 4.4% 5%
0.07
0.08
Table 11: Percentage of Packets Investigated by Fine-Grained Detectors