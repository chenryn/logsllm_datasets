>
> [bvi](http://manpages.ubuntu.com/manpages/natty/man1/bvi.1.html)
## Solution
使用16进制编辑器查看文件16进制内容，windows环境下可以使用winhex、010editor，mac环境下可以使用hex friend。
可以看到到jpg文件格式的结尾`FF D9`之后还有一串字符，就是我们要的flag。
flag:`picoCTF{and_thats_how_u_edit_hex_kittos_8BcA67a2}`
# Truly an Artist
## Question
> Can you help us find the flag in this [Meta-> Material](https://2018shell2.picoctf.com/static/a386ed9a7534702173762cf536dce121/2018.png)?
> You can also find the file in /problems/truly-an-> artist_3_066d6319e350c1d579e5cf32e326ba02.
### Hint
> Try looking beyond the image.
>
> Who created this?
## Solution
文件属性隐藏了信息，windows下直接右键查看文件属性就可以看到，mac可以使用exiftool查看。
    ❯ exiftool 2018.png
    ExifTool Version Number         : 11.11
    File Name                       : 2018.png
    Directory                       : .
    File Size                       : 13 kB
    File Modification Date/Time     : 2018:10:28 01:06:38+08:00
    File Access Date/Time           : 2018:10:28 01:06:50+08:00
    File Inode Change Date/Time     : 2018:10:28 01:06:51+08:00
    File Permissions                : rw-r--r--    File Type                       : PNG
    File Type Extension             : png
    MIME Type                       : image/png
    Image Width                     : 1200
    Image Height                    : 630
    Bit Depth                       : 8
    Color Type                      : RGB
    Compression                     : Deflate/Inflate
    Filter                          : Adaptive
    Interlace                       : Noninterlaced
    Artist                          : picoCTF{look_in_image_7e31505f}
    Image Size                      : 1200x630
    Megapixels                      : 0.756
flag:`picoCTF{look_in_image_7e31505f}`
# now you don't
## Question
> We heard that there is something hidden in this
> [picture](https://2018shell2.picoctf.com/static/e7afc1873bc40e4d15f532b4859623e7/nowYouDont.png).
> Can you find it?
### Hint
> There is an old saying: if you want to hide the treasure, put it in plain
> sight. Then no one will see it.
>
> Is it really all one shade of red?
## Solution
还是用`stegsolve`打开文件，查看不同信道下的图片，发现flag在隐藏在红色0信道中。
flag:`picoCTF{n0w_y0u533_m3}`
# Ext Super Magic
## Question
> We salvaged a ruined Ext SuperMagic II-class mech recently and pulled the
> [filesystem](https://2018shell2.picoctf.com/static/bef2a485087cc9842099ac9bd3e0041f/ext-> super-magic.img) out of the black box. It looks a bit corrupted, but maybe
> there's something interesting in there. You can also find it in
> /problems/ext-super-magic_4_f196e59a80c3fdac37cc2f331692ef13 on the shell
> server.
### Hint
> Are there any [tools](https://en.wikipedia.org/wiki/Fsck) for diagnosing
> corrupted filesystems? What do they say if you run them on this one?
>
> How does a linux machine know what
> [type](https://www.garykessler.net/library/file_sigs.html) of file a
> [file](https://linux.die.net/man/1/file) is?
>
> You might find this [doc](http://www.nongnu.org/ext2-doc/ext2.html) helpful.
>
> Be careful with [endianness](https://en.wikipedia.org/wiki/Endianness) when
> making edits.
>
> Once you've fixed the corruption, you can use
> /sbin/[debugfs](https://linux.die.net/man/8/debugfs) to pull the flag file
> out.
## Solution
给了一个镜像文件，`file`命令查看一下，发现不能识别。`debugfs`可以识别出镜像损坏的部分。
    ❯ file ext-super-magic.img
    ext-super-magic.img: data
    ❯ debugfs ext-super-magic.img
    debugfs 1.44.1 (24-Mar-2018)
    Checksum errors in superblock!  Retrying...
    ext-super-magic.img: Bad magic number in super-block while opening filesystem
依据提示查看ext2镜像格式的[文档](https://wiki.osdev.org/Ext2#Extended_Superblock_Fields)，我们需要在`superblock`的第56和57字节之间插入`magic
number`，即`0xef53`。
    ❯ file fixed.img
    fixed.img: Linux rev 1.0 ext2 filesystem data, UUID=fad5d44e-2bb4-4c22-9410-79b020de84dd (large files)
修复成功，挂载打开，发现有很多的jpg文件，其中有一张`flag.jpg`里面就有flag。
flag:`picoCTF{a7DB29eCf7dB9960f0A19Fdde9d00Af0}`
# Lying Out
## Question
> Some odd
> [traffic](https://2018shell2.picoctf.com/static/abfdb498b12895694285a032f261c545/traffic.png)
> has been detected on the network, can you identify it? More
> [info](https://2018shell2.picoctf.com/static/abfdb498b12895694285a032f261c545/info.txt)
> here. Connect with `nc 2018shell1.picoctf.com 50875` to help us answer some
> questions.
### Hint
No Hints.
## Solution
需要分析异常访问流量，对照图片一个个看就可以了。
    You'll need to consult the file `traffic.png` to answer the following questions.
    Which of these logs have significantly higher traffic than is usual for their time of day? You can see usual traffic on the attached plot. There may be multiple logs with higher than usual traffic, so answer all of them! Give your answer as a list of `log_ID` values separated by spaces. For example, if you want to answer that logs 2 and 7 are the ones with higher than usual traffic, type 2 7.
        log_ID      time  num_IPs
    0        0  00:00:00     9552
    1        1  02:30:00    11573
    2        2  06:00:00    10381
    3        3  07:00:00    11674
    4        4  07:00:00    10224
    5        5  07:30:00    10966
    6        6  16:00:00     9685
    7        7  17:45:00    15875
    8        8  18:00:00    11889
    9        9  19:15:00    11935
    10      10  19:30:00    11191
    11      11  20:30:00     9952
    12      12  20:45:00     9898
    13      13  22:45:00    11609
    1 3 7 13
    Correct!
    Great job. You've earned the flag: picoCTF{w4y_0ut_ff5bd19c}
flag:`picoCTF{w4y_0ut_ff5bd19c}`
# What's My Name?
## Question
> Say my name, say [my
> name](https://2018shell2.picoctf.com/static/311cab88f8331b8cd1285ae0d90a43f1/myname.pcap).
### Hint
> If you visited a website at an IP address, how does it know the name of the
> domain?
## Solution
提示给的很明显了，我们需要查找和`DNS`有关的信息流，在wireshark过滤器中搜寻dns流量，就可以看到flag了。
同样也可以通过字符串搜索的方式找到flag，方法和`admin panel`一样。
# Malware Shopscore
> There has been some
> [malware](https://2018shell2.picoctf.com/static/344f0ee2dceb4bde53f90b39a6ad9297/plot.png)
> detected, can you help with the analysis? More
> [info](https://2018shell2.picoctf.com/static/344f0ee2dceb4bde53f90b39a6ad9297/info.txt)
> here. Connect with `nc 2018shell1.picoctf.com 18874`.
### Hint
No Hints.
## Solution
还是看图识别数据，和`Lying
Out`差不大多，第一个问题看图片找特征，第二个问题看哪个文件与题目问的文件的`jmp_count`和`add_count`的数值相近就选哪个。
    You'll need to consult the file `clusters.png` to answer the following questions.
    How many attackers created the malware in this dataset?
    5
    Correct!
    In the following sample of files from the larger dataset, which file was made by the same attacker who made the file 628e79cf? Indicate your answer by entering that file's hash.
           hash  jmp_count  add_count
    0  628e79cf       17.0       18.0
    1  1f2c7915       18.0       60.0
    2  6e7d554a       10.0       42.0
    3  a55f572c       30.0       37.0
    4  f118fcd7       36.0       13.0
    5  97b1425e       35.0       30.0
    6  a163e543       18.0       71.0
    7  ebaf5ccd       11.0       18.0
    8  9059414f       38.0       13.0
    9  c30ea3fe       18.0       37.0
    ebaf5ccd
    Correct!
    Great job. You've earned the flag: picoCTF{w4y_0ut_dea1794b}