对于其余的问题，只需键入 `y` 并按回车键。这将删除匿名用户、禁止 root 用户远程登录并删除 `test`（测试）数据库。
```
Remove anonymous users? (Press y|Y for Yes, any other key for No) : y
Success.
Normally, root should only be allowed to connect from
'localhost'. This ensures that someone cannot guess at
the root password from the network.
Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y
Success.
By default, MySQL comes with a database named 'test' that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.
Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y
- Dropping test database...
Success.
- Removing privileges on test database...
Success.
Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.
Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y
Success.
All done!
```
以上就是为 MySQL root 用户设置密码。
#### 2.2 更改 MySQL 超级用户的身份验证方法
默认情况下，Ubuntu 系统的 MySQL root 用户为 MySQL 5.7 版本及更新的版本使用插件 `auth_socket` 设置身份验证。尽管它增强了安全性，但是当你使用任何外部程序（例如 phpMyAdmin）访问数据库服务器时，也会变得更困难。要解决此问题，你需要将身份验证方法从 `auth_socket` 更改为 `mysql_native_password`。为此，请使用以下命令登录到你的 MySQL 提示符下：
```
$ sudo mysql
```
在 MySQL 提示符下运行以下命令，找到所有 MySQL 当前用户帐户的身份验证方法：
```
SELECT user,authentication_string,plugin,host FROM mysql.user;
```
输出结果：
```
+------------------|-------------------------------------------|-----------------------|-----------+
| user | authentication_string | plugin | host |
+------------------|-------------------------------------------|-----------------------|-----------+
| root | | auth_socket | localhost |
| mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |
| mysql.sys | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |
| debian-sys-maint | *F126737722832701DD3979741508F05FA71E5BA0 | mysql_native_password | localhost |
+------------------|-------------------------------------------|-----------------------|-----------+
4 rows in set (0.00 sec)
```
![](/data/attachment/album/202101/22/130447n9vpgdn9ndvmddrp.png)
如你所见，Mysql root 用户使用 `auth_socket` 插件进行身份验证。
要将此身份验证更改为 `mysql_native_password` 方法，请在 MySQL 提示符下运行以下命令。 别忘了用你选择的强大唯一的密码替换 `password`。 如果已启用 VALIDATION 插件，请确保已根据当前策略要求使用了强密码。
```
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
```
使用以下命令更新数据库：
```
FLUSH PRIVILEGES;
```
使用命令再次检查身份验证方法是否已更改：
```
SELECT user,authentication_string,plugin,host FROM mysql.user;
```
输出结果：
![](/data/attachment/album/202101/22/130449t4stkkjmkb5rus9m.png)
好！MySQL root 用户就可以使用密码进行身份验证来访问 `mysql shell`。
从 MySQL 提示符下退出：
```
exit
```
### 3. 安装 PHP
安装 PHP 请运行：
```
$ sudo apt install php libapache2-mod-php php-mysql
```
安装 PHP 后，在 Apache 文档根目录中创建 `info.php` 文件。通常，在大多数基于 Debian 的 Linux 发行版中，Apache 文档根目录为 `/var/www/html/` 或 `/var/www/`。Ubuntu 18.04 LTS 系统下，文档根目录是 `/var/www/html/`。
在 Apache 根目录中创建 `info.php` 文件：
```
$ sudo vi /var/www/html/info.php
```
在此文件中编辑如下内容：
```
```
然后按下 `ESC` 键并且输入 `:wq` 保存并退出此文件。重新启动 Apache 服务使更改生效。
```
$ sudo systemctl restart apache2
```
#### 3.1 测试 PHP
打开 Web 浏览器，然后导航到 URL [http://IP地址/info.php](http://xn--IP-im8ckc/info.php)。
你就将看到 PHP 测试页面。
![](/data/attachment/album/202101/22/130449t6xo2zdnk6x1bmk2.png)
通常，当用户向 Web 服务器发出请求时，Apache 首先会在文档根目录中查找名为 `index.html` 的文件。如果你想将 Apache 更改为 `php` 文件提供服务而不是其他文件，请将 `dir.conf` 配置文件中的 `index.php` 移至第一个位置，如下所示：
```
$ sudo vi /etc/apache2/mods-enabled/dir.conf
```
上面的配置文件（`dir.conf`） 内容如下：
```
DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
```
将 `index.php` 移动到最前面。更改后，`dir.conf` 文件内容看起来如下所示。
```
DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
```
然后按下 `ESC` 键并且输入 `:wq` 保存并关闭此文件。重新启动 Apache 服务使更改生效。
```
$ sudo systemctl restart apache2
```
#### 3.2 安装 PHP 模块
为了增加 PHP 的功能，可以安装一些其他的 PHP 模块。
要列出可用的 PHP 模块，请运行：
```
$ sudo apt-cache search php- | less
```
输出结果：
![](/data/attachment/album/202101/22/130450ujolkpoaejoeeekp.png)
使用方向键浏览结果。要退出，请输入 `q` 并按下回车键。
要查找任意 `php` 模块的详细信息，例如 `php-gd`，请运行：
```
$ sudo apt-cache show php-gd
```
安装 PHP 模块请运行：
```
$ sudo apt install php-gd
```
安装所有的模块（虽然没有必要），请运行：
```
$ sudo apt-get install php*
```
安装任何 `php` 模块后，请不要忘记重新启动 Apache 服务。要检查模块是否已加载，请在浏览器中打开 `info.php` 文件并检查是否存在。
接下来，你可能需要安装数据库管理工具，以通过 Web 浏览器轻松管理数据库。如果是这样，请按照以下链接中的说明安装 `phpMyAdmin`。
祝贺你！我们已经在 Ubuntu 服务器中成功配置了 LAMP 套件。
---
via: 
作者：[SK](https://www.ostechnix.com/author/sk/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[stevenzdg988](https://github.com/stevenzdg988) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出