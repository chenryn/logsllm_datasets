interface Principal {
String name();
// does this principal delegate authority to q?
boolean delegatesTo(principal q);
// is this principal prepared to authorize the
// closure c, given proof object authPrf?
boolean isAuthorized(Object authPrf,
Closure[this] c);
// methods to guide search for acts-for proofs
ActsForProof findProofUpTo(Principal p);
ActsForProof findProofDownTo(Principal q);
}
interface Closure[principal P] authority(P) {
// authority of P is required to
// invoke a Closure
Object invoke() where caller(P);
}
Figure 3: Signatures for application-speciﬁc principals
their authority. The method call p.delegatesTo(q)
returns true if and only if principal p delegates its au-
thority to principal q. The implementation of a prin-
cipal’s delegatesTo method is the sole determiner of
whether its authority is delegated. An acts-for proof
is a sequence of principals p1, . . . , pn, such that each
pi delegates its authority to pi+1, and is thus a proof
that pn can act for p1. Acts-for proofs are found using
the methods findProofUpTo and findProofDownTo
on the Principal interface, allowing an application to
efﬁciently guide a proof search. Once an acts-for proof
is found, it is veriﬁed using delegatesTo, cleanly sepa-
rating proof search from proof veriﬁcation.
The authority of principals is required for certain oper-
ations. For example, the authority of the principal Alice
is required to downgrade information labeled {Alice →
Bob ; >←>} to the label {Alice →Bob, Chuck ; >←
>} since a policy owned by Alice is weakened. The au-
thority of principals whose identity is known at compile
time may be obtained by these principals approving the
code that exercises their authority. However, for dynamic
principals, whose identity is not known at compile time,
a different mechanism is required. We have extended Jif
with a mechanism for dynamically authorizing closures.
An authorization closure is an implementation of the
interface jif.lang.Closure, shown in Figure 3. The
Closure interface has a single method invoke, and
is parameterized on a principal P. The invoke method
can only be called by code that possesses the author-
ity of principal P, as indicated by the annotation where
caller(P). Code that does not have the authority of
principal P can request the Jif run-time system to exe-
cute a closure for P; the run-time system will do so only
if P authorizes the closure.
The Principal interface provides a method for au-
It takes two argu-
thorizing closures, isAuthorized.
ments: a Closure object instantiated with the princi-
pal represented by the this object, and an application-
speciﬁc proof of authentication and/or authorization.
USENIX Association
16th USENIX Security Symposium
9
For example, the proof might be a password, a check-
able proof that the closure satisﬁes certain safety re-
quirements, or a collection of certiﬁcates or capabil-
ities. The application-speciﬁc implementation of the
isAuthorized method examines the closure and the
proof object, and returns true if the principal grants its
authority to the closure.
The Principal interface and authorization closures
provide a ﬂexible mechanism for web applications to
implement their own authentication and authorization
mechanisms. For example, in the case studies of Sec-
tion 4, closures are used to obtain the authority of ap-
plication users after they have authenticated themselves
with a password. Other implementations of principals
are free to choose other authentication and authorization
mechanisms, such as delegating the authorization deci-
sion to a XACML service. Dynamic authorization tests
introduce new information ﬂows that are tracked using
Jif’s security-type system. To prevent the usurpation of a
principal’s authority, the Jif run-time library cannot exe-
cute a closure unless appropriately authorized.
Legacy systems may have their own abstractions for
users, authentication, and authorization. Application-
speciﬁc principals allow legacy-system security abstrac-
tions to be integrated with web applications. For exam-
ple, when integrating with a database with access con-
trols, database users can be represented by suitable im-
plementations of the Principal interface; web appli-
cations can then execute queries under the authority of
speciﬁc database users, rather than executing all queries
using a distinguished web server user.
3.2 Dynamic labels and principals
Jif can represent labels at run time, using the primitive
type label for run-time label values. Following work
by Zheng and Myers [42], Jif 3.0’s type system has been
extended with more precise reasoning about run-time la-
bels and principals. It is now possible for the label of a
value (or a principal named in a label) to be located via a
ﬁnal access path expression. A ﬁnal access path expres-
sion is an expression of the form r.f1.. . ..fn, where r is
either a ﬁnal local variable (including ﬁnal method argu-
ments), or the expression this, and each fi is an access
to a ﬁnal ﬁeld. For example, in Figure 2, the signature
for the method Request.getParam(Input inp) indi-
cates that the return value has the label inp.L enforced
on it. Therefore, the Jif 3.0 compiler can determine that
the label of the result of the getParam method is found
in the object inp. The additional precision of Jif 3.0 is
needed to capture this relationship.
This additional precision allows SIF web applications
to express and enforce dynamic security requirements,
such as user-speciﬁed security policies. SIF web appli-
cations can also statically control information received
from the currently authenticated user, whose identity is
unknown at compile time.
The use of dynamic labels and principals introduces
new information ﬂows, because which label is enforced
on information may itself reveal information. Jif 3.0’s
type system tracks such ﬂows, and prevents dynamic la-
bels and principals from introducing covert channels.
3.3 Caching dynamic tests
To allow efﬁcient dynamic tests of label and principal
relations, the Jif 3.0 runtime system caches the results
of label and principal tests. Separate caches are main-
tained for positive and negative results of acts-for and
label tests. Care must be taken that the use of caches
does not introduce unsoundness. When a principal del-
egation is added, the negative acts-for and label caches
are cleared, as the new delegation may now enable new
relationships. When a principal delegation is removed,
entries in the positive acts-for and label caches that de-
pend upon that delegation are removed, as the relation-
ship may no longer hold.
When principals add or remove delegations,
they
should notify the Jif 3.0 runtime system, which updates
the caches appropriately. Although an incorrectly or ma-
liciously implemented principal p may fail to notify the
runtime system, lack of notiﬁcation can hurt only the
principal p, since p (and only p) determines to whom its
authority is delegated.
4 Case studies
Using SIF, we have designed and implemented two web
applications. The ﬁrst is a cross-domain information
sharing system that permits multiple users to exchange
messages. The second is a multi-user calendar applica-
tion that lets users create, edit, and view events.
This section describes the key functionality of these
applications,
their information security requirements,
and how we reﬂected these requirements in the imple-
mentations. Real applications must release information,
reducing its conﬁdentiality. In SIF, this is implemented
by downgrading to a lower security label. We discuss
and categorize downgrades that occur in the applications.
Based on our experience, we make some observations
about programming with information-ﬂow control.
4.1 Application descriptions
Cross-domain information sharing (CDIS). CDIS ap-
plications involve exchange of information between dif-
ferent entities with varying levels of trust between them.
For example, organizational policy may require the ap-
proval of a manager to share information between mem-
bers of certain departments. Many CDIS systems pro-
vide an automatic process; for example, they determine
10
16th USENIX Security Symposium
USENIX Association
what approval is needed, and delay information delivery
until approval is obtained.
We have designed and implemented a prototype CDIS
system. The interface is similar to a web-based email
application. The application allows users to log in and
compose messages to each other. A message may require
review and approval by other users before it is available
to its recipients. The review process is driven by a set of
system-wide mandatory rules: each rule speciﬁes for a
unique sender-recipient pair which users need to review
and approve messages. Once all appropriate reviewers
have approved a message, it appears in the recipient’s in-
box. Each user also has a “review inbox,” for messages
requiring their approval or rejection. In this prototype, all
messages are held centrally on the web server; a full im-
plementation would be integrated with an SMTP server.
Calendar. We have also implemented a multi-user cal-
endar system. Authenticated users may create, edit, and
view events. Events have a time, title, list of attendees,
and description. Events are controlled by expressive se-
curity policies, customizable by application users. A user
can edit an event only if the user acts for the creator of
the event (recall that the acts-for relation is reﬂexive). A
user may view the details of an event (title, attendees, and
description) if the user acts for either the creator or an at-
tendee. An event may specify a list of additional users
who are permitted to view the time of the event—to view
an event, a user must act for the creator, for an attendee,
or for a user on this list.
A user’s calendar is deﬁned to be the set of all events
for which the user is either the creator or an attendee.
When a user u views another user v’s calendar, u will
see only the subset of events on v’s calendar for which
u is permitted to see the details or time. If the user is
permitted to view the time, but not the details of an event,
the event is shown as “Busy.”
Measurements. Measurements of the applications’ code
are given in Figure 4, including non-blank non-comment
lines of code, lines with label annotations, and the num-
ber of declassify and endorse annotations, which in-
dicate intentional downgrading of information (see Sec-
tion 4.3).
Performance tests indicate that the overhead due to
the SIF framework is modest. We compared the calen-
dar case study application to a Java servlet we imple-
mented with similar functionality, using the same back-
end database; the Java servlet does not offer the security
assurances of the SIF servlet. Tests were performed us-
ing Apache Tomcat 5.5 in Redhat Linux, kernel version
2.6.17, running on a dual-core 2.2GHz Opteron proces-
sor with 3GB of memory. As the number of concur-
rent sessions varies between 1 and 245, the SIF servlet
exhibits at most a 29% reduction in requests processed
per second, showing that SIF does not dramatically af-
fect scalability. At peak throughput, the Java servlet pro-
cesses 2010 requests per second, compared with 1503
for the SIF servlet. Of the server processing time for a
request to the SIF servlet, about 17% is spent rendering
the Page object into HTML, and about 9% is spent per-
forming dynamic label and principal tests.
Implementing security requirements
4.2
Many of the security requirements of both applications
can be expressed using Jif’s security mechanisms, in-
cluding dynamic principals and security labels, and thus
automatically enforced by Jif and SIF’s static and run-
time mechanisms. Other security requirements are en-
forced programmatically.
Principals. Users of the applications are application-
speciﬁc principals (see Section 3.1). We factored out
much functionality from both applications relating to
user management, such as selecting users and logging
on and off. The sharing of code across both case studies
shows that SIF permits the design and implementation of
reusable components. Figure 4 also shows measurements
of the reusable user library.
The login process works as follows: a user and pass-
word are speciﬁed on the login screen, and if the pass-
word is correct, the authority of the user is dynamically
obtained via a closure; the closure is used to delegate the
user’s authority to the session principal, who can then act
on behalf of the now logged-in user.
In addition to user principals, the two applications de-
ﬁne principals CDISApp and CalApp, representing the
applications themselves. These model the security of
sensitive information that is not owned by any one user,
such as the set of application users. This information is
labeled {p→> ; p←>}, where p is one of CDISApp or
CalApp, and relevant portions are downgraded for use as
needed. In particular, information in the database has this
label. Since all information sent to and from the database
(including data used in SQL queries) must have this la-
bel, the authority of the application principal (CDISApp
or CalApp) is required to endorse information sent to the
database and to declassify information received from it.
This provides a form of access control, ensuring that only
code authorized by the application principal is able to ac-
cess the database. The need to explicitly endorse data
used in SQL queries also helps to prevent SQL injec-
tion attacks, by making the programmer aware of exactly
what information may be used in SQL queries.
Dynamic security labels. The security labels of Jif
3.0 are expressive enough to capture the case studies’
information-sharing requirements. In particular, we are
able to model the conﬁdentiality and review require-
ments for CDIS messages by enforcing appropriate la-
bels on the messages. For instance, suppose sender s
USENIX Association
16th USENIX Security Symposium
11
Lines
1325
1779
925
Annotated
Lines
277
443
283
CDIS
Calendar
User
Downgrade
Annotations
Access control
Functional downgrades
Imprecision
Application
76
73
31
11
12
3
0
0
1
3
5
4
Total
14
17
8
Figure 4: Summary of case studies.
is sending a message to recipient t. The conﬁdentiality