Who’s&this…&guy&
• 10&years&on&the&defensive&side&
• File&analysis&&&RE&
• Recently&doing&research&using&Machine&
Learning&
Level&Se?ng&
• &ROP&
• Technique&to&bypass&nonFexecutable&memory&
• Bounce&around&in&memory&execuJng&small&
gadgets&that&typically&end&with&a&return&
instrucJon&
• PIN&
• Pin&is&a&dynamic&binary&instrumentaJon&
framework&for&the&x86&and&x86F64&
• Does&not&require&recompiling&of&source&&&&&&&&&&&&
code&and&can&support&instrumenJng&&&&&&&&&&
programs&that&dynamically&generate&code&
Basic&Idea&
• A&whitelist&for&oﬀsets&that&can&be&a&&&&&&&&&&&&
target&of&indirect&branch&or&ret&
• We&know&valid&targets&for&calls&and&rets&
• FuncJons&
• InstrucJons&aUer&call&instrucJon&
• If&an&indirect&call&or&a&ret&goes&to&a&&&&&&&&&&&&&&&&&&&&&&&&
diﬀerent&locaJon,&then&ROP&
• Store&the&oﬀset&to&these&locaJons&
How&Do&We&Get&Those?&
• BranchTargetDetector&pintool&
• When&DLL&is&loaded,&exported&funcJons&are&
analyzed&
• All&calls&and&returns&are&instrumented&&&&&&&&&&&&&
as&well&
• Great&because&we&get&actual&values&
• Not&so&great&because&you&only&get&&&&&&&&&&&&
values&from&funcJons&pin&can&detect&&&&&&&&&&&&
and&what&it&actually&executes&
BranchTargetDetector&
• Pros&
• We&get&real,&actual&used&values&
• Cons&
• Not&the&fastest&thing&
• Only&get&values&from&funcJons&pin&can&&&&&&&&&&&
detect&and&what&it&actually&executes&
• If&DLL&isn’t&loaded,&you&don’t&get&data&&&&&&&&&&&&&&&&&&&
for&it&
How&Else&Can&We&Get&Those?&
• pyew&
• Much&be\er&at&detecJng&funcJons&
• Can&bulk&run&all&DLLs&
Have&Data,&Now&What?&
• Store&oﬀsets&in&ﬁle&by&md5&hash&of&dll&
• Allows&for&handling&of&diﬀerent&versions&of&the&
same&dll&
ROPDetector&
• When&a&DLL&is&loaded,&load&the&white&list&for&
that&DLL&
• Instrument&all&indirect&calls&and&RETs&and&alert&
when&target&is&not&on&the&white&list&
Example&1&
• Adobe&Reader&9.3&on&Windows&XP&
• 32dbd816b0b08878bd332eee299bbec4&
• CVEF2010F2883&
• StackFbased&buﬀer&overﬂow&in&CoolType.dll&
DetecJon!&
C:\Program Files\Adobe\Reader 
9.0\Reader\icucnv36.dll 
0x4a80cb3f: ret  
Target: 0x4a82a714 (0x2a714) 
&
Yay?&
• We&detected&one&of&the&ROP&chains&
• Only&1&
Let’s&Take&A&Look&
Let’s&Take&A&Look&
Let’s&Take&A&Look&
Let’s&Take&A&Look&
Why&Only&One?&
● Dies&on&stack&pivot&
● Pin&aﬀects&memory&layout&
● (run&everything&in&pin?)&
&
How&Would&We&Have&Done?&
• 45&chains&in&ROP&sequence&
• Only&14&unique&addresses&
• 2&indirect&calls,&43&returns&
• 3&of&the&14&addresses&on&whitelist&
• Each&address&only&called&once&
• 42&of&45&chains&would&be&detected&
&
Example&2&
• Adobe&Reader&9.5&on&Windows&XP&
• 6776bda19a3a8ed4c2870c34279dbaa9&
• CVEF2013F3346&
• ToolBu\on&Use&AUer&Free&
Example&2&Results&
• Nothing,&just&Adobe&crashing&
• Pin&messed&up&memory&layout&again&
The&Neighborhood&Of&Make&Believe&
• 208&chains&in&ROP&sequence&
• Dominated&by&191&chain&sled&
• Only&15&unique&addresses&
• All&returns&
• 3&of&the&15&addresses&on&whitelist&
• 204&of&208&chains&would&be&detected&
A&Li\le&Math&
• Probability&of&detecJng&at&least&one&address&
(assuming&11/14&detecJons&is&average)&
&
Unique Addresses 
Probability of Detection 
1 
78.6% 
2 
95.4% 
3 
99.0% 
4 
99.8% 
5 
99.96% 
10 
99.999980% 
A&Li\le&More&Math&&&
• Probability&of&detecJng&at&least&one&address&
(assuming&50%&detecJon&rate)&
&
Unique Addresses 
Probability of Detection 
1 
50.0% 
2 
75.0% 
3 
87.5% 
4 
93.8% 
5 
96.9% 
10 
99.9% 
LimitaJons&
• Pin&
• Breaks&on&stack&pivot&
• Slow&
• Doesn’t&handle&Jump&Oriented&&&&&&
Programming&(JOP)&
Possible&Improvements&
• Smarter&instrumentaJon&
• Push&analysis&into&a&diﬀerent&thread&
• Figure&out&heap&problem&
• Check&for&JOP&
Smarter&Ways&
• Debugger?&
• Detours?&
• Monitor&Last&Branch&MSRs?&
• kbouncer&
Thanks!&
•  h\ps://github.com/trogdorsey/rop&
•  h\ps://soUware.intel.com/enFus/arJcles/pinFaFdynamicFbinaryF
instrumentaJonFtool&
•  h\ps://code.google.com/p/pyew/&
•  h\p://www.cs.columbia.edu/~vpappas/papers/kbouncer.pdf&