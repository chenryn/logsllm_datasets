### Introduction
- **Experience**: 10 years in defensive cybersecurity.
- **Specializations**: File analysis and Reverse Engineering (RE).
- **Recent Focus**: Research using Machine Learning for security applications.

### Return-Oriented Programming (ROP)
- **Definition**: A technique to bypass non-executable memory protections.
- **Mechanism**: It involves bouncing around in memory, executing small gadgets that typically end with a return instruction.

### PIN
- **Description**: PIN is a dynamic binary instrumentation framework for x86 and x86-64 architectures.
- **Features**:
  - No need to recompile source code.
  - Supports the instrumentation of programs that dynamically generate code.

### Basic Idea
- **Whitelist**: A list of valid offsets that can be targets of indirect branches or returns.
- **Valid Targets**:
  - Function addresses.
  - Instructions following call instructions.
- **Detection**: If an indirect call or return goes to a different location, it may indicate ROP.
- **Storage**: Store the offsets of these locations.

### How to Obtain Valid Offsets
- **BranchTargetDetector (PIN Tool)**:
  - **Analysis**: When a DLL is loaded, exported functions are analyzed.
  - **Instrumentation**: All calls and returns are instrumented.
  - **Pros**:
    - Real, actual used values.
  - **Cons**:
    - Not the fastest method.
    - Only gets values from functions PIN can detect and what it actually executes.
    - If a DLL isn't loaded, no data is collected for it.

- **pyew**:
  - **Advantages**:
    - Better at detecting functions.
    - Can bulk run all DLLs.

### Data Management
- **Storage**: Store offsets in a file by the MD5 hash of the DLL.
- **Benefits**:
  - Handles different versions of the same DLL.

### ROPDetector
- **Functionality**:
  - Loads the whitelist for a DLL when it is loaded.
  - Instruments all indirect calls and returns, alerting when a target is not on the whitelist.

### Example 1: Adobe Reader 9.3 on Windows XP
- **Details**:
  - MD5: 32dbd816b0b08878bd332eee299bbec4
  - Vulnerability: CVE-2010-2883 (Stack-based buffer overflow in CoolType.dll)
  - Detection: C:\Program Files\Adobe\Reader 9.0\Reader\icucnv36.dll 0x4a80cb3f: ret Target: 0x4a82a714 (0x2a714)
- **Result**:
  - Detected one ROP chain.
  - Issue: Dies on stack pivot.
  - Impact: PIN affects memory layout.

### Analysis
- **ROP Chains**:
  - 45 chains in the sequence.
  - 14 unique addresses.
  - 2 indirect calls, 43 returns.
  - 3 of the 14 addresses on the whitelist.
  - Each address called only once.
  - 42 out of 45 chains would be detected.

### Example 2: Adobe Reader 9.5 on Windows XP
- **Details**:
  - MD5: 6776bda19a3a8ed4c2870c34279dbaa9
  - Vulnerability: CVE-2013-3346 (ToolButton Use After Free)
- **Result**:
  - Adobe crashes.
  - PIN messes up memory layout again.

### Theoretical Analysis
- **ROP Chains**:
  - 208 chains in the sequence.
  - Dominated by a 191-chain sled.
  - 15 unique addresses.
  - All returns.
  - 3 of the 15 addresses on the whitelist.
  - 204 out of 208 chains would be detected.

### Probability of Detection
- **Assuming 11/14 detection rate**:
  - 1 Unique Address: 78.6%
  - 2 Unique Addresses: 95.4%
  - 3 Unique Addresses: 99.0%
  - 4 Unique Addresses: 99.8%
  - 5 Unique Addresses: 99.96%
  - 10 Unique Addresses: 99.999980%

- **Assuming 50% detection rate**:
  - 1 Unique Address: 50.0%
  - 2 Unique Addresses: 75.0%
  - 3 Unique Addresses: 87.5%
  - 4 Unique Addresses: 93.8%
  - 5 Unique Addresses: 96.9%
  - 10 Unique Addresses: 99.9%

### Limitations
- **PIN**:
  - Breaks on stack pivot.
  - Slow.
  - Does not handle Jump Oriented Programming (JOP).

### Possible Improvements
- **Smarter Instrumentation**:
  - Push analysis into a different thread.
  - Figure out heap problem.
  - Check for JOP.
- **Alternative Methods**:
  - Debugger.
  - Detours.
  - Monitor Last Branch MSRs.
  - kbouncer.

### References
- [GitHub: rop](https://github.com/trogdorsey/rop)
- [Intel Software: PIN - Dynamic Binary Instrumentation Tool](https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool)
- [Google Code: pyew](https://code.google.com/p/pyew/)
- [Columbia University: kbouncer](http://www.cs.columbia.edu/~vpappas/papers/kbouncer.pdf)

Thank you!