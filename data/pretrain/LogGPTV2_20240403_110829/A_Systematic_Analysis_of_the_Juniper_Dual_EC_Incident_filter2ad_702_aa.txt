title:A Systematic Analysis of the Juniper Dual EC Incident
author:Stephen Checkoway and
Jacob Maskiewicz and
Christina Garman and
Joshua Fried and
Shaanan Cohney and
Matthew Green and
Nadia Heninger and
Ralf-Philipp Weinmann and
Eric Rescorla and
Hovav Shacham
A Systematic Analysis of the Juniper Dual EC Incident
Stephen Checkoway*, Shaanan Cohney**, Christina Garman† Matthew Green†, Nadia
Jacob Maskiewicz††, Eric Rescorla††, Hovav Shacham††, Ralf-Philipp Weinmann
††UC San Diego, **University of Pennsylvania, † Johns Hopkins University * University of
Heninger**,
Illinois at Chicago
Abstract
In December 2015, Juniper Networks announced that
unknown attackers had added unauthorized code to
ScreenOS, the operating system for their NetScreen VPN
routers. This code created two vulnerabilities: an authen-
tication bypass that enabled remote administrative access,
and a second vulnerability that allowed passive decryption
of VPN trafﬁc. Reverse engineering of ScreenOS binaries
revealed that the ﬁrst of these vulnerabilities was a con-
ventional back door in the SSH password checker. The
second is far more intriguing: a change to the Q parameter
used by the Dual EC pseudorandom number generator. It
is widely known [7, 33] that Dual EC has the unfortunate
property that an attacker with the ability to choose Q can,
from a small sample of the generator’s output, predict all
future outputs. In a 2013 public statement, Juniper noted
the use of Dual EC but claimed that ScreenOS included
countermeasures that neutralized this form of attack.
In this work, we report the results of a thorough inde-
pendent analysis of the ScreenOS randomness subsystem,
as well as its interaction with the IKE VPN key estab-
lishment protocol. Due to apparent ﬂaws in the code,
Juniper’s countermeasures against a Dual EC attack are
never executed. Moreover, by comparing sequential ver-
sions of ScreenOS, we identify a cluster of additional
changes that were introduced concurrently with the in-
clusion of Dual EC in a single 2008 release. Taken as a
whole, these changes render the ScreenOS system vul-
nerable to passive exploitation by an attacker who selects
Q. We demonstrate this by installing our own parame-
ters, and showing that it is possible to passively decrypt
a single IKE handshake and its associated VPN trafﬁc in
isolation without observing any other network trafﬁc.
1
Random number generation is critical to the implemen-
tation of cryptographic systems. Random numbers are
used for a variety of purposes, including generation of
nonces and cryptographic keys. Because generating a
sufﬁcient quantity of true random numbers via physical
means is inconvenient, cryptographic systems typically
include deterministic pseudorandom number generators
(PRNGs) which expand a small amount of secret internal
Introduction
state into a stream of values which are intended to be
indistinguishable from true randomness.
Historically, random number generators have been a
major source of vulnerabilities [6, 13, 16, 22, 36]. This
is because an attacker who is able to predict the output
of a PRNG will often be able to break any protocol im-
plementation dependent on it. For instance, they may
be able to predict any cryptographic keys (which should
remain secret) or nonces (which should often remain un-
predictable). Past PRNG failures have resulted from a
failure to seed with sufﬁciently random data [13, 16] or
from algorithms which are not secure, in the sense that
they allow attackers to recover the internal state of the
algorithm from some public output.
A number of Juniper NetScreen-branded VPN/Fire-
walls use the NSA-designed Dual EC PRNG [4, 21].
Dual EC has the problematic property that an attacker
who knows the discrete logarithm of one of the input pa-
rameters (Q) with respect to a generator point, and is able
to observe a small number of consecutive bytes from the
PRNG, can then compute the internal state of the gener-
ator and thus predict all future output. In December of
2015, Juniper reported [17] that at some point in 2012,
an attacker had modiﬁed the code in their version control
system to substitute an alternate value of Q in place of
the initial Q value generated by Juniper. In this paper, we
report on the impact of this change — based on extensive
reverse engineering and experimental testing — and of
the broader security properties of the Juniper NetScreen
PRNG design.
Summary of our ﬁndings. Our analysis shows that the
current Juniper ScreenOS PRNG implementation is vul-
nerable to efﬁcient state recovery attacks conducted by
an attacker who selects the Q value. Surprisingly, this
ﬁnding is not an inevitable result of the known attacks on
Dual EC, but instead stems from a collection of design
choices made by Juniper in 2008.
Between ScreenOS 6.1 and 6.2.0r1, we identiﬁed a
constellation of changes made to both the PRNG and
IKE implementations that substantially predispose the
IKE/IPSec implementation to state recovery attacks on
the Dual EC generator. These changes, which were intro-
duced concurrently with the addition of Dual EC, create a
“perfect storm” of vulnerabilities that combine to produce
a highly effective single-handshake exploit against the
ScreenOS IKE implementation. Moreover, we identify
several implementation decisions that superﬁcially appear
to reduce exploitability, but that on closer examination
actually facilitate the attack.
To validate the accuracy of our ﬁndings, we implement
a proof of concept exploit against a ScreenOS 6.2 device
and show that when the device is conﬁgured with a Q
parameter of our choosing, our attacks can efﬁciently de-
crypt VPN connections from a single handshake, without
seeing any other trafﬁc. Moreover, we discuss the im-
pact of different IPSec versions and conﬁgurations on the
attack, and show that conﬁguration decisions can substan-
tially affect the exploitability of the device, in some cases
rendering the device entirely secure.
Outline of the paper. The remainder of this paper is
structured as follows.
In Section 2 we provide back-
ground on the Dual EC PRNG. In Section 3 we discuss
Juniper’s vulnerability disclosure and the research ques-
tions it raises. In Sections 4 and 5 we describe the details
of the ScreenOS PRNG and its interaction with the IKE
key exchange protocol. In Section 6 we describe a prac-
tical exploit of the NetScreen IPsec functionality under
the assumption that the attacker knows the discrete log of
Q. In Section 7, we discuss how one can remotely detect
vulnerable ScreenOS versions. In Section 8 we discuss
the broader implications of this issue.
2 Dual EC Background
In this section, we describe the Dual EC pseudoran-
dom number generator and the attack on it described
by Shumow and Ferguson [33], with some details on how
ScreenOS implements Dual EC.
Dual EC comes in a variety of forms which affect the
difﬁculty of the Shumow–Ferguson attack. There are
two slightly different NIST standards for Dual EC, which
also contain optional features. There are three standard
elliptic curves which can be used, and implementors are
free to make a number of software engineering choices.
For concreteness, we describe Dual EC as implemented
in Juniper’s ScreenOS below. For more details on other
forms of Dual EC, see Checkoway et al. [7].
Dual EC has three public parameters: the elliptic curve,
and two distinct points on the curve called P and Q.
ScreenOS uses the elliptic curve P-256 and sets P to be
P-256’s standard generator as speciﬁed in NIST Special
Publication 800-90A [28]. That standard also speciﬁes
the Q to use, but ScreenOS uses Juniper’s own elliptic
curve point instead. The ﬁnite ﬁeld over which P-256
is deﬁned has roughly 2256 elements so points on P-256
consist of pairs of 256-bit numbers (x,y) that satisfy the
elliptic curve equation. The internal state of Dual EC is a
single 256-bit number s.
In ScreenOS, Dual EC is always used to generate 32
bytes of output at a time. Let x(·) be the function that re-
turns the x-coordinate of an elliptic curve point; (cid:107) be con-
catenation; lsbn(·) be the function that returns the least-
signiﬁcant n bytes of its input in big-endian order; and
msbn(·) be the function that returns the most-signiﬁcant
n bytes. Starting with an initial state s0, Dual EC gener-
ates 32 pseudorandom bytes output and a new state s2 as
follows,
s1 = x(s0P)
r1 = x(s1Q)
s2 = x(s1P)
r2 = x(s2Q)
output = lsb30(r1) (cid:107) msb2
(cid:0)lsb30(r2)(cid:1),
where sP and sQ denote scalar multiplication.
In 2007, Shumow and Ferguson [33] noted that if the
discrete logarithm e = logP Q (i.e., the integer e such that
eP = Q) were known, then seeing output would reveal
the Dual EC internal state. The key insight is that one
can obtain d = logQ P = e−1 mod n, where n is the group
order, and then multiplying the point s1Q by d yields the
internal state x(d · s1Q) = x(s1P) = s2. Although s1Q is
itself not known, 30 of the 32 bytes of its x-coordinate
(namely r1) is the ﬁrst 30-bytes of output.
This insight gives rise to the simple procedure to re-
cover s2. For each of the 216 256-bit integers r such that
lsb30(r) equals the ﬁrst 30-bytes of output, check if r is
a valid x-coordinate of a point on the curve.1 In other
words, ﬁnd a point R such that x(R) = r. Roughly half of
the r values will be valid x-coordinates.2 For each such R,
compute s(cid:48) = x(dR) and r(cid:48) = x(s(cid:48)Q). If the correct r = r1
is chosen, msb2
bytes of output and s(cid:48) = s2, the new internal state.
(cid:0)lsb30(r(cid:48))(cid:1) will be equal to the last two
(cid:0)lsb30(r(cid:48))(cid:1) = lsb2(output) and each such r corre-
The one complication with the above procedure
is that there may be several values of r such that
msb2
sponds to a potential internal state s(cid:48). In practice, this
is a minor complication as it’s exceedingly rare for there
to be more than three such r.
3 History of the Juniper Incident
After NIST recommended against the use of Dual EC [28]
in response to post-Snowden concerns about the default
value of Q, Juniper published a knowledge base arti-
cle [19] explaining their use of Dual EC in ScreenOS, the
operating system powering its NetScreen ﬁrewall appli-
ances, stating that although those products used Dual EC:
1This procedure is sometimes called point decompression and in-
volves computing a modular square root.
2Each r that is an x-coordinate of some point R is also an x-coordinate
of the point −R. It doesn’t matter which point is chosen as R and −R
differ only in the “sign” of their y-component.
2
of
use
does make
the
ScreenOS
Dual_EC_DRBG standard, but is designed to
not use Dual_EC_DBRG as its primary random
number generator. ScreenOS uses it in a way
that should not be vulnerable to the possible
issue that has been brought to light. Instead of
using the NIST recommended curve points it
uses self-generated basis points and then takes
the output as an input to FIPS/ANSI X.9.31
(sic) PRNG, which is the random number
generator used in ScreenOS cryptographic
operations.
The ﬁrst of these countermeasures — self-generated ba-
sis points3 — is not completely satisfactory because it de-
pends on Juniper generating Q in such a way that nobody
knows its discrete log, which they have not veriﬁably
demonstrated. However, the second countermeasure —
if implemented correctly — defends against the current
publicly-known attacks on Dual EC because those attacks
rely on having Dual EC output rather than a one-way
function of that output, so even an attacker who knew the
discrete log of Q would be unable to recover the PRNG
state.
This was the situation in December 17, 2015 when
Juniper issued an out-of-cycle security bulletin [17] for
two security issues in ScreenOS:
• CVE-2015-77554 (“Administrative Access”)
• CVE-2015-77565 (“VPN Decryption”)
This announcement was particularly interesting be-
cause it was not the usual report of developer error, but
rather of malicious code which had been inserted into
ScreenOS by an unknown attacker:
During a recent internal code review, Juniper
discovered unauthorized code in ScreenOS that
could allow a knowledgeable attacker to gain
administrative access to NetScreen® devices
and to decrypt VPN connections. Once we
identiﬁed these vulnerabilities, we launched an
investigation into the matter, and worked to
develop and issue patched releases for the latest
versions of ScreenOS.
The “Administrative Access” vulnerability was deter-
mined to be a back door in the SSH [37] daemon that
3 While the Juniper article says “points”, actually only Q differs
from the NIST default values. Juniper’s implementation uses the default
P value
4http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-
2015-7755
2015-7756
5http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-
would have allowed anyone who knew the correct pass-
word to log in with administrative access. This issue
has been extensively discussed by Moore [27]. The sec-
ond issue, however, turns out to be far more technically
interesting. According to Juniper’s advisory:
VPN Decryption (CVE-2015-7756) may al-
low a knowledgeable attacker who can monitor
VPN trafﬁc to decrypt that trafﬁc. It is indepen-
dent of the ﬁrst issue.
This issue affects ScreenOS 6.2.0r15 through
6.2.0r18 and 6.3.0r12 through 6.3.0r20. No
other Juniper products or versions of ScreenOS
are affected by this issue.
There is no way to detect that this vulnerability
was exploited.
While both Juniper’s advisory and the CVE itself are
short on details, comparison of the binaries for the vulner-
able and patched versions reveal that the relevant change
to the code is a change in the value of Q and the corre-
sponding test vectors [3]. The natural inference, therefore,
is that the attacker changed Q away from Juniper’s origi-
nal version (which is itself different from the default Q in