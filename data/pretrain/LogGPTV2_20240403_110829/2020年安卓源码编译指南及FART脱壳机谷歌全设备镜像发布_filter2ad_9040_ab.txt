## FART自动脱壳机全设备镜像制作
所谓内存型脱壳机，就是直接修改解释器的具体实现源码，在解释器的内存中直接将捕获到的`dex`对象给写到存储器中，下述代码是`FART`组件一之`dump`
`dex`的核心源码：
    const DexFile *dex_file = artmethod->GetDexFile();
    const char *methodname =
        PrettyMethod(artmethod).c_str();
    //确定dex大小
    const uint8_t *begin_ = dex_file->Begin();
    size_t size_ = dex_file->Size();
    memset(dexfilepath, 0, 2000);
    int size_int_ = (int) size_;
    //构造路径
    memset(dexfilepath, 0, 2000);
    sprintf(dexfilepath, "%s", "/sdcard/fart");
    mkdir(dexfilepath, 0777);
    //构造文件名
    memset(dexfilepath, 0, 2000);
    sprintf(dexfilepath, "/sdcard/fart/%s",
            szProcName);
    mkdir(dexfilepath, 0777);
    //创建文件
    memset(dexfilepath, 0, 2000);
    sprintf(dexfilepath,
            "/sdcard/fart/%s/%d_dexfile.dex",
            szProcName, size_int_);
    int dexfilefp = open(dexfilepath, O_RDONLY, 0666);
    if (dexfilefp > 0) {
            close(dexfilefp);
            dexfilefp = 0;
    //写入dex内容
    } else {
            dexfilefp =
                open(dexfilepath, O_CREAT | O_RDWR,
                      0666);
            if (dexfilefp > 0) {
                    write(dexfilefp, (void *) begin_,
                          size_);
                    fsync(dexfilefp);
                    close(dexfilefp);
            }
    }
下方代码为`FART`第二组件构建主动调用链之后`dump`方法体并写入`bin`文件的核心代码：
    const DexFile::CodeItem * code_item =
          artmethod->GetCodeItem();
      if (LIKELY(code_item != nullptr)) {
              int code_item_len = 0;
              uint8_t *item = (uint8_t *) code_item;
              //获取方法体大小
              if (code_item->tries_size_ > 0) {
                      const uint8_t *handler_data =
                          (const uint8_t *) (DexFile::
                                              GetTryItems
                                              (*code_item,
                                              code_item->
                                              tries_size_));
                      uint8_t *tail =
                          codeitem_end(&handler_data);
                      code_item_len =
                          (int) (tail - item);
              } else {
                      code_item_len =
                          16 +
                          code_item->
                          insns_size_in_code_units_ * 2;
              }
              //根据方法索引写入文件
              memset(dexfilepath, 0, 2000);
              int size_int = (int) dex_file->Size();  // Length of data
              uint32_t method_idx =
                  artmethod->get_method_idx();
              sprintf(dexfilepath,
                      "/sdcard/fart/%s/%d_%ld.bin",
                      szProcName, size_int, gettidv1());
              int fp2 =
                  open(dexfilepath,
                        O_CREAT | O_APPEND | O_RDWR,
                        0666);
              if (fp2 > 0) {
                      lseek(fp2, 0, SEEK_END);
                      memset(dexfilepath, 0, 2000);
                      int offset = (int) (item - begin_);
                      sprintf(dexfilepath,
                              "{name:%s,method_idx:%d,offset:%d,code_item_len:%d,ins:",
                              methodname, method_idx,
                              offset, code_item_len);
                      int contentlength = 0;
                      while (dexfilepath[contentlength]
                              != 0)
                              contentlength++;
                      write(fp2, (void *) dexfilepath,
                            contentlength);
                      long outlen = 0;
                      //对方法体进行编码，防止打开是乱码，使用fart.py进行还原时，会解码
                      char *base64result =
                          base64_encode((char *) item,
                                        (long)
                                        code_item_len,
                                        &outlen);
                      write(fp2, base64result, outlen);
                      write(fp2, "};", 2);
                      fsync(fp2);
                      close(fp2);
                      if (base64result != nullptr) {
                              free(base64result);
                              base64result = nullptr;
                      }
              }
      }
### 加入`FART`代码
这一步就非常简单了，相应的将`art`、`frameworks`、`libcore`目录对应路径下的文件替换掉`aosp`源码里的文件即可，然后重新`make
-j8`一遍，即可得到带脱壳功能的`aosp`镜像，也就是`FART`脱壳机。
寒冰大佬开源的是`6.0`的源码，大家手动编译`aosp6.0`的`FART`脱壳机是没有问题的。
###  制作镜像刷机
去[官网](https://developers.google.com/android/images#bullhead)（需科学上网）下载原设备的线刷包，注意下载对应设备并且与`aosp`版本相对应的版本，比如我们要下载`nexus5x`的`aosp6.0`版本，就是下图所示：
手机如何线刷这个不写了吧？百度一下全都是。具体来说就是手机进`bootloader`，电脑上直接运行`flash-all.sh`就完事儿，当然路径里得有`fastboot`命令。
线刷包解压出来，里面会还有个系统`zip`包，这个系统`zip`再解压出来，才是各种系统的`img`。
这时候把我们编译出来的各种`img`，替换掉原`zip`包的`img`，就可以刷进系统了。
## 总结
总结一下，难点在于编译`aosp`系统，只要会编译系统，改源码放进去其实很简单，当然最难的还是如何改源码，这个功力就更深了，再次膜寒冰大佬。
大家如果在编译、刷机和`FART`脱壳方面有疑问，欢迎联系我共同探讨。后续我也会进一步分享一些使用`FART`脱壳机进行脱壳的实际操作，敬请期待。