HINT:  Set the key using PGENCRYPTIONKEY environment variable.
FATAL:  data encryption could not be initialized
LOG:  database system is shut down
Optionally if you want to implement a custom procedure for looking up the 
encryption key using pgcrypto.keysetup_command postgresql.conf parameter. 
When this parameter is present it will be executed by PostgreSQL at startup 
and the output processed. Expected output is a string containing 
encryptionkey= and the 256bit key encoded as a hex string (64 hex 
characters):
    "encryptionkey=" ( [0-9a-f]{64} )
To calculate the key from the passphrase hash it using SHA-256.
```
秘钥传输相关的代码    
```
void
_PG_init(void)
{
        EncryptionRoutines routines;
        routines.SetupEncryption = &pgcrypto_encryption_setup;
        routines.EncryptBlock = &pgcrypto_encrypt_block;
        routines.DecryptBlock = &pgcrypto_decrypt_block;
        register_encryption_module("pgcrypto", &routines);
        DefineCustomStringVariable("pgcrypto.keysetup_command",
                           "Command to fetch database encryption key",
                           "This command will be run at database startup to set up database"
                           " encryption key.",
                           &pgcrypto_keysetup_command,
                           "",
                           PGC_POSTMASTER,
                           0,
                           NULL,
                           NULL,
                           NULL);
        EmitWarningsOnPlaceholders("pgcrypto");
}
const char* encryptionkey_prefix = "encryptionkey=";
const int encryption_key_length = 32;
static bool pgcrypto_run_keysetup_command(uint8 *key)
{
        FILE *fp;
        char buf[encryption_key_length*2+1];
        int bytes_read;
        int i;
        if (pgcrypto_keysetup_command == NULL)
                return false;
        if (!strlen(pgcrypto_keysetup_command))
                return false;
        elog(INFO, "Executing \"%s\" to set up encryption key", pgcrypto_keysetup_command);
        fp = popen(pgcrypto_keysetup_command, "r");
        if (fp == NULL)
                elog(ERROR, "Failed to execute pgcrypto.keysetup_command \"%s\"",
                        pgcrypto_keysetup_command);
        if (fread(buf, 1, strlen(encryptionkey_prefix), fp) != strlen(encryptionkey_prefix))
                elog(ERROR, "Not enough data received from pgcrypto.keysetup_command");
        if (strncmp(buf, encryptionkey_prefix, strlen(encryptionkey_prefix)) != 0)
                elog(ERROR, "Unknown data received from pgcrypto.keysetup_command");
        bytes_read = fread(buf, 1, encryption_key_length*2 + 1, fp);
        if (bytes_read  encryption_key_length*2)
        {
                if (buf[encryption_key_length*2] != '\n')
                        elog(ERROR, "Encryption key too long '%s' %d.", buf, buf[encryption_key_length*2]);
        }
        while (fread(buf, 1, sizeof(buf), fp) != 0)
        {
                /* Discard rest of the output */
        }
        pclose(fp);
        return true;
}
```
加密算法用的是pgcrypto自带的：       
contrib/pgcrypto/rijndael.c  
```
/* This is an independent implementation of the encryption algorithm:   */
/*                                                                                                                                              */
/*                 RIJNDAEL by Joan Daemen and Vincent Rijmen                                   */
/*                                                                                                                                              */
/* which is a candidate algorithm in the Advanced Encryption Standard   */
/* programme of the US National Institute of Standards and Technology.  */
/*                                                                                                                                              */
/* Copyright in this implementation is held by Dr B R Gladman but I             */
/* hereby give permission for its free direct or derivative use subject */
/* to acknowledgment of its origin and compliance with any conditions   */
/* that the originators of the algorithm place on its exploitation.     */
/*                                                                                                                                              */
/* Dr Brian Gladman (PI:EMAIL) 14th January 1999             */
/* Timing data for Rijndael (rijndael.c)
Algorithm: rijndael (rijndael.c)
128 bit key:
Key Setup:        305/1389 cycles (encrypt/decrypt)
Encrypt:           374 cycles =    68.4 mbits/sec
Decrypt:           352 cycles =    72.7 mbits/sec
Mean:              363 cycles =    70.5 mbits/sec
192 bit key:
Key Setup:        277/1595 cycles (encrypt/decrypt)
Encrypt:           439 cycles =    58.3 mbits/sec
Decrypt:           425 cycles =    60.2 mbits/sec
Mean:              432 cycles =    59.3 mbits/sec
256 bit key:
Key Setup:        374/1960 cycles (encrypt/decrypt)
Encrypt:           502 cycles =    51.0 mbits/sec
Decrypt:           498 cycles =    51.4 mbits/sec
Mean:              500 cycles =    51.2 mbits/sec
*/
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")