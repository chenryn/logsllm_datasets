title:Peeling Away Timing Error in NetFlow Data
author:Brian Trammell and
Bernhard Tellenbach and
Dominik Schatzmann and
Martin Burkhart
Peeling Away Timing Error in NetFlow Data
Brian Trammell, Bernhard Tellenbach,
Dominik Schatzmann, and Martin Burkhart
ETH Zurich, Switzerland
Abstract. In this paper, we characterize, quantify, and correct timing
errors introduced into network ﬂow data by collection and export via
Cisco NetFlow version 9. We ﬁnd that while some of these sources of
error (clock skew, export delay) are generally implementation-dependent
and known in the literature, there is an additional cyclic error of up to
one second that is inherent to the design of the export protocol. We
present a method for correcting this cyclic error in the presence of clock
skew and export delay. In an evaluation using traﬃc with known timing
collected from a national-scale network, we show that this method can
successfully correct the cyclic error. However, there can also be other
implementation-speciﬁc errors for which insuﬃcient information remains
for correction. On the routers we have deployed in our network, this limits
the accuracy to about 70ms, reinforcing the point that implementation
matters when conducting research on network measurement data.
1 Introduction
In the practice of network measurement, packet data is collected at one or more
observation points within a network. Some combination of transformations may
then be applied to the packets, such as sampling, or assembly into ﬂows. This
transformed data then undergoes some combination of export, collection, aggre-
gation, ﬁltering, storage, and analysis, in order to produce successively reﬁned
information from which knowledge about the network is derived, whether for
research or operational purposes. Each of these stages may be seen as a function
applied to the result of the previous stage. Ideally, each of these functions should
lead to further reﬁnement of the information of interest without introduction of
error or loss of ﬁdelity. Some of these stages, especially observation, export, and
collection, should have no impact on the information content at all.
However, this is not the case. Each stage in the measurement process may
introduce error. Some of these sources of error are well-known, such as failing
to properly provision measurement devices leading to packet loss, or failing to
synchronize clocks among distributed observation points. Other errors have more
obscure causes. In this work, we examine a cyclic source of timing error in ﬂow
data exported via Cisco Netﬂow version 9 (v9) [1] which, instead of having a
deployment- or implementation-time cause, is a consequence of the design of the
protocol itself. Together with load-dependent export delay and long-term drift
of the clocks from which timestamps are generated, we ﬁnd that the accuracy of
N. Spring and G. Riley (Eds.): PAM 2011, LNCS 6579, pp. 194–203, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011
Peeling Away Timing Error in NetFlow Data
195
timestamps in ﬂow data exported using v9 is degraded by about three orders of
magnitude, to about two seconds in the worst case, instead of millisecond-level
precision implied by the protocol.
After discovering this error in a ﬂow data set collected from a national-scale
network and stored as a sequence of raw NetFlow v9 export packets in received
order, we set about “peeling” these layers of error away, devising an algorithm
for correcting the cyclic error while compensating for delay and drift. We do this
only with reference to timing information on the NetFlow v9 export packets;
that is, the correction is independent of the individual ﬂows exported. This is
important both for the scalability of the approach, and for its independence
on the actual content of the traﬃc. We ﬁnd that our approach can completely
remove the protocol-induced cyclic error, in the general case allowing millisecond
timing resolution with NetFlow v9, even for ﬂows exported in diﬀerent export
packets. This is suﬃcient to sequence ﬂows occurring between one millisecond
and one second apart, e.g. to determine the direction of a bidirectional ﬂow as
in [2] when the connection establishment time is more than 1ms, or to enable
ﬂow-based round-trip-time measurement for quality of service applications.
However, in practice we can only peel so far: on the Cisco 6500 and 7600 series
routers that collect the data in the network we measure, additional ﬂow-level
inaccuracy of about 70ms remains, which we do not have suﬃcient information to
correct. We thereby conﬁrm that deployment, implementation, and design-time
choices made in the systems collecting and processing the traﬃc data under study
do not have the neutral eﬀect one could assume on the data. We further note
that this work quantitatively supports the common wisdom that router-based
ﬂow measurement is generally insuﬃcient for applications requiring precision
timing.
Section 2 characterizes the sources of timing errors we see in the examined
data set and section 3 quantiﬁes them and presents concrete examples of artifacts
in the data caused by these sources. We then present and evaluate a method for
correcting cyclic error based solely on the export packet headers in section 4. In
section 5, we review related work in data ﬁdelity for network measurement, and
we present our conclusions in section 6.
2 Characterizing Timing Error in NetFlow Version 9
NetFlow v9 [1] exports ﬂow data in records described by templates, allowing the
ﬂexible inline deﬁnition of record formats. However, ﬂow start and end times-
tamps are expressed as with older NetFlow versions, in terms of uptime, or the
time that has passed since the device started. This approach has the advantage
of not requiring a real-time clock at the metering process, which generates ﬂows
from an observed traﬃc stream. We call these per-ﬂow timestamps fstart and
fend.
Flows are exported by an exporting process in protocol data units called export
packets by NetFlow v9. The exporting process stamps each outgoing packet with
an export timestamp pexport expressed in UNIX epoch time (i.e., seconds since
196
B. Trammell et al.
Trafﬁc
Flows
Metering 
Process
Exporting 
Process
v9 Packets
uptime tick
counter
real time
clock
e
s
a
b
d
t
e
m
i
t
e
s
a
b
d
e
v
i
r
e
d
basetime
1s cyclic error
skew
delay under load
export time texp
(a) Timing sources in NetFlow v9
(b) Sources of basetime error
Fig. 1. Illustrating basetime error
midnight UTC, 1 January 1970). It also exports the time since the metering
process started puptime. This arrangement is illustrated in Figure 1(a)1.
From these two timestamps, the time at which the device started (which we
call the true basetime or tbase) is given by tbase = pexport − puptime. The start
and end time in UNIX epoch seconds for each ﬂow in the packet can then be
determined by adding tbase to each of the per-ﬂow timestamps fstart and fend
for each ﬂow in the packet.
This would be the ideal situation. However, while the uptime is expressed
in milliseconds, the export time is truncated to second-level precision before
export due to the design of the NetFlow v9 packet header, implicitly ﬂooring it.
Therefore, the derived basetime from each packet is in eﬀect given by tdbase =
(cid:2)pexport(cid:3) − puptime. The implicit ﬂoor operation causes the milliseconds part of
the export timestamp not to be accounted in the basetime derivation, injecting a
cyclic error of up to one second subtracted from the derived basetime, which can
consequently cause errors in the ﬂow timestamps leading to incorrect sequencing
of ﬂows exported in diﬀerent export packets.
Further complicating this situation are two eﬀects of the architecture and its
use of separate clocks. First, the two clocks are not necessarily synchronized; that
is, one second does not necessarily pass on the real time clock for each second on
the uptime counter. This clock skew can be a result of inaccuracy in either of the
two clocks. The magnitude of the skew observed in our data set is on the order
of seconds per day, and appears to be stable over time. Second, the timestamp
from the uptime counter and the timestamp from the real time clock are not
necessarily applied simultaneously to the export packet. Export packets may
be held at the Exporting Process due either to resource exhaustion or explicit
export rate limiting. This delay can inject a further subtractive error into the
derived basetime. Delays observed in our data set are uncommon, intermittent,
correlated with periods of heavy load, and on the order of less than one second.
These three sources of error are illustrated in Figure 1(b); here, we show the
true basetime, and the dotted lines deﬁne the area within which the derived
basetimes fall.
1 Here we use terminology and arrangement from the IPFIX architecture [3], since the
IPFIX architecture was based on that from NetFlow v9.
Peeling Away Timing Error in NetFlow Data
197
To see how this would aﬀect ﬂow measurement, consider the following exam-
ple: a ﬂow f1 starts at 1.000s after router start (i.e., true basetime), and a ﬂow f2
which starts at 1.100s. The export packet containing f1 is exported at 11.000s,
and that containing f2 at 11.950s. Assuming no drift or other delay on this time
scale, we then have:
tdbase1 = (cid:2)11.000(cid:3) − 11.000 = 0, tdbase2 = (cid:2)11.950(cid:3) − 11.950 = −0.950
f1 = tdbase1 + 1.000 = 1.000,
f2 = tdbase2 + 1.100 = 0.150
Even though f1 started before f2, the apparent sequence is reversed.
We observe a further peculiarity of export in the data from our Cisco routers:
that of derived basetime quantization. The derived basetimes in our data set are
all divisible by 4ms. Whether this is a source of error or not is uncertain without
examining the implementation: the 4ms quantization could be caused either by
export driven by a 4ms interrupt, or by timestamps being stored internally in
4ms units.
Due to the magnitude of these errors, applications which perform time-series
aggregation with intervals greater than one second (e.g., most billing applica-
tions) are largely unaﬀected. However, we show in section 3 that any assump-
tion that devices exporting NetFlow v9 are capable of millisecond-level accuracy
and/or strict ordering of ﬂows does not hold. We set out to see what could be
done to improve this situation.
The most troublesome source of error on a per-ﬂow basis is the cyclic error.
The timestamps of the ﬂows skew at the same rate as that of the basetime, so
skew, while visible in the basetime series, is cancelled out for each ﬂow. Therefore,
in section 4, we will focus on correcting cyclic error, treating skew, delay, and
quantization as complications to correction.
3 Quantifying Timing Errors in NetFlow v9
Our data set includes data collected from SWITCH2, the Swiss research and
education network. This network contains about 2.3 million IPv4 addresses, and
the typical total traﬃc volume ranges from 500 megabytes to one gigabyte per
second. We receive NetFlow v9 from six Cisco routers (6500 or 7600 series)
deployed around the SWITCH border; we designate these routers A-F. Each
router also exports ﬂows from multiple Source IDs; these correspond to line
cards. Here we examine one week of data, 26 June to 3 July, 2010.
Figure 2 shows the density of exported derived basetimes for a single source.
The upper part of the ﬁgure is a density map of exported basetimes by oﬀset
from the maximum observed basetime. The lower part shows the number of
export packets per second for the same time period.
The vast majority of basetimes fall within the skewed one-second cyclic error
band. Note the daily seasonality in the density of basetimes. There is a maximum
number of ﬂows which can be exported in an export packet (ep), so higher
2
http://www.switch.ch
198
B. Trammell et al.
0
-500
-1000
-1500
-2500
-3000
]
s
m
[
t
e
s
f
f
o
e
m
i
t
e
s
a
B
]
s
/
p
e
[
d
a
o
l
t
r
o
p
x
E
06/26
400
300
200
100
0
06/26
Corrected basetime
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
t
i
s
n
e
d
p
e
e
v
i
t
a
e
R
l
06/27
06/28
06/29
06/30
07/01
07/02
07/03
06/27
06/28
06/29
06/30
07/01
07/02
07/03
Fig. 2. Derived basetime density distribution, and basetime correction, for a single
source on a single router (A/513).
traﬃc load leads to larger ﬂow counts leads to larger export packet counts. This
increases the number of unique derived basetimes seen per second. However, this
density is not uniformly distributed among the possible values within the cyclic
error band, a fact which further complicates correction. Delay also increases with
traﬃc load, due to resource exhaustion and/or rate limiting in the exporting
process. However, the number of delayed export packets is relatively low even
under load.
We examine the errors on each source on each router in Table 1. Here, errors
are reported in relation to the presumed real basetime as determined by the
correction mechanism detailed in section 4; therefore we report the rate of unique
observed derived basetimes per second and the correction interval parameter
used. These will be explained further below.
Mean drift is a per-source, not a per-router parameter; we hypothesize that
this is related to some physical property of the clocks on each of these line cards.
Drift ranges from about -2s/day to +1s/day.
The minimum and maximum measured error show that the range due to cyclic
error and delays ranges from 1050ms to 2280ms; lower values demonstrating
predominantly cyclic error, with higher values as evidence of more delay. The
width of the band between the 5th and 95th percentile ranges between about
950ms and 1200ms, demonstrating that the vast majority of this error is cyclic.
Note that all error measurements for the routers are values divisible by four
milliseconds; this is an artifact of the 4ms quantization mentioned above.
We also examined the output of the softflowd3 NetFlow v9 metering and
exporting process, which was developed independently from the Cisco code-
base. softflowd was run on a small set of ﬂows generated on an experimental
local-area network, running on a Mac OS X host. We observed the same cyclic er-
ror, but negligible drift, negligible delay, and no quantization of derived
basetimes.
3
http://www.mindrot.org/projects/softflowd/
Peeling Away Timing Error in NetFlow Data
199
Table 1. Overview of timing errors for each source on each router for the examined
week.
Router Source
0
Drift [ms/day]
mean
-423
-228
-423
-2039
513 +560
+81
517
0
513
518
A
A
A
B
B
B
C
C
D
D
E
E
E
F
F
513
softflowd
0
0
0
+1543
518 +1577
+1053
517 +1055
+239
513 +453
515
0
-17
+47
+46
+5.5
] Correction
interval [s]
Error [ms]
Rate [s−1
std. max 95th 5th min mean std.
14.5 +344 -72 -972 -1052 0.24
0.03
17.0 +136 -56 -960 -1960 193.9 79.5