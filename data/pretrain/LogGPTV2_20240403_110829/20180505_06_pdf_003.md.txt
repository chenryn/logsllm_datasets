# Porting from Oracle to PostgreSQL
## By Paulo Merson, February 2002

If you are starting to use PostgreSQL or planning to migrate from an Oracle database, this document aims to be a helpful resource. For those with Java applications using JDBC, the "Data Types and JDBC" section will be particularly useful.

Both Oracle and PostgreSQL conform to standard SQL, but they include several extensions and implementation details that set them apart. This document highlights the most important differences.

For any comments or feedback on this document, please email me at: pmerson@cs.cmu.edu.

### 1. SQL Syntax, Functions, Sequences, etc.

#### Oracle vs. PostgreSQL

- **Current Date and Time**
  - **Oracle**:
    ```sql
    SELECT sysdate FROM dual;
    ```
    - **PostgreSQL**:
    ```sql
    SELECT 'now'::datetime;
    ```
    - **Note**: PostgreSQL does not have a `dual` table. Unlike other RDBMS, PostgreSQL allows a `SELECT` statement without a `FROM` clause. This does not affect portability as the syntax for getting the current time is already DBMS-specific.

- **Create Sequence**
  - **Oracle**:
    ```sql
    CREATE SEQUENCE seqname
      [ INCREMENT BY integer ]
      [ MINVALUE integer ]
      [ MAXVALUE integer ]
      [ START WITH integer ]
      [ CACHE integer ]
      [ CYCLE | NOCYCLE ];
    ```
    - **PostgreSQL**:
    ```sql
    CREATE SEQUENCE seqname
      [ INCREMENT increment ]
      [ MINVALUE minvalue ]
      [ MAXVALUE maxvalue ]
      [ START start ]
      [ CACHE cache ]
      [ CYCLE ];
    ```
    - **Note**: The main difference is the need for `by` and `with` after `increment` and `start` in Oracle. If `MAXVALUE` is not specified in PostgreSQL, the maximum value for ascending sequences is 2147483647. In Oracle, if `MAXVALUE` is not specified or `NOMAXVALUE` is used, the actual limit is 1027.

- **Sequence Usage**
  - **Oracle**:
    ```sql
    sequence_name.nextval;
    ```
    - **PostgreSQL**:
    ```sql
    nextval('sequence_name');
    ```
    - **Example**:
      - **Oracle**:
        ```sql
        SELECT sequence_name.nextval FROM dual;
        ```
      - **PostgreSQL**:
        ```sql
        SELECT nextval('sequence_name');
        ```
    - **Note**: PostgreSQL allows a `SELECT` statement without a `FROM` clause, which does not affect portability as the sequence syntax is DBMS-specific.

- **DECODE vs. CASE**
  - **Oracle**:
    ```sql
    SELECT product_id,
           DECODE(warehouse_id, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non-domestic')
    FROM test;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT a,
           CASE WHEN a = 1 THEN 'one'
                WHEN a = 2 THEN 'two'
                ELSE 'other'
           END
    FROM test;
    ```

- **NVL vs. COALESCE**
  - **Oracle**:
    ```sql
    SELECT employeeid, NVL(hire_date, sysdate) FROM employee WHERE employeeid = 10;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT employeeid, COALESCE(hire_date, 'now'::datetime) FROM employee WHERE employeeid = 10;
    ```
    - **Note**: Oracle also has a `COALESCE` function, which is a generalization of the commonly used `NVL` function.

- **Outer Join**
  - **Oracle**:
    ```sql
    -- Using (+) operator
    ```
  - **PostgreSQL**:
    - **Workaround**:
      ```sql
      -- Use a UNION
      ```

- **Hierarchical Queries (CONNECT BY)**
  - **Oracle**:
    ```sql
    -- CONNECT BY
    ```
  - **PostgreSQL**:
    - **Note**: No equivalent feature.

- **MINUS vs. EXCEPT**
  - **Oracle**:
    ```sql
    SELECT product_id FROM inventories MINUS SELECT product_id FROM order_items;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT product_id FROM inventories EXCEPT SELECT product_id FROM order_items;
    ```

- **DISTINCT vs. UNIQUE**
  - **Oracle**:
    ```sql
    SELECT DISTINCT col1, col2 FROM table1;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT DISTINCT col1, col2 FROM table1;
    ```
    - **Note**: PostgreSQL does not allow `SELECT UNIQUE`.

- **Relational Operators**
  - **Oracle**:
    ```sql
    SELECT id, name FROM employee WHERE id > = 10;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT id, name FROM employee WHERE id >= 10;
    ```
    - **Note**: PostgreSQL does not allow spaces between relational operators.

- **Modulo Operation**
  - **Oracle**:
    ```sql
    SELECT mod(10, 4) FROM dual;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT 10 % 4;
    ```

- **ROWNUM**
  - **Oracle**:
    ```sql
    SELECT * FROM employees WHERE rownum <= 10;
    ```
  - **PostgreSQL**:
    ```sql
    SELECT * FROM employees ORDER BY name LIMIT 10;
    ```
    - **Note**: PostgreSQL does not have an equivalent to Oracle's `ROWNUM`.

### 2. Data Types and JDBC

| Oracle Data Type | PostgreSQL Data Type | JDBC Method |
|------------------|----------------------|-------------|
| VARCHAR2(n)      | VARCHAR(n)           | getString   |
| CHAR(n)          | CHAR(n)              | getString   |
| LONG (up to 2 GB)| TEXT (up to 1 GB)    | getString   |
| DATE             | TIMESTAMP            | getTimestamp |
| TIMESTAMP        | TIMESTAMP            | getTimestamp |
| RAW(size)        | BYTEA                | getBytes    |
| CLOB (up to 4 GB)| TEXT (up to 1 GB)    | getString   |
| BLOB (up to 4 GB)| BYTEA (up to 1 GB)   | getBytes    |
| ROWID            | None                 | None        |
| BOOLEAN          | BOOLEAN              | getBoolean  |

- **Note**: PostgreSQL supports large objects as separate files, stored in a special format and referenced by an OID value. For more information, see:
  - [Large Objects](http://www.postgresql.org/idocs/index.php?largeobjects.html)
  - [JDBC Large Objects](http://www.postgresql.org/idocs/index.php?jdbc-lo.html)

### 3. Other Considerations

- **Operators and SQL Functions**: Both DBMS have similar sets of operators and functions, though Oracle has a richer set. Always compare the syntax of Oracle functions to their PostgreSQL equivalents.
- **Cross-Database Queries**: PostgreSQL lacks the ability to query across multiple databases.
- **PL/SQL vs. PL/pgSQL**: PostgreSQLâ€™s PL/pgSQL is similar to Oracle PL/SQL and can be used to write stored functions. PostgreSQL does not have packages or procedures, only functions. For more information, see:
  - [PL/pgSQL Porting](http://www.postgresql.org/idocs/index.php?plpgsql-porting.html)
- **Triggers**: Both DBMS support triggers, but in PostgreSQL, the trigger code must be in a stored function written by the user. PostgreSQL also has a rule system for defining business logic.
- **CREATE TABLE Statement**: The `CREATE TABLE` statement is similar in both DBMS, but PostgreSQL does not have `pctfree`, `pctused`, `inittrans`, and `maxtrans` clauses. The `CREATE DATABASE` statement also differs in terms of storage details.

### 4. References

- [Oracle 9i Documentation](http://download-east.oracle.com/otndoc/oracle9i/901_doc/nav/docindex.htm)
- [PostgreSQL Documentation](http://www.postgresql.org/idocs/)
- [Oracle to Postgre Conversion](http://openacs.org/doc/openacs/html/oracle-to-pg-porting.html)
- [PostgreSQL JDBC 2.0 Compliance](http://lab.applinet.nl/postgresql-jdbc/)
- [PostgreSQL Mailing Lists](http://archives.postgresql.org/)