## [未完待续] PostgreSQL 一键诊断项 - 珍藏级  
### 作者                                                           
digoal                                                           
### 日期                                                           
2018-06-13                                                         
### 标签                                                           
PostgreSQL , 一键诊断    
----                                                           
## 背景      
---  
# 一、诊断项类目 - 规格、配置  
## 一 规格  
### 1 数据库实例规格  
**检测方法**  
规格配置是否与实际配置相符  
cpu  
mem  
iops  
network bandwidth  
disk size  
**告警规则**  
**处理方法**  
**背景知识**  
## 二 配置  
### 1 ROLE,DB级定制配置  
**检测方法**  
```  
select * from pg_db_role_setting;  
```  
**告警规则**  
**处理方法**  
**背景知识**  
### 2 数据库非默认配置  
**检测方法**  
```  
select source,name,setting,unit from pg_settings where source<>'default';  
```  
**告警规则**  
**处理方法**  
**背景知识**  
---  
# 二、诊断项类目 - 状态诊断  
## 一 模块状态  
### 1 HA 模块状态  
### 2 agent状态  
### 3 备份模块状态  
### 4 归档日志上传模块状态  
或  
pg_stat_archiver  
### 5 审计日志上传模块状态  
### 6 任务模块以及任务运行状态  
用户任务  
备份任务  
... ...   
## 二 数据库状态  
### 1 心跳状态  
**检测方法**  
数据库读写是否正常  
**告警规则**  
**处理方法**  
**背景知识**  
### 2 连接数（活跃、剩余）  
```  
select current_setting('max_connections')::int - current_setting('superuser_reserved_connections')::int max_conn;  
select state, count(*) from pg_stat_activity group by 1;  
```  
### 3 容灾节点状态  
**检测方法**  
1、容灾节点是否存在，  
2、pg_stat_replication.state 状态值  
**告警规则**  
**处理方法**  
**背景知识**  
### 4 备库状态  
**检测方法**  
1、备库是否存在，  
2、pg_stat_replication.state 状态值  
**告警规则**  
**处理方法**  
**背景知识**  
## 三 延迟  
### 1 容灾节点延迟  
**检测方法**  
send,write,apply 延迟  
还有多少WAL SIZE有容灾节点重搭风险. (wal_keep_segments - send延迟)  
**告警规则**  
**处理方法**  
**背景知识**  
### 2 备库延迟  
**检测方法**  
send,write,apply 延迟  
```  
select usename,application_name,client_addr,state,  
pg_wal_lsn_diff(pg_current_wal_insert_lsn(), sent_lsn) sent_delay,   
pg_wal_lsn_diff(pg_current_wal_insert_lsn(), write_lsn) write_delay,   
pg_wal_lsn_diff(pg_current_wal_insert_lsn(), flush_lsn) flush_delay,   
pg_wal_lsn_diff(pg_current_wal_insert_lsn(), replay_lsn) replay_delay   
from pg_stat_replication;  
```  
还有多少WAL SIZE有备库重搭风险. (wal_keep_segments - send延迟)  
9\.4使用如下SQL
```
select usename,application_name,client_addr,state,  
pg_xlog_location_diff(pg_current_xlog_insert_location(), sent_location) sent_delay,   
pg_xlog_location_diff(pg_current_xlog_insert_location(), write_location) write_delay,   
pg_xlog_location_diff(pg_current_xlog_insert_location(), flush_location) flush_delay,   
pg_xlog_location_diff(pg_current_xlog_insert_location(), replay_location) replay_delay   
from pg_stat_replication;  
```
**告警规则**  
**处理方法**  
**背景知识**  
### 3 SLOT延迟  
风险，导致当前数据库节点WAL日志堆积、系统表膨胀。  
检查方法  
```  
select slot_name,plugin,slot_type,database,temporary,active,active_pid,  
xmin,catalog_xmin,  
pg_wal_lsn_diff(pg_current_wal_insert_lsn(),restart_lsn) restart_delay,   
pg_wal_lsn_diff(pg_current_wal_insert_lsn(),confirmed_flush_lsn) flush_delay   
from pg_replication_slots;  
```  
9\.4使用如下SQL
```
select slot_name,plugin,slot_type,database,active,                       
xmin,catalog_xmin,  
pg_xlog_location_diff(pg_current_xlog_insert_location(),restart_lsn) restart_delay   
from pg_replication_slots; 
```
已有风险处理方法：
1、删除SLOT, 删掉后会自动清理。（删掉slot后，下游使用这个SLOT接收的业务程序报错，无法继续接收）
2、下游尽快消费延迟的SLOT的日志
3、手动设置SLOT的位点（相当于丢弃未被接收的部分，下游使用这个SLOT的业务程序，重新的SLOT位点继续接收）  
函数URL   
https://www.postgresql.org/docs/11/static/functions-admin.html#FUNCTIONS-REPLICATION  
### 4 归档延迟  
风险，导致当前数据库节点WAL日志堆积。  
检查方法  
```  
pg_wal/archive_status/.ready 的数量 乘以 wal_segment_size   
```  
---  
# 三、诊断项类目 - 资源诊断  
## 一 硬件资源  
### 1 CPU  
### 2 IOPS  
### 3 MEM  
page table  
rss  
cache  
### 4 network  
### 5 disk 空间剩余  
### 6 disk inode 剩余  
```  
df -i  
```  
## 二 数据库资源  
### 1 数据文件空间  
已使用  
### 2 WAL(REDO)空间  
已使用  
### 3 实例级空间分布  
1、库维度空间分布  
```  
select datname, pg_size_pretty(pg_database_size(oid)) from pg_database order by pg_database_size(oid) desc limit 10;  
```  
2、表空间维度空间分布  
```  
select spcname, pg_size_pretty(pg_tablespace_size(oid)) from pg_tablespace order by pg_tablespace_size(oid) desc limit 10;  
```  
### 4 库级空间分布  
1、对象维度空间分布（按pg_class.relkind归类）  
```  
select relkind,pg_size_pretty(sum((pg_relation_size(oid)))) from pg_class group by 1 order by sum((pg_relation_size(oid))) desc;  
```  
2、表维度空间分布  
```  
select relname,pg_size_pretty(pg_relation_size(oid)) from pg_class where relkind='r' order by pg_relation_size(oid) desc limit 10;  
```  
3、索引维度空间分布  
```  
select relname,pg_size_pretty(pg_relation_size(oid)) from pg_class where relkind='i' order by pg_relation_size(oid) desc limit 10;  
```  
4、user维度空间分布  
5、schema维度空间分布  
---  
# 四、诊断项类目 - 性能诊断  
## 一 热点SQL、对象、函数  
### 1 自上一次重置计数器以来, TOP SQL(多维度)  
[《PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL) (包含SQL优化内容) - 珍藏级》](../201704/20170424_06.md)    
1、总耗时TOP 10  
```  
select userid::regrole, dbid, query from pg_stat_statements order by total_time desc limit 10;      
```  
2、IO耗时TOP 10  
```  
select userid::regrole, dbid, query from pg_stat_statements order by (blk_read_time+blk_write_time) desc limit 10;      
```  
3、性能抖动TOP 10  
```  
select userid::regrole, dbid, query from pg_stat_statements order by stddev_time desc limit 10;      
```  
### 2 当前, TOP SQL
1、IO TOP SQL
```
结合iotop工具
```
2、CPU TOP SQL
```
结合top工具
```
### 3 自上一次重置计数器以来, 全表扫描次数TOP对象  
```  
select * from pg_stat_all_tables order by seq_scan desc limit 10;  
```  
### 4 自上一次重置计数器以来, 全表扫描记录数TOP对象  
```  
select * from pg_stat_all_tables order by seq_tup_read desc limit 10;  
```  
### 5 索引数超过4并且SIZE大于10MB的top(dml)表  
### 6 自上一次重置计数器以来, 热表  
1、dml维度  
```  
select schemaname,relname,pg_size_pretty(pg_total_relation_size(relid)),  
n_tup_ins+n_tup_upd+n_tup_del+n_tup_hot_upd as iud_tuples from pg_stat_all_tables   
order by iud_tuples desc limit 10;  
```  
2、查询(IO)维度  
```  