    $t4=00000004 $t5=00000001
    08067b88  07e3c160 ffffff85
    --------------------    
    07e3c148  "mem1"
    $t4=00000004 $t5=00000000
    08067b80  07e3c140 ffffff85
    --------------------
打印的结果中，第1行是属性的名称，第2行是fixed slots的个数和Shape对应的slot索引，第3行是属性的值。
**2.2.3.3 TypeObject对象**
TypeObject有2个关键成员，第1个是clasp——可以用来判断一个Object所属类型；第2个是proto——Javascript中的prototype概念的实现。
proto在查找对象属性的时候会用到，如果当前JSObject的Shape单链表中没有找到属性，则会在proto的Shape单链表继续查找，依次类推。
对于如下代码
    this.dummy1 = 255
    this.proto = {}
    this.emptyObject = {}
    this.dummy2 = 255
    this.proto.mem1 = "proto"
    this.emptyObject.__proto__ = this.proto
TypeObject演示如下。
**2.2.4 JSFunction和JSScript**
JSFunction对应的是Javascript层function的概念。
一个JSFcuntion要么封装了一个Native函数，要么封装了一个JSScript，JSScript包含了一个function对应的各种信息（比如最关键的字节码）。
对于代码
    this.dummy1 = 255
    function test() {app.alert("in function test");}
    this.dummy2 = 255
JSFunction的逻辑如下所示。
可以看到JSFunction最关键的就是偏移0x1c处的4字节和0x24处的4字节。
0x24处的4字节指向一个Atom字符串，该字符串表示function的名称，注意这里的”test”和打印this的属性时的字符串”test”含义是不一样的，打印this的属性时的字符串”test”表示的是this对象的属性名称，这个属性不一定是”test”，但是function的名称确定后就不会变了。
0x1c处的4字节要么是一个Native函数的地址（如果JSFunction封装的是Native函数的话），要么指向一个JSScript对象(调用函数的话相应的字节码会被解释执行)。
接下来看看JSScript对象的逻辑。
可以看到JSScript的关键点在偏移0xC处的4字节和偏移0x24字节处的4字节。
偏移0xC处的4字节指向对应的function的字节码起始处。
偏移0x24处的4字节指向一个ScriptSourceObject对象(继承自JSObject),而ScriptSourceObject的fixed
slots中的第1个是ScriptSource对象，ScriptSourceObject也就是简单地封装了一下ScriptSource对象。
ScriptSource对象包含了对应function的Javascript源码和源码所在的文件名。
JSScript可以用来在调试过程中辅助判断某个对象。
**2.2.5 Array对象**
Array对象是基于JSObject的，对于如下代码
    this.dummy1 = 255
    this.arr = Array(255, "elem2", 255)
    this.arr.push({})
    this.dummy2 = 255
this.arr的实际存储形式如下。
从上图可以看出，Array对象的所有元素都存储在elements中，不存在slots。
### 2.2.6 Map对象
Map对象也是基于JSObject，不过涉及到Hash，所以稍微复杂一些。
对于如下代码
    this.dummy1 = 255
    this.map = new Map()
    this.map.set("key1", "value1")
    this.map.set("key2", "value2")
    this.map.set("key3", "value3")
    this.dummy2 = 255
this.map的实际存储形式如下。
从上图中可以看到，一个Map对象在fixed slots后有一个指向Ordered HashTable的指针。
在Ordered HashTable中，有length和capacity的值，同时还有一个指向entries的指针。
在entries中，key和value相邻并以Value结构体的形式存在。
**2.2.7 Set对象**
Set对象和Map对象很类似，而且都是基于Ordered HashTable。
对于代码
    this.dummy1 = 255
    this.set = new Set()
    this.set.add("value1")
    this.set.add("value2")
    this.set.add("value3")
    this.dummy2 = 255
this.set的实际存储形式如下。
可以看到Set对象的存储形式和Map对象差不多，只是在最后存储Value结构体时逻辑不一样。
**2.2.8 FrameRegs和StackFrame**
FrameRegs和StackFrame是SpiderMonkey的解释器解释执行字节码时需要的2个最关键的结构，它们都是Interpret函数中频繁使用到的变量。
FrameRegs结构包含3个成员，依次是sp_、pc_和fp_。
sp_成员模拟esp(rsp)寄存器，pc_成员模拟eip(rip)寄存器，fp_成员模拟ebp(rbp)寄存器。
sp_永远指向栈顶，pc_一开始指向字节码的起始地址，在解释执行的过程中会指向下一个字节码，fp_指向的是一个StackFrame结构体。
StackFrame保存了当前的作用域、局部变量、当前的脚本、this、arguments和callee等关键信息。
整体逻辑如下所示。
其中最关键的就是sp_和fp_，这2个能够大大提高调试Javascript的速度。
通过sp_可以在特定代码执行后快速获取某些Javascript变量的值。
通过fp_则可以得到this对象，再结合之前的打印JSObject对象所有属性的windbg脚本命令，可以查看所有相关的属性的值，如果this对象是全局变量，还可以将该this值保存起来，无论什么时候都可以顺藤摸瓜查看所有变量的值。
而且fp_指向的StackFrame末尾（StackFrame大小0x48字节）开始依次保存局部变量的值（局部变量在编译阶段已经被分配了特定的索引，所以在运行时不存在变量的名称等信息）。
### 2.3 实战
在大致了解了2.2节中的各个关键结构后，接下来就是在调试中不断熟悉，形成自己的调试经验。
**2.3.1 准备pdf**
实战的前提是能够随意构造嵌有js代码的pdf文件，Acrobat Pro版可以做到，PDF-XChange-Editor也可以，当然通过一些开源的工具也行。
Acrobat Pro要收费，PDF-XChange-Editor可以免费使用，不过生成的pdf有水印。
接下来使用的pdf均是通过PDF-XChange-Editor生成的（在菜单栏的Form菜单可以添加Javascript）。
### 2.3.2 windbg加载Acrobat Reader
windbg加载Acrobat Reader（勾选Debug Child Process Also选项），中断到调试器就输入g命令运行，一直到Acrobat
Reader可以交互。
crtl+break或者alt+delete强行中断到windbg，输入lmm escript查看EScript.api模块的基地址。
如果EScript.api模块还没有加载，说明Acrobat启动的代码还没执行完，输入g命令继续运行，等一会儿再重复相同操作。
    0:034> lmm escript
    Browse full module list
    start    end        module name
    64b90000 64e5f000   EScript    (deferred)   
IDA加载EScript.api，并重定向基地址为实际的地址。
**2.3.3 查找Interpret——解释执行pcode(字节码)的函数**
不只是对于Acrobat
Reader中的SpiderMonkey引擎，研究所有解释执行类的语言找这个函数都是最关键的，因为这里是代码产生实际效果的过程，跟踪这些过程可以摸清楚各种关键结构和关键机制。
针对SpiderMonkey 24.2，查找该函数有2种快捷方法。
1) 直接在IDA中搜索文本“switch 230 cases”，得到的结果就在Interpret函数中。
2)
在字符串窗口找到字符串”js::RunScript”，然后通过交叉引用进入到引用该字符串的函数，再通过交叉引用退回到上一层函数，该函数就是js::RunScript。
然后在js::RunScript函数中定位到Interpret函数。
找到Interpret后，在Interpret函数找到核心switch（循环解释执行字节码的地方），然后根据IDA中的地址在windbg相应地址处下断点，然后输入g命令直接运行。
到这里，通过Acrobat Reader的打开文件功能打开带有Javascript代码的pdf文件就会触发断点。
接下来会分别介绍细粒度调试和快速调试2种方式，可以根据兴趣阅读。
细粒度调试就是以字节码甚至以汇编语言为单位一步步跟踪Javascript代码产生的效果。
快速调试就是以Javascript语句为单位跟踪Javascript代码产生的效果。
**2.3.4 细粒度调试Javascript代码**
1) 在PDF-XChange-Editor中生成带有如下javascript代码的pdf文档。
2) 然后使用Acrobat Reader打开生成的pdf文档，触发断点，如下图所示。
到这里，首先在IDA中查看FrameRegs(2.2.8节介绍的)，如下图所示。
从上图的推测结果可以看到，ebp-0x30处的12字节是FrameRegs，[ebp-0x30]指向临时堆栈，[ebp-0x2C]指向当前字节码，[ebp-0x28]指向StackFrame。
3) 通过StackFrame（[ebp-0x28]）获取this指针（在这次实验中this代表的是Doc对象），如下图所示。
4) 将值0xbd29740替换2.2.3.2节中的Windbg脚本命令中的@$t0寄存器，运行后就可以查看this（Doc对象）当前的所有属性。
可以把this值临时保存到记事本或者其他其他文本中，然后在调试的任何时候都可以配合2.2.3.2中的windbg脚本命令查看Doc对象的属性，然后顺藤摸瓜查看Javascript代码中的所有变量的值。
Windbg脚本命令运行结果如下所示（为了篇幅把中间大部分内容省了）。
    0:000> r @$t0 = 0xbd29740 ;
    0:000> r @$t1 = poi(@$t0) ;
    0:000> r @$t2 = poi(@$t0 + 0x8 );
    0:000> r @$t8 = poi(@$t1 + 0x10);
    0:000> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5 < @$t4) {dd @$t0+0x18+@$t5*8 L0x2;}.else {r @$t5 = @$t5-@$t4;dd @$t2+@$t5*8 L0x2;};.echo --------------------;}
    0c6e1c50  "rightsManagement"
    $t4=00000001 $t5=000000b9
    0bcc8e28  00000000 ffffff82
    --------------------    
    0b994ae8  "encryptUsingPolicy"
    $t4=00000001 $t5=000000b8
    0bcc8e20  0bd1e5d8 ffffff87