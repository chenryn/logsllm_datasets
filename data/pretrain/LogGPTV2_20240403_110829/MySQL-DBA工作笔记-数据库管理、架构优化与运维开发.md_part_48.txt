12
T1
key
key(cl)
auto
(c2)
increment,
rollback;
会话3
struct(s),
insert into t8 values(null,9);
insert into t8 values(null,10);
locked1
begin;
会话1
获得S锁，申请X锁，类型是insert获得S 锁，等待X锁，类型为
18_[Note]
intention，等待会话2
inserting
表7-11
会话1
InnoDB:
insert into t8 values(null,10);
insert intention，等待会话1
申请获得S锁，duplicate 检查
Transactions deadlock
产生死锁
values(100215,15,215,12);
会话2
产生死锁，失败，回滚
insert into test2
会话2
TO BE GRANTED:
 root update
续表
---
## Page 310
288
|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
trx id 1886 1ock mode
Record lock,
Record lock,
RECORD LOCKS space id 28 page no 4 n bits 72 index c2 of table ^test`.`t8
2017-09-07T16:45:56.652747Z 18[Note]
整个过程和场景1有些类似，但是这里使用到了自增列相关的信息，
发起时间
我们把死锁日志和过程结合起来，
2017-09-07T16:45:56.652833Z18
1:len 4; hex 80000001; asc
2017-09-07T16:45:56.652798Z 18[Note] InnoDB:***(2) WAITING FORTHIS LOCK
insert into t8 values(null,9)
mysql
TRANSACTION 1886, ACTIVE 46 seC inserting
我们先构建表结构信息，这里需要使用三个会话。
场景4：事务提交导致的死锁问题
0：
lock struct(s)
T5
2
一
len4;
len
4;
4：
申请等待插入意向锁（insert intention），进行冲突检测，
lock
heap no
hex
hex 80000001;
hex
mode
8000000a;
80000001;
insert into t8 values(null,9);
insert into t8 values(null,10);
持有X锁，record lock
heap
S
等待会话1释放锁
PHYSICAL
wal
begin;
locked
会
asc
话
asc
asc
asc
asc
2
: RECORD: n_fields 2; compact format; info bits 
L RECORD: n_fields 2; compact format; info bits 0
得到下表7-12 这样的一个过程说明。
3 [Note] InnoDB: *** WE ROLL BACK TRANSACTION (1)
id
表7-12
1886
2 row lock(s),
InnoDB: *** (2） TRANSACTION:
仍在等待会话2释放列c2上的锁
insert into t8 values(null,10);
undo log entries 2
实现细节上有所不同。
申请S锁
会话1
死锁
TO BE GRANTED
but
root update
not
gap
0
---
## Page 311
2017-09-07T12:14:18.422589Z 8 [Note] InnoDB: *** (2) HOLDS THE LOCK(S):
insert into d select 1
3lock struct(s),
mysql
TRANSACTION 1817, ACTIVE 6 sec inserting
2017-09-07T12:14:18.422575Z 8 [Note] InnoDB: ***
RECORD LOCKS space id 24 page no 3 n bits 72 index PRIMARY of table ^test`.
2017-09-07T12:14:18.422512Z 8 [Note] InnoDB: *** (1) WAITING FOR THIS LOCK
insert into d select 1
MySQL thread id 9, OS thread handle
LOCK
mysql
TRANSACTION 1816, ACTIVE 13 sec inserting
0
死锁日志如下：
整个模拟的过程如下表 7-13所示。
insert into d values(1);
我们写入一条数据
发起时间
ENGINE=InnoDB
PRIMARY KEY
CREATE TABLE
:len 4; hex 80000001; asc
len
（1） TRANSACTION:
WAIT3
12
T1
tablesin
tables
int(11）
hex
lock struct(s),
in
320000013f0110; asc 2
delete from d where id=1;
NOT NULL DEFAULT 'O',
000000000717;
3 DEFAULT CHARSET=utf8mb4;
d
use
heap size 1136,
trx
commit;
begin;
会
话
locked
locked
heap size 1136,
asc
lock
表7-13
140195657869056, query id 104 1ocalhost
e 140195657602816, query id 102 1ocalhost
2 row lock(s)
modex
insert into d select 1;
begin;
会话2
！！
2 row lock(s)
(2）TRANSACTION:
insert into d select 1;
第7章MySQL事务和锁丨289
root executing
TO BE GRANTED:
root
begin;
会话3
executing
bits
d
---
## Page 312
290丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
事务状态的变化导致产生了连锁反应。
（2）
mysql> insert into d select 1;
2017-09-07T12:14:18.422700z 8 [Note] InnoDB:
 RECORD LOCKS space id 24 page no 3 n bits 72 index PRIMARY of table 'test^. 'd
Query OK,
2017-09-07T12:14:18.422644Z 8 [Note] InnoDB: *** (2) WAITING FOR THIS LOCK
这个过程和场景 2 是有些类似的，
我们把死锁日志和过程结合起来，得到下表7-14所示的一个过程说明。
ERROR 1062
 o e e   z   se 
发起时间
一
0：
0：
T5
址
T6
3
len
len
len 7;hex 320000013f0110;asc 2
len
7;
4；
9
持有X锁，record lock
delete from d where id=1;
hex
Duplicates:0
(23000):
hex
hex
hex
row affected
into d select
commit;
begin;
会话：
320000013f0110;asc 2
000000000717;
80000001;asc
000000000717;
3
trx
Duplicate
(0.00 sec)
成功获得S锁，请求X锁，record成功获得S锁，请求X锁，
Warnings:
2.
lock，等待会话2释放锁
entry
asc
asc
一个提交，
申请S锁，等待中
insert into d select 1;
表7-14
i
begin;
会话
'1'for key'PRIMARY
mode
0
二
一个回滚，都是在多会话并发中因为
；
*** WE ROLL BACK TRANSACTION
Locks
trx id 1817 lock mode S
record lock,等待会话1释放锁
申请S锁，等待中
insert into d select 1;
产生死锁，回滚
begin;
会话2
bits 32
info
---
## Page 313
mysql
TRANSACTION 1857, ACTIVE 26 sec starting index read
2017-09-07T16:26:30.055935Z
相关的死锁日志如下：
整个死锁的模拟过程如下表7-15 所示。
3
mysql> select
一
数据情况如下：
insert into test values(1,1),(2,2),(4,4);
我们插入3条数据。
CREATE TABLEtest
还是先构建表结构信息，这里需要使用两个会话。
rows in set (0.00 sec)
场景5：delete 和 insert 混合的死锁
发起时间
id丨
ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;
UNIQUE KEY
12
PRIMARY
`a
id
（1）
12
L
int(11)
tables
a
TRANSACTION:
4
KEY
* from test;
unsigned NOT NULL AUTO_INCREMENT,
insert into test (id, a) values (10,2);
use
delete from test where a=2;
a
a
ocked
begin;
会
话
14
[Note]
表7-15
detected, dumping detailed information.
InnoDB:
：Transactions deadlock
delete from test where a = 2;