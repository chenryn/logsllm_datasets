tation Implf is used to compute the result of this function
application; that bitstring is then stored in η. Similarly for
an application nonce(). If the adversary requests a function
evaluation send (x) the adversary is given the bitstring η(x);
in the case recv (), the adversary provides a bitstring that is
then stored in η.
The following deﬁnition formalizes the computational ex-
ecution of RCF expressions. We assume that each RCF
expression has a unique7 normal form (a structure) with
7The uniqueness of normal forms can be achieved, for in-
stance, by imposing a lexicographical order on structures.
393the property that bound names are distinct from free names
(and similarly for variables). We also assume that the bound
names of the normal form are distinct from the free names
of σM
DY. We follow the convention that “fresh variable” or
“name” means a variable or name that does not occur in any
of the variables maintained by the algorithm, nor in σM
DY.
The parts in angle brackets (h· · · i) can be ignored, as they
deﬁne the symbolic RCF-execution which will be discussed
in the next section.
Definition 13
(Computational RCF-execution).
Let M be a DY model and let Impl be a computational
implementation for M. Let A be an expression such that
M ⊢ A, and let Adv be an interactive machine called the
adversary. hAdv is a non-deterministic machine that only
sends m if S ⊢CoSP m where S are the messages sent
to Adv so far.i We deﬁne the computational hsymbolici
RCF-execution as an interactive machine ExecImpl
A (1k)
hSExecAi that takes a security parameter k as argument
hthat does not take any argumenti and interacts with Adv:
Start: Let η be a totally undeﬁned partial function mapping
variables to bitstrings htermsi. (η provides an environment
giving bitstring htermi interpretation to the variables occur-
ring in the current expression.)
Main Loop: Let S = νa1 . . . al. ( Π
i∈1...m
assume Ci (cid:31)
Π
cj!Mj (cid:31) ( Π
Lk{ek})) be the normal form of A.
k∈1...o
j∈1...n
Here Lk stands for nested lets as given by the following
grammar: L := {} | let x = L in B. Let E := {x = y :
x 6= y, η(x) = η(y)} be a set of formulae. Send (S, E) to
the adversary and proceed depending on the type of message
received from Adv as follows:
• When receiving (sync, j, k) from Adv, if ek = cj ?, then
set A := B, where B is the expression obtained from S
by removing cj !Mj and replacing Lk{ek} by Lk{Mj};
• When receiving (step, k):
– If ek = x (y1, . . . , yn) with x = lib f for some con-
structor or destructor f of arity n and y1, . . . , yn ∈
dom η: Let m := Implf (η(y1), . . . , η(yn)) hm :=
If m 6= ⊥, set η :=
eval f (η(y1), . . . , η(yn))i.
η ⊎ (z := m) for fresh z and m′ := some z.
If
m = ⊥, set η := η and m′
Set
A := S{Lk{m′}/Lk{ek}};
:= none.
– If ek = nonce M , then pick r ← Impln(1k) for
8 hlet r be a fresh protocol noncei
some n ∈ NP
and set η := η ⊎ (z := r) for fresh z and A :=
S{Lk{z}/Lk{ek}}.
– If ek = recv M , then request a bitstring htermi m
from the adversary and set η := η ⊎ (z := m) for
fresh z and A := S{Lk{z}/Lk{ek}}.
– If ek = send x with x ∈ dom η: Send η(x) to the
adversary and set A := S{Lk{()}/Lk{ek}}.
– If
ek
=
(λx.B) N ,
let A
:=
S{Lk{B{N/x}}/Lk{ek}}.
– If Lk{ek} = L′{let x = M in B}: Set A :=
S{Lk{B{M/x}}/Lk{ek}}.
8The
Impln(1k) does not depend on the choice of n.
enc-sig-implementation
conditions
ensure
that
– If ek = (M = N ): For every x ∈ dom η,
let ρ(x) be the lexicographically ﬁrst y ∈ dom η
with η(x) = η(y).9
DY, let
b := true, otherwise let b := false. Set A :=
S{Lk{b}/Lk{ek}}.
DY = N ρσM
If M ρσM
– If ek = let (x, y) = (M1, M2) in B: Set A :=
S{Lk{B{M1/x, M2/y}}/Lk{ek}}.
– If ek = match M with h x then B1 else B2: If M
is of the form h N , let B := B1{N/x}, otherwise
let B := B2. Set A := S{Lk{B}/Lk{ek}}.
– If ek = assert C: Set A := S{Lk{()}/Lk{ek}}.
• If none of these cases apply, do nothing.
⋄
For a given polynomial-time interactive machine Adv,
a closed expression A, and a polynomial p, we let
Trace Impl
Adv,A,p(k) denote the list of pairs (S, E) output by
ExecImpl
A (1k) (at the beginning of each loop iteration) within
the ﬁrst p(k) computation steps (jointly counted for Adv(1k)
and ExecImpl
A (1k)).
Definition 14
(Statical equation-σ-safety).
Let σ be a substitution. A pair (S, E) of a structure S
and a set E of equalities between variables is statically
equation-σ-safe iﬀ P, eqs ⊢ C where P and C are the active
assumptions and assertions of S, vars := fv (E) ∪ dom σ,
exterms is the set of all FOL/F-subterms h(t) of P, C with
h forbidden and t closed, and
eqs := E ∪ {x 6= x′ : x, x′ ∈ vars , x 6= x′, (x = x′) /∈ E}
∪ {∀y.x 6= c(y) : x ∈ vars ,
c non-forbidden function symbol}
∪ {x 6= t : x ∈ vars, t ∈ exterms }.
⋄
We add the facts eqs in order to tell the logic what is
known about the environment η in the computational execu-
tion. More precisely, we have x = x′ whenever η(x) = η(x′)
and x 6= x′ otherwise. Furthermore, we have equations
x 6= x′ when x and x′ are library functions (intuitively,
this is justiﬁed because we assume all our libraries to be
equality-friendly), and x 6= x′ when x is a library function
and x′ refers to the environment (i.e., represents a bitstring).
The equations x 6= t with t ∈ exterms are best explained
by an example: Let A0 := let x = nonce in let x′ =
(λz.z) in assume (x = x′); assert (false). Then A0 is robustly
→-σM
DY(nonce) =
λz.z) (cid:31) assert (false) and we have nonceσM
DY = (λz.z) ⊢
false (this is implied by equality-friendliness). In the com-
putational execution, however, we get the process A =
assume (nonce = λz.z) (cid:31) assert (false), thus for robust com-
putational safety, we need that nonce = (λz.z), eqs ⊢ false
holds. For this, we need the inequalities x 6= t in eqs. No-
tice that these extra inequalities are necessary only because
the logic allows us to compare lambda-abstractions syntac-
tically.
DY reduces to assume (σM
DY-safe: A0σM
Definition 15
(Robust computational safety).
Let Impl be a computational implementation. Let A be
an expression with M ⊢ A. We say that A is robustly
9We use ρ to unify variables that refer to the same messages.
This is necessary because the test M σM
DY without
ρ would treat these variables as distinct terms.
DY = N σM
394computationally safe using Impl if for all polynomial-time
interactive machines Adv and all polynomials p, we have
that Pr[all components of Trace Adv,A,p(1k) are statically
equation-σM
⋄
DY-safe] is overwhelming in k.
At the ﬁrst glance, it may seem strange that the deﬁnition
of robust computational safety is parametrized by the sym-
bolic library σM
DY. An inspection of Deﬁnition 14, however,
reveals that the deﬁnition only depends on the domain of
σM
DY, i.e., on the set of cryptographic operations available
to A.
5.2 Symbolic vs. computational execution
As described in Section 1.1, we now introduce an interme-
diate semantics, the symbolic RCF-execution. This execu-
tion is speciﬁed in Deﬁnition 13 (by reading the parts inside
the h. . . i), and is the exact analogue to the computational
RCF-execution, except that it performs symbolic operations
instead of computational ones.
We write SExecA in the set of lists of pairs (S, E) that
can be sent in the symbolic execution. Like for the compu-
tational RCF-execution, these pairs (S, E) contain the in-
formation needed to check whether the active assumptions
entail the active assertions. This allows us to express robust
safety in terms of the symbolic RCF-execution:
Definition 16
(Robust SExec-safety). Let A be an
expression and M a DY model such that M ⊢ A. We say that
A is robustly SExec-safe iﬀ for any ((S1, E1), . . . ) ∈ SExecA,
we have that (Si, Ei) is statically equation-σM
DY-safe for all i.
⋄
We are now ready to establish the link between robust
;-σM
DY-safety and robust SExec-safety.
Lemma 2. If M ⊢ A0 and A0 is robustly ;-σM
DY-safe,
then A0 is robustly SExec-safe.
5.3 Computational soundness
of the DY-library
We will now use the CoSP framework [7] to derive condi-
tions under which robust SExec-safety implies robust com-
putational safety. In order to do so, we ﬁrst deﬁne a CoSP
protocol ΠA0 that simultaneously captures the behavior of
the symbolic execution and the one of the computational ex-
ecution. Then, computational soundness results in the CoSP
framework guarantee that the security of ΠA0 (interpreted
symbolically) implies security of ΠA0 (interpreted computa-
tionally). Hence robust SExec-safety implies robust compu-
tational soundness. Together with the fact that →-safety
implies SExec-safety, we get our ﬁrst computational sound-
ness result for RCF.
Notice that the algorithm describing the symbolic ex-
ecution performs only the following operations on CoSP-
terms: Applying CoSP-constructors (this includes nonces)
and CoSP-destructors, doing equality tests on terms, and
sending and receiving terms. All these operations are avail-
able in CoSP protocols, too. We can therefore construct a
CoSP protocol ΠA0 that, when executed symbolically, em-
ulates the machine SExecA0 . Furthermore, the same CoSP
protocol ΠA0 , when executed computationally, emulates the
computational execution ExecImpl
A0 . We call failure nodes
those nodes in the CoSP protocol ΠA0 which correspond
to sending (S, E) to the adversary such that (S, E) is not
statically equation-σM
DY-safe.
Theorem 1. Assume a DY model M and a computa-
tional implementation Impl. Assume that Impl is a compu-
tationally sound implementation of M for a class P of CoSP
protocols (Deﬁnition 6). Let σM
DY be a DY library for M.
Let A0 be an eﬃciently decidable10 RCF expression with
M ⊢ A0 and ΠA0 ∈ P.
If A0σM
DY is robustly →-safe or A0 is robustly ;-σM
then A0 is robustly computationally safe using Impl.
DY-safe,
By Lemma 1, A0 is robustly ;-σM
Proof.
DY-safe. By
Lemma 2, A0 is robustly SExec-safe. By construction of
ΠA0 , we have that A0 is robustly SExec-safe iﬀ the sym-
bolic CoSP-execution of ΠA0 reaches failure nodes only with
negligible probability. Let ℘ be the set of all sequences of
node identiﬁers that do not contain failure nodes. Then ΠA0
symbolically satisﬁes the CoSP-trace property ℘. Since A0
is eﬃciently decidable, it can be decided in polynomial-time
whether a node is a failure node. Thus ℘ is an eﬃciently
decidable trace property. Since Impl is a computationally
sound implementation of M for a class P of CoSP protocols,
and ΠA0 ∈ P, ΠA0 computationally satisﬁes the CoSP-trace
property ℘. Then, again by construction of ΠA0 , we have
that A0 is robustly computationally safe iﬀ the computa-
tional CoSP-execution of ΠA0 never reaches a failure node.
Thus A0 is robustly computationally safe with respect to
Impl.
5.4 Encryption and signatures
In the preceding section, we derived a generic compu-
tational soundness result for RCF programs (Theorem 1),
parametric in the symbolic model. To apply that result to a
speciﬁc symbolic model, we need a computational soundness
result in CoSP for that particular model. In [7], such a re-
sult is presented for a symbolic model supporting encryption,
signatures, and arbitrary strings as payloads.
The symbolic model. We ﬁrst
model Mes = (C, N, T, D, ⊢CoSP):
specify the DY
• Constructors:
are
decryption,
and signing
Encryption,
keys
veriﬁ-
cation,
represented as
ek(r), dk(r), vk(r), sk(r) with a nonce r (the randomness
enc(ek(r′), m, r)
used when generating the keys).
encrypts m using the encryption key ek(r′) and
sig(sk(r′), m, r) is a signature of m
randomness r.
using the signing key sk(r′) and randomness r. The
constructors string0,
string1, and empty are used
to model arbitrary strings used as payload in a
protocol (e.g., a bitstring 010 would be encoded as
string0(string1(string0(empty)))). garbage, garbageEnc,
and garbageSig are constructors necessary to express
certain invalid terms the adversary may send, these
constructors are not used by the protocol.
• The message type T describes which terms are consid-
ered well-formed. We omit the details here.
• Destructors:
The destructors isek, isvk, isenc, and
issig realize predicates to test whether a term is an
encryption key, veriﬁcation key, ciphertext, or signa-
ture, respectively.
ekof extracts the encryption key
from a ciphertext, vkof extracts the veriﬁcation key
from a signature. dec(dk(r), c) decrypts the ciphertext
10A0 is eﬃciently decidable if, at runtime, no assertions occur
for which it cannot be decided in polynomial-time whether
they are entailed. A precise deﬁnition is given in the full
version.
395c. verify(vk(r), s) veriﬁes the signature s with respect to
the veriﬁcation key vk(r) and returns the signed mes-
sage if successful. The destructors fst and snd are used
to destruct pairs, and the destructors unstring0 and
unstring1 are used to parse payload-strings.
• The deduction relation ⊢CoSP and the set N of nonces
are as in Deﬁnition 7.
CoSP [7] also speciﬁes conditions a computational imple-
mentation Impl for Mes should fulﬁll. Essentially, these con-
ditions ensure that the encryption scheme used is IND-CCA
secure, the signature scheme is strongly existentially unforge-
able, and that certain conventions for tagging the diﬀerent