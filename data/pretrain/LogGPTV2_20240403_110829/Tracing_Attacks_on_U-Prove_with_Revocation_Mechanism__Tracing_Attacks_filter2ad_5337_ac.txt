t
Of course, if the set of revoked users increases over time to some
Yk(cid:48)−2
value k(cid:48) (k(cid:48) > k), then to ﬁnd the newly used g
,
, g
t
t only k(cid:48) − k colluding users are needed. The same follows
. . . , gYk
for the accumulator V : if gYk−1
are found and
V = Qid · W xid
is calculated by a user with the revocation
attribute xid and the witness (did, Wid, Qid), then gYk
is easily
t
calculated from V , gYk−1
Assume that f is the polynomial (5) from the current revocation
round, and that deg f ≤ k. Then a user with revocation attribute
xid knowing f and the powers gYj
, for j = 1, . . . , k, can eas-
ily calculate the accumulator value and its non-revocation witness.
Indeed, he computes
, . . . , gY1
t
, gYk−2
.
t
t
t
t
did := f (−xid)
(9)
(cid:17)µid,j
gYj+1
t
(10)
and the quotient polynomial (6). Finally, he directly computes:
(cid:16)
(cid:17)µid,j
Wid :=(cid:81)k−1
for µid,j such that gid(X) = (cid:80)k−1
, Qid :=(cid:81)k−1
gYj
t
j=0
j=0
(cid:16)
t
j=0 µid,jX j. Note that in these
computations Qid corresponds to Wid shifted by one step to the
“higher” powers gYj+1
reﬂecting the presumed relation Qid =
id.
W δ
A similar method can be applied if witnesses are updated by the
users. Moreover, if the initial set of revoked users is empty, then
all the necessary data for building the direct method are available to
each single user (the user may create virtual identities xid to com-
pute their witnesses and thus to gather the data for the system (8)).
Once the direct method of computing Wid and Qid is obtained, it
can be used interchangeably with UpdateWitness( ).
It can be checked that the direct method and the UpdateWitness( )
yield the same results. A fairly tedious computation is omitted here
due to space limitations.
2.3.3 Tracing the Users
We assume that the Revocation Authority knows all the values
xid. Since gδ = K, we have
X δ
Y
=
id · gt1δ
W δ
Qid · K t1
=
W δ
id
Qid
.
1It may happen that the matrix in not invertible, but during a large
number of experiments we never encountered such a case.
t
t
.
Y
The ex-
ponent on the right hand side should depend on xid provided that
deg f ≥ 3. The condition deg f ≥ 3 is not a real limitation, as the
Revocation Authority may create 3 dummy users and revoke them.
The matching xid is found easily, if the values ggid(α1)−gid(α2)
are
precomputed after each revocation round.
2.3.4 Attack Countermeasures
The attack can be prevented, if the sequence ∆0, ∆1, ∆2, . . . is
published together with the zero knowledge proofs for log∆i
logg K for each i. However, the number of revoked attributes might
be large, so the number of zero knowledge proofs becomes linear
in the number of the revoked users. This does not seem to be very
practical.
The problem also arises when creating the initial witnesses when
the user joins the system. At this moment we need a proof of
correctness for W and Q. This is not easy as the cardinality of
the set R may be quite large. So the degree of polynomials in the
exponent of the expressions deﬁning W and Q might be large and
therefore long proofs might be necessary.
3. FINAL REMARKS
The list of problems presented in this paper is not complete as we
are aware of more threats. In each case, one can extend the scheme
so that a particular attack does not work. However, addtitional pro-
cedures make the system even more “heavy” and can make room
for new trapdoors. Deﬁnitely, since U-Prove is a proprietary sys-
tem, this is the role of its designers decide how to patch the system.
In our attacks the Revocation Authority learns the revocation at-
tribute when asked for checking X and Y . Interestingly, for [6]
the non-revocation proof is checked by the veriﬁer himself and all
attack scenarios from this paper do not apply.
A general suggestion is to separate strictly the veriﬁer and the
Revocation Authority and blind the parameters X, Y before pass-
ing them to the Revocation Authority. That is, instead of X, Y the
Revocation Authority should get X(cid:48) = X t, Y (cid:48) = Y t for a random
t. Of course, this does not secure the user against collusion between
the veriﬁer and the Revocation Authority, as the veriﬁer must use
the original X, Y as arguments for the hash function H. So again,
the user has to trust blindly the veriﬁer.
4. REFERENCES
[1] Paquin, C., Zaverucha, G.: U-Prove Cryptographic
Speciﬁcation V1.1 (Revision 3). Technical Report, Microsoft
Research (December 2013). Available from:
http://research.microsoft.com/apps/pubs/
default.aspx?id=166969
[2] Brands, S.: Untraceable Off-line Cash in Wallets with
Observers. In Stinson, D.R., ed.: CRYPTO. Vol. 773 of
LNCS, Springer (1993) 302–318
[3] Brands, S.A.: Rethinking Public Key Infrastructures and
Digital Certiﬁcates: Building in Privacy. 1 edn. MIT Press,
Cambridge-London (2000).
607[4] Microsoft: U-Prove. Webpage of the project (retrieved
2014). Available from: http://research.microsoft.
com/en-us/projects/u-prove/
[5] Paquin, C.: On the Revocation of U-Prove Tokens. Tech.
Report, Microsoft Research (September 2014). Available
from: http://research.microsoft.com/pubs/
228729/On\%20the\%20revocation\%20of\
%20U-Prove\%20tokens.pdf
[6] Acar, T., Chow, S.S.M., Nguyen, L.: Accumulators and
U-Prove Revocation. In Sadeghi, A.R., ed.: Financial
Cryptography. Vol. 7859 of LNCS, Springer (2013) 189–196
[7] Hanzlik, L., Kluczniak, K., Kutyłowski, M.: Attack on a
U-Prove Revocation Scheme. In Christin, N., Safavi-Naini,
R., ed.: Financial Cryptography. Vol. 8437 of LNCS,
Springer (2014) 283-290
[8] Nguyen, L., Paquin, C.: U-Prove Designated-Veriﬁer
Accumulator Revocation Extension. Tech. Report Draft
Revision 1, Microsoft Research (2013, updated Feb. 2014)
[9] Nguyen, L., Paquin, C.: U-Prove Designated-Veriﬁer
Accumulator Revocation Extension. Tech. Report Draft
Version 2, Microsoft Research (2014)
APPENDIX
Below we present a speciﬁcation of procedures run by the U-Prove
Revocation system.
Input:
U-Prove parameters:
Computation:
Output:
private key δ, public key K
group Gq of a prime order q
generators g, g1, gt
choose δ ∈ Zq at random
K := gδ
Table 2: Procedure RSSetup()
Input:
RA private key:
Revocation parameter:
Set of revoked
attribute values:
Computation:
δ ∈ Zq
gt
R = {x1, . . . , xm} ⊆ Zq\{−δ}
(cid:81)m
i=1(δ+xi)
Output:
accumulator value V
V := g
t
Table 3: Procedure ComputeAccumulator()
Input:
RA private key:
Revocation parameter:
List of revoked attribute values:
Target user’s revocation attribute:
Current accumulator:
Computation:
d :=(cid:81)
((cid:81)
x∈R(x − xid) mod q
x∈R(δ+x)−d)/(δ+xid)
W := g
Q := V W −xid g−d
t
t
Output:
Revocation witness for target user
holding xid:
δ ∈ Zq
gt
R={x1, . . . , xm}∈Zq\{−δ}
xid (cid:54)∈ R
V ∈ Gq
(d, W, Q)
Table 4: Procedure ComputeWitness()
Input:
Revocation parameter:
The revocation attribute of the user:
Revocation attribute to be added
or removed from the set R:
Boolean value indicating whether
x(cid:48) has to be added to R:
Old accumulator:
Old witness of the user holding xid:
Updated accumulator:
Computation:
if add = true
else
d(cid:48) := d(x(cid:48) − xid) mod q
W (cid:48) := V W x(cid:48)−xid
Q(cid:48) := V (cid:48)W (cid:48)−xid g−d(cid:48)
d(cid:48) := d(x(cid:48) − xid)−1 mod q
W (cid:48) := ((V (cid:48))−1W )(x(cid:48)−xid)−1
Q(cid:48) := V (cid:48)W (cid:48)−xid g−d(cid:48)
t
gt ∈ Gq
xid
x(cid:48)
add
V ∈ Gq
(d, W, Q)
V (cid:48) ∈ Gq
(x(cid:48) added to R)
(x(cid:48) removed from R)
Output:
updated witness (d(cid:48), W (cid:48), Q(cid:48)) for xid
t
Table 5: Procedure UpdateWitness( )
1
1
Input:
Gq, hash function H, g, g1, gt
Revocation parameters:
˜cid, where ˜cid = gxid g ˜oid
Commitment to xid:
Opening information:
xid , ˜oid
RA public key:
K
Revocation witness:
(d, W, Q)
Computation:
generate t1, t2, k1, . . . , k6 ∈ Zq at random
X := W gt1
Y := QKt1
t gt2
Cd := gd
w := d−1 mod q
z := t1 ˜oid − t2 mod q
z(cid:48) := −t2w mod q
T1 := X k1 (˜cidK)−k2 gk3
T2 := gk1 gk4
1
T3 := Ck5
d gk6
c(cid:48) := H(g, g1, gt, K, ˜cid, X, Y, Cd, T1, T2, T3)
s1 := −c(cid:48)xid + k1 mod q
s2 := −c(cid:48)t1 + k2 mod q
s3 := −c(cid:48)z + k3 mod q
s4 := −c(cid:48) ˜oid + k4 mod q
s5 := −c(cid:48)w + k5 mod q
s6 := −c(cid:48)z(cid:48) + k6 mod q
delete t1, t2, k1, ..., k6, w, z, z(cid:48), T1, T2, T3
Output: non-revocation proof (c(cid:48), s1, . . . , s6, X, Y, Cd) for xid
1
1
Table 6: Procedure GenerateNonRevocationProof()
Gq, H, g, g1, gt
˜cid
c(cid:48), s1, . . . , s6, X, Y, Cd
K
δ
V
Input:
Revocation parameters:
Commitment to xid:
Non-revocation proof:
Revocation Authority public key:
Revocation Authority private key:
Revocation accumulator:
Computation:
T1 := (V Y −1(Cd)−1)c(cid:48)
T2 := ˜cc(cid:48)
T3 := gc(cid:48)
verify that c(cid:48) = H(g, g1, gt, K, ˜cid, X, Y, Cd, T1, T2, T3)
verify that Y = X δ
id gs1 gs4
t (Cd)s5 gs6
X s1 (˜cidK)−s2 gs3
1
1
1
Table 7: Procedure VerifyNonRevocationProof()
608