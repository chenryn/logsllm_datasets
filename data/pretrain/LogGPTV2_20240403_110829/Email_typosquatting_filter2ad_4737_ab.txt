### 4.2 Collection Methodology

In this section, we discuss the process of selecting and registering a set of domains for our study, followed by an overview of our data collection infrastructure. We then explain how we post-processed the acquired data using a layered filtering system to remove spam from our corpus.

#### 4.2.1 Domain Registration

When deciding which domain names to register, we had to satisfy several constraints and achieve three main objectives.

**Constraints:**
1. **Budgetary Constraints:** While the cost of registering individual domains is relatively low (ranging from $8 to $20 per year, depending on the registrar and top-level domain), the process can be time-consuming. Therefore, we limited ourselves to a maximum of a few hundred domains.
2. **Availability:** Many of the most interesting typo domains are already registered, either by the trademark owners or by typosquatters. This forced us to choose from the available options. Despite this, there are millions of potential gtypos (typo variations) for the top 10,000 domains according to Alexa rankings. Even though hundreds of thousands are already registered, we were able to select a few dozen typosquatting domains that could provide representative outcomes.

**Objectives:**
1. **Representative Signal:** Our primary goal was to find typo domains that would provide a representative and measurable signal, as we had no prior knowledge of the volume of emails we would receive.
2. **Comparison of Typing Mistakes:** We aimed to compare different types of DL-1 typing mistakes (e.g., deletion and substitution) to understand their respective impacts.
3. **Measuring Different Kinds of Typos:** We wanted to register a corpus of domains that would allow us to measure various kinds of typos, such as receiver, SMTP, and reflection typos.

**Strategy:**
To maximize the probability of receiving emails, we targeted some of the most popular domains. We selected target domains with a high Alexa rank in the email category, focusing on major email providers like Google, Microsoft, Yahoo, Apple, and Mailchimp. We also included "second-tier" email providers such as Rediffmail Pro, GMX, AOL, Hushmail, and ZohoMail.

We hypothesized that disposable and instant email address providers would generate more reflection typos. Therefore, we registered typos of domains like 10 Minute Mail (10minutemail.com) and YOPmail (yopmail.com).

To assess the risks associated with SMTP typos, we registered typos linked to popular Internet Service Providers (ISPs) that offer SMTP services, such as AT&T, Comcast, Cox, TWC, and Verizon. Additionally, we chose sensitive financial domains like PayPal and Chase, registering a few domains targeting SMTP typos on these.

For each target domain, we registered multiple typo domains to compare the impact of different typing mistakes on the amount of email received. The complete list of 76 registered domains and additional information can be found in the online appendix.

#### 4.2.2 Collection Infrastructure

Figure 1 provides a high-level overview of our data collection infrastructure. Each typo domain is assigned a different Virtual Private Server (VPS), which forwards the data to our main collection server. This setup helps prevent potential issues, such as being flagged as security researchers by spammers. To distinguish between different SMTP typo mistakes, we used a one-to-one mapping of domain names to VPS IP addresses, as the SMTP protocol does not require the domain name of the SMTP server to be included in the headers.

Table 1 shows our DNS settings for each registered domain, including wildcard subdomains to collect typo domains sent to any subdomains. We run Postfix on our main collection server, configured to accept any email sent to any address. The username and domain name can be random strings. Our collection server never sends out emails but forwards them to a processing and storage server (not shown in the figure).

**Email Processing Pipeline:**
Figure 2 describes our email processing pipeline. Upon receiving an email, it is first fed into SpamAssassin [7]. Emails identified as spam are flagged but not discarded. We then tokenize the email into header, body, and attachments, save header information, and run the body and any attachments through a text extraction module (Textract [6]), which handles various file formats, including performing optical character recognition on image files.

**Filtering Out Sensitive Information:**
The extracted text is sent to a filtering system based on regular expression matching to flag and discard sensitive information. We use the HIPAA list of personal identifiers [3] as a baseline. Personal identifiers are replaced with salted hashes, and all digits in the text are replaced with zeros to protect user privacy.

We tested our regular expression matching heuristics using the public Enron email corpus [25] (May 7, 2015 version). Table 2 shows the precision and sensitivity for each type of sensitive information. These metrics are more useful than accuracy in our context due to the imbalanced dataset.

Each score in Table 2 is computed based on sampling 20 random emails per type of sensitive information (except for social security numbers, for which we only had 13 examples). The results show high recall for most sensitive information, except for identification numbers. To further validate our results, we sampled an additional 100 random emails from the Enron dataset and manually labeled them, finding high sensitivity for phone numbers, emails, and dates.

After processing, each part (header, body, attachment) and most log files are encrypted for storage on our collection server.

### 4.3 Email Classification

After running our experiment for a few days, it became clear that we were receiving large amounts of spam, which could bias our analysis. Spam can come from miscreants noticing our servers accept any email or from users mistyping their own email addresses (reflection typos) and being added to promotional lists. Some of our domains might have been previously registered and still appear in certain promotional lists.

To address this, we developed a filtering and classification module that not only removes spam but also classifies reflection typo emails resulting from single typos. Our classification module consists of five layers, acting as a funnel: emails marked as spam in any layer are not further considered.

**Layer 1: Detecting Erroneous Header Fields:**
Emails where the name of the SMTP server relaying the mail to our collection server does not match one of our registered domains are immediately classified as spam. The senderâ€™s address should not belong to one of our domains, as we do not send any email. Conversely, spammers often pose as sending from the same domain as the intended recipient. Thus, any email where the sender appears to be one of our domains is classified as spam.

**Layer 2: SpamAssassin:**
We run SpamAssassin on all incoming emails. Table 3 shows our evaluation of SpamAssassin in local mode with default thresholds on four different datasets. While precision is good, the low recall indicates the need for additional filtering. We immediately remove all emails with ZIP or RAR attachments, as they are typically spam.

**Layer 3: Collaborative Spam Filtering:**
If a sender sends us spam once, we consider all emails from that sender across all our domains to be spam. We also apply bag-of-words analysis to the email body. If the analysis yields more than 20 words, we flag all other emails with a matching bag-of-words as spam. This step has high precision because it is unlikely that two emails using the same corpus of words would be both spam and ham.

**Layer 4: Detecting Reflection Typos:**
Emails surviving the first three layers might not be spam but could still be the product of automated systems. For example, a user might have made a typo while signing up for a service and subsequently received notifications to the erroneous address. We classify these emails using regular expression heuristics. If an "unsubscribe-list" header field is present, or if "bounce" or "unsubscribe" appears in the Sender:, From:, or Reply-To: fields, or if any two of From:, Reply-To:, or Return-Path: have different values, we classify the email as a reflection typo. We also search for strings like "unsubscribe," "remove yourself," and similar content in the body to flag reflection typos. Additionally, we filter out emails sent from system users, such as "postmaster," "root," or "admin."

**Layer 5: Frequency-Based Filtering:**
Finally, the last layer filters out receiver typo emails (but not SMTP typos) for which the sender address, recipient email address, or email body appear too frequently.