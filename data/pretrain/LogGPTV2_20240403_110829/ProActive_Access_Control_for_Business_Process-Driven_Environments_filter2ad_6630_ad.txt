### Cache Entry and Policy Decision Point (PDP) Evaluation

A cache entry is a stored response from a simulated request, containing the final decision of a PDP's request evaluation. The result of a cache entry assumes that all open constraints evaluate to true, regardless of the actual dynamic context information during the evaluation. For example, if a permission \( P \) is stored in a cache entry, it assumes that the current time is between 6 a.m. and 8 p.m., independent of the actual time during the evaluation.

When a cache entry is used to answer an access request, the open constraints are checked against the real values of the dynamic context given the current system status. If all open constraints (OCs) evaluate to true, the stored permission holds, as it did during the initial evaluation.

### Caching Architecture

We propose that the policy decision point (PDP) be used to evaluate simulated requests and return decisions for use in cache entries. As described, we have different types of constraints. For cache creation, role-based permissions, separation of duty (SoD), binding of duty (BoD), and cardinality constraints can be evaluated as for any regular decision request. Constraints related to date, time, and attributes must be assumed to be true for the evaluation of the simulated request. If the PDP recognizes a request from the cache management component, it needs additional functionality to react accordingly.

The cache also requires the functionality to evaluate open constraints. In Figure 4, this is depicted by applying an Open Constraint Evaluator to the Cache.

**Figure 4: Caching Architecture**
- **PEP (Policy Enforcement Point)**
- **Cache**
- **Open Constraint Evaluator**
- **PDP (Policy Decision Point)**
- **Policy Storage**
- **Dependency Storage**
- **Event Listener**
- **Cache Management Component**

### Benchmarking the Architecture

To evaluate the efficiency of our proposed approach, the following criteria were considered:
1. Comparison of decision request evaluation performance with and without the caching component.
2. Comparison of the proposed caching strategy with different constraint types.

We implemented the proposed architecture and benchmarked the two mentioned goals. Our implementation includes a PDP component using a rule engine, specifically JBoss DROOLS [10], to develop a declarative approach for an access decision evaluation engine. For the benchmark, we generated role-based permissions, policies with SoD constraints, and policies with attribute-based constraints. Our test policy includes 1500 users, assigned to 15 roles (100 users each), and an overall number of 1700 permissions.

This was tested against a filled cache, assuming 1000 parallel running process instances, with each instance having approximately 60 cache entries (10 pre-computed entries for the actions `cancelProcess` and `restartProcess`, 40 entries for concurrent active task instances, and 10 pre-computed entries for BO Calls). We assumed that for each access request, a cache entry is available if the cache is used.

Context information retrieval needed for access evaluation (e.g., the list of executed tasks by a user) is realized by querying a local database. The PEP Cache is implemented as a hash table where the target of a decision response functions as the key. The values stored in the table are the pre-computed permission (i.e., `PERMIT` or `DENY`) and optionally open constraints.

The tests were performed using JAPEX [9], a micro-benchmarking framework, on an Intel Pentium Dual Core system with 2.0 GHz and 1.5 GB RAM.

**Benchmark Results:**
- **Test Case 1:** 50 requests purely based on role-based evaluation (RBAC).
- **Test Case 2:** 80% RBAC, 20% SoD (including history selection from the database).
- **Test Case 3:** 60% RBAC, 20% SoD, 20% attribute-based policy evaluation.

**Figure 5: Benchmark results**
- **Response Times (in milliseconds):**
  - **100% RBAC:**
    - With Cache: 18 ms
    - Without Cache: 130 ms
  - **80% RBAC, 20% SoD:**
    - With Cache: 18 ms
    - Without Cache: 70 ms
  - **60% RBAC, 20% SoD, 20% Attribute-based:**
    - With Cache: 18 ms
    - Without Cache: 51 ms

The results show that the more external context data is required (e.g., history data of a user), the longer the response time. This also applies to cache entries with open constraints (i.e., attribute-based constraints), which require additional context retrieval, increasing the response time. There is a significant overall difference in response times with and without the cache.

### Concept Evaluation

The presented concept relies on the fact that business process executions have predefined states, and every state has a limited set of actions that might be performed next. This means that the developed dependency relations for a particular system rely on the validity of process and task management information. While this remains true for process and task management, process definitions may change, requiring updates to the dependency relations. Similarly, changes in policy definitions, especially regarding new or modified open constraints, necessitate updating the cache entries. A typical approach is to flush the cache whenever the policy changes.

We propose pre-evaluating access decisions only for subsequent upcoming events, rather than pre-computing entries for the entire process. This approach avoids polluting the cache with unnecessary entries and ensures that entries are generated only when the relevant information is available.

There is flexibility in when cache entries can be pre-computed, within the period between the occurrence of the trigger event and the event for which the cache entry is generated. Entries can be generated whenever the system responsible for creating cache entries has spare time.

**Security Considerations:**
- **Cache Entries:** Vulnerable to manipulation, deletion, etc.
- **Communication Channels:** Between the cache, PEP, PDP, context providers, and cache manager.
- **Open Constraints:** When evaluated on the cache side, and potentially manipulated received information from context providers.

These vulnerabilities will be further analyzed in the future, and appropriate security measures will be proposed.

### Conclusion

In this work, we presented a caching solution for access control decisions in business process-driven environments. The proposed caching strategy leverages the fact that business processes execute within a small margin of actions that always occur in a predefined order, allowing for pre-computation of cache entries exactly when needed. We implemented and benchmarked our solution, demonstrating a significant performance gain.

### References

[1] Wei, Q., et al., "Authorization recycling in RBAC systems", Proc. of the ACM Symposium on Access Control Models and Technologies, 2008.
[2] Crampton, J., et al., "The secondary and approximate authorization model and its application to Bell-LaPadula policies", Proc. of the ACM Symposium on Access Control Models and Technologies, 2006.
[3] Nielsen, J., "Usability Engineering", Morgan Kaufmann, 1993.
[4] Kohler, M., et al., "Classification Model for Access Control Constraints", Proc. of Performance, Computing, and Communications Conference, 2007.
[5] Aalst, W.v.d., Hee, K.v., "Workflow Management: Models, Methods, and Systems", MIT Press, 2004.
[6] WfMC (Workflow Management Coalition), "Workflow Reference Model", in http://www.wfmc.org/standards/referencemodel.htm.
[7] Miller, R. B., "Response time in man-computer conversational transactions", Proc. of the Spring Joint Computer Conference, 1968.
[8] Miseldine, P. L.: "Automated XACML Policy Reconfiguration for Evaluation Optimisation", International Conference on Software Engineering, ACM, 2008.
[9] JAPEX, "Micro-benchmarking Framework", in https://japex.dev.java.net.
[10] JBoss, a division of Red Hat, "DROOLS", in http://www.jboss.org/drools.
[11] Wimmer, M., and Kemper, A., "An authorization framework for sharing data in web service federations", Proc. of VLDB Workshop on Secure Data Management, 2005.
[12] Beznosov, K., "Flooding and Recycling Authorizations", Proc. of New Security Paradigm Workshop, 2005.
[13] Sandhu, R. S., et al., "The NIST model for role-based access control: towards a unified standard", In ACM Workshop on Role-Based Access Control, ACM Press, 2000.